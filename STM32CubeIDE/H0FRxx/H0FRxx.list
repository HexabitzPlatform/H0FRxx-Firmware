
H0FRxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001741c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000339c  080174d8  080174d8  000274d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a874  0801a874  00030a88  2**0
                  CONTENTS
  4 .ARM          00000008  0801a874  0801a874  0002a874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a87c  0801a87c  00030a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a87c  0801a87c  0002a87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a884  0801a884  0002a884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    0000000c  20000000  0801a888  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a78  20000010  0801a894  00030010  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006858  20000a88  0801b30c  00030a88  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200072e0  0801b30c  000372e0  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a88  2**0
                  CONTENTS, READONLY
 13 .debug_info   00054f15  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00009697  00000000  00000000  000859c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001aace  00000000  00000000  0008f05c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001a78  00000000  00000000  000a9b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002ec8  00000000  00000000  000ab5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000179b4  00000000  00000000  000ae470  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a587  00000000  00000000  000c5e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d03ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006364  00000000  00000000  000d0428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a88 	.word	0x20000a88
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080174c0 	.word	0x080174c0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a8c 	.word	0x20000a8c
 8000100:	080174c0 	.word	0x080174c0

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	08017b64 	.word	0x08017b64
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	08017ba4 	.word	0x08017ba4
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	08017be4 	.word	0x08017be4
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d28:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d2a:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 8002d2c:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d2e:	b29b      	uxth	r3, r3
	if(temp == 0xFFFF)				// Memory has been erased
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d035      	beq.n	8002da0 <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d34:	0a1e      	lsrs	r6, r3, #8
		if(N == 0)
 8002d36:	d02c      	beq.n	8002d92 <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <LoadROtopology+0x94>)
 8002d3a:	b2f6      	uxtb	r6, r6
 8002d3c:	7016      	strb	r6, [r2, #0]
			N =1;
		myID =(uint8_t )temp;
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <LoadROtopology+0x98>)
 8002d40:	7013      	strb	r3, [r2, #0]
 8002d42:	466b      	mov	r3, sp
 8002d44:	1dd9      	adds	r1, r3, #7
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d46:	2300      	movs	r3, #0
		myID =(uint8_t )temp;
 8002d48:	2202      	movs	r2, #2
 8002d4a:	2401      	movs	r4, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d4c:	469c      	mov	ip, r3
 8002d4e:	4d1c      	ldr	r5, [pc, #112]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d50:	4663      	mov	r3, ip
 8002d52:	700b      	strb	r3, [r1, #0]
 8002d54:	780b      	ldrb	r3, [r1, #0]
 8002d56:	2b0a      	cmp	r3, #10
 8002d58:	d814      	bhi.n	8002d84 <LoadROtopology+0x60>
 8002d5a:	1e63      	subs	r3, r4, #1
 8002d5c:	0098      	lsls	r0, r3, #2
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d5e:	18c0      	adds	r0, r0, r3
 8002d60:	0040      	lsls	r0, r0, #1
 8002d62:	18c0      	adds	r0, r0, r3
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <LoadROtopology+0x8c>)
 8002d66:	18d7      	adds	r7, r2, r3
 8002d68:	780b      	ldrb	r3, [r1, #0]
 8002d6a:	883f      	ldrh	r7, [r7, #0]
 8002d6c:	18c3      	adds	r3, r0, r3
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	52ef      	strh	r7, [r5, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d72:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002d74:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d76:	3301      	adds	r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	700b      	strb	r3, [r1, #0]
 8002d7c:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002d7e:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d80:	2b0a      	cmp	r3, #10
 8002d82:	d9ef      	bls.n	8002d64 <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 8002d84:	3401      	adds	r4, #1
 8002d86:	b2e4      	uxtb	r4, r4
 8002d88:	42b4      	cmp	r4, r6
 8002d8a:	d9e1      	bls.n	8002d50 <LoadROtopology+0x2c>
 8002d8c:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 8002d8e:	b003      	add	sp, #12
 8002d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 8002d92:	2101      	movs	r1, #1
 8002d94:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 8002d96:	2601      	movs	r6, #1
			N =1;
 8002d98:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8002d9a:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <LoadROtopology+0x98>)
 8002d9c:	7013      	strb	r3, [r2, #0]
 8002d9e:	e7d0      	b.n	8002d42 <LoadROtopology+0x1e>
		N =1;
 8002da0:	2201      	movs	r2, #1
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 8002da4:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 8002da6:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002da8:	2200      	movs	r2, #0
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <LoadROtopology+0x98>)
 8002dac:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002dae:	e7ee      	b.n	8002d8e <LoadROtopology+0x6a>
 8002db0:	0801d800 	.word	0x0801d800
 8002db4:	0000ffff 	.word	0x0000ffff
 8002db8:	20000010 	.word	0x20000010
 8002dbc:	20000aa8 	.word	0x20000aa8
 8002dc0:	20000ee4 	.word	0x20000ee4

08002dc4 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc6:	46c6      	mov	lr, r8
 8002dc8:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002dca:	4e0f      	ldr	r6, [pc, #60]	; (8002e08 <LoadEEportsDir+0x44>)
 8002dcc:	7833      	ldrb	r3, [r6, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <LoadEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8002dd2:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8002dd4:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002dd6:	4698      	mov	r8, r3
 8002dd8:	4f0c      	ldr	r7, [pc, #48]	; (8002e0c <LoadEEportsDir+0x48>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002dda:	1e61      	subs	r1, r4, #1
 8002ddc:	0049      	lsls	r1, r1, #1
 8002dde:	1c65      	adds	r5, r4, #1
 8002de0:	1879      	adds	r1, r7, r1
 8002de2:	b2a8      	uxth	r0, r5
 8002de4:	f008 fb60 	bl	800b4a8 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002de8:	2c19      	cmp	r4, #25
 8002dea:	d901      	bls.n	8002df0 <LoadEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8002dec:	230a      	movs	r3, #10
 8002dee:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8002df0:	7833      	ldrb	r3, [r6, #0]
 8002df2:	b2ec      	uxtb	r4, r5
 8002df4:	42a3      	cmp	r3, r4
 8002df6:	d2f0      	bcs.n	8002dda <LoadEEportsDir+0x16>
	}
	
	return result;
}
 8002df8:	4640      	mov	r0, r8
 8002dfa:	bc04      	pop	{r2}
 8002dfc:	4690      	mov	r8, r2
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	4698      	mov	r8, r3
 8002e04:	e7f8      	b.n	8002df8 <LoadEEportsDir+0x34>
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	20000010 	.word	0x20000010
 8002e0c:	20007238 	.word	0x20007238

08002e10 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e12:	464e      	mov	r6, r9
 8002e14:	46de      	mov	lr, fp
 8002e16:	4657      	mov	r7, sl
 8002e18:	4645      	mov	r5, r8
 8002e1a:	b5e0      	push	{r5, r6, r7, lr}
 8002e1c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e1e:	466b      	mov	r3, sp
 8002e20:	1d9e      	adds	r6, r3, #6
 8002e22:	2300      	movs	r3, #0
 8002e24:	8033      	strh	r3, [r6, #0]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e26:	4698      	mov	r8, r3
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <LoadEEalias+0x78>)
	uint16_t add =0, temp =0;
 8002e2a:	241c      	movs	r4, #28
 8002e2c:	469a      	mov	sl, r3
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <LoadEEalias+0x7c>)
 8002e30:	469b      	mov	fp, r3
 8002e32:	4643      	mov	r3, r8
 8002e34:	009f      	lsls	r7, r3, #2
 8002e36:	18fd      	adds	r5, r7, r3
 8002e38:	1d63      	adds	r3, r4, #5
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4699      	mov	r9, r3
 8002e3e:	006d      	lsls	r5, r5, #1
 8002e40:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e42:	0020      	movs	r0, r4
 8002e44:	0031      	movs	r1, r6
 8002e46:	f008 fb2f 	bl	800b4a8 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002e4a:	8833      	ldrh	r3, [r6, #0]
 8002e4c:	3401      	adds	r4, #1
 8002e4e:	706b      	strb	r3, [r5, #1]
 8002e50:	b2a4      	uxth	r4, r4
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	702b      	strb	r3, [r5, #0]
 8002e56:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002e58:	454c      	cmp	r4, r9
 8002e5a:	d1f2      	bne.n	8002e42 <LoadEEalias+0x32>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	4447      	add	r7, r8
 8002e60:	007f      	lsls	r7, r7, #1
 8002e62:	4457      	add	r7, sl
 8002e64:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e66:	4643      	mov	r3, r8
 8002e68:	3301      	adds	r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4698      	mov	r8, r3
 8002e6e:	465b      	mov	r3, fp
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4543      	cmp	r3, r8
 8002e74:	d2dd      	bcs.n	8002e32 <LoadEEalias+0x22>
	}
	
	return result;
}
 8002e76:	2000      	movs	r0, #0
 8002e78:	b003      	add	sp, #12
 8002e7a:	bc3c      	pop	{r2, r3, r4, r5}
 8002e7c:	4690      	mov	r8, r2
 8002e7e:	4699      	mov	r9, r3
 8002e80:	46a2      	mov	sl, r4
 8002e82:	46ab      	mov	fp, r5
 8002e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	20000dd4 	.word	0x20000dd4
 8002e8c:	20000010 	.word	0x20000010

08002e90 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e92:	4646      	mov	r6, r8
 8002e94:	46d6      	mov	lr, sl
 8002e96:	464f      	mov	r7, r9
 8002e98:	b5c0      	push	{r6, r7, lr}
 8002e9a:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e9c:	466b      	mov	r3, sp
 8002e9e:	1d9e      	adds	r6, r3, #6
 8002ea0:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002ea2:	4c22      	ldr	r4, [pc, #136]	; (8002f2c <LoadEEgroup+0x9c>)
	uint16_t add =0, temp =0;
 8002ea4:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 8002ea6:	7823      	ldrb	r3, [r4, #0]
	uint16_t add =0, temp =0;
 8002ea8:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d03a      	beq.n	8002f24 <LoadEEgroup+0x94>
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <LoadEEgroup+0xa0>)
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4699      	mov	r9, r3
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb4:	1d1f      	adds	r7, r3, #4
 8002eb6:	0028      	movs	r0, r5
 8002eb8:	0049      	lsls	r1, r1, #1
 8002eba:	30cb      	adds	r0, #203	; 0xcb
 8002ebc:	1879      	adds	r1, r7, r1
 8002ebe:	b280      	uxth	r0, r0
		add++;
 8002ec0:	3501      	adds	r5, #1
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002ec2:	f008 faf1 	bl	800b4a8 <EE_ReadVariable>
		add++;
 8002ec6:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002ec8:	7823      	ldrb	r3, [r4, #0]
 8002eca:	b2e9      	uxtb	r1, r5
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	d8f2      	bhi.n	8002eb6 <LoadEEgroup+0x26>
 8002ed0:	2338      	movs	r3, #56	; 0x38
 8002ed2:	002c      	movs	r4, r5
 8002ed4:	35cb      	adds	r5, #203	; 0xcb
 8002ed6:	469c      	mov	ip, r3
 8002ed8:	b2ab      	uxth	r3, r5
 8002eda:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002edc:	2300      	movs	r3, #0
 8002ede:	469a      	mov	sl, r3
 8002ee0:	3499      	adds	r4, #153	; 0x99
 8002ee2:	44e1      	add	r9, ip
 8002ee4:	b2a4      	uxth	r4, r4
	uint16_t add =0, temp =0;
 8002ee6:	464d      	mov	r5, r9
 8002ee8:	1d67      	adds	r7, r4, #5
 8002eea:	b2bf      	uxth	r7, r7
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002eec:	0020      	movs	r0, r4
 8002eee:	0031      	movs	r1, r6
 8002ef0:	f008 fada 	bl	800b4a8 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002ef4:	8833      	ldrh	r3, [r6, #0]
 8002ef6:	3401      	adds	r4, #1
 8002ef8:	706b      	strb	r3, [r5, #1]
 8002efa:	b2a4      	uxth	r4, r4
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	702b      	strb	r3, [r5, #0]
 8002f00:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f02:	42bc      	cmp	r4, r7
 8002f04:	d1f2      	bne.n	8002eec <LoadEEgroup+0x5c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f06:	464b      	mov	r3, r9
 8002f08:	4652      	mov	r2, sl
 8002f0a:	725a      	strb	r2, [r3, #9]
 8002f0c:	230a      	movs	r3, #10
 8002f0e:	469c      	mov	ip, r3
 8002f10:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002f12:	45a0      	cmp	r8, r4
 8002f14:	d1e7      	bne.n	8002ee6 <LoadEEgroup+0x56>
	}
	
	return result;
}
 8002f16:	2000      	movs	r0, #0
 8002f18:	b002      	add	sp, #8
 8002f1a:	bc1c      	pop	{r2, r3, r4}
 8002f1c:	4690      	mov	r8, r2
 8002f1e:	4699      	mov	r9, r3
 8002f20:	46a2      	mov	sl, r4
 8002f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <LoadEEgroup+0xa0>)
 8002f26:	4699      	mov	r9, r3
 8002f28:	e7d2      	b.n	8002ed0 <LoadEEgroup+0x40>
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	20000010 	.word	0x20000010
 8002f30:	20000aa8 	.word	0x20000aa8

08002f34 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f36:	46ce      	mov	lr, r9
 8002f38:	4647      	mov	r7, r8
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f3a:	260e      	movs	r6, #14
 8002f3c:	2300      	movs	r3, #0
BOS_Status LoadEEstreams(void){
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b085      	sub	sp, #20
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f42:	ac03      	add	r4, sp, #12
 8002f44:	446e      	add	r6, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f46:	0021      	movs	r1, r4
 8002f48:	20e4      	movs	r0, #228	; 0xe4
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f4a:	8023      	strh	r3, [r4, #0]
 8002f4c:	8033      	strh	r3, [r6, #0]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f4e:	f008 faab 	bl	800b4a8 <EE_ReadVariable>
	uint8_t direction =0;
 8002f52:	2700      	movs	r7, #0
	if(!status1){
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d100      	bne.n	8002f5a <LoadEEstreams+0x26>
		direction =(uint8_t )temp1;
 8002f58:	7827      	ldrb	r7, [r4, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f5a:	0021      	movs	r1, r4
 8002f5c:	20e5      	movs	r0, #229	; 0xe5
 8002f5e:	f008 faa3 	bl	800b4a8 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f62:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f64:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f66:	20e6      	movs	r0, #230	; 0xe6
 8002f68:	f008 fa9e 	bl	800b4a8 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002f6c:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002f6e:	4305      	orrs	r5, r0
 8002f70:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002f72:	4698      	mov	r8, r3
	if(!status1 && !status2){
 8002f74:	2d00      	cmp	r5, #0
 8002f76:	d104      	bne.n	8002f82 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002f78:	8823      	ldrh	r3, [r4, #0]
 8002f7a:	8832      	ldrh	r2, [r6, #0]
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	4698      	mov	r8, r3
 8002f80:	4490      	add	r8, r2
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f82:	0021      	movs	r1, r4
 8002f84:	20e7      	movs	r0, #231	; 0xe7
 8002f86:	f008 fa8f 	bl	800b4a8 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f8a:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f8c:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f8e:	20e8      	movs	r0, #232	; 0xe8
 8002f90:	f008 fa8a 	bl	800b4a8 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002f94:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002f96:	4305      	orrs	r5, r0
 8002f98:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002f9a:	4699      	mov	r9, r3
	if(!status1 && !status2){
 8002f9c:	2d00      	cmp	r5, #0
 8002f9e:	d104      	bne.n	8002faa <LoadEEstreams+0x76>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002fa0:	8823      	ldrh	r3, [r4, #0]
 8002fa2:	8832      	ldrh	r2, [r6, #0]
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	4699      	mov	r9, r3
 8002fa8:	4491      	add	r9, r2
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002faa:	0021      	movs	r1, r4
 8002fac:	20e9      	movs	r0, #233	; 0xe9
 8002fae:	f008 fa7b 	bl	800b4a8 <EE_ReadVariable>
	if(!status1){
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	d030      	beq.n	8003018 <LoadEEstreams+0xe4>
 8002fb6:	4d26      	ldr	r5, [pc, #152]	; (8003050 <LoadEEstreams+0x11c>)
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002fb8:	0021      	movs	r1, r4
 8002fba:	20ea      	movs	r0, #234	; 0xea
 8002fbc:	f008 fa74 	bl	800b4a8 <EE_ReadVariable>
	if(!status1){
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d103      	bne.n	8002fcc <LoadEEstreams+0x98>
		src2 =(uint8_t )(temp1 >> 8);
 8002fc4:	8823      	ldrh	r3, [r4, #0]
 8002fc6:	0a1a      	lsrs	r2, r3, #8
 8002fc8:	77aa      	strb	r2, [r5, #30]
		dst2 =(uint8_t )temp1;
 8002fca:	77eb      	strb	r3, [r5, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002fcc:	0021      	movs	r1, r4
 8002fce:	20eb      	movs	r0, #235	; 0xeb
 8002fd0:	f008 fa6a 	bl	800b4a8 <EE_ReadVariable>
	if(!status1){
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d105      	bne.n	8002fe4 <LoadEEstreams+0xb0>
		src3 =(uint8_t )(temp1 >> 8);
 8002fd8:	2220      	movs	r2, #32
 8002fda:	8823      	ldrh	r3, [r4, #0]
 8002fdc:	0a19      	lsrs	r1, r3, #8
 8002fde:	54a9      	strb	r1, [r5, r2]
		dst3 =(uint8_t )temp1;
 8002fe0:	3201      	adds	r2, #1
 8002fe2:	54ab      	strb	r3, [r5, r2]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8002fe4:	7f2b      	ldrb	r3, [r5, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <LoadEEstreams+0xbc>
 8002fea:	7f6a      	ldrb	r2, [r5, #29]
 8002fec:	2a00      	cmp	r2, #0
 8002fee:	d120      	bne.n	8003032 <LoadEEstreams+0xfe>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8002ff0:	7fab      	ldrb	r3, [r5, #30]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <LoadEEstreams+0xc8>
 8002ff6:	7fea      	ldrb	r2, [r5, #31]
 8002ff8:	2a00      	cmp	r2, #0
 8002ffa:	d121      	bne.n	8003040 <LoadEEstreams+0x10c>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	5ceb      	ldrb	r3, [r5, r3]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <LoadEEstreams+0xd8>
 8003004:	2221      	movs	r2, #33	; 0x21
 8003006:	5caa      	ldrb	r2, [r5, r2]
 8003008:	2a00      	cmp	r2, #0
 800300a:	d10b      	bne.n	8003024 <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 800300c:	2000      	movs	r0, #0
 800300e:	b005      	add	sp, #20
 8003010:	bc0c      	pop	{r2, r3}
 8003012:	4690      	mov	r8, r2
 8003014:	4699      	mov	r9, r3
 8003016:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src1 =(uint8_t )(temp1 >> 8);
 8003018:	8823      	ldrh	r3, [r4, #0]
 800301a:	4d0d      	ldr	r5, [pc, #52]	; (8003050 <LoadEEstreams+0x11c>)
 800301c:	0a1a      	lsrs	r2, r3, #8
 800301e:	772a      	strb	r2, [r5, #28]
		dst1 =(uint8_t )temp1;
 8003020:	776b      	strb	r3, [r5, #29]
 8003022:	e7c9      	b.n	8002fb8 <LoadEEstreams+0x84>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003024:	9200      	str	r2, [sp, #0]
 8003026:	4641      	mov	r1, r8
 8003028:	464a      	mov	r2, r9
 800302a:	0038      	movs	r0, r7
 800302c:	f004 fd26 	bl	8007a7c <SetupDMAStreams>
 8003030:	e7ec      	b.n	800300c <LoadEEstreams+0xd8>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8003032:	9200      	str	r2, [sp, #0]
 8003034:	4641      	mov	r1, r8
 8003036:	464a      	mov	r2, r9
 8003038:	0038      	movs	r0, r7
 800303a:	f004 fd1f 	bl	8007a7c <SetupDMAStreams>
 800303e:	e7d7      	b.n	8002ff0 <LoadEEstreams+0xbc>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003040:	9200      	str	r2, [sp, #0]
 8003042:	4641      	mov	r1, r8
 8003044:	464a      	mov	r2, r9
 8003046:	0038      	movs	r0, r7
 8003048:	f004 fd18 	bl	8007a7c <SetupDMAStreams>
 800304c:	e7d6      	b.n	8002ffc <LoadEEstreams+0xc8>
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	20000b28 	.word	0x20000b28

08003054 <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003054:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 8003056:	b570      	push	{r4, r5, r6, lr}
 8003058:	b082      	sub	sp, #8
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 800305a:	ac01      	add	r4, sp, #4
 800305c:	0021      	movs	r1, r4
 800305e:	0040      	lsls	r0, r0, #1
 8003060:	f008 fa22 	bl	800b4a8 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003064:	2800      	cmp	r0, #0
 8003066:	d15d      	bne.n	8003124 <LoadEEparams+0xd0>
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003068:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =(uint8_t )temp1;
 800306a:	8823      	ldrh	r3, [r4, #0]
 800306c:	4d54      	ldr	r5, [pc, #336]	; (80031c0 <LoadEEparams+0x16c>)
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800306e:	0021      	movs	r1, r4
		BOSMessaging.response =(uint8_t )temp1;
 8003070:	702b      	strb	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003072:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003078:	f008 fa16 	bl	800b4a8 <EE_ReadVariable>

	if(!status1){
 800307c:	2800      	cmp	r0, #0
 800307e:	d15e      	bne.n	800313e <LoadEEparams+0xea>
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003080:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003082:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003084:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003086:	0bda      	lsrs	r2, r3, #15
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003088:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 800308a:	085b      	lsrs	r3, r3, #1
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 800308c:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 800308e:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003090:	f008 fa0a 	bl	800b4a8 <EE_ReadVariable>
	if(!status1)
		BOS.buttons.debounce =temp1;
 8003094:	4d4b      	ldr	r5, [pc, #300]	; (80031c4 <LoadEEparams+0x170>)
	if(!status1)
 8003096:	2800      	cmp	r0, #0
 8003098:	d15e      	bne.n	8003158 <LoadEEparams+0x104>
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800309a:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 800309c:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800309e:	0021      	movs	r1, r4
 80030a0:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =temp1;
 80030a2:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030a4:	f008 fa00 	bl	800b4a8 <EE_ReadVariable>
	if(!status1)
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d15f      	bne.n	800316c <LoadEEparams+0x118>
		BOS.buttons.singleClickTime =temp1;
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030ac:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 80030ae:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030b0:	0021      	movs	r1, r4
 80030b2:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =temp1;
 80030b4:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030b6:	f008 f9f7 	bl	800b4a8 <EE_ReadVariable>
	if(!status1){
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d160      	bne.n	8003180 <LoadEEparams+0x12c>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80030be:	8823      	ldrh	r3, [r4, #0]
 80030c0:	712b      	strb	r3, [r5, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	716b      	strb	r3, [r5, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80030c6:	208c      	movs	r0, #140	; 0x8c
 80030c8:	0021      	movs	r1, r4
 80030ca:	0040      	lsls	r0, r0, #1
 80030cc:	f008 f9ec 	bl	800b4a8 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80030d0:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80030d2:	0006      	movs	r6, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80030d4:	201a      	movs	r0, #26
 80030d6:	1d99      	adds	r1, r3, #6
 80030d8:	30ff      	adds	r0, #255	; 0xff
 80030da:	f008 f9e5 	bl	800b4a8 <EE_ReadVariable>
	if(!status1 && !status2){
 80030de:	4306      	orrs	r6, r0
 80030e0:	b2b6      	uxth	r6, r6
 80030e2:	2e00      	cmp	r6, #0
 80030e4:	d15f      	bne.n	80031a6 <LoadEEparams+0x152>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 80030e6:	466b      	mov	r3, sp
 80030e8:	88db      	ldrh	r3, [r3, #6]
 80030ea:	8822      	ldrh	r2, [r4, #0]
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60ab      	str	r3, [r5, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 80030f2:	208d      	movs	r0, #141	; 0x8d
 80030f4:	0021      	movs	r1, r4
 80030f6:	0040      	lsls	r0, r0, #1
 80030f8:	f008 f9d6 	bl	800b4a8 <EE_ReadVariable>
	if(!status1){
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d145      	bne.n	800318c <LoadEEparams+0x138>
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003100:	201c      	movs	r0, #28
		BOS.daylightsaving =(int8_t )temp1;
 8003102:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003104:	0021      	movs	r1, r4
		BOS.daylightsaving =(int8_t )temp1;
 8003106:	732b      	strb	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003108:	30ff      	adds	r0, #255	; 0xff
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	736b      	strb	r3, [r5, #13]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800310e:	f008 f9cb 	bl	800b4a8 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003112:	2800      	cmp	r0, #0
 8003114:	d044      	beq.n	80031a0 <LoadEEparams+0x14c>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 8003116:	2326      	movs	r3, #38	; 0x26
 8003118:	4a2b      	ldr	r2, [pc, #172]	; (80031c8 <LoadEEparams+0x174>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	76ab      	strb	r3, [r5, #26]
	}
	
	return result;
}
 800311e:	2000      	movs	r0, #0
 8003120:	b002      	add	sp, #8
 8003122:	bd70      	pop	{r4, r5, r6, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003124:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =BOSMessging_default.response;
 8003126:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <LoadEEparams+0x174>)
 8003128:	4d25      	ldr	r5, [pc, #148]	; (80031c0 <LoadEEparams+0x16c>)
 800312a:	791a      	ldrb	r2, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800312c:	0021      	movs	r1, r4
		BOSMessaging.response =BOSMessging_default.response;
 800312e:	702a      	strb	r2, [r5, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003130:	795b      	ldrb	r3, [r3, #5]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003132:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =BOSMessging_default.trace;
 8003134:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003136:	f008 f9b7 	bl	800b4a8 <EE_ReadVariable>
	if(!status1){
 800313a:	2800      	cmp	r0, #0
 800313c:	d0a0      	beq.n	8003080 <LoadEEparams+0x2c>
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800313e:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003140:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003142:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003144:	7a1a      	ldrb	r2, [r3, #8]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003146:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003148:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 800314a:	895b      	ldrh	r3, [r3, #10]
 800314c:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800314e:	f008 f9ab 	bl	800b4a8 <EE_ReadVariable>
		BOS.buttons.debounce =temp1;
 8003152:	4d1c      	ldr	r5, [pc, #112]	; (80031c4 <LoadEEparams+0x170>)
	if(!status1)
 8003154:	2800      	cmp	r0, #0
 8003156:	d0a0      	beq.n	800309a <LoadEEparams+0x46>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003158:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800315c:	0021      	movs	r1, r4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800315e:	899b      	ldrh	r3, [r3, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003160:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 8003162:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003164:	f008 f9a0 	bl	800b4a8 <EE_ReadVariable>
	if(!status1)
 8003168:	2800      	cmp	r0, #0
 800316a:	d09f      	beq.n	80030ac <LoadEEparams+0x58>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800316c:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003170:	0021      	movs	r1, r4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003172:	89db      	ldrh	r3, [r3, #14]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003174:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003176:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003178:	f008 f996 	bl	800b4a8 <EE_ReadVariable>
	if(!status1){
 800317c:	2800      	cmp	r0, #0
 800317e:	d09e      	beq.n	80030be <LoadEEparams+0x6a>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <LoadEEparams+0x174>)
 8003182:	7c1a      	ldrb	r2, [r3, #16]
 8003184:	712a      	strb	r2, [r5, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8003186:	7c5b      	ldrb	r3, [r3, #17]
 8003188:	716b      	strb	r3, [r5, #5]
 800318a:	e79c      	b.n	80030c6 <LoadEEparams+0x72>
		BOS.daylightsaving =DAYLIGHT_NONE;
 800318c:	23c0      	movs	r3, #192	; 0xc0
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800318e:	201c      	movs	r0, #28
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003190:	015b      	lsls	r3, r3, #5
 8003192:	81ab      	strh	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003194:	0021      	movs	r1, r4
 8003196:	30ff      	adds	r0, #255	; 0xff
 8003198:	f008 f986 	bl	800b4a8 <EE_ReadVariable>
	if(!status1){
 800319c:	2800      	cmp	r0, #0
 800319e:	d1ba      	bne.n	8003116 <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 80031a0:	8823      	ldrh	r3, [r4, #0]
 80031a2:	76ab      	strb	r3, [r5, #26]
 80031a4:	e7bb      	b.n	800311e <LoadEEparams+0xca>
	else if(CLI_LOW_Baudrate_Flag)
 80031a6:	2322      	movs	r3, #34	; 0x22
 80031a8:	4a08      	ldr	r2, [pc, #32]	; (80031cc <LoadEEparams+0x178>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <LoadEEparams+0x164>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80031b0:	23e1      	movs	r3, #225	; 0xe1
 80031b2:	025b      	lsls	r3, r3, #9
 80031b4:	60ab      	str	r3, [r5, #8]
 80031b6:	e79c      	b.n	80030f2 <LoadEEparams+0x9e>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <LoadEEparams+0x174>)
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	60ab      	str	r3, [r5, #8]
 80031be:	e798      	b.n	80030f2 <LoadEEparams+0x9e>
 80031c0:	20006d34 	.word	0x20006d34
 80031c4:	20006db4 	.word	0x20006db4
 80031c8:	20000010 	.word	0x20000010
 80031cc:	20000b28 	.word	0x20000b28

080031d0 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 80031d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d2:	46de      	mov	lr, fp
 80031d4:	4657      	mov	r7, sl
 80031d6:	464e      	mov	r6, r9
 80031d8:	4645      	mov	r5, r8
 80031da:	b5e0      	push	{r5, r6, r7, lr}
 80031dc:	b08b      	sub	sp, #44	; 0x2c
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 80031de:	ab02      	add	r3, sp, #8
 80031e0:	469c      	mov	ip, r3
 80031e2:	261e      	movs	r6, #30
 80031e4:	2300      	movs	r3, #0
 80031e6:	4466      	add	r6, ip
 80031e8:	8033      	strh	r3, [r6, #0]
 80031ea:	330f      	adds	r3, #15
 80031ec:	469a      	mov	sl, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80031ee:	3b0e      	subs	r3, #14
	uint16_t temp16 =0, status1 =0;
 80031f0:	2501      	movs	r5, #1
 80031f2:	24ec      	movs	r4, #236	; 0xec
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80031f4:	469b      	mov	fp, r3
 80031f6:	e004      	b.n	8003202 <LoadEEbuttons+0x32>
 80031f8:	3404      	adds	r4, #4
 80031fa:	3501      	adds	r5, #1
 80031fc:	b2a4      	uxth	r4, r4
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80031fe:	2d07      	cmp	r5, #7
 8003200:	d05e      	beq.n	80032c0 <LoadEEbuttons+0xf0>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003202:	0031      	movs	r1, r6
 8003204:	0020      	movs	r0, r4
 8003206:	f008 f94f 	bl	800b4a8 <EE_ReadVariable>
 800320a:	b2eb      	uxtb	r3, r5
 800320c:	1e07      	subs	r7, r0, #0
 800320e:	4699      	mov	r9, r3
		if(!status1)									// This variable exists
 8003210:	d1f2      	bne.n	80031f8 <LoadEEbuttons+0x28>
			temp8 =(uint8_t )(temp16 >> 8);
 8003212:	8832      	ldrh	r2, [r6, #0]
 8003214:	0a13      	lsrs	r3, r2, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003216:	0919      	lsrs	r1, r3, #4
 8003218:	42a9      	cmp	r1, r5
 800321a:	d1ed      	bne.n	80031f8 <LoadEEbuttons+0x28>
 800321c:	4651      	mov	r1, sl
 800321e:	400b      	ands	r3, r1
 8003220:	d0ea      	beq.n	80031f8 <LoadEEbuttons+0x28>
				button[i + 1].type =temp8 & 0x0F;
 8003222:	482b      	ldr	r0, [pc, #172]	; (80032d0 <LoadEEbuttons+0x100>)
 8003224:	00e9      	lsls	r1, r5, #3
 8003226:	4680      	mov	r8, r0
 8003228:	1949      	adds	r1, r1, r5
 800322a:	4488      	add	r8, r1
 800322c:	4641      	mov	r1, r8
 800322e:	00a8      	lsls	r0, r5, #2
 8003230:	704b      	strb	r3, [r1, #1]
 8003232:	b283      	uxth	r3, r0
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003234:	0018      	movs	r0, r3
 8003236:	30e9      	adds	r0, #233	; 0xe9
				button[i + 1].events =(uint8_t )temp16;
 8003238:	720a      	strb	r2, [r1, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 800323a:	b280      	uxth	r0, r0
 800323c:	0031      	movs	r1, r6
 800323e:	9307      	str	r3, [sp, #28]
 8003240:	f008 f932 	bl	800b4a8 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003244:	4641      	mov	r1, r8
 8003246:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003248:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800324a:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 800324c:	30ea      	adds	r0, #234	; 0xea
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800324e:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003250:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003252:	b280      	uxth	r0, r0
 8003254:	0031      	movs	r1, r6
 8003256:	f008 f927 	bl	800b4a8 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 800325a:	4641      	mov	r1, r8
 800325c:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 800325e:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003260:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003262:	30eb      	adds	r0, #235	; 0xeb
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003264:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 8003266:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003268:	b280      	uxth	r0, r0
 800326a:	0031      	movs	r1, r6
 800326c:	f008 f91c 	bl	800b4a8 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003270:	4641      	mov	r1, r8
 8003272:	8833      	ldrh	r3, [r6, #0]
				AddPortButton(button[i + 1].type,i + 1);
 8003274:	7848      	ldrb	r0, [r1, #1]
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003276:	0a1a      	lsrs	r2, r3, #8
 8003278:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 800327a:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i + 1].type,i + 1);
 800327c:	4649      	mov	r1, r9
 800327e:	f008 fcc3 	bl	800bc08 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003282:	4643      	mov	r3, r8
 8003284:	4658      	mov	r0, fp
 8003286:	7a19      	ldrb	r1, [r3, #8]
 8003288:	789b      	ldrb	r3, [r3, #2]
 800328a:	104a      	asrs	r2, r1, #1
 800328c:	4002      	ands	r2, r0
 800328e:	4001      	ands	r1, r0
 8003290:	4640      	mov	r0, r8
 8003292:	9705      	str	r7, [sp, #20]
 8003294:	79c0      	ldrb	r0, [r0, #7]
 8003296:	3404      	adds	r4, #4
 8003298:	9004      	str	r0, [sp, #16]
 800329a:	4640      	mov	r0, r8
 800329c:	7980      	ldrb	r0, [r0, #6]
 800329e:	3501      	adds	r5, #1
 80032a0:	9003      	str	r0, [sp, #12]
 80032a2:	4640      	mov	r0, r8
 80032a4:	7940      	ldrb	r0, [r0, #5]
 80032a6:	b2a4      	uxth	r4, r4
 80032a8:	9002      	str	r0, [sp, #8]
 80032aa:	4640      	mov	r0, r8
 80032ac:	7900      	ldrb	r0, [r0, #4]
 80032ae:	9001      	str	r0, [sp, #4]
 80032b0:	4640      	mov	r0, r8
 80032b2:	78c0      	ldrb	r0, [r0, #3]
 80032b4:	9000      	str	r0, [sp, #0]
 80032b6:	4648      	mov	r0, r9
 80032b8:	f008 fdac 	bl	800be14 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80032bc:	2d07      	cmp	r5, #7
 80032be:	d1a0      	bne.n	8003202 <LoadEEbuttons+0x32>
			}
		}
	}
	
	return result;
}
 80032c0:	2000      	movs	r0, #0
 80032c2:	b00b      	add	sp, #44	; 0x2c
 80032c4:	bc3c      	pop	{r2, r3, r4, r5}
 80032c6:	4690      	mov	r8, r2
 80032c8:	4699      	mov	r9, r3
 80032ca:	46a2      	mov	sl, r4
 80032cc:	46ab      	mov	fp, r5
 80032ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d0:	20001e2c 	.word	0x20001e2c

080032d4 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	46de      	mov	lr, fp
 80032d8:	4645      	mov	r5, r8
 80032da:	4657      	mov	r7, sl
 80032dc:	464e      	mov	r6, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80032de:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 80032e0:	b5e0      	push	{r5, r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80032e2:	f00f fad7 	bl	8012894 <malloc>
 80032e6:	1e05      	subs	r5, r0, #0
	if(snipBuffer == NULL)
 80032e8:	d065      	beq.n	80033b6 <LoadROsnippets+0xe2>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 80032ea:	4c3b      	ldr	r4, [pc, #236]	; (80033d8 <LoadROsnippets+0x104>)
		return BOS_ERROR;
 80032ec:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 80032ee:	7822      	ldrb	r2, [r4, #0]
 80032f0:	2afe      	cmp	r2, #254	; 0xfe
 80032f2:	d156      	bne.n	80033a2 <LoadROsnippets+0xce>
 80032f4:	1c6b      	adds	r3, r5, #1
 80032f6:	4698      	mov	r8, r3
 80032f8:	2364      	movs	r3, #100	; 0x64
 80032fa:	4699      	mov	r9, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 80032fc:	4b37      	ldr	r3, [pc, #220]	; (80033dc <LoadROsnippets+0x108>)
 80032fe:	4e38      	ldr	r6, [pc, #224]	; (80033e0 <LoadROsnippets+0x10c>)
 8003300:	469b      	mov	fp, r3
 8003302:	44b1      	add	r9, r6
 8003304:	0020      	movs	r0, r4
 8003306:	46a2      	mov	sl, r4
 8003308:	3014      	adds	r0, #20
 800330a:	1b29      	subs	r1, r5, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800330c:	7822      	ldrb	r2, [r4, #0]
 800330e:	550a      	strb	r2, [r1, r4]
 8003310:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003312:	4284      	cmp	r4, r0
 8003314:	d1fa      	bne.n	800330c <LoadROsnippets+0x38>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003316:	2214      	movs	r2, #20
 8003318:	4641      	mov	r1, r8
 800331a:	0030      	movs	r0, r6
 800331c:	f00f fd07 	bl	8012d2e <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003320:	2100      	movs	r1, #0
 8003322:	2214      	movs	r2, #20
 8003324:	0028      	movs	r0, r5
 8003326:	f00f fd0b 	bl	8012d40 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800332a:	7821      	ldrb	r1, [r4, #0]
 800332c:	1c8b      	adds	r3, r1, #2
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d942      	bls.n	80033ba <LoadROsnippets+0xe6>
 8003334:	4657      	mov	r7, sl
 8003336:	0028      	movs	r0, r5
 8003338:	3746      	adds	r7, #70	; 0x46
		i =0;
 800333a:	2300      	movs	r3, #0
 800333c:	e002      	b.n	8003344 <LoadROsnippets+0x70>
 800333e:	3001      	adds	r0, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003340:	42a7      	cmp	r7, r4
 8003342:	d034      	beq.n	80033ae <LoadROsnippets+0xda>
			++currentAdd;
 8003344:	3401      	adds	r4, #1
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003346:	7001      	strb	r1, [r0, #0]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003348:	7821      	ldrb	r1, [r4, #0]
			++i;
 800334a:	3301      	adds	r3, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800334c:	1c8a      	adds	r2, r1, #2
 800334e:	b2d2      	uxtb	r2, r2
			++i;
 8003350:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003352:	2a01      	cmp	r2, #1
 8003354:	d8f3      	bhi.n	800333e <LoadROsnippets+0x6a>
 8003356:	469a      	mov	sl, r3
 8003358:	1e5a      	subs	r2, r3, #1
		if(snipBuffer[i - 1] != 0)
 800335a:	5caa      	ldrb	r2, [r5, r2]
 800335c:	2a00      	cmp	r2, #0
 800335e:	d002      	beq.n	8003366 <LoadROsnippets+0x92>
			++i;	// String termination char was not recorded, then add one
 8003360:	3301      	adds	r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	469a      	mov	sl, r3
		snippets[s].cmd =(char* )malloc(i);
 8003366:	4650      	mov	r0, sl
 8003368:	f00f fa94 	bl	8012894 <malloc>
 800336c:	60f0      	str	r0, [r6, #12]
		if(snippets[s].cmd == NULL){
 800336e:	2800      	cmp	r0, #0
 8003370:	d028      	beq.n	80033c4 <LoadROsnippets+0xf0>
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003372:	4652      	mov	r2, sl
 8003374:	0029      	movs	r1, r5
 8003376:	f00f fcda 	bl	8012d2e <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800337a:	465b      	mov	r3, fp
 800337c:	465a      	mov	r2, fp
 800337e:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 8003380:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003382:	3301      	adds	r3, #1
 8003384:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003386:	0028      	movs	r0, r5
 8003388:	4652      	mov	r2, sl
 800338a:	f00f fcd9 	bl	8012d40 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 800338e:	7823      	ldrb	r3, [r4, #0]
 8003390:	2bfe      	cmp	r3, #254	; 0xfe
 8003392:	d102      	bne.n	800339a <LoadROsnippets+0xc6>
 8003394:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003396:	45b1      	cmp	r9, r6
 8003398:	d1b4      	bne.n	8003304 <LoadROsnippets+0x30>
			break;
	}
	
	free(snipBuffer);
 800339a:	0028      	movs	r0, r5
 800339c:	f00f fa84 	bl	80128a8 <free>
	return BOS_OK;
 80033a0:	2000      	movs	r0, #0
}
 80033a2:	bc3c      	pop	{r2, r3, r4, r5}
 80033a4:	4690      	mov	r8, r2
 80033a6:	4699      	mov	r9, r3
 80033a8:	46a2      	mov	sl, r4
 80033aa:	46ab      	mov	fp, r5
 80033ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ae:	2332      	movs	r3, #50	; 0x32
 80033b0:	2231      	movs	r2, #49	; 0x31
 80033b2:	469a      	mov	sl, r3
 80033b4:	e7d1      	b.n	800335a <LoadROsnippets+0x86>
		return BOS_MEM_FULL;
 80033b6:	20fb      	movs	r0, #251	; 0xfb
 80033b8:	e7f3      	b.n	80033a2 <LoadROsnippets+0xce>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033ba:	2201      	movs	r2, #1
 80033bc:	2300      	movs	r3, #0
 80033be:	4252      	negs	r2, r2
 80033c0:	469a      	mov	sl, r3
 80033c2:	e7ca      	b.n	800335a <LoadROsnippets+0x86>
			memset(&snippets[s],0,sizeof(snippet_t));
 80033c4:	2214      	movs	r2, #20
 80033c6:	2100      	movs	r1, #0
 80033c8:	0030      	movs	r0, r6
 80033ca:	f00f fcb9 	bl	8012d40 <memset>
			free(snipBuffer);
 80033ce:	0028      	movs	r0, r5
 80033d0:	f00f fa6a 	bl	80128a8 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80033d4:	200e      	movs	r0, #14
 80033d6:	e7e4      	b.n	80033a2 <LoadROsnippets+0xce>
 80033d8:	0801dc00 	.word	0x0801dc00
 80033dc:	20001150 	.word	0x20001150
 80033e0:	20006dd0 	.word	0x20006dd0

080033e4 <LoadEEvars>:
void LoadEEvars(void){
 80033e4:	b510      	push	{r4, lr}
	LoadROtopology();
 80033e6:	f7ff fc9d 	bl	8002d24 <LoadROtopology>
	LoadEEportsDir();
 80033ea:	f7ff fceb 	bl	8002dc4 <LoadEEportsDir>
	LoadEEalias();
 80033ee:	f7ff fd0f 	bl	8002e10 <LoadEEalias>
	LoadEEgroup();
 80033f2:	f7ff fd4d 	bl	8002e90 <LoadEEgroup>
	LoadEEstreams();
 80033f6:	f7ff fd9d 	bl	8002f34 <LoadEEstreams>
	LoadEEparams();
 80033fa:	f7ff fe2b 	bl	8003054 <LoadEEparams>
	LoadEEbuttons();
 80033fe:	f7ff fee7 	bl	80031d0 <LoadEEbuttons>
	LoadROsnippets();
 8003402:	f7ff ff67 	bl	80032d4 <LoadROsnippets>
}
 8003406:	bd10      	pop	{r4, pc}

08003408 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340a:	46c6      	mov	lr, r8
 800340c:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800340e:	4e10      	ldr	r6, [pc, #64]	; (8003450 <SaveEEportsDir+0x48>)
 8003410:	7833      	ldrb	r3, [r6, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <SaveEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8003416:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003418:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800341a:	4698      	mov	r8, r3
 800341c:	4f0d      	ldr	r7, [pc, #52]	; (8003454 <SaveEEportsDir+0x4c>)
 800341e:	e007      	b.n	8003430 <SaveEEportsDir+0x28>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003420:	2c19      	cmp	r4, #25
 8003422:	d901      	bls.n	8003428 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 8003424:	230a      	movs	r3, #10
 8003426:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003428:	7833      	ldrb	r3, [r6, #0]
 800342a:	b2ec      	uxtb	r4, r5
 800342c:	42a3      	cmp	r3, r4
 800342e:	d30b      	bcc.n	8003448 <SaveEEportsDir+0x40>
		if(arrayPortsDir[i - 1])
 8003430:	1e63      	subs	r3, r4, #1
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	5af9      	ldrh	r1, [r7, r3]
 8003436:	1c65      	adds	r5, r4, #1
 8003438:	2900      	cmp	r1, #0
 800343a:	d0f1      	beq.n	8003420 <SaveEEportsDir+0x18>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800343c:	b2a8      	uxth	r0, r5
 800343e:	f008 f863 	bl	800b508 <EE_WriteVariable>
 8003442:	e7ed      	b.n	8003420 <SaveEEportsDir+0x18>
	BOS_Status result =BOS_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	4698      	mov	r8, r3
	}
	
	return result;
}
 8003448:	4640      	mov	r0, r8
 800344a:	bc04      	pop	{r2}
 800344c:	4690      	mov	r8, r2
 800344e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003450:	20000010 	.word	0x20000010
 8003454:	20007238 	.word	0x20007238

08003458 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003458:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 800345a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345c:	4646      	mov	r6, r8
 800345e:	46d6      	mov	lr, sl
 8003460:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 8003462:	4698      	mov	r8, r3
 8003464:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 8003466:	b5c0      	push	{r6, r7, lr}
 8003468:	4699      	mov	r9, r3
 800346a:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800346c:	2600      	movs	r6, #0
 800346e:	469a      	mov	sl, r3
 8003470:	e005      	b.n	800347e <SaveEEalias+0x26>
 8003472:	4653      	mov	r3, sl
 8003474:	3601      	adds	r6, #1
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2f6      	uxtb	r6, r6
 800347a:	42b3      	cmp	r3, r6
 800347c:	d325      	bcc.n	80034ca <SaveEEalias+0x72>
	    {
		if(moduleAlias[i][0]){
 800347e:	464b      	mov	r3, r9
 8003480:	00b4      	lsls	r4, r6, #2
 8003482:	19a4      	adds	r4, r4, r6
 8003484:	0064      	lsls	r4, r4, #1
 8003486:	5d1b      	ldrb	r3, [r3, r4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f2      	beq.n	8003472 <SaveEEalias+0x1a>
 800348c:	4645      	mov	r5, r8
 800348e:	4647      	mov	r7, r8
 8003490:	351c      	adds	r5, #28
 8003492:	3721      	adds	r7, #33	; 0x21
 8003494:	444c      	add	r4, r9
 8003496:	b2ad      	uxth	r5, r5
 8003498:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 800349a:	7861      	ldrb	r1, [r4, #1]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80034a0:	0028      	movs	r0, r5
 80034a2:	3501      	adds	r5, #1
 80034a4:	b289      	uxth	r1, r1
 80034a6:	b2ad      	uxth	r5, r5
 80034a8:	f008 f82e 	bl	800b508 <EE_WriteVariable>
 80034ac:	3402      	adds	r4, #2
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ae:	42bd      	cmp	r5, r7
 80034b0:	d001      	beq.n	80034b6 <SaveEEalias+0x5e>
 80034b2:	7823      	ldrb	r3, [r4, #0]
 80034b4:	e7f1      	b.n	800349a <SaveEEalias+0x42>
 80034b6:	4643      	mov	r3, r8
 80034b8:	3305      	adds	r3, #5
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80034be:	4653      	mov	r3, sl
 80034c0:	3601      	adds	r6, #1
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b2f6      	uxtb	r6, r6
 80034c6:	42b3      	cmp	r3, r6
 80034c8:	d2d9      	bcs.n	800347e <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 80034ca:	2000      	movs	r0, #0
 80034cc:	bc1c      	pop	{r2, r3, r4}
 80034ce:	4690      	mov	r8, r2
 80034d0:	4699      	mov	r9, r3
 80034d2:	46a2      	mov	sl, r4
 80034d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	20000dd4 	.word	0x20000dd4
 80034dc:	20000010 	.word	0x20000010

080034e0 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	46de      	mov	lr, fp
 80034e4:	4657      	mov	r7, sl
 80034e6:	464e      	mov	r6, r9
 80034e8:	4645      	mov	r5, r8
 80034ea:	468b      	mov	fp, r1
 80034ec:	b5e0      	push	{r5, r6, r7, lr}
 80034ee:	001e      	movs	r6, r3
 80034f0:	ab0a      	add	r3, sp, #40	; 0x28
 80034f2:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 80034f4:	b281      	uxth	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034f6:	469a      	mov	sl, r3
 80034f8:	ab0b      	add	r3, sp, #44	; 0x2c
 80034fa:	781d      	ldrb	r5, [r3, #0]
 80034fc:	ab0c      	add	r3, sp, #48	; 0x30
 80034fe:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003500:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003502:	4698      	mov	r8, r3
 8003504:	ab0d      	add	r3, sp, #52	; 0x34
 8003506:	781c      	ldrb	r4, [r3, #0]
 8003508:	ab0e      	add	r3, sp, #56	; 0x38
 800350a:	4691      	mov	r9, r2
 800350c:	781f      	ldrb	r7, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 800350e:	f007 fffb 	bl	800b508 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003512:	465b      	mov	r3, fp
 8003514:	0a19      	lsrs	r1, r3, #8
 8003516:	b289      	uxth	r1, r1
 8003518:	20e5      	movs	r0, #229	; 0xe5
 800351a:	f007 fff5 	bl	800b508 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800351e:	465b      	mov	r3, fp
 8003520:	20e6      	movs	r0, #230	; 0xe6
 8003522:	b299      	uxth	r1, r3
 8003524:	f007 fff0 	bl	800b508 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003528:	464b      	mov	r3, r9
 800352a:	0a19      	lsrs	r1, r3, #8
 800352c:	b289      	uxth	r1, r1
 800352e:	20e7      	movs	r0, #231	; 0xe7
 8003530:	f007 ffea 	bl	800b508 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003534:	464b      	mov	r3, r9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003536:	0236      	lsls	r6, r6, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003538:	b299      	uxth	r1, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800353a:	4456      	add	r6, sl
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 800353c:	20e8      	movs	r0, #232	; 0xe8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 800353e:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003540:	f007 ffe2 	bl	800b508 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003544:	4445      	add	r5, r8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003546:	b2b1      	uxth	r1, r6
 8003548:	20e9      	movs	r0, #233	; 0xe9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800354a:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800354c:	f007 ffdc 	bl	800b508 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003550:	19e4      	adds	r4, r4, r7
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003552:	b2a9      	uxth	r1, r5
 8003554:	20ea      	movs	r0, #234	; 0xea
 8003556:	f007 ffd7 	bl	800b508 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800355a:	b2a1      	uxth	r1, r4
 800355c:	20eb      	movs	r0, #235	; 0xeb
 800355e:	f007 ffd3 	bl	800b508 <EE_WriteVariable>
	
	return result;
}
 8003562:	2000      	movs	r0, #0
 8003564:	bc3c      	pop	{r2, r3, r4, r5}
 8003566:	4690      	mov	r8, r2
 8003568:	4699      	mov	r9, r3
 800356a:	46a2      	mov	sl, r4
 800356c:	46ab      	mov	fp, r5
 800356e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003570 <SaveEEparams>:

BOS_Status SaveEEparams(void){
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003570:	208a      	movs	r0, #138	; 0x8a
BOS_Status SaveEEparams(void){
 8003572:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003574:	4c1e      	ldr	r4, [pc, #120]	; (80035f0 <SaveEEparams+0x80>)
 8003576:	0040      	lsls	r0, r0, #1
 8003578:	7863      	ldrb	r3, [r4, #1]
 800357a:	7821      	ldrb	r1, [r4, #0]
 800357c:	015b      	lsls	r3, r3, #5
 800357e:	4319      	orrs	r1, r3
 8003580:	f007 ffc2 	bl	800b508 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 8003584:	208e      	movs	r0, #142	; 0x8e
 8003586:	7921      	ldrb	r1, [r4, #4]
 8003588:	88e3      	ldrh	r3, [r4, #6]
 800358a:	03c9      	lsls	r1, r1, #15
 800358c:	4319      	orrs	r1, r3
 800358e:	b289      	uxth	r1, r1
 8003590:	0040      	lsls	r0, r0, #1
 8003592:	f007 ffb9 	bl	800b508 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003596:	2016      	movs	r0, #22
 8003598:	4c16      	ldr	r4, [pc, #88]	; (80035f4 <SaveEEparams+0x84>)
 800359a:	30ff      	adds	r0, #255	; 0xff
 800359c:	8821      	ldrh	r1, [r4, #0]
 800359e:	f007 ffb3 	bl	800b508 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 80035a2:	208b      	movs	r0, #139	; 0x8b
 80035a4:	8861      	ldrh	r1, [r4, #2]
 80035a6:	0040      	lsls	r0, r0, #1
 80035a8:	f007 ffae 	bl	800b508 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 80035ac:	2018      	movs	r0, #24
 80035ae:	7963      	ldrb	r3, [r4, #5]
 80035b0:	7b21      	ldrb	r1, [r4, #12]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	4319      	orrs	r1, r3
 80035b6:	30ff      	adds	r0, #255	; 0xff
 80035b8:	f007 ffa6 	bl	800b508 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80035bc:	208c      	movs	r0, #140	; 0x8c
 80035be:	8921      	ldrh	r1, [r4, #8]
 80035c0:	0040      	lsls	r0, r0, #1
 80035c2:	f007 ffa1 	bl	800b508 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80035c6:	201a      	movs	r0, #26
 80035c8:	8961      	ldrh	r1, [r4, #10]
 80035ca:	30ff      	adds	r0, #255	; 0xff
 80035cc:	f007 ff9c 	bl	800b508 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80035d0:	208d      	movs	r0, #141	; 0x8d
 80035d2:	7b63      	ldrb	r3, [r4, #13]
 80035d4:	7921      	ldrb	r1, [r4, #4]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	4319      	orrs	r1, r3
 80035da:	0040      	lsls	r0, r0, #1
 80035dc:	f007 ff94 	bl	800b508 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 80035e0:	201c      	movs	r0, #28
 80035e2:	7ea1      	ldrb	r1, [r4, #26]
 80035e4:	30ff      	adds	r0, #255	; 0xff
 80035e6:	f007 ff8f 	bl	800b508 <EE_WriteVariable>
	
	return result;
}
 80035ea:	2000      	movs	r0, #0
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	20006d34 	.word	0x20006d34
 80035f4:	20006db4 	.word	0x20006db4

080035f8 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 80035f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fa:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 80035fc:	4f12      	ldr	r7, [pc, #72]	; (8003648 <ClearEEportsDir+0x50>)
BOS_Status ClearEEportsDir(void){
 80035fe:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003600:	2234      	movs	r2, #52	; 0x34
 8003602:	2100      	movs	r1, #0
 8003604:	0038      	movs	r0, r7
 8003606:	f00f fb9b 	bl	8012d40 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800360a:	4e10      	ldr	r6, [pc, #64]	; (800364c <ClearEEportsDir+0x54>)
 800360c:	7833      	ldrb	r3, [r6, #0]
	BOS_Status result =BOS_OK;
 800360e:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003610:	2b00      	cmp	r3, #0
 8003612:	d015      	beq.n	8003640 <ClearEEportsDir+0x48>
	BOS_Status result =BOS_OK;
 8003614:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003616:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003618:	4698      	mov	r8, r3
 800361a:	2502      	movs	r5, #2
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800361c:	2c19      	cmp	r4, #25
 800361e:	d901      	bls.n	8003624 <ClearEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8003620:	230a      	movs	r3, #10
 8003622:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003624:	7833      	ldrb	r3, [r6, #0]
 8003626:	b2ec      	uxtb	r4, r5
 8003628:	42a3      	cmp	r3, r4
 800362a:	d309      	bcc.n	8003640 <ClearEEportsDir+0x48>
 800362c:	1e63      	subs	r3, r4, #1
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	5af9      	ldrh	r1, [r7, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003632:	1c65      	adds	r5, r4, #1
		if(arrayPortsDir[i - 1])
 8003634:	2900      	cmp	r1, #0
 8003636:	d0f1      	beq.n	800361c <ClearEEportsDir+0x24>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003638:	b2a8      	uxth	r0, r5
 800363a:	f007 ff65 	bl	800b508 <EE_WriteVariable>
 800363e:	e7ed      	b.n	800361c <ClearEEportsDir+0x24>
	}
	
	return result;
}
 8003640:	4640      	mov	r0, r8
 8003642:	bc04      	pop	{r2}
 8003644:	4690      	mov	r8, r2
 8003646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003648:	20007238 	.word	0x20007238
 800364c:	20000010 	.word	0x20000010

08003650 <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003650:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 8003652:	b570      	push	{r4, r5, r6, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003654:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 8003656:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003658:	ad03      	add	r5, sp, #12
 800365a:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800365c:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	002a      	movs	r2, r5
 8003662:	ab06      	add	r3, sp, #24
 8003664:	a905      	add	r1, sp, #20
 8003666:	2001      	movs	r0, #1
 8003668:	f008 f9f8 	bl	800ba5c <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800366c:	aa04      	add	r2, sp, #16
 800366e:	ab08      	add	r3, sp, #32
 8003670:	a907      	add	r1, sp, #28
 8003672:	9400      	str	r4, [sp, #0]
 8003674:	2002      	movs	r0, #2
 8003676:	f008 f9f1 	bl	800ba5c <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367a:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367e:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003680:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003682:	a909      	add	r1, sp, #36	; 0x24
 8003684:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003686:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	960b      	str	r6, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 800368a:	f00d fa53 	bl	8010b34 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800368e:	2302      	movs	r3, #2
 8003690:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003692:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003694:	a909      	add	r1, sp, #36	; 0x24
 8003696:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003698:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800369a:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 800369c:	f00d fa4a 	bl	8010b34 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80036a0:	8829      	ldrh	r1, [r5, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	9805      	ldr	r0, [sp, #20]
 80036a6:	f00d fbe5 	bl	8010e74 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80036aa:	2005      	movs	r0, #5
 80036ac:	f009 fd22 	bl	800d0f4 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036b0:	8821      	ldrh	r1, [r4, #0]
 80036b2:	9808      	ldr	r0, [sp, #32]
 80036b4:	f00d fbd8 	bl	8010e68 <HAL_GPIO_ReadPin>
 80036b8:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 80036ba:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10f      	bne.n	80036e0 <IsLowerCLIbaud+0x90>
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80036c0:	8829      	ldrh	r1, [r5, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	9805      	ldr	r0, [sp, #20]
 80036c6:	f00d fbd5 	bl	8010e74 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80036ca:	2005      	movs	r0, #5
 80036cc:	f009 fd12 	bl	800d0f4 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 80036d0:	8821      	ldrh	r1, [r4, #0]
 80036d2:	9808      	ldr	r0, [sp, #32]
 80036d4:	f00d fbc8 	bl	8010e68 <HAL_GPIO_ReadPin>
 80036d8:	3801      	subs	r0, #1
 80036da:	4243      	negs	r3, r0
 80036dc:	4158      	adcs	r0, r3
			return 1;
 80036de:	b2c0      	uxtb	r0, r0
}
 80036e0:	b00e      	add	sp, #56	; 0x38
 80036e2:	bd70      	pop	{r4, r5, r6, pc}

080036e4 <IsModuleParameter>:

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <IsModuleParameter+0x14>)
uint8_t IsModuleParameter(char *name){
 80036e6:	b510      	push	{r4, lr}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 80036e8:	6899      	ldr	r1, [r3, #8]
 80036ea:	f7fc fd0b 	bl	8000104 <strcmp>
 80036ee:	4243      	negs	r3, r0
 80036f0:	4158      	adcs	r0, r3
			return i + 1;
	}
	return 0;
}
 80036f2:	b2c0      	uxtb	r0, r0
 80036f4:	bd10      	pop	{r4, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	200000a4 	.word	0x200000a4

080036fc <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 80036fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fe:	46de      	mov	lr, fp
 8003700:	4657      	mov	r7, sl
 8003702:	464e      	mov	r6, r9
 8003704:	4645      	mov	r5, r8
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 8003706:	4923      	ldr	r1, [pc, #140]	; (8003794 <IsMathOperator+0x98>)
uint8_t IsMathOperator(char *string){
 8003708:	b5e0      	push	{r5, r6, r7, lr}
 800370a:	0004      	movs	r4, r0
		if(!strcmp(string,"="))
 800370c:	f7fc fcfa 	bl	8000104 <strcmp>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003710:	4b21      	ldr	r3, [pc, #132]	; (8003798 <IsMathOperator+0x9c>)
		if(!strcmp(string,"="))
 8003712:	0006      	movs	r6, r0
		else if(!strcmp(string,"<"))
 8003714:	4698      	mov	r8, r3
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003716:	4b21      	ldr	r3, [pc, #132]	; (800379c <IsMathOperator+0xa0>)
		if(!strcmp(string,"="))
 8003718:	2506      	movs	r5, #6
		else if(!strcmp(string,">="))
 800371a:	4699      	mov	r9, r3
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 800371c:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <IsMathOperator+0xa4>)
		else if(!strcmp(string,">"))
 800371e:	4f21      	ldr	r7, [pc, #132]	; (80037a4 <IsMathOperator+0xa8>)
		else if(!strcmp(string,"<="))
 8003720:	469a      	mov	sl, r3
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003722:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <IsMathOperator+0xac>)
 8003724:	469b      	mov	fp, r3
		if(!strcmp(string,"="))
 8003726:	2e00      	cmp	r6, #0
 8003728:	d028      	beq.n	800377c <IsMathOperator+0x80>
		else if(!strcmp(string,">"))
 800372a:	0039      	movs	r1, r7
 800372c:	0020      	movs	r0, r4
 800372e:	f7fc fce9 	bl	8000104 <strcmp>
 8003732:	2800      	cmp	r0, #0
 8003734:	d024      	beq.n	8003780 <IsMathOperator+0x84>
		else if(!strcmp(string,"<"))
 8003736:	4641      	mov	r1, r8
 8003738:	0020      	movs	r0, r4
 800373a:	f7fc fce3 	bl	8000104 <strcmp>
 800373e:	2800      	cmp	r0, #0
 8003740:	d020      	beq.n	8003784 <IsMathOperator+0x88>
		else if(!strcmp(string,">="))
 8003742:	4649      	mov	r1, r9
 8003744:	0020      	movs	r0, r4
 8003746:	f7fc fcdd 	bl	8000104 <strcmp>
 800374a:	2800      	cmp	r0, #0
 800374c:	d01c      	beq.n	8003788 <IsMathOperator+0x8c>
		else if(!strcmp(string,"<="))
 800374e:	4651      	mov	r1, sl
 8003750:	0020      	movs	r0, r4
 8003752:	f7fc fcd7 	bl	8000104 <strcmp>
 8003756:	2800      	cmp	r0, #0
 8003758:	d018      	beq.n	800378c <IsMathOperator+0x90>
		else if(!strcmp(string,"!="))
 800375a:	4659      	mov	r1, fp
 800375c:	0020      	movs	r0, r4
 800375e:	f7fc fcd1 	bl	8000104 <strcmp>
 8003762:	2800      	cmp	r0, #0
 8003764:	d014      	beq.n	8003790 <IsMathOperator+0x94>
 8003766:	3d01      	subs	r5, #1
 8003768:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 800376a:	2d00      	cmp	r5, #0
 800376c:	d1db      	bne.n	8003726 <IsMathOperator+0x2a>
			return MATH_NOT_EQUAL;
	}
	return 0;
 800376e:	2000      	movs	r0, #0
}
 8003770:	bc3c      	pop	{r2, r3, r4, r5}
 8003772:	4690      	mov	r8, r2
 8003774:	4699      	mov	r9, r3
 8003776:	46a2      	mov	sl, r4
 8003778:	46ab      	mov	fp, r5
 800377a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 800377c:	2001      	movs	r0, #1
 800377e:	e7f7      	b.n	8003770 <IsMathOperator+0x74>
			return MATH_GREATER;
 8003780:	2002      	movs	r0, #2
 8003782:	e7f5      	b.n	8003770 <IsMathOperator+0x74>
			return MATH_SMALLER;
 8003784:	2003      	movs	r0, #3
 8003786:	e7f3      	b.n	8003770 <IsMathOperator+0x74>
			return MATH_GREATER_EQUAL;
 8003788:	2004      	movs	r0, #4
 800378a:	e7f1      	b.n	8003770 <IsMathOperator+0x74>
			return MATH_SMALLER_EQUAL;
 800378c:	2005      	movs	r0, #5
 800378e:	e7ef      	b.n	8003770 <IsMathOperator+0x74>
			return MATH_NOT_EQUAL;
 8003790:	2006      	movs	r0, #6
 8003792:	e7ed      	b.n	8003770 <IsMathOperator+0x74>
 8003794:	08017c24 	.word	0x08017c24
 8003798:	08017c2c 	.word	0x08017c2c
 800379c:	08017c30 	.word	0x08017c30
 80037a0:	08017c34 	.word	0x08017c34
 80037a4:	08017c28 	.word	0x08017c28
 80037a8:	08017c38 	.word	0x08017c38

080037ac <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 80037ac:	b570      	push	{r4, r5, r6, lr}
	/* Initialize and configure RTC */
	RTC_Init();
 80037ae:	f009 fb55 	bl	800ce5c <RTC_Init>
	GetTimeDate();
 80037b2:	f009 fbf9 	bl	800cfa8 <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 80037b6:	f007 ff8d 	bl	800b6d4 <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 80037ba:	f008 f8fb 	bl	800b9b4 <GPIO_Init>
	DMA_Init();
 80037be:	f006 fd45 	bl	800a24c <DMA_Init>
	TIM_USEC_Init();
 80037c2:	f009 fc23 	bl	800d00c <TIM_USEC_Init>
	CRC_Init();
 80037c6:	f007 fda5 	bl	800b314 <CRC_Init>
	TIM_MSEC_Init();
 80037ca:	f009 fc51 	bl	800d070 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 80037ce:	f008 f9a3 	bl	800bb18 <IsFactoryReset>
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d162      	bne.n	800389c <BOS_Init+0xf0>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 80037d6:	f7ff ff3b 	bl	8003650 <IsLowerCLIbaud>
 80037da:	2800      	cmp	r0, #0
 80037dc:	d052      	beq.n	8003884 <BOS_Init+0xd8>
		CLI_LOW_Baudrate_Flag =1;
 80037de:	2322      	movs	r3, #34	; 0x22
 80037e0:	2201      	movs	r2, #1
 80037e2:	4e38      	ldr	r6, [pc, #224]	; (80038c4 <BOS_Init+0x118>)
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80037e4:	2032      	movs	r0, #50	; 0x32
		Module_Peripheral_Init();
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80037e6:	2401      	movs	r4, #1
		CLI_LOW_Baudrate_Flag =1;
 80037e8:	54f2      	strb	r2, [r6, r3]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80037ea:	f009 fc83 	bl	800d0f4 <StartMilliDelay>
		Module_Peripheral_Init();
 80037ee:	f006 fbb9 	bl	8009f64 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80037f2:	21e1      	movs	r1, #225	; 0xe1
 80037f4:	4d34      	ldr	r5, [pc, #208]	; (80038c8 <BOS_Init+0x11c>)
			UpdateBaudrate(port,BOS.clibaudrate);
 80037f6:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80037f8:	3401      	adds	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80037fa:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80037fc:	b2e4      	uxtb	r4, r4
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80037fe:	60a9      	str	r1, [r5, #8]
			UpdateBaudrate(port,BOS.clibaudrate);
 8003800:	f009 fe86 	bl	800d510 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003804:	2c06      	cmp	r4, #6
 8003806:	d007      	beq.n	8003818 <BOS_Init+0x6c>
			UpdateBaudrate(port,BOS.clibaudrate);
 8003808:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800380a:	3401      	adds	r4, #1
 800380c:	68a9      	ldr	r1, [r5, #8]
 800380e:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 8003810:	f009 fe7e 	bl	800d510 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003814:	2c06      	cmp	r4, #6
 8003816:	d1f7      	bne.n	8003808 <BOS_Init+0x5c>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
		Module_Peripheral_Init();
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 8003818:	f7ff fde4 	bl	80033e4 <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 800381c:	f009 ff12 	bl	800d644 <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003820:	f007 f9c8 	bl	800abb4 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
	{
		IND_ON();
 8003824:	2180      	movs	r1, #128	; 0x80
 8003826:	2090      	movs	r0, #144	; 0x90
	if(myID == 0) /* Native module */
 8003828:	4b28      	ldr	r3, [pc, #160]	; (80038cc <BOS_Init+0x120>)
		IND_ON();
 800382a:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 800382c:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 800382e:	0109      	lsls	r1, r1, #4
 8003830:	05c0      	lsls	r0, r0, #23
	if(myID == 0) /* Native module */
 8003832:	2b00      	cmp	r3, #0
 8003834:	d02d      	beq.n	8003892 <BOS_Init+0xe6>
		Delay_ms_no_rtos(500);IND_OFF();
	}
	else /* Non-native module */
	{
		IND_ON();
 8003836:	f00d fb1d 	bl	8010e74 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 800383a:	20fa      	movs	r0, #250	; 0xfa
 800383c:	0040      	lsls	r0, r0, #1
 800383e:	f009 fc59 	bl	800d0f4 <StartMilliDelay>
		IND_OFF();
 8003842:	2180      	movs	r1, #128	; 0x80
 8003844:	2090      	movs	r0, #144	; 0x90
 8003846:	2200      	movs	r2, #0
 8003848:	0109      	lsls	r1, r1, #4
 800384a:	05c0      	lsls	r0, r0, #23
 800384c:	f00d fb12 	bl	8010e74 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003850:	2064      	movs	r0, #100	; 0x64
 8003852:	f009 fc4f 	bl	800d0f4 <StartMilliDelay>
		IND_ON();
 8003856:	2180      	movs	r1, #128	; 0x80
 8003858:	2090      	movs	r0, #144	; 0x90
 800385a:	2201      	movs	r2, #1
 800385c:	05c0      	lsls	r0, r0, #23
 800385e:	0109      	lsls	r1, r1, #4
 8003860:	f00d fb08 	bl	8010e74 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003864:	2064      	movs	r0, #100	; 0x64
 8003866:	f009 fc45 	bl	800d0f4 <StartMilliDelay>
		IND_OFF();
 800386a:	2180      	movs	r1, #128	; 0x80
 800386c:	2090      	movs	r0, #144	; 0x90
 800386e:	2200      	movs	r2, #0
 8003870:	0109      	lsls	r1, r1, #4
 8003872:	05c0      	lsls	r0, r0, #23
 8003874:	f00d fafe 	bl	8010e74 <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 8003878:	f003 fd7e 	bl	8007378 <ResetUartORE>
	
	BOS_initialized =1;
 800387c:	2323      	movs	r3, #35	; 0x23
 800387e:	2201      	movs	r2, #1
 8003880:	54f2      	strb	r2, [r6, r3]
}
 8003882:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003884:	2032      	movs	r0, #50	; 0x32
 8003886:	f009 fc35 	bl	800d0f4 <StartMilliDelay>
		Module_Peripheral_Init();
 800388a:	f006 fb6b 	bl	8009f64 <Module_Peripheral_Init>
 800388e:	4e0d      	ldr	r6, [pc, #52]	; (80038c4 <BOS_Init+0x118>)
 8003890:	e7c2      	b.n	8003818 <BOS_Init+0x6c>
		IND_ON();
 8003892:	f00d faef 	bl	8010e74 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8003896:	20fa      	movs	r0, #250	; 0xfa
 8003898:	0040      	lsls	r0, r0, #1
 800389a:	e7e4      	b.n	8003866 <BOS_Init+0xba>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 800389c:	4c0c      	ldr	r4, [pc, #48]	; (80038d0 <BOS_Init+0x124>)
 800389e:	4d0d      	ldr	r5, [pc, #52]	; (80038d4 <BOS_Init+0x128>)
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	42ab      	cmp	r3, r5
 80038a4:	d004      	beq.n	80038b0 <BOS_Init+0x104>
		if(EE_Format() == HAL_OK){
 80038a6:	f007 fec5 	bl	800b634 <EE_Format>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d100      	bne.n	80038b0 <BOS_Init+0x104>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 80038ae:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80038b0:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b4:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <BOS_Init+0x12c>)
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <BOS_Init+0x130>)
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	e7fd      	b.n	80038be <BOS_Init+0x112>
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	20000b28 	.word	0x20000b28
 80038c8:	20006db4 	.word	0x20006db4
 80038cc:	20000aa8 	.word	0x20000aa8
 80038d0:	20007ff0 	.word	0x20007ff0
 80038d4:	beefdead 	.word	0xbeefdead
 80038d8:	e000ed00 	.word	0xe000ed00
 80038dc:	05fa0004 	.word	0x05fa0004

080038e0 <Module_Init>:
void Module_Init(void){
 80038e0:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80038e2:	f00b fde7 	bl	800f4b4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80038e6:	f006 f95f 	bl	8009ba8 <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 80038ea:	f7ff ff5f 	bl	80037ac <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 80038ee:	f003 fd5f 	bl	80073b0 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80038f2:	f009 ff4f 	bl	800d794 <osKernelStart>
}
 80038f6:	bd10      	pop	{r4, pc}

080038f8 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 80038f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fa:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 80038fc:	4e12      	ldr	r6, [pc, #72]	; (8003948 <ExploreNeighbors+0x50>)
 80038fe:	4b13      	ldr	r3, [pc, #76]	; (800394c <ExploreNeighbors+0x54>)
			messageParams[1] =(uint8_t )myPN;
 8003900:	0035      	movs	r5, r6
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003902:	0007      	movs	r7, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003904:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003906:	4698      	mov	r8, r3
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003908:	b500      	push	{lr}
			messageParams[1] =(uint8_t )myPN;
 800390a:	3524      	adds	r5, #36	; 0x24
BOS_Status ExploreNeighbors(uint8_t ignore){
 800390c:	b082      	sub	sp, #8
		if(port != ignore){
 800390e:	42a7      	cmp	r7, r4
 8003910:	d011      	beq.n	8003936 <ExploreNeighbors+0x3e>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003912:	4643      	mov	r3, r8
 8003914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003916:	2224      	movs	r2, #36	; 0x24
 8003918:	0a19      	lsrs	r1, r3, #8
			messageParams[1] =(uint8_t )myPN;
 800391a:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 800391c:	2303      	movs	r3, #3
			messageParams[0] =(uint8_t )(myPN >> 8);
 800391e:	54b1      	strb	r1, [r6, r2]
			messageParams[2] =port;
 8003920:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003922:	2200      	movs	r2, #0
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2100      	movs	r1, #0
 8003928:	3307      	adds	r3, #7
 800392a:	0020      	movs	r0, r4
 800392c:	f004 f996 	bl	8007c5c <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003930:	200a      	movs	r0, #10
 8003932:	f009 ff35 	bl	800d7a0 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003936:	3401      	adds	r4, #1
 8003938:	b2e4      	uxtb	r4, r4
 800393a:	2c06      	cmp	r4, #6
 800393c:	d1e7      	bne.n	800390e <ExploreNeighbors+0x16>
		}
	}
	
	return result;
}
 800393e:	2000      	movs	r0, #0
 8003940:	b002      	add	sp, #8
 8003942:	bc04      	pop	{r2}
 8003944:	4690      	mov	r8, r2
 8003946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003948:	20000b28 	.word	0x20000b28
 800394c:	20000010 	.word	0x20000010

08003950 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003952:	4657      	mov	r7, sl
 8003954:	464e      	mov	r6, r9
 8003956:	4645      	mov	r5, r8
 8003958:	46de      	mov	lr, fp
 800395a:	b5e0      	push	{r5, r6, r7, lr}
 800395c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 800395e:	466a      	mov	r2, sp
 8003960:	4b4b      	ldr	r3, [pc, #300]	; (8003a90 <FindBroadcastRoutes+0x140>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003962:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003964:	781d      	ldrb	r5, [r3, #0]
 8003966:	1deb      	adds	r3, r5, #7
 8003968:	08db      	lsrs	r3, r3, #3
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	469d      	mov	sp, r3
 8003970:	466e      	mov	r6, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003972:	2d00      	cmp	r5, #0
 8003974:	d00c      	beq.n	8003990 <FindBroadcastRoutes+0x40>
		modules[m] =0;
 8003976:	2100      	movs	r1, #0
 8003978:	1e6c      	subs	r4, r5, #1
 800397a:	4a46      	ldr	r2, [pc, #280]	; (8003a94 <FindBroadcastRoutes+0x144>)
 800397c:	b2e4      	uxtb	r4, r4
 800397e:	3401      	adds	r4, #1
 8003980:	3254      	adds	r2, #84	; 0x54
 8003982:	446c      	add	r4, sp
 8003984:	7019      	strb	r1, [r3, #0]
 8003986:	3301      	adds	r3, #1
		bcastRoutes[m] =0;
 8003988:	8011      	strh	r1, [r2, #0]
 800398a:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 800398c:	42a3      	cmp	r3, r4
 800398e:	d1f9      	bne.n	8003984 <FindBroadcastRoutes+0x34>
	}
	modules[src - 1] =++level;					// Tag the source
 8003990:	2301      	movs	r3, #1
 8003992:	2216      	movs	r2, #22
 8003994:	3801      	subs	r0, #1
 8003996:	5433      	strb	r3, [r6, r0]
 8003998:	4b3f      	ldr	r3, [pc, #252]	; (8003a98 <FindBroadcastRoutes+0x148>)
 800399a:	4342      	muls	r2, r0
 800399c:	469c      	mov	ip, r3

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <FindBroadcastRoutes+0x144>)
 80039a0:	0040      	lsls	r0, r0, #1
 80039a2:	1818      	adds	r0, r3, r0
 80039a4:	2301      	movs	r3, #1
 80039a6:	3202      	adds	r2, #2
 80039a8:	4462      	add	r2, ip
 80039aa:	469c      	mov	ip, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80039ac:	3301      	adds	r3, #1
	modules[src - 1] =++level;					// Tag the source
 80039ae:	2100      	movs	r1, #0
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80039b0:	2454      	movs	r4, #84	; 0x54
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80039b2:	469a      	mov	sl, r3
 80039b4:	46b3      	mov	fp, r6
 80039b6:	607d      	str	r5, [r7, #4]
		if(array[src - 1][p]){
 80039b8:	8813      	ldrh	r3, [r2, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00d      	beq.n	80039da <FindBroadcastRoutes+0x8a>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80039be:	5b05      	ldrh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80039c0:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80039c2:	46a8      	mov	r8, r5
 80039c4:	4665      	mov	r5, ip
 80039c6:	408d      	lsls	r5, r1
 80039c8:	46a9      	mov	r9, r5
 80039ca:	4645      	mov	r5, r8
 80039cc:	464e      	mov	r6, r9
 80039ce:	4335      	orrs	r5, r6
 80039d0:	5305      	strh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80039d2:	4655      	mov	r5, sl
 80039d4:	445b      	add	r3, fp
 80039d6:	3b01      	subs	r3, #1
 80039d8:	701d      	strb	r5, [r3, #0]
 80039da:	3101      	adds	r1, #1
 80039dc:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 80039de:	2906      	cmp	r1, #6
 80039e0:	d1ea      	bne.n	80039b8 <FindBroadcastRoutes+0x68>
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 80039e2:	2254      	movs	r2, #84	; 0x54
	++level;												// Move one level
 80039e4:	2302      	movs	r3, #2
						bcastRoutes[m] |=(0x01 << (p - 1));
 80039e6:	4692      	mov	sl, r2
 80039e8:	465e      	mov	r6, fp
	++level;												// Move one level
 80039ea:	469b      	mov	fp, r3
						bcastRoutes[m] |=(0x01 << (p - 1));
 80039ec:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <FindBroadcastRoutes+0x144>)
 80039ee:	687d      	ldr	r5, [r7, #4]
 80039f0:	449a      	add	sl, r3
 80039f2:	4653      	mov	r3, sl
 80039f4:	46a8      	mov	r8, r5
 80039f6:	465d      	mov	r5, fp
 80039f8:	603b      	str	r3, [r7, #0]
		for(m =0; m < N; m++)					// Scan all modules in the list
 80039fa:	4643      	mov	r3, r8
		++level;											// Move one level
 80039fc:	3501      	adds	r5, #1
 80039fe:	b2ed      	uxtb	r5, r5
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d03b      	beq.n	8003a7c <FindBroadcastRoutes+0x12c>
 8003a04:	1e6b      	subs	r3, r5, #1
 8003a06:	4699      	mov	r9, r3
		untaged =0;								// Reset the untaged counter
 8003a08:	2300      	movs	r3, #0
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a0a:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003a0c:	469c      	mov	ip, r3
 8003a0e:	46ab      	mov	fp, r5
 8003a10:	e003      	b.n	8003a1a <FindBroadcastRoutes+0xca>
 8003a12:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a14:	b2d3      	uxtb	r3, r2
 8003a16:	4598      	cmp	r8, r3
 8003a18:	d92c      	bls.n	8003a74 <FindBroadcastRoutes+0x124>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003a1a:	5cb3      	ldrb	r3, [r6, r2]
 8003a1c:	454b      	cmp	r3, r9
 8003a1e:	d1f8      	bne.n	8003a12 <FindBroadcastRoutes+0xc2>
 8003a20:	2116      	movs	r1, #22
 8003a22:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <FindBroadcastRoutes+0x14c>)
 8003a24:	4351      	muls	r1, r2
 8003a26:	469a      	mov	sl, r3
 8003a28:	2000      	movs	r0, #0
 8003a2a:	4451      	add	r1, sl
 8003a2c:	46e2      	mov	sl, ip
 8003a2e:	4694      	mov	ip, r2
 8003a30:	0055      	lsls	r5, r2, #1
 8003a32:	607d      	str	r5, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003a34:	880b      	ldrh	r3, [r1, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d012      	beq.n	8003a60 <FindBroadcastRoutes+0x110>
 8003a3a:	08db      	lsrs	r3, r3, #3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	5cf2      	ldrb	r2, [r6, r3]
 8003a40:	2a00      	cmp	r2, #0
 8003a42:	d10d      	bne.n	8003a60 <FindBroadcastRoutes+0x110>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a44:	683c      	ldr	r4, [r7, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	5b15      	ldrh	r5, [r2, r4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4082      	lsls	r2, r0
 8003a4e:	4315      	orrs	r5, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	5315      	strh	r5, [r2, r4]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
						++untaged;
 8003a54:	4654      	mov	r4, sl
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003a56:	465a      	mov	r2, fp
						++untaged;
 8003a58:	3401      	adds	r4, #1
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003a5a:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003a5c:	b2e3      	uxtb	r3, r4
 8003a5e:	469a      	mov	sl, r3
 8003a60:	3001      	adds	r0, #1
 8003a62:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003a64:	2806      	cmp	r0, #6
 8003a66:	d1e5      	bne.n	8003a34 <FindBroadcastRoutes+0xe4>
 8003a68:	4662      	mov	r2, ip
 8003a6a:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a6c:	b2d3      	uxtb	r3, r2
 8003a6e:	46d4      	mov	ip, sl
 8003a70:	4598      	cmp	r8, r3
 8003a72:	d8d2      	bhi.n	8003a1a <FindBroadcastRoutes+0xca>
					}
				}
			}
		}
	} while(untaged);
 8003a74:	4663      	mov	r3, ip
 8003a76:	465d      	mov	r5, fp
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1be      	bne.n	80039fa <FindBroadcastRoutes+0xaa>
	
	return result;
}
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b003      	add	sp, #12
 8003a82:	bc3c      	pop	{r2, r3, r4, r5}
 8003a84:	4690      	mov	r8, r2
 8003a86:	4699      	mov	r9, r3
 8003a88:	46a2      	mov	sl, r4
 8003a8a:	46ab      	mov	fp, r5
 8003a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	20000010 	.word	0x20000010
 8003a94:	20000b28 	.word	0x20000b28
 8003a98:	20000ee4 	.word	0x20000ee4
 8003a9c:	20000ee6 	.word	0x20000ee6

08003aa0 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa2:	46de      	mov	lr, fp
 8003aa4:	464e      	mov	r6, r9
 8003aa6:	4645      	mov	r5, r8
 8003aa8:	4657      	mov	r7, sl
 8003aaa:	b5e0      	push	{r5, r6, r7, lr}
 8003aac:	b091      	sub	sp, #68	; 0x44
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003aae:	ac03      	add	r4, sp, #12
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003ab0:	0005      	movs	r5, r0
 8003ab2:	000e      	movs	r6, r1
 8003ab4:	9101      	str	r1, [sp, #4]
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003ab6:	2232      	movs	r2, #50	; 0x32
 8003ab8:	2100      	movs	r1, #0
 8003aba:	0020      	movs	r0, r4
 8003abc:	f00f f940 	bl	8012d40 <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 8003ac0:	221a      	movs	r2, #26
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4862      	ldr	r0, [pc, #392]	; (8003c50 <FindRoute+0x1b0>)
 8003ac6:	f00f f93b 	bl	8012d40 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003aca:	2100      	movs	r1, #0
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003acc:	2024      	movs	r0, #36	; 0x24
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003ace:	4b61      	ldr	r3, [pc, #388]	; (8003c54 <FindRoute+0x1b4>)
 8003ad0:	1e6a      	subs	r2, r5, #1
 8003ad2:	469c      	mov	ip, r3
 8003ad4:	189b      	adds	r3, r3, r2
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003ad6:	5419      	strb	r1, [r3, r0]
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003ad8:	7219      	strb	r1, [r3, #8]
 8003ada:	2316      	movs	r3, #22
 8003adc:	4353      	muls	r3, r2
 8003ade:	4a5e      	ldr	r2, [pc, #376]	; (8003c58 <FindRoute+0x1b8>)
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	4693      	mov	fp, r2
 8003ae4:	445b      	add	r3, fp
 8003ae6:	4699      	mov	r9, r3
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003ae8:	001a      	movs	r2, r3
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 8003aea:	3823      	subs	r0, #35	; 0x23
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003aec:	b2b1      	uxth	r1, r6
 8003aee:	8813      	ldrh	r3, [r2, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <FindRoute+0x5c>
 8003af4:	08db      	lsrs	r3, r3, #3
 8003af6:	428b      	cmp	r3, r1
 8003af8:	d100      	bne.n	8003afc <FindRoute+0x5c>
 8003afa:	e099      	b.n	8003c30 <FindRoute+0x190>
	for(int col =1; col <= 6; col++){
 8003afc:	3001      	adds	r0, #1
 8003afe:	3202      	adds	r2, #2
 8003b00:	2807      	cmp	r0, #7
 8003b02:	d1f4      	bne.n	8003aee <FindRoute+0x4e>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 8003b04:	4b55      	ldr	r3, [pc, #340]	; (8003c5c <FindRoute+0x1bc>)
 8003b06:	7819      	ldrb	r1, [r3, #0]
 8003b08:	2301      	movs	r3, #1
 8003b0a:	2900      	cmp	r1, #0
 8003b0c:	d100      	bne.n	8003b10 <FindRoute+0x70>
 8003b0e:	e09a      	b.n	8003c46 <FindRoute+0x1a6>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b10:	2208      	movs	r2, #8
 8003b12:	4462      	add	r2, ip
 8003b14:	4690      	mov	r8, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b16:	2200      	movs	r2, #0
 8003b18:	4666      	mov	r6, ip
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b1a:	27ff      	movs	r7, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b1c:	4692      	mov	sl, r2
 8003b1e:	3624      	adds	r6, #36	; 0x24
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003b20:	429d      	cmp	r5, r3
 8003b22:	d005      	beq.n	8003b30 <FindRoute+0x90>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b24:	4640      	mov	r0, r8
 8003b26:	1e5a      	subs	r2, r3, #1
 8003b28:	5487      	strb	r7, [r0, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b2a:	4650      	mov	r0, sl
 8003b2c:	18b2      	adds	r2, r6, r2
 8003b2e:	7010      	strb	r0, [r2, #0]
	for(int i =1; i <= N; i++){
 8003b30:	3301      	adds	r3, #1
 8003b32:	428b      	cmp	r3, r1
 8003b34:	ddf4      	ble.n	8003b20 <FindRoute+0x80>
 8003b36:	2308      	movs	r3, #8
 8003b38:	4463      	add	r3, ip
	uint8_t u =0;
 8003b3a:	2500      	movs	r5, #0
 8003b3c:	4698      	mov	r8, r3
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
 8003b3e:	2201      	movs	r2, #1
	
	for(int i =0; i < N; i++){
 8003b40:	2300      	movs	r3, #0
		temp &=Q[i];
 8003b42:	5ce0      	ldrb	r0, [r4, r3]
	for(int i =0; i < N; i++){
 8003b44:	3301      	adds	r3, #1
		temp &=Q[i];
 8003b46:	4002      	ands	r2, r0
	for(int i =0; i < N; i++){
 8003b48:	428b      	cmp	r3, r1
 8003b4a:	dbfa      	blt.n	8003b42 <FindRoute+0xa2>
	while(!QnotEmpty(Q)){
 8003b4c:	2a00      	cmp	r2, #0
 8003b4e:	d000      	beq.n	8003b52 <FindRoute+0xb2>
 8003b50:	e07c      	b.n	8003c4c <FindRoute+0x1ac>
 8003b52:	4663      	mov	r3, ip
 8003b54:	7a1a      	ldrb	r2, [r3, #8]
	if(!Q[0])						// Not visited yet
 8003b56:	7823      	ldrb	r3, [r4, #0]
		smallest =arr[0];
 8003b58:	0010      	movs	r0, r2
	if(!Q[0])						// Not visited yet
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d000      	beq.n	8003b60 <FindRoute+0xc0>
	uint8_t smallest =0xFF;
 8003b5e:	20ff      	movs	r0, #255	; 0xff
 8003b60:	2500      	movs	r5, #0
 8003b62:	2300      	movs	r3, #0
 8003b64:	e001      	b.n	8003b6a <FindRoute+0xca>
 8003b66:	4642      	mov	r2, r8
 8003b68:	5c9a      	ldrb	r2, [r3, r2]
		if((arr[i] < smallest) && !Q[i]){
 8003b6a:	4290      	cmp	r0, r2
 8003b6c:	d904      	bls.n	8003b78 <FindRoute+0xd8>
 8003b6e:	5ce6      	ldrb	r6, [r4, r3]
 8003b70:	2e00      	cmp	r6, #0
 8003b72:	d101      	bne.n	8003b78 <FindRoute+0xd8>
			index =i;
 8003b74:	0010      	movs	r0, r2
 8003b76:	b2dd      	uxtb	r5, r3
	for(int i =0; i < N; i++){
 8003b78:	3301      	adds	r3, #1
 8003b7a:	428b      	cmp	r3, r1
 8003b7c:	dbf3      	blt.n	8003b66 <FindRoute+0xc6>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003b7e:	3501      	adds	r5, #1
		if(u == desID){
 8003b80:	9b01      	ldr	r3, [sp, #4]
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003b82:	b2ed      	uxtb	r5, r5
		if(u == desID){
 8003b84:	429d      	cmp	r5, r3
 8003b86:	d023      	beq.n	8003bd0 <FindRoute+0x130>
			Q[u - 1] =1;									// Remove u from Q
 8003b88:	2301      	movs	r3, #1
 8003b8a:	1e6f      	subs	r7, r5, #1
 8003b8c:	55e3      	strb	r3, [r4, r7]
 8003b8e:	2316      	movs	r3, #22
 8003b90:	465e      	mov	r6, fp
 8003b92:	437b      	muls	r3, r7
 8003b94:	360e      	adds	r6, #14
 8003b96:	1c9a      	adds	r2, r3, #2
 8003b98:	445a      	add	r2, fp
 8003b9a:	18f6      	adds	r6, r6, r3
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003b9c:	4467      	add	r7, ip
 8003b9e:	9100      	str	r1, [sp, #0]
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003ba0:	8813      	ldrh	r3, [r2, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00f      	beq.n	8003bc6 <FindRoute+0x126>
				v =(array[u - 1][n] >> 3);
 8003ba6:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	5ce0      	ldrb	r0, [r4, r3]
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d109      	bne.n	8003bc6 <FindRoute+0x126>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003bb2:	7a38      	ldrb	r0, [r7, #8]
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003bb4:	4463      	add	r3, ip
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003bb6:	3001      	adds	r0, #1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003bb8:	7a19      	ldrb	r1, [r3, #8]
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003bba:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003bbc:	4281      	cmp	r1, r0
 8003bbe:	d902      	bls.n	8003bc6 <FindRoute+0x126>
						routePrev[v - 1] =u;
 8003bc0:	2124      	movs	r1, #36	; 0x24
						routeDist[v - 1] =alt;
 8003bc2:	7218      	strb	r0, [r3, #8]
						routePrev[v - 1] =u;
 8003bc4:	545d      	strb	r5, [r3, r1]
 8003bc6:	3202      	adds	r2, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003bc8:	42b2      	cmp	r2, r6
 8003bca:	d1e9      	bne.n	8003ba0 <FindRoute+0x100>
 8003bcc:	9900      	ldr	r1, [sp, #0]
 8003bce:	e7b6      	b.n	8003b3e <FindRoute+0x9e>
 8003bd0:	3b01      	subs	r3, #1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003bd2:	2224      	movs	r2, #36	; 0x24
 8003bd4:	4463      	add	r3, ip
 8003bd6:	5c9a      	ldrb	r2, [r3, r2]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2a00      	cmp	r2, #0
 8003bdc:	d101      	bne.n	8003be2 <FindRoute+0x142>
 8003bde:	e00b      	b.n	8003bf8 <FindRoute+0x158>
 8003be0:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003be2:	491b      	ldr	r1, [pc, #108]	; (8003c50 <FindRoute+0x1b0>)
 8003be4:	1c58      	adds	r0, r3, #1
 8003be6:	54cd      	strb	r5, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003be8:	4663      	mov	r3, ip
 8003bea:	189b      	adds	r3, r3, r2
 8003bec:	3323      	adds	r3, #35	; 0x23
 8003bee:	7819      	ldrb	r1, [r3, #0]
 8003bf0:	0015      	movs	r5, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003bf2:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003bf4:	2900      	cmp	r1, #0
 8003bf6:	d1f3      	bne.n	8003be0 <FindRoute+0x140>
	for(int col =1; col <= 6; col++){
 8003bf8:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003bfa:	464c      	mov	r4, r9
 8003bfc:	9b01      	ldr	r3, [sp, #4]
 8003bfe:	4463      	add	r3, ip
 8003c00:	8822      	ldrh	r2, [r4, #0]
 8003c02:	2a00      	cmp	r2, #0
 8003c04:	d008      	beq.n	8003c18 <FindRoute+0x178>
 8003c06:	4d12      	ldr	r5, [pc, #72]	; (8003c50 <FindRoute+0x1b0>)
 8003c08:	79d9      	ldrb	r1, [r3, #7]
 8003c0a:	46ac      	mov	ip, r5
 8003c0c:	4461      	add	r1, ip
 8003c0e:	3901      	subs	r1, #1
 8003c10:	7809      	ldrb	r1, [r1, #0]
 8003c12:	08d2      	lsrs	r2, r2, #3
 8003c14:	4291      	cmp	r1, r2
 8003c16:	d014      	beq.n	8003c42 <FindRoute+0x1a2>
	for(int col =1; col <= 6; col++){
 8003c18:	3001      	adds	r0, #1
 8003c1a:	3402      	adds	r4, #2
 8003c1c:	2807      	cmp	r0, #7
 8003c1e:	d1ef      	bne.n	8003c00 <FindRoute+0x160>
	return 0;
 8003c20:	2000      	movs	r0, #0
}
 8003c22:	b011      	add	sp, #68	; 0x44
 8003c24:	bc3c      	pop	{r2, r3, r4, r5}
 8003c26:	4690      	mov	r8, r2
 8003c28:	4699      	mov	r9, r3
 8003c2a:	46a2      	mov	sl, r4
 8003c2c:	46ab      	mov	fp, r5
 8003c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			routeDist[desID - 1] =1;
 8003c30:	9901      	ldr	r1, [sp, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	000b      	movs	r3, r1
 8003c36:	4463      	add	r3, ip
 8003c38:	71da      	strb	r2, [r3, #7]
			route[0] =desID;
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <FindRoute+0x1b0>)
			return col;
 8003c3c:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8003c3e:	7019      	strb	r1, [r3, #0]
			return col;
 8003c40:	e7ef      	b.n	8003c22 <FindRoute+0x182>
			return col;
 8003c42:	b2c0      	uxtb	r0, r0
 8003c44:	e7ed      	b.n	8003c22 <FindRoute+0x182>
	for(int i =1; i <= N; i++){
 8003c46:	425b      	negs	r3, r3
 8003c48:	2500      	movs	r5, #0
 8003c4a:	e7c2      	b.n	8003bd2 <FindRoute+0x132>
 8003c4c:	1e6b      	subs	r3, r5, #1
 8003c4e:	e7c0      	b.n	8003bd2 <FindRoute+0x132>
 8003c50:	20006e7c 	.word	0x20006e7c
 8003c54:	20000ba8 	.word	0x20000ba8
 8003c58:	20000ee4 	.word	0x20000ee4
 8003c5c:	20000010 	.word	0x20000010

08003c60 <DisplayTopology>:

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c60:	4b5b      	ldr	r3, [pc, #364]	; (8003dd0 <DisplayTopology+0x170>)
void DisplayTopology(uint8_t port){
 8003c62:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c64:	001c      	movs	r4, r3
void DisplayTopology(uint8_t port){
 8003c66:	4645      	mov	r5, r8
 8003c68:	464e      	mov	r6, r9
 8003c6a:	46de      	mov	lr, fp
 8003c6c:	4657      	mov	r7, sl
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c6e:	3440      	adds	r4, #64	; 0x40
 8003c70:	0022      	movs	r2, r4
void DisplayTopology(uint8_t port){
 8003c72:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c74:	4698      	mov	r8, r3
 8003c76:	4b57      	ldr	r3, [pc, #348]	; (8003dd4 <DisplayTopology+0x174>)
void DisplayTopology(uint8_t port){
 8003c78:	0007      	movs	r7, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c7a:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003c7c:	c223      	stmia	r2!, {r0, r1, r5}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c7e:	2501      	movs	r5, #1
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c80:	6819      	ldr	r1, [r3, #0]
void DisplayTopology(uint8_t port){
 8003c82:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c84:	6011      	str	r1, [r2, #0]
 8003c86:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c88:	426d      	negs	r5, r5
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c8a:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c8c:	0021      	movs	r1, r4
 8003c8e:	2332      	movs	r3, #50	; 0x32
 8003c90:	9500      	str	r5, [sp, #0]
 8003c92:	2211      	movs	r2, #17
 8003c94:	0038      	movs	r0, r7
 8003c96:	f009 fbc5 	bl	800d424 <writePxMutex>
 8003c9a:	4b4f      	ldr	r3, [pc, #316]	; (8003dd8 <DisplayTopology+0x178>)
 8003c9c:	2601      	movs	r6, #1
 8003c9e:	4699      	mov	r9, r3
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003ca0:	0032      	movs	r2, r6
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	0020      	movs	r0, r4
 8003ca6:	f00f fa45 	bl	8013134 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003caa:	0020      	movs	r0, r4
 8003cac:	f7fc fa34 	bl	8000118 <strlen>
 8003cb0:	3601      	adds	r6, #1
 8003cb2:	b282      	uxth	r2, r0
 8003cb4:	9500      	str	r5, [sp, #0]
 8003cb6:	2332      	movs	r3, #50	; 0x32
 8003cb8:	0021      	movs	r1, r4
 8003cba:	0038      	movs	r0, r7
 8003cbc:	f009 fbb2 	bl	800d424 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003cc0:	2e06      	cmp	r6, #6
 8003cc2:	d1ed      	bne.n	8003ca0 <DisplayTopology+0x40>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003cc4:	2332      	movs	r3, #50	; 0x32
 8003cc6:	9500      	str	r5, [sp, #0]
 8003cc8:	2203      	movs	r2, #3
 8003cca:	4944      	ldr	r1, [pc, #272]	; (8003ddc <DisplayTopology+0x17c>)
 8003ccc:	0038      	movs	r0, r7
 8003cce:	f009 fba9 	bl	800d424 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003cd2:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <DisplayTopology+0x180>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d061      	beq.n	8003d9e <DisplayTopology+0x13e>
 8003cda:	4b42      	ldr	r3, [pc, #264]	; (8003de4 <DisplayTopology+0x184>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003cdc:	4645      	mov	r5, r8
 8003cde:	4699      	mov	r9, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	425b      	negs	r3, r3
 8003ce4:	4698      	mov	r8, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ce6:	4b40      	ldr	r3, [pc, #256]	; (8003de8 <DisplayTopology+0x188>)
	for(uint8_t row =0; row < N; row++){
 8003ce8:	2400      	movs	r4, #0
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003cea:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003cec:	3540      	adds	r5, #64	; 0x40
 8003cee:	1c63      	adds	r3, r4, #1
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	493e      	ldr	r1, [pc, #248]	; (8003dec <DisplayTopology+0x18c>)
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	469a      	mov	sl, r3
 8003cf8:	f00f fa1c 	bl	8013134 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cfc:	0028      	movs	r0, r5
 8003cfe:	f7fc fa0b 	bl	8000118 <strlen>
 8003d02:	4643      	mov	r3, r8
 8003d04:	b282      	uxth	r2, r0
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	0029      	movs	r1, r5
 8003d0a:	2332      	movs	r3, #50	; 0x32
 8003d0c:	0038      	movs	r0, r7
 8003d0e:	f009 fb89 	bl	800d424 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d12:	2316      	movs	r3, #22
 8003d14:	435c      	muls	r4, r3
 8003d16:	464b      	mov	r3, r9
 8003d18:	5b1b      	ldrh	r3, [r3, r4]
 8003d1a:	2205      	movs	r2, #5
 8003d1c:	0059      	lsls	r1, r3, #1
 8003d1e:	18c9      	adds	r1, r1, r3
 8003d20:	4b33      	ldr	r3, [pc, #204]	; (8003df0 <DisplayTopology+0x190>)
 8003d22:	0049      	lsls	r1, r1, #1
 8003d24:	469c      	mov	ip, r3
 8003d26:	0028      	movs	r0, r5
 8003d28:	4461      	add	r1, ip
 8003d2a:	f00f fa58 	bl	80131de <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003d2e:	4643      	mov	r3, r8
 8003d30:	2205      	movs	r2, #5
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	0029      	movs	r1, r5
 8003d36:	2332      	movs	r3, #50	; 0x32
 8003d38:	0038      	movs	r0, r7
 8003d3a:	f009 fb73 	bl	800d424 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003d3e:	4643      	mov	r3, r8
 8003d40:	2201      	movs	r2, #1
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	492b      	ldr	r1, [pc, #172]	; (8003df4 <DisplayTopology+0x194>)
 8003d46:	2332      	movs	r3, #50	; 0x32
 8003d48:	0038      	movs	r0, r7
 8003d4a:	f009 fb6b 	bl	800d424 <writePxMutex>
 8003d4e:	464b      	mov	r3, r9
 8003d50:	1ca6      	adds	r6, r4, #2
 8003d52:	330c      	adds	r3, #12
 8003d54:	444e      	add	r6, r9
 8003d56:	191c      	adds	r4, r3, r4
			if(!array[row][col])
 8003d58:	8832      	ldrh	r2, [r6, #0]
 8003d5a:	2a00      	cmp	r2, #0
 8003d5c:	d12f      	bne.n	8003dbe <DisplayTopology+0x15e>
				sprintf(pcUserMessage,"%d\t",0);
 8003d5e:	4926      	ldr	r1, [pc, #152]	; (8003df8 <DisplayTopology+0x198>)
 8003d60:	0028      	movs	r0, r5
 8003d62:	f00f f9e7 	bl	8013134 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d66:	0028      	movs	r0, r5
 8003d68:	f7fc f9d6 	bl	8000118 <strlen>
 8003d6c:	4643      	mov	r3, r8
 8003d6e:	b282      	uxth	r2, r0
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	0029      	movs	r1, r5
 8003d74:	2332      	movs	r3, #50	; 0x32
 8003d76:	0038      	movs	r0, r7
 8003d78:	3602      	adds	r6, #2
 8003d7a:	f009 fb53 	bl	800d424 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003d7e:	42a6      	cmp	r6, r4
 8003d80:	d1ea      	bne.n	8003d58 <DisplayTopology+0xf8>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003d82:	4643      	mov	r3, r8
 8003d84:	2202      	movs	r2, #2
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	491c      	ldr	r1, [pc, #112]	; (8003dfc <DisplayTopology+0x19c>)
 8003d8a:	2332      	movs	r3, #50	; 0x32
 8003d8c:	0038      	movs	r0, r7
 8003d8e:	f009 fb49 	bl	800d424 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003d92:	4653      	mov	r3, sl
 8003d94:	b2dc      	uxtb	r4, r3
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <DisplayTopology+0x180>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	42a3      	cmp	r3, r4
 8003d9c:	d8a7      	bhi.n	8003cee <DisplayTopology+0x8e>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003d9e:	2301      	movs	r3, #1
 8003da0:	425b      	negs	r3, r3
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2201      	movs	r2, #1
 8003da6:	3333      	adds	r3, #51	; 0x33
 8003da8:	4915      	ldr	r1, [pc, #84]	; (8003e00 <DisplayTopology+0x1a0>)
 8003daa:	0038      	movs	r0, r7
 8003dac:	f009 fb3a 	bl	800d424 <writePxMutex>
}
 8003db0:	b003      	add	sp, #12
 8003db2:	bc3c      	pop	{r2, r3, r4, r5}
 8003db4:	4690      	mov	r8, r2
 8003db6:	4699      	mov	r9, r3
 8003db8:	46a2      	mov	sl, r4
 8003dba:	46ab      	mov	fp, r5
 8003dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003dbe:	2307      	movs	r3, #7
 8003dc0:	4659      	mov	r1, fp
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	0028      	movs	r0, r5
 8003dc6:	08d2      	lsrs	r2, r2, #3
 8003dc8:	f00f f9b4 	bl	8013134 <sprintf>
 8003dcc:	e7cb      	b.n	8003d66 <DisplayTopology+0x106>
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	20000ba8 	.word	0x20000ba8
 8003dd4:	08017c3c 	.word	0x08017c3c
 8003dd8:	08017c50 	.word	0x08017c50
 8003ddc:	08018adc 	.word	0x08018adc
 8003de0:	20000010 	.word	0x20000010
 8003de4:	20000ee4 	.word	0x20000ee4
 8003de8:	08017c68 	.word	0x08017c68
 8003dec:	08017c58 	.word	0x08017c58
 8003df0:	08017584 	.word	0x08017584
 8003df4:	08017c4c 	.word	0x08017c4c
 8003df8:	08017c64 	.word	0x08017c64
 8003dfc:	08017d74 	.word	0x08017d74
 8003e00:	08019550 	.word	0x08019550

08003e04 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e06:	4645      	mov	r5, r8
 8003e08:	46de      	mov	lr, fp
 8003e0a:	4657      	mov	r7, sl
 8003e0c:	464e      	mov	r6, r9
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e0e:	4934      	ldr	r1, [pc, #208]	; (8003ee0 <DisplayPortsDir+0xdc>)
void DisplayPortsDir(uint8_t port){
 8003e10:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e12:	3140      	adds	r1, #64	; 0x40
 8003e14:	000a      	movs	r2, r1
 8003e16:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <DisplayPortsDir+0xe0>)
void DisplayPortsDir(uint8_t port){
 8003e18:	4682      	mov	sl, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e1a:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e1c:	c231      	stmia	r2!, {r0, r4, r5}
 8003e1e:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e20:	c231      	stmia	r2!, {r0, r4, r5}
 8003e22:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 8003e24:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e26:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e28:	2301      	movs	r3, #1
 8003e2a:	425b      	negs	r3, r3
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	221b      	movs	r2, #27
 8003e30:	3333      	adds	r3, #51	; 0x33
 8003e32:	4650      	mov	r0, sl
 8003e34:	f009 faf6 	bl	800d424 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e38:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <DisplayPortsDir+0xe4>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d035      	beq.n	8003eac <DisplayPortsDir+0xa8>
 8003e40:	2301      	movs	r3, #1
 8003e42:	4699      	mov	r9, r3
 8003e44:	4b29      	ldr	r3, [pc, #164]	; (8003eec <DisplayPortsDir+0xe8>)
 8003e46:	4698      	mov	r8, r3
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e48:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <DisplayPortsDir+0xec>)
 8003e4a:	469b      	mov	fp, r3
 8003e4c:	464b      	mov	r3, r9
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e4e:	2680      	movs	r6, #128	; 0x80
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e50:	4f23      	ldr	r7, [pc, #140]	; (8003ee0 <DisplayPortsDir+0xdc>)
 8003e52:	1e5d      	subs	r5, r3, #1
 8003e54:	006d      	lsls	r5, r5, #1
	for(uint8_t i =1; i <= N; i++){
 8003e56:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e58:	0236      	lsls	r6, r6, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e5a:	3740      	adds	r7, #64	; 0x40
 8003e5c:	e002      	b.n	8003e64 <DisplayPortsDir+0x60>
 8003e5e:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e60:	2c0a      	cmp	r4, #10
 8003e62:	d01b      	beq.n	8003e9c <DisplayPortsDir+0x98>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e64:	0031      	movs	r1, r6
 8003e66:	4642      	mov	r2, r8
 8003e68:	4119      	asrs	r1, r3
 8003e6a:	5b52      	ldrh	r2, [r2, r5]
 8003e6c:	1c5c      	adds	r4, r3, #1
 8003e6e:	4211      	tst	r1, r2
 8003e70:	d0f5      	beq.n	8003e5e <DisplayPortsDir+0x5a>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e72:	0023      	movs	r3, r4
 8003e74:	464a      	mov	r2, r9
 8003e76:	4659      	mov	r1, fp
 8003e78:	0038      	movs	r0, r7
 8003e7a:	f00f f95b 	bl	8013134 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003e7e:	0038      	movs	r0, r7
 8003e80:	f7fc f94a 	bl	8000118 <strlen>
 8003e84:	2301      	movs	r3, #1
 8003e86:	425b      	negs	r3, r3
 8003e88:	b282      	uxth	r2, r0
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	0039      	movs	r1, r7
 8003e8e:	3333      	adds	r3, #51	; 0x33
 8003e90:	4650      	mov	r0, sl
 8003e92:	f009 fac7 	bl	800d424 <writePxMutex>
 8003e96:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e98:	2c0a      	cmp	r4, #10
 8003e9a:	d1e3      	bne.n	8003e64 <DisplayPortsDir+0x60>
	for(uint8_t i =1; i <= N; i++){
 8003e9c:	464b      	mov	r3, r9
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	4699      	mov	r9, r3
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <DisplayPortsDir+0xe4>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	454b      	cmp	r3, r9
 8003eaa:	d2cf      	bcs.n	8003e4c <DisplayPortsDir+0x48>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003eac:	490c      	ldr	r1, [pc, #48]	; (8003ee0 <DisplayPortsDir+0xdc>)
 8003eae:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <DisplayPortsDir+0xf0>)
 8003eb0:	3140      	adds	r1, #64	; 0x40
 8003eb2:	000a      	movs	r2, r1
 8003eb4:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003eb6:	c231      	stmia	r2!, {r0, r4, r5}
 8003eb8:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003eba:	c231      	stmia	r2!, {r0, r4, r5}
 8003ebc:	cb11      	ldmia	r3!, {r0, r4}
 8003ebe:	c211      	stmia	r2!, {r0, r4}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	425b      	negs	r3, r3
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	221f      	movs	r2, #31
 8003ec8:	3333      	adds	r3, #51	; 0x33
 8003eca:	4650      	mov	r0, sl
 8003ecc:	f009 faaa 	bl	800d424 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003ed0:	b003      	add	sp, #12
 8003ed2:	bc3c      	pop	{r2, r3, r4, r5}
 8003ed4:	4690      	mov	r8, r2
 8003ed6:	4699      	mov	r9, r3
 8003ed8:	46a2      	mov	sl, r4
 8003eda:	46ab      	mov	fp, r5
 8003edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	20000ba8 	.word	0x20000ba8
 8003ee4:	08017c70 	.word	0x08017c70
 8003ee8:	20000010 	.word	0x20000010
 8003eec:	20007238 	.word	0x20007238
 8003ef0:	08017c8c 	.word	0x08017c8c
 8003ef4:	08017ca0 	.word	0x08017ca0

08003ef8 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efa:	46de      	mov	lr, fp
 8003efc:	464e      	mov	r6, r9
 8003efe:	4645      	mov	r5, r8
 8003f00:	4657      	mov	r7, sl
 8003f02:	b5e0      	push	{r5, r6, r7, lr}
 8003f04:	b085      	sub	sp, #20
 8003f06:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f08:	f009 fd52 	bl	800d9b0 <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 8003f0c:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f0e:	0004      	movs	r4, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f10:	4d98      	ldr	r5, [pc, #608]	; (8004174 <DisplayModuleStatus+0x27c>)
	strcpy((char* )pcOutputString,"");
 8003f12:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f14:	4b98      	ldr	r3, [pc, #608]	; (8004178 <DisplayModuleStatus+0x280>)
 8003f16:	3540      	adds	r5, #64	; 0x40
 8003f18:	781a      	ldrb	r2, [r3, #0]
 8003f1a:	4998      	ldr	r1, [pc, #608]	; (800417c <DisplayModuleStatus+0x284>)
 8003f1c:	0028      	movs	r0, r5
 8003f1e:	f00f f909 	bl	8013134 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f22:	0029      	movs	r1, r5
 8003f24:	0020      	movs	r0, r4
 8003f26:	f00f f925 	bl	8013174 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f2a:	4b95      	ldr	r3, [pc, #596]	; (8004180 <DisplayModuleStatus+0x288>)
 8003f2c:	4995      	ldr	r1, [pc, #596]	; (8004184 <DisplayModuleStatus+0x28c>)
 8003f2e:	7c1a      	ldrb	r2, [r3, #16]
 8003f30:	0028      	movs	r0, r5
 8003f32:	4698      	mov	r8, r3
 8003f34:	f00f f8fe 	bl	8013134 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f38:	0029      	movs	r1, r5
 8003f3a:	0020      	movs	r0, r4
 8003f3c:	f00f f91a 	bl	8013174 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003f40:	2306      	movs	r3, #6
 8003f42:	2200      	movs	r2, #0
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	4990      	ldr	r1, [pc, #576]	; (8004188 <DisplayModuleStatus+0x290>)
 8003f48:	3b04      	subs	r3, #4
 8003f4a:	0028      	movs	r0, r5
 8003f4c:	f00f f8f2 	bl	8013134 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003f50:	0029      	movs	r1, r5
 8003f52:	0020      	movs	r0, r4
 8003f54:	f00f f90e 	bl	8013174 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003f58:	4a8c      	ldr	r2, [pc, #560]	; (800418c <DisplayModuleStatus+0x294>)
 8003f5a:	498d      	ldr	r1, [pc, #564]	; (8004190 <DisplayModuleStatus+0x298>)
 8003f5c:	0028      	movs	r0, r5
 8003f5e:	f00f f8e9 	bl	8013134 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f62:	0029      	movs	r1, r5
 8003f64:	0020      	movs	r0, r4
 8003f66:	f00f f905 	bl	8013174 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003f6a:	4a8a      	ldr	r2, [pc, #552]	; (8004194 <DisplayModuleStatus+0x29c>)
 8003f6c:	498a      	ldr	r1, [pc, #552]	; (8004198 <DisplayModuleStatus+0x2a0>)
 8003f6e:	0028      	movs	r0, r5
 8003f70:	f00f f8e0 	bl	8013134 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f74:	0029      	movs	r1, r5
 8003f76:	0020      	movs	r0, r4
 8003f78:	f00f f8fc 	bl	8013174 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f7c:	002a      	movs	r2, r5
 8003f7e:	4b87      	ldr	r3, [pc, #540]	; (800419c <DisplayModuleStatus+0x2a4>)
 8003f80:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f82:	c243      	stmia	r2!, {r0, r1, r6}
 8003f84:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f86:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f88:	6011      	str	r1, [r2, #0]
 8003f8a:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f8c:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f8e:	8091      	strh	r1, [r2, #4]
 8003f90:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f92:	0029      	movs	r1, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f94:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f96:	f00f f8ed 	bl	8013174 <strcat>
 8003f9a:	4b81      	ldr	r3, [pc, #516]	; (80041a0 <DisplayModuleStatus+0x2a8>)
 8003f9c:	4699      	mov	r9, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003f9e:	4b81      	ldr	r3, [pc, #516]	; (80041a4 <DisplayModuleStatus+0x2ac>)
 8003fa0:	469a      	mov	sl, r3
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
				break;
			case PORTBUTTON:
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8003fa2:	4b81      	ldr	r3, [pc, #516]	; (80041a8 <DisplayModuleStatus+0x2b0>)
 8003fa4:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 8003fa6:	0032      	movs	r2, r6
 8003fa8:	4649      	mov	r1, r9
 8003faa:	0028      	movs	r0, r5
 8003fac:	f00f f8c2 	bl	8013134 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8003fb0:	0029      	movs	r1, r5
 8003fb2:	0020      	movs	r0, r4
 8003fb4:	f00f f8de 	bl	8013174 <strcat>
		switch(portStatus[i]){
 8003fb8:	4643      	mov	r3, r8
 8003fba:	3314      	adds	r3, #20
 8003fbc:	5cf3      	ldrb	r3, [r6, r3]
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d80b      	bhi.n	8003fda <DisplayModuleStatus+0xe2>
 8003fc2:	4652      	mov	r2, sl
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	58d3      	ldr	r3, [r2, r3]
 8003fc8:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8003fca:	002a      	movs	r2, r5
 8003fcc:	4b77      	ldr	r3, [pc, #476]	; (80041ac <DisplayModuleStatus+0x2b4>)
 8003fce:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003fd0:	c283      	stmia	r2!, {r0, r1, r7}
 8003fd2:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003fd4:	c283      	stmia	r2!, {r0, r1, r7}
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	8013      	strh	r3, [r2, #0]
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003fda:	0029      	movs	r1, r5
 8003fdc:	0020      	movs	r0, r4
 8003fde:	3601      	adds	r6, #1
 8003fe0:	f00f f8c8 	bl	8013174 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003fe4:	2e06      	cmp	r6, #6
 8003fe6:	d1de      	bne.n	8003fa6 <DisplayModuleStatus+0xae>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8003fe8:	002a      	movs	r2, r5
 8003fea:	4b71      	ldr	r3, [pc, #452]	; (80041b0 <DisplayModuleStatus+0x2b8>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8003fec:	46a0      	mov	r8, r4
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8003fee:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ff0:	c243      	stmia	r2!, {r0, r1, r6}
 8003ff2:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ff4:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8003ff6:	0029      	movs	r1, r5
 8003ff8:	0020      	movs	r0, r4
 8003ffa:	f00f f8bb 	bl	8013174 <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8003ffe:	4b6d      	ldr	r3, [pc, #436]	; (80041b4 <DisplayModuleStatus+0x2bc>)
 8004000:	4e6d      	ldr	r6, [pc, #436]	; (80041b8 <DisplayModuleStatus+0x2c0>)
 8004002:	469b      	mov	fp, r3
 8004004:	4b6d      	ldr	r3, [pc, #436]	; (80041bc <DisplayModuleStatus+0x2c4>)
	strcat((char* )pcOutputString,pcUserMessage);
 8004006:	2501      	movs	r5, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004008:	469a      	mov	sl, r3
 800400a:	e01d      	b.n	8004048 <DisplayModuleStatus+0x150>
 800400c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800400e:	f005 ffdf 	bl	8009fd0 <GetPort>
 8004012:	465a      	mov	r2, fp
 8004014:	00ab      	lsls	r3, r5, #2
 8004016:	3b04      	subs	r3, #4
 8004018:	0004      	movs	r4, r0
 800401a:	58d0      	ldr	r0, [r2, r3]
 800401c:	f005 ffd8 	bl	8009fd0 <GetPort>
 8004020:	2340      	movs	r3, #64	; 0x40
 8004022:	4699      	mov	r9, r3
 8004024:	4b53      	ldr	r3, [pc, #332]	; (8004174 <DisplayModuleStatus+0x27c>)
 8004026:	002a      	movs	r2, r5
 8004028:	469c      	mov	ip, r3
 800402a:	44e1      	add	r9, ip
 800402c:	9000      	str	r0, [sp, #0]
 800402e:	0023      	movs	r3, r4
 8004030:	4651      	mov	r1, sl
 8004032:	4648      	mov	r0, r9
 8004034:	f00f f87e 	bl	8013134 <sprintf>
 8004038:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 800403a:	4649      	mov	r1, r9
 800403c:	4640      	mov	r0, r8
 800403e:	f00f f899 	bl	8013174 <strcat>
 8004042:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 8004044:	2d07      	cmp	r5, #7
 8004046:	d011      	beq.n	800406c <DisplayModuleStatus+0x174>
		if(streamDMA[i - 1].Instance == 0){
 8004048:	6833      	ldr	r3, [r6, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1de      	bne.n	800400c <DisplayModuleStatus+0x114>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 800404e:	4c49      	ldr	r4, [pc, #292]	; (8004174 <DisplayModuleStatus+0x27c>)
 8004050:	002a      	movs	r2, r5
 8004052:	3440      	adds	r4, #64	; 0x40
 8004054:	495a      	ldr	r1, [pc, #360]	; (80041c0 <DisplayModuleStatus+0x2c8>)
 8004056:	0020      	movs	r0, r4
 8004058:	f00f f86c 	bl	8013134 <sprintf>
 800405c:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 800405e:	0021      	movs	r1, r4
 8004060:	4640      	mov	r0, r8
 8004062:	f00f f887 	bl	8013174 <strcat>
 8004066:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 8004068:	2d07      	cmp	r5, #7
 800406a:	d1ed      	bne.n	8004048 <DisplayModuleStatus+0x150>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 800406c:	4640      	mov	r0, r8
 800406e:	f7fc f853 	bl	8000118 <strlen>
 8004072:	4644      	mov	r4, r8
 8004074:	0005      	movs	r5, r0
 8004076:	4b53      	ldr	r3, [pc, #332]	; (80041c4 <DisplayModuleStatus+0x2cc>)
 8004078:	2202      	movs	r2, #2
 800407a:	0019      	movs	r1, r3
 800407c:	1820      	adds	r0, r4, r0
 800407e:	4698      	mov	r8, r3
 8004080:	f00e fe55 	bl	8012d2e <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004084:	1ca8      	adds	r0, r5, #2
 8004086:	221d      	movs	r2, #29
 8004088:	1820      	adds	r0, r4, r0
 800408a:	494f      	ldr	r1, [pc, #316]	; (80041c8 <DisplayModuleStatus+0x2d0>)
 800408c:	f00e fe4f 	bl	8012d2e <memcpy>
	temp =strlen((char* )pcOutputString);
 8004090:	231e      	movs	r3, #30
 8004092:	469b      	mov	fp, r3
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
		{
			sprintf(pcUserMessage,"P%d ",p);
 8004094:	4b4d      	ldr	r3, [pc, #308]	; (80041cc <DisplayModuleStatus+0x2d4>)
	temp =strlen((char* )pcOutputString);
 8004096:	44ab      	add	fp, r5
			sprintf(pcUserMessage,"P%d ",p);
 8004098:	4699      	mov	r9, r3
 800409a:	2340      	movs	r3, #64	; 0x40
 800409c:	469a      	mov	sl, r3
 800409e:	4b35      	ldr	r3, [pc, #212]	; (8004174 <DisplayModuleStatus+0x27c>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040a0:	2580      	movs	r5, #128	; 0x80
			sprintf(pcUserMessage,"P%d ",p);
 80040a2:	469c      	mov	ip, r3
	temp =strlen((char* )pcOutputString);
 80040a4:	2200      	movs	r2, #0
 80040a6:	4e4a      	ldr	r6, [pc, #296]	; (80041d0 <DisplayModuleStatus+0x2d8>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040a8:	022d      	lsls	r5, r5, #8
			sprintf(pcUserMessage,"P%d ",p);
 80040aa:	44e2      	add	sl, ip
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040ac:	0029      	movs	r1, r5
 80040ae:	4111      	asrs	r1, r2
 80040b0:	4b31      	ldr	r3, [pc, #196]	; (8004178 <DisplayModuleStatus+0x280>)
 80040b2:	1c57      	adds	r7, r2, #1
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	5af3      	ldrh	r3, [r6, r3]
 80040bc:	4219      	tst	r1, r3
 80040be:	d148      	bne.n	8004152 <DisplayModuleStatus+0x25a>
 80040c0:	003a      	movs	r2, r7
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80040c2:	2f05      	cmp	r7, #5
 80040c4:	d1f2      	bne.n	80040ac <DisplayModuleStatus+0x1b4>
			strcat((char* )pcOutputString,pcUserMessage);
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80040c6:	0020      	movs	r0, r4
 80040c8:	f7fc f826 	bl	8000118 <strlen>
 80040cc:	465b      	mov	r3, fp
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	0005      	movs	r5, r0
 80040d2:	1820      	adds	r0, r4, r0
 80040d4:	42ab      	cmp	r3, r5
 80040d6:	d046      	beq.n	8004166 <DisplayModuleStatus+0x26e>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80040d8:	2203      	movs	r2, #3
 80040da:	4641      	mov	r1, r8
 80040dc:	f00e fe27 	bl	8012d2e <memcpy>
	
	/* Display output */
	if(port)
 80040e0:	9b03      	ldr	r3, [sp, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00b      	beq.n	80040fe <DisplayModuleStatus+0x206>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80040e6:	0020      	movs	r0, r4
 80040e8:	f7fc f816 	bl	8000118 <strlen>
 80040ec:	2301      	movs	r3, #1
 80040ee:	425b      	negs	r3, r3
 80040f0:	b282      	uxth	r2, r0
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	0021      	movs	r1, r4
 80040f6:	3333      	adds	r3, #51	; 0x33
 80040f8:	9803      	ldr	r0, [sp, #12]
 80040fa:	f009 f993 	bl	800d424 <writePxMutex>
	
}
 80040fe:	b005      	add	sp, #20
 8004100:	bc3c      	pop	{r2, r3, r4, r5}
 8004102:	4690      	mov	r8, r2
 8004104:	4699      	mov	r9, r3
 8004106:	46a2      	mov	sl, r4
 8004108:	46ab      	mov	fp, r5
 800410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 800410c:	002a      	movs	r2, r5
 800410e:	4b31      	ldr	r3, [pc, #196]	; (80041d4 <DisplayModuleStatus+0x2dc>)
 8004110:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004112:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 8004114:	e761      	b.n	8003fda <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004116:	002a      	movs	r2, r5
 8004118:	4b2f      	ldr	r3, [pc, #188]	; (80041d8 <DisplayModuleStatus+0x2e0>)
 800411a:	cb83      	ldmia	r3!, {r0, r1, r7}
 800411c:	c283      	stmia	r2!, {r0, r1, r7}
 800411e:	cb03      	ldmia	r3!, {r0, r1}
 8004120:	c203      	stmia	r2!, {r0, r1}
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	7013      	strb	r3, [r2, #0]
				break;
 8004126:	e758      	b.n	8003fda <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004128:	002b      	movs	r3, r5
 800412a:	465a      	mov	r2, fp
 800412c:	ca83      	ldmia	r2!, {r0, r1, r7}
 800412e:	c383      	stmia	r3!, {r0, r1, r7}
 8004130:	ca83      	ldmia	r2!, {r0, r1, r7}
 8004132:	c383      	stmia	r3!, {r0, r1, r7}
 8004134:	6811      	ldr	r1, [r2, #0]
 8004136:	6019      	str	r1, [r3, #0]
 8004138:	8891      	ldrh	r1, [r2, #4]
 800413a:	8099      	strh	r1, [r3, #4]
 800413c:	7992      	ldrb	r2, [r2, #6]
 800413e:	719a      	strb	r2, [r3, #6]
				break;
 8004140:	e74b      	b.n	8003fda <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Free\n\r");
 8004142:	4b26      	ldr	r3, [pc, #152]	; (80041dc <DisplayModuleStatus+0x2e4>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	602a      	str	r2, [r5, #0]
 8004148:	889a      	ldrh	r2, [r3, #4]
 800414a:	80aa      	strh	r2, [r5, #4]
 800414c:	799b      	ldrb	r3, [r3, #6]
 800414e:	71ab      	strb	r3, [r5, #6]
				break;
 8004150:	e743      	b.n	8003fda <DisplayModuleStatus+0xe2>
			sprintf(pcUserMessage,"P%d ",p);
 8004152:	4649      	mov	r1, r9
 8004154:	003a      	movs	r2, r7
 8004156:	4650      	mov	r0, sl
 8004158:	f00e ffec 	bl	8013134 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800415c:	4651      	mov	r1, sl
 800415e:	0020      	movs	r0, r4
 8004160:	f00f f808 	bl	8013174 <strcat>
 8004164:	e7ac      	b.n	80040c0 <DisplayModuleStatus+0x1c8>
		strcat((char* )pcOutputString,"None");
 8004166:	2205      	movs	r2, #5
 8004168:	491d      	ldr	r1, [pc, #116]	; (80041e0 <DisplayModuleStatus+0x2e8>)
 800416a:	f00e fde0 	bl	8012d2e <memcpy>
 800416e:	1d28      	adds	r0, r5, #4
 8004170:	1820      	adds	r0, r4, r0
 8004172:	e7b1      	b.n	80040d8 <DisplayModuleStatus+0x1e0>
 8004174:	20000ba8 	.word	0x20000ba8
 8004178:	20000aa8 	.word	0x20000aa8
 800417c:	08017cc0 	.word	0x08017cc0
 8004180:	20000c28 	.word	0x20000c28
 8004184:	08017cdc 	.word	0x08017cdc
 8004188:	08017cf8 	.word	0x08017cf8
 800418c:	08017d18 	.word	0x08017d18
 8004190:	08017d24 	.word	0x08017d24
 8004194:	08017d3c 	.word	0x08017d3c
 8004198:	08017d48 	.word	0x08017d48
 800419c:	08017d64 	.word	0x08017d64
 80041a0:	08017d78 	.word	0x08017d78
 80041a4:	080174d8 	.word	0x080174d8
 80041a8:	08017dc8 	.word	0x08017dc8
 80041ac:	08017dac 	.word	0x08017dac
 80041b0:	08017de8 	.word	0x08017de8
 80041b4:	200012cc 	.word	0x200012cc
 80041b8:	20001ae0 	.word	0x20001ae0
 80041bc:	08017e1c 	.word	0x08017e1c
 80041c0:	08017e00 	.word	0x08017e00
 80041c4:	08017d74 	.word	0x08017d74
 80041c8:	08017e4c 	.word	0x08017e4c
 80041cc:	08017e6c 	.word	0x08017e6c
 80041d0:	20007238 	.word	0x20007238
 80041d4:	08017da0 	.word	0x08017da0
 80041d8:	08017d88 	.word	0x08017d88
 80041dc:	08017d80 	.word	0x08017d80
 80041e0:	08017e74 	.word	0x08017e74

080041e4 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 80041e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e6:	46c6      	mov	lr, r8
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 80041e8:	4929      	ldr	r1, [pc, #164]	; (8004290 <GetID+0xac>)
int16_t GetID(char *string){
 80041ea:	b500      	push	{lr}
 80041ec:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 80041ee:	f7fb ff89 	bl	8000104 <strcmp>
 80041f2:	2800      	cmp	r0, #0
 80041f4:	d02c      	beq.n	8004250 <GetID+0x6c>
		return myID;
	else if(!strcmp(string,"all"))
 80041f6:	4927      	ldr	r1, [pc, #156]	; (8004294 <GetID+0xb0>)
 80041f8:	0030      	movs	r0, r6
 80041fa:	f7fb ff83 	bl	8000104 <strcmp>
 80041fe:	2800      	cmp	r0, #0
 8004200:	d02b      	beq.n	800425a <GetID+0x76>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 8004202:	7833      	ldrb	r3, [r6, #0]
 8004204:	4698      	mov	r8, r3
 8004206:	2b23      	cmp	r3, #35	; 0x23
 8004208:	d030      	beq.n	800426c <GetID+0x88>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 800420a:	4b23      	ldr	r3, [pc, #140]	; (8004298 <GetID+0xb4>)
 800420c:	781f      	ldrb	r7, [r3, #0]
 800420e:	2f00      	cmp	r7, #0
 8004210:	d00f      	beq.n	8004232 <GetID+0x4e>
 8004212:	2400      	movs	r4, #0
 8004214:	4d21      	ldr	r5, [pc, #132]	; (800429c <GetID+0xb8>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004216:	0029      	movs	r1, r5
 8004218:	0030      	movs	r0, r6
 800421a:	f7fb ff73 	bl	8000104 <strcmp>
 800421e:	2800      	cmp	r0, #0
 8004220:	d102      	bne.n	8004228 <GetID+0x44>
 8004222:	4643      	mov	r3, r8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11a      	bne.n	800425e <GetID+0x7a>
		for(i =0; i < N; i++){
 8004228:	3401      	adds	r4, #1
 800422a:	b2e4      	uxtb	r4, r4
 800422c:	350a      	adds	r5, #10
 800422e:	42a7      	cmp	r7, r4
 8004230:	d1f1      	bne.n	8004216 <GetID+0x32>
 8004232:	2400      	movs	r4, #0
 8004234:	4d1a      	ldr	r5, [pc, #104]	; (80042a0 <GetID+0xbc>)
 8004236:	3538      	adds	r5, #56	; 0x38
				return (i);
		}
		
		/* Check group alias */
		for(i =0; i < MaxNumOfGroups; i++){
			if(!strcmp(string,groupAlias[i]))
 8004238:	0029      	movs	r1, r5
 800423a:	0030      	movs	r0, r6
 800423c:	f7fb ff62 	bl	8000104 <strcmp>
 8004240:	2800      	cmp	r0, #0
 8004242:	d00e      	beq.n	8004262 <GetID+0x7e>
 8004244:	3401      	adds	r4, #1
 8004246:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8004248:	2c0a      	cmp	r4, #10
 800424a:	d1f5      	bne.n	8004238 <GetID+0x54>
				return (BOS_MULTICAST | (i << 8));
		}
		
		return BOS_ERR_WrongName;
 800424c:	2064      	movs	r0, #100	; 0x64
 800424e:	e001      	b.n	8004254 <GetID+0x70>
		return myID;
 8004250:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <GetID+0xbc>)
 8004252:	7818      	ldrb	r0, [r3, #0]
	}
	
}
 8004254:	bc04      	pop	{r2}
 8004256:	4690      	mov	r8, r2
 8004258:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_BROADCAST;
 800425a:	20ff      	movs	r0, #255	; 0xff
 800425c:	e7fa      	b.n	8004254 <GetID+0x70>
				return (i);
 800425e:	b220      	sxth	r0, r4
 8004260:	e7f8      	b.n	8004254 <GetID+0x70>
				return (BOS_MULTICAST | (i << 8));
 8004262:	20fe      	movs	r0, #254	; 0xfe
 8004264:	0224      	lsls	r4, r4, #8
 8004266:	4320      	orrs	r0, r4
 8004268:	b200      	sxth	r0, r0
 800426a:	e7f3      	b.n	8004254 <GetID+0x70>
		id =atol(string + 1);
 800426c:	1c70      	adds	r0, r6, #1
 800426e:	f00e fa9e 	bl	80127ae <atol>
 8004272:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <GetID+0x9c>
 8004278:	4a07      	ldr	r2, [pc, #28]	; (8004298 <GetID+0xb4>)
 800427a:	7812      	ldrb	r2, [r2, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d204      	bcs.n	800428a <GetID+0xa6>
		else if(id == myID)
 8004280:	4a07      	ldr	r2, [pc, #28]	; (80042a0 <GetID+0xbc>)
			return BOS_ERR_WrongID;
 8004282:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 8004284:	7812      	ldrb	r2, [r2, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d1e4      	bne.n	8004254 <GetID+0x70>
			return myID;
 800428a:	b218      	sxth	r0, r3
 800428c:	e7e2      	b.n	8004254 <GetID+0x70>
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	08017e7c 	.word	0x08017e7c
 8004294:	08017e80 	.word	0x08017e80
 8004298:	20000010 	.word	0x20000010
 800429c:	20000dd4 	.word	0x20000dd4
 80042a0:	20000aa8 	.word	0x20000aa8

080042a4 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 80042a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a6:	46c6      	mov	lr, r8
 80042a8:	4c2c      	ldr	r4, [pc, #176]	; (800435c <NameModule+0xb8>)
 80042aa:	0007      	movs	r7, r0
 80042ac:	0026      	movs	r6, r4
 80042ae:	000d      	movs	r5, r1
 80042b0:	b500      	push	{lr}
 80042b2:	3610      	adds	r6, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 80042b4:	0021      	movs	r1, r4
 80042b6:	0028      	movs	r0, r5
 80042b8:	f7fb ff24 	bl	8000104 <strcmp>
 80042bc:	2800      	cmp	r0, #0
 80042be:	d040      	beq.n	8004342 <NameModule+0x9e>
 80042c0:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 80042c2:	42a6      	cmp	r6, r4
 80042c4:	d1f6      	bne.n	80042b4 <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 80042c6:	4b26      	ldr	r3, [pc, #152]	; (8004360 <NameModule+0xbc>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d914      	bls.n	80042f8 <NameModule+0x54>
 80042ce:	4c25      	ldr	r4, [pc, #148]	; (8004364 <NameModule+0xc0>)
 80042d0:	009e      	lsls	r6, r3, #2
 80042d2:	18f6      	adds	r6, r6, r3
 80042d4:	0023      	movs	r3, r4
 80042d6:	0076      	lsls	r6, r6, #1
 80042d8:	3b0a      	subs	r3, #10
 80042da:	18f6      	adds	r6, r6, r3
 80042dc:	e002      	b.n	80042e4 <NameModule+0x40>
 80042de:	340a      	adds	r4, #10
 80042e0:	42b4      	cmp	r4, r6
 80042e2:	d009      	beq.n	80042f8 <NameModule+0x54>
		if(!strcmp(alias,moduleAlias[i]))
 80042e4:	0021      	movs	r1, r4
 80042e6:	0028      	movs	r0, r5
 80042e8:	f7fb ff0c 	bl	8000104 <strcmp>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d1f6      	bne.n	80042de <NameModule+0x3a>
			return BOS_ERR_ExistingAlias;
 80042f0:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 80042f2:	bc04      	pop	{r2}
 80042f4:	4690      	mov	r8, r2
 80042f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f8:	4e1b      	ldr	r6, [pc, #108]	; (8004368 <NameModule+0xc4>)
 80042fa:	0034      	movs	r4, r6
 80042fc:	369c      	adds	r6, #156	; 0x9c
 80042fe:	3438      	adds	r4, #56	; 0x38
		if(!strcmp(alias,groupAlias[i]))
 8004300:	0021      	movs	r1, r4
 8004302:	0028      	movs	r0, r5
 8004304:	f7fb fefe 	bl	8000104 <strcmp>
 8004308:	2800      	cmp	r0, #0
 800430a:	d0f1      	beq.n	80042f0 <NameModule+0x4c>
 800430c:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 800430e:	42a6      	cmp	r6, r4
 8004310:	d1f6      	bne.n	8004300 <NameModule+0x5c>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004312:	4b16      	ldr	r3, [pc, #88]	; (800436c <NameModule+0xc8>)
 8004314:	4c16      	ldr	r4, [pc, #88]	; (8004370 <NameModule+0xcc>)
 8004316:	4698      	mov	r8, r3
 8004318:	61dc      	str	r4, [r3, #28]
 800431a:	e004      	b.n	8004326 <NameModule+0x82>
 800431c:	4643      	mov	r3, r8
 800431e:	6864      	ldr	r4, [r4, #4]
 8004320:	61dc      	str	r4, [r3, #28]
 8004322:	2c00      	cmp	r4, #0
 8004324:	d00f      	beq.n	8004346 <NameModule+0xa2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	681e      	ldr	r6, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800432a:	0030      	movs	r0, r6
 800432c:	f7fb fef4 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004330:	0031      	movs	r1, r6
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004332:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004334:	0028      	movs	r0, r5
 8004336:	f00e ff41 	bl	80131bc <strncmp>
 800433a:	2800      	cmp	r0, #0
 800433c:	d1ee      	bne.n	800431c <NameModule+0x78>
			return BOS_ERR_ExistingCmd;
 800433e:	2008      	movs	r0, #8
 8004340:	e7d7      	b.n	80042f2 <NameModule+0x4e>
			return BOS_ERR_Keyword;
 8004342:	2006      	movs	r0, #6
 8004344:	e7d5      	b.n	80042f2 <NameModule+0x4e>
	strcpy(moduleAlias[module],alias);
 8004346:	00b8      	lsls	r0, r7, #2
 8004348:	19c0      	adds	r0, r0, r7
 800434a:	4f0a      	ldr	r7, [pc, #40]	; (8004374 <NameModule+0xd0>)
 800434c:	0040      	lsls	r0, r0, #1
 800434e:	0029      	movs	r1, r5
 8004350:	19c0      	adds	r0, r0, r7
 8004352:	f00e ff2b 	bl	80131ac <strcpy>
	result =SaveEEalias();
 8004356:	f7ff f87f 	bl	8003458 <SaveEEalias>
	return result;
 800435a:	e7ca      	b.n	80042f2 <NameModule+0x4e>
 800435c:	08017534 	.word	0x08017534
 8004360:	20000010 	.word	0x20000010
 8004364:	20000dde 	.word	0x20000dde
 8004368:	20000aa8 	.word	0x20000aa8
 800436c:	20000c28 	.word	0x20000c28
 8004370:	200000c8 	.word	0x200000c8
 8004374:	20000dd4 	.word	0x20000dd4

08004378 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800437a:	464f      	mov	r7, r9
 800437c:	4646      	mov	r6, r8
 800437e:	46d6      	mov	lr, sl
 8004380:	4b3e      	ldr	r3, [pc, #248]	; (800447c <AddModuleToGroup+0x104>)
 8004382:	b5c0      	push	{r6, r7, lr}
 8004384:	001f      	movs	r7, r3
 8004386:	3738      	adds	r7, #56	; 0x38
 8004388:	4680      	mov	r8, r0
 800438a:	000e      	movs	r6, r1
 800438c:	4699      	mov	r9, r3
 800438e:	003c      	movs	r4, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 8004390:	2500      	movs	r5, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 8004392:	0021      	movs	r1, r4
 8004394:	0030      	movs	r0, r6
 8004396:	f7fb feb5 	bl	8000104 <strcmp>
 800439a:	2800      	cmp	r0, #0
 800439c:	d02a      	beq.n	80043f4 <AddModuleToGroup+0x7c>
	for(i =0; i < MaxNumOfGroups; i++){
 800439e:	3501      	adds	r5, #1
 80043a0:	340a      	adds	r4, #10
 80043a2:	2d0a      	cmp	r5, #10
 80043a4:	d1f5      	bne.n	8004392 <AddModuleToGroup+0x1a>
 80043a6:	4c36      	ldr	r4, [pc, #216]	; (8004480 <AddModuleToGroup+0x108>)
 80043a8:	0025      	movs	r5, r4
 80043aa:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 80043ac:	0021      	movs	r1, r4
 80043ae:	0030      	movs	r0, r6
 80043b0:	f7fb fea8 	bl	8000104 <strcmp>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d051      	beq.n	800445c <AddModuleToGroup+0xe4>
 80043b8:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 80043ba:	42a5      	cmp	r5, r4
 80043bc:	d1f6      	bne.n	80043ac <AddModuleToGroup+0x34>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 80043be:	4b31      	ldr	r3, [pc, #196]	; (8004484 <AddModuleToGroup+0x10c>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d920      	bls.n	8004408 <AddModuleToGroup+0x90>
 80043c6:	4c30      	ldr	r4, [pc, #192]	; (8004488 <AddModuleToGroup+0x110>)
 80043c8:	009d      	lsls	r5, r3, #2
 80043ca:	18ed      	adds	r5, r5, r3
 80043cc:	0023      	movs	r3, r4
 80043ce:	006d      	lsls	r5, r5, #1
 80043d0:	3b0a      	subs	r3, #10
 80043d2:	18ed      	adds	r5, r5, r3
 80043d4:	e002      	b.n	80043dc <AddModuleToGroup+0x64>
 80043d6:	340a      	adds	r4, #10
 80043d8:	42a5      	cmp	r5, r4
 80043da:	d015      	beq.n	8004408 <AddModuleToGroup+0x90>
		if(!strcmp(group,moduleAlias[j]))
 80043dc:	0021      	movs	r1, r4
 80043de:	0030      	movs	r0, r6
 80043e0:	f7fb fe90 	bl	8000104 <strcmp>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d1f6      	bne.n	80043d6 <AddModuleToGroup+0x5e>
			return BOS_ERR_ExistingAlias;
 80043e8:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 80043ea:	bc1c      	pop	{r2, r3, r4}
 80043ec:	4690      	mov	r8, r2
 80043ee:	4699      	mov	r9, r3
 80043f0:	46a2      	mov	sl, r4
 80043f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			groupModules[module - 1] |=(0x0001 << i);
 80043f4:	2201      	movs	r2, #1
 80043f6:	4647      	mov	r7, r8
 80043f8:	40aa      	lsls	r2, r5
 80043fa:	3f01      	subs	r7, #1
 80043fc:	007f      	lsls	r7, r7, #1
 80043fe:	444f      	add	r7, r9
 8004400:	88bb      	ldrh	r3, [r7, #4]
 8004402:	4313      	orrs	r3, r2
 8004404:	80bb      	strh	r3, [r7, #4]
			return result;
 8004406:	e7f0      	b.n	80043ea <AddModuleToGroup+0x72>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004408:	4b20      	ldr	r3, [pc, #128]	; (800448c <AddModuleToGroup+0x114>)
 800440a:	4c21      	ldr	r4, [pc, #132]	; (8004490 <AddModuleToGroup+0x118>)
 800440c:	469a      	mov	sl, r3
 800440e:	621c      	str	r4, [r3, #32]
 8004410:	e004      	b.n	800441c <AddModuleToGroup+0xa4>
 8004412:	4653      	mov	r3, sl
 8004414:	6864      	ldr	r4, [r4, #4]
 8004416:	621c      	str	r4, [r3, #32]
 8004418:	2c00      	cmp	r4, #0
 800441a:	d00d      	beq.n	8004438 <AddModuleToGroup+0xc0>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004420:	0028      	movs	r0, r5
 8004422:	f7fb fe79 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004426:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004428:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800442a:	0030      	movs	r0, r6
 800442c:	f00e fec6 	bl	80131bc <strncmp>
 8004430:	2800      	cmp	r0, #0
 8004432:	d1ee      	bne.n	8004412 <AddModuleToGroup+0x9a>
			return BOS_ERR_ExistingCmd;
 8004434:	2008      	movs	r0, #8
 8004436:	e7d8      	b.n	80043ea <AddModuleToGroup+0x72>
		if(!groupAlias[i][0]){
 8004438:	783b      	ldrb	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d010      	beq.n	8004460 <AddModuleToGroup+0xe8>
	for(i =0; i < MaxNumOfGroups; i++){
 800443e:	3401      	adds	r4, #1
 8004440:	370a      	adds	r7, #10
 8004442:	2c0a      	cmp	r4, #10
 8004444:	d1f8      	bne.n	8004438 <AddModuleToGroup+0xc0>
 8004446:	2380      	movs	r3, #128	; 0x80
 8004448:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 800444a:	4647      	mov	r7, r8
 800444c:	3f01      	subs	r7, #1
 800444e:	007f      	lsls	r7, r7, #1
 8004450:	444f      	add	r7, r9
 8004452:	88ba      	ldrh	r2, [r7, #4]
	return result;
 8004454:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 8004456:	4313      	orrs	r3, r2
 8004458:	80bb      	strh	r3, [r7, #4]
	return result;
 800445a:	e7c6      	b.n	80043ea <AddModuleToGroup+0x72>
			return BOS_ERR_Keyword;
 800445c:	2006      	movs	r0, #6
 800445e:	e7c4      	b.n	80043ea <AddModuleToGroup+0x72>
			strcpy(groupAlias[i],group);
 8004460:	464b      	mov	r3, r9
 8004462:	00a0      	lsls	r0, r4, #2
 8004464:	1900      	adds	r0, r0, r4
 8004466:	3338      	adds	r3, #56	; 0x38
 8004468:	0040      	lsls	r0, r0, #1
 800446a:	1818      	adds	r0, r3, r0
 800446c:	0031      	movs	r1, r6
 800446e:	f00e fe9d 	bl	80131ac <strcpy>
 8004472:	2301      	movs	r3, #1
 8004474:	40a3      	lsls	r3, r4
 8004476:	b21b      	sxth	r3, r3
			break;
 8004478:	e7e7      	b.n	800444a <AddModuleToGroup+0xd2>
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	20000aa8 	.word	0x20000aa8
 8004480:	08017534 	.word	0x08017534
 8004484:	20000010 	.word	0x20000010
 8004488:	20000dde 	.word	0x20000dde
 800448c:	20000c28 	.word	0x20000c28
 8004490:	200000c8 	.word	0x200000c8

08004494 <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004496:	4645      	mov	r5, r8
 8004498:	4657      	mov	r7, sl
 800449a:	464e      	mov	r6, r9
 800449c:	46de      	mov	lr, fp
 800449e:	b5e0      	push	{r5, r6, r7, lr}
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 80044a0:	4f82      	ldr	r7, [pc, #520]	; (80046ac <WriteToRemote+0x218>)
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 80044a2:	b083      	sub	sp, #12
 80044a4:	ac0c      	add	r4, sp, #48	; 0x30
 80044a6:	cc40      	ldmia	r4!, {r6}
	response =BOSMessaging.response;
 80044a8:	783d      	ldrb	r5, [r7, #0]
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 80044aa:	9001      	str	r0, [sp, #4]
 80044ac:	7824      	ldrb	r4, [r4, #0]
	response =BOSMessaging.response;
 80044ae:	46a8      	mov	r8, r5
	if(timeout)
 80044b0:	2e00      	cmp	r6, #0
 80044b2:	d059      	beq.n	8004568 <WriteToRemote+0xd4>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 80044b4:	2520      	movs	r5, #32
 80044b6:	703d      	strb	r5, [r7, #0]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
		code = CODE_WRITE_REMOTE_FORCE;
 80044b8:	4265      	negs	r5, r4
 80044ba:	416c      	adcs	r4, r5
 80044bc:	2501      	movs	r5, #1
 80044be:	2022      	movs	r0, #34	; 0x22
 80044c0:	4264      	negs	r4, r4
 80044c2:	43ac      	bics	r4, r5
 80044c4:	46a3      	mov	fp, r4
 80044c6:	4684      	mov	ip, r0
 80044c8:	b2d5      	uxtb	r5, r2
 80044ca:	46a9      	mov	r9, r5
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 80044cc:	4d78      	ldr	r5, [pc, #480]	; (80046b0 <WriteToRemote+0x21c>)
		code = CODE_WRITE_REMOTE_FORCE;
 80044ce:	44e3      	add	fp, ip
	if(remoteAddress < FLASH_BASE){
 80044d0:	42aa      	cmp	r2, r5
 80044d2:	d829      	bhi.n	8004528 <WriteToRemote+0x94>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 80044d4:	2224      	movs	r2, #36	; 0x24
 80044d6:	464c      	mov	r4, r9
 80044d8:	4d76      	ldr	r5, [pc, #472]	; (80046b4 <WriteToRemote+0x220>)
 80044da:	54ac      	strb	r4, [r5, r2]
		messageParams[1] =format;						// Send local format
 80044dc:	002a      	movs	r2, r5
 80044de:	3224      	adds	r2, #36	; 0x24
 80044e0:	7053      	strb	r3, [r2, #1]
		/* Send variable value based on local format */
		switch(format){
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d814      	bhi.n	8004510 <WriteToRemote+0x7c>
 80044e6:	4a74      	ldr	r2, [pc, #464]	; (80046b8 <WriteToRemote+0x224>)
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	58d3      	ldr	r3, [r2, r3]
 80044ec:	469f      	mov	pc, r3
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
				SendMessageToModule(module,code,10);
				break;
			case FMT_INT32:
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80044ee:	680b      	ldr	r3, [r1, #0]
 80044f0:	3524      	adds	r5, #36	; 0x24
 80044f2:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80044f4:	680b      	ldr	r3, [r1, #0]
 80044f6:	121b      	asrs	r3, r3, #8
 80044f8:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80044fa:	680b      	ldr	r3, [r1, #0]
 80044fc:	141b      	asrs	r3, r3, #16
 80044fe:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004500:	680b      	ldr	r3, [r1, #0]
 8004502:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,code,10);
 8004504:	220a      	movs	r2, #10
 8004506:	4659      	mov	r1, fp
 8004508:	9801      	ldr	r0, [sp, #4]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 800450a:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,code,10);
 800450c:	f003 fe06 	bl	800811c <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 8004510:	4643      	mov	r3, r8
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 8004512:	2000      	movs	r0, #0
	BOSMessaging.response =response;
 8004514:	703b      	strb	r3, [r7, #0]
	if(timeout){
 8004516:	2e00      	cmp	r6, #0
 8004518:	d128      	bne.n	800456c <WriteToRemote+0xd8>
}
 800451a:	b003      	add	sp, #12
 800451c:	bc3c      	pop	{r2, r3, r4, r5}
 800451e:	4690      	mov	r8, r2
 8004520:	4699      	mov	r9, r3
 8004522:	46a2      	mov	sl, r4
 8004524:	46ab      	mov	fp, r5
 8004526:	bdf0      	pop	{r4, r5, r6, r7, pc}
		messageParams[0] =0;
 8004528:	2024      	movs	r0, #36	; 0x24
 800452a:	4684      	mov	ip, r0
 800452c:	2000      	movs	r0, #0
 800452e:	4682      	mov	sl, r0
 8004530:	4660      	mov	r0, ip
 8004532:	4654      	mov	r4, sl
 8004534:	4d5f      	ldr	r5, [pc, #380]	; (80046b4 <WriteToRemote+0x220>)
		messageParams[1] =format;							// Local format
 8004536:	44ac      	add	ip, r5
		messageParams[0] =0;
 8004538:	542c      	strb	r4, [r5, r0]
		messageParams[1] =format;							// Local format
 800453a:	4660      	mov	r0, ip
 800453c:	7043      	strb	r3, [r0, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 800453e:	0e10      	lsrs	r0, r2, #24
 8004540:	4682      	mov	sl, r0
 8004542:	4660      	mov	r0, ip
 8004544:	4654      	mov	r4, sl
 8004546:	7084      	strb	r4, [r0, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 8004548:	0c10      	lsrs	r0, r2, #16
 800454a:	4682      	mov	sl, r0
 800454c:	4660      	mov	r0, ip
 800454e:	4654      	mov	r4, sl
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 8004550:	0a12      	lsrs	r2, r2, #8
 8004552:	7102      	strb	r2, [r0, #4]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 8004554:	70c4      	strb	r4, [r0, #3]
		messageParams[5] =(uint8_t )remoteAddress;
 8004556:	4662      	mov	r2, ip
 8004558:	4648      	mov	r0, r9
 800455a:	7150      	strb	r0, [r2, #5]
		switch(format){
 800455c:	2b08      	cmp	r3, #8
 800455e:	d8d7      	bhi.n	8004510 <WriteToRemote+0x7c>
 8004560:	4a56      	ldr	r2, [pc, #344]	; (80046bc <WriteToRemote+0x228>)
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	58d3      	ldr	r3, [r2, r3]
 8004566:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 8004568:	703e      	strb	r6, [r7, #0]
 800456a:	e7a5      	b.n	80044b8 <WriteToRemote+0x24>
		uint32_t t0 =HAL_GetTick();
 800456c:	f00a ffba 	bl	800f4e4 <HAL_GetTick>
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 8004570:	2424      	movs	r4, #36	; 0x24
		uint32_t t0 =HAL_GetTick();
 8004572:	0007      	movs	r7, r0
 8004574:	4d52      	ldr	r5, [pc, #328]	; (80046c0 <WriteToRemote+0x22c>)
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 8004576:	5d28      	ldrb	r0, [r5, r4]
 8004578:	2800      	cmp	r0, #0
 800457a:	d0ce      	beq.n	800451a <WriteToRemote+0x86>
 800457c:	f00a ffb2 	bl	800f4e4 <HAL_GetTick>
 8004580:	1bc0      	subs	r0, r0, r7
 8004582:	42b0      	cmp	r0, r6
 8004584:	d3f7      	bcc.n	8004576 <WriteToRemote+0xe2>
 8004586:	5d28      	ldrb	r0, [r5, r4]
		return responseStatus;
 8004588:	e7c7      	b.n	800451a <WriteToRemote+0x86>
				messageParams[2] =*(__IO int8_t* )localAddress;
 800458a:	780b      	ldrb	r3, [r1, #0]
 800458c:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 800458e:	2203      	movs	r2, #3
 8004590:	2120      	movs	r1, #32
 8004592:	9801      	ldr	r0, [sp, #4]
				messageParams[2] =*(__IO int8_t* )localAddress;
 8004594:	70ab      	strb	r3, [r5, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 8004596:	f003 fdc1 	bl	800811c <SendMessageToModule>
				break;
 800459a:	e7b9      	b.n	8004510 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO int8_t* )localAddress;
 800459c:	780b      	ldrb	r3, [r1, #0]
 800459e:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,code,7);
 80045a0:	2207      	movs	r2, #7
 80045a2:	4659      	mov	r1, fp
 80045a4:	9801      	ldr	r0, [sp, #4]
				messageParams[6] =*(__IO int8_t* )localAddress;
 80045a6:	71ab      	strb	r3, [r5, #6]
				SendMessageToModule(module,code,7);
 80045a8:	f003 fdb8 	bl	800811c <SendMessageToModule>
				break;
 80045ac:	e7b0      	b.n	8004510 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80045ae:	680b      	ldr	r3, [r1, #0]
 80045b0:	3524      	adds	r5, #36	; 0x24
 80045b2:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80045b4:	680b      	ldr	r3, [r1, #0]
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 80045ba:	680b      	ldr	r3, [r1, #0]
 80045bc:	0c1b      	lsrs	r3, r3, #16
 80045be:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 80045c0:	680b      	ldr	r3, [r1, #0]
 80045c2:	0e1b      	lsrs	r3, r3, #24
 80045c4:	e79e      	b.n	8004504 <WriteToRemote+0x70>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 80045c6:	780b      	ldrb	r3, [r1, #0]
 80045c8:	3524      	adds	r5, #36	; 0x24
 80045ca:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 80045cc:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 80045ce:	220a      	movs	r2, #10
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 80045d0:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 80045d2:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 80045d4:	9801      	ldr	r0, [sp, #4]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 80045d6:	712b      	strb	r3, [r5, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 80045d8:	78cb      	ldrb	r3, [r1, #3]
 80045da:	716b      	strb	r3, [r5, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 80045dc:	790b      	ldrb	r3, [r1, #4]
 80045de:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 80045e0:	794b      	ldrb	r3, [r1, #5]
 80045e2:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 80045e4:	798b      	ldrb	r3, [r1, #6]
 80045e6:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 80045e8:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 80045ea:	2120      	movs	r1, #32
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 80045ec:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 80045ee:	f003 fd95 	bl	800811c <SendMessageToModule>
				break;
 80045f2:	e78d      	b.n	8004510 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 80045f4:	780b      	ldrb	r3, [r1, #0]
 80045f6:	3524      	adds	r5, #36	; 0x24
 80045f8:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 80045fa:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,code,14);
 80045fc:	220e      	movs	r2, #14
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 80045fe:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004600:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,code,14);
 8004602:	9801      	ldr	r0, [sp, #4]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004604:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 8004606:	78cb      	ldrb	r3, [r1, #3]
 8004608:	726b      	strb	r3, [r5, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 800460a:	790b      	ldrb	r3, [r1, #4]
 800460c:	72ab      	strb	r3, [r5, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 800460e:	794b      	ldrb	r3, [r1, #5]
 8004610:	72eb      	strb	r3, [r5, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 8004612:	798b      	ldrb	r3, [r1, #6]
 8004614:	732b      	strb	r3, [r5, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004616:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,code,14);
 8004618:	4659      	mov	r1, fp
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800461a:	736b      	strb	r3, [r5, #13]
				SendMessageToModule(module,code,14);
 800461c:	f003 fd7e 	bl	800811c <SendMessageToModule>
				break;
 8004620:	e776      	b.n	8004510 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 8004622:	880b      	ldrh	r3, [r1, #0]
 8004624:	3524      	adds	r5, #36	; 0x24
 8004626:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004628:	880b      	ldrh	r3, [r1, #0]
 800462a:	b21b      	sxth	r3, r3
 800462c:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,code,8);
 800462e:	2208      	movs	r2, #8
 8004630:	4659      	mov	r1, fp
 8004632:	9801      	ldr	r0, [sp, #4]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004634:	71eb      	strb	r3, [r5, #7]
				SendMessageToModule(module,code,8);
 8004636:	f003 fd71 	bl	800811c <SendMessageToModule>
				break;
 800463a:	e769      	b.n	8004510 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 800463c:	880b      	ldrh	r3, [r1, #0]
 800463e:	3524      	adds	r5, #36	; 0x24
 8004640:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 8004642:	880b      	ldrh	r3, [r1, #0]
 8004644:	0a1b      	lsrs	r3, r3, #8
 8004646:	e7f2      	b.n	800462e <WriteToRemote+0x19a>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 8004648:	680b      	ldr	r3, [r1, #0]
 800464a:	3524      	adds	r5, #36	; 0x24
 800464c:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 800464e:	680b      	ldr	r3, [r1, #0]
 8004650:	121b      	asrs	r3, r3, #8
 8004652:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 8004654:	680b      	ldr	r3, [r1, #0]
 8004656:	141b      	asrs	r3, r3, #16
 8004658:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 800465a:	680b      	ldr	r3, [r1, #0]
 800465c:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 800465e:	2206      	movs	r2, #6
 8004660:	2120      	movs	r1, #32
 8004662:	9801      	ldr	r0, [sp, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004664:	716b      	strb	r3, [r5, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 8004666:	f003 fd59 	bl	800811c <SendMessageToModule>
				break;
 800466a:	e751      	b.n	8004510 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 800466c:	680b      	ldr	r3, [r1, #0]
 800466e:	3524      	adds	r5, #36	; 0x24
 8004670:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 8004672:	680b      	ldr	r3, [r1, #0]
 8004674:	0a1b      	lsrs	r3, r3, #8
 8004676:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 8004678:	680b      	ldr	r3, [r1, #0]
 800467a:	0c1b      	lsrs	r3, r3, #16
 800467c:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 800467e:	680b      	ldr	r3, [r1, #0]
 8004680:	0e1b      	lsrs	r3, r3, #24
 8004682:	e7ec      	b.n	800465e <WriteToRemote+0x1ca>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 8004684:	880b      	ldrh	r3, [r1, #0]
 8004686:	3524      	adds	r5, #36	; 0x24
 8004688:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 800468a:	880b      	ldrh	r3, [r1, #0]
 800468c:	b21b      	sxth	r3, r3
 800468e:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004690:	2204      	movs	r2, #4
 8004692:	2120      	movs	r1, #32
 8004694:	9801      	ldr	r0, [sp, #4]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004696:	70eb      	strb	r3, [r5, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004698:	f003 fd40 	bl	800811c <SendMessageToModule>
				break;
 800469c:	e738      	b.n	8004510 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 800469e:	880b      	ldrh	r3, [r1, #0]
 80046a0:	3524      	adds	r5, #36	; 0x24
 80046a2:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80046a4:	880b      	ldrh	r3, [r1, #0]
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	e7f2      	b.n	8004690 <WriteToRemote+0x1fc>
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	20006d34 	.word	0x20006d34
 80046b0:	07ffffff 	.word	0x07ffffff
 80046b4:	20000b28 	.word	0x20000b28
 80046b8:	080174ec 	.word	0x080174ec
 80046bc:	08017510 	.word	0x08017510
 80046c0:	20000c28 	.word	0x20000c28

080046c4 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 80046c4:	b530      	push	{r4, r5, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 80046c6:	2101      	movs	r1, #1
char* GetDateString(void){
 80046c8:	b083      	sub	sp, #12
	char *buffer =malloc(30 * sizeof(int8_t));
 80046ca:	201e      	movs	r0, #30
 80046cc:	f00e f876 	bl	80127bc <calloc>
 80046d0:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 80046d2:	4809      	ldr	r0, [pc, #36]	; (80046f8 <GetDateString+0x34>)
 80046d4:	4909      	ldr	r1, [pc, #36]	; (80046fc <GetDateString+0x38>)
 80046d6:	7d02      	ldrb	r2, [r0, #20]
 80046d8:	8b05      	ldrh	r5, [r0, #24]
 80046da:	7d83      	ldrb	r3, [r0, #22]
 80046dc:	3a01      	subs	r2, #1
 80046de:	9501      	str	r5, [sp, #4]
 80046e0:	7d40      	ldrb	r0, [r0, #21]
 80046e2:	0092      	lsls	r2, r2, #2
 80046e4:	188a      	adds	r2, r1, r2
 80046e6:	9000      	str	r0, [sp, #0]
 80046e8:	6912      	ldr	r2, [r2, #16]
 80046ea:	312c      	adds	r1, #44	; 0x2c
 80046ec:	0020      	movs	r0, r4
 80046ee:	f00e fd21 	bl	8013134 <sprintf>
	return buffer;
}
 80046f2:	0020      	movs	r0, r4
 80046f4:	b003      	add	sp, #12
 80046f6:	bd30      	pop	{r4, r5, pc}
 80046f8:	20006db4 	.word	0x20006db4
 80046fc:	08017534 	.word	0x08017534

08004700 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004700:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004702:	4b08      	ldr	r3, [pc, #32]	; (8004724 <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004704:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004706:	7819      	ldrb	r1, [r3, #0]
 8004708:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 800470a:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800470c:	9303      	str	r3, [sp, #12]
 800470e:	3b02      	subs	r3, #2
 8004710:	9302      	str	r3, [sp, #8]
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	3303      	adds	r3, #3
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	000b      	movs	r3, r1
 800471a:	f003 fd23 	bl	8008164 <StartScastDMAStream>
}
 800471e:	b005      	add	sp, #20
 8004720:	bd00      	pop	{pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	20000aa8 	.word	0x20000aa8

08004728 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004728:	2300      	movs	r3, #0
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 800472a:	b530      	push	{r4, r5, lr}
 800472c:	0004      	movs	r4, r0
 800472e:	000d      	movs	r5, r1
 8004730:	b087      	sub	sp, #28
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004732:	9304      	str	r3, [sp, #16]
 8004734:	9303      	str	r3, [sp, #12]
 8004736:	9302      	str	r3, [sp, #8]
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	2200      	movs	r2, #0
 800473e:	2100      	movs	r1, #0
 8004740:	2000      	movs	r0, #0
 8004742:	f7fe fecd 	bl	80034e0 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 8004746:	1e60      	subs	r0, r4, #1
 8004748:	00c3      	lsls	r3, r0, #3
 800474a:	4912      	ldr	r1, [pc, #72]	; (8004794 <Unbridge+0x6c>)
 800474c:	1a1b      	subs	r3, r3, r0
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	585b      	ldr	r3, [r3, r1]
 8004752:	1e6a      	subs	r2, r5, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d012      	beq.n	800477e <Unbridge+0x56>
 8004758:	00d3      	lsls	r3, r2, #3
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	585b      	ldr	r3, [r3, r1]
		SwitchStreamDMAToMsg(port1);
 8004760:	0020      	movs	r0, r4
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 8004762:	2b00      	cmp	r3, #0
 8004764:	d104      	bne.n	8004770 <Unbridge+0x48>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 8004766:	f006 fa65 	bl	800ac34 <SwitchStreamDMAToMsg>
		return BOS_OK;
 800476a:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 800476c:	b007      	add	sp, #28
 800476e:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 8004770:	f006 fa60 	bl	800ac34 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 8004774:	0028      	movs	r0, r5
 8004776:	f006 fa5d 	bl	800ac34 <SwitchStreamDMAToMsg>
		return BOS_OK;
 800477a:	2000      	movs	r0, #0
 800477c:	e7f6      	b.n	800476c <Unbridge+0x44>
	else if(streamDMA[port2 - 1].Instance != 0){
 800477e:	00d3      	lsls	r3, r2, #3
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	585b      	ldr	r3, [r3, r1]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <Unbridge+0x66>
		SwitchStreamDMAToMsg(port2);
 800478a:	0028      	movs	r0, r5
 800478c:	e7eb      	b.n	8004766 <Unbridge+0x3e>
		return BOS_ERR_WrongValue;
 800478e:	2068      	movs	r0, #104	; 0x68
 8004790:	e7ec      	b.n	800476c <Unbridge+0x44>
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	20001ae0 	.word	0x20001ae0

08004798 <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 8004798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800479a:	46d6      	mov	lr, sl
 800479c:	4646      	mov	r6, r8
 800479e:	464f      	mov	r7, r9
 80047a0:	b5c0      	push	{r6, r7, lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 80047a2:	4e27      	ldr	r6, [pc, #156]	; (8004840 <AddSnippet.part.0+0xa8>)
 80047a4:	4d27      	ldr	r5, [pc, #156]	; (8004844 <AddSnippet.part.0+0xac>)
 80047a6:	7833      	ldrb	r3, [r6, #0]
BOS_Status AddSnippet(uint8_t code,char *string){
 80047a8:	4680      	mov	r8, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 80047aa:	3b01      	subs	r3, #1
 80047ac:	009c      	lsls	r4, r3, #2
 80047ae:	18e4      	adds	r4, r4, r3
 80047b0:	00a4      	lsls	r4, r4, #2
 80047b2:	192c      	adds	r4, r5, r4
 80047b4:	68e3      	ldr	r3, [r4, #12]
 80047b6:	469a      	mov	sl, r3
 80047b8:	f7fb fcae 	bl	8000118 <strlen>
 80047bc:	4653      	mov	r3, sl
 80047be:	4681      	mov	r9, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d02e      	beq.n	8004822 <AddSnippet.part.0+0x8a>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 80047c4:	4650      	mov	r0, sl
 80047c6:	f7fb fca7 	bl	8000118 <strlen>
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 80047ca:	4649      	mov	r1, r9
 80047cc:	3102      	adds	r1, #2
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 80047ce:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 80047d0:	1809      	adds	r1, r1, r0
 80047d2:	4650      	mov	r0, sl
 80047d4:	f00e fae6 	bl	8012da4 <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 80047d8:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 80047da:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 80047dc:	3a01      	subs	r2, #1
 80047de:	0093      	lsls	r3, r2, #2
 80047e0:	189b      	adds	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	18eb      	adds	r3, r5, r3
 80047e6:	68d8      	ldr	r0, [r3, #12]
 80047e8:	1c7a      	adds	r2, r7, #1
 80047ea:	1880      	adds	r0, r0, r2
 80047ec:	4641      	mov	r1, r8
 80047ee:	f00e fcdd 	bl	80131ac <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 80047f2:	7832      	ldrb	r2, [r6, #0]
 80047f4:	3a01      	subs	r2, #1
 80047f6:	0093      	lsls	r3, r2, #2
 80047f8:	189b      	adds	r3, r3, r2
 80047fa:	2213      	movs	r2, #19
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	18eb      	adds	r3, r5, r3
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	55da      	strb	r2, [r3, r7]
 8004804:	7833      	ldrb	r3, [r6, #0]
 8004806:	3b01      	subs	r3, #1
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004808:	0098      	lsls	r0, r3, #2
 800480a:	18c0      	adds	r0, r0, r3
 800480c:	0080      	lsls	r0, r0, #2
 800480e:	1828      	adds	r0, r5, r0
 8004810:	68c3      	ldr	r3, [r0, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00d      	beq.n	8004832 <AddSnippet.part.0+0x9a>
			
		default:
			break;
	}
	
	return BOS_OK;
 8004816:	2000      	movs	r0, #0
}
 8004818:	bc1c      	pop	{r2, r3, r4}
 800481a:	4690      	mov	r8, r2
 800481c:	4699      	mov	r9, r3
 800481e:	46a2      	mov	sl, r4
 8004820:	bdf0      	pop	{r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004822:	3001      	adds	r0, #1
 8004824:	f00e f836 	bl	8012894 <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004828:	4641      	mov	r1, r8
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 800482a:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 800482c:	f00e fcbe 	bl	80131ac <strcpy>
 8004830:	e7f1      	b.n	8004816 <AddSnippet.part.0+0x7e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004832:	2214      	movs	r2, #20
 8004834:	2100      	movs	r1, #0
 8004836:	f00e fa83 	bl	8012d40 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 800483a:	200e      	movs	r0, #14
 800483c:	e7ec      	b.n	8004818 <AddSnippet.part.0+0x80>
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	20001150 	.word	0x20001150
 8004844:	20006dd0 	.word	0x20006dd0

08004848 <StringToLowerCase>:
void StringToLowerCase(char *string){
 8004848:	b570      	push	{r4, r5, r6, lr}
	for(int i =0; string[i]; i++){
 800484a:	7804      	ldrb	r4, [r0, #0]
void StringToLowerCase(char *string){
 800484c:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 800484e:	2c00      	cmp	r4, #0
 8004850:	d00d      	beq.n	800486e <StringToLowerCase+0x26>
		string[i] =tolower(string[i]);
 8004852:	2603      	movs	r6, #3
 8004854:	f00e f810 	bl	8012878 <__locale_ctype_ptr>
 8004858:	1900      	adds	r0, r0, r4
 800485a:	7842      	ldrb	r2, [r0, #1]
 800485c:	4032      	ands	r2, r6
 800485e:	2a01      	cmp	r2, #1
 8004860:	d100      	bne.n	8004864 <StringToLowerCase+0x1c>
 8004862:	3420      	adds	r4, #32
 8004864:	702c      	strb	r4, [r5, #0]
 8004866:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 8004868:	782c      	ldrb	r4, [r5, #0]
 800486a:	2c00      	cmp	r4, #0
 800486c:	d1f2      	bne.n	8004854 <StringToLowerCase+0xc>
}
 800486e:	bd70      	pop	{r4, r5, r6, pc}

08004870 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004872:	4657      	mov	r7, sl
 8004874:	464e      	mov	r6, r9
 8004876:	46de      	mov	lr, fp
 8004878:	4645      	mov	r5, r8
 800487a:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 800487c:	4ed8      	ldr	r6, [pc, #864]	; (8004be0 <ParseSnippetCondition+0x370>)
BOS_Status ParseSnippetCondition(char *string){
 800487e:	b08b      	sub	sp, #44	; 0x2c
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004880:	7834      	ldrb	r4, [r6, #0]
BOS_Status ParseSnippetCondition(char *string){
 8004882:	0007      	movs	r7, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004884:	2c05      	cmp	r4, #5
 8004886:	d067      	beq.n	8004958 <ParseSnippetCondition+0xe8>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004888:	00a3      	lsls	r3, r4, #2
 800488a:	4dd6      	ldr	r5, [pc, #856]	; (8004be4 <ParseSnippetCondition+0x374>)
 800488c:	1918      	adds	r0, r3, r4
 800488e:	0080      	lsls	r0, r0, #2
 8004890:	469a      	mov	sl, r3
 8004892:	182b      	adds	r3, r5, r0
 8004894:	4699      	mov	r9, r3
 8004896:	2300      	movs	r3, #0
 8004898:	464a      	mov	r2, r9
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 800489a:	3002      	adds	r0, #2
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 800489c:	8013      	strh	r3, [r2, #0]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 800489e:	1828      	adds	r0, r5, r0
 80048a0:	2204      	movs	r2, #4
 80048a2:	2100      	movs	r1, #0
 80048a4:	f00e fa4c 	bl	8012d40 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 80048a8:	783b      	ldrb	r3, [r7, #0]
 80048aa:	2b62      	cmp	r3, #98	; 0x62
 80048ac:	d102      	bne.n	80048b4 <ParseSnippetCondition+0x44>
 80048ae:	78bb      	ldrb	r3, [r7, #2]
 80048b0:	2b2e      	cmp	r3, #46	; 0x2e
 80048b2:	d057      	beq.n	8004964 <ParseSnippetCondition+0xf4>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 80048b4:	1d33      	adds	r3, r6, #4
 80048b6:	4698      	mov	r8, r3
 80048b8:	0018      	movs	r0, r3
 80048ba:	0039      	movs	r1, r7
 80048bc:	f00e fc76 	bl	80131ac <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 80048c0:	4cc9      	ldr	r4, [pc, #804]	; (8004be8 <ParseSnippetCondition+0x378>)
 80048c2:	4640      	mov	r0, r8
 80048c4:	0021      	movs	r1, r4
 80048c6:	f00f faf1 	bl	8013eac <strtok>
		secondPart =strtok( NULL," ");
 80048ca:	0021      	movs	r1, r4
		firstPart =strtok((char* )cInputString," ");
 80048cc:	0007      	movs	r7, r0
		secondPart =strtok( NULL," ");
 80048ce:	2000      	movs	r0, #0
 80048d0:	f00f faec 	bl	8013eac <strtok>
		thirdPart =strtok( NULL," ");
 80048d4:	0021      	movs	r1, r4
		secondPart =strtok( NULL," ");
 80048d6:	4680      	mov	r8, r0
		thirdPart =strtok( NULL," ");
 80048d8:	2000      	movs	r0, #0
 80048da:	f00f fae7 	bl	8013eac <strtok>
 80048de:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 80048e0:	2f00      	cmp	r7, #0
 80048e2:	d02f      	beq.n	8004944 <ParseSnippetCondition+0xd4>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 80048e4:	0038      	movs	r0, r7
 80048e6:	f7fe fefd 	bl	80036e4 <IsModuleParameter>
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 80048ea:	4643      	mov	r3, r8
			modPar1 =IsModuleParameter(firstPart);
 80048ec:	1e07      	subs	r7, r0, #0
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 80048ee:	d036      	beq.n	800495e <ParseSnippetCondition+0xee>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d024      	beq.n	800493e <ParseSnippetCondition+0xce>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 80048f4:	2c00      	cmp	r4, #0
 80048f6:	d025      	beq.n	8004944 <ParseSnippetCondition+0xd4>
				modPar2 =IsModuleParameter(thirdPart);
 80048f8:	0020      	movs	r0, r4
 80048fa:	f7fe fef3 	bl	80036e4 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 80048fe:	2800      	cmp	r0, #0
 8004900:	d06b      	beq.n	80049da <ParseSnippetCondition+0x16a>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004902:	2204      	movs	r2, #4
 8004904:	7833      	ldrb	r3, [r6, #0]
 8004906:	009c      	lsls	r4, r3, #2
 8004908:	4699      	mov	r9, r3
 800490a:	18e3      	adds	r3, r4, r3
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004910:	18eb      	adds	r3, r5, r3
 8004912:	70df      	strb	r7, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004914:	71d8      	strb	r0, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004916:	4640      	mov	r0, r8
 8004918:	f7fe fef0 	bl	80036fc <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 800491c:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800491e:	444c      	add	r4, r9
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004920:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004922:	00a4      	lsls	r4, r4, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004924:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004926:	192c      	adds	r4, r5, r4
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004928:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800492a:	7060      	strb	r0, [r4, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 800492c:	18ed      	adds	r5, r5, r3
 800492e:	786b      	ldrb	r3, [r5, #1]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <ParseSnippetCondition+0xd4>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8004934:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004936:	3201      	adds	r2, #1
 8004938:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 800493a:	4698      	mov	r8, r3
 800493c:	e004      	b.n	8004948 <ParseSnippetCondition+0xd8>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 800493e:	2c00      	cmp	r4, #0
 8004940:	d100      	bne.n	8004944 <ParseSnippetCondition+0xd4>
 8004942:	e07f      	b.n	8004a44 <ParseSnippetCondition+0x1d4>
			return BOS_ERR_WrongParam;
 8004944:	2367      	movs	r3, #103	; 0x67
 8004946:	4698      	mov	r8, r3
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004948:	4640      	mov	r0, r8
 800494a:	b00b      	add	sp, #44	; 0x2c
 800494c:	bc3c      	pop	{r2, r3, r4, r5}
 800494e:	4690      	mov	r8, r2
 8004950:	4699      	mov	r9, r3
 8004952:	46a2      	mov	sl, r4
 8004954:	46ab      	mov	fp, r5
 8004956:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_SNIP_MEM_FULL;
 8004958:	230e      	movs	r3, #14
 800495a:	4698      	mov	r8, r3
 800495c:	e7f4      	b.n	8004948 <ParseSnippetCondition+0xd8>
			else if(secondPart != NULL && thirdPart != NULL){
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1c8      	bne.n	80048f4 <ParseSnippetCondition+0x84>
 8004962:	e7ef      	b.n	8004944 <ParseSnippetCondition+0xd4>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004964:	787b      	ldrb	r3, [r7, #1]
 8004966:	3b30      	subs	r3, #48	; 0x30
 8004968:	b2db      	uxtb	r3, r3
 800496a:	469b      	mov	fp, r3
	BOS_Status status =BOS_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	4698      	mov	r8, r3
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004970:	465b      	mov	r3, fp
 8004972:	2b05      	cmp	r3, #5
 8004974:	d8e8      	bhi.n	8004948 <ParseSnippetCondition+0xd8>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004976:	4649      	mov	r1, r9
 8004978:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 800497a:	4658      	mov	r0, fp
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 800497c:	800b      	strh	r3, [r1, #0]
			if(!strncmp((char* )&string[3],"clicked",7)){
 800497e:	1cfb      	adds	r3, r7, #3
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004980:	7088      	strb	r0, [r1, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004982:	2207      	movs	r2, #7
 8004984:	4999      	ldr	r1, [pc, #612]	; (8004bec <ParseSnippetCondition+0x37c>)
 8004986:	0018      	movs	r0, r3
 8004988:	9307      	str	r3, [sp, #28]
 800498a:	f00e fc17 	bl	80131bc <strncmp>
 800498e:	2800      	cmp	r0, #0
 8004990:	d03d      	beq.n	8004a0e <ParseSnippetCondition+0x19e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004992:	220e      	movs	r2, #14
 8004994:	4996      	ldr	r1, [pc, #600]	; (8004bf0 <ParseSnippetCondition+0x380>)
 8004996:	9807      	ldr	r0, [sp, #28]
 8004998:	f00e fc10 	bl	80131bc <strncmp>
 800499c:	2800      	cmp	r0, #0
 800499e:	d15e      	bne.n	8004a5e <ParseSnippetCondition+0x1ee>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 80049a0:	2306      	movs	r3, #6
 80049a2:	464a      	mov	r2, r9
 80049a4:	70d3      	strb	r3, [r2, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 80049a6:	465b      	mov	r3, fp
 80049a8:	00da      	lsls	r2, r3, #3
 80049aa:	4b92      	ldr	r3, [pc, #584]	; (8004bf4 <ParseSnippetCondition+0x384>)
 80049ac:	445a      	add	r2, fp
 80049ae:	189b      	adds	r3, r3, r2
 80049b0:	7a1b      	ldrb	r3, [r3, #8]
 80049b2:	079b      	lsls	r3, r3, #30
 80049b4:	d40e      	bmi.n	80049d4 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80049b6:	2301      	movs	r3, #1
 80049b8:	9305      	str	r3, [sp, #20]
 80049ba:	4643      	mov	r3, r8
 80049bc:	2201      	movs	r2, #1
 80049be:	9304      	str	r3, [sp, #16]
 80049c0:	9303      	str	r3, [sp, #12]
 80049c2:	9302      	str	r3, [sp, #8]
 80049c4:	9301      	str	r3, [sp, #4]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	2100      	movs	r1, #0
 80049ca:	2300      	movs	r3, #0
 80049cc:	4658      	mov	r0, fp
 80049ce:	f007 fa21 	bl	800be14 <SetButtonEvents>
 80049d2:	7834      	ldrb	r4, [r6, #0]
			++numOfRecordedSnippets;		// Record a successful Snippet			
 80049d4:	3401      	adds	r4, #1
 80049d6:	7034      	strb	r4, [r6, #0]
 80049d8:	e7b6      	b.n	8004948 <ParseSnippetCondition+0xd8>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 80049da:	7832      	ldrb	r2, [r6, #0]
					float constant =atof(thirdPart);
 80049dc:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 80049de:	0093      	lsls	r3, r2, #2
 80049e0:	189b      	adds	r3, r3, r2
 80049e2:	2203      	movs	r2, #3
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 80049e8:	18eb      	adds	r3, r5, r3
 80049ea:	70df      	strb	r7, [r3, #3]
					float constant =atof(thirdPart);
 80049ec:	f00d fed4 	bl	8012798 <atof>
 80049f0:	f7fe f8ea 	bl	8002bc8 <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80049f4:	7833      	ldrb	r3, [r6, #0]
					float constant =atof(thirdPart);
 80049f6:	9009      	str	r0, [sp, #36]	; 0x24
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80049f8:	009c      	lsls	r4, r3, #2
 80049fa:	18e0      	adds	r0, r4, r3
 80049fc:	0080      	lsls	r0, r0, #2
 80049fe:	3006      	adds	r0, #6
 8004a00:	1828      	adds	r0, r5, r0
 8004a02:	2204      	movs	r2, #4
 8004a04:	a909      	add	r1, sp, #36	; 0x24
 8004a06:	4699      	mov	r9, r3
 8004a08:	f00e f991 	bl	8012d2e <memcpy>
 8004a0c:	e783      	b.n	8004916 <ParseSnippetCondition+0xa6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004a0e:	2305      	movs	r3, #5
 8004a10:	4649      	mov	r1, r9
 8004a12:	70cb      	strb	r3, [r1, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004a14:	4659      	mov	r1, fp
 8004a16:	4b77      	ldr	r3, [pc, #476]	; (8004bf4 <ParseSnippetCondition+0x384>)
 8004a18:	00ca      	lsls	r2, r1, #3
 8004a1a:	445a      	add	r2, fp
 8004a1c:	189b      	adds	r3, r3, r2
 8004a1e:	2201      	movs	r2, #1
 8004a20:	7a1b      	ldrb	r3, [r3, #8]
 8004a22:	421a      	tst	r2, r3
 8004a24:	d1d6      	bne.n	80049d4 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a26:	2301      	movs	r3, #1
 8004a28:	9305      	str	r3, [sp, #20]
 8004a2a:	4643      	mov	r3, r8
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	9304      	str	r3, [sp, #16]
 8004a30:	9303      	str	r3, [sp, #12]
 8004a32:	9302      	str	r3, [sp, #8]
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	2101      	movs	r1, #1
 8004a3a:	4658      	mov	r0, fp
 8004a3c:	f007 f9ea 	bl	800be14 <SetButtonEvents>
 8004a40:	7834      	ldrb	r4, [r6, #0]
 8004a42:	e7c7      	b.n	80049d4 <ParseSnippetCondition+0x164>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004a44:	2102      	movs	r1, #2
 8004a46:	7832      	ldrb	r2, [r6, #0]
 8004a48:	0093      	lsls	r3, r2, #2
 8004a4a:	189b      	adds	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	54e9      	strb	r1, [r5, r3]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004a50:	18ed      	adds	r5, r5, r3
				return BOS_OK;
 8004a52:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004a54:	3201      	adds	r2, #1
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004a56:	70e8      	strb	r0, [r5, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004a58:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004a5a:	4698      	mov	r8, r3
 8004a5c:	e774      	b.n	8004948 <ParseSnippetCondition+0xd8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004a5e:	220c      	movs	r2, #12
 8004a60:	4965      	ldr	r1, [pc, #404]	; (8004bf8 <ParseSnippetCondition+0x388>)
 8004a62:	9807      	ldr	r0, [sp, #28]
 8004a64:	f00e fbaa 	bl	80131bc <strncmp>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d131      	bne.n	8004ad0 <ParseSnippetCondition+0x260>
				if(!button[port].pressedX1Sec){
 8004a6c:	465b      	mov	r3, fp
 8004a6e:	00da      	lsls	r2, r3, #3
 8004a70:	4b60      	ldr	r3, [pc, #384]	; (8004bf4 <ParseSnippetCondition+0x384>)
 8004a72:	445a      	add	r2, fp
 8004a74:	189b      	adds	r3, r3, r2
 8004a76:	789a      	ldrb	r2, [r3, #2]
 8004a78:	2a00      	cmp	r2, #0
 8004a7a:	d063      	beq.n	8004b44 <ParseSnippetCondition+0x2d4>
				else if(!button[port].pressedX2Sec){
 8004a7c:	78da      	ldrb	r2, [r3, #3]
 8004a7e:	2a00      	cmp	r2, #0
 8004a80:	d07d      	beq.n	8004b7e <ParseSnippetCondition+0x30e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004a82:	220c      	movs	r2, #12
				else if(!button[port].pressedX3Sec){
 8004a84:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004a86:	4690      	mov	r8, r2
				else if(!button[port].pressedX3Sec){
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1a3      	bne.n	80049d4 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004a8c:	0023      	movs	r3, r4
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004a8e:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004a90:	4453      	add	r3, sl
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	18eb      	adds	r3, r5, r3
 8004a96:	3a01      	subs	r2, #1
 8004a98:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004a9a:	300f      	adds	r0, #15
 8004a9c:	f00d fe81 	bl	80127a2 <atoi>
 8004aa0:	7832      	ldrb	r2, [r6, #0]
 8004aa2:	b2c0      	uxtb	r0, r0
 8004aa4:	0093      	lsls	r3, r2, #2
 8004aa6:	189b      	adds	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004aac:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004aae:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004ab0:	9305      	str	r3, [sp, #20]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	9304      	str	r3, [sp, #16]
 8004aba:	9303      	str	r3, [sp, #12]
 8004abc:	9302      	str	r3, [sp, #8]
 8004abe:	9001      	str	r0, [sp, #4]
 8004ac0:	9300      	str	r3, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004ac2:	4658      	mov	r0, fp
 8004ac4:	f007 f9a6 	bl	800be14 <SetButtonEvents>
					status =BOS_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	7834      	ldrb	r4, [r6, #0]
 8004acc:	4698      	mov	r8, r3
 8004ace:	e781      	b.n	80049d4 <ParseSnippetCondition+0x164>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004ad0:	220d      	movs	r2, #13
 8004ad2:	494a      	ldr	r1, [pc, #296]	; (8004bfc <ParseSnippetCondition+0x38c>)
 8004ad4:	9807      	ldr	r0, [sp, #28]
 8004ad6:	f00e fb71 	bl	80131bc <strncmp>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d000      	beq.n	8004ae0 <ParseSnippetCondition+0x270>
 8004ade:	e779      	b.n	80049d4 <ParseSnippetCondition+0x164>
				if(!button[port].releasedY1Sec){
 8004ae0:	465b      	mov	r3, fp
 8004ae2:	4a44      	ldr	r2, [pc, #272]	; (8004bf4 <ParseSnippetCondition+0x384>)
 8004ae4:	00d9      	lsls	r1, r3, #3
 8004ae6:	18cb      	adds	r3, r1, r3
 8004ae8:	18d3      	adds	r3, r2, r3
 8004aea:	7958      	ldrb	r0, [r3, #5]
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d05e      	beq.n	8004bae <ParseSnippetCondition+0x33e>
				else if(!button[port].releasedY2Sec){
 8004af0:	799b      	ldrb	r3, [r3, #6]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d100      	bne.n	8004af8 <ParseSnippetCondition+0x288>
 8004af6:	e083      	b.n	8004c00 <ParseSnippetCondition+0x390>
				else if(!button[port].releasedY3Sec){
 8004af8:	4459      	add	r1, fp
 8004afa:	1852      	adds	r2, r2, r1
 8004afc:	79d3      	ldrb	r3, [r2, #7]
 8004afe:	4699      	mov	r9, r3
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004b00:	230d      	movs	r3, #13
 8004b02:	4698      	mov	r8, r3
				else if(!button[port].releasedY3Sec){
 8004b04:	464b      	mov	r3, r9
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d000      	beq.n	8004b0c <ParseSnippetCondition+0x29c>
 8004b0a:	e763      	b.n	80049d4 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004b0c:	3314      	adds	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b0e:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004b10:	4698      	mov	r8, r3
 8004b12:	435c      	muls	r4, r3
 8004b14:	3b06      	subs	r3, #6
 8004b16:	192c      	adds	r4, r5, r4
 8004b18:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b1a:	3010      	adds	r0, #16
 8004b1c:	f00d fe41 	bl	80127a2 <atoi>
 8004b20:	4642      	mov	r2, r8
 8004b22:	7833      	ldrb	r3, [r6, #0]
 8004b24:	b2c0      	uxtb	r0, r0
 8004b26:	4353      	muls	r3, r2
 8004b28:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b2a:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b2c:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b2e:	9305      	str	r3, [sp, #20]
 8004b30:	464b      	mov	r3, r9
 8004b32:	9303      	str	r3, [sp, #12]
 8004b34:	9302      	str	r3, [sp, #8]
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9004      	str	r0, [sp, #16]
 8004b3e:	001a      	movs	r2, r3
 8004b40:	0019      	movs	r1, r3
 8004b42:	e7be      	b.n	8004ac2 <ParseSnippetCondition+0x252>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004b44:	2309      	movs	r3, #9
 8004b46:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004b48:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004b4a:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004b4c:	300f      	adds	r0, #15
 8004b4e:	f00d fe28 	bl	80127a2 <atoi>
 8004b52:	7831      	ldrb	r1, [r6, #0]
 8004b54:	b2c3      	uxtb	r3, r0
 8004b56:	008a      	lsls	r2, r1, #2
 8004b58:	1852      	adds	r2, r2, r1
 8004b5a:	0092      	lsls	r2, r2, #2
 8004b5c:	18ad      	adds	r5, r5, r2
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004b5e:	2201      	movs	r2, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004b60:	712b      	strb	r3, [r5, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004b62:	9205      	str	r2, [sp, #20]
 8004b64:	4642      	mov	r2, r8
 8004b66:	9204      	str	r2, [sp, #16]
 8004b68:	9203      	str	r2, [sp, #12]
 8004b6a:	9202      	str	r2, [sp, #8]
 8004b6c:	9201      	str	r2, [sp, #4]
 8004b6e:	9200      	str	r2, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004b70:	2200      	movs	r2, #0
 8004b72:	2100      	movs	r1, #0
 8004b74:	4658      	mov	r0, fp
 8004b76:	f007 f94d 	bl	800be14 <SetButtonEvents>
 8004b7a:	7834      	ldrb	r4, [r6, #0]
 8004b7c:	e72a      	b.n	80049d4 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004b7e:	230a      	movs	r3, #10
 8004b80:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004b82:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004b84:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004b86:	300f      	adds	r0, #15
 8004b88:	f00d fe0b 	bl	80127a2 <atoi>
 8004b8c:	7832      	ldrb	r2, [r6, #0]
 8004b8e:	b2c0      	uxtb	r0, r0
 8004b90:	0093      	lsls	r3, r2, #2
 8004b92:	189b      	adds	r3, r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004b98:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004b9a:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004b9c:	9305      	str	r3, [sp, #20]
 8004b9e:	4643      	mov	r3, r8
 8004ba0:	9000      	str	r0, [sp, #0]
 8004ba2:	9304      	str	r3, [sp, #16]
 8004ba4:	9303      	str	r3, [sp, #12]
 8004ba6:	9302      	str	r3, [sp, #8]
 8004ba8:	9301      	str	r3, [sp, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004baa:	2300      	movs	r3, #0
 8004bac:	e7e0      	b.n	8004b70 <ParseSnippetCondition+0x300>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004bae:	230c      	movs	r3, #12
 8004bb0:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004bb2:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004bb4:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004bb6:	3010      	adds	r0, #16
 8004bb8:	f00d fdf3 	bl	80127a2 <atoi>
 8004bbc:	7832      	ldrb	r2, [r6, #0]
 8004bbe:	b2c0      	uxtb	r0, r0
 8004bc0:	0093      	lsls	r3, r2, #2
 8004bc2:	189b      	adds	r3, r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004bc8:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004bca:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004bcc:	9305      	str	r3, [sp, #20]
 8004bce:	4643      	mov	r3, r8
 8004bd0:	9002      	str	r0, [sp, #8]
 8004bd2:	9304      	str	r3, [sp, #16]
 8004bd4:	9303      	str	r3, [sp, #12]
 8004bd6:	9301      	str	r3, [sp, #4]
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e7c8      	b.n	8004b70 <ParseSnippetCondition+0x300>
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	20001150 	.word	0x20001150
 8004be4:	20006dd0 	.word	0x20006dd0
 8004be8:	08017d7c 	.word	0x08017d7c
 8004bec:	08018b10 	.word	0x08018b10
 8004bf0:	08018344 	.word	0x08018344
 8004bf4:	20001e2c 	.word	0x20001e2c
 8004bf8:	08018354 	.word	0x08018354
 8004bfc:	08018364 	.word	0x08018364
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004c00:	0023      	movs	r3, r4
 8004c02:	220d      	movs	r2, #13
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c04:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004c06:	4453      	add	r3, sl
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	18eb      	adds	r3, r5, r3
 8004c0c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c0e:	3010      	adds	r0, #16
 8004c10:	f00d fdc7 	bl	80127a2 <atoi>
 8004c14:	7832      	ldrb	r2, [r6, #0]
 8004c16:	b2c0      	uxtb	r0, r0
 8004c18:	0093      	lsls	r3, r2, #2
 8004c1a:	189b      	adds	r3, r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004c20:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c22:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004c24:	9305      	str	r3, [sp, #20]
 8004c26:	2300      	movs	r3, #0
 8004c28:	9003      	str	r0, [sp, #12]
 8004c2a:	9304      	str	r3, [sp, #16]
 8004c2c:	9302      	str	r3, [sp, #8]
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	2200      	movs	r2, #0
 8004c34:	2100      	movs	r1, #0
 8004c36:	e744      	b.n	8004ac2 <ParseSnippetCondition+0x252>

08004c38 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c3a:	46de      	mov	lr, fp
 8004c3c:	4657      	mov	r7, sl
 8004c3e:	4645      	mov	r5, r8
 8004c40:	464e      	mov	r6, r9
 8004c42:	468a      	mov	sl, r1
 8004c44:	b5e0      	push	{r5, r6, r7, lr}
 8004c46:	b08b      	sub	sp, #44	; 0x2c
 8004c48:	9002      	str	r0, [sp, #8]
 8004c4a:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	2209      	movs	r2, #9
 8004c50:	a807      	add	r0, sp, #28
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004c52:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004c54:	f00e f874 	bl	8012d40 <memset>
 8004c58:	4bcd      	ldr	r3, [pc, #820]	; (8004f90 <CLI_CommandParser+0x358>)
				if(id == myID){
 8004c5a:	4656      	mov	r6, sl
 8004c5c:	4698      	mov	r8, r3
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004c5e:	4bcd      	ldr	r3, [pc, #820]	; (8004f94 <CLI_CommandParser+0x35c>)
				if(id == myID){
 8004c60:	46ba      	mov	sl, r7
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004c62:	469b      	mov	fp, r3
 8004c64:	e02d      	b.n	8004cc2 <CLI_CommandParser+0x8a>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004c66:	2206      	movs	r2, #6
 8004c68:	49cb      	ldr	r1, [pc, #812]	; (8004f98 <CLI_CommandParser+0x360>)
 8004c6a:	0028      	movs	r0, r5
 8004c6c:	f00e faa6 	bl	80131bc <strncmp>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d057      	beq.n	8004d24 <CLI_CommandParser+0xec>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004c74:	2f02      	cmp	r7, #2
 8004c76:	d100      	bne.n	8004c7a <CLI_CommandParser+0x42>
 8004c78:	e0d2      	b.n	8004e20 <CLI_CommandParser+0x1e8>
			loc =strchr((char* )cInputString,'.');
 8004c7a:	212e      	movs	r1, #46	; 0x2e
 8004c7c:	0028      	movs	r0, r5
 8004c7e:	f00e fa87 	bl	8013190 <strchr>
 8004c82:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004c84:	d007      	beq.n	8004c96 <CLI_CommandParser+0x5e>
 8004c86:	3803      	subs	r0, #3
 8004c88:	2203      	movs	r2, #3
 8004c8a:	4659      	mov	r1, fp
 8004c8c:	f00e fa96 	bl	80131bc <strncmp>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d000      	beq.n	8004c96 <CLI_CommandParser+0x5e>
 8004c94:	e079      	b.n	8004d8a <CLI_CommandParser+0x152>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004c96:	2299      	movs	r2, #153	; 0x99
 8004c98:	0021      	movs	r1, r4
 8004c9a:	0092      	lsls	r2, r2, #2
 8004c9c:	0028      	movs	r0, r5
 8004c9e:	f008 fe0f 	bl	800d8c0 <FreeRTOS_CLIProcessCommand>
 8004ca2:	4682      	mov	sl, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004ca4:	7823      	ldrb	r3, [r4, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d139      	bne.n	8004d1e <CLI_CommandParser+0xe6>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004caa:	0020      	movs	r0, r4
 8004cac:	f7fb fa34 	bl	8000118 <strlen>
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	0002      	movs	r2, r0
 8004cb4:	0020      	movs	r0, r4
 8004cb6:	f00e f843 	bl	8012d40 <memset>
	} while(xReturned != pdFALSE);
 8004cba:	4653      	mov	r3, sl
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d100      	bne.n	8004cc2 <CLI_CommandParser+0x8a>
 8004cc0:	e1d0      	b.n	8005064 <CLI_CommandParser+0x42c>
		StringToLowerCase((char* )cInputString);
 8004cc2:	0028      	movs	r0, r5
 8004cc4:	f7ff fdc0 	bl	8004848 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004cc8:	2336      	movs	r3, #54	; 0x36
 8004cca:	4699      	mov	r9, r3
 8004ccc:	4643      	mov	r3, r8
 8004cce:	464a      	mov	r2, r9
 8004cd0:	5c9f      	ldrb	r7, [r3, r2]
 8004cd2:	2f00      	cmp	r7, #0
 8004cd4:	d1c7      	bne.n	8004c66 <CLI_CommandParser+0x2e>
 8004cd6:	3a33      	subs	r2, #51	; 0x33
 8004cd8:	49b0      	ldr	r1, [pc, #704]	; (8004f9c <CLI_CommandParser+0x364>)
 8004cda:	0028      	movs	r0, r5
 8004cdc:	f00e fa6e 	bl	80131bc <strncmp>
 8004ce0:	1e07      	subs	r7, r0, #0
 8004ce2:	d1ca      	bne.n	8004c7a <CLI_CommandParser+0x42>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004ce4:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 8004ce6:	f7ff fdc3 	bl	8004870 <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004cea:	2800      	cmp	r0, #0
 8004cec:	d000      	beq.n	8004cf0 <CLI_CommandParser+0xb8>
 8004cee:	e09f      	b.n	8004e30 <CLI_CommandParser+0x1f8>
				recordSnippet = SNIPPET_COMMANDS;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	4642      	mov	r2, r8
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	5453      	strb	r3, [r2, r1]
				pcOutputString[0] ='\r';
 8004cf8:	330b      	adds	r3, #11
 8004cfa:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004cfc:	2e00      	cmp	r6, #0
 8004cfe:	d027      	beq.n	8004d50 <CLI_CommandParser+0x118>
 8004d00:	2300      	movs	r3, #0
 8004d02:	469a      	mov	sl, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004d04:	0020      	movs	r0, r4
 8004d06:	f7fb fa07 	bl	8000118 <strlen>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	425b      	negs	r3, r3
 8004d0e:	b282      	uxth	r2, r0
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	0021      	movs	r1, r4
 8004d14:	3333      	adds	r3, #51	; 0x33
 8004d16:	9802      	ldr	r0, [sp, #8]
 8004d18:	f008 fb84 	bl	800d424 <writePxMutex>
 8004d1c:	e7c5      	b.n	8004caa <CLI_CommandParser+0x72>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d1e:	2e00      	cmp	r6, #0
 8004d20:	d0c3      	beq.n	8004caa <CLI_CommandParser+0x72>
 8004d22:	e7ef      	b.n	8004d04 <CLI_CommandParser+0xcc>
			recordSnippet =0;
 8004d24:	4643      	mov	r3, r8
 8004d26:	464a      	mov	r2, r9
 8004d28:	5498      	strb	r0, [r3, r2]
			snippets[numOfRecordedSnippets - 1].state = true;
 8004d2a:	781a      	ldrb	r2, [r3, #0]
 8004d2c:	3a01      	subs	r2, #1
 8004d2e:	0093      	lsls	r3, r2, #2
 8004d30:	189b      	adds	r3, r3, r2
 8004d32:	4a9b      	ldr	r2, [pc, #620]	; (8004fa0 <CLI_CommandParser+0x368>)
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	18d3      	adds	r3, r2, r3
 8004d38:	2201      	movs	r2, #1
 8004d3a:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004d3c:	f004 ff8c 	bl	8009c58 <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004d40:	2241      	movs	r2, #65	; 0x41
 8004d42:	4998      	ldr	r1, [pc, #608]	; (8004fa4 <CLI_CommandParser+0x36c>)
 8004d44:	0020      	movs	r0, r4
 8004d46:	f00d fff2 	bl	8012d2e <memcpy>
 8004d4a:	7823      	ldrb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1d5      	bne.n	8004cfc <CLI_CommandParser+0xc4>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004d50:	0020      	movs	r0, r4
 8004d52:	f7fb f9e1 	bl	8000118 <strlen>
 8004d56:	2100      	movs	r1, #0
 8004d58:	0002      	movs	r2, r0
 8004d5a:	0020      	movs	r0, r4
 8004d5c:	46b2      	mov	sl, r6
 8004d5e:	f00d ffef 	bl	8012d40 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004d62:	2209      	movs	r2, #9
 8004d64:	2100      	movs	r1, #0
 8004d66:	a807      	add	r0, sp, #28
 8004d68:	f00d ffea 	bl	8012d40 <memset>
	if(!recordSnippet && enableOutput)
 8004d6c:	2336      	movs	r3, #54	; 0x36
 8004d6e:	4642      	mov	r2, r8
 8004d70:	5cd3      	ldrb	r3, [r2, r3]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <CLI_CommandParser+0x144>
 8004d76:	4653      	mov	r3, sl
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d16a      	bne.n	8004e52 <CLI_CommandParser+0x21a>
}
 8004d7c:	b00b      	add	sp, #44	; 0x2c
 8004d7e:	bc3c      	pop	{r2, r3, r4, r5}
 8004d80:	4690      	mov	r8, r2
 8004d82:	4699      	mov	r9, r3
 8004d84:	46a2      	mov	sl, r4
 8004d86:	46ab      	mov	fp, r5
 8004d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004d8a:	f00d fd75 	bl	8012878 <__locale_ctype_ptr>
 8004d8e:	787b      	ldrb	r3, [r7, #1]
 8004d90:	18c0      	adds	r0, r0, r3
 8004d92:	7843      	ldrb	r3, [r0, #1]
 8004d94:	075b      	lsls	r3, r3, #29
 8004d96:	d500      	bpl.n	8004d9a <CLI_CommandParser+0x162>
 8004d98:	e77d      	b.n	8004c96 <CLI_CommandParser+0x5e>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004d9a:	1b7a      	subs	r2, r7, r5
 8004d9c:	0029      	movs	r1, r5
 8004d9e:	a807      	add	r0, sp, #28
 8004da0:	f00e fa1d 	bl	80131de <strncpy>
				id =GetID(idString);
 8004da4:	a807      	add	r0, sp, #28
 8004da6:	f7ff fa1d 	bl	80041e4 <GetID>
				if(id == myID){
 8004daa:	4b7f      	ldr	r3, [pc, #508]	; (8004fa8 <CLI_CommandParser+0x370>)
				id =GetID(idString);
 8004dac:	9003      	str	r0, [sp, #12]
				if(id == myID){
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	9305      	str	r3, [sp, #20]
 8004db2:	4298      	cmp	r0, r3
 8004db4:	d057      	beq.n	8004e66 <CLI_CommandParser+0x22e>
				else if(id == BOS_ERR_WrongName){
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	2b64      	cmp	r3, #100	; 0x64
 8004dba:	d100      	bne.n	8004dbe <CLI_CommandParser+0x186>
 8004dbc:	e0da      	b.n	8004f74 <CLI_CommandParser+0x33c>
				else if(id == BOS_ERR_WrongID){
 8004dbe:	9b03      	ldr	r3, [sp, #12]
 8004dc0:	2b66      	cmp	r3, #102	; 0x66
 8004dc2:	d100      	bne.n	8004dc6 <CLI_CommandParser+0x18e>
 8004dc4:	e0dd      	b.n	8004f82 <CLI_CommandParser+0x34a>
 8004dc6:	1c7b      	adds	r3, r7, #1
 8004dc8:	9304      	str	r3, [sp, #16]
				else if(id == BOS_BROADCAST){
 8004dca:	9b03      	ldr	r3, [sp, #12]
 8004dcc:	2bff      	cmp	r3, #255	; 0xff
 8004dce:	d100      	bne.n	8004dd2 <CLI_CommandParser+0x19a>
 8004dd0:	e08b      	b.n	8004eea <CLI_CommandParser+0x2b2>
				else if((uint8_t )id == BOS_MULTICAST){
 8004dd2:	466b      	mov	r3, sp
 8004dd4:	7b1b      	ldrb	r3, [r3, #12]
 8004dd6:	4699      	mov	r9, r3
 8004dd8:	2bfe      	cmp	r3, #254	; 0xfe
 8004dda:	d100      	bne.n	8004dde <CLI_CommandParser+0x1a6>
 8004ddc:	e102      	b.n	8004fe4 <CLI_CommandParser+0x3ac>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004dde:	2206      	movs	r2, #6
 8004de0:	4972      	ldr	r1, [pc, #456]	; (8004fac <CLI_CommandParser+0x374>)
 8004de2:	9804      	ldr	r0, [sp, #16]
 8004de4:	f00e f9ea 	bl	80131bc <strncmp>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d144      	bne.n	8004e76 <CLI_CommandParser+0x23e>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004dec:	4b70      	ldr	r3, [pc, #448]	; (8004fb0 <CLI_CommandParser+0x378>)
						SendMessageToModule(id,CODE_UPDATE,0);
 8004dee:	2200      	movs	r2, #0
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004df0:	7018      	strb	r0, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004df2:	2119      	movs	r1, #25
 8004df4:	4648      	mov	r0, r9
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004df6:	469a      	mov	sl, r3
						SendMessageToModule(id,CODE_UPDATE,0);
 8004df8:	f003 f990 	bl	800811c <SendMessageToModule>
						osDelay(100);
 8004dfc:	2064      	movs	r0, #100	; 0x64
 8004dfe:	f008 fccf 	bl	800d7a0 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004e02:	4b6c      	ldr	r3, [pc, #432]	; (8004fb4 <CLI_CommandParser+0x37c>)
 8004e04:	4649      	mov	r1, r9
 8004e06:	781a      	ldrb	r2, [r3, #0]
 8004e08:	4b67      	ldr	r3, [pc, #412]	; (8004fa8 <CLI_CommandParser+0x370>)
 8004e0a:	7818      	ldrb	r0, [r3, #0]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f005 f847 	bl	8009ea0 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8004e12:	4653      	mov	r3, sl
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b60      	cmp	r3, #96	; 0x60
 8004e18:	d100      	bne.n	8004e1c <CLI_CommandParser+0x1e4>
 8004e1a:	e095      	b.n	8004f48 <CLI_CommandParser+0x310>
 8004e1c:	7823      	ldrb	r3, [r4, #0]
 8004e1e:	e795      	b.n	8004d4c <CLI_CommandParser+0x114>
 8004e20:	0028      	movs	r0, r5
 8004e22:	f7ff fcb9 	bl	8004798 <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d10c      	bne.n	8004e44 <CLI_CommandParser+0x20c>
				pcOutputString[0] ='\r';
 8004e2a:	230d      	movs	r3, #13
 8004e2c:	7023      	strb	r3, [r4, #0]
 8004e2e:	e765      	b.n	8004cfc <CLI_CommandParser+0xc4>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e30:	2252      	movs	r2, #82	; 0x52
 8004e32:	4961      	ldr	r1, [pc, #388]	; (8004fb8 <CLI_CommandParser+0x380>)
 8004e34:	0020      	movs	r0, r4
 8004e36:	f00d ff7a 	bl	8012d2e <memcpy>
				recordSnippet =0;
 8004e3a:	4643      	mov	r3, r8
 8004e3c:	464a      	mov	r2, r9
 8004e3e:	549f      	strb	r7, [r3, r2]
 8004e40:	7823      	ldrb	r3, [r4, #0]
 8004e42:	e783      	b.n	8004d4c <CLI_CommandParser+0x114>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e44:	2252      	movs	r2, #82	; 0x52
 8004e46:	495c      	ldr	r1, [pc, #368]	; (8004fb8 <CLI_CommandParser+0x380>)
 8004e48:	0020      	movs	r0, r4
 8004e4a:	f00d ff70 	bl	8012d2e <memcpy>
 8004e4e:	7823      	ldrb	r3, [r4, #0]
 8004e50:	e77c      	b.n	8004d4c <CLI_CommandParser+0x114>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8004e52:	2301      	movs	r3, #1
 8004e54:	425b      	negs	r3, r3
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	2238      	movs	r2, #56	; 0x38
 8004e5a:	3333      	adds	r3, #51	; 0x33
 8004e5c:	4957      	ldr	r1, [pc, #348]	; (8004fbc <CLI_CommandParser+0x384>)
 8004e5e:	9802      	ldr	r0, [sp, #8]
 8004e60:	f008 fae0 	bl	800d424 <writePxMutex>
}
 8004e64:	e78a      	b.n	8004d7c <CLI_CommandParser+0x144>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004e66:	2299      	movs	r2, #153	; 0x99
 8004e68:	1c78      	adds	r0, r7, #1
 8004e6a:	0092      	lsls	r2, r2, #2
 8004e6c:	0021      	movs	r1, r4
 8004e6e:	f008 fd27 	bl	800d8c0 <FreeRTOS_CLIProcessCommand>
 8004e72:	4682      	mov	sl, r0
 8004e74:	e716      	b.n	8004ca4 <CLI_CommandParser+0x6c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004e76:	0028      	movs	r0, r5
 8004e78:	f7fb f94e 	bl	8000118 <strlen>
 8004e7c:	0007      	movs	r7, r0
 8004e7e:	a807      	add	r0, sp, #28
 8004e80:	f7fb f94a 	bl	8000118 <strlen>
 8004e84:	4682      	mov	sl, r0
 8004e86:	1e7a      	subs	r2, r7, #1
 8004e88:	1a12      	subs	r2, r2, r0
 8004e8a:	9904      	ldr	r1, [sp, #16]
 8004e8c:	484c      	ldr	r0, [pc, #304]	; (8004fc0 <CLI_CommandParser+0x388>)
 8004e8e:	f00e f9a6 	bl	80131de <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004e92:	0028      	movs	r0, r5
 8004e94:	f7fb f940 	bl	8000118 <strlen>
 8004e98:	4653      	mov	r3, sl
 8004e9a:	3801      	subs	r0, #1
 8004e9c:	1ac2      	subs	r2, r0, r3
 8004e9e:	b292      	uxth	r2, r2
 8004ea0:	2117      	movs	r1, #23
 8004ea2:	4648      	mov	r0, r9
 8004ea4:	f003 f93a 	bl	800811c <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8004ea8:	9a03      	ldr	r2, [sp, #12]
 8004eaa:	4946      	ldr	r1, [pc, #280]	; (8004fc4 <CLI_CommandParser+0x38c>)
 8004eac:	0020      	movs	r0, r4
 8004eae:	f00e f941 	bl	8013134 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8004eb2:	7823      	ldrb	r3, [r4, #0]
 8004eb4:	0020      	movs	r0, r4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00d      	beq.n	8004ed6 <CLI_CommandParser+0x29e>
 8004eba:	f7fb f92d 	bl	8000118 <strlen>
 8004ebe:	0002      	movs	r2, r0
 8004ec0:	2e00      	cmp	r6, #0
 8004ec2:	d00b      	beq.n	8004edc <CLI_CommandParser+0x2a4>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	b282      	uxth	r2, r0
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	0021      	movs	r1, r4
 8004ecc:	3331      	adds	r3, #49	; 0x31
 8004ece:	9802      	ldr	r0, [sp, #8]
 8004ed0:	f008 faa8 	bl	800d424 <writePxMutex>
 8004ed4:	0020      	movs	r0, r4
 8004ed6:	f7fb f91f 	bl	8000118 <strlen>
 8004eda:	0002      	movs	r2, r0
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004edc:	2100      	movs	r1, #0
 8004ede:	0020      	movs	r0, r4
 8004ee0:	f00d ff2e 	bl	8012d40 <memset>
 8004ee4:	4b32      	ldr	r3, [pc, #200]	; (8004fb0 <CLI_CommandParser+0x378>)
 8004ee6:	469a      	mov	sl, r3
 8004ee8:	e793      	b.n	8004e12 <CLI_CommandParser+0x1da>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004eea:	221a      	movs	r2, #26
 8004eec:	2100      	movs	r1, #0
 8004eee:	4836      	ldr	r0, [pc, #216]	; (8004fc8 <CLI_CommandParser+0x390>)
 8004ef0:	f00d ff26 	bl	8012d40 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004ef4:	0028      	movs	r0, r5
 8004ef6:	f7fb f90f 	bl	8000118 <strlen>
 8004efa:	0007      	movs	r7, r0
 8004efc:	a807      	add	r0, sp, #28
 8004efe:	f7fb f90b 	bl	8000118 <strlen>
 8004f02:	4681      	mov	r9, r0
 8004f04:	3f01      	subs	r7, #1
 8004f06:	1a3a      	subs	r2, r7, r0
 8004f08:	9f04      	ldr	r7, [sp, #16]
 8004f0a:	482d      	ldr	r0, [pc, #180]	; (8004fc0 <CLI_CommandParser+0x388>)
 8004f0c:	0039      	movs	r1, r7
 8004f0e:	f00e f966 	bl	80131de <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f12:	0028      	movs	r0, r5
 8004f14:	f7fb f900 	bl	8000118 <strlen>
 8004f18:	464b      	mov	r3, r9
 8004f1a:	1ac3      	subs	r3, r0, r3
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2217      	movs	r2, #23
 8004f20:	21ff      	movs	r1, #255	; 0xff
 8004f22:	9805      	ldr	r0, [sp, #20]
 8004f24:	f003 f8b4 	bl	8008090 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f28:	2299      	movs	r2, #153	; 0x99
 8004f2a:	0021      	movs	r1, r4
 8004f2c:	0092      	lsls	r2, r2, #2
 8004f2e:	0038      	movs	r0, r7
 8004f30:	f008 fcc6 	bl	800d8c0 <FreeRTOS_CLIProcessCommand>
 8004f34:	4682      	mov	sl, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004f36:	0020      	movs	r0, r4
 8004f38:	f7fb f8ee 	bl	8000118 <strlen>
 8004f3c:	221d      	movs	r2, #29
 8004f3e:	1820      	adds	r0, r4, r0
 8004f40:	4922      	ldr	r1, [pc, #136]	; (8004fcc <CLI_CommandParser+0x394>)
 8004f42:	f00d fef4 	bl	8012d2e <memcpy>
 8004f46:	e6ad      	b.n	8004ca4 <CLI_CommandParser+0x6c>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004f48:	21fa      	movs	r1, #250	; 0xfa
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	0089      	lsls	r1, r1, #2
 8004f4e:	f009 fedf 	bl	800ed10 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004f52:	4b1f      	ldr	r3, [pc, #124]	; (8004fd0 <CLI_CommandParser+0x398>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d100      	bne.n	8004f5c <CLI_CommandParser+0x324>
 8004f5a:	e75f      	b.n	8004e1c <CLI_CommandParser+0x1e4>
							++timedoutMsg;
 8004f5c:	4a1d      	ldr	r2, [pc, #116]	; (8004fd4 <CLI_CommandParser+0x39c>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004f5e:	491e      	ldr	r1, [pc, #120]	; (8004fd8 <CLI_CommandParser+0x3a0>)
							++timedoutMsg;
 8004f60:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004f62:	0020      	movs	r0, r4
							++timedoutMsg;
 8004f64:	3301      	adds	r3, #1
 8004f66:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004f68:	9b03      	ldr	r3, [sp, #12]
 8004f6a:	0022      	movs	r2, r4
 8004f6c:	f00e f8e2 	bl	8013134 <sprintf>
 8004f70:	7823      	ldrb	r3, [r4, #0]
 8004f72:	e6eb      	b.n	8004d4c <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004f74:	2227      	movs	r2, #39	; 0x27
 8004f76:	4919      	ldr	r1, [pc, #100]	; (8004fdc <CLI_CommandParser+0x3a4>)
 8004f78:	0020      	movs	r0, r4
 8004f7a:	f00d fed8 	bl	8012d2e <memcpy>
 8004f7e:	7823      	ldrb	r3, [r4, #0]
 8004f80:	e6e4      	b.n	8004d4c <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004f82:	2225      	movs	r2, #37	; 0x25
 8004f84:	4916      	ldr	r1, [pc, #88]	; (8004fe0 <CLI_CommandParser+0x3a8>)
 8004f86:	0020      	movs	r0, r4
 8004f88:	f00d fed1 	bl	8012d2e <memcpy>
 8004f8c:	7823      	ldrb	r3, [r4, #0]
 8004f8e:	e6dd      	b.n	8004d4c <CLI_CommandParser+0x114>
 8004f90:	20001150 	.word	0x20001150
 8004f94:	08018418 	.word	0x08018418
 8004f98:	080183cc 	.word	0x080183cc
 8004f9c:	08018374 	.word	0x08018374
 8004fa0:	20006dd0 	.word	0x20006dd0
 8004fa4:	080183d4 	.word	0x080183d4
 8004fa8:	20000aa8 	.word	0x20000aa8
 8004fac:	080184b8 	.word	0x080184b8
 8004fb0:	20006d34 	.word	0x20006d34
 8004fb4:	20000c38 	.word	0x20000c38
 8004fb8:	08018378 	.word	0x08018378
 8004fbc:	08018504 	.word	0x08018504
 8004fc0:	20000b4c 	.word	0x20000b4c
 8004fc4:	080184c0 	.word	0x080184c0
 8004fc8:	20000db8 	.word	0x20000db8
 8004fcc:	0801846c 	.word	0x0801846c
 8004fd0:	20000c4c 	.word	0x20000c4c
 8004fd4:	20001a16 	.word	0x20001a16
 8004fd8:	080184e4 	.word	0x080184e4
 8004fdc:	0801841c 	.word	0x0801841c
 8004fe0:	08018444 	.word	0x08018444
					group =id >> 8;
 8004fe4:	4640      	mov	r0, r8
 8004fe6:	2237      	movs	r2, #55	; 0x37
 8004fe8:	9b03      	ldr	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004fea:	2100      	movs	r1, #0
					group =id >> 8;
 8004fec:	121f      	asrs	r7, r3, #8
 8004fee:	b2fb      	uxtb	r3, r7
 8004ff0:	5483      	strb	r3, [r0, r2]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004ff2:	3a1d      	subs	r2, #29
 8004ff4:	481c      	ldr	r0, [pc, #112]	; (8005068 <CLI_CommandParser+0x430>)
					group =id >> 8;
 8004ff6:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004ff8:	f00d fea2 	bl	8012d40 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004ffc:	0028      	movs	r0, r5
 8004ffe:	f7fb f88b 	bl	8000118 <strlen>
 8005002:	0007      	movs	r7, r0
 8005004:	a807      	add	r0, sp, #28
 8005006:	f7fb f887 	bl	8000118 <strlen>
 800500a:	4681      	mov	r9, r0
 800500c:	3f01      	subs	r7, #1
 800500e:	1a3a      	subs	r2, r7, r0
 8005010:	9904      	ldr	r1, [sp, #16]
 8005012:	4816      	ldr	r0, [pc, #88]	; (800506c <CLI_CommandParser+0x434>)
 8005014:	f00e f8e3 	bl	80131de <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005018:	0028      	movs	r0, r5
 800501a:	f7fb f87d 	bl	8000118 <strlen>
 800501e:	464f      	mov	r7, r9
 8005020:	1bc3      	subs	r3, r0, r7
 8005022:	b29b      	uxth	r3, r3
 8005024:	2217      	movs	r2, #23
 8005026:	9903      	ldr	r1, [sp, #12]
 8005028:	9805      	ldr	r0, [sp, #20]
 800502a:	f003 f831 	bl	8008090 <BroadcastMessage>
					if(InGroup(myID,group))
 800502e:	4b10      	ldr	r3, [pc, #64]	; (8005070 <CLI_CommandParser+0x438>)
 8005030:	4a10      	ldr	r2, [pc, #64]	; (8005074 <CLI_CommandParser+0x43c>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	4641      	mov	r1, r8
 8005036:	3b01      	subs	r3, #1
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	5a9b      	ldrh	r3, [r3, r2]
 800503c:	2237      	movs	r2, #55	; 0x37
 800503e:	5c8a      	ldrb	r2, [r1, r2]
 8005040:	4113      	asrs	r3, r2
 8005042:	07db      	lsls	r3, r3, #31
 8005044:	d406      	bmi.n	8005054 <CLI_CommandParser+0x41c>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8005046:	ab07      	add	r3, sp, #28
 8005048:	0022      	movs	r2, r4
 800504a:	490b      	ldr	r1, [pc, #44]	; (8005078 <CLI_CommandParser+0x440>)
 800504c:	0020      	movs	r0, r4
 800504e:	f00e f871 	bl	8013134 <sprintf>
 8005052:	e627      	b.n	8004ca4 <CLI_CommandParser+0x6c>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005054:	2299      	movs	r2, #153	; 0x99
 8005056:	0021      	movs	r1, r4
 8005058:	0092      	lsls	r2, r2, #2
 800505a:	9804      	ldr	r0, [sp, #16]
 800505c:	f008 fc30 	bl	800d8c0 <FreeRTOS_CLIProcessCommand>
 8005060:	4682      	mov	sl, r0
 8005062:	e7f0      	b.n	8005046 <CLI_CommandParser+0x40e>
 8005064:	46b2      	mov	sl, r6
 8005066:	e67c      	b.n	8004d62 <CLI_CommandParser+0x12a>
 8005068:	20000db8 	.word	0x20000db8
 800506c:	20000b4c 	.word	0x20000b4c
 8005070:	20000aa8 	.word	0x20000aa8
 8005074:	20000aac 	.word	0x20000aac
 8005078:	0801848c 	.word	0x0801848c

0800507c <prvCLITask>:
void prvCLITask(void *pvParameters){
 800507c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800507e:	46de      	mov	lr, fp
 8005080:	4657      	mov	r7, sl
 8005082:	464e      	mov	r6, r9
 8005084:	4645      	mov	r5, r8
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005086:	2101      	movs	r1, #1
	char cRxedChar ='\0';
 8005088:	2300      	movs	r3, #0
void prvCLITask(void *pvParameters){
 800508a:	b5e0      	push	{r5, r6, r7, lr}
 800508c:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 800508e:	aa02      	add	r2, sp, #8
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005090:	4249      	negs	r1, r1
 8005092:	2001      	movs	r0, #1
	char cRxedChar ='\0';
 8005094:	73d3      	strb	r3, [r2, #15]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005096:	f009 fe3b 	bl	800ed10 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800509a:	f008 fc89 	bl	800d9b0 <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 800509e:	23e1      	movs	r3, #225	; 0xe1
 80050a0:	4a62      	ldr	r2, [pc, #392]	; (800522c <prvCLITask+0x1b0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80050a2:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 80050a4:	6892      	ldr	r2, [r2, #8]
 80050a6:	031b      	lsls	r3, r3, #12
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d011      	beq.n	80050d0 <prvCLITask+0x54>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80050ac:	2501      	movs	r5, #1
 80050ae:	4b60      	ldr	r3, [pc, #384]	; (8005230 <prvCLITask+0x1b4>)
 80050b0:	7819      	ldrb	r1, [r3, #0]
 80050b2:	9302      	str	r3, [sp, #8]
			if(port != PcPort)
 80050b4:	428d      	cmp	r5, r1
 80050b6:	d006      	beq.n	80050c6 <prvCLITask+0x4a>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 80050b8:	21e1      	movs	r1, #225	; 0xe1
 80050ba:	0028      	movs	r0, r5
 80050bc:	0309      	lsls	r1, r1, #12
 80050be:	f008 fa27 	bl	800d510 <UpdateBaudrate>
 80050c2:	9b02      	ldr	r3, [sp, #8]
 80050c4:	7819      	ldrb	r1, [r3, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80050c6:	3501      	adds	r5, #1
 80050c8:	b2ed      	uxtb	r5, r5
 80050ca:	2d06      	cmp	r5, #6
 80050cc:	d1f2      	bne.n	80050b4 <prvCLITask+0x38>
 80050ce:	e002      	b.n	80050d6 <prvCLITask+0x5a>
 80050d0:	4b57      	ldr	r3, [pc, #348]	; (8005230 <prvCLITask+0x1b4>)
 80050d2:	7819      	ldrb	r1, [r3, #0]
 80050d4:	9302      	str	r3, [sp, #8]
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 80050d6:	4b57      	ldr	r3, [pc, #348]	; (8005234 <prvCLITask+0x1b8>)
 80050d8:	4d57      	ldr	r5, [pc, #348]	; (8005238 <prvCLITask+0x1bc>)
 80050da:	881a      	ldrh	r2, [r3, #0]
 80050dc:	3538      	adds	r5, #56	; 0x38
 80050de:	0053      	lsls	r3, r2, #1
 80050e0:	189b      	adds	r3, r3, r2
 80050e2:	4a56      	ldr	r2, [pc, #344]	; (800523c <prvCLITask+0x1c0>)
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	189b      	adds	r3, r3, r2
 80050e8:	4a55      	ldr	r2, [pc, #340]	; (8005240 <prvCLITask+0x1c4>)
 80050ea:	0028      	movs	r0, r5
 80050ec:	7812      	ldrb	r2, [r2, #0]
 80050ee:	9100      	str	r1, [sp, #0]
 80050f0:	4954      	ldr	r1, [pc, #336]	; (8005244 <prvCLITask+0x1c8>)
 80050f2:	f00e f81f 	bl	8013134 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 80050f6:	22a4      	movs	r2, #164	; 0xa4
 80050f8:	9c02      	ldr	r4, [sp, #8]
 80050fa:	230a      	movs	r3, #10
 80050fc:	0092      	lsls	r2, r2, #2
 80050fe:	4952      	ldr	r1, [pc, #328]	; (8005248 <prvCLITask+0x1cc>)
 8005100:	7820      	ldrb	r0, [r4, #0]
 8005102:	f008 f9c1 	bl	800d488 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8005106:	0028      	movs	r0, r5
 8005108:	f7fb f806 	bl	8000118 <strlen>
 800510c:	230a      	movs	r3, #10
 800510e:	b282      	uxth	r2, r0
 8005110:	0029      	movs	r1, r5
 8005112:	7820      	ldrb	r0, [r4, #0]
 8005114:	f008 f9b8 	bl	800d488 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8005118:	2300      	movs	r3, #0
 800511a:	4a4c      	ldr	r2, [pc, #304]	; (800524c <prvCLITask+0x1d0>)
				UARTRxBuf[PcPort - 1][chr] =0;
 800511c:	2600      	movs	r6, #0
 800511e:	4690      	mov	r8, r2
 8005120:	4699      	mov	r9, r3
 8005122:	4d4b      	ldr	r5, [pc, #300]	; (8005250 <prvCLITask+0x1d4>)
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005124:	9b02      	ldr	r3, [sp, #8]
 8005126:	781f      	ldrb	r7, [r3, #0]
 8005128:	1e7c      	subs	r4, r7, #1
 800512a:	5d28      	ldrb	r0, [r5, r4]
 800512c:	b283      	uxth	r3, r0
 800512e:	2bbf      	cmp	r3, #191	; 0xbf
 8005130:	d81d      	bhi.n	800516e <prvCLITask+0xf2>
			if(UARTRxBuf[PcPort - 1][chr]){
 8005132:	0062      	lsls	r2, r4, #1
 8005134:	1911      	adds	r1, r2, r4
 8005136:	0189      	lsls	r1, r1, #6
 8005138:	4441      	add	r1, r8
 800513a:	4692      	mov	sl, r2
 800513c:	5c0a      	ldrb	r2, [r1, r0]
 800513e:	2a00      	cmp	r2, #0
 8005140:	d10d      	bne.n	800515e <prvCLITask+0xe2>
 8005142:	1c4a      	adds	r2, r1, #1
 8005144:	4693      	mov	fp, r2
			if(chr == MSG_RX_BUF_SIZE - 1){
 8005146:	2bbf      	cmp	r3, #191	; 0xbf
 8005148:	d135      	bne.n	80051b6 <prvCLITask+0x13a>
			if(UARTRxBuf[PcPort - 1][chr]){
 800514a:	465b      	mov	r3, fp
 800514c:	781a      	ldrb	r2, [r3, #0]
				chr =UARTRxBufIndex[PcPort - 1] =0;
 800514e:	552e      	strb	r6, [r5, r4]
			if(UARTRxBuf[PcPort - 1][chr]){
 8005150:	2a00      	cmp	r2, #0
 8005152:	d160      	bne.n	8005216 <prvCLITask+0x19a>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005154:	2302      	movs	r3, #2
			if(UARTRxBuf[PcPort - 1][chr]){
 8005156:	5cca      	ldrb	r2, [r1, r3]
 8005158:	0018      	movs	r0, r3
 800515a:	2a00      	cmp	r2, #0
 800515c:	d0f3      	beq.n	8005146 <prvCLITask+0xca>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 800515e:	a902      	add	r1, sp, #8
 8005160:	73ca      	strb	r2, [r1, #15]
				UARTRxBuf[PcPort - 1][chr] =0;
 8005162:	4652      	mov	r2, sl
 8005164:	1912      	adds	r2, r2, r4
 8005166:	0192      	lsls	r2, r2, #6
 8005168:	4442      	add	r2, r8
 800516a:	5416      	strb	r6, [r2, r0]
				UARTRxBufIndex[PcPort - 1] =chr;
 800516c:	552b      	strb	r3, [r5, r4]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 800516e:	a802      	add	r0, sp, #8
 8005170:	4684      	mov	ip, r0
 8005172:	210f      	movs	r1, #15
 8005174:	230a      	movs	r3, #10
 8005176:	2201      	movs	r2, #1
 8005178:	4461      	add	r1, ip
 800517a:	0038      	movs	r0, r7
 800517c:	f008 f984 	bl	800d488 <writePxITMutex>
		if(cRxedChar == '\r'){
 8005180:	ab02      	add	r3, sp, #8
 8005182:	7bdb      	ldrb	r3, [r3, #15]
 8005184:	2b0d      	cmp	r3, #13
 8005186:	d026      	beq.n	80051d6 <prvCLITask+0x15a>
			if(cRxedChar == '\n'){
 8005188:	2b0a      	cmp	r3, #10
 800518a:	d011      	beq.n	80051b0 <prvCLITask+0x134>
			else if(cRxedChar == '\b' || cRxedChar == 127 ){
 800518c:	2b08      	cmp	r3, #8
 800518e:	d015      	beq.n	80051bc <prvCLITask+0x140>
 8005190:	2b7f      	cmp	r3, #127	; 0x7f
 8005192:	d013      	beq.n	80051bc <prvCLITask+0x140>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8005194:	001a      	movs	r2, r3
 8005196:	3a20      	subs	r2, #32
 8005198:	2a5e      	cmp	r2, #94	; 0x5e
 800519a:	d809      	bhi.n	80051b0 <prvCLITask+0x134>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 800519c:	464a      	mov	r2, r9
 800519e:	2a31      	cmp	r2, #49	; 0x31
 80051a0:	dc06      	bgt.n	80051b0 <prvCLITask+0x134>
						cInputIndex++;
 80051a2:	464c      	mov	r4, r9
						cInputString[cInputIndex] =cRxedChar;
 80051a4:	4a2b      	ldr	r2, [pc, #172]	; (8005254 <prvCLITask+0x1d8>)
						cInputIndex++;
 80051a6:	3401      	adds	r4, #1
						cInputString[cInputIndex] =cRxedChar;
 80051a8:	444a      	add	r2, r9
 80051aa:	7513      	strb	r3, [r2, #20]
						cInputIndex++;
 80051ac:	b263      	sxtb	r3, r4
 80051ae:	4699      	mov	r9, r3
		taskYIELD();
 80051b0:	f00a f852 	bl	800f258 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80051b4:	e7b6      	b.n	8005124 <prvCLITask+0xa8>
 80051b6:	3301      	adds	r3, #1
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	e7cc      	b.n	8005156 <prvCLITask+0xda>
				if(cInputIndex > 0){
 80051bc:	464b      	mov	r3, r9
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0f6      	beq.n	80051b0 <prvCLITask+0x134>
					cInputIndex--;
 80051c2:	464c      	mov	r4, r9
 80051c4:	3c01      	subs	r4, #1
 80051c6:	b2e3      	uxtb	r3, r4
 80051c8:	b25a      	sxtb	r2, r3
 80051ca:	4691      	mov	r9, r2
					cInputString[cInputIndex] ='\0';
 80051cc:	4a21      	ldr	r2, [pc, #132]	; (8005254 <prvCLITask+0x1d8>)
 80051ce:	4694      	mov	ip, r2
 80051d0:	4463      	add	r3, ip
 80051d2:	751e      	strb	r6, [r3, #20]
 80051d4:	e7ec      	b.n	80051b0 <prvCLITask+0x134>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 80051d6:	9b02      	ldr	r3, [sp, #8]
 80051d8:	2202      	movs	r2, #2
 80051da:	7818      	ldrb	r0, [r3, #0]
 80051dc:	491e      	ldr	r1, [pc, #120]	; (8005258 <prvCLITask+0x1dc>)
 80051de:	230a      	movs	r3, #10
 80051e0:	f008 f952 	bl	800d488 <writePxITMutex>
			if(cInputIndex == 0){
 80051e4:	464b      	mov	r3, r9
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d018      	beq.n	800521c <prvCLITask+0x1a0>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 80051ea:	4c1a      	ldr	r4, [pc, #104]	; (8005254 <prvCLITask+0x1d8>)
 80051ec:	9b02      	ldr	r3, [sp, #8]
 80051ee:	3414      	adds	r4, #20
 80051f0:	7818      	ldrb	r0, [r3, #0]
 80051f2:	0022      	movs	r2, r4
 80051f4:	9b03      	ldr	r3, [sp, #12]
 80051f6:	2101      	movs	r1, #1
 80051f8:	f7ff fd1e 	bl	8004c38 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 80051fc:	480e      	ldr	r0, [pc, #56]	; (8005238 <prvCLITask+0x1bc>)
 80051fe:	0021      	movs	r1, r4
 8005200:	3060      	adds	r0, #96	; 0x60
 8005202:	f00d ffd3 	bl	80131ac <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005206:	2232      	movs	r2, #50	; 0x32
 8005208:	2100      	movs	r1, #0
 800520a:	0020      	movs	r0, r4
 800520c:	f00d fd98 	bl	8012d40 <memset>
			cInputIndex =0;
 8005210:	2300      	movs	r3, #0
 8005212:	4699      	mov	r9, r3
 8005214:	e7cc      	b.n	80051b0 <prvCLITask+0x134>
			if(UARTRxBuf[PcPort - 1][chr]){
 8005216:	2001      	movs	r0, #1
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005218:	2301      	movs	r3, #1
 800521a:	e7a0      	b.n	800515e <prvCLITask+0xe2>
				strcpy((char* )cInputString,(char* )cLastInputString);
 800521c:	4906      	ldr	r1, [pc, #24]	; (8005238 <prvCLITask+0x1bc>)
 800521e:	480d      	ldr	r0, [pc, #52]	; (8005254 <prvCLITask+0x1d8>)
 8005220:	3160      	adds	r1, #96	; 0x60
 8005222:	3014      	adds	r0, #20
 8005224:	f00d ffc2 	bl	80131ac <strcpy>
 8005228:	e7df      	b.n	80051ea <prvCLITask+0x16e>
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	20006db4 	.word	0x20006db4
 8005230:	20000c38 	.word	0x20000c38
 8005234:	20000038 	.word	0x20000038
 8005238:	20001150 	.word	0x20001150
 800523c:	08017584 	.word	0x08017584
 8005240:	20000aa8 	.word	0x20000aa8
 8005244:	08018540 	.word	0x08018540
 8005248:	0801856c 	.word	0x0801856c
 800524c:	20001350 	.word	0x20001350
 8005250:	20001310 	.word	0x20001310
 8005254:	200011d0 	.word	0x200011d0
 8005258:	08019d5c 	.word	0x08019d5c

0800525c <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 800525e:	4b1a      	ldr	r3, [pc, #104]	; (80052c8 <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005260:	000c      	movs	r4, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005262:	781a      	ldrb	r2, [r3, #0]
 8005264:	3a01      	subs	r2, #1
 8005266:	0093      	lsls	r3, r2, #2
 8005268:	189b      	adds	r3, r3, r2
 800526a:	4a18      	ldr	r2, [pc, #96]	; (80052cc <ParseSnippetCommand+0x70>)
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	18d3      	adds	r3, r2, r3
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d018      	beq.n	80052a8 <ParseSnippetCommand+0x4c>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005276:	4e16      	ldr	r6, [pc, #88]	; (80052d0 <ParseSnippetCommand+0x74>)
 8005278:	6cb5      	ldr	r5, [r6, #72]	; 0x48
 800527a:	2d00      	cmp	r5, #0
 800527c:	d016      	beq.n	80052ac <ParseSnippetCommand+0x50>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 800527e:	782b      	ldrb	r3, [r5, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00e      	beq.n	80052a2 <ParseSnippetCommand+0x46>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005284:	2113      	movs	r1, #19
 8005286:	0028      	movs	r0, r5
 8005288:	f00d ff82 	bl	8013190 <strchr>
 800528c:	1e07      	subs	r7, r0, #0
	if(ptrEnd != NULL){
 800528e:	d010      	beq.n	80052b2 <ParseSnippetCommand+0x56>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005290:	1b42      	subs	r2, r0, r5
 8005292:	0029      	movs	r1, r5
 8005294:	0020      	movs	r0, r4
 8005296:	f00d ffa2 	bl	80131de <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 800529a:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 800529c:	3701      	adds	r7, #1
 800529e:	64b7      	str	r7, [r6, #72]	; 0x48
}
 80052a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ptrStart =0;		// Initialize the start pointer for next Snippet
 80052a2:	64b3      	str	r3, [r6, #72]	; 0x48
		return false;
 80052a4:	2000      	movs	r0, #0
 80052a6:	e7fb      	b.n	80052a0 <ParseSnippetCommand+0x44>
		return false;
 80052a8:	2000      	movs	r0, #0
 80052aa:	e7f9      	b.n	80052a0 <ParseSnippetCommand+0x44>
		ptrStart =snippetBuffer;
 80052ac:	64b0      	str	r0, [r6, #72]	; 0x48
 80052ae:	0005      	movs	r5, r0
 80052b0:	e7e5      	b.n	800527e <ParseSnippetCommand+0x22>
		strcpy((char* )cliBuffer,ptrStart);
 80052b2:	0029      	movs	r1, r5
 80052b4:	0020      	movs	r0, r4
 80052b6:	f00d ff79 	bl	80131ac <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 80052ba:	0020      	movs	r0, r4
 80052bc:	f7fa ff2c 	bl	8000118 <strlen>
 80052c0:	182d      	adds	r5, r5, r0
 80052c2:	64b5      	str	r5, [r6, #72]	; 0x48
	return true;
 80052c4:	2001      	movs	r0, #1
 80052c6:	e7eb      	b.n	80052a0 <ParseSnippetCommand+0x44>
 80052c8:	20001150 	.word	0x20001150
 80052cc:	20006dd0 	.word	0x20006dd0
 80052d0:	200011d0 	.word	0x200011d0

080052d4 <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 80052d4:	0083      	lsls	r3, r0, #2
bool CheckSnippetCondition(uint8_t index){
 80052d6:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 80052d8:	1818      	adds	r0, r3, r0
 80052da:	492e      	ldr	r1, [pc, #184]	; (8005394 <CheckSnippetCondition+0xc0>)
 80052dc:	0080      	lsls	r0, r0, #2
 80052de:	5c0b      	ldrb	r3, [r1, r0]
bool CheckSnippetCondition(uint8_t index){
 80052e0:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d020      	beq.n	8005328 <CheckSnippetCondition+0x54>
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d11b      	bne.n	8005322 <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80052ea:	180c      	adds	r4, r1, r0
 80052ec:	78e2      	ldrb	r2, [r4, #3]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80052ee:	3006      	adds	r0, #6
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80052f0:	3a01      	subs	r2, #1
 80052f2:	0053      	lsls	r3, r2, #1
 80052f4:	189b      	adds	r3, r3, r2
 80052f6:	4a28      	ldr	r2, [pc, #160]	; (8005398 <CheckSnippetCondition+0xc4>)
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	589b      	ldr	r3, [r3, r2]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80052fc:	1841      	adds	r1, r0, r1
 80052fe:	2204      	movs	r2, #4
 8005300:	a801      	add	r0, sp, #4
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005302:	681d      	ldr	r5, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005304:	f00d fd13 	bl	8012d2e <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 8005308:	7863      	ldrb	r3, [r4, #1]
 800530a:	2b06      	cmp	r3, #6
 800530c:	d809      	bhi.n	8005322 <CheckSnippetCondition+0x4e>
 800530e:	4a23      	ldr	r2, [pc, #140]	; (800539c <CheckSnippetCondition+0xc8>)
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	58d3      	ldr	r3, [r2, r3]
 8005314:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 8005316:	1c29      	adds	r1, r5, #0
 8005318:	9801      	ldr	r0, [sp, #4]
 800531a:	f7fb f8f3 	bl	8000504 <__aeabi_fcmpgt>
 800531e:	2800      	cmp	r0, #0
 8005320:	d114      	bne.n	800534c <CheckSnippetCondition+0x78>
			
		default:
			break;
	}
	
	return false;
 8005322:	2000      	movs	r0, #0
}
 8005324:	b003      	add	sp, #12
 8005326:	bd30      	pop	{r4, r5, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 8005328:	1808      	adds	r0, r1, r0
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 800532a:	7882      	ldrb	r2, [r0, #2]
 800532c:	78c0      	ldrb	r0, [r0, #3]
 800532e:	00d3      	lsls	r3, r2, #3
 8005330:	189b      	adds	r3, r3, r2
 8005332:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <CheckSnippetCondition+0xcc>)
 8005334:	5c9b      	ldrb	r3, [r3, r2]
 8005336:	1a18      	subs	r0, r3, r0
 8005338:	4243      	negs	r3, r0
 800533a:	4158      	adcs	r0, r3
 800533c:	b2c0      	uxtb	r0, r0
 800533e:	e7f1      	b.n	8005324 <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005340:	1c29      	adds	r1, r5, #0
 8005342:	9801      	ldr	r0, [sp, #4]
 8005344:	f7fb f8c4 	bl	80004d0 <__aeabi_fcmpeq>
 8005348:	2800      	cmp	r0, #0
 800534a:	d1ea      	bne.n	8005322 <CheckSnippetCondition+0x4e>
 800534c:	2100      	movs	r1, #0
 800534e:	1c28      	adds	r0, r5, #0
 8005350:	f7fb f8be 	bl	80004d0 <__aeabi_fcmpeq>
 8005354:	4243      	negs	r3, r0
 8005356:	4158      	adcs	r0, r3
 8005358:	e7e4      	b.n	8005324 <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 800535a:	1c29      	adds	r1, r5, #0
 800535c:	9801      	ldr	r0, [sp, #4]
 800535e:	f7fb f8b7 	bl	80004d0 <__aeabi_fcmpeq>
 8005362:	1e43      	subs	r3, r0, #1
 8005364:	4198      	sbcs	r0, r3
 8005366:	e7dd      	b.n	8005324 <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 8005368:	1c29      	adds	r1, r5, #0
 800536a:	9801      	ldr	r0, [sp, #4]
 800536c:	f7fb f8b6 	bl	80004dc <__aeabi_fcmplt>
 8005370:	1e43      	subs	r3, r0, #1
 8005372:	4198      	sbcs	r0, r3
 8005374:	e7d6      	b.n	8005324 <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 8005376:	1c29      	adds	r1, r5, #0
 8005378:	9801      	ldr	r0, [sp, #4]
 800537a:	f7fb f8b9 	bl	80004f0 <__aeabi_fcmple>
 800537e:	1e43      	subs	r3, r0, #1
 8005380:	4198      	sbcs	r0, r3
 8005382:	e7cf      	b.n	8005324 <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 8005384:	1c29      	adds	r1, r5, #0
 8005386:	9801      	ldr	r0, [sp, #4]
 8005388:	f7fb f8c6 	bl	8000518 <__aeabi_fcmpge>
 800538c:	2800      	cmp	r0, #0
 800538e:	d1dd      	bne.n	800534c <CheckSnippetCondition+0x78>
 8005390:	e7c7      	b.n	8005322 <CheckSnippetCondition+0x4e>
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	20006dd0 	.word	0x20006dd0
 8005398:	200000a4 	.word	0x200000a4
 800539c:	08017638 	.word	0x08017638
 80053a0:	20001e2c 	.word	0x20001e2c

080053a4 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	46de      	mov	lr, fp
 80053a8:	464e      	mov	r6, r9
 80053aa:	4645      	mov	r5, r8
 80053ac:	4657      	mov	r7, sl
 80053ae:	b5e0      	push	{r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80053b0:	f008 fafe 	bl	800d9b0 <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80053b4:	4b23      	ldr	r3, [pc, #140]	; (8005444 <ExecuteSnippet+0xa0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80053b6:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 80053b8:	4698      	mov	r8, r3
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d039      	beq.n	8005434 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80053c0:	4b21      	ldr	r3, [pc, #132]	; (8005448 <ExecuteSnippet+0xa4>)
 80053c2:	4f22      	ldr	r7, [pc, #136]	; (800544c <ExecuteSnippet+0xa8>)
 80053c4:	469b      	mov	fp, r3
 80053c6:	2320      	movs	r3, #32
 80053c8:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80053ca:	4b21      	ldr	r3, [pc, #132]	; (8005450 <ExecuteSnippet+0xac>)
 80053cc:	4d21      	ldr	r5, [pc, #132]	; (8005454 <ExecuteSnippet+0xb0>)
	for(s =0; s < numOfRecordedSnippets; s++){
 80053ce:	2400      	movs	r4, #0
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80053d0:	374c      	adds	r7, #76	; 0x4c
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80053d2:	4699      	mov	r9, r3
 80053d4:	e006      	b.n	80053e4 <ExecuteSnippet+0x40>
	for(s =0; s < numOfRecordedSnippets; s++){
 80053d6:	4643      	mov	r3, r8
 80053d8:	3401      	adds	r4, #1
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	b2a4      	uxth	r4, r4
 80053de:	3514      	adds	r5, #20
 80053e0:	42a3      	cmp	r3, r4
 80053e2:	d927      	bls.n	8005434 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
 80053e4:	7c2b      	ldrb	r3, [r5, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0f5      	beq.n	80053d6 <ExecuteSnippet+0x32>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 80053ea:	b2e0      	uxtb	r0, r4
 80053ec:	f7ff ff72 	bl	80052d4 <CheckSnippetCondition>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d0f0      	beq.n	80053d6 <ExecuteSnippet+0x32>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80053f4:	465b      	mov	r3, fp
 80053f6:	4652      	mov	r2, sl
 80053f8:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80053fa:	e00e      	b.n	800541a <ExecuteSnippet+0x76>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80053fc:	464b      	mov	r3, r9
 80053fe:	003a      	movs	r2, r7
 8005400:	7818      	ldrb	r0, [r3, #0]
 8005402:	2100      	movs	r1, #0
 8005404:	0033      	movs	r3, r6
 8005406:	f7ff fc17 	bl	8004c38 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800540a:	0030      	movs	r0, r6
 800540c:	f7fa fe84 	bl	8000118 <strlen>
 8005410:	2100      	movs	r1, #0
 8005412:	0002      	movs	r2, r0
 8005414:	0030      	movs	r0, r6
 8005416:	f00d fc93 	bl	8012d40 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800541a:	0039      	movs	r1, r7
 800541c:	68e8      	ldr	r0, [r5, #12]
 800541e:	f7ff ff1d 	bl	800525c <ParseSnippetCommand>
 8005422:	2800      	cmp	r0, #0
 8005424:	d1ea      	bne.n	80053fc <ExecuteSnippet+0x58>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005426:	4643      	mov	r3, r8
 8005428:	3401      	adds	r4, #1
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	b2a4      	uxth	r4, r4
 800542e:	3514      	adds	r5, #20
 8005430:	42a3      	cmp	r3, r4
 8005432:	d8d7      	bhi.n	80053e4 <ExecuteSnippet+0x40>
			}
		}
	}
	
	return result;
}
 8005434:	2000      	movs	r0, #0
 8005436:	bc3c      	pop	{r2, r3, r4, r5}
 8005438:	4690      	mov	r8, r2
 800543a:	4699      	mov	r9, r3
 800543c:	46a2      	mov	sl, r4
 800543e:	46ab      	mov	fp, r5
 8005440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	20001150 	.word	0x20001150
 8005448:	20006d34 	.word	0x20006d34
 800544c:	200011d0 	.word	0x200011d0
 8005450:	20000c38 	.word	0x20000c38
 8005454:	20006dd0 	.word	0x20006dd0

08005458 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005458:	2000      	movs	r0, #0
 800545a:	4770      	bx	lr

0800545c <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800545c:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 800545e:	4b03      	ldr	r3, [pc, #12]	; (800546c <flashsizeCommand+0x10>)
 8005460:	4903      	ldr	r1, [pc, #12]	; (8005470 <flashsizeCommand+0x14>)
 8005462:	881a      	ldrh	r2, [r3, #0]
 8005464:	f00d fe66 	bl	8013134 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005468:	2000      	movs	r0, #0
 800546a:	bd10      	pop	{r4, pc}
 800546c:	1ffff7cc 	.word	0x1ffff7cc
 8005470:	08018800 	.word	0x08018800

08005474 <ReadVrefCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005474:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005476:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005478:	0004      	movs	r4, r0
 800547a:	b082      	sub	sp, #8
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 800547c:	a901      	add	r1, sp, #4
 800547e:	4668      	mov	r0, sp
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005484:	f006 fe3e 	bl	800c104 <ReadTempAndVref>
	
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005488:	4669      	mov	r1, sp
 800548a:	0020      	movs	r0, r4
 800548c:	f00d fe8e 	bl	80131ac <strcpy>
	
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005490:	9801      	ldr	r0, [sp, #4]
 8005492:	f7fd fb47 	bl	8002b24 <__aeabi_f2d>
 8005496:	0002      	movs	r2, r0
 8005498:	000b      	movs	r3, r1
 800549a:	0020      	movs	r0, r4
 800549c:	4902      	ldr	r1, [pc, #8]	; (80054a8 <ReadVrefCommand+0x34>)
 800549e:	f00d fe49 	bl	8013134 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80054a2:	2000      	movs	r0, #0
 80054a4:	b002      	add	sp, #8
 80054a6:	bd10      	pop	{r4, pc}
 80054a8:	08018820 	.word	0x08018820

080054ac <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054ac:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80054ae:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054b0:	0004      	movs	r4, r0
 80054b2:	b082      	sub	sp, #8
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80054b4:	a901      	add	r1, sp, #4
 80054b6:	4668      	mov	r0, sp
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80054bc:	f006 fe22 	bl	800c104 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80054c0:	4669      	mov	r1, sp
 80054c2:	0020      	movs	r0, r4
 80054c4:	f00d fe72 	bl	80131ac <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 80054c8:	9800      	ldr	r0, [sp, #0]
 80054ca:	f7fd fb2b 	bl	8002b24 <__aeabi_f2d>
 80054ce:	0002      	movs	r2, r0
 80054d0:	000b      	movs	r3, r1
 80054d2:	0020      	movs	r0, r4
 80054d4:	4902      	ldr	r1, [pc, #8]	; (80054e0 <ReadTempCommand+0x34>)
 80054d6:	f00d fe2d 	bl	8013134 <sprintf>
}
 80054da:	2000      	movs	r0, #0
 80054dc:	b002      	add	sp, #8
 80054de:	bd10      	pop	{r4, pc}
 80054e0:	08018848 	.word	0x08018848

080054e4 <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 80054e4:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e8:	0014      	movs	r4, r2
 80054ea:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 80054ec:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 80054ee:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 80054f0:	2300      	movs	r3, #0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80054f2:	aa01      	add	r2, sp, #4
 80054f4:	2101      	movs	r1, #1
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054f6:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80054f8:	0020      	movs	r0, r4
	float ADC_Value_CLI =0;
 80054fa:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80054fc:	f008 fa5c 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
 8005500:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005502:	aa02      	add	r2, sp, #8
 8005504:	2102      	movs	r1, #2
 8005506:	0020      	movs	r0, r4
 8005508:	f008 fa56 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800550c:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800550e:	0007      	movs	r7, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005510:	3b32      	subs	r3, #50	; 0x32
 8005512:	2b01      	cmp	r3, #1
 8005514:	d907      	bls.n	8005526 <ADCReadCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005516:	2215      	movs	r2, #21
 8005518:	4919      	ldr	r1, [pc, #100]	; (8005580 <ADCReadCommand+0x9c>)
 800551a:	0030      	movs	r0, r6
 800551c:	f00d fc07 	bl	8012d2e <memcpy>
}
 8005520:	2000      	movs	r0, #0
 8005522:	b005      	add	sp, #20
 8005524:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005526:	0028      	movs	r0, r5
 8005528:	f00d f941 	bl	80127ae <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 800552c:	4d15      	ldr	r5, [pc, #84]	; (8005584 <ADCReadCommand+0xa0>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800552e:	b2c4      	uxtb	r4, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005530:	0029      	movs	r1, r5
 8005532:	0038      	movs	r0, r7
 8005534:	f7fa fde6 	bl	8000104 <strcmp>
 8005538:	2800      	cmp	r0, #0
 800553a:	d005      	beq.n	8005548 <ADCReadCommand+0x64>
 800553c:	4912      	ldr	r1, [pc, #72]	; (8005588 <ADCReadCommand+0xa4>)
 800553e:	0038      	movs	r0, r7
 8005540:	f7fa fde0 	bl	8000104 <strcmp>
 8005544:	2800      	cmp	r0, #0
 8005546:	d115      	bne.n	8005574 <ADCReadCommand+0x90>
			ADCSelectChannel(ADCports,ADC_Side);
 8005548:	0029      	movs	r1, r5
 800554a:	0020      	movs	r0, r4
 800554c:	f006 ffa0 	bl	800c490 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005550:	aa03      	add	r2, sp, #12
 8005552:	0029      	movs	r1, r5
 8005554:	0020      	movs	r0, r4
 8005556:	f006 ffeb 	bl	800c530 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 800555a:	a903      	add	r1, sp, #12
 800555c:	0030      	movs	r0, r6
 800555e:	f00d fe25 	bl	80131ac <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005562:	9803      	ldr	r0, [sp, #12]
 8005564:	f7fb f82c 	bl	80005c0 <__aeabi_f2uiz>
 8005568:	4908      	ldr	r1, [pc, #32]	; (800558c <ADCReadCommand+0xa8>)
 800556a:	b282      	uxth	r2, r0
 800556c:	0030      	movs	r0, r6
 800556e:	f00d fde1 	bl	8013134 <sprintf>
 8005572:	e7d5      	b.n	8005520 <ADCReadCommand+0x3c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005574:	2212      	movs	r2, #18
 8005576:	4906      	ldr	r1, [pc, #24]	; (8005590 <ADCReadCommand+0xac>)
 8005578:	0030      	movs	r0, r6
 800557a:	f00d fbd8 	bl	8012d2e <memcpy>
 800557e:	e7cf      	b.n	8005520 <ADCReadCommand+0x3c>
 8005580:	0801889c 	.word	0x0801889c
 8005584:	0801886c 	.word	0x0801886c
 8005588:	08018870 	.word	0x08018870
 800558c:	08018878 	.word	0x08018878
 8005590:	08018888 	.word	0x08018888

08005594 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005596:	4657      	mov	r7, sl
 8005598:	46de      	mov	lr, fp
 800559a:	464e      	mov	r6, r9
 800559c:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0;
 800559e:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055a0:	b5e0      	push	{r5, r6, r7, lr}
 80055a2:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 80055a4:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 80055a6:	4b5b      	ldr	r3, [pc, #364]	; (8005714 <testportCommand+0x180>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055a8:	2101      	movs	r1, #1
	char WriteVaule[1] ="H";
 80055aa:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055ac:	4682      	mov	sl, r0
	char WriteVaule[1] ="H";
 80055ae:	af02      	add	r7, sp, #8
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055b0:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055b2:	aa03      	add	r2, sp, #12
	char WriteVaule[1] ="H";
 80055b4:	703b      	strb	r3, [r7, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055b6:	f008 f9ff 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80055ba:	4957      	ldr	r1, [pc, #348]	; (8005718 <testportCommand+0x184>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055bc:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80055be:	f7fa fda1 	bl	8000104 <strcmp>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d15c      	bne.n	8005680 <testportCommand+0xec>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 80055c6:	4d55      	ldr	r5, [pc, #340]	; (800571c <testportCommand+0x188>)
 80055c8:	4a55      	ldr	r2, [pc, #340]	; (8005720 <testportCommand+0x18c>)
 80055ca:	782b      	ldrb	r3, [r5, #0]
 80055cc:	2401      	movs	r4, #1
 80055ce:	18d2      	adds	r2, r2, r3
 80055d0:	3a01      	subs	r2, #1
 80055d2:	7816      	ldrb	r6, [r2, #0]
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80055d4:	4a53      	ldr	r2, [pc, #332]	; (8005724 <testportCommand+0x190>)
 80055d6:	4691      	mov	r9, r2
 80055d8:	e003      	b.n	80055e2 <testportCommand+0x4e>
 80055da:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 80055dc:	2c06      	cmp	r4, #6
 80055de:	d047      	beq.n	8005670 <testportCommand+0xdc>
 80055e0:	782b      	ldrb	r3, [r5, #0]
 80055e2:	b2e2      	uxtb	r2, r4
 80055e4:	4690      	mov	r8, r2
			if(PcPort != ports){
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d0f7      	beq.n	80055da <testportCommand+0x46>
				WriteVaule[0] =rand();
 80055ea:	f00d fbc1 	bl	8012d70 <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 80055ee:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 80055f0:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 80055f2:	2201      	movs	r2, #1
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	0039      	movs	r1, r7
 80055f8:	469b      	mov	fp, r3
 80055fa:	4640      	mov	r0, r8
 80055fc:	3b5a      	subs	r3, #90	; 0x5a
 80055fe:	f007 ff11 	bl	800d424 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005602:	4640      	mov	r0, r8
 8005604:	f007 ff96 	bl	800d534 <GetUart>
 8005608:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 800560a:	783a      	ldrb	r2, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800560c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 800560e:	b2db      	uxtb	r3, r3
 8005610:	429a      	cmp	r2, r3
 8005612:	d03f      	beq.n	8005694 <testportCommand+0x100>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005614:	0022      	movs	r2, r4
 8005616:	4944      	ldr	r1, [pc, #272]	; (8005728 <testportCommand+0x194>)
 8005618:	4650      	mov	r0, sl
 800561a:	f00d fd8b 	bl	8013134 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800561e:	4650      	mov	r0, sl
 8005620:	f7fa fd7a 	bl	8000118 <strlen>
 8005624:	465b      	mov	r3, fp
 8005626:	b282      	uxth	r2, r0
 8005628:	4651      	mov	r1, sl
 800562a:	7828      	ldrb	r0, [r5, #0]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	230a      	movs	r3, #10
 8005630:	f007 fef8 	bl	800d424 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005634:	2254      	movs	r2, #84	; 0x54
 8005636:	493d      	ldr	r1, [pc, #244]	; (800572c <testportCommand+0x198>)
 8005638:	4650      	mov	r0, sl
 800563a:	f00d fb78 	bl	8012d2e <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800563e:	2364      	movs	r3, #100	; 0x64
 8005640:	7828      	ldrb	r0, [r5, #0]
 8005642:	2253      	movs	r2, #83	; 0x53
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	4651      	mov	r1, sl
 8005648:	3b5a      	subs	r3, #90	; 0x5a
 800564a:	f007 feeb 	bl	800d424 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 800564e:	3601      	adds	r6, #1
 8005650:	e002      	b.n	8005658 <testportCommand+0xc4>
					Delay_ms(1);
 8005652:	2001      	movs	r0, #1
 8005654:	f009 ff4c 	bl	800f4f0 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005658:	782a      	ldrb	r2, [r5, #0]
 800565a:	3a01      	subs	r2, #1
 800565c:	0053      	lsls	r3, r2, #1
 800565e:	189b      	adds	r3, r3, r2
 8005660:	019b      	lsls	r3, r3, #6
 8005662:	444b      	add	r3, r9
 8005664:	5d9b      	ldrb	r3, [r3, r6]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f3      	beq.n	8005652 <testportCommand+0xbe>
 800566a:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 800566c:	2c06      	cmp	r4, #6
 800566e:	d1b7      	bne.n	80055e0 <testportCommand+0x4c>
}
 8005670:	2000      	movs	r0, #0
 8005672:	b005      	add	sp, #20
 8005674:	bc3c      	pop	{r2, r3, r4, r5}
 8005676:	4690      	mov	r8, r2
 8005678:	4699      	mov	r9, r3
 800567a:	46a2      	mov	sl, r4
 800567c:	46ab      	mov	fp, r5
 800567e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(pcParameterString1[0] == 'p'){
 8005680:	2300      	movs	r3, #0
 8005682:	56e3      	ldrsb	r3, [r4, r3]
 8005684:	2b70      	cmp	r3, #112	; 0x70
 8005686:	d016      	beq.n	80056b6 <testportCommand+0x122>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005688:	220f      	movs	r2, #15
 800568a:	4929      	ldr	r1, [pc, #164]	; (8005730 <testportCommand+0x19c>)
 800568c:	4650      	mov	r0, sl
 800568e:	f00d fb4e 	bl	8012d2e <memcpy>
 8005692:	e7ed      	b.n	8005670 <testportCommand+0xdc>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005694:	0022      	movs	r2, r4
 8005696:	4927      	ldr	r1, [pc, #156]	; (8005734 <testportCommand+0x1a0>)
 8005698:	4650      	mov	r0, sl
 800569a:	f00d fd4b 	bl	8013134 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800569e:	4650      	mov	r0, sl
 80056a0:	f7fa fd3a 	bl	8000118 <strlen>
 80056a4:	465b      	mov	r3, fp
 80056a6:	b282      	uxth	r2, r0
 80056a8:	4651      	mov	r1, sl
 80056aa:	7828      	ldrb	r0, [r5, #0]
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	3b5a      	subs	r3, #90	; 0x5a
 80056b0:	f007 feb8 	bl	800d424 <writePxMutex>
 80056b4:	e7be      	b.n	8005634 <testportCommand+0xa0>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80056b6:	1c60      	adds	r0, r4, #1
 80056b8:	f00d f879 	bl	80127ae <atol>
 80056bc:	b2c5      	uxtb	r5, r0
		if(portt > 0 && portt <= NumOfPorts){
 80056be:	1e6b      	subs	r3, r5, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80056c0:	0004      	movs	r4, r0
		if(portt > 0 && portt <= NumOfPorts){
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d905      	bls.n	80056d2 <testportCommand+0x13e>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80056c6:	221b      	movs	r2, #27
 80056c8:	491b      	ldr	r1, [pc, #108]	; (8005738 <testportCommand+0x1a4>)
 80056ca:	4650      	mov	r0, sl
 80056cc:	f00d fb2f 	bl	8012d2e <memcpy>
 80056d0:	e7ce      	b.n	8005670 <testportCommand+0xdc>
				WriteVaule[0] =rand();
 80056d2:	f00d fb4d 	bl	8012d70 <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80056d6:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 80056d8:	7038      	strb	r0, [r7, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80056da:	2201      	movs	r2, #1
 80056dc:	0039      	movs	r1, r7
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	0028      	movs	r0, r5
 80056e2:	3b32      	subs	r3, #50	; 0x32
 80056e4:	f007 fe9e 	bl	800d424 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 80056e8:	2000      	movs	r0, #0
 80056ea:	f007 ff23 	bl	800d534 <GetUart>
 80056ee:	22ff      	movs	r2, #255	; 0xff
 80056f0:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 80056f2:	7839      	ldrb	r1, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 80056f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056f6:	4022      	ands	r2, r4
			if(WriteVaule[0] == ReadValue[0])
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	4299      	cmp	r1, r3
 80056fc:	d004      	beq.n	8005708 <testportCommand+0x174>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 80056fe:	490a      	ldr	r1, [pc, #40]	; (8005728 <testportCommand+0x194>)
 8005700:	4650      	mov	r0, sl
 8005702:	f00d fd17 	bl	8013134 <sprintf>
 8005706:	e7b3      	b.n	8005670 <testportCommand+0xdc>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005708:	490a      	ldr	r1, [pc, #40]	; (8005734 <testportCommand+0x1a0>)
 800570a:	4650      	mov	r0, sl
 800570c:	f00d fd12 	bl	8013134 <sprintf>
 8005710:	e7ae      	b.n	8005670 <testportCommand+0xdc>
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	080178b0 	.word	0x080178b0
 8005718:	08017e80 	.word	0x08017e80
 800571c:	20000c38 	.word	0x20000c38
 8005720:	20001310 	.word	0x20001310
 8005724:	20001350 	.word	0x20001350
 8005728:	080188d0 	.word	0x080188d0
 800572c:	080188e4 	.word	0x080188e4
 8005730:	08018954 	.word	0x08018954
 8005734:	080188b4 	.word	0x080188b4
 8005738:	08018938 	.word	0x08018938

0800573c <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005740:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005742:	b082      	sub	sp, #8
 8005744:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005746:	466a      	mov	r2, sp
 8005748:	2101      	movs	r1, #1
 800574a:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005750:	f008 f932 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005754:	2300      	movs	r3, #0
 8005756:	56c3      	ldrsb	r3, [r0, r3]
 8005758:	2b70      	cmp	r3, #112	; 0x70
 800575a:	d010      	beq.n	800577e <unbridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800575c:	aa01      	add	r2, sp, #4
 800575e:	2102      	movs	r1, #2
 8005760:	0020      	movs	r0, r4
 8005762:	f008 f929 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005766:	2300      	movs	r3, #0
 8005768:	56c3      	ldrsb	r3, [r0, r3]
 800576a:	2b70      	cmp	r3, #112	; 0x70
 800576c:	d027      	beq.n	80057be <unbridgeCommand+0x82>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800576e:	220f      	movs	r2, #15
 8005770:	4919      	ldr	r1, [pc, #100]	; (80057d8 <unbridgeCommand+0x9c>)
 8005772:	0028      	movs	r0, r5
 8005774:	f00d fadb 	bl	8012d2e <memcpy>
}
 8005778:	2000      	movs	r0, #0
 800577a:	b002      	add	sp, #8
 800577c:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 800577e:	3001      	adds	r0, #1
 8005780:	f00d f815 	bl	80127ae <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005784:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005786:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005788:	2102      	movs	r1, #2
 800578a:	0020      	movs	r0, r4
 800578c:	f008 f914 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005790:	2300      	movs	r3, #0
 8005792:	56c3      	ldrsb	r3, [r0, r3]
 8005794:	2b70      	cmp	r3, #112	; 0x70
 8005796:	d1ea      	bne.n	800576e <unbridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005798:	3001      	adds	r0, #1
 800579a:	f00d f808 	bl	80127ae <atol>
 800579e:	0004      	movs	r4, r0
		result =Unbridge(port1,port2);
 80057a0:	b2c1      	uxtb	r1, r0
 80057a2:	b2f0      	uxtb	r0, r6
 80057a4:	f7fe ffc0 	bl	8004728 <Unbridge>
	if(result == BOS_OK)
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d10c      	bne.n	80057c6 <unbridgeCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80057ac:	22ff      	movs	r2, #255	; 0xff
 80057ae:	0023      	movs	r3, r4
 80057b0:	490a      	ldr	r1, [pc, #40]	; (80057dc <unbridgeCommand+0xa0>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	0028      	movs	r0, r5
 80057b6:	4032      	ands	r2, r6
 80057b8:	f00d fcbc 	bl	8013134 <sprintf>
 80057bc:	e7dc      	b.n	8005778 <unbridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80057be:	3001      	adds	r0, #1
 80057c0:	f00c fff5 	bl	80127ae <atol>
 80057c4:	e7d3      	b.n	800576e <unbridgeCommand+0x32>
	else if(result == BOS_ERR_WrongParam)
 80057c6:	2867      	cmp	r0, #103	; 0x67
 80057c8:	d0d1      	beq.n	800576e <unbridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 80057ca:	2219      	movs	r2, #25
 80057cc:	4904      	ldr	r1, [pc, #16]	; (80057e0 <unbridgeCommand+0xa4>)
 80057ce:	0028      	movs	r0, r5
 80057d0:	f00d faad 	bl	8012d2e <memcpy>
	return pdFALSE;
 80057d4:	e7d0      	b.n	8005778 <unbridgeCommand+0x3c>
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	08018954 	.word	0x08018954
 80057dc:	08018964 	.word	0x08018964
 80057e0:	08018984 	.word	0x08018984

080057e4 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80057e8:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057ea:	b082      	sub	sp, #8
 80057ec:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057ee:	466a      	mov	r2, sp
 80057f0:	2101      	movs	r1, #1
 80057f2:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057f8:	f008 f8de 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80057fc:	2300      	movs	r3, #0
 80057fe:	56c3      	ldrsb	r3, [r0, r3]
 8005800:	2b70      	cmp	r3, #112	; 0x70
 8005802:	d010      	beq.n	8005826 <bridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005804:	aa01      	add	r2, sp, #4
 8005806:	2102      	movs	r1, #2
 8005808:	0020      	movs	r0, r4
 800580a:	f008 f8d5 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800580e:	2300      	movs	r3, #0
 8005810:	56c3      	ldrsb	r3, [r0, r3]
 8005812:	2b70      	cmp	r3, #112	; 0x70
 8005814:	d027      	beq.n	8005866 <bridgeCommand+0x82>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005816:	220f      	movs	r2, #15
 8005818:	4919      	ldr	r1, [pc, #100]	; (8005880 <bridgeCommand+0x9c>)
 800581a:	0028      	movs	r0, r5
 800581c:	f00d fa87 	bl	8012d2e <memcpy>
}
 8005820:	2000      	movs	r0, #0
 8005822:	b002      	add	sp, #8
 8005824:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005826:	3001      	adds	r0, #1
 8005828:	f00c ffc1 	bl	80127ae <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800582c:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 800582e:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005830:	2102      	movs	r1, #2
 8005832:	0020      	movs	r0, r4
 8005834:	f008 f8c0 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005838:	2300      	movs	r3, #0
 800583a:	56c3      	ldrsb	r3, [r0, r3]
 800583c:	2b70      	cmp	r3, #112	; 0x70
 800583e:	d1ea      	bne.n	8005816 <bridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005840:	3001      	adds	r0, #1
 8005842:	f00c ffb4 	bl	80127ae <atol>
 8005846:	0004      	movs	r4, r0
		result =Bridge(port1,port2);
 8005848:	b2c1      	uxtb	r1, r0
 800584a:	b2f0      	uxtb	r0, r6
 800584c:	f7fe ff58 	bl	8004700 <Bridge>
	if(result == BOS_OK)
 8005850:	2800      	cmp	r0, #0
 8005852:	d10c      	bne.n	800586e <bridgeCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005854:	22ff      	movs	r2, #255	; 0xff
 8005856:	0023      	movs	r3, r4
 8005858:	490a      	ldr	r1, [pc, #40]	; (8005884 <bridgeCommand+0xa0>)
 800585a:	4013      	ands	r3, r2
 800585c:	0028      	movs	r0, r5
 800585e:	4032      	ands	r2, r6
 8005860:	f00d fc68 	bl	8013134 <sprintf>
 8005864:	e7dc      	b.n	8005820 <bridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005866:	3001      	adds	r0, #1
 8005868:	f00c ffa1 	bl	80127ae <atol>
 800586c:	e7d3      	b.n	8005816 <bridgeCommand+0x32>
	else if(result == BOS_ERR_WrongParam)
 800586e:	2867      	cmp	r0, #103	; 0x67
 8005870:	d0d1      	beq.n	8005816 <bridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005872:	2217      	movs	r2, #23
 8005874:	4904      	ldr	r1, [pc, #16]	; (8005888 <bridgeCommand+0xa4>)
 8005876:	0028      	movs	r0, r5
 8005878:	f00d fa59 	bl	8012d2e <memcpy>
	return pdFALSE;
 800587c:	e7d0      	b.n	8005820 <bridgeCommand+0x3c>
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	08018954 	.word	0x08018954
 8005884:	080189a0 	.word	0x080189a0
 8005888:	080189c4 	.word	0x080189c4

0800588c <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800588c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800588e:	46d6      	mov	lr, sl
 8005890:	4646      	mov	r6, r8
 8005892:	464f      	mov	r7, r9
	portBASE_TYPE xParameterStringLength1 =0;
 8005894:	2400      	movs	r4, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005896:	b5c0      	push	{r6, r7, lr}
 8005898:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800589a:	2101      	movs	r1, #1
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800589c:	0006      	movs	r6, r0
 800589e:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058a0:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80058a2:	9401      	str	r4, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058a4:	f008 f888 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 80058a8:	f00c ff7b 	bl	80127a2 <atoi>
 80058ac:	b2c5      	uxtb	r5, r0
	if(!index || index > numOfRecordedSnippets)
 80058ae:	2d00      	cmp	r5, #0
 80058b0:	d003      	beq.n	80058ba <delSnipCommand+0x2e>
 80058b2:	4f30      	ldr	r7, [pc, #192]	; (8005974 <delSnipCommand+0xe8>)
 80058b4:	783b      	ldrb	r3, [r7, #0]
 80058b6:	42ab      	cmp	r3, r5
 80058b8:	d20b      	bcs.n	80058d2 <delSnipCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058ba:	2223      	movs	r2, #35	; 0x23
 80058bc:	492e      	ldr	r1, [pc, #184]	; (8005978 <delSnipCommand+0xec>)
 80058be:	0030      	movs	r0, r6
 80058c0:	f00d fa35 	bl	8012d2e <memcpy>
}
 80058c4:	2000      	movs	r0, #0
 80058c6:	b002      	add	sp, #8
 80058c8:	bc1c      	pop	{r2, r3, r4}
 80058ca:	4690      	mov	r8, r2
 80058cc:	4699      	mov	r9, r3
 80058ce:	46a2      	mov	sl, r4
 80058d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 80058d2:	23ff      	movs	r3, #255	; 0xff
 80058d4:	4003      	ands	r3, r0
 80058d6:	469a      	mov	sl, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	0098      	lsls	r0, r3, #2
 80058dc:	18c0      	adds	r0, r0, r3
 80058de:	4b27      	ldr	r3, [pc, #156]	; (800597c <delSnipCommand+0xf0>)
 80058e0:	0080      	lsls	r0, r0, #2
 80058e2:	4699      	mov	r9, r3
 80058e4:	4680      	mov	r8, r0
 80058e6:	44c8      	add	r8, r9
 80058e8:	4643      	mov	r3, r8
		memset(snippets[index - 1].cond.buffer1,0,4);
 80058ea:	3002      	adds	r0, #2
		snippets[index - 1].cond.conditionType =0;
 80058ec:	801c      	strh	r4, [r3, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 80058ee:	2204      	movs	r2, #4
 80058f0:	2100      	movs	r1, #0
 80058f2:	4448      	add	r0, r9
 80058f4:	f00d fa24 	bl	8012d40 <memset>
		snippets[index - 1].state = false;
 80058f8:	2300      	movs	r3, #0
 80058fa:	4642      	mov	r2, r8
 80058fc:	7413      	strb	r3, [r2, #16]
		free(snippets[index - 1].cmd);
 80058fe:	68d0      	ldr	r0, [r2, #12]
 8005900:	f00c ffd2 	bl	80128a8 <free>
		snippets[index - 1].cmd = NULL;
 8005904:	4643      	mov	r3, r8
 8005906:	60dc      	str	r4, [r3, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005908:	783b      	ldrb	r3, [r7, #0]
 800590a:	42ab      	cmp	r3, r5
 800590c:	d92e      	bls.n	800596c <delSnipCommand+0xe0>
 800590e:	3b01      	subs	r3, #1
 8005910:	1b58      	subs	r0, r3, r5
 8005912:	b2c0      	uxtb	r0, r0
 8005914:	4450      	add	r0, sl
 8005916:	4652      	mov	r2, sl
 8005918:	0085      	lsls	r5, r0, #2
 800591a:	182d      	adds	r5, r5, r0
 800591c:	4648      	mov	r0, r9
 800591e:	0094      	lsls	r4, r2, #2
 8005920:	4454      	add	r4, sl
 8005922:	00a4      	lsls	r4, r4, #2
 8005924:	00ad      	lsls	r5, r5, #2
 8005926:	3014      	adds	r0, #20
 8005928:	444c      	add	r4, r9
 800592a:	4698      	mov	r8, r3
 800592c:	182d      	adds	r5, r5, r0
 800592e:	e002      	b.n	8005936 <delSnipCommand+0xaa>
 8005930:	3414      	adds	r4, #20
 8005932:	42ac      	cmp	r4, r5
 8005934:	d010      	beq.n	8005958 <delSnipCommand+0xcc>
			if(snippets[s].cond.conditionType){
 8005936:	7823      	ldrb	r3, [r4, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0f9      	beq.n	8005930 <delSnipCommand+0xa4>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 800593c:	0020      	movs	r0, r4
 800593e:	0021      	movs	r1, r4
 8005940:	2214      	movs	r2, #20
 8005942:	3814      	subs	r0, #20
 8005944:	f00d f9f3 	bl	8012d2e <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005948:	0020      	movs	r0, r4
 800594a:	2214      	movs	r2, #20
 800594c:	2100      	movs	r1, #0
 800594e:	3414      	adds	r4, #20
 8005950:	f00d f9f6 	bl	8012d40 <memset>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005954:	42ac      	cmp	r4, r5
 8005956:	d1ee      	bne.n	8005936 <delSnipCommand+0xaa>
		--numOfRecordedSnippets;
 8005958:	4643      	mov	r3, r8
 800595a:	703b      	strb	r3, [r7, #0]
		SaveToRO();
 800595c:	f004 f97c 	bl	8009c58 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005960:	2236      	movs	r2, #54	; 0x36
 8005962:	4907      	ldr	r1, [pc, #28]	; (8005980 <delSnipCommand+0xf4>)
 8005964:	0030      	movs	r0, r6
 8005966:	f00d f9e2 	bl	8012d2e <memcpy>
 800596a:	e7ab      	b.n	80058c4 <delSnipCommand+0x38>
 800596c:	3b01      	subs	r3, #1
 800596e:	4698      	mov	r8, r3
 8005970:	e7f2      	b.n	8005958 <delSnipCommand+0xcc>
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	20001150 	.word	0x20001150
 8005978:	08018a14 	.word	0x08018a14
 800597c:	20006dd0 	.word	0x20006dd0
 8005980:	080189dc 	.word	0x080189dc

08005984 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005984:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005986:	2400      	movs	r4, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005988:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800598a:	2101      	movs	r1, #1
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800598c:	0005      	movs	r5, r0
 800598e:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005990:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005992:	9401      	str	r4, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005994:	f008 f810 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005998:	f00c ff03 	bl	80127a2 <atoi>
 800599c:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <pauseSnipCommand+0x26>
 80059a2:	4a0e      	ldr	r2, [pc, #56]	; (80059dc <pauseSnipCommand+0x58>)
 80059a4:	7812      	ldrb	r2, [r2, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d207      	bcs.n	80059ba <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059aa:	2223      	movs	r2, #35	; 0x23
 80059ac:	490c      	ldr	r1, [pc, #48]	; (80059e0 <pauseSnipCommand+0x5c>)
 80059ae:	0028      	movs	r0, r5
 80059b0:	f00d f9bd 	bl	8012d2e <memcpy>
}
 80059b4:	2000      	movs	r0, #0
 80059b6:	b003      	add	sp, #12
 80059b8:	bd30      	pop	{r4, r5, pc}
		snippets[index - 1].state = false;
 80059ba:	23ff      	movs	r3, #255	; 0xff
 80059bc:	4018      	ands	r0, r3
 80059be:	3801      	subs	r0, #1
 80059c0:	0083      	lsls	r3, r0, #2
 80059c2:	1818      	adds	r0, r3, r0
 80059c4:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <pauseSnipCommand+0x60>)
 80059c6:	0080      	lsls	r0, r0, #2
 80059c8:	1818      	adds	r0, r3, r0
 80059ca:	7404      	strb	r4, [r0, #16]
		SaveToRO();
 80059cc:	f004 f944 	bl	8009c58 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 80059d0:	2235      	movs	r2, #53	; 0x35
 80059d2:	4905      	ldr	r1, [pc, #20]	; (80059e8 <pauseSnipCommand+0x64>)
 80059d4:	0028      	movs	r0, r5
 80059d6:	f00d f9aa 	bl	8012d2e <memcpy>
 80059da:	e7eb      	b.n	80059b4 <pauseSnipCommand+0x30>
 80059dc:	20001150 	.word	0x20001150
 80059e0:	08018a14 	.word	0x08018a14
 80059e4:	20006dd0 	.word	0x20006dd0
 80059e8:	08018a38 	.word	0x08018a38

080059ec <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 80059ec:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059ee:	b510      	push	{r4, lr}
 80059f0:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059f2:	2101      	movs	r1, #1
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059f4:	0004      	movs	r4, r0
 80059f6:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059f8:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80059fa:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059fc:	f007 ffdc 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005a00:	f00c fecf 	bl	80127a2 <atoi>
 8005a04:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <actSnipCommand+0x26>
 8005a0a:	4a0f      	ldr	r2, [pc, #60]	; (8005a48 <actSnipCommand+0x5c>)
 8005a0c:	7812      	ldrb	r2, [r2, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d207      	bcs.n	8005a22 <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a12:	2223      	movs	r2, #35	; 0x23
 8005a14:	490d      	ldr	r1, [pc, #52]	; (8005a4c <actSnipCommand+0x60>)
 8005a16:	0020      	movs	r0, r4
 8005a18:	f00d f989 	bl	8012d2e <memcpy>
}
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	b002      	add	sp, #8
 8005a20:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005a22:	23ff      	movs	r3, #255	; 0xff
 8005a24:	4018      	ands	r0, r3
 8005a26:	3801      	subs	r0, #1
 8005a28:	0083      	lsls	r3, r0, #2
 8005a2a:	1818      	adds	r0, r3, r0
 8005a2c:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <actSnipCommand+0x64>)
 8005a2e:	0080      	lsls	r0, r0, #2
 8005a30:	1818      	adds	r0, r3, r0
 8005a32:	2301      	movs	r3, #1
 8005a34:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005a36:	f004 f90f 	bl	8009c58 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005a3a:	2238      	movs	r2, #56	; 0x38
 8005a3c:	4905      	ldr	r1, [pc, #20]	; (8005a54 <actSnipCommand+0x68>)
 8005a3e:	0020      	movs	r0, r4
 8005a40:	f00d f975 	bl	8012d2e <memcpy>
 8005a44:	e7ea      	b.n	8005a1c <actSnipCommand+0x30>
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	20001150 	.word	0x20001150
 8005a4c:	08018a14 	.word	0x08018a14
 8005a50:	20006dd0 	.word	0x20006dd0
 8005a54:	08018a70 	.word	0x08018a70

08005a58 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5a:	46de      	mov	lr, fp
 8005a5c:	4657      	mov	r7, sl
 8005a5e:	464e      	mov	r6, r9
 8005a60:	4645      	mov	r5, r8
 8005a62:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 8005a64:	4b7c      	ldr	r3, [pc, #496]	; (8005c58 <snipCommand+0x200>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a66:	b08b      	sub	sp, #44	; 0x2c
	char status[2][7] ={"Paused", "Active"};
 8005a68:	3304      	adds	r3, #4
 8005a6a:	aa06      	add	r2, sp, #24
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a6c:	0007      	movs	r7, r0
	char status[2][7] ={"Paused", "Active"};
 8005a6e:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005a70:	c213      	stmia	r2!, {r0, r1, r4}
 8005a72:	881b      	ldrh	r3, [r3, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005a74:	4979      	ldr	r1, [pc, #484]	; (8005c5c <snipCommand+0x204>)
	char status[2][7] ={"Paused", "Active"};
 8005a76:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005a78:	4b79      	ldr	r3, [pc, #484]	; (8005c60 <snipCommand+0x208>)
 8005a7a:	2237      	movs	r2, #55	; 0x37
 8005a7c:	7818      	ldrb	r0, [r3, #0]
 8005a7e:	2301      	movs	r3, #1
 8005a80:	425b      	negs	r3, r3
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	3333      	adds	r3, #51	; 0x33
 8005a86:	f007 fccd 	bl	800d424 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005a8a:	4b76      	ldr	r3, [pc, #472]	; (8005c64 <snipCommand+0x20c>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d044      	beq.n	8005b1c <snipCommand+0xc4>
 8005a92:	2500      	movs	r5, #0
 8005a94:	4b74      	ldr	r3, [pc, #464]	; (8005c68 <snipCommand+0x210>)
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005a96:	46a8      	mov	r8, r5
 8005a98:	469a      	mov	sl, r3
 8005a9a:	4c74      	ldr	r4, [pc, #464]	; (8005c6c <snipCommand+0x214>)
 8005a9c:	4643      	mov	r3, r8
		if(snippets[s].cond.conditionType)
 8005a9e:	009d      	lsls	r5, r3, #2
 8005aa0:	18e9      	adds	r1, r5, r3
 8005aa2:	1c5e      	adds	r6, r3, #1
 8005aa4:	008b      	lsls	r3, r1, #2
 8005aa6:	469b      	mov	fp, r3
 8005aa8:	4653      	mov	r3, sl
 8005aaa:	465a      	mov	r2, fp
 8005aac:	5c9b      	ldrb	r3, [r3, r2]
 8005aae:	b2f6      	uxtb	r6, r6
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d140      	bne.n	8005b36 <snipCommand+0xde>
 8005ab4:	4659      	mov	r1, fp
 8005ab6:	4451      	add	r1, sl
 8005ab8:	68c8      	ldr	r0, [r1, #12]
 8005aba:	4445      	add	r5, r8
 8005abc:	00ad      	lsls	r5, r5, #2
 8005abe:	4455      	add	r5, sl
 8005ac0:	e00e      	b.n	8005ae0 <snipCommand+0x88>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005ac2:	0023      	movs	r3, r4
 8005ac4:	003a      	movs	r2, r7
 8005ac6:	496a      	ldr	r1, [pc, #424]	; (8005c70 <snipCommand+0x218>)
 8005ac8:	0038      	movs	r0, r7
 8005aca:	f00d fb33 	bl	8013134 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005ace:	0020      	movs	r0, r4
 8005ad0:	f7fa fb22 	bl	8000118 <strlen>
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	0002      	movs	r2, r0
 8005ad8:	0020      	movs	r0, r4
 8005ada:	f00d f931 	bl	8012d40 <memset>
 8005ade:	68e8      	ldr	r0, [r5, #12]
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005ae0:	0021      	movs	r1, r4
 8005ae2:	f7ff fbbb 	bl	800525c <ParseSnippetCommand>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d1eb      	bne.n	8005ac2 <snipCommand+0x6a>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005aea:	0038      	movs	r0, r7
 8005aec:	f7fa fb14 	bl	8000118 <strlen>
 8005af0:	220c      	movs	r2, #12
 8005af2:	0005      	movs	r5, r0
 8005af4:	495f      	ldr	r1, [pc, #380]	; (8005c74 <snipCommand+0x21c>)
 8005af6:	1838      	adds	r0, r7, r0
 8005af8:	f00d f919 	bl	8012d2e <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005afc:	4b58      	ldr	r3, [pc, #352]	; (8005c60 <snipCommand+0x208>)
 8005afe:	350b      	adds	r5, #11
 8005b00:	7818      	ldrb	r0, [r3, #0]
 8005b02:	2301      	movs	r3, #1
 8005b04:	425b      	negs	r3, r3
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	b2aa      	uxth	r2, r5
 8005b0a:	3333      	adds	r3, #51	; 0x33
 8005b0c:	0039      	movs	r1, r7
 8005b0e:	f007 fc89 	bl	800d424 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005b12:	4b54      	ldr	r3, [pc, #336]	; (8005c64 <snipCommand+0x20c>)
 8005b14:	46b0      	mov	r8, r6
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	42b3      	cmp	r3, r6
 8005b1a:	d8bf      	bhi.n	8005a9c <snipCommand+0x44>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005b1c:	22b5      	movs	r2, #181	; 0xb5
 8005b1e:	4956      	ldr	r1, [pc, #344]	; (8005c78 <snipCommand+0x220>)
 8005b20:	0038      	movs	r0, r7
 8005b22:	f00d f904 	bl	8012d2e <memcpy>
}
 8005b26:	2000      	movs	r0, #0
 8005b28:	b00b      	add	sp, #44	; 0x2c
 8005b2a:	bc3c      	pop	{r2, r3, r4, r5}
 8005b2c:	4690      	mov	r8, r2
 8005b2e:	4699      	mov	r9, r3
 8005b30:	46a2      	mov	sl, r4
 8005b32:	46ab      	mov	fp, r5
 8005b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005b36:	46d1      	mov	r9, sl
 8005b38:	44d9      	add	r9, fp
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	7c1a      	ldrb	r2, [r3, #16]
 8005b3e:	494f      	ldr	r1, [pc, #316]	; (8005c7c <snipCommand+0x224>)
 8005b40:	00d3      	lsls	r3, r2, #3
 8005b42:	1a9b      	subs	r3, r3, r2
 8005b44:	aa06      	add	r2, sp, #24
 8005b46:	4694      	mov	ip, r2
 8005b48:	0038      	movs	r0, r7
 8005b4a:	4463      	add	r3, ip
 8005b4c:	0032      	movs	r2, r6
 8005b4e:	f00d faf1 	bl	8013134 <sprintf>
		switch(snippets[s].cond.conditionType){
 8005b52:	4653      	mov	r3, sl
 8005b54:	465a      	mov	r2, fp
 8005b56:	5c9b      	ldrb	r3, [r3, r2]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d029      	beq.n	8005bb0 <snipCommand+0x158>
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d175      	bne.n	8005c4c <snipCommand+0x1f4>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005b60:	4659      	mov	r1, fp
 8005b62:	3106      	adds	r1, #6
 8005b64:	4451      	add	r1, sl
 8005b66:	2204      	movs	r2, #4
 8005b68:	a805      	add	r0, sp, #20
 8005b6a:	f00d f8e0 	bl	8012d2e <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005b6e:	464b      	mov	r3, r9
 8005b70:	78da      	ldrb	r2, [r3, #3]
 8005b72:	9805      	ldr	r0, [sp, #20]
 8005b74:	3a01      	subs	r2, #1
 8005b76:	0053      	lsls	r3, r2, #1
 8005b78:	189b      	adds	r3, r3, r2
 8005b7a:	4a41      	ldr	r2, [pc, #260]	; (8005c80 <snipCommand+0x228>)
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	18d3      	adds	r3, r2, r3
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	469b      	mov	fp, r3
 8005b84:	f7fc ffce 	bl	8002b24 <__aeabi_f2d>
 8005b88:	464b      	mov	r3, r9
 8005b8a:	9002      	str	r0, [sp, #8]
 8005b8c:	9103      	str	r1, [sp, #12]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	4a31      	ldr	r2, [pc, #196]	; (8005c58 <snipCommand+0x200>)
 8005b92:	3b01      	subs	r3, #1
 8005b94:	0059      	lsls	r1, r3, #1
 8005b96:	3214      	adds	r2, #20
 8005b98:	18cb      	adds	r3, r1, r3
 8005b9a:	18d3      	adds	r3, r2, r3
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	003a      	movs	r2, r7
 8005ba0:	465b      	mov	r3, fp
 8005ba2:	4938      	ldr	r1, [pc, #224]	; (8005c84 <snipCommand+0x22c>)
 8005ba4:	0038      	movs	r0, r7
 8005ba6:	f00d fac5 	bl	8013134 <sprintf>
 8005baa:	464b      	mov	r3, r9
 8005bac:	68d8      	ldr	r0, [r3, #12]
				break;
 8005bae:	e784      	b.n	8005aba <snipCommand+0x62>
 8005bb0:	464b      	mov	r3, r9
 8005bb2:	68d8      	ldr	r0, [r3, #12]
				switch(snippets[s].cond.buffer1[1]){
 8005bb4:	78db      	ldrb	r3, [r3, #3]
 8005bb6:	3b05      	subs	r3, #5
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b09      	cmp	r3, #9
 8005bbc:	d900      	bls.n	8005bc0 <snipCommand+0x168>
 8005bbe:	e77c      	b.n	8005aba <snipCommand+0x62>
 8005bc0:	4a31      	ldr	r2, [pc, #196]	; (8005c88 <snipCommand+0x230>)
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	58d3      	ldr	r3, [r2, r3]
 8005bc6:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005bc8:	4643      	mov	r3, r8
 8005bca:	18eb      	adds	r3, r5, r3
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4453      	add	r3, sl
 8005bd0:	4699      	mov	r9, r3
 8005bd2:	464a      	mov	r2, r9
 8005bd4:	789b      	ldrb	r3, [r3, #2]
 8005bd6:	9001      	str	r0, [sp, #4]
 8005bd8:	7912      	ldrb	r2, [r2, #4]
 8005bda:	492c      	ldr	r1, [pc, #176]	; (8005c8c <snipCommand+0x234>)
 8005bdc:	9200      	str	r2, [sp, #0]
 8005bde:	0038      	movs	r0, r7
 8005be0:	003a      	movs	r2, r7
 8005be2:	f00d faa7 	bl	8013134 <sprintf>
 8005be6:	464b      	mov	r3, r9
 8005be8:	68d8      	ldr	r0, [r3, #12]
						break;
 8005bea:	e766      	b.n	8005aba <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005bec:	4643      	mov	r3, r8
 8005bee:	18eb      	adds	r3, r5, r3
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4453      	add	r3, sl
 8005bf4:	4699      	mov	r9, r3
 8005bf6:	464a      	mov	r2, r9
 8005bf8:	789b      	ldrb	r3, [r3, #2]
 8005bfa:	9001      	str	r0, [sp, #4]
 8005bfc:	7912      	ldrb	r2, [r2, #4]
 8005bfe:	4924      	ldr	r1, [pc, #144]	; (8005c90 <snipCommand+0x238>)
 8005c00:	9200      	str	r2, [sp, #0]
 8005c02:	0038      	movs	r0, r7
 8005c04:	003a      	movs	r2, r7
 8005c06:	f00d fa95 	bl	8013134 <sprintf>
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c0e:	e754      	b.n	8005aba <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005c10:	4643      	mov	r3, r8
 8005c12:	18eb      	adds	r3, r5, r3
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4453      	add	r3, sl
 8005c18:	4699      	mov	r9, r3
 8005c1a:	003a      	movs	r2, r7
 8005c1c:	789b      	ldrb	r3, [r3, #2]
 8005c1e:	491d      	ldr	r1, [pc, #116]	; (8005c94 <snipCommand+0x23c>)
 8005c20:	9000      	str	r0, [sp, #0]
 8005c22:	0038      	movs	r0, r7
 8005c24:	f00d fa86 	bl	8013134 <sprintf>
 8005c28:	464b      	mov	r3, r9
 8005c2a:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c2c:	e745      	b.n	8005aba <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005c2e:	4643      	mov	r3, r8
 8005c30:	18eb      	adds	r3, r5, r3
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4453      	add	r3, sl
 8005c36:	4699      	mov	r9, r3
 8005c38:	003a      	movs	r2, r7
 8005c3a:	789b      	ldrb	r3, [r3, #2]
 8005c3c:	4916      	ldr	r1, [pc, #88]	; (8005c98 <snipCommand+0x240>)
 8005c3e:	9000      	str	r0, [sp, #0]
 8005c40:	0038      	movs	r0, r7
 8005c42:	f00d fa77 	bl	8013134 <sprintf>
 8005c46:	464b      	mov	r3, r9
 8005c48:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c4a:	e736      	b.n	8005aba <snipCommand+0x62>
 8005c4c:	2314      	movs	r3, #20
 8005c4e:	4642      	mov	r2, r8
 8005c50:	4353      	muls	r3, r2
 8005c52:	4453      	add	r3, sl
 8005c54:	68d8      	ldr	r0, [r3, #12]
 8005c56:	e730      	b.n	8005aba <snipCommand+0x62>
 8005c58:	080178b0 	.word	0x080178b0
 8005c5c:	08018aa8 	.word	0x08018aa8
 8005c60:	20000c38 	.word	0x20000c38
 8005c64:	20001150 	.word	0x20001150
 8005c68:	20006dd0 	.word	0x20006dd0
 8005c6c:	20001250 	.word	0x20001250
 8005c70:	08018b5c 	.word	0x08018b5c
 8005c74:	08018b64 	.word	0x08018b64
 8005c78:	08018b70 	.word	0x08018b70
 8005c7c:	08018ae0 	.word	0x08018ae0
 8005c80:	200000a4 	.word	0x200000a4
 8005c84:	08018b4c 	.word	0x08018b4c
 8005c88:	08017654 	.word	0x08017654
 8005c8c:	08018b30 	.word	0x08018b30
 8005c90:	08018b18 	.word	0x08018b18
 8005c94:	08018b00 	.word	0x08018b00
 8005c98:	08018aec 	.word	0x08018aec

08005c9c <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005ca0:	f009 fc3a 	bl	800f518 <HAL_GetDEVID>
	switch(dev){
 8005ca4:	4b1b      	ldr	r3, [pc, #108]	; (8005d14 <idcodeCommand+0x78>)
 8005ca6:	0400      	lsls	r0, r0, #16
 8005ca8:	469c      	mov	ip, r3
 8005caa:	0c00      	lsrs	r0, r0, #16
 8005cac:	4460      	add	r0, ip
 8005cae:	2808      	cmp	r0, #8
 8005cb0:	d82a      	bhi.n	8005d08 <idcodeCommand+0x6c>
 8005cb2:	4b19      	ldr	r3, [pc, #100]	; (8005d18 <idcodeCommand+0x7c>)
 8005cb4:	0080      	lsls	r0, r0, #2
 8005cb6:	581b      	ldr	r3, [r3, r0]
 8005cb8:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005cba:	4a18      	ldr	r2, [pc, #96]	; (8005d1c <idcodeCommand+0x80>)
 8005cbc:	4918      	ldr	r1, [pc, #96]	; (8005d20 <idcodeCommand+0x84>)
 8005cbe:	0020      	movs	r0, r4
 8005cc0:	f00d fa38 	bl	8013134 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005cc4:	f009 fc22 	bl	800f50c <HAL_GetREVID>
 8005cc8:	0022      	movs	r2, r4
 8005cca:	0b03      	lsrs	r3, r0, #12
 8005ccc:	4915      	ldr	r1, [pc, #84]	; (8005d24 <idcodeCommand+0x88>)
 8005cce:	0020      	movs	r0, r4
 8005cd0:	f00d fa30 	bl	8013134 <sprintf>
}
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005cd8:	4a13      	ldr	r2, [pc, #76]	; (8005d28 <idcodeCommand+0x8c>)
 8005cda:	4911      	ldr	r1, [pc, #68]	; (8005d20 <idcodeCommand+0x84>)
 8005cdc:	0020      	movs	r0, r4
 8005cde:	f00d fa29 	bl	8013134 <sprintf>
			break;
 8005ce2:	e7ef      	b.n	8005cc4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005ce4:	4a11      	ldr	r2, [pc, #68]	; (8005d2c <idcodeCommand+0x90>)
 8005ce6:	490e      	ldr	r1, [pc, #56]	; (8005d20 <idcodeCommand+0x84>)
 8005ce8:	0020      	movs	r0, r4
 8005cea:	f00d fa23 	bl	8013134 <sprintf>
			break;
 8005cee:	e7e9      	b.n	8005cc4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005cf0:	4a0f      	ldr	r2, [pc, #60]	; (8005d30 <idcodeCommand+0x94>)
 8005cf2:	490b      	ldr	r1, [pc, #44]	; (8005d20 <idcodeCommand+0x84>)
 8005cf4:	0020      	movs	r0, r4
 8005cf6:	f00d fa1d 	bl	8013134 <sprintf>
			break;
 8005cfa:	e7e3      	b.n	8005cc4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005cfc:	4a0d      	ldr	r2, [pc, #52]	; (8005d34 <idcodeCommand+0x98>)
 8005cfe:	4908      	ldr	r1, [pc, #32]	; (8005d20 <idcodeCommand+0x84>)
 8005d00:	0020      	movs	r0, r4
 8005d02:	f00d fa17 	bl	8013134 <sprintf>
			break;
 8005d06:	e7dd      	b.n	8005cc4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005d08:	4a0b      	ldr	r2, [pc, #44]	; (8005d38 <idcodeCommand+0x9c>)
 8005d0a:	4905      	ldr	r1, [pc, #20]	; (8005d20 <idcodeCommand+0x84>)
 8005d0c:	0020      	movs	r0, r4
 8005d0e:	f00d fa11 	bl	8013134 <sprintf>
			break;
 8005d12:	e7d7      	b.n	8005cc4 <idcodeCommand+0x28>
 8005d14:	fffffbc0 	.word	0xfffffbc0
 8005d18:	0801767c 	.word	0x0801767c
 8005d1c:	08018c60 	.word	0x08018c60
 8005d20:	08018c34 	.word	0x08018c34
 8005d24:	08018c80 	.word	0x08018c80
 8005d28:	08018c54 	.word	0x08018c54
 8005d2c:	08018c6c 	.word	0x08018c6c
 8005d30:	08018c28 	.word	0x08018c28
 8005d34:	08018c48 	.word	0x08018c48
 8005d38:	08018c78 	.word	0x08018c78

08005d3c <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	0004      	movs	r4, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005d40:	220e      	movs	r2, #14
 8005d42:	4911      	ldr	r1, [pc, #68]	; (8005d88 <uuidCommand+0x4c>)
 8005d44:	f00c fff3 	bl	8012d2e <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005d48:	4d10      	ldr	r5, [pc, #64]	; (8005d8c <uuidCommand+0x50>)
 8005d4a:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <uuidCommand+0x54>)
 8005d4c:	0029      	movs	r1, r5
 8005d4e:	0022      	movs	r2, r4
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	0020      	movs	r0, r4
 8005d54:	f00d f9ee 	bl	8013134 <sprintf>
 8005d58:	4b0e      	ldr	r3, [pc, #56]	; (8005d94 <uuidCommand+0x58>)
 8005d5a:	0029      	movs	r1, r5
 8005d5c:	0022      	movs	r2, r4
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	0020      	movs	r0, r4
 8005d62:	f00d f9e7 	bl	8013134 <sprintf>
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <uuidCommand+0x5c>)
 8005d68:	0029      	movs	r1, r5
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	0022      	movs	r2, r4
 8005d6e:	0020      	movs	r0, r4
 8005d70:	f00d f9e0 	bl	8013134 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005d74:	0020      	movs	r0, r4
 8005d76:	f7fa f9cf 	bl	8000118 <strlen>
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	1820      	adds	r0, r4, r0
 8005d7e:	4907      	ldr	r1, [pc, #28]	; (8005d9c <uuidCommand+0x60>)
 8005d80:	f00c ffd5 	bl	8012d2e <memcpy>
}
 8005d84:	2000      	movs	r0, #0
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
 8005d88:	08018c98 	.word	0x08018c98
 8005d8c:	08018ca8 	.word	0x08018ca8
 8005d90:	1ffff7ac 	.word	0x1ffff7ac
 8005d94:	1ffff7b0 	.word	0x1ffff7b0
 8005d98:	1ffff7b4 	.word	0x1ffff7b4
 8005d9c:	08019d5c 	.word	0x08019d5c

08005da0 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005da0:	b510      	push	{r4, lr}
 8005da2:	0004      	movs	r4, r0
	GetTimeDate();
 8005da4:	f007 f900 	bl	800cfa8 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8005da8:	f7fe fc8c 	bl	80046c4 <GetDateString>
 8005dac:	4903      	ldr	r1, [pc, #12]	; (8005dbc <dateCommand+0x1c>)
 8005dae:	0002      	movs	r2, r0
 8005db0:	0020      	movs	r0, r4
 8005db2:	f00d f9bf 	bl	8013134 <sprintf>
}
 8005db6:	2000      	movs	r0, #0
 8005db8:	bd10      	pop	{r4, pc}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	08018cb0 	.word	0x08018cb0

08005dc0 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dc2:	46ce      	mov	lr, r9
 8005dc4:	4647      	mov	r7, r8
 8005dc6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005dc8:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dce:	466a      	mov	r2, sp
 8005dd0:	2101      	movs	r1, #1
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dd2:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dd4:	0028      	movs	r0, r5
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dda:	f007 fded 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
 8005dde:	4b6b      	ldr	r3, [pc, #428]	; (8005f8c <getCommand+0x1cc>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005de0:	2204      	movs	r2, #4
 8005de2:	496b      	ldr	r1, [pc, #428]	; (8005f90 <getCommand+0x1d0>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005de4:	0004      	movs	r4, r0
 8005de6:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005de8:	f00d f9e8 	bl	80131bc <strncmp>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d119      	bne.n	8005e24 <getCommand+0x64>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8005df0:	9b00      	ldr	r3, [sp, #0]
 8005df2:	1d27      	adds	r7, r4, #4
 8005df4:	1f1d      	subs	r5, r3, #4
 8005df6:	002a      	movs	r2, r5
 8005df8:	4966      	ldr	r1, [pc, #408]	; (8005f94 <getCommand+0x1d4>)
 8005dfa:	0038      	movs	r0, r7
 8005dfc:	f00d f9de 	bl	80131bc <strncmp>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d121      	bne.n	8005e48 <getCommand+0x88>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8005e04:	4b64      	ldr	r3, [pc, #400]	; (8005f98 <getCommand+0x1d8>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b60      	cmp	r3, #96	; 0x60
 8005e0a:	d100      	bne.n	8005e0e <getCommand+0x4e>
 8005e0c:	e071      	b.n	8005ef2 <getCommand+0x132>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d069      	beq.n	8005ee6 <getCommand+0x126>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d100      	bne.n	8005e18 <getCommand+0x58>
 8005e16:	e096      	b.n	8005f46 <getCommand+0x186>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8005e18:	0022      	movs	r2, r4
 8005e1a:	4960      	ldr	r1, [pc, #384]	; (8005f9c <getCommand+0x1dc>)
 8005e1c:	0030      	movs	r0, r6
 8005e1e:	f00d f989 	bl	8013134 <sprintf>
 8005e22:	e00b      	b.n	8005e3c <getCommand+0x7c>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8005e24:	2205      	movs	r2, #5
 8005e26:	495e      	ldr	r1, [pc, #376]	; (8005fa0 <getCommand+0x1e0>)
 8005e28:	0020      	movs	r0, r4
 8005e2a:	f00d f9c7 	bl	80131bc <strncmp>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d03b      	beq.n	8005eaa <getCommand+0xea>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005e32:	2213      	movs	r2, #19
 8005e34:	495b      	ldr	r1, [pc, #364]	; (8005fa4 <getCommand+0x1e4>)
 8005e36:	0030      	movs	r0, r6
 8005e38:	f00c ff79 	bl	8012d2e <memcpy>
}
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	b003      	add	sp, #12
 8005e40:	bc0c      	pop	{r2, r3}
 8005e42:	4690      	mov	r8, r2
 8005e44:	4699      	mov	r9, r3
 8005e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8005e48:	002a      	movs	r2, r5
 8005e4a:	4957      	ldr	r1, [pc, #348]	; (8005fa8 <getCommand+0x1e8>)
 8005e4c:	0038      	movs	r0, r7
 8005e4e:	f00d f9b5 	bl	80131bc <strncmp>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	d041      	beq.n	8005eda <getCommand+0x11a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8005e56:	002a      	movs	r2, r5
 8005e58:	4954      	ldr	r1, [pc, #336]	; (8005fac <getCommand+0x1ec>)
 8005e5a:	0038      	movs	r0, r7
 8005e5c:	f00d f9ae 	bl	80131bc <strncmp>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d07d      	beq.n	8005f60 <getCommand+0x1a0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8005e64:	002a      	movs	r2, r5
 8005e66:	4952      	ldr	r1, [pc, #328]	; (8005fb0 <getCommand+0x1f0>)
 8005e68:	0038      	movs	r0, r7
 8005e6a:	f00d f9a7 	bl	80131bc <strncmp>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d07d      	beq.n	8005f6e <getCommand+0x1ae>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8005e72:	002a      	movs	r2, r5
 8005e74:	494f      	ldr	r1, [pc, #316]	; (8005fb4 <getCommand+0x1f4>)
 8005e76:	0038      	movs	r0, r7
 8005e78:	f00d f9a0 	bl	80131bc <strncmp>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d068      	beq.n	8005f52 <getCommand+0x192>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8005e80:	002a      	movs	r2, r5
 8005e82:	494d      	ldr	r1, [pc, #308]	; (8005fb8 <getCommand+0x1f8>)
 8005e84:	0038      	movs	r0, r7
 8005e86:	f00d f999 	bl	80131bc <strncmp>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d076      	beq.n	8005f7c <getCommand+0x1bc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8005e8e:	002a      	movs	r2, r5
 8005e90:	494a      	ldr	r1, [pc, #296]	; (8005fbc <getCommand+0x1fc>)
 8005e92:	0038      	movs	r0, r7
 8005e94:	f00d f992 	bl	80131bc <strncmp>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d1ca      	bne.n	8005e32 <getCommand+0x72>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8005e9c:	4b48      	ldr	r3, [pc, #288]	; (8005fc0 <getCommand+0x200>)
 8005e9e:	4949      	ldr	r1, [pc, #292]	; (8005fc4 <getCommand+0x204>)
 8005ea0:	795a      	ldrb	r2, [r3, #5]
 8005ea2:	0030      	movs	r0, r6
 8005ea4:	f00d f946 	bl	8013134 <sprintf>
 8005ea8:	e7c8      	b.n	8005e3c <getCommand+0x7c>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005eaa:	0028      	movs	r0, r5
 8005eac:	aa01      	add	r2, sp, #4
 8005eae:	2102      	movs	r1, #2
 8005eb0:	f007 fd82 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
 8005eb4:	2400      	movs	r4, #0
 8005eb6:	0007      	movs	r7, r0
 8005eb8:	4d43      	ldr	r5, [pc, #268]	; (8005fc8 <getCommand+0x208>)
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8005eba:	0029      	movs	r1, r5
 8005ebc:	0038      	movs	r0, r7
 8005ebe:	f7fa f921 	bl	8000104 <strcmp>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d01b      	beq.n	8005efe <getCommand+0x13e>
 8005ec6:	3401      	adds	r4, #1
 8005ec8:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8005eca:	2c0a      	cmp	r4, #10
 8005ecc:	d1f5      	bne.n	8005eba <getCommand+0xfa>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8005ece:	003a      	movs	r2, r7
 8005ed0:	493e      	ldr	r1, [pc, #248]	; (8005fcc <getCommand+0x20c>)
 8005ed2:	0030      	movs	r0, r6
 8005ed4:	f00d f92e 	bl	8013134 <sprintf>
			return pdFALSE;
 8005ed8:	e7b0      	b.n	8005e3c <getCommand+0x7c>
			if(BOSMessaging.trace == TRACE_BOTH)
 8005eda:	4b2f      	ldr	r3, [pc, #188]	; (8005f98 <getCommand+0x1d8>)
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d007      	beq.n	8005ef2 <getCommand+0x132>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d195      	bne.n	8005e12 <getCommand+0x52>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005ee6:	4a3a      	ldr	r2, [pc, #232]	; (8005fd0 <getCommand+0x210>)
 8005ee8:	493a      	ldr	r1, [pc, #232]	; (8005fd4 <getCommand+0x214>)
 8005eea:	0030      	movs	r0, r6
 8005eec:	f00d f922 	bl	8013134 <sprintf>
 8005ef0:	e7a4      	b.n	8005e3c <getCommand+0x7c>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005ef2:	4a39      	ldr	r2, [pc, #228]	; (8005fd8 <getCommand+0x218>)
 8005ef4:	4937      	ldr	r1, [pc, #220]	; (8005fd4 <getCommand+0x214>)
 8005ef6:	0030      	movs	r0, r6
 8005ef8:	f00d f91c 	bl	8013134 <sprintf>
 8005efc:	e79e      	b.n	8005e3c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8005efe:	003a      	movs	r2, r7
 8005f00:	4936      	ldr	r1, [pc, #216]	; (8005fdc <getCommand+0x21c>)
 8005f02:	0030      	movs	r0, r6
 8005f04:	f00d f916 	bl	8013134 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 8005f08:	4f35      	ldr	r7, [pc, #212]	; (8005fe0 <getCommand+0x220>)
 8005f0a:	783b      	ldrb	r3, [r7, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d095      	beq.n	8005e3c <getCommand+0x7c>
 8005f10:	2501      	movs	r5, #1
 8005f12:	4b34      	ldr	r3, [pc, #208]	; (8005fe4 <getCommand+0x224>)
 8005f14:	40a5      	lsls	r5, r4
 8005f16:	4698      	mov	r8, r3
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f18:	4b33      	ldr	r3, [pc, #204]	; (8005fe8 <getCommand+0x228>)
			for(j =1; j <= N; j++)						// N modules
 8005f1a:	2401      	movs	r4, #1
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f1c:	4699      	mov	r9, r3
 8005f1e:	e005      	b.n	8005f2c <getCommand+0x16c>
			for(j =1; j <= N; j++)						// N modules
 8005f20:	3401      	adds	r4, #1
 8005f22:	783b      	ldrb	r3, [r7, #0]
 8005f24:	b2e4      	uxtb	r4, r4
 8005f26:	42a3      	cmp	r3, r4
 8005f28:	d200      	bcs.n	8005f2c <getCommand+0x16c>
 8005f2a:	e787      	b.n	8005e3c <getCommand+0x7c>
				if(InGroup(j,i)){
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	1e63      	subs	r3, r4, #1
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	5ad3      	ldrh	r3, [r2, r3]
 8005f34:	421d      	tst	r5, r3
 8005f36:	d0f3      	beq.n	8005f20 <getCommand+0x160>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f38:	0023      	movs	r3, r4
 8005f3a:	0032      	movs	r2, r6
 8005f3c:	4649      	mov	r1, r9
 8005f3e:	0030      	movs	r0, r6
 8005f40:	f00d f8f8 	bl	8013134 <sprintf>
 8005f44:	e7ec      	b.n	8005f20 <getCommand+0x160>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005f46:	4a29      	ldr	r2, [pc, #164]	; (8005fec <getCommand+0x22c>)
 8005f48:	4922      	ldr	r1, [pc, #136]	; (8005fd4 <getCommand+0x214>)
 8005f4a:	0030      	movs	r0, r6
 8005f4c:	f00d f8f2 	bl	8013134 <sprintf>
 8005f50:	e774      	b.n	8005e3c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8005f52:	4b1b      	ldr	r3, [pc, #108]	; (8005fc0 <getCommand+0x200>)
 8005f54:	491b      	ldr	r1, [pc, #108]	; (8005fc4 <getCommand+0x204>)
 8005f56:	885a      	ldrh	r2, [r3, #2]
 8005f58:	0030      	movs	r0, r6
 8005f5a:	f00d f8eb 	bl	8013134 <sprintf>
 8005f5e:	e76d      	b.n	8005e3c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8005f60:	4b17      	ldr	r3, [pc, #92]	; (8005fc0 <getCommand+0x200>)
 8005f62:	4918      	ldr	r1, [pc, #96]	; (8005fc4 <getCommand+0x204>)
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	0030      	movs	r0, r6
 8005f68:	f00d f8e4 	bl	8013134 <sprintf>
 8005f6c:	e766      	b.n	8005e3c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8005f6e:	4b14      	ldr	r3, [pc, #80]	; (8005fc0 <getCommand+0x200>)
 8005f70:	4914      	ldr	r1, [pc, #80]	; (8005fc4 <getCommand+0x204>)
 8005f72:	881a      	ldrh	r2, [r3, #0]
 8005f74:	0030      	movs	r0, r6
 8005f76:	f00d f8dd 	bl	8013134 <sprintf>
 8005f7a:	e75f      	b.n	8005e3c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8005f7c:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <getCommand+0x200>)
 8005f7e:	4911      	ldr	r1, [pc, #68]	; (8005fc4 <getCommand+0x204>)
 8005f80:	791a      	ldrb	r2, [r3, #4]
 8005f82:	0030      	movs	r0, r6
 8005f84:	f00d f8d6 	bl	8013134 <sprintf>
 8005f88:	e758      	b.n	8005e3c <getCommand+0x7c>
 8005f8a:	46c0      	nop			; (mov r8, r8)
 8005f8c:	20001250 	.word	0x20001250
 8005f90:	08018cc8 	.word	0x08018cc8
 8005f94:	08018cd0 	.word	0x08018cd0
 8005f98:	20006d34 	.word	0x20006d34
 8005f9c:	08018d64 	.word	0x08018d64
 8005fa0:	08018d40 	.word	0x08018d40
 8005fa4:	08018d50 	.word	0x08018d50
 8005fa8:	08018ce8 	.word	0x08018ce8
 8005fac:	08018cf0 	.word	0x08018cf0
 8005fb0:	08018cfc 	.word	0x08018cfc
 8005fb4:	08018d08 	.word	0x08018d08
 8005fb8:	08018d18 	.word	0x08018d18
 8005fbc:	08018d2c 	.word	0x08018d2c
 8005fc0:	20006db4 	.word	0x20006db4
 8005fc4:	080184dc 	.word	0x080184dc
 8005fc8:	20000ae0 	.word	0x20000ae0
 8005fcc:	08018d84 	.word	0x08018d84
 8005fd0:	08018cdc 	.word	0x08018cdc
 8005fd4:	08017d5c 	.word	0x08017d5c
 8005fd8:	08017e80 	.word	0x08017e80
 8005fdc:	08018da0 	.word	0x08018da0
 8005fe0:	20000010 	.word	0x20000010
 8005fe4:	20000aac 	.word	0x20000aac
 8005fe8:	08018d48 	.word	0x08018d48
 8005fec:	08018ce0 	.word	0x08018ce0

08005ff0 <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005ff0:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ff2:	b570      	push	{r4, r5, r6, lr}
 8005ff4:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ff6:	2101      	movs	r1, #1
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ff8:	0006      	movs	r6, r0
 8005ffa:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ffc:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005ffe:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006000:	f007 fcda 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006004:	9d01      	ldr	r5, [sp, #4]
 8006006:	491f      	ldr	r1, [pc, #124]	; (8006084 <defaultCommand+0x94>)
 8006008:	002a      	movs	r2, r5
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800600a:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 800600c:	f00d f8d6 	bl	80131bc <strncmp>
 8006010:	2800      	cmp	r0, #0
 8006012:	d026      	beq.n	8006062 <defaultCommand+0x72>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006014:	002a      	movs	r2, r5
 8006016:	491c      	ldr	r1, [pc, #112]	; (8006088 <defaultCommand+0x98>)
 8006018:	0020      	movs	r0, r4
 800601a:	f00d f8cf 	bl	80131bc <strncmp>
 800601e:	2800      	cmp	r0, #0
 8006020:	d119      	bne.n	8006056 <defaultCommand+0x66>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006022:	2116      	movs	r1, #22
 8006024:	2200      	movs	r2, #0
 8006026:	20ff      	movs	r0, #255	; 0xff
 8006028:	f002 f878 	bl	800811c <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 800602c:	2202      	movs	r2, #2
 800602e:	4b17      	ldr	r3, [pc, #92]	; (800608c <defaultCommand+0x9c>)
		osDelay(100);
 8006030:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 8006032:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006034:	f007 fbb4 	bl	800d7a0 <osDelay>
		ClearEEportsDir();
 8006038:	f7fd fade 	bl	80035f8 <ClearEEportsDir>
		ClearROtopology();
 800603c:	f003 ff04 	bl	8009e48 <ClearROtopology>
		osDelay(100);
 8006040:	2064      	movs	r0, #100	; 0x64
 8006042:	f007 fbad 	bl	800d7a0 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006046:	2240      	movs	r2, #64	; 0x40
 8006048:	4911      	ldr	r1, [pc, #68]	; (8006090 <defaultCommand+0xa0>)
 800604a:	0030      	movs	r0, r6
 800604c:	f00c fe6f 	bl	8012d2e <memcpy>
}
 8006050:	2000      	movs	r0, #0
 8006052:	b002      	add	sp, #8
 8006054:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006056:	220f      	movs	r2, #15
 8006058:	490e      	ldr	r1, [pc, #56]	; (8006094 <defaultCommand+0xa4>)
 800605a:	0030      	movs	r0, r6
 800605c:	f00c fe67 	bl	8012d2e <memcpy>
 8006060:	e7f6      	b.n	8006050 <defaultCommand+0x60>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 8006062:	490d      	ldr	r1, [pc, #52]	; (8006098 <defaultCommand+0xa8>)
 8006064:	4b0d      	ldr	r3, [pc, #52]	; (800609c <defaultCommand+0xac>)
 8006066:	000a      	movs	r2, r1
 8006068:	cb13      	ldmia	r3!, {r0, r1, r4}
 800606a:	c213      	stmia	r2!, {r0, r1, r4}
 800606c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800606e:	c213      	stmia	r2!, {r0, r1, r4}
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006074:	f7fd fa7c 	bl	8003570 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006078:	2227      	movs	r2, #39	; 0x27
 800607a:	4909      	ldr	r1, [pc, #36]	; (80060a0 <defaultCommand+0xb0>)
 800607c:	0030      	movs	r0, r6
 800607e:	f00c fe56 	bl	8012d2e <memcpy>
 8006082:	e7e5      	b.n	8006050 <defaultCommand+0x60>
 8006084:	08018db4 	.word	0x08018db4
 8006088:	08018de4 	.word	0x08018de4
 800608c:	2000114e 	.word	0x2000114e
 8006090:	08018dfc 	.word	0x08018dfc
 8006094:	08018dec 	.word	0x08018dec
 8006098:	20006db4 	.word	0x20006db4
 800609c:	2000001c 	.word	0x2000001c
 80060a0:	08018dbc 	.word	0x08018dbc

080060a4 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a6:	46de      	mov	lr, fp
 80060a8:	4657      	mov	r7, sl
 80060aa:	464e      	mov	r6, r9
 80060ac:	4645      	mov	r5, r8
 80060ae:	b5e0      	push	{r5, r6, r7, lr}
 80060b0:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80060b2:	2300      	movs	r3, #0
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060b4:	b08f      	sub	sp, #60	; 0x3c
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060b6:	aa09      	add	r2, sp, #36	; 0x24
 80060b8:	2101      	movs	r1, #1
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060ba:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060bc:	0038      	movs	r0, r7
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80060be:	9309      	str	r3, [sp, #36]	; 0x24
 80060c0:	930a      	str	r3, [sp, #40]	; 0x28
 80060c2:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80060c4:	930c      	str	r3, [sp, #48]	; 0x30
 80060c6:	930d      	str	r3, [sp, #52]	; 0x34
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060c8:	f007 fc76 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
 80060cc:	4ccf      	ldr	r4, [pc, #828]	; (800640c <setCommand+0x368>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060ce:	2204      	movs	r2, #4
 80060d0:	49cf      	ldr	r1, [pc, #828]	; (8006410 <setCommand+0x36c>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060d2:	0006      	movs	r6, r0
 80060d4:	63a0      	str	r0, [r4, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060d6:	f00d f871 	bl	80131bc <strncmp>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d100      	bne.n	80060e0 <setCommand+0x3c>
 80060de:	e082      	b.n	80061e6 <setCommand+0x142>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 80060e0:	2204      	movs	r2, #4
 80060e2:	49cc      	ldr	r1, [pc, #816]	; (8006414 <setCommand+0x370>)
 80060e4:	0030      	movs	r0, r6
 80060e6:	f00d f869 	bl	80131bc <strncmp>
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d014      	beq.n	8006118 <setCommand+0x74>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 80060ee:	2204      	movs	r2, #4
 80060f0:	49c9      	ldr	r1, [pc, #804]	; (8006418 <setCommand+0x374>)
 80060f2:	0030      	movs	r0, r6
 80060f4:	f00d f862 	bl	80131bc <strncmp>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d100      	bne.n	80060fe <setCommand+0x5a>
 80060fc:	e0e0      	b.n	80062c0 <setCommand+0x21c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80060fe:	2213      	movs	r2, #19
 8006100:	49c6      	ldr	r1, [pc, #792]	; (800641c <setCommand+0x378>)
 8006102:	0028      	movs	r0, r5
 8006104:	f00c fe13 	bl	8012d2e <memcpy>
}
 8006108:	2000      	movs	r0, #0
 800610a:	b00f      	add	sp, #60	; 0x3c
 800610c:	bc3c      	pop	{r2, r3, r4, r5}
 800610e:	4690      	mov	r8, r2
 8006110:	4699      	mov	r9, r3
 8006112:	46a2      	mov	sl, r4
 8006114:	46ab      	mov	fp, r5
 8006116:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006118:	aa0a      	add	r2, sp, #40	; 0x28
 800611a:	2102      	movs	r1, #2
 800611c:	0038      	movs	r0, r7
 800611e:	f007 fc4b 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006122:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006124:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006126:	2103      	movs	r1, #3
 8006128:	0038      	movs	r0, r7
 800612a:	f007 fc45 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800612e:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006130:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006132:	2104      	movs	r1, #4
 8006134:	0038      	movs	r0, r7
 8006136:	f007 fc3f 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800613a:	aa0d      	add	r2, sp, #52	; 0x34
 800613c:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800613e:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006140:	0038      	movs	r0, r7
 8006142:	f007 fc39 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
 8006146:	64a0      	str	r0, [r4, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006148:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800614a:	f00c fb2a 	bl	80127a2 <atoi>
 800614e:	b2c3      	uxtb	r3, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006150:	6c20      	ldr	r0, [r4, #64]	; 0x40
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006152:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006154:	f00c fb25 	bl	80127a2 <atoi>
 8006158:	0007      	movs	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800615a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800615c:	f00c fb21 	bl	80127a2 <atoi>
		if(pcParameterString5 != NULL){
 8006160:	6ca6      	ldr	r6, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006162:	4682      	mov	sl, r0
		if(pcParameterString5 != NULL){
 8006164:	2e00      	cmp	r6, #0
 8006166:	d010      	beq.n	800618a <setCommand+0xe6>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006168:	2202      	movs	r2, #2
 800616a:	49ad      	ldr	r1, [pc, #692]	; (8006420 <setCommand+0x37c>)
 800616c:	0030      	movs	r0, r6
 800616e:	f00d f825 	bl	80131bc <strncmp>
 8006172:	2800      	cmp	r0, #0
 8006174:	d100      	bne.n	8006178 <setCommand+0xd4>
 8006176:	e145      	b.n	8006404 <setCommand+0x360>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006178:	2202      	movs	r2, #2
 800617a:	49aa      	ldr	r1, [pc, #680]	; (8006424 <setCommand+0x380>)
 800617c:	0030      	movs	r0, r6
 800617e:	f00d f81d 	bl	80131bc <strncmp>
 8006182:	2800      	cmp	r0, #0
 8006184:	d129      	bne.n	80061da <setCommand+0x136>
				temp84 =RTC_PM;
 8006186:	2302      	movs	r3, #2
 8006188:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 800618a:	464b      	mov	r3, r9
 800618c:	2b17      	cmp	r3, #23
 800618e:	d824      	bhi.n	80061da <setCommand+0x136>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006190:	b2ff      	uxtb	r7, r7
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006192:	2f3b      	cmp	r7, #59	; 0x3b
 8006194:	d821      	bhi.n	80061da <setCommand+0x136>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006196:	4653      	mov	r3, sl
 8006198:	b2de      	uxtb	r6, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 800619a:	2e3b      	cmp	r6, #59	; 0x3b
 800619c:	d81d      	bhi.n	80061da <setCommand+0x136>
				GetTimeDate();
 800619e:	f006 ff03 	bl	800cfa8 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 80061a2:	4ba1      	ldr	r3, [pc, #644]	; (8006428 <setCommand+0x384>)
 80061a4:	7d1a      	ldrb	r2, [r3, #20]
 80061a6:	7d59      	ldrb	r1, [r3, #21]
 80061a8:	7d98      	ldrb	r0, [r3, #22]
 80061aa:	4694      	mov	ip, r2
 80061ac:	8b1a      	ldrh	r2, [r3, #24]
 80061ae:	7b1b      	ldrb	r3, [r3, #12]
 80061b0:	9701      	str	r7, [sp, #4]
 80061b2:	b25b      	sxtb	r3, r3
 80061b4:	9304      	str	r3, [sp, #16]
 80061b6:	4643      	mov	r3, r8
 80061b8:	9303      	str	r3, [sp, #12]
 80061ba:	464b      	mov	r3, r9
 80061bc:	9600      	str	r6, [sp, #0]
 80061be:	9302      	str	r3, [sp, #8]
 80061c0:	4663      	mov	r3, ip
 80061c2:	f006 fe97 	bl	800cef4 <BOS_CalendarConfig>
 80061c6:	4681      	mov	r9, r0
	if(result == BOS_OK){
 80061c8:	464b      	mov	r3, r9
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d100      	bne.n	80061d0 <setCommand+0x12c>
 80061ce:	e24d      	b.n	800666c <setCommand+0x5c8>
	else if(result == BOS_ERR_WrongParam)
 80061d0:	464b      	mov	r3, r9
 80061d2:	2b67      	cmp	r3, #103	; 0x67
 80061d4:	d093      	beq.n	80060fe <setCommand+0x5a>
	else if(result == BOS_ERR_WrongValue)
 80061d6:	2b68      	cmp	r3, #104	; 0x68
 80061d8:	d196      	bne.n	8006108 <setCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80061da:	220f      	movs	r2, #15
 80061dc:	4993      	ldr	r1, [pc, #588]	; (800642c <setCommand+0x388>)
 80061de:	0028      	movs	r0, r5
 80061e0:	f00c fda5 	bl	8012d2e <memcpy>
 80061e4:	e790      	b.n	8006108 <setCommand+0x64>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80061e6:	aa0a      	add	r2, sp, #40	; 0x28
 80061e8:	2102      	movs	r1, #2
 80061ea:	0038      	movs	r0, r7
 80061ec:	f007 fbe4 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80061f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80061f2:	4680      	mov	r8, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80061f4:	1d1e      	adds	r6, r3, #4
 80061f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80061f8:	63e0      	str	r0, [r4, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80061fa:	1f1f      	subs	r7, r3, #4
 80061fc:	4b8c      	ldr	r3, [pc, #560]	; (8006430 <setCommand+0x38c>)
 80061fe:	003a      	movs	r2, r7
 8006200:	0019      	movs	r1, r3
 8006202:	0030      	movs	r0, r6
 8006204:	4699      	mov	r9, r3
 8006206:	f00c ffd9 	bl	80131bc <strncmp>
 800620a:	2800      	cmp	r0, #0
 800620c:	d128      	bne.n	8006260 <setCommand+0x1bc>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 800620e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006210:	4988      	ldr	r1, [pc, #544]	; (8006434 <setCommand+0x390>)
 8006212:	0032      	movs	r2, r6
 8006214:	4640      	mov	r0, r8
 8006216:	f00c ffd1 	bl	80131bc <strncmp>
 800621a:	2800      	cmp	r0, #0
 800621c:	d100      	bne.n	8006220 <setCommand+0x17c>
 800621e:	e21a      	b.n	8006656 <setCommand+0x5b2>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006220:	0032      	movs	r2, r6
 8006222:	4985      	ldr	r1, [pc, #532]	; (8006438 <setCommand+0x394>)
 8006224:	4640      	mov	r0, r8
 8006226:	f00c ffc9 	bl	80131bc <strncmp>
 800622a:	2800      	cmp	r0, #0
 800622c:	d100      	bne.n	8006230 <setCommand+0x18c>
 800622e:	e256      	b.n	80066de <setCommand+0x63a>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006230:	0032      	movs	r2, r6
 8006232:	4982      	ldr	r1, [pc, #520]	; (800643c <setCommand+0x398>)
 8006234:	4640      	mov	r0, r8
 8006236:	f00c ffc1 	bl	80131bc <strncmp>
 800623a:	2800      	cmp	r0, #0
 800623c:	d100      	bne.n	8006240 <setCommand+0x19c>
 800623e:	e222      	b.n	8006686 <setCommand+0x5e2>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006240:	0032      	movs	r2, r6
 8006242:	497f      	ldr	r1, [pc, #508]	; (8006440 <setCommand+0x39c>)
 8006244:	4640      	mov	r0, r8
 8006246:	f00c ffb9 	bl	80131bc <strncmp>
 800624a:	2800      	cmp	r0, #0
 800624c:	d1c5      	bne.n	80061da <setCommand+0x136>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 800624e:	4b7d      	ldr	r3, [pc, #500]	; (8006444 <setCommand+0x3a0>)
 8006250:	7018      	strb	r0, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006252:	208a      	movs	r0, #138	; 0x8a
 8006254:	7859      	ldrb	r1, [r3, #1]
 8006256:	0040      	lsls	r0, r0, #1
 8006258:	0209      	lsls	r1, r1, #8
 800625a:	f005 f955 	bl	800b508 <EE_WriteVariable>
 800625e:	e205      	b.n	800666c <setCommand+0x5c8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006260:	003a      	movs	r2, r7
 8006262:	4979      	ldr	r1, [pc, #484]	; (8006448 <setCommand+0x3a4>)
 8006264:	0030      	movs	r0, r6
 8006266:	f00c ffa9 	bl	80131bc <strncmp>
 800626a:	2800      	cmp	r0, #0
 800626c:	d000      	beq.n	8006270 <setCommand+0x1cc>
 800626e:	e08d      	b.n	800638c <setCommand+0x2e8>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006270:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006272:	4970      	ldr	r1, [pc, #448]	; (8006434 <setCommand+0x390>)
 8006274:	0032      	movs	r2, r6
 8006276:	4640      	mov	r0, r8
 8006278:	f00c ffa0 	bl	80131bc <strncmp>
 800627c:	2800      	cmp	r0, #0
 800627e:	d100      	bne.n	8006282 <setCommand+0x1de>
 8006280:	e239      	b.n	80066f6 <setCommand+0x652>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006282:	0032      	movs	r2, r6
 8006284:	496c      	ldr	r1, [pc, #432]	; (8006438 <setCommand+0x394>)
 8006286:	4640      	mov	r0, r8
 8006288:	f00c ff98 	bl	80131bc <strncmp>
 800628c:	2800      	cmp	r0, #0
 800628e:	d100      	bne.n	8006292 <setCommand+0x1ee>
 8006290:	e213      	b.n	80066ba <setCommand+0x616>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006292:	0032      	movs	r2, r6
 8006294:	4649      	mov	r1, r9
 8006296:	4640      	mov	r0, r8
 8006298:	f00c ff90 	bl	80131bc <strncmp>
 800629c:	2800      	cmp	r0, #0
 800629e:	d100      	bne.n	80062a2 <setCommand+0x1fe>
 80062a0:	e274      	b.n	800678c <setCommand+0x6e8>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80062a2:	0032      	movs	r2, r6
 80062a4:	4966      	ldr	r1, [pc, #408]	; (8006440 <setCommand+0x39c>)
 80062a6:	4640      	mov	r0, r8
 80062a8:	f00c ff88 	bl	80131bc <strncmp>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d194      	bne.n	80061da <setCommand+0x136>
				BOSMessaging.trace =TRACE_NONE;
 80062b0:	4b64      	ldr	r3, [pc, #400]	; (8006444 <setCommand+0x3a0>)
 80062b2:	7058      	strb	r0, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80062b4:	3015      	adds	r0, #21
 80062b6:	7819      	ldrb	r1, [r3, #0]
 80062b8:	30ff      	adds	r0, #255	; 0xff
 80062ba:	f005 f925 	bl	800b508 <EE_WriteVariable>
 80062be:	e1d5      	b.n	800666c <setCommand+0x5c8>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80062c0:	aa0a      	add	r2, sp, #40	; 0x28
 80062c2:	2102      	movs	r1, #2
 80062c4:	0038      	movs	r0, r7
 80062c6:	f007 fb77 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062ca:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80062cc:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062ce:	2103      	movs	r1, #3
 80062d0:	0038      	movs	r0, r7
 80062d2:	f007 fb71 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80062d6:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062d8:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80062da:	2104      	movs	r1, #4
 80062dc:	0038      	movs	r0, r7
 80062de:	f007 fb6b 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80062e2:	aa0d      	add	r2, sp, #52	; 0x34
 80062e4:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80062e6:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80062e8:	0038      	movs	r0, r7
 80062ea:	f007 fb65 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
 80062ee:	64a0      	str	r0, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 80062f0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80062f2:	f00c fa56 	bl	80127a2 <atoi>
 80062f6:	4680      	mov	r8, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 80062f8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80062fa:	f00c fa52 	bl	80127a2 <atoi>
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80062fe:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006300:	4682      	mov	sl, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006302:	2206      	movs	r2, #6
 8006304:	4951      	ldr	r1, [pc, #324]	; (800644c <setCommand+0x3a8>)
 8006306:	0038      	movs	r0, r7
 8006308:	f00c ff58 	bl	80131bc <strncmp>
 800630c:	2800      	cmp	r0, #0
 800630e:	d100      	bne.n	8006312 <setCommand+0x26e>
 8006310:	e0b6      	b.n	8006480 <setCommand+0x3dc>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006312:	2207      	movs	r2, #7
 8006314:	494e      	ldr	r1, [pc, #312]	; (8006450 <setCommand+0x3ac>)
 8006316:	0038      	movs	r0, r7
 8006318:	f00c ff50 	bl	80131bc <strncmp>
 800631c:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800631e:	9006      	str	r0, [sp, #24]
 8006320:	2207      	movs	r2, #7
 8006322:	494c      	ldr	r1, [pc, #304]	; (8006454 <setCommand+0x3b0>)
 8006324:	0030      	movs	r0, r6
 8006326:	f00c ff49 	bl	80131bc <strncmp>
 800632a:	9b06      	ldr	r3, [sp, #24]
 800632c:	4681      	mov	r9, r0
 800632e:	9007      	str	r0, [sp, #28]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d100      	bne.n	8006336 <setCommand+0x292>
 8006334:	e1a4      	b.n	8006680 <setCommand+0x5dc>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006336:	2209      	movs	r2, #9
 8006338:	4947      	ldr	r1, [pc, #284]	; (8006458 <setCommand+0x3b4>)
 800633a:	0038      	movs	r0, r7
 800633c:	f00c ff3e 	bl	80131bc <strncmp>
 8006340:	2800      	cmp	r0, #0
 8006342:	d100      	bne.n	8006346 <setCommand+0x2a2>
 8006344:	e211      	b.n	800676a <setCommand+0x6c6>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006346:	2208      	movs	r2, #8
 8006348:	4944      	ldr	r1, [pc, #272]	; (800645c <setCommand+0x3b8>)
 800634a:	0038      	movs	r0, r7
 800634c:	f00c ff36 	bl	80131bc <strncmp>
 8006350:	2800      	cmp	r0, #0
 8006352:	d100      	bne.n	8006356 <setCommand+0x2b2>
 8006354:	e220      	b.n	8006798 <setCommand+0x6f4>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006356:	2206      	movs	r2, #6
 8006358:	4941      	ldr	r1, [pc, #260]	; (8006460 <setCommand+0x3bc>)
 800635a:	0038      	movs	r0, r7
 800635c:	f00c ff2e 	bl	80131bc <strncmp>
 8006360:	2800      	cmp	r0, #0
 8006362:	d100      	bne.n	8006366 <setCommand+0x2c2>
 8006364:	e22e      	b.n	80067c4 <setCommand+0x720>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006366:	2208      	movs	r2, #8
 8006368:	493e      	ldr	r1, [pc, #248]	; (8006464 <setCommand+0x3c0>)
 800636a:	0038      	movs	r0, r7
 800636c:	f00c ff26 	bl	80131bc <strncmp>
 8006370:	2800      	cmp	r0, #0
 8006372:	d100      	bne.n	8006376 <setCommand+0x2d2>
 8006374:	e229      	b.n	80067ca <setCommand+0x726>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006376:	2206      	movs	r2, #6
 8006378:	493b      	ldr	r1, [pc, #236]	; (8006468 <setCommand+0x3c4>)
 800637a:	0038      	movs	r0, r7
 800637c:	f00c ff1e 	bl	80131bc <strncmp>
 8006380:	2800      	cmp	r0, #0
 8006382:	d000      	beq.n	8006386 <setCommand+0x2e2>
 8006384:	e262      	b.n	800684c <setCommand+0x7a8>
			temp81 =SUNDAY;
 8006386:	2307      	movs	r3, #7
 8006388:	469b      	mov	fp, r3
 800638a:	e082      	b.n	8006492 <setCommand+0x3ee>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800638c:	003a      	movs	r2, r7
 800638e:	4937      	ldr	r1, [pc, #220]	; (800646c <setCommand+0x3c8>)
 8006390:	0030      	movs	r0, r6
 8006392:	f00c ff13 	bl	80131bc <strncmp>
 8006396:	4681      	mov	r9, r0
 8006398:	2800      	cmp	r0, #0
 800639a:	d100      	bne.n	800639e <setCommand+0x2fa>
 800639c:	e1b7      	b.n	800670e <setCommand+0x66a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800639e:	003a      	movs	r2, r7
 80063a0:	4933      	ldr	r1, [pc, #204]	; (8006470 <setCommand+0x3cc>)
 80063a2:	0030      	movs	r0, r6
 80063a4:	f00c ff0a 	bl	80131bc <strncmp>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d100      	bne.n	80063ae <setCommand+0x30a>
 80063ac:	e177      	b.n	800669e <setCommand+0x5fa>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80063ae:	003a      	movs	r2, r7
 80063b0:	4930      	ldr	r1, [pc, #192]	; (8006474 <setCommand+0x3d0>)
 80063b2:	0030      	movs	r0, r6
 80063b4:	f00c ff02 	bl	80131bc <strncmp>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d100      	bne.n	80063be <setCommand+0x31a>
 80063bc:	e1d8      	b.n	8006770 <setCommand+0x6cc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80063be:	003a      	movs	r2, r7
 80063c0:	492d      	ldr	r1, [pc, #180]	; (8006478 <setCommand+0x3d4>)
 80063c2:	0030      	movs	r0, r6
 80063c4:	f00c fefa 	bl	80131bc <strncmp>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d100      	bne.n	80063ce <setCommand+0x32a>
 80063cc:	e1e7      	b.n	800679e <setCommand+0x6fa>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80063ce:	003a      	movs	r2, r7
 80063d0:	492a      	ldr	r1, [pc, #168]	; (800647c <setCommand+0x3d8>)
 80063d2:	0030      	movs	r0, r6
 80063d4:	f00c fef2 	bl	80131bc <strncmp>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d000      	beq.n	80063de <setCommand+0x33a>
 80063dc:	e68f      	b.n	80060fe <setCommand+0x5a>
			temp16 =atoi((const char* )pcParameterString2);
 80063de:	4640      	mov	r0, r8
 80063e0:	f00c f9df 	bl	80127a2 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80063e4:	1e43      	subs	r3, r0, #1
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2bfe      	cmp	r3, #254	; 0xfe
 80063ea:	d900      	bls.n	80063ee <setCommand+0x34a>
 80063ec:	e6f5      	b.n	80061da <setCommand+0x136>
				BOS.buttons.maxInterClickTime =temp16;
 80063ee:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <setCommand+0x384>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80063f0:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 80063f2:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80063f4:	0200      	lsls	r0, r0, #8
 80063f6:	4301      	orrs	r1, r0
 80063f8:	2018      	movs	r0, #24
 80063fa:	b289      	uxth	r1, r1
 80063fc:	30ff      	adds	r0, #255	; 0xff
 80063fe:	f005 f883 	bl	800b508 <EE_WriteVariable>
 8006402:	e133      	b.n	800666c <setCommand+0x5c8>
				temp84 =RTC_AM;
 8006404:	2301      	movs	r3, #1
 8006406:	4698      	mov	r8, r3
 8006408:	e6bf      	b.n	800618a <setCommand+0xe6>
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	20001250 	.word	0x20001250
 8006410:	08018cc8 	.word	0x08018cc8
 8006414:	08018f40 	.word	0x08018f40
 8006418:	08018f50 	.word	0x08018f50
 800641c:	08018d50 	.word	0x08018d50
 8006420:	08018f48 	.word	0x08018f48
 8006424:	08018f4c 	.word	0x08018f4c
 8006428:	20006db4 	.word	0x20006db4
 800642c:	08018dec 	.word	0x08018dec
 8006430:	08018cd0 	.word	0x08018cd0
 8006434:	08017e80 	.word	0x08017e80
 8006438:	08018e3c 	.word	0x08018e3c
 800643c:	08018e44 	.word	0x08018e44
 8006440:	08018ce0 	.word	0x08018ce0
 8006444:	20006d34 	.word	0x20006d34
 8006448:	08018ce8 	.word	0x08018ce8
 800644c:	08018f58 	.word	0x08018f58
 8006450:	08018f60 	.word	0x08018f60
 8006454:	08018f68 	.word	0x08018f68
 8006458:	08018f70 	.word	0x08018f70
 800645c:	08018f7c 	.word	0x08018f7c
 8006460:	08018f88 	.word	0x08018f88
 8006464:	08018f90 	.word	0x08018f90
 8006468:	08018f9c 	.word	0x08018f9c
 800646c:	08018cf0 	.word	0x08018cf0
 8006470:	08018cfc 	.word	0x08018cfc
 8006474:	08018d08 	.word	0x08018d08
 8006478:	08018d18 	.word	0x08018d18
 800647c:	08018d2c 	.word	0x08018d2c
 8006480:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8006482:	2207      	movs	r2, #7
 8006484:	49d3      	ldr	r1, [pc, #844]	; (80067d4 <setCommand+0x730>)
 8006486:	0030      	movs	r0, r6
 8006488:	f00c fe98 	bl	80131bc <strncmp>
			temp81 =MONDAY;
 800648c:	2301      	movs	r3, #1
 800648e:	4681      	mov	r9, r0
 8006490:	469b      	mov	fp, r3
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006492:	464b      	mov	r3, r9
			temp82 =JANUARY;
 8006494:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006496:	2b00      	cmp	r3, #0
 8006498:	d123      	bne.n	80064e2 <setCommand+0x43e>
		temp83 =atoi((const char* )pcParameterString4);		// day
 800649a:	4643      	mov	r3, r8
 800649c:	b2de      	uxtb	r6, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 800649e:	1e73      	subs	r3, r6, #1
 80064a0:	2b1e      	cmp	r3, #30
 80064a2:	d900      	bls.n	80064a6 <setCommand+0x402>
 80064a4:	e699      	b.n	80061da <setCommand+0x136>
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064a6:	4653      	mov	r3, sl
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	469a      	mov	sl, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80064ac:	4bca      	ldr	r3, [pc, #808]	; (80067d8 <setCommand+0x734>)
 80064ae:	4453      	add	r3, sl
 80064b0:	2b64      	cmp	r3, #100	; 0x64
 80064b2:	d900      	bls.n	80064b6 <setCommand+0x412>
 80064b4:	e691      	b.n	80061da <setCommand+0x136>
				GetTimeDate();
 80064b6:	f006 fd77 	bl	800cfa8 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80064ba:	220c      	movs	r2, #12
 80064bc:	4bc7      	ldr	r3, [pc, #796]	; (80067dc <setCommand+0x738>)
 80064be:	0031      	movs	r1, r6
 80064c0:	569a      	ldrsb	r2, [r3, r2]
 80064c2:	0038      	movs	r0, r7
 80064c4:	9204      	str	r2, [sp, #16]
 80064c6:	7cda      	ldrb	r2, [r3, #19]
 80064c8:	9203      	str	r2, [sp, #12]
 80064ca:	7c9a      	ldrb	r2, [r3, #18]
 80064cc:	9202      	str	r2, [sp, #8]
 80064ce:	7c5a      	ldrb	r2, [r3, #17]
 80064d0:	9201      	str	r2, [sp, #4]
 80064d2:	7c1b      	ldrb	r3, [r3, #16]
 80064d4:	4652      	mov	r2, sl
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	465b      	mov	r3, fp
 80064da:	f006 fd0b 	bl	800cef4 <BOS_CalendarConfig>
 80064de:	4681      	mov	r9, r0
 80064e0:	e672      	b.n	80061c8 <setCommand+0x124>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80064e2:	2202      	movs	r2, #2
 80064e4:	49be      	ldr	r1, [pc, #760]	; (80067e0 <setCommand+0x73c>)
 80064e6:	0030      	movs	r0, r6
 80064e8:	f00c fe68 	bl	80131bc <strncmp>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d0d4      	beq.n	800649a <setCommand+0x3f6>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 80064f0:	2208      	movs	r2, #8
 80064f2:	49bc      	ldr	r1, [pc, #752]	; (80067e4 <setCommand+0x740>)
 80064f4:	0030      	movs	r0, r6
 80064f6:	f00c fe61 	bl	80131bc <strncmp>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d100      	bne.n	8006500 <setCommand+0x45c>
 80064fe:	e1c8      	b.n	8006892 <setCommand+0x7ee>
 8006500:	2202      	movs	r2, #2
 8006502:	49b9      	ldr	r1, [pc, #740]	; (80067e8 <setCommand+0x744>)
 8006504:	0030      	movs	r0, r6
 8006506:	f00c fe59 	bl	80131bc <strncmp>
 800650a:	2800      	cmp	r0, #0
 800650c:	d100      	bne.n	8006510 <setCommand+0x46c>
 800650e:	e1c0      	b.n	8006892 <setCommand+0x7ee>
 8006510:	2300      	movs	r3, #0
 8006512:	4699      	mov	r9, r3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006514:	2205      	movs	r2, #5
 8006516:	49b5      	ldr	r1, [pc, #724]	; (80067ec <setCommand+0x748>)
 8006518:	0030      	movs	r0, r6
 800651a:	f00c fe4f 	bl	80131bc <strncmp>
 800651e:	2800      	cmp	r0, #0
 8006520:	d100      	bne.n	8006524 <setCommand+0x480>
 8006522:	e0d6      	b.n	80066d2 <setCommand+0x62e>
 8006524:	2202      	movs	r2, #2
 8006526:	49b2      	ldr	r1, [pc, #712]	; (80067f0 <setCommand+0x74c>)
 8006528:	0030      	movs	r0, r6
 800652a:	f00c fe47 	bl	80131bc <strncmp>
 800652e:	2800      	cmp	r0, #0
 8006530:	d100      	bne.n	8006534 <setCommand+0x490>
 8006532:	e0ce      	b.n	80066d2 <setCommand+0x62e>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006534:	2205      	movs	r2, #5
 8006536:	49af      	ldr	r1, [pc, #700]	; (80067f4 <setCommand+0x750>)
 8006538:	0030      	movs	r0, r6
 800653a:	f00c fe3f 	bl	80131bc <strncmp>
 800653e:	2800      	cmp	r0, #0
 8006540:	d100      	bne.n	8006544 <setCommand+0x4a0>
 8006542:	e145      	b.n	80067d0 <setCommand+0x72c>
 8006544:	2202      	movs	r2, #2
 8006546:	49ac      	ldr	r1, [pc, #688]	; (80067f8 <setCommand+0x754>)
 8006548:	0030      	movs	r0, r6
 800654a:	f00c fe37 	bl	80131bc <strncmp>
 800654e:	2800      	cmp	r0, #0
 8006550:	d100      	bne.n	8006554 <setCommand+0x4b0>
 8006552:	e13d      	b.n	80067d0 <setCommand+0x72c>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006554:	2203      	movs	r2, #3
 8006556:	49a9      	ldr	r1, [pc, #676]	; (80067fc <setCommand+0x758>)
 8006558:	0030      	movs	r0, r6
 800655a:	f00c fe2f 	bl	80131bc <strncmp>
 800655e:	2800      	cmp	r0, #0
 8006560:	d100      	bne.n	8006564 <setCommand+0x4c0>
 8006562:	e192      	b.n	800688a <setCommand+0x7e6>
 8006564:	2202      	movs	r2, #2
 8006566:	49a6      	ldr	r1, [pc, #664]	; (8006800 <setCommand+0x75c>)
 8006568:	0030      	movs	r0, r6
 800656a:	f00c fe27 	bl	80131bc <strncmp>
 800656e:	2800      	cmp	r0, #0
 8006570:	d100      	bne.n	8006574 <setCommand+0x4d0>
 8006572:	e18a      	b.n	800688a <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006574:	2204      	movs	r2, #4
 8006576:	49a3      	ldr	r1, [pc, #652]	; (8006804 <setCommand+0x760>)
 8006578:	0030      	movs	r0, r6
 800657a:	f00c fe1f 	bl	80131bc <strncmp>
 800657e:	2800      	cmp	r0, #0
 8006580:	d100      	bne.n	8006584 <setCommand+0x4e0>
 8006582:	e184      	b.n	800688e <setCommand+0x7ea>
 8006584:	2202      	movs	r2, #2
 8006586:	49a0      	ldr	r1, [pc, #640]	; (8006808 <setCommand+0x764>)
 8006588:	0030      	movs	r0, r6
 800658a:	f00c fe17 	bl	80131bc <strncmp>
 800658e:	2800      	cmp	r0, #0
 8006590:	d100      	bne.n	8006594 <setCommand+0x4f0>
 8006592:	e17c      	b.n	800688e <setCommand+0x7ea>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006594:	2204      	movs	r2, #4
 8006596:	499d      	ldr	r1, [pc, #628]	; (800680c <setCommand+0x768>)
 8006598:	0030      	movs	r0, r6
 800659a:	f00c fe0f 	bl	80131bc <strncmp>
 800659e:	2800      	cmp	r0, #0
 80065a0:	d100      	bne.n	80065a4 <setCommand+0x500>
 80065a2:	e178      	b.n	8006896 <setCommand+0x7f2>
 80065a4:	2202      	movs	r2, #2
 80065a6:	499a      	ldr	r1, [pc, #616]	; (8006810 <setCommand+0x76c>)
 80065a8:	0030      	movs	r0, r6
 80065aa:	f00c fe07 	bl	80131bc <strncmp>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d100      	bne.n	80065b4 <setCommand+0x510>
 80065b2:	e170      	b.n	8006896 <setCommand+0x7f2>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 80065b4:	2205      	movs	r2, #5
 80065b6:	4997      	ldr	r1, [pc, #604]	; (8006814 <setCommand+0x770>)
 80065b8:	0030      	movs	r0, r6
 80065ba:	f00c fdff 	bl	80131bc <strncmp>
 80065be:	2800      	cmp	r0, #0
 80065c0:	d100      	bne.n	80065c4 <setCommand+0x520>
 80065c2:	e170      	b.n	80068a6 <setCommand+0x802>
 80065c4:	2202      	movs	r2, #2
 80065c6:	4994      	ldr	r1, [pc, #592]	; (8006818 <setCommand+0x774>)
 80065c8:	0030      	movs	r0, r6
 80065ca:	f00c fdf7 	bl	80131bc <strncmp>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d100      	bne.n	80065d4 <setCommand+0x530>
 80065d2:	e168      	b.n	80068a6 <setCommand+0x802>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 80065d4:	2209      	movs	r2, #9
 80065d6:	4991      	ldr	r1, [pc, #580]	; (800681c <setCommand+0x778>)
 80065d8:	0030      	movs	r0, r6
 80065da:	f00c fdef 	bl	80131bc <strncmp>
 80065de:	2800      	cmp	r0, #0
 80065e0:	d100      	bne.n	80065e4 <setCommand+0x540>
 80065e2:	e15e      	b.n	80068a2 <setCommand+0x7fe>
 80065e4:	2202      	movs	r2, #2
 80065e6:	498e      	ldr	r1, [pc, #568]	; (8006820 <setCommand+0x77c>)
 80065e8:	0030      	movs	r0, r6
 80065ea:	f00c fde7 	bl	80131bc <strncmp>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d100      	bne.n	80065f4 <setCommand+0x550>
 80065f2:	e156      	b.n	80068a2 <setCommand+0x7fe>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 80065f4:	2207      	movs	r2, #7
 80065f6:	498b      	ldr	r1, [pc, #556]	; (8006824 <setCommand+0x780>)
 80065f8:	0030      	movs	r0, r6
 80065fa:	f00c fddf 	bl	80131bc <strncmp>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d100      	bne.n	8006604 <setCommand+0x560>
 8006602:	e14c      	b.n	800689e <setCommand+0x7fa>
 8006604:	2202      	movs	r2, #2
 8006606:	4988      	ldr	r1, [pc, #544]	; (8006828 <setCommand+0x784>)
 8006608:	0030      	movs	r0, r6
 800660a:	f00c fdd7 	bl	80131bc <strncmp>
 800660e:	2800      	cmp	r0, #0
 8006610:	d100      	bne.n	8006614 <setCommand+0x570>
 8006612:	e144      	b.n	800689e <setCommand+0x7fa>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006614:	2208      	movs	r2, #8
 8006616:	4985      	ldr	r1, [pc, #532]	; (800682c <setCommand+0x788>)
 8006618:	0030      	movs	r0, r6
 800661a:	f00c fdcf 	bl	80131bc <strncmp>
 800661e:	2800      	cmp	r0, #0
 8006620:	d100      	bne.n	8006624 <setCommand+0x580>
 8006622:	e13a      	b.n	800689a <setCommand+0x7f6>
 8006624:	2202      	movs	r2, #2
 8006626:	4982      	ldr	r1, [pc, #520]	; (8006830 <setCommand+0x78c>)
 8006628:	0030      	movs	r0, r6
 800662a:	f00c fdc7 	bl	80131bc <strncmp>
 800662e:	2800      	cmp	r0, #0
 8006630:	d100      	bne.n	8006634 <setCommand+0x590>
 8006632:	e132      	b.n	800689a <setCommand+0x7f6>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006634:	2208      	movs	r2, #8
 8006636:	497f      	ldr	r1, [pc, #508]	; (8006834 <setCommand+0x790>)
 8006638:	0030      	movs	r0, r6
 800663a:	f00c fdbf 	bl	80131bc <strncmp>
 800663e:	2800      	cmp	r0, #0
 8006640:	d007      	beq.n	8006652 <setCommand+0x5ae>
 8006642:	2202      	movs	r2, #2
 8006644:	497c      	ldr	r1, [pc, #496]	; (8006838 <setCommand+0x794>)
 8006646:	0030      	movs	r0, r6
 8006648:	f00c fdb8 	bl	80131bc <strncmp>
 800664c:	2800      	cmp	r0, #0
 800664e:	d000      	beq.n	8006652 <setCommand+0x5ae>
 8006650:	e5c3      	b.n	80061da <setCommand+0x136>
			temp82 =DECEMBER;
 8006652:	270c      	movs	r7, #12
 8006654:	e03e      	b.n	80066d4 <setCommand+0x630>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006656:	2260      	movs	r2, #96	; 0x60
 8006658:	4b78      	ldr	r3, [pc, #480]	; (800683c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800665a:	3015      	adds	r0, #21
 800665c:	7859      	ldrb	r1, [r3, #1]
				BOSMessaging.response = BOS_RESPONSE_ALL;
 800665e:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006660:	2360      	movs	r3, #96	; 0x60
 8006662:	0209      	lsls	r1, r1, #8
 8006664:	4319      	orrs	r1, r3
 8006666:	30ff      	adds	r0, #255	; 0xff
 8006668:	f004 ff4e 	bl	800b508 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800666c:	2300      	movs	r3, #0
 800666e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006670:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006672:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006674:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006676:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006678:	4971      	ldr	r1, [pc, #452]	; (8006840 <setCommand+0x79c>)
 800667a:	f00c fd5b 	bl	8013134 <sprintf>
	return pdFALSE;
 800667e:	e543      	b.n	8006108 <setCommand+0x64>
			temp81 =TUESDAY;
 8006680:	2302      	movs	r3, #2
 8006682:	469b      	mov	fp, r3
 8006684:	e705      	b.n	8006492 <setCommand+0x3ee>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 8006686:	2240      	movs	r2, #64	; 0x40
 8006688:	4b6c      	ldr	r3, [pc, #432]	; (800683c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800668a:	3015      	adds	r0, #21
				BOSMessaging.response = BOS_RESPONSE_CLI;
 800668c:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800668e:	7859      	ldrb	r1, [r3, #1]
 8006690:	2340      	movs	r3, #64	; 0x40
 8006692:	0209      	lsls	r1, r1, #8
 8006694:	4319      	orrs	r1, r3
 8006696:	30ff      	adds	r0, #255	; 0xff
 8006698:	f004 ff36 	bl	800b508 <EE_WriteVariable>
 800669c:	e7e6      	b.n	800666c <setCommand+0x5c8>
			temp16 =atoi((const char* )pcParameterString2);
 800669e:	4640      	mov	r0, r8
 80066a0:	f00c f87f 	bl	80127a2 <atoi>
 80066a4:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80066a6:	2900      	cmp	r1, #0
 80066a8:	d100      	bne.n	80066ac <setCommand+0x608>
 80066aa:	e596      	b.n	80061da <setCommand+0x136>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066ac:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 80066ae:	4b4b      	ldr	r3, [pc, #300]	; (80067dc <setCommand+0x738>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066b0:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 80066b2:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066b4:	f004 ff28 	bl	800b508 <EE_WriteVariable>
 80066b8:	e7d8      	b.n	800666c <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_MESSAGE;
 80066ba:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066bc:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_MESSAGE;
 80066be:	4b5f      	ldr	r3, [pc, #380]	; (800683c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066c0:	0049      	lsls	r1, r1, #1
				BOSMessaging.trace =TRACE_MESSAGE;
 80066c2:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	3015      	adds	r0, #21
 80066c8:	4319      	orrs	r1, r3
 80066ca:	30ff      	adds	r0, #255	; 0xff
 80066cc:	f004 ff1c 	bl	800b508 <EE_WriteVariable>
 80066d0:	e7cc      	b.n	800666c <setCommand+0x5c8>
			temp82 =MARCH;
 80066d2:	2703      	movs	r7, #3
		if(result == BOS_OK){
 80066d4:	464b      	mov	r3, r9
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d000      	beq.n	80066dc <setCommand+0x638>
 80066da:	e579      	b.n	80061d0 <setCommand+0x12c>
 80066dc:	e6dd      	b.n	800649a <setCommand+0x3f6>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 80066de:	2220      	movs	r2, #32
 80066e0:	4b56      	ldr	r3, [pc, #344]	; (800683c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066e2:	3015      	adds	r0, #21
				BOSMessaging.response = BOS_RESPONSE_MSG;
 80066e4:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066e6:	7859      	ldrb	r1, [r3, #1]
 80066e8:	2320      	movs	r3, #32
 80066ea:	0209      	lsls	r1, r1, #8
 80066ec:	4319      	orrs	r1, r3
 80066ee:	30ff      	adds	r0, #255	; 0xff
 80066f0:	f004 ff0a 	bl	800b508 <EE_WriteVariable>
 80066f4:	e7ba      	b.n	800666c <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_BOTH;
 80066f6:	2203      	movs	r2, #3
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066f8:	21c0      	movs	r1, #192	; 0xc0
				BOSMessaging.trace =TRACE_BOTH;
 80066fa:	4b50      	ldr	r3, [pc, #320]	; (800683c <setCommand+0x798>)
 80066fc:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066fe:	781b      	ldrb	r3, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006700:	0089      	lsls	r1, r1, #2
 8006702:	3015      	adds	r0, #21
 8006704:	4319      	orrs	r1, r3
 8006706:	30ff      	adds	r0, #255	; 0xff
 8006708:	f004 fefe 	bl	800b508 <EE_WriteVariable>
 800670c:	e7ae      	b.n	800666c <setCommand+0x5c8>
			temp2 =atoi((const char* )pcParameterString2);
 800670e:	4640      	mov	r0, r8
 8006710:	f00c f847 	bl	80127a2 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006714:	23e1      	movs	r3, #225	; 0xe1
 8006716:	031b      	lsls	r3, r3, #12
 8006718:	4298      	cmp	r0, r3
 800671a:	d900      	bls.n	800671e <setCommand+0x67a>
 800671c:	e55d      	b.n	80061da <setCommand+0x136>
				BOS.clibaudrate =temp2;
 800671e:	4e2f      	ldr	r6, [pc, #188]	; (80067dc <setCommand+0x738>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006720:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 8006722:	60b0      	str	r0, [r6, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006724:	208c      	movs	r0, #140	; 0x8c
 8006726:	0040      	lsls	r0, r0, #1
 8006728:	f004 feee 	bl	800b508 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800672c:	201a      	movs	r0, #26
 800672e:	8971      	ldrh	r1, [r6, #10]
 8006730:	30ff      	adds	r0, #255	; 0xff
 8006732:	f004 fee9 	bl	800b508 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006736:	4649      	mov	r1, r9
 8006738:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800673a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800673c:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800673e:	54d1      	strb	r1, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006740:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006742:	493f      	ldr	r1, [pc, #252]	; (8006840 <setCommand+0x79c>)
 8006744:	f00c fcf6 	bl	8013134 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006748:	0028      	movs	r0, r5
 800674a:	f7f9 fce5 	bl	8000118 <strlen>
 800674e:	0004      	movs	r4, r0
 8006750:	2230      	movs	r2, #48	; 0x30
 8006752:	1828      	adds	r0, r5, r0
 8006754:	493b      	ldr	r1, [pc, #236]	; (8006844 <setCommand+0x7a0>)
 8006756:	f00c faea 	bl	8012d2e <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 800675a:	0020      	movs	r0, r4
 800675c:	302f      	adds	r0, #47	; 0x2f
 800675e:	1828      	adds	r0, r5, r0
 8006760:	22b2      	movs	r2, #178	; 0xb2
 8006762:	4939      	ldr	r1, [pc, #228]	; (8006848 <setCommand+0x7a4>)
 8006764:	f00c fae3 	bl	8012d2e <memcpy>
 8006768:	e4ce      	b.n	8006108 <setCommand+0x64>
			temp81 =WEDNESDAY;
 800676a:	2303      	movs	r3, #3
 800676c:	469b      	mov	fp, r3
 800676e:	e690      	b.n	8006492 <setCommand+0x3ee>
			temp16 =atoi((const char* )pcParameterString2);
 8006770:	4640      	mov	r0, r8
 8006772:	f00c f816 	bl	80127a2 <atoi>
 8006776:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006778:	2900      	cmp	r1, #0
 800677a:	d100      	bne.n	800677e <setCommand+0x6da>
 800677c:	e52d      	b.n	80061da <setCommand+0x136>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 800677e:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 8006780:	4b16      	ldr	r3, [pc, #88]	; (80067dc <setCommand+0x738>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006782:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 8006784:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006786:	f004 febf 	bl	800b508 <EE_WriteVariable>
 800678a:	e76f      	b.n	800666c <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_RESPONSE;
 800678c:	2202      	movs	r2, #2
 800678e:	4b2b      	ldr	r3, [pc, #172]	; (800683c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006790:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_RESPONSE;
 8006792:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	e7b3      	b.n	8006700 <setCommand+0x65c>
			temp81 =THURSDAY;
 8006798:	2304      	movs	r3, #4
 800679a:	469b      	mov	fp, r3
 800679c:	e679      	b.n	8006492 <setCommand+0x3ee>
			temp16 =atoi((const char* )pcParameterString2);
 800679e:	4640      	mov	r0, r8
 80067a0:	f00b ffff 	bl	80127a2 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80067a4:	1e43      	subs	r3, r0, #1
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2bfe      	cmp	r3, #254	; 0xfe
 80067aa:	d900      	bls.n	80067ae <setCommand+0x70a>
 80067ac:	e515      	b.n	80061da <setCommand+0x136>
				BOS.buttons.minInterClickTime =temp16;
 80067ae:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <setCommand+0x738>)
 80067b0:	b2c0      	uxtb	r0, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067b2:	7959      	ldrb	r1, [r3, #5]
				BOS.buttons.minInterClickTime =temp16;
 80067b4:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067b6:	0209      	lsls	r1, r1, #8
 80067b8:	4301      	orrs	r1, r0
 80067ba:	2018      	movs	r0, #24
 80067bc:	30ff      	adds	r0, #255	; 0xff
 80067be:	f004 fea3 	bl	800b508 <EE_WriteVariable>
 80067c2:	e753      	b.n	800666c <setCommand+0x5c8>
			temp81 =FRIDAY;
 80067c4:	2305      	movs	r3, #5
 80067c6:	469b      	mov	fp, r3
 80067c8:	e663      	b.n	8006492 <setCommand+0x3ee>
			temp81 =SATURDAY;
 80067ca:	2306      	movs	r3, #6
 80067cc:	469b      	mov	fp, r3
 80067ce:	e660      	b.n	8006492 <setCommand+0x3ee>
			temp82 =APRIL;
 80067d0:	2704      	movs	r7, #4
 80067d2:	e77f      	b.n	80066d4 <setCommand+0x630>
 80067d4:	08018f68 	.word	0x08018f68
 80067d8:	fffff830 	.word	0xfffff830
 80067dc:	20006db4 	.word	0x20006db4
 80067e0:	08019024 	.word	0x08019024
 80067e4:	08019028 	.word	0x08019028
 80067e8:	08019034 	.word	0x08019034
 80067ec:	08018fa4 	.word	0x08018fa4
 80067f0:	08018fac 	.word	0x08018fac
 80067f4:	08018fb0 	.word	0x08018fb0
 80067f8:	08018fb8 	.word	0x08018fb8
 80067fc:	08018fbc 	.word	0x08018fbc
 8006800:	08018fc0 	.word	0x08018fc0
 8006804:	08018fc4 	.word	0x08018fc4
 8006808:	08018fcc 	.word	0x08018fcc
 800680c:	08018fd0 	.word	0x08018fd0
 8006810:	08018fd8 	.word	0x08018fd8
 8006814:	08018fdc 	.word	0x08018fdc
 8006818:	08018fe4 	.word	0x08018fe4
 800681c:	08018fe8 	.word	0x08018fe8
 8006820:	08018ff4 	.word	0x08018ff4
 8006824:	08018ff8 	.word	0x08018ff8
 8006828:	08019000 	.word	0x08019000
 800682c:	08019004 	.word	0x08019004
 8006830:	08019010 	.word	0x08019010
 8006834:	08019014 	.word	0x08019014
 8006838:	08019020 	.word	0x08019020
 800683c:	20006d34 	.word	0x20006d34
 8006840:	08018e48 	.word	0x08018e48
 8006844:	08018e5c 	.word	0x08018e5c
 8006848:	08018e8c 	.word	0x08018e8c
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800684c:	9b07      	ldr	r3, [sp, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d100      	bne.n	8006854 <setCommand+0x7b0>
 8006852:	e4c2      	b.n	80061da <setCommand+0x136>
 8006854:	2202      	movs	r2, #2
 8006856:	4915      	ldr	r1, [pc, #84]	; (80068ac <setCommand+0x808>)
 8006858:	0030      	movs	r0, r6
 800685a:	f00c fcaf 	bl	80131bc <strncmp>
 800685e:	2800      	cmp	r0, #0
 8006860:	d100      	bne.n	8006864 <setCommand+0x7c0>
 8006862:	e4ba      	b.n	80061da <setCommand+0x136>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006864:	2208      	movs	r2, #8
 8006866:	4912      	ldr	r1, [pc, #72]	; (80068b0 <setCommand+0x80c>)
 8006868:	0030      	movs	r0, r6
 800686a:	f00c fca7 	bl	80131bc <strncmp>
 800686e:	2800      	cmp	r0, #0
 8006870:	d100      	bne.n	8006874 <setCommand+0x7d0>
 8006872:	e4b2      	b.n	80061da <setCommand+0x136>
 8006874:	2202      	movs	r2, #2
 8006876:	490f      	ldr	r1, [pc, #60]	; (80068b4 <setCommand+0x810>)
 8006878:	0030      	movs	r0, r6
 800687a:	f00c fc9f 	bl	80131bc <strncmp>
 800687e:	2800      	cmp	r0, #0
 8006880:	d100      	bne.n	8006884 <setCommand+0x7e0>
 8006882:	e4aa      	b.n	80061da <setCommand+0x136>
			result =BOS_ERR_WrongValue;
 8006884:	2368      	movs	r3, #104	; 0x68
 8006886:	4699      	mov	r9, r3
 8006888:	e644      	b.n	8006514 <setCommand+0x470>
			temp82 =MAY;
 800688a:	2705      	movs	r7, #5
 800688c:	e722      	b.n	80066d4 <setCommand+0x630>
			temp82 =JUNE;
 800688e:	2706      	movs	r7, #6
 8006890:	e720      	b.n	80066d4 <setCommand+0x630>
			temp82 =FEBRUARY;
 8006892:	2702      	movs	r7, #2
 8006894:	e601      	b.n	800649a <setCommand+0x3f6>
			temp82 =JULY;
 8006896:	2707      	movs	r7, #7
 8006898:	e71c      	b.n	80066d4 <setCommand+0x630>
			temp82 =NOVEMBER;
 800689a:	270b      	movs	r7, #11
 800689c:	e71a      	b.n	80066d4 <setCommand+0x630>
			temp82 =OCTOBER;
 800689e:	270a      	movs	r7, #10
 80068a0:	e718      	b.n	80066d4 <setCommand+0x630>
			temp82 =SEPTEMBER;
 80068a2:	2709      	movs	r7, #9
 80068a4:	e716      	b.n	80066d4 <setCommand+0x630>
			temp82 =AUGUST;
 80068a6:	2708      	movs	r7, #8
 80068a8:	e714      	b.n	80066d4 <setCommand+0x630>
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	08019024 	.word	0x08019024
 80068b0:	08019028 	.word	0x08019028
 80068b4:	08019034 	.word	0x08019034

080068b8 <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 80068b8:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80068ba:	b530      	push	{r4, r5, lr}
 80068bc:	b083      	sub	sp, #12
 80068be:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068c0:	2101      	movs	r1, #1
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80068c2:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068c4:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80068c6:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068c8:	f007 f876 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80068cc:	2300      	movs	r3, #0
 80068ce:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 80068d0:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 80068d2:	2b70      	cmp	r3, #112	; 0x70
 80068d4:	d00d      	beq.n	80068f2 <removebuttonCommand+0x3a>
	result =RemovePortButton(port);
 80068d6:	0020      	movs	r0, r4
 80068d8:	f005 fa10 	bl	800bcfc <RemovePortButton>
	if(result == BOS_OK){
 80068dc:	2800      	cmp	r0, #0
 80068de:	d105      	bne.n	80068ec <removebuttonCommand+0x34>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 80068e0:	0023      	movs	r3, r4
 80068e2:	0022      	movs	r2, r4
 80068e4:	4905      	ldr	r1, [pc, #20]	; (80068fc <removebuttonCommand+0x44>)
 80068e6:	0028      	movs	r0, r5
 80068e8:	f00c fc24 	bl	8013134 <sprintf>
}
 80068ec:	2000      	movs	r0, #0
 80068ee:	b003      	add	sp, #12
 80068f0:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 80068f2:	3001      	adds	r0, #1
 80068f4:	f00b ff5b 	bl	80127ae <atol>
 80068f8:	b2c4      	uxtb	r4, r0
 80068fa:	e7ec      	b.n	80068d6 <removebuttonCommand+0x1e>
 80068fc:	08019038 	.word	0x08019038

08006900 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006902:	46ce      	mov	lr, r9
 8006904:	4647      	mov	r7, r8
 8006906:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006908:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800690a:	b580      	push	{r7, lr}
 800690c:	b085      	sub	sp, #20
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800690e:	aa02      	add	r2, sp, #8
 8006910:	2101      	movs	r1, #1
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006912:	4680      	mov	r8, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006914:	0030      	movs	r0, r6
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006916:	9302      	str	r3, [sp, #8]
 8006918:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800691a:	f007 f84d 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800691e:	9f02      	ldr	r7, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006920:	4b24      	ldr	r3, [pc, #144]	; (80069b4 <addbuttonCommand+0xb4>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006922:	003a      	movs	r2, r7
 8006924:	4924      	ldr	r1, [pc, #144]	; (80069b8 <addbuttonCommand+0xb8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006926:	0004      	movs	r4, r0
 8006928:	4699      	mov	r9, r3
 800692a:	64d8      	str	r0, [r3, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800692c:	f00c fc46 	bl	80131bc <strncmp>
		type =MOMENTARY_NO;
 8006930:	2501      	movs	r5, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006932:	2800      	cmp	r0, #0
 8006934:	d007      	beq.n	8006946 <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006936:	003a      	movs	r2, r7
 8006938:	4920      	ldr	r1, [pc, #128]	; (80069bc <addbuttonCommand+0xbc>)
 800693a:	0020      	movs	r0, r4
 800693c:	f00c fc3e 	bl	80131bc <strncmp>
		type =MOMENTARY_NC;
 8006940:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006942:	2800      	cmp	r0, #0
 8006944:	d11f      	bne.n	8006986 <addbuttonCommand+0x86>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006946:	aa03      	add	r2, sp, #12
 8006948:	2102      	movs	r1, #2
 800694a:	0030      	movs	r0, r6
 800694c:	f007 f834 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006950:	2300      	movs	r3, #0
 8006952:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006954:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006956:	2b70      	cmp	r3, #112	; 0x70
 8006958:	d026      	beq.n	80069a8 <addbuttonCommand+0xa8>
	result =AddPortButton(type,port);
 800695a:	0021      	movs	r1, r4
 800695c:	0028      	movs	r0, r5
 800695e:	f005 f953 	bl	800bc08 <AddPortButton>
	if(result == BOS_OK){
 8006962:	2800      	cmp	r0, #0
 8006964:	d109      	bne.n	800697a <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006966:	464b      	mov	r3, r9
 8006968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800696a:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 800696c:	4914      	ldr	r1, [pc, #80]	; (80069c0 <addbuttonCommand+0xc0>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 800696e:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006970:	9400      	str	r4, [sp, #0]
 8006972:	0023      	movs	r3, r4
 8006974:	4640      	mov	r0, r8
 8006976:	f00c fbdd 	bl	8013134 <sprintf>
}
 800697a:	2000      	movs	r0, #0
 800697c:	b005      	add	sp, #20
 800697e:	bc0c      	pop	{r2, r3}
 8006980:	4690      	mov	r8, r2
 8006982:	4699      	mov	r9, r3
 8006984:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006986:	003a      	movs	r2, r7
 8006988:	490e      	ldr	r1, [pc, #56]	; (80069c4 <addbuttonCommand+0xc4>)
 800698a:	0020      	movs	r0, r4
 800698c:	f00c fc16 	bl	80131bc <strncmp>
		type =ONOFF_NO;
 8006990:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006992:	2800      	cmp	r0, #0
 8006994:	d0d7      	beq.n	8006946 <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006996:	003a      	movs	r2, r7
 8006998:	490b      	ldr	r1, [pc, #44]	; (80069c8 <addbuttonCommand+0xc8>)
 800699a:	0020      	movs	r0, r4
 800699c:	f00c fc0e 	bl	80131bc <strncmp>
		type =ONOFF_NC;
 80069a0:	4245      	negs	r5, r0
 80069a2:	4145      	adcs	r5, r0
 80069a4:	00ad      	lsls	r5, r5, #2
 80069a6:	e7ce      	b.n	8006946 <addbuttonCommand+0x46>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 80069a8:	3001      	adds	r0, #1
 80069aa:	f00b ff00 	bl	80127ae <atol>
 80069ae:	b2c4      	uxtb	r4, r0
 80069b0:	e7d3      	b.n	800695a <addbuttonCommand+0x5a>
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	20001250 	.word	0x20001250
 80069b8:	08019060 	.word	0x08019060
 80069bc:	08019070 	.word	0x08019070
 80069c0:	08019098 	.word	0x08019098
 80069c4:	08019080 	.word	0x08019080
 80069c8:	0801908c 	.word	0x0801908c

080069cc <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80069cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ce:	46de      	mov	lr, fp
 80069d0:	464e      	mov	r6, r9
 80069d2:	4657      	mov	r7, sl
 80069d4:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80069d6:	2300      	movs	r3, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80069d8:	0014      	movs	r4, r2
 80069da:	b5e0      	push	{r5, r6, r7, lr}
 80069dc:	b099      	sub	sp, #100	; 0x64
 80069de:	9007      	str	r0, [sp, #28]
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 80069e0:	220a      	movs	r2, #10
 80069e2:	2100      	movs	r1, #0
 80069e4:	a80f      	add	r0, sp, #60	; 0x3c
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80069e6:	9308      	str	r3, [sp, #32]
 80069e8:	9309      	str	r3, [sp, #36]	; 0x24
 80069ea:	930a      	str	r3, [sp, #40]	; 0x28
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 80069ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80069ee:	930c      	str	r3, [sp, #48]	; 0x30
 80069f0:	930d      	str	r3, [sp, #52]	; 0x34
	portBASE_TYPE xParameterStringLength7 =0;
 80069f2:	930e      	str	r3, [sp, #56]	; 0x38
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 80069f4:	f00c f9a4 	bl	8012d40 <memset>
 80069f8:	220a      	movs	r2, #10
 80069fa:	2100      	movs	r1, #0
 80069fc:	a812      	add	r0, sp, #72	; 0x48
 80069fe:	f00c f99f 	bl	8012d40 <memset>
 8006a02:	220a      	movs	r2, #10
 8006a04:	2100      	movs	r1, #0
 8006a06:	a815      	add	r0, sp, #84	; 0x54
 8006a08:	f00c f99a 	bl	8012d40 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006a0c:	aa08      	add	r2, sp, #32
 8006a0e:	2101      	movs	r1, #1
 8006a10:	0020      	movs	r0, r4
 8006a12:	f006 ffd1 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006a16:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a18:	2200      	movs	r2, #0
	if(pcParameterString1[0] == 'P'){
 8006a1a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a1c:	4691      	mov	r9, r2
	if(pcParameterString1[0] == 'P'){
 8006a1e:	2b50      	cmp	r3, #80	; 0x50
 8006a20:	d100      	bne.n	8006a24 <scastCommand+0x58>
 8006a22:	e085      	b.n	8006b30 <scastCommand+0x164>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006a24:	aa09      	add	r2, sp, #36	; 0x24
 8006a26:	2102      	movs	r1, #2
 8006a28:	0020      	movs	r0, r4
 8006a2a:	f006 ffc5 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006a30:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006a32:	a80f      	add	r0, sp, #60	; 0x3c
 8006a34:	f00c fbd3 	bl	80131de <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006a38:	a80f      	add	r0, sp, #60	; 0x3c
 8006a3a:	f7fd fbd3 	bl	80041e4 <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006a3e:	aa0a      	add	r2, sp, #40	; 0x28
	srcM =(uint8_t )GetID(par1);
 8006a40:	b2c5      	uxtb	r5, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006a42:	2103      	movs	r1, #3
 8006a44:	0020      	movs	r0, r4
 8006a46:	f006 ffb7 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006a4a:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a4c:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 8006a4e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a50:	4692      	mov	sl, r2
	if(pcParameterString3[0] == 'p'){
 8006a52:	2b70      	cmp	r3, #112	; 0x70
 8006a54:	d066      	beq.n	8006b24 <scastCommand+0x158>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006a56:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a58:	2104      	movs	r1, #4
 8006a5a:	0020      	movs	r0, r4
 8006a5c:	f006 ffac 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006a60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006a62:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006a64:	a812      	add	r0, sp, #72	; 0x48
 8006a66:	f00c fbba 	bl	80131de <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006a6a:	a812      	add	r0, sp, #72	; 0x48
 8006a6c:	f7fd fbba 	bl	80041e4 <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a70:	aa0c      	add	r2, sp, #48	; 0x30
	dstM =(uint8_t )GetID(par2);
 8006a72:	b2c3      	uxtb	r3, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a74:	2105      	movs	r1, #5
 8006a76:	0020      	movs	r0, r4
	dstM =(uint8_t )GetID(par2);
 8006a78:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a7a:	f006 ff9d 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a80:	492e      	ldr	r1, [pc, #184]	; (8006b3c <scastCommand+0x170>)
 8006a82:	001a      	movs	r2, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a84:	0007      	movs	r7, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006a86:	4698      	mov	r8, r3
 8006a88:	f00c fb98 	bl	80131bc <strncmp>
		direction =FORWARD;
 8006a8c:	2600      	movs	r6, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d007      	beq.n	8006aa2 <scastCommand+0xd6>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006a92:	4642      	mov	r2, r8
 8006a94:	492a      	ldr	r1, [pc, #168]	; (8006b40 <scastCommand+0x174>)
 8006a96:	0038      	movs	r0, r7
 8006a98:	f00c fb90 	bl	80131bc <strncmp>
		direction =BACKWARD;
 8006a9c:	3601      	adds	r6, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d137      	bne.n	8006b12 <scastCommand+0x146>
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006aa2:	0039      	movs	r1, r7
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	a815      	add	r0, sp, #84	; 0x54
 8006aa8:	f00c fb99 	bl	80131de <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006aac:	aa0d      	add	r2, sp, #52	; 0x34
 8006aae:	2106      	movs	r1, #6
 8006ab0:	0020      	movs	r0, r4
 8006ab2:	f006 ff81 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006ab6:	f00b fe7a 	bl	80127ae <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006aba:	aa0e      	add	r2, sp, #56	; 0x38
 8006abc:	2107      	movs	r1, #7
	count =(uint32_t )atol((char* )pcParameterString6);
 8006abe:	0007      	movs	r7, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006ac0:	0020      	movs	r0, r4
 8006ac2:	f006 ff79 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006ac6:	f00b fe72 	bl	80127ae <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006aca:	2300      	movs	r3, #0
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006acc:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006ace:	9303      	str	r3, [sp, #12]
 8006ad0:	9002      	str	r0, [sp, #8]
 8006ad2:	9701      	str	r7, [sp, #4]
 8006ad4:	9600      	str	r6, [sp, #0]
 8006ad6:	465b      	mov	r3, fp
 8006ad8:	4652      	mov	r2, sl
 8006ada:	0029      	movs	r1, r5
 8006adc:	4648      	mov	r0, r9
 8006ade:	f001 fb41 	bl	8008164 <StartScastDMAStream>
	if(result == BOS_OK){
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d10d      	bne.n	8006b02 <scastCommand+0x136>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006ae6:	ab12      	add	r3, sp, #72	; 0x48
 8006ae8:	9302      	str	r3, [sp, #8]
 8006aea:	4653      	mov	r3, sl
 8006aec:	9301      	str	r3, [sp, #4]
 8006aee:	ab0f      	add	r3, sp, #60	; 0x3c
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	9404      	str	r4, [sp, #16]
 8006af4:	9703      	str	r7, [sp, #12]
 8006af6:	464b      	mov	r3, r9
 8006af8:	aa15      	add	r2, sp, #84	; 0x54
 8006afa:	4912      	ldr	r1, [pc, #72]	; (8006b44 <scastCommand+0x178>)
 8006afc:	9807      	ldr	r0, [sp, #28]
 8006afe:	f00c fb19 	bl	8013134 <sprintf>
}
 8006b02:	2000      	movs	r0, #0
 8006b04:	b019      	add	sp, #100	; 0x64
 8006b06:	bc3c      	pop	{r2, r3, r4, r5}
 8006b08:	4690      	mov	r8, r2
 8006b0a:	4699      	mov	r9, r3
 8006b0c:	46a2      	mov	sl, r4
 8006b0e:	46ab      	mov	fp, r5
 8006b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006b12:	4642      	mov	r2, r8
 8006b14:	490c      	ldr	r1, [pc, #48]	; (8006b48 <scastCommand+0x17c>)
 8006b16:	0038      	movs	r0, r7
 8006b18:	f00c fb50 	bl	80131bc <strncmp>
		direction =BIDIRECTIONAL;
 8006b1c:	4246      	negs	r6, r0
 8006b1e:	4146      	adcs	r6, r0
 8006b20:	0076      	lsls	r6, r6, #1
 8006b22:	e7be      	b.n	8006aa2 <scastCommand+0xd6>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006b24:	3001      	adds	r0, #1
 8006b26:	f00b fe42 	bl	80127ae <atol>
 8006b2a:	b2c3      	uxtb	r3, r0
 8006b2c:	469a      	mov	sl, r3
 8006b2e:	e792      	b.n	8006a56 <scastCommand+0x8a>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006b30:	3001      	adds	r0, #1
 8006b32:	f00b fe3c 	bl	80127ae <atol>
 8006b36:	b2c3      	uxtb	r3, r0
 8006b38:	4699      	mov	r9, r3
 8006b3a:	e773      	b.n	8006a24 <scastCommand+0x58>
 8006b3c:	080190cc 	.word	0x080190cc
 8006b40:	080190d4 	.word	0x080190d4
 8006b44:	080190f0 	.word	0x080190f0
 8006b48:	080190e0 	.word	0x080190e0

08006b4c <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(N > 1)
 8006b4e:	4d22      	ldr	r5, [pc, #136]	; (8006bd8 <infoCommand+0x8c>)
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b50:	b083      	sub	sp, #12
	if(N > 1)
 8006b52:	782a      	ldrb	r2, [r5, #0]
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b54:	0004      	movs	r4, r0
	BOS_Status result =BOS_OK;
 8006b56:	2700      	movs	r7, #0
	if(N > 1)
 8006b58:	2a01      	cmp	r2, #1
 8006b5a:	d903      	bls.n	8006b64 <infoCommand+0x18>
		result =ReadPortsDir();
 8006b5c:	f006 fd1c 	bl	800d598 <ReadPortsDir>
 8006b60:	0007      	movs	r7, r0
 8006b62:	782a      	ldrb	r2, [r5, #0]
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006b64:	491d      	ldr	r1, [pc, #116]	; (8006bdc <infoCommand+0x90>)
 8006b66:	0020      	movs	r0, r4
 8006b68:	f00c fae4 	bl	8013134 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006b6c:	2601      	movs	r6, #1
 8006b6e:	0020      	movs	r0, r4
 8006b70:	f7f9 fad2 	bl	8000118 <strlen>
 8006b74:	4d1a      	ldr	r5, [pc, #104]	; (8006be0 <infoCommand+0x94>)
 8006b76:	4276      	negs	r6, r6
 8006b78:	b282      	uxth	r2, r0
 8006b7a:	2332      	movs	r3, #50	; 0x32
 8006b7c:	7828      	ldrb	r0, [r5, #0]
 8006b7e:	0021      	movs	r1, r4
 8006b80:	9600      	str	r6, [sp, #0]
 8006b82:	f006 fc4f 	bl	800d424 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006b86:	2213      	movs	r2, #19
 8006b88:	4916      	ldr	r1, [pc, #88]	; (8006be4 <infoCommand+0x98>)
 8006b8a:	0020      	movs	r0, r4
 8006b8c:	f00c f8cf 	bl	8012d2e <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006b90:	7828      	ldrb	r0, [r5, #0]
 8006b92:	2332      	movs	r3, #50	; 0x32
 8006b94:	2212      	movs	r2, #18
 8006b96:	0021      	movs	r1, r4
 8006b98:	9600      	str	r6, [sp, #0]
 8006b9a:	f006 fc43 	bl	800d424 <writePxMutex>
	DisplayTopology(PcPort);
 8006b9e:	7828      	ldrb	r0, [r5, #0]
 8006ba0:	f7fd f85e 	bl	8003c60 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006ba4:	7828      	ldrb	r0, [r5, #0]
 8006ba6:	f7fd f92d 	bl	8003e04 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006baa:	2f02      	cmp	r7, #2
 8006bac:	d007      	beq.n	8006bbe <infoCommand+0x72>
	sprintf((char* )pcWriteBuffer," ");
 8006bae:	2202      	movs	r2, #2
 8006bb0:	490d      	ldr	r1, [pc, #52]	; (8006be8 <infoCommand+0x9c>)
 8006bb2:	0020      	movs	r0, r4
 8006bb4:	f00c f8bb 	bl	8012d2e <memcpy>
}
 8006bb8:	2000      	movs	r0, #0
 8006bba:	b003      	add	sp, #12
 8006bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006bbe:	2244      	movs	r2, #68	; 0x44
 8006bc0:	490a      	ldr	r1, [pc, #40]	; (8006bec <infoCommand+0xa0>)
 8006bc2:	0020      	movs	r0, r4
 8006bc4:	f00c f8b3 	bl	8012d2e <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006bc8:	7828      	ldrb	r0, [r5, #0]
 8006bca:	2332      	movs	r3, #50	; 0x32
 8006bcc:	9600      	str	r6, [sp, #0]
 8006bce:	2243      	movs	r2, #67	; 0x43
 8006bd0:	0021      	movs	r1, r4
 8006bd2:	f006 fc27 	bl	800d424 <writePxMutex>
 8006bd6:	e7ea      	b.n	8006bae <infoCommand+0x62>
 8006bd8:	20000010 	.word	0x20000010
 8006bdc:	08019178 	.word	0x08019178
 8006be0:	20000c38 	.word	0x20000c38
 8006be4:	08019194 	.word	0x08019194
 8006be8:	08017d7c 	.word	0x08017d7c
 8006bec:	080191a8 	.word	0x080191a8

08006bf0 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bf0:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	f7fd f980 	bl	8003ef8 <DisplayModuleStatus>
}
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	bd10      	pop	{r4, pc}

08006bfc <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bfe:	46de      	mov	lr, fp
 8006c00:	464e      	mov	r6, r9
 8006c02:	4645      	mov	r5, r8
 8006c04:	4657      	mov	r7, sl
 8006c06:	b5e0      	push	{r5, r6, r7, lr}
 8006c08:	b091      	sub	sp, #68	; 0x44
	char module[MaxLengthOfAlias + 30] ={0};
 8006c0a:	ae06      	add	r6, sp, #24
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c0c:	4691      	mov	r9, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8006c0e:	2100      	movs	r1, #0
 8006c10:	2227      	movs	r2, #39	; 0x27
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c12:	4680      	mov	r8, r0
	char module[MaxLengthOfAlias + 30] ={0};
 8006c14:	0030      	movs	r0, r6
 8006c16:	f00c f893 	bl	8012d40 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006c1a:	220a      	movs	r2, #10
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	a803      	add	r0, sp, #12
 8006c20:	f00c f88e 	bl	8012d40 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c24:	4d52      	ldr	r5, [pc, #328]	; (8006d70 <groupCommand+0x174>)
 8006c26:	2101      	movs	r1, #1
 8006c28:	002a      	movs	r2, r5
 8006c2a:	4648      	mov	r0, r9
 8006c2c:	3250      	adds	r2, #80	; 0x50
 8006c2e:	f006 fec3 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006c32:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c34:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006c36:	a803      	add	r0, sp, #12
 8006c38:	f00c fad1 	bl	80131de <strncpy>
 8006c3c:	4c4d      	ldr	r4, [pc, #308]	; (8006d74 <groupCommand+0x178>)
 8006c3e:	0027      	movs	r7, r4
 8006c40:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006c42:	0021      	movs	r1, r4
 8006c44:	a803      	add	r0, sp, #12
 8006c46:	f7f9 fa5d 	bl	8000104 <strcmp>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d049      	beq.n	8006ce2 <groupCommand+0xe6>
 8006c4e:	340a      	adds	r4, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006c50:	42a7      	cmp	r7, r4
 8006c52:	d1f6      	bne.n	8006c42 <groupCommand+0x46>
	type =1;
 8006c54:	2301      	movs	r3, #1
 8006c56:	9301      	str	r3, [sp, #4]
	count =2;
 8006c58:	2302      	movs	r3, #2
 8006c5a:	2454      	movs	r4, #84	; 0x54
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006c5c:	220a      	movs	r2, #10
 8006c5e:	4946      	ldr	r1, [pc, #280]	; (8006d78 <groupCommand+0x17c>)
 8006c60:	4640      	mov	r0, r8
	count =2;
 8006c62:	552b      	strb	r3, [r5, r4]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006c64:	f00c f863 	bl	8012d2e <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006c68:	002a      	movs	r2, r5
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	3258      	adds	r2, #88	; 0x58
 8006c6e:	4648      	mov	r0, r9
 8006c70:	f006 fea2 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
 8006c74:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d069      	beq.n	8006d4e <groupCommand+0x152>
		module[xParameterStringLength] ='\0';
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	469a      	mov	sl, r3
			strcat((char* )pcWriteBuffer,", ");
 8006c7e:	4b3f      	ldr	r3, [pc, #252]	; (8006d7c <groupCommand+0x180>)
		if(count > 2)
 8006c80:	2754      	movs	r7, #84	; 0x54
			strcat((char* )pcWriteBuffer,", ");
 8006c82:	469b      	mov	fp, r3
 8006c84:	e00e      	b.n	8006ca4 <groupCommand+0xa8>
		strcat((char* )pcWriteBuffer,module);
 8006c86:	0031      	movs	r1, r6
 8006c88:	4640      	mov	r0, r8
 8006c8a:	f00c fa73 	bl	8013174 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006c8e:	002a      	movs	r2, r5
 8006c90:	3401      	adds	r4, #1
 8006c92:	b261      	sxtb	r1, r4
 8006c94:	3258      	adds	r2, #88	; 0x58
 8006c96:	4648      	mov	r0, r9
 8006c98:	55e9      	strb	r1, [r5, r7]
 8006c9a:	f006 fe8d 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
 8006c9e:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d03e      	beq.n	8006d22 <groupCommand+0x126>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006ca4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006ca6:	0001      	movs	r1, r0
 8006ca8:	0022      	movs	r2, r4
 8006caa:	0030      	movs	r0, r6
 8006cac:	f00c fa97 	bl	80131de <strncpy>
		module[xParameterStringLength] ='\0';
 8006cb0:	4653      	mov	r3, sl
		modID =GetID(module);
 8006cb2:	0030      	movs	r0, r6
		module[xParameterStringLength] ='\0';
 8006cb4:	5533      	strb	r3, [r6, r4]
		modID =GetID(module);
 8006cb6:	f7fd fa95 	bl	80041e4 <GetID>
		if(modID < 0)
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	db14      	blt.n	8006ce8 <groupCommand+0xec>
		result =AddModuleToGroup(modID,alias);
 8006cbe:	b2c0      	uxtb	r0, r0
 8006cc0:	a903      	add	r1, sp, #12
 8006cc2:	f7fd fb59 	bl	8004378 <AddModuleToGroup>
		if(result != BOS_OK)
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d11b      	bne.n	8006d02 <groupCommand+0x106>
		if(count > 2)
 8006cca:	57ec      	ldrsb	r4, [r5, r7]
 8006ccc:	2c02      	cmp	r4, #2
 8006cce:	ddda      	ble.n	8006c86 <groupCommand+0x8a>
			strcat((char* )pcWriteBuffer,", ");
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	f7f9 fa21 	bl	8000118 <strlen>
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	4440      	add	r0, r8
 8006cda:	4659      	mov	r1, fp
 8006cdc:	f00c f827 	bl	8012d2e <memcpy>
 8006ce0:	e7d1      	b.n	8006c86 <groupCommand+0x8a>
			type =0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	9301      	str	r3, [sp, #4]
 8006ce6:	e7b7      	b.n	8006c58 <groupCommand+0x5c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006ce8:	0032      	movs	r2, r6
 8006cea:	4925      	ldr	r1, [pc, #148]	; (8006d80 <groupCommand+0x184>)
 8006cec:	4640      	mov	r0, r8
 8006cee:	f00c fa21 	bl	8013134 <sprintf>
}
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	b011      	add	sp, #68	; 0x44
 8006cf6:	bc3c      	pop	{r2, r3, r4, r5}
 8006cf8:	4690      	mov	r8, r2
 8006cfa:	4699      	mov	r9, r3
 8006cfc:	46a2      	mov	sl, r4
 8006cfe:	46ab      	mov	fp, r5
 8006d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8006d02:	2354      	movs	r3, #84	; 0x54
 8006d04:	56eb      	ldrsb	r3, [r5, r3]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d024      	beq.n	8006d54 <groupCommand+0x158>
	else if(result == BOS_ERR_Keyword)
 8006d0a:	2806      	cmp	r0, #6
 8006d0c:	d019      	beq.n	8006d42 <groupCommand+0x146>
	else if(result == BOS_ERR_ExistingAlias)
 8006d0e:	2807      	cmp	r0, #7
 8006d10:	d028      	beq.n	8006d64 <groupCommand+0x168>
	else if(result == BOS_ERR_ExistingCmd)
 8006d12:	2808      	cmp	r0, #8
 8006d14:	d1ed      	bne.n	8006cf2 <groupCommand+0xf6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006d16:	aa03      	add	r2, sp, #12
 8006d18:	491a      	ldr	r1, [pc, #104]	; (8006d84 <groupCommand+0x188>)
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	f00c fa0a 	bl	8013134 <sprintf>
 8006d20:	e7e7      	b.n	8006cf2 <groupCommand+0xf6>
	else if(count == 2)
 8006d22:	57eb      	ldrsb	r3, [r5, r7]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d015      	beq.n	8006d54 <groupCommand+0x158>
	else if(result == BOS_OK && type){
 8006d28:	9b01      	ldr	r3, [sp, #4]
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006d2a:	aa03      	add	r2, sp, #12
	else if(result == BOS_OK && type){
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d117      	bne.n	8006d60 <groupCommand+0x164>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006d30:	4915      	ldr	r1, [pc, #84]	; (8006d88 <groupCommand+0x18c>)
 8006d32:	0030      	movs	r0, r6
 8006d34:	f00c f9fe 	bl	8013134 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006d38:	0031      	movs	r1, r6
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	f00c fa1a 	bl	8013174 <strcat>
 8006d40:	e7d7      	b.n	8006cf2 <groupCommand+0xf6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006d42:	aa03      	add	r2, sp, #12
 8006d44:	4911      	ldr	r1, [pc, #68]	; (8006d8c <groupCommand+0x190>)
 8006d46:	4640      	mov	r0, r8
 8006d48:	f00c f9f4 	bl	8013134 <sprintf>
 8006d4c:	e7d1      	b.n	8006cf2 <groupCommand+0xf6>
	else if(count == 2)
 8006d4e:	572b      	ldrsb	r3, [r5, r4]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d1e9      	bne.n	8006d28 <groupCommand+0x12c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8006d54:	aa03      	add	r2, sp, #12
 8006d56:	490e      	ldr	r1, [pc, #56]	; (8006d90 <groupCommand+0x194>)
 8006d58:	4640      	mov	r0, r8
 8006d5a:	f00c f9eb 	bl	8013134 <sprintf>
 8006d5e:	e7c8      	b.n	8006cf2 <groupCommand+0xf6>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006d60:	490c      	ldr	r1, [pc, #48]	; (8006d94 <groupCommand+0x198>)
 8006d62:	e7e6      	b.n	8006d32 <groupCommand+0x136>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8006d64:	aa03      	add	r2, sp, #12
 8006d66:	490c      	ldr	r1, [pc, #48]	; (8006d98 <groupCommand+0x19c>)
 8006d68:	4640      	mov	r0, r8
 8006d6a:	f00c f9e3 	bl	8013134 <sprintf>
 8006d6e:	e7c0      	b.n	8006cf2 <groupCommand+0xf6>
 8006d70:	20001250 	.word	0x20001250
 8006d74:	20000ae0 	.word	0x20000ae0
 8006d78:	080191ec 	.word	0x080191ec
 8006d7c:	080191f8 	.word	0x080191f8
 8006d80:	08019318 	.word	0x08019318
 8006d84:	080192d8 	.word	0x080192d8
 8006d88:	08019244 	.word	0x08019244
 8006d8c:	08019264 	.word	0x08019264
 8006d90:	080191fc 	.word	0x080191fc
 8006d94:	08019228 	.word	0x08019228
 8006d98:	080192a4 	.word	0x080192a4

08006d9c <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d9c:	b570      	push	{r4, r5, r6, lr}
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d9e:	4c1b      	ldr	r4, [pc, #108]	; (8006e0c <nameCommand+0x70>)
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006da0:	0006      	movs	r6, r0
 8006da2:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006da4:	0022      	movs	r2, r4
 8006da6:	2101      	movs	r1, #1
 8006da8:	3260      	adds	r2, #96	; 0x60
 8006daa:	f006 fe05 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006dae:	6e23      	ldr	r3, [r4, #96]	; 0x60
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006db0:	0001      	movs	r1, r0
 8006db2:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006db4:	2b09      	cmp	r3, #9
 8006db6:	dd01      	ble.n	8006dbc <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8006db8:	2300      	movs	r3, #0
 8006dba:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8006dbc:	4d14      	ldr	r5, [pc, #80]	; (8006e10 <nameCommand+0x74>)
 8006dbe:	7828      	ldrb	r0, [r5, #0]
 8006dc0:	f7fd fa70 	bl	80042a4 <NameModule>
	if(result == BOS_OK)
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d007      	beq.n	8006dd8 <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8006dc8:	2806      	cmp	r0, #6
 8006dca:	d012      	beq.n	8006df2 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8006dcc:	2807      	cmp	r0, #7
 8006dce:	d00a      	beq.n	8006de6 <nameCommand+0x4a>
	else if(result == BOS_ERR_ExistingCmd)
 8006dd0:	2808      	cmp	r0, #8
 8006dd2:	d014      	beq.n	8006dfe <nameCommand+0x62>
}
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8006dd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dda:	782a      	ldrb	r2, [r5, #0]
 8006ddc:	490d      	ldr	r1, [pc, #52]	; (8006e14 <nameCommand+0x78>)
 8006dde:	0030      	movs	r0, r6
 8006de0:	f00c f9a8 	bl	8013134 <sprintf>
 8006de4:	e7f6      	b.n	8006dd4 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8006de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006de8:	490b      	ldr	r1, [pc, #44]	; (8006e18 <nameCommand+0x7c>)
 8006dea:	0030      	movs	r0, r6
 8006dec:	f00c f9a2 	bl	8013134 <sprintf>
 8006df0:	e7f0      	b.n	8006dd4 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8006df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006df4:	4909      	ldr	r1, [pc, #36]	; (8006e1c <nameCommand+0x80>)
 8006df6:	0030      	movs	r0, r6
 8006df8:	f00c f99c 	bl	8013134 <sprintf>
 8006dfc:	e7ea      	b.n	8006dd4 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8006dfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e00:	4907      	ldr	r1, [pc, #28]	; (8006e20 <nameCommand+0x84>)
 8006e02:	0030      	movs	r0, r6
 8006e04:	f00c f996 	bl	8013134 <sprintf>
 8006e08:	e7e4      	b.n	8006dd4 <nameCommand+0x38>
 8006e0a:	46c0      	nop			; (mov r8, r8)
 8006e0c:	20001250 	.word	0x20001250
 8006e10:	20000aa8 	.word	0x20000aa8
 8006e14:	0801933c 	.word	0x0801933c
 8006e18:	080192a4 	.word	0x080192a4
 8006e1c:	08019264 	.word	0x08019264
 8006e20:	080192d8 	.word	0x080192d8

08006e24 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e26:	46c6      	mov	lr, r8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e28:	4c50      	ldr	r4, [pc, #320]	; (8006f6c <bootloaderUpdateCommand+0x148>)
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e2a:	0015      	movs	r5, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e2c:	0022      	movs	r2, r4
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e2e:	b500      	push	{lr}
 8006e30:	0006      	movs	r6, r0
 8006e32:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e34:	3268      	adds	r2, #104	; 0x68
 8006e36:	2101      	movs	r1, #1
 8006e38:	0028      	movs	r0, r5
 8006e3a:	f006 fdbd 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d069      	beq.n	8006f16 <bootloaderUpdateCommand+0xf2>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8006e42:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8006e44:	494a      	ldr	r1, [pc, #296]	; (8006f70 <bootloaderUpdateCommand+0x14c>)
 8006e46:	f00c f9b9 	bl	80131bc <strncmp>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d133      	bne.n	8006eb6 <bootloaderUpdateCommand+0x92>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e4e:	0022      	movs	r2, r4
 8006e50:	2102      	movs	r1, #2
 8006e52:	326c      	adds	r2, #108	; 0x6c
 8006e54:	0028      	movs	r0, r5
 8006e56:	f006 fdaf 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e5a:	0022      	movs	r2, r4
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e5c:	6720      	str	r0, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e5e:	3274      	adds	r2, #116	; 0x74
 8006e60:	0028      	movs	r0, r5
 8006e62:	2103      	movs	r1, #3
 8006e64:	f006 fda8 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
			if(pcParameterString2[0] == '#'){
 8006e68:	2200      	movs	r2, #0
 8006e6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e6c:	67a0      	str	r0, [r4, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 8006e6e:	569a      	ldrsb	r2, [r3, r2]
				result =BOS_ERR_WrongValue;
 8006e70:	2568      	movs	r5, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8006e72:	2a23      	cmp	r2, #35	; 0x23
 8006e74:	d029      	beq.n	8006eca <bootloaderUpdateCommand+0xa6>
			if(pcParameterString3[0] == 'p'){
 8006e76:	2300      	movs	r3, #0
 8006e78:	56c3      	ldrsb	r3, [r0, r3]
 8006e7a:	2b70      	cmp	r3, #112	; 0x70
 8006e7c:	d02f      	beq.n	8006ede <bootloaderUpdateCommand+0xba>
			if(module != myID){
 8006e7e:	4c3d      	ldr	r4, [pc, #244]	; (8006f74 <bootloaderUpdateCommand+0x150>)
				result =BOS_ERR_WrongValue;
 8006e80:	2568      	movs	r5, #104	; 0x68
			if(module != myID){
 8006e82:	7823      	ldrb	r3, [r4, #0]
 8006e84:	42bb      	cmp	r3, r7
 8006e86:	d033      	beq.n	8006ef0 <bootloaderUpdateCommand+0xcc>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006e88:	2200      	movs	r2, #0
 8006e8a:	4b3b      	ldr	r3, [pc, #236]	; (8006f78 <bootloaderUpdateCommand+0x154>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006e8c:	211a      	movs	r1, #26
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006e8e:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 8006e90:	4642      	mov	r2, r8
 8006e92:	4b3a      	ldr	r3, [pc, #232]	; (8006f7c <bootloaderUpdateCommand+0x158>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006e94:	0038      	movs	r0, r7
				messageParams[0] =port;
 8006e96:	701a      	strb	r2, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f001 f93f 	bl	800811c <SendMessageToModule>
				osDelay(100);
 8006e9e:	2064      	movs	r0, #100	; 0x64
 8006ea0:	f006 fc7e 	bl	800d7a0 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8006ea4:	4b36      	ldr	r3, [pc, #216]	; (8006f80 <bootloaderUpdateCommand+0x15c>)
 8006ea6:	7820      	ldrb	r0, [r4, #0]
 8006ea8:	781a      	ldrb	r2, [r3, #0]
 8006eaa:	0039      	movs	r1, r7
 8006eac:	4643      	mov	r3, r8
 8006eae:	f002 fff7 	bl	8009ea0 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8006eb2:	2d68      	cmp	r5, #104	; 0x68
 8006eb4:	d104      	bne.n	8006ec0 <bootloaderUpdateCommand+0x9c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006eb6:	220f      	movs	r2, #15
 8006eb8:	4932      	ldr	r1, [pc, #200]	; (8006f84 <bootloaderUpdateCommand+0x160>)
 8006eba:	0030      	movs	r0, r6
 8006ebc:	f00b ff37 	bl	8012d2e <memcpy>
}
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	b002      	add	sp, #8
 8006ec4:	bc04      	pop	{r2}
 8006ec6:	4690      	mov	r8, r2
 8006ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006eca:	1c58      	adds	r0, r3, #1
 8006ecc:	f00b fc6f 	bl	80127ae <atol>
			if(pcParameterString3[0] == 'p'){
 8006ed0:	2300      	movs	r3, #0
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006ed2:	b2c7      	uxtb	r7, r0
 8006ed4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	BOS_Status result =BOS_OK;
 8006ed6:	2500      	movs	r5, #0
			if(pcParameterString3[0] == 'p'){
 8006ed8:	56c3      	ldrsb	r3, [r0, r3]
 8006eda:	2b70      	cmp	r3, #112	; 0x70
 8006edc:	d1cf      	bne.n	8006e7e <bootloaderUpdateCommand+0x5a>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006ede:	3001      	adds	r0, #1
 8006ee0:	f00b fc65 	bl	80127ae <atol>
			if(module != myID){
 8006ee4:	4c23      	ldr	r4, [pc, #140]	; (8006f74 <bootloaderUpdateCommand+0x150>)
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006ee6:	b2c3      	uxtb	r3, r0
 8006ee8:	4698      	mov	r8, r3
			if(module != myID){
 8006eea:	7823      	ldrb	r3, [r4, #0]
 8006eec:	42bb      	cmp	r3, r7
 8006eee:	d1cb      	bne.n	8006e88 <bootloaderUpdateCommand+0x64>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	3319      	adds	r3, #25
 8006efa:	4640      	mov	r0, r8
 8006efc:	f000 feae 	bl	8007c5c <SendMessageFromPort>
				osDelay(100);
 8006f00:	2064      	movs	r0, #100	; 0x64
 8006f02:	f006 fc4d 	bl	800d7a0 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8006f06:	7820      	ldrb	r0, [r4, #0]
 8006f08:	4b1d      	ldr	r3, [pc, #116]	; (8006f80 <bootloaderUpdateCommand+0x15c>)
 8006f0a:	0001      	movs	r1, r0
 8006f0c:	781a      	ldrb	r2, [r3, #0]
 8006f0e:	4643      	mov	r3, r8
 8006f10:	f002 ffc6 	bl	8009ea0 <remoteBootloaderUpdate>
 8006f14:	e7cd      	b.n	8006eb2 <bootloaderUpdateCommand+0x8e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8006f16:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <bootloaderUpdateCommand+0x150>)
 8006f18:	491b      	ldr	r1, [pc, #108]	; (8006f88 <bootloaderUpdateCommand+0x164>)
 8006f1a:	781a      	ldrb	r2, [r3, #0]
 8006f1c:	0030      	movs	r0, r6
 8006f1e:	f00c f909 	bl	8013134 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8006f22:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <bootloaderUpdateCommand+0x168>)
 8006f24:	0030      	movs	r0, r6
 8006f26:	6819      	ldr	r1, [r3, #0]
 8006f28:	f00c f924 	bl	8013174 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006f2c:	0030      	movs	r0, r6
 8006f2e:	f7f9 f8f3 	bl	8000118 <strlen>
 8006f32:	4b13      	ldr	r3, [pc, #76]	; (8006f80 <bootloaderUpdateCommand+0x15c>)
 8006f34:	b282      	uxth	r2, r0
 8006f36:	7818      	ldrb	r0, [r3, #0]
 8006f38:	2301      	movs	r3, #1
 8006f3a:	425b      	negs	r3, r3
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	0031      	movs	r1, r6
 8006f40:	3333      	adds	r3, #51	; 0x33
 8006f42:	f006 fa6f 	bl	800d424 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8006f46:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <bootloaderUpdateCommand+0x16c>)
 8006f48:	4a12      	ldr	r2, [pc, #72]	; (8006f94 <bootloaderUpdateCommand+0x170>)
		osDelay(10);
 8006f4a:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8006f4c:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8006f4e:	2201      	movs	r2, #1
 8006f50:	4b11      	ldr	r3, [pc, #68]	; (8006f98 <bootloaderUpdateCommand+0x174>)
 8006f52:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006f54:	f006 fc24 	bl	800d7a0 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <bootloaderUpdateCommand+0x178>)
 8006f5e:	4a10      	ldr	r2, [pc, #64]	; (8006fa0 <bootloaderUpdateCommand+0x17c>)
 8006f60:	60da      	str	r2, [r3, #12]
 8006f62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006f66:	46c0      	nop			; (mov r8, r8)
 8006f68:	e7fd      	b.n	8006f66 <bootloaderUpdateCommand+0x142>
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	20001250 	.word	0x20001250
 8006f70:	08019374 	.word	0x08019374
 8006f74:	20000aa8 	.word	0x20000aa8
 8006f78:	20006d34 	.word	0x20006d34
 8006f7c:	20000b4c 	.word	0x20000b4c
 8006f80:	20000c38 	.word	0x20000c38
 8006f84:	08018dec 	.word	0x08018dec
 8006f88:	08019354 	.word	0x08019354
 8006f8c:	20000098 	.word	0x20000098
 8006f90:	20007ff0 	.word	0x20007ff0
 8006f94:	deadbeef 	.word	0xdeadbeef
 8006f98:	2000114e 	.word	0x2000114e
 8006f9c:	e000ed00 	.word	0xe000ed00
 8006fa0:	05fa0004 	.word	0x05fa0004

08006fa4 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fa4:	b510      	push	{r4, lr}
	if(!moduleAlias[myID][0])
 8006fa6:	4b12      	ldr	r3, [pc, #72]	; (8006ff0 <pingCommand+0x4c>)
 8006fa8:	4912      	ldr	r1, [pc, #72]	; (8006ff4 <pingCommand+0x50>)
 8006faa:	781a      	ldrb	r2, [r3, #0]
 8006fac:	0093      	lsls	r3, r2, #2
 8006fae:	189b      	adds	r3, r3, r2
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	5c5c      	ldrb	r4, [r3, r1]
 8006fb4:	2c00      	cmp	r4, #0
 8006fb6:	d016      	beq.n	8006fe6 <pingCommand+0x42>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8006fb8:	185b      	adds	r3, r3, r1
 8006fba:	490f      	ldr	r1, [pc, #60]	; (8006ff8 <pingCommand+0x54>)
 8006fbc:	f00c f8ba 	bl	8013134 <sprintf>
	RTOS_IND_blink(200);
 8006fc0:	2180      	movs	r1, #128	; 0x80
 8006fc2:	2090      	movs	r0, #144	; 0x90
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	0109      	lsls	r1, r1, #4
 8006fc8:	05c0      	lsls	r0, r0, #23
 8006fca:	f009 ff53 	bl	8010e74 <HAL_GPIO_WritePin>
 8006fce:	20c8      	movs	r0, #200	; 0xc8
 8006fd0:	f006 fbe6 	bl	800d7a0 <osDelay>
 8006fd4:	2180      	movs	r1, #128	; 0x80
 8006fd6:	2090      	movs	r0, #144	; 0x90
 8006fd8:	2200      	movs	r2, #0
 8006fda:	0109      	lsls	r1, r1, #4
 8006fdc:	05c0      	lsls	r0, r0, #23
 8006fde:	f009 ff49 	bl	8010e74 <HAL_GPIO_WritePin>
}
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8006fe6:	4905      	ldr	r1, [pc, #20]	; (8006ffc <pingCommand+0x58>)
 8006fe8:	f00c f8a4 	bl	8013134 <sprintf>
 8006fec:	e7e8      	b.n	8006fc0 <pingCommand+0x1c>
 8006fee:	46c0      	nop			; (mov r8, r8)
 8006ff0:	20000aa8 	.word	0x20000aa8
 8006ff4:	20000dd4 	.word	0x20000dd4
 8006ff8:	0801938c 	.word	0x0801938c
 8006ffc:	08019378 	.word	0x08019378

08007000 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007000:	b510      	push	{r4, lr}
 8007002:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007004:	2241      	movs	r2, #65	; 0x41
 8007006:	4904      	ldr	r1, [pc, #16]	; (8007018 <prvRunTimeStatsCommand+0x18>)
 8007008:	f00b fe91 	bl	8012d2e <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800700c:	0020      	movs	r0, r4
 800700e:	3040      	adds	r0, #64	; 0x40
 8007010:	f007 fe16 	bl	800ec40 <vTaskGetRunTimeStats>
}
 8007014:	2000      	movs	r0, #0
 8007016:	bd10      	pop	{r4, pc}
 8007018:	080193a8 	.word	0x080193a8

0800701c <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800701c:	b510      	push	{r4, lr}
 800701e:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007020:	2250      	movs	r2, #80	; 0x50
 8007022:	4904      	ldr	r1, [pc, #16]	; (8007034 <prvTaskStatsCommand+0x18>)
 8007024:	f00b fe83 	bl	8012d2e <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 8007028:	0020      	movs	r0, r4
 800702a:	304f      	adds	r0, #79	; 0x4f
 800702c:	f007 fdae 	bl	800eb8c <vTaskList>
}
 8007030:	2000      	movs	r0, #0
 8007032:	bd10      	pop	{r4, pc}
 8007034:	080193ec 	.word	0x080193ec

08007038 <setBaudrateCommand>:
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0;
 800703c:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800703e:	b082      	sub	sp, #8
 8007040:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007042:	466a      	mov	r2, sp
 8007044:	2101      	movs	r1, #1
 8007046:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0;
 8007048:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 800704a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800704c:	f006 fcb4 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8007050:	2300      	movs	r3, #0
 8007052:	56c3      	ldrsb	r3, [r0, r3]
 8007054:	2b70      	cmp	r3, #112	; 0x70
 8007056:	d00e      	beq.n	8007076 <setBaudrateCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007058:	aa01      	add	r2, sp, #4
 800705a:	2102      	movs	r1, #2
 800705c:	0020      	movs	r0, r4
 800705e:	f006 fcab 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8007062:	f00b fba4 	bl	80127ae <atol>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8007066:	2213      	movs	r2, #19
 8007068:	490f      	ldr	r1, [pc, #60]	; (80070a8 <setBaudrateCommand+0x70>)
 800706a:	0028      	movs	r0, r5
 800706c:	f00b fe5f 	bl	8012d2e <memcpy>
}
 8007070:	2000      	movs	r0, #0
 8007072:	b002      	add	sp, #8
 8007074:	bd70      	pop	{r4, r5, r6, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8007076:	3001      	adds	r0, #1
 8007078:	f00b fb99 	bl	80127ae <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800707c:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800707e:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007080:	2102      	movs	r1, #2
 8007082:	0020      	movs	r0, r4
 8007084:	f006 fc98 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8007088:	f00b fb91 	bl	80127ae <atol>
 800708c:	0004      	movs	r4, r0
		UpdateBaudrate(port,baudrate);
 800708e:	b2f0      	uxtb	r0, r6
 8007090:	0021      	movs	r1, r4
 8007092:	f006 fa3d 	bl	800d510 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 8007096:	23ff      	movs	r3, #255	; 0xff
 8007098:	0022      	movs	r2, r4
 800709a:	4033      	ands	r3, r6
 800709c:	4903      	ldr	r1, [pc, #12]	; (80070ac <setBaudrateCommand+0x74>)
 800709e:	0028      	movs	r0, r5
 80070a0:	f00c f848 	bl	8013134 <sprintf>
 80070a4:	e7e4      	b.n	8007070 <setBaudrateCommand+0x38>
 80070a6:	46c0      	nop			; (mov r8, r8)
 80070a8:	08019464 	.word	0x08019464
 80070ac:	0801943c 	.word	0x0801943c

080070b0 <GetReadPrecentageCommand>:

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80070b0:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070b2:	b510      	push	{r4, lr}
 80070b4:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 80070b6:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80070b8:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070ba:	0004      	movs	r4, r0
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070bc:	2101      	movs	r1, #1
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070be:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070c0:	466a      	mov	r2, sp
	float ADC_Value_CLI =0;
 80070c2:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070c4:	f006 fc78 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80070c8:	7803      	ldrb	r3, [r0, #0]
 80070ca:	3b32      	subs	r3, #50	; 0x32
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d907      	bls.n	80070e0 <GetReadPrecentageCommand+0x30>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80070d0:	2215      	movs	r2, #21
 80070d2:	490b      	ldr	r1, [pc, #44]	; (8007100 <GetReadPrecentageCommand+0x50>)
 80070d4:	0020      	movs	r0, r4
 80070d6:	f00b fe2a 	bl	8012d2e <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80070da:	2000      	movs	r0, #0
 80070dc:	b002      	add	sp, #8
 80070de:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80070e0:	f00b fb65 	bl	80127ae <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80070e4:	a901      	add	r1, sp, #4
 80070e6:	b2c0      	uxtb	r0, r0
 80070e8:	f005 f8d2 	bl	800c290 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 80070ec:	9801      	ldr	r0, [sp, #4]
 80070ee:	f7fb fd19 	bl	8002b24 <__aeabi_f2d>
 80070f2:	0002      	movs	r2, r0
 80070f4:	000b      	movs	r3, r1
 80070f6:	0020      	movs	r0, r4
 80070f8:	4902      	ldr	r1, [pc, #8]	; (8007104 <GetReadPrecentageCommand+0x54>)
 80070fa:	f00c f81b 	bl	8013134 <sprintf>
 80070fe:	e7ec      	b.n	80070da <GetReadPrecentageCommand+0x2a>
 8007100:	0801889c 	.word	0x0801889c
 8007104:	08019478 	.word	0x08019478

08007108 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007108:	b510      	push	{r4, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	0004      	movs	r4, r0
	GetTimeDate();
 800710e:	f005 ff4b 	bl	800cfa8 <GetTimeDate>
	if(BOS.hourformat == 24)
 8007112:	4915      	ldr	r1, [pc, #84]	; (8007168 <timeCommand+0x60>)
 8007114:	7b4b      	ldrb	r3, [r1, #13]
 8007116:	2b18      	cmp	r3, #24
 8007118:	d016      	beq.n	8007148 <timeCommand+0x40>
	else if(BOS.hourformat == 12){
 800711a:	2b0c      	cmp	r3, #12
 800711c:	d002      	beq.n	8007124 <timeCommand+0x1c>
}
 800711e:	2000      	movs	r0, #0
 8007120:	b004      	add	sp, #16
 8007122:	bd10      	pop	{r4, pc}
		if(BOS.time.ampm == RTC_AM)
 8007124:	7ccb      	ldrb	r3, [r1, #19]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d019      	beq.n	800715e <timeCommand+0x56>
		else if(BOS.time.ampm == RTC_PM)
 800712a:	2b02      	cmp	r3, #2
 800712c:	d1f7      	bne.n	800711e <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800712e:	7c4b      	ldrb	r3, [r1, #17]
 8007130:	7c8a      	ldrb	r2, [r1, #18]
 8007132:	480e      	ldr	r0, [pc, #56]	; (800716c <timeCommand+0x64>)
 8007134:	9002      	str	r0, [sp, #8]
 8007136:	89c8      	ldrh	r0, [r1, #14]
 8007138:	9001      	str	r0, [sp, #4]
 800713a:	7c09      	ldrb	r1, [r1, #16]
 800713c:	0020      	movs	r0, r4
 800713e:	9100      	str	r1, [sp, #0]
 8007140:	490b      	ldr	r1, [pc, #44]	; (8007170 <timeCommand+0x68>)
 8007142:	f00b fff7 	bl	8013134 <sprintf>
 8007146:	e7ea      	b.n	800711e <timeCommand+0x16>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8007148:	89c8      	ldrh	r0, [r1, #14]
 800714a:	7c4b      	ldrb	r3, [r1, #17]
 800714c:	7c8a      	ldrb	r2, [r1, #18]
 800714e:	9001      	str	r0, [sp, #4]
 8007150:	7c09      	ldrb	r1, [r1, #16]
 8007152:	0020      	movs	r0, r4
 8007154:	9100      	str	r1, [sp, #0]
 8007156:	4907      	ldr	r1, [pc, #28]	; (8007174 <timeCommand+0x6c>)
 8007158:	f00b ffec 	bl	8013134 <sprintf>
 800715c:	e7df      	b.n	800711e <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 800715e:	7c4b      	ldrb	r3, [r1, #17]
 8007160:	7c8a      	ldrb	r2, [r1, #18]
 8007162:	4805      	ldr	r0, [pc, #20]	; (8007178 <timeCommand+0x70>)
 8007164:	e7e6      	b.n	8007134 <timeCommand+0x2c>
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	20006db4 	.word	0x20006db4
 800716c:	080194f4 	.word	0x080194f4
 8007170:	080194c4 	.word	0x080194c4
 8007174:	0801949c 	.word	0x0801949c
 8007178:	080194f0 	.word	0x080194f0

0800717c <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	4b03      	ldr	r3, [pc, #12]	; (8007190 <resetCommand+0x14>)
 8007182:	4a04      	ldr	r2, [pc, #16]	; (8007194 <resetCommand+0x18>)
 8007184:	60da      	str	r2, [r3, #12]
 8007186:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	e7fd      	b.n	800718a <resetCommand+0xe>
 800718e:	46c0      	nop			; (mov r8, r8)
 8007190:	e000ed00 	.word	0xe000ed00
 8007194:	05fa0004 	.word	0x05fa0004

08007198 <RegisterUserCLICommands>:
}
 8007198:	4770      	bx	lr
 800719a:	46c0      	nop			; (mov r8, r8)

0800719c <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 800719c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 800719e:	4c45      	ldr	r4, [pc, #276]	; (80072b4 <vRegisterCLICommands+0x118>)
 80071a0:	0020      	movs	r0, r4
 80071a2:	f006 fb75 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80071a6:	0020      	movs	r0, r4
 80071a8:	3010      	adds	r0, #16
 80071aa:	f006 fb71 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80071ae:	0020      	movs	r0, r4
 80071b0:	3020      	adds	r0, #32
 80071b2:	f006 fb6d 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 80071b6:	0020      	movs	r0, r4
 80071b8:	3030      	adds	r0, #48	; 0x30
 80071ba:	f006 fb69 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 80071be:	0020      	movs	r0, r4
 80071c0:	3040      	adds	r0, #64	; 0x40
 80071c2:	f006 fb65 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 80071c6:	0020      	movs	r0, r4
 80071c8:	3050      	adds	r0, #80	; 0x50
 80071ca:	f006 fb61 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80071ce:	0020      	movs	r0, r4
 80071d0:	3060      	adds	r0, #96	; 0x60
 80071d2:	f006 fb5d 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80071d6:	0020      	movs	r0, r4
 80071d8:	3070      	adds	r0, #112	; 0x70
 80071da:	f006 fb59 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80071de:	4c36      	ldr	r4, [pc, #216]	; (80072b8 <vRegisterCLICommands+0x11c>)
 80071e0:	0020      	movs	r0, r4
 80071e2:	f006 fb55 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 80071e6:	0020      	movs	r0, r4
 80071e8:	3010      	adds	r0, #16
 80071ea:	f006 fb51 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 80071ee:	0020      	movs	r0, r4
 80071f0:	3020      	adds	r0, #32
 80071f2:	f006 fb4d 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 80071f6:	0020      	movs	r0, r4
 80071f8:	3030      	adds	r0, #48	; 0x30
 80071fa:	f006 fb49 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 80071fe:	0020      	movs	r0, r4
 8007200:	3040      	adds	r0, #64	; 0x40
 8007202:	f006 fb45 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8007206:	0020      	movs	r0, r4
 8007208:	3050      	adds	r0, #80	; 0x50
 800720a:	f006 fb41 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 800720e:	0020      	movs	r0, r4
 8007210:	3060      	adds	r0, #96	; 0x60
 8007212:	f006 fb3d 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007216:	0020      	movs	r0, r4
 8007218:	3070      	adds	r0, #112	; 0x70
 800721a:	f006 fb39 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800721e:	4c27      	ldr	r4, [pc, #156]	; (80072bc <vRegisterCLICommands+0x120>)
 8007220:	0020      	movs	r0, r4
 8007222:	f006 fb35 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007226:	0020      	movs	r0, r4
 8007228:	3010      	adds	r0, #16
 800722a:	f006 fb31 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 800722e:	0020      	movs	r0, r4
 8007230:	3020      	adds	r0, #32
 8007232:	f006 fb2d 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007236:	0020      	movs	r0, r4
 8007238:	3030      	adds	r0, #48	; 0x30
 800723a:	f006 fb29 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 800723e:	0020      	movs	r0, r4
 8007240:	3040      	adds	r0, #64	; 0x40
 8007242:	f006 fb25 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 8007246:	0020      	movs	r0, r4
 8007248:	3050      	adds	r0, #80	; 0x50
 800724a:	f006 fb21 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 800724e:	0020      	movs	r0, r4
 8007250:	3060      	adds	r0, #96	; 0x60
 8007252:	f006 fb1d 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007256:	0020      	movs	r0, r4
 8007258:	3070      	adds	r0, #112	; 0x70
 800725a:	f006 fb19 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800725e:	4c18      	ldr	r4, [pc, #96]	; (80072c0 <vRegisterCLICommands+0x124>)
 8007260:	0020      	movs	r0, r4
 8007262:	f006 fb15 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007266:	0020      	movs	r0, r4
 8007268:	3010      	adds	r0, #16
 800726a:	f006 fb11 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 800726e:	0020      	movs	r0, r4
 8007270:	3020      	adds	r0, #32
 8007272:	f006 fb0d 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8007276:	0020      	movs	r0, r4
 8007278:	3030      	adds	r0, #48	; 0x30
 800727a:	f006 fb09 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 800727e:	0020      	movs	r0, r4
 8007280:	3040      	adds	r0, #64	; 0x40
 8007282:	f006 fb05 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 8007286:	0020      	movs	r0, r4
 8007288:	3050      	adds	r0, #80	; 0x50
 800728a:	f006 fb01 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 800728e:	0020      	movs	r0, r4
 8007290:	3060      	adds	r0, #96	; 0x60
 8007292:	f006 fafd 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007296:	0020      	movs	r0, r4
 8007298:	3070      	adds	r0, #112	; 0x70
 800729a:	f006 faf9 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800729e:	4809      	ldr	r0, [pc, #36]	; (80072c4 <vRegisterCLICommands+0x128>)
 80072a0:	f006 faf6 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80072a4:	2223      	movs	r2, #35	; 0x23
 80072a6:	4b08      	ldr	r3, [pc, #32]	; (80072c8 <vRegisterCLICommands+0x12c>)
 80072a8:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80072aa:	f002 fe7d 	bl	8009fa8 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80072ae:	f7ff ff73 	bl	8007198 <RegisterUserCLICommands>
}
 80072b2:	bd10      	pop	{r4, pc}
 80072b4:	080176a0 	.word	0x080176a0
 80072b8:	08017720 	.word	0x08017720
 80072bc:	080177a0 	.word	0x080177a0
 80072c0:	08017820 	.word	0x08017820
 80072c4:	080178a0 	.word	0x080178a0
 80072c8:	20006d30 	.word	0x20006d30

080072cc <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 80072cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ce:	46c6      	mov	lr, r8
 80072d0:	b500      	push	{lr}
 80072d2:	0005      	movs	r5, r0
 80072d4:	000e      	movs	r6, r1
 80072d6:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 80072d8:	f002 fe7a 	bl	8009fd0 <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80072dc:	4b0f      	ldr	r3, [pc, #60]	; (800731c <StartDMAstream+0x50>)
	uint8_t srcPort =GetPort(huartSrc);
 80072de:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80072e0:	4698      	mov	r8, r3
 80072e2:	5c1b      	ldrb	r3, [r3, r0]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d902      	bls.n	80072ee <StartDMAstream+0x22>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 80072e8:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d112      	bne.n	8007314 <StartDMAstream+0x48>
		SwitchMsgDMAToStream(srcPort);
 80072ee:	0020      	movs	r0, r4
 80072f0:	f003 f888 	bl	800a404 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 80072f4:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <StartDMAstream+0x54>)
 80072f6:	1e62      	subs	r2, r4, #1
 80072f8:	0092      	lsls	r2, r2, #2
 80072fa:	50d6      	str	r6, [r2, r3]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 80072fc:	2102      	movs	r1, #2
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80072fe:	189b      	adds	r3, r3, r2
	portStatus[srcPort] =STREAM;
 8007300:	4640      	mov	r0, r8
	dmaStreamCount[srcPort - 1] =0;
 8007302:	2200      	movs	r2, #0
	portStatus[srcPort] =STREAM;
 8007304:	5501      	strb	r1, [r0, r4]
	dmaStreamCount[srcPort - 1] =0;
 8007306:	615a      	str	r2, [r3, #20]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007308:	0028      	movs	r0, r5
 800730a:	003a      	movs	r2, r7
 800730c:	0031      	movs	r1, r6
 800730e:	f003 fcdd 	bl	800accc <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007312:	2000      	movs	r0, #0
}
 8007314:	bc04      	pop	{r2}
 8007316:	4690      	mov	r8, r2
 8007318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800731a:	46c0      	nop			; (mov r8, r8)
 800731c:	20000c3c 	.word	0x20000c3c
 8007320:	200012cc 	.word	0x200012cc

08007324 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007324:	b570      	push	{r4, r5, r6, lr}
 8007326:	0005      	movs	r5, r0
	if(portStatus[port] != STREAM){
 8007328:	4b0f      	ldr	r3, [pc, #60]	; (8007368 <DMA_IRQHandler+0x44>)
 800732a:	1e44      	subs	r4, r0, #1
 800732c:	00e0      	lsls	r0, r4, #3
 800732e:	5d5b      	ldrb	r3, [r3, r5]
 8007330:	1b00      	subs	r0, r0, r4
 8007332:	00c0      	lsls	r0, r0, #3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d004      	beq.n	8007342 <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007338:	4b0c      	ldr	r3, [pc, #48]	; (800736c <DMA_IRQHandler+0x48>)
 800733a:	18c0      	adds	r0, r0, r3
 800733c:	f008 fe18 	bl	800ff70 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007340:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <DMA_IRQHandler+0x4c>)
		if(dmaStreamTotal[port - 1])
 8007344:	00a4      	lsls	r4, r4, #2
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007346:	18c0      	adds	r0, r0, r3
 8007348:	f008 fe12 	bl	800ff70 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 800734c:	4b09      	ldr	r3, [pc, #36]	; (8007374 <DMA_IRQHandler+0x50>)
 800734e:	191c      	adds	r4, r3, r4
 8007350:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007352:	2a00      	cmp	r2, #0
 8007354:	d004      	beq.n	8007360 <DMA_IRQHandler+0x3c>
			++dmaStreamCount[port - 1];
 8007356:	6963      	ldr	r3, [r4, #20]
 8007358:	3301      	adds	r3, #1
 800735a:	6163      	str	r3, [r4, #20]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800735c:	429a      	cmp	r2, r3
 800735e:	d8ef      	bhi.n	8007340 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007360:	0028      	movs	r0, r5
 8007362:	f003 f837 	bl	800a3d4 <StopStreamDMA>
 8007366:	e7eb      	b.n	8007340 <DMA_IRQHandler+0x1c>
 8007368:	20000c3c 	.word	0x20000c3c
 800736c:	20001cd8 	.word	0x20001cd8
 8007370:	20001ae0 	.word	0x20001ae0
 8007374:	200012cc 	.word	0x200012cc

08007378 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007378:	4b08      	ldr	r3, [pc, #32]	; (800739c <ResetUartORE+0x24>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	2308      	movs	r3, #8
 800737e:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007380:	4a07      	ldr	r2, [pc, #28]	; (80073a0 <ResetUartORE+0x28>)
 8007382:	6812      	ldr	r2, [r2, #0]
 8007384:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8007386:	4a07      	ldr	r2, [pc, #28]	; (80073a4 <ResetUartORE+0x2c>)
 8007388:	6812      	ldr	r2, [r2, #0]
 800738a:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 800738c:	4a06      	ldr	r2, [pc, #24]	; (80073a8 <ResetUartORE+0x30>)
 800738e:	6812      	ldr	r2, [r2, #0]
 8007390:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007392:	4a06      	ldr	r2, [pc, #24]	; (80073ac <ResetUartORE+0x34>)
 8007394:	6812      	ldr	r2, [r2, #0]
 8007396:	6213      	str	r3, [r2, #32]
#endif
}
 8007398:	4770      	bx	lr
 800739a:	46c0      	nop			; (mov r8, r8)
 800739c:	20006fc4 	.word	0x20006fc4
 80073a0:	200070bc 	.word	0x200070bc
 80073a4:	20006e9c 	.word	0x20006e9c
 80073a8:	20006f54 	.word	0x20006f54
 80073ac:	20007044 	.word	0x20007044

080073b0 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 80073b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073b2:	46c6      	mov	lr, r8
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80073b4:	26a0      	movs	r6, #160	; 0xa0
 80073b6:	2400      	movs	r4, #0
 80073b8:	2703      	movs	r7, #3
void MX_FREERTOS_Init(void){
 80073ba:	b500      	push	{lr}
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80073bc:	4d5a      	ldr	r5, [pc, #360]	; (8007528 <MX_FREERTOS_Init+0x178>)
void MX_FREERTOS_Init(void){
 80073be:	b08e      	sub	sp, #56	; 0x38
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80073c0:	0076      	lsls	r6, r6, #1
 80073c2:	9501      	str	r5, [sp, #4]
 80073c4:	9700      	str	r7, [sp, #0]
 80073c6:	0032      	movs	r2, r6
 80073c8:	9403      	str	r4, [sp, #12]
 80073ca:	9402      	str	r4, [sp, #8]
 80073cc:	2300      	movs	r3, #0
 80073ce:	4957      	ldr	r1, [pc, #348]	; (800752c <MX_FREERTOS_Init+0x17c>)
 80073d0:	4857      	ldr	r0, [pc, #348]	; (8007530 <MX_FREERTOS_Init+0x180>)
 80073d2:	f006 ffa3 	bl	800e31c <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 80073d6:	1d2b      	adds	r3, r5, #4
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	9700      	str	r7, [sp, #0]
 80073dc:	0032      	movs	r2, r6
 80073de:	9403      	str	r4, [sp, #12]
 80073e0:	9402      	str	r4, [sp, #8]
 80073e2:	2300      	movs	r3, #0
 80073e4:	4953      	ldr	r1, [pc, #332]	; (8007534 <MX_FREERTOS_Init+0x184>)
 80073e6:	4854      	ldr	r0, [pc, #336]	; (8007538 <MX_FREERTOS_Init+0x188>)
 80073e8:	f006 ff98 	bl	800e31c <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 80073ec:	002b      	movs	r3, r5
 80073ee:	3308      	adds	r3, #8
 80073f0:	0032      	movs	r2, r6
 80073f2:	9301      	str	r3, [sp, #4]
 80073f4:	9700      	str	r7, [sp, #0]
 80073f6:	2300      	movs	r3, #0
 80073f8:	4950      	ldr	r1, [pc, #320]	; (800753c <MX_FREERTOS_Init+0x18c>)
 80073fa:	9403      	str	r4, [sp, #12]
 80073fc:	9402      	str	r4, [sp, #8]
 80073fe:	4850      	ldr	r0, [pc, #320]	; (8007540 <MX_FREERTOS_Init+0x190>)
 8007400:	f006 ff8c 	bl	800e31c <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007404:	f7ff feca 	bl	800719c <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007408:	002b      	movs	r3, r5
 800740a:	330c      	adds	r3, #12
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	9700      	str	r7, [sp, #0]
 8007410:	0032      	movs	r2, r6
 8007412:	9403      	str	r4, [sp, #12]
 8007414:	9402      	str	r4, [sp, #8]
 8007416:	2300      	movs	r3, #0
 8007418:	494a      	ldr	r1, [pc, #296]	; (8007544 <MX_FREERTOS_Init+0x194>)
 800741a:	484b      	ldr	r0, [pc, #300]	; (8007548 <MX_FREERTOS_Init+0x198>)
 800741c:	f006 ff7e 	bl	800e31c <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007420:	002b      	movs	r3, r5
 8007422:	3310      	adds	r3, #16
 8007424:	9301      	str	r3, [sp, #4]
 8007426:	2304      	movs	r3, #4
 8007428:	4f48      	ldr	r7, [pc, #288]	; (800754c <MX_FREERTOS_Init+0x19c>)
 800742a:	4698      	mov	r8, r3
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	0032      	movs	r2, r6
 8007430:	9403      	str	r4, [sp, #12]
 8007432:	9402      	str	r4, [sp, #8]
 8007434:	3b03      	subs	r3, #3
 8007436:	4946      	ldr	r1, [pc, #280]	; (8007550 <MX_FREERTOS_Init+0x1a0>)
 8007438:	0038      	movs	r0, r7
 800743a:	f006 ff6f 	bl	800e31c <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 800743e:	002b      	movs	r3, r5
 8007440:	3314      	adds	r3, #20
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	4643      	mov	r3, r8
 8007446:	0032      	movs	r2, r6
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	9403      	str	r4, [sp, #12]
 800744c:	9402      	str	r4, [sp, #8]
 800744e:	3b02      	subs	r3, #2
 8007450:	4940      	ldr	r1, [pc, #256]	; (8007554 <MX_FREERTOS_Init+0x1a4>)
 8007452:	0038      	movs	r0, r7
 8007454:	f006 ff62 	bl	800e31c <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007458:	002b      	movs	r3, r5
 800745a:	3318      	adds	r3, #24
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	4643      	mov	r3, r8
 8007460:	0032      	movs	r2, r6
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	9403      	str	r4, [sp, #12]
 8007466:	9402      	str	r4, [sp, #8]
 8007468:	3b01      	subs	r3, #1
 800746a:	493b      	ldr	r1, [pc, #236]	; (8007558 <MX_FREERTOS_Init+0x1a8>)
 800746c:	0038      	movs	r0, r7
 800746e:	f006 ff55 	bl	800e31c <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007472:	002b      	movs	r3, r5
 8007474:	331c      	adds	r3, #28
 8007476:	9301      	str	r3, [sp, #4]
 8007478:	4643      	mov	r3, r8
 800747a:	0032      	movs	r2, r6
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	9403      	str	r4, [sp, #12]
 8007480:	9402      	str	r4, [sp, #8]
 8007482:	4936      	ldr	r1, [pc, #216]	; (800755c <MX_FREERTOS_Init+0x1ac>)
 8007484:	0038      	movs	r0, r7
 8007486:	f006 ff49 	bl	800e31c <xTaskGenericCreate>
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 800748a:	4643      	mov	r3, r8
 800748c:	3520      	adds	r5, #32
 800748e:	0032      	movs	r2, r6
 8007490:	9501      	str	r5, [sp, #4]
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	9403      	str	r4, [sp, #12]
 8007496:	3301      	adds	r3, #1
 8007498:	9402      	str	r4, [sp, #8]
 800749a:	4931      	ldr	r1, [pc, #196]	; (8007560 <MX_FREERTOS_Init+0x1b0>)
 800749c:	0038      	movs	r0, r7
 800749e:	f006 ff3d 	bl	800e31c <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074a2:	2101      	movs	r1, #1
 80074a4:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 80074a6:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074a8:	f006 f9a6 	bl	800d7f8 <osSemaphoreCreate>
 80074ac:	4e2d      	ldr	r6, [pc, #180]	; (8007564 <MX_FREERTOS_Init+0x1b4>)
	osSemaphoreDef(SemaphoreP2);
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074ae:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074b0:	6070      	str	r0, [r6, #4]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074b2:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 80074b4:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074b6:	f006 f99f 	bl	800d7f8 <osSemaphoreCreate>
 80074ba:	4d2b      	ldr	r5, [pc, #172]	; (8007568 <MX_FREERTOS_Init+0x1b8>)
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074bc:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074be:	6068      	str	r0, [r5, #4]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074c0:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 80074c2:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074c4:	f006 f998 	bl	800d7f8 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP4);
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074c8:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074ca:	60b0      	str	r0, [r6, #8]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074cc:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 80074ce:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074d0:	f006 f992 	bl	800d7f8 <osSemaphoreCreate>
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80074d4:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074d6:	60a8      	str	r0, [r5, #8]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80074d8:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 80074da:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80074dc:	f006 f98c 	bl	800d7f8 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP6);
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80074e0:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80074e2:	60f0      	str	r0, [r6, #12]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80074e4:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 80074e6:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80074e8:	f006 f986 	bl	800d7f8 <osSemaphoreCreate>
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 80074ec:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80074ee:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 80074f0:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 80074f2:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 80074f4:	f006 f980 	bl	800d7f8 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP8);
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 80074f8:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 80074fa:	6130      	str	r0, [r6, #16]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 80074fc:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 80074fe:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007500:	f006 f97a 	bl	800d7f8 <osSemaphoreCreate>
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007504:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007506:	6128      	str	r0, [r5, #16]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007508:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 800750a:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800750c:	f006 f974 	bl	800d7f8 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP10);
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007510:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007512:	6170      	str	r0, [r6, #20]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007514:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 8007516:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007518:	f006 f96e 	bl	800d7f8 <osSemaphoreCreate>
 800751c:	6168      	str	r0, [r5, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
#endif
	
}
 800751e:	b00e      	add	sp, #56	; 0x38
 8007520:	bc04      	pop	{r2}
 8007522:	4690      	mov	r8, r2
 8007524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007526:	46c0      	nop			; (mov r8, r8)
 8007528:	20001710 	.word	0x20001710
 800752c:	0801a174 	.word	0x0801a174
 8007530:	0800796d 	.word	0x0800796d
 8007534:	0801a180 	.word	0x0801a180
 8007538:	080082dd 	.word	0x080082dd
 800753c:	0801a18c 	.word	0x0801a18c
 8007540:	08012795 	.word	0x08012795
 8007544:	0801a198 	.word	0x0801a198
 8007548:	0800507d 	.word	0x0800507d
 800754c:	080086c9 	.word	0x080086c9
 8007550:	0801a1a0 	.word	0x0801a1a0
 8007554:	0801a1ac 	.word	0x0801a1ac
 8007558:	0801a1b8 	.word	0x0801a1b8
 800755c:	0801a1c4 	.word	0x0801a1c4
 8007560:	0801a1d0 	.word	0x0801a1d0
 8007564:	20006e58 	.word	0x20006e58
 8007568:	20006e38 	.word	0x20006e38

0800756c <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 800756c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800756e:	46de      	mov	lr, fp
 8007570:	4657      	mov	r7, sl
 8007572:	464e      	mov	r6, r9
 8007574:	4645      	mov	r5, r8
 8007576:	b5e0      	push	{r5, r6, r7, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 8007578:	4bd4      	ldr	r3, [pc, #848]	; (80078cc <ExecuteMonitor+0x360>)
{
 800757a:	b085      	sub	sp, #20
    if(Monitor_time == INTIAL_VALUE)
 800757c:	469b      	mov	fp, r3
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b03      	cmp	r3, #3
 8007582:	d006      	beq.n	8007592 <ExecuteMonitor+0x26>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
		           }
	}
  }
}
 8007584:	b005      	add	sp, #20
 8007586:	bc3c      	pop	{r2, r3, r4, r5}
 8007588:	4690      	mov	r8, r2
 800758a:	4699      	mov	r9, r3
 800758c:	46a2      	mov	sl, r4
 800758e:	46ab      	mov	fp, r5
 8007590:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Monitor_time =0;
 8007592:	2300      	movs	r3, #0
 8007594:	465a      	mov	r2, fp
 8007596:	6013      	str	r3, [r2, #0]
	flag=0;
 8007598:	7113      	strb	r3, [r2, #4]
	currentCharacter=SPACE;
 800759a:	3320      	adds	r3, #32
 800759c:	7153      	strb	r3, [r2, #5]
 800759e:	4bcc      	ldr	r3, [pc, #816]	; (80078d0 <ExecuteMonitor+0x364>)
 80075a0:	4ecc      	ldr	r6, [pc, #816]	; (80078d4 <ExecuteMonitor+0x368>)
 80075a2:	4699      	mov	r9, r3
 80075a4:	4bcc      	ldr	r3, [pc, #816]	; (80078d8 <ExecuteMonitor+0x36c>)
 80075a6:	4dcd      	ldr	r5, [pc, #820]	; (80078dc <ExecuteMonitor+0x370>)
 80075a8:	469a      	mov	sl, r3
 80075aa:	4ccd      	ldr	r4, [pc, #820]	; (80078e0 <ExecuteMonitor+0x374>)
		                    nonProcessingParameterIndex=0;
 80075ac:	2200      	movs	r2, #0
 80075ae:	4bcd      	ldr	r3, [pc, #820]	; (80078e4 <ExecuteMonitor+0x378>)
		            	    perviousCharacter= INTIAL_VALUE;
 80075b0:	2703      	movs	r7, #3
		                    nonProcessingParameterIndex=0;
 80075b2:	701a      	strb	r2, [r3, #0]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 80075b4:	2320      	movs	r3, #32
 80075b6:	4698      	mov	r8, r3
 80075b8:	e004      	b.n	80075c4 <ExecuteMonitor+0x58>
 80075ba:	2a01      	cmp	r2, #1
 80075bc:	d04c      	beq.n	8007658 <ExecuteMonitor+0xec>
 80075be:	2a02      	cmp	r2, #2
 80075c0:	d100      	bne.n	80075c4 <ExecuteMonitor+0x58>
 80075c2:	e0a8      	b.n	8007716 <ExecuteMonitor+0x1aa>
		            	    perviousCharacter= INTIAL_VALUE;
 80075c4:	464b      	mov	r3, r9
		            	    Delay_us(100);
 80075c6:	2064      	movs	r0, #100	; 0x64
		            	    perviousCharacter= INTIAL_VALUE;
 80075c8:	701f      	strb	r7, [r3, #0]
		            	    Delay_us(100);
 80075ca:	f005 fd81 	bl	800d0d0 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 80075ce:	465b      	mov	r3, fp
 80075d0:	464a      	mov	r2, r9
 80075d2:	795b      	ldrb	r3, [r3, #5]
 80075d4:	7812      	ldrb	r2, [r2, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d00b      	beq.n	80075f2 <ExecuteMonitor+0x86>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 80075da:	4ac2      	ldr	r2, [pc, #776]	; (80078e4 <ExecuteMonitor+0x378>)
 80075dc:	48c1      	ldr	r0, [pc, #772]	; (80078e4 <ExecuteMonitor+0x378>)
 80075de:	7812      	ldrb	r2, [r2, #0]
 80075e0:	1c51      	adds	r1, r2, #1
 80075e2:	7001      	strb	r1, [r0, #0]
 80075e4:	2124      	movs	r1, #36	; 0x24
 80075e6:	4452      	add	r2, sl
 80075e8:	5453      	strb	r3, [r2, r1]
								perviousCharacter=currentCharacter;
 80075ea:	464a      	mov	r2, r9
 80075ec:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 80075ee:	465a      	mov	r2, fp
 80075f0:	7157      	strb	r7, [r2, #5]
 80075f2:	465a      	mov	r2, fp
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 80075f4:	4641      	mov	r1, r8
 80075f6:	7912      	ldrb	r2, [r2, #4]
 80075f8:	438b      	bics	r3, r1
 80075fa:	d1de      	bne.n	80075ba <ExecuteMonitor+0x4e>
                   if(flag == NonActive)
 80075fc:	2a00      	cmp	r2, #0
 80075fe:	d129      	bne.n	8007654 <ExecuteMonitor+0xe8>
                	   nonProcessingParameterIndex=0;
 8007600:	4bb8      	ldr	r3, [pc, #736]	; (80078e4 <ExecuteMonitor+0x378>)
 8007602:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 8007604:	4653      	mov	r3, sl
 8007606:	3224      	adds	r2, #36	; 0x24
 8007608:	5c9b      	ldrb	r3, [r3, r2]
 800760a:	2b5b      	cmp	r3, #91	; 0x5b
 800760c:	d100      	bne.n	8007610 <ExecuteMonitor+0xa4>
 800760e:	e0eb      	b.n	80077e8 <ExecuteMonitor+0x27c>
 		            else if(FirstCharacterInParameter == '#')
 8007610:	2b23      	cmp	r3, #35	; 0x23
 8007612:	d100      	bne.n	8007616 <ExecuteMonitor+0xaa>
 8007614:	e141      	b.n	800789a <ExecuteMonitor+0x32e>
 		            else if(FirstCharacterInParameter == '=')
 8007616:	2b3d      	cmp	r3, #61	; 0x3d
 8007618:	d100      	bne.n	800761c <ExecuteMonitor+0xb0>
 800761a:	e175      	b.n	8007908 <ExecuteMonitor+0x39c>
 800761c:	2338      	movs	r3, #56	; 0x38
 800761e:	4652      	mov	r2, sl
 8007620:	5cd7      	ldrb	r7, [r2, r3]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007622:	4650      	mov	r0, sl
               	   desiredArray=ParameterLocationIn2dArray;
 8007624:	4bb0      	ldr	r3, [pc, #704]	; (80078e8 <ExecuteMonitor+0x37c>)
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007626:	0139      	lsls	r1, r7, #4
               	   desiredArray=ParameterLocationIn2dArray;
 8007628:	701f      	strb	r7, [r3, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800762a:	304c      	adds	r0, #76	; 0x4c
 800762c:	1bcf      	subs	r7, r1, r7
 800762e:	19c0      	adds	r0, r0, r7
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8007630:	4657      	mov	r7, sl
 8007632:	3738      	adds	r7, #56	; 0x38
 8007634:	0039      	movs	r1, r7
 8007636:	220f      	movs	r2, #15
 8007638:	f00b fb79 	bl	8012d2e <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 800763c:	4650      	mov	r0, sl
 800763e:	2214      	movs	r2, #20
 8007640:	2100      	movs	r1, #0
 8007642:	3024      	adds	r0, #36	; 0x24
 8007644:	f00b fb7c 	bl	8012d40 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8007648:	2214      	movs	r2, #20
 800764a:	2100      	movs	r1, #0
 800764c:	0038      	movs	r0, r7
 800764e:	f00b fb77 	bl	8012d40 <memset>
 8007652:	e7ab      	b.n	80075ac <ExecuteMonitor+0x40>
                   if(flag == RUN_FOR_ONCE)
 8007654:	2a01      	cmp	r2, #1
 8007656:	d15b      	bne.n	8007710 <ExecuteMonitor+0x1a4>
                	twoDMatrixIndex=1;
 8007658:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 800765a:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 800765c:	702b      	strb	r3, [r5, #0]
		          	counter=0;
 800765e:	4ba3      	ldr	r3, [pc, #652]	; (80078ec <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 8007660:	7032      	strb	r2, [r6, #0]
		          	counter=0;
 8007662:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 8007664:	4ba2      	ldr	r3, [pc, #648]	; (80078f0 <ExecuteMonitor+0x384>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d02e      	beq.n	80076ca <ExecuteMonitor+0x15e>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800766c:	224c      	movs	r2, #76	; 0x4c
		           while(counter != numCommandParameters)
 800766e:	2100      	movs	r1, #0
 8007670:	2300      	movs	r3, #0
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007672:	4690      	mov	r8, r2
		           while(counter != numCommandParameters)
 8007674:	2201      	movs	r2, #1
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007676:	0010      	movs	r0, r2
 8007678:	2720      	movs	r7, #32
 800767a:	001a      	movs	r2, r3
 800767c:	0003      	movs	r3, r0
 800767e:	e002      	b.n	8007686 <ExecuteMonitor+0x11a>
 8007680:	4b9a      	ldr	r3, [pc, #616]	; (80078ec <ExecuteMonitor+0x380>)
 8007682:	781a      	ldrb	r2, [r3, #0]
 8007684:	782b      	ldrb	r3, [r5, #0]
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007686:	1c58      	adds	r0, r3, #1
 8007688:	7028      	strb	r0, [r5, #0]
 800768a:	1c48      	adds	r0, r1, #1
 800768c:	7030      	strb	r0, [r6, #0]
 800768e:	0110      	lsls	r0, r2, #4
 8007690:	1a82      	subs	r2, r0, r2
 8007692:	4452      	add	r2, sl
 8007694:	18d2      	adds	r2, r2, r3
 8007696:	4643      	mov	r3, r8
 8007698:	5cd3      	ldrb	r3, [r2, r3]
 800769a:	2244      	movs	r2, #68	; 0x44
 800769c:	1861      	adds	r1, r4, r1
		            	Delay_ms(1);
 800769e:	2001      	movs	r0, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80076a0:	548b      	strb	r3, [r1, r2]
		            	Delay_ms(1);
 80076a2:	f007 ff25 	bl	800f4f0 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80076a6:	7831      	ldrb	r1, [r6, #0]
 80076a8:	1863      	adds	r3, r4, r1
 80076aa:	3343      	adds	r3, #67	; 0x43
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	43bb      	bics	r3, r7
 80076b0:	d1e6      	bne.n	8007680 <ExecuteMonitor+0x114>
		                   counter++;
 80076b2:	4b8e      	ldr	r3, [pc, #568]	; (80078ec <ExecuteMonitor+0x380>)
 80076b4:	4a8d      	ldr	r2, [pc, #564]	; (80078ec <ExecuteMonitor+0x380>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	3301      	adds	r3, #1
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 80076be:	2201      	movs	r2, #1
 80076c0:	702a      	strb	r2, [r5, #0]
		           while(counter != numCommandParameters)
 80076c2:	4a8b      	ldr	r2, [pc, #556]	; (80078f0 <ExecuteMonitor+0x384>)
 80076c4:	7812      	ldrb	r2, [r2, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d1d4      	bne.n	8007674 <ExecuteMonitor+0x108>
		          		   flag=0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	465a      	mov	r2, fp
 80076ce:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 80076d0:	4a86      	ldr	r2, [pc, #536]	; (80078ec <ExecuteMonitor+0x380>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80076d2:	2744      	movs	r7, #68	; 0x44
		          		   counter=0;
 80076d4:	7013      	strb	r3, [r2, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80076d6:	4a87      	ldr	r2, [pc, #540]	; (80078f4 <ExecuteMonitor+0x388>)
 80076d8:	7013      	strb	r3, [r2, #0]
 80076da:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80076dc:	4a86      	ldr	r2, [pc, #536]	; (80078f8 <ExecuteMonitor+0x38c>)
		          			Delay_ms(1);
 80076de:	2001      	movs	r0, #1
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80076e0:	18d2      	adds	r2, r2, r3
 80076e2:	18e3      	adds	r3, r4, r3
 80076e4:	5ddb      	ldrb	r3, [r3, r7]
 80076e6:	3281      	adds	r2, #129	; 0x81
 80076e8:	32ff      	adds	r2, #255	; 0xff
 80076ea:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 80076ec:	f007 ff00 	bl	800f4f0 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80076f0:	4b80      	ldr	r3, [pc, #512]	; (80078f4 <ExecuteMonitor+0x388>)
 80076f2:	4a80      	ldr	r2, [pc, #512]	; (80078f4 <ExecuteMonitor+0x388>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	3301      	adds	r3, #1
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	7013      	strb	r3, [r2, #0]
 80076fc:	2b3f      	cmp	r3, #63	; 0x3f
 80076fe:	d9ed      	bls.n	80076dc <ExecuteMonitor+0x170>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007700:	0020      	movs	r0, r4
 8007702:	2240      	movs	r2, #64	; 0x40
 8007704:	3044      	adds	r0, #68	; 0x44
 8007706:	2100      	movs	r1, #0
 8007708:	f00b fb1a 	bl	8012d40 <memset>
 800770c:	465b      	mov	r3, fp
 800770e:	791a      	ldrb	r2, [r3, #4]
                   if(flag == CONTINUOUS_RUN)
 8007710:	2a02      	cmp	r2, #2
 8007712:	d000      	beq.n	8007716 <ExecuteMonitor+0x1aa>
 8007714:	e74a      	b.n	80075ac <ExecuteMonitor+0x40>
                	twoDMatrixIndex=1;
 8007716:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 8007718:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 800771a:	702b      	strb	r3, [r5, #0]
   		          	counter=0;
 800771c:	4b73      	ldr	r3, [pc, #460]	; (80078ec <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 800771e:	7032      	strb	r2, [r6, #0]
   		          	counter=0;
 8007720:	701a      	strb	r2, [r3, #0]
   		           while(counter != numCommandParameters)
 8007722:	4b73      	ldr	r3, [pc, #460]	; (80078f0 <ExecuteMonitor+0x384>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d033      	beq.n	8007792 <ExecuteMonitor+0x226>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800772a:	224c      	movs	r2, #76	; 0x4c
   		           while(counter != numCommandParameters)
 800772c:	2100      	movs	r1, #0
 800772e:	2300      	movs	r3, #0
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007730:	4690      	mov	r8, r2
   		           while(counter != numCommandParameters)
 8007732:	2201      	movs	r2, #1
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007734:	0010      	movs	r0, r2
 8007736:	2720      	movs	r7, #32
 8007738:	001a      	movs	r2, r3
 800773a:	0003      	movs	r3, r0
 800773c:	e001      	b.n	8007742 <ExecuteMonitor+0x1d6>
 800773e:	781a      	ldrb	r2, [r3, #0]
 8007740:	782b      	ldrb	r3, [r5, #0]
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007742:	1c58      	adds	r0, r3, #1
 8007744:	7028      	strb	r0, [r5, #0]
 8007746:	1c48      	adds	r0, r1, #1
 8007748:	7030      	strb	r0, [r6, #0]
 800774a:	0110      	lsls	r0, r2, #4
 800774c:	1a82      	subs	r2, r0, r2
 800774e:	4452      	add	r2, sl
 8007750:	18d2      	adds	r2, r2, r3
 8007752:	4643      	mov	r3, r8
 8007754:	5cd3      	ldrb	r3, [r2, r3]
 8007756:	2244      	movs	r2, #68	; 0x44
 8007758:	1861      	adds	r1, r4, r1
   		            	Delay_ms(1);
 800775a:	2001      	movs	r0, #1
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800775c:	548b      	strb	r3, [r1, r2]
   		            	Delay_ms(1);
 800775e:	f007 fec7 	bl	800f4f0 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007762:	7831      	ldrb	r1, [r6, #0]
 8007764:	1863      	adds	r3, r4, r1
 8007766:	3343      	adds	r3, #67	; 0x43
 8007768:	781a      	ldrb	r2, [r3, #0]
 800776a:	4b60      	ldr	r3, [pc, #384]	; (80078ec <ExecuteMonitor+0x380>)
 800776c:	43ba      	bics	r2, r7
 800776e:	d1e6      	bne.n	800773e <ExecuteMonitor+0x1d2>
   		             counter++;
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	485e      	ldr	r0, [pc, #376]	; (80078ec <ExecuteMonitor+0x380>)
 8007774:	3301      	adds	r3, #1
 8007776:	b2db      	uxtb	r3, r3
 8007778:	7003      	strb	r3, [r0, #0]
   		             twoDMatrixIndex=1;
 800777a:	2001      	movs	r0, #1
 800777c:	7028      	strb	r0, [r5, #0]
   		           while(counter != numCommandParameters)
 800777e:	485c      	ldr	r0, [pc, #368]	; (80078f0 <ExecuteMonitor+0x384>)
 8007780:	7800      	ldrb	r0, [r0, #0]
 8007782:	4298      	cmp	r0, r3
 8007784:	d1d5      	bne.n	8007732 <ExecuteMonitor+0x1c6>
 8007786:	465b      	mov	r3, fp
		            counter=0;
 8007788:	4958      	ldr	r1, [pc, #352]	; (80078ec <ExecuteMonitor+0x380>)
 800778a:	791b      	ldrb	r3, [r3, #4]
 800778c:	700a      	strb	r2, [r1, #0]
                  while(flag != NonActive)
 800778e:	2b00      	cmp	r3, #0
 8007790:	d01e      	beq.n	80077d0 <ExecuteMonitor+0x264>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007792:	2744      	movs	r7, #68	; 0x44
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007794:	2200      	movs	r2, #0
 8007796:	4b57      	ldr	r3, [pc, #348]	; (80078f4 <ExecuteMonitor+0x388>)
 8007798:	701a      	strb	r2, [r3, #0]
 800779a:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800779c:	4a56      	ldr	r2, [pc, #344]	; (80078f8 <ExecuteMonitor+0x38c>)
		          			Delay_us(200);
 800779e:	20c8      	movs	r0, #200	; 0xc8
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077a0:	18d2      	adds	r2, r2, r3
 80077a2:	18e3      	adds	r3, r4, r3
 80077a4:	5ddb      	ldrb	r3, [r3, r7]
 80077a6:	3281      	adds	r2, #129	; 0x81
 80077a8:	32ff      	adds	r2, #255	; 0xff
 80077aa:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 80077ac:	f005 fc90 	bl	800d0d0 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80077b0:	4b50      	ldr	r3, [pc, #320]	; (80078f4 <ExecuteMonitor+0x388>)
 80077b2:	4a50      	ldr	r2, [pc, #320]	; (80078f4 <ExecuteMonitor+0x388>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	3301      	adds	r3, #1
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	7013      	strb	r3, [r2, #0]
 80077bc:	2b3f      	cmp	r3, #63	; 0x3f
 80077be:	d9ed      	bls.n	800779c <ExecuteMonitor+0x230>
  	          		 Delay_ms(Monitor_time);
 80077c0:	465b      	mov	r3, fp
 80077c2:	6818      	ldr	r0, [r3, #0]
 80077c4:	f007 fe94 	bl	800f4f0 <HAL_Delay>
                  while(flag != NonActive)
 80077c8:	465b      	mov	r3, fp
 80077ca:	791b      	ldrb	r3, [r3, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e1      	bne.n	8007794 <ExecuteMonitor+0x228>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 80077d0:	0020      	movs	r0, r4
 80077d2:	2240      	movs	r2, #64	; 0x40
 80077d4:	2100      	movs	r1, #0
 80077d6:	3044      	adds	r0, #68	; 0x44
 80077d8:	f00b fab2 	bl	8012d40 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 80077dc:	22c0      	movs	r2, #192	; 0xc0
 80077de:	2100      	movs	r1, #0
 80077e0:	4846      	ldr	r0, [pc, #280]	; (80078fc <ExecuteMonitor+0x390>)
 80077e2:	f00b faad 	bl	8012d40 <memset>
 80077e6:	e6e1      	b.n	80075ac <ExecuteMonitor+0x40>
 		            	nonProcessingParameterIndex++;
 80077e8:	4a3e      	ldr	r2, [pc, #248]	; (80078e4 <ExecuteMonitor+0x378>)
 80077ea:	3b5a      	subs	r3, #90	; 0x5a
 80077ec:	7013      	strb	r3, [r2, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 80077ee:	4b44      	ldr	r3, [pc, #272]	; (8007900 <ExecuteMonitor+0x394>)
 80077f0:	210a      	movs	r1, #10
 80077f2:	781f      	ldrb	r7, [r3, #0]
 80077f4:	4653      	mov	r3, sl
 80077f6:	9701      	str	r7, [sp, #4]
 80077f8:	3324      	adds	r3, #36	; 0x24
 80077fa:	7858      	ldrb	r0, [r3, #1]
 80077fc:	f7f8 fd2e 	bl	800025c <__aeabi_uidivmod>
 8007800:	2303      	movs	r3, #3
 8007802:	b2c9      	uxtb	r1, r1
 8007804:	4698      	mov	r8, r3
 8007806:	42b9      	cmp	r1, r7
 8007808:	d101      	bne.n	800780e <ExecuteMonitor+0x2a2>
 800780a:	e0a1      	b.n	8007950 <ExecuteMonitor+0x3e4>
 800780c:	46b8      	mov	r8, r7
 800780e:	4643      	mov	r3, r8
 8007810:	1c9f      	adds	r7, r3, #2
 8007812:	4653      	mov	r3, sl
 8007814:	2224      	movs	r2, #36	; 0x24
 8007816:	4443      	add	r3, r8
 8007818:	5c98      	ldrb	r0, [r3, r2]
 800781a:	210a      	movs	r1, #10
 800781c:	f7f8 fd1e 	bl	800025c <__aeabi_uidivmod>
 8007820:	9b01      	ldr	r3, [sp, #4]
 8007822:	b2c9      	uxtb	r1, r1
 8007824:	b2ff      	uxtb	r7, r7
 8007826:	4299      	cmp	r1, r3
 8007828:	d1f0      	bne.n	800780c <ExecuteMonitor+0x2a0>
 800782a:	4643      	mov	r3, r8
 800782c:	46b8      	mov	r8, r7
 800782e:	3301      	adds	r3, #1
 8007830:	b2db      	uxtb	r3, r3
 8007832:	9301      	str	r3, [sp, #4]
 8007834:	9702      	str	r7, [sp, #8]
 		            			nonProcessingParameterIndex++;
 8007836:	4a2b      	ldr	r2, [pc, #172]	; (80078e4 <ExecuteMonitor+0x378>)
 8007838:	9901      	ldr	r1, [sp, #4]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 800783a:	4453      	add	r3, sl
 		            			nonProcessingParameterIndex++;
 800783c:	7011      	strb	r1, [r2, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 800783e:	2224      	movs	r2, #36	; 0x24
 8007840:	5c9b      	ldrb	r3, [r3, r2]
 8007842:	210a      	movs	r1, #10
 8007844:	0018      	movs	r0, r3
 8007846:	9303      	str	r3, [sp, #12]
 8007848:	f7f8 fd08 	bl	800025c <__aeabi_uidivmod>
 800784c:	2338      	movs	r3, #56	; 0x38
 800784e:	4652      	mov	r2, sl
 8007850:	b2cf      	uxtb	r7, r1
 8007852:	54d7      	strb	r7, [r2, r3]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	2b5d      	cmp	r3, #93	; 0x5d
 8007858:	d00d      	beq.n	8007876 <ExecuteMonitor+0x30a>
 800785a:	9b01      	ldr	r3, [sp, #4]
 800785c:	3301      	adds	r3, #1
 800785e:	b2db      	uxtb	r3, r3
 8007860:	e000      	b.n	8007864 <ExecuteMonitor+0x2f8>
 8007862:	0013      	movs	r3, r2
 8007864:	2124      	movs	r1, #36	; 0x24
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	4453      	add	r3, sl
 800786a:	5c5b      	ldrb	r3, [r3, r1]
 800786c:	b2d2      	uxtb	r2, r2
 800786e:	2b5d      	cmp	r3, #93	; 0x5d
 8007870:	d1f7      	bne.n	8007862 <ExecuteMonitor+0x2f6>
 8007872:	4690      	mov	r8, r2
 8007874:	9202      	str	r2, [sp, #8]
 		            	nonProcessingParameterIndex++;
 8007876:	4642      	mov	r2, r8
 8007878:	4b1a      	ldr	r3, [pc, #104]	; (80078e4 <ExecuteMonitor+0x378>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800787a:	4651      	mov	r1, sl
 		            	nonProcessingParameterIndex++;
 800787c:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 800787e:	2301      	movs	r3, #1
 8007880:	4a20      	ldr	r2, [pc, #128]	; (8007904 <ExecuteMonitor+0x398>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007882:	4650      	mov	r0, sl
 		            	processingParameterIndex=1;
 8007884:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007886:	9b02      	ldr	r3, [sp, #8]
 8007888:	2214      	movs	r2, #20
 800788a:	469c      	mov	ip, r3
 800788c:	3124      	adds	r1, #36	; 0x24
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	4461      	add	r1, ip
 8007892:	3039      	adds	r0, #57	; 0x39
 8007894:	f00b fa4b 	bl	8012d2e <memcpy>
 8007898:	e6c3      	b.n	8007622 <ExecuteMonitor+0xb6>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 800789a:	4653      	mov	r3, sl
 800789c:	3324      	adds	r3, #36	; 0x24
 800789e:	7858      	ldrb	r0, [r3, #1]
 80078a0:	210a      	movs	r1, #10
 80078a2:	f7f8 fcdb 	bl	800025c <__aeabi_uidivmod>
 80078a6:	4652      	mov	r2, sl
 80078a8:	2338      	movs	r3, #56	; 0x38
 80078aa:	b2cf      	uxtb	r7, r1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078ac:	4650      	mov	r0, sl
 80078ae:	4651      	mov	r1, sl
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80078b0:	54d7      	strb	r7, [r2, r3]
 		            	nonProcessingParameterIndex=2;
 80078b2:	4a0c      	ldr	r2, [pc, #48]	; (80078e4 <ExecuteMonitor+0x378>)
 80078b4:	3b36      	subs	r3, #54	; 0x36
 80078b6:	7013      	strb	r3, [r2, #0]
 		            	processingParameterIndex=1;
 80078b8:	4a12      	ldr	r2, [pc, #72]	; (8007904 <ExecuteMonitor+0x398>)
 80078ba:	3b01      	subs	r3, #1
 80078bc:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078be:	3126      	adds	r1, #38	; 0x26
 80078c0:	2212      	movs	r2, #18
 80078c2:	3039      	adds	r0, #57	; 0x39
 80078c4:	f00b fa33 	bl	8012d2e <memcpy>
 80078c8:	e6ab      	b.n	8007622 <ExecuteMonitor+0xb6>
 80078ca:	46c0      	nop			; (mov r8, r8)
 80078cc:	20000000 	.word	0x20000000
 80078d0:	20006e34 	.word	0x20006e34
 80078d4:	20006e78 	.word	0x20006e78
 80078d8:	20001710 	.word	0x20001710
 80078dc:	20006e75 	.word	0x20006e75
 80078e0:	20001790 	.word	0x20001790
 80078e4:	20006e55 	.word	0x20006e55
 80078e8:	20006e77 	.word	0x20006e77
 80078ec:	20006e56 	.word	0x20006e56
 80078f0:	20006e74 	.word	0x20006e74
 80078f4:	20006e35 	.word	0x20006e35
 80078f8:	20001350 	.word	0x20001350
 80078fc:	200014d0 	.word	0x200014d0
 8007900:	20006e76 	.word	0x20006e76
 8007904:	20006e54 	.word	0x20006e54
                	    digitTheCommand=nonProcessingParameter[1]%10;
 8007908:	4657      	mov	r7, sl
 800790a:	3724      	adds	r7, #36	; 0x24
 800790c:	7878      	ldrb	r0, [r7, #1]
 800790e:	210a      	movs	r1, #10
 8007910:	f7f8 fca4 	bl	800025c <__aeabi_uidivmod>
 8007914:	4b11      	ldr	r3, [pc, #68]	; (800795c <ExecuteMonitor+0x3f0>)
 8007916:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 8007918:	78b8      	ldrb	r0, [r7, #2]
 800791a:	210a      	movs	r1, #10
 800791c:	f7f8 fc9e 	bl	800025c <__aeabi_uidivmod>
 8007920:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <ExecuteMonitor+0x3f4>)
 8007922:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007924:	78f8      	ldrb	r0, [r7, #3]
 8007926:	210a      	movs	r1, #10
 8007928:	f7f8 fc98 	bl	800025c <__aeabi_uidivmod>
 800792c:	4652      	mov	r2, sl
 800792e:	2338      	movs	r3, #56	; 0x38
 8007930:	b2cf      	uxtb	r7, r1
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007932:	4650      	mov	r0, sl
 8007934:	4651      	mov	r1, sl
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007936:	54d7      	strb	r7, [r2, r3]
                	    nonProcessingParameterIndex=4;
 8007938:	4a0a      	ldr	r2, [pc, #40]	; (8007964 <ExecuteMonitor+0x3f8>)
 800793a:	3b34      	subs	r3, #52	; 0x34
 800793c:	7013      	strb	r3, [r2, #0]
                	    processingParameterIndex=1;
 800793e:	4a0a      	ldr	r2, [pc, #40]	; (8007968 <ExecuteMonitor+0x3fc>)
 8007940:	3b03      	subs	r3, #3
 8007942:	7013      	strb	r3, [r2, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007944:	3128      	adds	r1, #40	; 0x28
 8007946:	2210      	movs	r2, #16
 8007948:	3039      	adds	r0, #57	; 0x39
 800794a:	f00b f9f0 	bl	8012d2e <memcpy>
 800794e:	e668      	b.n	8007622 <ExecuteMonitor+0xb6>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007950:	2202      	movs	r2, #2
 8007952:	9302      	str	r3, [sp, #8]
 8007954:	9201      	str	r2, [sp, #4]
 8007956:	3b01      	subs	r3, #1
 8007958:	e76d      	b.n	8007836 <ExecuteMonitor+0x2ca>
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	20006e76 	.word	0x20006e76
 8007960:	20006e74 	.word	0x20006e74
 8007964:	20006e55 	.word	0x20006e55
 8007968:	20006e54 	.word	0x20006e54

0800796c <StartDefaultTask>:
void StartDefaultTask(void *argument){
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	4c1e      	ldr	r4, [pc, #120]	; (80079e8 <StartDefaultTask+0x7c>)
 8007970:	4d1e      	ldr	r5, [pc, #120]	; (80079ec <StartDefaultTask+0x80>)
 8007972:	4e1f      	ldr	r6, [pc, #124]	; (80079f0 <StartDefaultTask+0x84>)
 8007974:	e00f      	b.n	8007996 <StartDefaultTask+0x2a>
		switch(indMode){
 8007976:	2b03      	cmp	r3, #3
 8007978:	d024      	beq.n	80079c4 <StartDefaultTask+0x58>
 800797a:	2b01      	cmp	r3, #1
 800797c:	d02b      	beq.n	80079d6 <StartDefaultTask+0x6a>
		CheckAttachedButtons();
 800797e:	f004 fe6b 	bl	800c658 <CheckAttachedButtons>
		ExecuteSnippet();
 8007982:	f7fd fd0f 	bl	80053a4 <ExecuteSnippet>
		ExecuteMonitor();
 8007986:	f7ff fdf1 	bl	800756c <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 800798a:	782b      	ldrb	r3, [r5, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d100      	bne.n	8007992 <StartDefaultTask+0x26>
			delayButtonStateReset = false;
 8007990:	7033      	strb	r3, [r6, #0]
		taskYIELD();
 8007992:	f007 fc61 	bl	800f258 <vPortYield>
		switch(indMode){
 8007996:	7823      	ldrb	r3, [r4, #0]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d1ec      	bne.n	8007976 <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 800799c:	2180      	movs	r1, #128	; 0x80
 800799e:	2090      	movs	r0, #144	; 0x90
 80079a0:	2201      	movs	r2, #1
 80079a2:	05c0      	lsls	r0, r0, #23
 80079a4:	0109      	lsls	r1, r1, #4
 80079a6:	f009 fa65 	bl	8010e74 <HAL_GPIO_WritePin>
 80079aa:	2064      	movs	r0, #100	; 0x64
				RTOS_IND_blink(30);
 80079ac:	f005 fef8 	bl	800d7a0 <osDelay>
 80079b0:	2180      	movs	r1, #128	; 0x80
 80079b2:	2090      	movs	r0, #144	; 0x90
 80079b4:	2200      	movs	r2, #0
 80079b6:	0109      	lsls	r1, r1, #4
 80079b8:	05c0      	lsls	r0, r0, #23
 80079ba:	f009 fa5b 	bl	8010e74 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80079be:	2300      	movs	r3, #0
 80079c0:	7023      	strb	r3, [r4, #0]
				break;
 80079c2:	e7dc      	b.n	800797e <StartDefaultTask+0x12>
				RTOS_IND_blink(30);
 80079c4:	2180      	movs	r1, #128	; 0x80
 80079c6:	2090      	movs	r0, #144	; 0x90
 80079c8:	2201      	movs	r2, #1
 80079ca:	05c0      	lsls	r0, r0, #23
 80079cc:	0109      	lsls	r1, r1, #4
 80079ce:	f009 fa51 	bl	8010e74 <HAL_GPIO_WritePin>
 80079d2:	201e      	movs	r0, #30
 80079d4:	e7ea      	b.n	80079ac <StartDefaultTask+0x40>
				RTOS_IND_blink(200);
 80079d6:	2180      	movs	r1, #128	; 0x80
 80079d8:	2090      	movs	r0, #144	; 0x90
 80079da:	2201      	movs	r2, #1
 80079dc:	05c0      	lsls	r0, r0, #23
 80079de:	0109      	lsls	r1, r1, #4
 80079e0:	f009 fa48 	bl	8010e74 <HAL_GPIO_WritePin>
 80079e4:	20c8      	movs	r0, #200	; 0xc8
 80079e6:	e7e1      	b.n	80079ac <StartDefaultTask+0x40>
 80079e8:	2000114e 	.word	0x2000114e
 80079ec:	20001ecb 	.word	0x20001ecb
 80079f0:	20001ec0 	.word	0x20001ec0

080079f4 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80079f4:	4b04      	ldr	r3, [pc, #16]	; (8007a08 <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 80079f6:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	4904      	ldr	r1, [pc, #16]	; (8007a0c <vMainConfigureTimerForRunTimeStats+0x18>)
 80079fc:	f7f8 fba8 	bl	8000150 <__udivsi3>
 8007a00:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007a02:	6058      	str	r0, [r3, #4]
}
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	46c0      	nop			; (mov r8, r8)
 8007a08:	200000c0 	.word	0x200000c0
 8007a0c:	00002710 	.word	0x00002710
 8007a10:	20001810 	.word	0x20001810

08007a14 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a14:	21fa      	movs	r1, #250	; 0xfa
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <ulMainGetRunTimeCounterValue+0x40>)
uint32_t ulMainGetRunTimeCounterValue(void){
 8007a18:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	0089      	lsls	r1, r1, #2
 8007a1e:	f7f8 fb97 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a22:	4c0d      	ldr	r4, [pc, #52]	; (8007a58 <ulMainGetRunTimeCounterValue+0x44>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a24:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a26:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007a28:	f006 fde6 	bl	800e5f8 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007a2c:	4b0b      	ldr	r3, [pc, #44]	; (8007a5c <ulMainGetRunTimeCounterValue+0x48>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	015b      	lsls	r3, r3, #5
 8007a32:	d50c      	bpl.n	8007a4e <ulMainGetRunTimeCounterValue+0x3a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a34:	6823      	ldr	r3, [r4, #0]
		ulTickCount++;
 8007a36:	3001      	adds	r0, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a38:	1aed      	subs	r5, r5, r3
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a3a:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <ulMainGetRunTimeCounterValue+0x4c>)
	ulReturn =(ulTickCount * 10UL);
 8007a3c:	0084      	lsls	r4, r0, #2
 8007a3e:	1824      	adds	r4, r4, r0
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a40:	6859      	ldr	r1, [r3, #4]
 8007a42:	0028      	movs	r0, r5
 8007a44:	f7f8 fb84 	bl	8000150 <__udivsi3>
	ulReturn =(ulTickCount * 10UL);
 8007a48:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a4a:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007a4c:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a4e:	1bad      	subs	r5, r5, r6
 8007a50:	e7f3      	b.n	8007a3a <ulMainGetRunTimeCounterValue+0x26>
 8007a52:	46c0      	nop			; (mov r8, r8)
 8007a54:	200000c0 	.word	0x200000c0
 8007a58:	e000e018 	.word	0xe000e018
 8007a5c:	e000ed04 	.word	0xe000ed04
 8007a60:	20001810 	.word	0x20001810

08007a64 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007a64:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007a66:	f007 fb9f 	bl	800f1a8 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007a6a:	b2c4      	uxtb	r4, r0
 8007a6c:	0020      	movs	r0, r4
 8007a6e:	f002 fcb1 	bl	800a3d4 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007a72:	0020      	movs	r0, r4
 8007a74:	f003 f8de 	bl	800ac34 <SwitchStreamDMAToMsg>
}
 8007a78:	bd10      	pop	{r4, pc}
 8007a7a:	46c0      	nop			; (mov r8, r8)

08007a7c <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a7e:	46ce      	mov	lr, r9
 8007a80:	4647      	mov	r7, r8
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b085      	sub	sp, #20
 8007a86:	0015      	movs	r5, r2
 8007a88:	466a      	mov	r2, sp
 8007a8a:	73d3      	strb	r3, [r2, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007a8c:	aa0c      	add	r2, sp, #48	; 0x30
 8007a8e:	7812      	ldrb	r2, [r2, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007a90:	000e      	movs	r6, r1
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d06b      	beq.n	8007b6e <SetupDMAStreams+0xf2>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d051      	beq.n	8007b3e <SetupDMAStreams+0xc2>
 8007a9a:	2a00      	cmp	r2, #0
 8007a9c:	d04f      	beq.n	8007b3e <SetupDMAStreams+0xc2>
	if(direction == FORWARD){
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d06a      	beq.n	8007b78 <SetupDMAStreams+0xfc>
	else if(direction == BACKWARD){
 8007aa2:	2801      	cmp	r0, #1
 8007aa4:	d052      	beq.n	8007b4c <SetupDMAStreams+0xd0>
		return BOS_ERR_WrongParam;
 8007aa6:	2467      	movs	r4, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8007aa8:	2802      	cmp	r0, #2
 8007aaa:	d149      	bne.n	8007b40 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007aac:	0018      	movs	r0, r3
 8007aae:	f005 fd41 	bl	800d534 <GetUart>
 8007ab2:	ab0c      	add	r3, sp, #48	; 0x30
 8007ab4:	0004      	movs	r4, r0
 8007ab6:	7818      	ldrb	r0, [r3, #0]
 8007ab8:	f005 fd3c 	bl	800d534 <GetUart>
 8007abc:	2201      	movs	r2, #1
 8007abe:	0001      	movs	r1, r0
 8007ac0:	0020      	movs	r0, r4
 8007ac2:	f7ff fc03 	bl	80072cc <StartDMAstream>
 8007ac6:	2817      	cmp	r0, #23
 8007ac8:	d04f      	beq.n	8007b6a <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007aca:	21fa      	movs	r1, #250	; 0xfa
 8007acc:	0168      	lsls	r0, r5, #5
 8007ace:	1b40      	subs	r0, r0, r5
 8007ad0:	0080      	lsls	r0, r0, #2
 8007ad2:	1940      	adds	r0, r0, r5
 8007ad4:	0089      	lsls	r1, r1, #2
 8007ad6:	00c0      	lsls	r0, r0, #3
 8007ad8:	f7f8 fb3a 	bl	8000150 <__udivsi3>
 8007adc:	4b49      	ldr	r3, [pc, #292]	; (8007c04 <SetupDMAStreams+0x188>)
 8007ade:	4d4a      	ldr	r5, [pc, #296]	; (8007c08 <SetupDMAStreams+0x18c>)
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	4698      	mov	r8, r3
 8007ae4:	230f      	movs	r3, #15
 8007ae6:	0001      	movs	r1, r0
 8007ae8:	2200      	movs	r2, #0
 8007aea:	446b      	add	r3, sp
 8007aec:	0007      	movs	r7, r0
 8007aee:	0028      	movs	r0, r5
 8007af0:	f007 f9fe 	bl	800eef0 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007af4:	466b      	mov	r3, sp
 8007af6:	7bdb      	ldrb	r3, [r3, #15]
 8007af8:	4c44      	ldr	r4, [pc, #272]	; (8007c0c <SetupDMAStreams+0x190>)
 8007afa:	3b01      	subs	r3, #1
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	511e      	str	r6, [r3, r4]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007b00:	ab0c      	add	r3, sp, #48	; 0x30
 8007b02:	7818      	ldrb	r0, [r3, #0]
 8007b04:	f005 fd16 	bl	800d534 <GetUart>
 8007b08:	466b      	mov	r3, sp
 8007b0a:	4681      	mov	r9, r0
 8007b0c:	7bd8      	ldrb	r0, [r3, #15]
 8007b0e:	f005 fd11 	bl	800d534 <GetUart>
 8007b12:	2201      	movs	r2, #1
 8007b14:	0001      	movs	r1, r0
 8007b16:	4648      	mov	r0, r9
 8007b18:	f7ff fbd8 	bl	80072cc <StartDMAstream>
 8007b1c:	2817      	cmp	r0, #23
 8007b1e:	d024      	beq.n	8007b6a <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007b20:	4643      	mov	r3, r8
 8007b22:	0028      	movs	r0, r5
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	2200      	movs	r2, #0
 8007b28:	ab0c      	add	r3, sp, #48	; 0x30
 8007b2a:	0039      	movs	r1, r7
 8007b2c:	f007 f9e0 	bl	800eef0 <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 8007b30:	ab0c      	add	r3, sp, #48	; 0x30
 8007b32:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007b34:	0005      	movs	r5, r0
		dmaStreamTotal[dst - 1] =count;
 8007b36:	3b01      	subs	r3, #1
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	511e      	str	r6, [r3, r4]
 8007b3c:	e044      	b.n	8007bc8 <SetupDMAStreams+0x14c>
		return BOS_ERR_WrongParam;
 8007b3e:	2467      	movs	r4, #103	; 0x67
}
 8007b40:	0020      	movs	r0, r4
 8007b42:	b005      	add	sp, #20
 8007b44:	bc0c      	pop	{r2, r3}
 8007b46:	4690      	mov	r8, r2
 8007b48:	4699      	mov	r9, r3
 8007b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007b4c:	0010      	movs	r0, r2
 8007b4e:	f005 fcf1 	bl	800d534 <GetUart>
 8007b52:	466b      	mov	r3, sp
 8007b54:	0004      	movs	r4, r0
 8007b56:	7bd8      	ldrb	r0, [r3, #15]
 8007b58:	f005 fcec 	bl	800d534 <GetUart>
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	0001      	movs	r1, r0
 8007b60:	0020      	movs	r0, r4
 8007b62:	f7ff fbb3 	bl	80072cc <StartDMAstream>
 8007b66:	2817      	cmp	r0, #23
 8007b68:	d13d      	bne.n	8007be6 <SetupDMAStreams+0x16a>
			return BOS_ERR_PORT_BUSY;
 8007b6a:	2417      	movs	r4, #23
 8007b6c:	e7e8      	b.n	8007b40 <SetupDMAStreams+0xc4>
		portStatus[src] =STREAM;
 8007b6e:	2102      	movs	r1, #2
 8007b70:	4a27      	ldr	r2, [pc, #156]	; (8007c10 <SetupDMAStreams+0x194>)
		return BOS_ERR_WrongParam;
 8007b72:	2467      	movs	r4, #103	; 0x67
		portStatus[src] =STREAM;
 8007b74:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8007b76:	e7e3      	b.n	8007b40 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007b78:	0018      	movs	r0, r3
 8007b7a:	f005 fcdb 	bl	800d534 <GetUart>
 8007b7e:	ab0c      	add	r3, sp, #48	; 0x30
 8007b80:	0004      	movs	r4, r0
 8007b82:	7818      	ldrb	r0, [r3, #0]
 8007b84:	f005 fcd6 	bl	800d534 <GetUart>
 8007b88:	2201      	movs	r2, #1
 8007b8a:	0001      	movs	r1, r0
 8007b8c:	0020      	movs	r0, r4
 8007b8e:	f7ff fb9d 	bl	80072cc <StartDMAstream>
 8007b92:	2817      	cmp	r0, #23
 8007b94:	d0e9      	beq.n	8007b6a <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007b96:	21fa      	movs	r1, #250	; 0xfa
 8007b98:	0168      	lsls	r0, r5, #5
 8007b9a:	1b40      	subs	r0, r0, r5
 8007b9c:	0080      	lsls	r0, r0, #2
 8007b9e:	1940      	adds	r0, r0, r5
 8007ba0:	0089      	lsls	r1, r1, #2
 8007ba2:	00c0      	lsls	r0, r0, #3
 8007ba4:	f7f8 fad4 	bl	8000150 <__udivsi3>
 8007ba8:	4b16      	ldr	r3, [pc, #88]	; (8007c04 <SetupDMAStreams+0x188>)
 8007baa:	0001      	movs	r1, r0
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	230f      	movs	r3, #15
 8007bb0:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	4814      	ldr	r0, [pc, #80]	; (8007c08 <SetupDMAStreams+0x18c>)
 8007bb6:	f007 f99b 	bl	800eef0 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007bba:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007bbc:	0005      	movs	r5, r0
		dmaStreamTotal[src - 1] =count;
 8007bbe:	7bdb      	ldrb	r3, [r3, #15]
 8007bc0:	4a12      	ldr	r2, [pc, #72]	; (8007c0c <SetupDMAStreams+0x190>)
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 8007bc8:	2400      	movs	r4, #0
	if(xTimerStream != NULL)
 8007bca:	2d00      	cmp	r5, #0
 8007bcc:	d0b8      	beq.n	8007b40 <SetupDMAStreams+0xc4>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007bce:	f006 fd0d 	bl	800e5ec <xTaskGetTickCount>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	425b      	negs	r3, r3
 8007bd6:	0002      	movs	r2, r0
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	2101      	movs	r1, #1
 8007bdc:	2300      	movs	r3, #0
 8007bde:	0028      	movs	r0, r5
 8007be0:	f007 f9a6 	bl	800ef30 <xTimerGenericCommand>
 8007be4:	e7ac      	b.n	8007b40 <SetupDMAStreams+0xc4>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007be6:	21fa      	movs	r1, #250	; 0xfa
 8007be8:	0168      	lsls	r0, r5, #5
 8007bea:	1b40      	subs	r0, r0, r5
 8007bec:	0080      	lsls	r0, r0, #2
 8007bee:	1940      	adds	r0, r0, r5
 8007bf0:	0089      	lsls	r1, r1, #2
 8007bf2:	00c0      	lsls	r0, r0, #3
 8007bf4:	f7f8 faac 	bl	8000150 <__udivsi3>
 8007bf8:	4b02      	ldr	r3, [pc, #8]	; (8007c04 <SetupDMAStreams+0x188>)
 8007bfa:	0001      	movs	r1, r0
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	ab0c      	add	r3, sp, #48	; 0x30
 8007c00:	e7d7      	b.n	8007bb2 <SetupDMAStreams+0x136>
 8007c02:	46c0      	nop			; (mov r8, r8)
 8007c04:	08007a65 	.word	0x08007a65
 8007c08:	0801a1dc 	.word	0x0801a1dc
 8007c0c:	200012f4 	.word	0x200012f4
 8007c10:	20000c3c 	.word	0x20000c3c

08007c14 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007c14:	b510      	push	{r4, lr}
	switch(port){
 8007c16:	2805      	cmp	r0, #5
 8007c18:	d80a      	bhi.n	8007c30 <NotifyMessagingTask+0x1c>
 8007c1a:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <NotifyMessagingTask+0x30>)
 8007c1c:	0080      	lsls	r0, r0, #2
 8007c1e:	581b      	ldr	r3, [r3, r0]
 8007c20:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P5
		case P5:
			xTaskNotifyGive(P5MsgTaskHandle)
 8007c22:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <NotifyMessagingTask+0x34>)
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	2202      	movs	r2, #2
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	f007 f8b0 	bl	800ed90 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8007c30:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8007c32:	4b06      	ldr	r3, [pc, #24]	; (8007c4c <NotifyMessagingTask+0x38>)
 8007c34:	e7f6      	b.n	8007c24 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 8007c36:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <NotifyMessagingTask+0x3c>)
 8007c38:	e7f4      	b.n	8007c24 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007c3a:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <NotifyMessagingTask+0x40>)
 8007c3c:	e7f2      	b.n	8007c24 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 8007c3e:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <NotifyMessagingTask+0x44>)
 8007c40:	e7f0      	b.n	8007c24 <NotifyMessagingTask+0x10>
 8007c42:	46c0      	nop			; (mov r8, r8)
 8007c44:	080178d8 	.word	0x080178d8
 8007c48:	20001730 	.word	0x20001730
 8007c4c:	20001720 	.word	0x20001720
 8007c50:	20001724 	.word	0x20001724
 8007c54:	20001728 	.word	0x20001728
 8007c58:	2000172c 	.word	0x2000172c

08007c5c <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	ac06      	add	r4, sp, #24
 8007c62:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8007c64:	0004      	movs	r4, r0
 8007c66:	4314      	orrs	r4, r2
 8007c68:	d011      	beq.n	8007c8e <SendMessageFromPort+0x32>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d10b      	bne.n	8007c86 <SendMessageFromPort+0x2a>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007c6e:	1c96      	adds	r6, r2, #2
 8007c70:	b2f6      	uxtb	r6, r6
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 8007c72:	2467      	movs	r4, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007c74:	2e01      	cmp	r6, #1
 8007c76:	d803      	bhi.n	8007c80 <SendMessageFromPort+0x24>
 8007c78:	9500      	str	r5, [sp, #0]
 8007c7a:	f000 f80b 	bl	8007c94 <SendMessageFromPort.part.0>
 8007c7e:	0004      	movs	r4, r0
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 8007c80:	0020      	movs	r0, r4
 8007c82:	b002      	add	sp, #8
 8007c84:	bd70      	pop	{r4, r5, r6, pc}
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007c86:	2900      	cmp	r1, #0
 8007c88:	d0f6      	beq.n	8007c78 <SendMessageFromPort+0x1c>
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	d1f4      	bne.n	8007c78 <SendMessageFromPort+0x1c>
		return BOS_ERR_WrongParam;
 8007c8e:	2467      	movs	r4, #103	; 0x67
 8007c90:	e7f6      	b.n	8007c80 <SendMessageFromPort+0x24>
 8007c92:	46c0      	nop			; (mov r8, r8)

08007c94 <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c96:	46de      	mov	lr, fp
 8007c98:	464e      	mov	r6, r9
 8007c9a:	4645      	mov	r5, r8
 8007c9c:	4657      	mov	r7, sl
 8007c9e:	b5e0      	push	{r5, r6, r7, lr}
 8007ca0:	b087      	sub	sp, #28
 8007ca2:	0005      	movs	r5, r0
 8007ca4:	9004      	str	r0, [sp, #16]
 8007ca6:	469b      	mov	fp, r3
	TaskPriority =uxTaskPriorityGet( NULL);
 8007ca8:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007caa:	ab10      	add	r3, sp, #64	; 0x40
 8007cac:	4689      	mov	r9, r1
 8007cae:	4690      	mov	r8, r2
 8007cb0:	881e      	ldrh	r6, [r3, #0]
	TaskPriority =uxTaskPriorityGet( NULL);
 8007cb2:	f006 fc05 	bl	800e4c0 <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007cb6:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 8007cb8:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007cba:	2000      	movs	r0, #0
 8007cbc:	f006 fc10 	bl	800e4e0 <vTaskPrioritySet>
	message[0] ='H';
 8007cc0:	2348      	movs	r3, #72	; 0x48
 8007cc2:	4cd2      	ldr	r4, [pc, #840]	; (800800c <SendMessageFromPort.part.0+0x378>)
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007cc4:	464a      	mov	r2, r9
	message[0] ='H';
 8007cc6:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 8007cc8:	3312      	adds	r3, #18
 8007cca:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007ccc:	002b      	movs	r3, r5
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	d000      	beq.n	8007cd4 <SendMessageFromPort.part.0+0x40>
 8007cd2:	e094      	b.n	8007dfe <SendMessageFromPort.part.0+0x16a>
 8007cd4:	4643      	mov	r3, r8
 8007cd6:	1c9f      	adds	r7, r3, #2
 8007cd8:	b2ff      	uxtb	r7, r7
 8007cda:	2f01      	cmp	r7, #1
 8007cdc:	d800      	bhi.n	8007ce0 <SendMessageFromPort.part.0+0x4c>
 8007cde:	e095      	b.n	8007e0c <SendMessageFromPort.part.0+0x178>
 8007ce0:	465b      	mov	r3, fp
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d100      	bne.n	8007ce8 <SendMessageFromPort.part.0+0x54>
 8007ce6:	e091      	b.n	8007e0c <SendMessageFromPort.part.0+0x178>
			src =myID;
 8007ce8:	4bc9      	ldr	r3, [pc, #804]	; (8008010 <SendMessageFromPort.part.0+0x37c>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	4699      	mov	r9, r3
		message[2] =length;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 8007cf2:	4643      	mov	r3, r8
 8007cf4:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 8007cf6:	464b      	mov	r3, r9
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007cf8:	4ac6      	ldr	r2, [pc, #792]	; (8008014 <SendMessageFromPort.part.0+0x380>)
		message[4] =src;
 8007cfa:	7123      	strb	r3, [r4, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007cfc:	7913      	ldrb	r3, [r2, #4]
 8007cfe:	7851      	ldrb	r1, [r2, #1]
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	7812      	ldrb	r2, [r2, #0]
 8007d04:	0089      	lsls	r1, r1, #2
 8007d06:	430b      	orrs	r3, r1
 8007d08:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8007d0a:	22ff      	movs	r2, #255	; 0xff
 8007d0c:	455a      	cmp	r2, fp
 8007d0e:	4192      	sbcs	r2, r2
 8007d10:	4252      	negs	r2, r2
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d12:	0052      	lsls	r2, r2, #1
 8007d14:	4313      	orrs	r3, r2
		message[6 + shift] =(uint8_t )code;
 8007d16:	465a      	mov	r2, fp
 8007d18:	71a2      	strb	r2, [r4, #6]
		if(extendCode == true){
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	4692      	mov	sl, r2
 8007d1e:	465a      	mov	r2, fp
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	7163      	strb	r3, [r4, #5]
		if(extendCode == true){
 8007d24:	2aff      	cmp	r2, #255	; 0xff
 8007d26:	d903      	bls.n	8007d30 <SendMessageFromPort.part.0+0x9c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8007d28:	0a12      	lsrs	r2, r2, #8
 8007d2a:	71e2      	strb	r2, [r4, #7]
			++shift;
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	4692      	mov	sl, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007d30:	2e2e      	cmp	r6, #46	; 0x2e
 8007d32:	d800      	bhi.n	8007d36 <SendMessageFromPort.part.0+0xa2>
 8007d34:	e157      	b.n	8007fe6 <SendMessageFromPort.part.0+0x352>
			message[5] |=0x80;
 8007d36:	2280      	movs	r2, #128	; 0x80
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007d38:	272e      	movs	r7, #46	; 0x2e
			message[5] |=0x80;
 8007d3a:	4252      	negs	r2, r2
			totalNumberOfParams =numberOfParams;
 8007d3c:	4db6      	ldr	r5, [pc, #728]	; (8008018 <SendMessageFromPort.part.0+0x384>)
			message[5] |=0x80;
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	7163      	strb	r3, [r4, #5]
			totalNumberOfParams =numberOfParams;
 8007d42:	806e      	strh	r6, [r5, #2]
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007d44:	2e2d      	cmp	r6, #45	; 0x2d
 8007d46:	d900      	bls.n	8007d4a <SendMessageFromPort.part.0+0xb6>
 8007d48:	e136      	b.n	8007fb8 <SendMessageFromPort.part.0+0x324>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007d4a:	237f      	movs	r3, #127	; 0x7f
 8007d4c:	7962      	ldrb	r2, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007d4e:	8829      	ldrh	r1, [r5, #0]
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007d50:	4013      	ands	r3, r2
 8007d52:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007d54:	4653      	mov	r3, sl
 8007d56:	1dd8      	adds	r0, r3, #7
 8007d58:	4bb0      	ldr	r3, [pc, #704]	; (800801c <SendMessageFromPort.part.0+0x388>)
 8007d5a:	1820      	adds	r0, r4, r0
 8007d5c:	18c9      	adds	r1, r1, r3
 8007d5e:	0032      	movs	r2, r6
 8007d60:	f00a ffe5 	bl	8012d2e <memcpy>
					ptrShift =0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 8007d68:	806b      	strh	r3, [r5, #2]
					length =numberOfParams + shift + 4;
 8007d6a:	4653      	mov	r3, sl
 8007d6c:	1d1d      	adds	r5, r3, #4
 8007d6e:	19ad      	adds	r5, r5, r6
 8007d70:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true){
 8007d72:	4bab      	ldr	r3, [pc, #684]	; (8008020 <SendMessageFromPort.part.0+0x38c>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d03d      	beq.n	8007df6 <SendMessageFromPort.part.0+0x162>
			if(dstGroupID < BOS_BROADCAST){
 8007d7a:	4baa      	ldr	r3, [pc, #680]	; (8008024 <SendMessageFromPort.part.0+0x390>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2bff      	cmp	r3, #255	; 0xff
 8007d80:	d100      	bne.n	8007d84 <SendMessageFromPort.part.0+0xf0>
 8007d82:	e106      	b.n	8007f92 <SendMessageFromPort.part.0+0x2fe>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007d84:	4aa8      	ldr	r2, [pc, #672]	; (8008028 <SendMessageFromPort.part.0+0x394>)
 8007d86:	7817      	ldrb	r7, [r2, #0]
 8007d88:	2f00      	cmp	r7, #0
 8007d8a:	d100      	bne.n	8007d8e <SendMessageFromPort.part.0+0xfa>
 8007d8c:	e139      	b.n	8008002 <SendMessageFromPort.part.0+0x36e>
 8007d8e:	2201      	movs	r2, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007d90:	0021      	movs	r1, r4
 8007d92:	409a      	lsls	r2, r3
 8007d94:	4451      	add	r1, sl
 8007d96:	4694      	mov	ip, r2
 8007d98:	9105      	str	r1, [sp, #20]
 8007d9a:	0039      	movs	r1, r7
			uint8_t groupMembers =0;
 8007d9c:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007d9e:	4667      	mov	r7, ip
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007da0:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007da2:	46ac      	mov	ip, r5
 8007da4:	000d      	movs	r5, r1
 8007da6:	48a1      	ldr	r0, [pc, #644]	; (800802c <SendMessageFromPort.part.0+0x398>)
					if(InGroup(i,dstGroupID)){
 8007da8:	8801      	ldrh	r1, [r0, #0]
 8007daa:	420f      	tst	r7, r1
 8007dac:	d009      	beq.n	8007dc2 <SendMessageFromPort.part.0+0x12e>
						++groupMembers;							// Add this member
 8007dae:	3201      	adds	r2, #1
 8007db0:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8007db2:	1991      	adds	r1, r2, r6
 8007db4:	292c      	cmp	r1, #44	; 0x2c
 8007db6:	dd00      	ble.n	8007dba <SendMessageFromPort.part.0+0x126>
 8007db8:	e0fc      	b.n	8007fb4 <SendMessageFromPort.part.0+0x320>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007dba:	9905      	ldr	r1, [sp, #20]
 8007dbc:	1889      	adds	r1, r1, r2
 8007dbe:	1989      	adds	r1, r1, r6
 8007dc0:	718b      	strb	r3, [r1, #6]
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	3002      	adds	r0, #2
 8007dc8:	42ab      	cmp	r3, r5
 8007dca:	d9ed      	bls.n	8007da8 <SendMessageFromPort.part.0+0x114>
 8007dcc:	4665      	mov	r5, ip
 8007dce:	0010      	movs	r0, r2
 8007dd0:	1991      	adds	r1, r2, r6
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8007dd2:	4653      	mov	r3, sl
 8007dd4:	3307      	adds	r3, #7
 8007dd6:	199e      	adds	r6, r3, r6
 8007dd8:	1836      	adds	r6, r6, r0
 8007dda:	55a2      	strb	r2, [r4, r6]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007ddc:	292b      	cmp	r1, #43	; 0x2b
 8007dde:	dd00      	ble.n	8007de2 <SendMessageFromPort.part.0+0x14e>
 8007de0:	e0e8      	b.n	8007fb4 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007de2:	4993      	ldr	r1, [pc, #588]	; (8008030 <SendMessageFromPort.part.0+0x39c>)
 8007de4:	3502      	adds	r5, #2
 8007de6:	780b      	ldrb	r3, [r1, #0]
 8007de8:	19a6      	adds	r6, r4, r6
 8007dea:	3301      	adds	r3, #1
 8007dec:	b2db      	uxtb	r3, r3
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007dee:	18ad      	adds	r5, r5, r2
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007df0:	700b      	strb	r3, [r1, #0]
 8007df2:	7073      	strb	r3, [r6, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007df4:	b2ed      	uxtb	r5, r5
 8007df6:	4647      	mov	r7, r8
 8007df8:	3702      	adds	r7, #2
 8007dfa:	b2ff      	uxtb	r7, r7
 8007dfc:	e012      	b.n	8007e24 <SendMessageFromPort.part.0+0x190>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007dfe:	465b      	mov	r3, fp
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d000      	beq.n	8007e06 <SendMessageFromPort.part.0+0x172>
 8007e04:	e0af      	b.n	8007f66 <SendMessageFromPort.part.0+0x2d2>
 8007e06:	4647      	mov	r7, r8
 8007e08:	3702      	adds	r7, #2
 8007e0a:	b2ff      	uxtb	r7, r7
		length =messageLength[numberOfParams - 1];
 8007e0c:	3e01      	subs	r6, #1
 8007e0e:	4b89      	ldr	r3, [pc, #548]	; (8008034 <SendMessageFromPort.part.0+0x3a0>)
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007e10:	00f1      	lsls	r1, r6, #3
		length =messageLength[numberOfParams - 1];
 8007e12:	5d9d      	ldrb	r5, [r3, r6]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007e14:	1b89      	subs	r1, r1, r6
 8007e16:	4e88      	ldr	r6, [pc, #544]	; (8008038 <SendMessageFromPort.part.0+0x3a4>)
 8007e18:	00c9      	lsls	r1, r1, #3
 8007e1a:	1989      	adds	r1, r1, r6
 8007e1c:	002a      	movs	r2, r5
 8007e1e:	4887      	ldr	r0, [pc, #540]	; (800803c <SendMessageFromPort.part.0+0x3a8>)
 8007e20:	f00a ff85 	bl	8012d2e <memcpy>
	memcpy(crcBuffer,&message[0],length + 3);
 8007e24:	1ceb      	adds	r3, r5, #3
 8007e26:	469a      	mov	sl, r3
 8007e28:	4e85      	ldr	r6, [pc, #532]	; (8008040 <SendMessageFromPort.part.0+0x3ac>)
 8007e2a:	001a      	movs	r2, r3
 8007e2c:	0021      	movs	r1, r4
 8007e2e:	0030      	movs	r0, r6
	message[2] =length;
 8007e30:	70a5      	strb	r5, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8007e32:	f00a ff7c 	bl	8012d2e <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007e36:	b2ab      	uxth	r3, r5
 8007e38:	4651      	mov	r1, sl
 8007e3a:	0030      	movs	r0, r6
 8007e3c:	9305      	str	r3, [sp, #20]
 8007e3e:	f003 fa8b 	bl	800b358 <CalculateCRC8>
 8007e42:	4653      	mov	r3, sl
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007e44:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007e46:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007e48:	2100      	movs	r1, #0
 8007e4a:	0030      	movs	r0, r6
 8007e4c:	f00a ff78 	bl	8012d40 <memset>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007e50:	465b      	mov	r3, fp
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007e52:	2f01      	cmp	r7, #1
 8007e54:	d94a      	bls.n	8007eec <SendMessageFromPort.part.0+0x258>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007e56:	3b2c      	subs	r3, #44	; 0x2c
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d800      	bhi.n	8007e5e <SendMessageFromPort.part.0+0x1ca>
 8007e5c:	e08d      	b.n	8007f7a <SendMessageFromPort.part.0+0x2e6>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007e5e:	4b6d      	ldr	r3, [pc, #436]	; (8008014 <SendMessageFromPort.part.0+0x380>)
 8007e60:	4698      	mov	r8, r3
 8007e62:	88db      	ldrh	r3, [r3, #6]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d100      	bne.n	8007e6a <SendMessageFromPort.part.0+0x1d6>
 8007e68:	e08f      	b.n	8007f8a <SendMessageFromPort.part.0+0x2f6>
 8007e6a:	9e05      	ldr	r6, [sp, #20]
 8007e6c:	4f75      	ldr	r7, [pc, #468]	; (8008044 <SendMessageFromPort.part.0+0x3b0>)
 8007e6e:	4b76      	ldr	r3, [pc, #472]	; (8008048 <SendMessageFromPort.part.0+0x3b4>)
 8007e70:	3604      	adds	r6, #4
 8007e72:	46ba      	mov	sl, r7
 8007e74:	b2b6      	uxth	r6, r6
 8007e76:	2500      	movs	r5, #0
 8007e78:	4699      	mov	r9, r3
 8007e7a:	9f04      	ldr	r7, [sp, #16]
 8007e7c:	e005      	b.n	8007e8a <SendMessageFromPort.part.0+0x1f6>
 8007e7e:	4643      	mov	r3, r8
 8007e80:	3501      	adds	r5, #1
 8007e82:	88db      	ldrh	r3, [r3, #6]
 8007e84:	b2ed      	uxtb	r5, r5
 8007e86:	42ab      	cmp	r3, r5
 8007e88:	d91c      	bls.n	8007ec4 <SendMessageFromPort.part.0+0x230>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 8007e8a:	2332      	movs	r3, #50	; 0x32
 8007e8c:	0032      	movs	r2, r6
 8007e8e:	0021      	movs	r1, r4
 8007e90:	0038      	movs	r0, r7
 8007e92:	f005 fb19 	bl	800d4c8 <writePxDMAMutex>
				osDelay(200);
 8007e96:	20c8      	movs	r0, #200	; 0xc8
 8007e98:	f005 fc82 	bl	800d7a0 <osDelay>
				if(ACK_FLAG == true)
 8007e9c:	464b      	mov	r3, r9
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10f      	bne.n	8007ec4 <SendMessageFromPort.part.0+0x230>
				if(rejected_FLAG == true)
 8007ea4:	4653      	mov	r3, sl
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0e8      	beq.n	8007e7e <SendMessageFromPort.part.0+0x1ea>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8007eac:	2332      	movs	r3, #50	; 0x32
 8007eae:	0032      	movs	r2, r6
 8007eb0:	0021      	movs	r1, r4
 8007eb2:	0038      	movs	r0, r7
 8007eb4:	f005 fb08 	bl	800d4c8 <writePxDMAMutex>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007eb8:	4643      	mov	r3, r8
 8007eba:	3501      	adds	r5, #1
 8007ebc:	88db      	ldrh	r3, [r3, #6]
 8007ebe:	b2ed      	uxtb	r5, r5
 8007ec0:	42ab      	cmp	r3, r5
 8007ec2:	d8e2      	bhi.n	8007e8a <SendMessageFromPort.part.0+0x1f6>
 8007ec4:	4657      	mov	r7, sl
		ACK_FLAG =false; rejected_FLAG=false;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	464a      	mov	r2, r9
 8007eca:	703b      	strb	r3, [r7, #0]
 8007ecc:	7013      	strb	r3, [r2, #0]
	vTaskPrioritySet( NULL,TaskPriority);
 8007ece:	2000      	movs	r0, #0
 8007ed0:	9903      	ldr	r1, [sp, #12]
 8007ed2:	f006 fb05 	bl	800e4e0 <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 8007ed6:	2202      	movs	r2, #2
	return result;
 8007ed8:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 8007eda:	4b5c      	ldr	r3, [pc, #368]	; (800804c <SendMessageFromPort.part.0+0x3b8>)
 8007edc:	701a      	strb	r2, [r3, #0]
}
 8007ede:	b007      	add	sp, #28
 8007ee0:	bc3c      	pop	{r2, r3, r4, r5}
 8007ee2:	4690      	mov	r8, r2
 8007ee4:	4699      	mov	r9, r3
 8007ee6:	46a2      	mov	sl, r4
 8007ee8:	46ab      	mov	fp, r5
 8007eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d03e      	beq.n	8007f6e <SendMessageFromPort.part.0+0x2da>
		FindBroadcastRoutes(src);
 8007ef0:	4648      	mov	r0, r9
 8007ef2:	f7fb fd2d 	bl	8003950 <FindBroadcastRoutes>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	4698      	mov	r8, r3
 8007efa:	4b45      	ldr	r3, [pc, #276]	; (8008010 <SendMessageFromPort.part.0+0x37c>)
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8007efc:	9e05      	ldr	r6, [sp, #20]
 8007efe:	4699      	mov	r9, r3
 8007f00:	4b53      	ldr	r3, [pc, #332]	; (8008050 <SendMessageFromPort.part.0+0x3bc>)
 8007f02:	3604      	adds	r6, #4
 8007f04:	469b      	mov	fp, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f06:	2301      	movs	r3, #1
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8007f08:	b2b6      	uxth	r6, r6
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f0a:	469a      	mov	sl, r3
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8007f0c:	0033      	movs	r3, r6
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f0e:	2501      	movs	r5, #1
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8007f10:	4646      	mov	r6, r8
 8007f12:	4698      	mov	r8, r3
 8007f14:	4f4b      	ldr	r7, [pc, #300]	; (8008044 <SendMessageFromPort.part.0+0x3b0>)
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f16:	464b      	mov	r3, r9
 8007f18:	465a      	mov	r2, fp
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	005b      	lsls	r3, r3, #1
 8007f20:	5ad3      	ldrh	r3, [r2, r3]
 8007f22:	4652      	mov	r2, sl
 8007f24:	4133      	asrs	r3, r6
 8007f26:	421a      	tst	r2, r3
 8007f28:	d10a      	bne.n	8007f40 <SendMessageFromPort.part.0+0x2ac>
			rejected_FLAG=false;
 8007f2a:	2300      	movs	r3, #0
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f2c:	3501      	adds	r5, #1
			Delay_us(10);
 8007f2e:	200a      	movs	r0, #10
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f30:	b2ed      	uxtb	r5, r5
			rejected_FLAG=false;
 8007f32:	703b      	strb	r3, [r7, #0]
 8007f34:	3601      	adds	r6, #1
			Delay_us(10);
 8007f36:	f005 f8cb 	bl	800d0d0 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f3a:	2d06      	cmp	r5, #6
 8007f3c:	d1eb      	bne.n	8007f16 <SendMessageFromPort.part.0+0x282>
 8007f3e:	e7c6      	b.n	8007ece <SendMessageFromPort.part.0+0x23a>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8007f40:	2332      	movs	r3, #50	; 0x32
 8007f42:	4642      	mov	r2, r8
 8007f44:	0021      	movs	r1, r4
 8007f46:	0028      	movs	r0, r5
 8007f48:	f005 fabe 	bl	800d4c8 <writePxDMAMutex>
				osDelay(200);
 8007f4c:	20c8      	movs	r0, #200	; 0xc8
 8007f4e:	f005 fc27 	bl	800d7a0 <osDelay>
				if(rejected_FLAG == true)
 8007f52:	783b      	ldrb	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d0e8      	beq.n	8007f2a <SendMessageFromPort.part.0+0x296>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8007f58:	2332      	movs	r3, #50	; 0x32
 8007f5a:	4642      	mov	r2, r8
 8007f5c:	0021      	movs	r1, r4
 8007f5e:	9804      	ldr	r0, [sp, #16]
 8007f60:	f005 fab2 	bl	800d4c8 <writePxDMAMutex>
 8007f64:	e7e1      	b.n	8007f2a <SendMessageFromPort.part.0+0x296>
		if(src == 0)
 8007f66:	2a00      	cmp	r2, #0
 8007f68:	d000      	beq.n	8007f6c <SendMessageFromPort.part.0+0x2d8>
 8007f6a:	e6c0      	b.n	8007cee <SendMessageFromPort.part.0+0x5a>
 8007f6c:	e6bc      	b.n	8007ce8 <SendMessageFromPort.part.0+0x54>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007f6e:	464b      	mov	r3, r9
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1bd      	bne.n	8007ef0 <SendMessageFromPort.part.0+0x25c>
			src =message[4];
 8007f74:	7923      	ldrb	r3, [r4, #4]
 8007f76:	4699      	mov	r9, r3
 8007f78:	e7ba      	b.n	8007ef0 <SendMessageFromPort.part.0+0x25c>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
 8007f7a:	9a05      	ldr	r2, [sp, #20]
 8007f7c:	2332      	movs	r3, #50	; 0x32
 8007f7e:	3204      	adds	r2, #4
 8007f80:	b292      	uxth	r2, r2
 8007f82:	0021      	movs	r1, r4
 8007f84:	9804      	ldr	r0, [sp, #16]
 8007f86:	f005 fa9f 	bl	800d4c8 <writePxDMAMutex>
 8007f8a:	4b2f      	ldr	r3, [pc, #188]	; (8008048 <SendMessageFromPort.part.0+0x3b4>)
 8007f8c:	4f2d      	ldr	r7, [pc, #180]	; (8008044 <SendMessageFromPort.part.0+0x3b0>)
 8007f8e:	4699      	mov	r9, r3
 8007f90:	e799      	b.n	8007ec6 <SendMessageFromPort.part.0+0x232>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8007f92:	2e2c      	cmp	r6, #44	; 0x2c
 8007f94:	d80e      	bhi.n	8007fb4 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams] =++bcastID;
 8007f96:	4a26      	ldr	r2, [pc, #152]	; (8008030 <SendMessageFromPort.part.0+0x39c>)
 8007f98:	4647      	mov	r7, r8
 8007f9a:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 8007f9c:	3501      	adds	r5, #1
				message[7 + shift + numberOfParams] =++bcastID;
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	7013      	strb	r3, [r2, #0]
 8007fa4:	4652      	mov	r2, sl
 8007fa6:	18a2      	adds	r2, r4, r2
 8007fa8:	1996      	adds	r6, r2, r6
 8007faa:	3702      	adds	r7, #2
 8007fac:	71f3      	strb	r3, [r6, #7]
				length +=1;		// + bcastID
 8007fae:	b2ed      	uxtb	r5, r5
 8007fb0:	b2ff      	uxtb	r7, r7
 8007fb2:	e737      	b.n	8007e24 <SendMessageFromPort.part.0+0x190>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8007fb4:	2069      	movs	r0, #105	; 0x69
 8007fb6:	e792      	b.n	8007ede <SendMessageFromPort.part.0+0x24a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007fb8:	465b      	mov	r3, fp
 8007fba:	4642      	mov	r2, r8
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	9700      	str	r7, [sp, #0]
 8007fc0:	9804      	ldr	r0, [sp, #16]
 8007fc2:	f7ff fe4b 	bl	8007c5c <SendMessageFromPort>
					osDelay(10);
 8007fc6:	200a      	movs	r0, #10
 8007fc8:	f005 fbea 	bl	800d7a0 <osDelay>
					totalNumberOfParams -=numberOfParams;
 8007fcc:	886e      	ldrh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 8007fce:	882b      	ldrh	r3, [r5, #0]
					totalNumberOfParams -=numberOfParams;
 8007fd0:	3e2e      	subs	r6, #46	; 0x2e
 8007fd2:	b2b6      	uxth	r6, r6
					ptrShift +=numberOfParams;
 8007fd4:	332e      	adds	r3, #46	; 0x2e
					totalNumberOfParams -=numberOfParams;
 8007fd6:	806e      	strh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 8007fd8:	802b      	strh	r3, [r5, #0]
			while(totalNumberOfParams != 0){
 8007fda:	2e00      	cmp	r6, #0
 8007fdc:	d000      	beq.n	8007fe0 <SendMessageFromPort.part.0+0x34c>
 8007fde:	e6b1      	b.n	8007d44 <SendMessageFromPort.part.0+0xb0>
 8007fe0:	2500      	movs	r5, #0
 8007fe2:	362e      	adds	r6, #46	; 0x2e
 8007fe4:	e6c5      	b.n	8007d72 <SendMessageFromPort.part.0+0xde>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007fe6:	4653      	mov	r3, sl
 8007fe8:	1dd8      	adds	r0, r3, #7
 8007fea:	4b0b      	ldr	r3, [pc, #44]	; (8008018 <SendMessageFromPort.part.0+0x384>)
			length =numberOfParams + shift + 4;
 8007fec:	1d35      	adds	r5, r6, #4
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007fee:	8819      	ldrh	r1, [r3, #0]
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	; (800801c <SendMessageFromPort.part.0+0x388>)
 8007ff2:	1820      	adds	r0, r4, r0
 8007ff4:	18c9      	adds	r1, r1, r3
 8007ff6:	0032      	movs	r2, r6
			length =numberOfParams + shift + 4;
 8007ff8:	4455      	add	r5, sl
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007ffa:	f00a fe98 	bl	8012d2e <memcpy>
			length =numberOfParams + shift + 4;
 8007ffe:	b2ed      	uxtb	r5, r5
 8008000:	e6b7      	b.n	8007d72 <SendMessageFromPort.part.0+0xde>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8008002:	0031      	movs	r1, r6
 8008004:	2000      	movs	r0, #0
			uint8_t groupMembers =0;
 8008006:	2200      	movs	r2, #0
 8008008:	e6e3      	b.n	8007dd2 <SendMessageFromPort.part.0+0x13e>
 800800a:	46c0      	nop			; (mov r8, r8)
 800800c:	20000c68 	.word	0x20000c68
 8008010:	20000aa8 	.word	0x20000aa8
 8008014:	20006d34 	.word	0x20006d34
 8008018:	20001818 	.word	0x20001818
 800801c:	20000b4c 	.word	0x20000b4c
 8008020:	20001120 	.word	0x20001120
 8008024:	20000058 	.word	0x20000058
 8008028:	20000010 	.word	0x20000010
 800802c:	20000aac 	.word	0x20000aac
 8008030:	20000c58 	.word	0x20000c58
 8008034:	20000c60 	.word	0x20000c60
 8008038:	20000ca0 	.word	0x20000ca0
 800803c:	20000c6b 	.word	0x20000c6b
 8008040:	20001318 	.word	0x20001318
 8008044:	2000114c 	.word	0x2000114c
 8008048:	2000114d 	.word	0x2000114d
 800804c:	20000c4c 	.word	0x20000c4c
 8008050:	20000b7c 	.word	0x20000b7c

08008054 <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 8008054:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8008056:	b500      	push	{lr}
	AddBcastPayload = false;
 8008058:	4b0b      	ldr	r3, [pc, #44]	; (8008088 <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 800805a:	b083      	sub	sp, #12
	AddBcastPayload = false;
 800805c:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800805e:	4b0b      	ldr	r3, [pc, #44]	; (800808c <BroadcastReceivedMessage+0x38>)
 8008060:	b289      	uxth	r1, r1
 8008062:	7018      	strb	r0, [r3, #0]
 8008064:	9100      	str	r1, [sp, #0]
 8008066:	2300      	movs	r3, #0
	if(dstGroup == BOS_BROADCAST)
 8008068:	28ff      	cmp	r0, #255	; 0xff
 800806a:	d007      	beq.n	800807c <BroadcastReceivedMessage+0x28>
 800806c:	22fe      	movs	r2, #254	; 0xfe
 800806e:	2100      	movs	r1, #0
 8008070:	2000      	movs	r0, #0
 8008072:	f7ff fe0f 	bl	8007c94 <SendMessageFromPort.part.0>
}
 8008076:	2000      	movs	r0, #0
 8008078:	b003      	add	sp, #12
 800807a:	bd00      	pop	{pc}
 800807c:	32ff      	adds	r2, #255	; 0xff
 800807e:	2100      	movs	r1, #0
 8008080:	2000      	movs	r0, #0
 8008082:	f7ff fe07 	bl	8007c94 <SendMessageFromPort.part.0>
 8008086:	e7f6      	b.n	8008076 <BroadcastReceivedMessage+0x22>
 8008088:	20001120 	.word	0x20001120
 800808c:	20000058 	.word	0x20000058

08008090 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8008090:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 8008092:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8008094:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8008096:	4b0e      	ldr	r3, [pc, #56]	; (80080d0 <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8008098:	b083      	sub	sp, #12
	AddBcastPayload = true;
 800809a:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 800809c:	4b0d      	ldr	r3, [pc, #52]	; (80080d4 <BroadcastMessage+0x44>)
 800809e:	7019      	strb	r1, [r3, #0]
 80080a0:	9400      	str	r4, [sp, #0]
 80080a2:	0013      	movs	r3, r2
	if(dstGroup == BOS_BROADCAST)
 80080a4:	29ff      	cmp	r1, #255	; 0xff
 80080a6:	d00c      	beq.n	80080c2 <BroadcastMessage+0x32>
 80080a8:	0001      	movs	r1, r0
 80080aa:	22fe      	movs	r2, #254	; 0xfe
 80080ac:	2000      	movs	r0, #0
 80080ae:	f7ff fdf1 	bl	8007c94 <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 80080b2:	0022      	movs	r2, r4
 80080b4:	2100      	movs	r1, #0
 80080b6:	4808      	ldr	r0, [pc, #32]	; (80080d8 <BroadcastMessage+0x48>)
 80080b8:	f00a fe42 	bl	8012d40 <memset>
}
 80080bc:	2000      	movs	r0, #0
 80080be:	b003      	add	sp, #12
 80080c0:	bd30      	pop	{r4, r5, pc}
 80080c2:	0001      	movs	r1, r0
 80080c4:	22ff      	movs	r2, #255	; 0xff
 80080c6:	2000      	movs	r0, #0
 80080c8:	f7ff fde4 	bl	8007c94 <SendMessageFromPort.part.0>
 80080cc:	e7f1      	b.n	80080b2 <BroadcastMessage+0x22>
 80080ce:	46c0      	nop			; (mov r8, r8)
 80080d0:	20001120 	.word	0x20001120
 80080d4:	20000058 	.word	0x20000058
 80080d8:	20000b4c 	.word	0x20000b4c

080080dc <ForwardReceivedMessage>:
	AddBcastPayload = false;
 80080dc:	2200      	movs	r2, #0
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80080de:	b530      	push	{r4, r5, lr}
 80080e0:	0005      	movs	r5, r0
	AddBcastPayload = false;
 80080e2:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <ForwardReceivedMessage+0x34>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80080e4:	b083      	sub	sp, #12
	AddBcastPayload = false;
 80080e6:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 80080e8:	1e42      	subs	r2, r0, #1
 80080ea:	00d3      	lsls	r3, r2, #3
 80080ec:	1a9b      	subs	r3, r3, r2
 80080ee:	4a09      	ldr	r2, [pc, #36]	; (8008114 <ForwardReceivedMessage+0x38>)
 80080f0:	00db      	lsls	r3, r3, #3
 80080f2:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 80080f4:	4b08      	ldr	r3, [pc, #32]	; (8008118 <ForwardReceivedMessage+0x3c>)
 80080f6:	0021      	movs	r1, r4
 80080f8:	7818      	ldrb	r0, [r3, #0]
 80080fa:	f7fb fcd1 	bl	8003aa0 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 80080fe:	9500      	str	r5, [sp, #0]
 8008100:	2300      	movs	r3, #0
 8008102:	0022      	movs	r2, r4
 8008104:	2100      	movs	r1, #0
 8008106:	f7ff fda9 	bl	8007c5c <SendMessageFromPort>
}
 800810a:	2000      	movs	r0, #0
 800810c:	b003      	add	sp, #12
 800810e:	bd30      	pop	{r4, r5, pc}
 8008110:	20001120 	.word	0x20001120
 8008114:	20000ca0 	.word	0x20000ca0
 8008118:	20000aa8 	.word	0x20000aa8

0800811c <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 800811c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800811e:	4d0f      	ldr	r5, [pc, #60]	; (800815c <SendMessageToModule+0x40>)
 8008120:	0004      	movs	r4, r0
 8008122:	b083      	sub	sp, #12
 8008124:	000f      	movs	r7, r1
 8008126:	0016      	movs	r6, r2
 8008128:	7828      	ldrb	r0, [r5, #0]
	if(dst != BOS_BROADCAST){
 800812a:	2cff      	cmp	r4, #255	; 0xff
 800812c:	d010      	beq.n	8008150 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 800812e:	0021      	movs	r1, r4
 8008130:	f7fb fcb6 	bl	8003aa0 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8008134:	7829      	ldrb	r1, [r5, #0]
 8008136:	0022      	movs	r2, r4
 8008138:	9600      	str	r6, [sp, #0]
 800813a:	003b      	movs	r3, r7
 800813c:	f7ff fd8e 	bl	8007c5c <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8008140:	0032      	movs	r2, r6
 8008142:	2100      	movs	r1, #0
 8008144:	4806      	ldr	r0, [pc, #24]	; (8008160 <SendMessageToModule+0x44>)
 8008146:	f00a fdfb 	bl	8012d40 <memset>
}
 800814a:	2000      	movs	r0, #0
 800814c:	b003      	add	sp, #12
 800814e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8008150:	0013      	movs	r3, r2
 8008152:	000a      	movs	r2, r1
 8008154:	21ff      	movs	r1, #255	; 0xff
 8008156:	f7ff ff9b 	bl	8008090 <BroadcastMessage>
 800815a:	e7f6      	b.n	800814a <SendMessageToModule+0x2e>
 800815c:	20000aa8 	.word	0x20000aa8
 8008160:	20000b4c 	.word	0x20000b4c

08008164 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8008164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008166:	4657      	mov	r7, sl
 8008168:	46de      	mov	lr, fp
 800816a:	464e      	mov	r6, r9
 800816c:	4645      	mov	r5, r8
 800816e:	b5e0      	push	{r5, r6, r7, lr}
 8008170:	b08f      	sub	sp, #60	; 0x3c
 8008172:	001e      	movs	r6, r3
 8008174:	ab18      	add	r3, sp, #96	; 0x60
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	4693      	mov	fp, r2
 800817a:	469a      	mov	sl, r3
 800817c:	ab1b      	add	r3, sp, #108	; 0x6c
 800817e:	781a      	ldrb	r2, [r3, #0]
 8008180:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008182:	000f      	movs	r7, r1
 8008184:	0e19      	lsrs	r1, r3, #24
 8008186:	0c1b      	lsrs	r3, r3, #16
 8008188:	b2dc      	uxtb	r4, r3
 800818a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800818c:	4684      	mov	ip, r0
 800818e:	0a1b      	lsrs	r3, r3, #8
 8008190:	b2dd      	uxtb	r5, r3
 8008192:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008194:	900d      	str	r0, [sp, #52]	; 0x34
 8008196:	0e1b      	lsrs	r3, r3, #24
 8008198:	0018      	movs	r0, r3
 800819a:	930b      	str	r3, [sp, #44]	; 0x2c
 800819c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800819e:	9206      	str	r2, [sp, #24]
 80081a0:	0c1b      	lsrs	r3, r3, #16
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	9307      	str	r3, [sp, #28]
 80081a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081a8:	9109      	str	r1, [sp, #36]	; 0x24
 80081aa:	0a1b      	lsrs	r3, r3, #8
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 80081b0:	4b47      	ldr	r3, [pc, #284]	; (80082d0 <StartScastDMAStream+0x16c>)
 80081b2:	940a      	str	r4, [sp, #40]	; 0x28
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	950c      	str	r5, [sp, #48]	; 0x30
 80081b8:	42bb      	cmp	r3, r7
 80081ba:	d16d      	bne.n	8008298 <StartScastDMAStream+0x134>
 80081bc:	231a      	movs	r3, #26
 80081be:	4698      	mov	r8, r3
 80081c0:	4d44      	ldr	r5, [pc, #272]	; (80082d4 <StartScastDMAStream+0x170>)
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80081c2:	4c45      	ldr	r4, [pc, #276]	; (80082d8 <StartScastDMAStream+0x174>)
 80081c4:	44a8      	add	r8, r5
		FindRoute(srcM,dstM);
 80081c6:	0031      	movs	r1, r6
 80081c8:	0038      	movs	r0, r7
 80081ca:	f7fb fc69 	bl	8003aa0 <FindRoute>
		if(route[i]){
 80081ce:	7868      	ldrb	r0, [r5, #1]
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d035      	beq.n	8008240 <StartScastDMAStream+0xdc>
			if(route[i + 1]){
 80081d4:	78a9      	ldrb	r1, [r5, #2]
 80081d6:	2900      	cmp	r1, #0
 80081d8:	d100      	bne.n	80081dc <StartScastDMAStream+0x78>
				temp1 =FindRoute(route[i],srcM);
 80081da:	0039      	movs	r1, r7
 80081dc:	f7fb fc60 	bl	8003aa0 <FindRoute>
			FindRoute(srcM,dstM);
 80081e0:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 80081e2:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 80081e4:	0038      	movs	r0, r7
 80081e6:	f7fb fc5b 	bl	8003aa0 <FindRoute>
			if(route[i] == dstM){
 80081ea:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 80081ec:	465b      	mov	r3, fp
			if(route[i] == dstM){
 80081ee:	42b0      	cmp	r0, r6
 80081f0:	d003      	beq.n	80081fa <StartScastDMAStream+0x96>
				temp2 =FindRoute(route[i],route[i - 1]);
 80081f2:	7829      	ldrb	r1, [r5, #0]
 80081f4:	f7fb fc54 	bl	8003aa0 <FindRoute>
 80081f8:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80081fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
			messageParams[5] =(uint8_t )(timeout >> 16);
			messageParams[6] =(uint8_t )(timeout >> 8);
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 80081fc:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80081fe:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8008200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			messageParams[11] =stored; /* EEPROM storage */
 8008202:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 8008204:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8008206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			FindRoute(srcM,dstM);
 8008208:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 800820a:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 800820c:	9a19      	ldr	r2, [sp, #100]	; 0x64
			FindRoute(srcM,dstM);
 800820e:	0038      	movs	r0, r7
			messageParams[3] =(uint8_t )count;
 8008210:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008212:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			messageParams[11] =stored; /* EEPROM storage */
 8008214:	72e3      	strb	r3, [r4, #11]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008216:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8008218:	9a07      	ldr	r2, [sp, #28]
 800821a:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 800821c:	9a08      	ldr	r2, [sp, #32]
 800821e:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8008220:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008222:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8008224:	4652      	mov	r2, sl
 8008226:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8008228:	464a      	mov	r2, r9
 800822a:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 800822c:	f7fb fc38 	bl	8003aa0 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8008230:	7868      	ldrb	r0, [r5, #1]
 8008232:	220c      	movs	r2, #12
 8008234:	211b      	movs	r1, #27
 8008236:	f7ff ff71 	bl	800811c <SendMessageToModule>
			osDelay(10);
 800823a:	200a      	movs	r0, #10
 800823c:	f005 fab0 	bl	800d7a0 <osDelay>
 8008240:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8008242:	4545      	cmp	r5, r8
 8008244:	d1bf      	bne.n	80081c6 <StartScastDMAStream+0x62>
		}
	}
	
	if(srcM == dstM)
 8008246:	42b7      	cmp	r7, r6
 8008248:	d112      	bne.n	8008270 <StartScastDMAStream+0x10c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 800824a:	465b      	mov	r3, fp
 800824c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008254:	4650      	mov	r0, sl
 8008256:	f7ff fc11 	bl	8007a7c <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 800825a:	9b06      	ldr	r3, [sp, #24]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10d      	bne.n	800827c <StartScastDMAStream+0x118>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8008260:	2000      	movs	r0, #0
 8008262:	b00f      	add	sp, #60	; 0x3c
 8008264:	bc3c      	pop	{r2, r3, r4, r5}
 8008266:	4690      	mov	r8, r2
 8008268:	4699      	mov	r9, r3
 800826a:	46a2      	mov	sl, r4
 800826c:	46ab      	mov	fp, r5
 800826e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 8008270:	0031      	movs	r1, r6
 8008272:	0038      	movs	r0, r7
 8008274:	f7fb fc14 	bl	8003aa0 <FindRoute>
 8008278:	4683      	mov	fp, r0
 800827a:	e7e6      	b.n	800824a <StartScastDMAStream+0xe6>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 800827c:	2300      	movs	r3, #0
 800827e:	9304      	str	r3, [sp, #16]
 8008280:	9303      	str	r3, [sp, #12]
 8008282:	9302      	str	r3, [sp, #8]
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	465b      	mov	r3, fp
 8008288:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800828e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008290:	4650      	mov	r0, sl
 8008292:	f7fb f925 	bl	80034e0 <SaveEEstreams>
 8008296:	e7e3      	b.n	8008260 <StartScastDMAStream+0xfc>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008298:	4b0f      	ldr	r3, [pc, #60]	; (80082d8 <StartScastDMAStream+0x174>)
 800829a:	7019      	strb	r1, [r3, #0]
		messageParams[5] =(uint8_t )(timeout >> 16);
 800829c:	9907      	ldr	r1, [sp, #28]
		messageParams[1] =(uint8_t )(count >> 16);
 800829e:	705c      	strb	r4, [r3, #1]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80082a0:	7159      	strb	r1, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 80082a2:	9908      	ldr	r1, [sp, #32]
		messageParams[3] =(uint8_t )count;
 80082a4:	9c19      	ldr	r4, [sp, #100]	; 0x64
		messageParams[6] =(uint8_t )(timeout >> 8);
 80082a6:	7199      	strb	r1, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 80082a8:	991a      	ldr	r1, [sp, #104]	; 0x68
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80082aa:	7118      	strb	r0, [r3, #4]
		messageParams[7] =(uint8_t )timeout;
 80082ac:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80082ae:	4651      	mov	r1, sl
 80082b0:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 80082b2:	4661      	mov	r1, ip
 80082b4:	7259      	strb	r1, [r3, #9]
		messageParams[11] =dstP; /* destination port */
 80082b6:	4659      	mov	r1, fp
		messageParams[12] =stored; /* EEPROM storage */
 80082b8:	731a      	strb	r2, [r3, #12]
		messageParams[11] =dstP; /* destination port */
 80082ba:	72d9      	strb	r1, [r3, #11]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80082bc:	220d      	movs	r2, #13
 80082be:	211c      	movs	r1, #28
 80082c0:	0038      	movs	r0, r7
		messageParams[2] =(uint8_t )(count >> 8);
 80082c2:	709d      	strb	r5, [r3, #2]
		messageParams[3] =(uint8_t )count;
 80082c4:	70dc      	strb	r4, [r3, #3]
		messageParams[10] =dstM; /* destination module */
 80082c6:	729e      	strb	r6, [r3, #10]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80082c8:	f7ff ff28 	bl	800811c <SendMessageToModule>
		return result;
 80082cc:	e7c8      	b.n	8008260 <StartScastDMAStream+0xfc>
 80082ce:	46c0      	nop			; (mov r8, r8)
 80082d0:	20000aa8 	.word	0x20000aa8
 80082d4:	20006e7b 	.word	0x20006e7b
 80082d8:	20000b4c 	.word	0x20000b4c

080082dc <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 80082dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082de:	4657      	mov	r7, sl
 80082e0:	4645      	mov	r5, r8
 80082e2:	46de      	mov	lr, fp
 80082e4:	464e      	mov	r6, r9
 80082e6:	4bd6      	ldr	r3, [pc, #856]	; (8008640 <BackEndTask+0x364>)
 80082e8:	b5e0      	push	{r5, r6, r7, lr}
 80082ea:	4698      	mov	r8, r3
 80082ec:	4bd5      	ldr	r3, [pc, #852]	; (8008644 <BackEndTask+0x368>)
 80082ee:	4fd6      	ldr	r7, [pc, #856]	; (8008648 <BackEndTask+0x36c>)
 80082f0:	469a      	mov	sl, r3
 80082f2:	2301      	movs	r3, #1
 80082f4:	b089      	sub	sp, #36	; 0x24
 80082f6:	1bdb      	subs	r3, r3, r7
 80082f8:	9307      	str	r3, [sp, #28]
 80082fa:	2300      	movs	r3, #0
 80082fc:	2601      	movs	r6, #1
 80082fe:	001c      	movs	r4, r3
 8008300:	b2f3      	uxtb	r3, r6
 8008302:	469b      	mov	fp, r3
	/* Infinite loop */
	for(;;){
		/* Search the circular receive buffers for any complete packets */
		for(port =1; port <= NumOfPorts; port++){
			/* A. Check for BOS messages */
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8008304:	4643      	mov	r3, r8
 8008306:	5d9b      	ldrb	r3, [r3, r6]
 8008308:	1e75      	subs	r5, r6, #1
 800830a:	2b01      	cmp	r3, #1
 800830c:	d91d      	bls.n	800834a <BackEndTask+0x6e>
 800830e:	4bcf      	ldr	r3, [pc, #828]	; (800864c <BackEndTask+0x370>)
 8008310:	469c      	mov	ip, r3
 8008312:	4465      	add	r5, ip
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
				++rejectedMsg;
			}

			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
 8008314:	782b      	ldrb	r3, [r5, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00e      	beq.n	8008338 <BackEndTask+0x5c>
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
 800831a:	4643      	mov	r3, r8
				MsgDMAStopped[port - 1] = false;
 800831c:	2200      	movs	r2, #0
				if(portStatus[port] == OVERRUN)
 800831e:	199b      	adds	r3, r3, r6
 8008320:	7819      	ldrb	r1, [r3, #0]
				MsgDMAStopped[port - 1] = false;
 8008322:	702a      	strb	r2, [r5, #0]
				if(portStatus[port] == OVERRUN)
 8008324:	2905      	cmp	r1, #5
 8008326:	d100      	bne.n	800832a <BackEndTask+0x4e>
					portStatus[port] =FREE;
 8008328:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 800832a:	4658      	mov	r0, fp
 800832c:	f005 f902 	bl	800d534 <GetUart>
 8008330:	1939      	adds	r1, r7, r4
 8008332:	22c0      	movs	r2, #192	; 0xc0
 8008334:	f009 fe06 	bl	8011f44 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8008338:	23f0      	movs	r3, #240	; 0xf0
 800833a:	34c0      	adds	r4, #192	; 0xc0
 800833c:	3601      	adds	r6, #1
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	429c      	cmp	r4, r3
 8008342:	d1dd      	bne.n	8008300 <BackEndTask+0x24>
			}
		}

		taskYIELD();
 8008344:	f006 ff88 	bl	800f258 <vPortYield>
		for(port =1; port <= NumOfPorts; port++){
 8008348:	e7d7      	b.n	80082fa <BackEndTask+0x1e>
 800834a:	4bc1      	ldr	r3, [pc, #772]	; (8008650 <BackEndTask+0x374>)
 800834c:	469c      	mov	ip, r3
 800834e:	44ac      	add	ip, r5
 8008350:	4663      	mov	r3, ip
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	9303      	str	r3, [sp, #12]
 8008356:	2abf      	cmp	r2, #191	; 0xbf
 8008358:	dc2a      	bgt.n	80083b0 <BackEndTask+0xd4>
							if(BOS.disableCLI == false){
 800835a:	4bbe      	ldr	r3, [pc, #760]	; (8008654 <BackEndTask+0x378>)
 800835c:	2100      	movs	r1, #0
 800835e:	7e9b      	ldrb	r3, [r3, #26]
 8008360:	9102      	str	r1, [sp, #8]
 8008362:	9304      	str	r3, [sp, #16]
 8008364:	1913      	adds	r3, r2, r4
 8008366:	4699      	mov	r9, r3
 8008368:	0073      	lsls	r3, r6, #1
 800836a:	3201      	adds	r2, #1
 800836c:	199b      	adds	r3, r3, r6
 800836e:	019b      	lsls	r3, r3, #6
 8008370:	9206      	str	r2, [sp, #24]
 8008372:	9a07      	ldr	r2, [sp, #28]
 8008374:	3b01      	subs	r3, #1
 8008376:	18fb      	adds	r3, r7, r3
 8008378:	44b9      	add	r9, r7
 800837a:	1b12      	subs	r2, r2, r4
 800837c:	9305      	str	r3, [sp, #20]
 800837e:	9501      	str	r5, [sp, #4]
 8008380:	464b      	mov	r3, r9
 8008382:	0011      	movs	r1, r2
 8008384:	e002      	b.n	800838c <BackEndTask+0xb0>
 8008386:	3301      	adds	r3, #1
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8008388:	2dc0      	cmp	r5, #192	; 0xc0
 800838a:	d07c      	beq.n	8008486 <BackEndTask+0x1aa>
 800838c:	1b1a      	subs	r2, r3, r4
 800838e:	1bd2      	subs	r2, r2, r7
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8008390:	2abf      	cmp	r2, #191	; 0xbf
 8008392:	d100      	bne.n	8008396 <BackEndTask+0xba>
 8008394:	e0bb      	b.n	800850e <BackEndTask+0x232>
 8008396:	7818      	ldrb	r0, [r3, #0]
 8008398:	18cd      	adds	r5, r1, r3
 800839a:	2848      	cmp	r0, #72	; 0x48
 800839c:	d1f3      	bne.n	8008386 <BackEndTask+0xaa>
 800839e:	7858      	ldrb	r0, [r3, #1]
 80083a0:	285a      	cmp	r0, #90	; 0x5a
 80083a2:	d1f0      	bne.n	8008386 <BackEndTask+0xaa>
						packetStart = MSG_RX_BUF_SIZE - 1;
 80083a4:	4653      	mov	r3, sl
 80083a6:	9d01      	ldr	r5, [sp, #4]
 80083a8:	605a      	str	r2, [r3, #4]
				if(emptyBuffer){
 80083aa:	9b02      	ldr	r3, [sp, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1c3      	bne.n	8008338 <BackEndTask+0x5c>
				totalnumberofrecevedmesg++;
 80083b0:	4653      	mov	r3, sl
 80083b2:	4652      	mov	r2, sl
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3301      	adds	r3, #1
 80083b8:	6013      	str	r3, [r2, #0]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 80083ba:	6853      	ldr	r3, [r2, #4]
 80083bc:	4699      	mov	r9, r3
 80083be:	2bbd      	cmp	r3, #189	; 0xbd
 80083c0:	d100      	bne.n	80083c4 <BackEndTask+0xe8>
 80083c2:	e080      	b.n	80084c6 <BackEndTask+0x1ea>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 80083c4:	2bbe      	cmp	r3, #190	; 0xbe
 80083c6:	d100      	bne.n	80083ca <BackEndTask+0xee>
 80083c8:	e09b      	b.n	8008502 <BackEndTask+0x226>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 80083ca:	2bbf      	cmp	r3, #191	; 0xbf
 80083cc:	d100      	bne.n	80083d0 <BackEndTask+0xf4>
 80083ce:	e0c2      	b.n	8008556 <BackEndTask+0x27a>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 80083d0:	006b      	lsls	r3, r5, #1
 80083d2:	195b      	adds	r3, r3, r5
 80083d4:	019b      	lsls	r3, r3, #6
 80083d6:	18fb      	adds	r3, r7, r3
 80083d8:	444b      	add	r3, r9
 80083da:	789a      	ldrb	r2, [r3, #2]
 80083dc:	4653      	mov	r3, sl
 80083de:	609a      	str	r2, [r3, #8]
					parseStart =packetStart + 3;
 80083e0:	464b      	mov	r3, r9
 80083e2:	4651      	mov	r1, sl
 80083e4:	3303      	adds	r3, #3
 80083e6:	60cb      	str	r3, [r1, #12]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 80083e8:	1cd3      	adds	r3, r2, #3
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	444b      	add	r3, r9
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 80083ee:	2bbf      	cmp	r3, #191	; 0xbf
 80083f0:	dd4b      	ble.n	800848a <BackEndTask+0x1ae>
					packetEnd -= MSG_RX_BUF_SIZE;
 80083f2:	4651      	mov	r1, sl
 80083f4:	3bc0      	subs	r3, #192	; 0xc0
 80083f6:	610b      	str	r3, [r1, #16]
 80083f8:	4649      	mov	r1, r9
 80083fa:	1908      	adds	r0, r1, r4
 80083fc:	1838      	adds	r0, r7, r0
				if(packetStart != packetEnd) // Non-empty packet
 80083fe:	4599      	cmp	r9, r3
 8008400:	d04a      	beq.n	8008498 <BackEndTask+0x1bc>
					if(packetStart < packetEnd){
 8008402:	4599      	cmp	r9, r3
 8008404:	da6a      	bge.n	80084dc <BackEndTask+0x200>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8008406:	0001      	movs	r1, r0
 8008408:	9a01      	ldr	r2, [sp, #4]
 800840a:	4893      	ldr	r0, [pc, #588]	; (8008658 <BackEndTask+0x37c>)
 800840c:	f00a fc8f 	bl	8012d2e <memcpy>
					crc8 =CalculateCRC8(crcBuffer,(packetLength + 3));
 8008410:	466b      	mov	r3, sp
 8008412:	4891      	ldr	r0, [pc, #580]	; (8008658 <BackEndTask+0x37c>)
 8008414:	8899      	ldrh	r1, [r3, #4]
 8008416:	f002 ff9f 	bl	800b358 <CalculateCRC8>
					memset(crcBuffer,0,sizeof(crcBuffer));
 800841a:	2238      	movs	r2, #56	; 0x38
					crc8 =CalculateCRC8(crcBuffer,(packetLength + 3));
 800841c:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 800841e:	2100      	movs	r1, #0
 8008420:	488d      	ldr	r0, [pc, #564]	; (8008658 <BackEndTask+0x37c>)
 8008422:	f00a fc8d 	bl	8012d40 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8008426:	4653      	mov	r3, sl
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	4699      	mov	r9, r3
 800842c:	464a      	mov	r2, r9
 800842e:	006b      	lsls	r3, r5, #1
 8008430:	195b      	adds	r3, r3, r5
 8008432:	019b      	lsls	r3, r3, #6
 8008434:	18fb      	adds	r3, r7, r3
 8008436:	5c9b      	ldrb	r3, [r3, r2]
 8008438:	9a01      	ldr	r2, [sp, #4]
 800843a:	4293      	cmp	r3, r2
 800843c:	d100      	bne.n	8008440 <BackEndTask+0x164>
 800843e:	e092      	b.n	8008566 <BackEndTask+0x28a>
				if(packetStart < packetEnd){
 8008440:	4653      	mov	r3, sl
 8008442:	4652      	mov	r2, sl
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	6892      	ldr	r2, [r2, #8]
 8008448:	1918      	adds	r0, r3, r4
 800844a:	3204      	adds	r2, #4
 800844c:	1838      	adds	r0, r7, r0
 800844e:	9201      	str	r2, [sp, #4]
 8008450:	4599      	cmp	r9, r3
 8008452:	dd23      	ble.n	800849c <BackEndTask+0x1c0>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8008454:	2100      	movs	r1, #0
 8008456:	f00a fc73 	bl	8012d40 <memset>
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 800845a:	464b      	mov	r3, r9
 800845c:	2bbf      	cmp	r3, #191	; 0xbf
 800845e:	d02e      	beq.n	80084be <BackEndTask+0x1e2>
					UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8008460:	9a03      	ldr	r2, [sp, #12]
 8008462:	3301      	adds	r3, #1
 8008464:	7013      	strb	r3, [r2, #0]
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
 8008466:	00f3      	lsls	r3, r6, #3
 8008468:	1b9b      	subs	r3, r3, r6
 800846a:	4a7c      	ldr	r2, [pc, #496]	; (800865c <BackEndTask+0x380>)
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	3b37      	subs	r3, #55	; 0x37
 8008470:	5cd0      	ldrb	r0, [r2, r3]
 8008472:	212d      	movs	r1, #45	; 0x2d
 8008474:	2200      	movs	r2, #0
 8008476:	f7ff fe51 	bl	800811c <SendMessageToModule>
				++rejectedMsg;
 800847a:	4653      	mov	r3, sl
 800847c:	4652      	mov	r2, sl
 800847e:	8adb      	ldrh	r3, [r3, #22]
 8008480:	3301      	adds	r3, #1
 8008482:	82d3      	strh	r3, [r2, #22]
 8008484:	e743      	b.n	800830e <BackEndTask+0x32>
 8008486:	9d01      	ldr	r5, [sp, #4]
 8008488:	e78f      	b.n	80083aa <BackEndTask+0xce>
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 800848a:	4651      	mov	r1, sl
 800848c:	610b      	str	r3, [r1, #16]
 800848e:	4649      	mov	r1, r9
 8008490:	1908      	adds	r0, r1, r4
 8008492:	1838      	adds	r0, r7, r0
				if(packetStart != packetEnd) // Non-empty packet
 8008494:	4599      	cmp	r9, r3
 8008496:	d1b4      	bne.n	8008402 <BackEndTask+0x126>
 8008498:	3204      	adds	r2, #4
 800849a:	9201      	str	r2, [sp, #4]
					MSG_RX_BUF_SIZE - packetStart);
 800849c:	22c0      	movs	r2, #192	; 0xc0
 800849e:	1ad3      	subs	r3, r2, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 80084a0:	001a      	movs	r2, r3
 80084a2:	2100      	movs	r1, #0
 80084a4:	9302      	str	r3, [sp, #8]
 80084a6:	f00a fc4b 	bl	8012d40 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 80084aa:	9b02      	ldr	r3, [sp, #8]
 80084ac:	9a01      	ldr	r2, [sp, #4]
 80084ae:	1938      	adds	r0, r7, r4
 80084b0:	1ad2      	subs	r2, r2, r3
 80084b2:	2100      	movs	r1, #0
 80084b4:	f00a fc44 	bl	8012d40 <memset>
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 80084b8:	464b      	mov	r3, r9
 80084ba:	2bbf      	cmp	r3, #191	; 0xbf
 80084bc:	d1d0      	bne.n	8008460 <BackEndTask+0x184>
					UARTRxBufIndex[port - 1] =0;
 80084be:	2300      	movs	r3, #0
 80084c0:	9a03      	ldr	r2, [sp, #12]
 80084c2:	7013      	strb	r3, [r2, #0]
 80084c4:	e7cf      	b.n	8008466 <BackEndTask+0x18a>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 80084c6:	0073      	lsls	r3, r6, #1
 80084c8:	199b      	adds	r3, r3, r6
 80084ca:	019b      	lsls	r3, r3, #6
 80084cc:	3b01      	subs	r3, #1
 80084ce:	5cfa      	ldrb	r2, [r7, r3]
 80084d0:	4653      	mov	r3, sl
					parseStart =0;
 80084d2:	4651      	mov	r1, sl
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 80084d4:	609a      	str	r2, [r3, #8]
					parseStart =0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	60cb      	str	r3, [r1, #12]
 80084da:	e785      	b.n	80083e8 <BackEndTask+0x10c>
						MSG_RX_BUF_SIZE - packetStart);
 80084dc:	22c0      	movs	r2, #192	; 0xc0
 80084de:	464b      	mov	r3, r9
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	4699      	mov	r9, r3
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 80084e4:	001a      	movs	r2, r3
 80084e6:	0001      	movs	r1, r0
 80084e8:	485b      	ldr	r0, [pc, #364]	; (8008658 <BackEndTask+0x37c>)
 80084ea:	f00a fc20 	bl	8012d2e <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 80084ee:	464a      	mov	r2, r9
 80084f0:	4b59      	ldr	r3, [pc, #356]	; (8008658 <BackEndTask+0x37c>)
 80084f2:	1939      	adds	r1, r7, r4
 80084f4:	444b      	add	r3, r9
 80084f6:	0018      	movs	r0, r3
 80084f8:	9b01      	ldr	r3, [sp, #4]
 80084fa:	1a9a      	subs	r2, r3, r2
 80084fc:	f00a fc17 	bl	8012d2e <memcpy>
 8008500:	e786      	b.n	8008410 <BackEndTask+0x134>
					packetLength =UARTRxBuf[port - 1][0];
 8008502:	4653      	mov	r3, sl
					parseStart =1;
 8008504:	2101      	movs	r1, #1
					packetLength =UARTRxBuf[port - 1][0];
 8008506:	5d3a      	ldrb	r2, [r7, r4]
					parseStart =1;
 8008508:	60d9      	str	r1, [r3, #12]
					packetLength =UARTRxBuf[port - 1][0];
 800850a:	609a      	str	r2, [r3, #8]
 800850c:	e76c      	b.n	80083e8 <BackEndTask+0x10c>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 800850e:	9805      	ldr	r0, [sp, #20]
 8008510:	7800      	ldrb	r0, [r0, #0]
 8008512:	2848      	cmp	r0, #72	; 0x48
 8008514:	d07a      	beq.n	800860c <BackEndTask+0x330>
							if(BOS.disableCLI == false){
 8008516:	9a04      	ldr	r2, [sp, #16]
 8008518:	2a00      	cmp	r2, #0
 800851a:	d000      	beq.n	800851e <BackEndTask+0x242>
 800851c:	e70c      	b.n	8008338 <BackEndTask+0x5c>
 800851e:	4648      	mov	r0, r9
 8008520:	9a06      	ldr	r2, [sp, #24]
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8008522:	7805      	ldrb	r5, [r0, #0]
 8008524:	469c      	mov	ip, r3
 8008526:	1e53      	subs	r3, r2, #1
 8008528:	2d0d      	cmp	r5, #13
 800852a:	d009      	beq.n	8008540 <BackEndTask+0x264>
 800852c:	3001      	adds	r0, #1
 800852e:	1c55      	adds	r5, r2, #1
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8008530:	2ac0      	cmp	r2, #192	; 0xc0
 8008532:	d100      	bne.n	8008536 <BackEndTask+0x25a>
 8008534:	e700      	b.n	8008338 <BackEndTask+0x5c>
							if(BOS.disableCLI == false){
 8008536:	002a      	movs	r2, r5
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8008538:	7805      	ldrb	r5, [r0, #0]
 800853a:	1e53      	subs	r3, r2, #1
 800853c:	2d0d      	cmp	r5, #13
 800853e:	d1f5      	bne.n	800852c <BackEndTask+0x250>
 8008540:	2bbf      	cmp	r3, #191	; 0xbf
 8008542:	d100      	bne.n	8008546 <BackEndTask+0x26a>
 8008544:	e0ad      	b.n	80086a2 <BackEndTask+0x3c6>
 8008546:	7845      	ldrb	r5, [r0, #1]
 8008548:	2d00      	cmp	r5, #0
 800854a:	d100      	bne.n	800854e <BackEndTask+0x272>
 800854c:	e08c      	b.n	8008668 <BackEndTask+0x38c>
 800854e:	1c55      	adds	r5, r2, #1
 8008550:	3001      	adds	r0, #1
							if(BOS.disableCLI == false){
 8008552:	002a      	movs	r2, r5
 8008554:	e7f0      	b.n	8008538 <BackEndTask+0x25c>
					packetLength =UARTRxBuf[port - 1][1];
 8008556:	193b      	adds	r3, r7, r4
 8008558:	785a      	ldrb	r2, [r3, #1]
 800855a:	4653      	mov	r3, sl
					parseStart =2;
 800855c:	4651      	mov	r1, sl
					packetLength =UARTRxBuf[port - 1][1];
 800855e:	609a      	str	r2, [r3, #8]
					parseStart =2;
 8008560:	2302      	movs	r3, #2
 8008562:	60cb      	str	r3, [r1, #12]
 8008564:	e740      	b.n	80083e8 <BackEndTask+0x10c>
						portStatus[port] =MSG;
 8008566:	4643      	mov	r3, r8
 8008568:	2201      	movs	r2, #1
 800856a:	559a      	strb	r2, [r3, r6]
						messageLength[port - 1] =packetLength;
 800856c:	4653      	mov	r3, sl
 800856e:	4a3c      	ldr	r2, [pc, #240]	; (8008660 <BackEndTask+0x384>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	00f0      	lsls	r0, r6, #3
 8008574:	5553      	strb	r3, [r2, r5]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8008576:	4652      	mov	r2, sl
 8008578:	68d1      	ldr	r1, [r2, #12]
 800857a:	2238      	movs	r2, #56	; 0x38
 800857c:	4252      	negs	r2, r2
 800857e:	4694      	mov	ip, r2
 8008580:	1b80      	subs	r0, r0, r6
 8008582:	00c0      	lsls	r0, r0, #3
 8008584:	4484      	add	ip, r0
 8008586:	4662      	mov	r2, ip
 8008588:	9202      	str	r2, [sp, #8]
 800858a:	4a34      	ldr	r2, [pc, #208]	; (800865c <BackEndTask+0x380>)
 800858c:	000d      	movs	r5, r1
 800858e:	3a38      	subs	r2, #56	; 0x38
 8008590:	1810      	adds	r0, r2, r0
 8008592:	22bf      	movs	r2, #191	; 0xbf
 8008594:	9104      	str	r1, [sp, #16]
 8008596:	1909      	adds	r1, r1, r4
						messageLength[port - 1] =packetLength;
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	1879      	adds	r1, r7, r1
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 800859c:	1b52      	subs	r2, r2, r5
 800859e:	4293      	cmp	r3, r2
 80085a0:	dc38      	bgt.n	8008614 <BackEndTask+0x338>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 80085a2:	001a      	movs	r2, r3
 80085a4:	f00a fbc3 	bl	8012d2e <memcpy>
						if(packetStart < packetEnd){
 80085a8:	4653      	mov	r3, sl
 80085aa:	9a01      	ldr	r2, [sp, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	3204      	adds	r2, #4
 80085b0:	1918      	adds	r0, r3, r4
 80085b2:	1838      	adds	r0, r7, r0
 80085b4:	9201      	str	r2, [sp, #4]
 80085b6:	4599      	cmp	r9, r3
 80085b8:	dc08      	bgt.n	80085cc <BackEndTask+0x2f0>
							MSG_RX_BUF_SIZE - packetStart);
 80085ba:	25c0      	movs	r5, #192	; 0xc0
 80085bc:	1aed      	subs	r5, r5, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 80085be:	002a      	movs	r2, r5
 80085c0:	2100      	movs	r1, #0
 80085c2:	f00a fbbd 	bl	8012d40 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	1938      	adds	r0, r7, r4
 80085ca:	1b5a      	subs	r2, r3, r5
 80085cc:	2100      	movs	r1, #0
 80085ce:	f00a fbb7 	bl	8012d40 <memset>
						if(packetEnd == MSG_RX_BUF_SIZE - 1)
 80085d2:	464b      	mov	r3, r9
 80085d4:	2bbf      	cmp	r3, #191	; 0xbf
 80085d6:	d02e      	beq.n	8008636 <BackEndTask+0x35a>
							UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 80085d8:	9a03      	ldr	r2, [sp, #12]
 80085da:	3301      	adds	r3, #1
 80085dc:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 80085de:	4653      	mov	r3, sl
 80085e0:	4652      	mov	r2, sl
 80085e2:	8a9b      	ldrh	r3, [r3, #20]
							NotifyMessagingTask(port);
 80085e4:	4658      	mov	r0, fp
						++acceptedMsg;
 80085e6:	3301      	adds	r3, #1
 80085e8:	8293      	strh	r3, [r2, #20]
						if(cMessage[port - 1][0] == myID || cMessage[port - 1][0] == BOS_BROADCAST || cMessage[port - 1][0] == BOS_MULTICAST)
 80085ea:	9a02      	ldr	r2, [sp, #8]
 80085ec:	4b1b      	ldr	r3, [pc, #108]	; (800865c <BackEndTask+0x380>)
 80085ee:	5c9b      	ldrb	r3, [r3, r2]
 80085f0:	4a1c      	ldr	r2, [pc, #112]	; (8008664 <BackEndTask+0x388>)
 80085f2:	7812      	ldrb	r2, [r2, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d006      	beq.n	8008606 <BackEndTask+0x32a>
 80085f8:	3302      	adds	r3, #2
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d902      	bls.n	8008606 <BackEndTask+0x32a>
							ForwardReceivedMessage(port);
 8008600:	f7ff fd6c 	bl	80080dc <ForwardReceivedMessage>
 8008604:	e698      	b.n	8008338 <BackEndTask+0x5c>
							NotifyMessagingTask(port);
 8008606:	f7ff fb05 	bl	8007c14 <NotifyMessagingTask>
 800860a:	e695      	b.n	8008338 <BackEndTask+0x5c>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 800860c:	5d38      	ldrb	r0, [r7, r4]
 800860e:	285a      	cmp	r0, #90	; 0x5a
 8008610:	d181      	bne.n	8008516 <BackEndTask+0x23a>
 8008612:	e6c7      	b.n	80083a4 <BackEndTask+0xc8>
							MSG_RX_BUF_SIZE - parseStart);
 8008614:	25c0      	movs	r5, #192	; 0xc0
 8008616:	9b04      	ldr	r3, [sp, #16]
 8008618:	1aed      	subs	r5, r5, r3
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 800861a:	002a      	movs	r2, r5
 800861c:	f00a fb87 	bl	8012d2e <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8008620:	9b02      	ldr	r3, [sp, #8]
 8008622:	1939      	adds	r1, r7, r4
 8008624:	18e8      	adds	r0, r5, r3
 8008626:	4b0d      	ldr	r3, [pc, #52]	; (800865c <BackEndTask+0x380>)
 8008628:	469c      	mov	ip, r3
 800862a:	9b01      	ldr	r3, [sp, #4]
 800862c:	4460      	add	r0, ip
 800862e:	1b5a      	subs	r2, r3, r5
 8008630:	f00a fb7d 	bl	8012d2e <memcpy>
 8008634:	e7b8      	b.n	80085a8 <BackEndTask+0x2cc>
							UARTRxBufIndex[port - 1] =0;
 8008636:	2300      	movs	r3, #0
 8008638:	9a03      	ldr	r2, [sp, #12]
 800863a:	7013      	strb	r3, [r2, #0]
 800863c:	e7cf      	b.n	80085de <BackEndTask+0x302>
 800863e:	46c0      	nop			; (mov r8, r8)
 8008640:	20000c3c 	.word	0x20000c3c
 8008644:	20001820 	.word	0x20001820
 8008648:	20001350 	.word	0x20001350
 800864c:	20001308 	.word	0x20001308
 8008650:	20001310 	.word	0x20001310
 8008654:	20006db4 	.word	0x20006db4
 8008658:	20001318 	.word	0x20001318
 800865c:	20000ca0 	.word	0x20000ca0
 8008660:	20000c60 	.word	0x20000c60
 8008664:	20000aa8 	.word	0x20000aa8
 8008668:	0018      	movs	r0, r3
 800866a:	9d01      	ldr	r5, [sp, #4]
 800866c:	b2d2      	uxtb	r2, r2
										UARTRxBuf[port - 1][j] =0;
 800866e:	2100      	movs	r1, #0
 8008670:	006b      	lsls	r3, r5, #1
 8008672:	195b      	adds	r3, r3, r5
 8008674:	019b      	lsls	r3, r3, #6
 8008676:	18fb      	adds	r3, r7, r3
 8008678:	5419      	strb	r1, [r3, r0]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 800867a:	9b03      	ldr	r3, [sp, #12]
 800867c:	701a      	strb	r2, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 800867e:	4642      	mov	r2, r8
 8008680:	4b0e      	ldr	r3, [pc, #56]	; (80086bc <BackEndTask+0x3e0>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	54d1      	strb	r1, [r2, r3]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8008686:	2303      	movs	r3, #3
 8008688:	5593      	strb	r3, [r2, r6]
										PcPort =port;
 800868a:	465a      	mov	r2, fp
 800868c:	4b0b      	ldr	r3, [pc, #44]	; (80086bc <BackEndTask+0x3e0>)
 800868e:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8008690:	4b0b      	ldr	r3, [pc, #44]	; (80086c0 <BackEndTask+0x3e4>)
 8008692:	2202      	movs	r2, #2
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	9801      	ldr	r0, [sp, #4]
 800869a:	2300      	movs	r3, #0
 800869c:	f006 fb78 	bl	800ed90 <xTaskGenericNotify>
										break;
 80086a0:	e64a      	b.n	8008338 <BackEndTask+0x5c>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 80086a2:	5d3a      	ldrb	r2, [r7, r4]
 80086a4:	0018      	movs	r0, r3
 80086a6:	4663      	mov	r3, ip
 80086a8:	2a00      	cmp	r2, #0
 80086aa:	d003      	beq.n	80086b4 <BackEndTask+0x3d8>
							emptyBuffer = true;
 80086ac:	2201      	movs	r2, #1
 80086ae:	18cd      	adds	r5, r1, r3
 80086b0:	9202      	str	r2, [sp, #8]
 80086b2:	e668      	b.n	8008386 <BackEndTask+0xaa>
 80086b4:	9d01      	ldr	r5, [sp, #4]
 80086b6:	22c0      	movs	r2, #192	; 0xc0
 80086b8:	e7d9      	b.n	800866e <BackEndTask+0x392>
 80086ba:	46c0      	nop			; (mov r8, r8)
 80086bc:	20000c38 	.word	0x20000c38
 80086c0:	2000171c 	.word	0x2000171c

080086c4 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 80086c4:	2001      	movs	r0, #1
 80086c6:	4770      	bx	lr

080086c8 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 80086c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ca:	464e      	mov	r6, r9
 80086cc:	46de      	mov	lr, fp
 80086ce:	4645      	mov	r5, r8
 80086d0:	4657      	mov	r7, sl
 80086d2:	b5e0      	push	{r5, r6, r7, lr}
	port =(int8_t )(unsigned )argument;
 80086d4:	b2c3      	uxtb	r3, r0
void PxMessagingTask(void *argument){
 80086d6:	b099      	sub	sp, #100	; 0x64
	port =(int8_t )(unsigned )argument;
 80086d8:	930d      	str	r3, [sp, #52]	; 0x34
 80086da:	23ff      	movs	r3, #255	; 0xff
 80086dc:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 80086de:	1e5c      	subs	r4, r3, #1
 80086e0:	930a      	str	r3, [sp, #40]	; 0x28
 80086e2:	00e3      	lsls	r3, r4, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80086e4:	4ae5      	ldr	r2, [pc, #916]	; (8008a7c <PxMessagingTask+0x3b4>)
 80086e6:	9306      	str	r3, [sp, #24]
 80086e8:	1b1b      	subs	r3, r3, r4
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	4693      	mov	fp, r2
 80086ee:	001a      	movs	r2, r3
 80086f0:	445a      	add	r2, fp
 80086f2:	9209      	str	r2, [sp, #36]	; 0x24
	HAL_StatusTypeDef status =HAL_OK;
 80086f4:	2200      	movs	r2, #0
 80086f6:	920f      	str	r2, [sp, #60]	; 0x3c
 80086f8:	4ae1      	ldr	r2, [pc, #900]	; (8008a80 <PxMessagingTask+0x3b8>)
 80086fa:	930e      	str	r3, [sp, #56]	; 0x38
 80086fc:	4691      	mov	r9, r2
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	3305      	adds	r3, #5
 8008702:	9317      	str	r3, [sp, #92]	; 0x5c
 8008704:	4bdf      	ldr	r3, [pc, #892]	; (8008a84 <PxMessagingTask+0x3bc>)
	BOS_Status result =BOS_OK;
 8008706:	2600      	movs	r6, #0
 8008708:	4698      	mov	r8, r3
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800870a:	2338      	movs	r3, #56	; 0x38
 800870c:	4363      	muls	r3, r4
 800870e:	9216      	str	r2, [sp, #88]	; 0x58
 8008710:	445b      	add	r3, fp
 8008712:	00a2      	lsls	r2, r4, #2
 8008714:	9210      	str	r2, [sp, #64]	; 0x40
 8008716:	9305      	str	r3, [sp, #20]
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008718:	2101      	movs	r1, #1
 800871a:	2001      	movs	r0, #1
 800871c:	4249      	negs	r1, r1
 800871e:	f006 faf7 	bl	800ed10 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 8008722:	464b      	mov	r3, r9
 8008724:	5d1f      	ldrb	r7, [r3, r4]
 8008726:	2f00      	cmp	r7, #0
 8008728:	d100      	bne.n	800872c <PxMessagingTask+0x64>
 800872a:	e085      	b.n	8008838 <PxMessagingTask+0x170>
			if(cMessage[port - 1][2] >> 7){
 800872c:	9b06      	ldr	r3, [sp, #24]
 800872e:	1b1b      	subs	r3, r3, r4
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	445b      	add	r3, fp
 8008734:	7899      	ldrb	r1, [r3, #2]
 8008736:	b24b      	sxtb	r3, r1
 8008738:	2b00      	cmp	r3, #0
 800873a:	da01      	bge.n	8008740 <PxMessagingTask+0x78>
 800873c:	f000 fccb 	bl	80090d6 <PxMessagingTask+0xa0e>
				longMessage =0;
 8008740:	2300      	movs	r3, #0
 8008742:	4ad1      	ldr	r2, [pc, #836]	; (8008a88 <PxMessagingTask+0x3c0>)
 8008744:	7013      	strb	r3, [r2, #0]
			dst =cMessage[port - 1][0];
 8008746:	465a      	mov	r2, fp
 8008748:	9b06      	ldr	r3, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800874a:	4fd0      	ldr	r7, [pc, #832]	; (8008a8c <PxMessagingTask+0x3c4>)
			dst =cMessage[port - 1][0];
 800874c:	1b1b      	subs	r3, r3, r4
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	5cd2      	ldrb	r2, [r2, r3]
			src =cMessage[port - 1][1];
 8008752:	445b      	add	r3, fp
			dst =cMessage[port - 1][0];
 8008754:	9207      	str	r2, [sp, #28]
			src =cMessage[port - 1][1];
 8008756:	785a      	ldrb	r2, [r3, #1]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008758:	0708      	lsls	r0, r1, #28
			src =cMessage[port - 1][1];
 800875a:	4692      	mov	sl, r2
 800875c:	2201      	movs	r2, #1
 800875e:	0015      	movs	r5, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008760:	0f80      	lsrs	r0, r0, #30
 8008762:	7078      	strb	r0, [r7, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 8008764:	0908      	lsrs	r0, r1, #4
 8008766:	400d      	ands	r5, r1
 8008768:	4002      	ands	r2, r0
 800876a:	46ac      	mov	ip, r5
 800876c:	b2d0      	uxtb	r0, r2
 800876e:	70fa      	strb	r2, [r7, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 8008770:	2260      	movs	r2, #96	; 0x60
 8008772:	4463      	add	r3, ip
 8008774:	400a      	ands	r2, r1
 8008776:	950c      	str	r5, [sp, #48]	; 0x30
 8008778:	703a      	strb	r2, [r7, #0]
 800877a:	002a      	movs	r2, r5
 800877c:	78dd      	ldrb	r5, [r3, #3]
 800877e:	9508      	str	r5, [sp, #32]
			if(extendCode == true){
 8008780:	0789      	lsls	r1, r1, #30
 8008782:	d507      	bpl.n	8008794 <PxMessagingTask+0xcc>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008784:	46ac      	mov	ip, r5
 8008786:	791b      	ldrb	r3, [r3, #4]
				++shift;
 8008788:	3201      	adds	r2, #1
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800878a:	021b      	lsls	r3, r3, #8
 800878c:	4463      	add	r3, ip
 800878e:	b29b      	uxth	r3, r3
 8008790:	9308      	str	r3, [sp, #32]
				++shift;
 8008792:	920c      	str	r2, [sp, #48]	; 0x30
			if(true == BOSMessaging.received_Acknowledgment){
 8008794:	2800      	cmp	r0, #0
 8008796:	d007      	beq.n	80087a8 <PxMessagingTask+0xe0>
				BOSMessaging.Acknowledgment =false;
 8008798:	2300      	movs	r3, #0
 800879a:	4abc      	ldr	r2, [pc, #752]	; (8008a8c <PxMessagingTask+0x3c4>)
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800879c:	212c      	movs	r1, #44	; 0x2c
				BOSMessaging.Acknowledgment =false;
 800879e:	7113      	strb	r3, [r2, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 80087a0:	4650      	mov	r0, sl
 80087a2:	2200      	movs	r2, #0
 80087a4:	f7ff fcba 	bl	800811c <SendMessageToModule>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 80087a8:	9a07      	ldr	r2, [sp, #28]
 80087aa:	1e53      	subs	r3, r2, #1
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2bfc      	cmp	r3, #252	; 0xfc
 80087b0:	d801      	bhi.n	80087b6 <PxMessagingTask+0xee>
 80087b2:	f000 fc75 	bl	80090a0 <PxMessagingTask+0x9d8>
 80087b6:	464b      	mov	r3, r9
 80087b8:	5d1f      	ldrb	r7, [r3, r4]
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80087ba:	9b07      	ldr	r3, [sp, #28]
 80087bc:	2bff      	cmp	r3, #255	; 0xff
 80087be:	d001      	beq.n	80087c4 <PxMessagingTask+0xfc>
 80087c0:	f000 fcb9 	bl	8009136 <PxMessagingTask+0xa6e>
 80087c4:	9b06      	ldr	r3, [sp, #24]
 80087c6:	4ab2      	ldr	r2, [pc, #712]	; (8008a90 <PxMessagingTask+0x3c8>)
 80087c8:	1b1d      	subs	r5, r3, r4
 80087ca:	00ed      	lsls	r5, r5, #3
 80087cc:	445d      	add	r5, fp
 80087ce:	19eb      	adds	r3, r5, r7
 80087d0:	3b01      	subs	r3, #1
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	7e12      	ldrb	r2, [r2, #24]
					result =BOS_ERR_MSG_Reflection;
 80087d6:	2603      	movs	r6, #3
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80087d8:	429a      	cmp	r2, r3
 80087da:	d02d      	beq.n	8008838 <PxMessagingTask+0x170>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80087dc:	4aac      	ldr	r2, [pc, #688]	; (8008a90 <PxMessagingTask+0x3c8>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 80087de:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80087e0:	7613      	strb	r3, [r2, #24]
 80087e2:	4aac      	ldr	r2, [pc, #688]	; (8008a94 <PxMessagingTask+0x3cc>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 80087e4:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80087e6:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 80087e8:	f7ff fc34 	bl	8008054 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 80087ec:	464b      	mov	r3, r9
 80087ee:	5d1f      	ldrb	r7, [r3, r4]
 80087f0:	2300      	movs	r3, #0
 80087f2:	19ed      	adds	r5, r5, r7
 80087f4:	3d01      	subs	r5, #1
 80087f6:	702b      	strb	r3, [r5, #0]
				shift +=4;
 80087f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087fa:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 80087fc:	1b7a      	subs	r2, r7, r5
 80087fe:	b2d3      	uxtb	r3, r2
 8008800:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 8008802:	9b08      	ldr	r3, [sp, #32]
 8008804:	2b2d      	cmp	r3, #45	; 0x2d
 8008806:	d901      	bls.n	800880c <PxMessagingTask+0x144>
 8008808:	f000 fc7d 	bl	8009106 <PxMessagingTask+0xa3e>
 800880c:	4aa2      	ldr	r2, [pc, #648]	; (8008a98 <PxMessagingTask+0x3d0>)
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	58d3      	ldr	r3, [r2, r3]
 8008812:	469f      	mov	pc, r3
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 8008814:	9b06      	ldr	r3, [sp, #24]
 8008816:	1b1b      	subs	r3, r3, r4
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	445b      	add	r3, fp
 800881c:	5d5b      	ldrb	r3, [r3, r5]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <PxMessagingTask+0x15e>
 8008822:	f000 fd70 	bl	8009306 <PxMessagingTask+0xc3e>
								myID =cMessage[port - 1][1 + shift];
 8008826:	9b05      	ldr	r3, [sp, #20]
 8008828:	4a9c      	ldr	r2, [pc, #624]	; (8008a9c <PxMessagingTask+0x3d4>)
 800882a:	469c      	mov	ip, r3
 800882c:	4465      	add	r5, ip
 800882e:	786b      	ldrb	r3, [r5, #1]
 8008830:	7013      	strb	r3, [r2, #0]
 8008832:	464b      	mov	r3, r9
 8008834:	2600      	movs	r6, #0
 8008836:	5d1f      	ldrb	r7, [r3, r4]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008838:	003a      	movs	r2, r7
 800883a:	2100      	movs	r1, #0
 800883c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800883e:	f00a fa7f 	bl	8012d40 <memset>
		messageLength[port - 1] =0;
 8008842:	464b      	mov	r3, r9
 8008844:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8008846:	990a      	ldr	r1, [sp, #40]	; 0x28
		messageLength[port - 1] =0;
 8008848:	551a      	strb	r2, [r3, r4]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800884a:	4b95      	ldr	r3, [pc, #596]	; (8008aa0 <PxMessagingTask+0x3d8>)
 800884c:	5c5b      	ldrb	r3, [r3, r1]
 800884e:	3b02      	subs	r3, #2
 8008850:	2b02      	cmp	r3, #2
 8008852:	d901      	bls.n	8008858 <PxMessagingTask+0x190>
			portStatus[port] =FREE;
 8008854:	4b92      	ldr	r3, [pc, #584]	; (8008aa0 <PxMessagingTask+0x3d8>)
 8008856:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8008858:	f006 fcfe 	bl	800f258 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800885c:	e75c      	b.n	8008718 <PxMessagingTask+0x50>
 800885e:	2308      	movs	r3, #8
 8008860:	469a      	mov	sl, r3
 8008862:	3301      	adds	r3, #1
 8008864:	469c      	mov	ip, r3
 8008866:	44ac      	add	ip, r5
 8008868:	4663      	mov	r3, ip
 800886a:	9308      	str	r3, [sp, #32]
 800886c:	230a      	movs	r3, #10
 800886e:	469c      	mov	ip, r3
 8008870:	44ac      	add	ip, r5
 8008872:	4663      	mov	r3, ip
 8008874:	930c      	str	r3, [sp, #48]	; 0x30
 8008876:	230b      	movs	r3, #11
 8008878:	469c      	mov	ip, r3
 800887a:	44ac      	add	ip, r5
 800887c:	4663      	mov	r3, ip
 800887e:	9307      	str	r3, [sp, #28]
 8008880:	230c      	movs	r3, #12
 8008882:	469c      	mov	ip, r3
 8008884:	9b06      	ldr	r3, [sp, #24]
 8008886:	1da8      	adds	r0, r5, #6
 8008888:	1b1b      	subs	r3, r3, r4
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	445b      	add	r3, fp
 800888e:	195a      	adds	r2, r3, r5
							switch(cMessage[port - 1][0 + shift]){
 8008890:	5d5b      	ldrb	r3, [r3, r5]
 8008892:	1def      	adds	r7, r5, #7
 8008894:	44aa      	add	sl, r5
 8008896:	44ac      	add	ip, r5
 8008898:	7852      	ldrb	r2, [r2, #1]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d101      	bne.n	80088a2 <PxMessagingTask+0x1da>
 800889e:	f000 fd04 	bl	80092aa <PxMessagingTask+0xbe2>
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <PxMessagingTask+0x1e2>
 80088a6:	f000 fcd2 	bl	800924e <PxMessagingTask+0xb86>
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d10c      	bne.n	80088c8 <PxMessagingTask+0x200>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80088ae:	9b05      	ldr	r3, [sp, #20]
 80088b0:	1959      	adds	r1, r3, r5
 80088b2:	788b      	ldrb	r3, [r1, #2]
 80088b4:	78c8      	ldrb	r0, [r1, #3]
 80088b6:	021b      	lsls	r3, r3, #8
 80088b8:	0400      	lsls	r0, r0, #16
 80088ba:	181b      	adds	r3, r3, r0
 80088bc:	189a      	adds	r2, r3, r2
 80088be:	790b      	ldrb	r3, [r1, #4]
 80088c0:	061b      	lsls	r3, r3, #24
 80088c2:	18d2      	adds	r2, r2, r3
 80088c4:	4b77      	ldr	r3, [pc, #476]	; (8008aa4 <PxMessagingTask+0x3dc>)
 80088c6:	639a      	str	r2, [r3, #56]	; 0x38
							ADCPort =cMessage[port - 1][shift];
 80088c8:	2644      	movs	r6, #68	; 0x44
 80088ca:	9b06      	ldr	r3, [sp, #24]
 80088cc:	4a75      	ldr	r2, [pc, #468]	; (8008aa4 <PxMessagingTask+0x3dc>)
 80088ce:	1b1b      	subs	r3, r3, r4
 80088d0:	00db      	lsls	r3, r3, #3
 80088d2:	445b      	add	r3, fp
 80088d4:	5d58      	ldrb	r0, [r3, r5]
							ADCSide =cMessage[port - 1][shift + 1];
 80088d6:	195b      	adds	r3, r3, r5
							ADCPort =cMessage[port - 1][shift];
 80088d8:	5390      	strh	r0, [r2, r6]
							ADCSide =cMessage[port - 1][shift + 1];
 80088da:	2246      	movs	r2, #70	; 0x46
 80088dc:	785b      	ldrb	r3, [r3, #1]
 80088de:	4971      	ldr	r1, [pc, #452]	; (8008aa4 <PxMessagingTask+0x3dc>)
 80088e0:	528b      	strh	r3, [r1, r2]
							if(0 == ADCSide){
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <PxMessagingTask+0x222>
 80088e6:	f000 fc7f 	bl	80091e8 <PxMessagingTask+0xb20>
							else if(1 == ADCSide){
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d109      	bne.n	8008902 <PxMessagingTask+0x23a>
								ADCSelectChannel(ADCPort,"bottom");
 80088ee:	496e      	ldr	r1, [pc, #440]	; (8008aa8 <PxMessagingTask+0x3e0>)
 80088f0:	f003 fdce 	bl	800c490 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 80088f4:	4a6b      	ldr	r2, [pc, #428]	; (8008aa4 <PxMessagingTask+0x3dc>)
 80088f6:	4b6b      	ldr	r3, [pc, #428]	; (8008aa4 <PxMessagingTask+0x3dc>)
 80088f8:	3248      	adds	r2, #72	; 0x48
 80088fa:	5d98      	ldrb	r0, [r3, r6]
 80088fc:	496a      	ldr	r1, [pc, #424]	; (8008aa8 <PxMessagingTask+0x3e0>)
 80088fe:	f003 fe17 	bl	800c530 <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 8008902:	4968      	ldr	r1, [pc, #416]	; (8008aa4 <PxMessagingTask+0x3dc>)
 8008904:	4867      	ldr	r0, [pc, #412]	; (8008aa4 <PxMessagingTask+0x3dc>)
 8008906:	314c      	adds	r1, #76	; 0x4c
 8008908:	3050      	adds	r0, #80	; 0x50
 800890a:	f003 fbfb 	bl	800c104 <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 800890e:	4a65      	ldr	r2, [pc, #404]	; (8008aa4 <PxMessagingTask+0x3dc>)
 8008910:	9b06      	ldr	r3, [sp, #24]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 8008912:	0011      	movs	r1, r2
							ADCPort =cMessage[port - 1][shift];
 8008914:	1b1e      	subs	r6, r3, r4
 8008916:	2344      	movs	r3, #68	; 0x44
 8008918:	00f6      	lsls	r6, r6, #3
 800891a:	445e      	add	r6, fp
 800891c:	5d70      	ldrb	r0, [r6, r5]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 800891e:	3154      	adds	r1, #84	; 0x54
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8008920:	1975      	adds	r5, r6, r5
							ADCPort =cMessage[port - 1][shift];
 8008922:	52d0      	strh	r0, [r2, r3]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 8008924:	f003 fcb4 	bl	800c290 <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8008928:	79ab      	ldrb	r3, [r5, #6]
 800892a:	79ea      	ldrb	r2, [r5, #7]
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	0412      	lsls	r2, r2, #16
 8008930:	189b      	adds	r3, r3, r2
 8008932:	796a      	ldrb	r2, [r5, #5]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8008934:	2600      	movs	r6, #0
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8008936:	189b      	adds	r3, r3, r2
 8008938:	7a2a      	ldrb	r2, [r5, #8]
 800893a:	0612      	lsls	r2, r2, #24
 800893c:	189b      	adds	r3, r3, r2
 800893e:	4a59      	ldr	r2, [pc, #356]	; (8008aa4 <PxMessagingTask+0x3dc>)
 8008940:	63d3      	str	r3, [r2, #60]	; 0x3c
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8008942:	7aab      	ldrb	r3, [r5, #10]
 8008944:	7aea      	ldrb	r2, [r5, #11]
 8008946:	021b      	lsls	r3, r3, #8
 8008948:	0412      	lsls	r2, r2, #16
 800894a:	189b      	adds	r3, r3, r2
 800894c:	7a6a      	ldrb	r2, [r5, #9]
 800894e:	189b      	adds	r3, r3, r2
 8008950:	7b2a      	ldrb	r2, [r5, #12]
 8008952:	0612      	lsls	r2, r2, #24
 8008954:	189b      	adds	r3, r3, r2
 8008956:	4a53      	ldr	r2, [pc, #332]	; (8008aa4 <PxMessagingTask+0x3dc>)
 8008958:	6413      	str	r3, [r2, #64]	; 0x40
 800895a:	464b      	mov	r3, r9
 800895c:	5d1f      	ldrb	r7, [r3, r4]
 800895e:	e76b      	b.n	8008838 <PxMessagingTask+0x170>
							rejected_FLAG =1;
 8008960:	2301      	movs	r3, #1
 8008962:	4a52      	ldr	r2, [pc, #328]	; (8008aac <PxMessagingTask+0x3e4>)
 8008964:	7013      	strb	r3, [r2, #0]
 8008966:	e764      	b.n	8008832 <PxMessagingTask+0x16a>
							ACK_FLAG =1;
 8008968:	2301      	movs	r3, #1
 800896a:	4a51      	ldr	r2, [pc, #324]	; (8008ab0 <PxMessagingTask+0x3e8>)
 800896c:	2600      	movs	r6, #0
 800896e:	7013      	strb	r3, [r2, #0]
 8008970:	464b      	mov	r3, r9
 8008972:	5d1f      	ldrb	r7, [r3, r4]
 8008974:	e760      	b.n	8008838 <PxMessagingTask+0x170>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 8008976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800897a:	469c      	mov	ip, r3
 800897c:	9b06      	ldr	r3, [sp, #24]
 800897e:	1c69      	adds	r1, r5, #1
 8008980:	1b1b      	subs	r3, r3, r4
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	445b      	add	r3, fp
 8008986:	5d58      	ldrb	r0, [r3, r5]
 8008988:	230a      	movs	r3, #10
 800898a:	4461      	add	r1, ip
 800898c:	3a01      	subs	r2, #1
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	b292      	uxth	r2, r2
 8008992:	4459      	add	r1, fp
 8008994:	f004 fd46 	bl	800d424 <writePxMutex>
 8008998:	464b      	mov	r3, r9
 800899a:	2600      	movs	r6, #0
 800899c:	5d1f      	ldrb	r7, [r3, r4]
 800899e:	e74b      	b.n	8008838 <PxMessagingTask+0x170>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 80089a0:	9b06      	ldr	r3, [sp, #24]
 80089a2:	1b1b      	subs	r3, r3, r4
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	445b      	add	r3, fp
 80089a8:	5d5b      	ldrb	r3, [r3, r5]
 80089aa:	4a42      	ldr	r2, [pc, #264]	; (8008ab4 <PxMessagingTask+0x3ec>)
 80089ac:	2600      	movs	r6, #0
 80089ae:	7013      	strb	r3, [r2, #0]
 80089b0:	464b      	mov	r3, r9
 80089b2:	5d1f      	ldrb	r7, [r3, r4]
 80089b4:	e740      	b.n	8008838 <PxMessagingTask+0x170>
							responseStatus =BOS_OK; // Initialize response
 80089b6:	2300      	movs	r3, #0
 80089b8:	4a3e      	ldr	r2, [pc, #248]	; (8008ab4 <PxMessagingTask+0x3ec>)
 80089ba:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 80089bc:	9b06      	ldr	r3, [sp, #24]
 80089be:	1b1b      	subs	r3, r3, r4
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	445b      	add	r3, fp
 80089c4:	5d5e      	ldrb	r6, [r3, r5]
 80089c6:	2e00      	cmp	r6, #0
 80089c8:	d101      	bne.n	80089ce <PxMessagingTask+0x306>
 80089ca:	f000 ff53 	bl	8009874 <PxMessagingTask+0x11ac>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 80089ce:	2e1e      	cmp	r6, #30
 80089d0:	d901      	bls.n	80089d6 <PxMessagingTask+0x30e>
 80089d2:	f000 ff4b 	bl	800986c <PxMessagingTask+0x11a4>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 80089d6:	2280      	movs	r2, #128	; 0x80
									switch(cMessage[port - 1][1 + shift]) // requested format
 80089d8:	9905      	ldr	r1, [sp, #20]
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 80089da:	0592      	lsls	r2, r2, #22
 80089dc:	4694      	mov	ip, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 80089de:	1c6a      	adds	r2, r5, #1
 80089e0:	5c8f      	ldrb	r7, [r1, r2]
 80089e2:	9207      	str	r2, [sp, #28]
 80089e4:	220f      	movs	r2, #15
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 80089e6:	3e01      	subs	r6, #1
 80089e8:	4b33      	ldr	r3, [pc, #204]	; (8008ab8 <PxMessagingTask+0x3f0>)
 80089ea:	00b6      	lsls	r6, r6, #2
 80089ec:	599b      	ldr	r3, [r3, r6]
 80089ee:	0c18      	lsrs	r0, r3, #16
 80089f0:	4013      	ands	r3, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 80089f2:	1e7a      	subs	r2, r7, #1
 80089f4:	b2d2      	uxtb	r2, r2
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 80089f6:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 80089f8:	2a07      	cmp	r2, #7
 80089fa:	d901      	bls.n	8008a00 <PxMessagingTask+0x338>
 80089fc:	f000 fdbc 	bl	8009578 <PxMessagingTask+0xeb0>
 8008a00:	492e      	ldr	r1, [pc, #184]	; (8008abc <PxMessagingTask+0x3f4>)
 8008a02:	0092      	lsls	r2, r2, #2
 8008a04:	588a      	ldr	r2, [r1, r2]
 8008a06:	4697      	mov	pc, r2
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8008a08:	2202      	movs	r2, #2
 8008a0a:	4252      	negs	r2, r2
 8008a0c:	17d3      	asrs	r3, r2, #31
 8008a0e:	4641      	mov	r1, r8
 8008a10:	6808      	ldr	r0, [r1, #0]
 8008a12:	6849      	ldr	r1, [r1, #4]
 8008a14:	1812      	adds	r2, r2, r0
 8008a16:	414b      	adcs	r3, r1
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d101      	bne.n	8008a20 <PxMessagingTask+0x358>
 8008a1c:	f000 fcb6 	bl	800938c <PxMessagingTask+0xcc4>
 8008a20:	464b      	mov	r3, r9
 8008a22:	5d1f      	ldrb	r7, [r3, r4]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 8008a24:	4b23      	ldr	r3, [pc, #140]	; (8008ab4 <PxMessagingTask+0x3ec>)
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b10      	cmp	r3, #16
 8008a2a:	d101      	bne.n	8008a30 <PxMessagingTask+0x368>
 8008a2c:	f000 fcab 	bl	8009386 <PxMessagingTask+0xcbe>
								responseStatus =BOS_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	4a20      	ldr	r2, [pc, #128]	; (8008ab4 <PxMessagingTask+0x3ec>)
 8008a34:	2600      	movs	r6, #0
 8008a36:	7013      	strb	r3, [r2, #0]
 8008a38:	e6fe      	b.n	8008838 <PxMessagingTask+0x170>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 8008a3a:	9b06      	ldr	r3, [sp, #24]
 8008a3c:	1b1b      	subs	r3, r3, r4
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	445b      	add	r3, fp
 8008a42:	5d5b      	ldrb	r3, [r3, r5]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <PxMessagingTask+0x384>
 8008a48:	f000 fd69 	bl	800951e <PxMessagingTask+0xe56>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8008a4c:	9b05      	ldr	r3, [sp, #20]
 8008a4e:	469c      	mov	ip, r3
 8008a50:	4465      	add	r5, ip
 8008a52:	78ab      	ldrb	r3, [r5, #2]
 8008a54:	78ea      	ldrb	r2, [r5, #3]
 8008a56:	061b      	lsls	r3, r3, #24
 8008a58:	0412      	lsls	r2, r2, #16
 8008a5a:	189b      	adds	r3, r3, r2
 8008a5c:	796a      	ldrb	r2, [r5, #5]
 8008a5e:	189b      	adds	r3, r3, r2
 8008a60:	792a      	ldrb	r2, [r5, #4]
 8008a62:	0212      	lsls	r2, r2, #8
 8008a64:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 8008a66:	786a      	ldrb	r2, [r5, #1]
 8008a68:	3a01      	subs	r2, #1
 8008a6a:	b2d2      	uxtb	r2, r2
 8008a6c:	2a07      	cmp	r2, #7
 8008a6e:	d900      	bls.n	8008a72 <PxMessagingTask+0x3aa>
 8008a70:	e6df      	b.n	8008832 <PxMessagingTask+0x16a>
 8008a72:	4913      	ldr	r1, [pc, #76]	; (8008ac0 <PxMessagingTask+0x3f8>)
 8008a74:	0092      	lsls	r2, r2, #2
 8008a76:	588a      	ldr	r2, [r1, r2]
 8008a78:	4697      	mov	pc, r2
 8008a7a:	46c0      	nop			; (mov r8, r8)
 8008a7c:	20000ca0 	.word	0x20000ca0
 8008a80:	20000c60 	.word	0x20000c60
 8008a84:	20000c50 	.word	0x20000c50
 8008a88:	20000c5c 	.word	0x20000c5c
 8008a8c:	20006d34 	.word	0x20006d34
 8008a90:	20001820 	.word	0x20001820
 8008a94:	20000c58 	.word	0x20000c58
 8008a98:	080178f0 	.word	0x080178f0
 8008a9c:	20000aa8 	.word	0x20000aa8
 8008aa0:	20000c3c 	.word	0x20000c3c
 8008aa4:	200018a0 	.word	0x200018a0
 8008aa8:	08018870 	.word	0x08018870
 8008aac:	2000114c 	.word	0x2000114c
 8008ab0:	2000114d 	.word	0x2000114d
 8008ab4:	20000c4c 	.word	0x20000c4c
 8008ab8:	20006d3c 	.word	0x20006d3c
 8008abc:	080179a8 	.word	0x080179a8
 8008ac0:	080179c8 	.word	0x080179c8
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008ac4:	9b06      	ldr	r3, [sp, #24]
 8008ac6:	49de      	ldr	r1, [pc, #888]	; (8008e40 <PxMessagingTask+0x778>)
 8008ac8:	1b18      	subs	r0, r3, r4
 8008aca:	00c0      	lsls	r0, r0, #3
 8008acc:	7809      	ldrb	r1, [r1, #0]
 8008ace:	4458      	add	r0, fp
 8008ad0:	1942      	adds	r2, r0, r5
 8008ad2:	468c      	mov	ip, r1
 8008ad4:	7a51      	ldrb	r1, [r2, #9]
 8008ad6:	7ad7      	ldrb	r7, [r2, #11]
 8008ad8:	468a      	mov	sl, r1
 8008ada:	7b11      	ldrb	r1, [r2, #12]
 8008adc:	7a93      	ldrb	r3, [r2, #10]
 8008ade:	000e      	movs	r6, r1
 8008ae0:	1e71      	subs	r1, r6, #1
 8008ae2:	418e      	sbcs	r6, r1
 8008ae4:	9603      	str	r6, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008ae6:	7916      	ldrb	r6, [r2, #4]
 8008ae8:	7951      	ldrb	r1, [r2, #5]
 8008aea:	0636      	lsls	r6, r6, #24
 8008aec:	0409      	lsls	r1, r1, #16
 8008aee:	1871      	adds	r1, r6, r1
 8008af0:	79d6      	ldrb	r6, [r2, #7]
 8008af2:	1989      	adds	r1, r1, r6
 8008af4:	7996      	ldrb	r6, [r2, #6]
 8008af6:	0236      	lsls	r6, r6, #8
 8008af8:	1989      	adds	r1, r1, r6
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008afa:	9102      	str	r1, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008afc:	5d41      	ldrb	r1, [r0, r5]
 8008afe:	78d0      	ldrb	r0, [r2, #3]
 8008b00:	0609      	lsls	r1, r1, #24
 8008b02:	1809      	adds	r1, r1, r0
 8008b04:	7850      	ldrb	r0, [r2, #1]
 8008b06:	0400      	lsls	r0, r0, #16
 8008b08:	1809      	adds	r1, r1, r0
 8008b0a:	7890      	ldrb	r0, [r2, #2]
 8008b0c:	0200      	lsls	r0, r0, #8
 8008b0e:	1809      	adds	r1, r1, r0
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008b10:	9101      	str	r1, [sp, #4]
 8008b12:	7a12      	ldrb	r2, [r2, #8]
 8008b14:	4661      	mov	r1, ip
 8008b16:	9200      	str	r2, [sp, #0]
 8008b18:	4650      	mov	r0, sl
 8008b1a:	003a      	movs	r2, r7
 8008b1c:	f7ff fb22 	bl	8008164 <StartScastDMAStream>
 8008b20:	e687      	b.n	8008832 <PxMessagingTask+0x16a>
							SaveToRO();
 8008b22:	f001 f899 	bl	8009c58 <SaveToRO>
							SaveEEportsDir();
 8008b26:	f7fa fc6f 	bl	8003408 <SaveEEportsDir>
							indMode =IND_PING;
 8008b2a:	2301      	movs	r3, #1
							indMode =IND_TOPOLOGY;
 8008b2c:	4ac5      	ldr	r2, [pc, #788]	; (8008e44 <PxMessagingTask+0x77c>)
 8008b2e:	2600      	movs	r6, #0
 8008b30:	7013      	strb	r3, [r2, #0]
 8008b32:	464b      	mov	r3, r9
 8008b34:	5d1f      	ldrb	r7, [r3, r4]
 8008b36:	e67f      	b.n	8008838 <PxMessagingTask+0x170>
							for(p =0; p < numOfParams; p++){
 8008b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d01d      	beq.n	8008b7a <PxMessagingTask+0x4b2>
 8008b3e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008b40:	4659      	mov	r1, fp
 8008b42:	46b4      	mov	ip, r6
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8008b44:	4652      	mov	r2, sl
 8008b46:	1970      	adds	r0, r6, r5
 8008b48:	2680      	movs	r6, #128	; 0x80
 8008b4a:	3101      	adds	r1, #1
 8008b4c:	4461      	add	r1, ip
 8008b4e:	194d      	adds	r5, r1, r5
 8008b50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b52:	3a01      	subs	r2, #1
 8008b54:	4bbc      	ldr	r3, [pc, #752]	; (8008e48 <PxMessagingTask+0x780>)
 8008b56:	0052      	lsls	r2, r2, #1
 8008b58:	3901      	subs	r1, #1
 8008b5a:	b2c9      	uxtb	r1, r1
 8008b5c:	5a9b      	ldrh	r3, [r3, r2]
 8008b5e:	4458      	add	r0, fp
 8008b60:	186d      	adds	r5, r5, r1
 8008b62:	0236      	lsls	r6, r6, #8
 8008b64:	0037      	movs	r7, r6
 8008b66:	7801      	ldrb	r1, [r0, #0]
 8008b68:	3001      	adds	r0, #1
 8008b6a:	3901      	subs	r1, #1
 8008b6c:	410f      	asrs	r7, r1
 8008b6e:	433b      	orrs	r3, r7
 8008b70:	b29b      	uxth	r3, r3
							for(p =0; p < numOfParams; p++){
 8008b72:	4285      	cmp	r5, r0
 8008b74:	d1f6      	bne.n	8008b64 <PxMessagingTask+0x49c>
 8008b76:	49b4      	ldr	r1, [pc, #720]	; (8008e48 <PxMessagingTask+0x780>)
 8008b78:	528b      	strh	r3, [r1, r2]
							responseStatus =BOS_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	e715      	b.n	80089aa <PxMessagingTask+0x2e2>
							ReadPortsDirMSG(src);
 8008b7e:	4650      	mov	r0, sl
 8008b80:	f004 fd38 	bl	800d5f4 <ReadPortsDirMSG>
 8008b84:	464b      	mov	r3, r9
 8008b86:	2600      	movs	r6, #0
 8008b88:	5d1f      	ldrb	r7, [r3, r4]
 8008b8a:	e655      	b.n	8008838 <PxMessagingTask+0x170>
 8008b8c:	4baf      	ldr	r3, [pc, #700]	; (8008e4c <PxMessagingTask+0x784>)
 8008b8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b90:	881e      	ldrh	r6, [r3, #0]
 8008b92:	4baf      	ldr	r3, [pc, #700]	; (8008e50 <PxMessagingTask+0x788>)
 8008b94:	4694      	mov	ip, r2
 8008b96:	1998      	adds	r0, r3, r6
 8008b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b9a:	4466      	add	r6, ip
 8008b9c:	18e9      	adds	r1, r5, r3
 8008b9e:	464b      	mov	r3, r9
 8008ba0:	5d1f      	ldrb	r7, [r3, r4]
							if(longMessage){
 8008ba2:	4bac      	ldr	r3, [pc, #688]	; (8008e54 <PxMessagingTask+0x78c>)
 8008ba4:	b2b6      	uxth	r6, r6
 8008ba6:	781d      	ldrb	r5, [r3, #0]
 8008ba8:	4459      	add	r1, fp
 8008baa:	2d00      	cmp	r5, #0
 8008bac:	d101      	bne.n	8008bb2 <PxMessagingTask+0x4ea>
 8008bae:	f000 fc67 	bl	8009480 <PxMessagingTask+0xdb8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008bb2:	f00a f8bc 	bl	8012d2e <memcpy>
								longMessageLastPtr +=numOfParams;
 8008bb6:	4ba5      	ldr	r3, [pc, #660]	; (8008e4c <PxMessagingTask+0x784>)
 8008bb8:	801e      	strh	r6, [r3, #0]
 8008bba:	2600      	movs	r6, #0
 8008bbc:	e63c      	b.n	8008838 <PxMessagingTask+0x170>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008bbe:	2601      	movs	r6, #1
 8008bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bc2:	18ef      	adds	r7, r5, r3
 8008bc4:	445f      	add	r7, fp
								if(p != port)
 8008bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bc8:	42b3      	cmp	r3, r6
 8008bca:	d005      	beq.n	8008bd8 <PxMessagingTask+0x510>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 8008bcc:	0030      	movs	r0, r6
 8008bce:	f004 fcb1 	bl	800d534 <GetUart>
 8008bd2:	7839      	ldrb	r1, [r7, #0]
 8008bd4:	f004 fcba 	bl	800d54c <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008bd8:	3601      	adds	r6, #1
 8008bda:	b2f6      	uxtb	r6, r6
 8008bdc:	3701      	adds	r7, #1
 8008bde:	2e06      	cmp	r6, #6
 8008be0:	d1f1      	bne.n	8008bc6 <PxMessagingTask+0x4fe>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 8008be2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008be4:	f004 fca6 	bl	800d534 <GetUart>
 8008be8:	9b06      	ldr	r3, [sp, #24]
 8008bea:	2600      	movs	r6, #0
 8008bec:	1b1b      	subs	r3, r3, r4
 8008bee:	00db      	lsls	r3, r3, #3
 8008bf0:	445b      	add	r3, fp
 8008bf2:	195d      	adds	r5, r3, r5
 8008bf4:	7aa9      	ldrb	r1, [r5, #10]
 8008bf6:	f004 fca9 	bl	800d54c <SwapUartPins>
 8008bfa:	464b      	mov	r3, r9
 8008bfc:	5d1f      	ldrb	r7, [r3, r4]
 8008bfe:	e61b      	b.n	8008838 <PxMessagingTask+0x170>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c00:	9b06      	ldr	r3, [sp, #24]
 8008c02:	1b1b      	subs	r3, r3, r4
 8008c04:	00db      	lsls	r3, r3, #3
 8008c06:	445b      	add	r3, fp
 8008c08:	5d5f      	ldrb	r7, [r3, r5]
 8008c0a:	195b      	adds	r3, r3, r5
 8008c0c:	78da      	ldrb	r2, [r3, #3]
 8008c0e:	063f      	lsls	r7, r7, #24
 8008c10:	18bf      	adds	r7, r7, r2
 8008c12:	785a      	ldrb	r2, [r3, #1]
 8008c14:	0412      	lsls	r2, r2, #16
 8008c16:	18bf      	adds	r7, r7, r2
 8008c18:	789a      	ldrb	r2, [r3, #2]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 8008c1a:	791b      	ldrb	r3, [r3, #4]
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c1c:	0212      	lsls	r2, r2, #8
 8008c1e:	18bf      	adds	r7, r7, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 8008c20:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c22:	2bff      	cmp	r3, #255	; 0xff
 8008c24:	d101      	bne.n	8008c2a <PxMessagingTask+0x562>
 8008c26:	f000 fc4c 	bl	80094c2 <PxMessagingTask+0xdfa>
								for(p =0; p < numOfParams; p++){
 8008c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c2c:	2a00      	cmp	r2, #0
 8008c2e:	d101      	bne.n	8008c34 <PxMessagingTask+0x56c>
 8008c30:	f000 fc40 	bl	80094b4 <PxMessagingTask+0xdec>
 8008c34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c36:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008c38:	195e      	adds	r6, r3, r5
 8008c3a:	465b      	mov	r3, fp
 8008c3c:	468c      	mov	ip, r1
 8008c3e:	3305      	adds	r3, #5
 8008c40:	4463      	add	r3, ip
 8008c42:	195d      	adds	r5, r3, r5
 8008c44:	0013      	movs	r3, r2
 8008c46:	3b01      	subs	r3, #1
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	18ed      	adds	r5, r5, r3
									if(temp > 0 && temp <= NumOfPorts){
 8008c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c4e:	445e      	add	r6, fp
 8008c50:	3b01      	subs	r3, #1
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d90a      	bls.n	8008c6e <PxMessagingTask+0x5a6>
								for(p =0; p < numOfParams; p++){
 8008c58:	42b5      	cmp	r5, r6
 8008c5a:	d100      	bne.n	8008c5e <PxMessagingTask+0x596>
 8008c5c:	e5e9      	b.n	8008832 <PxMessagingTask+0x16a>
 8008c5e:	7833      	ldrb	r3, [r6, #0]
 8008c60:	3601      	adds	r6, #1
 8008c62:	930b      	str	r3, [sp, #44]	; 0x2c
									if(temp > 0 && temp <= NumOfPorts){
 8008c64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c66:	3b01      	subs	r3, #1
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b04      	cmp	r3, #4
 8008c6c:	d8f4      	bhi.n	8008c58 <PxMessagingTask+0x590>
										UpdateBaudrate(temp,temp32);
 8008c6e:	0039      	movs	r1, r7
 8008c70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008c72:	f004 fc4d 	bl	800d510 <UpdateBaudrate>
 8008c76:	e7ef      	b.n	8008c58 <PxMessagingTask+0x590>
							temp =numOfParams / 5;
 8008c78:	2105      	movs	r1, #5
 8008c7a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008c7c:	f7f7 fa68 	bl	8000150 <__udivsi3>
 8008c80:	b2c2      	uxtb	r2, r0
 8008c82:	920b      	str	r2, [sp, #44]	; 0x2c
							for(uint8_t k =0; k < temp; k++){
 8008c84:	2a00      	cmp	r2, #0
 8008c86:	d100      	bne.n	8008c8a <PxMessagingTask+0x5c2>
 8008c88:	e777      	b.n	8008b7a <PxMessagingTask+0x4b2>
 8008c8a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008c8c:	465b      	mov	r3, fp
 8008c8e:	468c      	mov	ip, r1
 8008c90:	3305      	adds	r3, #5
 8008c92:	4463      	add	r3, ip
 8008c94:	194e      	adds	r6, r1, r5
 8008c96:	195d      	adds	r5, r3, r5
 8008c98:	1e53      	subs	r3, r2, #1
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	009a      	lsls	r2, r3, #2
 8008c9e:	18d3      	adds	r3, r2, r3
 8008ca0:	445e      	add	r6, fp
 8008ca2:	18ed      	adds	r5, r5, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8008ca4:	4b6c      	ldr	r3, [pc, #432]	; (8008e58 <PxMessagingTask+0x790>)
 8008ca6:	7830      	ldrb	r0, [r6, #0]
 8008ca8:	469c      	mov	ip, r3
 8008caa:	3801      	subs	r0, #1
 8008cac:	0080      	lsls	r0, r0, #2
 8008cae:	1c71      	adds	r1, r6, #1
 8008cb0:	4460      	add	r0, ip
 8008cb2:	2204      	movs	r2, #4
 8008cb4:	3605      	adds	r6, #5
 8008cb6:	f00a f83a 	bl	8012d2e <memcpy>
							for(uint8_t k =0; k < temp; k++){
 8008cba:	42b5      	cmp	r5, r6
 8008cbc:	d1f2      	bne.n	8008ca4 <PxMessagingTask+0x5dc>
							responseStatus =BOS_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	e673      	b.n	80089aa <PxMessagingTask+0x2e2>
							ExploreNeighbors(port);
 8008cc2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008cc4:	f7fa fe18 	bl	80038f8 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8008cc8:	2302      	movs	r3, #2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008cca:	2501      	movs	r5, #1
							temp =0;
 8008ccc:	2700      	movs	r7, #0
							indMode =IND_TOPOLOGY;
 8008cce:	4a5d      	ldr	r2, [pc, #372]	; (8008e44 <PxMessagingTask+0x77c>)
							osDelay(10);
 8008cd0:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 8008cd2:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008cd4:	f004 fd64 	bl	800d7a0 <osDelay>
 8008cd8:	4e60      	ldr	r6, [pc, #384]	; (8008e5c <PxMessagingTask+0x794>)
								if(neighbors[p - 1][0]){
 8008cda:	8833      	ldrh	r3, [r6, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00a      	beq.n	8008cf6 <PxMessagingTask+0x62e>
									messageParams[temp] =p;
 8008ce0:	4b5f      	ldr	r3, [pc, #380]	; (8008e60 <PxMessagingTask+0x798>)
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008ce2:	1c78      	adds	r0, r7, #1
 8008ce4:	469c      	mov	ip, r3
 8008ce6:	2204      	movs	r2, #4
 8008ce8:	4460      	add	r0, ip
 8008cea:	0031      	movs	r1, r6
									messageParams[temp] =p;
 8008cec:	55dd      	strb	r5, [r3, r7]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008cee:	f00a f81e 	bl	8012d2e <memcpy>
									temp +=5;
 8008cf2:	3705      	adds	r7, #5
 8008cf4:	b2ff      	uxtb	r7, r7
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008cf6:	3501      	adds	r5, #1
 8008cf8:	b2ed      	uxtb	r5, r5
 8008cfa:	3604      	adds	r6, #4
 8008cfc:	2d06      	cmp	r5, #6
 8008cfe:	d1ec      	bne.n	8008cda <PxMessagingTask+0x612>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8008d00:	210d      	movs	r1, #13
 8008d02:	970b      	str	r7, [sp, #44]	; 0x2c
 8008d04:	b2ba      	uxth	r2, r7
										SendMessageToModule(src,
 8008d06:	4650      	mov	r0, sl
 8008d08:	f7ff fa08 	bl	800811c <SendMessageToModule>
 8008d0c:	e591      	b.n	8008832 <PxMessagingTask+0x16a>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008d0e:	4651      	mov	r1, sl
 8008d10:	9b06      	ldr	r3, [sp, #24]
 8008d12:	0209      	lsls	r1, r1, #8
 8008d14:	1b1b      	subs	r3, r3, r4
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	445b      	add	r3, fp
 8008d1a:	1958      	adds	r0, r3, r5
 8008d1c:	7882      	ldrb	r2, [r0, #2]
 8008d1e:	4e4f      	ldr	r6, [pc, #316]	; (8008e5c <PxMessagingTask+0x794>)
 8008d20:	1852      	adds	r2, r2, r1
 8008d22:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008d24:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008d26:	468c      	mov	ip, r1
 8008d28:	0032      	movs	r2, r6
 8008d2a:	5d59      	ldrb	r1, [r3, r5]
 8008d2c:	7843      	ldrb	r3, [r0, #1]
 8008d2e:	0209      	lsls	r1, r1, #8
 8008d30:	185b      	adds	r3, r3, r1
 8008d32:	4462      	add	r2, ip
 8008d34:	8053      	strh	r3, [r2, #2]
							responseStatus =BOS_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	e637      	b.n	80089aa <PxMessagingTask+0x2e2>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008d3a:	4651      	mov	r1, sl
 8008d3c:	9b06      	ldr	r3, [sp, #24]
 8008d3e:	0209      	lsls	r1, r1, #8
 8008d40:	1b1b      	subs	r3, r3, r4
 8008d42:	00db      	lsls	r3, r3, #3
 8008d44:	445b      	add	r3, fp
 8008d46:	1958      	adds	r0, r3, r5
 8008d48:	7882      	ldrb	r2, [r0, #2]
 8008d4a:	4e44      	ldr	r6, [pc, #272]	; (8008e5c <PxMessagingTask+0x794>)
 8008d4c:	1852      	adds	r2, r2, r1
 8008d4e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008d50:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008d52:	468c      	mov	ip, r1
 8008d54:	0032      	movs	r2, r6
 8008d56:	5d59      	ldrb	r1, [r3, r5]
 8008d58:	7843      	ldrb	r3, [r0, #1]
 8008d5a:	0209      	lsls	r1, r1, #8
 8008d5c:	4462      	add	r2, ip
 8008d5e:	185b      	adds	r3, r3, r1
 8008d60:	8053      	strh	r3, [r2, #2]
							messageParams[1] =(uint8_t )myPN;
 8008d62:	4b40      	ldr	r3, [pc, #256]	; (8008e64 <PxMessagingTask+0x79c>)
 8008d64:	4a3e      	ldr	r2, [pc, #248]	; (8008e60 <PxMessagingTask+0x798>)
 8008d66:	881b      	ldrh	r3, [r3, #0]
							messageParams[2] =port;
 8008d68:	9d0d      	ldr	r5, [sp, #52]	; 0x34
							messageParams[1] =(uint8_t )myPN;
 8008d6a:	7053      	strb	r3, [r2, #1]
							osDelay(2);
 8008d6c:	2002      	movs	r0, #2
							messageParams[0] =(uint8_t )(myPN >> 8);
 8008d6e:	0a1b      	lsrs	r3, r3, #8
 8008d70:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8008d72:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 8008d74:	f004 fd14 	bl	800d7a0 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8008d78:	2303      	movs	r3, #3
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	2100      	movs	r1, #0
 8008d80:	3308      	adds	r3, #8
 8008d82:	0028      	movs	r0, r5
 8008d84:	f7fe ff6a 	bl	8007c5c <SendMessageFromPort>
 8008d88:	464b      	mov	r3, r9
 8008d8a:	2600      	movs	r6, #0
 8008d8c:	5d1f      	ldrb	r7, [r3, r4]
 8008d8e:	e553      	b.n	8008838 <PxMessagingTask+0x170>
							IND_toggle();
 8008d90:	2180      	movs	r1, #128	; 0x80
 8008d92:	2090      	movs	r0, #144	; 0x90
 8008d94:	0109      	lsls	r1, r1, #4
 8008d96:	05c0      	lsls	r0, r0, #23
 8008d98:	f008 f872 	bl	8010e80 <HAL_GPIO_TogglePin>
 8008d9c:	464b      	mov	r3, r9
 8008d9e:	2600      	movs	r6, #0
 8008da0:	5d1f      	ldrb	r7, [r3, r4]
 8008da2:	e549      	b.n	8008838 <PxMessagingTask+0x170>
							IND_OFF();
 8008da4:	2200      	movs	r2, #0
 8008da6:	2180      	movs	r1, #128	; 0x80
 8008da8:	2090      	movs	r0, #144	; 0x90
 8008daa:	0109      	lsls	r1, r1, #4
 8008dac:	05c0      	lsls	r0, r0, #23
 8008dae:	f008 f861 	bl	8010e74 <HAL_GPIO_WritePin>
 8008db2:	e53e      	b.n	8008832 <PxMessagingTask+0x16a>
							IND_ON();
 8008db4:	2201      	movs	r2, #1
 8008db6:	e7f6      	b.n	8008da6 <PxMessagingTask+0x6de>
							if(!moduleAlias[myID][0])
 8008db8:	4b21      	ldr	r3, [pc, #132]	; (8008e40 <PxMessagingTask+0x778>)
 8008dba:	781a      	ldrb	r2, [r3, #0]
 8008dbc:	0093      	lsls	r3, r2, #2
 8008dbe:	189b      	adds	r3, r3, r2
 8008dc0:	4a29      	ldr	r2, [pc, #164]	; (8008e68 <PxMessagingTask+0x7a0>)
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	5cd3      	ldrb	r3, [r2, r3]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d000      	beq.n	8008dcc <PxMessagingTask+0x704>
 8008dca:	e2cf      	b.n	800936c <PxMessagingTask+0xca4>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8008dcc:	4827      	ldr	r0, [pc, #156]	; (8008e6c <PxMessagingTask+0x7a4>)
 8008dce:	4652      	mov	r2, sl
 8008dd0:	301c      	adds	r0, #28
 8008dd2:	4927      	ldr	r1, [pc, #156]	; (8008e70 <PxMessagingTask+0x7a8>)
 8008dd4:	f00a f9ae 	bl	8013134 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8008dd8:	4d24      	ldr	r5, [pc, #144]	; (8008e6c <PxMessagingTask+0x7a4>)
 8008dda:	351c      	adds	r5, #28
 8008ddc:	0028      	movs	r0, r5
 8008dde:	f7f7 f99b 	bl	8000118 <strlen>
 8008de2:	4b24      	ldr	r3, [pc, #144]	; (8008e74 <PxMessagingTask+0x7ac>)
 8008de4:	b282      	uxth	r2, r0
 8008de6:	7818      	ldrb	r0, [r3, #0]
 8008de8:	2301      	movs	r3, #1
 8008dea:	425b      	negs	r3, r3
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	0029      	movs	r1, r5
 8008df0:	3333      	adds	r3, #51	; 0x33
 8008df2:	f004 fb17 	bl	800d424 <writePxMutex>
							responseStatus =BOS_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	e5d7      	b.n	80089aa <PxMessagingTask+0x2e2>
							indMode =IND_PING;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	4a11      	ldr	r2, [pc, #68]	; (8008e44 <PxMessagingTask+0x77c>)
							osDelay(10);
 8008dfe:	200a      	movs	r0, #10
							indMode =IND_PING;
 8008e00:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008e02:	f004 fccd 	bl	800d7a0 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 8008e06:	2240      	movs	r2, #64	; 0x40
 8008e08:	4b1b      	ldr	r3, [pc, #108]	; (8008e78 <PxMessagingTask+0x7b0>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	4393      	bics	r3, r2
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	d000      	beq.n	8008e14 <PxMessagingTask+0x74c>
 8008e12:	e50e      	b.n	8008832 <PxMessagingTask+0x16a>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8008e14:	2200      	movs	r2, #0
 8008e16:	2102      	movs	r1, #2
 8008e18:	e775      	b.n	8008d06 <PxMessagingTask+0x63e>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008e1a:	4b18      	ldr	r3, [pc, #96]	; (8008e7c <PxMessagingTask+0x7b4>)
 8008e1c:	4a18      	ldr	r2, [pc, #96]	; (8008e80 <PxMessagingTask+0x7b8>)
							osDelay(10);
 8008e1e:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008e20:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 8008e22:	2301      	movs	r3, #1
 8008e24:	4a07      	ldr	r2, [pc, #28]	; (8008e44 <PxMessagingTask+0x77c>)
 8008e26:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008e28:	f004 fcba 	bl	800d7a0 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	4b14      	ldr	r3, [pc, #80]	; (8008e84 <PxMessagingTask+0x7bc>)
 8008e32:	4a15      	ldr	r2, [pc, #84]	; (8008e88 <PxMessagingTask+0x7c0>)
 8008e34:	60da      	str	r2, [r3, #12]
 8008e36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008e3a:	46c0      	nop			; (mov r8, r8)
 8008e3c:	e7fd      	b.n	8008e3a <PxMessagingTask+0x772>
 8008e3e:	46c0      	nop			; (mov r8, r8)
 8008e40:	20000aa8 	.word	0x20000aa8
 8008e44:	2000114e 	.word	0x2000114e
 8008e48:	20007238 	.word	0x20007238
 8008e4c:	20000c5a 	.word	0x20000c5a
 8008e50:	200018f8 	.word	0x200018f8
 8008e54:	20000c5c 	.word	0x20000c5c
 8008e58:	20001124 	.word	0x20001124
 8008e5c:	20001138 	.word	0x20001138
 8008e60:	20000b4c 	.word	0x20000b4c
 8008e64:	20000038 	.word	0x20000038
 8008e68:	20000dd4 	.word	0x20000dd4
 8008e6c:	20001820 	.word	0x20001820
 8008e70:	08019378 	.word	0x08019378
 8008e74:	20000c38 	.word	0x20000c38
 8008e78:	20006d34 	.word	0x20006d34
 8008e7c:	20007ff0 	.word	0x20007ff0
 8008e80:	deadbeef 	.word	0xdeadbeef
 8008e84:	e000ed00 	.word	0xe000ed00
 8008e88:	05fa0004 	.word	0x05fa0004
							temp =cMessage[port - 1][11 + shift];
 8008e8c:	230b      	movs	r3, #11
 8008e8e:	469c      	mov	ip, r3
 8008e90:	44ac      	add	ip, r5
 8008e92:	4662      	mov	r2, ip
 8008e94:	9b06      	ldr	r3, [sp, #24]
 8008e96:	9207      	str	r2, [sp, #28]
 8008e98:	1b1b      	subs	r3, r3, r4
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	445b      	add	r3, fp
 8008e9e:	5c9b      	ldrb	r3, [r3, r2]
							if(numOfParams == 15)
 8008ea0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ea2:	2a0f      	cmp	r2, #15
 8008ea4:	d100      	bne.n	8008ea8 <PxMessagingTask+0x7e0>
 8008ea6:	e316      	b.n	80094d6 <PxMessagingTask+0xe0e>
							if(numOfParams == 17)
 8008ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
							temp =cMessage[port - 1][11 + shift];
 8008eaa:	0019      	movs	r1, r3
							if(numOfParams == 17)
 8008eac:	2a11      	cmp	r2, #17
 8008eae:	d100      	bne.n	8008eb2 <PxMessagingTask+0x7ea>
 8008eb0:	e315      	b.n	80094de <PxMessagingTask+0xe16>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008eb2:	9f06      	ldr	r7, [sp, #24]
 8008eb4:	1caa      	adds	r2, r5, #2
 8008eb6:	920b      	str	r2, [sp, #44]	; 0x2c
 8008eb8:	1b3a      	subs	r2, r7, r4
 8008eba:	00d2      	lsls	r2, r2, #3
 8008ebc:	445a      	add	r2, fp
 8008ebe:	1ce8      	adds	r0, r5, #3
 8008ec0:	5d57      	ldrb	r7, [r2, r5]
 8008ec2:	9011      	str	r0, [sp, #68]	; 0x44
 8008ec4:	5c10      	ldrb	r0, [r2, r0]
 8008ec6:	1c6e      	adds	r6, r5, #1
 8008ec8:	063f      	lsls	r7, r7, #24
 8008eca:	183f      	adds	r7, r7, r0
 8008ecc:	5d90      	ldrb	r0, [r2, r6]
 8008ece:	9608      	str	r6, [sp, #32]
 8008ed0:	0400      	lsls	r0, r0, #16
 8008ed2:	183f      	adds	r7, r7, r0
 8008ed4:	1ca8      	adds	r0, r5, #2
 8008ed6:	5c10      	ldrb	r0, [r2, r0]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008ed8:	1d6e      	adds	r6, r5, #5
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008eda:	0200      	lsls	r0, r0, #8
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008edc:	9613      	str	r6, [sp, #76]	; 0x4c
 8008ede:	1dae      	adds	r6, r5, #6
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008ee0:	183f      	adds	r7, r7, r0
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008ee2:	9614      	str	r6, [sp, #80]	; 0x50
 8008ee4:	1d28      	adds	r0, r5, #4
 8008ee6:	1dee      	adds	r6, r5, #7
 8008ee8:	9012      	str	r0, [sp, #72]	; 0x48
 8008eea:	9615      	str	r6, [sp, #84]	; 0x54
 8008eec:	5c16      	ldrb	r6, [r2, r0]
 8008eee:	1d68      	adds	r0, r5, #5
 8008ef0:	5c10      	ldrb	r0, [r2, r0]
 8008ef2:	0636      	lsls	r6, r6, #24
 8008ef4:	0400      	lsls	r0, r0, #16
 8008ef6:	1836      	adds	r6, r6, r0
 8008ef8:	1de8      	adds	r0, r5, #7
 8008efa:	5c10      	ldrb	r0, [r2, r0]
 8008efc:	1836      	adds	r6, r6, r0
 8008efe:	1da8      	adds	r0, r5, #6
 8008f00:	5c10      	ldrb	r0, [r2, r0]
 8008f02:	0200      	lsls	r0, r0, #8
 8008f04:	1836      	adds	r6, r6, r0
 8008f06:	0028      	movs	r0, r5
 8008f08:	3009      	adds	r0, #9
							if(temp == false){
 8008f0a:	2900      	cmp	r1, #0
 8008f0c:	d000      	beq.n	8008f10 <PxMessagingTask+0x848>
 8008f0e:	e24d      	b.n	80093ac <PxMessagingTask+0xce4>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8008f10:	5c12      	ldrb	r2, [r2, r0]
 8008f12:	2a00      	cmp	r2, #0
 8008f14:	d00e      	beq.n	8008f34 <PxMessagingTask+0x86c>
 8008f16:	9905      	ldr	r1, [sp, #20]
 8008f18:	1948      	adds	r0, r1, r5
 8008f1a:	7a81      	ldrb	r1, [r0, #10]
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	d009      	beq.n	8008f34 <PxMessagingTask+0x86c>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8008f20:	0013      	movs	r3, r2
 8008f22:	7a00      	ldrb	r0, [r0, #8]
 8008f24:	0032      	movs	r2, r6
 8008f26:	9100      	str	r1, [sp, #0]
 8008f28:	0039      	movs	r1, r7
 8008f2a:	f7fe fda7 	bl	8007a7c <SetupDMAStreams>
 8008f2e:	9b05      	ldr	r3, [sp, #20]
 8008f30:	9a07      	ldr	r2, [sp, #28]
 8008f32:	5c9b      	ldrb	r3, [r3, r2]
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00a      	beq.n	8008f4e <PxMessagingTask+0x886>
 8008f38:	9a05      	ldr	r2, [sp, #20]
 8008f3a:	1951      	adds	r1, r2, r5
 8008f3c:	7b0a      	ldrb	r2, [r1, #12]
 8008f3e:	2a00      	cmp	r2, #0
 8008f40:	d005      	beq.n	8008f4e <PxMessagingTask+0x886>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8008f42:	7a08      	ldrb	r0, [r1, #8]
 8008f44:	9200      	str	r2, [sp, #0]
 8008f46:	0039      	movs	r1, r7
 8008f48:	0032      	movs	r2, r6
 8008f4a:	f7fe fd97 	bl	8007a7c <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 8008f4e:	9b06      	ldr	r3, [sp, #24]
 8008f50:	1b1b      	subs	r3, r3, r4
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	445b      	add	r3, fp
 8008f56:	195b      	adds	r3, r3, r5
 8008f58:	7b5b      	ldrb	r3, [r3, #13]
 8008f5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d100      	bne.n	8008f62 <PxMessagingTask+0x89a>
 8008f60:	e467      	b.n	8008832 <PxMessagingTask+0x16a>
 8008f62:	9b05      	ldr	r3, [sp, #20]
 8008f64:	469c      	mov	ip, r3
 8008f66:	4465      	add	r5, ip
 8008f68:	7bab      	ldrb	r3, [r5, #14]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d000      	beq.n	8008f70 <PxMessagingTask+0x8a8>
 8008f6e:	e29a      	b.n	80094a6 <PxMessagingTask+0xdde>
 8008f70:	464a      	mov	r2, r9
 8008f72:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f74:	5d17      	ldrb	r7, [r2, r4]
 8008f76:	001e      	movs	r6, r3
 8008f78:	e45e      	b.n	8008838 <PxMessagingTask+0x170>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 8008f7a:	9b06      	ldr	r3, [sp, #24]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	1b1e      	subs	r6, r3, r4
 8008f80:	2300      	movs	r3, #0
 8008f82:	00f6      	lsls	r6, r6, #3
 8008f84:	445e      	add	r6, fp
 8008f86:	5d70      	ldrb	r0, [r6, r5]
 8008f88:	2100      	movs	r1, #0
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	3319      	adds	r3, #25
 8008f8e:	f7fe fe65 	bl	8007c5c <SendMessageFromPort>
							osDelay(100);
 8008f92:	2064      	movs	r0, #100	; 0x64
 8008f94:	f004 fc04 	bl	800d7a0 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 8008f98:	4ae7      	ldr	r2, [pc, #924]	; (8009338 <PxMessagingTask+0xc70>)
 8008f9a:	5d73      	ldrb	r3, [r6, r5]
 8008f9c:	7811      	ldrb	r1, [r2, #0]
 8008f9e:	4650      	mov	r0, sl
 8008fa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fa2:	f000 ff7d 	bl	8009ea0 <remoteBootloaderUpdate>
 8008fa6:	464b      	mov	r3, r9
 8008fa8:	2600      	movs	r6, #0
 8008faa:	5d1f      	ldrb	r7, [r3, r4]
 8008fac:	e444      	b.n	8008838 <PxMessagingTask+0x170>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008fae:	f004 fcff 	bl	800d9b0 <FreeRTOS_CLIGetOutputBuffer>
 8008fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fb4:	0006      	movs	r6, r0
 8008fb6:	18e9      	adds	r1, r5, r3
							if(dst == BOS_BROADCAST)
 8008fb8:	9b07      	ldr	r3, [sp, #28]
 8008fba:	4459      	add	r1, fp
 8008fbc:	2bff      	cmp	r3, #255	; 0xff
 8008fbe:	d100      	bne.n	8008fc2 <PxMessagingTask+0x8fa>
 8008fc0:	e13e      	b.n	8009240 <PxMessagingTask+0xb78>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008fc2:	48de      	ldr	r0, [pc, #888]	; (800933c <PxMessagingTask+0xc74>)
							else if(dst == BOS_MULTICAST)
 8008fc4:	9b07      	ldr	r3, [sp, #28]
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008fc6:	306c      	adds	r0, #108	; 0x6c
							else if(dst == BOS_MULTICAST)
 8008fc8:	2bfe      	cmp	r3, #254	; 0xfe
 8008fca:	d100      	bne.n	8008fce <PxMessagingTask+0x906>
 8008fcc:	e131      	b.n	8009232 <PxMessagingTask+0xb6a>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fd0:	f009 fead 	bl	8012d2e <memcpy>
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008fd4:	4fd9      	ldr	r7, [pc, #868]	; (800933c <PxMessagingTask+0xc74>)
 8008fd6:	376c      	adds	r7, #108	; 0x6c
 8008fd8:	e001      	b.n	8008fde <PxMessagingTask+0x916>
							} while(xReturned != pdFALSE);
 8008fda:	2d00      	cmp	r5, #0
 8008fdc:	d028      	beq.n	8009030 <PxMessagingTask+0x968>
								PcPort =port;
 8008fde:	4ad8      	ldr	r2, [pc, #864]	; (8009340 <PxMessagingTask+0xc78>)
 8008fe0:	990d      	ldr	r1, [sp, #52]	; 0x34
								temp =PcPort;
 8008fe2:	4bd7      	ldr	r3, [pc, #860]	; (8009340 <PxMessagingTask+0xc78>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008fe4:	0038      	movs	r0, r7
								temp =PcPort;
 8008fe6:	781b      	ldrb	r3, [r3, #0]
								PcPort =port;
 8008fe8:	7011      	strb	r1, [r2, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008fea:	2299      	movs	r2, #153	; 0x99
 8008fec:	0031      	movs	r1, r6
 8008fee:	0092      	lsls	r2, r2, #2
								temp =PcPort;
 8008ff0:	930b      	str	r3, [sp, #44]	; 0x2c
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008ff2:	f004 fc65 	bl	800d8c0 <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 8008ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ff8:	4ad1      	ldr	r2, [pc, #836]	; (8009340 <PxMessagingTask+0xc78>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008ffa:	0005      	movs	r5, r0
								PcPort =temp;
 8008ffc:	7013      	strb	r3, [r2, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8008ffe:	4bd1      	ldr	r3, [pc, #836]	; (8009344 <PxMessagingTask+0xc7c>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	2b60      	cmp	r3, #96	; 0x60
 8009004:	d1e9      	bne.n	8008fda <PxMessagingTask+0x912>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 8009006:	0030      	movs	r0, r6
 8009008:	f7f7 f886 	bl	8000118 <strlen>
 800900c:	0031      	movs	r1, r6
 800900e:	0002      	movs	r2, r0
 8009010:	48cd      	ldr	r0, [pc, #820]	; (8009348 <PxMessagingTask+0xc80>)
 8009012:	f009 fe8c 	bl	8012d2e <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8009016:	0030      	movs	r0, r6
 8009018:	f7f7 f87e 	bl	8000118 <strlen>
 800901c:	2118      	movs	r1, #24
 800901e:	b282      	uxth	r2, r0
 8009020:	4650      	mov	r0, sl
 8009022:	f7ff f87b 	bl	800811c <SendMessageToModule>
									osDelay(10);
 8009026:	200a      	movs	r0, #10
 8009028:	f004 fbba 	bl	800d7a0 <osDelay>
							} while(xReturned != pdFALSE);
 800902c:	2d00      	cmp	r5, #0
 800902e:	d1d6      	bne.n	8008fde <PxMessagingTask+0x916>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 8009030:	48c2      	ldr	r0, [pc, #776]	; (800933c <PxMessagingTask+0xc74>)
 8009032:	2232      	movs	r2, #50	; 0x32
 8009034:	306c      	adds	r0, #108	; 0x6c
 8009036:	2100      	movs	r1, #0
 8009038:	f009 fe82 	bl	8012d40 <memset>
 800903c:	464b      	mov	r3, r9
 800903e:	2600      	movs	r6, #0
 8009040:	5d1f      	ldrb	r7, [r3, r4]
 8009042:	f7ff fbf9 	bl	8008838 <PxMessagingTask+0x170>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009046:	f004 fcb3 	bl	800d9b0 <FreeRTOS_CLIGetOutputBuffer>
 800904a:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800904c:	f7f7 f864 	bl	8000118 <strlen>
 8009050:	2100      	movs	r1, #0
 8009052:	0002      	movs	r2, r0
 8009054:	0030      	movs	r0, r6
 8009056:	f009 fe73 	bl	8012d40 <memset>
 800905a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800905c:	18e9      	adds	r1, r5, r3
							if(longMessage){
 800905e:	4bbb      	ldr	r3, [pc, #748]	; (800934c <PxMessagingTask+0xc84>)
 8009060:	4459      	add	r1, fp
 8009062:	781f      	ldrb	r7, [r3, #0]
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009064:	4bba      	ldr	r3, [pc, #744]	; (8009350 <PxMessagingTask+0xc88>)
 8009066:	8818      	ldrh	r0, [r3, #0]
 8009068:	1830      	adds	r0, r6, r0
							if(longMessage){
 800906a:	2f00      	cmp	r7, #0
 800906c:	d100      	bne.n	8009070 <PxMessagingTask+0x9a8>
 800906e:	e0cd      	b.n	800920c <PxMessagingTask+0xb44>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009070:	9d0c      	ldr	r5, [sp, #48]	; 0x30
								longMessageLastPtr +=numOfParams;
 8009072:	2600      	movs	r6, #0
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009074:	002a      	movs	r2, r5
 8009076:	f009 fe5a 	bl	8012d2e <memcpy>
								longMessageLastPtr +=numOfParams;
 800907a:	46ac      	mov	ip, r5
 800907c:	4bb4      	ldr	r3, [pc, #720]	; (8009350 <PxMessagingTask+0xc88>)
 800907e:	881a      	ldrh	r2, [r3, #0]
 8009080:	4bb3      	ldr	r3, [pc, #716]	; (8009350 <PxMessagingTask+0xc88>)
 8009082:	4462      	add	r2, ip
 8009084:	801a      	strh	r2, [r3, #0]
 8009086:	464b      	mov	r3, r9
 8009088:	5d1f      	ldrb	r7, [r3, r4]
 800908a:	f7ff fbd5 	bl	8008838 <PxMessagingTask+0x170>
							ClearEEportsDir();
 800908e:	f7fa fab3 	bl	80035f8 <ClearEEportsDir>
							ClearROtopology();
 8009092:	f000 fed9 	bl	8009e48 <ClearROtopology>
							osDelay(100);
 8009096:	2064      	movs	r0, #100	; 0x64
 8009098:	f004 fb82 	bl	800d7a0 <osDelay>
							indMode =IND_TOPOLOGY;
 800909c:	2302      	movs	r3, #2
 800909e:	e545      	b.n	8008b2c <PxMessagingTask+0x464>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 80090a0:	4ba5      	ldr	r3, [pc, #660]	; (8009338 <PxMessagingTask+0xc70>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d01e      	beq.n	80090e6 <PxMessagingTask+0xa1e>
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d019      	beq.n	80090e0 <PxMessagingTask+0xa18>
				ForwardReceivedMessage(port);
 80090ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 80090ae:	f7ff f815 	bl	80080dc <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 80090b2:	4ba4      	ldr	r3, [pc, #656]	; (8009344 <PxMessagingTask+0xc7c>)
 80090b4:	785b      	ldrb	r3, [r3, #1]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d002      	beq.n	80090c0 <PxMessagingTask+0x9f8>
					indMode =IND_SHORT_BLINK;
 80090ba:	2303      	movs	r3, #3
 80090bc:	4aa5      	ldr	r2, [pc, #660]	; (8009354 <PxMessagingTask+0xc8c>)
 80090be:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 80090c0:	9b08      	ldr	r3, [sp, #32]
 80090c2:	2b19      	cmp	r3, #25
 80090c4:	d07c      	beq.n	80091c0 <PxMessagingTask+0xaf8>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 80090c6:	9b08      	ldr	r3, [sp, #32]
 80090c8:	2b1a      	cmp	r3, #26
 80090ca:	d100      	bne.n	80090ce <PxMessagingTask+0xa06>
 80090cc:	e082      	b.n	80091d4 <PxMessagingTask+0xb0c>
 80090ce:	464b      	mov	r3, r9
 80090d0:	5d1f      	ldrb	r7, [r3, r4]
 80090d2:	f7ff fbb1 	bl	8008838 <PxMessagingTask+0x170>
				longMessage =1;
 80090d6:	2301      	movs	r3, #1
 80090d8:	4a9c      	ldr	r2, [pc, #624]	; (800934c <PxMessagingTask+0xc84>)
 80090da:	7013      	strb	r3, [r2, #0]
 80090dc:	f7ff fb33 	bl	8008746 <PxMessagingTask+0x7e>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 80090e0:	9b08      	ldr	r3, [sp, #32]
 80090e2:	2b10      	cmp	r3, #16
 80090e4:	d1e2      	bne.n	80090ac <PxMessagingTask+0x9e4>
 80090e6:	464b      	mov	r3, r9
 80090e8:	5d1f      	ldrb	r7, [r3, r4]
				if(result == BOS_OK){
 80090ea:	2e00      	cmp	r6, #0
 80090ec:	d001      	beq.n	80090f2 <PxMessagingTask+0xa2a>
 80090ee:	f7ff fba3 	bl	8008838 <PxMessagingTask+0x170>
				shift +=4;
 80090f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090f4:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 80090f6:	1b7a      	subs	r2, r7, r5
 80090f8:	b2d3      	uxtb	r3, r2
 80090fa:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 80090fc:	9b08      	ldr	r3, [sp, #32]
 80090fe:	2b2d      	cmp	r3, #45	; 0x2d
 8009100:	d801      	bhi.n	8009106 <PxMessagingTask+0xa3e>
 8009102:	f7ff fb83 	bl	800880c <PxMessagingTask+0x144>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 8009106:	9500      	str	r5, [sp, #0]
 8009108:	9b07      	ldr	r3, [sp, #28]
 800910a:	4652      	mov	r2, sl
 800910c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800910e:	9808      	ldr	r0, [sp, #32]
 8009110:	f7ff fad8 	bl	80086c4 <User_MessagingParser>
 8009114:	0006      	movs	r6, r0
							if(result == BOS_ERR_UnknownMessage){
 8009116:	2801      	cmp	r0, #1
 8009118:	d1d9      	bne.n	80090ce <PxMessagingTask+0xa06>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800911a:	4652      	mov	r2, sl
 800911c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800911e:	9500      	str	r5, [sp, #0]
 8009120:	9b07      	ldr	r3, [sp, #28]
 8009122:	9808      	ldr	r0, [sp, #32]
 8009124:	f001 f83e 	bl	800a1a4 <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8009128:	2200      	movs	r2, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800912a:	0006      	movs	r6, r0
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800912c:	2100      	movs	r1, #0
		if(result == BOS_ERR_UnknownMessage){
 800912e:	2801      	cmp	r0, #1
 8009130:	d100      	bne.n	8009134 <PxMessagingTask+0xa6c>
 8009132:	e5e8      	b.n	8008d06 <PxMessagingTask+0x63e>
 8009134:	e7cb      	b.n	80090ce <PxMessagingTask+0xa06>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009136:	9b07      	ldr	r3, [sp, #28]
 8009138:	2bfe      	cmp	r3, #254	; 0xfe
 800913a:	d1d6      	bne.n	80090ea <PxMessagingTask+0xa22>
 800913c:	9b06      	ldr	r3, [sp, #24]
 800913e:	4a7f      	ldr	r2, [pc, #508]	; (800933c <PxMessagingTask+0xc74>)
 8009140:	1b1d      	subs	r5, r3, r4
 8009142:	00ed      	lsls	r5, r5, #3
 8009144:	445d      	add	r5, fp
 8009146:	19eb      	adds	r3, r5, r7
 8009148:	3b01      	subs	r3, #1
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	7e12      	ldrb	r2, [r2, #24]
					result =BOS_ERR_MSG_Reflection;
 800914e:	2603      	movs	r6, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009150:	429a      	cmp	r2, r3
 8009152:	d101      	bne.n	8009158 <PxMessagingTask+0xa90>
 8009154:	f7ff fb70 	bl	8008838 <PxMessagingTask+0x170>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009158:	4a78      	ldr	r2, [pc, #480]	; (800933c <PxMessagingTask+0xc74>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800915a:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800915c:	7613      	strb	r3, [r2, #24]
 800915e:	4a7e      	ldr	r2, [pc, #504]	; (8009358 <PxMessagingTask+0xc90>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8009160:	20fe      	movs	r0, #254	; 0xfe
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009162:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8009164:	f7fe ff76 	bl	8008054 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8009168:	464b      	mov	r3, r9
 800916a:	2200      	movs	r2, #0
 800916c:	5d1f      	ldrb	r7, [r3, r4]
 800916e:	19eb      	adds	r3, r5, r7
 8009170:	3b01      	subs	r3, #1
 8009172:	701a      	strb	r2, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8009174:	1eb8      	subs	r0, r7, #2
 8009176:	5c2e      	ldrb	r6, [r5, r0]
 8009178:	960b      	str	r6, [sp, #44]	; 0x2c
					for(i =0; i < temp; i++){
 800917a:	2e00      	cmp	r6, #0
 800917c:	d01d      	beq.n	80091ba <PxMessagingTask+0xaf2>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800917e:	4b6e      	ldr	r3, [pc, #440]	; (8009338 <PxMessagingTask+0xc70>)
 8009180:	1b80      	subs	r0, r0, r6
 8009182:	7819      	ldrb	r1, [r3, #0]
 8009184:	5c2b      	ldrb	r3, [r5, r0]
 8009186:	428b      	cmp	r3, r1
 8009188:	d101      	bne.n	800918e <PxMessagingTask+0xac6>
 800918a:	f7ff fb35 	bl	80087f8 <PxMessagingTask+0x130>
 800918e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009190:	465a      	mov	r2, fp
 8009192:	46ac      	mov	ip, r5
 8009194:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009196:	3201      	adds	r2, #1
 8009198:	1e75      	subs	r5, r6, #1
 800919a:	4462      	add	r2, ip
 800919c:	b2ed      	uxtb	r5, r5
 800919e:	181b      	adds	r3, r3, r0
 80091a0:	1952      	adds	r2, r2, r5
 80091a2:	445b      	add	r3, fp
 80091a4:	1812      	adds	r2, r2, r0
 80091a6:	e006      	b.n	80091b6 <PxMessagingTask+0xaee>
 80091a8:	3301      	adds	r3, #1
 80091aa:	1e58      	subs	r0, r3, #1
 80091ac:	7800      	ldrb	r0, [r0, #0]
 80091ae:	4288      	cmp	r0, r1
 80091b0:	d101      	bne.n	80091b6 <PxMessagingTask+0xaee>
 80091b2:	f7ff fb21 	bl	80087f8 <PxMessagingTask+0x130>
					for(i =0; i < temp; i++){
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d1f6      	bne.n	80091a8 <PxMessagingTask+0xae0>
					result =BOS_ERR_WrongID;
 80091ba:	2666      	movs	r6, #102	; 0x66
 80091bc:	f7ff fb3c 	bl	8008838 <PxMessagingTask+0x170>
					Delay_ms(100);
 80091c0:	2064      	movs	r0, #100	; 0x64
 80091c2:	f006 f995 	bl	800f4f0 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 80091c6:	2300      	movs	r3, #0
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 80091c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091ca:	9907      	ldr	r1, [sp, #28]
 80091cc:	4650      	mov	r0, sl
 80091ce:	f000 fe67 	bl	8009ea0 <remoteBootloaderUpdate>
 80091d2:	e77c      	b.n	80090ce <PxMessagingTask+0xa06>
					Delay_ms(100);
 80091d4:	2064      	movs	r0, #100	; 0x64
 80091d6:	f006 f98b 	bl	800f4f0 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 80091da:	9b06      	ldr	r3, [sp, #24]
 80091dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091de:	1b1b      	subs	r3, r3, r4
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	445b      	add	r3, fp
 80091e4:	5c9b      	ldrb	r3, [r3, r2]
 80091e6:	e7ef      	b.n	80091c8 <PxMessagingTask+0xb00>
								ADCSelectChannel(ADCPort,"top");
 80091e8:	495c      	ldr	r1, [pc, #368]	; (800935c <PxMessagingTask+0xc94>)
 80091ea:	f003 f951 	bl	800c490 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 80091ee:	4b5c      	ldr	r3, [pc, #368]	; (8009360 <PxMessagingTask+0xc98>)
 80091f0:	4a5b      	ldr	r2, [pc, #364]	; (8009360 <PxMessagingTask+0xc98>)
 80091f2:	5d98      	ldrb	r0, [r3, r6]
 80091f4:	3248      	adds	r2, #72	; 0x48
 80091f6:	4959      	ldr	r1, [pc, #356]	; (800935c <PxMessagingTask+0xc94>)
 80091f8:	f003 f99a 	bl	800c530 <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 80091fc:	4958      	ldr	r1, [pc, #352]	; (8009360 <PxMessagingTask+0xc98>)
 80091fe:	4858      	ldr	r0, [pc, #352]	; (8009360 <PxMessagingTask+0xc98>)
 8009200:	314c      	adds	r1, #76	; 0x4c
 8009202:	3050      	adds	r0, #80	; 0x50
 8009204:	f002 ff7e 	bl	800c104 <ReadTempAndVref>
 8009208:	f7ff fb81 	bl	800890e <PxMessagingTask+0x246>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800920c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800920e:	f009 fd8e 	bl	8012d2e <memcpy>
								longMessageLastPtr =0;
 8009212:	4b4f      	ldr	r3, [pc, #316]	; (8009350 <PxMessagingTask+0xc88>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8009214:	4853      	ldr	r0, [pc, #332]	; (8009364 <PxMessagingTask+0xc9c>)
								longMessageLastPtr =0;
 8009216:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 8009218:	4b53      	ldr	r3, [pc, #332]	; (8009368 <PxMessagingTask+0xca0>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800921a:	6800      	ldr	r0, [r0, #0]
								responseStatus =BOS_OK;
 800921c:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800921e:	2300      	movs	r3, #0
 8009220:	001a      	movs	r2, r3
 8009222:	0019      	movs	r1, r3
 8009224:	f005 fdb4 	bl	800ed90 <xTaskGenericNotify>
 8009228:	464b      	mov	r3, r9
 800922a:	2600      	movs	r6, #0
 800922c:	5d1f      	ldrb	r7, [r3, r4]
 800922e:	f7ff fb03 	bl	8008838 <PxMessagingTask+0x170>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8009232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009236:	1a9a      	subs	r2, r3, r2
 8009238:	3a02      	subs	r2, #2
 800923a:	f009 fd78 	bl	8012d2e <memcpy>
 800923e:	e6c9      	b.n	8008fd4 <PxMessagingTask+0x90c>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 8009240:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009242:	483e      	ldr	r0, [pc, #248]	; (800933c <PxMessagingTask+0xc74>)
 8009244:	3a01      	subs	r2, #1
 8009246:	306c      	adds	r0, #108	; 0x6c
 8009248:	f009 fd71 	bl	8012d2e <memcpy>
 800924c:	e6c2      	b.n	8008fd4 <PxMessagingTask+0x90c>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800924e:	9905      	ldr	r1, [sp, #20]
 8009250:	1949      	adds	r1, r1, r5
 8009252:	788b      	ldrb	r3, [r1, #2]
 8009254:	78ce      	ldrb	r6, [r1, #3]
 8009256:	021b      	lsls	r3, r3, #8
 8009258:	0436      	lsls	r6, r6, #16
 800925a:	199b      	adds	r3, r3, r6
 800925c:	189b      	adds	r3, r3, r2
 800925e:	790a      	ldrb	r2, [r1, #4]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009260:	9905      	ldr	r1, [sp, #20]
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009262:	0612      	lsls	r2, r2, #24
 8009264:	189b      	adds	r3, r3, r2
 8009266:	4a3e      	ldr	r2, [pc, #248]	; (8009360 <PxMessagingTask+0xc98>)
 8009268:	6213      	str	r3, [r2, #32]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800926a:	5c0b      	ldrb	r3, [r1, r0]
 800926c:	5dca      	ldrb	r2, [r1, r7]
 800926e:	021b      	lsls	r3, r3, #8
 8009270:	0412      	lsls	r2, r2, #16
 8009272:	189b      	adds	r3, r3, r2
 8009274:	1d6a      	adds	r2, r5, #5
 8009276:	5c8a      	ldrb	r2, [r1, r2]
 8009278:	189b      	adds	r3, r3, r2
 800927a:	4652      	mov	r2, sl
 800927c:	5c8a      	ldrb	r2, [r1, r2]
 800927e:	0612      	lsls	r2, r2, #24
 8009280:	189b      	adds	r3, r3, r2
 8009282:	4a37      	ldr	r2, [pc, #220]	; (8009360 <PxMessagingTask+0xc98>)
 8009284:	6253      	str	r3, [r2, #36]	; 0x24
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009288:	9a07      	ldr	r2, [sp, #28]
 800928a:	5ccb      	ldrb	r3, [r1, r3]
 800928c:	5c8a      	ldrb	r2, [r1, r2]
 800928e:	021b      	lsls	r3, r3, #8
 8009290:	0412      	lsls	r2, r2, #16
 8009292:	189b      	adds	r3, r3, r2
 8009294:	9a08      	ldr	r2, [sp, #32]
 8009296:	5c8a      	ldrb	r2, [r1, r2]
 8009298:	189b      	adds	r3, r3, r2
 800929a:	4662      	mov	r2, ip
 800929c:	5c8a      	ldrb	r2, [r1, r2]
 800929e:	0612      	lsls	r2, r2, #24
 80092a0:	189b      	adds	r3, r3, r2
 80092a2:	4a2f      	ldr	r2, [pc, #188]	; (8009360 <PxMessagingTask+0xc98>)
 80092a4:	6293      	str	r3, [r2, #40]	; 0x28
									break;
 80092a6:	f7ff fb0f 	bl	80088c8 <PxMessagingTask+0x200>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80092aa:	9905      	ldr	r1, [sp, #20]
 80092ac:	1949      	adds	r1, r1, r5
 80092ae:	788b      	ldrb	r3, [r1, #2]
 80092b0:	78ce      	ldrb	r6, [r1, #3]
 80092b2:	021b      	lsls	r3, r3, #8
 80092b4:	0436      	lsls	r6, r6, #16
 80092b6:	199b      	adds	r3, r3, r6
 80092b8:	189b      	adds	r3, r3, r2
 80092ba:	790a      	ldrb	r2, [r1, #4]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80092bc:	9905      	ldr	r1, [sp, #20]
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80092be:	0612      	lsls	r2, r2, #24
 80092c0:	189b      	adds	r3, r3, r2
 80092c2:	4a27      	ldr	r2, [pc, #156]	; (8009360 <PxMessagingTask+0xc98>)
 80092c4:	62d3      	str	r3, [r2, #44]	; 0x2c
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80092c6:	5c0b      	ldrb	r3, [r1, r0]
 80092c8:	5dca      	ldrb	r2, [r1, r7]
 80092ca:	021b      	lsls	r3, r3, #8
 80092cc:	0412      	lsls	r2, r2, #16
 80092ce:	189b      	adds	r3, r3, r2
 80092d0:	1d6a      	adds	r2, r5, #5
 80092d2:	5c8a      	ldrb	r2, [r1, r2]
 80092d4:	189b      	adds	r3, r3, r2
 80092d6:	4652      	mov	r2, sl
 80092d8:	5c8a      	ldrb	r2, [r1, r2]
 80092da:	0612      	lsls	r2, r2, #24
 80092dc:	189b      	adds	r3, r3, r2
 80092de:	4a20      	ldr	r2, [pc, #128]	; (8009360 <PxMessagingTask+0xc98>)
 80092e0:	6313      	str	r3, [r2, #48]	; 0x30
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80092e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092e4:	9a07      	ldr	r2, [sp, #28]
 80092e6:	5ccb      	ldrb	r3, [r1, r3]
 80092e8:	5c8a      	ldrb	r2, [r1, r2]
 80092ea:	021b      	lsls	r3, r3, #8
 80092ec:	0412      	lsls	r2, r2, #16
 80092ee:	189b      	adds	r3, r3, r2
 80092f0:	9a08      	ldr	r2, [sp, #32]
 80092f2:	5c8a      	ldrb	r2, [r1, r2]
 80092f4:	189b      	adds	r3, r3, r2
 80092f6:	4662      	mov	r2, ip
 80092f8:	5c8a      	ldrb	r2, [r1, r2]
 80092fa:	0612      	lsls	r2, r2, #24
 80092fc:	189b      	adds	r3, r3, r2
 80092fe:	4a18      	ldr	r2, [pc, #96]	; (8009360 <PxMessagingTask+0xc98>)
 8009300:	6353      	str	r3, [r2, #52]	; 0x34
									break;
 8009302:	f7ff fae1 	bl	80088c8 <PxMessagingTask+0x200>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 8009306:	2b01      	cmp	r3, #1
 8009308:	d001      	beq.n	800930e <PxMessagingTask+0xc46>
 800930a:	f7ff fa92 	bl	8008832 <PxMessagingTask+0x16a>
								messageParams[0] =0; /* change own ID */
 800930e:	2600      	movs	r6, #0
 8009310:	4b0d      	ldr	r3, [pc, #52]	; (8009348 <PxMessagingTask+0xc80>)
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8009312:	4a0d      	ldr	r2, [pc, #52]	; (8009348 <PxMessagingTask+0xc80>)
								messageParams[0] =0; /* change own ID */
 8009314:	701e      	strb	r6, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8009316:	9b05      	ldr	r3, [sp, #20]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 8009318:	0031      	movs	r1, r6
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800931a:	469c      	mov	ip, r3
 800931c:	4465      	add	r5, ip
 800931e:	786b      	ldrb	r3, [r5, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 8009320:	78a8      	ldrb	r0, [r5, #2]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8009322:	7053      	strb	r3, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 8009324:	2303      	movs	r3, #3
 8009326:	0032      	movs	r2, r6
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	330d      	adds	r3, #13
 800932c:	f7fe fc96 	bl	8007c5c <SendMessageFromPort>
 8009330:	464b      	mov	r3, r9
 8009332:	5d1f      	ldrb	r7, [r3, r4]
 8009334:	f7ff fa80 	bl	8008838 <PxMessagingTask+0x170>
 8009338:	20000aa8 	.word	0x20000aa8
 800933c:	20001820 	.word	0x20001820
 8009340:	20000c38 	.word	0x20000c38
 8009344:	20006d34 	.word	0x20006d34
 8009348:	20000b4c 	.word	0x20000b4c
 800934c:	20000c5c 	.word	0x20000c5c
 8009350:	20000c5a 	.word	0x20000c5a
 8009354:	2000114e 	.word	0x2000114e
 8009358:	20000c58 	.word	0x20000c58
 800935c:	0801886c 	.word	0x0801886c
 8009360:	200018a0 	.word	0x200018a0
 8009364:	2000171c 	.word	0x2000171c
 8009368:	20000c4c 	.word	0x20000c4c
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800936c:	4652      	mov	r2, sl
 800936e:	230a      	movs	r3, #10
 8009370:	4353      	muls	r3, r2
 8009372:	4adf      	ldr	r2, [pc, #892]	; (80096f0 <PxMessagingTask+0x1028>)
 8009374:	48df      	ldr	r0, [pc, #892]	; (80096f4 <PxMessagingTask+0x102c>)
 8009376:	4694      	mov	ip, r2
 8009378:	49df      	ldr	r1, [pc, #892]	; (80096f8 <PxMessagingTask+0x1030>)
 800937a:	4463      	add	r3, ip
 800937c:	4652      	mov	r2, sl
 800937e:	301c      	adds	r0, #28
 8009380:	f009 fed8 	bl	8013134 <sprintf>
 8009384:	e528      	b.n	8008dd8 <PxMessagingTask+0x710>
 8009386:	2600      	movs	r6, #0
 8009388:	f7ff fa56 	bl	8008838 <PxMessagingTask+0x170>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800938c:	2a01      	cmp	r2, #1
 800938e:	d901      	bls.n	8009394 <PxMessagingTask+0xccc>
 8009390:	f7ff fb46 	bl	8008a20 <PxMessagingTask+0x358>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 8009394:	9b05      	ldr	r3, [sp, #20]
 8009396:	4ad9      	ldr	r2, [pc, #868]	; (80096fc <PxMessagingTask+0x1034>)
 8009398:	5d5b      	ldrb	r3, [r3, r5]
 800939a:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800939c:	2b08      	cmp	r3, #8
 800939e:	d901      	bls.n	80093a4 <PxMessagingTask+0xcdc>
 80093a0:	f7ff fb3e 	bl	8008a20 <PxMessagingTask+0x358>
 80093a4:	4ad6      	ldr	r2, [pc, #856]	; (8009700 <PxMessagingTask+0x1038>)
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	58d3      	ldr	r3, [r2, r3]
 80093aa:	469f      	mov	pc, r3
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 80093ac:	2338      	movs	r3, #56	; 0x38
 80093ae:	46aa      	mov	sl, r5
 80093b0:	435c      	muls	r4, r3
 80093b2:	445c      	add	r4, fp
 80093b4:	1965      	adds	r5, r4, r5
 80093b6:	0007      	movs	r7, r0
 80093b8:	7a29      	ldrb	r1, [r5, #8]
 80093ba:	20e4      	movs	r0, #228	; 0xe4
 80093bc:	f002 f8a4 	bl	800b508 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 80093c0:	4653      	mov	r3, sl
 80093c2:	9a08      	ldr	r2, [sp, #32]
 80093c4:	5ce3      	ldrb	r3, [r4, r3]
 80093c6:	5ca1      	ldrb	r1, [r4, r2]
 80093c8:	021b      	lsls	r3, r3, #8
 80093ca:	18c9      	adds	r1, r1, r3
 80093cc:	b289      	uxth	r1, r1
 80093ce:	20e5      	movs	r0, #229	; 0xe5
 80093d0:	f002 f89a 	bl	800b508 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 80093d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80093d8:	5ce3      	ldrb	r3, [r4, r3]
 80093da:	5ca1      	ldrb	r1, [r4, r2]
 80093dc:	021b      	lsls	r3, r3, #8
 80093de:	18c9      	adds	r1, r1, r3
 80093e0:	b289      	uxth	r1, r1
 80093e2:	20e6      	movs	r0, #230	; 0xe6
 80093e4:	f002 f890 	bl	800b508 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 80093e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80093ec:	5ce3      	ldrb	r3, [r4, r3]
 80093ee:	5ca1      	ldrb	r1, [r4, r2]
 80093f0:	021b      	lsls	r3, r3, #8
 80093f2:	18c9      	adds	r1, r1, r3
 80093f4:	b289      	uxth	r1, r1
 80093f6:	20e7      	movs	r0, #231	; 0xe7
 80093f8:	f002 f886 	bl	800b508 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 80093fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009400:	5ce3      	ldrb	r3, [r4, r3]
 8009402:	5ca1      	ldrb	r1, [r4, r2]
 8009404:	021b      	lsls	r3, r3, #8
 8009406:	18c9      	adds	r1, r1, r3
 8009408:	b289      	uxth	r1, r1
 800940a:	20e8      	movs	r0, #232	; 0xe8
 800940c:	f002 f87c 	bl	800b508 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 8009410:	5de3      	ldrb	r3, [r4, r7]
 8009412:	7aa9      	ldrb	r1, [r5, #10]
 8009414:	021b      	lsls	r3, r3, #8
 8009416:	18c9      	adds	r1, r1, r3
 8009418:	b289      	uxth	r1, r1
 800941a:	20e9      	movs	r0, #233	; 0xe9
 800941c:	f002 f874 	bl	800b508 <EE_WriteVariable>
								if(numOfParams == 19)
 8009420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009422:	2b13      	cmp	r3, #19
 8009424:	d013      	beq.n	800944e <PxMessagingTask+0xd86>
								if(numOfParams == 21)
 8009426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009428:	2b15      	cmp	r3, #21
 800942a:	d107      	bne.n	800943c <PxMessagingTask+0xd74>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800942c:	7b6b      	ldrb	r3, [r5, #13]
 800942e:	7ba9      	ldrb	r1, [r5, #14]
 8009430:	021b      	lsls	r3, r3, #8
 8009432:	18c9      	adds	r1, r1, r3
 8009434:	b289      	uxth	r1, r1
 8009436:	20eb      	movs	r0, #235	; 0xeb
 8009438:	f002 f866 	bl	800b508 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	4bb0      	ldr	r3, [pc, #704]	; (8009704 <PxMessagingTask+0x103c>)
 8009442:	4ab1      	ldr	r2, [pc, #708]	; (8009708 <PxMessagingTask+0x1040>)
 8009444:	60da      	str	r2, [r3, #12]
 8009446:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800944a:	46c0      	nop			; (mov r8, r8)
 800944c:	e7fd      	b.n	800944a <PxMessagingTask+0xd82>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800944e:	9b07      	ldr	r3, [sp, #28]
 8009450:	7b29      	ldrb	r1, [r5, #12]
 8009452:	5ce3      	ldrb	r3, [r4, r3]
 8009454:	20ea      	movs	r0, #234	; 0xea
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	18c9      	adds	r1, r1, r3
 800945a:	b289      	uxth	r1, r1
 800945c:	f002 f854 	bl	800b508 <EE_WriteVariable>
 8009460:	e7ec      	b.n	800943c <PxMessagingTask+0xd74>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	49a9      	ldr	r1, [pc, #676]	; (800970c <PxMessagingTask+0x1044>)
 8009466:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	0a12      	lsrs	r2, r2, #8
 800946c:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	0c12      	lsrs	r2, r2, #16
 8009472:	708a      	strb	r2, [r1, #2]
										SendMessageToModule(src,
 8009474:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	0e1b      	lsrs	r3, r3, #24
 800947a:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 800947c:	211f      	movs	r1, #31
 800947e:	e442      	b.n	8008d06 <PxMessagingTask+0x63e>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009480:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009482:	f009 fc54 	bl	8012d2e <memcpy>
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8009486:	2116      	movs	r1, #22
 8009488:	0030      	movs	r0, r6
 800948a:	f7f6 fe61 	bl	8000150 <__udivsi3>
 800948e:	4ba0      	ldr	r3, [pc, #640]	; (8009710 <PxMessagingTask+0x1048>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8009490:	0032      	movs	r2, r6
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8009492:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8009494:	499f      	ldr	r1, [pc, #636]	; (8009714 <PxMessagingTask+0x104c>)
 8009496:	48a0      	ldr	r0, [pc, #640]	; (8009718 <PxMessagingTask+0x1050>)
 8009498:	f009 fc49 	bl	8012d2e <memcpy>
								longMessageLastPtr =0;
 800949c:	4b9f      	ldr	r3, [pc, #636]	; (800971c <PxMessagingTask+0x1054>)
 800949e:	2600      	movs	r6, #0
 80094a0:	801d      	strh	r5, [r3, #0]
 80094a2:	f7ff f9c9 	bl	8008838 <PxMessagingTask+0x170>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 80094a6:	7a28      	ldrb	r0, [r5, #8]
 80094a8:	0032      	movs	r2, r6
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	0039      	movs	r1, r7
 80094ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094b0:	f7fe fae4 	bl	8007a7c <SetupDMAStreams>
 80094b4:	464b      	mov	r3, r9
 80094b6:	5d1f      	ldrb	r7, [r3, r4]
 80094b8:	2300      	movs	r3, #0
 80094ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80094bc:	001e      	movs	r6, r3
 80094be:	f7ff f9bb 	bl	8008838 <PxMessagingTask+0x170>
								for(p =1; p <= NumOfPorts; p++){
 80094c2:	2501      	movs	r5, #1
									UpdateBaudrate(p,temp32);
 80094c4:	0028      	movs	r0, r5
								for(p =1; p <= NumOfPorts; p++){
 80094c6:	3501      	adds	r5, #1
									UpdateBaudrate(p,temp32);
 80094c8:	0039      	movs	r1, r7
								for(p =1; p <= NumOfPorts; p++){
 80094ca:	b2ed      	uxtb	r5, r5
									UpdateBaudrate(p,temp32);
 80094cc:	f004 f820 	bl	800d510 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 80094d0:	2d06      	cmp	r5, #6
 80094d2:	d1f7      	bne.n	80094c4 <PxMessagingTask+0xdfc>
 80094d4:	e7ee      	b.n	80094b4 <PxMessagingTask+0xdec>
								temp =cMessage[port - 1][13 + shift];
 80094d6:	9a05      	ldr	r2, [sp, #20]
 80094d8:	1952      	adds	r2, r2, r5
 80094da:	7b51      	ldrb	r1, [r2, #13]
 80094dc:	e4e9      	b.n	8008eb2 <PxMessagingTask+0x7ea>
								temp =cMessage[port - 1][15 + shift];
 80094de:	9a05      	ldr	r2, [sp, #20]
 80094e0:	1952      	adds	r2, r2, r5
 80094e2:	7bd1      	ldrb	r1, [r2, #15]
 80094e4:	e4e5      	b.n	8008eb2 <PxMessagingTask+0x7ea>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80094e6:	881a      	ldrh	r2, [r3, #0]
 80094e8:	4988      	ldr	r1, [pc, #544]	; (800970c <PxMessagingTask+0x1044>)
 80094ea:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80094ec:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 80094ee:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80094f0:	b21b      	sxth	r3, r3
 80094f2:	121b      	asrs	r3, r3, #8
 80094f4:	704b      	strb	r3, [r1, #1]
 80094f6:	e7c1      	b.n	800947c <PxMessagingTask+0xdb4>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80094f8:	881a      	ldrh	r2, [r3, #0]
 80094fa:	4984      	ldr	r1, [pc, #528]	; (800970c <PxMessagingTask+0x1044>)
 80094fc:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80094fe:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 8009500:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009502:	0a1b      	lsrs	r3, r3, #8
 8009504:	704b      	strb	r3, [r1, #1]
 8009506:	e7b9      	b.n	800947c <PxMessagingTask+0xdb4>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 8009508:	781a      	ldrb	r2, [r3, #0]
 800950a:	4980      	ldr	r1, [pc, #512]	; (800970c <PxMessagingTask+0x1044>)
 800950c:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800950e:	785a      	ldrb	r2, [r3, #1]
 8009510:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 8009512:	789a      	ldrb	r2, [r3, #2]
 8009514:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 8009516:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 8009518:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800951a:	70cb      	strb	r3, [r1, #3]
 800951c:	e7ae      	b.n	800947c <PxMessagingTask+0xdb4>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800951e:	2b02      	cmp	r3, #2
 8009520:	d100      	bne.n	8009524 <PxMessagingTask+0xe5c>
 8009522:	e0be      	b.n	80096a2 <PxMessagingTask+0xfda>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 8009524:	d801      	bhi.n	800952a <PxMessagingTask+0xe62>
 8009526:	f7ff f984 	bl	8008832 <PxMessagingTask+0x16a>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800952a:	260f      	movs	r6, #15
 800952c:	3b04      	subs	r3, #4
 800952e:	4a7c      	ldr	r2, [pc, #496]	; (8009720 <PxMessagingTask+0x1058>)
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	58d2      	ldr	r2, [r2, r3]
 8009534:	4b75      	ldr	r3, [pc, #468]	; (800970c <PxMessagingTask+0x1044>)
 8009536:	4016      	ands	r6, r2
 8009538:	701e      	strb	r6, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800953a:	d100      	bne.n	800953e <PxMessagingTask+0xe76>
 800953c:	e0a8      	b.n	8009690 <PxMessagingTask+0xfc8>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800953e:	2380      	movs	r3, #128	; 0x80
									switch(messageParams[0]) // requested format
 8009540:	3e01      	subs	r6, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 8009542:	0c12      	lsrs	r2, r2, #16
 8009544:	059b      	lsls	r3, r3, #22
									switch(messageParams[0]) // requested format
 8009546:	b2f6      	uxtb	r6, r6
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 8009548:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 800954a:	2e07      	cmp	r6, #7
 800954c:	d901      	bls.n	8009552 <PxMessagingTask+0xe8a>
 800954e:	f7ff f970 	bl	8008832 <PxMessagingTask+0x16a>
 8009552:	4974      	ldr	r1, [pc, #464]	; (8009724 <PxMessagingTask+0x105c>)
 8009554:	00b6      	lsls	r6, r6, #2
 8009556:	5989      	ldr	r1, [r1, r6]
 8009558:	468f      	mov	pc, r1
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800955a:	2b00      	cmp	r3, #0
 800955c:	d031      	beq.n	80095c2 <PxMessagingTask+0xefa>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800955e:	9b05      	ldr	r3, [sp, #20]
 8009560:	195a      	adds	r2, r3, r5
 8009562:	78d3      	ldrb	r3, [r2, #3]
 8009564:	7891      	ldrb	r1, [r2, #2]
 8009566:	021b      	lsls	r3, r3, #8
 8009568:	185b      	adds	r3, r3, r1
 800956a:	7911      	ldrb	r1, [r2, #4]
 800956c:	0409      	lsls	r1, r1, #16
 800956e:	7952      	ldrb	r2, [r2, #5]
 8009570:	185b      	adds	r3, r3, r1
 8009572:	0612      	lsls	r2, r2, #24
 8009574:	189b      	adds	r3, r3, r2
 8009576:	6003      	str	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009578:	9905      	ldr	r1, [sp, #20]
 800957a:	9807      	ldr	r0, [sp, #28]
 800957c:	5d4b      	ldrb	r3, [r1, r5]
 800957e:	5c09      	ldrb	r1, [r1, r0]
 8009580:	200f      	movs	r0, #15
 8009582:	3b01      	subs	r3, #1
 8009584:	4a66      	ldr	r2, [pc, #408]	; (8009720 <PxMessagingTask+0x1058>)
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	58d2      	ldr	r2, [r2, r3]
 800958a:	4010      	ands	r0, r2
 800958c:	4288      	cmp	r0, r1
 800958e:	d008      	beq.n	80095a2 <PxMessagingTask+0xeda>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 8009590:	4865      	ldr	r0, [pc, #404]	; (8009728 <PxMessagingTask+0x1060>)
 8009592:	4684      	mov	ip, r0
 8009594:	4461      	add	r1, ip
 8009596:	400a      	ands	r2, r1
 8009598:	4961      	ldr	r1, [pc, #388]	; (8009720 <PxMessagingTask+0x1058>)
 800959a:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800959c:	2314      	movs	r3, #20
 800959e:	4a63      	ldr	r2, [pc, #396]	; (800972c <PxMessagingTask+0x1064>)
 80095a0:	7013      	strb	r3, [r2, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 80095a2:	2240      	movs	r2, #64	; 0x40
 80095a4:	4b62      	ldr	r3, [pc, #392]	; (8009730 <PxMessagingTask+0x1068>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	4393      	bics	r3, r2
 80095aa:	2b20      	cmp	r3, #32
 80095ac:	d001      	beq.n	80095b2 <PxMessagingTask+0xeea>
 80095ae:	f7ff f940 	bl	8008832 <PxMessagingTask+0x16a>
								messageParams[0] =responseStatus;
 80095b2:	4b5e      	ldr	r3, [pc, #376]	; (800972c <PxMessagingTask+0x1064>)
 80095b4:	4a55      	ldr	r2, [pc, #340]	; (800970c <PxMessagingTask+0x1044>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 80095b8:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 80095ba:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 80095bc:	2201      	movs	r2, #1
 80095be:	f7ff fba2 	bl	8008d06 <PxMessagingTask+0x63e>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 80095c2:	2004      	movs	r0, #4
 80095c4:	f009 f966 	bl	8012894 <malloc>
												if(temp32 != 0){
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d00f      	beq.n	80095ec <PxMessagingTask+0xf24>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80095cc:	0403      	lsls	r3, r0, #16
 80095ce:	4a54      	ldr	r2, [pc, #336]	; (8009720 <PxMessagingTask+0x1058>)
 80095d0:	3306      	adds	r3, #6
 80095d2:	5193      	str	r3, [r2, r6]
 80095d4:	e7c3      	b.n	800955e <PxMessagingTask+0xe96>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00c      	beq.n	80095f4 <PxMessagingTask+0xf2c>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 80095da:	9b05      	ldr	r3, [sp, #20]
 80095dc:	195a      	adds	r2, r3, r5
 80095de:	78d3      	ldrb	r3, [r2, #3]
 80095e0:	7911      	ldrb	r1, [r2, #4]
 80095e2:	021b      	lsls	r3, r3, #8
 80095e4:	0409      	lsls	r1, r1, #16
 80095e6:	185b      	adds	r3, r3, r1
 80095e8:	7891      	ldrb	r1, [r2, #2]
 80095ea:	e7c0      	b.n	800956e <PxMessagingTask+0xea6>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 80095ec:	2312      	movs	r3, #18
 80095ee:	4a4f      	ldr	r2, [pc, #316]	; (800972c <PxMessagingTask+0x1064>)
 80095f0:	7013      	strb	r3, [r2, #0]
 80095f2:	e7c1      	b.n	8009578 <PxMessagingTask+0xeb0>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 80095f4:	2004      	movs	r0, #4
 80095f6:	f009 f94d 	bl	8012894 <malloc>
												if(temp32 != 0){
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d0f6      	beq.n	80095ec <PxMessagingTask+0xf24>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80095fe:	0403      	lsls	r3, r0, #16
 8009600:	4a47      	ldr	r2, [pc, #284]	; (8009720 <PxMessagingTask+0x1058>)
 8009602:	3305      	adds	r3, #5
 8009604:	5193      	str	r3, [r2, r6]
 8009606:	e7e8      	b.n	80095da <PxMessagingTask+0xf12>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	4940      	ldr	r1, [pc, #256]	; (800970c <PxMessagingTask+0x1044>)
 800960c:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	0a12      	lsrs	r2, r2, #8
 8009612:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	0c12      	lsrs	r2, r2, #16
 8009618:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800961a:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 800961c:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800961e:	0e1b      	lsrs	r3, r3, #24
 8009620:	710b      	strb	r3, [r1, #4]
 8009622:	e72b      	b.n	800947c <PxMessagingTask+0xdb4>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009624:	881a      	ldrh	r2, [r3, #0]
 8009626:	4939      	ldr	r1, [pc, #228]	; (800970c <PxMessagingTask+0x1044>)
 8009628:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800962a:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 800962c:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800962e:	b21b      	sxth	r3, r3
 8009630:	121b      	asrs	r3, r3, #8
 8009632:	708b      	strb	r3, [r1, #2]
 8009634:	e722      	b.n	800947c <PxMessagingTask+0xdb4>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8009636:	881a      	ldrh	r2, [r3, #0]
 8009638:	4934      	ldr	r1, [pc, #208]	; (800970c <PxMessagingTask+0x1044>)
 800963a:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800963c:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 800963e:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009640:	0a1b      	lsrs	r3, r3, #8
 8009642:	708b      	strb	r3, [r1, #2]
 8009644:	e71a      	b.n	800947c <PxMessagingTask+0xdb4>
											messageParams[1] =*(__IO int8_t* )temp32;
 8009646:	4a31      	ldr	r2, [pc, #196]	; (800970c <PxMessagingTask+0x1044>)
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 800964c:	2202      	movs	r2, #2
 800964e:	e715      	b.n	800947c <PxMessagingTask+0xdb4>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	492e      	ldr	r1, [pc, #184]	; (800970c <PxMessagingTask+0x1044>)
 8009654:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	1212      	asrs	r2, r2, #8
 800965a:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	1412      	asrs	r2, r2, #16
 8009660:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009662:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 8009664:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009666:	161b      	asrs	r3, r3, #24
 8009668:	710b      	strb	r3, [r1, #4]
 800966a:	e707      	b.n	800947c <PxMessagingTask+0xdb4>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	4927      	ldr	r1, [pc, #156]	; (800970c <PxMessagingTask+0x1044>)
 8009670:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009672:	4b30      	ldr	r3, [pc, #192]	; (8009734 <PxMessagingTask+0x106c>)
 8009674:	18d3      	adds	r3, r2, r3
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800967a:	4b2f      	ldr	r3, [pc, #188]	; (8009738 <PxMessagingTask+0x1070>)
 800967c:	18d3      	adds	r3, r2, r3
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009682:	4b2e      	ldr	r3, [pc, #184]	; (800973c <PxMessagingTask+0x1074>)
 8009684:	469c      	mov	ip, r3
 8009686:	4462      	add	r2, ip
 8009688:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 800968a:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800968c:	710b      	strb	r3, [r1, #4]
 800968e:	e6f5      	b.n	800947c <PxMessagingTask+0xdb4>
									SendMessageToModule(src,
 8009690:	2201      	movs	r2, #1
 8009692:	211f      	movs	r1, #31
 8009694:	4650      	mov	r0, sl
 8009696:	f7fe fd41 	bl	800811c <SendMessageToModule>
 800969a:	464b      	mov	r3, r9
 800969c:	5d1f      	ldrb	r7, [r3, r4]
 800969e:	f7ff f8cb 	bl	8008838 <PxMessagingTask+0x170>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 80096a2:	9b05      	ldr	r3, [sp, #20]
 80096a4:	2600      	movs	r6, #0
 80096a6:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 80096a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 80096aa:	4467      	add	r7, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 80096ac:	469c      	mov	ip, r3
 80096ae:	1c68      	adds	r0, r5, #1
 80096b0:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 80096b2:	3f01      	subs	r7, #1
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 80096b4:	4458      	add	r0, fp
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 80096b6:	703e      	strb	r6, [r7, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 80096b8:	f7fa f814 	bl	80036e4 <IsModuleParameter>
 80096bc:	900b      	str	r0, [sp, #44]	; 0x2c
								if(temp == 0){ // Parameter does not exist
 80096be:	42b0      	cmp	r0, r6
 80096c0:	d100      	bne.n	80096c4 <PxMessagingTask+0xffc>
 80096c2:	e0a4      	b.n	800980e <PxMessagingTask+0x1146>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 80096c4:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 80096c6:	491e      	ldr	r1, [pc, #120]	; (8009740 <PxMessagingTask+0x1078>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 80096c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
									messageParams[0] =modParam[temp - 1].paramFormat;
 80096ca:	468c      	mov	ip, r1
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 80096cc:	3b01      	subs	r3, #1
 80096ce:	435a      	muls	r2, r3
 80096d0:	4b1b      	ldr	r3, [pc, #108]	; (8009740 <PxMessagingTask+0x1078>)
									messageParams[0] =modParam[temp - 1].paramFormat;
 80096d2:	490e      	ldr	r1, [pc, #56]	; (800970c <PxMessagingTask+0x1044>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 80096d4:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 80096d6:	4462      	add	r2, ip
 80096d8:	7912      	ldrb	r2, [r2, #4]
 80096da:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 80096dc:	3a01      	subs	r2, #1
 80096de:	b2d2      	uxtb	r2, r2
 80096e0:	2a07      	cmp	r2, #7
 80096e2:	d900      	bls.n	80096e6 <PxMessagingTask+0x101e>
 80096e4:	e4f3      	b.n	80090ce <PxMessagingTask+0xa06>
 80096e6:	4917      	ldr	r1, [pc, #92]	; (8009744 <PxMessagingTask+0x107c>)
 80096e8:	0092      	lsls	r2, r2, #2
 80096ea:	588a      	ldr	r2, [r1, r2]
 80096ec:	4697      	mov	pc, r2
 80096ee:	46c0      	nop			; (mov r8, r8)
 80096f0:	20000dd4 	.word	0x20000dd4
 80096f4:	20001820 	.word	0x20001820
 80096f8:	0801938c 	.word	0x0801938c
 80096fc:	2000003a 	.word	0x2000003a
 8009700:	080179e8 	.word	0x080179e8
 8009704:	e000ed00 	.word	0xe000ed00
 8009708:	05fa0004 	.word	0x05fa0004
 800970c:	20000b4c 	.word	0x20000b4c
 8009710:	20000010 	.word	0x20000010
 8009714:	200018f8 	.word	0x200018f8
 8009718:	20000ee4 	.word	0x20000ee4
 800971c:	20000c5a 	.word	0x20000c5a
 8009720:	20006d3c 	.word	0x20006d3c
 8009724:	08017a0c 	.word	0x08017a0c
 8009728:	0000fff0 	.word	0x0000fff0
 800972c:	20000c4c 	.word	0x20000c4c
 8009730:	20006d34 	.word	0x20006d34
 8009734:	20000001 	.word	0x20000001
 8009738:	20000002 	.word	0x20000002
 800973c:	20000003 	.word	0x20000003
 8009740:	200000a4 	.word	0x200000a4
 8009744:	08017a2c 	.word	0x08017a2c
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009748:	2b00      	cmp	r3, #0
 800974a:	d100      	bne.n	800974e <PxMessagingTask+0x1086>
 800974c:	e0ce      	b.n	80098ec <PxMessagingTask+0x1224>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800974e:	9b05      	ldr	r3, [sp, #20]
 8009750:	1959      	adds	r1, r3, r5
 8009752:	78ca      	ldrb	r2, [r1, #3]
 8009754:	788b      	ldrb	r3, [r1, #2]
 8009756:	0212      	lsls	r2, r2, #8
 8009758:	189b      	adds	r3, r3, r2
 800975a:	b21b      	sxth	r3, r3
 800975c:	8003      	strh	r3, [r0, #0]
 800975e:	e70b      	b.n	8009578 <PxMessagingTask+0xeb0>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	49d7      	ldr	r1, [pc, #860]	; (8009ac0 <PxMessagingTask+0x13f8>)
 8009764:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	1212      	asrs	r2, r2, #8
 800976a:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	1412      	asrs	r2, r2, #16
 8009770:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009772:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 8009774:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009776:	161b      	asrs	r3, r3, #24
 8009778:	70cb      	strb	r3, [r1, #3]
 800977a:	e67f      	b.n	800947c <PxMessagingTask+0xdb4>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800977c:	2b00      	cmp	r3, #0
 800977e:	d100      	bne.n	8009782 <PxMessagingTask+0x10ba>
 8009780:	e0df      	b.n	8009942 <PxMessagingTask+0x127a>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009782:	9b05      	ldr	r3, [sp, #20]
 8009784:	195a      	adds	r2, r3, r5
 8009786:	78d3      	ldrb	r3, [r2, #3]
 8009788:	7911      	ldrb	r1, [r2, #4]
 800978a:	021b      	lsls	r3, r3, #8
 800978c:	0409      	lsls	r1, r1, #16
 800978e:	185b      	adds	r3, r3, r1
 8009790:	7891      	ldrb	r1, [r2, #2]
 8009792:	7952      	ldrb	r2, [r2, #5]
 8009794:	185b      	adds	r3, r3, r1
 8009796:	0612      	lsls	r2, r2, #24
 8009798:	189b      	adds	r3, r3, r2
 800979a:	4642      	mov	r2, r8
 800979c:	4641      	mov	r1, r8
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	2200      	movs	r2, #0
 80097a2:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 80097a4:	6003      	str	r3, [r0, #0]
 80097a6:	e6e7      	b.n	8009578 <PxMessagingTask+0xeb0>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 80097a8:	9b05      	ldr	r3, [sp, #20]
 80097aa:	4642      	mov	r2, r8
 80097ac:	469c      	mov	ip, r3
 80097ae:	2301      	movs	r3, #1
 80097b0:	4465      	add	r5, ip
 80097b2:	56eb      	ldrsb	r3, [r5, r3]
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	17db      	asrs	r3, r3, #31
 80097b8:	6053      	str	r3, [r2, #4]
										break;
 80097ba:	f7ff f931 	bl	8008a20 <PxMessagingTask+0x358>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00f      	beq.n	80097e2 <PxMessagingTask+0x111a>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 80097c2:	9b05      	ldr	r3, [sp, #20]
 80097c4:	1959      	adds	r1, r3, r5
 80097c6:	78ca      	ldrb	r2, [r1, #3]
 80097c8:	788b      	ldrb	r3, [r1, #2]
 80097ca:	0212      	lsls	r2, r2, #8
 80097cc:	189b      	adds	r3, r3, r2
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	8003      	strh	r3, [r0, #0]
 80097d2:	e6d1      	b.n	8009578 <PxMessagingTask+0xeb0>
											messageParams[1] =*(__IO uint8_t* )temp32;
 80097d4:	4aba      	ldr	r2, [pc, #744]	; (8009ac0 <PxMessagingTask+0x13f8>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
											SendMessageToModule(src,
 80097d8:	211f      	movs	r1, #31
											messageParams[1] =*(__IO uint8_t* )temp32;
 80097da:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 80097dc:	2202      	movs	r2, #2
 80097de:	f7ff fa92 	bl	8008d06 <PxMessagingTask+0x63e>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 80097e2:	2002      	movs	r0, #2
 80097e4:	f009 f856 	bl	8012894 <malloc>
												if(temp32 != 0){
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d100      	bne.n	80097ee <PxMessagingTask+0x1126>
 80097ec:	e6fe      	b.n	80095ec <PxMessagingTask+0xf24>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80097ee:	0403      	lsls	r3, r0, #16
 80097f0:	4ab4      	ldr	r2, [pc, #720]	; (8009ac4 <PxMessagingTask+0x13fc>)
 80097f2:	3303      	adds	r3, #3
 80097f4:	5193      	str	r3, [r2, r6]
 80097f6:	e7e4      	b.n	80097c2 <PxMessagingTask+0x10fa>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 80097f8:	781a      	ldrb	r2, [r3, #0]
 80097fa:	49b1      	ldr	r1, [pc, #708]	; (8009ac0 <PxMessagingTask+0x13f8>)
 80097fc:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 80097fe:	785a      	ldrb	r2, [r3, #1]
 8009800:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009802:	789a      	ldrb	r2, [r3, #2]
 8009804:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009806:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 8009808:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800980a:	710b      	strb	r3, [r1, #4]
 800980c:	e636      	b.n	800947c <PxMessagingTask+0xdb4>
									SendMessageToModule(src,
 800980e:	2201      	movs	r2, #1
 8009810:	211f      	movs	r1, #31
 8009812:	4650      	mov	r0, sl
 8009814:	f7fe fc82 	bl	800811c <SendMessageToModule>
 8009818:	464b      	mov	r3, r9
 800981a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800981c:	5d1f      	ldrb	r7, [r3, r4]
 800981e:	f7ff f80b 	bl	8008838 <PxMessagingTask+0x170>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00c      	beq.n	8009840 <PxMessagingTask+0x1178>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 8009826:	9b05      	ldr	r3, [sp, #20]
 8009828:	195b      	adds	r3, r3, r5
 800982a:	789b      	ldrb	r3, [r3, #2]
 800982c:	b25b      	sxtb	r3, r3
 800982e:	7003      	strb	r3, [r0, #0]
 8009830:	e6a2      	b.n	8009578 <PxMessagingTask+0xeb0>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00f      	beq.n	8009856 <PxMessagingTask+0x118e>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 8009836:	9b05      	ldr	r3, [sp, #20]
 8009838:	195b      	adds	r3, r3, r5
 800983a:	789b      	ldrb	r3, [r3, #2]
 800983c:	7003      	strb	r3, [r0, #0]
 800983e:	e69b      	b.n	8009578 <PxMessagingTask+0xeb0>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 8009840:	2001      	movs	r0, #1
 8009842:	f009 f827 	bl	8012894 <malloc>
												if(temp32 != 0){
 8009846:	2800      	cmp	r0, #0
 8009848:	d100      	bne.n	800984c <PxMessagingTask+0x1184>
 800984a:	e6cf      	b.n	80095ec <PxMessagingTask+0xf24>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800984c:	0403      	lsls	r3, r0, #16
 800984e:	4a9d      	ldr	r2, [pc, #628]	; (8009ac4 <PxMessagingTask+0x13fc>)
 8009850:	3302      	adds	r3, #2
 8009852:	5193      	str	r3, [r2, r6]
 8009854:	e7e7      	b.n	8009826 <PxMessagingTask+0x115e>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 8009856:	2001      	movs	r0, #1
 8009858:	f009 f81c 	bl	8012894 <malloc>
												if(temp32 != 0){
 800985c:	2800      	cmp	r0, #0
 800985e:	d100      	bne.n	8009862 <PxMessagingTask+0x119a>
 8009860:	e6c4      	b.n	80095ec <PxMessagingTask+0xf24>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009862:	0403      	lsls	r3, r0, #16
 8009864:	19df      	adds	r7, r3, r7
 8009866:	4b97      	ldr	r3, [pc, #604]	; (8009ac4 <PxMessagingTask+0x13fc>)
 8009868:	519f      	str	r7, [r3, r6]
 800986a:	e7e4      	b.n	8009836 <PxMessagingTask+0x116e>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800986c:	2313      	movs	r3, #19
 800986e:	4a96      	ldr	r2, [pc, #600]	; (8009ac8 <PxMessagingTask+0x1400>)
 8009870:	7013      	strb	r3, [r2, #0]
 8009872:	e696      	b.n	80095a2 <PxMessagingTask+0xeda>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8009874:	9b05      	ldr	r3, [sp, #20]
 8009876:	195b      	adds	r3, r3, r5
 8009878:	789e      	ldrb	r6, [r3, #2]
 800987a:	78da      	ldrb	r2, [r3, #3]
 800987c:	0636      	lsls	r6, r6, #24
 800987e:	0412      	lsls	r2, r2, #16
 8009880:	18b6      	adds	r6, r6, r2
 8009882:	795a      	ldrb	r2, [r3, #5]
 8009884:	18b6      	adds	r6, r6, r2
 8009886:	791a      	ldrb	r2, [r3, #4]
 8009888:	0212      	lsls	r2, r2, #8
 800988a:	18b6      	adds	r6, r6, r2
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800988c:	22e0      	movs	r2, #224	; 0xe0
 800988e:	0612      	lsls	r2, r2, #24
 8009890:	18b1      	adds	r1, r6, r2
 8009892:	4a8e      	ldr	r2, [pc, #568]	; (8009acc <PxMessagingTask+0x1404>)
 8009894:	4291      	cmp	r1, r2
 8009896:	d900      	bls.n	800989a <PxMessagingTask+0x11d2>
 8009898:	e0ac      	b.n	80099f4 <PxMessagingTask+0x132c>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800989a:	785b      	ldrb	r3, [r3, #1]
 800989c:	3b01      	subs	r3, #1
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b07      	cmp	r3, #7
 80098a2:	d900      	bls.n	80098a6 <PxMessagingTask+0x11de>
 80098a4:	e67d      	b.n	80095a2 <PxMessagingTask+0xeda>
 80098a6:	4a8a      	ldr	r2, [pc, #552]	; (8009ad0 <PxMessagingTask+0x1408>)
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	58d3      	ldr	r3, [r2, r3]
 80098ac:	469f      	mov	pc, r3
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 80098ae:	9b05      	ldr	r3, [sp, #20]
 80098b0:	469c      	mov	ip, r3
 80098b2:	4465      	add	r5, ip
 80098b4:	78ab      	ldrb	r3, [r5, #2]
 80098b6:	786a      	ldrb	r2, [r5, #1]
 80098b8:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 80098ba:	189b      	adds	r3, r3, r2
 80098bc:	4642      	mov	r2, r8
 80098be:	6013      	str	r3, [r2, #0]
 80098c0:	17db      	asrs	r3, r3, #31
 80098c2:	6053      	str	r3, [r2, #4]
										break;
 80098c4:	f7ff f8ac 	bl	8008a20 <PxMessagingTask+0x358>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 80098c8:	9b05      	ldr	r3, [sp, #20]
 80098ca:	469c      	mov	ip, r3
 80098cc:	4465      	add	r5, ip
 80098ce:	78ab      	ldrb	r3, [r5, #2]
 80098d0:	786a      	ldrb	r2, [r5, #1]
 80098d2:	021b      	lsls	r3, r3, #8
 80098d4:	189b      	adds	r3, r3, r2
 80098d6:	78ea      	ldrb	r2, [r5, #3]
 80098d8:	0412      	lsls	r2, r2, #16
 80098da:	189b      	adds	r3, r3, r2
 80098dc:	792a      	ldrb	r2, [r5, #4]
 80098de:	0612      	lsls	r2, r2, #24
 80098e0:	e7eb      	b.n	80098ba <PxMessagingTask+0x11f2>
										messageParams[0] =*(__IO uint8_t* )temp32;
 80098e2:	4a77      	ldr	r2, [pc, #476]	; (8009ac0 <PxMessagingTask+0x13f8>)
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	7013      	strb	r3, [r2, #0]
										SendMessageToModule(src,
 80098e8:	2201      	movs	r2, #1
 80098ea:	e5c7      	b.n	800947c <PxMessagingTask+0xdb4>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 80098ec:	2002      	movs	r0, #2
 80098ee:	f008 ffd1 	bl	8012894 <malloc>
												if(temp32 != 0){
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d100      	bne.n	80098f8 <PxMessagingTask+0x1230>
 80098f6:	e679      	b.n	80095ec <PxMessagingTask+0xf24>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80098f8:	0403      	lsls	r3, r0, #16
 80098fa:	4a72      	ldr	r2, [pc, #456]	; (8009ac4 <PxMessagingTask+0x13fc>)
 80098fc:	3304      	adds	r3, #4
 80098fe:	5193      	str	r3, [r2, r6]
 8009900:	e725      	b.n	800974e <PxMessagingTask+0x1086>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009902:	2310      	movs	r3, #16
 8009904:	f7ff f851 	bl	80089aa <PxMessagingTask+0x2e2>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009908:	9b05      	ldr	r3, [sp, #20]
 800990a:	469c      	mov	ip, r3
 800990c:	4465      	add	r5, ip
 800990e:	78ab      	ldrb	r3, [r5, #2]
 8009910:	78ea      	ldrb	r2, [r5, #3]
 8009912:	021b      	lsls	r3, r3, #8
 8009914:	0412      	lsls	r2, r2, #16
 8009916:	189b      	adds	r3, r3, r2
 8009918:	786a      	ldrb	r2, [r5, #1]
 800991a:	189b      	adds	r3, r3, r2
 800991c:	792a      	ldrb	r2, [r5, #4]
 800991e:	0612      	lsls	r2, r2, #24
 8009920:	189b      	adds	r3, r3, r2
 8009922:	4642      	mov	r2, r8
 8009924:	6013      	str	r3, [r2, #0]
 8009926:	2300      	movs	r3, #0
 8009928:	6053      	str	r3, [r2, #4]
										break;
 800992a:	f7ff f879 	bl	8008a20 <PxMessagingTask+0x358>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800992e:	9b05      	ldr	r3, [sp, #20]
 8009930:	4642      	mov	r2, r8
 8009932:	469c      	mov	ip, r3
 8009934:	4465      	add	r5, ip
 8009936:	786b      	ldrb	r3, [r5, #1]
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	2300      	movs	r3, #0
 800993c:	6053      	str	r3, [r2, #4]
										break;
 800993e:	f7ff f86f 	bl	8008a20 <PxMessagingTask+0x358>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 8009942:	2004      	movs	r0, #4
 8009944:	f008 ffa6 	bl	8012894 <malloc>
												if(temp32 != 0){
 8009948:	2800      	cmp	r0, #0
 800994a:	d100      	bne.n	800994e <PxMessagingTask+0x1286>
 800994c:	e64e      	b.n	80095ec <PxMessagingTask+0xf24>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800994e:	0403      	lsls	r3, r0, #16
 8009950:	4a5c      	ldr	r2, [pc, #368]	; (8009ac4 <PxMessagingTask+0x13fc>)
 8009952:	3307      	adds	r3, #7
 8009954:	5193      	str	r3, [r2, r6]
 8009956:	e714      	b.n	8009782 <PxMessagingTask+0x10ba>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 8009958:	9b05      	ldr	r3, [sp, #20]
 800995a:	469c      	mov	ip, r3
 800995c:	4465      	add	r5, ip
 800995e:	79eb      	ldrb	r3, [r5, #7]
 8009960:	79aa      	ldrb	r2, [r5, #6]
 8009962:	021b      	lsls	r3, r3, #8
 8009964:	189b      	adds	r3, r3, r2
 8009966:	7a2a      	ldrb	r2, [r5, #8]
 8009968:	0412      	lsls	r2, r2, #16
 800996a:	189b      	adds	r3, r3, r2
 800996c:	7a6a      	ldrb	r2, [r5, #9]
 800996e:	0612      	lsls	r2, r2, #24
 8009970:	189b      	adds	r3, r3, r2
 8009972:	6033      	str	r3, [r6, #0]
											break;
 8009974:	e615      	b.n	80095a2 <PxMessagingTask+0xeda>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009976:	9b05      	ldr	r3, [sp, #20]
 8009978:	469c      	mov	ip, r3
 800997a:	4465      	add	r5, ip
 800997c:	79eb      	ldrb	r3, [r5, #7]
 800997e:	7a2a      	ldrb	r2, [r5, #8]
 8009980:	021b      	lsls	r3, r3, #8
 8009982:	0412      	lsls	r2, r2, #16
 8009984:	189b      	adds	r3, r3, r2
 8009986:	79aa      	ldrb	r2, [r5, #6]
 8009988:	e7ef      	b.n	800996a <PxMessagingTask+0x12a2>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800998a:	9b05      	ldr	r3, [sp, #20]
 800998c:	469c      	mov	ip, r3
 800998e:	4465      	add	r5, ip
 8009990:	79ea      	ldrb	r2, [r5, #7]
 8009992:	79ab      	ldrb	r3, [r5, #6]
 8009994:	0212      	lsls	r2, r2, #8
 8009996:	189b      	adds	r3, r3, r2
 8009998:	b21b      	sxth	r3, r3
 800999a:	8033      	strh	r3, [r6, #0]
											break;
 800999c:	e601      	b.n	80095a2 <PxMessagingTask+0xeda>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800999e:	9b05      	ldr	r3, [sp, #20]
 80099a0:	469c      	mov	ip, r3
 80099a2:	4465      	add	r5, ip
 80099a4:	79ea      	ldrb	r2, [r5, #7]
 80099a6:	79ab      	ldrb	r3, [r5, #6]
 80099a8:	0212      	lsls	r2, r2, #8
 80099aa:	189b      	adds	r3, r3, r2
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	8033      	strh	r3, [r6, #0]
											break;
 80099b0:	e5f7      	b.n	80095a2 <PxMessagingTask+0xeda>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 80099b2:	9b05      	ldr	r3, [sp, #20]
 80099b4:	469c      	mov	ip, r3
 80099b6:	2306      	movs	r3, #6
 80099b8:	4465      	add	r5, ip
 80099ba:	56eb      	ldrsb	r3, [r5, r3]
 80099bc:	7033      	strb	r3, [r6, #0]
											break;
 80099be:	e5f0      	b.n	80095a2 <PxMessagingTask+0xeda>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 80099c0:	9b05      	ldr	r3, [sp, #20]
 80099c2:	469c      	mov	ip, r3
 80099c4:	4465      	add	r5, ip
 80099c6:	79ab      	ldrb	r3, [r5, #6]
 80099c8:	7033      	strb	r3, [r6, #0]
											break;
 80099ca:	e5ea      	b.n	80095a2 <PxMessagingTask+0xeda>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 80099cc:	9b05      	ldr	r3, [sp, #20]
 80099ce:	4641      	mov	r1, r8
 80099d0:	469c      	mov	ip, r3
 80099d2:	4465      	add	r5, ip
 80099d4:	79eb      	ldrb	r3, [r5, #7]
 80099d6:	7a2a      	ldrb	r2, [r5, #8]
 80099d8:	021b      	lsls	r3, r3, #8
 80099da:	0412      	lsls	r2, r2, #16
 80099dc:	189b      	adds	r3, r3, r2
 80099de:	79aa      	ldrb	r2, [r5, #6]
 80099e0:	189b      	adds	r3, r3, r2
 80099e2:	7a6a      	ldrb	r2, [r5, #9]
 80099e4:	0612      	lsls	r2, r2, #24
 80099e6:	189b      	adds	r3, r3, r2
 80099e8:	4642      	mov	r2, r8
 80099ea:	6013      	str	r3, [r2, #0]
 80099ec:	2200      	movs	r2, #0
 80099ee:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 80099f0:	6033      	str	r3, [r6, #0]
											break;
 80099f2:	e5d6      	b.n	80095a2 <PxMessagingTask+0xeda>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 80099f4:	23f8      	movs	r3, #248	; 0xf8
 80099f6:	4a37      	ldr	r2, [pc, #220]	; (8009ad4 <PxMessagingTask+0x140c>)
 80099f8:	061b      	lsls	r3, r3, #24
 80099fa:	18f3      	adds	r3, r6, r3
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d903      	bls.n	8009a08 <PxMessagingTask+0x1340>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 8009a00:	2215      	movs	r2, #21
 8009a02:	4b31      	ldr	r3, [pc, #196]	; (8009ac8 <PxMessagingTask+0x1400>)
 8009a04:	701a      	strb	r2, [r3, #0]
 8009a06:	e5cc      	b.n	80095a2 <PxMessagingTask+0xeda>
									HAL_FLASH_Unlock();
 8009a08:	f006 ff52 	bl	80108b0 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 8009a0c:	9b08      	ldr	r3, [sp, #32]
 8009a0e:	2b22      	cmp	r3, #34	; 0x22
 8009a10:	d102      	bne.n	8009a18 <PxMessagingTask+0x1350>
										EraseSector(temp32);
 8009a12:	0030      	movs	r0, r6
 8009a14:	f001 ffb6 	bl	800b984 <EraseSector>
									if(responseStatus == BOS_OK){
 8009a18:	4b2b      	ldr	r3, [pc, #172]	; (8009ac8 <PxMessagingTask+0x1400>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d110      	bne.n	8009a42 <PxMessagingTask+0x137a>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 8009a20:	9b05      	ldr	r3, [sp, #20]
 8009a22:	195b      	adds	r3, r3, r5
 8009a24:	785b      	ldrb	r3, [r3, #1]
 8009a26:	3b01      	subs	r3, #1
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2b07      	cmp	r3, #7
 8009a2c:	d809      	bhi.n	8009a42 <PxMessagingTask+0x137a>
 8009a2e:	4a2a      	ldr	r2, [pc, #168]	; (8009ad8 <PxMessagingTask+0x1410>)
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	58d3      	ldr	r3, [r2, r3]
 8009a34:	469f      	mov	pc, r3
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009a36:	6833      	ldr	r3, [r6, #0]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	d020      	beq.n	8009a7e <PxMessagingTask+0x13b6>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009a3c:	2216      	movs	r2, #22
 8009a3e:	4b22      	ldr	r3, [pc, #136]	; (8009ac8 <PxMessagingTask+0x1400>)
 8009a40:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 8009a42:	f006 ff47 	bl	80108d4 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 8009a46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d100      	bne.n	8009a4e <PxMessagingTask+0x1386>
 8009a4c:	e5a9      	b.n	80095a2 <PxMessagingTask+0xeda>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009a4e:	2216      	movs	r2, #22
 8009a50:	4b1d      	ldr	r3, [pc, #116]	; (8009ac8 <PxMessagingTask+0x1400>)
 8009a52:	701a      	strb	r2, [r3, #0]
 8009a54:	e5a5      	b.n	80095a2 <PxMessagingTask+0xeda>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009a56:	8832      	ldrh	r2, [r6, #0]
 8009a58:	4b20      	ldr	r3, [pc, #128]	; (8009adc <PxMessagingTask+0x1414>)
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d1ee      	bne.n	8009a3c <PxMessagingTask+0x1374>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009a5e:	9b05      	ldr	r3, [sp, #20]
 8009a60:	469c      	mov	ip, r3
 8009a62:	4465      	add	r5, ip
 8009a64:	79ea      	ldrb	r2, [r5, #7]
 8009a66:	79ab      	ldrb	r3, [r5, #6]
 8009a68:	0212      	lsls	r2, r2, #8
 8009a6a:	18d2      	adds	r2, r2, r3
 8009a6c:	17d3      	asrs	r3, r2, #31
 8009a6e:	4641      	mov	r1, r8
													status =HAL_FLASH_Program(
 8009a70:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009a72:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009a74:	0031      	movs	r1, r6
 8009a76:	f006 ff7b 	bl	8010970 <HAL_FLASH_Program>
 8009a7a:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009a7c:	e7e1      	b.n	8009a42 <PxMessagingTask+0x137a>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009a7e:	9b05      	ldr	r3, [sp, #20]
 8009a80:	4641      	mov	r1, r8
 8009a82:	469c      	mov	ip, r3
 8009a84:	4465      	add	r5, ip
 8009a86:	79ea      	ldrb	r2, [r5, #7]
 8009a88:	7a2b      	ldrb	r3, [r5, #8]
 8009a8a:	0212      	lsls	r2, r2, #8
 8009a8c:	041b      	lsls	r3, r3, #16
 8009a8e:	18d2      	adds	r2, r2, r3
 8009a90:	79ab      	ldrb	r3, [r5, #6]
													status =HAL_FLASH_Program(
 8009a92:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009a94:	18d2      	adds	r2, r2, r3
 8009a96:	7a6b      	ldrb	r3, [r5, #9]
 8009a98:	061b      	lsls	r3, r3, #24
 8009a9a:	18d2      	adds	r2, r2, r3
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009aa0:	0031      	movs	r1, r6
 8009aa2:	f006 ff65 	bl	8010970 <HAL_FLASH_Program>
 8009aa6:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009aa8:	e7cb      	b.n	8009a42 <PxMessagingTask+0x137a>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009aaa:	8832      	ldrh	r2, [r6, #0]
 8009aac:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <PxMessagingTask+0x1414>)
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d1c4      	bne.n	8009a3c <PxMessagingTask+0x1374>
													remoteBuffer =cMessage[port - 1][6 + shift];
 8009ab2:	9b05      	ldr	r3, [sp, #20]
 8009ab4:	469c      	mov	ip, r3
 8009ab6:	4465      	add	r5, ip
 8009ab8:	79aa      	ldrb	r2, [r5, #6]
 8009aba:	2300      	movs	r3, #0
 8009abc:	e7d7      	b.n	8009a6e <PxMessagingTask+0x13a6>
 8009abe:	46c0      	nop			; (mov r8, r8)
 8009ac0:	20000b4c 	.word	0x20000b4c
 8009ac4:	20006d3c 	.word	0x20006d3c
 8009ac8:	20000c4c 	.word	0x20000c4c
 8009acc:	00007fff 	.word	0x00007fff
 8009ad0:	08017a4c 	.word	0x08017a4c
 8009ad4:	0001ffff 	.word	0x0001ffff
 8009ad8:	08017a6c 	.word	0x08017a6c
 8009adc:	0000ffff 	.word	0x0000ffff
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009ae0:	6833      	ldr	r3, [r6, #0]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	d1aa      	bne.n	8009a3c <PxMessagingTask+0x1374>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009ae6:	9b05      	ldr	r3, [sp, #20]
 8009ae8:	4641      	mov	r1, r8
 8009aea:	469c      	mov	ip, r3
 8009aec:	4465      	add	r5, ip
 8009aee:	79ea      	ldrb	r2, [r5, #7]
 8009af0:	7a2b      	ldrb	r3, [r5, #8]
 8009af2:	0212      	lsls	r2, r2, #8
 8009af4:	041b      	lsls	r3, r3, #16
 8009af6:	18d2      	adds	r2, r2, r3
 8009af8:	79ab      	ldrb	r3, [r5, #6]
													status =HAL_FLASH_Program(
 8009afa:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009afc:	18d2      	adds	r2, r2, r3
 8009afe:	7a6b      	ldrb	r3, [r5, #9]
 8009b00:	061b      	lsls	r3, r3, #24
 8009b02:	18d2      	adds	r2, r2, r3
 8009b04:	2300      	movs	r3, #0
 8009b06:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009b08:	0031      	movs	r1, r6
 8009b0a:	f006 ff31 	bl	8010970 <HAL_FLASH_Program>
 8009b0e:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009b10:	e797      	b.n	8009a42 <PxMessagingTask+0x137a>
 8009b12:	46c0      	nop			; (mov r8, r8)

08009b14 <ledModeCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE ledModeCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8009b14:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 8009b16:	b530      	push	{r4, r5, lr}
 8009b18:	b083      	sub	sp, #12
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	/* Obtain the 1st parameter string. */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009b1a:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 8009b1c:	0005      	movs	r5, r0
 8009b1e:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009b20:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 8009b22:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009b24:	f003 ff48 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	1, /* Return the first parameter. */
	&xParameterStringLength1 /* Store the parameter string length. */
	);
	if (!strcmp((char*) pcParameterString1, "on")
 8009b28:	4918      	ldr	r1, [pc, #96]	; (8009b8c <ledModeCommand+0x78>)
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009b2a:	0004      	movs	r4, r0
	if (!strcmp((char*) pcParameterString1, "on")
 8009b2c:	f7f6 faea 	bl	8000104 <strcmp>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d005      	beq.n	8009b40 <ledModeCommand+0x2c>
			|| !strcmp((char*) pcParameterString1, "ON"))
 8009b34:	4916      	ldr	r1, [pc, #88]	; (8009b90 <ledModeCommand+0x7c>)
 8009b36:	0020      	movs	r0, r4
 8009b38:	f7f6 fae4 	bl	8000104 <strcmp>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d10a      	bne.n	8009b56 <ledModeCommand+0x42>
		SwitchindMode = 1;
 8009b40:	2201      	movs	r2, #1
 8009b42:	4b14      	ldr	r3, [pc, #80]	; (8009b94 <ledModeCommand+0x80>)
 8009b44:	701a      	strb	r2, [r3, #0]
			|| !strcmp((char*) pcParameterString1, "OFF"))
		SwitchindMode = 0;

	/* Respond to the command */
	if (SwitchindMode) {
		strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 8009b46:	222e      	movs	r2, #46	; 0x2e
 8009b48:	4913      	ldr	r1, [pc, #76]	; (8009b98 <ledModeCommand+0x84>)
 8009b4a:	0028      	movs	r0, r5
 8009b4c:	f009 f8ef 	bl	8012d2e <memcpy>
	}

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8009b50:	2000      	movs	r0, #0
 8009b52:	b003      	add	sp, #12
 8009b54:	bd30      	pop	{r4, r5, pc}
	else if (!strcmp((char*) pcParameterString1, "off")
 8009b56:	4911      	ldr	r1, [pc, #68]	; (8009b9c <ledModeCommand+0x88>)
 8009b58:	0020      	movs	r0, r4
 8009b5a:	f7f6 fad3 	bl	8000104 <strcmp>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d108      	bne.n	8009b74 <ledModeCommand+0x60>
		SwitchindMode = 0;
 8009b62:	2200      	movs	r2, #0
 8009b64:	4b0b      	ldr	r3, [pc, #44]	; (8009b94 <ledModeCommand+0x80>)
 8009b66:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 8009b68:	222f      	movs	r2, #47	; 0x2f
 8009b6a:	490d      	ldr	r1, [pc, #52]	; (8009ba0 <ledModeCommand+0x8c>)
 8009b6c:	0028      	movs	r0, r5
 8009b6e:	f009 f8de 	bl	8012d2e <memcpy>
 8009b72:	e7ed      	b.n	8009b50 <ledModeCommand+0x3c>
			|| !strcmp((char*) pcParameterString1, "OFF"))
 8009b74:	490b      	ldr	r1, [pc, #44]	; (8009ba4 <ledModeCommand+0x90>)
 8009b76:	0020      	movs	r0, r4
 8009b78:	f7f6 fac4 	bl	8000104 <strcmp>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d0f0      	beq.n	8009b62 <ledModeCommand+0x4e>
	if (SwitchindMode) {
 8009b80:	4b04      	ldr	r3, [pc, #16]	; (8009b94 <ledModeCommand+0x80>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0ef      	beq.n	8009b68 <ledModeCommand+0x54>
 8009b88:	e7dd      	b.n	8009b46 <ledModeCommand+0x32>
 8009b8a:	46c0      	nop			; (mov r8, r8)
 8009b8c:	08019b7c 	.word	0x08019b7c
 8009b90:	0801a1e8 	.word	0x0801a1e8
 8009b94:	20001a18 	.word	0x20001a18
 8009b98:	0801a1f4 	.word	0x0801a1f4
 8009b9c:	0801a1ec 	.word	0x0801a1ec
 8009ba0:	0801a224 	.word	0x0801a224
 8009ba4:	0801a1f0 	.word	0x0801a1f0

08009ba8 <SystemClock_Config>:
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8009ba8:	2310      	movs	r3, #16
void SystemClock_Config(void) {
 8009baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bac:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8009bae:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009bb0:	2680      	movs	r6, #128	; 0x80
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009bb2:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8009bb4:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009bb6:	2401      	movs	r4, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009bb8:	2702      	movs	r7, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009bba:	0276      	lsls	r6, r6, #9
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009bbc:	035b      	lsls	r3, r3, #13
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009bbe:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009bc0:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009bc2:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009bc4:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009bc6:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8009bc8:	9519      	str	r5, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009bca:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009bcc:	9617      	str	r6, [sp, #92]	; 0x5c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009bce:	f007 f967 	bl	8010ea0 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8009bd2:	2307      	movs	r3, #7
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8009bd8:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009bda:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009bdc:	9505      	str	r5, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009bde:	9703      	str	r7, [sp, #12]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8009be0:	f007 fc00 	bl	80113e4 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8009be4:	4b1a      	ldr	r3, [pc, #104]	; (8009c50 <SystemClock_Config+0xa8>)
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009be6:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8009be8:	9306      	str	r3, [sp, #24]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8009bea:	9508      	str	r5, [sp, #32]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009bec:	9509      	str	r5, [sp, #36]	; 0x24
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009bee:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009bf0:	f007 fd84 	bl	80116fc <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 8009bf4:	2180      	movs	r1, #128	; 0x80
 8009bf6:	4d17      	ldr	r5, [pc, #92]	; (8009c54 <SystemClock_Config+0xac>)
 8009bf8:	0549      	lsls	r1, r1, #21
 8009bfa:	69ea      	ldr	r2, [r5, #28]
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	61ea      	str	r2, [r5, #28]
 8009c00:	69eb      	ldr	r3, [r5, #28]
 8009c02:	400b      	ands	r3, r1
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 8009c08:	f007 f940 	bl	8010e8c <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009c0c:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009c0e:	a806      	add	r0, sp, #24
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009c14:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009c16:	f007 fd71 	bl	80116fc <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8009c1a:	f007 fd41 	bl	80116a0 <HAL_RCC_GetHCLKFreq>
 8009c1e:	21fa      	movs	r1, #250	; 0xfa
 8009c20:	0089      	lsls	r1, r1, #2
 8009c22:	f7f6 fa95 	bl	8000150 <__udivsi3>
 8009c26:	f005 ffdb 	bl	800fbe0 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8009c2a:	2004      	movs	r0, #4
 8009c2c:	f005 fff4 	bl	800fc18 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009c30:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE()
 8009c32:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009c34:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE()
 8009c36:	4323      	orrs	r3, r4
 8009c38:	61ab      	str	r3, [r5, #24]
 8009c3a:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009c3c:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE()
 8009c3e:	401c      	ands	r4, r3
 8009c40:	9401      	str	r4, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009c42:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE()
 8009c44:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009c46:	f005 ff8b 	bl	800fb60 <HAL_NVIC_SetPriority>
}
 8009c4a:	b01b      	add	sp, #108	; 0x6c
 8009c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c4e:	46c0      	nop			; (mov r8, r8)
 8009c50:	00040003 	.word	0x00040003
 8009c54:	40021000 	.word	0x40021000

08009c58 <SaveToRO>:
uint8_t SaveToRO(void) {
 8009c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c5a:	46de      	mov	lr, fp
 8009c5c:	4657      	mov	r7, sl
 8009c5e:	464e      	mov	r6, r9
 8009c60:	4645      	mov	r5, r8
 8009c62:	b5e0      	push	{r5, r6, r7, lr}
 8009c64:	b087      	sub	sp, #28
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 8009c66:	2215      	movs	r2, #21
 8009c68:	2100      	movs	r1, #0
 8009c6a:	4668      	mov	r0, sp
 8009c6c:	f009 f868 	bl	8012d40 <memset>
	HAL_FLASH_Unlock();
 8009c70:	f006 fe1e 	bl	80108b0 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 8009c74:	486a      	ldr	r0, [pc, #424]	; (8009e20 <SaveToRO+0x1c8>)
 8009c76:	f006 ff4b 	bl	8010b10 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 8009c7a:	486a      	ldr	r0, [pc, #424]	; (8009e24 <SaveToRO+0x1cc>)
 8009c7c:	f006 fe34 	bl	80108e8 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK) {
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d16e      	bne.n	8009d62 <SaveToRO+0x10a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8009c84:	2202      	movs	r2, #2
 8009c86:	4c68      	ldr	r4, [pc, #416]	; (8009e28 <SaveToRO+0x1d0>)
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	4393      	bics	r3, r2
 8009c8c:	6123      	str	r3, [r4, #16]
	if (myID) {
 8009c8e:	4b67      	ldr	r3, [pc, #412]	; (8009e2c <SaveToRO+0x1d4>)
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d000      	beq.n	8009c98 <SaveToRO+0x40>
 8009c96:	e06e      	b.n	8009d76 <SaveToRO+0x11e>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8009c98:	4b65      	ldr	r3, [pc, #404]	; (8009e30 <SaveToRO+0x1d8>)
 8009c9a:	469a      	mov	sl, r3
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d100      	bne.n	8009ca4 <SaveToRO+0x4c>
 8009ca2:	e0b8      	b.n	8009e16 <SaveToRO+0x1be>
 8009ca4:	4b63      	ldr	r3, [pc, #396]	; (8009e34 <SaveToRO+0x1dc>)
 8009ca6:	2500      	movs	r5, #0
 8009ca8:	4c63      	ldr	r4, [pc, #396]	; (8009e38 <SaveToRO+0x1e0>)
 8009caa:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009cac:	4f5e      	ldr	r7, [pc, #376]	; (8009e28 <SaveToRO+0x1d0>)
 8009cae:	e006      	b.n	8009cbe <SaveToRO+0x66>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8009cb0:	4653      	mov	r3, sl
 8009cb2:	3501      	adds	r5, #1
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	b2ed      	uxtb	r5, r5
 8009cb8:	42ab      	cmp	r3, r5
 8009cba:	d800      	bhi.n	8009cbe <SaveToRO+0x66>
 8009cbc:	e0ab      	b.n	8009e16 <SaveToRO+0x1be>
		if (snippets[s].cond.conditionType) {
 8009cbe:	00ab      	lsls	r3, r5, #2
 8009cc0:	1959      	adds	r1, r3, r5
 8009cc2:	4698      	mov	r8, r3
 8009cc4:	464b      	mov	r3, r9
 8009cc6:	0089      	lsls	r1, r1, #2
 8009cc8:	5c5b      	ldrb	r3, [r3, r1]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d0f0      	beq.n	8009cb0 <SaveToRO+0x58>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 8009cce:	466b      	mov	r3, sp
 8009cd0:	22fe      	movs	r2, #254	; 0xfe
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 8009cd2:	1c58      	adds	r0, r3, #1
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 8009cd4:	701a      	strb	r2, [r3, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 8009cd6:	4449      	add	r1, r9
 8009cd8:	2214      	movs	r2, #20
 8009cda:	f009 f828 	bl	8012d2e <memcpy>
 8009cde:	2314      	movs	r3, #20
 8009ce0:	469b      	mov	fp, r3
						*(uint16_t*) &snipBuffer[j * 2]);
 8009ce2:	466b      	mov	r3, sp
 8009ce4:	44a3      	add	fp, r4
 8009ce6:	1b1e      	subs	r6, r3, r4
 8009ce8:	465b      	mov	r3, fp
 8009cea:	46ab      	mov	fp, r5
 8009cec:	001d      	movs	r5, r3
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 8009cee:	5b32      	ldrh	r2, [r6, r4]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	0021      	movs	r1, r4
 8009cf4:	2001      	movs	r0, #1
 8009cf6:	f006 fe3b 	bl	8010970 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 8009cfa:	484a      	ldr	r0, [pc, #296]	; (8009e24 <SaveToRO+0x1cc>)
 8009cfc:	f006 fdf4 	bl	80108e8 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d12e      	bne.n	8009d62 <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009d04:	2201      	movs	r2, #1
 8009d06:	693b      	ldr	r3, [r7, #16]
					currentAdd += 2;
 8009d08:	3402      	adds	r4, #2
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009d0a:	4393      	bics	r3, r2
 8009d0c:	613b      	str	r3, [r7, #16]
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 8009d0e:	42ac      	cmp	r4, r5
 8009d10:	d1ed      	bne.n	8009cee <SaveToRO+0x96>
 8009d12:	465d      	mov	r5, fp
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009d14:	4643      	mov	r3, r8
 8009d16:	195b      	adds	r3, r3, r5
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	444b      	add	r3, r9
 8009d1c:	2600      	movs	r6, #0
 8009d1e:	4698      	mov	r8, r3
 8009d20:	0025      	movs	r5, r4
 8009d22:	e012      	b.n	8009d4a <SaveToRO+0xf2>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 8009d24:	0073      	lsls	r3, r6, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 8009d26:	5ae2      	ldrh	r2, [r4, r3]
 8009d28:	0029      	movs	r1, r5
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	2001      	movs	r0, #1
 8009d2e:	f006 fe1f 	bl	8010970 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 8009d32:	483c      	ldr	r0, [pc, #240]	; (8009e24 <SaveToRO+0x1cc>)
 8009d34:	f006 fdd8 	bl	80108e8 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d112      	bne.n	8009d62 <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	693b      	ldr	r3, [r7, #16]
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009d40:	3601      	adds	r6, #1
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009d42:	4393      	bics	r3, r2
 8009d44:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 8009d46:	3502      	adds	r5, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009d48:	b2f6      	uxtb	r6, r6
 8009d4a:	4643      	mov	r3, r8
 8009d4c:	68dc      	ldr	r4, [r3, #12]
 8009d4e:	0020      	movs	r0, r4
 8009d50:	f7f6 f9e2 	bl	8000118 <strlen>
 8009d54:	3001      	adds	r0, #1
 8009d56:	0840      	lsrs	r0, r0, #1
 8009d58:	4286      	cmp	r6, r0
 8009d5a:	d3e3      	bcc.n	8009d24 <SaveToRO+0xcc>
 8009d5c:	002c      	movs	r4, r5
 8009d5e:	465d      	mov	r5, fp
 8009d60:	e7a6      	b.n	8009cb0 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 8009d62:	4b36      	ldr	r3, [pc, #216]	; (8009e3c <SaveToRO+0x1e4>)
 8009d64:	69d8      	ldr	r0, [r3, #28]
 8009d66:	b2c0      	uxtb	r0, r0
}
 8009d68:	b007      	add	sp, #28
 8009d6a:	bc3c      	pop	{r2, r3, r4, r5}
 8009d6c:	4690      	mov	r8, r2
 8009d6e:	4699      	mov	r9, r3
 8009d70:	46a2      	mov	sl, r4
 8009d72:	46ab      	mov	fp, r5
 8009d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 8009d76:	4a32      	ldr	r2, [pc, #200]	; (8009e40 <SaveToRO+0x1e8>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009d78:	4929      	ldr	r1, [pc, #164]	; (8009e20 <SaveToRO+0x1c8>)
		temp = (uint16_t) (N << 8) + myID;
 8009d7a:	4693      	mov	fp, r2
 8009d7c:	7812      	ldrb	r2, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009d7e:	2001      	movs	r0, #1
		temp = (uint16_t) (N << 8) + myID;
 8009d80:	0212      	lsls	r2, r2, #8
 8009d82:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009d84:	b292      	uxth	r2, r2
 8009d86:	2300      	movs	r3, #0
 8009d88:	f006 fdf2 	bl	8010970 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 8009d8c:	4825      	ldr	r0, [pc, #148]	; (8009e24 <SaveToRO+0x1cc>)
 8009d8e:	f006 fdab 	bl	80108e8 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d1e5      	bne.n	8009d62 <SaveToRO+0x10a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009d96:	2201      	movs	r2, #1
 8009d98:	6923      	ldr	r3, [r4, #16]
 8009d9a:	4393      	bics	r3, r2
 8009d9c:	6123      	str	r3, [r4, #16]
		for (uint8_t i = 1; i <= N; i++) {
 8009d9e:	465b      	mov	r3, fp
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d100      	bne.n	8009da8 <SaveToRO+0x150>
 8009da6:	e777      	b.n	8009c98 <SaveToRO+0x40>
 8009da8:	2301      	movs	r3, #1
 8009daa:	469a      	mov	sl, r3
 8009dac:	4b25      	ldr	r3, [pc, #148]	; (8009e44 <SaveToRO+0x1ec>)
	uint16_t add = 2, temp = 0;
 8009dae:	2602      	movs	r6, #2
 8009db0:	4699      	mov	r9, r3
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009db2:	46a0      	mov	r8, r4
 8009db4:	4653      	mov	r3, sl
 8009db6:	1e5d      	subs	r5, r3, #1
 8009db8:	2316      	movs	r3, #22
 8009dba:	464f      	mov	r7, r9
 8009dbc:	435d      	muls	r5, r3
 8009dbe:	464b      	mov	r3, r9
 8009dc0:	3716      	adds	r7, #22
 8009dc2:	195c      	adds	r4, r3, r5
 8009dc4:	197f      	adds	r7, r7, r5
 8009dc6:	e002      	b.n	8009dce <SaveToRO+0x176>
 8009dc8:	3402      	adds	r4, #2
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8009dca:	42a7      	cmp	r7, r4
 8009dcc:	d01a      	beq.n	8009e04 <SaveToRO+0x1ac>
				if (array[i - 1][0]) {
 8009dce:	464b      	mov	r3, r9
 8009dd0:	5b5b      	ldrh	r3, [r3, r5]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d0f8      	beq.n	8009dc8 <SaveToRO+0x170>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8009dd6:	4b12      	ldr	r3, [pc, #72]	; (8009e20 <SaveToRO+0x1c8>)
 8009dd8:	8822      	ldrh	r2, [r4, #0]
 8009dda:	18f1      	adds	r1, r6, r3
 8009ddc:	2001      	movs	r0, #1
 8009dde:	2300      	movs	r3, #0
 8009de0:	f006 fdc6 	bl	8010970 <HAL_FLASH_Program>
					add += 2;
 8009de4:	3602      	adds	r6, #2
					FlashStatus = FLASH_WaitForLastOperation(
 8009de6:	480f      	ldr	r0, [pc, #60]	; (8009e24 <SaveToRO+0x1cc>)
					add += 2;
 8009de8:	b2b6      	uxth	r6, r6
					FlashStatus = FLASH_WaitForLastOperation(
 8009dea:	f006 fd7d 	bl	80108e8 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d1b7      	bne.n	8009d62 <SaveToRO+0x10a>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009df2:	4643      	mov	r3, r8
 8009df4:	2201      	movs	r2, #1
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	3402      	adds	r4, #2
 8009dfa:	4393      	bics	r3, r2
 8009dfc:	4642      	mov	r2, r8
 8009dfe:	6113      	str	r3, [r2, #16]
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8009e00:	42a7      	cmp	r7, r4
 8009e02:	d1e4      	bne.n	8009dce <SaveToRO+0x176>
		for (uint8_t i = 1; i <= N; i++) {
 8009e04:	4653      	mov	r3, sl
 8009e06:	3301      	adds	r3, #1
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	469a      	mov	sl, r3
 8009e0c:	465b      	mov	r3, fp
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	4553      	cmp	r3, sl
 8009e12:	d2cf      	bcs.n	8009db4 <SaveToRO+0x15c>
 8009e14:	e740      	b.n	8009c98 <SaveToRO+0x40>
	HAL_FLASH_Lock();
 8009e16:	f006 fd5d 	bl	80108d4 <HAL_FLASH_Lock>
	return result;
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	e7a4      	b.n	8009d68 <SaveToRO+0x110>
 8009e1e:	46c0      	nop			; (mov r8, r8)
 8009e20:	0801d800 	.word	0x0801d800
 8009e24:	0000c350 	.word	0x0000c350
 8009e28:	40022000 	.word	0x40022000
 8009e2c:	20000aa8 	.word	0x20000aa8
 8009e30:	20001150 	.word	0x20001150
 8009e34:	20006dd0 	.word	0x20006dd0
 8009e38:	0801dc00 	.word	0x0801dc00
 8009e3c:	200072b0 	.word	0x200072b0
 8009e40:	20000010 	.word	0x20000010
 8009e44:	20000ee4 	.word	0x20000ee4

08009e48 <ClearROtopology>:
	memset(array, 0, sizeof(array));
 8009e48:	228f      	movs	r2, #143	; 0x8f
uint8_t ClearROtopology(void) {
 8009e4a:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 8009e4c:	0092      	lsls	r2, r2, #2
 8009e4e:	2100      	movs	r1, #0
 8009e50:	4805      	ldr	r0, [pc, #20]	; (8009e68 <ClearROtopology+0x20>)
 8009e52:	f008 ff75 	bl	8012d40 <memset>
	N = 1;
 8009e56:	2201      	movs	r2, #1
 8009e58:	4b04      	ldr	r3, [pc, #16]	; (8009e6c <ClearROtopology+0x24>)
 8009e5a:	701a      	strb	r2, [r3, #0]
	myID = 0;
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	4b04      	ldr	r3, [pc, #16]	; (8009e70 <ClearROtopology+0x28>)
 8009e60:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 8009e62:	f7ff fef9 	bl	8009c58 <SaveToRO>
}
 8009e66:	bd10      	pop	{r4, pc}
 8009e68:	20000ee4 	.word	0x20000ee4
 8009e6c:	20000010 	.word	0x20000010
 8009e70:	20000aa8 	.word	0x20000aa8

08009e74 <SetupPortForRemoteBootloaderUpdate>:
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8009e74:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8009e76:	f003 fb5d 	bl	800d534 <GetUart>
	huart->Init.BaudRate =57600;
 8009e7a:	23e1      	movs	r3, #225	; 0xe1
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8009e80:	2380      	movs	r3, #128	; 0x80
 8009e82:	00db      	lsls	r3, r3, #3
 8009e84:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8009e86:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 8009e88:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8009e8a:	015b      	lsls	r3, r3, #5
 8009e8c:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8009e8e:	f008 fb33 	bl	80124f8 <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8009e92:	2120      	movs	r1, #32
 8009e94:	6822      	ldr	r2, [r4, #0]
 8009e96:	6813      	ldr	r3, [r2, #0]
 8009e98:	430b      	orrs	r3, r1
 8009e9a:	6013      	str	r3, [r2, #0]
}
 8009e9c:	bd10      	pop	{r4, pc}
 8009e9e:	46c0      	nop			; (mov r8, r8)

08009ea0 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ea2:	46ce      	mov	lr, r9
 8009ea4:	4647      	mov	r7, r8
 8009ea6:	4698      	mov	r8, r3
 8009ea8:	b580      	push	{r7, lr}
	myOutport =FindRoute(myID,dst);
 8009eaa:	4c2a      	ldr	r4, [pc, #168]	; (8009f54 <remoteBootloaderUpdate+0xb4>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009eac:	b085      	sub	sp, #20
 8009eae:	4681      	mov	r9, r0
	myOutport =FindRoute(myID,dst);
 8009eb0:	7820      	ldrb	r0, [r4, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009eb2:	000f      	movs	r7, r1
 8009eb4:	0015      	movs	r5, r2
	myOutport =FindRoute(myID,dst);
 8009eb6:	f7f9 fdf3 	bl	8003aa0 <FindRoute>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009eba:	4643      	mov	r3, r8
	myOutport =FindRoute(myID,dst);
 8009ebc:	0006      	movs	r6, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d11a      	bne.n	8009ef8 <remoteBootloaderUpdate+0x58>
	if(src == myID){
 8009ec2:	7823      	ldrb	r3, [r4, #0]
 8009ec4:	454b      	cmp	r3, r9
 8009ec6:	d03b      	beq.n	8009f40 <remoteBootloaderUpdate+0xa0>
	SetupPortForRemoteBootloaderUpdate(inport);
 8009ec8:	0028      	movs	r0, r5
 8009eca:	f7ff ffd3 	bl	8009e74 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8009ece:	0030      	movs	r0, r6
 8009ed0:	f7ff ffd0 	bl	8009e74 <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	7821      	ldrb	r1, [r4, #0]
 8009ed8:	9303      	str	r3, [sp, #12]
 8009eda:	3b01      	subs	r3, #1
 8009edc:	9302      	str	r3, [sp, #8]
 8009ede:	9301      	str	r3, [sp, #4]
 8009ee0:	3303      	adds	r3, #3
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	0032      	movs	r2, r6
 8009ee6:	000b      	movs	r3, r1
 8009ee8:	0028      	movs	r0, r5
 8009eea:	f7fe f93b 	bl	8008164 <StartScastDMAStream>
}
 8009eee:	b005      	add	sp, #20
 8009ef0:	bc0c      	pop	{r2, r3}
 8009ef2:	4690      	mov	r8, r2
 8009ef4:	4699      	mov	r9, r3
 8009ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009ef8:	7823      	ldrb	r3, [r4, #0]
 8009efa:	42bb      	cmp	r3, r7
 8009efc:	d01c      	beq.n	8009f38 <remoteBootloaderUpdate+0x98>
	if(src == myID){
 8009efe:	454b      	cmp	r3, r9
 8009f00:	d1e2      	bne.n	8009ec8 <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009f02:	f003 fd55 	bl	800d9b0 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8009f06:	4b14      	ldr	r3, [pc, #80]	; (8009f58 <remoteBootloaderUpdate+0xb8>)
 8009f08:	003a      	movs	r2, r7
 8009f0a:	6819      	ldr	r1, [r3, #0]
 8009f0c:	4643      	mov	r3, r8
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009f0e:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8009f10:	f009 f910 	bl	8013134 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8009f14:	4b11      	ldr	r3, [pc, #68]	; (8009f5c <remoteBootloaderUpdate+0xbc>)
 8009f16:	4648      	mov	r0, r9
 8009f18:	6819      	ldr	r1, [r3, #0]
 8009f1a:	f009 f92b 	bl	8013174 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8009f1e:	4648      	mov	r0, r9
 8009f20:	f7f6 f8fa 	bl	8000118 <strlen>
 8009f24:	2332      	movs	r3, #50	; 0x32
 8009f26:	b282      	uxth	r2, r0
 8009f28:	4649      	mov	r1, r9
 8009f2a:	0028      	movs	r0, r5
 8009f2c:	f003 faac 	bl	800d488 <writePxITMutex>
		Delay_ms(100);
 8009f30:	2064      	movs	r0, #100	; 0x64
 8009f32:	f005 fadd 	bl	800f4f0 <HAL_Delay>
 8009f36:	e7c7      	b.n	8009ec8 <remoteBootloaderUpdate+0x28>
 8009f38:	4646      	mov	r6, r8
	if(src == myID){
 8009f3a:	454f      	cmp	r7, r9
 8009f3c:	d1c4      	bne.n	8009ec8 <remoteBootloaderUpdate+0x28>
 8009f3e:	e7e0      	b.n	8009f02 <remoteBootloaderUpdate+0x62>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009f40:	f003 fd36 	bl	800d9b0 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8009f44:	4b06      	ldr	r3, [pc, #24]	; (8009f60 <remoteBootloaderUpdate+0xc0>)
 8009f46:	003a      	movs	r2, r7
 8009f48:	6819      	ldr	r1, [r3, #0]
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009f4a:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8009f4c:	f009 f8f2 	bl	8013134 <sprintf>
 8009f50:	e7e0      	b.n	8009f14 <remoteBootloaderUpdate+0x74>
 8009f52:	46c0      	nop			; (mov r8, r8)
 8009f54:	20000aa8 	.word	0x20000aa8
 8009f58:	20000090 	.word	0x20000090
 8009f5c:	2000008c 	.word	0x2000008c
 8009f60:	20000094 	.word	0x20000094

08009f64 <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 8009f64:	b500      	push	{lr}
 8009f66:	b083      	sub	sp, #12
	MX_USART1_UART_Init();
 8009f68:	f003 f8f2 	bl	800d150 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8009f6c:	f003 f908 	bl	800d180 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8009f70:	f003 f91e 	bl	800d1b0 <MX_USART3_UART_Init>
	MX_USART5_UART_Init();
 8009f74:	f003 f934 	bl	800d1e0 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 8009f78:	f003 f94a 	bl	800d210 <MX_USART6_UART_Init>
	xTimerSwitch =xTimerCreate("SwitchTimer",pdMS_TO_TICKS(1000),pdFALSE,(void* )1,SwitchTimerCallback);
 8009f7c:	21fa      	movs	r1, #250	; 0xfa
 8009f7e:	4b07      	ldr	r3, [pc, #28]	; (8009f9c <Module_Peripheral_Init+0x38>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	0089      	lsls	r1, r1, #2
 8009f86:	2301      	movs	r3, #1
 8009f88:	4805      	ldr	r0, [pc, #20]	; (8009fa0 <Module_Peripheral_Init+0x3c>)
 8009f8a:	f004 ffb1 	bl	800eef0 <xTimerCreate>
 8009f8e:	4b05      	ldr	r3, [pc, #20]	; (8009fa4 <Module_Peripheral_Init+0x40>)
 8009f90:	6058      	str	r0, [r3, #4]
	Switch_Init();
 8009f92:	f001 fd51 	bl	800ba38 <Switch_Init>
}
 8009f96:	b003      	add	sp, #12
 8009f98:	bd00      	pop	{pc}
 8009f9a:	46c0      	nop			; (mov r8, r8)
 8009f9c:	0800a151 	.word	0x0800a151
 8009fa0:	0801a254 	.word	0x0801a254
 8009fa4:	20001a18 	.word	0x20001a18

08009fa8 <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 8009fa8:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&onCommandDefinition);
 8009faa:	4c08      	ldr	r4, [pc, #32]	; (8009fcc <RegisterModuleCLICommands+0x24>)
 8009fac:	0020      	movs	r0, r4
 8009fae:	f003 fc6f 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&offCommandDefinition);
 8009fb2:	0020      	movs	r0, r4
 8009fb4:	3010      	adds	r0, #16
 8009fb6:	f003 fc6b 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&toggleCommandDefinition);
 8009fba:	0020      	movs	r0, r4
 8009fbc:	3020      	adds	r0, #32
 8009fbe:	f003 fc67 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ledModeCommandDefinition);
 8009fc2:	0020      	movs	r0, r4
 8009fc4:	3030      	adds	r0, #48	; 0x30
 8009fc6:	f003 fc63 	bl	800d890 <FreeRTOS_CLIRegisterCommand>
}
 8009fca:	bd10      	pop	{r4, pc}
 8009fcc:	08017a8c 	.word	0x08017a8c

08009fd0 <GetPort>:
	if (huart->Instance == USART5)
 8009fd0:	6800      	ldr	r0, [r0, #0]
 8009fd2:	4b0e      	ldr	r3, [pc, #56]	; (800a00c <GetPort+0x3c>)
 8009fd4:	4298      	cmp	r0, r3
 8009fd6:	d011      	beq.n	8009ffc <GetPort+0x2c>
	else if (huart->Instance == USART2)
 8009fd8:	4b0d      	ldr	r3, [pc, #52]	; (800a010 <GetPort+0x40>)
 8009fda:	4298      	cmp	r0, r3
 8009fdc:	d012      	beq.n	800a004 <GetPort+0x34>
	else if (huart->Instance == USART6)
 8009fde:	4b0d      	ldr	r3, [pc, #52]	; (800a014 <GetPort+0x44>)
 8009fe0:	4298      	cmp	r0, r3
 8009fe2:	d011      	beq.n	800a008 <GetPort+0x38>
	else if (huart->Instance == USART3)
 8009fe4:	4b0c      	ldr	r3, [pc, #48]	; (800a018 <GetPort+0x48>)
 8009fe6:	4298      	cmp	r0, r3
 8009fe8:	d00a      	beq.n	800a000 <GetPort+0x30>
	return 0;
 8009fea:	4b0c      	ldr	r3, [pc, #48]	; (800a01c <GetPort+0x4c>)
 8009fec:	469c      	mov	ip, r3
 8009fee:	4460      	add	r0, ip
 8009ff0:	4243      	negs	r3, r0
 8009ff2:	4158      	adcs	r0, r3
 8009ff4:	2305      	movs	r3, #5
 8009ff6:	4240      	negs	r0, r0
 8009ff8:	4018      	ands	r0, r3
}
 8009ffa:	4770      	bx	lr
		return P1;
 8009ffc:	2001      	movs	r0, #1
 8009ffe:	e7fc      	b.n	8009ffa <GetPort+0x2a>
		return P4;
 800a000:	2004      	movs	r0, #4
 800a002:	e7fa      	b.n	8009ffa <GetPort+0x2a>
		return P2;
 800a004:	2002      	movs	r0, #2
 800a006:	e7f8      	b.n	8009ffa <GetPort+0x2a>
		return P3;
 800a008:	2003      	movs	r0, #3
 800a00a:	e7f6      	b.n	8009ffa <GetPort+0x2a>
 800a00c:	40005000 	.word	0x40005000
 800a010:	40004400 	.word	0x40004400
 800a014:	40011400 	.word	0x40011400
 800a018:	40004800 	.word	0x40004800
 800a01c:	bffec800 	.word	0xbffec800

0800a020 <Output_on>:
Module_Status Output_on(uint32_t timeout) {
 800a020:	b530      	push	{r4, r5, lr}
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 800a022:	2201      	movs	r2, #1
Module_Status Output_on(uint32_t timeout) {
 800a024:	b083      	sub	sp, #12
 800a026:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 800a028:	2101      	movs	r1, #1
 800a02a:	481b      	ldr	r0, [pc, #108]	; (800a098 <Output_on+0x78>)
 800a02c:	f006 ff22 	bl	8010e74 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a030:	4c1a      	ldr	r4, [pc, #104]	; (800a09c <Output_on+0x7c>)
 800a032:	7823      	ldrb	r3, [r4, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d11e      	bne.n	800a076 <Output_on+0x56>
	if (timeout != portMAX_DELAY) {
 800a038:	1c6b      	adds	r3, r5, #1
 800a03a:	d015      	beq.n	800a068 <Output_on+0x48>
		if (xTimerIsTimerActive(xTimerSwitch))
 800a03c:	6860      	ldr	r0, [r4, #4]
 800a03e:	f005 f8a7 	bl	800f190 <xTimerIsTimerActive>
 800a042:	2800      	cmp	r0, #0
 800a044:	d11f      	bne.n	800a086 <Output_on+0x66>
		xTimerChangePeriod(xTimerSwitch, pdMS_TO_TICKS(timeout), 100);
 800a046:	21fa      	movs	r1, #250	; 0xfa
 800a048:	0168      	lsls	r0, r5, #5
 800a04a:	1b40      	subs	r0, r0, r5
 800a04c:	0080      	lsls	r0, r0, #2
 800a04e:	1940      	adds	r0, r0, r5
 800a050:	0089      	lsls	r1, r1, #2
 800a052:	00c0      	lsls	r0, r0, #3
 800a054:	f7f6 f87c 	bl	8000150 <__udivsi3>
 800a058:	2364      	movs	r3, #100	; 0x64
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	0002      	movs	r2, r0
 800a05e:	2300      	movs	r3, #0
 800a060:	2104      	movs	r1, #4
 800a062:	6860      	ldr	r0, [r4, #4]
 800a064:	f004 ff64 	bl	800ef30 <xTimerGenericCommand>
	Switch_state = STATE_ON;
 800a068:	2301      	movs	r3, #1
}
 800a06a:	2000      	movs	r0, #0
	Switch_Oldstate = Switch_state;
 800a06c:	4a0c      	ldr	r2, [pc, #48]	; (800a0a0 <Output_on+0x80>)
	Switch_state = STATE_ON;
 800a06e:	7223      	strb	r3, [r4, #8]
	Switch_Oldstate = Switch_state;
 800a070:	7013      	strb	r3, [r2, #0]
}
 800a072:	b003      	add	sp, #12
 800a074:	bd30      	pop	{r4, r5, pc}
		IND_ON();
 800a076:	2180      	movs	r1, #128	; 0x80
 800a078:	2090      	movs	r0, #144	; 0x90
 800a07a:	2201      	movs	r2, #1
 800a07c:	0109      	lsls	r1, r1, #4
 800a07e:	05c0      	lsls	r0, r0, #23
 800a080:	f006 fef8 	bl	8010e74 <HAL_GPIO_WritePin>
 800a084:	e7d8      	b.n	800a038 <Output_on+0x18>
			xTimerStop(xTimerSwitch, 100);
 800a086:	2364      	movs	r3, #100	; 0x64
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	2200      	movs	r2, #0
 800a08c:	2300      	movs	r3, #0
 800a08e:	2103      	movs	r1, #3
 800a090:	6860      	ldr	r0, [r4, #4]
 800a092:	f004 ff4d 	bl	800ef30 <xTimerGenericCommand>
 800a096:	e7d6      	b.n	800a046 <Output_on+0x26>
 800a098:	48000400 	.word	0x48000400
 800a09c:	20001a18 	.word	0x20001a18
 800a0a0:	2000009c 	.word	0x2000009c

0800a0a4 <onCommand>:
	portBASE_TYPE xParameterStringLength1 = 0;
 800a0a4:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800a0a6:	b530      	push	{r4, r5, lr}
 800a0a8:	b083      	sub	sp, #12
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a0aa:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 800a0ac:	0005      	movs	r5, r0
 800a0ae:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a0b0:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 800a0b2:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a0b4:	f003 fc80 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if (!strcmp((char*) pcParameterString1, "inf")
 800a0b8:	4914      	ldr	r1, [pc, #80]	; (800a10c <onCommand+0x68>)
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a0ba:	0004      	movs	r4, r0
	if (!strcmp((char*) pcParameterString1, "inf")
 800a0bc:	f7f6 f822 	bl	8000104 <strcmp>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d005      	beq.n	800a0d0 <onCommand+0x2c>
			|| !strcmp((char*) pcParameterString1, "INF"))
 800a0c4:	4912      	ldr	r1, [pc, #72]	; (800a110 <onCommand+0x6c>)
 800a0c6:	0020      	movs	r0, r4
 800a0c8:	f7f6 f81c 	bl	8000104 <strcmp>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d10d      	bne.n	800a0ec <onCommand+0x48>
	result = Output_on(timeout);
 800a0d0:	2001      	movs	r0, #1
 800a0d2:	4240      	negs	r0, r0
 800a0d4:	f7ff ffa4 	bl	800a020 <Output_on>
	if (result == H0FRx_OK) {
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d104      	bne.n	800a0e6 <onCommand+0x42>
			strcpy((char*) pcWriteBuffer, (char*) pcOKMessageInf);
 800a0dc:	2232      	movs	r2, #50	; 0x32
 800a0de:	490d      	ldr	r1, [pc, #52]	; (800a114 <onCommand+0x70>)
 800a0e0:	0028      	movs	r0, r5
 800a0e2:	f008 fe24 	bl	8012d2e <memcpy>
}
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	b003      	add	sp, #12
 800a0ea:	bd30      	pop	{r4, r5, pc}
		timeout = (uint32_t) atol((char*) pcParameterString1);
 800a0ec:	0020      	movs	r0, r4
 800a0ee:	f008 fb5e 	bl	80127ae <atol>
 800a0f2:	0004      	movs	r4, r0
	result = Output_on(timeout);
 800a0f4:	f7ff ff94 	bl	800a020 <Output_on>
	if (result == H0FRx_OK) {
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d1f4      	bne.n	800a0e6 <onCommand+0x42>
		if (timeout != portMAX_DELAY) {
 800a0fc:	1c63      	adds	r3, r4, #1
 800a0fe:	d0ed      	beq.n	800a0dc <onCommand+0x38>
			sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, timeout);
 800a100:	0022      	movs	r2, r4
 800a102:	4905      	ldr	r1, [pc, #20]	; (800a118 <onCommand+0x74>)
 800a104:	0028      	movs	r0, r5
 800a106:	f009 f815 	bl	8013134 <sprintf>
 800a10a:	e7ec      	b.n	800a0e6 <onCommand+0x42>
 800a10c:	0801a260 	.word	0x0801a260
 800a110:	0801a264 	.word	0x0801a264
 800a114:	0801a2a0 	.word	0x0801a2a0
 800a118:	0801a268 	.word	0x0801a268

0800a11c <Output_off>:
Module_Status Output_off(void) {
 800a11c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_RESET);
 800a11e:	2200      	movs	r2, #0
 800a120:	2101      	movs	r1, #1
 800a122:	4809      	ldr	r0, [pc, #36]	; (800a148 <Output_off+0x2c>)
 800a124:	f006 fea6 	bl	8010e74 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a128:	4c08      	ldr	r4, [pc, #32]	; (800a14c <Output_off+0x30>)
 800a12a:	7823      	ldrb	r3, [r4, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d006      	beq.n	800a13e <Output_off+0x22>
		IND_OFF();
 800a130:	2180      	movs	r1, #128	; 0x80
 800a132:	2090      	movs	r0, #144	; 0x90
 800a134:	2200      	movs	r2, #0
 800a136:	0109      	lsls	r1, r1, #4
 800a138:	05c0      	lsls	r0, r0, #23
 800a13a:	f006 fe9b 	bl	8010e74 <HAL_GPIO_WritePin>
	Switch_state = STATE_OFF;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	2000      	movs	r0, #0
	Switch_state = STATE_OFF;
 800a142:	7223      	strb	r3, [r4, #8]
}
 800a144:	bd10      	pop	{r4, pc}
 800a146:	46c0      	nop			; (mov r8, r8)
 800a148:	48000400 	.word	0x48000400
 800a14c:	20001a18 	.word	0x20001a18

0800a150 <SwitchTimerCallback>:
void SwitchTimerCallback(TimerHandle_t xTimerSwitch) {
 800a150:	b510      	push	{r4, lr}
	Output_off();
 800a152:	f7ff ffe3 	bl	800a11c <Output_off>
}
 800a156:	bd10      	pop	{r4, pc}

0800a158 <offCommand>:
		const int8_t *pcCommandString) {
 800a158:	b510      	push	{r4, lr}
 800a15a:	0004      	movs	r4, r0
	result = Output_off();
 800a15c:	f7ff ffde 	bl	800a11c <Output_off>
	if (result == H0FRx_OK) {
 800a160:	2800      	cmp	r0, #0
 800a162:	d104      	bne.n	800a16e <offCommand+0x16>
		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800a164:	2223      	movs	r2, #35	; 0x23
 800a166:	4903      	ldr	r1, [pc, #12]	; (800a174 <offCommand+0x1c>)
 800a168:	0020      	movs	r0, r4
 800a16a:	f008 fde0 	bl	8012d2e <memcpy>
}
 800a16e:	2000      	movs	r0, #0
 800a170:	bd10      	pop	{r4, pc}
 800a172:	46c0      	nop			; (mov r8, r8)
 800a174:	0801a2d4 	.word	0x0801a2d4

0800a178 <Output_toggle>:
	if (Switch_state) {
 800a178:	4b08      	ldr	r3, [pc, #32]	; (800a19c <Output_toggle+0x24>)
Module_Status Output_toggle(void) {
 800a17a:	b510      	push	{r4, lr}
	if (Switch_state) {
 800a17c:	7a1b      	ldrb	r3, [r3, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d105      	bne.n	800a18e <Output_toggle+0x16>
		if (Switch_Oldstate == STATE_ON)
 800a182:	4b07      	ldr	r3, [pc, #28]	; (800a1a0 <Output_toggle+0x28>)
	Module_Status result = H0FRx_OK;
 800a184:	2000      	movs	r0, #0
		if (Switch_Oldstate == STATE_ON)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d003      	beq.n	800a194 <Output_toggle+0x1c>
}
 800a18c:	bd10      	pop	{r4, pc}
		result = Output_off();
 800a18e:	f7ff ffc5 	bl	800a11c <Output_off>
 800a192:	e7fb      	b.n	800a18c <Output_toggle+0x14>
			result = Output_on(portMAX_DELAY);
 800a194:	3801      	subs	r0, #1
 800a196:	f7ff ff43 	bl	800a020 <Output_on>
 800a19a:	e7f7      	b.n	800a18c <Output_toggle+0x14>
 800a19c:	20001a18 	.word	0x20001a18
 800a1a0:	2000009c 	.word	0x2000009c

0800a1a4 <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800a1a4:	b510      	push	{r4, lr}
 800a1a6:	ab02      	add	r3, sp, #8
 800a1a8:	781a      	ldrb	r2, [r3, #0]
	switch (code) {
 800a1aa:	4b15      	ldr	r3, [pc, #84]	; (800a200 <Module_MessagingTask+0x5c>)
 800a1ac:	4298      	cmp	r0, r3
 800a1ae:	d022      	beq.n	800a1f6 <Module_MessagingTask+0x52>
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	4298      	cmp	r0, r3
 800a1b4:	d01b      	beq.n	800a1ee <Module_MessagingTask+0x4a>
 800a1b6:	4b13      	ldr	r3, [pc, #76]	; (800a204 <Module_MessagingTask+0x60>)
 800a1b8:	4298      	cmp	r0, r3
 800a1ba:	d001      	beq.n	800a1c0 <Module_MessagingTask+0x1c>
		result = H0FRx_ERR_UnknownMessage;
 800a1bc:	2001      	movs	r0, #1
}
 800a1be:	bd10      	pop	{r4, pc}
		temp32 = ((uint32_t) cMessage[port - 1][shift] << 24)+ ((uint32_t) cMessage[port - 1][1 + shift] << 16)+ ((uint32_t) cMessage[port - 1][2 + shift] << 8)+ cMessage[port - 1][3 + shift];
 800a1c0:	3901      	subs	r1, #1
 800a1c2:	00cb      	lsls	r3, r1, #3
 800a1c4:	1a59      	subs	r1, r3, r1
 800a1c6:	4b10      	ldr	r3, [pc, #64]	; (800a208 <Module_MessagingTask+0x64>)
 800a1c8:	00c9      	lsls	r1, r1, #3
 800a1ca:	1859      	adds	r1, r3, r1
 800a1cc:	188b      	adds	r3, r1, r2
 800a1ce:	7858      	ldrb	r0, [r3, #1]
 800a1d0:	5c8a      	ldrb	r2, [r1, r2]
 800a1d2:	0400      	lsls	r0, r0, #16
 800a1d4:	0612      	lsls	r2, r2, #24
 800a1d6:	1880      	adds	r0, r0, r2
 800a1d8:	78da      	ldrb	r2, [r3, #3]
 800a1da:	789b      	ldrb	r3, [r3, #2]
 800a1dc:	1880      	adds	r0, r0, r2
 800a1de:	021b      	lsls	r3, r3, #8
 800a1e0:	18c0      	adds	r0, r0, r3
 800a1e2:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <Module_MessagingTask+0x68>)
 800a1e4:	6018      	str	r0, [r3, #0]
		Output_on(temp32);
 800a1e6:	f7ff ff1b 	bl	800a020 <Output_on>
	Module_Status result = H0FRx_OK;
 800a1ea:	2000      	movs	r0, #0
		break;
 800a1ec:	e7e7      	b.n	800a1be <Module_MessagingTask+0x1a>
		Output_toggle();
 800a1ee:	f7ff ffc3 	bl	800a178 <Output_toggle>
	Module_Status result = H0FRx_OK;
 800a1f2:	2000      	movs	r0, #0
		break;
 800a1f4:	e7e3      	b.n	800a1be <Module_MessagingTask+0x1a>
		Output_off();
 800a1f6:	f7ff ff91 	bl	800a11c <Output_off>
	Module_Status result = H0FRx_OK;
 800a1fa:	2000      	movs	r0, #0
		break;
 800a1fc:	e7df      	b.n	800a1be <Module_MessagingTask+0x1a>
 800a1fe:	46c0      	nop			; (mov r8, r8)
 800a200:	000002ef 	.word	0x000002ef
 800a204:	000002ee 	.word	0x000002ee
 800a208:	20000ca0 	.word	0x20000ca0
 800a20c:	20007040 	.word	0x20007040

0800a210 <toggleCommand>:
		const int8_t *pcCommandString) {
 800a210:	b510      	push	{r4, lr}
 800a212:	0004      	movs	r4, r0
	result = Output_toggle();
 800a214:	f7ff ffb0 	bl	800a178 <Output_toggle>
	if (result == H0FRx_OK) {
 800a218:	2800      	cmp	r0, #0
 800a21a:	d108      	bne.n	800a22e <toggleCommand+0x1e>
		if (Switch_state) {
 800a21c:	4b08      	ldr	r3, [pc, #32]	; (800a240 <toggleCommand+0x30>)
 800a21e:	7a1b      	ldrb	r3, [r3, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d106      	bne.n	800a232 <toggleCommand+0x22>
			strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 800a224:	2223      	movs	r2, #35	; 0x23
 800a226:	4907      	ldr	r1, [pc, #28]	; (800a244 <toggleCommand+0x34>)
 800a228:	0020      	movs	r0, r4
 800a22a:	f008 fd80 	bl	8012d2e <memcpy>
}
 800a22e:	2000      	movs	r0, #0
 800a230:	bd10      	pop	{r4, pc}
			strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 800a232:	2222      	movs	r2, #34	; 0x22
 800a234:	4904      	ldr	r1, [pc, #16]	; (800a248 <toggleCommand+0x38>)
 800a236:	0020      	movs	r0, r4
 800a238:	f008 fd79 	bl	8012d2e <memcpy>
 800a23c:	e7f7      	b.n	800a22e <toggleCommand+0x1e>
 800a23e:	46c0      	nop			; (mov r8, r8)
 800a240:	20001a18 	.word	0x20001a18
 800a244:	0801a2d4 	.word	0x0801a2d4
 800a248:	0801a2f8 	.word	0x0801a2f8

0800a24c <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 800a24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a24e:	46de      	mov	lr, fp
 800a250:	4657      	mov	r7, sl
 800a252:	464e      	mov	r6, r9
 800a254:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 800a256:	2201      	movs	r2, #1
 800a258:	4b53      	ldr	r3, [pc, #332]	; (800a3a8 <DMA_Init+0x15c>)
{
 800a25a:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 800a25c:	6959      	ldr	r1, [r3, #20]
{
 800a25e:	b083      	sub	sp, #12
	__DMA1_CLK_ENABLE();
 800a260:	4311      	orrs	r1, r2
 800a262:	6159      	str	r1, [r3, #20]
 800a264:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800a266:	4c51      	ldr	r4, [pc, #324]	; (800a3ac <DMA_Init+0x160>)
	__DMA1_CLK_ENABLE();
 800a268:	400a      	ands	r2, r1
 800a26a:	9200      	str	r2, [sp, #0]
 800a26c:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800a26e:	2202      	movs	r2, #2
 800a270:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a272:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 800a274:	4311      	orrs	r1, r2
 800a276:	6159      	str	r1, [r3, #20]
 800a278:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a27a:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 800a27c:	401a      	ands	r2, r3
 800a27e:	9201      	str	r2, [sp, #4]
 800a280:	9b01      	ldr	r3, [sp, #4]
	hDMA->Instance = ch;
 800a282:	4b4b      	ldr	r3, [pc, #300]	; (800a3b0 <DMA_Init+0x164>)
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a284:	2680      	movs	r6, #128	; 0x80
	hDMA->Instance = ch;
 800a286:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a288:	2320      	movs	r3, #32
 800a28a:	469b      	mov	fp, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a28c:	01bf      	lsls	r7, r7, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a28e:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a290:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a292:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a294:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a296:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a298:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a29a:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800a29c:	0020      	movs	r0, r4
 800a29e:	f005 fde7 	bl	800fe70 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a2a2:	4b44      	ldr	r3, [pc, #272]	; (800a3b4 <DMA_Init+0x168>)
	HAL_DMA_Init(hDMA);		
 800a2a4:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a2a6:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a2a8:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a2aa:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a2ac:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a2ae:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a2b0:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a2b2:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a2b4:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a2b6:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800a2b8:	3038      	adds	r0, #56	; 0x38
 800a2ba:	f005 fdd9 	bl	800fe70 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a2be:	4b3e      	ldr	r3, [pc, #248]	; (800a3b8 <DMA_Init+0x16c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a2c0:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 800a2c2:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a2c4:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 800a2c6:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a2c8:	50e5      	str	r5, [r4, r3]
 800a2ca:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	50e2      	str	r2, [r4, r3]
 800a2d0:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a2d6:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a2d8:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a2da:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a2dc:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 800a2de:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a2e0:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 800a2e2:	f005 fdc5 	bl	800fe70 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a2e6:	23a8      	movs	r3, #168	; 0xa8
 800a2e8:	4a34      	ldr	r2, [pc, #208]	; (800a3bc <DMA_Init+0x170>)
	HAL_DMA_Init(hDMA);		
 800a2ea:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a2ec:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a2ee:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a2fc:	3304      	adds	r3, #4
 800a2fe:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a300:	3304      	adds	r3, #4
 800a302:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a304:	3304      	adds	r3, #4
 800a306:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a308:	3304      	adds	r3, #4
 800a30a:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800a30c:	30a8      	adds	r0, #168	; 0xa8
 800a30e:	f005 fdaf 	bl	800fe70 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a312:	23e0      	movs	r3, #224	; 0xe0
 800a314:	4a2a      	ldr	r2, [pc, #168]	; (800a3c0 <DMA_Init+0x174>)
	HAL_DMA_Init(hDMA);		
 800a316:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a318:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a31a:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a31c:	3304      	adds	r3, #4
 800a31e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a320:	3304      	adds	r3, #4
 800a322:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a324:	3304      	adds	r3, #4
 800a326:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a328:	3304      	adds	r3, #4
 800a32a:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a32c:	3304      	adds	r3, #4
 800a32e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a330:	3304      	adds	r3, #4
 800a332:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a334:	3304      	adds	r3, #4
 800a336:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800a338:	30e0      	adds	r0, #224	; 0xe0
 800a33a:	f005 fd99 	bl	800fe70 <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800a33e:	4c21      	ldr	r4, [pc, #132]	; (800a3c4 <DMA_Init+0x178>)
 800a340:	4b21      	ldr	r3, [pc, #132]	; (800a3c8 <DMA_Init+0x17c>)
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a342:	60a5      	str	r5, [r4, #8]
	hDMA->Instance = ch;
 800a344:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a346:	2310      	movs	r3, #16
 800a348:	469b      	mov	fp, r3
 800a34a:	6063      	str	r3, [r4, #4]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a34c:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a34e:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a350:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800a352:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a354:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800a356:	0020      	movs	r0, r4
 800a358:	f005 fd8a 	bl	800fe70 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a35c:	4b1b      	ldr	r3, [pc, #108]	; (800a3cc <DMA_Init+0x180>)
	HAL_DMA_Init(hDMA);		
 800a35e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a360:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a362:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a364:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a366:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a368:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a36a:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a36c:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 800a36e:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a370:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800a372:	3038      	adds	r0, #56	; 0x38
 800a374:	f005 fd7c 	bl	800fe70 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a378:	4b15      	ldr	r3, [pc, #84]	; (800a3d0 <DMA_Init+0x184>)
	HAL_DMA_Init(hDMA);		
 800a37a:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a37c:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a37e:	465b      	mov	r3, fp
 800a380:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a382:	4653      	mov	r3, sl
 800a384:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 800a386:	464b      	mov	r3, r9
 800a388:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a38a:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a38c:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a38e:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a390:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a392:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800a394:	3070      	adds	r0, #112	; 0x70
 800a396:	f005 fd6b 	bl	800fe70 <HAL_DMA_Init>
}
 800a39a:	b003      	add	sp, #12
 800a39c:	bc3c      	pop	{r2, r3, r4, r5}
 800a39e:	4690      	mov	r8, r2
 800a3a0:	4699      	mov	r9, r3
 800a3a2:	46a2      	mov	sl, r4
 800a3a4:	46ab      	mov	fp, r5
 800a3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3a8:	40021000 	.word	0x40021000
 800a3ac:	20001cd8 	.word	0x20001cd8
 800a3b0:	40020008 	.word	0x40020008
 800a3b4:	40020030 	.word	0x40020030
 800a3b8:	40020058 	.word	0x40020058
 800a3bc:	4002006c 	.word	0x4002006c
 800a3c0:	4002041c 	.word	0x4002041c
 800a3c4:	20001c30 	.word	0x20001c30
 800a3c8:	4002001c 	.word	0x4002001c
 800a3cc:	40020044 	.word	0x40020044
 800a3d0:	40020080 	.word	0x40020080

0800a3d4 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800a3d4:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800a3d6:	1e44      	subs	r4, r0, #1
 800a3d8:	00e5      	lsls	r5, r4, #3
 800a3da:	4e07      	ldr	r6, [pc, #28]	; (800a3f8 <StopStreamDMA+0x24>)
 800a3dc:	1b2d      	subs	r5, r5, r4
 800a3de:	00ed      	lsls	r5, r5, #3
 800a3e0:	19a8      	adds	r0, r5, r6

	HAL_DMA_Abort(hDMA);
 800a3e2:	f005 fd9d 	bl	800ff20 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] = 0;
 800a3ea:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR = 0;
 800a3ec:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800a3ee:	4a03      	ldr	r2, [pc, #12]	; (800a3fc <StopStreamDMA+0x28>)
 800a3f0:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800a3f2:	4a03      	ldr	r2, [pc, #12]	; (800a400 <StopStreamDMA+0x2c>)
 800a3f4:	50a3      	str	r3, [r4, r2]

}
 800a3f6:	bd70      	pop	{r4, r5, r6, pc}
 800a3f8:	20001ae0 	.word	0x20001ae0
 800a3fc:	200012e0 	.word	0x200012e0
 800a400:	200012f4 	.word	0x200012f4

0800a404 <SwitchMsgDMAToStream>:
 */
void StopMsgDMA(uint8_t port){
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800a404:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800a406:	b570      	push	{r4, r5, r6, lr}
 800a408:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 800a40a:	4d0c      	ldr	r5, [pc, #48]	; (800a43c <SwitchMsgDMAToStream+0x38>)
 800a40c:	1a24      	subs	r4, r4, r0
 800a40e:	00e4      	lsls	r4, r4, #3
 800a410:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 800a412:	f005 fd85 	bl	800ff20 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800a416:	2300      	movs	r3, #0
 800a418:	5962      	ldr	r2, [r4, r5]
	hDMA->Instance = ch;
 800a41a:	4809      	ldr	r0, [pc, #36]	; (800a440 <SwitchMsgDMAToStream+0x3c>)
	hDMA->Instance->CNDTR =0;
 800a41c:	6053      	str	r3, [r2, #4]
	hDMA->Instance = ch;
 800a41e:	5022      	str	r2, [r4, r0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a420:	1900      	adds	r0, r0, r4
 800a422:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a424:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800a426:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a428:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a42a:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a42c:	3320      	adds	r3, #32
 800a42e:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800a430:	2380      	movs	r3, #128	; 0x80
 800a432:	015b      	lsls	r3, r3, #5
 800a434:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 800a436:	f005 fd1b 	bl	800fe70 <HAL_DMA_Init>
	// Stop the messaging DMA
	StopMsgDMA(port);

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
}
 800a43a:	bd70      	pop	{r4, r5, r6, pc}
 800a43c:	20001cd8 	.word	0x20001cd8
 800a440:	20001ae0 	.word	0x20001ae0

0800a444 <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 800a444:	6803      	ldr	r3, [r0, #0]
 800a446:	4a21      	ldr	r2, [pc, #132]	; (800a4cc <SetupDMAInterrupts+0x88>)
{
 800a448:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d01c      	beq.n	800a488 <SetupDMAInterrupts+0x44>
 800a44e:	d80e      	bhi.n	800a46e <SetupDMAInterrupts+0x2a>
 800a450:	4a1f      	ldr	r2, [pc, #124]	; (800a4d0 <SetupDMAInterrupts+0x8c>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d026      	beq.n	800a4a4 <SetupDMAInterrupts+0x60>
 800a456:	d82d      	bhi.n	800a4b4 <SetupDMAInterrupts+0x70>
 800a458:	4a1e      	ldr	r2, [pc, #120]	; (800a4d4 <SetupDMAInterrupts+0x90>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d131      	bne.n	800a4c2 <SetupDMAInterrupts+0x7e>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800a45e:	2009      	movs	r0, #9
 800a460:	2200      	movs	r2, #0
 800a462:	f005 fb7d 	bl	800fb60 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800a466:	2009      	movs	r0, #9
 800a468:	f005 fba6 	bl	800fbb8 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800a46c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800a46e:	4a1a      	ldr	r2, [pc, #104]	; (800a4d8 <SetupDMAInterrupts+0x94>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d017      	beq.n	800a4a4 <SetupDMAInterrupts+0x60>
 800a474:	d910      	bls.n	800a498 <SetupDMAInterrupts+0x54>
 800a476:	4a19      	ldr	r2, [pc, #100]	; (800a4dc <SetupDMAInterrupts+0x98>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d005      	beq.n	800a488 <SetupDMAInterrupts+0x44>
 800a47c:	4a18      	ldr	r2, [pc, #96]	; (800a4e0 <SetupDMAInterrupts+0x9c>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d002      	beq.n	800a488 <SetupDMAInterrupts+0x44>
 800a482:	4a18      	ldr	r2, [pc, #96]	; (800a4e4 <SetupDMAInterrupts+0xa0>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d1f1      	bne.n	800a46c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800a488:	2200      	movs	r2, #0
 800a48a:	200b      	movs	r0, #11
 800a48c:	f005 fb68 	bl	800fb60 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800a490:	200b      	movs	r0, #11
 800a492:	f005 fb91 	bl	800fbb8 <HAL_NVIC_EnableIRQ>
}
 800a496:	e7e9      	b.n	800a46c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800a498:	4a13      	ldr	r2, [pc, #76]	; (800a4e8 <SetupDMAInterrupts+0xa4>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d0f4      	beq.n	800a488 <SetupDMAInterrupts+0x44>
 800a49e:	4a13      	ldr	r2, [pc, #76]	; (800a4ec <SetupDMAInterrupts+0xa8>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d1e3      	bne.n	800a46c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	200a      	movs	r0, #10
 800a4a8:	f005 fb5a 	bl	800fb60 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800a4ac:	200a      	movs	r0, #10
 800a4ae:	f005 fb83 	bl	800fbb8 <HAL_NVIC_EnableIRQ>
			break;
 800a4b2:	e7db      	b.n	800a46c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800a4b4:	4a0e      	ldr	r2, [pc, #56]	; (800a4f0 <SetupDMAInterrupts+0xac>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d0e6      	beq.n	800a488 <SetupDMAInterrupts+0x44>
 800a4ba:	4a0e      	ldr	r2, [pc, #56]	; (800a4f4 <SetupDMAInterrupts+0xb0>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d1d5      	bne.n	800a46c <SetupDMAInterrupts+0x28>
 800a4c0:	e7e2      	b.n	800a488 <SetupDMAInterrupts+0x44>
 800a4c2:	4a0d      	ldr	r2, [pc, #52]	; (800a4f8 <SetupDMAInterrupts+0xb4>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d0ed      	beq.n	800a4a4 <SetupDMAInterrupts+0x60>
 800a4c8:	e7d0      	b.n	800a46c <SetupDMAInterrupts+0x28>
 800a4ca:	46c0      	nop			; (mov r8, r8)
 800a4cc:	4002006c 	.word	0x4002006c
 800a4d0:	40020030 	.word	0x40020030
 800a4d4:	40020008 	.word	0x40020008
 800a4d8:	4002041c 	.word	0x4002041c
 800a4dc:	40020444 	.word	0x40020444
 800a4e0:	40020458 	.word	0x40020458
 800a4e4:	40020430 	.word	0x40020430
 800a4e8:	40020080 	.word	0x40020080
 800a4ec:	40020408 	.word	0x40020408
 800a4f0:	40020044 	.word	0x40020044
 800a4f4:	40020058 	.word	0x40020058
 800a4f8:	4002001c 	.word	0x4002001c

0800a4fc <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 800a4fc:	6803      	ldr	r3, [r0, #0]
 800a4fe:	4a1b      	ldr	r2, [pc, #108]	; (800a56c <UnSetupDMAInterrupts+0x70>)
{
 800a500:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800a502:	4293      	cmp	r3, r2
 800a504:	d018      	beq.n	800a538 <UnSetupDMAInterrupts+0x3c>
 800a506:	d80a      	bhi.n	800a51e <UnSetupDMAInterrupts+0x22>
 800a508:	4a19      	ldr	r2, [pc, #100]	; (800a570 <UnSetupDMAInterrupts+0x74>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d01e      	beq.n	800a54c <UnSetupDMAInterrupts+0x50>
 800a50e:	d821      	bhi.n	800a554 <UnSetupDMAInterrupts+0x58>
 800a510:	4a18      	ldr	r2, [pc, #96]	; (800a574 <UnSetupDMAInterrupts+0x78>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d125      	bne.n	800a562 <UnSetupDMAInterrupts+0x66>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800a516:	2009      	movs	r0, #9
 800a518:	f005 fb58 	bl	800fbcc <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800a51c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800a51e:	4a16      	ldr	r2, [pc, #88]	; (800a578 <UnSetupDMAInterrupts+0x7c>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d013      	beq.n	800a54c <UnSetupDMAInterrupts+0x50>
 800a524:	d90c      	bls.n	800a540 <UnSetupDMAInterrupts+0x44>
 800a526:	4a15      	ldr	r2, [pc, #84]	; (800a57c <UnSetupDMAInterrupts+0x80>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d005      	beq.n	800a538 <UnSetupDMAInterrupts+0x3c>
 800a52c:	4a14      	ldr	r2, [pc, #80]	; (800a580 <UnSetupDMAInterrupts+0x84>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d002      	beq.n	800a538 <UnSetupDMAInterrupts+0x3c>
 800a532:	4a14      	ldr	r2, [pc, #80]	; (800a584 <UnSetupDMAInterrupts+0x88>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d1f1      	bne.n	800a51c <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800a538:	200b      	movs	r0, #11
 800a53a:	f005 fb47 	bl	800fbcc <HAL_NVIC_DisableIRQ>
}
 800a53e:	e7ed      	b.n	800a51c <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800a540:	4a11      	ldr	r2, [pc, #68]	; (800a588 <UnSetupDMAInterrupts+0x8c>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d0f8      	beq.n	800a538 <UnSetupDMAInterrupts+0x3c>
 800a546:	4a11      	ldr	r2, [pc, #68]	; (800a58c <UnSetupDMAInterrupts+0x90>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d1e7      	bne.n	800a51c <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800a54c:	200a      	movs	r0, #10
 800a54e:	f005 fb3d 	bl	800fbcc <HAL_NVIC_DisableIRQ>
			break;
 800a552:	e7e3      	b.n	800a51c <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800a554:	4a0e      	ldr	r2, [pc, #56]	; (800a590 <UnSetupDMAInterrupts+0x94>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d0ee      	beq.n	800a538 <UnSetupDMAInterrupts+0x3c>
 800a55a:	4a0e      	ldr	r2, [pc, #56]	; (800a594 <UnSetupDMAInterrupts+0x98>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d1dd      	bne.n	800a51c <UnSetupDMAInterrupts+0x20>
 800a560:	e7ea      	b.n	800a538 <UnSetupDMAInterrupts+0x3c>
 800a562:	4a0d      	ldr	r2, [pc, #52]	; (800a598 <UnSetupDMAInterrupts+0x9c>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d0f1      	beq.n	800a54c <UnSetupDMAInterrupts+0x50>
 800a568:	e7d8      	b.n	800a51c <UnSetupDMAInterrupts+0x20>
 800a56a:	46c0      	nop			; (mov r8, r8)
 800a56c:	4002006c 	.word	0x4002006c
 800a570:	40020030 	.word	0x40020030
 800a574:	40020008 	.word	0x40020008
 800a578:	4002041c 	.word	0x4002041c
 800a57c:	40020444 	.word	0x40020444
 800a580:	40020458 	.word	0x40020458
 800a584:	40020430 	.word	0x40020430
 800a588:	40020080 	.word	0x40020080
 800a58c:	40020408 	.word	0x40020408
 800a590:	40020044 	.word	0x40020044
 800a594:	40020058 	.word	0x40020058
 800a598:	4002001c 	.word	0x4002001c

0800a59c <DMA_MSG_TX_UnSetup>:
{	
 800a59c:	b510      	push	{r4, lr}
 800a59e:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800a5a0:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800a5a2:	f7ff ffab 	bl	800a4fc <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a5aa:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800a5ac:	6623      	str	r3, [r4, #96]	; 0x60
}
 800a5ae:	bd10      	pop	{r4, pc}

0800a5b0 <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a5b0:	6803      	ldr	r3, [r0, #0]
 800a5b2:	4ac6      	ldr	r2, [pc, #792]	; (800a8cc <RemapAndLinkDMAtoUARTRx+0x31c>)
{
 800a5b4:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d03a      	beq.n	800a630 <RemapAndLinkDMAtoUARTRx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800a5ba:	4ac5      	ldr	r2, [pc, #788]	; (800a8d0 <RemapAndLinkDMAtoUARTRx+0x320>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d058      	beq.n	800a672 <RemapAndLinkDMAtoUARTRx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800a5c0:	4ac4      	ldr	r2, [pc, #784]	; (800a8d4 <RemapAndLinkDMAtoUARTRx+0x324>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d100      	bne.n	800a5c8 <RemapAndLinkDMAtoUARTRx+0x18>
 800a5c6:	e093      	b.n	800a6f0 <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800a5c8:	4ac3      	ldr	r2, [pc, #780]	; (800a8d8 <RemapAndLinkDMAtoUARTRx+0x328>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d100      	bne.n	800a5d0 <RemapAndLinkDMAtoUARTRx+0x20>
 800a5ce:	e0c0      	b.n	800a752 <RemapAndLinkDMAtoUARTRx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800a5d0:	4ac2      	ldr	r2, [pc, #776]	; (800a8dc <RemapAndLinkDMAtoUARTRx+0x32c>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d100      	bne.n	800a5d8 <RemapAndLinkDMAtoUARTRx+0x28>
 800a5d6:	e19d      	b.n	800a914 <RemapAndLinkDMAtoUARTRx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800a5d8:	4ac1      	ldr	r2, [pc, #772]	; (800a8e0 <RemapAndLinkDMAtoUARTRx+0x330>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d100      	bne.n	800a5e0 <RemapAndLinkDMAtoUARTRx+0x30>
 800a5de:	e1b9      	b.n	800a954 <RemapAndLinkDMAtoUARTRx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800a5e0:	4ac0      	ldr	r2, [pc, #768]	; (800a8e4 <RemapAndLinkDMAtoUARTRx+0x334>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d000      	beq.n	800a5e8 <RemapAndLinkDMAtoUARTRx+0x38>
 800a5e6:	e265      	b.n	800aab4 <RemapAndLinkDMAtoUARTRx+0x504>
 800a5e8:	680b      	ldr	r3, [r1, #0]
 800a5ea:	4abf      	ldr	r2, [pc, #764]	; (800a8e8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d100      	bne.n	800a5f2 <RemapAndLinkDMAtoUARTRx+0x42>
 800a5f0:	e230      	b.n	800aa54 <RemapAndLinkDMAtoUARTRx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800a5f2:	4abe      	ldr	r2, [pc, #760]	; (800a8ec <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d100      	bne.n	800a5fa <RemapAndLinkDMAtoUARTRx+0x4a>
 800a5f8:	e237      	b.n	800aa6a <RemapAndLinkDMAtoUARTRx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800a5fa:	4abd      	ldr	r2, [pc, #756]	; (800a8f0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d100      	bne.n	800a602 <RemapAndLinkDMAtoUARTRx+0x52>
 800a600:	e235      	b.n	800aa6e <RemapAndLinkDMAtoUARTRx+0x4be>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800a602:	4abc      	ldr	r2, [pc, #752]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d100      	bne.n	800a60a <RemapAndLinkDMAtoUARTRx+0x5a>
 800a608:	e23d      	b.n	800aa86 <RemapAndLinkDMAtoUARTRx+0x4d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800a60a:	4abb      	ldr	r2, [pc, #748]	; (800a8f8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d100      	bne.n	800a612 <RemapAndLinkDMAtoUARTRx+0x62>
 800a610:	e245      	b.n	800aa9e <RemapAndLinkDMAtoUARTRx+0x4ee>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800a612:	4aba      	ldr	r2, [pc, #744]	; (800a8fc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d145      	bne.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800a618:	4ab9      	ldr	r2, [pc, #740]	; (800a900 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a61a:	23a8      	movs	r3, #168	; 0xa8
 800a61c:	4db9      	ldr	r5, [pc, #740]	; (800a904 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a61e:	58d4      	ldr	r4, [r2, r3]
 800a620:	402c      	ands	r4, r5
 800a622:	50d4      	str	r4, [r2, r3]
 800a624:	24e0      	movs	r4, #224	; 0xe0
 800a626:	58d5      	ldr	r5, [r2, r3]
 800a628:	0124      	lsls	r4, r4, #4
 800a62a:	432c      	orrs	r4, r5
 800a62c:	50d4      	str	r4, [r2, r3]
 800a62e:	e039      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a630:	680b      	ldr	r3, [r1, #0]
 800a632:	4aad      	ldr	r2, [pc, #692]	; (800a8e8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d100      	bne.n	800a63a <RemapAndLinkDMAtoUARTRx+0x8a>
 800a638:	e07e      	b.n	800a738 <RemapAndLinkDMAtoUARTRx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800a63a:	4aac      	ldr	r2, [pc, #688]	; (800a8ec <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d100      	bne.n	800a642 <RemapAndLinkDMAtoUARTRx+0x92>
 800a640:	e085      	b.n	800a74e <RemapAndLinkDMAtoUARTRx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800a642:	4aab      	ldr	r2, [pc, #684]	; (800a8f0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d030      	beq.n	800a6aa <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800a648:	4aaa      	ldr	r2, [pc, #680]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d039      	beq.n	800a6c2 <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800a64e:	4aaa      	ldr	r2, [pc, #680]	; (800a8f8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d042      	beq.n	800a6da <RemapAndLinkDMAtoUARTRx+0x12a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800a654:	4aa9      	ldr	r2, [pc, #676]	; (800a8fc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d124      	bne.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800a65a:	4aa9      	ldr	r2, [pc, #676]	; (800a900 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a65c:	23a8      	movs	r3, #168	; 0xa8
 800a65e:	4da9      	ldr	r5, [pc, #676]	; (800a904 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a660:	58d4      	ldr	r4, [r2, r3]
 800a662:	402c      	ands	r4, r5
 800a664:	50d4      	str	r4, [r2, r3]
 800a666:	2480      	movs	r4, #128	; 0x80
 800a668:	58d5      	ldr	r5, [r2, r3]
 800a66a:	0124      	lsls	r4, r4, #4
 800a66c:	432c      	orrs	r4, r5
 800a66e:	50d4      	str	r4, [r2, r3]
 800a670:	e018      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800a672:	680b      	ldr	r3, [r1, #0]
 800a674:	4a9c      	ldr	r2, [pc, #624]	; (800a8e8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d100      	bne.n	800a67c <RemapAndLinkDMAtoUARTRx+0xcc>
 800a67a:	e0b0      	b.n	800a7de <RemapAndLinkDMAtoUARTRx+0x22e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800a67c:	4a9b      	ldr	r2, [pc, #620]	; (800a8ec <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d100      	bne.n	800a684 <RemapAndLinkDMAtoUARTRx+0xd4>
 800a682:	e0b7      	b.n	800a7f4 <RemapAndLinkDMAtoUARTRx+0x244>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800a684:	4a9a      	ldr	r2, [pc, #616]	; (800a8f0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d100      	bne.n	800a68c <RemapAndLinkDMAtoUARTRx+0xdc>
 800a68a:	e0bf      	b.n	800a80c <RemapAndLinkDMAtoUARTRx+0x25c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800a68c:	4a99      	ldr	r2, [pc, #612]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d100      	bne.n	800a694 <RemapAndLinkDMAtoUARTRx+0xe4>
 800a692:	e0c7      	b.n	800a824 <RemapAndLinkDMAtoUARTRx+0x274>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800a694:	4a98      	ldr	r2, [pc, #608]	; (800a8f8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d100      	bne.n	800a69c <RemapAndLinkDMAtoUARTRx+0xec>
 800a69a:	e0cf      	b.n	800a83c <RemapAndLinkDMAtoUARTRx+0x28c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800a69c:	4a97      	ldr	r2, [pc, #604]	; (800a8fc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d100      	bne.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
 800a6a2:	e0d6      	b.n	800a852 <RemapAndLinkDMAtoUARTRx+0x2a2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800a6a4:	6641      	str	r1, [r0, #100]	; 0x64
 800a6a6:	6248      	str	r0, [r1, #36]	; 0x24
}
 800a6a8:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800a6aa:	23a8      	movs	r3, #168	; 0xa8
 800a6ac:	4a96      	ldr	r2, [pc, #600]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a6ae:	4d97      	ldr	r5, [pc, #604]	; (800a90c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a6b0:	58d4      	ldr	r4, [r2, r3]
 800a6b2:	402c      	ands	r4, r5
 800a6b4:	50d4      	str	r4, [r2, r3]
 800a6b6:	2480      	movs	r4, #128	; 0x80
 800a6b8:	58d5      	ldr	r5, [r2, r3]
 800a6ba:	0324      	lsls	r4, r4, #12
 800a6bc:	432c      	orrs	r4, r5
 800a6be:	50d4      	str	r4, [r2, r3]
 800a6c0:	e7f0      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800a6c2:	23a8      	movs	r3, #168	; 0xa8
 800a6c4:	4a90      	ldr	r2, [pc, #576]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a6c6:	4d92      	ldr	r5, [pc, #584]	; (800a910 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a6c8:	58d4      	ldr	r4, [r2, r3]
 800a6ca:	402c      	ands	r4, r5
 800a6cc:	50d4      	str	r4, [r2, r3]
 800a6ce:	2480      	movs	r4, #128	; 0x80
 800a6d0:	58d5      	ldr	r5, [r2, r3]
 800a6d2:	0424      	lsls	r4, r4, #16
 800a6d4:	432c      	orrs	r4, r5
 800a6d6:	50d4      	str	r4, [r2, r3]
 800a6d8:	e7e4      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800a6da:	23a8      	movs	r3, #168	; 0xa8
 800a6dc:	25f0      	movs	r5, #240	; 0xf0
 800a6de:	4a88      	ldr	r2, [pc, #544]	; (800a900 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a6e0:	58d4      	ldr	r4, [r2, r3]
 800a6e2:	43ac      	bics	r4, r5
 800a6e4:	50d4      	str	r4, [r2, r3]
 800a6e6:	58d4      	ldr	r4, [r2, r3]
 800a6e8:	3d70      	subs	r5, #112	; 0x70
 800a6ea:	432c      	orrs	r4, r5
 800a6ec:	50d4      	str	r4, [r2, r3]
 800a6ee:	e7d9      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800a6f0:	680b      	ldr	r3, [r1, #0]
 800a6f2:	4a7d      	ldr	r2, [pc, #500]	; (800a8e8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d100      	bne.n	800a6fa <RemapAndLinkDMAtoUARTRx+0x14a>
 800a6f8:	e0ad      	b.n	800a856 <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800a6fa:	4a7c      	ldr	r2, [pc, #496]	; (800a8ec <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d100      	bne.n	800a702 <RemapAndLinkDMAtoUARTRx+0x152>
 800a700:	e0b4      	b.n	800a86c <RemapAndLinkDMAtoUARTRx+0x2bc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800a702:	4a7b      	ldr	r2, [pc, #492]	; (800a8f0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d100      	bne.n	800a70a <RemapAndLinkDMAtoUARTRx+0x15a>
 800a708:	e0b2      	b.n	800a870 <RemapAndLinkDMAtoUARTRx+0x2c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800a70a:	4a7a      	ldr	r2, [pc, #488]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d100      	bne.n	800a712 <RemapAndLinkDMAtoUARTRx+0x162>
 800a710:	e0ba      	b.n	800a888 <RemapAndLinkDMAtoUARTRx+0x2d8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800a712:	4a79      	ldr	r2, [pc, #484]	; (800a8f8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d100      	bne.n	800a71a <RemapAndLinkDMAtoUARTRx+0x16a>
 800a718:	e0c2      	b.n	800a8a0 <RemapAndLinkDMAtoUARTRx+0x2f0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800a71a:	4a78      	ldr	r2, [pc, #480]	; (800a8fc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d1c1      	bne.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800a720:	4a77      	ldr	r2, [pc, #476]	; (800a900 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a722:	23a8      	movs	r3, #168	; 0xa8
 800a724:	4d77      	ldr	r5, [pc, #476]	; (800a904 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a726:	58d4      	ldr	r4, [r2, r3]
 800a728:	402c      	ands	r4, r5
 800a72a:	50d4      	str	r4, [r2, r3]
 800a72c:	24a0      	movs	r4, #160	; 0xa0
 800a72e:	58d5      	ldr	r5, [r2, r3]
 800a730:	0124      	lsls	r4, r4, #4
 800a732:	432c      	orrs	r4, r5
 800a734:	50d4      	str	r4, [r2, r3]
 800a736:	e7b5      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800a738:	23a8      	movs	r3, #168	; 0xa8
 800a73a:	250f      	movs	r5, #15
 800a73c:	4a72      	ldr	r2, [pc, #456]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a73e:	58d4      	ldr	r4, [r2, r3]
 800a740:	43ac      	bics	r4, r5
 800a742:	50d4      	str	r4, [r2, r3]
 800a744:	58d4      	ldr	r4, [r2, r3]
 800a746:	3d07      	subs	r5, #7
 800a748:	432c      	orrs	r4, r5
 800a74a:	50d4      	str	r4, [r2, r3]
 800a74c:	e7aa      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800a74e:	4a6e      	ldr	r2, [pc, #440]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a750:	e784      	b.n	800a65c <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800a752:	680b      	ldr	r3, [r1, #0]
 800a754:	4a64      	ldr	r2, [pc, #400]	; (800a8e8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d01c      	beq.n	800a794 <RemapAndLinkDMAtoUARTRx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800a75a:	4a64      	ldr	r2, [pc, #400]	; (800a8ec <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d024      	beq.n	800a7aa <RemapAndLinkDMAtoUARTRx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800a760:	4a63      	ldr	r2, [pc, #396]	; (800a8f0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d023      	beq.n	800a7ae <RemapAndLinkDMAtoUARTRx+0x1fe>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800a766:	4a63      	ldr	r2, [pc, #396]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d02c      	beq.n	800a7c6 <RemapAndLinkDMAtoUARTRx+0x216>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800a76c:	4a62      	ldr	r2, [pc, #392]	; (800a8f8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d100      	bne.n	800a774 <RemapAndLinkDMAtoUARTRx+0x1c4>
 800a772:	e0a0      	b.n	800a8b6 <RemapAndLinkDMAtoUARTRx+0x306>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800a774:	4a61      	ldr	r2, [pc, #388]	; (800a8fc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d000      	beq.n	800a77c <RemapAndLinkDMAtoUARTRx+0x1cc>
 800a77a:	e793      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800a77c:	4a60      	ldr	r2, [pc, #384]	; (800a900 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a77e:	23a8      	movs	r3, #168	; 0xa8
 800a780:	4d60      	ldr	r5, [pc, #384]	; (800a904 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a782:	58d4      	ldr	r4, [r2, r3]
 800a784:	402c      	ands	r4, r5
 800a786:	50d4      	str	r4, [r2, r3]
 800a788:	24b0      	movs	r4, #176	; 0xb0
 800a78a:	58d5      	ldr	r5, [r2, r3]
 800a78c:	0124      	lsls	r4, r4, #4
 800a78e:	432c      	orrs	r4, r5
 800a790:	50d4      	str	r4, [r2, r3]
 800a792:	e787      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800a794:	23a8      	movs	r3, #168	; 0xa8
 800a796:	250f      	movs	r5, #15
 800a798:	4a5b      	ldr	r2, [pc, #364]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a79a:	58d4      	ldr	r4, [r2, r3]
 800a79c:	43ac      	bics	r4, r5
 800a79e:	50d4      	str	r4, [r2, r3]
 800a7a0:	58d4      	ldr	r4, [r2, r3]
 800a7a2:	3d04      	subs	r5, #4
 800a7a4:	432c      	orrs	r4, r5
 800a7a6:	50d4      	str	r4, [r2, r3]
 800a7a8:	e77c      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800a7aa:	4a57      	ldr	r2, [pc, #348]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a7ac:	e7e7      	b.n	800a77e <RemapAndLinkDMAtoUARTRx+0x1ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800a7ae:	23a8      	movs	r3, #168	; 0xa8
 800a7b0:	4a55      	ldr	r2, [pc, #340]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a7b2:	4d56      	ldr	r5, [pc, #344]	; (800a90c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a7b4:	58d4      	ldr	r4, [r2, r3]
 800a7b6:	402c      	ands	r4, r5
 800a7b8:	50d4      	str	r4, [r2, r3]
 800a7ba:	24b0      	movs	r4, #176	; 0xb0
 800a7bc:	58d5      	ldr	r5, [r2, r3]
 800a7be:	0324      	lsls	r4, r4, #12
 800a7c0:	432c      	orrs	r4, r5
 800a7c2:	50d4      	str	r4, [r2, r3]
 800a7c4:	e76e      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800a7c6:	23a8      	movs	r3, #168	; 0xa8
 800a7c8:	4a4f      	ldr	r2, [pc, #316]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a7ca:	4d51      	ldr	r5, [pc, #324]	; (800a910 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a7cc:	58d4      	ldr	r4, [r2, r3]
 800a7ce:	402c      	ands	r4, r5
 800a7d0:	50d4      	str	r4, [r2, r3]
 800a7d2:	24b0      	movs	r4, #176	; 0xb0
 800a7d4:	58d5      	ldr	r5, [r2, r3]
 800a7d6:	0424      	lsls	r4, r4, #16
 800a7d8:	432c      	orrs	r4, r5
 800a7da:	50d4      	str	r4, [r2, r3]
 800a7dc:	e762      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800a7de:	23a8      	movs	r3, #168	; 0xa8
 800a7e0:	250f      	movs	r5, #15
 800a7e2:	4a49      	ldr	r2, [pc, #292]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a7e4:	58d4      	ldr	r4, [r2, r3]
 800a7e6:	43ac      	bics	r4, r5
 800a7e8:	50d4      	str	r4, [r2, r3]
 800a7ea:	58d4      	ldr	r4, [r2, r3]
 800a7ec:	3d06      	subs	r5, #6
 800a7ee:	432c      	orrs	r4, r5
 800a7f0:	50d4      	str	r4, [r2, r3]
 800a7f2:	e757      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800a7f4:	4a44      	ldr	r2, [pc, #272]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800a7f6:	23a8      	movs	r3, #168	; 0xa8
 800a7f8:	4d42      	ldr	r5, [pc, #264]	; (800a904 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a7fa:	58d4      	ldr	r4, [r2, r3]
 800a7fc:	402c      	ands	r4, r5
 800a7fe:	50d4      	str	r4, [r2, r3]
 800a800:	2490      	movs	r4, #144	; 0x90
 800a802:	58d5      	ldr	r5, [r2, r3]
 800a804:	0124      	lsls	r4, r4, #4
 800a806:	432c      	orrs	r4, r5
 800a808:	50d4      	str	r4, [r2, r3]
 800a80a:	e74b      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800a80c:	23a8      	movs	r3, #168	; 0xa8
 800a80e:	4a3e      	ldr	r2, [pc, #248]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a810:	4d3e      	ldr	r5, [pc, #248]	; (800a90c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a812:	58d4      	ldr	r4, [r2, r3]
 800a814:	402c      	ands	r4, r5
 800a816:	50d4      	str	r4, [r2, r3]
 800a818:	2490      	movs	r4, #144	; 0x90
 800a81a:	58d5      	ldr	r5, [r2, r3]
 800a81c:	0324      	lsls	r4, r4, #12
 800a81e:	432c      	orrs	r4, r5
 800a820:	50d4      	str	r4, [r2, r3]
 800a822:	e73f      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800a824:	23a8      	movs	r3, #168	; 0xa8
 800a826:	4a38      	ldr	r2, [pc, #224]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a828:	4d39      	ldr	r5, [pc, #228]	; (800a910 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a82a:	58d4      	ldr	r4, [r2, r3]
 800a82c:	402c      	ands	r4, r5
 800a82e:	50d4      	str	r4, [r2, r3]
 800a830:	2490      	movs	r4, #144	; 0x90
 800a832:	58d5      	ldr	r5, [r2, r3]
 800a834:	0424      	lsls	r4, r4, #16
 800a836:	432c      	orrs	r4, r5
 800a838:	50d4      	str	r4, [r2, r3]
 800a83a:	e733      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800a83c:	23a8      	movs	r3, #168	; 0xa8
 800a83e:	25f0      	movs	r5, #240	; 0xf0
 800a840:	4a2f      	ldr	r2, [pc, #188]	; (800a900 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a842:	58d4      	ldr	r4, [r2, r3]
 800a844:	43ac      	bics	r4, r5
 800a846:	50d4      	str	r4, [r2, r3]
 800a848:	58d4      	ldr	r4, [r2, r3]
 800a84a:	3d60      	subs	r5, #96	; 0x60
 800a84c:	432c      	orrs	r4, r5
 800a84e:	50d4      	str	r4, [r2, r3]
 800a850:	e728      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800a852:	4a2b      	ldr	r2, [pc, #172]	; (800a900 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a854:	e7cf      	b.n	800a7f6 <RemapAndLinkDMAtoUARTRx+0x246>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800a856:	23a8      	movs	r3, #168	; 0xa8
 800a858:	250f      	movs	r5, #15
 800a85a:	4a2b      	ldr	r2, [pc, #172]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a85c:	58d4      	ldr	r4, [r2, r3]
 800a85e:	43ac      	bics	r4, r5
 800a860:	50d4      	str	r4, [r2, r3]
 800a862:	58d4      	ldr	r4, [r2, r3]
 800a864:	3d05      	subs	r5, #5
 800a866:	432c      	orrs	r4, r5
 800a868:	50d4      	str	r4, [r2, r3]
 800a86a:	e71b      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800a86c:	4a26      	ldr	r2, [pc, #152]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a86e:	e758      	b.n	800a722 <RemapAndLinkDMAtoUARTRx+0x172>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800a870:	23a8      	movs	r3, #168	; 0xa8
 800a872:	4a25      	ldr	r2, [pc, #148]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a874:	4d25      	ldr	r5, [pc, #148]	; (800a90c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a876:	58d4      	ldr	r4, [r2, r3]
 800a878:	402c      	ands	r4, r5
 800a87a:	50d4      	str	r4, [r2, r3]
 800a87c:	24a0      	movs	r4, #160	; 0xa0
 800a87e:	58d5      	ldr	r5, [r2, r3]
 800a880:	0324      	lsls	r4, r4, #12
 800a882:	432c      	orrs	r4, r5
 800a884:	50d4      	str	r4, [r2, r3]
 800a886:	e70d      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800a888:	23a8      	movs	r3, #168	; 0xa8
 800a88a:	4a1f      	ldr	r2, [pc, #124]	; (800a908 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a88c:	4d20      	ldr	r5, [pc, #128]	; (800a910 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a88e:	58d4      	ldr	r4, [r2, r3]
 800a890:	402c      	ands	r4, r5
 800a892:	50d4      	str	r4, [r2, r3]
 800a894:	24a0      	movs	r4, #160	; 0xa0
 800a896:	58d5      	ldr	r5, [r2, r3]
 800a898:	0424      	lsls	r4, r4, #16
 800a89a:	432c      	orrs	r4, r5
 800a89c:	50d4      	str	r4, [r2, r3]
 800a89e:	e701      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800a8a0:	23a8      	movs	r3, #168	; 0xa8
 800a8a2:	25f0      	movs	r5, #240	; 0xf0
 800a8a4:	4a16      	ldr	r2, [pc, #88]	; (800a900 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a8a6:	58d4      	ldr	r4, [r2, r3]
 800a8a8:	43ac      	bics	r4, r5
 800a8aa:	50d4      	str	r4, [r2, r3]
 800a8ac:	58d4      	ldr	r4, [r2, r3]
 800a8ae:	3d50      	subs	r5, #80	; 0x50
 800a8b0:	432c      	orrs	r4, r5
 800a8b2:	50d4      	str	r4, [r2, r3]
 800a8b4:	e6f6      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800a8b6:	23a8      	movs	r3, #168	; 0xa8
 800a8b8:	25f0      	movs	r5, #240	; 0xf0
 800a8ba:	4a11      	ldr	r2, [pc, #68]	; (800a900 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a8bc:	58d4      	ldr	r4, [r2, r3]
 800a8be:	43ac      	bics	r4, r5
 800a8c0:	50d4      	str	r4, [r2, r3]
 800a8c2:	58d4      	ldr	r4, [r2, r3]
 800a8c4:	3d40      	subs	r5, #64	; 0x40
 800a8c6:	432c      	orrs	r4, r5
 800a8c8:	50d4      	str	r4, [r2, r3]
 800a8ca:	e6eb      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
 800a8cc:	40013800 	.word	0x40013800
 800a8d0:	40004400 	.word	0x40004400
 800a8d4:	40004800 	.word	0x40004800
 800a8d8:	40004c00 	.word	0x40004c00
 800a8dc:	40005000 	.word	0x40005000
 800a8e0:	40011400 	.word	0x40011400
 800a8e4:	40011800 	.word	0x40011800
 800a8e8:	40020008 	.word	0x40020008
 800a8ec:	40020030 	.word	0x40020030
 800a8f0:	40020058 	.word	0x40020058
 800a8f4:	4002006c 	.word	0x4002006c
 800a8f8:	4002041c 	.word	0x4002041c
 800a8fc:	40020430 	.word	0x40020430
 800a900:	40020400 	.word	0x40020400
 800a904:	fffff0ff 	.word	0xfffff0ff
 800a908:	40020000 	.word	0x40020000
 800a90c:	fff0ffff 	.word	0xfff0ffff
 800a910:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800a914:	680b      	ldr	r3, [r1, #0]
 800a916:	4a8e      	ldr	r2, [pc, #568]	; (800ab50 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d03b      	beq.n	800a994 <RemapAndLinkDMAtoUARTRx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800a91c:	4a8d      	ldr	r2, [pc, #564]	; (800ab54 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d043      	beq.n	800a9aa <RemapAndLinkDMAtoUARTRx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800a922:	4a8d      	ldr	r2, [pc, #564]	; (800ab58 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d042      	beq.n	800a9ae <RemapAndLinkDMAtoUARTRx+0x3fe>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800a928:	4a8c      	ldr	r2, [pc, #560]	; (800ab5c <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d04b      	beq.n	800a9c6 <RemapAndLinkDMAtoUARTRx+0x416>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800a92e:	4a8c      	ldr	r2, [pc, #560]	; (800ab60 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d054      	beq.n	800a9de <RemapAndLinkDMAtoUARTRx+0x42e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800a934:	4a8b      	ldr	r2, [pc, #556]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d000      	beq.n	800a93c <RemapAndLinkDMAtoUARTRx+0x38c>
 800a93a:	e6b3      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800a93c:	4a8a      	ldr	r2, [pc, #552]	; (800ab68 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a93e:	23a8      	movs	r3, #168	; 0xa8
 800a940:	4d8a      	ldr	r5, [pc, #552]	; (800ab6c <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800a942:	58d4      	ldr	r4, [r2, r3]
 800a944:	402c      	ands	r4, r5
 800a946:	50d4      	str	r4, [r2, r3]
 800a948:	24c0      	movs	r4, #192	; 0xc0
 800a94a:	58d5      	ldr	r5, [r2, r3]
 800a94c:	0124      	lsls	r4, r4, #4
 800a94e:	432c      	orrs	r4, r5
 800a950:	50d4      	str	r4, [r2, r3]
 800a952:	e6a7      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800a954:	680b      	ldr	r3, [r1, #0]
 800a956:	4a7e      	ldr	r2, [pc, #504]	; (800ab50 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d04b      	beq.n	800a9f4 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800a95c:	4a7d      	ldr	r2, [pc, #500]	; (800ab54 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d053      	beq.n	800aa0a <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800a962:	4a7d      	ldr	r2, [pc, #500]	; (800ab58 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d052      	beq.n	800aa0e <RemapAndLinkDMAtoUARTRx+0x45e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800a968:	4a7c      	ldr	r2, [pc, #496]	; (800ab5c <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d05b      	beq.n	800aa26 <RemapAndLinkDMAtoUARTRx+0x476>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800a96e:	4a7c      	ldr	r2, [pc, #496]	; (800ab60 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d064      	beq.n	800aa3e <RemapAndLinkDMAtoUARTRx+0x48e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800a974:	4a7b      	ldr	r2, [pc, #492]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d000      	beq.n	800a97c <RemapAndLinkDMAtoUARTRx+0x3cc>
 800a97a:	e693      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800a97c:	4a7a      	ldr	r2, [pc, #488]	; (800ab68 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a97e:	23a8      	movs	r3, #168	; 0xa8
 800a980:	4d7a      	ldr	r5, [pc, #488]	; (800ab6c <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800a982:	58d4      	ldr	r4, [r2, r3]
 800a984:	402c      	ands	r4, r5
 800a986:	50d4      	str	r4, [r2, r3]
 800a988:	24d0      	movs	r4, #208	; 0xd0
 800a98a:	58d5      	ldr	r5, [r2, r3]
 800a98c:	0124      	lsls	r4, r4, #4
 800a98e:	432c      	orrs	r4, r5
 800a990:	50d4      	str	r4, [r2, r3]
 800a992:	e687      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800a994:	23a8      	movs	r3, #168	; 0xa8
 800a996:	250f      	movs	r5, #15
 800a998:	4a75      	ldr	r2, [pc, #468]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a99a:	58d4      	ldr	r4, [r2, r3]
 800a99c:	43ac      	bics	r4, r5
 800a99e:	50d4      	str	r4, [r2, r3]
 800a9a0:	58d4      	ldr	r4, [r2, r3]
 800a9a2:	3d03      	subs	r5, #3
 800a9a4:	432c      	orrs	r4, r5
 800a9a6:	50d4      	str	r4, [r2, r3]
 800a9a8:	e67c      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800a9aa:	4a71      	ldr	r2, [pc, #452]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a9ac:	e7c7      	b.n	800a93e <RemapAndLinkDMAtoUARTRx+0x38e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800a9ae:	23a8      	movs	r3, #168	; 0xa8
 800a9b0:	4a6f      	ldr	r2, [pc, #444]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a9b2:	4d70      	ldr	r5, [pc, #448]	; (800ab74 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a9b4:	58d4      	ldr	r4, [r2, r3]
 800a9b6:	402c      	ands	r4, r5
 800a9b8:	50d4      	str	r4, [r2, r3]
 800a9ba:	24c0      	movs	r4, #192	; 0xc0
 800a9bc:	58d5      	ldr	r5, [r2, r3]
 800a9be:	0324      	lsls	r4, r4, #12
 800a9c0:	432c      	orrs	r4, r5
 800a9c2:	50d4      	str	r4, [r2, r3]
 800a9c4:	e66e      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800a9c6:	23a8      	movs	r3, #168	; 0xa8
 800a9c8:	4a69      	ldr	r2, [pc, #420]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a9ca:	4d6b      	ldr	r5, [pc, #428]	; (800ab78 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a9cc:	58d4      	ldr	r4, [r2, r3]
 800a9ce:	402c      	ands	r4, r5
 800a9d0:	50d4      	str	r4, [r2, r3]
 800a9d2:	24c0      	movs	r4, #192	; 0xc0
 800a9d4:	58d5      	ldr	r5, [r2, r3]
 800a9d6:	0424      	lsls	r4, r4, #16
 800a9d8:	432c      	orrs	r4, r5
 800a9da:	50d4      	str	r4, [r2, r3]
 800a9dc:	e662      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800a9de:	23a8      	movs	r3, #168	; 0xa8
 800a9e0:	25f0      	movs	r5, #240	; 0xf0
 800a9e2:	4a61      	ldr	r2, [pc, #388]	; (800ab68 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a9e4:	58d4      	ldr	r4, [r2, r3]
 800a9e6:	43ac      	bics	r4, r5
 800a9e8:	50d4      	str	r4, [r2, r3]
 800a9ea:	58d4      	ldr	r4, [r2, r3]
 800a9ec:	3d30      	subs	r5, #48	; 0x30
 800a9ee:	432c      	orrs	r4, r5
 800a9f0:	50d4      	str	r4, [r2, r3]
 800a9f2:	e657      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800a9f4:	23a8      	movs	r3, #168	; 0xa8
 800a9f6:	250f      	movs	r5, #15
 800a9f8:	4a5d      	ldr	r2, [pc, #372]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a9fa:	58d4      	ldr	r4, [r2, r3]
 800a9fc:	43ac      	bics	r4, r5
 800a9fe:	50d4      	str	r4, [r2, r3]
 800aa00:	58d4      	ldr	r4, [r2, r3]
 800aa02:	3d02      	subs	r5, #2
 800aa04:	432c      	orrs	r4, r5
 800aa06:	50d4      	str	r4, [r2, r3]
 800aa08:	e64c      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800aa0a:	4a59      	ldr	r2, [pc, #356]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800aa0c:	e7b7      	b.n	800a97e <RemapAndLinkDMAtoUARTRx+0x3ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800aa0e:	23a8      	movs	r3, #168	; 0xa8
 800aa10:	4a57      	ldr	r2, [pc, #348]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800aa12:	4d58      	ldr	r5, [pc, #352]	; (800ab74 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800aa14:	58d4      	ldr	r4, [r2, r3]
 800aa16:	402c      	ands	r4, r5
 800aa18:	50d4      	str	r4, [r2, r3]
 800aa1a:	24d0      	movs	r4, #208	; 0xd0
 800aa1c:	58d5      	ldr	r5, [r2, r3]
 800aa1e:	0324      	lsls	r4, r4, #12
 800aa20:	432c      	orrs	r4, r5
 800aa22:	50d4      	str	r4, [r2, r3]
 800aa24:	e63e      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800aa26:	23a8      	movs	r3, #168	; 0xa8
 800aa28:	4a51      	ldr	r2, [pc, #324]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800aa2a:	4d53      	ldr	r5, [pc, #332]	; (800ab78 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800aa2c:	58d4      	ldr	r4, [r2, r3]
 800aa2e:	402c      	ands	r4, r5
 800aa30:	50d4      	str	r4, [r2, r3]
 800aa32:	24d0      	movs	r4, #208	; 0xd0
 800aa34:	58d5      	ldr	r5, [r2, r3]
 800aa36:	0424      	lsls	r4, r4, #16
 800aa38:	432c      	orrs	r4, r5
 800aa3a:	50d4      	str	r4, [r2, r3]
 800aa3c:	e632      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800aa3e:	23a8      	movs	r3, #168	; 0xa8
 800aa40:	25f0      	movs	r5, #240	; 0xf0
 800aa42:	4a49      	ldr	r2, [pc, #292]	; (800ab68 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800aa44:	58d4      	ldr	r4, [r2, r3]
 800aa46:	43ac      	bics	r4, r5
 800aa48:	50d4      	str	r4, [r2, r3]
 800aa4a:	58d4      	ldr	r4, [r2, r3]
 800aa4c:	3d20      	subs	r5, #32
 800aa4e:	432c      	orrs	r4, r5
 800aa50:	50d4      	str	r4, [r2, r3]
 800aa52:	e627      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800aa54:	23a8      	movs	r3, #168	; 0xa8
 800aa56:	250f      	movs	r5, #15
 800aa58:	4a45      	ldr	r2, [pc, #276]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800aa5a:	58d4      	ldr	r4, [r2, r3]
 800aa5c:	43ac      	bics	r4, r5
 800aa5e:	50d4      	str	r4, [r2, r3]
 800aa60:	58d4      	ldr	r4, [r2, r3]
 800aa62:	3d01      	subs	r5, #1
 800aa64:	432c      	orrs	r4, r5
 800aa66:	50d4      	str	r4, [r2, r3]
 800aa68:	e61c      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800aa6a:	4a41      	ldr	r2, [pc, #260]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800aa6c:	e5d5      	b.n	800a61a <RemapAndLinkDMAtoUARTRx+0x6a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800aa6e:	23a8      	movs	r3, #168	; 0xa8
 800aa70:	4a3f      	ldr	r2, [pc, #252]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800aa72:	4d40      	ldr	r5, [pc, #256]	; (800ab74 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800aa74:	58d4      	ldr	r4, [r2, r3]
 800aa76:	402c      	ands	r4, r5
 800aa78:	50d4      	str	r4, [r2, r3]
 800aa7a:	24e0      	movs	r4, #224	; 0xe0
 800aa7c:	58d5      	ldr	r5, [r2, r3]
 800aa7e:	0324      	lsls	r4, r4, #12
 800aa80:	432c      	orrs	r4, r5
 800aa82:	50d4      	str	r4, [r2, r3]
 800aa84:	e60e      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800aa86:	23a8      	movs	r3, #168	; 0xa8
 800aa88:	4a39      	ldr	r2, [pc, #228]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800aa8a:	4d3b      	ldr	r5, [pc, #236]	; (800ab78 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800aa8c:	58d4      	ldr	r4, [r2, r3]
 800aa8e:	402c      	ands	r4, r5
 800aa90:	50d4      	str	r4, [r2, r3]
 800aa92:	24e0      	movs	r4, #224	; 0xe0
 800aa94:	58d5      	ldr	r5, [r2, r3]
 800aa96:	0424      	lsls	r4, r4, #16
 800aa98:	432c      	orrs	r4, r5
 800aa9a:	50d4      	str	r4, [r2, r3]
 800aa9c:	e602      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800aa9e:	23a8      	movs	r3, #168	; 0xa8
 800aaa0:	25f0      	movs	r5, #240	; 0xf0
 800aaa2:	4a31      	ldr	r2, [pc, #196]	; (800ab68 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800aaa4:	58d4      	ldr	r4, [r2, r3]
 800aaa6:	43ac      	bics	r4, r5
 800aaa8:	50d4      	str	r4, [r2, r3]
 800aaaa:	58d4      	ldr	r4, [r2, r3]
 800aaac:	3d10      	subs	r5, #16
 800aaae:	432c      	orrs	r4, r5
 800aab0:	50d4      	str	r4, [r2, r3]
 800aab2:	e5f7      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800aab4:	4a31      	ldr	r2, [pc, #196]	; (800ab7c <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d000      	beq.n	800aabc <RemapAndLinkDMAtoUARTRx+0x50c>
 800aaba:	e5f3      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
 800aabc:	680b      	ldr	r3, [r1, #0]
 800aabe:	4a24      	ldr	r2, [pc, #144]	; (800ab50 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d01b      	beq.n	800aafc <RemapAndLinkDMAtoUARTRx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800aac4:	4a23      	ldr	r2, [pc, #140]	; (800ab54 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d022      	beq.n	800ab10 <RemapAndLinkDMAtoUARTRx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800aaca:	4a23      	ldr	r2, [pc, #140]	; (800ab58 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d021      	beq.n	800ab14 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800aad0:	4a22      	ldr	r2, [pc, #136]	; (800ab5c <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d02a      	beq.n	800ab2c <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800aad6:	4a22      	ldr	r2, [pc, #136]	; (800ab60 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d033      	beq.n	800ab44 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800aadc:	4a21      	ldr	r2, [pc, #132]	; (800ab64 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d000      	beq.n	800aae4 <RemapAndLinkDMAtoUARTRx+0x534>
 800aae2:	e5df      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800aae4:	4a20      	ldr	r2, [pc, #128]	; (800ab68 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800aae6:	23a8      	movs	r3, #168	; 0xa8
 800aae8:	4d20      	ldr	r5, [pc, #128]	; (800ab6c <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800aaea:	58d4      	ldr	r4, [r2, r3]
 800aaec:	402c      	ands	r4, r5
 800aaee:	50d4      	str	r4, [r2, r3]
 800aaf0:	24f0      	movs	r4, #240	; 0xf0
 800aaf2:	58d5      	ldr	r5, [r2, r3]
 800aaf4:	0124      	lsls	r4, r4, #4
 800aaf6:	432c      	orrs	r4, r5
 800aaf8:	50d4      	str	r4, [r2, r3]
 800aafa:	e5d3      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800aafc:	23a8      	movs	r3, #168	; 0xa8
 800aafe:	260f      	movs	r6, #15
 800ab00:	4a1b      	ldr	r2, [pc, #108]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ab02:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800ab04:	43b5      	bics	r5, r6
 800ab06:	50d5      	str	r5, [r2, r3]
 800ab08:	58d4      	ldr	r4, [r2, r3]
 800ab0a:	4334      	orrs	r4, r6
 800ab0c:	50d4      	str	r4, [r2, r3]
 800ab0e:	e5c9      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800ab10:	4a17      	ldr	r2, [pc, #92]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ab12:	e7e8      	b.n	800aae6 <RemapAndLinkDMAtoUARTRx+0x536>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800ab14:	23a8      	movs	r3, #168	; 0xa8
 800ab16:	4a16      	ldr	r2, [pc, #88]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ab18:	4d16      	ldr	r5, [pc, #88]	; (800ab74 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800ab1a:	58d4      	ldr	r4, [r2, r3]
 800ab1c:	402c      	ands	r4, r5
 800ab1e:	50d4      	str	r4, [r2, r3]
 800ab20:	24f0      	movs	r4, #240	; 0xf0
 800ab22:	58d5      	ldr	r5, [r2, r3]
 800ab24:	0324      	lsls	r4, r4, #12
 800ab26:	432c      	orrs	r4, r5
 800ab28:	50d4      	str	r4, [r2, r3]
 800ab2a:	e5bb      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800ab2c:	23a8      	movs	r3, #168	; 0xa8
 800ab2e:	4a10      	ldr	r2, [pc, #64]	; (800ab70 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ab30:	4d11      	ldr	r5, [pc, #68]	; (800ab78 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800ab32:	58d4      	ldr	r4, [r2, r3]
 800ab34:	402c      	ands	r4, r5
 800ab36:	50d4      	str	r4, [r2, r3]
 800ab38:	24f0      	movs	r4, #240	; 0xf0
 800ab3a:	58d5      	ldr	r5, [r2, r3]
 800ab3c:	0424      	lsls	r4, r4, #16
 800ab3e:	432c      	orrs	r4, r5
 800ab40:	50d4      	str	r4, [r2, r3]
 800ab42:	e5af      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800ab44:	23a8      	movs	r3, #168	; 0xa8
 800ab46:	4a08      	ldr	r2, [pc, #32]	; (800ab68 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800ab48:	26f0      	movs	r6, #240	; 0xf0
 800ab4a:	58d5      	ldr	r5, [r2, r3]
 800ab4c:	e7da      	b.n	800ab04 <RemapAndLinkDMAtoUARTRx+0x554>
 800ab4e:	46c0      	nop			; (mov r8, r8)
 800ab50:	40020008 	.word	0x40020008
 800ab54:	40020030 	.word	0x40020030
 800ab58:	40020058 	.word	0x40020058
 800ab5c:	4002006c 	.word	0x4002006c
 800ab60:	4002041c 	.word	0x4002041c
 800ab64:	40020430 	.word	0x40020430
 800ab68:	40020400 	.word	0x40020400
 800ab6c:	fffff0ff 	.word	0xfffff0ff
 800ab70:	40020000 	.word	0x40020000
 800ab74:	fff0ffff 	.word	0xfff0ffff
 800ab78:	ff0fffff 	.word	0xff0fffff
 800ab7c:	40011c00 	.word	0x40011c00

0800ab80 <DMA_MSG_RX_Setup>:
{	
 800ab80:	b570      	push	{r4, r5, r6, lr}
 800ab82:	000d      	movs	r5, r1
 800ab84:	0004      	movs	r4, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800ab86:	f7ff fd13 	bl	800a5b0 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800ab8a:	0028      	movs	r0, r5
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	f7ff fc59 	bl	800a444 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800ab92:	0020      	movs	r0, r4
 800ab94:	f7ff fa1c 	bl	8009fd0 <GetPort>
 800ab98:	3801      	subs	r0, #1
 800ab9a:	0041      	lsls	r1, r0, #1
 800ab9c:	1809      	adds	r1, r1, r0
 800ab9e:	4804      	ldr	r0, [pc, #16]	; (800abb0 <DMA_MSG_RX_Setup+0x30>)
 800aba0:	0189      	lsls	r1, r1, #6
 800aba2:	1809      	adds	r1, r1, r0
 800aba4:	22c0      	movs	r2, #192	; 0xc0
 800aba6:	0020      	movs	r0, r4
 800aba8:	f007 f9cc 	bl	8011f44 <HAL_UART_Receive_DMA>
}
 800abac:	bd70      	pop	{r4, r5, r6, pc}
 800abae:	46c0      	nop			; (mov r8, r8)
 800abb0:	20001350 	.word	0x20001350

0800abb4 <SetupMessagingRxDMAs>:
{	
 800abb4:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800abb6:	4c14      	ldr	r4, [pc, #80]	; (800ac08 <SetupMessagingRxDMAs+0x54>)
 800abb8:	7863      	ldrb	r3, [r4, #1]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d01f      	beq.n	800abfe <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P2] == FREE)	
 800abbe:	78a3      	ldrb	r3, [r4, #2]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d017      	beq.n	800abf4 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P3] == FREE)
 800abc4:	78e3      	ldrb	r3, [r4, #3]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00f      	beq.n	800abea <SetupMessagingRxDMAs+0x36>
	if (portStatus[P4] == FREE)
 800abca:	7923      	ldrb	r3, [r4, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d007      	beq.n	800abe0 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P5] == FREE)
 800abd0:	7963      	ldrb	r3, [r4, #5]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d103      	bne.n	800abde <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800abd6:	490d      	ldr	r1, [pc, #52]	; (800ac0c <SetupMessagingRxDMAs+0x58>)
 800abd8:	480d      	ldr	r0, [pc, #52]	; (800ac10 <SetupMessagingRxDMAs+0x5c>)
 800abda:	f7ff ffd1 	bl	800ab80 <DMA_MSG_RX_Setup>
}
 800abde:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800abe0:	490c      	ldr	r1, [pc, #48]	; (800ac14 <SetupMessagingRxDMAs+0x60>)
 800abe2:	480d      	ldr	r0, [pc, #52]	; (800ac18 <SetupMessagingRxDMAs+0x64>)
 800abe4:	f7ff ffcc 	bl	800ab80 <DMA_MSG_RX_Setup>
 800abe8:	e7f2      	b.n	800abd0 <SetupMessagingRxDMAs+0x1c>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800abea:	490c      	ldr	r1, [pc, #48]	; (800ac1c <SetupMessagingRxDMAs+0x68>)
 800abec:	480c      	ldr	r0, [pc, #48]	; (800ac20 <SetupMessagingRxDMAs+0x6c>)
 800abee:	f7ff ffc7 	bl	800ab80 <DMA_MSG_RX_Setup>
 800abf2:	e7ea      	b.n	800abca <SetupMessagingRxDMAs+0x16>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800abf4:	490b      	ldr	r1, [pc, #44]	; (800ac24 <SetupMessagingRxDMAs+0x70>)
 800abf6:	480c      	ldr	r0, [pc, #48]	; (800ac28 <SetupMessagingRxDMAs+0x74>)
 800abf8:	f7ff ffc2 	bl	800ab80 <DMA_MSG_RX_Setup>
 800abfc:	e7e2      	b.n	800abc4 <SetupMessagingRxDMAs+0x10>
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800abfe:	490b      	ldr	r1, [pc, #44]	; (800ac2c <SetupMessagingRxDMAs+0x78>)
 800ac00:	480b      	ldr	r0, [pc, #44]	; (800ac30 <SetupMessagingRxDMAs+0x7c>)
 800ac02:	f7ff ffbd 	bl	800ab80 <DMA_MSG_RX_Setup>
 800ac06:	e7da      	b.n	800abbe <SetupMessagingRxDMAs+0xa>
 800ac08:	20000c3c 	.word	0x20000c3c
 800ac0c:	20001db8 	.word	0x20001db8
 800ac10:	20006fc4 	.word	0x20006fc4
 800ac14:	20001d80 	.word	0x20001d80
 800ac18:	20006e9c 	.word	0x20006e9c
 800ac1c:	20001d48 	.word	0x20001d48
 800ac20:	20007044 	.word	0x20007044
 800ac24:	20001d10 	.word	0x20001d10
 800ac28:	200070bc 	.word	0x200070bc
 800ac2c:	20001cd8 	.word	0x20001cd8
 800ac30:	20006f54 	.word	0x20006f54

0800ac34 <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800ac34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac36:	46d6      	mov	lr, sl
 800ac38:	464f      	mov	r7, r9
 800ac3a:	4646      	mov	r6, r8
 800ac3c:	b5c0      	push	{r6, r7, lr}
	hDMA = &streamDMA[port - 1];
 800ac3e:	1e47      	subs	r7, r0, #1
 800ac40:	00fe      	lsls	r6, r7, #3
 800ac42:	4b1c      	ldr	r3, [pc, #112]	; (800acb4 <SwitchStreamDMAToMsg+0x80>)
 800ac44:	1bf6      	subs	r6, r6, r7
 800ac46:	00f6      	lsls	r6, r6, #3
 800ac48:	4698      	mov	r8, r3
 800ac4a:	46b2      	mov	sl, r6
 800ac4c:	44c2      	add	sl, r8
void SwitchStreamDMAToMsg(uint8_t port) {
 800ac4e:	4681      	mov	r9, r0
	HAL_DMA_Abort(hDMA);
 800ac50:	4650      	mov	r0, sl
 800ac52:	f005 f965 	bl	800ff20 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800ac56:	4643      	mov	r3, r8
 800ac58:	2400      	movs	r4, #0
 800ac5a:	58f2      	ldr	r2, [r6, r3]
	dmaStreamCount[port - 1] = 0;
 800ac5c:	4b16      	ldr	r3, [pc, #88]	; (800acb8 <SwitchStreamDMAToMsg+0x84>)
 800ac5e:	00bf      	lsls	r7, r7, #2
	hDMA->Instance->CNDTR = 0;
 800ac60:	6054      	str	r4, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800ac62:	50fc      	str	r4, [r7, r3]
	dmaStreamTotal[port - 1] = 0;
 800ac64:	4b15      	ldr	r3, [pc, #84]	; (800acbc <SwitchStreamDMAToMsg+0x88>)
 800ac66:	50fc      	str	r4, [r7, r3]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800ac68:	4b15      	ldr	r3, [pc, #84]	; (800acc0 <SwitchStreamDMAToMsg+0x8c>)
 800ac6a:	18f5      	adds	r5, r6, r3
	hDMA->Instance = ch;
 800ac6c:	50f2      	str	r2, [r6, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ac6e:	2380      	movs	r3, #128	; 0x80
 800ac70:	60eb      	str	r3, [r5, #12]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ac72:	3b60      	subs	r3, #96	; 0x60
 800ac74:	61ab      	str	r3, [r5, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ac76:	2380      	movs	r3, #128	; 0x80
 800ac78:	019b      	lsls	r3, r3, #6
 800ac7a:	61eb      	str	r3, [r5, #28]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac7c:	606c      	str	r4, [r5, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ac7e:	60ac      	str	r4, [r5, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac80:	612c      	str	r4, [r5, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac82:	616c      	str	r4, [r5, #20]
	HAL_DMA_Init(hDMA);		
 800ac84:	0028      	movs	r0, r5
 800ac86:	f005 f8f3 	bl	800fe70 <HAL_DMA_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800ac8a:	4653      	mov	r3, sl
 800ac8c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ac8e:	f7ff f99f 	bl	8009fd0 <GetPort>
 800ac92:	4b0c      	ldr	r3, [pc, #48]	; (800acc4 <SwitchStreamDMAToMsg+0x90>)
 800ac94:	541c      	strb	r4, [r3, r0]
	streamDMA[port - 1].Instance = 0;
 800ac96:	4643      	mov	r3, r8
 800ac98:	50f4      	str	r4, [r6, r3]
	dmaStreamDst[port - 1] = 0;
 800ac9a:	4b0b      	ldr	r3, [pc, #44]	; (800acc8 <SwitchStreamDMAToMsg+0x94>)
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800ac9c:	4648      	mov	r0, r9
	dmaStreamDst[port - 1] = 0;
 800ac9e:	50fc      	str	r4, [r7, r3]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800aca0:	f002 fc48 	bl	800d534 <GetUart>
 800aca4:	0029      	movs	r1, r5
 800aca6:	f7ff ff6b 	bl	800ab80 <DMA_MSG_RX_Setup>
}
 800acaa:	bc1c      	pop	{r2, r3, r4}
 800acac:	4690      	mov	r8, r2
 800acae:	4699      	mov	r9, r3
 800acb0:	46a2      	mov	sl, r4
 800acb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb4:	20001ae0 	.word	0x20001ae0
 800acb8:	200012e0 	.word	0x200012e0
 800acbc:	200012f4 	.word	0x200012f4
 800acc0:	20001cd8 	.word	0x20001cd8
 800acc4:	20000c3c 	.word	0x20000c3c
 800acc8:	200012cc 	.word	0x200012cc

0800accc <DMA_STREAM_Setup>:
{	
 800accc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acce:	0016      	movs	r6, r2
 800acd0:	0005      	movs	r5, r0
 800acd2:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800acd4:	f7ff f97c 	bl	8009fd0 <GetPort>
	hDMA = &streamDMA[port-1];
 800acd8:	3801      	subs	r0, #1
 800acda:	00c4      	lsls	r4, r0, #3
 800acdc:	1a24      	subs	r4, r4, r0
 800acde:	480a      	ldr	r0, [pc, #40]	; (800ad08 <DMA_STREAM_Setup+0x3c>)
 800ace0:	00e4      	lsls	r4, r4, #3
 800ace2:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800ace4:	0021      	movs	r1, r4
 800ace6:	0028      	movs	r0, r5
 800ace8:	f7ff fc62 	bl	800a5b0 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800acec:	0020      	movs	r0, r4
 800acee:	2101      	movs	r1, #1
 800acf0:	f7ff fba8 	bl	800a444 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800acf4:	2369      	movs	r3, #105	; 0x69
 800acf6:	2201      	movs	r2, #1
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800acf8:	6839      	ldr	r1, [r7, #0]
	huartSrc->State = HAL_UART_STATE_READY;
 800acfa:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800acfc:	0028      	movs	r0, r5
 800acfe:	0032      	movs	r2, r6
 800ad00:	3128      	adds	r1, #40	; 0x28
 800ad02:	f007 f91f 	bl	8011f44 <HAL_UART_Receive_DMA>
}
 800ad06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad08:	20001ae0 	.word	0x20001ae0

0800ad0c <RemapAndLinkDMAtoUARTTx>:
/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800ad0c:	6803      	ldr	r3, [r0, #0]
 800ad0e:	4ac6      	ldr	r2, [pc, #792]	; (800b028 <RemapAndLinkDMAtoUARTTx+0x31c>)
{
 800ad10:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d03a      	beq.n	800ad8c <RemapAndLinkDMAtoUARTTx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800ad16:	4ac5      	ldr	r2, [pc, #788]	; (800b02c <RemapAndLinkDMAtoUARTTx+0x320>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d058      	beq.n	800adce <RemapAndLinkDMAtoUARTTx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800ad1c:	4ac4      	ldr	r2, [pc, #784]	; (800b030 <RemapAndLinkDMAtoUARTTx+0x324>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d100      	bne.n	800ad24 <RemapAndLinkDMAtoUARTTx+0x18>
 800ad22:	e093      	b.n	800ae4c <RemapAndLinkDMAtoUARTTx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800ad24:	4ac3      	ldr	r2, [pc, #780]	; (800b034 <RemapAndLinkDMAtoUARTTx+0x328>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d100      	bne.n	800ad2c <RemapAndLinkDMAtoUARTTx+0x20>
 800ad2a:	e0c0      	b.n	800aeae <RemapAndLinkDMAtoUARTTx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800ad2c:	4ac2      	ldr	r2, [pc, #776]	; (800b038 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d100      	bne.n	800ad34 <RemapAndLinkDMAtoUARTTx+0x28>
 800ad32:	e19d      	b.n	800b070 <RemapAndLinkDMAtoUARTTx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800ad34:	4ac1      	ldr	r2, [pc, #772]	; (800b03c <RemapAndLinkDMAtoUARTTx+0x330>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d100      	bne.n	800ad3c <RemapAndLinkDMAtoUARTTx+0x30>
 800ad3a:	e1b9      	b.n	800b0b0 <RemapAndLinkDMAtoUARTTx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800ad3c:	4ac0      	ldr	r2, [pc, #768]	; (800b040 <RemapAndLinkDMAtoUARTTx+0x334>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d000      	beq.n	800ad44 <RemapAndLinkDMAtoUARTTx+0x38>
 800ad42:	e265      	b.n	800b210 <RemapAndLinkDMAtoUARTTx+0x504>
 800ad44:	680b      	ldr	r3, [r1, #0]
 800ad46:	4abf      	ldr	r2, [pc, #764]	; (800b044 <RemapAndLinkDMAtoUARTTx+0x338>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d100      	bne.n	800ad4e <RemapAndLinkDMAtoUARTTx+0x42>
 800ad4c:	e230      	b.n	800b1b0 <RemapAndLinkDMAtoUARTTx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800ad4e:	4abe      	ldr	r2, [pc, #760]	; (800b048 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d100      	bne.n	800ad56 <RemapAndLinkDMAtoUARTTx+0x4a>
 800ad54:	e237      	b.n	800b1c6 <RemapAndLinkDMAtoUARTTx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800ad56:	4abd      	ldr	r2, [pc, #756]	; (800b04c <RemapAndLinkDMAtoUARTTx+0x340>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d100      	bne.n	800ad5e <RemapAndLinkDMAtoUARTTx+0x52>
 800ad5c:	e23f      	b.n	800b1de <RemapAndLinkDMAtoUARTTx+0x4d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800ad5e:	4abc      	ldr	r2, [pc, #752]	; (800b050 <RemapAndLinkDMAtoUARTTx+0x344>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d100      	bne.n	800ad66 <RemapAndLinkDMAtoUARTTx+0x5a>
 800ad64:	e247      	b.n	800b1f6 <RemapAndLinkDMAtoUARTTx+0x4ea>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800ad66:	4abb      	ldr	r2, [pc, #748]	; (800b054 <RemapAndLinkDMAtoUARTTx+0x348>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d100      	bne.n	800ad6e <RemapAndLinkDMAtoUARTTx+0x62>
 800ad6c:	e24e      	b.n	800b20c <RemapAndLinkDMAtoUARTTx+0x500>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800ad6e:	4aba      	ldr	r2, [pc, #744]	; (800b058 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d145      	bne.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800ad74:	23a8      	movs	r3, #168	; 0xa8
 800ad76:	4ab9      	ldr	r2, [pc, #740]	; (800b05c <RemapAndLinkDMAtoUARTTx+0x350>)
 800ad78:	4db9      	ldr	r5, [pc, #740]	; (800b060 <RemapAndLinkDMAtoUARTTx+0x354>)
 800ad7a:	58d4      	ldr	r4, [r2, r3]
 800ad7c:	402c      	ands	r4, r5
 800ad7e:	50d4      	str	r4, [r2, r3]
 800ad80:	24e0      	movs	r4, #224	; 0xe0
 800ad82:	58d5      	ldr	r5, [r2, r3]
 800ad84:	0324      	lsls	r4, r4, #12
 800ad86:	432c      	orrs	r4, r5
 800ad88:	50d4      	str	r4, [r2, r3]
 800ad8a:	e039      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800ad8c:	680b      	ldr	r3, [r1, #0]
 800ad8e:	4aad      	ldr	r2, [pc, #692]	; (800b044 <RemapAndLinkDMAtoUARTTx+0x338>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d100      	bne.n	800ad96 <RemapAndLinkDMAtoUARTTx+0x8a>
 800ad94:	e07e      	b.n	800ae94 <RemapAndLinkDMAtoUARTTx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800ad96:	4aac      	ldr	r2, [pc, #688]	; (800b048 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d100      	bne.n	800ad9e <RemapAndLinkDMAtoUARTTx+0x92>
 800ad9c:	e085      	b.n	800aeaa <RemapAndLinkDMAtoUARTTx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800ad9e:	4aab      	ldr	r2, [pc, #684]	; (800b04c <RemapAndLinkDMAtoUARTTx+0x340>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d030      	beq.n	800ae06 <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800ada4:	4aaa      	ldr	r2, [pc, #680]	; (800b050 <RemapAndLinkDMAtoUARTTx+0x344>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d039      	beq.n	800ae1e <RemapAndLinkDMAtoUARTTx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800adaa:	4aaa      	ldr	r2, [pc, #680]	; (800b054 <RemapAndLinkDMAtoUARTTx+0x348>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d041      	beq.n	800ae34 <RemapAndLinkDMAtoUARTTx+0x128>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800adb0:	4aa9      	ldr	r2, [pc, #676]	; (800b058 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d124      	bne.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800adb6:	23a8      	movs	r3, #168	; 0xa8
 800adb8:	4aa8      	ldr	r2, [pc, #672]	; (800b05c <RemapAndLinkDMAtoUARTTx+0x350>)
 800adba:	4da9      	ldr	r5, [pc, #676]	; (800b060 <RemapAndLinkDMAtoUARTTx+0x354>)
 800adbc:	58d4      	ldr	r4, [r2, r3]
 800adbe:	402c      	ands	r4, r5
 800adc0:	50d4      	str	r4, [r2, r3]
 800adc2:	2480      	movs	r4, #128	; 0x80
 800adc4:	58d5      	ldr	r5, [r2, r3]
 800adc6:	0324      	lsls	r4, r4, #12
 800adc8:	432c      	orrs	r4, r5
 800adca:	50d4      	str	r4, [r2, r3]
 800adcc:	e018      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800adce:	680b      	ldr	r3, [r1, #0]
 800add0:	4a9c      	ldr	r2, [pc, #624]	; (800b044 <RemapAndLinkDMAtoUARTTx+0x338>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d100      	bne.n	800add8 <RemapAndLinkDMAtoUARTTx+0xcc>
 800add6:	e0b9      	b.n	800af4c <RemapAndLinkDMAtoUARTTx+0x240>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800add8:	4a9b      	ldr	r2, [pc, #620]	; (800b048 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d100      	bne.n	800ade0 <RemapAndLinkDMAtoUARTTx+0xd4>
 800adde:	e0c0      	b.n	800af62 <RemapAndLinkDMAtoUARTTx+0x256>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800ade0:	4a9a      	ldr	r2, [pc, #616]	; (800b04c <RemapAndLinkDMAtoUARTTx+0x340>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d100      	bne.n	800ade8 <RemapAndLinkDMAtoUARTTx+0xdc>
 800ade6:	e0c8      	b.n	800af7a <RemapAndLinkDMAtoUARTTx+0x26e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800ade8:	4a99      	ldr	r2, [pc, #612]	; (800b050 <RemapAndLinkDMAtoUARTTx+0x344>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d100      	bne.n	800adf0 <RemapAndLinkDMAtoUARTTx+0xe4>
 800adee:	e0d0      	b.n	800af92 <RemapAndLinkDMAtoUARTTx+0x286>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800adf0:	4a98      	ldr	r2, [pc, #608]	; (800b054 <RemapAndLinkDMAtoUARTTx+0x348>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d100      	bne.n	800adf8 <RemapAndLinkDMAtoUARTTx+0xec>
 800adf6:	e0d7      	b.n	800afa8 <RemapAndLinkDMAtoUARTTx+0x29c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800adf8:	4a97      	ldr	r2, [pc, #604]	; (800b058 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d100      	bne.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
 800adfe:	e0d5      	b.n	800afac <RemapAndLinkDMAtoUARTTx+0x2a0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800ae00:	6601      	str	r1, [r0, #96]	; 0x60
 800ae02:	6248      	str	r0, [r1, #36]	; 0x24
}
 800ae04:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800ae06:	23a8      	movs	r3, #168	; 0xa8
 800ae08:	4a96      	ldr	r2, [pc, #600]	; (800b064 <RemapAndLinkDMAtoUARTTx+0x358>)
 800ae0a:	4d97      	ldr	r5, [pc, #604]	; (800b068 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800ae0c:	58d4      	ldr	r4, [r2, r3]
 800ae0e:	402c      	ands	r4, r5
 800ae10:	50d4      	str	r4, [r2, r3]
 800ae12:	2480      	movs	r4, #128	; 0x80
 800ae14:	58d5      	ldr	r5, [r2, r3]
 800ae16:	0524      	lsls	r4, r4, #20
 800ae18:	432c      	orrs	r4, r5
 800ae1a:	50d4      	str	r4, [r2, r3]
 800ae1c:	e7f0      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800ae1e:	23a8      	movs	r3, #168	; 0xa8
 800ae20:	250f      	movs	r5, #15
 800ae22:	4a8e      	ldr	r2, [pc, #568]	; (800b05c <RemapAndLinkDMAtoUARTTx+0x350>)
 800ae24:	58d4      	ldr	r4, [r2, r3]
 800ae26:	43ac      	bics	r4, r5
 800ae28:	50d4      	str	r4, [r2, r3]
 800ae2a:	58d4      	ldr	r4, [r2, r3]
 800ae2c:	3d07      	subs	r5, #7
 800ae2e:	432c      	orrs	r4, r5
 800ae30:	50d4      	str	r4, [r2, r3]
 800ae32:	e7e5      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800ae34:	4a89      	ldr	r2, [pc, #548]	; (800b05c <RemapAndLinkDMAtoUARTTx+0x350>)
 800ae36:	23a8      	movs	r3, #168	; 0xa8
 800ae38:	4d8c      	ldr	r5, [pc, #560]	; (800b06c <RemapAndLinkDMAtoUARTTx+0x360>)
 800ae3a:	58d4      	ldr	r4, [r2, r3]
 800ae3c:	402c      	ands	r4, r5
 800ae3e:	50d4      	str	r4, [r2, r3]
 800ae40:	2480      	movs	r4, #128	; 0x80
 800ae42:	58d5      	ldr	r5, [r2, r3]
 800ae44:	0224      	lsls	r4, r4, #8
 800ae46:	432c      	orrs	r4, r5
 800ae48:	50d4      	str	r4, [r2, r3]
 800ae4a:	e7d9      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800ae4c:	680b      	ldr	r3, [r1, #0]
 800ae4e:	4a7d      	ldr	r2, [pc, #500]	; (800b044 <RemapAndLinkDMAtoUARTTx+0x338>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d100      	bne.n	800ae56 <RemapAndLinkDMAtoUARTTx+0x14a>
 800ae54:	e0b6      	b.n	800afc4 <RemapAndLinkDMAtoUARTTx+0x2b8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800ae56:	4a7c      	ldr	r2, [pc, #496]	; (800b048 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d100      	bne.n	800ae5e <RemapAndLinkDMAtoUARTTx+0x152>
 800ae5c:	e0bd      	b.n	800afda <RemapAndLinkDMAtoUARTTx+0x2ce>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800ae5e:	4a7b      	ldr	r2, [pc, #492]	; (800b04c <RemapAndLinkDMAtoUARTTx+0x340>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d100      	bne.n	800ae66 <RemapAndLinkDMAtoUARTTx+0x15a>
 800ae64:	e0c5      	b.n	800aff2 <RemapAndLinkDMAtoUARTTx+0x2e6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800ae66:	4a7a      	ldr	r2, [pc, #488]	; (800b050 <RemapAndLinkDMAtoUARTTx+0x344>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d100      	bne.n	800ae6e <RemapAndLinkDMAtoUARTTx+0x162>
 800ae6c:	e0cd      	b.n	800b00a <RemapAndLinkDMAtoUARTTx+0x2fe>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800ae6e:	4a79      	ldr	r2, [pc, #484]	; (800b054 <RemapAndLinkDMAtoUARTTx+0x348>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d100      	bne.n	800ae76 <RemapAndLinkDMAtoUARTTx+0x16a>
 800ae74:	e0d4      	b.n	800b020 <RemapAndLinkDMAtoUARTTx+0x314>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800ae76:	4a78      	ldr	r2, [pc, #480]	; (800b058 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d1c1      	bne.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800ae7c:	23a8      	movs	r3, #168	; 0xa8
 800ae7e:	4a77      	ldr	r2, [pc, #476]	; (800b05c <RemapAndLinkDMAtoUARTTx+0x350>)
 800ae80:	4d77      	ldr	r5, [pc, #476]	; (800b060 <RemapAndLinkDMAtoUARTTx+0x354>)
 800ae82:	58d4      	ldr	r4, [r2, r3]
 800ae84:	402c      	ands	r4, r5
 800ae86:	50d4      	str	r4, [r2, r3]
 800ae88:	24a0      	movs	r4, #160	; 0xa0
 800ae8a:	58d5      	ldr	r5, [r2, r3]
 800ae8c:	0324      	lsls	r4, r4, #12
 800ae8e:	432c      	orrs	r4, r5
 800ae90:	50d4      	str	r4, [r2, r3]
 800ae92:	e7b5      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800ae94:	23a8      	movs	r3, #168	; 0xa8
 800ae96:	25f0      	movs	r5, #240	; 0xf0
 800ae98:	4a72      	ldr	r2, [pc, #456]	; (800b064 <RemapAndLinkDMAtoUARTTx+0x358>)
 800ae9a:	58d4      	ldr	r4, [r2, r3]
 800ae9c:	43ac      	bics	r4, r5
 800ae9e:	50d4      	str	r4, [r2, r3]
 800aea0:	58d4      	ldr	r4, [r2, r3]
 800aea2:	3d70      	subs	r5, #112	; 0x70
 800aea4:	432c      	orrs	r4, r5
 800aea6:	50d4      	str	r4, [r2, r3]
 800aea8:	e7aa      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800aeaa:	4a6e      	ldr	r2, [pc, #440]	; (800b064 <RemapAndLinkDMAtoUARTTx+0x358>)
 800aeac:	e7c3      	b.n	800ae36 <RemapAndLinkDMAtoUARTTx+0x12a>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800aeae:	680b      	ldr	r3, [r1, #0]
 800aeb0:	4a64      	ldr	r2, [pc, #400]	; (800b044 <RemapAndLinkDMAtoUARTTx+0x338>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d01c      	beq.n	800aef0 <RemapAndLinkDMAtoUARTTx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800aeb6:	4a64      	ldr	r2, [pc, #400]	; (800b048 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d024      	beq.n	800af06 <RemapAndLinkDMAtoUARTTx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800aebc:	4a63      	ldr	r2, [pc, #396]	; (800b04c <RemapAndLinkDMAtoUARTTx+0x340>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d02d      	beq.n	800af1e <RemapAndLinkDMAtoUARTTx+0x212>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800aec2:	4a63      	ldr	r2, [pc, #396]	; (800b050 <RemapAndLinkDMAtoUARTTx+0x344>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d036      	beq.n	800af36 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800aec8:	4a62      	ldr	r2, [pc, #392]	; (800b054 <RemapAndLinkDMAtoUARTTx+0x348>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d100      	bne.n	800aed0 <RemapAndLinkDMAtoUARTTx+0x1c4>
 800aece:	e0a9      	b.n	800b024 <RemapAndLinkDMAtoUARTTx+0x318>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800aed0:	4a61      	ldr	r2, [pc, #388]	; (800b058 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d000      	beq.n	800aed8 <RemapAndLinkDMAtoUARTTx+0x1cc>
 800aed6:	e793      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800aed8:	23a8      	movs	r3, #168	; 0xa8
 800aeda:	4a60      	ldr	r2, [pc, #384]	; (800b05c <RemapAndLinkDMAtoUARTTx+0x350>)
 800aedc:	4d60      	ldr	r5, [pc, #384]	; (800b060 <RemapAndLinkDMAtoUARTTx+0x354>)
 800aede:	58d4      	ldr	r4, [r2, r3]
 800aee0:	402c      	ands	r4, r5
 800aee2:	50d4      	str	r4, [r2, r3]
 800aee4:	24b0      	movs	r4, #176	; 0xb0
 800aee6:	58d5      	ldr	r5, [r2, r3]
 800aee8:	0324      	lsls	r4, r4, #12
 800aeea:	432c      	orrs	r4, r5
 800aeec:	50d4      	str	r4, [r2, r3]
 800aeee:	e787      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800aef0:	23a8      	movs	r3, #168	; 0xa8
 800aef2:	25f0      	movs	r5, #240	; 0xf0
 800aef4:	4a5b      	ldr	r2, [pc, #364]	; (800b064 <RemapAndLinkDMAtoUARTTx+0x358>)
 800aef6:	58d4      	ldr	r4, [r2, r3]
 800aef8:	43ac      	bics	r4, r5
 800aefa:	50d4      	str	r4, [r2, r3]
 800aefc:	58d4      	ldr	r4, [r2, r3]
 800aefe:	3d40      	subs	r5, #64	; 0x40
 800af00:	432c      	orrs	r4, r5
 800af02:	50d4      	str	r4, [r2, r3]
 800af04:	e77c      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800af06:	4a57      	ldr	r2, [pc, #348]	; (800b064 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800af08:	23a8      	movs	r3, #168	; 0xa8
 800af0a:	4d58      	ldr	r5, [pc, #352]	; (800b06c <RemapAndLinkDMAtoUARTTx+0x360>)
 800af0c:	58d4      	ldr	r4, [r2, r3]
 800af0e:	402c      	ands	r4, r5
 800af10:	50d4      	str	r4, [r2, r3]
 800af12:	24b0      	movs	r4, #176	; 0xb0
 800af14:	58d5      	ldr	r5, [r2, r3]
 800af16:	0224      	lsls	r4, r4, #8
 800af18:	432c      	orrs	r4, r5
 800af1a:	50d4      	str	r4, [r2, r3]
 800af1c:	e770      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800af1e:	23a8      	movs	r3, #168	; 0xa8
 800af20:	4a50      	ldr	r2, [pc, #320]	; (800b064 <RemapAndLinkDMAtoUARTTx+0x358>)
 800af22:	4d51      	ldr	r5, [pc, #324]	; (800b068 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800af24:	58d4      	ldr	r4, [r2, r3]
 800af26:	402c      	ands	r4, r5
 800af28:	50d4      	str	r4, [r2, r3]
 800af2a:	24b0      	movs	r4, #176	; 0xb0
 800af2c:	58d5      	ldr	r5, [r2, r3]
 800af2e:	0524      	lsls	r4, r4, #20
 800af30:	432c      	orrs	r4, r5
 800af32:	50d4      	str	r4, [r2, r3]
 800af34:	e764      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800af36:	23a8      	movs	r3, #168	; 0xa8
 800af38:	250f      	movs	r5, #15
 800af3a:	4a48      	ldr	r2, [pc, #288]	; (800b05c <RemapAndLinkDMAtoUARTTx+0x350>)
 800af3c:	58d4      	ldr	r4, [r2, r3]
 800af3e:	43ac      	bics	r4, r5
 800af40:	50d4      	str	r4, [r2, r3]
 800af42:	58d4      	ldr	r4, [r2, r3]
 800af44:	3d04      	subs	r5, #4
 800af46:	432c      	orrs	r4, r5
 800af48:	50d4      	str	r4, [r2, r3]
 800af4a:	e759      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800af4c:	23a8      	movs	r3, #168	; 0xa8
 800af4e:	25f0      	movs	r5, #240	; 0xf0
 800af50:	4a44      	ldr	r2, [pc, #272]	; (800b064 <RemapAndLinkDMAtoUARTTx+0x358>)
 800af52:	58d4      	ldr	r4, [r2, r3]
 800af54:	43ac      	bics	r4, r5
 800af56:	50d4      	str	r4, [r2, r3]
 800af58:	58d4      	ldr	r4, [r2, r3]
 800af5a:	3d60      	subs	r5, #96	; 0x60
 800af5c:	432c      	orrs	r4, r5
 800af5e:	50d4      	str	r4, [r2, r3]
 800af60:	e74e      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800af62:	4a40      	ldr	r2, [pc, #256]	; (800b064 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800af64:	23a8      	movs	r3, #168	; 0xa8
 800af66:	4d41      	ldr	r5, [pc, #260]	; (800b06c <RemapAndLinkDMAtoUARTTx+0x360>)
 800af68:	58d4      	ldr	r4, [r2, r3]
 800af6a:	402c      	ands	r4, r5
 800af6c:	50d4      	str	r4, [r2, r3]
 800af6e:	2490      	movs	r4, #144	; 0x90
 800af70:	58d5      	ldr	r5, [r2, r3]
 800af72:	0224      	lsls	r4, r4, #8
 800af74:	432c      	orrs	r4, r5
 800af76:	50d4      	str	r4, [r2, r3]
 800af78:	e742      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800af7a:	23a8      	movs	r3, #168	; 0xa8
 800af7c:	4a39      	ldr	r2, [pc, #228]	; (800b064 <RemapAndLinkDMAtoUARTTx+0x358>)
 800af7e:	4d3a      	ldr	r5, [pc, #232]	; (800b068 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800af80:	58d4      	ldr	r4, [r2, r3]
 800af82:	402c      	ands	r4, r5
 800af84:	50d4      	str	r4, [r2, r3]
 800af86:	2490      	movs	r4, #144	; 0x90
 800af88:	58d5      	ldr	r5, [r2, r3]
 800af8a:	0524      	lsls	r4, r4, #20
 800af8c:	432c      	orrs	r4, r5
 800af8e:	50d4      	str	r4, [r2, r3]
 800af90:	e736      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800af92:	23a8      	movs	r3, #168	; 0xa8
 800af94:	250f      	movs	r5, #15
 800af96:	4a31      	ldr	r2, [pc, #196]	; (800b05c <RemapAndLinkDMAtoUARTTx+0x350>)
 800af98:	58d4      	ldr	r4, [r2, r3]
 800af9a:	43ac      	bics	r4, r5
 800af9c:	50d4      	str	r4, [r2, r3]
 800af9e:	58d4      	ldr	r4, [r2, r3]
 800afa0:	3d06      	subs	r5, #6
 800afa2:	432c      	orrs	r4, r5
 800afa4:	50d4      	str	r4, [r2, r3]
 800afa6:	e72b      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800afa8:	4a2c      	ldr	r2, [pc, #176]	; (800b05c <RemapAndLinkDMAtoUARTTx+0x350>)
 800afaa:	e7db      	b.n	800af64 <RemapAndLinkDMAtoUARTTx+0x258>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800afac:	23a8      	movs	r3, #168	; 0xa8
 800afae:	4a2b      	ldr	r2, [pc, #172]	; (800b05c <RemapAndLinkDMAtoUARTTx+0x350>)
 800afb0:	4d2b      	ldr	r5, [pc, #172]	; (800b060 <RemapAndLinkDMAtoUARTTx+0x354>)
 800afb2:	58d4      	ldr	r4, [r2, r3]
 800afb4:	402c      	ands	r4, r5
 800afb6:	50d4      	str	r4, [r2, r3]
 800afb8:	2490      	movs	r4, #144	; 0x90
 800afba:	58d5      	ldr	r5, [r2, r3]
 800afbc:	0324      	lsls	r4, r4, #12
 800afbe:	432c      	orrs	r4, r5
 800afc0:	50d4      	str	r4, [r2, r3]
 800afc2:	e71d      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800afc4:	23a8      	movs	r3, #168	; 0xa8
 800afc6:	25f0      	movs	r5, #240	; 0xf0
 800afc8:	4a26      	ldr	r2, [pc, #152]	; (800b064 <RemapAndLinkDMAtoUARTTx+0x358>)
 800afca:	58d4      	ldr	r4, [r2, r3]
 800afcc:	43ac      	bics	r4, r5
 800afce:	50d4      	str	r4, [r2, r3]
 800afd0:	58d4      	ldr	r4, [r2, r3]
 800afd2:	3d50      	subs	r5, #80	; 0x50
 800afd4:	432c      	orrs	r4, r5
 800afd6:	50d4      	str	r4, [r2, r3]
 800afd8:	e712      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800afda:	4a22      	ldr	r2, [pc, #136]	; (800b064 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800afdc:	23a8      	movs	r3, #168	; 0xa8
 800afde:	4d23      	ldr	r5, [pc, #140]	; (800b06c <RemapAndLinkDMAtoUARTTx+0x360>)
 800afe0:	58d4      	ldr	r4, [r2, r3]
 800afe2:	402c      	ands	r4, r5
 800afe4:	50d4      	str	r4, [r2, r3]
 800afe6:	24a0      	movs	r4, #160	; 0xa0
 800afe8:	58d5      	ldr	r5, [r2, r3]
 800afea:	0224      	lsls	r4, r4, #8
 800afec:	432c      	orrs	r4, r5
 800afee:	50d4      	str	r4, [r2, r3]
 800aff0:	e706      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800aff2:	23a8      	movs	r3, #168	; 0xa8
 800aff4:	4a1b      	ldr	r2, [pc, #108]	; (800b064 <RemapAndLinkDMAtoUARTTx+0x358>)
 800aff6:	4d1c      	ldr	r5, [pc, #112]	; (800b068 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800aff8:	58d4      	ldr	r4, [r2, r3]
 800affa:	402c      	ands	r4, r5
 800affc:	50d4      	str	r4, [r2, r3]
 800affe:	24a0      	movs	r4, #160	; 0xa0
 800b000:	58d5      	ldr	r5, [r2, r3]
 800b002:	0524      	lsls	r4, r4, #20
 800b004:	432c      	orrs	r4, r5
 800b006:	50d4      	str	r4, [r2, r3]
 800b008:	e6fa      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800b00a:	23a8      	movs	r3, #168	; 0xa8
 800b00c:	250f      	movs	r5, #15
 800b00e:	4a13      	ldr	r2, [pc, #76]	; (800b05c <RemapAndLinkDMAtoUARTTx+0x350>)
 800b010:	58d4      	ldr	r4, [r2, r3]
 800b012:	43ac      	bics	r4, r5
 800b014:	50d4      	str	r4, [r2, r3]
 800b016:	58d4      	ldr	r4, [r2, r3]
 800b018:	3d05      	subs	r5, #5
 800b01a:	432c      	orrs	r4, r5
 800b01c:	50d4      	str	r4, [r2, r3]
 800b01e:	e6ef      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800b020:	4a0e      	ldr	r2, [pc, #56]	; (800b05c <RemapAndLinkDMAtoUARTTx+0x350>)
 800b022:	e7db      	b.n	800afdc <RemapAndLinkDMAtoUARTTx+0x2d0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800b024:	4a0d      	ldr	r2, [pc, #52]	; (800b05c <RemapAndLinkDMAtoUARTTx+0x350>)
 800b026:	e76f      	b.n	800af08 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800b028:	40013800 	.word	0x40013800
 800b02c:	40004400 	.word	0x40004400
 800b030:	40004800 	.word	0x40004800
 800b034:	40004c00 	.word	0x40004c00
 800b038:	40005000 	.word	0x40005000
 800b03c:	40011400 	.word	0x40011400
 800b040:	40011800 	.word	0x40011800
 800b044:	4002001c 	.word	0x4002001c
 800b048:	40020044 	.word	0x40020044
 800b04c:	40020080 	.word	0x40020080
 800b050:	40020408 	.word	0x40020408
 800b054:	40020444 	.word	0x40020444
 800b058:	40020458 	.word	0x40020458
 800b05c:	40020400 	.word	0x40020400
 800b060:	fff0ffff 	.word	0xfff0ffff
 800b064:	40020000 	.word	0x40020000
 800b068:	f0ffffff 	.word	0xf0ffffff
 800b06c:	ffff0fff 	.word	0xffff0fff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800b070:	680b      	ldr	r3, [r1, #0]
 800b072:	4a8e      	ldr	r2, [pc, #568]	; (800b2ac <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d03b      	beq.n	800b0f0 <RemapAndLinkDMAtoUARTTx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800b078:	4a8d      	ldr	r2, [pc, #564]	; (800b2b0 <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d043      	beq.n	800b106 <RemapAndLinkDMAtoUARTTx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800b07e:	4a8d      	ldr	r2, [pc, #564]	; (800b2b4 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d04c      	beq.n	800b11e <RemapAndLinkDMAtoUARTTx+0x412>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800b084:	4a8c      	ldr	r2, [pc, #560]	; (800b2b8 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d055      	beq.n	800b136 <RemapAndLinkDMAtoUARTTx+0x42a>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800b08a:	4a8c      	ldr	r2, [pc, #560]	; (800b2bc <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d05d      	beq.n	800b14c <RemapAndLinkDMAtoUARTTx+0x440>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800b090:	4a8b      	ldr	r2, [pc, #556]	; (800b2c0 <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d000      	beq.n	800b098 <RemapAndLinkDMAtoUARTTx+0x38c>
 800b096:	e6b3      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800b098:	23a8      	movs	r3, #168	; 0xa8
 800b09a:	4a8a      	ldr	r2, [pc, #552]	; (800b2c4 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800b09c:	4d8a      	ldr	r5, [pc, #552]	; (800b2c8 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800b09e:	58d4      	ldr	r4, [r2, r3]
 800b0a0:	402c      	ands	r4, r5
 800b0a2:	50d4      	str	r4, [r2, r3]
 800b0a4:	24c0      	movs	r4, #192	; 0xc0
 800b0a6:	58d5      	ldr	r5, [r2, r3]
 800b0a8:	0324      	lsls	r4, r4, #12
 800b0aa:	432c      	orrs	r4, r5
 800b0ac:	50d4      	str	r4, [r2, r3]
 800b0ae:	e6a7      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800b0b0:	680b      	ldr	r3, [r1, #0]
 800b0b2:	4a7e      	ldr	r2, [pc, #504]	; (800b2ac <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d04b      	beq.n	800b150 <RemapAndLinkDMAtoUARTTx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800b0b8:	4a7d      	ldr	r2, [pc, #500]	; (800b2b0 <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d053      	beq.n	800b166 <RemapAndLinkDMAtoUARTTx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800b0be:	4a7d      	ldr	r2, [pc, #500]	; (800b2b4 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d05c      	beq.n	800b17e <RemapAndLinkDMAtoUARTTx+0x472>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800b0c4:	4a7c      	ldr	r2, [pc, #496]	; (800b2b8 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d065      	beq.n	800b196 <RemapAndLinkDMAtoUARTTx+0x48a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800b0ca:	4a7c      	ldr	r2, [pc, #496]	; (800b2bc <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d06d      	beq.n	800b1ac <RemapAndLinkDMAtoUARTTx+0x4a0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800b0d0:	4a7b      	ldr	r2, [pc, #492]	; (800b2c0 <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d000      	beq.n	800b0d8 <RemapAndLinkDMAtoUARTTx+0x3cc>
 800b0d6:	e693      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800b0d8:	23a8      	movs	r3, #168	; 0xa8
 800b0da:	4a7a      	ldr	r2, [pc, #488]	; (800b2c4 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800b0dc:	4d7a      	ldr	r5, [pc, #488]	; (800b2c8 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800b0de:	58d4      	ldr	r4, [r2, r3]
 800b0e0:	402c      	ands	r4, r5
 800b0e2:	50d4      	str	r4, [r2, r3]
 800b0e4:	24d0      	movs	r4, #208	; 0xd0
 800b0e6:	58d5      	ldr	r5, [r2, r3]
 800b0e8:	0324      	lsls	r4, r4, #12
 800b0ea:	432c      	orrs	r4, r5
 800b0ec:	50d4      	str	r4, [r2, r3]
 800b0ee:	e687      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800b0f0:	23a8      	movs	r3, #168	; 0xa8
 800b0f2:	25f0      	movs	r5, #240	; 0xf0
 800b0f4:	4a75      	ldr	r2, [pc, #468]	; (800b2cc <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800b0f6:	58d4      	ldr	r4, [r2, r3]
 800b0f8:	43ac      	bics	r4, r5
 800b0fa:	50d4      	str	r4, [r2, r3]
 800b0fc:	58d4      	ldr	r4, [r2, r3]
 800b0fe:	3d30      	subs	r5, #48	; 0x30
 800b100:	432c      	orrs	r4, r5
 800b102:	50d4      	str	r4, [r2, r3]
 800b104:	e67c      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800b106:	4a71      	ldr	r2, [pc, #452]	; (800b2cc <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800b108:	23a8      	movs	r3, #168	; 0xa8
 800b10a:	4d71      	ldr	r5, [pc, #452]	; (800b2d0 <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800b10c:	58d4      	ldr	r4, [r2, r3]
 800b10e:	402c      	ands	r4, r5
 800b110:	50d4      	str	r4, [r2, r3]
 800b112:	24c0      	movs	r4, #192	; 0xc0
 800b114:	58d5      	ldr	r5, [r2, r3]
 800b116:	0224      	lsls	r4, r4, #8
 800b118:	432c      	orrs	r4, r5
 800b11a:	50d4      	str	r4, [r2, r3]
 800b11c:	e670      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800b11e:	23a8      	movs	r3, #168	; 0xa8
 800b120:	4a6a      	ldr	r2, [pc, #424]	; (800b2cc <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800b122:	4d6c      	ldr	r5, [pc, #432]	; (800b2d4 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800b124:	58d4      	ldr	r4, [r2, r3]
 800b126:	402c      	ands	r4, r5
 800b128:	50d4      	str	r4, [r2, r3]
 800b12a:	24c0      	movs	r4, #192	; 0xc0
 800b12c:	58d5      	ldr	r5, [r2, r3]
 800b12e:	0524      	lsls	r4, r4, #20
 800b130:	432c      	orrs	r4, r5
 800b132:	50d4      	str	r4, [r2, r3]
 800b134:	e664      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800b136:	23a8      	movs	r3, #168	; 0xa8
 800b138:	250f      	movs	r5, #15
 800b13a:	4a62      	ldr	r2, [pc, #392]	; (800b2c4 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800b13c:	58d4      	ldr	r4, [r2, r3]
 800b13e:	43ac      	bics	r4, r5
 800b140:	50d4      	str	r4, [r2, r3]
 800b142:	58d4      	ldr	r4, [r2, r3]
 800b144:	3d03      	subs	r5, #3
 800b146:	432c      	orrs	r4, r5
 800b148:	50d4      	str	r4, [r2, r3]
 800b14a:	e659      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800b14c:	4a5d      	ldr	r2, [pc, #372]	; (800b2c4 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800b14e:	e7db      	b.n	800b108 <RemapAndLinkDMAtoUARTTx+0x3fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800b150:	23a8      	movs	r3, #168	; 0xa8
 800b152:	25f0      	movs	r5, #240	; 0xf0
 800b154:	4a5d      	ldr	r2, [pc, #372]	; (800b2cc <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800b156:	58d4      	ldr	r4, [r2, r3]
 800b158:	43ac      	bics	r4, r5
 800b15a:	50d4      	str	r4, [r2, r3]
 800b15c:	58d4      	ldr	r4, [r2, r3]
 800b15e:	3d20      	subs	r5, #32
 800b160:	432c      	orrs	r4, r5
 800b162:	50d4      	str	r4, [r2, r3]
 800b164:	e64c      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800b166:	4a59      	ldr	r2, [pc, #356]	; (800b2cc <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800b168:	23a8      	movs	r3, #168	; 0xa8
 800b16a:	4d59      	ldr	r5, [pc, #356]	; (800b2d0 <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800b16c:	58d4      	ldr	r4, [r2, r3]
 800b16e:	402c      	ands	r4, r5
 800b170:	50d4      	str	r4, [r2, r3]
 800b172:	24d0      	movs	r4, #208	; 0xd0
 800b174:	58d5      	ldr	r5, [r2, r3]
 800b176:	0224      	lsls	r4, r4, #8
 800b178:	432c      	orrs	r4, r5
 800b17a:	50d4      	str	r4, [r2, r3]
 800b17c:	e640      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800b17e:	23a8      	movs	r3, #168	; 0xa8
 800b180:	4a52      	ldr	r2, [pc, #328]	; (800b2cc <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800b182:	4d54      	ldr	r5, [pc, #336]	; (800b2d4 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800b184:	58d4      	ldr	r4, [r2, r3]
 800b186:	402c      	ands	r4, r5
 800b188:	50d4      	str	r4, [r2, r3]
 800b18a:	24d0      	movs	r4, #208	; 0xd0
 800b18c:	58d5      	ldr	r5, [r2, r3]
 800b18e:	0524      	lsls	r4, r4, #20
 800b190:	432c      	orrs	r4, r5
 800b192:	50d4      	str	r4, [r2, r3]
 800b194:	e634      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800b196:	23a8      	movs	r3, #168	; 0xa8
 800b198:	250f      	movs	r5, #15
 800b19a:	4a4a      	ldr	r2, [pc, #296]	; (800b2c4 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800b19c:	58d4      	ldr	r4, [r2, r3]
 800b19e:	43ac      	bics	r4, r5
 800b1a0:	50d4      	str	r4, [r2, r3]
 800b1a2:	58d4      	ldr	r4, [r2, r3]
 800b1a4:	3d02      	subs	r5, #2
 800b1a6:	432c      	orrs	r4, r5
 800b1a8:	50d4      	str	r4, [r2, r3]
 800b1aa:	e629      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800b1ac:	4a45      	ldr	r2, [pc, #276]	; (800b2c4 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800b1ae:	e7db      	b.n	800b168 <RemapAndLinkDMAtoUARTTx+0x45c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800b1b0:	23a8      	movs	r3, #168	; 0xa8
 800b1b2:	25f0      	movs	r5, #240	; 0xf0
 800b1b4:	4a45      	ldr	r2, [pc, #276]	; (800b2cc <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800b1b6:	58d4      	ldr	r4, [r2, r3]
 800b1b8:	43ac      	bics	r4, r5
 800b1ba:	50d4      	str	r4, [r2, r3]
 800b1bc:	58d4      	ldr	r4, [r2, r3]
 800b1be:	3d10      	subs	r5, #16
 800b1c0:	432c      	orrs	r4, r5
 800b1c2:	50d4      	str	r4, [r2, r3]
 800b1c4:	e61c      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800b1c6:	4a41      	ldr	r2, [pc, #260]	; (800b2cc <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800b1c8:	23a8      	movs	r3, #168	; 0xa8
 800b1ca:	4d41      	ldr	r5, [pc, #260]	; (800b2d0 <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800b1cc:	58d4      	ldr	r4, [r2, r3]
 800b1ce:	402c      	ands	r4, r5
 800b1d0:	50d4      	str	r4, [r2, r3]
 800b1d2:	24e0      	movs	r4, #224	; 0xe0
 800b1d4:	58d5      	ldr	r5, [r2, r3]
 800b1d6:	0224      	lsls	r4, r4, #8
 800b1d8:	432c      	orrs	r4, r5
 800b1da:	50d4      	str	r4, [r2, r3]
 800b1dc:	e610      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800b1de:	23a8      	movs	r3, #168	; 0xa8
 800b1e0:	4a3a      	ldr	r2, [pc, #232]	; (800b2cc <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800b1e2:	4d3c      	ldr	r5, [pc, #240]	; (800b2d4 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800b1e4:	58d4      	ldr	r4, [r2, r3]
 800b1e6:	402c      	ands	r4, r5
 800b1e8:	50d4      	str	r4, [r2, r3]
 800b1ea:	24e0      	movs	r4, #224	; 0xe0
 800b1ec:	58d5      	ldr	r5, [r2, r3]
 800b1ee:	0524      	lsls	r4, r4, #20
 800b1f0:	432c      	orrs	r4, r5
 800b1f2:	50d4      	str	r4, [r2, r3]
 800b1f4:	e604      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800b1f6:	23a8      	movs	r3, #168	; 0xa8
 800b1f8:	250f      	movs	r5, #15
 800b1fa:	4a32      	ldr	r2, [pc, #200]	; (800b2c4 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800b1fc:	58d4      	ldr	r4, [r2, r3]
 800b1fe:	43ac      	bics	r4, r5
 800b200:	50d4      	str	r4, [r2, r3]
 800b202:	58d4      	ldr	r4, [r2, r3]
 800b204:	3d01      	subs	r5, #1
 800b206:	432c      	orrs	r4, r5
 800b208:	50d4      	str	r4, [r2, r3]
 800b20a:	e5f9      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800b20c:	4a2d      	ldr	r2, [pc, #180]	; (800b2c4 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800b20e:	e7db      	b.n	800b1c8 <RemapAndLinkDMAtoUARTTx+0x4bc>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800b210:	4a31      	ldr	r2, [pc, #196]	; (800b2d8 <RemapAndLinkDMAtoUARTTx+0x5cc>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d000      	beq.n	800b218 <RemapAndLinkDMAtoUARTTx+0x50c>
 800b216:	e5f3      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
 800b218:	680b      	ldr	r3, [r1, #0]
 800b21a:	4a24      	ldr	r2, [pc, #144]	; (800b2ac <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d01b      	beq.n	800b258 <RemapAndLinkDMAtoUARTTx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800b220:	4a23      	ldr	r2, [pc, #140]	; (800b2b0 <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d022      	beq.n	800b26c <RemapAndLinkDMAtoUARTTx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800b226:	4a23      	ldr	r2, [pc, #140]	; (800b2b4 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d02b      	beq.n	800b284 <RemapAndLinkDMAtoUARTTx+0x578>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800b22c:	4a22      	ldr	r2, [pc, #136]	; (800b2b8 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d034      	beq.n	800b29c <RemapAndLinkDMAtoUARTTx+0x590>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800b232:	4a22      	ldr	r2, [pc, #136]	; (800b2bc <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d036      	beq.n	800b2a6 <RemapAndLinkDMAtoUARTTx+0x59a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800b238:	4a21      	ldr	r2, [pc, #132]	; (800b2c0 <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d000      	beq.n	800b240 <RemapAndLinkDMAtoUARTTx+0x534>
 800b23e:	e5df      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800b240:	23a8      	movs	r3, #168	; 0xa8
 800b242:	4a20      	ldr	r2, [pc, #128]	; (800b2c4 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800b244:	4d20      	ldr	r5, [pc, #128]	; (800b2c8 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800b246:	58d4      	ldr	r4, [r2, r3]
 800b248:	402c      	ands	r4, r5
 800b24a:	50d4      	str	r4, [r2, r3]
 800b24c:	24f0      	movs	r4, #240	; 0xf0
 800b24e:	58d5      	ldr	r5, [r2, r3]
 800b250:	0324      	lsls	r4, r4, #12
 800b252:	432c      	orrs	r4, r5
 800b254:	50d4      	str	r4, [r2, r3]
 800b256:	e5d3      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800b258:	23a8      	movs	r3, #168	; 0xa8
 800b25a:	26f0      	movs	r6, #240	; 0xf0
 800b25c:	4a1b      	ldr	r2, [pc, #108]	; (800b2cc <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800b25e:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800b260:	43b5      	bics	r5, r6
 800b262:	50d5      	str	r5, [r2, r3]
 800b264:	58d4      	ldr	r4, [r2, r3]
 800b266:	4334      	orrs	r4, r6
 800b268:	50d4      	str	r4, [r2, r3]
 800b26a:	e5c9      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800b26c:	4a17      	ldr	r2, [pc, #92]	; (800b2cc <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800b26e:	23a8      	movs	r3, #168	; 0xa8
 800b270:	4d17      	ldr	r5, [pc, #92]	; (800b2d0 <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800b272:	58d4      	ldr	r4, [r2, r3]
 800b274:	402c      	ands	r4, r5
 800b276:	50d4      	str	r4, [r2, r3]
 800b278:	24f0      	movs	r4, #240	; 0xf0
 800b27a:	58d5      	ldr	r5, [r2, r3]
 800b27c:	0224      	lsls	r4, r4, #8
 800b27e:	432c      	orrs	r4, r5
 800b280:	50d4      	str	r4, [r2, r3]
 800b282:	e5bd      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800b284:	23a8      	movs	r3, #168	; 0xa8
 800b286:	4a11      	ldr	r2, [pc, #68]	; (800b2cc <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800b288:	4d12      	ldr	r5, [pc, #72]	; (800b2d4 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800b28a:	58d4      	ldr	r4, [r2, r3]
 800b28c:	402c      	ands	r4, r5
 800b28e:	50d4      	str	r4, [r2, r3]
 800b290:	24f0      	movs	r4, #240	; 0xf0
 800b292:	58d5      	ldr	r5, [r2, r3]
 800b294:	0524      	lsls	r4, r4, #20
 800b296:	432c      	orrs	r4, r5
 800b298:	50d4      	str	r4, [r2, r3]
 800b29a:	e5b1      	b.n	800ae00 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800b29c:	23a8      	movs	r3, #168	; 0xa8
 800b29e:	4a09      	ldr	r2, [pc, #36]	; (800b2c4 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800b2a0:	260f      	movs	r6, #15
 800b2a2:	58d5      	ldr	r5, [r2, r3]
 800b2a4:	e7dc      	b.n	800b260 <RemapAndLinkDMAtoUARTTx+0x554>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800b2a6:	4a07      	ldr	r2, [pc, #28]	; (800b2c4 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800b2a8:	e7e1      	b.n	800b26e <RemapAndLinkDMAtoUARTTx+0x562>
 800b2aa:	46c0      	nop			; (mov r8, r8)
 800b2ac:	4002001c 	.word	0x4002001c
 800b2b0:	40020044 	.word	0x40020044
 800b2b4:	40020080 	.word	0x40020080
 800b2b8:	40020408 	.word	0x40020408
 800b2bc:	40020444 	.word	0x40020444
 800b2c0:	40020458 	.word	0x40020458
 800b2c4:	40020400 	.word	0x40020400
 800b2c8:	fff0ffff 	.word	0xfff0ffff
 800b2cc:	40020000 	.word	0x40020000
 800b2d0:	ffff0fff 	.word	0xffff0fff
 800b2d4:	f0ffffff 	.word	0xf0ffffff
 800b2d8:	40011c00 	.word	0x40011c00

0800b2dc <DMA_MSG_TX_Setup>:
	if (msgTxDMA[0].Parent == NULL)
 800b2dc:	4b0c      	ldr	r3, [pc, #48]	; (800b310 <DMA_MSG_TX_Setup+0x34>)
{	
 800b2de:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800b2e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2e2:	2a00      	cmp	r2, #0
 800b2e4:	d00f      	beq.n	800b306 <DMA_MSG_TX_Setup+0x2a>
	else if (msgTxDMA[1].Parent == NULL)
 800b2e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b2e8:	2a00      	cmp	r2, #0
 800b2ea:	d00b      	beq.n	800b304 <DMA_MSG_TX_Setup+0x28>
	else if (msgTxDMA[2].Parent == NULL)
 800b2ec:	2294      	movs	r2, #148	; 0x94
 800b2ee:	589a      	ldr	r2, [r3, r2]
 800b2f0:	2a00      	cmp	r2, #0
 800b2f2:	d00a      	beq.n	800b30a <DMA_MSG_TX_Setup+0x2e>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800b2f4:	0021      	movs	r1, r4
 800b2f6:	f7ff fd09 	bl	800ad0c <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	0020      	movs	r0, r4
 800b2fe:	f7ff f8a1 	bl	800a444 <SetupDMAInterrupts>
}
 800b302:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[1];
 800b304:	3338      	adds	r3, #56	; 0x38
 800b306:	001c      	movs	r4, r3
 800b308:	e7f4      	b.n	800b2f4 <DMA_MSG_TX_Setup+0x18>
		hDMA = &msgTxDMA[2];  
 800b30a:	3370      	adds	r3, #112	; 0x70
 800b30c:	001c      	movs	r4, r3
 800b30e:	e7f1      	b.n	800b2f4 <DMA_MSG_TX_Setup+0x18>
 800b310:	20001c30 	.word	0x20001c30

0800b314 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b314:	2310      	movs	r3, #16
 800b316:	4807      	ldr	r0, [pc, #28]	; (800b334 <CRC_Init+0x20>)
{
 800b318:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b31a:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800b31c:	4b06      	ldr	r3, [pc, #24]	; (800b338 <CRC_Init+0x24>)
 800b31e:	6003      	str	r3, [r0, #0]
 800b320:	2300      	movs	r3, #0
 800b322:	8083      	strh	r3, [r0, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800b324:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800b326:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800b328:	3303      	adds	r3, #3
 800b32a:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800b32c:	f004 fcce 	bl	800fccc <HAL_CRC_Init>
}
 800b330:	bd10      	pop	{r4, pc}
 800b332:	46c0      	nop			; (mov r8, r8)
 800b334:	20007130 	.word	0x20007130
 800b338:	40023000 	.word	0x40023000

0800b33c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800b33c:	2340      	movs	r3, #64	; 0x40
 800b33e:	4a05      	ldr	r2, [pc, #20]	; (800b354 <HAL_CRC_MspInit+0x18>)
{
 800b340:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800b342:	6951      	ldr	r1, [r2, #20]
 800b344:	4319      	orrs	r1, r3
 800b346:	6151      	str	r1, [r2, #20]
 800b348:	6952      	ldr	r2, [r2, #20]
 800b34a:	4013      	ands	r3, r2
 800b34c:	9301      	str	r3, [sp, #4]
 800b34e:	9b01      	ldr	r3, [sp, #4]
}
 800b350:	b002      	add	sp, #8
 800b352:	4770      	bx	lr
 800b354:	40021000 	.word	0x40021000

0800b358 <CalculateCRC8>:
 */
uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800b358:	2300      	movs	r3, #0
{
 800b35a:	b570      	push	{r4, r5, r6, lr}
 800b35c:	b082      	sub	sp, #8
 800b35e:	0005      	movs	r5, r0
 800b360:	000c      	movs	r4, r1
  uint8_t temp_buffer[4] = {0};
 800b362:	9301      	str	r3, [sp, #4]

	return pTemp;
  }
  
else
	return 0;
 800b364:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800b366:	2d00      	cmp	r5, #0
 800b368:	d019      	beq.n	800b39e <CalculateCRC8+0x46>
 800b36a:	2900      	cmp	r1, #0
 800b36c:	d017      	beq.n	800b39e <CalculateCRC8+0x46>
	if(size < 4)
 800b36e:	2903      	cmp	r1, #3
 800b370:	d817      	bhi.n	800b3a2 <CalculateCRC8+0x4a>
			temp_buffer[i] = pBuffer[temp_index++];
 800b372:	466a      	mov	r2, sp
 800b374:	782b      	ldrb	r3, [r5, #0]
 800b376:	7113      	strb	r3, [r2, #4]
			if(--size == 0) break;
 800b378:	2901      	cmp	r1, #1
 800b37a:	d00a      	beq.n	800b392 <CalculateCRC8+0x3a>
		for(int i=0; i<4; i++)
 800b37c:	2300      	movs	r3, #0
 800b37e:	3c02      	subs	r4, #2
 800b380:	b2a4      	uxth	r4, r4
 800b382:	3401      	adds	r4, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800b384:	4669      	mov	r1, sp
		for(int i=0; i<4; i++)
 800b386:	3301      	adds	r3, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800b388:	5cea      	ldrb	r2, [r5, r3]
 800b38a:	3104      	adds	r1, #4
 800b38c:	54ca      	strb	r2, [r1, r3]
			if(--size == 0) break;
 800b38e:	429c      	cmp	r4, r3
 800b390:	d1f8      	bne.n	800b384 <CalculateCRC8+0x2c>
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b392:	2201      	movs	r2, #1
 800b394:	a901      	add	r1, sp, #4
 800b396:	4814      	ldr	r0, [pc, #80]	; (800b3e8 <CalculateCRC8+0x90>)
 800b398:	f004 fcf6 	bl	800fd88 <HAL_CRC_Calculate>
 800b39c:	b2c0      	uxtb	r0, r0
}
 800b39e:	b002      	add	sp, #8
 800b3a0:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800b3a2:	4e11      	ldr	r6, [pc, #68]	; (800b3e8 <CalculateCRC8+0x90>)
 800b3a4:	088a      	lsrs	r2, r1, #2
 800b3a6:	0030      	movs	r0, r6
 800b3a8:	0029      	movs	r1, r5
 800b3aa:	f004 fced 	bl	800fd88 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800b3ae:	2203      	movs	r2, #3
 800b3b0:	0013      	movs	r3, r2
 800b3b2:	4023      	ands	r3, r4
 800b3b4:	d015      	beq.n	800b3e2 <CalculateCRC8+0x8a>
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	b299      	uxth	r1, r3
			for(int i=0; i<4; i++)
 800b3ba:	2300      	movs	r3, #0
			temp_index = size - (size%4);
 800b3bc:	4394      	bics	r4, r2
 800b3be:	b2e4      	uxtb	r4, r4
				temp_buffer[i] = pBuffer[temp_index++];
 800b3c0:	1c62      	adds	r2, r4, #1
 800b3c2:	5d28      	ldrb	r0, [r5, r4]
 800b3c4:	466c      	mov	r4, sp
 800b3c6:	3404      	adds	r4, #4
 800b3c8:	b2d2      	uxtb	r2, r2
 800b3ca:	54e0      	strb	r0, [r4, r3]
				if(--size == 0) break;
 800b3cc:	4299      	cmp	r1, r3
 800b3ce:	d003      	beq.n	800b3d8 <CalculateCRC8+0x80>
			for(int i=0; i<4; i++)
 800b3d0:	3301      	adds	r3, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800b3d2:	0014      	movs	r4, r2
			for(int i=0; i<4; i++)
 800b3d4:	2b04      	cmp	r3, #4
 800b3d6:	d1f3      	bne.n	800b3c0 <CalculateCRC8+0x68>
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b3d8:	2201      	movs	r2, #1
 800b3da:	a901      	add	r1, sp, #4
 800b3dc:	0030      	movs	r0, r6
 800b3de:	f004 fca9 	bl	800fd34 <HAL_CRC_Accumulate>
 800b3e2:	b2c0      	uxtb	r0, r0
 800b3e4:	e7db      	b.n	800b39e <CalculateCRC8+0x46>
 800b3e6:	46c0      	nop			; (mov r8, r8)
 800b3e8:	20007130 	.word	0x20007130

0800b3ec <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ee:	000d      	movs	r5, r1
 800b3f0:	0006      	movs	r6, r0
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b3f2:	4c25      	ldr	r4, [pc, #148]	; (800b488 <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800b3f4:	f005 fa5c 	bl	80108b0 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b3f8:	4924      	ldr	r1, [pc, #144]	; (800b48c <EE_VerifyPageFullWriteVariable+0xa0>)
 800b3fa:	880a      	ldrh	r2, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b3fc:	8823      	ldrh	r3, [r4, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b3fe:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b400:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800b402:	2b00      	cmp	r3, #0
 800b404:	d105      	bne.n	800b412 <EE_VerifyPageFullWriteVariable+0x26>
				if(PageStatusA == RECEIVE_DATA){
 800b406:	4b22      	ldr	r3, [pc, #136]	; (800b490 <EE_VerifyPageFullWriteVariable+0xa4>)
 800b408:	429a      	cmp	r2, r3
 800b40a:	d007      	beq.n	800b41c <EE_VerifyPageFullWriteVariable+0x30>
 800b40c:	4a21      	ldr	r2, [pc, #132]	; (800b494 <EE_VerifyPageFullWriteVariable+0xa8>)
 800b40e:	0023      	movs	r3, r4
 800b410:	e007      	b.n	800b422 <EE_VerifyPageFullWriteVariable+0x36>
			else if(PageStatusA == VALID_PAGE){
 800b412:	2a00      	cmp	r2, #0
 800b414:	d122      	bne.n	800b45c <EE_VerifyPageFullWriteVariable+0x70>
				if(PageStatusB == RECEIVE_DATA){
 800b416:	4a1e      	ldr	r2, [pc, #120]	; (800b490 <EE_VerifyPageFullWriteVariable+0xa4>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d0f7      	beq.n	800b40c <EE_VerifyPageFullWriteVariable+0x20>
 800b41c:	000c      	movs	r4, r1
 800b41e:	000b      	movs	r3, r1
 800b420:	4a1d      	ldr	r2, [pc, #116]	; (800b498 <EE_VerifyPageFullWriteVariable+0xac>)
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	3301      	adds	r3, #1
 800b426:	d103      	bne.n	800b430 <EE_VerifyPageFullWriteVariable+0x44>
 800b428:	e009      	b.n	800b43e <EE_VerifyPageFullWriteVariable+0x52>
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	3301      	adds	r3, #1
 800b42e:	d006      	beq.n	800b43e <EE_VerifyPageFullWriteVariable+0x52>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800b430:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800b432:	42a2      	cmp	r2, r4
 800b434:	d8f9      	bhi.n	800b42a <EE_VerifyPageFullWriteVariable+0x3e>
		}
	}
	
	HAL_FLASH_Lock();
 800b436:	f005 fa4d 	bl	80108d4 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800b43a:	2080      	movs	r0, #128	; 0x80
}
 800b43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800b43e:	002a      	movs	r2, r5
 800b440:	2300      	movs	r3, #0
 800b442:	0021      	movs	r1, r4
 800b444:	2001      	movs	r0, #1
 800b446:	f005 fa93 	bl	8010970 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b44a:	4814      	ldr	r0, [pc, #80]	; (800b49c <EE_VerifyPageFullWriteVariable+0xb0>)
 800b44c:	f005 fa4c 	bl	80108e8 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800b450:	2800      	cmp	r0, #0
 800b452:	d005      	beq.n	800b460 <EE_VerifyPageFullWriteVariable+0x74>
			return pFlash.ErrorCode;
 800b454:	4b12      	ldr	r3, [pc, #72]	; (800b4a0 <EE_VerifyPageFullWriteVariable+0xb4>)
 800b456:	69d8      	ldr	r0, [r3, #28]
 800b458:	b280      	uxth	r0, r0
 800b45a:	e7ef      	b.n	800b43c <EE_VerifyPageFullWriteVariable+0x50>
		return NO_VALID_PAGE;
 800b45c:	20ab      	movs	r0, #171	; 0xab
 800b45e:	e7ed      	b.n	800b43c <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b460:	2701      	movs	r7, #1
 800b462:	4d10      	ldr	r5, [pc, #64]	; (800b4a4 <EE_VerifyPageFullWriteVariable+0xb8>)
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b464:	1ca1      	adds	r1, r4, #2
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b466:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b468:	0032      	movs	r2, r6
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b46a:	43bb      	bics	r3, r7
 800b46c:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b46e:	2001      	movs	r0, #1
 800b470:	2300      	movs	r3, #0
 800b472:	f005 fa7d 	bl	8010970 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b476:	4809      	ldr	r0, [pc, #36]	; (800b49c <EE_VerifyPageFullWriteVariable+0xb0>)
 800b478:	f005 fa36 	bl	80108e8 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d1e9      	bne.n	800b454 <EE_VerifyPageFullWriteVariable+0x68>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b480:	692b      	ldr	r3, [r5, #16]
 800b482:	43bb      	bics	r3, r7
 800b484:	612b      	str	r3, [r5, #16]
 800b486:	e7e5      	b.n	800b454 <EE_VerifyPageFullWriteVariable+0x68>
 800b488:	0801f000 	.word	0x0801f000
 800b48c:	0801e000 	.word	0x0801e000
 800b490:	0000eeee 	.word	0x0000eeee
 800b494:	0801fffe 	.word	0x0801fffe
 800b498:	0801effe 	.word	0x0801effe
 800b49c:	0000c350 	.word	0x0000c350
 800b4a0:	200072b0 	.word	0x200072b0
 800b4a4:	40022000 	.word	0x40022000

0800b4a8 <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b4a8:	4b11      	ldr	r3, [pc, #68]	; (800b4f0 <EE_ReadVariable+0x48>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800b4aa:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b4ac:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b4ae:	4b11      	ldr	r3, [pc, #68]	; (800b4f4 <EE_ReadVariable+0x4c>)
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800b4b4:	2a00      	cmp	r2, #0
 800b4b6:	d005      	beq.n	800b4c4 <EE_ReadVariable+0x1c>
			else if(PageStatusB == VALID_PAGE){
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d117      	bne.n	800b4ec <EE_ReadVariable+0x44>
 800b4bc:	4b0e      	ldr	r3, [pc, #56]	; (800b4f8 <EE_ReadVariable+0x50>)
 800b4be:	4c0f      	ldr	r4, [pc, #60]	; (800b4fc <EE_ReadVariable+0x54>)
 800b4c0:	001a      	movs	r2, r3
 800b4c2:	e002      	b.n	800b4ca <EE_ReadVariable+0x22>
			if(PageStatusA == VALID_PAGE){
 800b4c4:	4b0e      	ldr	r3, [pc, #56]	; (800b500 <EE_ReadVariable+0x58>)
 800b4c6:	4c0f      	ldr	r4, [pc, #60]	; (800b504 <EE_ReadVariable+0x5c>)
 800b4c8:	001a      	movs	r2, r3
		AddressValue =(*(__IO uint16_t* )Address);
 800b4ca:	8812      	ldrh	r2, [r2, #0]
		if(AddressValue == VirtAddress){
 800b4cc:	4290      	cmp	r0, r2
 800b4ce:	d103      	bne.n	800b4d8 <EE_ReadVariable+0x30>
 800b4d0:	e007      	b.n	800b4e2 <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 800b4d2:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 800b4d4:	4282      	cmp	r2, r0
 800b4d6:	d004      	beq.n	800b4e2 <EE_ReadVariable+0x3a>
			Address =Address - 4;
 800b4d8:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800b4da:	42a3      	cmp	r3, r4
 800b4dc:	d8f9      	bhi.n	800b4d2 <EE_ReadVariable+0x2a>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800b4de:	2001      	movs	r0, #1
}
 800b4e0:	bd10      	pop	{r4, pc}
			*Data =(*(__IO uint16_t* )(Address - 2));
 800b4e2:	3b02      	subs	r3, #2
 800b4e4:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 800b4e6:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 800b4e8:	800b      	strh	r3, [r1, #0]
			break;
 800b4ea:	e7f9      	b.n	800b4e0 <EE_ReadVariable+0x38>
		return NO_VALID_PAGE;
 800b4ec:	20ab      	movs	r0, #171	; 0xab
 800b4ee:	e7f7      	b.n	800b4e0 <EE_ReadVariable+0x38>
 800b4f0:	0801e000 	.word	0x0801e000
 800b4f4:	0801f000 	.word	0x0801f000
 800b4f8:	0801fffe 	.word	0x0801fffe
 800b4fc:	0801f002 	.word	0x0801f002
 800b500:	0801effe 	.word	0x0801effe
 800b504:	0801e002 	.word	0x0801e002

0800b508 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b50a:	46d6      	mov	lr, sl
 800b50c:	4646      	mov	r6, r8
 800b50e:	464f      	mov	r7, r9
 800b510:	000c      	movs	r4, r1
 800b512:	b5c0      	push	{r6, r7, lr}
 800b514:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 800b516:	f005 f9cb 	bl	80108b0 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b51a:	0021      	movs	r1, r4
 800b51c:	0030      	movs	r0, r6
 800b51e:	f7ff ff65 	bl	800b3ec <EE_VerifyPageFullWriteVariable>
 800b522:	0005      	movs	r5, r0
	if(Status == PAGE_FULL){
 800b524:	2880      	cmp	r0, #128	; 0x80
 800b526:	d007      	beq.n	800b538 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800b528:	f005 f9d4 	bl	80108d4 <HAL_FLASH_Lock>
}
 800b52c:	0028      	movs	r0, r5
 800b52e:	bc1c      	pop	{r2, r3, r4}
 800b530:	4690      	mov	r8, r2
 800b532:	4699      	mov	r9, r3
 800b534:	46a2      	mov	sl, r4
 800b536:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800b538:	f005 f9ba 	bl	80108b0 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b53c:	4935      	ldr	r1, [pc, #212]	; (800b614 <EE_WriteVariable+0x10c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b53e:	4a36      	ldr	r2, [pc, #216]	; (800b618 <EE_WriteVariable+0x110>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b540:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b542:	8813      	ldrh	r3, [r2, #0]
 800b544:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800b546:	2800      	cmp	r0, #0
 800b548:	d013      	beq.n	800b572 <EE_WriteVariable+0x6a>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800b54a:	352b      	adds	r5, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1eb      	bne.n	800b528 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800b550:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800b552:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800b554:	4a31      	ldr	r2, [pc, #196]	; (800b61c <EE_WriteVariable+0x114>)
 800b556:	2300      	movs	r3, #0
 800b558:	4641      	mov	r1, r8
 800b55a:	2001      	movs	r0, #1
 800b55c:	f005 fa08 	bl	8010970 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b560:	482f      	ldr	r0, [pc, #188]	; (800b620 <EE_WriteVariable+0x118>)
 800b562:	f005 f9c1 	bl	80108e8 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800b566:	2800      	cmp	r0, #0
 800b568:	d006      	beq.n	800b578 <EE_WriteVariable+0x70>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
		return pFlash.ErrorCode;
 800b56a:	4b2e      	ldr	r3, [pc, #184]	; (800b624 <EE_WriteVariable+0x11c>)
 800b56c:	69dd      	ldr	r5, [r3, #28]
 800b56e:	b2ad      	uxth	r5, r5
 800b570:	e7da      	b.n	800b528 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800b572:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800b574:	4690      	mov	r8, r2
 800b576:	e7ed      	b.n	800b554 <EE_WriteVariable+0x4c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b578:	2101      	movs	r1, #1
 800b57a:	4a2b      	ldr	r2, [pc, #172]	; (800b628 <EE_WriteVariable+0x120>)
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b57c:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b57e:	6913      	ldr	r3, [r2, #16]
 800b580:	438b      	bics	r3, r1
 800b582:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b584:	0021      	movs	r1, r4
 800b586:	f7ff ff31 	bl	800b3ec <EE_VerifyPageFullWriteVariable>
 800b58a:	1e05      	subs	r5, r0, #0
	if(EepromStatus != HAL_OK){
 800b58c:	d1cc      	bne.n	800b528 <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b58e:	4b27      	ldr	r3, [pc, #156]	; (800b62c <EE_WriteVariable+0x124>)
 800b590:	2401      	movs	r4, #1
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b592:	4f27      	ldr	r7, [pc, #156]	; (800b630 <EE_WriteVariable+0x128>)
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b594:	469a      	mov	sl, r3
 800b596:	e003      	b.n	800b5a0 <EE_WriteVariable+0x98>
 800b598:	3401      	adds	r4, #1
 800b59a:	b2a4      	uxth	r4, r4
 800b59c:	4554      	cmp	r4, sl
 800b59e:	d00f      	beq.n	800b5c0 <EE_WriteVariable+0xb8>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800b5a0:	42a6      	cmp	r6, r4
 800b5a2:	d0f9      	beq.n	800b598 <EE_WriteVariable+0x90>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b5a4:	0039      	movs	r1, r7
 800b5a6:	0020      	movs	r0, r4
 800b5a8:	f7ff ff7e 	bl	800b4a8 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800b5ac:	2801      	cmp	r0, #1
 800b5ae:	d0f3      	beq.n	800b598 <EE_WriteVariable+0x90>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b5b0:	8839      	ldrh	r1, [r7, #0]
 800b5b2:	0020      	movs	r0, r4
 800b5b4:	f7ff ff1a 	bl	800b3ec <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d0ed      	beq.n	800b598 <EE_WriteVariable+0x90>
 800b5bc:	0005      	movs	r5, r0
 800b5be:	e7b3      	b.n	800b528 <EE_WriteVariable+0x20>
	FLASH_PageErase(OldPageAddress);
 800b5c0:	4648      	mov	r0, r9
 800b5c2:	f005 faa5 	bl	8010b10 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b5c6:	4816      	ldr	r0, [pc, #88]	; (800b620 <EE_WriteVariable+0x118>)
 800b5c8:	f005 f98e 	bl	80108e8 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d1cc      	bne.n	800b56a <EE_WriteVariable+0x62>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800b5d0:	2080      	movs	r0, #128	; 0x80
 800b5d2:	0100      	lsls	r0, r0, #4
 800b5d4:	4448      	add	r0, r9
 800b5d6:	f005 fa9b 	bl	8010b10 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b5da:	4811      	ldr	r0, [pc, #68]	; (800b620 <EE_WriteVariable+0x118>)
 800b5dc:	f005 f984 	bl	80108e8 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d1c2      	bne.n	800b56a <EE_WriteVariable+0x62>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b5e4:	2202      	movs	r2, #2
 800b5e6:	4c10      	ldr	r4, [pc, #64]	; (800b628 <EE_WriteVariable+0x120>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800b5e8:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b5ea:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800b5ec:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b5ee:	4393      	bics	r3, r2
 800b5f0:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f005 f9bb 	bl	8010970 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b5fa:	4809      	ldr	r0, [pc, #36]	; (800b620 <EE_WriteVariable+0x118>)
 800b5fc:	f005 f974 	bl	80108e8 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b600:	2800      	cmp	r0, #0
 800b602:	d1b2      	bne.n	800b56a <EE_WriteVariable+0x62>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b604:	2201      	movs	r2, #1
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	4393      	bics	r3, r2
 800b60a:	6123      	str	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
 800b60c:	f005 f962 	bl	80108d4 <HAL_FLASH_Lock>
 800b610:	e78a      	b.n	800b528 <EE_WriteVariable+0x20>
 800b612:	46c0      	nop			; (mov r8, r8)
 800b614:	0801e000 	.word	0x0801e000
 800b618:	0801f000 	.word	0x0801f000
 800b61c:	0000eeee 	.word	0x0000eeee
 800b620:	0000c350 	.word	0x0000c350
 800b624:	200072b0 	.word	0x200072b0
 800b628:	40022000 	.word	0x40022000
 800b62c:	00000401 	.word	0x00000401
 800b630:	20001e28 	.word	0x20001e28

0800b634 <EE_Format>:
uint16_t EE_Format(void){
 800b634:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 800b636:	f005 f93b 	bl	80108b0 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b63a:	481f      	ldr	r0, [pc, #124]	; (800b6b8 <EE_Format+0x84>)
 800b63c:	f005 fa68 	bl	8010b10 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b640:	481e      	ldr	r0, [pc, #120]	; (800b6bc <EE_Format+0x88>)
 800b642:	f005 f951 	bl	80108e8 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b646:	2800      	cmp	r0, #0
 800b648:	d003      	beq.n	800b652 <EE_Format+0x1e>
			return pFlash.ErrorCode;
 800b64a:	4b1d      	ldr	r3, [pc, #116]	; (800b6c0 <EE_Format+0x8c>)
 800b64c:	69d8      	ldr	r0, [r3, #28]
 800b64e:	b280      	uxth	r0, r0
}
 800b650:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b652:	481c      	ldr	r0, [pc, #112]	; (800b6c4 <EE_Format+0x90>)
 800b654:	f005 fa5c 	bl	8010b10 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b658:	4818      	ldr	r0, [pc, #96]	; (800b6bc <EE_Format+0x88>)
 800b65a:	f005 f945 	bl	80108e8 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800b65e:	2800      	cmp	r0, #0
 800b660:	d1f3      	bne.n	800b64a <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b662:	2202      	movs	r2, #2
 800b664:	4c18      	ldr	r4, [pc, #96]	; (800b6c8 <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b666:	4914      	ldr	r1, [pc, #80]	; (800b6b8 <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b668:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b66a:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b66c:	4393      	bics	r3, r2
 800b66e:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b670:	2200      	movs	r2, #0
 800b672:	2300      	movs	r3, #0
 800b674:	f005 f97c 	bl	8010970 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b678:	4810      	ldr	r0, [pc, #64]	; (800b6bc <EE_Format+0x88>)
 800b67a:	f005 f935 	bl	80108e8 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b67e:	2800      	cmp	r0, #0
 800b680:	d1e3      	bne.n	800b64a <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b682:	2501      	movs	r5, #1
 800b684:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b686:	4811      	ldr	r0, [pc, #68]	; (800b6cc <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b688:	43ab      	bics	r3, r5
 800b68a:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b68c:	f005 fa40 	bl	8010b10 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b690:	480a      	ldr	r0, [pc, #40]	; (800b6bc <EE_Format+0x88>)
 800b692:	f005 f929 	bl	80108e8 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b696:	2800      	cmp	r0, #0
 800b698:	d1d7      	bne.n	800b64a <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b69a:	480d      	ldr	r0, [pc, #52]	; (800b6d0 <EE_Format+0x9c>)
 800b69c:	f005 fa38 	bl	8010b10 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b6a0:	4806      	ldr	r0, [pc, #24]	; (800b6bc <EE_Format+0x88>)
 800b6a2:	f005 f921 	bl	80108e8 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d1cf      	bne.n	800b64a <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b6aa:	6923      	ldr	r3, [r4, #16]
 800b6ac:	43ab      	bics	r3, r5
 800b6ae:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 800b6b0:	f005 f910 	bl	80108d4 <HAL_FLASH_Lock>
	return FlashStatus;
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	e7cb      	b.n	800b650 <EE_Format+0x1c>
 800b6b8:	0801e000 	.word	0x0801e000
 800b6bc:	0000c350 	.word	0x0000c350
 800b6c0:	200072b0 	.word	0x200072b0
 800b6c4:	0801e800 	.word	0x0801e800
 800b6c8:	40022000 	.word	0x40022000
 800b6cc:	0801f000 	.word	0x0801f000
 800b6d0:	0801f800 	.word	0x0801f800

0800b6d4 <EE_Init>:
uint16_t EE_Init(void){
 800b6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6d6:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b6d8:	4c9d      	ldr	r4, [pc, #628]	; (800b950 <EE_Init+0x27c>)
uint16_t EE_Init(void){
 800b6da:	b500      	push	{lr}
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b6dc:	4d9d      	ldr	r5, [pc, #628]	; (800b954 <EE_Init+0x280>)
	HAL_FLASH_Unlock();
 800b6de:	f005 f8e7 	bl	80108b0 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b6e2:	8823      	ldrh	r3, [r4, #0]
	switch(PageStatusA){
 800b6e4:	499c      	ldr	r1, [pc, #624]	; (800b958 <EE_Init+0x284>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b6e6:	882a      	ldrh	r2, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b6e8:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b6ea:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800b6ec:	428b      	cmp	r3, r1
 800b6ee:	d100      	bne.n	800b6f2 <EE_Init+0x1e>
 800b6f0:	e06f      	b.n	800b7d2 <EE_Init+0xfe>
 800b6f2:	489a      	ldr	r0, [pc, #616]	; (800b95c <EE_Init+0x288>)
 800b6f4:	4283      	cmp	r3, r0
 800b6f6:	d05c      	beq.n	800b7b2 <EE_Init+0xde>
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00e      	beq.n	800b71a <EE_Init+0x46>
			FlashStatus =EE_Format();
 800b6fc:	f7ff ff9a 	bl	800b634 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b700:	4897      	ldr	r0, [pc, #604]	; (800b960 <EE_Init+0x28c>)
 800b702:	f005 f8f1 	bl	80108e8 <FLASH_WaitForLastOperation>
 800b706:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 800b708:	2d00      	cmp	r5, #0
 800b70a:	d102      	bne.n	800b712 <EE_Init+0x3e>
	HAL_FLASH_Lock();
 800b70c:	f005 f8e2 	bl	80108d4 <HAL_FLASH_Lock>
	return HAL_OK;
 800b710:	2500      	movs	r5, #0
}
 800b712:	0028      	movs	r0, r5
 800b714:	bc04      	pop	{r2}
 800b716:	4690      	mov	r8, r2
 800b718:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800b71a:	2a00      	cmp	r2, #0
 800b71c:	d0ee      	beq.n	800b6fc <EE_Init+0x28>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800b71e:	4282      	cmp	r2, r0
 800b720:	d100      	bne.n	800b724 <EE_Init+0x50>
 800b722:	e103      	b.n	800b92c <EE_Init+0x258>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b724:	4b8f      	ldr	r3, [pc, #572]	; (800b964 <EE_Init+0x290>)
	int16_t x =-1;
 800b726:	2601      	movs	r6, #1
 800b728:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b72a:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800b72c:	4f8e      	ldr	r7, [pc, #568]	; (800b968 <EE_Init+0x294>)
	int16_t x =-1;
 800b72e:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800b730:	883b      	ldrh	r3, [r7, #0]
 800b732:	b2a5      	uxth	r5, r4
 800b734:	42ab      	cmp	r3, r5
 800b736:	d100      	bne.n	800b73a <EE_Init+0x66>
						x =VarIdx;
 800b738:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800b73a:	42b4      	cmp	r4, r6
 800b73c:	d010      	beq.n	800b760 <EE_Init+0x8c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b73e:	4641      	mov	r1, r8
 800b740:	0028      	movs	r0, r5
 800b742:	f7ff feb1 	bl	800b4a8 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800b746:	2801      	cmp	r0, #1
 800b748:	d00a      	beq.n	800b760 <EE_Init+0x8c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b74a:	4643      	mov	r3, r8
 800b74c:	0028      	movs	r0, r5
 800b74e:	8819      	ldrh	r1, [r3, #0]
 800b750:	f7ff fe4c 	bl	800b3ec <EE_VerifyPageFullWriteVariable>
 800b754:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b756:	4882      	ldr	r0, [pc, #520]	; (800b960 <EE_Init+0x28c>)
 800b758:	f005 f8c6 	bl	80108e8 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d1d8      	bne.n	800b712 <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b760:	4b82      	ldr	r3, [pc, #520]	; (800b96c <EE_Init+0x298>)
 800b762:	3401      	adds	r4, #1
 800b764:	429c      	cmp	r4, r3
 800b766:	d1e3      	bne.n	800b730 <EE_Init+0x5c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b768:	2200      	movs	r2, #0
 800b76a:	2300      	movs	r3, #0
 800b76c:	4979      	ldr	r1, [pc, #484]	; (800b954 <EE_Init+0x280>)
 800b76e:	2001      	movs	r0, #1
 800b770:	f005 f8fe 	bl	8010970 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b774:	487a      	ldr	r0, [pc, #488]	; (800b960 <EE_Init+0x28c>)
 800b776:	f005 f8b7 	bl	80108e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d125      	bne.n	800b7ca <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b77e:	2201      	movs	r2, #1
 800b780:	4c7b      	ldr	r4, [pc, #492]	; (800b970 <EE_Init+0x29c>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b782:	4873      	ldr	r0, [pc, #460]	; (800b950 <EE_Init+0x27c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b784:	6923      	ldr	r3, [r4, #16]
 800b786:	4393      	bics	r3, r2
 800b788:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b78a:	f005 f9c1 	bl	8010b10 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b78e:	4874      	ldr	r0, [pc, #464]	; (800b960 <EE_Init+0x28c>)
 800b790:	f005 f8aa 	bl	80108e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b794:	2800      	cmp	r0, #0
 800b796:	d118      	bne.n	800b7ca <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b798:	4876      	ldr	r0, [pc, #472]	; (800b974 <EE_Init+0x2a0>)
 800b79a:	f005 f9b9 	bl	8010b10 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b79e:	4870      	ldr	r0, [pc, #448]	; (800b960 <EE_Init+0x28c>)
 800b7a0:	f005 f8a2 	bl	80108e8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	d110      	bne.n	800b7ca <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	4393      	bics	r3, r2
 800b7ae:	6123      	str	r3, [r4, #16]
 800b7b0:	e7ac      	b.n	800b70c <EE_Init+0x38>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800b7b2:	2a00      	cmp	r2, #0
 800b7b4:	d07b      	beq.n	800b8ae <EE_Init+0x1da>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800b7b6:	428a      	cmp	r2, r1
 800b7b8:	d100      	bne.n	800b7bc <EE_Init+0xe8>
 800b7ba:	e08f      	b.n	800b8dc <EE_Init+0x208>
				FlashStatus =EE_Format();
 800b7bc:	f7ff ff3a 	bl	800b634 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b7c0:	4867      	ldr	r0, [pc, #412]	; (800b960 <EE_Init+0x28c>)
 800b7c2:	f005 f891 	bl	80108e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d0a0      	beq.n	800b70c <EE_Init+0x38>
						return pFlash.ErrorCode;
 800b7ca:	4b6b      	ldr	r3, [pc, #428]	; (800b978 <EE_Init+0x2a4>)
 800b7cc:	69dd      	ldr	r5, [r3, #28]
 800b7ce:	b2ad      	uxth	r5, r5
 800b7d0:	e79f      	b.n	800b712 <EE_Init+0x3e>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800b7d2:	2a00      	cmp	r2, #0
 800b7d4:	d143      	bne.n	800b85e <EE_Init+0x18a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b7d6:	4b63      	ldr	r3, [pc, #396]	; (800b964 <EE_Init+0x290>)
	int16_t x =-1;
 800b7d8:	2601      	movs	r6, #1
 800b7da:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b7dc:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800b7de:	4f67      	ldr	r7, [pc, #412]	; (800b97c <EE_Init+0x2a8>)
	int16_t x =-1;
 800b7e0:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800b7e2:	883b      	ldrh	r3, [r7, #0]
 800b7e4:	b2a5      	uxth	r5, r4
 800b7e6:	42ab      	cmp	r3, r5
 800b7e8:	d100      	bne.n	800b7ec <EE_Init+0x118>
						x =VarIdx;
 800b7ea:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800b7ec:	42b4      	cmp	r4, r6
 800b7ee:	d011      	beq.n	800b814 <EE_Init+0x140>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b7f0:	4641      	mov	r1, r8
 800b7f2:	0028      	movs	r0, r5
 800b7f4:	f7ff fe58 	bl	800b4a8 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800b7f8:	2801      	cmp	r0, #1
 800b7fa:	d00b      	beq.n	800b814 <EE_Init+0x140>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b7fc:	4643      	mov	r3, r8
 800b7fe:	0028      	movs	r0, r5
 800b800:	8819      	ldrh	r1, [r3, #0]
 800b802:	f7ff fdf3 	bl	800b3ec <EE_VerifyPageFullWriteVariable>
 800b806:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b808:	4855      	ldr	r0, [pc, #340]	; (800b960 <EE_Init+0x28c>)
 800b80a:	f005 f86d 	bl	80108e8 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800b80e:	2800      	cmp	r0, #0
 800b810:	d000      	beq.n	800b814 <EE_Init+0x140>
 800b812:	e77e      	b.n	800b712 <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b814:	4b55      	ldr	r3, [pc, #340]	; (800b96c <EE_Init+0x298>)
 800b816:	3401      	adds	r4, #1
 800b818:	429c      	cmp	r4, r3
 800b81a:	d1e2      	bne.n	800b7e2 <EE_Init+0x10e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b81c:	2200      	movs	r2, #0
 800b81e:	2300      	movs	r3, #0
 800b820:	494b      	ldr	r1, [pc, #300]	; (800b950 <EE_Init+0x27c>)
 800b822:	2001      	movs	r0, #1
 800b824:	f005 f8a4 	bl	8010970 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b828:	484d      	ldr	r0, [pc, #308]	; (800b960 <EE_Init+0x28c>)
 800b82a:	f005 f85d 	bl	80108e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b82e:	2800      	cmp	r0, #0
 800b830:	d1cb      	bne.n	800b7ca <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b832:	2201      	movs	r2, #1
 800b834:	4c4e      	ldr	r4, [pc, #312]	; (800b970 <EE_Init+0x29c>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b836:	4847      	ldr	r0, [pc, #284]	; (800b954 <EE_Init+0x280>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b838:	6923      	ldr	r3, [r4, #16]
 800b83a:	4393      	bics	r3, r2
 800b83c:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b83e:	f005 f967 	bl	8010b10 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b842:	4847      	ldr	r0, [pc, #284]	; (800b960 <EE_Init+0x28c>)
 800b844:	f005 f850 	bl	80108e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b848:	2800      	cmp	r0, #0
 800b84a:	d1be      	bne.n	800b7ca <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b84c:	484c      	ldr	r0, [pc, #304]	; (800b980 <EE_Init+0x2ac>)
 800b84e:	f005 f95f 	bl	8010b10 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b852:	4843      	ldr	r0, [pc, #268]	; (800b960 <EE_Init+0x28c>)
 800b854:	f005 f848 	bl	80108e8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b858:	2800      	cmp	r0, #0
 800b85a:	d0a5      	beq.n	800b7a8 <EE_Init+0xd4>
 800b85c:	e7b5      	b.n	800b7ca <EE_Init+0xf6>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800b85e:	4b3f      	ldr	r3, [pc, #252]	; (800b95c <EE_Init+0x288>)
 800b860:	429a      	cmp	r2, r3
 800b862:	d1ab      	bne.n	800b7bc <EE_Init+0xe8>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b864:	0028      	movs	r0, r5
 800b866:	f005 f953 	bl	8010b10 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b86a:	483d      	ldr	r0, [pc, #244]	; (800b960 <EE_Init+0x28c>)
 800b86c:	f005 f83c 	bl	80108e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b870:	2800      	cmp	r0, #0
 800b872:	d1aa      	bne.n	800b7ca <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b874:	4842      	ldr	r0, [pc, #264]	; (800b980 <EE_Init+0x2ac>)
 800b876:	f005 f94b 	bl	8010b10 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b87a:	4839      	ldr	r0, [pc, #228]	; (800b960 <EE_Init+0x28c>)
 800b87c:	f005 f834 	bl	80108e8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b880:	2800      	cmp	r0, #0
 800b882:	d1a2      	bne.n	800b7ca <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b884:	2202      	movs	r2, #2
 800b886:	4d3a      	ldr	r5, [pc, #232]	; (800b970 <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b888:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b88a:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b88c:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b88e:	4393      	bics	r3, r2
 800b890:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b892:	2200      	movs	r2, #0
 800b894:	2300      	movs	r3, #0
 800b896:	f005 f86b 	bl	8010970 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b89a:	4831      	ldr	r0, [pc, #196]	; (800b960 <EE_Init+0x28c>)
 800b89c:	f005 f824 	bl	80108e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d192      	bne.n	800b7ca <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	692b      	ldr	r3, [r5, #16]
 800b8a8:	4393      	bics	r3, r2
 800b8aa:	612b      	str	r3, [r5, #16]
 800b8ac:	e72e      	b.n	800b70c <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b8ae:	0020      	movs	r0, r4
 800b8b0:	f005 f92e 	bl	8010b10 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b8b4:	482a      	ldr	r0, [pc, #168]	; (800b960 <EE_Init+0x28c>)
 800b8b6:	f005 f817 	bl	80108e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	d185      	bne.n	800b7ca <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b8be:	482d      	ldr	r0, [pc, #180]	; (800b974 <EE_Init+0x2a0>)
 800b8c0:	f005 f926 	bl	8010b10 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b8c4:	4826      	ldr	r0, [pc, #152]	; (800b960 <EE_Init+0x28c>)
 800b8c6:	f005 f80f 	bl	80108e8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d000      	beq.n	800b8d0 <EE_Init+0x1fc>
 800b8ce:	e77c      	b.n	800b7ca <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b8d0:	2102      	movs	r1, #2
 800b8d2:	4a27      	ldr	r2, [pc, #156]	; (800b970 <EE_Init+0x29c>)
 800b8d4:	6913      	ldr	r3, [r2, #16]
 800b8d6:	438b      	bics	r3, r1
 800b8d8:	6113      	str	r3, [r2, #16]
 800b8da:	e717      	b.n	800b70c <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b8dc:	0020      	movs	r0, r4
 800b8de:	f005 f917 	bl	8010b10 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b8e2:	481f      	ldr	r0, [pc, #124]	; (800b960 <EE_Init+0x28c>)
 800b8e4:	f005 f800 	bl	80108e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d000      	beq.n	800b8ee <EE_Init+0x21a>
 800b8ec:	e76d      	b.n	800b7ca <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b8ee:	4821      	ldr	r0, [pc, #132]	; (800b974 <EE_Init+0x2a0>)
 800b8f0:	f005 f90e 	bl	8010b10 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b8f4:	481a      	ldr	r0, [pc, #104]	; (800b960 <EE_Init+0x28c>)
 800b8f6:	f004 fff7 	bl	80108e8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	d000      	beq.n	800b900 <EE_Init+0x22c>
 800b8fe:	e764      	b.n	800b7ca <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b900:	2202      	movs	r2, #2
 800b902:	4c1b      	ldr	r4, [pc, #108]	; (800b970 <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b904:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b906:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b908:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b90a:	4393      	bics	r3, r2
 800b90c:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b90e:	2200      	movs	r2, #0
 800b910:	2300      	movs	r3, #0
 800b912:	f005 f82d 	bl	8010970 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b916:	4812      	ldr	r0, [pc, #72]	; (800b960 <EE_Init+0x28c>)
 800b918:	f004 ffe6 	bl	80108e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d000      	beq.n	800b922 <EE_Init+0x24e>
 800b920:	e753      	b.n	800b7ca <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b922:	2201      	movs	r2, #1
 800b924:	6923      	ldr	r3, [r4, #16]
 800b926:	4393      	bics	r3, r2
 800b928:	6123      	str	r3, [r4, #16]
 800b92a:	e6ef      	b.n	800b70c <EE_Init+0x38>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b92c:	0028      	movs	r0, r5
 800b92e:	f005 f8ef 	bl	8010b10 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b932:	480b      	ldr	r0, [pc, #44]	; (800b960 <EE_Init+0x28c>)
 800b934:	f004 ffd8 	bl	80108e8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b938:	2800      	cmp	r0, #0
 800b93a:	d000      	beq.n	800b93e <EE_Init+0x26a>
 800b93c:	e745      	b.n	800b7ca <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b93e:	4810      	ldr	r0, [pc, #64]	; (800b980 <EE_Init+0x2ac>)
 800b940:	f005 f8e6 	bl	8010b10 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b944:	4806      	ldr	r0, [pc, #24]	; (800b960 <EE_Init+0x28c>)
 800b946:	f004 ffcf 	bl	80108e8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d0c0      	beq.n	800b8d0 <EE_Init+0x1fc>
 800b94e:	e73c      	b.n	800b7ca <EE_Init+0xf6>
 800b950:	0801e000 	.word	0x0801e000
 800b954:	0801f000 	.word	0x0801f000
 800b958:	0000eeee 	.word	0x0000eeee
 800b95c:	0000ffff 	.word	0x0000ffff
 800b960:	0000c350 	.word	0x0000c350
 800b964:	20001e28 	.word	0x20001e28
 800b968:	0801f006 	.word	0x0801f006
 800b96c:	00000401 	.word	0x00000401
 800b970:	40022000 	.word	0x40022000
 800b974:	0801e800 	.word	0x0801e800
 800b978:	200072b0 	.word	0x200072b0
 800b97c:	0801e006 	.word	0x0801e006
 800b980:	0801f800 	.word	0x0801f800

0800b984 <EraseSector>:
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b984:	2300      	movs	r3, #0
BOS_Status EraseSector(uint32_t sector ) {
 800b986:	b500      	push	{lr}
 800b988:	b085      	sub	sp, #20
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b98a:	9301      	str	r3, [sp, #4]
		erase.PageAddress = sector;
 800b98c:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800b98e:	3301      	adds	r3, #1
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b990:	4669      	mov	r1, sp
 800b992:	a801      	add	r0, sp, #4
		erase.NbPages =1;
 800b994:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b996:	f005 f84f 	bl	8010a38 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d102      	bne.n	800b9a4 <EraseSector+0x20>
 800b99e:	9b00      	ldr	r3, [sp, #0]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	d002      	beq.n	800b9aa <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b9a4:	2216      	movs	r2, #22
 800b9a6:	4b02      	ldr	r3, [pc, #8]	; (800b9b0 <EraseSector+0x2c>)
 800b9a8:	701a      	strb	r2, [r3, #0]

	return result;
}
 800b9aa:	2000      	movs	r0, #0
 800b9ac:	b005      	add	sp, #20
 800b9ae:	bd00      	pop	{pc}
 800b9b0:	20000c4c 	.word	0x20000c4c

0800b9b4 <GPIO_Init>:
/** Pinout Configuration
*/
void GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800b9b4:	2080      	movs	r0, #128	; 0x80
 800b9b6:	4b1f      	ldr	r3, [pc, #124]	; (800ba34 <GPIO_Init+0x80>)
 800b9b8:	0300      	lsls	r0, r0, #12
 800b9ba:	6959      	ldr	r1, [r3, #20]
{
 800b9bc:	b500      	push	{lr}
  __GPIOC_CLK_ENABLE();
 800b9be:	4301      	orrs	r1, r0
 800b9c0:	6159      	str	r1, [r3, #20]
 800b9c2:	695a      	ldr	r2, [r3, #20]
{
 800b9c4:	b08b      	sub	sp, #44	; 0x2c
  __GPIOC_CLK_ENABLE();
 800b9c6:	4002      	ands	r2, r0
  __GPIOA_CLK_ENABLE();
 800b9c8:	2080      	movs	r0, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800b9ca:	9200      	str	r2, [sp, #0]
 800b9cc:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 800b9ce:	6959      	ldr	r1, [r3, #20]
 800b9d0:	0280      	lsls	r0, r0, #10
 800b9d2:	4301      	orrs	r1, r0
 800b9d4:	6159      	str	r1, [r3, #20]
 800b9d6:	695a      	ldr	r2, [r3, #20]
 800b9d8:	4002      	ands	r2, r0
  __GPIOD_CLK_ENABLE();
 800b9da:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800b9dc:	9201      	str	r2, [sp, #4]
 800b9de:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 800b9e0:	6959      	ldr	r1, [r3, #20]
 800b9e2:	0340      	lsls	r0, r0, #13
 800b9e4:	4301      	orrs	r1, r0
 800b9e6:	6159      	str	r1, [r3, #20]
 800b9e8:	695a      	ldr	r2, [r3, #20]
 800b9ea:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800b9ec:	2080      	movs	r0, #128	; 0x80
  __GPIOD_CLK_ENABLE();
 800b9ee:	9202      	str	r2, [sp, #8]
 800b9f0:	9a02      	ldr	r2, [sp, #8]
  __GPIOB_CLK_ENABLE();
 800b9f2:	6959      	ldr	r1, [r3, #20]
 800b9f4:	02c0      	lsls	r0, r0, #11
 800b9f6:	4301      	orrs	r1, r0
 800b9f8:	6159      	str	r1, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800b9fa:	2180      	movs	r1, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800b9fc:	695a      	ldr	r2, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800b9fe:	03c9      	lsls	r1, r1, #15
  __GPIOB_CLK_ENABLE();
 800ba00:	4002      	ands	r2, r0
 800ba02:	9203      	str	r2, [sp, #12]
 800ba04:	9a03      	ldr	r2, [sp, #12]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800ba06:	695a      	ldr	r2, [r3, #20]
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800ba08:	2090      	movs	r0, #144	; 0x90
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800ba0a:	430a      	orrs	r2, r1
 800ba0c:	615a      	str	r2, [r3, #20]
 800ba0e:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800ba10:	05c0      	lsls	r0, r0, #23
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800ba12:	400b      	ands	r3, r1
 800ba14:	9304      	str	r3, [sp, #16]
 800ba16:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800ba18:	2380      	movs	r3, #128	; 0x80
 800ba1a:	011b      	lsls	r3, r3, #4
 800ba1c:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba22:	2300      	movs	r3, #0
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800ba24:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba26:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ba28:	3303      	adds	r3, #3
 800ba2a:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800ba2c:	f005 f882 	bl	8010b34 <HAL_GPIO_Init>
}
 800ba30:	b00b      	add	sp, #44	; 0x2c
 800ba32:	bd00      	pop	{pc}
 800ba34:	40021000 	.word	0x40021000

0800ba38 <Switch_Init>:
*/
void Switch_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _Switch_PIN;
 800ba38:	2301      	movs	r3, #1
{
 800ba3a:	b500      	push	{lr}
 800ba3c:	b087      	sub	sp, #28
	GPIO_InitStruct.Pin = _Switch_PIN;
 800ba3e:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ba40:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba42:	2300      	movs	r3, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800ba44:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba46:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800ba48:	4803      	ldr	r0, [pc, #12]	; (800ba58 <Switch_Init+0x20>)
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ba4a:	3303      	adds	r3, #3
 800ba4c:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800ba4e:	f005 f871 	bl	8010b34 <HAL_GPIO_Init>
}
 800ba52:	b007      	add	sp, #28
 800ba54:	bd00      	pop	{pc}
 800ba56:	46c0      	nop			; (mov r8, r8)
 800ba58:	48000400 	.word	0x48000400

0800ba5c <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800ba5c:	b570      	push	{r4, r5, r6, lr}
 800ba5e:	0015      	movs	r5, r2
 800ba60:	001c      	movs	r4, r3
 800ba62:	000e      	movs	r6, r1
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800ba64:	f001 fd66 	bl	800d534 <GetUart>
	
	if (huart == &huart1) 
 800ba68:	4a25      	ldr	r2, [pc, #148]	; (800bb00 <GetPortGPIOs+0xa4>)
	UART_HandleTypeDef* huart = GetUart(port);
 800ba6a:	0003      	movs	r3, r0
	if (huart == &huart1) 
 800ba6c:	4290      	cmp	r0, r2
 800ba6e:	d00d      	beq.n	800ba8c <GetPortGPIOs+0x30>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800ba70:	4a24      	ldr	r2, [pc, #144]	; (800bb04 <GetPortGPIOs+0xa8>)
 800ba72:	4290      	cmp	r0, r2
 800ba74:	d02e      	beq.n	800bad4 <GetPortGPIOs+0x78>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800ba76:	4a24      	ldr	r2, [pc, #144]	; (800bb08 <GetPortGPIOs+0xac>)
 800ba78:	4290      	cmp	r0, r2
 800ba7a:	d014      	beq.n	800baa6 <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800ba7c:	4a23      	ldr	r2, [pc, #140]	; (800bb0c <GetPortGPIOs+0xb0>)
 800ba7e:	4290      	cmp	r0, r2
 800ba80:	d033      	beq.n	800baea <GetPortGPIOs+0x8e>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800ba82:	4a23      	ldr	r2, [pc, #140]	; (800bb10 <GetPortGPIOs+0xb4>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800ba84:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d019      	beq.n	800babe <GetPortGPIOs+0x62>
	
	return result;	
}
 800ba8a:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800ba8c:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800ba8e:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800ba90:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800ba92:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800ba94:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800ba96:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800ba98:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800ba9a:	2380      	movs	r3, #128	; 0x80
 800ba9c:	9a04      	ldr	r2, [sp, #16]
 800ba9e:	00db      	lsls	r3, r3, #3
 800baa0:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800baa2:	2000      	movs	r0, #0
 800baa4:	e7f1      	b.n	800ba8a <GetPortGPIOs+0x2e>
		*TX_Pin = USART3_TX_PIN;
 800baa6:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800baa8:	4b1a      	ldr	r3, [pc, #104]	; (800bb14 <GetPortGPIOs+0xb8>)
		*TX_Pin = USART3_TX_PIN;
 800baaa:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800baac:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800baae:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800bab0:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800bab2:	2380      	movs	r3, #128	; 0x80
 800bab4:	9a04      	ldr	r2, [sp, #16]
 800bab6:	011b      	lsls	r3, r3, #4
 800bab8:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800baba:	2000      	movs	r0, #0
 800babc:	e7e5      	b.n	800ba8a <GetPortGPIOs+0x2e>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800babe:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800bac0:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800bac2:	05db      	lsls	r3, r3, #23
 800bac4:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800bac6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800bac8:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800baca:	2320      	movs	r3, #32
 800bacc:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800bace:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800bad0:	8013      	strh	r3, [r2, #0]
 800bad2:	e7da      	b.n	800ba8a <GetPortGPIOs+0x2e>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800bad4:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800bad6:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800bad8:	05db      	lsls	r3, r3, #23
 800bada:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800badc:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800bade:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800bae0:	2308      	movs	r3, #8
 800bae2:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800bae4:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800bae6:	8013      	strh	r3, [r2, #0]
 800bae8:	e7cf      	b.n	800ba8a <GetPortGPIOs+0x2e>
		*TX_Pin = USART5_TX_PIN;
 800baea:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800baec:	4b09      	ldr	r3, [pc, #36]	; (800bb14 <GetPortGPIOs+0xb8>)
	BOS_Status result = BOS_OK;
 800baee:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800baf0:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800baf2:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800baf4:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800baf6:	2310      	movs	r3, #16
 800baf8:	9a04      	ldr	r2, [sp, #16]
 800bafa:	8013      	strh	r3, [r2, #0]
 800bafc:	e7c5      	b.n	800ba8a <GetPortGPIOs+0x2e>
 800bafe:	46c0      	nop			; (mov r8, r8)
 800bb00:	20006fc4 	.word	0x20006fc4
 800bb04:	200070bc 	.word	0x200070bc
 800bb08:	20006e9c 	.word	0x20006e9c
 800bb0c:	20006f54 	.word	0x20006f54
 800bb10:	20007044 	.word	0x20007044
 800bb14:	48000400 	.word	0x48000400

0800bb18 <IsFactoryReset>:
  __GPIOA_CLK_ENABLE();
 800bb18:	2080      	movs	r0, #128	; 0x80
 800bb1a:	4b38      	ldr	r3, [pc, #224]	; (800bbfc <IsFactoryReset+0xe4>)
 800bb1c:	0280      	lsls	r0, r0, #10
 800bb1e:	6959      	ldr	r1, [r3, #20]
{
 800bb20:	b570      	push	{r4, r5, r6, lr}
  __GPIOA_CLK_ENABLE();
 800bb22:	4301      	orrs	r1, r0
 800bb24:	6159      	str	r1, [r3, #20]
 800bb26:	695a      	ldr	r2, [r3, #20]
{
 800bb28:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800bb2a:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800bb2c:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800bb2e:	9209      	str	r2, [sp, #36]	; 0x24
 800bb30:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800bb32:	6959      	ldr	r1, [r3, #20]
 800bb34:	02c0      	lsls	r0, r0, #11
 800bb36:	4301      	orrs	r1, r0
 800bb38:	6159      	str	r1, [r3, #20]
 800bb3a:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800bb3c:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800bb3e:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800bb40:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800bb42:	920a      	str	r2, [sp, #40]	; 0x28
 800bb44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800bb46:	6959      	ldr	r1, [r3, #20]
 800bb48:	0300      	lsls	r0, r0, #12
 800bb4a:	4301      	orrs	r1, r0
 800bb4c:	6159      	str	r1, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800bb4e:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800bb50:	695a      	ldr	r2, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800bb52:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800bb54:	4002      	ands	r2, r0
 800bb56:	920b      	str	r2, [sp, #44]	; 0x2c
 800bb58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__GPIOD_CLK_ENABLE();
 800bb5a:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800bb5c:	ad03      	add	r5, sp, #12
	__GPIOD_CLK_ENABLE();
 800bb5e:	430a      	orrs	r2, r1
 800bb60:	615a      	str	r2, [r3, #20]
 800bb62:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800bb64:	446c      	add	r4, sp
	__GPIOD_CLK_ENABLE();
 800bb66:	400b      	ands	r3, r1
 800bb68:	930c      	str	r3, [sp, #48]	; 0x30
 800bb6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800bb6c:	230e      	movs	r3, #14
 800bb6e:	446b      	add	r3, sp
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	002a      	movs	r2, r5
 800bb74:	ab06      	add	r3, sp, #24
 800bb76:	a905      	add	r1, sp, #20
 800bb78:	2001      	movs	r0, #1
 800bb7a:	f7ff ff6f 	bl	800ba5c <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800bb7e:	aa04      	add	r2, sp, #16
 800bb80:	ab08      	add	r3, sp, #32
 800bb82:	a907      	add	r1, sp, #28
 800bb84:	9400      	str	r4, [sp, #0]
 800bb86:	2005      	movs	r0, #5
 800bb88:	f7ff ff68 	bl	800ba5c <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb8c:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb8e:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb90:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800bb92:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800bb94:	a90d      	add	r1, sp, #52	; 0x34
 800bb96:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800bb98:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb9a:	960f      	str	r6, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800bb9c:	f004 ffca 	bl	8010b34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800bba0:	2302      	movs	r3, #2
 800bba2:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800bba4:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800bba6:	a90d      	add	r1, sp, #52	; 0x34
 800bba8:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800bbaa:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bbac:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800bbae:	f004 ffc1 	bl	8010b34 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800bbb2:	8829      	ldrh	r1, [r5, #0]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	9805      	ldr	r0, [sp, #20]
 800bbb8:	f005 f95c 	bl	8010e74 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800bbbc:	2005      	movs	r0, #5
 800bbbe:	f001 fa99 	bl	800d0f4 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800bbc2:	8821      	ldrh	r1, [r4, #0]
 800bbc4:	9808      	ldr	r0, [sp, #32]
 800bbc6:	f005 f94f 	bl	8010e68 <HAL_GPIO_ReadPin>
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d006      	beq.n	800bbdc <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800bbce:	2201      	movs	r2, #1
	return 0;
 800bbd0:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800bbd2:	4b0b      	ldr	r3, [pc, #44]	; (800bc00 <IsFactoryReset+0xe8>)
 800bbd4:	4252      	negs	r2, r2
 800bbd6:	601a      	str	r2, [r3, #0]
}
 800bbd8:	b012      	add	sp, #72	; 0x48
 800bbda:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800bbdc:	8829      	ldrh	r1, [r5, #0]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	9805      	ldr	r0, [sp, #20]
 800bbe2:	f005 f947 	bl	8010e74 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800bbe6:	2005      	movs	r0, #5
 800bbe8:	f001 fa84 	bl	800d0f4 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800bbec:	8821      	ldrh	r1, [r4, #0]
 800bbee:	9808      	ldr	r0, [sp, #32]
 800bbf0:	f005 f93a 	bl	8010e68 <HAL_GPIO_ReadPin>
 800bbf4:	2801      	cmp	r0, #1
 800bbf6:	d1ea      	bne.n	800bbce <IsFactoryReset+0xb6>
 800bbf8:	e7ee      	b.n	800bbd8 <IsFactoryReset+0xc0>
 800bbfa:	46c0      	nop			; (mov r8, r8)
 800bbfc:	40021000 	.word	0x40021000
 800bc00:	20007ff0 	.word	0x20007ff0

0800bc04 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800bc04:	4770      	bx	lr
 800bc06:	46c0      	nop			; (mov r8, r8)

0800bc08 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800bc08:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800bc0a:	4d37      	ldr	r5, [pc, #220]	; (800bce8 <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800bc0c:	b08d      	sub	sp, #52	; 0x34
	if (BOS_initialized) {
 800bc0e:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800bc10:	0006      	movs	r6, r0
 800bc12:	000c      	movs	r4, r1
	if (BOS_initialized) {
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d152      	bne.n	800bcbe <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800bc18:	2204      	movs	r2, #4
 800bc1a:	4b34      	ldr	r3, [pc, #208]	; (800bcec <AddPortButton+0xe4>)
 800bc1c:	545a      	strb	r2, [r3, r1]
	if (BOS_initialized) {
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800bc1e:	250e      	movs	r5, #14
 800bc20:	af04      	add	r7, sp, #16
 800bc22:	446d      	add	r5, sp
 800bc24:	002a      	movs	r2, r5
 800bc26:	ab06      	add	r3, sp, #24
 800bc28:	a905      	add	r1, sp, #20
 800bc2a:	9700      	str	r7, [sp, #0]
 800bc2c:	0020      	movs	r0, r4
 800bc2e:	f7ff ff15 	bl	800ba5c <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800bc32:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc34:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = TX_Pin;
 800bc36:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc38:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800bc3a:	a907      	add	r1, sp, #28
 800bc3c:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc3e:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc40:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800bc42:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800bc44:	f004 ff76 	bl	8010b34 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800bc48:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800bc4a:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = RX_Pin;
 800bc4c:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800bc4e:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800bc50:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc52:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800bc54:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800bc56:	f004 ff6d 	bl	8010b34 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800bc5a:	00e2      	lsls	r2, r4, #3
 800bc5c:	4b24      	ldr	r3, [pc, #144]	; (800bcf0 <AddPortButton+0xe8>)
 800bc5e:	1912      	adds	r2, r2, r4
 800bc60:	189b      	adds	r3, r3, r2

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800bc62:	0025      	movs	r5, r4
	button[port].type = buttonType;
 800bc64:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800bc66:	2312      	movs	r3, #18
 800bc68:	353a      	adds	r5, #58	; 0x3a
 800bc6a:	00ad      	lsls	r5, r5, #2
 800bc6c:	446b      	add	r3, sp
 800bc6e:	0019      	movs	r1, r3
 800bc70:	0028      	movs	r0, r5
 800bc72:	f7ff fc19 	bl	800b4a8 <EE_ReadVariable>
	if (!res)											// This variable exists
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d109      	bne.n	800bc8e <AddPortButton+0x86>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800bc7a:	466b      	mov	r3, sp
 800bc7c:	8a5b      	ldrh	r3, [r3, #18]
 800bc7e:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800bc80:	091a      	lsrs	r2, r3, #4
 800bc82:	42a2      	cmp	r2, r4
 800bc84:	d103      	bne.n	800bc8e <AddPortButton+0x86>
 800bc86:	220f      	movs	r2, #15
 800bc88:	4013      	ands	r3, r2
 800bc8a:	42b3      	cmp	r3, r6
 800bc8c:	d014      	beq.n	800bcb8 <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
		}
	} else							// Variable does not exist. Create a new one
	{
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800bc8e:	466b      	mov	r3, sp
 800bc90:	0324      	lsls	r4, r4, #12
 800bc92:	0231      	lsls	r1, r6, #8
 800bc94:	4321      	orrs	r1, r4
 800bc96:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800bc98:	0028      	movs	r0, r5
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800bc9a:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800bc9c:	f7ff fc34 	bl	800b508 <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800bca0:	2100      	movs	r1, #0
 800bca2:	1c68      	adds	r0, r5, #1
 800bca4:	f7ff fc30 	bl	800b508 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800bca8:	2100      	movs	r1, #0
 800bcaa:	1ca8      	adds	r0, r5, #2
 800bcac:	f7ff fc2c 	bl	800b508 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800bcb0:	1ce8      	adds	r0, r5, #3
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	f7ff fc28 	bl	800b508 <EE_WriteVariable>
	}

	return result;
}
 800bcb8:	2000      	movs	r0, #0
 800bcba:	b00d      	add	sp, #52	; 0x34
 800bcbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800bcbe:	4b0d      	ldr	r3, [pc, #52]	; (800bcf4 <AddPortButton+0xec>)
 800bcc0:	008f      	lsls	r7, r1, #2
 800bcc2:	58f8      	ldr	r0, [r7, r3]
 800bcc4:	f001 fdd8 	bl	800d878 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800bcc8:	4b0b      	ldr	r3, [pc, #44]	; (800bcf8 <AddPortButton+0xf0>)
 800bcca:	58f8      	ldr	r0, [r7, r3]
 800bccc:	f001 fdd4 	bl	800d878 <osSemaphoreRelease>
	portStatus[port] = PORTBUTTON;
 800bcd0:	2104      	movs	r1, #4
 800bcd2:	4a06      	ldr	r2, [pc, #24]	; (800bcec <AddPortButton+0xe4>)
 800bcd4:	782b      	ldrb	r3, [r5, #0]
 800bcd6:	5511      	strb	r1, [r2, r4]
	if (BOS_initialized) {
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d0a0      	beq.n	800bc1e <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 800bcdc:	0020      	movs	r0, r4
 800bcde:	f001 fc29 	bl	800d534 <GetUart>
 800bce2:	f006 f83d 	bl	8011d60 <HAL_UART_DeInit>
 800bce6:	e79a      	b.n	800bc1e <AddPortButton+0x16>
 800bce8:	20000b4b 	.word	0x20000b4b
 800bcec:	20000c3c 	.word	0x20000c3c
 800bcf0:	20001e2c 	.word	0x20001e2c
 800bcf4:	20006e58 	.word	0x20006e58
 800bcf8:	20006e38 	.word	0x20006e38

0800bcfc <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800bcfc:	b570      	push	{r4, r5, r6, lr}
 800bcfe:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800bd00:	2300      	movs	r3, #0
 800bd02:	4839      	ldr	r0, [pc, #228]	; (800bde8 <RemovePortButton+0xec>)
 800bd04:	00e9      	lsls	r1, r5, #3
 800bd06:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec = 0;
	button[port].releasedY2Sec = 0;
	button[port].releasedY3Sec = 0;

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800bd08:	002c      	movs	r4, r5
	button[port].type = NONE;
 800bd0a:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port) {
 800bd0c:	b082      	sub	sp, #8
	button[port].state = NONE;
 800bd0e:	540b      	strb	r3, [r1, r0]
	button[port].type = NONE;
 800bd10:	7053      	strb	r3, [r2, #1]
	button[port].events = 0;
 800bd12:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800bd14:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800bd16:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800bd18:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800bd1a:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800bd1c:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800bd1e:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800bd20:	466b      	mov	r3, sp
 800bd22:	343a      	adds	r4, #58	; 0x3a
 800bd24:	00a4      	lsls	r4, r4, #2
 800bd26:	1d99      	adds	r1, r3, #6
 800bd28:	0020      	movs	r0, r4
 800bd2a:	f7ff fbbd 	bl	800b4a8 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d02d      	beq.n	800bd8e <RemovePortButton+0x92>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800bd32:	0028      	movs	r0, r5
 800bd34:	f001 fbfe 	bl	800d534 <GetUart>

	if (huart->Instance == USART1) {
 800bd38:	4a2c      	ldr	r2, [pc, #176]	; (800bdec <RemovePortButton+0xf0>)
 800bd3a:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800bd3c:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d03d      	beq.n	800bdbe <RemovePortButton+0xc2>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800bd42:	4a2b      	ldr	r2, [pc, #172]	; (800bdf0 <RemovePortButton+0xf4>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d03e      	beq.n	800bdc6 <RemovePortButton+0xca>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800bd48:	4a2a      	ldr	r2, [pc, #168]	; (800bdf4 <RemovePortButton+0xf8>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d03f      	beq.n	800bdce <RemovePortButton+0xd2>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800bd4e:	4a2a      	ldr	r2, [pc, #168]	; (800bdf8 <RemovePortButton+0xfc>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d01a      	beq.n	800bd8a <RemovePortButton+0x8e>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800bd54:	4a29      	ldr	r2, [pc, #164]	; (800bdfc <RemovePortButton+0x100>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d03d      	beq.n	800bdd6 <RemovePortButton+0xda>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800bd5a:	4a29      	ldr	r2, [pc, #164]	; (800be00 <RemovePortButton+0x104>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d03e      	beq.n	800bdde <RemovePortButton+0xe2>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800bd60:	4a28      	ldr	r2, [pc, #160]	; (800be04 <RemovePortButton+0x108>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d011      	beq.n	800bd8a <RemovePortButton+0x8e>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800bd66:	4a28      	ldr	r2, [pc, #160]	; (800be08 <RemovePortButton+0x10c>)
 800bd68:	4694      	mov	ip, r2
 800bd6a:	4463      	add	r3, ip
 800bd6c:	1e5c      	subs	r4, r3, #1
 800bd6e:	41a3      	sbcs	r3, r4
 800bd70:	425c      	negs	r4, r3
 800bd72:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800bd74:	2200      	movs	r2, #0
 800bd76:	4b25      	ldr	r3, [pc, #148]	; (800be0c <RemovePortButton+0x110>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800bd78:	4925      	ldr	r1, [pc, #148]	; (800be10 <RemovePortButton+0x114>)
	portStatus[port] = FREE;
 800bd7a:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800bd7c:	0030      	movs	r0, r6
 800bd7e:	3201      	adds	r2, #1
 800bd80:	f006 f83c 	bl	8011dfc <HAL_UART_Receive_IT>

	return result;
}
 800bd84:	0020      	movs	r0, r4
 800bd86:	b002      	add	sp, #8
 800bd88:	bd70      	pop	{r4, r5, r6, pc}
	BOS_Status result = BOS_OK;
 800bd8a:	2400      	movs	r4, #0
 800bd8c:	e7f2      	b.n	800bd74 <RemovePortButton+0x78>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800bd8e:	2100      	movs	r1, #0
 800bd90:	0020      	movs	r0, r4
 800bd92:	f7ff fbb9 	bl	800b508 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800bd96:	2100      	movs	r1, #0
 800bd98:	1c60      	adds	r0, r4, #1
 800bd9a:	f7ff fbb5 	bl	800b508 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800bd9e:	2100      	movs	r1, #0
 800bda0:	1ca0      	adds	r0, r4, #2
 800bda2:	f7ff fbb1 	bl	800b508 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800bda6:	2100      	movs	r1, #0
 800bda8:	1ce0      	adds	r0, r4, #3
 800bdaa:	f7ff fbad 	bl	800b508 <EE_WriteVariable>
	UART_HandleTypeDef *huart = GetUart(port);
 800bdae:	0028      	movs	r0, r5
 800bdb0:	f001 fbc0 	bl	800d534 <GetUart>
	if (huart->Instance == USART1) {
 800bdb4:	4a0d      	ldr	r2, [pc, #52]	; (800bdec <RemovePortButton+0xf0>)
 800bdb6:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800bdb8:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d1c1      	bne.n	800bd42 <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 800bdbe:	f001 f9c7 	bl	800d150 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800bdc2:	2400      	movs	r4, #0
 800bdc4:	e7d6      	b.n	800bd74 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800bdc6:	f001 f9db 	bl	800d180 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800bdca:	2400      	movs	r4, #0
 800bdcc:	e7d2      	b.n	800bd74 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800bdce:	f001 f9ef 	bl	800d1b0 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800bdd2:	2400      	movs	r4, #0
 800bdd4:	e7ce      	b.n	800bd74 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 800bdd6:	f001 fa03 	bl	800d1e0 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800bdda:	2400      	movs	r4, #0
 800bddc:	e7ca      	b.n	800bd74 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800bdde:	f001 fa17 	bl	800d210 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800bde2:	2400      	movs	r4, #0
 800bde4:	e7c6      	b.n	800bd74 <RemovePortButton+0x78>
 800bde6:	46c0      	nop			; (mov r8, r8)
 800bde8:	20001e2c 	.word	0x20001e2c
 800bdec:	40013800 	.word	0x40013800
 800bdf0:	40004400 	.word	0x40004400
 800bdf4:	40004800 	.word	0x40004800
 800bdf8:	40004c00 	.word	0x40004c00
 800bdfc:	40005000 	.word	0x40005000
 800be00:	40011400 	.word	0x40011400
 800be04:	40011800 	.word	0x40011800
 800be08:	bffee400 	.word	0xbffee400
 800be0c:	20000c3c 	.word	0x20000c3c
 800be10:	20000c5d 	.word	0x20000c5d

0800be14 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800be14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be16:	464e      	mov	r6, r9
 800be18:	4645      	mov	r5, r8
 800be1a:	46de      	mov	lr, fp
 800be1c:	4657      	mov	r7, sl
 800be1e:	b5e0      	push	{r5, r6, r7, lr}
 800be20:	b087      	sub	sp, #28
 800be22:	9301      	str	r3, [sp, #4]
 800be24:	ab10      	add	r3, sp, #64	; 0x40
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	0005      	movs	r5, r0
 800be2a:	9302      	str	r3, [sp, #8]
 800be2c:	ab11      	add	r3, sp, #68	; 0x44
 800be2e:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800be30:	00ec      	lsls	r4, r5, #3
		uint8_t mode) {
 800be32:	9303      	str	r3, [sp, #12]
 800be34:	ab12      	add	r3, sp, #72	; 0x48
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	469a      	mov	sl, r3
 800be3a:	ab13      	add	r3, sp, #76	; 0x4c
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	4699      	mov	r9, r3
 800be40:	ab14      	add	r3, sp, #80	; 0x50
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	469b      	mov	fp, r3
 800be46:	ab15      	add	r3, sp, #84	; 0x54
 800be48:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 800be4a:	4b80      	ldr	r3, [pc, #512]	; (800c04c <SetButtonEvents+0x238>)
 800be4c:	4698      	mov	r8, r3
 800be4e:	1963      	adds	r3, r4, r5
 800be50:	4443      	add	r3, r8
 800be52:	785e      	ldrb	r6, [r3, #1]
 800be54:	2e00      	cmp	r6, #0
 800be56:	d050      	beq.n	800befa <SetButtonEvents+0xe6>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800be58:	9e01      	ldr	r6, [sp, #4]
 800be5a:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800be5c:	9e02      	ldr	r6, [sp, #8]
 800be5e:	70de      	strb	r6, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800be60:	9e03      	ldr	r6, [sp, #12]
 800be62:	711e      	strb	r6, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 800be64:	4656      	mov	r6, sl
 800be66:	715e      	strb	r6, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800be68:	464e      	mov	r6, r9
 800be6a:	719e      	strb	r6, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800be6c:	465e      	mov	r6, fp
 800be6e:	71de      	strb	r6, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800be70:	2801      	cmp	r0, #1
 800be72:	d04b      	beq.n	800bf0c <SetButtonEvents+0xf8>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800be74:	2800      	cmp	r0, #0
 800be76:	d000      	beq.n	800be7a <SetButtonEvents+0x66>
 800be78:	e076      	b.n	800bf68 <SetButtonEvents+0x154>
 800be7a:	2900      	cmp	r1, #0
 800be7c:	d000      	beq.n	800be80 <SetButtonEvents+0x6c>
 800be7e:	e0bf      	b.n	800c000 <SetButtonEvents+0x1ec>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800be80:	2601      	movs	r6, #1
 800be82:	7a19      	ldrb	r1, [r3, #8]
 800be84:	43b1      	bics	r1, r6
 800be86:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800be88:	2a00      	cmp	r2, #0
 800be8a:	d142      	bne.n	800bf12 <SetButtonEvents+0xfe>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800be8c:	2302      	movs	r3, #2
 800be8e:	4399      	bics	r1, r3
 800be90:	1963      	adds	r3, r4, r5
 800be92:	4443      	add	r3, r8
 800be94:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800be96:	9b01      	ldr	r3, [sp, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d143      	bne.n	800bf24 <SetButtonEvents+0x110>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800be9c:	2304      	movs	r3, #4
 800be9e:	4399      	bics	r1, r3
 800bea0:	1963      	adds	r3, r4, r5
 800bea2:	4443      	add	r3, r8
 800bea4:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800bea6:	9b02      	ldr	r3, [sp, #8]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d144      	bne.n	800bf36 <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800beac:	2308      	movs	r3, #8
 800beae:	4399      	bics	r1, r3
 800beb0:	1963      	adds	r3, r4, r5
 800beb2:	4443      	add	r3, r8
 800beb4:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800beb6:	9b03      	ldr	r3, [sp, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d145      	bne.n	800bf48 <SetButtonEvents+0x134>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800bebc:	2310      	movs	r3, #16
 800bebe:	000a      	movs	r2, r1
 800bec0:	439a      	bics	r2, r3
 800bec2:	1963      	adds	r3, r4, r5
 800bec4:	4443      	add	r3, r8
 800bec6:	721a      	strb	r2, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800bec8:	4653      	mov	r3, sl
 800beca:	2b00      	cmp	r3, #0
 800becc:	d100      	bne.n	800bed0 <SetButtonEvents+0xbc>
 800bece:	e09c      	b.n	800c00a <SetButtonEvents+0x1f6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800bed0:	2120      	movs	r1, #32
 800bed2:	4311      	orrs	r1, r2
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800bed4:	464a      	mov	r2, r9
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800bed6:	1963      	adds	r3, r4, r5
 800bed8:	4443      	add	r3, r8
 800beda:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800bedc:	2a00      	cmp	r2, #0
 800bede:	d100      	bne.n	800bee2 <SetButtonEvents+0xce>
 800bee0:	e09d      	b.n	800c01e <SetButtonEvents+0x20a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800bee2:	2240      	movs	r2, #64	; 0x40
 800bee4:	430a      	orrs	r2, r1
 800bee6:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800bee8:	465b      	mov	r3, fp
 800beea:	2b00      	cmp	r3, #0
 800beec:	d136      	bne.n	800bf5c <SetButtonEvents+0x148>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800beee:	217f      	movs	r1, #127	; 0x7f
 800bef0:	1963      	adds	r3, r4, r5
 800bef2:	4443      	add	r3, r8
 800bef4:	4011      	ands	r1, r2
 800bef6:	7219      	strb	r1, [r3, #8]
 800bef8:	e036      	b.n	800bf68 <SetButtonEvents+0x154>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800befa:	240b      	movs	r4, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 800befc:	0020      	movs	r0, r4
 800befe:	b007      	add	sp, #28
 800bf00:	bc3c      	pop	{r2, r3, r4, r5}
 800bf02:	4690      	mov	r8, r2
 800bf04:	4699      	mov	r9, r3
 800bf06:	46a2      	mov	sl, r4
 800bf08:	46ab      	mov	fp, r5
 800bf0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 800bf0c:	7a19      	ldrb	r1, [r3, #8]
 800bf0e:	2301      	movs	r3, #1
 800bf10:	4319      	orrs	r1, r3
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800bf12:	2202      	movs	r2, #2
 800bf14:	1963      	adds	r3, r4, r5
 800bf16:	4443      	add	r3, r8
 800bf18:	4311      	orrs	r1, r2
 800bf1a:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800bf1c:	2801      	cmp	r0, #1
 800bf1e:	d000      	beq.n	800bf22 <SetButtonEvents+0x10e>
 800bf20:	e08c      	b.n	800c03c <SetButtonEvents+0x228>
 800bf22:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800bf24:	2204      	movs	r2, #4
 800bf26:	1963      	adds	r3, r4, r5
 800bf28:	4443      	add	r3, r8
 800bf2a:	4311      	orrs	r1, r2
 800bf2c:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800bf2e:	2801      	cmp	r0, #1
 800bf30:	d000      	beq.n	800bf34 <SetButtonEvents+0x120>
 800bf32:	e07f      	b.n	800c034 <SetButtonEvents+0x220>
 800bf34:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800bf36:	2208      	movs	r2, #8
 800bf38:	1963      	adds	r3, r4, r5
 800bf3a:	4443      	add	r3, r8
 800bf3c:	4311      	orrs	r1, r2
 800bf3e:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800bf40:	2801      	cmp	r0, #1
 800bf42:	d000      	beq.n	800bf46 <SetButtonEvents+0x132>
 800bf44:	e07e      	b.n	800c044 <SetButtonEvents+0x230>
 800bf46:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800bf48:	2210      	movs	r2, #16
 800bf4a:	1963      	adds	r3, r4, r5
 800bf4c:	4443      	add	r3, r8
 800bf4e:	4311      	orrs	r1, r2
 800bf50:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800bf52:	2801      	cmp	r0, #1
 800bf54:	d16a      	bne.n	800c02c <SetButtonEvents+0x218>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800bf56:	2260      	movs	r2, #96	; 0x60
 800bf58:	b2c9      	uxtb	r1, r1
 800bf5a:	430a      	orrs	r2, r1
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800bf5c:	2180      	movs	r1, #128	; 0x80
 800bf5e:	1963      	adds	r3, r4, r5
 800bf60:	4249      	negs	r1, r1
 800bf62:	4443      	add	r3, r8
 800bf64:	4311      	orrs	r1, r2
 800bf66:	7219      	strb	r1, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800bf68:	002e      	movs	r6, r5
 800bf6a:	ab04      	add	r3, sp, #16
 800bf6c:	363a      	adds	r6, #58	; 0x3a
 800bf6e:	00b6      	lsls	r6, r6, #2
 800bf70:	1d9f      	adds	r7, r3, #6
 800bf72:	0039      	movs	r1, r7
 800bf74:	0030      	movs	r0, r6
 800bf76:	f7ff fa97 	bl	800b4a8 <EE_ReadVariable>
	if (!res)											// This variable exists
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d1bd      	bne.n	800befa <SetButtonEvents+0xe6>
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800bf7e:	1964      	adds	r4, r4, r5
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800bf80:	883b      	ldrh	r3, [r7, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800bf82:	4444      	add	r4, r8
 800bf84:	7a22      	ldrb	r2, [r4, #8]
 800bf86:	b2d9      	uxtb	r1, r3
 800bf88:	4291      	cmp	r1, r2
 800bf8a:	d006      	beq.n	800bf9a <SetButtonEvents+0x186>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800bf8c:	0a19      	lsrs	r1, r3, #8
 800bf8e:	0209      	lsls	r1, r1, #8
 800bf90:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800bf92:	0030      	movs	r0, r6
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800bf94:	8039      	strh	r1, [r7, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800bf96:	f7ff fab7 	bl	800b508 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800bf9a:	1c74      	adds	r4, r6, #1
 800bf9c:	0039      	movs	r1, r7
 800bf9e:	0020      	movs	r0, r4
 800bfa0:	f7ff fa82 	bl	800b4a8 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800bfa4:	4652      	mov	r2, sl
 800bfa6:	9b01      	ldr	r3, [sp, #4]
 800bfa8:	0219      	lsls	r1, r3, #8
 800bfaa:	883b      	ldrh	r3, [r7, #0]
 800bfac:	430a      	orrs	r2, r1
		if (temp16
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d003      	beq.n	800bfba <SetButtonEvents+0x1a6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800bfb2:	b291      	uxth	r1, r2
 800bfb4:	0020      	movs	r0, r4
 800bfb6:	f7ff faa7 	bl	800b508 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800bfba:	1cb4      	adds	r4, r6, #2
 800bfbc:	0039      	movs	r1, r7
 800bfbe:	0020      	movs	r0, r4
 800bfc0:	f7ff fa72 	bl	800b4a8 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800bfc4:	464a      	mov	r2, r9
 800bfc6:	9b02      	ldr	r3, [sp, #8]
 800bfc8:	0219      	lsls	r1, r3, #8
 800bfca:	883b      	ldrh	r3, [r7, #0]
 800bfcc:	430a      	orrs	r2, r1
		if (temp16
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d003      	beq.n	800bfda <SetButtonEvents+0x1c6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800bfd2:	b291      	uxth	r1, r2
 800bfd4:	0020      	movs	r0, r4
 800bfd6:	f7ff fa97 	bl	800b508 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800bfda:	3603      	adds	r6, #3
 800bfdc:	0039      	movs	r1, r7
 800bfde:	0030      	movs	r0, r6
 800bfe0:	f7ff fa62 	bl	800b4a8 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800bfe4:	465a      	mov	r2, fp
 800bfe6:	9b03      	ldr	r3, [sp, #12]
	return result;
 800bfe8:	2400      	movs	r4, #0
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800bfea:	0219      	lsls	r1, r3, #8
 800bfec:	883b      	ldrh	r3, [r7, #0]
 800bfee:	430a      	orrs	r2, r1
		if (temp16
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d100      	bne.n	800bff6 <SetButtonEvents+0x1e2>
 800bff4:	e782      	b.n	800befc <SetButtonEvents+0xe8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800bff6:	b291      	uxth	r1, r2
 800bff8:	0030      	movs	r0, r6
 800bffa:	f7ff fa85 	bl	800b508 <EE_WriteVariable>
 800bffe:	e77d      	b.n	800befc <SetButtonEvents+0xe8>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800c000:	2601      	movs	r6, #1
 800c002:	7a19      	ldrb	r1, [r3, #8]
 800c004:	4331      	orrs	r1, r6
 800c006:	7219      	strb	r1, [r3, #8]
 800c008:	e73e      	b.n	800be88 <SetButtonEvents+0x74>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c00a:	2320      	movs	r3, #32
 800c00c:	439a      	bics	r2, r3
 800c00e:	1963      	adds	r3, r4, r5
 800c010:	4443      	add	r3, r8
 800c012:	0011      	movs	r1, r2
 800c014:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c016:	464a      	mov	r2, r9
 800c018:	2a00      	cmp	r2, #0
 800c01a:	d000      	beq.n	800c01e <SetButtonEvents+0x20a>
 800c01c:	e761      	b.n	800bee2 <SetButtonEvents+0xce>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c01e:	2340      	movs	r3, #64	; 0x40
 800c020:	000a      	movs	r2, r1
 800c022:	439a      	bics	r2, r3
 800c024:	1963      	adds	r3, r4, r5
 800c026:	4443      	add	r3, r8
 800c028:	721a      	strb	r2, [r3, #8]
 800c02a:	e75d      	b.n	800bee8 <SetButtonEvents+0xd4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d19b      	bne.n	800bf68 <SetButtonEvents+0x154>
 800c030:	7a1a      	ldrb	r2, [r3, #8]
 800c032:	e749      	b.n	800bec8 <SetButtonEvents+0xb4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800c034:	2800      	cmp	r0, #0
 800c036:	d197      	bne.n	800bf68 <SetButtonEvents+0x154>
 800c038:	7a19      	ldrb	r1, [r3, #8]
 800c03a:	e734      	b.n	800bea6 <SetButtonEvents+0x92>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d193      	bne.n	800bf68 <SetButtonEvents+0x154>
 800c040:	7a19      	ldrb	r1, [r3, #8]
 800c042:	e728      	b.n	800be96 <SetButtonEvents+0x82>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800c044:	2800      	cmp	r0, #0
 800c046:	d18f      	bne.n	800bf68 <SetButtonEvents+0x154>
 800c048:	7a19      	ldrb	r1, [r3, #8]
 800c04a:	e734      	b.n	800beb6 <SetButtonEvents+0xa2>
 800c04c:	20001e2c 	.word	0x20001e2c

0800c050 <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void) {
	hadc.Instance = ADC1;
 800c050:	4811      	ldr	r0, [pc, #68]	; (800c098 <MX_ADC_Init+0x48>)
 800c052:	4b12      	ldr	r3, [pc, #72]	; (800c09c <MX_ADC_Init+0x4c>)
void MX_ADC_Init(void) {
 800c054:	b510      	push	{r4, lr}
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c056:	2104      	movs	r1, #4
	hadc.Instance = ADC1;
 800c058:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c05a:	2380      	movs	r3, #128	; 0x80
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c05c:	6141      	str	r1, [r0, #20]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c05e:	061b      	lsls	r3, r3, #24
	hadc.Init.LowPowerAutoWait = DISABLE;
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
	hadc.Init.ContinuousConvMode = ENABLE;
	hadc.Init.DiscontinuousConvMode = DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c060:	21c2      	movs	r1, #194	; 0xc2
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c062:	2201      	movs	r2, #1
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c064:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c066:	2300      	movs	r3, #0
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c068:	31ff      	adds	r1, #255	; 0xff
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c06a:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c06c:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c06e:	6102      	str	r2, [r0, #16]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800c070:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800c072:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 800c074:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800c076:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c078:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c07a:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 800c07c:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c07e:	6342      	str	r2, [r0, #52]	; 0x34

	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800c080:	f003 fb10 	bl	800f6a4 <HAL_ADC_Init>
 800c084:	2800      	cmp	r0, #0
 800c086:	d002      	beq.n	800c08e <MX_ADC_Init+0x3e>
		return ADC_CHANNEL_5;
}

void Error_Handler(void) {

	HAL_Delay(100);
 800c088:	2064      	movs	r0, #100	; 0x64
 800c08a:	f003 fa31 	bl	800f4f0 <HAL_Delay>
	ADC_flag = 1;
 800c08e:	2368      	movs	r3, #104	; 0x68
 800c090:	2101      	movs	r1, #1
 800c092:	4a03      	ldr	r2, [pc, #12]	; (800c0a0 <MX_ADC_Init+0x50>)
 800c094:	54d1      	strb	r1, [r2, r3]
}
 800c096:	bd10      	pop	{r4, pc}
 800c098:	20007154 	.word	0x20007154
 800c09c:	40012400 	.word	0x40012400
 800c0a0:	20001e2c 	.word	0x20001e2c

0800c0a4 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800c0a4:	b500      	push	{lr}
 800c0a6:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800c0a8:	2214      	movs	r2, #20
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	a803      	add	r0, sp, #12
 800c0ae:	f006 fe47 	bl	8012d40 <memset>
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c0b2:	2080      	movs	r0, #128	; 0x80
 800c0b4:	4b11      	ldr	r3, [pc, #68]	; (800c0fc <HAL_ADC_MspInit+0x58>)
 800c0b6:	0080      	lsls	r0, r0, #2
 800c0b8:	6999      	ldr	r1, [r3, #24]
 800c0ba:	4301      	orrs	r1, r0
 800c0bc:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c0be:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c0c0:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c0c2:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c0c4:	4002      	ands	r2, r0
 800c0c6:	9201      	str	r2, [sp, #4]
 800c0c8:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c0ca:	695a      	ldr	r2, [r3, #20]
 800c0cc:	430a      	orrs	r2, r1
 800c0ce:	615a      	str	r2, [r3, #20]
 800c0d0:	695b      	ldr	r3, [r3, #20]
		if(flag_ADC_Select==1){
 800c0d2:	4a0b      	ldr	r2, [pc, #44]	; (800c100 <HAL_ADC_MspInit+0x5c>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c0d4:	400b      	ands	r3, r1
 800c0d6:	9302      	str	r3, [sp, #8]
 800c0d8:	9b02      	ldr	r3, [sp, #8]
		if(flag_ADC_Select==1){
 800c0da:	2369      	movs	r3, #105	; 0x69
 800c0dc:	5cd3      	ldrb	r3, [r2, r3]
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d001      	beq.n	800c0e6 <HAL_ADC_MspInit+0x42>
}
 800c0e2:	b009      	add	sp, #36	; 0x24
 800c0e4:	bd00      	pop	{pc}
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c0e6:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800c0e8:	333b      	adds	r3, #59	; 0x3b
 800c0ea:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c0ec:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c0ee:	3b39      	subs	r3, #57	; 0x39
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c0f0:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c0f2:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c0f4:	f004 fd1e 	bl	8010b34 <HAL_GPIO_Init>
}
 800c0f8:	e7f3      	b.n	800c0e2 <HAL_ADC_MspInit+0x3e>
 800c0fa:	46c0      	nop			; (mov r8, r8)
 800c0fc:	40021000 	.word	0x40021000
 800c100:	20001e2c 	.word	0x20001e2c

0800c104 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c106:	46ce      	mov	lr, r9
 800c108:	4647      	mov	r7, r8
	if (0 == ADC_flag)
 800c10a:	2368      	movs	r3, #104	; 0x68
void ReadTempAndVref(float *temp, float *Vref) {
 800c10c:	b580      	push	{r7, lr}
	if (0 == ADC_flag)
 800c10e:	4c54      	ldr	r4, [pc, #336]	; (800c260 <ReadTempAndVref+0x15c>)
void ReadTempAndVref(float *temp, float *Vref) {
 800c110:	0006      	movs	r6, r0
	if (0 == ADC_flag)
 800c112:	5ce3      	ldrb	r3, [r4, r3]
void ReadTempAndVref(float *temp, float *Vref) {
 800c114:	4689      	mov	r9, r1
	if (0 == ADC_flag)
 800c116:	2b00      	cmp	r3, #0
 800c118:	d100      	bne.n	800c11c <ReadTempAndVref+0x18>
 800c11a:	e09d      	b.n	800c258 <ReadTempAndVref+0x154>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c11c:	2310      	movs	r3, #16
 800c11e:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c120:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c122:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c124:	015b      	lsls	r3, r3, #5
 800c126:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c128:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c12a:	4d4e      	ldr	r5, [pc, #312]	; (800c264 <ReadTempAndVref+0x160>)
 800c12c:	316c      	adds	r1, #108	; 0x6c
 800c12e:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c130:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c132:	f003 fc85 	bl	800fa40 <HAL_ADC_ConfigChannel>
 800c136:	2800      	cmp	r0, #0
 800c138:	d000      	beq.n	800c13c <ReadTempAndVref+0x38>
 800c13a:	e089      	b.n	800c250 <ReadTempAndVref+0x14c>
	HAL_ADC_Start(&hadc);
 800c13c:	0028      	movs	r0, r5
 800c13e:	f003 fb53 	bl	800f7e8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c142:	2164      	movs	r1, #100	; 0x64
 800c144:	0028      	movs	r0, r5
 800c146:	f003 fb9b 	bl	800f880 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800c14a:	0028      	movs	r0, r5
 800c14c:	f003 fbfc 	bl	800f948 <HAL_ADC_GetValue>
 800c150:	2378      	movs	r3, #120	; 0x78
 800c152:	52e0      	strh	r0, [r4, r3]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800c154:	0400      	lsls	r0, r0, #16
 800c156:	0c00      	lsrs	r0, r0, #16
 800c158:	f7f6 fc78 	bl	8002a4c <__aeabi_i2d>
 800c15c:	4a42      	ldr	r2, [pc, #264]	; (800c268 <ReadTempAndVref+0x164>)
 800c15e:	4b43      	ldr	r3, [pc, #268]	; (800c26c <ReadTempAndVref+0x168>)
 800c160:	f7f5 fe68 	bl	8001e34 <__aeabi_dmul>
 800c164:	2200      	movs	r2, #0
 800c166:	4b42      	ldr	r3, [pc, #264]	; (800c270 <ReadTempAndVref+0x16c>)
 800c168:	f7f5 fa5a 	bl	8001620 <__aeabi_ddiv>
 800c16c:	4a41      	ldr	r2, [pc, #260]	; (800c274 <ReadTempAndVref+0x170>)
 800c16e:	4b42      	ldr	r3, [pc, #264]	; (800c278 <ReadTempAndVref+0x174>)
 800c170:	f7f6 f8d2 	bl	8002318 <__aeabi_dsub>
 800c174:	4a41      	ldr	r2, [pc, #260]	; (800c27c <ReadTempAndVref+0x178>)
 800c176:	4b42      	ldr	r3, [pc, #264]	; (800c280 <ReadTempAndVref+0x17c>)
 800c178:	f7f5 fa52 	bl	8001620 <__aeabi_ddiv>
 800c17c:	4b41      	ldr	r3, [pc, #260]	; (800c284 <ReadTempAndVref+0x180>)
 800c17e:	2200      	movs	r2, #0
 800c180:	f7f4 ff32 	bl	8000fe8 <__aeabi_dadd>
 800c184:	f7f6 fd20 	bl	8002bc8 <__aeabi_d2f>
 800c188:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800c18a:	0028      	movs	r0, r5
 800c18c:	f003 fb58 	bl	800f840 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c190:	2310      	movs	r3, #16
 800c192:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 800c194:	4b3c      	ldr	r3, [pc, #240]	; (800c288 <ReadTempAndVref+0x184>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c196:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800c198:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c19a:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c19c:	316c      	adds	r1, #108	; 0x6c
 800c19e:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c1a0:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c1a2:	f003 fc4d 	bl	800fa40 <HAL_ADC_ConfigChannel>
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d14e      	bne.n	800c248 <ReadTempAndVref+0x144>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c1aa:	2311      	movs	r3, #17
 800c1ac:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c1ae:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c1b0:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c1b2:	015b      	lsls	r3, r3, #5
 800c1b4:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800c1b6:	2305      	movs	r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c1b8:	316c      	adds	r1, #108	; 0x6c
 800c1ba:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800c1bc:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c1be:	f003 fc3f 	bl	800fa40 <HAL_ADC_ConfigChannel>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d13c      	bne.n	800c240 <ReadTempAndVref+0x13c>
	HAL_ADC_Start(&hadc);
 800c1c6:	0028      	movs	r0, r5
 800c1c8:	f003 fb0e 	bl	800f7e8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c1cc:	2164      	movs	r1, #100	; 0x64
 800c1ce:	0028      	movs	r0, r5
 800c1d0:	f003 fb56 	bl	800f880 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800c1d4:	0028      	movs	r0, r5
 800c1d6:	f003 fbb7 	bl	800f948 <HAL_ADC_GetValue>
 800c1da:	237a      	movs	r3, #122	; 0x7a
 800c1dc:	4680      	mov	r8, r0
 800c1de:	52e0      	strh	r0, [r4, r3]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800c1e0:	4b2a      	ldr	r3, [pc, #168]	; (800c28c <ReadTempAndVref+0x188>)
 800c1e2:	8818      	ldrh	r0, [r3, #0]
 800c1e4:	f7f6 fc32 	bl	8002a4c <__aeabi_i2d>
 800c1e8:	4a1f      	ldr	r2, [pc, #124]	; (800c268 <ReadTempAndVref+0x164>)
 800c1ea:	4b20      	ldr	r3, [pc, #128]	; (800c26c <ReadTempAndVref+0x168>)
 800c1ec:	f7f5 fe22 	bl	8001e34 <__aeabi_dmul>
 800c1f0:	4643      	mov	r3, r8
 800c1f2:	0006      	movs	r6, r0
 800c1f4:	0418      	lsls	r0, r3, #16
 800c1f6:	0c00      	lsrs	r0, r0, #16
 800c1f8:	000f      	movs	r7, r1
 800c1fa:	f7f6 fc27 	bl	8002a4c <__aeabi_i2d>
 800c1fe:	0002      	movs	r2, r0
 800c200:	000b      	movs	r3, r1
 800c202:	0030      	movs	r0, r6
 800c204:	0039      	movs	r1, r7
 800c206:	f7f5 fa0b 	bl	8001620 <__aeabi_ddiv>
 800c20a:	f7f6 fcdd 	bl	8002bc8 <__aeabi_d2f>
 800c20e:	464b      	mov	r3, r9
 800c210:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800c212:	0028      	movs	r0, r5
 800c214:	f003 fb14 	bl	800f840 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c218:	2311      	movs	r3, #17
 800c21a:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 800c21c:	4b1a      	ldr	r3, [pc, #104]	; (800c288 <ReadTempAndVref+0x184>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c21e:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800c220:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c222:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c224:	316c      	adds	r1, #108	; 0x6c
 800c226:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c228:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c22a:	f003 fc09 	bl	800fa40 <HAL_ADC_ConfigChannel>
 800c22e:	2800      	cmp	r0, #0
 800c230:	d002      	beq.n	800c238 <ReadTempAndVref+0x134>
	HAL_Delay(100);
 800c232:	2064      	movs	r0, #100	; 0x64
 800c234:	f003 f95c 	bl	800f4f0 <HAL_Delay>
}
 800c238:	bc0c      	pop	{r2, r3}
 800c23a:	4690      	mov	r8, r2
 800c23c:	4699      	mov	r9, r3
 800c23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_Delay(100);
 800c240:	2064      	movs	r0, #100	; 0x64
 800c242:	f003 f955 	bl	800f4f0 <HAL_Delay>
 800c246:	e7be      	b.n	800c1c6 <ReadTempAndVref+0xc2>
 800c248:	2064      	movs	r0, #100	; 0x64
 800c24a:	f003 f951 	bl	800f4f0 <HAL_Delay>
 800c24e:	e7ac      	b.n	800c1aa <ReadTempAndVref+0xa6>
 800c250:	2064      	movs	r0, #100	; 0x64
 800c252:	f003 f94d 	bl	800f4f0 <HAL_Delay>
 800c256:	e771      	b.n	800c13c <ReadTempAndVref+0x38>
		MX_ADC_Init();
 800c258:	f7ff fefa 	bl	800c050 <MX_ADC_Init>
 800c25c:	e75e      	b.n	800c11c <ReadTempAndVref+0x18>
 800c25e:	46c0      	nop			; (mov r8, r8)
 800c260:	20001e2c 	.word	0x20001e2c
 800c264:	20007154 	.word	0x20007154
 800c268:	66666666 	.word	0x66666666
 800c26c:	400a6666 	.word	0x400a6666
 800c270:	40affe00 	.word	0x40affe00
 800c274:	28f5c28f 	.word	0x28f5c28f
 800c278:	3ff68f5c 	.word	0x3ff68f5c
 800c27c:	33333333 	.word	0x33333333
 800c280:	40113333 	.word	0x40113333
 800c284:	40390000 	.word	0x40390000
 800c288:	00001001 	.word	0x00001001
 800c28c:	1ffff7ba 	.word	0x1ffff7ba

0800c290 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800c290:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (port == 2 || port == 3) {
 800c292:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800c294:	b087      	sub	sp, #28
 800c296:	0005      	movs	r5, r0
 800c298:	000e      	movs	r6, r1
	if (port == 2 || port == 3) {
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d901      	bls.n	800c2a2 <GetReadPrecentage+0x12>
}
 800c29e:	b007      	add	sp, #28
 800c2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (0 == ADC_flag) {
 800c2a2:	2368      	movs	r3, #104	; 0x68
 800c2a4:	4c57      	ldr	r4, [pc, #348]	; (800c404 <GetReadPrecentage+0x174>)
 800c2a6:	5ce3      	ldrb	r3, [r4, r3]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d062      	beq.n	800c372 <GetReadPrecentage+0xe2>
		Channel = Get_channel(GetUart(port), "bottom");
 800c2ac:	0028      	movs	r0, r5
 800c2ae:	f001 f941 	bl	800d534 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800c2b2:	4a55      	ldr	r2, [pc, #340]	; (800c408 <GetReadPrecentage+0x178>)
 800c2b4:	6803      	ldr	r3, [r0, #0]
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d07e      	beq.n	800c3b8 <GetReadPrecentage+0x128>
	else if (huart->Instance == USART6 && side == "top")
 800c2ba:	4a54      	ldr	r2, [pc, #336]	; (800c40c <GetReadPrecentage+0x17c>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d04d      	beq.n	800c35c <GetReadPrecentage+0xcc>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	0019      	movs	r1, r3
		Channel = Get_channel(GetUart(port), "bottom");
 800c2c4:	227c      	movs	r2, #124	; 0x7c
 800c2c6:	54a3      	strb	r3, [r4, r2]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c2c8:	2380      	movs	r3, #128	; 0x80
		sConfig.Channel = Channel;
 800c2ca:	66e1      	str	r1, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c2cc:	015b      	lsls	r3, r3, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c2ce:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c2d0:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c2d2:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c2d4:	4d4e      	ldr	r5, [pc, #312]	; (800c410 <GetReadPrecentage+0x180>)
 800c2d6:	316c      	adds	r1, #108	; 0x6c
 800c2d8:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c2da:	6763      	str	r3, [r4, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c2dc:	f003 fbb0 	bl	800fa40 <HAL_ADC_ConfigChannel>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d142      	bne.n	800c36a <GetReadPrecentage+0xda>
		HAL_ADC_Start(&hadc);
 800c2e4:	0028      	movs	r0, r5
 800c2e6:	f003 fa7f 	bl	800f7e8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800c2ea:	2164      	movs	r1, #100	; 0x64
 800c2ec:	0028      	movs	r0, r5
 800c2ee:	f003 fac7 	bl	800f880 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800c2f2:	0028      	movs	r0, r5
 800c2f4:	f003 fb28 	bl	800f948 <HAL_ADC_GetValue>
 800c2f8:	f7f4 fe36 	bl	8000f68 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800c2fc:	f7f6 fc12 	bl	8002b24 <__aeabi_f2d>
 800c300:	4a44      	ldr	r2, [pc, #272]	; (800c414 <GetReadPrecentage+0x184>)
 800c302:	4b45      	ldr	r3, [pc, #276]	; (800c418 <GetReadPrecentage+0x188>)
 800c304:	f7f5 fd96 	bl	8001e34 <__aeabi_dmul>
 800c308:	2200      	movs	r2, #0
 800c30a:	4b44      	ldr	r3, [pc, #272]	; (800c41c <GetReadPrecentage+0x18c>)
 800c30c:	f7f5 f988 	bl	8001620 <__aeabi_ddiv>
 800c310:	f7f6 fc5a 	bl	8002bc8 <__aeabi_d2f>
 800c314:	4f42      	ldr	r7, [pc, #264]	; (800c420 <GetReadPrecentage+0x190>)
		current = (100 * percentage) / 3.3;
 800c316:	4943      	ldr	r1, [pc, #268]	; (800c424 <GetReadPrecentage+0x194>)
		percentage = 3.3 * percentage / 4095;
 800c318:	6038      	str	r0, [r7, #0]
		current = (100 * percentage) / 3.3;
 800c31a:	f7f4 fb0f 	bl	800093c <__aeabi_fmul>
 800c31e:	f7f6 fc01 	bl	8002b24 <__aeabi_f2d>
 800c322:	4b3d      	ldr	r3, [pc, #244]	; (800c418 <GetReadPrecentage+0x188>)
 800c324:	4a3b      	ldr	r2, [pc, #236]	; (800c414 <GetReadPrecentage+0x184>)
 800c326:	f7f5 f97b 	bl	8001620 <__aeabi_ddiv>
 800c32a:	f7f6 fc4d 	bl	8002bc8 <__aeabi_d2f>
 800c32e:	6078      	str	r0, [r7, #4]
		*precentageValue = current;
 800c330:	6030      	str	r0, [r6, #0]
		HAL_ADC_Stop(&hadc);
 800c332:	0028      	movs	r0, r5
 800c334:	f003 fa84 	bl	800f840 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800c338:	237c      	movs	r3, #124	; 0x7c
 800c33a:	5ce3      	ldrb	r3, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c33c:	0021      	movs	r1, r4
		sConfig.Channel = Channel;
 800c33e:	66e3      	str	r3, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800c340:	4b39      	ldr	r3, [pc, #228]	; (800c428 <GetReadPrecentage+0x198>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c342:	316c      	adds	r1, #108	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800c344:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c346:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c348:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c34a:	6763      	str	r3, [r4, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c34c:	f003 fb78 	bl	800fa40 <HAL_ADC_ConfigChannel>
 800c350:	2800      	cmp	r0, #0
 800c352:	d0a4      	beq.n	800c29e <GetReadPrecentage+0xe>
	HAL_Delay(100);
 800c354:	2064      	movs	r0, #100	; 0x64
 800c356:	f003 f8cb 	bl	800f4f0 <HAL_Delay>
 800c35a:	e7a0      	b.n	800c29e <GetReadPrecentage+0xe>
	else if (huart->Instance == USART6 && side == "top")
 800c35c:	4a33      	ldr	r2, [pc, #204]	; (800c42c <GetReadPrecentage+0x19c>)
 800c35e:	4b34      	ldr	r3, [pc, #208]	; (800c430 <GetReadPrecentage+0x1a0>)
 800c360:	429a      	cmp	r2, r3
 800c362:	d04c      	beq.n	800c3fe <GetReadPrecentage+0x16e>
 800c364:	2105      	movs	r1, #5
		return ADC_CHANNEL_5;
 800c366:	2305      	movs	r3, #5
 800c368:	e7ac      	b.n	800c2c4 <GetReadPrecentage+0x34>
	HAL_Delay(100);
 800c36a:	2064      	movs	r0, #100	; 0x64
 800c36c:	f003 f8c0 	bl	800f4f0 <HAL_Delay>
 800c370:	e7b8      	b.n	800c2e4 <GetReadPrecentage+0x54>
			MX_ADC_Init();
 800c372:	f7ff fe6d 	bl	800c050 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800c376:	0028      	movs	r0, r5
 800c378:	f001 f8dc 	bl	800d534 <GetUart>
 800c37c:	f005 fcf0 	bl	8011d60 <HAL_UART_DeInit>
			if (port == 3) {
 800c380:	2d03      	cmp	r5, #3
 800c382:	d020      	beq.n	800c3c6 <GetReadPrecentage+0x136>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800c384:	2090      	movs	r0, #144	; 0x90
 800c386:	2104      	movs	r1, #4
 800c388:	05c0      	lsls	r0, r0, #23
 800c38a:	f004 fccf 	bl	8010d2c <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c38e:	2304      	movs	r3, #4
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c390:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c392:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c394:	3b03      	subs	r3, #3
 800c396:	9302      	str	r3, [sp, #8]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c398:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c39a:	3302      	adds	r3, #2
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c39c:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c39e:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3a0:	f004 fbc8 	bl	8010b34 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800c3a4:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800c3a6:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800c3a8:	4b22      	ldr	r3, [pc, #136]	; (800c434 <GetReadPrecentage+0x1a4>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800c3aa:	2104      	movs	r1, #4
				portStatus[port - 1] = CUSTOM;
 800c3ac:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800c3ae:	05c0      	lsls	r0, r0, #23
 800c3b0:	3a05      	subs	r2, #5
 800c3b2:	f004 fd5f 	bl	8010e74 <HAL_GPIO_WritePin>
 800c3b6:	e779      	b.n	800c2ac <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800c3b8:	4a1c      	ldr	r2, [pc, #112]	; (800c42c <GetReadPrecentage+0x19c>)
 800c3ba:	4b1d      	ldr	r3, [pc, #116]	; (800c430 <GetReadPrecentage+0x1a0>)
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d01b      	beq.n	800c3f8 <GetReadPrecentage+0x168>
 800c3c0:	2103      	movs	r1, #3
		return ADC_CHANNEL_3;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	e77e      	b.n	800c2c4 <GetReadPrecentage+0x34>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800c3c6:	2090      	movs	r0, #144	; 0x90
 800c3c8:	2110      	movs	r1, #16
 800c3ca:	05c0      	lsls	r0, r0, #23
 800c3cc:	f004 fcae 	bl	8010d2c <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c3d0:	2310      	movs	r3, #16
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3d2:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c3d4:	9301      	str	r3, [sp, #4]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3d6:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c3d8:	3b0f      	subs	r3, #15
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3da:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c3dc:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c3de:	9504      	str	r5, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3e0:	f004 fba8 	bl	8010b34 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800c3e4:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c3e6:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800c3e8:	4b12      	ldr	r3, [pc, #72]	; (800c434 <GetReadPrecentage+0x1a4>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c3ea:	2110      	movs	r1, #16
				portStatus[port - 1] = CUSTOM;
 800c3ec:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c3ee:	05c0      	lsls	r0, r0, #23
 800c3f0:	3a05      	subs	r2, #5
 800c3f2:	f004 fd3f 	bl	8010e74 <HAL_GPIO_WritePin>
 800c3f6:	e759      	b.n	800c2ac <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800c3f8:	2102      	movs	r1, #2
		return ADC_CHANNEL_2;
 800c3fa:	2302      	movs	r3, #2
 800c3fc:	e762      	b.n	800c2c4 <GetReadPrecentage+0x34>
	else if (huart->Instance == USART6 && side == "top")
 800c3fe:	2104      	movs	r1, #4
		return ADC_CHANNEL_4;
 800c400:	2304      	movs	r3, #4
 800c402:	e75f      	b.n	800c2c4 <GetReadPrecentage+0x34>
 800c404:	20001e2c 	.word	0x20001e2c
 800c408:	40004400 	.word	0x40004400
 800c40c:	40011400 	.word	0x40011400
 800c410:	20007154 	.word	0x20007154
 800c414:	66666666 	.word	0x66666666
 800c418:	400a6666 	.word	0x400a6666
 800c41c:	40affe00 	.word	0x40affe00
 800c420:	20001eac 	.word	0x20001eac
 800c424:	42c80000 	.word	0x42c80000
 800c428:	00001001 	.word	0x00001001
 800c42c:	08018870 	.word	0x08018870
 800c430:	0801886c 	.word	0x0801886c
 800c434:	20000c3c 	.word	0x20000c3c

0800c438 <Get_Rank>:

}

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800c438:	2802      	cmp	r0, #2
 800c43a:	d00e      	beq.n	800c45a <Get_Rank+0x22>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800c43c:	2803      	cmp	r0, #3
 800c43e:	d002      	beq.n	800c446 <Get_Rank+0xe>
 800c440:	4b10      	ldr	r3, [pc, #64]	; (800c484 <Get_Rank+0x4c>)
 800c442:	7a18      	ldrb	r0, [r3, #8]
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
}
 800c444:	4770      	bx	lr
	else if (Port == 3 && side == "top")
 800c446:	4b10      	ldr	r3, [pc, #64]	; (800c488 <Get_Rank+0x50>)
 800c448:	4299      	cmp	r1, r3
 800c44a:	d016      	beq.n	800c47a <Get_Rank+0x42>
	else if (Port == 3 && side == "bottom")
 800c44c:	4b0f      	ldr	r3, [pc, #60]	; (800c48c <Get_Rank+0x54>)
 800c44e:	4299      	cmp	r1, r3
 800c450:	d1f6      	bne.n	800c440 <Get_Rank+0x8>
		Rank_t = 3;
 800c452:	4b0c      	ldr	r3, [pc, #48]	; (800c484 <Get_Rank+0x4c>)
 800c454:	7218      	strb	r0, [r3, #8]
 800c456:	2003      	movs	r0, #3
 800c458:	e7f4      	b.n	800c444 <Get_Rank+0xc>
	if (Port == 2 && side == "top")
 800c45a:	4b0b      	ldr	r3, [pc, #44]	; (800c488 <Get_Rank+0x50>)
 800c45c:	4299      	cmp	r1, r3
 800c45e:	d007      	beq.n	800c470 <Get_Rank+0x38>
	else if (Port == 2 && side == "bottom")
 800c460:	4b0a      	ldr	r3, [pc, #40]	; (800c48c <Get_Rank+0x54>)
 800c462:	4299      	cmp	r1, r3
 800c464:	d1ec      	bne.n	800c440 <Get_Rank+0x8>
		Rank_t = 1;
 800c466:	2201      	movs	r2, #1
 800c468:	4b06      	ldr	r3, [pc, #24]	; (800c484 <Get_Rank+0x4c>)
 800c46a:	2001      	movs	r0, #1
 800c46c:	721a      	strb	r2, [r3, #8]
 800c46e:	e7e9      	b.n	800c444 <Get_Rank+0xc>
		Rank_t = 0;
 800c470:	2200      	movs	r2, #0
 800c472:	4b04      	ldr	r3, [pc, #16]	; (800c484 <Get_Rank+0x4c>)
 800c474:	2000      	movs	r0, #0
 800c476:	721a      	strb	r2, [r3, #8]
 800c478:	e7e4      	b.n	800c444 <Get_Rank+0xc>
		Rank_t = 2;
 800c47a:	2202      	movs	r2, #2
 800c47c:	4b01      	ldr	r3, [pc, #4]	; (800c484 <Get_Rank+0x4c>)
 800c47e:	3801      	subs	r0, #1
 800c480:	721a      	strb	r2, [r3, #8]
 800c482:	e7df      	b.n	800c444 <Get_Rank+0xc>
 800c484:	20001eac 	.word	0x20001eac
 800c488:	0801886c 	.word	0x0801886c
 800c48c:	08018870 	.word	0x08018870

0800c490 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ADC_port == 2 || ADC_port == 3) {
 800c492:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800c494:	0004      	movs	r4, r0
 800c496:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d900      	bls.n	800c49e <ADCSelectChannel+0xe>
}
 800c49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		flag_ADC_Select=1;
 800c49e:	2369      	movs	r3, #105	; 0x69
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	4e1c      	ldr	r6, [pc, #112]	; (800c514 <ADCSelectChannel+0x84>)
 800c4a4:	54f2      	strb	r2, [r6, r3]
		HAL_UART_DeInit(GetUart(ADC_port));
 800c4a6:	f001 f845 	bl	800d534 <GetUart>
 800c4aa:	f005 fc59 	bl	8011d60 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800c4ae:	2206      	movs	r2, #6
 800c4b0:	4b19      	ldr	r3, [pc, #100]	; (800c518 <ADCSelectChannel+0x88>)
		Channel = Get_channel(GetUart(ADC_port), side);
 800c4b2:	0020      	movs	r0, r4
		portStatus[ADC_port - 1] = CUSTOM;
 800c4b4:	191b      	adds	r3, r3, r4
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 800c4ba:	f001 f83b 	bl	800d534 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800c4be:	4a17      	ldr	r2, [pc, #92]	; (800c51c <ADCSelectChannel+0x8c>)
 800c4c0:	6803      	ldr	r3, [r0, #0]
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d011      	beq.n	800c4ea <ADCSelectChannel+0x5a>
	else if (huart->Instance == USART6 && side == "top")
 800c4c6:	4a16      	ldr	r2, [pc, #88]	; (800c520 <ADCSelectChannel+0x90>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d016      	beq.n	800c4fa <ADCSelectChannel+0x6a>
		Channel = Get_channel(GetUart(ADC_port), side);
 800c4cc:	237c      	movs	r3, #124	; 0x7c
		Rank_t = Get_Rank(ADC_port, side);
 800c4ce:	0029      	movs	r1, r5
 800c4d0:	0020      	movs	r0, r4
		Channel = Get_channel(GetUart(ADC_port), side);
 800c4d2:	54f7      	strb	r7, [r6, r3]
		Rank_t = Get_Rank(ADC_port, side);
 800c4d4:	f7ff ffb0 	bl	800c438 <Get_Rank>
 800c4d8:	4b12      	ldr	r3, [pc, #72]	; (800c524 <ADCSelectChannel+0x94>)
 800c4da:	7218      	strb	r0, [r3, #8]
		if (ADC_flag == 0)
 800c4dc:	2368      	movs	r3, #104	; 0x68
 800c4de:	5cf3      	ldrb	r3, [r6, r3]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1db      	bne.n	800c49c <ADCSelectChannel+0xc>
			MX_ADC_Init();
 800c4e4:	f7ff fdb4 	bl	800c050 <MX_ADC_Init>
}
 800c4e8:	e7d8      	b.n	800c49c <ADCSelectChannel+0xc>
	if (huart->Instance == USART2 && side == "top")
 800c4ea:	4b0f      	ldr	r3, [pc, #60]	; (800c528 <ADCSelectChannel+0x98>)
 800c4ec:	429d      	cmp	r5, r3
 800c4ee:	d00e      	beq.n	800c50e <ADCSelectChannel+0x7e>
	else if (huart->Instance == USART2 && side == "bottom")
 800c4f0:	4b0e      	ldr	r3, [pc, #56]	; (800c52c <ADCSelectChannel+0x9c>)
 800c4f2:	429d      	cmp	r5, r3
 800c4f4:	d1ea      	bne.n	800c4cc <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_3;
 800c4f6:	2703      	movs	r7, #3
 800c4f8:	e7e8      	b.n	800c4cc <ADCSelectChannel+0x3c>
	else if (huart->Instance == USART6 && side == "top")
 800c4fa:	4b0b      	ldr	r3, [pc, #44]	; (800c528 <ADCSelectChannel+0x98>)
 800c4fc:	429d      	cmp	r5, r3
 800c4fe:	d004      	beq.n	800c50a <ADCSelectChannel+0x7a>
	else if (huart->Instance == USART6 && side == "bottom")
 800c500:	4b0a      	ldr	r3, [pc, #40]	; (800c52c <ADCSelectChannel+0x9c>)
 800c502:	429d      	cmp	r5, r3
 800c504:	d1e2      	bne.n	800c4cc <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_5;
 800c506:	2705      	movs	r7, #5
 800c508:	e7e0      	b.n	800c4cc <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_4;
 800c50a:	2704      	movs	r7, #4
 800c50c:	e7de      	b.n	800c4cc <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_2;
 800c50e:	2702      	movs	r7, #2
 800c510:	e7dc      	b.n	800c4cc <ADCSelectChannel+0x3c>
 800c512:	46c0      	nop			; (mov r8, r8)
 800c514:	20001e2c 	.word	0x20001e2c
 800c518:	20000c3c 	.word	0x20000c3c
 800c51c:	40004400 	.word	0x40004400
 800c520:	40011400 	.word	0x40011400
 800c524:	20001eac 	.word	0x20001eac
 800c528:	0801886c 	.word	0x0801886c
 800c52c:	08018870 	.word	0x08018870

0800c530 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c532:	4647      	mov	r7, r8
 800c534:	46ce      	mov	lr, r9
	if (ADC_flag == 1) {
 800c536:	2368      	movs	r3, #104	; 0x68
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800c538:	b580      	push	{r7, lr}
	if (ADC_flag == 1) {
 800c53a:	4d3a      	ldr	r5, [pc, #232]	; (800c624 <ReadADCChannel+0xf4>)
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800c53c:	0007      	movs	r7, r0
	if (ADC_flag == 1) {
 800c53e:	5ceb      	ldrb	r3, [r5, r3]
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800c540:	000c      	movs	r4, r1
 800c542:	0016      	movs	r6, r2
	if (ADC_flag == 1) {
 800c544:	2b01      	cmp	r3, #1
 800c546:	d00b      	beq.n	800c560 <ReadADCChannel+0x30>
 800c548:	4c37      	ldr	r4, [pc, #220]	; (800c628 <ReadADCChannel+0xf8>)
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800c54a:	7a23      	ldrb	r3, [r4, #8]
 800c54c:	005b      	lsls	r3, r3, #1
 800c54e:	18e4      	adds	r4, r4, r3
 800c550:	89a0      	ldrh	r0, [r4, #12]
 800c552:	f7f4 fd09 	bl	8000f68 <__aeabi_ui2f>
 800c556:	6030      	str	r0, [r6, #0]
}
 800c558:	bc0c      	pop	{r2, r3}
 800c55a:	4690      	mov	r8, r2
 800c55c:	4699      	mov	r9, r3
 800c55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800c560:	f000 ffe8 	bl	800d534 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800c564:	4a31      	ldr	r2, [pc, #196]	; (800c62c <ReadADCChannel+0xfc>)
 800c566:	6803      	ldr	r3, [r0, #0]
 800c568:	4293      	cmp	r3, r2
 800c56a:	d03f      	beq.n	800c5ec <ReadADCChannel+0xbc>
	else if (huart->Instance == USART6 && side == "top")
 800c56c:	4a30      	ldr	r2, [pc, #192]	; (800c630 <ReadADCChannel+0x100>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d049      	beq.n	800c606 <ReadADCChannel+0xd6>
		Channel = Get_channel(GetUart(Port), side);
 800c572:	237c      	movs	r3, #124	; 0x7c
 800c574:	464a      	mov	r2, r9
 800c576:	4698      	mov	r8, r3
		Rank_t = Get_Rank(Port, side);
 800c578:	0021      	movs	r1, r4
 800c57a:	0038      	movs	r0, r7
		Channel = Get_channel(GetUart(Port), side);
 800c57c:	54ea      	strb	r2, [r5, r3]
		Rank_t = Get_Rank(Port, side);
 800c57e:	f7ff ff5b 	bl	800c438 <Get_Rank>
		sConfig.Channel = Channel;
 800c582:	4643      	mov	r3, r8
 800c584:	5ceb      	ldrb	r3, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c586:	0029      	movs	r1, r5
		sConfig.Channel = Channel;
 800c588:	66eb      	str	r3, [r5, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c58a:	2380      	movs	r3, #128	; 0x80
 800c58c:	015b      	lsls	r3, r3, #5
 800c58e:	672b      	str	r3, [r5, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c590:	2303      	movs	r3, #3
		Rank_t = Get_Rank(Port, side);
 800c592:	4c25      	ldr	r4, [pc, #148]	; (800c628 <ReadADCChannel+0xf8>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c594:	4f27      	ldr	r7, [pc, #156]	; (800c634 <ReadADCChannel+0x104>)
		Rank_t = Get_Rank(Port, side);
 800c596:	7220      	strb	r0, [r4, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c598:	316c      	adds	r1, #108	; 0x6c
 800c59a:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c59c:	676b      	str	r3, [r5, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c59e:	f003 fa4f 	bl	800fa40 <HAL_ADC_ConfigChannel>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d12b      	bne.n	800c5fe <ReadADCChannel+0xce>
		HAL_ADC_Start(&hadc);
 800c5a6:	0038      	movs	r0, r7
 800c5a8:	f003 f91e 	bl	800f7e8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800c5ac:	2164      	movs	r1, #100	; 0x64
 800c5ae:	0038      	movs	r0, r7
 800c5b0:	f003 f966 	bl	800f880 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800c5b4:	0038      	movs	r0, r7
 800c5b6:	f003 f9c7 	bl	800f948 <HAL_ADC_GetValue>
 800c5ba:	7a23      	ldrb	r3, [r4, #8]
 800c5bc:	005b      	lsls	r3, r3, #1
 800c5be:	18e3      	adds	r3, r4, r3
 800c5c0:	8198      	strh	r0, [r3, #12]
		HAL_ADC_Stop(&hadc);
 800c5c2:	0038      	movs	r0, r7
 800c5c4:	f003 f93c 	bl	800f840 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800c5c8:	237c      	movs	r3, #124	; 0x7c
 800c5ca:	5ceb      	ldrb	r3, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c5cc:	0029      	movs	r1, r5
		sConfig.Channel = Channel;
 800c5ce:	66eb      	str	r3, [r5, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800c5d0:	4b19      	ldr	r3, [pc, #100]	; (800c638 <ReadADCChannel+0x108>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c5d2:	316c      	adds	r1, #108	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800c5d4:	672b      	str	r3, [r5, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c5d6:	2303      	movs	r3, #3
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c5d8:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c5da:	676b      	str	r3, [r5, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c5dc:	f003 fa30 	bl	800fa40 <HAL_ADC_ConfigChannel>
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	d0b2      	beq.n	800c54a <ReadADCChannel+0x1a>
	HAL_Delay(100);
 800c5e4:	2064      	movs	r0, #100	; 0x64
 800c5e6:	f002 ff83 	bl	800f4f0 <HAL_Delay>
 800c5ea:	e7ae      	b.n	800c54a <ReadADCChannel+0x1a>
	if (huart->Instance == USART2 && side == "top")
 800c5ec:	4b13      	ldr	r3, [pc, #76]	; (800c63c <ReadADCChannel+0x10c>)
 800c5ee:	429c      	cmp	r4, r3
 800c5f0:	d012      	beq.n	800c618 <ReadADCChannel+0xe8>
	else if (huart->Instance == USART2 && side == "bottom")
 800c5f2:	4b13      	ldr	r3, [pc, #76]	; (800c640 <ReadADCChannel+0x110>)
 800c5f4:	429c      	cmp	r4, r3
 800c5f6:	d1bc      	bne.n	800c572 <ReadADCChannel+0x42>
		return ADC_CHANNEL_3;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	4699      	mov	r9, r3
 800c5fc:	e7b9      	b.n	800c572 <ReadADCChannel+0x42>
	HAL_Delay(100);
 800c5fe:	2064      	movs	r0, #100	; 0x64
 800c600:	f002 ff76 	bl	800f4f0 <HAL_Delay>
 800c604:	e7cf      	b.n	800c5a6 <ReadADCChannel+0x76>
	else if (huart->Instance == USART6 && side == "top")
 800c606:	4b0d      	ldr	r3, [pc, #52]	; (800c63c <ReadADCChannel+0x10c>)
 800c608:	429c      	cmp	r4, r3
 800c60a:	d008      	beq.n	800c61e <ReadADCChannel+0xee>
	else if (huart->Instance == USART6 && side == "bottom")
 800c60c:	4b0c      	ldr	r3, [pc, #48]	; (800c640 <ReadADCChannel+0x110>)
 800c60e:	429c      	cmp	r4, r3
 800c610:	d1af      	bne.n	800c572 <ReadADCChannel+0x42>
		return ADC_CHANNEL_5;
 800c612:	2305      	movs	r3, #5
 800c614:	4699      	mov	r9, r3
 800c616:	e7ac      	b.n	800c572 <ReadADCChannel+0x42>
		return ADC_CHANNEL_2;
 800c618:	2302      	movs	r3, #2
 800c61a:	4699      	mov	r9, r3
 800c61c:	e7a9      	b.n	800c572 <ReadADCChannel+0x42>
		return ADC_CHANNEL_4;
 800c61e:	2304      	movs	r3, #4
 800c620:	4699      	mov	r9, r3
 800c622:	e7a6      	b.n	800c572 <ReadADCChannel+0x42>
 800c624:	20001e2c 	.word	0x20001e2c
 800c628:	20001eac 	.word	0x20001eac
 800c62c:	40004400 	.word	0x40004400
 800c630:	40011400 	.word	0x40011400
 800c634:	20007154 	.word	0x20007154
 800c638:	00001001 	.word	0x00001001
 800c63c:	0801886c 	.word	0x0801886c
 800c640:	08018870 	.word	0x08018870

0800c644 <buttonReleasedCallback>:
 800c644:	4770      	bx	lr
 800c646:	46c0      	nop			; (mov r8, r8)

0800c648 <buttonClickedCallback>:
 800c648:	4770      	bx	lr
 800c64a:	46c0      	nop			; (mov r8, r8)

0800c64c <buttonDblClickedCallback>:
 800c64c:	4770      	bx	lr
 800c64e:	46c0      	nop			; (mov r8, r8)

0800c650 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800c650:	4770      	bx	lr
 800c652:	46c0      	nop			; (mov r8, r8)

0800c654 <buttonReleasedForYCallback>:
 800c654:	4770      	bx	lr
 800c656:	46c0      	nop			; (mov r8, r8)

0800c658 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800c658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c65a:	4645      	mov	r5, r8
 800c65c:	46de      	mov	lr, fp
 800c65e:	464e      	mov	r6, r9
 800c660:	4657      	mov	r7, sl
 800c662:	4bc5      	ldr	r3, [pc, #788]	; (800c978 <CheckAttachedButtons+0x320>)
 800c664:	b5e0      	push	{r5, r6, r7, lr}
 800c666:	4698      	mov	r8, r3
 800c668:	001c      	movs	r4, r3
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800c66a:	2300      	movs	r3, #0
void CheckAttachedButtons(void) {
 800c66c:	b08b      	sub	sp, #44	; 0x2c
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800c66e:	9304      	str	r3, [sp, #16]
 800c670:	469b      	mov	fp, r3
			if (delayButtonStateReset == false)
 800c672:	4bc2      	ldr	r3, [pc, #776]	; (800c97c <CheckAttachedButtons+0x324>)
void CheckAttachedButtons(void) {
 800c674:	2501      	movs	r5, #1
			if (delayButtonStateReset == false)
 800c676:	4699      	mov	r9, r3
 800c678:	b2eb      	uxtb	r3, r5
 800c67a:	469a      	mov	sl, r3
		if (button[i].type)			// Only check defined butons
 800c67c:	7aa3      	ldrb	r3, [r4, #10]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d100      	bne.n	800c684 <CheckAttachedButtons+0x2c>
 800c682:	e0c0      	b.n	800c806 <CheckAttachedButtons+0x1ae>
			if (delayButtonStateReset == false)
 800c684:	464b      	mov	r3, r9
 800c686:	7d1b      	ldrb	r3, [r3, #20]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d100      	bne.n	800c68e <CheckAttachedButtons+0x36>
				button[i].state = NONE;
 800c68c:	7263      	strb	r3, [r4, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800c68e:	ab04      	add	r3, sp, #16
 800c690:	469c      	mov	ip, r3
 800c692:	270e      	movs	r7, #14
 800c694:	ae07      	add	r6, sp, #28
 800c696:	4467      	add	r7, ip
 800c698:	ab09      	add	r3, sp, #36	; 0x24
 800c69a:	0032      	movs	r2, r6
 800c69c:	a908      	add	r1, sp, #32
 800c69e:	9700      	str	r7, [sp, #0]
 800c6a0:	4650      	mov	r0, sl
 800c6a2:	f7ff f9db 	bl	800ba5c <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800c6a6:	8831      	ldrh	r1, [r6, #0]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	9808      	ldr	r0, [sp, #32]
 800c6ac:	f004 fbe2 	bl	8010e74 <HAL_GPIO_WritePin>
			Delay_us(10);
 800c6b0:	200a      	movs	r0, #10
 800c6b2:	f000 fd0d 	bl	800d0d0 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800c6b6:	8839      	ldrh	r1, [r7, #0]
 800c6b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6ba:	f004 fbd5 	bl	8010e68 <HAL_GPIO_ReadPin>
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	d100      	bne.n	800c6c4 <CheckAttachedButtons+0x6c>
 800c6c2:	e14b      	b.n	800c95c <CheckAttachedButtons+0x304>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800c6c4:	8831      	ldrh	r1, [r6, #0]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	9808      	ldr	r0, [sp, #32]
 800c6ca:	f004 fbd3 	bl	8010e74 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800c6ce:	7aa3      	ldrb	r3, [r4, #10]
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d100      	bne.n	800c6d6 <CheckAttachedButtons+0x7e>
 800c6d4:	e0a6      	b.n	800c824 <CheckAttachedButtons+0x1cc>
 800c6d6:	d800      	bhi.n	800c6da <CheckAttachedButtons+0x82>
 800c6d8:	e0a1      	b.n	800c81e <CheckAttachedButtons+0x1c6>
 800c6da:	2b03      	cmp	r3, #3
 800c6dc:	d100      	bne.n	800c6e0 <CheckAttachedButtons+0x88>
 800c6de:	e170      	b.n	800c9c2 <CheckAttachedButtons+0x36a>
 800c6e0:	2b04      	cmp	r3, #4
 800c6e2:	d000      	beq.n	800c6e6 <CheckAttachedButtons+0x8e>
 800c6e4:	e156      	b.n	800c994 <CheckAttachedButtons+0x33c>
 800c6e6:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800c6e8:	4658      	mov	r0, fp
 800c6ea:	00aa      	lsls	r2, r5, #2
 800c6ec:	3138      	adds	r1, #56	; 0x38
 800c6ee:	588b      	ldr	r3, [r1, r2]
 800c6f0:	2801      	cmp	r0, #1
 800c6f2:	d100      	bne.n	800c6f6 <CheckAttachedButtons+0x9e>
 800c6f4:	e170      	b.n	800c9d8 <CheckAttachedButtons+0x380>
				else if (connected == GPIO_PIN_RESET)
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	d100      	bne.n	800c6fc <CheckAttachedButtons+0xa4>
 800c6fa:	e217      	b.n	800cb2c <CheckAttachedButtons+0x4d4>
			if (state == CLOSED || state == ON) {
 800c6fc:	9904      	ldr	r1, [sp, #16]
 800c6fe:	2904      	cmp	r1, #4
 800c700:	d100      	bne.n	800c704 <CheckAttachedButtons+0xac>
 800c702:	e14f      	b.n	800c9a4 <CheckAttachedButtons+0x34c>
 800c704:	9904      	ldr	r1, [sp, #16]
 800c706:	2902      	cmp	r1, #2
 800c708:	d100      	bne.n	800c70c <CheckAttachedButtons+0xb4>
 800c70a:	e14b      	b.n	800c9a4 <CheckAttachedButtons+0x34c>
			if (state == OPEN || state == OFF) {
 800c70c:	9904      	ldr	r1, [sp, #16]
 800c70e:	2903      	cmp	r1, #3
 800c710:	d002      	beq.n	800c718 <CheckAttachedButtons+0xc0>
 800c712:	489b      	ldr	r0, [pc, #620]	; (800c980 <CheckAttachedButtons+0x328>)
 800c714:	2901      	cmp	r1, #1
 800c716:	d114      	bne.n	800c742 <CheckAttachedButtons+0xea>
				if (releaseCounter[i] < 0xFFFF)
 800c718:	4640      	mov	r0, r8
 800c71a:	3050      	adds	r0, #80	; 0x50
 800c71c:	5881      	ldr	r1, [r0, r2]
 800c71e:	4e99      	ldr	r6, [pc, #612]	; (800c984 <CheckAttachedButtons+0x32c>)
 800c720:	42b1      	cmp	r1, r6
 800c722:	d900      	bls.n	800c726 <CheckAttachedButtons+0xce>
 800c724:	e092      	b.n	800c84c <CheckAttachedButtons+0x1f4>
				if (clicked == 2
 800c726:	464f      	mov	r7, r9
					++releaseCounter[i];		// Advance the debounce counter
 800c728:	3101      	adds	r1, #1
 800c72a:	5081      	str	r1, [r0, r2]
				if (clicked == 2
 800c72c:	7fbf      	ldrb	r7, [r7, #30]
 800c72e:	4996      	ldr	r1, [pc, #600]	; (800c988 <CheckAttachedButtons+0x330>)
 800c730:	4893      	ldr	r0, [pc, #588]	; (800c980 <CheckAttachedButtons+0x328>)
 800c732:	5c69      	ldrb	r1, [r5, r1]
 800c734:	7946      	ldrb	r6, [r0, #5]
 800c736:	2f02      	cmp	r7, #2
 800c738:	d100      	bne.n	800c73c <CheckAttachedButtons+0xe4>
 800c73a:	e092      	b.n	800c862 <CheckAttachedButtons+0x20a>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800c73c:	42b1      	cmp	r1, r6
 800c73e:	d900      	bls.n	800c742 <CheckAttachedButtons+0xea>
 800c740:	e139      	b.n	800c9b6 <CheckAttachedButtons+0x35e>
 800c742:	4646      	mov	r6, r8
 800c744:	3650      	adds	r6, #80	; 0x50
 800c746:	58b6      	ldr	r6, [r6, r2]
			if (pressCounter[i] < BOS.buttons.debounce) {
 800c748:	8801      	ldrh	r1, [r0, #0]
 800c74a:	9603      	str	r6, [sp, #12]
 800c74c:	4299      	cmp	r1, r3
 800c74e:	d826      	bhi.n	800c79e <CheckAttachedButtons+0x146>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800c750:	d105      	bne.n	800c75e <CheckAttachedButtons+0x106>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800c752:	2707      	movs	r7, #7
 800c754:	7267      	strb	r7, [r4, #9]
					++pressCounter[i];
 800c756:	4647      	mov	r7, r8
 800c758:	3301      	adds	r3, #1
 800c75a:	3738      	adds	r7, #56	; 0x38
 800c75c:	50bb      	str	r3, [r7, r2]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800c75e:	9e03      	ldr	r6, [sp, #12]
 800c760:	42b1      	cmp	r1, r6
 800c762:	d205      	bcs.n	800c770 <CheckAttachedButtons+0x118>
					releaseCounter[i] = 0;
 800c764:	4646      	mov	r6, r8
 800c766:	2700      	movs	r7, #0
 800c768:	3650      	adds	r6, #80	; 0x50
 800c76a:	50b7      	str	r7, [r6, r2]
 800c76c:	2600      	movs	r6, #0
 800c76e:	9603      	str	r6, [sp, #12]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800c770:	8847      	ldrh	r7, [r0, #2]
 800c772:	9705      	str	r7, [sp, #20]
 800c774:	429f      	cmp	r7, r3
 800c776:	d300      	bcc.n	800c77a <CheckAttachedButtons+0x122>
 800c778:	e07a      	b.n	800c870 <CheckAttachedButtons+0x218>
						&& pressCounter[i] < 500) {
 800c77a:	27f4      	movs	r7, #244	; 0xf4
 800c77c:	37ff      	adds	r7, #255	; 0xff
 800c77e:	42bb      	cmp	r3, r7
 800c780:	d900      	bls.n	800c784 <CheckAttachedButtons+0x12c>
 800c782:	e075      	b.n	800c870 <CheckAttachedButtons+0x218>
					if (clicked == 0)
 800c784:	464b      	mov	r3, r9
 800c786:	7f9b      	ldrb	r3, [r3, #30]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d100      	bne.n	800c78e <CheckAttachedButtons+0x136>
 800c78c:	e1d8      	b.n	800cb40 <CheckAttachedButtons+0x4e8>
					else if (clicked == 2) {
 800c78e:	2b02      	cmp	r3, #2
 800c790:	d105      	bne.n	800c79e <CheckAttachedButtons+0x146>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800c792:	4b7d      	ldr	r3, [pc, #500]	; (800c988 <CheckAttachedButtons+0x330>)
 800c794:	7907      	ldrb	r7, [r0, #4]
 800c796:	5ceb      	ldrb	r3, [r5, r3]
 800c798:	429f      	cmp	r7, r3
 800c79a:	d200      	bcs.n	800c79e <CheckAttachedButtons+0x146>
 800c79c:	e1dc      	b.n	800cb58 <CheckAttachedButtons+0x500>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800c79e:	9b03      	ldr	r3, [sp, #12]
 800c7a0:	4299      	cmp	r1, r3
 800c7a2:	d822      	bhi.n	800c7ea <CheckAttachedButtons+0x192>
 800c7a4:	4643      	mov	r3, r8
 800c7a6:	8840      	ldrh	r0, [r0, #2]
 800c7a8:	3338      	adds	r3, #56	; 0x38
 800c7aa:	589b      	ldr	r3, [r3, r2]
 800c7ac:	9005      	str	r0, [sp, #20]
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800c7ae:	9803      	ldr	r0, [sp, #12]
 800c7b0:	4281      	cmp	r1, r0
 800c7b2:	d100      	bne.n	800c7b6 <CheckAttachedButtons+0x15e>
 800c7b4:	e19b      	b.n	800caee <CheckAttachedButtons+0x496>
 800c7b6:	4640      	mov	r0, r8
 800c7b8:	3050      	adds	r0, #80	; 0x50
 800c7ba:	5880      	ldr	r0, [r0, r2]
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800c7bc:	4299      	cmp	r1, r3
 800c7be:	d203      	bcs.n	800c7c8 <CheckAttachedButtons+0x170>
					pressCounter[i] = 0;
 800c7c0:	4643      	mov	r3, r8
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	3338      	adds	r3, #56	; 0x38
 800c7c6:	5099      	str	r1, [r3, r2]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800c7c8:	9b05      	ldr	r3, [sp, #20]
 800c7ca:	4283      	cmp	r3, r0
 800c7cc:	d300      	bcc.n	800c7d0 <CheckAttachedButtons+0x178>
 800c7ce:	e091      	b.n	800c8f4 <CheckAttachedButtons+0x29c>
						&& releaseCounter[i] < 500) {
 800c7d0:	23f4      	movs	r3, #244	; 0xf4
 800c7d2:	33ff      	adds	r3, #255	; 0xff
 800c7d4:	4298      	cmp	r0, r3
 800c7d6:	d900      	bls.n	800c7da <CheckAttachedButtons+0x182>
 800c7d8:	e08c      	b.n	800c8f4 <CheckAttachedButtons+0x29c>
					if (clicked == 1) {
 800c7da:	464b      	mov	r3, r9
 800c7dc:	7f9b      	ldrb	r3, [r3, #30]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d100      	bne.n	800c7e4 <CheckAttachedButtons+0x18c>
 800c7e2:	e15c      	b.n	800ca9e <CheckAttachedButtons+0x446>
					} else if (clicked == 3) {
 800c7e4:	2b03      	cmp	r3, #3
 800c7e6:	d100      	bne.n	800c7ea <CheckAttachedButtons+0x192>
 800c7e8:	e12d      	b.n	800ca46 <CheckAttachedButtons+0x3ee>
			switch (button[i].state) {
 800c7ea:	7a63      	ldrb	r3, [r4, #9]
 800c7ec:	3b05      	subs	r3, #5
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	2b09      	cmp	r3, #9
 800c7f2:	d808      	bhi.n	800c806 <CheckAttachedButtons+0x1ae>
 800c7f4:	4a65      	ldr	r2, [pc, #404]	; (800c98c <CheckAttachedButtons+0x334>)
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	58d3      	ldr	r3, [r2, r3]
 800c7fa:	469f      	mov	pc, r3
				buttonPressedCallback(i);
 800c7fc:	4650      	mov	r0, sl
 800c7fe:	f7ff fa01 	bl	800bc04 <buttonPressedCallback>
				button[i].state = NONE;
 800c802:	2300      	movs	r3, #0
 800c804:	7263      	strb	r3, [r4, #9]
 800c806:	3501      	adds	r5, #1
 800c808:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800c80a:	2d06      	cmp	r5, #6
 800c80c:	d000      	beq.n	800c810 <CheckAttachedButtons+0x1b8>
 800c80e:	e733      	b.n	800c678 <CheckAttachedButtons+0x20>
}
 800c810:	b00b      	add	sp, #44	; 0x2c
 800c812:	bc3c      	pop	{r2, r3, r4, r5}
 800c814:	4690      	mov	r8, r2
 800c816:	4699      	mov	r9, r3
 800c818:	46a2      	mov	sl, r4
 800c81a:	46ab      	mov	fp, r5
 800c81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (button[i].type) {
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d000      	beq.n	800c824 <CheckAttachedButtons+0x1cc>
 800c822:	e0b7      	b.n	800c994 <CheckAttachedButtons+0x33c>
 800c824:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800c826:	4658      	mov	r0, fp
 800c828:	00aa      	lsls	r2, r5, #2
 800c82a:	3138      	adds	r1, #56	; 0x38
 800c82c:	588b      	ldr	r3, [r1, r2]
 800c82e:	2801      	cmp	r0, #1
 800c830:	d100      	bne.n	800c834 <CheckAttachedButtons+0x1dc>
 800c832:	e163      	b.n	800cafc <CheckAttachedButtons+0x4a4>
				else if (connected == GPIO_PIN_RESET)
 800c834:	2800      	cmp	r0, #0
 800c836:	d000      	beq.n	800c83a <CheckAttachedButtons+0x1e2>
 800c838:	e760      	b.n	800c6fc <CheckAttachedButtons+0xa4>
				if (releaseCounter[i] < 0xFFFF)
 800c83a:	4640      	mov	r0, r8
 800c83c:	2103      	movs	r1, #3
 800c83e:	3050      	adds	r0, #80	; 0x50
 800c840:	9104      	str	r1, [sp, #16]
 800c842:	4e50      	ldr	r6, [pc, #320]	; (800c984 <CheckAttachedButtons+0x32c>)
 800c844:	5881      	ldr	r1, [r0, r2]
 800c846:	42b1      	cmp	r1, r6
 800c848:	d800      	bhi.n	800c84c <CheckAttachedButtons+0x1f4>
 800c84a:	e76c      	b.n	800c726 <CheckAttachedButtons+0xce>
					releaseCounter[i] = 0;		// Reset debounce counter
 800c84c:	2100      	movs	r1, #0
				if (clicked == 2
 800c84e:	464f      	mov	r7, r9
					releaseCounter[i] = 0;		// Reset debounce counter
 800c850:	5081      	str	r1, [r0, r2]
				if (clicked == 2
 800c852:	7fbf      	ldrb	r7, [r7, #30]
 800c854:	494c      	ldr	r1, [pc, #304]	; (800c988 <CheckAttachedButtons+0x330>)
 800c856:	484a      	ldr	r0, [pc, #296]	; (800c980 <CheckAttachedButtons+0x328>)
 800c858:	5c69      	ldrb	r1, [r5, r1]
 800c85a:	7946      	ldrb	r6, [r0, #5]
 800c85c:	2f02      	cmp	r7, #2
 800c85e:	d000      	beq.n	800c862 <CheckAttachedButtons+0x20a>
 800c860:	e76c      	b.n	800c73c <CheckAttachedButtons+0xe4>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800c862:	42b1      	cmp	r1, r6
 800c864:	d900      	bls.n	800c868 <CheckAttachedButtons+0x210>
 800c866:	e0a6      	b.n	800c9b6 <CheckAttachedButtons+0x35e>
					++dblCounter[i];
 800c868:	4e47      	ldr	r6, [pc, #284]	; (800c988 <CheckAttachedButtons+0x330>)
 800c86a:	3101      	adds	r1, #1
 800c86c:	55a9      	strb	r1, [r5, r6]
 800c86e:	e768      	b.n	800c742 <CheckAttachedButtons+0xea>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800c870:	4f47      	ldr	r7, [pc, #284]	; (800c990 <CheckAttachedButtons+0x338>)
 800c872:	46bc      	mov	ip, r7
 800c874:	001f      	movs	r7, r3
 800c876:	3ff5      	subs	r7, #245	; 0xf5
 800c878:	3fff      	subs	r7, #255	; 0xff
 800c87a:	4567      	cmp	r7, ip
 800c87c:	d900      	bls.n	800c880 <CheckAttachedButtons+0x228>
 800c87e:	e78e      	b.n	800c79e <CheckAttachedButtons+0x146>
					if (clicked)
 800c880:	464f      	mov	r7, r9
 800c882:	7fbf      	ldrb	r7, [r7, #30]
 800c884:	2f00      	cmp	r7, #0
 800c886:	d002      	beq.n	800c88e <CheckAttachedButtons+0x236>
						clicked = 0;						// Cannot be a click
 800c888:	2700      	movs	r7, #0
 800c88a:	464e      	mov	r6, r9
 800c88c:	77b7      	strb	r7, [r6, #30]
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800c88e:	7ae7      	ldrb	r7, [r4, #11]
 800c890:	46bc      	mov	ip, r7
	t1 *= 1000;
 800c892:	4666      	mov	r6, ip
 800c894:	017f      	lsls	r7, r7, #5
 800c896:	1bbf      	subs	r7, r7, r6
 800c898:	00bf      	lsls	r7, r7, #2
 800c89a:	4467      	add	r7, ip
 800c89c:	00ff      	lsls	r7, r7, #3
	if (pressCounter[port] == t1) {
 800c89e:	429f      	cmp	r7, r3
 800c8a0:	d100      	bne.n	800c8a4 <CheckAttachedButtons+0x24c>
 800c8a2:	e0e5      	b.n	800ca70 <CheckAttachedButtons+0x418>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800c8a4:	7b26      	ldrb	r6, [r4, #12]
 800c8a6:	46b4      	mov	ip, r6
	t2 *= 1000;
 800c8a8:	0177      	lsls	r7, r6, #5
 800c8aa:	1bbf      	subs	r7, r7, r6
 800c8ac:	00bf      	lsls	r7, r7, #2
 800c8ae:	4467      	add	r7, ip
 800c8b0:	00ff      	lsls	r7, r7, #3
	} else if (pressCounter[port] == t2) {
 800c8b2:	429f      	cmp	r7, r3
 800c8b4:	d009      	beq.n	800c8ca <CheckAttachedButtons+0x272>
			t3 = button[port].pressedX3Sec;
 800c8b6:	7b66      	ldrb	r6, [r4, #13]
 800c8b8:	46b4      	mov	ip, r6
	t3 *= 1000;
 800c8ba:	0177      	lsls	r7, r6, #5
 800c8bc:	1bbf      	subs	r7, r7, r6
 800c8be:	00bf      	lsls	r7, r7, #2
 800c8c0:	4467      	add	r7, ip
 800c8c2:	00ff      	lsls	r7, r7, #3
	} else if (pressCounter[port] == t3) {
 800c8c4:	429f      	cmp	r7, r3
 800c8c6:	d000      	beq.n	800c8ca <CheckAttachedButtons+0x272>
 800c8c8:	e769      	b.n	800c79e <CheckAttachedButtons+0x146>
		button[port].state = PRESSED_FOR_X2_SEC;
 800c8ca:	200a      	movs	r0, #10
 800c8cc:	7260      	strb	r0, [r4, #9]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800c8ce:	9803      	ldr	r0, [sp, #12]
 800c8d0:	4281      	cmp	r1, r0
 800c8d2:	d800      	bhi.n	800c8d6 <CheckAttachedButtons+0x27e>
 800c8d4:	e76b      	b.n	800c7ae <CheckAttachedButtons+0x156>
				if (!delayButtonStateReset
 800c8d6:	464b      	mov	r3, r9
 800c8d8:	7d1b      	ldrb	r3, [r3, #20]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d193      	bne.n	800c806 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800c8de:	7c63      	ldrb	r3, [r4, #17]
 800c8e0:	071b      	lsls	r3, r3, #28
 800c8e2:	d590      	bpl.n	800c806 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800c8e8:	2102      	movs	r1, #2
 800c8ea:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c8ec:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800c8ee:	f7ff feaf 	bl	800c650 <buttonPressedForXCallback>
 800c8f2:	e788      	b.n	800c806 <CheckAttachedButtons+0x1ae>
				} else if (releaseCounter[i] >= 500
 800c8f4:	0003      	movs	r3, r0
 800c8f6:	4a26      	ldr	r2, [pc, #152]	; (800c990 <CheckAttachedButtons+0x338>)
 800c8f8:	3bf5      	subs	r3, #245	; 0xf5
 800c8fa:	3bff      	subs	r3, #255	; 0xff
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d900      	bls.n	800c902 <CheckAttachedButtons+0x2aa>
 800c900:	e773      	b.n	800c7ea <CheckAttachedButtons+0x192>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800c902:	7ba1      	ldrb	r1, [r4, #14]
	t1 *= 1000;
 800c904:	014b      	lsls	r3, r1, #5
 800c906:	1a5b      	subs	r3, r3, r1
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	185b      	adds	r3, r3, r1
 800c90c:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 800c90e:	4283      	cmp	r3, r0
 800c910:	d100      	bne.n	800c914 <CheckAttachedButtons+0x2bc>
 800c912:	e0d9      	b.n	800cac8 <CheckAttachedButtons+0x470>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800c914:	7be1      	ldrb	r1, [r4, #15]
	t2 *= 1000;
 800c916:	014b      	lsls	r3, r1, #5
 800c918:	1a5b      	subs	r3, r3, r1
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	185b      	adds	r3, r3, r1
 800c91e:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t2) {
 800c920:	4283      	cmp	r3, r0
 800c922:	d008      	beq.n	800c936 <CheckAttachedButtons+0x2de>
			t3 = button[port].releasedY3Sec;
 800c924:	7c21      	ldrb	r1, [r4, #16]
	t3 *= 1000;
 800c926:	014b      	lsls	r3, r1, #5
 800c928:	1a5b      	subs	r3, r3, r1
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	185b      	adds	r3, r3, r1
 800c92e:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t3) {
 800c930:	4283      	cmp	r3, r0
 800c932:	d000      	beq.n	800c936 <CheckAttachedButtons+0x2de>
 800c934:	e759      	b.n	800c7ea <CheckAttachedButtons+0x192>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800c936:	230d      	movs	r3, #13
 800c938:	7263      	strb	r3, [r4, #9]
				if (!delayButtonStateReset
 800c93a:	464b      	mov	r3, r9
 800c93c:	7d1b      	ldrb	r3, [r3, #20]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d000      	beq.n	800c944 <CheckAttachedButtons+0x2ec>
 800c942:	e760      	b.n	800c806 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800c944:	7c63      	ldrb	r3, [r4, #17]
 800c946:	065b      	lsls	r3, r3, #25
 800c948:	d400      	bmi.n	800c94c <CheckAttachedButtons+0x2f4>
 800c94a:	e75c      	b.n	800c806 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c94c:	2301      	movs	r3, #1
 800c94e:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800c950:	2102      	movs	r1, #2
 800c952:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c954:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800c956:	f7ff fe7d 	bl	800c654 <buttonReleasedForYCallback>
 800c95a:	e754      	b.n	800c806 <CheckAttachedButtons+0x1ae>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800c95c:	8831      	ldrh	r1, [r6, #0]
 800c95e:	2201      	movs	r2, #1
 800c960:	9808      	ldr	r0, [sp, #32]
 800c962:	f004 fa87 	bl	8010e74 <HAL_GPIO_WritePin>
				Delay_us(10);
 800c966:	200a      	movs	r0, #10
 800c968:	f000 fbb2 	bl	800d0d0 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800c96c:	8839      	ldrh	r1, [r7, #0]
 800c96e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c970:	f004 fa7a 	bl	8010e68 <HAL_GPIO_ReadPin>
 800c974:	4683      	mov	fp, r0
 800c976:	e6a5      	b.n	800c6c4 <CheckAttachedButtons+0x6c>
 800c978:	20001e2c 	.word	0x20001e2c
 800c97c:	20001eac 	.word	0x20001eac
 800c980:	20006db4 	.word	0x20006db4
 800c984:	0000fffe 	.word	0x0000fffe
 800c988:	20001ec4 	.word	0x20001ec4
 800c98c:	08017acc 	.word	0x08017acc
 800c990:	0000fe0a 	.word	0x0000fe0a
 800c994:	4643      	mov	r3, r8
			if (state == CLOSED || state == ON) {
 800c996:	9904      	ldr	r1, [sp, #16]
 800c998:	3338      	adds	r3, #56	; 0x38
 800c99a:	00aa      	lsls	r2, r5, #2
 800c99c:	589b      	ldr	r3, [r3, r2]
 800c99e:	2904      	cmp	r1, #4
 800c9a0:	d000      	beq.n	800c9a4 <CheckAttachedButtons+0x34c>
 800c9a2:	e6af      	b.n	800c704 <CheckAttachedButtons+0xac>
				if (pressCounter[i] < 0xFFFF)
 800c9a4:	4972      	ldr	r1, [pc, #456]	; (800cb70 <CheckAttachedButtons+0x518>)
 800c9a6:	428b      	cmp	r3, r1
 800c9a8:	d819      	bhi.n	800c9de <CheckAttachedButtons+0x386>
					++pressCounter[i];			// Advance the debounce counter
 800c9aa:	4641      	mov	r1, r8
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	3138      	adds	r1, #56	; 0x38
 800c9b0:	508b      	str	r3, [r1, r2]
 800c9b2:	4870      	ldr	r0, [pc, #448]	; (800cb74 <CheckAttachedButtons+0x51c>)
 800c9b4:	e6c5      	b.n	800c742 <CheckAttachedButtons+0xea>
					clicked = 0;
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	464e      	mov	r6, r9
 800c9ba:	77b1      	strb	r1, [r6, #30]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800c9bc:	4e6e      	ldr	r6, [pc, #440]	; (800cb78 <CheckAttachedButtons+0x520>)
 800c9be:	55a9      	strb	r1, [r5, r6]
 800c9c0:	e6bf      	b.n	800c742 <CheckAttachedButtons+0xea>
 800c9c2:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800c9c4:	4658      	mov	r0, fp
 800c9c6:	00aa      	lsls	r2, r5, #2
 800c9c8:	3138      	adds	r1, #56	; 0x38
 800c9ca:	588b      	ldr	r3, [r1, r2]
 800c9cc:	2801      	cmp	r0, #1
 800c9ce:	d100      	bne.n	800c9d2 <CheckAttachedButtons+0x37a>
 800c9d0:	e09d      	b.n	800cb0e <CheckAttachedButtons+0x4b6>
				else if (connected == GPIO_PIN_RESET)
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	d000      	beq.n	800c9d8 <CheckAttachedButtons+0x380>
 800c9d6:	e691      	b.n	800c6fc <CheckAttachedButtons+0xa4>
					state = OFF;
 800c9d8:	2101      	movs	r1, #1
 800c9da:	9104      	str	r1, [sp, #16]
 800c9dc:	e69c      	b.n	800c718 <CheckAttachedButtons+0xc0>
					pressCounter[i] = 0;			// Reset debounce counter
 800c9de:	4643      	mov	r3, r8
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	3338      	adds	r3, #56	; 0x38
 800c9e4:	5099      	str	r1, [r3, r2]
 800c9e6:	4863      	ldr	r0, [pc, #396]	; (800cb74 <CheckAttachedButtons+0x51c>)
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	e6aa      	b.n	800c742 <CheckAttachedButtons+0xea>
				if (!delayButtonStateReset
 800c9ec:	464b      	mov	r3, r9
 800c9ee:	7d1b      	ldrb	r3, [r3, #20]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d000      	beq.n	800c9f6 <CheckAttachedButtons+0x39e>
 800c9f4:	e707      	b.n	800c806 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800c9f6:	7c63      	ldrb	r3, [r4, #17]
 800c9f8:	06db      	lsls	r3, r3, #27
 800c9fa:	d400      	bmi.n	800c9fe <CheckAttachedButtons+0x3a6>
 800c9fc:	e703      	b.n	800c806 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800ca02:	2103      	movs	r1, #3
 800ca04:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800ca06:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800ca08:	f7ff fe22 	bl	800c650 <buttonPressedForXCallback>
 800ca0c:	e6fb      	b.n	800c806 <CheckAttachedButtons+0x1ae>
				buttonReleasedCallback(i);
 800ca0e:	4650      	mov	r0, sl
 800ca10:	f7ff fe18 	bl	800c644 <buttonReleasedCallback>
				button[i].state = NONE;
 800ca14:	2300      	movs	r3, #0
 800ca16:	3501      	adds	r5, #1
 800ca18:	7263      	strb	r3, [r4, #9]
 800ca1a:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800ca1c:	2d06      	cmp	r5, #6
 800ca1e:	d000      	beq.n	800ca22 <CheckAttachedButtons+0x3ca>
 800ca20:	e62a      	b.n	800c678 <CheckAttachedButtons+0x20>
 800ca22:	e6f5      	b.n	800c810 <CheckAttachedButtons+0x1b8>
				if (!delayButtonStateReset
 800ca24:	464b      	mov	r3, r9
 800ca26:	7d1b      	ldrb	r3, [r3, #20]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d000      	beq.n	800ca2e <CheckAttachedButtons+0x3d6>
 800ca2c:	e6eb      	b.n	800c806 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800ca2e:	7c63      	ldrb	r3, [r4, #17]
 800ca30:	2b7f      	cmp	r3, #127	; 0x7f
 800ca32:	d800      	bhi.n	800ca36 <CheckAttachedButtons+0x3de>
 800ca34:	e6e7      	b.n	800c806 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800ca36:	2301      	movs	r3, #1
 800ca38:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800ca3a:	2103      	movs	r1, #3
 800ca3c:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800ca3e:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800ca40:	f7ff fe08 	bl	800c654 <buttonReleasedForYCallback>
 800ca44:	e6df      	b.n	800c806 <CheckAttachedButtons+0x1ae>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800ca46:	3303      	adds	r3, #3
 800ca48:	7263      	strb	r3, [r4, #9]
						clicked = 0;			// Prepare for a single click
 800ca4a:	464a      	mov	r2, r9
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	7793      	strb	r3, [r2, #30]
				if (!delayButtonStateReset
 800ca50:	464b      	mov	r3, r9
 800ca52:	7d1b      	ldrb	r3, [r3, #20]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d000      	beq.n	800ca5a <CheckAttachedButtons+0x402>
 800ca58:	e6d5      	b.n	800c806 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800ca5a:	7c63      	ldrb	r3, [r4, #17]
 800ca5c:	079b      	lsls	r3, r3, #30
 800ca5e:	d400      	bmi.n	800ca62 <CheckAttachedButtons+0x40a>
 800ca60:	e6d1      	b.n	800c806 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800ca62:	2301      	movs	r3, #1
 800ca64:	464a      	mov	r2, r9
					buttonDblClickedCallback(i);
 800ca66:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800ca68:	7513      	strb	r3, [r2, #20]
					buttonDblClickedCallback(i);
 800ca6a:	f7ff fdef 	bl	800c64c <buttonDblClickedCallback>
 800ca6e:	e6ca      	b.n	800c806 <CheckAttachedButtons+0x1ae>
		button[port].state = PRESSED_FOR_X1_SEC;
 800ca70:	2009      	movs	r0, #9
 800ca72:	7260      	strb	r0, [r4, #9]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800ca74:	9803      	ldr	r0, [sp, #12]
 800ca76:	4281      	cmp	r1, r0
 800ca78:	d800      	bhi.n	800ca7c <CheckAttachedButtons+0x424>
 800ca7a:	e698      	b.n	800c7ae <CheckAttachedButtons+0x156>
				if (!delayButtonStateReset
 800ca7c:	464b      	mov	r3, r9
 800ca7e:	7d1b      	ldrb	r3, [r3, #20]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d000      	beq.n	800ca86 <CheckAttachedButtons+0x42e>
 800ca84:	e6bf      	b.n	800c806 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800ca86:	7c63      	ldrb	r3, [r4, #17]
 800ca88:	075b      	lsls	r3, r3, #29
 800ca8a:	d400      	bmi.n	800ca8e <CheckAttachedButtons+0x436>
 800ca8c:	e6bb      	b.n	800c806 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800ca92:	2101      	movs	r1, #1
 800ca94:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800ca96:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800ca98:	f7ff fdda 	bl	800c650 <buttonPressedForXCallback>
 800ca9c:	e6b3      	b.n	800c806 <CheckAttachedButtons+0x1ae>
						clicked = 2;			// Prepare for a double click
 800ca9e:	464a      	mov	r2, r9
						button[i].state = CLICKED;// Record a single button click event
 800caa0:	3304      	adds	r3, #4
 800caa2:	7263      	strb	r3, [r4, #9]
						clicked = 2;			// Prepare for a double click
 800caa4:	3b03      	subs	r3, #3
 800caa6:	7793      	strb	r3, [r2, #30]
				if (!delayButtonStateReset
 800caa8:	464b      	mov	r3, r9
 800caaa:	7d1b      	ldrb	r3, [r3, #20]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d000      	beq.n	800cab2 <CheckAttachedButtons+0x45a>
 800cab0:	e6a9      	b.n	800c806 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800cab2:	7c62      	ldrb	r2, [r4, #17]
 800cab4:	3301      	adds	r3, #1
 800cab6:	4213      	tst	r3, r2
 800cab8:	d100      	bne.n	800cabc <CheckAttachedButtons+0x464>
 800caba:	e6a4      	b.n	800c806 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800cabc:	464a      	mov	r2, r9
					buttonClickedCallback(i);
 800cabe:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800cac0:	7513      	strb	r3, [r2, #20]
					buttonClickedCallback(i);
 800cac2:	f7ff fdc1 	bl	800c648 <buttonClickedCallback>
 800cac6:	e69e      	b.n	800c806 <CheckAttachedButtons+0x1ae>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800cac8:	230c      	movs	r3, #12
 800caca:	7263      	strb	r3, [r4, #9]
				if (!delayButtonStateReset
 800cacc:	464b      	mov	r3, r9
 800cace:	7d1b      	ldrb	r3, [r3, #20]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d000      	beq.n	800cad6 <CheckAttachedButtons+0x47e>
 800cad4:	e697      	b.n	800c806 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800cad6:	7c63      	ldrb	r3, [r4, #17]
 800cad8:	069b      	lsls	r3, r3, #26
 800cada:	d400      	bmi.n	800cade <CheckAttachedButtons+0x486>
 800cadc:	e693      	b.n	800c806 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800cade:	2301      	movs	r3, #1
 800cae0:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800cae2:	2101      	movs	r1, #1
 800cae4:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800cae6:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800cae8:	f7ff fdb4 	bl	800c654 <buttonReleasedForYCallback>
 800caec:	e68b      	b.n	800c806 <CheckAttachedButtons+0x1ae>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800caee:	2008      	movs	r0, #8
					++releaseCounter[i];
 800caf0:	4646      	mov	r6, r8
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800caf2:	7260      	strb	r0, [r4, #9]
					++releaseCounter[i];
 800caf4:	3650      	adds	r6, #80	; 0x50
 800caf6:	1c48      	adds	r0, r1, #1
 800caf8:	50b0      	str	r0, [r6, r2]
 800cafa:	e65f      	b.n	800c7bc <CheckAttachedButtons+0x164>
				if (pressCounter[i] < 0xFFFF)
 800cafc:	481c      	ldr	r0, [pc, #112]	; (800cb70 <CheckAttachedButtons+0x518>)
 800cafe:	4283      	cmp	r3, r0
 800cb00:	d80e      	bhi.n	800cb20 <CheckAttachedButtons+0x4c8>
					++pressCounter[i];			// Advance the debounce counter
 800cb02:	3301      	adds	r3, #1
 800cb04:	508b      	str	r3, [r1, r2]
 800cb06:	2104      	movs	r1, #4
 800cb08:	481a      	ldr	r0, [pc, #104]	; (800cb74 <CheckAttachedButtons+0x51c>)
 800cb0a:	9104      	str	r1, [sp, #16]
 800cb0c:	e619      	b.n	800c742 <CheckAttachedButtons+0xea>
				if (pressCounter[i] < 0xFFFF)
 800cb0e:	4818      	ldr	r0, [pc, #96]	; (800cb70 <CheckAttachedButtons+0x518>)
 800cb10:	4283      	cmp	r3, r0
 800cb12:	d919      	bls.n	800cb48 <CheckAttachedButtons+0x4f0>
					pressCounter[i] = 0;			// Reset debounce counter
 800cb14:	2300      	movs	r3, #0
 800cb16:	508b      	str	r3, [r1, r2]
 800cb18:	2102      	movs	r1, #2
 800cb1a:	4816      	ldr	r0, [pc, #88]	; (800cb74 <CheckAttachedButtons+0x51c>)
 800cb1c:	9104      	str	r1, [sp, #16]
 800cb1e:	e610      	b.n	800c742 <CheckAttachedButtons+0xea>
 800cb20:	2300      	movs	r3, #0
 800cb22:	508b      	str	r3, [r1, r2]
					state = CLOSED;
 800cb24:	2104      	movs	r1, #4
 800cb26:	4813      	ldr	r0, [pc, #76]	; (800cb74 <CheckAttachedButtons+0x51c>)
 800cb28:	9104      	str	r1, [sp, #16]
 800cb2a:	e60a      	b.n	800c742 <CheckAttachedButtons+0xea>
				if (pressCounter[i] < 0xFFFF)
 800cb2c:	4810      	ldr	r0, [pc, #64]	; (800cb70 <CheckAttachedButtons+0x518>)
 800cb2e:	4283      	cmp	r3, r0
 800cb30:	d90a      	bls.n	800cb48 <CheckAttachedButtons+0x4f0>
					pressCounter[i] = 0;			// Reset debounce counter
 800cb32:	465b      	mov	r3, fp
 800cb34:	508b      	str	r3, [r1, r2]
					state = ON;
 800cb36:	2102      	movs	r1, #2
					pressCounter[i] = 0;			// Reset debounce counter
 800cb38:	2300      	movs	r3, #0
					state = ON;
 800cb3a:	9104      	str	r1, [sp, #16]
 800cb3c:	480d      	ldr	r0, [pc, #52]	; (800cb74 <CheckAttachedButtons+0x51c>)
 800cb3e:	e600      	b.n	800c742 <CheckAttachedButtons+0xea>
						clicked = 1;		// Record a possible single click
 800cb40:	464e      	mov	r6, r9
 800cb42:	3301      	adds	r3, #1
 800cb44:	77b3      	strb	r3, [r6, #30]
 800cb46:	e62a      	b.n	800c79e <CheckAttachedButtons+0x146>
					state = ON;
 800cb48:	2102      	movs	r1, #2
 800cb4a:	9104      	str	r1, [sp, #16]
					++pressCounter[i];			// Advance the debounce counter
 800cb4c:	4641      	mov	r1, r8
 800cb4e:	3301      	adds	r3, #1
 800cb50:	3138      	adds	r1, #56	; 0x38
 800cb52:	508b      	str	r3, [r1, r2]
 800cb54:	4807      	ldr	r0, [pc, #28]	; (800cb74 <CheckAttachedButtons+0x51c>)
 800cb56:	e5f4      	b.n	800c742 <CheckAttachedButtons+0xea>
								&& dblCounter[i]
 800cb58:	7947      	ldrb	r7, [r0, #5]
 800cb5a:	429f      	cmp	r7, r3
 800cb5c:	d800      	bhi.n	800cb60 <CheckAttachedButtons+0x508>
 800cb5e:	e61e      	b.n	800c79e <CheckAttachedButtons+0x146>
							clicked = 3;	// Record a possible double click
 800cb60:	2303      	movs	r3, #3
 800cb62:	464e      	mov	r6, r9
 800cb64:	77b3      	strb	r3, [r6, #30]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800cb66:	2300      	movs	r3, #0
 800cb68:	4e03      	ldr	r6, [pc, #12]	; (800cb78 <CheckAttachedButtons+0x520>)
 800cb6a:	55ab      	strb	r3, [r5, r6]
 800cb6c:	e617      	b.n	800c79e <CheckAttachedButtons+0x146>
 800cb6e:	46c0      	nop			; (mov r8, r8)
 800cb70:	0000fffe 	.word	0x0000fffe
 800cb74:	20006db4 	.word	0x20006db4
 800cb78:	20001ec4 	.word	0x20001ec4

0800cb7c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800cb7c:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800cb7e:	f002 fca9 	bl	800f4d4 <HAL_IncTick>
  osSystickHandler();  
 800cb82:	f000 fe7d 	bl	800d880 <osSystickHandler>

}
 800cb86:	bd10      	pop	{r4, pc}

0800cb88 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800cb88:	e7fe      	b.n	800cb88 <HardFault_Handler>
 800cb8a:	46c0      	nop			; (mov r8, r8)

0800cb8c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800cb8c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800cb8e:	4802      	ldr	r0, [pc, #8]	; (800cb98 <USART1_IRQHandler+0xc>)
 800cb90:	f005 fd78 	bl	8012684 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cb94:	bd10      	pop	{r4, pc}
 800cb96:	46c0      	nop			; (mov r8, r8)
 800cb98:	20006fc4 	.word	0x20006fc4

0800cb9c <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800cb9c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800cb9e:	4802      	ldr	r0, [pc, #8]	; (800cba8 <USART2_IRQHandler+0xc>)
 800cba0:	f005 fd70 	bl	8012684 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cba4:	bd10      	pop	{r4, pc}
 800cba6:	46c0      	nop			; (mov r8, r8)
 800cba8:	200070bc 	.word	0x200070bc

0800cbac <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800cbac:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800cbae:	4805      	ldr	r0, [pc, #20]	; (800cbc4 <USART3_8_IRQHandler+0x18>)
 800cbb0:	f005 fd68 	bl	8012684 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800cbb4:	4804      	ldr	r0, [pc, #16]	; (800cbc8 <USART3_8_IRQHandler+0x1c>)
 800cbb6:	f005 fd65 	bl	8012684 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800cbba:	4804      	ldr	r0, [pc, #16]	; (800cbcc <USART3_8_IRQHandler+0x20>)
 800cbbc:	f005 fd62 	bl	8012684 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cbc0:	bd10      	pop	{r4, pc}
 800cbc2:	46c0      	nop			; (mov r8, r8)
 800cbc4:	20006e9c 	.word	0x20006e9c
 800cbc8:	20006f54 	.word	0x20006f54
 800cbcc:	20007044 	.word	0x20007044

0800cbd0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cbd0:	4b0c      	ldr	r3, [pc, #48]	; (800cc04 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
{
 800cbd2:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cbd4:	681a      	ldr	r2, [r3, #0]
 800cbd6:	2310      	movs	r3, #16
 800cbd8:	4213      	tst	r3, r2
 800cbda:	d10e      	bne.n	800cbfa <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800cbdc:	4a0a      	ldr	r2, [pc, #40]	; (800cc08 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cbde:	6811      	ldr	r1, [r2, #0]
 800cbe0:	05c9      	lsls	r1, r1, #23
 800cbe2:	d406      	bmi.n	800cbf2 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800cbe4:	6812      	ldr	r2, [r2, #0]
 800cbe6:	4213      	tst	r3, r2
 800cbe8:	d002      	beq.n	800cbf0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800cbea:	4808      	ldr	r0, [pc, #32]	; (800cc0c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800cbec:	f003 f9c0 	bl	800ff70 <HAL_DMA_IRQHandler>
	}
}
 800cbf0:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800cbf2:	2002      	movs	r0, #2
 800cbf4:	f7fa fb96 	bl	8007324 <DMA_IRQHandler>
 800cbf8:	e7fa      	b.n	800cbf0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		DMA_IRQHandler(P5);
 800cbfa:	2005      	movs	r0, #5
 800cbfc:	f7fa fb92 	bl	8007324 <DMA_IRQHandler>
 800cc00:	e7f6      	b.n	800cbf0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
 800cc02:	46c0      	nop			; (mov r8, r8)
 800cc04:	40020400 	.word	0x40020400
 800cc08:	40020000 	.word	0x40020000
 800cc0c:	20001c30 	.word	0x20001c30

0800cc10 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cc10:	4b12      	ldr	r3, [pc, #72]	; (800cc5c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
{
 800cc12:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	03d2      	lsls	r2, r2, #15
 800cc18:	d414      	bmi.n	800cc44 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	02d2      	lsls	r2, r2, #11
 800cc1e:	d40d      	bmi.n	800cc3c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800cc20:	4a0f      	ldr	r2, [pc, #60]	; (800cc60 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800cc22:	6812      	ldr	r2, [r2, #0]
 800cc24:	05d2      	lsls	r2, r2, #23
 800cc26:	d411      	bmi.n	800cc4c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	04d2      	lsls	r2, r2, #19
 800cc2c:	d412      	bmi.n	800cc54 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	01db      	lsls	r3, r3, #7
 800cc32:	d506      	bpl.n	800cc42 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800cc34:	480b      	ldr	r0, [pc, #44]	; (800cc64 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cc36:	f003 f99b 	bl	800ff70 <HAL_DMA_IRQHandler>
	}
}
 800cc3a:	e002      	b.n	800cc42 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800cc3c:	2004      	movs	r0, #4
 800cc3e:	f7fa fb71 	bl	8007324 <DMA_IRQHandler>
}
 800cc42:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800cc44:	2003      	movs	r0, #3
 800cc46:	f7fa fb6d 	bl	8007324 <DMA_IRQHandler>
 800cc4a:	e7fa      	b.n	800cc42 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800cc4c:	2006      	movs	r0, #6
 800cc4e:	f7fa fb69 	bl	8007324 <DMA_IRQHandler>
 800cc52:	e7f6      	b.n	800cc42 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800cc54:	4804      	ldr	r0, [pc, #16]	; (800cc68 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800cc56:	f003 f98b 	bl	800ff70 <HAL_DMA_IRQHandler>
 800cc5a:	e7f2      	b.n	800cc42 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800cc5c:	40020000 	.word	0x40020000
 800cc60:	40020400 	.word	0x40020400
 800cc64:	20001ca0 	.word	0x20001ca0
 800cc68:	20001c68 	.word	0x20001c68

0800cc6c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800cc6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800cc6e:	4802      	ldr	r0, [pc, #8]	; (800cc78 <ADC1_COMP_IRQHandler+0xc>)
 800cc70:	f002 fe76 	bl	800f960 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800cc74:	bd10      	pop	{r4, pc}
 800cc76:	46c0      	nop			; (mov r8, r8)
 800cc78:	20007154 	.word	0x20007154

0800cc7c <HAL_UART_TxCpltCallback>:
/*-----------------------------------------------------------*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cc7c:	2300      	movs	r3, #0
{
 800cc7e:	b510      	push	{r4, lr}
 800cc80:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cc82:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800cc84:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 800cc86:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d001      	beq.n	800cc90 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800cc8c:	f7fd fc86 	bl	800a59c <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800cc90:	0020      	movs	r0, r4
 800cc92:	f7fd f99d 	bl	8009fd0 <GetPort>
 800cc96:	4b04      	ldr	r3, [pc, #16]	; (800cca8 <HAL_UART_TxCpltCallback+0x2c>)
 800cc98:	0080      	lsls	r0, r0, #2
 800cc9a:	58c0      	ldr	r0, [r0, r3]
 800cc9c:	a901      	add	r1, sp, #4
 800cc9e:	f001 f927 	bl	800def0 <xQueueGiveFromISR>
}
 800cca2:	b002      	add	sp, #8
 800cca4:	bd10      	pop	{r4, pc}
 800cca6:	46c0      	nop			; (mov r8, r8)
 800cca8:	20006e38 	.word	0x20006e38

0800ccac <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ccac:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800ccae:	2369      	movs	r3, #105	; 0x69
 800ccb0:	2501      	movs	r5, #1
 800ccb2:	54c5      	strb	r5, [r0, r3]
{
 800ccb4:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800ccb6:	f7fd f98b 	bl	8009fd0 <GetPort>
	if (portStatus[port] == STREAM) {
 800ccba:	4b0b      	ldr	r3, [pc, #44]	; (800cce8 <HAL_UART_ErrorCallback+0x3c>)
 800ccbc:	5c1b      	ldrb	r3, [r3, r0]
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d004      	beq.n	800cccc <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800ccc2:	4b0a      	ldr	r3, [pc, #40]	; (800ccec <HAL_UART_ErrorCallback+0x40>)
 800ccc4:	1818      	adds	r0, r3, r0
 800ccc6:	3801      	subs	r0, #1
 800ccc8:	7005      	strb	r5, [r0, #0]
	}	
}
 800ccca:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800cccc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccce:	3801      	subs	r0, #1
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	0080      	lsls	r0, r0, #2
 800ccd4:	685a      	ldr	r2, [r3, #4]
 800ccd6:	4b06      	ldr	r3, [pc, #24]	; (800ccf0 <HAL_UART_ErrorCallback+0x44>)
 800ccd8:	b292      	uxth	r2, r2
 800ccda:	58c3      	ldr	r3, [r0, r3]
 800ccdc:	0020      	movs	r0, r4
 800ccde:	6819      	ldr	r1, [r3, #0]
 800cce0:	3128      	adds	r1, #40	; 0x28
 800cce2:	f005 f92f 	bl	8011f44 <HAL_UART_Receive_DMA>
 800cce6:	e7f0      	b.n	800ccca <HAL_UART_ErrorCallback+0x1e>
 800cce8:	20000c3c 	.word	0x20000c3c
 800ccec:	20001308 	.word	0x20001308
 800ccf0:	200012cc 	.word	0x200012cc

0800ccf4 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800ccf8:	f7fd f96a 	bl	8009fd0 <GetPort>
 800ccfc:	4d12      	ldr	r5, [pc, #72]	; (800cd48 <HAL_UART_RxCpltCallback+0x54>)
 800ccfe:	5c2b      	ldrb	r3, [r5, r0]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d006      	beq.n	800cd12 <HAL_UART_RxCpltCallback+0x1e>
 800cd04:	0020      	movs	r0, r4
 800cd06:	f7fd f963 	bl	8009fd0 <GetPort>
 800cd0a:	5c2b      	ldrb	r3, [r5, r0]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d000      	beq.n	800cd12 <HAL_UART_RxCpltCallback+0x1e>
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
	}
}
 800cd10:	bd70      	pop	{r4, r5, r6, pc}
		BOSMessaging.overrun = GetPort(huart);
 800cd12:	0020      	movs	r0, r4
 800cd14:	f7fd f95c 	bl	8009fd0 <GetPort>
 800cd18:	4b0c      	ldr	r3, [pc, #48]	; (800cd4c <HAL_UART_RxCpltCallback+0x58>)
 800cd1a:	7098      	strb	r0, [r3, #2]
		portStatus[GetPort(huart)] = OVERRUN;
 800cd1c:	0020      	movs	r0, r4
 800cd1e:	f7fd f957 	bl	8009fd0 <GetPort>
 800cd22:	2305      	movs	r3, #5
 800cd24:	542b      	strb	r3, [r5, r0]
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800cd26:	0020      	movs	r0, r4
 800cd28:	f7fd f952 	bl	8009fd0 <GetPort>
 800cd2c:	4b08      	ldr	r3, [pc, #32]	; (800cd50 <HAL_UART_RxCpltCallback+0x5c>)
 800cd2e:	1818      	adds	r0, r3, r0
 800cd30:	2300      	movs	r3, #0
 800cd32:	3801      	subs	r0, #1
 800cd34:	7003      	strb	r3, [r0, #0]
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800cd36:	0020      	movs	r0, r4
 800cd38:	f7fd f94a 	bl	8009fd0 <GetPort>
 800cd3c:	4b05      	ldr	r3, [pc, #20]	; (800cd54 <HAL_UART_RxCpltCallback+0x60>)
 800cd3e:	1818      	adds	r0, r3, r0
 800cd40:	2301      	movs	r3, #1
 800cd42:	3801      	subs	r0, #1
 800cd44:	7003      	strb	r3, [r0, #0]
 800cd46:	e7e3      	b.n	800cd10 <HAL_UART_RxCpltCallback+0x1c>
 800cd48:	20000c3c 	.word	0x20000c3c
 800cd4c:	20006d34 	.word	0x20006d34
 800cd50:	20001310 	.word	0x20001310
 800cd54:	20001308 	.word	0x20001308

0800cd58 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800cd58:	b672      	cpsid	i
 800cd5a:	e7fe      	b.n	800cd5a <vApplicationStackOverflowHook+0x2>

0800cd5c <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800cd5c:	b672      	cpsid	i
 800cd5e:	e7fe      	b.n	800cd5e <vApplicationMallocFailedHook+0x2>

0800cd60 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800cd60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd62:	46de      	mov	lr, fp
 800cd64:	464e      	mov	r6, r9
 800cd66:	4645      	mov	r5, r8
 800cd68:	4657      	mov	r7, sl
 800cd6a:	b5e0      	push	{r5, r6, r7, lr}
 800cd6c:	b08d      	sub	sp, #52	; 0x34
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cd6e:	ae04      	add	r6, sp, #16
 800cd70:	0032      	movs	r2, r6
 800cd72:	4b34      	ldr	r3, [pc, #208]	; (800ce44 <RTC_CalendarConfig+0xe4>)
 800cd74:	cb13      	ldmia	r3!, {r0, r1, r4}
 800cd76:	c213      	stmia	r2!, {r0, r1, r4}
 800cd78:	ab01      	add	r3, sp, #4
 800cd7a:	4698      	mov	r8, r3
 800cd7c:	4642      	mov	r2, r8
 800cd7e:	4b32      	ldr	r3, [pc, #200]	; (800ce48 <RTC_CalendarConfig+0xe8>)
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
  *(comDate + 6) = 0;
 800cd80:	2400      	movs	r4, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cd82:	cb03      	ldmia	r3!, {r0, r1}
 800cd84:	c203      	stmia	r2!, {r0, r1}
  year = atoi(comDate + 9);		// only last 2 digits
 800cd86:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cd88:	781b      	ldrb	r3, [r3, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800cd8a:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cd8c:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800cd8e:	f005 fd08 	bl	80127a2 <atoi>
 800cd92:	b2c3      	uxtb	r3, r0
  day = atoi(comDate + 4);
 800cd94:	a805      	add	r0, sp, #20
  year = atoi(comDate + 9);		// only last 2 digits
 800cd96:	469a      	mov	sl, r3
  *(comDate + 6) = 0;
 800cd98:	71b4      	strb	r4, [r6, #6]
  day = atoi(comDate + 4);
 800cd9a:	f005 fd02 	bl	80127a2 <atoi>
 800cd9e:	b2c3      	uxtb	r3, r0
 800cda0:	4699      	mov	r9, r3
 800cda2:	4d2a      	ldr	r5, [pc, #168]	; (800ce4c <RTC_CalendarConfig+0xec>)
  *(comDate + 3) = 0;
 800cda4:	70f4      	strb	r4, [r6, #3]
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800cda6:	6829      	ldr	r1, [r5, #0]
 800cda8:	0030      	movs	r0, r6
 800cdaa:	f7f3 f9ab 	bl	8000104 <strcmp>
 800cdae:	3401      	adds	r4, #1
 800cdb0:	b2e4      	uxtb	r4, r4
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	d100      	bne.n	800cdb8 <RTC_CalendarConfig+0x58>
 800cdb6:	0027      	movs	r7, r4
 800cdb8:	3504      	adds	r5, #4
  for (uint8_t i = 0; i < 12; i++)
 800cdba:	2c0c      	cmp	r4, #12
 800cdbc:	d1f3      	bne.n	800cda6 <RTC_CalendarConfig+0x46>
			month = i + 1;
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800cdbe:	200a      	movs	r0, #10
 800cdc0:	4468      	add	r0, sp
 800cdc2:	f005 fcee 	bl	80127a2 <atoi>
	*(comDate + 5) = 0;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	7173      	strb	r3, [r6, #5]
 800cdca:	469b      	mov	fp, r3
	minutes = atoi(comTime + 3);
 800cdcc:	466b      	mov	r3, sp
	seconds = atoi(comTime + 6);
 800cdce:	0004      	movs	r4, r0
	minutes = atoi(comTime + 3);
 800cdd0:	1dd8      	adds	r0, r3, #7
 800cdd2:	f005 fce6 	bl	80127a2 <atoi>
	*(comDate + 2) = 0;
 800cdd6:	465b      	mov	r3, fp
	minutes = atoi(comTime + 3);
 800cdd8:	0005      	movs	r5, r0
	hours = atoi(comTime);
 800cdda:	4640      	mov	r0, r8
	*(comDate + 2) = 0;
 800cddc:	70b3      	strb	r3, [r6, #2]
	hours = atoi(comTime);
 800cdde:	f005 fce0 	bl	80127a2 <atoi>
	
  /* Set Date */
  sdatestructure.Year = year;
 800cde2:	466b      	mov	r3, sp
 800cde4:	4652      	mov	r2, sl
 800cde6:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month = month;
  sdatestructure.Date = day;
 800cde8:	464a      	mov	r2, r9
  sdatestructure.Month = month;
 800cdea:	705f      	strb	r7, [r3, #1]
  sdatestructure.Date = day;
 800cdec:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800cdee:	466a      	mov	r2, sp
 800cdf0:	2301      	movs	r3, #1
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cdf2:	4f17      	ldr	r7, [pc, #92]	; (800ce50 <RTC_CalendarConfig+0xf0>)
	hours = atoi(comTime);
 800cdf4:	0006      	movs	r6, r0
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800cdf6:	7013      	strb	r3, [r2, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cdf8:	4669      	mov	r1, sp
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	0038      	movs	r0, r7
 800cdfe:	f004 fe87 	bl	8011b10 <HAL_RTC_SetDate>
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d116      	bne.n	800ce34 <RTC_CalendarConfig+0xd4>

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
  stimestructure.Seconds = seconds;
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800ce06:	2218      	movs	r2, #24
 800ce08:	4b12      	ldr	r3, [pc, #72]	; (800ce54 <RTC_CalendarConfig+0xf4>)
  stimestructure.Hours = hours;
 800ce0a:	a907      	add	r1, sp, #28
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800ce0c:	7208      	strb	r0, [r1, #8]
 800ce0e:	735a      	strb	r2, [r3, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800ce10:	60c8      	str	r0, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800ce12:	6108      	str	r0, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ce14:	2200      	movs	r2, #0
 800ce16:	0038      	movs	r0, r7
  stimestructure.Hours = hours;
 800ce18:	700e      	strb	r6, [r1, #0]
  stimestructure.Minutes = minutes;
 800ce1a:	704d      	strb	r5, [r1, #1]
  stimestructure.Seconds = seconds;
 800ce1c:	708c      	strb	r4, [r1, #2]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ce1e:	f004 fde3 	bl	80119e8 <HAL_RTC_SetTime>
 800ce22:	2800      	cmp	r0, #0
 800ce24:	d106      	bne.n	800ce34 <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800ce26:	0038      	movs	r0, r7
 800ce28:	4a0b      	ldr	r2, [pc, #44]	; (800ce58 <RTC_CalendarConfig+0xf8>)
 800ce2a:	2101      	movs	r1, #1
 800ce2c:	f004 feec 	bl	8011c08 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800ce30:	2000      	movs	r0, #0
 800ce32:	e000      	b.n	800ce36 <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800ce34:	20ff      	movs	r0, #255	; 0xff
}
 800ce36:	b00d      	add	sp, #52	; 0x34
 800ce38:	bc3c      	pop	{r2, r3, r4, r5}
 800ce3a:	4690      	mov	r8, r2
 800ce3c:	4699      	mov	r9, r3
 800ce3e:	46a2      	mov	sl, r4
 800ce40:	46ab      	mov	fp, r5
 800ce42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce44:	08017d18 	.word	0x08017d18
 800ce48:	08017d3c 	.word	0x08017d3c
 800ce4c:	2000005c 	.word	0x2000005c
 800ce50:	200071a0 	.word	0x200071a0
 800ce54:	20006db4 	.word	0x20006db4
 800ce58:	000032f2 	.word	0x000032f2

0800ce5c <RTC_Init>:
  __HAL_RCC_RTC_ENABLE();
 800ce5c:	2380      	movs	r3, #128	; 0x80
{
 800ce5e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_RTC_ENABLE();
 800ce60:	4d1e      	ldr	r5, [pc, #120]	; (800cedc <RTC_Init+0x80>)
 800ce62:	021b      	lsls	r3, r3, #8
 800ce64:	6a2a      	ldr	r2, [r5, #32]
	RtcHandle.Instance = RTC; 
 800ce66:	4c1e      	ldr	r4, [pc, #120]	; (800cee0 <RTC_Init+0x84>)
  __HAL_RCC_RTC_ENABLE();
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	622b      	str	r3, [r5, #32]
  RtcHandle.Init.AsynchPrediv = 124;
 800ce6c:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC; 
 800ce6e:	4b1d      	ldr	r3, [pc, #116]	; (800cee4 <RTC_Init+0x88>)
  RtcHandle.Init.AsynchPrediv = 124;
 800ce70:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC; 
 800ce72:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800ce74:	2300      	movs	r3, #0
  RtcHandle.Init.SynchPrediv = 1999;
 800ce76:	4a1c      	ldr	r2, [pc, #112]	; (800cee8 <RTC_Init+0x8c>)
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800ce78:	0020      	movs	r0, r4
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800ce7a:	6063      	str	r3, [r4, #4]
  RtcHandle.Init.SynchPrediv = 1999;
 800ce7c:	60e2      	str	r2, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800ce7e:	6123      	str	r3, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ce80:	6163      	str	r3, [r4, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ce82:	61a3      	str	r3, [r4, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800ce84:	f004 fd68 	bl	8011958 <HAL_RTC_Init>
 800ce88:	0006      	movs	r6, r0
 800ce8a:	20ff      	movs	r0, #255	; 0xff
 800ce8c:	2e00      	cmp	r6, #0
 800ce8e:	d119      	bne.n	800cec4 <RTC_Init+0x68>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800ce90:	2101      	movs	r1, #1
 800ce92:	0020      	movs	r0, r4
 800ce94:	f004 febe 	bl	8011c14 <HAL_RTCEx_BKUPRead>
 800ce98:	4b14      	ldr	r3, [pc, #80]	; (800ceec <RTC_Init+0x90>)
 800ce9a:	4298      	cmp	r0, r3
 800ce9c:	d113      	bne.n	800cec6 <RTC_Init+0x6a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800ce9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cea0:	011b      	lsls	r3, r3, #4
 800cea2:	d501      	bpl.n	800cea8 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800cea4:	4b12      	ldr	r3, [pc, #72]	; (800cef0 <RTC_Init+0x94>)
 800cea6:	701e      	strb	r6, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800cea8:	4b0c      	ldr	r3, [pc, #48]	; (800cedc <RTC_Init+0x80>)
 800ceaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceac:	015b      	lsls	r3, r3, #5
 800ceae:	d50c      	bpl.n	800ceca <RTC_Init+0x6e>
			bootStatus = RESET_BOOT;
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	4b0f      	ldr	r3, [pc, #60]	; (800cef0 <RTC_Init+0x94>)
	return BOS_OK;
 800ceb4:	2000      	movs	r0, #0
			bootStatus = RESET_BOOT;
 800ceb6:	701a      	strb	r2, [r3, #0]
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800ceb8:	2380      	movs	r3, #128	; 0x80
 800ceba:	4a08      	ldr	r2, [pc, #32]	; (800cedc <RTC_Init+0x80>)
 800cebc:	045b      	lsls	r3, r3, #17
 800cebe:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800cec0:	430b      	orrs	r3, r1
 800cec2:	6253      	str	r3, [r2, #36]	; 0x24
}
 800cec4:	bd70      	pop	{r4, r5, r6, pc}
    RTC_CalendarConfig();
 800cec6:	f7ff ff4b 	bl	800cd60 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800ceca:	2380      	movs	r3, #128	; 0x80
 800cecc:	4a03      	ldr	r2, [pc, #12]	; (800cedc <RTC_Init+0x80>)
 800cece:	045b      	lsls	r3, r3, #17
 800ced0:	6a51      	ldr	r1, [r2, #36]	; 0x24
	return BOS_OK;
 800ced2:	2000      	movs	r0, #0
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800ced4:	430b      	orrs	r3, r1
 800ced6:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800ced8:	e7f4      	b.n	800cec4 <RTC_Init+0x68>
 800ceda:	46c0      	nop			; (mov r8, r8)
 800cedc:	40021000 	.word	0x40021000
 800cee0:	200071a0 	.word	0x200071a0
 800cee4:	40002800 	.word	0x40002800
 800cee8:	000007cf 	.word	0x000007cf
 800ceec:	000032f2 	.word	0x000032f2
 800cef0:	20001ecc 	.word	0x20001ecc

0800cef4 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800cef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cef6:	46c6      	mov	lr, r8
 800cef8:	b500      	push	{lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	ac0c      	add	r4, sp, #48	; 0x30
 800cefe:	7827      	ldrb	r7, [r4, #0]
 800cf00:	ac0d      	add	r4, sp, #52	; 0x34
 800cf02:	7824      	ldrb	r4, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800cf04:	3230      	adds	r2, #48	; 0x30
{
 800cf06:	46a0      	mov	r8, r4
 800cf08:	ac0e      	add	r4, sp, #56	; 0x38
 800cf0a:	7825      	ldrb	r5, [r4, #0]
 800cf0c:	ac0f      	add	r4, sp, #60	; 0x3c
 800cf0e:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 800cf10:	466c      	mov	r4, sp
 800cf12:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800cf14:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800cf16:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800cf18:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cf1a:	4c20      	ldr	r4, [pc, #128]	; (800cf9c <BOS_CalendarConfig+0xa8>)
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	4669      	mov	r1, sp
 800cf20:	0020      	movs	r0, r4
 800cf22:	f004 fdf5 	bl	8011b10 <HAL_RTC_SetDate>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	d123      	bne.n	800cf72 <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
 800cf2a:	4643      	mov	r3, r8
  stimestructure.Hours = hours;
 800cf2c:	a901      	add	r1, sp, #4
 800cf2e:	700d      	strb	r5, [r1, #0]
  stimestructure.Minutes = minutes;
 800cf30:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds; 
 800cf32:	708f      	strb	r7, [r1, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800cf34:	6108      	str	r0, [r1, #16]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800cf36:	2d0c      	cmp	r5, #12
 800cf38:	d820      	bhi.n	800cf7c <BOS_CalendarConfig+0x88>
 800cf3a:	4d19      	ldr	r5, [pc, #100]	; (800cfa0 <BOS_CalendarConfig+0xac>)
	
	if (AMPM == RTC_AM) {
 800cf3c:	2e01      	cmp	r6, #1
 800cf3e:	d022      	beq.n	800cf86 <BOS_CalendarConfig+0x92>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800cf40:	2e02      	cmp	r6, #2
 800cf42:	d025      	beq.n	800cf90 <BOS_CalendarConfig+0x9c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800cf44:	2318      	movs	r3, #24
 800cf46:	736b      	strb	r3, [r5, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cf48:	2200      	movs	r2, #0
 800cf4a:	0020      	movs	r0, r4
 800cf4c:	f004 fd4c 	bl	80119e8 <HAL_RTC_SetTime>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	d10e      	bne.n	800cf72 <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800cf54:	7b6b      	ldrb	r3, [r5, #13]
 800cf56:	7929      	ldrb	r1, [r5, #4]
 800cf58:	021b      	lsls	r3, r3, #8
 800cf5a:	301b      	adds	r0, #27
 800cf5c:	4319      	orrs	r1, r3
 800cf5e:	30ff      	adds	r0, #255	; 0xff
 800cf60:	f7fe fad2 	bl	800b508 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800cf64:	0020      	movs	r0, r4
 800cf66:	4a0f      	ldr	r2, [pc, #60]	; (800cfa4 <BOS_CalendarConfig+0xb0>)
 800cf68:	2101      	movs	r1, #1
 800cf6a:	f004 fe4d 	bl	8011c08 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800cf6e:	2000      	movs	r0, #0
 800cf70:	e000      	b.n	800cf74 <BOS_CalendarConfig+0x80>
		return BOS_ERROR;
 800cf72:	20ff      	movs	r0, #255	; 0xff
}
 800cf74:	b006      	add	sp, #24
 800cf76:	bc04      	pop	{r2}
 800cf78:	4690      	mov	r8, r2
 800cf7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hours > 12)	BOS.hourformat = 24;
 800cf7c:	2318      	movs	r3, #24
 800cf7e:	4d08      	ldr	r5, [pc, #32]	; (800cfa0 <BOS_CalendarConfig+0xac>)
 800cf80:	736b      	strb	r3, [r5, #13]
	if (AMPM == RTC_AM) {
 800cf82:	2e01      	cmp	r6, #1
 800cf84:	d1dc      	bne.n	800cf40 <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800cf86:	2300      	movs	r3, #0
 800cf88:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800cf8a:	330c      	adds	r3, #12
 800cf8c:	736b      	strb	r3, [r5, #13]
 800cf8e:	e7db      	b.n	800cf48 <BOS_CalendarConfig+0x54>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800cf90:	2340      	movs	r3, #64	; 0x40
 800cf92:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800cf94:	3b34      	subs	r3, #52	; 0x34
 800cf96:	736b      	strb	r3, [r5, #13]
 800cf98:	e7d6      	b.n	800cf48 <BOS_CalendarConfig+0x54>
 800cf9a:	46c0      	nop			; (mov r8, r8)
 800cf9c:	200071a0 	.word	0x200071a0
 800cfa0:	20006db4 	.word	0x20006db4
 800cfa4:	000032f2 	.word	0x000032f2

0800cfa8 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800cfa8:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800cfaa:	4d16      	ldr	r5, [pc, #88]	; (800d004 <GetTimeDate+0x5c>)
{
 800cfac:	b087      	sub	sp, #28
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800cfae:	ac01      	add	r4, sp, #4
 800cfb0:	0021      	movs	r1, r4
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	0028      	movs	r0, r5
 800cfb6:	f004 fc37 	bl	8011828 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800cfba:	4669      	mov	r1, sp
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	0028      	movs	r0, r5
 800cfc0:	f004 fc62 	bl	8011888 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800cfc4:	7a22      	ldrb	r2, [r4, #8]
 800cfc6:	4b10      	ldr	r3, [pc, #64]	; (800d008 <GetTimeDate+0x60>)
 800cfc8:	09d2      	lsrs	r2, r2, #7
 800cfca:	3201      	adds	r2, #1
 800cfcc:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800cfce:	6862      	ldr	r2, [r4, #4]
	BOS.time.minutes = stimestructureget.Minutes;
	BOS.time.hours = stimestructureget.Hours;
	BOS.date.day = sdatestructureget.Date;
	BOS.date.month = sdatestructureget.Month;
	BOS.date.weekday = sdatestructureget.WeekDay;
	BOS.date.year = sdatestructureget.Year + 2000;
 800cfd0:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800cfd2:	0852      	lsrs	r2, r2, #1
 800cfd4:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800cfd6:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year = sdatestructureget.Year + 2000;
 800cfd8:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds = stimestructureget.Seconds;
 800cfda:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800cfdc:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year = sdatestructureget.Year + 2000;
 800cfde:	468c      	mov	ip, r1
	BOS.time.minutes = stimestructureget.Minutes;
 800cfe0:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800cfe2:	7822      	ldrb	r2, [r4, #0]
 800cfe4:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800cfe6:	466a      	mov	r2, sp
 800cfe8:	7892      	ldrb	r2, [r2, #2]
 800cfea:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800cfec:	466a      	mov	r2, sp
 800cfee:	7852      	ldrb	r2, [r2, #1]
 800cff0:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800cff2:	466a      	mov	r2, sp
 800cff4:	7812      	ldrb	r2, [r2, #0]
 800cff6:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800cff8:	466a      	mov	r2, sp
 800cffa:	78d2      	ldrb	r2, [r2, #3]
 800cffc:	4462      	add	r2, ip
 800cffe:	831a      	strh	r2, [r3, #24]
}
 800d000:	b007      	add	sp, #28
 800d002:	bd30      	pop	{r4, r5, pc}
 800d004:	200071a0 	.word	0x200071a0
 800d008:	20006db4 	.word	0x20006db4

0800d00c <TIM_USEC_Init>:
void TIM_USEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800d00c:	2080      	movs	r0, #128	; 0x80
 800d00e:	4a13      	ldr	r2, [pc, #76]	; (800d05c <TIM_USEC_Init+0x50>)
{
 800d010:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE();
 800d012:	69d1      	ldr	r1, [r2, #28]
 800d014:	0040      	lsls	r0, r0, #1
 800d016:	4301      	orrs	r1, r0
 800d018:	61d1      	str	r1, [r2, #28]
 800d01a:	69d3      	ldr	r3, [r2, #28]
{
 800d01c:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 800d01e:	4003      	ands	r3, r0
 800d020:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800d022:	4c0f      	ldr	r4, [pc, #60]	; (800d060 <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE();
 800d024:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800d026:	4b0f      	ldr	r3, [pc, #60]	; (800d064 <TIM_USEC_Init+0x58>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d028:	2500      	movs	r5, #0
  htim14.Instance = TIM14;
 800d02a:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d02c:	f004 fb4c 	bl	80116c8 <HAL_RCC_GetPCLK1Freq>
 800d030:	490d      	ldr	r1, [pc, #52]	; (800d068 <TIM_USEC_Init+0x5c>)
 800d032:	f7f3 f88d 	bl	8000150 <__udivsi3>
  htim14.Init.Period = 0xFFFF;
 800d036:	4b0d      	ldr	r3, [pc, #52]	; (800d06c <TIM_USEC_Init+0x60>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d038:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim14);
 800d03a:	0020      	movs	r0, r4
  htim14.Init.Period = 0xFFFF;
 800d03c:	60e3      	str	r3, [r4, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d03e:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim14);
 800d040:	f004 fe50 	bl	8011ce4 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d044:	a902      	add	r1, sp, #8
 800d046:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d048:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d04a:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d04c:	f004 fe64 	bl	8011d18 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800d050:	0020      	movs	r0, r4
 800d052:	f004 fde7 	bl	8011c24 <HAL_TIM_Base_Start>
}
 800d056:	b005      	add	sp, #20
 800d058:	bd30      	pop	{r4, r5, pc}
 800d05a:	46c0      	nop			; (mov r8, r8)
 800d05c:	40021000 	.word	0x40021000
 800d060:	200071fc 	.word	0x200071fc
 800d064:	40002000 	.word	0x40002000
 800d068:	000f4240 	.word	0x000f4240
 800d06c:	0000ffff 	.word	0x0000ffff

0800d070 <TIM_MSEC_Init>:
void TIM_MSEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800d070:	2080      	movs	r0, #128	; 0x80
 800d072:	4a13      	ldr	r2, [pc, #76]	; (800d0c0 <TIM_MSEC_Init+0x50>)
{
 800d074:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE();
 800d076:	6991      	ldr	r1, [r2, #24]
 800d078:	0240      	lsls	r0, r0, #9
 800d07a:	4301      	orrs	r1, r0
 800d07c:	6191      	str	r1, [r2, #24]
 800d07e:	6993      	ldr	r3, [r2, #24]
{
 800d080:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 800d082:	4003      	ands	r3, r0
 800d084:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800d086:	4c0f      	ldr	r4, [pc, #60]	; (800d0c4 <TIM_MSEC_Init+0x54>)
	__TIM15_CLK_ENABLE();
 800d088:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 800d08a:	4b0f      	ldr	r3, [pc, #60]	; (800d0c8 <TIM_MSEC_Init+0x58>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d08c:	2500      	movs	r5, #0
  htim15.Instance = TIM15;
 800d08e:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d090:	f004 fb1a 	bl	80116c8 <HAL_RCC_GetPCLK1Freq>
 800d094:	21fa      	movs	r1, #250	; 0xfa
 800d096:	0089      	lsls	r1, r1, #2
 800d098:	f7f3 f85a 	bl	8000150 <__udivsi3>
  htim15.Init.Period = 0xFFFF;
 800d09c:	4b0b      	ldr	r3, [pc, #44]	; (800d0cc <TIM_MSEC_Init+0x5c>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d09e:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim15);
 800d0a0:	0020      	movs	r0, r4
  htim15.Init.Period = 0xFFFF;
 800d0a2:	60e3      	str	r3, [r4, #12]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d0a4:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim15);
 800d0a6:	f004 fe1d 	bl	8011ce4 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d0aa:	a902      	add	r1, sp, #8
 800d0ac:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d0ae:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d0b0:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d0b2:	f004 fe31 	bl	8011d18 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800d0b6:	0020      	movs	r0, r4
 800d0b8:	f004 fdb4 	bl	8011c24 <HAL_TIM_Base_Start>
}
 800d0bc:	b005      	add	sp, #20
 800d0be:	bd30      	pop	{r4, r5, pc}
 800d0c0:	40021000 	.word	0x40021000
 800d0c4:	200071c0 	.word	0x200071c0
 800d0c8:	40014000 	.word	0x40014000
 800d0cc:	0000ffff 	.word	0x0000ffff

0800d0d0 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800d0d0:	b510      	push	{r4, lr}
 800d0d2:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800d0d4:	f002 f8cc 	bl	800f270 <vPortEnterCritical>
	
	if (Delay)
 800d0d8:	2c00      	cmp	r4, #0
 800d0da:	d006      	beq.n	800d0ea <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800d0dc:	4b04      	ldr	r3, [pc, #16]	; (800d0f0 <StartMicroDelay+0x20>)
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800d0e2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d0e4:	1a5b      	subs	r3, r3, r1
 800d0e6:	42a3      	cmp	r3, r4
 800d0e8:	d9fb      	bls.n	800d0e2 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d0ea:	f002 f8cd 	bl	800f288 <vPortExitCritical>
}
 800d0ee:	bd10      	pop	{r4, pc}
 800d0f0:	200071fc 	.word	0x200071fc

0800d0f4 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800d0f4:	b510      	push	{r4, lr}
 800d0f6:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800d0f8:	f002 f8ba 	bl	800f270 <vPortEnterCritical>
	
	if (Delay)
 800d0fc:	2c00      	cmp	r4, #0
 800d0fe:	d006      	beq.n	800d10e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800d100:	4b04      	ldr	r3, [pc, #16]	; (800d114 <StartMilliDelay+0x20>)
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800d106:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d108:	1a5b      	subs	r3, r3, r1
 800d10a:	42a3      	cmp	r3, r4
 800d10c:	d9fb      	bls.n	800d106 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d10e:	f002 f8bb 	bl	800f288 <vPortExitCritical>
}
 800d112:	bd10      	pop	{r4, pc}
 800d114:	200071c0 	.word	0x200071c0

0800d118 <SwapUartPins.part.0>:

/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
 800d118:	b570      	push	{r4, r5, r6, lr}
 800d11a:	0004      	movs	r4, r0
{
	if (huart != NULL) {
		if (direction == REVERSED) {
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d11c:	f7fc ff58 	bl	8009fd0 <GetPort>
 800d120:	2180      	movs	r1, #128	; 0x80
 800d122:	0209      	lsls	r1, r1, #8
 800d124:	000a      	movs	r2, r1
 800d126:	3801      	subs	r0, #1
 800d128:	4102      	asrs	r2, r0
 800d12a:	4b07      	ldr	r3, [pc, #28]	; (800d148 <SwapUartPins.part.0+0x30>)
 800d12c:	4d07      	ldr	r5, [pc, #28]	; (800d14c <SwapUartPins.part.0+0x34>)
 800d12e:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d130:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d132:	3b01      	subs	r3, #1
 800d134:	005b      	lsls	r3, r3, #1
 800d136:	5b58      	ldrh	r0, [r3, r5]
 800d138:	4302      	orrs	r2, r0
 800d13a:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d13c:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800d13e:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d140:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800d142:	f005 f9d9 	bl	80124f8 <HAL_UART_Init>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800d146:	bd70      	pop	{r4, r5, r6, pc}
 800d148:	20000aa8 	.word	0x20000aa8
 800d14c:	20007238 	.word	0x20007238

0800d150 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 800d150:	4809      	ldr	r0, [pc, #36]	; (800d178 <MX_USART1_UART_Init+0x28>)
 800d152:	4b0a      	ldr	r3, [pc, #40]	; (800d17c <MX_USART1_UART_Init+0x2c>)
{
 800d154:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800d156:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d158:	23e1      	movs	r3, #225	; 0xe1
 800d15a:	031b      	lsls	r3, r3, #12
 800d15c:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d15e:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d160:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d162:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d164:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d166:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d168:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d16a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d16c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d16e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d170:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800d172:	f005 f9c1 	bl	80124f8 <HAL_UART_Init>
}
 800d176:	bd10      	pop	{r4, pc}
 800d178:	20006fc4 	.word	0x20006fc4
 800d17c:	40013800 	.word	0x40013800

0800d180 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 800d180:	4809      	ldr	r0, [pc, #36]	; (800d1a8 <MX_USART2_UART_Init+0x28>)
 800d182:	4b0a      	ldr	r3, [pc, #40]	; (800d1ac <MX_USART2_UART_Init+0x2c>)
{
 800d184:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d186:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d188:	23e1      	movs	r3, #225	; 0xe1
 800d18a:	031b      	lsls	r3, r3, #12
 800d18c:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d18e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d190:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d192:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d194:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d196:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d198:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d19a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d19c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d19e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d1a0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d1a2:	f005 f9a9 	bl	80124f8 <HAL_UART_Init>
}
 800d1a6:	bd10      	pop	{r4, pc}
 800d1a8:	200070bc 	.word	0x200070bc
 800d1ac:	40004400 	.word	0x40004400

0800d1b0 <MX_USART3_UART_Init>:
  huart3.Instance = USART3;
 800d1b0:	4809      	ldr	r0, [pc, #36]	; (800d1d8 <MX_USART3_UART_Init+0x28>)
 800d1b2:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <MX_USART3_UART_Init+0x2c>)
{
 800d1b4:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d1b6:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d1b8:	23e1      	movs	r3, #225	; 0xe1
 800d1ba:	031b      	lsls	r3, r3, #12
 800d1bc:	6043      	str	r3, [r0, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d1be:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d1c0:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d1c2:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d1c4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d1c6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d1c8:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d1ca:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d1cc:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d1ce:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d1d0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d1d2:	f005 f991 	bl	80124f8 <HAL_UART_Init>
}
 800d1d6:	bd10      	pop	{r4, pc}
 800d1d8:	20006e9c 	.word	0x20006e9c
 800d1dc:	40004800 	.word	0x40004800

0800d1e0 <MX_USART5_UART_Init>:
  huart5.Instance = USART5;
 800d1e0:	4809      	ldr	r0, [pc, #36]	; (800d208 <MX_USART5_UART_Init+0x28>)
 800d1e2:	4b0a      	ldr	r3, [pc, #40]	; (800d20c <MX_USART5_UART_Init+0x2c>)
{
 800d1e4:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d1e6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d1e8:	23e1      	movs	r3, #225	; 0xe1
 800d1ea:	031b      	lsls	r3, r3, #12
 800d1ec:	6043      	str	r3, [r0, #4]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d1ee:	220c      	movs	r2, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d1f0:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d1f2:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d1f4:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d1f6:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d1f8:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d1fa:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d1fc:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d1fe:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d200:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d202:	f005 f979 	bl	80124f8 <HAL_UART_Init>
}
 800d206:	bd10      	pop	{r4, pc}
 800d208:	20006f54 	.word	0x20006f54
 800d20c:	40005000 	.word	0x40005000

0800d210 <MX_USART6_UART_Init>:
  huart6.Instance = USART6;
 800d210:	4809      	ldr	r0, [pc, #36]	; (800d238 <MX_USART6_UART_Init+0x28>)
 800d212:	4b0a      	ldr	r3, [pc, #40]	; (800d23c <MX_USART6_UART_Init+0x2c>)
{
 800d214:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d216:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d218:	23e1      	movs	r3, #225	; 0xe1
 800d21a:	031b      	lsls	r3, r3, #12
 800d21c:	6043      	str	r3, [r0, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d21e:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d220:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d222:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d224:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d226:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d228:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d22a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d22c:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d22e:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d230:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d232:	f005 f961 	bl	80124f8 <HAL_UART_Init>
}
 800d236:	bd10      	pop	{r4, pc}
 800d238:	20007044 	.word	0x20007044
 800d23c:	40011400 	.word	0x40011400

0800d240 <HAL_UART_MspInit>:
{
 800d240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d242:	46c6      	mov	lr, r8
 800d244:	b500      	push	{lr}
  if(huart->Instance==USART1)
 800d246:	6803      	ldr	r3, [r0, #0]
 800d248:	4a6e      	ldr	r2, [pc, #440]	; (800d404 <HAL_UART_MspInit+0x1c4>)
{
 800d24a:	b08a      	sub	sp, #40	; 0x28
  if(huart->Instance==USART1)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d041      	beq.n	800d2d4 <HAL_UART_MspInit+0x94>
  else if(huart->Instance==USART2)
 800d250:	4a6d      	ldr	r2, [pc, #436]	; (800d408 <HAL_UART_MspInit+0x1c8>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d06c      	beq.n	800d330 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 800d256:	4a6d      	ldr	r2, [pc, #436]	; (800d40c <HAL_UART_MspInit+0x1cc>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d100      	bne.n	800d25e <HAL_UART_MspInit+0x1e>
 800d25c:	e094      	b.n	800d388 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART4)
 800d25e:	4a6c      	ldr	r2, [pc, #432]	; (800d410 <HAL_UART_MspInit+0x1d0>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d006      	beq.n	800d272 <HAL_UART_MspInit+0x32>
  else if(huart->Instance==USART5)
 800d264:	4a6b      	ldr	r2, [pc, #428]	; (800d414 <HAL_UART_MspInit+0x1d4>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d100      	bne.n	800d26c <HAL_UART_MspInit+0x2c>
 800d26a:	e0b0      	b.n	800d3ce <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART6)
 800d26c:	4a6a      	ldr	r2, [pc, #424]	; (800d418 <HAL_UART_MspInit+0x1d8>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d003      	beq.n	800d27a <HAL_UART_MspInit+0x3a>
}
 800d272:	b00a      	add	sp, #40	; 0x28
 800d274:	bc04      	pop	{r2}
 800d276:	4690      	mov	r8, r2
 800d278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART6_CLK_ENABLE();
 800d27a:	2420      	movs	r4, #32
 800d27c:	4b67      	ldr	r3, [pc, #412]	; (800d41c <HAL_UART_MspInit+0x1dc>)
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d27e:	2090      	movs	r0, #144	; 0x90
    __USART6_CLK_ENABLE();
 800d280:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d282:	2701      	movs	r7, #1
    __USART6_CLK_ENABLE();
 800d284:	4322      	orrs	r2, r4
 800d286:	619a      	str	r2, [r3, #24]
 800d288:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d28a:	2603      	movs	r6, #3
    __USART6_CLK_ENABLE();
 800d28c:	4023      	ands	r3, r4
 800d28e:	9304      	str	r3, [sp, #16]
 800d290:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d292:	2310      	movs	r3, #16
 800d294:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d296:	3b0e      	subs	r3, #14
 800d298:	4698      	mov	r8, r3
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d29a:	2505      	movs	r5, #5
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d29c:	a905      	add	r1, sp, #20
 800d29e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2a0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2a2:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2a4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d2a6:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d2a8:	f003 fc44 	bl	8010b34 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2ac:	4643      	mov	r3, r8
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d2ae:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800d2b0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2b2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2b4:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2b6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800d2b8:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d2ba:	a905      	add	r1, sp, #20
 800d2bc:	05c0      	lsls	r0, r0, #23
 800d2be:	f003 fc39 	bl	8010b34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	2101      	movs	r1, #1
 800d2c6:	201d      	movs	r0, #29
 800d2c8:	f002 fc4a 	bl	800fb60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d2cc:	201d      	movs	r0, #29
 800d2ce:	f002 fc73 	bl	800fbb8 <HAL_NVIC_EnableIRQ>
}
 800d2d2:	e7ce      	b.n	800d272 <HAL_UART_MspInit+0x32>
    __USART1_CLK_ENABLE();
 800d2d4:	2080      	movs	r0, #128	; 0x80
 800d2d6:	4a51      	ldr	r2, [pc, #324]	; (800d41c <HAL_UART_MspInit+0x1dc>)
 800d2d8:	01c0      	lsls	r0, r0, #7
 800d2da:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2dc:	2401      	movs	r4, #1
    __USART1_CLK_ENABLE();
 800d2de:	4301      	orrs	r1, r0
 800d2e0:	6191      	str	r1, [r2, #24]
 800d2e2:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2e4:	2602      	movs	r6, #2
    __USART1_CLK_ENABLE();
 800d2e6:	4003      	ands	r3, r0
 800d2e8:	9300      	str	r3, [sp, #0]
 800d2ea:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d2ec:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d2ee:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2f0:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d2f2:	009b      	lsls	r3, r3, #2
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d2f4:	a905      	add	r1, sp, #20
 800d2f6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d2f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2fa:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2fc:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2fe:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800d300:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d302:	f003 fc17 	bl	8010b34 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d306:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d308:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d30a:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d30c:	a905      	add	r1, sp, #20
 800d30e:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d310:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d312:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d314:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d316:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800d318:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d31a:	f003 fc0b 	bl	8010b34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d31e:	2200      	movs	r2, #0
 800d320:	2101      	movs	r1, #1
 800d322:	201b      	movs	r0, #27
 800d324:	f002 fc1c 	bl	800fb60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d328:	201b      	movs	r0, #27
 800d32a:	f002 fc45 	bl	800fbb8 <HAL_NVIC_EnableIRQ>
 800d32e:	e7a0      	b.n	800d272 <HAL_UART_MspInit+0x32>
    __USART2_CLK_ENABLE();
 800d330:	2080      	movs	r0, #128	; 0x80
 800d332:	4a3a      	ldr	r2, [pc, #232]	; (800d41c <HAL_UART_MspInit+0x1dc>)
 800d334:	0280      	lsls	r0, r0, #10
 800d336:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d338:	2401      	movs	r4, #1
    __USART2_CLK_ENABLE();
 800d33a:	4301      	orrs	r1, r0
 800d33c:	61d1      	str	r1, [r2, #28]
 800d33e:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d340:	2602      	movs	r6, #2
    __USART2_CLK_ENABLE();
 800d342:	4003      	ands	r3, r0
 800d344:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d346:	2090      	movs	r0, #144	; 0x90
    __USART2_CLK_ENABLE();
 800d348:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d34a:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d34c:	2304      	movs	r3, #4
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d34e:	a905      	add	r1, sp, #20
 800d350:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d352:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d354:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d356:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d358:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d35a:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d35c:	f003 fbea 	bl	8010b34 <HAL_GPIO_Init>
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d360:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d362:	2308      	movs	r3, #8
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d364:	a905      	add	r1, sp, #20
 800d366:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d368:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d36a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d36c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d36e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800d370:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d372:	f003 fbdf 	bl	8010b34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d376:	2200      	movs	r2, #0
 800d378:	2101      	movs	r1, #1
 800d37a:	201c      	movs	r0, #28
 800d37c:	f002 fbf0 	bl	800fb60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d380:	201c      	movs	r0, #28
 800d382:	f002 fc19 	bl	800fbb8 <HAL_NVIC_EnableIRQ>
 800d386:	e774      	b.n	800d272 <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800d388:	2080      	movs	r0, #128	; 0x80
 800d38a:	4a24      	ldr	r2, [pc, #144]	; (800d41c <HAL_UART_MspInit+0x1dc>)
 800d38c:	02c0      	lsls	r0, r0, #11
 800d38e:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d390:	2702      	movs	r7, #2
    __USART3_CLK_ENABLE();
 800d392:	4301      	orrs	r1, r0
 800d394:	61d1      	str	r1, [r2, #28]
 800d396:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d398:	2601      	movs	r6, #1
    __USART3_CLK_ENABLE();
 800d39a:	4003      	ands	r3, r0
 800d39c:	9302      	str	r3, [sp, #8]
 800d39e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d3a0:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d3a2:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d3a4:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d3a6:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d3a8:	a905      	add	r1, sp, #20
 800d3aa:	481d      	ldr	r0, [pc, #116]	; (800d420 <HAL_UART_MspInit+0x1e0>)
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d3ac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3ae:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3b0:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d3b2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d3b4:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d3b6:	f003 fbbd 	bl	8010b34 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d3ba:	2380      	movs	r3, #128	; 0x80
 800d3bc:	011b      	lsls	r3, r3, #4
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d3be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3c0:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3c2:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d3c4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800d3c6:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d3c8:	a905      	add	r1, sp, #20
 800d3ca:	4815      	ldr	r0, [pc, #84]	; (800d420 <HAL_UART_MspInit+0x1e0>)
 800d3cc:	e777      	b.n	800d2be <HAL_UART_MspInit+0x7e>
    __USART5_CLK_ENABLE();
 800d3ce:	2080      	movs	r0, #128	; 0x80
 800d3d0:	4a12      	ldr	r2, [pc, #72]	; (800d41c <HAL_UART_MspInit+0x1dc>)
 800d3d2:	0340      	lsls	r0, r0, #13
 800d3d4:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3d6:	2702      	movs	r7, #2
    __USART5_CLK_ENABLE();
 800d3d8:	4301      	orrs	r1, r0
 800d3da:	61d1      	str	r1, [r2, #28]
 800d3dc:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3de:	2601      	movs	r6, #1
    __USART5_CLK_ENABLE();
 800d3e0:	4003      	ands	r3, r0
 800d3e2:	9303      	str	r3, [sp, #12]
 800d3e4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d3e6:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d3e8:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d3ea:	2404      	movs	r4, #4
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d3ec:	a905      	add	r1, sp, #20
 800d3ee:	480c      	ldr	r0, [pc, #48]	; (800d420 <HAL_UART_MspInit+0x1e0>)
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d3f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3f2:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3f4:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d3f6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d3f8:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d3fa:	f003 fb9b 	bl	8010b34 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d3fe:	2310      	movs	r3, #16
 800d400:	e7dd      	b.n	800d3be <HAL_UART_MspInit+0x17e>
 800d402:	46c0      	nop			; (mov r8, r8)
 800d404:	40013800 	.word	0x40013800
 800d408:	40004400 	.word	0x40004400
 800d40c:	40004800 	.word	0x40004800
 800d410:	40004c00 	.word	0x40004c00
 800d414:	40005000 	.word	0x40005000
 800d418:	40011400 	.word	0x40011400
 800d41c:	40021000 	.word	0x40021000
 800d420:	48000400 	.word	0x48000400

0800d424 <writePxMutex>:
{
 800d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d426:	4647      	mov	r7, r8
 800d428:	46ce      	mov	lr, r9
 800d42a:	b580      	push	{r7, lr}
 800d42c:	0017      	movs	r7, r2
 800d42e:	1e42      	subs	r2, r0, #1
 800d430:	b2d2      	uxtb	r2, r2
 800d432:	000e      	movs	r6, r1
 800d434:	2a04      	cmp	r2, #4
 800d436:	d80e      	bhi.n	800d456 <writePxMutex+0x32>
 800d438:	4911      	ldr	r1, [pc, #68]	; (800d480 <writePxMutex+0x5c>)
 800d43a:	0092      	lsls	r2, r2, #2
 800d43c:	5852      	ldr	r2, [r2, r1]
 800d43e:	4690      	mov	r8, r2
	if (GetUart(port) != NULL) {
 800d440:	2a00      	cmp	r2, #0
 800d442:	d008      	beq.n	800d456 <writePxMutex+0x32>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d444:	4a0f      	ldr	r2, [pc, #60]	; (800d484 <writePxMutex+0x60>)
 800d446:	0085      	lsls	r5, r0, #2
 800d448:	0019      	movs	r1, r3
 800d44a:	5950      	ldr	r0, [r2, r5]
 800d44c:	4691      	mov	r9, r2
 800d44e:	f000 f9e9 	bl	800d824 <osSemaphoreWait>
 800d452:	2800      	cmp	r0, #0
 800d454:	d007      	beq.n	800d466 <writePxMutex+0x42>
	HAL_StatusTypeDef result = HAL_ERROR;
 800d456:	2401      	movs	r4, #1
}
 800d458:	0020      	movs	r0, r4
 800d45a:	bc0c      	pop	{r2, r3}
 800d45c:	4690      	mov	r8, r2
 800d45e:	4699      	mov	r9, r3
 800d460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d462:	2803      	cmp	r0, #3
 800d464:	d007      	beq.n	800d476 <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d466:	9b08      	ldr	r3, [sp, #32]
 800d468:	003a      	movs	r2, r7
 800d46a:	0031      	movs	r1, r6
 800d46c:	4640      	mov	r0, r8
 800d46e:	f004 ffa1 	bl	80123b4 <HAL_UART_Transmit>
 800d472:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d474:	d1f5      	bne.n	800d462 <writePxMutex+0x3e>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d476:	464b      	mov	r3, r9
 800d478:	5958      	ldr	r0, [r3, r5]
 800d47a:	f000 f9fd 	bl	800d878 <osSemaphoreRelease>
 800d47e:	e7eb      	b.n	800d458 <writePxMutex+0x34>
 800d480:	08017af4 	.word	0x08017af4
 800d484:	20006e38 	.word	0x20006e38

0800d488 <writePxITMutex>:
{
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	0015      	movs	r5, r2
 800d48c:	1e42      	subs	r2, r0, #1
 800d48e:	b2d2      	uxtb	r2, r2
 800d490:	000c      	movs	r4, r1
 800d492:	2a04      	cmp	r2, #4
 800d494:	d80c      	bhi.n	800d4b0 <writePxITMutex+0x28>
 800d496:	490a      	ldr	r1, [pc, #40]	; (800d4c0 <writePxITMutex+0x38>)
 800d498:	0092      	lsls	r2, r2, #2
 800d49a:	5856      	ldr	r6, [r2, r1]
	if (GetUart(port) != NULL) {	
 800d49c:	2e00      	cmp	r6, #0
 800d49e:	d007      	beq.n	800d4b0 <writePxITMutex+0x28>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d4a0:	4a08      	ldr	r2, [pc, #32]	; (800d4c4 <writePxITMutex+0x3c>)
 800d4a2:	0080      	lsls	r0, r0, #2
 800d4a4:	5880      	ldr	r0, [r0, r2]
 800d4a6:	0019      	movs	r1, r3
 800d4a8:	f000 f9bc 	bl	800d824 <osSemaphoreWait>
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	d001      	beq.n	800d4b4 <writePxITMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d4b0:	2001      	movs	r0, #1
}
 800d4b2:	bd70      	pop	{r4, r5, r6, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d4b4:	002a      	movs	r2, r5
 800d4b6:	0021      	movs	r1, r4
 800d4b8:	0030      	movs	r0, r6
 800d4ba:	f004 fc6b 	bl	8011d94 <HAL_UART_Transmit_IT>
 800d4be:	e7f8      	b.n	800d4b2 <writePxITMutex+0x2a>
 800d4c0:	08017af4 	.word	0x08017af4
 800d4c4:	20006e38 	.word	0x20006e38

0800d4c8 <writePxDMAMutex>:
{
 800d4c8:	b570      	push	{r4, r5, r6, lr}
 800d4ca:	0015      	movs	r5, r2
 800d4cc:	1e42      	subs	r2, r0, #1
 800d4ce:	b2d2      	uxtb	r2, r2
 800d4d0:	000c      	movs	r4, r1
 800d4d2:	2a04      	cmp	r2, #4
 800d4d4:	d80c      	bhi.n	800d4f0 <writePxDMAMutex+0x28>
 800d4d6:	490c      	ldr	r1, [pc, #48]	; (800d508 <writePxDMAMutex+0x40>)
 800d4d8:	0092      	lsls	r2, r2, #2
 800d4da:	5856      	ldr	r6, [r2, r1]
	if (hUart != NULL) {	
 800d4dc:	2e00      	cmp	r6, #0
 800d4de:	d007      	beq.n	800d4f0 <writePxDMAMutex+0x28>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d4e0:	4a0a      	ldr	r2, [pc, #40]	; (800d50c <writePxDMAMutex+0x44>)
 800d4e2:	0080      	lsls	r0, r0, #2
 800d4e4:	5880      	ldr	r0, [r0, r2]
 800d4e6:	0019      	movs	r1, r3
 800d4e8:	f000 f99c 	bl	800d824 <osSemaphoreWait>
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	d001      	beq.n	800d4f4 <writePxDMAMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d4f0:	2001      	movs	r0, #1
}
 800d4f2:	bd70      	pop	{r4, r5, r6, pc}
			DMA_MSG_TX_Setup(hUart);
 800d4f4:	0030      	movs	r0, r6
 800d4f6:	f7fd fef1 	bl	800b2dc <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800d4fa:	002a      	movs	r2, r5
 800d4fc:	0021      	movs	r1, r4
 800d4fe:	0030      	movs	r0, r6
 800d500:	f004 fcda 	bl	8011eb8 <HAL_UART_Transmit_DMA>
 800d504:	e7f5      	b.n	800d4f2 <writePxDMAMutex+0x2a>
 800d506:	46c0      	nop			; (mov r8, r8)
 800d508:	08017af4 	.word	0x08017af4
 800d50c:	20006e38 	.word	0x20006e38

0800d510 <UpdateBaudrate>:
{
 800d510:	3801      	subs	r0, #1
 800d512:	b2c0      	uxtb	r0, r0
 800d514:	b510      	push	{r4, lr}
 800d516:	2804      	cmp	r0, #4
 800d518:	d807      	bhi.n	800d52a <UpdateBaudrate+0x1a>
 800d51a:	4b05      	ldr	r3, [pc, #20]	; (800d530 <UpdateBaudrate+0x20>)
 800d51c:	0080      	lsls	r0, r0, #2
 800d51e:	58c0      	ldr	r0, [r0, r3]
	huart->Init.BaudRate = baudrate;
 800d520:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800d522:	f004 ffe9 	bl	80124f8 <HAL_UART_Init>
}
 800d526:	2000      	movs	r0, #0
 800d528:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate = baudrate;
 800d52a:	2300      	movs	r3, #0
 800d52c:	605b      	str	r3, [r3, #4]
 800d52e:	deff      	udf	#255	; 0xff
 800d530:	08017af4 	.word	0x08017af4

0800d534 <GetUart>:
{
 800d534:	3801      	subs	r0, #1
 800d536:	b2c3      	uxtb	r3, r0
 800d538:	2000      	movs	r0, #0
 800d53a:	2b04      	cmp	r3, #4
 800d53c:	d802      	bhi.n	800d544 <GetUart+0x10>
 800d53e:	4a02      	ldr	r2, [pc, #8]	; (800d548 <GetUart+0x14>)
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	5898      	ldr	r0, [r3, r2]
}
 800d544:	4770      	bx	lr
 800d546:	46c0      	nop			; (mov r8, r8)
 800d548:	08017af4 	.word	0x08017af4

0800d54c <SwapUartPins>:
{
 800d54c:	b570      	push	{r4, r5, r6, lr}
 800d54e:	0004      	movs	r4, r0
 800d550:	000d      	movs	r5, r1
	if (huart != NULL) {
 800d552:	2800      	cmp	r0, #0
 800d554:	d003      	beq.n	800d55e <SwapUartPins+0x12>
		if (direction == REVERSED) {
 800d556:	2901      	cmp	r1, #1
 800d558:	d017      	beq.n	800d58a <SwapUartPins+0x3e>
		} else if (direction == NORMAL) {
 800d55a:	2900      	cmp	r1, #0
 800d55c:	d000      	beq.n	800d560 <SwapUartPins+0x14>
}
 800d55e:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d560:	f7fc fd36 	bl	8009fd0 <GetPort>
 800d564:	2180      	movs	r1, #128	; 0x80
 800d566:	3801      	subs	r0, #1
 800d568:	0209      	lsls	r1, r1, #8
 800d56a:	4101      	asrs	r1, r0
 800d56c:	4b08      	ldr	r3, [pc, #32]	; (800d590 <SwapUartPins+0x44>)
 800d56e:	4e09      	ldr	r6, [pc, #36]	; (800d594 <SwapUartPins+0x48>)
 800d570:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d572:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d574:	3b01      	subs	r3, #1
 800d576:	005b      	lsls	r3, r3, #1
 800d578:	5b9a      	ldrh	r2, [r3, r6]
			HAL_UART_Init(huart);		
 800d57a:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d57c:	438a      	bics	r2, r1
 800d57e:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d580:	2308      	movs	r3, #8
 800d582:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);		
 800d584:	f004 ffb8 	bl	80124f8 <HAL_UART_Init>
}
 800d588:	e7e9      	b.n	800d55e <SwapUartPins+0x12>
 800d58a:	f7ff fdc5 	bl	800d118 <SwapUartPins.part.0>
 800d58e:	e7e6      	b.n	800d55e <SwapUartPins+0x12>
 800d590:	20000aa8 	.word	0x20000aa8
 800d594:	20007238 	.word	0x20007238

0800d598 <ReadPortsDir>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800d598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d59a:	46c6      	mov	lr, r8
 800d59c:	b500      	push	{lr}
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800d59e:	4d12      	ldr	r5, [pc, #72]	; (800d5e8 <ReadPortsDir+0x50>)
 800d5a0:	782b      	ldrb	r3, [r5, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d01d      	beq.n	800d5e2 <ReadPortsDir+0x4a>
	BOS_Status result = BOS_OK;
 800d5a6:	2300      	movs	r3, #0
	for (uint8_t i = 1; i <= N; i++) {
 800d5a8:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800d5aa:	4698      	mov	r8, r3
 800d5ac:	4e0f      	ldr	r6, [pc, #60]	; (800d5ec <ReadPortsDir+0x54>)
		if (i != myID) {
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
			Delay_ms_no_rtos(50);
			if (responseStatus != BOS_OK) {
 800d5ae:	4f10      	ldr	r7, [pc, #64]	; (800d5f0 <ReadPortsDir+0x58>)
		if (i != myID) {
 800d5b0:	7833      	ldrb	r3, [r6, #0]
 800d5b2:	42a3      	cmp	r3, r4
 800d5b4:	d00c      	beq.n	800d5d0 <ReadPortsDir+0x38>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	2113      	movs	r1, #19
 800d5ba:	0020      	movs	r0, r4
 800d5bc:	f7fa fdae 	bl	800811c <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800d5c0:	2032      	movs	r0, #50	; 0x32
 800d5c2:	f7ff fd97 	bl	800d0f4 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800d5c6:	783b      	ldrb	r3, [r7, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d001      	beq.n	800d5d0 <ReadPortsDir+0x38>
				result = BOS_ERR_NoResponse;
 800d5cc:	2302      	movs	r3, #2
 800d5ce:	4698      	mov	r8, r3
	for (uint8_t i = 1; i <= N; i++) {
 800d5d0:	3401      	adds	r4, #1
 800d5d2:	782b      	ldrb	r3, [r5, #0]
 800d5d4:	b2e4      	uxtb	r4, r4
 800d5d6:	42a3      	cmp	r3, r4
 800d5d8:	d2ea      	bcs.n	800d5b0 <ReadPortsDir+0x18>
			}
		}
	}

	return result;
}
 800d5da:	4640      	mov	r0, r8
 800d5dc:	bc04      	pop	{r2}
 800d5de:	4690      	mov	r8, r2
 800d5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result = BOS_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	4698      	mov	r8, r3
 800d5e6:	e7f8      	b.n	800d5da <ReadPortsDir+0x42>
 800d5e8:	20000010 	.word	0x20000010
 800d5ec:	20000aa8 	.word	0x20000aa8
 800d5f0:	20000c4c 	.word	0x20000c4c

0800d5f4 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800d5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
 800d5f6:	2301      	movs	r3, #1
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d5f8:	2580      	movs	r5, #128	; 0x80
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800d5fa:	490f      	ldr	r1, [pc, #60]	; (800d638 <ReadPortsDirMSG+0x44>)
	uint16_t temp =0;
 800d5fc:	2200      	movs	r2, #0
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d5fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d600:	022d      	lsls	r5, r5, #8
			messageParams[temp++] = p;
 800d602:	4f0e      	ldr	r7, [pc, #56]	; (800d63c <ReadPortsDirMSG+0x48>)
 800d604:	4e0e      	ldr	r6, [pc, #56]	; (800d640 <ReadPortsDirMSG+0x4c>)
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d606:	b2dc      	uxtb	r4, r3
 800d608:	42a9      	cmp	r1, r5
 800d60a:	d102      	bne.n	800d612 <ReadPortsDirMSG+0x1e>
			messageParams[temp++] = p;
 800d60c:	1c51      	adds	r1, r2, #1
 800d60e:	54bc      	strb	r4, [r7, r2]
 800d610:	b28a      	uxth	r2, r1
	for (int p = 1; p <= NumOfPorts; p++) {
 800d612:	3301      	adds	r3, #1
 800d614:	2b06      	cmp	r3, #6
 800d616:	d009      	beq.n	800d62c <ReadPortsDirMSG+0x38>
 800d618:	0099      	lsls	r1, r3, #2
 800d61a:	3904      	subs	r1, #4
 800d61c:	5871      	ldr	r1, [r6, r1]
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d61e:	b2dc      	uxtb	r4, r3
 800d620:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d622:	42a9      	cmp	r1, r5
 800d624:	d0f2      	beq.n	800d60c <ReadPortsDirMSG+0x18>
	for (int p = 1; p <= NumOfPorts; p++) {
 800d626:	3301      	adds	r3, #1
 800d628:	2b06      	cmp	r3, #6
 800d62a:	d1f5      	bne.n	800d618 <ReadPortsDirMSG+0x24>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800d62c:	2114      	movs	r1, #20
 800d62e:	f7fa fd75 	bl	800811c <SendMessageToModule>
	return result;
}
 800d632:	2000      	movs	r0, #0
 800d634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d636:	46c0      	nop			; (mov r8, r8)
 800d638:	20006f54 	.word	0x20006f54
 800d63c:	20000b4c 	.word	0x20000b4c
 800d640:	08017af4 	.word	0x08017af4

0800d644 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800d644:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d646:	46c6      	mov	lr, r8
 800d648:	4b12      	ldr	r3, [pc, #72]	; (800d694 <UpdateMyPortsDir+0x50>)
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800d64a:	2580      	movs	r5, #128	; 0x80
{
 800d64c:	2400      	movs	r4, #0
 800d64e:	4698      	mov	r8, r3
 800d650:	b500      	push	{lr}
 800d652:	4811      	ldr	r0, [pc, #68]	; (800d698 <UpdateMyPortsDir+0x54>)
 800d654:	4f11      	ldr	r7, [pc, #68]	; (800d69c <UpdateMyPortsDir+0x58>)
 800d656:	4e12      	ldr	r6, [pc, #72]	; (800d6a0 <UpdateMyPortsDir+0x5c>)
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800d658:	022d      	lsls	r5, r5, #8
 800d65a:	002a      	movs	r2, r5
 800d65c:	4122      	asrs	r2, r4
 800d65e:	7833      	ldrb	r3, [r6, #0]
 800d660:	3b01      	subs	r3, #1
 800d662:	005b      	lsls	r3, r3, #1
 800d664:	5afb      	ldrh	r3, [r7, r3]
 800d666:	421a      	tst	r2, r3
 800d668:	d00a      	beq.n	800d680 <UpdateMyPortsDir+0x3c>
	if (huart != NULL) {
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d001      	beq.n	800d672 <UpdateMyPortsDir+0x2e>
 800d66e:	f7ff fd53 	bl	800d118 <SwapUartPins.part.0>
 800d672:	3401      	adds	r4, #1
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800d674:	2c05      	cmp	r4, #5
 800d676:	d009      	beq.n	800d68c <UpdateMyPortsDir+0x48>
 800d678:	4642      	mov	r2, r8
 800d67a:	00a3      	lsls	r3, r4, #2
 800d67c:	5898      	ldr	r0, [r3, r2]
 800d67e:	e7ec      	b.n	800d65a <UpdateMyPortsDir+0x16>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
 800d680:	2100      	movs	r1, #0
 800d682:	3401      	adds	r4, #1
 800d684:	f7ff ff62 	bl	800d54c <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800d688:	2c05      	cmp	r4, #5
 800d68a:	d1f5      	bne.n	800d678 <UpdateMyPortsDir+0x34>
			SwapUartPins(GetUart(p), REVERSED);
		}
	}

	return result;
}
 800d68c:	2000      	movs	r0, #0
 800d68e:	bc04      	pop	{r2}
 800d690:	4690      	mov	r8, r2
 800d692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d694:	08017af4 	.word	0x08017af4
 800d698:	20006f54 	.word	0x20006f54
 800d69c:	20007238 	.word	0x20007238
 800d6a0:	20000aa8 	.word	0x20000aa8

0800d6a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d6a4:	4816      	ldr	r0, [pc, #88]	; (800d700 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d6a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d6a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d6aa:	e003      	b.n	800d6b4 <LoopCopyDataInit>

0800d6ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d6ac:	4b15      	ldr	r3, [pc, #84]	; (800d704 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d6ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d6b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d6b2:	3104      	adds	r1, #4

0800d6b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d6b4:	4814      	ldr	r0, [pc, #80]	; (800d708 <LoopForever+0xc>)
  ldr r3, =_edata
 800d6b6:	4b15      	ldr	r3, [pc, #84]	; (800d70c <LoopForever+0x10>)
  adds r2, r0, r1
 800d6b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d6ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d6bc:	d3f6      	bcc.n	800d6ac <CopyDataInit>
  ldr r2, =_sbss
 800d6be:	4a14      	ldr	r2, [pc, #80]	; (800d710 <LoopForever+0x14>)
  b LoopFillZerobss
 800d6c0:	e002      	b.n	800d6c8 <LoopFillZerobss>

0800d6c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d6c2:	2300      	movs	r3, #0
  str  r3, [r2]
 800d6c4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d6c6:	3204      	adds	r2, #4

0800d6c8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d6c8:	4b12      	ldr	r3, [pc, #72]	; (800d714 <LoopForever+0x18>)
  cmp r2, r3
 800d6ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d6cc:	d3f9      	bcc.n	800d6c2 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d6ce:	4812      	ldr	r0, [pc, #72]	; (800d718 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d6d0:	4912      	ldr	r1, [pc, #72]	; (800d71c <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d6d2:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d6d4:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d6d6:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d6d8:	d005      	beq.n	800d6e6 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d6da:	f000 f82b 	bl	800d734 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d6de:	f005 f8a3 	bl	8012828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d6e2:	f005 f853 	bl	801278c <main>

0800d6e6 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d6e6:	480e      	ldr	r0, [pc, #56]	; (800d720 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d6e8:	490e      	ldr	r1, [pc, #56]	; (800d724 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d6ea:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d6ec:	480e      	ldr	r0, [pc, #56]	; (800d728 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d6ee:	490d      	ldr	r1, [pc, #52]	; (800d724 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d6f0:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d6f2:	480e      	ldr	r0, [pc, #56]	; (800d72c <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d6f4:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d6f6:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d6f8:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d6fa:	4700      	bx	r0

0800d6fc <LoopForever>:


LoopForever:
    b LoopForever
 800d6fc:	e7fe      	b.n	800d6fc <LoopForever>
 800d6fe:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d700:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d704:	0801a894 	.word	0x0801a894
  ldr r0, =_sdata
 800d708:	20000010 	.word	0x20000010
  ldr r3, =_edata
 800d70c:	20000a88 	.word	0x20000a88
  ldr r2, =_sbss
 800d710:	20000a88 	.word	0x20000a88
  ldr r3, = _ebss
 800d714:	200072e0 	.word	0x200072e0
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d718:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d71c:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d720:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d724:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d728:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d72c:	1fffd800 	.word	0x1fffd800

0800d730 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d730:	e7fe      	b.n	800d730 <CEC_CAN_IRQHandler>
	...

0800d734 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d734:	2101      	movs	r1, #1
 800d736:	4b11      	ldr	r3, [pc, #68]	; (800d77c <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d738:	4811      	ldr	r0, [pc, #68]	; (800d780 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	430a      	orrs	r2, r1
 800d73e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d740:	685a      	ldr	r2, [r3, #4]
 800d742:	4002      	ands	r2, r0
 800d744:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	480e      	ldr	r0, [pc, #56]	; (800d784 <SystemInit+0x50>)
 800d74a:	4002      	ands	r2, r0
 800d74c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d74e:	681a      	ldr	r2, [r3, #0]
 800d750:	480d      	ldr	r0, [pc, #52]	; (800d788 <SystemInit+0x54>)
 800d752:	4002      	ands	r2, r0
 800d754:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d756:	685a      	ldr	r2, [r3, #4]
 800d758:	480c      	ldr	r0, [pc, #48]	; (800d78c <SystemInit+0x58>)
 800d75a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d75c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d75e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d762:	4382      	bics	r2, r0
 800d764:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d768:	4809      	ldr	r0, [pc, #36]	; (800d790 <SystemInit+0x5c>)
 800d76a:	4002      	ands	r2, r0
 800d76c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d76e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d770:	438a      	bics	r2, r1
 800d772:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d774:	2200      	movs	r2, #0
 800d776:	609a      	str	r2, [r3, #8]

}
 800d778:	4770      	bx	lr
 800d77a:	46c0      	nop			; (mov r8, r8)
 800d77c:	40021000 	.word	0x40021000
 800d780:	08ffb80c 	.word	0x08ffb80c
 800d784:	fef6ffff 	.word	0xfef6ffff
 800d788:	fffbffff 	.word	0xfffbffff
 800d78c:	ffc0ffff 	.word	0xffc0ffff
 800d790:	fff0feac 	.word	0xfff0feac

0800d794 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d794:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800d796:	f000 fef9 	bl	800e58c <vTaskStartScheduler>
  
  return osOK;
}
 800d79a:	2000      	movs	r0, #0
 800d79c:	bd10      	pop	{r4, pc}
 800d79e:	46c0      	nop			; (mov r8, r8)

0800d7a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d7a0:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	d100      	bne.n	800d7a8 <osDelay+0x8>
 800d7a6:	3001      	adds	r0, #1
 800d7a8:	f001 f814 	bl	800e7d4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	bd10      	pop	{r4, pc}

0800d7b0 <osMutexRelease>:
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d7b0:	2300      	movs	r3, #0
{
 800d7b2:	b500      	push	{lr}
 800d7b4:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;
 800d7b6:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7b8:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d00a      	beq.n	800d7d6 <osMutexRelease+0x26>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d7c0:	a901      	add	r1, sp, #4
 800d7c2:	f000 fb95 	bl	800def0 <xQueueGiveFromISR>
 800d7c6:	2801      	cmp	r0, #1
 800d7c8:	d10c      	bne.n	800d7e4 <osMutexRelease+0x34>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d7ca:	9b01      	ldr	r3, [sp, #4]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d10b      	bne.n	800d7e8 <osMutexRelease+0x38>
  osStatus result = osOK;
 800d7d0:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800d7d2:	b003      	add	sp, #12
 800d7d4:	bd00      	pop	{pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	2200      	movs	r2, #0
 800d7da:	2100      	movs	r1, #0
 800d7dc:	f000 fad4 	bl	800dd88 <xQueueGenericSend>
 800d7e0:	2801      	cmp	r0, #1
 800d7e2:	d0f5      	beq.n	800d7d0 <osMutexRelease+0x20>
    result = osErrorOS;
 800d7e4:	20ff      	movs	r0, #255	; 0xff
 800d7e6:	e7f4      	b.n	800d7d2 <osMutexRelease+0x22>
    portEND_SWITCHING_ISR(taskWoken);
 800d7e8:	2280      	movs	r2, #128	; 0x80
 800d7ea:	4b02      	ldr	r3, [pc, #8]	; (800d7f4 <osMutexRelease+0x44>)
 800d7ec:	0552      	lsls	r2, r2, #21
 800d7ee:	601a      	str	r2, [r3, #0]
 800d7f0:	e7ee      	b.n	800d7d0 <osMutexRelease+0x20>
 800d7f2:	46c0      	nop			; (mov r8, r8)
 800d7f4:	e000ed04 	.word	0xe000ed04

0800d7f8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800d7f8:	b510      	push	{r4, lr}
 800d7fa:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800d7fc:	2901      	cmp	r1, #1
 800d7fe:	d005      	beq.n	800d80c <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800d800:	2100      	movs	r1, #0
 800d802:	f000 fab7 	bl	800dd74 <xQueueCreateCountingSemaphore>
 800d806:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800d808:	0020      	movs	r0, r4
 800d80a:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800d80c:	2203      	movs	r2, #3
 800d80e:	2100      	movs	r1, #0
 800d810:	f000 fa8e 	bl	800dd30 <xQueueGenericCreate>
 800d814:	1e04      	subs	r4, r0, #0
 800d816:	d0f7      	beq.n	800d808 <osSemaphoreCreate+0x10>
 800d818:	2300      	movs	r3, #0
 800d81a:	2200      	movs	r2, #0
 800d81c:	2100      	movs	r1, #0
 800d81e:	f000 fab3 	bl	800dd88 <xQueueGenericSend>
 800d822:	e7f1      	b.n	800d808 <osSemaphoreCreate+0x10>

0800d824 <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d824:	2300      	movs	r3, #0
{
 800d826:	b500      	push	{lr}
 800d828:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;  
 800d82a:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d82c:	2800      	cmp	r0, #0
 800d82e:	d01e      	beq.n	800d86e <osSemaphoreWait+0x4a>
 800d830:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d834:	2b00      	cmp	r3, #0
 800d836:	d00b      	beq.n	800d850 <osSemaphoreWait+0x2c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d838:	aa01      	add	r2, sp, #4
 800d83a:	2100      	movs	r1, #0
 800d83c:	f000 fc1e 	bl	800e07c <xQueueReceiveFromISR>
 800d840:	2801      	cmp	r0, #1
 800d842:	d10c      	bne.n	800d85e <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d844:	9b01      	ldr	r3, [sp, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d10b      	bne.n	800d862 <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800d84a:	2000      	movs	r0, #0
}
 800d84c:	b003      	add	sp, #12
 800d84e:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d850:	000a      	movs	r2, r1
 800d852:	2300      	movs	r3, #0
 800d854:	2100      	movs	r1, #0
 800d856:	f000 fb75 	bl	800df44 <xQueueGenericReceive>
 800d85a:	2801      	cmp	r0, #1
 800d85c:	d0f5      	beq.n	800d84a <osSemaphoreWait+0x26>
      return osErrorOS;
 800d85e:	20ff      	movs	r0, #255	; 0xff
 800d860:	e7f4      	b.n	800d84c <osSemaphoreWait+0x28>
	portEND_SWITCHING_ISR(taskWoken);
 800d862:	2280      	movs	r2, #128	; 0x80
 800d864:	4b03      	ldr	r3, [pc, #12]	; (800d874 <osSemaphoreWait+0x50>)
 800d866:	0552      	lsls	r2, r2, #21
 800d868:	601a      	str	r2, [r3, #0]
  return osOK;
 800d86a:	2000      	movs	r0, #0
 800d86c:	e7ee      	b.n	800d84c <osSemaphoreWait+0x28>
    return osErrorParameter;
 800d86e:	2080      	movs	r0, #128	; 0x80
 800d870:	e7ec      	b.n	800d84c <osSemaphoreWait+0x28>
 800d872:	46c0      	nop			; (mov r8, r8)
 800d874:	e000ed04 	.word	0xe000ed04

0800d878 <osSemaphoreRelease>:
 800d878:	b510      	push	{r4, lr}
 800d87a:	f7ff ff99 	bl	800d7b0 <osMutexRelease>
 800d87e:	bd10      	pop	{r4, pc}

0800d880 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d880:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d882:	f001 f919 	bl	800eab8 <xTaskGetSchedulerState>
 800d886:	2801      	cmp	r0, #1
 800d888:	d001      	beq.n	800d88e <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d88a:	f001 fd33 	bl	800f2f4 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d88e:	bd10      	pop	{r4, pc}

0800d890 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d890:	b570      	push	{r4, r5, r6, lr}
 800d892:	0006      	movs	r6, r0

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d894:	2008      	movs	r0, #8
 800d896:	f001 fd65 	bl	800f364 <pvPortMalloc>
portBASE_TYPE xReturn = pdFAIL;
 800d89a:	2500      	movs	r5, #0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d89c:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );

	if( pxNewListItem != NULL )
 800d89e:	d00a      	beq.n	800d8b6 <FreeRTOS_CLIRegisterCommand+0x26>
	{
		taskENTER_CRITICAL();
 800d8a0:	f001 fce6 	bl	800f270 <vPortEnterCritical>
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d8a4:	4b05      	ldr	r3, [pc, #20]	; (800d8bc <FreeRTOS_CLIRegisterCommand+0x2c>)
			pxNewListItem->pxNext = NULL;
 800d8a6:	6065      	str	r5, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d8a8:	681a      	ldr	r2, [r3, #0]
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d8aa:	6026      	str	r6, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d8ac:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d8ae:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d8b0:	f001 fcea 	bl	800f288 <vPortExitCritical>

		xReturn = pdPASS;
 800d8b4:	3501      	adds	r5, #1
	}

	return xReturn;
}
 800d8b6:	0028      	movs	r0, r5
 800d8b8:	bd70      	pop	{r4, r5, r6, pc}
 800d8ba:	46c0      	nop			; (mov r8, r8)
 800d8bc:	200000c4 	.word	0x200000c4

0800d8c0 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8c2:	4657      	mov	r7, sl
 800d8c4:	46de      	mov	lr, fp
 800d8c6:	464e      	mov	r6, r9
 800d8c8:	4645      	mov	r5, r8
 800d8ca:	b5e0      	push	{r5, r6, r7, lr}
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d8cc:	4f34      	ldr	r7, [pc, #208]	; (800d9a0 <FreeRTOS_CLIProcessCommand+0xe0>)
{
 800d8ce:	0006      	movs	r6, r0
	if( pxCommand == NULL )
 800d8d0:	683b      	ldr	r3, [r7, #0]
{
 800d8d2:	468a      	mov	sl, r1
 800d8d4:	4693      	mov	fp, r2
	if( pxCommand == NULL )
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00e      	beq.n	800d8f8 <FreeRTOS_CLIProcessCommand+0x38>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	0032      	movs	r2, r6
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	4659      	mov	r1, fp
 800d8e2:	4650      	mov	r0, sl
 800d8e4:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	d100      	bne.n	800d8ec <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d8ea:	6038      	str	r0, [r7, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d8ec:	bc3c      	pop	{r2, r3, r4, r5}
 800d8ee:	4690      	mov	r8, r2
 800d8f0:	4699      	mov	r9, r3
 800d8f2:	46a2      	mov	sl, r4
 800d8f4:	46ab      	mov	fp, r5
 800d8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d8f8:	3320      	adds	r3, #32
 800d8fa:	4699      	mov	r9, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d8fc:	4c29      	ldr	r4, [pc, #164]	; (800d9a4 <FreeRTOS_CLIProcessCommand+0xe4>)
 800d8fe:	3404      	adds	r4, #4
 800d900:	603c      	str	r4, [r7, #0]
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d902:	6823      	ldr	r3, [r4, #0]
 800d904:	681d      	ldr	r5, [r3, #0]
 800d906:	4698      	mov	r8, r3
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d908:	0028      	movs	r0, r5
 800d90a:	f7f2 fc05 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d90e:	464a      	mov	r2, r9
 800d910:	5c33      	ldrb	r3, [r6, r0]
 800d912:	4393      	bics	r3, r2
 800d914:	d106      	bne.n	800d924 <FreeRTOS_CLIProcessCommand+0x64>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d916:	0002      	movs	r2, r0
 800d918:	0029      	movs	r1, r5
 800d91a:	0030      	movs	r0, r6
 800d91c:	f005 fc4e 	bl	80131bc <strncmp>
 800d920:	2800      	cmp	r0, #0
 800d922:	d00a      	beq.n	800d93a <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d924:	6864      	ldr	r4, [r4, #4]
 800d926:	603c      	str	r4, [r7, #0]
 800d928:	2c00      	cmp	r4, #0
 800d92a:	d1ea      	bne.n	800d902 <FreeRTOS_CLIProcessCommand+0x42>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d92c:	465a      	mov	r2, fp
 800d92e:	491e      	ldr	r1, [pc, #120]	; (800d9a8 <FreeRTOS_CLIProcessCommand+0xe8>)
 800d930:	4650      	mov	r0, sl
 800d932:	f005 fc54 	bl	80131de <strncpy>
		xReturn = pdFALSE;
 800d936:	2000      	movs	r0, #0
	return xReturn;
 800d938:	e7d8      	b.n	800d8ec <FreeRTOS_CLIProcessCommand+0x2c>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d93a:	4643      	mov	r3, r8
 800d93c:	250c      	movs	r5, #12
 800d93e:	575d      	ldrsb	r5, [r3, r5]
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	2d00      	cmp	r5, #0
 800d944:	db26      	blt.n	800d994 <FreeRTOS_CLIProcessCommand+0xd4>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d946:	2200      	movs	r2, #0
 800d948:	56b2      	ldrsb	r2, [r6, r2]
 800d94a:	2a00      	cmp	r2, #0
 800d94c:	d025      	beq.n	800d99a <FreeRTOS_CLIProcessCommand+0xda>
 800d94e:	0031      	movs	r1, r6
int8_t cParameters = 0;
 800d950:	2400      	movs	r4, #0
 800d952:	e005      	b.n	800d960 <FreeRTOS_CLIProcessCommand+0xa0>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d954:	2000      	movs	r0, #0
	while( *pcCommandString != 0x00 )
 800d956:	2200      	movs	r2, #0
		}

		pcCommandString++;
 800d958:	3101      	adds	r1, #1
	while( *pcCommandString != 0x00 )
 800d95a:	568a      	ldrsb	r2, [r1, r2]
 800d95c:	2a00      	cmp	r2, #0
 800d95e:	d007      	beq.n	800d970 <FreeRTOS_CLIProcessCommand+0xb0>
		if( ( *pcCommandString ) == ' ' )
 800d960:	2a20      	cmp	r2, #32
 800d962:	d1f7      	bne.n	800d954 <FreeRTOS_CLIProcessCommand+0x94>
			if( xLastCharacterWasSpace != pdTRUE )
 800d964:	2801      	cmp	r0, #1
 800d966:	d0f6      	beq.n	800d956 <FreeRTOS_CLIProcessCommand+0x96>
				cParameters++;
 800d968:	3401      	adds	r4, #1
 800d96a:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d96c:	2001      	movs	r0, #1
 800d96e:	e7f2      	b.n	800d956 <FreeRTOS_CLIProcessCommand+0x96>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d970:	2801      	cmp	r0, #1
 800d972:	d00c      	beq.n	800d98e <FreeRTOS_CLIProcessCommand+0xce>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800d974:	42a5      	cmp	r5, r4
 800d976:	d00d      	beq.n	800d994 <FreeRTOS_CLIProcessCommand+0xd4>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d0d7      	beq.n	800d92c <FreeRTOS_CLIProcessCommand+0x6c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d97c:	465a      	mov	r2, fp
 800d97e:	490b      	ldr	r1, [pc, #44]	; (800d9ac <FreeRTOS_CLIProcessCommand+0xec>)
 800d980:	4650      	mov	r0, sl
 800d982:	f005 fc2c 	bl	80131de <strncpy>
		pxCommand = NULL;
 800d986:	2300      	movs	r3, #0
 800d988:	2000      	movs	r0, #0
 800d98a:	603b      	str	r3, [r7, #0]
 800d98c:	e7ae      	b.n	800d8ec <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d98e:	3c01      	subs	r4, #1
 800d990:	b264      	sxtb	r4, r4
 800d992:	e7ef      	b.n	800d974 <FreeRTOS_CLIProcessCommand+0xb4>
	else if( pxCommand != NULL )
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1a0      	bne.n	800d8da <FreeRTOS_CLIProcessCommand+0x1a>
 800d998:	e7c8      	b.n	800d92c <FreeRTOS_CLIProcessCommand+0x6c>
int8_t cParameters = 0;
 800d99a:	2400      	movs	r4, #0
 800d99c:	e7ea      	b.n	800d974 <FreeRTOS_CLIProcessCommand+0xb4>
 800d99e:	46c0      	nop			; (mov r8, r8)
 800d9a0:	20001ed0 	.word	0x20001ed0
 800d9a4:	200000c4 	.word	0x200000c4
 800d9a8:	0801a498 	.word	0x0801a498
 800d9ac:	0801a440 	.word	0x0801a440

0800d9b0 <FreeRTOS_CLIGetOutputBuffer>:
}
 800d9b0:	4800      	ldr	r0, [pc, #0]	; (800d9b4 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800d9b2:	4770      	bx	lr
 800d9b4:	20001ee0 	.word	0x20001ee0

0800d9b8 <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800d9b8:	2300      	movs	r3, #0
{
 800d9ba:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800d9bc:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800d9be:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800d9c0:	2900      	cmp	r1, #0
 800d9c2:	d021      	beq.n	800da08 <FreeRTOS_CLIGetParameter+0x50>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	56c3      	ldrsb	r3, [r0, r3]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d105      	bne.n	800d9d8 <FreeRTOS_CLIGetParameter+0x20>
 800d9cc:	e01c      	b.n	800da08 <FreeRTOS_CLIGetParameter+0x50>
 800d9ce:	2300      	movs	r3, #0
			pcCommandString++;
 800d9d0:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d9d2:	56c3      	ldrsb	r3, [r0, r3]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d017      	beq.n	800da08 <FreeRTOS_CLIGetParameter+0x50>
 800d9d8:	2b20      	cmp	r3, #32
 800d9da:	d1f8      	bne.n	800d9ce <FreeRTOS_CLIGetParameter+0x16>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d9dc:	2300      	movs	r3, #0
			pcCommandString++;
 800d9de:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d9e0:	56c3      	ldrsb	r3, [r0, r3]
 800d9e2:	2b20      	cmp	r3, #32
 800d9e4:	d0fa      	beq.n	800d9dc <FreeRTOS_CLIGetParameter+0x24>
		if( *pcCommandString != 0x00 )
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d00e      	beq.n	800da08 <FreeRTOS_CLIGetParameter+0x50>
			uxParametersFound++;
 800d9ea:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800d9ec:	42a1      	cmp	r1, r4
 800d9ee:	d1e9      	bne.n	800d9c4 <FreeRTOS_CLIGetParameter+0xc>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d9f0:	2120      	movs	r1, #32
 800d9f2:	7803      	ldrb	r3, [r0, #0]
 800d9f4:	438b      	bics	r3, r1
 800d9f6:	d007      	beq.n	800da08 <FreeRTOS_CLIGetParameter+0x50>
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	2420      	movs	r4, #32
					( *pxParameterStringLength )++;
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800da00:	5cc1      	ldrb	r1, [r0, r3]
 800da02:	43a1      	bics	r1, r4
 800da04:	d1fa      	bne.n	800d9fc <FreeRTOS_CLIGetParameter+0x44>
 800da06:	e000      	b.n	800da0a <FreeRTOS_CLIGetParameter+0x52>
					pcReturn = NULL;
 800da08:	2000      	movs	r0, #0
}
 800da0a:	bd10      	pop	{r4, pc}

0800da0c <prvHelpCommand>:
{
 800da0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da0e:	46ce      	mov	lr, r9
 800da10:	4647      	mov	r7, r8
portBASE_TYPE xParameterStringLength1 = 0;
 800da12:	2300      	movs	r3, #0
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b083      	sub	sp, #12
 800da18:	0004      	movs	r4, r0
 800da1a:	000d      	movs	r5, r1
 800da1c:	0010      	movs	r0, r2
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800da1e:	2101      	movs	r1, #1
 800da20:	aa01      	add	r2, sp, #4
portBASE_TYPE xParameterStringLength1 = 0;
 800da22:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800da24:	f7ff ffc8 	bl	800d9b8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800da28:	2800      	cmp	r0, #0
 800da2a:	d024      	beq.n	800da76 <prvHelpCommand+0x6a>
 800da2c:	2206      	movs	r2, #6
 800da2e:	4931      	ldr	r1, [pc, #196]	; (800daf4 <prvHelpCommand+0xe8>)
 800da30:	f005 fbc4 	bl	80131bc <strncmp>
 800da34:	1e07      	subs	r7, r0, #0
 800da36:	d118      	bne.n	800da6a <prvHelpCommand+0x5e>
		if( str == NumOfParamsHelpStrings )
 800da38:	4b2f      	ldr	r3, [pc, #188]	; (800daf8 <prvHelpCommand+0xec>)
 800da3a:	4698      	mov	r8, r3
 800da3c:	791b      	ldrb	r3, [r3, #4]
 800da3e:	2b07      	cmp	r3, #7
 800da40:	d047      	beq.n	800dad2 <prvHelpCommand+0xc6>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800da42:	1c5a      	adds	r2, r3, #1
 800da44:	b2d2      	uxtb	r2, r2
 800da46:	4691      	mov	r9, r2
 800da48:	4642      	mov	r2, r8
 800da4a:	4649      	mov	r1, r9
 800da4c:	7111      	strb	r1, [r2, #4]
 800da4e:	4a2b      	ldr	r2, [pc, #172]	; (800dafc <prvHelpCommand+0xf0>)
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	5899      	ldr	r1, [r3, r2]
 800da54:	0020      	movs	r0, r4
 800da56:	002a      	movs	r2, r5
 800da58:	f005 fbc1 	bl	80131de <strncpy>
		if( str == NumOfParamsHelpStrings )
 800da5c:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800da5e:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800da60:	2b07      	cmp	r3, #7
 800da62:	d102      	bne.n	800da6a <prvHelpCommand+0x5e>
			xReturn = pdFALSE; str = 0;
 800da64:	4643      	mov	r3, r8
 800da66:	2600      	movs	r6, #0
 800da68:	711f      	strb	r7, [r3, #4]
}
 800da6a:	0030      	movs	r0, r6
 800da6c:	b003      	add	sp, #12
 800da6e:	bc0c      	pop	{r2, r3}
 800da70:	4690      	mov	r8, r2
 800da72:	4699      	mov	r9, r3
 800da74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800da76:	4f20      	ldr	r7, [pc, #128]	; (800daf8 <prvHelpCommand+0xec>)
 800da78:	68be      	ldr	r6, [r7, #8]
 800da7a:	2e00      	cmp	r6, #0
 800da7c:	d020      	beq.n	800dac0 <prvHelpCommand+0xb4>
 800da7e:	7b3b      	ldrb	r3, [r7, #12]
 800da80:	1c5a      	adds	r2, r3, #1
 800da82:	b2d2      	uxtb	r2, r2
 800da84:	4690      	mov	r8, r2
 800da86:	6832      	ldr	r2, [r6, #0]
 800da88:	6851      	ldr	r1, [r2, #4]
		if (counter > numOfBosCommands) {
 800da8a:	4a1d      	ldr	r2, [pc, #116]	; (800db00 <prvHelpCommand+0xf4>)
 800da8c:	7812      	ldrb	r2, [r2, #0]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d22a      	bcs.n	800dae8 <prvHelpCommand+0xdc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800da92:	002a      	movs	r2, r5
 800da94:	0020      	movs	r0, r4
 800da96:	3a08      	subs	r2, #8
 800da98:	3008      	adds	r0, #8
 800da9a:	f005 fba0 	bl	80131de <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800da9e:	1c60      	adds	r0, r4, #1
 800daa0:	4918      	ldr	r1, [pc, #96]	; (800db04 <prvHelpCommand+0xf8>)
 800daa2:	f005 fb83 	bl	80131ac <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800daa6:	2328      	movs	r3, #40	; 0x28
 800daa8:	7023      	strb	r3, [r4, #0]
 800daaa:	3301      	adds	r3, #1
 800daac:	71a3      	strb	r3, [r4, #6]
 800daae:	3b09      	subs	r3, #9
 800dab0:	71e3      	strb	r3, [r4, #7]
		counter++;
 800dab2:	4643      	mov	r3, r8
		pxCommand = pxCommand->pxNext;
 800dab4:	6876      	ldr	r6, [r6, #4]
		counter++;
 800dab6:	733b      	strb	r3, [r7, #12]
		pxCommand = pxCommand->pxNext;
 800dab8:	60be      	str	r6, [r7, #8]
			xReturn = pdTRUE;
 800daba:	1e73      	subs	r3, r6, #1
 800dabc:	419e      	sbcs	r6, r3
 800dabe:	e7d4      	b.n	800da6a <prvHelpCommand+0x5e>
			counter = 1;
 800dac0:	2301      	movs	r3, #1
			pxCommand = &xRegisteredCommands;
 800dac2:	4e11      	ldr	r6, [pc, #68]	; (800db08 <prvHelpCommand+0xfc>)
			counter = 1;
 800dac4:	733b      	strb	r3, [r7, #12]
			pxCommand = &xRegisteredCommands;
 800dac6:	3604      	adds	r6, #4
			counter = 1;
 800dac8:	3301      	adds	r3, #1
 800daca:	4698      	mov	r8, r3
			pxCommand = &xRegisteredCommands;
 800dacc:	60be      	str	r6, [r7, #8]
			counter = 1;
 800dace:	3b01      	subs	r3, #1
 800dad0:	e7d9      	b.n	800da86 <prvHelpCommand+0x7a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800dad2:	4642      	mov	r2, r8
 800dad4:	3b06      	subs	r3, #6
 800dad6:	7113      	strb	r3, [r2, #4]
 800dad8:	4b08      	ldr	r3, [pc, #32]	; (800dafc <prvHelpCommand+0xf0>)
 800dada:	002a      	movs	r2, r5
 800dadc:	6819      	ldr	r1, [r3, #0]
 800dade:	0020      	movs	r0, r4
 800dae0:	f005 fb7d 	bl	80131de <strncpy>
			xReturn = pdTRUE;
 800dae4:	2601      	movs	r6, #1
 800dae6:	e7c0      	b.n	800da6a <prvHelpCommand+0x5e>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800dae8:	002a      	movs	r2, r5
 800daea:	0020      	movs	r0, r4
 800daec:	f005 fb77 	bl	80131de <strncpy>
 800daf0:	e7df      	b.n	800dab2 <prvHelpCommand+0xa6>
 800daf2:	46c0      	nop			; (mov r8, r8)
 800daf4:	08018db4 	.word	0x08018db4
 800daf8:	20001ed0 	.word	0x20001ed0
 800dafc:	2000003c 	.word	0x2000003c
 800db00:	20006d30 	.word	0x20006d30
 800db04:	080175d8 	.word	0x080175d8
 800db08:	200000c4 	.word	0x200000c4

0800db0c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db0c:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800db0e:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db10:	3308      	adds	r3, #8
 800db12:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db14:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db16:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800db18:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800db1a:	4252      	negs	r2, r2
 800db1c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800db1e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800db20:	4770      	bx	lr
 800db22:	46c0      	nop			; (mov r8, r8)

0800db24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800db24:	2300      	movs	r3, #0
 800db26:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800db28:	4770      	bx	lr
 800db2a:	46c0      	nop			; (mov r8, r8)

0800db2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800db2c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800db2e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800db30:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800db32:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800db34:	689a      	ldr	r2, [r3, #8]
 800db36:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800db38:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800db3a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800db3c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800db3e:	3301      	adds	r3, #1
 800db40:	6003      	str	r3, [r0, #0]
}
 800db42:	4770      	bx	lr

0800db44 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db44:	0002      	movs	r2, r0
{
 800db46:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800db48:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db4a:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800db4c:	1c63      	adds	r3, r4, #1
 800db4e:	d101      	bne.n	800db54 <vListInsert+0x10>
 800db50:	e00d      	b.n	800db6e <vListInsert+0x2a>
 800db52:	001a      	movs	r2, r3
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db54:	6853      	ldr	r3, [r2, #4]
 800db56:	681d      	ldr	r5, [r3, #0]
 800db58:	42a5      	cmp	r5, r4
 800db5a:	d9fa      	bls.n	800db52 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800db5c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800db5e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800db60:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800db62:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800db64:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800db66:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800db68:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800db6a:	6003      	str	r3, [r0, #0]
}
 800db6c:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800db6e:	6902      	ldr	r2, [r0, #16]
 800db70:	6853      	ldr	r3, [r2, #4]
 800db72:	e7f3      	b.n	800db5c <vListInsert+0x18>

0800db74 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800db74:	6842      	ldr	r2, [r0, #4]
 800db76:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800db78:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800db7a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800db7c:	6881      	ldr	r1, [r0, #8]
 800db7e:	604a      	str	r2, [r1, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800db80:	685a      	ldr	r2, [r3, #4]
 800db82:	4282      	cmp	r2, r0
 800db84:	d100      	bne.n	800db88 <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800db86:	6059      	str	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800db88:	2200      	movs	r2, #0
 800db8a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	1e50      	subs	r0, r2, #1
 800db90:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800db92:	4770      	bx	lr

0800db94 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800db94:	b570      	push	{r4, r5, r6, lr}
 800db96:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db98:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800db9a:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db9c:	2a00      	cmp	r2, #0
 800db9e:	d107      	bne.n	800dbb0 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dba0:	6805      	ldr	r5, [r0, #0]
 800dba2:	2d00      	cmp	r5, #0
 800dba4:	d02d      	beq.n	800dc02 <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800dba6:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800dba8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dbaa:	3301      	adds	r3, #1
 800dbac:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800dbae:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800dbb0:	2d00      	cmp	r5, #0
 800dbb2:	d10e      	bne.n	800dbd2 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800dbb4:	6880      	ldr	r0, [r0, #8]
 800dbb6:	f005 f8ba 	bl	8012d2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800dbba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800dbbc:	68a3      	ldr	r3, [r4, #8]
 800dbbe:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dbc0:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800dbc2:	4463      	add	r3, ip
 800dbc4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d3ed      	bcc.n	800dba6 <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dbca:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800dbcc:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dbce:	60a3      	str	r3, [r4, #8]
 800dbd0:	e7ea      	b.n	800dba8 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbd2:	68c0      	ldr	r0, [r0, #12]
 800dbd4:	f005 f8ab 	bl	8012d2e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dbd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dbda:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dbdc:	425a      	negs	r2, r3
 800dbde:	68e3      	ldr	r3, [r4, #12]
 800dbe0:	189b      	adds	r3, r3, r2
 800dbe2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dbe4:	428b      	cmp	r3, r1
 800dbe6:	d203      	bcs.n	800dbf0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800dbe8:	6863      	ldr	r3, [r4, #4]
 800dbea:	469c      	mov	ip, r3
 800dbec:	4462      	add	r2, ip
 800dbee:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800dbf0:	2d02      	cmp	r5, #2
 800dbf2:	d1d8      	bne.n	800dba6 <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d0d5      	beq.n	800dba6 <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800dbfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dbfc:	3b01      	subs	r3, #1
 800dbfe:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc00:	e7d1      	b.n	800dba6 <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800dc02:	6840      	ldr	r0, [r0, #4]
 800dc04:	f000 ff98 	bl	800eb38 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800dc08:	6065      	str	r5, [r4, #4]
 800dc0a:	e7cd      	b.n	800dba8 <prvCopyDataToQueue+0x14>

0800dc0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc0c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800dc0e:	b510      	push	{r4, lr}
 800dc10:	000b      	movs	r3, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc12:	2a00      	cmp	r2, #0
 800dc14:	d008      	beq.n	800dc28 <prvCopyDataFromQueue+0x1c>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dc16:	68c1      	ldr	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dc18:	6844      	ldr	r4, [r0, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dc1a:	1889      	adds	r1, r1, r2
 800dc1c:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dc1e:	42a1      	cmp	r1, r4
 800dc20:	d203      	bcs.n	800dc2a <prvCopyDataFromQueue+0x1e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800dc22:	0018      	movs	r0, r3
 800dc24:	f005 f883 	bl	8012d2e <memcpy>
	}
}
 800dc28:	bd10      	pop	{r4, pc}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800dc2a:	6801      	ldr	r1, [r0, #0]
 800dc2c:	60c1      	str	r1, [r0, #12]
 800dc2e:	e7f8      	b.n	800dc22 <prvCopyDataFromQueue+0x16>

0800dc30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dc30:	b570      	push	{r4, r5, r6, lr}
 800dc32:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dc34:	f001 fb1c 	bl	800f270 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dc38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	dd1b      	ble.n	800dc76 <prvUnlockQueue+0x46>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d018      	beq.n	800dc76 <prvUnlockQueue+0x46>
 800dc44:	0025      	movs	r5, r4
 800dc46:	3524      	adds	r5, #36	; 0x24
 800dc48:	e008      	b.n	800dc5c <prvUnlockQueue+0x2c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800dc4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc4c:	3b01      	subs	r3, #1
 800dc4e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dc50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	dd0f      	ble.n	800dc76 <prvUnlockQueue+0x46>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d00c      	beq.n	800dc76 <prvUnlockQueue+0x46>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc5c:	0028      	movs	r0, r5
 800dc5e:	f000 feb7 	bl	800e9d0 <xTaskRemoveFromEventList>
 800dc62:	2800      	cmp	r0, #0
 800dc64:	d0f1      	beq.n	800dc4a <prvUnlockQueue+0x1a>
						vTaskMissedYield();
 800dc66:	f000 ff21 	bl	800eaac <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800dc6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dc70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	dcef      	bgt.n	800dc56 <prvUnlockQueue+0x26>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800dc76:	2301      	movs	r3, #1
 800dc78:	425b      	negs	r3, r3
 800dc7a:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800dc7c:	f001 fb04 	bl	800f288 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc80:	f001 faf6 	bl	800f270 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dc84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	dd1b      	ble.n	800dcc2 <prvUnlockQueue+0x92>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc8a:	6923      	ldr	r3, [r4, #16]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d018      	beq.n	800dcc2 <prvUnlockQueue+0x92>
 800dc90:	0025      	movs	r5, r4
 800dc92:	3510      	adds	r5, #16
 800dc94:	e008      	b.n	800dca8 <prvUnlockQueue+0x78>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800dc96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc98:	3b01      	subs	r3, #1
 800dc9a:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dc9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	dd0f      	ble.n	800dcc2 <prvUnlockQueue+0x92>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dca2:	6923      	ldr	r3, [r4, #16]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d00c      	beq.n	800dcc2 <prvUnlockQueue+0x92>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dca8:	0028      	movs	r0, r5
 800dcaa:	f000 fe91 	bl	800e9d0 <xTaskRemoveFromEventList>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d0f1      	beq.n	800dc96 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800dcb2:	f000 fefb 	bl	800eaac <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800dcb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dcbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	dcef      	bgt.n	800dca2 <prvUnlockQueue+0x72>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	425b      	negs	r3, r3
 800dcc6:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dcc8:	f001 fade 	bl	800f288 <vPortExitCritical>
}
 800dccc:	bd70      	pop	{r4, r5, r6, pc}
 800dcce:	46c0      	nop			; (mov r8, r8)

0800dcd0 <xQueueGenericReset>:
{
 800dcd0:	b570      	push	{r4, r5, r6, lr}
 800dcd2:	0004      	movs	r4, r0
 800dcd4:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800dcd6:	f001 facb 	bl	800f270 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800dcda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dcdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dcde:	6822      	ldr	r2, [r4, #0]
 800dce0:	434b      	muls	r3, r1
 800dce2:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800dce4:	1a5b      	subs	r3, r3, r1
 800dce6:	18d3      	adds	r3, r2, r3
 800dce8:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800dcea:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800dcec:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dcee:	2000      	movs	r0, #0
		pxQueue->xRxLock = queueUNLOCKED;
 800dcf0:	425b      	negs	r3, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dcf2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dcf4:	60a2      	str	r2, [r4, #8]
		pxQueue->xRxLock = queueUNLOCKED;
 800dcf6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800dcf8:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800dcfa:	2d00      	cmp	r5, #0
 800dcfc:	d10f      	bne.n	800dd1e <xQueueGenericReset+0x4e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcfe:	6923      	ldr	r3, [r4, #16]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d103      	bne.n	800dd0c <xQueueGenericReset+0x3c>
	taskEXIT_CRITICAL();
 800dd04:	f001 fac0 	bl	800f288 <vPortExitCritical>
}
 800dd08:	2001      	movs	r0, #1
 800dd0a:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800dd0c:	0020      	movs	r0, r4
 800dd0e:	3010      	adds	r0, #16
 800dd10:	f000 fe5e 	bl	800e9d0 <xTaskRemoveFromEventList>
 800dd14:	2801      	cmp	r0, #1
 800dd16:	d1f5      	bne.n	800dd04 <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
 800dd18:	f001 fa9e 	bl	800f258 <vPortYield>
 800dd1c:	e7f2      	b.n	800dd04 <xQueueGenericReset+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dd1e:	0020      	movs	r0, r4
 800dd20:	3010      	adds	r0, #16
 800dd22:	f7ff fef3 	bl	800db0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dd26:	0020      	movs	r0, r4
 800dd28:	3024      	adds	r0, #36	; 0x24
 800dd2a:	f7ff feef 	bl	800db0c <vListInitialise>
 800dd2e:	e7e9      	b.n	800dd04 <xQueueGenericReset+0x34>

0800dd30 <xQueueGenericCreate>:
{
 800dd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd32:	0006      	movs	r6, r0
 800dd34:	000d      	movs	r5, r1
 800dd36:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800dd38:	2900      	cmp	r1, #0
 800dd3a:	d009      	beq.n	800dd50 <xQueueGenericCreate+0x20>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd3c:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dd3e:	3055      	adds	r0, #85	; 0x55
 800dd40:	f001 fb10 	bl	800f364 <pvPortMalloc>
 800dd44:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dd46:	d013      	beq.n	800dd70 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800dd48:	0003      	movs	r3, r0
 800dd4a:	3354      	adds	r3, #84	; 0x54
 800dd4c:	6003      	str	r3, [r0, #0]
 800dd4e:	e005      	b.n	800dd5c <xQueueGenericCreate+0x2c>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dd50:	2054      	movs	r0, #84	; 0x54
 800dd52:	f001 fb07 	bl	800f364 <pvPortMalloc>
 800dd56:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dd58:	d00a      	beq.n	800dd70 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dd5a:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800dd5c:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800dd5e:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dd60:	2101      	movs	r1, #1
 800dd62:	0020      	movs	r0, r4
 800dd64:	f7ff ffb4 	bl	800dcd0 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800dd68:	2350      	movs	r3, #80	; 0x50
 800dd6a:	54e7      	strb	r7, [r4, r3]
}
 800dd6c:	0020      	movs	r0, r4
 800dd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
QueueHandle_t xReturn = NULL;
 800dd70:	2400      	movs	r4, #0
 800dd72:	e7fb      	b.n	800dd6c <xQueueGenericCreate+0x3c>

0800dd74 <xQueueCreateCountingSemaphore>:
	{
 800dd74:	b510      	push	{r4, lr}
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dd76:	2202      	movs	r2, #2
	{
 800dd78:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	f7ff ffd8 	bl	800dd30 <xQueueGenericCreate>
		if( xHandle != NULL )
 800dd80:	2800      	cmp	r0, #0
 800dd82:	d000      	beq.n	800dd86 <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dd84:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800dd86:	bd10      	pop	{r4, pc}

0800dd88 <xQueueGenericSend>:
{
 800dd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd8a:	46c6      	mov	lr, r8
 800dd8c:	0004      	movs	r4, r0
 800dd8e:	b500      	push	{lr}
 800dd90:	b084      	sub	sp, #16
 800dd92:	9201      	str	r2, [sp, #4]
 800dd94:	001e      	movs	r6, r3
 800dd96:	4688      	mov	r8, r1
		taskENTER_CRITICAL();
 800dd98:	f001 fa6a 	bl	800f270 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dda0:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800dda2:	2700      	movs	r7, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d330      	bcc.n	800de0a <xQueueGenericSend+0x82>
 800dda8:	2e02      	cmp	r6, #2
 800ddaa:	d02e      	beq.n	800de0a <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddac:	9b01      	ldr	r3, [sp, #4]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d052      	beq.n	800de58 <xQueueGenericSend+0xd0>
				else if( xEntryTimeSet == pdFALSE )
 800ddb2:	2d00      	cmp	r5, #0
 800ddb4:	d03a      	beq.n	800de2c <xQueueGenericSend+0xa4>
		taskEXIT_CRITICAL();
 800ddb6:	f001 fa67 	bl	800f288 <vPortExitCritical>
		vTaskSuspendAll();
 800ddba:	f000 fc0f 	bl	800e5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ddbe:	f001 fa57 	bl	800f270 <vPortEnterCritical>
 800ddc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	d100      	bne.n	800ddca <xQueueGenericSend+0x42>
 800ddc8:	6467      	str	r7, [r4, #68]	; 0x44
 800ddca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ddcc:	3301      	adds	r3, #1
 800ddce:	d100      	bne.n	800ddd2 <xQueueGenericSend+0x4a>
 800ddd0:	64a7      	str	r7, [r4, #72]	; 0x48
 800ddd2:	f001 fa59 	bl	800f288 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ddd6:	a901      	add	r1, sp, #4
 800ddd8:	a802      	add	r0, sp, #8
 800ddda:	f000 fe3b 	bl	800ea54 <xTaskCheckForTimeOut>
 800ddde:	2800      	cmp	r0, #0
 800dde0:	d13e      	bne.n	800de60 <xQueueGenericSend+0xd8>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dde2:	f001 fa45 	bl	800f270 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dde6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dde8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d022      	beq.n	800de34 <xQueueGenericSend+0xac>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ddee:	f001 fa4b 	bl	800f288 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800ddf2:	0020      	movs	r0, r4
 800ddf4:	f7ff ff1c 	bl	800dc30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ddf8:	f000 fc8e 	bl	800e718 <xTaskResumeAll>
 800ddfc:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800ddfe:	f001 fa37 	bl	800f270 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800de06:	4293      	cmp	r3, r2
 800de08:	d2ce      	bcs.n	800dda8 <xQueueGenericSend+0x20>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de0a:	0032      	movs	r2, r6
 800de0c:	4641      	mov	r1, r8
 800de0e:	0020      	movs	r0, r4
 800de10:	f7ff fec0 	bl	800db94 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de16:	2b00      	cmp	r3, #0
 800de18:	d129      	bne.n	800de6e <xQueueGenericSend+0xe6>
					else if( xYieldRequired != pdFALSE )
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d12d      	bne.n	800de7a <xQueueGenericSend+0xf2>
				taskEXIT_CRITICAL();
 800de1e:	f001 fa33 	bl	800f288 <vPortExitCritical>
				return pdPASS;
 800de22:	2001      	movs	r0, #1
}
 800de24:	b004      	add	sp, #16
 800de26:	bc04      	pop	{r2}
 800de28:	4690      	mov	r8, r2
 800de2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vTaskSetTimeOutState( &xTimeOut );
 800de2c:	a802      	add	r0, sp, #8
 800de2e:	f000 fe05 	bl	800ea3c <vTaskSetTimeOutState>
 800de32:	e7c0      	b.n	800ddb6 <xQueueGenericSend+0x2e>
	taskEXIT_CRITICAL();
 800de34:	f001 fa28 	bl	800f288 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800de38:	0020      	movs	r0, r4
 800de3a:	9901      	ldr	r1, [sp, #4]
 800de3c:	3010      	adds	r0, #16
 800de3e:	f000 fd99 	bl	800e974 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de42:	0020      	movs	r0, r4
 800de44:	f7ff fef4 	bl	800dc30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de48:	f000 fc66 	bl	800e718 <xTaskResumeAll>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d1d5      	bne.n	800ddfc <xQueueGenericSend+0x74>
					portYIELD_WITHIN_API();
 800de50:	f001 fa02 	bl	800f258 <vPortYield>
 800de54:	2501      	movs	r5, #1
 800de56:	e7d2      	b.n	800ddfe <xQueueGenericSend+0x76>
					taskEXIT_CRITICAL();
 800de58:	f001 fa16 	bl	800f288 <vPortExitCritical>
					return errQUEUE_FULL;
 800de5c:	2000      	movs	r0, #0
 800de5e:	e7e1      	b.n	800de24 <xQueueGenericSend+0x9c>
			prvUnlockQueue( pxQueue );
 800de60:	0020      	movs	r0, r4
 800de62:	f7ff fee5 	bl	800dc30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de66:	f000 fc57 	bl	800e718 <xTaskResumeAll>
			return errQUEUE_FULL;
 800de6a:	2000      	movs	r0, #0
 800de6c:	e7da      	b.n	800de24 <xQueueGenericSend+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800de6e:	0020      	movs	r0, r4
 800de70:	3024      	adds	r0, #36	; 0x24
 800de72:	f000 fdad 	bl	800e9d0 <xTaskRemoveFromEventList>
 800de76:	2801      	cmp	r0, #1
 800de78:	d1d1      	bne.n	800de1e <xQueueGenericSend+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 800de7a:	f001 f9ed 	bl	800f258 <vPortYield>
 800de7e:	e7ce      	b.n	800de1e <xQueueGenericSend+0x96>

0800de80 <xQueueGenericSendFromISR>:
{
 800de80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de82:	46ce      	mov	lr, r9
 800de84:	4647      	mov	r7, r8
 800de86:	0004      	movs	r4, r0
 800de88:	b580      	push	{r7, lr}
 800de8a:	4691      	mov	r9, r2
 800de8c:	001d      	movs	r5, r3
 800de8e:	4688      	mov	r8, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de90:	f001 fa04 	bl	800f29c <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de96:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de98:	0007      	movs	r7, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d30a      	bcc.n	800deb4 <xQueueGenericSendFromISR+0x34>
			xReturn = errQUEUE_FULL;
 800de9e:	2600      	movs	r6, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dea0:	2d02      	cmp	r5, #2
 800dea2:	d007      	beq.n	800deb4 <xQueueGenericSendFromISR+0x34>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800dea4:	0038      	movs	r0, r7
 800dea6:	f001 f9ff 	bl	800f2a8 <vClearInterruptMaskFromISR>
}
 800deaa:	0030      	movs	r0, r6
 800deac:	bc0c      	pop	{r2, r3}
 800deae:	4690      	mov	r8, r2
 800deb0:	4699      	mov	r9, r3
 800deb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800deb4:	002a      	movs	r2, r5
 800deb6:	4641      	mov	r1, r8
 800deb8:	0020      	movs	r0, r4
 800deba:	f7ff fe6b 	bl	800db94 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800debe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dec0:	3301      	adds	r3, #1
 800dec2:	d004      	beq.n	800dece <xQueueGenericSendFromISR+0x4e>
				++( pxQueue->xTxLock );
 800dec4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dec6:	3301      	adds	r3, #1
 800dec8:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800deca:	2601      	movs	r6, #1
 800decc:	e7ea      	b.n	800dea4 <xQueueGenericSendFromISR+0x24>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d0fa      	beq.n	800deca <xQueueGenericSendFromISR+0x4a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ded4:	0020      	movs	r0, r4
 800ded6:	3024      	adds	r0, #36	; 0x24
 800ded8:	f000 fd7a 	bl	800e9d0 <xTaskRemoveFromEventList>
 800dedc:	2800      	cmp	r0, #0
 800dede:	d0f4      	beq.n	800deca <xQueueGenericSendFromISR+0x4a>
							if( pxHigherPriorityTaskWoken != NULL )
 800dee0:	464b      	mov	r3, r9
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d0f1      	beq.n	800deca <xQueueGenericSendFromISR+0x4a>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dee6:	2301      	movs	r3, #1
 800dee8:	464a      	mov	r2, r9
			xReturn = pdPASS;
 800deea:	2601      	movs	r6, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800deec:	6013      	str	r3, [r2, #0]
 800deee:	e7d9      	b.n	800dea4 <xQueueGenericSendFromISR+0x24>

0800def0 <xQueueGiveFromISR>:
{
 800def0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def2:	0004      	movs	r4, r0
 800def4:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800def6:	f001 f9d1 	bl	800f29c <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800defa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800defc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800defe:	0006      	movs	r6, r0
			xReturn = errQUEUE_FULL;
 800df00:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800df02:	4293      	cmp	r3, r2
 800df04:	d209      	bcs.n	800df1a <xQueueGiveFromISR+0x2a>
			++( pxQueue->uxMessagesWaiting );
 800df06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df08:	3301      	adds	r3, #1
 800df0a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800df0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df0e:	3301      	adds	r3, #1
 800df10:	d008      	beq.n	800df24 <xQueueGiveFromISR+0x34>
				++( pxQueue->xTxLock );
 800df12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df14:	3301      	adds	r3, #1
 800df16:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800df18:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800df1a:	0030      	movs	r0, r6
 800df1c:	f001 f9c4 	bl	800f2a8 <vClearInterruptMaskFromISR>
}
 800df20:	0028      	movs	r0, r5
 800df22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df26:	2b00      	cmp	r3, #0
 800df28:	d0f6      	beq.n	800df18 <xQueueGiveFromISR+0x28>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df2a:	0020      	movs	r0, r4
 800df2c:	3024      	adds	r0, #36	; 0x24
 800df2e:	f000 fd4f 	bl	800e9d0 <xTaskRemoveFromEventList>
 800df32:	2800      	cmp	r0, #0
 800df34:	d0f0      	beq.n	800df18 <xQueueGiveFromISR+0x28>
							if( pxHigherPriorityTaskWoken != NULL )
 800df36:	2f00      	cmp	r7, #0
 800df38:	d0ee      	beq.n	800df18 <xQueueGiveFromISR+0x28>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df3a:	2301      	movs	r3, #1
			xReturn = pdPASS;
 800df3c:	2501      	movs	r5, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df3e:	603b      	str	r3, [r7, #0]
 800df40:	e7eb      	b.n	800df1a <xQueueGiveFromISR+0x2a>
 800df42:	46c0      	nop			; (mov r8, r8)

0800df44 <xQueueGenericReceive>:
{
 800df44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df46:	46c6      	mov	lr, r8
 800df48:	0004      	movs	r4, r0
 800df4a:	b500      	push	{lr}
 800df4c:	b084      	sub	sp, #16
 800df4e:	4698      	mov	r8, r3
 800df50:	000f      	movs	r7, r1
 800df52:	9201      	str	r2, [sp, #4]
		taskENTER_CRITICAL();
 800df54:	f001 f98c 	bl	800f270 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d148      	bne.n	800dff0 <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800df5e:	9b01      	ldr	r3, [sp, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d06a      	beq.n	800e03a <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df64:	0026      	movs	r6, r4
					vTaskSetTimeOutState( &xTimeOut );
 800df66:	a802      	add	r0, sp, #8
 800df68:	f000 fd68 	bl	800ea3c <vTaskSetTimeOutState>
		prvLockQueue( pxQueue );
 800df6c:	2500      	movs	r5, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df6e:	3624      	adds	r6, #36	; 0x24
 800df70:	e017      	b.n	800dfa2 <xQueueGenericReceive+0x5e>
	taskEXIT_CRITICAL();
 800df72:	f001 f989 	bl	800f288 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df76:	6823      	ldr	r3, [r4, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d056      	beq.n	800e02a <xQueueGenericReceive+0xe6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df7c:	9901      	ldr	r1, [sp, #4]
 800df7e:	0030      	movs	r0, r6
 800df80:	f000 fcf8 	bl	800e974 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df84:	0020      	movs	r0, r4
 800df86:	f7ff fe53 	bl	800dc30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df8a:	f000 fbc5 	bl	800e718 <xTaskResumeAll>
 800df8e:	2800      	cmp	r0, #0
 800df90:	d048      	beq.n	800e024 <xQueueGenericReceive+0xe0>
		taskENTER_CRITICAL();
 800df92:	f001 f96d 	bl	800f270 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d129      	bne.n	800dff0 <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800df9c:	9b01      	ldr	r3, [sp, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d04b      	beq.n	800e03a <xQueueGenericReceive+0xf6>
		taskEXIT_CRITICAL();
 800dfa2:	f001 f971 	bl	800f288 <vPortExitCritical>
		vTaskSuspendAll();
 800dfa6:	f000 fb19 	bl	800e5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfaa:	f001 f961 	bl	800f270 <vPortEnterCritical>
 800dfae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	d100      	bne.n	800dfb6 <xQueueGenericReceive+0x72>
 800dfb4:	6465      	str	r5, [r4, #68]	; 0x44
 800dfb6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dfb8:	3301      	adds	r3, #1
 800dfba:	d100      	bne.n	800dfbe <xQueueGenericReceive+0x7a>
 800dfbc:	64a5      	str	r5, [r4, #72]	; 0x48
 800dfbe:	f001 f963 	bl	800f288 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfc2:	a901      	add	r1, sp, #4
 800dfc4:	a802      	add	r0, sp, #8
 800dfc6:	f000 fd45 	bl	800ea54 <xTaskCheckForTimeOut>
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	d13c      	bne.n	800e048 <xQueueGenericReceive+0x104>
	taskENTER_CRITICAL();
 800dfce:	f001 f94f 	bl	800f270 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dfd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d0cc      	beq.n	800df72 <xQueueGenericReceive+0x2e>
	taskEXIT_CRITICAL();
 800dfd8:	f001 f956 	bl	800f288 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800dfdc:	0020      	movs	r0, r4
 800dfde:	f7ff fe27 	bl	800dc30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dfe2:	f000 fb99 	bl	800e718 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800dfe6:	f001 f943 	bl	800f270 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dfea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d0d5      	beq.n	800df9c <xQueueGenericReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dff0:	0039      	movs	r1, r7
 800dff2:	0020      	movs	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800dff4:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dff6:	f7ff fe09 	bl	800dc0c <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800dffa:	4643      	mov	r3, r8
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d12a      	bne.n	800e056 <xQueueGenericReceive+0x112>
					--( pxQueue->uxMessagesWaiting );
 800e000:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e002:	3b01      	subs	r3, #1
 800e004:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e006:	6823      	ldr	r3, [r4, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d033      	beq.n	800e074 <xQueueGenericReceive+0x130>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e00c:	6923      	ldr	r3, [r4, #16]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d025      	beq.n	800e05e <xQueueGenericReceive+0x11a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e012:	0020      	movs	r0, r4
 800e014:	3010      	adds	r0, #16
 800e016:	f000 fcdb 	bl	800e9d0 <xTaskRemoveFromEventList>
 800e01a:	2801      	cmp	r0, #1
 800e01c:	d11f      	bne.n	800e05e <xQueueGenericReceive+0x11a>
							queueYIELD_IF_USING_PREEMPTION();
 800e01e:	f001 f91b 	bl	800f258 <vPortYield>
 800e022:	e01c      	b.n	800e05e <xQueueGenericReceive+0x11a>
					portYIELD_WITHIN_API();
 800e024:	f001 f918 	bl	800f258 <vPortYield>
 800e028:	e7b3      	b.n	800df92 <xQueueGenericReceive+0x4e>
						taskENTER_CRITICAL();
 800e02a:	f001 f921 	bl	800f270 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e02e:	6860      	ldr	r0, [r4, #4]
 800e030:	f000 fd4e 	bl	800ead0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800e034:	f001 f928 	bl	800f288 <vPortExitCritical>
 800e038:	e7a0      	b.n	800df7c <xQueueGenericReceive+0x38>
					taskEXIT_CRITICAL();
 800e03a:	f001 f925 	bl	800f288 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e03e:	2000      	movs	r0, #0
}
 800e040:	b004      	add	sp, #16
 800e042:	bc04      	pop	{r2}
 800e044:	4690      	mov	r8, r2
 800e046:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 800e048:	0020      	movs	r0, r4
 800e04a:	f7ff fdf1 	bl	800dc30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e04e:	f000 fb63 	bl	800e718 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800e052:	2000      	movs	r0, #0
 800e054:	e7f4      	b.n	800e040 <xQueueGenericReceive+0xfc>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e056:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e058:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d103      	bne.n	800e066 <xQueueGenericReceive+0x122>
				taskEXIT_CRITICAL();
 800e05e:	f001 f913 	bl	800f288 <vPortExitCritical>
				return pdPASS;
 800e062:	2001      	movs	r0, #1
 800e064:	e7ec      	b.n	800e040 <xQueueGenericReceive+0xfc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e066:	0020      	movs	r0, r4
 800e068:	3024      	adds	r0, #36	; 0x24
 800e06a:	f000 fcb1 	bl	800e9d0 <xTaskRemoveFromEventList>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d0f5      	beq.n	800e05e <xQueueGenericReceive+0x11a>
 800e072:	e7d4      	b.n	800e01e <xQueueGenericReceive+0xda>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e074:	f000 fe40 	bl	800ecf8 <pvTaskIncrementMutexHeldCount>
 800e078:	6060      	str	r0, [r4, #4]
 800e07a:	e7c7      	b.n	800e00c <xQueueGenericReceive+0xc8>

0800e07c <xQueueReceiveFromISR>:
{
 800e07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e07e:	46c6      	mov	lr, r8
 800e080:	0004      	movs	r4, r0
 800e082:	b500      	push	{lr}
 800e084:	000f      	movs	r7, r1
 800e086:	4690      	mov	r8, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e088:	f001 f908 	bl	800f29c <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e08c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e08e:	0006      	movs	r6, r0
			xReturn = pdFAIL;
 800e090:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e092:	2b00      	cmp	r3, #0
 800e094:	d106      	bne.n	800e0a4 <xQueueReceiveFromISR+0x28>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e096:	0030      	movs	r0, r6
 800e098:	f001 f906 	bl	800f2a8 <vClearInterruptMaskFromISR>
}
 800e09c:	0028      	movs	r0, r5
 800e09e:	bc04      	pop	{r2}
 800e0a0:	4690      	mov	r8, r2
 800e0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e0a4:	0039      	movs	r1, r7
 800e0a6:	0020      	movs	r0, r4
 800e0a8:	f7ff fdb0 	bl	800dc0c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e0ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e0b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	d004      	beq.n	800e0c2 <xQueueReceiveFromISR+0x46>
				++( pxQueue->xRxLock );
 800e0b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800e0be:	2501      	movs	r5, #1
 800e0c0:	e7e9      	b.n	800e096 <xQueueReceiveFromISR+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0c2:	6923      	ldr	r3, [r4, #16]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d0fa      	beq.n	800e0be <xQueueReceiveFromISR+0x42>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0c8:	0020      	movs	r0, r4
 800e0ca:	3010      	adds	r0, #16
 800e0cc:	f000 fc80 	bl	800e9d0 <xTaskRemoveFromEventList>
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d0f4      	beq.n	800e0be <xQueueReceiveFromISR+0x42>
						if( pxHigherPriorityTaskWoken != NULL )
 800e0d4:	4643      	mov	r3, r8
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d0f1      	beq.n	800e0be <xQueueReceiveFromISR+0x42>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	4642      	mov	r2, r8
			xReturn = pdPASS;
 800e0de:	2501      	movs	r5, #1
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e0e0:	6013      	str	r3, [r2, #0]
 800e0e2:	e7d8      	b.n	800e096 <xQueueReceiveFromISR+0x1a>

0800e0e4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0e4:	2300      	movs	r3, #0
	{
 800e0e6:	b570      	push	{r4, r5, r6, lr}
 800e0e8:	4d06      	ldr	r5, [pc, #24]	; (800e104 <vQueueAddToRegistry+0x20>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e0ea:	00dc      	lsls	r4, r3, #3
 800e0ec:	192a      	adds	r2, r5, r4
 800e0ee:	6816      	ldr	r6, [r2, #0]
 800e0f0:	2e00      	cmp	r6, #0
 800e0f2:	d003      	beq.n	800e0fc <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	2b08      	cmp	r3, #8
 800e0f8:	d1f7      	bne.n	800e0ea <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e0fa:	bd70      	pop	{r4, r5, r6, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e0fc:	5129      	str	r1, [r5, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e0fe:	6050      	str	r0, [r2, #4]
				break;
 800e100:	e7fb      	b.n	800e0fa <vQueueAddToRegistry+0x16>
 800e102:	46c0      	nop			; (mov r8, r8)
 800e104:	2000726c 	.word	0x2000726c

0800e108 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e108:	b570      	push	{r4, r5, r6, lr}
 800e10a:	0004      	movs	r4, r0
 800e10c:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e10e:	f001 f8af 	bl	800f270 <vPortEnterCritical>
 800e112:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e114:	3301      	adds	r3, #1
 800e116:	d101      	bne.n	800e11c <vQueueWaitForMessageRestricted+0x14>
 800e118:	2300      	movs	r3, #0
 800e11a:	6463      	str	r3, [r4, #68]	; 0x44
 800e11c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e11e:	3301      	adds	r3, #1
 800e120:	d101      	bne.n	800e126 <vQueueWaitForMessageRestricted+0x1e>
 800e122:	2300      	movs	r3, #0
 800e124:	64a3      	str	r3, [r4, #72]	; 0x48
 800e126:	f001 f8af 	bl	800f288 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e12a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d104      	bne.n	800e13a <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e130:	0020      	movs	r0, r4
 800e132:	0029      	movs	r1, r5
 800e134:	3024      	adds	r0, #36	; 0x24
 800e136:	f000 fc39 	bl	800e9ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e13a:	0020      	movs	r0, r4
 800e13c:	f7ff fd78 	bl	800dc30 <prvUnlockQueue>
	}
 800e140:	bd70      	pop	{r4, r5, r6, pc}
 800e142:	46c0      	nop			; (mov r8, r8)

0800e144 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e144:	b510      	push	{r4, lr}
 800e146:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e148:	f005 f830 	bl	80131ac <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e14c:	0020      	movs	r0, r4
 800e14e:	f7f1 ffe3 	bl	8000118 <strlen>
 800e152:	0003      	movs	r3, r0
 800e154:	280b      	cmp	r0, #11
 800e156:	d808      	bhi.n	800e16a <prvWriteNameToBuffer+0x26>
 800e158:	0022      	movs	r2, r4
		{
			pcBuffer[ x ] = ' ';
 800e15a:	2320      	movs	r3, #32
 800e15c:	1820      	adds	r0, r4, r0
 800e15e:	320c      	adds	r2, #12
 800e160:	7003      	strb	r3, [r0, #0]
 800e162:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e164:	4290      	cmp	r0, r2
 800e166:	d1fb      	bne.n	800e160 <prvWriteNameToBuffer+0x1c>
 800e168:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e16a:	18e0      	adds	r0, r4, r3
 800e16c:	2300      	movs	r3, #0
 800e16e:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e170:	bd10      	pop	{r4, pc}
 800e172:	46c0      	nop			; (mov r8, r8)

0800e174 <prvListTaskWithinSingleList.part.1>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e174:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e176:	46d6      	mov	lr, sl
 800e178:	464f      	mov	r7, r9
 800e17a:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e17c:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e17e:	b5c0      	push	{r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e180:	685f      	ldr	r7, [r3, #4]
 800e182:	2308      	movs	r3, #8
 800e184:	469c      	mov	ip, r3
 800e186:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e188:	4692      	mov	sl, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e18a:	604f      	str	r7, [r1, #4]
 800e18c:	4567      	cmp	r7, ip
 800e18e:	d042      	beq.n	800e216 <prvListTaskWithinSingleList.part.1+0xa2>
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	0005      	movs	r5, r0
 800e194:	4698      	mov	r8, r3
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e196:	2302      	movs	r3, #2
	UBaseType_t uxTask = 0;
 800e198:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e19a:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e19c:	687f      	ldr	r7, [r7, #4]
 800e19e:	604f      	str	r7, [r1, #4]
 800e1a0:	45bc      	cmp	ip, r7
 800e1a2:	d035      	beq.n	800e210 <prvListTaskWithinSingleList.part.1+0x9c>
 800e1a4:	68fe      	ldr	r6, [r7, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e1a6:	0033      	movs	r3, r6
 800e1a8:	3334      	adds	r3, #52	; 0x34
 800e1aa:	606b      	str	r3, [r5, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e1ac:	6c73      	ldr	r3, [r6, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e1ae:	602e      	str	r6, [r5, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e1b0:	60ab      	str	r3, [r5, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e1b2:	4653      	mov	r3, sl
 800e1b4:	732b      	strb	r3, [r5, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e1b6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e1b8:	612b      	str	r3, [r5, #16]
					if( eState == eSuspended )
 800e1ba:	4653      	mov	r3, sl
 800e1bc:	2b03      	cmp	r3, #3
 800e1be:	d018      	beq.n	800e1f2 <prvListTaskWithinSingleList.part.1+0x7e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e1c0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800e1c2:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e1c4:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e1c6:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e1c8:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e1ca:	7813      	ldrb	r3, [r2, #0]
 800e1cc:	2ba5      	cmp	r3, #165	; 0xa5
 800e1ce:	d11d      	bne.n	800e20c <prvListTaskWithinSingleList.part.1+0x98>
	uint32_t ulCount = 0U;
 800e1d0:	2300      	movs	r3, #0
			ulCount++;
 800e1d2:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e1d4:	5cd4      	ldrb	r4, [r2, r3]
 800e1d6:	2ca5      	cmp	r4, #165	; 0xa5
 800e1d8:	d0fb      	beq.n	800e1d2 <prvListTaskWithinSingleList.part.1+0x5e>
 800e1da:	089b      	lsrs	r3, r3, #2
 800e1dc:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e1de:	83ab      	strh	r3, [r5, #28]
				uxTask++;
 800e1e0:	3001      	adds	r0, #1
 800e1e2:	3520      	adds	r5, #32
			} while( pxNextTCB != pxFirstTCB );
 800e1e4:	45b0      	cmp	r8, r6
 800e1e6:	d1d9      	bne.n	800e19c <prvListTaskWithinSingleList.part.1+0x28>
	}
 800e1e8:	bc1c      	pop	{r2, r3, r4}
 800e1ea:	4690      	mov	r8, r2
 800e1ec:	4699      	mov	r9, r3
 800e1ee:	46a2      	mov	sl, r4
 800e1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e1f2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d0e3      	beq.n	800e1c0 <prvListTaskWithinSingleList.part.1+0x4c>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e1f8:	464b      	mov	r3, r9
 800e1fa:	732b      	strb	r3, [r5, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e1fc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800e1fe:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e200:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e202:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e204:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e206:	7813      	ldrb	r3, [r2, #0]
 800e208:	2ba5      	cmp	r3, #165	; 0xa5
 800e20a:	d0e1      	beq.n	800e1d0 <prvListTaskWithinSingleList.part.1+0x5c>
 800e20c:	2300      	movs	r3, #0
 800e20e:	e7e6      	b.n	800e1de <prvListTaskWithinSingleList.part.1+0x6a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e210:	68cf      	ldr	r7, [r1, #12]
 800e212:	604f      	str	r7, [r1, #4]
 800e214:	e7c6      	b.n	800e1a4 <prvListTaskWithinSingleList.part.1+0x30>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e216:	68cf      	ldr	r7, [r1, #12]
 800e218:	e7ba      	b.n	800e190 <prvListTaskWithinSingleList.part.1+0x1c>
 800e21a:	46c0      	nop			; (mov r8, r8)

0800e21c <prvResetNextTaskUnblockTime.part.2>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e21c:	4b03      	ldr	r3, [pc, #12]	; (800e22c <prvResetNextTaskUnblockTime.part.2+0x10>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	685a      	ldr	r2, [r3, #4]
 800e226:	4b02      	ldr	r3, [pc, #8]	; (800e230 <prvResetNextTaskUnblockTime.part.2+0x14>)
 800e228:	601a      	str	r2, [r3, #0]
}
 800e22a:	4770      	bx	lr
 800e22c:	20002144 	.word	0x20002144
 800e230:	200000d0 	.word	0x200000d0

0800e234 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e234:	4b0c      	ldr	r3, [pc, #48]	; (800e268 <prvAddCurrentTaskToDelayedList+0x34>)
{
 800e236:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e238:	685a      	ldr	r2, [r3, #4]
{
 800e23a:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e23c:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800e23e:	689a      	ldr	r2, [r3, #8]
 800e240:	4282      	cmp	r2, r0
 800e242:	d80a      	bhi.n	800e25a <prvAddCurrentTaskToDelayedList+0x26>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e244:	6818      	ldr	r0, [r3, #0]
 800e246:	6859      	ldr	r1, [r3, #4]
 800e248:	3104      	adds	r1, #4
 800e24a:	f7ff fc7b 	bl	800db44 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e24e:	4b07      	ldr	r3, [pc, #28]	; (800e26c <prvAddCurrentTaskToDelayedList+0x38>)
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	42a2      	cmp	r2, r4
 800e254:	d900      	bls.n	800e258 <prvAddCurrentTaskToDelayedList+0x24>
			xNextTaskUnblockTime = xTimeToWake;
 800e256:	601c      	str	r4, [r3, #0]
}
 800e258:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e25a:	68d8      	ldr	r0, [r3, #12]
 800e25c:	6859      	ldr	r1, [r3, #4]
 800e25e:	3104      	adds	r1, #4
 800e260:	f7ff fc70 	bl	800db44 <vListInsert>
 800e264:	e7f8      	b.n	800e258 <prvAddCurrentTaskToDelayedList+0x24>
 800e266:	46c0      	nop			; (mov r8, r8)
 800e268:	20002144 	.word	0x20002144
 800e26c:	200000d0 	.word	0x200000d0

0800e270 <vTaskSwitchContext.part.5>:
		xYieldPending = pdFALSE;
 800e270:	2300      	movs	r3, #0
void vTaskSwitchContext( void )
 800e272:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 800e274:	4c26      	ldr	r4, [pc, #152]	; (800e310 <vTaskSwitchContext.part.5+0xa0>)
 800e276:	6123      	str	r3, [r4, #16]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e278:	f7f9 fbcc 	bl	8007a14 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e27c:	6963      	ldr	r3, [r4, #20]
 800e27e:	4298      	cmp	r0, r3
 800e280:	d904      	bls.n	800e28c <vTaskSwitchContext.part.5+0x1c>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e282:	6862      	ldr	r2, [r4, #4]
 800e284:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800e286:	1acb      	subs	r3, r1, r3
 800e288:	181b      	adds	r3, r3, r0
 800e28a:	6553      	str	r3, [r2, #84]	; 0x54
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e28c:	6862      	ldr	r2, [r4, #4]
 800e28e:	6863      	ldr	r3, [r4, #4]
 800e290:	6812      	ldr	r2, [r2, #0]
 800e292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				ulTaskSwitchedInTime = ulTotalRunTime;
 800e294:	6160      	str	r0, [r4, #20]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e296:	429a      	cmp	r2, r3
 800e298:	d923      	bls.n	800e2e2 <vTaskSwitchContext.part.5+0x72>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e29a:	6863      	ldr	r3, [r4, #4]
 800e29c:	2214      	movs	r2, #20
 800e29e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e2a0:	491c      	ldr	r1, [pc, #112]	; (800e314 <vTaskSwitchContext.part.5+0xa4>)
 800e2a2:	f004 fd35 	bl	8012d10 <memcmp>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d128      	bne.n	800e2fc <vTaskSwitchContext.part.5+0x8c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e2aa:	69a2      	ldr	r2, [r4, #24]
 800e2ac:	491a      	ldr	r1, [pc, #104]	; (800e318 <vTaskSwitchContext.part.5+0xa8>)
 800e2ae:	e003      	b.n	800e2b8 <vTaskSwitchContext.part.5+0x48>
 800e2b0:	69a3      	ldr	r3, [r4, #24]
 800e2b2:	3b01      	subs	r3, #1
 800e2b4:	61a3      	str	r3, [r4, #24]
 800e2b6:	69a2      	ldr	r2, [r4, #24]
 800e2b8:	0093      	lsls	r3, r2, #2
 800e2ba:	189b      	adds	r3, r3, r2
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	58cb      	ldr	r3, [r1, r3]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d0f5      	beq.n	800e2b0 <vTaskSwitchContext.part.5+0x40>
 800e2c4:	69a2      	ldr	r2, [r4, #24]
 800e2c6:	0093      	lsls	r3, r2, #2
 800e2c8:	189b      	adds	r3, r3, r2
 800e2ca:	009b      	lsls	r3, r3, #2
 800e2cc:	18c8      	adds	r0, r1, r3
 800e2ce:	6842      	ldr	r2, [r0, #4]
 800e2d0:	3308      	adds	r3, #8
 800e2d2:	6852      	ldr	r2, [r2, #4]
 800e2d4:	18c9      	adds	r1, r1, r3
 800e2d6:	6042      	str	r2, [r0, #4]
 800e2d8:	428a      	cmp	r2, r1
 800e2da:	d015      	beq.n	800e308 <vTaskSwitchContext.part.5+0x98>
 800e2dc:	68d3      	ldr	r3, [r2, #12]
 800e2de:	6063      	str	r3, [r4, #4]
}
 800e2e0:	bd10      	pop	{r4, pc}
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e2e2:	6860      	ldr	r0, [r4, #4]
 800e2e4:	6861      	ldr	r1, [r4, #4]
 800e2e6:	3134      	adds	r1, #52	; 0x34
 800e2e8:	f7fe fd36 	bl	800cd58 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e2ec:	6863      	ldr	r3, [r4, #4]
 800e2ee:	2214      	movs	r2, #20
 800e2f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e2f2:	4908      	ldr	r1, [pc, #32]	; (800e314 <vTaskSwitchContext.part.5+0xa4>)
 800e2f4:	f004 fd0c 	bl	8012d10 <memcmp>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d0d6      	beq.n	800e2aa <vTaskSwitchContext.part.5+0x3a>
 800e2fc:	6860      	ldr	r0, [r4, #4]
 800e2fe:	6861      	ldr	r1, [r4, #4]
 800e300:	3134      	adds	r1, #52	; 0x34
 800e302:	f7fe fd29 	bl	800cd58 <vApplicationStackOverflowHook>
 800e306:	e7d0      	b.n	800e2aa <vTaskSwitchContext.part.5+0x3a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e308:	6852      	ldr	r2, [r2, #4]
 800e30a:	6042      	str	r2, [r0, #4]
 800e30c:	e7e6      	b.n	800e2dc <vTaskSwitchContext.part.5+0x6c>
 800e30e:	46c0      	nop			; (mov r8, r8)
 800e310:	20002144 	.word	0x20002144
 800e314:	08017b18 	.word	0x08017b18
 800e318:	200021e0 	.word	0x200021e0

0800e31c <xTaskGenericCreate>:
{
 800e31c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e31e:	464f      	mov	r7, r9
 800e320:	4646      	mov	r6, r8
 800e322:	46d6      	mov	lr, sl
 800e324:	b5c0      	push	{r6, r7, lr}
 800e326:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e328:	4680      	mov	r8, r0
 800e32a:	000c      	movs	r4, r1
 800e32c:	0015      	movs	r5, r2
 800e32e:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e330:	2f00      	cmp	r7, #0
 800e332:	d100      	bne.n	800e336 <xTaskGenericCreate+0x1a>
 800e334:	e0ae      	b.n	800e494 <xTaskGenericCreate+0x178>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e336:	2060      	movs	r0, #96	; 0x60
 800e338:	f001 f814 	bl	800f364 <pvPortMalloc>
 800e33c:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800e33e:	d100      	bne.n	800e342 <xTaskGenericCreate+0x26>
 800e340:	e0b1      	b.n	800e4a6 <xTaskGenericCreate+0x18a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e342:	00ad      	lsls	r5, r5, #2
				pxNewTCB->pxStack = pxStack;
 800e344:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e346:	002a      	movs	r2, r5
 800e348:	0038      	movs	r0, r7
 800e34a:	21a5      	movs	r1, #165	; 0xa5
 800e34c:	f004 fcf8 	bl	8012d40 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e350:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800e352:	1f2f      	subs	r7, r5, #4
 800e354:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e356:	2307      	movs	r3, #7
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e358:	4467      	add	r7, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e35a:	439f      	bics	r7, r3
 800e35c:	0030      	movs	r0, r6
 800e35e:	0033      	movs	r3, r6
 800e360:	3041      	adds	r0, #65	; 0x41
 800e362:	3334      	adds	r3, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e364:	7822      	ldrb	r2, [r4, #0]
 800e366:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800e368:	7822      	ldrb	r2, [r4, #0]
 800e36a:	2a00      	cmp	r2, #0
 800e36c:	d003      	beq.n	800e376 <xTaskGenericCreate+0x5a>
 800e36e:	3301      	adds	r3, #1
 800e370:	3401      	adds	r4, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e372:	4298      	cmp	r0, r3
 800e374:	d1f6      	bne.n	800e364 <xTaskGenericCreate+0x48>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e376:	2340      	movs	r3, #64	; 0x40
 800e378:	2200      	movs	r2, #0
 800e37a:	9d08      	ldr	r5, [sp, #32]
 800e37c:	54f2      	strb	r2, [r6, r3]
 800e37e:	2d06      	cmp	r5, #6
 800e380:	d84f      	bhi.n	800e422 <xTaskGenericCreate+0x106>
		pxTCB->uxMutexesHeld = 0;
 800e382:	2400      	movs	r4, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e384:	1d33      	adds	r3, r6, #4
 800e386:	0018      	movs	r0, r3
	pxTCB->uxPriority = uxPriority;
 800e388:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e38a:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e38c:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e38e:	469a      	mov	sl, r3
 800e390:	f7ff fbc8 	bl	800db24 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e394:	0030      	movs	r0, r6
 800e396:	3018      	adds	r0, #24
 800e398:	f7ff fbc4 	bl	800db24 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e39c:	2307      	movs	r3, #7
 800e39e:	1b5b      	subs	r3, r3, r5
 800e3a0:	61b3      	str	r3, [r6, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e3a2:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e3a4:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e3a6:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e3a8:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e3aa:	65b4      	str	r4, [r6, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e3ac:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e3ae:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e3b0:	4641      	mov	r1, r8
 800e3b2:	0038      	movs	r0, r7
 800e3b4:	f000 ff14 	bl	800f1e0 <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800e3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e3ba:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d000      	beq.n	800e3c2 <xTaskGenericCreate+0xa6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e3c0:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800e3c2:	f000 ff55 	bl	800f270 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e3c6:	4c3b      	ldr	r4, [pc, #236]	; (800e4b4 <xTaskGenericCreate+0x198>)
 800e3c8:	69e3      	ldr	r3, [r4, #28]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	61e3      	str	r3, [r4, #28]
			if( pxCurrentTCB == NULL )
 800e3ce:	6863      	ldr	r3, [r4, #4]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d02f      	beq.n	800e434 <xTaskGenericCreate+0x118>
				if( xSchedulerRunning == pdFALSE )
 800e3d4:	4d38      	ldr	r5, [pc, #224]	; (800e4b8 <xTaskGenericCreate+0x19c>)
 800e3d6:	686b      	ldr	r3, [r5, #4]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d024      	beq.n	800e426 <xTaskGenericCreate+0x10a>
 800e3dc:	4f37      	ldr	r7, [pc, #220]	; (800e4bc <xTaskGenericCreate+0x1a0>)
			uxTaskNumber++;
 800e3de:	68ab      	ldr	r3, [r5, #8]
			prvAddTaskToReadyList( pxNewTCB );
 800e3e0:	69a2      	ldr	r2, [r4, #24]
			uxTaskNumber++;
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	60ab      	str	r3, [r5, #8]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e3e6:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e3e8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d817      	bhi.n	800e41e <xTaskGenericCreate+0x102>
 800e3ee:	0098      	lsls	r0, r3, #2
 800e3f0:	18c0      	adds	r0, r0, r3
 800e3f2:	0080      	lsls	r0, r0, #2
 800e3f4:	1838      	adds	r0, r7, r0
 800e3f6:	4651      	mov	r1, sl
 800e3f8:	f7ff fb98 	bl	800db2c <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e3fc:	f000 ff44 	bl	800f288 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e400:	686b      	ldr	r3, [r5, #4]
			xReturn = pdPASS;
 800e402:	2501      	movs	r5, #1
		if( xSchedulerRunning != pdFALSE )
 800e404:	2b00      	cmp	r3, #0
 800e406:	d004      	beq.n	800e412 <xTaskGenericCreate+0xf6>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e408:	6863      	ldr	r3, [r4, #4]
 800e40a:	9a08      	ldr	r2, [sp, #32]
 800e40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e40e:	4293      	cmp	r3, r2
 800e410:	d317      	bcc.n	800e442 <xTaskGenericCreate+0x126>
}
 800e412:	0028      	movs	r0, r5
 800e414:	bc1c      	pop	{r2, r3, r4}
 800e416:	4690      	mov	r8, r2
 800e418:	4699      	mov	r9, r3
 800e41a:	46a2      	mov	sl, r4
 800e41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvAddTaskToReadyList( pxNewTCB );
 800e41e:	61a3      	str	r3, [r4, #24]
 800e420:	e7e5      	b.n	800e3ee <xTaskGenericCreate+0xd2>
 800e422:	2506      	movs	r5, #6
 800e424:	e7ad      	b.n	800e382 <xTaskGenericCreate+0x66>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e426:	6863      	ldr	r3, [r4, #4]
 800e428:	9a08      	ldr	r2, [sp, #32]
 800e42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d8d5      	bhi.n	800e3dc <xTaskGenericCreate+0xc0>
						pxCurrentTCB = pxNewTCB;
 800e430:	6066      	str	r6, [r4, #4]
 800e432:	e7d3      	b.n	800e3dc <xTaskGenericCreate+0xc0>
				pxCurrentTCB =  pxNewTCB;
 800e434:	6066      	str	r6, [r4, #4]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e436:	69e3      	ldr	r3, [r4, #28]
 800e438:	4f20      	ldr	r7, [pc, #128]	; (800e4bc <xTaskGenericCreate+0x1a0>)
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	d004      	beq.n	800e448 <xTaskGenericCreate+0x12c>
 800e43e:	4d1e      	ldr	r5, [pc, #120]	; (800e4b8 <xTaskGenericCreate+0x19c>)
 800e440:	e7cd      	b.n	800e3de <xTaskGenericCreate+0xc2>
				taskYIELD_IF_USING_PREEMPTION();
 800e442:	f000 ff09 	bl	800f258 <vPortYield>
 800e446:	e7e4      	b.n	800e412 <xTaskGenericCreate+0xf6>
 800e448:	238c      	movs	r3, #140	; 0x8c
 800e44a:	4698      	mov	r8, r3
 800e44c:	003d      	movs	r5, r7
 800e44e:	44b8      	add	r8, r7
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e450:	0028      	movs	r0, r5
 800e452:	3514      	adds	r5, #20
 800e454:	f7ff fb5a 	bl	800db0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e458:	4545      	cmp	r5, r8
 800e45a:	d1f9      	bne.n	800e450 <xTaskGenericCreate+0x134>
	vListInitialise( &xDelayedTaskList1 );
 800e45c:	2320      	movs	r3, #32
 800e45e:	4698      	mov	r8, r3
	vListInitialise( &xDelayedTaskList2 );
 800e460:	0025      	movs	r5, r4
	vListInitialise( &xDelayedTaskList1 );
 800e462:	44a0      	add	r8, r4
	vListInitialise( &xDelayedTaskList2 );
 800e464:	3534      	adds	r5, #52	; 0x34
	vListInitialise( &xDelayedTaskList1 );
 800e466:	4640      	mov	r0, r8
 800e468:	f7ff fb50 	bl	800db0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e46c:	0028      	movs	r0, r5
 800e46e:	f7ff fb4d 	bl	800db0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e472:	0020      	movs	r0, r4
 800e474:	3048      	adds	r0, #72	; 0x48
 800e476:	f7ff fb49 	bl	800db0c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e47a:	0020      	movs	r0, r4
 800e47c:	305c      	adds	r0, #92	; 0x5c
 800e47e:	f7ff fb45 	bl	800db0c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e482:	0020      	movs	r0, r4
 800e484:	3070      	adds	r0, #112	; 0x70
 800e486:	f7ff fb41 	bl	800db0c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e48a:	4643      	mov	r3, r8
 800e48c:	6023      	str	r3, [r4, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e48e:	60e5      	str	r5, [r4, #12]
 800e490:	4d09      	ldr	r5, [pc, #36]	; (800e4b8 <xTaskGenericCreate+0x19c>)
 800e492:	e7a4      	b.n	800e3de <xTaskGenericCreate+0xc2>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e494:	0090      	lsls	r0, r2, #2
 800e496:	f000 ff65 	bl	800f364 <pvPortMalloc>
 800e49a:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800e49c:	d000      	beq.n	800e4a0 <xTaskGenericCreate+0x184>
 800e49e:	e74a      	b.n	800e336 <xTaskGenericCreate+0x1a>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e4a0:	2501      	movs	r5, #1
 800e4a2:	426d      	negs	r5, r5
 800e4a4:	e7b5      	b.n	800e412 <xTaskGenericCreate+0xf6>
 800e4a6:	2501      	movs	r5, #1
				vPortFree( pxStack );
 800e4a8:	0038      	movs	r0, r7
 800e4aa:	f000 ffd1 	bl	800f450 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e4ae:	426d      	negs	r5, r5
 800e4b0:	e7af      	b.n	800e412 <xTaskGenericCreate+0xf6>
 800e4b2:	46c0      	nop			; (mov r8, r8)
 800e4b4:	20002144 	.word	0x20002144
 800e4b8:	200021c4 	.word	0x200021c4
 800e4bc:	200021e0 	.word	0x200021e0

0800e4c0 <uxTaskPriorityGet>:
	{
 800e4c0:	b510      	push	{r4, lr}
 800e4c2:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e4c4:	f000 fed4 	bl	800f270 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e4c8:	2c00      	cmp	r4, #0
 800e4ca:	d101      	bne.n	800e4d0 <uxTaskPriorityGet+0x10>
 800e4cc:	4b03      	ldr	r3, [pc, #12]	; (800e4dc <uxTaskPriorityGet+0x1c>)
 800e4ce:	685c      	ldr	r4, [r3, #4]
			uxReturn = pxTCB->uxPriority;
 800e4d0:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e4d2:	f000 fed9 	bl	800f288 <vPortExitCritical>
	}
 800e4d6:	0020      	movs	r0, r4
 800e4d8:	bd10      	pop	{r4, pc}
 800e4da:	46c0      	nop			; (mov r8, r8)
 800e4dc:	20002144 	.word	0x20002144

0800e4e0 <vTaskPrioritySet>:
	{
 800e4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4e2:	46c6      	mov	lr, r8
 800e4e4:	0004      	movs	r4, r0
 800e4e6:	b500      	push	{lr}
 800e4e8:	000d      	movs	r5, r1
 800e4ea:	2906      	cmp	r1, #6
 800e4ec:	d900      	bls.n	800e4f0 <vTaskPrioritySet+0x10>
 800e4ee:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800e4f0:	f000 febe 	bl	800f270 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e4f4:	2c00      	cmp	r4, #0
 800e4f6:	d02b      	beq.n	800e550 <vTaskPrioritySet+0x70>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e4f8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e4fa:	42aa      	cmp	r2, r5
 800e4fc:	d01a      	beq.n	800e534 <vTaskPrioritySet+0x54>
					if( pxTCB != pxCurrentTCB )
 800e4fe:	4f21      	ldr	r7, [pc, #132]	; (800e584 <vTaskPrioritySet+0xa4>)
				if( uxNewPriority > uxCurrentBasePriority )
 800e500:	d31d      	bcc.n	800e53e <vTaskPrioritySet+0x5e>
				else if( pxTCB == pxCurrentTCB )
 800e502:	687e      	ldr	r6, [r7, #4]
 800e504:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800e506:	4273      	negs	r3, r6
 800e508:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e50a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e50c:	428a      	cmp	r2, r1
 800e50e:	d100      	bne.n	800e512 <vTaskPrioritySet+0x32>
						pxTCB->uxPriority = uxNewPriority;
 800e510:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e512:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800e514:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e516:	2b00      	cmp	r3, #0
 800e518:	db02      	blt.n	800e520 <vTaskPrioritySet+0x40>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e51a:	2307      	movs	r3, #7
 800e51c:	1b5d      	subs	r5, r3, r5
 800e51e:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e520:	008b      	lsls	r3, r1, #2
 800e522:	185b      	adds	r3, r3, r1
 800e524:	4d18      	ldr	r5, [pc, #96]	; (800e588 <vTaskPrioritySet+0xa8>)
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	6962      	ldr	r2, [r4, #20]
 800e52a:	18eb      	adds	r3, r5, r3
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d015      	beq.n	800e55c <vTaskPrioritySet+0x7c>
				if( xYieldRequired == pdTRUE )
 800e530:	2e01      	cmp	r6, #1
 800e532:	d010      	beq.n	800e556 <vTaskPrioritySet+0x76>
		taskEXIT_CRITICAL();
 800e534:	f000 fea8 	bl	800f288 <vPortExitCritical>
	}
 800e538:	bc04      	pop	{r2}
 800e53a:	4690      	mov	r8, r2
 800e53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( pxTCB != pxCurrentTCB )
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	42a3      	cmp	r3, r4
 800e542:	d01d      	beq.n	800e580 <vTaskPrioritySet+0xa0>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e544:	2600      	movs	r6, #0
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e54a:	429d      	cmp	r5, r3
 800e54c:	4176      	adcs	r6, r6
 800e54e:	e7dc      	b.n	800e50a <vTaskPrioritySet+0x2a>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e550:	4b0c      	ldr	r3, [pc, #48]	; (800e584 <vTaskPrioritySet+0xa4>)
 800e552:	685c      	ldr	r4, [r3, #4]
 800e554:	e7d0      	b.n	800e4f8 <vTaskPrioritySet+0x18>
					taskYIELD_IF_USING_PREEMPTION();
 800e556:	f000 fe7f 	bl	800f258 <vPortYield>
 800e55a:	e7eb      	b.n	800e534 <vTaskPrioritySet+0x54>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e55c:	1d23      	adds	r3, r4, #4
 800e55e:	0018      	movs	r0, r3
 800e560:	4698      	mov	r8, r3
 800e562:	f7ff fb07 	bl	800db74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e566:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e568:	69ba      	ldr	r2, [r7, #24]
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d900      	bls.n	800e570 <vTaskPrioritySet+0x90>
 800e56e:	61bb      	str	r3, [r7, #24]
 800e570:	0098      	lsls	r0, r3, #2
 800e572:	18c0      	adds	r0, r0, r3
 800e574:	0080      	lsls	r0, r0, #2
 800e576:	1828      	adds	r0, r5, r0
 800e578:	4641      	mov	r1, r8
 800e57a:	f7ff fad7 	bl	800db2c <vListInsertEnd>
 800e57e:	e7d7      	b.n	800e530 <vTaskPrioritySet+0x50>
	BaseType_t xYieldRequired = pdFALSE;
 800e580:	2600      	movs	r6, #0
 800e582:	e7c2      	b.n	800e50a <vTaskPrioritySet+0x2a>
 800e584:	20002144 	.word	0x20002144
 800e588:	200021e0 	.word	0x200021e0

0800e58c <vTaskStartScheduler>:
{
 800e58c:	b510      	push	{r4, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800e58e:	2400      	movs	r4, #0
{
 800e590:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800e592:	9403      	str	r4, [sp, #12]
 800e594:	9402      	str	r4, [sp, #8]
 800e596:	9401      	str	r4, [sp, #4]
 800e598:	9400      	str	r4, [sp, #0]
 800e59a:	2300      	movs	r3, #0
 800e59c:	22a0      	movs	r2, #160	; 0xa0
 800e59e:	490b      	ldr	r1, [pc, #44]	; (800e5cc <vTaskStartScheduler+0x40>)
 800e5a0:	480b      	ldr	r0, [pc, #44]	; (800e5d0 <vTaskStartScheduler+0x44>)
 800e5a2:	f7ff febb 	bl	800e31c <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800e5a6:	2801      	cmp	r0, #1
 800e5a8:	d001      	beq.n	800e5ae <vTaskStartScheduler+0x22>
}
 800e5aa:	b004      	add	sp, #16
 800e5ac:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
 800e5ae:	f000 fc83 	bl	800eeb8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e5b2:	2801      	cmp	r0, #1
 800e5b4:	d1f9      	bne.n	800e5aa <vTaskStartScheduler+0x1e>
		portDISABLE_INTERRUPTS();
 800e5b6:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e5b8:	4b06      	ldr	r3, [pc, #24]	; (800e5d4 <vTaskStartScheduler+0x48>)
 800e5ba:	6058      	str	r0, [r3, #4]
		xTickCount = ( TickType_t ) 0U;
 800e5bc:	4b06      	ldr	r3, [pc, #24]	; (800e5d8 <vTaskStartScheduler+0x4c>)
 800e5be:	609c      	str	r4, [r3, #8]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e5c0:	f7f9 fa18 	bl	80079f4 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e5c4:	f000 fe1e 	bl	800f204 <xPortStartScheduler>
}
 800e5c8:	e7ef      	b.n	800e5aa <vTaskStartScheduler+0x1e>
 800e5ca:	46c0      	nop			; (mov r8, r8)
 800e5cc:	0801a56c 	.word	0x0801a56c
 800e5d0:	0800e80d 	.word	0x0800e80d
 800e5d4:	200021c4 	.word	0x200021c4
 800e5d8:	20002144 	.word	0x20002144

0800e5dc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e5dc:	4a02      	ldr	r2, [pc, #8]	; (800e5e8 <vTaskSuspendAll+0xc>)
 800e5de:	6913      	ldr	r3, [r2, #16]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	6113      	str	r3, [r2, #16]
}
 800e5e4:	4770      	bx	lr
 800e5e6:	46c0      	nop			; (mov r8, r8)
 800e5e8:	200021c4 	.word	0x200021c4

0800e5ec <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e5ec:	4b01      	ldr	r3, [pc, #4]	; (800e5f4 <xTaskGetTickCount+0x8>)
 800e5ee:	6898      	ldr	r0, [r3, #8]
}
 800e5f0:	4770      	bx	lr
 800e5f2:	46c0      	nop			; (mov r8, r8)
 800e5f4:	20002144 	.word	0x20002144

0800e5f8 <xTaskGetTickCountFromISR>:
 800e5f8:	4b01      	ldr	r3, [pc, #4]	; (800e600 <xTaskGetTickCountFromISR+0x8>)
 800e5fa:	6898      	ldr	r0, [r3, #8]
 800e5fc:	4770      	bx	lr
 800e5fe:	46c0      	nop			; (mov r8, r8)
 800e600:	20002144 	.word	0x20002144

0800e604 <xTaskIncrementTick>:
{
 800e604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e606:	46d6      	mov	lr, sl
 800e608:	464f      	mov	r7, r9
 800e60a:	4646      	mov	r6, r8
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e60c:	4b3e      	ldr	r3, [pc, #248]	; (800e708 <xTaskIncrementTick+0x104>)
{
 800e60e:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e610:	691a      	ldr	r2, [r3, #16]
 800e612:	2a00      	cmp	r2, #0
 800e614:	d11b      	bne.n	800e64e <xTaskIncrementTick+0x4a>
		++xTickCount;
 800e616:	4c3d      	ldr	r4, [pc, #244]	; (800e70c <xTaskIncrementTick+0x108>)
 800e618:	68a2      	ldr	r2, [r4, #8]
 800e61a:	3201      	adds	r2, #1
 800e61c:	60a2      	str	r2, [r4, #8]
			const TickType_t xConstTickCount = xTickCount;
 800e61e:	68a2      	ldr	r2, [r4, #8]
 800e620:	4690      	mov	r8, r2
			if( xConstTickCount == ( TickType_t ) 0U )
 800e622:	2a00      	cmp	r2, #0
 800e624:	d022      	beq.n	800e66c <xTaskIncrementTick+0x68>
 800e626:	4b3a      	ldr	r3, [pc, #232]	; (800e710 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800e628:	2700      	movs	r7, #0
 800e62a:	469a      	mov	sl, r3
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e62c:	4653      	mov	r3, sl
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4543      	cmp	r3, r8
 800e632:	d931      	bls.n	800e698 <xTaskIncrementTick+0x94>
 800e634:	4b37      	ldr	r3, [pc, #220]	; (800e714 <xTaskIncrementTick+0x110>)
 800e636:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e638:	6863      	ldr	r3, [r4, #4]
 800e63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e63c:	0093      	lsls	r3, r2, #2
 800e63e:	189b      	adds	r3, r3, r2
 800e640:	464a      	mov	r2, r9
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	58d3      	ldr	r3, [r2, r3]
 800e646:	2b01      	cmp	r3, #1
 800e648:	d906      	bls.n	800e658 <xTaskIncrementTick+0x54>
				xSwitchRequired = pdTRUE;
 800e64a:	2701      	movs	r7, #1
 800e64c:	e004      	b.n	800e658 <xTaskIncrementTick+0x54>
BaseType_t xSwitchRequired = pdFALSE;
 800e64e:	2700      	movs	r7, #0
		++uxPendedTicks;
 800e650:	699a      	ldr	r2, [r3, #24]
 800e652:	4c2e      	ldr	r4, [pc, #184]	; (800e70c <xTaskIncrementTick+0x108>)
 800e654:	3201      	adds	r2, #1
 800e656:	619a      	str	r2, [r3, #24]
		if( xYieldPending != pdFALSE )
 800e658:	6923      	ldr	r3, [r4, #16]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d000      	beq.n	800e660 <xTaskIncrementTick+0x5c>
			xSwitchRequired = pdTRUE;
 800e65e:	2701      	movs	r7, #1
}
 800e660:	0038      	movs	r0, r7
 800e662:	bc1c      	pop	{r2, r3, r4}
 800e664:	4690      	mov	r8, r2
 800e666:	4699      	mov	r9, r3
 800e668:	46a2      	mov	sl, r4
 800e66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				taskSWITCH_DELAYED_LISTS();
 800e66c:	6822      	ldr	r2, [r4, #0]
 800e66e:	68e1      	ldr	r1, [r4, #12]
 800e670:	6021      	str	r1, [r4, #0]
 800e672:	60e2      	str	r2, [r4, #12]
 800e674:	695a      	ldr	r2, [r3, #20]
 800e676:	3201      	adds	r2, #1
 800e678:	615a      	str	r2, [r3, #20]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e67a:	6823      	ldr	r3, [r4, #0]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d13b      	bne.n	800e6fa <xTaskIncrementTick+0xf6>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e682:	4b23      	ldr	r3, [pc, #140]	; (800e710 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800e684:	2700      	movs	r7, #0
		xNextTaskUnblockTime = portMAX_DELAY;
 800e686:	469a      	mov	sl, r3
 800e688:	2301      	movs	r3, #1
 800e68a:	4652      	mov	r2, sl
 800e68c:	425b      	negs	r3, r3
 800e68e:	6013      	str	r3, [r2, #0]
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e690:	4653      	mov	r3, sl
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4543      	cmp	r3, r8
 800e696:	d8cd      	bhi.n	800e634 <xTaskIncrementTick+0x30>
 800e698:	4b1e      	ldr	r3, [pc, #120]	; (800e714 <xTaskIncrementTick+0x110>)
 800e69a:	4699      	mov	r9, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e69c:	6823      	ldr	r3, [r4, #0]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d026      	beq.n	800e6f2 <xTaskIncrementTick+0xee>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e6a4:	6823      	ldr	r3, [r4, #0]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800e6aa:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 800e6ac:	4598      	cmp	r8, r3
 800e6ae:	d327      	bcc.n	800e700 <xTaskIncrementTick+0xfc>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e6b0:	1d2e      	adds	r6, r5, #4
 800e6b2:	0030      	movs	r0, r6
 800e6b4:	f7ff fa5e 	bl	800db74 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e6b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d003      	beq.n	800e6c6 <xTaskIncrementTick+0xc2>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6be:	0028      	movs	r0, r5
 800e6c0:	3018      	adds	r0, #24
 800e6c2:	f7ff fa57 	bl	800db74 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e6c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e6c8:	69a2      	ldr	r2, [r4, #24]
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d900      	bls.n	800e6d0 <xTaskIncrementTick+0xcc>
 800e6ce:	61a3      	str	r3, [r4, #24]
 800e6d0:	0098      	lsls	r0, r3, #2
 800e6d2:	18c0      	adds	r0, r0, r3
 800e6d4:	0080      	lsls	r0, r0, #2
 800e6d6:	4448      	add	r0, r9
 800e6d8:	0031      	movs	r1, r6
 800e6da:	f7ff fa27 	bl	800db2c <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6de:	6863      	ldr	r3, [r4, #4]
 800e6e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d3d9      	bcc.n	800e69c <xTaskIncrementTick+0x98>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6e8:	6823      	ldr	r3, [r4, #0]
								xSwitchRequired = pdTRUE;
 800e6ea:	2701      	movs	r7, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d1d8      	bne.n	800e6a4 <xTaskIncrementTick+0xa0>
						xNextTaskUnblockTime = portMAX_DELAY;
 800e6f2:	4652      	mov	r2, sl
 800e6f4:	3b01      	subs	r3, #1
 800e6f6:	6013      	str	r3, [r2, #0]
						break;
 800e6f8:	e79e      	b.n	800e638 <xTaskIncrementTick+0x34>
 800e6fa:	f7ff fd8f 	bl	800e21c <prvResetNextTaskUnblockTime.part.2>
 800e6fe:	e792      	b.n	800e626 <xTaskIncrementTick+0x22>
							xNextTaskUnblockTime = xItemValue;
 800e700:	4652      	mov	r2, sl
 800e702:	6013      	str	r3, [r2, #0]
							break;
 800e704:	e798      	b.n	800e638 <xTaskIncrementTick+0x34>
 800e706:	46c0      	nop			; (mov r8, r8)
 800e708:	200021c4 	.word	0x200021c4
 800e70c:	20002144 	.word	0x20002144
 800e710:	200000d0 	.word	0x200000d0
 800e714:	200021e0 	.word	0x200021e0

0800e718 <xTaskResumeAll>:
{
 800e718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e71a:	46ce      	mov	lr, r9
 800e71c:	4647      	mov	r7, r8
 800e71e:	b580      	push	{r7, lr}
	taskENTER_CRITICAL();
 800e720:	f000 fda6 	bl	800f270 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e724:	4f28      	ldr	r7, [pc, #160]	; (800e7c8 <xTaskResumeAll+0xb0>)
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	3b01      	subs	r3, #1
 800e72a:	613b      	str	r3, [r7, #16]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d13b      	bne.n	800e7aa <xTaskResumeAll+0x92>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e732:	4c26      	ldr	r4, [pc, #152]	; (800e7cc <xTaskResumeAll+0xb4>)
 800e734:	69e3      	ldr	r3, [r4, #28]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d037      	beq.n	800e7aa <xTaskResumeAll+0x92>
					prvAddTaskToReadyList( pxTCB );
 800e73a:	4b25      	ldr	r3, [pc, #148]	; (800e7d0 <xTaskResumeAll+0xb8>)
 800e73c:	4698      	mov	r8, r3
						xYieldPending = pdTRUE;
 800e73e:	2301      	movs	r3, #1
 800e740:	4699      	mov	r9, r3
 800e742:	e01a      	b.n	800e77a <xTaskResumeAll+0x62>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e744:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e746:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e748:	0028      	movs	r0, r5
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e74a:	1d2e      	adds	r6, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e74c:	3018      	adds	r0, #24
 800e74e:	f7ff fa11 	bl	800db74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e752:	0030      	movs	r0, r6
 800e754:	f7ff fa0e 	bl	800db74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e75a:	69a2      	ldr	r2, [r4, #24]
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d900      	bls.n	800e762 <xTaskResumeAll+0x4a>
 800e760:	61a3      	str	r3, [r4, #24]
 800e762:	0098      	lsls	r0, r3, #2
 800e764:	18c0      	adds	r0, r0, r3
 800e766:	0080      	lsls	r0, r0, #2
 800e768:	4440      	add	r0, r8
 800e76a:	0031      	movs	r1, r6
 800e76c:	f7ff f9de 	bl	800db2c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e770:	6863      	ldr	r3, [r4, #4]
 800e772:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e776:	429a      	cmp	r2, r3
 800e778:	d21f      	bcs.n	800e7ba <xTaskResumeAll+0xa2>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e77a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d1e1      	bne.n	800e744 <xTaskResumeAll+0x2c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00e      	beq.n	800e7a4 <xTaskResumeAll+0x8c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00b      	beq.n	800e7a4 <xTaskResumeAll+0x8c>
							xYieldPending = pdTRUE;
 800e78c:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
 800e78e:	f7ff ff39 	bl	800e604 <xTaskIncrementTick>
 800e792:	2800      	cmp	r0, #0
 800e794:	d000      	beq.n	800e798 <xTaskResumeAll+0x80>
							xYieldPending = pdTRUE;
 800e796:	6125      	str	r5, [r4, #16]
						--uxPendedTicks;
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	3b01      	subs	r3, #1
 800e79c:	61bb      	str	r3, [r7, #24]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d1f4      	bne.n	800e78e <xTaskResumeAll+0x76>
				if( xYieldPending == pdTRUE )
 800e7a4:	6923      	ldr	r3, [r4, #16]
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d00a      	beq.n	800e7c0 <xTaskResumeAll+0xa8>
BaseType_t xAlreadyYielded = pdFALSE;
 800e7aa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e7ac:	f000 fd6c 	bl	800f288 <vPortExitCritical>
}
 800e7b0:	0020      	movs	r0, r4
 800e7b2:	bc0c      	pop	{r2, r3}
 800e7b4:	4690      	mov	r8, r2
 800e7b6:	4699      	mov	r9, r3
 800e7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 800e7ba:	464b      	mov	r3, r9
 800e7bc:	6123      	str	r3, [r4, #16]
 800e7be:	e7dc      	b.n	800e77a <xTaskResumeAll+0x62>
					taskYIELD_IF_USING_PREEMPTION();
 800e7c0:	f000 fd4a 	bl	800f258 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800e7c4:	2401      	movs	r4, #1
 800e7c6:	e7f1      	b.n	800e7ac <xTaskResumeAll+0x94>
 800e7c8:	200021c4 	.word	0x200021c4
 800e7cc:	20002144 	.word	0x20002144
 800e7d0:	200021e0 	.word	0x200021e0

0800e7d4 <vTaskDelay>:
	{
 800e7d4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	d011      	beq.n	800e7fe <vTaskDelay+0x2a>
	++uxSchedulerSuspended;
 800e7da:	4a0a      	ldr	r2, [pc, #40]	; (800e804 <vTaskDelay+0x30>)
 800e7dc:	6913      	ldr	r3, [r2, #16]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	6113      	str	r3, [r2, #16]
				xTimeToWake = xTickCount + xTicksToDelay;
 800e7e2:	4b09      	ldr	r3, [pc, #36]	; (800e808 <vTaskDelay+0x34>)
 800e7e4:	689c      	ldr	r4, [r3, #8]
 800e7e6:	1824      	adds	r4, r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e7e8:	6858      	ldr	r0, [r3, #4]
 800e7ea:	3004      	adds	r0, #4
 800e7ec:	f7ff f9c2 	bl	800db74 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e7f0:	0020      	movs	r0, r4
 800e7f2:	f7ff fd1f 	bl	800e234 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e7f6:	f7ff ff8f 	bl	800e718 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	d101      	bne.n	800e802 <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
 800e7fe:	f000 fd2b 	bl	800f258 <vPortYield>
	}
 800e802:	bd10      	pop	{r4, pc}
 800e804:	200021c4 	.word	0x200021c4
 800e808:	20002144 	.word	0x20002144

0800e80c <prvIdleTask>:
{
 800e80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e80e:	4e15      	ldr	r6, [pc, #84]	; (800e864 <prvIdleTask+0x58>)
 800e810:	4c15      	ldr	r4, [pc, #84]	; (800e868 <prvIdleTask+0x5c>)
 800e812:	4f16      	ldr	r7, [pc, #88]	; (800e86c <prvIdleTask+0x60>)
 800e814:	e007      	b.n	800e826 <prvIdleTask+0x1a>
	++uxSchedulerSuspended;
 800e816:	6923      	ldr	r3, [r4, #16]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e818:	6df5      	ldr	r5, [r6, #92]	; 0x5c
	++uxSchedulerSuspended;
 800e81a:	3301      	adds	r3, #1
 800e81c:	6123      	str	r3, [r4, #16]
			( void ) xTaskResumeAll();
 800e81e:	f7ff ff7b 	bl	800e718 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e822:	2d00      	cmp	r5, #0
 800e824:	d108      	bne.n	800e838 <prvIdleTask+0x2c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e826:	68e3      	ldr	r3, [r4, #12]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d1f4      	bne.n	800e816 <prvIdleTask+0xa>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	2b01      	cmp	r3, #1
 800e830:	d9f9      	bls.n	800e826 <prvIdleTask+0x1a>
				taskYIELD();
 800e832:	f000 fd11 	bl	800f258 <vPortYield>
 800e836:	e7f6      	b.n	800e826 <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
 800e838:	f000 fd1a 	bl	800f270 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e83c:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800e83e:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e840:	1d28      	adds	r0, r5, #4
 800e842:	f7ff f997 	bl	800db74 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e846:	69f3      	ldr	r3, [r6, #28]
 800e848:	3b01      	subs	r3, #1
 800e84a:	61f3      	str	r3, [r6, #28]
					--uxTasksDeleted;
 800e84c:	68e3      	ldr	r3, [r4, #12]
 800e84e:	3b01      	subs	r3, #1
 800e850:	60e3      	str	r3, [r4, #12]
				taskEXIT_CRITICAL();
 800e852:	f000 fd19 	bl	800f288 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800e856:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e858:	f000 fdfa 	bl	800f450 <vPortFree>
		vPortFree( pxTCB );
 800e85c:	0028      	movs	r0, r5
 800e85e:	f000 fdf7 	bl	800f450 <vPortFree>
 800e862:	e7e0      	b.n	800e826 <prvIdleTask+0x1a>
 800e864:	20002144 	.word	0x20002144
 800e868:	200021c4 	.word	0x200021c4
 800e86c:	200021e0 	.word	0x200021e0

0800e870 <uxTaskGetSystemState>:
	{
 800e870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e872:	4647      	mov	r7, r8
 800e874:	46ce      	mov	lr, r9
 800e876:	4690      	mov	r8, r2
	++uxSchedulerSuspended;
 800e878:	4a33      	ldr	r2, [pc, #204]	; (800e948 <uxTaskGetSystemState+0xd8>)
	{
 800e87a:	b580      	push	{r7, lr}
	++uxSchedulerSuspended;
 800e87c:	6913      	ldr	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e87e:	4f33      	ldr	r7, [pc, #204]	; (800e94c <uxTaskGetSystemState+0xdc>)
	++uxSchedulerSuspended;
 800e880:	3301      	adds	r3, #1
 800e882:	6113      	str	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e884:	69fb      	ldr	r3, [r7, #28]
	{
 800e886:	0006      	movs	r6, r0
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e888:	2500      	movs	r5, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e88a:	428b      	cmp	r3, r1
 800e88c:	d82c      	bhi.n	800e8e8 <uxTaskGetSystemState+0x78>
 800e88e:	238c      	movs	r3, #140	; 0x8c
 800e890:	425b      	negs	r3, r3
 800e892:	4699      	mov	r9, r3
 800e894:	4c2e      	ldr	r4, [pc, #184]	; (800e950 <uxTaskGetSystemState+0xe0>)
 800e896:	2300      	movs	r3, #0
 800e898:	44a1      	add	r9, r4
 800e89a:	e002      	b.n	800e8a2 <uxTaskGetSystemState+0x32>
 800e89c:	3c14      	subs	r4, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e89e:	454c      	cmp	r4, r9
 800e8a0:	d00d      	beq.n	800e8be <uxTaskGetSystemState+0x4e>
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e8a2:	6822      	ldr	r2, [r4, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e8a4:	18f0      	adds	r0, r6, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e8a6:	2a00      	cmp	r2, #0
 800e8a8:	d0f8      	beq.n	800e89c <uxTaskGetSystemState+0x2c>
 800e8aa:	0021      	movs	r1, r4
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f7ff fc61 	bl	800e174 <prvListTaskWithinSingleList.part.1>
 800e8b2:	182d      	adds	r5, r5, r0
 800e8b4:	016b      	lsls	r3, r5, #5
 800e8b6:	3c14      	subs	r4, #20
 800e8b8:	18f0      	adds	r0, r6, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8ba:	454c      	cmp	r4, r9
 800e8bc:	d1f1      	bne.n	800e8a2 <uxTaskGetSystemState+0x32>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e8be:	6839      	ldr	r1, [r7, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e8c0:	680b      	ldr	r3, [r1, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d121      	bne.n	800e90a <uxTaskGetSystemState+0x9a>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e8c6:	68f9      	ldr	r1, [r7, #12]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e8c8:	680b      	ldr	r3, [r1, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d127      	bne.n	800e91e <uxTaskGetSystemState+0xae>
 800e8ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d12d      	bne.n	800e930 <uxTaskGetSystemState+0xc0>
 800e8d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d10d      	bne.n	800e8f6 <uxTaskGetSystemState+0x86>
					if( pulTotalRunTime != NULL )
 800e8da:	4643      	mov	r3, r8
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d003      	beq.n	800e8e8 <uxTaskGetSystemState+0x78>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e8e0:	f7f9 f898 	bl	8007a14 <ulMainGetRunTimeCounterValue>
 800e8e4:	4643      	mov	r3, r8
 800e8e6:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e8e8:	f7ff ff16 	bl	800e718 <xTaskResumeAll>
	}
 800e8ec:	0028      	movs	r0, r5
 800e8ee:	bc0c      	pop	{r2, r3}
 800e8f0:	4690      	mov	r8, r2
 800e8f2:	4699      	mov	r9, r3
 800e8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8f6:	0039      	movs	r1, r7
 800e8f8:	2203      	movs	r2, #3
 800e8fa:	3170      	adds	r1, #112	; 0x70
 800e8fc:	f7ff fc3a 	bl	800e174 <prvListTaskWithinSingleList.part.1>
					if( pulTotalRunTime != NULL )
 800e900:	4643      	mov	r3, r8
 800e902:	182d      	adds	r5, r5, r0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d1eb      	bne.n	800e8e0 <uxTaskGetSystemState+0x70>
 800e908:	e7ee      	b.n	800e8e8 <uxTaskGetSystemState+0x78>
 800e90a:	2202      	movs	r2, #2
 800e90c:	f7ff fc32 	bl	800e174 <prvListTaskWithinSingleList.part.1>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e910:	68f9      	ldr	r1, [r7, #12]
 800e912:	182d      	adds	r5, r5, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e914:	680b      	ldr	r3, [r1, #0]
 800e916:	0168      	lsls	r0, r5, #5
 800e918:	1830      	adds	r0, r6, r0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d0d7      	beq.n	800e8ce <uxTaskGetSystemState+0x5e>
 800e91e:	2202      	movs	r2, #2
 800e920:	f7ff fc28 	bl	800e174 <prvListTaskWithinSingleList.part.1>
 800e924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e926:	182d      	adds	r5, r5, r0
 800e928:	0168      	lsls	r0, r5, #5
 800e92a:	1830      	adds	r0, r6, r0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d0d1      	beq.n	800e8d4 <uxTaskGetSystemState+0x64>
 800e930:	0039      	movs	r1, r7
 800e932:	2204      	movs	r2, #4
 800e934:	315c      	adds	r1, #92	; 0x5c
 800e936:	f7ff fc1d 	bl	800e174 <prvListTaskWithinSingleList.part.1>
 800e93a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e93c:	182d      	adds	r5, r5, r0
 800e93e:	0168      	lsls	r0, r5, #5
 800e940:	1830      	adds	r0, r6, r0
 800e942:	2b00      	cmp	r3, #0
 800e944:	d0c9      	beq.n	800e8da <uxTaskGetSystemState+0x6a>
 800e946:	e7d6      	b.n	800e8f6 <uxTaskGetSystemState+0x86>
 800e948:	200021c4 	.word	0x200021c4
 800e94c:	20002144 	.word	0x20002144
 800e950:	20002258 	.word	0x20002258

0800e954 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e954:	4b05      	ldr	r3, [pc, #20]	; (800e96c <vTaskSwitchContext+0x18>)
{
 800e956:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e958:	691b      	ldr	r3, [r3, #16]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d003      	beq.n	800e966 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800e95e:	2201      	movs	r2, #1
 800e960:	4b03      	ldr	r3, [pc, #12]	; (800e970 <vTaskSwitchContext+0x1c>)
 800e962:	611a      	str	r2, [r3, #16]
}
 800e964:	bd10      	pop	{r4, pc}
 800e966:	f7ff fc83 	bl	800e270 <vTaskSwitchContext.part.5>
 800e96a:	e7fb      	b.n	800e964 <vTaskSwitchContext+0x10>
 800e96c:	200021c4 	.word	0x200021c4
 800e970:	20002144 	.word	0x20002144

0800e974 <vTaskPlaceOnEventList>:
{
 800e974:	b570      	push	{r4, r5, r6, lr}
 800e976:	000d      	movs	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e978:	4c0b      	ldr	r4, [pc, #44]	; (800e9a8 <vTaskPlaceOnEventList+0x34>)
 800e97a:	6861      	ldr	r1, [r4, #4]
 800e97c:	3118      	adds	r1, #24
 800e97e:	f7ff f8e1 	bl	800db44 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e982:	6860      	ldr	r0, [r4, #4]
 800e984:	3004      	adds	r0, #4
 800e986:	f7ff f8f5 	bl	800db74 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800e98a:	1c6b      	adds	r3, r5, #1
 800e98c:	d004      	beq.n	800e998 <vTaskPlaceOnEventList+0x24>
			xTimeToWake = xTickCount + xTicksToWait;
 800e98e:	68a0      	ldr	r0, [r4, #8]
 800e990:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e992:	f7ff fc4f 	bl	800e234 <prvAddCurrentTaskToDelayedList>
}
 800e996:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e998:	0020      	movs	r0, r4
 800e99a:	6861      	ldr	r1, [r4, #4]
 800e99c:	3070      	adds	r0, #112	; 0x70
 800e99e:	3104      	adds	r1, #4
 800e9a0:	f7ff f8c4 	bl	800db2c <vListInsertEnd>
 800e9a4:	e7f7      	b.n	800e996 <vTaskPlaceOnEventList+0x22>
 800e9a6:	46c0      	nop			; (mov r8, r8)
 800e9a8:	20002144 	.word	0x20002144

0800e9ac <vTaskPlaceOnEventListRestricted>:
	{
 800e9ac:	b570      	push	{r4, r5, r6, lr}
 800e9ae:	000d      	movs	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9b0:	4c06      	ldr	r4, [pc, #24]	; (800e9cc <vTaskPlaceOnEventListRestricted+0x20>)
 800e9b2:	6861      	ldr	r1, [r4, #4]
 800e9b4:	3118      	adds	r1, #24
 800e9b6:	f7ff f8b9 	bl	800db2c <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e9ba:	6860      	ldr	r0, [r4, #4]
 800e9bc:	3004      	adds	r0, #4
 800e9be:	f7ff f8d9 	bl	800db74 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800e9c2:	68a0      	ldr	r0, [r4, #8]
 800e9c4:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e9c6:	f7ff fc35 	bl	800e234 <prvAddCurrentTaskToDelayedList>
	}
 800e9ca:	bd70      	pop	{r4, r5, r6, pc}
 800e9cc:	20002144 	.word	0x20002144

0800e9d0 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e9d0:	68c3      	ldr	r3, [r0, #12]
{
 800e9d2:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e9d4:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e9d6:	0026      	movs	r6, r4
 800e9d8:	3618      	adds	r6, #24
 800e9da:	0030      	movs	r0, r6
 800e9dc:	f7ff f8ca 	bl	800db74 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9e0:	4b13      	ldr	r3, [pc, #76]	; (800ea30 <xTaskRemoveFromEventList+0x60>)
 800e9e2:	691b      	ldr	r3, [r3, #16]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d11a      	bne.n	800ea1e <xTaskRemoveFromEventList+0x4e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800e9e8:	1d26      	adds	r6, r4, #4
 800e9ea:	0030      	movs	r0, r6
 800e9ec:	f7ff f8c2 	bl	800db74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e9f0:	4d10      	ldr	r5, [pc, #64]	; (800ea34 <xTaskRemoveFromEventList+0x64>)
 800e9f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e9f4:	69aa      	ldr	r2, [r5, #24]
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d818      	bhi.n	800ea2c <xTaskRemoveFromEventList+0x5c>
 800e9fa:	0098      	lsls	r0, r3, #2
 800e9fc:	18c0      	adds	r0, r0, r3
 800e9fe:	4b0e      	ldr	r3, [pc, #56]	; (800ea38 <xTaskRemoveFromEventList+0x68>)
 800ea00:	0080      	lsls	r0, r0, #2
 800ea02:	18c0      	adds	r0, r0, r3
 800ea04:	0031      	movs	r1, r6
 800ea06:	f7ff f891 	bl	800db2c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea0a:	686b      	ldr	r3, [r5, #4]
 800ea0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ea0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800ea10:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d902      	bls.n	800ea1c <xTaskRemoveFromEventList+0x4c>
		xYieldPending = pdTRUE;
 800ea16:	2301      	movs	r3, #1
		xReturn = pdTRUE;
 800ea18:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800ea1a:	612b      	str	r3, [r5, #16]
}
 800ea1c:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea1e:	4d05      	ldr	r5, [pc, #20]	; (800ea34 <xTaskRemoveFromEventList+0x64>)
 800ea20:	0031      	movs	r1, r6
 800ea22:	0028      	movs	r0, r5
 800ea24:	3048      	adds	r0, #72	; 0x48
 800ea26:	f7ff f881 	bl	800db2c <vListInsertEnd>
 800ea2a:	e7ee      	b.n	800ea0a <xTaskRemoveFromEventList+0x3a>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea2c:	61ab      	str	r3, [r5, #24]
 800ea2e:	e7e4      	b.n	800e9fa <xTaskRemoveFromEventList+0x2a>
 800ea30:	200021c4 	.word	0x200021c4
 800ea34:	20002144 	.word	0x20002144
 800ea38:	200021e0 	.word	0x200021e0

0800ea3c <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea3c:	4b03      	ldr	r3, [pc, #12]	; (800ea4c <vTaskSetTimeOutState+0x10>)
 800ea3e:	695b      	ldr	r3, [r3, #20]
 800ea40:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea42:	4b03      	ldr	r3, [pc, #12]	; (800ea50 <vTaskSetTimeOutState+0x14>)
 800ea44:	689b      	ldr	r3, [r3, #8]
 800ea46:	6043      	str	r3, [r0, #4]
}
 800ea48:	4770      	bx	lr
 800ea4a:	46c0      	nop			; (mov r8, r8)
 800ea4c:	200021c4 	.word	0x200021c4
 800ea50:	20002144 	.word	0x20002144

0800ea54 <xTaskCheckForTimeOut>:
{
 800ea54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea56:	000e      	movs	r6, r1
 800ea58:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800ea5a:	f000 fc09 	bl	800f270 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ea5e:	4911      	ldr	r1, [pc, #68]	; (800eaa4 <xTaskCheckForTimeOut+0x50>)
			if( *pxTicksToWait == portMAX_DELAY )
 800ea60:	6832      	ldr	r2, [r6, #0]
		const TickType_t xConstTickCount = xTickCount;
 800ea62:	6888      	ldr	r0, [r1, #8]
			if( *pxTicksToWait == portMAX_DELAY )
 800ea64:	1c53      	adds	r3, r2, #1
 800ea66:	d01a      	beq.n	800ea9e <xTaskCheckForTimeOut+0x4a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea68:	4b0f      	ldr	r3, [pc, #60]	; (800eaa8 <xTaskCheckForTimeOut+0x54>)
 800ea6a:	6827      	ldr	r7, [r4, #0]
 800ea6c:	695d      	ldr	r5, [r3, #20]
 800ea6e:	469c      	mov	ip, r3
 800ea70:	6863      	ldr	r3, [r4, #4]
 800ea72:	42af      	cmp	r7, r5
 800ea74:	d002      	beq.n	800ea7c <xTaskCheckForTimeOut+0x28>
			xReturn = pdTRUE;
 800ea76:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea78:	4298      	cmp	r0, r3
 800ea7a:	d20c      	bcs.n	800ea96 <xTaskCheckForTimeOut+0x42>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ea7c:	1ac7      	subs	r7, r0, r3
			xReturn = pdTRUE;
 800ea7e:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ea80:	42ba      	cmp	r2, r7
 800ea82:	d908      	bls.n	800ea96 <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800ea84:	1a1b      	subs	r3, r3, r0
 800ea86:	189b      	adds	r3, r3, r2
 800ea88:	6033      	str	r3, [r6, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea8a:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 800ea8c:	2500      	movs	r5, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea8e:	695b      	ldr	r3, [r3, #20]
 800ea90:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea92:	688b      	ldr	r3, [r1, #8]
 800ea94:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800ea96:	f000 fbf7 	bl	800f288 <vPortExitCritical>
}
 800ea9a:	0028      	movs	r0, r5
 800ea9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800ea9e:	2500      	movs	r5, #0
 800eaa0:	e7f9      	b.n	800ea96 <xTaskCheckForTimeOut+0x42>
 800eaa2:	46c0      	nop			; (mov r8, r8)
 800eaa4:	20002144 	.word	0x20002144
 800eaa8:	200021c4 	.word	0x200021c4

0800eaac <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800eaac:	2201      	movs	r2, #1
 800eaae:	4b01      	ldr	r3, [pc, #4]	; (800eab4 <vTaskMissedYield+0x8>)
 800eab0:	611a      	str	r2, [r3, #16]
}
 800eab2:	4770      	bx	lr
 800eab4:	20002144 	.word	0x20002144

0800eab8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800eab8:	4b04      	ldr	r3, [pc, #16]	; (800eacc <xTaskGetSchedulerState+0x14>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eaba:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800eabc:	685a      	ldr	r2, [r3, #4]
 800eabe:	2a00      	cmp	r2, #0
 800eac0:	d003      	beq.n	800eaca <xTaskGetSchedulerState+0x12>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eac2:	6918      	ldr	r0, [r3, #16]
				xReturn = taskSCHEDULER_SUSPENDED;
 800eac4:	4243      	negs	r3, r0
 800eac6:	4158      	adcs	r0, r3
 800eac8:	0040      	lsls	r0, r0, #1
	}
 800eaca:	4770      	bx	lr
 800eacc:	200021c4 	.word	0x200021c4

0800ead0 <vTaskPriorityInherit>:
	{
 800ead0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ead2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ead4:	d018      	beq.n	800eb08 <vTaskPriorityInherit+0x38>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ead6:	4d16      	ldr	r5, [pc, #88]	; (800eb30 <vTaskPriorityInherit+0x60>)
 800ead8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800eada:	686b      	ldr	r3, [r5, #4]
 800eadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eade:	429a      	cmp	r2, r3
 800eae0:	d212      	bcs.n	800eb08 <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eae2:	6983      	ldr	r3, [r0, #24]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	db04      	blt.n	800eaf2 <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eae8:	686b      	ldr	r3, [r5, #4]
 800eaea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800eaec:	2307      	movs	r3, #7
 800eaee:	1a5b      	subs	r3, r3, r1
 800eaf0:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800eaf2:	0093      	lsls	r3, r2, #2
 800eaf4:	189b      	adds	r3, r3, r2
 800eaf6:	4e0f      	ldr	r6, [pc, #60]	; (800eb34 <vTaskPriorityInherit+0x64>)
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	6962      	ldr	r2, [r4, #20]
 800eafc:	18f3      	adds	r3, r6, r3
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d003      	beq.n	800eb0a <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb02:	686b      	ldr	r3, [r5, #4]
 800eb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb06:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800eb08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eb0a:	1d27      	adds	r7, r4, #4
 800eb0c:	0038      	movs	r0, r7
 800eb0e:	f7ff f831 	bl	800db74 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb12:	686b      	ldr	r3, [r5, #4]
					prvAddTaskToReadyList( pxTCB );
 800eb14:	69aa      	ldr	r2, [r5, #24]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb18:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d900      	bls.n	800eb20 <vTaskPriorityInherit+0x50>
 800eb1e:	61ab      	str	r3, [r5, #24]
 800eb20:	0098      	lsls	r0, r3, #2
 800eb22:	18c0      	adds	r0, r0, r3
 800eb24:	0080      	lsls	r0, r0, #2
 800eb26:	1830      	adds	r0, r6, r0
 800eb28:	0039      	movs	r1, r7
 800eb2a:	f7fe ffff 	bl	800db2c <vListInsertEnd>
	}
 800eb2e:	e7eb      	b.n	800eb08 <vTaskPriorityInherit+0x38>
 800eb30:	20002144 	.word	0x20002144
 800eb34:	200021e0 	.word	0x200021e0

0800eb38 <xTaskPriorityDisinherit>:
	{
 800eb38:	b570      	push	{r4, r5, r6, lr}
 800eb3a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800eb3c:	d008      	beq.n	800eb50 <xTaskPriorityDisinherit+0x18>
			( pxTCB->uxMutexesHeld )--;
 800eb3e:	6d03      	ldr	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb40:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800eb42:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800eb44:	3b01      	subs	r3, #1
 800eb46:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb48:	428a      	cmp	r2, r1
 800eb4a:	d001      	beq.n	800eb50 <xTaskPriorityDisinherit+0x18>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d001      	beq.n	800eb54 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800eb50:	2000      	movs	r0, #0
	}
 800eb52:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eb54:	1d05      	adds	r5, r0, #4
 800eb56:	0028      	movs	r0, r5
 800eb58:	f7ff f80c 	bl	800db74 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb5c:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb60:	1ad2      	subs	r2, r2, r3
 800eb62:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800eb64:	4a07      	ldr	r2, [pc, #28]	; (800eb84 <xTaskPriorityDisinherit+0x4c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb66:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800eb68:	6991      	ldr	r1, [r2, #24]
 800eb6a:	428b      	cmp	r3, r1
 800eb6c:	d900      	bls.n	800eb70 <xTaskPriorityDisinherit+0x38>
 800eb6e:	6193      	str	r3, [r2, #24]
 800eb70:	0098      	lsls	r0, r3, #2
 800eb72:	18c0      	adds	r0, r0, r3
 800eb74:	4b04      	ldr	r3, [pc, #16]	; (800eb88 <xTaskPriorityDisinherit+0x50>)
 800eb76:	0080      	lsls	r0, r0, #2
 800eb78:	18c0      	adds	r0, r0, r3
 800eb7a:	0029      	movs	r1, r5
 800eb7c:	f7fe ffd6 	bl	800db2c <vListInsertEnd>
					xReturn = pdTRUE;
 800eb80:	2001      	movs	r0, #1
		return xReturn;
 800eb82:	e7e6      	b.n	800eb52 <xTaskPriorityDisinherit+0x1a>
 800eb84:	20002144 	.word	0x20002144
 800eb88:	200021e0 	.word	0x200021e0

0800eb8c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800eb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb8e:	46c6      	mov	lr, r8
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800eb90:	2600      	movs	r6, #0
	{
 800eb92:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800eb94:	4b27      	ldr	r3, [pc, #156]	; (800ec34 <vTaskList+0xa8>)
	{
 800eb96:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800eb98:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800eb9a:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800eb9c:	9202      	str	r2, [sp, #8]
	{
 800eb9e:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800eba0:	69d8      	ldr	r0, [r3, #28]
 800eba2:	0140      	lsls	r0, r0, #5
 800eba4:	f000 fbde 	bl	800f364 <pvPortMalloc>
 800eba8:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800ebaa:	d03f      	beq.n	800ec2c <vTaskList+0xa0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ebac:	2200      	movs	r2, #0
 800ebae:	9902      	ldr	r1, [sp, #8]
 800ebb0:	f7ff fe5e 	bl	800e870 <uxTaskGetSystemState>
 800ebb4:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ebb6:	9603      	str	r6, [sp, #12]
 800ebb8:	9b03      	ldr	r3, [sp, #12]
 800ebba:	9a02      	ldr	r2, [sp, #8]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d932      	bls.n	800ec26 <vTaskList+0x9a>
 800ebc0:	4b1d      	ldr	r3, [pc, #116]	; (800ec38 <vTaskList+0xac>)
 800ebc2:	4e1e      	ldr	r6, [pc, #120]	; (800ec3c <vTaskList+0xb0>)
 800ebc4:	4698      	mov	r8, r3
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ebc6:	9b03      	ldr	r3, [sp, #12]
 800ebc8:	2700      	movs	r7, #0
 800ebca:	015b      	lsls	r3, r3, #5
 800ebcc:	18eb      	adds	r3, r5, r3
 800ebce:	7b1b      	ldrb	r3, [r3, #12]
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	2b03      	cmp	r3, #3
 800ebd6:	d801      	bhi.n	800ebdc <vTaskList+0x50>
 800ebd8:	4443      	add	r3, r8
 800ebda:	7d1f      	ldrb	r7, [r3, #20]
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ebdc:	9b03      	ldr	r3, [sp, #12]
 800ebde:	0020      	movs	r0, r4
 800ebe0:	015b      	lsls	r3, r3, #5
 800ebe2:	18eb      	adds	r3, r5, r3
 800ebe4:	6859      	ldr	r1, [r3, #4]
 800ebe6:	f7ff faad 	bl	800e144 <prvWriteNameToBuffer>
 800ebea:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ebec:	9b03      	ldr	r3, [sp, #12]
 800ebee:	9a03      	ldr	r2, [sp, #12]
 800ebf0:	9903      	ldr	r1, [sp, #12]
 800ebf2:	015b      	lsls	r3, r3, #5
 800ebf4:	0149      	lsls	r1, r1, #5
 800ebf6:	1869      	adds	r1, r5, r1
 800ebf8:	6889      	ldr	r1, [r1, #8]
 800ebfa:	18eb      	adds	r3, r5, r3
 800ebfc:	0152      	lsls	r2, r2, #5
 800ebfe:	691b      	ldr	r3, [r3, #16]
 800ec00:	18aa      	adds	r2, r5, r2
 800ec02:	9101      	str	r1, [sp, #4]
 800ec04:	8b92      	ldrh	r2, [r2, #28]
 800ec06:	0031      	movs	r1, r6
 800ec08:	9200      	str	r2, [sp, #0]
 800ec0a:	003a      	movs	r2, r7
 800ec0c:	f004 fa92 	bl	8013134 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ec10:	0020      	movs	r0, r4
 800ec12:	f7f1 fa81 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 800ec16:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ec18:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	9303      	str	r3, [sp, #12]
 800ec1e:	9a03      	ldr	r2, [sp, #12]
 800ec20:	9b02      	ldr	r3, [sp, #8]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d3cf      	bcc.n	800ebc6 <vTaskList+0x3a>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ec26:	0028      	movs	r0, r5
 800ec28:	f000 fc12 	bl	800f450 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec2c:	b004      	add	sp, #16
 800ec2e:	bc04      	pop	{r2}
 800ec30:	4690      	mov	r8, r2
 800ec32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec34:	20002144 	.word	0x20002144
 800ec38:	08017b18 	.word	0x08017b18
 800ec3c:	0801a574 	.word	0x0801a574

0800ec40 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ec40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec42:	46c6      	mov	lr, r8
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ec44:	2600      	movs	r6, #0
	{
 800ec46:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ec48:	4b28      	ldr	r3, [pc, #160]	; (800ecec <vTaskGetRunTimeStats+0xac>)
	{
 800ec4a:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800ec4c:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800ec4e:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800ec50:	9201      	str	r2, [sp, #4]
	{
 800ec52:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ec54:	69d8      	ldr	r0, [r3, #28]
 800ec56:	0140      	lsls	r0, r0, #5
 800ec58:	f000 fb84 	bl	800f364 <pvPortMalloc>
 800ec5c:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800ec5e:	d040      	beq.n	800ece2 <vTaskGetRunTimeStats+0xa2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ec60:	9901      	ldr	r1, [sp, #4]
 800ec62:	aa03      	add	r2, sp, #12
 800ec64:	f7ff fe04 	bl	800e870 <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ec68:	2164      	movs	r1, #100	; 0x64
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ec6a:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 800ec6c:	9803      	ldr	r0, [sp, #12]
 800ec6e:	f7f1 fa6f 	bl	8000150 <__udivsi3>
 800ec72:	1e01      	subs	r1, r0, #0
 800ec74:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800ec76:	d031      	beq.n	800ecdc <vTaskGetRunTimeStats+0x9c>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800ec78:	9602      	str	r6, [sp, #8]
 800ec7a:	9b02      	ldr	r3, [sp, #8]
 800ec7c:	9a01      	ldr	r2, [sp, #4]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d92c      	bls.n	800ecdc <vTaskGetRunTimeStats+0x9c>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ec82:	4b1b      	ldr	r3, [pc, #108]	; (800ecf0 <vTaskGetRunTimeStats+0xb0>)
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ec84:	4f1b      	ldr	r7, [pc, #108]	; (800ecf4 <vTaskGetRunTimeStats+0xb4>)
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ec86:	4698      	mov	r8, r3
 800ec88:	e00f      	b.n	800ecaa <vTaskGetRunTimeStats+0x6a>
 800ec8a:	0033      	movs	r3, r6
 800ec8c:	4641      	mov	r1, r8
 800ec8e:	f004 fa51 	bl	8013134 <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800ec92:	0020      	movs	r0, r4
 800ec94:	f7f1 fa40 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800ec98:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 800ec9a:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	9302      	str	r3, [sp, #8]
 800eca0:	9a02      	ldr	r2, [sp, #8]
 800eca2:	9b01      	ldr	r3, [sp, #4]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d219      	bcs.n	800ecdc <vTaskGetRunTimeStats+0x9c>
 800eca8:	9903      	ldr	r1, [sp, #12]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ecaa:	9b02      	ldr	r3, [sp, #8]
 800ecac:	015b      	lsls	r3, r3, #5
 800ecae:	18eb      	adds	r3, r5, r3
 800ecb0:	6998      	ldr	r0, [r3, #24]
 800ecb2:	f7f1 fa4d 	bl	8000150 <__udivsi3>
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ecb6:	9b02      	ldr	r3, [sp, #8]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ecb8:	0006      	movs	r6, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ecba:	015b      	lsls	r3, r3, #5
 800ecbc:	18eb      	adds	r3, r5, r3
 800ecbe:	6859      	ldr	r1, [r3, #4]
 800ecc0:	0020      	movs	r0, r4
 800ecc2:	f7ff fa3f 	bl	800e144 <prvWriteNameToBuffer>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ecc6:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ecc8:	0004      	movs	r4, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ecca:	015b      	lsls	r3, r3, #5
 800eccc:	18eb      	adds	r3, r5, r3
 800ecce:	699a      	ldr	r2, [r3, #24]
					if( ulStatsAsPercentage > 0UL )
 800ecd0:	2e00      	cmp	r6, #0
 800ecd2:	d1da      	bne.n	800ec8a <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ecd4:	0039      	movs	r1, r7
 800ecd6:	f004 fa2d 	bl	8013134 <sprintf>
 800ecda:	e7da      	b.n	800ec92 <vTaskGetRunTimeStats+0x52>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ecdc:	0028      	movs	r0, r5
 800ecde:	f000 fbb7 	bl	800f450 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ece2:	b004      	add	sp, #16
 800ece4:	bc04      	pop	{r2}
 800ece6:	4690      	mov	r8, r2
 800ece8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecea:	46c0      	nop			; (mov r8, r8)
 800ecec:	20002144 	.word	0x20002144
 800ecf0:	0801a584 	.word	0x0801a584
 800ecf4:	0801a590 	.word	0x0801a590

0800ecf8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ecf8:	4b04      	ldr	r3, [pc, #16]	; (800ed0c <pvTaskIncrementMutexHeldCount+0x14>)
 800ecfa:	685a      	ldr	r2, [r3, #4]
 800ecfc:	2a00      	cmp	r2, #0
 800ecfe:	d003      	beq.n	800ed08 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ed00:	6859      	ldr	r1, [r3, #4]
 800ed02:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800ed04:	3201      	adds	r2, #1
 800ed06:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ed08:	6858      	ldr	r0, [r3, #4]
	}
 800ed0a:	4770      	bx	lr
 800ed0c:	20002144 	.word	0x20002144

0800ed10 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ed10:	b570      	push	{r4, r5, r6, lr}
 800ed12:	0006      	movs	r6, r0
 800ed14:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ed16:	f000 faab 	bl	800f270 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ed1a:	4c1c      	ldr	r4, [pc, #112]	; (800ed8c <ulTaskNotifyTake+0x7c>)
 800ed1c:	6863      	ldr	r3, [r4, #4]
 800ed1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d105      	bne.n	800ed30 <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800ed24:	2101      	movs	r1, #1
 800ed26:	6862      	ldr	r2, [r4, #4]
 800ed28:	335c      	adds	r3, #92	; 0x5c
 800ed2a:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800ed2c:	2d00      	cmp	r5, #0
 800ed2e:	d119      	bne.n	800ed64 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ed30:	f000 faaa 	bl	800f288 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ed34:	f000 fa9c 	bl	800f270 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ed38:	6863      	ldr	r3, [r4, #4]
 800ed3a:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800ed3c:	2d00      	cmp	r5, #0
 800ed3e:	d005      	beq.n	800ed4c <ulTaskNotifyTake+0x3c>
			{
				if( xClearCountOnExit != pdFALSE )
 800ed40:	2e00      	cmp	r6, #0
 800ed42:	d10b      	bne.n	800ed5c <ulTaskNotifyTake+0x4c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800ed44:	6862      	ldr	r2, [r4, #4]
 800ed46:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ed48:	3b01      	subs	r3, #1
 800ed4a:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800ed4c:	235c      	movs	r3, #92	; 0x5c
 800ed4e:	2100      	movs	r1, #0
 800ed50:	6862      	ldr	r2, [r4, #4]
 800ed52:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800ed54:	f000 fa98 	bl	800f288 <vPortExitCritical>

		return ulReturn;
	}
 800ed58:	0028      	movs	r0, r5
 800ed5a:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	6863      	ldr	r3, [r4, #4]
 800ed60:	659a      	str	r2, [r3, #88]	; 0x58
 800ed62:	e7f3      	b.n	800ed4c <ulTaskNotifyTake+0x3c>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ed64:	6860      	ldr	r0, [r4, #4]
 800ed66:	3004      	adds	r0, #4
 800ed68:	f7fe ff04 	bl	800db74 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800ed6c:	1c6b      	adds	r3, r5, #1
 800ed6e:	d006      	beq.n	800ed7e <ulTaskNotifyTake+0x6e>
							xTimeToWake = xTickCount + xTicksToWait;
 800ed70:	68a0      	ldr	r0, [r4, #8]
 800ed72:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ed74:	f7ff fa5e 	bl	800e234 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800ed78:	f000 fa6e 	bl	800f258 <vPortYield>
 800ed7c:	e7d8      	b.n	800ed30 <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ed7e:	0020      	movs	r0, r4
 800ed80:	6861      	ldr	r1, [r4, #4]
 800ed82:	3070      	adds	r0, #112	; 0x70
 800ed84:	3104      	adds	r1, #4
 800ed86:	f7fe fed1 	bl	800db2c <vListInsertEnd>
 800ed8a:	e7f5      	b.n	800ed78 <ulTaskNotifyTake+0x68>
 800ed8c:	20002144 	.word	0x20002144

0800ed90 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ed90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed92:	001e      	movs	r6, r3
 800ed94:	0004      	movs	r4, r0
 800ed96:	000f      	movs	r7, r1
 800ed98:	0015      	movs	r5, r2
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800ed9a:	f000 fa69 	bl	800f270 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ed9e:	2e00      	cmp	r6, #0
 800eda0:	d001      	beq.n	800eda6 <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800eda2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eda4:	6033      	str	r3, [r6, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800eda6:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 800eda8:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 800edaa:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->eNotifyState = eNotified;
 800edac:	54a1      	strb	r1, [r4, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 800edae:	b2db      	uxtb	r3, r3

			switch( eAction )
 800edb0:	2d02      	cmp	r5, #2
 800edb2:	d02e      	beq.n	800ee12 <xTaskGenericNotify+0x82>
 800edb4:	d927      	bls.n	800ee06 <xTaskGenericNotify+0x76>
 800edb6:	2d03      	cmp	r5, #3
 800edb8:	d003      	beq.n	800edc2 <xTaskGenericNotify+0x32>
 800edba:	2d04      	cmp	r5, #4
 800edbc:	d102      	bne.n	800edc4 <xTaskGenericNotify+0x34>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800edbe:	2b02      	cmp	r3, #2
 800edc0:	d02b      	beq.n	800ee1a <xTaskGenericNotify+0x8a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800edc2:	65a7      	str	r7, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d004      	beq.n	800edd2 <xTaskGenericNotify+0x42>
 800edc8:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800edca:	f000 fa5d 	bl	800f288 <vPortExitCritical>

		return xReturn;
	}
 800edce:	0020      	movs	r0, r4
 800edd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800edd2:	1d26      	adds	r6, r4, #4
 800edd4:	0030      	movs	r0, r6
 800edd6:	f7fe fecd 	bl	800db74 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800edda:	4d11      	ldr	r5, [pc, #68]	; (800ee20 <xTaskGenericNotify+0x90>)
 800eddc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800edde:	69aa      	ldr	r2, [r5, #24]
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d900      	bls.n	800ede6 <xTaskGenericNotify+0x56>
 800ede4:	61ab      	str	r3, [r5, #24]
 800ede6:	0098      	lsls	r0, r3, #2
 800ede8:	18c0      	adds	r0, r0, r3
 800edea:	4b0e      	ldr	r3, [pc, #56]	; (800ee24 <xTaskGenericNotify+0x94>)
 800edec:	0080      	lsls	r0, r0, #2
 800edee:	18c0      	adds	r0, r0, r3
 800edf0:	0031      	movs	r1, r6
 800edf2:	f7fe fe9b 	bl	800db2c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800edf6:	686b      	ldr	r3, [r5, #4]
 800edf8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800edfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d9e3      	bls.n	800edc8 <xTaskGenericNotify+0x38>
					taskYIELD_IF_USING_PREEMPTION();
 800ee00:	f000 fa2a 	bl	800f258 <vPortYield>
 800ee04:	e7e0      	b.n	800edc8 <xTaskGenericNotify+0x38>
			switch( eAction )
 800ee06:	2d01      	cmp	r5, #1
 800ee08:	d1dc      	bne.n	800edc4 <xTaskGenericNotify+0x34>
					pxTCB->ulNotifiedValue |= ulValue;
 800ee0a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ee0c:	4317      	orrs	r7, r2
 800ee0e:	65a7      	str	r7, [r4, #88]	; 0x58
					break;
 800ee10:	e7d8      	b.n	800edc4 <xTaskGenericNotify+0x34>
					( pxTCB->ulNotifiedValue )++;
 800ee12:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ee14:	3201      	adds	r2, #1
 800ee16:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800ee18:	e7d4      	b.n	800edc4 <xTaskGenericNotify+0x34>
						xReturn = pdFAIL;
 800ee1a:	2400      	movs	r4, #0
 800ee1c:	e7d5      	b.n	800edca <xTaskGenericNotify+0x3a>
 800ee1e:	46c0      	nop			; (mov r8, r8)
 800ee20:	20002144 	.word	0x20002144
 800ee24:	200021e0 	.word	0x200021e0

0800ee28 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ee28:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ee2a:	f000 fa21 	bl	800f270 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ee2e:	4c0f      	ldr	r4, [pc, #60]	; (800ee6c <prvCheckForValidListAndQueue+0x44>)
 800ee30:	6823      	ldr	r3, [r4, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d002      	beq.n	800ee3c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee36:	f000 fa27 	bl	800f288 <vPortExitCritical>
}
 800ee3a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList2 );
 800ee3c:	0025      	movs	r5, r4
			vListInitialise( &xActiveTimerList1 );
 800ee3e:	1d26      	adds	r6, r4, #4
 800ee40:	0030      	movs	r0, r6
			vListInitialise( &xActiveTimerList2 );
 800ee42:	3518      	adds	r5, #24
			vListInitialise( &xActiveTimerList1 );
 800ee44:	f7fe fe62 	bl	800db0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ee48:	0028      	movs	r0, r5
 800ee4a:	f7fe fe5f 	bl	800db0c <vListInitialise>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ee4e:	2200      	movs	r2, #0
 800ee50:	2110      	movs	r1, #16
 800ee52:	2004      	movs	r0, #4
			pxCurrentTimerList = &xActiveTimerList1;
 800ee54:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 800ee56:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ee58:	f7fe ff6a 	bl	800dd30 <xQueueGenericCreate>
 800ee5c:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	d0e9      	beq.n	800ee36 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ee62:	4903      	ldr	r1, [pc, #12]	; (800ee70 <prvCheckForValidListAndQueue+0x48>)
 800ee64:	f7ff f93e 	bl	800e0e4 <vQueueAddToRegistry>
 800ee68:	e7e5      	b.n	800ee36 <prvCheckForValidListAndQueue+0xe>
 800ee6a:	46c0      	nop			; (mov r8, r8)
 800ee6c:	2000226c 	.word	0x2000226c
 800ee70:	0801a59c 	.word	0x0801a59c

0800ee74 <prvInsertTimerInActiveList>:
{
 800ee74:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ee76:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee78:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800ee7a:	4291      	cmp	r1, r2
 800ee7c:	d806      	bhi.n	800ee8c <prvInsertTimerInActiveList+0x18>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800ee7e:	1ad2      	subs	r2, r2, r3
 800ee80:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
 800ee82:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d30d      	bcc.n	800eea4 <prvInsertTimerInActiveList+0x30>
}
 800ee88:	0020      	movs	r0, r4
 800ee8a:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d202      	bcs.n	800ee96 <prvInsertTimerInActiveList+0x22>
			xProcessTimerNow = pdTRUE;
 800ee90:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ee92:	4299      	cmp	r1, r3
 800ee94:	d2f8      	bcs.n	800ee88 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee96:	4b07      	ldr	r3, [pc, #28]	; (800eeb4 <prvInsertTimerInActiveList+0x40>)
 800ee98:	1d01      	adds	r1, r0, #4
 800ee9a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ee9c:	f7fe fe52 	bl	800db44 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800eea0:	2400      	movs	r4, #0
 800eea2:	e7f1      	b.n	800ee88 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eea4:	4b03      	ldr	r3, [pc, #12]	; (800eeb4 <prvInsertTimerInActiveList+0x40>)
 800eea6:	1d01      	adds	r1, r0, #4
 800eea8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eeaa:	f7fe fe4b 	bl	800db44 <vListInsert>
 800eeae:	2400      	movs	r4, #0
 800eeb0:	e7ea      	b.n	800ee88 <prvInsertTimerInActiveList+0x14>
 800eeb2:	46c0      	nop			; (mov r8, r8)
 800eeb4:	2000226c 	.word	0x2000226c

0800eeb8 <xTimerCreateTimerTask>:
{
 800eeb8:	b500      	push	{lr}
 800eeba:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800eebc:	f7ff ffb4 	bl	800ee28 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800eec0:	4b08      	ldr	r3, [pc, #32]	; (800eee4 <xTimerCreateTimerTask+0x2c>)
BaseType_t xReturn = pdFAIL;
 800eec2:	2000      	movs	r0, #0
	if( xTimerQueue != NULL )
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d00a      	beq.n	800eee0 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800eeca:	2303      	movs	r3, #3
 800eecc:	9003      	str	r0, [sp, #12]
 800eece:	9002      	str	r0, [sp, #8]
 800eed0:	9001      	str	r0, [sp, #4]
 800eed2:	9300      	str	r3, [sp, #0]
 800eed4:	22a0      	movs	r2, #160	; 0xa0
 800eed6:	2300      	movs	r3, #0
 800eed8:	4903      	ldr	r1, [pc, #12]	; (800eee8 <xTimerCreateTimerTask+0x30>)
 800eeda:	4804      	ldr	r0, [pc, #16]	; (800eeec <xTimerCreateTimerTask+0x34>)
 800eedc:	f7ff fa1e 	bl	800e31c <xTaskGenericCreate>
}
 800eee0:	b005      	add	sp, #20
 800eee2:	bd00      	pop	{pc}
 800eee4:	2000226c 	.word	0x2000226c
 800eee8:	0801a5a4 	.word	0x0801a5a4
 800eeec:	0800eff1 	.word	0x0800eff1

0800eef0 <xTimerCreate>:
{
 800eef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eef2:	46c6      	mov	lr, r8
 800eef4:	000d      	movs	r5, r1
 800eef6:	b500      	push	{lr}
 800eef8:	4680      	mov	r8, r0
 800eefa:	0017      	movs	r7, r2
 800eefc:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800eefe:	2900      	cmp	r1, #0
 800ef00:	d014      	beq.n	800ef2c <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800ef02:	202c      	movs	r0, #44	; 0x2c
 800ef04:	f000 fa2e 	bl	800f364 <pvPortMalloc>
 800ef08:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800ef0a:	d00b      	beq.n	800ef24 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800ef0c:	f7ff ff8c 	bl	800ee28 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800ef10:	4643      	mov	r3, r8
 800ef12:	6023      	str	r3, [r4, #0]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ef14:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ef16:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800ef18:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800ef1a:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ef1c:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ef1e:	1d20      	adds	r0, r4, #4
 800ef20:	f7fe fe00 	bl	800db24 <vListInitialiseItem>
}
 800ef24:	0020      	movs	r0, r4
 800ef26:	bc04      	pop	{r2}
 800ef28:	4690      	mov	r8, r2
 800ef2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTimer = NULL;
 800ef2c:	2400      	movs	r4, #0
	return ( TimerHandle_t ) pxNewTimer;
 800ef2e:	e7f9      	b.n	800ef24 <xTimerCreate+0x34>

0800ef30 <xTimerGenericCommand>:
{
 800ef30:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800ef32:	4d13      	ldr	r5, [pc, #76]	; (800ef80 <xTimerGenericCommand+0x50>)
{
 800ef34:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800ef36:	682c      	ldr	r4, [r5, #0]
{
 800ef38:	001e      	movs	r6, r3
	if( xTimerQueue != NULL )
 800ef3a:	2c00      	cmp	r4, #0
 800ef3c:	d017      	beq.n	800ef6e <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 800ef3e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef40:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ef42:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef44:	2905      	cmp	r1, #5
 800ef46:	dc0a      	bgt.n	800ef5e <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef48:	f7ff fdb6 	bl	800eab8 <xTaskGetSchedulerState>
 800ef4c:	2802      	cmp	r0, #2
 800ef4e:	d010      	beq.n	800ef72 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ef50:	6828      	ldr	r0, [r5, #0]
 800ef52:	2300      	movs	r3, #0
 800ef54:	2200      	movs	r2, #0
 800ef56:	4669      	mov	r1, sp
 800ef58:	f7fe ff16 	bl	800dd88 <xQueueGenericSend>
 800ef5c:	e005      	b.n	800ef6a <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ef5e:	2300      	movs	r3, #0
 800ef60:	0032      	movs	r2, r6
 800ef62:	4669      	mov	r1, sp
 800ef64:	0020      	movs	r0, r4
 800ef66:	f7fe ff8b 	bl	800de80 <xQueueGenericSendFromISR>
}
 800ef6a:	b004      	add	sp, #16
 800ef6c:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 800ef6e:	2000      	movs	r0, #0
	return xReturn;
 800ef70:	e7fb      	b.n	800ef6a <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ef72:	6828      	ldr	r0, [r5, #0]
 800ef74:	2300      	movs	r3, #0
 800ef76:	9a08      	ldr	r2, [sp, #32]
 800ef78:	4669      	mov	r1, sp
 800ef7a:	f7fe ff05 	bl	800dd88 <xQueueGenericSend>
 800ef7e:	e7f4      	b.n	800ef6a <xTimerGenericCommand+0x3a>
 800ef80:	2000226c 	.word	0x2000226c

0800ef84 <prvSwitchTimerLists>:
{
 800ef84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef86:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef88:	2300      	movs	r3, #0
{
 800ef8a:	b500      	push	{lr}
 800ef8c:	4e17      	ldr	r6, [pc, #92]	; (800efec <prvSwitchTimerLists+0x68>)
 800ef8e:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef90:	4698      	mov	r8, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef92:	e00c      	b.n	800efae <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef94:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef96:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef98:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef9a:	1d25      	adds	r5, r4, #4
 800ef9c:	0028      	movs	r0, r5
 800ef9e:	f7fe fde9 	bl	800db74 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efa4:	0020      	movs	r0, r4
 800efa6:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800efa8:	69e3      	ldr	r3, [r4, #28]
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d00a      	beq.n	800efc4 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efae:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	2a00      	cmp	r2, #0
 800efb4:	d1ee      	bne.n	800ef94 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 800efb6:	6b32      	ldr	r2, [r6, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 800efb8:	6333      	str	r3, [r6, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
 800efba:	62f2      	str	r2, [r6, #44]	; 0x2c
}
 800efbc:	b002      	add	sp, #8
 800efbe:	bc04      	pop	{r2}
 800efc0:	4690      	mov	r8, r2
 800efc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800efc4:	69a3      	ldr	r3, [r4, #24]
 800efc6:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 800efc8:	429f      	cmp	r7, r3
 800efca:	d206      	bcs.n	800efda <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800efcc:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800efce:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800efd0:	0029      	movs	r1, r5
 800efd2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800efd4:	f7fe fdb6 	bl	800db44 <vListInsert>
 800efd8:	e7e9      	b.n	800efae <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800efda:	4643      	mov	r3, r8
 800efdc:	003a      	movs	r2, r7
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	2100      	movs	r1, #0
 800efe2:	2300      	movs	r3, #0
 800efe4:	0020      	movs	r0, r4
 800efe6:	f7ff ffa3 	bl	800ef30 <xTimerGenericCommand>
 800efea:	e7e0      	b.n	800efae <prvSwitchTimerLists+0x2a>
 800efec:	2000226c 	.word	0x2000226c

0800eff0 <prvTimerTask>:
		xNextExpireTime = ( TickType_t ) 0U;
 800eff0:	2300      	movs	r3, #0
{
 800eff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eff4:	4645      	mov	r5, r8
 800eff6:	4657      	mov	r7, sl
 800eff8:	46de      	mov	lr, fp
 800effa:	464e      	mov	r6, r9
		xNextExpireTime = ( TickType_t ) 0U;
 800effc:	4698      	mov	r8, r3
 800effe:	3301      	adds	r3, #1
 800f000:	469a      	mov	sl, r3
{
 800f002:	b5e0      	push	{r5, r6, r7, lr}
 800f004:	4d61      	ldr	r5, [pc, #388]	; (800f18c <prvTimerTask+0x19c>)
 800f006:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f008:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if( *pxListWasEmpty == pdFALSE )
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	2a00      	cmp	r2, #0
 800f00e:	d050      	beq.n	800f0b2 <prvTimerTask+0xc2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f010:	68db      	ldr	r3, [r3, #12]
 800f012:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800f014:	f7ff fae2 	bl	800e5dc <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f018:	f7ff fae8 	bl	800e5ec <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f01c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f01e:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f020:	4283      	cmp	r3, r0
 800f022:	d84e      	bhi.n	800f0c2 <prvTimerTask+0xd2>
	xLastTime = xTimeNow;
 800f024:	6368      	str	r0, [r5, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f026:	4286      	cmp	r6, r0
 800f028:	d961      	bls.n	800f0ee <prvTimerTask+0xfe>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f02a:	1b31      	subs	r1, r6, r4
 800f02c:	6828      	ldr	r0, [r5, #0]
 800f02e:	f7ff f86b 	bl	800e108 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f032:	f7ff fb71 	bl	800e718 <xTaskResumeAll>
 800f036:	2800      	cmp	r0, #0
 800f038:	d056      	beq.n	800f0e8 <prvTimerTask+0xf8>
 800f03a:	2784      	movs	r7, #132	; 0x84
 800f03c:	00bf      	lsls	r7, r7, #2
 800f03e:	23c7      	movs	r3, #199	; 0xc7
 800f040:	4699      	mov	r9, r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f042:	2300      	movs	r3, #0
 800f044:	2200      	movs	r2, #0
 800f046:	a904      	add	r1, sp, #16
 800f048:	6828      	ldr	r0, [r5, #0]
 800f04a:	f7fe ff7b 	bl	800df44 <xQueueGenericReceive>
 800f04e:	2800      	cmp	r0, #0
 800f050:	d0da      	beq.n	800f008 <prvTimerTask+0x18>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f052:	9b04      	ldr	r3, [sp, #16]
 800f054:	9c06      	ldr	r4, [sp, #24]
 800f056:	9302      	str	r3, [sp, #8]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	da0b      	bge.n	800f074 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f05c:	9b07      	ldr	r3, [sp, #28]
 800f05e:	0020      	movs	r0, r4
 800f060:	9302      	str	r3, [sp, #8]
 800f062:	9b05      	ldr	r3, [sp, #20]
 800f064:	9902      	ldr	r1, [sp, #8]
 800f066:	9303      	str	r3, [sp, #12]
 800f068:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f06a:	9b04      	ldr	r3, [sp, #16]
 800f06c:	9302      	str	r3, [sp, #8]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	dbe7      	blt.n	800f042 <prvTimerTask+0x52>
 800f072:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f074:	6963      	ldr	r3, [r4, #20]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d002      	beq.n	800f080 <prvTimerTask+0x90>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f07a:	1d20      	adds	r0, r4, #4
 800f07c:	f7fe fd7a 	bl	800db74 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800f080:	f7ff fab4 	bl	800e5ec <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f084:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f086:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 800f088:	4298      	cmp	r0, r3
 800f08a:	d320      	bcc.n	800f0ce <prvTimerTask+0xde>
 800f08c:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
 800f08e:	636e      	str	r6, [r5, #52]	; 0x34
 800f090:	2b09      	cmp	r3, #9
 800f092:	d8d6      	bhi.n	800f042 <prvTimerTask+0x52>
 800f094:	4652      	mov	r2, sl
 800f096:	409a      	lsls	r2, r3
 800f098:	0013      	movs	r3, r2
 800f09a:	403a      	ands	r2, r7
 800f09c:	4693      	mov	fp, r2
 800f09e:	d16b      	bne.n	800f178 <prvTimerTask+0x188>
 800f0a0:	464a      	mov	r2, r9
 800f0a2:	421a      	tst	r2, r3
 800f0a4:	d144      	bne.n	800f130 <prvTimerTask+0x140>
 800f0a6:	069b      	lsls	r3, r3, #26
 800f0a8:	d5cb      	bpl.n	800f042 <prvTimerTask+0x52>
					vPortFree( pxTimer );
 800f0aa:	0020      	movs	r0, r4
 800f0ac:	f000 f9d0 	bl	800f450 <vPortFree>
 800f0b0:	e7c5      	b.n	800f03e <prvTimerTask+0x4e>
	vTaskSuspendAll();
 800f0b2:	f7ff fa93 	bl	800e5dc <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f0b6:	f7ff fa99 	bl	800e5ec <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f0ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f0bc:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f0be:	4283      	cmp	r3, r0
 800f0c0:	d908      	bls.n	800f0d4 <prvTimerTask+0xe4>
		prvSwitchTimerLists();
 800f0c2:	f7ff ff5f 	bl	800ef84 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800f0c6:	636c      	str	r4, [r5, #52]	; 0x34
			( void ) xTaskResumeAll();
 800f0c8:	f7ff fb26 	bl	800e718 <xTaskResumeAll>
 800f0cc:	e7b5      	b.n	800f03a <prvTimerTask+0x4a>
		prvSwitchTimerLists();
 800f0ce:	f7ff ff59 	bl	800ef84 <prvSwitchTimerLists>
 800f0d2:	e7db      	b.n	800f08c <prvTimerTask+0x9c>
		xNextExpireTime = ( TickType_t ) 0U;
 800f0d4:	2600      	movs	r6, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f0d6:	6828      	ldr	r0, [r5, #0]
 800f0d8:	1b31      	subs	r1, r6, r4
	xLastTime = xTimeNow;
 800f0da:	636c      	str	r4, [r5, #52]	; 0x34
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f0dc:	f7ff f814 	bl	800e108 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f0e0:	f7ff fb1a 	bl	800e718 <xTaskResumeAll>
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	d1a8      	bne.n	800f03a <prvTimerTask+0x4a>
					portYIELD_WITHIN_API();
 800f0e8:	f000 f8b6 	bl	800f258 <vPortYield>
 800f0ec:	e7a5      	b.n	800f03a <prvTimerTask+0x4a>
				( void ) xTaskResumeAll();
 800f0ee:	f7ff fb13 	bl	800e718 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f0f4:	68db      	ldr	r3, [r3, #12]
 800f0f6:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0f8:	1d38      	adds	r0, r7, #4
 800f0fa:	f7fe fd3b 	bl	800db74 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	2b01      	cmp	r3, #1
 800f102:	d003      	beq.n	800f10c <prvTimerTask+0x11c>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f106:	0038      	movs	r0, r7
 800f108:	4798      	blx	r3
 800f10a:	e796      	b.n	800f03a <prvTimerTask+0x4a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f10c:	69bb      	ldr	r3, [r7, #24]
 800f10e:	0022      	movs	r2, r4
 800f110:	18f1      	adds	r1, r6, r3
 800f112:	0038      	movs	r0, r7
 800f114:	0033      	movs	r3, r6
 800f116:	f7ff fead 	bl	800ee74 <prvInsertTimerInActiveList>
 800f11a:	2801      	cmp	r0, #1
 800f11c:	d1f2      	bne.n	800f104 <prvTimerTask+0x114>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f11e:	4643      	mov	r3, r8
 800f120:	0032      	movs	r2, r6
 800f122:	9300      	str	r3, [sp, #0]
 800f124:	2100      	movs	r1, #0
 800f126:	2300      	movs	r3, #0
 800f128:	0038      	movs	r0, r7
 800f12a:	f7ff ff01 	bl	800ef30 <xTimerGenericCommand>
 800f12e:	e7e9      	b.n	800f104 <prvTimerTask+0x114>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f130:	9b05      	ldr	r3, [sp, #20]
 800f132:	0020      	movs	r0, r4
 800f134:	9302      	str	r3, [sp, #8]
 800f136:	9a02      	ldr	r2, [sp, #8]
 800f138:	69a3      	ldr	r3, [r4, #24]
 800f13a:	4694      	mov	ip, r2
 800f13c:	4463      	add	r3, ip
 800f13e:	0019      	movs	r1, r3
 800f140:	0013      	movs	r3, r2
 800f142:	0032      	movs	r2, r6
 800f144:	f7ff fe96 	bl	800ee74 <prvInsertTimerInActiveList>
 800f148:	2801      	cmp	r0, #1
 800f14a:	d000      	beq.n	800f14e <prvTimerTask+0x15e>
 800f14c:	e777      	b.n	800f03e <prvTimerTask+0x4e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f14e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f150:	0020      	movs	r0, r4
 800f152:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f154:	69e3      	ldr	r3, [r4, #28]
 800f156:	2b01      	cmp	r3, #1
 800f158:	d000      	beq.n	800f15c <prvTimerTask+0x16c>
 800f15a:	e770      	b.n	800f03e <prvTimerTask+0x4e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f15c:	69a1      	ldr	r1, [r4, #24]
 800f15e:	9b05      	ldr	r3, [sp, #20]
 800f160:	468c      	mov	ip, r1
 800f162:	9302      	str	r3, [sp, #8]
 800f164:	4463      	add	r3, ip
 800f166:	001a      	movs	r2, r3
 800f168:	465b      	mov	r3, fp
 800f16a:	2100      	movs	r1, #0
 800f16c:	9300      	str	r3, [sp, #0]
 800f16e:	0020      	movs	r0, r4
 800f170:	2300      	movs	r3, #0
 800f172:	f7ff fedd 	bl	800ef30 <xTimerGenericCommand>
 800f176:	e762      	b.n	800f03e <prvTimerTask+0x4e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f178:	9905      	ldr	r1, [sp, #20]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f17a:	0033      	movs	r3, r6
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f17c:	61a1      	str	r1, [r4, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f17e:	0032      	movs	r2, r6
 800f180:	1989      	adds	r1, r1, r6
 800f182:	0020      	movs	r0, r4
 800f184:	f7ff fe76 	bl	800ee74 <prvInsertTimerInActiveList>
 800f188:	e759      	b.n	800f03e <prvTimerTask+0x4e>
 800f18a:	46c0      	nop			; (mov r8, r8)
 800f18c:	2000226c 	.word	0x2000226c

0800f190 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800f190:	b510      	push	{r4, lr}
 800f192:	0004      	movs	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800f194:	f000 f86c 	bl	800f270 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800f198:	6964      	ldr	r4, [r4, #20]
 800f19a:	1e63      	subs	r3, r4, #1
 800f19c:	419c      	sbcs	r4, r3
	}
	taskEXIT_CRITICAL();
 800f19e:	f000 f873 	bl	800f288 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800f1a2:	0020      	movs	r0, r4
 800f1a4:	bd10      	pop	{r4, pc}
 800f1a6:	46c0      	nop			; (mov r8, r8)

0800f1a8 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f1a8:	b510      	push	{r4, lr}
 800f1aa:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800f1ac:	f000 f860 	bl	800f270 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f1b0:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f1b2:	f000 f869 	bl	800f288 <vPortExitCritical>

	return pvReturn;
}
 800f1b6:	0020      	movs	r0, r4
 800f1b8:	bd10      	pop	{r4, pc}
 800f1ba:	46c0      	nop			; (mov r8, r8)

0800f1bc <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800f1bc:	b672      	cpsid	i
 800f1be:	e7fe      	b.n	800f1be <prvTaskExitError+0x2>

0800f1c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f1c0:	4a06      	ldr	r2, [pc, #24]	; (800f1dc <pxCurrentTCBConst2>)
 800f1c2:	6813      	ldr	r3, [r2, #0]
 800f1c4:	6818      	ldr	r0, [r3, #0]
 800f1c6:	3020      	adds	r0, #32
 800f1c8:	f380 8809 	msr	PSP, r0
 800f1cc:	2002      	movs	r0, #2
 800f1ce:	f380 8814 	msr	CONTROL, r0
 800f1d2:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f1d4:	46ae      	mov	lr, r5
 800f1d6:	b662      	cpsie	i
 800f1d8:	bd00      	pop	{pc}
 800f1da:	46c0      	nop			; (mov r8, r8)

0800f1dc <pxCurrentTCBConst2>:
 800f1dc:	20002148 	.word	0x20002148

0800f1e0 <pxPortInitialiseStack>:
{
 800f1e0:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f1e2:	2480      	movs	r4, #128	; 0x80
 800f1e4:	1f03      	subs	r3, r0, #4
 800f1e6:	0464      	lsls	r4, r4, #17
 800f1e8:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f1ea:	3b04      	subs	r3, #4
 800f1ec:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f1ee:	4903      	ldr	r1, [pc, #12]	; (800f1fc <pxPortInitialiseStack+0x1c>)
 800f1f0:	3b04      	subs	r3, #4
 800f1f2:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f1f4:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800f1f6:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f1f8:	601a      	str	r2, [r3, #0]
}
 800f1fa:	bd10      	pop	{r4, pc}
 800f1fc:	0800f1bd 	.word	0x0800f1bd

0800f200 <SVC_Handler>:
 800f200:	4770      	bx	lr
 800f202:	46c0      	nop			; (mov r8, r8)

0800f204 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f204:	22ff      	movs	r2, #255	; 0xff
 800f206:	4b0f      	ldr	r3, [pc, #60]	; (800f244 <xPortStartScheduler+0x40>)
 800f208:	0412      	lsls	r2, r2, #16
 800f20a:	6819      	ldr	r1, [r3, #0]
{
 800f20c:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f20e:	430a      	orrs	r2, r1
 800f210:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f212:	22ff      	movs	r2, #255	; 0xff
 800f214:	6819      	ldr	r1, [r3, #0]
 800f216:	0612      	lsls	r2, r2, #24
 800f218:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f21a:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f21c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f21e:	4b0a      	ldr	r3, [pc, #40]	; (800f248 <xPortStartScheduler+0x44>)
 800f220:	0089      	lsls	r1, r1, #2
 800f222:	6818      	ldr	r0, [r3, #0]
 800f224:	f7f0 ff94 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f228:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f22a:	4b08      	ldr	r3, [pc, #32]	; (800f24c <xPortStartScheduler+0x48>)
 800f22c:	3801      	subs	r0, #1
 800f22e:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f230:	4b07      	ldr	r3, [pc, #28]	; (800f250 <xPortStartScheduler+0x4c>)
 800f232:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f234:	2200      	movs	r2, #0
 800f236:	4b07      	ldr	r3, [pc, #28]	; (800f254 <xPortStartScheduler+0x50>)
 800f238:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f23a:	f7ff ffc1 	bl	800f1c0 <vPortStartFirstTask>
	portDISABLE_INTERRUPTS();
 800f23e:	b672      	cpsid	i
 800f240:	e7fe      	b.n	800f240 <xPortStartScheduler+0x3c>
 800f242:	46c0      	nop			; (mov r8, r8)
 800f244:	e000ed20 	.word	0xe000ed20
 800f248:	200000c0 	.word	0x200000c0
 800f24c:	e000e014 	.word	0xe000e014
 800f250:	e000e010 	.word	0xe000e010
 800f254:	200000d4 	.word	0x200000d4

0800f258 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f258:	2280      	movs	r2, #128	; 0x80
 800f25a:	4b04      	ldr	r3, [pc, #16]	; (800f26c <vPortYield+0x14>)
 800f25c:	0552      	lsls	r2, r2, #21
 800f25e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f260:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f264:	f3bf 8f6f 	isb	sy
}
 800f268:	4770      	bx	lr
 800f26a:	46c0      	nop			; (mov r8, r8)
 800f26c:	e000ed04 	.word	0xe000ed04

0800f270 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f270:	b672      	cpsid	i
    uxCriticalNesting++;
 800f272:	4a04      	ldr	r2, [pc, #16]	; (800f284 <vPortEnterCritical+0x14>)
 800f274:	6813      	ldr	r3, [r2, #0]
 800f276:	3301      	adds	r3, #1
 800f278:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f27a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f27e:	f3bf 8f6f 	isb	sy
}
 800f282:	4770      	bx	lr
 800f284:	200000d4 	.word	0x200000d4

0800f288 <vPortExitCritical>:
    uxCriticalNesting--;
 800f288:	4a03      	ldr	r2, [pc, #12]	; (800f298 <vPortExitCritical+0x10>)
 800f28a:	6813      	ldr	r3, [r2, #0]
 800f28c:	3b01      	subs	r3, #1
 800f28e:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f290:	2b00      	cmp	r3, #0
 800f292:	d100      	bne.n	800f296 <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800f294:	b662      	cpsie	i
}
 800f296:	4770      	bx	lr
 800f298:	200000d4 	.word	0x200000d4

0800f29c <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f29c:	f3ef 8010 	mrs	r0, PRIMASK
 800f2a0:	b672      	cpsid	i
 800f2a2:	4770      	bx	lr
}
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	46c0      	nop			; (mov r8, r8)

0800f2a8 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f2a8:	f380 8810 	msr	PRIMASK, r0
 800f2ac:	4770      	bx	lr
 800f2ae:	46c0      	nop			; (mov r8, r8)

0800f2b0 <PendSV_Handler>:
	__asm volatile
 800f2b0:	f3ef 8009 	mrs	r0, PSP
 800f2b4:	4b0e      	ldr	r3, [pc, #56]	; (800f2f0 <pxCurrentTCBConst>)
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	3820      	subs	r0, #32
 800f2ba:	6010      	str	r0, [r2, #0]
 800f2bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f2be:	4644      	mov	r4, r8
 800f2c0:	464d      	mov	r5, r9
 800f2c2:	4656      	mov	r6, sl
 800f2c4:	465f      	mov	r7, fp
 800f2c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f2c8:	b508      	push	{r3, lr}
 800f2ca:	b672      	cpsid	i
 800f2cc:	f7ff fb42 	bl	800e954 <vTaskSwitchContext>
 800f2d0:	b662      	cpsie	i
 800f2d2:	bc0c      	pop	{r2, r3}
 800f2d4:	6811      	ldr	r1, [r2, #0]
 800f2d6:	6808      	ldr	r0, [r1, #0]
 800f2d8:	3010      	adds	r0, #16
 800f2da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f2dc:	46a0      	mov	r8, r4
 800f2de:	46a9      	mov	r9, r5
 800f2e0:	46b2      	mov	sl, r6
 800f2e2:	46bb      	mov	fp, r7
 800f2e4:	f380 8809 	msr	PSP, r0
 800f2e8:	3820      	subs	r0, #32
 800f2ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f2ec:	4718      	bx	r3
 800f2ee:	46c0      	nop			; (mov r8, r8)

0800f2f0 <pxCurrentTCBConst>:
 800f2f0:	20002148 	.word	0x20002148

0800f2f4 <xPortSysTickHandler>:
{
 800f2f4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2f6:	f7ff ffd1 	bl	800f29c <ulSetInterruptMaskFromISR>
 800f2fa:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f2fc:	f7ff f982 	bl	800e604 <xTaskIncrementTick>
 800f300:	2800      	cmp	r0, #0
 800f302:	d003      	beq.n	800f30c <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f304:	2280      	movs	r2, #128	; 0x80
 800f306:	4b03      	ldr	r3, [pc, #12]	; (800f314 <xPortSysTickHandler+0x20>)
 800f308:	0552      	lsls	r2, r2, #21
 800f30a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f30c:	0020      	movs	r0, r4
 800f30e:	f7ff ffcb 	bl	800f2a8 <vClearInterruptMaskFromISR>
}
 800f312:	bd10      	pop	{r4, pc}
 800f314:	e000ed04 	.word	0xe000ed04

0800f318 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f318:	b530      	push	{r4, r5, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f31a:	4c11      	ldr	r4, [pc, #68]	; (800f360 <prvInsertBlockIntoFreeList+0x48>)
 800f31c:	0022      	movs	r2, r4
 800f31e:	e000      	b.n	800f322 <prvInsertBlockIntoFreeList+0xa>
 800f320:	001a      	movs	r2, r3
 800f322:	6813      	ldr	r3, [r2, #0]
 800f324:	4283      	cmp	r3, r0
 800f326:	d3fb      	bcc.n	800f320 <prvInsertBlockIntoFreeList+0x8>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f328:	6851      	ldr	r1, [r2, #4]
 800f32a:	1855      	adds	r5, r2, r1
 800f32c:	42a8      	cmp	r0, r5
 800f32e:	d012      	beq.n	800f356 <prvInsertBlockIntoFreeList+0x3e>
 800f330:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f332:	1845      	adds	r5, r0, r1
 800f334:	42ab      	cmp	r3, r5
 800f336:	d004      	beq.n	800f342 <prvInsertBlockIntoFreeList+0x2a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f338:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f33a:	4290      	cmp	r0, r2
 800f33c:	d000      	beq.n	800f340 <prvInsertBlockIntoFreeList+0x28>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f33e:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f340:	bd30      	pop	{r4, r5, pc}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f342:	68a4      	ldr	r4, [r4, #8]
 800f344:	42a3      	cmp	r3, r4
 800f346:	d0f7      	beq.n	800f338 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f348:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f34a:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f34c:	46a4      	mov	ip, r4
 800f34e:	4461      	add	r1, ip
 800f350:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f352:	6003      	str	r3, [r0, #0]
 800f354:	e7f1      	b.n	800f33a <prvInsertBlockIntoFreeList+0x22>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f356:	6840      	ldr	r0, [r0, #4]
 800f358:	1809      	adds	r1, r1, r0
 800f35a:	6051      	str	r1, [r2, #4]
 800f35c:	0010      	movs	r0, r2
 800f35e:	e7e8      	b.n	800f332 <prvInsertBlockIntoFreeList+0x1a>
 800f360:	200022a4 	.word	0x200022a4

0800f364 <pvPortMalloc>:
{
 800f364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f366:	46c6      	mov	lr, r8
 800f368:	b500      	push	{lr}
 800f36a:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800f36c:	f7ff f936 	bl	800e5dc <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f370:	4d34      	ldr	r5, [pc, #208]	; (800f444 <pvPortMalloc+0xe0>)
 800f372:	68ab      	ldr	r3, [r5, #8]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d03d      	beq.n	800f3f4 <pvPortMalloc+0x90>
 800f378:	68ee      	ldr	r6, [r5, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f37a:	4226      	tst	r6, r4
 800f37c:	d101      	bne.n	800f382 <pvPortMalloc+0x1e>
			if( xWantedSize > 0 )
 800f37e:	2c00      	cmp	r4, #0
 800f380:	d108      	bne.n	800f394 <pvPortMalloc+0x30>
	( void ) xTaskResumeAll();
 800f382:	f7ff f9c9 	bl	800e718 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800f386:	f7fd fce9 	bl	800cd5c <vApplicationMallocFailedHook>
 800f38a:	2700      	movs	r7, #0
}
 800f38c:	0038      	movs	r0, r7
 800f38e:	bc04      	pop	{r2}
 800f390:	4690      	mov	r8, r2
 800f392:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xWantedSize += xHeapStructSize;
 800f394:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f396:	2207      	movs	r2, #7
				xWantedSize += xHeapStructSize;
 800f398:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f39a:	421a      	tst	r2, r3
 800f39c:	d144      	bne.n	800f428 <pvPortMalloc+0xc4>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d0ef      	beq.n	800f382 <pvPortMalloc+0x1e>
 800f3a2:	696a      	ldr	r2, [r5, #20]
 800f3a4:	4690      	mov	r8, r2
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d3eb      	bcc.n	800f382 <pvPortMalloc+0x1e>
				pxBlock = xStart.pxNextFreeBlock;
 800f3aa:	682c      	ldr	r4, [r5, #0]
				pxPreviousBlock = &xStart;
 800f3ac:	0028      	movs	r0, r5
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3ae:	e004      	b.n	800f3ba <pvPortMalloc+0x56>
 800f3b0:	6822      	ldr	r2, [r4, #0]
 800f3b2:	2a00      	cmp	r2, #0
 800f3b4:	d004      	beq.n	800f3c0 <pvPortMalloc+0x5c>
 800f3b6:	0020      	movs	r0, r4
 800f3b8:	0014      	movs	r4, r2
 800f3ba:	6861      	ldr	r1, [r4, #4]
 800f3bc:	4299      	cmp	r1, r3
 800f3be:	d3f7      	bcc.n	800f3b0 <pvPortMalloc+0x4c>
				if( pxBlock != pxEnd )
 800f3c0:	68aa      	ldr	r2, [r5, #8]
 800f3c2:	42a2      	cmp	r2, r4
 800f3c4:	d0dd      	beq.n	800f382 <pvPortMalloc+0x1e>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f3c6:	6807      	ldr	r7, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f3c8:	6822      	ldr	r2, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f3ca:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f3cc:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f3ce:	1aca      	subs	r2, r1, r3
 800f3d0:	2a10      	cmp	r2, #16
 800f3d2:	d830      	bhi.n	800f436 <pvPortMalloc+0xd2>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f3d4:	4643      	mov	r3, r8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f3d6:	692a      	ldr	r2, [r5, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f3d8:	1a5b      	subs	r3, r3, r1
 800f3da:	616b      	str	r3, [r5, #20]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d200      	bcs.n	800f3e2 <pvPortMalloc+0x7e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f3e0:	612b      	str	r3, [r5, #16]
					pxBlock->pxNextFreeBlock = NULL;
 800f3e2:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f3e4:	4331      	orrs	r1, r6
 800f3e6:	6061      	str	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f3e8:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800f3ea:	f7ff f995 	bl	800e718 <xTaskResumeAll>
		if( pvReturn == NULL )
 800f3ee:	2f00      	cmp	r7, #0
 800f3f0:	d1cc      	bne.n	800f38c <pvPortMalloc+0x28>
 800f3f2:	e7c8      	b.n	800f386 <pvPortMalloc+0x22>
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f3f4:	2107      	movs	r1, #7
	ulAddress = ( uint32_t ) ucHeap;
 800f3f6:	4b14      	ldr	r3, [pc, #80]	; (800f448 <pvPortMalloc+0xe4>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f3f8:	4219      	tst	r1, r3
 800f3fa:	d118      	bne.n	800f42e <pvPortMalloc+0xca>
 800f3fc:	001a      	movs	r2, r3
 800f3fe:	0019      	movs	r1, r3
	ulAddress -= xHeapStructSize;
 800f400:	4e12      	ldr	r6, [pc, #72]	; (800f44c <pvPortMalloc+0xe8>)
	xStart.xBlockSize = ( size_t ) 0;
 800f402:	2000      	movs	r0, #0
	ulAddress -= xHeapStructSize;
 800f404:	46b4      	mov	ip, r6
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f406:	2607      	movs	r6, #7
	ulAddress -= xHeapStructSize;
 800f408:	4463      	add	r3, ip
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f40a:	43b3      	bics	r3, r6
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f40c:	2680      	movs	r6, #128	; 0x80
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f40e:	1a9a      	subs	r2, r3, r2
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f410:	0636      	lsls	r6, r6, #24
	xStart.xBlockSize = ( size_t ) 0;
 800f412:	6068      	str	r0, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f414:	6029      	str	r1, [r5, #0]
	pxEnd->xBlockSize = 0;
 800f416:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f418:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) ulAddress;
 800f41a:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f41c:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f41e:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f420:	612a      	str	r2, [r5, #16]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f422:	616a      	str	r2, [r5, #20]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f424:	60ee      	str	r6, [r5, #12]
 800f426:	e7a8      	b.n	800f37a <pvPortMalloc+0x16>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f428:	4393      	bics	r3, r2
 800f42a:	3308      	adds	r3, #8
 800f42c:	e7b7      	b.n	800f39e <pvPortMalloc+0x3a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f42e:	1dda      	adds	r2, r3, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f430:	438a      	bics	r2, r1
 800f432:	0011      	movs	r1, r2
 800f434:	e7e4      	b.n	800f400 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f436:	18e0      	adds	r0, r4, r3
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f438:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f43a:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800f43c:	f7ff ff6c 	bl	800f318 <prvInsertBlockIntoFreeList>
 800f440:	6861      	ldr	r1, [r4, #4]
 800f442:	e7c7      	b.n	800f3d4 <pvPortMalloc+0x70>
 800f444:	200022a4 	.word	0x200022a4
 800f448:	200022bc 	.word	0x200022bc
 800f44c:	00004a30 	.word	0x00004a30

0800f450 <vPortFree>:
{
 800f450:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800f452:	2800      	cmp	r0, #0
 800f454:	d009      	beq.n	800f46a <vPortFree+0x1a>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f456:	4d0d      	ldr	r5, [pc, #52]	; (800f48c <vPortFree+0x3c>)
 800f458:	3808      	subs	r0, #8
 800f45a:	6843      	ldr	r3, [r0, #4]
 800f45c:	68ea      	ldr	r2, [r5, #12]
 800f45e:	0004      	movs	r4, r0
 800f460:	421a      	tst	r2, r3
 800f462:	d002      	beq.n	800f46a <vPortFree+0x1a>
			if( pxLink->pxNextFreeBlock == NULL )
 800f464:	6801      	ldr	r1, [r0, #0]
 800f466:	2900      	cmp	r1, #0
 800f468:	d000      	beq.n	800f46c <vPortFree+0x1c>
}
 800f46a:	bd70      	pop	{r4, r5, r6, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f46c:	4393      	bics	r3, r2
 800f46e:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800f470:	f7ff f8b4 	bl	800e5dc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f474:	696a      	ldr	r2, [r5, #20]
 800f476:	6863      	ldr	r3, [r4, #4]
 800f478:	4694      	mov	ip, r2
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f47a:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f47c:	4463      	add	r3, ip
 800f47e:	616b      	str	r3, [r5, #20]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f480:	f7ff ff4a 	bl	800f318 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800f484:	f7ff f948 	bl	800e718 <xTaskResumeAll>
}
 800f488:	e7ef      	b.n	800f46a <vPortFree+0x1a>
 800f48a:	46c0      	nop			; (mov r8, r8)
 800f48c:	200022a4 	.word	0x200022a4

0800f490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f490:	b510      	push	{r4, lr}
 800f492:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f494:	f002 f904 	bl	80116a0 <HAL_RCC_GetHCLKFreq>
 800f498:	21fa      	movs	r1, #250	; 0xfa
 800f49a:	0089      	lsls	r1, r1, #2
 800f49c:	f7f0 fe58 	bl	8000150 <__udivsi3>
 800f4a0:	f000 fb9e 	bl	800fbe0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800f4a4:	2001      	movs	r0, #1
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	0021      	movs	r1, r4
 800f4aa:	4240      	negs	r0, r0
 800f4ac:	f000 fb58 	bl	800fb60 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800f4b0:	2000      	movs	r0, #0
 800f4b2:	bd10      	pop	{r4, pc}

0800f4b4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f4b4:	2110      	movs	r1, #16
 800f4b6:	4a06      	ldr	r2, [pc, #24]	; (800f4d0 <HAL_Init+0x1c>)
{
 800f4b8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f4ba:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f4bc:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f4be:	430b      	orrs	r3, r1
 800f4c0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f4c2:	f7ff ffe5 	bl	800f490 <HAL_InitTick>
  HAL_MspInit();
 800f4c6:	f001 fcdf 	bl	8010e88 <HAL_MspInit>
}
 800f4ca:	2000      	movs	r0, #0
 800f4cc:	bd10      	pop	{r4, pc}
 800f4ce:	46c0      	nop			; (mov r8, r8)
 800f4d0:	40022000 	.word	0x40022000

0800f4d4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800f4d4:	4a02      	ldr	r2, [pc, #8]	; (800f4e0 <HAL_IncTick+0xc>)
 800f4d6:	6813      	ldr	r3, [r2, #0]
 800f4d8:	3301      	adds	r3, #1
 800f4da:	6013      	str	r3, [r2, #0]
}
 800f4dc:	4770      	bx	lr
 800f4de:	46c0      	nop			; (mov r8, r8)
 800f4e0:	20006cf4 	.word	0x20006cf4

0800f4e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f4e4:	4b01      	ldr	r3, [pc, #4]	; (800f4ec <HAL_GetTick+0x8>)
 800f4e6:	6818      	ldr	r0, [r3, #0]
}
 800f4e8:	4770      	bx	lr
 800f4ea:	46c0      	nop			; (mov r8, r8)
 800f4ec:	20006cf4 	.word	0x20006cf4

0800f4f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800f4f0:	b510      	push	{r4, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800f4f6:	f7ff fff5 	bl	800f4e4 <HAL_GetTick>
 800f4fa:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800f4fc:	f7ff fff2 	bl	800f4e4 <HAL_GetTick>
 800f500:	9b01      	ldr	r3, [sp, #4]
 800f502:	1b00      	subs	r0, r0, r4
 800f504:	4298      	cmp	r0, r3
 800f506:	d3f9      	bcc.n	800f4fc <HAL_Delay+0xc>
  {
  }
}
 800f508:	b002      	add	sp, #8
 800f50a:	bd10      	pop	{r4, pc}

0800f50c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800f50c:	4b01      	ldr	r3, [pc, #4]	; (800f514 <HAL_GetREVID+0x8>)
 800f50e:	6818      	ldr	r0, [r3, #0]
 800f510:	0c00      	lsrs	r0, r0, #16
}
 800f512:	4770      	bx	lr
 800f514:	40015800 	.word	0x40015800

0800f518 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800f518:	4b02      	ldr	r3, [pc, #8]	; (800f524 <HAL_GetDEVID+0xc>)
 800f51a:	6818      	ldr	r0, [r3, #0]
 800f51c:	0500      	lsls	r0, r0, #20
 800f51e:	0d00      	lsrs	r0, r0, #20
}
 800f520:	4770      	bx	lr
 800f522:	46c0      	nop			; (mov r8, r8)
 800f524:	40015800 	.word	0x40015800

0800f528 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f528:	2303      	movs	r3, #3
 800f52a:	6802      	ldr	r2, [r0, #0]
{
 800f52c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f52e:	6891      	ldr	r1, [r2, #8]
{
 800f530:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f532:	400b      	ands	r3, r1
 800f534:	2b01      	cmp	r3, #1
 800f536:	d001      	beq.n	800f53c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800f538:	2000      	movs	r0, #0
}
 800f53a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f53c:	6811      	ldr	r1, [r2, #0]
 800f53e:	420b      	tst	r3, r1
 800f540:	d00e      	beq.n	800f560 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800f542:	2305      	movs	r3, #5
 800f544:	6891      	ldr	r1, [r2, #8]
 800f546:	400b      	ands	r3, r1
 800f548:	2b01      	cmp	r3, #1
 800f54a:	d00d      	beq.n	800f568 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f54c:	2210      	movs	r2, #16
 800f54e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800f550:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f552:	4313      	orrs	r3, r2
 800f554:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f556:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f558:	3a0f      	subs	r2, #15
 800f55a:	4313      	orrs	r3, r2
 800f55c:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f55e:	e7ec      	b.n	800f53a <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f560:	68d3      	ldr	r3, [r2, #12]
 800f562:	041b      	lsls	r3, r3, #16
 800f564:	d4ed      	bmi.n	800f542 <ADC_Disable+0x1a>
 800f566:	e7e7      	b.n	800f538 <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 800f568:	2102      	movs	r1, #2
 800f56a:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f56c:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 800f56e:	430b      	orrs	r3, r1
 800f570:	6093      	str	r3, [r2, #8]
 800f572:	2303      	movs	r3, #3
 800f574:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f576:	f7ff ffb5 	bl	800f4e4 <HAL_GetTick>
 800f57a:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f57c:	e004      	b.n	800f588 <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800f57e:	f7ff ffb1 	bl	800f4e4 <HAL_GetTick>
 800f582:	1b80      	subs	r0, r0, r6
 800f584:	2802      	cmp	r0, #2
 800f586:	d804      	bhi.n	800f592 <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f588:	6823      	ldr	r3, [r4, #0]
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	421d      	tst	r5, r3
 800f58e:	d1f6      	bne.n	800f57e <ADC_Disable+0x56>
 800f590:	e7d2      	b.n	800f538 <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f592:	2210      	movs	r2, #16
 800f594:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f596:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f598:	4313      	orrs	r3, r2
 800f59a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f59c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f59e:	431d      	orrs	r5, r3
 800f5a0:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f5a2:	e7ca      	b.n	800f53a <ADC_Disable+0x12>

0800f5a4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800f5a4:	2300      	movs	r3, #0
{
 800f5a6:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f5a8:	6802      	ldr	r2, [r0, #0]
{
 800f5aa:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800f5ac:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f5ae:	6891      	ldr	r1, [r2, #8]
 800f5b0:	3303      	adds	r3, #3
{
 800f5b2:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f5b4:	400b      	ands	r3, r1
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d031      	beq.n	800f61e <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f5ba:	6891      	ldr	r1, [r2, #8]
 800f5bc:	4b20      	ldr	r3, [pc, #128]	; (800f640 <ADC_Enable+0x9c>)
 800f5be:	4219      	tst	r1, r3
 800f5c0:	d122      	bne.n	800f608 <ADC_Enable+0x64>
    __HAL_ADC_ENABLE(hadc);
 800f5c2:	2101      	movs	r1, #1
 800f5c4:	6893      	ldr	r3, [r2, #8]
 800f5c6:	430b      	orrs	r3, r1
 800f5c8:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800f5ca:	4b1e      	ldr	r3, [pc, #120]	; (800f644 <ADC_Enable+0xa0>)
 800f5cc:	491e      	ldr	r1, [pc, #120]	; (800f648 <ADC_Enable+0xa4>)
 800f5ce:	6818      	ldr	r0, [r3, #0]
 800f5d0:	f7f0 fdbe 	bl	8000150 <__udivsi3>
 800f5d4:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800f5d6:	9b01      	ldr	r3, [sp, #4]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d005      	beq.n	800f5e8 <ADC_Enable+0x44>
      wait_loop_index--;
 800f5dc:	9b01      	ldr	r3, [sp, #4]
 800f5de:	3b01      	subs	r3, #1
 800f5e0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800f5e2:	9b01      	ldr	r3, [sp, #4]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d1f9      	bne.n	800f5dc <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800f5e8:	f7ff ff7c 	bl	800f4e4 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f5ec:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800f5ee:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f5f0:	e004      	b.n	800f5fc <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f5f2:	f7ff ff77 	bl	800f4e4 <HAL_GetTick>
 800f5f6:	1b80      	subs	r0, r0, r6
 800f5f8:	2802      	cmp	r0, #2
 800f5fa:	d818      	bhi.n	800f62e <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f5fc:	6823      	ldr	r3, [r4, #0]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	421d      	tst	r5, r3
 800f602:	d0f6      	beq.n	800f5f2 <ADC_Enable+0x4e>
  return HAL_OK;
 800f604:	2000      	movs	r0, #0
 800f606:	e008      	b.n	800f61a <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f608:	2210      	movs	r2, #16
      return HAL_ERROR;
 800f60a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f60c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f60e:	4313      	orrs	r3, r2
 800f610:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f612:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f614:	3a0f      	subs	r2, #15
 800f616:	4313      	orrs	r3, r2
 800f618:	64a3      	str	r3, [r4, #72]	; 0x48
}
 800f61a:	b002      	add	sp, #8
 800f61c:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f61e:	6811      	ldr	r1, [r2, #0]
 800f620:	420b      	tst	r3, r1
 800f622:	d1ef      	bne.n	800f604 <ADC_Enable+0x60>
 800f624:	68d3      	ldr	r3, [r2, #12]
 800f626:	041b      	lsls	r3, r3, #16
 800f628:	d5c7      	bpl.n	800f5ba <ADC_Enable+0x16>
  return HAL_OK;
 800f62a:	2000      	movs	r0, #0
 800f62c:	e7f5      	b.n	800f61a <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f62e:	2210      	movs	r2, #16
 800f630:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f632:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f634:	4313      	orrs	r3, r2
 800f636:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f638:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f63a:	431d      	orrs	r5, r3
 800f63c:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f63e:	e7ec      	b.n	800f61a <ADC_Enable+0x76>
 800f640:	80000017 	.word	0x80000017
 800f644:	200000c0 	.word	0x200000c0
 800f648:	000f4240 	.word	0x000f4240

0800f64c <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f64c:	2204      	movs	r2, #4
 800f64e:	6803      	ldr	r3, [r0, #0]
{
 800f650:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f652:	6899      	ldr	r1, [r3, #8]
{
 800f654:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f656:	420a      	tst	r2, r1
 800f658:	d010      	beq.n	800f67c <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f65a:	6899      	ldr	r1, [r3, #8]
 800f65c:	420a      	tst	r2, r1
 800f65e:	d10f      	bne.n	800f680 <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800f660:	f7ff ff40 	bl	800f4e4 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f664:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800f666:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f668:	e004      	b.n	800f674 <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800f66a:	f7ff ff3b 	bl	800f4e4 <HAL_GetTick>
 800f66e:	1b80      	subs	r0, r0, r6
 800f670:	2802      	cmp	r0, #2
 800f672:	d80d      	bhi.n	800f690 <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f674:	6823      	ldr	r3, [r4, #0]
 800f676:	689b      	ldr	r3, [r3, #8]
 800f678:	421d      	tst	r5, r3
 800f67a:	d1f6      	bne.n	800f66a <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800f67c:	2000      	movs	r0, #0
}
 800f67e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800f680:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f682:	0792      	lsls	r2, r2, #30
 800f684:	d4ec      	bmi.n	800f660 <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800f686:	2110      	movs	r1, #16
 800f688:	689a      	ldr	r2, [r3, #8]
 800f68a:	430a      	orrs	r2, r1
 800f68c:	609a      	str	r2, [r3, #8]
 800f68e:	e7e7      	b.n	800f660 <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f690:	2210      	movs	r2, #16
 800f692:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f694:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f696:	4313      	orrs	r3, r2
 800f698:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f69a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f69c:	3a0f      	subs	r2, #15
 800f69e:	4313      	orrs	r3, r2
 800f6a0:	64a3      	str	r3, [r4, #72]	; 0x48
 800f6a2:	e7ec      	b.n	800f67e <ADC_ConversionStop+0x32>

0800f6a4 <HAL_ADC_Init>:
{
 800f6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6a6:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800f6a8:	d100      	bne.n	800f6ac <HAL_ADC_Init+0x8>
 800f6aa:	e075      	b.n	800f798 <HAL_ADC_Init+0xf4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f6ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d068      	beq.n	800f784 <HAL_ADC_Init+0xe0>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f6b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f6b4:	06db      	lsls	r3, r3, #27
 800f6b6:	d505      	bpl.n	800f6c4 <HAL_ADC_Init+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f6b8:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800f6ba:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f6bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	6463      	str	r3, [r4, #68]	; 0x44
}
 800f6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800f6c4:	2004      	movs	r0, #4
 800f6c6:	6823      	ldr	r3, [r4, #0]
 800f6c8:	689a      	ldr	r2, [r3, #8]
 800f6ca:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800f6cc:	d1f4      	bne.n	800f6b8 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800f6ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f6d0:	4942      	ldr	r1, [pc, #264]	; (800f7dc <HAL_ADC_Init+0x138>)
 800f6d2:	400a      	ands	r2, r1
 800f6d4:	3106      	adds	r1, #6
 800f6d6:	31ff      	adds	r1, #255	; 0xff
 800f6d8:	430a      	orrs	r2, r1
 800f6da:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f6dc:	2203      	movs	r2, #3
 800f6de:	6899      	ldr	r1, [r3, #8]
 800f6e0:	400a      	ands	r2, r1
 800f6e2:	2a01      	cmp	r2, #1
 800f6e4:	d073      	beq.n	800f7ce <HAL_ADC_Init+0x12a>
      MODIFY_REG(hadc->Instance->CFGR1,
 800f6e6:	2118      	movs	r1, #24
 800f6e8:	68da      	ldr	r2, [r3, #12]
 800f6ea:	438a      	bics	r2, r1
 800f6ec:	68a1      	ldr	r1, [r4, #8]
 800f6ee:	430a      	orrs	r2, r1
 800f6f0:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800f6f2:	691a      	ldr	r2, [r3, #16]
 800f6f4:	6861      	ldr	r1, [r4, #4]
 800f6f6:	0092      	lsls	r2, r2, #2
 800f6f8:	0892      	lsrs	r2, r2, #2
 800f6fa:	430a      	orrs	r2, r1
 800f6fc:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f6fe:	68da      	ldr	r2, [r3, #12]
 800f700:	4937      	ldr	r1, [pc, #220]	; (800f7e0 <HAL_ADC_Init+0x13c>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f702:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f704:	400a      	ands	r2, r1
 800f706:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f708:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f70a:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f70c:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800f70e:	69e2      	ldr	r2, [r4, #28]
 800f710:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f712:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800f714:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f716:	3a01      	subs	r2, #1
 800f718:	1e55      	subs	r5, r2, #1
 800f71a:	41aa      	sbcs	r2, r5
 800f71c:	0315      	lsls	r5, r2, #12
 800f71e:	68e2      	ldr	r2, [r4, #12]
 800f720:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f722:	6922      	ldr	r2, [r4, #16]
 800f724:	4339      	orrs	r1, r7
 800f726:	2a02      	cmp	r2, #2
 800f728:	d100      	bne.n	800f72c <HAL_ADC_Init+0x88>
 800f72a:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800f72c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f72e:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f730:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f732:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f734:	432a      	orrs	r2, r5
 800f736:	4302      	orrs	r2, r0
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f738:	2901      	cmp	r1, #1
 800f73a:	d042      	beq.n	800f7c2 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f73c:	20c2      	movs	r0, #194	; 0xc2
 800f73e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f740:	30ff      	adds	r0, #255	; 0xff
 800f742:	4281      	cmp	r1, r0
 800f744:	d002      	beq.n	800f74c <HAL_ADC_Init+0xa8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800f746:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f748:	4301      	orrs	r1, r0
 800f74a:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f74c:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f74e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f750:	4311      	orrs	r1, r2
 800f752:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f754:	2180      	movs	r1, #128	; 0x80
 800f756:	0549      	lsls	r1, r1, #21
 800f758:	428d      	cmp	r5, r1
 800f75a:	d01f      	beq.n	800f79c <HAL_ADC_Init+0xf8>
 800f75c:	1e69      	subs	r1, r5, #1
 800f75e:	2906      	cmp	r1, #6
 800f760:	d91c      	bls.n	800f79c <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	491f      	ldr	r1, [pc, #124]	; (800f7e4 <HAL_ADC_Init+0x140>)
 800f766:	400b      	ands	r3, r1
 800f768:	4293      	cmp	r3, r2
 800f76a:	d020      	beq.n	800f7ae <HAL_ADC_Init+0x10a>
      ADC_STATE_CLR_SET(hadc->State,
 800f76c:	2212      	movs	r2, #18
 800f76e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800f770:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800f772:	4393      	bics	r3, r2
 800f774:	3a02      	subs	r2, #2
 800f776:	4313      	orrs	r3, r2
 800f778:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f77a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f77c:	3a0f      	subs	r2, #15
 800f77e:	4313      	orrs	r3, r2
 800f780:	64a3      	str	r3, [r4, #72]	; 0x48
 800f782:	e79e      	b.n	800f6c2 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800f784:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800f786:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800f788:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800f78a:	f7fc fc8b 	bl	800c0a4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f78e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f790:	06db      	lsls	r3, r3, #27
 800f792:	d500      	bpl.n	800f796 <HAL_ADC_Init+0xf2>
 800f794:	e790      	b.n	800f6b8 <HAL_ADC_Init+0x14>
 800f796:	e795      	b.n	800f6c4 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 800f798:	2001      	movs	r0, #1
 800f79a:	e792      	b.n	800f6c2 <HAL_ADC_Init+0x1e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f79c:	2107      	movs	r1, #7
 800f79e:	6958      	ldr	r0, [r3, #20]
 800f7a0:	4388      	bics	r0, r1
 800f7a2:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800f7a4:	6958      	ldr	r0, [r3, #20]
 800f7a6:	4029      	ands	r1, r5
 800f7a8:	4301      	orrs	r1, r0
 800f7aa:	6159      	str	r1, [r3, #20]
 800f7ac:	e7d9      	b.n	800f762 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 800f7ae:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f7b0:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800f7b2:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800f7b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f7b6:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f7b8:	4393      	bics	r3, r2
 800f7ba:	3a02      	subs	r2, #2
 800f7bc:	4313      	orrs	r3, r2
 800f7be:	6463      	str	r3, [r4, #68]	; 0x44
 800f7c0:	e77f      	b.n	800f6c2 <HAL_ADC_Init+0x1e>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f7c2:	2e00      	cmp	r6, #0
 800f7c4:	d1ba      	bne.n	800f73c <HAL_ADC_Init+0x98>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800f7c6:	2180      	movs	r1, #128	; 0x80
 800f7c8:	0249      	lsls	r1, r1, #9
 800f7ca:	430a      	orrs	r2, r1
 800f7cc:	e7b6      	b.n	800f73c <HAL_ADC_Init+0x98>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f7ce:	6819      	ldr	r1, [r3, #0]
 800f7d0:	420a      	tst	r2, r1
 800f7d2:	d194      	bne.n	800f6fe <HAL_ADC_Init+0x5a>
 800f7d4:	68da      	ldr	r2, [r3, #12]
 800f7d6:	0412      	lsls	r2, r2, #16
 800f7d8:	d491      	bmi.n	800f6fe <HAL_ADC_Init+0x5a>
 800f7da:	e784      	b.n	800f6e6 <HAL_ADC_Init+0x42>
 800f7dc:	fffffefd 	.word	0xfffffefd
 800f7e0:	fffe0219 	.word	0xfffe0219
 800f7e4:	833fffe7 	.word	0x833fffe7

0800f7e8 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f7e8:	6803      	ldr	r3, [r0, #0]
{
 800f7ea:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f7ec:	689a      	ldr	r2, [r3, #8]
{
 800f7ee:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f7f0:	0752      	lsls	r2, r2, #29
 800f7f2:	d421      	bmi.n	800f838 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800f7f4:	2240      	movs	r2, #64	; 0x40
 800f7f6:	5c81      	ldrb	r1, [r0, r2]
 800f7f8:	2901      	cmp	r1, #1
 800f7fa:	d01d      	beq.n	800f838 <HAL_ADC_Start+0x50>
 800f7fc:	2101      	movs	r1, #1
 800f7fe:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f800:	69c2      	ldr	r2, [r0, #28]
 800f802:	2a01      	cmp	r2, #1
 800f804:	d112      	bne.n	800f82c <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800f806:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f808:	490c      	ldr	r1, [pc, #48]	; (800f83c <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f80a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f80c:	4011      	ands	r1, r2
 800f80e:	2280      	movs	r2, #128	; 0x80
 800f810:	0052      	lsls	r2, r2, #1
 800f812:	430a      	orrs	r2, r1
 800f814:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f816:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800f818:	2200      	movs	r2, #0
 800f81a:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800f81c:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f81e:	321c      	adds	r2, #28
 800f820:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f822:	689a      	ldr	r2, [r3, #8]
 800f824:	393c      	subs	r1, #60	; 0x3c
 800f826:	430a      	orrs	r2, r1
 800f828:	609a      	str	r2, [r3, #8]
}
 800f82a:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800f82c:	f7ff feba 	bl	800f5a4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800f830:	2800      	cmp	r0, #0
 800f832:	d1fa      	bne.n	800f82a <HAL_ADC_Start+0x42>
 800f834:	6823      	ldr	r3, [r4, #0]
 800f836:	e7e6      	b.n	800f806 <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 800f838:	2002      	movs	r0, #2
 800f83a:	e7f6      	b.n	800f82a <HAL_ADC_Start+0x42>
 800f83c:	fffff0fe 	.word	0xfffff0fe

0800f840 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800f840:	2340      	movs	r3, #64	; 0x40
{ 
 800f842:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800f844:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800f846:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f848:	2a01      	cmp	r2, #1
 800f84a:	d014      	beq.n	800f876 <HAL_ADC_Stop+0x36>
 800f84c:	2501      	movs	r5, #1
 800f84e:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800f850:	f7ff fefc 	bl	800f64c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800f854:	2800      	cmp	r0, #0
 800f856:	d003      	beq.n	800f860 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800f858:	2340      	movs	r3, #64	; 0x40
 800f85a:	2200      	movs	r2, #0
 800f85c:	54e2      	strb	r2, [r4, r3]
}
 800f85e:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800f860:	0020      	movs	r0, r4
 800f862:	f7ff fe61 	bl	800f528 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800f866:	2800      	cmp	r0, #0
 800f868:	d1f6      	bne.n	800f858 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800f86a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f86c:	4a03      	ldr	r2, [pc, #12]	; (800f87c <HAL_ADC_Stop+0x3c>)
 800f86e:	4013      	ands	r3, r2
 800f870:	431d      	orrs	r5, r3
 800f872:	6465      	str	r5, [r4, #68]	; 0x44
 800f874:	e7f0      	b.n	800f858 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800f876:	2002      	movs	r0, #2
 800f878:	e7f1      	b.n	800f85e <HAL_ADC_Stop+0x1e>
 800f87a:	46c0      	nop			; (mov r8, r8)
 800f87c:	fffffefe 	.word	0xfffffefe

0800f880 <HAL_ADC_PollForConversion>:
{
 800f880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f882:	6943      	ldr	r3, [r0, #20]
{
 800f884:	0006      	movs	r6, r0
 800f886:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f888:	2b08      	cmp	r3, #8
 800f88a:	d04c      	beq.n	800f926 <HAL_ADC_PollForConversion+0xa6>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f88c:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f88e:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f890:	68db      	ldr	r3, [r3, #12]
 800f892:	07db      	lsls	r3, r3, #31
 800f894:	d43e      	bmi.n	800f914 <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 800f896:	f7ff fe25 	bl	800f4e4 <HAL_GetTick>
 800f89a:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f89c:	6832      	ldr	r2, [r6, #0]
 800f89e:	e001      	b.n	800f8a4 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 800f8a0:	1c63      	adds	r3, r4, #1
 800f8a2:	d127      	bne.n	800f8f4 <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f8a4:	6813      	ldr	r3, [r2, #0]
 800f8a6:	421d      	tst	r5, r3
 800f8a8:	d0fa      	beq.n	800f8a0 <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f8aa:	2380      	movs	r3, #128	; 0x80
 800f8ac:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800f8ae:	009b      	lsls	r3, r3, #2
 800f8b0:	430b      	orrs	r3, r1
 800f8b2:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800f8b4:	23c0      	movs	r3, #192	; 0xc0
 800f8b6:	68d1      	ldr	r1, [r2, #12]
 800f8b8:	011b      	lsls	r3, r3, #4
 800f8ba:	4219      	tst	r1, r3
 800f8bc:	d113      	bne.n	800f8e6 <HAL_ADC_PollForConversion+0x66>
 800f8be:	6a33      	ldr	r3, [r6, #32]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d110      	bne.n	800f8e6 <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800f8c4:	6813      	ldr	r3, [r2, #0]
 800f8c6:	071b      	lsls	r3, r3, #28
 800f8c8:	d50d      	bpl.n	800f8e6 <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f8ca:	6893      	ldr	r3, [r2, #8]
 800f8cc:	075b      	lsls	r3, r3, #29
 800f8ce:	d42f      	bmi.n	800f930 <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f8d0:	210c      	movs	r1, #12
 800f8d2:	6853      	ldr	r3, [r2, #4]
 800f8d4:	438b      	bics	r3, r1
 800f8d6:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800f8d8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f8da:	491a      	ldr	r1, [pc, #104]	; (800f944 <HAL_ADC_PollForConversion+0xc4>)
 800f8dc:	400b      	ands	r3, r1
 800f8de:	3104      	adds	r1, #4
 800f8e0:	31ff      	adds	r1, #255	; 0xff
 800f8e2:	430b      	orrs	r3, r1
 800f8e4:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f8e6:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 800f8e8:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d101      	bne.n	800f8f2 <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f8ee:	330c      	adds	r3, #12
 800f8f0:	6013      	str	r3, [r2, #0]
}
 800f8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800f8f4:	2c00      	cmp	r4, #0
 800f8f6:	d004      	beq.n	800f902 <HAL_ADC_PollForConversion+0x82>
 800f8f8:	f7ff fdf4 	bl	800f4e4 <HAL_GetTick>
 800f8fc:	1bc0      	subs	r0, r0, r7
 800f8fe:	42a0      	cmp	r0, r4
 800f900:	d9cc      	bls.n	800f89c <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f902:	2204      	movs	r2, #4
 800f904:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 800f906:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f908:	4313      	orrs	r3, r2
 800f90a:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800f90c:	2200      	movs	r2, #0
 800f90e:	2340      	movs	r3, #64	; 0x40
 800f910:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800f912:	e7ee      	b.n	800f8f2 <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f914:	2220      	movs	r2, #32
 800f916:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f918:	4313      	orrs	r3, r2
 800f91a:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f91c:	2200      	movs	r2, #0
 800f91e:	2340      	movs	r3, #64	; 0x40
 800f920:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800f922:	2001      	movs	r0, #1
 800f924:	e7e5      	b.n	800f8f2 <HAL_ADC_PollForConversion+0x72>
  tickstart = HAL_GetTick();
 800f926:	f7ff fddd 	bl	800f4e4 <HAL_GetTick>
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f92a:	2508      	movs	r5, #8
  tickstart = HAL_GetTick();
 800f92c:	0007      	movs	r7, r0
 800f92e:	e7b5      	b.n	800f89c <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f930:	2120      	movs	r1, #32
 800f932:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f934:	430b      	orrs	r3, r1
 800f936:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f938:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800f93a:	391f      	subs	r1, #31
 800f93c:	430b      	orrs	r3, r1
 800f93e:	64b3      	str	r3, [r6, #72]	; 0x48
 800f940:	e7d1      	b.n	800f8e6 <HAL_ADC_PollForConversion+0x66>
 800f942:	46c0      	nop			; (mov r8, r8)
 800f944:	fffffefe 	.word	0xfffffefe

0800f948 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800f948:	2208      	movs	r2, #8
 800f94a:	6803      	ldr	r3, [r0, #0]
 800f94c:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800f94e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800f950:	4770      	bx	lr
 800f952:	46c0      	nop			; (mov r8, r8)

0800f954 <HAL_ADC_ConvCpltCallback>:
 800f954:	4770      	bx	lr
 800f956:	46c0      	nop			; (mov r8, r8)

0800f958 <HAL_ADC_LevelOutOfWindowCallback>:
 800f958:	4770      	bx	lr
 800f95a:	46c0      	nop			; (mov r8, r8)

0800f95c <HAL_ADC_ErrorCallback>:
 800f95c:	4770      	bx	lr
 800f95e:	46c0      	nop			; (mov r8, r8)

0800f960 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800f960:	2204      	movs	r2, #4
 800f962:	6803      	ldr	r3, [r0, #0]
{
 800f964:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800f966:	6819      	ldr	r1, [r3, #0]
{
 800f968:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800f96a:	420a      	tst	r2, r1
 800f96c:	d04a      	beq.n	800fa04 <HAL_ADC_IRQHandler+0xa4>
 800f96e:	6859      	ldr	r1, [r3, #4]
 800f970:	420a      	tst	r2, r1
 800f972:	d047      	beq.n	800fa04 <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f974:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f976:	06d2      	lsls	r2, r2, #27
 800f978:	d404      	bmi.n	800f984 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800f97a:	2280      	movs	r2, #128	; 0x80
 800f97c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f97e:	0092      	lsls	r2, r2, #2
 800f980:	430a      	orrs	r2, r1
 800f982:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800f984:	22c0      	movs	r2, #192	; 0xc0
 800f986:	68d9      	ldr	r1, [r3, #12]
 800f988:	0112      	lsls	r2, r2, #4
 800f98a:	4211      	tst	r1, r2
 800f98c:	d113      	bne.n	800f9b6 <HAL_ADC_IRQHandler+0x56>
 800f98e:	6a22      	ldr	r2, [r4, #32]
 800f990:	2a00      	cmp	r2, #0
 800f992:	d110      	bne.n	800f9b6 <HAL_ADC_IRQHandler+0x56>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	0712      	lsls	r2, r2, #28
 800f998:	d50d      	bpl.n	800f9b6 <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f99a:	689a      	ldr	r2, [r3, #8]
 800f99c:	0752      	lsls	r2, r2, #29
 800f99e:	d444      	bmi.n	800fa2a <HAL_ADC_IRQHandler+0xca>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f9a0:	210c      	movs	r1, #12
 800f9a2:	685a      	ldr	r2, [r3, #4]
 800f9a4:	438a      	bics	r2, r1
 800f9a6:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800f9a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f9aa:	4a24      	ldr	r2, [pc, #144]	; (800fa3c <HAL_ADC_IRQHandler+0xdc>)
 800f9ac:	4013      	ands	r3, r2
 800f9ae:	3204      	adds	r2, #4
 800f9b0:	32ff      	adds	r2, #255	; 0xff
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 800f9b6:	0020      	movs	r0, r4
 800f9b8:	f7ff ffcc 	bl	800f954 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800f9bc:	220c      	movs	r2, #12
 800f9be:	6823      	ldr	r3, [r4, #0]
 800f9c0:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800f9c2:	2580      	movs	r5, #128	; 0x80
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	4215      	tst	r5, r2
 800f9c8:	d002      	beq.n	800f9d0 <HAL_ADC_IRQHandler+0x70>
 800f9ca:	685a      	ldr	r2, [r3, #4]
 800f9cc:	4215      	tst	r5, r2
 800f9ce:	d121      	bne.n	800fa14 <HAL_ADC_IRQHandler+0xb4>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800f9d0:	2210      	movs	r2, #16
 800f9d2:	6819      	ldr	r1, [r3, #0]
 800f9d4:	420a      	tst	r2, r1
 800f9d6:	d014      	beq.n	800fa02 <HAL_ADC_IRQHandler+0xa2>
 800f9d8:	6859      	ldr	r1, [r3, #4]
 800f9da:	420a      	tst	r2, r1
 800f9dc:	d011      	beq.n	800fa02 <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800f9de:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f9e0:	2a01      	cmp	r2, #1
 800f9e2:	d002      	beq.n	800f9ea <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800f9e4:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800f9e6:	07d2      	lsls	r2, r2, #31
 800f9e8:	d509      	bpl.n	800f9fe <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800f9ea:	2102      	movs	r1, #2
 800f9ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 800f9ee:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800f9f0:	430a      	orrs	r2, r1
 800f9f2:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800f9f4:	2210      	movs	r2, #16
 800f9f6:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800f9f8:	f7ff ffb0 	bl	800f95c <HAL_ADC_ErrorCallback>
 800f9fc:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800f9fe:	2210      	movs	r2, #16
 800fa00:	601a      	str	r2, [r3, #0]
}
 800fa02:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800fa04:	2208      	movs	r2, #8
 800fa06:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800fa08:	420a      	tst	r2, r1
 800fa0a:	d0da      	beq.n	800f9c2 <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800fa0c:	6859      	ldr	r1, [r3, #4]
 800fa0e:	420a      	tst	r2, r1
 800fa10:	d0d7      	beq.n	800f9c2 <HAL_ADC_IRQHandler+0x62>
 800fa12:	e7af      	b.n	800f974 <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800fa14:	2380      	movs	r3, #128	; 0x80
 800fa16:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fa18:	025b      	lsls	r3, r3, #9
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800fa1e:	0020      	movs	r0, r4
 800fa20:	f7ff ff9a 	bl	800f958 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800fa24:	6823      	ldr	r3, [r4, #0]
 800fa26:	601d      	str	r5, [r3, #0]
 800fa28:	e7d2      	b.n	800f9d0 <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fa2a:	2220      	movs	r2, #32
 800fa2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa2e:	4313      	orrs	r3, r2
 800fa30:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fa32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fa34:	3a1f      	subs	r2, #31
 800fa36:	4313      	orrs	r3, r2
 800fa38:	64a3      	str	r3, [r4, #72]	; 0x48
 800fa3a:	e7bc      	b.n	800f9b6 <HAL_ADC_IRQHandler+0x56>
 800fa3c:	fffffefe 	.word	0xfffffefe

0800fa40 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800fa40:	2300      	movs	r3, #0
{
 800fa42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa44:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800fa46:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800fa48:	3340      	adds	r3, #64	; 0x40
 800fa4a:	5cc2      	ldrb	r2, [r0, r3]
{
 800fa4c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800fa4e:	2a01      	cmp	r2, #1
 800fa50:	d044      	beq.n	800fadc <HAL_ADC_ConfigChannel+0x9c>
 800fa52:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fa54:	6826      	ldr	r6, [r4, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fa56:	6b80      	ldr	r0, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 800fa58:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fa5a:	68b3      	ldr	r3, [r6, #8]
 800fa5c:	075b      	lsls	r3, r3, #29
 800fa5e:	d509      	bpl.n	800fa74 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fa60:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800fa62:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fa64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa66:	4313      	orrs	r3, r2
 800fa68:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800fa6a:	2340      	movs	r3, #64	; 0x40
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	54e2      	strb	r2, [r4, r3]
}
 800fa70:	b003      	add	sp, #12
 800fa72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa74:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 800fa76:	4d33      	ldr	r5, [pc, #204]	; (800fb44 <HAL_ADC_ConfigChannel+0x104>)
 800fa78:	001f      	movs	r7, r3
 800fa7a:	46ac      	mov	ip, r5
 800fa7c:	684d      	ldr	r5, [r1, #4]
 800fa7e:	409a      	lsls	r2, r3
 800fa80:	3f10      	subs	r7, #16
 800fa82:	4565      	cmp	r5, ip
 800fa84:	d02c      	beq.n	800fae0 <HAL_ADC_ConfigChannel+0xa0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fa86:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 800fa88:	432a      	orrs	r2, r5
 800fa8a:	62b2      	str	r2, [r6, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fa8c:	2280      	movs	r2, #128	; 0x80
 800fa8e:	0552      	lsls	r2, r2, #21
 800fa90:	4290      	cmp	r0, r2
 800fa92:	d00f      	beq.n	800fab4 <HAL_ADC_ConfigChannel+0x74>
 800fa94:	3801      	subs	r0, #1
 800fa96:	2806      	cmp	r0, #6
 800fa98:	d90c      	bls.n	800fab4 <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800fa9a:	2207      	movs	r2, #7
 800fa9c:	6888      	ldr	r0, [r1, #8]
 800fa9e:	6971      	ldr	r1, [r6, #20]
 800faa0:	4011      	ands	r1, r2
 800faa2:	4288      	cmp	r0, r1
 800faa4:	d006      	beq.n	800fab4 <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800faa6:	6971      	ldr	r1, [r6, #20]
 800faa8:	4391      	bics	r1, r2
 800faaa:	6171      	str	r1, [r6, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800faac:	6971      	ldr	r1, [r6, #20]
 800faae:	4002      	ands	r2, r0
 800fab0:	430a      	orrs	r2, r1
 800fab2:	6172      	str	r2, [r6, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fab4:	2f02      	cmp	r7, #2
 800fab6:	d80f      	bhi.n	800fad8 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fab8:	4923      	ldr	r1, [pc, #140]	; (800fb48 <HAL_ADC_ConfigChannel+0x108>)
 800faba:	680a      	ldr	r2, [r1, #0]
 800fabc:	2b10      	cmp	r3, #16
 800fabe:	d029      	beq.n	800fb14 <HAL_ADC_ConfigChannel+0xd4>
 800fac0:	3b11      	subs	r3, #17
 800fac2:	4258      	negs	r0, r3
 800fac4:	4143      	adcs	r3, r0
 800fac6:	4821      	ldr	r0, [pc, #132]	; (800fb4c <HAL_ADC_ConfigChannel+0x10c>)
 800fac8:	425b      	negs	r3, r3
 800faca:	4003      	ands	r3, r0
 800facc:	2080      	movs	r0, #128	; 0x80
 800face:	0440      	lsls	r0, r0, #17
 800fad0:	4684      	mov	ip, r0
 800fad2:	4463      	add	r3, ip
 800fad4:	4313      	orrs	r3, r2
 800fad6:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fad8:	2000      	movs	r0, #0
 800fada:	e7c6      	b.n	800fa6a <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800fadc:	2002      	movs	r0, #2
 800fade:	e7c7      	b.n	800fa70 <HAL_ADC_ConfigChannel+0x30>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fae0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800fae2:	4391      	bics	r1, r2
 800fae4:	62b1      	str	r1, [r6, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fae6:	2f02      	cmp	r7, #2
 800fae8:	d8f6      	bhi.n	800fad8 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800faea:	4a17      	ldr	r2, [pc, #92]	; (800fb48 <HAL_ADC_ConfigChannel+0x108>)
 800faec:	6811      	ldr	r1, [r2, #0]
 800faee:	2b10      	cmp	r3, #16
 800faf0:	d00e      	beq.n	800fb10 <HAL_ADC_ConfigChannel+0xd0>
 800faf2:	3b11      	subs	r3, #17
 800faf4:	001a      	movs	r2, r3
 800faf6:	1e53      	subs	r3, r2, #1
 800faf8:	419a      	sbcs	r2, r3
 800fafa:	4b14      	ldr	r3, [pc, #80]	; (800fb4c <HAL_ADC_ConfigChannel+0x10c>)
 800fafc:	4252      	negs	r2, r2
 800fafe:	4013      	ands	r3, r2
 800fb00:	4a13      	ldr	r2, [pc, #76]	; (800fb50 <HAL_ADC_ConfigChannel+0x110>)
 800fb02:	4694      	mov	ip, r2
 800fb04:	4463      	add	r3, ip
 800fb06:	4a10      	ldr	r2, [pc, #64]	; (800fb48 <HAL_ADC_ConfigChannel+0x108>)
 800fb08:	400b      	ands	r3, r1
 800fb0a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	e7ac      	b.n	800fa6a <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fb10:	4b10      	ldr	r3, [pc, #64]	; (800fb54 <HAL_ADC_ConfigChannel+0x114>)
 800fb12:	e7f8      	b.n	800fb06 <HAL_ADC_ConfigChannel+0xc6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fb14:	2380      	movs	r3, #128	; 0x80
 800fb16:	041b      	lsls	r3, r3, #16
 800fb18:	431a      	orrs	r2, r3
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fb1a:	4b0f      	ldr	r3, [pc, #60]	; (800fb58 <HAL_ADC_ConfigChannel+0x118>)
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fb1c:	600a      	str	r2, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fb1e:	6818      	ldr	r0, [r3, #0]
 800fb20:	490e      	ldr	r1, [pc, #56]	; (800fb5c <HAL_ADC_ConfigChannel+0x11c>)
 800fb22:	f7f0 fb15 	bl	8000150 <__udivsi3>
 800fb26:	0083      	lsls	r3, r0, #2
 800fb28:	1818      	adds	r0, r3, r0
 800fb2a:	0040      	lsls	r0, r0, #1
 800fb2c:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 800fb2e:	9b01      	ldr	r3, [sp, #4]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d0d1      	beq.n	800fad8 <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 800fb34:	9b01      	ldr	r3, [sp, #4]
 800fb36:	3b01      	subs	r3, #1
 800fb38:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800fb3a:	9b01      	ldr	r3, [sp, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d1f9      	bne.n	800fb34 <HAL_ADC_ConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fb40:	2000      	movs	r0, #0
 800fb42:	e792      	b.n	800fa6a <HAL_ADC_ConfigChannel+0x2a>
 800fb44:	00001001 	.word	0x00001001
 800fb48:	40012708 	.word	0x40012708
 800fb4c:	ff400000 	.word	0xff400000
 800fb50:	ffbfffff 	.word	0xffbfffff
 800fb54:	ff7fffff 	.word	0xff7fffff
 800fb58:	200000c0 	.word	0x200000c0
 800fb5c:	000f4240 	.word	0x000f4240

0800fb60 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fb60:	22ff      	movs	r2, #255	; 0xff
 800fb62:	2303      	movs	r3, #3
 800fb64:	b530      	push	{r4, r5, lr}
 800fb66:	0014      	movs	r4, r2
 800fb68:	b2c5      	uxtb	r5, r0
 800fb6a:	402b      	ands	r3, r5
 800fb6c:	00db      	lsls	r3, r3, #3
 800fb6e:	409c      	lsls	r4, r3
 800fb70:	0189      	lsls	r1, r1, #6
 800fb72:	400a      	ands	r2, r1
 800fb74:	43e4      	mvns	r4, r4
 800fb76:	409a      	lsls	r2, r3
  if((int32_t)(IRQn) < 0) {
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	db0b      	blt.n	800fb94 <HAL_NVIC_SetPriority+0x34>
 800fb7c:	4b0c      	ldr	r3, [pc, #48]	; (800fbb0 <HAL_NVIC_SetPriority+0x50>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fb7e:	0880      	lsrs	r0, r0, #2
 800fb80:	469c      	mov	ip, r3
 800fb82:	23c0      	movs	r3, #192	; 0xc0
 800fb84:	0080      	lsls	r0, r0, #2
 800fb86:	4460      	add	r0, ip
 800fb88:	009b      	lsls	r3, r3, #2
 800fb8a:	58c1      	ldr	r1, [r0, r3]
 800fb8c:	400c      	ands	r4, r1
 800fb8e:	4322      	orrs	r2, r4
 800fb90:	50c2      	str	r2, [r0, r3]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800fb92:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fb94:	230f      	movs	r3, #15
 800fb96:	4907      	ldr	r1, [pc, #28]	; (800fbb4 <HAL_NVIC_SetPriority+0x54>)
 800fb98:	402b      	ands	r3, r5
 800fb9a:	468c      	mov	ip, r1
 800fb9c:	3b08      	subs	r3, #8
 800fb9e:	089b      	lsrs	r3, r3, #2
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	4463      	add	r3, ip
 800fba4:	69d9      	ldr	r1, [r3, #28]
 800fba6:	400c      	ands	r4, r1
 800fba8:	4322      	orrs	r2, r4
 800fbaa:	61da      	str	r2, [r3, #28]
 800fbac:	e7f1      	b.n	800fb92 <HAL_NVIC_SetPriority+0x32>
 800fbae:	46c0      	nop			; (mov r8, r8)
 800fbb0:	e000e100 	.word	0xe000e100
 800fbb4:	e000ed00 	.word	0xe000ed00

0800fbb8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fbb8:	231f      	movs	r3, #31
 800fbba:	4018      	ands	r0, r3
 800fbbc:	3b1e      	subs	r3, #30
 800fbbe:	4083      	lsls	r3, r0
 800fbc0:	4a01      	ldr	r2, [pc, #4]	; (800fbc8 <HAL_NVIC_EnableIRQ+0x10>)
 800fbc2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800fbc4:	4770      	bx	lr
 800fbc6:	46c0      	nop			; (mov r8, r8)
 800fbc8:	e000e100 	.word	0xe000e100

0800fbcc <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fbcc:	231f      	movs	r3, #31
 800fbce:	4018      	ands	r0, r3
 800fbd0:	3b1e      	subs	r3, #30
 800fbd2:	4083      	lsls	r3, r0
 800fbd4:	2280      	movs	r2, #128	; 0x80
 800fbd6:	4901      	ldr	r1, [pc, #4]	; (800fbdc <HAL_NVIC_DisableIRQ+0x10>)
 800fbd8:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800fbda:	4770      	bx	lr
 800fbdc:	e000e100 	.word	0xe000e100

0800fbe0 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800fbe0:	4a0a      	ldr	r2, [pc, #40]	; (800fc0c <HAL_SYSTICK_Config+0x2c>)
 800fbe2:	1e43      	subs	r3, r0, #1
 800fbe4:	2001      	movs	r0, #1
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d80e      	bhi.n	800fc08 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fbea:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fbec:	4a08      	ldr	r2, [pc, #32]	; (800fc10 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fbee:	4809      	ldr	r0, [pc, #36]	; (800fc14 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fbf0:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fbf2:	6a03      	ldr	r3, [r0, #32]
 800fbf4:	0609      	lsls	r1, r1, #24
 800fbf6:	021b      	lsls	r3, r3, #8
 800fbf8:	0a1b      	lsrs	r3, r3, #8
 800fbfa:	430b      	orrs	r3, r1
 800fbfc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fbfe:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fc00:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fc02:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fc04:	3307      	adds	r3, #7
 800fc06:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800fc08:	4770      	bx	lr
 800fc0a:	46c0      	nop			; (mov r8, r8)
 800fc0c:	00ffffff 	.word	0x00ffffff
 800fc10:	e000e010 	.word	0xe000e010
 800fc14:	e000ed00 	.word	0xe000ed00

0800fc18 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fc18:	4a05      	ldr	r2, [pc, #20]	; (800fc30 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 800fc1a:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800fc1c:	2804      	cmp	r0, #4
 800fc1e:	d003      	beq.n	800fc28 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800fc20:	2104      	movs	r1, #4
 800fc22:	438b      	bics	r3, r1
 800fc24:	6013      	str	r3, [r2, #0]
  }
}
 800fc26:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fc28:	4318      	orrs	r0, r3
 800fc2a:	6010      	str	r0, [r2, #0]
 800fc2c:	e7fb      	b.n	800fc26 <HAL_SYSTICK_CLKSourceConfig+0xe>
 800fc2e:	46c0      	nop			; (mov r8, r8)
 800fc30:	e000e010 	.word	0xe000e010

0800fc34 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800fc34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc36:	468c      	mov	ip, r1
 800fc38:	6806      	ldr	r6, [r0, #0]
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800fc3a:	0891      	lsrs	r1, r2, #2
 800fc3c:	d010      	beq.n	800fc60 <CRC_Handle_8+0x2c>
 800fc3e:	4664      	mov	r4, ip
 800fc40:	008f      	lsls	r7, r1, #2
 800fc42:	4467      	add	r7, ip
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800fc44:	7823      	ldrb	r3, [r4, #0]
 800fc46:	7865      	ldrb	r5, [r4, #1]
 800fc48:	061b      	lsls	r3, r3, #24
 800fc4a:	042d      	lsls	r5, r5, #16
 800fc4c:	432b      	orrs	r3, r5
 800fc4e:	78e5      	ldrb	r5, [r4, #3]
 800fc50:	432b      	orrs	r3, r5
 800fc52:	78a5      	ldrb	r5, [r4, #2]
 800fc54:	3404      	adds	r4, #4
 800fc56:	022d      	lsls	r5, r5, #8
 800fc58:	432b      	orrs	r3, r5
 800fc5a:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800fc5c:	42a7      	cmp	r7, r4
 800fc5e:	d1f1      	bne.n	800fc44 <CRC_Handle_8+0x10>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800fc60:	2303      	movs	r3, #3
 800fc62:	401a      	ands	r2, r3
 800fc64:	d00b      	beq.n	800fc7e <CRC_Handle_8+0x4a>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800fc66:	0089      	lsls	r1, r1, #2
 800fc68:	4663      	mov	r3, ip
     if  (BufferLength%4 == 1)
 800fc6a:	2a01      	cmp	r2, #1
 800fc6c:	d013      	beq.n	800fc96 <CRC_Handle_8+0x62>
     }
     if  (BufferLength%4 == 2)
 800fc6e:	2a02      	cmp	r2, #2
 800fc70:	d107      	bne.n	800fc82 <CRC_Handle_8+0x4e>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fc72:	5c5a      	ldrb	r2, [r3, r1]
 800fc74:	4461      	add	r1, ip
 800fc76:	784b      	ldrb	r3, [r1, #1]
 800fc78:	0212      	lsls	r2, r2, #8
 800fc7a:	4313      	orrs	r3, r2
 800fc7c:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fc7e:	6830      	ldr	r0, [r6, #0]
}
 800fc80:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fc82:	5c5a      	ldrb	r2, [r3, r1]
 800fc84:	4461      	add	r1, ip
 800fc86:	784b      	ldrb	r3, [r1, #1]
 800fc88:	0212      	lsls	r2, r2, #8
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800fc8e:	788b      	ldrb	r3, [r1, #2]
 800fc90:	7033      	strb	r3, [r6, #0]
 800fc92:	6806      	ldr	r6, [r0, #0]
 800fc94:	e7f3      	b.n	800fc7e <CRC_Handle_8+0x4a>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800fc96:	5ccb      	ldrb	r3, [r1, r3]
 800fc98:	7033      	strb	r3, [r6, #0]
 800fc9a:	6806      	ldr	r6, [r0, #0]
 800fc9c:	e7ef      	b.n	800fc7e <CRC_Handle_8+0x4a>
 800fc9e:	46c0      	nop			; (mov r8, r8)

0800fca0 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800fca0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800fca2:	0857      	lsrs	r7, r2, #1
 800fca4:	6805      	ldr	r5, [r0, #0]
 800fca6:	d00a      	beq.n	800fcbe <CRC_Handle_16+0x1e>
 800fca8:	0008      	movs	r0, r1
 800fcaa:	00be      	lsls	r6, r7, #2
 800fcac:	1876      	adds	r6, r6, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800fcae:	8803      	ldrh	r3, [r0, #0]
 800fcb0:	8844      	ldrh	r4, [r0, #2]
 800fcb2:	041b      	lsls	r3, r3, #16
 800fcb4:	4323      	orrs	r3, r4
 800fcb6:	3004      	adds	r0, #4
 800fcb8:	602b      	str	r3, [r5, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800fcba:	4286      	cmp	r6, r0
 800fcbc:	d1f7      	bne.n	800fcae <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800fcbe:	07d3      	lsls	r3, r2, #31
 800fcc0:	d502      	bpl.n	800fcc8 <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800fcc2:	00bf      	lsls	r7, r7, #2
 800fcc4:	5a7b      	ldrh	r3, [r7, r1]
 800fcc6:	802b      	strh	r3, [r5, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fcc8:	6828      	ldr	r0, [r5, #0]
}
 800fcca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fccc <HAL_CRC_Init>:
{
 800fccc:	b510      	push	{r4, lr}
 800fcce:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800fcd0:	d01f      	beq.n	800fd12 <HAL_CRC_Init+0x46>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800fcd2:	7f43      	ldrb	r3, [r0, #29]
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d01d      	beq.n	800fd16 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fcda:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fcdc:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fcde:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fce0:	f000 f8ae 	bl	800fe40 <HAL_CRCEx_Init>
 800fce4:	2800      	cmp	r0, #0
 800fce6:	d114      	bne.n	800fd12 <HAL_CRC_Init+0x46>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800fce8:	7963      	ldrb	r3, [r4, #5]
 800fcea:	6822      	ldr	r2, [r4, #0]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d01d      	beq.n	800fd2c <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800fcf0:	6923      	ldr	r3, [r4, #16]
 800fcf2:	6113      	str	r3, [r2, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800fcf4:	2160      	movs	r1, #96	; 0x60
 800fcf6:	6893      	ldr	r3, [r2, #8]
 800fcf8:	438b      	bics	r3, r1
 800fcfa:	6961      	ldr	r1, [r4, #20]
 800fcfc:	430b      	orrs	r3, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800fcfe:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800fd00:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800fd02:	6893      	ldr	r3, [r2, #8]
 800fd04:	438b      	bics	r3, r1
 800fd06:	69a1      	ldr	r1, [r4, #24]
 800fd08:	430b      	orrs	r3, r1
 800fd0a:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800fd10:	e000      	b.n	800fd14 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800fd12:	2001      	movs	r0, #1
}
 800fd14:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800fd16:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800fd18:	f7fb fb10 	bl	800b33c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fd1c:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fd1e:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fd20:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fd22:	f000 f88d 	bl	800fe40 <HAL_CRCEx_Init>
 800fd26:	2800      	cmp	r0, #0
 800fd28:	d0de      	beq.n	800fce8 <HAL_CRC_Init+0x1c>
 800fd2a:	e7f2      	b.n	800fd12 <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800fd2c:	3b01      	subs	r3, #1
 800fd2e:	6113      	str	r3, [r2, #16]
 800fd30:	e7e0      	b.n	800fcf4 <HAL_CRC_Init+0x28>
 800fd32:	46c0      	nop			; (mov r8, r8)

0800fd34 <HAL_CRC_Accumulate>:
{
 800fd34:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 800fd36:	7f03      	ldrb	r3, [r0, #28]
{
 800fd38:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d021      	beq.n	800fd82 <HAL_CRC_Accumulate+0x4e>
 800fd3e:	2301      	movs	r3, #1
 800fd40:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fd42:	3301      	adds	r3, #1
 800fd44:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800fd46:	6a03      	ldr	r3, [r0, #32]
 800fd48:	2b02      	cmp	r3, #2
 800fd4a:	d017      	beq.n	800fd7c <HAL_CRC_Accumulate+0x48>
 800fd4c:	2b03      	cmp	r3, #3
 800fd4e:	d00a      	beq.n	800fd66 <HAL_CRC_Accumulate+0x32>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800fd50:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800fd52:	2b01      	cmp	r3, #1
 800fd54:	d102      	bne.n	800fd5c <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800fd56:	0020      	movs	r0, r4
 800fd58:	f7ff ff6c 	bl	800fc34 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY; 
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800fd60:	2300      	movs	r3, #0
 800fd62:	7723      	strb	r3, [r4, #28]
}
 800fd64:	bd10      	pop	{r4, pc}
 800fd66:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800fd68:	2a00      	cmp	r2, #0
 800fd6a:	d005      	beq.n	800fd78 <HAL_CRC_Accumulate+0x44>
 800fd6c:	0092      	lsls	r2, r2, #2
 800fd6e:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800fd70:	c908      	ldmia	r1!, {r3}
 800fd72:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800fd74:	428a      	cmp	r2, r1
 800fd76:	d1fb      	bne.n	800fd70 <HAL_CRC_Accumulate+0x3c>
      temp = hcrc->Instance->DR;
 800fd78:	6800      	ldr	r0, [r0, #0]
      break;
 800fd7a:	e7ef      	b.n	800fd5c <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800fd7c:	f7ff ff90 	bl	800fca0 <CRC_Handle_16>
      break;
 800fd80:	e7ec      	b.n	800fd5c <HAL_CRC_Accumulate+0x28>
  __HAL_LOCK(hcrc); 
 800fd82:	2002      	movs	r0, #2
 800fd84:	e7ee      	b.n	800fd64 <HAL_CRC_Accumulate+0x30>
 800fd86:	46c0      	nop			; (mov r8, r8)

0800fd88 <HAL_CRC_Calculate>:
{
 800fd88:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 800fd8a:	7f03      	ldrb	r3, [r0, #28]
{
 800fd8c:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800fd8e:	2b01      	cmp	r3, #1
 800fd90:	d026      	beq.n	800fde0 <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fd92:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 800fd94:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fd96:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800fd98:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 800fd9a:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 800fd9c:	6898      	ldr	r0, [r3, #8]
 800fd9e:	4328      	orrs	r0, r5
 800fda0:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 800fda2:	6a20      	ldr	r0, [r4, #32]
 800fda4:	2802      	cmp	r0, #2
 800fda6:	d017      	beq.n	800fdd8 <HAL_CRC_Calculate+0x50>
 800fda8:	2803      	cmp	r0, #3
 800fdaa:	d007      	beq.n	800fdbc <HAL_CRC_Calculate+0x34>
 800fdac:	2801      	cmp	r0, #1
 800fdae:	d00f      	beq.n	800fdd0 <HAL_CRC_Calculate+0x48>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800fdb0:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	7723      	strb	r3, [r4, #28]
}
 800fdba:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800fdbc:	2a00      	cmp	r2, #0
 800fdbe:	d005      	beq.n	800fdcc <HAL_CRC_Calculate+0x44>
 800fdc0:	0092      	lsls	r2, r2, #2
 800fdc2:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800fdc4:	c901      	ldmia	r1!, {r0}
 800fdc6:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 800fdc8:	4291      	cmp	r1, r2
 800fdca:	d1fb      	bne.n	800fdc4 <HAL_CRC_Calculate+0x3c>
      temp = hcrc->Instance->DR;
 800fdcc:	6818      	ldr	r0, [r3, #0]
      break;
 800fdce:	e7f0      	b.n	800fdb2 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800fdd0:	0020      	movs	r0, r4
 800fdd2:	f7ff ff2f 	bl	800fc34 <CRC_Handle_8>
      break;
 800fdd6:	e7ec      	b.n	800fdb2 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800fdd8:	0020      	movs	r0, r4
 800fdda:	f7ff ff61 	bl	800fca0 <CRC_Handle_16>
      break;
 800fdde:	e7e8      	b.n	800fdb2 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800fde0:	2002      	movs	r0, #2
 800fde2:	e7ea      	b.n	800fdba <HAL_CRC_Calculate+0x32>

0800fde4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800fde4:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800fde6:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800fde8:	2501      	movs	r5, #1
 800fdea:	e001      	b.n	800fdf0 <HAL_CRCEx_Polynomial_Set+0xc>
 800fdec:	3b01      	subs	r3, #1
 800fdee:	d312      	bcc.n	800fe16 <HAL_CRCEx_Polynomial_Set+0x32>
 800fdf0:	002c      	movs	r4, r5
 800fdf2:	409c      	lsls	r4, r3
 800fdf4:	4221      	tst	r1, r4
 800fdf6:	d0f9      	beq.n	800fdec <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 800fdf8:	2a10      	cmp	r2, #16
 800fdfa:	d01c      	beq.n	800fe36 <HAL_CRCEx_Polynomial_Set+0x52>
 800fdfc:	2a18      	cmp	r2, #24
 800fdfe:	d012      	beq.n	800fe26 <HAL_CRCEx_Polynomial_Set+0x42>
 800fe00:	2a08      	cmp	r2, #8
 800fe02:	d014      	beq.n	800fe2e <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800fe04:	6800      	ldr	r0, [r0, #0]
 800fe06:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800fe08:	2118      	movs	r1, #24
 800fe0a:	6883      	ldr	r3, [r0, #8]
 800fe0c:	438b      	bics	r3, r1
 800fe0e:	431a      	orrs	r2, r3
 800fe10:	6082      	str	r2, [r0, #8]
 800fe12:	2000      	movs	r0, #0
  
  /* Return function status */
  return HAL_OK;
}
 800fe14:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 800fe16:	2a10      	cmp	r2, #16
 800fe18:	d003      	beq.n	800fe22 <HAL_CRCEx_Polynomial_Set+0x3e>
 800fe1a:	2a18      	cmp	r2, #24
 800fe1c:	d001      	beq.n	800fe22 <HAL_CRCEx_Polynomial_Set+0x3e>
 800fe1e:	2a08      	cmp	r2, #8
 800fe20:	d1f0      	bne.n	800fe04 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fe22:	2001      	movs	r0, #1
 800fe24:	e7f6      	b.n	800fe14 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 800fe26:	2b06      	cmp	r3, #6
 800fe28:	d9ec      	bls.n	800fe04 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fe2a:	2001      	movs	r0, #1
 800fe2c:	e7f2      	b.n	800fe14 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 800fe2e:	2b0f      	cmp	r3, #15
 800fe30:	d9e8      	bls.n	800fe04 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fe32:	2001      	movs	r0, #1
 800fe34:	e7ee      	b.n	800fe14 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 800fe36:	2b07      	cmp	r3, #7
 800fe38:	d9e4      	bls.n	800fe04 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fe3a:	2001      	movs	r0, #1
 800fe3c:	e7ea      	b.n	800fe14 <HAL_CRCEx_Polynomial_Set+0x30>
 800fe3e:	46c0      	nop			; (mov r8, r8)

0800fe40 <HAL_CRCEx_Init>:
{
 800fe40:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800fe42:	7903      	ldrb	r3, [r0, #4]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d108      	bne.n	800fe5a <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800fe48:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800fe4a:	6803      	ldr	r3, [r0, #0]
   return HAL_OK;
 800fe4c:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800fe4e:	4a07      	ldr	r2, [pc, #28]	; (800fe6c <HAL_CRCEx_Init+0x2c>)
 800fe50:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800fe52:	689a      	ldr	r2, [r3, #8]
 800fe54:	438a      	bics	r2, r1
 800fe56:	609a      	str	r2, [r3, #8]
}
 800fe58:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800fe5a:	68c2      	ldr	r2, [r0, #12]
 800fe5c:	6881      	ldr	r1, [r0, #8]
 800fe5e:	f7ff ffc1 	bl	800fde4 <HAL_CRCEx_Polynomial_Set>
 800fe62:	1e43      	subs	r3, r0, #1
 800fe64:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800fe66:	b2c0      	uxtb	r0, r0
 800fe68:	e7f6      	b.n	800fe58 <HAL_CRCEx_Init+0x18>
 800fe6a:	46c0      	nop			; (mov r8, r8)
 800fe6c:	04c11db7 	.word	0x04c11db7

0800fe70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800fe70:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800fe72:	2800      	cmp	r0, #0
 800fe74:	d023      	beq.n	800febe <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800fe76:	2321      	movs	r3, #33	; 0x21
 800fe78:	5cc3      	ldrb	r3, [r0, r3]
 800fe7a:	b2db      	uxtb	r3, r3
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d01b      	beq.n	800feb8 <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800fe80:	2121      	movs	r1, #33	; 0x21
 800fe82:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800fe84:	6804      	ldr	r4, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800fe86:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 800fe88:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800fe8a:	4a0e      	ldr	r2, [pc, #56]	; (800fec4 <HAL_DMA_Init+0x54>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800fe8c:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800fe8e:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800fe90:	6843      	ldr	r3, [r0, #4]
 800fe92:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fe94:	68c5      	ldr	r5, [r0, #12]
 800fe96:	432b      	orrs	r3, r5
 800fe98:	6905      	ldr	r5, [r0, #16]
 800fe9a:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fe9c:	6945      	ldr	r5, [r0, #20]
 800fe9e:	432b      	orrs	r3, r5
 800fea0:	6985      	ldr	r5, [r0, #24]
 800fea2:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800fea4:	69c5      	ldr	r5, [r0, #28]
 800fea6:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800fea8:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800feaa:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800feac:	2300      	movs	r3, #0
 800feae:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800feb0:	3301      	adds	r3, #1
 800feb2:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800feb4:	2000      	movs	r0, #0
}  
 800feb6:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 800feb8:	2220      	movs	r2, #32
 800feba:	5483      	strb	r3, [r0, r2]
 800febc:	e7e0      	b.n	800fe80 <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 800febe:	2001      	movs	r0, #1
 800fec0:	e7f9      	b.n	800feb6 <HAL_DMA_Init+0x46>
 800fec2:	46c0      	nop			; (mov r8, r8)
 800fec4:	ffffc00f 	.word	0xffffc00f

0800fec8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fec8:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800feca:	2420      	movs	r4, #32
 800fecc:	5d05      	ldrb	r5, [r0, r4]
 800fece:	2d01      	cmp	r5, #1
 800fed0:	d023      	beq.n	800ff1a <HAL_DMA_Start_IT+0x52>
 800fed2:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800fed4:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 800fed6:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 800fed8:	3401      	adds	r4, #1
 800feda:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800fedc:	6804      	ldr	r4, [r0, #0]
 800fede:	6825      	ldr	r5, [r4, #0]
 800fee0:	43b5      	bics	r5, r6
 800fee2:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800fee4:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fee6:	6843      	ldr	r3, [r0, #4]
 800fee8:	2b10      	cmp	r3, #16
 800feea:	d013      	beq.n	800ff14 <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800feec:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800feee:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800fef0:	2202      	movs	r2, #2
  return HAL_OK;    
 800fef2:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800fef4:	6823      	ldr	r3, [r4, #0]
 800fef6:	4313      	orrs	r3, r2
 800fef8:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800fefa:	6823      	ldr	r3, [r4, #0]
 800fefc:	3202      	adds	r2, #2
 800fefe:	4313      	orrs	r3, r2
 800ff00:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800ff02:	6823      	ldr	r3, [r4, #0]
 800ff04:	3204      	adds	r2, #4
 800ff06:	4313      	orrs	r3, r2
 800ff08:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 800ff0a:	6823      	ldr	r3, [r4, #0]
 800ff0c:	3a07      	subs	r2, #7
 800ff0e:	4313      	orrs	r3, r2
 800ff10:	6023      	str	r3, [r4, #0]
} 
 800ff12:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800ff14:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800ff16:	60e1      	str	r1, [r4, #12]
 800ff18:	e7ea      	b.n	800fef0 <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 800ff1a:	2002      	movs	r0, #2
 800ff1c:	e7f9      	b.n	800ff12 <HAL_DMA_Start_IT+0x4a>
 800ff1e:	46c0      	nop			; (mov r8, r8)

0800ff20 <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 800ff20:	2101      	movs	r1, #1
 800ff22:	6802      	ldr	r2, [r0, #0]
{
 800ff24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 800ff26:	6813      	ldr	r3, [r2, #0]
{
 800ff28:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800ff2a:	438b      	bics	r3, r1
 800ff2c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800ff2e:	f7ff fad9 	bl	800f4e4 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800ff32:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 800ff34:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800ff36:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800ff38:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800ff3a:	e004      	b.n	800ff46 <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800ff3c:	f7ff fad2 	bl	800f4e4 <HAL_GetTick>
 800ff40:	1bc0      	subs	r0, r0, r7
 800ff42:	42b0      	cmp	r0, r6
 800ff44:	d809      	bhi.n	800ff5a <HAL_DMA_Abort+0x3a>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800ff46:	6823      	ldr	r3, [r4, #0]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	402b      	ands	r3, r5
 800ff4c:	d1f6      	bne.n	800ff3c <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 800ff4e:	2221      	movs	r2, #33	; 0x21
  return HAL_OK; 
 800ff50:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 800ff52:	54a5      	strb	r5, [r4, r2]
  __HAL_UNLOCK(hdma);
 800ff54:	3a01      	subs	r2, #1
 800ff56:	54a3      	strb	r3, [r4, r2]
}
 800ff58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800ff5a:	2220      	movs	r2, #32
 800ff5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ff5e:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800ff60:	4313      	orrs	r3, r2
 800ff62:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ff64:	2321      	movs	r3, #33	; 0x21
 800ff66:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 800ff68:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800ff6a:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 800ff6c:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 800ff6e:	e7f3      	b.n	800ff58 <HAL_DMA_Abort+0x38>

0800ff70 <HAL_DMA_IRQHandler>:
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff70:	6803      	ldr	r3, [r0, #0]
 800ff72:	4aa2      	ldr	r2, [pc, #648]	; (80101fc <HAL_DMA_IRQHandler+0x28c>)
{        
 800ff74:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff76:	0019      	movs	r1, r3
{        
 800ff78:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff7a:	4293      	cmp	r3, r2
 800ff7c:	d937      	bls.n	800ffee <HAL_DMA_IRQHandler+0x7e>
 800ff7e:	48a0      	ldr	r0, [pc, #640]	; (8010200 <HAL_DMA_IRQHandler+0x290>)
 800ff80:	4da0      	ldr	r5, [pc, #640]	; (8010204 <HAL_DMA_IRQHandler+0x294>)
 800ff82:	6806      	ldr	r6, [r0, #0]
 800ff84:	42ab      	cmp	r3, r5
 800ff86:	d100      	bne.n	800ff8a <HAL_DMA_IRQHandler+0x1a>
 800ff88:	e0ed      	b.n	8010166 <HAL_DMA_IRQHandler+0x1f6>
 800ff8a:	4d9f      	ldr	r5, [pc, #636]	; (8010208 <HAL_DMA_IRQHandler+0x298>)
 800ff8c:	42ab      	cmp	r3, r5
 800ff8e:	d100      	bne.n	800ff92 <HAL_DMA_IRQHandler+0x22>
 800ff90:	e334      	b.n	80105fc <HAL_DMA_IRQHandler+0x68c>
 800ff92:	4d9e      	ldr	r5, [pc, #632]	; (801020c <HAL_DMA_IRQHandler+0x29c>)
 800ff94:	42ab      	cmp	r3, r5
 800ff96:	d100      	bne.n	800ff9a <HAL_DMA_IRQHandler+0x2a>
 800ff98:	e129      	b.n	80101ee <HAL_DMA_IRQHandler+0x27e>
 800ff9a:	4d9d      	ldr	r5, [pc, #628]	; (8010210 <HAL_DMA_IRQHandler+0x2a0>)
 800ff9c:	42ab      	cmp	r3, r5
 800ff9e:	d100      	bne.n	800ffa2 <HAL_DMA_IRQHandler+0x32>
 800ffa0:	e34b      	b.n	801063a <HAL_DMA_IRQHandler+0x6ca>
 800ffa2:	4d9c      	ldr	r5, [pc, #624]	; (8010214 <HAL_DMA_IRQHandler+0x2a4>)
 800ffa4:	42ab      	cmp	r3, r5
 800ffa6:	d100      	bne.n	800ffaa <HAL_DMA_IRQHandler+0x3a>
 800ffa8:	e38b      	b.n	80106c2 <HAL_DMA_IRQHandler+0x752>
 800ffaa:	4d9b      	ldr	r5, [pc, #620]	; (8010218 <HAL_DMA_IRQHandler+0x2a8>)
 800ffac:	42ab      	cmp	r3, r5
 800ffae:	d100      	bne.n	800ffb2 <HAL_DMA_IRQHandler+0x42>
 800ffb0:	e3cf      	b.n	8010752 <HAL_DMA_IRQHandler+0x7e2>
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d100      	bne.n	800ffb8 <HAL_DMA_IRQHandler+0x48>
 800ffb6:	e35e      	b.n	8010676 <HAL_DMA_IRQHandler+0x706>
 800ffb8:	4a98      	ldr	r2, [pc, #608]	; (801021c <HAL_DMA_IRQHandler+0x2ac>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d101      	bne.n	800ffc2 <HAL_DMA_IRQHandler+0x52>
 800ffbe:	f000 fbe8 	bl	8010792 <HAL_DMA_IRQHandler+0x822>
 800ffc2:	4a97      	ldr	r2, [pc, #604]	; (8010220 <HAL_DMA_IRQHandler+0x2b0>)
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d101      	bne.n	800ffcc <HAL_DMA_IRQHandler+0x5c>
 800ffc8:	f000 fc04 	bl	80107d4 <HAL_DMA_IRQHandler+0x864>
 800ffcc:	4a95      	ldr	r2, [pc, #596]	; (8010224 <HAL_DMA_IRQHandler+0x2b4>)
 800ffce:	4293      	cmp	r3, r2
 800ffd0:	d101      	bne.n	800ffd6 <HAL_DMA_IRQHandler+0x66>
 800ffd2:	f000 fc21 	bl	8010818 <HAL_DMA_IRQHandler+0x8a8>
 800ffd6:	4a94      	ldr	r2, [pc, #592]	; (8010228 <HAL_DMA_IRQHandler+0x2b8>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d101      	bne.n	800ffe0 <HAL_DMA_IRQHandler+0x70>
 800ffdc:	f000 fc37 	bl	801084e <HAL_DMA_IRQHandler+0x8de>
 800ffe0:	0332      	lsls	r2, r6, #12
 800ffe2:	d43c      	bmi.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ffe4:	4a86      	ldr	r2, [pc, #536]	; (8010200 <HAL_DMA_IRQHandler+0x290>)
 800ffe6:	6810      	ldr	r0, [r2, #0]
 800ffe8:	2280      	movs	r2, #128	; 0x80
 800ffea:	02d2      	lsls	r2, r2, #11
 800ffec:	e0c0      	b.n	8010170 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ffee:	488f      	ldr	r0, [pc, #572]	; (801022c <HAL_DMA_IRQHandler+0x2bc>)
 800fff0:	4d84      	ldr	r5, [pc, #528]	; (8010204 <HAL_DMA_IRQHandler+0x294>)
 800fff2:	6806      	ldr	r6, [r0, #0]
 800fff4:	42ab      	cmp	r3, r5
 800fff6:	d02e      	beq.n	8010056 <HAL_DMA_IRQHandler+0xe6>
 800fff8:	4d83      	ldr	r5, [pc, #524]	; (8010208 <HAL_DMA_IRQHandler+0x298>)
 800fffa:	42ab      	cmp	r3, r5
 800fffc:	d100      	bne.n	8010000 <HAL_DMA_IRQHandler+0x90>
 800fffe:	e2f6      	b.n	80105ee <HAL_DMA_IRQHandler+0x67e>
 8010000:	4d82      	ldr	r5, [pc, #520]	; (801020c <HAL_DMA_IRQHandler+0x29c>)
 8010002:	42ab      	cmp	r3, r5
 8010004:	d100      	bne.n	8010008 <HAL_DMA_IRQHandler+0x98>
 8010006:	e0ea      	b.n	80101de <HAL_DMA_IRQHandler+0x26e>
 8010008:	4d81      	ldr	r5, [pc, #516]	; (8010210 <HAL_DMA_IRQHandler+0x2a0>)
 801000a:	42ab      	cmp	r3, r5
 801000c:	d100      	bne.n	8010010 <HAL_DMA_IRQHandler+0xa0>
 801000e:	e30c      	b.n	801062a <HAL_DMA_IRQHandler+0x6ba>
 8010010:	4d80      	ldr	r5, [pc, #512]	; (8010214 <HAL_DMA_IRQHandler+0x2a4>)
 8010012:	42ab      	cmp	r3, r5
 8010014:	d100      	bne.n	8010018 <HAL_DMA_IRQHandler+0xa8>
 8010016:	e35b      	b.n	80106d0 <HAL_DMA_IRQHandler+0x760>
 8010018:	4d7f      	ldr	r5, [pc, #508]	; (8010218 <HAL_DMA_IRQHandler+0x2a8>)
 801001a:	42ab      	cmp	r3, r5
 801001c:	d100      	bne.n	8010020 <HAL_DMA_IRQHandler+0xb0>
 801001e:	e390      	b.n	8010742 <HAL_DMA_IRQHandler+0x7d2>
 8010020:	4293      	cmp	r3, r2
 8010022:	d100      	bne.n	8010026 <HAL_DMA_IRQHandler+0xb6>
 8010024:	e31f      	b.n	8010666 <HAL_DMA_IRQHandler+0x6f6>
 8010026:	4a7d      	ldr	r2, [pc, #500]	; (801021c <HAL_DMA_IRQHandler+0x2ac>)
 8010028:	4293      	cmp	r3, r2
 801002a:	d100      	bne.n	801002e <HAL_DMA_IRQHandler+0xbe>
 801002c:	e3aa      	b.n	8010784 <HAL_DMA_IRQHandler+0x814>
 801002e:	4a7c      	ldr	r2, [pc, #496]	; (8010220 <HAL_DMA_IRQHandler+0x2b0>)
 8010030:	4293      	cmp	r3, r2
 8010032:	d100      	bne.n	8010036 <HAL_DMA_IRQHandler+0xc6>
 8010034:	e3c7      	b.n	80107c6 <HAL_DMA_IRQHandler+0x856>
 8010036:	4a7b      	ldr	r2, [pc, #492]	; (8010224 <HAL_DMA_IRQHandler+0x2b4>)
 8010038:	4293      	cmp	r3, r2
 801003a:	d101      	bne.n	8010040 <HAL_DMA_IRQHandler+0xd0>
 801003c:	f000 fbe4 	bl	8010808 <HAL_DMA_IRQHandler+0x898>
 8010040:	4a79      	ldr	r2, [pc, #484]	; (8010228 <HAL_DMA_IRQHandler+0x2b8>)
 8010042:	4293      	cmp	r3, r2
 8010044:	d100      	bne.n	8010048 <HAL_DMA_IRQHandler+0xd8>
 8010046:	e2e8      	b.n	801061a <HAL_DMA_IRQHandler+0x6aa>
 8010048:	0332      	lsls	r2, r6, #12
 801004a:	d408      	bmi.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801004c:	4a77      	ldr	r2, [pc, #476]	; (801022c <HAL_DMA_IRQHandler+0x2bc>)
 801004e:	6810      	ldr	r0, [r2, #0]
 8010050:	2280      	movs	r2, #128	; 0x80
 8010052:	02d2      	lsls	r2, r2, #11
 8010054:	e15f      	b.n	8010316 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010056:	0732      	lsls	r2, r6, #28
 8010058:	d401      	bmi.n	801005e <HAL_DMA_IRQHandler+0xee>
 801005a:	f000 fc0a 	bl	8010872 <HAL_DMA_IRQHandler+0x902>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801005e:	2208      	movs	r2, #8
 8010060:	6818      	ldr	r0, [r3, #0]
 8010062:	4202      	tst	r2, r0
 8010064:	d100      	bne.n	8010068 <HAL_DMA_IRQHandler+0xf8>
 8010066:	e1f4      	b.n	8010452 <HAL_DMA_IRQHandler+0x4e2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010068:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801006a:	4d66      	ldr	r5, [pc, #408]	; (8010204 <HAL_DMA_IRQHandler+0x294>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 801006c:	4390      	bics	r0, r2
 801006e:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010070:	4862      	ldr	r0, [pc, #392]	; (80101fc <HAL_DMA_IRQHandler+0x28c>)
 8010072:	4283      	cmp	r3, r0
 8010074:	d800      	bhi.n	8010078 <HAL_DMA_IRQHandler+0x108>
 8010076:	e1a9      	b.n	80103cc <HAL_DMA_IRQHandler+0x45c>
 8010078:	42ab      	cmp	r3, r5
 801007a:	d100      	bne.n	801007e <HAL_DMA_IRQHandler+0x10e>
 801007c:	e310      	b.n	80106a0 <HAL_DMA_IRQHandler+0x730>
 801007e:	4a62      	ldr	r2, [pc, #392]	; (8010208 <HAL_DMA_IRQHandler+0x298>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d100      	bne.n	8010086 <HAL_DMA_IRQHandler+0x116>
 8010084:	e337      	b.n	80106f6 <HAL_DMA_IRQHandler+0x786>
 8010086:	4a61      	ldr	r2, [pc, #388]	; (801020c <HAL_DMA_IRQHandler+0x29c>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d100      	bne.n	801008e <HAL_DMA_IRQHandler+0x11e>
 801008c:	e2df      	b.n	801064e <HAL_DMA_IRQHandler+0x6de>
 801008e:	4a60      	ldr	r2, [pc, #384]	; (8010210 <HAL_DMA_IRQHandler+0x2a0>)
 8010090:	4293      	cmp	r3, r2
 8010092:	d100      	bne.n	8010096 <HAL_DMA_IRQHandler+0x126>
 8010094:	e370      	b.n	8010778 <HAL_DMA_IRQHandler+0x808>
 8010096:	4a5f      	ldr	r2, [pc, #380]	; (8010214 <HAL_DMA_IRQHandler+0x2a4>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d100      	bne.n	801009e <HAL_DMA_IRQHandler+0x12e>
 801009c:	e38a      	b.n	80107b4 <HAL_DMA_IRQHandler+0x844>
 801009e:	4a5e      	ldr	r2, [pc, #376]	; (8010218 <HAL_DMA_IRQHandler+0x2a8>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d100      	bne.n	80100a6 <HAL_DMA_IRQHandler+0x136>
 80100a4:	e3a4      	b.n	80107f0 <HAL_DMA_IRQHandler+0x880>
 80100a6:	4283      	cmp	r3, r0
 80100a8:	d100      	bne.n	80100ac <HAL_DMA_IRQHandler+0x13c>
 80100aa:	e3cd      	b.n	8010848 <HAL_DMA_IRQHandler+0x8d8>
 80100ac:	4a5b      	ldr	r2, [pc, #364]	; (801021c <HAL_DMA_IRQHandler+0x2ac>)
 80100ae:	4293      	cmp	r3, r2
 80100b0:	d100      	bne.n	80100b4 <HAL_DMA_IRQHandler+0x144>
 80100b2:	e3d8      	b.n	8010866 <HAL_DMA_IRQHandler+0x8f6>
 80100b4:	4a5a      	ldr	r2, [pc, #360]	; (8010220 <HAL_DMA_IRQHandler+0x2b0>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d100      	bne.n	80100bc <HAL_DMA_IRQHandler+0x14c>
 80100ba:	e3d8      	b.n	801086e <HAL_DMA_IRQHandler+0x8fe>
 80100bc:	4a59      	ldr	r2, [pc, #356]	; (8010224 <HAL_DMA_IRQHandler+0x2b4>)
 80100be:	4293      	cmp	r3, r2
 80100c0:	d100      	bne.n	80100c4 <HAL_DMA_IRQHandler+0x154>
 80100c2:	e2c4      	b.n	801064e <HAL_DMA_IRQHandler+0x6de>
 80100c4:	4a5a      	ldr	r2, [pc, #360]	; (8010230 <HAL_DMA_IRQHandler+0x2c0>)
 80100c6:	189a      	adds	r2, r3, r2
 80100c8:	4250      	negs	r0, r2
 80100ca:	4142      	adcs	r2, r0
 80100cc:	4859      	ldr	r0, [pc, #356]	; (8010234 <HAL_DMA_IRQHandler+0x2c4>)
 80100ce:	4252      	negs	r2, r2
 80100d0:	4002      	ands	r2, r0
 80100d2:	2080      	movs	r0, #128	; 0x80
 80100d4:	0300      	lsls	r0, r0, #12
 80100d6:	4684      	mov	ip, r0
 80100d8:	4462      	add	r2, ip
 80100da:	4849      	ldr	r0, [pc, #292]	; (8010200 <HAL_DMA_IRQHandler+0x290>)
 80100dc:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80100de:	2001      	movs	r0, #1
 80100e0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80100e2:	4302      	orrs	r2, r0
 80100e4:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80100e6:	2221      	movs	r2, #33	; 0x21
 80100e8:	3003      	adds	r0, #3
 80100ea:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80100ec:	2000      	movs	r0, #0
 80100ee:	3a01      	subs	r2, #1
 80100f0:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80100f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80100f4:	2a00      	cmp	r2, #0
 80100f6:	d000      	beq.n	80100fa <HAL_DMA_IRQHandler+0x18a>
 80100f8:	e1a7      	b.n	801044a <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80100fa:	4a41      	ldr	r2, [pc, #260]	; (8010200 <HAL_DMA_IRQHandler+0x290>)
 80100fc:	4d41      	ldr	r5, [pc, #260]	; (8010204 <HAL_DMA_IRQHandler+0x294>)
 80100fe:	6810      	ldr	r0, [r2, #0]
 8010100:	2204      	movs	r2, #4
 8010102:	42ab      	cmp	r3, r5
 8010104:	d034      	beq.n	8010170 <HAL_DMA_IRQHandler+0x200>
 8010106:	4d40      	ldr	r5, [pc, #256]	; (8010208 <HAL_DMA_IRQHandler+0x298>)
 8010108:	2240      	movs	r2, #64	; 0x40
 801010a:	42ab      	cmp	r3, r5
 801010c:	d030      	beq.n	8010170 <HAL_DMA_IRQHandler+0x200>
 801010e:	4a3f      	ldr	r2, [pc, #252]	; (801020c <HAL_DMA_IRQHandler+0x29c>)
 8010110:	4293      	cmp	r3, r2
 8010112:	d100      	bne.n	8010116 <HAL_DMA_IRQHandler+0x1a6>
 8010114:	e3b1      	b.n	801087a <HAL_DMA_IRQHandler+0x90a>
 8010116:	4a3e      	ldr	r2, [pc, #248]	; (8010210 <HAL_DMA_IRQHandler+0x2a0>)
 8010118:	4293      	cmp	r3, r2
 801011a:	d100      	bne.n	801011e <HAL_DMA_IRQHandler+0x1ae>
 801011c:	e39e      	b.n	801085c <HAL_DMA_IRQHandler+0x8ec>
 801011e:	4a3d      	ldr	r2, [pc, #244]	; (8010214 <HAL_DMA_IRQHandler+0x2a4>)
 8010120:	4293      	cmp	r3, r2
 8010122:	d100      	bne.n	8010126 <HAL_DMA_IRQHandler+0x1b6>
 8010124:	e760      	b.n	800ffe8 <HAL_DMA_IRQHandler+0x78>
 8010126:	4a3c      	ldr	r2, [pc, #240]	; (8010218 <HAL_DMA_IRQHandler+0x2a8>)
 8010128:	4293      	cmp	r3, r2
 801012a:	d100      	bne.n	801012e <HAL_DMA_IRQHandler+0x1be>
 801012c:	e315      	b.n	801075a <HAL_DMA_IRQHandler+0x7ea>
 801012e:	4a33      	ldr	r2, [pc, #204]	; (80101fc <HAL_DMA_IRQHandler+0x28c>)
 8010130:	4293      	cmp	r3, r2
 8010132:	d100      	bne.n	8010136 <HAL_DMA_IRQHandler+0x1c6>
 8010134:	e2a3      	b.n	801067e <HAL_DMA_IRQHandler+0x70e>
 8010136:	4d39      	ldr	r5, [pc, #228]	; (801021c <HAL_DMA_IRQHandler+0x2ac>)
 8010138:	2204      	movs	r2, #4
 801013a:	42ab      	cmp	r3, r5
 801013c:	d018      	beq.n	8010170 <HAL_DMA_IRQHandler+0x200>
 801013e:	4d38      	ldr	r5, [pc, #224]	; (8010220 <HAL_DMA_IRQHandler+0x2b0>)
 8010140:	323c      	adds	r2, #60	; 0x3c
 8010142:	42ab      	cmp	r3, r5
 8010144:	d014      	beq.n	8010170 <HAL_DMA_IRQHandler+0x200>
 8010146:	4a37      	ldr	r2, [pc, #220]	; (8010224 <HAL_DMA_IRQHandler+0x2b4>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d100      	bne.n	801014e <HAL_DMA_IRQHandler+0x1de>
 801014c:	e395      	b.n	801087a <HAL_DMA_IRQHandler+0x90a>
 801014e:	4a38      	ldr	r2, [pc, #224]	; (8010230 <HAL_DMA_IRQHandler+0x2c0>)
 8010150:	189a      	adds	r2, r3, r2
 8010152:	4255      	negs	r5, r2
 8010154:	416a      	adcs	r2, r5
 8010156:	4d38      	ldr	r5, [pc, #224]	; (8010238 <HAL_DMA_IRQHandler+0x2c8>)
 8010158:	4252      	negs	r2, r2
 801015a:	402a      	ands	r2, r5
 801015c:	2580      	movs	r5, #128	; 0x80
 801015e:	02ed      	lsls	r5, r5, #11
 8010160:	46ac      	mov	ip, r5
 8010162:	4462      	add	r2, ip
 8010164:	e004      	b.n	8010170 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010166:	0732      	lsls	r2, r6, #28
 8010168:	d500      	bpl.n	801016c <HAL_DMA_IRQHandler+0x1fc>
 801016a:	e778      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801016c:	2204      	movs	r2, #4
 801016e:	6800      	ldr	r0, [r0, #0]
 8010170:	4210      	tst	r0, r2
 8010172:	d000      	beq.n	8010176 <HAL_DMA_IRQHandler+0x206>
 8010174:	e0d1      	b.n	801031a <HAL_DMA_IRQHandler+0x3aa>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010176:	4a22      	ldr	r2, [pc, #136]	; (8010200 <HAL_DMA_IRQHandler+0x290>)
 8010178:	6810      	ldr	r0, [r2, #0]
 801017a:	4a22      	ldr	r2, [pc, #136]	; (8010204 <HAL_DMA_IRQHandler+0x294>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d100      	bne.n	8010182 <HAL_DMA_IRQHandler+0x212>
 8010180:	e122      	b.n	80103c8 <HAL_DMA_IRQHandler+0x458>
 8010182:	4a21      	ldr	r2, [pc, #132]	; (8010208 <HAL_DMA_IRQHandler+0x298>)
 8010184:	4293      	cmp	r3, r2
 8010186:	d05b      	beq.n	8010240 <HAL_DMA_IRQHandler+0x2d0>
 8010188:	4a20      	ldr	r2, [pc, #128]	; (801020c <HAL_DMA_IRQHandler+0x29c>)
 801018a:	4293      	cmp	r3, r2
 801018c:	d100      	bne.n	8010190 <HAL_DMA_IRQHandler+0x220>
 801018e:	e19a      	b.n	80104c6 <HAL_DMA_IRQHandler+0x556>
 8010190:	4a1f      	ldr	r2, [pc, #124]	; (8010210 <HAL_DMA_IRQHandler+0x2a0>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d100      	bne.n	8010198 <HAL_DMA_IRQHandler+0x228>
 8010196:	e237      	b.n	8010608 <HAL_DMA_IRQHandler+0x698>
 8010198:	4a1e      	ldr	r2, [pc, #120]	; (8010214 <HAL_DMA_IRQHandler+0x2a4>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d100      	bne.n	80101a0 <HAL_DMA_IRQHandler+0x230>
 801019e:	e239      	b.n	8010614 <HAL_DMA_IRQHandler+0x6a4>
 80101a0:	4a1d      	ldr	r2, [pc, #116]	; (8010218 <HAL_DMA_IRQHandler+0x2a8>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d100      	bne.n	80101a8 <HAL_DMA_IRQHandler+0x238>
 80101a6:	e24f      	b.n	8010648 <HAL_DMA_IRQHandler+0x6d8>
 80101a8:	4a14      	ldr	r2, [pc, #80]	; (80101fc <HAL_DMA_IRQHandler+0x28c>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d100      	bne.n	80101b0 <HAL_DMA_IRQHandler+0x240>
 80101ae:	e297      	b.n	80106e0 <HAL_DMA_IRQHandler+0x770>
 80101b0:	4a1a      	ldr	r2, [pc, #104]	; (801021c <HAL_DMA_IRQHandler+0x2ac>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d100      	bne.n	80101b8 <HAL_DMA_IRQHandler+0x248>
 80101b6:	e107      	b.n	80103c8 <HAL_DMA_IRQHandler+0x458>
 80101b8:	4a19      	ldr	r2, [pc, #100]	; (8010220 <HAL_DMA_IRQHandler+0x2b0>)
 80101ba:	4293      	cmp	r3, r2
 80101bc:	d040      	beq.n	8010240 <HAL_DMA_IRQHandler+0x2d0>
 80101be:	4a19      	ldr	r2, [pc, #100]	; (8010224 <HAL_DMA_IRQHandler+0x2b4>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d100      	bne.n	80101c6 <HAL_DMA_IRQHandler+0x256>
 80101c4:	e17f      	b.n	80104c6 <HAL_DMA_IRQHandler+0x556>
 80101c6:	4a1a      	ldr	r2, [pc, #104]	; (8010230 <HAL_DMA_IRQHandler+0x2c0>)
 80101c8:	1899      	adds	r1, r3, r2
 80101ca:	424a      	negs	r2, r1
 80101cc:	4151      	adcs	r1, r2
 80101ce:	4a1b      	ldr	r2, [pc, #108]	; (801023c <HAL_DMA_IRQHandler+0x2cc>)
 80101d0:	4249      	negs	r1, r1
 80101d2:	400a      	ands	r2, r1
 80101d4:	2180      	movs	r1, #128	; 0x80
 80101d6:	0289      	lsls	r1, r1, #10
 80101d8:	468c      	mov	ip, r1
 80101da:	4462      	add	r2, ip
 80101dc:	e031      	b.n	8010242 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80101de:	0532      	lsls	r2, r6, #20
 80101e0:	d500      	bpl.n	80101e4 <HAL_DMA_IRQHandler+0x274>
 80101e2:	e73c      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80101e4:	2280      	movs	r2, #128	; 0x80
 80101e6:	6800      	ldr	r0, [r0, #0]
 80101e8:	0019      	movs	r1, r3
 80101ea:	00d2      	lsls	r2, r2, #3
 80101ec:	e093      	b.n	8010316 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80101ee:	0532      	lsls	r2, r6, #20
 80101f0:	d500      	bpl.n	80101f4 <HAL_DMA_IRQHandler+0x284>
 80101f2:	e734      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80101f4:	2280      	movs	r2, #128	; 0x80
 80101f6:	6800      	ldr	r0, [r0, #0]
 80101f8:	00d2      	lsls	r2, r2, #3
 80101fa:	e7b9      	b.n	8010170 <HAL_DMA_IRQHandler+0x200>
 80101fc:	40020080 	.word	0x40020080
 8010200:	40020400 	.word	0x40020400
 8010204:	40020008 	.word	0x40020008
 8010208:	4002001c 	.word	0x4002001c
 801020c:	40020030 	.word	0x40020030
 8010210:	40020044 	.word	0x40020044
 8010214:	40020058 	.word	0x40020058
 8010218:	4002006c 	.word	0x4002006c
 801021c:	40020408 	.word	0x40020408
 8010220:	4002041c 	.word	0x4002041c
 8010224:	40020430 	.word	0x40020430
 8010228:	40020444 	.word	0x40020444
 801022c:	40020000 	.word	0x40020000
 8010230:	bffdfbbc 	.word	0xbffdfbbc
 8010234:	fff88000 	.word	0xfff88000
 8010238:	fffc4000 	.word	0xfffc4000
 801023c:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010240:	2220      	movs	r2, #32
 8010242:	4002      	ands	r2, r0
 8010244:	1e51      	subs	r1, r2, #1
 8010246:	418a      	sbcs	r2, r1
 8010248:	b2d2      	uxtb	r2, r2
 801024a:	2a00      	cmp	r2, #0
 801024c:	d050      	beq.n	80102f0 <HAL_DMA_IRQHandler+0x380>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801024e:	2202      	movs	r2, #2
 8010250:	6819      	ldr	r1, [r3, #0]
 8010252:	420a      	tst	r2, r1
 8010254:	d04c      	beq.n	80102f0 <HAL_DMA_IRQHandler+0x380>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010256:	6819      	ldr	r1, [r3, #0]
 8010258:	0689      	lsls	r1, r1, #26
 801025a:	d402      	bmi.n	8010262 <HAL_DMA_IRQHandler+0x2f2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 801025c:	6819      	ldr	r1, [r3, #0]
 801025e:	4391      	bics	r1, r2
 8010260:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010262:	4ab5      	ldr	r2, [pc, #724]	; (8010538 <HAL_DMA_IRQHandler+0x5c8>)
 8010264:	49b5      	ldr	r1, [pc, #724]	; (801053c <HAL_DMA_IRQHandler+0x5cc>)
 8010266:	4293      	cmp	r3, r2
 8010268:	d800      	bhi.n	801026c <HAL_DMA_IRQHandler+0x2fc>
 801026a:	e12f      	b.n	80104cc <HAL_DMA_IRQHandler+0x55c>
 801026c:	428b      	cmp	r3, r1
 801026e:	d100      	bne.n	8010272 <HAL_DMA_IRQHandler+0x302>
 8010270:	e20e      	b.n	8010690 <HAL_DMA_IRQHandler+0x720>
 8010272:	49b3      	ldr	r1, [pc, #716]	; (8010540 <HAL_DMA_IRQHandler+0x5d0>)
 8010274:	428b      	cmp	r3, r1
 8010276:	d100      	bne.n	801027a <HAL_DMA_IRQHandler+0x30a>
 8010278:	e237      	b.n	80106ea <HAL_DMA_IRQHandler+0x77a>
 801027a:	49b2      	ldr	r1, [pc, #712]	; (8010544 <HAL_DMA_IRQHandler+0x5d4>)
 801027c:	428b      	cmp	r3, r1
 801027e:	d100      	bne.n	8010282 <HAL_DMA_IRQHandler+0x312>
 8010280:	e271      	b.n	8010766 <HAL_DMA_IRQHandler+0x7f6>
 8010282:	49b1      	ldr	r1, [pc, #708]	; (8010548 <HAL_DMA_IRQHandler+0x5d8>)
 8010284:	428b      	cmp	r3, r1
 8010286:	d100      	bne.n	801028a <HAL_DMA_IRQHandler+0x31a>
 8010288:	e1fc      	b.n	8010684 <HAL_DMA_IRQHandler+0x714>
 801028a:	49b0      	ldr	r1, [pc, #704]	; (801054c <HAL_DMA_IRQHandler+0x5dc>)
 801028c:	428b      	cmp	r3, r1
 801028e:	d100      	bne.n	8010292 <HAL_DMA_IRQHandler+0x322>
 8010290:	e28a      	b.n	80107a8 <HAL_DMA_IRQHandler+0x838>
 8010292:	49af      	ldr	r1, [pc, #700]	; (8010550 <HAL_DMA_IRQHandler+0x5e0>)
 8010294:	428b      	cmp	r3, r1
 8010296:	d100      	bne.n	801029a <HAL_DMA_IRQHandler+0x32a>
 8010298:	e2a7      	b.n	80107ea <HAL_DMA_IRQHandler+0x87a>
 801029a:	4293      	cmp	r3, r2
 801029c:	d100      	bne.n	80102a0 <HAL_DMA_IRQHandler+0x330>
 801029e:	e2c4      	b.n	801082a <HAL_DMA_IRQHandler+0x8ba>
 80102a0:	4aac      	ldr	r2, [pc, #688]	; (8010554 <HAL_DMA_IRQHandler+0x5e4>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d100      	bne.n	80102a8 <HAL_DMA_IRQHandler+0x338>
 80102a6:	e1f3      	b.n	8010690 <HAL_DMA_IRQHandler+0x720>
 80102a8:	4aab      	ldr	r2, [pc, #684]	; (8010558 <HAL_DMA_IRQHandler+0x5e8>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d100      	bne.n	80102b0 <HAL_DMA_IRQHandler+0x340>
 80102ae:	e21c      	b.n	80106ea <HAL_DMA_IRQHandler+0x77a>
 80102b0:	4aaa      	ldr	r2, [pc, #680]	; (801055c <HAL_DMA_IRQHandler+0x5ec>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d100      	bne.n	80102b8 <HAL_DMA_IRQHandler+0x348>
 80102b6:	e256      	b.n	8010766 <HAL_DMA_IRQHandler+0x7f6>
 80102b8:	4aa9      	ldr	r2, [pc, #676]	; (8010560 <HAL_DMA_IRQHandler+0x5f0>)
 80102ba:	4694      	mov	ip, r2
 80102bc:	4463      	add	r3, ip
 80102be:	1e5a      	subs	r2, r3, #1
 80102c0:	4193      	sbcs	r3, r2
 80102c2:	22f0      	movs	r2, #240	; 0xf0
 80102c4:	425b      	negs	r3, r3
 80102c6:	0252      	lsls	r2, r2, #9
 80102c8:	4013      	ands	r3, r2
 80102ca:	2280      	movs	r2, #128	; 0x80
 80102cc:	0192      	lsls	r2, r2, #6
 80102ce:	4694      	mov	ip, r2
 80102d0:	4463      	add	r3, ip
 80102d2:	4aa4      	ldr	r2, [pc, #656]	; (8010564 <HAL_DMA_IRQHandler+0x5f4>)
 80102d4:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80102d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 80102d8:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80102da:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 80102dc:	2321      	movs	r3, #33	; 0x21
 80102de:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 80102e0:	2200      	movs	r2, #0
 80102e2:	3b01      	subs	r3, #1
 80102e4:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80102e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d001      	beq.n	80102f0 <HAL_DMA_IRQHandler+0x380>
        hdma->XferCpltCallback(hdma);
 80102ec:	0020      	movs	r0, r4
 80102ee:	4798      	blx	r3
}  
 80102f0:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80102f2:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80102f4:	489c      	ldr	r0, [pc, #624]	; (8010568 <HAL_DMA_IRQHandler+0x5f8>)
 80102f6:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80102f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80102fa:	432a      	orrs	r2, r5
 80102fc:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80102fe:	2221      	movs	r2, #33	; 0x21
 8010300:	3503      	adds	r5, #3
 8010302:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010304:	2500      	movs	r5, #0
 8010306:	3a01      	subs	r2, #1
 8010308:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801030a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801030c:	2a00      	cmp	r2, #0
 801030e:	d000      	beq.n	8010312 <HAL_DMA_IRQHandler+0x3a2>
 8010310:	e09b      	b.n	801044a <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010312:	6800      	ldr	r0, [r0, #0]
 8010314:	2204      	movs	r2, #4
 8010316:	4210      	tst	r0, r2
 8010318:	d050      	beq.n	80103bc <HAL_DMA_IRQHandler+0x44c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801031a:	2204      	movs	r2, #4
 801031c:	6818      	ldr	r0, [r3, #0]
 801031e:	4202      	tst	r2, r0
 8010320:	d048      	beq.n	80103b4 <HAL_DMA_IRQHandler+0x444>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010322:	6818      	ldr	r0, [r3, #0]
 8010324:	0680      	lsls	r0, r0, #26
 8010326:	d402      	bmi.n	801032e <HAL_DMA_IRQHandler+0x3be>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010328:	6818      	ldr	r0, [r3, #0]
 801032a:	4390      	bics	r0, r2
 801032c:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801032e:	4a82      	ldr	r2, [pc, #520]	; (8010538 <HAL_DMA_IRQHandler+0x5c8>)
 8010330:	4291      	cmp	r1, r2
 8010332:	d800      	bhi.n	8010336 <HAL_DMA_IRQHandler+0x3c6>
 8010334:	e11e      	b.n	8010574 <HAL_DMA_IRQHandler+0x604>
 8010336:	4981      	ldr	r1, [pc, #516]	; (801053c <HAL_DMA_IRQHandler+0x5cc>)
 8010338:	428b      	cmp	r3, r1
 801033a:	d100      	bne.n	801033e <HAL_DMA_IRQHandler+0x3ce>
 801033c:	e1ac      	b.n	8010698 <HAL_DMA_IRQHandler+0x728>
 801033e:	4980      	ldr	r1, [pc, #512]	; (8010540 <HAL_DMA_IRQHandler+0x5d0>)
 8010340:	428b      	cmp	r3, r1
 8010342:	d100      	bne.n	8010346 <HAL_DMA_IRQHandler+0x3d6>
 8010344:	e1d5      	b.n	80106f2 <HAL_DMA_IRQHandler+0x782>
 8010346:	497f      	ldr	r1, [pc, #508]	; (8010544 <HAL_DMA_IRQHandler+0x5d4>)
 8010348:	428b      	cmp	r3, r1
 801034a:	d100      	bne.n	801034e <HAL_DMA_IRQHandler+0x3de>
 801034c:	e188      	b.n	8010660 <HAL_DMA_IRQHandler+0x6f0>
 801034e:	497e      	ldr	r1, [pc, #504]	; (8010548 <HAL_DMA_IRQHandler+0x5d8>)
 8010350:	428b      	cmp	r3, r1
 8010352:	d100      	bne.n	8010356 <HAL_DMA_IRQHandler+0x3e6>
 8010354:	e20a      	b.n	801076c <HAL_DMA_IRQHandler+0x7fc>
 8010356:	497d      	ldr	r1, [pc, #500]	; (801054c <HAL_DMA_IRQHandler+0x5dc>)
 8010358:	428b      	cmp	r3, r1
 801035a:	d100      	bne.n	801035e <HAL_DMA_IRQHandler+0x3ee>
 801035c:	e22d      	b.n	80107ba <HAL_DMA_IRQHandler+0x84a>
 801035e:	497c      	ldr	r1, [pc, #496]	; (8010550 <HAL_DMA_IRQHandler+0x5e0>)
 8010360:	428b      	cmp	r3, r1
 8010362:	d100      	bne.n	8010366 <HAL_DMA_IRQHandler+0x3f6>
 8010364:	e247      	b.n	80107f6 <HAL_DMA_IRQHandler+0x886>
 8010366:	4293      	cmp	r3, r2
 8010368:	d100      	bne.n	801036c <HAL_DMA_IRQHandler+0x3fc>
 801036a:	e264      	b.n	8010836 <HAL_DMA_IRQHandler+0x8c6>
 801036c:	4a79      	ldr	r2, [pc, #484]	; (8010554 <HAL_DMA_IRQHandler+0x5e4>)
 801036e:	4293      	cmp	r3, r2
 8010370:	d100      	bne.n	8010374 <HAL_DMA_IRQHandler+0x404>
 8010372:	e191      	b.n	8010698 <HAL_DMA_IRQHandler+0x728>
 8010374:	4a78      	ldr	r2, [pc, #480]	; (8010558 <HAL_DMA_IRQHandler+0x5e8>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d100      	bne.n	801037c <HAL_DMA_IRQHandler+0x40c>
 801037a:	e1ba      	b.n	80106f2 <HAL_DMA_IRQHandler+0x782>
 801037c:	4a77      	ldr	r2, [pc, #476]	; (801055c <HAL_DMA_IRQHandler+0x5ec>)
 801037e:	4293      	cmp	r3, r2
 8010380:	d100      	bne.n	8010384 <HAL_DMA_IRQHandler+0x414>
 8010382:	e16d      	b.n	8010660 <HAL_DMA_IRQHandler+0x6f0>
 8010384:	4a76      	ldr	r2, [pc, #472]	; (8010560 <HAL_DMA_IRQHandler+0x5f0>)
 8010386:	189a      	adds	r2, r3, r2
 8010388:	1e51      	subs	r1, r2, #1
 801038a:	418a      	sbcs	r2, r1
 801038c:	21f0      	movs	r1, #240	; 0xf0
 801038e:	4252      	negs	r2, r2
 8010390:	0289      	lsls	r1, r1, #10
 8010392:	400a      	ands	r2, r1
 8010394:	2180      	movs	r1, #128	; 0x80
 8010396:	01c9      	lsls	r1, r1, #7
 8010398:	468c      	mov	ip, r1
 801039a:	4462      	add	r2, ip
 801039c:	4971      	ldr	r1, [pc, #452]	; (8010564 <HAL_DMA_IRQHandler+0x5f4>)
 801039e:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80103a0:	2221      	movs	r2, #33	; 0x21
 80103a2:	2111      	movs	r1, #17
 80103a4:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80103a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80103a8:	2a00      	cmp	r2, #0
 80103aa:	d100      	bne.n	80103ae <HAL_DMA_IRQHandler+0x43e>
 80103ac:	e6e3      	b.n	8010176 <HAL_DMA_IRQHandler+0x206>
        hdma->XferHalfCpltCallback(hdma);
 80103ae:	0020      	movs	r0, r4
 80103b0:	4790      	blx	r2
 80103b2:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80103b4:	4a60      	ldr	r2, [pc, #384]	; (8010538 <HAL_DMA_IRQHandler+0x5c8>)
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d900      	bls.n	80103bc <HAL_DMA_IRQHandler+0x44c>
 80103ba:	e6dc      	b.n	8010176 <HAL_DMA_IRQHandler+0x206>
 80103bc:	4a6a      	ldr	r2, [pc, #424]	; (8010568 <HAL_DMA_IRQHandler+0x5f8>)
 80103be:	6810      	ldr	r0, [r2, #0]
 80103c0:	4a5e      	ldr	r2, [pc, #376]	; (801053c <HAL_DMA_IRQHandler+0x5cc>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d000      	beq.n	80103c8 <HAL_DMA_IRQHandler+0x458>
 80103c6:	e6dc      	b.n	8010182 <HAL_DMA_IRQHandler+0x212>
 80103c8:	2202      	movs	r2, #2
 80103ca:	e73a      	b.n	8010242 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80103cc:	42ab      	cmp	r3, r5
 80103ce:	d090      	beq.n	80102f2 <HAL_DMA_IRQHandler+0x382>
 80103d0:	4a5b      	ldr	r2, [pc, #364]	; (8010540 <HAL_DMA_IRQHandler+0x5d0>)
 80103d2:	4293      	cmp	r3, r2
 80103d4:	d100      	bne.n	80103d8 <HAL_DMA_IRQHandler+0x468>
 80103d6:	e1a1      	b.n	801071c <HAL_DMA_IRQHandler+0x7ac>
 80103d8:	4a5a      	ldr	r2, [pc, #360]	; (8010544 <HAL_DMA_IRQHandler+0x5d4>)
 80103da:	4293      	cmp	r3, r2
 80103dc:	d100      	bne.n	80103e0 <HAL_DMA_IRQHandler+0x470>
 80103de:	e13c      	b.n	801065a <HAL_DMA_IRQHandler+0x6ea>
 80103e0:	4a59      	ldr	r2, [pc, #356]	; (8010548 <HAL_DMA_IRQHandler+0x5d8>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d100      	bne.n	80103e8 <HAL_DMA_IRQHandler+0x478>
 80103e6:	e1ca      	b.n	801077e <HAL_DMA_IRQHandler+0x80e>
 80103e8:	4a58      	ldr	r2, [pc, #352]	; (801054c <HAL_DMA_IRQHandler+0x5dc>)
 80103ea:	4293      	cmp	r3, r2
 80103ec:	d100      	bne.n	80103f0 <HAL_DMA_IRQHandler+0x480>
 80103ee:	e1de      	b.n	80107ae <HAL_DMA_IRQHandler+0x83e>
 80103f0:	4a57      	ldr	r2, [pc, #348]	; (8010550 <HAL_DMA_IRQHandler+0x5e0>)
 80103f2:	4293      	cmp	r3, r2
 80103f4:	d100      	bne.n	80103f8 <HAL_DMA_IRQHandler+0x488>
 80103f6:	e201      	b.n	80107fc <HAL_DMA_IRQHandler+0x88c>
 80103f8:	4283      	cmp	r3, r0
 80103fa:	d100      	bne.n	80103fe <HAL_DMA_IRQHandler+0x48e>
 80103fc:	e21e      	b.n	801083c <HAL_DMA_IRQHandler+0x8cc>
 80103fe:	4a55      	ldr	r2, [pc, #340]	; (8010554 <HAL_DMA_IRQHandler+0x5e4>)
 8010400:	4293      	cmp	r3, r2
 8010402:	d100      	bne.n	8010406 <HAL_DMA_IRQHandler+0x496>
 8010404:	e22d      	b.n	8010862 <HAL_DMA_IRQHandler+0x8f2>
 8010406:	4a54      	ldr	r2, [pc, #336]	; (8010558 <HAL_DMA_IRQHandler+0x5e8>)
 8010408:	4293      	cmp	r3, r2
 801040a:	d100      	bne.n	801040e <HAL_DMA_IRQHandler+0x49e>
 801040c:	e22d      	b.n	801086a <HAL_DMA_IRQHandler+0x8fa>
 801040e:	4a53      	ldr	r2, [pc, #332]	; (801055c <HAL_DMA_IRQHandler+0x5ec>)
 8010410:	4293      	cmp	r3, r2
 8010412:	d100      	bne.n	8010416 <HAL_DMA_IRQHandler+0x4a6>
 8010414:	e121      	b.n	801065a <HAL_DMA_IRQHandler+0x6ea>
 8010416:	4a52      	ldr	r2, [pc, #328]	; (8010560 <HAL_DMA_IRQHandler+0x5f0>)
 8010418:	189a      	adds	r2, r3, r2
 801041a:	4250      	negs	r0, r2
 801041c:	4142      	adcs	r2, r0
 801041e:	4853      	ldr	r0, [pc, #332]	; (801056c <HAL_DMA_IRQHandler+0x5fc>)
 8010420:	4252      	negs	r2, r2
 8010422:	4002      	ands	r2, r0
 8010424:	2080      	movs	r0, #128	; 0x80
 8010426:	0300      	lsls	r0, r0, #12
 8010428:	4684      	mov	ip, r0
 801042a:	4462      	add	r2, ip
 801042c:	484e      	ldr	r0, [pc, #312]	; (8010568 <HAL_DMA_IRQHandler+0x5f8>)
 801042e:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010430:	2001      	movs	r0, #1
 8010432:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010434:	4302      	orrs	r2, r0
 8010436:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010438:	2221      	movs	r2, #33	; 0x21
 801043a:	3003      	adds	r0, #3
 801043c:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801043e:	2000      	movs	r0, #0
 8010440:	3a01      	subs	r2, #1
 8010442:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010444:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010446:	2a00      	cmp	r2, #0
 8010448:	d007      	beq.n	801045a <HAL_DMA_IRQHandler+0x4ea>
        hdma->XferErrorCallback(hdma);
 801044a:	0020      	movs	r0, r4
 801044c:	4790      	blx	r2
 801044e:	6823      	ldr	r3, [r4, #0]
 8010450:	0019      	movs	r1, r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010452:	4a39      	ldr	r2, [pc, #228]	; (8010538 <HAL_DMA_IRQHandler+0x5c8>)
 8010454:	4293      	cmp	r3, r2
 8010456:	d900      	bls.n	801045a <HAL_DMA_IRQHandler+0x4ea>
 8010458:	e64f      	b.n	80100fa <HAL_DMA_IRQHandler+0x18a>
 801045a:	4a43      	ldr	r2, [pc, #268]	; (8010568 <HAL_DMA_IRQHandler+0x5f8>)
 801045c:	6810      	ldr	r0, [r2, #0]
 801045e:	4a37      	ldr	r2, [pc, #220]	; (801053c <HAL_DMA_IRQHandler+0x5cc>)
 8010460:	4293      	cmp	r3, r2
 8010462:	d100      	bne.n	8010466 <HAL_DMA_IRQHandler+0x4f6>
 8010464:	e756      	b.n	8010314 <HAL_DMA_IRQHandler+0x3a4>
 8010466:	4a36      	ldr	r2, [pc, #216]	; (8010540 <HAL_DMA_IRQHandler+0x5d0>)
 8010468:	4293      	cmp	r3, r2
 801046a:	d100      	bne.n	801046e <HAL_DMA_IRQHandler+0x4fe>
 801046c:	e0c4      	b.n	80105f8 <HAL_DMA_IRQHandler+0x688>
 801046e:	4a35      	ldr	r2, [pc, #212]	; (8010544 <HAL_DMA_IRQHandler+0x5d4>)
 8010470:	4293      	cmp	r3, r2
 8010472:	d100      	bne.n	8010476 <HAL_DMA_IRQHandler+0x506>
 8010474:	e0cb      	b.n	801060e <HAL_DMA_IRQHandler+0x69e>
 8010476:	4a34      	ldr	r2, [pc, #208]	; (8010548 <HAL_DMA_IRQHandler+0x5d8>)
 8010478:	4293      	cmp	r3, r2
 801047a:	d100      	bne.n	801047e <HAL_DMA_IRQHandler+0x50e>
 801047c:	e0d2      	b.n	8010624 <HAL_DMA_IRQHandler+0x6b4>
 801047e:	4a33      	ldr	r2, [pc, #204]	; (801054c <HAL_DMA_IRQHandler+0x5dc>)
 8010480:	4293      	cmp	r3, r2
 8010482:	d100      	bne.n	8010486 <HAL_DMA_IRQHandler+0x516>
 8010484:	e5e4      	b.n	8010050 <HAL_DMA_IRQHandler+0xe0>
 8010486:	4a32      	ldr	r2, [pc, #200]	; (8010550 <HAL_DMA_IRQHandler+0x5e0>)
 8010488:	4293      	cmp	r3, r2
 801048a:	d100      	bne.n	801048e <HAL_DMA_IRQHandler+0x51e>
 801048c:	e15e      	b.n	801074c <HAL_DMA_IRQHandler+0x7dc>
 801048e:	4a2a      	ldr	r2, [pc, #168]	; (8010538 <HAL_DMA_IRQHandler+0x5c8>)
 8010490:	4293      	cmp	r3, r2
 8010492:	d100      	bne.n	8010496 <HAL_DMA_IRQHandler+0x526>
 8010494:	e0ec      	b.n	8010670 <HAL_DMA_IRQHandler+0x700>
 8010496:	4a2f      	ldr	r2, [pc, #188]	; (8010554 <HAL_DMA_IRQHandler+0x5e4>)
 8010498:	4293      	cmp	r3, r2
 801049a:	d100      	bne.n	801049e <HAL_DMA_IRQHandler+0x52e>
 801049c:	e73a      	b.n	8010314 <HAL_DMA_IRQHandler+0x3a4>
 801049e:	4a2e      	ldr	r2, [pc, #184]	; (8010558 <HAL_DMA_IRQHandler+0x5e8>)
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d100      	bne.n	80104a6 <HAL_DMA_IRQHandler+0x536>
 80104a4:	e0a8      	b.n	80105f8 <HAL_DMA_IRQHandler+0x688>
 80104a6:	4a2d      	ldr	r2, [pc, #180]	; (801055c <HAL_DMA_IRQHandler+0x5ec>)
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d100      	bne.n	80104ae <HAL_DMA_IRQHandler+0x53e>
 80104ac:	e0af      	b.n	801060e <HAL_DMA_IRQHandler+0x69e>
 80104ae:	4a2c      	ldr	r2, [pc, #176]	; (8010560 <HAL_DMA_IRQHandler+0x5f0>)
 80104b0:	189a      	adds	r2, r3, r2
 80104b2:	4255      	negs	r5, r2
 80104b4:	416a      	adcs	r2, r5
 80104b6:	4d2e      	ldr	r5, [pc, #184]	; (8010570 <HAL_DMA_IRQHandler+0x600>)
 80104b8:	4252      	negs	r2, r2
 80104ba:	402a      	ands	r2, r5
 80104bc:	2580      	movs	r5, #128	; 0x80
 80104be:	02ed      	lsls	r5, r5, #11
 80104c0:	46ac      	mov	ip, r5
 80104c2:	4462      	add	r2, ip
 80104c4:	e727      	b.n	8010316 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80104c6:	2280      	movs	r2, #128	; 0x80
 80104c8:	0092      	lsls	r2, r2, #2
 80104ca:	e6ba      	b.n	8010242 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80104cc:	428b      	cmp	r3, r1
 80104ce:	d100      	bne.n	80104d2 <HAL_DMA_IRQHandler+0x562>
 80104d0:	e0e0      	b.n	8010694 <HAL_DMA_IRQHandler+0x724>
 80104d2:	491b      	ldr	r1, [pc, #108]	; (8010540 <HAL_DMA_IRQHandler+0x5d0>)
 80104d4:	428b      	cmp	r3, r1
 80104d6:	d100      	bne.n	80104da <HAL_DMA_IRQHandler+0x56a>
 80104d8:	e105      	b.n	80106e6 <HAL_DMA_IRQHandler+0x776>
 80104da:	491a      	ldr	r1, [pc, #104]	; (8010544 <HAL_DMA_IRQHandler+0x5d4>)
 80104dc:	428b      	cmp	r3, r1
 80104de:	d100      	bne.n	80104e2 <HAL_DMA_IRQHandler+0x572>
 80104e0:	e13e      	b.n	8010760 <HAL_DMA_IRQHandler+0x7f0>
 80104e2:	4919      	ldr	r1, [pc, #100]	; (8010548 <HAL_DMA_IRQHandler+0x5d8>)
 80104e4:	428b      	cmp	r3, r1
 80104e6:	d100      	bne.n	80104ea <HAL_DMA_IRQHandler+0x57a>
 80104e8:	e0cf      	b.n	801068a <HAL_DMA_IRQHandler+0x71a>
 80104ea:	4918      	ldr	r1, [pc, #96]	; (801054c <HAL_DMA_IRQHandler+0x5dc>)
 80104ec:	428b      	cmp	r3, r1
 80104ee:	d100      	bne.n	80104f2 <HAL_DMA_IRQHandler+0x582>
 80104f0:	e157      	b.n	80107a2 <HAL_DMA_IRQHandler+0x832>
 80104f2:	4917      	ldr	r1, [pc, #92]	; (8010550 <HAL_DMA_IRQHandler+0x5e0>)
 80104f4:	428b      	cmp	r3, r1
 80104f6:	d100      	bne.n	80104fa <HAL_DMA_IRQHandler+0x58a>
 80104f8:	e174      	b.n	80107e4 <HAL_DMA_IRQHandler+0x874>
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d100      	bne.n	8010500 <HAL_DMA_IRQHandler+0x590>
 80104fe:	e197      	b.n	8010830 <HAL_DMA_IRQHandler+0x8c0>
 8010500:	4a14      	ldr	r2, [pc, #80]	; (8010554 <HAL_DMA_IRQHandler+0x5e4>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d100      	bne.n	8010508 <HAL_DMA_IRQHandler+0x598>
 8010506:	e0c5      	b.n	8010694 <HAL_DMA_IRQHandler+0x724>
 8010508:	4a13      	ldr	r2, [pc, #76]	; (8010558 <HAL_DMA_IRQHandler+0x5e8>)
 801050a:	4293      	cmp	r3, r2
 801050c:	d100      	bne.n	8010510 <HAL_DMA_IRQHandler+0x5a0>
 801050e:	e0ea      	b.n	80106e6 <HAL_DMA_IRQHandler+0x776>
 8010510:	4a12      	ldr	r2, [pc, #72]	; (801055c <HAL_DMA_IRQHandler+0x5ec>)
 8010512:	4293      	cmp	r3, r2
 8010514:	d100      	bne.n	8010518 <HAL_DMA_IRQHandler+0x5a8>
 8010516:	e123      	b.n	8010760 <HAL_DMA_IRQHandler+0x7f0>
 8010518:	4a11      	ldr	r2, [pc, #68]	; (8010560 <HAL_DMA_IRQHandler+0x5f0>)
 801051a:	4694      	mov	ip, r2
 801051c:	4463      	add	r3, ip
 801051e:	1e5a      	subs	r2, r3, #1
 8010520:	4193      	sbcs	r3, r2
 8010522:	22f0      	movs	r2, #240	; 0xf0
 8010524:	425b      	negs	r3, r3
 8010526:	0252      	lsls	r2, r2, #9
 8010528:	4013      	ands	r3, r2
 801052a:	2280      	movs	r2, #128	; 0x80
 801052c:	0192      	lsls	r2, r2, #6
 801052e:	4694      	mov	ip, r2
 8010530:	4463      	add	r3, ip
 8010532:	4a0d      	ldr	r2, [pc, #52]	; (8010568 <HAL_DMA_IRQHandler+0x5f8>)
 8010534:	6053      	str	r3, [r2, #4]
 8010536:	e6ce      	b.n	80102d6 <HAL_DMA_IRQHandler+0x366>
 8010538:	40020080 	.word	0x40020080
 801053c:	40020008 	.word	0x40020008
 8010540:	4002001c 	.word	0x4002001c
 8010544:	40020030 	.word	0x40020030
 8010548:	40020044 	.word	0x40020044
 801054c:	40020058 	.word	0x40020058
 8010550:	4002006c 	.word	0x4002006c
 8010554:	40020408 	.word	0x40020408
 8010558:	4002041c 	.word	0x4002041c
 801055c:	40020430 	.word	0x40020430
 8010560:	bffdfbbc 	.word	0xbffdfbbc
 8010564:	40020400 	.word	0x40020400
 8010568:	40020000 	.word	0x40020000
 801056c:	fff88000 	.word	0xfff88000
 8010570:	fffc4000 	.word	0xfffc4000
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010574:	49c2      	ldr	r1, [pc, #776]	; (8010880 <HAL_DMA_IRQHandler+0x910>)
 8010576:	428b      	cmp	r3, r1
 8010578:	d100      	bne.n	801057c <HAL_DMA_IRQHandler+0x60c>
 801057a:	e08f      	b.n	801069c <HAL_DMA_IRQHandler+0x72c>
 801057c:	49c1      	ldr	r1, [pc, #772]	; (8010884 <HAL_DMA_IRQHandler+0x914>)
 801057e:	428b      	cmp	r3, r1
 8010580:	d100      	bne.n	8010584 <HAL_DMA_IRQHandler+0x614>
 8010582:	e0b4      	b.n	80106ee <HAL_DMA_IRQHandler+0x77e>
 8010584:	49c0      	ldr	r1, [pc, #768]	; (8010888 <HAL_DMA_IRQHandler+0x918>)
 8010586:	428b      	cmp	r3, r1
 8010588:	d064      	beq.n	8010654 <HAL_DMA_IRQHandler+0x6e4>
 801058a:	49c0      	ldr	r1, [pc, #768]	; (801088c <HAL_DMA_IRQHandler+0x91c>)
 801058c:	428b      	cmp	r3, r1
 801058e:	d100      	bne.n	8010592 <HAL_DMA_IRQHandler+0x622>
 8010590:	e0ef      	b.n	8010772 <HAL_DMA_IRQHandler+0x802>
 8010592:	49bf      	ldr	r1, [pc, #764]	; (8010890 <HAL_DMA_IRQHandler+0x920>)
 8010594:	428b      	cmp	r3, r1
 8010596:	d100      	bne.n	801059a <HAL_DMA_IRQHandler+0x62a>
 8010598:	e112      	b.n	80107c0 <HAL_DMA_IRQHandler+0x850>
 801059a:	49be      	ldr	r1, [pc, #760]	; (8010894 <HAL_DMA_IRQHandler+0x924>)
 801059c:	428b      	cmp	r3, r1
 801059e:	d100      	bne.n	80105a2 <HAL_DMA_IRQHandler+0x632>
 80105a0:	e12f      	b.n	8010802 <HAL_DMA_IRQHandler+0x892>
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d100      	bne.n	80105a8 <HAL_DMA_IRQHandler+0x638>
 80105a6:	e14c      	b.n	8010842 <HAL_DMA_IRQHandler+0x8d2>
 80105a8:	4abb      	ldr	r2, [pc, #748]	; (8010898 <HAL_DMA_IRQHandler+0x928>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d076      	beq.n	801069c <HAL_DMA_IRQHandler+0x72c>
 80105ae:	4abb      	ldr	r2, [pc, #748]	; (801089c <HAL_DMA_IRQHandler+0x92c>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d100      	bne.n	80105b6 <HAL_DMA_IRQHandler+0x646>
 80105b4:	e09b      	b.n	80106ee <HAL_DMA_IRQHandler+0x77e>
 80105b6:	4aba      	ldr	r2, [pc, #744]	; (80108a0 <HAL_DMA_IRQHandler+0x930>)
 80105b8:	4293      	cmp	r3, r2
 80105ba:	d04b      	beq.n	8010654 <HAL_DMA_IRQHandler+0x6e4>
 80105bc:	4ab9      	ldr	r2, [pc, #740]	; (80108a4 <HAL_DMA_IRQHandler+0x934>)
 80105be:	189a      	adds	r2, r3, r2
 80105c0:	1e51      	subs	r1, r2, #1
 80105c2:	418a      	sbcs	r2, r1
 80105c4:	21f0      	movs	r1, #240	; 0xf0
 80105c6:	4252      	negs	r2, r2
 80105c8:	0289      	lsls	r1, r1, #10
 80105ca:	400a      	ands	r2, r1
 80105cc:	2180      	movs	r1, #128	; 0x80
 80105ce:	01c9      	lsls	r1, r1, #7
 80105d0:	468c      	mov	ip, r1
 80105d2:	4462      	add	r2, ip
 80105d4:	49b4      	ldr	r1, [pc, #720]	; (80108a8 <HAL_DMA_IRQHandler+0x938>)
 80105d6:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80105d8:	2221      	movs	r2, #33	; 0x21
 80105da:	2111      	movs	r1, #17
 80105dc:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80105de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80105e0:	2a00      	cmp	r2, #0
 80105e2:	d100      	bne.n	80105e6 <HAL_DMA_IRQHandler+0x676>
 80105e4:	e6ea      	b.n	80103bc <HAL_DMA_IRQHandler+0x44c>
        hdma->XferHalfCpltCallback(hdma);
 80105e6:	0020      	movs	r0, r4
 80105e8:	4790      	blx	r2
 80105ea:	6823      	ldr	r3, [r4, #0]
 80105ec:	e6e2      	b.n	80103b4 <HAL_DMA_IRQHandler+0x444>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80105ee:	0632      	lsls	r2, r6, #24
 80105f0:	d500      	bpl.n	80105f4 <HAL_DMA_IRQHandler+0x684>
 80105f2:	e534      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80105f4:	0019      	movs	r1, r3
 80105f6:	6800      	ldr	r0, [r0, #0]
 80105f8:	2240      	movs	r2, #64	; 0x40
 80105fa:	e68c      	b.n	8010316 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80105fc:	0632      	lsls	r2, r6, #24
 80105fe:	d500      	bpl.n	8010602 <HAL_DMA_IRQHandler+0x692>
 8010600:	e52d      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010602:	6800      	ldr	r0, [r0, #0]
 8010604:	2240      	movs	r2, #64	; 0x40
 8010606:	e5b3      	b.n	8010170 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010608:	2280      	movs	r2, #128	; 0x80
 801060a:	0192      	lsls	r2, r2, #6
 801060c:	e619      	b.n	8010242 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801060e:	2280      	movs	r2, #128	; 0x80
 8010610:	00d2      	lsls	r2, r2, #3
 8010612:	e680      	b.n	8010316 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010614:	2280      	movs	r2, #128	; 0x80
 8010616:	0292      	lsls	r2, r2, #10
 8010618:	e613      	b.n	8010242 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801061a:	0432      	lsls	r2, r6, #16
 801061c:	d500      	bpl.n	8010620 <HAL_DMA_IRQHandler+0x6b0>
 801061e:	e51e      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010620:	4aa1      	ldr	r2, [pc, #644]	; (80108a8 <HAL_DMA_IRQHandler+0x938>)
 8010622:	6810      	ldr	r0, [r2, #0]
 8010624:	2280      	movs	r2, #128	; 0x80
 8010626:	01d2      	lsls	r2, r2, #7
 8010628:	e675      	b.n	8010316 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801062a:	0432      	lsls	r2, r6, #16
 801062c:	d500      	bpl.n	8010630 <HAL_DMA_IRQHandler+0x6c0>
 801062e:	e516      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010630:	2280      	movs	r2, #128	; 0x80
 8010632:	6800      	ldr	r0, [r0, #0]
 8010634:	0019      	movs	r1, r3
 8010636:	01d2      	lsls	r2, r2, #7
 8010638:	e66d      	b.n	8010316 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801063a:	0432      	lsls	r2, r6, #16
 801063c:	d500      	bpl.n	8010640 <HAL_DMA_IRQHandler+0x6d0>
 801063e:	e50e      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010640:	2280      	movs	r2, #128	; 0x80
 8010642:	6800      	ldr	r0, [r0, #0]
 8010644:	01d2      	lsls	r2, r2, #7
 8010646:	e593      	b.n	8010170 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010648:	2280      	movs	r2, #128	; 0x80
 801064a:	0392      	lsls	r2, r2, #14
 801064c:	e5f9      	b.n	8010242 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801064e:	2280      	movs	r2, #128	; 0x80
 8010650:	0112      	lsls	r2, r2, #4
 8010652:	e542      	b.n	80100da <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010654:	2280      	movs	r2, #128	; 0x80
 8010656:	00d2      	lsls	r2, r2, #3
 8010658:	e7bc      	b.n	80105d4 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801065a:	2280      	movs	r2, #128	; 0x80
 801065c:	0112      	lsls	r2, r2, #4
 801065e:	e6e5      	b.n	801042c <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010660:	2280      	movs	r2, #128	; 0x80
 8010662:	00d2      	lsls	r2, r2, #3
 8010664:	e69a      	b.n	801039c <HAL_DMA_IRQHandler+0x42c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010666:	0132      	lsls	r2, r6, #4
 8010668:	d500      	bpl.n	801066c <HAL_DMA_IRQHandler+0x6fc>
 801066a:	e4f8      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801066c:	0019      	movs	r1, r3
 801066e:	6800      	ldr	r0, [r0, #0]
 8010670:	2280      	movs	r2, #128	; 0x80
 8010672:	04d2      	lsls	r2, r2, #19
 8010674:	e64f      	b.n	8010316 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010676:	0132      	lsls	r2, r6, #4
 8010678:	d500      	bpl.n	801067c <HAL_DMA_IRQHandler+0x70c>
 801067a:	e4f0      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801067c:	6800      	ldr	r0, [r0, #0]
 801067e:	2280      	movs	r2, #128	; 0x80
 8010680:	04d2      	lsls	r2, r2, #19
 8010682:	e575      	b.n	8010170 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010684:	2380      	movs	r3, #128	; 0x80
 8010686:	019b      	lsls	r3, r3, #6
 8010688:	e623      	b.n	80102d2 <HAL_DMA_IRQHandler+0x362>
 801068a:	2380      	movs	r3, #128	; 0x80
 801068c:	019b      	lsls	r3, r3, #6
 801068e:	e750      	b.n	8010532 <HAL_DMA_IRQHandler+0x5c2>
 8010690:	2302      	movs	r3, #2
 8010692:	e61e      	b.n	80102d2 <HAL_DMA_IRQHandler+0x362>
 8010694:	2302      	movs	r3, #2
 8010696:	e74c      	b.n	8010532 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010698:	2204      	movs	r2, #4
 801069a:	e67f      	b.n	801039c <HAL_DMA_IRQHandler+0x42c>
 801069c:	2204      	movs	r2, #4
 801069e:	e799      	b.n	80105d4 <HAL_DMA_IRQHandler+0x664>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80106a0:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80106a2:	4882      	ldr	r0, [pc, #520]	; (80108ac <HAL_DMA_IRQHandler+0x93c>)
 80106a4:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80106a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80106a8:	432a      	orrs	r2, r5
 80106aa:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80106ac:	2221      	movs	r2, #33	; 0x21
 80106ae:	3503      	adds	r5, #3
 80106b0:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80106b2:	2500      	movs	r5, #0
 80106b4:	3a01      	subs	r2, #1
 80106b6:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80106b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80106ba:	2a00      	cmp	r2, #0
 80106bc:	d000      	beq.n	80106c0 <HAL_DMA_IRQHandler+0x750>
 80106be:	e6c4      	b.n	801044a <HAL_DMA_IRQHandler+0x4da>
 80106c0:	e554      	b.n	801016c <HAL_DMA_IRQHandler+0x1fc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80106c2:	0332      	lsls	r2, r6, #12
 80106c4:	d500      	bpl.n	80106c8 <HAL_DMA_IRQHandler+0x758>
 80106c6:	e4ca      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80106c8:	2280      	movs	r2, #128	; 0x80
 80106ca:	6800      	ldr	r0, [r0, #0]
 80106cc:	02d2      	lsls	r2, r2, #11
 80106ce:	e54f      	b.n	8010170 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80106d0:	0332      	lsls	r2, r6, #12
 80106d2:	d500      	bpl.n	80106d6 <HAL_DMA_IRQHandler+0x766>
 80106d4:	e4c3      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80106d6:	2280      	movs	r2, #128	; 0x80
 80106d8:	6800      	ldr	r0, [r0, #0]
 80106da:	0019      	movs	r1, r3
 80106dc:	02d2      	lsls	r2, r2, #11
 80106de:	e61a      	b.n	8010316 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80106e0:	2280      	movs	r2, #128	; 0x80
 80106e2:	0492      	lsls	r2, r2, #18
 80106e4:	e5ad      	b.n	8010242 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80106e6:	2320      	movs	r3, #32
 80106e8:	e723      	b.n	8010532 <HAL_DMA_IRQHandler+0x5c2>
 80106ea:	2320      	movs	r3, #32
 80106ec:	e5f1      	b.n	80102d2 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80106ee:	2240      	movs	r2, #64	; 0x40
 80106f0:	e770      	b.n	80105d4 <HAL_DMA_IRQHandler+0x664>
 80106f2:	2240      	movs	r2, #64	; 0x40
 80106f4:	e652      	b.n	801039c <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80106f6:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80106f8:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80106fa:	486c      	ldr	r0, [pc, #432]	; (80108ac <HAL_DMA_IRQHandler+0x93c>)
 80106fc:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80106fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010700:	432a      	orrs	r2, r5
 8010702:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010704:	2221      	movs	r2, #33	; 0x21
 8010706:	3503      	adds	r5, #3
 8010708:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801070a:	2500      	movs	r5, #0
 801070c:	3a01      	subs	r2, #1
 801070e:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010710:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010712:	2a00      	cmp	r2, #0
 8010714:	d000      	beq.n	8010718 <HAL_DMA_IRQHandler+0x7a8>
 8010716:	e698      	b.n	801044a <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010718:	6800      	ldr	r0, [r0, #0]
 801071a:	e4f4      	b.n	8010106 <HAL_DMA_IRQHandler+0x196>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801071c:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801071e:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010720:	4861      	ldr	r0, [pc, #388]	; (80108a8 <HAL_DMA_IRQHandler+0x938>)
 8010722:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010724:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010726:	432a      	orrs	r2, r5
 8010728:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801072a:	2221      	movs	r2, #33	; 0x21
 801072c:	3503      	adds	r5, #3
 801072e:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010730:	2500      	movs	r5, #0
 8010732:	3a01      	subs	r2, #1
 8010734:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010736:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010738:	2a00      	cmp	r2, #0
 801073a:	d000      	beq.n	801073e <HAL_DMA_IRQHandler+0x7ce>
 801073c:	e685      	b.n	801044a <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801073e:	6800      	ldr	r0, [r0, #0]
 8010740:	e691      	b.n	8010466 <HAL_DMA_IRQHandler+0x4f6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010742:	0232      	lsls	r2, r6, #8
 8010744:	d500      	bpl.n	8010748 <HAL_DMA_IRQHandler+0x7d8>
 8010746:	e48a      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010748:	0019      	movs	r1, r3
 801074a:	6800      	ldr	r0, [r0, #0]
 801074c:	2280      	movs	r2, #128	; 0x80
 801074e:	03d2      	lsls	r2, r2, #15
 8010750:	e5e1      	b.n	8010316 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010752:	0232      	lsls	r2, r6, #8
 8010754:	d500      	bpl.n	8010758 <HAL_DMA_IRQHandler+0x7e8>
 8010756:	e482      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010758:	6800      	ldr	r0, [r0, #0]
 801075a:	2280      	movs	r2, #128	; 0x80
 801075c:	03d2      	lsls	r2, r2, #15
 801075e:	e507      	b.n	8010170 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010760:	2380      	movs	r3, #128	; 0x80
 8010762:	009b      	lsls	r3, r3, #2
 8010764:	e6e5      	b.n	8010532 <HAL_DMA_IRQHandler+0x5c2>
 8010766:	2380      	movs	r3, #128	; 0x80
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	e5b2      	b.n	80102d2 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801076c:	2280      	movs	r2, #128	; 0x80
 801076e:	01d2      	lsls	r2, r2, #7
 8010770:	e614      	b.n	801039c <HAL_DMA_IRQHandler+0x42c>
 8010772:	2280      	movs	r2, #128	; 0x80
 8010774:	01d2      	lsls	r2, r2, #7
 8010776:	e72d      	b.n	80105d4 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010778:	2280      	movs	r2, #128	; 0x80
 801077a:	0212      	lsls	r2, r2, #8
 801077c:	e4ad      	b.n	80100da <HAL_DMA_IRQHandler+0x16a>
 801077e:	2280      	movs	r2, #128	; 0x80
 8010780:	0212      	lsls	r2, r2, #8
 8010782:	e653      	b.n	801042c <HAL_DMA_IRQHandler+0x4bc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010784:	0732      	lsls	r2, r6, #28
 8010786:	d500      	bpl.n	801078a <HAL_DMA_IRQHandler+0x81a>
 8010788:	e469      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801078a:	4a47      	ldr	r2, [pc, #284]	; (80108a8 <HAL_DMA_IRQHandler+0x938>)
 801078c:	6810      	ldr	r0, [r2, #0]
 801078e:	2204      	movs	r2, #4
 8010790:	e5c1      	b.n	8010316 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010792:	0732      	lsls	r2, r6, #28
 8010794:	d500      	bpl.n	8010798 <HAL_DMA_IRQHandler+0x828>
 8010796:	e462      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010798:	4a44      	ldr	r2, [pc, #272]	; (80108ac <HAL_DMA_IRQHandler+0x93c>)
 801079a:	493f      	ldr	r1, [pc, #252]	; (8010898 <HAL_DMA_IRQHandler+0x928>)
 801079c:	6810      	ldr	r0, [r2, #0]
 801079e:	2204      	movs	r2, #4
 80107a0:	e4e6      	b.n	8010170 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80107a2:	2380      	movs	r3, #128	; 0x80
 80107a4:	029b      	lsls	r3, r3, #10
 80107a6:	e6c4      	b.n	8010532 <HAL_DMA_IRQHandler+0x5c2>
 80107a8:	2380      	movs	r3, #128	; 0x80
 80107aa:	029b      	lsls	r3, r3, #10
 80107ac:	e591      	b.n	80102d2 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80107ae:	2280      	movs	r2, #128	; 0x80
 80107b0:	0312      	lsls	r2, r2, #12
 80107b2:	e63b      	b.n	801042c <HAL_DMA_IRQHandler+0x4bc>
 80107b4:	2280      	movs	r2, #128	; 0x80
 80107b6:	0312      	lsls	r2, r2, #12
 80107b8:	e48f      	b.n	80100da <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80107ba:	2280      	movs	r2, #128	; 0x80
 80107bc:	02d2      	lsls	r2, r2, #11
 80107be:	e5ed      	b.n	801039c <HAL_DMA_IRQHandler+0x42c>
 80107c0:	2280      	movs	r2, #128	; 0x80
 80107c2:	02d2      	lsls	r2, r2, #11
 80107c4:	e706      	b.n	80105d4 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80107c6:	0632      	lsls	r2, r6, #24
 80107c8:	d500      	bpl.n	80107cc <HAL_DMA_IRQHandler+0x85c>
 80107ca:	e448      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107cc:	4a36      	ldr	r2, [pc, #216]	; (80108a8 <HAL_DMA_IRQHandler+0x938>)
 80107ce:	6810      	ldr	r0, [r2, #0]
 80107d0:	2240      	movs	r2, #64	; 0x40
 80107d2:	e5a0      	b.n	8010316 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80107d4:	0632      	lsls	r2, r6, #24
 80107d6:	d500      	bpl.n	80107da <HAL_DMA_IRQHandler+0x86a>
 80107d8:	e441      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107da:	4a34      	ldr	r2, [pc, #208]	; (80108ac <HAL_DMA_IRQHandler+0x93c>)
 80107dc:	492f      	ldr	r1, [pc, #188]	; (801089c <HAL_DMA_IRQHandler+0x92c>)
 80107de:	6810      	ldr	r0, [r2, #0]
 80107e0:	2240      	movs	r2, #64	; 0x40
 80107e2:	e4c5      	b.n	8010170 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80107e4:	2380      	movs	r3, #128	; 0x80
 80107e6:	039b      	lsls	r3, r3, #14
 80107e8:	e6a3      	b.n	8010532 <HAL_DMA_IRQHandler+0x5c2>
 80107ea:	2380      	movs	r3, #128	; 0x80
 80107ec:	039b      	lsls	r3, r3, #14
 80107ee:	e570      	b.n	80102d2 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80107f0:	2280      	movs	r2, #128	; 0x80
 80107f2:	0412      	lsls	r2, r2, #16
 80107f4:	e471      	b.n	80100da <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80107f6:	2280      	movs	r2, #128	; 0x80
 80107f8:	03d2      	lsls	r2, r2, #15
 80107fa:	e5cf      	b.n	801039c <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80107fc:	2280      	movs	r2, #128	; 0x80
 80107fe:	0412      	lsls	r2, r2, #16
 8010800:	e614      	b.n	801042c <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010802:	2280      	movs	r2, #128	; 0x80
 8010804:	03d2      	lsls	r2, r2, #15
 8010806:	e6e5      	b.n	80105d4 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010808:	0532      	lsls	r2, r6, #20
 801080a:	d500      	bpl.n	801080e <HAL_DMA_IRQHandler+0x89e>
 801080c:	e427      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801080e:	4a26      	ldr	r2, [pc, #152]	; (80108a8 <HAL_DMA_IRQHandler+0x938>)
 8010810:	6810      	ldr	r0, [r2, #0]
 8010812:	2280      	movs	r2, #128	; 0x80
 8010814:	00d2      	lsls	r2, r2, #3
 8010816:	e57e      	b.n	8010316 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010818:	0532      	lsls	r2, r6, #20
 801081a:	d500      	bpl.n	801081e <HAL_DMA_IRQHandler+0x8ae>
 801081c:	e41f      	b.n	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801081e:	4a23      	ldr	r2, [pc, #140]	; (80108ac <HAL_DMA_IRQHandler+0x93c>)
 8010820:	0019      	movs	r1, r3
 8010822:	6810      	ldr	r0, [r2, #0]
 8010824:	2280      	movs	r2, #128	; 0x80
 8010826:	00d2      	lsls	r2, r2, #3
 8010828:	e4a2      	b.n	8010170 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801082a:	2380      	movs	r3, #128	; 0x80
 801082c:	049b      	lsls	r3, r3, #18
 801082e:	e550      	b.n	80102d2 <HAL_DMA_IRQHandler+0x362>
 8010830:	2380      	movs	r3, #128	; 0x80
 8010832:	049b      	lsls	r3, r3, #18
 8010834:	e67d      	b.n	8010532 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010836:	2280      	movs	r2, #128	; 0x80
 8010838:	04d2      	lsls	r2, r2, #19
 801083a:	e5af      	b.n	801039c <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801083c:	2280      	movs	r2, #128	; 0x80
 801083e:	0512      	lsls	r2, r2, #20
 8010840:	e5f4      	b.n	801042c <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010842:	2280      	movs	r2, #128	; 0x80
 8010844:	04d2      	lsls	r2, r2, #19
 8010846:	e6c5      	b.n	80105d4 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010848:	2280      	movs	r2, #128	; 0x80
 801084a:	0512      	lsls	r2, r2, #20
 801084c:	e445      	b.n	80100da <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801084e:	0432      	lsls	r2, r6, #16
 8010850:	d501      	bpl.n	8010856 <HAL_DMA_IRQHandler+0x8e6>
 8010852:	f7ff fc04 	bl	801005e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010856:	0019      	movs	r1, r3
 8010858:	4a14      	ldr	r2, [pc, #80]	; (80108ac <HAL_DMA_IRQHandler+0x93c>)
 801085a:	6810      	ldr	r0, [r2, #0]
 801085c:	2280      	movs	r2, #128	; 0x80
 801085e:	01d2      	lsls	r2, r2, #7
 8010860:	e486      	b.n	8010170 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010862:	2208      	movs	r2, #8
 8010864:	e5e2      	b.n	801042c <HAL_DMA_IRQHandler+0x4bc>
 8010866:	2208      	movs	r2, #8
 8010868:	e437      	b.n	80100da <HAL_DMA_IRQHandler+0x16a>
 801086a:	2280      	movs	r2, #128	; 0x80
 801086c:	e5de      	b.n	801042c <HAL_DMA_IRQHandler+0x4bc>
 801086e:	2280      	movs	r2, #128	; 0x80
 8010870:	e433      	b.n	80100da <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010872:	6800      	ldr	r0, [r0, #0]
 8010874:	0019      	movs	r1, r3
 8010876:	2204      	movs	r2, #4
 8010878:	e54d      	b.n	8010316 <HAL_DMA_IRQHandler+0x3a6>
 801087a:	2280      	movs	r2, #128	; 0x80
 801087c:	00d2      	lsls	r2, r2, #3
 801087e:	e477      	b.n	8010170 <HAL_DMA_IRQHandler+0x200>
 8010880:	40020008 	.word	0x40020008
 8010884:	4002001c 	.word	0x4002001c
 8010888:	40020030 	.word	0x40020030
 801088c:	40020044 	.word	0x40020044
 8010890:	40020058 	.word	0x40020058
 8010894:	4002006c 	.word	0x4002006c
 8010898:	40020408 	.word	0x40020408
 801089c:	4002041c 	.word	0x4002041c
 80108a0:	40020430 	.word	0x40020430
 80108a4:	bffdfbbc 	.word	0xbffdfbbc
 80108a8:	40020000 	.word	0x40020000
 80108ac:	40020400 	.word	0x40020400

080108b0 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80108b0:	4b05      	ldr	r3, [pc, #20]	; (80108c8 <HAL_FLASH_Unlock+0x18>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
  }
  else
  {
    return HAL_ERROR;
 80108b2:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80108b4:	691a      	ldr	r2, [r3, #16]
 80108b6:	0612      	lsls	r2, r2, #24
 80108b8:	d504      	bpl.n	80108c4 <HAL_FLASH_Unlock+0x14>
  }

  return HAL_OK; 
 80108ba:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80108bc:	4a03      	ldr	r2, [pc, #12]	; (80108cc <HAL_FLASH_Unlock+0x1c>)
 80108be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80108c0:	4a03      	ldr	r2, [pc, #12]	; (80108d0 <HAL_FLASH_Unlock+0x20>)
 80108c2:	605a      	str	r2, [r3, #4]
}
 80108c4:	4770      	bx	lr
 80108c6:	46c0      	nop			; (mov r8, r8)
 80108c8:	40022000 	.word	0x40022000
 80108cc:	45670123 	.word	0x45670123
 80108d0:	cdef89ab 	.word	0xcdef89ab

080108d4 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80108d4:	2180      	movs	r1, #128	; 0x80
 80108d6:	4a03      	ldr	r2, [pc, #12]	; (80108e4 <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 80108d8:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80108da:	6913      	ldr	r3, [r2, #16]
 80108dc:	430b      	orrs	r3, r1
 80108de:	6113      	str	r3, [r2, #16]
}
 80108e0:	4770      	bx	lr
 80108e2:	46c0      	nop			; (mov r8, r8)
 80108e4:	40022000 	.word	0x40022000

080108e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80108e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ea:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80108ec:	f7fe fdfa 	bl	800f4e4 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80108f0:	4c1d      	ldr	r4, [pc, #116]	; (8010968 <FLASH_WaitForLastOperation+0x80>)
  uint32_t tickstart = HAL_GetTick();
 80108f2:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80108f4:	2601      	movs	r6, #1
 80108f6:	e001      	b.n	80108fc <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80108f8:	1c6b      	adds	r3, r5, #1
 80108fa:	d11d      	bne.n	8010938 <FLASH_WaitForLastOperation+0x50>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80108fc:	68e3      	ldr	r3, [r4, #12]
 80108fe:	421e      	tst	r6, r3
 8010900:	d1fa      	bne.n	80108f8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010902:	2320      	movs	r3, #32
 8010904:	68e2      	ldr	r2, [r4, #12]
 8010906:	4213      	tst	r3, r2
 8010908:	d000      	beq.n	801090c <FLASH_WaitForLastOperation+0x24>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801090a:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801090c:	4b16      	ldr	r3, [pc, #88]	; (8010968 <FLASH_WaitForLastOperation+0x80>)
 801090e:	68da      	ldr	r2, [r3, #12]
 8010910:	06d2      	lsls	r2, r2, #27
 8010912:	d51a      	bpl.n	801094a <FLASH_WaitForLastOperation+0x62>
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010914:	4b14      	ldr	r3, [pc, #80]	; (8010968 <FLASH_WaitForLastOperation+0x80>)
 8010916:	68db      	ldr	r3, [r3, #12]
 8010918:	06db      	lsls	r3, r3, #27
 801091a:	d504      	bpl.n	8010926 <FLASH_WaitForLastOperation+0x3e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801091c:	2102      	movs	r1, #2
 801091e:	4a13      	ldr	r2, [pc, #76]	; (801096c <FLASH_WaitForLastOperation+0x84>)
 8010920:	69d3      	ldr	r3, [r2, #28]
 8010922:	430b      	orrs	r3, r1
 8010924:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010926:	4b10      	ldr	r3, [pc, #64]	; (8010968 <FLASH_WaitForLastOperation+0x80>)
 8010928:	68db      	ldr	r3, [r3, #12]
 801092a:	075b      	lsls	r3, r3, #29
 801092c:	d416      	bmi.n	801095c <FLASH_WaitForLastOperation+0x74>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 801092e:	2214      	movs	r2, #20
    return HAL_ERROR;
 8010930:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010932:	4b0d      	ldr	r3, [pc, #52]	; (8010968 <FLASH_WaitForLastOperation+0x80>)
 8010934:	60da      	str	r2, [r3, #12]
}
 8010936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010938:	2d00      	cmp	r5, #0
 801093a:	d004      	beq.n	8010946 <FLASH_WaitForLastOperation+0x5e>
 801093c:	f7fe fdd2 	bl	800f4e4 <HAL_GetTick>
 8010940:	1bc0      	subs	r0, r0, r7
 8010942:	42a8      	cmp	r0, r5
 8010944:	d9da      	bls.n	80108fc <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 8010946:	2003      	movs	r0, #3
 8010948:	e7f5      	b.n	8010936 <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801094a:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 801094c:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801094e:	075b      	lsls	r3, r3, #29
 8010950:	d5f1      	bpl.n	8010936 <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010952:	4b05      	ldr	r3, [pc, #20]	; (8010968 <FLASH_WaitForLastOperation+0x80>)
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	06db      	lsls	r3, r3, #27
 8010958:	d5e5      	bpl.n	8010926 <FLASH_WaitForLastOperation+0x3e>
 801095a:	e7df      	b.n	801091c <FLASH_WaitForLastOperation+0x34>
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 801095c:	2101      	movs	r1, #1
 801095e:	4a03      	ldr	r2, [pc, #12]	; (801096c <FLASH_WaitForLastOperation+0x84>)
 8010960:	69d3      	ldr	r3, [r2, #28]
 8010962:	430b      	orrs	r3, r1
 8010964:	61d3      	str	r3, [r2, #28]
 8010966:	e7e2      	b.n	801092e <FLASH_WaitForLastOperation+0x46>
 8010968:	40022000 	.word	0x40022000
 801096c:	200072b0 	.word	0x200072b0

08010970 <HAL_FLASH_Program>:
{
 8010970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010972:	464e      	mov	r6, r9
 8010974:	4657      	mov	r7, sl
 8010976:	46de      	mov	lr, fp
 8010978:	4645      	mov	r5, r8
 801097a:	b5e0      	push	{r5, r6, r7, lr}
 801097c:	469a      	mov	sl, r3
 801097e:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8010980:	4b2a      	ldr	r3, [pc, #168]	; (8010a2c <HAL_FLASH_Program+0xbc>)
{
 8010982:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8010984:	4699      	mov	r9, r3
 8010986:	7e1b      	ldrb	r3, [r3, #24]
{
 8010988:	0004      	movs	r4, r0
 801098a:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 801098c:	2b01      	cmp	r3, #1
 801098e:	d048      	beq.n	8010a22 <HAL_FLASH_Program+0xb2>
 8010990:	2501      	movs	r5, #1
 8010992:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010994:	4826      	ldr	r0, [pc, #152]	; (8010a30 <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 8010996:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010998:	f7ff ffa6 	bl	80108e8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 801099c:	2800      	cmp	r0, #0
 801099e:	d136      	bne.n	8010a0e <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80109a0:	2c01      	cmp	r4, #1
 80109a2:	d040      	beq.n	8010a26 <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 80109a4:	3c02      	subs	r4, #2
 80109a6:	4263      	negs	r3, r4
 80109a8:	415c      	adcs	r4, r3
 80109aa:	2304      	movs	r3, #4
 80109ac:	4264      	negs	r4, r4
 80109ae:	43ac      	bics	r4, r5
 80109b0:	46a0      	mov	r8, r4
 80109b2:	469c      	mov	ip, r3
 80109b4:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80109b6:	2300      	movs	r3, #0
      nbiterations = 4;
 80109b8:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80109ba:	469b      	mov	fp, r3
 80109bc:	e018      	b.n	80109f0 <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80109be:	4653      	mov	r3, sl
 80109c0:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80109c2:	464a      	mov	r2, r9
 80109c4:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80109c6:	2701      	movs	r7, #1
 80109c8:	4c1a      	ldr	r4, [pc, #104]	; (8010a34 <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80109ca:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80109cc:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80109ce:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80109d0:	433a      	orrs	r2, r7
 80109d2:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80109d4:	4816      	ldr	r0, [pc, #88]	; (8010a30 <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 80109d6:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80109d8:	f7ff ff86 	bl	80108e8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80109dc:	6923      	ldr	r3, [r4, #16]
 80109de:	43bb      	bics	r3, r7
 80109e0:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 80109e2:	2800      	cmp	r0, #0
 80109e4:	d113      	bne.n	8010a0e <HAL_FLASH_Program+0x9e>
 80109e6:	3501      	adds	r5, #1
    for (index = 0; index < nbiterations; index++)
 80109e8:	b2eb      	uxtb	r3, r5
 80109ea:	3602      	adds	r6, #2
 80109ec:	4598      	cmp	r8, r3
 80109ee:	d90e      	bls.n	8010a0e <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80109f0:	2220      	movs	r2, #32
 80109f2:	012b      	lsls	r3, r5, #4
 80109f4:	4252      	negs	r2, r2
 80109f6:	189a      	adds	r2, r3, r2
 80109f8:	d5e1      	bpl.n	80109be <HAL_FLASH_Program+0x4e>
 80109fa:	2220      	movs	r2, #32
 80109fc:	4651      	mov	r1, sl
 80109fe:	1ad2      	subs	r2, r2, r3
 8010a00:	4091      	lsls	r1, r2
 8010a02:	000a      	movs	r2, r1
 8010a04:	9901      	ldr	r1, [sp, #4]
 8010a06:	40d9      	lsrs	r1, r3
 8010a08:	000b      	movs	r3, r1
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	e7d9      	b.n	80109c2 <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 8010a0e:	2300      	movs	r3, #0
 8010a10:	464a      	mov	r2, r9
 8010a12:	7613      	strb	r3, [r2, #24]
}
 8010a14:	b003      	add	sp, #12
 8010a16:	bc3c      	pop	{r2, r3, r4, r5}
 8010a18:	4690      	mov	r8, r2
 8010a1a:	4699      	mov	r9, r3
 8010a1c:	46a2      	mov	sl, r4
 8010a1e:	46ab      	mov	fp, r5
 8010a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8010a22:	2002      	movs	r0, #2
 8010a24:	e7f6      	b.n	8010a14 <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 8010a26:	2301      	movs	r3, #1
 8010a28:	4698      	mov	r8, r3
 8010a2a:	e7c4      	b.n	80109b6 <HAL_FLASH_Program+0x46>
 8010a2c:	200072b0 	.word	0x200072b0
 8010a30:	0000c350 	.word	0x0000c350
 8010a34:	40022000 	.word	0x40022000

08010a38 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8010a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a3a:	464f      	mov	r7, r9
 8010a3c:	4646      	mov	r6, r8
 8010a3e:	46d6      	mov	lr, sl
 8010a40:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010a42:	4f30      	ldr	r7, [pc, #192]	; (8010b04 <HAL_FLASHEx_Erase+0xcc>)
{
 8010a44:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8010a46:	7e3b      	ldrb	r3, [r7, #24]
{
 8010a48:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	d057      	beq.n	8010afe <HAL_FLASHEx_Erase+0xc6>
 8010a4e:	2301      	movs	r3, #1
 8010a50:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010a52:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010a54:	482c      	ldr	r0, [pc, #176]	; (8010b08 <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d034      	beq.n	8010ac4 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010a5a:	f7ff ff45 	bl	80108e8 <FLASH_WaitForLastOperation>
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d134      	bne.n	8010acc <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 8010a62:	2301      	movs	r3, #1
 8010a64:	464a      	mov	r2, r9
 8010a66:	425b      	negs	r3, r3
 8010a68:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010a6a:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 8010a6c:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010a6e:	02db      	lsls	r3, r3, #11
 8010a70:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8010a72:	429d      	cmp	r5, r3
 8010a74:	d22a      	bcs.n	8010acc <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010a76:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a78:	4c24      	ldr	r4, [pc, #144]	; (8010b0c <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010a7a:	4698      	mov	r8, r3
 8010a7c:	e00a      	b.n	8010a94 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 8010a7e:	2380      	movs	r3, #128	; 0x80
 8010a80:	011b      	lsls	r3, r3, #4
 8010a82:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010a84:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8010a86:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010a88:	4694      	mov	ip, r2
 8010a8a:	68b3      	ldr	r3, [r6, #8]
 8010a8c:	02db      	lsls	r3, r3, #11
 8010a8e:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010a90:	42ab      	cmp	r3, r5
 8010a92:	d91c      	bls.n	8010ace <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a94:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010a96:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a98:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010a9a:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a9c:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010a9e:	481a      	ldr	r0, [pc, #104]	; (8010b08 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010aa0:	4313      	orrs	r3, r2
 8010aa2:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010aa4:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010aa6:	6923      	ldr	r3, [r4, #16]
 8010aa8:	323e      	adds	r2, #62	; 0x3e
 8010aaa:	4313      	orrs	r3, r2
 8010aac:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010aae:	f7ff ff1b 	bl	80108e8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010ab2:	4652      	mov	r2, sl
 8010ab4:	6923      	ldr	r3, [r4, #16]
 8010ab6:	4393      	bics	r3, r2
 8010ab8:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8010aba:	2800      	cmp	r0, #0
 8010abc:	d0df      	beq.n	8010a7e <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 8010abe:	464b      	mov	r3, r9
 8010ac0:	601d      	str	r5, [r3, #0]
            break;
 8010ac2:	e004      	b.n	8010ace <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010ac4:	f7ff ff10 	bl	80108e8 <FLASH_WaitForLastOperation>
 8010ac8:	2800      	cmp	r0, #0
 8010aca:	d007      	beq.n	8010adc <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010acc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8010ace:	2300      	movs	r3, #0
 8010ad0:	763b      	strb	r3, [r7, #24]
}
 8010ad2:	bc1c      	pop	{r2, r3, r4}
 8010ad4:	4690      	mov	r8, r2
 8010ad6:	4699      	mov	r9, r3
 8010ad8:	46a2      	mov	sl, r4
 8010ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010adc:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010ade:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010ae0:	4c0a      	ldr	r4, [pc, #40]	; (8010b0c <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010ae2:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010ae4:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010ae6:	4808      	ldr	r0, [pc, #32]	; (8010b08 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010ae8:	432b      	orrs	r3, r5
 8010aea:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010aec:	6923      	ldr	r3, [r4, #16]
 8010aee:	4313      	orrs	r3, r2
 8010af0:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010af2:	f7ff fef9 	bl	80108e8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010af6:	6923      	ldr	r3, [r4, #16]
 8010af8:	43ab      	bics	r3, r5
 8010afa:	6123      	str	r3, [r4, #16]
 8010afc:	e7e7      	b.n	8010ace <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 8010afe:	2002      	movs	r0, #2
 8010b00:	e7e7      	b.n	8010ad2 <HAL_FLASHEx_Erase+0x9a>
 8010b02:	46c0      	nop			; (mov r8, r8)
 8010b04:	200072b0 	.word	0x200072b0
 8010b08:	0000c350 	.word	0x0000c350
 8010b0c:	40022000 	.word	0x40022000

08010b10 <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010b10:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010b12:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010b14:	4b05      	ldr	r3, [pc, #20]	; (8010b2c <FLASH_PageErase+0x1c>)
 8010b16:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010b18:	4b05      	ldr	r3, [pc, #20]	; (8010b30 <FLASH_PageErase+0x20>)
 8010b1a:	691a      	ldr	r2, [r3, #16]
 8010b1c:	430a      	orrs	r2, r1
 8010b1e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010b20:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010b22:	691a      	ldr	r2, [r3, #16]
 8010b24:	313e      	adds	r1, #62	; 0x3e
 8010b26:	430a      	orrs	r2, r1
 8010b28:	611a      	str	r2, [r3, #16]
}
 8010b2a:	4770      	bx	lr
 8010b2c:	200072b0 	.word	0x200072b0
 8010b30:	40022000 	.word	0x40022000

08010b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8010b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b36:	464e      	mov	r6, r9
 8010b38:	46de      	mov	lr, fp
 8010b3a:	4657      	mov	r7, sl
 8010b3c:	4645      	mov	r5, r8
 8010b3e:	b5e0      	push	{r5, r6, r7, lr}
 8010b40:	4689      	mov	r9, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8010b42:	6809      	ldr	r1, [r1, #0]
{ 
 8010b44:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 8010b46:	2900      	cmp	r1, #0
 8010b48:	d100      	bne.n	8010b4c <HAL_GPIO_Init+0x18>
 8010b4a:	e080      	b.n	8010c4e <HAL_GPIO_Init+0x11a>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010b4c:	4b70      	ldr	r3, [pc, #448]	; (8010d10 <HAL_GPIO_Init+0x1dc>)
  uint32_t position = 0x00;
 8010b4e:	2400      	movs	r4, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010b50:	469b      	mov	fp, r3
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010b52:	4b70      	ldr	r3, [pc, #448]	; (8010d14 <HAL_GPIO_Init+0x1e0>)
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010b54:	2601      	movs	r6, #1
        temp = EXTI->IMR;
 8010b56:	4698      	mov	r8, r3
 8010b58:	468a      	mov	sl, r1
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010b5a:	0033      	movs	r3, r6
 8010b5c:	4652      	mov	r2, sl
 8010b5e:	40a3      	lsls	r3, r4
 8010b60:	4013      	ands	r3, r2
 8010b62:	9300      	str	r3, [sp, #0]
    if(iocurrent)
 8010b64:	d06f      	beq.n	8010c46 <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010b66:	464b      	mov	r3, r9
 8010b68:	6859      	ldr	r1, [r3, #4]
 8010b6a:	2310      	movs	r3, #16
 8010b6c:	000f      	movs	r7, r1
 8010b6e:	439f      	bics	r7, r3
 8010b70:	003b      	movs	r3, r7
 8010b72:	9701      	str	r7, [sp, #4]
 8010b74:	2f02      	cmp	r7, #2
 8010b76:	d100      	bne.n	8010b7a <HAL_GPIO_Init+0x46>
 8010b78:	e070      	b.n	8010c5c <HAL_GPIO_Init+0x128>
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010b7a:	2203      	movs	r2, #3
 8010b7c:	0065      	lsls	r5, r4, #1
 8010b7e:	40aa      	lsls	r2, r5
 8010b80:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010b82:	6803      	ldr	r3, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010b84:	4013      	ands	r3, r2
 8010b86:	001f      	movs	r7, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010b88:	2303      	movs	r3, #3
 8010b8a:	400b      	ands	r3, r1
 8010b8c:	40ab      	lsls	r3, r5
 8010b8e:	469c      	mov	ip, r3
 8010b90:	003b      	movs	r3, r7
 8010b92:	4667      	mov	r7, ip
 8010b94:	433b      	orrs	r3, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010b96:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8010b98:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010b9a:	3f01      	subs	r7, #1
 8010b9c:	2f01      	cmp	r7, #1
 8010b9e:	d800      	bhi.n	8010ba2 <HAL_GPIO_Init+0x6e>
 8010ba0:	e079      	b.n	8010c96 <HAL_GPIO_Init+0x162>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010ba2:	464b      	mov	r3, r9
      temp = GPIOx->PUPDR;
 8010ba4:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010ba6:	403a      	ands	r2, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010ba8:	689f      	ldr	r7, [r3, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010baa:	2380      	movs	r3, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010bac:	40af      	lsls	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010bae:	055b      	lsls	r3, r3, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010bb0:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8010bb2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010bb4:	4219      	tst	r1, r3
 8010bb6:	d046      	beq.n	8010c46 <HAL_GPIO_Init+0x112>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010bb8:	465b      	mov	r3, fp
 8010bba:	699a      	ldr	r2, [r3, #24]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010bbc:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010bbe:	4332      	orrs	r2, r6
 8010bc0:	619a      	str	r2, [r3, #24]
 8010bc2:	699a      	ldr	r2, [r3, #24]
 8010bc4:	4b54      	ldr	r3, [pc, #336]	; (8010d18 <HAL_GPIO_Init+0x1e4>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010bc6:	4027      	ands	r7, r4
 8010bc8:	469c      	mov	ip, r3
 8010bca:	230f      	movs	r3, #15
 8010bcc:	00bf      	lsls	r7, r7, #2
 8010bce:	40bb      	lsls	r3, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010bd0:	4032      	ands	r2, r6
 8010bd2:	9203      	str	r2, [sp, #12]
 8010bd4:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8010bd6:	08a2      	lsrs	r2, r4, #2
 8010bd8:	0092      	lsls	r2, r2, #2
 8010bda:	4462      	add	r2, ip
 8010bdc:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010bde:	439d      	bics	r5, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010be0:	2390      	movs	r3, #144	; 0x90
 8010be2:	05db      	lsls	r3, r3, #23
 8010be4:	4298      	cmp	r0, r3
 8010be6:	d012      	beq.n	8010c0e <HAL_GPIO_Init+0xda>
 8010be8:	4b4c      	ldr	r3, [pc, #304]	; (8010d1c <HAL_GPIO_Init+0x1e8>)
 8010bea:	4298      	cmp	r0, r3
 8010bec:	d100      	bne.n	8010bf0 <HAL_GPIO_Init+0xbc>
 8010bee:	e083      	b.n	8010cf8 <HAL_GPIO_Init+0x1c4>
 8010bf0:	4b4b      	ldr	r3, [pc, #300]	; (8010d20 <HAL_GPIO_Init+0x1ec>)
 8010bf2:	4298      	cmp	r0, r3
 8010bf4:	d100      	bne.n	8010bf8 <HAL_GPIO_Init+0xc4>
 8010bf6:	e07b      	b.n	8010cf0 <HAL_GPIO_Init+0x1bc>
 8010bf8:	4b4a      	ldr	r3, [pc, #296]	; (8010d24 <HAL_GPIO_Init+0x1f0>)
 8010bfa:	4298      	cmp	r0, r3
 8010bfc:	d100      	bne.n	8010c00 <HAL_GPIO_Init+0xcc>
 8010bfe:	e07f      	b.n	8010d00 <HAL_GPIO_Init+0x1cc>
 8010c00:	4b49      	ldr	r3, [pc, #292]	; (8010d28 <HAL_GPIO_Init+0x1f4>)
 8010c02:	4298      	cmp	r0, r3
 8010c04:	d100      	bne.n	8010c08 <HAL_GPIO_Init+0xd4>
 8010c06:	e07f      	b.n	8010d08 <HAL_GPIO_Init+0x1d4>
 8010c08:	2305      	movs	r3, #5
 8010c0a:	40bb      	lsls	r3, r7
 8010c0c:	431d      	orrs	r5, r3
        temp = EXTI->IMR;
 8010c0e:	4643      	mov	r3, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 8010c10:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8010c12:	681a      	ldr	r2, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010c14:	9b00      	ldr	r3, [sp, #0]
 8010c16:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010c18:	03cb      	lsls	r3, r1, #15
 8010c1a:	d451      	bmi.n	8010cc0 <HAL_GPIO_Init+0x18c>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8010c1c:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010c1e:	402a      	ands	r2, r5
        EXTI->IMR = temp;
 8010c20:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8010c22:	685a      	ldr	r2, [r3, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010c24:	038b      	lsls	r3, r1, #14
 8010c26:	d452      	bmi.n	8010cce <HAL_GPIO_Init+0x19a>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8010c28:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8010c2a:	402a      	ands	r2, r5
        EXTI->EMR = temp;
 8010c2c:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010c2e:	689a      	ldr	r2, [r3, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010c30:	02cb      	lsls	r3, r1, #11
 8010c32:	d453      	bmi.n	8010cdc <HAL_GPIO_Init+0x1a8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8010c34:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010c36:	402a      	ands	r2, r5
        EXTI->RTSR = temp;
 8010c38:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8010c3a:	68da      	ldr	r2, [r3, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010c3c:	028b      	lsls	r3, r1, #10
 8010c3e:	d454      	bmi.n	8010cea <HAL_GPIO_Init+0x1b6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010c40:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8010c42:	4643      	mov	r3, r8
 8010c44:	60da      	str	r2, [r3, #12]
  while ((GPIO_Init->Pin) >> position)
 8010c46:	4653      	mov	r3, sl
      }
    }
    
    position++;
 8010c48:	3401      	adds	r4, #1
  while ((GPIO_Init->Pin) >> position)
 8010c4a:	40e3      	lsrs	r3, r4
 8010c4c:	d185      	bne.n	8010b5a <HAL_GPIO_Init+0x26>
  } 
}
 8010c4e:	b005      	add	sp, #20
 8010c50:	bc3c      	pop	{r2, r3, r4, r5}
 8010c52:	4690      	mov	r8, r2
 8010c54:	4699      	mov	r9, r3
 8010c56:	46a2      	mov	sl, r4
 8010c58:	46ab      	mov	fp, r5
 8010c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010c5c:	2507      	movs	r5, #7
 8010c5e:	4025      	ands	r5, r4
 8010c60:	00ad      	lsls	r5, r5, #2
 8010c62:	330d      	adds	r3, #13
 8010c64:	40ab      	lsls	r3, r5
        temp = GPIOx->AFR[position >> 3];
 8010c66:	08e2      	lsrs	r2, r4, #3
 8010c68:	0092      	lsls	r2, r2, #2
 8010c6a:	1882      	adds	r2, r0, r2
 8010c6c:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010c6e:	439f      	bics	r7, r3
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8010c70:	464b      	mov	r3, r9
 8010c72:	691b      	ldr	r3, [r3, #16]
 8010c74:	40ab      	lsls	r3, r5
 8010c76:	001d      	movs	r5, r3
 8010c78:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8010c7a:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010c7c:	2203      	movs	r2, #3
 8010c7e:	0065      	lsls	r5, r4, #1
 8010c80:	40aa      	lsls	r2, r5
 8010c82:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010c84:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010c86:	4017      	ands	r7, r2
 8010c88:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010c8a:	2703      	movs	r7, #3
 8010c8c:	400f      	ands	r7, r1
 8010c8e:	40af      	lsls	r7, r5
 8010c90:	4663      	mov	r3, ip
 8010c92:	431f      	orrs	r7, r3
      GPIOx->MODER = temp;
 8010c94:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8010c96:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010c98:	464b      	mov	r3, r9
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010c9a:	4017      	ands	r7, r2
 8010c9c:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010c9e:	68df      	ldr	r7, [r3, #12]
 8010ca0:	4663      	mov	r3, ip
 8010ca2:	40af      	lsls	r7, r5
 8010ca4:	431f      	orrs	r7, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010ca6:	0033      	movs	r3, r6
 8010ca8:	40a3      	lsls	r3, r4
        GPIOx->OSPEEDR = temp;
 8010caa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8010cac:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010cae:	439f      	bics	r7, r3
 8010cb0:	46bc      	mov	ip, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8010cb2:	090f      	lsrs	r7, r1, #4
 8010cb4:	4037      	ands	r7, r6
 8010cb6:	40a7      	lsls	r7, r4
 8010cb8:	4663      	mov	r3, ip
 8010cba:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8010cbc:	6047      	str	r7, [r0, #4]
 8010cbe:	e770      	b.n	8010ba2 <HAL_GPIO_Init+0x6e>
          SET_BIT(temp, iocurrent); 
 8010cc0:	9b00      	ldr	r3, [sp, #0]
 8010cc2:	431a      	orrs	r2, r3
        EXTI->IMR = temp;
 8010cc4:	4643      	mov	r3, r8
 8010cc6:	601a      	str	r2, [r3, #0]
        temp = EXTI->EMR;
 8010cc8:	685a      	ldr	r2, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010cca:	038b      	lsls	r3, r1, #14
 8010ccc:	d5ac      	bpl.n	8010c28 <HAL_GPIO_Init+0xf4>
          SET_BIT(temp, iocurrent); 
 8010cce:	9b00      	ldr	r3, [sp, #0]
 8010cd0:	431a      	orrs	r2, r3
        EXTI->EMR = temp;
 8010cd2:	4643      	mov	r3, r8
 8010cd4:	605a      	str	r2, [r3, #4]
        temp = EXTI->RTSR;
 8010cd6:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010cd8:	02cb      	lsls	r3, r1, #11
 8010cda:	d5ab      	bpl.n	8010c34 <HAL_GPIO_Init+0x100>
          SET_BIT(temp, iocurrent); 
 8010cdc:	9b00      	ldr	r3, [sp, #0]
 8010cde:	431a      	orrs	r2, r3
        EXTI->RTSR = temp;
 8010ce0:	4643      	mov	r3, r8
 8010ce2:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 8010ce4:	68da      	ldr	r2, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010ce6:	028b      	lsls	r3, r1, #10
 8010ce8:	d5aa      	bpl.n	8010c40 <HAL_GPIO_Init+0x10c>
          SET_BIT(temp, iocurrent); 
 8010cea:	9b00      	ldr	r3, [sp, #0]
 8010cec:	431a      	orrs	r2, r3
 8010cee:	e7a8      	b.n	8010c42 <HAL_GPIO_Init+0x10e>
 8010cf0:	2302      	movs	r3, #2
 8010cf2:	40bb      	lsls	r3, r7
 8010cf4:	431d      	orrs	r5, r3
 8010cf6:	e78a      	b.n	8010c0e <HAL_GPIO_Init+0xda>
 8010cf8:	0033      	movs	r3, r6
 8010cfa:	40bb      	lsls	r3, r7
 8010cfc:	431d      	orrs	r5, r3
 8010cfe:	e786      	b.n	8010c0e <HAL_GPIO_Init+0xda>
 8010d00:	2303      	movs	r3, #3
 8010d02:	40bb      	lsls	r3, r7
 8010d04:	431d      	orrs	r5, r3
 8010d06:	e782      	b.n	8010c0e <HAL_GPIO_Init+0xda>
 8010d08:	2304      	movs	r3, #4
 8010d0a:	40bb      	lsls	r3, r7
 8010d0c:	431d      	orrs	r5, r3
 8010d0e:	e77e      	b.n	8010c0e <HAL_GPIO_Init+0xda>
 8010d10:	40021000 	.word	0x40021000
 8010d14:	40010400 	.word	0x40010400
 8010d18:	40010000 	.word	0x40010000
 8010d1c:	48000400 	.word	0x48000400
 8010d20:	48000800 	.word	0x48000800
 8010d24:	48000c00 	.word	0x48000c00
 8010d28:	48001000 	.word	0x48001000

08010d2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d2e:	46de      	mov	lr, fp
 8010d30:	4657      	mov	r7, sl
 8010d32:	464e      	mov	r6, r9
 8010d34:	4645      	mov	r5, r8
 8010d36:	b5e0      	push	{r5, r6, r7, lr}
 8010d38:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8010d3a:	2900      	cmp	r1, #0
 8010d3c:	d055      	beq.n	8010dea <HAL_GPIO_DeInit+0xbe>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8010d3e:	2201      	movs	r2, #1
 8010d40:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010d42:	3202      	adds	r2, #2
 8010d44:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010d46:	320c      	adds	r2, #12
  uint32_t position = 0x00;
 8010d48:	2300      	movs	r3, #0
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010d4a:	4691      	mov	r9, r2
    iocurrent = (GPIO_Pin) & (1 << position);
 8010d4c:	4666      	mov	r6, ip
 8010d4e:	000d      	movs	r5, r1
 8010d50:	409e      	lsls	r6, r3
 8010d52:	4035      	ands	r5, r6
    if (iocurrent)
 8010d54:	d045      	beq.n	8010de2 <HAL_GPIO_DeInit+0xb6>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010d56:	4647      	mov	r7, r8
 8010d58:	005c      	lsls	r4, r3, #1
 8010d5a:	40a7      	lsls	r7, r4
 8010d5c:	43fc      	mvns	r4, r7
 8010d5e:	6802      	ldr	r2, [r0, #0]
 8010d60:	4022      	ands	r2, r4
 8010d62:	6002      	str	r2, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010d64:	08da      	lsrs	r2, r3, #3
 8010d66:	0092      	lsls	r2, r2, #2
 8010d68:	1887      	adds	r7, r0, r2
 8010d6a:	9701      	str	r7, [sp, #4]
 8010d6c:	6a3f      	ldr	r7, [r7, #32]
 8010d6e:	46ba      	mov	sl, r7
 8010d70:	2707      	movs	r7, #7
 8010d72:	401f      	ands	r7, r3
 8010d74:	00bf      	lsls	r7, r7, #2
 8010d76:	46bb      	mov	fp, r7
 8010d78:	464f      	mov	r7, r9
 8010d7a:	465a      	mov	r2, fp
 8010d7c:	4097      	lsls	r7, r2
 8010d7e:	46bb      	mov	fp, r7
 8010d80:	4657      	mov	r7, sl
 8010d82:	465a      	mov	r2, fp
 8010d84:	4397      	bics	r7, r2
 8010d86:	003a      	movs	r2, r7
 8010d88:	9f01      	ldr	r7, [sp, #4]
 8010d8a:	623a      	str	r2, [r7, #32]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010d8c:	6882      	ldr	r2, [r0, #8]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010d8e:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010d90:	4022      	ands	r2, r4
 8010d92:	6082      	str	r2, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8010d94:	6842      	ldr	r2, [r0, #4]
 8010d96:	43b2      	bics	r2, r6
 8010d98:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010d9a:	68c2      	ldr	r2, [r0, #12]
 8010d9c:	4014      	ands	r4, r2
 8010d9e:	60c4      	str	r4, [r0, #12]
 8010da0:	4c2b      	ldr	r4, [pc, #172]	; (8010e50 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2];
 8010da2:	089a      	lsrs	r2, r3, #2
 8010da4:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010da6:	4644      	mov	r4, r8
 8010da8:	401c      	ands	r4, r3
 8010daa:	00a4      	lsls	r4, r4, #2
 8010dac:	40a7      	lsls	r7, r4
 8010dae:	0092      	lsls	r2, r2, #2
 8010db0:	4452      	add	r2, sl
      tmp = SYSCFG->EXTICR[position >> 2];
 8010db2:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010db4:	46ba      	mov	sl, r7
 8010db6:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010db8:	2790      	movs	r7, #144	; 0x90
 8010dba:	05ff      	lsls	r7, r7, #23
 8010dbc:	42b8      	cmp	r0, r7
 8010dbe:	d01b      	beq.n	8010df8 <HAL_GPIO_DeInit+0xcc>
 8010dc0:	4f24      	ldr	r7, [pc, #144]	; (8010e54 <HAL_GPIO_DeInit+0x128>)
 8010dc2:	42b8      	cmp	r0, r7
 8010dc4:	d033      	beq.n	8010e2e <HAL_GPIO_DeInit+0x102>
 8010dc6:	4f24      	ldr	r7, [pc, #144]	; (8010e58 <HAL_GPIO_DeInit+0x12c>)
 8010dc8:	42b8      	cmp	r0, r7
 8010dca:	d038      	beq.n	8010e3e <HAL_GPIO_DeInit+0x112>
 8010dcc:	4f23      	ldr	r7, [pc, #140]	; (8010e5c <HAL_GPIO_DeInit+0x130>)
 8010dce:	42b8      	cmp	r0, r7
 8010dd0:	d039      	beq.n	8010e46 <HAL_GPIO_DeInit+0x11a>
 8010dd2:	4f23      	ldr	r7, [pc, #140]	; (8010e60 <HAL_GPIO_DeInit+0x134>)
 8010dd4:	42b8      	cmp	r0, r7
 8010dd6:	d02e      	beq.n	8010e36 <HAL_GPIO_DeInit+0x10a>
 8010dd8:	2705      	movs	r7, #5
 8010dda:	40a7      	lsls	r7, r4
 8010ddc:	003c      	movs	r4, r7
 8010dde:	42a6      	cmp	r6, r4
 8010de0:	d00d      	beq.n	8010dfe <HAL_GPIO_DeInit+0xd2>
  while (GPIO_Pin >> position)
 8010de2:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8010de4:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8010de6:	40da      	lsrs	r2, r3
 8010de8:	d1b0      	bne.n	8010d4c <HAL_GPIO_DeInit+0x20>
  }
}
 8010dea:	b003      	add	sp, #12
 8010dec:	bc3c      	pop	{r2, r3, r4, r5}
 8010dee:	4690      	mov	r8, r2
 8010df0:	4699      	mov	r9, r3
 8010df2:	46a2      	mov	sl, r4
 8010df4:	46ab      	mov	fp, r5
 8010df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010df8:	2400      	movs	r4, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010dfa:	42a6      	cmp	r6, r4
 8010dfc:	d1f1      	bne.n	8010de2 <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010dfe:	4656      	mov	r6, sl
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010e00:	43ed      	mvns	r5, r5
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010e02:	6894      	ldr	r4, [r2, #8]
    position++;
 8010e04:	3301      	adds	r3, #1
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010e06:	43b4      	bics	r4, r6
 8010e08:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010e0a:	4c16      	ldr	r4, [pc, #88]	; (8010e64 <HAL_GPIO_DeInit+0x138>)
 8010e0c:	6822      	ldr	r2, [r4, #0]
 8010e0e:	402a      	ands	r2, r5
 8010e10:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8010e12:	6862      	ldr	r2, [r4, #4]
 8010e14:	402a      	ands	r2, r5
 8010e16:	6062      	str	r2, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8010e18:	68a2      	ldr	r2, [r4, #8]
 8010e1a:	402a      	ands	r2, r5
 8010e1c:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010e1e:	68e2      	ldr	r2, [r4, #12]
 8010e20:	4015      	ands	r5, r2
  while (GPIO_Pin >> position)
 8010e22:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010e24:	60e5      	str	r5, [r4, #12]
  while (GPIO_Pin >> position)
 8010e26:	40da      	lsrs	r2, r3
 8010e28:	d000      	beq.n	8010e2c <HAL_GPIO_DeInit+0x100>
 8010e2a:	e78f      	b.n	8010d4c <HAL_GPIO_DeInit+0x20>
 8010e2c:	e7dd      	b.n	8010dea <HAL_GPIO_DeInit+0xbe>
 8010e2e:	4667      	mov	r7, ip
 8010e30:	40a7      	lsls	r7, r4
 8010e32:	003c      	movs	r4, r7
 8010e34:	e7e1      	b.n	8010dfa <HAL_GPIO_DeInit+0xce>
 8010e36:	2704      	movs	r7, #4
 8010e38:	40a7      	lsls	r7, r4
 8010e3a:	003c      	movs	r4, r7
 8010e3c:	e7dd      	b.n	8010dfa <HAL_GPIO_DeInit+0xce>
 8010e3e:	2702      	movs	r7, #2
 8010e40:	40a7      	lsls	r7, r4
 8010e42:	003c      	movs	r4, r7
 8010e44:	e7d9      	b.n	8010dfa <HAL_GPIO_DeInit+0xce>
 8010e46:	4647      	mov	r7, r8
 8010e48:	40a7      	lsls	r7, r4
 8010e4a:	003c      	movs	r4, r7
 8010e4c:	e7d5      	b.n	8010dfa <HAL_GPIO_DeInit+0xce>
 8010e4e:	46c0      	nop			; (mov r8, r8)
 8010e50:	40010000 	.word	0x40010000
 8010e54:	48000400 	.word	0x48000400
 8010e58:	48000800 	.word	0x48000800
 8010e5c:	48000c00 	.word	0x48000c00
 8010e60:	48001000 	.word	0x48001000
 8010e64:	40010400 	.word	0x40010400

08010e68 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010e68:	6900      	ldr	r0, [r0, #16]
 8010e6a:	4008      	ands	r0, r1
 8010e6c:	1e41      	subs	r1, r0, #1
 8010e6e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8010e70:	b2c0      	uxtb	r0, r0
  }
 8010e72:	4770      	bx	lr

08010e74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010e74:	2a00      	cmp	r2, #0
 8010e76:	d101      	bne.n	8010e7c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010e78:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8010e7a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010e7c:	6181      	str	r1, [r0, #24]
 8010e7e:	e7fc      	b.n	8010e7a <HAL_GPIO_WritePin+0x6>

08010e80 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8010e80:	6943      	ldr	r3, [r0, #20]
 8010e82:	4059      	eors	r1, r3
 8010e84:	6141      	str	r1, [r0, #20]
}
 8010e86:	4770      	bx	lr

08010e88 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8010e88:	4770      	bx	lr
 8010e8a:	46c0      	nop			; (mov r8, r8)

08010e8c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8010e8c:	2380      	movs	r3, #128	; 0x80
 8010e8e:	4a03      	ldr	r2, [pc, #12]	; (8010e9c <HAL_PWR_EnableBkUpAccess+0x10>)
 8010e90:	005b      	lsls	r3, r3, #1
 8010e92:	6811      	ldr	r1, [r2, #0]
 8010e94:	430b      	orrs	r3, r1
 8010e96:	6013      	str	r3, [r2, #0]
}
 8010e98:	4770      	bx	lr
 8010e9a:	46c0      	nop			; (mov r8, r8)
 8010e9c:	40007000 	.word	0x40007000

08010ea0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ea2:	46c6      	mov	lr, r8
 8010ea4:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010ea6:	6803      	ldr	r3, [r0, #0]
{
 8010ea8:	b082      	sub	sp, #8
 8010eaa:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010eac:	07da      	lsls	r2, r3, #31
 8010eae:	d54b      	bpl.n	8010f48 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8010eb0:	210c      	movs	r1, #12
 8010eb2:	48c4      	ldr	r0, [pc, #784]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
 8010eb4:	6842      	ldr	r2, [r0, #4]
 8010eb6:	400a      	ands	r2, r1
 8010eb8:	2a04      	cmp	r2, #4
 8010eba:	d100      	bne.n	8010ebe <HAL_RCC_OscConfig+0x1e>
 8010ebc:	e153      	b.n	8011166 <HAL_RCC_OscConfig+0x2c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8010ebe:	6842      	ldr	r2, [r0, #4]
 8010ec0:	4011      	ands	r1, r2
 8010ec2:	2908      	cmp	r1, #8
 8010ec4:	d108      	bne.n	8010ed8 <HAL_RCC_OscConfig+0x38>
 8010ec6:	21c0      	movs	r1, #192	; 0xc0
 8010ec8:	6842      	ldr	r2, [r0, #4]
 8010eca:	0249      	lsls	r1, r1, #9
 8010ecc:	400a      	ands	r2, r1
 8010ece:	2180      	movs	r1, #128	; 0x80
 8010ed0:	0249      	lsls	r1, r1, #9
 8010ed2:	428a      	cmp	r2, r1
 8010ed4:	d100      	bne.n	8010ed8 <HAL_RCC_OscConfig+0x38>
 8010ed6:	e146      	b.n	8011166 <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010ed8:	4dba      	ldr	r5, [pc, #744]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
 8010eda:	4abb      	ldr	r2, [pc, #748]	; (80111c8 <HAL_RCC_OscConfig+0x328>)
 8010edc:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010ede:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010ee0:	4013      	ands	r3, r2
 8010ee2:	602b      	str	r3, [r5, #0]
 8010ee4:	682b      	ldr	r3, [r5, #0]
 8010ee6:	4ab9      	ldr	r2, [pc, #740]	; (80111cc <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010ee8:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010eea:	4013      	ands	r3, r2
 8010eec:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8010eee:	f7fe faf9 	bl	800f4e4 <HAL_GetTick>
 8010ef2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010ef4:	e005      	b.n	8010f02 <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010ef6:	f7fe faf5 	bl	800f4e4 <HAL_GetTick>
 8010efa:	1bc0      	subs	r0, r0, r7
 8010efc:	2864      	cmp	r0, #100	; 0x64
 8010efe:	d900      	bls.n	8010f02 <HAL_RCC_OscConfig+0x62>
 8010f00:	e13b      	b.n	801117a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f02:	682b      	ldr	r3, [r5, #0]
 8010f04:	4233      	tst	r3, r6
 8010f06:	d1f6      	bne.n	8010ef6 <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010f08:	6863      	ldr	r3, [r4, #4]
 8010f0a:	2b01      	cmp	r3, #1
 8010f0c:	d100      	bne.n	8010f10 <HAL_RCC_OscConfig+0x70>
 8010f0e:	e196      	b.n	801123e <HAL_RCC_OscConfig+0x39e>
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d000      	beq.n	8010f16 <HAL_RCC_OscConfig+0x76>
 8010f14:	e1bc      	b.n	8011290 <HAL_RCC_OscConfig+0x3f0>
 8010f16:	682b      	ldr	r3, [r5, #0]
 8010f18:	4aab      	ldr	r2, [pc, #684]	; (80111c8 <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f1a:	4eaa      	ldr	r6, [pc, #680]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010f1c:	4013      	ands	r3, r2
 8010f1e:	602b      	str	r3, [r5, #0]
 8010f20:	682b      	ldr	r3, [r5, #0]
 8010f22:	4aaa      	ldr	r2, [pc, #680]	; (80111cc <HAL_RCC_OscConfig+0x32c>)
 8010f24:	4013      	ands	r3, r2
 8010f26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010f28:	f7fe fadc 	bl	800f4e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f2c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8010f2e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f30:	02ad      	lsls	r5, r5, #10
 8010f32:	e005      	b.n	8010f40 <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010f34:	f7fe fad6 	bl	800f4e4 <HAL_GetTick>
 8010f38:	1bc0      	subs	r0, r0, r7
 8010f3a:	2864      	cmp	r0, #100	; 0x64
 8010f3c:	d900      	bls.n	8010f40 <HAL_RCC_OscConfig+0xa0>
 8010f3e:	e11c      	b.n	801117a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f40:	6833      	ldr	r3, [r6, #0]
 8010f42:	422b      	tst	r3, r5
 8010f44:	d1f6      	bne.n	8010f34 <HAL_RCC_OscConfig+0x94>
 8010f46:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010f48:	079a      	lsls	r2, r3, #30
 8010f4a:	d529      	bpl.n	8010fa0 <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8010f4c:	220c      	movs	r2, #12
 8010f4e:	499d      	ldr	r1, [pc, #628]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
 8010f50:	6848      	ldr	r0, [r1, #4]
 8010f52:	4202      	tst	r2, r0
 8010f54:	d100      	bne.n	8010f58 <HAL_RCC_OscConfig+0xb8>
 8010f56:	e0fd      	b.n	8011154 <HAL_RCC_OscConfig+0x2b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8010f58:	6848      	ldr	r0, [r1, #4]
 8010f5a:	4002      	ands	r2, r0
 8010f5c:	2a08      	cmp	r2, #8
 8010f5e:	d100      	bne.n	8010f62 <HAL_RCC_OscConfig+0xc2>
 8010f60:	e0ef      	b.n	8011142 <HAL_RCC_OscConfig+0x2a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010f62:	68e3      	ldr	r3, [r4, #12]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d100      	bne.n	8010f6a <HAL_RCC_OscConfig+0xca>
 8010f68:	e138      	b.n	80111dc <HAL_RCC_OscConfig+0x33c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010f6a:	2201      	movs	r2, #1
 8010f6c:	4f95      	ldr	r7, [pc, #596]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010f6e:	2502      	movs	r5, #2
        __HAL_RCC_HSI_ENABLE();
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	4313      	orrs	r3, r2
 8010f74:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8010f76:	f7fe fab5 	bl	800f4e4 <HAL_GetTick>
 8010f7a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010f7c:	e005      	b.n	8010f8a <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010f7e:	f7fe fab1 	bl	800f4e4 <HAL_GetTick>
 8010f82:	1b80      	subs	r0, r0, r6
 8010f84:	2864      	cmp	r0, #100	; 0x64
 8010f86:	d900      	bls.n	8010f8a <HAL_RCC_OscConfig+0xea>
 8010f88:	e0f7      	b.n	801117a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	421d      	tst	r5, r3
 8010f8e:	d0f6      	beq.n	8010f7e <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010f90:	21f8      	movs	r1, #248	; 0xf8
 8010f92:	683a      	ldr	r2, [r7, #0]
 8010f94:	6923      	ldr	r3, [r4, #16]
 8010f96:	438a      	bics	r2, r1
 8010f98:	00db      	lsls	r3, r3, #3
 8010f9a:	4313      	orrs	r3, r2
 8010f9c:	603b      	str	r3, [r7, #0]
 8010f9e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010fa0:	071a      	lsls	r2, r3, #28
 8010fa2:	d45d      	bmi.n	8011060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010fa4:	075a      	lsls	r2, r3, #29
 8010fa6:	d474      	bmi.n	8011092 <HAL_RCC_OscConfig+0x1f2>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8010fa8:	06da      	lsls	r2, r3, #27
 8010faa:	d512      	bpl.n	8010fd2 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8010fac:	6962      	ldr	r2, [r4, #20]
 8010fae:	2a01      	cmp	r2, #1
 8010fb0:	d100      	bne.n	8010fb4 <HAL_RCC_OscConfig+0x114>
 8010fb2:	e18c      	b.n	80112ce <HAL_RCC_OscConfig+0x42e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8010fb4:	3205      	adds	r2, #5
 8010fb6:	d000      	beq.n	8010fba <HAL_RCC_OscConfig+0x11a>
 8010fb8:	e124      	b.n	8011204 <HAL_RCC_OscConfig+0x364>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8010fba:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010fbc:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8010fbe:	4981      	ldr	r1, [pc, #516]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
 8010fc0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8010fc2:	4382      	bics	r2, r0
 8010fc4:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010fc6:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8010fc8:	69a2      	ldr	r2, [r4, #24]
 8010fca:	43a8      	bics	r0, r5
 8010fcc:	00d2      	lsls	r2, r2, #3
 8010fce:	4302      	orrs	r2, r0
 8010fd0:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010fd2:	069b      	lsls	r3, r3, #26
 8010fd4:	d522      	bpl.n	801101c <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010fd6:	220c      	movs	r2, #12
 8010fd8:	497a      	ldr	r1, [pc, #488]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
 8010fda:	684b      	ldr	r3, [r1, #4]
 8010fdc:	4013      	ands	r3, r2
 8010fde:	2b0c      	cmp	r3, #12
 8010fe0:	d100      	bne.n	8010fe4 <HAL_RCC_OscConfig+0x144>
 8010fe2:	e14a      	b.n	801127a <HAL_RCC_OscConfig+0x3da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010fe4:	684b      	ldr	r3, [r1, #4]
 8010fe6:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010fe8:	2a08      	cmp	r2, #8
 8010fea:	d100      	bne.n	8010fee <HAL_RCC_OscConfig+0x14e>
 8010fec:	e13e      	b.n	801126c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010fee:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8010ff0:	4d74      	ldr	r5, [pc, #464]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d100      	bne.n	8010ff8 <HAL_RCC_OscConfig+0x158>
 8010ff6:	e156      	b.n	80112a6 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8010ff8:	2680      	movs	r6, #128	; 0x80
 8010ffa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010ffc:	0276      	lsls	r6, r6, #9
 8010ffe:	4333      	orrs	r3, r6
 8011000:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011002:	f7fe fa6f 	bl	800f4e4 <HAL_GetTick>
 8011006:	0007      	movs	r7, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011008:	e005      	b.n	8011016 <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801100a:	f7fe fa6b 	bl	800f4e4 <HAL_GetTick>
 801100e:	1bc0      	subs	r0, r0, r7
 8011010:	2864      	cmp	r0, #100	; 0x64
 8011012:	d900      	bls.n	8011016 <HAL_RCC_OscConfig+0x176>
 8011014:	e0b1      	b.n	801117a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011016:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011018:	4233      	tst	r3, r6
 801101a:	d0f6      	beq.n	801100a <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801101c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801101e:	2b00      	cmp	r3, #0
 8011020:	d01c      	beq.n	801105c <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011022:	220c      	movs	r2, #12
 8011024:	4d67      	ldr	r5, [pc, #412]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
 8011026:	6869      	ldr	r1, [r5, #4]
 8011028:	400a      	ands	r2, r1
 801102a:	2a08      	cmp	r2, #8
 801102c:	d100      	bne.n	8011030 <HAL_RCC_OscConfig+0x190>
 801102e:	e098      	b.n	8011162 <HAL_RCC_OscConfig+0x2c2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011030:	2b02      	cmp	r3, #2
 8011032:	d100      	bne.n	8011036 <HAL_RCC_OscConfig+0x196>
 8011034:	e16a      	b.n	801130c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011036:	682b      	ldr	r3, [r5, #0]
 8011038:	4a65      	ldr	r2, [pc, #404]	; (80111d0 <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801103a:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 801103c:	4013      	ands	r3, r2
 801103e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011040:	f7fe fa50 	bl	800f4e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011044:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 8011046:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011048:	e005      	b.n	8011056 <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801104a:	f7fe fa4b 	bl	800f4e4 <HAL_GetTick>
 801104e:	1b80      	subs	r0, r0, r6
 8011050:	2864      	cmp	r0, #100	; 0x64
 8011052:	d900      	bls.n	8011056 <HAL_RCC_OscConfig+0x1b6>
 8011054:	e091      	b.n	801117a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011056:	682b      	ldr	r3, [r5, #0]
 8011058:	4223      	tst	r3, r4
 801105a:	d1f6      	bne.n	801104a <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 801105c:	2000      	movs	r0, #0
 801105e:	e08d      	b.n	801117c <HAL_RCC_OscConfig+0x2dc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011060:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 8011062:	4d58      	ldr	r5, [pc, #352]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011064:	2b00      	cmp	r3, #0
 8011066:	d100      	bne.n	801106a <HAL_RCC_OscConfig+0x1ca>
 8011068:	e08c      	b.n	8011184 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 801106a:	2201      	movs	r2, #1
 801106c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801106e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8011070:	4313      	orrs	r3, r2
 8011072:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011074:	f7fe fa36 	bl	800f4e4 <HAL_GetTick>
 8011078:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801107a:	e004      	b.n	8011086 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801107c:	f7fe fa32 	bl	800f4e4 <HAL_GetTick>
 8011080:	1bc0      	subs	r0, r0, r7
 8011082:	2864      	cmp	r0, #100	; 0x64
 8011084:	d879      	bhi.n	801117a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011086:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011088:	421e      	tst	r6, r3
 801108a:	d0f7      	beq.n	801107c <HAL_RCC_OscConfig+0x1dc>
 801108c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801108e:	075a      	lsls	r2, r3, #29
 8011090:	d58a      	bpl.n	8010fa8 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011092:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011094:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8011096:	4a4b      	ldr	r2, [pc, #300]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
 8011098:	0540      	lsls	r0, r0, #21
 801109a:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801109c:	4d4d      	ldr	r5, [pc, #308]	; (80111d4 <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 801109e:	4301      	orrs	r1, r0
 80110a0:	61d1      	str	r1, [r2, #28]
 80110a2:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80110a4:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80110a6:	4003      	ands	r3, r0
 80110a8:	9301      	str	r3, [sp, #4]
 80110aa:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80110ac:	682b      	ldr	r3, [r5, #0]
 80110ae:	4333      	orrs	r3, r6
 80110b0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80110b2:	f7fe fa17 	bl	800f4e4 <HAL_GetTick>
 80110b6:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80110b8:	e004      	b.n	80110c4 <HAL_RCC_OscConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80110ba:	f7fe fa13 	bl	800f4e4 <HAL_GetTick>
 80110be:	1bc0      	subs	r0, r0, r7
 80110c0:	2864      	cmp	r0, #100	; 0x64
 80110c2:	d85a      	bhi.n	801117a <HAL_RCC_OscConfig+0x2da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80110c4:	682b      	ldr	r3, [r5, #0]
 80110c6:	4233      	tst	r3, r6
 80110c8:	d0f7      	beq.n	80110ba <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80110ca:	2201      	movs	r2, #1
 80110cc:	4d3d      	ldr	r5, [pc, #244]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80110ce:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80110d0:	6a2b      	ldr	r3, [r5, #32]
 80110d2:	4393      	bics	r3, r2
 80110d4:	622b      	str	r3, [r5, #32]
 80110d6:	6a2b      	ldr	r3, [r5, #32]
 80110d8:	3203      	adds	r2, #3
 80110da:	4393      	bics	r3, r2
 80110dc:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 80110de:	f7fe fa01 	bl	800f4e4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80110e2:	4b3d      	ldr	r3, [pc, #244]	; (80111d8 <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 80110e4:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80110e6:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80110e8:	e004      	b.n	80110f4 <HAL_RCC_OscConfig+0x254>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80110ea:	f7fe f9fb 	bl	800f4e4 <HAL_GetTick>
 80110ee:	1bc0      	subs	r0, r0, r7
 80110f0:	4540      	cmp	r0, r8
 80110f2:	d842      	bhi.n	801117a <HAL_RCC_OscConfig+0x2da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80110f4:	6a2b      	ldr	r3, [r5, #32]
 80110f6:	421e      	tst	r6, r3
 80110f8:	d1f7      	bne.n	80110ea <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80110fa:	68a3      	ldr	r3, [r4, #8]
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d100      	bne.n	8011102 <HAL_RCC_OscConfig+0x262>
 8011100:	e157      	b.n	80113b2 <HAL_RCC_OscConfig+0x512>
 8011102:	2b00      	cmp	r3, #0
 8011104:	d100      	bne.n	8011108 <HAL_RCC_OscConfig+0x268>
 8011106:	e139      	b.n	801137c <HAL_RCC_OscConfig+0x4dc>
 8011108:	2b05      	cmp	r3, #5
 801110a:	d100      	bne.n	801110e <HAL_RCC_OscConfig+0x26e>
 801110c:	e155      	b.n	80113ba <HAL_RCC_OscConfig+0x51a>
 801110e:	2201      	movs	r2, #1
 8011110:	6a2b      	ldr	r3, [r5, #32]
 8011112:	4393      	bics	r3, r2
 8011114:	622b      	str	r3, [r5, #32]
 8011116:	6a2b      	ldr	r3, [r5, #32]
 8011118:	3203      	adds	r2, #3
 801111a:	4393      	bics	r3, r2
 801111c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 801111e:	f7fe f9e1 	bl	800f4e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011122:	4e28      	ldr	r6, [pc, #160]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
      tickstart = HAL_GetTick();
 8011124:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011126:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011128:	4f2b      	ldr	r7, [pc, #172]	; (80111d8 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801112a:	e005      	b.n	8011138 <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801112c:	f7fe f9da 	bl	800f4e4 <HAL_GetTick>
 8011130:	4643      	mov	r3, r8
 8011132:	1ac0      	subs	r0, r0, r3
 8011134:	42b8      	cmp	r0, r7
 8011136:	d820      	bhi.n	801117a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011138:	6a33      	ldr	r3, [r6, #32]
 801113a:	421d      	tst	r5, r3
 801113c:	d0f6      	beq.n	801112c <HAL_RCC_OscConfig+0x28c>
 801113e:	6823      	ldr	r3, [r4, #0]
 8011140:	e732      	b.n	8010fa8 <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011142:	684a      	ldr	r2, [r1, #4]
 8011144:	21c0      	movs	r1, #192	; 0xc0
 8011146:	0249      	lsls	r1, r1, #9
 8011148:	400a      	ands	r2, r1
 801114a:	2180      	movs	r1, #128	; 0x80
 801114c:	0209      	lsls	r1, r1, #8
 801114e:	428a      	cmp	r2, r1
 8011150:	d000      	beq.n	8011154 <HAL_RCC_OscConfig+0x2b4>
 8011152:	e706      	b.n	8010f62 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011154:	4a1b      	ldr	r2, [pc, #108]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
 8011156:	6812      	ldr	r2, [r2, #0]
 8011158:	0792      	lsls	r2, r2, #30
 801115a:	d526      	bpl.n	80111aa <HAL_RCC_OscConfig+0x30a>
 801115c:	68e2      	ldr	r2, [r4, #12]
 801115e:	2a01      	cmp	r2, #1
 8011160:	d023      	beq.n	80111aa <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8011162:	2001      	movs	r0, #1
 8011164:	e00a      	b.n	801117c <HAL_RCC_OscConfig+0x2dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011166:	4a17      	ldr	r2, [pc, #92]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
 8011168:	6812      	ldr	r2, [r2, #0]
 801116a:	0392      	lsls	r2, r2, #14
 801116c:	d400      	bmi.n	8011170 <HAL_RCC_OscConfig+0x2d0>
 801116e:	e6eb      	b.n	8010f48 <HAL_RCC_OscConfig+0xa8>
 8011170:	6862      	ldr	r2, [r4, #4]
 8011172:	2a00      	cmp	r2, #0
 8011174:	d000      	beq.n	8011178 <HAL_RCC_OscConfig+0x2d8>
 8011176:	e6e7      	b.n	8010f48 <HAL_RCC_OscConfig+0xa8>
 8011178:	e7f3      	b.n	8011162 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 801117a:	2003      	movs	r0, #3
}
 801117c:	b002      	add	sp, #8
 801117e:	bc04      	pop	{r2}
 8011180:	4690      	mov	r8, r2
 8011182:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8011184:	2201      	movs	r2, #1
 8011186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011188:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 801118a:	4393      	bics	r3, r2
 801118c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 801118e:	f7fe f9a9 	bl	800f4e4 <HAL_GetTick>
 8011192:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011194:	e004      	b.n	80111a0 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011196:	f7fe f9a5 	bl	800f4e4 <HAL_GetTick>
 801119a:	1bc0      	subs	r0, r0, r7
 801119c:	2864      	cmp	r0, #100	; 0x64
 801119e:	d8ec      	bhi.n	801117a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80111a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80111a2:	421e      	tst	r6, r3
 80111a4:	d1f7      	bne.n	8011196 <HAL_RCC_OscConfig+0x2f6>
 80111a6:	6823      	ldr	r3, [r4, #0]
 80111a8:	e771      	b.n	801108e <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80111aa:	25f8      	movs	r5, #248	; 0xf8
 80111ac:	4805      	ldr	r0, [pc, #20]	; (80111c4 <HAL_RCC_OscConfig+0x324>)
 80111ae:	6922      	ldr	r2, [r4, #16]
 80111b0:	6801      	ldr	r1, [r0, #0]
 80111b2:	00d2      	lsls	r2, r2, #3
 80111b4:	43a9      	bics	r1, r5
 80111b6:	430a      	orrs	r2, r1
 80111b8:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80111ba:	071a      	lsls	r2, r3, #28
 80111bc:	d400      	bmi.n	80111c0 <HAL_RCC_OscConfig+0x320>
 80111be:	e6f1      	b.n	8010fa4 <HAL_RCC_OscConfig+0x104>
 80111c0:	e74e      	b.n	8011060 <HAL_RCC_OscConfig+0x1c0>
 80111c2:	46c0      	nop			; (mov r8, r8)
 80111c4:	40021000 	.word	0x40021000
 80111c8:	fffeffff 	.word	0xfffeffff
 80111cc:	fffbffff 	.word	0xfffbffff
 80111d0:	feffffff 	.word	0xfeffffff
 80111d4:	40007000 	.word	0x40007000
 80111d8:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 80111dc:	2201      	movs	r2, #1
 80111de:	4d7b      	ldr	r5, [pc, #492]	; (80113cc <HAL_RCC_OscConfig+0x52c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80111e0:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80111e2:	682b      	ldr	r3, [r5, #0]
 80111e4:	4393      	bics	r3, r2
 80111e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80111e8:	f7fe f97c 	bl	800f4e4 <HAL_GetTick>
 80111ec:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80111ee:	e004      	b.n	80111fa <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80111f0:	f7fe f978 	bl	800f4e4 <HAL_GetTick>
 80111f4:	1bc0      	subs	r0, r0, r7
 80111f6:	2864      	cmp	r0, #100	; 0x64
 80111f8:	d8bf      	bhi.n	801117a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80111fa:	682b      	ldr	r3, [r5, #0]
 80111fc:	421e      	tst	r6, r3
 80111fe:	d1f7      	bne.n	80111f0 <HAL_RCC_OscConfig+0x350>
 8011200:	6823      	ldr	r3, [r4, #0]
 8011202:	e6cd      	b.n	8010fa0 <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011204:	2204      	movs	r2, #4
 8011206:	4d71      	ldr	r5, [pc, #452]	; (80113cc <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011208:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 801120a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801120c:	4313      	orrs	r3, r2
 801120e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8011210:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011212:	3a03      	subs	r2, #3
 8011214:	4393      	bics	r3, r2
 8011216:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011218:	f7fe f964 	bl	800f4e4 <HAL_GetTick>
 801121c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801121e:	e004      	b.n	801122a <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011220:	f7fe f960 	bl	800f4e4 <HAL_GetTick>
 8011224:	1bc0      	subs	r0, r0, r7
 8011226:	2864      	cmp	r0, #100	; 0x64
 8011228:	d8a7      	bhi.n	801117a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801122a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801122c:	421e      	tst	r6, r3
 801122e:	d1f7      	bne.n	8011220 <HAL_RCC_OscConfig+0x380>
 8011230:	6823      	ldr	r3, [r4, #0]
 8011232:	e6ce      	b.n	8010fd2 <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011234:	2380      	movs	r3, #128	; 0x80
 8011236:	682a      	ldr	r2, [r5, #0]
 8011238:	02db      	lsls	r3, r3, #11
 801123a:	4313      	orrs	r3, r2
 801123c:	602b      	str	r3, [r5, #0]
 801123e:	2380      	movs	r3, #128	; 0x80
 8011240:	682a      	ldr	r2, [r5, #0]
 8011242:	025b      	lsls	r3, r3, #9
 8011244:	4313      	orrs	r3, r2
 8011246:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011248:	f7fe f94c 	bl	800f4e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801124c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 801124e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011250:	4e5e      	ldr	r6, [pc, #376]	; (80113cc <HAL_RCC_OscConfig+0x52c>)
 8011252:	02ad      	lsls	r5, r5, #10
 8011254:	e005      	b.n	8011262 <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011256:	f7fe f945 	bl	800f4e4 <HAL_GetTick>
 801125a:	1bc0      	subs	r0, r0, r7
 801125c:	2864      	cmp	r0, #100	; 0x64
 801125e:	d900      	bls.n	8011262 <HAL_RCC_OscConfig+0x3c2>
 8011260:	e78b      	b.n	801117a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011262:	6833      	ldr	r3, [r6, #0]
 8011264:	422b      	tst	r3, r5
 8011266:	d0f6      	beq.n	8011256 <HAL_RCC_OscConfig+0x3b6>
 8011268:	6823      	ldr	r3, [r4, #0]
 801126a:	e66d      	b.n	8010f48 <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 801126c:	22c0      	movs	r2, #192	; 0xc0
 801126e:	684b      	ldr	r3, [r1, #4]
 8011270:	0252      	lsls	r2, r2, #9
 8011272:	4013      	ands	r3, r2
 8011274:	4293      	cmp	r3, r2
 8011276:	d000      	beq.n	801127a <HAL_RCC_OscConfig+0x3da>
 8011278:	e6b9      	b.n	8010fee <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801127a:	4b54      	ldr	r3, [pc, #336]	; (80113cc <HAL_RCC_OscConfig+0x52c>)
 801127c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801127e:	03db      	lsls	r3, r3, #15
 8011280:	d400      	bmi.n	8011284 <HAL_RCC_OscConfig+0x3e4>
 8011282:	e6cb      	b.n	801101c <HAL_RCC_OscConfig+0x17c>
 8011284:	69e3      	ldr	r3, [r4, #28]
 8011286:	2b01      	cmp	r3, #1
 8011288:	d100      	bne.n	801128c <HAL_RCC_OscConfig+0x3ec>
 801128a:	e6c7      	b.n	801101c <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 801128c:	2001      	movs	r0, #1
 801128e:	e775      	b.n	801117c <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011290:	2b05      	cmp	r3, #5
 8011292:	d0cf      	beq.n	8011234 <HAL_RCC_OscConfig+0x394>
 8011294:	682b      	ldr	r3, [r5, #0]
 8011296:	4a4e      	ldr	r2, [pc, #312]	; (80113d0 <HAL_RCC_OscConfig+0x530>)
 8011298:	4013      	ands	r3, r2
 801129a:	602b      	str	r3, [r5, #0]
 801129c:	682b      	ldr	r3, [r5, #0]
 801129e:	4a4d      	ldr	r2, [pc, #308]	; (80113d4 <HAL_RCC_OscConfig+0x534>)
 80112a0:	4013      	ands	r3, r2
 80112a2:	602b      	str	r3, [r5, #0]
 80112a4:	e7d0      	b.n	8011248 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI48_DISABLE();
 80112a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80112a8:	4a49      	ldr	r2, [pc, #292]	; (80113d0 <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80112aa:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80112ac:	4013      	ands	r3, r2
 80112ae:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80112b0:	f7fe f918 	bl	800f4e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80112b4:	0276      	lsls	r6, r6, #9
        tickstart = HAL_GetTick();
 80112b6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80112b8:	e005      	b.n	80112c6 <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80112ba:	f7fe f913 	bl	800f4e4 <HAL_GetTick>
 80112be:	1bc0      	subs	r0, r0, r7
 80112c0:	2864      	cmp	r0, #100	; 0x64
 80112c2:	d900      	bls.n	80112c6 <HAL_RCC_OscConfig+0x426>
 80112c4:	e759      	b.n	801117a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80112c6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80112c8:	4233      	tst	r3, r6
 80112ca:	d1f6      	bne.n	80112ba <HAL_RCC_OscConfig+0x41a>
 80112cc:	e6a6      	b.n	801101c <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 80112ce:	2104      	movs	r1, #4
 80112d0:	4d3e      	ldr	r5, [pc, #248]	; (80113cc <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80112d2:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80112d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80112d6:	430b      	orrs	r3, r1
 80112d8:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80112da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80112dc:	431a      	orrs	r2, r3
 80112de:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80112e0:	f7fe f900 	bl	800f4e4 <HAL_GetTick>
 80112e4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80112e6:	e005      	b.n	80112f4 <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80112e8:	f7fe f8fc 	bl	800f4e4 <HAL_GetTick>
 80112ec:	1bc0      	subs	r0, r0, r7
 80112ee:	2864      	cmp	r0, #100	; 0x64
 80112f0:	d900      	bls.n	80112f4 <HAL_RCC_OscConfig+0x454>
 80112f2:	e742      	b.n	801117a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80112f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80112f6:	421e      	tst	r6, r3
 80112f8:	d0f6      	beq.n	80112e8 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80112fa:	21f8      	movs	r1, #248	; 0xf8
 80112fc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80112fe:	69a3      	ldr	r3, [r4, #24]
 8011300:	438a      	bics	r2, r1
 8011302:	00db      	lsls	r3, r3, #3
 8011304:	4313      	orrs	r3, r2
 8011306:	636b      	str	r3, [r5, #52]	; 0x34
 8011308:	6823      	ldr	r3, [r4, #0]
 801130a:	e662      	b.n	8010fd2 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 801130c:	682b      	ldr	r3, [r5, #0]
 801130e:	4a32      	ldr	r2, [pc, #200]	; (80113d8 <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011310:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8011312:	4013      	ands	r3, r2
 8011314:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011316:	f7fe f8e5 	bl	800f4e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801131a:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 801131c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801131e:	e005      	b.n	801132c <HAL_RCC_OscConfig+0x48c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011320:	f7fe f8e0 	bl	800f4e4 <HAL_GetTick>
 8011324:	1bc0      	subs	r0, r0, r7
 8011326:	2864      	cmp	r0, #100	; 0x64
 8011328:	d900      	bls.n	801132c <HAL_RCC_OscConfig+0x48c>
 801132a:	e726      	b.n	801117a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801132c:	682b      	ldr	r3, [r5, #0]
 801132e:	4233      	tst	r3, r6
 8011330:	d1f6      	bne.n	8011320 <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011332:	220f      	movs	r2, #15
 8011334:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8011336:	4393      	bics	r3, r2
 8011338:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801133a:	4313      	orrs	r3, r2
 801133c:	62eb      	str	r3, [r5, #44]	; 0x2c
 801133e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011340:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011342:	686a      	ldr	r2, [r5, #4]
 8011344:	430b      	orrs	r3, r1
 8011346:	4925      	ldr	r1, [pc, #148]	; (80113dc <HAL_RCC_OscConfig+0x53c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011348:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801134a:	400a      	ands	r2, r1
 801134c:	4313      	orrs	r3, r2
 801134e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8011350:	2380      	movs	r3, #128	; 0x80
 8011352:	682a      	ldr	r2, [r5, #0]
 8011354:	045b      	lsls	r3, r3, #17
 8011356:	4313      	orrs	r3, r2
 8011358:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801135a:	f7fe f8c3 	bl	800f4e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801135e:	4d1b      	ldr	r5, [pc, #108]	; (80113cc <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 8011360:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011362:	04a4      	lsls	r4, r4, #18
 8011364:	e005      	b.n	8011372 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011366:	f7fe f8bd 	bl	800f4e4 <HAL_GetTick>
 801136a:	1b80      	subs	r0, r0, r6
 801136c:	2864      	cmp	r0, #100	; 0x64
 801136e:	d900      	bls.n	8011372 <HAL_RCC_OscConfig+0x4d2>
 8011370:	e703      	b.n	801117a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011372:	682b      	ldr	r3, [r5, #0]
 8011374:	4223      	tst	r3, r4
 8011376:	d0f6      	beq.n	8011366 <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 8011378:	2000      	movs	r0, #0
 801137a:	e6ff      	b.n	801117c <HAL_RCC_OscConfig+0x2dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801137c:	2201      	movs	r2, #1
 801137e:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011380:	4e12      	ldr	r6, [pc, #72]	; (80113cc <HAL_RCC_OscConfig+0x52c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011382:	4393      	bics	r3, r2
 8011384:	622b      	str	r3, [r5, #32]
 8011386:	6a2b      	ldr	r3, [r5, #32]
 8011388:	3203      	adds	r2, #3
 801138a:	4393      	bics	r3, r2
 801138c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 801138e:	f7fe f8a9 	bl	800f4e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011392:	2502      	movs	r5, #2
      tickstart = HAL_GetTick();
 8011394:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011396:	4f12      	ldr	r7, [pc, #72]	; (80113e0 <HAL_RCC_OscConfig+0x540>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011398:	e006      	b.n	80113a8 <HAL_RCC_OscConfig+0x508>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801139a:	f7fe f8a3 	bl	800f4e4 <HAL_GetTick>
 801139e:	4643      	mov	r3, r8
 80113a0:	1ac0      	subs	r0, r0, r3
 80113a2:	42b8      	cmp	r0, r7
 80113a4:	d900      	bls.n	80113a8 <HAL_RCC_OscConfig+0x508>
 80113a6:	e6e8      	b.n	801117a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80113a8:	6a33      	ldr	r3, [r6, #32]
 80113aa:	421d      	tst	r5, r3
 80113ac:	d1f5      	bne.n	801139a <HAL_RCC_OscConfig+0x4fa>
 80113ae:	6823      	ldr	r3, [r4, #0]
 80113b0:	e5fa      	b.n	8010fa8 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80113b2:	6a2a      	ldr	r2, [r5, #32]
 80113b4:	4313      	orrs	r3, r2
 80113b6:	622b      	str	r3, [r5, #32]
 80113b8:	e6b1      	b.n	801111e <HAL_RCC_OscConfig+0x27e>
 80113ba:	2204      	movs	r2, #4
 80113bc:	6a2b      	ldr	r3, [r5, #32]
 80113be:	4313      	orrs	r3, r2
 80113c0:	622b      	str	r3, [r5, #32]
 80113c2:	6a2b      	ldr	r3, [r5, #32]
 80113c4:	3a03      	subs	r2, #3
 80113c6:	4313      	orrs	r3, r2
 80113c8:	622b      	str	r3, [r5, #32]
 80113ca:	e6a8      	b.n	801111e <HAL_RCC_OscConfig+0x27e>
 80113cc:	40021000 	.word	0x40021000
 80113d0:	fffeffff 	.word	0xfffeffff
 80113d4:	fffbffff 	.word	0xfffbffff
 80113d8:	feffffff 	.word	0xfeffffff
 80113dc:	ffc27fff 	.word	0xffc27fff
 80113e0:	00001388 	.word	0x00001388

080113e4 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80113e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113e6:	46ce      	mov	lr, r9
 80113e8:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80113ea:	2301      	movs	r3, #1
{
 80113ec:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80113ee:	4985      	ldr	r1, [pc, #532]	; (8011604 <HAL_RCC_ClockConfig+0x220>)
{
 80113f0:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80113f2:	680a      	ldr	r2, [r1, #0]
{
 80113f4:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80113f6:	401a      	ands	r2, r3
 80113f8:	42a2      	cmp	r2, r4
 80113fa:	d20c      	bcs.n	8011416 <HAL_RCC_ClockConfig+0x32>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80113fc:	680a      	ldr	r2, [r1, #0]
 80113fe:	439a      	bics	r2, r3
 8011400:	4322      	orrs	r2, r4
 8011402:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011404:	680a      	ldr	r2, [r1, #0]
 8011406:	4013      	ands	r3, r2
 8011408:	42a3      	cmp	r3, r4
 801140a:	d054      	beq.n	80114b6 <HAL_RCC_ClockConfig+0xd2>
    {
      return HAL_ERROR;
 801140c:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 801140e:	bc0c      	pop	{r2, r3}
 8011410:	4690      	mov	r8, r2
 8011412:	4699      	mov	r9, r3
 8011414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011416:	6803      	ldr	r3, [r0, #0]
 8011418:	079a      	lsls	r2, r3, #30
 801141a:	d506      	bpl.n	801142a <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801141c:	20f0      	movs	r0, #240	; 0xf0
 801141e:	497a      	ldr	r1, [pc, #488]	; (8011608 <HAL_RCC_ClockConfig+0x224>)
 8011420:	684a      	ldr	r2, [r1, #4]
 8011422:	4382      	bics	r2, r0
 8011424:	68a8      	ldr	r0, [r5, #8]
 8011426:	4302      	orrs	r2, r0
 8011428:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801142a:	07db      	lsls	r3, r3, #31
 801142c:	d52a      	bpl.n	8011484 <HAL_RCC_ClockConfig+0xa0>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801142e:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011430:	4a75      	ldr	r2, [pc, #468]	; (8011608 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011432:	2b01      	cmp	r3, #1
 8011434:	d073      	beq.n	801151e <HAL_RCC_ClockConfig+0x13a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011436:	2b02      	cmp	r3, #2
 8011438:	d075      	beq.n	8011526 <HAL_RCC_ClockConfig+0x142>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801143a:	2b03      	cmp	r3, #3
 801143c:	d100      	bne.n	8011440 <HAL_RCC_ClockConfig+0x5c>
 801143e:	e09c      	b.n	801157a <HAL_RCC_ClockConfig+0x196>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011440:	6812      	ldr	r2, [r2, #0]
 8011442:	0792      	lsls	r2, r2, #30
 8011444:	d5e2      	bpl.n	801140c <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011446:	2103      	movs	r1, #3
 8011448:	4e6f      	ldr	r6, [pc, #444]	; (8011608 <HAL_RCC_ClockConfig+0x224>)
 801144a:	6872      	ldr	r2, [r6, #4]
 801144c:	438a      	bics	r2, r1
 801144e:	4313      	orrs	r3, r2
 8011450:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 8011452:	f7fe f847 	bl	800f4e4 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011456:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8011458:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801145a:	2b01      	cmp	r3, #1
 801145c:	d07d      	beq.n	801155a <HAL_RCC_ClockConfig+0x176>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801145e:	2b02      	cmp	r3, #2
 8011460:	d100      	bne.n	8011464 <HAL_RCC_ClockConfig+0x80>
 8011462:	e093      	b.n	801158c <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011464:	2b03      	cmp	r3, #3
 8011466:	d066      	beq.n	8011536 <HAL_RCC_ClockConfig+0x152>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011468:	230c      	movs	r3, #12
 801146a:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801146c:	4b67      	ldr	r3, [pc, #412]	; (801160c <HAL_RCC_ClockConfig+0x228>)
 801146e:	4699      	mov	r9, r3
 8011470:	e004      	b.n	801147c <HAL_RCC_ClockConfig+0x98>
 8011472:	f7fe f837 	bl	800f4e4 <HAL_GetTick>
 8011476:	1bc0      	subs	r0, r0, r7
 8011478:	4548      	cmp	r0, r9
 801147a:	d86c      	bhi.n	8011556 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801147c:	4642      	mov	r2, r8
 801147e:	6873      	ldr	r3, [r6, #4]
 8011480:	421a      	tst	r2, r3
 8011482:	d1f6      	bne.n	8011472 <HAL_RCC_ClockConfig+0x8e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011484:	2201      	movs	r2, #1
 8011486:	495f      	ldr	r1, [pc, #380]	; (8011604 <HAL_RCC_ClockConfig+0x220>)
 8011488:	680b      	ldr	r3, [r1, #0]
 801148a:	4393      	bics	r3, r2
 801148c:	4323      	orrs	r3, r4
 801148e:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011490:	680b      	ldr	r3, [r1, #0]
 8011492:	401a      	ands	r2, r3
 8011494:	42a2      	cmp	r2, r4
 8011496:	d1b9      	bne.n	801140c <HAL_RCC_ClockConfig+0x28>
 8011498:	682b      	ldr	r3, [r5, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801149a:	075b      	lsls	r3, r3, #29
 801149c:	d506      	bpl.n	80114ac <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 801149e:	4a5a      	ldr	r2, [pc, #360]	; (8011608 <HAL_RCC_ClockConfig+0x224>)
 80114a0:	495b      	ldr	r1, [pc, #364]	; (8011610 <HAL_RCC_ClockConfig+0x22c>)
 80114a2:	6853      	ldr	r3, [r2, #4]
 80114a4:	400b      	ands	r3, r1
 80114a6:	68e9      	ldr	r1, [r5, #12]
 80114a8:	430b      	orrs	r3, r1
 80114aa:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 80114ac:	2000      	movs	r0, #0
 80114ae:	f7fd ffef 	bl	800f490 <HAL_InitTick>
  return HAL_OK;
 80114b2:	2000      	movs	r0, #0
 80114b4:	e7ab      	b.n	801140e <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80114b6:	6803      	ldr	r3, [r0, #0]
 80114b8:	079a      	lsls	r2, r3, #30
 80114ba:	d506      	bpl.n	80114ca <HAL_RCC_ClockConfig+0xe6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80114bc:	20f0      	movs	r0, #240	; 0xf0
 80114be:	4952      	ldr	r1, [pc, #328]	; (8011608 <HAL_RCC_ClockConfig+0x224>)
 80114c0:	684a      	ldr	r2, [r1, #4]
 80114c2:	4382      	bics	r2, r0
 80114c4:	68a8      	ldr	r0, [r5, #8]
 80114c6:	4302      	orrs	r2, r0
 80114c8:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80114ca:	07da      	lsls	r2, r3, #31
 80114cc:	d5e5      	bpl.n	801149a <HAL_RCC_ClockConfig+0xb6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114ce:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80114d0:	4a4d      	ldr	r2, [pc, #308]	; (8011608 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114d2:	2b01      	cmp	r3, #1
 80114d4:	d056      	beq.n	8011584 <HAL_RCC_ClockConfig+0x1a0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80114d6:	2b02      	cmp	r3, #2
 80114d8:	d029      	beq.n	801152e <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80114da:	2b03      	cmp	r3, #3
 80114dc:	d073      	beq.n	80115c6 <HAL_RCC_ClockConfig+0x1e2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80114de:	6812      	ldr	r2, [r2, #0]
 80114e0:	0792      	lsls	r2, r2, #30
 80114e2:	d593      	bpl.n	801140c <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80114e4:	2103      	movs	r1, #3
 80114e6:	4c48      	ldr	r4, [pc, #288]	; (8011608 <HAL_RCC_ClockConfig+0x224>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80114e8:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80114ea:	6862      	ldr	r2, [r4, #4]
 80114ec:	438a      	bics	r2, r1
 80114ee:	4313      	orrs	r3, r2
 80114f0:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 80114f2:	f7fd fff7 	bl	800f4e4 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114f6:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 80114f8:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114fa:	2b01      	cmp	r3, #1
 80114fc:	d056      	beq.n	80115ac <HAL_RCC_ClockConfig+0x1c8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80114fe:	2b02      	cmp	r3, #2
 8011500:	d065      	beq.n	80115ce <HAL_RCC_ClockConfig+0x1ea>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011502:	2b03      	cmp	r3, #3
 8011504:	d070      	beq.n	80115e8 <HAL_RCC_ClockConfig+0x204>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011506:	4b41      	ldr	r3, [pc, #260]	; (801160c <HAL_RCC_ClockConfig+0x228>)
 8011508:	4698      	mov	r8, r3
 801150a:	e004      	b.n	8011516 <HAL_RCC_ClockConfig+0x132>
 801150c:	f7fd ffea 	bl	800f4e4 <HAL_GetTick>
 8011510:	1b80      	subs	r0, r0, r6
 8011512:	4540      	cmp	r0, r8
 8011514:	d81f      	bhi.n	8011556 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011516:	6863      	ldr	r3, [r4, #4]
 8011518:	421f      	tst	r7, r3
 801151a:	d1f7      	bne.n	801150c <HAL_RCC_ClockConfig+0x128>
 801151c:	e7bc      	b.n	8011498 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801151e:	6812      	ldr	r2, [r2, #0]
 8011520:	0392      	lsls	r2, r2, #14
 8011522:	d490      	bmi.n	8011446 <HAL_RCC_ClockConfig+0x62>
 8011524:	e772      	b.n	801140c <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011526:	6812      	ldr	r2, [r2, #0]
 8011528:	0192      	lsls	r2, r2, #6
 801152a:	d48c      	bmi.n	8011446 <HAL_RCC_ClockConfig+0x62>
 801152c:	e76e      	b.n	801140c <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801152e:	6812      	ldr	r2, [r2, #0]
 8011530:	0192      	lsls	r2, r2, #6
 8011532:	d4d7      	bmi.n	80114e4 <HAL_RCC_ClockConfig+0x100>
 8011534:	e76a      	b.n	801140c <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011536:	3309      	adds	r3, #9
 8011538:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801153a:	4b34      	ldr	r3, [pc, #208]	; (801160c <HAL_RCC_ClockConfig+0x228>)
 801153c:	4699      	mov	r9, r3
 801153e:	e004      	b.n	801154a <HAL_RCC_ClockConfig+0x166>
 8011540:	f7fd ffd0 	bl	800f4e4 <HAL_GetTick>
 8011544:	1bc0      	subs	r0, r0, r7
 8011546:	4548      	cmp	r0, r9
 8011548:	d805      	bhi.n	8011556 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801154a:	4642      	mov	r2, r8
 801154c:	6873      	ldr	r3, [r6, #4]
 801154e:	4013      	ands	r3, r2
 8011550:	2b0c      	cmp	r3, #12
 8011552:	d1f5      	bne.n	8011540 <HAL_RCC_ClockConfig+0x15c>
 8011554:	e796      	b.n	8011484 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8011556:	2003      	movs	r0, #3
 8011558:	e759      	b.n	801140e <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801155a:	330b      	adds	r3, #11
 801155c:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801155e:	4b2b      	ldr	r3, [pc, #172]	; (801160c <HAL_RCC_ClockConfig+0x228>)
 8011560:	4699      	mov	r9, r3
 8011562:	e004      	b.n	801156e <HAL_RCC_ClockConfig+0x18a>
 8011564:	f7fd ffbe 	bl	800f4e4 <HAL_GetTick>
 8011568:	1bc0      	subs	r0, r0, r7
 801156a:	4548      	cmp	r0, r9
 801156c:	d8f3      	bhi.n	8011556 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801156e:	4642      	mov	r2, r8
 8011570:	6873      	ldr	r3, [r6, #4]
 8011572:	4013      	ands	r3, r2
 8011574:	2b04      	cmp	r3, #4
 8011576:	d1f5      	bne.n	8011564 <HAL_RCC_ClockConfig+0x180>
 8011578:	e784      	b.n	8011484 <HAL_RCC_ClockConfig+0xa0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801157a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801157c:	03d2      	lsls	r2, r2, #15
 801157e:	d500      	bpl.n	8011582 <HAL_RCC_ClockConfig+0x19e>
 8011580:	e761      	b.n	8011446 <HAL_RCC_ClockConfig+0x62>
 8011582:	e743      	b.n	801140c <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011584:	6812      	ldr	r2, [r2, #0]
 8011586:	0392      	lsls	r2, r2, #14
 8011588:	d4ac      	bmi.n	80114e4 <HAL_RCC_ClockConfig+0x100>
 801158a:	e73f      	b.n	801140c <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801158c:	330a      	adds	r3, #10
 801158e:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011590:	4b1e      	ldr	r3, [pc, #120]	; (801160c <HAL_RCC_ClockConfig+0x228>)
 8011592:	4699      	mov	r9, r3
 8011594:	e004      	b.n	80115a0 <HAL_RCC_ClockConfig+0x1bc>
 8011596:	f7fd ffa5 	bl	800f4e4 <HAL_GetTick>
 801159a:	1bc0      	subs	r0, r0, r7
 801159c:	4548      	cmp	r0, r9
 801159e:	d8da      	bhi.n	8011556 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80115a0:	4642      	mov	r2, r8
 80115a2:	6873      	ldr	r3, [r6, #4]
 80115a4:	4013      	ands	r3, r2
 80115a6:	2b08      	cmp	r3, #8
 80115a8:	d1f5      	bne.n	8011596 <HAL_RCC_ClockConfig+0x1b2>
 80115aa:	e76b      	b.n	8011484 <HAL_RCC_ClockConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115ac:	4b17      	ldr	r3, [pc, #92]	; (801160c <HAL_RCC_ClockConfig+0x228>)
 80115ae:	4698      	mov	r8, r3
 80115b0:	e004      	b.n	80115bc <HAL_RCC_ClockConfig+0x1d8>
 80115b2:	f7fd ff97 	bl	800f4e4 <HAL_GetTick>
 80115b6:	1b80      	subs	r0, r0, r6
 80115b8:	4540      	cmp	r0, r8
 80115ba:	d8cc      	bhi.n	8011556 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80115bc:	6863      	ldr	r3, [r4, #4]
 80115be:	403b      	ands	r3, r7
 80115c0:	2b04      	cmp	r3, #4
 80115c2:	d1f6      	bne.n	80115b2 <HAL_RCC_ClockConfig+0x1ce>
 80115c4:	e768      	b.n	8011498 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80115c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80115c8:	03d2      	lsls	r2, r2, #15
 80115ca:	d48b      	bmi.n	80114e4 <HAL_RCC_ClockConfig+0x100>
 80115cc:	e71e      	b.n	801140c <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115ce:	4b0f      	ldr	r3, [pc, #60]	; (801160c <HAL_RCC_ClockConfig+0x228>)
 80115d0:	4698      	mov	r8, r3
 80115d2:	e004      	b.n	80115de <HAL_RCC_ClockConfig+0x1fa>
 80115d4:	f7fd ff86 	bl	800f4e4 <HAL_GetTick>
 80115d8:	1b80      	subs	r0, r0, r6
 80115da:	4540      	cmp	r0, r8
 80115dc:	d8bb      	bhi.n	8011556 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80115de:	6863      	ldr	r3, [r4, #4]
 80115e0:	403b      	ands	r3, r7
 80115e2:	2b08      	cmp	r3, #8
 80115e4:	d1f6      	bne.n	80115d4 <HAL_RCC_ClockConfig+0x1f0>
 80115e6:	e757      	b.n	8011498 <HAL_RCC_ClockConfig+0xb4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115e8:	4b08      	ldr	r3, [pc, #32]	; (801160c <HAL_RCC_ClockConfig+0x228>)
 80115ea:	4698      	mov	r8, r3
 80115ec:	e004      	b.n	80115f8 <HAL_RCC_ClockConfig+0x214>
 80115ee:	f7fd ff79 	bl	800f4e4 <HAL_GetTick>
 80115f2:	1b80      	subs	r0, r0, r6
 80115f4:	4540      	cmp	r0, r8
 80115f6:	d8ae      	bhi.n	8011556 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80115f8:	6863      	ldr	r3, [r4, #4]
 80115fa:	403b      	ands	r3, r7
 80115fc:	2b0c      	cmp	r3, #12
 80115fe:	d1f6      	bne.n	80115ee <HAL_RCC_ClockConfig+0x20a>
 8011600:	e74a      	b.n	8011498 <HAL_RCC_ClockConfig+0xb4>
 8011602:	46c0      	nop			; (mov r8, r8)
 8011604:	40022000 	.word	0x40022000
 8011608:	40021000 	.word	0x40021000
 801160c:	00001388 	.word	0x00001388
 8011610:	fffff8ff 	.word	0xfffff8ff

08011614 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011614:	b570      	push	{r4, r5, r6, lr}
 8011616:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011618:	4669      	mov	r1, sp
 801161a:	4b1c      	ldr	r3, [pc, #112]	; (801168c <HAL_RCC_GetSysClockFreq+0x78>)
 801161c:	000a      	movs	r2, r1
 801161e:	0018      	movs	r0, r3
 8011620:	c870      	ldmia	r0!, {r4, r5, r6}
 8011622:	c270      	stmia	r2!, {r4, r5, r6}
 8011624:	6800      	ldr	r0, [r0, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011626:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011628:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 801162a:	aa04      	add	r2, sp, #16
 801162c:	0010      	movs	r0, r2
 801162e:	cb70      	ldmia	r3!, {r4, r5, r6}
 8011630:	c070      	stmia	r0!, {r4, r5, r6}
 8011632:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8011634:	4d16      	ldr	r5, [pc, #88]	; (8011690 <HAL_RCC_GetSysClockFreq+0x7c>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011636:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011638:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 801163a:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 801163c:	4018      	ands	r0, r3
 801163e:	2808      	cmp	r0, #8
 8011640:	d00a      	beq.n	8011658 <HAL_RCC_GetSysClockFreq+0x44>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8011642:	380c      	subs	r0, #12
 8011644:	4243      	negs	r3, r0
 8011646:	4158      	adcs	r0, r3
 8011648:	4b12      	ldr	r3, [pc, #72]	; (8011694 <HAL_RCC_GetSysClockFreq+0x80>)
 801164a:	4240      	negs	r0, r0
 801164c:	4018      	ands	r0, r3
 801164e:	4b12      	ldr	r3, [pc, #72]	; (8011698 <HAL_RCC_GetSysClockFreq+0x84>)
 8011650:	469c      	mov	ip, r3
 8011652:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011654:	b008      	add	sp, #32
 8011656:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8011658:	200f      	movs	r0, #15
 801165a:	0c9c      	lsrs	r4, r3, #18
 801165c:	4004      	ands	r4, r0
 801165e:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011660:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8011662:	4008      	ands	r0, r1
 8011664:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8011666:	22c0      	movs	r2, #192	; 0xc0
 8011668:	2080      	movs	r0, #128	; 0x80
 801166a:	0252      	lsls	r2, r2, #9
 801166c:	4013      	ands	r3, r2
 801166e:	0240      	lsls	r0, r0, #9
 8011670:	4283      	cmp	r3, r0
 8011672:	d001      	beq.n	8011678 <HAL_RCC_GetSysClockFreq+0x64>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8011674:	4293      	cmp	r3, r2
 8011676:	d004      	beq.n	8011682 <HAL_RCC_GetSysClockFreq+0x6e>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8011678:	4807      	ldr	r0, [pc, #28]	; (8011698 <HAL_RCC_GetSysClockFreq+0x84>)
 801167a:	f7ee fd69 	bl	8000150 <__udivsi3>
 801167e:	4360      	muls	r0, r4
 8011680:	e7e8      	b.n	8011654 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8011682:	4806      	ldr	r0, [pc, #24]	; (801169c <HAL_RCC_GetSysClockFreq+0x88>)
 8011684:	f7ee fd64 	bl	8000150 <__udivsi3>
 8011688:	4360      	muls	r0, r4
 801168a:	e7e3      	b.n	8011654 <HAL_RCC_GetSysClockFreq+0x40>
 801168c:	08017b30 	.word	0x08017b30
 8011690:	40021000 	.word	0x40021000
 8011694:	02625a00 	.word	0x02625a00
 8011698:	007a1200 	.word	0x007a1200
 801169c:	02dc6c00 	.word	0x02dc6c00

080116a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80116a0:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80116a2:	f7ff ffb7 	bl	8011614 <HAL_RCC_GetSysClockFreq>
 80116a6:	4b05      	ldr	r3, [pc, #20]	; (80116bc <HAL_RCC_GetHCLKFreq+0x1c>)
 80116a8:	4a05      	ldr	r2, [pc, #20]	; (80116c0 <HAL_RCC_GetHCLKFreq+0x20>)
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	3220      	adds	r2, #32
 80116ae:	061b      	lsls	r3, r3, #24
 80116b0:	0f1b      	lsrs	r3, r3, #28
 80116b2:	5cd3      	ldrb	r3, [r2, r3]
 80116b4:	40d8      	lsrs	r0, r3
 80116b6:	4b03      	ldr	r3, [pc, #12]	; (80116c4 <HAL_RCC_GetHCLKFreq+0x24>)
 80116b8:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80116ba:	bd10      	pop	{r4, pc}
 80116bc:	40021000 	.word	0x40021000
 80116c0:	08017b30 	.word	0x08017b30
 80116c4:	200000c0 	.word	0x200000c0

080116c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80116c8:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80116ca:	f7ff ffa3 	bl	8011614 <HAL_RCC_GetSysClockFreq>
 80116ce:	4908      	ldr	r1, [pc, #32]	; (80116f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80116d0:	4a08      	ldr	r2, [pc, #32]	; (80116f4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80116d2:	684b      	ldr	r3, [r1, #4]
 80116d4:	3220      	adds	r2, #32
 80116d6:	061b      	lsls	r3, r3, #24
 80116d8:	0f1b      	lsrs	r3, r3, #28
 80116da:	5cd3      	ldrb	r3, [r2, r3]
 80116dc:	40d8      	lsrs	r0, r3
 80116de:	4b06      	ldr	r3, [pc, #24]	; (80116f8 <HAL_RCC_GetPCLK1Freq+0x30>)
 80116e0:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 80116e2:	684b      	ldr	r3, [r1, #4]
 80116e4:	055b      	lsls	r3, r3, #21
 80116e6:	0f5b      	lsrs	r3, r3, #29
 80116e8:	5cd3      	ldrb	r3, [r2, r3]
 80116ea:	40d8      	lsrs	r0, r3
}    
 80116ec:	bd10      	pop	{r4, pc}
 80116ee:	46c0      	nop			; (mov r8, r8)
 80116f0:	40021000 	.word	0x40021000
 80116f4:	08017b30 	.word	0x08017b30
 80116f8:	200000c0 	.word	0x200000c0

080116fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80116fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116fe:	46c6      	mov	lr, r8
 8011700:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011702:	6803      	ldr	r3, [r0, #0]
{
 8011704:	b082      	sub	sp, #8
 8011706:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011708:	03da      	lsls	r2, r3, #15
 801170a:	d507      	bpl.n	801171c <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801170c:	493e      	ldr	r1, [pc, #248]	; (8011808 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801170e:	6840      	ldr	r0, [r0, #4]
 8011710:	6a0a      	ldr	r2, [r1, #32]
 8011712:	4042      	eors	r2, r0
 8011714:	20c0      	movs	r0, #192	; 0xc0
 8011716:	0080      	lsls	r0, r0, #2
 8011718:	4202      	tst	r2, r0
 801171a:	d131      	bne.n	8011780 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801171c:	07da      	lsls	r2, r3, #31
 801171e:	d506      	bpl.n	801172e <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011720:	2003      	movs	r0, #3
 8011722:	4939      	ldr	r1, [pc, #228]	; (8011808 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011724:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011726:	4382      	bics	r2, r0
 8011728:	68a0      	ldr	r0, [r4, #8]
 801172a:	4302      	orrs	r2, r0
 801172c:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801172e:	079a      	lsls	r2, r3, #30
 8011730:	d506      	bpl.n	8011740 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011732:	4935      	ldr	r1, [pc, #212]	; (8011808 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011734:	4835      	ldr	r0, [pc, #212]	; (801180c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8011736:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011738:	4002      	ands	r2, r0
 801173a:	68e0      	ldr	r0, [r4, #12]
 801173c:	4302      	orrs	r2, r0
 801173e:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011740:	035a      	lsls	r2, r3, #13
 8011742:	d506      	bpl.n	8011752 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011744:	4930      	ldr	r1, [pc, #192]	; (8011808 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011746:	4832      	ldr	r0, [pc, #200]	; (8011810 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011748:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 801174a:	4002      	ands	r2, r0
 801174c:	6920      	ldr	r0, [r4, #16]
 801174e:	4302      	orrs	r2, r0
 8011750:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011752:	069a      	lsls	r2, r3, #26
 8011754:	d506      	bpl.n	8011764 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011756:	2010      	movs	r0, #16
 8011758:	492b      	ldr	r1, [pc, #172]	; (8011808 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801175a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 801175c:	4382      	bics	r2, r0
 801175e:	6960      	ldr	r0, [r4, #20]
 8011760:	4302      	orrs	r2, r0
 8011762:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8011764:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011766:	055b      	lsls	r3, r3, #21
 8011768:	d506      	bpl.n	8011778 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801176a:	2140      	movs	r1, #64	; 0x40
 801176c:	4a26      	ldr	r2, [pc, #152]	; (8011808 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801176e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011770:	438b      	bics	r3, r1
 8011772:	69a1      	ldr	r1, [r4, #24]
 8011774:	430b      	orrs	r3, r1
 8011776:	6313      	str	r3, [r2, #48]	; 0x30
}
 8011778:	b002      	add	sp, #8
 801177a:	bc04      	pop	{r2}
 801177c:	4690      	mov	r8, r2
 801177e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8011780:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011782:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8011784:	69ca      	ldr	r2, [r1, #28]
 8011786:	0540      	lsls	r0, r0, #21
 8011788:	4302      	orrs	r2, r0
 801178a:	61ca      	str	r2, [r1, #28]
 801178c:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801178e:	4d21      	ldr	r5, [pc, #132]	; (8011814 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8011790:	4003      	ands	r3, r0
 8011792:	9301      	str	r3, [sp, #4]
 8011794:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011796:	682b      	ldr	r3, [r5, #0]
 8011798:	0076      	lsls	r6, r6, #1
 801179a:	4333      	orrs	r3, r6
 801179c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 801179e:	f7fd fea1 	bl	800f4e4 <HAL_GetTick>
 80117a2:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80117a4:	e004      	b.n	80117b0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80117a6:	f7fd fe9d 	bl	800f4e4 <HAL_GetTick>
 80117aa:	1bc0      	subs	r0, r0, r7
 80117ac:	2864      	cmp	r0, #100	; 0x64
 80117ae:	d829      	bhi.n	8011804 <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80117b0:	682b      	ldr	r3, [r5, #0]
 80117b2:	4233      	tst	r3, r6
 80117b4:	d0f7      	beq.n	80117a6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 80117b6:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80117b8:	4d13      	ldr	r5, [pc, #76]	; (8011808 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 80117ba:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80117bc:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80117be:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80117c0:	4b15      	ldr	r3, [pc, #84]	; (8011818 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 80117c2:	4302      	orrs	r2, r0
 80117c4:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80117c6:	6a2a      	ldr	r2, [r5, #32]
 80117c8:	4814      	ldr	r0, [pc, #80]	; (801181c <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80117ca:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80117cc:	4002      	ands	r2, r0
 80117ce:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 80117d0:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80117d2:	078b      	lsls	r3, r1, #30
 80117d4:	d408      	bmi.n	80117e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80117d6:	4a0c      	ldr	r2, [pc, #48]	; (8011808 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80117d8:	490f      	ldr	r1, [pc, #60]	; (8011818 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80117da:	6a13      	ldr	r3, [r2, #32]
 80117dc:	400b      	ands	r3, r1
 80117de:	6861      	ldr	r1, [r4, #4]
 80117e0:	430b      	orrs	r3, r1
 80117e2:	6213      	str	r3, [r2, #32]
 80117e4:	6823      	ldr	r3, [r4, #0]
 80117e6:	e799      	b.n	801171c <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 80117e8:	f7fd fe7c 	bl	800f4e4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80117ec:	4b0c      	ldr	r3, [pc, #48]	; (8011820 <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 80117ee:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80117f0:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80117f2:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80117f4:	6a2b      	ldr	r3, [r5, #32]
 80117f6:	421e      	tst	r6, r3
 80117f8:	d1ed      	bne.n	80117d6 <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80117fa:	f7fd fe73 	bl	800f4e4 <HAL_GetTick>
 80117fe:	1bc0      	subs	r0, r0, r7
 8011800:	4540      	cmp	r0, r8
 8011802:	d9f7      	bls.n	80117f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8011804:	2003      	movs	r0, #3
 8011806:	e7b7      	b.n	8011778 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8011808:	40021000 	.word	0x40021000
 801180c:	fffcffff 	.word	0xfffcffff
 8011810:	fff3ffff 	.word	0xfff3ffff
 8011814:	40007000 	.word	0x40007000
 8011818:	fffffcff 	.word	0xfffffcff
 801181c:	fffeffff 	.word	0xfffeffff
 8011820:	00001388 	.word	0x00001388

08011824 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8011824:	4770      	bx	lr
 8011826:	46c0      	nop			; (mov r8, r8)

08011828 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011828:	6803      	ldr	r3, [r0, #0]
{
 801182a:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801182c:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 801182e:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011830:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011832:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8011834:	681c      	ldr	r4, [r3, #0]
 8011836:	4b13      	ldr	r3, [pc, #76]	; (8011884 <HAL_RTC_GetTime+0x5c>)
 8011838:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801183a:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 801183c:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801183e:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011840:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011842:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011844:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011846:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011848:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801184a:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 801184c:	720e      	strb	r6, [r1, #8]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 801184e:	2a00      	cmp	r2, #0
 8011850:	d115      	bne.n	801187e <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8011852:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011854:	0900      	lsrs	r0, r0, #4
 8011856:	0082      	lsls	r2, r0, #2
 8011858:	1810      	adds	r0, r2, r0
 801185a:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801185c:	4035      	ands	r5, r6
 801185e:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011860:	0918      	lsrs	r0, r3, #4
 8011862:	0082      	lsls	r2, r0, #2
 8011864:	1812      	adds	r2, r2, r0
 8011866:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011868:	4033      	ands	r3, r6
 801186a:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801186c:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801186e:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011870:	0093      	lsls	r3, r2, #2
 8011872:	189b      	adds	r3, r3, r2
 8011874:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011876:	4034      	ands	r4, r6
 8011878:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801187a:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 801187c:	708c      	strb	r4, [r1, #2]
}
 801187e:	2000      	movs	r0, #0
 8011880:	bd70      	pop	{r4, r5, r6, pc}
 8011882:	46c0      	nop			; (mov r8, r8)
 8011884:	007f7f7f 	.word	0x007f7f7f

08011888 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011888:	6803      	ldr	r3, [r0, #0]
 801188a:	4815      	ldr	r0, [pc, #84]	; (80118e0 <HAL_RTC_GetDate+0x58>)
 801188c:	685b      	ldr	r3, [r3, #4]
{
 801188e:	b5f0      	push	{r4, r5, r6, r7, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011890:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011892:	201f      	movs	r0, #31
 8011894:	0a1c      	lsrs	r4, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011896:	0c1f      	lsrs	r7, r3, #16
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8011898:	b2dd      	uxtb	r5, r3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801189a:	b2e4      	uxtb	r4, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801189c:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801189e:	4020      	ands	r0, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80118a0:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80118a2:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80118a4:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80118a6:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80118a8:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80118aa:	2a00      	cmp	r2, #0
 80118ac:	d115      	bne.n	80118da <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 80118ae:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80118b0:	093b      	lsrs	r3, r7, #4
 80118b2:	009a      	lsls	r2, r3, #2
 80118b4:	18d2      	adds	r2, r2, r3
 80118b6:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80118b8:	4037      	ands	r7, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80118ba:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80118bc:	19d2      	adds	r2, r2, r7
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80118be:	0098      	lsls	r0, r3, #2
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80118c0:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80118c2:	092a      	lsrs	r2, r5, #4
 80118c4:	18c0      	adds	r0, r0, r3
 80118c6:	0093      	lsls	r3, r2, #2
 80118c8:	189b      	adds	r3, r3, r2
 80118ca:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80118cc:	4034      	ands	r4, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80118ce:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80118d0:	4035      	ands	r5, r6
 80118d2:	1904      	adds	r4, r0, r4
 80118d4:	195b      	adds	r3, r3, r5
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80118d6:	704c      	strb	r4, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80118d8:	708b      	strb	r3, [r1, #2]
}
 80118da:	2000      	movs	r0, #0
 80118dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118de:	46c0      	nop			; (mov r8, r8)
 80118e0:	00ffff3f 	.word	0x00ffff3f

080118e4 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80118e4:	21a0      	movs	r1, #160	; 0xa0
 80118e6:	6802      	ldr	r2, [r0, #0]
{
 80118e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80118ea:	68d3      	ldr	r3, [r2, #12]
{
 80118ec:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80118ee:	438b      	bics	r3, r1
 80118f0:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 80118f2:	f7fd fdf7 	bl	800f4e4 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80118f6:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 80118f8:	0007      	movs	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80118fa:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80118fc:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80118fe:	e004      	b.n	801190a <HAL_RTC_WaitForSynchro+0x26>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011900:	f7fd fdf0 	bl	800f4e4 <HAL_GetTick>
 8011904:	1bc0      	subs	r0, r0, r7
 8011906:	42b0      	cmp	r0, r6
 8011908:	d805      	bhi.n	8011916 <HAL_RTC_WaitForSynchro+0x32>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801190a:	6823      	ldr	r3, [r4, #0]
 801190c:	68db      	ldr	r3, [r3, #12]
 801190e:	421d      	tst	r5, r3
 8011910:	d0f6      	beq.n	8011900 <HAL_RTC_WaitForSynchro+0x1c>
  return HAL_OK;
 8011912:	2000      	movs	r0, #0
}
 8011914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8011916:	2003      	movs	r0, #3
 8011918:	e7fc      	b.n	8011914 <HAL_RTC_WaitForSynchro+0x30>
 801191a:	46c0      	nop			; (mov r8, r8)

0801191c <RTC_EnterInitMode>:
{
 801191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801191e:	6803      	ldr	r3, [r0, #0]
{
 8011920:	0004      	movs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011922:	68da      	ldr	r2, [r3, #12]
 8011924:	0652      	lsls	r2, r2, #25
 8011926:	d501      	bpl.n	801192c <RTC_EnterInitMode+0x10>
  return HAL_OK;  
 8011928:	2000      	movs	r0, #0
}
 801192a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801192c:	2201      	movs	r2, #1
 801192e:	4252      	negs	r2, r2
 8011930:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8011932:	f7fd fdd7 	bl	800f4e4 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011936:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8011938:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801193a:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801193c:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801193e:	e004      	b.n	801194a <RTC_EnterInitMode+0x2e>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011940:	f7fd fdd0 	bl	800f4e4 <HAL_GetTick>
 8011944:	1bc0      	subs	r0, r0, r7
 8011946:	42b0      	cmp	r0, r6
 8011948:	d804      	bhi.n	8011954 <RTC_EnterInitMode+0x38>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801194a:	6823      	ldr	r3, [r4, #0]
 801194c:	68db      	ldr	r3, [r3, #12]
 801194e:	421d      	tst	r5, r3
 8011950:	d0f6      	beq.n	8011940 <RTC_EnterInitMode+0x24>
 8011952:	e7e9      	b.n	8011928 <RTC_EnterInitMode+0xc>
        return HAL_TIMEOUT;
 8011954:	2003      	movs	r0, #3
 8011956:	e7e8      	b.n	801192a <RTC_EnterInitMode+0xe>

08011958 <HAL_RTC_Init>:
{
 8011958:	b570      	push	{r4, r5, r6, lr}
 801195a:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 801195c:	d03e      	beq.n	80119dc <HAL_RTC_Init+0x84>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801195e:	7f43      	ldrb	r3, [r0, #29]
 8011960:	b2db      	uxtb	r3, r3
 8011962:	2b00      	cmp	r3, #0
 8011964:	d036      	beq.n	80119d4 <HAL_RTC_Init+0x7c>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011966:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011968:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 801196a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801196c:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801196e:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011970:	625a      	str	r2, [r3, #36]	; 0x24
 8011972:	3a77      	subs	r2, #119	; 0x77
 8011974:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011976:	f7ff ffd1 	bl	801191c <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801197a:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801197c:	2800      	cmp	r0, #0
 801197e:	d123      	bne.n	80119c8 <HAL_RTC_Init+0x70>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011980:	689a      	ldr	r2, [r3, #8]
 8011982:	4917      	ldr	r1, [pc, #92]	; (80119e0 <HAL_RTC_Init+0x88>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011984:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011986:	400a      	ands	r2, r1
 8011988:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801198a:	6862      	ldr	r2, [r4, #4]
 801198c:	6899      	ldr	r1, [r3, #8]
 801198e:	432a      	orrs	r2, r5
 8011990:	6965      	ldr	r5, [r4, #20]
 8011992:	432a      	orrs	r2, r5
 8011994:	430a      	orrs	r2, r1
 8011996:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011998:	68e2      	ldr	r2, [r4, #12]
 801199a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 801199c:	68a2      	ldr	r2, [r4, #8]
 801199e:	6919      	ldr	r1, [r3, #16]
 80119a0:	0412      	lsls	r2, r2, #16
 80119a2:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80119a4:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80119a6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80119a8:	68da      	ldr	r2, [r3, #12]
 80119aa:	438a      	bics	r2, r1
 80119ac:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80119ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80119b0:	490c      	ldr	r1, [pc, #48]	; (80119e4 <HAL_RTC_Init+0x8c>)
 80119b2:	400a      	ands	r2, r1
 80119b4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80119b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80119b8:	69a1      	ldr	r1, [r4, #24]
 80119ba:	430a      	orrs	r2, r1
 80119bc:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80119be:	22ff      	movs	r2, #255	; 0xff
 80119c0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80119c2:	2301      	movs	r3, #1
 80119c4:	7763      	strb	r3, [r4, #29]
}
 80119c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80119c8:	22ff      	movs	r2, #255	; 0xff
 80119ca:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80119cc:	2304      	movs	r3, #4
    return HAL_ERROR;
 80119ce:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 80119d0:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80119d2:	e7f8      	b.n	80119c6 <HAL_RTC_Init+0x6e>
    hrtc->Lock = HAL_UNLOCKED;
 80119d4:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80119d6:	f7ff ff25 	bl	8011824 <HAL_RTC_MspInit>
 80119da:	e7c4      	b.n	8011966 <HAL_RTC_Init+0xe>
     return HAL_ERROR;
 80119dc:	2001      	movs	r0, #1
 80119de:	e7f2      	b.n	80119c6 <HAL_RTC_Init+0x6e>
 80119e0:	ff8fffbf 	.word	0xff8fffbf
 80119e4:	fffbffff 	.word	0xfffbffff

080119e8 <HAL_RTC_SetTime>:
{
 80119e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80119ea:	7f03      	ldrb	r3, [r0, #28]
{
 80119ec:	0004      	movs	r4, r0
 80119ee:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80119f0:	2b01      	cmp	r3, #1
 80119f2:	d100      	bne.n	80119f6 <HAL_RTC_SetTime+0xe>
 80119f4:	e074      	b.n	8011ae0 <HAL_RTC_SetTime+0xf8>
 80119f6:	2301      	movs	r3, #1
 80119f8:	6806      	ldr	r6, [r0, #0]
 80119fa:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80119fc:	3301      	adds	r3, #1
 80119fe:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011a00:	68b3      	ldr	r3, [r6, #8]
 8011a02:	2740      	movs	r7, #64	; 0x40
  if(Format == RTC_FORMAT_BIN)
 8011a04:	2a00      	cmp	r2, #0
 8011a06:	d031      	beq.n	8011a6c <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011a08:	403b      	ands	r3, r7
 8011a0a:	d065      	beq.n	8011ad8 <HAL_RTC_SetTime+0xf0>
 8011a0c:	7a0b      	ldrb	r3, [r1, #8]
 8011a0e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011a10:	782f      	ldrb	r7, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011a12:	7869      	ldrb	r1, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011a14:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011a16:	0209      	lsls	r1, r1, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011a18:	430f      	orrs	r7, r1
              ((uint32_t)sTime->Seconds) | \
 8011a1a:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011a1c:	430f      	orrs	r7, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011a1e:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011a20:	23ca      	movs	r3, #202	; 0xca
 8011a22:	6273      	str	r3, [r6, #36]	; 0x24
 8011a24:	3b77      	subs	r3, #119	; 0x77
 8011a26:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011a28:	0020      	movs	r0, r4
 8011a2a:	f7ff ff77 	bl	801191c <RTC_EnterInitMode>
 8011a2e:	1e06      	subs	r6, r0, #0
 8011a30:	d149      	bne.n	8011ac6 <HAL_RTC_SetTime+0xde>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011a32:	4935      	ldr	r1, [pc, #212]	; (8011b08 <HAL_RTC_SetTime+0x120>)
 8011a34:	6822      	ldr	r2, [r4, #0]
 8011a36:	4039      	ands	r1, r7
 8011a38:	6011      	str	r1, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011a3a:	6893      	ldr	r3, [r2, #8]
 8011a3c:	4933      	ldr	r1, [pc, #204]	; (8011b0c <HAL_RTC_SetTime+0x124>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011a3e:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011a40:	400b      	ands	r3, r1
 8011a42:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011a44:	68eb      	ldr	r3, [r5, #12]
 8011a46:	6891      	ldr	r1, [r2, #8]
 8011a48:	4303      	orrs	r3, r0
 8011a4a:	430b      	orrs	r3, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011a4c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011a4e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011a50:	68d3      	ldr	r3, [r2, #12]
 8011a52:	438b      	bics	r3, r1
 8011a54:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011a56:	6893      	ldr	r3, [r2, #8]
 8011a58:	069b      	lsls	r3, r3, #26
 8011a5a:	d543      	bpl.n	8011ae4 <HAL_RTC_SetTime+0xfc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011a5c:	23ff      	movs	r3, #255	; 0xff
 8011a5e:	6253      	str	r3, [r2, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011a60:	3bfe      	subs	r3, #254	; 0xfe
 8011a62:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011a64:	2300      	movs	r3, #0
 8011a66:	7723      	strb	r3, [r4, #28]
}
 8011a68:	0030      	movs	r0, r6
 8011a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011a6c:	401f      	ands	r7, r3
 8011a6e:	d035      	beq.n	8011adc <HAL_RTC_SetTime+0xf4>
 8011a70:	7a0f      	ldrb	r7, [r1, #8]
 8011a72:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011a74:	7828      	ldrb	r0, [r5, #0]
  uint32_t bcdhigh = 0;
 8011a76:	2300      	movs	r3, #0
  while(Value >= 10)
 8011a78:	2809      	cmp	r0, #9
 8011a7a:	d906      	bls.n	8011a8a <HAL_RTC_SetTime+0xa2>
    Value -= 10;
 8011a7c:	380a      	subs	r0, #10
 8011a7e:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011a80:	3301      	adds	r3, #1
  while(Value >= 10)
 8011a82:	2809      	cmp	r0, #9
 8011a84:	d8fa      	bhi.n	8011a7c <HAL_RTC_SetTime+0x94>
 8011a86:	011b      	lsls	r3, r3, #4
 8011a88:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011a8a:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011a8c:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011a8e:	0400      	lsls	r0, r0, #16
  uint32_t bcdhigh = 0;
 8011a90:	2100      	movs	r1, #0
  while(Value >= 10)
 8011a92:	2b09      	cmp	r3, #9
 8011a94:	d906      	bls.n	8011aa4 <HAL_RTC_SetTime+0xbc>
    Value -= 10;
 8011a96:	3b0a      	subs	r3, #10
 8011a98:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8011a9a:	3101      	adds	r1, #1
  while(Value >= 10)
 8011a9c:	2b09      	cmp	r3, #9
 8011a9e:	d8fa      	bhi.n	8011a96 <HAL_RTC_SetTime+0xae>
 8011aa0:	0109      	lsls	r1, r1, #4
 8011aa2:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011aa4:	430b      	orrs	r3, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011aa6:	78a9      	ldrb	r1, [r5, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011aa8:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 8011aaa:	2909      	cmp	r1, #9
 8011aac:	d929      	bls.n	8011b02 <HAL_RTC_SetTime+0x11a>
    Value -= 10;
 8011aae:	390a      	subs	r1, #10
 8011ab0:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 8011ab2:	3201      	adds	r2, #1
  while(Value >= 10)
 8011ab4:	2909      	cmp	r1, #9
 8011ab6:	d8fa      	bhi.n	8011aae <HAL_RTC_SetTime+0xc6>
 8011ab8:	0112      	lsls	r2, r2, #4
 8011aba:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011abc:	4307      	orrs	r7, r0
 8011abe:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011ac0:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011ac2:	430f      	orrs	r7, r1
 8011ac4:	e7ac      	b.n	8011a20 <HAL_RTC_SetTime+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011ac6:	22ff      	movs	r2, #255	; 0xff
 8011ac8:	6823      	ldr	r3, [r4, #0]
    return HAL_ERROR;
 8011aca:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011acc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011ace:	2304      	movs	r3, #4
 8011ad0:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011ad6:	e7c7      	b.n	8011a68 <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00;
 8011ad8:	720b      	strb	r3, [r1, #8]
 8011ada:	e799      	b.n	8011a10 <HAL_RTC_SetTime+0x28>
      sTime->TimeFormat = 0x00;
 8011adc:	720f      	strb	r7, [r1, #8]
 8011ade:	e7c9      	b.n	8011a74 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 8011ae0:	2602      	movs	r6, #2
 8011ae2:	e7c1      	b.n	8011a68 <HAL_RTC_SetTime+0x80>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011ae4:	0020      	movs	r0, r4
 8011ae6:	f7ff fefd 	bl	80118e4 <HAL_RTC_WaitForSynchro>
 8011aea:	2800      	cmp	r0, #0
 8011aec:	d101      	bne.n	8011af2 <HAL_RTC_SetTime+0x10a>
 8011aee:	6822      	ldr	r2, [r4, #0]
 8011af0:	e7b4      	b.n	8011a5c <HAL_RTC_SetTime+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011af2:	22ff      	movs	r2, #255	; 0xff
 8011af4:	6823      	ldr	r3, [r4, #0]
 8011af6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011af8:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8011afa:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011afc:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8011afe:	2601      	movs	r6, #1
 8011b00:	e7b2      	b.n	8011a68 <HAL_RTC_SetTime+0x80>
  while(Value >= 10)
 8011b02:	2200      	movs	r2, #0
 8011b04:	e7da      	b.n	8011abc <HAL_RTC_SetTime+0xd4>
 8011b06:	46c0      	nop			; (mov r8, r8)
 8011b08:	007f7f7f 	.word	0x007f7f7f
 8011b0c:	fffbffff 	.word	0xfffbffff

08011b10 <HAL_RTC_SetDate>:
{
 8011b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8011b12:	7f03      	ldrb	r3, [r0, #28]
{
 8011b14:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 8011b16:	2b01      	cmp	r3, #1
 8011b18:	d062      	beq.n	8011be0 <HAL_RTC_SetDate+0xd0>
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	780f      	ldrb	r7, [r1, #0]
 8011b1e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8011b20:	3301      	adds	r3, #1
 8011b22:	7743      	strb	r3, [r0, #29]
 8011b24:	7848      	ldrb	r0, [r1, #1]
 8011b26:	788e      	ldrb	r6, [r1, #2]
 8011b28:	78cb      	ldrb	r3, [r1, #3]
 8011b2a:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011b2c:	2a00      	cmp	r2, #0
 8011b2e:	d022      	beq.n	8011b76 <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011b30:	041b      	lsls	r3, r3, #16
 8011b32:	433b      	orrs	r3, r7
 8011b34:	001c      	movs	r4, r3
                  (((uint32_t)sDate->Month) << 8) | \
 8011b36:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011b38:	4334      	orrs	r4, r6
 8011b3a:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b3c:	22ca      	movs	r2, #202	; 0xca
 8011b3e:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b40:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b42:	625a      	str	r2, [r3, #36]	; 0x24
 8011b44:	3a77      	subs	r2, #119	; 0x77
 8011b46:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b48:	f7ff fee8 	bl	801191c <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011b4c:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b4e:	1e06      	subs	r6, r0, #0
 8011b50:	d13e      	bne.n	8011bd0 <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011b52:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011b54:	4a2b      	ldr	r2, [pc, #172]	; (8011c04 <HAL_RTC_SetDate+0xf4>)
 8011b56:	4014      	ands	r4, r2
 8011b58:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011b5a:	68da      	ldr	r2, [r3, #12]
 8011b5c:	438a      	bics	r2, r1
 8011b5e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011b60:	689a      	ldr	r2, [r3, #8]
 8011b62:	0692      	lsls	r2, r2, #26
 8011b64:	d53e      	bpl.n	8011be4 <HAL_RTC_SetDate+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011b66:	22ff      	movs	r2, #255	; 0xff
 8011b68:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011b6e:	2300      	movs	r3, #0
 8011b70:	772b      	strb	r3, [r5, #28]
}
 8011b72:	0030      	movs	r0, r6
 8011b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011b76:	2410      	movs	r4, #16
 8011b78:	4204      	tst	r4, r0
 8011b7a:	d003      	beq.n	8011b84 <HAL_RTC_SetDate+0x74>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8011b7c:	43a0      	bics	r0, r4
 8011b7e:	300a      	adds	r0, #10
 8011b80:	b2c0      	uxtb	r0, r0
 8011b82:	7048      	strb	r0, [r1, #1]
  uint32_t bcdhigh = 0;
 8011b84:	2100      	movs	r1, #0
  while(Value >= 10)
 8011b86:	2b09      	cmp	r3, #9
 8011b88:	d906      	bls.n	8011b98 <HAL_RTC_SetDate+0x88>
    Value -= 10;
 8011b8a:	3b0a      	subs	r3, #10
 8011b8c:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8011b8e:	3101      	adds	r1, #1
  while(Value >= 10)
 8011b90:	2b09      	cmp	r3, #9
 8011b92:	d8fa      	bhi.n	8011b8a <HAL_RTC_SetDate+0x7a>
 8011b94:	0109      	lsls	r1, r1, #4
 8011b96:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011b98:	430b      	orrs	r3, r1
 8011b9a:	041b      	lsls	r3, r3, #16
  uint32_t bcdhigh = 0;
 8011b9c:	2100      	movs	r1, #0
  while(Value >= 10)
 8011b9e:	2809      	cmp	r0, #9
 8011ba0:	d906      	bls.n	8011bb0 <HAL_RTC_SetDate+0xa0>
    Value -= 10;
 8011ba2:	380a      	subs	r0, #10
 8011ba4:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011ba6:	3101      	adds	r1, #1
  while(Value >= 10)
 8011ba8:	2809      	cmp	r0, #9
 8011baa:	d8fa      	bhi.n	8011ba2 <HAL_RTC_SetDate+0x92>
 8011bac:	0109      	lsls	r1, r1, #4
 8011bae:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011bb0:	4308      	orrs	r0, r1
 8011bb2:	0200      	lsls	r0, r0, #8
  while(Value >= 10)
 8011bb4:	2e09      	cmp	r6, #9
 8011bb6:	d922      	bls.n	8011bfe <HAL_RTC_SetDate+0xee>
    Value -= 10;
 8011bb8:	3e0a      	subs	r6, #10
 8011bba:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 8011bbc:	3201      	adds	r2, #1
  while(Value >= 10)
 8011bbe:	2e09      	cmp	r6, #9
 8011bc0:	d8fa      	bhi.n	8011bb8 <HAL_RTC_SetDate+0xa8>
 8011bc2:	0112      	lsls	r2, r2, #4
 8011bc4:	b2d4      	uxtb	r4, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011bc6:	433b      	orrs	r3, r7
 8011bc8:	4303      	orrs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8011bca:	4334      	orrs	r4, r6
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011bcc:	431c      	orrs	r4, r3
 8011bce:	e7b5      	b.n	8011b3c <HAL_RTC_SetDate+0x2c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011bd0:	22ff      	movs	r2, #255	; 0xff
 8011bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011bd4:	2304      	movs	r3, #4
 8011bd6:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011bd8:	2300      	movs	r3, #0
    return HAL_ERROR;
 8011bda:	2601      	movs	r6, #1
    __HAL_UNLOCK(hrtc);
 8011bdc:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 8011bde:	e7c8      	b.n	8011b72 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011be0:	2602      	movs	r6, #2
 8011be2:	e7c6      	b.n	8011b72 <HAL_RTC_SetDate+0x62>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011be4:	0028      	movs	r0, r5
 8011be6:	f7ff fe7d 	bl	80118e4 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011bea:	682b      	ldr	r3, [r5, #0]
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011bec:	2800      	cmp	r0, #0
 8011bee:	d0ba      	beq.n	8011b66 <HAL_RTC_SetDate+0x56>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011bf0:	22ff      	movs	r2, #255	; 0xff
 8011bf2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011bf4:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8011bf6:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011bf8:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8011bfa:	2601      	movs	r6, #1
 8011bfc:	e7b9      	b.n	8011b72 <HAL_RTC_SetDate+0x62>
  while(Value >= 10)
 8011bfe:	2400      	movs	r4, #0
 8011c00:	e7e1      	b.n	8011bc6 <HAL_RTC_SetDate+0xb6>
 8011c02:	46c0      	nop			; (mov r8, r8)
 8011c04:	00ffff3f 	.word	0x00ffff3f

08011c08 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011c08:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8011c0a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011c0c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011c0e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011c10:	600a      	str	r2, [r1, #0]
}
 8011c12:	4770      	bx	lr

08011c14 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011c14:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8011c16:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011c18:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011c1a:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8011c1c:	6808      	ldr	r0, [r1, #0]
}
 8011c1e:	4770      	bx	lr

08011c20 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011c20:	4770      	bx	lr
 8011c22:	46c0      	nop			; (mov r8, r8)

08011c24 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8011c24:	2239      	movs	r2, #57	; 0x39
 8011c26:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011c28:	2101      	movs	r1, #1
{
 8011c2a:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 8011c2c:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011c2e:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8011c30:	6823      	ldr	r3, [r4, #0]
 8011c32:	430b      	orrs	r3, r1
 8011c34:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8011c36:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8011c38:	2000      	movs	r0, #0
 8011c3a:	bd10      	pop	{r4, pc}

08011c3c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011c3c:	4a22      	ldr	r2, [pc, #136]	; (8011cc8 <TIM_Base_SetConfig+0x8c>)
{
 8011c3e:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 8011c40:	6803      	ldr	r3, [r0, #0]
 8011c42:	688d      	ldr	r5, [r1, #8]
 8011c44:	680c      	ldr	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011c46:	4290      	cmp	r0, r2
 8011c48:	d02c      	beq.n	8011ca4 <TIM_Base_SetConfig+0x68>
 8011c4a:	2280      	movs	r2, #128	; 0x80
 8011c4c:	05d2      	lsls	r2, r2, #23
 8011c4e:	4290      	cmp	r0, r2
 8011c50:	d012      	beq.n	8011c78 <TIM_Base_SetConfig+0x3c>
 8011c52:	4a1e      	ldr	r2, [pc, #120]	; (8011ccc <TIM_Base_SetConfig+0x90>)
 8011c54:	4290      	cmp	r0, r2
 8011c56:	d00f      	beq.n	8011c78 <TIM_Base_SetConfig+0x3c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011c58:	4a1d      	ldr	r2, [pc, #116]	; (8011cd0 <TIM_Base_SetConfig+0x94>)
 8011c5a:	4290      	cmp	r0, r2
 8011c5c:	d02e      	beq.n	8011cbc <TIM_Base_SetConfig+0x80>
 8011c5e:	4a1d      	ldr	r2, [pc, #116]	; (8011cd4 <TIM_Base_SetConfig+0x98>)
 8011c60:	4290      	cmp	r0, r2
 8011c62:	d023      	beq.n	8011cac <TIM_Base_SetConfig+0x70>
 8011c64:	4a1c      	ldr	r2, [pc, #112]	; (8011cd8 <TIM_Base_SetConfig+0x9c>)
 8011c66:	4290      	cmp	r0, r2
 8011c68:	d020      	beq.n	8011cac <TIM_Base_SetConfig+0x70>
 8011c6a:	4a1c      	ldr	r2, [pc, #112]	; (8011cdc <TIM_Base_SetConfig+0xa0>)
 8011c6c:	4290      	cmp	r0, r2
 8011c6e:	d01d      	beq.n	8011cac <TIM_Base_SetConfig+0x70>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8011c70:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011c72:	62c5      	str	r5, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011c74:	6284      	str	r4, [r0, #40]	; 0x28
 8011c76:	e012      	b.n	8011c9e <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011c78:	2270      	movs	r2, #112	; 0x70
 8011c7a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011c7c:	684a      	ldr	r2, [r1, #4]
 8011c7e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011c80:	4a17      	ldr	r2, [pc, #92]	; (8011ce0 <TIM_Base_SetConfig+0xa4>)
 8011c82:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011c84:	68ca      	ldr	r2, [r1, #12]
 8011c86:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011c88:	6003      	str	r3, [r0, #0]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011c8a:	4b13      	ldr	r3, [pc, #76]	; (8011cd8 <TIM_Base_SetConfig+0x9c>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011c8c:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011c8e:	6284      	str	r4, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011c90:	4298      	cmp	r0, r3
 8011c92:	d002      	beq.n	8011c9a <TIM_Base_SetConfig+0x5e>
 8011c94:	4b11      	ldr	r3, [pc, #68]	; (8011cdc <TIM_Base_SetConfig+0xa0>)
 8011c96:	4298      	cmp	r0, r3
 8011c98:	d101      	bne.n	8011c9e <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011c9a:	690b      	ldr	r3, [r1, #16]
 8011c9c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	6143      	str	r3, [r0, #20]
}
 8011ca2:	bd30      	pop	{r4, r5, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011ca4:	2270      	movs	r2, #112	; 0x70
 8011ca6:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011ca8:	684a      	ldr	r2, [r1, #4]
 8011caa:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011cac:	4a0c      	ldr	r2, [pc, #48]	; (8011ce0 <TIM_Base_SetConfig+0xa4>)
 8011cae:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011cb0:	68ca      	ldr	r2, [r1, #12]
 8011cb2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011cb4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011cb6:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011cb8:	6284      	str	r4, [r0, #40]	; 0x28
 8011cba:	e7ee      	b.n	8011c9a <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011cbc:	4a08      	ldr	r2, [pc, #32]	; (8011ce0 <TIM_Base_SetConfig+0xa4>)
 8011cbe:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011cc0:	68ca      	ldr	r2, [r1, #12]
 8011cc2:	4313      	orrs	r3, r2
 8011cc4:	e7d4      	b.n	8011c70 <TIM_Base_SetConfig+0x34>
 8011cc6:	46c0      	nop			; (mov r8, r8)
 8011cc8:	40012c00 	.word	0x40012c00
 8011ccc:	40000400 	.word	0x40000400
 8011cd0:	40002000 	.word	0x40002000
 8011cd4:	40014000 	.word	0x40014000
 8011cd8:	40014400 	.word	0x40014400
 8011cdc:	40014800 	.word	0x40014800
 8011ce0:	fffffcff 	.word	0xfffffcff

08011ce4 <HAL_TIM_Base_Init>:
{
 8011ce4:	b570      	push	{r4, r5, r6, lr}
 8011ce6:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011ce8:	d014      	beq.n	8011d14 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011cea:	2339      	movs	r3, #57	; 0x39
 8011cec:	5cc3      	ldrb	r3, [r0, r3]
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d00a      	beq.n	8011d0a <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8011cf4:	2302      	movs	r3, #2
 8011cf6:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011cf8:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011cfa:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011cfc:	1d21      	adds	r1, r4, #4
 8011cfe:	f7ff ff9d 	bl	8011c3c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011d02:	2301      	movs	r3, #1
  return HAL_OK;
 8011d04:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8011d06:	5563      	strb	r3, [r4, r5]
}
 8011d08:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011d0a:	2238      	movs	r2, #56	; 0x38
 8011d0c:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 8011d0e:	f7ff ff87 	bl	8011c20 <HAL_TIM_Base_MspInit>
 8011d12:	e7ef      	b.n	8011cf4 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8011d14:	2001      	movs	r0, #1
 8011d16:	e7f7      	b.n	8011d08 <HAL_TIM_Base_Init+0x24>

08011d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8011d18:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8011d1a:	2438      	movs	r4, #56	; 0x38
 8011d1c:	5d03      	ldrb	r3, [r0, r4]
 8011d1e:	2b01      	cmp	r3, #1
 8011d20:	d019      	beq.n	8011d56 <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 8011d22:	2539      	movs	r5, #57	; 0x39
 8011d24:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011d26:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8011d28:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011d2a:	6803      	ldr	r3, [r0, #0]
 8011d2c:	685a      	ldr	r2, [r3, #4]
 8011d2e:	43b2      	bics	r2, r6
 8011d30:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011d32:	685a      	ldr	r2, [r3, #4]
 8011d34:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011d36:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011d38:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011d3a:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011d3c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011d3e:	689a      	ldr	r2, [r3, #8]
 8011d40:	43b2      	bics	r2, r6
 8011d42:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011d44:	689a      	ldr	r2, [r3, #8]
 8011d46:	430a      	orrs	r2, r1
 8011d48:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 8011d4e:	2300      	movs	r3, #0
 8011d50:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 8011d52:	2000      	movs	r0, #0
}
 8011d54:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8011d56:	2002      	movs	r0, #2
 8011d58:	e7fc      	b.n	8011d54 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8011d5a:	46c0      	nop			; (mov r8, r8)

08011d5c <HAL_UART_MspDeInit>:
 8011d5c:	4770      	bx	lr
 8011d5e:	46c0      	nop			; (mov r8, r8)

08011d60 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8011d60:	b570      	push	{r4, r5, r6, lr}
 8011d62:	0004      	movs	r4, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8011d64:	2001      	movs	r0, #1
  if(huart == NULL)
 8011d66:	2c00      	cmp	r4, #0
 8011d68:	d012      	beq.n	8011d90 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 8011d6a:	2669      	movs	r6, #105	; 0x69
 8011d6c:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0;
 8011d6e:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 8011d70:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8011d72:	6823      	ldr	r3, [r4, #0]
 8011d74:	681a      	ldr	r2, [r3, #0]
 8011d76:	4382      	bics	r2, r0
 8011d78:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0;
  huart->Instance->CR3 = 0x0;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8011d7a:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0;
 8011d7c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8011d7e:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8011d80:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8011d82:	f7ff ffeb 	bl	8011d5c <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8011d86:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 8011d88:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d8a:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8011d8c:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8011d8e:	54e5      	strb	r5, [r4, r3]
}
 8011d90:	bd70      	pop	{r4, r5, r6, pc}
 8011d92:	46c0      	nop			; (mov r8, r8)

08011d94 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011d94:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011d96:	2069      	movs	r0, #105	; 0x69
{
 8011d98:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011d9a:	5c1c      	ldrb	r4, [r3, r0]
 8011d9c:	2c01      	cmp	r4, #1
 8011d9e:	d003      	beq.n	8011da8 <HAL_UART_Transmit_IT+0x14>
 8011da0:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011da2:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011da4:	2c22      	cmp	r4, #34	; 0x22
 8011da6:	d122      	bne.n	8011dee <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 8011da8:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011daa:	2900      	cmp	r1, #0
 8011dac:	d01f      	beq.n	8011dee <HAL_UART_Transmit_IT+0x5a>
 8011dae:	2a00      	cmp	r2, #0
 8011db0:	d01d      	beq.n	8011dee <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 8011db2:	2468      	movs	r4, #104	; 0x68
 8011db4:	5d1d      	ldrb	r5, [r3, r4]
 8011db6:	2d01      	cmp	r5, #1
 8011db8:	d01d      	beq.n	8011df6 <HAL_UART_Transmit_IT+0x62>
 8011dba:	5518      	strb	r0, [r3, r4]
    huart->pTxBuffPtr = pData;
 8011dbc:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011dbe:	2150      	movs	r1, #80	; 0x50
 8011dc0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011dc2:	3102      	adds	r1, #2
 8011dc4:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011dca:	3269      	adds	r2, #105	; 0x69
 8011dcc:	5c99      	ldrb	r1, [r3, r2]
 8011dce:	2922      	cmp	r1, #34	; 0x22
 8011dd0:	d00e      	beq.n	8011df0 <HAL_UART_Transmit_IT+0x5c>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011dd2:	2112      	movs	r1, #18
 8011dd4:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011dd6:	2001      	movs	r0, #1
 8011dd8:	681a      	ldr	r2, [r3, #0]
 8011dda:	6891      	ldr	r1, [r2, #8]
 8011ddc:	4301      	orrs	r1, r0
 8011dde:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8011de0:	2000      	movs	r0, #0
 8011de2:	2168      	movs	r1, #104	; 0x68
 8011de4:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8011de6:	6813      	ldr	r3, [r2, #0]
 8011de8:	3118      	adds	r1, #24
 8011dea:	430b      	orrs	r3, r1
 8011dec:	6013      	str	r3, [r2, #0]
  }
}
 8011dee:	bd30      	pop	{r4, r5, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011df0:	3110      	adds	r1, #16
 8011df2:	5499      	strb	r1, [r3, r2]
 8011df4:	e7ef      	b.n	8011dd6 <HAL_UART_Transmit_IT+0x42>
    return HAL_BUSY;
 8011df6:	2002      	movs	r0, #2
 8011df8:	e7f9      	b.n	8011dee <HAL_UART_Transmit_IT+0x5a>
 8011dfa:	46c0      	nop			; (mov r8, r8)

08011dfc <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011dfc:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011dfe:	2069      	movs	r0, #105	; 0x69
{
 8011e00:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011e02:	5c1c      	ldrb	r4, [r3, r0]
 8011e04:	2c01      	cmp	r4, #1
 8011e06:	d003      	beq.n	8011e10 <HAL_UART_Receive_IT+0x14>
 8011e08:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011e0a:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011e0c:	2c12      	cmp	r4, #18
 8011e0e:	d134      	bne.n	8011e7a <HAL_UART_Receive_IT+0x7e>
      return HAL_ERROR;
 8011e10:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011e12:	2900      	cmp	r1, #0
 8011e14:	d031      	beq.n	8011e7a <HAL_UART_Receive_IT+0x7e>
 8011e16:	2a00      	cmp	r2, #0
 8011e18:	d02f      	beq.n	8011e7a <HAL_UART_Receive_IT+0x7e>
    __HAL_LOCK(huart);
 8011e1a:	2468      	movs	r4, #104	; 0x68
 8011e1c:	5d1d      	ldrb	r5, [r3, r4]
 8011e1e:	2d01      	cmp	r5, #1
 8011e20:	d041      	beq.n	8011ea6 <HAL_UART_Receive_IT+0xaa>
 8011e22:	5518      	strb	r0, [r3, r4]
    huart->pRxBuffPtr = pData;
 8011e24:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8011e26:	2158      	movs	r1, #88	; 0x58
 8011e28:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8011e2a:	3102      	adds	r1, #2
 8011e2c:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 8011e2e:	2180      	movs	r1, #128	; 0x80
 8011e30:	689a      	ldr	r2, [r3, #8]
 8011e32:	0149      	lsls	r1, r1, #5
 8011e34:	428a      	cmp	r2, r1
 8011e36:	d021      	beq.n	8011e7c <HAL_UART_Receive_IT+0x80>
 8011e38:	2a00      	cmp	r2, #0
 8011e3a:	d129      	bne.n	8011e90 <HAL_UART_Receive_IT+0x94>
 8011e3c:	691a      	ldr	r2, [r3, #16]
 8011e3e:	2a00      	cmp	r2, #0
 8011e40:	d133      	bne.n	8011eaa <HAL_UART_Receive_IT+0xae>
 8011e42:	225c      	movs	r2, #92	; 0x5c
 8011e44:	21ff      	movs	r1, #255	; 0xff
 8011e46:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e48:	2200      	movs	r2, #0
 8011e4a:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011e4c:	3269      	adds	r2, #105	; 0x69
 8011e4e:	5c99      	ldrb	r1, [r3, r2]
 8011e50:	2912      	cmp	r1, #18
 8011e52:	d01a      	beq.n	8011e8a <HAL_UART_Receive_IT+0x8e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011e54:	2122      	movs	r1, #34	; 0x22
 8011e56:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011e58:	2180      	movs	r1, #128	; 0x80
 8011e5a:	681a      	ldr	r2, [r3, #0]
 8011e5c:	0049      	lsls	r1, r1, #1
 8011e5e:	6810      	ldr	r0, [r2, #0]
 8011e60:	4301      	orrs	r1, r0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011e62:	2001      	movs	r0, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011e64:	6011      	str	r1, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011e66:	6891      	ldr	r1, [r2, #8]
 8011e68:	4301      	orrs	r1, r0
 8011e6a:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8011e6c:	2000      	movs	r0, #0
 8011e6e:	2168      	movs	r1, #104	; 0x68
 8011e70:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011e72:	6813      	ldr	r3, [r2, #0]
 8011e74:	3948      	subs	r1, #72	; 0x48
 8011e76:	430b      	orrs	r3, r1
 8011e78:	6013      	str	r3, [r2, #0]
  }
}
 8011e7a:	bd30      	pop	{r4, r5, pc}
    UART_MASK_COMPUTATION(huart);
 8011e7c:	691a      	ldr	r2, [r3, #16]
 8011e7e:	2a00      	cmp	r2, #0
 8011e80:	d1df      	bne.n	8011e42 <HAL_UART_Receive_IT+0x46>
 8011e82:	490c      	ldr	r1, [pc, #48]	; (8011eb4 <HAL_UART_Receive_IT+0xb8>)
 8011e84:	325c      	adds	r2, #92	; 0x5c
 8011e86:	5299      	strh	r1, [r3, r2]
 8011e88:	e7de      	b.n	8011e48 <HAL_UART_Receive_IT+0x4c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011e8a:	3120      	adds	r1, #32
 8011e8c:	5499      	strb	r1, [r3, r2]
 8011e8e:	e7e3      	b.n	8011e58 <HAL_UART_Receive_IT+0x5c>
    UART_MASK_COMPUTATION(huart);
 8011e90:	2180      	movs	r1, #128	; 0x80
 8011e92:	0549      	lsls	r1, r1, #21
 8011e94:	428a      	cmp	r2, r1
 8011e96:	d1d7      	bne.n	8011e48 <HAL_UART_Receive_IT+0x4c>
 8011e98:	691a      	ldr	r2, [r3, #16]
 8011e9a:	2a00      	cmp	r2, #0
 8011e9c:	d005      	beq.n	8011eaa <HAL_UART_Receive_IT+0xae>
 8011e9e:	225c      	movs	r2, #92	; 0x5c
 8011ea0:	213f      	movs	r1, #63	; 0x3f
 8011ea2:	5299      	strh	r1, [r3, r2]
 8011ea4:	e7d0      	b.n	8011e48 <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 8011ea6:	2002      	movs	r0, #2
 8011ea8:	e7e7      	b.n	8011e7a <HAL_UART_Receive_IT+0x7e>
    UART_MASK_COMPUTATION(huart);
 8011eaa:	225c      	movs	r2, #92	; 0x5c
 8011eac:	217f      	movs	r1, #127	; 0x7f
 8011eae:	5299      	strh	r1, [r3, r2]
 8011eb0:	e7ca      	b.n	8011e48 <HAL_UART_Receive_IT+0x4c>
 8011eb2:	46c0      	nop			; (mov r8, r8)
 8011eb4:	000001ff 	.word	0x000001ff

08011eb8 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011eb8:	b570      	push	{r4, r5, r6, lr}
 8011eba:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011ebc:	2069      	movs	r0, #105	; 0x69
 8011ebe:	5c23      	ldrb	r3, [r4, r0]
 8011ec0:	2b01      	cmp	r3, #1
 8011ec2:	d003      	beq.n	8011ecc <HAL_UART_Transmit_DMA+0x14>
 8011ec4:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011ec6:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011ec8:	2b22      	cmp	r3, #34	; 0x22
 8011eca:	d12e      	bne.n	8011f2a <HAL_UART_Transmit_DMA+0x72>
      return HAL_ERROR;
 8011ecc:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011ece:	2900      	cmp	r1, #0
 8011ed0:	d02b      	beq.n	8011f2a <HAL_UART_Transmit_DMA+0x72>
 8011ed2:	2a00      	cmp	r2, #0
 8011ed4:	d029      	beq.n	8011f2a <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 8011ed6:	2368      	movs	r3, #104	; 0x68
 8011ed8:	5ce5      	ldrb	r5, [r4, r3]
 8011eda:	2d01      	cmp	r5, #1
 8011edc:	d029      	beq.n	8011f32 <HAL_UART_Transmit_DMA+0x7a>
 8011ede:	54e0      	strb	r0, [r4, r3]
    huart->TxXferSize = Size;
 8011ee0:	3b18      	subs	r3, #24
    huart->pTxBuffPtr = pData;
 8011ee2:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011ee4:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8011ee6:	3302      	adds	r3, #2
 8011ee8:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011eea:	2300      	movs	r3, #0
 8011eec:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011eee:	3369      	adds	r3, #105	; 0x69
 8011ef0:	5ce0      	ldrb	r0, [r4, r3]
 8011ef2:	2822      	cmp	r0, #34	; 0x22
 8011ef4:	d01a      	beq.n	8011f2c <HAL_UART_Transmit_DMA+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011ef6:	2012      	movs	r0, #18
 8011ef8:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011efa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8011efc:	4b0e      	ldr	r3, [pc, #56]	; (8011f38 <HAL_UART_Transmit_DMA+0x80>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8011efe:	6825      	ldr	r5, [r4, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011f00:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011f02:	4b0e      	ldr	r3, [pc, #56]	; (8011f3c <HAL_UART_Transmit_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8011f04:	3528      	adds	r5, #40	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011f06:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011f08:	4b0d      	ldr	r3, [pc, #52]	; (8011f40 <HAL_UART_Transmit_DMA+0x88>)
 8011f0a:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8011f0c:	0013      	movs	r3, r2
 8011f0e:	002a      	movs	r2, r5
 8011f10:	f7fd ffda 	bl	800fec8 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011f14:	2240      	movs	r2, #64	; 0x40
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8011f16:	2180      	movs	r1, #128	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011f18:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8011f1a:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011f1c:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8011f1e:	689a      	ldr	r2, [r3, #8]
 8011f20:	430a      	orrs	r2, r1
 8011f22:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8011f24:	2368      	movs	r3, #104	; 0x68
 8011f26:	2200      	movs	r2, #0
 8011f28:	54e2      	strb	r2, [r4, r3]
  }
}
 8011f2a:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011f2c:	3010      	adds	r0, #16
 8011f2e:	54e0      	strb	r0, [r4, r3]
 8011f30:	e7e3      	b.n	8011efa <HAL_UART_Transmit_DMA+0x42>
    return HAL_BUSY;
 8011f32:	2002      	movs	r0, #2
 8011f34:	e7f9      	b.n	8011f2a <HAL_UART_Transmit_DMA+0x72>
 8011f36:	46c0      	nop			; (mov r8, r8)
 8011f38:	08011fc9 	.word	0x08011fc9
 8011f3c:	08011ffd 	.word	0x08011ffd
 8011f40:	08012051 	.word	0x08012051

08011f44 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011f44:	b570      	push	{r4, r5, r6, lr}
 8011f46:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011f48:	2069      	movs	r0, #105	; 0x69
 8011f4a:	5c25      	ldrb	r5, [r4, r0]
 8011f4c:	2d01      	cmp	r5, #1
 8011f4e:	d003      	beq.n	8011f58 <HAL_UART_Receive_DMA+0x14>
 8011f50:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011f52:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011f54:	2b12      	cmp	r3, #18
 8011f56:	d12b      	bne.n	8011fb0 <HAL_UART_Receive_DMA+0x6c>
      return HAL_ERROR;
 8011f58:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011f5a:	2900      	cmp	r1, #0
 8011f5c:	d028      	beq.n	8011fb0 <HAL_UART_Receive_DMA+0x6c>
 8011f5e:	2a00      	cmp	r2, #0
 8011f60:	d026      	beq.n	8011fb0 <HAL_UART_Receive_DMA+0x6c>
    __HAL_LOCK(huart);
 8011f62:	2368      	movs	r3, #104	; 0x68
 8011f64:	5ce5      	ldrb	r5, [r4, r3]
 8011f66:	2d01      	cmp	r5, #1
 8011f68:	d026      	beq.n	8011fb8 <HAL_UART_Receive_DMA+0x74>
 8011f6a:	54e0      	strb	r0, [r4, r3]
    huart->RxXferSize = Size;
 8011f6c:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 8011f6e:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8011f70:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f72:	2300      	movs	r3, #0
 8011f74:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011f76:	3369      	adds	r3, #105	; 0x69
 8011f78:	5ce0      	ldrb	r0, [r4, r3]
 8011f7a:	2812      	cmp	r0, #18
 8011f7c:	d019      	beq.n	8011fb2 <HAL_UART_Receive_DMA+0x6e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011f7e:	2022      	movs	r0, #34	; 0x22
 8011f80:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011f82:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8011f84:	4b0d      	ldr	r3, [pc, #52]	; (8011fbc <HAL_UART_Receive_DMA+0x78>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8011f86:	6825      	ldr	r5, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011f88:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011f8a:	4b0d      	ldr	r3, [pc, #52]	; (8011fc0 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8011f8c:	3524      	adds	r5, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011f8e:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011f90:	4b0c      	ldr	r3, [pc, #48]	; (8011fc4 <HAL_UART_Receive_DMA+0x80>)
 8011f92:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8011f94:	0013      	movs	r3, r2
 8011f96:	000a      	movs	r2, r1
 8011f98:	0029      	movs	r1, r5
 8011f9a:	f7fd ff95 	bl	800fec8 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8011f9e:	2140      	movs	r1, #64	; 0x40
 8011fa0:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8011fa2:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8011fa4:	6893      	ldr	r3, [r2, #8]
 8011fa6:	430b      	orrs	r3, r1
 8011fa8:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8011faa:	2368      	movs	r3, #104	; 0x68
 8011fac:	2200      	movs	r2, #0
 8011fae:	54e2      	strb	r2, [r4, r3]
  }
}
 8011fb0:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011fb2:	3020      	adds	r0, #32
 8011fb4:	54e0      	strb	r0, [r4, r3]
 8011fb6:	e7e4      	b.n	8011f82 <HAL_UART_Receive_DMA+0x3e>
    return HAL_BUSY;
 8011fb8:	2002      	movs	r0, #2
 8011fba:	e7f9      	b.n	8011fb0 <HAL_UART_Receive_DMA+0x6c>
 8011fbc:	08012009 	.word	0x08012009
 8011fc0:	08012045 	.word	0x08012045
 8011fc4:	08012051 	.word	0x08012051

08011fc8 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011fc8:	6803      	ldr	r3, [r0, #0]
{
 8011fca:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011fcc:	6819      	ldr	r1, [r3, #0]
 8011fce:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011fd0:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011fd2:	400b      	ands	r3, r1
 8011fd4:	d10b      	bne.n	8011fee <UART_DMATransmitCplt+0x26>
  {  
    huart->TxXferCount = 0;
 8011fd6:	2152      	movs	r1, #82	; 0x52
 8011fd8:	5253      	strh	r3, [r2, r1]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8011fda:	6813      	ldr	r3, [r2, #0]
 8011fdc:	312e      	adds	r1, #46	; 0x2e
 8011fde:	689a      	ldr	r2, [r3, #8]
 8011fe0:	438a      	bics	r2, r1
 8011fe2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011fe4:	681a      	ldr	r2, [r3, #0]
 8011fe6:	3940      	subs	r1, #64	; 0x40
 8011fe8:	430a      	orrs	r2, r1
 8011fea:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8011fec:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8011fee:	0010      	movs	r0, r2
 8011ff0:	f7fa fe44 	bl	800cc7c <HAL_UART_TxCpltCallback>
}
 8011ff4:	e7fa      	b.n	8011fec <UART_DMATransmitCplt+0x24>
 8011ff6:	46c0      	nop			; (mov r8, r8)

08011ff8 <HAL_UART_TxHalfCpltCallback>:
 8011ff8:	4770      	bx	lr
 8011ffa:	46c0      	nop			; (mov r8, r8)

08011ffc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011ffc:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8011ffe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012000:	f7ff fffa 	bl	8011ff8 <HAL_UART_TxHalfCpltCallback>
}
 8012004:	bd10      	pop	{r4, pc}
 8012006:	46c0      	nop			; (mov r8, r8)

08012008 <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012008:	6803      	ldr	r3, [r0, #0]
{
 801200a:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801200c:	6819      	ldr	r1, [r3, #0]
 801200e:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012010:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012012:	400b      	ands	r3, r1
 8012014:	d10c      	bne.n	8012030 <UART_DMAReceiveCplt+0x28>
  {
    huart->RxXferCount = 0;
 8012016:	215a      	movs	r1, #90	; 0x5a

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012018:	2040      	movs	r0, #64	; 0x40
    huart->RxXferCount = 0;
 801201a:	5253      	strh	r3, [r2, r1]
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 801201c:	6811      	ldr	r1, [r2, #0]
 801201e:	688b      	ldr	r3, [r1, #8]
 8012020:	4383      	bics	r3, r0
 8012022:	608b      	str	r3, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012024:	2369      	movs	r3, #105	; 0x69
 8012026:	5cd1      	ldrb	r1, [r2, r3]
 8012028:	2932      	cmp	r1, #50	; 0x32
 801202a:	d005      	beq.n	8012038 <UART_DMAReceiveCplt+0x30>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 801202c:	2101      	movs	r1, #1
 801202e:	54d1      	strb	r1, [r2, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8012030:	0010      	movs	r0, r2
 8012032:	f7fa fe5f 	bl	800ccf4 <HAL_UART_RxCpltCallback>
}
 8012036:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012038:	3920      	subs	r1, #32
 801203a:	54d1      	strb	r1, [r2, r3]
 801203c:	e7f8      	b.n	8012030 <UART_DMAReceiveCplt+0x28>
 801203e:	46c0      	nop			; (mov r8, r8)

08012040 <HAL_UART_RxHalfCpltCallback>:
 8012040:	4770      	bx	lr
 8012042:	46c0      	nop			; (mov r8, r8)

08012044 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012044:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8012046:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012048:	f7ff fffa 	bl	8012040 <HAL_UART_RxHalfCpltCallback>
}
 801204c:	bd10      	pop	{r4, pc}
 801204e:	46c0      	nop			; (mov r8, r8)

08012050 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 8012050:	2300      	movs	r3, #0
 8012052:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012054:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8012056:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 8012058:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 801205a:	3a08      	subs	r2, #8
 801205c:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 801205e:	3369      	adds	r3, #105	; 0x69
 8012060:	3a51      	subs	r2, #81	; 0x51
 8012062:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012064:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012066:	320f      	adds	r2, #15
 8012068:	4313      	orrs	r3, r2
 801206a:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 801206c:	f7fa fe1e 	bl	800ccac <HAL_UART_ErrorCallback>
}
 8012070:	bd10      	pop	{r4, pc}
 8012072:	46c0      	nop			; (mov r8, r8)

08012074 <UART_SetConfig>:
{
 8012074:	b570      	push	{r4, r5, r6, lr}
 8012076:	0005      	movs	r5, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012078:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801207a:	69c1      	ldr	r1, [r0, #28]
 801207c:	6883      	ldr	r3, [r0, #8]
 801207e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012080:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012082:	4303      	orrs	r3, r0
 8012084:	6968      	ldr	r0, [r5, #20]
 8012086:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012088:	4861      	ldr	r0, [pc, #388]	; (8012210 <UART_SetConfig+0x19c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801208a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801208c:	4002      	ands	r2, r0
 801208e:	4313      	orrs	r3, r2
 8012090:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012092:	6863      	ldr	r3, [r4, #4]
 8012094:	4a5f      	ldr	r2, [pc, #380]	; (8012214 <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012096:	6a28      	ldr	r0, [r5, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012098:	4013      	ands	r3, r2
 801209a:	68ea      	ldr	r2, [r5, #12]
 801209c:	4313      	orrs	r3, r2
 801209e:	6063      	str	r3, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80120a0:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80120a2:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80120a4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80120a6:	485c      	ldr	r0, [pc, #368]	; (8012218 <UART_SetConfig+0x1a4>)
 80120a8:	4002      	ands	r2, r0
 80120aa:	4313      	orrs	r3, r2
 80120ac:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80120ae:	4b5b      	ldr	r3, [pc, #364]	; (801221c <UART_SetConfig+0x1a8>)
 80120b0:	429c      	cmp	r4, r3
 80120b2:	d044      	beq.n	801213e <UART_SetConfig+0xca>
 80120b4:	4b5a      	ldr	r3, [pc, #360]	; (8012220 <UART_SetConfig+0x1ac>)
 80120b6:	429c      	cmp	r4, r3
 80120b8:	d018      	beq.n	80120ec <UART_SetConfig+0x78>
 80120ba:	4b5a      	ldr	r3, [pc, #360]	; (8012224 <UART_SetConfig+0x1b0>)
 80120bc:	429c      	cmp	r4, r3
 80120be:	d100      	bne.n	80120c2 <UART_SetConfig+0x4e>
 80120c0:	e085      	b.n	80121ce <UART_SetConfig+0x15a>
 80120c2:	4b59      	ldr	r3, [pc, #356]	; (8012228 <UART_SetConfig+0x1b4>)
 80120c4:	429c      	cmp	r4, r3
 80120c6:	d031      	beq.n	801212c <UART_SetConfig+0xb8>
 80120c8:	4b58      	ldr	r3, [pc, #352]	; (801222c <UART_SetConfig+0x1b8>)
 80120ca:	429c      	cmp	r4, r3
 80120cc:	d02e      	beq.n	801212c <UART_SetConfig+0xb8>
 80120ce:	4b58      	ldr	r3, [pc, #352]	; (8012230 <UART_SetConfig+0x1bc>)
 80120d0:	429c      	cmp	r4, r3
 80120d2:	d02b      	beq.n	801212c <UART_SetConfig+0xb8>
 80120d4:	4b57      	ldr	r3, [pc, #348]	; (8012234 <UART_SetConfig+0x1c0>)
 80120d6:	429c      	cmp	r4, r3
 80120d8:	d028      	beq.n	801212c <UART_SetConfig+0xb8>
 80120da:	4b57      	ldr	r3, [pc, #348]	; (8012238 <UART_SetConfig+0x1c4>)
 80120dc:	429c      	cmp	r4, r3
 80120de:	d025      	beq.n	801212c <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80120e0:	2380      	movs	r3, #128	; 0x80
 80120e2:	021b      	lsls	r3, r3, #8
 80120e4:	4299      	cmp	r1, r3
 80120e6:	d050      	beq.n	801218a <UART_SetConfig+0x116>
        ret = HAL_ERROR;
 80120e8:	2001      	movs	r0, #1
 80120ea:	e01c      	b.n	8012126 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80120ec:	20c0      	movs	r0, #192	; 0xc0
 80120ee:	2280      	movs	r2, #128	; 0x80
 80120f0:	4b52      	ldr	r3, [pc, #328]	; (801223c <UART_SetConfig+0x1c8>)
 80120f2:	0280      	lsls	r0, r0, #10
 80120f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120f6:	0252      	lsls	r2, r2, #9
 80120f8:	4003      	ands	r3, r0
 80120fa:	4293      	cmp	r3, r2
 80120fc:	d049      	beq.n	8012192 <UART_SetConfig+0x11e>
 80120fe:	d913      	bls.n	8012128 <UART_SetConfig+0xb4>
 8012100:	2280      	movs	r2, #128	; 0x80
 8012102:	0292      	lsls	r2, r2, #10
 8012104:	4293      	cmp	r3, r2
 8012106:	d100      	bne.n	801210a <UART_SetConfig+0x96>
 8012108:	e070      	b.n	80121ec <UART_SetConfig+0x178>
 801210a:	4283      	cmp	r3, r0
 801210c:	d1e8      	bne.n	80120e0 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801210e:	2380      	movs	r3, #128	; 0x80
 8012110:	021b      	lsls	r3, r3, #8
 8012112:	4299      	cmp	r1, r3
 8012114:	d056      	beq.n	80121c4 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8012116:	6869      	ldr	r1, [r5, #4]
 8012118:	4849      	ldr	r0, [pc, #292]	; (8012240 <UART_SetConfig+0x1cc>)
 801211a:	f7ee f819 	bl	8000150 <__udivsi3>
 801211e:	0400      	lsls	r0, r0, #16
 8012120:	0c00      	lsrs	r0, r0, #16
 8012122:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012124:	2000      	movs	r0, #0
}
 8012126:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012128:	2b00      	cmp	r3, #0
 801212a:	d1d9      	bne.n	80120e0 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801212c:	2380      	movs	r3, #128	; 0x80
 801212e:	021b      	lsls	r3, r3, #8
 8012130:	4299      	cmp	r1, r3
 8012132:	d060      	beq.n	80121f6 <UART_SetConfig+0x182>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012134:	f7ff fac8 	bl	80116c8 <HAL_RCC_GetPCLK1Freq>
 8012138:	682c      	ldr	r4, [r5, #0]
 801213a:	6869      	ldr	r1, [r5, #4]
 801213c:	e7ed      	b.n	801211a <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801213e:	4b3f      	ldr	r3, [pc, #252]	; (801223c <UART_SetConfig+0x1c8>)
 8012140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012142:	2303      	movs	r3, #3
 8012144:	4013      	ands	r3, r2
 8012146:	4a3f      	ldr	r2, [pc, #252]	; (8012244 <UART_SetConfig+0x1d0>)
 8012148:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801214a:	2280      	movs	r2, #128	; 0x80
 801214c:	0212      	lsls	r2, r2, #8
 801214e:	4291      	cmp	r1, r2
 8012150:	d00e      	beq.n	8012170 <UART_SetConfig+0xfc>
    switch (clocksource)
 8012152:	2b02      	cmp	r3, #2
 8012154:	d0df      	beq.n	8012116 <UART_SetConfig+0xa2>
 8012156:	d956      	bls.n	8012206 <UART_SetConfig+0x192>
 8012158:	2b04      	cmp	r3, #4
 801215a:	d01e      	beq.n	801219a <UART_SetConfig+0x126>
 801215c:	2b08      	cmp	r3, #8
 801215e:	d1c3      	bne.n	80120e8 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012160:	2080      	movs	r0, #128	; 0x80
 8012162:	6869      	ldr	r1, [r5, #4]
 8012164:	0200      	lsls	r0, r0, #8
 8012166:	f7ed fff3 	bl	8000150 <__udivsi3>
 801216a:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801216c:	2000      	movs	r0, #0
        break;
 801216e:	e7da      	b.n	8012126 <UART_SetConfig+0xb2>
    switch (clocksource)
 8012170:	2b02      	cmp	r3, #2
 8012172:	d027      	beq.n	80121c4 <UART_SetConfig+0x150>
 8012174:	d907      	bls.n	8012186 <UART_SetConfig+0x112>
 8012176:	2b04      	cmp	r3, #4
 8012178:	d014      	beq.n	80121a4 <UART_SetConfig+0x130>
 801217a:	2b08      	cmp	r3, #8
 801217c:	d105      	bne.n	801218a <UART_SetConfig+0x116>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 801217e:	2080      	movs	r0, #128	; 0x80
 8012180:	6869      	ldr	r1, [r5, #4]
 8012182:	0240      	lsls	r0, r0, #9
 8012184:	e020      	b.n	80121c8 <UART_SetConfig+0x154>
    switch (clocksource)
 8012186:	2b00      	cmp	r3, #0
 8012188:	d035      	beq.n	80121f6 <UART_SetConfig+0x182>
 801218a:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 801218c:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 801218e:	60e3      	str	r3, [r4, #12]
 8012190:	e7c9      	b.n	8012126 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012192:	2380      	movs	r3, #128	; 0x80
 8012194:	021b      	lsls	r3, r3, #8
 8012196:	4299      	cmp	r1, r3
 8012198:	d004      	beq.n	80121a4 <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801219a:	f7ff fa3b 	bl	8011614 <HAL_RCC_GetSysClockFreq>
 801219e:	682c      	ldr	r4, [r5, #0]
 80121a0:	6869      	ldr	r1, [r5, #4]
 80121a2:	e7ba      	b.n	801211a <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80121a4:	f7ff fa36 	bl	8011614 <HAL_RCC_GetSysClockFreq>
 80121a8:	6869      	ldr	r1, [r5, #4]
 80121aa:	0040      	lsls	r0, r0, #1
 80121ac:	f7ed ffd0 	bl	8000150 <__udivsi3>
 80121b0:	682c      	ldr	r4, [r5, #0]
 80121b2:	220f      	movs	r2, #15
 80121b4:	0703      	lsls	r3, r0, #28
 80121b6:	0f5b      	lsrs	r3, r3, #29
 80121b8:	4390      	bics	r0, r2
 80121ba:	4303      	orrs	r3, r0
 80121bc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80121be:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 80121c0:	60e3      	str	r3, [r4, #12]
 80121c2:	e7b0      	b.n	8012126 <UART_SetConfig+0xb2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80121c4:	6869      	ldr	r1, [r5, #4]
 80121c6:	4820      	ldr	r0, [pc, #128]	; (8012248 <UART_SetConfig+0x1d4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80121c8:	f7ed ffc2 	bl	8000150 <__udivsi3>
 80121cc:	e7f1      	b.n	80121b2 <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80121ce:	20c0      	movs	r0, #192	; 0xc0
 80121d0:	2280      	movs	r2, #128	; 0x80
 80121d2:	4b1a      	ldr	r3, [pc, #104]	; (801223c <UART_SetConfig+0x1c8>)
 80121d4:	0300      	lsls	r0, r0, #12
 80121d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121d8:	02d2      	lsls	r2, r2, #11
 80121da:	4003      	ands	r3, r0
 80121dc:	4293      	cmp	r3, r2
 80121de:	d0d8      	beq.n	8012192 <UART_SetConfig+0x11e>
 80121e0:	d9a2      	bls.n	8012128 <UART_SetConfig+0xb4>
 80121e2:	2280      	movs	r2, #128	; 0x80
 80121e4:	0312      	lsls	r2, r2, #12
 80121e6:	4293      	cmp	r3, r2
 80121e8:	d000      	beq.n	80121ec <UART_SetConfig+0x178>
 80121ea:	e78e      	b.n	801210a <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80121ec:	2380      	movs	r3, #128	; 0x80
 80121ee:	021b      	lsls	r3, r3, #8
 80121f0:	4299      	cmp	r1, r3
 80121f2:	d1b5      	bne.n	8012160 <UART_SetConfig+0xec>
 80121f4:	e7c3      	b.n	801217e <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80121f6:	f7ff fa67 	bl	80116c8 <HAL_RCC_GetPCLK1Freq>
 80121fa:	6869      	ldr	r1, [r5, #4]
 80121fc:	0040      	lsls	r0, r0, #1
 80121fe:	f7ed ffa7 	bl	8000150 <__udivsi3>
 8012202:	682c      	ldr	r4, [r5, #0]
 8012204:	e7d5      	b.n	80121b2 <UART_SetConfig+0x13e>
    switch (clocksource)
 8012206:	2b00      	cmp	r3, #0
 8012208:	d094      	beq.n	8012134 <UART_SetConfig+0xc0>
        ret = HAL_ERROR;
 801220a:	2001      	movs	r0, #1
 801220c:	e78b      	b.n	8012126 <UART_SetConfig+0xb2>
 801220e:	46c0      	nop			; (mov r8, r8)
 8012210:	efff69f3 	.word	0xefff69f3
 8012214:	ffffcfff 	.word	0xffffcfff
 8012218:	fffff4ff 	.word	0xfffff4ff
 801221c:	40013800 	.word	0x40013800
 8012220:	40004400 	.word	0x40004400
 8012224:	40004800 	.word	0x40004800
 8012228:	40004c00 	.word	0x40004c00
 801222c:	40005000 	.word	0x40005000
 8012230:	40011400 	.word	0x40011400
 8012234:	40011800 	.word	0x40011800
 8012238:	40011c00 	.word	0x40011c00
 801223c:	40021000 	.word	0x40021000
 8012240:	007a1200 	.word	0x007a1200
 8012244:	08017b60 	.word	0x08017b60
 8012248:	00f42400 	.word	0x00f42400

0801224c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801224c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 801224e:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012250:	07da      	lsls	r2, r3, #31
 8012252:	d506      	bpl.n	8012262 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012254:	6801      	ldr	r1, [r0, #0]
 8012256:	4c28      	ldr	r4, [pc, #160]	; (80122f8 <UART_AdvFeatureConfig+0xac>)
 8012258:	684a      	ldr	r2, [r1, #4]
 801225a:	4022      	ands	r2, r4
 801225c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801225e:	4322      	orrs	r2, r4
 8012260:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012262:	079a      	lsls	r2, r3, #30
 8012264:	d506      	bpl.n	8012274 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012266:	6801      	ldr	r1, [r0, #0]
 8012268:	4c24      	ldr	r4, [pc, #144]	; (80122fc <UART_AdvFeatureConfig+0xb0>)
 801226a:	684a      	ldr	r2, [r1, #4]
 801226c:	4022      	ands	r2, r4
 801226e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8012270:	4322      	orrs	r2, r4
 8012272:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012274:	075a      	lsls	r2, r3, #29
 8012276:	d506      	bpl.n	8012286 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012278:	6801      	ldr	r1, [r0, #0]
 801227a:	4c21      	ldr	r4, [pc, #132]	; (8012300 <UART_AdvFeatureConfig+0xb4>)
 801227c:	684a      	ldr	r2, [r1, #4]
 801227e:	4022      	ands	r2, r4
 8012280:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8012282:	4322      	orrs	r2, r4
 8012284:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012286:	071a      	lsls	r2, r3, #28
 8012288:	d506      	bpl.n	8012298 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801228a:	6801      	ldr	r1, [r0, #0]
 801228c:	4c1d      	ldr	r4, [pc, #116]	; (8012304 <UART_AdvFeatureConfig+0xb8>)
 801228e:	684a      	ldr	r2, [r1, #4]
 8012290:	4022      	ands	r2, r4
 8012292:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012294:	4322      	orrs	r2, r4
 8012296:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012298:	06da      	lsls	r2, r3, #27
 801229a:	d506      	bpl.n	80122aa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801229c:	6801      	ldr	r1, [r0, #0]
 801229e:	4c1a      	ldr	r4, [pc, #104]	; (8012308 <UART_AdvFeatureConfig+0xbc>)
 80122a0:	688a      	ldr	r2, [r1, #8]
 80122a2:	4022      	ands	r2, r4
 80122a4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80122a6:	4322      	orrs	r2, r4
 80122a8:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80122aa:	069a      	lsls	r2, r3, #26
 80122ac:	d506      	bpl.n	80122bc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80122ae:	6801      	ldr	r1, [r0, #0]
 80122b0:	4c16      	ldr	r4, [pc, #88]	; (801230c <UART_AdvFeatureConfig+0xc0>)
 80122b2:	688a      	ldr	r2, [r1, #8]
 80122b4:	4022      	ands	r2, r4
 80122b6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80122b8:	4322      	orrs	r2, r4
 80122ba:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80122bc:	065a      	lsls	r2, r3, #25
 80122be:	d50a      	bpl.n	80122d6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80122c0:	6801      	ldr	r1, [r0, #0]
 80122c2:	4d13      	ldr	r5, [pc, #76]	; (8012310 <UART_AdvFeatureConfig+0xc4>)
 80122c4:	684a      	ldr	r2, [r1, #4]
 80122c6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80122c8:	402a      	ands	r2, r5
 80122ca:	4322      	orrs	r2, r4
 80122cc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80122ce:	2280      	movs	r2, #128	; 0x80
 80122d0:	0352      	lsls	r2, r2, #13
 80122d2:	4294      	cmp	r4, r2
 80122d4:	d009      	beq.n	80122ea <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80122d6:	061b      	lsls	r3, r3, #24
 80122d8:	d506      	bpl.n	80122e8 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80122da:	6802      	ldr	r2, [r0, #0]
 80122dc:	490d      	ldr	r1, [pc, #52]	; (8012314 <UART_AdvFeatureConfig+0xc8>)
 80122de:	6853      	ldr	r3, [r2, #4]
 80122e0:	400b      	ands	r3, r1
 80122e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80122e4:	430b      	orrs	r3, r1
 80122e6:	6053      	str	r3, [r2, #4]
}
 80122e8:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80122ea:	684a      	ldr	r2, [r1, #4]
 80122ec:	4c0a      	ldr	r4, [pc, #40]	; (8012318 <UART_AdvFeatureConfig+0xcc>)
 80122ee:	4022      	ands	r2, r4
 80122f0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80122f2:	4322      	orrs	r2, r4
 80122f4:	604a      	str	r2, [r1, #4]
 80122f6:	e7ee      	b.n	80122d6 <UART_AdvFeatureConfig+0x8a>
 80122f8:	fffdffff 	.word	0xfffdffff
 80122fc:	fffeffff 	.word	0xfffeffff
 8012300:	fffbffff 	.word	0xfffbffff
 8012304:	ffff7fff 	.word	0xffff7fff
 8012308:	ffffefff 	.word	0xffffefff
 801230c:	ffffdfff 	.word	0xffffdfff
 8012310:	ffefffff 	.word	0xffefffff
 8012314:	fff7ffff 	.word	0xfff7ffff
 8012318:	ff9fffff 	.word	0xff9fffff

0801231c <UART_WaitOnFlagUntilTimeout>:
{
 801231c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801231e:	46c6      	mov	lr, r8
 8012320:	4690      	mov	r8, r2
 8012322:	b500      	push	{lr}
 8012324:	001d      	movs	r5, r3
 8012326:	0006      	movs	r6, r0
 8012328:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 801232a:	f7fd f8db 	bl	800f4e4 <HAL_GetTick>
  if(Status == RESET)
 801232e:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 8012330:	0007      	movs	r7, r0
  if(Status == RESET)
 8012332:	2b00      	cmp	r3, #0
 8012334:	d112      	bne.n	801235c <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012336:	6832      	ldr	r2, [r6, #0]
 8012338:	e001      	b.n	801233e <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 801233a:	1c6b      	adds	r3, r5, #1
 801233c:	d117      	bne.n	801236e <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 801233e:	69d3      	ldr	r3, [r2, #28]
 8012340:	4023      	ands	r3, r4
 8012342:	42a3      	cmp	r3, r4
 8012344:	d1f9      	bne.n	801233a <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8012346:	2000      	movs	r0, #0
}
 8012348:	bc04      	pop	{r2}
 801234a:	4690      	mov	r8, r2
 801234c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801234e:	2d00      	cmp	r5, #0
 8012350:	d015      	beq.n	801237e <UART_WaitOnFlagUntilTimeout+0x62>
 8012352:	f7fd f8c7 	bl	800f4e4 <HAL_GetTick>
 8012356:	1bc0      	subs	r0, r0, r7
 8012358:	42a8      	cmp	r0, r5
 801235a:	d80f      	bhi.n	801237c <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 801235c:	6832      	ldr	r2, [r6, #0]
 801235e:	e001      	b.n	8012364 <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 8012360:	1c6b      	adds	r3, r5, #1
 8012362:	d1f4      	bne.n	801234e <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8012364:	69d3      	ldr	r3, [r2, #28]
 8012366:	4023      	ands	r3, r4
 8012368:	42a3      	cmp	r3, r4
 801236a:	d0f9      	beq.n	8012360 <UART_WaitOnFlagUntilTimeout+0x44>
 801236c:	e7eb      	b.n	8012346 <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801236e:	2d00      	cmp	r5, #0
 8012370:	d005      	beq.n	801237e <UART_WaitOnFlagUntilTimeout+0x62>
 8012372:	f7fd f8b7 	bl	800f4e4 <HAL_GetTick>
 8012376:	1bc0      	subs	r0, r0, r7
 8012378:	42a8      	cmp	r0, r5
 801237a:	d9dc      	bls.n	8012336 <UART_WaitOnFlagUntilTimeout+0x1a>
 801237c:	6832      	ldr	r2, [r6, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801237e:	2180      	movs	r1, #128	; 0x80
 8012380:	6813      	ldr	r3, [r2, #0]
          return HAL_TIMEOUT;
 8012382:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012384:	438b      	bics	r3, r1
 8012386:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012388:	6813      	ldr	r3, [r2, #0]
 801238a:	3960      	subs	r1, #96	; 0x60
 801238c:	438b      	bics	r3, r1
 801238e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012390:	6813      	ldr	r3, [r2, #0]
 8012392:	4907      	ldr	r1, [pc, #28]	; (80123b0 <UART_WaitOnFlagUntilTimeout+0x94>)
 8012394:	400b      	ands	r3, r1
 8012396:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012398:	6893      	ldr	r3, [r2, #8]
 801239a:	3103      	adds	r1, #3
 801239c:	31ff      	adds	r1, #255	; 0xff
 801239e:	438b      	bics	r3, r1
 80123a0:	6093      	str	r3, [r2, #8]
          huart->State = HAL_UART_STATE_READY;
 80123a2:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 80123a4:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 80123a6:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 80123a8:	3b01      	subs	r3, #1
 80123aa:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80123ac:	e7cc      	b.n	8012348 <UART_WaitOnFlagUntilTimeout+0x2c>
 80123ae:	46c0      	nop			; (mov r8, r8)
 80123b0:	fffffeff 	.word	0xfffffeff

080123b4 <HAL_UART_Transmit>:
{
 80123b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123b6:	46c6      	mov	lr, r8
 80123b8:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80123ba:	2369      	movs	r3, #105	; 0x69
{
 80123bc:	b500      	push	{lr}
 80123be:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80123c0:	5cc1      	ldrb	r1, [r0, r3]
{
 80123c2:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80123c4:	2901      	cmp	r1, #1
 80123c6:	d003      	beq.n	80123d0 <HAL_UART_Transmit+0x1c>
 80123c8:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 80123ca:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80123cc:	2b22      	cmp	r3, #34	; 0x22
 80123ce:	d147      	bne.n	8012460 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 80123d0:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80123d2:	2d00      	cmp	r5, #0
 80123d4:	d044      	beq.n	8012460 <HAL_UART_Transmit+0xac>
 80123d6:	2a00      	cmp	r2, #0
 80123d8:	d042      	beq.n	8012460 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80123da:	2368      	movs	r3, #104	; 0x68
 80123dc:	5ce1      	ldrb	r1, [r4, r3]
 80123de:	2901      	cmp	r1, #1
 80123e0:	d046      	beq.n	8012470 <HAL_UART_Transmit+0xbc>
 80123e2:	54e0      	strb	r0, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123e4:	2300      	movs	r3, #0
 80123e6:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80123e8:	3369      	adds	r3, #105	; 0x69
 80123ea:	5ce1      	ldrb	r1, [r4, r3]
 80123ec:	2922      	cmp	r1, #34	; 0x22
 80123ee:	d03a      	beq.n	8012466 <HAL_UART_Transmit+0xb2>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80123f0:	2112      	movs	r1, #18
 80123f2:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80123f4:	2350      	movs	r3, #80	; 0x50
 80123f6:	52e2      	strh	r2, [r4, r3]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80123f8:	2380      	movs	r3, #128	; 0x80
 80123fa:	015b      	lsls	r3, r3, #5
      huart->TxXferCount--;
 80123fc:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80123fe:	4698      	mov	r8, r3
 8012400:	e005      	b.n	801240e <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8012402:	782a      	ldrb	r2, [r5, #0]
 8012404:	3501      	adds	r5, #1
 8012406:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8012408:	5ba2      	ldrh	r2, [r4, r6]
 801240a:	2a00      	cmp	r2, #0
 801240c:	d018      	beq.n	8012440 <HAL_UART_Transmit+0x8c>
      huart->TxXferCount--;
 801240e:	3a01      	subs	r2, #1
 8012410:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8012412:	003b      	movs	r3, r7
 8012414:	2200      	movs	r2, #0
 8012416:	2180      	movs	r1, #128	; 0x80
 8012418:	0020      	movs	r0, r4
 801241a:	f7ff ff7f 	bl	801231c <UART_WaitOnFlagUntilTimeout>
 801241e:	2800      	cmp	r0, #0
 8012420:	d124      	bne.n	801246c <HAL_UART_Transmit+0xb8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012422:	68a2      	ldr	r2, [r4, #8]
 8012424:	6823      	ldr	r3, [r4, #0]
 8012426:	4542      	cmp	r2, r8
 8012428:	d1eb      	bne.n	8012402 <HAL_UART_Transmit+0x4e>
 801242a:	6922      	ldr	r2, [r4, #16]
 801242c:	2a00      	cmp	r2, #0
 801242e:	d1e8      	bne.n	8012402 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012430:	882a      	ldrh	r2, [r5, #0]
        pData += 2;
 8012432:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012434:	05d2      	lsls	r2, r2, #23
 8012436:	0dd2      	lsrs	r2, r2, #23
 8012438:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 801243a:	5ba2      	ldrh	r2, [r4, r6]
 801243c:	2a00      	cmp	r2, #0
 801243e:	d1e6      	bne.n	801240e <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8012440:	003b      	movs	r3, r7
 8012442:	2140      	movs	r1, #64	; 0x40
 8012444:	0020      	movs	r0, r4
 8012446:	f7ff ff69 	bl	801231c <UART_WaitOnFlagUntilTimeout>
 801244a:	2800      	cmp	r0, #0
 801244c:	d10e      	bne.n	801246c <HAL_UART_Transmit+0xb8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801244e:	2369      	movs	r3, #105	; 0x69
 8012450:	5ce2      	ldrb	r2, [r4, r3]
 8012452:	2a32      	cmp	r2, #50	; 0x32
 8012454:	d00e      	beq.n	8012474 <HAL_UART_Transmit+0xc0>
      huart->State = HAL_UART_STATE_READY;
 8012456:	2201      	movs	r2, #1
 8012458:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 801245a:	2368      	movs	r3, #104	; 0x68
 801245c:	2200      	movs	r2, #0
 801245e:	54e2      	strb	r2, [r4, r3]
}
 8012460:	bc04      	pop	{r2}
 8012462:	4690      	mov	r8, r2
 8012464:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012466:	3110      	adds	r1, #16
 8012468:	54e1      	strb	r1, [r4, r3]
 801246a:	e7c3      	b.n	80123f4 <HAL_UART_Transmit+0x40>
        return HAL_TIMEOUT;
 801246c:	2003      	movs	r0, #3
 801246e:	e7f7      	b.n	8012460 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 8012470:	2002      	movs	r0, #2
 8012472:	e7f5      	b.n	8012460 <HAL_UART_Transmit+0xac>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012474:	3a10      	subs	r2, #16
 8012476:	54e2      	strb	r2, [r4, r3]
 8012478:	e7ef      	b.n	801245a <HAL_UART_Transmit+0xa6>
 801247a:	46c0      	nop			; (mov r8, r8)

0801247c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801247c:	2300      	movs	r3, #0
{
 801247e:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012480:	4a1a      	ldr	r2, [pc, #104]	; (80124ec <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012482:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012484:	6803      	ldr	r3, [r0, #0]
{
 8012486:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012488:	4293      	cmp	r3, r2
 801248a:	d00d      	beq.n	80124a8 <UART_CheckIdleState+0x2c>
 801248c:	4a18      	ldr	r2, [pc, #96]	; (80124f0 <UART_CheckIdleState+0x74>)
 801248e:	4293      	cmp	r3, r2
 8012490:	d00a      	beq.n	80124a8 <UART_CheckIdleState+0x2c>
 8012492:	4a18      	ldr	r2, [pc, #96]	; (80124f4 <UART_CheckIdleState+0x78>)
 8012494:	4293      	cmp	r3, r2
 8012496:	d007      	beq.n	80124a8 <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 8012498:	2369      	movs	r3, #105	; 0x69
 801249a:	2201      	movs	r2, #1
 801249c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 801249e:	2200      	movs	r2, #0
  return HAL_OK;
 80124a0:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 80124a2:	3b01      	subs	r3, #1
 80124a4:	54e2      	strb	r2, [r4, r3]
}
 80124a6:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80124a8:	681a      	ldr	r2, [r3, #0]
 80124aa:	0712      	lsls	r2, r2, #28
 80124ac:	d40e      	bmi.n	80124cc <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	075b      	lsls	r3, r3, #29
 80124b2:	d5f1      	bpl.n	8012498 <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80124b4:	23fa      	movs	r3, #250	; 0xfa
 80124b6:	2180      	movs	r1, #128	; 0x80
 80124b8:	009b      	lsls	r3, r3, #2
 80124ba:	2200      	movs	r2, #0
 80124bc:	03c9      	lsls	r1, r1, #15
 80124be:	0020      	movs	r0, r4
 80124c0:	f7ff ff2c 	bl	801231c <UART_WaitOnFlagUntilTimeout>
 80124c4:	2800      	cmp	r0, #0
 80124c6:	d0e7      	beq.n	8012498 <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 80124c8:	2003      	movs	r0, #3
 80124ca:	e7ec      	b.n	80124a6 <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80124cc:	23fa      	movs	r3, #250	; 0xfa
 80124ce:	2180      	movs	r1, #128	; 0x80
 80124d0:	009b      	lsls	r3, r3, #2
 80124d2:	2200      	movs	r2, #0
 80124d4:	0389      	lsls	r1, r1, #14
 80124d6:	0020      	movs	r0, r4
 80124d8:	f7ff ff20 	bl	801231c <UART_WaitOnFlagUntilTimeout>
 80124dc:	2800      	cmp	r0, #0
 80124de:	d1f3      	bne.n	80124c8 <UART_CheckIdleState+0x4c>
 80124e0:	6823      	ldr	r3, [r4, #0]
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	075b      	lsls	r3, r3, #29
 80124e6:	d5d7      	bpl.n	8012498 <UART_CheckIdleState+0x1c>
 80124e8:	e7e4      	b.n	80124b4 <UART_CheckIdleState+0x38>
 80124ea:	46c0      	nop			; (mov r8, r8)
 80124ec:	40013800 	.word	0x40013800
 80124f0:	40004400 	.word	0x40004400
 80124f4:	40004800 	.word	0x40004800

080124f8 <HAL_UART_Init>:
{
 80124f8:	b510      	push	{r4, lr}
 80124fa:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80124fc:	d02a      	beq.n	8012554 <HAL_UART_Init+0x5c>
  if(huart->State == HAL_UART_STATE_RESET)
 80124fe:	2369      	movs	r3, #105	; 0x69
 8012500:	5cc3      	ldrb	r3, [r0, r3]
 8012502:	b2db      	uxtb	r3, r3
 8012504:	2b00      	cmp	r3, #0
 8012506:	d020      	beq.n	801254a <HAL_UART_Init+0x52>
  huart->State = HAL_UART_STATE_BUSY;
 8012508:	2369      	movs	r3, #105	; 0x69
 801250a:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 801250c:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 801250e:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8012510:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012512:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8012514:	6813      	ldr	r3, [r2, #0]
 8012516:	438b      	bics	r3, r1
 8012518:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801251a:	f7ff fdab 	bl	8012074 <UART_SetConfig>
 801251e:	2801      	cmp	r0, #1
 8012520:	d018      	beq.n	8012554 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012524:	2b00      	cmp	r3, #0
 8012526:	d117      	bne.n	8012558 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012528:	6823      	ldr	r3, [r4, #0]
 801252a:	490d      	ldr	r1, [pc, #52]	; (8012560 <HAL_UART_Init+0x68>)
 801252c:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 801252e:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012530:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012532:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012534:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012536:	689a      	ldr	r2, [r3, #8]
 8012538:	438a      	bics	r2, r1
 801253a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 801253c:	681a      	ldr	r2, [r3, #0]
 801253e:	3929      	subs	r1, #41	; 0x29
 8012540:	430a      	orrs	r2, r1
 8012542:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012544:	f7ff ff9a 	bl	801247c <UART_CheckIdleState>
}
 8012548:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 801254a:	2268      	movs	r2, #104	; 0x68
 801254c:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 801254e:	f7fa fe77 	bl	800d240 <HAL_UART_MspInit>
 8012552:	e7d9      	b.n	8012508 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8012554:	2001      	movs	r0, #1
 8012556:	e7f7      	b.n	8012548 <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 8012558:	0020      	movs	r0, r4
 801255a:	f7ff fe77 	bl	801224c <UART_AdvFeatureConfig>
 801255e:	e7e3      	b.n	8012528 <HAL_UART_Init+0x30>
 8012560:	ffffb7ff 	.word	0xffffb7ff

08012564 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012564:	2269      	movs	r2, #105	; 0x69
{
 8012566:	b530      	push	{r4, r5, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012568:	5c81      	ldrb	r1, [r0, r2]
{
 801256a:	0003      	movs	r3, r0
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801256c:	2912      	cmp	r1, #18
 801256e:	d003      	beq.n	8012578 <UART_Transmit_IT+0x14>
 8012570:	5c82      	ldrb	r2, [r0, r2]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8012572:	2002      	movs	r0, #2
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012574:	2a32      	cmp	r2, #50	; 0x32
 8012576:	d112      	bne.n	801259e <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8012578:	2252      	movs	r2, #82	; 0x52
 801257a:	5a9a      	ldrh	r2, [r3, r2]
 801257c:	6819      	ldr	r1, [r3, #0]
 801257e:	2a00      	cmp	r2, #0
 8012580:	d00e      	beq.n	80125a0 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012582:	2480      	movs	r4, #128	; 0x80
 8012584:	689d      	ldr	r5, [r3, #8]
 8012586:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012588:	0164      	lsls	r4, r4, #5
 801258a:	42a5      	cmp	r5, r4
 801258c:	d012      	beq.n	80125b4 <UART_Transmit_IT+0x50>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 801258e:	1c44      	adds	r4, r0, #1
 8012590:	64dc      	str	r4, [r3, #76]	; 0x4c
 8012592:	7800      	ldrb	r0, [r0, #0]
 8012594:	8508      	strh	r0, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8012596:	2152      	movs	r1, #82	; 0x52
      return HAL_OK;
 8012598:	2000      	movs	r0, #0
      huart->TxXferCount--;
 801259a:	3a01      	subs	r2, #1
 801259c:	525a      	strh	r2, [r3, r1]
  }
}
 801259e:	bd30      	pop	{r4, r5, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80125a0:	680b      	ldr	r3, [r1, #0]
 80125a2:	3280      	adds	r2, #128	; 0x80
 80125a4:	4393      	bics	r3, r2
 80125a6:	600b      	str	r3, [r1, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80125a8:	680b      	ldr	r3, [r1, #0]
 80125aa:	3a40      	subs	r2, #64	; 0x40
 80125ac:	4313      	orrs	r3, r2
 80125ae:	600b      	str	r3, [r1, #0]
      return HAL_OK;
 80125b0:	2000      	movs	r0, #0
 80125b2:	e7f4      	b.n	801259e <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80125b4:	691c      	ldr	r4, [r3, #16]
 80125b6:	2c00      	cmp	r4, #0
 80125b8:	d1e9      	bne.n	801258e <UART_Transmit_IT+0x2a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80125ba:	8804      	ldrh	r4, [r0, #0]
        huart->pTxBuffPtr += 2;
 80125bc:	3002      	adds	r0, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80125be:	05e4      	lsls	r4, r4, #23
 80125c0:	0de4      	lsrs	r4, r4, #23
 80125c2:	850c      	strh	r4, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80125c4:	64d8      	str	r0, [r3, #76]	; 0x4c
 80125c6:	e7e6      	b.n	8012596 <UART_Transmit_IT+0x32>

080125c8 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80125c8:	2140      	movs	r1, #64	; 0x40
 80125ca:	6803      	ldr	r3, [r0, #0]
{
 80125cc:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80125ce:	681a      	ldr	r2, [r3, #0]
 80125d0:	438a      	bics	r2, r1
 80125d2:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80125d4:	2269      	movs	r2, #105	; 0x69
 80125d6:	5c81      	ldrb	r1, [r0, r2]
 80125d8:	2932      	cmp	r1, #50	; 0x32
 80125da:	d008      	beq.n	80125ee <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80125dc:	2401      	movs	r4, #1
 80125de:	6899      	ldr	r1, [r3, #8]
 80125e0:	43a1      	bics	r1, r4
 80125e2:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 80125e4:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 80125e6:	f7fa fb49 	bl	800cc7c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80125ea:	2000      	movs	r0, #0
 80125ec:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 80125ee:	2322      	movs	r3, #34	; 0x22
 80125f0:	5483      	strb	r3, [r0, r2]
 80125f2:	e7f8      	b.n	80125e6 <UART_EndTransmit_IT+0x1e>

080125f4 <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80125f4:	2369      	movs	r3, #105	; 0x69
{
 80125f6:	b570      	push	{r4, r5, r6, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80125f8:	5cc2      	ldrb	r2, [r0, r3]
 80125fa:	2a22      	cmp	r2, #34	; 0x22
 80125fc:	d003      	beq.n	8012606 <UART_Receive_IT+0x12>
 80125fe:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012600:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012602:	2b32      	cmp	r3, #50	; 0x32
 8012604:	d12b      	bne.n	801265e <UART_Receive_IT+0x6a>
  uint16_t uhMask = huart->Mask;
 8012606:	235c      	movs	r3, #92	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012608:	2180      	movs	r1, #128	; 0x80
 801260a:	6885      	ldr	r5, [r0, #8]
  uint16_t uhMask = huart->Mask;
 801260c:	5ac3      	ldrh	r3, [r0, r3]
 801260e:	6804      	ldr	r4, [r0, #0]
 8012610:	6d42      	ldr	r2, [r0, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012612:	0149      	lsls	r1, r1, #5
 8012614:	428d      	cmp	r5, r1
 8012616:	d024      	beq.n	8012662 <UART_Receive_IT+0x6e>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012618:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801261a:	1c54      	adds	r4, r2, #1
 801261c:	400b      	ands	r3, r1
 801261e:	6544      	str	r4, [r0, #84]	; 0x54
 8012620:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8012622:	225a      	movs	r2, #90	; 0x5a
 8012624:	5a83      	ldrh	r3, [r0, r2]
 8012626:	3b01      	subs	r3, #1
 8012628:	b29b      	uxth	r3, r3
 801262a:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 801262c:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 801262e:	2b00      	cmp	r3, #0
 8012630:	d115      	bne.n	801265e <UART_Receive_IT+0x6a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012632:	2120      	movs	r1, #32
 8012634:	6803      	ldr	r3, [r0, #0]
 8012636:	681a      	ldr	r2, [r3, #0]
 8012638:	438a      	bics	r2, r1
 801263a:	601a      	str	r2, [r3, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801263c:	2269      	movs	r2, #105	; 0x69
 801263e:	5c81      	ldrb	r1, [r0, r2]
 8012640:	2932      	cmp	r1, #50	; 0x32
 8012642:	d017      	beq.n	8012674 <UART_Receive_IT+0x80>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012644:	6819      	ldr	r1, [r3, #0]
 8012646:	4c0d      	ldr	r4, [pc, #52]	; (801267c <UART_Receive_IT+0x88>)
 8012648:	4021      	ands	r1, r4
 801264a:	6019      	str	r1, [r3, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801264c:	6899      	ldr	r1, [r3, #8]
 801264e:	3403      	adds	r4, #3
 8012650:	34ff      	adds	r4, #255	; 0xff
 8012652:	43a1      	bics	r1, r4
 8012654:	6099      	str	r1, [r3, #8]
        huart->State = HAL_UART_STATE_READY;
 8012656:	5484      	strb	r4, [r0, r2]
      HAL_UART_RxCpltCallback(huart);
 8012658:	f7fa fb4c 	bl	800ccf4 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 801265c:	2200      	movs	r2, #0
  }
}
 801265e:	0010      	movs	r0, r2
 8012660:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012662:	6901      	ldr	r1, [r0, #16]
 8012664:	2900      	cmp	r1, #0
 8012666:	d1d7      	bne.n	8012618 <UART_Receive_IT+0x24>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8012668:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801266a:	400b      	ands	r3, r1
 801266c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 801266e:	3202      	adds	r2, #2
 8012670:	6542      	str	r2, [r0, #84]	; 0x54
 8012672:	e7d6      	b.n	8012622 <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8012674:	2312      	movs	r3, #18
 8012676:	5483      	strb	r3, [r0, r2]
 8012678:	e7ee      	b.n	8012658 <UART_Receive_IT+0x64>
 801267a:	46c0      	nop			; (mov r8, r8)
 801267c:	fffffeff 	.word	0xfffffeff

08012680 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8012680:	4770      	bx	lr
 8012682:	46c0      	nop			; (mov r8, r8)

08012684 <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012684:	2201      	movs	r2, #1
 8012686:	6803      	ldr	r3, [r0, #0]
{
 8012688:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 801268a:	69d9      	ldr	r1, [r3, #28]
{
 801268c:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 801268e:	420a      	tst	r2, r1
 8012690:	d002      	beq.n	8012698 <HAL_UART_IRQHandler+0x14>
 8012692:	6819      	ldr	r1, [r3, #0]
 8012694:	05c9      	lsls	r1, r1, #23
 8012696:	d456      	bmi.n	8012746 <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012698:	2202      	movs	r2, #2
 801269a:	69d9      	ldr	r1, [r3, #28]
 801269c:	420a      	tst	r2, r1
 801269e:	d003      	beq.n	80126a8 <HAL_UART_IRQHandler+0x24>
 80126a0:	2101      	movs	r1, #1
 80126a2:	6898      	ldr	r0, [r3, #8]
 80126a4:	4201      	tst	r1, r0
 80126a6:	d146      	bne.n	8012736 <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80126a8:	2204      	movs	r2, #4
 80126aa:	69d9      	ldr	r1, [r3, #28]
 80126ac:	420a      	tst	r2, r1
 80126ae:	d003      	beq.n	80126b8 <HAL_UART_IRQHandler+0x34>
 80126b0:	2101      	movs	r1, #1
 80126b2:	6898      	ldr	r0, [r3, #8]
 80126b4:	4201      	tst	r1, r0
 80126b6:	d136      	bne.n	8012726 <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80126b8:	2208      	movs	r2, #8
 80126ba:	69d9      	ldr	r1, [r3, #28]
 80126bc:	420a      	tst	r2, r1
 80126be:	d003      	beq.n	80126c8 <HAL_UART_IRQHandler+0x44>
 80126c0:	2101      	movs	r1, #1
 80126c2:	6898      	ldr	r0, [r3, #8]
 80126c4:	4201      	tst	r1, r0
 80126c6:	d120      	bne.n	801270a <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80126c8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80126ca:	2a00      	cmp	r2, #0
 80126cc:	d126      	bne.n	801271c <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80126ce:	2280      	movs	r2, #128	; 0x80
 80126d0:	69d9      	ldr	r1, [r3, #28]
 80126d2:	0352      	lsls	r2, r2, #13
 80126d4:	4211      	tst	r1, r2
 80126d6:	d002      	beq.n	80126de <HAL_UART_IRQHandler+0x5a>
 80126d8:	6899      	ldr	r1, [r3, #8]
 80126da:	0249      	lsls	r1, r1, #9
 80126dc:	d43e      	bmi.n	801275c <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80126de:	2220      	movs	r2, #32
 80126e0:	69d9      	ldr	r1, [r3, #28]
 80126e2:	420a      	tst	r2, r1
 80126e4:	d002      	beq.n	80126ec <HAL_UART_IRQHandler+0x68>
 80126e6:	6819      	ldr	r1, [r3, #0]
 80126e8:	420a      	tst	r2, r1
 80126ea:	d140      	bne.n	801276e <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 80126ec:	2280      	movs	r2, #128	; 0x80
 80126ee:	69d9      	ldr	r1, [r3, #28]
 80126f0:	420a      	tst	r2, r1
 80126f2:	d002      	beq.n	80126fa <HAL_UART_IRQHandler+0x76>
 80126f4:	6819      	ldr	r1, [r3, #0]
 80126f6:	420a      	tst	r2, r1
 80126f8:	d142      	bne.n	8012780 <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 80126fa:	2240      	movs	r2, #64	; 0x40
 80126fc:	69d9      	ldr	r1, [r3, #28]
 80126fe:	420a      	tst	r2, r1
 8012700:	d002      	beq.n	8012708 <HAL_UART_IRQHandler+0x84>
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	421a      	tst	r2, r3
 8012706:	d125      	bne.n	8012754 <HAL_UART_IRQHandler+0xd0>
}
 8012708:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 801270a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801270c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801270e:	4302      	orrs	r2, r0
 8012710:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012712:	2269      	movs	r2, #105	; 0x69
 8012714:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012716:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012718:	2a00      	cmp	r2, #0
 801271a:	d0d8      	beq.n	80126ce <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 801271c:	0020      	movs	r0, r4
 801271e:	f7fa fac5 	bl	800ccac <HAL_UART_ErrorCallback>
 8012722:	6823      	ldr	r3, [r4, #0]
 8012724:	e7d3      	b.n	80126ce <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012726:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8012728:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 801272a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801272c:	4302      	orrs	r2, r0
 801272e:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012730:	2269      	movs	r2, #105	; 0x69
 8012732:	54a1      	strb	r1, [r4, r2]
 8012734:	e7c0      	b.n	80126b8 <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012736:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8012738:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 801273a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801273c:	4302      	orrs	r2, r0
 801273e:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012740:	2269      	movs	r2, #105	; 0x69
 8012742:	54a1      	strb	r1, [r4, r2]
 8012744:	e7b0      	b.n	80126a8 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8012746:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012748:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 801274a:	4311      	orrs	r1, r2
 801274c:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801274e:	2169      	movs	r1, #105	; 0x69
 8012750:	5442      	strb	r2, [r0, r1]
 8012752:	e7a1      	b.n	8012698 <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 8012754:	0020      	movs	r0, r4
 8012756:	f7ff ff37 	bl	80125c8 <UART_EndTransmit_IT>
}
 801275a:	e7d5      	b.n	8012708 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 801275c:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 801275e:	2369      	movs	r3, #105	; 0x69
 8012760:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 8012762:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 8012764:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8012766:	f7ff ff8b 	bl	8012680 <HAL_UARTEx_WakeupCallback>
 801276a:	6823      	ldr	r3, [r4, #0]
 801276c:	e7b7      	b.n	80126de <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 801276e:	0020      	movs	r0, r4
 8012770:	f7ff ff40 	bl	80125f4 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012774:	2108      	movs	r1, #8
 8012776:	6823      	ldr	r3, [r4, #0]
 8012778:	699a      	ldr	r2, [r3, #24]
 801277a:	430a      	orrs	r2, r1
 801277c:	619a      	str	r2, [r3, #24]
 801277e:	e7b5      	b.n	80126ec <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 8012780:	0020      	movs	r0, r4
 8012782:	f7ff feef 	bl	8012564 <UART_Transmit_IT>
 8012786:	6823      	ldr	r3, [r4, #0]
 8012788:	e7b7      	b.n	80126fa <HAL_UART_IRQHandler+0x76>
 801278a:	46c0      	nop			; (mov r8, r8)

0801278c <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 801278c:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 801278e:	f7f1 f8a7 	bl	80038e0 <Module_Init>
 8012792:	e7fe      	b.n	8012792 <main+0x6>

08012794 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8012794:	e7fe      	b.n	8012794 <UserTask>
 8012796:	46c0      	nop			; (mov r8, r8)

08012798 <atof>:
 8012798:	b510      	push	{r4, lr}
 801279a:	2100      	movs	r1, #0
 801279c:	f001 fb74 	bl	8013e88 <strtod>
 80127a0:	bd10      	pop	{r4, pc}

080127a2 <atoi>:
 80127a2:	b510      	push	{r4, lr}
 80127a4:	220a      	movs	r2, #10
 80127a6:	2100      	movs	r1, #0
 80127a8:	f001 fc3a 	bl	8014020 <strtol>
 80127ac:	bd10      	pop	{r4, pc}

080127ae <atol>:
 80127ae:	b510      	push	{r4, lr}
 80127b0:	220a      	movs	r2, #10
 80127b2:	2100      	movs	r1, #0
 80127b4:	f001 fc34 	bl	8014020 <strtol>
 80127b8:	bd10      	pop	{r4, pc}
	...

080127bc <calloc>:
 80127bc:	b510      	push	{r4, lr}
 80127be:	4b03      	ldr	r3, [pc, #12]	; (80127cc <calloc+0x10>)
 80127c0:	000a      	movs	r2, r1
 80127c2:	0001      	movs	r1, r0
 80127c4:	6818      	ldr	r0, [r3, #0]
 80127c6:	f000 f803 	bl	80127d0 <_calloc_r>
 80127ca:	bd10      	pop	{r4, pc}
 80127cc:	200000d8 	.word	0x200000d8

080127d0 <_calloc_r>:
 80127d0:	b510      	push	{r4, lr}
 80127d2:	4351      	muls	r1, r2
 80127d4:	f000 f872 	bl	80128bc <_malloc_r>
 80127d8:	1e04      	subs	r4, r0, #0
 80127da:	d01a      	beq.n	8012812 <_calloc_r+0x42>
 80127dc:	0003      	movs	r3, r0
 80127de:	3b08      	subs	r3, #8
 80127e0:	685a      	ldr	r2, [r3, #4]
 80127e2:	2303      	movs	r3, #3
 80127e4:	439a      	bics	r2, r3
 80127e6:	3a04      	subs	r2, #4
 80127e8:	2a24      	cmp	r2, #36	; 0x24
 80127ea:	d819      	bhi.n	8012820 <_calloc_r+0x50>
 80127ec:	0003      	movs	r3, r0
 80127ee:	2a13      	cmp	r2, #19
 80127f0:	d90b      	bls.n	801280a <_calloc_r+0x3a>
 80127f2:	2100      	movs	r1, #0
 80127f4:	3308      	adds	r3, #8
 80127f6:	6001      	str	r1, [r0, #0]
 80127f8:	6041      	str	r1, [r0, #4]
 80127fa:	2a1b      	cmp	r2, #27
 80127fc:	d905      	bls.n	801280a <_calloc_r+0x3a>
 80127fe:	6081      	str	r1, [r0, #8]
 8012800:	60c1      	str	r1, [r0, #12]
 8012802:	2a24      	cmp	r2, #36	; 0x24
 8012804:	d007      	beq.n	8012816 <_calloc_r+0x46>
 8012806:	0003      	movs	r3, r0
 8012808:	3310      	adds	r3, #16
 801280a:	2200      	movs	r2, #0
 801280c:	601a      	str	r2, [r3, #0]
 801280e:	605a      	str	r2, [r3, #4]
 8012810:	609a      	str	r2, [r3, #8]
 8012812:	0020      	movs	r0, r4
 8012814:	bd10      	pop	{r4, pc}
 8012816:	0003      	movs	r3, r0
 8012818:	6101      	str	r1, [r0, #16]
 801281a:	3318      	adds	r3, #24
 801281c:	6141      	str	r1, [r0, #20]
 801281e:	e7f4      	b.n	801280a <_calloc_r+0x3a>
 8012820:	2100      	movs	r1, #0
 8012822:	f000 fa8d 	bl	8012d40 <memset>
 8012826:	e7f4      	b.n	8012812 <_calloc_r+0x42>

08012828 <__libc_init_array>:
 8012828:	b570      	push	{r4, r5, r6, lr}
 801282a:	2600      	movs	r6, #0
 801282c:	4d0c      	ldr	r5, [pc, #48]	; (8012860 <__libc_init_array+0x38>)
 801282e:	4c0d      	ldr	r4, [pc, #52]	; (8012864 <__libc_init_array+0x3c>)
 8012830:	1b64      	subs	r4, r4, r5
 8012832:	10a4      	asrs	r4, r4, #2
 8012834:	42a6      	cmp	r6, r4
 8012836:	d109      	bne.n	801284c <__libc_init_array+0x24>
 8012838:	2600      	movs	r6, #0
 801283a:	f004 fe41 	bl	80174c0 <_init>
 801283e:	4d0a      	ldr	r5, [pc, #40]	; (8012868 <__libc_init_array+0x40>)
 8012840:	4c0a      	ldr	r4, [pc, #40]	; (801286c <__libc_init_array+0x44>)
 8012842:	1b64      	subs	r4, r4, r5
 8012844:	10a4      	asrs	r4, r4, #2
 8012846:	42a6      	cmp	r6, r4
 8012848:	d105      	bne.n	8012856 <__libc_init_array+0x2e>
 801284a:	bd70      	pop	{r4, r5, r6, pc}
 801284c:	00b3      	lsls	r3, r6, #2
 801284e:	58eb      	ldr	r3, [r5, r3]
 8012850:	4798      	blx	r3
 8012852:	3601      	adds	r6, #1
 8012854:	e7ee      	b.n	8012834 <__libc_init_array+0xc>
 8012856:	00b3      	lsls	r3, r6, #2
 8012858:	58eb      	ldr	r3, [r5, r3]
 801285a:	4798      	blx	r3
 801285c:	3601      	adds	r6, #1
 801285e:	e7f2      	b.n	8012846 <__libc_init_array+0x1e>
 8012860:	0801a87c 	.word	0x0801a87c
 8012864:	0801a87c 	.word	0x0801a87c
 8012868:	0801a87c 	.word	0x0801a87c
 801286c:	0801a884 	.word	0x0801a884

08012870 <__locale_ctype_ptr_l>:
 8012870:	30ec      	adds	r0, #236	; 0xec
 8012872:	6800      	ldr	r0, [r0, #0]
 8012874:	4770      	bx	lr
	...

08012878 <__locale_ctype_ptr>:
 8012878:	4b04      	ldr	r3, [pc, #16]	; (801288c <__locale_ctype_ptr+0x14>)
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801287e:	2b00      	cmp	r3, #0
 8012880:	d100      	bne.n	8012884 <__locale_ctype_ptr+0xc>
 8012882:	4b03      	ldr	r3, [pc, #12]	; (8012890 <__locale_ctype_ptr+0x18>)
 8012884:	33ec      	adds	r3, #236	; 0xec
 8012886:	6818      	ldr	r0, [r3, #0]
 8012888:	4770      	bx	lr
 801288a:	46c0      	nop			; (mov r8, r8)
 801288c:	200000d8 	.word	0x200000d8
 8012890:	20000508 	.word	0x20000508

08012894 <malloc>:
 8012894:	b510      	push	{r4, lr}
 8012896:	4b03      	ldr	r3, [pc, #12]	; (80128a4 <malloc+0x10>)
 8012898:	0001      	movs	r1, r0
 801289a:	6818      	ldr	r0, [r3, #0]
 801289c:	f000 f80e 	bl	80128bc <_malloc_r>
 80128a0:	bd10      	pop	{r4, pc}
 80128a2:	46c0      	nop			; (mov r8, r8)
 80128a4:	200000d8 	.word	0x200000d8

080128a8 <free>:
 80128a8:	b510      	push	{r4, lr}
 80128aa:	4b03      	ldr	r3, [pc, #12]	; (80128b8 <free+0x10>)
 80128ac:	0001      	movs	r1, r0
 80128ae:	6818      	ldr	r0, [r3, #0]
 80128b0:	f003 fd10 	bl	80162d4 <_free_r>
 80128b4:	bd10      	pop	{r4, pc}
 80128b6:	46c0      	nop			; (mov r8, r8)
 80128b8:	200000d8 	.word	0x200000d8

080128bc <_malloc_r>:
 80128bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128be:	000d      	movs	r5, r1
 80128c0:	b085      	sub	sp, #20
 80128c2:	350b      	adds	r5, #11
 80128c4:	9001      	str	r0, [sp, #4]
 80128c6:	2d16      	cmp	r5, #22
 80128c8:	d908      	bls.n	80128dc <_malloc_r+0x20>
 80128ca:	2307      	movs	r3, #7
 80128cc:	439d      	bics	r5, r3
 80128ce:	d506      	bpl.n	80128de <_malloc_r+0x22>
 80128d0:	230c      	movs	r3, #12
 80128d2:	9a01      	ldr	r2, [sp, #4]
 80128d4:	6013      	str	r3, [r2, #0]
 80128d6:	2000      	movs	r0, #0
 80128d8:	b005      	add	sp, #20
 80128da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128dc:	2510      	movs	r5, #16
 80128de:	428d      	cmp	r5, r1
 80128e0:	d3f6      	bcc.n	80128d0 <_malloc_r+0x14>
 80128e2:	9801      	ldr	r0, [sp, #4]
 80128e4:	f000 fa34 	bl	8012d50 <__malloc_lock>
 80128e8:	23f8      	movs	r3, #248	; 0xf8
 80128ea:	33ff      	adds	r3, #255	; 0xff
 80128ec:	4ac4      	ldr	r2, [pc, #784]	; (8012c00 <_malloc_r+0x344>)
 80128ee:	429d      	cmp	r5, r3
 80128f0:	d820      	bhi.n	8012934 <_malloc_r+0x78>
 80128f2:	0029      	movs	r1, r5
 80128f4:	3108      	adds	r1, #8
 80128f6:	1851      	adds	r1, r2, r1
 80128f8:	0008      	movs	r0, r1
 80128fa:	684c      	ldr	r4, [r1, #4]
 80128fc:	3808      	subs	r0, #8
 80128fe:	08eb      	lsrs	r3, r5, #3
 8012900:	4284      	cmp	r4, r0
 8012902:	d104      	bne.n	801290e <_malloc_r+0x52>
 8012904:	68cc      	ldr	r4, [r1, #12]
 8012906:	3302      	adds	r3, #2
 8012908:	469c      	mov	ip, r3
 801290a:	42a1      	cmp	r1, r4
 801290c:	d02a      	beq.n	8012964 <_malloc_r+0xa8>
 801290e:	2303      	movs	r3, #3
 8012910:	6862      	ldr	r2, [r4, #4]
 8012912:	68a1      	ldr	r1, [r4, #8]
 8012914:	439a      	bics	r2, r3
 8012916:	0013      	movs	r3, r2
 8012918:	68e2      	ldr	r2, [r4, #12]
 801291a:	18e3      	adds	r3, r4, r3
 801291c:	60ca      	str	r2, [r1, #12]
 801291e:	6091      	str	r1, [r2, #8]
 8012920:	2201      	movs	r2, #1
 8012922:	6859      	ldr	r1, [r3, #4]
 8012924:	430a      	orrs	r2, r1
 8012926:	605a      	str	r2, [r3, #4]
 8012928:	9801      	ldr	r0, [sp, #4]
 801292a:	f000 fa19 	bl	8012d60 <__malloc_unlock>
 801292e:	0020      	movs	r0, r4
 8012930:	3008      	adds	r0, #8
 8012932:	e7d1      	b.n	80128d8 <_malloc_r+0x1c>
 8012934:	0a69      	lsrs	r1, r5, #9
 8012936:	233f      	movs	r3, #63	; 0x3f
 8012938:	2900      	cmp	r1, #0
 801293a:	d003      	beq.n	8012944 <_malloc_r+0x88>
 801293c:	2904      	cmp	r1, #4
 801293e:	d828      	bhi.n	8012992 <_malloc_r+0xd6>
 8012940:	09ab      	lsrs	r3, r5, #6
 8012942:	3338      	adds	r3, #56	; 0x38
 8012944:	2103      	movs	r1, #3
 8012946:	468c      	mov	ip, r1
 8012948:	00d8      	lsls	r0, r3, #3
 801294a:	1880      	adds	r0, r0, r2
 801294c:	68c4      	ldr	r4, [r0, #12]
 801294e:	4284      	cmp	r4, r0
 8012950:	d006      	beq.n	8012960 <_malloc_r+0xa4>
 8012952:	4666      	mov	r6, ip
 8012954:	6861      	ldr	r1, [r4, #4]
 8012956:	43b1      	bics	r1, r6
 8012958:	1b4f      	subs	r7, r1, r5
 801295a:	2f0f      	cmp	r7, #15
 801295c:	dd31      	ble.n	80129c2 <_malloc_r+0x106>
 801295e:	3b01      	subs	r3, #1
 8012960:	3301      	adds	r3, #1
 8012962:	469c      	mov	ip, r3
 8012964:	6914      	ldr	r4, [r2, #16]
 8012966:	49a7      	ldr	r1, [pc, #668]	; (8012c04 <_malloc_r+0x348>)
 8012968:	428c      	cmp	r4, r1
 801296a:	d055      	beq.n	8012a18 <_malloc_r+0x15c>
 801296c:	2303      	movs	r3, #3
 801296e:	6860      	ldr	r0, [r4, #4]
 8012970:	4398      	bics	r0, r3
 8012972:	0003      	movs	r3, r0
 8012974:	1b46      	subs	r6, r0, r5
 8012976:	2e0f      	cmp	r6, #15
 8012978:	dd31      	ble.n	80129de <_malloc_r+0x122>
 801297a:	2701      	movs	r7, #1
 801297c:	1960      	adds	r0, r4, r5
 801297e:	433d      	orrs	r5, r7
 8012980:	4337      	orrs	r7, r6
 8012982:	6065      	str	r5, [r4, #4]
 8012984:	6150      	str	r0, [r2, #20]
 8012986:	6110      	str	r0, [r2, #16]
 8012988:	60c1      	str	r1, [r0, #12]
 801298a:	6081      	str	r1, [r0, #8]
 801298c:	6047      	str	r7, [r0, #4]
 801298e:	50e6      	str	r6, [r4, r3]
 8012990:	e7ca      	b.n	8012928 <_malloc_r+0x6c>
 8012992:	2914      	cmp	r1, #20
 8012994:	d802      	bhi.n	801299c <_malloc_r+0xe0>
 8012996:	000b      	movs	r3, r1
 8012998:	335b      	adds	r3, #91	; 0x5b
 801299a:	e7d3      	b.n	8012944 <_malloc_r+0x88>
 801299c:	2954      	cmp	r1, #84	; 0x54
 801299e:	d802      	bhi.n	80129a6 <_malloc_r+0xea>
 80129a0:	0b2b      	lsrs	r3, r5, #12
 80129a2:	336e      	adds	r3, #110	; 0x6e
 80129a4:	e7ce      	b.n	8012944 <_malloc_r+0x88>
 80129a6:	23aa      	movs	r3, #170	; 0xaa
 80129a8:	005b      	lsls	r3, r3, #1
 80129aa:	4299      	cmp	r1, r3
 80129ac:	d802      	bhi.n	80129b4 <_malloc_r+0xf8>
 80129ae:	0beb      	lsrs	r3, r5, #15
 80129b0:	3377      	adds	r3, #119	; 0x77
 80129b2:	e7c7      	b.n	8012944 <_malloc_r+0x88>
 80129b4:	4894      	ldr	r0, [pc, #592]	; (8012c08 <_malloc_r+0x34c>)
 80129b6:	237e      	movs	r3, #126	; 0x7e
 80129b8:	4281      	cmp	r1, r0
 80129ba:	d8c3      	bhi.n	8012944 <_malloc_r+0x88>
 80129bc:	0cab      	lsrs	r3, r5, #18
 80129be:	337c      	adds	r3, #124	; 0x7c
 80129c0:	e7c0      	b.n	8012944 <_malloc_r+0x88>
 80129c2:	68e6      	ldr	r6, [r4, #12]
 80129c4:	2f00      	cmp	r7, #0
 80129c6:	db08      	blt.n	80129da <_malloc_r+0x11e>
 80129c8:	68a3      	ldr	r3, [r4, #8]
 80129ca:	1861      	adds	r1, r4, r1
 80129cc:	60de      	str	r6, [r3, #12]
 80129ce:	60b3      	str	r3, [r6, #8]
 80129d0:	2301      	movs	r3, #1
 80129d2:	684a      	ldr	r2, [r1, #4]
 80129d4:	4313      	orrs	r3, r2
 80129d6:	604b      	str	r3, [r1, #4]
 80129d8:	e7a6      	b.n	8012928 <_malloc_r+0x6c>
 80129da:	0034      	movs	r4, r6
 80129dc:	e7b7      	b.n	801294e <_malloc_r+0x92>
 80129de:	6151      	str	r1, [r2, #20]
 80129e0:	6111      	str	r1, [r2, #16]
 80129e2:	2e00      	cmp	r6, #0
 80129e4:	db05      	blt.n	80129f2 <_malloc_r+0x136>
 80129e6:	2101      	movs	r1, #1
 80129e8:	1823      	adds	r3, r4, r0
 80129ea:	685a      	ldr	r2, [r3, #4]
 80129ec:	4311      	orrs	r1, r2
 80129ee:	6059      	str	r1, [r3, #4]
 80129f0:	e79a      	b.n	8012928 <_malloc_r+0x6c>
 80129f2:	4986      	ldr	r1, [pc, #536]	; (8012c0c <_malloc_r+0x350>)
 80129f4:	6857      	ldr	r7, [r2, #4]
 80129f6:	4288      	cmp	r0, r1
 80129f8:	d900      	bls.n	80129fc <_malloc_r+0x140>
 80129fa:	e090      	b.n	8012b1e <_malloc_r+0x262>
 80129fc:	08c3      	lsrs	r3, r0, #3
 80129fe:	39ff      	subs	r1, #255	; 0xff
 8012a00:	1098      	asrs	r0, r3, #2
 8012a02:	39ff      	subs	r1, #255	; 0xff
 8012a04:	4081      	lsls	r1, r0
 8012a06:	00db      	lsls	r3, r3, #3
 8012a08:	4339      	orrs	r1, r7
 8012a0a:	6051      	str	r1, [r2, #4]
 8012a0c:	189a      	adds	r2, r3, r2
 8012a0e:	6893      	ldr	r3, [r2, #8]
 8012a10:	60e2      	str	r2, [r4, #12]
 8012a12:	60a3      	str	r3, [r4, #8]
 8012a14:	6094      	str	r4, [r2, #8]
 8012a16:	60dc      	str	r4, [r3, #12]
 8012a18:	4663      	mov	r3, ip
 8012a1a:	2201      	movs	r2, #1
 8012a1c:	4978      	ldr	r1, [pc, #480]	; (8012c00 <_malloc_r+0x344>)
 8012a1e:	109b      	asrs	r3, r3, #2
 8012a20:	6848      	ldr	r0, [r1, #4]
 8012a22:	409a      	lsls	r2, r3
 8012a24:	4290      	cmp	r0, r2
 8012a26:	d32d      	bcc.n	8012a84 <_malloc_r+0x1c8>
 8012a28:	4202      	tst	r2, r0
 8012a2a:	d109      	bne.n	8012a40 <_malloc_r+0x184>
 8012a2c:	2303      	movs	r3, #3
 8012a2e:	4664      	mov	r4, ip
 8012a30:	439c      	bics	r4, r3
 8012a32:	0023      	movs	r3, r4
 8012a34:	3304      	adds	r3, #4
 8012a36:	469c      	mov	ip, r3
 8012a38:	0052      	lsls	r2, r2, #1
 8012a3a:	4202      	tst	r2, r0
 8012a3c:	d100      	bne.n	8012a40 <_malloc_r+0x184>
 8012a3e:	e0a4      	b.n	8012b8a <_malloc_r+0x2ce>
 8012a40:	4663      	mov	r3, ip
 8012a42:	00db      	lsls	r3, r3, #3
 8012a44:	18cb      	adds	r3, r1, r3
 8012a46:	9303      	str	r3, [sp, #12]
 8012a48:	001f      	movs	r7, r3
 8012a4a:	4663      	mov	r3, ip
 8012a4c:	9302      	str	r3, [sp, #8]
 8012a4e:	68fc      	ldr	r4, [r7, #12]
 8012a50:	42bc      	cmp	r4, r7
 8012a52:	d000      	beq.n	8012a56 <_malloc_r+0x19a>
 8012a54:	e09c      	b.n	8012b90 <_malloc_r+0x2d4>
 8012a56:	2003      	movs	r0, #3
 8012a58:	9b02      	ldr	r3, [sp, #8]
 8012a5a:	3708      	adds	r7, #8
 8012a5c:	3301      	adds	r3, #1
 8012a5e:	9302      	str	r3, [sp, #8]
 8012a60:	4203      	tst	r3, r0
 8012a62:	d1f4      	bne.n	8012a4e <_malloc_r+0x192>
 8012a64:	4663      	mov	r3, ip
 8012a66:	2003      	movs	r0, #3
 8012a68:	4203      	tst	r3, r0
 8012a6a:	d000      	beq.n	8012a6e <_malloc_r+0x1b2>
 8012a6c:	e0b3      	b.n	8012bd6 <_malloc_r+0x31a>
 8012a6e:	684b      	ldr	r3, [r1, #4]
 8012a70:	4393      	bics	r3, r2
 8012a72:	604b      	str	r3, [r1, #4]
 8012a74:	4b62      	ldr	r3, [pc, #392]	; (8012c00 <_malloc_r+0x344>)
 8012a76:	0052      	lsls	r2, r2, #1
 8012a78:	685b      	ldr	r3, [r3, #4]
 8012a7a:	4293      	cmp	r3, r2
 8012a7c:	d302      	bcc.n	8012a84 <_malloc_r+0x1c8>
 8012a7e:	2a00      	cmp	r2, #0
 8012a80:	d000      	beq.n	8012a84 <_malloc_r+0x1c8>
 8012a82:	e0b9      	b.n	8012bf8 <_malloc_r+0x33c>
 8012a84:	2303      	movs	r3, #3
 8012a86:	688f      	ldr	r7, [r1, #8]
 8012a88:	687a      	ldr	r2, [r7, #4]
 8012a8a:	439a      	bics	r2, r3
 8012a8c:	9202      	str	r2, [sp, #8]
 8012a8e:	42aa      	cmp	r2, r5
 8012a90:	d303      	bcc.n	8012a9a <_malloc_r+0x1de>
 8012a92:	1b52      	subs	r2, r2, r5
 8012a94:	2a0f      	cmp	r2, #15
 8012a96:	dd00      	ble.n	8012a9a <_malloc_r+0x1de>
 8012a98:	e116      	b.n	8012cc8 <_malloc_r+0x40c>
 8012a9a:	4b5d      	ldr	r3, [pc, #372]	; (8012c10 <_malloc_r+0x354>)
 8012a9c:	2008      	movs	r0, #8
 8012a9e:	681e      	ldr	r6, [r3, #0]
 8012aa0:	f002 fd26 	bl	80154f0 <sysconf>
 8012aa4:	4b5b      	ldr	r3, [pc, #364]	; (8012c14 <_malloc_r+0x358>)
 8012aa6:	3610      	adds	r6, #16
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	1976      	adds	r6, r6, r5
 8012aac:	9003      	str	r0, [sp, #12]
 8012aae:	3301      	adds	r3, #1
 8012ab0:	d003      	beq.n	8012aba <_malloc_r+0x1fe>
 8012ab2:	3e01      	subs	r6, #1
 8012ab4:	1836      	adds	r6, r6, r0
 8012ab6:	4243      	negs	r3, r0
 8012ab8:	401e      	ands	r6, r3
 8012aba:	0031      	movs	r1, r6
 8012abc:	9801      	ldr	r0, [sp, #4]
 8012abe:	f000 fb27 	bl	8013110 <_sbrk_r>
 8012ac2:	0004      	movs	r4, r0
 8012ac4:	1c43      	adds	r3, r0, #1
 8012ac6:	d100      	bne.n	8012aca <_malloc_r+0x20e>
 8012ac8:	e0d6      	b.n	8012c78 <_malloc_r+0x3bc>
 8012aca:	9b02      	ldr	r3, [sp, #8]
 8012acc:	18fb      	adds	r3, r7, r3
 8012ace:	4283      	cmp	r3, r0
 8012ad0:	d903      	bls.n	8012ada <_malloc_r+0x21e>
 8012ad2:	4a4b      	ldr	r2, [pc, #300]	; (8012c00 <_malloc_r+0x344>)
 8012ad4:	4297      	cmp	r7, r2
 8012ad6:	d000      	beq.n	8012ada <_malloc_r+0x21e>
 8012ad8:	e0ce      	b.n	8012c78 <_malloc_r+0x3bc>
 8012ada:	494f      	ldr	r1, [pc, #316]	; (8012c18 <_malloc_r+0x35c>)
 8012adc:	680a      	ldr	r2, [r1, #0]
 8012ade:	18b2      	adds	r2, r6, r2
 8012ae0:	600a      	str	r2, [r1, #0]
 8012ae2:	9903      	ldr	r1, [sp, #12]
 8012ae4:	4694      	mov	ip, r2
 8012ae6:	1e48      	subs	r0, r1, #1
 8012ae8:	42a3      	cmp	r3, r4
 8012aea:	d000      	beq.n	8012aee <_malloc_r+0x232>
 8012aec:	e09a      	b.n	8012c24 <_malloc_r+0x368>
 8012aee:	4203      	tst	r3, r0
 8012af0:	d000      	beq.n	8012af4 <_malloc_r+0x238>
 8012af2:	e097      	b.n	8012c24 <_malloc_r+0x368>
 8012af4:	9a02      	ldr	r2, [sp, #8]
 8012af6:	4b42      	ldr	r3, [pc, #264]	; (8012c00 <_malloc_r+0x344>)
 8012af8:	1992      	adds	r2, r2, r6
 8012afa:	2601      	movs	r6, #1
 8012afc:	689b      	ldr	r3, [r3, #8]
 8012afe:	4316      	orrs	r6, r2
 8012b00:	605e      	str	r6, [r3, #4]
 8012b02:	4b45      	ldr	r3, [pc, #276]	; (8012c18 <_malloc_r+0x35c>)
 8012b04:	4a45      	ldr	r2, [pc, #276]	; (8012c1c <_malloc_r+0x360>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	6811      	ldr	r1, [r2, #0]
 8012b0a:	428b      	cmp	r3, r1
 8012b0c:	d900      	bls.n	8012b10 <_malloc_r+0x254>
 8012b0e:	6013      	str	r3, [r2, #0]
 8012b10:	4a43      	ldr	r2, [pc, #268]	; (8012c20 <_malloc_r+0x364>)
 8012b12:	6811      	ldr	r1, [r2, #0]
 8012b14:	428b      	cmp	r3, r1
 8012b16:	d800      	bhi.n	8012b1a <_malloc_r+0x25e>
 8012b18:	e0ae      	b.n	8012c78 <_malloc_r+0x3bc>
 8012b1a:	6013      	str	r3, [r2, #0]
 8012b1c:	e0ac      	b.n	8012c78 <_malloc_r+0x3bc>
 8012b1e:	0a40      	lsrs	r0, r0, #9
 8012b20:	2804      	cmp	r0, #4
 8012b22:	d810      	bhi.n	8012b46 <_malloc_r+0x28a>
 8012b24:	0999      	lsrs	r1, r3, #6
 8012b26:	3138      	adds	r1, #56	; 0x38
 8012b28:	00ce      	lsls	r6, r1, #3
 8012b2a:	18b6      	adds	r6, r6, r2
 8012b2c:	68b0      	ldr	r0, [r6, #8]
 8012b2e:	4286      	cmp	r6, r0
 8012b30:	d124      	bne.n	8012b7c <_malloc_r+0x2c0>
 8012b32:	2301      	movs	r3, #1
 8012b34:	1089      	asrs	r1, r1, #2
 8012b36:	408b      	lsls	r3, r1
 8012b38:	433b      	orrs	r3, r7
 8012b3a:	6053      	str	r3, [r2, #4]
 8012b3c:	60e6      	str	r6, [r4, #12]
 8012b3e:	60a0      	str	r0, [r4, #8]
 8012b40:	60b4      	str	r4, [r6, #8]
 8012b42:	60c4      	str	r4, [r0, #12]
 8012b44:	e768      	b.n	8012a18 <_malloc_r+0x15c>
 8012b46:	2814      	cmp	r0, #20
 8012b48:	d802      	bhi.n	8012b50 <_malloc_r+0x294>
 8012b4a:	0001      	movs	r1, r0
 8012b4c:	315b      	adds	r1, #91	; 0x5b
 8012b4e:	e7eb      	b.n	8012b28 <_malloc_r+0x26c>
 8012b50:	2854      	cmp	r0, #84	; 0x54
 8012b52:	d802      	bhi.n	8012b5a <_malloc_r+0x29e>
 8012b54:	0b19      	lsrs	r1, r3, #12
 8012b56:	316e      	adds	r1, #110	; 0x6e
 8012b58:	e7e6      	b.n	8012b28 <_malloc_r+0x26c>
 8012b5a:	21aa      	movs	r1, #170	; 0xaa
 8012b5c:	0049      	lsls	r1, r1, #1
 8012b5e:	4288      	cmp	r0, r1
 8012b60:	d802      	bhi.n	8012b68 <_malloc_r+0x2ac>
 8012b62:	0bd9      	lsrs	r1, r3, #15
 8012b64:	3177      	adds	r1, #119	; 0x77
 8012b66:	e7df      	b.n	8012b28 <_malloc_r+0x26c>
 8012b68:	4e27      	ldr	r6, [pc, #156]	; (8012c08 <_malloc_r+0x34c>)
 8012b6a:	217e      	movs	r1, #126	; 0x7e
 8012b6c:	42b0      	cmp	r0, r6
 8012b6e:	d8db      	bhi.n	8012b28 <_malloc_r+0x26c>
 8012b70:	0c99      	lsrs	r1, r3, #18
 8012b72:	317c      	adds	r1, #124	; 0x7c
 8012b74:	e7d8      	b.n	8012b28 <_malloc_r+0x26c>
 8012b76:	6880      	ldr	r0, [r0, #8]
 8012b78:	4286      	cmp	r6, r0
 8012b7a:	d004      	beq.n	8012b86 <_malloc_r+0x2ca>
 8012b7c:	2103      	movs	r1, #3
 8012b7e:	6842      	ldr	r2, [r0, #4]
 8012b80:	438a      	bics	r2, r1
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d8f7      	bhi.n	8012b76 <_malloc_r+0x2ba>
 8012b86:	68c6      	ldr	r6, [r0, #12]
 8012b88:	e7d8      	b.n	8012b3c <_malloc_r+0x280>
 8012b8a:	2304      	movs	r3, #4
 8012b8c:	449c      	add	ip, r3
 8012b8e:	e753      	b.n	8012a38 <_malloc_r+0x17c>
 8012b90:	2003      	movs	r0, #3
 8012b92:	6863      	ldr	r3, [r4, #4]
 8012b94:	4383      	bics	r3, r0
 8012b96:	1b5e      	subs	r6, r3, r5
 8012b98:	68e0      	ldr	r0, [r4, #12]
 8012b9a:	2e0f      	cmp	r6, #15
 8012b9c:	dd0e      	ble.n	8012bbc <_malloc_r+0x300>
 8012b9e:	2701      	movs	r7, #1
 8012ba0:	1962      	adds	r2, r4, r5
 8012ba2:	433d      	orrs	r5, r7
 8012ba4:	6065      	str	r5, [r4, #4]
 8012ba6:	68a5      	ldr	r5, [r4, #8]
 8012ba8:	4337      	orrs	r7, r6
 8012baa:	60e8      	str	r0, [r5, #12]
 8012bac:	6085      	str	r5, [r0, #8]
 8012bae:	614a      	str	r2, [r1, #20]
 8012bb0:	610a      	str	r2, [r1, #16]
 8012bb2:	4914      	ldr	r1, [pc, #80]	; (8012c04 <_malloc_r+0x348>)
 8012bb4:	6057      	str	r7, [r2, #4]
 8012bb6:	60d1      	str	r1, [r2, #12]
 8012bb8:	6091      	str	r1, [r2, #8]
 8012bba:	e6e8      	b.n	801298e <_malloc_r+0xd2>
 8012bbc:	2e00      	cmp	r6, #0
 8012bbe:	db08      	blt.n	8012bd2 <_malloc_r+0x316>
 8012bc0:	2201      	movs	r2, #1
 8012bc2:	18e3      	adds	r3, r4, r3
 8012bc4:	6859      	ldr	r1, [r3, #4]
 8012bc6:	430a      	orrs	r2, r1
 8012bc8:	605a      	str	r2, [r3, #4]
 8012bca:	68a3      	ldr	r3, [r4, #8]
 8012bcc:	60d8      	str	r0, [r3, #12]
 8012bce:	6083      	str	r3, [r0, #8]
 8012bd0:	e6aa      	b.n	8012928 <_malloc_r+0x6c>
 8012bd2:	0004      	movs	r4, r0
 8012bd4:	e73c      	b.n	8012a50 <_malloc_r+0x194>
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	425b      	negs	r3, r3
 8012bda:	449c      	add	ip, r3
 8012bdc:	9b03      	ldr	r3, [sp, #12]
 8012bde:	6818      	ldr	r0, [r3, #0]
 8012be0:	3b08      	subs	r3, #8
 8012be2:	9003      	str	r0, [sp, #12]
 8012be4:	4298      	cmp	r0, r3
 8012be6:	d100      	bne.n	8012bea <_malloc_r+0x32e>
 8012be8:	e73c      	b.n	8012a64 <_malloc_r+0x1a8>
 8012bea:	e743      	b.n	8012a74 <_malloc_r+0x1b8>
 8012bec:	2004      	movs	r0, #4
 8012bee:	0052      	lsls	r2, r2, #1
 8012bf0:	4484      	add	ip, r0
 8012bf2:	421a      	tst	r2, r3
 8012bf4:	d0fa      	beq.n	8012bec <_malloc_r+0x330>
 8012bf6:	e723      	b.n	8012a40 <_malloc_r+0x184>
 8012bf8:	9802      	ldr	r0, [sp, #8]
 8012bfa:	4684      	mov	ip, r0
 8012bfc:	e7f9      	b.n	8012bf2 <_malloc_r+0x336>
 8012bfe:	46c0      	nop			; (mov r8, r8)
 8012c00:	20000674 	.word	0x20000674
 8012c04:	2000067c 	.word	0x2000067c
 8012c08:	00000554 	.word	0x00000554
 8012c0c:	000001ff 	.word	0x000001ff
 8012c10:	20006d28 	.word	0x20006d28
 8012c14:	20000a7c 	.word	0x20000a7c
 8012c18:	20006cf8 	.word	0x20006cf8
 8012c1c:	20006d20 	.word	0x20006d20
 8012c20:	20006d24 	.word	0x20006d24
 8012c24:	492e      	ldr	r1, [pc, #184]	; (8012ce0 <_malloc_r+0x424>)
 8012c26:	680a      	ldr	r2, [r1, #0]
 8012c28:	3201      	adds	r2, #1
 8012c2a:	d133      	bne.n	8012c94 <_malloc_r+0x3d8>
 8012c2c:	600c      	str	r4, [r1, #0]
 8012c2e:	2307      	movs	r3, #7
 8012c30:	4023      	ands	r3, r4
 8012c32:	d002      	beq.n	8012c3a <_malloc_r+0x37e>
 8012c34:	2208      	movs	r2, #8
 8012c36:	1ad3      	subs	r3, r2, r3
 8012c38:	18e4      	adds	r4, r4, r3
 8012c3a:	9a03      	ldr	r2, [sp, #12]
 8012c3c:	19a6      	adds	r6, r4, r6
 8012c3e:	18d3      	adds	r3, r2, r3
 8012c40:	4006      	ands	r6, r0
 8012c42:	1b9e      	subs	r6, r3, r6
 8012c44:	0031      	movs	r1, r6
 8012c46:	9801      	ldr	r0, [sp, #4]
 8012c48:	f000 fa62 	bl	8013110 <_sbrk_r>
 8012c4c:	1c43      	adds	r3, r0, #1
 8012c4e:	d101      	bne.n	8012c54 <_malloc_r+0x398>
 8012c50:	0020      	movs	r0, r4
 8012c52:	2600      	movs	r6, #0
 8012c54:	4a23      	ldr	r2, [pc, #140]	; (8012ce4 <_malloc_r+0x428>)
 8012c56:	1b00      	subs	r0, r0, r4
 8012c58:	6813      	ldr	r3, [r2, #0]
 8012c5a:	199b      	adds	r3, r3, r6
 8012c5c:	6013      	str	r3, [r2, #0]
 8012c5e:	2301      	movs	r3, #1
 8012c60:	4a21      	ldr	r2, [pc, #132]	; (8012ce8 <_malloc_r+0x42c>)
 8012c62:	1986      	adds	r6, r0, r6
 8012c64:	431e      	orrs	r6, r3
 8012c66:	6094      	str	r4, [r2, #8]
 8012c68:	6066      	str	r6, [r4, #4]
 8012c6a:	4297      	cmp	r7, r2
 8012c6c:	d100      	bne.n	8012c70 <_malloc_r+0x3b4>
 8012c6e:	e748      	b.n	8012b02 <_malloc_r+0x246>
 8012c70:	9a02      	ldr	r2, [sp, #8]
 8012c72:	2a0f      	cmp	r2, #15
 8012c74:	d813      	bhi.n	8012c9e <_malloc_r+0x3e2>
 8012c76:	6063      	str	r3, [r4, #4]
 8012c78:	2203      	movs	r2, #3
 8012c7a:	4b1b      	ldr	r3, [pc, #108]	; (8012ce8 <_malloc_r+0x42c>)
 8012c7c:	689b      	ldr	r3, [r3, #8]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	4393      	bics	r3, r2
 8012c82:	1b5a      	subs	r2, r3, r5
 8012c84:	42ab      	cmp	r3, r5
 8012c86:	d301      	bcc.n	8012c8c <_malloc_r+0x3d0>
 8012c88:	2a0f      	cmp	r2, #15
 8012c8a:	dc1d      	bgt.n	8012cc8 <_malloc_r+0x40c>
 8012c8c:	9801      	ldr	r0, [sp, #4]
 8012c8e:	f000 f867 	bl	8012d60 <__malloc_unlock>
 8012c92:	e620      	b.n	80128d6 <_malloc_r+0x1a>
 8012c94:	1ae3      	subs	r3, r4, r3
 8012c96:	4a13      	ldr	r2, [pc, #76]	; (8012ce4 <_malloc_r+0x428>)
 8012c98:	4463      	add	r3, ip
 8012c9a:	6013      	str	r3, [r2, #0]
 8012c9c:	e7c7      	b.n	8012c2e <_malloc_r+0x372>
 8012c9e:	2207      	movs	r2, #7
 8012ca0:	9e02      	ldr	r6, [sp, #8]
 8012ca2:	3e0c      	subs	r6, #12
 8012ca4:	4396      	bics	r6, r2
 8012ca6:	687a      	ldr	r2, [r7, #4]
 8012ca8:	4013      	ands	r3, r2
 8012caa:	2205      	movs	r2, #5
 8012cac:	4333      	orrs	r3, r6
 8012cae:	607b      	str	r3, [r7, #4]
 8012cb0:	19bb      	adds	r3, r7, r6
 8012cb2:	605a      	str	r2, [r3, #4]
 8012cb4:	609a      	str	r2, [r3, #8]
 8012cb6:	2e0f      	cmp	r6, #15
 8012cb8:	d800      	bhi.n	8012cbc <_malloc_r+0x400>
 8012cba:	e722      	b.n	8012b02 <_malloc_r+0x246>
 8012cbc:	0039      	movs	r1, r7
 8012cbe:	9801      	ldr	r0, [sp, #4]
 8012cc0:	3108      	adds	r1, #8
 8012cc2:	f003 fb07 	bl	80162d4 <_free_r>
 8012cc6:	e71c      	b.n	8012b02 <_malloc_r+0x246>
 8012cc8:	2301      	movs	r3, #1
 8012cca:	0018      	movs	r0, r3
 8012ccc:	4906      	ldr	r1, [pc, #24]	; (8012ce8 <_malloc_r+0x42c>)
 8012cce:	4328      	orrs	r0, r5
 8012cd0:	688c      	ldr	r4, [r1, #8]
 8012cd2:	4313      	orrs	r3, r2
 8012cd4:	1965      	adds	r5, r4, r5
 8012cd6:	6060      	str	r0, [r4, #4]
 8012cd8:	608d      	str	r5, [r1, #8]
 8012cda:	606b      	str	r3, [r5, #4]
 8012cdc:	e624      	b.n	8012928 <_malloc_r+0x6c>
 8012cde:	46c0      	nop			; (mov r8, r8)
 8012ce0:	20000a7c 	.word	0x20000a7c
 8012ce4:	20006cf8 	.word	0x20006cf8
 8012ce8:	20000674 	.word	0x20000674

08012cec <__ascii_mbtowc>:
 8012cec:	b082      	sub	sp, #8
 8012cee:	2900      	cmp	r1, #0
 8012cf0:	d100      	bne.n	8012cf4 <__ascii_mbtowc+0x8>
 8012cf2:	a901      	add	r1, sp, #4
 8012cf4:	1e10      	subs	r0, r2, #0
 8012cf6:	d006      	beq.n	8012d06 <__ascii_mbtowc+0x1a>
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d006      	beq.n	8012d0a <__ascii_mbtowc+0x1e>
 8012cfc:	7813      	ldrb	r3, [r2, #0]
 8012cfe:	600b      	str	r3, [r1, #0]
 8012d00:	7810      	ldrb	r0, [r2, #0]
 8012d02:	1e43      	subs	r3, r0, #1
 8012d04:	4198      	sbcs	r0, r3
 8012d06:	b002      	add	sp, #8
 8012d08:	4770      	bx	lr
 8012d0a:	2002      	movs	r0, #2
 8012d0c:	4240      	negs	r0, r0
 8012d0e:	e7fa      	b.n	8012d06 <__ascii_mbtowc+0x1a>

08012d10 <memcmp>:
 8012d10:	b530      	push	{r4, r5, lr}
 8012d12:	2400      	movs	r4, #0
 8012d14:	42a2      	cmp	r2, r4
 8012d16:	d101      	bne.n	8012d1c <memcmp+0xc>
 8012d18:	2000      	movs	r0, #0
 8012d1a:	e005      	b.n	8012d28 <memcmp+0x18>
 8012d1c:	5d03      	ldrb	r3, [r0, r4]
 8012d1e:	1c65      	adds	r5, r4, #1
 8012d20:	5d0c      	ldrb	r4, [r1, r4]
 8012d22:	42a3      	cmp	r3, r4
 8012d24:	d001      	beq.n	8012d2a <memcmp+0x1a>
 8012d26:	1b18      	subs	r0, r3, r4
 8012d28:	bd30      	pop	{r4, r5, pc}
 8012d2a:	002c      	movs	r4, r5
 8012d2c:	e7f2      	b.n	8012d14 <memcmp+0x4>

08012d2e <memcpy>:
 8012d2e:	2300      	movs	r3, #0
 8012d30:	b510      	push	{r4, lr}
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d100      	bne.n	8012d38 <memcpy+0xa>
 8012d36:	bd10      	pop	{r4, pc}
 8012d38:	5ccc      	ldrb	r4, [r1, r3]
 8012d3a:	54c4      	strb	r4, [r0, r3]
 8012d3c:	3301      	adds	r3, #1
 8012d3e:	e7f8      	b.n	8012d32 <memcpy+0x4>

08012d40 <memset>:
 8012d40:	0003      	movs	r3, r0
 8012d42:	1812      	adds	r2, r2, r0
 8012d44:	4293      	cmp	r3, r2
 8012d46:	d100      	bne.n	8012d4a <memset+0xa>
 8012d48:	4770      	bx	lr
 8012d4a:	7019      	strb	r1, [r3, #0]
 8012d4c:	3301      	adds	r3, #1
 8012d4e:	e7f9      	b.n	8012d44 <memset+0x4>

08012d50 <__malloc_lock>:
 8012d50:	b510      	push	{r4, lr}
 8012d52:	4802      	ldr	r0, [pc, #8]	; (8012d5c <__malloc_lock+0xc>)
 8012d54:	f003 feb2 	bl	8016abc <__retarget_lock_acquire_recursive>
 8012d58:	bd10      	pop	{r4, pc}
 8012d5a:	46c0      	nop			; (mov r8, r8)
 8012d5c:	200072d4 	.word	0x200072d4

08012d60 <__malloc_unlock>:
 8012d60:	b510      	push	{r4, lr}
 8012d62:	4802      	ldr	r0, [pc, #8]	; (8012d6c <__malloc_unlock+0xc>)
 8012d64:	f003 feab 	bl	8016abe <__retarget_lock_release_recursive>
 8012d68:	bd10      	pop	{r4, pc}
 8012d6a:	46c0      	nop			; (mov r8, r8)
 8012d6c:	200072d4 	.word	0x200072d4

08012d70 <rand>:
 8012d70:	4b09      	ldr	r3, [pc, #36]	; (8012d98 <rand+0x28>)
 8012d72:	b510      	push	{r4, lr}
 8012d74:	681c      	ldr	r4, [r3, #0]
 8012d76:	4a09      	ldr	r2, [pc, #36]	; (8012d9c <rand+0x2c>)
 8012d78:	34a8      	adds	r4, #168	; 0xa8
 8012d7a:	6820      	ldr	r0, [r4, #0]
 8012d7c:	6861      	ldr	r1, [r4, #4]
 8012d7e:	4b08      	ldr	r3, [pc, #32]	; (8012da0 <rand+0x30>)
 8012d80:	f7ed fbf4 	bl	800056c <__aeabi_lmul>
 8012d84:	2201      	movs	r2, #1
 8012d86:	2300      	movs	r3, #0
 8012d88:	1880      	adds	r0, r0, r2
 8012d8a:	4159      	adcs	r1, r3
 8012d8c:	6020      	str	r0, [r4, #0]
 8012d8e:	6061      	str	r1, [r4, #4]
 8012d90:	0048      	lsls	r0, r1, #1
 8012d92:	0840      	lsrs	r0, r0, #1
 8012d94:	bd10      	pop	{r4, pc}
 8012d96:	46c0      	nop			; (mov r8, r8)
 8012d98:	200000d8 	.word	0x200000d8
 8012d9c:	4c957f2d 	.word	0x4c957f2d
 8012da0:	5851f42d 	.word	0x5851f42d

08012da4 <realloc>:
 8012da4:	b510      	push	{r4, lr}
 8012da6:	4b03      	ldr	r3, [pc, #12]	; (8012db4 <realloc+0x10>)
 8012da8:	000a      	movs	r2, r1
 8012daa:	0001      	movs	r1, r0
 8012dac:	6818      	ldr	r0, [r3, #0]
 8012dae:	f000 f803 	bl	8012db8 <_realloc_r>
 8012db2:	bd10      	pop	{r4, pc}
 8012db4:	200000d8 	.word	0x200000d8

08012db8 <_realloc_r>:
 8012db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dba:	b087      	sub	sp, #28
 8012dbc:	9003      	str	r0, [sp, #12]
 8012dbe:	1e0c      	subs	r4, r1, #0
 8012dc0:	9205      	str	r2, [sp, #20]
 8012dc2:	d106      	bne.n	8012dd2 <_realloc_r+0x1a>
 8012dc4:	0011      	movs	r1, r2
 8012dc6:	f7ff fd79 	bl	80128bc <_malloc_r>
 8012dca:	0007      	movs	r7, r0
 8012dcc:	0038      	movs	r0, r7
 8012dce:	b007      	add	sp, #28
 8012dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dd2:	9803      	ldr	r0, [sp, #12]
 8012dd4:	f7ff ffbc 	bl	8012d50 <__malloc_lock>
 8012dd8:	0023      	movs	r3, r4
 8012dda:	3b08      	subs	r3, #8
 8012ddc:	685f      	ldr	r7, [r3, #4]
 8012dde:	9302      	str	r3, [sp, #8]
 8012de0:	003a      	movs	r2, r7
 8012de2:	2303      	movs	r3, #3
 8012de4:	9e05      	ldr	r6, [sp, #20]
 8012de6:	439a      	bics	r2, r3
 8012de8:	360b      	adds	r6, #11
 8012dea:	9204      	str	r2, [sp, #16]
 8012dec:	2e16      	cmp	r6, #22
 8012dee:	d908      	bls.n	8012e02 <_realloc_r+0x4a>
 8012df0:	3304      	adds	r3, #4
 8012df2:	439e      	bics	r6, r3
 8012df4:	9601      	str	r6, [sp, #4]
 8012df6:	d506      	bpl.n	8012e06 <_realloc_r+0x4e>
 8012df8:	230c      	movs	r3, #12
 8012dfa:	9a03      	ldr	r2, [sp, #12]
 8012dfc:	2700      	movs	r7, #0
 8012dfe:	6013      	str	r3, [r2, #0]
 8012e00:	e7e4      	b.n	8012dcc <_realloc_r+0x14>
 8012e02:	2310      	movs	r3, #16
 8012e04:	9301      	str	r3, [sp, #4]
 8012e06:	9b01      	ldr	r3, [sp, #4]
 8012e08:	9a05      	ldr	r2, [sp, #20]
 8012e0a:	4293      	cmp	r3, r2
 8012e0c:	d3f4      	bcc.n	8012df8 <_realloc_r+0x40>
 8012e0e:	9b01      	ldr	r3, [sp, #4]
 8012e10:	9a04      	ldr	r2, [sp, #16]
 8012e12:	4293      	cmp	r3, r2
 8012e14:	dc00      	bgt.n	8012e18 <_realloc_r+0x60>
 8012e16:	e16f      	b.n	80130f8 <_realloc_r+0x340>
 8012e18:	9b02      	ldr	r3, [sp, #8]
 8012e1a:	48bc      	ldr	r0, [pc, #752]	; (801310c <_realloc_r+0x354>)
 8012e1c:	189b      	adds	r3, r3, r2
 8012e1e:	6882      	ldr	r2, [r0, #8]
 8012e20:	4694      	mov	ip, r2
 8012e22:	685a      	ldr	r2, [r3, #4]
 8012e24:	459c      	cmp	ip, r3
 8012e26:	d006      	beq.n	8012e36 <_realloc_r+0x7e>
 8012e28:	2501      	movs	r5, #1
 8012e2a:	0011      	movs	r1, r2
 8012e2c:	43a9      	bics	r1, r5
 8012e2e:	1859      	adds	r1, r3, r1
 8012e30:	6849      	ldr	r1, [r1, #4]
 8012e32:	4229      	tst	r1, r5
 8012e34:	d146      	bne.n	8012ec4 <_realloc_r+0x10c>
 8012e36:	2103      	movs	r1, #3
 8012e38:	438a      	bics	r2, r1
 8012e3a:	9904      	ldr	r1, [sp, #16]
 8012e3c:	188e      	adds	r6, r1, r2
 8012e3e:	9901      	ldr	r1, [sp, #4]
 8012e40:	459c      	cmp	ip, r3
 8012e42:	d117      	bne.n	8012e74 <_realloc_r+0xbc>
 8012e44:	3110      	adds	r1, #16
 8012e46:	42b1      	cmp	r1, r6
 8012e48:	dc3e      	bgt.n	8012ec8 <_realloc_r+0x110>
 8012e4a:	9901      	ldr	r1, [sp, #4]
 8012e4c:	9b02      	ldr	r3, [sp, #8]
 8012e4e:	468c      	mov	ip, r1
 8012e50:	4463      	add	r3, ip
 8012e52:	6083      	str	r3, [r0, #8]
 8012e54:	001a      	movs	r2, r3
 8012e56:	1a73      	subs	r3, r6, r1
 8012e58:	2601      	movs	r6, #1
 8012e5a:	4333      	orrs	r3, r6
 8012e5c:	6053      	str	r3, [r2, #4]
 8012e5e:	0023      	movs	r3, r4
 8012e60:	3b08      	subs	r3, #8
 8012e62:	685a      	ldr	r2, [r3, #4]
 8012e64:	9803      	ldr	r0, [sp, #12]
 8012e66:	4016      	ands	r6, r2
 8012e68:	430e      	orrs	r6, r1
 8012e6a:	605e      	str	r6, [r3, #4]
 8012e6c:	f7ff ff78 	bl	8012d60 <__malloc_unlock>
 8012e70:	0027      	movs	r7, r4
 8012e72:	e7ab      	b.n	8012dcc <_realloc_r+0x14>
 8012e74:	42b1      	cmp	r1, r6
 8012e76:	dc27      	bgt.n	8012ec8 <_realloc_r+0x110>
 8012e78:	68da      	ldr	r2, [r3, #12]
 8012e7a:	689b      	ldr	r3, [r3, #8]
 8012e7c:	60da      	str	r2, [r3, #12]
 8012e7e:	6093      	str	r3, [r2, #8]
 8012e80:	9b01      	ldr	r3, [sp, #4]
 8012e82:	9a02      	ldr	r2, [sp, #8]
 8012e84:	1af4      	subs	r4, r6, r3
 8012e86:	9b02      	ldr	r3, [sp, #8]
 8012e88:	1992      	adds	r2, r2, r6
 8012e8a:	685b      	ldr	r3, [r3, #4]
 8012e8c:	9304      	str	r3, [sp, #16]
 8012e8e:	2301      	movs	r3, #1
 8012e90:	9804      	ldr	r0, [sp, #16]
 8012e92:	4018      	ands	r0, r3
 8012e94:	2c0f      	cmp	r4, #15
 8012e96:	d800      	bhi.n	8012e9a <_realloc_r+0xe2>
 8012e98:	e130      	b.n	80130fc <_realloc_r+0x344>
 8012e9a:	9d01      	ldr	r5, [sp, #4]
 8012e9c:	9902      	ldr	r1, [sp, #8]
 8012e9e:	4328      	orrs	r0, r5
 8012ea0:	1949      	adds	r1, r1, r5
 8012ea2:	9d02      	ldr	r5, [sp, #8]
 8012ea4:	431c      	orrs	r4, r3
 8012ea6:	6068      	str	r0, [r5, #4]
 8012ea8:	604c      	str	r4, [r1, #4]
 8012eaa:	6850      	ldr	r0, [r2, #4]
 8012eac:	3108      	adds	r1, #8
 8012eae:	4303      	orrs	r3, r0
 8012eb0:	6053      	str	r3, [r2, #4]
 8012eb2:	9803      	ldr	r0, [sp, #12]
 8012eb4:	f003 fa0e 	bl	80162d4 <_free_r>
 8012eb8:	9803      	ldr	r0, [sp, #12]
 8012eba:	f7ff ff51 	bl	8012d60 <__malloc_unlock>
 8012ebe:	9f02      	ldr	r7, [sp, #8]
 8012ec0:	3708      	adds	r7, #8
 8012ec2:	e783      	b.n	8012dcc <_realloc_r+0x14>
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	0013      	movs	r3, r2
 8012ec8:	07f9      	lsls	r1, r7, #31
 8012eca:	d500      	bpl.n	8012ece <_realloc_r+0x116>
 8012ecc:	e0c6      	b.n	801305c <_realloc_r+0x2a4>
 8012ece:	0021      	movs	r1, r4
 8012ed0:	3908      	subs	r1, #8
 8012ed2:	680d      	ldr	r5, [r1, #0]
 8012ed4:	9902      	ldr	r1, [sp, #8]
 8012ed6:	1b4d      	subs	r5, r1, r5
 8012ed8:	2103      	movs	r1, #3
 8012eda:	686f      	ldr	r7, [r5, #4]
 8012edc:	438f      	bics	r7, r1
 8012ede:	9904      	ldr	r1, [sp, #16]
 8012ee0:	187f      	adds	r7, r7, r1
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d100      	bne.n	8012ee8 <_realloc_r+0x130>
 8012ee6:	e084      	b.n	8012ff2 <_realloc_r+0x23a>
 8012ee8:	19d6      	adds	r6, r2, r7
 8012eea:	459c      	cmp	ip, r3
 8012eec:	d148      	bne.n	8012f80 <_realloc_r+0x1c8>
 8012eee:	9b01      	ldr	r3, [sp, #4]
 8012ef0:	3310      	adds	r3, #16
 8012ef2:	42b3      	cmp	r3, r6
 8012ef4:	dc7d      	bgt.n	8012ff2 <_realloc_r+0x23a>
 8012ef6:	68aa      	ldr	r2, [r5, #8]
 8012ef8:	68eb      	ldr	r3, [r5, #12]
 8012efa:	002f      	movs	r7, r5
 8012efc:	60d3      	str	r3, [r2, #12]
 8012efe:	609a      	str	r2, [r3, #8]
 8012f00:	000a      	movs	r2, r1
 8012f02:	3a04      	subs	r2, #4
 8012f04:	3708      	adds	r7, #8
 8012f06:	2a24      	cmp	r2, #36	; 0x24
 8012f08:	d835      	bhi.n	8012f76 <_realloc_r+0x1be>
 8012f0a:	003b      	movs	r3, r7
 8012f0c:	2a13      	cmp	r2, #19
 8012f0e:	d908      	bls.n	8012f22 <_realloc_r+0x16a>
 8012f10:	6823      	ldr	r3, [r4, #0]
 8012f12:	60ab      	str	r3, [r5, #8]
 8012f14:	6863      	ldr	r3, [r4, #4]
 8012f16:	60eb      	str	r3, [r5, #12]
 8012f18:	2a1b      	cmp	r2, #27
 8012f1a:	d81a      	bhi.n	8012f52 <_realloc_r+0x19a>
 8012f1c:	002b      	movs	r3, r5
 8012f1e:	3408      	adds	r4, #8
 8012f20:	3310      	adds	r3, #16
 8012f22:	6822      	ldr	r2, [r4, #0]
 8012f24:	601a      	str	r2, [r3, #0]
 8012f26:	6862      	ldr	r2, [r4, #4]
 8012f28:	605a      	str	r2, [r3, #4]
 8012f2a:	68a2      	ldr	r2, [r4, #8]
 8012f2c:	609a      	str	r2, [r3, #8]
 8012f2e:	9b01      	ldr	r3, [sp, #4]
 8012f30:	18ea      	adds	r2, r5, r3
 8012f32:	4b76      	ldr	r3, [pc, #472]	; (801310c <_realloc_r+0x354>)
 8012f34:	609a      	str	r2, [r3, #8]
 8012f36:	9b01      	ldr	r3, [sp, #4]
 8012f38:	1af3      	subs	r3, r6, r3
 8012f3a:	2601      	movs	r6, #1
 8012f3c:	4333      	orrs	r3, r6
 8012f3e:	6053      	str	r3, [r2, #4]
 8012f40:	686b      	ldr	r3, [r5, #4]
 8012f42:	401e      	ands	r6, r3
 8012f44:	9b01      	ldr	r3, [sp, #4]
 8012f46:	431e      	orrs	r6, r3
 8012f48:	606e      	str	r6, [r5, #4]
 8012f4a:	9803      	ldr	r0, [sp, #12]
 8012f4c:	f7ff ff08 	bl	8012d60 <__malloc_unlock>
 8012f50:	e73c      	b.n	8012dcc <_realloc_r+0x14>
 8012f52:	68a3      	ldr	r3, [r4, #8]
 8012f54:	612b      	str	r3, [r5, #16]
 8012f56:	68e3      	ldr	r3, [r4, #12]
 8012f58:	616b      	str	r3, [r5, #20]
 8012f5a:	2a24      	cmp	r2, #36	; 0x24
 8012f5c:	d003      	beq.n	8012f66 <_realloc_r+0x1ae>
 8012f5e:	002b      	movs	r3, r5
 8012f60:	3410      	adds	r4, #16
 8012f62:	3318      	adds	r3, #24
 8012f64:	e7dd      	b.n	8012f22 <_realloc_r+0x16a>
 8012f66:	6923      	ldr	r3, [r4, #16]
 8012f68:	61ab      	str	r3, [r5, #24]
 8012f6a:	002b      	movs	r3, r5
 8012f6c:	6962      	ldr	r2, [r4, #20]
 8012f6e:	3320      	adds	r3, #32
 8012f70:	61ea      	str	r2, [r5, #28]
 8012f72:	3418      	adds	r4, #24
 8012f74:	e7d5      	b.n	8012f22 <_realloc_r+0x16a>
 8012f76:	0021      	movs	r1, r4
 8012f78:	0038      	movs	r0, r7
 8012f7a:	f003 fdac 	bl	8016ad6 <memmove>
 8012f7e:	e7d6      	b.n	8012f2e <_realloc_r+0x176>
 8012f80:	9a01      	ldr	r2, [sp, #4]
 8012f82:	42b2      	cmp	r2, r6
 8012f84:	dc35      	bgt.n	8012ff2 <_realloc_r+0x23a>
 8012f86:	0028      	movs	r0, r5
 8012f88:	68da      	ldr	r2, [r3, #12]
 8012f8a:	689b      	ldr	r3, [r3, #8]
 8012f8c:	3008      	adds	r0, #8
 8012f8e:	60da      	str	r2, [r3, #12]
 8012f90:	6093      	str	r3, [r2, #8]
 8012f92:	68aa      	ldr	r2, [r5, #8]
 8012f94:	68eb      	ldr	r3, [r5, #12]
 8012f96:	60d3      	str	r3, [r2, #12]
 8012f98:	609a      	str	r2, [r3, #8]
 8012f9a:	9a04      	ldr	r2, [sp, #16]
 8012f9c:	3a04      	subs	r2, #4
 8012f9e:	2a24      	cmp	r2, #36	; 0x24
 8012fa0:	d823      	bhi.n	8012fea <_realloc_r+0x232>
 8012fa2:	2a13      	cmp	r2, #19
 8012fa4:	d907      	bls.n	8012fb6 <_realloc_r+0x1fe>
 8012fa6:	6823      	ldr	r3, [r4, #0]
 8012fa8:	60ab      	str	r3, [r5, #8]
 8012faa:	6863      	ldr	r3, [r4, #4]
 8012fac:	60eb      	str	r3, [r5, #12]
 8012fae:	2a1b      	cmp	r2, #27
 8012fb0:	d809      	bhi.n	8012fc6 <_realloc_r+0x20e>
 8012fb2:	3408      	adds	r4, #8
 8012fb4:	3008      	adds	r0, #8
 8012fb6:	6823      	ldr	r3, [r4, #0]
 8012fb8:	6003      	str	r3, [r0, #0]
 8012fba:	6863      	ldr	r3, [r4, #4]
 8012fbc:	6043      	str	r3, [r0, #4]
 8012fbe:	68a3      	ldr	r3, [r4, #8]
 8012fc0:	6083      	str	r3, [r0, #8]
 8012fc2:	9502      	str	r5, [sp, #8]
 8012fc4:	e75c      	b.n	8012e80 <_realloc_r+0xc8>
 8012fc6:	68a3      	ldr	r3, [r4, #8]
 8012fc8:	612b      	str	r3, [r5, #16]
 8012fca:	68e3      	ldr	r3, [r4, #12]
 8012fcc:	616b      	str	r3, [r5, #20]
 8012fce:	2a24      	cmp	r2, #36	; 0x24
 8012fd0:	d003      	beq.n	8012fda <_realloc_r+0x222>
 8012fd2:	0028      	movs	r0, r5
 8012fd4:	3410      	adds	r4, #16
 8012fd6:	3018      	adds	r0, #24
 8012fd8:	e7ed      	b.n	8012fb6 <_realloc_r+0x1fe>
 8012fda:	0028      	movs	r0, r5
 8012fdc:	6923      	ldr	r3, [r4, #16]
 8012fde:	3020      	adds	r0, #32
 8012fe0:	61ab      	str	r3, [r5, #24]
 8012fe2:	6963      	ldr	r3, [r4, #20]
 8012fe4:	3418      	adds	r4, #24
 8012fe6:	61eb      	str	r3, [r5, #28]
 8012fe8:	e7e5      	b.n	8012fb6 <_realloc_r+0x1fe>
 8012fea:	0021      	movs	r1, r4
 8012fec:	f003 fd73 	bl	8016ad6 <memmove>
 8012ff0:	e7e7      	b.n	8012fc2 <_realloc_r+0x20a>
 8012ff2:	9b01      	ldr	r3, [sp, #4]
 8012ff4:	42bb      	cmp	r3, r7
 8012ff6:	dc31      	bgt.n	801305c <_realloc_r+0x2a4>
 8012ff8:	0028      	movs	r0, r5
 8012ffa:	68aa      	ldr	r2, [r5, #8]
 8012ffc:	68eb      	ldr	r3, [r5, #12]
 8012ffe:	3008      	adds	r0, #8
 8013000:	60d3      	str	r3, [r2, #12]
 8013002:	609a      	str	r2, [r3, #8]
 8013004:	9a04      	ldr	r2, [sp, #16]
 8013006:	3a04      	subs	r2, #4
 8013008:	2a24      	cmp	r2, #36	; 0x24
 801300a:	d823      	bhi.n	8013054 <_realloc_r+0x29c>
 801300c:	2a13      	cmp	r2, #19
 801300e:	d907      	bls.n	8013020 <_realloc_r+0x268>
 8013010:	6823      	ldr	r3, [r4, #0]
 8013012:	60ab      	str	r3, [r5, #8]
 8013014:	6863      	ldr	r3, [r4, #4]
 8013016:	60eb      	str	r3, [r5, #12]
 8013018:	2a1b      	cmp	r2, #27
 801301a:	d809      	bhi.n	8013030 <_realloc_r+0x278>
 801301c:	3408      	adds	r4, #8
 801301e:	3008      	adds	r0, #8
 8013020:	6823      	ldr	r3, [r4, #0]
 8013022:	6003      	str	r3, [r0, #0]
 8013024:	6863      	ldr	r3, [r4, #4]
 8013026:	6043      	str	r3, [r0, #4]
 8013028:	68a3      	ldr	r3, [r4, #8]
 801302a:	6083      	str	r3, [r0, #8]
 801302c:	003e      	movs	r6, r7
 801302e:	e7c8      	b.n	8012fc2 <_realloc_r+0x20a>
 8013030:	68a3      	ldr	r3, [r4, #8]
 8013032:	612b      	str	r3, [r5, #16]
 8013034:	68e3      	ldr	r3, [r4, #12]
 8013036:	616b      	str	r3, [r5, #20]
 8013038:	2a24      	cmp	r2, #36	; 0x24
 801303a:	d003      	beq.n	8013044 <_realloc_r+0x28c>
 801303c:	0028      	movs	r0, r5
 801303e:	3410      	adds	r4, #16
 8013040:	3018      	adds	r0, #24
 8013042:	e7ed      	b.n	8013020 <_realloc_r+0x268>
 8013044:	0028      	movs	r0, r5
 8013046:	6923      	ldr	r3, [r4, #16]
 8013048:	3020      	adds	r0, #32
 801304a:	61ab      	str	r3, [r5, #24]
 801304c:	6963      	ldr	r3, [r4, #20]
 801304e:	3418      	adds	r4, #24
 8013050:	61eb      	str	r3, [r5, #28]
 8013052:	e7e5      	b.n	8013020 <_realloc_r+0x268>
 8013054:	0021      	movs	r1, r4
 8013056:	f003 fd3e 	bl	8016ad6 <memmove>
 801305a:	e7e7      	b.n	801302c <_realloc_r+0x274>
 801305c:	9905      	ldr	r1, [sp, #20]
 801305e:	9803      	ldr	r0, [sp, #12]
 8013060:	f7ff fc2c 	bl	80128bc <_malloc_r>
 8013064:	1e07      	subs	r7, r0, #0
 8013066:	d100      	bne.n	801306a <_realloc_r+0x2b2>
 8013068:	e76f      	b.n	8012f4a <_realloc_r+0x192>
 801306a:	0023      	movs	r3, r4
 801306c:	2201      	movs	r2, #1
 801306e:	3b08      	subs	r3, #8
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	4393      	bics	r3, r2
 8013074:	9a02      	ldr	r2, [sp, #8]
 8013076:	18d3      	adds	r3, r2, r3
 8013078:	0002      	movs	r2, r0
 801307a:	3a08      	subs	r2, #8
 801307c:	4293      	cmp	r3, r2
 801307e:	d105      	bne.n	801308c <_realloc_r+0x2d4>
 8013080:	685e      	ldr	r6, [r3, #4]
 8013082:	2303      	movs	r3, #3
 8013084:	439e      	bics	r6, r3
 8013086:	9b04      	ldr	r3, [sp, #16]
 8013088:	18f6      	adds	r6, r6, r3
 801308a:	e6f9      	b.n	8012e80 <_realloc_r+0xc8>
 801308c:	9a04      	ldr	r2, [sp, #16]
 801308e:	3a04      	subs	r2, #4
 8013090:	2a24      	cmp	r2, #36	; 0x24
 8013092:	d82d      	bhi.n	80130f0 <_realloc_r+0x338>
 8013094:	2a13      	cmp	r2, #19
 8013096:	d928      	bls.n	80130ea <_realloc_r+0x332>
 8013098:	6823      	ldr	r3, [r4, #0]
 801309a:	6003      	str	r3, [r0, #0]
 801309c:	6863      	ldr	r3, [r4, #4]
 801309e:	6043      	str	r3, [r0, #4]
 80130a0:	2a1b      	cmp	r2, #27
 80130a2:	d80e      	bhi.n	80130c2 <_realloc_r+0x30a>
 80130a4:	0022      	movs	r2, r4
 80130a6:	0003      	movs	r3, r0
 80130a8:	3208      	adds	r2, #8
 80130aa:	3308      	adds	r3, #8
 80130ac:	6811      	ldr	r1, [r2, #0]
 80130ae:	6019      	str	r1, [r3, #0]
 80130b0:	6851      	ldr	r1, [r2, #4]
 80130b2:	6059      	str	r1, [r3, #4]
 80130b4:	6892      	ldr	r2, [r2, #8]
 80130b6:	609a      	str	r2, [r3, #8]
 80130b8:	0021      	movs	r1, r4
 80130ba:	9803      	ldr	r0, [sp, #12]
 80130bc:	f003 f90a 	bl	80162d4 <_free_r>
 80130c0:	e743      	b.n	8012f4a <_realloc_r+0x192>
 80130c2:	68a3      	ldr	r3, [r4, #8]
 80130c4:	6083      	str	r3, [r0, #8]
 80130c6:	68e3      	ldr	r3, [r4, #12]
 80130c8:	60c3      	str	r3, [r0, #12]
 80130ca:	2a24      	cmp	r2, #36	; 0x24
 80130cc:	d004      	beq.n	80130d8 <_realloc_r+0x320>
 80130ce:	0022      	movs	r2, r4
 80130d0:	0003      	movs	r3, r0
 80130d2:	3210      	adds	r2, #16
 80130d4:	3310      	adds	r3, #16
 80130d6:	e7e9      	b.n	80130ac <_realloc_r+0x2f4>
 80130d8:	6923      	ldr	r3, [r4, #16]
 80130da:	0022      	movs	r2, r4
 80130dc:	6103      	str	r3, [r0, #16]
 80130de:	0003      	movs	r3, r0
 80130e0:	6961      	ldr	r1, [r4, #20]
 80130e2:	3218      	adds	r2, #24
 80130e4:	3318      	adds	r3, #24
 80130e6:	6141      	str	r1, [r0, #20]
 80130e8:	e7e0      	b.n	80130ac <_realloc_r+0x2f4>
 80130ea:	0003      	movs	r3, r0
 80130ec:	0022      	movs	r2, r4
 80130ee:	e7dd      	b.n	80130ac <_realloc_r+0x2f4>
 80130f0:	0021      	movs	r1, r4
 80130f2:	f003 fcf0 	bl	8016ad6 <memmove>
 80130f6:	e7df      	b.n	80130b8 <_realloc_r+0x300>
 80130f8:	9e04      	ldr	r6, [sp, #16]
 80130fa:	e6c1      	b.n	8012e80 <_realloc_r+0xc8>
 80130fc:	9902      	ldr	r1, [sp, #8]
 80130fe:	4306      	orrs	r6, r0
 8013100:	604e      	str	r6, [r1, #4]
 8013102:	6851      	ldr	r1, [r2, #4]
 8013104:	430b      	orrs	r3, r1
 8013106:	6053      	str	r3, [r2, #4]
 8013108:	e6d6      	b.n	8012eb8 <_realloc_r+0x100>
 801310a:	46c0      	nop			; (mov r8, r8)
 801310c:	20000674 	.word	0x20000674

08013110 <_sbrk_r>:
 8013110:	2300      	movs	r3, #0
 8013112:	b570      	push	{r4, r5, r6, lr}
 8013114:	4c06      	ldr	r4, [pc, #24]	; (8013130 <_sbrk_r+0x20>)
 8013116:	0005      	movs	r5, r0
 8013118:	0008      	movs	r0, r1
 801311a:	6023      	str	r3, [r4, #0]
 801311c:	f004 f9c0 	bl	80174a0 <_sbrk>
 8013120:	1c43      	adds	r3, r0, #1
 8013122:	d103      	bne.n	801312c <_sbrk_r+0x1c>
 8013124:	6823      	ldr	r3, [r4, #0]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d000      	beq.n	801312c <_sbrk_r+0x1c>
 801312a:	602b      	str	r3, [r5, #0]
 801312c:	bd70      	pop	{r4, r5, r6, pc}
 801312e:	46c0      	nop			; (mov r8, r8)
 8013130:	200072dc 	.word	0x200072dc

08013134 <sprintf>:
 8013134:	b40e      	push	{r1, r2, r3}
 8013136:	b500      	push	{lr}
 8013138:	490b      	ldr	r1, [pc, #44]	; (8013168 <sprintf+0x34>)
 801313a:	b09c      	sub	sp, #112	; 0x70
 801313c:	ab1d      	add	r3, sp, #116	; 0x74
 801313e:	9002      	str	r0, [sp, #8]
 8013140:	9006      	str	r0, [sp, #24]
 8013142:	9107      	str	r1, [sp, #28]
 8013144:	9104      	str	r1, [sp, #16]
 8013146:	4809      	ldr	r0, [pc, #36]	; (801316c <sprintf+0x38>)
 8013148:	4909      	ldr	r1, [pc, #36]	; (8013170 <sprintf+0x3c>)
 801314a:	cb04      	ldmia	r3!, {r2}
 801314c:	9105      	str	r1, [sp, #20]
 801314e:	6800      	ldr	r0, [r0, #0]
 8013150:	a902      	add	r1, sp, #8
 8013152:	9301      	str	r3, [sp, #4]
 8013154:	f000 ff78 	bl	8014048 <_svfprintf_r>
 8013158:	2300      	movs	r3, #0
 801315a:	9a02      	ldr	r2, [sp, #8]
 801315c:	7013      	strb	r3, [r2, #0]
 801315e:	b01c      	add	sp, #112	; 0x70
 8013160:	bc08      	pop	{r3}
 8013162:	b003      	add	sp, #12
 8013164:	4718      	bx	r3
 8013166:	46c0      	nop			; (mov r8, r8)
 8013168:	7fffffff 	.word	0x7fffffff
 801316c:	200000d8 	.word	0x200000d8
 8013170:	ffff0208 	.word	0xffff0208

08013174 <strcat>:
 8013174:	0002      	movs	r2, r0
 8013176:	b510      	push	{r4, lr}
 8013178:	7813      	ldrb	r3, [r2, #0]
 801317a:	1c54      	adds	r4, r2, #1
 801317c:	2b00      	cmp	r3, #0
 801317e:	d105      	bne.n	801318c <strcat+0x18>
 8013180:	5ccc      	ldrb	r4, [r1, r3]
 8013182:	54d4      	strb	r4, [r2, r3]
 8013184:	3301      	adds	r3, #1
 8013186:	2c00      	cmp	r4, #0
 8013188:	d1fa      	bne.n	8013180 <strcat+0xc>
 801318a:	bd10      	pop	{r4, pc}
 801318c:	0022      	movs	r2, r4
 801318e:	e7f3      	b.n	8013178 <strcat+0x4>

08013190 <strchr>:
 8013190:	b2c9      	uxtb	r1, r1
 8013192:	7803      	ldrb	r3, [r0, #0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d004      	beq.n	80131a2 <strchr+0x12>
 8013198:	428b      	cmp	r3, r1
 801319a:	d100      	bne.n	801319e <strchr+0xe>
 801319c:	4770      	bx	lr
 801319e:	3001      	adds	r0, #1
 80131a0:	e7f7      	b.n	8013192 <strchr+0x2>
 80131a2:	424b      	negs	r3, r1
 80131a4:	4159      	adcs	r1, r3
 80131a6:	4249      	negs	r1, r1
 80131a8:	4008      	ands	r0, r1
 80131aa:	e7f7      	b.n	801319c <strchr+0xc>

080131ac <strcpy>:
 80131ac:	0003      	movs	r3, r0
 80131ae:	780a      	ldrb	r2, [r1, #0]
 80131b0:	3101      	adds	r1, #1
 80131b2:	701a      	strb	r2, [r3, #0]
 80131b4:	3301      	adds	r3, #1
 80131b6:	2a00      	cmp	r2, #0
 80131b8:	d1f9      	bne.n	80131ae <strcpy+0x2>
 80131ba:	4770      	bx	lr

080131bc <strncmp>:
 80131bc:	2300      	movs	r3, #0
 80131be:	b530      	push	{r4, r5, lr}
 80131c0:	429a      	cmp	r2, r3
 80131c2:	d00a      	beq.n	80131da <strncmp+0x1e>
 80131c4:	3a01      	subs	r2, #1
 80131c6:	5cc4      	ldrb	r4, [r0, r3]
 80131c8:	5ccd      	ldrb	r5, [r1, r3]
 80131ca:	42ac      	cmp	r4, r5
 80131cc:	d104      	bne.n	80131d8 <strncmp+0x1c>
 80131ce:	4293      	cmp	r3, r2
 80131d0:	d002      	beq.n	80131d8 <strncmp+0x1c>
 80131d2:	3301      	adds	r3, #1
 80131d4:	2c00      	cmp	r4, #0
 80131d6:	d1f6      	bne.n	80131c6 <strncmp+0xa>
 80131d8:	1b63      	subs	r3, r4, r5
 80131da:	0018      	movs	r0, r3
 80131dc:	bd30      	pop	{r4, r5, pc}

080131de <strncpy>:
 80131de:	b530      	push	{r4, r5, lr}
 80131e0:	0005      	movs	r5, r0
 80131e2:	2a00      	cmp	r2, #0
 80131e4:	d100      	bne.n	80131e8 <strncpy+0xa>
 80131e6:	bd30      	pop	{r4, r5, pc}
 80131e8:	780c      	ldrb	r4, [r1, #0]
 80131ea:	3a01      	subs	r2, #1
 80131ec:	1c6b      	adds	r3, r5, #1
 80131ee:	702c      	strb	r4, [r5, #0]
 80131f0:	3101      	adds	r1, #1
 80131f2:	2c00      	cmp	r4, #0
 80131f4:	d105      	bne.n	8013202 <strncpy+0x24>
 80131f6:	189a      	adds	r2, r3, r2
 80131f8:	429a      	cmp	r2, r3
 80131fa:	d0f4      	beq.n	80131e6 <strncpy+0x8>
 80131fc:	701c      	strb	r4, [r3, #0]
 80131fe:	3301      	adds	r3, #1
 8013200:	e7fa      	b.n	80131f8 <strncpy+0x1a>
 8013202:	001d      	movs	r5, r3
 8013204:	e7ed      	b.n	80131e2 <strncpy+0x4>
	...

08013208 <sulp>:
 8013208:	b570      	push	{r4, r5, r6, lr}
 801320a:	0016      	movs	r6, r2
 801320c:	000d      	movs	r5, r1
 801320e:	f003 ff17 	bl	8017040 <__ulp>
 8013212:	2e00      	cmp	r6, #0
 8013214:	d00d      	beq.n	8013232 <sulp+0x2a>
 8013216:	236b      	movs	r3, #107	; 0x6b
 8013218:	006a      	lsls	r2, r5, #1
 801321a:	0d52      	lsrs	r2, r2, #21
 801321c:	1a9b      	subs	r3, r3, r2
 801321e:	2b00      	cmp	r3, #0
 8013220:	dd07      	ble.n	8013232 <sulp+0x2a>
 8013222:	2400      	movs	r4, #0
 8013224:	4a03      	ldr	r2, [pc, #12]	; (8013234 <sulp+0x2c>)
 8013226:	051b      	lsls	r3, r3, #20
 8013228:	189d      	adds	r5, r3, r2
 801322a:	002b      	movs	r3, r5
 801322c:	0022      	movs	r2, r4
 801322e:	f7ee fe01 	bl	8001e34 <__aeabi_dmul>
 8013232:	bd70      	pop	{r4, r5, r6, pc}
 8013234:	3ff00000 	.word	0x3ff00000

08013238 <_strtod_l>:
 8013238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801323a:	b0a7      	sub	sp, #156	; 0x9c
 801323c:	9307      	str	r3, [sp, #28]
 801323e:	2300      	movs	r3, #0
 8013240:	9004      	str	r0, [sp, #16]
 8013242:	9807      	ldr	r0, [sp, #28]
 8013244:	9322      	str	r3, [sp, #136]	; 0x88
 8013246:	9106      	str	r1, [sp, #24]
 8013248:	921d      	str	r2, [sp, #116]	; 0x74
 801324a:	f003 fc28 	bl	8016a9e <__localeconv_l>
 801324e:	0005      	movs	r5, r0
 8013250:	6800      	ldr	r0, [r0, #0]
 8013252:	f7ec ff61 	bl	8000118 <strlen>
 8013256:	2600      	movs	r6, #0
 8013258:	2700      	movs	r7, #0
 801325a:	9b06      	ldr	r3, [sp, #24]
 801325c:	9005      	str	r0, [sp, #20]
 801325e:	9321      	str	r3, [sp, #132]	; 0x84
 8013260:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013262:	781a      	ldrb	r2, [r3, #0]
 8013264:	2a0d      	cmp	r2, #13
 8013266:	d839      	bhi.n	80132dc <_strtod_l+0xa4>
 8013268:	2a09      	cmp	r2, #9
 801326a:	d23d      	bcs.n	80132e8 <_strtod_l+0xb0>
 801326c:	2a00      	cmp	r2, #0
 801326e:	d044      	beq.n	80132fa <_strtod_l+0xc2>
 8013270:	2300      	movs	r3, #0
 8013272:	9313      	str	r3, [sp, #76]	; 0x4c
 8013274:	2200      	movs	r2, #0
 8013276:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8013278:	920c      	str	r2, [sp, #48]	; 0x30
 801327a:	7823      	ldrb	r3, [r4, #0]
 801327c:	2b30      	cmp	r3, #48	; 0x30
 801327e:	d000      	beq.n	8013282 <_strtod_l+0x4a>
 8013280:	e07e      	b.n	8013380 <_strtod_l+0x148>
 8013282:	7863      	ldrb	r3, [r4, #1]
 8013284:	2b58      	cmp	r3, #88	; 0x58
 8013286:	d002      	beq.n	801328e <_strtod_l+0x56>
 8013288:	2b78      	cmp	r3, #120	; 0x78
 801328a:	d000      	beq.n	801328e <_strtod_l+0x56>
 801328c:	e06e      	b.n	801336c <_strtod_l+0x134>
 801328e:	9b07      	ldr	r3, [sp, #28]
 8013290:	4a96      	ldr	r2, [pc, #600]	; (80134ec <_strtod_l+0x2b4>)
 8013292:	9302      	str	r3, [sp, #8]
 8013294:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013296:	a921      	add	r1, sp, #132	; 0x84
 8013298:	9301      	str	r3, [sp, #4]
 801329a:	ab22      	add	r3, sp, #136	; 0x88
 801329c:	9300      	str	r3, [sp, #0]
 801329e:	9804      	ldr	r0, [sp, #16]
 80132a0:	ab23      	add	r3, sp, #140	; 0x8c
 80132a2:	f003 f914 	bl	80164ce <__gethex>
 80132a6:	2507      	movs	r5, #7
 80132a8:	9005      	str	r0, [sp, #20]
 80132aa:	4005      	ands	r5, r0
 80132ac:	d005      	beq.n	80132ba <_strtod_l+0x82>
 80132ae:	2d06      	cmp	r5, #6
 80132b0:	d12f      	bne.n	8013312 <_strtod_l+0xda>
 80132b2:	2300      	movs	r3, #0
 80132b4:	3401      	adds	r4, #1
 80132b6:	9421      	str	r4, [sp, #132]	; 0x84
 80132b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80132ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d002      	beq.n	80132c6 <_strtod_l+0x8e>
 80132c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80132c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80132c4:	601a      	str	r2, [r3, #0]
 80132c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d01d      	beq.n	8013308 <_strtod_l+0xd0>
 80132cc:	2380      	movs	r3, #128	; 0x80
 80132ce:	0032      	movs	r2, r6
 80132d0:	061b      	lsls	r3, r3, #24
 80132d2:	18fb      	adds	r3, r7, r3
 80132d4:	0010      	movs	r0, r2
 80132d6:	0019      	movs	r1, r3
 80132d8:	b027      	add	sp, #156	; 0x9c
 80132da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132dc:	2a2b      	cmp	r2, #43	; 0x2b
 80132de:	d016      	beq.n	801330e <_strtod_l+0xd6>
 80132e0:	2a2d      	cmp	r2, #45	; 0x2d
 80132e2:	d003      	beq.n	80132ec <_strtod_l+0xb4>
 80132e4:	2a20      	cmp	r2, #32
 80132e6:	d1c3      	bne.n	8013270 <_strtod_l+0x38>
 80132e8:	3301      	adds	r3, #1
 80132ea:	e7b8      	b.n	801325e <_strtod_l+0x26>
 80132ec:	2201      	movs	r2, #1
 80132ee:	9213      	str	r2, [sp, #76]	; 0x4c
 80132f0:	1c5a      	adds	r2, r3, #1
 80132f2:	9221      	str	r2, [sp, #132]	; 0x84
 80132f4:	785b      	ldrb	r3, [r3, #1]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d1bc      	bne.n	8013274 <_strtod_l+0x3c>
 80132fa:	9b06      	ldr	r3, [sp, #24]
 80132fc:	9321      	str	r3, [sp, #132]	; 0x84
 80132fe:	2300      	movs	r3, #0
 8013300:	9313      	str	r3, [sp, #76]	; 0x4c
 8013302:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013304:	2b00      	cmp	r3, #0
 8013306:	d1db      	bne.n	80132c0 <_strtod_l+0x88>
 8013308:	0032      	movs	r2, r6
 801330a:	003b      	movs	r3, r7
 801330c:	e7e2      	b.n	80132d4 <_strtod_l+0x9c>
 801330e:	2200      	movs	r2, #0
 8013310:	e7ed      	b.n	80132ee <_strtod_l+0xb6>
 8013312:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013314:	2a00      	cmp	r2, #0
 8013316:	d007      	beq.n	8013328 <_strtod_l+0xf0>
 8013318:	2135      	movs	r1, #53	; 0x35
 801331a:	a824      	add	r0, sp, #144	; 0x90
 801331c:	f003 ff7d 	bl	801721a <__copybits>
 8013320:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013322:	9804      	ldr	r0, [sp, #16]
 8013324:	f003 fc12 	bl	8016b4c <_Bfree>
 8013328:	1e68      	subs	r0, r5, #1
 801332a:	2804      	cmp	r0, #4
 801332c:	d806      	bhi.n	801333c <_strtod_l+0x104>
 801332e:	f7ec fefb 	bl	8000128 <__gnu_thumb1_case_uqi>
 8013332:	030c      	.short	0x030c
 8013334:	1917      	.short	0x1917
 8013336:	0c          	.byte	0x0c
 8013337:	00          	.byte	0x00
 8013338:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801333a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801333c:	9b05      	ldr	r3, [sp, #20]
 801333e:	071b      	lsls	r3, r3, #28
 8013340:	d5bb      	bpl.n	80132ba <_strtod_l+0x82>
 8013342:	2380      	movs	r3, #128	; 0x80
 8013344:	061b      	lsls	r3, r3, #24
 8013346:	431f      	orrs	r7, r3
 8013348:	e7b7      	b.n	80132ba <_strtod_l+0x82>
 801334a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801334c:	4a68      	ldr	r2, [pc, #416]	; (80134f0 <_strtod_l+0x2b8>)
 801334e:	4969      	ldr	r1, [pc, #420]	; (80134f4 <_strtod_l+0x2bc>)
 8013350:	401a      	ands	r2, r3
 8013352:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013354:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013356:	185b      	adds	r3, r3, r1
 8013358:	051b      	lsls	r3, r3, #20
 801335a:	431a      	orrs	r2, r3
 801335c:	0017      	movs	r7, r2
 801335e:	e7ed      	b.n	801333c <_strtod_l+0x104>
 8013360:	4f65      	ldr	r7, [pc, #404]	; (80134f8 <_strtod_l+0x2c0>)
 8013362:	e7eb      	b.n	801333c <_strtod_l+0x104>
 8013364:	2601      	movs	r6, #1
 8013366:	4f65      	ldr	r7, [pc, #404]	; (80134fc <_strtod_l+0x2c4>)
 8013368:	4276      	negs	r6, r6
 801336a:	e7e7      	b.n	801333c <_strtod_l+0x104>
 801336c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801336e:	1c5a      	adds	r2, r3, #1
 8013370:	9221      	str	r2, [sp, #132]	; 0x84
 8013372:	785b      	ldrb	r3, [r3, #1]
 8013374:	2b30      	cmp	r3, #48	; 0x30
 8013376:	d0f9      	beq.n	801336c <_strtod_l+0x134>
 8013378:	2b00      	cmp	r3, #0
 801337a:	d09e      	beq.n	80132ba <_strtod_l+0x82>
 801337c:	2301      	movs	r3, #1
 801337e:	930c      	str	r3, [sp, #48]	; 0x30
 8013380:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013382:	220a      	movs	r2, #10
 8013384:	9312      	str	r3, [sp, #72]	; 0x48
 8013386:	2300      	movs	r3, #0
 8013388:	930b      	str	r3, [sp, #44]	; 0x2c
 801338a:	9308      	str	r3, [sp, #32]
 801338c:	930a      	str	r3, [sp, #40]	; 0x28
 801338e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8013390:	7804      	ldrb	r4, [r0, #0]
 8013392:	0023      	movs	r3, r4
 8013394:	3b30      	subs	r3, #48	; 0x30
 8013396:	b2d9      	uxtb	r1, r3
 8013398:	2909      	cmp	r1, #9
 801339a:	d934      	bls.n	8013406 <_strtod_l+0x1ce>
 801339c:	9a05      	ldr	r2, [sp, #20]
 801339e:	6829      	ldr	r1, [r5, #0]
 80133a0:	f7ff ff0c 	bl	80131bc <strncmp>
 80133a4:	2800      	cmp	r0, #0
 80133a6:	d040      	beq.n	801342a <_strtod_l+0x1f2>
 80133a8:	2000      	movs	r0, #0
 80133aa:	0023      	movs	r3, r4
 80133ac:	4684      	mov	ip, r0
 80133ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133b0:	9007      	str	r0, [sp, #28]
 80133b2:	9205      	str	r2, [sp, #20]
 80133b4:	2220      	movs	r2, #32
 80133b6:	0019      	movs	r1, r3
 80133b8:	4391      	bics	r1, r2
 80133ba:	000a      	movs	r2, r1
 80133bc:	2100      	movs	r1, #0
 80133be:	2a45      	cmp	r2, #69	; 0x45
 80133c0:	d000      	beq.n	80133c4 <_strtod_l+0x18c>
 80133c2:	e0bf      	b.n	8013544 <_strtod_l+0x30c>
 80133c4:	9b05      	ldr	r3, [sp, #20]
 80133c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133c8:	4303      	orrs	r3, r0
 80133ca:	4313      	orrs	r3, r2
 80133cc:	428b      	cmp	r3, r1
 80133ce:	d094      	beq.n	80132fa <_strtod_l+0xc2>
 80133d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80133d2:	9306      	str	r3, [sp, #24]
 80133d4:	3301      	adds	r3, #1
 80133d6:	9321      	str	r3, [sp, #132]	; 0x84
 80133d8:	9b06      	ldr	r3, [sp, #24]
 80133da:	785b      	ldrb	r3, [r3, #1]
 80133dc:	2b2b      	cmp	r3, #43	; 0x2b
 80133de:	d100      	bne.n	80133e2 <_strtod_l+0x1aa>
 80133e0:	e082      	b.n	80134e8 <_strtod_l+0x2b0>
 80133e2:	000c      	movs	r4, r1
 80133e4:	2b2d      	cmp	r3, #45	; 0x2d
 80133e6:	d105      	bne.n	80133f4 <_strtod_l+0x1bc>
 80133e8:	2401      	movs	r4, #1
 80133ea:	9b06      	ldr	r3, [sp, #24]
 80133ec:	3302      	adds	r3, #2
 80133ee:	9321      	str	r3, [sp, #132]	; 0x84
 80133f0:	9b06      	ldr	r3, [sp, #24]
 80133f2:	789b      	ldrb	r3, [r3, #2]
 80133f4:	001a      	movs	r2, r3
 80133f6:	3a30      	subs	r2, #48	; 0x30
 80133f8:	2a09      	cmp	r2, #9
 80133fa:	d800      	bhi.n	80133fe <_strtod_l+0x1c6>
 80133fc:	e084      	b.n	8013508 <_strtod_l+0x2d0>
 80133fe:	9a06      	ldr	r2, [sp, #24]
 8013400:	2100      	movs	r1, #0
 8013402:	9221      	str	r2, [sp, #132]	; 0x84
 8013404:	e09e      	b.n	8013544 <_strtod_l+0x30c>
 8013406:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013408:	2908      	cmp	r1, #8
 801340a:	dc09      	bgt.n	8013420 <_strtod_l+0x1e8>
 801340c:	9908      	ldr	r1, [sp, #32]
 801340e:	4351      	muls	r1, r2
 8013410:	18cb      	adds	r3, r1, r3
 8013412:	9308      	str	r3, [sp, #32]
 8013414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013416:	3001      	adds	r0, #1
 8013418:	3301      	adds	r3, #1
 801341a:	930a      	str	r3, [sp, #40]	; 0x28
 801341c:	9021      	str	r0, [sp, #132]	; 0x84
 801341e:	e7b6      	b.n	801338e <_strtod_l+0x156>
 8013420:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013422:	4351      	muls	r1, r2
 8013424:	18cb      	adds	r3, r1, r3
 8013426:	930b      	str	r3, [sp, #44]	; 0x2c
 8013428:	e7f4      	b.n	8013414 <_strtod_l+0x1dc>
 801342a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801342c:	9b05      	ldr	r3, [sp, #20]
 801342e:	4694      	mov	ip, r2
 8013430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013432:	4463      	add	r3, ip
 8013434:	9321      	str	r3, [sp, #132]	; 0x84
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	2a00      	cmp	r2, #0
 801343a:	d036      	beq.n	80134aa <_strtod_l+0x272>
 801343c:	4684      	mov	ip, r0
 801343e:	9205      	str	r2, [sp, #20]
 8013440:	001a      	movs	r2, r3
 8013442:	3a30      	subs	r2, #48	; 0x30
 8013444:	2a09      	cmp	r2, #9
 8013446:	d912      	bls.n	801346e <_strtod_l+0x236>
 8013448:	2201      	movs	r2, #1
 801344a:	9207      	str	r2, [sp, #28]
 801344c:	e7b2      	b.n	80133b4 <_strtod_l+0x17c>
 801344e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013450:	3001      	adds	r0, #1
 8013452:	1c5a      	adds	r2, r3, #1
 8013454:	9221      	str	r2, [sp, #132]	; 0x84
 8013456:	785b      	ldrb	r3, [r3, #1]
 8013458:	2b30      	cmp	r3, #48	; 0x30
 801345a:	d0f8      	beq.n	801344e <_strtod_l+0x216>
 801345c:	001a      	movs	r2, r3
 801345e:	3a31      	subs	r2, #49	; 0x31
 8013460:	2a08      	cmp	r2, #8
 8013462:	d83c      	bhi.n	80134de <_strtod_l+0x2a6>
 8013464:	4684      	mov	ip, r0
 8013466:	2000      	movs	r0, #0
 8013468:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801346a:	9005      	str	r0, [sp, #20]
 801346c:	9212      	str	r2, [sp, #72]	; 0x48
 801346e:	3b30      	subs	r3, #48	; 0x30
 8013470:	1c42      	adds	r2, r0, #1
 8013472:	2b00      	cmp	r3, #0
 8013474:	d013      	beq.n	801349e <_strtod_l+0x266>
 8013476:	210a      	movs	r1, #10
 8013478:	4494      	add	ip, r2
 801347a:	9a05      	ldr	r2, [sp, #20]
 801347c:	1885      	adds	r5, r0, r2
 801347e:	42aa      	cmp	r2, r5
 8013480:	d115      	bne.n	80134ae <_strtod_l+0x276>
 8013482:	9905      	ldr	r1, [sp, #20]
 8013484:	9a05      	ldr	r2, [sp, #20]
 8013486:	3101      	adds	r1, #1
 8013488:	1809      	adds	r1, r1, r0
 801348a:	1812      	adds	r2, r2, r0
 801348c:	9105      	str	r1, [sp, #20]
 801348e:	2a08      	cmp	r2, #8
 8013490:	dc1b      	bgt.n	80134ca <_strtod_l+0x292>
 8013492:	220a      	movs	r2, #10
 8013494:	9908      	ldr	r1, [sp, #32]
 8013496:	434a      	muls	r2, r1
 8013498:	189b      	adds	r3, r3, r2
 801349a:	2200      	movs	r2, #0
 801349c:	9308      	str	r3, [sp, #32]
 801349e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134a0:	0010      	movs	r0, r2
 80134a2:	1c59      	adds	r1, r3, #1
 80134a4:	9121      	str	r1, [sp, #132]	; 0x84
 80134a6:	785b      	ldrb	r3, [r3, #1]
 80134a8:	e7ca      	b.n	8013440 <_strtod_l+0x208>
 80134aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80134ac:	e7d4      	b.n	8013458 <_strtod_l+0x220>
 80134ae:	1c54      	adds	r4, r2, #1
 80134b0:	2a08      	cmp	r2, #8
 80134b2:	dc04      	bgt.n	80134be <_strtod_l+0x286>
 80134b4:	9a08      	ldr	r2, [sp, #32]
 80134b6:	434a      	muls	r2, r1
 80134b8:	9208      	str	r2, [sp, #32]
 80134ba:	0022      	movs	r2, r4
 80134bc:	e7df      	b.n	801347e <_strtod_l+0x246>
 80134be:	2c10      	cmp	r4, #16
 80134c0:	dcfb      	bgt.n	80134ba <_strtod_l+0x282>
 80134c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80134c4:	434a      	muls	r2, r1
 80134c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80134c8:	e7f7      	b.n	80134ba <_strtod_l+0x282>
 80134ca:	9905      	ldr	r1, [sp, #20]
 80134cc:	2200      	movs	r2, #0
 80134ce:	2910      	cmp	r1, #16
 80134d0:	dce5      	bgt.n	801349e <_strtod_l+0x266>
 80134d2:	210a      	movs	r1, #10
 80134d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80134d6:	4341      	muls	r1, r0
 80134d8:	185b      	adds	r3, r3, r1
 80134da:	930b      	str	r3, [sp, #44]	; 0x2c
 80134dc:	e7df      	b.n	801349e <_strtod_l+0x266>
 80134de:	2200      	movs	r2, #0
 80134e0:	4694      	mov	ip, r2
 80134e2:	9205      	str	r2, [sp, #20]
 80134e4:	3201      	adds	r2, #1
 80134e6:	e7b0      	b.n	801344a <_strtod_l+0x212>
 80134e8:	000c      	movs	r4, r1
 80134ea:	e77e      	b.n	80133ea <_strtod_l+0x1b2>
 80134ec:	0801a5bc 	.word	0x0801a5bc
 80134f0:	ffefffff 	.word	0xffefffff
 80134f4:	00000433 	.word	0x00000433
 80134f8:	7ff00000 	.word	0x7ff00000
 80134fc:	7fffffff 	.word	0x7fffffff
 8013500:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013502:	1c5a      	adds	r2, r3, #1
 8013504:	9221      	str	r2, [sp, #132]	; 0x84
 8013506:	785b      	ldrb	r3, [r3, #1]
 8013508:	2b30      	cmp	r3, #48	; 0x30
 801350a:	d0f9      	beq.n	8013500 <_strtod_l+0x2c8>
 801350c:	001a      	movs	r2, r3
 801350e:	3a31      	subs	r2, #49	; 0x31
 8013510:	2100      	movs	r1, #0
 8013512:	2a08      	cmp	r2, #8
 8013514:	d816      	bhi.n	8013544 <_strtod_l+0x30c>
 8013516:	3b30      	subs	r3, #48	; 0x30
 8013518:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801351a:	930e      	str	r3, [sp, #56]	; 0x38
 801351c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801351e:	1c59      	adds	r1, r3, #1
 8013520:	9121      	str	r1, [sp, #132]	; 0x84
 8013522:	785b      	ldrb	r3, [r3, #1]
 8013524:	001a      	movs	r2, r3
 8013526:	3a30      	subs	r2, #48	; 0x30
 8013528:	2a09      	cmp	r2, #9
 801352a:	d932      	bls.n	8013592 <_strtod_l+0x35a>
 801352c:	1b4a      	subs	r2, r1, r5
 801352e:	4dad      	ldr	r5, [pc, #692]	; (80137e4 <_strtod_l+0x5ac>)
 8013530:	0029      	movs	r1, r5
 8013532:	2a08      	cmp	r2, #8
 8013534:	dc03      	bgt.n	801353e <_strtod_l+0x306>
 8013536:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013538:	42a9      	cmp	r1, r5
 801353a:	dd00      	ble.n	801353e <_strtod_l+0x306>
 801353c:	0029      	movs	r1, r5
 801353e:	2c00      	cmp	r4, #0
 8013540:	d000      	beq.n	8013544 <_strtod_l+0x30c>
 8013542:	4249      	negs	r1, r1
 8013544:	9a05      	ldr	r2, [sp, #20]
 8013546:	2a00      	cmp	r2, #0
 8013548:	d149      	bne.n	80135de <_strtod_l+0x3a6>
 801354a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801354c:	4310      	orrs	r0, r2
 801354e:	d000      	beq.n	8013552 <_strtod_l+0x31a>
 8013550:	e6b3      	b.n	80132ba <_strtod_l+0x82>
 8013552:	9a07      	ldr	r2, [sp, #28]
 8013554:	2a00      	cmp	r2, #0
 8013556:	d000      	beq.n	801355a <_strtod_l+0x322>
 8013558:	e6cf      	b.n	80132fa <_strtod_l+0xc2>
 801355a:	2b4e      	cmp	r3, #78	; 0x4e
 801355c:	d025      	beq.n	80135aa <_strtod_l+0x372>
 801355e:	dc1f      	bgt.n	80135a0 <_strtod_l+0x368>
 8013560:	2b49      	cmp	r3, #73	; 0x49
 8013562:	d000      	beq.n	8013566 <_strtod_l+0x32e>
 8013564:	e6c9      	b.n	80132fa <_strtod_l+0xc2>
 8013566:	49a0      	ldr	r1, [pc, #640]	; (80137e8 <_strtod_l+0x5b0>)
 8013568:	a821      	add	r0, sp, #132	; 0x84
 801356a:	f003 f9ed 	bl	8016948 <__match>
 801356e:	2800      	cmp	r0, #0
 8013570:	d100      	bne.n	8013574 <_strtod_l+0x33c>
 8013572:	e6c2      	b.n	80132fa <_strtod_l+0xc2>
 8013574:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013576:	499d      	ldr	r1, [pc, #628]	; (80137ec <_strtod_l+0x5b4>)
 8013578:	3b01      	subs	r3, #1
 801357a:	a821      	add	r0, sp, #132	; 0x84
 801357c:	9321      	str	r3, [sp, #132]	; 0x84
 801357e:	f003 f9e3 	bl	8016948 <__match>
 8013582:	2800      	cmp	r0, #0
 8013584:	d102      	bne.n	801358c <_strtod_l+0x354>
 8013586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013588:	3301      	adds	r3, #1
 801358a:	9321      	str	r3, [sp, #132]	; 0x84
 801358c:	4f98      	ldr	r7, [pc, #608]	; (80137f0 <_strtod_l+0x5b8>)
 801358e:	2600      	movs	r6, #0
 8013590:	e693      	b.n	80132ba <_strtod_l+0x82>
 8013592:	220a      	movs	r2, #10
 8013594:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013596:	434a      	muls	r2, r1
 8013598:	18d2      	adds	r2, r2, r3
 801359a:	3a30      	subs	r2, #48	; 0x30
 801359c:	920e      	str	r2, [sp, #56]	; 0x38
 801359e:	e7bd      	b.n	801351c <_strtod_l+0x2e4>
 80135a0:	2b69      	cmp	r3, #105	; 0x69
 80135a2:	d0e0      	beq.n	8013566 <_strtod_l+0x32e>
 80135a4:	2b6e      	cmp	r3, #110	; 0x6e
 80135a6:	d000      	beq.n	80135aa <_strtod_l+0x372>
 80135a8:	e6a7      	b.n	80132fa <_strtod_l+0xc2>
 80135aa:	4992      	ldr	r1, [pc, #584]	; (80137f4 <_strtod_l+0x5bc>)
 80135ac:	a821      	add	r0, sp, #132	; 0x84
 80135ae:	f003 f9cb 	bl	8016948 <__match>
 80135b2:	2800      	cmp	r0, #0
 80135b4:	d100      	bne.n	80135b8 <_strtod_l+0x380>
 80135b6:	e6a0      	b.n	80132fa <_strtod_l+0xc2>
 80135b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	2b28      	cmp	r3, #40	; 0x28
 80135be:	d10c      	bne.n	80135da <_strtod_l+0x3a2>
 80135c0:	aa24      	add	r2, sp, #144	; 0x90
 80135c2:	498d      	ldr	r1, [pc, #564]	; (80137f8 <_strtod_l+0x5c0>)
 80135c4:	a821      	add	r0, sp, #132	; 0x84
 80135c6:	f003 f9d3 	bl	8016970 <__hexnan>
 80135ca:	2805      	cmp	r0, #5
 80135cc:	d105      	bne.n	80135da <_strtod_l+0x3a2>
 80135ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80135d0:	4a87      	ldr	r2, [pc, #540]	; (80137f0 <_strtod_l+0x5b8>)
 80135d2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80135d4:	431a      	orrs	r2, r3
 80135d6:	0017      	movs	r7, r2
 80135d8:	e66f      	b.n	80132ba <_strtod_l+0x82>
 80135da:	4f88      	ldr	r7, [pc, #544]	; (80137fc <_strtod_l+0x5c4>)
 80135dc:	e7d7      	b.n	801358e <_strtod_l+0x356>
 80135de:	4663      	mov	r3, ip
 80135e0:	1acb      	subs	r3, r1, r3
 80135e2:	9307      	str	r3, [sp, #28]
 80135e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d101      	bne.n	80135ee <_strtod_l+0x3b6>
 80135ea:	9b05      	ldr	r3, [sp, #20]
 80135ec:	930a      	str	r3, [sp, #40]	; 0x28
 80135ee:	9c05      	ldr	r4, [sp, #20]
 80135f0:	2c10      	cmp	r4, #16
 80135f2:	dd00      	ble.n	80135f6 <_strtod_l+0x3be>
 80135f4:	2410      	movs	r4, #16
 80135f6:	9808      	ldr	r0, [sp, #32]
 80135f8:	f7ef fa62 	bl	8002ac0 <__aeabi_ui2d>
 80135fc:	9b05      	ldr	r3, [sp, #20]
 80135fe:	0006      	movs	r6, r0
 8013600:	000f      	movs	r7, r1
 8013602:	2b09      	cmp	r3, #9
 8013604:	dc15      	bgt.n	8013632 <_strtod_l+0x3fa>
 8013606:	9b07      	ldr	r3, [sp, #28]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d100      	bne.n	801360e <_strtod_l+0x3d6>
 801360c:	e655      	b.n	80132ba <_strtod_l+0x82>
 801360e:	9b07      	ldr	r3, [sp, #28]
 8013610:	2b00      	cmp	r3, #0
 8013612:	dc00      	bgt.n	8013616 <_strtod_l+0x3de>
 8013614:	e07d      	b.n	8013712 <_strtod_l+0x4da>
 8013616:	2b16      	cmp	r3, #22
 8013618:	dc62      	bgt.n	80136e0 <_strtod_l+0x4a8>
 801361a:	00dc      	lsls	r4, r3, #3
 801361c:	4b78      	ldr	r3, [pc, #480]	; (8013800 <_strtod_l+0x5c8>)
 801361e:	0032      	movs	r2, r6
 8013620:	1919      	adds	r1, r3, r4
 8013622:	003b      	movs	r3, r7
 8013624:	6808      	ldr	r0, [r1, #0]
 8013626:	6849      	ldr	r1, [r1, #4]
 8013628:	f7ee fc04 	bl	8001e34 <__aeabi_dmul>
 801362c:	0006      	movs	r6, r0
 801362e:	000f      	movs	r7, r1
 8013630:	e643      	b.n	80132ba <_strtod_l+0x82>
 8013632:	0022      	movs	r2, r4
 8013634:	4b72      	ldr	r3, [pc, #456]	; (8013800 <_strtod_l+0x5c8>)
 8013636:	3a09      	subs	r2, #9
 8013638:	00d2      	lsls	r2, r2, #3
 801363a:	189b      	adds	r3, r3, r2
 801363c:	681a      	ldr	r2, [r3, #0]
 801363e:	685b      	ldr	r3, [r3, #4]
 8013640:	f7ee fbf8 	bl	8001e34 <__aeabi_dmul>
 8013644:	0006      	movs	r6, r0
 8013646:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013648:	000f      	movs	r7, r1
 801364a:	f7ef fa39 	bl	8002ac0 <__aeabi_ui2d>
 801364e:	000b      	movs	r3, r1
 8013650:	0002      	movs	r2, r0
 8013652:	0039      	movs	r1, r7
 8013654:	0030      	movs	r0, r6
 8013656:	f7ed fcc7 	bl	8000fe8 <__aeabi_dadd>
 801365a:	9b05      	ldr	r3, [sp, #20]
 801365c:	0006      	movs	r6, r0
 801365e:	000f      	movs	r7, r1
 8013660:	2b0f      	cmp	r3, #15
 8013662:	ddd0      	ble.n	8013606 <_strtod_l+0x3ce>
 8013664:	9b05      	ldr	r3, [sp, #20]
 8013666:	1b1c      	subs	r4, r3, r4
 8013668:	9b07      	ldr	r3, [sp, #28]
 801366a:	18e4      	adds	r4, r4, r3
 801366c:	2c00      	cmp	r4, #0
 801366e:	dc00      	bgt.n	8013672 <_strtod_l+0x43a>
 8013670:	e094      	b.n	801379c <_strtod_l+0x564>
 8013672:	230f      	movs	r3, #15
 8013674:	4023      	ands	r3, r4
 8013676:	d00a      	beq.n	801368e <_strtod_l+0x456>
 8013678:	4961      	ldr	r1, [pc, #388]	; (8013800 <_strtod_l+0x5c8>)
 801367a:	00db      	lsls	r3, r3, #3
 801367c:	18c9      	adds	r1, r1, r3
 801367e:	0032      	movs	r2, r6
 8013680:	6808      	ldr	r0, [r1, #0]
 8013682:	6849      	ldr	r1, [r1, #4]
 8013684:	003b      	movs	r3, r7
 8013686:	f7ee fbd5 	bl	8001e34 <__aeabi_dmul>
 801368a:	0006      	movs	r6, r0
 801368c:	000f      	movs	r7, r1
 801368e:	230f      	movs	r3, #15
 8013690:	439c      	bics	r4, r3
 8013692:	d06e      	beq.n	8013772 <_strtod_l+0x53a>
 8013694:	3326      	adds	r3, #38	; 0x26
 8013696:	33ff      	adds	r3, #255	; 0xff
 8013698:	429c      	cmp	r4, r3
 801369a:	dd48      	ble.n	801372e <_strtod_l+0x4f6>
 801369c:	2400      	movs	r4, #0
 801369e:	9405      	str	r4, [sp, #20]
 80136a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80136a2:	940a      	str	r4, [sp, #40]	; 0x28
 80136a4:	2322      	movs	r3, #34	; 0x22
 80136a6:	2600      	movs	r6, #0
 80136a8:	9a04      	ldr	r2, [sp, #16]
 80136aa:	4f51      	ldr	r7, [pc, #324]	; (80137f0 <_strtod_l+0x5b8>)
 80136ac:	6013      	str	r3, [r2, #0]
 80136ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136b0:	42b3      	cmp	r3, r6
 80136b2:	d100      	bne.n	80136b6 <_strtod_l+0x47e>
 80136b4:	e601      	b.n	80132ba <_strtod_l+0x82>
 80136b6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80136b8:	9804      	ldr	r0, [sp, #16]
 80136ba:	f003 fa47 	bl	8016b4c <_Bfree>
 80136be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80136c0:	9804      	ldr	r0, [sp, #16]
 80136c2:	f003 fa43 	bl	8016b4c <_Bfree>
 80136c6:	9905      	ldr	r1, [sp, #20]
 80136c8:	9804      	ldr	r0, [sp, #16]
 80136ca:	f003 fa3f 	bl	8016b4c <_Bfree>
 80136ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80136d0:	9804      	ldr	r0, [sp, #16]
 80136d2:	f003 fa3b 	bl	8016b4c <_Bfree>
 80136d6:	0021      	movs	r1, r4
 80136d8:	9804      	ldr	r0, [sp, #16]
 80136da:	f003 fa37 	bl	8016b4c <_Bfree>
 80136de:	e5ec      	b.n	80132ba <_strtod_l+0x82>
 80136e0:	2325      	movs	r3, #37	; 0x25
 80136e2:	9a05      	ldr	r2, [sp, #20]
 80136e4:	1a9b      	subs	r3, r3, r2
 80136e6:	9a07      	ldr	r2, [sp, #28]
 80136e8:	4293      	cmp	r3, r2
 80136ea:	dbbb      	blt.n	8013664 <_strtod_l+0x42c>
 80136ec:	230f      	movs	r3, #15
 80136ee:	9a05      	ldr	r2, [sp, #20]
 80136f0:	4c43      	ldr	r4, [pc, #268]	; (8013800 <_strtod_l+0x5c8>)
 80136f2:	1a9d      	subs	r5, r3, r2
 80136f4:	00e9      	lsls	r1, r5, #3
 80136f6:	1861      	adds	r1, r4, r1
 80136f8:	0032      	movs	r2, r6
 80136fa:	6808      	ldr	r0, [r1, #0]
 80136fc:	6849      	ldr	r1, [r1, #4]
 80136fe:	003b      	movs	r3, r7
 8013700:	f7ee fb98 	bl	8001e34 <__aeabi_dmul>
 8013704:	9b07      	ldr	r3, [sp, #28]
 8013706:	1b5e      	subs	r6, r3, r5
 8013708:	00f6      	lsls	r6, r6, #3
 801370a:	19a6      	adds	r6, r4, r6
 801370c:	6832      	ldr	r2, [r6, #0]
 801370e:	6873      	ldr	r3, [r6, #4]
 8013710:	e78a      	b.n	8013628 <_strtod_l+0x3f0>
 8013712:	9b07      	ldr	r3, [sp, #28]
 8013714:	3316      	adds	r3, #22
 8013716:	dba5      	blt.n	8013664 <_strtod_l+0x42c>
 8013718:	9b07      	ldr	r3, [sp, #28]
 801371a:	0030      	movs	r0, r6
 801371c:	00da      	lsls	r2, r3, #3
 801371e:	4b38      	ldr	r3, [pc, #224]	; (8013800 <_strtod_l+0x5c8>)
 8013720:	0039      	movs	r1, r7
 8013722:	1a9b      	subs	r3, r3, r2
 8013724:	681a      	ldr	r2, [r3, #0]
 8013726:	685b      	ldr	r3, [r3, #4]
 8013728:	f7ed ff7a 	bl	8001620 <__aeabi_ddiv>
 801372c:	e77e      	b.n	801362c <_strtod_l+0x3f4>
 801372e:	2300      	movs	r3, #0
 8013730:	0030      	movs	r0, r6
 8013732:	0039      	movs	r1, r7
 8013734:	001d      	movs	r5, r3
 8013736:	1124      	asrs	r4, r4, #4
 8013738:	2c01      	cmp	r4, #1
 801373a:	dc1d      	bgt.n	8013778 <_strtod_l+0x540>
 801373c:	2b00      	cmp	r3, #0
 801373e:	d001      	beq.n	8013744 <_strtod_l+0x50c>
 8013740:	0006      	movs	r6, r0
 8013742:	000f      	movs	r7, r1
 8013744:	4b2f      	ldr	r3, [pc, #188]	; (8013804 <_strtod_l+0x5cc>)
 8013746:	00ed      	lsls	r5, r5, #3
 8013748:	18ff      	adds	r7, r7, r3
 801374a:	4b2f      	ldr	r3, [pc, #188]	; (8013808 <_strtod_l+0x5d0>)
 801374c:	0032      	movs	r2, r6
 801374e:	195d      	adds	r5, r3, r5
 8013750:	6828      	ldr	r0, [r5, #0]
 8013752:	6869      	ldr	r1, [r5, #4]
 8013754:	003b      	movs	r3, r7
 8013756:	f7ee fb6d 	bl	8001e34 <__aeabi_dmul>
 801375a:	4b25      	ldr	r3, [pc, #148]	; (80137f0 <_strtod_l+0x5b8>)
 801375c:	4a2b      	ldr	r2, [pc, #172]	; (801380c <_strtod_l+0x5d4>)
 801375e:	0006      	movs	r6, r0
 8013760:	400b      	ands	r3, r1
 8013762:	4293      	cmp	r3, r2
 8013764:	d89a      	bhi.n	801369c <_strtod_l+0x464>
 8013766:	4a2a      	ldr	r2, [pc, #168]	; (8013810 <_strtod_l+0x5d8>)
 8013768:	4293      	cmp	r3, r2
 801376a:	d913      	bls.n	8013794 <_strtod_l+0x55c>
 801376c:	2601      	movs	r6, #1
 801376e:	4f29      	ldr	r7, [pc, #164]	; (8013814 <_strtod_l+0x5dc>)
 8013770:	4276      	negs	r6, r6
 8013772:	2300      	movs	r3, #0
 8013774:	9306      	str	r3, [sp, #24]
 8013776:	e07b      	b.n	8013870 <_strtod_l+0x638>
 8013778:	2201      	movs	r2, #1
 801377a:	4214      	tst	r4, r2
 801377c:	d007      	beq.n	801378e <_strtod_l+0x556>
 801377e:	4a22      	ldr	r2, [pc, #136]	; (8013808 <_strtod_l+0x5d0>)
 8013780:	00eb      	lsls	r3, r5, #3
 8013782:	189b      	adds	r3, r3, r2
 8013784:	681a      	ldr	r2, [r3, #0]
 8013786:	685b      	ldr	r3, [r3, #4]
 8013788:	f7ee fb54 	bl	8001e34 <__aeabi_dmul>
 801378c:	2301      	movs	r3, #1
 801378e:	3501      	adds	r5, #1
 8013790:	1064      	asrs	r4, r4, #1
 8013792:	e7d1      	b.n	8013738 <_strtod_l+0x500>
 8013794:	23d4      	movs	r3, #212	; 0xd4
 8013796:	049b      	lsls	r3, r3, #18
 8013798:	18cf      	adds	r7, r1, r3
 801379a:	e7ea      	b.n	8013772 <_strtod_l+0x53a>
 801379c:	2c00      	cmp	r4, #0
 801379e:	d0e8      	beq.n	8013772 <_strtod_l+0x53a>
 80137a0:	230f      	movs	r3, #15
 80137a2:	4264      	negs	r4, r4
 80137a4:	4023      	ands	r3, r4
 80137a6:	d00a      	beq.n	80137be <_strtod_l+0x586>
 80137a8:	4a15      	ldr	r2, [pc, #84]	; (8013800 <_strtod_l+0x5c8>)
 80137aa:	00db      	lsls	r3, r3, #3
 80137ac:	18d3      	adds	r3, r2, r3
 80137ae:	0030      	movs	r0, r6
 80137b0:	681a      	ldr	r2, [r3, #0]
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	0039      	movs	r1, r7
 80137b6:	f7ed ff33 	bl	8001620 <__aeabi_ddiv>
 80137ba:	0006      	movs	r6, r0
 80137bc:	000f      	movs	r7, r1
 80137be:	1124      	asrs	r4, r4, #4
 80137c0:	d0d7      	beq.n	8013772 <_strtod_l+0x53a>
 80137c2:	2c1f      	cmp	r4, #31
 80137c4:	dd28      	ble.n	8013818 <_strtod_l+0x5e0>
 80137c6:	2400      	movs	r4, #0
 80137c8:	9405      	str	r4, [sp, #20]
 80137ca:	940b      	str	r4, [sp, #44]	; 0x2c
 80137cc:	940a      	str	r4, [sp, #40]	; 0x28
 80137ce:	2322      	movs	r3, #34	; 0x22
 80137d0:	9a04      	ldr	r2, [sp, #16]
 80137d2:	2600      	movs	r6, #0
 80137d4:	6013      	str	r3, [r2, #0]
 80137d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137d8:	2700      	movs	r7, #0
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d000      	beq.n	80137e0 <_strtod_l+0x5a8>
 80137de:	e76a      	b.n	80136b6 <_strtod_l+0x47e>
 80137e0:	e56b      	b.n	80132ba <_strtod_l+0x82>
 80137e2:	46c0      	nop			; (mov r8, r8)
 80137e4:	00004e1f 	.word	0x00004e1f
 80137e8:	0801a615 	.word	0x0801a615
 80137ec:	0801a768 	.word	0x0801a768
 80137f0:	7ff00000 	.word	0x7ff00000
 80137f4:	0801a61d 	.word	0x0801a61d
 80137f8:	0801a5d0 	.word	0x0801a5d0
 80137fc:	fff80000 	.word	0xfff80000
 8013800:	0801a7a0 	.word	0x0801a7a0
 8013804:	fcb00000 	.word	0xfcb00000
 8013808:	0801a778 	.word	0x0801a778
 801380c:	7ca00000 	.word	0x7ca00000
 8013810:	7c900000 	.word	0x7c900000
 8013814:	7fefffff 	.word	0x7fefffff
 8013818:	2310      	movs	r3, #16
 801381a:	4023      	ands	r3, r4
 801381c:	9306      	str	r3, [sp, #24]
 801381e:	d001      	beq.n	8013824 <_strtod_l+0x5ec>
 8013820:	236a      	movs	r3, #106	; 0x6a
 8013822:	9306      	str	r3, [sp, #24]
 8013824:	2300      	movs	r3, #0
 8013826:	0030      	movs	r0, r6
 8013828:	0039      	movs	r1, r7
 801382a:	001d      	movs	r5, r3
 801382c:	2c00      	cmp	r4, #0
 801382e:	dd00      	ble.n	8013832 <_strtod_l+0x5fa>
 8013830:	e10e      	b.n	8013a50 <_strtod_l+0x818>
 8013832:	2b00      	cmp	r3, #0
 8013834:	d001      	beq.n	801383a <_strtod_l+0x602>
 8013836:	0006      	movs	r6, r0
 8013838:	000f      	movs	r7, r1
 801383a:	9b06      	ldr	r3, [sp, #24]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d00f      	beq.n	8013860 <_strtod_l+0x628>
 8013840:	236b      	movs	r3, #107	; 0x6b
 8013842:	0079      	lsls	r1, r7, #1
 8013844:	0d49      	lsrs	r1, r1, #21
 8013846:	003a      	movs	r2, r7
 8013848:	1a5b      	subs	r3, r3, r1
 801384a:	2b00      	cmp	r3, #0
 801384c:	dd08      	ble.n	8013860 <_strtod_l+0x628>
 801384e:	2b1f      	cmp	r3, #31
 8013850:	dc00      	bgt.n	8013854 <_strtod_l+0x61c>
 8013852:	e112      	b.n	8013a7a <_strtod_l+0x842>
 8013854:	2600      	movs	r6, #0
 8013856:	2b34      	cmp	r3, #52	; 0x34
 8013858:	dc00      	bgt.n	801385c <_strtod_l+0x624>
 801385a:	e107      	b.n	8013a6c <_strtod_l+0x834>
 801385c:	27dc      	movs	r7, #220	; 0xdc
 801385e:	04bf      	lsls	r7, r7, #18
 8013860:	2200      	movs	r2, #0
 8013862:	2300      	movs	r3, #0
 8013864:	0030      	movs	r0, r6
 8013866:	0039      	movs	r1, r7
 8013868:	f7ec fdf8 	bl	800045c <__aeabi_dcmpeq>
 801386c:	2800      	cmp	r0, #0
 801386e:	d1aa      	bne.n	80137c6 <_strtod_l+0x58e>
 8013870:	9b08      	ldr	r3, [sp, #32]
 8013872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013874:	9300      	str	r3, [sp, #0]
 8013876:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013878:	9b05      	ldr	r3, [sp, #20]
 801387a:	9804      	ldr	r0, [sp, #16]
 801387c:	f003 f9ae 	bl	8016bdc <__s2b>
 8013880:	900b      	str	r0, [sp, #44]	; 0x2c
 8013882:	2800      	cmp	r0, #0
 8013884:	d100      	bne.n	8013888 <_strtod_l+0x650>
 8013886:	e709      	b.n	801369c <_strtod_l+0x464>
 8013888:	9b07      	ldr	r3, [sp, #28]
 801388a:	9a07      	ldr	r2, [sp, #28]
 801388c:	17db      	asrs	r3, r3, #31
 801388e:	4252      	negs	r2, r2
 8013890:	4013      	ands	r3, r2
 8013892:	9315      	str	r3, [sp, #84]	; 0x54
 8013894:	9b07      	ldr	r3, [sp, #28]
 8013896:	2400      	movs	r4, #0
 8013898:	43db      	mvns	r3, r3
 801389a:	9a07      	ldr	r2, [sp, #28]
 801389c:	17db      	asrs	r3, r3, #31
 801389e:	401a      	ands	r2, r3
 80138a0:	921c      	str	r2, [sp, #112]	; 0x70
 80138a2:	9405      	str	r4, [sp, #20]
 80138a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138a6:	9804      	ldr	r0, [sp, #16]
 80138a8:	6859      	ldr	r1, [r3, #4]
 80138aa:	f003 f927 	bl	8016afc <_Balloc>
 80138ae:	900a      	str	r0, [sp, #40]	; 0x28
 80138b0:	2800      	cmp	r0, #0
 80138b2:	d100      	bne.n	80138b6 <_strtod_l+0x67e>
 80138b4:	e6f6      	b.n	80136a4 <_strtod_l+0x46c>
 80138b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80138ba:	691b      	ldr	r3, [r3, #16]
 80138bc:	310c      	adds	r1, #12
 80138be:	1c9a      	adds	r2, r3, #2
 80138c0:	0092      	lsls	r2, r2, #2
 80138c2:	300c      	adds	r0, #12
 80138c4:	9308      	str	r3, [sp, #32]
 80138c6:	f7ff fa32 	bl	8012d2e <memcpy>
 80138ca:	ab24      	add	r3, sp, #144	; 0x90
 80138cc:	9301      	str	r3, [sp, #4]
 80138ce:	ab23      	add	r3, sp, #140	; 0x8c
 80138d0:	9300      	str	r3, [sp, #0]
 80138d2:	0032      	movs	r2, r6
 80138d4:	003b      	movs	r3, r7
 80138d6:	9804      	ldr	r0, [sp, #16]
 80138d8:	960e      	str	r6, [sp, #56]	; 0x38
 80138da:	970f      	str	r7, [sp, #60]	; 0x3c
 80138dc:	f003 fc22 	bl	8017124 <__d2b>
 80138e0:	9022      	str	r0, [sp, #136]	; 0x88
 80138e2:	2800      	cmp	r0, #0
 80138e4:	d100      	bne.n	80138e8 <_strtod_l+0x6b0>
 80138e6:	e6dd      	b.n	80136a4 <_strtod_l+0x46c>
 80138e8:	2101      	movs	r1, #1
 80138ea:	9804      	ldr	r0, [sp, #16]
 80138ec:	f003 f9fd 	bl	8016cea <__i2b>
 80138f0:	9005      	str	r0, [sp, #20]
 80138f2:	2800      	cmp	r0, #0
 80138f4:	d100      	bne.n	80138f8 <_strtod_l+0x6c0>
 80138f6:	e6d5      	b.n	80136a4 <_strtod_l+0x46c>
 80138f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	da00      	bge.n	8013900 <_strtod_l+0x6c8>
 80138fe:	e0c1      	b.n	8013a84 <_strtod_l+0x84c>
 8013900:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013902:	189d      	adds	r5, r3, r2
 8013904:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013906:	4694      	mov	ip, r2
 8013908:	9906      	ldr	r1, [sp, #24]
 801390a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801390c:	1a5b      	subs	r3, r3, r1
 801390e:	2136      	movs	r1, #54	; 0x36
 8013910:	189b      	adds	r3, r3, r2
 8013912:	1a8a      	subs	r2, r1, r2
 8013914:	49b2      	ldr	r1, [pc, #712]	; (8013be0 <_strtod_l+0x9a8>)
 8013916:	3b01      	subs	r3, #1
 8013918:	2001      	movs	r0, #1
 801391a:	428b      	cmp	r3, r1
 801391c:	db00      	blt.n	8013920 <_strtod_l+0x6e8>
 801391e:	e0bd      	b.n	8013a9c <_strtod_l+0x864>
 8013920:	1ac9      	subs	r1, r1, r3
 8013922:	1a52      	subs	r2, r2, r1
 8013924:	291f      	cmp	r1, #31
 8013926:	dd00      	ble.n	801392a <_strtod_l+0x6f2>
 8013928:	e0b1      	b.n	8013a8e <_strtod_l+0x856>
 801392a:	4088      	lsls	r0, r1
 801392c:	2300      	movs	r3, #0
 801392e:	9014      	str	r0, [sp, #80]	; 0x50
 8013930:	9310      	str	r3, [sp, #64]	; 0x40
 8013932:	18ab      	adds	r3, r5, r2
 8013934:	9308      	str	r3, [sp, #32]
 8013936:	0013      	movs	r3, r2
 8013938:	9a06      	ldr	r2, [sp, #24]
 801393a:	4463      	add	r3, ip
 801393c:	18d3      	adds	r3, r2, r3
 801393e:	9a08      	ldr	r2, [sp, #32]
 8013940:	930c      	str	r3, [sp, #48]	; 0x30
 8013942:	002b      	movs	r3, r5
 8013944:	4295      	cmp	r5, r2
 8013946:	dd00      	ble.n	801394a <_strtod_l+0x712>
 8013948:	0013      	movs	r3, r2
 801394a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801394c:	4293      	cmp	r3, r2
 801394e:	dd00      	ble.n	8013952 <_strtod_l+0x71a>
 8013950:	0013      	movs	r3, r2
 8013952:	2b00      	cmp	r3, #0
 8013954:	dd06      	ble.n	8013964 <_strtod_l+0x72c>
 8013956:	9a08      	ldr	r2, [sp, #32]
 8013958:	1aed      	subs	r5, r5, r3
 801395a:	1ad2      	subs	r2, r2, r3
 801395c:	9208      	str	r2, [sp, #32]
 801395e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013960:	1ad2      	subs	r2, r2, r3
 8013962:	920c      	str	r2, [sp, #48]	; 0x30
 8013964:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013966:	2b00      	cmp	r3, #0
 8013968:	d017      	beq.n	801399a <_strtod_l+0x762>
 801396a:	001a      	movs	r2, r3
 801396c:	9905      	ldr	r1, [sp, #20]
 801396e:	9804      	ldr	r0, [sp, #16]
 8013970:	f003 fa54 	bl	8016e1c <__pow5mult>
 8013974:	9005      	str	r0, [sp, #20]
 8013976:	2800      	cmp	r0, #0
 8013978:	d100      	bne.n	801397c <_strtod_l+0x744>
 801397a:	e693      	b.n	80136a4 <_strtod_l+0x46c>
 801397c:	0001      	movs	r1, r0
 801397e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013980:	9804      	ldr	r0, [sp, #16]
 8013982:	f003 f9bb 	bl	8016cfc <__multiply>
 8013986:	9012      	str	r0, [sp, #72]	; 0x48
 8013988:	2800      	cmp	r0, #0
 801398a:	d100      	bne.n	801398e <_strtod_l+0x756>
 801398c:	e68a      	b.n	80136a4 <_strtod_l+0x46c>
 801398e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013990:	9804      	ldr	r0, [sp, #16]
 8013992:	f003 f8db 	bl	8016b4c <_Bfree>
 8013996:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013998:	9322      	str	r3, [sp, #136]	; 0x88
 801399a:	9b08      	ldr	r3, [sp, #32]
 801399c:	2b00      	cmp	r3, #0
 801399e:	dd00      	ble.n	80139a2 <_strtod_l+0x76a>
 80139a0:	e07f      	b.n	8013aa2 <_strtod_l+0x86a>
 80139a2:	9b07      	ldr	r3, [sp, #28]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	dd08      	ble.n	80139ba <_strtod_l+0x782>
 80139a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80139aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80139ac:	9804      	ldr	r0, [sp, #16]
 80139ae:	f003 fa35 	bl	8016e1c <__pow5mult>
 80139b2:	900a      	str	r0, [sp, #40]	; 0x28
 80139b4:	2800      	cmp	r0, #0
 80139b6:	d100      	bne.n	80139ba <_strtod_l+0x782>
 80139b8:	e674      	b.n	80136a4 <_strtod_l+0x46c>
 80139ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139bc:	2b00      	cmp	r3, #0
 80139be:	dd08      	ble.n	80139d2 <_strtod_l+0x79a>
 80139c0:	001a      	movs	r2, r3
 80139c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80139c4:	9804      	ldr	r0, [sp, #16]
 80139c6:	f003 fa6b 	bl	8016ea0 <__lshift>
 80139ca:	900a      	str	r0, [sp, #40]	; 0x28
 80139cc:	2800      	cmp	r0, #0
 80139ce:	d100      	bne.n	80139d2 <_strtod_l+0x79a>
 80139d0:	e668      	b.n	80136a4 <_strtod_l+0x46c>
 80139d2:	2d00      	cmp	r5, #0
 80139d4:	dd08      	ble.n	80139e8 <_strtod_l+0x7b0>
 80139d6:	002a      	movs	r2, r5
 80139d8:	9905      	ldr	r1, [sp, #20]
 80139da:	9804      	ldr	r0, [sp, #16]
 80139dc:	f003 fa60 	bl	8016ea0 <__lshift>
 80139e0:	9005      	str	r0, [sp, #20]
 80139e2:	2800      	cmp	r0, #0
 80139e4:	d100      	bne.n	80139e8 <_strtod_l+0x7b0>
 80139e6:	e65d      	b.n	80136a4 <_strtod_l+0x46c>
 80139e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139ea:	9922      	ldr	r1, [sp, #136]	; 0x88
 80139ec:	9804      	ldr	r0, [sp, #16]
 80139ee:	f003 fac3 	bl	8016f78 <__mdiff>
 80139f2:	1e04      	subs	r4, r0, #0
 80139f4:	d100      	bne.n	80139f8 <_strtod_l+0x7c0>
 80139f6:	e655      	b.n	80136a4 <_strtod_l+0x46c>
 80139f8:	2500      	movs	r5, #0
 80139fa:	68c3      	ldr	r3, [r0, #12]
 80139fc:	9905      	ldr	r1, [sp, #20]
 80139fe:	60c5      	str	r5, [r0, #12]
 8013a00:	9312      	str	r3, [sp, #72]	; 0x48
 8013a02:	f003 fa9f 	bl	8016f44 <__mcmp>
 8013a06:	42a8      	cmp	r0, r5
 8013a08:	da55      	bge.n	8013ab6 <_strtod_l+0x87e>
 8013a0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a0c:	42ab      	cmp	r3, r5
 8013a0e:	d11b      	bne.n	8013a48 <_strtod_l+0x810>
 8013a10:	42ae      	cmp	r6, r5
 8013a12:	d119      	bne.n	8013a48 <_strtod_l+0x810>
 8013a14:	033b      	lsls	r3, r7, #12
 8013a16:	42ab      	cmp	r3, r5
 8013a18:	d116      	bne.n	8013a48 <_strtod_l+0x810>
 8013a1a:	22d6      	movs	r2, #214	; 0xd6
 8013a1c:	4b71      	ldr	r3, [pc, #452]	; (8013be4 <_strtod_l+0x9ac>)
 8013a1e:	04d2      	lsls	r2, r2, #19
 8013a20:	403b      	ands	r3, r7
 8013a22:	4293      	cmp	r3, r2
 8013a24:	d910      	bls.n	8013a48 <_strtod_l+0x810>
 8013a26:	6963      	ldr	r3, [r4, #20]
 8013a28:	42ab      	cmp	r3, r5
 8013a2a:	d102      	bne.n	8013a32 <_strtod_l+0x7fa>
 8013a2c:	6923      	ldr	r3, [r4, #16]
 8013a2e:	2b01      	cmp	r3, #1
 8013a30:	dd0a      	ble.n	8013a48 <_strtod_l+0x810>
 8013a32:	0021      	movs	r1, r4
 8013a34:	2201      	movs	r2, #1
 8013a36:	9804      	ldr	r0, [sp, #16]
 8013a38:	f003 fa32 	bl	8016ea0 <__lshift>
 8013a3c:	9905      	ldr	r1, [sp, #20]
 8013a3e:	0004      	movs	r4, r0
 8013a40:	f003 fa80 	bl	8016f44 <__mcmp>
 8013a44:	2800      	cmp	r0, #0
 8013a46:	dc6b      	bgt.n	8013b20 <_strtod_l+0x8e8>
 8013a48:	9b06      	ldr	r3, [sp, #24]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d178      	bne.n	8013b40 <_strtod_l+0x908>
 8013a4e:	e632      	b.n	80136b6 <_strtod_l+0x47e>
 8013a50:	2201      	movs	r2, #1
 8013a52:	4214      	tst	r4, r2
 8013a54:	d007      	beq.n	8013a66 <_strtod_l+0x82e>
 8013a56:	4a64      	ldr	r2, [pc, #400]	; (8013be8 <_strtod_l+0x9b0>)
 8013a58:	00eb      	lsls	r3, r5, #3
 8013a5a:	18d3      	adds	r3, r2, r3
 8013a5c:	681a      	ldr	r2, [r3, #0]
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	f7ee f9e8 	bl	8001e34 <__aeabi_dmul>
 8013a64:	2301      	movs	r3, #1
 8013a66:	3501      	adds	r5, #1
 8013a68:	1064      	asrs	r4, r4, #1
 8013a6a:	e6df      	b.n	801382c <_strtod_l+0x5f4>
 8013a6c:	2101      	movs	r1, #1
 8013a6e:	3b20      	subs	r3, #32
 8013a70:	4249      	negs	r1, r1
 8013a72:	4099      	lsls	r1, r3
 8013a74:	400a      	ands	r2, r1
 8013a76:	0017      	movs	r7, r2
 8013a78:	e6f2      	b.n	8013860 <_strtod_l+0x628>
 8013a7a:	2201      	movs	r2, #1
 8013a7c:	4252      	negs	r2, r2
 8013a7e:	409a      	lsls	r2, r3
 8013a80:	4016      	ands	r6, r2
 8013a82:	e6ed      	b.n	8013860 <_strtod_l+0x628>
 8013a84:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013a86:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013a88:	1ad2      	subs	r2, r2, r3
 8013a8a:	4694      	mov	ip, r2
 8013a8c:	e73c      	b.n	8013908 <_strtod_l+0x6d0>
 8013a8e:	4957      	ldr	r1, [pc, #348]	; (8013bec <_strtod_l+0x9b4>)
 8013a90:	1acb      	subs	r3, r1, r3
 8013a92:	0001      	movs	r1, r0
 8013a94:	4099      	lsls	r1, r3
 8013a96:	9110      	str	r1, [sp, #64]	; 0x40
 8013a98:	9014      	str	r0, [sp, #80]	; 0x50
 8013a9a:	e74a      	b.n	8013932 <_strtod_l+0x6fa>
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	9310      	str	r3, [sp, #64]	; 0x40
 8013aa0:	e7fa      	b.n	8013a98 <_strtod_l+0x860>
 8013aa2:	9a08      	ldr	r2, [sp, #32]
 8013aa4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013aa6:	9804      	ldr	r0, [sp, #16]
 8013aa8:	f003 f9fa 	bl	8016ea0 <__lshift>
 8013aac:	9022      	str	r0, [sp, #136]	; 0x88
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	d000      	beq.n	8013ab4 <_strtod_l+0x87c>
 8013ab2:	e776      	b.n	80139a2 <_strtod_l+0x76a>
 8013ab4:	e5f6      	b.n	80136a4 <_strtod_l+0x46c>
 8013ab6:	970c      	str	r7, [sp, #48]	; 0x30
 8013ab8:	2800      	cmp	r0, #0
 8013aba:	d000      	beq.n	8013abe <_strtod_l+0x886>
 8013abc:	e0a0      	b.n	8013c00 <_strtod_l+0x9c8>
 8013abe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ac0:	033b      	lsls	r3, r7, #12
 8013ac2:	0b1b      	lsrs	r3, r3, #12
 8013ac4:	2a00      	cmp	r2, #0
 8013ac6:	d027      	beq.n	8013b18 <_strtod_l+0x8e0>
 8013ac8:	4a49      	ldr	r2, [pc, #292]	; (8013bf0 <_strtod_l+0x9b8>)
 8013aca:	4293      	cmp	r3, r2
 8013acc:	d157      	bne.n	8013b7e <_strtod_l+0x946>
 8013ace:	2201      	movs	r2, #1
 8013ad0:	9b06      	ldr	r3, [sp, #24]
 8013ad2:	4252      	negs	r2, r2
 8013ad4:	0031      	movs	r1, r6
 8013ad6:	0010      	movs	r0, r2
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d00b      	beq.n	8013af4 <_strtod_l+0x8bc>
 8013adc:	25d4      	movs	r5, #212	; 0xd4
 8013ade:	4b41      	ldr	r3, [pc, #260]	; (8013be4 <_strtod_l+0x9ac>)
 8013ae0:	04ed      	lsls	r5, r5, #19
 8013ae2:	403b      	ands	r3, r7
 8013ae4:	0010      	movs	r0, r2
 8013ae6:	42ab      	cmp	r3, r5
 8013ae8:	d804      	bhi.n	8013af4 <_strtod_l+0x8bc>
 8013aea:	306c      	adds	r0, #108	; 0x6c
 8013aec:	0d1b      	lsrs	r3, r3, #20
 8013aee:	1ac3      	subs	r3, r0, r3
 8013af0:	409a      	lsls	r2, r3
 8013af2:	0010      	movs	r0, r2
 8013af4:	4281      	cmp	r1, r0
 8013af6:	d142      	bne.n	8013b7e <_strtod_l+0x946>
 8013af8:	4b3e      	ldr	r3, [pc, #248]	; (8013bf4 <_strtod_l+0x9bc>)
 8013afa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d102      	bne.n	8013b06 <_strtod_l+0x8ce>
 8013b00:	1c4b      	adds	r3, r1, #1
 8013b02:	d100      	bne.n	8013b06 <_strtod_l+0x8ce>
 8013b04:	e5ce      	b.n	80136a4 <_strtod_l+0x46c>
 8013b06:	4b37      	ldr	r3, [pc, #220]	; (8013be4 <_strtod_l+0x9ac>)
 8013b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b0a:	2600      	movs	r6, #0
 8013b0c:	401a      	ands	r2, r3
 8013b0e:	0013      	movs	r3, r2
 8013b10:	2280      	movs	r2, #128	; 0x80
 8013b12:	0352      	lsls	r2, r2, #13
 8013b14:	189f      	adds	r7, r3, r2
 8013b16:	e797      	b.n	8013a48 <_strtod_l+0x810>
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d130      	bne.n	8013b7e <_strtod_l+0x946>
 8013b1c:	2e00      	cmp	r6, #0
 8013b1e:	d12e      	bne.n	8013b7e <_strtod_l+0x946>
 8013b20:	9906      	ldr	r1, [sp, #24]
 8013b22:	003b      	movs	r3, r7
 8013b24:	4a2f      	ldr	r2, [pc, #188]	; (8013be4 <_strtod_l+0x9ac>)
 8013b26:	2900      	cmp	r1, #0
 8013b28:	d020      	beq.n	8013b6c <_strtod_l+0x934>
 8013b2a:	0011      	movs	r1, r2
 8013b2c:	20d6      	movs	r0, #214	; 0xd6
 8013b2e:	4039      	ands	r1, r7
 8013b30:	04c0      	lsls	r0, r0, #19
 8013b32:	4281      	cmp	r1, r0
 8013b34:	dc1a      	bgt.n	8013b6c <_strtod_l+0x934>
 8013b36:	23dc      	movs	r3, #220	; 0xdc
 8013b38:	049b      	lsls	r3, r3, #18
 8013b3a:	4299      	cmp	r1, r3
 8013b3c:	dc00      	bgt.n	8013b40 <_strtod_l+0x908>
 8013b3e:	e646      	b.n	80137ce <_strtod_l+0x596>
 8013b40:	4b2d      	ldr	r3, [pc, #180]	; (8013bf8 <_strtod_l+0x9c0>)
 8013b42:	0030      	movs	r0, r6
 8013b44:	931b      	str	r3, [sp, #108]	; 0x6c
 8013b46:	2300      	movs	r3, #0
 8013b48:	931a      	str	r3, [sp, #104]	; 0x68
 8013b4a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013b4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b4e:	0039      	movs	r1, r7
 8013b50:	f7ee f970 	bl	8001e34 <__aeabi_dmul>
 8013b54:	0006      	movs	r6, r0
 8013b56:	000f      	movs	r7, r1
 8013b58:	1e0b      	subs	r3, r1, #0
 8013b5a:	d000      	beq.n	8013b5e <_strtod_l+0x926>
 8013b5c:	e5ab      	b.n	80136b6 <_strtod_l+0x47e>
 8013b5e:	2800      	cmp	r0, #0
 8013b60:	d000      	beq.n	8013b64 <_strtod_l+0x92c>
 8013b62:	e5a8      	b.n	80136b6 <_strtod_l+0x47e>
 8013b64:	9a04      	ldr	r2, [sp, #16]
 8013b66:	3322      	adds	r3, #34	; 0x22
 8013b68:	6013      	str	r3, [r2, #0]
 8013b6a:	e5a4      	b.n	80136b6 <_strtod_l+0x47e>
 8013b6c:	2601      	movs	r6, #1
 8013b6e:	4013      	ands	r3, r2
 8013b70:	4a22      	ldr	r2, [pc, #136]	; (8013bfc <_strtod_l+0x9c4>)
 8013b72:	4276      	negs	r6, r6
 8013b74:	189b      	adds	r3, r3, r2
 8013b76:	4a1e      	ldr	r2, [pc, #120]	; (8013bf0 <_strtod_l+0x9b8>)
 8013b78:	431a      	orrs	r2, r3
 8013b7a:	0017      	movs	r7, r2
 8013b7c:	e764      	b.n	8013a48 <_strtod_l+0x810>
 8013b7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d015      	beq.n	8013bb0 <_strtod_l+0x978>
 8013b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013b88:	4213      	tst	r3, r2
 8013b8a:	d100      	bne.n	8013b8e <_strtod_l+0x956>
 8013b8c:	e75c      	b.n	8013a48 <_strtod_l+0x810>
 8013b8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013b90:	9a06      	ldr	r2, [sp, #24]
 8013b92:	0030      	movs	r0, r6
 8013b94:	0039      	movs	r1, r7
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d00f      	beq.n	8013bba <_strtod_l+0x982>
 8013b9a:	f7ff fb35 	bl	8013208 <sulp>
 8013b9e:	0002      	movs	r2, r0
 8013ba0:	000b      	movs	r3, r1
 8013ba2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013ba4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013ba6:	f7ed fa1f 	bl	8000fe8 <__aeabi_dadd>
 8013baa:	0006      	movs	r6, r0
 8013bac:	000f      	movs	r7, r1
 8013bae:	e74b      	b.n	8013a48 <_strtod_l+0x810>
 8013bb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013bb2:	4233      	tst	r3, r6
 8013bb4:	d100      	bne.n	8013bb8 <_strtod_l+0x980>
 8013bb6:	e747      	b.n	8013a48 <_strtod_l+0x810>
 8013bb8:	e7e9      	b.n	8013b8e <_strtod_l+0x956>
 8013bba:	f7ff fb25 	bl	8013208 <sulp>
 8013bbe:	0002      	movs	r2, r0
 8013bc0:	000b      	movs	r3, r1
 8013bc2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013bc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013bc6:	f7ee fba7 	bl	8002318 <__aeabi_dsub>
 8013bca:	2200      	movs	r2, #0
 8013bcc:	2300      	movs	r3, #0
 8013bce:	0006      	movs	r6, r0
 8013bd0:	000f      	movs	r7, r1
 8013bd2:	f7ec fc43 	bl	800045c <__aeabi_dcmpeq>
 8013bd6:	2800      	cmp	r0, #0
 8013bd8:	d000      	beq.n	8013bdc <_strtod_l+0x9a4>
 8013bda:	e5f8      	b.n	80137ce <_strtod_l+0x596>
 8013bdc:	e734      	b.n	8013a48 <_strtod_l+0x810>
 8013bde:	46c0      	nop			; (mov r8, r8)
 8013be0:	fffffc02 	.word	0xfffffc02
 8013be4:	7ff00000 	.word	0x7ff00000
 8013be8:	0801a5e8 	.word	0x0801a5e8
 8013bec:	fffffbe2 	.word	0xfffffbe2
 8013bf0:	000fffff 	.word	0x000fffff
 8013bf4:	7fefffff 	.word	0x7fefffff
 8013bf8:	39500000 	.word	0x39500000
 8013bfc:	fff00000 	.word	0xfff00000
 8013c00:	9905      	ldr	r1, [sp, #20]
 8013c02:	0020      	movs	r0, r4
 8013c04:	f003 fae2 	bl	80171cc <__ratio>
 8013c08:	2380      	movs	r3, #128	; 0x80
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	05db      	lsls	r3, r3, #23
 8013c0e:	9008      	str	r0, [sp, #32]
 8013c10:	9109      	str	r1, [sp, #36]	; 0x24
 8013c12:	f7ec fc33 	bl	800047c <__aeabi_dcmple>
 8013c16:	2800      	cmp	r0, #0
 8013c18:	d100      	bne.n	8013c1c <_strtod_l+0x9e4>
 8013c1a:	e07f      	b.n	8013d1c <_strtod_l+0xae4>
 8013c1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d04b      	beq.n	8013cba <_strtod_l+0xa82>
 8013c22:	2200      	movs	r2, #0
 8013c24:	4b8a      	ldr	r3, [pc, #552]	; (8013e50 <_strtod_l+0xc18>)
 8013c26:	9210      	str	r2, [sp, #64]	; 0x40
 8013c28:	9311      	str	r3, [sp, #68]	; 0x44
 8013c2a:	4b89      	ldr	r3, [pc, #548]	; (8013e50 <_strtod_l+0xc18>)
 8013c2c:	9308      	str	r3, [sp, #32]
 8013c2e:	4a89      	ldr	r2, [pc, #548]	; (8013e54 <_strtod_l+0xc1c>)
 8013c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c32:	4013      	ands	r3, r2
 8013c34:	9314      	str	r3, [sp, #80]	; 0x50
 8013c36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013c38:	4b87      	ldr	r3, [pc, #540]	; (8013e58 <_strtod_l+0xc20>)
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	d000      	beq.n	8013c40 <_strtod_l+0xa08>
 8013c3e:	e0ba      	b.n	8013db6 <_strtod_l+0xb7e>
 8013c40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c44:	921a      	str	r2, [sp, #104]	; 0x68
 8013c46:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c48:	4a84      	ldr	r2, [pc, #528]	; (8013e5c <_strtod_l+0xc24>)
 8013c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c4c:	4694      	mov	ip, r2
 8013c4e:	4463      	add	r3, ip
 8013c50:	001f      	movs	r7, r3
 8013c52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013c54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013c56:	0030      	movs	r0, r6
 8013c58:	0039      	movs	r1, r7
 8013c5a:	920c      	str	r2, [sp, #48]	; 0x30
 8013c5c:	930d      	str	r3, [sp, #52]	; 0x34
 8013c5e:	f003 f9ef 	bl	8017040 <__ulp>
 8013c62:	0002      	movs	r2, r0
 8013c64:	000b      	movs	r3, r1
 8013c66:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013c68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013c6a:	f7ee f8e3 	bl	8001e34 <__aeabi_dmul>
 8013c6e:	0032      	movs	r2, r6
 8013c70:	003b      	movs	r3, r7
 8013c72:	f7ed f9b9 	bl	8000fe8 <__aeabi_dadd>
 8013c76:	4a77      	ldr	r2, [pc, #476]	; (8013e54 <_strtod_l+0xc1c>)
 8013c78:	4b79      	ldr	r3, [pc, #484]	; (8013e60 <_strtod_l+0xc28>)
 8013c7a:	0006      	movs	r6, r0
 8013c7c:	400a      	ands	r2, r1
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d964      	bls.n	8013d4c <_strtod_l+0xb14>
 8013c82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c84:	4a77      	ldr	r2, [pc, #476]	; (8013e64 <_strtod_l+0xc2c>)
 8013c86:	4293      	cmp	r3, r2
 8013c88:	d103      	bne.n	8013c92 <_strtod_l+0xa5a>
 8013c8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c8c:	3301      	adds	r3, #1
 8013c8e:	d100      	bne.n	8013c92 <_strtod_l+0xa5a>
 8013c90:	e508      	b.n	80136a4 <_strtod_l+0x46c>
 8013c92:	2601      	movs	r6, #1
 8013c94:	4f73      	ldr	r7, [pc, #460]	; (8013e64 <_strtod_l+0xc2c>)
 8013c96:	4276      	negs	r6, r6
 8013c98:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013c9a:	9804      	ldr	r0, [sp, #16]
 8013c9c:	f002 ff56 	bl	8016b4c <_Bfree>
 8013ca0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013ca2:	9804      	ldr	r0, [sp, #16]
 8013ca4:	f002 ff52 	bl	8016b4c <_Bfree>
 8013ca8:	9905      	ldr	r1, [sp, #20]
 8013caa:	9804      	ldr	r0, [sp, #16]
 8013cac:	f002 ff4e 	bl	8016b4c <_Bfree>
 8013cb0:	0021      	movs	r1, r4
 8013cb2:	9804      	ldr	r0, [sp, #16]
 8013cb4:	f002 ff4a 	bl	8016b4c <_Bfree>
 8013cb8:	e5f4      	b.n	80138a4 <_strtod_l+0x66c>
 8013cba:	2e00      	cmp	r6, #0
 8013cbc:	d11e      	bne.n	8013cfc <_strtod_l+0xac4>
 8013cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cc0:	031b      	lsls	r3, r3, #12
 8013cc2:	d121      	bne.n	8013d08 <_strtod_l+0xad0>
 8013cc4:	9808      	ldr	r0, [sp, #32]
 8013cc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013cc8:	2200      	movs	r2, #0
 8013cca:	4b61      	ldr	r3, [pc, #388]	; (8013e50 <_strtod_l+0xc18>)
 8013ccc:	f7ec fbcc 	bl	8000468 <__aeabi_dcmplt>
 8013cd0:	2800      	cmp	r0, #0
 8013cd2:	d11f      	bne.n	8013d14 <_strtod_l+0xadc>
 8013cd4:	9808      	ldr	r0, [sp, #32]
 8013cd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013cd8:	2200      	movs	r2, #0
 8013cda:	4b63      	ldr	r3, [pc, #396]	; (8013e68 <_strtod_l+0xc30>)
 8013cdc:	f7ee f8aa 	bl	8001e34 <__aeabi_dmul>
 8013ce0:	0005      	movs	r5, r0
 8013ce2:	9108      	str	r1, [sp, #32]
 8013ce4:	2280      	movs	r2, #128	; 0x80
 8013ce6:	0612      	lsls	r2, r2, #24
 8013ce8:	4694      	mov	ip, r2
 8013cea:	9b08      	ldr	r3, [sp, #32]
 8013cec:	951e      	str	r5, [sp, #120]	; 0x78
 8013cee:	4463      	add	r3, ip
 8013cf0:	931f      	str	r3, [sp, #124]	; 0x7c
 8013cf2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013cf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013cf6:	9210      	str	r2, [sp, #64]	; 0x40
 8013cf8:	9311      	str	r3, [sp, #68]	; 0x44
 8013cfa:	e798      	b.n	8013c2e <_strtod_l+0x9f6>
 8013cfc:	2e01      	cmp	r6, #1
 8013cfe:	d103      	bne.n	8013d08 <_strtod_l+0xad0>
 8013d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d100      	bne.n	8013d08 <_strtod_l+0xad0>
 8013d06:	e562      	b.n	80137ce <_strtod_l+0x596>
 8013d08:	2200      	movs	r2, #0
 8013d0a:	4b58      	ldr	r3, [pc, #352]	; (8013e6c <_strtod_l+0xc34>)
 8013d0c:	2500      	movs	r5, #0
 8013d0e:	9210      	str	r2, [sp, #64]	; 0x40
 8013d10:	9311      	str	r3, [sp, #68]	; 0x44
 8013d12:	e78a      	b.n	8013c2a <_strtod_l+0x9f2>
 8013d14:	4b54      	ldr	r3, [pc, #336]	; (8013e68 <_strtod_l+0xc30>)
 8013d16:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013d18:	9308      	str	r3, [sp, #32]
 8013d1a:	e7e3      	b.n	8013ce4 <_strtod_l+0xaac>
 8013d1c:	4b52      	ldr	r3, [pc, #328]	; (8013e68 <_strtod_l+0xc30>)
 8013d1e:	9808      	ldr	r0, [sp, #32]
 8013d20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d22:	2200      	movs	r2, #0
 8013d24:	f7ee f886 	bl	8001e34 <__aeabi_dmul>
 8013d28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013d2a:	0005      	movs	r5, r0
 8013d2c:	9108      	str	r1, [sp, #32]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d107      	bne.n	8013d42 <_strtod_l+0xb0a>
 8013d32:	2380      	movs	r3, #128	; 0x80
 8013d34:	061b      	lsls	r3, r3, #24
 8013d36:	18cb      	adds	r3, r1, r3
 8013d38:	9016      	str	r0, [sp, #88]	; 0x58
 8013d3a:	9317      	str	r3, [sp, #92]	; 0x5c
 8013d3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013d3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d40:	e7d9      	b.n	8013cf6 <_strtod_l+0xabe>
 8013d42:	0002      	movs	r2, r0
 8013d44:	9b08      	ldr	r3, [sp, #32]
 8013d46:	9216      	str	r2, [sp, #88]	; 0x58
 8013d48:	9317      	str	r3, [sp, #92]	; 0x5c
 8013d4a:	e7f7      	b.n	8013d3c <_strtod_l+0xb04>
 8013d4c:	23d4      	movs	r3, #212	; 0xd4
 8013d4e:	049b      	lsls	r3, r3, #18
 8013d50:	18cf      	adds	r7, r1, r3
 8013d52:	9b06      	ldr	r3, [sp, #24]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d19f      	bne.n	8013c98 <_strtod_l+0xa60>
 8013d58:	4b3e      	ldr	r3, [pc, #248]	; (8013e54 <_strtod_l+0xc1c>)
 8013d5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013d5c:	970c      	str	r7, [sp, #48]	; 0x30
 8013d5e:	403b      	ands	r3, r7
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d199      	bne.n	8013c98 <_strtod_l+0xa60>
 8013d64:	9908      	ldr	r1, [sp, #32]
 8013d66:	0028      	movs	r0, r5
 8013d68:	f7ee fe3a 	bl	80029e0 <__aeabi_d2iz>
 8013d6c:	f7ee fe6e 	bl	8002a4c <__aeabi_i2d>
 8013d70:	000b      	movs	r3, r1
 8013d72:	0002      	movs	r2, r0
 8013d74:	9908      	ldr	r1, [sp, #32]
 8013d76:	0028      	movs	r0, r5
 8013d78:	f7ee face 	bl	8002318 <__aeabi_dsub>
 8013d7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013d7e:	9008      	str	r0, [sp, #32]
 8013d80:	9109      	str	r1, [sp, #36]	; 0x24
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d104      	bne.n	8013d90 <_strtod_l+0xb58>
 8013d86:	2e00      	cmp	r6, #0
 8013d88:	d102      	bne.n	8013d90 <_strtod_l+0xb58>
 8013d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d8c:	031b      	lsls	r3, r3, #12
 8013d8e:	d058      	beq.n	8013e42 <_strtod_l+0xc0a>
 8013d90:	9808      	ldr	r0, [sp, #32]
 8013d92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d94:	4a36      	ldr	r2, [pc, #216]	; (8013e70 <_strtod_l+0xc38>)
 8013d96:	4b37      	ldr	r3, [pc, #220]	; (8013e74 <_strtod_l+0xc3c>)
 8013d98:	f7ec fb66 	bl	8000468 <__aeabi_dcmplt>
 8013d9c:	2800      	cmp	r0, #0
 8013d9e:	d000      	beq.n	8013da2 <_strtod_l+0xb6a>
 8013da0:	e489      	b.n	80136b6 <_strtod_l+0x47e>
 8013da2:	9808      	ldr	r0, [sp, #32]
 8013da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013da6:	4a34      	ldr	r2, [pc, #208]	; (8013e78 <_strtod_l+0xc40>)
 8013da8:	4b2f      	ldr	r3, [pc, #188]	; (8013e68 <_strtod_l+0xc30>)
 8013daa:	f7ec fb71 	bl	8000490 <__aeabi_dcmpgt>
 8013dae:	2800      	cmp	r0, #0
 8013db0:	d100      	bne.n	8013db4 <_strtod_l+0xb7c>
 8013db2:	e771      	b.n	8013c98 <_strtod_l+0xa60>
 8013db4:	e47f      	b.n	80136b6 <_strtod_l+0x47e>
 8013db6:	9b06      	ldr	r3, [sp, #24]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d02a      	beq.n	8013e12 <_strtod_l+0xbda>
 8013dbc:	23d4      	movs	r3, #212	; 0xd4
 8013dbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013dc0:	04db      	lsls	r3, r3, #19
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	d825      	bhi.n	8013e12 <_strtod_l+0xbda>
 8013dc6:	4a2d      	ldr	r2, [pc, #180]	; (8013e7c <_strtod_l+0xc44>)
 8013dc8:	4b2d      	ldr	r3, [pc, #180]	; (8013e80 <_strtod_l+0xc48>)
 8013dca:	0028      	movs	r0, r5
 8013dcc:	9908      	ldr	r1, [sp, #32]
 8013dce:	f7ec fb55 	bl	800047c <__aeabi_dcmple>
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	d016      	beq.n	8013e04 <_strtod_l+0xbcc>
 8013dd6:	0028      	movs	r0, r5
 8013dd8:	9908      	ldr	r1, [sp, #32]
 8013dda:	f7ec fc09 	bl	80005f0 <__aeabi_d2uiz>
 8013dde:	2800      	cmp	r0, #0
 8013de0:	d100      	bne.n	8013de4 <_strtod_l+0xbac>
 8013de2:	3001      	adds	r0, #1
 8013de4:	f7ee fe6c 	bl	8002ac0 <__aeabi_ui2d>
 8013de8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013dea:	0005      	movs	r5, r0
 8013dec:	9108      	str	r1, [sp, #32]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d122      	bne.n	8013e38 <_strtod_l+0xc00>
 8013df2:	2380      	movs	r3, #128	; 0x80
 8013df4:	061b      	lsls	r3, r3, #24
 8013df6:	18cb      	adds	r3, r1, r3
 8013df8:	9018      	str	r0, [sp, #96]	; 0x60
 8013dfa:	9319      	str	r3, [sp, #100]	; 0x64
 8013dfc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013dfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013e00:	9210      	str	r2, [sp, #64]	; 0x40
 8013e02:	9311      	str	r3, [sp, #68]	; 0x44
 8013e04:	22d6      	movs	r2, #214	; 0xd6
 8013e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013e08:	04d2      	lsls	r2, r2, #19
 8013e0a:	189b      	adds	r3, r3, r2
 8013e0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e0e:	1a9b      	subs	r3, r3, r2
 8013e10:	9311      	str	r3, [sp, #68]	; 0x44
 8013e12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013e14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e16:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013e18:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013e1a:	f003 f911 	bl	8017040 <__ulp>
 8013e1e:	0002      	movs	r2, r0
 8013e20:	000b      	movs	r3, r1
 8013e22:	0030      	movs	r0, r6
 8013e24:	0039      	movs	r1, r7
 8013e26:	f7ee f805 	bl	8001e34 <__aeabi_dmul>
 8013e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013e2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e2e:	f7ed f8db 	bl	8000fe8 <__aeabi_dadd>
 8013e32:	0006      	movs	r6, r0
 8013e34:	000f      	movs	r7, r1
 8013e36:	e78c      	b.n	8013d52 <_strtod_l+0xb1a>
 8013e38:	0002      	movs	r2, r0
 8013e3a:	9b08      	ldr	r3, [sp, #32]
 8013e3c:	9218      	str	r2, [sp, #96]	; 0x60
 8013e3e:	9319      	str	r3, [sp, #100]	; 0x64
 8013e40:	e7dc      	b.n	8013dfc <_strtod_l+0xbc4>
 8013e42:	4a0b      	ldr	r2, [pc, #44]	; (8013e70 <_strtod_l+0xc38>)
 8013e44:	4b0f      	ldr	r3, [pc, #60]	; (8013e84 <_strtod_l+0xc4c>)
 8013e46:	9808      	ldr	r0, [sp, #32]
 8013e48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e4a:	f7ec fb0d 	bl	8000468 <__aeabi_dcmplt>
 8013e4e:	e7ae      	b.n	8013dae <_strtod_l+0xb76>
 8013e50:	3ff00000 	.word	0x3ff00000
 8013e54:	7ff00000 	.word	0x7ff00000
 8013e58:	7fe00000 	.word	0x7fe00000
 8013e5c:	fcb00000 	.word	0xfcb00000
 8013e60:	7c9fffff 	.word	0x7c9fffff
 8013e64:	7fefffff 	.word	0x7fefffff
 8013e68:	3fe00000 	.word	0x3fe00000
 8013e6c:	bff00000 	.word	0xbff00000
 8013e70:	94a03595 	.word	0x94a03595
 8013e74:	3fdfffff 	.word	0x3fdfffff
 8013e78:	35afe535 	.word	0x35afe535
 8013e7c:	ffc00000 	.word	0xffc00000
 8013e80:	41dfffff 	.word	0x41dfffff
 8013e84:	3fcfffff 	.word	0x3fcfffff

08013e88 <strtod>:
 8013e88:	4b06      	ldr	r3, [pc, #24]	; (8013ea4 <strtod+0x1c>)
 8013e8a:	b510      	push	{r4, lr}
 8013e8c:	0004      	movs	r4, r0
 8013e8e:	6818      	ldr	r0, [r3, #0]
 8013e90:	000a      	movs	r2, r1
 8013e92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d100      	bne.n	8013e9a <strtod+0x12>
 8013e98:	4b03      	ldr	r3, [pc, #12]	; (8013ea8 <strtod+0x20>)
 8013e9a:	0021      	movs	r1, r4
 8013e9c:	f7ff f9cc 	bl	8013238 <_strtod_l>
 8013ea0:	bd10      	pop	{r4, pc}
 8013ea2:	46c0      	nop			; (mov r8, r8)
 8013ea4:	200000d8 	.word	0x200000d8
 8013ea8:	20000508 	.word	0x20000508

08013eac <strtok>:
 8013eac:	4b03      	ldr	r3, [pc, #12]	; (8013ebc <strtok+0x10>)
 8013eae:	b510      	push	{r4, lr}
 8013eb0:	681a      	ldr	r2, [r3, #0]
 8013eb2:	2301      	movs	r3, #1
 8013eb4:	325c      	adds	r2, #92	; 0x5c
 8013eb6:	f000 f803 	bl	8013ec0 <__strtok_r>
 8013eba:	bd10      	pop	{r4, pc}
 8013ebc:	200000d8 	.word	0x200000d8

08013ec0 <__strtok_r>:
 8013ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ec2:	2800      	cmp	r0, #0
 8013ec4:	d104      	bne.n	8013ed0 <__strtok_r+0x10>
 8013ec6:	6810      	ldr	r0, [r2, #0]
 8013ec8:	2800      	cmp	r0, #0
 8013eca:	d101      	bne.n	8013ed0 <__strtok_r+0x10>
 8013ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ece:	0020      	movs	r0, r4
 8013ed0:	000e      	movs	r6, r1
 8013ed2:	7805      	ldrb	r5, [r0, #0]
 8013ed4:	1c44      	adds	r4, r0, #1
 8013ed6:	7837      	ldrb	r7, [r6, #0]
 8013ed8:	2f00      	cmp	r7, #0
 8013eda:	d104      	bne.n	8013ee6 <__strtok_r+0x26>
 8013edc:	2d00      	cmp	r5, #0
 8013ede:	d110      	bne.n	8013f02 <__strtok_r+0x42>
 8013ee0:	6015      	str	r5, [r2, #0]
 8013ee2:	0028      	movs	r0, r5
 8013ee4:	e7f2      	b.n	8013ecc <__strtok_r+0xc>
 8013ee6:	3601      	adds	r6, #1
 8013ee8:	42bd      	cmp	r5, r7
 8013eea:	d1f4      	bne.n	8013ed6 <__strtok_r+0x16>
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d1ee      	bne.n	8013ece <__strtok_r+0xe>
 8013ef0:	6014      	str	r4, [r2, #0]
 8013ef2:	7003      	strb	r3, [r0, #0]
 8013ef4:	e7ea      	b.n	8013ecc <__strtok_r+0xc>
 8013ef6:	0033      	movs	r3, r6
 8013ef8:	e00d      	b.n	8013f16 <__strtok_r+0x56>
 8013efa:	3501      	adds	r5, #1
 8013efc:	2f00      	cmp	r7, #0
 8013efe:	d103      	bne.n	8013f08 <__strtok_r+0x48>
 8013f00:	001c      	movs	r4, r3
 8013f02:	000d      	movs	r5, r1
 8013f04:	7826      	ldrb	r6, [r4, #0]
 8013f06:	1c63      	adds	r3, r4, #1
 8013f08:	782f      	ldrb	r7, [r5, #0]
 8013f0a:	42be      	cmp	r6, r7
 8013f0c:	d1f5      	bne.n	8013efa <__strtok_r+0x3a>
 8013f0e:	2e00      	cmp	r6, #0
 8013f10:	d0f1      	beq.n	8013ef6 <__strtok_r+0x36>
 8013f12:	2100      	movs	r1, #0
 8013f14:	7021      	strb	r1, [r4, #0]
 8013f16:	6013      	str	r3, [r2, #0]
 8013f18:	e7d8      	b.n	8013ecc <__strtok_r+0xc>
	...

08013f1c <_strtol_l.isra.0>:
 8013f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f1e:	001f      	movs	r7, r3
 8013f20:	000e      	movs	r6, r1
 8013f22:	b087      	sub	sp, #28
 8013f24:	9005      	str	r0, [sp, #20]
 8013f26:	9101      	str	r1, [sp, #4]
 8013f28:	9202      	str	r2, [sp, #8]
 8013f2a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013f2c:	7834      	ldrb	r4, [r6, #0]
 8013f2e:	f7fe fc9f 	bl	8012870 <__locale_ctype_ptr_l>
 8013f32:	2208      	movs	r2, #8
 8013f34:	1900      	adds	r0, r0, r4
 8013f36:	7843      	ldrb	r3, [r0, #1]
 8013f38:	1c75      	adds	r5, r6, #1
 8013f3a:	4013      	ands	r3, r2
 8013f3c:	d136      	bne.n	8013fac <_strtol_l.isra.0+0x90>
 8013f3e:	2c2d      	cmp	r4, #45	; 0x2d
 8013f40:	d136      	bne.n	8013fb0 <_strtol_l.isra.0+0x94>
 8013f42:	1cb5      	adds	r5, r6, #2
 8013f44:	7874      	ldrb	r4, [r6, #1]
 8013f46:	2601      	movs	r6, #1
 8013f48:	2f00      	cmp	r7, #0
 8013f4a:	d062      	beq.n	8014012 <_strtol_l.isra.0+0xf6>
 8013f4c:	2f10      	cmp	r7, #16
 8013f4e:	d109      	bne.n	8013f64 <_strtol_l.isra.0+0x48>
 8013f50:	2c30      	cmp	r4, #48	; 0x30
 8013f52:	d107      	bne.n	8013f64 <_strtol_l.isra.0+0x48>
 8013f54:	2220      	movs	r2, #32
 8013f56:	782b      	ldrb	r3, [r5, #0]
 8013f58:	4393      	bics	r3, r2
 8013f5a:	2b58      	cmp	r3, #88	; 0x58
 8013f5c:	d154      	bne.n	8014008 <_strtol_l.isra.0+0xec>
 8013f5e:	2710      	movs	r7, #16
 8013f60:	786c      	ldrb	r4, [r5, #1]
 8013f62:	3502      	adds	r5, #2
 8013f64:	4b2d      	ldr	r3, [pc, #180]	; (801401c <_strtol_l.isra.0+0x100>)
 8013f66:	0039      	movs	r1, r7
 8013f68:	18f3      	adds	r3, r6, r3
 8013f6a:	0018      	movs	r0, r3
 8013f6c:	9303      	str	r3, [sp, #12]
 8013f6e:	f7ec f975 	bl	800025c <__aeabi_uidivmod>
 8013f72:	9104      	str	r1, [sp, #16]
 8013f74:	2101      	movs	r1, #1
 8013f76:	2300      	movs	r3, #0
 8013f78:	4249      	negs	r1, r1
 8013f7a:	0002      	movs	r2, r0
 8013f7c:	468c      	mov	ip, r1
 8013f7e:	0018      	movs	r0, r3
 8013f80:	0021      	movs	r1, r4
 8013f82:	3930      	subs	r1, #48	; 0x30
 8013f84:	2909      	cmp	r1, #9
 8013f86:	d81a      	bhi.n	8013fbe <_strtol_l.isra.0+0xa2>
 8013f88:	000c      	movs	r4, r1
 8013f8a:	42a7      	cmp	r7, r4
 8013f8c:	dd23      	ble.n	8013fd6 <_strtol_l.isra.0+0xba>
 8013f8e:	1c59      	adds	r1, r3, #1
 8013f90:	d009      	beq.n	8013fa6 <_strtol_l.isra.0+0x8a>
 8013f92:	4663      	mov	r3, ip
 8013f94:	4282      	cmp	r2, r0
 8013f96:	d306      	bcc.n	8013fa6 <_strtol_l.isra.0+0x8a>
 8013f98:	d102      	bne.n	8013fa0 <_strtol_l.isra.0+0x84>
 8013f9a:	9904      	ldr	r1, [sp, #16]
 8013f9c:	42a1      	cmp	r1, r4
 8013f9e:	db02      	blt.n	8013fa6 <_strtol_l.isra.0+0x8a>
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	4378      	muls	r0, r7
 8013fa4:	1820      	adds	r0, r4, r0
 8013fa6:	782c      	ldrb	r4, [r5, #0]
 8013fa8:	3501      	adds	r5, #1
 8013faa:	e7e9      	b.n	8013f80 <_strtol_l.isra.0+0x64>
 8013fac:	002e      	movs	r6, r5
 8013fae:	e7bc      	b.n	8013f2a <_strtol_l.isra.0+0xe>
 8013fb0:	2c2b      	cmp	r4, #43	; 0x2b
 8013fb2:	d001      	beq.n	8013fb8 <_strtol_l.isra.0+0x9c>
 8013fb4:	001e      	movs	r6, r3
 8013fb6:	e7c7      	b.n	8013f48 <_strtol_l.isra.0+0x2c>
 8013fb8:	1cb5      	adds	r5, r6, #2
 8013fba:	7874      	ldrb	r4, [r6, #1]
 8013fbc:	e7fa      	b.n	8013fb4 <_strtol_l.isra.0+0x98>
 8013fbe:	0021      	movs	r1, r4
 8013fc0:	3941      	subs	r1, #65	; 0x41
 8013fc2:	2919      	cmp	r1, #25
 8013fc4:	d801      	bhi.n	8013fca <_strtol_l.isra.0+0xae>
 8013fc6:	3c37      	subs	r4, #55	; 0x37
 8013fc8:	e7df      	b.n	8013f8a <_strtol_l.isra.0+0x6e>
 8013fca:	0021      	movs	r1, r4
 8013fcc:	3961      	subs	r1, #97	; 0x61
 8013fce:	2919      	cmp	r1, #25
 8013fd0:	d801      	bhi.n	8013fd6 <_strtol_l.isra.0+0xba>
 8013fd2:	3c57      	subs	r4, #87	; 0x57
 8013fd4:	e7d9      	b.n	8013f8a <_strtol_l.isra.0+0x6e>
 8013fd6:	1c5a      	adds	r2, r3, #1
 8013fd8:	d108      	bne.n	8013fec <_strtol_l.isra.0+0xd0>
 8013fda:	9a05      	ldr	r2, [sp, #20]
 8013fdc:	3323      	adds	r3, #35	; 0x23
 8013fde:	6013      	str	r3, [r2, #0]
 8013fe0:	9b02      	ldr	r3, [sp, #8]
 8013fe2:	9803      	ldr	r0, [sp, #12]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d109      	bne.n	8013ffc <_strtol_l.isra.0+0xe0>
 8013fe8:	b007      	add	sp, #28
 8013fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fec:	2e00      	cmp	r6, #0
 8013fee:	d000      	beq.n	8013ff2 <_strtol_l.isra.0+0xd6>
 8013ff0:	4240      	negs	r0, r0
 8013ff2:	9a02      	ldr	r2, [sp, #8]
 8013ff4:	2a00      	cmp	r2, #0
 8013ff6:	d0f7      	beq.n	8013fe8 <_strtol_l.isra.0+0xcc>
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d001      	beq.n	8014000 <_strtol_l.isra.0+0xe4>
 8013ffc:	1e6b      	subs	r3, r5, #1
 8013ffe:	9301      	str	r3, [sp, #4]
 8014000:	9b02      	ldr	r3, [sp, #8]
 8014002:	9a01      	ldr	r2, [sp, #4]
 8014004:	601a      	str	r2, [r3, #0]
 8014006:	e7ef      	b.n	8013fe8 <_strtol_l.isra.0+0xcc>
 8014008:	2430      	movs	r4, #48	; 0x30
 801400a:	2f00      	cmp	r7, #0
 801400c:	d1aa      	bne.n	8013f64 <_strtol_l.isra.0+0x48>
 801400e:	2708      	movs	r7, #8
 8014010:	e7a8      	b.n	8013f64 <_strtol_l.isra.0+0x48>
 8014012:	2c30      	cmp	r4, #48	; 0x30
 8014014:	d09e      	beq.n	8013f54 <_strtol_l.isra.0+0x38>
 8014016:	270a      	movs	r7, #10
 8014018:	e7a4      	b.n	8013f64 <_strtol_l.isra.0+0x48>
 801401a:	46c0      	nop			; (mov r8, r8)
 801401c:	7fffffff 	.word	0x7fffffff

08014020 <strtol>:
 8014020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014022:	0013      	movs	r3, r2
 8014024:	4a06      	ldr	r2, [pc, #24]	; (8014040 <strtol+0x20>)
 8014026:	0005      	movs	r5, r0
 8014028:	6810      	ldr	r0, [r2, #0]
 801402a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801402c:	2c00      	cmp	r4, #0
 801402e:	d100      	bne.n	8014032 <strtol+0x12>
 8014030:	4c04      	ldr	r4, [pc, #16]	; (8014044 <strtol+0x24>)
 8014032:	000a      	movs	r2, r1
 8014034:	9400      	str	r4, [sp, #0]
 8014036:	0029      	movs	r1, r5
 8014038:	f7ff ff70 	bl	8013f1c <_strtol_l.isra.0>
 801403c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801403e:	46c0      	nop			; (mov r8, r8)
 8014040:	200000d8 	.word	0x200000d8
 8014044:	20000508 	.word	0x20000508

08014048 <_svfprintf_r>:
 8014048:	b5f0      	push	{r4, r5, r6, r7, lr}
 801404a:	b0d9      	sub	sp, #356	; 0x164
 801404c:	910b      	str	r1, [sp, #44]	; 0x2c
 801404e:	9209      	str	r2, [sp, #36]	; 0x24
 8014050:	001c      	movs	r4, r3
 8014052:	900a      	str	r0, [sp, #40]	; 0x28
 8014054:	f002 fd26 	bl	8016aa4 <_localeconv_r>
 8014058:	6803      	ldr	r3, [r0, #0]
 801405a:	0018      	movs	r0, r3
 801405c:	931c      	str	r3, [sp, #112]	; 0x70
 801405e:	f7ec f85b 	bl	8000118 <strlen>
 8014062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014064:	9014      	str	r0, [sp, #80]	; 0x50
 8014066:	899b      	ldrh	r3, [r3, #12]
 8014068:	061b      	lsls	r3, r3, #24
 801406a:	d518      	bpl.n	801409e <_svfprintf_r+0x56>
 801406c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801406e:	691b      	ldr	r3, [r3, #16]
 8014070:	9308      	str	r3, [sp, #32]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d113      	bne.n	801409e <_svfprintf_r+0x56>
 8014076:	2140      	movs	r1, #64	; 0x40
 8014078:	980a      	ldr	r0, [sp, #40]	; 0x28
 801407a:	f7fe fc1f 	bl	80128bc <_malloc_r>
 801407e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014080:	6018      	str	r0, [r3, #0]
 8014082:	6118      	str	r0, [r3, #16]
 8014084:	2800      	cmp	r0, #0
 8014086:	d107      	bne.n	8014098 <_svfprintf_r+0x50>
 8014088:	230c      	movs	r3, #12
 801408a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801408c:	6013      	str	r3, [r2, #0]
 801408e:	3b0d      	subs	r3, #13
 8014090:	9315      	str	r3, [sp, #84]	; 0x54
 8014092:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014094:	b059      	add	sp, #356	; 0x164
 8014096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014098:	2340      	movs	r3, #64	; 0x40
 801409a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801409c:	6153      	str	r3, [r2, #20]
 801409e:	2600      	movs	r6, #0
 80140a0:	af2f      	add	r7, sp, #188	; 0xbc
 80140a2:	972c      	str	r7, [sp, #176]	; 0xb0
 80140a4:	962e      	str	r6, [sp, #184]	; 0xb8
 80140a6:	962d      	str	r6, [sp, #180]	; 0xb4
 80140a8:	960d      	str	r6, [sp, #52]	; 0x34
 80140aa:	961a      	str	r6, [sp, #104]	; 0x68
 80140ac:	9619      	str	r6, [sp, #100]	; 0x64
 80140ae:	961e      	str	r6, [sp, #120]	; 0x78
 80140b0:	961d      	str	r6, [sp, #116]	; 0x74
 80140b2:	9613      	str	r6, [sp, #76]	; 0x4c
 80140b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80140b6:	961f      	str	r6, [sp, #124]	; 0x7c
 80140b8:	9615      	str	r6, [sp, #84]	; 0x54
 80140ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80140bc:	782b      	ldrb	r3, [r5, #0]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d002      	beq.n	80140c8 <_svfprintf_r+0x80>
 80140c2:	2b25      	cmp	r3, #37	; 0x25
 80140c4:	d000      	beq.n	80140c8 <_svfprintf_r+0x80>
 80140c6:	e095      	b.n	80141f4 <_svfprintf_r+0x1ac>
 80140c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140ca:	1aee      	subs	r6, r5, r3
 80140cc:	d017      	beq.n	80140fe <_svfprintf_r+0xb6>
 80140ce:	603b      	str	r3, [r7, #0]
 80140d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80140d2:	607e      	str	r6, [r7, #4]
 80140d4:	199b      	adds	r3, r3, r6
 80140d6:	932e      	str	r3, [sp, #184]	; 0xb8
 80140d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80140da:	3708      	adds	r7, #8
 80140dc:	9308      	str	r3, [sp, #32]
 80140de:	3301      	adds	r3, #1
 80140e0:	932d      	str	r3, [sp, #180]	; 0xb4
 80140e2:	2b07      	cmp	r3, #7
 80140e4:	dd08      	ble.n	80140f8 <_svfprintf_r+0xb0>
 80140e6:	aa2c      	add	r2, sp, #176	; 0xb0
 80140e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80140ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80140ec:	f003 f900 	bl	80172f0 <__ssprint_r>
 80140f0:	2800      	cmp	r0, #0
 80140f2:	d000      	beq.n	80140f6 <_svfprintf_r+0xae>
 80140f4:	e2d9      	b.n	80146aa <_svfprintf_r+0x662>
 80140f6:	af2f      	add	r7, sp, #188	; 0xbc
 80140f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80140fa:	199b      	adds	r3, r3, r6
 80140fc:	9315      	str	r3, [sp, #84]	; 0x54
 80140fe:	782b      	ldrb	r3, [r5, #0]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d101      	bne.n	8014108 <_svfprintf_r+0xc0>
 8014104:	f001 f9e5 	bl	80154d2 <_svfprintf_r+0x148a>
 8014108:	1c6b      	adds	r3, r5, #1
 801410a:	221b      	movs	r2, #27
 801410c:	9311      	str	r3, [sp, #68]	; 0x44
 801410e:	2300      	movs	r3, #0
 8014110:	a91e      	add	r1, sp, #120	; 0x78
 8014112:	1852      	adds	r2, r2, r1
 8014114:	7013      	strb	r3, [r2, #0]
 8014116:	2201      	movs	r2, #1
 8014118:	001e      	movs	r6, r3
 801411a:	2520      	movs	r5, #32
 801411c:	4252      	negs	r2, r2
 801411e:	9208      	str	r2, [sp, #32]
 8014120:	9316      	str	r3, [sp, #88]	; 0x58
 8014122:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014124:	781b      	ldrb	r3, [r3, #0]
 8014126:	930e      	str	r3, [sp, #56]	; 0x38
 8014128:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801412a:	3301      	adds	r3, #1
 801412c:	9311      	str	r3, [sp, #68]	; 0x44
 801412e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014130:	3820      	subs	r0, #32
 8014132:	285a      	cmp	r0, #90	; 0x5a
 8014134:	d901      	bls.n	801413a <_svfprintf_r+0xf2>
 8014136:	f000 fe3d 	bl	8014db4 <_svfprintf_r+0xd6c>
 801413a:	f7eb ffff 	bl	800013c <__gnu_thumb1_case_shi>
 801413e:	009e      	.short	0x009e
 8014140:	063b063b 	.word	0x063b063b
 8014144:	063b00a7 	.word	0x063b00a7
 8014148:	063b063b 	.word	0x063b063b
 801414c:	063b0080 	.word	0x063b0080
 8014150:	00a9063b 	.word	0x00a9063b
 8014154:	063b00b3 	.word	0x063b00b3
 8014158:	00b900b1 	.word	0x00b900b1
 801415c:	00dd063b 	.word	0x00dd063b
 8014160:	00df00df 	.word	0x00df00df
 8014164:	00df00df 	.word	0x00df00df
 8014168:	00df00df 	.word	0x00df00df
 801416c:	00df00df 	.word	0x00df00df
 8014170:	063b00df 	.word	0x063b00df
 8014174:	063b063b 	.word	0x063b063b
 8014178:	063b063b 	.word	0x063b063b
 801417c:	063b063b 	.word	0x063b063b
 8014180:	063b0240 	.word	0x063b0240
 8014184:	01fd010a 	.word	0x01fd010a
 8014188:	02400240 	.word	0x02400240
 801418c:	063b0240 	.word	0x063b0240
 8014190:	063b063b 	.word	0x063b063b
 8014194:	00f1063b 	.word	0x00f1063b
 8014198:	063b063b 	.word	0x063b063b
 801419c:	063b04e2 	.word	0x063b04e2
 80141a0:	063b063b 	.word	0x063b063b
 80141a4:	063b0537 	.word	0x063b0537
 80141a8:	063b0557 	.word	0x063b0557
 80141ac:	005d063b 	.word	0x005d063b
 80141b0:	063b063b 	.word	0x063b063b
 80141b4:	063b063b 	.word	0x063b063b
 80141b8:	063b063b 	.word	0x063b063b
 80141bc:	063b063b 	.word	0x063b063b
 80141c0:	063b0240 	.word	0x063b0240
 80141c4:	01ff010a 	.word	0x01ff010a
 80141c8:	02400240 	.word	0x02400240
 80141cc:	00f30240 	.word	0x00f30240
 80141d0:	010601ff 	.word	0x010601ff
 80141d4:	00ff063b 	.word	0x00ff063b
 80141d8:	04c5063b 	.word	0x04c5063b
 80141dc:	052704e4 	.word	0x052704e4
 80141e0:	063b0106 	.word	0x063b0106
 80141e4:	fff20537 	.word	0xfff20537
 80141e8:	063b0559 	.word	0x063b0559
 80141ec:	0582063b 	.word	0x0582063b
 80141f0:	fff2063b 	.word	0xfff2063b
 80141f4:	3501      	adds	r5, #1
 80141f6:	e761      	b.n	80140bc <_svfprintf_r+0x74>
 80141f8:	4bcb      	ldr	r3, [pc, #812]	; (8014528 <_svfprintf_r+0x4e0>)
 80141fa:	2220      	movs	r2, #32
 80141fc:	931e      	str	r3, [sp, #120]	; 0x78
 80141fe:	4032      	ands	r2, r6
 8014200:	d101      	bne.n	8014206 <_svfprintf_r+0x1be>
 8014202:	f000 fd21 	bl	8014c48 <_svfprintf_r+0xc00>
 8014206:	2307      	movs	r3, #7
 8014208:	3407      	adds	r4, #7
 801420a:	439c      	bics	r4, r3
 801420c:	0023      	movs	r3, r4
 801420e:	3308      	adds	r3, #8
 8014210:	9312      	str	r3, [sp, #72]	; 0x48
 8014212:	6823      	ldr	r3, [r4, #0]
 8014214:	6864      	ldr	r4, [r4, #4]
 8014216:	9306      	str	r3, [sp, #24]
 8014218:	9407      	str	r4, [sp, #28]
 801421a:	07f3      	lsls	r3, r6, #31
 801421c:	d50a      	bpl.n	8014234 <_svfprintf_r+0x1ec>
 801421e:	9b06      	ldr	r3, [sp, #24]
 8014220:	9a07      	ldr	r2, [sp, #28]
 8014222:	4313      	orrs	r3, r2
 8014224:	d006      	beq.n	8014234 <_svfprintf_r+0x1ec>
 8014226:	2230      	movs	r2, #48	; 0x30
 8014228:	ab25      	add	r3, sp, #148	; 0x94
 801422a:	701a      	strb	r2, [r3, #0]
 801422c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801422e:	705a      	strb	r2, [r3, #1]
 8014230:	2302      	movs	r3, #2
 8014232:	431e      	orrs	r6, r3
 8014234:	4bbd      	ldr	r3, [pc, #756]	; (801452c <_svfprintf_r+0x4e4>)
 8014236:	401e      	ands	r6, r3
 8014238:	2302      	movs	r3, #2
 801423a:	f000 fc74 	bl	8014b26 <_svfprintf_r+0xade>
 801423e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014240:	f002 fc30 	bl	8016aa4 <_localeconv_r>
 8014244:	6843      	ldr	r3, [r0, #4]
 8014246:	0018      	movs	r0, r3
 8014248:	931f      	str	r3, [sp, #124]	; 0x7c
 801424a:	f7eb ff65 	bl	8000118 <strlen>
 801424e:	901b      	str	r0, [sp, #108]	; 0x6c
 8014250:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014252:	f002 fc27 	bl	8016aa4 <_localeconv_r>
 8014256:	6883      	ldr	r3, [r0, #8]
 8014258:	9313      	str	r3, [sp, #76]	; 0x4c
 801425a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801425c:	2b00      	cmp	r3, #0
 801425e:	d100      	bne.n	8014262 <_svfprintf_r+0x21a>
 8014260:	e75f      	b.n	8014122 <_svfprintf_r+0xda>
 8014262:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014264:	2b00      	cmp	r3, #0
 8014266:	d100      	bne.n	801426a <_svfprintf_r+0x222>
 8014268:	e75b      	b.n	8014122 <_svfprintf_r+0xda>
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d100      	bne.n	8014272 <_svfprintf_r+0x22a>
 8014270:	e757      	b.n	8014122 <_svfprintf_r+0xda>
 8014272:	2380      	movs	r3, #128	; 0x80
 8014274:	00db      	lsls	r3, r3, #3
 8014276:	431e      	orrs	r6, r3
 8014278:	e753      	b.n	8014122 <_svfprintf_r+0xda>
 801427a:	231b      	movs	r3, #27
 801427c:	aa1e      	add	r2, sp, #120	; 0x78
 801427e:	189b      	adds	r3, r3, r2
 8014280:	781a      	ldrb	r2, [r3, #0]
 8014282:	2a00      	cmp	r2, #0
 8014284:	d000      	beq.n	8014288 <_svfprintf_r+0x240>
 8014286:	e74c      	b.n	8014122 <_svfprintf_r+0xda>
 8014288:	701d      	strb	r5, [r3, #0]
 801428a:	e74a      	b.n	8014122 <_svfprintf_r+0xda>
 801428c:	2301      	movs	r3, #1
 801428e:	e7f2      	b.n	8014276 <_svfprintf_r+0x22e>
 8014290:	6823      	ldr	r3, [r4, #0]
 8014292:	3404      	adds	r4, #4
 8014294:	9316      	str	r3, [sp, #88]	; 0x58
 8014296:	2b00      	cmp	r3, #0
 8014298:	db00      	blt.n	801429c <_svfprintf_r+0x254>
 801429a:	e742      	b.n	8014122 <_svfprintf_r+0xda>
 801429c:	425b      	negs	r3, r3
 801429e:	9316      	str	r3, [sp, #88]	; 0x58
 80142a0:	2304      	movs	r3, #4
 80142a2:	e7e8      	b.n	8014276 <_svfprintf_r+0x22e>
 80142a4:	231b      	movs	r3, #27
 80142a6:	aa1e      	add	r2, sp, #120	; 0x78
 80142a8:	189b      	adds	r3, r3, r2
 80142aa:	222b      	movs	r2, #43	; 0x2b
 80142ac:	701a      	strb	r2, [r3, #0]
 80142ae:	e738      	b.n	8014122 <_svfprintf_r+0xda>
 80142b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80142b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80142b4:	7812      	ldrb	r2, [r2, #0]
 80142b6:	3301      	adds	r3, #1
 80142b8:	920e      	str	r2, [sp, #56]	; 0x38
 80142ba:	2a2a      	cmp	r2, #42	; 0x2a
 80142bc:	d008      	beq.n	80142d0 <_svfprintf_r+0x288>
 80142be:	2200      	movs	r2, #0
 80142c0:	9208      	str	r2, [sp, #32]
 80142c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80142c4:	001a      	movs	r2, r3
 80142c6:	3930      	subs	r1, #48	; 0x30
 80142c8:	2909      	cmp	r1, #9
 80142ca:	d90c      	bls.n	80142e6 <_svfprintf_r+0x29e>
 80142cc:	9211      	str	r2, [sp, #68]	; 0x44
 80142ce:	e72e      	b.n	801412e <_svfprintf_r+0xe6>
 80142d0:	6821      	ldr	r1, [r4, #0]
 80142d2:	1d22      	adds	r2, r4, #4
 80142d4:	9108      	str	r1, [sp, #32]
 80142d6:	2900      	cmp	r1, #0
 80142d8:	da02      	bge.n	80142e0 <_svfprintf_r+0x298>
 80142da:	2101      	movs	r1, #1
 80142dc:	4249      	negs	r1, r1
 80142de:	9108      	str	r1, [sp, #32]
 80142e0:	0014      	movs	r4, r2
 80142e2:	9311      	str	r3, [sp, #68]	; 0x44
 80142e4:	e71d      	b.n	8014122 <_svfprintf_r+0xda>
 80142e6:	200a      	movs	r0, #10
 80142e8:	9a08      	ldr	r2, [sp, #32]
 80142ea:	4342      	muls	r2, r0
 80142ec:	1852      	adds	r2, r2, r1
 80142ee:	9208      	str	r2, [sp, #32]
 80142f0:	781a      	ldrb	r2, [r3, #0]
 80142f2:	3301      	adds	r3, #1
 80142f4:	920e      	str	r2, [sp, #56]	; 0x38
 80142f6:	e7e4      	b.n	80142c2 <_svfprintf_r+0x27a>
 80142f8:	2380      	movs	r3, #128	; 0x80
 80142fa:	e7bc      	b.n	8014276 <_svfprintf_r+0x22e>
 80142fc:	2300      	movs	r3, #0
 80142fe:	9316      	str	r3, [sp, #88]	; 0x58
 8014300:	220a      	movs	r2, #10
 8014302:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014304:	4353      	muls	r3, r2
 8014306:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014308:	3a30      	subs	r2, #48	; 0x30
 801430a:	18d3      	adds	r3, r2, r3
 801430c:	9316      	str	r3, [sp, #88]	; 0x58
 801430e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014310:	1c5a      	adds	r2, r3, #1
 8014312:	781b      	ldrb	r3, [r3, #0]
 8014314:	9211      	str	r2, [sp, #68]	; 0x44
 8014316:	930e      	str	r3, [sp, #56]	; 0x38
 8014318:	3b30      	subs	r3, #48	; 0x30
 801431a:	2b09      	cmp	r3, #9
 801431c:	d9f0      	bls.n	8014300 <_svfprintf_r+0x2b8>
 801431e:	e7d5      	b.n	80142cc <_svfprintf_r+0x284>
 8014320:	2308      	movs	r3, #8
 8014322:	e7a8      	b.n	8014276 <_svfprintf_r+0x22e>
 8014324:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014326:	781b      	ldrb	r3, [r3, #0]
 8014328:	2b68      	cmp	r3, #104	; 0x68
 801432a:	d105      	bne.n	8014338 <_svfprintf_r+0x2f0>
 801432c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801432e:	3301      	adds	r3, #1
 8014330:	9311      	str	r3, [sp, #68]	; 0x44
 8014332:	2380      	movs	r3, #128	; 0x80
 8014334:	009b      	lsls	r3, r3, #2
 8014336:	e79e      	b.n	8014276 <_svfprintf_r+0x22e>
 8014338:	2340      	movs	r3, #64	; 0x40
 801433a:	e79c      	b.n	8014276 <_svfprintf_r+0x22e>
 801433c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	2b6c      	cmp	r3, #108	; 0x6c
 8014342:	d104      	bne.n	801434e <_svfprintf_r+0x306>
 8014344:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014346:	3301      	adds	r3, #1
 8014348:	9311      	str	r3, [sp, #68]	; 0x44
 801434a:	432e      	orrs	r6, r5
 801434c:	e6e9      	b.n	8014122 <_svfprintf_r+0xda>
 801434e:	2310      	movs	r3, #16
 8014350:	e791      	b.n	8014276 <_svfprintf_r+0x22e>
 8014352:	1d23      	adds	r3, r4, #4
 8014354:	6822      	ldr	r2, [r4, #0]
 8014356:	9312      	str	r3, [sp, #72]	; 0x48
 8014358:	ab3f      	add	r3, sp, #252	; 0xfc
 801435a:	701a      	strb	r2, [r3, #0]
 801435c:	221b      	movs	r2, #27
 801435e:	2000      	movs	r0, #0
 8014360:	a91e      	add	r1, sp, #120	; 0x78
 8014362:	1852      	adds	r2, r2, r1
 8014364:	7010      	strb	r0, [r2, #0]
 8014366:	2201      	movs	r2, #1
 8014368:	0005      	movs	r5, r0
 801436a:	900c      	str	r0, [sp, #48]	; 0x30
 801436c:	9208      	str	r2, [sp, #32]
 801436e:	9017      	str	r0, [sp, #92]	; 0x5c
 8014370:	9010      	str	r0, [sp, #64]	; 0x40
 8014372:	900f      	str	r0, [sp, #60]	; 0x3c
 8014374:	9309      	str	r3, [sp, #36]	; 0x24
 8014376:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014378:	9a08      	ldr	r2, [sp, #32]
 801437a:	9318      	str	r3, [sp, #96]	; 0x60
 801437c:	4293      	cmp	r3, r2
 801437e:	da00      	bge.n	8014382 <_svfprintf_r+0x33a>
 8014380:	9218      	str	r2, [sp, #96]	; 0x60
 8014382:	231b      	movs	r3, #27
 8014384:	aa1e      	add	r2, sp, #120	; 0x78
 8014386:	189b      	adds	r3, r3, r2
 8014388:	781b      	ldrb	r3, [r3, #0]
 801438a:	1e5a      	subs	r2, r3, #1
 801438c:	4193      	sbcs	r3, r2
 801438e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014390:	18d3      	adds	r3, r2, r3
 8014392:	9318      	str	r3, [sp, #96]	; 0x60
 8014394:	2302      	movs	r3, #2
 8014396:	4033      	ands	r3, r6
 8014398:	9320      	str	r3, [sp, #128]	; 0x80
 801439a:	d002      	beq.n	80143a2 <_svfprintf_r+0x35a>
 801439c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801439e:	3302      	adds	r3, #2
 80143a0:	9318      	str	r3, [sp, #96]	; 0x60
 80143a2:	2384      	movs	r3, #132	; 0x84
 80143a4:	4033      	ands	r3, r6
 80143a6:	9321      	str	r3, [sp, #132]	; 0x84
 80143a8:	d121      	bne.n	80143ee <_svfprintf_r+0x3a6>
 80143aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80143ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80143ae:	1a9c      	subs	r4, r3, r2
 80143b0:	2c00      	cmp	r4, #0
 80143b2:	dd1c      	ble.n	80143ee <_svfprintf_r+0x3a6>
 80143b4:	0039      	movs	r1, r7
 80143b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80143b8:	485d      	ldr	r0, [pc, #372]	; (8014530 <_svfprintf_r+0x4e8>)
 80143ba:	9322      	str	r3, [sp, #136]	; 0x88
 80143bc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80143be:	3301      	adds	r3, #1
 80143c0:	3108      	adds	r1, #8
 80143c2:	6038      	str	r0, [r7, #0]
 80143c4:	2c10      	cmp	r4, #16
 80143c6:	dd01      	ble.n	80143cc <_svfprintf_r+0x384>
 80143c8:	f000 fd08 	bl	8014ddc <_svfprintf_r+0xd94>
 80143cc:	607c      	str	r4, [r7, #4]
 80143ce:	18a4      	adds	r4, r4, r2
 80143d0:	942e      	str	r4, [sp, #184]	; 0xb8
 80143d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80143d4:	000f      	movs	r7, r1
 80143d6:	2b07      	cmp	r3, #7
 80143d8:	dd09      	ble.n	80143ee <_svfprintf_r+0x3a6>
 80143da:	aa2c      	add	r2, sp, #176	; 0xb0
 80143dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80143e0:	f002 ff86 	bl	80172f0 <__ssprint_r>
 80143e4:	2800      	cmp	r0, #0
 80143e6:	d001      	beq.n	80143ec <_svfprintf_r+0x3a4>
 80143e8:	f001 f852 	bl	8015490 <_svfprintf_r+0x1448>
 80143ec:	af2f      	add	r7, sp, #188	; 0xbc
 80143ee:	231b      	movs	r3, #27
 80143f0:	aa1e      	add	r2, sp, #120	; 0x78
 80143f2:	189b      	adds	r3, r3, r2
 80143f4:	781a      	ldrb	r2, [r3, #0]
 80143f6:	2a00      	cmp	r2, #0
 80143f8:	d017      	beq.n	801442a <_svfprintf_r+0x3e2>
 80143fa:	603b      	str	r3, [r7, #0]
 80143fc:	2301      	movs	r3, #1
 80143fe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014400:	607b      	str	r3, [r7, #4]
 8014402:	0013      	movs	r3, r2
 8014404:	3301      	adds	r3, #1
 8014406:	932e      	str	r3, [sp, #184]	; 0xb8
 8014408:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801440a:	3708      	adds	r7, #8
 801440c:	9322      	str	r3, [sp, #136]	; 0x88
 801440e:	3301      	adds	r3, #1
 8014410:	932d      	str	r3, [sp, #180]	; 0xb4
 8014412:	2b07      	cmp	r3, #7
 8014414:	dd09      	ble.n	801442a <_svfprintf_r+0x3e2>
 8014416:	aa2c      	add	r2, sp, #176	; 0xb0
 8014418:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801441a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801441c:	f002 ff68 	bl	80172f0 <__ssprint_r>
 8014420:	2800      	cmp	r0, #0
 8014422:	d001      	beq.n	8014428 <_svfprintf_r+0x3e0>
 8014424:	f001 f834 	bl	8015490 <_svfprintf_r+0x1448>
 8014428:	af2f      	add	r7, sp, #188	; 0xbc
 801442a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801442c:	2b00      	cmp	r3, #0
 801442e:	d019      	beq.n	8014464 <_svfprintf_r+0x41c>
 8014430:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014432:	9320      	str	r3, [sp, #128]	; 0x80
 8014434:	ab25      	add	r3, sp, #148	; 0x94
 8014436:	603b      	str	r3, [r7, #0]
 8014438:	2302      	movs	r3, #2
 801443a:	607b      	str	r3, [r7, #4]
 801443c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801443e:	3708      	adds	r7, #8
 8014440:	3302      	adds	r3, #2
 8014442:	932e      	str	r3, [sp, #184]	; 0xb8
 8014444:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014446:	9320      	str	r3, [sp, #128]	; 0x80
 8014448:	3301      	adds	r3, #1
 801444a:	932d      	str	r3, [sp, #180]	; 0xb4
 801444c:	2b07      	cmp	r3, #7
 801444e:	dd09      	ble.n	8014464 <_svfprintf_r+0x41c>
 8014450:	aa2c      	add	r2, sp, #176	; 0xb0
 8014452:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014454:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014456:	f002 ff4b 	bl	80172f0 <__ssprint_r>
 801445a:	2800      	cmp	r0, #0
 801445c:	d001      	beq.n	8014462 <_svfprintf_r+0x41a>
 801445e:	f001 f817 	bl	8015490 <_svfprintf_r+0x1448>
 8014462:	af2f      	add	r7, sp, #188	; 0xbc
 8014464:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014466:	2b80      	cmp	r3, #128	; 0x80
 8014468:	d121      	bne.n	80144ae <_svfprintf_r+0x466>
 801446a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801446c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801446e:	1a9c      	subs	r4, r3, r2
 8014470:	2c00      	cmp	r4, #0
 8014472:	dd1c      	ble.n	80144ae <_svfprintf_r+0x466>
 8014474:	0039      	movs	r1, r7
 8014476:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014478:	482e      	ldr	r0, [pc, #184]	; (8014534 <_svfprintf_r+0x4ec>)
 801447a:	9320      	str	r3, [sp, #128]	; 0x80
 801447c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801447e:	3301      	adds	r3, #1
 8014480:	3108      	adds	r1, #8
 8014482:	6038      	str	r0, [r7, #0]
 8014484:	2c10      	cmp	r4, #16
 8014486:	dd01      	ble.n	801448c <_svfprintf_r+0x444>
 8014488:	f000 fcbc 	bl	8014e04 <_svfprintf_r+0xdbc>
 801448c:	607c      	str	r4, [r7, #4]
 801448e:	18a4      	adds	r4, r4, r2
 8014490:	942e      	str	r4, [sp, #184]	; 0xb8
 8014492:	932d      	str	r3, [sp, #180]	; 0xb4
 8014494:	000f      	movs	r7, r1
 8014496:	2b07      	cmp	r3, #7
 8014498:	dd09      	ble.n	80144ae <_svfprintf_r+0x466>
 801449a:	aa2c      	add	r2, sp, #176	; 0xb0
 801449c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801449e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144a0:	f002 ff26 	bl	80172f0 <__ssprint_r>
 80144a4:	2800      	cmp	r0, #0
 80144a6:	d001      	beq.n	80144ac <_svfprintf_r+0x464>
 80144a8:	f000 fff2 	bl	8015490 <_svfprintf_r+0x1448>
 80144ac:	af2f      	add	r7, sp, #188	; 0xbc
 80144ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144b0:	9a08      	ldr	r2, [sp, #32]
 80144b2:	1a9c      	subs	r4, r3, r2
 80144b4:	2c00      	cmp	r4, #0
 80144b6:	dd1c      	ble.n	80144f2 <_svfprintf_r+0x4aa>
 80144b8:	0039      	movs	r1, r7
 80144ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80144bc:	481d      	ldr	r0, [pc, #116]	; (8014534 <_svfprintf_r+0x4ec>)
 80144be:	9317      	str	r3, [sp, #92]	; 0x5c
 80144c0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80144c2:	3301      	adds	r3, #1
 80144c4:	3108      	adds	r1, #8
 80144c6:	6038      	str	r0, [r7, #0]
 80144c8:	2c10      	cmp	r4, #16
 80144ca:	dd01      	ble.n	80144d0 <_svfprintf_r+0x488>
 80144cc:	f000 fcb4 	bl	8014e38 <_svfprintf_r+0xdf0>
 80144d0:	18a2      	adds	r2, r4, r2
 80144d2:	607c      	str	r4, [r7, #4]
 80144d4:	922e      	str	r2, [sp, #184]	; 0xb8
 80144d6:	932d      	str	r3, [sp, #180]	; 0xb4
 80144d8:	000f      	movs	r7, r1
 80144da:	2b07      	cmp	r3, #7
 80144dc:	dd09      	ble.n	80144f2 <_svfprintf_r+0x4aa>
 80144de:	aa2c      	add	r2, sp, #176	; 0xb0
 80144e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80144e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144e4:	f002 ff04 	bl	80172f0 <__ssprint_r>
 80144e8:	2800      	cmp	r0, #0
 80144ea:	d001      	beq.n	80144f0 <_svfprintf_r+0x4a8>
 80144ec:	f000 ffd0 	bl	8015490 <_svfprintf_r+0x1448>
 80144f0:	af2f      	add	r7, sp, #188	; 0xbc
 80144f2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80144f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80144f6:	05f3      	lsls	r3, r6, #23
 80144f8:	d501      	bpl.n	80144fe <_svfprintf_r+0x4b6>
 80144fa:	f000 fcb1 	bl	8014e60 <_svfprintf_r+0xe18>
 80144fe:	9a08      	ldr	r2, [sp, #32]
 8014500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014502:	4694      	mov	ip, r2
 8014504:	603b      	str	r3, [r7, #0]
 8014506:	9b08      	ldr	r3, [sp, #32]
 8014508:	607b      	str	r3, [r7, #4]
 801450a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801450c:	4463      	add	r3, ip
 801450e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014510:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014512:	9308      	str	r3, [sp, #32]
 8014514:	3301      	adds	r3, #1
 8014516:	932d      	str	r3, [sp, #180]	; 0xb4
 8014518:	2b07      	cmp	r3, #7
 801451a:	dd01      	ble.n	8014520 <_svfprintf_r+0x4d8>
 801451c:	f000 fd94 	bl	8015048 <_svfprintf_r+0x1000>
 8014520:	3708      	adds	r7, #8
 8014522:	f000 fce4 	bl	8014eee <_svfprintf_r+0xea6>
 8014526:	46c0      	nop			; (mov r8, r8)
 8014528:	0801a631 	.word	0x0801a631
 801452c:	fffffbff 	.word	0xfffffbff
 8014530:	0801a644 	.word	0x0801a644
 8014534:	0801a654 	.word	0x0801a654
 8014538:	2310      	movs	r3, #16
 801453a:	431e      	orrs	r6, r3
 801453c:	06b3      	lsls	r3, r6, #26
 801453e:	d52c      	bpl.n	801459a <_svfprintf_r+0x552>
 8014540:	2307      	movs	r3, #7
 8014542:	3407      	adds	r4, #7
 8014544:	439c      	bics	r4, r3
 8014546:	0023      	movs	r3, r4
 8014548:	3308      	adds	r3, #8
 801454a:	9312      	str	r3, [sp, #72]	; 0x48
 801454c:	6823      	ldr	r3, [r4, #0]
 801454e:	6864      	ldr	r4, [r4, #4]
 8014550:	9306      	str	r3, [sp, #24]
 8014552:	9407      	str	r4, [sp, #28]
 8014554:	9b07      	ldr	r3, [sp, #28]
 8014556:	2b00      	cmp	r3, #0
 8014558:	da0b      	bge.n	8014572 <_svfprintf_r+0x52a>
 801455a:	9906      	ldr	r1, [sp, #24]
 801455c:	9a07      	ldr	r2, [sp, #28]
 801455e:	2400      	movs	r4, #0
 8014560:	424b      	negs	r3, r1
 8014562:	4194      	sbcs	r4, r2
 8014564:	9306      	str	r3, [sp, #24]
 8014566:	9407      	str	r4, [sp, #28]
 8014568:	231b      	movs	r3, #27
 801456a:	aa1e      	add	r2, sp, #120	; 0x78
 801456c:	189b      	adds	r3, r3, r2
 801456e:	222d      	movs	r2, #45	; 0x2d
 8014570:	701a      	strb	r2, [r3, #0]
 8014572:	9b08      	ldr	r3, [sp, #32]
 8014574:	3301      	adds	r3, #1
 8014576:	d000      	beq.n	801457a <_svfprintf_r+0x532>
 8014578:	e382      	b.n	8014c80 <_svfprintf_r+0xc38>
 801457a:	9b07      	ldr	r3, [sp, #28]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d000      	beq.n	8014582 <_svfprintf_r+0x53a>
 8014580:	e3b0      	b.n	8014ce4 <_svfprintf_r+0xc9c>
 8014582:	9b06      	ldr	r3, [sp, #24]
 8014584:	2b09      	cmp	r3, #9
 8014586:	d900      	bls.n	801458a <_svfprintf_r+0x542>
 8014588:	e3ac      	b.n	8014ce4 <_svfprintf_r+0xc9c>
 801458a:	23e7      	movs	r3, #231	; 0xe7
 801458c:	aa1e      	add	r2, sp, #120	; 0x78
 801458e:	189b      	adds	r3, r3, r2
 8014590:	9a06      	ldr	r2, [sp, #24]
 8014592:	3230      	adds	r2, #48	; 0x30
 8014594:	701a      	strb	r2, [r3, #0]
 8014596:	9309      	str	r3, [sp, #36]	; 0x24
 8014598:	e395      	b.n	8014cc6 <_svfprintf_r+0xc7e>
 801459a:	1d23      	adds	r3, r4, #4
 801459c:	9312      	str	r3, [sp, #72]	; 0x48
 801459e:	06f3      	lsls	r3, r6, #27
 80145a0:	d504      	bpl.n	80145ac <_svfprintf_r+0x564>
 80145a2:	6823      	ldr	r3, [r4, #0]
 80145a4:	9306      	str	r3, [sp, #24]
 80145a6:	17db      	asrs	r3, r3, #31
 80145a8:	9307      	str	r3, [sp, #28]
 80145aa:	e7d3      	b.n	8014554 <_svfprintf_r+0x50c>
 80145ac:	6823      	ldr	r3, [r4, #0]
 80145ae:	0672      	lsls	r2, r6, #25
 80145b0:	d501      	bpl.n	80145b6 <_svfprintf_r+0x56e>
 80145b2:	b21b      	sxth	r3, r3
 80145b4:	e7f6      	b.n	80145a4 <_svfprintf_r+0x55c>
 80145b6:	05b2      	lsls	r2, r6, #22
 80145b8:	d5f4      	bpl.n	80145a4 <_svfprintf_r+0x55c>
 80145ba:	b25b      	sxtb	r3, r3
 80145bc:	e7f2      	b.n	80145a4 <_svfprintf_r+0x55c>
 80145be:	2307      	movs	r3, #7
 80145c0:	3407      	adds	r4, #7
 80145c2:	439c      	bics	r4, r3
 80145c4:	0023      	movs	r3, r4
 80145c6:	2201      	movs	r2, #1
 80145c8:	3308      	adds	r3, #8
 80145ca:	9312      	str	r3, [sp, #72]	; 0x48
 80145cc:	6823      	ldr	r3, [r4, #0]
 80145ce:	4252      	negs	r2, r2
 80145d0:	931a      	str	r3, [sp, #104]	; 0x68
 80145d2:	6863      	ldr	r3, [r4, #4]
 80145d4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80145d6:	005c      	lsls	r4, r3, #1
 80145d8:	0864      	lsrs	r4, r4, #1
 80145da:	9319      	str	r3, [sp, #100]	; 0x64
 80145dc:	0028      	movs	r0, r5
 80145de:	4bcf      	ldr	r3, [pc, #828]	; (801491c <_svfprintf_r+0x8d4>)
 80145e0:	0021      	movs	r1, r4
 80145e2:	f7ee f9e1 	bl	80029a8 <__aeabi_dcmpun>
 80145e6:	2800      	cmp	r0, #0
 80145e8:	d125      	bne.n	8014636 <_svfprintf_r+0x5ee>
 80145ea:	2201      	movs	r2, #1
 80145ec:	4bcb      	ldr	r3, [pc, #812]	; (801491c <_svfprintf_r+0x8d4>)
 80145ee:	4252      	negs	r2, r2
 80145f0:	0028      	movs	r0, r5
 80145f2:	0021      	movs	r1, r4
 80145f4:	f7eb ff42 	bl	800047c <__aeabi_dcmple>
 80145f8:	2800      	cmp	r0, #0
 80145fa:	d11c      	bne.n	8014636 <_svfprintf_r+0x5ee>
 80145fc:	2200      	movs	r2, #0
 80145fe:	2300      	movs	r3, #0
 8014600:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014602:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014604:	f7eb ff30 	bl	8000468 <__aeabi_dcmplt>
 8014608:	2800      	cmp	r0, #0
 801460a:	d004      	beq.n	8014616 <_svfprintf_r+0x5ce>
 801460c:	231b      	movs	r3, #27
 801460e:	aa1e      	add	r2, sp, #120	; 0x78
 8014610:	189b      	adds	r3, r3, r2
 8014612:	222d      	movs	r2, #45	; 0x2d
 8014614:	701a      	strb	r2, [r3, #0]
 8014616:	4bc2      	ldr	r3, [pc, #776]	; (8014920 <_svfprintf_r+0x8d8>)
 8014618:	9309      	str	r3, [sp, #36]	; 0x24
 801461a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801461c:	2b47      	cmp	r3, #71	; 0x47
 801461e:	dc01      	bgt.n	8014624 <_svfprintf_r+0x5dc>
 8014620:	4bc0      	ldr	r3, [pc, #768]	; (8014924 <_svfprintf_r+0x8dc>)
 8014622:	9309      	str	r3, [sp, #36]	; 0x24
 8014624:	2380      	movs	r3, #128	; 0x80
 8014626:	439e      	bics	r6, r3
 8014628:	2300      	movs	r3, #0
 801462a:	930c      	str	r3, [sp, #48]	; 0x30
 801462c:	3303      	adds	r3, #3
 801462e:	9308      	str	r3, [sp, #32]
 8014630:	2300      	movs	r3, #0
 8014632:	9317      	str	r3, [sp, #92]	; 0x5c
 8014634:	e34f      	b.n	8014cd6 <_svfprintf_r+0xc8e>
 8014636:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014638:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801463a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801463c:	9919      	ldr	r1, [sp, #100]	; 0x64
 801463e:	f7ee f9b3 	bl	80029a8 <__aeabi_dcmpun>
 8014642:	2800      	cmp	r0, #0
 8014644:	d00e      	beq.n	8014664 <_svfprintf_r+0x61c>
 8014646:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014648:	2b00      	cmp	r3, #0
 801464a:	da04      	bge.n	8014656 <_svfprintf_r+0x60e>
 801464c:	231b      	movs	r3, #27
 801464e:	aa1e      	add	r2, sp, #120	; 0x78
 8014650:	189b      	adds	r3, r3, r2
 8014652:	222d      	movs	r2, #45	; 0x2d
 8014654:	701a      	strb	r2, [r3, #0]
 8014656:	4bb4      	ldr	r3, [pc, #720]	; (8014928 <_svfprintf_r+0x8e0>)
 8014658:	9309      	str	r3, [sp, #36]	; 0x24
 801465a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801465c:	2b47      	cmp	r3, #71	; 0x47
 801465e:	dce1      	bgt.n	8014624 <_svfprintf_r+0x5dc>
 8014660:	4bb2      	ldr	r3, [pc, #712]	; (801492c <_svfprintf_r+0x8e4>)
 8014662:	e7de      	b.n	8014622 <_svfprintf_r+0x5da>
 8014664:	2320      	movs	r3, #32
 8014666:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014668:	439a      	bics	r2, r3
 801466a:	920f      	str	r2, [sp, #60]	; 0x3c
 801466c:	2a41      	cmp	r2, #65	; 0x41
 801466e:	d124      	bne.n	80146ba <_svfprintf_r+0x672>
 8014670:	2230      	movs	r2, #48	; 0x30
 8014672:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014674:	ab25      	add	r3, sp, #148	; 0x94
 8014676:	701a      	strb	r2, [r3, #0]
 8014678:	3228      	adds	r2, #40	; 0x28
 801467a:	2961      	cmp	r1, #97	; 0x61
 801467c:	d100      	bne.n	8014680 <_svfprintf_r+0x638>
 801467e:	3220      	adds	r2, #32
 8014680:	705a      	strb	r2, [r3, #1]
 8014682:	2302      	movs	r3, #2
 8014684:	431e      	orrs	r6, r3
 8014686:	9b08      	ldr	r3, [sp, #32]
 8014688:	2b63      	cmp	r3, #99	; 0x63
 801468a:	dc00      	bgt.n	801468e <_svfprintf_r+0x646>
 801468c:	e09e      	b.n	80147cc <_svfprintf_r+0x784>
 801468e:	1c59      	adds	r1, r3, #1
 8014690:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014692:	f7fe f913 	bl	80128bc <_malloc_r>
 8014696:	9009      	str	r0, [sp, #36]	; 0x24
 8014698:	2800      	cmp	r0, #0
 801469a:	d000      	beq.n	801469e <_svfprintf_r+0x656>
 801469c:	e09b      	b.n	80147d6 <_svfprintf_r+0x78e>
 801469e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146a0:	899a      	ldrh	r2, [r3, #12]
 80146a2:	2340      	movs	r3, #64	; 0x40
 80146a4:	4313      	orrs	r3, r2
 80146a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80146a8:	8193      	strh	r3, [r2, #12]
 80146aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146ac:	899b      	ldrh	r3, [r3, #12]
 80146ae:	065b      	lsls	r3, r3, #25
 80146b0:	d400      	bmi.n	80146b4 <_svfprintf_r+0x66c>
 80146b2:	e4ee      	b.n	8014092 <_svfprintf_r+0x4a>
 80146b4:	2301      	movs	r3, #1
 80146b6:	425b      	negs	r3, r3
 80146b8:	e4ea      	b.n	8014090 <_svfprintf_r+0x48>
 80146ba:	9b08      	ldr	r3, [sp, #32]
 80146bc:	900c      	str	r0, [sp, #48]	; 0x30
 80146be:	3301      	adds	r3, #1
 80146c0:	d100      	bne.n	80146c4 <_svfprintf_r+0x67c>
 80146c2:	e08b      	b.n	80147dc <_svfprintf_r+0x794>
 80146c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146c6:	2b47      	cmp	r3, #71	; 0x47
 80146c8:	d103      	bne.n	80146d2 <_svfprintf_r+0x68a>
 80146ca:	9b08      	ldr	r3, [sp, #32]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d100      	bne.n	80146d2 <_svfprintf_r+0x68a>
 80146d0:	e087      	b.n	80147e2 <_svfprintf_r+0x79a>
 80146d2:	2380      	movs	r3, #128	; 0x80
 80146d4:	005b      	lsls	r3, r3, #1
 80146d6:	4333      	orrs	r3, r6
 80146d8:	9320      	str	r3, [sp, #128]	; 0x80
 80146da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80146dc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80146de:	2b00      	cmp	r3, #0
 80146e0:	db00      	blt.n	80146e4 <_svfprintf_r+0x69c>
 80146e2:	e082      	b.n	80147ea <_svfprintf_r+0x7a2>
 80146e4:	2280      	movs	r2, #128	; 0x80
 80146e6:	0612      	lsls	r2, r2, #24
 80146e8:	4694      	mov	ip, r2
 80146ea:	4463      	add	r3, ip
 80146ec:	930d      	str	r3, [sp, #52]	; 0x34
 80146ee:	232d      	movs	r3, #45	; 0x2d
 80146f0:	9322      	str	r3, [sp, #136]	; 0x88
 80146f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146f4:	2b41      	cmp	r3, #65	; 0x41
 80146f6:	d000      	beq.n	80146fa <_svfprintf_r+0x6b2>
 80146f8:	e105      	b.n	8014906 <_svfprintf_r+0x8be>
 80146fa:	aa26      	add	r2, sp, #152	; 0x98
 80146fc:	0020      	movs	r0, r4
 80146fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014700:	f002 fdc4 	bl	801728c <frexp>
 8014704:	23ff      	movs	r3, #255	; 0xff
 8014706:	2200      	movs	r2, #0
 8014708:	059b      	lsls	r3, r3, #22
 801470a:	f7ed fb93 	bl	8001e34 <__aeabi_dmul>
 801470e:	2200      	movs	r2, #0
 8014710:	2300      	movs	r3, #0
 8014712:	0004      	movs	r4, r0
 8014714:	000d      	movs	r5, r1
 8014716:	f7eb fea1 	bl	800045c <__aeabi_dcmpeq>
 801471a:	2800      	cmp	r0, #0
 801471c:	d001      	beq.n	8014722 <_svfprintf_r+0x6da>
 801471e:	2301      	movs	r3, #1
 8014720:	9326      	str	r3, [sp, #152]	; 0x98
 8014722:	4b83      	ldr	r3, [pc, #524]	; (8014930 <_svfprintf_r+0x8e8>)
 8014724:	9317      	str	r3, [sp, #92]	; 0x5c
 8014726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014728:	2b61      	cmp	r3, #97	; 0x61
 801472a:	d101      	bne.n	8014730 <_svfprintf_r+0x6e8>
 801472c:	4b81      	ldr	r3, [pc, #516]	; (8014934 <_svfprintf_r+0x8ec>)
 801472e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014730:	9b08      	ldr	r3, [sp, #32]
 8014732:	3b01      	subs	r3, #1
 8014734:	9310      	str	r3, [sp, #64]	; 0x40
 8014736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014738:	9318      	str	r3, [sp, #96]	; 0x60
 801473a:	2200      	movs	r2, #0
 801473c:	4b7e      	ldr	r3, [pc, #504]	; (8014938 <_svfprintf_r+0x8f0>)
 801473e:	0020      	movs	r0, r4
 8014740:	0029      	movs	r1, r5
 8014742:	f7ed fb77 	bl	8001e34 <__aeabi_dmul>
 8014746:	000d      	movs	r5, r1
 8014748:	0004      	movs	r4, r0
 801474a:	f7ee f949 	bl	80029e0 <__aeabi_d2iz>
 801474e:	9021      	str	r0, [sp, #132]	; 0x84
 8014750:	f7ee f97c 	bl	8002a4c <__aeabi_i2d>
 8014754:	0002      	movs	r2, r0
 8014756:	000b      	movs	r3, r1
 8014758:	0020      	movs	r0, r4
 801475a:	0029      	movs	r1, r5
 801475c:	f7ed fddc 	bl	8002318 <__aeabi_dsub>
 8014760:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014762:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014764:	3301      	adds	r3, #1
 8014766:	930d      	str	r3, [sp, #52]	; 0x34
 8014768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801476a:	0004      	movs	r4, r0
 801476c:	5c9b      	ldrb	r3, [r3, r2]
 801476e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014770:	000d      	movs	r5, r1
 8014772:	7013      	strb	r3, [r2, #0]
 8014774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014776:	9323      	str	r3, [sp, #140]	; 0x8c
 8014778:	3301      	adds	r3, #1
 801477a:	d00a      	beq.n	8014792 <_svfprintf_r+0x74a>
 801477c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801477e:	2200      	movs	r2, #0
 8014780:	3b01      	subs	r3, #1
 8014782:	9310      	str	r3, [sp, #64]	; 0x40
 8014784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014786:	9318      	str	r3, [sp, #96]	; 0x60
 8014788:	2300      	movs	r3, #0
 801478a:	f7eb fe67 	bl	800045c <__aeabi_dcmpeq>
 801478e:	2800      	cmp	r0, #0
 8014790:	d0d3      	beq.n	801473a <_svfprintf_r+0x6f2>
 8014792:	2200      	movs	r2, #0
 8014794:	4b69      	ldr	r3, [pc, #420]	; (801493c <_svfprintf_r+0x8f4>)
 8014796:	0020      	movs	r0, r4
 8014798:	0029      	movs	r1, r5
 801479a:	f7eb fe79 	bl	8000490 <__aeabi_dcmpgt>
 801479e:	2800      	cmp	r0, #0
 80147a0:	d126      	bne.n	80147f0 <_svfprintf_r+0x7a8>
 80147a2:	2200      	movs	r2, #0
 80147a4:	4b65      	ldr	r3, [pc, #404]	; (801493c <_svfprintf_r+0x8f4>)
 80147a6:	0020      	movs	r0, r4
 80147a8:	0029      	movs	r1, r5
 80147aa:	f7eb fe57 	bl	800045c <__aeabi_dcmpeq>
 80147ae:	2800      	cmp	r0, #0
 80147b0:	d002      	beq.n	80147b8 <_svfprintf_r+0x770>
 80147b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147b4:	07db      	lsls	r3, r3, #31
 80147b6:	d41b      	bmi.n	80147f0 <_svfprintf_r+0x7a8>
 80147b8:	2130      	movs	r1, #48	; 0x30
 80147ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80147bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80147be:	1898      	adds	r0, r3, r2
 80147c0:	930d      	str	r3, [sp, #52]	; 0x34
 80147c2:	1ac2      	subs	r2, r0, r3
 80147c4:	d426      	bmi.n	8014814 <_svfprintf_r+0x7cc>
 80147c6:	7019      	strb	r1, [r3, #0]
 80147c8:	3301      	adds	r3, #1
 80147ca:	e7f9      	b.n	80147c0 <_svfprintf_r+0x778>
 80147cc:	2300      	movs	r3, #0
 80147ce:	930c      	str	r3, [sp, #48]	; 0x30
 80147d0:	ab3f      	add	r3, sp, #252	; 0xfc
 80147d2:	9309      	str	r3, [sp, #36]	; 0x24
 80147d4:	e77d      	b.n	80146d2 <_svfprintf_r+0x68a>
 80147d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147d8:	930c      	str	r3, [sp, #48]	; 0x30
 80147da:	e77a      	b.n	80146d2 <_svfprintf_r+0x68a>
 80147dc:	2306      	movs	r3, #6
 80147de:	9308      	str	r3, [sp, #32]
 80147e0:	e777      	b.n	80146d2 <_svfprintf_r+0x68a>
 80147e2:	9b08      	ldr	r3, [sp, #32]
 80147e4:	930c      	str	r3, [sp, #48]	; 0x30
 80147e6:	2301      	movs	r3, #1
 80147e8:	e7f9      	b.n	80147de <_svfprintf_r+0x796>
 80147ea:	930d      	str	r3, [sp, #52]	; 0x34
 80147ec:	2300      	movs	r3, #0
 80147ee:	e77f      	b.n	80146f0 <_svfprintf_r+0x6a8>
 80147f0:	2030      	movs	r0, #48	; 0x30
 80147f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80147f4:	932a      	str	r3, [sp, #168]	; 0xa8
 80147f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80147f8:	7bda      	ldrb	r2, [r3, #15]
 80147fa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80147fc:	3b01      	subs	r3, #1
 80147fe:	932a      	str	r3, [sp, #168]	; 0xa8
 8014800:	7819      	ldrb	r1, [r3, #0]
 8014802:	4291      	cmp	r1, r2
 8014804:	d07d      	beq.n	8014902 <_svfprintf_r+0x8ba>
 8014806:	1c4a      	adds	r2, r1, #1
 8014808:	b2d2      	uxtb	r2, r2
 801480a:	2939      	cmp	r1, #57	; 0x39
 801480c:	d101      	bne.n	8014812 <_svfprintf_r+0x7ca>
 801480e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014810:	7a92      	ldrb	r2, [r2, #10]
 8014812:	701a      	strb	r2, [r3, #0]
 8014814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014818:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801481a:	1a9b      	subs	r3, r3, r2
 801481c:	930d      	str	r3, [sp, #52]	; 0x34
 801481e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014820:	2b47      	cmp	r3, #71	; 0x47
 8014822:	d000      	beq.n	8014826 <_svfprintf_r+0x7de>
 8014824:	e0d2      	b.n	80149cc <_svfprintf_r+0x984>
 8014826:	1ceb      	adds	r3, r5, #3
 8014828:	db03      	blt.n	8014832 <_svfprintf_r+0x7ea>
 801482a:	9b08      	ldr	r3, [sp, #32]
 801482c:	42ab      	cmp	r3, r5
 801482e:	db00      	blt.n	8014832 <_svfprintf_r+0x7ea>
 8014830:	e0fd      	b.n	8014a2e <_svfprintf_r+0x9e6>
 8014832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014834:	3b02      	subs	r3, #2
 8014836:	930e      	str	r3, [sp, #56]	; 0x38
 8014838:	2238      	movs	r2, #56	; 0x38
 801483a:	466b      	mov	r3, sp
 801483c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801483e:	189b      	adds	r3, r3, r2
 8014840:	3a18      	subs	r2, #24
 8014842:	4391      	bics	r1, r2
 8014844:	1e6c      	subs	r4, r5, #1
 8014846:	000a      	movs	r2, r1
 8014848:	9426      	str	r4, [sp, #152]	; 0x98
 801484a:	781b      	ldrb	r3, [r3, #0]
 801484c:	2100      	movs	r1, #0
 801484e:	2a41      	cmp	r2, #65	; 0x41
 8014850:	d102      	bne.n	8014858 <_svfprintf_r+0x810>
 8014852:	330f      	adds	r3, #15
 8014854:	b2db      	uxtb	r3, r3
 8014856:	3101      	adds	r1, #1
 8014858:	aa28      	add	r2, sp, #160	; 0xa0
 801485a:	7013      	strb	r3, [r2, #0]
 801485c:	232b      	movs	r3, #43	; 0x2b
 801485e:	2c00      	cmp	r4, #0
 8014860:	da02      	bge.n	8014868 <_svfprintf_r+0x820>
 8014862:	2401      	movs	r4, #1
 8014864:	232d      	movs	r3, #45	; 0x2d
 8014866:	1b64      	subs	r4, r4, r5
 8014868:	7053      	strb	r3, [r2, #1]
 801486a:	2c09      	cmp	r4, #9
 801486c:	dc00      	bgt.n	8014870 <_svfprintf_r+0x828>
 801486e:	e0c7      	b.n	8014a00 <_svfprintf_r+0x9b8>
 8014870:	2537      	movs	r5, #55	; 0x37
 8014872:	ab1e      	add	r3, sp, #120	; 0x78
 8014874:	18ed      	adds	r5, r5, r3
 8014876:	1e6b      	subs	r3, r5, #1
 8014878:	0020      	movs	r0, r4
 801487a:	210a      	movs	r1, #10
 801487c:	9308      	str	r3, [sp, #32]
 801487e:	f7eb fdd7 	bl	8000430 <__aeabi_idivmod>
 8014882:	1e6b      	subs	r3, r5, #1
 8014884:	3130      	adds	r1, #48	; 0x30
 8014886:	7019      	strb	r1, [r3, #0]
 8014888:	0020      	movs	r0, r4
 801488a:	210a      	movs	r1, #10
 801488c:	f7eb fcea 	bl	8000264 <__divsi3>
 8014890:	0004      	movs	r4, r0
 8014892:	2809      	cmp	r0, #9
 8014894:	dd00      	ble.n	8014898 <_svfprintf_r+0x850>
 8014896:	e0ac      	b.n	80149f2 <_svfprintf_r+0x9aa>
 8014898:	232a      	movs	r3, #42	; 0x2a
 801489a:	2137      	movs	r1, #55	; 0x37
 801489c:	aa1e      	add	r2, sp, #120	; 0x78
 801489e:	3d02      	subs	r5, #2
 80148a0:	3430      	adds	r4, #48	; 0x30
 80148a2:	702c      	strb	r4, [r5, #0]
 80148a4:	189b      	adds	r3, r3, r2
 80148a6:	1889      	adds	r1, r1, r2
 80148a8:	001a      	movs	r2, r3
 80148aa:	428d      	cmp	r5, r1
 80148ac:	d200      	bcs.n	80148b0 <_svfprintf_r+0x868>
 80148ae:	e0a2      	b.n	80149f6 <_svfprintf_r+0x9ae>
 80148b0:	ab28      	add	r3, sp, #160	; 0xa0
 80148b2:	1ad3      	subs	r3, r2, r3
 80148b4:	931d      	str	r3, [sp, #116]	; 0x74
 80148b6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80148b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148ba:	4694      	mov	ip, r2
 80148bc:	4463      	add	r3, ip
 80148be:	9308      	str	r3, [sp, #32]
 80148c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148c2:	2b01      	cmp	r3, #1
 80148c4:	dc01      	bgt.n	80148ca <_svfprintf_r+0x882>
 80148c6:	07f3      	lsls	r3, r6, #31
 80148c8:	d504      	bpl.n	80148d4 <_svfprintf_r+0x88c>
 80148ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80148cc:	9b08      	ldr	r3, [sp, #32]
 80148ce:	4694      	mov	ip, r2
 80148d0:	4463      	add	r3, ip
 80148d2:	9308      	str	r3, [sp, #32]
 80148d4:	2280      	movs	r2, #128	; 0x80
 80148d6:	4b1a      	ldr	r3, [pc, #104]	; (8014940 <_svfprintf_r+0x8f8>)
 80148d8:	0052      	lsls	r2, r2, #1
 80148da:	4033      	ands	r3, r6
 80148dc:	431a      	orrs	r2, r3
 80148de:	2300      	movs	r3, #0
 80148e0:	001d      	movs	r5, r3
 80148e2:	9220      	str	r2, [sp, #128]	; 0x80
 80148e4:	9310      	str	r3, [sp, #64]	; 0x40
 80148e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80148e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d100      	bne.n	80148f0 <_svfprintf_r+0x8a8>
 80148ee:	e270      	b.n	8014dd2 <_svfprintf_r+0xd8a>
 80148f0:	231b      	movs	r3, #27
 80148f2:	aa1e      	add	r2, sp, #120	; 0x78
 80148f4:	189b      	adds	r3, r3, r2
 80148f6:	222d      	movs	r2, #45	; 0x2d
 80148f8:	701a      	strb	r2, [r3, #0]
 80148fa:	2300      	movs	r3, #0
 80148fc:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80148fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8014900:	e539      	b.n	8014376 <_svfprintf_r+0x32e>
 8014902:	7018      	strb	r0, [r3, #0]
 8014904:	e779      	b.n	80147fa <_svfprintf_r+0x7b2>
 8014906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014908:	2b46      	cmp	r3, #70	; 0x46
 801490a:	d01b      	beq.n	8014944 <_svfprintf_r+0x8fc>
 801490c:	9d08      	ldr	r5, [sp, #32]
 801490e:	2b45      	cmp	r3, #69	; 0x45
 8014910:	d101      	bne.n	8014916 <_svfprintf_r+0x8ce>
 8014912:	9b08      	ldr	r3, [sp, #32]
 8014914:	1c5d      	adds	r5, r3, #1
 8014916:	2302      	movs	r3, #2
 8014918:	e016      	b.n	8014948 <_svfprintf_r+0x900>
 801491a:	46c0      	nop			; (mov r8, r8)
 801491c:	7fefffff 	.word	0x7fefffff
 8014920:	0801a614 	.word	0x0801a614
 8014924:	0801a610 	.word	0x0801a610
 8014928:	0801a61c 	.word	0x0801a61c
 801492c:	0801a618 	.word	0x0801a618
 8014930:	0801a631 	.word	0x0801a631
 8014934:	0801a620 	.word	0x0801a620
 8014938:	40300000 	.word	0x40300000
 801493c:	3fe00000 	.word	0x3fe00000
 8014940:	fffffbff 	.word	0xfffffbff
 8014944:	2303      	movs	r3, #3
 8014946:	9d08      	ldr	r5, [sp, #32]
 8014948:	aa2a      	add	r2, sp, #168	; 0xa8
 801494a:	9204      	str	r2, [sp, #16]
 801494c:	aa27      	add	r2, sp, #156	; 0x9c
 801494e:	9203      	str	r2, [sp, #12]
 8014950:	aa26      	add	r2, sp, #152	; 0x98
 8014952:	9202      	str	r2, [sp, #8]
 8014954:	9300      	str	r3, [sp, #0]
 8014956:	9501      	str	r5, [sp, #4]
 8014958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801495a:	0022      	movs	r2, r4
 801495c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801495e:	f000 fe79 	bl	8015654 <_dtoa_r>
 8014962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014964:	9009      	str	r0, [sp, #36]	; 0x24
 8014966:	2b47      	cmp	r3, #71	; 0x47
 8014968:	d101      	bne.n	801496e <_svfprintf_r+0x926>
 801496a:	07f3      	lsls	r3, r6, #31
 801496c:	d524      	bpl.n	80149b8 <_svfprintf_r+0x970>
 801496e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014970:	195b      	adds	r3, r3, r5
 8014972:	9310      	str	r3, [sp, #64]	; 0x40
 8014974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014976:	2b46      	cmp	r3, #70	; 0x46
 8014978:	d113      	bne.n	80149a2 <_svfprintf_r+0x95a>
 801497a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801497c:	781b      	ldrb	r3, [r3, #0]
 801497e:	2b30      	cmp	r3, #48	; 0x30
 8014980:	d10a      	bne.n	8014998 <_svfprintf_r+0x950>
 8014982:	2200      	movs	r2, #0
 8014984:	2300      	movs	r3, #0
 8014986:	0020      	movs	r0, r4
 8014988:	990d      	ldr	r1, [sp, #52]	; 0x34
 801498a:	f7eb fd67 	bl	800045c <__aeabi_dcmpeq>
 801498e:	2800      	cmp	r0, #0
 8014990:	d102      	bne.n	8014998 <_svfprintf_r+0x950>
 8014992:	2301      	movs	r3, #1
 8014994:	1b5d      	subs	r5, r3, r5
 8014996:	9526      	str	r5, [sp, #152]	; 0x98
 8014998:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801499a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801499c:	4694      	mov	ip, r2
 801499e:	4463      	add	r3, ip
 80149a0:	9310      	str	r3, [sp, #64]	; 0x40
 80149a2:	2200      	movs	r2, #0
 80149a4:	2300      	movs	r3, #0
 80149a6:	0020      	movs	r0, r4
 80149a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80149aa:	f7eb fd57 	bl	800045c <__aeabi_dcmpeq>
 80149ae:	2230      	movs	r2, #48	; 0x30
 80149b0:	2800      	cmp	r0, #0
 80149b2:	d006      	beq.n	80149c2 <_svfprintf_r+0x97a>
 80149b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80149b6:	932a      	str	r3, [sp, #168]	; 0xa8
 80149b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80149ba:	e72c      	b.n	8014816 <_svfprintf_r+0x7ce>
 80149bc:	1c59      	adds	r1, r3, #1
 80149be:	912a      	str	r1, [sp, #168]	; 0xa8
 80149c0:	701a      	strb	r2, [r3, #0]
 80149c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80149c4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80149c6:	4299      	cmp	r1, r3
 80149c8:	d8f8      	bhi.n	80149bc <_svfprintf_r+0x974>
 80149ca:	e7f5      	b.n	80149b8 <_svfprintf_r+0x970>
 80149cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149ce:	2b46      	cmp	r3, #70	; 0x46
 80149d0:	d000      	beq.n	80149d4 <_svfprintf_r+0x98c>
 80149d2:	e731      	b.n	8014838 <_svfprintf_r+0x7f0>
 80149d4:	9b08      	ldr	r3, [sp, #32]
 80149d6:	2d00      	cmp	r5, #0
 80149d8:	dd21      	ble.n	8014a1e <_svfprintf_r+0x9d6>
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d101      	bne.n	80149e2 <_svfprintf_r+0x99a>
 80149de:	07f3      	lsls	r3, r6, #31
 80149e0:	d54a      	bpl.n	8014a78 <_svfprintf_r+0xa30>
 80149e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80149e4:	18eb      	adds	r3, r5, r3
 80149e6:	9a08      	ldr	r2, [sp, #32]
 80149e8:	18d3      	adds	r3, r2, r3
 80149ea:	9308      	str	r3, [sp, #32]
 80149ec:	2366      	movs	r3, #102	; 0x66
 80149ee:	930e      	str	r3, [sp, #56]	; 0x38
 80149f0:	e034      	b.n	8014a5c <_svfprintf_r+0xa14>
 80149f2:	9d08      	ldr	r5, [sp, #32]
 80149f4:	e73f      	b.n	8014876 <_svfprintf_r+0x82e>
 80149f6:	782a      	ldrb	r2, [r5, #0]
 80149f8:	3501      	adds	r5, #1
 80149fa:	701a      	strb	r2, [r3, #0]
 80149fc:	3301      	adds	r3, #1
 80149fe:	e753      	b.n	80148a8 <_svfprintf_r+0x860>
 8014a00:	232a      	movs	r3, #42	; 0x2a
 8014a02:	aa1e      	add	r2, sp, #120	; 0x78
 8014a04:	189b      	adds	r3, r3, r2
 8014a06:	2900      	cmp	r1, #0
 8014a08:	d105      	bne.n	8014a16 <_svfprintf_r+0x9ce>
 8014a0a:	2230      	movs	r2, #48	; 0x30
 8014a0c:	ab28      	add	r3, sp, #160	; 0xa0
 8014a0e:	709a      	strb	r2, [r3, #2]
 8014a10:	232b      	movs	r3, #43	; 0x2b
 8014a12:	aa1e      	add	r2, sp, #120	; 0x78
 8014a14:	189b      	adds	r3, r3, r2
 8014a16:	3430      	adds	r4, #48	; 0x30
 8014a18:	1c5a      	adds	r2, r3, #1
 8014a1a:	701c      	strb	r4, [r3, #0]
 8014a1c:	e748      	b.n	80148b0 <_svfprintf_r+0x868>
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d102      	bne.n	8014a28 <_svfprintf_r+0x9e0>
 8014a22:	3301      	adds	r3, #1
 8014a24:	421e      	tst	r6, r3
 8014a26:	d029      	beq.n	8014a7c <_svfprintf_r+0xa34>
 8014a28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a2a:	3301      	adds	r3, #1
 8014a2c:	e7db      	b.n	80149e6 <_svfprintf_r+0x99e>
 8014a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a30:	42ab      	cmp	r3, r5
 8014a32:	dc06      	bgt.n	8014a42 <_svfprintf_r+0x9fa>
 8014a34:	07f3      	lsls	r3, r6, #31
 8014a36:	d524      	bpl.n	8014a82 <_svfprintf_r+0xa3a>
 8014a38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a3a:	18eb      	adds	r3, r5, r3
 8014a3c:	9308      	str	r3, [sp, #32]
 8014a3e:	2367      	movs	r3, #103	; 0x67
 8014a40:	e7d5      	b.n	80149ee <_svfprintf_r+0x9a6>
 8014a42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a46:	4694      	mov	ip, r2
 8014a48:	4463      	add	r3, ip
 8014a4a:	9308      	str	r3, [sp, #32]
 8014a4c:	2367      	movs	r3, #103	; 0x67
 8014a4e:	930e      	str	r3, [sp, #56]	; 0x38
 8014a50:	2d00      	cmp	r5, #0
 8014a52:	dc03      	bgt.n	8014a5c <_svfprintf_r+0xa14>
 8014a54:	9b08      	ldr	r3, [sp, #32]
 8014a56:	1b5b      	subs	r3, r3, r5
 8014a58:	3301      	adds	r3, #1
 8014a5a:	9308      	str	r3, [sp, #32]
 8014a5c:	2380      	movs	r3, #128	; 0x80
 8014a5e:	00db      	lsls	r3, r3, #3
 8014a60:	401e      	ands	r6, r3
 8014a62:	2300      	movs	r3, #0
 8014a64:	960f      	str	r6, [sp, #60]	; 0x3c
 8014a66:	9310      	str	r3, [sp, #64]	; 0x40
 8014a68:	2e00      	cmp	r6, #0
 8014a6a:	d100      	bne.n	8014a6e <_svfprintf_r+0xa26>
 8014a6c:	e73c      	b.n	80148e8 <_svfprintf_r+0x8a0>
 8014a6e:	2d00      	cmp	r5, #0
 8014a70:	dc27      	bgt.n	8014ac2 <_svfprintf_r+0xa7a>
 8014a72:	2300      	movs	r3, #0
 8014a74:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a76:	e737      	b.n	80148e8 <_svfprintf_r+0x8a0>
 8014a78:	9508      	str	r5, [sp, #32]
 8014a7a:	e7b7      	b.n	80149ec <_svfprintf_r+0x9a4>
 8014a7c:	2266      	movs	r2, #102	; 0x66
 8014a7e:	920e      	str	r2, [sp, #56]	; 0x38
 8014a80:	e7eb      	b.n	8014a5a <_svfprintf_r+0xa12>
 8014a82:	9508      	str	r5, [sp, #32]
 8014a84:	e7db      	b.n	8014a3e <_svfprintf_r+0x9f6>
 8014a86:	42ab      	cmp	r3, r5
 8014a88:	da0e      	bge.n	8014aa8 <_svfprintf_r+0xa60>
 8014a8a:	1aed      	subs	r5, r5, r3
 8014a8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a8e:	785b      	ldrb	r3, [r3, #1]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d012      	beq.n	8014aba <_svfprintf_r+0xa72>
 8014a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a96:	3301      	adds	r3, #1
 8014a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a9c:	3301      	adds	r3, #1
 8014a9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014aa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014aa2:	781b      	ldrb	r3, [r3, #0]
 8014aa4:	2bff      	cmp	r3, #255	; 0xff
 8014aa6:	d1ee      	bne.n	8014a86 <_svfprintf_r+0xa3e>
 8014aa8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014aaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014aac:	189b      	adds	r3, r3, r2
 8014aae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014ab0:	4353      	muls	r3, r2
 8014ab2:	9a08      	ldr	r2, [sp, #32]
 8014ab4:	189b      	adds	r3, r3, r2
 8014ab6:	9308      	str	r3, [sp, #32]
 8014ab8:	e716      	b.n	80148e8 <_svfprintf_r+0x8a0>
 8014aba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014abc:	3301      	adds	r3, #1
 8014abe:	9310      	str	r3, [sp, #64]	; 0x40
 8014ac0:	e7ee      	b.n	8014aa0 <_svfprintf_r+0xa58>
 8014ac2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ac4:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ac6:	e7eb      	b.n	8014aa0 <_svfprintf_r+0xa58>
 8014ac8:	0022      	movs	r2, r4
 8014aca:	ca08      	ldmia	r2!, {r3}
 8014acc:	9212      	str	r2, [sp, #72]	; 0x48
 8014ace:	06b2      	lsls	r2, r6, #26
 8014ad0:	d508      	bpl.n	8014ae4 <_svfprintf_r+0xa9c>
 8014ad2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014ad4:	601a      	str	r2, [r3, #0]
 8014ad6:	17d2      	asrs	r2, r2, #31
 8014ad8:	605a      	str	r2, [r3, #4]
 8014ada:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014adc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014ade:	9309      	str	r3, [sp, #36]	; 0x24
 8014ae0:	f7ff faeb 	bl	80140ba <_svfprintf_r+0x72>
 8014ae4:	06f2      	lsls	r2, r6, #27
 8014ae6:	d502      	bpl.n	8014aee <_svfprintf_r+0xaa6>
 8014ae8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014aea:	601a      	str	r2, [r3, #0]
 8014aec:	e7f5      	b.n	8014ada <_svfprintf_r+0xa92>
 8014aee:	0672      	lsls	r2, r6, #25
 8014af0:	d502      	bpl.n	8014af8 <_svfprintf_r+0xab0>
 8014af2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014af4:	801a      	strh	r2, [r3, #0]
 8014af6:	e7f0      	b.n	8014ada <_svfprintf_r+0xa92>
 8014af8:	05b2      	lsls	r2, r6, #22
 8014afa:	d5f5      	bpl.n	8014ae8 <_svfprintf_r+0xaa0>
 8014afc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014afe:	701a      	strb	r2, [r3, #0]
 8014b00:	e7eb      	b.n	8014ada <_svfprintf_r+0xa92>
 8014b02:	2310      	movs	r3, #16
 8014b04:	431e      	orrs	r6, r3
 8014b06:	2220      	movs	r2, #32
 8014b08:	4032      	ands	r2, r6
 8014b0a:	d025      	beq.n	8014b58 <_svfprintf_r+0xb10>
 8014b0c:	2307      	movs	r3, #7
 8014b0e:	3407      	adds	r4, #7
 8014b10:	439c      	bics	r4, r3
 8014b12:	0023      	movs	r3, r4
 8014b14:	3308      	adds	r3, #8
 8014b16:	9312      	str	r3, [sp, #72]	; 0x48
 8014b18:	6823      	ldr	r3, [r4, #0]
 8014b1a:	6864      	ldr	r4, [r4, #4]
 8014b1c:	9306      	str	r3, [sp, #24]
 8014b1e:	9407      	str	r4, [sp, #28]
 8014b20:	4bc2      	ldr	r3, [pc, #776]	; (8014e2c <_svfprintf_r+0xde4>)
 8014b22:	401e      	ands	r6, r3
 8014b24:	2300      	movs	r3, #0
 8014b26:	221b      	movs	r2, #27
 8014b28:	a91e      	add	r1, sp, #120	; 0x78
 8014b2a:	1852      	adds	r2, r2, r1
 8014b2c:	2100      	movs	r1, #0
 8014b2e:	7011      	strb	r1, [r2, #0]
 8014b30:	9a08      	ldr	r2, [sp, #32]
 8014b32:	3201      	adds	r2, #1
 8014b34:	d100      	bne.n	8014b38 <_svfprintf_r+0xaf0>
 8014b36:	e0a6      	b.n	8014c86 <_svfprintf_r+0xc3e>
 8014b38:	0032      	movs	r2, r6
 8014b3a:	2180      	movs	r1, #128	; 0x80
 8014b3c:	9807      	ldr	r0, [sp, #28]
 8014b3e:	438e      	bics	r6, r1
 8014b40:	9906      	ldr	r1, [sp, #24]
 8014b42:	4301      	orrs	r1, r0
 8014b44:	d000      	beq.n	8014b48 <_svfprintf_r+0xb00>
 8014b46:	e09e      	b.n	8014c86 <_svfprintf_r+0xc3e>
 8014b48:	9908      	ldr	r1, [sp, #32]
 8014b4a:	2900      	cmp	r1, #0
 8014b4c:	d100      	bne.n	8014b50 <_svfprintf_r+0xb08>
 8014b4e:	e125      	b.n	8014d9c <_svfprintf_r+0xd54>
 8014b50:	2b01      	cmp	r3, #1
 8014b52:	d000      	beq.n	8014b56 <_svfprintf_r+0xb0e>
 8014b54:	e09a      	b.n	8014c8c <_svfprintf_r+0xc44>
 8014b56:	e518      	b.n	801458a <_svfprintf_r+0x542>
 8014b58:	1d23      	adds	r3, r4, #4
 8014b5a:	9312      	str	r3, [sp, #72]	; 0x48
 8014b5c:	2310      	movs	r3, #16
 8014b5e:	4033      	ands	r3, r6
 8014b60:	d003      	beq.n	8014b6a <_svfprintf_r+0xb22>
 8014b62:	6823      	ldr	r3, [r4, #0]
 8014b64:	9306      	str	r3, [sp, #24]
 8014b66:	9207      	str	r2, [sp, #28]
 8014b68:	e7da      	b.n	8014b20 <_svfprintf_r+0xad8>
 8014b6a:	2240      	movs	r2, #64	; 0x40
 8014b6c:	4032      	ands	r2, r6
 8014b6e:	d004      	beq.n	8014b7a <_svfprintf_r+0xb32>
 8014b70:	6822      	ldr	r2, [r4, #0]
 8014b72:	b292      	uxth	r2, r2
 8014b74:	9206      	str	r2, [sp, #24]
 8014b76:	9307      	str	r3, [sp, #28]
 8014b78:	e7d2      	b.n	8014b20 <_svfprintf_r+0xad8>
 8014b7a:	2380      	movs	r3, #128	; 0x80
 8014b7c:	009b      	lsls	r3, r3, #2
 8014b7e:	4033      	ands	r3, r6
 8014b80:	d002      	beq.n	8014b88 <_svfprintf_r+0xb40>
 8014b82:	6823      	ldr	r3, [r4, #0]
 8014b84:	b2db      	uxtb	r3, r3
 8014b86:	e7ed      	b.n	8014b64 <_svfprintf_r+0xb1c>
 8014b88:	6822      	ldr	r2, [r4, #0]
 8014b8a:	e7f3      	b.n	8014b74 <_svfprintf_r+0xb2c>
 8014b8c:	1d23      	adds	r3, r4, #4
 8014b8e:	49a8      	ldr	r1, [pc, #672]	; (8014e30 <_svfprintf_r+0xde8>)
 8014b90:	aa25      	add	r2, sp, #148	; 0x94
 8014b92:	9312      	str	r3, [sp, #72]	; 0x48
 8014b94:	6823      	ldr	r3, [r4, #0]
 8014b96:	8011      	strh	r1, [r2, #0]
 8014b98:	4aa6      	ldr	r2, [pc, #664]	; (8014e34 <_svfprintf_r+0xdec>)
 8014b9a:	9306      	str	r3, [sp, #24]
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	921e      	str	r2, [sp, #120]	; 0x78
 8014ba0:	2278      	movs	r2, #120	; 0x78
 8014ba2:	9307      	str	r3, [sp, #28]
 8014ba4:	3302      	adds	r3, #2
 8014ba6:	431e      	orrs	r6, r3
 8014ba8:	920e      	str	r2, [sp, #56]	; 0x38
 8014baa:	e7bc      	b.n	8014b26 <_svfprintf_r+0xade>
 8014bac:	1d23      	adds	r3, r4, #4
 8014bae:	9312      	str	r3, [sp, #72]	; 0x48
 8014bb0:	6823      	ldr	r3, [r4, #0]
 8014bb2:	2400      	movs	r4, #0
 8014bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8014bb6:	231b      	movs	r3, #27
 8014bb8:	aa1e      	add	r2, sp, #120	; 0x78
 8014bba:	189b      	adds	r3, r3, r2
 8014bbc:	701c      	strb	r4, [r3, #0]
 8014bbe:	9b08      	ldr	r3, [sp, #32]
 8014bc0:	3301      	adds	r3, #1
 8014bc2:	d00e      	beq.n	8014be2 <_svfprintf_r+0xb9a>
 8014bc4:	9a08      	ldr	r2, [sp, #32]
 8014bc6:	0021      	movs	r1, r4
 8014bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014bca:	f001 ff79 	bl	8016ac0 <memchr>
 8014bce:	900c      	str	r0, [sp, #48]	; 0x30
 8014bd0:	42a0      	cmp	r0, r4
 8014bd2:	d100      	bne.n	8014bd6 <_svfprintf_r+0xb8e>
 8014bd4:	e100      	b.n	8014dd8 <_svfprintf_r+0xd90>
 8014bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014bd8:	1a83      	subs	r3, r0, r2
 8014bda:	9308      	str	r3, [sp, #32]
 8014bdc:	940c      	str	r4, [sp, #48]	; 0x30
 8014bde:	0023      	movs	r3, r4
 8014be0:	e527      	b.n	8014632 <_svfprintf_r+0x5ea>
 8014be2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014be4:	f7eb fa98 	bl	8000118 <strlen>
 8014be8:	9008      	str	r0, [sp, #32]
 8014bea:	e7f7      	b.n	8014bdc <_svfprintf_r+0xb94>
 8014bec:	2310      	movs	r3, #16
 8014bee:	431e      	orrs	r6, r3
 8014bf0:	2220      	movs	r2, #32
 8014bf2:	4032      	ands	r2, r6
 8014bf4:	d00b      	beq.n	8014c0e <_svfprintf_r+0xbc6>
 8014bf6:	2307      	movs	r3, #7
 8014bf8:	3407      	adds	r4, #7
 8014bfa:	439c      	bics	r4, r3
 8014bfc:	0023      	movs	r3, r4
 8014bfe:	3308      	adds	r3, #8
 8014c00:	9312      	str	r3, [sp, #72]	; 0x48
 8014c02:	6823      	ldr	r3, [r4, #0]
 8014c04:	6864      	ldr	r4, [r4, #4]
 8014c06:	9306      	str	r3, [sp, #24]
 8014c08:	9407      	str	r4, [sp, #28]
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	e78b      	b.n	8014b26 <_svfprintf_r+0xade>
 8014c0e:	1d23      	adds	r3, r4, #4
 8014c10:	9312      	str	r3, [sp, #72]	; 0x48
 8014c12:	2310      	movs	r3, #16
 8014c14:	4033      	ands	r3, r6
 8014c16:	d003      	beq.n	8014c20 <_svfprintf_r+0xbd8>
 8014c18:	6823      	ldr	r3, [r4, #0]
 8014c1a:	9306      	str	r3, [sp, #24]
 8014c1c:	9207      	str	r2, [sp, #28]
 8014c1e:	e7f4      	b.n	8014c0a <_svfprintf_r+0xbc2>
 8014c20:	2240      	movs	r2, #64	; 0x40
 8014c22:	4032      	ands	r2, r6
 8014c24:	d004      	beq.n	8014c30 <_svfprintf_r+0xbe8>
 8014c26:	6822      	ldr	r2, [r4, #0]
 8014c28:	b292      	uxth	r2, r2
 8014c2a:	9206      	str	r2, [sp, #24]
 8014c2c:	9307      	str	r3, [sp, #28]
 8014c2e:	e7ec      	b.n	8014c0a <_svfprintf_r+0xbc2>
 8014c30:	2380      	movs	r3, #128	; 0x80
 8014c32:	009b      	lsls	r3, r3, #2
 8014c34:	4033      	ands	r3, r6
 8014c36:	d002      	beq.n	8014c3e <_svfprintf_r+0xbf6>
 8014c38:	6823      	ldr	r3, [r4, #0]
 8014c3a:	b2db      	uxtb	r3, r3
 8014c3c:	e7ed      	b.n	8014c1a <_svfprintf_r+0xbd2>
 8014c3e:	6822      	ldr	r2, [r4, #0]
 8014c40:	e7f3      	b.n	8014c2a <_svfprintf_r+0xbe2>
 8014c42:	4b7c      	ldr	r3, [pc, #496]	; (8014e34 <_svfprintf_r+0xdec>)
 8014c44:	f7ff fad9 	bl	80141fa <_svfprintf_r+0x1b2>
 8014c48:	1d23      	adds	r3, r4, #4
 8014c4a:	9312      	str	r3, [sp, #72]	; 0x48
 8014c4c:	2310      	movs	r3, #16
 8014c4e:	4033      	ands	r3, r6
 8014c50:	d004      	beq.n	8014c5c <_svfprintf_r+0xc14>
 8014c52:	6823      	ldr	r3, [r4, #0]
 8014c54:	9306      	str	r3, [sp, #24]
 8014c56:	9207      	str	r2, [sp, #28]
 8014c58:	f7ff fadf 	bl	801421a <_svfprintf_r+0x1d2>
 8014c5c:	2240      	movs	r2, #64	; 0x40
 8014c5e:	4032      	ands	r2, r6
 8014c60:	d005      	beq.n	8014c6e <_svfprintf_r+0xc26>
 8014c62:	6822      	ldr	r2, [r4, #0]
 8014c64:	b292      	uxth	r2, r2
 8014c66:	9206      	str	r2, [sp, #24]
 8014c68:	9307      	str	r3, [sp, #28]
 8014c6a:	f7ff fad6 	bl	801421a <_svfprintf_r+0x1d2>
 8014c6e:	2380      	movs	r3, #128	; 0x80
 8014c70:	009b      	lsls	r3, r3, #2
 8014c72:	4033      	ands	r3, r6
 8014c74:	d002      	beq.n	8014c7c <_svfprintf_r+0xc34>
 8014c76:	6823      	ldr	r3, [r4, #0]
 8014c78:	b2db      	uxtb	r3, r3
 8014c7a:	e7eb      	b.n	8014c54 <_svfprintf_r+0xc0c>
 8014c7c:	6822      	ldr	r2, [r4, #0]
 8014c7e:	e7f2      	b.n	8014c66 <_svfprintf_r+0xc1e>
 8014c80:	0032      	movs	r2, r6
 8014c82:	2301      	movs	r3, #1
 8014c84:	e759      	b.n	8014b3a <_svfprintf_r+0xaf2>
 8014c86:	2b01      	cmp	r3, #1
 8014c88:	d100      	bne.n	8014c8c <_svfprintf_r+0xc44>
 8014c8a:	e476      	b.n	801457a <_svfprintf_r+0x532>
 8014c8c:	2b02      	cmp	r3, #2
 8014c8e:	d06b      	beq.n	8014d68 <_svfprintf_r+0xd20>
 8014c90:	2507      	movs	r5, #7
 8014c92:	ab58      	add	r3, sp, #352	; 0x160
 8014c94:	1e5a      	subs	r2, r3, #1
 8014c96:	9209      	str	r2, [sp, #36]	; 0x24
 8014c98:	9a06      	ldr	r2, [sp, #24]
 8014c9a:	1e59      	subs	r1, r3, #1
 8014c9c:	402a      	ands	r2, r5
 8014c9e:	3230      	adds	r2, #48	; 0x30
 8014ca0:	700a      	strb	r2, [r1, #0]
 8014ca2:	9907      	ldr	r1, [sp, #28]
 8014ca4:	074c      	lsls	r4, r1, #29
 8014ca6:	9906      	ldr	r1, [sp, #24]
 8014ca8:	08c8      	lsrs	r0, r1, #3
 8014caa:	9907      	ldr	r1, [sp, #28]
 8014cac:	4304      	orrs	r4, r0
 8014cae:	08c9      	lsrs	r1, r1, #3
 8014cb0:	9107      	str	r1, [sp, #28]
 8014cb2:	0021      	movs	r1, r4
 8014cb4:	9807      	ldr	r0, [sp, #28]
 8014cb6:	9406      	str	r4, [sp, #24]
 8014cb8:	4301      	orrs	r1, r0
 8014cba:	d111      	bne.n	8014ce0 <_svfprintf_r+0xc98>
 8014cbc:	07f1      	lsls	r1, r6, #31
 8014cbe:	d502      	bpl.n	8014cc6 <_svfprintf_r+0xc7e>
 8014cc0:	3b02      	subs	r3, #2
 8014cc2:	2a30      	cmp	r2, #48	; 0x30
 8014cc4:	d173      	bne.n	8014dae <_svfprintf_r+0xd66>
 8014cc6:	9b08      	ldr	r3, [sp, #32]
 8014cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cca:	9317      	str	r3, [sp, #92]	; 0x5c
 8014ccc:	ab58      	add	r3, sp, #352	; 0x160
 8014cce:	1a9b      	subs	r3, r3, r2
 8014cd0:	9308      	str	r3, [sp, #32]
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	930c      	str	r3, [sp, #48]	; 0x30
 8014cd6:	9310      	str	r3, [sp, #64]	; 0x40
 8014cd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8014cda:	001d      	movs	r5, r3
 8014cdc:	f7ff fb4b 	bl	8014376 <_svfprintf_r+0x32e>
 8014ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ce2:	e7d7      	b.n	8014c94 <_svfprintf_r+0xc4c>
 8014ce4:	2480      	movs	r4, #128	; 0x80
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	00e4      	lsls	r4, r4, #3
 8014cea:	930d      	str	r3, [sp, #52]	; 0x34
 8014cec:	4034      	ands	r4, r6
 8014cee:	ab58      	add	r3, sp, #352	; 0x160
 8014cf0:	3b01      	subs	r3, #1
 8014cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8014cf4:	220a      	movs	r2, #10
 8014cf6:	9806      	ldr	r0, [sp, #24]
 8014cf8:	9907      	ldr	r1, [sp, #28]
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	f7eb fc16 	bl	800052c <__aeabi_uldivmod>
 8014d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d02:	3230      	adds	r2, #48	; 0x30
 8014d04:	701a      	strb	r2, [r3, #0]
 8014d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d08:	3301      	adds	r3, #1
 8014d0a:	930d      	str	r3, [sp, #52]	; 0x34
 8014d0c:	2c00      	cmp	r4, #0
 8014d0e:	d01d      	beq.n	8014d4c <_svfprintf_r+0xd04>
 8014d10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d14:	781b      	ldrb	r3, [r3, #0]
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d118      	bne.n	8014d4c <_svfprintf_r+0xd04>
 8014d1a:	2aff      	cmp	r2, #255	; 0xff
 8014d1c:	d016      	beq.n	8014d4c <_svfprintf_r+0xd04>
 8014d1e:	9b07      	ldr	r3, [sp, #28]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d102      	bne.n	8014d2a <_svfprintf_r+0xce2>
 8014d24:	9b06      	ldr	r3, [sp, #24]
 8014d26:	2b09      	cmp	r3, #9
 8014d28:	d910      	bls.n	8014d4c <_svfprintf_r+0xd04>
 8014d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d2c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014d2e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014d30:	1a9b      	subs	r3, r3, r2
 8014d32:	0018      	movs	r0, r3
 8014d34:	9309      	str	r3, [sp, #36]	; 0x24
 8014d36:	f7fe fa52 	bl	80131de <strncpy>
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d3e:	920d      	str	r2, [sp, #52]	; 0x34
 8014d40:	785b      	ldrb	r3, [r3, #1]
 8014d42:	1e5a      	subs	r2, r3, #1
 8014d44:	4193      	sbcs	r3, r2
 8014d46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014d48:	18d3      	adds	r3, r2, r3
 8014d4a:	9313      	str	r3, [sp, #76]	; 0x4c
 8014d4c:	220a      	movs	r2, #10
 8014d4e:	9806      	ldr	r0, [sp, #24]
 8014d50:	9907      	ldr	r1, [sp, #28]
 8014d52:	2300      	movs	r3, #0
 8014d54:	f7eb fbea 	bl	800052c <__aeabi_uldivmod>
 8014d58:	9006      	str	r0, [sp, #24]
 8014d5a:	9107      	str	r1, [sp, #28]
 8014d5c:	9b06      	ldr	r3, [sp, #24]
 8014d5e:	9a07      	ldr	r2, [sp, #28]
 8014d60:	4313      	orrs	r3, r2
 8014d62:	d0b0      	beq.n	8014cc6 <_svfprintf_r+0xc7e>
 8014d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d66:	e7c3      	b.n	8014cf0 <_svfprintf_r+0xca8>
 8014d68:	200f      	movs	r0, #15
 8014d6a:	ab58      	add	r3, sp, #352	; 0x160
 8014d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8014d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014d72:	3b01      	subs	r3, #1
 8014d74:	9309      	str	r3, [sp, #36]	; 0x24
 8014d76:	9b06      	ldr	r3, [sp, #24]
 8014d78:	4003      	ands	r3, r0
 8014d7a:	5cd3      	ldrb	r3, [r2, r3]
 8014d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d7e:	7013      	strb	r3, [r2, #0]
 8014d80:	9b07      	ldr	r3, [sp, #28]
 8014d82:	0719      	lsls	r1, r3, #28
 8014d84:	9b06      	ldr	r3, [sp, #24]
 8014d86:	091a      	lsrs	r2, r3, #4
 8014d88:	9b07      	ldr	r3, [sp, #28]
 8014d8a:	4311      	orrs	r1, r2
 8014d8c:	091b      	lsrs	r3, r3, #4
 8014d8e:	9307      	str	r3, [sp, #28]
 8014d90:	000b      	movs	r3, r1
 8014d92:	9a07      	ldr	r2, [sp, #28]
 8014d94:	9106      	str	r1, [sp, #24]
 8014d96:	4313      	orrs	r3, r2
 8014d98:	d1e9      	bne.n	8014d6e <_svfprintf_r+0xd26>
 8014d9a:	e794      	b.n	8014cc6 <_svfprintf_r+0xc7e>
 8014d9c:	a958      	add	r1, sp, #352	; 0x160
 8014d9e:	9109      	str	r1, [sp, #36]	; 0x24
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d190      	bne.n	8014cc6 <_svfprintf_r+0xc7e>
 8014da4:	07d3      	lsls	r3, r2, #31
 8014da6:	d58e      	bpl.n	8014cc6 <_svfprintf_r+0xc7e>
 8014da8:	23e7      	movs	r3, #231	; 0xe7
 8014daa:	aa1e      	add	r2, sp, #120	; 0x78
 8014dac:	189b      	adds	r3, r3, r2
 8014dae:	2230      	movs	r2, #48	; 0x30
 8014db0:	f7ff fbf0 	bl	8014594 <_svfprintf_r+0x54c>
 8014db4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d100      	bne.n	8014dbc <_svfprintf_r+0xd74>
 8014dba:	e38a      	b.n	80154d2 <_svfprintf_r+0x148a>
 8014dbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014dbe:	ab3f      	add	r3, sp, #252	; 0xfc
 8014dc0:	701a      	strb	r2, [r3, #0]
 8014dc2:	221b      	movs	r2, #27
 8014dc4:	2000      	movs	r0, #0
 8014dc6:	a91e      	add	r1, sp, #120	; 0x78
 8014dc8:	1852      	adds	r2, r2, r1
 8014dca:	7010      	strb	r0, [r2, #0]
 8014dcc:	9412      	str	r4, [sp, #72]	; 0x48
 8014dce:	f7ff faca 	bl	8014366 <_svfprintf_r+0x31e>
 8014dd2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014dd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014dd6:	e592      	b.n	80148fe <_svfprintf_r+0x8b6>
 8014dd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014dda:	e42a      	b.n	8014632 <_svfprintf_r+0x5ea>
 8014ddc:	2010      	movs	r0, #16
 8014dde:	1812      	adds	r2, r2, r0
 8014de0:	6078      	str	r0, [r7, #4]
 8014de2:	922e      	str	r2, [sp, #184]	; 0xb8
 8014de4:	932d      	str	r3, [sp, #180]	; 0xb4
 8014de6:	2b07      	cmp	r3, #7
 8014de8:	dd08      	ble.n	8014dfc <_svfprintf_r+0xdb4>
 8014dea:	aa2c      	add	r2, sp, #176	; 0xb0
 8014dec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014dee:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014df0:	f002 fa7e 	bl	80172f0 <__ssprint_r>
 8014df4:	2800      	cmp	r0, #0
 8014df6:	d000      	beq.n	8014dfa <_svfprintf_r+0xdb2>
 8014df8:	e34a      	b.n	8015490 <_svfprintf_r+0x1448>
 8014dfa:	a92f      	add	r1, sp, #188	; 0xbc
 8014dfc:	3c10      	subs	r4, #16
 8014dfe:	000f      	movs	r7, r1
 8014e00:	f7ff fad8 	bl	80143b4 <_svfprintf_r+0x36c>
 8014e04:	2010      	movs	r0, #16
 8014e06:	1812      	adds	r2, r2, r0
 8014e08:	6078      	str	r0, [r7, #4]
 8014e0a:	922e      	str	r2, [sp, #184]	; 0xb8
 8014e0c:	932d      	str	r3, [sp, #180]	; 0xb4
 8014e0e:	2b07      	cmp	r3, #7
 8014e10:	dd08      	ble.n	8014e24 <_svfprintf_r+0xddc>
 8014e12:	aa2c      	add	r2, sp, #176	; 0xb0
 8014e14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e18:	f002 fa6a 	bl	80172f0 <__ssprint_r>
 8014e1c:	2800      	cmp	r0, #0
 8014e1e:	d000      	beq.n	8014e22 <_svfprintf_r+0xdda>
 8014e20:	e336      	b.n	8015490 <_svfprintf_r+0x1448>
 8014e22:	a92f      	add	r1, sp, #188	; 0xbc
 8014e24:	3c10      	subs	r4, #16
 8014e26:	000f      	movs	r7, r1
 8014e28:	f7ff fb24 	bl	8014474 <_svfprintf_r+0x42c>
 8014e2c:	fffffbff 	.word	0xfffffbff
 8014e30:	00007830 	.word	0x00007830
 8014e34:	0801a620 	.word	0x0801a620
 8014e38:	2010      	movs	r0, #16
 8014e3a:	1812      	adds	r2, r2, r0
 8014e3c:	6078      	str	r0, [r7, #4]
 8014e3e:	922e      	str	r2, [sp, #184]	; 0xb8
 8014e40:	932d      	str	r3, [sp, #180]	; 0xb4
 8014e42:	2b07      	cmp	r3, #7
 8014e44:	dd08      	ble.n	8014e58 <_svfprintf_r+0xe10>
 8014e46:	aa2c      	add	r2, sp, #176	; 0xb0
 8014e48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e4c:	f002 fa50 	bl	80172f0 <__ssprint_r>
 8014e50:	2800      	cmp	r0, #0
 8014e52:	d000      	beq.n	8014e56 <_svfprintf_r+0xe0e>
 8014e54:	e31c      	b.n	8015490 <_svfprintf_r+0x1448>
 8014e56:	a92f      	add	r1, sp, #188	; 0xbc
 8014e58:	3c10      	subs	r4, #16
 8014e5a:	000f      	movs	r7, r1
 8014e5c:	f7ff fb2c 	bl	80144b8 <_svfprintf_r+0x470>
 8014e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e62:	2b65      	cmp	r3, #101	; 0x65
 8014e64:	dc00      	bgt.n	8014e68 <_svfprintf_r+0xe20>
 8014e66:	e259      	b.n	801531c <_svfprintf_r+0x12d4>
 8014e68:	2200      	movs	r2, #0
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014e6e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014e70:	f7eb faf4 	bl	800045c <__aeabi_dcmpeq>
 8014e74:	2800      	cmp	r0, #0
 8014e76:	d07c      	beq.n	8014f72 <_svfprintf_r+0xf2a>
 8014e78:	4b81      	ldr	r3, [pc, #516]	; (8015080 <_svfprintf_r+0x1038>)
 8014e7a:	603b      	str	r3, [r7, #0]
 8014e7c:	2301      	movs	r3, #1
 8014e7e:	607b      	str	r3, [r7, #4]
 8014e80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e82:	3708      	adds	r7, #8
 8014e84:	3301      	adds	r3, #1
 8014e86:	932e      	str	r3, [sp, #184]	; 0xb8
 8014e88:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014e8a:	9308      	str	r3, [sp, #32]
 8014e8c:	3301      	adds	r3, #1
 8014e8e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014e90:	2b07      	cmp	r3, #7
 8014e92:	dd08      	ble.n	8014ea6 <_svfprintf_r+0xe5e>
 8014e94:	aa2c      	add	r2, sp, #176	; 0xb0
 8014e96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e9a:	f002 fa29 	bl	80172f0 <__ssprint_r>
 8014e9e:	2800      	cmp	r0, #0
 8014ea0:	d000      	beq.n	8014ea4 <_svfprintf_r+0xe5c>
 8014ea2:	e2f5      	b.n	8015490 <_svfprintf_r+0x1448>
 8014ea4:	af2f      	add	r7, sp, #188	; 0xbc
 8014ea6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014ea8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014eaa:	4293      	cmp	r3, r2
 8014eac:	db01      	blt.n	8014eb2 <_svfprintf_r+0xe6a>
 8014eae:	07f3      	lsls	r3, r6, #31
 8014eb0:	d51d      	bpl.n	8014eee <_svfprintf_r+0xea6>
 8014eb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014eb4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014eb6:	4694      	mov	ip, r2
 8014eb8:	603b      	str	r3, [r7, #0]
 8014eba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ebc:	607b      	str	r3, [r7, #4]
 8014ebe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014ec0:	3708      	adds	r7, #8
 8014ec2:	4463      	add	r3, ip
 8014ec4:	932e      	str	r3, [sp, #184]	; 0xb8
 8014ec6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014ec8:	9308      	str	r3, [sp, #32]
 8014eca:	3301      	adds	r3, #1
 8014ecc:	932d      	str	r3, [sp, #180]	; 0xb4
 8014ece:	2b07      	cmp	r3, #7
 8014ed0:	dd08      	ble.n	8014ee4 <_svfprintf_r+0xe9c>
 8014ed2:	aa2c      	add	r2, sp, #176	; 0xb0
 8014ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ed6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ed8:	f002 fa0a 	bl	80172f0 <__ssprint_r>
 8014edc:	2800      	cmp	r0, #0
 8014ede:	d000      	beq.n	8014ee2 <_svfprintf_r+0xe9a>
 8014ee0:	e2d6      	b.n	8015490 <_svfprintf_r+0x1448>
 8014ee2:	af2f      	add	r7, sp, #188	; 0xbc
 8014ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ee6:	2510      	movs	r5, #16
 8014ee8:	1e5c      	subs	r4, r3, #1
 8014eea:	2c00      	cmp	r4, #0
 8014eec:	dc2f      	bgt.n	8014f4e <_svfprintf_r+0xf06>
 8014eee:	0773      	lsls	r3, r6, #29
 8014ef0:	d500      	bpl.n	8014ef4 <_svfprintf_r+0xeac>
 8014ef2:	e2af      	b.n	8015454 <_svfprintf_r+0x140c>
 8014ef4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014ef6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014ef8:	4293      	cmp	r3, r2
 8014efa:	da00      	bge.n	8014efe <_svfprintf_r+0xeb6>
 8014efc:	0013      	movs	r3, r2
 8014efe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014f00:	18d3      	adds	r3, r2, r3
 8014f02:	9315      	str	r3, [sp, #84]	; 0x54
 8014f04:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014f06:	9308      	str	r3, [sp, #32]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d007      	beq.n	8014f1c <_svfprintf_r+0xed4>
 8014f0c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f12:	f002 f9ed 	bl	80172f0 <__ssprint_r>
 8014f16:	2800      	cmp	r0, #0
 8014f18:	d000      	beq.n	8014f1c <_svfprintf_r+0xed4>
 8014f1a:	e2b9      	b.n	8015490 <_svfprintf_r+0x1448>
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d000      	beq.n	8014f28 <_svfprintf_r+0xee0>
 8014f26:	e2cf      	b.n	80154c8 <_svfprintf_r+0x1480>
 8014f28:	af2f      	add	r7, sp, #188	; 0xbc
 8014f2a:	e5d6      	b.n	8014ada <_svfprintf_r+0xa92>
 8014f2c:	3210      	adds	r2, #16
 8014f2e:	607d      	str	r5, [r7, #4]
 8014f30:	922e      	str	r2, [sp, #184]	; 0xb8
 8014f32:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f34:	2b07      	cmp	r3, #7
 8014f36:	dd08      	ble.n	8014f4a <_svfprintf_r+0xf02>
 8014f38:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f3e:	f002 f9d7 	bl	80172f0 <__ssprint_r>
 8014f42:	2800      	cmp	r0, #0
 8014f44:	d000      	beq.n	8014f48 <_svfprintf_r+0xf00>
 8014f46:	e2a3      	b.n	8015490 <_svfprintf_r+0x1448>
 8014f48:	a92f      	add	r1, sp, #188	; 0xbc
 8014f4a:	000f      	movs	r7, r1
 8014f4c:	3c10      	subs	r4, #16
 8014f4e:	0039      	movs	r1, r7
 8014f50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f52:	484c      	ldr	r0, [pc, #304]	; (8015084 <_svfprintf_r+0x103c>)
 8014f54:	9308      	str	r3, [sp, #32]
 8014f56:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014f58:	3301      	adds	r3, #1
 8014f5a:	3108      	adds	r1, #8
 8014f5c:	6038      	str	r0, [r7, #0]
 8014f5e:	2c10      	cmp	r4, #16
 8014f60:	dce4      	bgt.n	8014f2c <_svfprintf_r+0xee4>
 8014f62:	607c      	str	r4, [r7, #4]
 8014f64:	18a4      	adds	r4, r4, r2
 8014f66:	942e      	str	r4, [sp, #184]	; 0xb8
 8014f68:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f6a:	000f      	movs	r7, r1
 8014f6c:	2b07      	cmp	r3, #7
 8014f6e:	ddbe      	ble.n	8014eee <_svfprintf_r+0xea6>
 8014f70:	e06a      	b.n	8015048 <_svfprintf_r+0x1000>
 8014f72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	dd00      	ble.n	8014f7a <_svfprintf_r+0xf32>
 8014f78:	e086      	b.n	8015088 <_svfprintf_r+0x1040>
 8014f7a:	4b41      	ldr	r3, [pc, #260]	; (8015080 <_svfprintf_r+0x1038>)
 8014f7c:	603b      	str	r3, [r7, #0]
 8014f7e:	2301      	movs	r3, #1
 8014f80:	607b      	str	r3, [r7, #4]
 8014f82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f84:	3708      	adds	r7, #8
 8014f86:	3301      	adds	r3, #1
 8014f88:	932e      	str	r3, [sp, #184]	; 0xb8
 8014f8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f8c:	9308      	str	r3, [sp, #32]
 8014f8e:	3301      	adds	r3, #1
 8014f90:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f92:	2b07      	cmp	r3, #7
 8014f94:	dd08      	ble.n	8014fa8 <_svfprintf_r+0xf60>
 8014f96:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f9c:	f002 f9a8 	bl	80172f0 <__ssprint_r>
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	d000      	beq.n	8014fa6 <_svfprintf_r+0xf5e>
 8014fa4:	e274      	b.n	8015490 <_svfprintf_r+0x1448>
 8014fa6:	af2f      	add	r7, sp, #188	; 0xbc
 8014fa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d104      	bne.n	8014fb8 <_svfprintf_r+0xf70>
 8014fae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d101      	bne.n	8014fb8 <_svfprintf_r+0xf70>
 8014fb4:	07f3      	lsls	r3, r6, #31
 8014fb6:	d59a      	bpl.n	8014eee <_svfprintf_r+0xea6>
 8014fb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014fba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014fbc:	4694      	mov	ip, r2
 8014fbe:	603b      	str	r3, [r7, #0]
 8014fc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014fc2:	607b      	str	r3, [r7, #4]
 8014fc4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014fc6:	3708      	adds	r7, #8
 8014fc8:	4463      	add	r3, ip
 8014fca:	932e      	str	r3, [sp, #184]	; 0xb8
 8014fcc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014fce:	9308      	str	r3, [sp, #32]
 8014fd0:	3301      	adds	r3, #1
 8014fd2:	932d      	str	r3, [sp, #180]	; 0xb4
 8014fd4:	2b07      	cmp	r3, #7
 8014fd6:	dd08      	ble.n	8014fea <_svfprintf_r+0xfa2>
 8014fd8:	aa2c      	add	r2, sp, #176	; 0xb0
 8014fda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014fdc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014fde:	f002 f987 	bl	80172f0 <__ssprint_r>
 8014fe2:	2800      	cmp	r0, #0
 8014fe4:	d000      	beq.n	8014fe8 <_svfprintf_r+0xfa0>
 8014fe6:	e253      	b.n	8015490 <_svfprintf_r+0x1448>
 8014fe8:	af2f      	add	r7, sp, #188	; 0xbc
 8014fea:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8014fec:	2c00      	cmp	r4, #0
 8014fee:	da1a      	bge.n	8015026 <_svfprintf_r+0xfde>
 8014ff0:	0039      	movs	r1, r7
 8014ff2:	2510      	movs	r5, #16
 8014ff4:	4264      	negs	r4, r4
 8014ff6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014ff8:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8014ffa:	9308      	str	r3, [sp, #32]
 8014ffc:	1c5a      	adds	r2, r3, #1
 8014ffe:	4b21      	ldr	r3, [pc, #132]	; (8015084 <_svfprintf_r+0x103c>)
 8015000:	3708      	adds	r7, #8
 8015002:	600b      	str	r3, [r1, #0]
 8015004:	2c10      	cmp	r4, #16
 8015006:	dc29      	bgt.n	801505c <_svfprintf_r+0x1014>
 8015008:	604c      	str	r4, [r1, #4]
 801500a:	1824      	adds	r4, r4, r0
 801500c:	942e      	str	r4, [sp, #184]	; 0xb8
 801500e:	922d      	str	r2, [sp, #180]	; 0xb4
 8015010:	2a07      	cmp	r2, #7
 8015012:	dd08      	ble.n	8015026 <_svfprintf_r+0xfde>
 8015014:	aa2c      	add	r2, sp, #176	; 0xb0
 8015016:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015018:	980a      	ldr	r0, [sp, #40]	; 0x28
 801501a:	f002 f969 	bl	80172f0 <__ssprint_r>
 801501e:	2800      	cmp	r0, #0
 8015020:	d000      	beq.n	8015024 <_svfprintf_r+0xfdc>
 8015022:	e235      	b.n	8015490 <_svfprintf_r+0x1448>
 8015024:	af2f      	add	r7, sp, #188	; 0xbc
 8015026:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801502a:	468c      	mov	ip, r1
 801502c:	603b      	str	r3, [r7, #0]
 801502e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015030:	607b      	str	r3, [r7, #4]
 8015032:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015034:	4463      	add	r3, ip
 8015036:	932e      	str	r3, [sp, #184]	; 0xb8
 8015038:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801503a:	1c5a      	adds	r2, r3, #1
 801503c:	9308      	str	r3, [sp, #32]
 801503e:	922d      	str	r2, [sp, #180]	; 0xb4
 8015040:	2a07      	cmp	r2, #7
 8015042:	dc01      	bgt.n	8015048 <_svfprintf_r+0x1000>
 8015044:	f7ff fa6c 	bl	8014520 <_svfprintf_r+0x4d8>
 8015048:	aa2c      	add	r2, sp, #176	; 0xb0
 801504a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801504c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801504e:	f002 f94f 	bl	80172f0 <__ssprint_r>
 8015052:	2800      	cmp	r0, #0
 8015054:	d000      	beq.n	8015058 <_svfprintf_r+0x1010>
 8015056:	e21b      	b.n	8015490 <_svfprintf_r+0x1448>
 8015058:	af2f      	add	r7, sp, #188	; 0xbc
 801505a:	e748      	b.n	8014eee <_svfprintf_r+0xea6>
 801505c:	3010      	adds	r0, #16
 801505e:	604d      	str	r5, [r1, #4]
 8015060:	902e      	str	r0, [sp, #184]	; 0xb8
 8015062:	922d      	str	r2, [sp, #180]	; 0xb4
 8015064:	2a07      	cmp	r2, #7
 8015066:	dd08      	ble.n	801507a <_svfprintf_r+0x1032>
 8015068:	aa2c      	add	r2, sp, #176	; 0xb0
 801506a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801506c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801506e:	f002 f93f 	bl	80172f0 <__ssprint_r>
 8015072:	2800      	cmp	r0, #0
 8015074:	d000      	beq.n	8015078 <_svfprintf_r+0x1030>
 8015076:	e20b      	b.n	8015490 <_svfprintf_r+0x1448>
 8015078:	af2f      	add	r7, sp, #188	; 0xbc
 801507a:	3c10      	subs	r4, #16
 801507c:	0039      	movs	r1, r7
 801507e:	e7ba      	b.n	8014ff6 <_svfprintf_r+0xfae>
 8015080:	0801a642 	.word	0x0801a642
 8015084:	0801a654 	.word	0x0801a654
 8015088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801508a:	002c      	movs	r4, r5
 801508c:	429d      	cmp	r5, r3
 801508e:	dd00      	ble.n	8015092 <_svfprintf_r+0x104a>
 8015090:	001c      	movs	r4, r3
 8015092:	2c00      	cmp	r4, #0
 8015094:	dd15      	ble.n	80150c2 <_svfprintf_r+0x107a>
 8015096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015098:	607c      	str	r4, [r7, #4]
 801509a:	603b      	str	r3, [r7, #0]
 801509c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801509e:	3708      	adds	r7, #8
 80150a0:	18e3      	adds	r3, r4, r3
 80150a2:	932e      	str	r3, [sp, #184]	; 0xb8
 80150a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150a6:	9308      	str	r3, [sp, #32]
 80150a8:	3301      	adds	r3, #1
 80150aa:	932d      	str	r3, [sp, #180]	; 0xb4
 80150ac:	2b07      	cmp	r3, #7
 80150ae:	dd08      	ble.n	80150c2 <_svfprintf_r+0x107a>
 80150b0:	aa2c      	add	r2, sp, #176	; 0xb0
 80150b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150b6:	f002 f91b 	bl	80172f0 <__ssprint_r>
 80150ba:	2800      	cmp	r0, #0
 80150bc:	d000      	beq.n	80150c0 <_svfprintf_r+0x1078>
 80150be:	e1e7      	b.n	8015490 <_svfprintf_r+0x1448>
 80150c0:	af2f      	add	r7, sp, #188	; 0xbc
 80150c2:	43e3      	mvns	r3, r4
 80150c4:	17db      	asrs	r3, r3, #31
 80150c6:	401c      	ands	r4, r3
 80150c8:	1b2c      	subs	r4, r5, r4
 80150ca:	2c00      	cmp	r4, #0
 80150cc:	dd1a      	ble.n	8015104 <_svfprintf_r+0x10bc>
 80150ce:	0039      	movs	r1, r7
 80150d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150d2:	48d4      	ldr	r0, [pc, #848]	; (8015424 <_svfprintf_r+0x13dc>)
 80150d4:	9308      	str	r3, [sp, #32]
 80150d6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80150d8:	3301      	adds	r3, #1
 80150da:	3108      	adds	r1, #8
 80150dc:	6038      	str	r0, [r7, #0]
 80150de:	2c10      	cmp	r4, #16
 80150e0:	dd00      	ble.n	80150e4 <_svfprintf_r+0x109c>
 80150e2:	e089      	b.n	80151f8 <_svfprintf_r+0x11b0>
 80150e4:	607c      	str	r4, [r7, #4]
 80150e6:	18a4      	adds	r4, r4, r2
 80150e8:	942e      	str	r4, [sp, #184]	; 0xb8
 80150ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80150ec:	000f      	movs	r7, r1
 80150ee:	2b07      	cmp	r3, #7
 80150f0:	dd08      	ble.n	8015104 <_svfprintf_r+0x10bc>
 80150f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80150f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150f8:	f002 f8fa 	bl	80172f0 <__ssprint_r>
 80150fc:	2800      	cmp	r0, #0
 80150fe:	d000      	beq.n	8015102 <_svfprintf_r+0x10ba>
 8015100:	e1c6      	b.n	8015490 <_svfprintf_r+0x1448>
 8015102:	af2f      	add	r7, sp, #188	; 0xbc
 8015104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015106:	195d      	adds	r5, r3, r5
 8015108:	0573      	lsls	r3, r6, #21
 801510a:	d50d      	bpl.n	8015128 <_svfprintf_r+0x10e0>
 801510c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801510e:	2b00      	cmp	r3, #0
 8015110:	d000      	beq.n	8015114 <_svfprintf_r+0x10cc>
 8015112:	e084      	b.n	801521e <_svfprintf_r+0x11d6>
 8015114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015116:	2b00      	cmp	r3, #0
 8015118:	d000      	beq.n	801511c <_svfprintf_r+0x10d4>
 801511a:	e083      	b.n	8015224 <_svfprintf_r+0x11dc>
 801511c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801511e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015120:	189b      	adds	r3, r3, r2
 8015122:	429d      	cmp	r5, r3
 8015124:	d900      	bls.n	8015128 <_svfprintf_r+0x10e0>
 8015126:	001d      	movs	r5, r3
 8015128:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801512a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801512c:	4293      	cmp	r3, r2
 801512e:	db01      	blt.n	8015134 <_svfprintf_r+0x10ec>
 8015130:	07f3      	lsls	r3, r6, #31
 8015132:	d518      	bpl.n	8015166 <_svfprintf_r+0x111e>
 8015134:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015136:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015138:	4694      	mov	ip, r2
 801513a:	603b      	str	r3, [r7, #0]
 801513c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801513e:	607b      	str	r3, [r7, #4]
 8015140:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015142:	3708      	adds	r7, #8
 8015144:	4463      	add	r3, ip
 8015146:	932e      	str	r3, [sp, #184]	; 0xb8
 8015148:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801514a:	9308      	str	r3, [sp, #32]
 801514c:	3301      	adds	r3, #1
 801514e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015150:	2b07      	cmp	r3, #7
 8015152:	dd08      	ble.n	8015166 <_svfprintf_r+0x111e>
 8015154:	aa2c      	add	r2, sp, #176	; 0xb0
 8015156:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015158:	980a      	ldr	r0, [sp, #40]	; 0x28
 801515a:	f002 f8c9 	bl	80172f0 <__ssprint_r>
 801515e:	2800      	cmp	r0, #0
 8015160:	d000      	beq.n	8015164 <_svfprintf_r+0x111c>
 8015162:	e195      	b.n	8015490 <_svfprintf_r+0x1448>
 8015164:	af2f      	add	r7, sp, #188	; 0xbc
 8015166:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801516a:	4694      	mov	ip, r2
 801516c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801516e:	4463      	add	r3, ip
 8015170:	1b5b      	subs	r3, r3, r5
 8015172:	1a54      	subs	r4, r2, r1
 8015174:	429c      	cmp	r4, r3
 8015176:	dd00      	ble.n	801517a <_svfprintf_r+0x1132>
 8015178:	001c      	movs	r4, r3
 801517a:	2c00      	cmp	r4, #0
 801517c:	dd14      	ble.n	80151a8 <_svfprintf_r+0x1160>
 801517e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015180:	603d      	str	r5, [r7, #0]
 8015182:	18e3      	adds	r3, r4, r3
 8015184:	932e      	str	r3, [sp, #184]	; 0xb8
 8015186:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015188:	607c      	str	r4, [r7, #4]
 801518a:	9308      	str	r3, [sp, #32]
 801518c:	3301      	adds	r3, #1
 801518e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015190:	3708      	adds	r7, #8
 8015192:	2b07      	cmp	r3, #7
 8015194:	dd08      	ble.n	80151a8 <_svfprintf_r+0x1160>
 8015196:	aa2c      	add	r2, sp, #176	; 0xb0
 8015198:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801519a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801519c:	f002 f8a8 	bl	80172f0 <__ssprint_r>
 80151a0:	2800      	cmp	r0, #0
 80151a2:	d000      	beq.n	80151a6 <_svfprintf_r+0x115e>
 80151a4:	e174      	b.n	8015490 <_svfprintf_r+0x1448>
 80151a6:	af2f      	add	r7, sp, #188	; 0xbc
 80151a8:	43e3      	mvns	r3, r4
 80151aa:	17db      	asrs	r3, r3, #31
 80151ac:	401c      	ands	r4, r3
 80151ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80151b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151b2:	2510      	movs	r5, #16
 80151b4:	1a9b      	subs	r3, r3, r2
 80151b6:	1b1c      	subs	r4, r3, r4
 80151b8:	2c00      	cmp	r4, #0
 80151ba:	dc00      	bgt.n	80151be <_svfprintf_r+0x1176>
 80151bc:	e697      	b.n	8014eee <_svfprintf_r+0xea6>
 80151be:	0039      	movs	r1, r7
 80151c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80151c2:	4898      	ldr	r0, [pc, #608]	; (8015424 <_svfprintf_r+0x13dc>)
 80151c4:	9308      	str	r3, [sp, #32]
 80151c6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80151c8:	3301      	adds	r3, #1
 80151ca:	3108      	adds	r1, #8
 80151cc:	6038      	str	r0, [r7, #0]
 80151ce:	2c10      	cmp	r4, #16
 80151d0:	dc00      	bgt.n	80151d4 <_svfprintf_r+0x118c>
 80151d2:	e6c6      	b.n	8014f62 <_svfprintf_r+0xf1a>
 80151d4:	3210      	adds	r2, #16
 80151d6:	607d      	str	r5, [r7, #4]
 80151d8:	922e      	str	r2, [sp, #184]	; 0xb8
 80151da:	932d      	str	r3, [sp, #180]	; 0xb4
 80151dc:	2b07      	cmp	r3, #7
 80151de:	dd08      	ble.n	80151f2 <_svfprintf_r+0x11aa>
 80151e0:	aa2c      	add	r2, sp, #176	; 0xb0
 80151e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151e6:	f002 f883 	bl	80172f0 <__ssprint_r>
 80151ea:	2800      	cmp	r0, #0
 80151ec:	d000      	beq.n	80151f0 <_svfprintf_r+0x11a8>
 80151ee:	e14f      	b.n	8015490 <_svfprintf_r+0x1448>
 80151f0:	a92f      	add	r1, sp, #188	; 0xbc
 80151f2:	3c10      	subs	r4, #16
 80151f4:	000f      	movs	r7, r1
 80151f6:	e7e2      	b.n	80151be <_svfprintf_r+0x1176>
 80151f8:	2010      	movs	r0, #16
 80151fa:	1812      	adds	r2, r2, r0
 80151fc:	6078      	str	r0, [r7, #4]
 80151fe:	922e      	str	r2, [sp, #184]	; 0xb8
 8015200:	932d      	str	r3, [sp, #180]	; 0xb4
 8015202:	2b07      	cmp	r3, #7
 8015204:	dd08      	ble.n	8015218 <_svfprintf_r+0x11d0>
 8015206:	aa2c      	add	r2, sp, #176	; 0xb0
 8015208:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801520a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801520c:	f002 f870 	bl	80172f0 <__ssprint_r>
 8015210:	2800      	cmp	r0, #0
 8015212:	d000      	beq.n	8015216 <_svfprintf_r+0x11ce>
 8015214:	e13c      	b.n	8015490 <_svfprintf_r+0x1448>
 8015216:	a92f      	add	r1, sp, #188	; 0xbc
 8015218:	3c10      	subs	r4, #16
 801521a:	000f      	movs	r7, r1
 801521c:	e757      	b.n	80150ce <_svfprintf_r+0x1086>
 801521e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015220:	2b00      	cmp	r3, #0
 8015222:	d061      	beq.n	80152e8 <_svfprintf_r+0x12a0>
 8015224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015226:	3b01      	subs	r3, #1
 8015228:	9310      	str	r3, [sp, #64]	; 0x40
 801522a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801522c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801522e:	4694      	mov	ip, r2
 8015230:	603b      	str	r3, [r7, #0]
 8015232:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015234:	607b      	str	r3, [r7, #4]
 8015236:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015238:	3708      	adds	r7, #8
 801523a:	4463      	add	r3, ip
 801523c:	932e      	str	r3, [sp, #184]	; 0xb8
 801523e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015240:	9308      	str	r3, [sp, #32]
 8015242:	3301      	adds	r3, #1
 8015244:	932d      	str	r3, [sp, #180]	; 0xb4
 8015246:	2b07      	cmp	r3, #7
 8015248:	dd08      	ble.n	801525c <_svfprintf_r+0x1214>
 801524a:	aa2c      	add	r2, sp, #176	; 0xb0
 801524c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801524e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015250:	f002 f84e 	bl	80172f0 <__ssprint_r>
 8015254:	2800      	cmp	r0, #0
 8015256:	d000      	beq.n	801525a <_svfprintf_r+0x1212>
 8015258:	e11a      	b.n	8015490 <_svfprintf_r+0x1448>
 801525a:	af2f      	add	r7, sp, #188	; 0xbc
 801525c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801525e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015260:	189b      	adds	r3, r3, r2
 8015262:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015264:	1b5b      	subs	r3, r3, r5
 8015266:	7814      	ldrb	r4, [r2, #0]
 8015268:	429c      	cmp	r4, r3
 801526a:	dd00      	ble.n	801526e <_svfprintf_r+0x1226>
 801526c:	001c      	movs	r4, r3
 801526e:	2c00      	cmp	r4, #0
 8015270:	dd14      	ble.n	801529c <_svfprintf_r+0x1254>
 8015272:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015274:	603d      	str	r5, [r7, #0]
 8015276:	18e3      	adds	r3, r4, r3
 8015278:	932e      	str	r3, [sp, #184]	; 0xb8
 801527a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801527c:	607c      	str	r4, [r7, #4]
 801527e:	9308      	str	r3, [sp, #32]
 8015280:	3301      	adds	r3, #1
 8015282:	932d      	str	r3, [sp, #180]	; 0xb4
 8015284:	3708      	adds	r7, #8
 8015286:	2b07      	cmp	r3, #7
 8015288:	dd08      	ble.n	801529c <_svfprintf_r+0x1254>
 801528a:	aa2c      	add	r2, sp, #176	; 0xb0
 801528c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801528e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015290:	f002 f82e 	bl	80172f0 <__ssprint_r>
 8015294:	2800      	cmp	r0, #0
 8015296:	d000      	beq.n	801529a <_svfprintf_r+0x1252>
 8015298:	e0fa      	b.n	8015490 <_svfprintf_r+0x1448>
 801529a:	af2f      	add	r7, sp, #188	; 0xbc
 801529c:	43e3      	mvns	r3, r4
 801529e:	17db      	asrs	r3, r3, #31
 80152a0:	401c      	ands	r4, r3
 80152a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80152a4:	781b      	ldrb	r3, [r3, #0]
 80152a6:	1b1c      	subs	r4, r3, r4
 80152a8:	2c00      	cmp	r4, #0
 80152aa:	dd19      	ble.n	80152e0 <_svfprintf_r+0x1298>
 80152ac:	0039      	movs	r1, r7
 80152ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152b0:	485c      	ldr	r0, [pc, #368]	; (8015424 <_svfprintf_r+0x13dc>)
 80152b2:	9308      	str	r3, [sp, #32]
 80152b4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80152b6:	3301      	adds	r3, #1
 80152b8:	3108      	adds	r1, #8
 80152ba:	6038      	str	r0, [r7, #0]
 80152bc:	2c10      	cmp	r4, #16
 80152be:	dc1a      	bgt.n	80152f6 <_svfprintf_r+0x12ae>
 80152c0:	607c      	str	r4, [r7, #4]
 80152c2:	18a4      	adds	r4, r4, r2
 80152c4:	942e      	str	r4, [sp, #184]	; 0xb8
 80152c6:	932d      	str	r3, [sp, #180]	; 0xb4
 80152c8:	000f      	movs	r7, r1
 80152ca:	2b07      	cmp	r3, #7
 80152cc:	dd08      	ble.n	80152e0 <_svfprintf_r+0x1298>
 80152ce:	aa2c      	add	r2, sp, #176	; 0xb0
 80152d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152d4:	f002 f80c 	bl	80172f0 <__ssprint_r>
 80152d8:	2800      	cmp	r0, #0
 80152da:	d000      	beq.n	80152de <_svfprintf_r+0x1296>
 80152dc:	e0d8      	b.n	8015490 <_svfprintf_r+0x1448>
 80152de:	af2f      	add	r7, sp, #188	; 0xbc
 80152e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80152e2:	781b      	ldrb	r3, [r3, #0]
 80152e4:	18ed      	adds	r5, r5, r3
 80152e6:	e711      	b.n	801510c <_svfprintf_r+0x10c4>
 80152e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80152ea:	3b01      	subs	r3, #1
 80152ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80152ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152f0:	3b01      	subs	r3, #1
 80152f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80152f4:	e799      	b.n	801522a <_svfprintf_r+0x11e2>
 80152f6:	2010      	movs	r0, #16
 80152f8:	1812      	adds	r2, r2, r0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	922e      	str	r2, [sp, #184]	; 0xb8
 80152fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8015300:	2b07      	cmp	r3, #7
 8015302:	dd08      	ble.n	8015316 <_svfprintf_r+0x12ce>
 8015304:	aa2c      	add	r2, sp, #176	; 0xb0
 8015306:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015308:	980a      	ldr	r0, [sp, #40]	; 0x28
 801530a:	f001 fff1 	bl	80172f0 <__ssprint_r>
 801530e:	2800      	cmp	r0, #0
 8015310:	d000      	beq.n	8015314 <_svfprintf_r+0x12cc>
 8015312:	e0bd      	b.n	8015490 <_svfprintf_r+0x1448>
 8015314:	a92f      	add	r1, sp, #188	; 0xbc
 8015316:	3c10      	subs	r4, #16
 8015318:	000f      	movs	r7, r1
 801531a:	e7c7      	b.n	80152ac <_svfprintf_r+0x1264>
 801531c:	003c      	movs	r4, r7
 801531e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015320:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015322:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015324:	9308      	str	r3, [sp, #32]
 8015326:	3101      	adds	r1, #1
 8015328:	3301      	adds	r3, #1
 801532a:	3408      	adds	r4, #8
 801532c:	2a01      	cmp	r2, #1
 801532e:	dc03      	bgt.n	8015338 <_svfprintf_r+0x12f0>
 8015330:	2201      	movs	r2, #1
 8015332:	4216      	tst	r6, r2
 8015334:	d100      	bne.n	8015338 <_svfprintf_r+0x12f0>
 8015336:	e088      	b.n	801544a <_svfprintf_r+0x1402>
 8015338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801533a:	912e      	str	r1, [sp, #184]	; 0xb8
 801533c:	603a      	str	r2, [r7, #0]
 801533e:	2201      	movs	r2, #1
 8015340:	932d      	str	r3, [sp, #180]	; 0xb4
 8015342:	607a      	str	r2, [r7, #4]
 8015344:	2b07      	cmp	r3, #7
 8015346:	dd08      	ble.n	801535a <_svfprintf_r+0x1312>
 8015348:	aa2c      	add	r2, sp, #176	; 0xb0
 801534a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801534c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801534e:	f001 ffcf 	bl	80172f0 <__ssprint_r>
 8015352:	2800      	cmp	r0, #0
 8015354:	d000      	beq.n	8015358 <_svfprintf_r+0x1310>
 8015356:	e09b      	b.n	8015490 <_svfprintf_r+0x1448>
 8015358:	ac2f      	add	r4, sp, #188	; 0xbc
 801535a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801535c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801535e:	4694      	mov	ip, r2
 8015360:	6023      	str	r3, [r4, #0]
 8015362:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015364:	6063      	str	r3, [r4, #4]
 8015366:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015368:	3408      	adds	r4, #8
 801536a:	4463      	add	r3, ip
 801536c:	932e      	str	r3, [sp, #184]	; 0xb8
 801536e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015370:	9308      	str	r3, [sp, #32]
 8015372:	3301      	adds	r3, #1
 8015374:	932d      	str	r3, [sp, #180]	; 0xb4
 8015376:	2b07      	cmp	r3, #7
 8015378:	dd08      	ble.n	801538c <_svfprintf_r+0x1344>
 801537a:	aa2c      	add	r2, sp, #176	; 0xb0
 801537c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801537e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015380:	f001 ffb6 	bl	80172f0 <__ssprint_r>
 8015384:	2800      	cmp	r0, #0
 8015386:	d000      	beq.n	801538a <_svfprintf_r+0x1342>
 8015388:	e082      	b.n	8015490 <_svfprintf_r+0x1448>
 801538a:	ac2f      	add	r4, sp, #188	; 0xbc
 801538c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801538e:	2200      	movs	r2, #0
 8015390:	1e5d      	subs	r5, r3, #1
 8015392:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015394:	2300      	movs	r3, #0
 8015396:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015398:	f7eb f860 	bl	800045c <__aeabi_dcmpeq>
 801539c:	2800      	cmp	r0, #0
 801539e:	d12c      	bne.n	80153fa <_svfprintf_r+0x13b2>
 80153a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80153a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80153a4:	9308      	str	r3, [sp, #32]
 80153a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153a8:	6065      	str	r5, [r4, #4]
 80153aa:	1c5a      	adds	r2, r3, #1
 80153ac:	930e      	str	r3, [sp, #56]	; 0x38
 80153ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153b0:	922d      	str	r2, [sp, #180]	; 0xb4
 80153b2:	3301      	adds	r3, #1
 80153b4:	6023      	str	r3, [r4, #0]
 80153b6:	9b08      	ldr	r3, [sp, #32]
 80153b8:	3408      	adds	r4, #8
 80153ba:	3b01      	subs	r3, #1
 80153bc:	185b      	adds	r3, r3, r1
 80153be:	932e      	str	r3, [sp, #184]	; 0xb8
 80153c0:	2a07      	cmp	r2, #7
 80153c2:	dd07      	ble.n	80153d4 <_svfprintf_r+0x138c>
 80153c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80153c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153ca:	f001 ff91 	bl	80172f0 <__ssprint_r>
 80153ce:	2800      	cmp	r0, #0
 80153d0:	d15e      	bne.n	8015490 <_svfprintf_r+0x1448>
 80153d2:	ac2f      	add	r4, sp, #188	; 0xbc
 80153d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80153d6:	ab28      	add	r3, sp, #160	; 0xa0
 80153d8:	4694      	mov	ip, r2
 80153da:	6023      	str	r3, [r4, #0]
 80153dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80153de:	6063      	str	r3, [r4, #4]
 80153e0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80153e2:	4463      	add	r3, ip
 80153e4:	932e      	str	r3, [sp, #184]	; 0xb8
 80153e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153e8:	9308      	str	r3, [sp, #32]
 80153ea:	3301      	adds	r3, #1
 80153ec:	932d      	str	r3, [sp, #180]	; 0xb4
 80153ee:	2b07      	cmp	r3, #7
 80153f0:	dd00      	ble.n	80153f4 <_svfprintf_r+0x13ac>
 80153f2:	e629      	b.n	8015048 <_svfprintf_r+0x1000>
 80153f4:	3408      	adds	r4, #8
 80153f6:	0027      	movs	r7, r4
 80153f8:	e579      	b.n	8014eee <_svfprintf_r+0xea6>
 80153fa:	2710      	movs	r7, #16
 80153fc:	2d00      	cmp	r5, #0
 80153fe:	dde9      	ble.n	80153d4 <_svfprintf_r+0x138c>
 8015400:	0021      	movs	r1, r4
 8015402:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015404:	4807      	ldr	r0, [pc, #28]	; (8015424 <_svfprintf_r+0x13dc>)
 8015406:	9308      	str	r3, [sp, #32]
 8015408:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801540a:	3301      	adds	r3, #1
 801540c:	3108      	adds	r1, #8
 801540e:	6020      	str	r0, [r4, #0]
 8015410:	2d10      	cmp	r5, #16
 8015412:	dc09      	bgt.n	8015428 <_svfprintf_r+0x13e0>
 8015414:	6065      	str	r5, [r4, #4]
 8015416:	000c      	movs	r4, r1
 8015418:	18ad      	adds	r5, r5, r2
 801541a:	952e      	str	r5, [sp, #184]	; 0xb8
 801541c:	932d      	str	r3, [sp, #180]	; 0xb4
 801541e:	2b07      	cmp	r3, #7
 8015420:	ddd8      	ble.n	80153d4 <_svfprintf_r+0x138c>
 8015422:	e7cf      	b.n	80153c4 <_svfprintf_r+0x137c>
 8015424:	0801a654 	.word	0x0801a654
 8015428:	3210      	adds	r2, #16
 801542a:	6067      	str	r7, [r4, #4]
 801542c:	922e      	str	r2, [sp, #184]	; 0xb8
 801542e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015430:	2b07      	cmp	r3, #7
 8015432:	dd07      	ble.n	8015444 <_svfprintf_r+0x13fc>
 8015434:	aa2c      	add	r2, sp, #176	; 0xb0
 8015436:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015438:	980a      	ldr	r0, [sp, #40]	; 0x28
 801543a:	f001 ff59 	bl	80172f0 <__ssprint_r>
 801543e:	2800      	cmp	r0, #0
 8015440:	d126      	bne.n	8015490 <_svfprintf_r+0x1448>
 8015442:	a92f      	add	r1, sp, #188	; 0xbc
 8015444:	3d10      	subs	r5, #16
 8015446:	000c      	movs	r4, r1
 8015448:	e7da      	b.n	8015400 <_svfprintf_r+0x13b8>
 801544a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801544c:	912e      	str	r1, [sp, #184]	; 0xb8
 801544e:	c705      	stmia	r7!, {r0, r2}
 8015450:	932d      	str	r3, [sp, #180]	; 0xb4
 8015452:	e7e4      	b.n	801541e <_svfprintf_r+0x13d6>
 8015454:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015456:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015458:	2510      	movs	r5, #16
 801545a:	1a9c      	subs	r4, r3, r2
 801545c:	2c00      	cmp	r4, #0
 801545e:	dc00      	bgt.n	8015462 <_svfprintf_r+0x141a>
 8015460:	e548      	b.n	8014ef4 <_svfprintf_r+0xeac>
 8015462:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015464:	4921      	ldr	r1, [pc, #132]	; (80154ec <_svfprintf_r+0x14a4>)
 8015466:	9308      	str	r3, [sp, #32]
 8015468:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801546a:	3301      	adds	r3, #1
 801546c:	6039      	str	r1, [r7, #0]
 801546e:	2c10      	cmp	r4, #16
 8015470:	dc19      	bgt.n	80154a6 <_svfprintf_r+0x145e>
 8015472:	607c      	str	r4, [r7, #4]
 8015474:	18a4      	adds	r4, r4, r2
 8015476:	942e      	str	r4, [sp, #184]	; 0xb8
 8015478:	932d      	str	r3, [sp, #180]	; 0xb4
 801547a:	2b07      	cmp	r3, #7
 801547c:	dc00      	bgt.n	8015480 <_svfprintf_r+0x1438>
 801547e:	e539      	b.n	8014ef4 <_svfprintf_r+0xeac>
 8015480:	aa2c      	add	r2, sp, #176	; 0xb0
 8015482:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015484:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015486:	f001 ff33 	bl	80172f0 <__ssprint_r>
 801548a:	2800      	cmp	r0, #0
 801548c:	d100      	bne.n	8015490 <_svfprintf_r+0x1448>
 801548e:	e531      	b.n	8014ef4 <_svfprintf_r+0xeac>
 8015490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015492:	2b00      	cmp	r3, #0
 8015494:	d101      	bne.n	801549a <_svfprintf_r+0x1452>
 8015496:	f7ff f908 	bl	80146aa <_svfprintf_r+0x662>
 801549a:	0019      	movs	r1, r3
 801549c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801549e:	f000 ff19 	bl	80162d4 <_free_r>
 80154a2:	f7ff f902 	bl	80146aa <_svfprintf_r+0x662>
 80154a6:	3210      	adds	r2, #16
 80154a8:	607d      	str	r5, [r7, #4]
 80154aa:	922e      	str	r2, [sp, #184]	; 0xb8
 80154ac:	932d      	str	r3, [sp, #180]	; 0xb4
 80154ae:	3708      	adds	r7, #8
 80154b0:	2b07      	cmp	r3, #7
 80154b2:	dd07      	ble.n	80154c4 <_svfprintf_r+0x147c>
 80154b4:	aa2c      	add	r2, sp, #176	; 0xb0
 80154b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154ba:	f001 ff19 	bl	80172f0 <__ssprint_r>
 80154be:	2800      	cmp	r0, #0
 80154c0:	d1e6      	bne.n	8015490 <_svfprintf_r+0x1448>
 80154c2:	af2f      	add	r7, sp, #188	; 0xbc
 80154c4:	3c10      	subs	r4, #16
 80154c6:	e7cc      	b.n	8015462 <_svfprintf_r+0x141a>
 80154c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80154ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154cc:	f000 ff02 	bl	80162d4 <_free_r>
 80154d0:	e52a      	b.n	8014f28 <_svfprintf_r+0xee0>
 80154d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80154d4:	9306      	str	r3, [sp, #24]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d101      	bne.n	80154de <_svfprintf_r+0x1496>
 80154da:	f7ff f8e6 	bl	80146aa <_svfprintf_r+0x662>
 80154de:	aa2c      	add	r2, sp, #176	; 0xb0
 80154e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154e4:	f001 ff04 	bl	80172f0 <__ssprint_r>
 80154e8:	f7ff f8df 	bl	80146aa <_svfprintf_r+0x662>
 80154ec:	0801a644 	.word	0x0801a644

080154f0 <sysconf>:
 80154f0:	2380      	movs	r3, #128	; 0x80
 80154f2:	b510      	push	{r4, lr}
 80154f4:	015b      	lsls	r3, r3, #5
 80154f6:	2808      	cmp	r0, #8
 80154f8:	d004      	beq.n	8015504 <sysconf+0x14>
 80154fa:	f000 fe7d 	bl	80161f8 <__errno>
 80154fe:	2316      	movs	r3, #22
 8015500:	6003      	str	r3, [r0, #0]
 8015502:	3b17      	subs	r3, #23
 8015504:	0018      	movs	r0, r3
 8015506:	bd10      	pop	{r4, pc}

08015508 <__ascii_wctomb>:
 8015508:	1e0b      	subs	r3, r1, #0
 801550a:	d004      	beq.n	8015516 <__ascii_wctomb+0xe>
 801550c:	2aff      	cmp	r2, #255	; 0xff
 801550e:	d904      	bls.n	801551a <__ascii_wctomb+0x12>
 8015510:	238a      	movs	r3, #138	; 0x8a
 8015512:	6003      	str	r3, [r0, #0]
 8015514:	3b8b      	subs	r3, #139	; 0x8b
 8015516:	0018      	movs	r0, r3
 8015518:	4770      	bx	lr
 801551a:	700a      	strb	r2, [r1, #0]
 801551c:	2301      	movs	r3, #1
 801551e:	e7fa      	b.n	8015516 <__ascii_wctomb+0xe>

08015520 <register_fini>:
 8015520:	4b03      	ldr	r3, [pc, #12]	; (8015530 <register_fini+0x10>)
 8015522:	b510      	push	{r4, lr}
 8015524:	2b00      	cmp	r3, #0
 8015526:	d002      	beq.n	801552e <register_fini+0xe>
 8015528:	4802      	ldr	r0, [pc, #8]	; (8015534 <register_fini+0x14>)
 801552a:	f000 f805 	bl	8015538 <atexit>
 801552e:	bd10      	pop	{r4, pc}
 8015530:	00000000 	.word	0x00000000
 8015534:	08016205 	.word	0x08016205

08015538 <atexit>:
 8015538:	2300      	movs	r3, #0
 801553a:	b510      	push	{r4, lr}
 801553c:	0001      	movs	r1, r0
 801553e:	001a      	movs	r2, r3
 8015540:	0018      	movs	r0, r3
 8015542:	f001 ff53 	bl	80173ec <__register_exitproc>
 8015546:	bd10      	pop	{r4, pc}

08015548 <quorem>:
 8015548:	b5f0      	push	{r4, r5, r6, r7, lr}
 801554a:	6903      	ldr	r3, [r0, #16]
 801554c:	690c      	ldr	r4, [r1, #16]
 801554e:	b089      	sub	sp, #36	; 0x24
 8015550:	0007      	movs	r7, r0
 8015552:	9105      	str	r1, [sp, #20]
 8015554:	2600      	movs	r6, #0
 8015556:	42a3      	cmp	r3, r4
 8015558:	db65      	blt.n	8015626 <quorem+0xde>
 801555a:	000b      	movs	r3, r1
 801555c:	3c01      	subs	r4, #1
 801555e:	3314      	adds	r3, #20
 8015560:	00a5      	lsls	r5, r4, #2
 8015562:	9303      	str	r3, [sp, #12]
 8015564:	195b      	adds	r3, r3, r5
 8015566:	9304      	str	r3, [sp, #16]
 8015568:	0003      	movs	r3, r0
 801556a:	3314      	adds	r3, #20
 801556c:	9302      	str	r3, [sp, #8]
 801556e:	195d      	adds	r5, r3, r5
 8015570:	9b04      	ldr	r3, [sp, #16]
 8015572:	6828      	ldr	r0, [r5, #0]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	1c59      	adds	r1, r3, #1
 8015578:	9301      	str	r3, [sp, #4]
 801557a:	f7ea fde9 	bl	8000150 <__udivsi3>
 801557e:	9001      	str	r0, [sp, #4]
 8015580:	42b0      	cmp	r0, r6
 8015582:	d029      	beq.n	80155d8 <quorem+0x90>
 8015584:	9b03      	ldr	r3, [sp, #12]
 8015586:	9802      	ldr	r0, [sp, #8]
 8015588:	469c      	mov	ip, r3
 801558a:	9606      	str	r6, [sp, #24]
 801558c:	4662      	mov	r2, ip
 801558e:	ca08      	ldmia	r2!, {r3}
 8015590:	4694      	mov	ip, r2
 8015592:	9a01      	ldr	r2, [sp, #4]
 8015594:	b299      	uxth	r1, r3
 8015596:	4351      	muls	r1, r2
 8015598:	0c1b      	lsrs	r3, r3, #16
 801559a:	4353      	muls	r3, r2
 801559c:	1989      	adds	r1, r1, r6
 801559e:	0c0a      	lsrs	r2, r1, #16
 80155a0:	189b      	adds	r3, r3, r2
 80155a2:	9307      	str	r3, [sp, #28]
 80155a4:	0c1e      	lsrs	r6, r3, #16
 80155a6:	6803      	ldr	r3, [r0, #0]
 80155a8:	b289      	uxth	r1, r1
 80155aa:	b29a      	uxth	r2, r3
 80155ac:	9b06      	ldr	r3, [sp, #24]
 80155ae:	18d2      	adds	r2, r2, r3
 80155b0:	6803      	ldr	r3, [r0, #0]
 80155b2:	1a52      	subs	r2, r2, r1
 80155b4:	0c19      	lsrs	r1, r3, #16
 80155b6:	466b      	mov	r3, sp
 80155b8:	8b9b      	ldrh	r3, [r3, #28]
 80155ba:	1acb      	subs	r3, r1, r3
 80155bc:	1411      	asrs	r1, r2, #16
 80155be:	185b      	adds	r3, r3, r1
 80155c0:	1419      	asrs	r1, r3, #16
 80155c2:	b292      	uxth	r2, r2
 80155c4:	041b      	lsls	r3, r3, #16
 80155c6:	431a      	orrs	r2, r3
 80155c8:	9b04      	ldr	r3, [sp, #16]
 80155ca:	9106      	str	r1, [sp, #24]
 80155cc:	c004      	stmia	r0!, {r2}
 80155ce:	4563      	cmp	r3, ip
 80155d0:	d2dc      	bcs.n	801558c <quorem+0x44>
 80155d2:	682b      	ldr	r3, [r5, #0]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d02d      	beq.n	8015634 <quorem+0xec>
 80155d8:	9905      	ldr	r1, [sp, #20]
 80155da:	0038      	movs	r0, r7
 80155dc:	f001 fcb2 	bl	8016f44 <__mcmp>
 80155e0:	2800      	cmp	r0, #0
 80155e2:	db1f      	blt.n	8015624 <quorem+0xdc>
 80155e4:	2500      	movs	r5, #0
 80155e6:	9b01      	ldr	r3, [sp, #4]
 80155e8:	9802      	ldr	r0, [sp, #8]
 80155ea:	3301      	adds	r3, #1
 80155ec:	9903      	ldr	r1, [sp, #12]
 80155ee:	9301      	str	r3, [sp, #4]
 80155f0:	6802      	ldr	r2, [r0, #0]
 80155f2:	c908      	ldmia	r1!, {r3}
 80155f4:	b292      	uxth	r2, r2
 80155f6:	1955      	adds	r5, r2, r5
 80155f8:	b29a      	uxth	r2, r3
 80155fa:	1aaa      	subs	r2, r5, r2
 80155fc:	6805      	ldr	r5, [r0, #0]
 80155fe:	0c1b      	lsrs	r3, r3, #16
 8015600:	0c2d      	lsrs	r5, r5, #16
 8015602:	1aeb      	subs	r3, r5, r3
 8015604:	1415      	asrs	r5, r2, #16
 8015606:	195b      	adds	r3, r3, r5
 8015608:	141d      	asrs	r5, r3, #16
 801560a:	b292      	uxth	r2, r2
 801560c:	041b      	lsls	r3, r3, #16
 801560e:	4313      	orrs	r3, r2
 8015610:	c008      	stmia	r0!, {r3}
 8015612:	9b04      	ldr	r3, [sp, #16]
 8015614:	428b      	cmp	r3, r1
 8015616:	d2eb      	bcs.n	80155f0 <quorem+0xa8>
 8015618:	9a02      	ldr	r2, [sp, #8]
 801561a:	00a3      	lsls	r3, r4, #2
 801561c:	18d3      	adds	r3, r2, r3
 801561e:	681a      	ldr	r2, [r3, #0]
 8015620:	2a00      	cmp	r2, #0
 8015622:	d011      	beq.n	8015648 <quorem+0x100>
 8015624:	9e01      	ldr	r6, [sp, #4]
 8015626:	0030      	movs	r0, r6
 8015628:	b009      	add	sp, #36	; 0x24
 801562a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801562c:	682b      	ldr	r3, [r5, #0]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d104      	bne.n	801563c <quorem+0xf4>
 8015632:	3c01      	subs	r4, #1
 8015634:	9b02      	ldr	r3, [sp, #8]
 8015636:	3d04      	subs	r5, #4
 8015638:	42ab      	cmp	r3, r5
 801563a:	d3f7      	bcc.n	801562c <quorem+0xe4>
 801563c:	613c      	str	r4, [r7, #16]
 801563e:	e7cb      	b.n	80155d8 <quorem+0x90>
 8015640:	681a      	ldr	r2, [r3, #0]
 8015642:	2a00      	cmp	r2, #0
 8015644:	d104      	bne.n	8015650 <quorem+0x108>
 8015646:	3c01      	subs	r4, #1
 8015648:	9a02      	ldr	r2, [sp, #8]
 801564a:	3b04      	subs	r3, #4
 801564c:	429a      	cmp	r2, r3
 801564e:	d3f7      	bcc.n	8015640 <quorem+0xf8>
 8015650:	613c      	str	r4, [r7, #16]
 8015652:	e7e7      	b.n	8015624 <quorem+0xdc>

08015654 <_dtoa_r>:
 8015654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015656:	0014      	movs	r4, r2
 8015658:	001d      	movs	r5, r3
 801565a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801565c:	b09b      	sub	sp, #108	; 0x6c
 801565e:	9002      	str	r0, [sp, #8]
 8015660:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8015662:	9406      	str	r4, [sp, #24]
 8015664:	9507      	str	r5, [sp, #28]
 8015666:	2900      	cmp	r1, #0
 8015668:	d009      	beq.n	801567e <_dtoa_r+0x2a>
 801566a:	2301      	movs	r3, #1
 801566c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801566e:	4093      	lsls	r3, r2
 8015670:	604a      	str	r2, [r1, #4]
 8015672:	608b      	str	r3, [r1, #8]
 8015674:	f001 fa6a 	bl	8016b4c <_Bfree>
 8015678:	2300      	movs	r3, #0
 801567a:	9a02      	ldr	r2, [sp, #8]
 801567c:	6413      	str	r3, [r2, #64]	; 0x40
 801567e:	2d00      	cmp	r5, #0
 8015680:	da20      	bge.n	80156c4 <_dtoa_r+0x70>
 8015682:	2301      	movs	r3, #1
 8015684:	6033      	str	r3, [r6, #0]
 8015686:	006b      	lsls	r3, r5, #1
 8015688:	085b      	lsrs	r3, r3, #1
 801568a:	9307      	str	r3, [sp, #28]
 801568c:	9c07      	ldr	r4, [sp, #28]
 801568e:	4bb2      	ldr	r3, [pc, #712]	; (8015958 <_dtoa_r+0x304>)
 8015690:	0022      	movs	r2, r4
 8015692:	9317      	str	r3, [sp, #92]	; 0x5c
 8015694:	401a      	ands	r2, r3
 8015696:	429a      	cmp	r2, r3
 8015698:	d117      	bne.n	80156ca <_dtoa_r+0x76>
 801569a:	4bb0      	ldr	r3, [pc, #704]	; (801595c <_dtoa_r+0x308>)
 801569c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801569e:	6013      	str	r3, [r2, #0]
 80156a0:	9b06      	ldr	r3, [sp, #24]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d103      	bne.n	80156ae <_dtoa_r+0x5a>
 80156a6:	0324      	lsls	r4, r4, #12
 80156a8:	d101      	bne.n	80156ae <_dtoa_r+0x5a>
 80156aa:	f000 fd89 	bl	80161c0 <_dtoa_r+0xb6c>
 80156ae:	4bac      	ldr	r3, [pc, #688]	; (8015960 <_dtoa_r+0x30c>)
 80156b0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80156b2:	9308      	str	r3, [sp, #32]
 80156b4:	2a00      	cmp	r2, #0
 80156b6:	d002      	beq.n	80156be <_dtoa_r+0x6a>
 80156b8:	4baa      	ldr	r3, [pc, #680]	; (8015964 <_dtoa_r+0x310>)
 80156ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80156bc:	6013      	str	r3, [r2, #0]
 80156be:	9808      	ldr	r0, [sp, #32]
 80156c0:	b01b      	add	sp, #108	; 0x6c
 80156c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156c4:	2300      	movs	r3, #0
 80156c6:	6033      	str	r3, [r6, #0]
 80156c8:	e7e0      	b.n	801568c <_dtoa_r+0x38>
 80156ca:	9e06      	ldr	r6, [sp, #24]
 80156cc:	9f07      	ldr	r7, [sp, #28]
 80156ce:	2200      	movs	r2, #0
 80156d0:	2300      	movs	r3, #0
 80156d2:	0030      	movs	r0, r6
 80156d4:	0039      	movs	r1, r7
 80156d6:	f7ea fec1 	bl	800045c <__aeabi_dcmpeq>
 80156da:	1e05      	subs	r5, r0, #0
 80156dc:	d00b      	beq.n	80156f6 <_dtoa_r+0xa2>
 80156de:	2301      	movs	r3, #1
 80156e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80156e2:	6013      	str	r3, [r2, #0]
 80156e4:	4ba0      	ldr	r3, [pc, #640]	; (8015968 <_dtoa_r+0x314>)
 80156e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80156e8:	9308      	str	r3, [sp, #32]
 80156ea:	2a00      	cmp	r2, #0
 80156ec:	d0e7      	beq.n	80156be <_dtoa_r+0x6a>
 80156ee:	4a9f      	ldr	r2, [pc, #636]	; (801596c <_dtoa_r+0x318>)
 80156f0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80156f2:	600a      	str	r2, [r1, #0]
 80156f4:	e7e3      	b.n	80156be <_dtoa_r+0x6a>
 80156f6:	ab18      	add	r3, sp, #96	; 0x60
 80156f8:	9301      	str	r3, [sp, #4]
 80156fa:	ab19      	add	r3, sp, #100	; 0x64
 80156fc:	9300      	str	r3, [sp, #0]
 80156fe:	0032      	movs	r2, r6
 8015700:	003b      	movs	r3, r7
 8015702:	9802      	ldr	r0, [sp, #8]
 8015704:	f001 fd0e 	bl	8017124 <__d2b>
 8015708:	0063      	lsls	r3, r4, #1
 801570a:	9003      	str	r0, [sp, #12]
 801570c:	0d5b      	lsrs	r3, r3, #21
 801570e:	d074      	beq.n	80157fa <_dtoa_r+0x1a6>
 8015710:	033a      	lsls	r2, r7, #12
 8015712:	4c97      	ldr	r4, [pc, #604]	; (8015970 <_dtoa_r+0x31c>)
 8015714:	0b12      	lsrs	r2, r2, #12
 8015716:	4314      	orrs	r4, r2
 8015718:	0021      	movs	r1, r4
 801571a:	4a96      	ldr	r2, [pc, #600]	; (8015974 <_dtoa_r+0x320>)
 801571c:	0030      	movs	r0, r6
 801571e:	9516      	str	r5, [sp, #88]	; 0x58
 8015720:	189e      	adds	r6, r3, r2
 8015722:	2200      	movs	r2, #0
 8015724:	4b94      	ldr	r3, [pc, #592]	; (8015978 <_dtoa_r+0x324>)
 8015726:	f7ec fdf7 	bl	8002318 <__aeabi_dsub>
 801572a:	4a94      	ldr	r2, [pc, #592]	; (801597c <_dtoa_r+0x328>)
 801572c:	4b94      	ldr	r3, [pc, #592]	; (8015980 <_dtoa_r+0x32c>)
 801572e:	f7ec fb81 	bl	8001e34 <__aeabi_dmul>
 8015732:	4a94      	ldr	r2, [pc, #592]	; (8015984 <_dtoa_r+0x330>)
 8015734:	4b94      	ldr	r3, [pc, #592]	; (8015988 <_dtoa_r+0x334>)
 8015736:	f7eb fc57 	bl	8000fe8 <__aeabi_dadd>
 801573a:	0004      	movs	r4, r0
 801573c:	0030      	movs	r0, r6
 801573e:	000d      	movs	r5, r1
 8015740:	f7ed f984 	bl	8002a4c <__aeabi_i2d>
 8015744:	4a91      	ldr	r2, [pc, #580]	; (801598c <_dtoa_r+0x338>)
 8015746:	4b92      	ldr	r3, [pc, #584]	; (8015990 <_dtoa_r+0x33c>)
 8015748:	f7ec fb74 	bl	8001e34 <__aeabi_dmul>
 801574c:	0002      	movs	r2, r0
 801574e:	000b      	movs	r3, r1
 8015750:	0020      	movs	r0, r4
 8015752:	0029      	movs	r1, r5
 8015754:	f7eb fc48 	bl	8000fe8 <__aeabi_dadd>
 8015758:	0004      	movs	r4, r0
 801575a:	000d      	movs	r5, r1
 801575c:	f7ed f940 	bl	80029e0 <__aeabi_d2iz>
 8015760:	2200      	movs	r2, #0
 8015762:	0007      	movs	r7, r0
 8015764:	2300      	movs	r3, #0
 8015766:	0020      	movs	r0, r4
 8015768:	0029      	movs	r1, r5
 801576a:	f7ea fe7d 	bl	8000468 <__aeabi_dcmplt>
 801576e:	2800      	cmp	r0, #0
 8015770:	d009      	beq.n	8015786 <_dtoa_r+0x132>
 8015772:	0038      	movs	r0, r7
 8015774:	f7ed f96a 	bl	8002a4c <__aeabi_i2d>
 8015778:	002b      	movs	r3, r5
 801577a:	0022      	movs	r2, r4
 801577c:	f7ea fe6e 	bl	800045c <__aeabi_dcmpeq>
 8015780:	4243      	negs	r3, r0
 8015782:	4158      	adcs	r0, r3
 8015784:	1a3f      	subs	r7, r7, r0
 8015786:	2301      	movs	r3, #1
 8015788:	9314      	str	r3, [sp, #80]	; 0x50
 801578a:	2f16      	cmp	r7, #22
 801578c:	d80d      	bhi.n	80157aa <_dtoa_r+0x156>
 801578e:	4981      	ldr	r1, [pc, #516]	; (8015994 <_dtoa_r+0x340>)
 8015790:	00fb      	lsls	r3, r7, #3
 8015792:	18c9      	adds	r1, r1, r3
 8015794:	6808      	ldr	r0, [r1, #0]
 8015796:	6849      	ldr	r1, [r1, #4]
 8015798:	9a06      	ldr	r2, [sp, #24]
 801579a:	9b07      	ldr	r3, [sp, #28]
 801579c:	f7ea fe78 	bl	8000490 <__aeabi_dcmpgt>
 80157a0:	2800      	cmp	r0, #0
 80157a2:	d046      	beq.n	8015832 <_dtoa_r+0x1de>
 80157a4:	2300      	movs	r3, #0
 80157a6:	3f01      	subs	r7, #1
 80157a8:	9314      	str	r3, [sp, #80]	; 0x50
 80157aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80157ac:	1b9e      	subs	r6, r3, r6
 80157ae:	2300      	movs	r3, #0
 80157b0:	930a      	str	r3, [sp, #40]	; 0x28
 80157b2:	0033      	movs	r3, r6
 80157b4:	3b01      	subs	r3, #1
 80157b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80157b8:	d504      	bpl.n	80157c4 <_dtoa_r+0x170>
 80157ba:	2301      	movs	r3, #1
 80157bc:	1b9b      	subs	r3, r3, r6
 80157be:	930a      	str	r3, [sp, #40]	; 0x28
 80157c0:	2300      	movs	r3, #0
 80157c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80157c4:	2f00      	cmp	r7, #0
 80157c6:	db36      	blt.n	8015836 <_dtoa_r+0x1e2>
 80157c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157ca:	9711      	str	r7, [sp, #68]	; 0x44
 80157cc:	19db      	adds	r3, r3, r7
 80157ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80157d0:	2300      	movs	r3, #0
 80157d2:	9304      	str	r3, [sp, #16]
 80157d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157d6:	2401      	movs	r4, #1
 80157d8:	2b09      	cmp	r3, #9
 80157da:	d900      	bls.n	80157de <_dtoa_r+0x18a>
 80157dc:	e082      	b.n	80158e4 <_dtoa_r+0x290>
 80157de:	2b05      	cmp	r3, #5
 80157e0:	dd02      	ble.n	80157e8 <_dtoa_r+0x194>
 80157e2:	2400      	movs	r4, #0
 80157e4:	3b04      	subs	r3, #4
 80157e6:	9320      	str	r3, [sp, #128]	; 0x80
 80157e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157ea:	1e98      	subs	r0, r3, #2
 80157ec:	2803      	cmp	r0, #3
 80157ee:	d900      	bls.n	80157f2 <_dtoa_r+0x19e>
 80157f0:	e082      	b.n	80158f8 <_dtoa_r+0x2a4>
 80157f2:	f7ea fc99 	bl	8000128 <__gnu_thumb1_case_uqi>
 80157f6:	7573      	.short	0x7573
 80157f8:	6828      	.short	0x6828
 80157fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80157fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80157fe:	189e      	adds	r6, r3, r2
 8015800:	4b65      	ldr	r3, [pc, #404]	; (8015998 <_dtoa_r+0x344>)
 8015802:	18f2      	adds	r2, r6, r3
 8015804:	2a20      	cmp	r2, #32
 8015806:	dd0f      	ble.n	8015828 <_dtoa_r+0x1d4>
 8015808:	2340      	movs	r3, #64	; 0x40
 801580a:	1a9b      	subs	r3, r3, r2
 801580c:	409c      	lsls	r4, r3
 801580e:	4b63      	ldr	r3, [pc, #396]	; (801599c <_dtoa_r+0x348>)
 8015810:	9806      	ldr	r0, [sp, #24]
 8015812:	18f3      	adds	r3, r6, r3
 8015814:	40d8      	lsrs	r0, r3
 8015816:	4320      	orrs	r0, r4
 8015818:	f7ed f952 	bl	8002ac0 <__aeabi_ui2d>
 801581c:	2301      	movs	r3, #1
 801581e:	4c60      	ldr	r4, [pc, #384]	; (80159a0 <_dtoa_r+0x34c>)
 8015820:	3e01      	subs	r6, #1
 8015822:	1909      	adds	r1, r1, r4
 8015824:	9316      	str	r3, [sp, #88]	; 0x58
 8015826:	e77c      	b.n	8015722 <_dtoa_r+0xce>
 8015828:	2320      	movs	r3, #32
 801582a:	9806      	ldr	r0, [sp, #24]
 801582c:	1a9b      	subs	r3, r3, r2
 801582e:	4098      	lsls	r0, r3
 8015830:	e7f2      	b.n	8015818 <_dtoa_r+0x1c4>
 8015832:	9014      	str	r0, [sp, #80]	; 0x50
 8015834:	e7b9      	b.n	80157aa <_dtoa_r+0x156>
 8015836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015838:	1bdb      	subs	r3, r3, r7
 801583a:	930a      	str	r3, [sp, #40]	; 0x28
 801583c:	427b      	negs	r3, r7
 801583e:	9304      	str	r3, [sp, #16]
 8015840:	2300      	movs	r3, #0
 8015842:	9311      	str	r3, [sp, #68]	; 0x44
 8015844:	e7c6      	b.n	80157d4 <_dtoa_r+0x180>
 8015846:	2301      	movs	r3, #1
 8015848:	930d      	str	r3, [sp, #52]	; 0x34
 801584a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801584c:	2b00      	cmp	r3, #0
 801584e:	dd57      	ble.n	8015900 <_dtoa_r+0x2ac>
 8015850:	930c      	str	r3, [sp, #48]	; 0x30
 8015852:	9309      	str	r3, [sp, #36]	; 0x24
 8015854:	2200      	movs	r2, #0
 8015856:	9902      	ldr	r1, [sp, #8]
 8015858:	644a      	str	r2, [r1, #68]	; 0x44
 801585a:	3204      	adds	r2, #4
 801585c:	0010      	movs	r0, r2
 801585e:	9902      	ldr	r1, [sp, #8]
 8015860:	3014      	adds	r0, #20
 8015862:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8015864:	4298      	cmp	r0, r3
 8015866:	d950      	bls.n	801590a <_dtoa_r+0x2b6>
 8015868:	9802      	ldr	r0, [sp, #8]
 801586a:	f001 f947 	bl	8016afc <_Balloc>
 801586e:	9b02      	ldr	r3, [sp, #8]
 8015870:	9008      	str	r0, [sp, #32]
 8015872:	6418      	str	r0, [r3, #64]	; 0x40
 8015874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015876:	2b0e      	cmp	r3, #14
 8015878:	d900      	bls.n	801587c <_dtoa_r+0x228>
 801587a:	e10c      	b.n	8015a96 <_dtoa_r+0x442>
 801587c:	2c00      	cmp	r4, #0
 801587e:	d100      	bne.n	8015882 <_dtoa_r+0x22e>
 8015880:	e109      	b.n	8015a96 <_dtoa_r+0x442>
 8015882:	9b06      	ldr	r3, [sp, #24]
 8015884:	9c07      	ldr	r4, [sp, #28]
 8015886:	9312      	str	r3, [sp, #72]	; 0x48
 8015888:	9413      	str	r4, [sp, #76]	; 0x4c
 801588a:	2f00      	cmp	r7, #0
 801588c:	dc00      	bgt.n	8015890 <_dtoa_r+0x23c>
 801588e:	e08b      	b.n	80159a8 <_dtoa_r+0x354>
 8015890:	210f      	movs	r1, #15
 8015892:	003a      	movs	r2, r7
 8015894:	4b3f      	ldr	r3, [pc, #252]	; (8015994 <_dtoa_r+0x340>)
 8015896:	400a      	ands	r2, r1
 8015898:	00d2      	lsls	r2, r2, #3
 801589a:	189b      	adds	r3, r3, r2
 801589c:	681d      	ldr	r5, [r3, #0]
 801589e:	685e      	ldr	r6, [r3, #4]
 80158a0:	2302      	movs	r3, #2
 80158a2:	113c      	asrs	r4, r7, #4
 80158a4:	930e      	str	r3, [sp, #56]	; 0x38
 80158a6:	06e3      	lsls	r3, r4, #27
 80158a8:	d50b      	bpl.n	80158c2 <_dtoa_r+0x26e>
 80158aa:	4b3e      	ldr	r3, [pc, #248]	; (80159a4 <_dtoa_r+0x350>)
 80158ac:	400c      	ands	r4, r1
 80158ae:	6a1a      	ldr	r2, [r3, #32]
 80158b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80158b4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80158b6:	f7eb feb3 	bl	8001620 <__aeabi_ddiv>
 80158ba:	2303      	movs	r3, #3
 80158bc:	9006      	str	r0, [sp, #24]
 80158be:	9107      	str	r1, [sp, #28]
 80158c0:	930e      	str	r3, [sp, #56]	; 0x38
 80158c2:	2300      	movs	r3, #0
 80158c4:	e03b      	b.n	801593e <_dtoa_r+0x2ea>
 80158c6:	2301      	movs	r3, #1
 80158c8:	930d      	str	r3, [sp, #52]	; 0x34
 80158ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158cc:	18fb      	adds	r3, r7, r3
 80158ce:	930c      	str	r3, [sp, #48]	; 0x30
 80158d0:	3301      	adds	r3, #1
 80158d2:	9309      	str	r3, [sp, #36]	; 0x24
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	dcbd      	bgt.n	8015854 <_dtoa_r+0x200>
 80158d8:	2301      	movs	r3, #1
 80158da:	e7bb      	b.n	8015854 <_dtoa_r+0x200>
 80158dc:	2300      	movs	r3, #0
 80158de:	e7b3      	b.n	8015848 <_dtoa_r+0x1f4>
 80158e0:	2300      	movs	r3, #0
 80158e2:	e7f1      	b.n	80158c8 <_dtoa_r+0x274>
 80158e4:	2300      	movs	r3, #0
 80158e6:	940d      	str	r4, [sp, #52]	; 0x34
 80158e8:	9320      	str	r3, [sp, #128]	; 0x80
 80158ea:	3b01      	subs	r3, #1
 80158ec:	2200      	movs	r2, #0
 80158ee:	930c      	str	r3, [sp, #48]	; 0x30
 80158f0:	9309      	str	r3, [sp, #36]	; 0x24
 80158f2:	3313      	adds	r3, #19
 80158f4:	9221      	str	r2, [sp, #132]	; 0x84
 80158f6:	e7ad      	b.n	8015854 <_dtoa_r+0x200>
 80158f8:	2301      	movs	r3, #1
 80158fa:	930d      	str	r3, [sp, #52]	; 0x34
 80158fc:	3b02      	subs	r3, #2
 80158fe:	e7f5      	b.n	80158ec <_dtoa_r+0x298>
 8015900:	2301      	movs	r3, #1
 8015902:	930c      	str	r3, [sp, #48]	; 0x30
 8015904:	9309      	str	r3, [sp, #36]	; 0x24
 8015906:	001a      	movs	r2, r3
 8015908:	e7f4      	b.n	80158f4 <_dtoa_r+0x2a0>
 801590a:	9802      	ldr	r0, [sp, #8]
 801590c:	3101      	adds	r1, #1
 801590e:	6441      	str	r1, [r0, #68]	; 0x44
 8015910:	0052      	lsls	r2, r2, #1
 8015912:	e7a3      	b.n	801585c <_dtoa_r+0x208>
 8015914:	2301      	movs	r3, #1
 8015916:	421c      	tst	r4, r3
 8015918:	d00e      	beq.n	8015938 <_dtoa_r+0x2e4>
 801591a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801591c:	4a21      	ldr	r2, [pc, #132]	; (80159a4 <_dtoa_r+0x350>)
 801591e:	3301      	adds	r3, #1
 8015920:	930e      	str	r3, [sp, #56]	; 0x38
 8015922:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015924:	0028      	movs	r0, r5
 8015926:	00db      	lsls	r3, r3, #3
 8015928:	189b      	adds	r3, r3, r2
 801592a:	0031      	movs	r1, r6
 801592c:	681a      	ldr	r2, [r3, #0]
 801592e:	685b      	ldr	r3, [r3, #4]
 8015930:	f7ec fa80 	bl	8001e34 <__aeabi_dmul>
 8015934:	0005      	movs	r5, r0
 8015936:	000e      	movs	r6, r1
 8015938:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801593a:	1064      	asrs	r4, r4, #1
 801593c:	3301      	adds	r3, #1
 801593e:	9310      	str	r3, [sp, #64]	; 0x40
 8015940:	2c00      	cmp	r4, #0
 8015942:	d1e7      	bne.n	8015914 <_dtoa_r+0x2c0>
 8015944:	9806      	ldr	r0, [sp, #24]
 8015946:	9907      	ldr	r1, [sp, #28]
 8015948:	002a      	movs	r2, r5
 801594a:	0033      	movs	r3, r6
 801594c:	f7eb fe68 	bl	8001620 <__aeabi_ddiv>
 8015950:	9006      	str	r0, [sp, #24]
 8015952:	9107      	str	r1, [sp, #28]
 8015954:	e043      	b.n	80159de <_dtoa_r+0x38a>
 8015956:	46c0      	nop			; (mov r8, r8)
 8015958:	7ff00000 	.word	0x7ff00000
 801595c:	0000270f 	.word	0x0000270f
 8015960:	0801a76e 	.word	0x0801a76e
 8015964:	0801a771 	.word	0x0801a771
 8015968:	0801a642 	.word	0x0801a642
 801596c:	0801a643 	.word	0x0801a643
 8015970:	3ff00000 	.word	0x3ff00000
 8015974:	fffffc01 	.word	0xfffffc01
 8015978:	3ff80000 	.word	0x3ff80000
 801597c:	636f4361 	.word	0x636f4361
 8015980:	3fd287a7 	.word	0x3fd287a7
 8015984:	8b60c8b3 	.word	0x8b60c8b3
 8015988:	3fc68a28 	.word	0x3fc68a28
 801598c:	509f79fb 	.word	0x509f79fb
 8015990:	3fd34413 	.word	0x3fd34413
 8015994:	0801a7a0 	.word	0x0801a7a0
 8015998:	00000432 	.word	0x00000432
 801599c:	00000412 	.word	0x00000412
 80159a0:	fe100000 	.word	0xfe100000
 80159a4:	0801a778 	.word	0x0801a778
 80159a8:	2302      	movs	r3, #2
 80159aa:	930e      	str	r3, [sp, #56]	; 0x38
 80159ac:	2f00      	cmp	r7, #0
 80159ae:	d016      	beq.n	80159de <_dtoa_r+0x38a>
 80159b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80159b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80159b4:	427c      	negs	r4, r7
 80159b6:	330d      	adds	r3, #13
 80159b8:	4023      	ands	r3, r4
 80159ba:	4acf      	ldr	r2, [pc, #828]	; (8015cf8 <_dtoa_r+0x6a4>)
 80159bc:	00db      	lsls	r3, r3, #3
 80159be:	18d3      	adds	r3, r2, r3
 80159c0:	681a      	ldr	r2, [r3, #0]
 80159c2:	685b      	ldr	r3, [r3, #4]
 80159c4:	f7ec fa36 	bl	8001e34 <__aeabi_dmul>
 80159c8:	2300      	movs	r3, #0
 80159ca:	2601      	movs	r6, #1
 80159cc:	001d      	movs	r5, r3
 80159ce:	9006      	str	r0, [sp, #24]
 80159d0:	9107      	str	r1, [sp, #28]
 80159d2:	1124      	asrs	r4, r4, #4
 80159d4:	2c00      	cmp	r4, #0
 80159d6:	d000      	beq.n	80159da <_dtoa_r+0x386>
 80159d8:	e08c      	b.n	8015af4 <_dtoa_r+0x4a0>
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d1b8      	bne.n	8015950 <_dtoa_r+0x2fc>
 80159de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d100      	bne.n	80159e6 <_dtoa_r+0x392>
 80159e4:	e096      	b.n	8015b14 <_dtoa_r+0x4c0>
 80159e6:	9c06      	ldr	r4, [sp, #24]
 80159e8:	9d07      	ldr	r5, [sp, #28]
 80159ea:	2200      	movs	r2, #0
 80159ec:	4bc3      	ldr	r3, [pc, #780]	; (8015cfc <_dtoa_r+0x6a8>)
 80159ee:	0020      	movs	r0, r4
 80159f0:	0029      	movs	r1, r5
 80159f2:	f7ea fd39 	bl	8000468 <__aeabi_dcmplt>
 80159f6:	2800      	cmp	r0, #0
 80159f8:	d100      	bne.n	80159fc <_dtoa_r+0x3a8>
 80159fa:	e08b      	b.n	8015b14 <_dtoa_r+0x4c0>
 80159fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d100      	bne.n	8015a04 <_dtoa_r+0x3b0>
 8015a02:	e087      	b.n	8015b14 <_dtoa_r+0x4c0>
 8015a04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	dd41      	ble.n	8015a8e <_dtoa_r+0x43a>
 8015a0a:	4bbd      	ldr	r3, [pc, #756]	; (8015d00 <_dtoa_r+0x6ac>)
 8015a0c:	2200      	movs	r2, #0
 8015a0e:	0020      	movs	r0, r4
 8015a10:	0029      	movs	r1, r5
 8015a12:	f7ec fa0f 	bl	8001e34 <__aeabi_dmul>
 8015a16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a18:	9006      	str	r0, [sp, #24]
 8015a1a:	9107      	str	r1, [sp, #28]
 8015a1c:	3301      	adds	r3, #1
 8015a1e:	930e      	str	r3, [sp, #56]	; 0x38
 8015a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a22:	1e7e      	subs	r6, r7, #1
 8015a24:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015a26:	9310      	str	r3, [sp, #64]	; 0x40
 8015a28:	f7ed f810 	bl	8002a4c <__aeabi_i2d>
 8015a2c:	9a06      	ldr	r2, [sp, #24]
 8015a2e:	9b07      	ldr	r3, [sp, #28]
 8015a30:	f7ec fa00 	bl	8001e34 <__aeabi_dmul>
 8015a34:	2200      	movs	r2, #0
 8015a36:	4bb3      	ldr	r3, [pc, #716]	; (8015d04 <_dtoa_r+0x6b0>)
 8015a38:	f7eb fad6 	bl	8000fe8 <__aeabi_dadd>
 8015a3c:	4ab2      	ldr	r2, [pc, #712]	; (8015d08 <_dtoa_r+0x6b4>)
 8015a3e:	900e      	str	r0, [sp, #56]	; 0x38
 8015a40:	910f      	str	r1, [sp, #60]	; 0x3c
 8015a42:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015a44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015a46:	4694      	mov	ip, r2
 8015a48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a4a:	4463      	add	r3, ip
 8015a4c:	9315      	str	r3, [sp, #84]	; 0x54
 8015a4e:	001d      	movs	r5, r3
 8015a50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d161      	bne.n	8015b1a <_dtoa_r+0x4c6>
 8015a56:	9806      	ldr	r0, [sp, #24]
 8015a58:	9907      	ldr	r1, [sp, #28]
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	4bab      	ldr	r3, [pc, #684]	; (8015d0c <_dtoa_r+0x6b8>)
 8015a5e:	f7ec fc5b 	bl	8002318 <__aeabi_dsub>
 8015a62:	0022      	movs	r2, r4
 8015a64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a66:	9006      	str	r0, [sp, #24]
 8015a68:	9107      	str	r1, [sp, #28]
 8015a6a:	f7ea fd11 	bl	8000490 <__aeabi_dcmpgt>
 8015a6e:	2800      	cmp	r0, #0
 8015a70:	d000      	beq.n	8015a74 <_dtoa_r+0x420>
 8015a72:	e2aa      	b.n	8015fca <_dtoa_r+0x976>
 8015a74:	48a6      	ldr	r0, [pc, #664]	; (8015d10 <_dtoa_r+0x6bc>)
 8015a76:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015a78:	4684      	mov	ip, r0
 8015a7a:	4461      	add	r1, ip
 8015a7c:	000b      	movs	r3, r1
 8015a7e:	9806      	ldr	r0, [sp, #24]
 8015a80:	9907      	ldr	r1, [sp, #28]
 8015a82:	0022      	movs	r2, r4
 8015a84:	f7ea fcf0 	bl	8000468 <__aeabi_dcmplt>
 8015a88:	2800      	cmp	r0, #0
 8015a8a:	d000      	beq.n	8015a8e <_dtoa_r+0x43a>
 8015a8c:	e297      	b.n	8015fbe <_dtoa_r+0x96a>
 8015a8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015a90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015a92:	9306      	str	r3, [sp, #24]
 8015a94:	9407      	str	r4, [sp, #28]
 8015a96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	da00      	bge.n	8015a9e <_dtoa_r+0x44a>
 8015a9c:	e15e      	b.n	8015d5c <_dtoa_r+0x708>
 8015a9e:	2f0e      	cmp	r7, #14
 8015aa0:	dd00      	ble.n	8015aa4 <_dtoa_r+0x450>
 8015aa2:	e15b      	b.n	8015d5c <_dtoa_r+0x708>
 8015aa4:	4b94      	ldr	r3, [pc, #592]	; (8015cf8 <_dtoa_r+0x6a4>)
 8015aa6:	00fa      	lsls	r2, r7, #3
 8015aa8:	189b      	adds	r3, r3, r2
 8015aaa:	685c      	ldr	r4, [r3, #4]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	9304      	str	r3, [sp, #16]
 8015ab0:	9405      	str	r4, [sp, #20]
 8015ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	db00      	blt.n	8015aba <_dtoa_r+0x466>
 8015ab8:	e0da      	b.n	8015c70 <_dtoa_r+0x61c>
 8015aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	dd00      	ble.n	8015ac2 <_dtoa_r+0x46e>
 8015ac0:	e0d6      	b.n	8015c70 <_dtoa_r+0x61c>
 8015ac2:	d000      	beq.n	8015ac6 <_dtoa_r+0x472>
 8015ac4:	e27f      	b.n	8015fc6 <_dtoa_r+0x972>
 8015ac6:	9804      	ldr	r0, [sp, #16]
 8015ac8:	9905      	ldr	r1, [sp, #20]
 8015aca:	2200      	movs	r2, #0
 8015acc:	4b8f      	ldr	r3, [pc, #572]	; (8015d0c <_dtoa_r+0x6b8>)
 8015ace:	f7ec f9b1 	bl	8001e34 <__aeabi_dmul>
 8015ad2:	9a06      	ldr	r2, [sp, #24]
 8015ad4:	9b07      	ldr	r3, [sp, #28]
 8015ad6:	f7ea fce5 	bl	80004a4 <__aeabi_dcmpge>
 8015ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015adc:	9304      	str	r3, [sp, #16]
 8015ade:	001e      	movs	r6, r3
 8015ae0:	2800      	cmp	r0, #0
 8015ae2:	d000      	beq.n	8015ae6 <_dtoa_r+0x492>
 8015ae4:	e251      	b.n	8015f8a <_dtoa_r+0x936>
 8015ae6:	9b08      	ldr	r3, [sp, #32]
 8015ae8:	9a08      	ldr	r2, [sp, #32]
 8015aea:	1c5d      	adds	r5, r3, #1
 8015aec:	2331      	movs	r3, #49	; 0x31
 8015aee:	3701      	adds	r7, #1
 8015af0:	7013      	strb	r3, [r2, #0]
 8015af2:	e24d      	b.n	8015f90 <_dtoa_r+0x93c>
 8015af4:	4234      	tst	r4, r6
 8015af6:	d00a      	beq.n	8015b0e <_dtoa_r+0x4ba>
 8015af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015afa:	4a86      	ldr	r2, [pc, #536]	; (8015d14 <_dtoa_r+0x6c0>)
 8015afc:	3301      	adds	r3, #1
 8015afe:	930e      	str	r3, [sp, #56]	; 0x38
 8015b00:	00eb      	lsls	r3, r5, #3
 8015b02:	189b      	adds	r3, r3, r2
 8015b04:	681a      	ldr	r2, [r3, #0]
 8015b06:	685b      	ldr	r3, [r3, #4]
 8015b08:	f7ec f994 	bl	8001e34 <__aeabi_dmul>
 8015b0c:	0033      	movs	r3, r6
 8015b0e:	1064      	asrs	r4, r4, #1
 8015b10:	3501      	adds	r5, #1
 8015b12:	e75f      	b.n	80159d4 <_dtoa_r+0x380>
 8015b14:	003e      	movs	r6, r7
 8015b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b18:	e784      	b.n	8015a24 <_dtoa_r+0x3d0>
 8015b1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b1c:	1e5a      	subs	r2, r3, #1
 8015b1e:	4b76      	ldr	r3, [pc, #472]	; (8015cf8 <_dtoa_r+0x6a4>)
 8015b20:	00d2      	lsls	r2, r2, #3
 8015b22:	189b      	adds	r3, r3, r2
 8015b24:	6818      	ldr	r0, [r3, #0]
 8015b26:	6859      	ldr	r1, [r3, #4]
 8015b28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d04b      	beq.n	8015bc6 <_dtoa_r+0x572>
 8015b2e:	0002      	movs	r2, r0
 8015b30:	000b      	movs	r3, r1
 8015b32:	2000      	movs	r0, #0
 8015b34:	4978      	ldr	r1, [pc, #480]	; (8015d18 <_dtoa_r+0x6c4>)
 8015b36:	f7eb fd73 	bl	8001620 <__aeabi_ddiv>
 8015b3a:	002b      	movs	r3, r5
 8015b3c:	0022      	movs	r2, r4
 8015b3e:	f7ec fbeb 	bl	8002318 <__aeabi_dsub>
 8015b42:	9b08      	ldr	r3, [sp, #32]
 8015b44:	900e      	str	r0, [sp, #56]	; 0x38
 8015b46:	910f      	str	r1, [sp, #60]	; 0x3c
 8015b48:	9315      	str	r3, [sp, #84]	; 0x54
 8015b4a:	9806      	ldr	r0, [sp, #24]
 8015b4c:	9907      	ldr	r1, [sp, #28]
 8015b4e:	f7ec ff47 	bl	80029e0 <__aeabi_d2iz>
 8015b52:	0004      	movs	r4, r0
 8015b54:	f7ec ff7a 	bl	8002a4c <__aeabi_i2d>
 8015b58:	0002      	movs	r2, r0
 8015b5a:	000b      	movs	r3, r1
 8015b5c:	9806      	ldr	r0, [sp, #24]
 8015b5e:	9907      	ldr	r1, [sp, #28]
 8015b60:	f7ec fbda 	bl	8002318 <__aeabi_dsub>
 8015b64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b66:	3430      	adds	r4, #48	; 0x30
 8015b68:	1c5d      	adds	r5, r3, #1
 8015b6a:	701c      	strb	r4, [r3, #0]
 8015b6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b70:	9006      	str	r0, [sp, #24]
 8015b72:	9107      	str	r1, [sp, #28]
 8015b74:	f7ea fc78 	bl	8000468 <__aeabi_dcmplt>
 8015b78:	2800      	cmp	r0, #0
 8015b7a:	d16c      	bne.n	8015c56 <_dtoa_r+0x602>
 8015b7c:	9a06      	ldr	r2, [sp, #24]
 8015b7e:	9b07      	ldr	r3, [sp, #28]
 8015b80:	2000      	movs	r0, #0
 8015b82:	495e      	ldr	r1, [pc, #376]	; (8015cfc <_dtoa_r+0x6a8>)
 8015b84:	f7ec fbc8 	bl	8002318 <__aeabi_dsub>
 8015b88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015b8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b8c:	f7ea fc6c 	bl	8000468 <__aeabi_dcmplt>
 8015b90:	2800      	cmp	r0, #0
 8015b92:	d000      	beq.n	8015b96 <_dtoa_r+0x542>
 8015b94:	e0c3      	b.n	8015d1e <_dtoa_r+0x6ca>
 8015b96:	9b08      	ldr	r3, [sp, #32]
 8015b98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015b9a:	1aeb      	subs	r3, r5, r3
 8015b9c:	429a      	cmp	r2, r3
 8015b9e:	dc00      	bgt.n	8015ba2 <_dtoa_r+0x54e>
 8015ba0:	e775      	b.n	8015a8e <_dtoa_r+0x43a>
 8015ba2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015ba4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	4b55      	ldr	r3, [pc, #340]	; (8015d00 <_dtoa_r+0x6ac>)
 8015baa:	f7ec f943 	bl	8001e34 <__aeabi_dmul>
 8015bae:	2200      	movs	r2, #0
 8015bb0:	900e      	str	r0, [sp, #56]	; 0x38
 8015bb2:	910f      	str	r1, [sp, #60]	; 0x3c
 8015bb4:	9806      	ldr	r0, [sp, #24]
 8015bb6:	9907      	ldr	r1, [sp, #28]
 8015bb8:	4b51      	ldr	r3, [pc, #324]	; (8015d00 <_dtoa_r+0x6ac>)
 8015bba:	f7ec f93b 	bl	8001e34 <__aeabi_dmul>
 8015bbe:	9515      	str	r5, [sp, #84]	; 0x54
 8015bc0:	9006      	str	r0, [sp, #24]
 8015bc2:	9107      	str	r1, [sp, #28]
 8015bc4:	e7c1      	b.n	8015b4a <_dtoa_r+0x4f6>
 8015bc6:	0022      	movs	r2, r4
 8015bc8:	002b      	movs	r3, r5
 8015bca:	f7ec f933 	bl	8001e34 <__aeabi_dmul>
 8015bce:	9c08      	ldr	r4, [sp, #32]
 8015bd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015bd2:	0023      	movs	r3, r4
 8015bd4:	4694      	mov	ip, r2
 8015bd6:	900e      	str	r0, [sp, #56]	; 0x38
 8015bd8:	910f      	str	r1, [sp, #60]	; 0x3c
 8015bda:	4463      	add	r3, ip
 8015bdc:	9315      	str	r3, [sp, #84]	; 0x54
 8015bde:	9806      	ldr	r0, [sp, #24]
 8015be0:	9907      	ldr	r1, [sp, #28]
 8015be2:	f7ec fefd 	bl	80029e0 <__aeabi_d2iz>
 8015be6:	0005      	movs	r5, r0
 8015be8:	f7ec ff30 	bl	8002a4c <__aeabi_i2d>
 8015bec:	000b      	movs	r3, r1
 8015bee:	0002      	movs	r2, r0
 8015bf0:	9806      	ldr	r0, [sp, #24]
 8015bf2:	9907      	ldr	r1, [sp, #28]
 8015bf4:	f7ec fb90 	bl	8002318 <__aeabi_dsub>
 8015bf8:	3530      	adds	r5, #48	; 0x30
 8015bfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015bfc:	7025      	strb	r5, [r4, #0]
 8015bfe:	3401      	adds	r4, #1
 8015c00:	9006      	str	r0, [sp, #24]
 8015c02:	9107      	str	r1, [sp, #28]
 8015c04:	42a3      	cmp	r3, r4
 8015c06:	d12a      	bne.n	8015c5e <_dtoa_r+0x60a>
 8015c08:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015c0a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015c0c:	9a08      	ldr	r2, [sp, #32]
 8015c0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c10:	4694      	mov	ip, r2
 8015c12:	4463      	add	r3, ip
 8015c14:	2200      	movs	r2, #0
 8015c16:	001d      	movs	r5, r3
 8015c18:	4b3f      	ldr	r3, [pc, #252]	; (8015d18 <_dtoa_r+0x6c4>)
 8015c1a:	f7eb f9e5 	bl	8000fe8 <__aeabi_dadd>
 8015c1e:	0002      	movs	r2, r0
 8015c20:	000b      	movs	r3, r1
 8015c22:	9806      	ldr	r0, [sp, #24]
 8015c24:	9907      	ldr	r1, [sp, #28]
 8015c26:	f7ea fc33 	bl	8000490 <__aeabi_dcmpgt>
 8015c2a:	2800      	cmp	r0, #0
 8015c2c:	d000      	beq.n	8015c30 <_dtoa_r+0x5dc>
 8015c2e:	e076      	b.n	8015d1e <_dtoa_r+0x6ca>
 8015c30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c34:	2000      	movs	r0, #0
 8015c36:	4938      	ldr	r1, [pc, #224]	; (8015d18 <_dtoa_r+0x6c4>)
 8015c38:	f7ec fb6e 	bl	8002318 <__aeabi_dsub>
 8015c3c:	0002      	movs	r2, r0
 8015c3e:	000b      	movs	r3, r1
 8015c40:	9806      	ldr	r0, [sp, #24]
 8015c42:	9907      	ldr	r1, [sp, #28]
 8015c44:	f7ea fc10 	bl	8000468 <__aeabi_dcmplt>
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	d100      	bne.n	8015c4e <_dtoa_r+0x5fa>
 8015c4c:	e71f      	b.n	8015a8e <_dtoa_r+0x43a>
 8015c4e:	1e6b      	subs	r3, r5, #1
 8015c50:	781a      	ldrb	r2, [r3, #0]
 8015c52:	2a30      	cmp	r2, #48	; 0x30
 8015c54:	d001      	beq.n	8015c5a <_dtoa_r+0x606>
 8015c56:	0037      	movs	r7, r6
 8015c58:	e03f      	b.n	8015cda <_dtoa_r+0x686>
 8015c5a:	001d      	movs	r5, r3
 8015c5c:	e7f7      	b.n	8015c4e <_dtoa_r+0x5fa>
 8015c5e:	9806      	ldr	r0, [sp, #24]
 8015c60:	9907      	ldr	r1, [sp, #28]
 8015c62:	2200      	movs	r2, #0
 8015c64:	4b26      	ldr	r3, [pc, #152]	; (8015d00 <_dtoa_r+0x6ac>)
 8015c66:	f7ec f8e5 	bl	8001e34 <__aeabi_dmul>
 8015c6a:	9006      	str	r0, [sp, #24]
 8015c6c:	9107      	str	r1, [sp, #28]
 8015c6e:	e7b6      	b.n	8015bde <_dtoa_r+0x58a>
 8015c70:	9e08      	ldr	r6, [sp, #32]
 8015c72:	9a04      	ldr	r2, [sp, #16]
 8015c74:	9b05      	ldr	r3, [sp, #20]
 8015c76:	9806      	ldr	r0, [sp, #24]
 8015c78:	9907      	ldr	r1, [sp, #28]
 8015c7a:	f7eb fcd1 	bl	8001620 <__aeabi_ddiv>
 8015c7e:	f7ec feaf 	bl	80029e0 <__aeabi_d2iz>
 8015c82:	0004      	movs	r4, r0
 8015c84:	f7ec fee2 	bl	8002a4c <__aeabi_i2d>
 8015c88:	9a04      	ldr	r2, [sp, #16]
 8015c8a:	9b05      	ldr	r3, [sp, #20]
 8015c8c:	f7ec f8d2 	bl	8001e34 <__aeabi_dmul>
 8015c90:	0002      	movs	r2, r0
 8015c92:	000b      	movs	r3, r1
 8015c94:	9806      	ldr	r0, [sp, #24]
 8015c96:	9907      	ldr	r1, [sp, #28]
 8015c98:	f7ec fb3e 	bl	8002318 <__aeabi_dsub>
 8015c9c:	0023      	movs	r3, r4
 8015c9e:	3330      	adds	r3, #48	; 0x30
 8015ca0:	7033      	strb	r3, [r6, #0]
 8015ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ca4:	9b08      	ldr	r3, [sp, #32]
 8015ca6:	1c75      	adds	r5, r6, #1
 8015ca8:	1aeb      	subs	r3, r5, r3
 8015caa:	429a      	cmp	r2, r3
 8015cac:	d148      	bne.n	8015d40 <_dtoa_r+0x6ec>
 8015cae:	0002      	movs	r2, r0
 8015cb0:	000b      	movs	r3, r1
 8015cb2:	f7eb f999 	bl	8000fe8 <__aeabi_dadd>
 8015cb6:	9a04      	ldr	r2, [sp, #16]
 8015cb8:	9b05      	ldr	r3, [sp, #20]
 8015cba:	9006      	str	r0, [sp, #24]
 8015cbc:	9107      	str	r1, [sp, #28]
 8015cbe:	f7ea fbe7 	bl	8000490 <__aeabi_dcmpgt>
 8015cc2:	2800      	cmp	r0, #0
 8015cc4:	d12a      	bne.n	8015d1c <_dtoa_r+0x6c8>
 8015cc6:	9a04      	ldr	r2, [sp, #16]
 8015cc8:	9b05      	ldr	r3, [sp, #20]
 8015cca:	9806      	ldr	r0, [sp, #24]
 8015ccc:	9907      	ldr	r1, [sp, #28]
 8015cce:	f7ea fbc5 	bl	800045c <__aeabi_dcmpeq>
 8015cd2:	2800      	cmp	r0, #0
 8015cd4:	d001      	beq.n	8015cda <_dtoa_r+0x686>
 8015cd6:	07e3      	lsls	r3, r4, #31
 8015cd8:	d420      	bmi.n	8015d1c <_dtoa_r+0x6c8>
 8015cda:	9903      	ldr	r1, [sp, #12]
 8015cdc:	9802      	ldr	r0, [sp, #8]
 8015cde:	f000 ff35 	bl	8016b4c <_Bfree>
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	702b      	strb	r3, [r5, #0]
 8015ce6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015ce8:	3701      	adds	r7, #1
 8015cea:	601f      	str	r7, [r3, #0]
 8015cec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d100      	bne.n	8015cf4 <_dtoa_r+0x6a0>
 8015cf2:	e4e4      	b.n	80156be <_dtoa_r+0x6a>
 8015cf4:	601d      	str	r5, [r3, #0]
 8015cf6:	e4e2      	b.n	80156be <_dtoa_r+0x6a>
 8015cf8:	0801a7a0 	.word	0x0801a7a0
 8015cfc:	3ff00000 	.word	0x3ff00000
 8015d00:	40240000 	.word	0x40240000
 8015d04:	401c0000 	.word	0x401c0000
 8015d08:	fcc00000 	.word	0xfcc00000
 8015d0c:	40140000 	.word	0x40140000
 8015d10:	7cc00000 	.word	0x7cc00000
 8015d14:	0801a778 	.word	0x0801a778
 8015d18:	3fe00000 	.word	0x3fe00000
 8015d1c:	003e      	movs	r6, r7
 8015d1e:	1e6b      	subs	r3, r5, #1
 8015d20:	781a      	ldrb	r2, [r3, #0]
 8015d22:	2a39      	cmp	r2, #57	; 0x39
 8015d24:	d106      	bne.n	8015d34 <_dtoa_r+0x6e0>
 8015d26:	9a08      	ldr	r2, [sp, #32]
 8015d28:	429a      	cmp	r2, r3
 8015d2a:	d107      	bne.n	8015d3c <_dtoa_r+0x6e8>
 8015d2c:	2330      	movs	r3, #48	; 0x30
 8015d2e:	7013      	strb	r3, [r2, #0]
 8015d30:	0013      	movs	r3, r2
 8015d32:	3601      	adds	r6, #1
 8015d34:	781a      	ldrb	r2, [r3, #0]
 8015d36:	3201      	adds	r2, #1
 8015d38:	701a      	strb	r2, [r3, #0]
 8015d3a:	e78c      	b.n	8015c56 <_dtoa_r+0x602>
 8015d3c:	001d      	movs	r5, r3
 8015d3e:	e7ee      	b.n	8015d1e <_dtoa_r+0x6ca>
 8015d40:	2200      	movs	r2, #0
 8015d42:	4ba4      	ldr	r3, [pc, #656]	; (8015fd4 <_dtoa_r+0x980>)
 8015d44:	f7ec f876 	bl	8001e34 <__aeabi_dmul>
 8015d48:	2200      	movs	r2, #0
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	9006      	str	r0, [sp, #24]
 8015d4e:	9107      	str	r1, [sp, #28]
 8015d50:	002e      	movs	r6, r5
 8015d52:	f7ea fb83 	bl	800045c <__aeabi_dcmpeq>
 8015d56:	2800      	cmp	r0, #0
 8015d58:	d08b      	beq.n	8015c72 <_dtoa_r+0x61e>
 8015d5a:	e7be      	b.n	8015cda <_dtoa_r+0x686>
 8015d5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015d5e:	2a00      	cmp	r2, #0
 8015d60:	d100      	bne.n	8015d64 <_dtoa_r+0x710>
 8015d62:	e0da      	b.n	8015f1a <_dtoa_r+0x8c6>
 8015d64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015d66:	2a01      	cmp	r2, #1
 8015d68:	dd00      	ble.n	8015d6c <_dtoa_r+0x718>
 8015d6a:	e0bd      	b.n	8015ee8 <_dtoa_r+0x894>
 8015d6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015d6e:	2a00      	cmp	r2, #0
 8015d70:	d100      	bne.n	8015d74 <_dtoa_r+0x720>
 8015d72:	e0b5      	b.n	8015ee0 <_dtoa_r+0x88c>
 8015d74:	4a98      	ldr	r2, [pc, #608]	; (8015fd8 <_dtoa_r+0x984>)
 8015d76:	189b      	adds	r3, r3, r2
 8015d78:	9d04      	ldr	r5, [sp, #16]
 8015d7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d7e:	2101      	movs	r1, #1
 8015d80:	18d2      	adds	r2, r2, r3
 8015d82:	920a      	str	r2, [sp, #40]	; 0x28
 8015d84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d86:	9802      	ldr	r0, [sp, #8]
 8015d88:	18d3      	adds	r3, r2, r3
 8015d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d8c:	f000 ffad 	bl	8016cea <__i2b>
 8015d90:	0006      	movs	r6, r0
 8015d92:	2c00      	cmp	r4, #0
 8015d94:	dd0e      	ble.n	8015db4 <_dtoa_r+0x760>
 8015d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	dd0b      	ble.n	8015db4 <_dtoa_r+0x760>
 8015d9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d9e:	0023      	movs	r3, r4
 8015da0:	4294      	cmp	r4, r2
 8015da2:	dd00      	ble.n	8015da6 <_dtoa_r+0x752>
 8015da4:	0013      	movs	r3, r2
 8015da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015da8:	1ae4      	subs	r4, r4, r3
 8015daa:	1ad2      	subs	r2, r2, r3
 8015dac:	920a      	str	r2, [sp, #40]	; 0x28
 8015dae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015db0:	1ad3      	subs	r3, r2, r3
 8015db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8015db4:	9b04      	ldr	r3, [sp, #16]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d01f      	beq.n	8015dfa <_dtoa_r+0x7a6>
 8015dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d100      	bne.n	8015dc2 <_dtoa_r+0x76e>
 8015dc0:	e0af      	b.n	8015f22 <_dtoa_r+0x8ce>
 8015dc2:	2d00      	cmp	r5, #0
 8015dc4:	d011      	beq.n	8015dea <_dtoa_r+0x796>
 8015dc6:	0031      	movs	r1, r6
 8015dc8:	002a      	movs	r2, r5
 8015dca:	9802      	ldr	r0, [sp, #8]
 8015dcc:	f001 f826 	bl	8016e1c <__pow5mult>
 8015dd0:	9a03      	ldr	r2, [sp, #12]
 8015dd2:	0001      	movs	r1, r0
 8015dd4:	0006      	movs	r6, r0
 8015dd6:	9802      	ldr	r0, [sp, #8]
 8015dd8:	f000 ff90 	bl	8016cfc <__multiply>
 8015ddc:	9903      	ldr	r1, [sp, #12]
 8015dde:	9010      	str	r0, [sp, #64]	; 0x40
 8015de0:	9802      	ldr	r0, [sp, #8]
 8015de2:	f000 feb3 	bl	8016b4c <_Bfree>
 8015de6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015de8:	9303      	str	r3, [sp, #12]
 8015dea:	9b04      	ldr	r3, [sp, #16]
 8015dec:	1b5a      	subs	r2, r3, r5
 8015dee:	d004      	beq.n	8015dfa <_dtoa_r+0x7a6>
 8015df0:	9903      	ldr	r1, [sp, #12]
 8015df2:	9802      	ldr	r0, [sp, #8]
 8015df4:	f001 f812 	bl	8016e1c <__pow5mult>
 8015df8:	9003      	str	r0, [sp, #12]
 8015dfa:	2101      	movs	r1, #1
 8015dfc:	9802      	ldr	r0, [sp, #8]
 8015dfe:	f000 ff74 	bl	8016cea <__i2b>
 8015e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e04:	9004      	str	r0, [sp, #16]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d100      	bne.n	8015e0c <_dtoa_r+0x7b8>
 8015e0a:	e1e3      	b.n	80161d4 <_dtoa_r+0xb80>
 8015e0c:	001a      	movs	r2, r3
 8015e0e:	0001      	movs	r1, r0
 8015e10:	9802      	ldr	r0, [sp, #8]
 8015e12:	f001 f803 	bl	8016e1c <__pow5mult>
 8015e16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015e18:	9004      	str	r0, [sp, #16]
 8015e1a:	2b01      	cmp	r3, #1
 8015e1c:	dd00      	ble.n	8015e20 <_dtoa_r+0x7cc>
 8015e1e:	e082      	b.n	8015f26 <_dtoa_r+0x8d2>
 8015e20:	2500      	movs	r5, #0
 8015e22:	9b06      	ldr	r3, [sp, #24]
 8015e24:	42ab      	cmp	r3, r5
 8015e26:	d10e      	bne.n	8015e46 <_dtoa_r+0x7f2>
 8015e28:	9b07      	ldr	r3, [sp, #28]
 8015e2a:	031b      	lsls	r3, r3, #12
 8015e2c:	42ab      	cmp	r3, r5
 8015e2e:	d10a      	bne.n	8015e46 <_dtoa_r+0x7f2>
 8015e30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e32:	9a07      	ldr	r2, [sp, #28]
 8015e34:	4213      	tst	r3, r2
 8015e36:	d006      	beq.n	8015e46 <_dtoa_r+0x7f2>
 8015e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e3a:	3501      	adds	r5, #1
 8015e3c:	3301      	adds	r3, #1
 8015e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8015e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e42:	3301      	adds	r3, #1
 8015e44:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e48:	2001      	movs	r0, #1
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d16c      	bne.n	8015f28 <_dtoa_r+0x8d4>
 8015e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e50:	1818      	adds	r0, r3, r0
 8015e52:	231f      	movs	r3, #31
 8015e54:	4018      	ands	r0, r3
 8015e56:	d07e      	beq.n	8015f56 <_dtoa_r+0x902>
 8015e58:	3301      	adds	r3, #1
 8015e5a:	1a1b      	subs	r3, r3, r0
 8015e5c:	2b04      	cmp	r3, #4
 8015e5e:	dd70      	ble.n	8015f42 <_dtoa_r+0x8ee>
 8015e60:	231c      	movs	r3, #28
 8015e62:	1a18      	subs	r0, r3, r0
 8015e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e66:	1824      	adds	r4, r4, r0
 8015e68:	181b      	adds	r3, r3, r0
 8015e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8015e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e6e:	181b      	adds	r3, r3, r0
 8015e70:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	dd05      	ble.n	8015e84 <_dtoa_r+0x830>
 8015e78:	001a      	movs	r2, r3
 8015e7a:	9903      	ldr	r1, [sp, #12]
 8015e7c:	9802      	ldr	r0, [sp, #8]
 8015e7e:	f001 f80f 	bl	8016ea0 <__lshift>
 8015e82:	9003      	str	r0, [sp, #12]
 8015e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	dd05      	ble.n	8015e96 <_dtoa_r+0x842>
 8015e8a:	001a      	movs	r2, r3
 8015e8c:	9904      	ldr	r1, [sp, #16]
 8015e8e:	9802      	ldr	r0, [sp, #8]
 8015e90:	f001 f806 	bl	8016ea0 <__lshift>
 8015e94:	9004      	str	r0, [sp, #16]
 8015e96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d05e      	beq.n	8015f5a <_dtoa_r+0x906>
 8015e9c:	9904      	ldr	r1, [sp, #16]
 8015e9e:	9803      	ldr	r0, [sp, #12]
 8015ea0:	f001 f850 	bl	8016f44 <__mcmp>
 8015ea4:	2800      	cmp	r0, #0
 8015ea6:	da58      	bge.n	8015f5a <_dtoa_r+0x906>
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	220a      	movs	r2, #10
 8015eac:	9903      	ldr	r1, [sp, #12]
 8015eae:	9802      	ldr	r0, [sp, #8]
 8015eb0:	f000 fe56 	bl	8016b60 <__multadd>
 8015eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015eb6:	3f01      	subs	r7, #1
 8015eb8:	9003      	str	r0, [sp, #12]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d100      	bne.n	8015ec0 <_dtoa_r+0x86c>
 8015ebe:	e190      	b.n	80161e2 <_dtoa_r+0xb8e>
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	0031      	movs	r1, r6
 8015ec4:	220a      	movs	r2, #10
 8015ec6:	9802      	ldr	r0, [sp, #8]
 8015ec8:	f000 fe4a 	bl	8016b60 <__multadd>
 8015ecc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ece:	0006      	movs	r6, r0
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	dd00      	ble.n	8015ed6 <_dtoa_r+0x882>
 8015ed4:	e088      	b.n	8015fe8 <_dtoa_r+0x994>
 8015ed6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015ed8:	2b02      	cmp	r3, #2
 8015eda:	dc00      	bgt.n	8015ede <_dtoa_r+0x88a>
 8015edc:	e084      	b.n	8015fe8 <_dtoa_r+0x994>
 8015ede:	e044      	b.n	8015f6a <_dtoa_r+0x916>
 8015ee0:	2336      	movs	r3, #54	; 0x36
 8015ee2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015ee4:	1a9b      	subs	r3, r3, r2
 8015ee6:	e747      	b.n	8015d78 <_dtoa_r+0x724>
 8015ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eea:	1e5d      	subs	r5, r3, #1
 8015eec:	9b04      	ldr	r3, [sp, #16]
 8015eee:	42ab      	cmp	r3, r5
 8015ef0:	db08      	blt.n	8015f04 <_dtoa_r+0x8b0>
 8015ef2:	1b5d      	subs	r5, r3, r5
 8015ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	da0c      	bge.n	8015f14 <_dtoa_r+0x8c0>
 8015efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015efe:	1a9c      	subs	r4, r3, r2
 8015f00:	2300      	movs	r3, #0
 8015f02:	e73b      	b.n	8015d7c <_dtoa_r+0x728>
 8015f04:	9b04      	ldr	r3, [sp, #16]
 8015f06:	9504      	str	r5, [sp, #16]
 8015f08:	1aea      	subs	r2, r5, r3
 8015f0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f0c:	2500      	movs	r5, #0
 8015f0e:	189b      	adds	r3, r3, r2
 8015f10:	9311      	str	r3, [sp, #68]	; 0x44
 8015f12:	e7ef      	b.n	8015ef4 <_dtoa_r+0x8a0>
 8015f14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f18:	e730      	b.n	8015d7c <_dtoa_r+0x728>
 8015f1a:	9d04      	ldr	r5, [sp, #16]
 8015f1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015f1e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015f20:	e737      	b.n	8015d92 <_dtoa_r+0x73e>
 8015f22:	9a04      	ldr	r2, [sp, #16]
 8015f24:	e764      	b.n	8015df0 <_dtoa_r+0x79c>
 8015f26:	2500      	movs	r5, #0
 8015f28:	9b04      	ldr	r3, [sp, #16]
 8015f2a:	9a04      	ldr	r2, [sp, #16]
 8015f2c:	691b      	ldr	r3, [r3, #16]
 8015f2e:	9310      	str	r3, [sp, #64]	; 0x40
 8015f30:	3303      	adds	r3, #3
 8015f32:	009b      	lsls	r3, r3, #2
 8015f34:	18d3      	adds	r3, r2, r3
 8015f36:	6858      	ldr	r0, [r3, #4]
 8015f38:	f000 fe8e 	bl	8016c58 <__hi0bits>
 8015f3c:	2320      	movs	r3, #32
 8015f3e:	1a18      	subs	r0, r3, r0
 8015f40:	e785      	b.n	8015e4e <_dtoa_r+0x7fa>
 8015f42:	2b04      	cmp	r3, #4
 8015f44:	d095      	beq.n	8015e72 <_dtoa_r+0x81e>
 8015f46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015f48:	331c      	adds	r3, #28
 8015f4a:	18d2      	adds	r2, r2, r3
 8015f4c:	920a      	str	r2, [sp, #40]	; 0x28
 8015f4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015f50:	18e4      	adds	r4, r4, r3
 8015f52:	18d3      	adds	r3, r2, r3
 8015f54:	e78c      	b.n	8015e70 <_dtoa_r+0x81c>
 8015f56:	0003      	movs	r3, r0
 8015f58:	e7f5      	b.n	8015f46 <_dtoa_r+0x8f2>
 8015f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	dc3d      	bgt.n	8015fdc <_dtoa_r+0x988>
 8015f60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015f62:	2b02      	cmp	r3, #2
 8015f64:	dd3a      	ble.n	8015fdc <_dtoa_r+0x988>
 8015f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f68:	930c      	str	r3, [sp, #48]	; 0x30
 8015f6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d10c      	bne.n	8015f8a <_dtoa_r+0x936>
 8015f70:	9904      	ldr	r1, [sp, #16]
 8015f72:	2205      	movs	r2, #5
 8015f74:	9802      	ldr	r0, [sp, #8]
 8015f76:	f000 fdf3 	bl	8016b60 <__multadd>
 8015f7a:	9004      	str	r0, [sp, #16]
 8015f7c:	0001      	movs	r1, r0
 8015f7e:	9803      	ldr	r0, [sp, #12]
 8015f80:	f000 ffe0 	bl	8016f44 <__mcmp>
 8015f84:	2800      	cmp	r0, #0
 8015f86:	dd00      	ble.n	8015f8a <_dtoa_r+0x936>
 8015f88:	e5ad      	b.n	8015ae6 <_dtoa_r+0x492>
 8015f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015f8c:	9d08      	ldr	r5, [sp, #32]
 8015f8e:	43df      	mvns	r7, r3
 8015f90:	2300      	movs	r3, #0
 8015f92:	9309      	str	r3, [sp, #36]	; 0x24
 8015f94:	9904      	ldr	r1, [sp, #16]
 8015f96:	9802      	ldr	r0, [sp, #8]
 8015f98:	f000 fdd8 	bl	8016b4c <_Bfree>
 8015f9c:	2e00      	cmp	r6, #0
 8015f9e:	d100      	bne.n	8015fa2 <_dtoa_r+0x94e>
 8015fa0:	e69b      	b.n	8015cda <_dtoa_r+0x686>
 8015fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d005      	beq.n	8015fb4 <_dtoa_r+0x960>
 8015fa8:	42b3      	cmp	r3, r6
 8015faa:	d003      	beq.n	8015fb4 <_dtoa_r+0x960>
 8015fac:	0019      	movs	r1, r3
 8015fae:	9802      	ldr	r0, [sp, #8]
 8015fb0:	f000 fdcc 	bl	8016b4c <_Bfree>
 8015fb4:	0031      	movs	r1, r6
 8015fb6:	9802      	ldr	r0, [sp, #8]
 8015fb8:	f000 fdc8 	bl	8016b4c <_Bfree>
 8015fbc:	e68d      	b.n	8015cda <_dtoa_r+0x686>
 8015fbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015fc0:	9304      	str	r3, [sp, #16]
 8015fc2:	001e      	movs	r6, r3
 8015fc4:	e7e1      	b.n	8015f8a <_dtoa_r+0x936>
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	e7fa      	b.n	8015fc0 <_dtoa_r+0x96c>
 8015fca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015fcc:	0037      	movs	r7, r6
 8015fce:	9304      	str	r3, [sp, #16]
 8015fd0:	001e      	movs	r6, r3
 8015fd2:	e588      	b.n	8015ae6 <_dtoa_r+0x492>
 8015fd4:	40240000 	.word	0x40240000
 8015fd8:	00000433 	.word	0x00000433
 8015fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d100      	bne.n	8015fe4 <_dtoa_r+0x990>
 8015fe2:	e0b2      	b.n	801614a <_dtoa_r+0xaf6>
 8015fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fe6:	930c      	str	r3, [sp, #48]	; 0x30
 8015fe8:	2c00      	cmp	r4, #0
 8015fea:	dd05      	ble.n	8015ff8 <_dtoa_r+0x9a4>
 8015fec:	0031      	movs	r1, r6
 8015fee:	0022      	movs	r2, r4
 8015ff0:	9802      	ldr	r0, [sp, #8]
 8015ff2:	f000 ff55 	bl	8016ea0 <__lshift>
 8015ff6:	0006      	movs	r6, r0
 8015ff8:	0030      	movs	r0, r6
 8015ffa:	2d00      	cmp	r5, #0
 8015ffc:	d011      	beq.n	8016022 <_dtoa_r+0x9ce>
 8015ffe:	6871      	ldr	r1, [r6, #4]
 8016000:	9802      	ldr	r0, [sp, #8]
 8016002:	f000 fd7b 	bl	8016afc <_Balloc>
 8016006:	0031      	movs	r1, r6
 8016008:	0004      	movs	r4, r0
 801600a:	6933      	ldr	r3, [r6, #16]
 801600c:	310c      	adds	r1, #12
 801600e:	1c9a      	adds	r2, r3, #2
 8016010:	0092      	lsls	r2, r2, #2
 8016012:	300c      	adds	r0, #12
 8016014:	f7fc fe8b 	bl	8012d2e <memcpy>
 8016018:	2201      	movs	r2, #1
 801601a:	0021      	movs	r1, r4
 801601c:	9802      	ldr	r0, [sp, #8]
 801601e:	f000 ff3f 	bl	8016ea0 <__lshift>
 8016022:	9609      	str	r6, [sp, #36]	; 0x24
 8016024:	0006      	movs	r6, r0
 8016026:	9b08      	ldr	r3, [sp, #32]
 8016028:	930a      	str	r3, [sp, #40]	; 0x28
 801602a:	9904      	ldr	r1, [sp, #16]
 801602c:	9803      	ldr	r0, [sp, #12]
 801602e:	f7ff fa8b 	bl	8015548 <quorem>
 8016032:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016034:	900d      	str	r0, [sp, #52]	; 0x34
 8016036:	0004      	movs	r4, r0
 8016038:	9803      	ldr	r0, [sp, #12]
 801603a:	f000 ff83 	bl	8016f44 <__mcmp>
 801603e:	0032      	movs	r2, r6
 8016040:	9010      	str	r0, [sp, #64]	; 0x40
 8016042:	9904      	ldr	r1, [sp, #16]
 8016044:	9802      	ldr	r0, [sp, #8]
 8016046:	f000 ff97 	bl	8016f78 <__mdiff>
 801604a:	2301      	movs	r3, #1
 801604c:	930b      	str	r3, [sp, #44]	; 0x2c
 801604e:	68c3      	ldr	r3, [r0, #12]
 8016050:	3430      	adds	r4, #48	; 0x30
 8016052:	0005      	movs	r5, r0
 8016054:	2b00      	cmp	r3, #0
 8016056:	d104      	bne.n	8016062 <_dtoa_r+0xa0e>
 8016058:	0001      	movs	r1, r0
 801605a:	9803      	ldr	r0, [sp, #12]
 801605c:	f000 ff72 	bl	8016f44 <__mcmp>
 8016060:	900b      	str	r0, [sp, #44]	; 0x2c
 8016062:	0029      	movs	r1, r5
 8016064:	9802      	ldr	r0, [sp, #8]
 8016066:	f000 fd71 	bl	8016b4c <_Bfree>
 801606a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801606c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801606e:	4313      	orrs	r3, r2
 8016070:	d10e      	bne.n	8016090 <_dtoa_r+0xa3c>
 8016072:	9a06      	ldr	r2, [sp, #24]
 8016074:	3301      	adds	r3, #1
 8016076:	4213      	tst	r3, r2
 8016078:	d10a      	bne.n	8016090 <_dtoa_r+0xa3c>
 801607a:	2c39      	cmp	r4, #57	; 0x39
 801607c:	d026      	beq.n	80160cc <_dtoa_r+0xa78>
 801607e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016080:	2b00      	cmp	r3, #0
 8016082:	dd01      	ble.n	8016088 <_dtoa_r+0xa34>
 8016084:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016086:	3431      	adds	r4, #49	; 0x31
 8016088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801608a:	1c5d      	adds	r5, r3, #1
 801608c:	701c      	strb	r4, [r3, #0]
 801608e:	e781      	b.n	8015f94 <_dtoa_r+0x940>
 8016090:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016092:	2b00      	cmp	r3, #0
 8016094:	db07      	blt.n	80160a6 <_dtoa_r+0xa52>
 8016096:	001d      	movs	r5, r3
 8016098:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801609a:	431d      	orrs	r5, r3
 801609c:	d122      	bne.n	80160e4 <_dtoa_r+0xa90>
 801609e:	2301      	movs	r3, #1
 80160a0:	9a06      	ldr	r2, [sp, #24]
 80160a2:	4213      	tst	r3, r2
 80160a4:	d11e      	bne.n	80160e4 <_dtoa_r+0xa90>
 80160a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	dded      	ble.n	8016088 <_dtoa_r+0xa34>
 80160ac:	9903      	ldr	r1, [sp, #12]
 80160ae:	2201      	movs	r2, #1
 80160b0:	9802      	ldr	r0, [sp, #8]
 80160b2:	f000 fef5 	bl	8016ea0 <__lshift>
 80160b6:	9904      	ldr	r1, [sp, #16]
 80160b8:	9003      	str	r0, [sp, #12]
 80160ba:	f000 ff43 	bl	8016f44 <__mcmp>
 80160be:	2800      	cmp	r0, #0
 80160c0:	dc02      	bgt.n	80160c8 <_dtoa_r+0xa74>
 80160c2:	d1e1      	bne.n	8016088 <_dtoa_r+0xa34>
 80160c4:	07e3      	lsls	r3, r4, #31
 80160c6:	d5df      	bpl.n	8016088 <_dtoa_r+0xa34>
 80160c8:	2c39      	cmp	r4, #57	; 0x39
 80160ca:	d1db      	bne.n	8016084 <_dtoa_r+0xa30>
 80160cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160d0:	1c5d      	adds	r5, r3, #1
 80160d2:	2339      	movs	r3, #57	; 0x39
 80160d4:	7013      	strb	r3, [r2, #0]
 80160d6:	1e6b      	subs	r3, r5, #1
 80160d8:	781a      	ldrb	r2, [r3, #0]
 80160da:	2a39      	cmp	r2, #57	; 0x39
 80160dc:	d067      	beq.n	80161ae <_dtoa_r+0xb5a>
 80160de:	3201      	adds	r2, #1
 80160e0:	701a      	strb	r2, [r3, #0]
 80160e2:	e757      	b.n	8015f94 <_dtoa_r+0x940>
 80160e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160e6:	1c5d      	adds	r5, r3, #1
 80160e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	dd04      	ble.n	80160f8 <_dtoa_r+0xaa4>
 80160ee:	2c39      	cmp	r4, #57	; 0x39
 80160f0:	d0ec      	beq.n	80160cc <_dtoa_r+0xa78>
 80160f2:	3401      	adds	r4, #1
 80160f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160f6:	e7c9      	b.n	801608c <_dtoa_r+0xa38>
 80160f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80160fc:	701c      	strb	r4, [r3, #0]
 80160fe:	9b08      	ldr	r3, [sp, #32]
 8016100:	1aeb      	subs	r3, r5, r3
 8016102:	4293      	cmp	r3, r2
 8016104:	d03e      	beq.n	8016184 <_dtoa_r+0xb30>
 8016106:	2300      	movs	r3, #0
 8016108:	220a      	movs	r2, #10
 801610a:	9903      	ldr	r1, [sp, #12]
 801610c:	9802      	ldr	r0, [sp, #8]
 801610e:	f000 fd27 	bl	8016b60 <__multadd>
 8016112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016114:	9003      	str	r0, [sp, #12]
 8016116:	42b3      	cmp	r3, r6
 8016118:	d109      	bne.n	801612e <_dtoa_r+0xada>
 801611a:	2300      	movs	r3, #0
 801611c:	220a      	movs	r2, #10
 801611e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016120:	9802      	ldr	r0, [sp, #8]
 8016122:	f000 fd1d 	bl	8016b60 <__multadd>
 8016126:	9009      	str	r0, [sp, #36]	; 0x24
 8016128:	0006      	movs	r6, r0
 801612a:	950a      	str	r5, [sp, #40]	; 0x28
 801612c:	e77d      	b.n	801602a <_dtoa_r+0x9d6>
 801612e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016130:	2300      	movs	r3, #0
 8016132:	220a      	movs	r2, #10
 8016134:	9802      	ldr	r0, [sp, #8]
 8016136:	f000 fd13 	bl	8016b60 <__multadd>
 801613a:	2300      	movs	r3, #0
 801613c:	9009      	str	r0, [sp, #36]	; 0x24
 801613e:	220a      	movs	r2, #10
 8016140:	0031      	movs	r1, r6
 8016142:	9802      	ldr	r0, [sp, #8]
 8016144:	f000 fd0c 	bl	8016b60 <__multadd>
 8016148:	e7ee      	b.n	8016128 <_dtoa_r+0xad4>
 801614a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801614c:	930c      	str	r3, [sp, #48]	; 0x30
 801614e:	9b08      	ldr	r3, [sp, #32]
 8016150:	9306      	str	r3, [sp, #24]
 8016152:	9904      	ldr	r1, [sp, #16]
 8016154:	9803      	ldr	r0, [sp, #12]
 8016156:	f7ff f9f7 	bl	8015548 <quorem>
 801615a:	9b06      	ldr	r3, [sp, #24]
 801615c:	3030      	adds	r0, #48	; 0x30
 801615e:	1c5d      	adds	r5, r3, #1
 8016160:	7018      	strb	r0, [r3, #0]
 8016162:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016164:	9b08      	ldr	r3, [sp, #32]
 8016166:	0004      	movs	r4, r0
 8016168:	1aeb      	subs	r3, r5, r3
 801616a:	429a      	cmp	r2, r3
 801616c:	dd08      	ble.n	8016180 <_dtoa_r+0xb2c>
 801616e:	2300      	movs	r3, #0
 8016170:	220a      	movs	r2, #10
 8016172:	9903      	ldr	r1, [sp, #12]
 8016174:	9802      	ldr	r0, [sp, #8]
 8016176:	f000 fcf3 	bl	8016b60 <__multadd>
 801617a:	9506      	str	r5, [sp, #24]
 801617c:	9003      	str	r0, [sp, #12]
 801617e:	e7e8      	b.n	8016152 <_dtoa_r+0xafe>
 8016180:	2300      	movs	r3, #0
 8016182:	9309      	str	r3, [sp, #36]	; 0x24
 8016184:	9903      	ldr	r1, [sp, #12]
 8016186:	2201      	movs	r2, #1
 8016188:	9802      	ldr	r0, [sp, #8]
 801618a:	f000 fe89 	bl	8016ea0 <__lshift>
 801618e:	9904      	ldr	r1, [sp, #16]
 8016190:	9003      	str	r0, [sp, #12]
 8016192:	f000 fed7 	bl	8016f44 <__mcmp>
 8016196:	2800      	cmp	r0, #0
 8016198:	dc9d      	bgt.n	80160d6 <_dtoa_r+0xa82>
 801619a:	d101      	bne.n	80161a0 <_dtoa_r+0xb4c>
 801619c:	07e3      	lsls	r3, r4, #31
 801619e:	d49a      	bmi.n	80160d6 <_dtoa_r+0xa82>
 80161a0:	1e6b      	subs	r3, r5, #1
 80161a2:	781a      	ldrb	r2, [r3, #0]
 80161a4:	2a30      	cmp	r2, #48	; 0x30
 80161a6:	d000      	beq.n	80161aa <_dtoa_r+0xb56>
 80161a8:	e6f4      	b.n	8015f94 <_dtoa_r+0x940>
 80161aa:	001d      	movs	r5, r3
 80161ac:	e7f8      	b.n	80161a0 <_dtoa_r+0xb4c>
 80161ae:	9a08      	ldr	r2, [sp, #32]
 80161b0:	429a      	cmp	r2, r3
 80161b2:	d103      	bne.n	80161bc <_dtoa_r+0xb68>
 80161b4:	2331      	movs	r3, #49	; 0x31
 80161b6:	3701      	adds	r7, #1
 80161b8:	7013      	strb	r3, [r2, #0]
 80161ba:	e6eb      	b.n	8015f94 <_dtoa_r+0x940>
 80161bc:	001d      	movs	r5, r3
 80161be:	e78a      	b.n	80160d6 <_dtoa_r+0xa82>
 80161c0:	4b0b      	ldr	r3, [pc, #44]	; (80161f0 <_dtoa_r+0xb9c>)
 80161c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80161c4:	9308      	str	r3, [sp, #32]
 80161c6:	4b0b      	ldr	r3, [pc, #44]	; (80161f4 <_dtoa_r+0xba0>)
 80161c8:	2a00      	cmp	r2, #0
 80161ca:	d001      	beq.n	80161d0 <_dtoa_r+0xb7c>
 80161cc:	f7ff fa75 	bl	80156ba <_dtoa_r+0x66>
 80161d0:	f7ff fa75 	bl	80156be <_dtoa_r+0x6a>
 80161d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80161d6:	2b01      	cmp	r3, #1
 80161d8:	dc00      	bgt.n	80161dc <_dtoa_r+0xb88>
 80161da:	e621      	b.n	8015e20 <_dtoa_r+0x7cc>
 80161dc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80161de:	2001      	movs	r0, #1
 80161e0:	e635      	b.n	8015e4e <_dtoa_r+0x7fa>
 80161e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	dcb2      	bgt.n	801614e <_dtoa_r+0xafa>
 80161e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80161ea:	2b02      	cmp	r3, #2
 80161ec:	ddaf      	ble.n	801614e <_dtoa_r+0xafa>
 80161ee:	e6bc      	b.n	8015f6a <_dtoa_r+0x916>
 80161f0:	0801a765 	.word	0x0801a765
 80161f4:	0801a76d 	.word	0x0801a76d

080161f8 <__errno>:
 80161f8:	4b01      	ldr	r3, [pc, #4]	; (8016200 <__errno+0x8>)
 80161fa:	6818      	ldr	r0, [r3, #0]
 80161fc:	4770      	bx	lr
 80161fe:	46c0      	nop			; (mov r8, r8)
 8016200:	200000d8 	.word	0x200000d8

08016204 <__libc_fini_array>:
 8016204:	b570      	push	{r4, r5, r6, lr}
 8016206:	4d07      	ldr	r5, [pc, #28]	; (8016224 <__libc_fini_array+0x20>)
 8016208:	4c07      	ldr	r4, [pc, #28]	; (8016228 <__libc_fini_array+0x24>)
 801620a:	1b64      	subs	r4, r4, r5
 801620c:	10a4      	asrs	r4, r4, #2
 801620e:	2c00      	cmp	r4, #0
 8016210:	d102      	bne.n	8016218 <__libc_fini_array+0x14>
 8016212:	f001 f95b 	bl	80174cc <_fini>
 8016216:	bd70      	pop	{r4, r5, r6, pc}
 8016218:	3c01      	subs	r4, #1
 801621a:	00a3      	lsls	r3, r4, #2
 801621c:	58eb      	ldr	r3, [r5, r3]
 801621e:	4798      	blx	r3
 8016220:	e7f5      	b.n	801620e <__libc_fini_array+0xa>
 8016222:	46c0      	nop			; (mov r8, r8)
 8016224:	0801a884 	.word	0x0801a884
 8016228:	0801a888 	.word	0x0801a888

0801622c <_malloc_trim_r>:
 801622c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801622e:	0005      	movs	r5, r0
 8016230:	2008      	movs	r0, #8
 8016232:	000c      	movs	r4, r1
 8016234:	f7ff f95c 	bl	80154f0 <sysconf>
 8016238:	0007      	movs	r7, r0
 801623a:	0028      	movs	r0, r5
 801623c:	f7fc fd88 	bl	8012d50 <__malloc_lock>
 8016240:	2203      	movs	r2, #3
 8016242:	4e21      	ldr	r6, [pc, #132]	; (80162c8 <_malloc_trim_r+0x9c>)
 8016244:	0039      	movs	r1, r7
 8016246:	68b3      	ldr	r3, [r6, #8]
 8016248:	685b      	ldr	r3, [r3, #4]
 801624a:	4393      	bics	r3, r2
 801624c:	1b18      	subs	r0, r3, r4
 801624e:	3811      	subs	r0, #17
 8016250:	19c0      	adds	r0, r0, r7
 8016252:	9301      	str	r3, [sp, #4]
 8016254:	f7e9 ff7c 	bl	8000150 <__udivsi3>
 8016258:	1e44      	subs	r4, r0, #1
 801625a:	437c      	muls	r4, r7
 801625c:	42a7      	cmp	r7, r4
 801625e:	dd04      	ble.n	801626a <_malloc_trim_r+0x3e>
 8016260:	0028      	movs	r0, r5
 8016262:	f7fc fd7d 	bl	8012d60 <__malloc_unlock>
 8016266:	2000      	movs	r0, #0
 8016268:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801626a:	2100      	movs	r1, #0
 801626c:	0028      	movs	r0, r5
 801626e:	f7fc ff4f 	bl	8013110 <_sbrk_r>
 8016272:	68b3      	ldr	r3, [r6, #8]
 8016274:	9a01      	ldr	r2, [sp, #4]
 8016276:	189b      	adds	r3, r3, r2
 8016278:	4298      	cmp	r0, r3
 801627a:	d1f1      	bne.n	8016260 <_malloc_trim_r+0x34>
 801627c:	4261      	negs	r1, r4
 801627e:	0028      	movs	r0, r5
 8016280:	f7fc ff46 	bl	8013110 <_sbrk_r>
 8016284:	1c43      	adds	r3, r0, #1
 8016286:	d110      	bne.n	80162aa <_malloc_trim_r+0x7e>
 8016288:	2100      	movs	r1, #0
 801628a:	0028      	movs	r0, r5
 801628c:	f7fc ff40 	bl	8013110 <_sbrk_r>
 8016290:	68b2      	ldr	r2, [r6, #8]
 8016292:	1a81      	subs	r1, r0, r2
 8016294:	290f      	cmp	r1, #15
 8016296:	dde3      	ble.n	8016260 <_malloc_trim_r+0x34>
 8016298:	4b0c      	ldr	r3, [pc, #48]	; (80162cc <_malloc_trim_r+0xa0>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	1ac0      	subs	r0, r0, r3
 801629e:	4b0c      	ldr	r3, [pc, #48]	; (80162d0 <_malloc_trim_r+0xa4>)
 80162a0:	6018      	str	r0, [r3, #0]
 80162a2:	2301      	movs	r3, #1
 80162a4:	430b      	orrs	r3, r1
 80162a6:	6053      	str	r3, [r2, #4]
 80162a8:	e7da      	b.n	8016260 <_malloc_trim_r+0x34>
 80162aa:	68b2      	ldr	r2, [r6, #8]
 80162ac:	2601      	movs	r6, #1
 80162ae:	9b01      	ldr	r3, [sp, #4]
 80162b0:	0028      	movs	r0, r5
 80162b2:	1b1b      	subs	r3, r3, r4
 80162b4:	4333      	orrs	r3, r6
 80162b6:	6053      	str	r3, [r2, #4]
 80162b8:	4b05      	ldr	r3, [pc, #20]	; (80162d0 <_malloc_trim_r+0xa4>)
 80162ba:	681a      	ldr	r2, [r3, #0]
 80162bc:	1b14      	subs	r4, r2, r4
 80162be:	601c      	str	r4, [r3, #0]
 80162c0:	f7fc fd4e 	bl	8012d60 <__malloc_unlock>
 80162c4:	0030      	movs	r0, r6
 80162c6:	e7cf      	b.n	8016268 <_malloc_trim_r+0x3c>
 80162c8:	20000674 	.word	0x20000674
 80162cc:	20000a7c 	.word	0x20000a7c
 80162d0:	20006cf8 	.word	0x20006cf8

080162d4 <_free_r>:
 80162d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80162d6:	1e0d      	subs	r5, r1, #0
 80162d8:	9001      	str	r0, [sp, #4]
 80162da:	d02d      	beq.n	8016338 <_free_r+0x64>
 80162dc:	f7fc fd38 	bl	8012d50 <__malloc_lock>
 80162e0:	2301      	movs	r3, #1
 80162e2:	0029      	movs	r1, r5
 80162e4:	469c      	mov	ip, r3
 80162e6:	3908      	subs	r1, #8
 80162e8:	684f      	ldr	r7, [r1, #4]
 80162ea:	4662      	mov	r2, ip
 80162ec:	003b      	movs	r3, r7
 80162ee:	4666      	mov	r6, ip
 80162f0:	4393      	bics	r3, r2
 80162f2:	18c8      	adds	r0, r1, r3
 80162f4:	6845      	ldr	r5, [r0, #4]
 80162f6:	3202      	adds	r2, #2
 80162f8:	4395      	bics	r5, r2
 80162fa:	4a4a      	ldr	r2, [pc, #296]	; (8016424 <_free_r+0x150>)
 80162fc:	4037      	ands	r7, r6
 80162fe:	6896      	ldr	r6, [r2, #8]
 8016300:	4286      	cmp	r6, r0
 8016302:	d11a      	bne.n	801633a <_free_r+0x66>
 8016304:	195b      	adds	r3, r3, r5
 8016306:	2f00      	cmp	r7, #0
 8016308:	d106      	bne.n	8016318 <_free_r+0x44>
 801630a:	6808      	ldr	r0, [r1, #0]
 801630c:	1a09      	subs	r1, r1, r0
 801630e:	688d      	ldr	r5, [r1, #8]
 8016310:	181b      	adds	r3, r3, r0
 8016312:	68c8      	ldr	r0, [r1, #12]
 8016314:	60e8      	str	r0, [r5, #12]
 8016316:	6085      	str	r5, [r0, #8]
 8016318:	2001      	movs	r0, #1
 801631a:	4318      	orrs	r0, r3
 801631c:	6048      	str	r0, [r1, #4]
 801631e:	6091      	str	r1, [r2, #8]
 8016320:	4a41      	ldr	r2, [pc, #260]	; (8016428 <_free_r+0x154>)
 8016322:	6812      	ldr	r2, [r2, #0]
 8016324:	429a      	cmp	r2, r3
 8016326:	d804      	bhi.n	8016332 <_free_r+0x5e>
 8016328:	4b40      	ldr	r3, [pc, #256]	; (801642c <_free_r+0x158>)
 801632a:	9801      	ldr	r0, [sp, #4]
 801632c:	6819      	ldr	r1, [r3, #0]
 801632e:	f7ff ff7d 	bl	801622c <_malloc_trim_r>
 8016332:	9801      	ldr	r0, [sp, #4]
 8016334:	f7fc fd14 	bl	8012d60 <__malloc_unlock>
 8016338:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801633a:	2600      	movs	r6, #0
 801633c:	6045      	str	r5, [r0, #4]
 801633e:	42b7      	cmp	r7, r6
 8016340:	d109      	bne.n	8016356 <_free_r+0x82>
 8016342:	680f      	ldr	r7, [r1, #0]
 8016344:	4c3a      	ldr	r4, [pc, #232]	; (8016430 <_free_r+0x15c>)
 8016346:	1bc9      	subs	r1, r1, r7
 8016348:	19db      	adds	r3, r3, r7
 801634a:	688f      	ldr	r7, [r1, #8]
 801634c:	42a7      	cmp	r7, r4
 801634e:	d02b      	beq.n	80163a8 <_free_r+0xd4>
 8016350:	68cc      	ldr	r4, [r1, #12]
 8016352:	60fc      	str	r4, [r7, #12]
 8016354:	60a7      	str	r7, [r4, #8]
 8016356:	1947      	adds	r7, r0, r5
 8016358:	687c      	ldr	r4, [r7, #4]
 801635a:	2701      	movs	r7, #1
 801635c:	423c      	tst	r4, r7
 801635e:	d10b      	bne.n	8016378 <_free_r+0xa4>
 8016360:	195b      	adds	r3, r3, r5
 8016362:	6885      	ldr	r5, [r0, #8]
 8016364:	2e00      	cmp	r6, #0
 8016366:	d121      	bne.n	80163ac <_free_r+0xd8>
 8016368:	4c31      	ldr	r4, [pc, #196]	; (8016430 <_free_r+0x15c>)
 801636a:	42a5      	cmp	r5, r4
 801636c:	d11e      	bne.n	80163ac <_free_r+0xd8>
 801636e:	003e      	movs	r6, r7
 8016370:	6151      	str	r1, [r2, #20]
 8016372:	6111      	str	r1, [r2, #16]
 8016374:	60cd      	str	r5, [r1, #12]
 8016376:	608d      	str	r5, [r1, #8]
 8016378:	2001      	movs	r0, #1
 801637a:	0005      	movs	r5, r0
 801637c:	431d      	orrs	r5, r3
 801637e:	604d      	str	r5, [r1, #4]
 8016380:	50cb      	str	r3, [r1, r3]
 8016382:	2e00      	cmp	r6, #0
 8016384:	d1d5      	bne.n	8016332 <_free_r+0x5e>
 8016386:	4d2b      	ldr	r5, [pc, #172]	; (8016434 <_free_r+0x160>)
 8016388:	42ab      	cmp	r3, r5
 801638a:	d813      	bhi.n	80163b4 <_free_r+0xe0>
 801638c:	08db      	lsrs	r3, r3, #3
 801638e:	109d      	asrs	r5, r3, #2
 8016390:	40a8      	lsls	r0, r5
 8016392:	6854      	ldr	r4, [r2, #4]
 8016394:	00db      	lsls	r3, r3, #3
 8016396:	4320      	orrs	r0, r4
 8016398:	6050      	str	r0, [r2, #4]
 801639a:	189a      	adds	r2, r3, r2
 801639c:	6893      	ldr	r3, [r2, #8]
 801639e:	60ca      	str	r2, [r1, #12]
 80163a0:	608b      	str	r3, [r1, #8]
 80163a2:	6091      	str	r1, [r2, #8]
 80163a4:	60d9      	str	r1, [r3, #12]
 80163a6:	e7c4      	b.n	8016332 <_free_r+0x5e>
 80163a8:	4666      	mov	r6, ip
 80163aa:	e7d4      	b.n	8016356 <_free_r+0x82>
 80163ac:	68c0      	ldr	r0, [r0, #12]
 80163ae:	60e8      	str	r0, [r5, #12]
 80163b0:	6085      	str	r5, [r0, #8]
 80163b2:	e7e1      	b.n	8016378 <_free_r+0xa4>
 80163b4:	0a5d      	lsrs	r5, r3, #9
 80163b6:	2d04      	cmp	r5, #4
 80163b8:	d812      	bhi.n	80163e0 <_free_r+0x10c>
 80163ba:	0998      	lsrs	r0, r3, #6
 80163bc:	3038      	adds	r0, #56	; 0x38
 80163be:	00c6      	lsls	r6, r0, #3
 80163c0:	18b6      	adds	r6, r6, r2
 80163c2:	68b5      	ldr	r5, [r6, #8]
 80163c4:	2703      	movs	r7, #3
 80163c6:	42ae      	cmp	r6, r5
 80163c8:	d125      	bne.n	8016416 <_free_r+0x142>
 80163ca:	2301      	movs	r3, #1
 80163cc:	1080      	asrs	r0, r0, #2
 80163ce:	4083      	lsls	r3, r0
 80163d0:	6850      	ldr	r0, [r2, #4]
 80163d2:	4303      	orrs	r3, r0
 80163d4:	6053      	str	r3, [r2, #4]
 80163d6:	60ce      	str	r6, [r1, #12]
 80163d8:	608d      	str	r5, [r1, #8]
 80163da:	60b1      	str	r1, [r6, #8]
 80163dc:	60e9      	str	r1, [r5, #12]
 80163de:	e7a8      	b.n	8016332 <_free_r+0x5e>
 80163e0:	2d14      	cmp	r5, #20
 80163e2:	d802      	bhi.n	80163ea <_free_r+0x116>
 80163e4:	0028      	movs	r0, r5
 80163e6:	305b      	adds	r0, #91	; 0x5b
 80163e8:	e7e9      	b.n	80163be <_free_r+0xea>
 80163ea:	2d54      	cmp	r5, #84	; 0x54
 80163ec:	d802      	bhi.n	80163f4 <_free_r+0x120>
 80163ee:	0b18      	lsrs	r0, r3, #12
 80163f0:	306e      	adds	r0, #110	; 0x6e
 80163f2:	e7e4      	b.n	80163be <_free_r+0xea>
 80163f4:	20aa      	movs	r0, #170	; 0xaa
 80163f6:	0040      	lsls	r0, r0, #1
 80163f8:	4285      	cmp	r5, r0
 80163fa:	d802      	bhi.n	8016402 <_free_r+0x12e>
 80163fc:	0bd8      	lsrs	r0, r3, #15
 80163fe:	3077      	adds	r0, #119	; 0x77
 8016400:	e7dd      	b.n	80163be <_free_r+0xea>
 8016402:	4e0d      	ldr	r6, [pc, #52]	; (8016438 <_free_r+0x164>)
 8016404:	207e      	movs	r0, #126	; 0x7e
 8016406:	42b5      	cmp	r5, r6
 8016408:	d8d9      	bhi.n	80163be <_free_r+0xea>
 801640a:	0c98      	lsrs	r0, r3, #18
 801640c:	307c      	adds	r0, #124	; 0x7c
 801640e:	e7d6      	b.n	80163be <_free_r+0xea>
 8016410:	68ad      	ldr	r5, [r5, #8]
 8016412:	42ae      	cmp	r6, r5
 8016414:	d003      	beq.n	801641e <_free_r+0x14a>
 8016416:	686a      	ldr	r2, [r5, #4]
 8016418:	43ba      	bics	r2, r7
 801641a:	429a      	cmp	r2, r3
 801641c:	d8f8      	bhi.n	8016410 <_free_r+0x13c>
 801641e:	68ee      	ldr	r6, [r5, #12]
 8016420:	e7d9      	b.n	80163d6 <_free_r+0x102>
 8016422:	46c0      	nop			; (mov r8, r8)
 8016424:	20000674 	.word	0x20000674
 8016428:	20000a80 	.word	0x20000a80
 801642c:	20006d28 	.word	0x20006d28
 8016430:	2000067c 	.word	0x2000067c
 8016434:	000001ff 	.word	0x000001ff
 8016438:	00000554 	.word	0x00000554

0801643c <rshift>:
 801643c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801643e:	0004      	movs	r4, r0
 8016440:	6905      	ldr	r5, [r0, #16]
 8016442:	3414      	adds	r4, #20
 8016444:	114b      	asrs	r3, r1, #5
 8016446:	0026      	movs	r6, r4
 8016448:	429d      	cmp	r5, r3
 801644a:	dd14      	ble.n	8016476 <rshift+0x3a>
 801644c:	221f      	movs	r2, #31
 801644e:	00ad      	lsls	r5, r5, #2
 8016450:	009b      	lsls	r3, r3, #2
 8016452:	4011      	ands	r1, r2
 8016454:	1965      	adds	r5, r4, r5
 8016456:	18e3      	adds	r3, r4, r3
 8016458:	0022      	movs	r2, r4
 801645a:	2900      	cmp	r1, #0
 801645c:	d01e      	beq.n	801649c <rshift+0x60>
 801645e:	cb04      	ldmia	r3!, {r2}
 8016460:	2720      	movs	r7, #32
 8016462:	40ca      	lsrs	r2, r1
 8016464:	46a4      	mov	ip, r4
 8016466:	1a7f      	subs	r7, r7, r1
 8016468:	4666      	mov	r6, ip
 801646a:	429d      	cmp	r5, r3
 801646c:	d80b      	bhi.n	8016486 <rshift+0x4a>
 801646e:	6032      	str	r2, [r6, #0]
 8016470:	2a00      	cmp	r2, #0
 8016472:	d000      	beq.n	8016476 <rshift+0x3a>
 8016474:	3604      	adds	r6, #4
 8016476:	1b33      	subs	r3, r6, r4
 8016478:	109b      	asrs	r3, r3, #2
 801647a:	6103      	str	r3, [r0, #16]
 801647c:	42a6      	cmp	r6, r4
 801647e:	d101      	bne.n	8016484 <rshift+0x48>
 8016480:	2300      	movs	r3, #0
 8016482:	6143      	str	r3, [r0, #20]
 8016484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016486:	681e      	ldr	r6, [r3, #0]
 8016488:	40be      	lsls	r6, r7
 801648a:	4332      	orrs	r2, r6
 801648c:	4666      	mov	r6, ip
 801648e:	c604      	stmia	r6!, {r2}
 8016490:	cb04      	ldmia	r3!, {r2}
 8016492:	46b4      	mov	ip, r6
 8016494:	40ca      	lsrs	r2, r1
 8016496:	e7e7      	b.n	8016468 <rshift+0x2c>
 8016498:	cb02      	ldmia	r3!, {r1}
 801649a:	c202      	stmia	r2!, {r1}
 801649c:	0016      	movs	r6, r2
 801649e:	429d      	cmp	r5, r3
 80164a0:	d8fa      	bhi.n	8016498 <rshift+0x5c>
 80164a2:	e7e8      	b.n	8016476 <rshift+0x3a>

080164a4 <__hexdig_fun>:
 80164a4:	0003      	movs	r3, r0
 80164a6:	3b30      	subs	r3, #48	; 0x30
 80164a8:	2b09      	cmp	r3, #9
 80164aa:	d803      	bhi.n	80164b4 <__hexdig_fun+0x10>
 80164ac:	3820      	subs	r0, #32
 80164ae:	b2c3      	uxtb	r3, r0
 80164b0:	0018      	movs	r0, r3
 80164b2:	4770      	bx	lr
 80164b4:	0003      	movs	r3, r0
 80164b6:	3b61      	subs	r3, #97	; 0x61
 80164b8:	2b05      	cmp	r3, #5
 80164ba:	d801      	bhi.n	80164c0 <__hexdig_fun+0x1c>
 80164bc:	3847      	subs	r0, #71	; 0x47
 80164be:	e7f6      	b.n	80164ae <__hexdig_fun+0xa>
 80164c0:	0002      	movs	r2, r0
 80164c2:	3a41      	subs	r2, #65	; 0x41
 80164c4:	2300      	movs	r3, #0
 80164c6:	2a05      	cmp	r2, #5
 80164c8:	d8f2      	bhi.n	80164b0 <__hexdig_fun+0xc>
 80164ca:	3827      	subs	r0, #39	; 0x27
 80164cc:	e7ef      	b.n	80164ae <__hexdig_fun+0xa>

080164ce <__gethex>:
 80164ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164d0:	b08d      	sub	sp, #52	; 0x34
 80164d2:	9005      	str	r0, [sp, #20]
 80164d4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80164d6:	9109      	str	r1, [sp, #36]	; 0x24
 80164d8:	9202      	str	r2, [sp, #8]
 80164da:	930a      	str	r3, [sp, #40]	; 0x28
 80164dc:	f000 fadf 	bl	8016a9e <__localeconv_l>
 80164e0:	6803      	ldr	r3, [r0, #0]
 80164e2:	0018      	movs	r0, r3
 80164e4:	9307      	str	r3, [sp, #28]
 80164e6:	f7e9 fe17 	bl	8000118 <strlen>
 80164ea:	2202      	movs	r2, #2
 80164ec:	9b07      	ldr	r3, [sp, #28]
 80164ee:	4252      	negs	r2, r2
 80164f0:	181b      	adds	r3, r3, r0
 80164f2:	3b01      	subs	r3, #1
 80164f4:	781b      	ldrb	r3, [r3, #0]
 80164f6:	9004      	str	r0, [sp, #16]
 80164f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80164fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164fc:	6819      	ldr	r1, [r3, #0]
 80164fe:	1c8b      	adds	r3, r1, #2
 8016500:	1a52      	subs	r2, r2, r1
 8016502:	18d1      	adds	r1, r2, r3
 8016504:	9301      	str	r3, [sp, #4]
 8016506:	9108      	str	r1, [sp, #32]
 8016508:	9901      	ldr	r1, [sp, #4]
 801650a:	3301      	adds	r3, #1
 801650c:	7808      	ldrb	r0, [r1, #0]
 801650e:	2830      	cmp	r0, #48	; 0x30
 8016510:	d0f7      	beq.n	8016502 <__gethex+0x34>
 8016512:	f7ff ffc7 	bl	80164a4 <__hexdig_fun>
 8016516:	1e07      	subs	r7, r0, #0
 8016518:	d000      	beq.n	801651c <__gethex+0x4e>
 801651a:	e06f      	b.n	80165fc <__gethex+0x12e>
 801651c:	9a04      	ldr	r2, [sp, #16]
 801651e:	9907      	ldr	r1, [sp, #28]
 8016520:	9801      	ldr	r0, [sp, #4]
 8016522:	f7fc fe4b 	bl	80131bc <strncmp>
 8016526:	2800      	cmp	r0, #0
 8016528:	d000      	beq.n	801652c <__gethex+0x5e>
 801652a:	e06d      	b.n	8016608 <__gethex+0x13a>
 801652c:	9b01      	ldr	r3, [sp, #4]
 801652e:	9a04      	ldr	r2, [sp, #16]
 8016530:	189c      	adds	r4, r3, r2
 8016532:	7820      	ldrb	r0, [r4, #0]
 8016534:	f7ff ffb6 	bl	80164a4 <__hexdig_fun>
 8016538:	2800      	cmp	r0, #0
 801653a:	d069      	beq.n	8016610 <__gethex+0x142>
 801653c:	9401      	str	r4, [sp, #4]
 801653e:	9b01      	ldr	r3, [sp, #4]
 8016540:	7818      	ldrb	r0, [r3, #0]
 8016542:	2830      	cmp	r0, #48	; 0x30
 8016544:	d009      	beq.n	801655a <__gethex+0x8c>
 8016546:	f7ff ffad 	bl	80164a4 <__hexdig_fun>
 801654a:	4243      	negs	r3, r0
 801654c:	4143      	adcs	r3, r0
 801654e:	9303      	str	r3, [sp, #12]
 8016550:	2301      	movs	r3, #1
 8016552:	0026      	movs	r6, r4
 8016554:	9308      	str	r3, [sp, #32]
 8016556:	9c01      	ldr	r4, [sp, #4]
 8016558:	e004      	b.n	8016564 <__gethex+0x96>
 801655a:	9b01      	ldr	r3, [sp, #4]
 801655c:	3301      	adds	r3, #1
 801655e:	9301      	str	r3, [sp, #4]
 8016560:	e7ed      	b.n	801653e <__gethex+0x70>
 8016562:	3401      	adds	r4, #1
 8016564:	7820      	ldrb	r0, [r4, #0]
 8016566:	f7ff ff9d 	bl	80164a4 <__hexdig_fun>
 801656a:	2800      	cmp	r0, #0
 801656c:	d1f9      	bne.n	8016562 <__gethex+0x94>
 801656e:	9a04      	ldr	r2, [sp, #16]
 8016570:	9907      	ldr	r1, [sp, #28]
 8016572:	0020      	movs	r0, r4
 8016574:	f7fc fe22 	bl	80131bc <strncmp>
 8016578:	2800      	cmp	r0, #0
 801657a:	d109      	bne.n	8016590 <__gethex+0xc2>
 801657c:	2e00      	cmp	r6, #0
 801657e:	d10a      	bne.n	8016596 <__gethex+0xc8>
 8016580:	9b04      	ldr	r3, [sp, #16]
 8016582:	18e4      	adds	r4, r4, r3
 8016584:	0026      	movs	r6, r4
 8016586:	7820      	ldrb	r0, [r4, #0]
 8016588:	f7ff ff8c 	bl	80164a4 <__hexdig_fun>
 801658c:	2800      	cmp	r0, #0
 801658e:	d139      	bne.n	8016604 <__gethex+0x136>
 8016590:	2700      	movs	r7, #0
 8016592:	42be      	cmp	r6, r7
 8016594:	d001      	beq.n	801659a <__gethex+0xcc>
 8016596:	1b37      	subs	r7, r6, r4
 8016598:	00bf      	lsls	r7, r7, #2
 801659a:	7823      	ldrb	r3, [r4, #0]
 801659c:	2b50      	cmp	r3, #80	; 0x50
 801659e:	d001      	beq.n	80165a4 <__gethex+0xd6>
 80165a0:	2b70      	cmp	r3, #112	; 0x70
 80165a2:	d142      	bne.n	801662a <__gethex+0x15c>
 80165a4:	7863      	ldrb	r3, [r4, #1]
 80165a6:	2b2b      	cmp	r3, #43	; 0x2b
 80165a8:	d034      	beq.n	8016614 <__gethex+0x146>
 80165aa:	2b2d      	cmp	r3, #45	; 0x2d
 80165ac:	d036      	beq.n	801661c <__gethex+0x14e>
 80165ae:	2300      	movs	r3, #0
 80165b0:	1c66      	adds	r6, r4, #1
 80165b2:	9306      	str	r3, [sp, #24]
 80165b4:	7830      	ldrb	r0, [r6, #0]
 80165b6:	f7ff ff75 	bl	80164a4 <__hexdig_fun>
 80165ba:	1e43      	subs	r3, r0, #1
 80165bc:	b2db      	uxtb	r3, r3
 80165be:	2b18      	cmp	r3, #24
 80165c0:	d833      	bhi.n	801662a <__gethex+0x15c>
 80165c2:	3810      	subs	r0, #16
 80165c4:	0005      	movs	r5, r0
 80165c6:	3601      	adds	r6, #1
 80165c8:	7830      	ldrb	r0, [r6, #0]
 80165ca:	f7ff ff6b 	bl	80164a4 <__hexdig_fun>
 80165ce:	1e43      	subs	r3, r0, #1
 80165d0:	b2db      	uxtb	r3, r3
 80165d2:	2b18      	cmp	r3, #24
 80165d4:	d924      	bls.n	8016620 <__gethex+0x152>
 80165d6:	9b06      	ldr	r3, [sp, #24]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d000      	beq.n	80165de <__gethex+0x110>
 80165dc:	426d      	negs	r5, r5
 80165de:	197f      	adds	r7, r7, r5
 80165e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165e2:	601e      	str	r6, [r3, #0]
 80165e4:	9b03      	ldr	r3, [sp, #12]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d021      	beq.n	801662e <__gethex+0x160>
 80165ea:	9b08      	ldr	r3, [sp, #32]
 80165ec:	2606      	movs	r6, #6
 80165ee:	425a      	negs	r2, r3
 80165f0:	4153      	adcs	r3, r2
 80165f2:	425b      	negs	r3, r3
 80165f4:	401e      	ands	r6, r3
 80165f6:	0030      	movs	r0, r6
 80165f8:	b00d      	add	sp, #52	; 0x34
 80165fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165fc:	2300      	movs	r3, #0
 80165fe:	9303      	str	r3, [sp, #12]
 8016600:	001e      	movs	r6, r3
 8016602:	e7a8      	b.n	8016556 <__gethex+0x88>
 8016604:	3401      	adds	r4, #1
 8016606:	e7be      	b.n	8016586 <__gethex+0xb8>
 8016608:	9c01      	ldr	r4, [sp, #4]
 801660a:	2301      	movs	r3, #1
 801660c:	9303      	str	r3, [sp, #12]
 801660e:	e7c4      	b.n	801659a <__gethex+0xcc>
 8016610:	0007      	movs	r7, r0
 8016612:	e7fa      	b.n	801660a <__gethex+0x13c>
 8016614:	2300      	movs	r3, #0
 8016616:	9306      	str	r3, [sp, #24]
 8016618:	1ca6      	adds	r6, r4, #2
 801661a:	e7cb      	b.n	80165b4 <__gethex+0xe6>
 801661c:	2301      	movs	r3, #1
 801661e:	e7fa      	b.n	8016616 <__gethex+0x148>
 8016620:	230a      	movs	r3, #10
 8016622:	435d      	muls	r5, r3
 8016624:	182d      	adds	r5, r5, r0
 8016626:	3d10      	subs	r5, #16
 8016628:	e7cd      	b.n	80165c6 <__gethex+0xf8>
 801662a:	0026      	movs	r6, r4
 801662c:	e7d8      	b.n	80165e0 <__gethex+0x112>
 801662e:	9b01      	ldr	r3, [sp, #4]
 8016630:	9903      	ldr	r1, [sp, #12]
 8016632:	1ae3      	subs	r3, r4, r3
 8016634:	3b01      	subs	r3, #1
 8016636:	2b07      	cmp	r3, #7
 8016638:	dc47      	bgt.n	80166ca <__gethex+0x1fc>
 801663a:	9805      	ldr	r0, [sp, #20]
 801663c:	f000 fa5e 	bl	8016afc <_Balloc>
 8016640:	0003      	movs	r3, r0
 8016642:	3314      	adds	r3, #20
 8016644:	9303      	str	r3, [sp, #12]
 8016646:	9308      	str	r3, [sp, #32]
 8016648:	2300      	movs	r3, #0
 801664a:	0005      	movs	r5, r0
 801664c:	001e      	movs	r6, r3
 801664e:	9306      	str	r3, [sp, #24]
 8016650:	9b01      	ldr	r3, [sp, #4]
 8016652:	42a3      	cmp	r3, r4
 8016654:	d33c      	bcc.n	80166d0 <__gethex+0x202>
 8016656:	9c08      	ldr	r4, [sp, #32]
 8016658:	9b03      	ldr	r3, [sp, #12]
 801665a:	c440      	stmia	r4!, {r6}
 801665c:	1ae4      	subs	r4, r4, r3
 801665e:	10a4      	asrs	r4, r4, #2
 8016660:	612c      	str	r4, [r5, #16]
 8016662:	0030      	movs	r0, r6
 8016664:	f000 faf8 	bl	8016c58 <__hi0bits>
 8016668:	9b02      	ldr	r3, [sp, #8]
 801666a:	0164      	lsls	r4, r4, #5
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	1a26      	subs	r6, r4, r0
 8016670:	9301      	str	r3, [sp, #4]
 8016672:	429e      	cmp	r6, r3
 8016674:	dd5f      	ble.n	8016736 <__gethex+0x268>
 8016676:	1af6      	subs	r6, r6, r3
 8016678:	0031      	movs	r1, r6
 801667a:	0028      	movs	r0, r5
 801667c:	f000 fde3 	bl	8017246 <__any_on>
 8016680:	1e04      	subs	r4, r0, #0
 8016682:	d00f      	beq.n	80166a4 <__gethex+0x1d6>
 8016684:	2401      	movs	r4, #1
 8016686:	211f      	movs	r1, #31
 8016688:	0020      	movs	r0, r4
 801668a:	1e73      	subs	r3, r6, #1
 801668c:	4019      	ands	r1, r3
 801668e:	4088      	lsls	r0, r1
 8016690:	0001      	movs	r1, r0
 8016692:	115a      	asrs	r2, r3, #5
 8016694:	9803      	ldr	r0, [sp, #12]
 8016696:	0092      	lsls	r2, r2, #2
 8016698:	5812      	ldr	r2, [r2, r0]
 801669a:	420a      	tst	r2, r1
 801669c:	d002      	beq.n	80166a4 <__gethex+0x1d6>
 801669e:	42a3      	cmp	r3, r4
 80166a0:	dc41      	bgt.n	8016726 <__gethex+0x258>
 80166a2:	2402      	movs	r4, #2
 80166a4:	0031      	movs	r1, r6
 80166a6:	0028      	movs	r0, r5
 80166a8:	f7ff fec8 	bl	801643c <rshift>
 80166ac:	19bf      	adds	r7, r7, r6
 80166ae:	9b02      	ldr	r3, [sp, #8]
 80166b0:	689b      	ldr	r3, [r3, #8]
 80166b2:	9304      	str	r3, [sp, #16]
 80166b4:	42bb      	cmp	r3, r7
 80166b6:	da4e      	bge.n	8016756 <__gethex+0x288>
 80166b8:	0029      	movs	r1, r5
 80166ba:	9805      	ldr	r0, [sp, #20]
 80166bc:	f000 fa46 	bl	8016b4c <_Bfree>
 80166c0:	2300      	movs	r3, #0
 80166c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80166c4:	26a3      	movs	r6, #163	; 0xa3
 80166c6:	6013      	str	r3, [r2, #0]
 80166c8:	e795      	b.n	80165f6 <__gethex+0x128>
 80166ca:	3101      	adds	r1, #1
 80166cc:	105b      	asrs	r3, r3, #1
 80166ce:	e7b2      	b.n	8016636 <__gethex+0x168>
 80166d0:	1e63      	subs	r3, r4, #1
 80166d2:	9309      	str	r3, [sp, #36]	; 0x24
 80166d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80166d6:	781b      	ldrb	r3, [r3, #0]
 80166d8:	4293      	cmp	r3, r2
 80166da:	d015      	beq.n	8016708 <__gethex+0x23a>
 80166dc:	9b06      	ldr	r3, [sp, #24]
 80166de:	2b20      	cmp	r3, #32
 80166e0:	d105      	bne.n	80166ee <__gethex+0x220>
 80166e2:	9b08      	ldr	r3, [sp, #32]
 80166e4:	601e      	str	r6, [r3, #0]
 80166e6:	2600      	movs	r6, #0
 80166e8:	3304      	adds	r3, #4
 80166ea:	9308      	str	r3, [sp, #32]
 80166ec:	9606      	str	r6, [sp, #24]
 80166ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166f0:	7818      	ldrb	r0, [r3, #0]
 80166f2:	f7ff fed7 	bl	80164a4 <__hexdig_fun>
 80166f6:	230f      	movs	r3, #15
 80166f8:	4018      	ands	r0, r3
 80166fa:	9b06      	ldr	r3, [sp, #24]
 80166fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80166fe:	4098      	lsls	r0, r3
 8016700:	3304      	adds	r3, #4
 8016702:	4306      	orrs	r6, r0
 8016704:	9306      	str	r3, [sp, #24]
 8016706:	e7a3      	b.n	8016650 <__gethex+0x182>
 8016708:	2301      	movs	r3, #1
 801670a:	9a04      	ldr	r2, [sp, #16]
 801670c:	1a9c      	subs	r4, r3, r2
 801670e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016710:	191c      	adds	r4, r3, r4
 8016712:	9b01      	ldr	r3, [sp, #4]
 8016714:	429c      	cmp	r4, r3
 8016716:	d3e1      	bcc.n	80166dc <__gethex+0x20e>
 8016718:	9907      	ldr	r1, [sp, #28]
 801671a:	0020      	movs	r0, r4
 801671c:	f7fc fd4e 	bl	80131bc <strncmp>
 8016720:	2800      	cmp	r0, #0
 8016722:	d1db      	bne.n	80166dc <__gethex+0x20e>
 8016724:	e794      	b.n	8016650 <__gethex+0x182>
 8016726:	1eb1      	subs	r1, r6, #2
 8016728:	0028      	movs	r0, r5
 801672a:	f000 fd8c 	bl	8017246 <__any_on>
 801672e:	2800      	cmp	r0, #0
 8016730:	d0b7      	beq.n	80166a2 <__gethex+0x1d4>
 8016732:	2403      	movs	r4, #3
 8016734:	e7b6      	b.n	80166a4 <__gethex+0x1d6>
 8016736:	9b01      	ldr	r3, [sp, #4]
 8016738:	2400      	movs	r4, #0
 801673a:	429e      	cmp	r6, r3
 801673c:	dab7      	bge.n	80166ae <__gethex+0x1e0>
 801673e:	1b9e      	subs	r6, r3, r6
 8016740:	0029      	movs	r1, r5
 8016742:	0032      	movs	r2, r6
 8016744:	9805      	ldr	r0, [sp, #20]
 8016746:	f000 fbab 	bl	8016ea0 <__lshift>
 801674a:	0003      	movs	r3, r0
 801674c:	3314      	adds	r3, #20
 801674e:	0005      	movs	r5, r0
 8016750:	1bbf      	subs	r7, r7, r6
 8016752:	9303      	str	r3, [sp, #12]
 8016754:	e7ab      	b.n	80166ae <__gethex+0x1e0>
 8016756:	9b02      	ldr	r3, [sp, #8]
 8016758:	685e      	ldr	r6, [r3, #4]
 801675a:	42be      	cmp	r6, r7
 801675c:	dd6b      	ble.n	8016836 <__gethex+0x368>
 801675e:	9b01      	ldr	r3, [sp, #4]
 8016760:	1bf6      	subs	r6, r6, r7
 8016762:	42b3      	cmp	r3, r6
 8016764:	dc32      	bgt.n	80167cc <__gethex+0x2fe>
 8016766:	9b02      	ldr	r3, [sp, #8]
 8016768:	68db      	ldr	r3, [r3, #12]
 801676a:	2b02      	cmp	r3, #2
 801676c:	d026      	beq.n	80167bc <__gethex+0x2ee>
 801676e:	2b03      	cmp	r3, #3
 8016770:	d028      	beq.n	80167c4 <__gethex+0x2f6>
 8016772:	2b01      	cmp	r3, #1
 8016774:	d119      	bne.n	80167aa <__gethex+0x2dc>
 8016776:	9b01      	ldr	r3, [sp, #4]
 8016778:	42b3      	cmp	r3, r6
 801677a:	d116      	bne.n	80167aa <__gethex+0x2dc>
 801677c:	2b01      	cmp	r3, #1
 801677e:	dc0d      	bgt.n	801679c <__gethex+0x2ce>
 8016780:	9b02      	ldr	r3, [sp, #8]
 8016782:	2662      	movs	r6, #98	; 0x62
 8016784:	685b      	ldr	r3, [r3, #4]
 8016786:	9301      	str	r3, [sp, #4]
 8016788:	9a01      	ldr	r2, [sp, #4]
 801678a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801678c:	601a      	str	r2, [r3, #0]
 801678e:	2301      	movs	r3, #1
 8016790:	9a03      	ldr	r2, [sp, #12]
 8016792:	612b      	str	r3, [r5, #16]
 8016794:	6013      	str	r3, [r2, #0]
 8016796:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016798:	601d      	str	r5, [r3, #0]
 801679a:	e72c      	b.n	80165f6 <__gethex+0x128>
 801679c:	9901      	ldr	r1, [sp, #4]
 801679e:	0028      	movs	r0, r5
 80167a0:	3901      	subs	r1, #1
 80167a2:	f000 fd50 	bl	8017246 <__any_on>
 80167a6:	2800      	cmp	r0, #0
 80167a8:	d1ea      	bne.n	8016780 <__gethex+0x2b2>
 80167aa:	0029      	movs	r1, r5
 80167ac:	9805      	ldr	r0, [sp, #20]
 80167ae:	f000 f9cd 	bl	8016b4c <_Bfree>
 80167b2:	2300      	movs	r3, #0
 80167b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80167b6:	2650      	movs	r6, #80	; 0x50
 80167b8:	6013      	str	r3, [r2, #0]
 80167ba:	e71c      	b.n	80165f6 <__gethex+0x128>
 80167bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d0de      	beq.n	8016780 <__gethex+0x2b2>
 80167c2:	e7f2      	b.n	80167aa <__gethex+0x2dc>
 80167c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d1da      	bne.n	8016780 <__gethex+0x2b2>
 80167ca:	e7ee      	b.n	80167aa <__gethex+0x2dc>
 80167cc:	1e77      	subs	r7, r6, #1
 80167ce:	2c00      	cmp	r4, #0
 80167d0:	d12f      	bne.n	8016832 <__gethex+0x364>
 80167d2:	2f00      	cmp	r7, #0
 80167d4:	d004      	beq.n	80167e0 <__gethex+0x312>
 80167d6:	0039      	movs	r1, r7
 80167d8:	0028      	movs	r0, r5
 80167da:	f000 fd34 	bl	8017246 <__any_on>
 80167de:	0004      	movs	r4, r0
 80167e0:	231f      	movs	r3, #31
 80167e2:	117a      	asrs	r2, r7, #5
 80167e4:	401f      	ands	r7, r3
 80167e6:	3b1e      	subs	r3, #30
 80167e8:	40bb      	lsls	r3, r7
 80167ea:	9903      	ldr	r1, [sp, #12]
 80167ec:	0092      	lsls	r2, r2, #2
 80167ee:	5852      	ldr	r2, [r2, r1]
 80167f0:	421a      	tst	r2, r3
 80167f2:	d001      	beq.n	80167f8 <__gethex+0x32a>
 80167f4:	2302      	movs	r3, #2
 80167f6:	431c      	orrs	r4, r3
 80167f8:	9b01      	ldr	r3, [sp, #4]
 80167fa:	0031      	movs	r1, r6
 80167fc:	1b9b      	subs	r3, r3, r6
 80167fe:	2602      	movs	r6, #2
 8016800:	0028      	movs	r0, r5
 8016802:	9301      	str	r3, [sp, #4]
 8016804:	f7ff fe1a 	bl	801643c <rshift>
 8016808:	9b02      	ldr	r3, [sp, #8]
 801680a:	685f      	ldr	r7, [r3, #4]
 801680c:	2c00      	cmp	r4, #0
 801680e:	d040      	beq.n	8016892 <__gethex+0x3c4>
 8016810:	9b02      	ldr	r3, [sp, #8]
 8016812:	68db      	ldr	r3, [r3, #12]
 8016814:	2b02      	cmp	r3, #2
 8016816:	d010      	beq.n	801683a <__gethex+0x36c>
 8016818:	2b03      	cmp	r3, #3
 801681a:	d012      	beq.n	8016842 <__gethex+0x374>
 801681c:	2b01      	cmp	r3, #1
 801681e:	d106      	bne.n	801682e <__gethex+0x360>
 8016820:	07a2      	lsls	r2, r4, #30
 8016822:	d504      	bpl.n	801682e <__gethex+0x360>
 8016824:	9a03      	ldr	r2, [sp, #12]
 8016826:	6812      	ldr	r2, [r2, #0]
 8016828:	4314      	orrs	r4, r2
 801682a:	421c      	tst	r4, r3
 801682c:	d10c      	bne.n	8016848 <__gethex+0x37a>
 801682e:	2310      	movs	r3, #16
 8016830:	e02e      	b.n	8016890 <__gethex+0x3c2>
 8016832:	2401      	movs	r4, #1
 8016834:	e7d4      	b.n	80167e0 <__gethex+0x312>
 8016836:	2601      	movs	r6, #1
 8016838:	e7e8      	b.n	801680c <__gethex+0x33e>
 801683a:	2301      	movs	r3, #1
 801683c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801683e:	1a9b      	subs	r3, r3, r2
 8016840:	9313      	str	r3, [sp, #76]	; 0x4c
 8016842:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016844:	2b00      	cmp	r3, #0
 8016846:	d0f2      	beq.n	801682e <__gethex+0x360>
 8016848:	692c      	ldr	r4, [r5, #16]
 801684a:	00a3      	lsls	r3, r4, #2
 801684c:	9304      	str	r3, [sp, #16]
 801684e:	002b      	movs	r3, r5
 8016850:	00a2      	lsls	r2, r4, #2
 8016852:	3314      	adds	r3, #20
 8016854:	1899      	adds	r1, r3, r2
 8016856:	2200      	movs	r2, #0
 8016858:	4694      	mov	ip, r2
 801685a:	681a      	ldr	r2, [r3, #0]
 801685c:	1c50      	adds	r0, r2, #1
 801685e:	d01d      	beq.n	801689c <__gethex+0x3ce>
 8016860:	3201      	adds	r2, #1
 8016862:	601a      	str	r2, [r3, #0]
 8016864:	002b      	movs	r3, r5
 8016866:	3314      	adds	r3, #20
 8016868:	2e02      	cmp	r6, #2
 801686a:	d13a      	bne.n	80168e2 <__gethex+0x414>
 801686c:	9a02      	ldr	r2, [sp, #8]
 801686e:	9901      	ldr	r1, [sp, #4]
 8016870:	6812      	ldr	r2, [r2, #0]
 8016872:	3a01      	subs	r2, #1
 8016874:	428a      	cmp	r2, r1
 8016876:	d10a      	bne.n	801688e <__gethex+0x3c0>
 8016878:	114a      	asrs	r2, r1, #5
 801687a:	211f      	movs	r1, #31
 801687c:	9801      	ldr	r0, [sp, #4]
 801687e:	0092      	lsls	r2, r2, #2
 8016880:	4001      	ands	r1, r0
 8016882:	2001      	movs	r0, #1
 8016884:	0004      	movs	r4, r0
 8016886:	408c      	lsls	r4, r1
 8016888:	58d3      	ldr	r3, [r2, r3]
 801688a:	4223      	tst	r3, r4
 801688c:	d148      	bne.n	8016920 <__gethex+0x452>
 801688e:	2320      	movs	r3, #32
 8016890:	431e      	orrs	r6, r3
 8016892:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016894:	601d      	str	r5, [r3, #0]
 8016896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016898:	601f      	str	r7, [r3, #0]
 801689a:	e6ac      	b.n	80165f6 <__gethex+0x128>
 801689c:	4662      	mov	r2, ip
 801689e:	c304      	stmia	r3!, {r2}
 80168a0:	4299      	cmp	r1, r3
 80168a2:	d8da      	bhi.n	801685a <__gethex+0x38c>
 80168a4:	68ab      	ldr	r3, [r5, #8]
 80168a6:	429c      	cmp	r4, r3
 80168a8:	db12      	blt.n	80168d0 <__gethex+0x402>
 80168aa:	686b      	ldr	r3, [r5, #4]
 80168ac:	9805      	ldr	r0, [sp, #20]
 80168ae:	1c59      	adds	r1, r3, #1
 80168b0:	f000 f924 	bl	8016afc <_Balloc>
 80168b4:	0029      	movs	r1, r5
 80168b6:	692b      	ldr	r3, [r5, #16]
 80168b8:	9003      	str	r0, [sp, #12]
 80168ba:	1c9a      	adds	r2, r3, #2
 80168bc:	0092      	lsls	r2, r2, #2
 80168be:	310c      	adds	r1, #12
 80168c0:	300c      	adds	r0, #12
 80168c2:	f7fc fa34 	bl	8012d2e <memcpy>
 80168c6:	0029      	movs	r1, r5
 80168c8:	9805      	ldr	r0, [sp, #20]
 80168ca:	f000 f93f 	bl	8016b4c <_Bfree>
 80168ce:	9d03      	ldr	r5, [sp, #12]
 80168d0:	692b      	ldr	r3, [r5, #16]
 80168d2:	1c5a      	adds	r2, r3, #1
 80168d4:	612a      	str	r2, [r5, #16]
 80168d6:	2201      	movs	r2, #1
 80168d8:	3304      	adds	r3, #4
 80168da:	009b      	lsls	r3, r3, #2
 80168dc:	18eb      	adds	r3, r5, r3
 80168de:	605a      	str	r2, [r3, #4]
 80168e0:	e7c0      	b.n	8016864 <__gethex+0x396>
 80168e2:	692a      	ldr	r2, [r5, #16]
 80168e4:	42a2      	cmp	r2, r4
 80168e6:	dd0a      	ble.n	80168fe <__gethex+0x430>
 80168e8:	2101      	movs	r1, #1
 80168ea:	0028      	movs	r0, r5
 80168ec:	f7ff fda6 	bl	801643c <rshift>
 80168f0:	9b02      	ldr	r3, [sp, #8]
 80168f2:	3701      	adds	r7, #1
 80168f4:	689b      	ldr	r3, [r3, #8]
 80168f6:	2601      	movs	r6, #1
 80168f8:	42bb      	cmp	r3, r7
 80168fa:	dac8      	bge.n	801688e <__gethex+0x3c0>
 80168fc:	e6dc      	b.n	80166b8 <__gethex+0x1ea>
 80168fe:	241f      	movs	r4, #31
 8016900:	9a01      	ldr	r2, [sp, #4]
 8016902:	2601      	movs	r6, #1
 8016904:	4022      	ands	r2, r4
 8016906:	1e14      	subs	r4, r2, #0
 8016908:	d0c1      	beq.n	801688e <__gethex+0x3c0>
 801690a:	9a04      	ldr	r2, [sp, #16]
 801690c:	189b      	adds	r3, r3, r2
 801690e:	3b04      	subs	r3, #4
 8016910:	6818      	ldr	r0, [r3, #0]
 8016912:	f000 f9a1 	bl	8016c58 <__hi0bits>
 8016916:	2120      	movs	r1, #32
 8016918:	1b0c      	subs	r4, r1, r4
 801691a:	42a0      	cmp	r0, r4
 801691c:	dbe4      	blt.n	80168e8 <__gethex+0x41a>
 801691e:	e7b6      	b.n	801688e <__gethex+0x3c0>
 8016920:	0006      	movs	r6, r0
 8016922:	e7b4      	b.n	801688e <__gethex+0x3c0>

08016924 <L_shift>:
 8016924:	2308      	movs	r3, #8
 8016926:	b570      	push	{r4, r5, r6, lr}
 8016928:	2520      	movs	r5, #32
 801692a:	1a9a      	subs	r2, r3, r2
 801692c:	0092      	lsls	r2, r2, #2
 801692e:	1aad      	subs	r5, r5, r2
 8016930:	6843      	ldr	r3, [r0, #4]
 8016932:	6806      	ldr	r6, [r0, #0]
 8016934:	001c      	movs	r4, r3
 8016936:	40ac      	lsls	r4, r5
 8016938:	40d3      	lsrs	r3, r2
 801693a:	4334      	orrs	r4, r6
 801693c:	6004      	str	r4, [r0, #0]
 801693e:	6043      	str	r3, [r0, #4]
 8016940:	3004      	adds	r0, #4
 8016942:	4288      	cmp	r0, r1
 8016944:	d3f4      	bcc.n	8016930 <L_shift+0xc>
 8016946:	bd70      	pop	{r4, r5, r6, pc}

08016948 <__match>:
 8016948:	b530      	push	{r4, r5, lr}
 801694a:	6803      	ldr	r3, [r0, #0]
 801694c:	780c      	ldrb	r4, [r1, #0]
 801694e:	3301      	adds	r3, #1
 8016950:	2c00      	cmp	r4, #0
 8016952:	d102      	bne.n	801695a <__match+0x12>
 8016954:	6003      	str	r3, [r0, #0]
 8016956:	2001      	movs	r0, #1
 8016958:	bd30      	pop	{r4, r5, pc}
 801695a:	781a      	ldrb	r2, [r3, #0]
 801695c:	0015      	movs	r5, r2
 801695e:	3d41      	subs	r5, #65	; 0x41
 8016960:	2d19      	cmp	r5, #25
 8016962:	d800      	bhi.n	8016966 <__match+0x1e>
 8016964:	3220      	adds	r2, #32
 8016966:	3101      	adds	r1, #1
 8016968:	42a2      	cmp	r2, r4
 801696a:	d0ef      	beq.n	801694c <__match+0x4>
 801696c:	2000      	movs	r0, #0
 801696e:	e7f3      	b.n	8016958 <__match+0x10>

08016970 <__hexnan>:
 8016970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016972:	b08b      	sub	sp, #44	; 0x2c
 8016974:	9201      	str	r2, [sp, #4]
 8016976:	680a      	ldr	r2, [r1, #0]
 8016978:	9901      	ldr	r1, [sp, #4]
 801697a:	1153      	asrs	r3, r2, #5
 801697c:	009b      	lsls	r3, r3, #2
 801697e:	18cb      	adds	r3, r1, r3
 8016980:	9304      	str	r3, [sp, #16]
 8016982:	231f      	movs	r3, #31
 8016984:	401a      	ands	r2, r3
 8016986:	9008      	str	r0, [sp, #32]
 8016988:	9206      	str	r2, [sp, #24]
 801698a:	d002      	beq.n	8016992 <__hexnan+0x22>
 801698c:	9b04      	ldr	r3, [sp, #16]
 801698e:	3304      	adds	r3, #4
 8016990:	9304      	str	r3, [sp, #16]
 8016992:	9b04      	ldr	r3, [sp, #16]
 8016994:	2500      	movs	r5, #0
 8016996:	1f1e      	subs	r6, r3, #4
 8016998:	0037      	movs	r7, r6
 801699a:	0034      	movs	r4, r6
 801699c:	9b08      	ldr	r3, [sp, #32]
 801699e:	6035      	str	r5, [r6, #0]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	9507      	str	r5, [sp, #28]
 80169a4:	9305      	str	r3, [sp, #20]
 80169a6:	9502      	str	r5, [sp, #8]
 80169a8:	9b05      	ldr	r3, [sp, #20]
 80169aa:	3301      	adds	r3, #1
 80169ac:	9309      	str	r3, [sp, #36]	; 0x24
 80169ae:	9b05      	ldr	r3, [sp, #20]
 80169b0:	785b      	ldrb	r3, [r3, #1]
 80169b2:	9303      	str	r3, [sp, #12]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d028      	beq.n	8016a0a <__hexnan+0x9a>
 80169b8:	9803      	ldr	r0, [sp, #12]
 80169ba:	f7ff fd73 	bl	80164a4 <__hexdig_fun>
 80169be:	2800      	cmp	r0, #0
 80169c0:	d145      	bne.n	8016a4e <__hexnan+0xde>
 80169c2:	9b03      	ldr	r3, [sp, #12]
 80169c4:	2b20      	cmp	r3, #32
 80169c6:	d819      	bhi.n	80169fc <__hexnan+0x8c>
 80169c8:	9b02      	ldr	r3, [sp, #8]
 80169ca:	9a07      	ldr	r2, [sp, #28]
 80169cc:	4293      	cmp	r3, r2
 80169ce:	dd12      	ble.n	80169f6 <__hexnan+0x86>
 80169d0:	42bc      	cmp	r4, r7
 80169d2:	d206      	bcs.n	80169e2 <__hexnan+0x72>
 80169d4:	2d07      	cmp	r5, #7
 80169d6:	dc04      	bgt.n	80169e2 <__hexnan+0x72>
 80169d8:	002a      	movs	r2, r5
 80169da:	0039      	movs	r1, r7
 80169dc:	0020      	movs	r0, r4
 80169de:	f7ff ffa1 	bl	8016924 <L_shift>
 80169e2:	9b01      	ldr	r3, [sp, #4]
 80169e4:	2508      	movs	r5, #8
 80169e6:	429c      	cmp	r4, r3
 80169e8:	d905      	bls.n	80169f6 <__hexnan+0x86>
 80169ea:	1f27      	subs	r7, r4, #4
 80169ec:	2500      	movs	r5, #0
 80169ee:	003c      	movs	r4, r7
 80169f0:	9b02      	ldr	r3, [sp, #8]
 80169f2:	603d      	str	r5, [r7, #0]
 80169f4:	9307      	str	r3, [sp, #28]
 80169f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169f8:	9305      	str	r3, [sp, #20]
 80169fa:	e7d5      	b.n	80169a8 <__hexnan+0x38>
 80169fc:	9b03      	ldr	r3, [sp, #12]
 80169fe:	2b29      	cmp	r3, #41	; 0x29
 8016a00:	d14a      	bne.n	8016a98 <__hexnan+0x128>
 8016a02:	9b05      	ldr	r3, [sp, #20]
 8016a04:	9a08      	ldr	r2, [sp, #32]
 8016a06:	3302      	adds	r3, #2
 8016a08:	6013      	str	r3, [r2, #0]
 8016a0a:	9b02      	ldr	r3, [sp, #8]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d043      	beq.n	8016a98 <__hexnan+0x128>
 8016a10:	42bc      	cmp	r4, r7
 8016a12:	d206      	bcs.n	8016a22 <__hexnan+0xb2>
 8016a14:	2d07      	cmp	r5, #7
 8016a16:	dc04      	bgt.n	8016a22 <__hexnan+0xb2>
 8016a18:	002a      	movs	r2, r5
 8016a1a:	0039      	movs	r1, r7
 8016a1c:	0020      	movs	r0, r4
 8016a1e:	f7ff ff81 	bl	8016924 <L_shift>
 8016a22:	9b01      	ldr	r3, [sp, #4]
 8016a24:	429c      	cmp	r4, r3
 8016a26:	d926      	bls.n	8016a76 <__hexnan+0x106>
 8016a28:	cc04      	ldmia	r4!, {r2}
 8016a2a:	601a      	str	r2, [r3, #0]
 8016a2c:	3304      	adds	r3, #4
 8016a2e:	42a6      	cmp	r6, r4
 8016a30:	d2fa      	bcs.n	8016a28 <__hexnan+0xb8>
 8016a32:	2200      	movs	r2, #0
 8016a34:	c304      	stmia	r3!, {r2}
 8016a36:	429e      	cmp	r6, r3
 8016a38:	d2fc      	bcs.n	8016a34 <__hexnan+0xc4>
 8016a3a:	6833      	ldr	r3, [r6, #0]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d104      	bne.n	8016a4a <__hexnan+0xda>
 8016a40:	9b01      	ldr	r3, [sp, #4]
 8016a42:	429e      	cmp	r6, r3
 8016a44:	d126      	bne.n	8016a94 <__hexnan+0x124>
 8016a46:	2301      	movs	r3, #1
 8016a48:	6033      	str	r3, [r6, #0]
 8016a4a:	2005      	movs	r0, #5
 8016a4c:	e025      	b.n	8016a9a <__hexnan+0x12a>
 8016a4e:	9b02      	ldr	r3, [sp, #8]
 8016a50:	3501      	adds	r5, #1
 8016a52:	3301      	adds	r3, #1
 8016a54:	9302      	str	r3, [sp, #8]
 8016a56:	2d08      	cmp	r5, #8
 8016a58:	dd06      	ble.n	8016a68 <__hexnan+0xf8>
 8016a5a:	9b01      	ldr	r3, [sp, #4]
 8016a5c:	429c      	cmp	r4, r3
 8016a5e:	d9ca      	bls.n	80169f6 <__hexnan+0x86>
 8016a60:	2300      	movs	r3, #0
 8016a62:	2501      	movs	r5, #1
 8016a64:	3c04      	subs	r4, #4
 8016a66:	6023      	str	r3, [r4, #0]
 8016a68:	220f      	movs	r2, #15
 8016a6a:	6823      	ldr	r3, [r4, #0]
 8016a6c:	4010      	ands	r0, r2
 8016a6e:	011b      	lsls	r3, r3, #4
 8016a70:	4318      	orrs	r0, r3
 8016a72:	6020      	str	r0, [r4, #0]
 8016a74:	e7bf      	b.n	80169f6 <__hexnan+0x86>
 8016a76:	9b06      	ldr	r3, [sp, #24]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d0de      	beq.n	8016a3a <__hexnan+0xca>
 8016a7c:	2120      	movs	r1, #32
 8016a7e:	9a06      	ldr	r2, [sp, #24]
 8016a80:	9b04      	ldr	r3, [sp, #16]
 8016a82:	1a89      	subs	r1, r1, r2
 8016a84:	2201      	movs	r2, #1
 8016a86:	4252      	negs	r2, r2
 8016a88:	40ca      	lsrs	r2, r1
 8016a8a:	3b04      	subs	r3, #4
 8016a8c:	6819      	ldr	r1, [r3, #0]
 8016a8e:	400a      	ands	r2, r1
 8016a90:	601a      	str	r2, [r3, #0]
 8016a92:	e7d2      	b.n	8016a3a <__hexnan+0xca>
 8016a94:	3e04      	subs	r6, #4
 8016a96:	e7d0      	b.n	8016a3a <__hexnan+0xca>
 8016a98:	2004      	movs	r0, #4
 8016a9a:	b00b      	add	sp, #44	; 0x2c
 8016a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016a9e <__localeconv_l>:
 8016a9e:	30f0      	adds	r0, #240	; 0xf0
 8016aa0:	4770      	bx	lr
	...

08016aa4 <_localeconv_r>:
 8016aa4:	4b03      	ldr	r3, [pc, #12]	; (8016ab4 <_localeconv_r+0x10>)
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016aaa:	2800      	cmp	r0, #0
 8016aac:	d100      	bne.n	8016ab0 <_localeconv_r+0xc>
 8016aae:	4802      	ldr	r0, [pc, #8]	; (8016ab8 <_localeconv_r+0x14>)
 8016ab0:	30f0      	adds	r0, #240	; 0xf0
 8016ab2:	4770      	bx	lr
 8016ab4:	200000d8 	.word	0x200000d8
 8016ab8:	20000508 	.word	0x20000508

08016abc <__retarget_lock_acquire_recursive>:
 8016abc:	4770      	bx	lr

08016abe <__retarget_lock_release_recursive>:
 8016abe:	4770      	bx	lr

08016ac0 <memchr>:
 8016ac0:	b2c9      	uxtb	r1, r1
 8016ac2:	1882      	adds	r2, r0, r2
 8016ac4:	4290      	cmp	r0, r2
 8016ac6:	d101      	bne.n	8016acc <memchr+0xc>
 8016ac8:	2000      	movs	r0, #0
 8016aca:	4770      	bx	lr
 8016acc:	7803      	ldrb	r3, [r0, #0]
 8016ace:	428b      	cmp	r3, r1
 8016ad0:	d0fb      	beq.n	8016aca <memchr+0xa>
 8016ad2:	3001      	adds	r0, #1
 8016ad4:	e7f6      	b.n	8016ac4 <memchr+0x4>

08016ad6 <memmove>:
 8016ad6:	b510      	push	{r4, lr}
 8016ad8:	4288      	cmp	r0, r1
 8016ada:	d902      	bls.n	8016ae2 <memmove+0xc>
 8016adc:	188b      	adds	r3, r1, r2
 8016ade:	4298      	cmp	r0, r3
 8016ae0:	d303      	bcc.n	8016aea <memmove+0x14>
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	e007      	b.n	8016af6 <memmove+0x20>
 8016ae6:	5c8b      	ldrb	r3, [r1, r2]
 8016ae8:	5483      	strb	r3, [r0, r2]
 8016aea:	3a01      	subs	r2, #1
 8016aec:	d2fb      	bcs.n	8016ae6 <memmove+0x10>
 8016aee:	bd10      	pop	{r4, pc}
 8016af0:	5ccc      	ldrb	r4, [r1, r3]
 8016af2:	54c4      	strb	r4, [r0, r3]
 8016af4:	3301      	adds	r3, #1
 8016af6:	429a      	cmp	r2, r3
 8016af8:	d1fa      	bne.n	8016af0 <memmove+0x1a>
 8016afa:	e7f8      	b.n	8016aee <memmove+0x18>

08016afc <_Balloc>:
 8016afc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016afe:	b570      	push	{r4, r5, r6, lr}
 8016b00:	0004      	movs	r4, r0
 8016b02:	000d      	movs	r5, r1
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d012      	beq.n	8016b2e <_Balloc+0x32>
 8016b08:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016b0a:	00ab      	lsls	r3, r5, #2
 8016b0c:	18d3      	adds	r3, r2, r3
 8016b0e:	6818      	ldr	r0, [r3, #0]
 8016b10:	2800      	cmp	r0, #0
 8016b12:	d115      	bne.n	8016b40 <_Balloc+0x44>
 8016b14:	2101      	movs	r1, #1
 8016b16:	000e      	movs	r6, r1
 8016b18:	40ae      	lsls	r6, r5
 8016b1a:	1d72      	adds	r2, r6, #5
 8016b1c:	0092      	lsls	r2, r2, #2
 8016b1e:	0020      	movs	r0, r4
 8016b20:	f7fb fe56 	bl	80127d0 <_calloc_r>
 8016b24:	2800      	cmp	r0, #0
 8016b26:	d009      	beq.n	8016b3c <_Balloc+0x40>
 8016b28:	6045      	str	r5, [r0, #4]
 8016b2a:	6086      	str	r6, [r0, #8]
 8016b2c:	e00a      	b.n	8016b44 <_Balloc+0x48>
 8016b2e:	2221      	movs	r2, #33	; 0x21
 8016b30:	2104      	movs	r1, #4
 8016b32:	f7fb fe4d 	bl	80127d0 <_calloc_r>
 8016b36:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	d1e5      	bne.n	8016b08 <_Balloc+0xc>
 8016b3c:	2000      	movs	r0, #0
 8016b3e:	bd70      	pop	{r4, r5, r6, pc}
 8016b40:	6802      	ldr	r2, [r0, #0]
 8016b42:	601a      	str	r2, [r3, #0]
 8016b44:	2300      	movs	r3, #0
 8016b46:	6103      	str	r3, [r0, #16]
 8016b48:	60c3      	str	r3, [r0, #12]
 8016b4a:	e7f8      	b.n	8016b3e <_Balloc+0x42>

08016b4c <_Bfree>:
 8016b4c:	2900      	cmp	r1, #0
 8016b4e:	d006      	beq.n	8016b5e <_Bfree+0x12>
 8016b50:	684b      	ldr	r3, [r1, #4]
 8016b52:	009a      	lsls	r2, r3, #2
 8016b54:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016b56:	189b      	adds	r3, r3, r2
 8016b58:	681a      	ldr	r2, [r3, #0]
 8016b5a:	600a      	str	r2, [r1, #0]
 8016b5c:	6019      	str	r1, [r3, #0]
 8016b5e:	4770      	bx	lr

08016b60 <__multadd>:
 8016b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b62:	001e      	movs	r6, r3
 8016b64:	2314      	movs	r3, #20
 8016b66:	469c      	mov	ip, r3
 8016b68:	0007      	movs	r7, r0
 8016b6a:	000c      	movs	r4, r1
 8016b6c:	2000      	movs	r0, #0
 8016b6e:	690d      	ldr	r5, [r1, #16]
 8016b70:	448c      	add	ip, r1
 8016b72:	4663      	mov	r3, ip
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	3001      	adds	r0, #1
 8016b78:	b299      	uxth	r1, r3
 8016b7a:	4663      	mov	r3, ip
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	4351      	muls	r1, r2
 8016b80:	0c1b      	lsrs	r3, r3, #16
 8016b82:	4353      	muls	r3, r2
 8016b84:	1989      	adds	r1, r1, r6
 8016b86:	0c0e      	lsrs	r6, r1, #16
 8016b88:	199b      	adds	r3, r3, r6
 8016b8a:	b289      	uxth	r1, r1
 8016b8c:	0c1e      	lsrs	r6, r3, #16
 8016b8e:	041b      	lsls	r3, r3, #16
 8016b90:	185b      	adds	r3, r3, r1
 8016b92:	4661      	mov	r1, ip
 8016b94:	c108      	stmia	r1!, {r3}
 8016b96:	468c      	mov	ip, r1
 8016b98:	4285      	cmp	r5, r0
 8016b9a:	dcea      	bgt.n	8016b72 <__multadd+0x12>
 8016b9c:	2e00      	cmp	r6, #0
 8016b9e:	d01b      	beq.n	8016bd8 <__multadd+0x78>
 8016ba0:	68a3      	ldr	r3, [r4, #8]
 8016ba2:	42ab      	cmp	r3, r5
 8016ba4:	dc12      	bgt.n	8016bcc <__multadd+0x6c>
 8016ba6:	6863      	ldr	r3, [r4, #4]
 8016ba8:	0038      	movs	r0, r7
 8016baa:	1c59      	adds	r1, r3, #1
 8016bac:	f7ff ffa6 	bl	8016afc <_Balloc>
 8016bb0:	0021      	movs	r1, r4
 8016bb2:	6923      	ldr	r3, [r4, #16]
 8016bb4:	9001      	str	r0, [sp, #4]
 8016bb6:	1c9a      	adds	r2, r3, #2
 8016bb8:	0092      	lsls	r2, r2, #2
 8016bba:	310c      	adds	r1, #12
 8016bbc:	300c      	adds	r0, #12
 8016bbe:	f7fc f8b6 	bl	8012d2e <memcpy>
 8016bc2:	0021      	movs	r1, r4
 8016bc4:	0038      	movs	r0, r7
 8016bc6:	f7ff ffc1 	bl	8016b4c <_Bfree>
 8016bca:	9c01      	ldr	r4, [sp, #4]
 8016bcc:	1d2b      	adds	r3, r5, #4
 8016bce:	009b      	lsls	r3, r3, #2
 8016bd0:	18e3      	adds	r3, r4, r3
 8016bd2:	3501      	adds	r5, #1
 8016bd4:	605e      	str	r6, [r3, #4]
 8016bd6:	6125      	str	r5, [r4, #16]
 8016bd8:	0020      	movs	r0, r4
 8016bda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016bdc <__s2b>:
 8016bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016bde:	0006      	movs	r6, r0
 8016be0:	0018      	movs	r0, r3
 8016be2:	000c      	movs	r4, r1
 8016be4:	3008      	adds	r0, #8
 8016be6:	2109      	movs	r1, #9
 8016be8:	9301      	str	r3, [sp, #4]
 8016bea:	0015      	movs	r5, r2
 8016bec:	f7e9 fb3a 	bl	8000264 <__divsi3>
 8016bf0:	2301      	movs	r3, #1
 8016bf2:	2100      	movs	r1, #0
 8016bf4:	4283      	cmp	r3, r0
 8016bf6:	db1f      	blt.n	8016c38 <__s2b+0x5c>
 8016bf8:	0030      	movs	r0, r6
 8016bfa:	f7ff ff7f 	bl	8016afc <_Balloc>
 8016bfe:	9b08      	ldr	r3, [sp, #32]
 8016c00:	6143      	str	r3, [r0, #20]
 8016c02:	2301      	movs	r3, #1
 8016c04:	6103      	str	r3, [r0, #16]
 8016c06:	2d09      	cmp	r5, #9
 8016c08:	dd19      	ble.n	8016c3e <__s2b+0x62>
 8016c0a:	0023      	movs	r3, r4
 8016c0c:	3309      	adds	r3, #9
 8016c0e:	001f      	movs	r7, r3
 8016c10:	9300      	str	r3, [sp, #0]
 8016c12:	1964      	adds	r4, r4, r5
 8016c14:	783b      	ldrb	r3, [r7, #0]
 8016c16:	0001      	movs	r1, r0
 8016c18:	3b30      	subs	r3, #48	; 0x30
 8016c1a:	220a      	movs	r2, #10
 8016c1c:	0030      	movs	r0, r6
 8016c1e:	3701      	adds	r7, #1
 8016c20:	f7ff ff9e 	bl	8016b60 <__multadd>
 8016c24:	42a7      	cmp	r7, r4
 8016c26:	d1f5      	bne.n	8016c14 <__s2b+0x38>
 8016c28:	9b00      	ldr	r3, [sp, #0]
 8016c2a:	195c      	adds	r4, r3, r5
 8016c2c:	3c08      	subs	r4, #8
 8016c2e:	002f      	movs	r7, r5
 8016c30:	9b01      	ldr	r3, [sp, #4]
 8016c32:	429f      	cmp	r7, r3
 8016c34:	db06      	blt.n	8016c44 <__s2b+0x68>
 8016c36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016c38:	005b      	lsls	r3, r3, #1
 8016c3a:	3101      	adds	r1, #1
 8016c3c:	e7da      	b.n	8016bf4 <__s2b+0x18>
 8016c3e:	340a      	adds	r4, #10
 8016c40:	2509      	movs	r5, #9
 8016c42:	e7f4      	b.n	8016c2e <__s2b+0x52>
 8016c44:	1b63      	subs	r3, r4, r5
 8016c46:	5ddb      	ldrb	r3, [r3, r7]
 8016c48:	0001      	movs	r1, r0
 8016c4a:	3b30      	subs	r3, #48	; 0x30
 8016c4c:	220a      	movs	r2, #10
 8016c4e:	0030      	movs	r0, r6
 8016c50:	f7ff ff86 	bl	8016b60 <__multadd>
 8016c54:	3701      	adds	r7, #1
 8016c56:	e7eb      	b.n	8016c30 <__s2b+0x54>

08016c58 <__hi0bits>:
 8016c58:	0003      	movs	r3, r0
 8016c5a:	0c02      	lsrs	r2, r0, #16
 8016c5c:	2000      	movs	r0, #0
 8016c5e:	4282      	cmp	r2, r0
 8016c60:	d101      	bne.n	8016c66 <__hi0bits+0xe>
 8016c62:	041b      	lsls	r3, r3, #16
 8016c64:	3010      	adds	r0, #16
 8016c66:	0e1a      	lsrs	r2, r3, #24
 8016c68:	d101      	bne.n	8016c6e <__hi0bits+0x16>
 8016c6a:	3008      	adds	r0, #8
 8016c6c:	021b      	lsls	r3, r3, #8
 8016c6e:	0f1a      	lsrs	r2, r3, #28
 8016c70:	d101      	bne.n	8016c76 <__hi0bits+0x1e>
 8016c72:	3004      	adds	r0, #4
 8016c74:	011b      	lsls	r3, r3, #4
 8016c76:	0f9a      	lsrs	r2, r3, #30
 8016c78:	d101      	bne.n	8016c7e <__hi0bits+0x26>
 8016c7a:	3002      	adds	r0, #2
 8016c7c:	009b      	lsls	r3, r3, #2
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	db03      	blt.n	8016c8a <__hi0bits+0x32>
 8016c82:	3001      	adds	r0, #1
 8016c84:	005b      	lsls	r3, r3, #1
 8016c86:	d400      	bmi.n	8016c8a <__hi0bits+0x32>
 8016c88:	2020      	movs	r0, #32
 8016c8a:	4770      	bx	lr

08016c8c <__lo0bits>:
 8016c8c:	2207      	movs	r2, #7
 8016c8e:	6803      	ldr	r3, [r0, #0]
 8016c90:	b510      	push	{r4, lr}
 8016c92:	0001      	movs	r1, r0
 8016c94:	401a      	ands	r2, r3
 8016c96:	d00d      	beq.n	8016cb4 <__lo0bits+0x28>
 8016c98:	2401      	movs	r4, #1
 8016c9a:	2000      	movs	r0, #0
 8016c9c:	4223      	tst	r3, r4
 8016c9e:	d105      	bne.n	8016cac <__lo0bits+0x20>
 8016ca0:	3002      	adds	r0, #2
 8016ca2:	4203      	tst	r3, r0
 8016ca4:	d003      	beq.n	8016cae <__lo0bits+0x22>
 8016ca6:	40e3      	lsrs	r3, r4
 8016ca8:	0020      	movs	r0, r4
 8016caa:	600b      	str	r3, [r1, #0]
 8016cac:	bd10      	pop	{r4, pc}
 8016cae:	089b      	lsrs	r3, r3, #2
 8016cb0:	600b      	str	r3, [r1, #0]
 8016cb2:	e7fb      	b.n	8016cac <__lo0bits+0x20>
 8016cb4:	b29c      	uxth	r4, r3
 8016cb6:	0010      	movs	r0, r2
 8016cb8:	2c00      	cmp	r4, #0
 8016cba:	d101      	bne.n	8016cc0 <__lo0bits+0x34>
 8016cbc:	2010      	movs	r0, #16
 8016cbe:	0c1b      	lsrs	r3, r3, #16
 8016cc0:	b2da      	uxtb	r2, r3
 8016cc2:	2a00      	cmp	r2, #0
 8016cc4:	d101      	bne.n	8016cca <__lo0bits+0x3e>
 8016cc6:	3008      	adds	r0, #8
 8016cc8:	0a1b      	lsrs	r3, r3, #8
 8016cca:	071a      	lsls	r2, r3, #28
 8016ccc:	d101      	bne.n	8016cd2 <__lo0bits+0x46>
 8016cce:	3004      	adds	r0, #4
 8016cd0:	091b      	lsrs	r3, r3, #4
 8016cd2:	079a      	lsls	r2, r3, #30
 8016cd4:	d101      	bne.n	8016cda <__lo0bits+0x4e>
 8016cd6:	3002      	adds	r0, #2
 8016cd8:	089b      	lsrs	r3, r3, #2
 8016cda:	07da      	lsls	r2, r3, #31
 8016cdc:	d4e8      	bmi.n	8016cb0 <__lo0bits+0x24>
 8016cde:	085b      	lsrs	r3, r3, #1
 8016ce0:	d001      	beq.n	8016ce6 <__lo0bits+0x5a>
 8016ce2:	3001      	adds	r0, #1
 8016ce4:	e7e4      	b.n	8016cb0 <__lo0bits+0x24>
 8016ce6:	2020      	movs	r0, #32
 8016ce8:	e7e0      	b.n	8016cac <__lo0bits+0x20>

08016cea <__i2b>:
 8016cea:	b510      	push	{r4, lr}
 8016cec:	000c      	movs	r4, r1
 8016cee:	2101      	movs	r1, #1
 8016cf0:	f7ff ff04 	bl	8016afc <_Balloc>
 8016cf4:	2301      	movs	r3, #1
 8016cf6:	6144      	str	r4, [r0, #20]
 8016cf8:	6103      	str	r3, [r0, #16]
 8016cfa:	bd10      	pop	{r4, pc}

08016cfc <__multiply>:
 8016cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cfe:	690b      	ldr	r3, [r1, #16]
 8016d00:	0014      	movs	r4, r2
 8016d02:	6912      	ldr	r2, [r2, #16]
 8016d04:	b089      	sub	sp, #36	; 0x24
 8016d06:	000d      	movs	r5, r1
 8016d08:	4293      	cmp	r3, r2
 8016d0a:	da01      	bge.n	8016d10 <__multiply+0x14>
 8016d0c:	0025      	movs	r5, r4
 8016d0e:	000c      	movs	r4, r1
 8016d10:	692f      	ldr	r7, [r5, #16]
 8016d12:	6926      	ldr	r6, [r4, #16]
 8016d14:	6869      	ldr	r1, [r5, #4]
 8016d16:	19bb      	adds	r3, r7, r6
 8016d18:	9302      	str	r3, [sp, #8]
 8016d1a:	68ab      	ldr	r3, [r5, #8]
 8016d1c:	19ba      	adds	r2, r7, r6
 8016d1e:	4293      	cmp	r3, r2
 8016d20:	da00      	bge.n	8016d24 <__multiply+0x28>
 8016d22:	3101      	adds	r1, #1
 8016d24:	f7ff feea 	bl	8016afc <_Balloc>
 8016d28:	0002      	movs	r2, r0
 8016d2a:	19bb      	adds	r3, r7, r6
 8016d2c:	3214      	adds	r2, #20
 8016d2e:	009b      	lsls	r3, r3, #2
 8016d30:	18d3      	adds	r3, r2, r3
 8016d32:	469c      	mov	ip, r3
 8016d34:	2100      	movs	r1, #0
 8016d36:	0013      	movs	r3, r2
 8016d38:	9004      	str	r0, [sp, #16]
 8016d3a:	4563      	cmp	r3, ip
 8016d3c:	d31d      	bcc.n	8016d7a <__multiply+0x7e>
 8016d3e:	3514      	adds	r5, #20
 8016d40:	00bf      	lsls	r7, r7, #2
 8016d42:	19eb      	adds	r3, r5, r7
 8016d44:	3414      	adds	r4, #20
 8016d46:	00b6      	lsls	r6, r6, #2
 8016d48:	9305      	str	r3, [sp, #20]
 8016d4a:	19a3      	adds	r3, r4, r6
 8016d4c:	9503      	str	r5, [sp, #12]
 8016d4e:	9401      	str	r4, [sp, #4]
 8016d50:	9307      	str	r3, [sp, #28]
 8016d52:	9b07      	ldr	r3, [sp, #28]
 8016d54:	9901      	ldr	r1, [sp, #4]
 8016d56:	4299      	cmp	r1, r3
 8016d58:	d311      	bcc.n	8016d7e <__multiply+0x82>
 8016d5a:	9b02      	ldr	r3, [sp, #8]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	dd06      	ble.n	8016d6e <__multiply+0x72>
 8016d60:	2304      	movs	r3, #4
 8016d62:	425b      	negs	r3, r3
 8016d64:	449c      	add	ip, r3
 8016d66:	4663      	mov	r3, ip
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d051      	beq.n	8016e12 <__multiply+0x116>
 8016d6e:	9b04      	ldr	r3, [sp, #16]
 8016d70:	9a02      	ldr	r2, [sp, #8]
 8016d72:	0018      	movs	r0, r3
 8016d74:	611a      	str	r2, [r3, #16]
 8016d76:	b009      	add	sp, #36	; 0x24
 8016d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d7a:	c302      	stmia	r3!, {r1}
 8016d7c:	e7dd      	b.n	8016d3a <__multiply+0x3e>
 8016d7e:	9b01      	ldr	r3, [sp, #4]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	b298      	uxth	r0, r3
 8016d84:	2800      	cmp	r0, #0
 8016d86:	d01c      	beq.n	8016dc2 <__multiply+0xc6>
 8016d88:	0015      	movs	r5, r2
 8016d8a:	2600      	movs	r6, #0
 8016d8c:	9f03      	ldr	r7, [sp, #12]
 8016d8e:	cf02      	ldmia	r7!, {r1}
 8016d90:	682c      	ldr	r4, [r5, #0]
 8016d92:	b28b      	uxth	r3, r1
 8016d94:	4343      	muls	r3, r0
 8016d96:	0c09      	lsrs	r1, r1, #16
 8016d98:	4341      	muls	r1, r0
 8016d9a:	b2a4      	uxth	r4, r4
 8016d9c:	191b      	adds	r3, r3, r4
 8016d9e:	199b      	adds	r3, r3, r6
 8016da0:	000e      	movs	r6, r1
 8016da2:	6829      	ldr	r1, [r5, #0]
 8016da4:	9506      	str	r5, [sp, #24]
 8016da6:	0c09      	lsrs	r1, r1, #16
 8016da8:	1871      	adds	r1, r6, r1
 8016daa:	0c1e      	lsrs	r6, r3, #16
 8016dac:	1989      	adds	r1, r1, r6
 8016dae:	0c0e      	lsrs	r6, r1, #16
 8016db0:	b29b      	uxth	r3, r3
 8016db2:	0409      	lsls	r1, r1, #16
 8016db4:	430b      	orrs	r3, r1
 8016db6:	c508      	stmia	r5!, {r3}
 8016db8:	9b05      	ldr	r3, [sp, #20]
 8016dba:	42bb      	cmp	r3, r7
 8016dbc:	d8e7      	bhi.n	8016d8e <__multiply+0x92>
 8016dbe:	9b06      	ldr	r3, [sp, #24]
 8016dc0:	605e      	str	r6, [r3, #4]
 8016dc2:	9b01      	ldr	r3, [sp, #4]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	0c1d      	lsrs	r5, r3, #16
 8016dc8:	d01e      	beq.n	8016e08 <__multiply+0x10c>
 8016dca:	0010      	movs	r0, r2
 8016dcc:	2700      	movs	r7, #0
 8016dce:	6813      	ldr	r3, [r2, #0]
 8016dd0:	9e03      	ldr	r6, [sp, #12]
 8016dd2:	6831      	ldr	r1, [r6, #0]
 8016dd4:	6804      	ldr	r4, [r0, #0]
 8016dd6:	b289      	uxth	r1, r1
 8016dd8:	4369      	muls	r1, r5
 8016dda:	0c24      	lsrs	r4, r4, #16
 8016ddc:	1909      	adds	r1, r1, r4
 8016dde:	19c9      	adds	r1, r1, r7
 8016de0:	040f      	lsls	r7, r1, #16
 8016de2:	b29b      	uxth	r3, r3
 8016de4:	433b      	orrs	r3, r7
 8016de6:	6003      	str	r3, [r0, #0]
 8016de8:	ce80      	ldmia	r6!, {r7}
 8016dea:	6843      	ldr	r3, [r0, #4]
 8016dec:	0c3f      	lsrs	r7, r7, #16
 8016dee:	436f      	muls	r7, r5
 8016df0:	b29b      	uxth	r3, r3
 8016df2:	18fb      	adds	r3, r7, r3
 8016df4:	0c09      	lsrs	r1, r1, #16
 8016df6:	185b      	adds	r3, r3, r1
 8016df8:	9905      	ldr	r1, [sp, #20]
 8016dfa:	9006      	str	r0, [sp, #24]
 8016dfc:	0c1f      	lsrs	r7, r3, #16
 8016dfe:	3004      	adds	r0, #4
 8016e00:	42b1      	cmp	r1, r6
 8016e02:	d8e6      	bhi.n	8016dd2 <__multiply+0xd6>
 8016e04:	9906      	ldr	r1, [sp, #24]
 8016e06:	604b      	str	r3, [r1, #4]
 8016e08:	9b01      	ldr	r3, [sp, #4]
 8016e0a:	3204      	adds	r2, #4
 8016e0c:	3304      	adds	r3, #4
 8016e0e:	9301      	str	r3, [sp, #4]
 8016e10:	e79f      	b.n	8016d52 <__multiply+0x56>
 8016e12:	9b02      	ldr	r3, [sp, #8]
 8016e14:	3b01      	subs	r3, #1
 8016e16:	9302      	str	r3, [sp, #8]
 8016e18:	e79f      	b.n	8016d5a <__multiply+0x5e>
	...

08016e1c <__pow5mult>:
 8016e1c:	2303      	movs	r3, #3
 8016e1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e20:	4013      	ands	r3, r2
 8016e22:	0006      	movs	r6, r0
 8016e24:	000f      	movs	r7, r1
 8016e26:	0015      	movs	r5, r2
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d008      	beq.n	8016e3e <__pow5mult+0x22>
 8016e2c:	491a      	ldr	r1, [pc, #104]	; (8016e98 <__pow5mult+0x7c>)
 8016e2e:	3b01      	subs	r3, #1
 8016e30:	009a      	lsls	r2, r3, #2
 8016e32:	5852      	ldr	r2, [r2, r1]
 8016e34:	2300      	movs	r3, #0
 8016e36:	0039      	movs	r1, r7
 8016e38:	f7ff fe92 	bl	8016b60 <__multadd>
 8016e3c:	0007      	movs	r7, r0
 8016e3e:	10ad      	asrs	r5, r5, #2
 8016e40:	d027      	beq.n	8016e92 <__pow5mult+0x76>
 8016e42:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8016e44:	2c00      	cmp	r4, #0
 8016e46:	d107      	bne.n	8016e58 <__pow5mult+0x3c>
 8016e48:	4914      	ldr	r1, [pc, #80]	; (8016e9c <__pow5mult+0x80>)
 8016e4a:	0030      	movs	r0, r6
 8016e4c:	f7ff ff4d 	bl	8016cea <__i2b>
 8016e50:	2300      	movs	r3, #0
 8016e52:	0004      	movs	r4, r0
 8016e54:	64b0      	str	r0, [r6, #72]	; 0x48
 8016e56:	6003      	str	r3, [r0, #0]
 8016e58:	2301      	movs	r3, #1
 8016e5a:	421d      	tst	r5, r3
 8016e5c:	d00a      	beq.n	8016e74 <__pow5mult+0x58>
 8016e5e:	0039      	movs	r1, r7
 8016e60:	0022      	movs	r2, r4
 8016e62:	0030      	movs	r0, r6
 8016e64:	f7ff ff4a 	bl	8016cfc <__multiply>
 8016e68:	0039      	movs	r1, r7
 8016e6a:	9001      	str	r0, [sp, #4]
 8016e6c:	0030      	movs	r0, r6
 8016e6e:	f7ff fe6d 	bl	8016b4c <_Bfree>
 8016e72:	9f01      	ldr	r7, [sp, #4]
 8016e74:	106d      	asrs	r5, r5, #1
 8016e76:	d00c      	beq.n	8016e92 <__pow5mult+0x76>
 8016e78:	6820      	ldr	r0, [r4, #0]
 8016e7a:	2800      	cmp	r0, #0
 8016e7c:	d107      	bne.n	8016e8e <__pow5mult+0x72>
 8016e7e:	0022      	movs	r2, r4
 8016e80:	0021      	movs	r1, r4
 8016e82:	0030      	movs	r0, r6
 8016e84:	f7ff ff3a 	bl	8016cfc <__multiply>
 8016e88:	2300      	movs	r3, #0
 8016e8a:	6020      	str	r0, [r4, #0]
 8016e8c:	6003      	str	r3, [r0, #0]
 8016e8e:	0004      	movs	r4, r0
 8016e90:	e7e2      	b.n	8016e58 <__pow5mult+0x3c>
 8016e92:	0038      	movs	r0, r7
 8016e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016e96:	46c0      	nop			; (mov r8, r8)
 8016e98:	0801a868 	.word	0x0801a868
 8016e9c:	00000271 	.word	0x00000271

08016ea0 <__lshift>:
 8016ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ea2:	000d      	movs	r5, r1
 8016ea4:	0017      	movs	r7, r2
 8016ea6:	692b      	ldr	r3, [r5, #16]
 8016ea8:	1154      	asrs	r4, r2, #5
 8016eaa:	b085      	sub	sp, #20
 8016eac:	18e3      	adds	r3, r4, r3
 8016eae:	9301      	str	r3, [sp, #4]
 8016eb0:	3301      	adds	r3, #1
 8016eb2:	9300      	str	r3, [sp, #0]
 8016eb4:	6849      	ldr	r1, [r1, #4]
 8016eb6:	68ab      	ldr	r3, [r5, #8]
 8016eb8:	9002      	str	r0, [sp, #8]
 8016eba:	9a00      	ldr	r2, [sp, #0]
 8016ebc:	4293      	cmp	r3, r2
 8016ebe:	db35      	blt.n	8016f2c <__lshift+0x8c>
 8016ec0:	9802      	ldr	r0, [sp, #8]
 8016ec2:	f7ff fe1b 	bl	8016afc <_Balloc>
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	0002      	movs	r2, r0
 8016eca:	0006      	movs	r6, r0
 8016ecc:	0019      	movs	r1, r3
 8016ece:	3214      	adds	r2, #20
 8016ed0:	42a3      	cmp	r3, r4
 8016ed2:	db2e      	blt.n	8016f32 <__lshift+0x92>
 8016ed4:	43e3      	mvns	r3, r4
 8016ed6:	17db      	asrs	r3, r3, #31
 8016ed8:	401c      	ands	r4, r3
 8016eda:	002b      	movs	r3, r5
 8016edc:	00a4      	lsls	r4, r4, #2
 8016ede:	1914      	adds	r4, r2, r4
 8016ee0:	692a      	ldr	r2, [r5, #16]
 8016ee2:	3314      	adds	r3, #20
 8016ee4:	0092      	lsls	r2, r2, #2
 8016ee6:	189a      	adds	r2, r3, r2
 8016ee8:	4694      	mov	ip, r2
 8016eea:	221f      	movs	r2, #31
 8016eec:	4017      	ands	r7, r2
 8016eee:	d024      	beq.n	8016f3a <__lshift+0x9a>
 8016ef0:	3201      	adds	r2, #1
 8016ef2:	1bd2      	subs	r2, r2, r7
 8016ef4:	9203      	str	r2, [sp, #12]
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	6819      	ldr	r1, [r3, #0]
 8016efa:	0020      	movs	r0, r4
 8016efc:	40b9      	lsls	r1, r7
 8016efe:	430a      	orrs	r2, r1
 8016f00:	c404      	stmia	r4!, {r2}
 8016f02:	cb04      	ldmia	r3!, {r2}
 8016f04:	9903      	ldr	r1, [sp, #12]
 8016f06:	40ca      	lsrs	r2, r1
 8016f08:	459c      	cmp	ip, r3
 8016f0a:	d8f5      	bhi.n	8016ef8 <__lshift+0x58>
 8016f0c:	6042      	str	r2, [r0, #4]
 8016f0e:	2a00      	cmp	r2, #0
 8016f10:	d002      	beq.n	8016f18 <__lshift+0x78>
 8016f12:	9b01      	ldr	r3, [sp, #4]
 8016f14:	3302      	adds	r3, #2
 8016f16:	9300      	str	r3, [sp, #0]
 8016f18:	9b00      	ldr	r3, [sp, #0]
 8016f1a:	9802      	ldr	r0, [sp, #8]
 8016f1c:	3b01      	subs	r3, #1
 8016f1e:	6133      	str	r3, [r6, #16]
 8016f20:	0029      	movs	r1, r5
 8016f22:	f7ff fe13 	bl	8016b4c <_Bfree>
 8016f26:	0030      	movs	r0, r6
 8016f28:	b005      	add	sp, #20
 8016f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f2c:	3101      	adds	r1, #1
 8016f2e:	005b      	lsls	r3, r3, #1
 8016f30:	e7c3      	b.n	8016eba <__lshift+0x1a>
 8016f32:	0098      	lsls	r0, r3, #2
 8016f34:	5011      	str	r1, [r2, r0]
 8016f36:	3301      	adds	r3, #1
 8016f38:	e7ca      	b.n	8016ed0 <__lshift+0x30>
 8016f3a:	cb04      	ldmia	r3!, {r2}
 8016f3c:	c404      	stmia	r4!, {r2}
 8016f3e:	459c      	cmp	ip, r3
 8016f40:	d8fb      	bhi.n	8016f3a <__lshift+0x9a>
 8016f42:	e7e9      	b.n	8016f18 <__lshift+0x78>

08016f44 <__mcmp>:
 8016f44:	690a      	ldr	r2, [r1, #16]
 8016f46:	6903      	ldr	r3, [r0, #16]
 8016f48:	b530      	push	{r4, r5, lr}
 8016f4a:	1a9b      	subs	r3, r3, r2
 8016f4c:	d10d      	bne.n	8016f6a <__mcmp+0x26>
 8016f4e:	0092      	lsls	r2, r2, #2
 8016f50:	3014      	adds	r0, #20
 8016f52:	3114      	adds	r1, #20
 8016f54:	1884      	adds	r4, r0, r2
 8016f56:	1889      	adds	r1, r1, r2
 8016f58:	3c04      	subs	r4, #4
 8016f5a:	3904      	subs	r1, #4
 8016f5c:	6825      	ldr	r5, [r4, #0]
 8016f5e:	680a      	ldr	r2, [r1, #0]
 8016f60:	4295      	cmp	r5, r2
 8016f62:	d004      	beq.n	8016f6e <__mcmp+0x2a>
 8016f64:	2301      	movs	r3, #1
 8016f66:	4295      	cmp	r5, r2
 8016f68:	d304      	bcc.n	8016f74 <__mcmp+0x30>
 8016f6a:	0018      	movs	r0, r3
 8016f6c:	bd30      	pop	{r4, r5, pc}
 8016f6e:	42a0      	cmp	r0, r4
 8016f70:	d3f2      	bcc.n	8016f58 <__mcmp+0x14>
 8016f72:	e7fa      	b.n	8016f6a <__mcmp+0x26>
 8016f74:	425b      	negs	r3, r3
 8016f76:	e7f8      	b.n	8016f6a <__mcmp+0x26>

08016f78 <__mdiff>:
 8016f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f7a:	000d      	movs	r5, r1
 8016f7c:	b085      	sub	sp, #20
 8016f7e:	0007      	movs	r7, r0
 8016f80:	0011      	movs	r1, r2
 8016f82:	0028      	movs	r0, r5
 8016f84:	0014      	movs	r4, r2
 8016f86:	f7ff ffdd 	bl	8016f44 <__mcmp>
 8016f8a:	1e06      	subs	r6, r0, #0
 8016f8c:	d108      	bne.n	8016fa0 <__mdiff+0x28>
 8016f8e:	0001      	movs	r1, r0
 8016f90:	0038      	movs	r0, r7
 8016f92:	f7ff fdb3 	bl	8016afc <_Balloc>
 8016f96:	2301      	movs	r3, #1
 8016f98:	6146      	str	r6, [r0, #20]
 8016f9a:	6103      	str	r3, [r0, #16]
 8016f9c:	b005      	add	sp, #20
 8016f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fa0:	2301      	movs	r3, #1
 8016fa2:	9301      	str	r3, [sp, #4]
 8016fa4:	2800      	cmp	r0, #0
 8016fa6:	db04      	blt.n	8016fb2 <__mdiff+0x3a>
 8016fa8:	0023      	movs	r3, r4
 8016faa:	002c      	movs	r4, r5
 8016fac:	001d      	movs	r5, r3
 8016fae:	2300      	movs	r3, #0
 8016fb0:	9301      	str	r3, [sp, #4]
 8016fb2:	6861      	ldr	r1, [r4, #4]
 8016fb4:	0038      	movs	r0, r7
 8016fb6:	f7ff fda1 	bl	8016afc <_Balloc>
 8016fba:	002f      	movs	r7, r5
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	9b01      	ldr	r3, [sp, #4]
 8016fc0:	6926      	ldr	r6, [r4, #16]
 8016fc2:	60c3      	str	r3, [r0, #12]
 8016fc4:	3414      	adds	r4, #20
 8016fc6:	00b3      	lsls	r3, r6, #2
 8016fc8:	18e3      	adds	r3, r4, r3
 8016fca:	9302      	str	r3, [sp, #8]
 8016fcc:	692b      	ldr	r3, [r5, #16]
 8016fce:	3714      	adds	r7, #20
 8016fd0:	009b      	lsls	r3, r3, #2
 8016fd2:	18fb      	adds	r3, r7, r3
 8016fd4:	9303      	str	r3, [sp, #12]
 8016fd6:	0003      	movs	r3, r0
 8016fd8:	4694      	mov	ip, r2
 8016fda:	3314      	adds	r3, #20
 8016fdc:	cc20      	ldmia	r4!, {r5}
 8016fde:	cf04      	ldmia	r7!, {r2}
 8016fe0:	9201      	str	r2, [sp, #4]
 8016fe2:	b2aa      	uxth	r2, r5
 8016fe4:	4494      	add	ip, r2
 8016fe6:	466a      	mov	r2, sp
 8016fe8:	4661      	mov	r1, ip
 8016fea:	8892      	ldrh	r2, [r2, #4]
 8016fec:	0c2d      	lsrs	r5, r5, #16
 8016fee:	1a8a      	subs	r2, r1, r2
 8016ff0:	9901      	ldr	r1, [sp, #4]
 8016ff2:	0c09      	lsrs	r1, r1, #16
 8016ff4:	1a69      	subs	r1, r5, r1
 8016ff6:	1415      	asrs	r5, r2, #16
 8016ff8:	1949      	adds	r1, r1, r5
 8016ffa:	140d      	asrs	r5, r1, #16
 8016ffc:	b292      	uxth	r2, r2
 8016ffe:	0409      	lsls	r1, r1, #16
 8017000:	430a      	orrs	r2, r1
 8017002:	601a      	str	r2, [r3, #0]
 8017004:	9a03      	ldr	r2, [sp, #12]
 8017006:	46ac      	mov	ip, r5
 8017008:	3304      	adds	r3, #4
 801700a:	42ba      	cmp	r2, r7
 801700c:	d8e6      	bhi.n	8016fdc <__mdiff+0x64>
 801700e:	9902      	ldr	r1, [sp, #8]
 8017010:	001a      	movs	r2, r3
 8017012:	428c      	cmp	r4, r1
 8017014:	d305      	bcc.n	8017022 <__mdiff+0xaa>
 8017016:	3a04      	subs	r2, #4
 8017018:	6813      	ldr	r3, [r2, #0]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d00e      	beq.n	801703c <__mdiff+0xc4>
 801701e:	6106      	str	r6, [r0, #16]
 8017020:	e7bc      	b.n	8016f9c <__mdiff+0x24>
 8017022:	cc04      	ldmia	r4!, {r2}
 8017024:	b291      	uxth	r1, r2
 8017026:	4461      	add	r1, ip
 8017028:	140d      	asrs	r5, r1, #16
 801702a:	0c12      	lsrs	r2, r2, #16
 801702c:	1952      	adds	r2, r2, r5
 801702e:	1415      	asrs	r5, r2, #16
 8017030:	b289      	uxth	r1, r1
 8017032:	0412      	lsls	r2, r2, #16
 8017034:	430a      	orrs	r2, r1
 8017036:	46ac      	mov	ip, r5
 8017038:	c304      	stmia	r3!, {r2}
 801703a:	e7e8      	b.n	801700e <__mdiff+0x96>
 801703c:	3e01      	subs	r6, #1
 801703e:	e7ea      	b.n	8017016 <__mdiff+0x9e>

08017040 <__ulp>:
 8017040:	000b      	movs	r3, r1
 8017042:	4910      	ldr	r1, [pc, #64]	; (8017084 <__ulp+0x44>)
 8017044:	b510      	push	{r4, lr}
 8017046:	4019      	ands	r1, r3
 8017048:	4b0f      	ldr	r3, [pc, #60]	; (8017088 <__ulp+0x48>)
 801704a:	18c9      	adds	r1, r1, r3
 801704c:	2900      	cmp	r1, #0
 801704e:	dd04      	ble.n	801705a <__ulp+0x1a>
 8017050:	2200      	movs	r2, #0
 8017052:	000b      	movs	r3, r1
 8017054:	0010      	movs	r0, r2
 8017056:	0019      	movs	r1, r3
 8017058:	bd10      	pop	{r4, pc}
 801705a:	4249      	negs	r1, r1
 801705c:	1509      	asrs	r1, r1, #20
 801705e:	2200      	movs	r2, #0
 8017060:	2300      	movs	r3, #0
 8017062:	2913      	cmp	r1, #19
 8017064:	dc04      	bgt.n	8017070 <__ulp+0x30>
 8017066:	2080      	movs	r0, #128	; 0x80
 8017068:	0300      	lsls	r0, r0, #12
 801706a:	4108      	asrs	r0, r1
 801706c:	0003      	movs	r3, r0
 801706e:	e7f1      	b.n	8017054 <__ulp+0x14>
 8017070:	3914      	subs	r1, #20
 8017072:	2001      	movs	r0, #1
 8017074:	291e      	cmp	r1, #30
 8017076:	dc02      	bgt.n	801707e <__ulp+0x3e>
 8017078:	241f      	movs	r4, #31
 801707a:	1a61      	subs	r1, r4, r1
 801707c:	4088      	lsls	r0, r1
 801707e:	0002      	movs	r2, r0
 8017080:	e7e8      	b.n	8017054 <__ulp+0x14>
 8017082:	46c0      	nop			; (mov r8, r8)
 8017084:	7ff00000 	.word	0x7ff00000
 8017088:	fcc00000 	.word	0xfcc00000

0801708c <__b2d>:
 801708c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801708e:	0006      	movs	r6, r0
 8017090:	6903      	ldr	r3, [r0, #16]
 8017092:	3614      	adds	r6, #20
 8017094:	009b      	lsls	r3, r3, #2
 8017096:	18f3      	adds	r3, r6, r3
 8017098:	1f1d      	subs	r5, r3, #4
 801709a:	682c      	ldr	r4, [r5, #0]
 801709c:	000f      	movs	r7, r1
 801709e:	0020      	movs	r0, r4
 80170a0:	9301      	str	r3, [sp, #4]
 80170a2:	f7ff fdd9 	bl	8016c58 <__hi0bits>
 80170a6:	2320      	movs	r3, #32
 80170a8:	1a1b      	subs	r3, r3, r0
 80170aa:	603b      	str	r3, [r7, #0]
 80170ac:	491c      	ldr	r1, [pc, #112]	; (8017120 <__b2d+0x94>)
 80170ae:	280a      	cmp	r0, #10
 80170b0:	dc16      	bgt.n	80170e0 <__b2d+0x54>
 80170b2:	230b      	movs	r3, #11
 80170b4:	0027      	movs	r7, r4
 80170b6:	1a1b      	subs	r3, r3, r0
 80170b8:	40df      	lsrs	r7, r3
 80170ba:	4339      	orrs	r1, r7
 80170bc:	469c      	mov	ip, r3
 80170be:	000b      	movs	r3, r1
 80170c0:	2100      	movs	r1, #0
 80170c2:	42ae      	cmp	r6, r5
 80170c4:	d202      	bcs.n	80170cc <__b2d+0x40>
 80170c6:	9901      	ldr	r1, [sp, #4]
 80170c8:	3908      	subs	r1, #8
 80170ca:	6809      	ldr	r1, [r1, #0]
 80170cc:	3015      	adds	r0, #21
 80170ce:	4084      	lsls	r4, r0
 80170d0:	4660      	mov	r0, ip
 80170d2:	40c1      	lsrs	r1, r0
 80170d4:	430c      	orrs	r4, r1
 80170d6:	0022      	movs	r2, r4
 80170d8:	0010      	movs	r0, r2
 80170da:	0019      	movs	r1, r3
 80170dc:	b003      	add	sp, #12
 80170de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170e0:	2700      	movs	r7, #0
 80170e2:	42ae      	cmp	r6, r5
 80170e4:	d202      	bcs.n	80170ec <__b2d+0x60>
 80170e6:	9d01      	ldr	r5, [sp, #4]
 80170e8:	3d08      	subs	r5, #8
 80170ea:	682f      	ldr	r7, [r5, #0]
 80170ec:	380b      	subs	r0, #11
 80170ee:	4684      	mov	ip, r0
 80170f0:	1e03      	subs	r3, r0, #0
 80170f2:	d012      	beq.n	801711a <__b2d+0x8e>
 80170f4:	409c      	lsls	r4, r3
 80170f6:	2020      	movs	r0, #32
 80170f8:	4321      	orrs	r1, r4
 80170fa:	003c      	movs	r4, r7
 80170fc:	1ac0      	subs	r0, r0, r3
 80170fe:	40c4      	lsrs	r4, r0
 8017100:	4321      	orrs	r1, r4
 8017102:	000b      	movs	r3, r1
 8017104:	2100      	movs	r1, #0
 8017106:	42b5      	cmp	r5, r6
 8017108:	d901      	bls.n	801710e <__b2d+0x82>
 801710a:	3d04      	subs	r5, #4
 801710c:	6829      	ldr	r1, [r5, #0]
 801710e:	4664      	mov	r4, ip
 8017110:	40c1      	lsrs	r1, r0
 8017112:	40a7      	lsls	r7, r4
 8017114:	430f      	orrs	r7, r1
 8017116:	003a      	movs	r2, r7
 8017118:	e7de      	b.n	80170d8 <__b2d+0x4c>
 801711a:	4321      	orrs	r1, r4
 801711c:	000b      	movs	r3, r1
 801711e:	e7fa      	b.n	8017116 <__b2d+0x8a>
 8017120:	3ff00000 	.word	0x3ff00000

08017124 <__d2b>:
 8017124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017126:	001d      	movs	r5, r3
 8017128:	2101      	movs	r1, #1
 801712a:	0014      	movs	r4, r2
 801712c:	9f08      	ldr	r7, [sp, #32]
 801712e:	f7ff fce5 	bl	8016afc <_Balloc>
 8017132:	032b      	lsls	r3, r5, #12
 8017134:	006d      	lsls	r5, r5, #1
 8017136:	0006      	movs	r6, r0
 8017138:	0b1b      	lsrs	r3, r3, #12
 801713a:	0d6d      	lsrs	r5, r5, #21
 801713c:	d124      	bne.n	8017188 <__d2b+0x64>
 801713e:	9301      	str	r3, [sp, #4]
 8017140:	2c00      	cmp	r4, #0
 8017142:	d027      	beq.n	8017194 <__d2b+0x70>
 8017144:	4668      	mov	r0, sp
 8017146:	9400      	str	r4, [sp, #0]
 8017148:	f7ff fda0 	bl	8016c8c <__lo0bits>
 801714c:	9c00      	ldr	r4, [sp, #0]
 801714e:	2800      	cmp	r0, #0
 8017150:	d01e      	beq.n	8017190 <__d2b+0x6c>
 8017152:	9b01      	ldr	r3, [sp, #4]
 8017154:	2120      	movs	r1, #32
 8017156:	001a      	movs	r2, r3
 8017158:	1a09      	subs	r1, r1, r0
 801715a:	408a      	lsls	r2, r1
 801715c:	40c3      	lsrs	r3, r0
 801715e:	4322      	orrs	r2, r4
 8017160:	6172      	str	r2, [r6, #20]
 8017162:	9301      	str	r3, [sp, #4]
 8017164:	9c01      	ldr	r4, [sp, #4]
 8017166:	61b4      	str	r4, [r6, #24]
 8017168:	1e63      	subs	r3, r4, #1
 801716a:	419c      	sbcs	r4, r3
 801716c:	3401      	adds	r4, #1
 801716e:	6134      	str	r4, [r6, #16]
 8017170:	2d00      	cmp	r5, #0
 8017172:	d018      	beq.n	80171a6 <__d2b+0x82>
 8017174:	4b12      	ldr	r3, [pc, #72]	; (80171c0 <__d2b+0x9c>)
 8017176:	18ed      	adds	r5, r5, r3
 8017178:	2335      	movs	r3, #53	; 0x35
 801717a:	182d      	adds	r5, r5, r0
 801717c:	603d      	str	r5, [r7, #0]
 801717e:	1a18      	subs	r0, r3, r0
 8017180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017182:	6018      	str	r0, [r3, #0]
 8017184:	0030      	movs	r0, r6
 8017186:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017188:	2280      	movs	r2, #128	; 0x80
 801718a:	0352      	lsls	r2, r2, #13
 801718c:	4313      	orrs	r3, r2
 801718e:	e7d6      	b.n	801713e <__d2b+0x1a>
 8017190:	6174      	str	r4, [r6, #20]
 8017192:	e7e7      	b.n	8017164 <__d2b+0x40>
 8017194:	a801      	add	r0, sp, #4
 8017196:	f7ff fd79 	bl	8016c8c <__lo0bits>
 801719a:	2401      	movs	r4, #1
 801719c:	9b01      	ldr	r3, [sp, #4]
 801719e:	6134      	str	r4, [r6, #16]
 80171a0:	6173      	str	r3, [r6, #20]
 80171a2:	3020      	adds	r0, #32
 80171a4:	e7e4      	b.n	8017170 <__d2b+0x4c>
 80171a6:	4b07      	ldr	r3, [pc, #28]	; (80171c4 <__d2b+0xa0>)
 80171a8:	18c0      	adds	r0, r0, r3
 80171aa:	4b07      	ldr	r3, [pc, #28]	; (80171c8 <__d2b+0xa4>)
 80171ac:	6038      	str	r0, [r7, #0]
 80171ae:	18e3      	adds	r3, r4, r3
 80171b0:	009b      	lsls	r3, r3, #2
 80171b2:	18f3      	adds	r3, r6, r3
 80171b4:	6958      	ldr	r0, [r3, #20]
 80171b6:	f7ff fd4f 	bl	8016c58 <__hi0bits>
 80171ba:	0164      	lsls	r4, r4, #5
 80171bc:	1a20      	subs	r0, r4, r0
 80171be:	e7df      	b.n	8017180 <__d2b+0x5c>
 80171c0:	fffffbcd 	.word	0xfffffbcd
 80171c4:	fffffbce 	.word	0xfffffbce
 80171c8:	3fffffff 	.word	0x3fffffff

080171cc <__ratio>:
 80171cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171ce:	b085      	sub	sp, #20
 80171d0:	000f      	movs	r7, r1
 80171d2:	a902      	add	r1, sp, #8
 80171d4:	0006      	movs	r6, r0
 80171d6:	f7ff ff59 	bl	801708c <__b2d>
 80171da:	0004      	movs	r4, r0
 80171dc:	000d      	movs	r5, r1
 80171de:	0038      	movs	r0, r7
 80171e0:	a903      	add	r1, sp, #12
 80171e2:	9400      	str	r4, [sp, #0]
 80171e4:	9501      	str	r5, [sp, #4]
 80171e6:	f7ff ff51 	bl	801708c <__b2d>
 80171ea:	6936      	ldr	r6, [r6, #16]
 80171ec:	693f      	ldr	r7, [r7, #16]
 80171ee:	0002      	movs	r2, r0
 80171f0:	1bf7      	subs	r7, r6, r7
 80171f2:	017e      	lsls	r6, r7, #5
 80171f4:	46b4      	mov	ip, r6
 80171f6:	9f03      	ldr	r7, [sp, #12]
 80171f8:	9e02      	ldr	r6, [sp, #8]
 80171fa:	000b      	movs	r3, r1
 80171fc:	1bf6      	subs	r6, r6, r7
 80171fe:	4466      	add	r6, ip
 8017200:	0537      	lsls	r7, r6, #20
 8017202:	2e00      	cmp	r6, #0
 8017204:	dd07      	ble.n	8017216 <__ratio+0x4a>
 8017206:	1979      	adds	r1, r7, r5
 8017208:	9101      	str	r1, [sp, #4]
 801720a:	9800      	ldr	r0, [sp, #0]
 801720c:	9901      	ldr	r1, [sp, #4]
 801720e:	f7ea fa07 	bl	8001620 <__aeabi_ddiv>
 8017212:	b005      	add	sp, #20
 8017214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017216:	1bcb      	subs	r3, r1, r7
 8017218:	e7f7      	b.n	801720a <__ratio+0x3e>

0801721a <__copybits>:
 801721a:	0013      	movs	r3, r2
 801721c:	3901      	subs	r1, #1
 801721e:	b510      	push	{r4, lr}
 8017220:	1149      	asrs	r1, r1, #5
 8017222:	6912      	ldr	r2, [r2, #16]
 8017224:	3101      	adds	r1, #1
 8017226:	0089      	lsls	r1, r1, #2
 8017228:	3314      	adds	r3, #20
 801722a:	0092      	lsls	r2, r2, #2
 801722c:	1841      	adds	r1, r0, r1
 801722e:	189a      	adds	r2, r3, r2
 8017230:	429a      	cmp	r2, r3
 8017232:	d803      	bhi.n	801723c <__copybits+0x22>
 8017234:	2300      	movs	r3, #0
 8017236:	4281      	cmp	r1, r0
 8017238:	d803      	bhi.n	8017242 <__copybits+0x28>
 801723a:	bd10      	pop	{r4, pc}
 801723c:	cb10      	ldmia	r3!, {r4}
 801723e:	c010      	stmia	r0!, {r4}
 8017240:	e7f6      	b.n	8017230 <__copybits+0x16>
 8017242:	c008      	stmia	r0!, {r3}
 8017244:	e7f7      	b.n	8017236 <__copybits+0x1c>

08017246 <__any_on>:
 8017246:	0002      	movs	r2, r0
 8017248:	6900      	ldr	r0, [r0, #16]
 801724a:	b510      	push	{r4, lr}
 801724c:	3214      	adds	r2, #20
 801724e:	114b      	asrs	r3, r1, #5
 8017250:	4298      	cmp	r0, r3
 8017252:	db12      	blt.n	801727a <__any_on+0x34>
 8017254:	dd0b      	ble.n	801726e <__any_on+0x28>
 8017256:	201f      	movs	r0, #31
 8017258:	4001      	ands	r1, r0
 801725a:	d008      	beq.n	801726e <__any_on+0x28>
 801725c:	0098      	lsls	r0, r3, #2
 801725e:	5884      	ldr	r4, [r0, r2]
 8017260:	0020      	movs	r0, r4
 8017262:	40c8      	lsrs	r0, r1
 8017264:	4088      	lsls	r0, r1
 8017266:	0001      	movs	r1, r0
 8017268:	2001      	movs	r0, #1
 801726a:	428c      	cmp	r4, r1
 801726c:	d104      	bne.n	8017278 <__any_on+0x32>
 801726e:	009b      	lsls	r3, r3, #2
 8017270:	18d3      	adds	r3, r2, r3
 8017272:	4293      	cmp	r3, r2
 8017274:	d803      	bhi.n	801727e <__any_on+0x38>
 8017276:	2000      	movs	r0, #0
 8017278:	bd10      	pop	{r4, pc}
 801727a:	0003      	movs	r3, r0
 801727c:	e7f7      	b.n	801726e <__any_on+0x28>
 801727e:	3b04      	subs	r3, #4
 8017280:	6819      	ldr	r1, [r3, #0]
 8017282:	2900      	cmp	r1, #0
 8017284:	d0f5      	beq.n	8017272 <__any_on+0x2c>
 8017286:	2001      	movs	r0, #1
 8017288:	e7f6      	b.n	8017278 <__any_on+0x32>
	...

0801728c <frexp>:
 801728c:	b570      	push	{r4, r5, r6, lr}
 801728e:	0014      	movs	r4, r2
 8017290:	2500      	movs	r5, #0
 8017292:	6025      	str	r5, [r4, #0]
 8017294:	4d10      	ldr	r5, [pc, #64]	; (80172d8 <frexp+0x4c>)
 8017296:	004b      	lsls	r3, r1, #1
 8017298:	000a      	movs	r2, r1
 801729a:	085b      	lsrs	r3, r3, #1
 801729c:	42ab      	cmp	r3, r5
 801729e:	dc1a      	bgt.n	80172d6 <frexp+0x4a>
 80172a0:	001d      	movs	r5, r3
 80172a2:	4305      	orrs	r5, r0
 80172a4:	d017      	beq.n	80172d6 <frexp+0x4a>
 80172a6:	4d0d      	ldr	r5, [pc, #52]	; (80172dc <frexp+0x50>)
 80172a8:	42ab      	cmp	r3, r5
 80172aa:	dc09      	bgt.n	80172c0 <frexp+0x34>
 80172ac:	2200      	movs	r2, #0
 80172ae:	4b0c      	ldr	r3, [pc, #48]	; (80172e0 <frexp+0x54>)
 80172b0:	f7ea fdc0 	bl	8001e34 <__aeabi_dmul>
 80172b4:	2536      	movs	r5, #54	; 0x36
 80172b6:	000a      	movs	r2, r1
 80172b8:	004b      	lsls	r3, r1, #1
 80172ba:	426d      	negs	r5, r5
 80172bc:	085b      	lsrs	r3, r3, #1
 80172be:	6025      	str	r5, [r4, #0]
 80172c0:	4d08      	ldr	r5, [pc, #32]	; (80172e4 <frexp+0x58>)
 80172c2:	151b      	asrs	r3, r3, #20
 80172c4:	195b      	adds	r3, r3, r5
 80172c6:	6825      	ldr	r5, [r4, #0]
 80172c8:	18eb      	adds	r3, r5, r3
 80172ca:	6023      	str	r3, [r4, #0]
 80172cc:	4b06      	ldr	r3, [pc, #24]	; (80172e8 <frexp+0x5c>)
 80172ce:	401a      	ands	r2, r3
 80172d0:	4b06      	ldr	r3, [pc, #24]	; (80172ec <frexp+0x60>)
 80172d2:	4313      	orrs	r3, r2
 80172d4:	0019      	movs	r1, r3
 80172d6:	bd70      	pop	{r4, r5, r6, pc}
 80172d8:	7fefffff 	.word	0x7fefffff
 80172dc:	000fffff 	.word	0x000fffff
 80172e0:	43500000 	.word	0x43500000
 80172e4:	fffffc02 	.word	0xfffffc02
 80172e8:	800fffff 	.word	0x800fffff
 80172ec:	3fe00000 	.word	0x3fe00000

080172f0 <__ssprint_r>:
 80172f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172f2:	6893      	ldr	r3, [r2, #8]
 80172f4:	b087      	sub	sp, #28
 80172f6:	9002      	str	r0, [sp, #8]
 80172f8:	000c      	movs	r4, r1
 80172fa:	0016      	movs	r6, r2
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d063      	beq.n	80173c8 <__ssprint_r+0xd8>
 8017300:	6813      	ldr	r3, [r2, #0]
 8017302:	9303      	str	r3, [sp, #12]
 8017304:	2300      	movs	r3, #0
 8017306:	001f      	movs	r7, r3
 8017308:	9305      	str	r3, [sp, #20]
 801730a:	2f00      	cmp	r7, #0
 801730c:	d02e      	beq.n	801736c <__ssprint_r+0x7c>
 801730e:	68a5      	ldr	r5, [r4, #8]
 8017310:	42af      	cmp	r7, r5
 8017312:	d347      	bcc.n	80173a4 <__ssprint_r+0xb4>
 8017314:	2390      	movs	r3, #144	; 0x90
 8017316:	89a2      	ldrh	r2, [r4, #12]
 8017318:	00db      	lsls	r3, r3, #3
 801731a:	421a      	tst	r2, r3
 801731c:	d042      	beq.n	80173a4 <__ssprint_r+0xb4>
 801731e:	2003      	movs	r0, #3
 8017320:	6921      	ldr	r1, [r4, #16]
 8017322:	6823      	ldr	r3, [r4, #0]
 8017324:	1a5b      	subs	r3, r3, r1
 8017326:	9304      	str	r3, [sp, #16]
 8017328:	6963      	ldr	r3, [r4, #20]
 801732a:	4343      	muls	r3, r0
 801732c:	0fd8      	lsrs	r0, r3, #31
 801732e:	18c3      	adds	r3, r0, r3
 8017330:	105b      	asrs	r3, r3, #1
 8017332:	9301      	str	r3, [sp, #4]
 8017334:	9b04      	ldr	r3, [sp, #16]
 8017336:	9801      	ldr	r0, [sp, #4]
 8017338:	3301      	adds	r3, #1
 801733a:	19db      	adds	r3, r3, r7
 801733c:	4283      	cmp	r3, r0
 801733e:	d900      	bls.n	8017342 <__ssprint_r+0x52>
 8017340:	9301      	str	r3, [sp, #4]
 8017342:	0553      	lsls	r3, r2, #21
 8017344:	d544      	bpl.n	80173d0 <__ssprint_r+0xe0>
 8017346:	9901      	ldr	r1, [sp, #4]
 8017348:	9802      	ldr	r0, [sp, #8]
 801734a:	f7fb fab7 	bl	80128bc <_malloc_r>
 801734e:	1e05      	subs	r5, r0, #0
 8017350:	d114      	bne.n	801737c <__ssprint_r+0x8c>
 8017352:	230c      	movs	r3, #12
 8017354:	9a02      	ldr	r2, [sp, #8]
 8017356:	2001      	movs	r0, #1
 8017358:	6013      	str	r3, [r2, #0]
 801735a:	2340      	movs	r3, #64	; 0x40
 801735c:	89a2      	ldrh	r2, [r4, #12]
 801735e:	4240      	negs	r0, r0
 8017360:	4313      	orrs	r3, r2
 8017362:	81a3      	strh	r3, [r4, #12]
 8017364:	2300      	movs	r3, #0
 8017366:	60b3      	str	r3, [r6, #8]
 8017368:	6073      	str	r3, [r6, #4]
 801736a:	e02f      	b.n	80173cc <__ssprint_r+0xdc>
 801736c:	9b03      	ldr	r3, [sp, #12]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	9305      	str	r3, [sp, #20]
 8017372:	9b03      	ldr	r3, [sp, #12]
 8017374:	685f      	ldr	r7, [r3, #4]
 8017376:	3308      	adds	r3, #8
 8017378:	9303      	str	r3, [sp, #12]
 801737a:	e7c6      	b.n	801730a <__ssprint_r+0x1a>
 801737c:	9a04      	ldr	r2, [sp, #16]
 801737e:	6921      	ldr	r1, [r4, #16]
 8017380:	f7fb fcd5 	bl	8012d2e <memcpy>
 8017384:	89a3      	ldrh	r3, [r4, #12]
 8017386:	4a18      	ldr	r2, [pc, #96]	; (80173e8 <__ssprint_r+0xf8>)
 8017388:	401a      	ands	r2, r3
 801738a:	2380      	movs	r3, #128	; 0x80
 801738c:	4313      	orrs	r3, r2
 801738e:	81a3      	strh	r3, [r4, #12]
 8017390:	9b04      	ldr	r3, [sp, #16]
 8017392:	6125      	str	r5, [r4, #16]
 8017394:	18ed      	adds	r5, r5, r3
 8017396:	6025      	str	r5, [r4, #0]
 8017398:	003d      	movs	r5, r7
 801739a:	9b01      	ldr	r3, [sp, #4]
 801739c:	9a04      	ldr	r2, [sp, #16]
 801739e:	6163      	str	r3, [r4, #20]
 80173a0:	1a9b      	subs	r3, r3, r2
 80173a2:	60a3      	str	r3, [r4, #8]
 80173a4:	42bd      	cmp	r5, r7
 80173a6:	d900      	bls.n	80173aa <__ssprint_r+0xba>
 80173a8:	003d      	movs	r5, r7
 80173aa:	002a      	movs	r2, r5
 80173ac:	9905      	ldr	r1, [sp, #20]
 80173ae:	6820      	ldr	r0, [r4, #0]
 80173b0:	f7ff fb91 	bl	8016ad6 <memmove>
 80173b4:	68a3      	ldr	r3, [r4, #8]
 80173b6:	1b5b      	subs	r3, r3, r5
 80173b8:	60a3      	str	r3, [r4, #8]
 80173ba:	6823      	ldr	r3, [r4, #0]
 80173bc:	195d      	adds	r5, r3, r5
 80173be:	68b3      	ldr	r3, [r6, #8]
 80173c0:	6025      	str	r5, [r4, #0]
 80173c2:	1bdb      	subs	r3, r3, r7
 80173c4:	60b3      	str	r3, [r6, #8]
 80173c6:	d1d1      	bne.n	801736c <__ssprint_r+0x7c>
 80173c8:	2000      	movs	r0, #0
 80173ca:	6070      	str	r0, [r6, #4]
 80173cc:	b007      	add	sp, #28
 80173ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173d0:	9a01      	ldr	r2, [sp, #4]
 80173d2:	9802      	ldr	r0, [sp, #8]
 80173d4:	f7fb fcf0 	bl	8012db8 <_realloc_r>
 80173d8:	1e05      	subs	r5, r0, #0
 80173da:	d1d9      	bne.n	8017390 <__ssprint_r+0xa0>
 80173dc:	6921      	ldr	r1, [r4, #16]
 80173de:	9802      	ldr	r0, [sp, #8]
 80173e0:	f7fe ff78 	bl	80162d4 <_free_r>
 80173e4:	e7b5      	b.n	8017352 <__ssprint_r+0x62>
 80173e6:	46c0      	nop			; (mov r8, r8)
 80173e8:	fffffb7f 	.word	0xfffffb7f

080173ec <__register_exitproc>:
 80173ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80173ee:	4d29      	ldr	r5, [pc, #164]	; (8017494 <__register_exitproc+0xa8>)
 80173f0:	0006      	movs	r6, r0
 80173f2:	6828      	ldr	r0, [r5, #0]
 80173f4:	9301      	str	r3, [sp, #4]
 80173f6:	9100      	str	r1, [sp, #0]
 80173f8:	0017      	movs	r7, r2
 80173fa:	f7ff fb5f 	bl	8016abc <__retarget_lock_acquire_recursive>
 80173fe:	4b26      	ldr	r3, [pc, #152]	; (8017498 <__register_exitproc+0xac>)
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	001c      	movs	r4, r3
 8017404:	34fc      	adds	r4, #252	; 0xfc
 8017406:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017408:	2800      	cmp	r0, #0
 801740a:	d103      	bne.n	8017414 <__register_exitproc+0x28>
 801740c:	334d      	adds	r3, #77	; 0x4d
 801740e:	33ff      	adds	r3, #255	; 0xff
 8017410:	0018      	movs	r0, r3
 8017412:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017414:	6843      	ldr	r3, [r0, #4]
 8017416:	2b1f      	cmp	r3, #31
 8017418:	dd18      	ble.n	801744c <__register_exitproc+0x60>
 801741a:	4b20      	ldr	r3, [pc, #128]	; (801749c <__register_exitproc+0xb0>)
 801741c:	2b00      	cmp	r3, #0
 801741e:	d105      	bne.n	801742c <__register_exitproc+0x40>
 8017420:	6828      	ldr	r0, [r5, #0]
 8017422:	f7ff fb4c 	bl	8016abe <__retarget_lock_release_recursive>
 8017426:	2001      	movs	r0, #1
 8017428:	4240      	negs	r0, r0
 801742a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801742c:	20c8      	movs	r0, #200	; 0xc8
 801742e:	0040      	lsls	r0, r0, #1
 8017430:	f7fb fa30 	bl	8012894 <malloc>
 8017434:	2800      	cmp	r0, #0
 8017436:	d0f3      	beq.n	8017420 <__register_exitproc+0x34>
 8017438:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801743a:	2300      	movs	r3, #0
 801743c:	6002      	str	r2, [r0, #0]
 801743e:	22c4      	movs	r2, #196	; 0xc4
 8017440:	0052      	lsls	r2, r2, #1
 8017442:	6043      	str	r3, [r0, #4]
 8017444:	64e0      	str	r0, [r4, #76]	; 0x4c
 8017446:	5083      	str	r3, [r0, r2]
 8017448:	3204      	adds	r2, #4
 801744a:	5083      	str	r3, [r0, r2]
 801744c:	6843      	ldr	r3, [r0, #4]
 801744e:	2e00      	cmp	r6, #0
 8017450:	d014      	beq.n	801747c <__register_exitproc+0x90>
 8017452:	009a      	lsls	r2, r3, #2
 8017454:	1882      	adds	r2, r0, r2
 8017456:	0011      	movs	r1, r2
 8017458:	3188      	adds	r1, #136	; 0x88
 801745a:	600f      	str	r7, [r1, #0]
 801745c:	2101      	movs	r1, #1
 801745e:	0004      	movs	r4, r0
 8017460:	4099      	lsls	r1, r3
 8017462:	3485      	adds	r4, #133	; 0x85
 8017464:	34ff      	adds	r4, #255	; 0xff
 8017466:	6865      	ldr	r5, [r4, #4]
 8017468:	32fc      	adds	r2, #252	; 0xfc
 801746a:	430d      	orrs	r5, r1
 801746c:	6065      	str	r5, [r4, #4]
 801746e:	9d01      	ldr	r5, [sp, #4]
 8017470:	60d5      	str	r5, [r2, #12]
 8017472:	2e02      	cmp	r6, #2
 8017474:	d102      	bne.n	801747c <__register_exitproc+0x90>
 8017476:	68a2      	ldr	r2, [r4, #8]
 8017478:	4311      	orrs	r1, r2
 801747a:	60a1      	str	r1, [r4, #8]
 801747c:	1c5a      	adds	r2, r3, #1
 801747e:	6042      	str	r2, [r0, #4]
 8017480:	3302      	adds	r3, #2
 8017482:	9a00      	ldr	r2, [sp, #0]
 8017484:	009b      	lsls	r3, r3, #2
 8017486:	501a      	str	r2, [r3, r0]
 8017488:	4b02      	ldr	r3, [pc, #8]	; (8017494 <__register_exitproc+0xa8>)
 801748a:	6818      	ldr	r0, [r3, #0]
 801748c:	f7ff fb17 	bl	8016abe <__retarget_lock_release_recursive>
 8017490:	2000      	movs	r0, #0
 8017492:	e7ca      	b.n	801742a <__register_exitproc+0x3e>
 8017494:	20000a84 	.word	0x20000a84
 8017498:	0801a5ac 	.word	0x0801a5ac
 801749c:	08012895 	.word	0x08012895

080174a0 <_sbrk>:
 80174a0:	4b05      	ldr	r3, [pc, #20]	; (80174b8 <_sbrk+0x18>)
 80174a2:	0002      	movs	r2, r0
 80174a4:	6819      	ldr	r1, [r3, #0]
 80174a6:	2900      	cmp	r1, #0
 80174a8:	d101      	bne.n	80174ae <_sbrk+0xe>
 80174aa:	4904      	ldr	r1, [pc, #16]	; (80174bc <_sbrk+0x1c>)
 80174ac:	6019      	str	r1, [r3, #0]
 80174ae:	6818      	ldr	r0, [r3, #0]
 80174b0:	1882      	adds	r2, r0, r2
 80174b2:	601a      	str	r2, [r3, #0]
 80174b4:	4770      	bx	lr
 80174b6:	46c0      	nop			; (mov r8, r8)
 80174b8:	20006d2c 	.word	0x20006d2c
 80174bc:	200072e0 	.word	0x200072e0

080174c0 <_init>:
 80174c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174c2:	46c0      	nop			; (mov r8, r8)
 80174c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174c6:	bc08      	pop	{r3}
 80174c8:	469e      	mov	lr, r3
 80174ca:	4770      	bx	lr

080174cc <_fini>:
 80174cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174ce:	46c0      	nop			; (mov r8, r8)
 80174d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174d2:	bc08      	pop	{r3}
 80174d4:	469e      	mov	lr, r3
 80174d6:	4770      	bx	lr
