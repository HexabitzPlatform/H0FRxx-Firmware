
H0FRxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001870c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a5c  080187c8  080187c8  000287c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c224  0801c224  00030a78  2**0
                  CONTENTS
  4 .ARM          00000008  0801c224  0801c224  0002c224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c22c  0801c22c  00030a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801c22c  0801c22c  0002c22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c234  0801c234  0002c234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a78  20000000  0801c238  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006770  20000a78  0801ccb0  00030a78  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200071e8  0801ccb0  000371e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY
 12 .debug_info   00058a9b  00000000  00000000  00030aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009af8  00000000  00000000  0008953b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c443  00000000  00000000  00093033  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001b40  00000000  00000000  000af478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00003020  00000000  00000000  000b0fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018892  00000000  00000000  000b3fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ab2b  00000000  00000000  000cc86a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7395  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006628  00000000  00000000  000d7410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a78 	.word	0x20000a78
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080187b0 	.word	0x080187b0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a7c 	.word	0x20000a7c
 8000100:	080187b0 	.word	0x080187b0

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fdbf 	bl	8001fd0 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fd17 	bl	8001e90 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fdb1 	bl	8001fd0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fda7 	bl	8001fd0 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd39 	bl	8001f08 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fd2f 	bl	8001f08 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fb21 	bl	8000b08 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 faa3 	bl	8000a1c <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb13 	bl	8000b08 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb09 	bl	8000b08 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fab1 	bl	8000a6c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 faa7 	bl	8000a6c <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f88a 	bl	8000674 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fddf 	bl	8001194 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fc15 	bl	8000e0c <__aeabi_fsub>
 80005e2:	f000 fdd7 	bl	8001194 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 fb21 	bl	8002c4c <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 ffb6 	bl	8002584 <__aeabi_dsub>
 8000618:	f002 fb18 	bl	8002c4c <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__aeabi_ul2f>:
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <__aeabi_ul2f+0x40>)
 800062e:	b5d0      	push	{r4, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	4299      	cmp	r1, r3
 8000634:	d906      	bls.n	8000644 <__aeabi_ul2f+0x18>
 8000636:	0543      	lsls	r3, r0, #21
 8000638:	d004      	beq.n	8000644 <__aeabi_ul2f+0x18>
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	0ac4      	lsrs	r4, r0, #11
 800063e:	02e4      	lsls	r4, r4, #11
 8000640:	011b      	lsls	r3, r3, #4
 8000642:	431c      	orrs	r4, r3
 8000644:	0008      	movs	r0, r1
 8000646:	f002 fb71 	bl	8002d2c <__aeabi_ui2d>
 800064a:	2200      	movs	r2, #0
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <__aeabi_ul2f+0x44>)
 800064e:	f001 fd27 	bl	80020a0 <__aeabi_dmul>
 8000652:	0006      	movs	r6, r0
 8000654:	000f      	movs	r7, r1
 8000656:	0020      	movs	r0, r4
 8000658:	f002 fb68 	bl	8002d2c <__aeabi_ui2d>
 800065c:	0032      	movs	r2, r6
 800065e:	003b      	movs	r3, r7
 8000660:	f000 fdf8 	bl	8001254 <__aeabi_dadd>
 8000664:	f002 fbe6 	bl	8002e34 <__aeabi_d2f>
 8000668:	bdd0      	pop	{r4, r6, r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	001fffff 	.word	0x001fffff
 8000670:	41f00000 	.word	0x41f00000

08000674 <__udivmoddi4>:
 8000674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000676:	464f      	mov	r7, r9
 8000678:	4646      	mov	r6, r8
 800067a:	46d6      	mov	lr, sl
 800067c:	b5c0      	push	{r6, r7, lr}
 800067e:	0004      	movs	r4, r0
 8000680:	b082      	sub	sp, #8
 8000682:	000d      	movs	r5, r1
 8000684:	4691      	mov	r9, r2
 8000686:	4698      	mov	r8, r3
 8000688:	428b      	cmp	r3, r1
 800068a:	d82f      	bhi.n	80006ec <__udivmoddi4+0x78>
 800068c:	d02c      	beq.n	80006e8 <__udivmoddi4+0x74>
 800068e:	4641      	mov	r1, r8
 8000690:	4648      	mov	r0, r9
 8000692:	f002 fc71 	bl	8002f78 <__clzdi2>
 8000696:	0029      	movs	r1, r5
 8000698:	0006      	movs	r6, r0
 800069a:	0020      	movs	r0, r4
 800069c:	f002 fc6c 	bl	8002f78 <__clzdi2>
 80006a0:	1a33      	subs	r3, r6, r0
 80006a2:	469c      	mov	ip, r3
 80006a4:	3b20      	subs	r3, #32
 80006a6:	469a      	mov	sl, r3
 80006a8:	d500      	bpl.n	80006ac <__udivmoddi4+0x38>
 80006aa:	e076      	b.n	800079a <__udivmoddi4+0x126>
 80006ac:	464b      	mov	r3, r9
 80006ae:	4652      	mov	r2, sl
 80006b0:	4093      	lsls	r3, r2
 80006b2:	001f      	movs	r7, r3
 80006b4:	464b      	mov	r3, r9
 80006b6:	4662      	mov	r2, ip
 80006b8:	4093      	lsls	r3, r2
 80006ba:	001e      	movs	r6, r3
 80006bc:	42af      	cmp	r7, r5
 80006be:	d828      	bhi.n	8000712 <__udivmoddi4+0x9e>
 80006c0:	d025      	beq.n	800070e <__udivmoddi4+0x9a>
 80006c2:	4653      	mov	r3, sl
 80006c4:	1ba4      	subs	r4, r4, r6
 80006c6:	41bd      	sbcs	r5, r7
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	da00      	bge.n	80006ce <__udivmoddi4+0x5a>
 80006cc:	e07b      	b.n	80007c6 <__udivmoddi4+0x152>
 80006ce:	2200      	movs	r2, #0
 80006d0:	2300      	movs	r3, #0
 80006d2:	9200      	str	r2, [sp, #0]
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	2301      	movs	r3, #1
 80006d8:	4652      	mov	r2, sl
 80006da:	4093      	lsls	r3, r2
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2301      	movs	r3, #1
 80006e0:	4662      	mov	r2, ip
 80006e2:	4093      	lsls	r3, r2
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	e018      	b.n	800071a <__udivmoddi4+0xa6>
 80006e8:	4282      	cmp	r2, r0
 80006ea:	d9d0      	bls.n	800068e <__udivmoddi4+0x1a>
 80006ec:	2200      	movs	r2, #0
 80006ee:	2300      	movs	r3, #0
 80006f0:	9200      	str	r2, [sp, #0]
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <__udivmoddi4+0x8a>
 80006fa:	601c      	str	r4, [r3, #0]
 80006fc:	605d      	str	r5, [r3, #4]
 80006fe:	9800      	ldr	r0, [sp, #0]
 8000700:	9901      	ldr	r1, [sp, #4]
 8000702:	b002      	add	sp, #8
 8000704:	bc1c      	pop	{r2, r3, r4}
 8000706:	4690      	mov	r8, r2
 8000708:	4699      	mov	r9, r3
 800070a:	46a2      	mov	sl, r4
 800070c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800070e:	42a3      	cmp	r3, r4
 8000710:	d9d7      	bls.n	80006c2 <__udivmoddi4+0x4e>
 8000712:	2200      	movs	r2, #0
 8000714:	2300      	movs	r3, #0
 8000716:	9200      	str	r2, [sp, #0]
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	4663      	mov	r3, ip
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0e9      	beq.n	80006f4 <__udivmoddi4+0x80>
 8000720:	07fb      	lsls	r3, r7, #31
 8000722:	4698      	mov	r8, r3
 8000724:	4641      	mov	r1, r8
 8000726:	0872      	lsrs	r2, r6, #1
 8000728:	430a      	orrs	r2, r1
 800072a:	087b      	lsrs	r3, r7, #1
 800072c:	4666      	mov	r6, ip
 800072e:	e00e      	b.n	800074e <__udivmoddi4+0xda>
 8000730:	42ab      	cmp	r3, r5
 8000732:	d101      	bne.n	8000738 <__udivmoddi4+0xc4>
 8000734:	42a2      	cmp	r2, r4
 8000736:	d80c      	bhi.n	8000752 <__udivmoddi4+0xde>
 8000738:	1aa4      	subs	r4, r4, r2
 800073a:	419d      	sbcs	r5, r3
 800073c:	2001      	movs	r0, #1
 800073e:	1924      	adds	r4, r4, r4
 8000740:	416d      	adcs	r5, r5
 8000742:	2100      	movs	r1, #0
 8000744:	3e01      	subs	r6, #1
 8000746:	1824      	adds	r4, r4, r0
 8000748:	414d      	adcs	r5, r1
 800074a:	2e00      	cmp	r6, #0
 800074c:	d006      	beq.n	800075c <__udivmoddi4+0xe8>
 800074e:	42ab      	cmp	r3, r5
 8000750:	d9ee      	bls.n	8000730 <__udivmoddi4+0xbc>
 8000752:	3e01      	subs	r6, #1
 8000754:	1924      	adds	r4, r4, r4
 8000756:	416d      	adcs	r5, r5
 8000758:	2e00      	cmp	r6, #0
 800075a:	d1f8      	bne.n	800074e <__udivmoddi4+0xda>
 800075c:	9800      	ldr	r0, [sp, #0]
 800075e:	9901      	ldr	r1, [sp, #4]
 8000760:	4653      	mov	r3, sl
 8000762:	1900      	adds	r0, r0, r4
 8000764:	4169      	adcs	r1, r5
 8000766:	2b00      	cmp	r3, #0
 8000768:	db23      	blt.n	80007b2 <__udivmoddi4+0x13e>
 800076a:	002b      	movs	r3, r5
 800076c:	4652      	mov	r2, sl
 800076e:	40d3      	lsrs	r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4664      	mov	r4, ip
 8000774:	40e2      	lsrs	r2, r4
 8000776:	001c      	movs	r4, r3
 8000778:	4653      	mov	r3, sl
 800077a:	0015      	movs	r5, r2
 800077c:	2b00      	cmp	r3, #0
 800077e:	db2d      	blt.n	80007dc <__udivmoddi4+0x168>
 8000780:	0026      	movs	r6, r4
 8000782:	4657      	mov	r7, sl
 8000784:	40be      	lsls	r6, r7
 8000786:	0033      	movs	r3, r6
 8000788:	0026      	movs	r6, r4
 800078a:	4667      	mov	r7, ip
 800078c:	40be      	lsls	r6, r7
 800078e:	0032      	movs	r2, r6
 8000790:	1a80      	subs	r0, r0, r2
 8000792:	4199      	sbcs	r1, r3
 8000794:	9000      	str	r0, [sp, #0]
 8000796:	9101      	str	r1, [sp, #4]
 8000798:	e7ac      	b.n	80006f4 <__udivmoddi4+0x80>
 800079a:	4662      	mov	r2, ip
 800079c:	2320      	movs	r3, #32
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	464a      	mov	r2, r9
 80007a2:	40da      	lsrs	r2, r3
 80007a4:	4661      	mov	r1, ip
 80007a6:	0013      	movs	r3, r2
 80007a8:	4642      	mov	r2, r8
 80007aa:	408a      	lsls	r2, r1
 80007ac:	0017      	movs	r7, r2
 80007ae:	431f      	orrs	r7, r3
 80007b0:	e780      	b.n	80006b4 <__udivmoddi4+0x40>
 80007b2:	4662      	mov	r2, ip
 80007b4:	2320      	movs	r3, #32
 80007b6:	1a9b      	subs	r3, r3, r2
 80007b8:	002a      	movs	r2, r5
 80007ba:	4666      	mov	r6, ip
 80007bc:	409a      	lsls	r2, r3
 80007be:	0023      	movs	r3, r4
 80007c0:	40f3      	lsrs	r3, r6
 80007c2:	4313      	orrs	r3, r2
 80007c4:	e7d4      	b.n	8000770 <__udivmoddi4+0xfc>
 80007c6:	4662      	mov	r2, ip
 80007c8:	2320      	movs	r3, #32
 80007ca:	2100      	movs	r1, #0
 80007cc:	1a9b      	subs	r3, r3, r2
 80007ce:	2200      	movs	r2, #0
 80007d0:	9100      	str	r1, [sp, #0]
 80007d2:	9201      	str	r2, [sp, #4]
 80007d4:	2201      	movs	r2, #1
 80007d6:	40da      	lsrs	r2, r3
 80007d8:	9201      	str	r2, [sp, #4]
 80007da:	e780      	b.n	80006de <__udivmoddi4+0x6a>
 80007dc:	2320      	movs	r3, #32
 80007de:	4662      	mov	r2, ip
 80007e0:	0026      	movs	r6, r4
 80007e2:	1a9b      	subs	r3, r3, r2
 80007e4:	40de      	lsrs	r6, r3
 80007e6:	002f      	movs	r7, r5
 80007e8:	46b0      	mov	r8, r6
 80007ea:	4666      	mov	r6, ip
 80007ec:	40b7      	lsls	r7, r6
 80007ee:	4646      	mov	r6, r8
 80007f0:	003b      	movs	r3, r7
 80007f2:	4333      	orrs	r3, r6
 80007f4:	e7c8      	b.n	8000788 <__udivmoddi4+0x114>
 80007f6:	46c0      	nop			; (mov r8, r8)

080007f8 <__aeabi_fdiv>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	4657      	mov	r7, sl
 80007fc:	464e      	mov	r6, r9
 80007fe:	4645      	mov	r5, r8
 8000800:	46de      	mov	lr, fp
 8000802:	0244      	lsls	r4, r0, #9
 8000804:	b5e0      	push	{r5, r6, r7, lr}
 8000806:	0046      	lsls	r6, r0, #1
 8000808:	4688      	mov	r8, r1
 800080a:	0a64      	lsrs	r4, r4, #9
 800080c:	0e36      	lsrs	r6, r6, #24
 800080e:	0fc7      	lsrs	r7, r0, #31
 8000810:	2e00      	cmp	r6, #0
 8000812:	d063      	beq.n	80008dc <__aeabi_fdiv+0xe4>
 8000814:	2eff      	cmp	r6, #255	; 0xff
 8000816:	d024      	beq.n	8000862 <__aeabi_fdiv+0x6a>
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	00e4      	lsls	r4, r4, #3
 800081c:	04db      	lsls	r3, r3, #19
 800081e:	431c      	orrs	r4, r3
 8000820:	2300      	movs	r3, #0
 8000822:	4699      	mov	r9, r3
 8000824:	469b      	mov	fp, r3
 8000826:	3e7f      	subs	r6, #127	; 0x7f
 8000828:	4643      	mov	r3, r8
 800082a:	4642      	mov	r2, r8
 800082c:	025d      	lsls	r5, r3, #9
 800082e:	0fd2      	lsrs	r2, r2, #31
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	0a6d      	lsrs	r5, r5, #9
 8000834:	0e1b      	lsrs	r3, r3, #24
 8000836:	4690      	mov	r8, r2
 8000838:	4692      	mov	sl, r2
 800083a:	d065      	beq.n	8000908 <__aeabi_fdiv+0x110>
 800083c:	2bff      	cmp	r3, #255	; 0xff
 800083e:	d055      	beq.n	80008ec <__aeabi_fdiv+0xf4>
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	2100      	movs	r1, #0
 8000844:	00ed      	lsls	r5, r5, #3
 8000846:	04d2      	lsls	r2, r2, #19
 8000848:	3b7f      	subs	r3, #127	; 0x7f
 800084a:	4315      	orrs	r5, r2
 800084c:	1af6      	subs	r6, r6, r3
 800084e:	4643      	mov	r3, r8
 8000850:	464a      	mov	r2, r9
 8000852:	407b      	eors	r3, r7
 8000854:	2a0f      	cmp	r2, #15
 8000856:	d900      	bls.n	800085a <__aeabi_fdiv+0x62>
 8000858:	e08d      	b.n	8000976 <__aeabi_fdiv+0x17e>
 800085a:	486d      	ldr	r0, [pc, #436]	; (8000a10 <__aeabi_fdiv+0x218>)
 800085c:	0092      	lsls	r2, r2, #2
 800085e:	5882      	ldr	r2, [r0, r2]
 8000860:	4697      	mov	pc, r2
 8000862:	2c00      	cmp	r4, #0
 8000864:	d154      	bne.n	8000910 <__aeabi_fdiv+0x118>
 8000866:	2308      	movs	r3, #8
 8000868:	4699      	mov	r9, r3
 800086a:	3b06      	subs	r3, #6
 800086c:	26ff      	movs	r6, #255	; 0xff
 800086e:	469b      	mov	fp, r3
 8000870:	e7da      	b.n	8000828 <__aeabi_fdiv+0x30>
 8000872:	2500      	movs	r5, #0
 8000874:	4653      	mov	r3, sl
 8000876:	2902      	cmp	r1, #2
 8000878:	d01b      	beq.n	80008b2 <__aeabi_fdiv+0xba>
 800087a:	2903      	cmp	r1, #3
 800087c:	d100      	bne.n	8000880 <__aeabi_fdiv+0x88>
 800087e:	e0bf      	b.n	8000a00 <__aeabi_fdiv+0x208>
 8000880:	2901      	cmp	r1, #1
 8000882:	d028      	beq.n	80008d6 <__aeabi_fdiv+0xde>
 8000884:	0030      	movs	r0, r6
 8000886:	307f      	adds	r0, #127	; 0x7f
 8000888:	2800      	cmp	r0, #0
 800088a:	dd20      	ble.n	80008ce <__aeabi_fdiv+0xd6>
 800088c:	076a      	lsls	r2, r5, #29
 800088e:	d004      	beq.n	800089a <__aeabi_fdiv+0xa2>
 8000890:	220f      	movs	r2, #15
 8000892:	402a      	ands	r2, r5
 8000894:	2a04      	cmp	r2, #4
 8000896:	d000      	beq.n	800089a <__aeabi_fdiv+0xa2>
 8000898:	3504      	adds	r5, #4
 800089a:	012a      	lsls	r2, r5, #4
 800089c:	d503      	bpl.n	80008a6 <__aeabi_fdiv+0xae>
 800089e:	0030      	movs	r0, r6
 80008a0:	4a5c      	ldr	r2, [pc, #368]	; (8000a14 <__aeabi_fdiv+0x21c>)
 80008a2:	3080      	adds	r0, #128	; 0x80
 80008a4:	4015      	ands	r5, r2
 80008a6:	28fe      	cmp	r0, #254	; 0xfe
 80008a8:	dc03      	bgt.n	80008b2 <__aeabi_fdiv+0xba>
 80008aa:	01ac      	lsls	r4, r5, #6
 80008ac:	0a64      	lsrs	r4, r4, #9
 80008ae:	b2c2      	uxtb	r2, r0
 80008b0:	e001      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	2400      	movs	r4, #0
 80008b6:	0264      	lsls	r4, r4, #9
 80008b8:	05d2      	lsls	r2, r2, #23
 80008ba:	0a60      	lsrs	r0, r4, #9
 80008bc:	07db      	lsls	r3, r3, #31
 80008be:	4310      	orrs	r0, r2
 80008c0:	4318      	orrs	r0, r3
 80008c2:	bc3c      	pop	{r2, r3, r4, r5}
 80008c4:	4690      	mov	r8, r2
 80008c6:	4699      	mov	r9, r3
 80008c8:	46a2      	mov	sl, r4
 80008ca:	46ab      	mov	fp, r5
 80008cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ce:	2201      	movs	r2, #1
 80008d0:	1a10      	subs	r0, r2, r0
 80008d2:	281b      	cmp	r0, #27
 80008d4:	dd7c      	ble.n	80009d0 <__aeabi_fdiv+0x1d8>
 80008d6:	2200      	movs	r2, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	e7ec      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d11d      	bne.n	800091c <__aeabi_fdiv+0x124>
 80008e0:	2304      	movs	r3, #4
 80008e2:	4699      	mov	r9, r3
 80008e4:	3b03      	subs	r3, #3
 80008e6:	2600      	movs	r6, #0
 80008e8:	469b      	mov	fp, r3
 80008ea:	e79d      	b.n	8000828 <__aeabi_fdiv+0x30>
 80008ec:	3eff      	subs	r6, #255	; 0xff
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d120      	bne.n	8000934 <__aeabi_fdiv+0x13c>
 80008f2:	2102      	movs	r1, #2
 80008f4:	4643      	mov	r3, r8
 80008f6:	464a      	mov	r2, r9
 80008f8:	407b      	eors	r3, r7
 80008fa:	430a      	orrs	r2, r1
 80008fc:	2a0f      	cmp	r2, #15
 80008fe:	d8d8      	bhi.n	80008b2 <__aeabi_fdiv+0xba>
 8000900:	4845      	ldr	r0, [pc, #276]	; (8000a18 <__aeabi_fdiv+0x220>)
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	5882      	ldr	r2, [r0, r2]
 8000906:	4697      	mov	pc, r2
 8000908:	2d00      	cmp	r5, #0
 800090a:	d119      	bne.n	8000940 <__aeabi_fdiv+0x148>
 800090c:	2101      	movs	r1, #1
 800090e:	e7f1      	b.n	80008f4 <__aeabi_fdiv+0xfc>
 8000910:	230c      	movs	r3, #12
 8000912:	4699      	mov	r9, r3
 8000914:	3b09      	subs	r3, #9
 8000916:	26ff      	movs	r6, #255	; 0xff
 8000918:	469b      	mov	fp, r3
 800091a:	e785      	b.n	8000828 <__aeabi_fdiv+0x30>
 800091c:	0020      	movs	r0, r4
 800091e:	f002 fb0d 	bl	8002f3c <__clzsi2>
 8000922:	2676      	movs	r6, #118	; 0x76
 8000924:	1f43      	subs	r3, r0, #5
 8000926:	409c      	lsls	r4, r3
 8000928:	2300      	movs	r3, #0
 800092a:	4276      	negs	r6, r6
 800092c:	1a36      	subs	r6, r6, r0
 800092e:	4699      	mov	r9, r3
 8000930:	469b      	mov	fp, r3
 8000932:	e779      	b.n	8000828 <__aeabi_fdiv+0x30>
 8000934:	464a      	mov	r2, r9
 8000936:	2303      	movs	r3, #3
 8000938:	431a      	orrs	r2, r3
 800093a:	4691      	mov	r9, r2
 800093c:	2103      	movs	r1, #3
 800093e:	e786      	b.n	800084e <__aeabi_fdiv+0x56>
 8000940:	0028      	movs	r0, r5
 8000942:	f002 fafb 	bl	8002f3c <__clzsi2>
 8000946:	1f43      	subs	r3, r0, #5
 8000948:	1836      	adds	r6, r6, r0
 800094a:	409d      	lsls	r5, r3
 800094c:	3676      	adds	r6, #118	; 0x76
 800094e:	2100      	movs	r1, #0
 8000950:	e77d      	b.n	800084e <__aeabi_fdiv+0x56>
 8000952:	2480      	movs	r4, #128	; 0x80
 8000954:	2300      	movs	r3, #0
 8000956:	03e4      	lsls	r4, r4, #15
 8000958:	22ff      	movs	r2, #255	; 0xff
 800095a:	e7ac      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 800095c:	2500      	movs	r5, #0
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	03db      	lsls	r3, r3, #15
 8000962:	421c      	tst	r4, r3
 8000964:	d028      	beq.n	80009b8 <__aeabi_fdiv+0x1c0>
 8000966:	421d      	tst	r5, r3
 8000968:	d126      	bne.n	80009b8 <__aeabi_fdiv+0x1c0>
 800096a:	432b      	orrs	r3, r5
 800096c:	025c      	lsls	r4, r3, #9
 800096e:	0a64      	lsrs	r4, r4, #9
 8000970:	4643      	mov	r3, r8
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	e79f      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 8000976:	0162      	lsls	r2, r4, #5
 8000978:	016c      	lsls	r4, r5, #5
 800097a:	42a2      	cmp	r2, r4
 800097c:	d224      	bcs.n	80009c8 <__aeabi_fdiv+0x1d0>
 800097e:	211b      	movs	r1, #27
 8000980:	2500      	movs	r5, #0
 8000982:	3e01      	subs	r6, #1
 8000984:	2701      	movs	r7, #1
 8000986:	0010      	movs	r0, r2
 8000988:	006d      	lsls	r5, r5, #1
 800098a:	0052      	lsls	r2, r2, #1
 800098c:	2800      	cmp	r0, #0
 800098e:	db01      	blt.n	8000994 <__aeabi_fdiv+0x19c>
 8000990:	4294      	cmp	r4, r2
 8000992:	d801      	bhi.n	8000998 <__aeabi_fdiv+0x1a0>
 8000994:	1b12      	subs	r2, r2, r4
 8000996:	433d      	orrs	r5, r7
 8000998:	3901      	subs	r1, #1
 800099a:	2900      	cmp	r1, #0
 800099c:	d1f3      	bne.n	8000986 <__aeabi_fdiv+0x18e>
 800099e:	0014      	movs	r4, r2
 80009a0:	1e62      	subs	r2, r4, #1
 80009a2:	4194      	sbcs	r4, r2
 80009a4:	4325      	orrs	r5, r4
 80009a6:	e76d      	b.n	8000884 <__aeabi_fdiv+0x8c>
 80009a8:	46ba      	mov	sl, r7
 80009aa:	4659      	mov	r1, fp
 80009ac:	0025      	movs	r5, r4
 80009ae:	4653      	mov	r3, sl
 80009b0:	2902      	cmp	r1, #2
 80009b2:	d000      	beq.n	80009b6 <__aeabi_fdiv+0x1be>
 80009b4:	e761      	b.n	800087a <__aeabi_fdiv+0x82>
 80009b6:	e77c      	b.n	80008b2 <__aeabi_fdiv+0xba>
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	03db      	lsls	r3, r3, #15
 80009bc:	431c      	orrs	r4, r3
 80009be:	0264      	lsls	r4, r4, #9
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	003b      	movs	r3, r7
 80009c4:	22ff      	movs	r2, #255	; 0xff
 80009c6:	e776      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80009c8:	1b12      	subs	r2, r2, r4
 80009ca:	211a      	movs	r1, #26
 80009cc:	2501      	movs	r5, #1
 80009ce:	e7d9      	b.n	8000984 <__aeabi_fdiv+0x18c>
 80009d0:	369e      	adds	r6, #158	; 0x9e
 80009d2:	002a      	movs	r2, r5
 80009d4:	40b5      	lsls	r5, r6
 80009d6:	002c      	movs	r4, r5
 80009d8:	40c2      	lsrs	r2, r0
 80009da:	1e65      	subs	r5, r4, #1
 80009dc:	41ac      	sbcs	r4, r5
 80009de:	4314      	orrs	r4, r2
 80009e0:	0762      	lsls	r2, r4, #29
 80009e2:	d004      	beq.n	80009ee <__aeabi_fdiv+0x1f6>
 80009e4:	220f      	movs	r2, #15
 80009e6:	4022      	ands	r2, r4
 80009e8:	2a04      	cmp	r2, #4
 80009ea:	d000      	beq.n	80009ee <__aeabi_fdiv+0x1f6>
 80009ec:	3404      	adds	r4, #4
 80009ee:	0162      	lsls	r2, r4, #5
 80009f0:	d403      	bmi.n	80009fa <__aeabi_fdiv+0x202>
 80009f2:	01a4      	lsls	r4, r4, #6
 80009f4:	0a64      	lsrs	r4, r4, #9
 80009f6:	2200      	movs	r2, #0
 80009f8:	e75d      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80009fa:	2201      	movs	r2, #1
 80009fc:	2400      	movs	r4, #0
 80009fe:	e75a      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 8000a00:	2480      	movs	r4, #128	; 0x80
 8000a02:	03e4      	lsls	r4, r4, #15
 8000a04:	432c      	orrs	r4, r5
 8000a06:	0264      	lsls	r4, r4, #9
 8000a08:	0a64      	lsrs	r4, r4, #9
 8000a0a:	22ff      	movs	r2, #255	; 0xff
 8000a0c:	e753      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	08018fa4 	.word	0x08018fa4
 8000a14:	f7ffffff 	.word	0xf7ffffff
 8000a18:	08018fe4 	.word	0x08018fe4

08000a1c <__eqsf2>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	0042      	lsls	r2, r0, #1
 8000a20:	024e      	lsls	r6, r1, #9
 8000a22:	004c      	lsls	r4, r1, #1
 8000a24:	0245      	lsls	r5, r0, #9
 8000a26:	0a6d      	lsrs	r5, r5, #9
 8000a28:	0e12      	lsrs	r2, r2, #24
 8000a2a:	0fc3      	lsrs	r3, r0, #31
 8000a2c:	0a76      	lsrs	r6, r6, #9
 8000a2e:	0e24      	lsrs	r4, r4, #24
 8000a30:	0fc9      	lsrs	r1, r1, #31
 8000a32:	2aff      	cmp	r2, #255	; 0xff
 8000a34:	d00f      	beq.n	8000a56 <__eqsf2+0x3a>
 8000a36:	2cff      	cmp	r4, #255	; 0xff
 8000a38:	d011      	beq.n	8000a5e <__eqsf2+0x42>
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	42a2      	cmp	r2, r4
 8000a3e:	d000      	beq.n	8000a42 <__eqsf2+0x26>
 8000a40:	bd70      	pop	{r4, r5, r6, pc}
 8000a42:	42b5      	cmp	r5, r6
 8000a44:	d1fc      	bne.n	8000a40 <__eqsf2+0x24>
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d00d      	beq.n	8000a66 <__eqsf2+0x4a>
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	d1f8      	bne.n	8000a40 <__eqsf2+0x24>
 8000a4e:	0028      	movs	r0, r5
 8000a50:	1e45      	subs	r5, r0, #1
 8000a52:	41a8      	sbcs	r0, r5
 8000a54:	e7f4      	b.n	8000a40 <__eqsf2+0x24>
 8000a56:	2001      	movs	r0, #1
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d1f1      	bne.n	8000a40 <__eqsf2+0x24>
 8000a5c:	e7eb      	b.n	8000a36 <__eqsf2+0x1a>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2e00      	cmp	r6, #0
 8000a62:	d1ed      	bne.n	8000a40 <__eqsf2+0x24>
 8000a64:	e7e9      	b.n	8000a3a <__eqsf2+0x1e>
 8000a66:	2000      	movs	r0, #0
 8000a68:	e7ea      	b.n	8000a40 <__eqsf2+0x24>
 8000a6a:	46c0      	nop			; (mov r8, r8)

08000a6c <__gesf2>:
 8000a6c:	b570      	push	{r4, r5, r6, lr}
 8000a6e:	004a      	lsls	r2, r1, #1
 8000a70:	024e      	lsls	r6, r1, #9
 8000a72:	0245      	lsls	r5, r0, #9
 8000a74:	0044      	lsls	r4, r0, #1
 8000a76:	0a6d      	lsrs	r5, r5, #9
 8000a78:	0e24      	lsrs	r4, r4, #24
 8000a7a:	0fc3      	lsrs	r3, r0, #31
 8000a7c:	0a76      	lsrs	r6, r6, #9
 8000a7e:	0e12      	lsrs	r2, r2, #24
 8000a80:	0fc9      	lsrs	r1, r1, #31
 8000a82:	2cff      	cmp	r4, #255	; 0xff
 8000a84:	d015      	beq.n	8000ab2 <__gesf2+0x46>
 8000a86:	2aff      	cmp	r2, #255	; 0xff
 8000a88:	d00e      	beq.n	8000aa8 <__gesf2+0x3c>
 8000a8a:	2c00      	cmp	r4, #0
 8000a8c:	d115      	bne.n	8000aba <__gesf2+0x4e>
 8000a8e:	2a00      	cmp	r2, #0
 8000a90:	d101      	bne.n	8000a96 <__gesf2+0x2a>
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d01c      	beq.n	8000ad0 <__gesf2+0x64>
 8000a96:	2d00      	cmp	r5, #0
 8000a98:	d014      	beq.n	8000ac4 <__gesf2+0x58>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d027      	beq.n	8000aee <__gesf2+0x82>
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	4018      	ands	r0, r3
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d0ee      	beq.n	8000a8a <__gesf2+0x1e>
 8000aac:	2002      	movs	r0, #2
 8000aae:	4240      	negs	r0, r0
 8000ab0:	e7f9      	b.n	8000aa6 <__gesf2+0x3a>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d1fa      	bne.n	8000aac <__gesf2+0x40>
 8000ab6:	2aff      	cmp	r2, #255	; 0xff
 8000ab8:	d00e      	beq.n	8000ad8 <__gesf2+0x6c>
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d10e      	bne.n	8000adc <__gesf2+0x70>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0ed      	beq.n	8000a9e <__gesf2+0x32>
 8000ac2:	e00b      	b.n	8000adc <__gesf2+0x70>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	3901      	subs	r1, #1
 8000ac8:	4399      	bics	r1, r3
 8000aca:	0008      	movs	r0, r1
 8000acc:	3001      	adds	r0, #1
 8000ace:	e7ea      	b.n	8000aa6 <__gesf2+0x3a>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d0e7      	beq.n	8000aa6 <__gesf2+0x3a>
 8000ad6:	e7e2      	b.n	8000a9e <__gesf2+0x32>
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d1e7      	bne.n	8000aac <__gesf2+0x40>
 8000adc:	428b      	cmp	r3, r1
 8000ade:	d1de      	bne.n	8000a9e <__gesf2+0x32>
 8000ae0:	4294      	cmp	r4, r2
 8000ae2:	dd05      	ble.n	8000af0 <__gesf2+0x84>
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	1e58      	subs	r0, r3, #1
 8000ae8:	4008      	ands	r0, r1
 8000aea:	3801      	subs	r0, #1
 8000aec:	e7db      	b.n	8000aa6 <__gesf2+0x3a>
 8000aee:	2400      	movs	r4, #0
 8000af0:	42a2      	cmp	r2, r4
 8000af2:	dc04      	bgt.n	8000afe <__gesf2+0x92>
 8000af4:	42b5      	cmp	r5, r6
 8000af6:	d8d2      	bhi.n	8000a9e <__gesf2+0x32>
 8000af8:	2000      	movs	r0, #0
 8000afa:	42b5      	cmp	r5, r6
 8000afc:	d2d3      	bcs.n	8000aa6 <__gesf2+0x3a>
 8000afe:	1e58      	subs	r0, r3, #1
 8000b00:	2301      	movs	r3, #1
 8000b02:	4398      	bics	r0, r3
 8000b04:	3001      	adds	r0, #1
 8000b06:	e7ce      	b.n	8000aa6 <__gesf2+0x3a>

08000b08 <__lesf2>:
 8000b08:	b530      	push	{r4, r5, lr}
 8000b0a:	0042      	lsls	r2, r0, #1
 8000b0c:	0244      	lsls	r4, r0, #9
 8000b0e:	024d      	lsls	r5, r1, #9
 8000b10:	0fc3      	lsrs	r3, r0, #31
 8000b12:	0048      	lsls	r0, r1, #1
 8000b14:	0a64      	lsrs	r4, r4, #9
 8000b16:	0e12      	lsrs	r2, r2, #24
 8000b18:	0a6d      	lsrs	r5, r5, #9
 8000b1a:	0e00      	lsrs	r0, r0, #24
 8000b1c:	0fc9      	lsrs	r1, r1, #31
 8000b1e:	2aff      	cmp	r2, #255	; 0xff
 8000b20:	d012      	beq.n	8000b48 <__lesf2+0x40>
 8000b22:	28ff      	cmp	r0, #255	; 0xff
 8000b24:	d00c      	beq.n	8000b40 <__lesf2+0x38>
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d112      	bne.n	8000b50 <__lesf2+0x48>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d119      	bne.n	8000b62 <__lesf2+0x5a>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d117      	bne.n	8000b62 <__lesf2+0x5a>
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d02b      	beq.n	8000b8e <__lesf2+0x86>
 8000b36:	2002      	movs	r0, #2
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4018      	ands	r0, r3
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	e026      	b.n	8000b8e <__lesf2+0x86>
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d0f0      	beq.n	8000b26 <__lesf2+0x1e>
 8000b44:	2002      	movs	r0, #2
 8000b46:	e022      	b.n	8000b8e <__lesf2+0x86>
 8000b48:	2c00      	cmp	r4, #0
 8000b4a:	d1fb      	bne.n	8000b44 <__lesf2+0x3c>
 8000b4c:	28ff      	cmp	r0, #255	; 0xff
 8000b4e:	d01f      	beq.n	8000b90 <__lesf2+0x88>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d11f      	bne.n	8000b94 <__lesf2+0x8c>
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d11d      	bne.n	8000b94 <__lesf2+0x8c>
 8000b58:	2002      	movs	r0, #2
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	4018      	ands	r0, r3
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e015      	b.n	8000b8e <__lesf2+0x86>
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d00e      	beq.n	8000b84 <__lesf2+0x7c>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d1e5      	bne.n	8000b36 <__lesf2+0x2e>
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4290      	cmp	r0, r2
 8000b6e:	dc04      	bgt.n	8000b7a <__lesf2+0x72>
 8000b70:	42ac      	cmp	r4, r5
 8000b72:	d8e0      	bhi.n	8000b36 <__lesf2+0x2e>
 8000b74:	2000      	movs	r0, #0
 8000b76:	42ac      	cmp	r4, r5
 8000b78:	d209      	bcs.n	8000b8e <__lesf2+0x86>
 8000b7a:	1e58      	subs	r0, r3, #1
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	4398      	bics	r0, r3
 8000b80:	3001      	adds	r0, #1
 8000b82:	e004      	b.n	8000b8e <__lesf2+0x86>
 8000b84:	2301      	movs	r3, #1
 8000b86:	3901      	subs	r1, #1
 8000b88:	4399      	bics	r1, r3
 8000b8a:	0008      	movs	r0, r1
 8000b8c:	3001      	adds	r0, #1
 8000b8e:	bd30      	pop	{r4, r5, pc}
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d1d7      	bne.n	8000b44 <__lesf2+0x3c>
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d1ce      	bne.n	8000b36 <__lesf2+0x2e>
 8000b98:	4282      	cmp	r2, r0
 8000b9a:	dde7      	ble.n	8000b6c <__lesf2+0x64>
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	1e58      	subs	r0, r3, #1
 8000ba0:	4008      	ands	r0, r1
 8000ba2:	3801      	subs	r0, #1
 8000ba4:	e7f3      	b.n	8000b8e <__lesf2+0x86>
 8000ba6:	46c0      	nop			; (mov r8, r8)

08000ba8 <__aeabi_fmul>:
 8000ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000baa:	464e      	mov	r6, r9
 8000bac:	4657      	mov	r7, sl
 8000bae:	4645      	mov	r5, r8
 8000bb0:	46de      	mov	lr, fp
 8000bb2:	b5e0      	push	{r5, r6, r7, lr}
 8000bb4:	0243      	lsls	r3, r0, #9
 8000bb6:	0a5b      	lsrs	r3, r3, #9
 8000bb8:	0045      	lsls	r5, r0, #1
 8000bba:	b083      	sub	sp, #12
 8000bbc:	1c0f      	adds	r7, r1, #0
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	0e2d      	lsrs	r5, r5, #24
 8000bc2:	0fc6      	lsrs	r6, r0, #31
 8000bc4:	2d00      	cmp	r5, #0
 8000bc6:	d057      	beq.n	8000c78 <__aeabi_fmul+0xd0>
 8000bc8:	2dff      	cmp	r5, #255	; 0xff
 8000bca:	d024      	beq.n	8000c16 <__aeabi_fmul+0x6e>
 8000bcc:	2080      	movs	r0, #128	; 0x80
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	04c0      	lsls	r0, r0, #19
 8000bd2:	4318      	orrs	r0, r3
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	4681      	mov	r9, r0
 8000bd8:	469a      	mov	sl, r3
 8000bda:	469b      	mov	fp, r3
 8000bdc:	3d7f      	subs	r5, #127	; 0x7f
 8000bde:	027c      	lsls	r4, r7, #9
 8000be0:	007a      	lsls	r2, r7, #1
 8000be2:	0ffb      	lsrs	r3, r7, #31
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e12      	lsrs	r2, r2, #24
 8000be8:	4698      	mov	r8, r3
 8000bea:	d023      	beq.n	8000c34 <__aeabi_fmul+0x8c>
 8000bec:	2aff      	cmp	r2, #255	; 0xff
 8000bee:	d04b      	beq.n	8000c88 <__aeabi_fmul+0xe0>
 8000bf0:	00e3      	lsls	r3, r4, #3
 8000bf2:	2480      	movs	r4, #128	; 0x80
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	04e4      	lsls	r4, r4, #19
 8000bf8:	3a7f      	subs	r2, #127	; 0x7f
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	18ad      	adds	r5, r5, r2
 8000bfe:	1c6b      	adds	r3, r5, #1
 8000c00:	4647      	mov	r7, r8
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	4653      	mov	r3, sl
 8000c06:	4077      	eors	r7, r6
 8000c08:	003a      	movs	r2, r7
 8000c0a:	2b0f      	cmp	r3, #15
 8000c0c:	d848      	bhi.n	8000ca0 <__aeabi_fmul+0xf8>
 8000c0e:	497d      	ldr	r1, [pc, #500]	; (8000e04 <__aeabi_fmul+0x25c>)
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	58cb      	ldr	r3, [r1, r3]
 8000c14:	469f      	mov	pc, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_fmul+0x74>
 8000c1a:	e085      	b.n	8000d28 <__aeabi_fmul+0x180>
 8000c1c:	3308      	adds	r3, #8
 8000c1e:	469a      	mov	sl, r3
 8000c20:	3b06      	subs	r3, #6
 8000c22:	469b      	mov	fp, r3
 8000c24:	027c      	lsls	r4, r7, #9
 8000c26:	007a      	lsls	r2, r7, #1
 8000c28:	0ffb      	lsrs	r3, r7, #31
 8000c2a:	25ff      	movs	r5, #255	; 0xff
 8000c2c:	0a64      	lsrs	r4, r4, #9
 8000c2e:	0e12      	lsrs	r2, r2, #24
 8000c30:	4698      	mov	r8, r3
 8000c32:	d1db      	bne.n	8000bec <__aeabi_fmul+0x44>
 8000c34:	2c00      	cmp	r4, #0
 8000c36:	d000      	beq.n	8000c3a <__aeabi_fmul+0x92>
 8000c38:	e090      	b.n	8000d5c <__aeabi_fmul+0x1b4>
 8000c3a:	4652      	mov	r2, sl
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	4692      	mov	sl, r2
 8000c42:	2001      	movs	r0, #1
 8000c44:	e7db      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000c46:	464c      	mov	r4, r9
 8000c48:	4658      	mov	r0, fp
 8000c4a:	0017      	movs	r7, r2
 8000c4c:	2802      	cmp	r0, #2
 8000c4e:	d024      	beq.n	8000c9a <__aeabi_fmul+0xf2>
 8000c50:	2803      	cmp	r0, #3
 8000c52:	d100      	bne.n	8000c56 <__aeabi_fmul+0xae>
 8000c54:	e0cf      	b.n	8000df6 <__aeabi_fmul+0x24e>
 8000c56:	2200      	movs	r2, #0
 8000c58:	2300      	movs	r3, #0
 8000c5a:	2801      	cmp	r0, #1
 8000c5c:	d14d      	bne.n	8000cfa <__aeabi_fmul+0x152>
 8000c5e:	0258      	lsls	r0, r3, #9
 8000c60:	05d2      	lsls	r2, r2, #23
 8000c62:	0a40      	lsrs	r0, r0, #9
 8000c64:	07ff      	lsls	r7, r7, #31
 8000c66:	4310      	orrs	r0, r2
 8000c68:	4338      	orrs	r0, r7
 8000c6a:	b003      	add	sp, #12
 8000c6c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c6e:	4690      	mov	r8, r2
 8000c70:	4699      	mov	r9, r3
 8000c72:	46a2      	mov	sl, r4
 8000c74:	46ab      	mov	fp, r5
 8000c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d15b      	bne.n	8000d34 <__aeabi_fmul+0x18c>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	469a      	mov	sl, r3
 8000c80:	3b03      	subs	r3, #3
 8000c82:	2500      	movs	r5, #0
 8000c84:	469b      	mov	fp, r3
 8000c86:	e7aa      	b.n	8000bde <__aeabi_fmul+0x36>
 8000c88:	35ff      	adds	r5, #255	; 0xff
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d160      	bne.n	8000d50 <__aeabi_fmul+0x1a8>
 8000c8e:	4652      	mov	r2, sl
 8000c90:	2302      	movs	r3, #2
 8000c92:	431a      	orrs	r2, r3
 8000c94:	4692      	mov	sl, r2
 8000c96:	2002      	movs	r0, #2
 8000c98:	e7b1      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000c9a:	22ff      	movs	r2, #255	; 0xff
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e7de      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	0c1b      	lsrs	r3, r3, #16
 8000ca4:	469c      	mov	ip, r3
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	0426      	lsls	r6, r4, #16
 8000caa:	0c36      	lsrs	r6, r6, #16
 8000cac:	0418      	lsls	r0, r3, #16
 8000cae:	4661      	mov	r1, ip
 8000cb0:	0033      	movs	r3, r6
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	4664      	mov	r4, ip
 8000cb6:	0c00      	lsrs	r0, r0, #16
 8000cb8:	4343      	muls	r3, r0
 8000cba:	434e      	muls	r6, r1
 8000cbc:	4350      	muls	r0, r2
 8000cbe:	4354      	muls	r4, r2
 8000cc0:	1980      	adds	r0, r0, r6
 8000cc2:	0c1a      	lsrs	r2, r3, #16
 8000cc4:	1812      	adds	r2, r2, r0
 8000cc6:	4296      	cmp	r6, r2
 8000cc8:	d903      	bls.n	8000cd2 <__aeabi_fmul+0x12a>
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	0249      	lsls	r1, r1, #9
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4464      	add	r4, ip
 8000cd2:	041b      	lsls	r3, r3, #16
 8000cd4:	0c1b      	lsrs	r3, r3, #16
 8000cd6:	0410      	lsls	r0, r2, #16
 8000cd8:	18c0      	adds	r0, r0, r3
 8000cda:	0183      	lsls	r3, r0, #6
 8000cdc:	1e5e      	subs	r6, r3, #1
 8000cde:	41b3      	sbcs	r3, r6
 8000ce0:	0e80      	lsrs	r0, r0, #26
 8000ce2:	4318      	orrs	r0, r3
 8000ce4:	0c13      	lsrs	r3, r2, #16
 8000ce6:	191b      	adds	r3, r3, r4
 8000ce8:	019b      	lsls	r3, r3, #6
 8000cea:	4303      	orrs	r3, r0
 8000cec:	001c      	movs	r4, r3
 8000cee:	0123      	lsls	r3, r4, #4
 8000cf0:	d579      	bpl.n	8000de6 <__aeabi_fmul+0x23e>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	0862      	lsrs	r2, r4, #1
 8000cf6:	401c      	ands	r4, r3
 8000cf8:	4314      	orrs	r4, r2
 8000cfa:	9a01      	ldr	r2, [sp, #4]
 8000cfc:	327f      	adds	r2, #127	; 0x7f
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	dd4d      	ble.n	8000d9e <__aeabi_fmul+0x1f6>
 8000d02:	0763      	lsls	r3, r4, #29
 8000d04:	d004      	beq.n	8000d10 <__aeabi_fmul+0x168>
 8000d06:	230f      	movs	r3, #15
 8000d08:	4023      	ands	r3, r4
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_fmul+0x168>
 8000d0e:	3404      	adds	r4, #4
 8000d10:	0123      	lsls	r3, r4, #4
 8000d12:	d503      	bpl.n	8000d1c <__aeabi_fmul+0x174>
 8000d14:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <__aeabi_fmul+0x260>)
 8000d16:	9a01      	ldr	r2, [sp, #4]
 8000d18:	401c      	ands	r4, r3
 8000d1a:	3280      	adds	r2, #128	; 0x80
 8000d1c:	2afe      	cmp	r2, #254	; 0xfe
 8000d1e:	dcbc      	bgt.n	8000c9a <__aeabi_fmul+0xf2>
 8000d20:	01a3      	lsls	r3, r4, #6
 8000d22:	0a5b      	lsrs	r3, r3, #9
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	e79a      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000d28:	230c      	movs	r3, #12
 8000d2a:	469a      	mov	sl, r3
 8000d2c:	3b09      	subs	r3, #9
 8000d2e:	25ff      	movs	r5, #255	; 0xff
 8000d30:	469b      	mov	fp, r3
 8000d32:	e754      	b.n	8000bde <__aeabi_fmul+0x36>
 8000d34:	0018      	movs	r0, r3
 8000d36:	f002 f901 	bl	8002f3c <__clzsi2>
 8000d3a:	464a      	mov	r2, r9
 8000d3c:	1f43      	subs	r3, r0, #5
 8000d3e:	2576      	movs	r5, #118	; 0x76
 8000d40:	409a      	lsls	r2, r3
 8000d42:	2300      	movs	r3, #0
 8000d44:	426d      	negs	r5, r5
 8000d46:	4691      	mov	r9, r2
 8000d48:	1a2d      	subs	r5, r5, r0
 8000d4a:	469a      	mov	sl, r3
 8000d4c:	469b      	mov	fp, r3
 8000d4e:	e746      	b.n	8000bde <__aeabi_fmul+0x36>
 8000d50:	4652      	mov	r2, sl
 8000d52:	2303      	movs	r3, #3
 8000d54:	431a      	orrs	r2, r3
 8000d56:	4692      	mov	sl, r2
 8000d58:	2003      	movs	r0, #3
 8000d5a:	e750      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000d5c:	0020      	movs	r0, r4
 8000d5e:	f002 f8ed 	bl	8002f3c <__clzsi2>
 8000d62:	1f43      	subs	r3, r0, #5
 8000d64:	1a2d      	subs	r5, r5, r0
 8000d66:	409c      	lsls	r4, r3
 8000d68:	3d76      	subs	r5, #118	; 0x76
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	e747      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	2700      	movs	r7, #0
 8000d72:	03db      	lsls	r3, r3, #15
 8000d74:	22ff      	movs	r2, #255	; 0xff
 8000d76:	e772      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000d78:	4642      	mov	r2, r8
 8000d7a:	e766      	b.n	8000c4a <__aeabi_fmul+0xa2>
 8000d7c:	464c      	mov	r4, r9
 8000d7e:	0032      	movs	r2, r6
 8000d80:	4658      	mov	r0, fp
 8000d82:	e762      	b.n	8000c4a <__aeabi_fmul+0xa2>
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	464a      	mov	r2, r9
 8000d88:	03db      	lsls	r3, r3, #15
 8000d8a:	421a      	tst	r2, r3
 8000d8c:	d022      	beq.n	8000dd4 <__aeabi_fmul+0x22c>
 8000d8e:	421c      	tst	r4, r3
 8000d90:	d120      	bne.n	8000dd4 <__aeabi_fmul+0x22c>
 8000d92:	4323      	orrs	r3, r4
 8000d94:	025b      	lsls	r3, r3, #9
 8000d96:	0a5b      	lsrs	r3, r3, #9
 8000d98:	4647      	mov	r7, r8
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	e75f      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	1a9a      	subs	r2, r3, r2
 8000da2:	2a1b      	cmp	r2, #27
 8000da4:	dc21      	bgt.n	8000dea <__aeabi_fmul+0x242>
 8000da6:	0023      	movs	r3, r4
 8000da8:	9901      	ldr	r1, [sp, #4]
 8000daa:	40d3      	lsrs	r3, r2
 8000dac:	319e      	adds	r1, #158	; 0x9e
 8000dae:	408c      	lsls	r4, r1
 8000db0:	001a      	movs	r2, r3
 8000db2:	0023      	movs	r3, r4
 8000db4:	1e5c      	subs	r4, r3, #1
 8000db6:	41a3      	sbcs	r3, r4
 8000db8:	4313      	orrs	r3, r2
 8000dba:	075a      	lsls	r2, r3, #29
 8000dbc:	d004      	beq.n	8000dc8 <__aeabi_fmul+0x220>
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	2a04      	cmp	r2, #4
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_fmul+0x220>
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	015a      	lsls	r2, r3, #5
 8000dca:	d411      	bmi.n	8000df0 <__aeabi_fmul+0x248>
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	0a5b      	lsrs	r3, r3, #9
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e744      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	464a      	mov	r2, r9
 8000dd8:	03db      	lsls	r3, r3, #15
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	025b      	lsls	r3, r3, #9
 8000dde:	0a5b      	lsrs	r3, r3, #9
 8000de0:	0037      	movs	r7, r6
 8000de2:	22ff      	movs	r2, #255	; 0xff
 8000de4:	e73b      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000de6:	9501      	str	r5, [sp, #4]
 8000de8:	e787      	b.n	8000cfa <__aeabi_fmul+0x152>
 8000dea:	2200      	movs	r2, #0
 8000dec:	2300      	movs	r3, #0
 8000dee:	e736      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000df0:	2201      	movs	r2, #1
 8000df2:	2300      	movs	r3, #0
 8000df4:	e733      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	03db      	lsls	r3, r3, #15
 8000dfa:	4323      	orrs	r3, r4
 8000dfc:	025b      	lsls	r3, r3, #9
 8000dfe:	0a5b      	lsrs	r3, r3, #9
 8000e00:	22ff      	movs	r2, #255	; 0xff
 8000e02:	e72c      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000e04:	08019024 	.word	0x08019024
 8000e08:	f7ffffff 	.word	0xf7ffffff

08000e0c <__aeabi_fsub>:
 8000e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0e:	4647      	mov	r7, r8
 8000e10:	46ce      	mov	lr, r9
 8000e12:	0044      	lsls	r4, r0, #1
 8000e14:	0fc2      	lsrs	r2, r0, #31
 8000e16:	b580      	push	{r7, lr}
 8000e18:	0247      	lsls	r7, r0, #9
 8000e1a:	0248      	lsls	r0, r1, #9
 8000e1c:	0a40      	lsrs	r0, r0, #9
 8000e1e:	4684      	mov	ip, r0
 8000e20:	4666      	mov	r6, ip
 8000e22:	0048      	lsls	r0, r1, #1
 8000e24:	0a7f      	lsrs	r7, r7, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	00f6      	lsls	r6, r6, #3
 8000e2a:	0025      	movs	r5, r4
 8000e2c:	4690      	mov	r8, r2
 8000e2e:	00fb      	lsls	r3, r7, #3
 8000e30:	0e00      	lsrs	r0, r0, #24
 8000e32:	0fc9      	lsrs	r1, r1, #31
 8000e34:	46b1      	mov	r9, r6
 8000e36:	28ff      	cmp	r0, #255	; 0xff
 8000e38:	d100      	bne.n	8000e3c <__aeabi_fsub+0x30>
 8000e3a:	e085      	b.n	8000f48 <__aeabi_fsub+0x13c>
 8000e3c:	2601      	movs	r6, #1
 8000e3e:	4071      	eors	r1, r6
 8000e40:	1a26      	subs	r6, r4, r0
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d057      	beq.n	8000ef6 <__aeabi_fsub+0xea>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	dd43      	ble.n	8000ed2 <__aeabi_fsub+0xc6>
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_fsub+0x44>
 8000e4e:	e07f      	b.n	8000f50 <__aeabi_fsub+0x144>
 8000e50:	4649      	mov	r1, r9
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d100      	bne.n	8000e58 <__aeabi_fsub+0x4c>
 8000e56:	e0aa      	b.n	8000fae <__aeabi_fsub+0x1a2>
 8000e58:	3e01      	subs	r6, #1
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_fsub+0x54>
 8000e5e:	e0f7      	b.n	8001050 <__aeabi_fsub+0x244>
 8000e60:	1a5b      	subs	r3, r3, r1
 8000e62:	015a      	lsls	r2, r3, #5
 8000e64:	d400      	bmi.n	8000e68 <__aeabi_fsub+0x5c>
 8000e66:	e08b      	b.n	8000f80 <__aeabi_fsub+0x174>
 8000e68:	019b      	lsls	r3, r3, #6
 8000e6a:	099c      	lsrs	r4, r3, #6
 8000e6c:	0020      	movs	r0, r4
 8000e6e:	f002 f865 	bl	8002f3c <__clzsi2>
 8000e72:	3805      	subs	r0, #5
 8000e74:	4084      	lsls	r4, r0
 8000e76:	4285      	cmp	r5, r0
 8000e78:	dd00      	ble.n	8000e7c <__aeabi_fsub+0x70>
 8000e7a:	e0d3      	b.n	8001024 <__aeabi_fsub+0x218>
 8000e7c:	1b45      	subs	r5, r0, r5
 8000e7e:	0023      	movs	r3, r4
 8000e80:	2020      	movs	r0, #32
 8000e82:	3501      	adds	r5, #1
 8000e84:	40eb      	lsrs	r3, r5
 8000e86:	1b45      	subs	r5, r0, r5
 8000e88:	40ac      	lsls	r4, r5
 8000e8a:	1e62      	subs	r2, r4, #1
 8000e8c:	4194      	sbcs	r4, r2
 8000e8e:	4323      	orrs	r3, r4
 8000e90:	2407      	movs	r4, #7
 8000e92:	2500      	movs	r5, #0
 8000e94:	401c      	ands	r4, r3
 8000e96:	2201      	movs	r2, #1
 8000e98:	4641      	mov	r1, r8
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	2c00      	cmp	r4, #0
 8000e9e:	d004      	beq.n	8000eaa <__aeabi_fsub+0x9e>
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	4019      	ands	r1, r3
 8000ea4:	2904      	cmp	r1, #4
 8000ea6:	d000      	beq.n	8000eaa <__aeabi_fsub+0x9e>
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	0159      	lsls	r1, r3, #5
 8000eac:	d400      	bmi.n	8000eb0 <__aeabi_fsub+0xa4>
 8000eae:	e080      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8000eb0:	3501      	adds	r5, #1
 8000eb2:	b2ec      	uxtb	r4, r5
 8000eb4:	2dff      	cmp	r5, #255	; 0xff
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fsub+0xae>
 8000eb8:	e0a3      	b.n	8001002 <__aeabi_fsub+0x1f6>
 8000eba:	24ff      	movs	r4, #255	; 0xff
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	025b      	lsls	r3, r3, #9
 8000ec0:	05e4      	lsls	r4, r4, #23
 8000ec2:	0a58      	lsrs	r0, r3, #9
 8000ec4:	07d2      	lsls	r2, r2, #31
 8000ec6:	4320      	orrs	r0, r4
 8000ec8:	4310      	orrs	r0, r2
 8000eca:	bc0c      	pop	{r2, r3}
 8000ecc:	4690      	mov	r8, r2
 8000ece:	4699      	mov	r9, r3
 8000ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d174      	bne.n	8000fc0 <__aeabi_fsub+0x1b4>
 8000ed6:	1c60      	adds	r0, r4, #1
 8000ed8:	b2c0      	uxtb	r0, r0
 8000eda:	2801      	cmp	r0, #1
 8000edc:	dc00      	bgt.n	8000ee0 <__aeabi_fsub+0xd4>
 8000ede:	e0a7      	b.n	8001030 <__aeabi_fsub+0x224>
 8000ee0:	464a      	mov	r2, r9
 8000ee2:	1a9c      	subs	r4, r3, r2
 8000ee4:	0162      	lsls	r2, r4, #5
 8000ee6:	d500      	bpl.n	8000eea <__aeabi_fsub+0xde>
 8000ee8:	e0b6      	b.n	8001058 <__aeabi_fsub+0x24c>
 8000eea:	2c00      	cmp	r4, #0
 8000eec:	d1be      	bne.n	8000e6c <__aeabi_fsub+0x60>
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2400      	movs	r4, #0
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e7e3      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	dc00      	bgt.n	8000efc <__aeabi_fsub+0xf0>
 8000efa:	e085      	b.n	8001008 <__aeabi_fsub+0x1fc>
 8000efc:	2800      	cmp	r0, #0
 8000efe:	d046      	beq.n	8000f8e <__aeabi_fsub+0x182>
 8000f00:	2cff      	cmp	r4, #255	; 0xff
 8000f02:	d049      	beq.n	8000f98 <__aeabi_fsub+0x18c>
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	4648      	mov	r0, r9
 8000f08:	04d2      	lsls	r2, r2, #19
 8000f0a:	4310      	orrs	r0, r2
 8000f0c:	4681      	mov	r9, r0
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2e1b      	cmp	r6, #27
 8000f12:	dc09      	bgt.n	8000f28 <__aeabi_fsub+0x11c>
 8000f14:	2020      	movs	r0, #32
 8000f16:	464c      	mov	r4, r9
 8000f18:	1b80      	subs	r0, r0, r6
 8000f1a:	4084      	lsls	r4, r0
 8000f1c:	464a      	mov	r2, r9
 8000f1e:	0020      	movs	r0, r4
 8000f20:	40f2      	lsrs	r2, r6
 8000f22:	1e44      	subs	r4, r0, #1
 8000f24:	41a0      	sbcs	r0, r4
 8000f26:	4302      	orrs	r2, r0
 8000f28:	189b      	adds	r3, r3, r2
 8000f2a:	015a      	lsls	r2, r3, #5
 8000f2c:	d528      	bpl.n	8000f80 <__aeabi_fsub+0x174>
 8000f2e:	3501      	adds	r5, #1
 8000f30:	2dff      	cmp	r5, #255	; 0xff
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x12a>
 8000f34:	e0a8      	b.n	8001088 <__aeabi_fsub+0x27c>
 8000f36:	2201      	movs	r2, #1
 8000f38:	2407      	movs	r4, #7
 8000f3a:	4994      	ldr	r1, [pc, #592]	; (800118c <__aeabi_fsub+0x380>)
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	085b      	lsrs	r3, r3, #1
 8000f40:	400b      	ands	r3, r1
 8000f42:	4313      	orrs	r3, r2
 8000f44:	401c      	ands	r4, r3
 8000f46:	e7a6      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d000      	beq.n	8000f4e <__aeabi_fsub+0x142>
 8000f4c:	e778      	b.n	8000e40 <__aeabi_fsub+0x34>
 8000f4e:	e775      	b.n	8000e3c <__aeabi_fsub+0x30>
 8000f50:	2cff      	cmp	r4, #255	; 0xff
 8000f52:	d054      	beq.n	8000ffe <__aeabi_fsub+0x1f2>
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	4649      	mov	r1, r9
 8000f58:	04d2      	lsls	r2, r2, #19
 8000f5a:	4311      	orrs	r1, r2
 8000f5c:	4689      	mov	r9, r1
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2e1b      	cmp	r6, #27
 8000f62:	dc09      	bgt.n	8000f78 <__aeabi_fsub+0x16c>
 8000f64:	2120      	movs	r1, #32
 8000f66:	4648      	mov	r0, r9
 8000f68:	1b89      	subs	r1, r1, r6
 8000f6a:	4088      	lsls	r0, r1
 8000f6c:	464a      	mov	r2, r9
 8000f6e:	0001      	movs	r1, r0
 8000f70:	40f2      	lsrs	r2, r6
 8000f72:	1e48      	subs	r0, r1, #1
 8000f74:	4181      	sbcs	r1, r0
 8000f76:	430a      	orrs	r2, r1
 8000f78:	1a9b      	subs	r3, r3, r2
 8000f7a:	015a      	lsls	r2, r3, #5
 8000f7c:	d500      	bpl.n	8000f80 <__aeabi_fsub+0x174>
 8000f7e:	e773      	b.n	8000e68 <__aeabi_fsub+0x5c>
 8000f80:	2201      	movs	r2, #1
 8000f82:	4641      	mov	r1, r8
 8000f84:	400a      	ands	r2, r1
 8000f86:	0759      	lsls	r1, r3, #29
 8000f88:	d000      	beq.n	8000f8c <__aeabi_fsub+0x180>
 8000f8a:	e789      	b.n	8000ea0 <__aeabi_fsub+0x94>
 8000f8c:	e011      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8000f8e:	4648      	mov	r0, r9
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d158      	bne.n	8001046 <__aeabi_fsub+0x23a>
 8000f94:	2cff      	cmp	r4, #255	; 0xff
 8000f96:	d10c      	bne.n	8000fb2 <__aeabi_fsub+0x1a6>
 8000f98:	08db      	lsrs	r3, r3, #3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_fsub+0x194>
 8000f9e:	e78c      	b.n	8000eba <__aeabi_fsub+0xae>
 8000fa0:	2080      	movs	r0, #128	; 0x80
 8000fa2:	03c0      	lsls	r0, r0, #15
 8000fa4:	4303      	orrs	r3, r0
 8000fa6:	025b      	lsls	r3, r3, #9
 8000fa8:	0a5b      	lsrs	r3, r3, #9
 8000faa:	24ff      	movs	r4, #255	; 0xff
 8000fac:	e787      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8000fae:	2cff      	cmp	r4, #255	; 0xff
 8000fb0:	d025      	beq.n	8000ffe <__aeabi_fsub+0x1f2>
 8000fb2:	08db      	lsrs	r3, r3, #3
 8000fb4:	2dff      	cmp	r5, #255	; 0xff
 8000fb6:	d0f0      	beq.n	8000f9a <__aeabi_fsub+0x18e>
 8000fb8:	025b      	lsls	r3, r3, #9
 8000fba:	0a5b      	lsrs	r3, r3, #9
 8000fbc:	b2ec      	uxtb	r4, r5
 8000fbe:	e77e      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	d04d      	beq.n	8001060 <__aeabi_fsub+0x254>
 8000fc4:	28ff      	cmp	r0, #255	; 0xff
 8000fc6:	d018      	beq.n	8000ffa <__aeabi_fsub+0x1ee>
 8000fc8:	2480      	movs	r4, #128	; 0x80
 8000fca:	04e4      	lsls	r4, r4, #19
 8000fcc:	4272      	negs	r2, r6
 8000fce:	4323      	orrs	r3, r4
 8000fd0:	2a1b      	cmp	r2, #27
 8000fd2:	dd00      	ble.n	8000fd6 <__aeabi_fsub+0x1ca>
 8000fd4:	e0c4      	b.n	8001160 <__aeabi_fsub+0x354>
 8000fd6:	001c      	movs	r4, r3
 8000fd8:	2520      	movs	r5, #32
 8000fda:	40d4      	lsrs	r4, r2
 8000fdc:	1aaa      	subs	r2, r5, r2
 8000fde:	4093      	lsls	r3, r2
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	4193      	sbcs	r3, r2
 8000fe4:	4323      	orrs	r3, r4
 8000fe6:	464a      	mov	r2, r9
 8000fe8:	0005      	movs	r5, r0
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	4688      	mov	r8, r1
 8000fee:	e738      	b.n	8000e62 <__aeabi_fsub+0x56>
 8000ff0:	1c72      	adds	r2, r6, #1
 8000ff2:	d0f8      	beq.n	8000fe6 <__aeabi_fsub+0x1da>
 8000ff4:	43f2      	mvns	r2, r6
 8000ff6:	28ff      	cmp	r0, #255	; 0xff
 8000ff8:	d1ea      	bne.n	8000fd0 <__aeabi_fsub+0x1c4>
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	464b      	mov	r3, r9
 8000ffe:	25ff      	movs	r5, #255	; 0xff
 8001000:	e7d7      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001002:	019b      	lsls	r3, r3, #6
 8001004:	0a5b      	lsrs	r3, r3, #9
 8001006:	e75a      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8001008:	2e00      	cmp	r6, #0
 800100a:	d141      	bne.n	8001090 <__aeabi_fsub+0x284>
 800100c:	1c65      	adds	r5, r4, #1
 800100e:	b2e9      	uxtb	r1, r5
 8001010:	2901      	cmp	r1, #1
 8001012:	dd45      	ble.n	80010a0 <__aeabi_fsub+0x294>
 8001014:	2dff      	cmp	r5, #255	; 0xff
 8001016:	d100      	bne.n	800101a <__aeabi_fsub+0x20e>
 8001018:	e74f      	b.n	8000eba <__aeabi_fsub+0xae>
 800101a:	2407      	movs	r4, #7
 800101c:	444b      	add	r3, r9
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	401c      	ands	r4, r3
 8001022:	e738      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8001024:	2207      	movs	r2, #7
 8001026:	4b5a      	ldr	r3, [pc, #360]	; (8001190 <__aeabi_fsub+0x384>)
 8001028:	1a2d      	subs	r5, r5, r0
 800102a:	4023      	ands	r3, r4
 800102c:	4014      	ands	r4, r2
 800102e:	e732      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8001030:	2c00      	cmp	r4, #0
 8001032:	d11d      	bne.n	8001070 <__aeabi_fsub+0x264>
 8001034:	2b00      	cmp	r3, #0
 8001036:	d17a      	bne.n	800112e <__aeabi_fsub+0x322>
 8001038:	464b      	mov	r3, r9
 800103a:	2b00      	cmp	r3, #0
 800103c:	d100      	bne.n	8001040 <__aeabi_fsub+0x234>
 800103e:	e091      	b.n	8001164 <__aeabi_fsub+0x358>
 8001040:	000a      	movs	r2, r1
 8001042:	2500      	movs	r5, #0
 8001044:	e7b5      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001046:	3e01      	subs	r6, #1
 8001048:	2e00      	cmp	r6, #0
 800104a:	d119      	bne.n	8001080 <__aeabi_fsub+0x274>
 800104c:	444b      	add	r3, r9
 800104e:	e76c      	b.n	8000f2a <__aeabi_fsub+0x11e>
 8001050:	2cff      	cmp	r4, #255	; 0xff
 8001052:	d184      	bne.n	8000f5e <__aeabi_fsub+0x152>
 8001054:	25ff      	movs	r5, #255	; 0xff
 8001056:	e7ac      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001058:	464a      	mov	r2, r9
 800105a:	4688      	mov	r8, r1
 800105c:	1ad4      	subs	r4, r2, r3
 800105e:	e705      	b.n	8000e6c <__aeabi_fsub+0x60>
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1c5      	bne.n	8000ff0 <__aeabi_fsub+0x1e4>
 8001064:	000a      	movs	r2, r1
 8001066:	28ff      	cmp	r0, #255	; 0xff
 8001068:	d0c8      	beq.n	8000ffc <__aeabi_fsub+0x1f0>
 800106a:	0005      	movs	r5, r0
 800106c:	464b      	mov	r3, r9
 800106e:	e7a0      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001070:	2b00      	cmp	r3, #0
 8001072:	d149      	bne.n	8001108 <__aeabi_fsub+0x2fc>
 8001074:	464b      	mov	r3, r9
 8001076:	2b00      	cmp	r3, #0
 8001078:	d077      	beq.n	800116a <__aeabi_fsub+0x35e>
 800107a:	000a      	movs	r2, r1
 800107c:	25ff      	movs	r5, #255	; 0xff
 800107e:	e798      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001080:	2cff      	cmp	r4, #255	; 0xff
 8001082:	d000      	beq.n	8001086 <__aeabi_fsub+0x27a>
 8001084:	e743      	b.n	8000f0e <__aeabi_fsub+0x102>
 8001086:	e787      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001088:	000a      	movs	r2, r1
 800108a:	24ff      	movs	r4, #255	; 0xff
 800108c:	2300      	movs	r3, #0
 800108e:	e716      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8001090:	2c00      	cmp	r4, #0
 8001092:	d115      	bne.n	80010c0 <__aeabi_fsub+0x2b4>
 8001094:	2b00      	cmp	r3, #0
 8001096:	d157      	bne.n	8001148 <__aeabi_fsub+0x33c>
 8001098:	28ff      	cmp	r0, #255	; 0xff
 800109a:	d1e6      	bne.n	800106a <__aeabi_fsub+0x25e>
 800109c:	464b      	mov	r3, r9
 800109e:	e77b      	b.n	8000f98 <__aeabi_fsub+0x18c>
 80010a0:	2c00      	cmp	r4, #0
 80010a2:	d120      	bne.n	80010e6 <__aeabi_fsub+0x2da>
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d057      	beq.n	8001158 <__aeabi_fsub+0x34c>
 80010a8:	4649      	mov	r1, r9
 80010aa:	2900      	cmp	r1, #0
 80010ac:	d053      	beq.n	8001156 <__aeabi_fsub+0x34a>
 80010ae:	444b      	add	r3, r9
 80010b0:	015a      	lsls	r2, r3, #5
 80010b2:	d568      	bpl.n	8001186 <__aeabi_fsub+0x37a>
 80010b4:	2407      	movs	r4, #7
 80010b6:	4a36      	ldr	r2, [pc, #216]	; (8001190 <__aeabi_fsub+0x384>)
 80010b8:	401c      	ands	r4, r3
 80010ba:	2501      	movs	r5, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	e6ea      	b.n	8000e96 <__aeabi_fsub+0x8a>
 80010c0:	28ff      	cmp	r0, #255	; 0xff
 80010c2:	d0eb      	beq.n	800109c <__aeabi_fsub+0x290>
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	04d2      	lsls	r2, r2, #19
 80010c8:	4276      	negs	r6, r6
 80010ca:	4313      	orrs	r3, r2
 80010cc:	2e1b      	cmp	r6, #27
 80010ce:	dc53      	bgt.n	8001178 <__aeabi_fsub+0x36c>
 80010d0:	2520      	movs	r5, #32
 80010d2:	1bad      	subs	r5, r5, r6
 80010d4:	001a      	movs	r2, r3
 80010d6:	40ab      	lsls	r3, r5
 80010d8:	40f2      	lsrs	r2, r6
 80010da:	1e5c      	subs	r4, r3, #1
 80010dc:	41a3      	sbcs	r3, r4
 80010de:	4313      	orrs	r3, r2
 80010e0:	444b      	add	r3, r9
 80010e2:	0005      	movs	r5, r0
 80010e4:	e721      	b.n	8000f2a <__aeabi_fsub+0x11e>
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0d8      	beq.n	800109c <__aeabi_fsub+0x290>
 80010ea:	4649      	mov	r1, r9
 80010ec:	2900      	cmp	r1, #0
 80010ee:	d100      	bne.n	80010f2 <__aeabi_fsub+0x2e6>
 80010f0:	e752      	b.n	8000f98 <__aeabi_fsub+0x18c>
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	03c9      	lsls	r1, r1, #15
 80010f6:	420f      	tst	r7, r1
 80010f8:	d100      	bne.n	80010fc <__aeabi_fsub+0x2f0>
 80010fa:	e74d      	b.n	8000f98 <__aeabi_fsub+0x18c>
 80010fc:	4660      	mov	r0, ip
 80010fe:	4208      	tst	r0, r1
 8001100:	d000      	beq.n	8001104 <__aeabi_fsub+0x2f8>
 8001102:	e749      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001104:	464b      	mov	r3, r9
 8001106:	e747      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001108:	4648      	mov	r0, r9
 800110a:	25ff      	movs	r5, #255	; 0xff
 800110c:	2800      	cmp	r0, #0
 800110e:	d100      	bne.n	8001112 <__aeabi_fsub+0x306>
 8001110:	e74f      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	03d2      	lsls	r2, r2, #15
 8001116:	4217      	tst	r7, r2
 8001118:	d004      	beq.n	8001124 <__aeabi_fsub+0x318>
 800111a:	4660      	mov	r0, ip
 800111c:	4210      	tst	r0, r2
 800111e:	d101      	bne.n	8001124 <__aeabi_fsub+0x318>
 8001120:	464b      	mov	r3, r9
 8001122:	4688      	mov	r8, r1
 8001124:	2201      	movs	r2, #1
 8001126:	4641      	mov	r1, r8
 8001128:	25ff      	movs	r5, #255	; 0xff
 800112a:	400a      	ands	r2, r1
 800112c:	e741      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 800112e:	4648      	mov	r0, r9
 8001130:	2800      	cmp	r0, #0
 8001132:	d01f      	beq.n	8001174 <__aeabi_fsub+0x368>
 8001134:	1a1a      	subs	r2, r3, r0
 8001136:	0150      	lsls	r0, r2, #5
 8001138:	d520      	bpl.n	800117c <__aeabi_fsub+0x370>
 800113a:	464a      	mov	r2, r9
 800113c:	2407      	movs	r4, #7
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	401c      	ands	r4, r3
 8001142:	4688      	mov	r8, r1
 8001144:	2500      	movs	r5, #0
 8001146:	e6a6      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8001148:	1c74      	adds	r4, r6, #1
 800114a:	d0c9      	beq.n	80010e0 <__aeabi_fsub+0x2d4>
 800114c:	43f6      	mvns	r6, r6
 800114e:	28ff      	cmp	r0, #255	; 0xff
 8001150:	d1bc      	bne.n	80010cc <__aeabi_fsub+0x2c0>
 8001152:	464b      	mov	r3, r9
 8001154:	e720      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001156:	4699      	mov	r9, r3
 8001158:	464b      	mov	r3, r9
 800115a:	2500      	movs	r5, #0
 800115c:	08db      	lsrs	r3, r3, #3
 800115e:	e72b      	b.n	8000fb8 <__aeabi_fsub+0x1ac>
 8001160:	2301      	movs	r3, #1
 8001162:	e740      	b.n	8000fe6 <__aeabi_fsub+0x1da>
 8001164:	2200      	movs	r2, #0
 8001166:	2300      	movs	r3, #0
 8001168:	e6a9      	b.n	8000ebe <__aeabi_fsub+0xb2>
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	2200      	movs	r2, #0
 800116e:	03db      	lsls	r3, r3, #15
 8001170:	24ff      	movs	r4, #255	; 0xff
 8001172:	e6a4      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8001174:	2500      	movs	r5, #0
 8001176:	e71c      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001178:	2301      	movs	r3, #1
 800117a:	e7b1      	b.n	80010e0 <__aeabi_fsub+0x2d4>
 800117c:	2a00      	cmp	r2, #0
 800117e:	d0f1      	beq.n	8001164 <__aeabi_fsub+0x358>
 8001180:	0013      	movs	r3, r2
 8001182:	2500      	movs	r5, #0
 8001184:	e6fc      	b.n	8000f80 <__aeabi_fsub+0x174>
 8001186:	2500      	movs	r5, #0
 8001188:	e6fa      	b.n	8000f80 <__aeabi_fsub+0x174>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	7dffffff 	.word	0x7dffffff
 8001190:	fbffffff 	.word	0xfbffffff

08001194 <__aeabi_f2iz>:
 8001194:	0241      	lsls	r1, r0, #9
 8001196:	0042      	lsls	r2, r0, #1
 8001198:	0fc3      	lsrs	r3, r0, #31
 800119a:	0a49      	lsrs	r1, r1, #9
 800119c:	0e12      	lsrs	r2, r2, #24
 800119e:	2000      	movs	r0, #0
 80011a0:	2a7e      	cmp	r2, #126	; 0x7e
 80011a2:	d90d      	bls.n	80011c0 <__aeabi_f2iz+0x2c>
 80011a4:	2a9d      	cmp	r2, #157	; 0x9d
 80011a6:	d80c      	bhi.n	80011c2 <__aeabi_f2iz+0x2e>
 80011a8:	2080      	movs	r0, #128	; 0x80
 80011aa:	0400      	lsls	r0, r0, #16
 80011ac:	4301      	orrs	r1, r0
 80011ae:	2a95      	cmp	r2, #149	; 0x95
 80011b0:	dc0a      	bgt.n	80011c8 <__aeabi_f2iz+0x34>
 80011b2:	2096      	movs	r0, #150	; 0x96
 80011b4:	1a82      	subs	r2, r0, r2
 80011b6:	40d1      	lsrs	r1, r2
 80011b8:	4248      	negs	r0, r1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d100      	bne.n	80011c0 <__aeabi_f2iz+0x2c>
 80011be:	0008      	movs	r0, r1
 80011c0:	4770      	bx	lr
 80011c2:	4a03      	ldr	r2, [pc, #12]	; (80011d0 <__aeabi_f2iz+0x3c>)
 80011c4:	1898      	adds	r0, r3, r2
 80011c6:	e7fb      	b.n	80011c0 <__aeabi_f2iz+0x2c>
 80011c8:	3a96      	subs	r2, #150	; 0x96
 80011ca:	4091      	lsls	r1, r2
 80011cc:	e7f4      	b.n	80011b8 <__aeabi_f2iz+0x24>
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	7fffffff 	.word	0x7fffffff

080011d4 <__aeabi_ui2f>:
 80011d4:	b570      	push	{r4, r5, r6, lr}
 80011d6:	1e04      	subs	r4, r0, #0
 80011d8:	d034      	beq.n	8001244 <__aeabi_ui2f+0x70>
 80011da:	f001 feaf 	bl	8002f3c <__clzsi2>
 80011de:	229e      	movs	r2, #158	; 0x9e
 80011e0:	1a12      	subs	r2, r2, r0
 80011e2:	2a96      	cmp	r2, #150	; 0x96
 80011e4:	dc07      	bgt.n	80011f6 <__aeabi_ui2f+0x22>
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	2808      	cmp	r0, #8
 80011ea:	dd2e      	ble.n	800124a <__aeabi_ui2f+0x76>
 80011ec:	3808      	subs	r0, #8
 80011ee:	4084      	lsls	r4, r0
 80011f0:	0260      	lsls	r0, r4, #9
 80011f2:	0a40      	lsrs	r0, r0, #9
 80011f4:	e021      	b.n	800123a <__aeabi_ui2f+0x66>
 80011f6:	2a99      	cmp	r2, #153	; 0x99
 80011f8:	dd09      	ble.n	800120e <__aeabi_ui2f+0x3a>
 80011fa:	0003      	movs	r3, r0
 80011fc:	0021      	movs	r1, r4
 80011fe:	331b      	adds	r3, #27
 8001200:	4099      	lsls	r1, r3
 8001202:	1e4b      	subs	r3, r1, #1
 8001204:	4199      	sbcs	r1, r3
 8001206:	2305      	movs	r3, #5
 8001208:	1a1b      	subs	r3, r3, r0
 800120a:	40dc      	lsrs	r4, r3
 800120c:	430c      	orrs	r4, r1
 800120e:	2805      	cmp	r0, #5
 8001210:	dd01      	ble.n	8001216 <__aeabi_ui2f+0x42>
 8001212:	1f43      	subs	r3, r0, #5
 8001214:	409c      	lsls	r4, r3
 8001216:	0023      	movs	r3, r4
 8001218:	490d      	ldr	r1, [pc, #52]	; (8001250 <__aeabi_ui2f+0x7c>)
 800121a:	400b      	ands	r3, r1
 800121c:	0765      	lsls	r5, r4, #29
 800121e:	d009      	beq.n	8001234 <__aeabi_ui2f+0x60>
 8001220:	250f      	movs	r5, #15
 8001222:	402c      	ands	r4, r5
 8001224:	2c04      	cmp	r4, #4
 8001226:	d005      	beq.n	8001234 <__aeabi_ui2f+0x60>
 8001228:	3304      	adds	r3, #4
 800122a:	015c      	lsls	r4, r3, #5
 800122c:	d502      	bpl.n	8001234 <__aeabi_ui2f+0x60>
 800122e:	229f      	movs	r2, #159	; 0x9f
 8001230:	400b      	ands	r3, r1
 8001232:	1a12      	subs	r2, r2, r0
 8001234:	019b      	lsls	r3, r3, #6
 8001236:	0a58      	lsrs	r0, r3, #9
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	0240      	lsls	r0, r0, #9
 800123c:	05d2      	lsls	r2, r2, #23
 800123e:	0a40      	lsrs	r0, r0, #9
 8001240:	4310      	orrs	r0, r2
 8001242:	bd70      	pop	{r4, r5, r6, pc}
 8001244:	2200      	movs	r2, #0
 8001246:	2000      	movs	r0, #0
 8001248:	e7f7      	b.n	800123a <__aeabi_ui2f+0x66>
 800124a:	0260      	lsls	r0, r4, #9
 800124c:	0a40      	lsrs	r0, r0, #9
 800124e:	e7f4      	b.n	800123a <__aeabi_ui2f+0x66>
 8001250:	fbffffff 	.word	0xfbffffff

08001254 <__aeabi_dadd>:
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	464f      	mov	r7, r9
 8001258:	4646      	mov	r6, r8
 800125a:	46d6      	mov	lr, sl
 800125c:	000c      	movs	r4, r1
 800125e:	0309      	lsls	r1, r1, #12
 8001260:	b5c0      	push	{r6, r7, lr}
 8001262:	0a49      	lsrs	r1, r1, #9
 8001264:	0f47      	lsrs	r7, r0, #29
 8001266:	005e      	lsls	r6, r3, #1
 8001268:	4339      	orrs	r1, r7
 800126a:	031f      	lsls	r7, r3, #12
 800126c:	0fdb      	lsrs	r3, r3, #31
 800126e:	469c      	mov	ip, r3
 8001270:	0065      	lsls	r5, r4, #1
 8001272:	0a7b      	lsrs	r3, r7, #9
 8001274:	0f57      	lsrs	r7, r2, #29
 8001276:	431f      	orrs	r7, r3
 8001278:	0d6d      	lsrs	r5, r5, #21
 800127a:	0fe4      	lsrs	r4, r4, #31
 800127c:	0d76      	lsrs	r6, r6, #21
 800127e:	46a1      	mov	r9, r4
 8001280:	00c0      	lsls	r0, r0, #3
 8001282:	46b8      	mov	r8, r7
 8001284:	00d2      	lsls	r2, r2, #3
 8001286:	1bab      	subs	r3, r5, r6
 8001288:	4564      	cmp	r4, ip
 800128a:	d07b      	beq.n	8001384 <__aeabi_dadd+0x130>
 800128c:	2b00      	cmp	r3, #0
 800128e:	dd5f      	ble.n	8001350 <__aeabi_dadd+0xfc>
 8001290:	2e00      	cmp	r6, #0
 8001292:	d000      	beq.n	8001296 <__aeabi_dadd+0x42>
 8001294:	e0a4      	b.n	80013e0 <__aeabi_dadd+0x18c>
 8001296:	003e      	movs	r6, r7
 8001298:	4316      	orrs	r6, r2
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0x4a>
 800129c:	e112      	b.n	80014c4 <__aeabi_dadd+0x270>
 800129e:	1e5e      	subs	r6, r3, #1
 80012a0:	2e00      	cmp	r6, #0
 80012a2:	d000      	beq.n	80012a6 <__aeabi_dadd+0x52>
 80012a4:	e19e      	b.n	80015e4 <__aeabi_dadd+0x390>
 80012a6:	1a87      	subs	r7, r0, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	42b8      	cmp	r0, r7
 80012ac:	4180      	sbcs	r0, r0
 80012ae:	2501      	movs	r5, #1
 80012b0:	1ac9      	subs	r1, r1, r3
 80012b2:	4240      	negs	r0, r0
 80012b4:	1a09      	subs	r1, r1, r0
 80012b6:	020b      	lsls	r3, r1, #8
 80012b8:	d400      	bmi.n	80012bc <__aeabi_dadd+0x68>
 80012ba:	e131      	b.n	8001520 <__aeabi_dadd+0x2cc>
 80012bc:	0249      	lsls	r1, r1, #9
 80012be:	0a4e      	lsrs	r6, r1, #9
 80012c0:	2e00      	cmp	r6, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dadd+0x72>
 80012c4:	e16e      	b.n	80015a4 <__aeabi_dadd+0x350>
 80012c6:	0030      	movs	r0, r6
 80012c8:	f001 fe38 	bl	8002f3c <__clzsi2>
 80012cc:	0003      	movs	r3, r0
 80012ce:	3b08      	subs	r3, #8
 80012d0:	2b1f      	cmp	r3, #31
 80012d2:	dd00      	ble.n	80012d6 <__aeabi_dadd+0x82>
 80012d4:	e161      	b.n	800159a <__aeabi_dadd+0x346>
 80012d6:	2220      	movs	r2, #32
 80012d8:	0039      	movs	r1, r7
 80012da:	1ad2      	subs	r2, r2, r3
 80012dc:	409e      	lsls	r6, r3
 80012de:	40d1      	lsrs	r1, r2
 80012e0:	409f      	lsls	r7, r3
 80012e2:	430e      	orrs	r6, r1
 80012e4:	429d      	cmp	r5, r3
 80012e6:	dd00      	ble.n	80012ea <__aeabi_dadd+0x96>
 80012e8:	e151      	b.n	800158e <__aeabi_dadd+0x33a>
 80012ea:	1b5d      	subs	r5, r3, r5
 80012ec:	1c6b      	adds	r3, r5, #1
 80012ee:	2b1f      	cmp	r3, #31
 80012f0:	dd00      	ble.n	80012f4 <__aeabi_dadd+0xa0>
 80012f2:	e17c      	b.n	80015ee <__aeabi_dadd+0x39a>
 80012f4:	2120      	movs	r1, #32
 80012f6:	1ac9      	subs	r1, r1, r3
 80012f8:	003d      	movs	r5, r7
 80012fa:	0030      	movs	r0, r6
 80012fc:	408f      	lsls	r7, r1
 80012fe:	4088      	lsls	r0, r1
 8001300:	40dd      	lsrs	r5, r3
 8001302:	1e79      	subs	r1, r7, #1
 8001304:	418f      	sbcs	r7, r1
 8001306:	0031      	movs	r1, r6
 8001308:	2207      	movs	r2, #7
 800130a:	4328      	orrs	r0, r5
 800130c:	40d9      	lsrs	r1, r3
 800130e:	2500      	movs	r5, #0
 8001310:	4307      	orrs	r7, r0
 8001312:	403a      	ands	r2, r7
 8001314:	2a00      	cmp	r2, #0
 8001316:	d009      	beq.n	800132c <__aeabi_dadd+0xd8>
 8001318:	230f      	movs	r3, #15
 800131a:	403b      	ands	r3, r7
 800131c:	2b04      	cmp	r3, #4
 800131e:	d005      	beq.n	800132c <__aeabi_dadd+0xd8>
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	42bb      	cmp	r3, r7
 8001324:	41bf      	sbcs	r7, r7
 8001326:	427f      	negs	r7, r7
 8001328:	19c9      	adds	r1, r1, r7
 800132a:	001f      	movs	r7, r3
 800132c:	020b      	lsls	r3, r1, #8
 800132e:	d400      	bmi.n	8001332 <__aeabi_dadd+0xde>
 8001330:	e226      	b.n	8001780 <__aeabi_dadd+0x52c>
 8001332:	1c6a      	adds	r2, r5, #1
 8001334:	4bc6      	ldr	r3, [pc, #792]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001336:	0555      	lsls	r5, r2, #21
 8001338:	0d6d      	lsrs	r5, r5, #21
 800133a:	429a      	cmp	r2, r3
 800133c:	d100      	bne.n	8001340 <__aeabi_dadd+0xec>
 800133e:	e106      	b.n	800154e <__aeabi_dadd+0x2fa>
 8001340:	4ac4      	ldr	r2, [pc, #784]	; (8001654 <__aeabi_dadd+0x400>)
 8001342:	08ff      	lsrs	r7, r7, #3
 8001344:	400a      	ands	r2, r1
 8001346:	0753      	lsls	r3, r2, #29
 8001348:	0252      	lsls	r2, r2, #9
 800134a:	433b      	orrs	r3, r7
 800134c:	0b12      	lsrs	r2, r2, #12
 800134e:	e08e      	b.n	800146e <__aeabi_dadd+0x21a>
 8001350:	2b00      	cmp	r3, #0
 8001352:	d000      	beq.n	8001356 <__aeabi_dadd+0x102>
 8001354:	e0b8      	b.n	80014c8 <__aeabi_dadd+0x274>
 8001356:	1c6b      	adds	r3, r5, #1
 8001358:	055b      	lsls	r3, r3, #21
 800135a:	0d5b      	lsrs	r3, r3, #21
 800135c:	2b01      	cmp	r3, #1
 800135e:	dc00      	bgt.n	8001362 <__aeabi_dadd+0x10e>
 8001360:	e130      	b.n	80015c4 <__aeabi_dadd+0x370>
 8001362:	1a87      	subs	r7, r0, r2
 8001364:	4643      	mov	r3, r8
 8001366:	42b8      	cmp	r0, r7
 8001368:	41b6      	sbcs	r6, r6
 800136a:	1acb      	subs	r3, r1, r3
 800136c:	4276      	negs	r6, r6
 800136e:	1b9e      	subs	r6, r3, r6
 8001370:	0233      	lsls	r3, r6, #8
 8001372:	d500      	bpl.n	8001376 <__aeabi_dadd+0x122>
 8001374:	e14c      	b.n	8001610 <__aeabi_dadd+0x3bc>
 8001376:	003b      	movs	r3, r7
 8001378:	4333      	orrs	r3, r6
 800137a:	d1a1      	bne.n	80012c0 <__aeabi_dadd+0x6c>
 800137c:	2200      	movs	r2, #0
 800137e:	2400      	movs	r4, #0
 8001380:	2500      	movs	r5, #0
 8001382:	e070      	b.n	8001466 <__aeabi_dadd+0x212>
 8001384:	2b00      	cmp	r3, #0
 8001386:	dc00      	bgt.n	800138a <__aeabi_dadd+0x136>
 8001388:	e0e5      	b.n	8001556 <__aeabi_dadd+0x302>
 800138a:	2e00      	cmp	r6, #0
 800138c:	d100      	bne.n	8001390 <__aeabi_dadd+0x13c>
 800138e:	e083      	b.n	8001498 <__aeabi_dadd+0x244>
 8001390:	4eaf      	ldr	r6, [pc, #700]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001392:	42b5      	cmp	r5, r6
 8001394:	d060      	beq.n	8001458 <__aeabi_dadd+0x204>
 8001396:	2680      	movs	r6, #128	; 0x80
 8001398:	0436      	lsls	r6, r6, #16
 800139a:	4337      	orrs	r7, r6
 800139c:	46b8      	mov	r8, r7
 800139e:	2b38      	cmp	r3, #56	; 0x38
 80013a0:	dc00      	bgt.n	80013a4 <__aeabi_dadd+0x150>
 80013a2:	e13e      	b.n	8001622 <__aeabi_dadd+0x3ce>
 80013a4:	4643      	mov	r3, r8
 80013a6:	4313      	orrs	r3, r2
 80013a8:	001f      	movs	r7, r3
 80013aa:	1e7a      	subs	r2, r7, #1
 80013ac:	4197      	sbcs	r7, r2
 80013ae:	183f      	adds	r7, r7, r0
 80013b0:	4287      	cmp	r7, r0
 80013b2:	4180      	sbcs	r0, r0
 80013b4:	4240      	negs	r0, r0
 80013b6:	1809      	adds	r1, r1, r0
 80013b8:	020b      	lsls	r3, r1, #8
 80013ba:	d400      	bmi.n	80013be <__aeabi_dadd+0x16a>
 80013bc:	e0b0      	b.n	8001520 <__aeabi_dadd+0x2cc>
 80013be:	4ba4      	ldr	r3, [pc, #656]	; (8001650 <__aeabi_dadd+0x3fc>)
 80013c0:	3501      	adds	r5, #1
 80013c2:	429d      	cmp	r5, r3
 80013c4:	d100      	bne.n	80013c8 <__aeabi_dadd+0x174>
 80013c6:	e0c3      	b.n	8001550 <__aeabi_dadd+0x2fc>
 80013c8:	4aa2      	ldr	r2, [pc, #648]	; (8001654 <__aeabi_dadd+0x400>)
 80013ca:	087b      	lsrs	r3, r7, #1
 80013cc:	400a      	ands	r2, r1
 80013ce:	2101      	movs	r1, #1
 80013d0:	400f      	ands	r7, r1
 80013d2:	431f      	orrs	r7, r3
 80013d4:	0851      	lsrs	r1, r2, #1
 80013d6:	07d3      	lsls	r3, r2, #31
 80013d8:	2207      	movs	r2, #7
 80013da:	431f      	orrs	r7, r3
 80013dc:	403a      	ands	r2, r7
 80013de:	e799      	b.n	8001314 <__aeabi_dadd+0xc0>
 80013e0:	4e9b      	ldr	r6, [pc, #620]	; (8001650 <__aeabi_dadd+0x3fc>)
 80013e2:	42b5      	cmp	r5, r6
 80013e4:	d038      	beq.n	8001458 <__aeabi_dadd+0x204>
 80013e6:	2680      	movs	r6, #128	; 0x80
 80013e8:	0436      	lsls	r6, r6, #16
 80013ea:	4337      	orrs	r7, r6
 80013ec:	46b8      	mov	r8, r7
 80013ee:	2b38      	cmp	r3, #56	; 0x38
 80013f0:	dd00      	ble.n	80013f4 <__aeabi_dadd+0x1a0>
 80013f2:	e0dc      	b.n	80015ae <__aeabi_dadd+0x35a>
 80013f4:	2b1f      	cmp	r3, #31
 80013f6:	dc00      	bgt.n	80013fa <__aeabi_dadd+0x1a6>
 80013f8:	e130      	b.n	800165c <__aeabi_dadd+0x408>
 80013fa:	001e      	movs	r6, r3
 80013fc:	4647      	mov	r7, r8
 80013fe:	3e20      	subs	r6, #32
 8001400:	40f7      	lsrs	r7, r6
 8001402:	46bc      	mov	ip, r7
 8001404:	2b20      	cmp	r3, #32
 8001406:	d004      	beq.n	8001412 <__aeabi_dadd+0x1be>
 8001408:	2640      	movs	r6, #64	; 0x40
 800140a:	1af3      	subs	r3, r6, r3
 800140c:	4646      	mov	r6, r8
 800140e:	409e      	lsls	r6, r3
 8001410:	4332      	orrs	r2, r6
 8001412:	0017      	movs	r7, r2
 8001414:	4663      	mov	r3, ip
 8001416:	1e7a      	subs	r2, r7, #1
 8001418:	4197      	sbcs	r7, r2
 800141a:	431f      	orrs	r7, r3
 800141c:	e0cc      	b.n	80015b8 <__aeabi_dadd+0x364>
 800141e:	2b00      	cmp	r3, #0
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x1d0>
 8001422:	e204      	b.n	800182e <__aeabi_dadd+0x5da>
 8001424:	4643      	mov	r3, r8
 8001426:	4313      	orrs	r3, r2
 8001428:	d100      	bne.n	800142c <__aeabi_dadd+0x1d8>
 800142a:	e159      	b.n	80016e0 <__aeabi_dadd+0x48c>
 800142c:	074b      	lsls	r3, r1, #29
 800142e:	08c0      	lsrs	r0, r0, #3
 8001430:	4318      	orrs	r0, r3
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	08c9      	lsrs	r1, r1, #3
 8001436:	031b      	lsls	r3, r3, #12
 8001438:	4219      	tst	r1, r3
 800143a:	d008      	beq.n	800144e <__aeabi_dadd+0x1fa>
 800143c:	4645      	mov	r5, r8
 800143e:	08ed      	lsrs	r5, r5, #3
 8001440:	421d      	tst	r5, r3
 8001442:	d104      	bne.n	800144e <__aeabi_dadd+0x1fa>
 8001444:	4643      	mov	r3, r8
 8001446:	08d0      	lsrs	r0, r2, #3
 8001448:	0759      	lsls	r1, r3, #29
 800144a:	4308      	orrs	r0, r1
 800144c:	0029      	movs	r1, r5
 800144e:	0f42      	lsrs	r2, r0, #29
 8001450:	00c9      	lsls	r1, r1, #3
 8001452:	4d7f      	ldr	r5, [pc, #508]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001454:	4311      	orrs	r1, r2
 8001456:	00c0      	lsls	r0, r0, #3
 8001458:	074b      	lsls	r3, r1, #29
 800145a:	08ca      	lsrs	r2, r1, #3
 800145c:	497c      	ldr	r1, [pc, #496]	; (8001650 <__aeabi_dadd+0x3fc>)
 800145e:	08c0      	lsrs	r0, r0, #3
 8001460:	4303      	orrs	r3, r0
 8001462:	428d      	cmp	r5, r1
 8001464:	d068      	beq.n	8001538 <__aeabi_dadd+0x2e4>
 8001466:	0312      	lsls	r2, r2, #12
 8001468:	056d      	lsls	r5, r5, #21
 800146a:	0b12      	lsrs	r2, r2, #12
 800146c:	0d6d      	lsrs	r5, r5, #21
 800146e:	2100      	movs	r1, #0
 8001470:	0312      	lsls	r2, r2, #12
 8001472:	0018      	movs	r0, r3
 8001474:	0b13      	lsrs	r3, r2, #12
 8001476:	0d0a      	lsrs	r2, r1, #20
 8001478:	0512      	lsls	r2, r2, #20
 800147a:	431a      	orrs	r2, r3
 800147c:	4b76      	ldr	r3, [pc, #472]	; (8001658 <__aeabi_dadd+0x404>)
 800147e:	052d      	lsls	r5, r5, #20
 8001480:	4013      	ands	r3, r2
 8001482:	432b      	orrs	r3, r5
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	07e4      	lsls	r4, r4, #31
 8001488:	085b      	lsrs	r3, r3, #1
 800148a:	4323      	orrs	r3, r4
 800148c:	0019      	movs	r1, r3
 800148e:	bc1c      	pop	{r2, r3, r4}
 8001490:	4690      	mov	r8, r2
 8001492:	4699      	mov	r9, r3
 8001494:	46a2      	mov	sl, r4
 8001496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001498:	003e      	movs	r6, r7
 800149a:	4316      	orrs	r6, r2
 800149c:	d012      	beq.n	80014c4 <__aeabi_dadd+0x270>
 800149e:	1e5e      	subs	r6, r3, #1
 80014a0:	2e00      	cmp	r6, #0
 80014a2:	d000      	beq.n	80014a6 <__aeabi_dadd+0x252>
 80014a4:	e100      	b.n	80016a8 <__aeabi_dadd+0x454>
 80014a6:	1887      	adds	r7, r0, r2
 80014a8:	4287      	cmp	r7, r0
 80014aa:	4180      	sbcs	r0, r0
 80014ac:	4441      	add	r1, r8
 80014ae:	4240      	negs	r0, r0
 80014b0:	1809      	adds	r1, r1, r0
 80014b2:	2501      	movs	r5, #1
 80014b4:	020b      	lsls	r3, r1, #8
 80014b6:	d533      	bpl.n	8001520 <__aeabi_dadd+0x2cc>
 80014b8:	2502      	movs	r5, #2
 80014ba:	e785      	b.n	80013c8 <__aeabi_dadd+0x174>
 80014bc:	4664      	mov	r4, ip
 80014be:	0033      	movs	r3, r6
 80014c0:	4641      	mov	r1, r8
 80014c2:	0010      	movs	r0, r2
 80014c4:	001d      	movs	r5, r3
 80014c6:	e7c7      	b.n	8001458 <__aeabi_dadd+0x204>
 80014c8:	2d00      	cmp	r5, #0
 80014ca:	d000      	beq.n	80014ce <__aeabi_dadd+0x27a>
 80014cc:	e0da      	b.n	8001684 <__aeabi_dadd+0x430>
 80014ce:	000c      	movs	r4, r1
 80014d0:	4304      	orrs	r4, r0
 80014d2:	d0f3      	beq.n	80014bc <__aeabi_dadd+0x268>
 80014d4:	1c5c      	adds	r4, r3, #1
 80014d6:	d100      	bne.n	80014da <__aeabi_dadd+0x286>
 80014d8:	e19f      	b.n	800181a <__aeabi_dadd+0x5c6>
 80014da:	4c5d      	ldr	r4, [pc, #372]	; (8001650 <__aeabi_dadd+0x3fc>)
 80014dc:	42a6      	cmp	r6, r4
 80014de:	d100      	bne.n	80014e2 <__aeabi_dadd+0x28e>
 80014e0:	e12f      	b.n	8001742 <__aeabi_dadd+0x4ee>
 80014e2:	43db      	mvns	r3, r3
 80014e4:	2b38      	cmp	r3, #56	; 0x38
 80014e6:	dd00      	ble.n	80014ea <__aeabi_dadd+0x296>
 80014e8:	e166      	b.n	80017b8 <__aeabi_dadd+0x564>
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	dd00      	ble.n	80014f0 <__aeabi_dadd+0x29c>
 80014ee:	e183      	b.n	80017f8 <__aeabi_dadd+0x5a4>
 80014f0:	2420      	movs	r4, #32
 80014f2:	0005      	movs	r5, r0
 80014f4:	1ae4      	subs	r4, r4, r3
 80014f6:	000f      	movs	r7, r1
 80014f8:	40dd      	lsrs	r5, r3
 80014fa:	40d9      	lsrs	r1, r3
 80014fc:	40a0      	lsls	r0, r4
 80014fe:	4643      	mov	r3, r8
 8001500:	40a7      	lsls	r7, r4
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	1e44      	subs	r4, r0, #1
 8001506:	41a0      	sbcs	r0, r4
 8001508:	4698      	mov	r8, r3
 800150a:	432f      	orrs	r7, r5
 800150c:	4338      	orrs	r0, r7
 800150e:	1a17      	subs	r7, r2, r0
 8001510:	42ba      	cmp	r2, r7
 8001512:	4192      	sbcs	r2, r2
 8001514:	4643      	mov	r3, r8
 8001516:	4252      	negs	r2, r2
 8001518:	1a99      	subs	r1, r3, r2
 800151a:	4664      	mov	r4, ip
 800151c:	0035      	movs	r5, r6
 800151e:	e6ca      	b.n	80012b6 <__aeabi_dadd+0x62>
 8001520:	2207      	movs	r2, #7
 8001522:	403a      	ands	r2, r7
 8001524:	2a00      	cmp	r2, #0
 8001526:	d000      	beq.n	800152a <__aeabi_dadd+0x2d6>
 8001528:	e6f6      	b.n	8001318 <__aeabi_dadd+0xc4>
 800152a:	074b      	lsls	r3, r1, #29
 800152c:	08ca      	lsrs	r2, r1, #3
 800152e:	4948      	ldr	r1, [pc, #288]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001530:	08ff      	lsrs	r7, r7, #3
 8001532:	433b      	orrs	r3, r7
 8001534:	428d      	cmp	r5, r1
 8001536:	d196      	bne.n	8001466 <__aeabi_dadd+0x212>
 8001538:	0019      	movs	r1, r3
 800153a:	4311      	orrs	r1, r2
 800153c:	d100      	bne.n	8001540 <__aeabi_dadd+0x2ec>
 800153e:	e19e      	b.n	800187e <__aeabi_dadd+0x62a>
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	0309      	lsls	r1, r1, #12
 8001544:	430a      	orrs	r2, r1
 8001546:	0312      	lsls	r2, r2, #12
 8001548:	0b12      	lsrs	r2, r2, #12
 800154a:	4d41      	ldr	r5, [pc, #260]	; (8001650 <__aeabi_dadd+0x3fc>)
 800154c:	e78f      	b.n	800146e <__aeabi_dadd+0x21a>
 800154e:	0015      	movs	r5, r2
 8001550:	2200      	movs	r2, #0
 8001552:	2300      	movs	r3, #0
 8001554:	e78b      	b.n	800146e <__aeabi_dadd+0x21a>
 8001556:	2b00      	cmp	r3, #0
 8001558:	d000      	beq.n	800155c <__aeabi_dadd+0x308>
 800155a:	e0c7      	b.n	80016ec <__aeabi_dadd+0x498>
 800155c:	1c6b      	adds	r3, r5, #1
 800155e:	055f      	lsls	r7, r3, #21
 8001560:	0d7f      	lsrs	r7, r7, #21
 8001562:	2f01      	cmp	r7, #1
 8001564:	dc00      	bgt.n	8001568 <__aeabi_dadd+0x314>
 8001566:	e0f1      	b.n	800174c <__aeabi_dadd+0x4f8>
 8001568:	4d39      	ldr	r5, [pc, #228]	; (8001650 <__aeabi_dadd+0x3fc>)
 800156a:	42ab      	cmp	r3, r5
 800156c:	d100      	bne.n	8001570 <__aeabi_dadd+0x31c>
 800156e:	e0b9      	b.n	80016e4 <__aeabi_dadd+0x490>
 8001570:	1885      	adds	r5, r0, r2
 8001572:	000a      	movs	r2, r1
 8001574:	4285      	cmp	r5, r0
 8001576:	4189      	sbcs	r1, r1
 8001578:	4442      	add	r2, r8
 800157a:	4249      	negs	r1, r1
 800157c:	1851      	adds	r1, r2, r1
 800157e:	2207      	movs	r2, #7
 8001580:	07cf      	lsls	r7, r1, #31
 8001582:	086d      	lsrs	r5, r5, #1
 8001584:	432f      	orrs	r7, r5
 8001586:	0849      	lsrs	r1, r1, #1
 8001588:	403a      	ands	r2, r7
 800158a:	001d      	movs	r5, r3
 800158c:	e6c2      	b.n	8001314 <__aeabi_dadd+0xc0>
 800158e:	2207      	movs	r2, #7
 8001590:	4930      	ldr	r1, [pc, #192]	; (8001654 <__aeabi_dadd+0x400>)
 8001592:	1aed      	subs	r5, r5, r3
 8001594:	4031      	ands	r1, r6
 8001596:	403a      	ands	r2, r7
 8001598:	e6bc      	b.n	8001314 <__aeabi_dadd+0xc0>
 800159a:	003e      	movs	r6, r7
 800159c:	3828      	subs	r0, #40	; 0x28
 800159e:	4086      	lsls	r6, r0
 80015a0:	2700      	movs	r7, #0
 80015a2:	e69f      	b.n	80012e4 <__aeabi_dadd+0x90>
 80015a4:	0038      	movs	r0, r7
 80015a6:	f001 fcc9 	bl	8002f3c <__clzsi2>
 80015aa:	3020      	adds	r0, #32
 80015ac:	e68e      	b.n	80012cc <__aeabi_dadd+0x78>
 80015ae:	4643      	mov	r3, r8
 80015b0:	4313      	orrs	r3, r2
 80015b2:	001f      	movs	r7, r3
 80015b4:	1e7a      	subs	r2, r7, #1
 80015b6:	4197      	sbcs	r7, r2
 80015b8:	1bc7      	subs	r7, r0, r7
 80015ba:	42b8      	cmp	r0, r7
 80015bc:	4180      	sbcs	r0, r0
 80015be:	4240      	negs	r0, r0
 80015c0:	1a09      	subs	r1, r1, r0
 80015c2:	e678      	b.n	80012b6 <__aeabi_dadd+0x62>
 80015c4:	000e      	movs	r6, r1
 80015c6:	003b      	movs	r3, r7
 80015c8:	4306      	orrs	r6, r0
 80015ca:	4313      	orrs	r3, r2
 80015cc:	2d00      	cmp	r5, #0
 80015ce:	d161      	bne.n	8001694 <__aeabi_dadd+0x440>
 80015d0:	2e00      	cmp	r6, #0
 80015d2:	d000      	beq.n	80015d6 <__aeabi_dadd+0x382>
 80015d4:	e0f4      	b.n	80017c0 <__aeabi_dadd+0x56c>
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x388>
 80015da:	e11b      	b.n	8001814 <__aeabi_dadd+0x5c0>
 80015dc:	4664      	mov	r4, ip
 80015de:	0039      	movs	r1, r7
 80015e0:	0010      	movs	r0, r2
 80015e2:	e739      	b.n	8001458 <__aeabi_dadd+0x204>
 80015e4:	4f1a      	ldr	r7, [pc, #104]	; (8001650 <__aeabi_dadd+0x3fc>)
 80015e6:	42bb      	cmp	r3, r7
 80015e8:	d07a      	beq.n	80016e0 <__aeabi_dadd+0x48c>
 80015ea:	0033      	movs	r3, r6
 80015ec:	e6ff      	b.n	80013ee <__aeabi_dadd+0x19a>
 80015ee:	0030      	movs	r0, r6
 80015f0:	3d1f      	subs	r5, #31
 80015f2:	40e8      	lsrs	r0, r5
 80015f4:	2b20      	cmp	r3, #32
 80015f6:	d003      	beq.n	8001600 <__aeabi_dadd+0x3ac>
 80015f8:	2140      	movs	r1, #64	; 0x40
 80015fa:	1acb      	subs	r3, r1, r3
 80015fc:	409e      	lsls	r6, r3
 80015fe:	4337      	orrs	r7, r6
 8001600:	1e7b      	subs	r3, r7, #1
 8001602:	419f      	sbcs	r7, r3
 8001604:	2207      	movs	r2, #7
 8001606:	4307      	orrs	r7, r0
 8001608:	403a      	ands	r2, r7
 800160a:	2100      	movs	r1, #0
 800160c:	2500      	movs	r5, #0
 800160e:	e789      	b.n	8001524 <__aeabi_dadd+0x2d0>
 8001610:	1a17      	subs	r7, r2, r0
 8001612:	4643      	mov	r3, r8
 8001614:	42ba      	cmp	r2, r7
 8001616:	41b6      	sbcs	r6, r6
 8001618:	1a59      	subs	r1, r3, r1
 800161a:	4276      	negs	r6, r6
 800161c:	1b8e      	subs	r6, r1, r6
 800161e:	4664      	mov	r4, ip
 8001620:	e64e      	b.n	80012c0 <__aeabi_dadd+0x6c>
 8001622:	2b1f      	cmp	r3, #31
 8001624:	dd00      	ble.n	8001628 <__aeabi_dadd+0x3d4>
 8001626:	e0ad      	b.n	8001784 <__aeabi_dadd+0x530>
 8001628:	2620      	movs	r6, #32
 800162a:	4647      	mov	r7, r8
 800162c:	1af6      	subs	r6, r6, r3
 800162e:	40b7      	lsls	r7, r6
 8001630:	46b9      	mov	r9, r7
 8001632:	0017      	movs	r7, r2
 8001634:	46b2      	mov	sl, r6
 8001636:	40df      	lsrs	r7, r3
 8001638:	464e      	mov	r6, r9
 800163a:	433e      	orrs	r6, r7
 800163c:	0037      	movs	r7, r6
 800163e:	4656      	mov	r6, sl
 8001640:	40b2      	lsls	r2, r6
 8001642:	1e56      	subs	r6, r2, #1
 8001644:	41b2      	sbcs	r2, r6
 8001646:	4317      	orrs	r7, r2
 8001648:	4642      	mov	r2, r8
 800164a:	40da      	lsrs	r2, r3
 800164c:	1889      	adds	r1, r1, r2
 800164e:	e6ae      	b.n	80013ae <__aeabi_dadd+0x15a>
 8001650:	000007ff 	.word	0x000007ff
 8001654:	ff7fffff 	.word	0xff7fffff
 8001658:	800fffff 	.word	0x800fffff
 800165c:	2620      	movs	r6, #32
 800165e:	4647      	mov	r7, r8
 8001660:	1af6      	subs	r6, r6, r3
 8001662:	40b7      	lsls	r7, r6
 8001664:	46b9      	mov	r9, r7
 8001666:	0017      	movs	r7, r2
 8001668:	46b2      	mov	sl, r6
 800166a:	40df      	lsrs	r7, r3
 800166c:	464e      	mov	r6, r9
 800166e:	433e      	orrs	r6, r7
 8001670:	0037      	movs	r7, r6
 8001672:	4656      	mov	r6, sl
 8001674:	40b2      	lsls	r2, r6
 8001676:	1e56      	subs	r6, r2, #1
 8001678:	41b2      	sbcs	r2, r6
 800167a:	4317      	orrs	r7, r2
 800167c:	4642      	mov	r2, r8
 800167e:	40da      	lsrs	r2, r3
 8001680:	1a89      	subs	r1, r1, r2
 8001682:	e799      	b.n	80015b8 <__aeabi_dadd+0x364>
 8001684:	4c7f      	ldr	r4, [pc, #508]	; (8001884 <__aeabi_dadd+0x630>)
 8001686:	42a6      	cmp	r6, r4
 8001688:	d05b      	beq.n	8001742 <__aeabi_dadd+0x4ee>
 800168a:	2480      	movs	r4, #128	; 0x80
 800168c:	0424      	lsls	r4, r4, #16
 800168e:	425b      	negs	r3, r3
 8001690:	4321      	orrs	r1, r4
 8001692:	e727      	b.n	80014e4 <__aeabi_dadd+0x290>
 8001694:	2e00      	cmp	r6, #0
 8001696:	d10c      	bne.n	80016b2 <__aeabi_dadd+0x45e>
 8001698:	2b00      	cmp	r3, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0x44a>
 800169c:	e0cb      	b.n	8001836 <__aeabi_dadd+0x5e2>
 800169e:	4664      	mov	r4, ip
 80016a0:	0039      	movs	r1, r7
 80016a2:	0010      	movs	r0, r2
 80016a4:	4d77      	ldr	r5, [pc, #476]	; (8001884 <__aeabi_dadd+0x630>)
 80016a6:	e6d7      	b.n	8001458 <__aeabi_dadd+0x204>
 80016a8:	4f76      	ldr	r7, [pc, #472]	; (8001884 <__aeabi_dadd+0x630>)
 80016aa:	42bb      	cmp	r3, r7
 80016ac:	d018      	beq.n	80016e0 <__aeabi_dadd+0x48c>
 80016ae:	0033      	movs	r3, r6
 80016b0:	e675      	b.n	800139e <__aeabi_dadd+0x14a>
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d014      	beq.n	80016e0 <__aeabi_dadd+0x48c>
 80016b6:	074b      	lsls	r3, r1, #29
 80016b8:	08c0      	lsrs	r0, r0, #3
 80016ba:	4318      	orrs	r0, r3
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	08c9      	lsrs	r1, r1, #3
 80016c0:	031b      	lsls	r3, r3, #12
 80016c2:	4219      	tst	r1, r3
 80016c4:	d007      	beq.n	80016d6 <__aeabi_dadd+0x482>
 80016c6:	08fc      	lsrs	r4, r7, #3
 80016c8:	421c      	tst	r4, r3
 80016ca:	d104      	bne.n	80016d6 <__aeabi_dadd+0x482>
 80016cc:	0779      	lsls	r1, r7, #29
 80016ce:	08d0      	lsrs	r0, r2, #3
 80016d0:	4308      	orrs	r0, r1
 80016d2:	46e1      	mov	r9, ip
 80016d4:	0021      	movs	r1, r4
 80016d6:	464c      	mov	r4, r9
 80016d8:	0f42      	lsrs	r2, r0, #29
 80016da:	00c9      	lsls	r1, r1, #3
 80016dc:	4311      	orrs	r1, r2
 80016de:	00c0      	lsls	r0, r0, #3
 80016e0:	4d68      	ldr	r5, [pc, #416]	; (8001884 <__aeabi_dadd+0x630>)
 80016e2:	e6b9      	b.n	8001458 <__aeabi_dadd+0x204>
 80016e4:	001d      	movs	r5, r3
 80016e6:	2200      	movs	r2, #0
 80016e8:	2300      	movs	r3, #0
 80016ea:	e6c0      	b.n	800146e <__aeabi_dadd+0x21a>
 80016ec:	2d00      	cmp	r5, #0
 80016ee:	d15b      	bne.n	80017a8 <__aeabi_dadd+0x554>
 80016f0:	000d      	movs	r5, r1
 80016f2:	4305      	orrs	r5, r0
 80016f4:	d100      	bne.n	80016f8 <__aeabi_dadd+0x4a4>
 80016f6:	e6e2      	b.n	80014be <__aeabi_dadd+0x26a>
 80016f8:	1c5d      	adds	r5, r3, #1
 80016fa:	d100      	bne.n	80016fe <__aeabi_dadd+0x4aa>
 80016fc:	e0b0      	b.n	8001860 <__aeabi_dadd+0x60c>
 80016fe:	4d61      	ldr	r5, [pc, #388]	; (8001884 <__aeabi_dadd+0x630>)
 8001700:	42ae      	cmp	r6, r5
 8001702:	d01f      	beq.n	8001744 <__aeabi_dadd+0x4f0>
 8001704:	43db      	mvns	r3, r3
 8001706:	2b38      	cmp	r3, #56	; 0x38
 8001708:	dc71      	bgt.n	80017ee <__aeabi_dadd+0x59a>
 800170a:	2b1f      	cmp	r3, #31
 800170c:	dd00      	ble.n	8001710 <__aeabi_dadd+0x4bc>
 800170e:	e096      	b.n	800183e <__aeabi_dadd+0x5ea>
 8001710:	2520      	movs	r5, #32
 8001712:	000f      	movs	r7, r1
 8001714:	1aed      	subs	r5, r5, r3
 8001716:	40af      	lsls	r7, r5
 8001718:	46b9      	mov	r9, r7
 800171a:	0007      	movs	r7, r0
 800171c:	46aa      	mov	sl, r5
 800171e:	40df      	lsrs	r7, r3
 8001720:	464d      	mov	r5, r9
 8001722:	433d      	orrs	r5, r7
 8001724:	002f      	movs	r7, r5
 8001726:	4655      	mov	r5, sl
 8001728:	40a8      	lsls	r0, r5
 800172a:	40d9      	lsrs	r1, r3
 800172c:	1e45      	subs	r5, r0, #1
 800172e:	41a8      	sbcs	r0, r5
 8001730:	4488      	add	r8, r1
 8001732:	4307      	orrs	r7, r0
 8001734:	18bf      	adds	r7, r7, r2
 8001736:	4297      	cmp	r7, r2
 8001738:	4192      	sbcs	r2, r2
 800173a:	4251      	negs	r1, r2
 800173c:	4441      	add	r1, r8
 800173e:	0035      	movs	r5, r6
 8001740:	e63a      	b.n	80013b8 <__aeabi_dadd+0x164>
 8001742:	4664      	mov	r4, ip
 8001744:	0035      	movs	r5, r6
 8001746:	4641      	mov	r1, r8
 8001748:	0010      	movs	r0, r2
 800174a:	e685      	b.n	8001458 <__aeabi_dadd+0x204>
 800174c:	000b      	movs	r3, r1
 800174e:	4303      	orrs	r3, r0
 8001750:	2d00      	cmp	r5, #0
 8001752:	d000      	beq.n	8001756 <__aeabi_dadd+0x502>
 8001754:	e663      	b.n	800141e <__aeabi_dadd+0x1ca>
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f5      	beq.n	8001746 <__aeabi_dadd+0x4f2>
 800175a:	4643      	mov	r3, r8
 800175c:	4313      	orrs	r3, r2
 800175e:	d100      	bne.n	8001762 <__aeabi_dadd+0x50e>
 8001760:	e67a      	b.n	8001458 <__aeabi_dadd+0x204>
 8001762:	1887      	adds	r7, r0, r2
 8001764:	4287      	cmp	r7, r0
 8001766:	4180      	sbcs	r0, r0
 8001768:	2207      	movs	r2, #7
 800176a:	4441      	add	r1, r8
 800176c:	4240      	negs	r0, r0
 800176e:	1809      	adds	r1, r1, r0
 8001770:	403a      	ands	r2, r7
 8001772:	020b      	lsls	r3, r1, #8
 8001774:	d400      	bmi.n	8001778 <__aeabi_dadd+0x524>
 8001776:	e6d5      	b.n	8001524 <__aeabi_dadd+0x2d0>
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <__aeabi_dadd+0x634>)
 800177a:	3501      	adds	r5, #1
 800177c:	4019      	ands	r1, r3
 800177e:	e5c9      	b.n	8001314 <__aeabi_dadd+0xc0>
 8001780:	0038      	movs	r0, r7
 8001782:	e669      	b.n	8001458 <__aeabi_dadd+0x204>
 8001784:	001e      	movs	r6, r3
 8001786:	4647      	mov	r7, r8
 8001788:	3e20      	subs	r6, #32
 800178a:	40f7      	lsrs	r7, r6
 800178c:	46bc      	mov	ip, r7
 800178e:	2b20      	cmp	r3, #32
 8001790:	d004      	beq.n	800179c <__aeabi_dadd+0x548>
 8001792:	2640      	movs	r6, #64	; 0x40
 8001794:	1af3      	subs	r3, r6, r3
 8001796:	4646      	mov	r6, r8
 8001798:	409e      	lsls	r6, r3
 800179a:	4332      	orrs	r2, r6
 800179c:	0017      	movs	r7, r2
 800179e:	4663      	mov	r3, ip
 80017a0:	1e7a      	subs	r2, r7, #1
 80017a2:	4197      	sbcs	r7, r2
 80017a4:	431f      	orrs	r7, r3
 80017a6:	e602      	b.n	80013ae <__aeabi_dadd+0x15a>
 80017a8:	4d36      	ldr	r5, [pc, #216]	; (8001884 <__aeabi_dadd+0x630>)
 80017aa:	42ae      	cmp	r6, r5
 80017ac:	d0ca      	beq.n	8001744 <__aeabi_dadd+0x4f0>
 80017ae:	2580      	movs	r5, #128	; 0x80
 80017b0:	042d      	lsls	r5, r5, #16
 80017b2:	425b      	negs	r3, r3
 80017b4:	4329      	orrs	r1, r5
 80017b6:	e7a6      	b.n	8001706 <__aeabi_dadd+0x4b2>
 80017b8:	4308      	orrs	r0, r1
 80017ba:	1e41      	subs	r1, r0, #1
 80017bc:	4188      	sbcs	r0, r1
 80017be:	e6a6      	b.n	800150e <__aeabi_dadd+0x2ba>
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d100      	bne.n	80017c6 <__aeabi_dadd+0x572>
 80017c4:	e648      	b.n	8001458 <__aeabi_dadd+0x204>
 80017c6:	1a87      	subs	r7, r0, r2
 80017c8:	4643      	mov	r3, r8
 80017ca:	42b8      	cmp	r0, r7
 80017cc:	41b6      	sbcs	r6, r6
 80017ce:	1acb      	subs	r3, r1, r3
 80017d0:	4276      	negs	r6, r6
 80017d2:	1b9e      	subs	r6, r3, r6
 80017d4:	0233      	lsls	r3, r6, #8
 80017d6:	d54b      	bpl.n	8001870 <__aeabi_dadd+0x61c>
 80017d8:	1a17      	subs	r7, r2, r0
 80017da:	4643      	mov	r3, r8
 80017dc:	42ba      	cmp	r2, r7
 80017de:	4192      	sbcs	r2, r2
 80017e0:	1a59      	subs	r1, r3, r1
 80017e2:	4252      	negs	r2, r2
 80017e4:	1a89      	subs	r1, r1, r2
 80017e6:	2207      	movs	r2, #7
 80017e8:	4664      	mov	r4, ip
 80017ea:	403a      	ands	r2, r7
 80017ec:	e592      	b.n	8001314 <__aeabi_dadd+0xc0>
 80017ee:	4301      	orrs	r1, r0
 80017f0:	000f      	movs	r7, r1
 80017f2:	1e79      	subs	r1, r7, #1
 80017f4:	418f      	sbcs	r7, r1
 80017f6:	e79d      	b.n	8001734 <__aeabi_dadd+0x4e0>
 80017f8:	001c      	movs	r4, r3
 80017fa:	000f      	movs	r7, r1
 80017fc:	3c20      	subs	r4, #32
 80017fe:	40e7      	lsrs	r7, r4
 8001800:	2b20      	cmp	r3, #32
 8001802:	d003      	beq.n	800180c <__aeabi_dadd+0x5b8>
 8001804:	2440      	movs	r4, #64	; 0x40
 8001806:	1ae3      	subs	r3, r4, r3
 8001808:	4099      	lsls	r1, r3
 800180a:	4308      	orrs	r0, r1
 800180c:	1e41      	subs	r1, r0, #1
 800180e:	4188      	sbcs	r0, r1
 8001810:	4338      	orrs	r0, r7
 8001812:	e67c      	b.n	800150e <__aeabi_dadd+0x2ba>
 8001814:	2200      	movs	r2, #0
 8001816:	2400      	movs	r4, #0
 8001818:	e625      	b.n	8001466 <__aeabi_dadd+0x212>
 800181a:	1a17      	subs	r7, r2, r0
 800181c:	4643      	mov	r3, r8
 800181e:	42ba      	cmp	r2, r7
 8001820:	4192      	sbcs	r2, r2
 8001822:	1a59      	subs	r1, r3, r1
 8001824:	4252      	negs	r2, r2
 8001826:	1a89      	subs	r1, r1, r2
 8001828:	4664      	mov	r4, ip
 800182a:	0035      	movs	r5, r6
 800182c:	e543      	b.n	80012b6 <__aeabi_dadd+0x62>
 800182e:	4641      	mov	r1, r8
 8001830:	0010      	movs	r0, r2
 8001832:	4d14      	ldr	r5, [pc, #80]	; (8001884 <__aeabi_dadd+0x630>)
 8001834:	e610      	b.n	8001458 <__aeabi_dadd+0x204>
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	2400      	movs	r4, #0
 800183a:	0312      	lsls	r2, r2, #12
 800183c:	e680      	b.n	8001540 <__aeabi_dadd+0x2ec>
 800183e:	001d      	movs	r5, r3
 8001840:	000f      	movs	r7, r1
 8001842:	3d20      	subs	r5, #32
 8001844:	40ef      	lsrs	r7, r5
 8001846:	46bc      	mov	ip, r7
 8001848:	2b20      	cmp	r3, #32
 800184a:	d003      	beq.n	8001854 <__aeabi_dadd+0x600>
 800184c:	2540      	movs	r5, #64	; 0x40
 800184e:	1aeb      	subs	r3, r5, r3
 8001850:	4099      	lsls	r1, r3
 8001852:	4308      	orrs	r0, r1
 8001854:	0007      	movs	r7, r0
 8001856:	4663      	mov	r3, ip
 8001858:	1e78      	subs	r0, r7, #1
 800185a:	4187      	sbcs	r7, r0
 800185c:	431f      	orrs	r7, r3
 800185e:	e769      	b.n	8001734 <__aeabi_dadd+0x4e0>
 8001860:	1887      	adds	r7, r0, r2
 8001862:	4297      	cmp	r7, r2
 8001864:	419b      	sbcs	r3, r3
 8001866:	4441      	add	r1, r8
 8001868:	425b      	negs	r3, r3
 800186a:	18c9      	adds	r1, r1, r3
 800186c:	0035      	movs	r5, r6
 800186e:	e5a3      	b.n	80013b8 <__aeabi_dadd+0x164>
 8001870:	003b      	movs	r3, r7
 8001872:	4333      	orrs	r3, r6
 8001874:	d0ce      	beq.n	8001814 <__aeabi_dadd+0x5c0>
 8001876:	2207      	movs	r2, #7
 8001878:	0031      	movs	r1, r6
 800187a:	403a      	ands	r2, r7
 800187c:	e652      	b.n	8001524 <__aeabi_dadd+0x2d0>
 800187e:	2300      	movs	r3, #0
 8001880:	001a      	movs	r2, r3
 8001882:	e5f4      	b.n	800146e <__aeabi_dadd+0x21a>
 8001884:	000007ff 	.word	0x000007ff
 8001888:	ff7fffff 	.word	0xff7fffff

0800188c <__aeabi_ddiv>:
 800188c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188e:	4657      	mov	r7, sl
 8001890:	46de      	mov	lr, fp
 8001892:	464e      	mov	r6, r9
 8001894:	4645      	mov	r5, r8
 8001896:	b5e0      	push	{r5, r6, r7, lr}
 8001898:	4683      	mov	fp, r0
 800189a:	0007      	movs	r7, r0
 800189c:	030e      	lsls	r6, r1, #12
 800189e:	0048      	lsls	r0, r1, #1
 80018a0:	b085      	sub	sp, #20
 80018a2:	4692      	mov	sl, r2
 80018a4:	001c      	movs	r4, r3
 80018a6:	0b36      	lsrs	r6, r6, #12
 80018a8:	0d40      	lsrs	r0, r0, #21
 80018aa:	0fcd      	lsrs	r5, r1, #31
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d100      	bne.n	80018b2 <__aeabi_ddiv+0x26>
 80018b0:	e09d      	b.n	80019ee <__aeabi_ddiv+0x162>
 80018b2:	4b95      	ldr	r3, [pc, #596]	; (8001b08 <__aeabi_ddiv+0x27c>)
 80018b4:	4298      	cmp	r0, r3
 80018b6:	d039      	beq.n	800192c <__aeabi_ddiv+0xa0>
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	00f6      	lsls	r6, r6, #3
 80018bc:	041b      	lsls	r3, r3, #16
 80018be:	431e      	orrs	r6, r3
 80018c0:	4a92      	ldr	r2, [pc, #584]	; (8001b0c <__aeabi_ddiv+0x280>)
 80018c2:	0f7b      	lsrs	r3, r7, #29
 80018c4:	4333      	orrs	r3, r6
 80018c6:	4699      	mov	r9, r3
 80018c8:	4694      	mov	ip, r2
 80018ca:	0003      	movs	r3, r0
 80018cc:	4463      	add	r3, ip
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	2600      	movs	r6, #0
 80018d4:	00ff      	lsls	r7, r7, #3
 80018d6:	9302      	str	r3, [sp, #8]
 80018d8:	0323      	lsls	r3, r4, #12
 80018da:	0b1b      	lsrs	r3, r3, #12
 80018dc:	4698      	mov	r8, r3
 80018de:	0063      	lsls	r3, r4, #1
 80018e0:	0fe4      	lsrs	r4, r4, #31
 80018e2:	4652      	mov	r2, sl
 80018e4:	0d5b      	lsrs	r3, r3, #21
 80018e6:	9401      	str	r4, [sp, #4]
 80018e8:	d100      	bne.n	80018ec <__aeabi_ddiv+0x60>
 80018ea:	e0b3      	b.n	8001a54 <__aeabi_ddiv+0x1c8>
 80018ec:	4986      	ldr	r1, [pc, #536]	; (8001b08 <__aeabi_ddiv+0x27c>)
 80018ee:	428b      	cmp	r3, r1
 80018f0:	d100      	bne.n	80018f4 <__aeabi_ddiv+0x68>
 80018f2:	e09e      	b.n	8001a32 <__aeabi_ddiv+0x1a6>
 80018f4:	4642      	mov	r2, r8
 80018f6:	00d1      	lsls	r1, r2, #3
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	0412      	lsls	r2, r2, #16
 80018fc:	430a      	orrs	r2, r1
 80018fe:	4651      	mov	r1, sl
 8001900:	0f49      	lsrs	r1, r1, #29
 8001902:	4311      	orrs	r1, r2
 8001904:	468b      	mov	fp, r1
 8001906:	4981      	ldr	r1, [pc, #516]	; (8001b0c <__aeabi_ddiv+0x280>)
 8001908:	4652      	mov	r2, sl
 800190a:	468c      	mov	ip, r1
 800190c:	9900      	ldr	r1, [sp, #0]
 800190e:	4463      	add	r3, ip
 8001910:	1acb      	subs	r3, r1, r3
 8001912:	2100      	movs	r1, #0
 8001914:	00d2      	lsls	r2, r2, #3
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	002b      	movs	r3, r5
 800191a:	4063      	eors	r3, r4
 800191c:	469a      	mov	sl, r3
 800191e:	2e0f      	cmp	r6, #15
 8001920:	d900      	bls.n	8001924 <__aeabi_ddiv+0x98>
 8001922:	e105      	b.n	8001b30 <__aeabi_ddiv+0x2a4>
 8001924:	4b7a      	ldr	r3, [pc, #488]	; (8001b10 <__aeabi_ddiv+0x284>)
 8001926:	00b6      	lsls	r6, r6, #2
 8001928:	599b      	ldr	r3, [r3, r6]
 800192a:	469f      	mov	pc, r3
 800192c:	465b      	mov	r3, fp
 800192e:	4333      	orrs	r3, r6
 8001930:	4699      	mov	r9, r3
 8001932:	d000      	beq.n	8001936 <__aeabi_ddiv+0xaa>
 8001934:	e0b8      	b.n	8001aa8 <__aeabi_ddiv+0x21c>
 8001936:	2302      	movs	r3, #2
 8001938:	2608      	movs	r6, #8
 800193a:	2700      	movs	r7, #0
 800193c:	9000      	str	r0, [sp, #0]
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	e7ca      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001942:	46cb      	mov	fp, r9
 8001944:	003a      	movs	r2, r7
 8001946:	9902      	ldr	r1, [sp, #8]
 8001948:	9501      	str	r5, [sp, #4]
 800194a:	9b01      	ldr	r3, [sp, #4]
 800194c:	469a      	mov	sl, r3
 800194e:	2902      	cmp	r1, #2
 8001950:	d027      	beq.n	80019a2 <__aeabi_ddiv+0x116>
 8001952:	2903      	cmp	r1, #3
 8001954:	d100      	bne.n	8001958 <__aeabi_ddiv+0xcc>
 8001956:	e280      	b.n	8001e5a <__aeabi_ddiv+0x5ce>
 8001958:	2901      	cmp	r1, #1
 800195a:	d044      	beq.n	80019e6 <__aeabi_ddiv+0x15a>
 800195c:	496d      	ldr	r1, [pc, #436]	; (8001b14 <__aeabi_ddiv+0x288>)
 800195e:	9b00      	ldr	r3, [sp, #0]
 8001960:	468c      	mov	ip, r1
 8001962:	4463      	add	r3, ip
 8001964:	001c      	movs	r4, r3
 8001966:	2c00      	cmp	r4, #0
 8001968:	dd38      	ble.n	80019dc <__aeabi_ddiv+0x150>
 800196a:	0753      	lsls	r3, r2, #29
 800196c:	d000      	beq.n	8001970 <__aeabi_ddiv+0xe4>
 800196e:	e213      	b.n	8001d98 <__aeabi_ddiv+0x50c>
 8001970:	08d2      	lsrs	r2, r2, #3
 8001972:	465b      	mov	r3, fp
 8001974:	01db      	lsls	r3, r3, #7
 8001976:	d509      	bpl.n	800198c <__aeabi_ddiv+0x100>
 8001978:	4659      	mov	r1, fp
 800197a:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <__aeabi_ddiv+0x28c>)
 800197c:	4019      	ands	r1, r3
 800197e:	468b      	mov	fp, r1
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	00c9      	lsls	r1, r1, #3
 8001984:	468c      	mov	ip, r1
 8001986:	9b00      	ldr	r3, [sp, #0]
 8001988:	4463      	add	r3, ip
 800198a:	001c      	movs	r4, r3
 800198c:	4b63      	ldr	r3, [pc, #396]	; (8001b1c <__aeabi_ddiv+0x290>)
 800198e:	429c      	cmp	r4, r3
 8001990:	dc07      	bgt.n	80019a2 <__aeabi_ddiv+0x116>
 8001992:	465b      	mov	r3, fp
 8001994:	0564      	lsls	r4, r4, #21
 8001996:	075f      	lsls	r7, r3, #29
 8001998:	025b      	lsls	r3, r3, #9
 800199a:	4317      	orrs	r7, r2
 800199c:	0b1b      	lsrs	r3, r3, #12
 800199e:	0d62      	lsrs	r2, r4, #21
 80019a0:	e002      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 80019a2:	2300      	movs	r3, #0
 80019a4:	2700      	movs	r7, #0
 80019a6:	4a58      	ldr	r2, [pc, #352]	; (8001b08 <__aeabi_ddiv+0x27c>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	031b      	lsls	r3, r3, #12
 80019ac:	0b1c      	lsrs	r4, r3, #12
 80019ae:	0d0b      	lsrs	r3, r1, #20
 80019b0:	051b      	lsls	r3, r3, #20
 80019b2:	4323      	orrs	r3, r4
 80019b4:	0514      	lsls	r4, r2, #20
 80019b6:	4a5a      	ldr	r2, [pc, #360]	; (8001b20 <__aeabi_ddiv+0x294>)
 80019b8:	0038      	movs	r0, r7
 80019ba:	4013      	ands	r3, r2
 80019bc:	431c      	orrs	r4, r3
 80019be:	4653      	mov	r3, sl
 80019c0:	0064      	lsls	r4, r4, #1
 80019c2:	07db      	lsls	r3, r3, #31
 80019c4:	0864      	lsrs	r4, r4, #1
 80019c6:	431c      	orrs	r4, r3
 80019c8:	0021      	movs	r1, r4
 80019ca:	b005      	add	sp, #20
 80019cc:	bc3c      	pop	{r2, r3, r4, r5}
 80019ce:	4690      	mov	r8, r2
 80019d0:	4699      	mov	r9, r3
 80019d2:	46a2      	mov	sl, r4
 80019d4:	46ab      	mov	fp, r5
 80019d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d8:	2201      	movs	r2, #1
 80019da:	4252      	negs	r2, r2
 80019dc:	2301      	movs	r3, #1
 80019de:	1b1b      	subs	r3, r3, r4
 80019e0:	2b38      	cmp	r3, #56	; 0x38
 80019e2:	dc00      	bgt.n	80019e6 <__aeabi_ddiv+0x15a>
 80019e4:	e1ad      	b.n	8001d42 <__aeabi_ddiv+0x4b6>
 80019e6:	2200      	movs	r2, #0
 80019e8:	2300      	movs	r3, #0
 80019ea:	2700      	movs	r7, #0
 80019ec:	e7dc      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 80019ee:	465b      	mov	r3, fp
 80019f0:	4333      	orrs	r3, r6
 80019f2:	4699      	mov	r9, r3
 80019f4:	d05e      	beq.n	8001ab4 <__aeabi_ddiv+0x228>
 80019f6:	2e00      	cmp	r6, #0
 80019f8:	d100      	bne.n	80019fc <__aeabi_ddiv+0x170>
 80019fa:	e18a      	b.n	8001d12 <__aeabi_ddiv+0x486>
 80019fc:	0030      	movs	r0, r6
 80019fe:	f001 fa9d 	bl	8002f3c <__clzsi2>
 8001a02:	0003      	movs	r3, r0
 8001a04:	3b0b      	subs	r3, #11
 8001a06:	2b1c      	cmp	r3, #28
 8001a08:	dd00      	ble.n	8001a0c <__aeabi_ddiv+0x180>
 8001a0a:	e17b      	b.n	8001d04 <__aeabi_ddiv+0x478>
 8001a0c:	221d      	movs	r2, #29
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	465a      	mov	r2, fp
 8001a12:	0001      	movs	r1, r0
 8001a14:	40da      	lsrs	r2, r3
 8001a16:	3908      	subs	r1, #8
 8001a18:	408e      	lsls	r6, r1
 8001a1a:	0013      	movs	r3, r2
 8001a1c:	465f      	mov	r7, fp
 8001a1e:	4333      	orrs	r3, r6
 8001a20:	4699      	mov	r9, r3
 8001a22:	408f      	lsls	r7, r1
 8001a24:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <__aeabi_ddiv+0x298>)
 8001a26:	2600      	movs	r6, #0
 8001a28:	1a1b      	subs	r3, r3, r0
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	e752      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001a32:	4641      	mov	r1, r8
 8001a34:	4653      	mov	r3, sl
 8001a36:	430b      	orrs	r3, r1
 8001a38:	493b      	ldr	r1, [pc, #236]	; (8001b28 <__aeabi_ddiv+0x29c>)
 8001a3a:	469b      	mov	fp, r3
 8001a3c:	468c      	mov	ip, r1
 8001a3e:	9b00      	ldr	r3, [sp, #0]
 8001a40:	4463      	add	r3, ip
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	465b      	mov	r3, fp
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d13b      	bne.n	8001ac2 <__aeabi_ddiv+0x236>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	431e      	orrs	r6, r3
 8001a50:	2102      	movs	r1, #2
 8001a52:	e761      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001a54:	4643      	mov	r3, r8
 8001a56:	4313      	orrs	r3, r2
 8001a58:	469b      	mov	fp, r3
 8001a5a:	d037      	beq.n	8001acc <__aeabi_ddiv+0x240>
 8001a5c:	4643      	mov	r3, r8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d100      	bne.n	8001a64 <__aeabi_ddiv+0x1d8>
 8001a62:	e162      	b.n	8001d2a <__aeabi_ddiv+0x49e>
 8001a64:	4640      	mov	r0, r8
 8001a66:	f001 fa69 	bl	8002f3c <__clzsi2>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	3b0b      	subs	r3, #11
 8001a6e:	2b1c      	cmp	r3, #28
 8001a70:	dd00      	ble.n	8001a74 <__aeabi_ddiv+0x1e8>
 8001a72:	e153      	b.n	8001d1c <__aeabi_ddiv+0x490>
 8001a74:	0002      	movs	r2, r0
 8001a76:	4641      	mov	r1, r8
 8001a78:	3a08      	subs	r2, #8
 8001a7a:	4091      	lsls	r1, r2
 8001a7c:	4688      	mov	r8, r1
 8001a7e:	211d      	movs	r1, #29
 8001a80:	1acb      	subs	r3, r1, r3
 8001a82:	4651      	mov	r1, sl
 8001a84:	40d9      	lsrs	r1, r3
 8001a86:	000b      	movs	r3, r1
 8001a88:	4641      	mov	r1, r8
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	469b      	mov	fp, r3
 8001a8e:	4653      	mov	r3, sl
 8001a90:	4093      	lsls	r3, r2
 8001a92:	001a      	movs	r2, r3
 8001a94:	9b00      	ldr	r3, [sp, #0]
 8001a96:	4925      	ldr	r1, [pc, #148]	; (8001b2c <__aeabi_ddiv+0x2a0>)
 8001a98:	469c      	mov	ip, r3
 8001a9a:	4460      	add	r0, ip
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	468c      	mov	ip, r1
 8001aa0:	4463      	add	r3, ip
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	e737      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	46b1      	mov	r9, r6
 8001aac:	9000      	str	r0, [sp, #0]
 8001aae:	260c      	movs	r6, #12
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	e711      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	2604      	movs	r6, #4
 8001abc:	2700      	movs	r7, #0
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	e70a      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	46c3      	mov	fp, r8
 8001ac6:	431e      	orrs	r6, r3
 8001ac8:	2103      	movs	r1, #3
 8001aca:	e725      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001acc:	3301      	adds	r3, #1
 8001ace:	431e      	orrs	r6, r3
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	e720      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	469a      	mov	sl, r3
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	2700      	movs	r7, #0
 8001ade:	031b      	lsls	r3, r3, #12
 8001ae0:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <__aeabi_ddiv+0x27c>)
 8001ae2:	e761      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	4649      	mov	r1, r9
 8001ae8:	031b      	lsls	r3, r3, #12
 8001aea:	4219      	tst	r1, r3
 8001aec:	d100      	bne.n	8001af0 <__aeabi_ddiv+0x264>
 8001aee:	e0e2      	b.n	8001cb6 <__aeabi_ddiv+0x42a>
 8001af0:	4659      	mov	r1, fp
 8001af2:	4219      	tst	r1, r3
 8001af4:	d000      	beq.n	8001af8 <__aeabi_ddiv+0x26c>
 8001af6:	e0de      	b.n	8001cb6 <__aeabi_ddiv+0x42a>
 8001af8:	430b      	orrs	r3, r1
 8001afa:	031b      	lsls	r3, r3, #12
 8001afc:	0017      	movs	r7, r2
 8001afe:	0b1b      	lsrs	r3, r3, #12
 8001b00:	46a2      	mov	sl, r4
 8001b02:	4a01      	ldr	r2, [pc, #4]	; (8001b08 <__aeabi_ddiv+0x27c>)
 8001b04:	e750      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	000007ff 	.word	0x000007ff
 8001b0c:	fffffc01 	.word	0xfffffc01
 8001b10:	08019064 	.word	0x08019064
 8001b14:	000003ff 	.word	0x000003ff
 8001b18:	feffffff 	.word	0xfeffffff
 8001b1c:	000007fe 	.word	0x000007fe
 8001b20:	800fffff 	.word	0x800fffff
 8001b24:	fffffc0d 	.word	0xfffffc0d
 8001b28:	fffff801 	.word	0xfffff801
 8001b2c:	000003f3 	.word	0x000003f3
 8001b30:	45d9      	cmp	r9, fp
 8001b32:	d900      	bls.n	8001b36 <__aeabi_ddiv+0x2aa>
 8001b34:	e0cb      	b.n	8001cce <__aeabi_ddiv+0x442>
 8001b36:	d100      	bne.n	8001b3a <__aeabi_ddiv+0x2ae>
 8001b38:	e0c6      	b.n	8001cc8 <__aeabi_ddiv+0x43c>
 8001b3a:	003c      	movs	r4, r7
 8001b3c:	4648      	mov	r0, r9
 8001b3e:	2700      	movs	r7, #0
 8001b40:	9b00      	ldr	r3, [sp, #0]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	465b      	mov	r3, fp
 8001b48:	0e16      	lsrs	r6, r2, #24
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	431e      	orrs	r6, r3
 8001b4e:	0213      	lsls	r3, r2, #8
 8001b50:	4698      	mov	r8, r3
 8001b52:	0433      	lsls	r3, r6, #16
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	4699      	mov	r9, r3
 8001b58:	0c31      	lsrs	r1, r6, #16
 8001b5a:	9101      	str	r1, [sp, #4]
 8001b5c:	f7fe fb7e 	bl	800025c <__aeabi_uidivmod>
 8001b60:	464a      	mov	r2, r9
 8001b62:	4342      	muls	r2, r0
 8001b64:	040b      	lsls	r3, r1, #16
 8001b66:	0c21      	lsrs	r1, r4, #16
 8001b68:	0005      	movs	r5, r0
 8001b6a:	4319      	orrs	r1, r3
 8001b6c:	428a      	cmp	r2, r1
 8001b6e:	d907      	bls.n	8001b80 <__aeabi_ddiv+0x2f4>
 8001b70:	1989      	adds	r1, r1, r6
 8001b72:	3d01      	subs	r5, #1
 8001b74:	428e      	cmp	r6, r1
 8001b76:	d803      	bhi.n	8001b80 <__aeabi_ddiv+0x2f4>
 8001b78:	428a      	cmp	r2, r1
 8001b7a:	d901      	bls.n	8001b80 <__aeabi_ddiv+0x2f4>
 8001b7c:	1e85      	subs	r5, r0, #2
 8001b7e:	1989      	adds	r1, r1, r6
 8001b80:	1a88      	subs	r0, r1, r2
 8001b82:	9901      	ldr	r1, [sp, #4]
 8001b84:	f7fe fb6a 	bl	800025c <__aeabi_uidivmod>
 8001b88:	0409      	lsls	r1, r1, #16
 8001b8a:	468c      	mov	ip, r1
 8001b8c:	464a      	mov	r2, r9
 8001b8e:	0421      	lsls	r1, r4, #16
 8001b90:	4664      	mov	r4, ip
 8001b92:	4342      	muls	r2, r0
 8001b94:	0c09      	lsrs	r1, r1, #16
 8001b96:	0003      	movs	r3, r0
 8001b98:	4321      	orrs	r1, r4
 8001b9a:	428a      	cmp	r2, r1
 8001b9c:	d904      	bls.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001b9e:	1989      	adds	r1, r1, r6
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	428e      	cmp	r6, r1
 8001ba4:	d800      	bhi.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001ba6:	e0f1      	b.n	8001d8c <__aeabi_ddiv+0x500>
 8001ba8:	042d      	lsls	r5, r5, #16
 8001baa:	431d      	orrs	r5, r3
 8001bac:	46ab      	mov	fp, r5
 8001bae:	4643      	mov	r3, r8
 8001bb0:	1a89      	subs	r1, r1, r2
 8001bb2:	4642      	mov	r2, r8
 8001bb4:	0c28      	lsrs	r0, r5, #16
 8001bb6:	0412      	lsls	r2, r2, #16
 8001bb8:	0c1d      	lsrs	r5, r3, #16
 8001bba:	465b      	mov	r3, fp
 8001bbc:	0c14      	lsrs	r4, r2, #16
 8001bbe:	0022      	movs	r2, r4
 8001bc0:	041b      	lsls	r3, r3, #16
 8001bc2:	0c1b      	lsrs	r3, r3, #16
 8001bc4:	435a      	muls	r2, r3
 8001bc6:	9403      	str	r4, [sp, #12]
 8001bc8:	436b      	muls	r3, r5
 8001bca:	4344      	muls	r4, r0
 8001bcc:	9502      	str	r5, [sp, #8]
 8001bce:	4368      	muls	r0, r5
 8001bd0:	191b      	adds	r3, r3, r4
 8001bd2:	0c15      	lsrs	r5, r2, #16
 8001bd4:	18eb      	adds	r3, r5, r3
 8001bd6:	429c      	cmp	r4, r3
 8001bd8:	d903      	bls.n	8001be2 <__aeabi_ddiv+0x356>
 8001bda:	2480      	movs	r4, #128	; 0x80
 8001bdc:	0264      	lsls	r4, r4, #9
 8001bde:	46a4      	mov	ip, r4
 8001be0:	4460      	add	r0, ip
 8001be2:	0c1c      	lsrs	r4, r3, #16
 8001be4:	0415      	lsls	r5, r2, #16
 8001be6:	041b      	lsls	r3, r3, #16
 8001be8:	0c2d      	lsrs	r5, r5, #16
 8001bea:	1820      	adds	r0, r4, r0
 8001bec:	195d      	adds	r5, r3, r5
 8001bee:	4281      	cmp	r1, r0
 8001bf0:	d377      	bcc.n	8001ce2 <__aeabi_ddiv+0x456>
 8001bf2:	d073      	beq.n	8001cdc <__aeabi_ddiv+0x450>
 8001bf4:	1a0c      	subs	r4, r1, r0
 8001bf6:	4aa2      	ldr	r2, [pc, #648]	; (8001e80 <__aeabi_ddiv+0x5f4>)
 8001bf8:	1b7d      	subs	r5, r7, r5
 8001bfa:	42af      	cmp	r7, r5
 8001bfc:	41bf      	sbcs	r7, r7
 8001bfe:	4694      	mov	ip, r2
 8001c00:	9b00      	ldr	r3, [sp, #0]
 8001c02:	427f      	negs	r7, r7
 8001c04:	4463      	add	r3, ip
 8001c06:	1be0      	subs	r0, r4, r7
 8001c08:	001c      	movs	r4, r3
 8001c0a:	4286      	cmp	r6, r0
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_ddiv+0x384>
 8001c0e:	e0db      	b.n	8001dc8 <__aeabi_ddiv+0x53c>
 8001c10:	9901      	ldr	r1, [sp, #4]
 8001c12:	f7fe fb23 	bl	800025c <__aeabi_uidivmod>
 8001c16:	464a      	mov	r2, r9
 8001c18:	4342      	muls	r2, r0
 8001c1a:	040b      	lsls	r3, r1, #16
 8001c1c:	0c29      	lsrs	r1, r5, #16
 8001c1e:	0007      	movs	r7, r0
 8001c20:	4319      	orrs	r1, r3
 8001c22:	428a      	cmp	r2, r1
 8001c24:	d907      	bls.n	8001c36 <__aeabi_ddiv+0x3aa>
 8001c26:	1989      	adds	r1, r1, r6
 8001c28:	3f01      	subs	r7, #1
 8001c2a:	428e      	cmp	r6, r1
 8001c2c:	d803      	bhi.n	8001c36 <__aeabi_ddiv+0x3aa>
 8001c2e:	428a      	cmp	r2, r1
 8001c30:	d901      	bls.n	8001c36 <__aeabi_ddiv+0x3aa>
 8001c32:	1e87      	subs	r7, r0, #2
 8001c34:	1989      	adds	r1, r1, r6
 8001c36:	1a88      	subs	r0, r1, r2
 8001c38:	9901      	ldr	r1, [sp, #4]
 8001c3a:	f7fe fb0f 	bl	800025c <__aeabi_uidivmod>
 8001c3e:	0409      	lsls	r1, r1, #16
 8001c40:	464a      	mov	r2, r9
 8001c42:	4689      	mov	r9, r1
 8001c44:	0429      	lsls	r1, r5, #16
 8001c46:	464d      	mov	r5, r9
 8001c48:	4342      	muls	r2, r0
 8001c4a:	0c09      	lsrs	r1, r1, #16
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	4329      	orrs	r1, r5
 8001c50:	428a      	cmp	r2, r1
 8001c52:	d907      	bls.n	8001c64 <__aeabi_ddiv+0x3d8>
 8001c54:	1989      	adds	r1, r1, r6
 8001c56:	3b01      	subs	r3, #1
 8001c58:	428e      	cmp	r6, r1
 8001c5a:	d803      	bhi.n	8001c64 <__aeabi_ddiv+0x3d8>
 8001c5c:	428a      	cmp	r2, r1
 8001c5e:	d901      	bls.n	8001c64 <__aeabi_ddiv+0x3d8>
 8001c60:	1e83      	subs	r3, r0, #2
 8001c62:	1989      	adds	r1, r1, r6
 8001c64:	043f      	lsls	r7, r7, #16
 8001c66:	1a89      	subs	r1, r1, r2
 8001c68:	003a      	movs	r2, r7
 8001c6a:	9f03      	ldr	r7, [sp, #12]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	0038      	movs	r0, r7
 8001c70:	0413      	lsls	r3, r2, #16
 8001c72:	0c1b      	lsrs	r3, r3, #16
 8001c74:	4358      	muls	r0, r3
 8001c76:	4681      	mov	r9, r0
 8001c78:	9802      	ldr	r0, [sp, #8]
 8001c7a:	0c15      	lsrs	r5, r2, #16
 8001c7c:	436f      	muls	r7, r5
 8001c7e:	4343      	muls	r3, r0
 8001c80:	4345      	muls	r5, r0
 8001c82:	4648      	mov	r0, r9
 8001c84:	0c00      	lsrs	r0, r0, #16
 8001c86:	4684      	mov	ip, r0
 8001c88:	19db      	adds	r3, r3, r7
 8001c8a:	4463      	add	r3, ip
 8001c8c:	429f      	cmp	r7, r3
 8001c8e:	d903      	bls.n	8001c98 <__aeabi_ddiv+0x40c>
 8001c90:	2080      	movs	r0, #128	; 0x80
 8001c92:	0240      	lsls	r0, r0, #9
 8001c94:	4684      	mov	ip, r0
 8001c96:	4465      	add	r5, ip
 8001c98:	4648      	mov	r0, r9
 8001c9a:	0c1f      	lsrs	r7, r3, #16
 8001c9c:	0400      	lsls	r0, r0, #16
 8001c9e:	041b      	lsls	r3, r3, #16
 8001ca0:	0c00      	lsrs	r0, r0, #16
 8001ca2:	197d      	adds	r5, r7, r5
 8001ca4:	1818      	adds	r0, r3, r0
 8001ca6:	42a9      	cmp	r1, r5
 8001ca8:	d200      	bcs.n	8001cac <__aeabi_ddiv+0x420>
 8001caa:	e084      	b.n	8001db6 <__aeabi_ddiv+0x52a>
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_ddiv+0x424>
 8001cae:	e07f      	b.n	8001db0 <__aeabi_ddiv+0x524>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	e657      	b.n	8001966 <__aeabi_ddiv+0xda>
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	464a      	mov	r2, r9
 8001cba:	031b      	lsls	r3, r3, #12
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	031b      	lsls	r3, r3, #12
 8001cc0:	0b1b      	lsrs	r3, r3, #12
 8001cc2:	46aa      	mov	sl, r5
 8001cc4:	4a6f      	ldr	r2, [pc, #444]	; (8001e84 <__aeabi_ddiv+0x5f8>)
 8001cc6:	e66f      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001cc8:	42ba      	cmp	r2, r7
 8001cca:	d900      	bls.n	8001cce <__aeabi_ddiv+0x442>
 8001ccc:	e735      	b.n	8001b3a <__aeabi_ddiv+0x2ae>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	07dc      	lsls	r4, r3, #31
 8001cd2:	0858      	lsrs	r0, r3, #1
 8001cd4:	087b      	lsrs	r3, r7, #1
 8001cd6:	431c      	orrs	r4, r3
 8001cd8:	07ff      	lsls	r7, r7, #31
 8001cda:	e734      	b.n	8001b46 <__aeabi_ddiv+0x2ba>
 8001cdc:	2400      	movs	r4, #0
 8001cde:	42af      	cmp	r7, r5
 8001ce0:	d289      	bcs.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001ce2:	4447      	add	r7, r8
 8001ce4:	4547      	cmp	r7, r8
 8001ce6:	41a4      	sbcs	r4, r4
 8001ce8:	465b      	mov	r3, fp
 8001cea:	4264      	negs	r4, r4
 8001cec:	19a4      	adds	r4, r4, r6
 8001cee:	1864      	adds	r4, r4, r1
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	42a6      	cmp	r6, r4
 8001cf4:	d21e      	bcs.n	8001d34 <__aeabi_ddiv+0x4a8>
 8001cf6:	42a0      	cmp	r0, r4
 8001cf8:	d86d      	bhi.n	8001dd6 <__aeabi_ddiv+0x54a>
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_ddiv+0x472>
 8001cfc:	e0b6      	b.n	8001e6c <__aeabi_ddiv+0x5e0>
 8001cfe:	1a24      	subs	r4, r4, r0
 8001d00:	469b      	mov	fp, r3
 8001d02:	e778      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001d04:	0003      	movs	r3, r0
 8001d06:	465a      	mov	r2, fp
 8001d08:	3b28      	subs	r3, #40	; 0x28
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	2700      	movs	r7, #0
 8001d0e:	4691      	mov	r9, r2
 8001d10:	e688      	b.n	8001a24 <__aeabi_ddiv+0x198>
 8001d12:	4658      	mov	r0, fp
 8001d14:	f001 f912 	bl	8002f3c <__clzsi2>
 8001d18:	3020      	adds	r0, #32
 8001d1a:	e672      	b.n	8001a02 <__aeabi_ddiv+0x176>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	4652      	mov	r2, sl
 8001d20:	3b28      	subs	r3, #40	; 0x28
 8001d22:	409a      	lsls	r2, r3
 8001d24:	4693      	mov	fp, r2
 8001d26:	2200      	movs	r2, #0
 8001d28:	e6b4      	b.n	8001a94 <__aeabi_ddiv+0x208>
 8001d2a:	4650      	mov	r0, sl
 8001d2c:	f001 f906 	bl	8002f3c <__clzsi2>
 8001d30:	3020      	adds	r0, #32
 8001d32:	e69a      	b.n	8001a6a <__aeabi_ddiv+0x1de>
 8001d34:	42a6      	cmp	r6, r4
 8001d36:	d1e2      	bne.n	8001cfe <__aeabi_ddiv+0x472>
 8001d38:	45b8      	cmp	r8, r7
 8001d3a:	d9dc      	bls.n	8001cf6 <__aeabi_ddiv+0x46a>
 8001d3c:	1a34      	subs	r4, r6, r0
 8001d3e:	469b      	mov	fp, r3
 8001d40:	e759      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001d42:	2b1f      	cmp	r3, #31
 8001d44:	dc65      	bgt.n	8001e12 <__aeabi_ddiv+0x586>
 8001d46:	4c50      	ldr	r4, [pc, #320]	; (8001e88 <__aeabi_ddiv+0x5fc>)
 8001d48:	9900      	ldr	r1, [sp, #0]
 8001d4a:	46a4      	mov	ip, r4
 8001d4c:	465c      	mov	r4, fp
 8001d4e:	4461      	add	r1, ip
 8001d50:	0008      	movs	r0, r1
 8001d52:	408c      	lsls	r4, r1
 8001d54:	0011      	movs	r1, r2
 8001d56:	4082      	lsls	r2, r0
 8001d58:	40d9      	lsrs	r1, r3
 8001d5a:	1e50      	subs	r0, r2, #1
 8001d5c:	4182      	sbcs	r2, r0
 8001d5e:	430c      	orrs	r4, r1
 8001d60:	4314      	orrs	r4, r2
 8001d62:	465a      	mov	r2, fp
 8001d64:	40da      	lsrs	r2, r3
 8001d66:	0013      	movs	r3, r2
 8001d68:	0762      	lsls	r2, r4, #29
 8001d6a:	d009      	beq.n	8001d80 <__aeabi_ddiv+0x4f4>
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	4022      	ands	r2, r4
 8001d70:	2a04      	cmp	r2, #4
 8001d72:	d005      	beq.n	8001d80 <__aeabi_ddiv+0x4f4>
 8001d74:	0022      	movs	r2, r4
 8001d76:	1d14      	adds	r4, r2, #4
 8001d78:	4294      	cmp	r4, r2
 8001d7a:	4189      	sbcs	r1, r1
 8001d7c:	4249      	negs	r1, r1
 8001d7e:	185b      	adds	r3, r3, r1
 8001d80:	021a      	lsls	r2, r3, #8
 8001d82:	d562      	bpl.n	8001e4a <__aeabi_ddiv+0x5be>
 8001d84:	2201      	movs	r2, #1
 8001d86:	2300      	movs	r3, #0
 8001d88:	2700      	movs	r7, #0
 8001d8a:	e60d      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001d8c:	428a      	cmp	r2, r1
 8001d8e:	d800      	bhi.n	8001d92 <__aeabi_ddiv+0x506>
 8001d90:	e70a      	b.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001d92:	1e83      	subs	r3, r0, #2
 8001d94:	1989      	adds	r1, r1, r6
 8001d96:	e707      	b.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001d98:	230f      	movs	r3, #15
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0x516>
 8001da0:	e5e6      	b.n	8001970 <__aeabi_ddiv+0xe4>
 8001da2:	1d17      	adds	r7, r2, #4
 8001da4:	4297      	cmp	r7, r2
 8001da6:	4192      	sbcs	r2, r2
 8001da8:	4253      	negs	r3, r2
 8001daa:	449b      	add	fp, r3
 8001dac:	08fa      	lsrs	r2, r7, #3
 8001dae:	e5e0      	b.n	8001972 <__aeabi_ddiv+0xe6>
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d100      	bne.n	8001db6 <__aeabi_ddiv+0x52a>
 8001db4:	e5d7      	b.n	8001966 <__aeabi_ddiv+0xda>
 8001db6:	1871      	adds	r1, r6, r1
 8001db8:	1e53      	subs	r3, r2, #1
 8001dba:	42b1      	cmp	r1, r6
 8001dbc:	d327      	bcc.n	8001e0e <__aeabi_ddiv+0x582>
 8001dbe:	42a9      	cmp	r1, r5
 8001dc0:	d315      	bcc.n	8001dee <__aeabi_ddiv+0x562>
 8001dc2:	d058      	beq.n	8001e76 <__aeabi_ddiv+0x5ea>
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	e773      	b.n	8001cb0 <__aeabi_ddiv+0x424>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dc00      	bgt.n	8001dce <__aeabi_ddiv+0x542>
 8001dcc:	e604      	b.n	80019d8 <__aeabi_ddiv+0x14c>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	449b      	add	fp, r3
 8001dd4:	e5cd      	b.n	8001972 <__aeabi_ddiv+0xe6>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	4447      	add	r7, r8
 8001dda:	4547      	cmp	r7, r8
 8001ddc:	4189      	sbcs	r1, r1
 8001dde:	425b      	negs	r3, r3
 8001de0:	469c      	mov	ip, r3
 8001de2:	4249      	negs	r1, r1
 8001de4:	1989      	adds	r1, r1, r6
 8001de6:	190c      	adds	r4, r1, r4
 8001de8:	44e3      	add	fp, ip
 8001dea:	1a24      	subs	r4, r4, r0
 8001dec:	e703      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001dee:	4643      	mov	r3, r8
 8001df0:	005f      	lsls	r7, r3, #1
 8001df2:	4547      	cmp	r7, r8
 8001df4:	419b      	sbcs	r3, r3
 8001df6:	46b8      	mov	r8, r7
 8001df8:	425b      	negs	r3, r3
 8001dfa:	199e      	adds	r6, r3, r6
 8001dfc:	3a02      	subs	r2, #2
 8001dfe:	1989      	adds	r1, r1, r6
 8001e00:	42a9      	cmp	r1, r5
 8001e02:	d000      	beq.n	8001e06 <__aeabi_ddiv+0x57a>
 8001e04:	e754      	b.n	8001cb0 <__aeabi_ddiv+0x424>
 8001e06:	4540      	cmp	r0, r8
 8001e08:	d000      	beq.n	8001e0c <__aeabi_ddiv+0x580>
 8001e0a:	e751      	b.n	8001cb0 <__aeabi_ddiv+0x424>
 8001e0c:	e5ab      	b.n	8001966 <__aeabi_ddiv+0xda>
 8001e0e:	001a      	movs	r2, r3
 8001e10:	e7f6      	b.n	8001e00 <__aeabi_ddiv+0x574>
 8001e12:	211f      	movs	r1, #31
 8001e14:	465f      	mov	r7, fp
 8001e16:	4249      	negs	r1, r1
 8001e18:	1b0c      	subs	r4, r1, r4
 8001e1a:	40e7      	lsrs	r7, r4
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d007      	beq.n	8001e30 <__aeabi_ddiv+0x5a4>
 8001e20:	491a      	ldr	r1, [pc, #104]	; (8001e8c <__aeabi_ddiv+0x600>)
 8001e22:	9b00      	ldr	r3, [sp, #0]
 8001e24:	468c      	mov	ip, r1
 8001e26:	4463      	add	r3, ip
 8001e28:	0018      	movs	r0, r3
 8001e2a:	465b      	mov	r3, fp
 8001e2c:	4083      	lsls	r3, r0
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	1e50      	subs	r0, r2, #1
 8001e32:	4182      	sbcs	r2, r0
 8001e34:	433a      	orrs	r2, r7
 8001e36:	2707      	movs	r7, #7
 8001e38:	2300      	movs	r3, #0
 8001e3a:	4017      	ands	r7, r2
 8001e3c:	d009      	beq.n	8001e52 <__aeabi_ddiv+0x5c6>
 8001e3e:	210f      	movs	r1, #15
 8001e40:	2300      	movs	r3, #0
 8001e42:	4011      	ands	r1, r2
 8001e44:	0014      	movs	r4, r2
 8001e46:	2904      	cmp	r1, #4
 8001e48:	d195      	bne.n	8001d76 <__aeabi_ddiv+0x4ea>
 8001e4a:	0022      	movs	r2, r4
 8001e4c:	075f      	lsls	r7, r3, #29
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	0b1b      	lsrs	r3, r3, #12
 8001e52:	08d2      	lsrs	r2, r2, #3
 8001e54:	4317      	orrs	r7, r2
 8001e56:	2200      	movs	r2, #0
 8001e58:	e5a6      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	4659      	mov	r1, fp
 8001e5e:	031b      	lsls	r3, r3, #12
 8001e60:	430b      	orrs	r3, r1
 8001e62:	031b      	lsls	r3, r3, #12
 8001e64:	0017      	movs	r7, r2
 8001e66:	0b1b      	lsrs	r3, r3, #12
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <__aeabi_ddiv+0x5f8>)
 8001e6a:	e59d      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001e6c:	42bd      	cmp	r5, r7
 8001e6e:	d8b2      	bhi.n	8001dd6 <__aeabi_ddiv+0x54a>
 8001e70:	469b      	mov	fp, r3
 8001e72:	2400      	movs	r4, #0
 8001e74:	e6bf      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001e76:	4580      	cmp	r8, r0
 8001e78:	d3b9      	bcc.n	8001dee <__aeabi_ddiv+0x562>
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	e7c3      	b.n	8001e06 <__aeabi_ddiv+0x57a>
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	000003ff 	.word	0x000003ff
 8001e84:	000007ff 	.word	0x000007ff
 8001e88:	0000041e 	.word	0x0000041e
 8001e8c:	0000043e 	.word	0x0000043e

08001e90 <__eqdf2>:
 8001e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e92:	464f      	mov	r7, r9
 8001e94:	4646      	mov	r6, r8
 8001e96:	46d6      	mov	lr, sl
 8001e98:	4684      	mov	ip, r0
 8001e9a:	b5c0      	push	{r6, r7, lr}
 8001e9c:	4680      	mov	r8, r0
 8001e9e:	4e19      	ldr	r6, [pc, #100]	; (8001f04 <__eqdf2+0x74>)
 8001ea0:	0318      	lsls	r0, r3, #12
 8001ea2:	030f      	lsls	r7, r1, #12
 8001ea4:	004d      	lsls	r5, r1, #1
 8001ea6:	0b00      	lsrs	r0, r0, #12
 8001ea8:	005c      	lsls	r4, r3, #1
 8001eaa:	4682      	mov	sl, r0
 8001eac:	0b3f      	lsrs	r7, r7, #12
 8001eae:	0d6d      	lsrs	r5, r5, #21
 8001eb0:	0fc9      	lsrs	r1, r1, #31
 8001eb2:	4691      	mov	r9, r2
 8001eb4:	0d64      	lsrs	r4, r4, #21
 8001eb6:	0fdb      	lsrs	r3, r3, #31
 8001eb8:	2001      	movs	r0, #1
 8001eba:	42b5      	cmp	r5, r6
 8001ebc:	d00a      	beq.n	8001ed4 <__eqdf2+0x44>
 8001ebe:	42b4      	cmp	r4, r6
 8001ec0:	d003      	beq.n	8001eca <__eqdf2+0x3a>
 8001ec2:	42a5      	cmp	r5, r4
 8001ec4:	d101      	bne.n	8001eca <__eqdf2+0x3a>
 8001ec6:	4557      	cmp	r7, sl
 8001ec8:	d00c      	beq.n	8001ee4 <__eqdf2+0x54>
 8001eca:	bc1c      	pop	{r2, r3, r4}
 8001ecc:	4690      	mov	r8, r2
 8001ece:	4699      	mov	r9, r3
 8001ed0:	46a2      	mov	sl, r4
 8001ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed4:	4666      	mov	r6, ip
 8001ed6:	433e      	orrs	r6, r7
 8001ed8:	d1f7      	bne.n	8001eca <__eqdf2+0x3a>
 8001eda:	42ac      	cmp	r4, r5
 8001edc:	d1f5      	bne.n	8001eca <__eqdf2+0x3a>
 8001ede:	4654      	mov	r4, sl
 8001ee0:	4314      	orrs	r4, r2
 8001ee2:	d1f2      	bne.n	8001eca <__eqdf2+0x3a>
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	45c8      	cmp	r8, r9
 8001ee8:	d1ef      	bne.n	8001eca <__eqdf2+0x3a>
 8001eea:	4299      	cmp	r1, r3
 8001eec:	d007      	beq.n	8001efe <__eqdf2+0x6e>
 8001eee:	2d00      	cmp	r5, #0
 8001ef0:	d1eb      	bne.n	8001eca <__eqdf2+0x3a>
 8001ef2:	4663      	mov	r3, ip
 8001ef4:	431f      	orrs	r7, r3
 8001ef6:	0038      	movs	r0, r7
 8001ef8:	1e47      	subs	r7, r0, #1
 8001efa:	41b8      	sbcs	r0, r7
 8001efc:	e7e5      	b.n	8001eca <__eqdf2+0x3a>
 8001efe:	2000      	movs	r0, #0
 8001f00:	e7e3      	b.n	8001eca <__eqdf2+0x3a>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	000007ff 	.word	0x000007ff

08001f08 <__gedf2>:
 8001f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0a:	464f      	mov	r7, r9
 8001f0c:	4646      	mov	r6, r8
 8001f0e:	46d6      	mov	lr, sl
 8001f10:	004d      	lsls	r5, r1, #1
 8001f12:	b5c0      	push	{r6, r7, lr}
 8001f14:	030e      	lsls	r6, r1, #12
 8001f16:	0fc9      	lsrs	r1, r1, #31
 8001f18:	468a      	mov	sl, r1
 8001f1a:	492c      	ldr	r1, [pc, #176]	; (8001fcc <__gedf2+0xc4>)
 8001f1c:	031f      	lsls	r7, r3, #12
 8001f1e:	005c      	lsls	r4, r3, #1
 8001f20:	4680      	mov	r8, r0
 8001f22:	0b36      	lsrs	r6, r6, #12
 8001f24:	0d6d      	lsrs	r5, r5, #21
 8001f26:	4691      	mov	r9, r2
 8001f28:	0b3f      	lsrs	r7, r7, #12
 8001f2a:	0d64      	lsrs	r4, r4, #21
 8001f2c:	0fdb      	lsrs	r3, r3, #31
 8001f2e:	428d      	cmp	r5, r1
 8001f30:	d01e      	beq.n	8001f70 <__gedf2+0x68>
 8001f32:	428c      	cmp	r4, r1
 8001f34:	d016      	beq.n	8001f64 <__gedf2+0x5c>
 8001f36:	2d00      	cmp	r5, #0
 8001f38:	d11e      	bne.n	8001f78 <__gedf2+0x70>
 8001f3a:	4330      	orrs	r0, r6
 8001f3c:	4684      	mov	ip, r0
 8001f3e:	2c00      	cmp	r4, #0
 8001f40:	d101      	bne.n	8001f46 <__gedf2+0x3e>
 8001f42:	433a      	orrs	r2, r7
 8001f44:	d023      	beq.n	8001f8e <__gedf2+0x86>
 8001f46:	4662      	mov	r2, ip
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	d01a      	beq.n	8001f82 <__gedf2+0x7a>
 8001f4c:	459a      	cmp	sl, r3
 8001f4e:	d029      	beq.n	8001fa4 <__gedf2+0x9c>
 8001f50:	4651      	mov	r1, sl
 8001f52:	2002      	movs	r0, #2
 8001f54:	3901      	subs	r1, #1
 8001f56:	4008      	ands	r0, r1
 8001f58:	3801      	subs	r0, #1
 8001f5a:	bc1c      	pop	{r2, r3, r4}
 8001f5c:	4690      	mov	r8, r2
 8001f5e:	4699      	mov	r9, r3
 8001f60:	46a2      	mov	sl, r4
 8001f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f64:	0039      	movs	r1, r7
 8001f66:	4311      	orrs	r1, r2
 8001f68:	d0e5      	beq.n	8001f36 <__gedf2+0x2e>
 8001f6a:	2002      	movs	r0, #2
 8001f6c:	4240      	negs	r0, r0
 8001f6e:	e7f4      	b.n	8001f5a <__gedf2+0x52>
 8001f70:	4330      	orrs	r0, r6
 8001f72:	d1fa      	bne.n	8001f6a <__gedf2+0x62>
 8001f74:	42ac      	cmp	r4, r5
 8001f76:	d00f      	beq.n	8001f98 <__gedf2+0x90>
 8001f78:	2c00      	cmp	r4, #0
 8001f7a:	d10f      	bne.n	8001f9c <__gedf2+0x94>
 8001f7c:	433a      	orrs	r2, r7
 8001f7e:	d0e7      	beq.n	8001f50 <__gedf2+0x48>
 8001f80:	e00c      	b.n	8001f9c <__gedf2+0x94>
 8001f82:	2201      	movs	r2, #1
 8001f84:	3b01      	subs	r3, #1
 8001f86:	4393      	bics	r3, r2
 8001f88:	0018      	movs	r0, r3
 8001f8a:	3001      	adds	r0, #1
 8001f8c:	e7e5      	b.n	8001f5a <__gedf2+0x52>
 8001f8e:	4663      	mov	r3, ip
 8001f90:	2000      	movs	r0, #0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0e1      	beq.n	8001f5a <__gedf2+0x52>
 8001f96:	e7db      	b.n	8001f50 <__gedf2+0x48>
 8001f98:	433a      	orrs	r2, r7
 8001f9a:	d1e6      	bne.n	8001f6a <__gedf2+0x62>
 8001f9c:	459a      	cmp	sl, r3
 8001f9e:	d1d7      	bne.n	8001f50 <__gedf2+0x48>
 8001fa0:	42a5      	cmp	r5, r4
 8001fa2:	dcd5      	bgt.n	8001f50 <__gedf2+0x48>
 8001fa4:	42a5      	cmp	r5, r4
 8001fa6:	db05      	blt.n	8001fb4 <__gedf2+0xac>
 8001fa8:	42be      	cmp	r6, r7
 8001faa:	d8d1      	bhi.n	8001f50 <__gedf2+0x48>
 8001fac:	d008      	beq.n	8001fc0 <__gedf2+0xb8>
 8001fae:	2000      	movs	r0, #0
 8001fb0:	42be      	cmp	r6, r7
 8001fb2:	d2d2      	bcs.n	8001f5a <__gedf2+0x52>
 8001fb4:	4650      	mov	r0, sl
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	3801      	subs	r0, #1
 8001fba:	4398      	bics	r0, r3
 8001fbc:	3001      	adds	r0, #1
 8001fbe:	e7cc      	b.n	8001f5a <__gedf2+0x52>
 8001fc0:	45c8      	cmp	r8, r9
 8001fc2:	d8c5      	bhi.n	8001f50 <__gedf2+0x48>
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	45c8      	cmp	r8, r9
 8001fc8:	d3f4      	bcc.n	8001fb4 <__gedf2+0xac>
 8001fca:	e7c6      	b.n	8001f5a <__gedf2+0x52>
 8001fcc:	000007ff 	.word	0x000007ff

08001fd0 <__ledf2>:
 8001fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd2:	464f      	mov	r7, r9
 8001fd4:	4646      	mov	r6, r8
 8001fd6:	46d6      	mov	lr, sl
 8001fd8:	004d      	lsls	r5, r1, #1
 8001fda:	b5c0      	push	{r6, r7, lr}
 8001fdc:	030e      	lsls	r6, r1, #12
 8001fde:	0fc9      	lsrs	r1, r1, #31
 8001fe0:	468a      	mov	sl, r1
 8001fe2:	492e      	ldr	r1, [pc, #184]	; (800209c <__ledf2+0xcc>)
 8001fe4:	031f      	lsls	r7, r3, #12
 8001fe6:	005c      	lsls	r4, r3, #1
 8001fe8:	4680      	mov	r8, r0
 8001fea:	0b36      	lsrs	r6, r6, #12
 8001fec:	0d6d      	lsrs	r5, r5, #21
 8001fee:	4691      	mov	r9, r2
 8001ff0:	0b3f      	lsrs	r7, r7, #12
 8001ff2:	0d64      	lsrs	r4, r4, #21
 8001ff4:	0fdb      	lsrs	r3, r3, #31
 8001ff6:	428d      	cmp	r5, r1
 8001ff8:	d018      	beq.n	800202c <__ledf2+0x5c>
 8001ffa:	428c      	cmp	r4, r1
 8001ffc:	d011      	beq.n	8002022 <__ledf2+0x52>
 8001ffe:	2d00      	cmp	r5, #0
 8002000:	d118      	bne.n	8002034 <__ledf2+0x64>
 8002002:	4330      	orrs	r0, r6
 8002004:	4684      	mov	ip, r0
 8002006:	2c00      	cmp	r4, #0
 8002008:	d11e      	bne.n	8002048 <__ledf2+0x78>
 800200a:	433a      	orrs	r2, r7
 800200c:	d11c      	bne.n	8002048 <__ledf2+0x78>
 800200e:	4663      	mov	r3, ip
 8002010:	2000      	movs	r0, #0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d030      	beq.n	8002078 <__ledf2+0xa8>
 8002016:	4651      	mov	r1, sl
 8002018:	2002      	movs	r0, #2
 800201a:	3901      	subs	r1, #1
 800201c:	4008      	ands	r0, r1
 800201e:	3801      	subs	r0, #1
 8002020:	e02a      	b.n	8002078 <__ledf2+0xa8>
 8002022:	0039      	movs	r1, r7
 8002024:	4311      	orrs	r1, r2
 8002026:	d0ea      	beq.n	8001ffe <__ledf2+0x2e>
 8002028:	2002      	movs	r0, #2
 800202a:	e025      	b.n	8002078 <__ledf2+0xa8>
 800202c:	4330      	orrs	r0, r6
 800202e:	d1fb      	bne.n	8002028 <__ledf2+0x58>
 8002030:	42ac      	cmp	r4, r5
 8002032:	d026      	beq.n	8002082 <__ledf2+0xb2>
 8002034:	2c00      	cmp	r4, #0
 8002036:	d126      	bne.n	8002086 <__ledf2+0xb6>
 8002038:	433a      	orrs	r2, r7
 800203a:	d124      	bne.n	8002086 <__ledf2+0xb6>
 800203c:	4651      	mov	r1, sl
 800203e:	2002      	movs	r0, #2
 8002040:	3901      	subs	r1, #1
 8002042:	4008      	ands	r0, r1
 8002044:	3801      	subs	r0, #1
 8002046:	e017      	b.n	8002078 <__ledf2+0xa8>
 8002048:	4662      	mov	r2, ip
 800204a:	2a00      	cmp	r2, #0
 800204c:	d00f      	beq.n	800206e <__ledf2+0x9e>
 800204e:	459a      	cmp	sl, r3
 8002050:	d1e1      	bne.n	8002016 <__ledf2+0x46>
 8002052:	42a5      	cmp	r5, r4
 8002054:	db05      	blt.n	8002062 <__ledf2+0x92>
 8002056:	42be      	cmp	r6, r7
 8002058:	d8dd      	bhi.n	8002016 <__ledf2+0x46>
 800205a:	d019      	beq.n	8002090 <__ledf2+0xc0>
 800205c:	2000      	movs	r0, #0
 800205e:	42be      	cmp	r6, r7
 8002060:	d20a      	bcs.n	8002078 <__ledf2+0xa8>
 8002062:	4650      	mov	r0, sl
 8002064:	2301      	movs	r3, #1
 8002066:	3801      	subs	r0, #1
 8002068:	4398      	bics	r0, r3
 800206a:	3001      	adds	r0, #1
 800206c:	e004      	b.n	8002078 <__ledf2+0xa8>
 800206e:	2201      	movs	r2, #1
 8002070:	3b01      	subs	r3, #1
 8002072:	4393      	bics	r3, r2
 8002074:	0018      	movs	r0, r3
 8002076:	3001      	adds	r0, #1
 8002078:	bc1c      	pop	{r2, r3, r4}
 800207a:	4690      	mov	r8, r2
 800207c:	4699      	mov	r9, r3
 800207e:	46a2      	mov	sl, r4
 8002080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002082:	433a      	orrs	r2, r7
 8002084:	d1d0      	bne.n	8002028 <__ledf2+0x58>
 8002086:	459a      	cmp	sl, r3
 8002088:	d1c5      	bne.n	8002016 <__ledf2+0x46>
 800208a:	42a5      	cmp	r5, r4
 800208c:	dcc3      	bgt.n	8002016 <__ledf2+0x46>
 800208e:	e7e0      	b.n	8002052 <__ledf2+0x82>
 8002090:	45c8      	cmp	r8, r9
 8002092:	d8c0      	bhi.n	8002016 <__ledf2+0x46>
 8002094:	2000      	movs	r0, #0
 8002096:	45c8      	cmp	r8, r9
 8002098:	d3e3      	bcc.n	8002062 <__ledf2+0x92>
 800209a:	e7ed      	b.n	8002078 <__ledf2+0xa8>
 800209c:	000007ff 	.word	0x000007ff

080020a0 <__aeabi_dmul>:
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	4657      	mov	r7, sl
 80020a4:	46de      	mov	lr, fp
 80020a6:	464e      	mov	r6, r9
 80020a8:	4645      	mov	r5, r8
 80020aa:	b5e0      	push	{r5, r6, r7, lr}
 80020ac:	4683      	mov	fp, r0
 80020ae:	0006      	movs	r6, r0
 80020b0:	030f      	lsls	r7, r1, #12
 80020b2:	0048      	lsls	r0, r1, #1
 80020b4:	b087      	sub	sp, #28
 80020b6:	4692      	mov	sl, r2
 80020b8:	001d      	movs	r5, r3
 80020ba:	0b3f      	lsrs	r7, r7, #12
 80020bc:	0d40      	lsrs	r0, r0, #21
 80020be:	0fcc      	lsrs	r4, r1, #31
 80020c0:	2800      	cmp	r0, #0
 80020c2:	d100      	bne.n	80020c6 <__aeabi_dmul+0x26>
 80020c4:	e06f      	b.n	80021a6 <__aeabi_dmul+0x106>
 80020c6:	4bde      	ldr	r3, [pc, #888]	; (8002440 <__aeabi_dmul+0x3a0>)
 80020c8:	4298      	cmp	r0, r3
 80020ca:	d038      	beq.n	800213e <__aeabi_dmul+0x9e>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	00ff      	lsls	r7, r7, #3
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	431f      	orrs	r7, r3
 80020d4:	0f73      	lsrs	r3, r6, #29
 80020d6:	433b      	orrs	r3, r7
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	4bda      	ldr	r3, [pc, #872]	; (8002444 <__aeabi_dmul+0x3a4>)
 80020dc:	2700      	movs	r7, #0
 80020de:	4699      	mov	r9, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	469b      	mov	fp, r3
 80020e4:	00f6      	lsls	r6, r6, #3
 80020e6:	4481      	add	r9, r0
 80020e8:	032b      	lsls	r3, r5, #12
 80020ea:	0069      	lsls	r1, r5, #1
 80020ec:	0b1b      	lsrs	r3, r3, #12
 80020ee:	4652      	mov	r2, sl
 80020f0:	4698      	mov	r8, r3
 80020f2:	0d49      	lsrs	r1, r1, #21
 80020f4:	0fed      	lsrs	r5, r5, #31
 80020f6:	2900      	cmp	r1, #0
 80020f8:	d100      	bne.n	80020fc <__aeabi_dmul+0x5c>
 80020fa:	e085      	b.n	8002208 <__aeabi_dmul+0x168>
 80020fc:	4bd0      	ldr	r3, [pc, #832]	; (8002440 <__aeabi_dmul+0x3a0>)
 80020fe:	4299      	cmp	r1, r3
 8002100:	d100      	bne.n	8002104 <__aeabi_dmul+0x64>
 8002102:	e073      	b.n	80021ec <__aeabi_dmul+0x14c>
 8002104:	4643      	mov	r3, r8
 8002106:	00da      	lsls	r2, r3, #3
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	041b      	lsls	r3, r3, #16
 800210c:	4313      	orrs	r3, r2
 800210e:	4652      	mov	r2, sl
 8002110:	48cc      	ldr	r0, [pc, #816]	; (8002444 <__aeabi_dmul+0x3a4>)
 8002112:	0f52      	lsrs	r2, r2, #29
 8002114:	4684      	mov	ip, r0
 8002116:	4313      	orrs	r3, r2
 8002118:	4652      	mov	r2, sl
 800211a:	2000      	movs	r0, #0
 800211c:	4461      	add	r1, ip
 800211e:	00d2      	lsls	r2, r2, #3
 8002120:	4489      	add	r9, r1
 8002122:	0021      	movs	r1, r4
 8002124:	4069      	eors	r1, r5
 8002126:	9100      	str	r1, [sp, #0]
 8002128:	468c      	mov	ip, r1
 800212a:	2101      	movs	r1, #1
 800212c:	4449      	add	r1, r9
 800212e:	468a      	mov	sl, r1
 8002130:	2f0f      	cmp	r7, #15
 8002132:	d900      	bls.n	8002136 <__aeabi_dmul+0x96>
 8002134:	e090      	b.n	8002258 <__aeabi_dmul+0x1b8>
 8002136:	49c4      	ldr	r1, [pc, #784]	; (8002448 <__aeabi_dmul+0x3a8>)
 8002138:	00bf      	lsls	r7, r7, #2
 800213a:	59cf      	ldr	r7, [r1, r7]
 800213c:	46bf      	mov	pc, r7
 800213e:	465b      	mov	r3, fp
 8002140:	433b      	orrs	r3, r7
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	d000      	beq.n	8002148 <__aeabi_dmul+0xa8>
 8002146:	e16a      	b.n	800241e <__aeabi_dmul+0x37e>
 8002148:	2302      	movs	r3, #2
 800214a:	2708      	movs	r7, #8
 800214c:	2600      	movs	r6, #0
 800214e:	4681      	mov	r9, r0
 8002150:	469b      	mov	fp, r3
 8002152:	e7c9      	b.n	80020e8 <__aeabi_dmul+0x48>
 8002154:	0032      	movs	r2, r6
 8002156:	4658      	mov	r0, fp
 8002158:	9b01      	ldr	r3, [sp, #4]
 800215a:	4661      	mov	r1, ip
 800215c:	9100      	str	r1, [sp, #0]
 800215e:	2802      	cmp	r0, #2
 8002160:	d100      	bne.n	8002164 <__aeabi_dmul+0xc4>
 8002162:	e075      	b.n	8002250 <__aeabi_dmul+0x1b0>
 8002164:	2803      	cmp	r0, #3
 8002166:	d100      	bne.n	800216a <__aeabi_dmul+0xca>
 8002168:	e1fe      	b.n	8002568 <__aeabi_dmul+0x4c8>
 800216a:	2801      	cmp	r0, #1
 800216c:	d000      	beq.n	8002170 <__aeabi_dmul+0xd0>
 800216e:	e12c      	b.n	80023ca <__aeabi_dmul+0x32a>
 8002170:	2300      	movs	r3, #0
 8002172:	2700      	movs	r7, #0
 8002174:	2600      	movs	r6, #0
 8002176:	2500      	movs	r5, #0
 8002178:	033f      	lsls	r7, r7, #12
 800217a:	0d2a      	lsrs	r2, r5, #20
 800217c:	0b3f      	lsrs	r7, r7, #12
 800217e:	48b3      	ldr	r0, [pc, #716]	; (800244c <__aeabi_dmul+0x3ac>)
 8002180:	0512      	lsls	r2, r2, #20
 8002182:	433a      	orrs	r2, r7
 8002184:	4002      	ands	r2, r0
 8002186:	051b      	lsls	r3, r3, #20
 8002188:	4313      	orrs	r3, r2
 800218a:	9a00      	ldr	r2, [sp, #0]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	07d1      	lsls	r1, r2, #31
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	430b      	orrs	r3, r1
 8002194:	0030      	movs	r0, r6
 8002196:	0019      	movs	r1, r3
 8002198:	b007      	add	sp, #28
 800219a:	bc3c      	pop	{r2, r3, r4, r5}
 800219c:	4690      	mov	r8, r2
 800219e:	4699      	mov	r9, r3
 80021a0:	46a2      	mov	sl, r4
 80021a2:	46ab      	mov	fp, r5
 80021a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a6:	465b      	mov	r3, fp
 80021a8:	433b      	orrs	r3, r7
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dmul+0x110>
 80021ae:	e12f      	b.n	8002410 <__aeabi_dmul+0x370>
 80021b0:	2f00      	cmp	r7, #0
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dmul+0x116>
 80021b4:	e1a5      	b.n	8002502 <__aeabi_dmul+0x462>
 80021b6:	0038      	movs	r0, r7
 80021b8:	f000 fec0 	bl	8002f3c <__clzsi2>
 80021bc:	0003      	movs	r3, r0
 80021be:	3b0b      	subs	r3, #11
 80021c0:	2b1c      	cmp	r3, #28
 80021c2:	dd00      	ble.n	80021c6 <__aeabi_dmul+0x126>
 80021c4:	e196      	b.n	80024f4 <__aeabi_dmul+0x454>
 80021c6:	221d      	movs	r2, #29
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	465a      	mov	r2, fp
 80021cc:	0001      	movs	r1, r0
 80021ce:	40da      	lsrs	r2, r3
 80021d0:	465e      	mov	r6, fp
 80021d2:	3908      	subs	r1, #8
 80021d4:	408f      	lsls	r7, r1
 80021d6:	0013      	movs	r3, r2
 80021d8:	408e      	lsls	r6, r1
 80021da:	433b      	orrs	r3, r7
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	4b9c      	ldr	r3, [pc, #624]	; (8002450 <__aeabi_dmul+0x3b0>)
 80021e0:	2700      	movs	r7, #0
 80021e2:	1a1b      	subs	r3, r3, r0
 80021e4:	4699      	mov	r9, r3
 80021e6:	2300      	movs	r3, #0
 80021e8:	469b      	mov	fp, r3
 80021ea:	e77d      	b.n	80020e8 <__aeabi_dmul+0x48>
 80021ec:	4641      	mov	r1, r8
 80021ee:	4653      	mov	r3, sl
 80021f0:	430b      	orrs	r3, r1
 80021f2:	4993      	ldr	r1, [pc, #588]	; (8002440 <__aeabi_dmul+0x3a0>)
 80021f4:	468c      	mov	ip, r1
 80021f6:	44e1      	add	r9, ip
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d000      	beq.n	80021fe <__aeabi_dmul+0x15e>
 80021fc:	e11a      	b.n	8002434 <__aeabi_dmul+0x394>
 80021fe:	2202      	movs	r2, #2
 8002200:	2002      	movs	r0, #2
 8002202:	4317      	orrs	r7, r2
 8002204:	2200      	movs	r2, #0
 8002206:	e78c      	b.n	8002122 <__aeabi_dmul+0x82>
 8002208:	4313      	orrs	r3, r2
 800220a:	d100      	bne.n	800220e <__aeabi_dmul+0x16e>
 800220c:	e10d      	b.n	800242a <__aeabi_dmul+0x38a>
 800220e:	4643      	mov	r3, r8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d100      	bne.n	8002216 <__aeabi_dmul+0x176>
 8002214:	e181      	b.n	800251a <__aeabi_dmul+0x47a>
 8002216:	4640      	mov	r0, r8
 8002218:	f000 fe90 	bl	8002f3c <__clzsi2>
 800221c:	0002      	movs	r2, r0
 800221e:	3a0b      	subs	r2, #11
 8002220:	2a1c      	cmp	r2, #28
 8002222:	dd00      	ble.n	8002226 <__aeabi_dmul+0x186>
 8002224:	e172      	b.n	800250c <__aeabi_dmul+0x46c>
 8002226:	0001      	movs	r1, r0
 8002228:	4643      	mov	r3, r8
 800222a:	3908      	subs	r1, #8
 800222c:	408b      	lsls	r3, r1
 800222e:	4698      	mov	r8, r3
 8002230:	231d      	movs	r3, #29
 8002232:	1a9a      	subs	r2, r3, r2
 8002234:	4653      	mov	r3, sl
 8002236:	40d3      	lsrs	r3, r2
 8002238:	001a      	movs	r2, r3
 800223a:	4643      	mov	r3, r8
 800223c:	4313      	orrs	r3, r2
 800223e:	4652      	mov	r2, sl
 8002240:	408a      	lsls	r2, r1
 8002242:	4649      	mov	r1, r9
 8002244:	1a08      	subs	r0, r1, r0
 8002246:	4982      	ldr	r1, [pc, #520]	; (8002450 <__aeabi_dmul+0x3b0>)
 8002248:	4689      	mov	r9, r1
 800224a:	4481      	add	r9, r0
 800224c:	2000      	movs	r0, #0
 800224e:	e768      	b.n	8002122 <__aeabi_dmul+0x82>
 8002250:	4b7b      	ldr	r3, [pc, #492]	; (8002440 <__aeabi_dmul+0x3a0>)
 8002252:	2700      	movs	r7, #0
 8002254:	2600      	movs	r6, #0
 8002256:	e78e      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002258:	0c14      	lsrs	r4, r2, #16
 800225a:	0412      	lsls	r2, r2, #16
 800225c:	0c12      	lsrs	r2, r2, #16
 800225e:	0011      	movs	r1, r2
 8002260:	0c37      	lsrs	r7, r6, #16
 8002262:	0436      	lsls	r6, r6, #16
 8002264:	0c35      	lsrs	r5, r6, #16
 8002266:	4379      	muls	r1, r7
 8002268:	0028      	movs	r0, r5
 800226a:	468c      	mov	ip, r1
 800226c:	002e      	movs	r6, r5
 800226e:	4360      	muls	r0, r4
 8002270:	4460      	add	r0, ip
 8002272:	4683      	mov	fp, r0
 8002274:	4356      	muls	r6, r2
 8002276:	0021      	movs	r1, r4
 8002278:	0c30      	lsrs	r0, r6, #16
 800227a:	4680      	mov	r8, r0
 800227c:	4658      	mov	r0, fp
 800227e:	4379      	muls	r1, r7
 8002280:	4440      	add	r0, r8
 8002282:	9102      	str	r1, [sp, #8]
 8002284:	4584      	cmp	ip, r0
 8002286:	d906      	bls.n	8002296 <__aeabi_dmul+0x1f6>
 8002288:	4688      	mov	r8, r1
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	0249      	lsls	r1, r1, #9
 800228e:	468c      	mov	ip, r1
 8002290:	44e0      	add	r8, ip
 8002292:	4641      	mov	r1, r8
 8002294:	9102      	str	r1, [sp, #8]
 8002296:	0436      	lsls	r6, r6, #16
 8002298:	0c01      	lsrs	r1, r0, #16
 800229a:	0c36      	lsrs	r6, r6, #16
 800229c:	0400      	lsls	r0, r0, #16
 800229e:	468b      	mov	fp, r1
 80022a0:	1981      	adds	r1, r0, r6
 80022a2:	0c1e      	lsrs	r6, r3, #16
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	9103      	str	r1, [sp, #12]
 80022aa:	0019      	movs	r1, r3
 80022ac:	4379      	muls	r1, r7
 80022ae:	468c      	mov	ip, r1
 80022b0:	0028      	movs	r0, r5
 80022b2:	4375      	muls	r5, r6
 80022b4:	4465      	add	r5, ip
 80022b6:	46a8      	mov	r8, r5
 80022b8:	4358      	muls	r0, r3
 80022ba:	0c05      	lsrs	r5, r0, #16
 80022bc:	4445      	add	r5, r8
 80022be:	4377      	muls	r7, r6
 80022c0:	42a9      	cmp	r1, r5
 80022c2:	d903      	bls.n	80022cc <__aeabi_dmul+0x22c>
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	0249      	lsls	r1, r1, #9
 80022c8:	468c      	mov	ip, r1
 80022ca:	4467      	add	r7, ip
 80022cc:	0c29      	lsrs	r1, r5, #16
 80022ce:	468c      	mov	ip, r1
 80022d0:	0039      	movs	r1, r7
 80022d2:	0400      	lsls	r0, r0, #16
 80022d4:	0c00      	lsrs	r0, r0, #16
 80022d6:	042d      	lsls	r5, r5, #16
 80022d8:	182d      	adds	r5, r5, r0
 80022da:	4461      	add	r1, ip
 80022dc:	44ab      	add	fp, r5
 80022de:	9105      	str	r1, [sp, #20]
 80022e0:	4659      	mov	r1, fp
 80022e2:	9104      	str	r1, [sp, #16]
 80022e4:	9901      	ldr	r1, [sp, #4]
 80022e6:	040f      	lsls	r7, r1, #16
 80022e8:	0c3f      	lsrs	r7, r7, #16
 80022ea:	0c08      	lsrs	r0, r1, #16
 80022ec:	0039      	movs	r1, r7
 80022ee:	4351      	muls	r1, r2
 80022f0:	4342      	muls	r2, r0
 80022f2:	4690      	mov	r8, r2
 80022f4:	0002      	movs	r2, r0
 80022f6:	468c      	mov	ip, r1
 80022f8:	0c09      	lsrs	r1, r1, #16
 80022fa:	468b      	mov	fp, r1
 80022fc:	4362      	muls	r2, r4
 80022fe:	437c      	muls	r4, r7
 8002300:	4444      	add	r4, r8
 8002302:	445c      	add	r4, fp
 8002304:	45a0      	cmp	r8, r4
 8002306:	d903      	bls.n	8002310 <__aeabi_dmul+0x270>
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0249      	lsls	r1, r1, #9
 800230c:	4688      	mov	r8, r1
 800230e:	4442      	add	r2, r8
 8002310:	0c21      	lsrs	r1, r4, #16
 8002312:	4688      	mov	r8, r1
 8002314:	4661      	mov	r1, ip
 8002316:	0409      	lsls	r1, r1, #16
 8002318:	0c09      	lsrs	r1, r1, #16
 800231a:	468c      	mov	ip, r1
 800231c:	0039      	movs	r1, r7
 800231e:	4359      	muls	r1, r3
 8002320:	4343      	muls	r3, r0
 8002322:	4370      	muls	r0, r6
 8002324:	437e      	muls	r6, r7
 8002326:	0c0f      	lsrs	r7, r1, #16
 8002328:	18f6      	adds	r6, r6, r3
 800232a:	0424      	lsls	r4, r4, #16
 800232c:	19be      	adds	r6, r7, r6
 800232e:	4464      	add	r4, ip
 8002330:	4442      	add	r2, r8
 8002332:	468c      	mov	ip, r1
 8002334:	42b3      	cmp	r3, r6
 8002336:	d903      	bls.n	8002340 <__aeabi_dmul+0x2a0>
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	025b      	lsls	r3, r3, #9
 800233c:	4698      	mov	r8, r3
 800233e:	4440      	add	r0, r8
 8002340:	9b02      	ldr	r3, [sp, #8]
 8002342:	4661      	mov	r1, ip
 8002344:	4698      	mov	r8, r3
 8002346:	9b04      	ldr	r3, [sp, #16]
 8002348:	0437      	lsls	r7, r6, #16
 800234a:	4443      	add	r3, r8
 800234c:	469b      	mov	fp, r3
 800234e:	45ab      	cmp	fp, r5
 8002350:	41ad      	sbcs	r5, r5
 8002352:	426b      	negs	r3, r5
 8002354:	040d      	lsls	r5, r1, #16
 8002356:	9905      	ldr	r1, [sp, #20]
 8002358:	0c2d      	lsrs	r5, r5, #16
 800235a:	468c      	mov	ip, r1
 800235c:	197f      	adds	r7, r7, r5
 800235e:	4467      	add	r7, ip
 8002360:	18fd      	adds	r5, r7, r3
 8002362:	46a8      	mov	r8, r5
 8002364:	465d      	mov	r5, fp
 8002366:	192d      	adds	r5, r5, r4
 8002368:	42a5      	cmp	r5, r4
 800236a:	41a4      	sbcs	r4, r4
 800236c:	4693      	mov	fp, r2
 800236e:	4264      	negs	r4, r4
 8002370:	46a4      	mov	ip, r4
 8002372:	44c3      	add	fp, r8
 8002374:	44dc      	add	ip, fp
 8002376:	428f      	cmp	r7, r1
 8002378:	41bf      	sbcs	r7, r7
 800237a:	4598      	cmp	r8, r3
 800237c:	419b      	sbcs	r3, r3
 800237e:	4593      	cmp	fp, r2
 8002380:	4192      	sbcs	r2, r2
 8002382:	45a4      	cmp	ip, r4
 8002384:	41a4      	sbcs	r4, r4
 8002386:	425b      	negs	r3, r3
 8002388:	427f      	negs	r7, r7
 800238a:	431f      	orrs	r7, r3
 800238c:	0c36      	lsrs	r6, r6, #16
 800238e:	4252      	negs	r2, r2
 8002390:	4264      	negs	r4, r4
 8002392:	19bf      	adds	r7, r7, r6
 8002394:	4322      	orrs	r2, r4
 8002396:	18bf      	adds	r7, r7, r2
 8002398:	4662      	mov	r2, ip
 800239a:	1838      	adds	r0, r7, r0
 800239c:	0243      	lsls	r3, r0, #9
 800239e:	0dd2      	lsrs	r2, r2, #23
 80023a0:	9903      	ldr	r1, [sp, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	026a      	lsls	r2, r5, #9
 80023a6:	430a      	orrs	r2, r1
 80023a8:	1e50      	subs	r0, r2, #1
 80023aa:	4182      	sbcs	r2, r0
 80023ac:	4661      	mov	r1, ip
 80023ae:	0ded      	lsrs	r5, r5, #23
 80023b0:	432a      	orrs	r2, r5
 80023b2:	024e      	lsls	r6, r1, #9
 80023b4:	4332      	orrs	r2, r6
 80023b6:	01d9      	lsls	r1, r3, #7
 80023b8:	d400      	bmi.n	80023bc <__aeabi_dmul+0x31c>
 80023ba:	e0b3      	b.n	8002524 <__aeabi_dmul+0x484>
 80023bc:	2601      	movs	r6, #1
 80023be:	0850      	lsrs	r0, r2, #1
 80023c0:	4032      	ands	r2, r6
 80023c2:	4302      	orrs	r2, r0
 80023c4:	07de      	lsls	r6, r3, #31
 80023c6:	4332      	orrs	r2, r6
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	4c22      	ldr	r4, [pc, #136]	; (8002454 <__aeabi_dmul+0x3b4>)
 80023cc:	4454      	add	r4, sl
 80023ce:	2c00      	cmp	r4, #0
 80023d0:	dd62      	ble.n	8002498 <__aeabi_dmul+0x3f8>
 80023d2:	0751      	lsls	r1, r2, #29
 80023d4:	d009      	beq.n	80023ea <__aeabi_dmul+0x34a>
 80023d6:	200f      	movs	r0, #15
 80023d8:	4010      	ands	r0, r2
 80023da:	2804      	cmp	r0, #4
 80023dc:	d005      	beq.n	80023ea <__aeabi_dmul+0x34a>
 80023de:	1d10      	adds	r0, r2, #4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	4192      	sbcs	r2, r2
 80023e4:	4252      	negs	r2, r2
 80023e6:	189b      	adds	r3, r3, r2
 80023e8:	0002      	movs	r2, r0
 80023ea:	01d9      	lsls	r1, r3, #7
 80023ec:	d504      	bpl.n	80023f8 <__aeabi_dmul+0x358>
 80023ee:	2480      	movs	r4, #128	; 0x80
 80023f0:	4819      	ldr	r0, [pc, #100]	; (8002458 <__aeabi_dmul+0x3b8>)
 80023f2:	00e4      	lsls	r4, r4, #3
 80023f4:	4003      	ands	r3, r0
 80023f6:	4454      	add	r4, sl
 80023f8:	4818      	ldr	r0, [pc, #96]	; (800245c <__aeabi_dmul+0x3bc>)
 80023fa:	4284      	cmp	r4, r0
 80023fc:	dd00      	ble.n	8002400 <__aeabi_dmul+0x360>
 80023fe:	e727      	b.n	8002250 <__aeabi_dmul+0x1b0>
 8002400:	075e      	lsls	r6, r3, #29
 8002402:	025b      	lsls	r3, r3, #9
 8002404:	08d2      	lsrs	r2, r2, #3
 8002406:	0b1f      	lsrs	r7, r3, #12
 8002408:	0563      	lsls	r3, r4, #21
 800240a:	4316      	orrs	r6, r2
 800240c:	0d5b      	lsrs	r3, r3, #21
 800240e:	e6b2      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002410:	2300      	movs	r3, #0
 8002412:	4699      	mov	r9, r3
 8002414:	3301      	adds	r3, #1
 8002416:	2704      	movs	r7, #4
 8002418:	2600      	movs	r6, #0
 800241a:	469b      	mov	fp, r3
 800241c:	e664      	b.n	80020e8 <__aeabi_dmul+0x48>
 800241e:	2303      	movs	r3, #3
 8002420:	9701      	str	r7, [sp, #4]
 8002422:	4681      	mov	r9, r0
 8002424:	270c      	movs	r7, #12
 8002426:	469b      	mov	fp, r3
 8002428:	e65e      	b.n	80020e8 <__aeabi_dmul+0x48>
 800242a:	2201      	movs	r2, #1
 800242c:	2001      	movs	r0, #1
 800242e:	4317      	orrs	r7, r2
 8002430:	2200      	movs	r2, #0
 8002432:	e676      	b.n	8002122 <__aeabi_dmul+0x82>
 8002434:	2303      	movs	r3, #3
 8002436:	2003      	movs	r0, #3
 8002438:	431f      	orrs	r7, r3
 800243a:	4643      	mov	r3, r8
 800243c:	e671      	b.n	8002122 <__aeabi_dmul+0x82>
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	000007ff 	.word	0x000007ff
 8002444:	fffffc01 	.word	0xfffffc01
 8002448:	080190a4 	.word	0x080190a4
 800244c:	800fffff 	.word	0x800fffff
 8002450:	fffffc0d 	.word	0xfffffc0d
 8002454:	000003ff 	.word	0x000003ff
 8002458:	feffffff 	.word	0xfeffffff
 800245c:	000007fe 	.word	0x000007fe
 8002460:	2300      	movs	r3, #0
 8002462:	2780      	movs	r7, #128	; 0x80
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	033f      	lsls	r7, r7, #12
 8002468:	2600      	movs	r6, #0
 800246a:	4b43      	ldr	r3, [pc, #268]	; (8002578 <__aeabi_dmul+0x4d8>)
 800246c:	e683      	b.n	8002176 <__aeabi_dmul+0xd6>
 800246e:	9b01      	ldr	r3, [sp, #4]
 8002470:	0032      	movs	r2, r6
 8002472:	46a4      	mov	ip, r4
 8002474:	4658      	mov	r0, fp
 8002476:	e670      	b.n	800215a <__aeabi_dmul+0xba>
 8002478:	46ac      	mov	ip, r5
 800247a:	e66e      	b.n	800215a <__aeabi_dmul+0xba>
 800247c:	2780      	movs	r7, #128	; 0x80
 800247e:	9901      	ldr	r1, [sp, #4]
 8002480:	033f      	lsls	r7, r7, #12
 8002482:	4239      	tst	r1, r7
 8002484:	d02d      	beq.n	80024e2 <__aeabi_dmul+0x442>
 8002486:	423b      	tst	r3, r7
 8002488:	d12b      	bne.n	80024e2 <__aeabi_dmul+0x442>
 800248a:	431f      	orrs	r7, r3
 800248c:	033f      	lsls	r7, r7, #12
 800248e:	0b3f      	lsrs	r7, r7, #12
 8002490:	9500      	str	r5, [sp, #0]
 8002492:	0016      	movs	r6, r2
 8002494:	4b38      	ldr	r3, [pc, #224]	; (8002578 <__aeabi_dmul+0x4d8>)
 8002496:	e66e      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002498:	2501      	movs	r5, #1
 800249a:	1b2d      	subs	r5, r5, r4
 800249c:	2d38      	cmp	r5, #56	; 0x38
 800249e:	dd00      	ble.n	80024a2 <__aeabi_dmul+0x402>
 80024a0:	e666      	b.n	8002170 <__aeabi_dmul+0xd0>
 80024a2:	2d1f      	cmp	r5, #31
 80024a4:	dc40      	bgt.n	8002528 <__aeabi_dmul+0x488>
 80024a6:	4835      	ldr	r0, [pc, #212]	; (800257c <__aeabi_dmul+0x4dc>)
 80024a8:	001c      	movs	r4, r3
 80024aa:	4450      	add	r0, sl
 80024ac:	0016      	movs	r6, r2
 80024ae:	4082      	lsls	r2, r0
 80024b0:	4084      	lsls	r4, r0
 80024b2:	40ee      	lsrs	r6, r5
 80024b4:	1e50      	subs	r0, r2, #1
 80024b6:	4182      	sbcs	r2, r0
 80024b8:	4334      	orrs	r4, r6
 80024ba:	4314      	orrs	r4, r2
 80024bc:	40eb      	lsrs	r3, r5
 80024be:	0762      	lsls	r2, r4, #29
 80024c0:	d009      	beq.n	80024d6 <__aeabi_dmul+0x436>
 80024c2:	220f      	movs	r2, #15
 80024c4:	4022      	ands	r2, r4
 80024c6:	2a04      	cmp	r2, #4
 80024c8:	d005      	beq.n	80024d6 <__aeabi_dmul+0x436>
 80024ca:	0022      	movs	r2, r4
 80024cc:	1d14      	adds	r4, r2, #4
 80024ce:	4294      	cmp	r4, r2
 80024d0:	4180      	sbcs	r0, r0
 80024d2:	4240      	negs	r0, r0
 80024d4:	181b      	adds	r3, r3, r0
 80024d6:	021a      	lsls	r2, r3, #8
 80024d8:	d53e      	bpl.n	8002558 <__aeabi_dmul+0x4b8>
 80024da:	2301      	movs	r3, #1
 80024dc:	2700      	movs	r7, #0
 80024de:	2600      	movs	r6, #0
 80024e0:	e649      	b.n	8002176 <__aeabi_dmul+0xd6>
 80024e2:	2780      	movs	r7, #128	; 0x80
 80024e4:	9b01      	ldr	r3, [sp, #4]
 80024e6:	033f      	lsls	r7, r7, #12
 80024e8:	431f      	orrs	r7, r3
 80024ea:	033f      	lsls	r7, r7, #12
 80024ec:	0b3f      	lsrs	r7, r7, #12
 80024ee:	9400      	str	r4, [sp, #0]
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <__aeabi_dmul+0x4d8>)
 80024f2:	e640      	b.n	8002176 <__aeabi_dmul+0xd6>
 80024f4:	0003      	movs	r3, r0
 80024f6:	465a      	mov	r2, fp
 80024f8:	3b28      	subs	r3, #40	; 0x28
 80024fa:	409a      	lsls	r2, r3
 80024fc:	2600      	movs	r6, #0
 80024fe:	9201      	str	r2, [sp, #4]
 8002500:	e66d      	b.n	80021de <__aeabi_dmul+0x13e>
 8002502:	4658      	mov	r0, fp
 8002504:	f000 fd1a 	bl	8002f3c <__clzsi2>
 8002508:	3020      	adds	r0, #32
 800250a:	e657      	b.n	80021bc <__aeabi_dmul+0x11c>
 800250c:	0003      	movs	r3, r0
 800250e:	4652      	mov	r2, sl
 8002510:	3b28      	subs	r3, #40	; 0x28
 8002512:	409a      	lsls	r2, r3
 8002514:	0013      	movs	r3, r2
 8002516:	2200      	movs	r2, #0
 8002518:	e693      	b.n	8002242 <__aeabi_dmul+0x1a2>
 800251a:	4650      	mov	r0, sl
 800251c:	f000 fd0e 	bl	8002f3c <__clzsi2>
 8002520:	3020      	adds	r0, #32
 8002522:	e67b      	b.n	800221c <__aeabi_dmul+0x17c>
 8002524:	46ca      	mov	sl, r9
 8002526:	e750      	b.n	80023ca <__aeabi_dmul+0x32a>
 8002528:	201f      	movs	r0, #31
 800252a:	001e      	movs	r6, r3
 800252c:	4240      	negs	r0, r0
 800252e:	1b04      	subs	r4, r0, r4
 8002530:	40e6      	lsrs	r6, r4
 8002532:	2d20      	cmp	r5, #32
 8002534:	d003      	beq.n	800253e <__aeabi_dmul+0x49e>
 8002536:	4c12      	ldr	r4, [pc, #72]	; (8002580 <__aeabi_dmul+0x4e0>)
 8002538:	4454      	add	r4, sl
 800253a:	40a3      	lsls	r3, r4
 800253c:	431a      	orrs	r2, r3
 800253e:	1e50      	subs	r0, r2, #1
 8002540:	4182      	sbcs	r2, r0
 8002542:	4332      	orrs	r2, r6
 8002544:	2607      	movs	r6, #7
 8002546:	2700      	movs	r7, #0
 8002548:	4016      	ands	r6, r2
 800254a:	d009      	beq.n	8002560 <__aeabi_dmul+0x4c0>
 800254c:	200f      	movs	r0, #15
 800254e:	2300      	movs	r3, #0
 8002550:	4010      	ands	r0, r2
 8002552:	0014      	movs	r4, r2
 8002554:	2804      	cmp	r0, #4
 8002556:	d1b9      	bne.n	80024cc <__aeabi_dmul+0x42c>
 8002558:	0022      	movs	r2, r4
 800255a:	075e      	lsls	r6, r3, #29
 800255c:	025b      	lsls	r3, r3, #9
 800255e:	0b1f      	lsrs	r7, r3, #12
 8002560:	08d2      	lsrs	r2, r2, #3
 8002562:	4316      	orrs	r6, r2
 8002564:	2300      	movs	r3, #0
 8002566:	e606      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002568:	2780      	movs	r7, #128	; 0x80
 800256a:	033f      	lsls	r7, r7, #12
 800256c:	431f      	orrs	r7, r3
 800256e:	033f      	lsls	r7, r7, #12
 8002570:	0b3f      	lsrs	r7, r7, #12
 8002572:	0016      	movs	r6, r2
 8002574:	4b00      	ldr	r3, [pc, #0]	; (8002578 <__aeabi_dmul+0x4d8>)
 8002576:	e5fe      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002578:	000007ff 	.word	0x000007ff
 800257c:	0000041e 	.word	0x0000041e
 8002580:	0000043e 	.word	0x0000043e

08002584 <__aeabi_dsub>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	4657      	mov	r7, sl
 8002588:	464e      	mov	r6, r9
 800258a:	4645      	mov	r5, r8
 800258c:	46de      	mov	lr, fp
 800258e:	000c      	movs	r4, r1
 8002590:	0309      	lsls	r1, r1, #12
 8002592:	b5e0      	push	{r5, r6, r7, lr}
 8002594:	0a49      	lsrs	r1, r1, #9
 8002596:	0f46      	lsrs	r6, r0, #29
 8002598:	005f      	lsls	r7, r3, #1
 800259a:	4331      	orrs	r1, r6
 800259c:	031e      	lsls	r6, r3, #12
 800259e:	0fdb      	lsrs	r3, r3, #31
 80025a0:	0a76      	lsrs	r6, r6, #9
 80025a2:	469b      	mov	fp, r3
 80025a4:	0f53      	lsrs	r3, r2, #29
 80025a6:	4333      	orrs	r3, r6
 80025a8:	4ec8      	ldr	r6, [pc, #800]	; (80028cc <__aeabi_dsub+0x348>)
 80025aa:	0065      	lsls	r5, r4, #1
 80025ac:	00c0      	lsls	r0, r0, #3
 80025ae:	0fe4      	lsrs	r4, r4, #31
 80025b0:	00d2      	lsls	r2, r2, #3
 80025b2:	0d6d      	lsrs	r5, r5, #21
 80025b4:	46a2      	mov	sl, r4
 80025b6:	4681      	mov	r9, r0
 80025b8:	0d7f      	lsrs	r7, r7, #21
 80025ba:	469c      	mov	ip, r3
 80025bc:	4690      	mov	r8, r2
 80025be:	42b7      	cmp	r7, r6
 80025c0:	d100      	bne.n	80025c4 <__aeabi_dsub+0x40>
 80025c2:	e0b9      	b.n	8002738 <__aeabi_dsub+0x1b4>
 80025c4:	465b      	mov	r3, fp
 80025c6:	2601      	movs	r6, #1
 80025c8:	4073      	eors	r3, r6
 80025ca:	469b      	mov	fp, r3
 80025cc:	1bee      	subs	r6, r5, r7
 80025ce:	45a3      	cmp	fp, r4
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x50>
 80025d2:	e083      	b.n	80026dc <__aeabi_dsub+0x158>
 80025d4:	2e00      	cmp	r6, #0
 80025d6:	dd63      	ble.n	80026a0 <__aeabi_dsub+0x11c>
 80025d8:	2f00      	cmp	r7, #0
 80025da:	d000      	beq.n	80025de <__aeabi_dsub+0x5a>
 80025dc:	e0b1      	b.n	8002742 <__aeabi_dsub+0x1be>
 80025de:	4663      	mov	r3, ip
 80025e0:	4313      	orrs	r3, r2
 80025e2:	d100      	bne.n	80025e6 <__aeabi_dsub+0x62>
 80025e4:	e123      	b.n	800282e <__aeabi_dsub+0x2aa>
 80025e6:	1e73      	subs	r3, r6, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d000      	beq.n	80025ee <__aeabi_dsub+0x6a>
 80025ec:	e1ba      	b.n	8002964 <__aeabi_dsub+0x3e0>
 80025ee:	1a86      	subs	r6, r0, r2
 80025f0:	4663      	mov	r3, ip
 80025f2:	42b0      	cmp	r0, r6
 80025f4:	4180      	sbcs	r0, r0
 80025f6:	2501      	movs	r5, #1
 80025f8:	1ac9      	subs	r1, r1, r3
 80025fa:	4240      	negs	r0, r0
 80025fc:	1a09      	subs	r1, r1, r0
 80025fe:	020b      	lsls	r3, r1, #8
 8002600:	d400      	bmi.n	8002604 <__aeabi_dsub+0x80>
 8002602:	e147      	b.n	8002894 <__aeabi_dsub+0x310>
 8002604:	0249      	lsls	r1, r1, #9
 8002606:	0a4b      	lsrs	r3, r1, #9
 8002608:	4698      	mov	r8, r3
 800260a:	4643      	mov	r3, r8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d100      	bne.n	8002612 <__aeabi_dsub+0x8e>
 8002610:	e189      	b.n	8002926 <__aeabi_dsub+0x3a2>
 8002612:	4640      	mov	r0, r8
 8002614:	f000 fc92 	bl	8002f3c <__clzsi2>
 8002618:	0003      	movs	r3, r0
 800261a:	3b08      	subs	r3, #8
 800261c:	2b1f      	cmp	r3, #31
 800261e:	dd00      	ble.n	8002622 <__aeabi_dsub+0x9e>
 8002620:	e17c      	b.n	800291c <__aeabi_dsub+0x398>
 8002622:	2220      	movs	r2, #32
 8002624:	0030      	movs	r0, r6
 8002626:	1ad2      	subs	r2, r2, r3
 8002628:	4641      	mov	r1, r8
 800262a:	40d0      	lsrs	r0, r2
 800262c:	4099      	lsls	r1, r3
 800262e:	0002      	movs	r2, r0
 8002630:	409e      	lsls	r6, r3
 8002632:	430a      	orrs	r2, r1
 8002634:	429d      	cmp	r5, r3
 8002636:	dd00      	ble.n	800263a <__aeabi_dsub+0xb6>
 8002638:	e16a      	b.n	8002910 <__aeabi_dsub+0x38c>
 800263a:	1b5d      	subs	r5, r3, r5
 800263c:	1c6b      	adds	r3, r5, #1
 800263e:	2b1f      	cmp	r3, #31
 8002640:	dd00      	ble.n	8002644 <__aeabi_dsub+0xc0>
 8002642:	e194      	b.n	800296e <__aeabi_dsub+0x3ea>
 8002644:	2120      	movs	r1, #32
 8002646:	0010      	movs	r0, r2
 8002648:	0035      	movs	r5, r6
 800264a:	1ac9      	subs	r1, r1, r3
 800264c:	408e      	lsls	r6, r1
 800264e:	40da      	lsrs	r2, r3
 8002650:	4088      	lsls	r0, r1
 8002652:	40dd      	lsrs	r5, r3
 8002654:	1e71      	subs	r1, r6, #1
 8002656:	418e      	sbcs	r6, r1
 8002658:	0011      	movs	r1, r2
 800265a:	2207      	movs	r2, #7
 800265c:	4328      	orrs	r0, r5
 800265e:	2500      	movs	r5, #0
 8002660:	4306      	orrs	r6, r0
 8002662:	4032      	ands	r2, r6
 8002664:	2a00      	cmp	r2, #0
 8002666:	d009      	beq.n	800267c <__aeabi_dsub+0xf8>
 8002668:	230f      	movs	r3, #15
 800266a:	4033      	ands	r3, r6
 800266c:	2b04      	cmp	r3, #4
 800266e:	d005      	beq.n	800267c <__aeabi_dsub+0xf8>
 8002670:	1d33      	adds	r3, r6, #4
 8002672:	42b3      	cmp	r3, r6
 8002674:	41b6      	sbcs	r6, r6
 8002676:	4276      	negs	r6, r6
 8002678:	1989      	adds	r1, r1, r6
 800267a:	001e      	movs	r6, r3
 800267c:	020b      	lsls	r3, r1, #8
 800267e:	d400      	bmi.n	8002682 <__aeabi_dsub+0xfe>
 8002680:	e23d      	b.n	8002afe <__aeabi_dsub+0x57a>
 8002682:	1c6a      	adds	r2, r5, #1
 8002684:	4b91      	ldr	r3, [pc, #580]	; (80028cc <__aeabi_dsub+0x348>)
 8002686:	0555      	lsls	r5, r2, #21
 8002688:	0d6d      	lsrs	r5, r5, #21
 800268a:	429a      	cmp	r2, r3
 800268c:	d100      	bne.n	8002690 <__aeabi_dsub+0x10c>
 800268e:	e119      	b.n	80028c4 <__aeabi_dsub+0x340>
 8002690:	4a8f      	ldr	r2, [pc, #572]	; (80028d0 <__aeabi_dsub+0x34c>)
 8002692:	08f6      	lsrs	r6, r6, #3
 8002694:	400a      	ands	r2, r1
 8002696:	0757      	lsls	r7, r2, #29
 8002698:	0252      	lsls	r2, r2, #9
 800269a:	4337      	orrs	r7, r6
 800269c:	0b12      	lsrs	r2, r2, #12
 800269e:	e09b      	b.n	80027d8 <__aeabi_dsub+0x254>
 80026a0:	2e00      	cmp	r6, #0
 80026a2:	d000      	beq.n	80026a6 <__aeabi_dsub+0x122>
 80026a4:	e0c5      	b.n	8002832 <__aeabi_dsub+0x2ae>
 80026a6:	1c6e      	adds	r6, r5, #1
 80026a8:	0576      	lsls	r6, r6, #21
 80026aa:	0d76      	lsrs	r6, r6, #21
 80026ac:	2e01      	cmp	r6, #1
 80026ae:	dc00      	bgt.n	80026b2 <__aeabi_dsub+0x12e>
 80026b0:	e148      	b.n	8002944 <__aeabi_dsub+0x3c0>
 80026b2:	4667      	mov	r7, ip
 80026b4:	1a86      	subs	r6, r0, r2
 80026b6:	1bcb      	subs	r3, r1, r7
 80026b8:	42b0      	cmp	r0, r6
 80026ba:	41bf      	sbcs	r7, r7
 80026bc:	427f      	negs	r7, r7
 80026be:	46b8      	mov	r8, r7
 80026c0:	001f      	movs	r7, r3
 80026c2:	4643      	mov	r3, r8
 80026c4:	1aff      	subs	r7, r7, r3
 80026c6:	003b      	movs	r3, r7
 80026c8:	46b8      	mov	r8, r7
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	d500      	bpl.n	80026d0 <__aeabi_dsub+0x14c>
 80026ce:	e15f      	b.n	8002990 <__aeabi_dsub+0x40c>
 80026d0:	4337      	orrs	r7, r6
 80026d2:	d19a      	bne.n	800260a <__aeabi_dsub+0x86>
 80026d4:	2200      	movs	r2, #0
 80026d6:	2400      	movs	r4, #0
 80026d8:	2500      	movs	r5, #0
 80026da:	e079      	b.n	80027d0 <__aeabi_dsub+0x24c>
 80026dc:	2e00      	cmp	r6, #0
 80026de:	dc00      	bgt.n	80026e2 <__aeabi_dsub+0x15e>
 80026e0:	e0fa      	b.n	80028d8 <__aeabi_dsub+0x354>
 80026e2:	2f00      	cmp	r7, #0
 80026e4:	d100      	bne.n	80026e8 <__aeabi_dsub+0x164>
 80026e6:	e08d      	b.n	8002804 <__aeabi_dsub+0x280>
 80026e8:	4b78      	ldr	r3, [pc, #480]	; (80028cc <__aeabi_dsub+0x348>)
 80026ea:	429d      	cmp	r5, r3
 80026ec:	d067      	beq.n	80027be <__aeabi_dsub+0x23a>
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	4667      	mov	r7, ip
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	431f      	orrs	r7, r3
 80026f6:	46bc      	mov	ip, r7
 80026f8:	2e38      	cmp	r6, #56	; 0x38
 80026fa:	dc00      	bgt.n	80026fe <__aeabi_dsub+0x17a>
 80026fc:	e152      	b.n	80029a4 <__aeabi_dsub+0x420>
 80026fe:	4663      	mov	r3, ip
 8002700:	4313      	orrs	r3, r2
 8002702:	1e5a      	subs	r2, r3, #1
 8002704:	4193      	sbcs	r3, r2
 8002706:	181e      	adds	r6, r3, r0
 8002708:	4286      	cmp	r6, r0
 800270a:	4180      	sbcs	r0, r0
 800270c:	4240      	negs	r0, r0
 800270e:	1809      	adds	r1, r1, r0
 8002710:	020b      	lsls	r3, r1, #8
 8002712:	d400      	bmi.n	8002716 <__aeabi_dsub+0x192>
 8002714:	e0be      	b.n	8002894 <__aeabi_dsub+0x310>
 8002716:	4b6d      	ldr	r3, [pc, #436]	; (80028cc <__aeabi_dsub+0x348>)
 8002718:	3501      	adds	r5, #1
 800271a:	429d      	cmp	r5, r3
 800271c:	d100      	bne.n	8002720 <__aeabi_dsub+0x19c>
 800271e:	e0d2      	b.n	80028c6 <__aeabi_dsub+0x342>
 8002720:	4a6b      	ldr	r2, [pc, #428]	; (80028d0 <__aeabi_dsub+0x34c>)
 8002722:	0873      	lsrs	r3, r6, #1
 8002724:	400a      	ands	r2, r1
 8002726:	2101      	movs	r1, #1
 8002728:	400e      	ands	r6, r1
 800272a:	431e      	orrs	r6, r3
 800272c:	0851      	lsrs	r1, r2, #1
 800272e:	07d3      	lsls	r3, r2, #31
 8002730:	2207      	movs	r2, #7
 8002732:	431e      	orrs	r6, r3
 8002734:	4032      	ands	r2, r6
 8002736:	e795      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002738:	001e      	movs	r6, r3
 800273a:	4316      	orrs	r6, r2
 800273c:	d000      	beq.n	8002740 <__aeabi_dsub+0x1bc>
 800273e:	e745      	b.n	80025cc <__aeabi_dsub+0x48>
 8002740:	e740      	b.n	80025c4 <__aeabi_dsub+0x40>
 8002742:	4b62      	ldr	r3, [pc, #392]	; (80028cc <__aeabi_dsub+0x348>)
 8002744:	429d      	cmp	r5, r3
 8002746:	d03a      	beq.n	80027be <__aeabi_dsub+0x23a>
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	4667      	mov	r7, ip
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	431f      	orrs	r7, r3
 8002750:	46bc      	mov	ip, r7
 8002752:	2e38      	cmp	r6, #56	; 0x38
 8002754:	dd00      	ble.n	8002758 <__aeabi_dsub+0x1d4>
 8002756:	e0eb      	b.n	8002930 <__aeabi_dsub+0x3ac>
 8002758:	2e1f      	cmp	r6, #31
 800275a:	dc00      	bgt.n	800275e <__aeabi_dsub+0x1da>
 800275c:	e13a      	b.n	80029d4 <__aeabi_dsub+0x450>
 800275e:	0033      	movs	r3, r6
 8002760:	4667      	mov	r7, ip
 8002762:	3b20      	subs	r3, #32
 8002764:	40df      	lsrs	r7, r3
 8002766:	003b      	movs	r3, r7
 8002768:	2e20      	cmp	r6, #32
 800276a:	d005      	beq.n	8002778 <__aeabi_dsub+0x1f4>
 800276c:	2740      	movs	r7, #64	; 0x40
 800276e:	1bbf      	subs	r7, r7, r6
 8002770:	4666      	mov	r6, ip
 8002772:	40be      	lsls	r6, r7
 8002774:	4332      	orrs	r2, r6
 8002776:	4690      	mov	r8, r2
 8002778:	4646      	mov	r6, r8
 800277a:	1e72      	subs	r2, r6, #1
 800277c:	4196      	sbcs	r6, r2
 800277e:	4333      	orrs	r3, r6
 8002780:	e0da      	b.n	8002938 <__aeabi_dsub+0x3b4>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d100      	bne.n	8002788 <__aeabi_dsub+0x204>
 8002786:	e214      	b.n	8002bb2 <__aeabi_dsub+0x62e>
 8002788:	4663      	mov	r3, ip
 800278a:	4313      	orrs	r3, r2
 800278c:	d100      	bne.n	8002790 <__aeabi_dsub+0x20c>
 800278e:	e168      	b.n	8002a62 <__aeabi_dsub+0x4de>
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	074e      	lsls	r6, r1, #29
 8002794:	08c0      	lsrs	r0, r0, #3
 8002796:	08c9      	lsrs	r1, r1, #3
 8002798:	031b      	lsls	r3, r3, #12
 800279a:	4306      	orrs	r6, r0
 800279c:	4219      	tst	r1, r3
 800279e:	d008      	beq.n	80027b2 <__aeabi_dsub+0x22e>
 80027a0:	4660      	mov	r0, ip
 80027a2:	08c0      	lsrs	r0, r0, #3
 80027a4:	4218      	tst	r0, r3
 80027a6:	d104      	bne.n	80027b2 <__aeabi_dsub+0x22e>
 80027a8:	4663      	mov	r3, ip
 80027aa:	0001      	movs	r1, r0
 80027ac:	08d2      	lsrs	r2, r2, #3
 80027ae:	075e      	lsls	r6, r3, #29
 80027b0:	4316      	orrs	r6, r2
 80027b2:	00f3      	lsls	r3, r6, #3
 80027b4:	4699      	mov	r9, r3
 80027b6:	00c9      	lsls	r1, r1, #3
 80027b8:	0f72      	lsrs	r2, r6, #29
 80027ba:	4d44      	ldr	r5, [pc, #272]	; (80028cc <__aeabi_dsub+0x348>)
 80027bc:	4311      	orrs	r1, r2
 80027be:	464b      	mov	r3, r9
 80027c0:	08de      	lsrs	r6, r3, #3
 80027c2:	4b42      	ldr	r3, [pc, #264]	; (80028cc <__aeabi_dsub+0x348>)
 80027c4:	074f      	lsls	r7, r1, #29
 80027c6:	4337      	orrs	r7, r6
 80027c8:	08ca      	lsrs	r2, r1, #3
 80027ca:	429d      	cmp	r5, r3
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x24c>
 80027ce:	e06e      	b.n	80028ae <__aeabi_dsub+0x32a>
 80027d0:	0312      	lsls	r2, r2, #12
 80027d2:	056d      	lsls	r5, r5, #21
 80027d4:	0b12      	lsrs	r2, r2, #12
 80027d6:	0d6d      	lsrs	r5, r5, #21
 80027d8:	2100      	movs	r1, #0
 80027da:	0312      	lsls	r2, r2, #12
 80027dc:	0b13      	lsrs	r3, r2, #12
 80027de:	0d0a      	lsrs	r2, r1, #20
 80027e0:	0512      	lsls	r2, r2, #20
 80027e2:	431a      	orrs	r2, r3
 80027e4:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <__aeabi_dsub+0x350>)
 80027e6:	052d      	lsls	r5, r5, #20
 80027e8:	4013      	ands	r3, r2
 80027ea:	432b      	orrs	r3, r5
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	07e4      	lsls	r4, r4, #31
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	4323      	orrs	r3, r4
 80027f4:	0038      	movs	r0, r7
 80027f6:	0019      	movs	r1, r3
 80027f8:	bc3c      	pop	{r2, r3, r4, r5}
 80027fa:	4690      	mov	r8, r2
 80027fc:	4699      	mov	r9, r3
 80027fe:	46a2      	mov	sl, r4
 8002800:	46ab      	mov	fp, r5
 8002802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002804:	4663      	mov	r3, ip
 8002806:	4313      	orrs	r3, r2
 8002808:	d011      	beq.n	800282e <__aeabi_dsub+0x2aa>
 800280a:	1e73      	subs	r3, r6, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d000      	beq.n	8002812 <__aeabi_dsub+0x28e>
 8002810:	e107      	b.n	8002a22 <__aeabi_dsub+0x49e>
 8002812:	1886      	adds	r6, r0, r2
 8002814:	4286      	cmp	r6, r0
 8002816:	4180      	sbcs	r0, r0
 8002818:	4461      	add	r1, ip
 800281a:	4240      	negs	r0, r0
 800281c:	1809      	adds	r1, r1, r0
 800281e:	2501      	movs	r5, #1
 8002820:	020b      	lsls	r3, r1, #8
 8002822:	d537      	bpl.n	8002894 <__aeabi_dsub+0x310>
 8002824:	2502      	movs	r5, #2
 8002826:	e77b      	b.n	8002720 <__aeabi_dsub+0x19c>
 8002828:	003e      	movs	r6, r7
 800282a:	4661      	mov	r1, ip
 800282c:	4691      	mov	r9, r2
 800282e:	0035      	movs	r5, r6
 8002830:	e7c5      	b.n	80027be <__aeabi_dsub+0x23a>
 8002832:	465c      	mov	r4, fp
 8002834:	2d00      	cmp	r5, #0
 8002836:	d000      	beq.n	800283a <__aeabi_dsub+0x2b6>
 8002838:	e0e1      	b.n	80029fe <__aeabi_dsub+0x47a>
 800283a:	000b      	movs	r3, r1
 800283c:	4303      	orrs	r3, r0
 800283e:	d0f3      	beq.n	8002828 <__aeabi_dsub+0x2a4>
 8002840:	1c73      	adds	r3, r6, #1
 8002842:	d100      	bne.n	8002846 <__aeabi_dsub+0x2c2>
 8002844:	e1ac      	b.n	8002ba0 <__aeabi_dsub+0x61c>
 8002846:	4b21      	ldr	r3, [pc, #132]	; (80028cc <__aeabi_dsub+0x348>)
 8002848:	429f      	cmp	r7, r3
 800284a:	d100      	bne.n	800284e <__aeabi_dsub+0x2ca>
 800284c:	e13a      	b.n	8002ac4 <__aeabi_dsub+0x540>
 800284e:	43f3      	mvns	r3, r6
 8002850:	2b38      	cmp	r3, #56	; 0x38
 8002852:	dd00      	ble.n	8002856 <__aeabi_dsub+0x2d2>
 8002854:	e16f      	b.n	8002b36 <__aeabi_dsub+0x5b2>
 8002856:	2b1f      	cmp	r3, #31
 8002858:	dd00      	ble.n	800285c <__aeabi_dsub+0x2d8>
 800285a:	e18c      	b.n	8002b76 <__aeabi_dsub+0x5f2>
 800285c:	2520      	movs	r5, #32
 800285e:	000e      	movs	r6, r1
 8002860:	1aed      	subs	r5, r5, r3
 8002862:	40ae      	lsls	r6, r5
 8002864:	46b0      	mov	r8, r6
 8002866:	0006      	movs	r6, r0
 8002868:	46aa      	mov	sl, r5
 800286a:	40de      	lsrs	r6, r3
 800286c:	4645      	mov	r5, r8
 800286e:	4335      	orrs	r5, r6
 8002870:	002e      	movs	r6, r5
 8002872:	4655      	mov	r5, sl
 8002874:	40d9      	lsrs	r1, r3
 8002876:	40a8      	lsls	r0, r5
 8002878:	4663      	mov	r3, ip
 800287a:	1e45      	subs	r5, r0, #1
 800287c:	41a8      	sbcs	r0, r5
 800287e:	1a5b      	subs	r3, r3, r1
 8002880:	469c      	mov	ip, r3
 8002882:	4330      	orrs	r0, r6
 8002884:	1a16      	subs	r6, r2, r0
 8002886:	42b2      	cmp	r2, r6
 8002888:	4192      	sbcs	r2, r2
 800288a:	4663      	mov	r3, ip
 800288c:	4252      	negs	r2, r2
 800288e:	1a99      	subs	r1, r3, r2
 8002890:	003d      	movs	r5, r7
 8002892:	e6b4      	b.n	80025fe <__aeabi_dsub+0x7a>
 8002894:	2207      	movs	r2, #7
 8002896:	4032      	ands	r2, r6
 8002898:	2a00      	cmp	r2, #0
 800289a:	d000      	beq.n	800289e <__aeabi_dsub+0x31a>
 800289c:	e6e4      	b.n	8002668 <__aeabi_dsub+0xe4>
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <__aeabi_dsub+0x348>)
 80028a0:	08f6      	lsrs	r6, r6, #3
 80028a2:	074f      	lsls	r7, r1, #29
 80028a4:	4337      	orrs	r7, r6
 80028a6:	08ca      	lsrs	r2, r1, #3
 80028a8:	429d      	cmp	r5, r3
 80028aa:	d000      	beq.n	80028ae <__aeabi_dsub+0x32a>
 80028ac:	e790      	b.n	80027d0 <__aeabi_dsub+0x24c>
 80028ae:	003b      	movs	r3, r7
 80028b0:	4313      	orrs	r3, r2
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dsub+0x332>
 80028b4:	e1a6      	b.n	8002c04 <__aeabi_dsub+0x680>
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	031b      	lsls	r3, r3, #12
 80028ba:	431a      	orrs	r2, r3
 80028bc:	0312      	lsls	r2, r2, #12
 80028be:	0b12      	lsrs	r2, r2, #12
 80028c0:	4d02      	ldr	r5, [pc, #8]	; (80028cc <__aeabi_dsub+0x348>)
 80028c2:	e789      	b.n	80027d8 <__aeabi_dsub+0x254>
 80028c4:	0015      	movs	r5, r2
 80028c6:	2200      	movs	r2, #0
 80028c8:	2700      	movs	r7, #0
 80028ca:	e785      	b.n	80027d8 <__aeabi_dsub+0x254>
 80028cc:	000007ff 	.word	0x000007ff
 80028d0:	ff7fffff 	.word	0xff7fffff
 80028d4:	800fffff 	.word	0x800fffff
 80028d8:	2e00      	cmp	r6, #0
 80028da:	d000      	beq.n	80028de <__aeabi_dsub+0x35a>
 80028dc:	e0c7      	b.n	8002a6e <__aeabi_dsub+0x4ea>
 80028de:	1c6b      	adds	r3, r5, #1
 80028e0:	055e      	lsls	r6, r3, #21
 80028e2:	0d76      	lsrs	r6, r6, #21
 80028e4:	2e01      	cmp	r6, #1
 80028e6:	dc00      	bgt.n	80028ea <__aeabi_dsub+0x366>
 80028e8:	e0f0      	b.n	8002acc <__aeabi_dsub+0x548>
 80028ea:	4dc8      	ldr	r5, [pc, #800]	; (8002c0c <__aeabi_dsub+0x688>)
 80028ec:	42ab      	cmp	r3, r5
 80028ee:	d100      	bne.n	80028f2 <__aeabi_dsub+0x36e>
 80028f0:	e0b9      	b.n	8002a66 <__aeabi_dsub+0x4e2>
 80028f2:	1885      	adds	r5, r0, r2
 80028f4:	000a      	movs	r2, r1
 80028f6:	4285      	cmp	r5, r0
 80028f8:	4189      	sbcs	r1, r1
 80028fa:	4462      	add	r2, ip
 80028fc:	4249      	negs	r1, r1
 80028fe:	1851      	adds	r1, r2, r1
 8002900:	2207      	movs	r2, #7
 8002902:	07ce      	lsls	r6, r1, #31
 8002904:	086d      	lsrs	r5, r5, #1
 8002906:	432e      	orrs	r6, r5
 8002908:	0849      	lsrs	r1, r1, #1
 800290a:	4032      	ands	r2, r6
 800290c:	001d      	movs	r5, r3
 800290e:	e6a9      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002910:	49bf      	ldr	r1, [pc, #764]	; (8002c10 <__aeabi_dsub+0x68c>)
 8002912:	1aed      	subs	r5, r5, r3
 8002914:	4011      	ands	r1, r2
 8002916:	2207      	movs	r2, #7
 8002918:	4032      	ands	r2, r6
 800291a:	e6a3      	b.n	8002664 <__aeabi_dsub+0xe0>
 800291c:	0032      	movs	r2, r6
 800291e:	3828      	subs	r0, #40	; 0x28
 8002920:	4082      	lsls	r2, r0
 8002922:	2600      	movs	r6, #0
 8002924:	e686      	b.n	8002634 <__aeabi_dsub+0xb0>
 8002926:	0030      	movs	r0, r6
 8002928:	f000 fb08 	bl	8002f3c <__clzsi2>
 800292c:	3020      	adds	r0, #32
 800292e:	e673      	b.n	8002618 <__aeabi_dsub+0x94>
 8002930:	4663      	mov	r3, ip
 8002932:	4313      	orrs	r3, r2
 8002934:	1e5a      	subs	r2, r3, #1
 8002936:	4193      	sbcs	r3, r2
 8002938:	1ac6      	subs	r6, r0, r3
 800293a:	42b0      	cmp	r0, r6
 800293c:	4180      	sbcs	r0, r0
 800293e:	4240      	negs	r0, r0
 8002940:	1a09      	subs	r1, r1, r0
 8002942:	e65c      	b.n	80025fe <__aeabi_dsub+0x7a>
 8002944:	000e      	movs	r6, r1
 8002946:	4667      	mov	r7, ip
 8002948:	4306      	orrs	r6, r0
 800294a:	4317      	orrs	r7, r2
 800294c:	2d00      	cmp	r5, #0
 800294e:	d15e      	bne.n	8002a0e <__aeabi_dsub+0x48a>
 8002950:	2e00      	cmp	r6, #0
 8002952:	d000      	beq.n	8002956 <__aeabi_dsub+0x3d2>
 8002954:	e0f3      	b.n	8002b3e <__aeabi_dsub+0x5ba>
 8002956:	2f00      	cmp	r7, #0
 8002958:	d100      	bne.n	800295c <__aeabi_dsub+0x3d8>
 800295a:	e11e      	b.n	8002b9a <__aeabi_dsub+0x616>
 800295c:	465c      	mov	r4, fp
 800295e:	4661      	mov	r1, ip
 8002960:	4691      	mov	r9, r2
 8002962:	e72c      	b.n	80027be <__aeabi_dsub+0x23a>
 8002964:	4fa9      	ldr	r7, [pc, #676]	; (8002c0c <__aeabi_dsub+0x688>)
 8002966:	42be      	cmp	r6, r7
 8002968:	d07b      	beq.n	8002a62 <__aeabi_dsub+0x4de>
 800296a:	001e      	movs	r6, r3
 800296c:	e6f1      	b.n	8002752 <__aeabi_dsub+0x1ce>
 800296e:	0010      	movs	r0, r2
 8002970:	3d1f      	subs	r5, #31
 8002972:	40e8      	lsrs	r0, r5
 8002974:	2b20      	cmp	r3, #32
 8002976:	d003      	beq.n	8002980 <__aeabi_dsub+0x3fc>
 8002978:	2140      	movs	r1, #64	; 0x40
 800297a:	1acb      	subs	r3, r1, r3
 800297c:	409a      	lsls	r2, r3
 800297e:	4316      	orrs	r6, r2
 8002980:	1e73      	subs	r3, r6, #1
 8002982:	419e      	sbcs	r6, r3
 8002984:	2207      	movs	r2, #7
 8002986:	4306      	orrs	r6, r0
 8002988:	4032      	ands	r2, r6
 800298a:	2100      	movs	r1, #0
 800298c:	2500      	movs	r5, #0
 800298e:	e783      	b.n	8002898 <__aeabi_dsub+0x314>
 8002990:	1a16      	subs	r6, r2, r0
 8002992:	4663      	mov	r3, ip
 8002994:	42b2      	cmp	r2, r6
 8002996:	4180      	sbcs	r0, r0
 8002998:	1a59      	subs	r1, r3, r1
 800299a:	4240      	negs	r0, r0
 800299c:	1a0b      	subs	r3, r1, r0
 800299e:	4698      	mov	r8, r3
 80029a0:	465c      	mov	r4, fp
 80029a2:	e632      	b.n	800260a <__aeabi_dsub+0x86>
 80029a4:	2e1f      	cmp	r6, #31
 80029a6:	dd00      	ble.n	80029aa <__aeabi_dsub+0x426>
 80029a8:	e0ab      	b.n	8002b02 <__aeabi_dsub+0x57e>
 80029aa:	2720      	movs	r7, #32
 80029ac:	1bbb      	subs	r3, r7, r6
 80029ae:	469a      	mov	sl, r3
 80029b0:	4663      	mov	r3, ip
 80029b2:	4657      	mov	r7, sl
 80029b4:	40bb      	lsls	r3, r7
 80029b6:	4699      	mov	r9, r3
 80029b8:	0013      	movs	r3, r2
 80029ba:	464f      	mov	r7, r9
 80029bc:	40f3      	lsrs	r3, r6
 80029be:	431f      	orrs	r7, r3
 80029c0:	003b      	movs	r3, r7
 80029c2:	4657      	mov	r7, sl
 80029c4:	40ba      	lsls	r2, r7
 80029c6:	1e57      	subs	r7, r2, #1
 80029c8:	41ba      	sbcs	r2, r7
 80029ca:	4313      	orrs	r3, r2
 80029cc:	4662      	mov	r2, ip
 80029ce:	40f2      	lsrs	r2, r6
 80029d0:	1889      	adds	r1, r1, r2
 80029d2:	e698      	b.n	8002706 <__aeabi_dsub+0x182>
 80029d4:	2720      	movs	r7, #32
 80029d6:	1bbb      	subs	r3, r7, r6
 80029d8:	469a      	mov	sl, r3
 80029da:	4663      	mov	r3, ip
 80029dc:	4657      	mov	r7, sl
 80029de:	40bb      	lsls	r3, r7
 80029e0:	4699      	mov	r9, r3
 80029e2:	0013      	movs	r3, r2
 80029e4:	464f      	mov	r7, r9
 80029e6:	40f3      	lsrs	r3, r6
 80029e8:	431f      	orrs	r7, r3
 80029ea:	003b      	movs	r3, r7
 80029ec:	4657      	mov	r7, sl
 80029ee:	40ba      	lsls	r2, r7
 80029f0:	1e57      	subs	r7, r2, #1
 80029f2:	41ba      	sbcs	r2, r7
 80029f4:	4313      	orrs	r3, r2
 80029f6:	4662      	mov	r2, ip
 80029f8:	40f2      	lsrs	r2, r6
 80029fa:	1a89      	subs	r1, r1, r2
 80029fc:	e79c      	b.n	8002938 <__aeabi_dsub+0x3b4>
 80029fe:	4b83      	ldr	r3, [pc, #524]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a00:	429f      	cmp	r7, r3
 8002a02:	d05f      	beq.n	8002ac4 <__aeabi_dsub+0x540>
 8002a04:	2580      	movs	r5, #128	; 0x80
 8002a06:	042d      	lsls	r5, r5, #16
 8002a08:	4273      	negs	r3, r6
 8002a0a:	4329      	orrs	r1, r5
 8002a0c:	e720      	b.n	8002850 <__aeabi_dsub+0x2cc>
 8002a0e:	2e00      	cmp	r6, #0
 8002a10:	d10c      	bne.n	8002a2c <__aeabi_dsub+0x4a8>
 8002a12:	2f00      	cmp	r7, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_dsub+0x494>
 8002a16:	e0d0      	b.n	8002bba <__aeabi_dsub+0x636>
 8002a18:	465c      	mov	r4, fp
 8002a1a:	4661      	mov	r1, ip
 8002a1c:	4691      	mov	r9, r2
 8002a1e:	4d7b      	ldr	r5, [pc, #492]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a20:	e6cd      	b.n	80027be <__aeabi_dsub+0x23a>
 8002a22:	4f7a      	ldr	r7, [pc, #488]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a24:	42be      	cmp	r6, r7
 8002a26:	d01c      	beq.n	8002a62 <__aeabi_dsub+0x4de>
 8002a28:	001e      	movs	r6, r3
 8002a2a:	e665      	b.n	80026f8 <__aeabi_dsub+0x174>
 8002a2c:	2f00      	cmp	r7, #0
 8002a2e:	d018      	beq.n	8002a62 <__aeabi_dsub+0x4de>
 8002a30:	08c0      	lsrs	r0, r0, #3
 8002a32:	074e      	lsls	r6, r1, #29
 8002a34:	4306      	orrs	r6, r0
 8002a36:	2080      	movs	r0, #128	; 0x80
 8002a38:	08c9      	lsrs	r1, r1, #3
 8002a3a:	0300      	lsls	r0, r0, #12
 8002a3c:	4201      	tst	r1, r0
 8002a3e:	d008      	beq.n	8002a52 <__aeabi_dsub+0x4ce>
 8002a40:	4663      	mov	r3, ip
 8002a42:	08dc      	lsrs	r4, r3, #3
 8002a44:	4204      	tst	r4, r0
 8002a46:	d104      	bne.n	8002a52 <__aeabi_dsub+0x4ce>
 8002a48:	0021      	movs	r1, r4
 8002a4a:	46da      	mov	sl, fp
 8002a4c:	08d2      	lsrs	r2, r2, #3
 8002a4e:	075e      	lsls	r6, r3, #29
 8002a50:	4316      	orrs	r6, r2
 8002a52:	00f3      	lsls	r3, r6, #3
 8002a54:	4699      	mov	r9, r3
 8002a56:	2401      	movs	r4, #1
 8002a58:	4653      	mov	r3, sl
 8002a5a:	00c9      	lsls	r1, r1, #3
 8002a5c:	0f72      	lsrs	r2, r6, #29
 8002a5e:	4311      	orrs	r1, r2
 8002a60:	401c      	ands	r4, r3
 8002a62:	4d6a      	ldr	r5, [pc, #424]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a64:	e6ab      	b.n	80027be <__aeabi_dsub+0x23a>
 8002a66:	001d      	movs	r5, r3
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2700      	movs	r7, #0
 8002a6c:	e6b4      	b.n	80027d8 <__aeabi_dsub+0x254>
 8002a6e:	2d00      	cmp	r5, #0
 8002a70:	d159      	bne.n	8002b26 <__aeabi_dsub+0x5a2>
 8002a72:	000b      	movs	r3, r1
 8002a74:	4303      	orrs	r3, r0
 8002a76:	d100      	bne.n	8002a7a <__aeabi_dsub+0x4f6>
 8002a78:	e6d6      	b.n	8002828 <__aeabi_dsub+0x2a4>
 8002a7a:	1c73      	adds	r3, r6, #1
 8002a7c:	d100      	bne.n	8002a80 <__aeabi_dsub+0x4fc>
 8002a7e:	e0b2      	b.n	8002be6 <__aeabi_dsub+0x662>
 8002a80:	4b62      	ldr	r3, [pc, #392]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a82:	429f      	cmp	r7, r3
 8002a84:	d01e      	beq.n	8002ac4 <__aeabi_dsub+0x540>
 8002a86:	43f3      	mvns	r3, r6
 8002a88:	2b38      	cmp	r3, #56	; 0x38
 8002a8a:	dc6f      	bgt.n	8002b6c <__aeabi_dsub+0x5e8>
 8002a8c:	2b1f      	cmp	r3, #31
 8002a8e:	dd00      	ble.n	8002a92 <__aeabi_dsub+0x50e>
 8002a90:	e097      	b.n	8002bc2 <__aeabi_dsub+0x63e>
 8002a92:	2520      	movs	r5, #32
 8002a94:	000e      	movs	r6, r1
 8002a96:	1aed      	subs	r5, r5, r3
 8002a98:	40ae      	lsls	r6, r5
 8002a9a:	46b0      	mov	r8, r6
 8002a9c:	0006      	movs	r6, r0
 8002a9e:	46aa      	mov	sl, r5
 8002aa0:	40de      	lsrs	r6, r3
 8002aa2:	4645      	mov	r5, r8
 8002aa4:	4335      	orrs	r5, r6
 8002aa6:	002e      	movs	r6, r5
 8002aa8:	4655      	mov	r5, sl
 8002aaa:	40a8      	lsls	r0, r5
 8002aac:	40d9      	lsrs	r1, r3
 8002aae:	1e45      	subs	r5, r0, #1
 8002ab0:	41a8      	sbcs	r0, r5
 8002ab2:	448c      	add	ip, r1
 8002ab4:	4306      	orrs	r6, r0
 8002ab6:	18b6      	adds	r6, r6, r2
 8002ab8:	4296      	cmp	r6, r2
 8002aba:	4192      	sbcs	r2, r2
 8002abc:	4251      	negs	r1, r2
 8002abe:	4461      	add	r1, ip
 8002ac0:	003d      	movs	r5, r7
 8002ac2:	e625      	b.n	8002710 <__aeabi_dsub+0x18c>
 8002ac4:	003d      	movs	r5, r7
 8002ac6:	4661      	mov	r1, ip
 8002ac8:	4691      	mov	r9, r2
 8002aca:	e678      	b.n	80027be <__aeabi_dsub+0x23a>
 8002acc:	000b      	movs	r3, r1
 8002ace:	4303      	orrs	r3, r0
 8002ad0:	2d00      	cmp	r5, #0
 8002ad2:	d000      	beq.n	8002ad6 <__aeabi_dsub+0x552>
 8002ad4:	e655      	b.n	8002782 <__aeabi_dsub+0x1fe>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f5      	beq.n	8002ac6 <__aeabi_dsub+0x542>
 8002ada:	4663      	mov	r3, ip
 8002adc:	4313      	orrs	r3, r2
 8002ade:	d100      	bne.n	8002ae2 <__aeabi_dsub+0x55e>
 8002ae0:	e66d      	b.n	80027be <__aeabi_dsub+0x23a>
 8002ae2:	1886      	adds	r6, r0, r2
 8002ae4:	4286      	cmp	r6, r0
 8002ae6:	4180      	sbcs	r0, r0
 8002ae8:	4461      	add	r1, ip
 8002aea:	4240      	negs	r0, r0
 8002aec:	1809      	adds	r1, r1, r0
 8002aee:	2200      	movs	r2, #0
 8002af0:	020b      	lsls	r3, r1, #8
 8002af2:	d400      	bmi.n	8002af6 <__aeabi_dsub+0x572>
 8002af4:	e6d0      	b.n	8002898 <__aeabi_dsub+0x314>
 8002af6:	4b46      	ldr	r3, [pc, #280]	; (8002c10 <__aeabi_dsub+0x68c>)
 8002af8:	3501      	adds	r5, #1
 8002afa:	4019      	ands	r1, r3
 8002afc:	e5b2      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002afe:	46b1      	mov	r9, r6
 8002b00:	e65d      	b.n	80027be <__aeabi_dsub+0x23a>
 8002b02:	0033      	movs	r3, r6
 8002b04:	4667      	mov	r7, ip
 8002b06:	3b20      	subs	r3, #32
 8002b08:	40df      	lsrs	r7, r3
 8002b0a:	003b      	movs	r3, r7
 8002b0c:	2e20      	cmp	r6, #32
 8002b0e:	d005      	beq.n	8002b1c <__aeabi_dsub+0x598>
 8002b10:	2740      	movs	r7, #64	; 0x40
 8002b12:	1bbf      	subs	r7, r7, r6
 8002b14:	4666      	mov	r6, ip
 8002b16:	40be      	lsls	r6, r7
 8002b18:	4332      	orrs	r2, r6
 8002b1a:	4690      	mov	r8, r2
 8002b1c:	4646      	mov	r6, r8
 8002b1e:	1e72      	subs	r2, r6, #1
 8002b20:	4196      	sbcs	r6, r2
 8002b22:	4333      	orrs	r3, r6
 8002b24:	e5ef      	b.n	8002706 <__aeabi_dsub+0x182>
 8002b26:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <__aeabi_dsub+0x688>)
 8002b28:	429f      	cmp	r7, r3
 8002b2a:	d0cb      	beq.n	8002ac4 <__aeabi_dsub+0x540>
 8002b2c:	2580      	movs	r5, #128	; 0x80
 8002b2e:	042d      	lsls	r5, r5, #16
 8002b30:	4273      	negs	r3, r6
 8002b32:	4329      	orrs	r1, r5
 8002b34:	e7a8      	b.n	8002a88 <__aeabi_dsub+0x504>
 8002b36:	4308      	orrs	r0, r1
 8002b38:	1e41      	subs	r1, r0, #1
 8002b3a:	4188      	sbcs	r0, r1
 8002b3c:	e6a2      	b.n	8002884 <__aeabi_dsub+0x300>
 8002b3e:	2f00      	cmp	r7, #0
 8002b40:	d100      	bne.n	8002b44 <__aeabi_dsub+0x5c0>
 8002b42:	e63c      	b.n	80027be <__aeabi_dsub+0x23a>
 8002b44:	4663      	mov	r3, ip
 8002b46:	1a86      	subs	r6, r0, r2
 8002b48:	1acf      	subs	r7, r1, r3
 8002b4a:	42b0      	cmp	r0, r6
 8002b4c:	419b      	sbcs	r3, r3
 8002b4e:	425b      	negs	r3, r3
 8002b50:	1afb      	subs	r3, r7, r3
 8002b52:	4698      	mov	r8, r3
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	d54e      	bpl.n	8002bf6 <__aeabi_dsub+0x672>
 8002b58:	1a16      	subs	r6, r2, r0
 8002b5a:	4663      	mov	r3, ip
 8002b5c:	42b2      	cmp	r2, r6
 8002b5e:	4192      	sbcs	r2, r2
 8002b60:	1a59      	subs	r1, r3, r1
 8002b62:	4252      	negs	r2, r2
 8002b64:	1a89      	subs	r1, r1, r2
 8002b66:	465c      	mov	r4, fp
 8002b68:	2200      	movs	r2, #0
 8002b6a:	e57b      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002b6c:	4301      	orrs	r1, r0
 8002b6e:	000e      	movs	r6, r1
 8002b70:	1e71      	subs	r1, r6, #1
 8002b72:	418e      	sbcs	r6, r1
 8002b74:	e79f      	b.n	8002ab6 <__aeabi_dsub+0x532>
 8002b76:	001d      	movs	r5, r3
 8002b78:	000e      	movs	r6, r1
 8002b7a:	3d20      	subs	r5, #32
 8002b7c:	40ee      	lsrs	r6, r5
 8002b7e:	46b0      	mov	r8, r6
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d004      	beq.n	8002b8e <__aeabi_dsub+0x60a>
 8002b84:	2540      	movs	r5, #64	; 0x40
 8002b86:	1aeb      	subs	r3, r5, r3
 8002b88:	4099      	lsls	r1, r3
 8002b8a:	4308      	orrs	r0, r1
 8002b8c:	4681      	mov	r9, r0
 8002b8e:	4648      	mov	r0, r9
 8002b90:	4643      	mov	r3, r8
 8002b92:	1e41      	subs	r1, r0, #1
 8002b94:	4188      	sbcs	r0, r1
 8002b96:	4318      	orrs	r0, r3
 8002b98:	e674      	b.n	8002884 <__aeabi_dsub+0x300>
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2400      	movs	r4, #0
 8002b9e:	e617      	b.n	80027d0 <__aeabi_dsub+0x24c>
 8002ba0:	1a16      	subs	r6, r2, r0
 8002ba2:	4663      	mov	r3, ip
 8002ba4:	42b2      	cmp	r2, r6
 8002ba6:	4192      	sbcs	r2, r2
 8002ba8:	1a59      	subs	r1, r3, r1
 8002baa:	4252      	negs	r2, r2
 8002bac:	1a89      	subs	r1, r1, r2
 8002bae:	003d      	movs	r5, r7
 8002bb0:	e525      	b.n	80025fe <__aeabi_dsub+0x7a>
 8002bb2:	4661      	mov	r1, ip
 8002bb4:	4691      	mov	r9, r2
 8002bb6:	4d15      	ldr	r5, [pc, #84]	; (8002c0c <__aeabi_dsub+0x688>)
 8002bb8:	e601      	b.n	80027be <__aeabi_dsub+0x23a>
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	0312      	lsls	r2, r2, #12
 8002bc0:	e679      	b.n	80028b6 <__aeabi_dsub+0x332>
 8002bc2:	001d      	movs	r5, r3
 8002bc4:	000e      	movs	r6, r1
 8002bc6:	3d20      	subs	r5, #32
 8002bc8:	40ee      	lsrs	r6, r5
 8002bca:	46b0      	mov	r8, r6
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d004      	beq.n	8002bda <__aeabi_dsub+0x656>
 8002bd0:	2540      	movs	r5, #64	; 0x40
 8002bd2:	1aeb      	subs	r3, r5, r3
 8002bd4:	4099      	lsls	r1, r3
 8002bd6:	4308      	orrs	r0, r1
 8002bd8:	4681      	mov	r9, r0
 8002bda:	464e      	mov	r6, r9
 8002bdc:	4643      	mov	r3, r8
 8002bde:	1e71      	subs	r1, r6, #1
 8002be0:	418e      	sbcs	r6, r1
 8002be2:	431e      	orrs	r6, r3
 8002be4:	e767      	b.n	8002ab6 <__aeabi_dsub+0x532>
 8002be6:	1886      	adds	r6, r0, r2
 8002be8:	4296      	cmp	r6, r2
 8002bea:	419b      	sbcs	r3, r3
 8002bec:	4461      	add	r1, ip
 8002bee:	425b      	negs	r3, r3
 8002bf0:	18c9      	adds	r1, r1, r3
 8002bf2:	003d      	movs	r5, r7
 8002bf4:	e58c      	b.n	8002710 <__aeabi_dsub+0x18c>
 8002bf6:	4647      	mov	r7, r8
 8002bf8:	4337      	orrs	r7, r6
 8002bfa:	d0ce      	beq.n	8002b9a <__aeabi_dsub+0x616>
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	4641      	mov	r1, r8
 8002c00:	4032      	ands	r2, r6
 8002c02:	e649      	b.n	8002898 <__aeabi_dsub+0x314>
 8002c04:	2700      	movs	r7, #0
 8002c06:	003a      	movs	r2, r7
 8002c08:	e5e6      	b.n	80027d8 <__aeabi_dsub+0x254>
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	000007ff 	.word	0x000007ff
 8002c10:	ff7fffff 	.word	0xff7fffff

08002c14 <__aeabi_dcmpun>:
 8002c14:	b570      	push	{r4, r5, r6, lr}
 8002c16:	4e0c      	ldr	r6, [pc, #48]	; (8002c48 <__aeabi_dcmpun+0x34>)
 8002c18:	030d      	lsls	r5, r1, #12
 8002c1a:	031c      	lsls	r4, r3, #12
 8002c1c:	0049      	lsls	r1, r1, #1
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	0b2d      	lsrs	r5, r5, #12
 8002c22:	0d49      	lsrs	r1, r1, #21
 8002c24:	0b24      	lsrs	r4, r4, #12
 8002c26:	0d5b      	lsrs	r3, r3, #21
 8002c28:	42b1      	cmp	r1, r6
 8002c2a:	d008      	beq.n	8002c3e <__aeabi_dcmpun+0x2a>
 8002c2c:	4906      	ldr	r1, [pc, #24]	; (8002c48 <__aeabi_dcmpun+0x34>)
 8002c2e:	2000      	movs	r0, #0
 8002c30:	428b      	cmp	r3, r1
 8002c32:	d103      	bne.n	8002c3c <__aeabi_dcmpun+0x28>
 8002c34:	4314      	orrs	r4, r2
 8002c36:	0020      	movs	r0, r4
 8002c38:	1e44      	subs	r4, r0, #1
 8002c3a:	41a0      	sbcs	r0, r4
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
 8002c3e:	4305      	orrs	r5, r0
 8002c40:	2001      	movs	r0, #1
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	d1fa      	bne.n	8002c3c <__aeabi_dcmpun+0x28>
 8002c46:	e7f1      	b.n	8002c2c <__aeabi_dcmpun+0x18>
 8002c48:	000007ff 	.word	0x000007ff

08002c4c <__aeabi_d2iz>:
 8002c4c:	b530      	push	{r4, r5, lr}
 8002c4e:	4d14      	ldr	r5, [pc, #80]	; (8002ca0 <__aeabi_d2iz+0x54>)
 8002c50:	030a      	lsls	r2, r1, #12
 8002c52:	004b      	lsls	r3, r1, #1
 8002c54:	0b12      	lsrs	r2, r2, #12
 8002c56:	0d5b      	lsrs	r3, r3, #21
 8002c58:	0fc9      	lsrs	r1, r1, #31
 8002c5a:	2400      	movs	r4, #0
 8002c5c:	42ab      	cmp	r3, r5
 8002c5e:	dd11      	ble.n	8002c84 <__aeabi_d2iz+0x38>
 8002c60:	4c10      	ldr	r4, [pc, #64]	; (8002ca4 <__aeabi_d2iz+0x58>)
 8002c62:	42a3      	cmp	r3, r4
 8002c64:	dc10      	bgt.n	8002c88 <__aeabi_d2iz+0x3c>
 8002c66:	2480      	movs	r4, #128	; 0x80
 8002c68:	0364      	lsls	r4, r4, #13
 8002c6a:	4322      	orrs	r2, r4
 8002c6c:	4c0e      	ldr	r4, [pc, #56]	; (8002ca8 <__aeabi_d2iz+0x5c>)
 8002c6e:	1ae4      	subs	r4, r4, r3
 8002c70:	2c1f      	cmp	r4, #31
 8002c72:	dd0c      	ble.n	8002c8e <__aeabi_d2iz+0x42>
 8002c74:	480d      	ldr	r0, [pc, #52]	; (8002cac <__aeabi_d2iz+0x60>)
 8002c76:	1ac3      	subs	r3, r0, r3
 8002c78:	40da      	lsrs	r2, r3
 8002c7a:	0013      	movs	r3, r2
 8002c7c:	425c      	negs	r4, r3
 8002c7e:	2900      	cmp	r1, #0
 8002c80:	d100      	bne.n	8002c84 <__aeabi_d2iz+0x38>
 8002c82:	001c      	movs	r4, r3
 8002c84:	0020      	movs	r0, r4
 8002c86:	bd30      	pop	{r4, r5, pc}
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <__aeabi_d2iz+0x64>)
 8002c8a:	18cc      	adds	r4, r1, r3
 8002c8c:	e7fa      	b.n	8002c84 <__aeabi_d2iz+0x38>
 8002c8e:	4d09      	ldr	r5, [pc, #36]	; (8002cb4 <__aeabi_d2iz+0x68>)
 8002c90:	40e0      	lsrs	r0, r4
 8002c92:	46ac      	mov	ip, r5
 8002c94:	4463      	add	r3, ip
 8002c96:	409a      	lsls	r2, r3
 8002c98:	0013      	movs	r3, r2
 8002c9a:	4303      	orrs	r3, r0
 8002c9c:	e7ee      	b.n	8002c7c <__aeabi_d2iz+0x30>
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	000003fe 	.word	0x000003fe
 8002ca4:	0000041d 	.word	0x0000041d
 8002ca8:	00000433 	.word	0x00000433
 8002cac:	00000413 	.word	0x00000413
 8002cb0:	7fffffff 	.word	0x7fffffff
 8002cb4:	fffffbed 	.word	0xfffffbed

08002cb8 <__aeabi_i2d>:
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d02d      	beq.n	8002d1a <__aeabi_i2d+0x62>
 8002cbe:	17c3      	asrs	r3, r0, #31
 8002cc0:	18c5      	adds	r5, r0, r3
 8002cc2:	405d      	eors	r5, r3
 8002cc4:	0fc4      	lsrs	r4, r0, #31
 8002cc6:	0028      	movs	r0, r5
 8002cc8:	f000 f938 	bl	8002f3c <__clzsi2>
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <__aeabi_i2d+0x6c>)
 8002cce:	1a1b      	subs	r3, r3, r0
 8002cd0:	055b      	lsls	r3, r3, #21
 8002cd2:	0d5b      	lsrs	r3, r3, #21
 8002cd4:	280a      	cmp	r0, #10
 8002cd6:	dd15      	ble.n	8002d04 <__aeabi_i2d+0x4c>
 8002cd8:	380b      	subs	r0, #11
 8002cda:	4085      	lsls	r5, r0
 8002cdc:	2200      	movs	r2, #0
 8002cde:	032d      	lsls	r5, r5, #12
 8002ce0:	0b2d      	lsrs	r5, r5, #12
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	0010      	movs	r0, r2
 8002ce6:	032d      	lsls	r5, r5, #12
 8002ce8:	0d0a      	lsrs	r2, r1, #20
 8002cea:	0b2d      	lsrs	r5, r5, #12
 8002cec:	0512      	lsls	r2, r2, #20
 8002cee:	432a      	orrs	r2, r5
 8002cf0:	4d0d      	ldr	r5, [pc, #52]	; (8002d28 <__aeabi_i2d+0x70>)
 8002cf2:	051b      	lsls	r3, r3, #20
 8002cf4:	402a      	ands	r2, r5
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	07e4      	lsls	r4, r4, #31
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	4323      	orrs	r3, r4
 8002d00:	0019      	movs	r1, r3
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
 8002d04:	0002      	movs	r2, r0
 8002d06:	0029      	movs	r1, r5
 8002d08:	3215      	adds	r2, #21
 8002d0a:	4091      	lsls	r1, r2
 8002d0c:	000a      	movs	r2, r1
 8002d0e:	210b      	movs	r1, #11
 8002d10:	1a08      	subs	r0, r1, r0
 8002d12:	40c5      	lsrs	r5, r0
 8002d14:	032d      	lsls	r5, r5, #12
 8002d16:	0b2d      	lsrs	r5, r5, #12
 8002d18:	e7e3      	b.n	8002ce2 <__aeabi_i2d+0x2a>
 8002d1a:	2400      	movs	r4, #0
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2500      	movs	r5, #0
 8002d20:	2200      	movs	r2, #0
 8002d22:	e7de      	b.n	8002ce2 <__aeabi_i2d+0x2a>
 8002d24:	0000041e 	.word	0x0000041e
 8002d28:	800fffff 	.word	0x800fffff

08002d2c <__aeabi_ui2d>:
 8002d2c:	b510      	push	{r4, lr}
 8002d2e:	1e04      	subs	r4, r0, #0
 8002d30:	d025      	beq.n	8002d7e <__aeabi_ui2d+0x52>
 8002d32:	f000 f903 	bl	8002f3c <__clzsi2>
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <__aeabi_ui2d+0x5c>)
 8002d38:	1a1b      	subs	r3, r3, r0
 8002d3a:	055b      	lsls	r3, r3, #21
 8002d3c:	0d5b      	lsrs	r3, r3, #21
 8002d3e:	280a      	cmp	r0, #10
 8002d40:	dd12      	ble.n	8002d68 <__aeabi_ui2d+0x3c>
 8002d42:	380b      	subs	r0, #11
 8002d44:	4084      	lsls	r4, r0
 8002d46:	2200      	movs	r2, #0
 8002d48:	0324      	lsls	r4, r4, #12
 8002d4a:	0b24      	lsrs	r4, r4, #12
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	0010      	movs	r0, r2
 8002d50:	0324      	lsls	r4, r4, #12
 8002d52:	0d0a      	lsrs	r2, r1, #20
 8002d54:	0b24      	lsrs	r4, r4, #12
 8002d56:	0512      	lsls	r2, r2, #20
 8002d58:	4322      	orrs	r2, r4
 8002d5a:	4c0c      	ldr	r4, [pc, #48]	; (8002d8c <__aeabi_ui2d+0x60>)
 8002d5c:	051b      	lsls	r3, r3, #20
 8002d5e:	4022      	ands	r2, r4
 8002d60:	4313      	orrs	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	0859      	lsrs	r1, r3, #1
 8002d66:	bd10      	pop	{r4, pc}
 8002d68:	0002      	movs	r2, r0
 8002d6a:	0021      	movs	r1, r4
 8002d6c:	3215      	adds	r2, #21
 8002d6e:	4091      	lsls	r1, r2
 8002d70:	000a      	movs	r2, r1
 8002d72:	210b      	movs	r1, #11
 8002d74:	1a08      	subs	r0, r1, r0
 8002d76:	40c4      	lsrs	r4, r0
 8002d78:	0324      	lsls	r4, r4, #12
 8002d7a:	0b24      	lsrs	r4, r4, #12
 8002d7c:	e7e6      	b.n	8002d4c <__aeabi_ui2d+0x20>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2400      	movs	r4, #0
 8002d82:	2200      	movs	r2, #0
 8002d84:	e7e2      	b.n	8002d4c <__aeabi_ui2d+0x20>
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	0000041e 	.word	0x0000041e
 8002d8c:	800fffff 	.word	0x800fffff

08002d90 <__aeabi_f2d>:
 8002d90:	0041      	lsls	r1, r0, #1
 8002d92:	0e09      	lsrs	r1, r1, #24
 8002d94:	1c4b      	adds	r3, r1, #1
 8002d96:	b570      	push	{r4, r5, r6, lr}
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	0246      	lsls	r6, r0, #9
 8002d9c:	0a75      	lsrs	r5, r6, #9
 8002d9e:	0fc4      	lsrs	r4, r0, #31
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	dd14      	ble.n	8002dce <__aeabi_f2d+0x3e>
 8002da4:	23e0      	movs	r3, #224	; 0xe0
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	076d      	lsls	r5, r5, #29
 8002daa:	0b36      	lsrs	r6, r6, #12
 8002dac:	18cb      	adds	r3, r1, r3
 8002dae:	2100      	movs	r1, #0
 8002db0:	0d0a      	lsrs	r2, r1, #20
 8002db2:	0028      	movs	r0, r5
 8002db4:	0512      	lsls	r2, r2, #20
 8002db6:	4d1c      	ldr	r5, [pc, #112]	; (8002e28 <__aeabi_f2d+0x98>)
 8002db8:	4332      	orrs	r2, r6
 8002dba:	055b      	lsls	r3, r3, #21
 8002dbc:	402a      	ands	r2, r5
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	07e4      	lsls	r4, r4, #31
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	4323      	orrs	r3, r4
 8002dca:	0019      	movs	r1, r3
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
 8002dce:	2900      	cmp	r1, #0
 8002dd0:	d114      	bne.n	8002dfc <__aeabi_f2d+0x6c>
 8002dd2:	2d00      	cmp	r5, #0
 8002dd4:	d01e      	beq.n	8002e14 <__aeabi_f2d+0x84>
 8002dd6:	0028      	movs	r0, r5
 8002dd8:	f000 f8b0 	bl	8002f3c <__clzsi2>
 8002ddc:	280a      	cmp	r0, #10
 8002dde:	dc1c      	bgt.n	8002e1a <__aeabi_f2d+0x8a>
 8002de0:	230b      	movs	r3, #11
 8002de2:	002a      	movs	r2, r5
 8002de4:	1a1b      	subs	r3, r3, r0
 8002de6:	40da      	lsrs	r2, r3
 8002de8:	0003      	movs	r3, r0
 8002dea:	3315      	adds	r3, #21
 8002dec:	409d      	lsls	r5, r3
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <__aeabi_f2d+0x9c>)
 8002df0:	0312      	lsls	r2, r2, #12
 8002df2:	1a1b      	subs	r3, r3, r0
 8002df4:	055b      	lsls	r3, r3, #21
 8002df6:	0b16      	lsrs	r6, r2, #12
 8002df8:	0d5b      	lsrs	r3, r3, #21
 8002dfa:	e7d8      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002dfc:	2d00      	cmp	r5, #0
 8002dfe:	d006      	beq.n	8002e0e <__aeabi_f2d+0x7e>
 8002e00:	0b32      	lsrs	r2, r6, #12
 8002e02:	2680      	movs	r6, #128	; 0x80
 8002e04:	0336      	lsls	r6, r6, #12
 8002e06:	076d      	lsls	r5, r5, #29
 8002e08:	4316      	orrs	r6, r2
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <__aeabi_f2d+0xa0>)
 8002e0c:	e7cf      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <__aeabi_f2d+0xa0>)
 8002e10:	2600      	movs	r6, #0
 8002e12:	e7cc      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002e14:	2300      	movs	r3, #0
 8002e16:	2600      	movs	r6, #0
 8002e18:	e7c9      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002e1a:	0003      	movs	r3, r0
 8002e1c:	002a      	movs	r2, r5
 8002e1e:	3b0b      	subs	r3, #11
 8002e20:	409a      	lsls	r2, r3
 8002e22:	2500      	movs	r5, #0
 8002e24:	e7e3      	b.n	8002dee <__aeabi_f2d+0x5e>
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	800fffff 	.word	0x800fffff
 8002e2c:	00000389 	.word	0x00000389
 8002e30:	000007ff 	.word	0x000007ff

08002e34 <__aeabi_d2f>:
 8002e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e36:	004c      	lsls	r4, r1, #1
 8002e38:	0d64      	lsrs	r4, r4, #21
 8002e3a:	030b      	lsls	r3, r1, #12
 8002e3c:	1c62      	adds	r2, r4, #1
 8002e3e:	0a5b      	lsrs	r3, r3, #9
 8002e40:	0f46      	lsrs	r6, r0, #29
 8002e42:	0552      	lsls	r2, r2, #21
 8002e44:	0fc9      	lsrs	r1, r1, #31
 8002e46:	431e      	orrs	r6, r3
 8002e48:	00c5      	lsls	r5, r0, #3
 8002e4a:	0d52      	lsrs	r2, r2, #21
 8002e4c:	2a01      	cmp	r2, #1
 8002e4e:	dd29      	ble.n	8002ea4 <__aeabi_d2f+0x70>
 8002e50:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <__aeabi_d2f+0xfc>)
 8002e52:	18e7      	adds	r7, r4, r3
 8002e54:	2ffe      	cmp	r7, #254	; 0xfe
 8002e56:	dc1c      	bgt.n	8002e92 <__aeabi_d2f+0x5e>
 8002e58:	2f00      	cmp	r7, #0
 8002e5a:	dd3b      	ble.n	8002ed4 <__aeabi_d2f+0xa0>
 8002e5c:	0180      	lsls	r0, r0, #6
 8002e5e:	1e43      	subs	r3, r0, #1
 8002e60:	4198      	sbcs	r0, r3
 8002e62:	2207      	movs	r2, #7
 8002e64:	00f3      	lsls	r3, r6, #3
 8002e66:	0f6d      	lsrs	r5, r5, #29
 8002e68:	4303      	orrs	r3, r0
 8002e6a:	432b      	orrs	r3, r5
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	2a00      	cmp	r2, #0
 8002e70:	d004      	beq.n	8002e7c <__aeabi_d2f+0x48>
 8002e72:	220f      	movs	r2, #15
 8002e74:	401a      	ands	r2, r3
 8002e76:	2a04      	cmp	r2, #4
 8002e78:	d000      	beq.n	8002e7c <__aeabi_d2f+0x48>
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	04d2      	lsls	r2, r2, #19
 8002e80:	401a      	ands	r2, r3
 8002e82:	d024      	beq.n	8002ece <__aeabi_d2f+0x9a>
 8002e84:	3701      	adds	r7, #1
 8002e86:	b2fa      	uxtb	r2, r7
 8002e88:	2fff      	cmp	r7, #255	; 0xff
 8002e8a:	d002      	beq.n	8002e92 <__aeabi_d2f+0x5e>
 8002e8c:	019b      	lsls	r3, r3, #6
 8002e8e:	0a58      	lsrs	r0, r3, #9
 8002e90:	e001      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002e92:	22ff      	movs	r2, #255	; 0xff
 8002e94:	2000      	movs	r0, #0
 8002e96:	0240      	lsls	r0, r0, #9
 8002e98:	05d2      	lsls	r2, r2, #23
 8002e9a:	0a40      	lsrs	r0, r0, #9
 8002e9c:	07c9      	lsls	r1, r1, #31
 8002e9e:	4310      	orrs	r0, r2
 8002ea0:	4308      	orrs	r0, r1
 8002ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea4:	4335      	orrs	r5, r6
 8002ea6:	2c00      	cmp	r4, #0
 8002ea8:	d104      	bne.n	8002eb4 <__aeabi_d2f+0x80>
 8002eaa:	2d00      	cmp	r5, #0
 8002eac:	d10a      	bne.n	8002ec4 <__aeabi_d2f+0x90>
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e7f0      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002eb4:	2d00      	cmp	r5, #0
 8002eb6:	d0ec      	beq.n	8002e92 <__aeabi_d2f+0x5e>
 8002eb8:	2080      	movs	r0, #128	; 0x80
 8002eba:	03c0      	lsls	r0, r0, #15
 8002ebc:	4330      	orrs	r0, r6
 8002ebe:	22ff      	movs	r2, #255	; 0xff
 8002ec0:	e7e9      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002ec2:	2400      	movs	r4, #0
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	025b      	lsls	r3, r3, #9
 8002ec8:	0a58      	lsrs	r0, r3, #9
 8002eca:	b2e2      	uxtb	r2, r4
 8002ecc:	e7e3      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002ece:	08db      	lsrs	r3, r3, #3
 8002ed0:	003c      	movs	r4, r7
 8002ed2:	e7f8      	b.n	8002ec6 <__aeabi_d2f+0x92>
 8002ed4:	003b      	movs	r3, r7
 8002ed6:	3317      	adds	r3, #23
 8002ed8:	dbf3      	blt.n	8002ec2 <__aeabi_d2f+0x8e>
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	4333      	orrs	r3, r6
 8002ee0:	261e      	movs	r6, #30
 8002ee2:	1bf6      	subs	r6, r6, r7
 8002ee4:	2e1f      	cmp	r6, #31
 8002ee6:	dd14      	ble.n	8002f12 <__aeabi_d2f+0xde>
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4252      	negs	r2, r2
 8002eec:	1bd7      	subs	r7, r2, r7
 8002eee:	001a      	movs	r2, r3
 8002ef0:	40fa      	lsrs	r2, r7
 8002ef2:	0017      	movs	r7, r2
 8002ef4:	2e20      	cmp	r6, #32
 8002ef6:	d004      	beq.n	8002f02 <__aeabi_d2f+0xce>
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <__aeabi_d2f+0x100>)
 8002efa:	4694      	mov	ip, r2
 8002efc:	4464      	add	r4, ip
 8002efe:	40a3      	lsls	r3, r4
 8002f00:	431d      	orrs	r5, r3
 8002f02:	002b      	movs	r3, r5
 8002f04:	1e5d      	subs	r5, r3, #1
 8002f06:	41ab      	sbcs	r3, r5
 8002f08:	2207      	movs	r2, #7
 8002f0a:	433b      	orrs	r3, r7
 8002f0c:	401a      	ands	r2, r3
 8002f0e:	2700      	movs	r7, #0
 8002f10:	e7ad      	b.n	8002e6e <__aeabi_d2f+0x3a>
 8002f12:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <__aeabi_d2f+0x104>)
 8002f14:	0028      	movs	r0, r5
 8002f16:	18a2      	adds	r2, r4, r2
 8002f18:	4095      	lsls	r5, r2
 8002f1a:	4093      	lsls	r3, r2
 8002f1c:	1e6c      	subs	r4, r5, #1
 8002f1e:	41a5      	sbcs	r5, r4
 8002f20:	40f0      	lsrs	r0, r6
 8002f22:	2207      	movs	r2, #7
 8002f24:	432b      	orrs	r3, r5
 8002f26:	4303      	orrs	r3, r0
 8002f28:	401a      	ands	r2, r3
 8002f2a:	2700      	movs	r7, #0
 8002f2c:	e79f      	b.n	8002e6e <__aeabi_d2f+0x3a>
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	fffffc80 	.word	0xfffffc80
 8002f34:	fffffca2 	.word	0xfffffca2
 8002f38:	fffffc82 	.word	0xfffffc82

08002f3c <__clzsi2>:
 8002f3c:	211c      	movs	r1, #28
 8002f3e:	2301      	movs	r3, #1
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	4298      	cmp	r0, r3
 8002f44:	d301      	bcc.n	8002f4a <__clzsi2+0xe>
 8002f46:	0c00      	lsrs	r0, r0, #16
 8002f48:	3910      	subs	r1, #16
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	4298      	cmp	r0, r3
 8002f4e:	d301      	bcc.n	8002f54 <__clzsi2+0x18>
 8002f50:	0a00      	lsrs	r0, r0, #8
 8002f52:	3908      	subs	r1, #8
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	4298      	cmp	r0, r3
 8002f58:	d301      	bcc.n	8002f5e <__clzsi2+0x22>
 8002f5a:	0900      	lsrs	r0, r0, #4
 8002f5c:	3904      	subs	r1, #4
 8002f5e:	a202      	add	r2, pc, #8	; (adr r2, 8002f68 <__clzsi2+0x2c>)
 8002f60:	5c10      	ldrb	r0, [r2, r0]
 8002f62:	1840      	adds	r0, r0, r1
 8002f64:	4770      	bx	lr
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	02020304 	.word	0x02020304
 8002f6c:	01010101 	.word	0x01010101
	...

08002f78 <__clzdi2>:
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	d103      	bne.n	8002f86 <__clzdi2+0xe>
 8002f7e:	f7ff ffdd 	bl	8002f3c <__clzsi2>
 8002f82:	3020      	adds	r0, #32
 8002f84:	e002      	b.n	8002f8c <__clzdi2+0x14>
 8002f86:	1c08      	adds	r0, r1, #0
 8002f88:	f7ff ffd8 	bl	8002f3c <__clzsi2>
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)

08002f90 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002f90:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002f92:	4b22      	ldr	r3, [pc, #136]	; (800301c <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002f94:	4a22      	ldr	r2, [pc, #136]	; (8003020 <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002f96:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 8002f98:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002f9a:	b29b      	uxth	r3, r3
	if(temp == 0xFFFF)				// Memory has been erased
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d035      	beq.n	800300c <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002fa0:	0a1e      	lsrs	r6, r3, #8
		if(N == 0)
 8002fa2:	d02c      	beq.n	8002ffe <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	; (8003024 <LoadROtopology+0x94>)
 8002fa6:	b2f6      	uxtb	r6, r6
 8002fa8:	7016      	strb	r6, [r2, #0]
			N =1;
		myID =(uint8_t )temp;
 8002faa:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <LoadROtopology+0x98>)
 8002fac:	7013      	strb	r3, [r2, #0]
 8002fae:	466b      	mov	r3, sp
 8002fb0:	1dd9      	adds	r1, r3, #7
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002fb2:	2300      	movs	r3, #0
		myID =(uint8_t )temp;
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	2401      	movs	r4, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002fb8:	469c      	mov	ip, r3
 8002fba:	4d1c      	ldr	r5, [pc, #112]	; (800302c <LoadROtopology+0x9c>)
 8002fbc:	4663      	mov	r3, ip
 8002fbe:	700b      	strb	r3, [r1, #0]
 8002fc0:	780b      	ldrb	r3, [r1, #0]
 8002fc2:	2b0a      	cmp	r3, #10
 8002fc4:	d814      	bhi.n	8002ff0 <LoadROtopology+0x60>
 8002fc6:	1e63      	subs	r3, r4, #1
 8002fc8:	0098      	lsls	r0, r3, #2
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002fca:	18c0      	adds	r0, r0, r3
 8002fcc:	0040      	lsls	r0, r0, #1
 8002fce:	18c0      	adds	r0, r0, r3
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <LoadROtopology+0x8c>)
 8002fd2:	18d7      	adds	r7, r2, r3
 8002fd4:	780b      	ldrb	r3, [r1, #0]
 8002fd6:	883f      	ldrh	r7, [r7, #0]
 8002fd8:	18c3      	adds	r3, r0, r3
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	52ef      	strh	r7, [r5, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002fde:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002fe0:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	700b      	strb	r3, [r1, #0]
 8002fe8:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002fea:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002fec:	2b0a      	cmp	r3, #10
 8002fee:	d9ef      	bls.n	8002fd0 <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 8002ff0:	3401      	adds	r4, #1
 8002ff2:	b2e4      	uxtb	r4, r4
 8002ff4:	42b4      	cmp	r4, r6
 8002ff6:	d9e1      	bls.n	8002fbc <LoadROtopology+0x2c>
 8002ff8:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 8002ffa:	b003      	add	sp, #12
 8002ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 8002ffe:	2101      	movs	r1, #1
 8003000:	4a08      	ldr	r2, [pc, #32]	; (8003024 <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 8003002:	2601      	movs	r6, #1
			N =1;
 8003004:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8003006:	4a08      	ldr	r2, [pc, #32]	; (8003028 <LoadROtopology+0x98>)
 8003008:	7013      	strb	r3, [r2, #0]
 800300a:	e7d0      	b.n	8002fae <LoadROtopology+0x1e>
		N =1;
 800300c:	2201      	movs	r2, #1
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 8003010:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 8003012:	701a      	strb	r2, [r3, #0]
		myID =0;
 8003014:	2200      	movs	r2, #0
 8003016:	4b04      	ldr	r3, [pc, #16]	; (8003028 <LoadROtopology+0x98>)
 8003018:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 800301a:	e7ee      	b.n	8002ffa <LoadROtopology+0x6a>
 800301c:	0801d800 	.word	0x0801d800
 8003020:	0000ffff 	.word	0x0000ffff
 8003024:	20000000 	.word	0x20000000
 8003028:	20000a98 	.word	0x20000a98
 800302c:	20000ed4 	.word	0x20000ed4

08003030 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8003030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003032:	46c6      	mov	lr, r8
 8003034:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003036:	4e0f      	ldr	r6, [pc, #60]	; (8003074 <LoadEEportsDir+0x44>)
 8003038:	7833      	ldrb	r3, [r6, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d016      	beq.n	800306c <LoadEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 800303e:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003040:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003042:	4698      	mov	r8, r3
 8003044:	4f0c      	ldr	r7, [pc, #48]	; (8003078 <LoadEEportsDir+0x48>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8003046:	1e61      	subs	r1, r4, #1
 8003048:	0049      	lsls	r1, r1, #1
 800304a:	1c65      	adds	r5, r4, #1
 800304c:	1879      	adds	r1, r7, r1
 800304e:	b2a8      	uxth	r0, r5
 8003050:	f004 fd28 	bl	8007aa4 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003054:	2c19      	cmp	r4, #25
 8003056:	d901      	bls.n	800305c <LoadEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8003058:	230a      	movs	r3, #10
 800305a:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 800305c:	7833      	ldrb	r3, [r6, #0]
 800305e:	b2ec      	uxtb	r4, r5
 8003060:	42a3      	cmp	r3, r4
 8003062:	d2f0      	bcs.n	8003046 <LoadEEportsDir+0x16>
	}
	
	return result;
}
 8003064:	4640      	mov	r0, r8
 8003066:	bc04      	pop	{r2}
 8003068:	4690      	mov	r8, r2
 800306a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	4698      	mov	r8, r3
 8003070:	e7f8      	b.n	8003064 <LoadEEportsDir+0x34>
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	20000000 	.word	0x20000000
 8003078:	20007140 	.word	0x20007140

0800307c <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 800307c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307e:	464e      	mov	r6, r9
 8003080:	46de      	mov	lr, fp
 8003082:	4657      	mov	r7, sl
 8003084:	4645      	mov	r5, r8
 8003086:	b5e0      	push	{r5, r6, r7, lr}
 8003088:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 800308a:	466b      	mov	r3, sp
 800308c:	1d9e      	adds	r6, r3, #6
 800308e:	2300      	movs	r3, #0
 8003090:	8033      	strh	r3, [r6, #0]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003092:	4698      	mov	r8, r3
 8003094:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <LoadEEalias+0x78>)
	uint16_t add =0, temp =0;
 8003096:	241c      	movs	r4, #28
 8003098:	469a      	mov	sl, r3
 800309a:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <LoadEEalias+0x7c>)
 800309c:	469b      	mov	fp, r3
 800309e:	4643      	mov	r3, r8
 80030a0:	009f      	lsls	r7, r3, #2
 80030a2:	18fd      	adds	r5, r7, r3
 80030a4:	1d63      	adds	r3, r4, #5
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	4699      	mov	r9, r3
 80030aa:	006d      	lsls	r5, r5, #1
 80030ac:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 80030ae:	0020      	movs	r0, r4
 80030b0:	0031      	movs	r1, r6
 80030b2:	f004 fcf7 	bl	8007aa4 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 80030b6:	8833      	ldrh	r3, [r6, #0]
 80030b8:	3401      	adds	r4, #1
 80030ba:	706b      	strb	r3, [r5, #1]
 80030bc:	b2a4      	uxth	r4, r4
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	702b      	strb	r3, [r5, #0]
 80030c2:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80030c4:	454c      	cmp	r4, r9
 80030c6:	d1f2      	bne.n	80030ae <LoadEEalias+0x32>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 80030c8:	2300      	movs	r3, #0
 80030ca:	4447      	add	r7, r8
 80030cc:	007f      	lsls	r7, r7, #1
 80030ce:	4457      	add	r7, sl
 80030d0:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80030d2:	4643      	mov	r3, r8
 80030d4:	3301      	adds	r3, #1
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	4698      	mov	r8, r3
 80030da:	465b      	mov	r3, fp
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	4543      	cmp	r3, r8
 80030e0:	d2dd      	bcs.n	800309e <LoadEEalias+0x22>
	}
	
	return result;
}
 80030e2:	2000      	movs	r0, #0
 80030e4:	b003      	add	sp, #12
 80030e6:	bc3c      	pop	{r2, r3, r4, r5}
 80030e8:	4690      	mov	r8, r2
 80030ea:	4699      	mov	r9, r3
 80030ec:	46a2      	mov	sl, r4
 80030ee:	46ab      	mov	fp, r5
 80030f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	20000dc4 	.word	0x20000dc4
 80030f8:	20000000 	.word	0x20000000

080030fc <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 80030fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030fe:	4646      	mov	r6, r8
 8003100:	46d6      	mov	lr, sl
 8003102:	464f      	mov	r7, r9
 8003104:	b5c0      	push	{r6, r7, lr}
 8003106:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003108:	466b      	mov	r3, sp
 800310a:	1d9e      	adds	r6, r3, #6
 800310c:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 800310e:	4c22      	ldr	r4, [pc, #136]	; (8003198 <LoadEEgroup+0x9c>)
	uint16_t add =0, temp =0;
 8003110:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 8003112:	7823      	ldrb	r3, [r4, #0]
	uint16_t add =0, temp =0;
 8003114:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 8003116:	2b00      	cmp	r3, #0
 8003118:	d03a      	beq.n	8003190 <LoadEEgroup+0x94>
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <LoadEEgroup+0xa0>)
 800311c:	2100      	movs	r1, #0
 800311e:	4699      	mov	r9, r3
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8003120:	1d1f      	adds	r7, r3, #4
 8003122:	0028      	movs	r0, r5
 8003124:	0049      	lsls	r1, r1, #1
 8003126:	30cb      	adds	r0, #203	; 0xcb
 8003128:	1879      	adds	r1, r7, r1
 800312a:	b280      	uxth	r0, r0
		add++;
 800312c:	3501      	adds	r5, #1
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 800312e:	f004 fcb9 	bl	8007aa4 <EE_ReadVariable>
		add++;
 8003132:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8003134:	7823      	ldrb	r3, [r4, #0]
 8003136:	b2e9      	uxtb	r1, r5
 8003138:	428b      	cmp	r3, r1
 800313a:	d8f2      	bhi.n	8003122 <LoadEEgroup+0x26>
 800313c:	2338      	movs	r3, #56	; 0x38
 800313e:	002c      	movs	r4, r5
 8003140:	35cb      	adds	r5, #203	; 0xcb
 8003142:	469c      	mov	ip, r3
 8003144:	b2ab      	uxth	r3, r5
 8003146:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8003148:	2300      	movs	r3, #0
 800314a:	469a      	mov	sl, r3
 800314c:	3499      	adds	r4, #153	; 0x99
 800314e:	44e1      	add	r9, ip
 8003150:	b2a4      	uxth	r4, r4
	uint16_t add =0, temp =0;
 8003152:	464d      	mov	r5, r9
 8003154:	1d67      	adds	r7, r4, #5
 8003156:	b2bf      	uxth	r7, r7
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8003158:	0020      	movs	r0, r4
 800315a:	0031      	movs	r1, r6
 800315c:	f004 fca2 	bl	8007aa4 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8003160:	8833      	ldrh	r3, [r6, #0]
 8003162:	3401      	adds	r4, #1
 8003164:	706b      	strb	r3, [r5, #1]
 8003166:	b2a4      	uxth	r4, r4
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	702b      	strb	r3, [r5, #0]
 800316c:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800316e:	42bc      	cmp	r4, r7
 8003170:	d1f2      	bne.n	8003158 <LoadEEgroup+0x5c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8003172:	464b      	mov	r3, r9
 8003174:	4652      	mov	r2, sl
 8003176:	725a      	strb	r2, [r3, #9]
 8003178:	230a      	movs	r3, #10
 800317a:	469c      	mov	ip, r3
 800317c:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 800317e:	45a0      	cmp	r8, r4
 8003180:	d1e7      	bne.n	8003152 <LoadEEgroup+0x56>
	}
	
	return result;
}
 8003182:	2000      	movs	r0, #0
 8003184:	b002      	add	sp, #8
 8003186:	bc1c      	pop	{r2, r3, r4}
 8003188:	4690      	mov	r8, r2
 800318a:	4699      	mov	r9, r3
 800318c:	46a2      	mov	sl, r4
 800318e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003190:	4b02      	ldr	r3, [pc, #8]	; (800319c <LoadEEgroup+0xa0>)
 8003192:	4699      	mov	r9, r3
 8003194:	e7d2      	b.n	800313c <LoadEEgroup+0x40>
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	20000000 	.word	0x20000000
 800319c:	20000a98 	.word	0x20000a98

080031a0 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 80031a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a2:	46ce      	mov	lr, r9
 80031a4:	4647      	mov	r7, r8
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80031a6:	260e      	movs	r6, #14
 80031a8:	2300      	movs	r3, #0
BOS_Status LoadEEstreams(void){
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b085      	sub	sp, #20
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80031ae:	ac03      	add	r4, sp, #12
 80031b0:	446e      	add	r6, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 80031b2:	0021      	movs	r1, r4
 80031b4:	20e4      	movs	r0, #228	; 0xe4
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80031b6:	8023      	strh	r3, [r4, #0]
 80031b8:	8033      	strh	r3, [r6, #0]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 80031ba:	f004 fc73 	bl	8007aa4 <EE_ReadVariable>
	uint8_t direction =0;
 80031be:	2700      	movs	r7, #0
	if(!status1){
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d100      	bne.n	80031c6 <LoadEEstreams+0x26>
		direction =(uint8_t )temp1;
 80031c4:	7827      	ldrb	r7, [r4, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80031c6:	0021      	movs	r1, r4
 80031c8:	20e5      	movs	r0, #229	; 0xe5
 80031ca:	f004 fc6b 	bl	8007aa4 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80031ce:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80031d0:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80031d2:	20e6      	movs	r0, #230	; 0xe6
 80031d4:	f004 fc66 	bl	8007aa4 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 80031d8:	2300      	movs	r3, #0
	if(!status1 && !status2){
 80031da:	4305      	orrs	r5, r0
 80031dc:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 80031de:	4698      	mov	r8, r3
	if(!status1 && !status2){
 80031e0:	2d00      	cmp	r5, #0
 80031e2:	d104      	bne.n	80031ee <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 80031e4:	8823      	ldrh	r3, [r4, #0]
 80031e6:	8832      	ldrh	r2, [r6, #0]
 80031e8:	041b      	lsls	r3, r3, #16
 80031ea:	4698      	mov	r8, r3
 80031ec:	4490      	add	r8, r2
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 80031ee:	0021      	movs	r1, r4
 80031f0:	20e7      	movs	r0, #231	; 0xe7
 80031f2:	f004 fc57 	bl	8007aa4 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 80031f6:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 80031f8:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 80031fa:	20e8      	movs	r0, #232	; 0xe8
 80031fc:	f004 fc52 	bl	8007aa4 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8003200:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8003202:	4305      	orrs	r5, r0
 8003204:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8003206:	4699      	mov	r9, r3
	if(!status1 && !status2){
 8003208:	2d00      	cmp	r5, #0
 800320a:	d104      	bne.n	8003216 <LoadEEstreams+0x76>
		timeout =((uint32_t )temp1 << 16) + temp2;
 800320c:	8823      	ldrh	r3, [r4, #0]
 800320e:	8832      	ldrh	r2, [r6, #0]
 8003210:	041b      	lsls	r3, r3, #16
 8003212:	4699      	mov	r9, r3
 8003214:	4491      	add	r9, r2
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8003216:	0021      	movs	r1, r4
 8003218:	20e9      	movs	r0, #233	; 0xe9
 800321a:	f004 fc43 	bl	8007aa4 <EE_ReadVariable>
	if(!status1){
 800321e:	2800      	cmp	r0, #0
 8003220:	d030      	beq.n	8003284 <LoadEEstreams+0xe4>
 8003222:	4d26      	ldr	r5, [pc, #152]	; (80032bc <LoadEEstreams+0x11c>)
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8003224:	0021      	movs	r1, r4
 8003226:	20ea      	movs	r0, #234	; 0xea
 8003228:	f004 fc3c 	bl	8007aa4 <EE_ReadVariable>
	if(!status1){
 800322c:	2800      	cmp	r0, #0
 800322e:	d103      	bne.n	8003238 <LoadEEstreams+0x98>
		src2 =(uint8_t )(temp1 >> 8);
 8003230:	8823      	ldrh	r3, [r4, #0]
 8003232:	0a1a      	lsrs	r2, r3, #8
 8003234:	77aa      	strb	r2, [r5, #30]
		dst2 =(uint8_t )temp1;
 8003236:	77eb      	strb	r3, [r5, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8003238:	0021      	movs	r1, r4
 800323a:	20eb      	movs	r0, #235	; 0xeb
 800323c:	f004 fc32 	bl	8007aa4 <EE_ReadVariable>
	if(!status1){
 8003240:	2800      	cmp	r0, #0
 8003242:	d105      	bne.n	8003250 <LoadEEstreams+0xb0>
		src3 =(uint8_t )(temp1 >> 8);
 8003244:	2220      	movs	r2, #32
 8003246:	8823      	ldrh	r3, [r4, #0]
 8003248:	0a19      	lsrs	r1, r3, #8
 800324a:	54a9      	strb	r1, [r5, r2]
		dst3 =(uint8_t )temp1;
 800324c:	3201      	adds	r2, #1
 800324e:	54ab      	strb	r3, [r5, r2]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003250:	7f2b      	ldrb	r3, [r5, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <LoadEEstreams+0xbc>
 8003256:	7f6a      	ldrb	r2, [r5, #29]
 8003258:	2a00      	cmp	r2, #0
 800325a:	d120      	bne.n	800329e <LoadEEstreams+0xfe>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 800325c:	7fab      	ldrb	r3, [r5, #30]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <LoadEEstreams+0xc8>
 8003262:	7fea      	ldrb	r2, [r5, #31]
 8003264:	2a00      	cmp	r2, #0
 8003266:	d121      	bne.n	80032ac <LoadEEstreams+0x10c>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003268:	2320      	movs	r3, #32
 800326a:	5ceb      	ldrb	r3, [r5, r3]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <LoadEEstreams+0xd8>
 8003270:	2221      	movs	r2, #33	; 0x21
 8003272:	5caa      	ldrb	r2, [r5, r2]
 8003274:	2a00      	cmp	r2, #0
 8003276:	d10b      	bne.n	8003290 <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003278:	2000      	movs	r0, #0
 800327a:	b005      	add	sp, #20
 800327c:	bc0c      	pop	{r2, r3}
 800327e:	4690      	mov	r8, r2
 8003280:	4699      	mov	r9, r3
 8003282:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src1 =(uint8_t )(temp1 >> 8);
 8003284:	8823      	ldrh	r3, [r4, #0]
 8003286:	4d0d      	ldr	r5, [pc, #52]	; (80032bc <LoadEEstreams+0x11c>)
 8003288:	0a1a      	lsrs	r2, r3, #8
 800328a:	772a      	strb	r2, [r5, #28]
		dst1 =(uint8_t )temp1;
 800328c:	776b      	strb	r3, [r5, #29]
 800328e:	e7c9      	b.n	8003224 <LoadEEstreams+0x84>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003290:	9200      	str	r2, [sp, #0]
 8003292:	4641      	mov	r1, r8
 8003294:	464a      	mov	r2, r9
 8003296:	0038      	movs	r0, r7
 8003298:	f005 ff80 	bl	800919c <SetupDMAStreams>
 800329c:	e7ec      	b.n	8003278 <LoadEEstreams+0xd8>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 800329e:	9200      	str	r2, [sp, #0]
 80032a0:	4641      	mov	r1, r8
 80032a2:	464a      	mov	r2, r9
 80032a4:	0038      	movs	r0, r7
 80032a6:	f005 ff79 	bl	800919c <SetupDMAStreams>
 80032aa:	e7d7      	b.n	800325c <LoadEEstreams+0xbc>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 80032ac:	9200      	str	r2, [sp, #0]
 80032ae:	4641      	mov	r1, r8
 80032b0:	464a      	mov	r2, r9
 80032b2:	0038      	movs	r0, r7
 80032b4:	f005 ff72 	bl	800919c <SetupDMAStreams>
 80032b8:	e7d6      	b.n	8003268 <LoadEEstreams+0xc8>
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	20000b18 	.word	0x20000b18

080032c0 <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80032c0:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 80032c2:	b570      	push	{r4, r5, r6, lr}
 80032c4:	b082      	sub	sp, #8
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80032c6:	ac01      	add	r4, sp, #4
 80032c8:	0021      	movs	r1, r4
 80032ca:	0040      	lsls	r0, r0, #1
 80032cc:	f004 fbea 	bl	8007aa4 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d15d      	bne.n	8003390 <LoadEEparams+0xd0>
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80032d4:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =(uint8_t )temp1;
 80032d6:	8823      	ldrh	r3, [r4, #0]
 80032d8:	4d54      	ldr	r5, [pc, #336]	; (800342c <LoadEEparams+0x16c>)
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80032da:	0021      	movs	r1, r4
		BOSMessaging.response =(uint8_t )temp1;
 80032dc:	702b      	strb	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80032de:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80032e4:	f004 fbde 	bl	8007aa4 <EE_ReadVariable>

	if(!status1){
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d15e      	bne.n	80033aa <LoadEEparams+0xea>
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80032ec:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80032ee:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80032f0:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80032f2:	0bda      	lsrs	r2, r3, #15
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80032f4:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80032f6:	085b      	lsrs	r3, r3, #1
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80032f8:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80032fa:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80032fc:	f004 fbd2 	bl	8007aa4 <EE_ReadVariable>
	if(!status1)
		BOS.buttons.debounce =temp1;
 8003300:	4d4b      	ldr	r5, [pc, #300]	; (8003430 <LoadEEparams+0x170>)
	if(!status1)
 8003302:	2800      	cmp	r0, #0
 8003304:	d15e      	bne.n	80033c4 <LoadEEparams+0x104>
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003306:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 8003308:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800330a:	0021      	movs	r1, r4
 800330c:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =temp1;
 800330e:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003310:	f004 fbc8 	bl	8007aa4 <EE_ReadVariable>
	if(!status1)
 8003314:	2800      	cmp	r0, #0
 8003316:	d15f      	bne.n	80033d8 <LoadEEparams+0x118>
		BOS.buttons.singleClickTime =temp1;
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003318:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 800331a:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800331c:	0021      	movs	r1, r4
 800331e:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =temp1;
 8003320:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003322:	f004 fbbf 	bl	8007aa4 <EE_ReadVariable>
	if(!status1){
 8003326:	2800      	cmp	r0, #0
 8003328:	d160      	bne.n	80033ec <LoadEEparams+0x12c>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 800332a:	8823      	ldrh	r3, [r4, #0]
 800332c:	712b      	strb	r3, [r5, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	716b      	strb	r3, [r5, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003332:	208c      	movs	r0, #140	; 0x8c
 8003334:	0021      	movs	r1, r4
 8003336:	0040      	lsls	r0, r0, #1
 8003338:	f004 fbb4 	bl	8007aa4 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800333c:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 800333e:	0006      	movs	r6, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003340:	201a      	movs	r0, #26
 8003342:	1d99      	adds	r1, r3, #6
 8003344:	30ff      	adds	r0, #255	; 0xff
 8003346:	f004 fbad 	bl	8007aa4 <EE_ReadVariable>
	if(!status1 && !status2){
 800334a:	4306      	orrs	r6, r0
 800334c:	b2b6      	uxth	r6, r6
 800334e:	2e00      	cmp	r6, #0
 8003350:	d15f      	bne.n	8003412 <LoadEEparams+0x152>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 8003352:	466b      	mov	r3, sp
 8003354:	88db      	ldrh	r3, [r3, #6]
 8003356:	8822      	ldrh	r2, [r4, #0]
 8003358:	041b      	lsls	r3, r3, #16
 800335a:	4313      	orrs	r3, r2
 800335c:	60ab      	str	r3, [r5, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 800335e:	208d      	movs	r0, #141	; 0x8d
 8003360:	0021      	movs	r1, r4
 8003362:	0040      	lsls	r0, r0, #1
 8003364:	f004 fb9e 	bl	8007aa4 <EE_ReadVariable>
	if(!status1){
 8003368:	2800      	cmp	r0, #0
 800336a:	d145      	bne.n	80033f8 <LoadEEparams+0x138>
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800336c:	201c      	movs	r0, #28
		BOS.daylightsaving =(int8_t )temp1;
 800336e:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003370:	0021      	movs	r1, r4
		BOS.daylightsaving =(int8_t )temp1;
 8003372:	732b      	strb	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003374:	30ff      	adds	r0, #255	; 0xff
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	736b      	strb	r3, [r5, #13]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800337a:	f004 fb93 	bl	8007aa4 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800337e:	2800      	cmp	r0, #0
 8003380:	d044      	beq.n	800340c <LoadEEparams+0x14c>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 8003382:	2326      	movs	r3, #38	; 0x26
 8003384:	4a2b      	ldr	r2, [pc, #172]	; (8003434 <LoadEEparams+0x174>)
 8003386:	5cd3      	ldrb	r3, [r2, r3]
 8003388:	76ab      	strb	r3, [r5, #26]
	}
	
	return result;
}
 800338a:	2000      	movs	r0, #0
 800338c:	b002      	add	sp, #8
 800338e:	bd70      	pop	{r4, r5, r6, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003390:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =BOSMessging_default.response;
 8003392:	4b28      	ldr	r3, [pc, #160]	; (8003434 <LoadEEparams+0x174>)
 8003394:	4d25      	ldr	r5, [pc, #148]	; (800342c <LoadEEparams+0x16c>)
 8003396:	791a      	ldrb	r2, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003398:	0021      	movs	r1, r4
		BOSMessaging.response =BOSMessging_default.response;
 800339a:	702a      	strb	r2, [r5, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 800339c:	795b      	ldrb	r3, [r3, #5]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800339e:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =BOSMessging_default.trace;
 80033a0:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80033a2:	f004 fb7f 	bl	8007aa4 <EE_ReadVariable>
	if(!status1){
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d0a0      	beq.n	80032ec <LoadEEparams+0x2c>
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80033aa:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80033ac:	4b21      	ldr	r3, [pc, #132]	; (8003434 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80033ae:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80033b0:	7a1a      	ldrb	r2, [r3, #8]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80033b2:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80033b4:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80033b6:	895b      	ldrh	r3, [r3, #10]
 80033b8:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80033ba:	f004 fb73 	bl	8007aa4 <EE_ReadVariable>
		BOS.buttons.debounce =temp1;
 80033be:	4d1c      	ldr	r5, [pc, #112]	; (8003430 <LoadEEparams+0x170>)
	if(!status1)
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d0a0      	beq.n	8003306 <LoadEEparams+0x46>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80033c4:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80033c8:	0021      	movs	r1, r4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80033ca:	899b      	ldrh	r3, [r3, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80033cc:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80033ce:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80033d0:	f004 fb68 	bl	8007aa4 <EE_ReadVariable>
	if(!status1)
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d09f      	beq.n	8003318 <LoadEEparams+0x58>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80033d8:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80033da:	4b16      	ldr	r3, [pc, #88]	; (8003434 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80033dc:	0021      	movs	r1, r4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80033de:	89db      	ldrh	r3, [r3, #14]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80033e0:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80033e2:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80033e4:	f004 fb5e 	bl	8007aa4 <EE_ReadVariable>
	if(!status1){
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d09e      	beq.n	800332a <LoadEEparams+0x6a>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <LoadEEparams+0x174>)
 80033ee:	7c1a      	ldrb	r2, [r3, #16]
 80033f0:	712a      	strb	r2, [r5, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 80033f2:	7c5b      	ldrb	r3, [r3, #17]
 80033f4:	716b      	strb	r3, [r5, #5]
 80033f6:	e79c      	b.n	8003332 <LoadEEparams+0x72>
		BOS.daylightsaving =DAYLIGHT_NONE;
 80033f8:	23c0      	movs	r3, #192	; 0xc0
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80033fa:	201c      	movs	r0, #28
		BOS.daylightsaving =DAYLIGHT_NONE;
 80033fc:	015b      	lsls	r3, r3, #5
 80033fe:	81ab      	strh	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003400:	0021      	movs	r1, r4
 8003402:	30ff      	adds	r0, #255	; 0xff
 8003404:	f004 fb4e 	bl	8007aa4 <EE_ReadVariable>
	if(!status1){
 8003408:	2800      	cmp	r0, #0
 800340a:	d1ba      	bne.n	8003382 <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 800340c:	8823      	ldrh	r3, [r4, #0]
 800340e:	76ab      	strb	r3, [r5, #26]
 8003410:	e7bb      	b.n	800338a <LoadEEparams+0xca>
	else if(CLI_LOW_Baudrate_Flag)
 8003412:	2322      	movs	r3, #34	; 0x22
 8003414:	4a08      	ldr	r2, [pc, #32]	; (8003438 <LoadEEparams+0x178>)
 8003416:	5cd3      	ldrb	r3, [r2, r3]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <LoadEEparams+0x164>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800341c:	23e1      	movs	r3, #225	; 0xe1
 800341e:	025b      	lsls	r3, r3, #9
 8003420:	60ab      	str	r3, [r5, #8]
 8003422:	e79c      	b.n	800335e <LoadEEparams+0x9e>
		BOS.clibaudrate =BOS_default.clibaudrate;
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <LoadEEparams+0x174>)
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	60ab      	str	r3, [r5, #8]
 800342a:	e798      	b.n	800335e <LoadEEparams+0x9e>
 800342c:	20006c4c 	.word	0x20006c4c
 8003430:	20006ccc 	.word	0x20006ccc
 8003434:	20000000 	.word	0x20000000
 8003438:	20000b18 	.word	0x20000b18

0800343c <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 800343c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800343e:	46de      	mov	lr, fp
 8003440:	4657      	mov	r7, sl
 8003442:	464e      	mov	r6, r9
 8003444:	4645      	mov	r5, r8
 8003446:	b5e0      	push	{r5, r6, r7, lr}
 8003448:	b08b      	sub	sp, #44	; 0x2c
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 800344a:	ab02      	add	r3, sp, #8
 800344c:	469c      	mov	ip, r3
 800344e:	261e      	movs	r6, #30
 8003450:	2300      	movs	r3, #0
 8003452:	4466      	add	r6, ip
 8003454:	8033      	strh	r3, [r6, #0]
 8003456:	330f      	adds	r3, #15
 8003458:	469a      	mov	sl, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800345a:	3b0e      	subs	r3, #14
	uint16_t temp16 =0, status1 =0;
 800345c:	2501      	movs	r5, #1
 800345e:	24ec      	movs	r4, #236	; 0xec
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003460:	469b      	mov	fp, r3
 8003462:	e004      	b.n	800346e <LoadEEbuttons+0x32>
 8003464:	3404      	adds	r4, #4
 8003466:	3501      	adds	r5, #1
 8003468:	b2a4      	uxth	r4, r4
	for(uint8_t i =0; i <= NumOfPorts; i++){
 800346a:	2d07      	cmp	r5, #7
 800346c:	d05e      	beq.n	800352c <LoadEEbuttons+0xf0>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 800346e:	0031      	movs	r1, r6
 8003470:	0020      	movs	r0, r4
 8003472:	f004 fb17 	bl	8007aa4 <EE_ReadVariable>
 8003476:	b2eb      	uxtb	r3, r5
 8003478:	1e07      	subs	r7, r0, #0
 800347a:	4699      	mov	r9, r3
		if(!status1)									// This variable exists
 800347c:	d1f2      	bne.n	8003464 <LoadEEbuttons+0x28>
			temp8 =(uint8_t )(temp16 >> 8);
 800347e:	8832      	ldrh	r2, [r6, #0]
 8003480:	0a13      	lsrs	r3, r2, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003482:	0919      	lsrs	r1, r3, #4
 8003484:	42a9      	cmp	r1, r5
 8003486:	d1ed      	bne.n	8003464 <LoadEEbuttons+0x28>
 8003488:	4651      	mov	r1, sl
 800348a:	400b      	ands	r3, r1
 800348c:	d0ea      	beq.n	8003464 <LoadEEbuttons+0x28>
				button[i + 1].type =temp8 & 0x0F;
 800348e:	482b      	ldr	r0, [pc, #172]	; (800353c <LoadEEbuttons+0x100>)
 8003490:	00e9      	lsls	r1, r5, #3
 8003492:	4680      	mov	r8, r0
 8003494:	1949      	adds	r1, r1, r5
 8003496:	4488      	add	r8, r1
 8003498:	4641      	mov	r1, r8
 800349a:	00a8      	lsls	r0, r5, #2
 800349c:	704b      	strb	r3, [r1, #1]
 800349e:	b283      	uxth	r3, r0
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 80034a0:	0018      	movs	r0, r3
 80034a2:	30e9      	adds	r0, #233	; 0xe9
				button[i + 1].events =(uint8_t )temp16;
 80034a4:	720a      	strb	r2, [r1, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 80034a6:	b280      	uxth	r0, r0
 80034a8:	0031      	movs	r1, r6
 80034aa:	9307      	str	r3, [sp, #28]
 80034ac:	f004 fafa 	bl	8007aa4 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80034b0:	4641      	mov	r1, r8
 80034b2:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80034b4:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80034b6:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80034b8:	30ea      	adds	r0, #234	; 0xea
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80034ba:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80034bc:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80034be:	b280      	uxth	r0, r0
 80034c0:	0031      	movs	r1, r6
 80034c2:	f004 faef 	bl	8007aa4 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80034c6:	4641      	mov	r1, r8
 80034c8:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80034ca:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80034cc:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80034ce:	30eb      	adds	r0, #235	; 0xeb
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80034d0:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 80034d2:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80034d4:	b280      	uxth	r0, r0
 80034d6:	0031      	movs	r1, r6
 80034d8:	f004 fae4 	bl	8007aa4 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80034dc:	4641      	mov	r1, r8
 80034de:	8833      	ldrh	r3, [r6, #0]
				AddPortButton(button[i + 1].type,i + 1);
 80034e0:	7848      	ldrb	r0, [r1, #1]
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80034e2:	0a1a      	lsrs	r2, r3, #8
 80034e4:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80034e6:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i + 1].type,i + 1);
 80034e8:	4649      	mov	r1, r9
 80034ea:	f004 fea3 	bl	8008234 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80034ee:	4643      	mov	r3, r8
 80034f0:	4658      	mov	r0, fp
 80034f2:	7a19      	ldrb	r1, [r3, #8]
 80034f4:	789b      	ldrb	r3, [r3, #2]
 80034f6:	104a      	asrs	r2, r1, #1
 80034f8:	4002      	ands	r2, r0
 80034fa:	4001      	ands	r1, r0
 80034fc:	4640      	mov	r0, r8
 80034fe:	9705      	str	r7, [sp, #20]
 8003500:	79c0      	ldrb	r0, [r0, #7]
 8003502:	3404      	adds	r4, #4
 8003504:	9004      	str	r0, [sp, #16]
 8003506:	4640      	mov	r0, r8
 8003508:	7980      	ldrb	r0, [r0, #6]
 800350a:	3501      	adds	r5, #1
 800350c:	9003      	str	r0, [sp, #12]
 800350e:	4640      	mov	r0, r8
 8003510:	7940      	ldrb	r0, [r0, #5]
 8003512:	b2a4      	uxth	r4, r4
 8003514:	9002      	str	r0, [sp, #8]
 8003516:	4640      	mov	r0, r8
 8003518:	7900      	ldrb	r0, [r0, #4]
 800351a:	9001      	str	r0, [sp, #4]
 800351c:	4640      	mov	r0, r8
 800351e:	78c0      	ldrb	r0, [r0, #3]
 8003520:	9000      	str	r0, [sp, #0]
 8003522:	4648      	mov	r0, r9
 8003524:	f004 ff8c 	bl	8008440 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003528:	2d07      	cmp	r5, #7
 800352a:	d1a0      	bne.n	800346e <LoadEEbuttons+0x32>
			}
		}
	}
	
	return result;
}
 800352c:	2000      	movs	r0, #0
 800352e:	b00b      	add	sp, #44	; 0x2c
 8003530:	bc3c      	pop	{r2, r3, r4, r5}
 8003532:	4690      	mov	r8, r2
 8003534:	4699      	mov	r9, r3
 8003536:	46a2      	mov	sl, r4
 8003538:	46ab      	mov	fp, r5
 800353a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800353c:	2000172c 	.word	0x2000172c

08003540 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	46de      	mov	lr, fp
 8003544:	4645      	mov	r5, r8
 8003546:	4657      	mov	r7, sl
 8003548:	464e      	mov	r6, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 800354a:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 800354c:	b5e0      	push	{r5, r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 800354e:	f010 fb19 	bl	8013b84 <malloc>
 8003552:	1e05      	subs	r5, r0, #0
	if(snipBuffer == NULL)
 8003554:	d065      	beq.n	8003622 <LoadROsnippets+0xe2>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 8003556:	4c3b      	ldr	r4, [pc, #236]	; (8003644 <LoadROsnippets+0x104>)
		return BOS_ERROR;
 8003558:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 800355a:	7822      	ldrb	r2, [r4, #0]
 800355c:	2afe      	cmp	r2, #254	; 0xfe
 800355e:	d156      	bne.n	800360e <LoadROsnippets+0xce>
 8003560:	1c6b      	adds	r3, r5, #1
 8003562:	4698      	mov	r8, r3
 8003564:	2364      	movs	r3, #100	; 0x64
 8003566:	4699      	mov	r9, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003568:	4b37      	ldr	r3, [pc, #220]	; (8003648 <LoadROsnippets+0x108>)
 800356a:	4e38      	ldr	r6, [pc, #224]	; (800364c <LoadROsnippets+0x10c>)
 800356c:	469b      	mov	fp, r3
 800356e:	44b1      	add	r9, r6
 8003570:	0020      	movs	r0, r4
 8003572:	46a2      	mov	sl, r4
 8003574:	3014      	adds	r0, #20
 8003576:	1b29      	subs	r1, r5, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003578:	7822      	ldrb	r2, [r4, #0]
 800357a:	550a      	strb	r2, [r1, r4]
 800357c:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 800357e:	4284      	cmp	r4, r0
 8003580:	d1fa      	bne.n	8003578 <LoadROsnippets+0x38>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003582:	2214      	movs	r2, #20
 8003584:	4641      	mov	r1, r8
 8003586:	0030      	movs	r0, r6
 8003588:	f010 fd49 	bl	801401e <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 800358c:	2100      	movs	r1, #0
 800358e:	2214      	movs	r2, #20
 8003590:	0028      	movs	r0, r5
 8003592:	f010 fd4d 	bl	8014030 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003596:	7821      	ldrb	r1, [r4, #0]
 8003598:	1c8b      	adds	r3, r1, #2
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d942      	bls.n	8003626 <LoadROsnippets+0xe6>
 80035a0:	4657      	mov	r7, sl
 80035a2:	0028      	movs	r0, r5
 80035a4:	3746      	adds	r7, #70	; 0x46
		i =0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e002      	b.n	80035b0 <LoadROsnippets+0x70>
 80035aa:	3001      	adds	r0, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035ac:	42a7      	cmp	r7, r4
 80035ae:	d034      	beq.n	800361a <LoadROsnippets+0xda>
			++currentAdd;
 80035b0:	3401      	adds	r4, #1
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80035b2:	7001      	strb	r1, [r0, #0]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035b4:	7821      	ldrb	r1, [r4, #0]
			++i;
 80035b6:	3301      	adds	r3, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035b8:	1c8a      	adds	r2, r1, #2
 80035ba:	b2d2      	uxtb	r2, r2
			++i;
 80035bc:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035be:	2a01      	cmp	r2, #1
 80035c0:	d8f3      	bhi.n	80035aa <LoadROsnippets+0x6a>
 80035c2:	469a      	mov	sl, r3
 80035c4:	1e5a      	subs	r2, r3, #1
		if(snipBuffer[i - 1] != 0)
 80035c6:	5caa      	ldrb	r2, [r5, r2]
 80035c8:	2a00      	cmp	r2, #0
 80035ca:	d002      	beq.n	80035d2 <LoadROsnippets+0x92>
			++i;	// String termination char was not recorded, then add one
 80035cc:	3301      	adds	r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	469a      	mov	sl, r3
		snippets[s].cmd =(char* )malloc(i);
 80035d2:	4650      	mov	r0, sl
 80035d4:	f010 fad6 	bl	8013b84 <malloc>
 80035d8:	60f0      	str	r0, [r6, #12]
		if(snippets[s].cmd == NULL){
 80035da:	2800      	cmp	r0, #0
 80035dc:	d028      	beq.n	8003630 <LoadROsnippets+0xf0>
			memcpy(snippets[s].cmd,snipBuffer,i);
 80035de:	4652      	mov	r2, sl
 80035e0:	0029      	movs	r1, r5
 80035e2:	f010 fd1c 	bl	801401e <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80035e6:	465b      	mov	r3, fp
 80035e8:	465a      	mov	r2, fp
 80035ea:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 80035ec:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 80035ee:	3301      	adds	r3, #1
 80035f0:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 80035f2:	0028      	movs	r0, r5
 80035f4:	4652      	mov	r2, sl
 80035f6:	f010 fd1b 	bl	8014030 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 80035fa:	7823      	ldrb	r3, [r4, #0]
 80035fc:	2bfe      	cmp	r3, #254	; 0xfe
 80035fe:	d102      	bne.n	8003606 <LoadROsnippets+0xc6>
 8003600:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003602:	45b1      	cmp	r9, r6
 8003604:	d1b4      	bne.n	8003570 <LoadROsnippets+0x30>
			break;
	}
	
	free(snipBuffer);
 8003606:	0028      	movs	r0, r5
 8003608:	f010 fac6 	bl	8013b98 <free>
	return BOS_OK;
 800360c:	2000      	movs	r0, #0
}
 800360e:	bc3c      	pop	{r2, r3, r4, r5}
 8003610:	4690      	mov	r8, r2
 8003612:	4699      	mov	r9, r3
 8003614:	46a2      	mov	sl, r4
 8003616:	46ab      	mov	fp, r5
 8003618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800361a:	2332      	movs	r3, #50	; 0x32
 800361c:	2231      	movs	r2, #49	; 0x31
 800361e:	469a      	mov	sl, r3
 8003620:	e7d1      	b.n	80035c6 <LoadROsnippets+0x86>
		return BOS_MEM_FULL;
 8003622:	20fb      	movs	r0, #251	; 0xfb
 8003624:	e7f3      	b.n	800360e <LoadROsnippets+0xce>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003626:	2201      	movs	r2, #1
 8003628:	2300      	movs	r3, #0
 800362a:	4252      	negs	r2, r2
 800362c:	469a      	mov	sl, r3
 800362e:	e7ca      	b.n	80035c6 <LoadROsnippets+0x86>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003630:	2214      	movs	r2, #20
 8003632:	2100      	movs	r1, #0
 8003634:	0030      	movs	r0, r6
 8003636:	f010 fcfb 	bl	8014030 <memset>
			free(snipBuffer);
 800363a:	0028      	movs	r0, r5
 800363c:	f010 faac 	bl	8013b98 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003640:	200e      	movs	r0, #14
 8003642:	e7e4      	b.n	800360e <LoadROsnippets+0xce>
 8003644:	0801dc00 	.word	0x0801dc00
 8003648:	20001140 	.word	0x20001140
 800364c:	20006ce8 	.word	0x20006ce8

08003650 <LoadEEvars>:
void LoadEEvars(void){
 8003650:	b510      	push	{r4, lr}
	LoadROtopology();
 8003652:	f7ff fc9d 	bl	8002f90 <LoadROtopology>
	LoadEEportsDir();
 8003656:	f7ff fceb 	bl	8003030 <LoadEEportsDir>
	LoadEEalias();
 800365a:	f7ff fd0f 	bl	800307c <LoadEEalias>
	LoadEEgroup();
 800365e:	f7ff fd4d 	bl	80030fc <LoadEEgroup>
	LoadEEstreams();
 8003662:	f7ff fd9d 	bl	80031a0 <LoadEEstreams>
	LoadEEparams();
 8003666:	f7ff fe2b 	bl	80032c0 <LoadEEparams>
	LoadEEbuttons();
 800366a:	f7ff fee7 	bl	800343c <LoadEEbuttons>
	LoadROsnippets();
 800366e:	f7ff ff67 	bl	8003540 <LoadROsnippets>
}
 8003672:	bd10      	pop	{r4, pc}

08003674 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003676:	46c6      	mov	lr, r8
 8003678:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800367a:	4e10      	ldr	r6, [pc, #64]	; (80036bc <SaveEEportsDir+0x48>)
 800367c:	7833      	ldrb	r3, [r6, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d016      	beq.n	80036b0 <SaveEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8003682:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003684:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003686:	4698      	mov	r8, r3
 8003688:	4f0d      	ldr	r7, [pc, #52]	; (80036c0 <SaveEEportsDir+0x4c>)
 800368a:	e007      	b.n	800369c <SaveEEportsDir+0x28>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800368c:	2c19      	cmp	r4, #25
 800368e:	d901      	bls.n	8003694 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 8003690:	230a      	movs	r3, #10
 8003692:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003694:	7833      	ldrb	r3, [r6, #0]
 8003696:	b2ec      	uxtb	r4, r5
 8003698:	42a3      	cmp	r3, r4
 800369a:	d30b      	bcc.n	80036b4 <SaveEEportsDir+0x40>
		if(arrayPortsDir[i - 1])
 800369c:	1e63      	subs	r3, r4, #1
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	5af9      	ldrh	r1, [r7, r3]
 80036a2:	1c65      	adds	r5, r4, #1
 80036a4:	2900      	cmp	r1, #0
 80036a6:	d0f1      	beq.n	800368c <SaveEEportsDir+0x18>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80036a8:	b2a8      	uxth	r0, r5
 80036aa:	f004 fa2b 	bl	8007b04 <EE_WriteVariable>
 80036ae:	e7ed      	b.n	800368c <SaveEEportsDir+0x18>
	BOS_Status result =BOS_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	4698      	mov	r8, r3
	}
	
	return result;
}
 80036b4:	4640      	mov	r0, r8
 80036b6:	bc04      	pop	{r2}
 80036b8:	4690      	mov	r8, r2
 80036ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036bc:	20000000 	.word	0x20000000
 80036c0:	20007140 	.word	0x20007140

080036c4 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80036c4:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 80036c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036c8:	4646      	mov	r6, r8
 80036ca:	46d6      	mov	lr, sl
 80036cc:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 80036ce:	4698      	mov	r8, r3
 80036d0:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 80036d2:	b5c0      	push	{r6, r7, lr}
 80036d4:	4699      	mov	r9, r3
 80036d6:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80036d8:	2600      	movs	r6, #0
 80036da:	469a      	mov	sl, r3
 80036dc:	e005      	b.n	80036ea <SaveEEalias+0x26>
 80036de:	4653      	mov	r3, sl
 80036e0:	3601      	adds	r6, #1
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	b2f6      	uxtb	r6, r6
 80036e6:	42b3      	cmp	r3, r6
 80036e8:	d325      	bcc.n	8003736 <SaveEEalias+0x72>
	    {
		if(moduleAlias[i][0]){
 80036ea:	464b      	mov	r3, r9
 80036ec:	00b4      	lsls	r4, r6, #2
 80036ee:	19a4      	adds	r4, r4, r6
 80036f0:	0064      	lsls	r4, r4, #1
 80036f2:	5d1b      	ldrb	r3, [r3, r4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f2      	beq.n	80036de <SaveEEalias+0x1a>
 80036f8:	4645      	mov	r5, r8
 80036fa:	4647      	mov	r7, r8
 80036fc:	351c      	adds	r5, #28
 80036fe:	3721      	adds	r7, #33	; 0x21
 8003700:	444c      	add	r4, r9
 8003702:	b2ad      	uxth	r5, r5
 8003704:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003706:	7861      	ldrb	r1, [r4, #1]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 800370c:	0028      	movs	r0, r5
 800370e:	3501      	adds	r5, #1
 8003710:	b289      	uxth	r1, r1
 8003712:	b2ad      	uxth	r5, r5
 8003714:	f004 f9f6 	bl	8007b04 <EE_WriteVariable>
 8003718:	3402      	adds	r4, #2
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800371a:	42bd      	cmp	r5, r7
 800371c:	d001      	beq.n	8003722 <SaveEEalias+0x5e>
 800371e:	7823      	ldrb	r3, [r4, #0]
 8003720:	e7f1      	b.n	8003706 <SaveEEalias+0x42>
 8003722:	4643      	mov	r3, r8
 8003724:	3305      	adds	r3, #5
 8003726:	b29b      	uxth	r3, r3
 8003728:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800372a:	4653      	mov	r3, sl
 800372c:	3601      	adds	r6, #1
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	b2f6      	uxtb	r6, r6
 8003732:	42b3      	cmp	r3, r6
 8003734:	d2d9      	bcs.n	80036ea <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 8003736:	2000      	movs	r0, #0
 8003738:	bc1c      	pop	{r2, r3, r4}
 800373a:	4690      	mov	r8, r2
 800373c:	4699      	mov	r9, r3
 800373e:	46a2      	mov	sl, r4
 8003740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	20000dc4 	.word	0x20000dc4
 8003748:	20000000 	.word	0x20000000

0800374c <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	46de      	mov	lr, fp
 8003750:	4657      	mov	r7, sl
 8003752:	464e      	mov	r6, r9
 8003754:	4645      	mov	r5, r8
 8003756:	468b      	mov	fp, r1
 8003758:	b5e0      	push	{r5, r6, r7, lr}
 800375a:	001e      	movs	r6, r3
 800375c:	ab0a      	add	r3, sp, #40	; 0x28
 800375e:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003760:	b281      	uxth	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003762:	469a      	mov	sl, r3
 8003764:	ab0b      	add	r3, sp, #44	; 0x2c
 8003766:	781d      	ldrb	r5, [r3, #0]
 8003768:	ab0c      	add	r3, sp, #48	; 0x30
 800376a:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 800376c:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800376e:	4698      	mov	r8, r3
 8003770:	ab0d      	add	r3, sp, #52	; 0x34
 8003772:	781c      	ldrb	r4, [r3, #0]
 8003774:	ab0e      	add	r3, sp, #56	; 0x38
 8003776:	4691      	mov	r9, r2
 8003778:	781f      	ldrb	r7, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 800377a:	f004 f9c3 	bl	8007b04 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 800377e:	465b      	mov	r3, fp
 8003780:	0a19      	lsrs	r1, r3, #8
 8003782:	b289      	uxth	r1, r1
 8003784:	20e5      	movs	r0, #229	; 0xe5
 8003786:	f004 f9bd 	bl	8007b04 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800378a:	465b      	mov	r3, fp
 800378c:	20e6      	movs	r0, #230	; 0xe6
 800378e:	b299      	uxth	r1, r3
 8003790:	f004 f9b8 	bl	8007b04 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003794:	464b      	mov	r3, r9
 8003796:	0a19      	lsrs	r1, r3, #8
 8003798:	b289      	uxth	r1, r1
 800379a:	20e7      	movs	r0, #231	; 0xe7
 800379c:	f004 f9b2 	bl	8007b04 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037a0:	464b      	mov	r3, r9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037a2:	0236      	lsls	r6, r6, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037a4:	b299      	uxth	r1, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037a6:	4456      	add	r6, sl
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037a8:	20e8      	movs	r0, #232	; 0xe8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80037aa:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037ac:	f004 f9aa 	bl	8007b04 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80037b0:	4445      	add	r5, r8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037b2:	b2b1      	uxth	r1, r6
 80037b4:	20e9      	movs	r0, #233	; 0xe9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80037b6:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037b8:	f004 f9a4 	bl	8007b04 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80037bc:	19e4      	adds	r4, r4, r7
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80037be:	b2a9      	uxth	r1, r5
 80037c0:	20ea      	movs	r0, #234	; 0xea
 80037c2:	f004 f99f 	bl	8007b04 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80037c6:	b2a1      	uxth	r1, r4
 80037c8:	20eb      	movs	r0, #235	; 0xeb
 80037ca:	f004 f99b 	bl	8007b04 <EE_WriteVariable>
	
	return result;
}
 80037ce:	2000      	movs	r0, #0
 80037d0:	bc3c      	pop	{r2, r3, r4, r5}
 80037d2:	4690      	mov	r8, r2
 80037d4:	4699      	mov	r9, r3
 80037d6:	46a2      	mov	sl, r4
 80037d8:	46ab      	mov	fp, r5
 80037da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080037dc <SaveEEparams>:

BOS_Status SaveEEparams(void){
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80037dc:	208a      	movs	r0, #138	; 0x8a
BOS_Status SaveEEparams(void){
 80037de:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80037e0:	4c1e      	ldr	r4, [pc, #120]	; (800385c <SaveEEparams+0x80>)
 80037e2:	0040      	lsls	r0, r0, #1
 80037e4:	7863      	ldrb	r3, [r4, #1]
 80037e6:	7821      	ldrb	r1, [r4, #0]
 80037e8:	015b      	lsls	r3, r3, #5
 80037ea:	4319      	orrs	r1, r3
 80037ec:	f004 f98a 	bl	8007b04 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 80037f0:	208e      	movs	r0, #142	; 0x8e
 80037f2:	7921      	ldrb	r1, [r4, #4]
 80037f4:	88e3      	ldrh	r3, [r4, #6]
 80037f6:	03c9      	lsls	r1, r1, #15
 80037f8:	4319      	orrs	r1, r3
 80037fa:	b289      	uxth	r1, r1
 80037fc:	0040      	lsls	r0, r0, #1
 80037fe:	f004 f981 	bl	8007b04 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003802:	2016      	movs	r0, #22
 8003804:	4c16      	ldr	r4, [pc, #88]	; (8003860 <SaveEEparams+0x84>)
 8003806:	30ff      	adds	r0, #255	; 0xff
 8003808:	8821      	ldrh	r1, [r4, #0]
 800380a:	f004 f97b 	bl	8007b04 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 800380e:	208b      	movs	r0, #139	; 0x8b
 8003810:	8861      	ldrh	r1, [r4, #2]
 8003812:	0040      	lsls	r0, r0, #1
 8003814:	f004 f976 	bl	8007b04 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003818:	2018      	movs	r0, #24
 800381a:	7963      	ldrb	r3, [r4, #5]
 800381c:	7b21      	ldrb	r1, [r4, #12]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	4319      	orrs	r1, r3
 8003822:	30ff      	adds	r0, #255	; 0xff
 8003824:	f004 f96e 	bl	8007b04 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003828:	208c      	movs	r0, #140	; 0x8c
 800382a:	8921      	ldrh	r1, [r4, #8]
 800382c:	0040      	lsls	r0, r0, #1
 800382e:	f004 f969 	bl	8007b04 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8003832:	201a      	movs	r0, #26
 8003834:	8961      	ldrh	r1, [r4, #10]
 8003836:	30ff      	adds	r0, #255	; 0xff
 8003838:	f004 f964 	bl	8007b04 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800383c:	208d      	movs	r0, #141	; 0x8d
 800383e:	7b63      	ldrb	r3, [r4, #13]
 8003840:	7921      	ldrb	r1, [r4, #4]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	4319      	orrs	r1, r3
 8003846:	0040      	lsls	r0, r0, #1
 8003848:	f004 f95c 	bl	8007b04 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 800384c:	201c      	movs	r0, #28
 800384e:	7ea1      	ldrb	r1, [r4, #26]
 8003850:	30ff      	adds	r0, #255	; 0xff
 8003852:	f004 f957 	bl	8007b04 <EE_WriteVariable>
	
	return result;
}
 8003856:	2000      	movs	r0, #0
 8003858:	bd10      	pop	{r4, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	20006c4c 	.word	0x20006c4c
 8003860:	20006ccc 	.word	0x20006ccc

08003864 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 8003864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003866:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003868:	4f12      	ldr	r7, [pc, #72]	; (80038b4 <ClearEEportsDir+0x50>)
BOS_Status ClearEEportsDir(void){
 800386a:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 800386c:	2234      	movs	r2, #52	; 0x34
 800386e:	2100      	movs	r1, #0
 8003870:	0038      	movs	r0, r7
 8003872:	f010 fbdd 	bl	8014030 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 8003876:	4e10      	ldr	r6, [pc, #64]	; (80038b8 <ClearEEportsDir+0x54>)
 8003878:	7833      	ldrb	r3, [r6, #0]
	BOS_Status result =BOS_OK;
 800387a:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 800387c:	2b00      	cmp	r3, #0
 800387e:	d015      	beq.n	80038ac <ClearEEportsDir+0x48>
	BOS_Status result =BOS_OK;
 8003880:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003882:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003884:	4698      	mov	r8, r3
 8003886:	2502      	movs	r5, #2
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003888:	2c19      	cmp	r4, #25
 800388a:	d901      	bls.n	8003890 <ClearEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 800388c:	230a      	movs	r3, #10
 800388e:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003890:	7833      	ldrb	r3, [r6, #0]
 8003892:	b2ec      	uxtb	r4, r5
 8003894:	42a3      	cmp	r3, r4
 8003896:	d309      	bcc.n	80038ac <ClearEEportsDir+0x48>
 8003898:	1e63      	subs	r3, r4, #1
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	5af9      	ldrh	r1, [r7, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800389e:	1c65      	adds	r5, r4, #1
		if(arrayPortsDir[i - 1])
 80038a0:	2900      	cmp	r1, #0
 80038a2:	d0f1      	beq.n	8003888 <ClearEEportsDir+0x24>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80038a4:	b2a8      	uxth	r0, r5
 80038a6:	f004 f92d 	bl	8007b04 <EE_WriteVariable>
 80038aa:	e7ed      	b.n	8003888 <ClearEEportsDir+0x24>
	}
	
	return result;
}
 80038ac:	4640      	mov	r0, r8
 80038ae:	bc04      	pop	{r2}
 80038b0:	4690      	mov	r8, r2
 80038b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b4:	20007140 	.word	0x20007140
 80038b8:	20000000 	.word	0x20000000

080038bc <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80038bc:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 80038be:	b570      	push	{r4, r5, r6, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80038c0:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 80038c2:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80038c4:	ad03      	add	r5, sp, #12
 80038c6:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80038c8:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	002a      	movs	r2, r5
 80038ce:	ab06      	add	r3, sp, #24
 80038d0:	a905      	add	r1, sp, #20
 80038d2:	2001      	movs	r0, #1
 80038d4:	f009 fe5c 	bl	800d590 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80038d8:	aa04      	add	r2, sp, #16
 80038da:	ab08      	add	r3, sp, #32
 80038dc:	a907      	add	r1, sp, #28
 80038de:	9400      	str	r4, [sp, #0]
 80038e0:	2002      	movs	r0, #2
 80038e2:	f009 fe55 	bl	800d590 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038e6:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ea:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80038ec:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80038ee:	a909      	add	r1, sp, #36	; 0x24
 80038f0:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80038f2:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	960b      	str	r6, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80038f6:	f00d ffa3 	bl	8011840 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80038fa:	2302      	movs	r3, #2
 80038fc:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80038fe:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003900:	a909      	add	r1, sp, #36	; 0x24
 8003902:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003904:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003906:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003908:	f00d ff9a 	bl	8011840 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800390c:	8829      	ldrh	r1, [r5, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	9805      	ldr	r0, [sp, #20]
 8003912:	f00e f935 	bl	8011b80 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 8003916:	2005      	movs	r0, #5
 8003918:	f00a f9ca 	bl	800dcb0 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 800391c:	8821      	ldrh	r1, [r4, #0]
 800391e:	9808      	ldr	r0, [sp, #32]
 8003920:	f00e f928 	bl	8011b74 <HAL_GPIO_ReadPin>
 8003924:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8003926:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10f      	bne.n	800394c <IsLowerCLIbaud+0x90>
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800392c:	8829      	ldrh	r1, [r5, #0]
 800392e:	2201      	movs	r2, #1
 8003930:	9805      	ldr	r0, [sp, #20]
 8003932:	f00e f925 	bl	8011b80 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003936:	2005      	movs	r0, #5
 8003938:	f00a f9ba 	bl	800dcb0 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 800393c:	8821      	ldrh	r1, [r4, #0]
 800393e:	9808      	ldr	r0, [sp, #32]
 8003940:	f00e f918 	bl	8011b74 <HAL_GPIO_ReadPin>
 8003944:	3801      	subs	r0, #1
 8003946:	4243      	negs	r3, r0
 8003948:	4158      	adcs	r0, r3
			return 1;
 800394a:	b2c0      	uxtb	r0, r0
}
 800394c:	b00e      	add	sp, #56	; 0x38
 800394e:	bd70      	pop	{r4, r5, r6, pc}

08003950 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8003950:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8003952:	f00a fbb1 	bl	800e0b8 <GetUart>
	
	huart->Init.BaudRate =57600;
 8003956:	23e1      	movs	r3, #225	; 0xe1
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003962:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 8003964:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003966:	015b      	lsls	r3, r3, #5
 8003968:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800396a:	f00f ff3d 	bl	80137e8 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800396e:	2120      	movs	r1, #32
 8003970:	6822      	ldr	r2, [r4, #0]
 8003972:	6813      	ldr	r3, [r2, #0]
 8003974:	430b      	orrs	r3, r1
 8003976:	6013      	str	r3, [r2, #0]
}
 8003978:	bd10      	pop	{r4, pc}
 800397a:	46c0      	nop			; (mov r8, r8)

0800397c <IsModuleParameter>:

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 800397c:	4b04      	ldr	r3, [pc, #16]	; (8003990 <IsModuleParameter+0x14>)
uint8_t IsModuleParameter(char *name){
 800397e:	b510      	push	{r4, lr}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003980:	6899      	ldr	r1, [r3, #8]
 8003982:	f7fc fbbf 	bl	8000104 <strcmp>
 8003986:	4243      	negs	r3, r0
 8003988:	4158      	adcs	r0, r3
			return i + 1;
	}
	return 0;
}
 800398a:	b2c0      	uxtb	r0, r0
 800398c:	bd10      	pop	{r4, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	20000094 	.word	0x20000094

08003994 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	46de      	mov	lr, fp
 8003998:	4657      	mov	r7, sl
 800399a:	464e      	mov	r6, r9
 800399c:	4645      	mov	r5, r8
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 800399e:	4923      	ldr	r1, [pc, #140]	; (8003a2c <IsMathOperator+0x98>)
uint8_t IsMathOperator(char *string){
 80039a0:	b5e0      	push	{r5, r6, r7, lr}
 80039a2:	0004      	movs	r4, r0
		if(!strcmp(string,"="))
 80039a4:	f7fc fbae 	bl	8000104 <strcmp>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 80039a8:	4b21      	ldr	r3, [pc, #132]	; (8003a30 <IsMathOperator+0x9c>)
		if(!strcmp(string,"="))
 80039aa:	0006      	movs	r6, r0
		else if(!strcmp(string,"<"))
 80039ac:	4698      	mov	r8, r3
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 80039ae:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <IsMathOperator+0xa0>)
		if(!strcmp(string,"="))
 80039b0:	2506      	movs	r5, #6
		else if(!strcmp(string,">="))
 80039b2:	4699      	mov	r9, r3
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 80039b4:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <IsMathOperator+0xa4>)
		else if(!strcmp(string,">"))
 80039b6:	4f21      	ldr	r7, [pc, #132]	; (8003a3c <IsMathOperator+0xa8>)
		else if(!strcmp(string,"<="))
 80039b8:	469a      	mov	sl, r3
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 80039ba:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <IsMathOperator+0xac>)
 80039bc:	469b      	mov	fp, r3
		if(!strcmp(string,"="))
 80039be:	2e00      	cmp	r6, #0
 80039c0:	d028      	beq.n	8003a14 <IsMathOperator+0x80>
		else if(!strcmp(string,">"))
 80039c2:	0039      	movs	r1, r7
 80039c4:	0020      	movs	r0, r4
 80039c6:	f7fc fb9d 	bl	8000104 <strcmp>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d024      	beq.n	8003a18 <IsMathOperator+0x84>
		else if(!strcmp(string,"<"))
 80039ce:	4641      	mov	r1, r8
 80039d0:	0020      	movs	r0, r4
 80039d2:	f7fc fb97 	bl	8000104 <strcmp>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	d020      	beq.n	8003a1c <IsMathOperator+0x88>
		else if(!strcmp(string,">="))
 80039da:	4649      	mov	r1, r9
 80039dc:	0020      	movs	r0, r4
 80039de:	f7fc fb91 	bl	8000104 <strcmp>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d01c      	beq.n	8003a20 <IsMathOperator+0x8c>
		else if(!strcmp(string,"<="))
 80039e6:	4651      	mov	r1, sl
 80039e8:	0020      	movs	r0, r4
 80039ea:	f7fc fb8b 	bl	8000104 <strcmp>
 80039ee:	2800      	cmp	r0, #0
 80039f0:	d018      	beq.n	8003a24 <IsMathOperator+0x90>
		else if(!strcmp(string,"!="))
 80039f2:	4659      	mov	r1, fp
 80039f4:	0020      	movs	r0, r4
 80039f6:	f7fc fb85 	bl	8000104 <strcmp>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d014      	beq.n	8003a28 <IsMathOperator+0x94>
 80039fe:	3d01      	subs	r5, #1
 8003a00:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003a02:	2d00      	cmp	r5, #0
 8003a04:	d1db      	bne.n	80039be <IsMathOperator+0x2a>
			return MATH_NOT_EQUAL;
	}
	return 0;
 8003a06:	2000      	movs	r0, #0
}
 8003a08:	bc3c      	pop	{r2, r3, r4, r5}
 8003a0a:	4690      	mov	r8, r2
 8003a0c:	4699      	mov	r9, r3
 8003a0e:	46a2      	mov	sl, r4
 8003a10:	46ab      	mov	fp, r5
 8003a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 8003a14:	2001      	movs	r0, #1
 8003a16:	e7f7      	b.n	8003a08 <IsMathOperator+0x74>
			return MATH_GREATER;
 8003a18:	2002      	movs	r0, #2
 8003a1a:	e7f5      	b.n	8003a08 <IsMathOperator+0x74>
			return MATH_SMALLER;
 8003a1c:	2003      	movs	r0, #3
 8003a1e:	e7f3      	b.n	8003a08 <IsMathOperator+0x74>
			return MATH_GREATER_EQUAL;
 8003a20:	2004      	movs	r0, #4
 8003a22:	e7f1      	b.n	8003a08 <IsMathOperator+0x74>
			return MATH_SMALLER_EQUAL;
 8003a24:	2005      	movs	r0, #5
 8003a26:	e7ef      	b.n	8003a08 <IsMathOperator+0x74>
			return MATH_NOT_EQUAL;
 8003a28:	2006      	movs	r0, #6
 8003a2a:	e7ed      	b.n	8003a08 <IsMathOperator+0x74>
 8003a2c:	080190e4 	.word	0x080190e4
 8003a30:	080190ec 	.word	0x080190ec
 8003a34:	080190f0 	.word	0x080190f0
 8003a38:	080190f4 	.word	0x080190f4
 8003a3c:	080190e8 	.word	0x080190e8
 8003a40:	080190f8 	.word	0x080190f8

08003a44 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a46:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003a48:	4e12      	ldr	r6, [pc, #72]	; (8003a94 <ExploreNeighbors+0x50>)
 8003a4a:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <ExploreNeighbors+0x54>)
			messageParams[1] =(uint8_t )myPN;
 8003a4c:	0035      	movs	r5, r6
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003a4e:	0007      	movs	r7, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a50:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003a52:	4698      	mov	r8, r3
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003a54:	b500      	push	{lr}
			messageParams[1] =(uint8_t )myPN;
 8003a56:	3524      	adds	r5, #36	; 0x24
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003a58:	b082      	sub	sp, #8
		if(port != ignore){
 8003a5a:	42a7      	cmp	r7, r4
 8003a5c:	d011      	beq.n	8003a82 <ExploreNeighbors+0x3e>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003a5e:	4643      	mov	r3, r8
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	2224      	movs	r2, #36	; 0x24
 8003a64:	0a19      	lsrs	r1, r3, #8
			messageParams[1] =(uint8_t )myPN;
 8003a66:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003a68:	2303      	movs	r3, #3
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003a6a:	54b1      	strb	r1, [r6, r2]
			messageParams[2] =port;
 8003a6c:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	2100      	movs	r1, #0
 8003a74:	3307      	adds	r3, #7
 8003a76:	0020      	movs	r0, r4
 8003a78:	f005 fc80 	bl	800937c <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003a7c:	200a      	movs	r0, #10
 8003a7e:	f00a fbdf 	bl	800e240 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a82:	3401      	adds	r4, #1
 8003a84:	b2e4      	uxtb	r4, r4
 8003a86:	2c06      	cmp	r4, #6
 8003a88:	d1e7      	bne.n	8003a5a <ExploreNeighbors+0x16>
		}
	}
	
	return result;
}
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	b002      	add	sp, #8
 8003a8e:	bc04      	pop	{r2}
 8003a90:	4690      	mov	r8, r2
 8003a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a94:	20000b18 	.word	0x20000b18
 8003a98:	20000000 	.word	0x20000000

08003a9c <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a9e:	4657      	mov	r7, sl
 8003aa0:	464e      	mov	r6, r9
 8003aa2:	4645      	mov	r5, r8
 8003aa4:	46de      	mov	lr, fp
 8003aa6:	b5e0      	push	{r5, r6, r7, lr}
 8003aa8:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003aaa:	466a      	mov	r2, sp
 8003aac:	4b4b      	ldr	r3, [pc, #300]	; (8003bdc <FindBroadcastRoutes+0x140>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003aae:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003ab0:	781d      	ldrb	r5, [r3, #0]
 8003ab2:	1deb      	adds	r3, r5, #7
 8003ab4:	08db      	lsrs	r3, r3, #3
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	469d      	mov	sp, r3
 8003abc:	466e      	mov	r6, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003abe:	2d00      	cmp	r5, #0
 8003ac0:	d00c      	beq.n	8003adc <FindBroadcastRoutes+0x40>
		modules[m] =0;
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	1e6c      	subs	r4, r5, #1
 8003ac6:	4a46      	ldr	r2, [pc, #280]	; (8003be0 <FindBroadcastRoutes+0x144>)
 8003ac8:	b2e4      	uxtb	r4, r4
 8003aca:	3401      	adds	r4, #1
 8003acc:	3254      	adds	r2, #84	; 0x54
 8003ace:	446c      	add	r4, sp
 8003ad0:	7019      	strb	r1, [r3, #0]
 8003ad2:	3301      	adds	r3, #1
		bcastRoutes[m] =0;
 8003ad4:	8011      	strh	r1, [r2, #0]
 8003ad6:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 8003ad8:	42a3      	cmp	r3, r4
 8003ada:	d1f9      	bne.n	8003ad0 <FindBroadcastRoutes+0x34>
	}
	modules[src - 1] =++level;					// Tag the source
 8003adc:	2301      	movs	r3, #1
 8003ade:	2216      	movs	r2, #22
 8003ae0:	3801      	subs	r0, #1
 8003ae2:	5433      	strb	r3, [r6, r0]
 8003ae4:	4b3f      	ldr	r3, [pc, #252]	; (8003be4 <FindBroadcastRoutes+0x148>)
 8003ae6:	4342      	muls	r2, r0
 8003ae8:	469c      	mov	ip, r3

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <FindBroadcastRoutes+0x144>)
 8003aec:	0040      	lsls	r0, r0, #1
 8003aee:	1818      	adds	r0, r3, r0
 8003af0:	2301      	movs	r3, #1
 8003af2:	3202      	adds	r2, #2
 8003af4:	4462      	add	r2, ip
 8003af6:	469c      	mov	ip, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003af8:	3301      	adds	r3, #1
	modules[src - 1] =++level;					// Tag the source
 8003afa:	2100      	movs	r1, #0
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003afc:	2454      	movs	r4, #84	; 0x54
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003afe:	469a      	mov	sl, r3
 8003b00:	46b3      	mov	fp, r6
 8003b02:	607d      	str	r5, [r7, #4]
		if(array[src - 1][p]){
 8003b04:	8813      	ldrh	r3, [r2, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00d      	beq.n	8003b26 <FindBroadcastRoutes+0x8a>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003b0a:	5b05      	ldrh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003b0c:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003b0e:	46a8      	mov	r8, r5
 8003b10:	4665      	mov	r5, ip
 8003b12:	408d      	lsls	r5, r1
 8003b14:	46a9      	mov	r9, r5
 8003b16:	4645      	mov	r5, r8
 8003b18:	464e      	mov	r6, r9
 8003b1a:	4335      	orrs	r5, r6
 8003b1c:	5305      	strh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003b1e:	4655      	mov	r5, sl
 8003b20:	445b      	add	r3, fp
 8003b22:	3b01      	subs	r3, #1
 8003b24:	701d      	strb	r5, [r3, #0]
 8003b26:	3101      	adds	r1, #1
 8003b28:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 8003b2a:	2906      	cmp	r1, #6
 8003b2c:	d1ea      	bne.n	8003b04 <FindBroadcastRoutes+0x68>
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003b2e:	2254      	movs	r2, #84	; 0x54
	++level;												// Move one level
 8003b30:	2302      	movs	r3, #2
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003b32:	4692      	mov	sl, r2
 8003b34:	465e      	mov	r6, fp
	++level;												// Move one level
 8003b36:	469b      	mov	fp, r3
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003b38:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <FindBroadcastRoutes+0x144>)
 8003b3a:	687d      	ldr	r5, [r7, #4]
 8003b3c:	449a      	add	sl, r3
 8003b3e:	4653      	mov	r3, sl
 8003b40:	46a8      	mov	r8, r5
 8003b42:	465d      	mov	r5, fp
 8003b44:	603b      	str	r3, [r7, #0]
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003b46:	4643      	mov	r3, r8
		++level;											// Move one level
 8003b48:	3501      	adds	r5, #1
 8003b4a:	b2ed      	uxtb	r5, r5
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d03b      	beq.n	8003bc8 <FindBroadcastRoutes+0x12c>
 8003b50:	1e6b      	subs	r3, r5, #1
 8003b52:	4699      	mov	r9, r3
		untaged =0;								// Reset the untaged counter
 8003b54:	2300      	movs	r3, #0
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003b56:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003b58:	469c      	mov	ip, r3
 8003b5a:	46ab      	mov	fp, r5
 8003b5c:	e003      	b.n	8003b66 <FindBroadcastRoutes+0xca>
 8003b5e:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003b60:	b2d3      	uxtb	r3, r2
 8003b62:	4598      	cmp	r8, r3
 8003b64:	d92c      	bls.n	8003bc0 <FindBroadcastRoutes+0x124>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003b66:	5cb3      	ldrb	r3, [r6, r2]
 8003b68:	454b      	cmp	r3, r9
 8003b6a:	d1f8      	bne.n	8003b5e <FindBroadcastRoutes+0xc2>
 8003b6c:	2116      	movs	r1, #22
 8003b6e:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <FindBroadcastRoutes+0x14c>)
 8003b70:	4351      	muls	r1, r2
 8003b72:	469a      	mov	sl, r3
 8003b74:	2000      	movs	r0, #0
 8003b76:	4451      	add	r1, sl
 8003b78:	46e2      	mov	sl, ip
 8003b7a:	4694      	mov	ip, r2
 8003b7c:	0055      	lsls	r5, r2, #1
 8003b7e:	607d      	str	r5, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003b80:	880b      	ldrh	r3, [r1, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d012      	beq.n	8003bac <FindBroadcastRoutes+0x110>
 8003b86:	08db      	lsrs	r3, r3, #3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	5cf2      	ldrb	r2, [r6, r3]
 8003b8c:	2a00      	cmp	r2, #0
 8003b8e:	d10d      	bne.n	8003bac <FindBroadcastRoutes+0x110>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003b90:	683c      	ldr	r4, [r7, #0]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	5b15      	ldrh	r5, [r2, r4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	4082      	lsls	r2, r0
 8003b9a:	4315      	orrs	r5, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	5315      	strh	r5, [r2, r4]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
						++untaged;
 8003ba0:	4654      	mov	r4, sl
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003ba2:	465a      	mov	r2, fp
						++untaged;
 8003ba4:	3401      	adds	r4, #1
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003ba6:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003ba8:	b2e3      	uxtb	r3, r4
 8003baa:	469a      	mov	sl, r3
 8003bac:	3001      	adds	r0, #1
 8003bae:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003bb0:	2806      	cmp	r0, #6
 8003bb2:	d1e5      	bne.n	8003b80 <FindBroadcastRoutes+0xe4>
 8003bb4:	4662      	mov	r2, ip
 8003bb6:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003bb8:	b2d3      	uxtb	r3, r2
 8003bba:	46d4      	mov	ip, sl
 8003bbc:	4598      	cmp	r8, r3
 8003bbe:	d8d2      	bhi.n	8003b66 <FindBroadcastRoutes+0xca>
					}
				}
			}
		}
	} while(untaged);
 8003bc0:	4663      	mov	r3, ip
 8003bc2:	465d      	mov	r5, fp
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1be      	bne.n	8003b46 <FindBroadcastRoutes+0xaa>
	
	return result;
}
 8003bc8:	2000      	movs	r0, #0
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b003      	add	sp, #12
 8003bce:	bc3c      	pop	{r2, r3, r4, r5}
 8003bd0:	4690      	mov	r8, r2
 8003bd2:	4699      	mov	r9, r3
 8003bd4:	46a2      	mov	sl, r4
 8003bd6:	46ab      	mov	fp, r5
 8003bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	20000b18 	.word	0x20000b18
 8003be4:	20000ed4 	.word	0x20000ed4
 8003be8:	20000ed6 	.word	0x20000ed6

08003bec <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bee:	46de      	mov	lr, fp
 8003bf0:	464e      	mov	r6, r9
 8003bf2:	4645      	mov	r5, r8
 8003bf4:	4657      	mov	r7, sl
 8003bf6:	b5e0      	push	{r5, r6, r7, lr}
 8003bf8:	b091      	sub	sp, #68	; 0x44
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003bfa:	ac03      	add	r4, sp, #12
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003bfc:	0005      	movs	r5, r0
 8003bfe:	000e      	movs	r6, r1
 8003c00:	9101      	str	r1, [sp, #4]
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003c02:	2232      	movs	r2, #50	; 0x32
 8003c04:	2100      	movs	r1, #0
 8003c06:	0020      	movs	r0, r4
 8003c08:	f010 fa12 	bl	8014030 <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 8003c0c:	221a      	movs	r2, #26
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4862      	ldr	r0, [pc, #392]	; (8003d9c <FindRoute+0x1b0>)
 8003c12:	f010 fa0d 	bl	8014030 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003c16:	2100      	movs	r1, #0
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003c18:	2024      	movs	r0, #36	; 0x24
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003c1a:	4b61      	ldr	r3, [pc, #388]	; (8003da0 <FindRoute+0x1b4>)
 8003c1c:	1e6a      	subs	r2, r5, #1
 8003c1e:	469c      	mov	ip, r3
 8003c20:	189b      	adds	r3, r3, r2
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003c22:	5419      	strb	r1, [r3, r0]
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003c24:	7219      	strb	r1, [r3, #8]
 8003c26:	2316      	movs	r3, #22
 8003c28:	4353      	muls	r3, r2
 8003c2a:	4a5e      	ldr	r2, [pc, #376]	; (8003da4 <FindRoute+0x1b8>)
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	4693      	mov	fp, r2
 8003c30:	445b      	add	r3, fp
 8003c32:	4699      	mov	r9, r3
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003c34:	001a      	movs	r2, r3
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 8003c36:	3823      	subs	r0, #35	; 0x23
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003c38:	b2b1      	uxth	r1, r6
 8003c3a:	8813      	ldrh	r3, [r2, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <FindRoute+0x5c>
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	428b      	cmp	r3, r1
 8003c44:	d100      	bne.n	8003c48 <FindRoute+0x5c>
 8003c46:	e099      	b.n	8003d7c <FindRoute+0x190>
	for(int col =1; col <= 6; col++){
 8003c48:	3001      	adds	r0, #1
 8003c4a:	3202      	adds	r2, #2
 8003c4c:	2807      	cmp	r0, #7
 8003c4e:	d1f4      	bne.n	8003c3a <FindRoute+0x4e>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 8003c50:	4b55      	ldr	r3, [pc, #340]	; (8003da8 <FindRoute+0x1bc>)
 8003c52:	7819      	ldrb	r1, [r3, #0]
 8003c54:	2301      	movs	r3, #1
 8003c56:	2900      	cmp	r1, #0
 8003c58:	d100      	bne.n	8003c5c <FindRoute+0x70>
 8003c5a:	e09a      	b.n	8003d92 <FindRoute+0x1a6>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	4462      	add	r2, ip
 8003c60:	4690      	mov	r8, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003c62:	2200      	movs	r2, #0
 8003c64:	4666      	mov	r6, ip
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003c66:	27ff      	movs	r7, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003c68:	4692      	mov	sl, r2
 8003c6a:	3624      	adds	r6, #36	; 0x24
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003c6c:	429d      	cmp	r5, r3
 8003c6e:	d005      	beq.n	8003c7c <FindRoute+0x90>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003c70:	4640      	mov	r0, r8
 8003c72:	1e5a      	subs	r2, r3, #1
 8003c74:	5487      	strb	r7, [r0, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003c76:	4650      	mov	r0, sl
 8003c78:	18b2      	adds	r2, r6, r2
 8003c7a:	7010      	strb	r0, [r2, #0]
	for(int i =1; i <= N; i++){
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	428b      	cmp	r3, r1
 8003c80:	ddf4      	ble.n	8003c6c <FindRoute+0x80>
 8003c82:	2308      	movs	r3, #8
 8003c84:	4463      	add	r3, ip
	uint8_t u =0;
 8003c86:	2500      	movs	r5, #0
 8003c88:	4698      	mov	r8, r3
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
 8003c8a:	2201      	movs	r2, #1
	
	for(int i =0; i < N; i++){
 8003c8c:	2300      	movs	r3, #0
		temp &=Q[i];
 8003c8e:	5ce0      	ldrb	r0, [r4, r3]
	for(int i =0; i < N; i++){
 8003c90:	3301      	adds	r3, #1
		temp &=Q[i];
 8003c92:	4002      	ands	r2, r0
	for(int i =0; i < N; i++){
 8003c94:	428b      	cmp	r3, r1
 8003c96:	dbfa      	blt.n	8003c8e <FindRoute+0xa2>
	while(!QnotEmpty(Q)){
 8003c98:	2a00      	cmp	r2, #0
 8003c9a:	d000      	beq.n	8003c9e <FindRoute+0xb2>
 8003c9c:	e07c      	b.n	8003d98 <FindRoute+0x1ac>
 8003c9e:	4663      	mov	r3, ip
 8003ca0:	7a1a      	ldrb	r2, [r3, #8]
	if(!Q[0])						// Not visited yet
 8003ca2:	7823      	ldrb	r3, [r4, #0]
		smallest =arr[0];
 8003ca4:	0010      	movs	r0, r2
	if(!Q[0])						// Not visited yet
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d000      	beq.n	8003cac <FindRoute+0xc0>
	uint8_t smallest =0xFF;
 8003caa:	20ff      	movs	r0, #255	; 0xff
 8003cac:	2500      	movs	r5, #0
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e001      	b.n	8003cb6 <FindRoute+0xca>
 8003cb2:	4642      	mov	r2, r8
 8003cb4:	5c9a      	ldrb	r2, [r3, r2]
		if((arr[i] < smallest) && !Q[i]){
 8003cb6:	4290      	cmp	r0, r2
 8003cb8:	d904      	bls.n	8003cc4 <FindRoute+0xd8>
 8003cba:	5ce6      	ldrb	r6, [r4, r3]
 8003cbc:	2e00      	cmp	r6, #0
 8003cbe:	d101      	bne.n	8003cc4 <FindRoute+0xd8>
			index =i;
 8003cc0:	0010      	movs	r0, r2
 8003cc2:	b2dd      	uxtb	r5, r3
	for(int i =0; i < N; i++){
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	428b      	cmp	r3, r1
 8003cc8:	dbf3      	blt.n	8003cb2 <FindRoute+0xc6>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003cca:	3501      	adds	r5, #1
		if(u == desID){
 8003ccc:	9b01      	ldr	r3, [sp, #4]
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003cce:	b2ed      	uxtb	r5, r5
		if(u == desID){
 8003cd0:	429d      	cmp	r5, r3
 8003cd2:	d023      	beq.n	8003d1c <FindRoute+0x130>
			Q[u - 1] =1;									// Remove u from Q
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	1e6f      	subs	r7, r5, #1
 8003cd8:	55e3      	strb	r3, [r4, r7]
 8003cda:	2316      	movs	r3, #22
 8003cdc:	465e      	mov	r6, fp
 8003cde:	437b      	muls	r3, r7
 8003ce0:	360e      	adds	r6, #14
 8003ce2:	1c9a      	adds	r2, r3, #2
 8003ce4:	445a      	add	r2, fp
 8003ce6:	18f6      	adds	r6, r6, r3
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003ce8:	4467      	add	r7, ip
 8003cea:	9100      	str	r1, [sp, #0]
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003cec:	8813      	ldrh	r3, [r2, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00f      	beq.n	8003d12 <FindRoute+0x126>
				v =(array[u - 1][n] >> 3);
 8003cf2:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	5ce0      	ldrb	r0, [r4, r3]
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	d109      	bne.n	8003d12 <FindRoute+0x126>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003cfe:	7a38      	ldrb	r0, [r7, #8]
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003d00:	4463      	add	r3, ip
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003d02:	3001      	adds	r0, #1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003d04:	7a19      	ldrb	r1, [r3, #8]
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003d06:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003d08:	4281      	cmp	r1, r0
 8003d0a:	d902      	bls.n	8003d12 <FindRoute+0x126>
						routePrev[v - 1] =u;
 8003d0c:	2124      	movs	r1, #36	; 0x24
						routeDist[v - 1] =alt;
 8003d0e:	7218      	strb	r0, [r3, #8]
						routePrev[v - 1] =u;
 8003d10:	545d      	strb	r5, [r3, r1]
 8003d12:	3202      	adds	r2, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003d14:	42b2      	cmp	r2, r6
 8003d16:	d1e9      	bne.n	8003cec <FindRoute+0x100>
 8003d18:	9900      	ldr	r1, [sp, #0]
 8003d1a:	e7b6      	b.n	8003c8a <FindRoute+0x9e>
 8003d1c:	3b01      	subs	r3, #1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003d1e:	2224      	movs	r2, #36	; 0x24
 8003d20:	4463      	add	r3, ip
 8003d22:	5c9a      	ldrb	r2, [r3, r2]
 8003d24:	2300      	movs	r3, #0
 8003d26:	2a00      	cmp	r2, #0
 8003d28:	d101      	bne.n	8003d2e <FindRoute+0x142>
 8003d2a:	e00b      	b.n	8003d44 <FindRoute+0x158>
 8003d2c:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003d2e:	491b      	ldr	r1, [pc, #108]	; (8003d9c <FindRoute+0x1b0>)
 8003d30:	1c58      	adds	r0, r3, #1
 8003d32:	54cd      	strb	r5, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003d34:	4663      	mov	r3, ip
 8003d36:	189b      	adds	r3, r3, r2
 8003d38:	3323      	adds	r3, #35	; 0x23
 8003d3a:	7819      	ldrb	r1, [r3, #0]
 8003d3c:	0015      	movs	r5, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003d3e:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003d40:	2900      	cmp	r1, #0
 8003d42:	d1f3      	bne.n	8003d2c <FindRoute+0x140>
	for(int col =1; col <= 6; col++){
 8003d44:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003d46:	464c      	mov	r4, r9
 8003d48:	9b01      	ldr	r3, [sp, #4]
 8003d4a:	4463      	add	r3, ip
 8003d4c:	8822      	ldrh	r2, [r4, #0]
 8003d4e:	2a00      	cmp	r2, #0
 8003d50:	d008      	beq.n	8003d64 <FindRoute+0x178>
 8003d52:	4d12      	ldr	r5, [pc, #72]	; (8003d9c <FindRoute+0x1b0>)
 8003d54:	79d9      	ldrb	r1, [r3, #7]
 8003d56:	46ac      	mov	ip, r5
 8003d58:	4461      	add	r1, ip
 8003d5a:	3901      	subs	r1, #1
 8003d5c:	7809      	ldrb	r1, [r1, #0]
 8003d5e:	08d2      	lsrs	r2, r2, #3
 8003d60:	4291      	cmp	r1, r2
 8003d62:	d014      	beq.n	8003d8e <FindRoute+0x1a2>
	for(int col =1; col <= 6; col++){
 8003d64:	3001      	adds	r0, #1
 8003d66:	3402      	adds	r4, #2
 8003d68:	2807      	cmp	r0, #7
 8003d6a:	d1ef      	bne.n	8003d4c <FindRoute+0x160>
	return 0;
 8003d6c:	2000      	movs	r0, #0
}
 8003d6e:	b011      	add	sp, #68	; 0x44
 8003d70:	bc3c      	pop	{r2, r3, r4, r5}
 8003d72:	4690      	mov	r8, r2
 8003d74:	4699      	mov	r9, r3
 8003d76:	46a2      	mov	sl, r4
 8003d78:	46ab      	mov	fp, r5
 8003d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			routeDist[desID - 1] =1;
 8003d7c:	9901      	ldr	r1, [sp, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	000b      	movs	r3, r1
 8003d82:	4463      	add	r3, ip
 8003d84:	71da      	strb	r2, [r3, #7]
			route[0] =desID;
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <FindRoute+0x1b0>)
			return col;
 8003d88:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8003d8a:	7019      	strb	r1, [r3, #0]
			return col;
 8003d8c:	e7ef      	b.n	8003d6e <FindRoute+0x182>
			return col;
 8003d8e:	b2c0      	uxtb	r0, r0
 8003d90:	e7ed      	b.n	8003d6e <FindRoute+0x182>
	for(int i =1; i <= N; i++){
 8003d92:	425b      	negs	r3, r3
 8003d94:	2500      	movs	r5, #0
 8003d96:	e7c2      	b.n	8003d1e <FindRoute+0x132>
 8003d98:	1e6b      	subs	r3, r5, #1
 8003d9a:	e7c0      	b.n	8003d1e <FindRoute+0x132>
 8003d9c:	20006dd0 	.word	0x20006dd0
 8003da0:	20000b98 	.word	0x20000b98
 8003da4:	20000ed4 	.word	0x20000ed4
 8003da8:	20000000 	.word	0x20000000

08003dac <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dae:	4657      	mov	r7, sl
 8003db0:	464e      	mov	r6, r9
 8003db2:	46de      	mov	lr, fp
 8003db4:	4645      	mov	r5, r8
 8003db6:	4699      	mov	r9, r3
 8003db8:	b5e0      	push	{r5, r6, r7, lr}
	myOutport =FindRoute(myID,dst);
 8003dba:	4c3d      	ldr	r4, [pc, #244]	; (8003eb0 <remoteBootloaderUpdate+0x104>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	4682      	mov	sl, r0
	myOutport =FindRoute(myID,dst);
 8003dc0:	7820      	ldrb	r0, [r4, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003dc2:	4688      	mov	r8, r1
 8003dc4:	0017      	movs	r7, r2
	myOutport =FindRoute(myID,dst);
 8003dc6:	f7ff ff11 	bl	8003bec <FindRoute>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003dca:	464b      	mov	r3, r9
	myOutport =FindRoute(myID,dst);
 8003dcc:	0006      	movs	r6, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d126      	bne.n	8003e20 <remoteBootloaderUpdate+0x74>
		if(NumberOfHops(dst)== 1)
 8003dd2:	4b38      	ldr	r3, [pc, #224]	; (8003eb4 <remoteBootloaderUpdate+0x108>)
 8003dd4:	7821      	ldrb	r1, [r4, #0]
 8003dd6:	4443      	add	r3, r8
 8003dd8:	79da      	ldrb	r2, [r3, #7]
 8003dda:	2a01      	cmp	r2, #1
 8003ddc:	d04e      	beq.n	8003e7c <remoteBootloaderUpdate+0xd0>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003dde:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <remoteBootloaderUpdate+0x10c>)
 8003de0:	189b      	adds	r3, r3, r2
 8003de2:	3b01      	subs	r3, #1
 8003de4:	781d      	ldrb	r5, [r3, #0]
	if(src == myID){
 8003de6:	458a      	cmp	sl, r1
 8003de8:	d120      	bne.n	8003e2c <remoteBootloaderUpdate+0x80>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003dea:	f00a fb35 	bl	800e458 <FreeRTOS_CLIGetOutputBuffer>
 8003dee:	4683      	mov	fp, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8003df0:	4b32      	ldr	r3, [pc, #200]	; (8003ebc <remoteBootloaderUpdate+0x110>)
 8003df2:	4642      	mov	r2, r8
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	4658      	mov	r0, fp
 8003df8:	f010 fb14 	bl	8014424 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003dfc:	4b30      	ldr	r3, [pc, #192]	; (8003ec0 <remoteBootloaderUpdate+0x114>)
 8003dfe:	4658      	mov	r0, fp
 8003e00:	6819      	ldr	r1, [r3, #0]
 8003e02:	f010 fb2f 	bl	8014464 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8003e06:	4658      	mov	r0, fp
 8003e08:	f7fc f986 	bl	8000118 <strlen>
 8003e0c:	2332      	movs	r3, #50	; 0x32
 8003e0e:	b282      	uxth	r2, r0
 8003e10:	4659      	mov	r1, fp
 8003e12:	0038      	movs	r0, r7
 8003e14:	f00a f8fa 	bl	800e00c <writePxITMutex>
		Delay_ms(100);
 8003e18:	2064      	movs	r0, #100	; 0x64
 8003e1a:	f00c f9a1 	bl	8010160 <HAL_Delay>
 8003e1e:	e005      	b.n	8003e2c <remoteBootloaderUpdate+0x80>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003e20:	7825      	ldrb	r5, [r4, #0]
 8003e22:	4545      	cmp	r5, r8
 8003e24:	d026      	beq.n	8003e74 <remoteBootloaderUpdate+0xc8>
	if(src == myID){
 8003e26:	4555      	cmp	r5, sl
 8003e28:	d02c      	beq.n	8003e84 <remoteBootloaderUpdate+0xd8>
	uint8_t myOutport =0, lastModule =0;
 8003e2a:	2500      	movs	r5, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003e2c:	0038      	movs	r0, r7
 8003e2e:	f7ff fd8f 	bl	8003950 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003e32:	0030      	movs	r0, r6
 8003e34:	f7ff fd8c 	bl	8003950 <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 8003e38:	7821      	ldrb	r1, [r4, #0]
 8003e3a:	42a9      	cmp	r1, r5
 8003e3c:	d012      	beq.n	8003e64 <remoteBootloaderUpdate+0xb8>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	9303      	str	r3, [sp, #12]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	9302      	str	r3, [sp, #8]
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	3303      	adds	r3, #3
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	0032      	movs	r2, r6
 8003e4e:	000b      	movs	r3, r1
 8003e50:	0038      	movs	r0, r7
 8003e52:	f005 fd17 	bl	8009884 <StartScastDMAStream>
}
 8003e56:	b005      	add	sp, #20
 8003e58:	bc3c      	pop	{r2, r3, r4, r5}
 8003e5a:	4690      	mov	r8, r2
 8003e5c:	4699      	mov	r9, r3
 8003e5e:	46a2      	mov	sl, r4
 8003e60:	46ab      	mov	fp, r5
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SwapUartPins(GetUart(myOutport),REVERSED);
 8003e64:	0030      	movs	r0, r6
 8003e66:	f00a f927 	bl	800e0b8 <GetUart>
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	f00a f930 	bl	800e0d0 <SwapUartPins>
 8003e70:	7821      	ldrb	r1, [r4, #0]
 8003e72:	e7e4      	b.n	8003e3e <remoteBootloaderUpdate+0x92>
	if(src == myID){
 8003e74:	4555      	cmp	r5, sl
 8003e76:	d016      	beq.n	8003ea6 <remoteBootloaderUpdate+0xfa>
 8003e78:	464e      	mov	r6, r9
 8003e7a:	e7d7      	b.n	8003e2c <remoteBootloaderUpdate+0x80>
 8003e7c:	458a      	cmp	sl, r1
 8003e7e:	d00d      	beq.n	8003e9c <remoteBootloaderUpdate+0xf0>
 8003e80:	000d      	movs	r5, r1
 8003e82:	e7d3      	b.n	8003e2c <remoteBootloaderUpdate+0x80>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003e84:	f00a fae8 	bl	800e458 <FreeRTOS_CLIGetOutputBuffer>
	uint8_t myOutport =0, lastModule =0;
 8003e88:	2500      	movs	r5, #0
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003e8a:	4683      	mov	fp, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <remoteBootloaderUpdate+0x118>)
 8003e8e:	4642      	mov	r2, r8
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	4658      	mov	r0, fp
 8003e94:	464b      	mov	r3, r9
 8003e96:	f010 fac5 	bl	8014424 <sprintf>
 8003e9a:	e7af      	b.n	8003dfc <remoteBootloaderUpdate+0x50>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003e9c:	f00a fadc 	bl	800e458 <FreeRTOS_CLIGetOutputBuffer>
 8003ea0:	4655      	mov	r5, sl
 8003ea2:	4683      	mov	fp, r0
 8003ea4:	e7a4      	b.n	8003df0 <remoteBootloaderUpdate+0x44>
 8003ea6:	f00a fad7 	bl	800e458 <FreeRTOS_CLIGetOutputBuffer>
 8003eaa:	464e      	mov	r6, r9
 8003eac:	4683      	mov	fp, r0
 8003eae:	e7ed      	b.n	8003e8c <remoteBootloaderUpdate+0xe0>
 8003eb0:	20000a98 	.word	0x20000a98
 8003eb4:	20000b98 	.word	0x20000b98
 8003eb8:	20006dd0 	.word	0x20006dd0
 8003ebc:	20000088 	.word	0x20000088
 8003ec0:	20000080 	.word	0x20000080
 8003ec4:	20000084 	.word	0x20000084

08003ec8 <DisplayTopology>:

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ec8:	4b5b      	ldr	r3, [pc, #364]	; (8004038 <DisplayTopology+0x170>)
void DisplayTopology(uint8_t port){
 8003eca:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ecc:	001c      	movs	r4, r3
void DisplayTopology(uint8_t port){
 8003ece:	4645      	mov	r5, r8
 8003ed0:	464e      	mov	r6, r9
 8003ed2:	46de      	mov	lr, fp
 8003ed4:	4657      	mov	r7, sl
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ed6:	3440      	adds	r4, #64	; 0x40
 8003ed8:	0022      	movs	r2, r4
void DisplayTopology(uint8_t port){
 8003eda:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003edc:	4698      	mov	r8, r3
 8003ede:	4b57      	ldr	r3, [pc, #348]	; (800403c <DisplayTopology+0x174>)
void DisplayTopology(uint8_t port){
 8003ee0:	0007      	movs	r7, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ee2:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ee4:	c223      	stmia	r2!, {r0, r1, r5}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ee6:	2501      	movs	r5, #1
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ee8:	6819      	ldr	r1, [r3, #0]
void DisplayTopology(uint8_t port){
 8003eea:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003eec:	6011      	str	r1, [r2, #0]
 8003eee:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ef0:	426d      	negs	r5, r5
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ef2:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ef4:	0021      	movs	r1, r4
 8003ef6:	2332      	movs	r3, #50	; 0x32
 8003ef8:	9500      	str	r5, [sp, #0]
 8003efa:	2211      	movs	r2, #17
 8003efc:	0038      	movs	r0, r7
 8003efe:	f00a f853 	bl	800dfa8 <writePxMutex>
 8003f02:	4b4f      	ldr	r3, [pc, #316]	; (8004040 <DisplayTopology+0x178>)
 8003f04:	2601      	movs	r6, #1
 8003f06:	4699      	mov	r9, r3
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003f08:	0032      	movs	r2, r6
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	0020      	movs	r0, r4
 8003f0e:	f010 fa89 	bl	8014424 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f12:	0020      	movs	r0, r4
 8003f14:	f7fc f900 	bl	8000118 <strlen>
 8003f18:	3601      	adds	r6, #1
 8003f1a:	b282      	uxth	r2, r0
 8003f1c:	9500      	str	r5, [sp, #0]
 8003f1e:	2332      	movs	r3, #50	; 0x32
 8003f20:	0021      	movs	r1, r4
 8003f22:	0038      	movs	r0, r7
 8003f24:	f00a f840 	bl	800dfa8 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003f28:	2e06      	cmp	r6, #6
 8003f2a:	d1ed      	bne.n	8003f08 <DisplayTopology+0x40>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003f2c:	2332      	movs	r3, #50	; 0x32
 8003f2e:	9500      	str	r5, [sp, #0]
 8003f30:	2203      	movs	r2, #3
 8003f32:	4944      	ldr	r1, [pc, #272]	; (8004044 <DisplayTopology+0x17c>)
 8003f34:	0038      	movs	r0, r7
 8003f36:	f00a f837 	bl	800dfa8 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003f3a:	4b43      	ldr	r3, [pc, #268]	; (8004048 <DisplayTopology+0x180>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d061      	beq.n	8004006 <DisplayTopology+0x13e>
 8003f42:	4b42      	ldr	r3, [pc, #264]	; (800404c <DisplayTopology+0x184>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003f44:	4645      	mov	r5, r8
 8003f46:	4699      	mov	r9, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f48:	2301      	movs	r3, #1
 8003f4a:	425b      	negs	r3, r3
 8003f4c:	4698      	mov	r8, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003f4e:	4b40      	ldr	r3, [pc, #256]	; (8004050 <DisplayTopology+0x188>)
	for(uint8_t row =0; row < N; row++){
 8003f50:	2400      	movs	r4, #0
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003f52:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003f54:	3540      	adds	r5, #64	; 0x40
 8003f56:	1c63      	adds	r3, r4, #1
 8003f58:	001a      	movs	r2, r3
 8003f5a:	493e      	ldr	r1, [pc, #248]	; (8004054 <DisplayTopology+0x18c>)
 8003f5c:	0028      	movs	r0, r5
 8003f5e:	469a      	mov	sl, r3
 8003f60:	f010 fa60 	bl	8014424 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f64:	0028      	movs	r0, r5
 8003f66:	f7fc f8d7 	bl	8000118 <strlen>
 8003f6a:	4643      	mov	r3, r8
 8003f6c:	b282      	uxth	r2, r0
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	0029      	movs	r1, r5
 8003f72:	2332      	movs	r3, #50	; 0x32
 8003f74:	0038      	movs	r0, r7
 8003f76:	f00a f817 	bl	800dfa8 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003f7a:	2316      	movs	r3, #22
 8003f7c:	435c      	muls	r4, r3
 8003f7e:	464b      	mov	r3, r9
 8003f80:	5b1b      	ldrh	r3, [r3, r4]
 8003f82:	2205      	movs	r2, #5
 8003f84:	0059      	lsls	r1, r3, #1
 8003f86:	18c9      	adds	r1, r1, r3
 8003f88:	4b33      	ldr	r3, [pc, #204]	; (8004058 <DisplayTopology+0x190>)
 8003f8a:	0049      	lsls	r1, r1, #1
 8003f8c:	469c      	mov	ip, r3
 8003f8e:	0028      	movs	r0, r5
 8003f90:	4461      	add	r1, ip
 8003f92:	f010 fa9c 	bl	80144ce <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003f96:	4643      	mov	r3, r8
 8003f98:	2205      	movs	r2, #5
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	0029      	movs	r1, r5
 8003f9e:	2332      	movs	r3, #50	; 0x32
 8003fa0:	0038      	movs	r0, r7
 8003fa2:	f00a f801 	bl	800dfa8 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003fa6:	4643      	mov	r3, r8
 8003fa8:	2201      	movs	r2, #1
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	492b      	ldr	r1, [pc, #172]	; (800405c <DisplayTopology+0x194>)
 8003fae:	2332      	movs	r3, #50	; 0x32
 8003fb0:	0038      	movs	r0, r7
 8003fb2:	f009 fff9 	bl	800dfa8 <writePxMutex>
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	1ca6      	adds	r6, r4, #2
 8003fba:	330c      	adds	r3, #12
 8003fbc:	444e      	add	r6, r9
 8003fbe:	191c      	adds	r4, r3, r4
			if(!array[row][col])
 8003fc0:	8832      	ldrh	r2, [r6, #0]
 8003fc2:	2a00      	cmp	r2, #0
 8003fc4:	d12f      	bne.n	8004026 <DisplayTopology+0x15e>
				sprintf(pcUserMessage,"%d\t",0);
 8003fc6:	4926      	ldr	r1, [pc, #152]	; (8004060 <DisplayTopology+0x198>)
 8003fc8:	0028      	movs	r0, r5
 8003fca:	f010 fa2b 	bl	8014424 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003fce:	0028      	movs	r0, r5
 8003fd0:	f7fc f8a2 	bl	8000118 <strlen>
 8003fd4:	4643      	mov	r3, r8
 8003fd6:	b282      	uxth	r2, r0
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	0029      	movs	r1, r5
 8003fdc:	2332      	movs	r3, #50	; 0x32
 8003fde:	0038      	movs	r0, r7
 8003fe0:	3602      	adds	r6, #2
 8003fe2:	f009 ffe1 	bl	800dfa8 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003fe6:	42a6      	cmp	r6, r4
 8003fe8:	d1ea      	bne.n	8003fc0 <DisplayTopology+0xf8>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003fea:	4643      	mov	r3, r8
 8003fec:	2202      	movs	r2, #2
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	491c      	ldr	r1, [pc, #112]	; (8004064 <DisplayTopology+0x19c>)
 8003ff2:	2332      	movs	r3, #50	; 0x32
 8003ff4:	0038      	movs	r0, r7
 8003ff6:	f009 ffd7 	bl	800dfa8 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003ffa:	4653      	mov	r3, sl
 8003ffc:	b2dc      	uxtb	r4, r3
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <DisplayTopology+0x180>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	42a3      	cmp	r3, r4
 8004004:	d8a7      	bhi.n	8003f56 <DisplayTopology+0x8e>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8004006:	2301      	movs	r3, #1
 8004008:	425b      	negs	r3, r3
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	2201      	movs	r2, #1
 800400e:	3333      	adds	r3, #51	; 0x33
 8004010:	4915      	ldr	r1, [pc, #84]	; (8004068 <DisplayTopology+0x1a0>)
 8004012:	0038      	movs	r0, r7
 8004014:	f009 ffc8 	bl	800dfa8 <writePxMutex>
}
 8004018:	b003      	add	sp, #12
 800401a:	bc3c      	pop	{r2, r3, r4, r5}
 800401c:	4690      	mov	r8, r2
 800401e:	4699      	mov	r9, r3
 8004020:	46a2      	mov	sl, r4
 8004022:	46ab      	mov	fp, r5
 8004024:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8004026:	2307      	movs	r3, #7
 8004028:	4659      	mov	r1, fp
 800402a:	4013      	ands	r3, r2
 800402c:	0028      	movs	r0, r5
 800402e:	08d2      	lsrs	r2, r2, #3
 8004030:	f010 f9f8 	bl	8014424 <sprintf>
 8004034:	e7cb      	b.n	8003fce <DisplayTopology+0x106>
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	20000b98 	.word	0x20000b98
 800403c:	080190fc 	.word	0x080190fc
 8004040:	08019110 	.word	0x08019110
 8004044:	08019d84 	.word	0x08019d84
 8004048:	20000000 	.word	0x20000000
 800404c:	20000ed4 	.word	0x20000ed4
 8004050:	08019128 	.word	0x08019128
 8004054:	08019118 	.word	0x08019118
 8004058:	08018874 	.word	0x08018874
 800405c:	0801910c 	.word	0x0801910c
 8004060:	08019124 	.word	0x08019124
 8004064:	08019234 	.word	0x08019234
 8004068:	0801bbe4 	.word	0x0801bbe4

0800406c <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 800406c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800406e:	4645      	mov	r5, r8
 8004070:	46de      	mov	lr, fp
 8004072:	4657      	mov	r7, sl
 8004074:	464e      	mov	r6, r9
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8004076:	4934      	ldr	r1, [pc, #208]	; (8004148 <DisplayPortsDir+0xdc>)
void DisplayPortsDir(uint8_t port){
 8004078:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 800407a:	3140      	adds	r1, #64	; 0x40
 800407c:	000a      	movs	r2, r1
 800407e:	4b33      	ldr	r3, [pc, #204]	; (800414c <DisplayPortsDir+0xe0>)
void DisplayPortsDir(uint8_t port){
 8004080:	4682      	mov	sl, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8004082:	cb31      	ldmia	r3!, {r0, r4, r5}
 8004084:	c231      	stmia	r2!, {r0, r4, r5}
 8004086:	cb31      	ldmia	r3!, {r0, r4, r5}
 8004088:	c231      	stmia	r2!, {r0, r4, r5}
 800408a:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 800408c:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 800408e:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004090:	2301      	movs	r3, #1
 8004092:	425b      	negs	r3, r3
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	221b      	movs	r2, #27
 8004098:	3333      	adds	r3, #51	; 0x33
 800409a:	4650      	mov	r0, sl
 800409c:	f009 ff84 	bl	800dfa8 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 80040a0:	4b2b      	ldr	r3, [pc, #172]	; (8004150 <DisplayPortsDir+0xe4>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d035      	beq.n	8004114 <DisplayPortsDir+0xa8>
 80040a8:	2301      	movs	r3, #1
 80040aa:	4699      	mov	r9, r3
 80040ac:	4b29      	ldr	r3, [pc, #164]	; (8004154 <DisplayPortsDir+0xe8>)
 80040ae:	4698      	mov	r8, r3
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80040b0:	4b29      	ldr	r3, [pc, #164]	; (8004158 <DisplayPortsDir+0xec>)
 80040b2:	469b      	mov	fp, r3
 80040b4:	464b      	mov	r3, r9
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040b6:	2680      	movs	r6, #128	; 0x80
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80040b8:	4f23      	ldr	r7, [pc, #140]	; (8004148 <DisplayPortsDir+0xdc>)
 80040ba:	1e5d      	subs	r5, r3, #1
 80040bc:	006d      	lsls	r5, r5, #1
	for(uint8_t i =1; i <= N; i++){
 80040be:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040c0:	0236      	lsls	r6, r6, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80040c2:	3740      	adds	r7, #64	; 0x40
 80040c4:	e002      	b.n	80040cc <DisplayPortsDir+0x60>
 80040c6:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 80040c8:	2c0a      	cmp	r4, #10
 80040ca:	d01b      	beq.n	8004104 <DisplayPortsDir+0x98>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040cc:	0031      	movs	r1, r6
 80040ce:	4642      	mov	r2, r8
 80040d0:	4119      	asrs	r1, r3
 80040d2:	5b52      	ldrh	r2, [r2, r5]
 80040d4:	1c5c      	adds	r4, r3, #1
 80040d6:	4211      	tst	r1, r2
 80040d8:	d0f5      	beq.n	80040c6 <DisplayPortsDir+0x5a>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80040da:	0023      	movs	r3, r4
 80040dc:	464a      	mov	r2, r9
 80040de:	4659      	mov	r1, fp
 80040e0:	0038      	movs	r0, r7
 80040e2:	f010 f99f 	bl	8014424 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 80040e6:	0038      	movs	r0, r7
 80040e8:	f7fc f816 	bl	8000118 <strlen>
 80040ec:	2301      	movs	r3, #1
 80040ee:	425b      	negs	r3, r3
 80040f0:	b282      	uxth	r2, r0
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	0039      	movs	r1, r7
 80040f6:	3333      	adds	r3, #51	; 0x33
 80040f8:	4650      	mov	r0, sl
 80040fa:	f009 ff55 	bl	800dfa8 <writePxMutex>
 80040fe:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8004100:	2c0a      	cmp	r4, #10
 8004102:	d1e3      	bne.n	80040cc <DisplayPortsDir+0x60>
	for(uint8_t i =1; i <= N; i++){
 8004104:	464b      	mov	r3, r9
 8004106:	3301      	adds	r3, #1
 8004108:	b2db      	uxtb	r3, r3
 800410a:	4699      	mov	r9, r3
 800410c:	4b10      	ldr	r3, [pc, #64]	; (8004150 <DisplayPortsDir+0xe4>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	454b      	cmp	r3, r9
 8004112:	d2cf      	bcs.n	80040b4 <DisplayPortsDir+0x48>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8004114:	490c      	ldr	r1, [pc, #48]	; (8004148 <DisplayPortsDir+0xdc>)
 8004116:	4b11      	ldr	r3, [pc, #68]	; (800415c <DisplayPortsDir+0xf0>)
 8004118:	3140      	adds	r1, #64	; 0x40
 800411a:	000a      	movs	r2, r1
 800411c:	cb31      	ldmia	r3!, {r0, r4, r5}
 800411e:	c231      	stmia	r2!, {r0, r4, r5}
 8004120:	cb31      	ldmia	r3!, {r0, r4, r5}
 8004122:	c231      	stmia	r2!, {r0, r4, r5}
 8004124:	cb11      	ldmia	r3!, {r0, r4}
 8004126:	c211      	stmia	r2!, {r0, r4}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004128:	2301      	movs	r3, #1
 800412a:	425b      	negs	r3, r3
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	221f      	movs	r2, #31
 8004130:	3333      	adds	r3, #51	; 0x33
 8004132:	4650      	mov	r0, sl
 8004134:	f009 ff38 	bl	800dfa8 <writePxMutex>
	HAL_MAX_DELAY);
}
 8004138:	b003      	add	sp, #12
 800413a:	bc3c      	pop	{r2, r3, r4, r5}
 800413c:	4690      	mov	r8, r2
 800413e:	4699      	mov	r9, r3
 8004140:	46a2      	mov	sl, r4
 8004142:	46ab      	mov	fp, r5
 8004144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	20000b98 	.word	0x20000b98
 800414c:	08019130 	.word	0x08019130
 8004150:	20000000 	.word	0x20000000
 8004154:	20007140 	.word	0x20007140
 8004158:	0801914c 	.word	0x0801914c
 800415c:	08019160 	.word	0x08019160

08004160 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8004160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004162:	46de      	mov	lr, fp
 8004164:	464e      	mov	r6, r9
 8004166:	4645      	mov	r5, r8
 8004168:	4657      	mov	r7, sl
 800416a:	b5e0      	push	{r5, r6, r7, lr}
 800416c:	b085      	sub	sp, #20
 800416e:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004170:	f00a f972 	bl	800e458 <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 8004174:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004176:	0004      	movs	r4, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8004178:	4d98      	ldr	r5, [pc, #608]	; (80043dc <DisplayModuleStatus+0x27c>)
	strcpy((char* )pcOutputString,"");
 800417a:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 800417c:	4b98      	ldr	r3, [pc, #608]	; (80043e0 <DisplayModuleStatus+0x280>)
 800417e:	3540      	adds	r5, #64	; 0x40
 8004180:	781a      	ldrb	r2, [r3, #0]
 8004182:	4998      	ldr	r1, [pc, #608]	; (80043e4 <DisplayModuleStatus+0x284>)
 8004184:	0028      	movs	r0, r5
 8004186:	f010 f94d 	bl	8014424 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800418a:	0029      	movs	r1, r5
 800418c:	0020      	movs	r0, r4
 800418e:	f010 f969 	bl	8014464 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8004192:	4b95      	ldr	r3, [pc, #596]	; (80043e8 <DisplayModuleStatus+0x288>)
 8004194:	4995      	ldr	r1, [pc, #596]	; (80043ec <DisplayModuleStatus+0x28c>)
 8004196:	7c1a      	ldrb	r2, [r3, #16]
 8004198:	0028      	movs	r0, r5
 800419a:	4698      	mov	r8, r3
 800419c:	f010 f942 	bl	8014424 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041a0:	0029      	movs	r1, r5
 80041a2:	0020      	movs	r0, r4
 80041a4:	f010 f95e 	bl	8014464 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 80041a8:	2305      	movs	r3, #5
 80041aa:	2200      	movs	r2, #0
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	4990      	ldr	r1, [pc, #576]	; (80043f0 <DisplayModuleStatus+0x290>)
 80041b0:	3b03      	subs	r3, #3
 80041b2:	0028      	movs	r0, r5
 80041b4:	f010 f936 	bl	8014424 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 80041b8:	0029      	movs	r1, r5
 80041ba:	0020      	movs	r0, r4
 80041bc:	f010 f952 	bl	8014464 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 80041c0:	4a8c      	ldr	r2, [pc, #560]	; (80043f4 <DisplayModuleStatus+0x294>)
 80041c2:	498d      	ldr	r1, [pc, #564]	; (80043f8 <DisplayModuleStatus+0x298>)
 80041c4:	0028      	movs	r0, r5
 80041c6:	f010 f92d 	bl	8014424 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041ca:	0029      	movs	r1, r5
 80041cc:	0020      	movs	r0, r4
 80041ce:	f010 f949 	bl	8014464 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 80041d2:	4a8a      	ldr	r2, [pc, #552]	; (80043fc <DisplayModuleStatus+0x29c>)
 80041d4:	498a      	ldr	r1, [pc, #552]	; (8004400 <DisplayModuleStatus+0x2a0>)
 80041d6:	0028      	movs	r0, r5
 80041d8:	f010 f924 	bl	8014424 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041dc:	0029      	movs	r1, r5
 80041de:	0020      	movs	r0, r4
 80041e0:	f010 f940 	bl	8014464 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80041e4:	002a      	movs	r2, r5
 80041e6:	4b87      	ldr	r3, [pc, #540]	; (8004404 <DisplayModuleStatus+0x2a4>)
 80041e8:	cb43      	ldmia	r3!, {r0, r1, r6}
 80041ea:	c243      	stmia	r2!, {r0, r1, r6}
 80041ec:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 80041ee:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80041f0:	6011      	str	r1, [r2, #0]
 80041f2:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 80041f4:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80041f6:	8091      	strh	r1, [r2, #4]
 80041f8:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 80041fa:	0029      	movs	r1, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80041fc:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 80041fe:	f010 f931 	bl	8014464 <strcat>
 8004202:	4b81      	ldr	r3, [pc, #516]	; (8004408 <DisplayModuleStatus+0x2a8>)
 8004204:	4699      	mov	r9, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8004206:	4b81      	ldr	r3, [pc, #516]	; (800440c <DisplayModuleStatus+0x2ac>)
 8004208:	469a      	mov	sl, r3
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
				break;
			case PORTBUTTON:
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 800420a:	4b81      	ldr	r3, [pc, #516]	; (8004410 <DisplayModuleStatus+0x2b0>)
 800420c:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 800420e:	0032      	movs	r2, r6
 8004210:	4649      	mov	r1, r9
 8004212:	0028      	movs	r0, r5
 8004214:	f010 f906 	bl	8014424 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004218:	0029      	movs	r1, r5
 800421a:	0020      	movs	r0, r4
 800421c:	f010 f922 	bl	8014464 <strcat>
		switch(portStatus[i]){
 8004220:	4643      	mov	r3, r8
 8004222:	3314      	adds	r3, #20
 8004224:	5cf3      	ldrb	r3, [r6, r3]
 8004226:	2b04      	cmp	r3, #4
 8004228:	d80b      	bhi.n	8004242 <DisplayModuleStatus+0xe2>
 800422a:	4652      	mov	r2, sl
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	58d3      	ldr	r3, [r2, r3]
 8004230:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8004232:	002a      	movs	r2, r5
 8004234:	4b77      	ldr	r3, [pc, #476]	; (8004414 <DisplayModuleStatus+0x2b4>)
 8004236:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004238:	c283      	stmia	r2!, {r0, r1, r7}
 800423a:	cb83      	ldmia	r3!, {r0, r1, r7}
 800423c:	c283      	stmia	r2!, {r0, r1, r7}
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	8013      	strh	r3, [r2, #0]
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8004242:	0029      	movs	r1, r5
 8004244:	0020      	movs	r0, r4
 8004246:	3601      	adds	r6, #1
 8004248:	f010 f90c 	bl	8014464 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800424c:	2e06      	cmp	r6, #6
 800424e:	d1de      	bne.n	800420e <DisplayModuleStatus+0xae>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8004250:	002a      	movs	r2, r5
 8004252:	4b71      	ldr	r3, [pc, #452]	; (8004418 <DisplayModuleStatus+0x2b8>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004254:	46a0      	mov	r8, r4
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8004256:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004258:	c243      	stmia	r2!, {r0, r1, r6}
 800425a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800425c:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 800425e:	0029      	movs	r1, r5
 8004260:	0020      	movs	r0, r4
 8004262:	f010 f8ff 	bl	8014464 <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004266:	4b6d      	ldr	r3, [pc, #436]	; (800441c <DisplayModuleStatus+0x2bc>)
 8004268:	4e6d      	ldr	r6, [pc, #436]	; (8004420 <DisplayModuleStatus+0x2c0>)
 800426a:	469b      	mov	fp, r3
 800426c:	4b6d      	ldr	r3, [pc, #436]	; (8004424 <DisplayModuleStatus+0x2c4>)
	strcat((char* )pcOutputString,pcUserMessage);
 800426e:	2501      	movs	r5, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004270:	469a      	mov	sl, r3
 8004272:	e01d      	b.n	80042b0 <DisplayModuleStatus+0x150>
 8004274:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004276:	f007 fab5 	bl	800b7e4 <GetPort>
 800427a:	465a      	mov	r2, fp
 800427c:	00ab      	lsls	r3, r5, #2
 800427e:	3b04      	subs	r3, #4
 8004280:	0004      	movs	r4, r0
 8004282:	58d0      	ldr	r0, [r2, r3]
 8004284:	f007 faae 	bl	800b7e4 <GetPort>
 8004288:	2340      	movs	r3, #64	; 0x40
 800428a:	4699      	mov	r9, r3
 800428c:	4b53      	ldr	r3, [pc, #332]	; (80043dc <DisplayModuleStatus+0x27c>)
 800428e:	002a      	movs	r2, r5
 8004290:	469c      	mov	ip, r3
 8004292:	44e1      	add	r9, ip
 8004294:	9000      	str	r0, [sp, #0]
 8004296:	0023      	movs	r3, r4
 8004298:	4651      	mov	r1, sl
 800429a:	4648      	mov	r0, r9
 800429c:	f010 f8c2 	bl	8014424 <sprintf>
 80042a0:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 80042a2:	4649      	mov	r1, r9
 80042a4:	4640      	mov	r0, r8
 80042a6:	f010 f8dd 	bl	8014464 <strcat>
 80042aa:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80042ac:	2d07      	cmp	r5, #7
 80042ae:	d011      	beq.n	80042d4 <DisplayModuleStatus+0x174>
		if(streamDMA[i - 1].Instance == 0){
 80042b0:	6833      	ldr	r3, [r6, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1de      	bne.n	8004274 <DisplayModuleStatus+0x114>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80042b6:	4c49      	ldr	r4, [pc, #292]	; (80043dc <DisplayModuleStatus+0x27c>)
 80042b8:	002a      	movs	r2, r5
 80042ba:	3440      	adds	r4, #64	; 0x40
 80042bc:	495a      	ldr	r1, [pc, #360]	; (8004428 <DisplayModuleStatus+0x2c8>)
 80042be:	0020      	movs	r0, r4
 80042c0:	f010 f8b0 	bl	8014424 <sprintf>
 80042c4:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 80042c6:	0021      	movs	r1, r4
 80042c8:	4640      	mov	r0, r8
 80042ca:	f010 f8cb 	bl	8014464 <strcat>
 80042ce:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80042d0:	2d07      	cmp	r5, #7
 80042d2:	d1ed      	bne.n	80042b0 <DisplayModuleStatus+0x150>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 80042d4:	4640      	mov	r0, r8
 80042d6:	f7fb ff1f 	bl	8000118 <strlen>
 80042da:	4644      	mov	r4, r8
 80042dc:	0005      	movs	r5, r0
 80042de:	4b53      	ldr	r3, [pc, #332]	; (800442c <DisplayModuleStatus+0x2cc>)
 80042e0:	2202      	movs	r2, #2
 80042e2:	0019      	movs	r1, r3
 80042e4:	1820      	adds	r0, r4, r0
 80042e6:	4698      	mov	r8, r3
 80042e8:	f00f fe99 	bl	801401e <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 80042ec:	1ca8      	adds	r0, r5, #2
 80042ee:	221d      	movs	r2, #29
 80042f0:	1820      	adds	r0, r4, r0
 80042f2:	494f      	ldr	r1, [pc, #316]	; (8004430 <DisplayModuleStatus+0x2d0>)
 80042f4:	f00f fe93 	bl	801401e <memcpy>
	temp =strlen((char* )pcOutputString);
 80042f8:	231e      	movs	r3, #30
 80042fa:	469b      	mov	fp, r3
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
		{
			sprintf(pcUserMessage,"P%d ",p);
 80042fc:	4b4d      	ldr	r3, [pc, #308]	; (8004434 <DisplayModuleStatus+0x2d4>)
	temp =strlen((char* )pcOutputString);
 80042fe:	44ab      	add	fp, r5
			sprintf(pcUserMessage,"P%d ",p);
 8004300:	4699      	mov	r9, r3
 8004302:	2340      	movs	r3, #64	; 0x40
 8004304:	469a      	mov	sl, r3
 8004306:	4b35      	ldr	r3, [pc, #212]	; (80043dc <DisplayModuleStatus+0x27c>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004308:	2580      	movs	r5, #128	; 0x80
			sprintf(pcUserMessage,"P%d ",p);
 800430a:	469c      	mov	ip, r3
	temp =strlen((char* )pcOutputString);
 800430c:	2200      	movs	r2, #0
 800430e:	4e4a      	ldr	r6, [pc, #296]	; (8004438 <DisplayModuleStatus+0x2d8>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004310:	022d      	lsls	r5, r5, #8
			sprintf(pcUserMessage,"P%d ",p);
 8004312:	44e2      	add	sl, ip
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004314:	0029      	movs	r1, r5
 8004316:	4111      	asrs	r1, r2
 8004318:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <DisplayModuleStatus+0x280>)
 800431a:	1c57      	adds	r7, r2, #1
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	3b01      	subs	r3, #1
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	5af3      	ldrh	r3, [r6, r3]
 8004324:	4219      	tst	r1, r3
 8004326:	d148      	bne.n	80043ba <DisplayModuleStatus+0x25a>
 8004328:	003a      	movs	r2, r7
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800432a:	2f05      	cmp	r7, #5
 800432c:	d1f2      	bne.n	8004314 <DisplayModuleStatus+0x1b4>
			strcat((char* )pcOutputString,pcUserMessage);
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 800432e:	0020      	movs	r0, r4
 8004330:	f7fb fef2 	bl	8000118 <strlen>
 8004334:	465b      	mov	r3, fp
 8004336:	b29b      	uxth	r3, r3
 8004338:	0005      	movs	r5, r0
 800433a:	1820      	adds	r0, r4, r0
 800433c:	42ab      	cmp	r3, r5
 800433e:	d046      	beq.n	80043ce <DisplayModuleStatus+0x26e>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8004340:	2203      	movs	r2, #3
 8004342:	4641      	mov	r1, r8
 8004344:	f00f fe6b 	bl	801401e <memcpy>
	
	/* Display output */
	if(port)
 8004348:	9b03      	ldr	r3, [sp, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <DisplayModuleStatus+0x206>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800434e:	0020      	movs	r0, r4
 8004350:	f7fb fee2 	bl	8000118 <strlen>
 8004354:	2301      	movs	r3, #1
 8004356:	425b      	negs	r3, r3
 8004358:	b282      	uxth	r2, r0
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	0021      	movs	r1, r4
 800435e:	3333      	adds	r3, #51	; 0x33
 8004360:	9803      	ldr	r0, [sp, #12]
 8004362:	f009 fe21 	bl	800dfa8 <writePxMutex>
	
}
 8004366:	b005      	add	sp, #20
 8004368:	bc3c      	pop	{r2, r3, r4, r5}
 800436a:	4690      	mov	r8, r2
 800436c:	4699      	mov	r9, r3
 800436e:	46a2      	mov	sl, r4
 8004370:	46ab      	mov	fp, r5
 8004372:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 8004374:	002a      	movs	r2, r5
 8004376:	4b31      	ldr	r3, [pc, #196]	; (800443c <DisplayModuleStatus+0x2dc>)
 8004378:	cb83      	ldmia	r3!, {r0, r1, r7}
 800437a:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 800437c:	e761      	b.n	8004242 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 800437e:	002a      	movs	r2, r5
 8004380:	4b2f      	ldr	r3, [pc, #188]	; (8004440 <DisplayModuleStatus+0x2e0>)
 8004382:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004384:	c283      	stmia	r2!, {r0, r1, r7}
 8004386:	cb03      	ldmia	r3!, {r0, r1}
 8004388:	c203      	stmia	r2!, {r0, r1}
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	7013      	strb	r3, [r2, #0]
				break;
 800438e:	e758      	b.n	8004242 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004390:	002b      	movs	r3, r5
 8004392:	465a      	mov	r2, fp
 8004394:	ca83      	ldmia	r2!, {r0, r1, r7}
 8004396:	c383      	stmia	r3!, {r0, r1, r7}
 8004398:	ca83      	ldmia	r2!, {r0, r1, r7}
 800439a:	c383      	stmia	r3!, {r0, r1, r7}
 800439c:	6811      	ldr	r1, [r2, #0]
 800439e:	6019      	str	r1, [r3, #0]
 80043a0:	8891      	ldrh	r1, [r2, #4]
 80043a2:	8099      	strh	r1, [r3, #4]
 80043a4:	7992      	ldrb	r2, [r2, #6]
 80043a6:	719a      	strb	r2, [r3, #6]
				break;
 80043a8:	e74b      	b.n	8004242 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Free\n\r");
 80043aa:	4b26      	ldr	r3, [pc, #152]	; (8004444 <DisplayModuleStatus+0x2e4>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	602a      	str	r2, [r5, #0]
 80043b0:	889a      	ldrh	r2, [r3, #4]
 80043b2:	80aa      	strh	r2, [r5, #4]
 80043b4:	799b      	ldrb	r3, [r3, #6]
 80043b6:	71ab      	strb	r3, [r5, #6]
				break;
 80043b8:	e743      	b.n	8004242 <DisplayModuleStatus+0xe2>
			sprintf(pcUserMessage,"P%d ",p);
 80043ba:	4649      	mov	r1, r9
 80043bc:	003a      	movs	r2, r7
 80043be:	4650      	mov	r0, sl
 80043c0:	f010 f830 	bl	8014424 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80043c4:	4651      	mov	r1, sl
 80043c6:	0020      	movs	r0, r4
 80043c8:	f010 f84c 	bl	8014464 <strcat>
 80043cc:	e7ac      	b.n	8004328 <DisplayModuleStatus+0x1c8>
		strcat((char* )pcOutputString,"None");
 80043ce:	2205      	movs	r2, #5
 80043d0:	491d      	ldr	r1, [pc, #116]	; (8004448 <DisplayModuleStatus+0x2e8>)
 80043d2:	f00f fe24 	bl	801401e <memcpy>
 80043d6:	1d28      	adds	r0, r5, #4
 80043d8:	1820      	adds	r0, r4, r0
 80043da:	e7b1      	b.n	8004340 <DisplayModuleStatus+0x1e0>
 80043dc:	20000b98 	.word	0x20000b98
 80043e0:	20000a98 	.word	0x20000a98
 80043e4:	08019180 	.word	0x08019180
 80043e8:	20000c18 	.word	0x20000c18
 80043ec:	0801919c 	.word	0x0801919c
 80043f0:	080191b8 	.word	0x080191b8
 80043f4:	080191d8 	.word	0x080191d8
 80043f8:	080191e4 	.word	0x080191e4
 80043fc:	080191fc 	.word	0x080191fc
 8004400:	08019208 	.word	0x08019208
 8004404:	08019224 	.word	0x08019224
 8004408:	08019238 	.word	0x08019238
 800440c:	080187c8 	.word	0x080187c8
 8004410:	08019288 	.word	0x08019288
 8004414:	0801926c 	.word	0x0801926c
 8004418:	080192a8 	.word	0x080192a8
 800441c:	200012e4 	.word	0x200012e4
 8004420:	20001a9c 	.word	0x20001a9c
 8004424:	080192dc 	.word	0x080192dc
 8004428:	080192c0 	.word	0x080192c0
 800442c:	08019234 	.word	0x08019234
 8004430:	0801930c 	.word	0x0801930c
 8004434:	0801932c 	.word	0x0801932c
 8004438:	20007140 	.word	0x20007140
 800443c:	08019260 	.word	0x08019260
 8004440:	08019248 	.word	0x08019248
 8004444:	08019240 	.word	0x08019240
 8004448:	08019334 	.word	0x08019334

0800444c <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 800444c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444e:	46c6      	mov	lr, r8
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004450:	4929      	ldr	r1, [pc, #164]	; (80044f8 <GetID+0xac>)
int16_t GetID(char *string){
 8004452:	b500      	push	{lr}
 8004454:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 8004456:	f7fb fe55 	bl	8000104 <strcmp>
 800445a:	2800      	cmp	r0, #0
 800445c:	d02c      	beq.n	80044b8 <GetID+0x6c>
		return myID;
	else if(!strcmp(string,"all"))
 800445e:	4927      	ldr	r1, [pc, #156]	; (80044fc <GetID+0xb0>)
 8004460:	0030      	movs	r0, r6
 8004462:	f7fb fe4f 	bl	8000104 <strcmp>
 8004466:	2800      	cmp	r0, #0
 8004468:	d02b      	beq.n	80044c2 <GetID+0x76>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 800446a:	7833      	ldrb	r3, [r6, #0]
 800446c:	4698      	mov	r8, r3
 800446e:	2b23      	cmp	r3, #35	; 0x23
 8004470:	d030      	beq.n	80044d4 <GetID+0x88>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004472:	4b23      	ldr	r3, [pc, #140]	; (8004500 <GetID+0xb4>)
 8004474:	781f      	ldrb	r7, [r3, #0]
 8004476:	2f00      	cmp	r7, #0
 8004478:	d00f      	beq.n	800449a <GetID+0x4e>
 800447a:	2400      	movs	r4, #0
 800447c:	4d21      	ldr	r5, [pc, #132]	; (8004504 <GetID+0xb8>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 800447e:	0029      	movs	r1, r5
 8004480:	0030      	movs	r0, r6
 8004482:	f7fb fe3f 	bl	8000104 <strcmp>
 8004486:	2800      	cmp	r0, #0
 8004488:	d102      	bne.n	8004490 <GetID+0x44>
 800448a:	4643      	mov	r3, r8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d11a      	bne.n	80044c6 <GetID+0x7a>
		for(i =0; i < N; i++){
 8004490:	3401      	adds	r4, #1
 8004492:	b2e4      	uxtb	r4, r4
 8004494:	350a      	adds	r5, #10
 8004496:	42a7      	cmp	r7, r4
 8004498:	d1f1      	bne.n	800447e <GetID+0x32>
 800449a:	2400      	movs	r4, #0
 800449c:	4d1a      	ldr	r5, [pc, #104]	; (8004508 <GetID+0xbc>)
 800449e:	3538      	adds	r5, #56	; 0x38
				return (i);
		}
		
		/* Check group alias */
		for(i =0; i < MaxNumOfGroups; i++){
			if(!strcmp(string,groupAlias[i]))
 80044a0:	0029      	movs	r1, r5
 80044a2:	0030      	movs	r0, r6
 80044a4:	f7fb fe2e 	bl	8000104 <strcmp>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d00e      	beq.n	80044ca <GetID+0x7e>
 80044ac:	3401      	adds	r4, #1
 80044ae:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 80044b0:	2c0a      	cmp	r4, #10
 80044b2:	d1f5      	bne.n	80044a0 <GetID+0x54>
				return (BOS_MULTICAST | (i << 8));
		}
		
		return BOS_ERR_WrongName;
 80044b4:	2064      	movs	r0, #100	; 0x64
 80044b6:	e001      	b.n	80044bc <GetID+0x70>
		return myID;
 80044b8:	4b13      	ldr	r3, [pc, #76]	; (8004508 <GetID+0xbc>)
 80044ba:	7818      	ldrb	r0, [r3, #0]
	}
	
}
 80044bc:	bc04      	pop	{r2}
 80044be:	4690      	mov	r8, r2
 80044c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_BROADCAST;
 80044c2:	20ff      	movs	r0, #255	; 0xff
 80044c4:	e7fa      	b.n	80044bc <GetID+0x70>
				return (i);
 80044c6:	b220      	sxth	r0, r4
 80044c8:	e7f8      	b.n	80044bc <GetID+0x70>
				return (BOS_MULTICAST | (i << 8));
 80044ca:	20fe      	movs	r0, #254	; 0xfe
 80044cc:	0224      	lsls	r4, r4, #8
 80044ce:	4320      	orrs	r0, r4
 80044d0:	b200      	sxth	r0, r0
 80044d2:	e7f3      	b.n	80044bc <GetID+0x70>
		id =atol(string + 1);
 80044d4:	1c70      	adds	r0, r6, #1
 80044d6:	f00f fae2 	bl	8013a9e <atol>
 80044da:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <GetID+0x9c>
 80044e0:	4a07      	ldr	r2, [pc, #28]	; (8004500 <GetID+0xb4>)
 80044e2:	7812      	ldrb	r2, [r2, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d204      	bcs.n	80044f2 <GetID+0xa6>
		else if(id == myID)
 80044e8:	4a07      	ldr	r2, [pc, #28]	; (8004508 <GetID+0xbc>)
			return BOS_ERR_WrongID;
 80044ea:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80044ec:	7812      	ldrb	r2, [r2, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d1e4      	bne.n	80044bc <GetID+0x70>
			return myID;
 80044f2:	b218      	sxth	r0, r3
 80044f4:	e7e2      	b.n	80044bc <GetID+0x70>
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	0801933c 	.word	0x0801933c
 80044fc:	08019340 	.word	0x08019340
 8004500:	20000000 	.word	0x20000000
 8004504:	20000dc4 	.word	0x20000dc4
 8004508:	20000a98 	.word	0x20000a98

0800450c <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 800450c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800450e:	46c6      	mov	lr, r8
 8004510:	4c2c      	ldr	r4, [pc, #176]	; (80045c4 <NameModule+0xb8>)
 8004512:	0007      	movs	r7, r0
 8004514:	0026      	movs	r6, r4
 8004516:	000d      	movs	r5, r1
 8004518:	b500      	push	{lr}
 800451a:	3610      	adds	r6, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 800451c:	0021      	movs	r1, r4
 800451e:	0028      	movs	r0, r5
 8004520:	f7fb fdf0 	bl	8000104 <strcmp>
 8004524:	2800      	cmp	r0, #0
 8004526:	d040      	beq.n	80045aa <NameModule+0x9e>
 8004528:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 800452a:	42a6      	cmp	r6, r4
 800452c:	d1f6      	bne.n	800451c <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 800452e:	4b26      	ldr	r3, [pc, #152]	; (80045c8 <NameModule+0xbc>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d914      	bls.n	8004560 <NameModule+0x54>
 8004536:	4c25      	ldr	r4, [pc, #148]	; (80045cc <NameModule+0xc0>)
 8004538:	009e      	lsls	r6, r3, #2
 800453a:	18f6      	adds	r6, r6, r3
 800453c:	0023      	movs	r3, r4
 800453e:	0076      	lsls	r6, r6, #1
 8004540:	3b0a      	subs	r3, #10
 8004542:	18f6      	adds	r6, r6, r3
 8004544:	e002      	b.n	800454c <NameModule+0x40>
 8004546:	340a      	adds	r4, #10
 8004548:	42b4      	cmp	r4, r6
 800454a:	d009      	beq.n	8004560 <NameModule+0x54>
		if(!strcmp(alias,moduleAlias[i]))
 800454c:	0021      	movs	r1, r4
 800454e:	0028      	movs	r0, r5
 8004550:	f7fb fdd8 	bl	8000104 <strcmp>
 8004554:	2800      	cmp	r0, #0
 8004556:	d1f6      	bne.n	8004546 <NameModule+0x3a>
			return BOS_ERR_ExistingAlias;
 8004558:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 800455a:	bc04      	pop	{r2}
 800455c:	4690      	mov	r8, r2
 800455e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004560:	4e1b      	ldr	r6, [pc, #108]	; (80045d0 <NameModule+0xc4>)
 8004562:	0034      	movs	r4, r6
 8004564:	369c      	adds	r6, #156	; 0x9c
 8004566:	3438      	adds	r4, #56	; 0x38
		if(!strcmp(alias,groupAlias[i]))
 8004568:	0021      	movs	r1, r4
 800456a:	0028      	movs	r0, r5
 800456c:	f7fb fdca 	bl	8000104 <strcmp>
 8004570:	2800      	cmp	r0, #0
 8004572:	d0f1      	beq.n	8004558 <NameModule+0x4c>
 8004574:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004576:	42a6      	cmp	r6, r4
 8004578:	d1f6      	bne.n	8004568 <NameModule+0x5c>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800457a:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <NameModule+0xc8>)
 800457c:	4c16      	ldr	r4, [pc, #88]	; (80045d8 <NameModule+0xcc>)
 800457e:	4698      	mov	r8, r3
 8004580:	61dc      	str	r4, [r3, #28]
 8004582:	e004      	b.n	800458e <NameModule+0x82>
 8004584:	4643      	mov	r3, r8
 8004586:	6864      	ldr	r4, [r4, #4]
 8004588:	61dc      	str	r4, [r3, #28]
 800458a:	2c00      	cmp	r4, #0
 800458c:	d00f      	beq.n	80045ae <NameModule+0xa2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	681e      	ldr	r6, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004592:	0030      	movs	r0, r6
 8004594:	f7fb fdc0 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004598:	0031      	movs	r1, r6
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800459a:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800459c:	0028      	movs	r0, r5
 800459e:	f00f ff85 	bl	80144ac <strncmp>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d1ee      	bne.n	8004584 <NameModule+0x78>
			return BOS_ERR_ExistingCmd;
 80045a6:	2008      	movs	r0, #8
 80045a8:	e7d7      	b.n	800455a <NameModule+0x4e>
			return BOS_ERR_Keyword;
 80045aa:	2006      	movs	r0, #6
 80045ac:	e7d5      	b.n	800455a <NameModule+0x4e>
	strcpy(moduleAlias[module],alias);
 80045ae:	00b8      	lsls	r0, r7, #2
 80045b0:	19c0      	adds	r0, r0, r7
 80045b2:	4f0a      	ldr	r7, [pc, #40]	; (80045dc <NameModule+0xd0>)
 80045b4:	0040      	lsls	r0, r0, #1
 80045b6:	0029      	movs	r1, r5
 80045b8:	19c0      	adds	r0, r0, r7
 80045ba:	f00f ff6f 	bl	801449c <strcpy>
	result =SaveEEalias();
 80045be:	f7ff f881 	bl	80036c4 <SaveEEalias>
	return result;
 80045c2:	e7ca      	b.n	800455a <NameModule+0x4e>
 80045c4:	08018824 	.word	0x08018824
 80045c8:	20000000 	.word	0x20000000
 80045cc:	20000dce 	.word	0x20000dce
 80045d0:	20000a98 	.word	0x20000a98
 80045d4:	20000c18 	.word	0x20000c18
 80045d8:	200000b8 	.word	0x200000b8
 80045dc:	20000dc4 	.word	0x20000dc4

080045e0 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 80045e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045e2:	464f      	mov	r7, r9
 80045e4:	4646      	mov	r6, r8
 80045e6:	46d6      	mov	lr, sl
 80045e8:	4b3e      	ldr	r3, [pc, #248]	; (80046e4 <AddModuleToGroup+0x104>)
 80045ea:	b5c0      	push	{r6, r7, lr}
 80045ec:	001f      	movs	r7, r3
 80045ee:	3738      	adds	r7, #56	; 0x38
 80045f0:	4680      	mov	r8, r0
 80045f2:	000e      	movs	r6, r1
 80045f4:	4699      	mov	r9, r3
 80045f6:	003c      	movs	r4, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80045f8:	2500      	movs	r5, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80045fa:	0021      	movs	r1, r4
 80045fc:	0030      	movs	r0, r6
 80045fe:	f7fb fd81 	bl	8000104 <strcmp>
 8004602:	2800      	cmp	r0, #0
 8004604:	d02a      	beq.n	800465c <AddModuleToGroup+0x7c>
	for(i =0; i < MaxNumOfGroups; i++){
 8004606:	3501      	adds	r5, #1
 8004608:	340a      	adds	r4, #10
 800460a:	2d0a      	cmp	r5, #10
 800460c:	d1f5      	bne.n	80045fa <AddModuleToGroup+0x1a>
 800460e:	4c36      	ldr	r4, [pc, #216]	; (80046e8 <AddModuleToGroup+0x108>)
 8004610:	0025      	movs	r5, r4
 8004612:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004614:	0021      	movs	r1, r4
 8004616:	0030      	movs	r0, r6
 8004618:	f7fb fd74 	bl	8000104 <strcmp>
 800461c:	2800      	cmp	r0, #0
 800461e:	d051      	beq.n	80046c4 <AddModuleToGroup+0xe4>
 8004620:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 8004622:	42a5      	cmp	r5, r4
 8004624:	d1f6      	bne.n	8004614 <AddModuleToGroup+0x34>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 8004626:	4b31      	ldr	r3, [pc, #196]	; (80046ec <AddModuleToGroup+0x10c>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d920      	bls.n	8004670 <AddModuleToGroup+0x90>
 800462e:	4c30      	ldr	r4, [pc, #192]	; (80046f0 <AddModuleToGroup+0x110>)
 8004630:	009d      	lsls	r5, r3, #2
 8004632:	18ed      	adds	r5, r5, r3
 8004634:	0023      	movs	r3, r4
 8004636:	006d      	lsls	r5, r5, #1
 8004638:	3b0a      	subs	r3, #10
 800463a:	18ed      	adds	r5, r5, r3
 800463c:	e002      	b.n	8004644 <AddModuleToGroup+0x64>
 800463e:	340a      	adds	r4, #10
 8004640:	42a5      	cmp	r5, r4
 8004642:	d015      	beq.n	8004670 <AddModuleToGroup+0x90>
		if(!strcmp(group,moduleAlias[j]))
 8004644:	0021      	movs	r1, r4
 8004646:	0030      	movs	r0, r6
 8004648:	f7fb fd5c 	bl	8000104 <strcmp>
 800464c:	2800      	cmp	r0, #0
 800464e:	d1f6      	bne.n	800463e <AddModuleToGroup+0x5e>
			return BOS_ERR_ExistingAlias;
 8004650:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 8004652:	bc1c      	pop	{r2, r3, r4}
 8004654:	4690      	mov	r8, r2
 8004656:	4699      	mov	r9, r3
 8004658:	46a2      	mov	sl, r4
 800465a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			groupModules[module - 1] |=(0x0001 << i);
 800465c:	2201      	movs	r2, #1
 800465e:	4647      	mov	r7, r8
 8004660:	40aa      	lsls	r2, r5
 8004662:	3f01      	subs	r7, #1
 8004664:	007f      	lsls	r7, r7, #1
 8004666:	444f      	add	r7, r9
 8004668:	88bb      	ldrh	r3, [r7, #4]
 800466a:	4313      	orrs	r3, r2
 800466c:	80bb      	strh	r3, [r7, #4]
			return result;
 800466e:	e7f0      	b.n	8004652 <AddModuleToGroup+0x72>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004670:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <AddModuleToGroup+0x114>)
 8004672:	4c21      	ldr	r4, [pc, #132]	; (80046f8 <AddModuleToGroup+0x118>)
 8004674:	469a      	mov	sl, r3
 8004676:	621c      	str	r4, [r3, #32]
 8004678:	e004      	b.n	8004684 <AddModuleToGroup+0xa4>
 800467a:	4653      	mov	r3, sl
 800467c:	6864      	ldr	r4, [r4, #4]
 800467e:	621c      	str	r4, [r3, #32]
 8004680:	2c00      	cmp	r4, #0
 8004682:	d00d      	beq.n	80046a0 <AddModuleToGroup+0xc0>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004688:	0028      	movs	r0, r5
 800468a:	f7fb fd45 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800468e:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004690:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004692:	0030      	movs	r0, r6
 8004694:	f00f ff0a 	bl	80144ac <strncmp>
 8004698:	2800      	cmp	r0, #0
 800469a:	d1ee      	bne.n	800467a <AddModuleToGroup+0x9a>
			return BOS_ERR_ExistingCmd;
 800469c:	2008      	movs	r0, #8
 800469e:	e7d8      	b.n	8004652 <AddModuleToGroup+0x72>
		if(!groupAlias[i][0]){
 80046a0:	783b      	ldrb	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d010      	beq.n	80046c8 <AddModuleToGroup+0xe8>
	for(i =0; i < MaxNumOfGroups; i++){
 80046a6:	3401      	adds	r4, #1
 80046a8:	370a      	adds	r7, #10
 80046aa:	2c0a      	cmp	r4, #10
 80046ac:	d1f8      	bne.n	80046a0 <AddModuleToGroup+0xc0>
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 80046b2:	4647      	mov	r7, r8
 80046b4:	3f01      	subs	r7, #1
 80046b6:	007f      	lsls	r7, r7, #1
 80046b8:	444f      	add	r7, r9
 80046ba:	88ba      	ldrh	r2, [r7, #4]
	return result;
 80046bc:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 80046be:	4313      	orrs	r3, r2
 80046c0:	80bb      	strh	r3, [r7, #4]
	return result;
 80046c2:	e7c6      	b.n	8004652 <AddModuleToGroup+0x72>
			return BOS_ERR_Keyword;
 80046c4:	2006      	movs	r0, #6
 80046c6:	e7c4      	b.n	8004652 <AddModuleToGroup+0x72>
			strcpy(groupAlias[i],group);
 80046c8:	464b      	mov	r3, r9
 80046ca:	00a0      	lsls	r0, r4, #2
 80046cc:	1900      	adds	r0, r0, r4
 80046ce:	3338      	adds	r3, #56	; 0x38
 80046d0:	0040      	lsls	r0, r0, #1
 80046d2:	1818      	adds	r0, r3, r0
 80046d4:	0031      	movs	r1, r6
 80046d6:	f00f fee1 	bl	801449c <strcpy>
 80046da:	2301      	movs	r3, #1
 80046dc:	40a3      	lsls	r3, r4
 80046de:	b21b      	sxth	r3, r3
			break;
 80046e0:	e7e7      	b.n	80046b2 <AddModuleToGroup+0xd2>
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	20000a98 	.word	0x20000a98
 80046e8:	08018824 	.word	0x08018824
 80046ec:	20000000 	.word	0x20000000
 80046f0:	20000dce 	.word	0x20000dce
 80046f4:	20000c18 	.word	0x20000c18
 80046f8:	200000b8 	.word	0x200000b8

080046fc <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 80046fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046fe:	464e      	mov	r6, r9
 8004700:	46de      	mov	lr, fp
 8004702:	4657      	mov	r7, sl
 8004704:	4645      	mov	r5, r8
 8004706:	b5e0      	push	{r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 8004708:	4b29      	ldr	r3, [pc, #164]	; (80047b0 <ReadPortsDir+0xb4>)
BOS_Status ReadPortsDir(void){
 800470a:	b083      	sub	sp, #12
	for(uint8_t i =1; i <= N; i++){
 800470c:	4699      	mov	r9, r3
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d04a      	beq.n	80047aa <ReadPortsDir+0xae>
	BOS_Status result =BOS_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	9301      	str	r3, [sp, #4]
 8004718:	4b26      	ldr	r3, [pc, #152]	; (80047b4 <ReadPortsDir+0xb8>)
	for(uint8_t i =1; i <= N; i++){
 800471a:	2501      	movs	r5, #1
 800471c:	4698      	mov	r8, r3
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 800471e:	4b26      	ldr	r3, [pc, #152]	; (80047b8 <ReadPortsDir+0xbc>)
 8004720:	469a      	mov	sl, r3
			if(responseStatus != BOS_OK){
 8004722:	4b26      	ldr	r3, [pc, #152]	; (80047bc <ReadPortsDir+0xc0>)
 8004724:	469b      	mov	fp, r3
 8004726:	e014      	b.n	8004752 <ReadPortsDir+0x56>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 8004728:	2200      	movs	r2, #0
 800472a:	2113      	movs	r1, #19
 800472c:	0028      	movs	r0, r5
 800472e:	f005 f885 	bl	800983c <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8004732:	2032      	movs	r0, #50	; 0x32
 8004734:	f009 fabc 	bl	800dcb0 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 8004738:	2324      	movs	r3, #36	; 0x24
 800473a:	465a      	mov	r2, fp
 800473c:	5cd3      	ldrb	r3, [r2, r3]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <ReadPortsDir+0x4a>
				result =BOS_ERR_NoResponse;
 8004742:	2302      	movs	r3, #2
 8004744:	9301      	str	r3, [sp, #4]
	for(uint8_t i =1; i <= N; i++){
 8004746:	464b      	mov	r3, r9
 8004748:	3501      	adds	r5, #1
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	b2ed      	uxtb	r5, r5
 800474e:	42ab      	cmp	r3, r5
 8004750:	d323      	bcc.n	800479a <ReadPortsDir+0x9e>
		if(i != myID){
 8004752:	4643      	mov	r3, r8
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	42ab      	cmp	r3, r5
 8004758:	d1e6      	bne.n	8004728 <ReadPortsDir+0x2c>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800475a:	2780      	movs	r7, #128	; 0x80
 800475c:	2600      	movs	r6, #0
			for(uint8_t p =1; p <= NumOfPorts; p++){
 800475e:	2401      	movs	r4, #1
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 8004760:	023f      	lsls	r7, r7, #8
 8004762:	0020      	movs	r0, r4
 8004764:	f009 fca8 	bl	800e0b8 <GetUart>
 8004768:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800476a:	42bb      	cmp	r3, r7
 800476c:	d10a      	bne.n	8004784 <ReadPortsDir+0x88>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 800476e:	0039      	movs	r1, r7
 8004770:	4643      	mov	r3, r8
 8004772:	4652      	mov	r2, sl
 8004774:	4131      	asrs	r1, r6
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	3b01      	subs	r3, #1
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	5a9a      	ldrh	r2, [r3, r2]
 800477e:	430a      	orrs	r2, r1
 8004780:	4651      	mov	r1, sl
 8004782:	525a      	strh	r2, [r3, r1]
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004784:	3401      	adds	r4, #1
 8004786:	b2e4      	uxtb	r4, r4
 8004788:	3601      	adds	r6, #1
 800478a:	2c06      	cmp	r4, #6
 800478c:	d1e9      	bne.n	8004762 <ReadPortsDir+0x66>
	for(uint8_t i =1; i <= N; i++){
 800478e:	464b      	mov	r3, r9
 8004790:	3501      	adds	r5, #1
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	b2ed      	uxtb	r5, r5
 8004796:	42ab      	cmp	r3, r5
 8004798:	d2db      	bcs.n	8004752 <ReadPortsDir+0x56>
			}
		}
	}
	
	return result;
}
 800479a:	9801      	ldr	r0, [sp, #4]
 800479c:	b003      	add	sp, #12
 800479e:	bc3c      	pop	{r2, r3, r4, r5}
 80047a0:	4690      	mov	r8, r2
 80047a2:	4699      	mov	r9, r3
 80047a4:	46a2      	mov	sl, r4
 80047a6:	46ab      	mov	fp, r5
 80047a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	e7f4      	b.n	800479a <ReadPortsDir+0x9e>
 80047b0:	20000000 	.word	0x20000000
 80047b4:	20000a98 	.word	0x20000a98
 80047b8:	20007140 	.word	0x20007140
 80047bc:	20000c18 	.word	0x20000c18

080047c0 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 80047c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047c2:	46c6      	mov	lr, r8
 80047c4:	4b12      	ldr	r3, [pc, #72]	; (8004810 <UpdateMyPortsDir+0x50>)
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 80047c6:	2680      	movs	r6, #128	; 0x80
BOS_Status UpdateMyPortsDir(void){
 80047c8:	2500      	movs	r5, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80047ca:	2401      	movs	r4, #1
 80047cc:	4698      	mov	r8, r3
BOS_Status UpdateMyPortsDir(void){
 80047ce:	b500      	push	{lr}
 80047d0:	4f10      	ldr	r7, [pc, #64]	; (8004814 <UpdateMyPortsDir+0x54>)
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 80047d2:	0236      	lsls	r6, r6, #8
 80047d4:	4642      	mov	r2, r8
 80047d6:	783b      	ldrb	r3, [r7, #0]
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
 80047d8:	0020      	movs	r0, r4
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 80047da:	3b01      	subs	r3, #1
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	5ad3      	ldrh	r3, [r2, r3]
 80047e0:	0032      	movs	r2, r6
 80047e2:	412a      	asrs	r2, r5
 80047e4:	421a      	tst	r2, r3
 80047e6:	d10d      	bne.n	8004804 <UpdateMyPortsDir+0x44>
			SwapUartPins(GetUart(p),NORMAL);
 80047e8:	f009 fc66 	bl	800e0b8 <GetUart>
 80047ec:	2100      	movs	r1, #0
 80047ee:	f009 fc6f 	bl	800e0d0 <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80047f2:	3401      	adds	r4, #1
 80047f4:	b2e4      	uxtb	r4, r4
 80047f6:	3501      	adds	r5, #1
 80047f8:	2c06      	cmp	r4, #6
 80047fa:	d1eb      	bne.n	80047d4 <UpdateMyPortsDir+0x14>
			SwapUartPins(GetUart(p),REVERSED);
		}
	}
	
	return result;
}
 80047fc:	2000      	movs	r0, #0
 80047fe:	bc04      	pop	{r2}
 8004800:	4690      	mov	r8, r2
 8004802:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SwapUartPins(GetUart(p),REVERSED);
 8004804:	f009 fc58 	bl	800e0b8 <GetUart>
 8004808:	2101      	movs	r1, #1
 800480a:	f009 fc61 	bl	800e0d0 <SwapUartPins>
 800480e:	e7f0      	b.n	80047f2 <UpdateMyPortsDir+0x32>
 8004810:	20007140 	.word	0x20007140
 8004814:	20000a98 	.word	0x20000a98

08004818 <BOS_Init>:
void BOS_Init(void){
 8004818:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 800481a:	f009 f8fd 	bl	800da18 <RTC_Init>
	GetTimeDate();
 800481e:	f009 f9a1 	bl	800db64 <GetTimeDate>
	EE_Init();
 8004822:	f003 fa55 	bl	8007cd0 <EE_Init>
	GPIO_Init();
 8004826:	f008 fe5f 	bl	800d4e8 <GPIO_Init>
	DMA_Init();
 800482a:	f007 fe1b 	bl	800c464 <DMA_Init>
	TIM_USEC_Init();
 800482e:	f009 f9cb 	bl	800dbc8 <TIM_USEC_Init>
	CRC_Init();
 8004832:	f008 fe19 	bl	800d468 <CRC_Init>
	TIM_MSEC_Init();
 8004836:	f009 f9f9 	bl	800dc2c <TIM_MSEC_Init>
	if(IsFactoryReset()){
 800483a:	f008 ff07 	bl	800d64c <IsFactoryReset>
 800483e:	2800      	cmp	r0, #0
 8004840:	d162      	bne.n	8004908 <BOS_Init+0xf0>
	if(IsLowerCLIbaud()){
 8004842:	f7ff f83b 	bl	80038bc <IsLowerCLIbaud>
 8004846:	2800      	cmp	r0, #0
 8004848:	d053      	beq.n	80048f2 <BOS_Init+0xda>
		CLI_LOW_Baudrate_Flag =1;
 800484a:	2322      	movs	r3, #34	; 0x22
 800484c:	2101      	movs	r1, #1
 800484e:	4a38      	ldr	r2, [pc, #224]	; (8004930 <BOS_Init+0x118>)
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004850:	2032      	movs	r0, #50	; 0x32
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004852:	2401      	movs	r4, #1
		CLI_LOW_Baudrate_Flag =1;
 8004854:	54d1      	strb	r1, [r2, r3]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004856:	f009 fa2b 	bl	800dcb0 <StartMilliDelay>
		Module_Peripheral_Init();
 800485a:	f006 ff69 	bl	800b730 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800485e:	21e1      	movs	r1, #225	; 0xe1
 8004860:	4d34      	ldr	r5, [pc, #208]	; (8004934 <BOS_Init+0x11c>)
			UpdateBaudrate(port,BOS.clibaudrate);
 8004862:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004864:	3401      	adds	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004866:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004868:	b2e4      	uxtb	r4, r4
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800486a:	60a9      	str	r1, [r5, #8]
			UpdateBaudrate(port,BOS.clibaudrate);
 800486c:	f009 fc12 	bl	800e094 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004870:	2c06      	cmp	r4, #6
 8004872:	d007      	beq.n	8004884 <BOS_Init+0x6c>
			UpdateBaudrate(port,BOS.clibaudrate);
 8004874:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004876:	3401      	adds	r4, #1
 8004878:	68a9      	ldr	r1, [r5, #8]
 800487a:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 800487c:	f009 fc0a 	bl	800e094 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004880:	2c06      	cmp	r4, #6
 8004882:	d1f7      	bne.n	8004874 <BOS_Init+0x5c>
	LoadEEvars();
 8004884:	f7fe fee4 	bl	8003650 <LoadEEvars>
	UpdateMyPortsDir();
 8004888:	f7ff ff9a 	bl	80047c0 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 800488c:	f008 fa88 	bl	800cda0 <SetupMessagingRxDMAs>
		IND_ON();
 8004890:	2180      	movs	r1, #128	; 0x80
 8004892:	2090      	movs	r0, #144	; 0x90
	if(myID == 0) /* Native module */
 8004894:	4b28      	ldr	r3, [pc, #160]	; (8004938 <BOS_Init+0x120>)
		IND_ON();
 8004896:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 8004898:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 800489a:	0109      	lsls	r1, r1, #4
 800489c:	05c0      	lsls	r0, r0, #23
	if(myID == 0) /* Native module */
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d02d      	beq.n	80048fe <BOS_Init+0xe6>
		IND_ON();
 80048a2:	f00d f96d 	bl	8011b80 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 80048a6:	20fa      	movs	r0, #250	; 0xfa
 80048a8:	0040      	lsls	r0, r0, #1
 80048aa:	f009 fa01 	bl	800dcb0 <StartMilliDelay>
		IND_OFF();
 80048ae:	2180      	movs	r1, #128	; 0x80
 80048b0:	2090      	movs	r0, #144	; 0x90
 80048b2:	2200      	movs	r2, #0
 80048b4:	0109      	lsls	r1, r1, #4
 80048b6:	05c0      	lsls	r0, r0, #23
 80048b8:	f00d f962 	bl	8011b80 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80048bc:	2064      	movs	r0, #100	; 0x64
 80048be:	f009 f9f7 	bl	800dcb0 <StartMilliDelay>
		IND_ON();
 80048c2:	2180      	movs	r1, #128	; 0x80
 80048c4:	2090      	movs	r0, #144	; 0x90
 80048c6:	2201      	movs	r2, #1
 80048c8:	05c0      	lsls	r0, r0, #23
 80048ca:	0109      	lsls	r1, r1, #4
 80048cc:	f00d f958 	bl	8011b80 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80048d0:	2064      	movs	r0, #100	; 0x64
 80048d2:	f009 f9ed 	bl	800dcb0 <StartMilliDelay>
		IND_OFF();
 80048d6:	2180      	movs	r1, #128	; 0x80
 80048d8:	2090      	movs	r0, #144	; 0x90
 80048da:	2200      	movs	r2, #0
 80048dc:	0109      	lsls	r1, r1, #4
 80048de:	05c0      	lsls	r0, r0, #23
 80048e0:	f00d f94e 	bl	8011b80 <HAL_GPIO_WritePin>
	ResetUartORE();
 80048e4:	f003 f864 	bl	80079b0 <ResetUartORE>
	BOS_initialized =1;
 80048e8:	2325      	movs	r3, #37	; 0x25
 80048ea:	2101      	movs	r1, #1
 80048ec:	4a13      	ldr	r2, [pc, #76]	; (800493c <BOS_Init+0x124>)
 80048ee:	54d1      	strb	r1, [r2, r3]
}
 80048f0:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80048f2:	2032      	movs	r0, #50	; 0x32
 80048f4:	f009 f9dc 	bl	800dcb0 <StartMilliDelay>
		Module_Peripheral_Init();
 80048f8:	f006 ff1a 	bl	800b730 <Module_Peripheral_Init>
 80048fc:	e7c2      	b.n	8004884 <BOS_Init+0x6c>
		IND_ON();
 80048fe:	f00d f93f 	bl	8011b80 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8004902:	20fa      	movs	r0, #250	; 0xfa
 8004904:	0040      	lsls	r0, r0, #1
 8004906:	e7e4      	b.n	80048d2 <BOS_Init+0xba>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 8004908:	4c0d      	ldr	r4, [pc, #52]	; (8004940 <BOS_Init+0x128>)
 800490a:	4d0e      	ldr	r5, [pc, #56]	; (8004944 <BOS_Init+0x12c>)
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	42ab      	cmp	r3, r5
 8004910:	d004      	beq.n	800491c <BOS_Init+0x104>
		if(EE_Format() == HAL_OK){
 8004912:	f003 f98d 	bl	8007c30 <EE_Format>
 8004916:	2800      	cmp	r0, #0
 8004918:	d100      	bne.n	800491c <BOS_Init+0x104>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 800491a:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800491c:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004920:	4b09      	ldr	r3, [pc, #36]	; (8004948 <BOS_Init+0x130>)
 8004922:	4a0a      	ldr	r2, [pc, #40]	; (800494c <BOS_Init+0x134>)
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	e7fd      	b.n	800492a <BOS_Init+0x112>
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	20000b18 	.word	0x20000b18
 8004934:	20006ccc 	.word	0x20006ccc
 8004938:	20000a98 	.word	0x20000a98
 800493c:	20000c18 	.word	0x20000c18
 8004940:	20007ff0 	.word	0x20007ff0
 8004944:	beefdead 	.word	0xbeefdead
 8004948:	e000ed00 	.word	0xe000ed00
 800494c:	05fa0004 	.word	0x05fa0004

08004950 <Module_Init>:
void Module_Init(void){
 8004950:	b510      	push	{r4, lr}
	HAL_Init();
 8004952:	f00b fbe7 	bl	8010124 <HAL_Init>
	SystemClock_Config();
 8004956:	f006 fd85 	bl	800b464 <SystemClock_Config>
	BOS_Init();
 800495a:	f7ff ff5d 	bl	8004818 <BOS_Init>
	MX_FREERTOS_Init();
 800495e:	f003 fb51 	bl	8008004 <MX_FREERTOS_Init>
	osKernelStart();
 8004962:	f009 fc67 	bl	800e234 <osKernelStart>
}
 8004966:	bd10      	pop	{r4, pc}

08004968 <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800496a:	4645      	mov	r5, r8
 800496c:	4657      	mov	r7, sl
 800496e:	464e      	mov	r6, r9
 8004970:	46de      	mov	lr, fp
 8004972:	b5e0      	push	{r5, r6, r7, lr}
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 8004974:	4f82      	ldr	r7, [pc, #520]	; (8004b80 <WriteToRemote+0x218>)
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004976:	b083      	sub	sp, #12
 8004978:	ac0c      	add	r4, sp, #48	; 0x30
 800497a:	cc40      	ldmia	r4!, {r6}
	response =BOSMessaging.response;
 800497c:	783d      	ldrb	r5, [r7, #0]
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800497e:	9001      	str	r0, [sp, #4]
 8004980:	7824      	ldrb	r4, [r4, #0]
	response =BOSMessaging.response;
 8004982:	46a8      	mov	r8, r5
	if(timeout)
 8004984:	2e00      	cmp	r6, #0
 8004986:	d059      	beq.n	8004a3c <WriteToRemote+0xd4>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 8004988:	2520      	movs	r5, #32
 800498a:	703d      	strb	r5, [r7, #0]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
		code = CODE_WRITE_REMOTE_FORCE;
 800498c:	4265      	negs	r5, r4
 800498e:	416c      	adcs	r4, r5
 8004990:	2501      	movs	r5, #1
 8004992:	2022      	movs	r0, #34	; 0x22
 8004994:	4264      	negs	r4, r4
 8004996:	43ac      	bics	r4, r5
 8004998:	46a3      	mov	fp, r4
 800499a:	4684      	mov	ip, r0
 800499c:	b2d5      	uxtb	r5, r2
 800499e:	46a9      	mov	r9, r5
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 80049a0:	4d78      	ldr	r5, [pc, #480]	; (8004b84 <WriteToRemote+0x21c>)
		code = CODE_WRITE_REMOTE_FORCE;
 80049a2:	44e3      	add	fp, ip
	if(remoteAddress < FLASH_BASE){
 80049a4:	42aa      	cmp	r2, r5
 80049a6:	d829      	bhi.n	80049fc <WriteToRemote+0x94>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 80049a8:	2224      	movs	r2, #36	; 0x24
 80049aa:	464c      	mov	r4, r9
 80049ac:	4d76      	ldr	r5, [pc, #472]	; (8004b88 <WriteToRemote+0x220>)
 80049ae:	54ac      	strb	r4, [r5, r2]
		messageParams[1] =format;						// Send local format
 80049b0:	002a      	movs	r2, r5
 80049b2:	3224      	adds	r2, #36	; 0x24
 80049b4:	7053      	strb	r3, [r2, #1]
		/* Send variable value based on local format */
		switch(format){
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d814      	bhi.n	80049e4 <WriteToRemote+0x7c>
 80049ba:	4a74      	ldr	r2, [pc, #464]	; (8004b8c <WriteToRemote+0x224>)
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	58d3      	ldr	r3, [r2, r3]
 80049c0:	469f      	mov	pc, r3
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
				SendMessageToModule(module,code,10);
				break;
			case FMT_INT32:
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80049c2:	680b      	ldr	r3, [r1, #0]
 80049c4:	3524      	adds	r5, #36	; 0x24
 80049c6:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80049c8:	680b      	ldr	r3, [r1, #0]
 80049ca:	121b      	asrs	r3, r3, #8
 80049cc:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80049ce:	680b      	ldr	r3, [r1, #0]
 80049d0:	141b      	asrs	r3, r3, #16
 80049d2:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80049d4:	680b      	ldr	r3, [r1, #0]
 80049d6:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,code,10);
 80049d8:	220a      	movs	r2, #10
 80049da:	4659      	mov	r1, fp
 80049dc:	9801      	ldr	r0, [sp, #4]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80049de:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,code,10);
 80049e0:	f004 ff2c 	bl	800983c <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 80049e4:	4643      	mov	r3, r8
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 80049e6:	2000      	movs	r0, #0
	BOSMessaging.response =response;
 80049e8:	703b      	strb	r3, [r7, #0]
	if(timeout){
 80049ea:	2e00      	cmp	r6, #0
 80049ec:	d128      	bne.n	8004a40 <WriteToRemote+0xd8>
}
 80049ee:	b003      	add	sp, #12
 80049f0:	bc3c      	pop	{r2, r3, r4, r5}
 80049f2:	4690      	mov	r8, r2
 80049f4:	4699      	mov	r9, r3
 80049f6:	46a2      	mov	sl, r4
 80049f8:	46ab      	mov	fp, r5
 80049fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		messageParams[0] =0;
 80049fc:	2024      	movs	r0, #36	; 0x24
 80049fe:	4684      	mov	ip, r0
 8004a00:	2000      	movs	r0, #0
 8004a02:	4682      	mov	sl, r0
 8004a04:	4660      	mov	r0, ip
 8004a06:	4654      	mov	r4, sl
 8004a08:	4d5f      	ldr	r5, [pc, #380]	; (8004b88 <WriteToRemote+0x220>)
		messageParams[1] =format;							// Local format
 8004a0a:	44ac      	add	ip, r5
		messageParams[0] =0;
 8004a0c:	542c      	strb	r4, [r5, r0]
		messageParams[1] =format;							// Local format
 8004a0e:	4660      	mov	r0, ip
 8004a10:	7043      	strb	r3, [r0, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 8004a12:	0e10      	lsrs	r0, r2, #24
 8004a14:	4682      	mov	sl, r0
 8004a16:	4660      	mov	r0, ip
 8004a18:	4654      	mov	r4, sl
 8004a1a:	7084      	strb	r4, [r0, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 8004a1c:	0c10      	lsrs	r0, r2, #16
 8004a1e:	4682      	mov	sl, r0
 8004a20:	4660      	mov	r0, ip
 8004a22:	4654      	mov	r4, sl
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 8004a24:	0a12      	lsrs	r2, r2, #8
 8004a26:	7102      	strb	r2, [r0, #4]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 8004a28:	70c4      	strb	r4, [r0, #3]
		messageParams[5] =(uint8_t )remoteAddress;
 8004a2a:	4662      	mov	r2, ip
 8004a2c:	4648      	mov	r0, r9
 8004a2e:	7150      	strb	r0, [r2, #5]
		switch(format){
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d8d7      	bhi.n	80049e4 <WriteToRemote+0x7c>
 8004a34:	4a56      	ldr	r2, [pc, #344]	; (8004b90 <WriteToRemote+0x228>)
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	58d3      	ldr	r3, [r2, r3]
 8004a3a:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 8004a3c:	703e      	strb	r6, [r7, #0]
 8004a3e:	e7a5      	b.n	800498c <WriteToRemote+0x24>
		uint32_t t0 =HAL_GetTick();
 8004a40:	f00b fb88 	bl	8010154 <HAL_GetTick>
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 8004a44:	2424      	movs	r4, #36	; 0x24
		uint32_t t0 =HAL_GetTick();
 8004a46:	0007      	movs	r7, r0
 8004a48:	4d52      	ldr	r5, [pc, #328]	; (8004b94 <WriteToRemote+0x22c>)
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 8004a4a:	5d28      	ldrb	r0, [r5, r4]
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d0ce      	beq.n	80049ee <WriteToRemote+0x86>
 8004a50:	f00b fb80 	bl	8010154 <HAL_GetTick>
 8004a54:	1bc0      	subs	r0, r0, r7
 8004a56:	42b0      	cmp	r0, r6
 8004a58:	d3f7      	bcc.n	8004a4a <WriteToRemote+0xe2>
 8004a5a:	5d28      	ldrb	r0, [r5, r4]
		return responseStatus;
 8004a5c:	e7c7      	b.n	80049ee <WriteToRemote+0x86>
				messageParams[2] =*(__IO int8_t* )localAddress;
 8004a5e:	780b      	ldrb	r3, [r1, #0]
 8004a60:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 8004a62:	2203      	movs	r2, #3
 8004a64:	2120      	movs	r1, #32
 8004a66:	9801      	ldr	r0, [sp, #4]
				messageParams[2] =*(__IO int8_t* )localAddress;
 8004a68:	70ab      	strb	r3, [r5, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 8004a6a:	f004 fee7 	bl	800983c <SendMessageToModule>
				break;
 8004a6e:	e7b9      	b.n	80049e4 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO int8_t* )localAddress;
 8004a70:	780b      	ldrb	r3, [r1, #0]
 8004a72:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,code,7);
 8004a74:	2207      	movs	r2, #7
 8004a76:	4659      	mov	r1, fp
 8004a78:	9801      	ldr	r0, [sp, #4]
				messageParams[6] =*(__IO int8_t* )localAddress;
 8004a7a:	71ab      	strb	r3, [r5, #6]
				SendMessageToModule(module,code,7);
 8004a7c:	f004 fede 	bl	800983c <SendMessageToModule>
				break;
 8004a80:	e7b0      	b.n	80049e4 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 8004a82:	680b      	ldr	r3, [r1, #0]
 8004a84:	3524      	adds	r5, #36	; 0x24
 8004a86:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 8004a88:	680b      	ldr	r3, [r1, #0]
 8004a8a:	0a1b      	lsrs	r3, r3, #8
 8004a8c:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 8004a8e:	680b      	ldr	r3, [r1, #0]
 8004a90:	0c1b      	lsrs	r3, r3, #16
 8004a92:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004a94:	680b      	ldr	r3, [r1, #0]
 8004a96:	0e1b      	lsrs	r3, r3, #24
 8004a98:	e79e      	b.n	80049d8 <WriteToRemote+0x70>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 8004a9a:	780b      	ldrb	r3, [r1, #0]
 8004a9c:	3524      	adds	r5, #36	; 0x24
 8004a9e:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004aa0:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004aa2:	220a      	movs	r2, #10
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004aa4:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 8004aa6:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004aa8:	9801      	ldr	r0, [sp, #4]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 8004aaa:	712b      	strb	r3, [r5, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 8004aac:	78cb      	ldrb	r3, [r1, #3]
 8004aae:	716b      	strb	r3, [r5, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 8004ab0:	790b      	ldrb	r3, [r1, #4]
 8004ab2:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 8004ab4:	794b      	ldrb	r3, [r1, #5]
 8004ab6:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 8004ab8:	798b      	ldrb	r3, [r1, #6]
 8004aba:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004abc:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004abe:	2120      	movs	r1, #32
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004ac0:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004ac2:	f004 febb 	bl	800983c <SendMessageToModule>
				break;
 8004ac6:	e78d      	b.n	80049e4 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 8004ac8:	780b      	ldrb	r3, [r1, #0]
 8004aca:	3524      	adds	r5, #36	; 0x24
 8004acc:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004ace:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,code,14);
 8004ad0:	220e      	movs	r2, #14
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004ad2:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004ad4:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,code,14);
 8004ad6:	9801      	ldr	r0, [sp, #4]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004ad8:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 8004ada:	78cb      	ldrb	r3, [r1, #3]
 8004adc:	726b      	strb	r3, [r5, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 8004ade:	790b      	ldrb	r3, [r1, #4]
 8004ae0:	72ab      	strb	r3, [r5, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 8004ae2:	794b      	ldrb	r3, [r1, #5]
 8004ae4:	72eb      	strb	r3, [r5, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 8004ae6:	798b      	ldrb	r3, [r1, #6]
 8004ae8:	732b      	strb	r3, [r5, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004aea:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,code,14);
 8004aec:	4659      	mov	r1, fp
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004aee:	736b      	strb	r3, [r5, #13]
				SendMessageToModule(module,code,14);
 8004af0:	f004 fea4 	bl	800983c <SendMessageToModule>
				break;
 8004af4:	e776      	b.n	80049e4 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 8004af6:	880b      	ldrh	r3, [r1, #0]
 8004af8:	3524      	adds	r5, #36	; 0x24
 8004afa:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004afc:	880b      	ldrh	r3, [r1, #0]
 8004afe:	b21b      	sxth	r3, r3
 8004b00:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,code,8);
 8004b02:	2208      	movs	r2, #8
 8004b04:	4659      	mov	r1, fp
 8004b06:	9801      	ldr	r0, [sp, #4]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004b08:	71eb      	strb	r3, [r5, #7]
				SendMessageToModule(module,code,8);
 8004b0a:	f004 fe97 	bl	800983c <SendMessageToModule>
				break;
 8004b0e:	e769      	b.n	80049e4 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 8004b10:	880b      	ldrh	r3, [r1, #0]
 8004b12:	3524      	adds	r5, #36	; 0x24
 8004b14:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 8004b16:	880b      	ldrh	r3, [r1, #0]
 8004b18:	0a1b      	lsrs	r3, r3, #8
 8004b1a:	e7f2      	b.n	8004b02 <WriteToRemote+0x19a>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 8004b1c:	680b      	ldr	r3, [r1, #0]
 8004b1e:	3524      	adds	r5, #36	; 0x24
 8004b20:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 8004b22:	680b      	ldr	r3, [r1, #0]
 8004b24:	121b      	asrs	r3, r3, #8
 8004b26:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 8004b28:	680b      	ldr	r3, [r1, #0]
 8004b2a:	141b      	asrs	r3, r3, #16
 8004b2c:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004b2e:	680b      	ldr	r3, [r1, #0]
 8004b30:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 8004b32:	2206      	movs	r2, #6
 8004b34:	2120      	movs	r1, #32
 8004b36:	9801      	ldr	r0, [sp, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004b38:	716b      	strb	r3, [r5, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 8004b3a:	f004 fe7f 	bl	800983c <SendMessageToModule>
				break;
 8004b3e:	e751      	b.n	80049e4 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 8004b40:	680b      	ldr	r3, [r1, #0]
 8004b42:	3524      	adds	r5, #36	; 0x24
 8004b44:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 8004b46:	680b      	ldr	r3, [r1, #0]
 8004b48:	0a1b      	lsrs	r3, r3, #8
 8004b4a:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 8004b4c:	680b      	ldr	r3, [r1, #0]
 8004b4e:	0c1b      	lsrs	r3, r3, #16
 8004b50:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004b52:	680b      	ldr	r3, [r1, #0]
 8004b54:	0e1b      	lsrs	r3, r3, #24
 8004b56:	e7ec      	b.n	8004b32 <WriteToRemote+0x1ca>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 8004b58:	880b      	ldrh	r3, [r1, #0]
 8004b5a:	3524      	adds	r5, #36	; 0x24
 8004b5c:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004b5e:	880b      	ldrh	r3, [r1, #0]
 8004b60:	b21b      	sxth	r3, r3
 8004b62:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004b64:	2204      	movs	r2, #4
 8004b66:	2120      	movs	r1, #32
 8004b68:	9801      	ldr	r0, [sp, #4]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004b6a:	70eb      	strb	r3, [r5, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004b6c:	f004 fe66 	bl	800983c <SendMessageToModule>
				break;
 8004b70:	e738      	b.n	80049e4 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 8004b72:	880b      	ldrh	r3, [r1, #0]
 8004b74:	3524      	adds	r5, #36	; 0x24
 8004b76:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 8004b78:	880b      	ldrh	r3, [r1, #0]
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	e7f2      	b.n	8004b64 <WriteToRemote+0x1fc>
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	20006c4c 	.word	0x20006c4c
 8004b84:	07ffffff 	.word	0x07ffffff
 8004b88:	20000b18 	.word	0x20000b18
 8004b8c:	080187dc 	.word	0x080187dc
 8004b90:	08018800 	.word	0x08018800
 8004b94:	20000c18 	.word	0x20000c18

08004b98 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004b98:	b530      	push	{r4, r5, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004b9a:	2101      	movs	r1, #1
char* GetDateString(void){
 8004b9c:	b083      	sub	sp, #12
	char *buffer =malloc(30 * sizeof(int8_t));
 8004b9e:	201e      	movs	r0, #30
 8004ba0:	f00e ff84 	bl	8013aac <calloc>
 8004ba4:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004ba6:	4809      	ldr	r0, [pc, #36]	; (8004bcc <GetDateString+0x34>)
 8004ba8:	4909      	ldr	r1, [pc, #36]	; (8004bd0 <GetDateString+0x38>)
 8004baa:	7d02      	ldrb	r2, [r0, #20]
 8004bac:	8b05      	ldrh	r5, [r0, #24]
 8004bae:	7d83      	ldrb	r3, [r0, #22]
 8004bb0:	3a01      	subs	r2, #1
 8004bb2:	9501      	str	r5, [sp, #4]
 8004bb4:	7d40      	ldrb	r0, [r0, #21]
 8004bb6:	0092      	lsls	r2, r2, #2
 8004bb8:	188a      	adds	r2, r1, r2
 8004bba:	9000      	str	r0, [sp, #0]
 8004bbc:	6912      	ldr	r2, [r2, #16]
 8004bbe:	312c      	adds	r1, #44	; 0x2c
 8004bc0:	0020      	movs	r0, r4
 8004bc2:	f00f fc2f 	bl	8014424 <sprintf>
	return buffer;
}
 8004bc6:	0020      	movs	r0, r4
 8004bc8:	b003      	add	sp, #12
 8004bca:	bd30      	pop	{r4, r5, pc}
 8004bcc:	20006ccc 	.word	0x20006ccc
 8004bd0:	08018824 	.word	0x08018824

08004bd4 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004bd4:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004bd8:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004bda:	7819      	ldrb	r1, [r3, #0]
 8004bdc:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004bde:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004be0:	9303      	str	r3, [sp, #12]
 8004be2:	3b02      	subs	r3, #2
 8004be4:	9302      	str	r3, [sp, #8]
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	3303      	adds	r3, #3
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	000b      	movs	r3, r1
 8004bee:	f004 fe49 	bl	8009884 <StartScastDMAStream>
}
 8004bf2:	b005      	add	sp, #20
 8004bf4:	bd00      	pop	{pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	20000a98 	.word	0x20000a98

08004bfc <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004bfc:	2300      	movs	r3, #0
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 8004bfe:	b530      	push	{r4, r5, lr}
 8004c00:	0004      	movs	r4, r0
 8004c02:	000d      	movs	r5, r1
 8004c04:	b087      	sub	sp, #28
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004c06:	9304      	str	r3, [sp, #16]
 8004c08:	9303      	str	r3, [sp, #12]
 8004c0a:	9302      	str	r3, [sp, #8]
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	2200      	movs	r2, #0
 8004c12:	2100      	movs	r1, #0
 8004c14:	2000      	movs	r0, #0
 8004c16:	f7fe fd99 	bl	800374c <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 8004c1a:	1e60      	subs	r0, r4, #1
 8004c1c:	00c3      	lsls	r3, r0, #3
 8004c1e:	4912      	ldr	r1, [pc, #72]	; (8004c68 <Unbridge+0x6c>)
 8004c20:	1a1b      	subs	r3, r3, r0
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	585b      	ldr	r3, [r3, r1]
 8004c26:	1e6a      	subs	r2, r5, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d012      	beq.n	8004c52 <Unbridge+0x56>
 8004c2c:	00d3      	lsls	r3, r2, #3
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	585b      	ldr	r3, [r3, r1]
		SwitchStreamDMAToMsg(port1);
 8004c34:	0020      	movs	r0, r4
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <Unbridge+0x48>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 8004c3a:	f002 fe15 	bl	8007868 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004c3e:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004c40:	b007      	add	sp, #28
 8004c42:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 8004c44:	f002 fe10 	bl	8007868 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 8004c48:	0028      	movs	r0, r5
 8004c4a:	f002 fe0d 	bl	8007868 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e7f6      	b.n	8004c40 <Unbridge+0x44>
	else if(streamDMA[port2 - 1].Instance != 0){
 8004c52:	00d3      	lsls	r3, r2, #3
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	585b      	ldr	r3, [r3, r1]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <Unbridge+0x66>
		SwitchStreamDMAToMsg(port2);
 8004c5e:	0028      	movs	r0, r5
 8004c60:	e7eb      	b.n	8004c3a <Unbridge+0x3e>
		return BOS_ERR_WrongValue;
 8004c62:	2068      	movs	r0, #104	; 0x68
 8004c64:	e7ec      	b.n	8004c40 <Unbridge+0x44>
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	20001a9c 	.word	0x20001a9c

08004c6c <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 8004c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c6e:	46d6      	mov	lr, sl
 8004c70:	4646      	mov	r6, r8
 8004c72:	464f      	mov	r7, r9
 8004c74:	b5c0      	push	{r6, r7, lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004c76:	4e27      	ldr	r6, [pc, #156]	; (8004d14 <AddSnippet.part.0+0xa8>)
 8004c78:	4d27      	ldr	r5, [pc, #156]	; (8004d18 <AddSnippet.part.0+0xac>)
 8004c7a:	7833      	ldrb	r3, [r6, #0]
BOS_Status AddSnippet(uint8_t code,char *string){
 8004c7c:	4680      	mov	r8, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	009c      	lsls	r4, r3, #2
 8004c82:	18e4      	adds	r4, r4, r3
 8004c84:	00a4      	lsls	r4, r4, #2
 8004c86:	192c      	adds	r4, r5, r4
 8004c88:	68e3      	ldr	r3, [r4, #12]
 8004c8a:	469a      	mov	sl, r3
 8004c8c:	f7fb fa44 	bl	8000118 <strlen>
 8004c90:	4653      	mov	r3, sl
 8004c92:	4681      	mov	r9, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d02e      	beq.n	8004cf6 <AddSnippet.part.0+0x8a>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004c98:	4650      	mov	r0, sl
 8004c9a:	f7fb fa3d 	bl	8000118 <strlen>
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	3102      	adds	r1, #2
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004ca2:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004ca4:	1809      	adds	r1, r1, r0
 8004ca6:	4650      	mov	r0, sl
 8004ca8:	f00f f9f4 	bl	8014094 <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004cac:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004cae:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004cb0:	3a01      	subs	r2, #1
 8004cb2:	0093      	lsls	r3, r2, #2
 8004cb4:	189b      	adds	r3, r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	18eb      	adds	r3, r5, r3
 8004cba:	68d8      	ldr	r0, [r3, #12]
 8004cbc:	1c7a      	adds	r2, r7, #1
 8004cbe:	1880      	adds	r0, r0, r2
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	f00f fbeb 	bl	801449c <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004cc6:	7832      	ldrb	r2, [r6, #0]
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	0093      	lsls	r3, r2, #2
 8004ccc:	189b      	adds	r3, r3, r2
 8004cce:	2213      	movs	r2, #19
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	18eb      	adds	r3, r5, r3
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	55da      	strb	r2, [r3, r7]
 8004cd8:	7833      	ldrb	r3, [r6, #0]
 8004cda:	3b01      	subs	r3, #1
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004cdc:	0098      	lsls	r0, r3, #2
 8004cde:	18c0      	adds	r0, r0, r3
 8004ce0:	0080      	lsls	r0, r0, #2
 8004ce2:	1828      	adds	r0, r5, r0
 8004ce4:	68c3      	ldr	r3, [r0, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00d      	beq.n	8004d06 <AddSnippet.part.0+0x9a>
			
		default:
			break;
	}
	
	return BOS_OK;
 8004cea:	2000      	movs	r0, #0
}
 8004cec:	bc1c      	pop	{r2, r3, r4}
 8004cee:	4690      	mov	r8, r2
 8004cf0:	4699      	mov	r9, r3
 8004cf2:	46a2      	mov	sl, r4
 8004cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	f00e ff44 	bl	8013b84 <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004cfc:	4641      	mov	r1, r8
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004cfe:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004d00:	f00f fbcc 	bl	801449c <strcpy>
 8004d04:	e7f1      	b.n	8004cea <AddSnippet.part.0+0x7e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004d06:	2214      	movs	r2, #20
 8004d08:	2100      	movs	r1, #0
 8004d0a:	f00f f991 	bl	8014030 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004d0e:	200e      	movs	r0, #14
 8004d10:	e7ec      	b.n	8004cec <AddSnippet.part.0+0x80>
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	20001140 	.word	0x20001140
 8004d18:	20006ce8 	.word	0x20006ce8

08004d1c <StringToLowerCase>:
void StringToLowerCase(char *string){
 8004d1c:	b570      	push	{r4, r5, r6, lr}
	for(int i =0; string[i]; i++){
 8004d1e:	7804      	ldrb	r4, [r0, #0]
void StringToLowerCase(char *string){
 8004d20:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 8004d22:	2c00      	cmp	r4, #0
 8004d24:	d00d      	beq.n	8004d42 <StringToLowerCase+0x26>
		string[i] =tolower(string[i]);
 8004d26:	2603      	movs	r6, #3
 8004d28:	f00e ff1e 	bl	8013b68 <__locale_ctype_ptr>
 8004d2c:	1900      	adds	r0, r0, r4
 8004d2e:	7842      	ldrb	r2, [r0, #1]
 8004d30:	4032      	ands	r2, r6
 8004d32:	2a01      	cmp	r2, #1
 8004d34:	d100      	bne.n	8004d38 <StringToLowerCase+0x1c>
 8004d36:	3420      	adds	r4, #32
 8004d38:	702c      	strb	r4, [r5, #0]
 8004d3a:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 8004d3c:	782c      	ldrb	r4, [r5, #0]
 8004d3e:	2c00      	cmp	r4, #0
 8004d40:	d1f2      	bne.n	8004d28 <StringToLowerCase+0xc>
}
 8004d42:	bd70      	pop	{r4, r5, r6, pc}

08004d44 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d46:	4657      	mov	r7, sl
 8004d48:	464e      	mov	r6, r9
 8004d4a:	46de      	mov	lr, fp
 8004d4c:	4645      	mov	r5, r8
 8004d4e:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004d50:	4ed8      	ldr	r6, [pc, #864]	; (80050b4 <ParseSnippetCondition+0x370>)
BOS_Status ParseSnippetCondition(char *string){
 8004d52:	b08b      	sub	sp, #44	; 0x2c
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004d54:	7834      	ldrb	r4, [r6, #0]
BOS_Status ParseSnippetCondition(char *string){
 8004d56:	0007      	movs	r7, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004d58:	2c05      	cmp	r4, #5
 8004d5a:	d067      	beq.n	8004e2c <ParseSnippetCondition+0xe8>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004d5c:	00a3      	lsls	r3, r4, #2
 8004d5e:	4dd6      	ldr	r5, [pc, #856]	; (80050b8 <ParseSnippetCondition+0x374>)
 8004d60:	1918      	adds	r0, r3, r4
 8004d62:	0080      	lsls	r0, r0, #2
 8004d64:	469a      	mov	sl, r3
 8004d66:	182b      	adds	r3, r5, r0
 8004d68:	4699      	mov	r9, r3
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	464a      	mov	r2, r9
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004d6e:	3002      	adds	r0, #2
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004d70:	8013      	strh	r3, [r2, #0]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004d72:	1828      	adds	r0, r5, r0
 8004d74:	2204      	movs	r2, #4
 8004d76:	2100      	movs	r1, #0
 8004d78:	f00f f95a 	bl	8014030 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004d7c:	783b      	ldrb	r3, [r7, #0]
 8004d7e:	2b62      	cmp	r3, #98	; 0x62
 8004d80:	d102      	bne.n	8004d88 <ParseSnippetCondition+0x44>
 8004d82:	78bb      	ldrb	r3, [r7, #2]
 8004d84:	2b2e      	cmp	r3, #46	; 0x2e
 8004d86:	d057      	beq.n	8004e38 <ParseSnippetCondition+0xf4>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004d88:	1d33      	adds	r3, r6, #4
 8004d8a:	4698      	mov	r8, r3
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	0039      	movs	r1, r7
 8004d90:	f00f fb84 	bl	801449c <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004d94:	4cc9      	ldr	r4, [pc, #804]	; (80050bc <ParseSnippetCondition+0x378>)
 8004d96:	4640      	mov	r0, r8
 8004d98:	0021      	movs	r1, r4
 8004d9a:	f010 f9ff 	bl	801519c <strtok>
		secondPart =strtok( NULL," ");
 8004d9e:	0021      	movs	r1, r4
		firstPart =strtok((char* )cInputString," ");
 8004da0:	0007      	movs	r7, r0
		secondPart =strtok( NULL," ");
 8004da2:	2000      	movs	r0, #0
 8004da4:	f010 f9fa 	bl	801519c <strtok>
		thirdPart =strtok( NULL," ");
 8004da8:	0021      	movs	r1, r4
		secondPart =strtok( NULL," ");
 8004daa:	4680      	mov	r8, r0
		thirdPart =strtok( NULL," ");
 8004dac:	2000      	movs	r0, #0
 8004dae:	f010 f9f5 	bl	801519c <strtok>
 8004db2:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004db4:	2f00      	cmp	r7, #0
 8004db6:	d02f      	beq.n	8004e18 <ParseSnippetCondition+0xd4>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004db8:	0038      	movs	r0, r7
 8004dba:	f7fe fddf 	bl	800397c <IsModuleParameter>
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004dbe:	4643      	mov	r3, r8
			modPar1 =IsModuleParameter(firstPart);
 8004dc0:	1e07      	subs	r7, r0, #0
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004dc2:	d036      	beq.n	8004e32 <ParseSnippetCondition+0xee>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d024      	beq.n	8004e12 <ParseSnippetCondition+0xce>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004dc8:	2c00      	cmp	r4, #0
 8004dca:	d025      	beq.n	8004e18 <ParseSnippetCondition+0xd4>
				modPar2 =IsModuleParameter(thirdPart);
 8004dcc:	0020      	movs	r0, r4
 8004dce:	f7fe fdd5 	bl	800397c <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d06b      	beq.n	8004eae <ParseSnippetCondition+0x16a>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004dd6:	2204      	movs	r2, #4
 8004dd8:	7833      	ldrb	r3, [r6, #0]
 8004dda:	009c      	lsls	r4, r3, #2
 8004ddc:	4699      	mov	r9, r3
 8004dde:	18e3      	adds	r3, r4, r3
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004de4:	18eb      	adds	r3, r5, r3
 8004de6:	70df      	strb	r7, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004de8:	71d8      	strb	r0, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004dea:	4640      	mov	r0, r8
 8004dec:	f7fe fdd2 	bl	8003994 <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004df0:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004df2:	444c      	add	r4, r9
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004df4:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004df6:	00a4      	lsls	r4, r4, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004df8:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004dfa:	192c      	adds	r4, r5, r4
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004dfc:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004dfe:	7060      	strb	r0, [r4, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004e00:	18ed      	adds	r5, r5, r3
 8004e02:	786b      	ldrb	r3, [r5, #1]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d007      	beq.n	8004e18 <ParseSnippetCondition+0xd4>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8004e08:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004e0a:	3201      	adds	r2, #1
 8004e0c:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004e0e:	4698      	mov	r8, r3
 8004e10:	e004      	b.n	8004e1c <ParseSnippetCondition+0xd8>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004e12:	2c00      	cmp	r4, #0
 8004e14:	d100      	bne.n	8004e18 <ParseSnippetCondition+0xd4>
 8004e16:	e07f      	b.n	8004f18 <ParseSnippetCondition+0x1d4>
			return BOS_ERR_WrongParam;
 8004e18:	2367      	movs	r3, #103	; 0x67
 8004e1a:	4698      	mov	r8, r3
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004e1c:	4640      	mov	r0, r8
 8004e1e:	b00b      	add	sp, #44	; 0x2c
 8004e20:	bc3c      	pop	{r2, r3, r4, r5}
 8004e22:	4690      	mov	r8, r2
 8004e24:	4699      	mov	r9, r3
 8004e26:	46a2      	mov	sl, r4
 8004e28:	46ab      	mov	fp, r5
 8004e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_SNIP_MEM_FULL;
 8004e2c:	230e      	movs	r3, #14
 8004e2e:	4698      	mov	r8, r3
 8004e30:	e7f4      	b.n	8004e1c <ParseSnippetCondition+0xd8>
			else if(secondPart != NULL && thirdPart != NULL){
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1c8      	bne.n	8004dc8 <ParseSnippetCondition+0x84>
 8004e36:	e7ef      	b.n	8004e18 <ParseSnippetCondition+0xd4>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004e38:	787b      	ldrb	r3, [r7, #1]
 8004e3a:	3b30      	subs	r3, #48	; 0x30
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	469b      	mov	fp, r3
	BOS_Status status =BOS_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	4698      	mov	r8, r3
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004e44:	465b      	mov	r3, fp
 8004e46:	2b05      	cmp	r3, #5
 8004e48:	d8e8      	bhi.n	8004e1c <ParseSnippetCondition+0xd8>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004e4e:	4658      	mov	r0, fp
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004e50:	800b      	strh	r3, [r1, #0]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004e52:	1cfb      	adds	r3, r7, #3
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004e54:	7088      	strb	r0, [r1, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004e56:	2207      	movs	r2, #7
 8004e58:	4999      	ldr	r1, [pc, #612]	; (80050c0 <ParseSnippetCondition+0x37c>)
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	9307      	str	r3, [sp, #28]
 8004e5e:	f00f fb25 	bl	80144ac <strncmp>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d03d      	beq.n	8004ee2 <ParseSnippetCondition+0x19e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004e66:	220e      	movs	r2, #14
 8004e68:	4996      	ldr	r1, [pc, #600]	; (80050c4 <ParseSnippetCondition+0x380>)
 8004e6a:	9807      	ldr	r0, [sp, #28]
 8004e6c:	f00f fb1e 	bl	80144ac <strncmp>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d15e      	bne.n	8004f32 <ParseSnippetCondition+0x1ee>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004e74:	2306      	movs	r3, #6
 8004e76:	464a      	mov	r2, r9
 8004e78:	70d3      	strb	r3, [r2, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004e7a:	465b      	mov	r3, fp
 8004e7c:	00da      	lsls	r2, r3, #3
 8004e7e:	4b92      	ldr	r3, [pc, #584]	; (80050c8 <ParseSnippetCondition+0x384>)
 8004e80:	445a      	add	r2, fp
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	7a1b      	ldrb	r3, [r3, #8]
 8004e86:	079b      	lsls	r3, r3, #30
 8004e88:	d40e      	bmi.n	8004ea8 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	9305      	str	r3, [sp, #20]
 8004e8e:	4643      	mov	r3, r8
 8004e90:	2201      	movs	r2, #1
 8004e92:	9304      	str	r3, [sp, #16]
 8004e94:	9303      	str	r3, [sp, #12]
 8004e96:	9302      	str	r3, [sp, #8]
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	4658      	mov	r0, fp
 8004ea2:	f003 facd 	bl	8008440 <SetButtonEvents>
 8004ea6:	7834      	ldrb	r4, [r6, #0]
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004ea8:	3401      	adds	r4, #1
 8004eaa:	7034      	strb	r4, [r6, #0]
 8004eac:	e7b6      	b.n	8004e1c <ParseSnippetCondition+0xd8>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004eae:	7832      	ldrb	r2, [r6, #0]
					float constant =atof(thirdPart);
 8004eb0:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004eb2:	0093      	lsls	r3, r2, #2
 8004eb4:	189b      	adds	r3, r3, r2
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004ebc:	18eb      	adds	r3, r5, r3
 8004ebe:	70df      	strb	r7, [r3, #3]
					float constant =atof(thirdPart);
 8004ec0:	f00e fde2 	bl	8013a88 <atof>
 8004ec4:	f7fd ffb6 	bl	8002e34 <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004ec8:	7833      	ldrb	r3, [r6, #0]
					float constant =atof(thirdPart);
 8004eca:	9009      	str	r0, [sp, #36]	; 0x24
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004ecc:	009c      	lsls	r4, r3, #2
 8004ece:	18e0      	adds	r0, r4, r3
 8004ed0:	0080      	lsls	r0, r0, #2
 8004ed2:	3006      	adds	r0, #6
 8004ed4:	1828      	adds	r0, r5, r0
 8004ed6:	2204      	movs	r2, #4
 8004ed8:	a909      	add	r1, sp, #36	; 0x24
 8004eda:	4699      	mov	r9, r3
 8004edc:	f00f f89f 	bl	801401e <memcpy>
 8004ee0:	e783      	b.n	8004dea <ParseSnippetCondition+0xa6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004ee2:	2305      	movs	r3, #5
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	70cb      	strb	r3, [r1, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004ee8:	4659      	mov	r1, fp
 8004eea:	4b77      	ldr	r3, [pc, #476]	; (80050c8 <ParseSnippetCondition+0x384>)
 8004eec:	00ca      	lsls	r2, r1, #3
 8004eee:	445a      	add	r2, fp
 8004ef0:	189b      	adds	r3, r3, r2
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	7a1b      	ldrb	r3, [r3, #8]
 8004ef6:	421a      	tst	r2, r3
 8004ef8:	d1d6      	bne.n	8004ea8 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004efa:	2301      	movs	r3, #1
 8004efc:	9305      	str	r3, [sp, #20]
 8004efe:	4643      	mov	r3, r8
 8004f00:	2200      	movs	r2, #0
 8004f02:	9304      	str	r3, [sp, #16]
 8004f04:	9303      	str	r3, [sp, #12]
 8004f06:	9302      	str	r3, [sp, #8]
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	4658      	mov	r0, fp
 8004f10:	f003 fa96 	bl	8008440 <SetButtonEvents>
 8004f14:	7834      	ldrb	r4, [r6, #0]
 8004f16:	e7c7      	b.n	8004ea8 <ParseSnippetCondition+0x164>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004f18:	2102      	movs	r1, #2
 8004f1a:	7832      	ldrb	r2, [r6, #0]
 8004f1c:	0093      	lsls	r3, r2, #2
 8004f1e:	189b      	adds	r3, r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	54e9      	strb	r1, [r5, r3]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004f24:	18ed      	adds	r5, r5, r3
				return BOS_OK;
 8004f26:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004f28:	3201      	adds	r2, #1
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004f2a:	70e8      	strb	r0, [r5, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004f2c:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004f2e:	4698      	mov	r8, r3
 8004f30:	e774      	b.n	8004e1c <ParseSnippetCondition+0xd8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004f32:	220c      	movs	r2, #12
 8004f34:	4965      	ldr	r1, [pc, #404]	; (80050cc <ParseSnippetCondition+0x388>)
 8004f36:	9807      	ldr	r0, [sp, #28]
 8004f38:	f00f fab8 	bl	80144ac <strncmp>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d131      	bne.n	8004fa4 <ParseSnippetCondition+0x260>
				if(!button[port].pressedX1Sec){
 8004f40:	465b      	mov	r3, fp
 8004f42:	00da      	lsls	r2, r3, #3
 8004f44:	4b60      	ldr	r3, [pc, #384]	; (80050c8 <ParseSnippetCondition+0x384>)
 8004f46:	445a      	add	r2, fp
 8004f48:	189b      	adds	r3, r3, r2
 8004f4a:	789a      	ldrb	r2, [r3, #2]
 8004f4c:	2a00      	cmp	r2, #0
 8004f4e:	d063      	beq.n	8005018 <ParseSnippetCondition+0x2d4>
				else if(!button[port].pressedX2Sec){
 8004f50:	78da      	ldrb	r2, [r3, #3]
 8004f52:	2a00      	cmp	r2, #0
 8004f54:	d07d      	beq.n	8005052 <ParseSnippetCondition+0x30e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004f56:	220c      	movs	r2, #12
				else if(!button[port].pressedX3Sec){
 8004f58:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004f5a:	4690      	mov	r8, r2
				else if(!button[port].pressedX3Sec){
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1a3      	bne.n	8004ea8 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004f60:	0023      	movs	r3, r4
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004f62:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004f64:	4453      	add	r3, sl
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	18eb      	adds	r3, r5, r3
 8004f6a:	3a01      	subs	r2, #1
 8004f6c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004f6e:	300f      	adds	r0, #15
 8004f70:	f00e fd8f 	bl	8013a92 <atoi>
 8004f74:	7832      	ldrb	r2, [r6, #0]
 8004f76:	b2c0      	uxtb	r0, r0
 8004f78:	0093      	lsls	r3, r2, #2
 8004f7a:	189b      	adds	r3, r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004f80:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004f82:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004f84:	9305      	str	r3, [sp, #20]
 8004f86:	2300      	movs	r3, #0
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	9304      	str	r3, [sp, #16]
 8004f8e:	9303      	str	r3, [sp, #12]
 8004f90:	9302      	str	r3, [sp, #8]
 8004f92:	9001      	str	r0, [sp, #4]
 8004f94:	9300      	str	r3, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004f96:	4658      	mov	r0, fp
 8004f98:	f003 fa52 	bl	8008440 <SetButtonEvents>
					status =BOS_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	7834      	ldrb	r4, [r6, #0]
 8004fa0:	4698      	mov	r8, r3
 8004fa2:	e781      	b.n	8004ea8 <ParseSnippetCondition+0x164>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004fa4:	220d      	movs	r2, #13
 8004fa6:	494a      	ldr	r1, [pc, #296]	; (80050d0 <ParseSnippetCondition+0x38c>)
 8004fa8:	9807      	ldr	r0, [sp, #28]
 8004faa:	f00f fa7f 	bl	80144ac <strncmp>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	d000      	beq.n	8004fb4 <ParseSnippetCondition+0x270>
 8004fb2:	e779      	b.n	8004ea8 <ParseSnippetCondition+0x164>
				if(!button[port].releasedY1Sec){
 8004fb4:	465b      	mov	r3, fp
 8004fb6:	4a44      	ldr	r2, [pc, #272]	; (80050c8 <ParseSnippetCondition+0x384>)
 8004fb8:	00d9      	lsls	r1, r3, #3
 8004fba:	18cb      	adds	r3, r1, r3
 8004fbc:	18d3      	adds	r3, r2, r3
 8004fbe:	7958      	ldrb	r0, [r3, #5]
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d05e      	beq.n	8005082 <ParseSnippetCondition+0x33e>
				else if(!button[port].releasedY2Sec){
 8004fc4:	799b      	ldrb	r3, [r3, #6]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d100      	bne.n	8004fcc <ParseSnippetCondition+0x288>
 8004fca:	e083      	b.n	80050d4 <ParseSnippetCondition+0x390>
				else if(!button[port].releasedY3Sec){
 8004fcc:	4459      	add	r1, fp
 8004fce:	1852      	adds	r2, r2, r1
 8004fd0:	79d3      	ldrb	r3, [r2, #7]
 8004fd2:	4699      	mov	r9, r3
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004fd4:	230d      	movs	r3, #13
 8004fd6:	4698      	mov	r8, r3
				else if(!button[port].releasedY3Sec){
 8004fd8:	464b      	mov	r3, r9
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d000      	beq.n	8004fe0 <ParseSnippetCondition+0x29c>
 8004fde:	e763      	b.n	8004ea8 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004fe0:	3314      	adds	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004fe2:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004fe4:	4698      	mov	r8, r3
 8004fe6:	435c      	muls	r4, r3
 8004fe8:	3b06      	subs	r3, #6
 8004fea:	192c      	adds	r4, r5, r4
 8004fec:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004fee:	3010      	adds	r0, #16
 8004ff0:	f00e fd4f 	bl	8013a92 <atoi>
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	7833      	ldrb	r3, [r6, #0]
 8004ff8:	b2c0      	uxtb	r0, r0
 8004ffa:	4353      	muls	r3, r2
 8004ffc:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004ffe:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8005000:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8005002:	9305      	str	r3, [sp, #20]
 8005004:	464b      	mov	r3, r9
 8005006:	9303      	str	r3, [sp, #12]
 8005008:	9302      	str	r3, [sp, #8]
 800500a:	9301      	str	r3, [sp, #4]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	2300      	movs	r3, #0
 8005010:	9004      	str	r0, [sp, #16]
 8005012:	001a      	movs	r2, r3
 8005014:	0019      	movs	r1, r3
 8005016:	e7be      	b.n	8004f96 <ParseSnippetCondition+0x252>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8005018:	2309      	movs	r3, #9
 800501a:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 800501c:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 800501e:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8005020:	300f      	adds	r0, #15
 8005022:	f00e fd36 	bl	8013a92 <atoi>
 8005026:	7831      	ldrb	r1, [r6, #0]
 8005028:	b2c3      	uxtb	r3, r0
 800502a:	008a      	lsls	r2, r1, #2
 800502c:	1852      	adds	r2, r2, r1
 800502e:	0092      	lsls	r2, r2, #2
 8005030:	18ad      	adds	r5, r5, r2
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8005032:	2201      	movs	r2, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8005034:	712b      	strb	r3, [r5, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8005036:	9205      	str	r2, [sp, #20]
 8005038:	4642      	mov	r2, r8
 800503a:	9204      	str	r2, [sp, #16]
 800503c:	9203      	str	r2, [sp, #12]
 800503e:	9202      	str	r2, [sp, #8]
 8005040:	9201      	str	r2, [sp, #4]
 8005042:	9200      	str	r2, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8005044:	2200      	movs	r2, #0
 8005046:	2100      	movs	r1, #0
 8005048:	4658      	mov	r0, fp
 800504a:	f003 f9f9 	bl	8008440 <SetButtonEvents>
 800504e:	7834      	ldrb	r4, [r6, #0]
 8005050:	e72a      	b.n	8004ea8 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8005052:	230a      	movs	r3, #10
 8005054:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8005056:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8005058:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 800505a:	300f      	adds	r0, #15
 800505c:	f00e fd19 	bl	8013a92 <atoi>
 8005060:	7832      	ldrb	r2, [r6, #0]
 8005062:	b2c0      	uxtb	r0, r0
 8005064:	0093      	lsls	r3, r2, #2
 8005066:	189b      	adds	r3, r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 800506c:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 800506e:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8005070:	9305      	str	r3, [sp, #20]
 8005072:	4643      	mov	r3, r8
 8005074:	9000      	str	r0, [sp, #0]
 8005076:	9304      	str	r3, [sp, #16]
 8005078:	9303      	str	r3, [sp, #12]
 800507a:	9302      	str	r3, [sp, #8]
 800507c:	9301      	str	r3, [sp, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 800507e:	2300      	movs	r3, #0
 8005080:	e7e0      	b.n	8005044 <ParseSnippetCondition+0x300>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8005082:	230c      	movs	r3, #12
 8005084:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8005086:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8005088:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 800508a:	3010      	adds	r0, #16
 800508c:	f00e fd01 	bl	8013a92 <atoi>
 8005090:	7832      	ldrb	r2, [r6, #0]
 8005092:	b2c0      	uxtb	r0, r0
 8005094:	0093      	lsls	r3, r2, #2
 8005096:	189b      	adds	r3, r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 800509c:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 800509e:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 80050a0:	9305      	str	r3, [sp, #20]
 80050a2:	4643      	mov	r3, r8
 80050a4:	9002      	str	r0, [sp, #8]
 80050a6:	9304      	str	r3, [sp, #16]
 80050a8:	9303      	str	r3, [sp, #12]
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	2300      	movs	r3, #0
 80050b0:	e7c8      	b.n	8005044 <ParseSnippetCondition+0x300>
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	20001140 	.word	0x20001140
 80050b8:	20006ce8 	.word	0x20006ce8
 80050bc:	0801923c 	.word	0x0801923c
 80050c0:	08019db8 	.word	0x08019db8
 80050c4:	0801958c 	.word	0x0801958c
 80050c8:	2000172c 	.word	0x2000172c
 80050cc:	0801959c 	.word	0x0801959c
 80050d0:	080195ac 	.word	0x080195ac
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 80050d4:	0023      	movs	r3, r4
 80050d6:	220d      	movs	r2, #13
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80050d8:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 80050da:	4453      	add	r3, sl
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	18eb      	adds	r3, r5, r3
 80050e0:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80050e2:	3010      	adds	r0, #16
 80050e4:	f00e fcd5 	bl	8013a92 <atoi>
 80050e8:	7832      	ldrb	r2, [r6, #0]
 80050ea:	b2c0      	uxtb	r0, r0
 80050ec:	0093      	lsls	r3, r2, #2
 80050ee:	189b      	adds	r3, r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 80050f4:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80050f6:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 80050f8:	9305      	str	r3, [sp, #20]
 80050fa:	2300      	movs	r3, #0
 80050fc:	9003      	str	r0, [sp, #12]
 80050fe:	9304      	str	r3, [sp, #16]
 8005100:	9302      	str	r3, [sp, #8]
 8005102:	9301      	str	r3, [sp, #4]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	2200      	movs	r2, #0
 8005108:	2100      	movs	r1, #0
 800510a:	e744      	b.n	8004f96 <ParseSnippetCondition+0x252>

0800510c <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 800510c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800510e:	46de      	mov	lr, fp
 8005110:	4657      	mov	r7, sl
 8005112:	4645      	mov	r5, r8
 8005114:	464e      	mov	r6, r9
 8005116:	468a      	mov	sl, r1
 8005118:	b5e0      	push	{r5, r6, r7, lr}
 800511a:	b08b      	sub	sp, #44	; 0x2c
 800511c:	9002      	str	r0, [sp, #8]
 800511e:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 8005120:	2100      	movs	r1, #0
 8005122:	2209      	movs	r2, #9
 8005124:	a807      	add	r0, sp, #28
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8005126:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8005128:	f00e ff82 	bl	8014030 <memset>
 800512c:	4bcd      	ldr	r3, [pc, #820]	; (8005464 <CLI_CommandParser+0x358>)
				if(id == myID){
 800512e:	4656      	mov	r6, sl
 8005130:	4698      	mov	r8, r3
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8005132:	4bcd      	ldr	r3, [pc, #820]	; (8005468 <CLI_CommandParser+0x35c>)
				if(id == myID){
 8005134:	46ba      	mov	sl, r7
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8005136:	469b      	mov	fp, r3
 8005138:	e02d      	b.n	8005196 <CLI_CommandParser+0x8a>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 800513a:	2206      	movs	r2, #6
 800513c:	49cb      	ldr	r1, [pc, #812]	; (800546c <CLI_CommandParser+0x360>)
 800513e:	0028      	movs	r0, r5
 8005140:	f00f f9b4 	bl	80144ac <strncmp>
 8005144:	2800      	cmp	r0, #0
 8005146:	d057      	beq.n	80051f8 <CLI_CommandParser+0xec>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8005148:	2f02      	cmp	r7, #2
 800514a:	d100      	bne.n	800514e <CLI_CommandParser+0x42>
 800514c:	e0d2      	b.n	80052f4 <CLI_CommandParser+0x1e8>
			loc =strchr((char* )cInputString,'.');
 800514e:	212e      	movs	r1, #46	; 0x2e
 8005150:	0028      	movs	r0, r5
 8005152:	f00f f995 	bl	8014480 <strchr>
 8005156:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8005158:	d007      	beq.n	800516a <CLI_CommandParser+0x5e>
 800515a:	3803      	subs	r0, #3
 800515c:	2203      	movs	r2, #3
 800515e:	4659      	mov	r1, fp
 8005160:	f00f f9a4 	bl	80144ac <strncmp>
 8005164:	2800      	cmp	r0, #0
 8005166:	d000      	beq.n	800516a <CLI_CommandParser+0x5e>
 8005168:	e079      	b.n	800525e <CLI_CommandParser+0x152>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800516a:	2299      	movs	r2, #153	; 0x99
 800516c:	0021      	movs	r1, r4
 800516e:	0092      	lsls	r2, r2, #2
 8005170:	0028      	movs	r0, r5
 8005172:	f009 f8f9 	bl	800e368 <FreeRTOS_CLIProcessCommand>
 8005176:	4682      	mov	sl, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005178:	7823      	ldrb	r3, [r4, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d139      	bne.n	80051f2 <CLI_CommandParser+0xe6>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800517e:	0020      	movs	r0, r4
 8005180:	f7fa ffca 	bl	8000118 <strlen>
 8005184:	2100      	movs	r1, #0
 8005186:	0002      	movs	r2, r0
 8005188:	0020      	movs	r0, r4
 800518a:	f00e ff51 	bl	8014030 <memset>
	} while(xReturned != pdFALSE);
 800518e:	4653      	mov	r3, sl
 8005190:	2b00      	cmp	r3, #0
 8005192:	d100      	bne.n	8005196 <CLI_CommandParser+0x8a>
 8005194:	e1d0      	b.n	8005538 <CLI_CommandParser+0x42c>
		StringToLowerCase((char* )cInputString);
 8005196:	0028      	movs	r0, r5
 8005198:	f7ff fdc0 	bl	8004d1c <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 800519c:	2336      	movs	r3, #54	; 0x36
 800519e:	4699      	mov	r9, r3
 80051a0:	4643      	mov	r3, r8
 80051a2:	464a      	mov	r2, r9
 80051a4:	5c9f      	ldrb	r7, [r3, r2]
 80051a6:	2f00      	cmp	r7, #0
 80051a8:	d1c7      	bne.n	800513a <CLI_CommandParser+0x2e>
 80051aa:	3a33      	subs	r2, #51	; 0x33
 80051ac:	49b0      	ldr	r1, [pc, #704]	; (8005470 <CLI_CommandParser+0x364>)
 80051ae:	0028      	movs	r0, r5
 80051b0:	f00f f97c 	bl	80144ac <strncmp>
 80051b4:	1e07      	subs	r7, r0, #0
 80051b6:	d1ca      	bne.n	800514e <CLI_CommandParser+0x42>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 80051b8:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 80051ba:	f7ff fdc3 	bl	8004d44 <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 80051be:	2800      	cmp	r0, #0
 80051c0:	d000      	beq.n	80051c4 <CLI_CommandParser+0xb8>
 80051c2:	e09f      	b.n	8005304 <CLI_CommandParser+0x1f8>
				recordSnippet = SNIPPET_COMMANDS;
 80051c4:	2302      	movs	r3, #2
 80051c6:	4642      	mov	r2, r8
 80051c8:	4649      	mov	r1, r9
 80051ca:	5453      	strb	r3, [r2, r1]
				pcOutputString[0] ='\r';
 80051cc:	330b      	adds	r3, #11
 80051ce:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80051d0:	2e00      	cmp	r6, #0
 80051d2:	d027      	beq.n	8005224 <CLI_CommandParser+0x118>
 80051d4:	2300      	movs	r3, #0
 80051d6:	469a      	mov	sl, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80051d8:	0020      	movs	r0, r4
 80051da:	f7fa ff9d 	bl	8000118 <strlen>
 80051de:	2301      	movs	r3, #1
 80051e0:	425b      	negs	r3, r3
 80051e2:	b282      	uxth	r2, r0
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	0021      	movs	r1, r4
 80051e8:	3333      	adds	r3, #51	; 0x33
 80051ea:	9802      	ldr	r0, [sp, #8]
 80051ec:	f008 fedc 	bl	800dfa8 <writePxMutex>
 80051f0:	e7c5      	b.n	800517e <CLI_CommandParser+0x72>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80051f2:	2e00      	cmp	r6, #0
 80051f4:	d0c3      	beq.n	800517e <CLI_CommandParser+0x72>
 80051f6:	e7ef      	b.n	80051d8 <CLI_CommandParser+0xcc>
			recordSnippet =0;
 80051f8:	4643      	mov	r3, r8
 80051fa:	464a      	mov	r2, r9
 80051fc:	5498      	strb	r0, [r3, r2]
			snippets[numOfRecordedSnippets - 1].state = true;
 80051fe:	781a      	ldrb	r2, [r3, #0]
 8005200:	3a01      	subs	r2, #1
 8005202:	0093      	lsls	r3, r2, #2
 8005204:	189b      	adds	r3, r3, r2
 8005206:	4a9b      	ldr	r2, [pc, #620]	; (8005474 <CLI_CommandParser+0x368>)
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	18d3      	adds	r3, r2, r3
 800520c:	2201      	movs	r2, #1
 800520e:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8005210:	f006 f980 	bl	800b514 <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8005214:	2241      	movs	r2, #65	; 0x41
 8005216:	4998      	ldr	r1, [pc, #608]	; (8005478 <CLI_CommandParser+0x36c>)
 8005218:	0020      	movs	r0, r4
 800521a:	f00e ff00 	bl	801401e <memcpy>
 800521e:	7823      	ldrb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1d5      	bne.n	80051d0 <CLI_CommandParser+0xc4>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005224:	0020      	movs	r0, r4
 8005226:	f7fa ff77 	bl	8000118 <strlen>
 800522a:	2100      	movs	r1, #0
 800522c:	0002      	movs	r2, r0
 800522e:	0020      	movs	r0, r4
 8005230:	46b2      	mov	sl, r6
 8005232:	f00e fefd 	bl	8014030 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8005236:	2209      	movs	r2, #9
 8005238:	2100      	movs	r1, #0
 800523a:	a807      	add	r0, sp, #28
 800523c:	f00e fef8 	bl	8014030 <memset>
	if(!recordSnippet && enableOutput)
 8005240:	2336      	movs	r3, #54	; 0x36
 8005242:	4642      	mov	r2, r8
 8005244:	5cd3      	ldrb	r3, [r2, r3]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d102      	bne.n	8005250 <CLI_CommandParser+0x144>
 800524a:	4653      	mov	r3, sl
 800524c:	2b00      	cmp	r3, #0
 800524e:	d16a      	bne.n	8005326 <CLI_CommandParser+0x21a>
}
 8005250:	b00b      	add	sp, #44	; 0x2c
 8005252:	bc3c      	pop	{r2, r3, r4, r5}
 8005254:	4690      	mov	r8, r2
 8005256:	4699      	mov	r9, r3
 8005258:	46a2      	mov	sl, r4
 800525a:	46ab      	mov	fp, r5
 800525c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 800525e:	f00e fc83 	bl	8013b68 <__locale_ctype_ptr>
 8005262:	787b      	ldrb	r3, [r7, #1]
 8005264:	18c0      	adds	r0, r0, r3
 8005266:	7843      	ldrb	r3, [r0, #1]
 8005268:	075b      	lsls	r3, r3, #29
 800526a:	d500      	bpl.n	800526e <CLI_CommandParser+0x162>
 800526c:	e77d      	b.n	800516a <CLI_CommandParser+0x5e>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 800526e:	1b7a      	subs	r2, r7, r5
 8005270:	0029      	movs	r1, r5
 8005272:	a807      	add	r0, sp, #28
 8005274:	f00f f92b 	bl	80144ce <strncpy>
				id =GetID(idString);
 8005278:	a807      	add	r0, sp, #28
 800527a:	f7ff f8e7 	bl	800444c <GetID>
				if(id == myID){
 800527e:	4b7f      	ldr	r3, [pc, #508]	; (800547c <CLI_CommandParser+0x370>)
				id =GetID(idString);
 8005280:	9003      	str	r0, [sp, #12]
				if(id == myID){
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	9305      	str	r3, [sp, #20]
 8005286:	4298      	cmp	r0, r3
 8005288:	d057      	beq.n	800533a <CLI_CommandParser+0x22e>
				else if(id == BOS_ERR_WrongName){
 800528a:	9b03      	ldr	r3, [sp, #12]
 800528c:	2b64      	cmp	r3, #100	; 0x64
 800528e:	d100      	bne.n	8005292 <CLI_CommandParser+0x186>
 8005290:	e0da      	b.n	8005448 <CLI_CommandParser+0x33c>
				else if(id == BOS_ERR_WrongID){
 8005292:	9b03      	ldr	r3, [sp, #12]
 8005294:	2b66      	cmp	r3, #102	; 0x66
 8005296:	d100      	bne.n	800529a <CLI_CommandParser+0x18e>
 8005298:	e0dd      	b.n	8005456 <CLI_CommandParser+0x34a>
 800529a:	1c7b      	adds	r3, r7, #1
 800529c:	9304      	str	r3, [sp, #16]
				else if(id == BOS_BROADCAST){
 800529e:	9b03      	ldr	r3, [sp, #12]
 80052a0:	2bff      	cmp	r3, #255	; 0xff
 80052a2:	d100      	bne.n	80052a6 <CLI_CommandParser+0x19a>
 80052a4:	e08b      	b.n	80053be <CLI_CommandParser+0x2b2>
				else if((uint8_t )id == BOS_MULTICAST){
 80052a6:	466b      	mov	r3, sp
 80052a8:	7b1b      	ldrb	r3, [r3, #12]
 80052aa:	4699      	mov	r9, r3
 80052ac:	2bfe      	cmp	r3, #254	; 0xfe
 80052ae:	d100      	bne.n	80052b2 <CLI_CommandParser+0x1a6>
 80052b0:	e102      	b.n	80054b8 <CLI_CommandParser+0x3ac>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 80052b2:	2206      	movs	r2, #6
 80052b4:	4972      	ldr	r1, [pc, #456]	; (8005480 <CLI_CommandParser+0x374>)
 80052b6:	9804      	ldr	r0, [sp, #16]
 80052b8:	f00f f8f8 	bl	80144ac <strncmp>
 80052bc:	2800      	cmp	r0, #0
 80052be:	d144      	bne.n	800534a <CLI_CommandParser+0x23e>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 80052c0:	4b70      	ldr	r3, [pc, #448]	; (8005484 <CLI_CommandParser+0x378>)
						SendMessageToModule(id,CODE_UPDATE,0);
 80052c2:	2200      	movs	r2, #0
						BOSMessaging.response = BOS_RESPONSE_NONE;
 80052c4:	7018      	strb	r0, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 80052c6:	2119      	movs	r1, #25
 80052c8:	4648      	mov	r0, r9
						BOSMessaging.response = BOS_RESPONSE_NONE;
 80052ca:	469a      	mov	sl, r3
						SendMessageToModule(id,CODE_UPDATE,0);
 80052cc:	f004 fab6 	bl	800983c <SendMessageToModule>
						osDelay(100);
 80052d0:	2064      	movs	r0, #100	; 0x64
 80052d2:	f008 ffb5 	bl	800e240 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 80052d6:	4b6c      	ldr	r3, [pc, #432]	; (8005488 <CLI_CommandParser+0x37c>)
 80052d8:	4649      	mov	r1, r9
 80052da:	781a      	ldrb	r2, [r3, #0]
 80052dc:	4b67      	ldr	r3, [pc, #412]	; (800547c <CLI_CommandParser+0x370>)
 80052de:	7818      	ldrb	r0, [r3, #0]
 80052e0:	2300      	movs	r3, #0
 80052e2:	f7fe fd63 	bl	8003dac <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 80052e6:	4653      	mov	r3, sl
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b60      	cmp	r3, #96	; 0x60
 80052ec:	d100      	bne.n	80052f0 <CLI_CommandParser+0x1e4>
 80052ee:	e095      	b.n	800541c <CLI_CommandParser+0x310>
 80052f0:	7823      	ldrb	r3, [r4, #0]
 80052f2:	e795      	b.n	8005220 <CLI_CommandParser+0x114>
 80052f4:	0028      	movs	r0, r5
 80052f6:	f7ff fcb9 	bl	8004c6c <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d10c      	bne.n	8005318 <CLI_CommandParser+0x20c>
				pcOutputString[0] ='\r';
 80052fe:	230d      	movs	r3, #13
 8005300:	7023      	strb	r3, [r4, #0]
 8005302:	e765      	b.n	80051d0 <CLI_CommandParser+0xc4>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8005304:	2252      	movs	r2, #82	; 0x52
 8005306:	4961      	ldr	r1, [pc, #388]	; (800548c <CLI_CommandParser+0x380>)
 8005308:	0020      	movs	r0, r4
 800530a:	f00e fe88 	bl	801401e <memcpy>
				recordSnippet =0;
 800530e:	4643      	mov	r3, r8
 8005310:	464a      	mov	r2, r9
 8005312:	549f      	strb	r7, [r3, r2]
 8005314:	7823      	ldrb	r3, [r4, #0]
 8005316:	e783      	b.n	8005220 <CLI_CommandParser+0x114>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8005318:	2252      	movs	r2, #82	; 0x52
 800531a:	495c      	ldr	r1, [pc, #368]	; (800548c <CLI_CommandParser+0x380>)
 800531c:	0020      	movs	r0, r4
 800531e:	f00e fe7e 	bl	801401e <memcpy>
 8005322:	7823      	ldrb	r3, [r4, #0]
 8005324:	e77c      	b.n	8005220 <CLI_CommandParser+0x114>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8005326:	2301      	movs	r3, #1
 8005328:	425b      	negs	r3, r3
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	2238      	movs	r2, #56	; 0x38
 800532e:	3333      	adds	r3, #51	; 0x33
 8005330:	4957      	ldr	r1, [pc, #348]	; (8005490 <CLI_CommandParser+0x384>)
 8005332:	9802      	ldr	r0, [sp, #8]
 8005334:	f008 fe38 	bl	800dfa8 <writePxMutex>
}
 8005338:	e78a      	b.n	8005250 <CLI_CommandParser+0x144>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800533a:	2299      	movs	r2, #153	; 0x99
 800533c:	1c78      	adds	r0, r7, #1
 800533e:	0092      	lsls	r2, r2, #2
 8005340:	0021      	movs	r1, r4
 8005342:	f009 f811 	bl	800e368 <FreeRTOS_CLIProcessCommand>
 8005346:	4682      	mov	sl, r0
 8005348:	e716      	b.n	8005178 <CLI_CommandParser+0x6c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 800534a:	0028      	movs	r0, r5
 800534c:	f7fa fee4 	bl	8000118 <strlen>
 8005350:	0007      	movs	r7, r0
 8005352:	a807      	add	r0, sp, #28
 8005354:	f7fa fee0 	bl	8000118 <strlen>
 8005358:	4682      	mov	sl, r0
 800535a:	1e7a      	subs	r2, r7, #1
 800535c:	1a12      	subs	r2, r2, r0
 800535e:	9904      	ldr	r1, [sp, #16]
 8005360:	484c      	ldr	r0, [pc, #304]	; (8005494 <CLI_CommandParser+0x388>)
 8005362:	f00f f8b4 	bl	80144ce <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8005366:	0028      	movs	r0, r5
 8005368:	f7fa fed6 	bl	8000118 <strlen>
 800536c:	4653      	mov	r3, sl
 800536e:	3801      	subs	r0, #1
 8005370:	1ac2      	subs	r2, r0, r3
 8005372:	b292      	uxth	r2, r2
 8005374:	2117      	movs	r1, #23
 8005376:	4648      	mov	r0, r9
 8005378:	f004 fa60 	bl	800983c <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 800537c:	9a03      	ldr	r2, [sp, #12]
 800537e:	4946      	ldr	r1, [pc, #280]	; (8005498 <CLI_CommandParser+0x38c>)
 8005380:	0020      	movs	r0, r4
 8005382:	f00f f84f 	bl	8014424 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8005386:	7823      	ldrb	r3, [r4, #0]
 8005388:	0020      	movs	r0, r4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00d      	beq.n	80053aa <CLI_CommandParser+0x29e>
 800538e:	f7fa fec3 	bl	8000118 <strlen>
 8005392:	0002      	movs	r2, r0
 8005394:	2e00      	cmp	r6, #0
 8005396:	d00b      	beq.n	80053b0 <CLI_CommandParser+0x2a4>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8005398:	2301      	movs	r3, #1
 800539a:	b282      	uxth	r2, r0
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	0021      	movs	r1, r4
 80053a0:	3331      	adds	r3, #49	; 0x31
 80053a2:	9802      	ldr	r0, [sp, #8]
 80053a4:	f008 fe00 	bl	800dfa8 <writePxMutex>
 80053a8:	0020      	movs	r0, r4
 80053aa:	f7fa feb5 	bl	8000118 <strlen>
 80053ae:	0002      	movs	r2, r0
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80053b0:	2100      	movs	r1, #0
 80053b2:	0020      	movs	r0, r4
 80053b4:	f00e fe3c 	bl	8014030 <memset>
 80053b8:	4b32      	ldr	r3, [pc, #200]	; (8005484 <CLI_CommandParser+0x378>)
 80053ba:	469a      	mov	sl, r3
 80053bc:	e793      	b.n	80052e6 <CLI_CommandParser+0x1da>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 80053be:	221a      	movs	r2, #26
 80053c0:	2100      	movs	r1, #0
 80053c2:	4836      	ldr	r0, [pc, #216]	; (800549c <CLI_CommandParser+0x390>)
 80053c4:	f00e fe34 	bl	8014030 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80053c8:	0028      	movs	r0, r5
 80053ca:	f7fa fea5 	bl	8000118 <strlen>
 80053ce:	0007      	movs	r7, r0
 80053d0:	a807      	add	r0, sp, #28
 80053d2:	f7fa fea1 	bl	8000118 <strlen>
 80053d6:	4681      	mov	r9, r0
 80053d8:	3f01      	subs	r7, #1
 80053da:	1a3a      	subs	r2, r7, r0
 80053dc:	9f04      	ldr	r7, [sp, #16]
 80053de:	482d      	ldr	r0, [pc, #180]	; (8005494 <CLI_CommandParser+0x388>)
 80053e0:	0039      	movs	r1, r7
 80053e2:	f00f f874 	bl	80144ce <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 80053e6:	0028      	movs	r0, r5
 80053e8:	f7fa fe96 	bl	8000118 <strlen>
 80053ec:	464b      	mov	r3, r9
 80053ee:	1ac3      	subs	r3, r0, r3
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2217      	movs	r2, #23
 80053f4:	21ff      	movs	r1, #255	; 0xff
 80053f6:	9805      	ldr	r0, [sp, #20]
 80053f8:	f004 f9da 	bl	80097b0 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80053fc:	2299      	movs	r2, #153	; 0x99
 80053fe:	0021      	movs	r1, r4
 8005400:	0092      	lsls	r2, r2, #2
 8005402:	0038      	movs	r0, r7
 8005404:	f008 ffb0 	bl	800e368 <FreeRTOS_CLIProcessCommand>
 8005408:	4682      	mov	sl, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 800540a:	0020      	movs	r0, r4
 800540c:	f7fa fe84 	bl	8000118 <strlen>
 8005410:	221d      	movs	r2, #29
 8005412:	1820      	adds	r0, r4, r0
 8005414:	4922      	ldr	r1, [pc, #136]	; (80054a0 <CLI_CommandParser+0x394>)
 8005416:	f00e fe02 	bl	801401e <memcpy>
 800541a:	e6ad      	b.n	8005178 <CLI_CommandParser+0x6c>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 800541c:	21fa      	movs	r1, #250	; 0xfa
 800541e:	2001      	movs	r0, #1
 8005420:	0089      	lsls	r1, r1, #2
 8005422:	f00a fa7f 	bl	800f924 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8005426:	4b1f      	ldr	r3, [pc, #124]	; (80054a4 <CLI_CommandParser+0x398>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d100      	bne.n	8005430 <CLI_CommandParser+0x324>
 800542e:	e75f      	b.n	80052f0 <CLI_CommandParser+0x1e4>
							++timedoutMsg;
 8005430:	4a1d      	ldr	r2, [pc, #116]	; (80054a8 <CLI_CommandParser+0x39c>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8005432:	491e      	ldr	r1, [pc, #120]	; (80054ac <CLI_CommandParser+0x3a0>)
							++timedoutMsg;
 8005434:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8005436:	0020      	movs	r0, r4
							++timedoutMsg;
 8005438:	3301      	adds	r3, #1
 800543a:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	0022      	movs	r2, r4
 8005440:	f00e fff0 	bl	8014424 <sprintf>
 8005444:	7823      	ldrb	r3, [r4, #0]
 8005446:	e6eb      	b.n	8005220 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8005448:	2227      	movs	r2, #39	; 0x27
 800544a:	4919      	ldr	r1, [pc, #100]	; (80054b0 <CLI_CommandParser+0x3a4>)
 800544c:	0020      	movs	r0, r4
 800544e:	f00e fde6 	bl	801401e <memcpy>
 8005452:	7823      	ldrb	r3, [r4, #0]
 8005454:	e6e4      	b.n	8005220 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8005456:	2225      	movs	r2, #37	; 0x25
 8005458:	4916      	ldr	r1, [pc, #88]	; (80054b4 <CLI_CommandParser+0x3a8>)
 800545a:	0020      	movs	r0, r4
 800545c:	f00e fddf 	bl	801401e <memcpy>
 8005460:	7823      	ldrb	r3, [r4, #0]
 8005462:	e6dd      	b.n	8005220 <CLI_CommandParser+0x114>
 8005464:	20001140 	.word	0x20001140
 8005468:	08019660 	.word	0x08019660
 800546c:	08019614 	.word	0x08019614
 8005470:	080195bc 	.word	0x080195bc
 8005474:	20006ce8 	.word	0x20006ce8
 8005478:	0801961c 	.word	0x0801961c
 800547c:	20000a98 	.word	0x20000a98
 8005480:	08019700 	.word	0x08019700
 8005484:	20006c4c 	.word	0x20006c4c
 8005488:	20000c28 	.word	0x20000c28
 800548c:	080195c0 	.word	0x080195c0
 8005490:	0801974c 	.word	0x0801974c
 8005494:	20000b3c 	.word	0x20000b3c
 8005498:	08019708 	.word	0x08019708
 800549c:	20000da8 	.word	0x20000da8
 80054a0:	080196b4 	.word	0x080196b4
 80054a4:	20000c3c 	.word	0x20000c3c
 80054a8:	200019ca 	.word	0x200019ca
 80054ac:	0801972c 	.word	0x0801972c
 80054b0:	08019664 	.word	0x08019664
 80054b4:	0801968c 	.word	0x0801968c
					group =id >> 8;
 80054b8:	4640      	mov	r0, r8
 80054ba:	2237      	movs	r2, #55	; 0x37
 80054bc:	9b03      	ldr	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 80054be:	2100      	movs	r1, #0
					group =id >> 8;
 80054c0:	121f      	asrs	r7, r3, #8
 80054c2:	b2fb      	uxtb	r3, r7
 80054c4:	5483      	strb	r3, [r0, r2]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 80054c6:	3a1d      	subs	r2, #29
 80054c8:	481c      	ldr	r0, [pc, #112]	; (800553c <CLI_CommandParser+0x430>)
					group =id >> 8;
 80054ca:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 80054cc:	f00e fdb0 	bl	8014030 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80054d0:	0028      	movs	r0, r5
 80054d2:	f7fa fe21 	bl	8000118 <strlen>
 80054d6:	0007      	movs	r7, r0
 80054d8:	a807      	add	r0, sp, #28
 80054da:	f7fa fe1d 	bl	8000118 <strlen>
 80054de:	4681      	mov	r9, r0
 80054e0:	3f01      	subs	r7, #1
 80054e2:	1a3a      	subs	r2, r7, r0
 80054e4:	9904      	ldr	r1, [sp, #16]
 80054e6:	4816      	ldr	r0, [pc, #88]	; (8005540 <CLI_CommandParser+0x434>)
 80054e8:	f00e fff1 	bl	80144ce <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 80054ec:	0028      	movs	r0, r5
 80054ee:	f7fa fe13 	bl	8000118 <strlen>
 80054f2:	464f      	mov	r7, r9
 80054f4:	1bc3      	subs	r3, r0, r7
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2217      	movs	r2, #23
 80054fa:	9903      	ldr	r1, [sp, #12]
 80054fc:	9805      	ldr	r0, [sp, #20]
 80054fe:	f004 f957 	bl	80097b0 <BroadcastMessage>
					if(InGroup(myID,group))
 8005502:	4b10      	ldr	r3, [pc, #64]	; (8005544 <CLI_CommandParser+0x438>)
 8005504:	4a10      	ldr	r2, [pc, #64]	; (8005548 <CLI_CommandParser+0x43c>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	4641      	mov	r1, r8
 800550a:	3b01      	subs	r3, #1
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	5a9b      	ldrh	r3, [r3, r2]
 8005510:	2237      	movs	r2, #55	; 0x37
 8005512:	5c8a      	ldrb	r2, [r1, r2]
 8005514:	4113      	asrs	r3, r2
 8005516:	07db      	lsls	r3, r3, #31
 8005518:	d406      	bmi.n	8005528 <CLI_CommandParser+0x41c>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 800551a:	ab07      	add	r3, sp, #28
 800551c:	0022      	movs	r2, r4
 800551e:	490b      	ldr	r1, [pc, #44]	; (800554c <CLI_CommandParser+0x440>)
 8005520:	0020      	movs	r0, r4
 8005522:	f00e ff7f 	bl	8014424 <sprintf>
 8005526:	e627      	b.n	8005178 <CLI_CommandParser+0x6c>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005528:	2299      	movs	r2, #153	; 0x99
 800552a:	0021      	movs	r1, r4
 800552c:	0092      	lsls	r2, r2, #2
 800552e:	9804      	ldr	r0, [sp, #16]
 8005530:	f008 ff1a 	bl	800e368 <FreeRTOS_CLIProcessCommand>
 8005534:	4682      	mov	sl, r0
 8005536:	e7f0      	b.n	800551a <CLI_CommandParser+0x40e>
 8005538:	46b2      	mov	sl, r6
 800553a:	e67c      	b.n	8005236 <CLI_CommandParser+0x12a>
 800553c:	20000da8 	.word	0x20000da8
 8005540:	20000b3c 	.word	0x20000b3c
 8005544:	20000a98 	.word	0x20000a98
 8005548:	20000a9c 	.word	0x20000a9c
 800554c:	080196d4 	.word	0x080196d4

08005550 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8005550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005552:	46de      	mov	lr, fp
 8005554:	4657      	mov	r7, sl
 8005556:	464e      	mov	r6, r9
 8005558:	4645      	mov	r5, r8
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800555a:	2101      	movs	r1, #1
	char cRxedChar ='\0';
 800555c:	2300      	movs	r3, #0
void prvCLITask(void *pvParameters){
 800555e:	b5e0      	push	{r5, r6, r7, lr}
 8005560:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 8005562:	aa02      	add	r2, sp, #8
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005564:	4249      	negs	r1, r1
 8005566:	2001      	movs	r0, #1
	char cRxedChar ='\0';
 8005568:	73d3      	strb	r3, [r2, #15]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800556a:	f00a f9db 	bl	800f924 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800556e:	f008 ff73 	bl	800e458 <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005572:	23e1      	movs	r3, #225	; 0xe1
 8005574:	4a62      	ldr	r2, [pc, #392]	; (8005700 <prvCLITask+0x1b0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005576:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005578:	6892      	ldr	r2, [r2, #8]
 800557a:	031b      	lsls	r3, r3, #12
 800557c:	429a      	cmp	r2, r3
 800557e:	d011      	beq.n	80055a4 <prvCLITask+0x54>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005580:	2501      	movs	r5, #1
 8005582:	4b60      	ldr	r3, [pc, #384]	; (8005704 <prvCLITask+0x1b4>)
 8005584:	7819      	ldrb	r1, [r3, #0]
 8005586:	9302      	str	r3, [sp, #8]
			if(port != PcPort)
 8005588:	428d      	cmp	r5, r1
 800558a:	d006      	beq.n	800559a <prvCLITask+0x4a>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 800558c:	21e1      	movs	r1, #225	; 0xe1
 800558e:	0028      	movs	r0, r5
 8005590:	0309      	lsls	r1, r1, #12
 8005592:	f008 fd7f 	bl	800e094 <UpdateBaudrate>
 8005596:	9b02      	ldr	r3, [sp, #8]
 8005598:	7819      	ldrb	r1, [r3, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800559a:	3501      	adds	r5, #1
 800559c:	b2ed      	uxtb	r5, r5
 800559e:	2d06      	cmp	r5, #6
 80055a0:	d1f2      	bne.n	8005588 <prvCLITask+0x38>
 80055a2:	e002      	b.n	80055aa <prvCLITask+0x5a>
 80055a4:	4b57      	ldr	r3, [pc, #348]	; (8005704 <prvCLITask+0x1b4>)
 80055a6:	7819      	ldrb	r1, [r3, #0]
 80055a8:	9302      	str	r3, [sp, #8]
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 80055aa:	4b57      	ldr	r3, [pc, #348]	; (8005708 <prvCLITask+0x1b8>)
 80055ac:	4d57      	ldr	r5, [pc, #348]	; (800570c <prvCLITask+0x1bc>)
 80055ae:	881a      	ldrh	r2, [r3, #0]
 80055b0:	3538      	adds	r5, #56	; 0x38
 80055b2:	0053      	lsls	r3, r2, #1
 80055b4:	189b      	adds	r3, r3, r2
 80055b6:	4a56      	ldr	r2, [pc, #344]	; (8005710 <prvCLITask+0x1c0>)
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	189b      	adds	r3, r3, r2
 80055bc:	4a55      	ldr	r2, [pc, #340]	; (8005714 <prvCLITask+0x1c4>)
 80055be:	0028      	movs	r0, r5
 80055c0:	7812      	ldrb	r2, [r2, #0]
 80055c2:	9100      	str	r1, [sp, #0]
 80055c4:	4954      	ldr	r1, [pc, #336]	; (8005718 <prvCLITask+0x1c8>)
 80055c6:	f00e ff2d 	bl	8014424 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 80055ca:	22a4      	movs	r2, #164	; 0xa4
 80055cc:	9c02      	ldr	r4, [sp, #8]
 80055ce:	230a      	movs	r3, #10
 80055d0:	0092      	lsls	r2, r2, #2
 80055d2:	4952      	ldr	r1, [pc, #328]	; (800571c <prvCLITask+0x1cc>)
 80055d4:	7820      	ldrb	r0, [r4, #0]
 80055d6:	f008 fd19 	bl	800e00c <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 80055da:	0028      	movs	r0, r5
 80055dc:	f7fa fd9c 	bl	8000118 <strlen>
 80055e0:	230a      	movs	r3, #10
 80055e2:	b282      	uxth	r2, r0
 80055e4:	0029      	movs	r1, r5
 80055e6:	7820      	ldrb	r0, [r4, #0]
 80055e8:	f008 fd10 	bl	800e00c <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 80055ec:	2300      	movs	r3, #0
 80055ee:	4a4c      	ldr	r2, [pc, #304]	; (8005720 <prvCLITask+0x1d0>)
				UARTRxBuf[PcPort - 1][chr] =0;
 80055f0:	2600      	movs	r6, #0
 80055f2:	4690      	mov	r8, r2
 80055f4:	4699      	mov	r9, r3
 80055f6:	4d4b      	ldr	r5, [pc, #300]	; (8005724 <prvCLITask+0x1d4>)
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80055f8:	9b02      	ldr	r3, [sp, #8]
 80055fa:	781f      	ldrb	r7, [r3, #0]
 80055fc:	1e7c      	subs	r4, r7, #1
 80055fe:	5d28      	ldrb	r0, [r5, r4]
 8005600:	b283      	uxth	r3, r0
 8005602:	2bbf      	cmp	r3, #191	; 0xbf
 8005604:	d81d      	bhi.n	8005642 <prvCLITask+0xf2>
			if(UARTRxBuf[PcPort - 1][chr]){
 8005606:	0062      	lsls	r2, r4, #1
 8005608:	1911      	adds	r1, r2, r4
 800560a:	0189      	lsls	r1, r1, #6
 800560c:	4441      	add	r1, r8
 800560e:	4692      	mov	sl, r2
 8005610:	5c0a      	ldrb	r2, [r1, r0]
 8005612:	2a00      	cmp	r2, #0
 8005614:	d10d      	bne.n	8005632 <prvCLITask+0xe2>
 8005616:	1c4a      	adds	r2, r1, #1
 8005618:	4693      	mov	fp, r2
			if(chr == MSG_RX_BUF_SIZE - 1){
 800561a:	2bbf      	cmp	r3, #191	; 0xbf
 800561c:	d135      	bne.n	800568a <prvCLITask+0x13a>
			if(UARTRxBuf[PcPort - 1][chr]){
 800561e:	465b      	mov	r3, fp
 8005620:	781a      	ldrb	r2, [r3, #0]
				chr =UARTRxBufIndex[PcPort - 1] =0;
 8005622:	552e      	strb	r6, [r5, r4]
			if(UARTRxBuf[PcPort - 1][chr]){
 8005624:	2a00      	cmp	r2, #0
 8005626:	d160      	bne.n	80056ea <prvCLITask+0x19a>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005628:	2302      	movs	r3, #2
			if(UARTRxBuf[PcPort - 1][chr]){
 800562a:	5cca      	ldrb	r2, [r1, r3]
 800562c:	0018      	movs	r0, r3
 800562e:	2a00      	cmp	r2, #0
 8005630:	d0f3      	beq.n	800561a <prvCLITask+0xca>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 8005632:	a902      	add	r1, sp, #8
 8005634:	73ca      	strb	r2, [r1, #15]
				UARTRxBuf[PcPort - 1][chr] =0;
 8005636:	4652      	mov	r2, sl
 8005638:	1912      	adds	r2, r2, r4
 800563a:	0192      	lsls	r2, r2, #6
 800563c:	4442      	add	r2, r8
 800563e:	5416      	strb	r6, [r2, r0]
				UARTRxBufIndex[PcPort - 1] =chr;
 8005640:	552b      	strb	r3, [r5, r4]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 8005642:	a802      	add	r0, sp, #8
 8005644:	4684      	mov	ip, r0
 8005646:	210f      	movs	r1, #15
 8005648:	230a      	movs	r3, #10
 800564a:	2201      	movs	r2, #1
 800564c:	4461      	add	r1, ip
 800564e:	0038      	movs	r0, r7
 8005650:	f008 fcdc 	bl	800e00c <writePxITMutex>
		if(cRxedChar == '\r'){
 8005654:	ab02      	add	r3, sp, #8
 8005656:	7bdb      	ldrb	r3, [r3, #15]
 8005658:	2b0d      	cmp	r3, #13
 800565a:	d026      	beq.n	80056aa <prvCLITask+0x15a>
			if(cRxedChar == '\n'){
 800565c:	2b0a      	cmp	r3, #10
 800565e:	d011      	beq.n	8005684 <prvCLITask+0x134>
			else if(cRxedChar == '\b' || cRxedChar == 127 ){
 8005660:	2b08      	cmp	r3, #8
 8005662:	d015      	beq.n	8005690 <prvCLITask+0x140>
 8005664:	2b7f      	cmp	r3, #127	; 0x7f
 8005666:	d013      	beq.n	8005690 <prvCLITask+0x140>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8005668:	001a      	movs	r2, r3
 800566a:	3a20      	subs	r2, #32
 800566c:	2a5e      	cmp	r2, #94	; 0x5e
 800566e:	d809      	bhi.n	8005684 <prvCLITask+0x134>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005670:	464a      	mov	r2, r9
 8005672:	2a31      	cmp	r2, #49	; 0x31
 8005674:	dc06      	bgt.n	8005684 <prvCLITask+0x134>
						cInputIndex++;
 8005676:	464c      	mov	r4, r9
						cInputString[cInputIndex] =cRxedChar;
 8005678:	4a2b      	ldr	r2, [pc, #172]	; (8005728 <prvCLITask+0x1d8>)
						cInputIndex++;
 800567a:	3401      	adds	r4, #1
						cInputString[cInputIndex] =cRxedChar;
 800567c:	444a      	add	r2, r9
 800567e:	7513      	strb	r3, [r2, #20]
						cInputIndex++;
 8005680:	b263      	sxtb	r3, r4
 8005682:	4699      	mov	r9, r3
		taskYIELD();
 8005684:	f00a fc14 	bl	800feb0 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005688:	e7b6      	b.n	80055f8 <prvCLITask+0xa8>
 800568a:	3301      	adds	r3, #1
 800568c:	b29b      	uxth	r3, r3
 800568e:	e7cc      	b.n	800562a <prvCLITask+0xda>
				if(cInputIndex > 0){
 8005690:	464b      	mov	r3, r9
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f6      	beq.n	8005684 <prvCLITask+0x134>
					cInputIndex--;
 8005696:	464c      	mov	r4, r9
 8005698:	3c01      	subs	r4, #1
 800569a:	b2e3      	uxtb	r3, r4
 800569c:	b25a      	sxtb	r2, r3
 800569e:	4691      	mov	r9, r2
					cInputString[cInputIndex] ='\0';
 80056a0:	4a21      	ldr	r2, [pc, #132]	; (8005728 <prvCLITask+0x1d8>)
 80056a2:	4694      	mov	ip, r2
 80056a4:	4463      	add	r3, ip
 80056a6:	751e      	strb	r6, [r3, #20]
 80056a8:	e7ec      	b.n	8005684 <prvCLITask+0x134>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 80056aa:	9b02      	ldr	r3, [sp, #8]
 80056ac:	2202      	movs	r2, #2
 80056ae:	7818      	ldrb	r0, [r3, #0]
 80056b0:	491e      	ldr	r1, [pc, #120]	; (800572c <prvCLITask+0x1dc>)
 80056b2:	230a      	movs	r3, #10
 80056b4:	f008 fcaa 	bl	800e00c <writePxITMutex>
			if(cInputIndex == 0){
 80056b8:	464b      	mov	r3, r9
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d018      	beq.n	80056f0 <prvCLITask+0x1a0>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 80056be:	4c1a      	ldr	r4, [pc, #104]	; (8005728 <prvCLITask+0x1d8>)
 80056c0:	9b02      	ldr	r3, [sp, #8]
 80056c2:	3414      	adds	r4, #20
 80056c4:	7818      	ldrb	r0, [r3, #0]
 80056c6:	0022      	movs	r2, r4
 80056c8:	9b03      	ldr	r3, [sp, #12]
 80056ca:	2101      	movs	r1, #1
 80056cc:	f7ff fd1e 	bl	800510c <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 80056d0:	480e      	ldr	r0, [pc, #56]	; (800570c <prvCLITask+0x1bc>)
 80056d2:	0021      	movs	r1, r4
 80056d4:	3060      	adds	r0, #96	; 0x60
 80056d6:	f00e fee1 	bl	801449c <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 80056da:	2232      	movs	r2, #50	; 0x32
 80056dc:	2100      	movs	r1, #0
 80056de:	0020      	movs	r0, r4
 80056e0:	f00e fca6 	bl	8014030 <memset>
			cInputIndex =0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	4699      	mov	r9, r3
 80056e8:	e7cc      	b.n	8005684 <prvCLITask+0x134>
			if(UARTRxBuf[PcPort - 1][chr]){
 80056ea:	2001      	movs	r0, #1
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80056ec:	2301      	movs	r3, #1
 80056ee:	e7a0      	b.n	8005632 <prvCLITask+0xe2>
				strcpy((char* )cInputString,(char* )cLastInputString);
 80056f0:	4906      	ldr	r1, [pc, #24]	; (800570c <prvCLITask+0x1bc>)
 80056f2:	480d      	ldr	r0, [pc, #52]	; (8005728 <prvCLITask+0x1d8>)
 80056f4:	3160      	adds	r1, #96	; 0x60
 80056f6:	3014      	adds	r0, #20
 80056f8:	f00e fed0 	bl	801449c <strcpy>
 80056fc:	e7df      	b.n	80056be <prvCLITask+0x16e>
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	20006ccc 	.word	0x20006ccc
 8005704:	20000c28 	.word	0x20000c28
 8005708:	20000028 	.word	0x20000028
 800570c:	20001140 	.word	0x20001140
 8005710:	08018874 	.word	0x08018874
 8005714:	20000a98 	.word	0x20000a98
 8005718:	08019788 	.word	0x08019788
 800571c:	080197b4 	.word	0x080197b4
 8005720:	20001340 	.word	0x20001340
 8005724:	20001300 	.word	0x20001300
 8005728:	200011c0 	.word	0x200011c0
 800572c:	0801afa0 	.word	0x0801afa0

08005730 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005732:	4b1a      	ldr	r3, [pc, #104]	; (800579c <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005734:	000c      	movs	r4, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005736:	781a      	ldrb	r2, [r3, #0]
 8005738:	3a01      	subs	r2, #1
 800573a:	0093      	lsls	r3, r2, #2
 800573c:	189b      	adds	r3, r3, r2
 800573e:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <ParseSnippetCommand+0x70>)
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	18d3      	adds	r3, r2, r3
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d018      	beq.n	800577c <ParseSnippetCommand+0x4c>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 800574a:	4e16      	ldr	r6, [pc, #88]	; (80057a4 <ParseSnippetCommand+0x74>)
 800574c:	6cb5      	ldr	r5, [r6, #72]	; 0x48
 800574e:	2d00      	cmp	r5, #0
 8005750:	d016      	beq.n	8005780 <ParseSnippetCommand+0x50>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 8005752:	782b      	ldrb	r3, [r5, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00e      	beq.n	8005776 <ParseSnippetCommand+0x46>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005758:	2113      	movs	r1, #19
 800575a:	0028      	movs	r0, r5
 800575c:	f00e fe90 	bl	8014480 <strchr>
 8005760:	1e07      	subs	r7, r0, #0
	if(ptrEnd != NULL){
 8005762:	d010      	beq.n	8005786 <ParseSnippetCommand+0x56>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005764:	1b42      	subs	r2, r0, r5
 8005766:	0029      	movs	r1, r5
 8005768:	0020      	movs	r0, r4
 800576a:	f00e feb0 	bl	80144ce <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 800576e:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 8005770:	3701      	adds	r7, #1
 8005772:	64b7      	str	r7, [r6, #72]	; 0x48
}
 8005774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ptrStart =0;		// Initialize the start pointer for next Snippet
 8005776:	64b3      	str	r3, [r6, #72]	; 0x48
		return false;
 8005778:	2000      	movs	r0, #0
 800577a:	e7fb      	b.n	8005774 <ParseSnippetCommand+0x44>
		return false;
 800577c:	2000      	movs	r0, #0
 800577e:	e7f9      	b.n	8005774 <ParseSnippetCommand+0x44>
		ptrStart =snippetBuffer;
 8005780:	64b0      	str	r0, [r6, #72]	; 0x48
 8005782:	0005      	movs	r5, r0
 8005784:	e7e5      	b.n	8005752 <ParseSnippetCommand+0x22>
		strcpy((char* )cliBuffer,ptrStart);
 8005786:	0029      	movs	r1, r5
 8005788:	0020      	movs	r0, r4
 800578a:	f00e fe87 	bl	801449c <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 800578e:	0020      	movs	r0, r4
 8005790:	f7fa fcc2 	bl	8000118 <strlen>
 8005794:	182d      	adds	r5, r5, r0
 8005796:	64b5      	str	r5, [r6, #72]	; 0x48
	return true;
 8005798:	2001      	movs	r0, #1
 800579a:	e7eb      	b.n	8005774 <ParseSnippetCommand+0x44>
 800579c:	20001140 	.word	0x20001140
 80057a0:	20006ce8 	.word	0x20006ce8
 80057a4:	200011c0 	.word	0x200011c0

080057a8 <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 80057a8:	0083      	lsls	r3, r0, #2
bool CheckSnippetCondition(uint8_t index){
 80057aa:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 80057ac:	1818      	adds	r0, r3, r0
 80057ae:	492e      	ldr	r1, [pc, #184]	; (8005868 <CheckSnippetCondition+0xc0>)
 80057b0:	0080      	lsls	r0, r0, #2
 80057b2:	5c0b      	ldrb	r3, [r1, r0]
bool CheckSnippetCondition(uint8_t index){
 80057b4:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d020      	beq.n	80057fc <CheckSnippetCondition+0x54>
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d11b      	bne.n	80057f6 <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80057be:	180c      	adds	r4, r1, r0
 80057c0:	78e2      	ldrb	r2, [r4, #3]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80057c2:	3006      	adds	r0, #6
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80057c4:	3a01      	subs	r2, #1
 80057c6:	0053      	lsls	r3, r2, #1
 80057c8:	189b      	adds	r3, r3, r2
 80057ca:	4a28      	ldr	r2, [pc, #160]	; (800586c <CheckSnippetCondition+0xc4>)
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	589b      	ldr	r3, [r3, r2]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80057d0:	1841      	adds	r1, r0, r1
 80057d2:	2204      	movs	r2, #4
 80057d4:	a801      	add	r0, sp, #4
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80057d6:	681d      	ldr	r5, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80057d8:	f00e fc21 	bl	801401e <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 80057dc:	7863      	ldrb	r3, [r4, #1]
 80057de:	2b06      	cmp	r3, #6
 80057e0:	d809      	bhi.n	80057f6 <CheckSnippetCondition+0x4e>
 80057e2:	4a23      	ldr	r2, [pc, #140]	; (8005870 <CheckSnippetCondition+0xc8>)
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	58d3      	ldr	r3, [r2, r3]
 80057e8:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 80057ea:	1c29      	adds	r1, r5, #0
 80057ec:	9801      	ldr	r0, [sp, #4]
 80057ee:	f7fa fe89 	bl	8000504 <__aeabi_fcmpgt>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d114      	bne.n	8005820 <CheckSnippetCondition+0x78>
			
		default:
			break;
	}
	
	return false;
 80057f6:	2000      	movs	r0, #0
}
 80057f8:	b003      	add	sp, #12
 80057fa:	bd30      	pop	{r4, r5, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 80057fc:	1808      	adds	r0, r1, r0
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 80057fe:	7882      	ldrb	r2, [r0, #2]
 8005800:	78c0      	ldrb	r0, [r0, #3]
 8005802:	00d3      	lsls	r3, r2, #3
 8005804:	189b      	adds	r3, r3, r2
 8005806:	4a1b      	ldr	r2, [pc, #108]	; (8005874 <CheckSnippetCondition+0xcc>)
 8005808:	5c9b      	ldrb	r3, [r3, r2]
 800580a:	1a18      	subs	r0, r3, r0
 800580c:	4243      	negs	r3, r0
 800580e:	4158      	adcs	r0, r3
 8005810:	b2c0      	uxtb	r0, r0
 8005812:	e7f1      	b.n	80057f8 <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005814:	1c29      	adds	r1, r5, #0
 8005816:	9801      	ldr	r0, [sp, #4]
 8005818:	f7fa fe5a 	bl	80004d0 <__aeabi_fcmpeq>
 800581c:	2800      	cmp	r0, #0
 800581e:	d1ea      	bne.n	80057f6 <CheckSnippetCondition+0x4e>
 8005820:	2100      	movs	r1, #0
 8005822:	1c28      	adds	r0, r5, #0
 8005824:	f7fa fe54 	bl	80004d0 <__aeabi_fcmpeq>
 8005828:	4243      	negs	r3, r0
 800582a:	4158      	adcs	r0, r3
 800582c:	e7e4      	b.n	80057f8 <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 800582e:	1c29      	adds	r1, r5, #0
 8005830:	9801      	ldr	r0, [sp, #4]
 8005832:	f7fa fe4d 	bl	80004d0 <__aeabi_fcmpeq>
 8005836:	1e43      	subs	r3, r0, #1
 8005838:	4198      	sbcs	r0, r3
 800583a:	e7dd      	b.n	80057f8 <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 800583c:	1c29      	adds	r1, r5, #0
 800583e:	9801      	ldr	r0, [sp, #4]
 8005840:	f7fa fe4c 	bl	80004dc <__aeabi_fcmplt>
 8005844:	1e43      	subs	r3, r0, #1
 8005846:	4198      	sbcs	r0, r3
 8005848:	e7d6      	b.n	80057f8 <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 800584a:	1c29      	adds	r1, r5, #0
 800584c:	9801      	ldr	r0, [sp, #4]
 800584e:	f7fa fe4f 	bl	80004f0 <__aeabi_fcmple>
 8005852:	1e43      	subs	r3, r0, #1
 8005854:	4198      	sbcs	r0, r3
 8005856:	e7cf      	b.n	80057f8 <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 8005858:	1c29      	adds	r1, r5, #0
 800585a:	9801      	ldr	r0, [sp, #4]
 800585c:	f7fa fe5c 	bl	8000518 <__aeabi_fcmpge>
 8005860:	2800      	cmp	r0, #0
 8005862:	d1dd      	bne.n	8005820 <CheckSnippetCondition+0x78>
 8005864:	e7c7      	b.n	80057f6 <CheckSnippetCondition+0x4e>
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	20006ce8 	.word	0x20006ce8
 800586c:	20000094 	.word	0x20000094
 8005870:	0801890c 	.word	0x0801890c
 8005874:	2000172c 	.word	0x2000172c

08005878 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 8005878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587a:	46de      	mov	lr, fp
 800587c:	464e      	mov	r6, r9
 800587e:	4645      	mov	r5, r8
 8005880:	4657      	mov	r7, sl
 8005882:	b5e0      	push	{r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005884:	f008 fde8 	bl	800e458 <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005888:	4b23      	ldr	r3, [pc, #140]	; (8005918 <ExecuteSnippet+0xa0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800588a:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 800588c:	4698      	mov	r8, r3
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d039      	beq.n	8005908 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005894:	4b21      	ldr	r3, [pc, #132]	; (800591c <ExecuteSnippet+0xa4>)
 8005896:	4f22      	ldr	r7, [pc, #136]	; (8005920 <ExecuteSnippet+0xa8>)
 8005898:	469b      	mov	fp, r3
 800589a:	2320      	movs	r3, #32
 800589c:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <ExecuteSnippet+0xac>)
 80058a0:	4d21      	ldr	r5, [pc, #132]	; (8005928 <ExecuteSnippet+0xb0>)
	for(s =0; s < numOfRecordedSnippets; s++){
 80058a2:	2400      	movs	r4, #0
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80058a4:	374c      	adds	r7, #76	; 0x4c
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80058a6:	4699      	mov	r9, r3
 80058a8:	e006      	b.n	80058b8 <ExecuteSnippet+0x40>
	for(s =0; s < numOfRecordedSnippets; s++){
 80058aa:	4643      	mov	r3, r8
 80058ac:	3401      	adds	r4, #1
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	b2a4      	uxth	r4, r4
 80058b2:	3514      	adds	r5, #20
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	d927      	bls.n	8005908 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
 80058b8:	7c2b      	ldrb	r3, [r5, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0f5      	beq.n	80058aa <ExecuteSnippet+0x32>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 80058be:	b2e0      	uxtb	r0, r4
 80058c0:	f7ff ff72 	bl	80057a8 <CheckSnippetCondition>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d0f0      	beq.n	80058aa <ExecuteSnippet+0x32>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80058c8:	465b      	mov	r3, fp
 80058ca:	4652      	mov	r2, sl
 80058cc:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80058ce:	e00e      	b.n	80058ee <ExecuteSnippet+0x76>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80058d0:	464b      	mov	r3, r9
 80058d2:	003a      	movs	r2, r7
 80058d4:	7818      	ldrb	r0, [r3, #0]
 80058d6:	2100      	movs	r1, #0
 80058d8:	0033      	movs	r3, r6
 80058da:	f7ff fc17 	bl	800510c <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80058de:	0030      	movs	r0, r6
 80058e0:	f7fa fc1a 	bl	8000118 <strlen>
 80058e4:	2100      	movs	r1, #0
 80058e6:	0002      	movs	r2, r0
 80058e8:	0030      	movs	r0, r6
 80058ea:	f00e fba1 	bl	8014030 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80058ee:	0039      	movs	r1, r7
 80058f0:	68e8      	ldr	r0, [r5, #12]
 80058f2:	f7ff ff1d 	bl	8005730 <ParseSnippetCommand>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d1ea      	bne.n	80058d0 <ExecuteSnippet+0x58>
	for(s =0; s < numOfRecordedSnippets; s++){
 80058fa:	4643      	mov	r3, r8
 80058fc:	3401      	adds	r4, #1
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	b2a4      	uxth	r4, r4
 8005902:	3514      	adds	r5, #20
 8005904:	42a3      	cmp	r3, r4
 8005906:	d8d7      	bhi.n	80058b8 <ExecuteSnippet+0x40>
			}
		}
	}
	
	return result;
}
 8005908:	2000      	movs	r0, #0
 800590a:	bc3c      	pop	{r2, r3, r4, r5}
 800590c:	4690      	mov	r8, r2
 800590e:	4699      	mov	r9, r3
 8005910:	46a2      	mov	sl, r4
 8005912:	46ab      	mov	fp, r5
 8005914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	20001140 	.word	0x20001140
 800591c:	20006c4c 	.word	0x20006c4c
 8005920:	200011c0 	.word	0x200011c0
 8005924:	20000c28 	.word	0x20000c28
 8005928:	20006ce8 	.word	0x20006ce8

0800592c <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 800592c:	2000      	movs	r0, #0
 800592e:	4770      	bx	lr

08005930 <setBaudrateCommand>:

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005930:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005932:	b570      	push	{r4, r5, r6, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	0004      	movs	r4, r0
 8005938:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0;
 800593a:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 800593c:	9301      	str	r3, [sp, #4]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800593e:	2800      	cmp	r0, #0
 8005940:	d017      	beq.n	8005972 <setBaudrateCommand+0x42>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005942:	466a      	mov	r2, sp
 8005944:	2101      	movs	r1, #1
 8005946:	0028      	movs	r0, r5
 8005948:	f008 fd8a 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800594c:	2300      	movs	r3, #0
 800594e:	56c3      	ldrsb	r3, [r0, r3]
 8005950:	2b70      	cmp	r3, #112	; 0x70
 8005952:	d010      	beq.n	8005976 <setBaudrateCommand+0x46>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005954:	aa01      	add	r2, sp, #4
 8005956:	2102      	movs	r1, #2
 8005958:	0028      	movs	r0, r5
 800595a:	f008 fd81 	bl	800e460 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 800595e:	f00e f89e 	bl	8013a9e <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005962:	2213      	movs	r2, #19
 8005964:	4910      	ldr	r1, [pc, #64]	; (80059a8 <setBaudrateCommand+0x78>)
 8005966:	0020      	movs	r0, r4
 8005968:	f00e fb59 	bl	801401e <memcpy>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800596c:	2000      	movs	r0, #0
 800596e:	b002      	add	sp, #8
 8005970:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8005972:	b672      	cpsid	i
 8005974:	e7fe      	b.n	8005974 <setBaudrateCommand+0x44>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005976:	3001      	adds	r0, #1
 8005978:	f00e f891 	bl	8013a9e <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800597c:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800597e:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005980:	2102      	movs	r1, #2
 8005982:	0028      	movs	r0, r5
 8005984:	f008 fd6c 	bl	800e460 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005988:	f00e f889 	bl	8013a9e <atol>
 800598c:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 800598e:	b2f0      	uxtb	r0, r6
 8005990:	0029      	movs	r1, r5
 8005992:	f008 fb7f 	bl	800e094 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 8005996:	23ff      	movs	r3, #255	; 0xff
 8005998:	002a      	movs	r2, r5
 800599a:	4033      	ands	r3, r6
 800599c:	4903      	ldr	r1, [pc, #12]	; (80059ac <setBaudrateCommand+0x7c>)
 800599e:	0020      	movs	r0, r4
 80059a0:	f00e fd40 	bl	8014424 <sprintf>
 80059a4:	e7e2      	b.n	800596c <setBaudrateCommand+0x3c>
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	08019a70 	.word	0x08019a70
 80059ac:	08019a48 	.word	0x08019a48

080059b0 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059b0:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d101      	bne.n	80059ba <flashsizeCommand+0xa>
 80059b6:	b672      	cpsid	i
 80059b8:	e7fe      	b.n	80059b8 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80059ba:	4b03      	ldr	r3, [pc, #12]	; (80059c8 <flashsizeCommand+0x18>)
 80059bc:	4903      	ldr	r1, [pc, #12]	; (80059cc <flashsizeCommand+0x1c>)
 80059be:	881a      	ldrh	r2, [r3, #0]
 80059c0:	f00e fd30 	bl	8014424 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80059c4:	2000      	movs	r0, #0
 80059c6:	bd10      	pop	{r4, pc}
 80059c8:	1ffff7cc 	.word	0x1ffff7cc
 80059cc:	08019a84 	.word	0x08019a84

080059d0 <GetReadPrecentageCommand>:
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80059d0:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059d2:	b510      	push	{r4, lr}
 80059d4:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 80059d6:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80059d8:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059da:	0004      	movs	r4, r0
	float ADC_Value_CLI =0;
 80059dc:	9301      	str	r3, [sp, #4]
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059de:	0010      	movs	r0, r2
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80059e0:	2c00      	cmp	r4, #0
 80059e2:	d00f      	beq.n	8005a04 <GetReadPrecentageCommand+0x34>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059e4:	466a      	mov	r2, sp
 80059e6:	2101      	movs	r1, #1
 80059e8:	f008 fd3a 	bl	800e460 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80059ec:	7803      	ldrb	r3, [r0, #0]
 80059ee:	3b32      	subs	r3, #50	; 0x32
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d909      	bls.n	8005a08 <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059f4:	2215      	movs	r2, #21
 80059f6:	490c      	ldr	r1, [pc, #48]	; (8005a28 <GetReadPrecentageCommand+0x58>)
 80059f8:	0020      	movs	r0, r4
 80059fa:	f00e fb10 	bl	801401e <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80059fe:	2000      	movs	r0, #0
 8005a00:	b002      	add	sp, #8
 8005a02:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8005a04:	b672      	cpsid	i
 8005a06:	e7fe      	b.n	8005a06 <GetReadPrecentageCommand+0x36>
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005a08:	f00e f849 	bl	8013a9e <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8005a0c:	a901      	add	r1, sp, #4
 8005a0e:	b2c0      	uxtb	r0, r0
 8005a10:	f002 ff54 	bl	80088bc <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8005a14:	9801      	ldr	r0, [sp, #4]
 8005a16:	f7fd f9bb 	bl	8002d90 <__aeabi_f2d>
 8005a1a:	0002      	movs	r2, r0
 8005a1c:	000b      	movs	r3, r1
 8005a1e:	0020      	movs	r0, r4
 8005a20:	4902      	ldr	r1, [pc, #8]	; (8005a2c <GetReadPrecentageCommand+0x5c>)
 8005a22:	f00e fcff 	bl	8014424 <sprintf>
 8005a26:	e7ea      	b.n	80059fe <GetReadPrecentageCommand+0x2e>
 8005a28:	08019ac8 	.word	0x08019ac8
 8005a2c:	08019aa4 	.word	0x08019aa4

08005a30 <ReadVrefCommand>:
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005a30:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a32:	b510      	push	{r4, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	1e04      	subs	r4, r0, #0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005a3c:	d101      	bne.n	8005a42 <ReadVrefCommand+0x12>
 8005a3e:	b672      	cpsid	i
 8005a40:	e7fe      	b.n	8005a40 <ReadVrefCommand+0x10>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005a42:	a901      	add	r1, sp, #4
 8005a44:	4668      	mov	r0, sp
 8005a46:	f002 fe73 	bl	8008730 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005a4a:	4669      	mov	r1, sp
 8005a4c:	0020      	movs	r0, r4
 8005a4e:	f00e fd25 	bl	801449c <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005a52:	9801      	ldr	r0, [sp, #4]
 8005a54:	f7fd f99c 	bl	8002d90 <__aeabi_f2d>
 8005a58:	0002      	movs	r2, r0
 8005a5a:	000b      	movs	r3, r1
 8005a5c:	0020      	movs	r0, r4
 8005a5e:	4903      	ldr	r1, [pc, #12]	; (8005a6c <ReadVrefCommand+0x3c>)
 8005a60:	f00e fce0 	bl	8014424 <sprintf>
}
 8005a64:	2000      	movs	r0, #0
 8005a66:	b002      	add	sp, #8
 8005a68:	bd10      	pop	{r4, pc}
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	08019ae0 	.word	0x08019ae0

08005a70 <ReadTempCommand>:
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005a70:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a72:	b510      	push	{r4, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	1e04      	subs	r4, r0, #0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005a7c:	d101      	bne.n	8005a82 <ReadTempCommand+0x12>
 8005a7e:	b672      	cpsid	i
 8005a80:	e7fe      	b.n	8005a80 <ReadTempCommand+0x10>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005a82:	a901      	add	r1, sp, #4
 8005a84:	4668      	mov	r0, sp
 8005a86:	f002 fe53 	bl	8008730 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005a8a:	4669      	mov	r1, sp
 8005a8c:	0020      	movs	r0, r4
 8005a8e:	f00e fd05 	bl	801449c <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005a92:	9800      	ldr	r0, [sp, #0]
 8005a94:	f7fd f97c 	bl	8002d90 <__aeabi_f2d>
 8005a98:	0002      	movs	r2, r0
 8005a9a:	000b      	movs	r3, r1
 8005a9c:	0020      	movs	r0, r4
 8005a9e:	4903      	ldr	r1, [pc, #12]	; (8005aac <ReadTempCommand+0x3c>)
 8005aa0:	f00e fcc0 	bl	8014424 <sprintf>
}
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	b002      	add	sp, #8
 8005aa8:	bd10      	pop	{r4, pc}
 8005aaa:	46c0      	nop			; (mov r8, r8)
 8005aac:	08019b08 	.word	0x08019b08

08005ab0 <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005ab0:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ab4:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005ab6:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005ab8:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005aba:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005abc:	0004      	movs	r4, r0
 8005abe:	0016      	movs	r6, r2
	float ADC_Value_CLI =0;
 8005ac0:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d017      	beq.n	8005af6 <ADCReadCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ac6:	aa01      	add	r2, sp, #4
 8005ac8:	2101      	movs	r1, #1
 8005aca:	0030      	movs	r0, r6
 8005acc:	f008 fcc8 	bl	800e460 <FreeRTOS_CLIGetParameter>
 8005ad0:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005ad2:	aa02      	add	r2, sp, #8
 8005ad4:	2102      	movs	r1, #2
 8005ad6:	0030      	movs	r0, r6
 8005ad8:	f008 fcc2 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005adc:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005ade:	0007      	movs	r7, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005ae0:	3b32      	subs	r3, #50	; 0x32
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d909      	bls.n	8005afa <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005ae6:	2215      	movs	r2, #21
 8005ae8:	491a      	ldr	r1, [pc, #104]	; (8005b54 <ADCReadCommand+0xa4>)
 8005aea:	0020      	movs	r0, r4
 8005aec:	f00e fa97 	bl	801401e <memcpy>
}
 8005af0:	2000      	movs	r0, #0
 8005af2:	b005      	add	sp, #20
 8005af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005af6:	b672      	cpsid	i
 8005af8:	e7fe      	b.n	8005af8 <ADCReadCommand+0x48>
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005afa:	0028      	movs	r0, r5
 8005afc:	f00d ffcf 	bl	8013a9e <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005b00:	4e15      	ldr	r6, [pc, #84]	; (8005b58 <ADCReadCommand+0xa8>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005b02:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005b04:	0031      	movs	r1, r6
 8005b06:	0038      	movs	r0, r7
 8005b08:	f7fa fafc 	bl	8000104 <strcmp>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d005      	beq.n	8005b1c <ADCReadCommand+0x6c>
 8005b10:	4912      	ldr	r1, [pc, #72]	; (8005b5c <ADCReadCommand+0xac>)
 8005b12:	0038      	movs	r0, r7
 8005b14:	f7fa faf6 	bl	8000104 <strcmp>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d115      	bne.n	8005b48 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 8005b1c:	0031      	movs	r1, r6
 8005b1e:	0028      	movs	r0, r5
 8005b20:	f002 ffb8 	bl	8008a94 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005b24:	aa03      	add	r2, sp, #12
 8005b26:	0031      	movs	r1, r6
 8005b28:	0028      	movs	r0, r5
 8005b2a:	f003 f805 	bl	8008b38 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 8005b2e:	a903      	add	r1, sp, #12
 8005b30:	0020      	movs	r0, r4
 8005b32:	f00e fcb3 	bl	801449c <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005b36:	9803      	ldr	r0, [sp, #12]
 8005b38:	f7fa fd42 	bl	80005c0 <__aeabi_f2uiz>
 8005b3c:	4908      	ldr	r1, [pc, #32]	; (8005b60 <ADCReadCommand+0xb0>)
 8005b3e:	b282      	uxth	r2, r0
 8005b40:	0020      	movs	r0, r4
 8005b42:	f00e fc6f 	bl	8014424 <sprintf>
 8005b46:	e7d3      	b.n	8005af0 <ADCReadCommand+0x40>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b48:	2212      	movs	r2, #18
 8005b4a:	4906      	ldr	r1, [pc, #24]	; (8005b64 <ADCReadCommand+0xb4>)
 8005b4c:	0020      	movs	r0, r4
 8005b4e:	f00e fa66 	bl	801401e <memcpy>
 8005b52:	e7cd      	b.n	8005af0 <ADCReadCommand+0x40>
 8005b54:	08019ac8 	.word	0x08019ac8
 8005b58:	08019b2c 	.word	0x08019b2c
 8005b5c:	08019b30 	.word	0x08019b30
 8005b60:	08019b38 	.word	0x08019b38
 8005b64:	08019b48 	.word	0x08019b48

08005b68 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b6a:	4645      	mov	r5, r8
 8005b6c:	46de      	mov	lr, fp
 8005b6e:	4657      	mov	r7, sl
 8005b70:	464e      	mov	r6, r9
	portBASE_TYPE xParameterStringLength1 =0;
 8005b72:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b74:	b5e0      	push	{r5, r6, r7, lr}
 8005b76:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005b78:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 8005b7a:	4b5f      	ldr	r3, [pc, #380]	; (8005cf8 <testportCommand+0x190>)
 8005b7c:	ad02      	add	r5, sp, #8
 8005b7e:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b80:	0004      	movs	r4, r0
	char WriteVaule[1] ="H";
 8005b82:	702b      	strb	r3, [r5, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b84:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005b86:	2c00      	cmp	r4, #0
 8005b88:	d100      	bne.n	8005b8c <testportCommand+0x24>
 8005b8a:	e074      	b.n	8005c76 <testportCommand+0x10e>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	aa03      	add	r2, sp, #12
 8005b90:	f008 fc66 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005b94:	4959      	ldr	r1, [pc, #356]	; (8005cfc <testportCommand+0x194>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b96:	0006      	movs	r6, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005b98:	f7fa fab4 	bl	8000104 <strcmp>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d159      	bne.n	8005c54 <testportCommand+0xec>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005ba0:	2701      	movs	r7, #1
 8005ba2:	4e57      	ldr	r6, [pc, #348]	; (8005d00 <testportCommand+0x198>)
 8005ba4:	4b57      	ldr	r3, [pc, #348]	; (8005d04 <testportCommand+0x19c>)
 8005ba6:	7832      	ldrb	r2, [r6, #0]
 8005ba8:	189b      	adds	r3, r3, r2
 8005baa:	3b01      	subs	r3, #1
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	4698      	mov	r8, r3
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005bb0:	4b55      	ldr	r3, [pc, #340]	; (8005d08 <testportCommand+0x1a0>)
 8005bb2:	469b      	mov	fp, r3
 8005bb4:	b2fb      	uxtb	r3, r7
 8005bb6:	469a      	mov	sl, r3
			if(PcPort != ports){
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d107      	bne.n	8005bcc <testportCommand+0x64>
 8005bbc:	3701      	adds	r7, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 8005bbe:	2f06      	cmp	r7, #6
 8005bc0:	d051      	beq.n	8005c66 <testportCommand+0xfe>
 8005bc2:	7832      	ldrb	r2, [r6, #0]
 8005bc4:	b2fb      	uxtb	r3, r7
 8005bc6:	469a      	mov	sl, r3
			if(PcPort != ports){
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d0f7      	beq.n	8005bbc <testportCommand+0x54>
				WriteVaule[0] =rand();
 8005bcc:	f00e fa48 	bl	8014060 <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 8005bd0:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 8005bd2:	7028      	strb	r0, [r5, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	0029      	movs	r1, r5
 8005bda:	4699      	mov	r9, r3
 8005bdc:	4650      	mov	r0, sl
 8005bde:	3b5a      	subs	r3, #90	; 0x5a
 8005be0:	f008 f9e2 	bl	800dfa8 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005be4:	4650      	mov	r0, sl
 8005be6:	f008 fa67 	bl	800e0b8 <GetUart>
 8005bea:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 8005bec:	782a      	ldrb	r2, [r5, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005bee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d041      	beq.n	8005c7a <testportCommand+0x112>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005bf6:	003a      	movs	r2, r7
 8005bf8:	4944      	ldr	r1, [pc, #272]	; (8005d0c <testportCommand+0x1a4>)
 8005bfa:	0020      	movs	r0, r4
 8005bfc:	f00e fc12 	bl	8014424 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005c00:	0020      	movs	r0, r4
 8005c02:	f7fa fa89 	bl	8000118 <strlen>
 8005c06:	464b      	mov	r3, r9
 8005c08:	b282      	uxth	r2, r0
 8005c0a:	0021      	movs	r1, r4
 8005c0c:	7830      	ldrb	r0, [r6, #0]
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	230a      	movs	r3, #10
 8005c12:	f008 f9c9 	bl	800dfa8 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005c16:	2254      	movs	r2, #84	; 0x54
 8005c18:	493d      	ldr	r1, [pc, #244]	; (8005d10 <testportCommand+0x1a8>)
 8005c1a:	0020      	movs	r0, r4
 8005c1c:	f00e f9ff 	bl	801401e <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005c20:	2364      	movs	r3, #100	; 0x64
 8005c22:	7830      	ldrb	r0, [r6, #0]
 8005c24:	2253      	movs	r2, #83	; 0x53
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	0021      	movs	r1, r4
 8005c2a:	3b5a      	subs	r3, #90	; 0x5a
 8005c2c:	f008 f9bc 	bl	800dfa8 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005c30:	2301      	movs	r3, #1
 8005c32:	469c      	mov	ip, r3
 8005c34:	44e0      	add	r8, ip
 8005c36:	e002      	b.n	8005c3e <testportCommand+0xd6>
					Delay_ms(1);
 8005c38:	2001      	movs	r0, #1
 8005c3a:	f00a fa91 	bl	8010160 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005c3e:	7832      	ldrb	r2, [r6, #0]
 8005c40:	3a01      	subs	r2, #1
 8005c42:	0053      	lsls	r3, r2, #1
 8005c44:	189b      	adds	r3, r3, r2
 8005c46:	4642      	mov	r2, r8
 8005c48:	019b      	lsls	r3, r3, #6
 8005c4a:	445b      	add	r3, fp
 8005c4c:	5c9b      	ldrb	r3, [r3, r2]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f2      	beq.n	8005c38 <testportCommand+0xd0>
 8005c52:	e7b3      	b.n	8005bbc <testportCommand+0x54>
	else if(pcParameterString1[0] == 'p'){
 8005c54:	2300      	movs	r3, #0
 8005c56:	56f3      	ldrsb	r3, [r6, r3]
 8005c58:	2b70      	cmp	r3, #112	; 0x70
 8005c5a:	d01f      	beq.n	8005c9c <testportCommand+0x134>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c5c:	220f      	movs	r2, #15
 8005c5e:	492d      	ldr	r1, [pc, #180]	; (8005d14 <testportCommand+0x1ac>)
 8005c60:	0020      	movs	r0, r4
 8005c62:	f00e f9dc 	bl	801401e <memcpy>
}
 8005c66:	2000      	movs	r0, #0
 8005c68:	b005      	add	sp, #20
 8005c6a:	bc3c      	pop	{r2, r3, r4, r5}
 8005c6c:	4690      	mov	r8, r2
 8005c6e:	4699      	mov	r9, r3
 8005c70:	46a2      	mov	sl, r4
 8005c72:	46ab      	mov	fp, r5
 8005c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005c76:	b672      	cpsid	i
 8005c78:	e7fe      	b.n	8005c78 <testportCommand+0x110>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005c7a:	003a      	movs	r2, r7
 8005c7c:	4926      	ldr	r1, [pc, #152]	; (8005d18 <testportCommand+0x1b0>)
 8005c7e:	0020      	movs	r0, r4
 8005c80:	f00e fbd0 	bl	8014424 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005c84:	0020      	movs	r0, r4
 8005c86:	f7fa fa47 	bl	8000118 <strlen>
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	b282      	uxth	r2, r0
 8005c8e:	0021      	movs	r1, r4
 8005c90:	7830      	ldrb	r0, [r6, #0]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	3b5a      	subs	r3, #90	; 0x5a
 8005c96:	f008 f987 	bl	800dfa8 <writePxMutex>
 8005c9a:	e7bc      	b.n	8005c16 <testportCommand+0xae>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005c9c:	1c70      	adds	r0, r6, #1
 8005c9e:	f00d fefe 	bl	8013a9e <atol>
 8005ca2:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005ca4:	1e7b      	subs	r3, r7, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005ca6:	0006      	movs	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d905      	bls.n	8005cb8 <testportCommand+0x150>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005cac:	221b      	movs	r2, #27
 8005cae:	491b      	ldr	r1, [pc, #108]	; (8005d1c <testportCommand+0x1b4>)
 8005cb0:	0020      	movs	r0, r4
 8005cb2:	f00e f9b4 	bl	801401e <memcpy>
 8005cb6:	e7d6      	b.n	8005c66 <testportCommand+0xfe>
				WriteVaule[0] =rand();
 8005cb8:	f00e f9d2 	bl	8014060 <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005cbc:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 8005cbe:	7028      	strb	r0, [r5, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	0029      	movs	r1, r5
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	0038      	movs	r0, r7
 8005cc8:	3b32      	subs	r3, #50	; 0x32
 8005cca:	f008 f96d 	bl	800dfa8 <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005cce:	0038      	movs	r0, r7
 8005cd0:	f008 f9f2 	bl	800e0b8 <GetUart>
 8005cd4:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 8005cd6:	7829      	ldrb	r1, [r5, #0]
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005cd8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005cda:	b2f2      	uxtb	r2, r6
			if(WriteVaule[0] == ReadValue[0])
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	4299      	cmp	r1, r3
 8005ce0:	d004      	beq.n	8005cec <testportCommand+0x184>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005ce2:	490a      	ldr	r1, [pc, #40]	; (8005d0c <testportCommand+0x1a4>)
 8005ce4:	0020      	movs	r0, r4
 8005ce6:	f00e fb9d 	bl	8014424 <sprintf>
 8005cea:	e7bc      	b.n	8005c66 <testportCommand+0xfe>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005cec:	490a      	ldr	r1, [pc, #40]	; (8005d18 <testportCommand+0x1b0>)
 8005cee:	0020      	movs	r0, r4
 8005cf0:	f00e fb98 	bl	8014424 <sprintf>
 8005cf4:	e7b7      	b.n	8005c66 <testportCommand+0xfe>
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	08018b84 	.word	0x08018b84
 8005cfc:	08019340 	.word	0x08019340
 8005d00:	20000c28 	.word	0x20000c28
 8005d04:	20001300 	.word	0x20001300
 8005d08:	20001340 	.word	0x20001340
 8005d0c:	08019b78 	.word	0x08019b78
 8005d10:	08019b8c 	.word	0x08019b8c
 8005d14:	08019bfc 	.word	0x08019bfc
 8005d18:	08019b5c 	.word	0x08019b5c
 8005d1c:	08019be0 	.word	0x08019be0

08005d20 <unbridgeCommand>:
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005d20:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d24:	b083      	sub	sp, #12
 8005d26:	0004      	movs	r4, r0
 8005d28:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d019      	beq.n	8005d66 <unbridgeCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d32:	466a      	mov	r2, sp
 8005d34:	2101      	movs	r1, #1
 8005d36:	0028      	movs	r0, r5
 8005d38:	f008 fb92 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	56c3      	ldrsb	r3, [r0, r3]
 8005d40:	2b70      	cmp	r3, #112	; 0x70
 8005d42:	d012      	beq.n	8005d6a <unbridgeCommand+0x4a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005d44:	aa01      	add	r2, sp, #4
 8005d46:	2102      	movs	r1, #2
 8005d48:	0028      	movs	r0, r5
 8005d4a:	f008 fb89 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005d4e:	2300      	movs	r3, #0
 8005d50:	56c3      	ldrsb	r3, [r0, r3]
 8005d52:	2b70      	cmp	r3, #112	; 0x70
 8005d54:	d029      	beq.n	8005daa <unbridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005d56:	220f      	movs	r2, #15
 8005d58:	491a      	ldr	r1, [pc, #104]	; (8005dc4 <unbridgeCommand+0xa4>)
 8005d5a:	0020      	movs	r0, r4
 8005d5c:	f00e f95f 	bl	801401e <memcpy>
}
 8005d60:	2000      	movs	r0, #0
 8005d62:	b003      	add	sp, #12
 8005d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005d66:	b672      	cpsid	i
 8005d68:	e7fe      	b.n	8005d68 <unbridgeCommand+0x48>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	f00d fe97 	bl	8013a9e <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005d70:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005d72:	0006      	movs	r6, r0
 8005d74:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005d76:	2102      	movs	r1, #2
 8005d78:	0028      	movs	r0, r5
 8005d7a:	f008 fb71 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005d7e:	2300      	movs	r3, #0
 8005d80:	56c3      	ldrsb	r3, [r0, r3]
 8005d82:	2b70      	cmp	r3, #112	; 0x70
 8005d84:	d1e7      	bne.n	8005d56 <unbridgeCommand+0x36>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005d86:	3001      	adds	r0, #1
 8005d88:	f00d fe89 	bl	8013a9e <atol>
 8005d8c:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 8005d8e:	b2c1      	uxtb	r1, r0
 8005d90:	0038      	movs	r0, r7
 8005d92:	f7fe ff33 	bl	8004bfc <Unbridge>
	if(result == BOS_OK)
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d00b      	beq.n	8005db2 <unbridgeCommand+0x92>
	else if(result == BOS_ERR_WrongParam)
 8005d9a:	2867      	cmp	r0, #103	; 0x67
 8005d9c:	d0db      	beq.n	8005d56 <unbridgeCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005d9e:	2219      	movs	r2, #25
 8005da0:	4909      	ldr	r1, [pc, #36]	; (8005dc8 <unbridgeCommand+0xa8>)
 8005da2:	0020      	movs	r0, r4
 8005da4:	f00e f93b 	bl	801401e <memcpy>
	return pdFALSE;
 8005da8:	e7da      	b.n	8005d60 <unbridgeCommand+0x40>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005daa:	3001      	adds	r0, #1
 8005dac:	f00d fe77 	bl	8013a9e <atol>
 8005db0:	e7d1      	b.n	8005d56 <unbridgeCommand+0x36>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005db2:	22ff      	movs	r2, #255	; 0xff
 8005db4:	002b      	movs	r3, r5
 8005db6:	4905      	ldr	r1, [pc, #20]	; (8005dcc <unbridgeCommand+0xac>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	0020      	movs	r0, r4
 8005dbc:	4032      	ands	r2, r6
 8005dbe:	f00e fb31 	bl	8014424 <sprintf>
 8005dc2:	e7cd      	b.n	8005d60 <unbridgeCommand+0x40>
 8005dc4:	08019bfc 	.word	0x08019bfc
 8005dc8:	08019c2c 	.word	0x08019c2c
 8005dcc:	08019c0c 	.word	0x08019c0c

08005dd0 <bridgeCommand>:
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005dd0:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	0004      	movs	r4, r0
 8005dd8:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d019      	beq.n	8005e16 <bridgeCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005de2:	466a      	mov	r2, sp
 8005de4:	2101      	movs	r1, #1
 8005de6:	0028      	movs	r0, r5
 8005de8:	f008 fb3a 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005dec:	2300      	movs	r3, #0
 8005dee:	56c3      	ldrsb	r3, [r0, r3]
 8005df0:	2b70      	cmp	r3, #112	; 0x70
 8005df2:	d012      	beq.n	8005e1a <bridgeCommand+0x4a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005df4:	aa01      	add	r2, sp, #4
 8005df6:	2102      	movs	r1, #2
 8005df8:	0028      	movs	r0, r5
 8005dfa:	f008 fb31 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005dfe:	2300      	movs	r3, #0
 8005e00:	56c3      	ldrsb	r3, [r0, r3]
 8005e02:	2b70      	cmp	r3, #112	; 0x70
 8005e04:	d029      	beq.n	8005e5a <bridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005e06:	220f      	movs	r2, #15
 8005e08:	491a      	ldr	r1, [pc, #104]	; (8005e74 <bridgeCommand+0xa4>)
 8005e0a:	0020      	movs	r0, r4
 8005e0c:	f00e f907 	bl	801401e <memcpy>
}
 8005e10:	2000      	movs	r0, #0
 8005e12:	b003      	add	sp, #12
 8005e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005e16:	b672      	cpsid	i
 8005e18:	e7fe      	b.n	8005e18 <bridgeCommand+0x48>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	f00d fe3f 	bl	8013a9e <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005e20:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005e22:	0006      	movs	r6, r0
 8005e24:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005e26:	2102      	movs	r1, #2
 8005e28:	0028      	movs	r0, r5
 8005e2a:	f008 fb19 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005e2e:	2300      	movs	r3, #0
 8005e30:	56c3      	ldrsb	r3, [r0, r3]
 8005e32:	2b70      	cmp	r3, #112	; 0x70
 8005e34:	d1e7      	bne.n	8005e06 <bridgeCommand+0x36>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005e36:	3001      	adds	r0, #1
 8005e38:	f00d fe31 	bl	8013a9e <atol>
 8005e3c:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 8005e3e:	b2c1      	uxtb	r1, r0
 8005e40:	0038      	movs	r0, r7
 8005e42:	f7fe fec7 	bl	8004bd4 <Bridge>
	if(result == BOS_OK)
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d00b      	beq.n	8005e62 <bridgeCommand+0x92>
	else if(result == BOS_ERR_WrongParam)
 8005e4a:	2867      	cmp	r0, #103	; 0x67
 8005e4c:	d0db      	beq.n	8005e06 <bridgeCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005e4e:	2217      	movs	r2, #23
 8005e50:	4909      	ldr	r1, [pc, #36]	; (8005e78 <bridgeCommand+0xa8>)
 8005e52:	0020      	movs	r0, r4
 8005e54:	f00e f8e3 	bl	801401e <memcpy>
	return pdFALSE;
 8005e58:	e7da      	b.n	8005e10 <bridgeCommand+0x40>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f00d fe1f 	bl	8013a9e <atol>
 8005e60:	e7d1      	b.n	8005e06 <bridgeCommand+0x36>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005e62:	22ff      	movs	r2, #255	; 0xff
 8005e64:	002b      	movs	r3, r5
 8005e66:	4905      	ldr	r1, [pc, #20]	; (8005e7c <bridgeCommand+0xac>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	0020      	movs	r0, r4
 8005e6c:	4032      	ands	r2, r6
 8005e6e:	f00e fad9 	bl	8014424 <sprintf>
 8005e72:	e7cd      	b.n	8005e10 <bridgeCommand+0x40>
 8005e74:	08019bfc 	.word	0x08019bfc
 8005e78:	08019c6c 	.word	0x08019c6c
 8005e7c:	08019c48 	.word	0x08019c48

08005e80 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e82:	464e      	mov	r6, r9
 8005e84:	4645      	mov	r5, r8
 8005e86:	46de      	mov	lr, fp
 8005e88:	4680      	mov	r8, r0
 8005e8a:	4657      	mov	r7, sl
	configASSERT(pcWriteBuffer);
 8005e8c:	4643      	mov	r3, r8
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e8e:	b5e0      	push	{r5, r6, r7, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005e90:	2600      	movs	r6, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e92:	b083      	sub	sp, #12
 8005e94:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005e96:	9601      	str	r6, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01a      	beq.n	8005ed2 <delSnipCommand+0x52>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e9c:	aa01      	add	r2, sp, #4
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	f008 fade 	bl	800e460 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005ea4:	f00d fdf5 	bl	8013a92 <atoi>
 8005ea8:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005eaa:	2c00      	cmp	r4, #0
 8005eac:	d004      	beq.n	8005eb8 <delSnipCommand+0x38>
 8005eae:	4b2b      	ldr	r3, [pc, #172]	; (8005f5c <delSnipCommand+0xdc>)
 8005eb0:	4699      	mov	r9, r3
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	42a3      	cmp	r3, r4
 8005eb6:	d20e      	bcs.n	8005ed6 <delSnipCommand+0x56>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005eb8:	2223      	movs	r2, #35	; 0x23
 8005eba:	4929      	ldr	r1, [pc, #164]	; (8005f60 <delSnipCommand+0xe0>)
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	f00e f8ae 	bl	801401e <memcpy>
}
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	b003      	add	sp, #12
 8005ec6:	bc3c      	pop	{r2, r3, r4, r5}
 8005ec8:	4690      	mov	r8, r2
 8005eca:	4699      	mov	r9, r3
 8005ecc:	46a2      	mov	sl, r4
 8005ece:	46ab      	mov	fp, r5
 8005ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005ed2:	b672      	cpsid	i
 8005ed4:	e7fe      	b.n	8005ed4 <delSnipCommand+0x54>
		snippets[index - 1].cond.conditionType =0;
 8005ed6:	2714      	movs	r7, #20
 8005ed8:	4a22      	ldr	r2, [pc, #136]	; (8005f64 <delSnipCommand+0xe4>)
 8005eda:	b2c3      	uxtb	r3, r0
 8005edc:	4692      	mov	sl, r2
 8005ede:	469b      	mov	fp, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	437b      	muls	r3, r7
 8005ee4:	189d      	adds	r5, r3, r2
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005ee6:	3302      	adds	r3, #2
 8005ee8:	4453      	add	r3, sl
 8005eea:	0018      	movs	r0, r3
		snippets[index - 1].cond.conditionType =0;
 8005eec:	802e      	strh	r6, [r5, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005eee:	2204      	movs	r2, #4
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	f00e f89d 	bl	8014030 <memset>
		snippets[index - 1].state = false;
 8005ef6:	742e      	strb	r6, [r5, #16]
		free(snippets[index - 1].cmd);
 8005ef8:	68e8      	ldr	r0, [r5, #12]
 8005efa:	f00d fe4d 	bl	8013b98 <free>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005efe:	464b      	mov	r3, r9
		snippets[index - 1].cmd = NULL;
 8005f00:	60ee      	str	r6, [r5, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005f02:	781e      	ldrb	r6, [r3, #0]
 8005f04:	42a6      	cmp	r6, r4
 8005f06:	d91d      	bls.n	8005f44 <delSnipCommand+0xc4>
 8005f08:	465d      	mov	r5, fp
 8005f0a:	4653      	mov	r3, sl
 8005f0c:	3e01      	subs	r6, #1
 8005f0e:	1b34      	subs	r4, r6, r4
 8005f10:	b2e4      	uxtb	r4, r4
 8005f12:	445c      	add	r4, fp
 8005f14:	437d      	muls	r5, r7
 8005f16:	437c      	muls	r4, r7
 8005f18:	3314      	adds	r3, #20
 8005f1a:	4455      	add	r5, sl
 8005f1c:	18e4      	adds	r4, r4, r3
 8005f1e:	e002      	b.n	8005f26 <delSnipCommand+0xa6>
 8005f20:	3514      	adds	r5, #20
 8005f22:	42a5      	cmp	r5, r4
 8005f24:	d00f      	beq.n	8005f46 <delSnipCommand+0xc6>
			if(snippets[s].cond.conditionType){
 8005f26:	782b      	ldrb	r3, [r5, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f9      	beq.n	8005f20 <delSnipCommand+0xa0>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005f2c:	0028      	movs	r0, r5
 8005f2e:	003a      	movs	r2, r7
 8005f30:	0029      	movs	r1, r5
 8005f32:	3814      	subs	r0, #20
 8005f34:	f00e f873 	bl	801401e <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005f38:	003a      	movs	r2, r7
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	0028      	movs	r0, r5
 8005f3e:	f00e f877 	bl	8014030 <memset>
 8005f42:	e7ed      	b.n	8005f20 <delSnipCommand+0xa0>
 8005f44:	3e01      	subs	r6, #1
		--numOfRecordedSnippets;
 8005f46:	464b      	mov	r3, r9
 8005f48:	701e      	strb	r6, [r3, #0]
		SaveToRO();
 8005f4a:	f005 fae3 	bl	800b514 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005f4e:	2236      	movs	r2, #54	; 0x36
 8005f50:	4905      	ldr	r1, [pc, #20]	; (8005f68 <delSnipCommand+0xe8>)
 8005f52:	4640      	mov	r0, r8
 8005f54:	f00e f863 	bl	801401e <memcpy>
 8005f58:	e7b3      	b.n	8005ec2 <delSnipCommand+0x42>
 8005f5a:	46c0      	nop			; (mov r8, r8)
 8005f5c:	20001140 	.word	0x20001140
 8005f60:	08019cbc 	.word	0x08019cbc
 8005f64:	20006ce8 	.word	0x20006ce8
 8005f68:	08019c84 	.word	0x08019c84

08005f6c <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f6c:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005f6e:	2500      	movs	r5, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f70:	b083      	sub	sp, #12
 8005f72:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8005f74:	9501      	str	r5, [sp, #4]
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f76:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005f78:	2c00      	cmp	r4, #0
 8005f7a:	d014      	beq.n	8005fa6 <pauseSnipCommand+0x3a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005f7c:	aa01      	add	r2, sp, #4
 8005f7e:	2101      	movs	r1, #1
 8005f80:	f008 fa6e 	bl	800e460 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005f84:	f00d fd85 	bl	8013a92 <atoi>
 8005f88:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <pauseSnipCommand+0x2a>
 8005f8e:	4a0e      	ldr	r2, [pc, #56]	; (8005fc8 <pauseSnipCommand+0x5c>)
 8005f90:	7812      	ldrb	r2, [r2, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d209      	bcs.n	8005faa <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005f96:	2223      	movs	r2, #35	; 0x23
 8005f98:	490c      	ldr	r1, [pc, #48]	; (8005fcc <pauseSnipCommand+0x60>)
 8005f9a:	0020      	movs	r0, r4
 8005f9c:	f00e f83f 	bl	801401e <memcpy>
}
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	b003      	add	sp, #12
 8005fa4:	bd30      	pop	{r4, r5, pc}
	configASSERT(pcWriteBuffer);
 8005fa6:	b672      	cpsid	i
 8005fa8:	e7fe      	b.n	8005fa8 <pauseSnipCommand+0x3c>
		snippets[index - 1].state = false;
 8005faa:	2314      	movs	r3, #20
 8005fac:	b2c0      	uxtb	r0, r0
 8005fae:	3801      	subs	r0, #1
 8005fb0:	4343      	muls	r3, r0
 8005fb2:	4807      	ldr	r0, [pc, #28]	; (8005fd0 <pauseSnipCommand+0x64>)
 8005fb4:	18c0      	adds	r0, r0, r3
 8005fb6:	7405      	strb	r5, [r0, #16]
		SaveToRO();
 8005fb8:	f005 faac 	bl	800b514 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005fbc:	2235      	movs	r2, #53	; 0x35
 8005fbe:	4905      	ldr	r1, [pc, #20]	; (8005fd4 <pauseSnipCommand+0x68>)
 8005fc0:	0020      	movs	r0, r4
 8005fc2:	f00e f82c 	bl	801401e <memcpy>
 8005fc6:	e7eb      	b.n	8005fa0 <pauseSnipCommand+0x34>
 8005fc8:	20001140 	.word	0x20001140
 8005fcc:	08019cbc 	.word	0x08019cbc
 8005fd0:	20006ce8 	.word	0x20006ce8
 8005fd4:	08019ce0 	.word	0x08019ce0

08005fd8 <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005fd8:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8005fe0:	9301      	str	r3, [sp, #4]
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005fe2:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005fe4:	2c00      	cmp	r4, #0
 8005fe6:	d014      	beq.n	8006012 <actSnipCommand+0x3a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005fe8:	aa01      	add	r2, sp, #4
 8005fea:	2101      	movs	r1, #1
 8005fec:	f008 fa38 	bl	800e460 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005ff0:	f00d fd4f 	bl	8013a92 <atoi>
 8005ff4:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <actSnipCommand+0x2a>
 8005ffa:	4a0f      	ldr	r2, [pc, #60]	; (8006038 <actSnipCommand+0x60>)
 8005ffc:	7812      	ldrb	r2, [r2, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d209      	bcs.n	8006016 <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8006002:	2223      	movs	r2, #35	; 0x23
 8006004:	490d      	ldr	r1, [pc, #52]	; (800603c <actSnipCommand+0x64>)
 8006006:	0020      	movs	r0, r4
 8006008:	f00e f809 	bl	801401e <memcpy>
}
 800600c:	2000      	movs	r0, #0
 800600e:	b002      	add	sp, #8
 8006010:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8006012:	b672      	cpsid	i
 8006014:	e7fe      	b.n	8006014 <actSnipCommand+0x3c>
		snippets[index - 1].state = true;
 8006016:	2314      	movs	r3, #20
 8006018:	b2c0      	uxtb	r0, r0
 800601a:	3801      	subs	r0, #1
 800601c:	4343      	muls	r3, r0
 800601e:	4808      	ldr	r0, [pc, #32]	; (8006040 <actSnipCommand+0x68>)
 8006020:	18c0      	adds	r0, r0, r3
 8006022:	2301      	movs	r3, #1
 8006024:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8006026:	f005 fa75 	bl	800b514 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 800602a:	2238      	movs	r2, #56	; 0x38
 800602c:	4905      	ldr	r1, [pc, #20]	; (8006044 <actSnipCommand+0x6c>)
 800602e:	0020      	movs	r0, r4
 8006030:	f00d fff5 	bl	801401e <memcpy>
 8006034:	e7ea      	b.n	800600c <actSnipCommand+0x34>
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	20001140 	.word	0x20001140
 800603c:	08019cbc 	.word	0x08019cbc
 8006040:	20006ce8 	.word	0x20006ce8
 8006044:	08019d18 	.word	0x08019d18

08006048 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800604a:	464e      	mov	r6, r9
 800604c:	4645      	mov	r5, r8
 800604e:	46de      	mov	lr, fp
 8006050:	4657      	mov	r7, sl
 8006052:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 8006054:	4b70      	ldr	r3, [pc, #448]	; (8006218 <snipCommand+0x1d0>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006056:	b08d      	sub	sp, #52	; 0x34
	char status[2][7] ={"Paused", "Active"};
 8006058:	4699      	mov	r9, r3
 800605a:	aa08      	add	r2, sp, #32
 800605c:	3304      	adds	r3, #4
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800605e:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8006060:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006062:	c223      	stmia	r2!, {r0, r1, r5}
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8006068:	2c00      	cmp	r4, #0
 800606a:	d100      	bne.n	800606e <snipCommand+0x26>
 800606c:	e0a2      	b.n	80061b4 <snipCommand+0x16c>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 800606e:	4b6b      	ldr	r3, [pc, #428]	; (800621c <snipCommand+0x1d4>)
 8006070:	2237      	movs	r2, #55	; 0x37
 8006072:	7818      	ldrb	r0, [r3, #0]
 8006074:	2301      	movs	r3, #1
 8006076:	425b      	negs	r3, r3
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	4969      	ldr	r1, [pc, #420]	; (8006220 <snipCommand+0x1d8>)
 800607c:	3333      	adds	r3, #51	; 0x33
 800607e:	f007 ff93 	bl	800dfa8 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8006082:	4b68      	ldr	r3, [pc, #416]	; (8006224 <snipCommand+0x1dc>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d041      	beq.n	800610e <snipCommand+0xc6>
 800608a:	2500      	movs	r5, #0
 800608c:	4e66      	ldr	r6, [pc, #408]	; (8006228 <snipCommand+0x1e0>)
 800608e:	4f67      	ldr	r7, [pc, #412]	; (800622c <snipCommand+0x1e4>)
 8006090:	1c6b      	adds	r3, r5, #1
 8006092:	b2db      	uxtb	r3, r3
 8006094:	469a      	mov	sl, r3
		if(snippets[s].cond.conditionType)
 8006096:	00ab      	lsls	r3, r5, #2
 8006098:	9305      	str	r3, [sp, #20]
 800609a:	195b      	adds	r3, r3, r5
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4698      	mov	r8, r3
 80060a0:	5cf3      	ldrb	r3, [r6, r3]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d140      	bne.n	8006128 <snipCommand+0xe0>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 80060a6:	9b05      	ldr	r3, [sp, #20]
 80060a8:	469c      	mov	ip, r3
 80060aa:	4465      	add	r5, ip
 80060ac:	00ad      	lsls	r5, r5, #2
 80060ae:	1975      	adds	r5, r6, r5
 80060b0:	e00d      	b.n	80060ce <snipCommand+0x86>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 80060b2:	0022      	movs	r2, r4
 80060b4:	495e      	ldr	r1, [pc, #376]	; (8006230 <snipCommand+0x1e8>)
 80060b6:	003b      	movs	r3, r7
 80060b8:	0020      	movs	r0, r4
 80060ba:	f00e f9b3 	bl	8014424 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 80060be:	0038      	movs	r0, r7
 80060c0:	f7fa f82a 	bl	8000118 <strlen>
 80060c4:	2100      	movs	r1, #0
 80060c6:	0002      	movs	r2, r0
 80060c8:	0038      	movs	r0, r7
 80060ca:	f00d ffb1 	bl	8014030 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 80060ce:	0039      	movs	r1, r7
 80060d0:	68e8      	ldr	r0, [r5, #12]
 80060d2:	f7ff fb2d 	bl	8005730 <ParseSnippetCommand>
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d1eb      	bne.n	80060b2 <snipCommand+0x6a>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 80060da:	0020      	movs	r0, r4
 80060dc:	f7fa f81c 	bl	8000118 <strlen>
 80060e0:	0005      	movs	r5, r0
 80060e2:	220c      	movs	r2, #12
 80060e4:	4953      	ldr	r1, [pc, #332]	; (8006234 <snipCommand+0x1ec>)
 80060e6:	1820      	adds	r0, r4, r0
 80060e8:	f00d ff99 	bl	801401e <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 80060ec:	4b4b      	ldr	r3, [pc, #300]	; (800621c <snipCommand+0x1d4>)
 80060ee:	002a      	movs	r2, r5
 80060f0:	7818      	ldrb	r0, [r3, #0]
 80060f2:	2301      	movs	r3, #1
 80060f4:	320b      	adds	r2, #11
 80060f6:	425b      	negs	r3, r3
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	b292      	uxth	r2, r2
 80060fc:	3333      	adds	r3, #51	; 0x33
 80060fe:	0021      	movs	r1, r4
 8006100:	f007 ff52 	bl	800dfa8 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8006104:	4b47      	ldr	r3, [pc, #284]	; (8006224 <snipCommand+0x1dc>)
 8006106:	4655      	mov	r5, sl
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	4553      	cmp	r3, sl
 800610c:	d8c0      	bhi.n	8006090 <snipCommand+0x48>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 800610e:	22b5      	movs	r2, #181	; 0xb5
 8006110:	4949      	ldr	r1, [pc, #292]	; (8006238 <snipCommand+0x1f0>)
 8006112:	0020      	movs	r0, r4
 8006114:	f00d ff83 	bl	801401e <memcpy>
}
 8006118:	2000      	movs	r0, #0
 800611a:	b00d      	add	sp, #52	; 0x34
 800611c:	bc3c      	pop	{r2, r3, r4, r5}
 800611e:	4690      	mov	r8, r2
 8006120:	4699      	mov	r9, r3
 8006122:	46a2      	mov	sl, r4
 8006124:	46ab      	mov	fp, r5
 8006126:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8006128:	46b3      	mov	fp, r6
 800612a:	44c3      	add	fp, r8
 800612c:	465b      	mov	r3, fp
 800612e:	7c1a      	ldrb	r2, [r3, #16]
 8006130:	4942      	ldr	r1, [pc, #264]	; (800623c <snipCommand+0x1f4>)
 8006132:	00d3      	lsls	r3, r2, #3
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	aa08      	add	r2, sp, #32
 8006138:	4694      	mov	ip, r2
 800613a:	0020      	movs	r0, r4
 800613c:	4463      	add	r3, ip
 800613e:	4652      	mov	r2, sl
 8006140:	f00e f970 	bl	8014424 <sprintf>
		switch(snippets[s].cond.conditionType){
 8006144:	4643      	mov	r3, r8
 8006146:	5cf3      	ldrb	r3, [r6, r3]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d027      	beq.n	800619c <snipCommand+0x154>
 800614c:	2b03      	cmp	r3, #3
 800614e:	d1aa      	bne.n	80060a6 <snipCommand+0x5e>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8006150:	4641      	mov	r1, r8
 8006152:	3106      	adds	r1, #6
 8006154:	1871      	adds	r1, r6, r1
 8006156:	2204      	movs	r2, #4
 8006158:	a807      	add	r0, sp, #28
 800615a:	f00d ff60 	bl	801401e <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 800615e:	465b      	mov	r3, fp
 8006160:	78da      	ldrb	r2, [r3, #3]
 8006162:	9807      	ldr	r0, [sp, #28]
 8006164:	3a01      	subs	r2, #1
 8006166:	0053      	lsls	r3, r2, #1
 8006168:	189b      	adds	r3, r3, r2
 800616a:	4a35      	ldr	r2, [pc, #212]	; (8006240 <snipCommand+0x1f8>)
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	18d3      	adds	r3, r2, r3
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	4698      	mov	r8, r3
 8006174:	f7fc fe0c 	bl	8002d90 <__aeabi_f2d>
 8006178:	465b      	mov	r3, fp
 800617a:	464a      	mov	r2, r9
 800617c:	9002      	str	r0, [sp, #8]
 800617e:	9103      	str	r1, [sp, #12]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	3214      	adds	r2, #20
 8006184:	3b01      	subs	r3, #1
 8006186:	0059      	lsls	r1, r3, #1
 8006188:	18cb      	adds	r3, r1, r3
 800618a:	18d3      	adds	r3, r2, r3
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	0022      	movs	r2, r4
 8006190:	4643      	mov	r3, r8
 8006192:	492c      	ldr	r1, [pc, #176]	; (8006244 <snipCommand+0x1fc>)
 8006194:	0020      	movs	r0, r4
 8006196:	f00e f945 	bl	8014424 <sprintf>
				break;
 800619a:	e784      	b.n	80060a6 <snipCommand+0x5e>
 800619c:	465b      	mov	r3, fp
 800619e:	68da      	ldr	r2, [r3, #12]
				switch(snippets[s].cond.buffer1[1]){
 80061a0:	78db      	ldrb	r3, [r3, #3]
 80061a2:	3b05      	subs	r3, #5
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b09      	cmp	r3, #9
 80061a8:	d900      	bls.n	80061ac <snipCommand+0x164>
 80061aa:	e77c      	b.n	80060a6 <snipCommand+0x5e>
 80061ac:	4926      	ldr	r1, [pc, #152]	; (8006248 <snipCommand+0x200>)
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	58cb      	ldr	r3, [r1, r3]
 80061b2:	469f      	mov	pc, r3
	configASSERT(pcWriteBuffer);
 80061b4:	b672      	cpsid	i
 80061b6:	e7fe      	b.n	80061b6 <snipCommand+0x16e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 80061b8:	2314      	movs	r3, #20
 80061ba:	436b      	muls	r3, r5
 80061bc:	18f3      	adds	r3, r6, r3
 80061be:	789b      	ldrb	r3, [r3, #2]
 80061c0:	4922      	ldr	r1, [pc, #136]	; (800624c <snipCommand+0x204>)
 80061c2:	9200      	str	r2, [sp, #0]
 80061c4:	0020      	movs	r0, r4
 80061c6:	0022      	movs	r2, r4
 80061c8:	f00e f92c 	bl	8014424 <sprintf>
						break;
 80061cc:	e76b      	b.n	80060a6 <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 80061ce:	2114      	movs	r1, #20
 80061d0:	4369      	muls	r1, r5
 80061d2:	1871      	adds	r1, r6, r1
 80061d4:	788b      	ldrb	r3, [r1, #2]
 80061d6:	9201      	str	r2, [sp, #4]
 80061d8:	790a      	ldrb	r2, [r1, #4]
 80061da:	0020      	movs	r0, r4
 80061dc:	9200      	str	r2, [sp, #0]
 80061de:	491c      	ldr	r1, [pc, #112]	; (8006250 <snipCommand+0x208>)
 80061e0:	0022      	movs	r2, r4
 80061e2:	f00e f91f 	bl	8014424 <sprintf>
						break;
 80061e6:	e75e      	b.n	80060a6 <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 80061e8:	2114      	movs	r1, #20
 80061ea:	4369      	muls	r1, r5
 80061ec:	1871      	adds	r1, r6, r1
 80061ee:	788b      	ldrb	r3, [r1, #2]
 80061f0:	9201      	str	r2, [sp, #4]
 80061f2:	790a      	ldrb	r2, [r1, #4]
 80061f4:	0020      	movs	r0, r4
 80061f6:	9200      	str	r2, [sp, #0]
 80061f8:	4916      	ldr	r1, [pc, #88]	; (8006254 <snipCommand+0x20c>)
 80061fa:	0022      	movs	r2, r4
 80061fc:	f00e f912 	bl	8014424 <sprintf>
						break;
 8006200:	e751      	b.n	80060a6 <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8006202:	2314      	movs	r3, #20
 8006204:	436b      	muls	r3, r5
 8006206:	18f3      	adds	r3, r6, r3
 8006208:	789b      	ldrb	r3, [r3, #2]
 800620a:	4913      	ldr	r1, [pc, #76]	; (8006258 <snipCommand+0x210>)
 800620c:	9200      	str	r2, [sp, #0]
 800620e:	0020      	movs	r0, r4
 8006210:	0022      	movs	r2, r4
 8006212:	f00e f907 	bl	8014424 <sprintf>
						break;
 8006216:	e746      	b.n	80060a6 <snipCommand+0x5e>
 8006218:	08018b84 	.word	0x08018b84
 800621c:	20000c28 	.word	0x20000c28
 8006220:	08019d50 	.word	0x08019d50
 8006224:	20001140 	.word	0x20001140
 8006228:	20006ce8 	.word	0x20006ce8
 800622c:	20001240 	.word	0x20001240
 8006230:	08019e04 	.word	0x08019e04
 8006234:	08019e0c 	.word	0x08019e0c
 8006238:	08019e18 	.word	0x08019e18
 800623c:	08019d88 	.word	0x08019d88
 8006240:	20000094 	.word	0x20000094
 8006244:	08019df4 	.word	0x08019df4
 8006248:	08018928 	.word	0x08018928
 800624c:	08019d94 	.word	0x08019d94
 8006250:	08019dd8 	.word	0x08019dd8
 8006254:	08019dc0 	.word	0x08019dc0
 8006258:	08019da8 	.word	0x08019da8

0800625c <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800625c:	b510      	push	{r4, lr}
 800625e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006260:	d00c      	beq.n	800627c <idcodeCommand+0x20>
	dev =HAL_GetDEVID();
 8006262:	f009 ff91 	bl	8010188 <HAL_GetDEVID>
	switch(dev){
 8006266:	4a1d      	ldr	r2, [pc, #116]	; (80062dc <idcodeCommand+0x80>)
 8006268:	0403      	lsls	r3, r0, #16
 800626a:	4694      	mov	ip, r2
 800626c:	0c1b      	lsrs	r3, r3, #16
 800626e:	4463      	add	r3, ip
 8006270:	2b08      	cmp	r3, #8
 8006272:	d805      	bhi.n	8006280 <idcodeCommand+0x24>
 8006274:	4a1a      	ldr	r2, [pc, #104]	; (80062e0 <idcodeCommand+0x84>)
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	58d3      	ldr	r3, [r2, r3]
 800627a:	469f      	mov	pc, r3
	configASSERT(pcWriteBuffer);
 800627c:	b672      	cpsid	i
 800627e:	e7fe      	b.n	800627e <idcodeCommand+0x22>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8006280:	4a18      	ldr	r2, [pc, #96]	; (80062e4 <idcodeCommand+0x88>)
 8006282:	4919      	ldr	r1, [pc, #100]	; (80062e8 <idcodeCommand+0x8c>)
 8006284:	0020      	movs	r0, r4
 8006286:	f00e f8cd 	bl	8014424 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 800628a:	f009 ff77 	bl	801017c <HAL_GetREVID>
 800628e:	0022      	movs	r2, r4
 8006290:	0b03      	lsrs	r3, r0, #12
 8006292:	4916      	ldr	r1, [pc, #88]	; (80062ec <idcodeCommand+0x90>)
 8006294:	0020      	movs	r0, r4
 8006296:	f00e f8c5 	bl	8014424 <sprintf>
}
 800629a:	2000      	movs	r0, #0
 800629c:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 800629e:	4a14      	ldr	r2, [pc, #80]	; (80062f0 <idcodeCommand+0x94>)
 80062a0:	4911      	ldr	r1, [pc, #68]	; (80062e8 <idcodeCommand+0x8c>)
 80062a2:	0020      	movs	r0, r4
 80062a4:	f00e f8be 	bl	8014424 <sprintf>
			break;
 80062a8:	e7ef      	b.n	800628a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 80062aa:	4a12      	ldr	r2, [pc, #72]	; (80062f4 <idcodeCommand+0x98>)
 80062ac:	490e      	ldr	r1, [pc, #56]	; (80062e8 <idcodeCommand+0x8c>)
 80062ae:	0020      	movs	r0, r4
 80062b0:	f00e f8b8 	bl	8014424 <sprintf>
			break;
 80062b4:	e7e9      	b.n	800628a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 80062b6:	4a10      	ldr	r2, [pc, #64]	; (80062f8 <idcodeCommand+0x9c>)
 80062b8:	490b      	ldr	r1, [pc, #44]	; (80062e8 <idcodeCommand+0x8c>)
 80062ba:	0020      	movs	r0, r4
 80062bc:	f00e f8b2 	bl	8014424 <sprintf>
			break;
 80062c0:	e7e3      	b.n	800628a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 80062c2:	4a0e      	ldr	r2, [pc, #56]	; (80062fc <idcodeCommand+0xa0>)
 80062c4:	4908      	ldr	r1, [pc, #32]	; (80062e8 <idcodeCommand+0x8c>)
 80062c6:	0020      	movs	r0, r4
 80062c8:	f00e f8ac 	bl	8014424 <sprintf>
			break;
 80062cc:	e7dd      	b.n	800628a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 80062ce:	4a0c      	ldr	r2, [pc, #48]	; (8006300 <idcodeCommand+0xa4>)
 80062d0:	4905      	ldr	r1, [pc, #20]	; (80062e8 <idcodeCommand+0x8c>)
 80062d2:	0020      	movs	r0, r4
 80062d4:	f00e f8a6 	bl	8014424 <sprintf>
			break;
 80062d8:	e7d7      	b.n	800628a <idcodeCommand+0x2e>
 80062da:	46c0      	nop			; (mov r8, r8)
 80062dc:	fffffbc0 	.word	0xfffffbc0
 80062e0:	08018950 	.word	0x08018950
 80062e4:	08019f20 	.word	0x08019f20
 80062e8:	08019edc 	.word	0x08019edc
 80062ec:	08019f28 	.word	0x08019f28
 80062f0:	08019f08 	.word	0x08019f08
 80062f4:	08019ef0 	.word	0x08019ef0
 80062f8:	08019ed0 	.word	0x08019ed0
 80062fc:	08019f14 	.word	0x08019f14
 8006300:	08019efc 	.word	0x08019efc

08006304 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006304:	b510      	push	{r4, lr}
 8006306:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006308:	d101      	bne.n	800630e <dateCommand+0xa>
 800630a:	b672      	cpsid	i
 800630c:	e7fe      	b.n	800630c <dateCommand+0x8>
	GetTimeDate();
 800630e:	f007 fc29 	bl	800db64 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8006312:	f7fe fc41 	bl	8004b98 <GetDateString>
 8006316:	4903      	ldr	r1, [pc, #12]	; (8006324 <dateCommand+0x20>)
 8006318:	0002      	movs	r2, r0
 800631a:	0020      	movs	r0, r4
 800631c:	f00e f882 	bl	8014424 <sprintf>
}
 8006320:	2000      	movs	r0, #0
 8006322:	bd10      	pop	{r4, pc}
 8006324:	08019f40 	.word	0x08019f40

08006328 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800632a:	46ce      	mov	lr, r9
 800632c:	4647      	mov	r7, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800632e:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006330:	b580      	push	{r7, lr}
 8006332:	b083      	sub	sp, #12
 8006334:	0004      	movs	r4, r0
 8006336:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 800633c:	2800      	cmp	r0, #0
 800633e:	d023      	beq.n	8006388 <getCommand+0x60>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006340:	466a      	mov	r2, sp
 8006342:	2101      	movs	r1, #1
 8006344:	0028      	movs	r0, r5
 8006346:	f008 f88b 	bl	800e460 <FreeRTOS_CLIGetParameter>
 800634a:	4b6c      	ldr	r3, [pc, #432]	; (80064fc <getCommand+0x1d4>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 800634c:	2204      	movs	r2, #4
 800634e:	496c      	ldr	r1, [pc, #432]	; (8006500 <getCommand+0x1d8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006350:	0007      	movs	r7, r0
 8006352:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006354:	f00e f8aa 	bl	80144ac <strncmp>
 8006358:	2800      	cmp	r0, #0
 800635a:	d117      	bne.n	800638c <getCommand+0x64>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800635c:	9b00      	ldr	r3, [sp, #0]
 800635e:	1d3e      	adds	r6, r7, #4
 8006360:	1f1d      	subs	r5, r3, #4
 8006362:	002a      	movs	r2, r5
 8006364:	4967      	ldr	r1, [pc, #412]	; (8006504 <getCommand+0x1dc>)
 8006366:	0030      	movs	r0, r6
 8006368:	f00e f8a0 	bl	80144ac <strncmp>
 800636c:	2800      	cmp	r0, #0
 800636e:	d125      	bne.n	80063bc <getCommand+0x94>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8006370:	4b65      	ldr	r3, [pc, #404]	; (8006508 <getCommand+0x1e0>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b60      	cmp	r3, #96	; 0x60
 8006376:	d01b      	beq.n	80063b0 <getCommand+0x88>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8006378:	2b20      	cmp	r3, #32
 800637a:	d12c      	bne.n	80063d6 <getCommand+0xae>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 800637c:	4a63      	ldr	r2, [pc, #396]	; (800650c <getCommand+0x1e4>)
 800637e:	4964      	ldr	r1, [pc, #400]	; (8006510 <getCommand+0x1e8>)
 8006380:	0020      	movs	r0, r4
 8006382:	f00e f84f 	bl	8014424 <sprintf>
 8006386:	e00d      	b.n	80063a4 <getCommand+0x7c>
	configASSERT(pcWriteBuffer);
 8006388:	b672      	cpsid	i
 800638a:	e7fe      	b.n	800638a <getCommand+0x62>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 800638c:	2205      	movs	r2, #5
 800638e:	4961      	ldr	r1, [pc, #388]	; (8006514 <getCommand+0x1ec>)
 8006390:	0038      	movs	r0, r7
 8006392:	f00e f88b 	bl	80144ac <strncmp>
 8006396:	2800      	cmp	r0, #0
 8006398:	d025      	beq.n	80063e6 <getCommand+0xbe>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800639a:	2213      	movs	r2, #19
 800639c:	495e      	ldr	r1, [pc, #376]	; (8006518 <getCommand+0x1f0>)
 800639e:	0020      	movs	r0, r4
 80063a0:	f00d fe3d 	bl	801401e <memcpy>
}
 80063a4:	2000      	movs	r0, #0
 80063a6:	b003      	add	sp, #12
 80063a8:	bc0c      	pop	{r2, r3}
 80063aa:	4690      	mov	r8, r2
 80063ac:	4699      	mov	r9, r3
 80063ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80063b0:	4a5a      	ldr	r2, [pc, #360]	; (800651c <getCommand+0x1f4>)
 80063b2:	4957      	ldr	r1, [pc, #348]	; (8006510 <getCommand+0x1e8>)
 80063b4:	0020      	movs	r0, r4
 80063b6:	f00e f835 	bl	8014424 <sprintf>
 80063ba:	e7f3      	b.n	80063a4 <getCommand+0x7c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 80063bc:	002a      	movs	r2, r5
 80063be:	4958      	ldr	r1, [pc, #352]	; (8006520 <getCommand+0x1f8>)
 80063c0:	0030      	movs	r0, r6
 80063c2:	f00e f873 	bl	80144ac <strncmp>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d14a      	bne.n	8006460 <getCommand+0x138>
			if(BOSMessaging.trace == TRACE_BOTH)
 80063ca:	4b4f      	ldr	r3, [pc, #316]	; (8006508 <getCommand+0x1e0>)
 80063cc:	785b      	ldrb	r3, [r3, #1]
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d0ee      	beq.n	80063b0 <getCommand+0x88>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d0d2      	beq.n	800637c <getCommand+0x54>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d03c      	beq.n	8006454 <getCommand+0x12c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 80063da:	003a      	movs	r2, r7
 80063dc:	4951      	ldr	r1, [pc, #324]	; (8006524 <getCommand+0x1fc>)
 80063de:	0020      	movs	r0, r4
 80063e0:	f00e f820 	bl	8014424 <sprintf>
 80063e4:	e7de      	b.n	80063a4 <getCommand+0x7c>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80063e6:	0028      	movs	r0, r5
 80063e8:	aa01      	add	r2, sp, #4
 80063ea:	2102      	movs	r1, #2
 80063ec:	f008 f838 	bl	800e460 <FreeRTOS_CLIGetParameter>
 80063f0:	2600      	movs	r6, #0
 80063f2:	0005      	movs	r5, r0
 80063f4:	4f4c      	ldr	r7, [pc, #304]	; (8006528 <getCommand+0x200>)
 80063f6:	e003      	b.n	8006400 <getCommand+0xd8>
 80063f8:	3601      	adds	r6, #1
 80063fa:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 80063fc:	2e0a      	cmp	r6, #10
 80063fe:	d05a      	beq.n	80064b6 <getCommand+0x18e>
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8006400:	0039      	movs	r1, r7
 8006402:	0028      	movs	r0, r5
 8006404:	f7f9 fe7e 	bl	8000104 <strcmp>
 8006408:	2800      	cmp	r0, #0
 800640a:	d1f5      	bne.n	80063f8 <getCommand+0xd0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 800640c:	002a      	movs	r2, r5
 800640e:	4947      	ldr	r1, [pc, #284]	; (800652c <getCommand+0x204>)
 8006410:	0020      	movs	r0, r4
 8006412:	f00e f807 	bl	8014424 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 8006416:	4f46      	ldr	r7, [pc, #280]	; (8006530 <getCommand+0x208>)
 8006418:	783b      	ldrb	r3, [r7, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0c2      	beq.n	80063a4 <getCommand+0x7c>
 800641e:	2501      	movs	r5, #1
 8006420:	002b      	movs	r3, r5
 8006422:	40b3      	lsls	r3, r6
 8006424:	4698      	mov	r8, r3
 8006426:	4b43      	ldr	r3, [pc, #268]	; (8006534 <getCommand+0x20c>)
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8006428:	4e43      	ldr	r6, [pc, #268]	; (8006538 <getCommand+0x210>)
 800642a:	4699      	mov	r9, r3
 800642c:	e004      	b.n	8006438 <getCommand+0x110>
			for(j =1; j <= N; j++)						// N modules
 800642e:	3501      	adds	r5, #1
 8006430:	783b      	ldrb	r3, [r7, #0]
 8006432:	b2ed      	uxtb	r5, r5
 8006434:	42ab      	cmp	r3, r5
 8006436:	d3b5      	bcc.n	80063a4 <getCommand+0x7c>
				if(InGroup(j,i)){
 8006438:	464a      	mov	r2, r9
 800643a:	1e6b      	subs	r3, r5, #1
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	5ad3      	ldrh	r3, [r2, r3]
 8006440:	4642      	mov	r2, r8
 8006442:	421a      	tst	r2, r3
 8006444:	d0f3      	beq.n	800642e <getCommand+0x106>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8006446:	002b      	movs	r3, r5
 8006448:	0022      	movs	r2, r4
 800644a:	0031      	movs	r1, r6
 800644c:	0020      	movs	r0, r4
 800644e:	f00d ffe9 	bl	8014424 <sprintf>
 8006452:	e7ec      	b.n	800642e <getCommand+0x106>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8006454:	4a39      	ldr	r2, [pc, #228]	; (800653c <getCommand+0x214>)
 8006456:	492e      	ldr	r1, [pc, #184]	; (8006510 <getCommand+0x1e8>)
 8006458:	0020      	movs	r0, r4
 800645a:	f00d ffe3 	bl	8014424 <sprintf>
 800645e:	e7a1      	b.n	80063a4 <getCommand+0x7c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006460:	002a      	movs	r2, r5
 8006462:	4937      	ldr	r1, [pc, #220]	; (8006540 <getCommand+0x218>)
 8006464:	0030      	movs	r0, r6
 8006466:	f00e f821 	bl	80144ac <strncmp>
 800646a:	2800      	cmp	r0, #0
 800646c:	d037      	beq.n	80064de <getCommand+0x1b6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800646e:	002a      	movs	r2, r5
 8006470:	4934      	ldr	r1, [pc, #208]	; (8006544 <getCommand+0x21c>)
 8006472:	0030      	movs	r0, r6
 8006474:	f00e f81a 	bl	80144ac <strncmp>
 8006478:	2800      	cmp	r0, #0
 800647a:	d029      	beq.n	80064d0 <getCommand+0x1a8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 800647c:	002a      	movs	r2, r5
 800647e:	4932      	ldr	r1, [pc, #200]	; (8006548 <getCommand+0x220>)
 8006480:	0030      	movs	r0, r6
 8006482:	f00e f813 	bl	80144ac <strncmp>
 8006486:	2800      	cmp	r0, #0
 8006488:	d030      	beq.n	80064ec <getCommand+0x1c4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 800648a:	002a      	movs	r2, r5
 800648c:	492f      	ldr	r1, [pc, #188]	; (800654c <getCommand+0x224>)
 800648e:	0030      	movs	r0, r6
 8006490:	f00e f80c 	bl	80144ac <strncmp>
 8006494:	2800      	cmp	r0, #0
 8006496:	d014      	beq.n	80064c2 <getCommand+0x19a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006498:	002a      	movs	r2, r5
 800649a:	492d      	ldr	r1, [pc, #180]	; (8006550 <getCommand+0x228>)
 800649c:	0030      	movs	r0, r6
 800649e:	f00e f805 	bl	80144ac <strncmp>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d000      	beq.n	80064a8 <getCommand+0x180>
 80064a6:	e778      	b.n	800639a <getCommand+0x72>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 80064a8:	4b2a      	ldr	r3, [pc, #168]	; (8006554 <getCommand+0x22c>)
 80064aa:	492b      	ldr	r1, [pc, #172]	; (8006558 <getCommand+0x230>)
 80064ac:	795a      	ldrb	r2, [r3, #5]
 80064ae:	0020      	movs	r0, r4
 80064b0:	f00d ffb8 	bl	8014424 <sprintf>
 80064b4:	e776      	b.n	80063a4 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 80064b6:	002a      	movs	r2, r5
 80064b8:	4928      	ldr	r1, [pc, #160]	; (800655c <getCommand+0x234>)
 80064ba:	0020      	movs	r0, r4
 80064bc:	f00d ffb2 	bl	8014424 <sprintf>
			return pdFALSE;
 80064c0:	e770      	b.n	80063a4 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 80064c2:	4b24      	ldr	r3, [pc, #144]	; (8006554 <getCommand+0x22c>)
 80064c4:	4924      	ldr	r1, [pc, #144]	; (8006558 <getCommand+0x230>)
 80064c6:	791a      	ldrb	r2, [r3, #4]
 80064c8:	0020      	movs	r0, r4
 80064ca:	f00d ffab 	bl	8014424 <sprintf>
 80064ce:	e769      	b.n	80063a4 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 80064d0:	4b20      	ldr	r3, [pc, #128]	; (8006554 <getCommand+0x22c>)
 80064d2:	4921      	ldr	r1, [pc, #132]	; (8006558 <getCommand+0x230>)
 80064d4:	881a      	ldrh	r2, [r3, #0]
 80064d6:	0020      	movs	r0, r4
 80064d8:	f00d ffa4 	bl	8014424 <sprintf>
 80064dc:	e762      	b.n	80063a4 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 80064de:	4b1d      	ldr	r3, [pc, #116]	; (8006554 <getCommand+0x22c>)
 80064e0:	491d      	ldr	r1, [pc, #116]	; (8006558 <getCommand+0x230>)
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	0020      	movs	r0, r4
 80064e6:	f00d ff9d 	bl	8014424 <sprintf>
 80064ea:	e75b      	b.n	80063a4 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 80064ec:	4b19      	ldr	r3, [pc, #100]	; (8006554 <getCommand+0x22c>)
 80064ee:	491a      	ldr	r1, [pc, #104]	; (8006558 <getCommand+0x230>)
 80064f0:	885a      	ldrh	r2, [r3, #2]
 80064f2:	0020      	movs	r0, r4
 80064f4:	f00d ff96 	bl	8014424 <sprintf>
 80064f8:	e754      	b.n	80063a4 <getCommand+0x7c>
 80064fa:	46c0      	nop			; (mov r8, r8)
 80064fc:	20001240 	.word	0x20001240
 8006500:	08019f58 	.word	0x08019f58
 8006504:	08019f60 	.word	0x08019f60
 8006508:	20006c4c 	.word	0x20006c4c
 800650c:	08019f6c 	.word	0x08019f6c
 8006510:	0801921c 	.word	0x0801921c
 8006514:	08019fd0 	.word	0x08019fd0
 8006518:	08019fe0 	.word	0x08019fe0
 800651c:	08019340 	.word	0x08019340
 8006520:	08019f78 	.word	0x08019f78
 8006524:	08019ff4 	.word	0x08019ff4
 8006528:	20000ad0 	.word	0x20000ad0
 800652c:	0801a030 	.word	0x0801a030
 8006530:	20000000 	.word	0x20000000
 8006534:	20000a9c 	.word	0x20000a9c
 8006538:	08019fd8 	.word	0x08019fd8
 800653c:	08019f70 	.word	0x08019f70
 8006540:	08019f80 	.word	0x08019f80
 8006544:	08019f8c 	.word	0x08019f8c
 8006548:	08019f98 	.word	0x08019f98
 800654c:	08019fa8 	.word	0x08019fa8
 8006550:	08019fbc 	.word	0x08019fbc
 8006554:	20006ccc 	.word	0x20006ccc
 8006558:	08019724 	.word	0x08019724
 800655c:	0801a014 	.word	0x0801a014

08006560 <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006560:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006562:	b570      	push	{r4, r5, r6, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8006568:	9301      	str	r3, [sp, #4]
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800656a:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 800656c:	2c00      	cmp	r4, #0
 800656e:	d02c      	beq.n	80065ca <defaultCommand+0x6a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006570:	aa01      	add	r2, sp, #4
 8006572:	2101      	movs	r1, #1
 8006574:	f007 ff74 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006578:	9e01      	ldr	r6, [sp, #4]
 800657a:	4920      	ldr	r1, [pc, #128]	; (80065fc <defaultCommand+0x9c>)
 800657c:	0032      	movs	r2, r6
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800657e:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006580:	f00d ff94 	bl	80144ac <strncmp>
 8006584:	2800      	cmp	r0, #0
 8006586:	d022      	beq.n	80065ce <defaultCommand+0x6e>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006588:	0032      	movs	r2, r6
 800658a:	491d      	ldr	r1, [pc, #116]	; (8006600 <defaultCommand+0xa0>)
 800658c:	0028      	movs	r0, r5
 800658e:	f00d ff8d 	bl	80144ac <strncmp>
 8006592:	2800      	cmp	r0, #0
 8006594:	d12c      	bne.n	80065f0 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006596:	2116      	movs	r1, #22
 8006598:	2200      	movs	r2, #0
 800659a:	20ff      	movs	r0, #255	; 0xff
 800659c:	f003 f94e 	bl	800983c <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 80065a0:	2202      	movs	r2, #2
 80065a2:	4b18      	ldr	r3, [pc, #96]	; (8006604 <defaultCommand+0xa4>)
		osDelay(100);
 80065a4:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 80065a6:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80065a8:	f007 fe4a 	bl	800e240 <osDelay>
		ClearEEportsDir();
 80065ac:	f7fd f95a 	bl	8003864 <ClearEEportsDir>
		ClearROtopology();
 80065b0:	f005 f8a8 	bl	800b704 <ClearROtopology>
		osDelay(100);
 80065b4:	2064      	movs	r0, #100	; 0x64
 80065b6:	f007 fe43 	bl	800e240 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 80065ba:	2240      	movs	r2, #64	; 0x40
 80065bc:	4912      	ldr	r1, [pc, #72]	; (8006608 <defaultCommand+0xa8>)
 80065be:	0020      	movs	r0, r4
 80065c0:	f00d fd2d 	bl	801401e <memcpy>
}
 80065c4:	2000      	movs	r0, #0
 80065c6:	b002      	add	sp, #8
 80065c8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80065ca:	b672      	cpsid	i
 80065cc:	e7fe      	b.n	80065cc <defaultCommand+0x6c>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 80065ce:	490f      	ldr	r1, [pc, #60]	; (800660c <defaultCommand+0xac>)
 80065d0:	4b0f      	ldr	r3, [pc, #60]	; (8006610 <defaultCommand+0xb0>)
 80065d2:	000a      	movs	r2, r1
 80065d4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80065d6:	c223      	stmia	r2!, {r0, r1, r5}
 80065d8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80065da:	c223      	stmia	r2!, {r0, r1, r5}
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 80065e0:	f7fd f8fc 	bl	80037dc <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 80065e4:	2227      	movs	r2, #39	; 0x27
 80065e6:	490b      	ldr	r1, [pc, #44]	; (8006614 <defaultCommand+0xb4>)
 80065e8:	0020      	movs	r0, r4
 80065ea:	f00d fd18 	bl	801401e <memcpy>
 80065ee:	e7e9      	b.n	80065c4 <defaultCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80065f0:	220f      	movs	r2, #15
 80065f2:	4909      	ldr	r1, [pc, #36]	; (8006618 <defaultCommand+0xb8>)
 80065f4:	0020      	movs	r0, r4
 80065f6:	f00d fd12 	bl	801401e <memcpy>
 80065fa:	e7e3      	b.n	80065c4 <defaultCommand+0x64>
 80065fc:	0801a044 	.word	0x0801a044
 8006600:	0801a074 	.word	0x0801a074
 8006604:	2000113e 	.word	0x2000113e
 8006608:	0801a08c 	.word	0x0801a08c
 800660c:	20006ccc 	.word	0x20006ccc
 8006610:	2000000c 	.word	0x2000000c
 8006614:	0801a04c 	.word	0x0801a04c
 8006618:	0801a07c 	.word	0x0801a07c

0800661c <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800661c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661e:	4657      	mov	r7, sl
 8006620:	46de      	mov	lr, fp
 8006622:	464e      	mov	r6, r9
 8006624:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006626:	2300      	movs	r3, #0
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006628:	b5e0      	push	{r5, r6, r7, lr}
 800662a:	b08f      	sub	sp, #60	; 0x3c
 800662c:	0007      	movs	r7, r0
 800662e:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006630:	9309      	str	r3, [sp, #36]	; 0x24
 8006632:	930a      	str	r3, [sp, #40]	; 0x28
 8006634:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 8006636:	930c      	str	r3, [sp, #48]	; 0x30
 8006638:	930d      	str	r3, [sp, #52]	; 0x34
	configASSERT(pcWriteBuffer);
 800663a:	2800      	cmp	r0, #0
 800663c:	d029      	beq.n	8006692 <setCommand+0x76>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800663e:	aa09      	add	r2, sp, #36	; 0x24
 8006640:	2101      	movs	r1, #1
 8006642:	0020      	movs	r0, r4
 8006644:	f007 ff0c 	bl	800e460 <FreeRTOS_CLIGetParameter>
 8006648:	4dbf      	ldr	r5, [pc, #764]	; (8006948 <setCommand+0x32c>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 800664a:	2204      	movs	r2, #4
 800664c:	49bf      	ldr	r1, [pc, #764]	; (800694c <setCommand+0x330>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800664e:	4681      	mov	r9, r0
 8006650:	63a8      	str	r0, [r5, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006652:	f00d ff2b 	bl	80144ac <strncmp>
 8006656:	2800      	cmp	r0, #0
 8006658:	d01d      	beq.n	8006696 <setCommand+0x7a>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 800665a:	2204      	movs	r2, #4
 800665c:	49bc      	ldr	r1, [pc, #752]	; (8006950 <setCommand+0x334>)
 800665e:	4648      	mov	r0, r9
 8006660:	f00d ff24 	bl	80144ac <strncmp>
 8006664:	2800      	cmp	r0, #0
 8006666:	d100      	bne.n	800666a <setCommand+0x4e>
 8006668:	e0ed      	b.n	8006846 <setCommand+0x22a>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 800666a:	2204      	movs	r2, #4
 800666c:	49b9      	ldr	r1, [pc, #740]	; (8006954 <setCommand+0x338>)
 800666e:	4648      	mov	r0, r9
 8006670:	f00d ff1c 	bl	80144ac <strncmp>
 8006674:	2800      	cmp	r0, #0
 8006676:	d04b      	beq.n	8006710 <setCommand+0xf4>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006678:	2213      	movs	r2, #19
 800667a:	49b7      	ldr	r1, [pc, #732]	; (8006958 <setCommand+0x33c>)
 800667c:	0038      	movs	r0, r7
 800667e:	f00d fcce 	bl	801401e <memcpy>
}
 8006682:	2000      	movs	r0, #0
 8006684:	b00f      	add	sp, #60	; 0x3c
 8006686:	bc3c      	pop	{r2, r3, r4, r5}
 8006688:	4690      	mov	r8, r2
 800668a:	4699      	mov	r9, r3
 800668c:	46a2      	mov	sl, r4
 800668e:	46ab      	mov	fp, r5
 8006690:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006692:	b672      	cpsid	i
 8006694:	e7fe      	b.n	8006694 <setCommand+0x78>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006696:	aa0a      	add	r2, sp, #40	; 0x28
 8006698:	2102      	movs	r1, #2
 800669a:	0020      	movs	r0, r4
 800669c:	f007 fee0 	bl	800e460 <FreeRTOS_CLIGetParameter>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80066a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80066a2:	0004      	movs	r4, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80066a4:	1d1e      	adds	r6, r3, #4
 80066a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80066a8:	63e8      	str	r0, [r5, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80066aa:	3b04      	subs	r3, #4
 80066ac:	4698      	mov	r8, r3
 80066ae:	4bab      	ldr	r3, [pc, #684]	; (800695c <setCommand+0x340>)
 80066b0:	4642      	mov	r2, r8
 80066b2:	0019      	movs	r1, r3
 80066b4:	0030      	movs	r0, r6
 80066b6:	4699      	mov	r9, r3
 80066b8:	f00d fef8 	bl	80144ac <strncmp>
 80066bc:	2800      	cmp	r0, #0
 80066be:	d000      	beq.n	80066c2 <setCommand+0xa6>
 80066c0:	e269      	b.n	8006b96 <setCommand+0x57a>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80066c2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80066c4:	49a6      	ldr	r1, [pc, #664]	; (8006960 <setCommand+0x344>)
 80066c6:	0032      	movs	r2, r6
 80066c8:	0020      	movs	r0, r4
 80066ca:	f00d feef 	bl	80144ac <strncmp>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d100      	bne.n	80066d4 <setCommand+0xb8>
 80066d2:	e25d      	b.n	8006b90 <setCommand+0x574>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80066d4:	0032      	movs	r2, r6
 80066d6:	49a3      	ldr	r1, [pc, #652]	; (8006964 <setCommand+0x348>)
 80066d8:	0020      	movs	r0, r4
 80066da:	f00d fee7 	bl	80144ac <strncmp>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d100      	bne.n	80066e4 <setCommand+0xc8>
 80066e2:	e252      	b.n	8006b8a <setCommand+0x56e>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 80066e4:	0032      	movs	r2, r6
 80066e6:	49a0      	ldr	r1, [pc, #640]	; (8006968 <setCommand+0x34c>)
 80066e8:	0020      	movs	r0, r4
 80066ea:	f00d fedf 	bl	80144ac <strncmp>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d100      	bne.n	80066f4 <setCommand+0xd8>
 80066f2:	e23f      	b.n	8006b74 <setCommand+0x558>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80066f4:	0032      	movs	r2, r6
 80066f6:	499d      	ldr	r1, [pc, #628]	; (800696c <setCommand+0x350>)
 80066f8:	0020      	movs	r0, r4
 80066fa:	f00d fed7 	bl	80144ac <strncmp>
 80066fe:	2800      	cmp	r0, #0
 8006700:	d100      	bne.n	8006704 <setCommand+0xe8>
 8006702:	e0fd      	b.n	8006900 <setCommand+0x2e4>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006704:	220f      	movs	r2, #15
 8006706:	499a      	ldr	r1, [pc, #616]	; (8006970 <setCommand+0x354>)
 8006708:	0038      	movs	r0, r7
 800670a:	f00d fc88 	bl	801401e <memcpy>
 800670e:	e7b8      	b.n	8006682 <setCommand+0x66>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006710:	aa0a      	add	r2, sp, #40	; 0x28
 8006712:	2102      	movs	r1, #2
 8006714:	0020      	movs	r0, r4
 8006716:	f007 fea3 	bl	800e460 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800671a:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800671c:	63e8      	str	r0, [r5, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800671e:	2103      	movs	r1, #3
 8006720:	0020      	movs	r0, r4
 8006722:	f007 fe9d 	bl	800e460 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006726:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006728:	6428      	str	r0, [r5, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800672a:	2104      	movs	r1, #4
 800672c:	0020      	movs	r0, r4
 800672e:	f007 fe97 	bl	800e460 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006732:	aa0d      	add	r2, sp, #52	; 0x34
 8006734:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006736:	6468      	str	r0, [r5, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006738:	0020      	movs	r0, r4
 800673a:	f007 fe91 	bl	800e460 <FreeRTOS_CLIGetParameter>
 800673e:	64a8      	str	r0, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006740:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8006742:	f00d f9a6 	bl	8013a92 <atoi>
 8006746:	b2c3      	uxtb	r3, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006748:	6ca8      	ldr	r0, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 800674a:	469b      	mov	fp, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 800674c:	f00d f9a1 	bl	8013a92 <atoi>
 8006750:	b283      	uxth	r3, r0
 8006752:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006754:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006756:	2206      	movs	r2, #6
 8006758:	4986      	ldr	r1, [pc, #536]	; (8006974 <setCommand+0x358>)
 800675a:	0018      	movs	r0, r3
 800675c:	4698      	mov	r8, r3
 800675e:	f00d fea5 	bl	80144ac <strncmp>
 8006762:	2800      	cmp	r0, #0
 8006764:	d100      	bne.n	8006768 <setCommand+0x14c>
 8006766:	e201      	b.n	8006b6c <setCommand+0x550>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006768:	2207      	movs	r2, #7
 800676a:	4983      	ldr	r1, [pc, #524]	; (8006978 <setCommand+0x35c>)
 800676c:	4640      	mov	r0, r8
 800676e:	f00d fe9d 	bl	80144ac <strncmp>
 8006772:	4b82      	ldr	r3, [pc, #520]	; (800697c <setCommand+0x360>)
 8006774:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8006776:	9006      	str	r0, [sp, #24]
 8006778:	0019      	movs	r1, r3
 800677a:	2207      	movs	r2, #7
 800677c:	0020      	movs	r0, r4
 800677e:	469a      	mov	sl, r3
 8006780:	f00d fe94 	bl	80144ac <strncmp>
 8006784:	9b06      	ldr	r3, [sp, #24]
 8006786:	9007      	str	r0, [sp, #28]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d100      	bne.n	800678e <setCommand+0x172>
 800678c:	e1ec      	b.n	8006b68 <setCommand+0x54c>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 800678e:	2209      	movs	r2, #9
 8006790:	497b      	ldr	r1, [pc, #492]	; (8006980 <setCommand+0x364>)
 8006792:	4640      	mov	r0, r8
 8006794:	f00d fe8a 	bl	80144ac <strncmp>
 8006798:	2800      	cmp	r0, #0
 800679a:	d100      	bne.n	800679e <setCommand+0x182>
 800679c:	e1e2      	b.n	8006b64 <setCommand+0x548>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 800679e:	2208      	movs	r2, #8
 80067a0:	4978      	ldr	r1, [pc, #480]	; (8006984 <setCommand+0x368>)
 80067a2:	4640      	mov	r0, r8
 80067a4:	f00d fe82 	bl	80144ac <strncmp>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d100      	bne.n	80067ae <setCommand+0x192>
 80067ac:	e1d8      	b.n	8006b60 <setCommand+0x544>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 80067ae:	2206      	movs	r2, #6
 80067b0:	4975      	ldr	r1, [pc, #468]	; (8006988 <setCommand+0x36c>)
 80067b2:	4640      	mov	r0, r8
 80067b4:	f00d fe7a 	bl	80144ac <strncmp>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d100      	bne.n	80067be <setCommand+0x1a2>
 80067bc:	e1ce      	b.n	8006b5c <setCommand+0x540>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 80067be:	2208      	movs	r2, #8
 80067c0:	4972      	ldr	r1, [pc, #456]	; (800698c <setCommand+0x370>)
 80067c2:	4640      	mov	r0, r8
 80067c4:	f00d fe72 	bl	80144ac <strncmp>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d100      	bne.n	80067ce <setCommand+0x1b2>
 80067cc:	e1c4      	b.n	8006b58 <setCommand+0x53c>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 80067ce:	2206      	movs	r2, #6
 80067d0:	496f      	ldr	r1, [pc, #444]	; (8006990 <setCommand+0x374>)
 80067d2:	4640      	mov	r0, r8
 80067d4:	f00d fe6a 	bl	80144ac <strncmp>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d000      	beq.n	80067de <setCommand+0x1c2>
 80067dc:	e0ea      	b.n	80069b4 <setCommand+0x398>
			temp81 =SUNDAY;
 80067de:	2607      	movs	r6, #7
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80067e0:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80067e2:	2207      	movs	r2, #7
 80067e4:	4651      	mov	r1, sl
 80067e6:	0020      	movs	r0, r4
 80067e8:	f00d fe60 	bl	80144ac <strncmp>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d000      	beq.n	80067f2 <setCommand+0x1d6>
 80067f0:	e098      	b.n	8006924 <setCommand+0x308>
			temp82 =JANUARY;
 80067f2:	2401      	movs	r4, #1
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80067f4:	465b      	mov	r3, fp
 80067f6:	3b01      	subs	r3, #1
 80067f8:	2b1e      	cmp	r3, #30
 80067fa:	d883      	bhi.n	8006704 <setCommand+0xe8>
 80067fc:	4b65      	ldr	r3, [pc, #404]	; (8006994 <setCommand+0x378>)
 80067fe:	444b      	add	r3, r9
 8006800:	2b64      	cmp	r3, #100	; 0x64
 8006802:	d900      	bls.n	8006806 <setCommand+0x1ea>
 8006804:	e77e      	b.n	8006704 <setCommand+0xe8>
				GetTimeDate();
 8006806:	f007 f9ad 	bl	800db64 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 800680a:	220c      	movs	r2, #12
 800680c:	4b62      	ldr	r3, [pc, #392]	; (8006998 <setCommand+0x37c>)
 800680e:	4659      	mov	r1, fp
 8006810:	569a      	ldrsb	r2, [r3, r2]
 8006812:	0020      	movs	r0, r4
 8006814:	9204      	str	r2, [sp, #16]
 8006816:	7cda      	ldrb	r2, [r3, #19]
 8006818:	9203      	str	r2, [sp, #12]
 800681a:	7c9a      	ldrb	r2, [r3, #18]
 800681c:	9202      	str	r2, [sp, #8]
 800681e:	7c5a      	ldrb	r2, [r3, #17]
 8006820:	9201      	str	r2, [sp, #4]
 8006822:	7c1b      	ldrb	r3, [r3, #16]
 8006824:	464a      	mov	r2, r9
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	0033      	movs	r3, r6
 800682a:	f007 f941 	bl	800dab0 <BOS_CalendarConfig>
 800682e:	4680      	mov	r8, r0
	if(result == BOS_OK){
 8006830:	4643      	mov	r3, r8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d06c      	beq.n	8006910 <setCommand+0x2f4>
	else if(result == BOS_ERR_WrongParam)
 8006836:	4643      	mov	r3, r8
 8006838:	2b67      	cmp	r3, #103	; 0x67
 800683a:	d100      	bne.n	800683e <setCommand+0x222>
 800683c:	e71c      	b.n	8006678 <setCommand+0x5c>
	else if(result == BOS_ERR_WrongValue)
 800683e:	2b68      	cmp	r3, #104	; 0x68
 8006840:	d000      	beq.n	8006844 <setCommand+0x228>
 8006842:	e71e      	b.n	8006682 <setCommand+0x66>
 8006844:	e75e      	b.n	8006704 <setCommand+0xe8>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006846:	aa0a      	add	r2, sp, #40	; 0x28
 8006848:	2102      	movs	r1, #2
 800684a:	0020      	movs	r0, r4
 800684c:	f007 fe08 	bl	800e460 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006850:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006852:	63e8      	str	r0, [r5, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006854:	2103      	movs	r1, #3
 8006856:	0020      	movs	r0, r4
 8006858:	f007 fe02 	bl	800e460 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800685c:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800685e:	6428      	str	r0, [r5, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006860:	2104      	movs	r1, #4
 8006862:	0020      	movs	r0, r4
 8006864:	f007 fdfc 	bl	800e460 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006868:	aa0d      	add	r2, sp, #52	; 0x34
 800686a:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800686c:	6468      	str	r0, [r5, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800686e:	0020      	movs	r0, r4
 8006870:	f007 fdf6 	bl	800e460 <FreeRTOS_CLIGetParameter>
 8006874:	64a8      	str	r0, [r5, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006876:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8006878:	f00d f90b 	bl	8013a92 <atoi>
 800687c:	b2c6      	uxtb	r6, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800687e:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8006880:	f00d f907 	bl	8013a92 <atoi>
 8006884:	b2c3      	uxtb	r3, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006886:	6c68      	ldr	r0, [r5, #68]	; 0x44
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006888:	4699      	mov	r9, r3
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800688a:	f00d f902 	bl	8013a92 <atoi>
		if(pcParameterString5 != NULL){
 800688e:	6cac      	ldr	r4, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006890:	b2c3      	uxtb	r3, r0
 8006892:	469a      	mov	sl, r3
		if(pcParameterString5 != NULL){
 8006894:	2c00      	cmp	r4, #0
 8006896:	d010      	beq.n	80068ba <setCommand+0x29e>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006898:	2202      	movs	r2, #2
 800689a:	4940      	ldr	r1, [pc, #256]	; (800699c <setCommand+0x380>)
 800689c:	0020      	movs	r0, r4
 800689e:	f00d fe05 	bl	80144ac <strncmp>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d029      	beq.n	80068fa <setCommand+0x2de>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 80068a6:	2202      	movs	r2, #2
 80068a8:	493d      	ldr	r1, [pc, #244]	; (80069a0 <setCommand+0x384>)
 80068aa:	0020      	movs	r0, r4
 80068ac:	f00d fdfe 	bl	80144ac <strncmp>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d000      	beq.n	80068b6 <setCommand+0x29a>
 80068b4:	e726      	b.n	8006704 <setCommand+0xe8>
				temp84 =RTC_PM;
 80068b6:	2302      	movs	r3, #2
 80068b8:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80068ba:	2e17      	cmp	r6, #23
 80068bc:	d900      	bls.n	80068c0 <setCommand+0x2a4>
 80068be:	e721      	b.n	8006704 <setCommand+0xe8>
 80068c0:	464b      	mov	r3, r9
 80068c2:	2b3b      	cmp	r3, #59	; 0x3b
 80068c4:	d900      	bls.n	80068c8 <setCommand+0x2ac>
 80068c6:	e71d      	b.n	8006704 <setCommand+0xe8>
 80068c8:	4653      	mov	r3, sl
 80068ca:	2b3b      	cmp	r3, #59	; 0x3b
 80068cc:	d900      	bls.n	80068d0 <setCommand+0x2b4>
 80068ce:	e719      	b.n	8006704 <setCommand+0xe8>
				GetTimeDate();
 80068d0:	f007 f948 	bl	800db64 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 80068d4:	4c30      	ldr	r4, [pc, #192]	; (8006998 <setCommand+0x37c>)
 80068d6:	7d23      	ldrb	r3, [r4, #20]
 80068d8:	8b22      	ldrh	r2, [r4, #24]
 80068da:	7d61      	ldrb	r1, [r4, #21]
 80068dc:	7da0      	ldrb	r0, [r4, #22]
 80068de:	7b24      	ldrb	r4, [r4, #12]
 80068e0:	9602      	str	r6, [sp, #8]
 80068e2:	b264      	sxtb	r4, r4
 80068e4:	9404      	str	r4, [sp, #16]
 80068e6:	4644      	mov	r4, r8
 80068e8:	9403      	str	r4, [sp, #12]
 80068ea:	464c      	mov	r4, r9
 80068ec:	9401      	str	r4, [sp, #4]
 80068ee:	4654      	mov	r4, sl
 80068f0:	9400      	str	r4, [sp, #0]
 80068f2:	f007 f8dd 	bl	800dab0 <BOS_CalendarConfig>
 80068f6:	4680      	mov	r8, r0
 80068f8:	e79a      	b.n	8006830 <setCommand+0x214>
				temp84 =RTC_AM;
 80068fa:	2301      	movs	r3, #1
 80068fc:	4698      	mov	r8, r3
 80068fe:	e7dc      	b.n	80068ba <setCommand+0x29e>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006900:	4b28      	ldr	r3, [pc, #160]	; (80069a4 <setCommand+0x388>)
 8006902:	7018      	strb	r0, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006904:	208a      	movs	r0, #138	; 0x8a
 8006906:	7859      	ldrb	r1, [r3, #1]
 8006908:	0040      	lsls	r0, r0, #1
 800690a:	0209      	lsls	r1, r1, #8
 800690c:	f001 f8fa 	bl	8007b04 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006910:	2300      	movs	r3, #0
 8006912:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006914:	6baa      	ldr	r2, [r5, #56]	; 0x38
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006916:	0038      	movs	r0, r7
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006918:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800691a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800691c:	4922      	ldr	r1, [pc, #136]	; (80069a8 <setCommand+0x38c>)
 800691e:	f00d fd81 	bl	8014424 <sprintf>
	return pdFALSE;
 8006922:	e6ae      	b.n	8006682 <setCommand+0x66>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006924:	2202      	movs	r2, #2
 8006926:	4921      	ldr	r1, [pc, #132]	; (80069ac <setCommand+0x390>)
 8006928:	0020      	movs	r0, r4
 800692a:	f00d fdbf 	bl	80144ac <strncmp>
 800692e:	2800      	cmp	r0, #0
 8006930:	d100      	bne.n	8006934 <setCommand+0x318>
 8006932:	e75e      	b.n	80067f2 <setCommand+0x1d6>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006934:	2208      	movs	r2, #8
 8006936:	491e      	ldr	r1, [pc, #120]	; (80069b0 <setCommand+0x394>)
 8006938:	0020      	movs	r0, r4
 800693a:	f00d fdb7 	bl	80144ac <strncmp>
 800693e:	2800      	cmp	r0, #0
 8006940:	d000      	beq.n	8006944 <setCommand+0x328>
 8006942:	e0fe      	b.n	8006b42 <setCommand+0x526>
			temp82 =FEBRUARY;
 8006944:	2402      	movs	r4, #2
 8006946:	e755      	b.n	80067f4 <setCommand+0x1d8>
 8006948:	20001240 	.word	0x20001240
 800694c:	08019f58 	.word	0x08019f58
 8006950:	0801a1d0 	.word	0x0801a1d0
 8006954:	0801a1dc 	.word	0x0801a1dc
 8006958:	08019fe0 	.word	0x08019fe0
 800695c:	08019f60 	.word	0x08019f60
 8006960:	08019340 	.word	0x08019340
 8006964:	0801a0cc 	.word	0x0801a0cc
 8006968:	0801a0d4 	.word	0x0801a0d4
 800696c:	08019f70 	.word	0x08019f70
 8006970:	0801a07c 	.word	0x0801a07c
 8006974:	0801a1e4 	.word	0x0801a1e4
 8006978:	0801a1ec 	.word	0x0801a1ec
 800697c:	0801a1f4 	.word	0x0801a1f4
 8006980:	0801a1fc 	.word	0x0801a1fc
 8006984:	0801a208 	.word	0x0801a208
 8006988:	0801a214 	.word	0x0801a214
 800698c:	0801a21c 	.word	0x0801a21c
 8006990:	0801a228 	.word	0x0801a228
 8006994:	fffff830 	.word	0xfffff830
 8006998:	20006ccc 	.word	0x20006ccc
 800699c:	0801ba38 	.word	0x0801ba38
 80069a0:	0801a1d8 	.word	0x0801a1d8
 80069a4:	20006c4c 	.word	0x20006c4c
 80069a8:	0801a0d8 	.word	0x0801a0d8
 80069ac:	0801a2b0 	.word	0x0801a2b0
 80069b0:	0801a2b4 	.word	0x0801a2b4
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80069b4:	9b07      	ldr	r3, [sp, #28]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d100      	bne.n	80069bc <setCommand+0x3a0>
 80069ba:	e6a3      	b.n	8006704 <setCommand+0xe8>
 80069bc:	2202      	movs	r2, #2
 80069be:	49c7      	ldr	r1, [pc, #796]	; (8006cdc <setCommand+0x6c0>)
 80069c0:	0020      	movs	r0, r4
 80069c2:	f00d fd73 	bl	80144ac <strncmp>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d100      	bne.n	80069cc <setCommand+0x3b0>
 80069ca:	e69b      	b.n	8006704 <setCommand+0xe8>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 80069cc:	2208      	movs	r2, #8
 80069ce:	49c4      	ldr	r1, [pc, #784]	; (8006ce0 <setCommand+0x6c4>)
 80069d0:	0020      	movs	r0, r4
 80069d2:	f00d fd6b 	bl	80144ac <strncmp>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d100      	bne.n	80069dc <setCommand+0x3c0>
 80069da:	e693      	b.n	8006704 <setCommand+0xe8>
 80069dc:	2202      	movs	r2, #2
 80069de:	49c1      	ldr	r1, [pc, #772]	; (8006ce4 <setCommand+0x6c8>)
 80069e0:	0020      	movs	r0, r4
 80069e2:	f00d fd63 	bl	80144ac <strncmp>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d100      	bne.n	80069ec <setCommand+0x3d0>
 80069ea:	e68b      	b.n	8006704 <setCommand+0xe8>
			result =BOS_ERR_WrongValue;
 80069ec:	2368      	movs	r3, #104	; 0x68
 80069ee:	4698      	mov	r8, r3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 80069f0:	2205      	movs	r2, #5
 80069f2:	49bd      	ldr	r1, [pc, #756]	; (8006ce8 <setCommand+0x6cc>)
 80069f4:	0020      	movs	r0, r4
 80069f6:	f00d fd59 	bl	80144ac <strncmp>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d100      	bne.n	8006a00 <setCommand+0x3e4>
 80069fe:	e09e      	b.n	8006b3e <setCommand+0x522>
 8006a00:	2202      	movs	r2, #2
 8006a02:	49ba      	ldr	r1, [pc, #744]	; (8006cec <setCommand+0x6d0>)
 8006a04:	0020      	movs	r0, r4
 8006a06:	f00d fd51 	bl	80144ac <strncmp>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d100      	bne.n	8006a10 <setCommand+0x3f4>
 8006a0e:	e096      	b.n	8006b3e <setCommand+0x522>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006a10:	2205      	movs	r2, #5
 8006a12:	49b7      	ldr	r1, [pc, #732]	; (8006cf0 <setCommand+0x6d4>)
 8006a14:	0020      	movs	r0, r4
 8006a16:	f00d fd49 	bl	80144ac <strncmp>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d100      	bne.n	8006a20 <setCommand+0x404>
 8006a1e:	e08c      	b.n	8006b3a <setCommand+0x51e>
 8006a20:	2202      	movs	r2, #2
 8006a22:	49b4      	ldr	r1, [pc, #720]	; (8006cf4 <setCommand+0x6d8>)
 8006a24:	0020      	movs	r0, r4
 8006a26:	f00d fd41 	bl	80144ac <strncmp>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d100      	bne.n	8006a30 <setCommand+0x414>
 8006a2e:	e084      	b.n	8006b3a <setCommand+0x51e>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006a30:	2203      	movs	r2, #3
 8006a32:	49b1      	ldr	r1, [pc, #708]	; (8006cf8 <setCommand+0x6dc>)
 8006a34:	0020      	movs	r0, r4
 8006a36:	f00d fd39 	bl	80144ac <strncmp>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d07b      	beq.n	8006b36 <setCommand+0x51a>
 8006a3e:	2202      	movs	r2, #2
 8006a40:	49ae      	ldr	r1, [pc, #696]	; (8006cfc <setCommand+0x6e0>)
 8006a42:	0020      	movs	r0, r4
 8006a44:	f00d fd32 	bl	80144ac <strncmp>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d074      	beq.n	8006b36 <setCommand+0x51a>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006a4c:	2204      	movs	r2, #4
 8006a4e:	49ac      	ldr	r1, [pc, #688]	; (8006d00 <setCommand+0x6e4>)
 8006a50:	0020      	movs	r0, r4
 8006a52:	f00d fd2b 	bl	80144ac <strncmp>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d06b      	beq.n	8006b32 <setCommand+0x516>
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	49a9      	ldr	r1, [pc, #676]	; (8006d04 <setCommand+0x6e8>)
 8006a5e:	0020      	movs	r0, r4
 8006a60:	f00d fd24 	bl	80144ac <strncmp>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d064      	beq.n	8006b32 <setCommand+0x516>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006a68:	2204      	movs	r2, #4
 8006a6a:	49a7      	ldr	r1, [pc, #668]	; (8006d08 <setCommand+0x6ec>)
 8006a6c:	0020      	movs	r0, r4
 8006a6e:	f00d fd1d 	bl	80144ac <strncmp>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d05b      	beq.n	8006b2e <setCommand+0x512>
 8006a76:	2202      	movs	r2, #2
 8006a78:	49a4      	ldr	r1, [pc, #656]	; (8006d0c <setCommand+0x6f0>)
 8006a7a:	0020      	movs	r0, r4
 8006a7c:	f00d fd16 	bl	80144ac <strncmp>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d054      	beq.n	8006b2e <setCommand+0x512>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006a84:	2205      	movs	r2, #5
 8006a86:	49a2      	ldr	r1, [pc, #648]	; (8006d10 <setCommand+0x6f4>)
 8006a88:	0020      	movs	r0, r4
 8006a8a:	f00d fd0f 	bl	80144ac <strncmp>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d04b      	beq.n	8006b2a <setCommand+0x50e>
 8006a92:	2202      	movs	r2, #2
 8006a94:	499f      	ldr	r1, [pc, #636]	; (8006d14 <setCommand+0x6f8>)
 8006a96:	0020      	movs	r0, r4
 8006a98:	f00d fd08 	bl	80144ac <strncmp>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d044      	beq.n	8006b2a <setCommand+0x50e>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006aa0:	2209      	movs	r2, #9
 8006aa2:	499d      	ldr	r1, [pc, #628]	; (8006d18 <setCommand+0x6fc>)
 8006aa4:	0020      	movs	r0, r4
 8006aa6:	f00d fd01 	bl	80144ac <strncmp>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d03b      	beq.n	8006b26 <setCommand+0x50a>
 8006aae:	2202      	movs	r2, #2
 8006ab0:	499a      	ldr	r1, [pc, #616]	; (8006d1c <setCommand+0x700>)
 8006ab2:	0020      	movs	r0, r4
 8006ab4:	f00d fcfa 	bl	80144ac <strncmp>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d034      	beq.n	8006b26 <setCommand+0x50a>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006abc:	2207      	movs	r2, #7
 8006abe:	4998      	ldr	r1, [pc, #608]	; (8006d20 <setCommand+0x704>)
 8006ac0:	0020      	movs	r0, r4
 8006ac2:	f00d fcf3 	bl	80144ac <strncmp>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d02b      	beq.n	8006b22 <setCommand+0x506>
 8006aca:	2202      	movs	r2, #2
 8006acc:	4995      	ldr	r1, [pc, #596]	; (8006d24 <setCommand+0x708>)
 8006ace:	0020      	movs	r0, r4
 8006ad0:	f00d fcec 	bl	80144ac <strncmp>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d024      	beq.n	8006b22 <setCommand+0x506>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006ad8:	2208      	movs	r2, #8
 8006ada:	4993      	ldr	r1, [pc, #588]	; (8006d28 <setCommand+0x70c>)
 8006adc:	0020      	movs	r0, r4
 8006ade:	f00d fce5 	bl	80144ac <strncmp>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d01b      	beq.n	8006b1e <setCommand+0x502>
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	4990      	ldr	r1, [pc, #576]	; (8006d2c <setCommand+0x710>)
 8006aea:	0020      	movs	r0, r4
 8006aec:	f00d fcde 	bl	80144ac <strncmp>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d014      	beq.n	8006b1e <setCommand+0x502>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006af4:	2208      	movs	r2, #8
 8006af6:	498e      	ldr	r1, [pc, #568]	; (8006d30 <setCommand+0x714>)
 8006af8:	0020      	movs	r0, r4
 8006afa:	f00d fcd7 	bl	80144ac <strncmp>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d007      	beq.n	8006b12 <setCommand+0x4f6>
 8006b02:	2202      	movs	r2, #2
 8006b04:	498b      	ldr	r1, [pc, #556]	; (8006d34 <setCommand+0x718>)
 8006b06:	0020      	movs	r0, r4
 8006b08:	f00d fcd0 	bl	80144ac <strncmp>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d000      	beq.n	8006b12 <setCommand+0x4f6>
 8006b10:	e5f8      	b.n	8006704 <setCommand+0xe8>
			temp82 =DECEMBER;
 8006b12:	240c      	movs	r4, #12
		if(result == BOS_OK){
 8006b14:	4643      	mov	r3, r8
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d000      	beq.n	8006b1c <setCommand+0x500>
 8006b1a:	e68c      	b.n	8006836 <setCommand+0x21a>
 8006b1c:	e66a      	b.n	80067f4 <setCommand+0x1d8>
			temp82 =NOVEMBER;
 8006b1e:	240b      	movs	r4, #11
 8006b20:	e7f8      	b.n	8006b14 <setCommand+0x4f8>
			temp82 =OCTOBER;
 8006b22:	240a      	movs	r4, #10
 8006b24:	e7f6      	b.n	8006b14 <setCommand+0x4f8>
			temp82 =SEPTEMBER;
 8006b26:	2409      	movs	r4, #9
 8006b28:	e7f4      	b.n	8006b14 <setCommand+0x4f8>
			temp82 =AUGUST;
 8006b2a:	2408      	movs	r4, #8
 8006b2c:	e7f2      	b.n	8006b14 <setCommand+0x4f8>
			temp82 =JULY;
 8006b2e:	2407      	movs	r4, #7
 8006b30:	e7f0      	b.n	8006b14 <setCommand+0x4f8>
			temp82 =JUNE;
 8006b32:	2406      	movs	r4, #6
 8006b34:	e7ee      	b.n	8006b14 <setCommand+0x4f8>
			temp82 =MAY;
 8006b36:	2405      	movs	r4, #5
 8006b38:	e7ec      	b.n	8006b14 <setCommand+0x4f8>
			temp82 =APRIL;
 8006b3a:	2404      	movs	r4, #4
 8006b3c:	e7ea      	b.n	8006b14 <setCommand+0x4f8>
			temp82 =MARCH;
 8006b3e:	2403      	movs	r4, #3
 8006b40:	e7e8      	b.n	8006b14 <setCommand+0x4f8>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006b42:	2202      	movs	r2, #2
 8006b44:	4967      	ldr	r1, [pc, #412]	; (8006ce4 <setCommand+0x6c8>)
 8006b46:	0020      	movs	r0, r4
 8006b48:	f00d fcb0 	bl	80144ac <strncmp>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d100      	bne.n	8006b52 <setCommand+0x536>
 8006b50:	e6f8      	b.n	8006944 <setCommand+0x328>
 8006b52:	2300      	movs	r3, #0
 8006b54:	4698      	mov	r8, r3
 8006b56:	e74b      	b.n	80069f0 <setCommand+0x3d4>
			temp81 =SATURDAY;
 8006b58:	2606      	movs	r6, #6
 8006b5a:	e641      	b.n	80067e0 <setCommand+0x1c4>
			temp81 =FRIDAY;
 8006b5c:	2605      	movs	r6, #5
 8006b5e:	e63f      	b.n	80067e0 <setCommand+0x1c4>
			temp81 =THURSDAY;
 8006b60:	2604      	movs	r6, #4
 8006b62:	e63d      	b.n	80067e0 <setCommand+0x1c4>
			temp81 =WEDNESDAY;
 8006b64:	2603      	movs	r6, #3
 8006b66:	e63b      	b.n	80067e0 <setCommand+0x1c4>
			temp81 =TUESDAY;
 8006b68:	2602      	movs	r6, #2
 8006b6a:	e639      	b.n	80067e0 <setCommand+0x1c4>
 8006b6c:	4b72      	ldr	r3, [pc, #456]	; (8006d38 <setCommand+0x71c>)
			temp81 =MONDAY;
 8006b6e:	2601      	movs	r6, #1
 8006b70:	469a      	mov	sl, r3
 8006b72:	e635      	b.n	80067e0 <setCommand+0x1c4>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 8006b74:	2140      	movs	r1, #64	; 0x40
 8006b76:	4b71      	ldr	r3, [pc, #452]	; (8006d3c <setCommand+0x720>)
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006b78:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	3015      	adds	r0, #21
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	4319      	orrs	r1, r3
 8006b82:	30ff      	adds	r0, #255	; 0xff
 8006b84:	f000 ffbe 	bl	8007b04 <EE_WriteVariable>
 8006b88:	e6c2      	b.n	8006910 <setCommand+0x2f4>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006b8a:	4b6c      	ldr	r3, [pc, #432]	; (8006d3c <setCommand+0x720>)
 8006b8c:	2120      	movs	r1, #32
 8006b8e:	e7f3      	b.n	8006b78 <setCommand+0x55c>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006b90:	4b6a      	ldr	r3, [pc, #424]	; (8006d3c <setCommand+0x720>)
 8006b92:	2160      	movs	r1, #96	; 0x60
 8006b94:	e7f0      	b.n	8006b78 <setCommand+0x55c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006b96:	4642      	mov	r2, r8
 8006b98:	4969      	ldr	r1, [pc, #420]	; (8006d40 <setCommand+0x724>)
 8006b9a:	0030      	movs	r0, r6
 8006b9c:	f00d fc86 	bl	80144ac <strncmp>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d127      	bne.n	8006bf4 <setCommand+0x5d8>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006ba4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006ba6:	4967      	ldr	r1, [pc, #412]	; (8006d44 <setCommand+0x728>)
 8006ba8:	0032      	movs	r2, r6
 8006baa:	0020      	movs	r0, r4
 8006bac:	f00d fc7e 	bl	80144ac <strncmp>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d100      	bne.n	8006bb6 <setCommand+0x59a>
 8006bb4:	e10b      	b.n	8006dce <setCommand+0x7b2>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006bb6:	0032      	movs	r2, r6
 8006bb8:	4963      	ldr	r1, [pc, #396]	; (8006d48 <setCommand+0x72c>)
 8006bba:	0020      	movs	r0, r4
 8006bbc:	f00d fc76 	bl	80144ac <strncmp>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d100      	bne.n	8006bc6 <setCommand+0x5aa>
 8006bc4:	e0f7      	b.n	8006db6 <setCommand+0x79a>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006bc6:	0032      	movs	r2, r6
 8006bc8:	4649      	mov	r1, r9
 8006bca:	0020      	movs	r0, r4
 8006bcc:	f00d fc6e 	bl	80144ac <strncmp>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d048      	beq.n	8006c66 <setCommand+0x64a>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006bd4:	0032      	movs	r2, r6
 8006bd6:	495d      	ldr	r1, [pc, #372]	; (8006d4c <setCommand+0x730>)
 8006bd8:	0020      	movs	r0, r4
 8006bda:	f00d fc67 	bl	80144ac <strncmp>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d000      	beq.n	8006be4 <setCommand+0x5c8>
 8006be2:	e58f      	b.n	8006704 <setCommand+0xe8>
				BOSMessaging.trace =TRACE_NONE;
 8006be4:	4b55      	ldr	r3, [pc, #340]	; (8006d3c <setCommand+0x720>)
 8006be6:	7058      	strb	r0, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006be8:	3015      	adds	r0, #21
 8006bea:	7819      	ldrb	r1, [r3, #0]
 8006bec:	30ff      	adds	r0, #255	; 0xff
 8006bee:	f000 ff89 	bl	8007b04 <EE_WriteVariable>
 8006bf2:	e68d      	b.n	8006910 <setCommand+0x2f4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006bf4:	4642      	mov	r2, r8
 8006bf6:	4956      	ldr	r1, [pc, #344]	; (8006d50 <setCommand+0x734>)
 8006bf8:	0030      	movs	r0, r6
 8006bfa:	f00d fc57 	bl	80144ac <strncmp>
 8006bfe:	4681      	mov	r9, r0
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d100      	bne.n	8006c06 <setCommand+0x5ea>
 8006c04:	e0b0      	b.n	8006d68 <setCommand+0x74c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006c06:	4642      	mov	r2, r8
 8006c08:	4952      	ldr	r1, [pc, #328]	; (8006d54 <setCommand+0x738>)
 8006c0a:	0030      	movs	r0, r6
 8006c0c:	f00d fc4e 	bl	80144ac <strncmp>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d055      	beq.n	8006cc0 <setCommand+0x6a4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006c14:	4642      	mov	r2, r8
 8006c16:	4950      	ldr	r1, [pc, #320]	; (8006d58 <setCommand+0x73c>)
 8006c18:	0030      	movs	r0, r6
 8006c1a:	f00d fc47 	bl	80144ac <strncmp>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d040      	beq.n	8006ca4 <setCommand+0x688>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006c22:	4642      	mov	r2, r8
 8006c24:	494d      	ldr	r1, [pc, #308]	; (8006d5c <setCommand+0x740>)
 8006c26:	0030      	movs	r0, r6
 8006c28:	f00d fc40 	bl	80144ac <strncmp>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d026      	beq.n	8006c7e <setCommand+0x662>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006c30:	4642      	mov	r2, r8
 8006c32:	494b      	ldr	r1, [pc, #300]	; (8006d60 <setCommand+0x744>)
 8006c34:	0030      	movs	r0, r6
 8006c36:	f00d fc39 	bl	80144ac <strncmp>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d000      	beq.n	8006c40 <setCommand+0x624>
 8006c3e:	e51b      	b.n	8006678 <setCommand+0x5c>
			temp16 =atoi((const char* )pcParameterString2);
 8006c40:	0020      	movs	r0, r4
 8006c42:	f00c ff26 	bl	8013a92 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006c46:	1e43      	subs	r3, r0, #1
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	2bfe      	cmp	r3, #254	; 0xfe
 8006c4c:	d900      	bls.n	8006c50 <setCommand+0x634>
 8006c4e:	e559      	b.n	8006704 <setCommand+0xe8>
				BOS.buttons.maxInterClickTime =temp16;
 8006c50:	4b44      	ldr	r3, [pc, #272]	; (8006d64 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006c52:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 8006c54:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006c56:	0200      	lsls	r0, r0, #8
 8006c58:	4301      	orrs	r1, r0
 8006c5a:	2018      	movs	r0, #24
 8006c5c:	b289      	uxth	r1, r1
 8006c5e:	30ff      	adds	r0, #255	; 0xff
 8006c60:	f000 ff50 	bl	8007b04 <EE_WriteVariable>
 8006c64:	e654      	b.n	8006910 <setCommand+0x2f4>
				BOSMessaging.trace =TRACE_RESPONSE;
 8006c66:	2202      	movs	r2, #2
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006c68:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_RESPONSE;
 8006c6a:	4b34      	ldr	r3, [pc, #208]	; (8006d3c <setCommand+0x720>)
 8006c6c:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	0089      	lsls	r1, r1, #2
 8006c72:	3015      	adds	r0, #21
 8006c74:	4319      	orrs	r1, r3
 8006c76:	30ff      	adds	r0, #255	; 0xff
 8006c78:	f000 ff44 	bl	8007b04 <EE_WriteVariable>
 8006c7c:	e648      	b.n	8006910 <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006c7e:	0020      	movs	r0, r4
 8006c80:	f00c ff07 	bl	8013a92 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006c84:	1e43      	subs	r3, r0, #1
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2bfe      	cmp	r3, #254	; 0xfe
 8006c8a:	d900      	bls.n	8006c8e <setCommand+0x672>
 8006c8c:	e53a      	b.n	8006704 <setCommand+0xe8>
				BOS.buttons.minInterClickTime =temp16;
 8006c8e:	4b35      	ldr	r3, [pc, #212]	; (8006d64 <setCommand+0x748>)
 8006c90:	b2c0      	uxtb	r0, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006c92:	7959      	ldrb	r1, [r3, #5]
				BOS.buttons.minInterClickTime =temp16;
 8006c94:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006c96:	0209      	lsls	r1, r1, #8
 8006c98:	4301      	orrs	r1, r0
 8006c9a:	2018      	movs	r0, #24
 8006c9c:	30ff      	adds	r0, #255	; 0xff
 8006c9e:	f000 ff31 	bl	8007b04 <EE_WriteVariable>
 8006ca2:	e635      	b.n	8006910 <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006ca4:	0020      	movs	r0, r4
 8006ca6:	f00c fef4 	bl	8013a92 <atoi>
 8006caa:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006cac:	2900      	cmp	r1, #0
 8006cae:	d100      	bne.n	8006cb2 <setCommand+0x696>
 8006cb0:	e528      	b.n	8006704 <setCommand+0xe8>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006cb2:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 8006cb4:	4b2b      	ldr	r3, [pc, #172]	; (8006d64 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006cb6:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 8006cb8:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006cba:	f000 ff23 	bl	8007b04 <EE_WriteVariable>
 8006cbe:	e627      	b.n	8006910 <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006cc0:	0020      	movs	r0, r4
 8006cc2:	f00c fee6 	bl	8013a92 <atoi>
 8006cc6:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006cc8:	2900      	cmp	r1, #0
 8006cca:	d100      	bne.n	8006cce <setCommand+0x6b2>
 8006ccc:	e51a      	b.n	8006704 <setCommand+0xe8>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006cce:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 8006cd0:	4b24      	ldr	r3, [pc, #144]	; (8006d64 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006cd2:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 8006cd4:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006cd6:	f000 ff15 	bl	8007b04 <EE_WriteVariable>
 8006cda:	e619      	b.n	8006910 <setCommand+0x2f4>
 8006cdc:	0801a2b0 	.word	0x0801a2b0
 8006ce0:	0801a2b4 	.word	0x0801a2b4
 8006ce4:	0801a2c0 	.word	0x0801a2c0
 8006ce8:	0801a230 	.word	0x0801a230
 8006cec:	0801a238 	.word	0x0801a238
 8006cf0:	0801a23c 	.word	0x0801a23c
 8006cf4:	0801a244 	.word	0x0801a244
 8006cf8:	0801a248 	.word	0x0801a248
 8006cfc:	0801a24c 	.word	0x0801a24c
 8006d00:	0801a250 	.word	0x0801a250
 8006d04:	0801a258 	.word	0x0801a258
 8006d08:	0801a25c 	.word	0x0801a25c
 8006d0c:	0801a264 	.word	0x0801a264
 8006d10:	0801a268 	.word	0x0801a268
 8006d14:	0801a270 	.word	0x0801a270
 8006d18:	0801a274 	.word	0x0801a274
 8006d1c:	0801a280 	.word	0x0801a280
 8006d20:	0801a284 	.word	0x0801a284
 8006d24:	0801a28c 	.word	0x0801a28c
 8006d28:	0801a290 	.word	0x0801a290
 8006d2c:	0801a29c 	.word	0x0801a29c
 8006d30:	0801a2a0 	.word	0x0801a2a0
 8006d34:	0801a2ac 	.word	0x0801a2ac
 8006d38:	0801a1f4 	.word	0x0801a1f4
 8006d3c:	20006c4c 	.word	0x20006c4c
 8006d40:	08019f78 	.word	0x08019f78
 8006d44:	08019340 	.word	0x08019340
 8006d48:	0801a0cc 	.word	0x0801a0cc
 8006d4c:	08019f70 	.word	0x08019f70
 8006d50:	08019f80 	.word	0x08019f80
 8006d54:	08019f8c 	.word	0x08019f8c
 8006d58:	08019f98 	.word	0x08019f98
 8006d5c:	08019fa8 	.word	0x08019fa8
 8006d60:	08019fbc 	.word	0x08019fbc
 8006d64:	20006ccc 	.word	0x20006ccc
			temp2 =atoi((const char* )pcParameterString2);
 8006d68:	0020      	movs	r0, r4
 8006d6a:	f00c fe92 	bl	8013a92 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006d6e:	23e1      	movs	r3, #225	; 0xe1
 8006d70:	031b      	lsls	r3, r3, #12
 8006d72:	4298      	cmp	r0, r3
 8006d74:	d900      	bls.n	8006d78 <setCommand+0x75c>
 8006d76:	e4c5      	b.n	8006704 <setCommand+0xe8>
				BOS.clibaudrate =temp2;
 8006d78:	4c18      	ldr	r4, [pc, #96]	; (8006ddc <setCommand+0x7c0>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006d7a:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 8006d7c:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006d7e:	208c      	movs	r0, #140	; 0x8c
 8006d80:	0040      	lsls	r0, r0, #1
 8006d82:	f000 febf 	bl	8007b04 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006d86:	201a      	movs	r0, #26
 8006d88:	68a1      	ldr	r1, [r4, #8]
 8006d8a:	30ff      	adds	r0, #255	; 0xff
 8006d8c:	0c09      	lsrs	r1, r1, #16
 8006d8e:	f000 feb9 	bl	8007b04 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006d92:	4649      	mov	r1, r9
 8006d94:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006d98:	0038      	movs	r0, r7
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006d9a:	54d1      	strb	r1, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006d9c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006d9e:	4910      	ldr	r1, [pc, #64]	; (8006de0 <setCommand+0x7c4>)
 8006da0:	f00d fb40 	bl	8014424 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006da4:	490f      	ldr	r1, [pc, #60]	; (8006de4 <setCommand+0x7c8>)
 8006da6:	0038      	movs	r0, r7
 8006da8:	f00d fb5c 	bl	8014464 <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006dac:	490e      	ldr	r1, [pc, #56]	; (8006de8 <setCommand+0x7cc>)
 8006dae:	0038      	movs	r0, r7
 8006db0:	f00d fb58 	bl	8014464 <strcat>
 8006db4:	e465      	b.n	8006682 <setCommand+0x66>
				BOSMessaging.trace =TRACE_MESSAGE;
 8006db6:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006db8:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_MESSAGE;
 8006dba:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <setCommand+0x7d0>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006dbc:	0049      	lsls	r1, r1, #1
				BOSMessaging.trace =TRACE_MESSAGE;
 8006dbe:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	3015      	adds	r0, #21
 8006dc4:	4319      	orrs	r1, r3
 8006dc6:	30ff      	adds	r0, #255	; 0xff
 8006dc8:	f000 fe9c 	bl	8007b04 <EE_WriteVariable>
 8006dcc:	e5a0      	b.n	8006910 <setCommand+0x2f4>
				BOSMessaging.trace =TRACE_BOTH;
 8006dce:	2203      	movs	r2, #3
 8006dd0:	4b06      	ldr	r3, [pc, #24]	; (8006dec <setCommand+0x7d0>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006dd2:	21c0      	movs	r1, #192	; 0xc0
				BOSMessaging.trace =TRACE_BOTH;
 8006dd4:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	e74a      	b.n	8006c70 <setCommand+0x654>
 8006dda:	46c0      	nop			; (mov r8, r8)
 8006ddc:	20006ccc 	.word	0x20006ccc
 8006de0:	0801a0d8 	.word	0x0801a0d8
 8006de4:	0801a0ec 	.word	0x0801a0ec
 8006de8:	0801a11c 	.word	0x0801a11c
 8006dec:	20006c4c 	.word	0x20006c4c

08006df0 <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006df0:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006df2:	b530      	push	{r4, r5, lr}
 8006df4:	b083      	sub	sp, #12
 8006df6:	0005      	movs	r5, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8006df8:	9301      	str	r3, [sp, #4]
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006dfa:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8006dfc:	2d00      	cmp	r5, #0
 8006dfe:	d010      	beq.n	8006e22 <removebuttonCommand+0x32>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e00:	aa01      	add	r2, sp, #4
 8006e02:	2101      	movs	r1, #1
 8006e04:	f007 fb2c 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006e08:	2300      	movs	r3, #0
 8006e0a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006e0c:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006e0e:	2b70      	cmp	r3, #112	; 0x70
 8006e10:	d009      	beq.n	8006e26 <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 8006e12:	0020      	movs	r0, r4
 8006e14:	f001 fa88 	bl	8008328 <RemovePortButton>
	if(result == BOS_OK){
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d009      	beq.n	8006e30 <removebuttonCommand+0x40>
}
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	b003      	add	sp, #12
 8006e20:	bd30      	pop	{r4, r5, pc}
	configASSERT(pcWriteBuffer);
 8006e22:	b672      	cpsid	i
 8006e24:	e7fe      	b.n	8006e24 <removebuttonCommand+0x34>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006e26:	3001      	adds	r0, #1
 8006e28:	f00c fe39 	bl	8013a9e <atol>
 8006e2c:	b2c4      	uxtb	r4, r0
 8006e2e:	e7f0      	b.n	8006e12 <removebuttonCommand+0x22>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006e30:	0023      	movs	r3, r4
 8006e32:	0022      	movs	r2, r4
 8006e34:	4902      	ldr	r1, [pc, #8]	; (8006e40 <removebuttonCommand+0x50>)
 8006e36:	0028      	movs	r0, r5
 8006e38:	f00d faf4 	bl	8014424 <sprintf>
 8006e3c:	e7ee      	b.n	8006e1c <removebuttonCommand+0x2c>
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	0801a2c4 	.word	0x0801a2c4

08006e44 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e46:	46ce      	mov	lr, r9
 8006e48:	4647      	mov	r7, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006e4a:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	1e06      	subs	r6, r0, #0
 8006e52:	4691      	mov	r9, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006e54:	9302      	str	r3, [sp, #8]
 8006e56:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8006e58:	d036      	beq.n	8006ec8 <addbuttonCommand+0x84>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e5a:	aa02      	add	r2, sp, #8
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	4648      	mov	r0, r9
 8006e60:	f007 fafe 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006e64:	9b02      	ldr	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e66:	4f25      	ldr	r7, [pc, #148]	; (8006efc <addbuttonCommand+0xb8>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006e68:	001a      	movs	r2, r3
 8006e6a:	4925      	ldr	r1, [pc, #148]	; (8006f00 <addbuttonCommand+0xbc>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e6c:	0005      	movs	r5, r0
 8006e6e:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006e70:	4698      	mov	r8, r3
 8006e72:	f00d fb1b 	bl	80144ac <strncmp>
		type =MOMENTARY_NO;
 8006e76:	2401      	movs	r4, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d00f      	beq.n	8006e9c <addbuttonCommand+0x58>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006e7c:	4642      	mov	r2, r8
 8006e7e:	4921      	ldr	r1, [pc, #132]	; (8006f04 <addbuttonCommand+0xc0>)
 8006e80:	0028      	movs	r0, r5
 8006e82:	f00d fb13 	bl	80144ac <strncmp>
		type =MOMENTARY_NC;
 8006e86:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d007      	beq.n	8006e9c <addbuttonCommand+0x58>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	491e      	ldr	r1, [pc, #120]	; (8006f08 <addbuttonCommand+0xc4>)
 8006e90:	0028      	movs	r0, r5
 8006e92:	f00d fb0b 	bl	80144ac <strncmp>
		type =ONOFF_NO;
 8006e96:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d117      	bne.n	8006ecc <addbuttonCommand+0x88>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e9c:	aa03      	add	r2, sp, #12
 8006e9e:	2102      	movs	r1, #2
 8006ea0:	4648      	mov	r0, r9
 8006ea2:	f007 fadd 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006eaa:	2500      	movs	r5, #0
	if(pcParameterString2[0] == 'p'){
 8006eac:	2b70      	cmp	r3, #112	; 0x70
 8006eae:	d020      	beq.n	8006ef2 <addbuttonCommand+0xae>
	result =AddPortButton(type,port);
 8006eb0:	0029      	movs	r1, r5
 8006eb2:	0020      	movs	r0, r4
 8006eb4:	f001 f9be 	bl	8008234 <AddPortButton>
	if(result == BOS_OK){
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d010      	beq.n	8006ede <addbuttonCommand+0x9a>
}
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	b005      	add	sp, #20
 8006ec0:	bc0c      	pop	{r2, r3}
 8006ec2:	4690      	mov	r8, r2
 8006ec4:	4699      	mov	r9, r3
 8006ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006ec8:	b672      	cpsid	i
 8006eca:	e7fe      	b.n	8006eca <addbuttonCommand+0x86>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006ecc:	4642      	mov	r2, r8
 8006ece:	490f      	ldr	r1, [pc, #60]	; (8006f0c <addbuttonCommand+0xc8>)
 8006ed0:	0028      	movs	r0, r5
 8006ed2:	f00d faeb 	bl	80144ac <strncmp>
		type =ONOFF_NC;
 8006ed6:	4244      	negs	r4, r0
 8006ed8:	4144      	adcs	r4, r0
 8006eda:	00a4      	lsls	r4, r4, #2
 8006edc:	e7de      	b.n	8006e9c <addbuttonCommand+0x58>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006ede:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ee0:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006ee2:	490b      	ldr	r1, [pc, #44]	; (8006f10 <addbuttonCommand+0xcc>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006ee4:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006ee6:	9500      	str	r5, [sp, #0]
 8006ee8:	002b      	movs	r3, r5
 8006eea:	0030      	movs	r0, r6
 8006eec:	f00d fa9a 	bl	8014424 <sprintf>
 8006ef0:	e7e4      	b.n	8006ebc <addbuttonCommand+0x78>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	f00c fdd3 	bl	8013a9e <atol>
 8006ef8:	b2c5      	uxtb	r5, r0
 8006efa:	e7d9      	b.n	8006eb0 <addbuttonCommand+0x6c>
 8006efc:	20001240 	.word	0x20001240
 8006f00:	0801a2ec 	.word	0x0801a2ec
 8006f04:	0801a2fc 	.word	0x0801a2fc
 8006f08:	0801a30c 	.word	0x0801a30c
 8006f0c:	0801a318 	.word	0x0801a318
 8006f10:	0801a324 	.word	0x0801a324

08006f14 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f16:	46de      	mov	lr, fp
 8006f18:	4645      	mov	r5, r8
 8006f1a:	4657      	mov	r7, sl
 8006f1c:	464e      	mov	r6, r9
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006f1e:	2300      	movs	r3, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f20:	b5e0      	push	{r5, r6, r7, lr}
 8006f22:	b09b      	sub	sp, #108	; 0x6c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006f24:	af11      	add	r7, sp, #68	; 0x44
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f26:	0004      	movs	r4, r0
 8006f28:	9009      	str	r0, [sp, #36]	; 0x24
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006f2a:	2100      	movs	r1, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f2c:	0015      	movs	r5, r2
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006f2e:	0038      	movs	r0, r7
 8006f30:	220a      	movs	r2, #10
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006f32:	930a      	str	r3, [sp, #40]	; 0x28
 8006f34:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f36:	930c      	str	r3, [sp, #48]	; 0x30
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006f38:	930d      	str	r3, [sp, #52]	; 0x34
 8006f3a:	930e      	str	r3, [sp, #56]	; 0x38
 8006f3c:	930f      	str	r3, [sp, #60]	; 0x3c
	portBASE_TYPE xParameterStringLength7 =0;
 8006f3e:	9310      	str	r3, [sp, #64]	; 0x40
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006f40:	f00d f876 	bl	8014030 <memset>
 8006f44:	ab14      	add	r3, sp, #80	; 0x50
 8006f46:	220a      	movs	r2, #10
 8006f48:	2100      	movs	r1, #0
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	4698      	mov	r8, r3
 8006f4e:	f00d f86f 	bl	8014030 <memset>
 8006f52:	ab17      	add	r3, sp, #92	; 0x5c
 8006f54:	220a      	movs	r2, #10
 8006f56:	2100      	movs	r1, #0
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f00d f869 	bl	8014030 <memset>
	configASSERT(pcWriteBuffer);
 8006f5e:	2c00      	cmp	r4, #0
 8006f60:	d100      	bne.n	8006f64 <scastCommand+0x50>
 8006f62:	e07d      	b.n	8007060 <scastCommand+0x14c>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006f64:	aa0a      	add	r2, sp, #40	; 0x28
 8006f66:	2101      	movs	r1, #1
 8006f68:	0028      	movs	r0, r5
 8006f6a:	f007 fa79 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006f6e:	2300      	movs	r3, #0
 8006f70:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006f72:	2600      	movs	r6, #0
	if(pcParameterString1[0] == 'P'){
 8006f74:	2b50      	cmp	r3, #80	; 0x50
 8006f76:	d100      	bne.n	8006f7a <scastCommand+0x66>
 8006f78:	e074      	b.n	8007064 <scastCommand+0x150>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006f7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f7c:	2102      	movs	r1, #2
 8006f7e:	0028      	movs	r0, r5
 8006f80:	f007 fa6e 	bl	800e460 <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006f84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006f86:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006f88:	0038      	movs	r0, r7
 8006f8a:	f00d faa0 	bl	80144ce <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006f8e:	0038      	movs	r0, r7
 8006f90:	f7fd fa5c 	bl	800444c <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006f94:	aa0c      	add	r2, sp, #48	; 0x30
	srcM =(uint8_t )GetID(par1);
 8006f96:	b2c3      	uxtb	r3, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006f98:	2103      	movs	r1, #3
 8006f9a:	0028      	movs	r0, r5
	srcM =(uint8_t )GetID(par1);
 8006f9c:	9307      	str	r3, [sp, #28]
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006f9e:	f007 fa5f 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006fa2:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006fa4:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 8006fa6:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006fa8:	4693      	mov	fp, r2
	if(pcParameterString3[0] == 'p'){
 8006faa:	2b70      	cmp	r3, #112	; 0x70
 8006fac:	d06e      	beq.n	800708c <scastCommand+0x178>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006fae:	aa0d      	add	r2, sp, #52	; 0x34
 8006fb0:	2104      	movs	r1, #4
 8006fb2:	0028      	movs	r0, r5
 8006fb4:	f007 fa54 	bl	800e460 <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006fb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006fba:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006fbc:	4640      	mov	r0, r8
 8006fbe:	f00d fa86 	bl	80144ce <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	f7fd fa42 	bl	800444c <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006fc8:	aa0e      	add	r2, sp, #56	; 0x38
	dstM =(uint8_t )GetID(par2);
 8006fca:	b2c3      	uxtb	r3, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006fcc:	2105      	movs	r1, #5
 8006fce:	0028      	movs	r0, r5
	dstM =(uint8_t )GetID(par2);
 8006fd0:	9308      	str	r3, [sp, #32]
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006fd2:	f007 fa45 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fd8:	492f      	ldr	r1, [pc, #188]	; (8007098 <scastCommand+0x184>)
 8006fda:	001a      	movs	r2, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006fdc:	4681      	mov	r9, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006fde:	469a      	mov	sl, r3
 8006fe0:	f00d fa64 	bl	80144ac <strncmp>
		direction =FORWARD;
 8006fe4:	2400      	movs	r4, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d00f      	beq.n	800700a <scastCommand+0xf6>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006fea:	4652      	mov	r2, sl
 8006fec:	492b      	ldr	r1, [pc, #172]	; (800709c <scastCommand+0x188>)
 8006fee:	4648      	mov	r0, r9
 8006ff0:	f00d fa5c 	bl	80144ac <strncmp>
		direction =BACKWARD;
 8006ff4:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d007      	beq.n	800700a <scastCommand+0xf6>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006ffa:	4652      	mov	r2, sl
 8006ffc:	4928      	ldr	r1, [pc, #160]	; (80070a0 <scastCommand+0x18c>)
 8006ffe:	4648      	mov	r0, r9
 8007000:	f00d fa54 	bl	80144ac <strncmp>
		direction =BIDIRECTIONAL;
 8007004:	4244      	negs	r4, r0
 8007006:	4144      	adcs	r4, r0
 8007008:	0064      	lsls	r4, r4, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 800700a:	4649      	mov	r1, r9
 800700c:	4652      	mov	r2, sl
 800700e:	a817      	add	r0, sp, #92	; 0x5c
 8007010:	f00d fa5d 	bl	80144ce <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8007014:	aa0f      	add	r2, sp, #60	; 0x3c
 8007016:	2106      	movs	r1, #6
 8007018:	0028      	movs	r0, r5
 800701a:	f007 fa21 	bl	800e460 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 800701e:	f00c fd3e 	bl	8013a9e <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8007022:	aa10      	add	r2, sp, #64	; 0x40
 8007024:	2107      	movs	r1, #7
	count =(uint32_t )atol((char* )pcParameterString6);
 8007026:	4681      	mov	r9, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8007028:	0028      	movs	r0, r5
 800702a:	f007 fa19 	bl	800e460 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 800702e:	f00c fd36 	bl	8013a9e <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8007032:	2300      	movs	r3, #0
 8007034:	9303      	str	r3, [sp, #12]
 8007036:	464b      	mov	r3, r9
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8007038:	0005      	movs	r5, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 800703a:	9002      	str	r0, [sp, #8]
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	9400      	str	r4, [sp, #0]
 8007040:	9b08      	ldr	r3, [sp, #32]
 8007042:	465a      	mov	r2, fp
 8007044:	9907      	ldr	r1, [sp, #28]
 8007046:	0030      	movs	r0, r6
 8007048:	f002 fc1c 	bl	8009884 <StartScastDMAStream>
	if(result == BOS_OK){
 800704c:	2800      	cmp	r0, #0
 800704e:	d00e      	beq.n	800706e <scastCommand+0x15a>
}
 8007050:	2000      	movs	r0, #0
 8007052:	b01b      	add	sp, #108	; 0x6c
 8007054:	bc3c      	pop	{r2, r3, r4, r5}
 8007056:	4690      	mov	r8, r2
 8007058:	4699      	mov	r9, r3
 800705a:	46a2      	mov	sl, r4
 800705c:	46ab      	mov	fp, r5
 800705e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8007060:	b672      	cpsid	i
 8007062:	e7fe      	b.n	8007062 <scastCommand+0x14e>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8007064:	3001      	adds	r0, #1
 8007066:	f00c fd1a 	bl	8013a9e <atol>
 800706a:	b2c6      	uxtb	r6, r0
 800706c:	e785      	b.n	8006f7a <scastCommand+0x66>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 800706e:	464b      	mov	r3, r9
 8007070:	9303      	str	r3, [sp, #12]
 8007072:	4643      	mov	r3, r8
 8007074:	9302      	str	r3, [sp, #8]
 8007076:	465b      	mov	r3, fp
 8007078:	9504      	str	r5, [sp, #16]
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	9700      	str	r7, [sp, #0]
 800707e:	0033      	movs	r3, r6
 8007080:	aa17      	add	r2, sp, #92	; 0x5c
 8007082:	4908      	ldr	r1, [pc, #32]	; (80070a4 <scastCommand+0x190>)
 8007084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007086:	f00d f9cd 	bl	8014424 <sprintf>
 800708a:	e7e1      	b.n	8007050 <scastCommand+0x13c>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 800708c:	3001      	adds	r0, #1
 800708e:	f00c fd06 	bl	8013a9e <atol>
 8007092:	b2c3      	uxtb	r3, r0
 8007094:	469b      	mov	fp, r3
 8007096:	e78a      	b.n	8006fae <scastCommand+0x9a>
 8007098:	0801a358 	.word	0x0801a358
 800709c:	0801a360 	.word	0x0801a360
 80070a0:	0801a36c 	.word	0x0801a36c
 80070a4:	0801a37c 	.word	0x0801a37c

080070a8 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070aa:	0004      	movs	r4, r0
 80070ac:	b083      	sub	sp, #12
	configASSERT(pcWriteBuffer);
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d041      	beq.n	8007136 <infoCommand+0x8e>
	if(N > 1)
 80070b2:	4d22      	ldr	r5, [pc, #136]	; (800713c <infoCommand+0x94>)
	BOS_Status result =BOS_OK;
 80070b4:	2700      	movs	r7, #0
	if(N > 1)
 80070b6:	782a      	ldrb	r2, [r5, #0]
 80070b8:	2a01      	cmp	r2, #1
 80070ba:	d903      	bls.n	80070c4 <infoCommand+0x1c>
		result =ReadPortsDir();
 80070bc:	f7fd fb1e 	bl	80046fc <ReadPortsDir>
 80070c0:	0007      	movs	r7, r0
 80070c2:	782a      	ldrb	r2, [r5, #0]
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 80070c4:	491e      	ldr	r1, [pc, #120]	; (8007140 <infoCommand+0x98>)
 80070c6:	0020      	movs	r0, r4
 80070c8:	f00d f9ac 	bl	8014424 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 80070cc:	2601      	movs	r6, #1
 80070ce:	0020      	movs	r0, r4
 80070d0:	f7f9 f822 	bl	8000118 <strlen>
 80070d4:	4d1b      	ldr	r5, [pc, #108]	; (8007144 <infoCommand+0x9c>)
 80070d6:	4276      	negs	r6, r6
 80070d8:	b282      	uxth	r2, r0
 80070da:	2332      	movs	r3, #50	; 0x32
 80070dc:	7828      	ldrb	r0, [r5, #0]
 80070de:	0021      	movs	r1, r4
 80070e0:	9600      	str	r6, [sp, #0]
 80070e2:	f006 ff61 	bl	800dfa8 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 80070e6:	2213      	movs	r2, #19
 80070e8:	4917      	ldr	r1, [pc, #92]	; (8007148 <infoCommand+0xa0>)
 80070ea:	0020      	movs	r0, r4
 80070ec:	f00c ff97 	bl	801401e <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 80070f0:	7828      	ldrb	r0, [r5, #0]
 80070f2:	2332      	movs	r3, #50	; 0x32
 80070f4:	2212      	movs	r2, #18
 80070f6:	0021      	movs	r1, r4
 80070f8:	9600      	str	r6, [sp, #0]
 80070fa:	f006 ff55 	bl	800dfa8 <writePxMutex>
	DisplayTopology(PcPort);
 80070fe:	7828      	ldrb	r0, [r5, #0]
 8007100:	f7fc fee2 	bl	8003ec8 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8007104:	7828      	ldrb	r0, [r5, #0]
 8007106:	f7fc ffb1 	bl	800406c <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 800710a:	2f02      	cmp	r7, #2
 800710c:	d10b      	bne.n	8007126 <infoCommand+0x7e>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 800710e:	2244      	movs	r2, #68	; 0x44
 8007110:	490e      	ldr	r1, [pc, #56]	; (800714c <infoCommand+0xa4>)
 8007112:	0020      	movs	r0, r4
 8007114:	f00c ff83 	bl	801401e <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8007118:	7828      	ldrb	r0, [r5, #0]
 800711a:	2332      	movs	r3, #50	; 0x32
 800711c:	9600      	str	r6, [sp, #0]
 800711e:	2243      	movs	r2, #67	; 0x43
 8007120:	0021      	movs	r1, r4
 8007122:	f006 ff41 	bl	800dfa8 <writePxMutex>
	sprintf((char* )pcWriteBuffer," ");
 8007126:	2202      	movs	r2, #2
 8007128:	4909      	ldr	r1, [pc, #36]	; (8007150 <infoCommand+0xa8>)
 800712a:	0020      	movs	r0, r4
 800712c:	f00c ff77 	bl	801401e <memcpy>
}
 8007130:	2000      	movs	r0, #0
 8007132:	b003      	add	sp, #12
 8007134:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8007136:	b672      	cpsid	i
 8007138:	e7fe      	b.n	8007138 <infoCommand+0x90>
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	20000000 	.word	0x20000000
 8007140:	0801a404 	.word	0x0801a404
 8007144:	20000c28 	.word	0x20000c28
 8007148:	0801a420 	.word	0x0801a420
 800714c:	0801a434 	.word	0x0801a434
 8007150:	0801923c 	.word	0x0801923c

08007154 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007154:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8007156:	2800      	cmp	r0, #0
 8007158:	d101      	bne.n	800715e <statusCommand+0xa>
 800715a:	b672      	cpsid	i
 800715c:	e7fe      	b.n	800715c <statusCommand+0x8>
	DisplayModuleStatus(0);
 800715e:	2000      	movs	r0, #0
 8007160:	f7fc fffe 	bl	8004160 <DisplayModuleStatus>
}
 8007164:	2000      	movs	r0, #0
 8007166:	bd10      	pop	{r4, pc}

08007168 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716a:	464e      	mov	r6, r9
 800716c:	46de      	mov	lr, fp
 800716e:	4645      	mov	r5, r8
 8007170:	4657      	mov	r7, sl
 8007172:	b5e0      	push	{r5, r6, r7, lr}
 8007174:	b08f      	sub	sp, #60	; 0x3c
	char module[MaxLengthOfAlias + 30] ={0};
 8007176:	ae04      	add	r6, sp, #16
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007178:	0005      	movs	r5, r0
	char module[MaxLengthOfAlias + 30] ={0};
 800717a:	2100      	movs	r1, #0
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800717c:	4691      	mov	r9, r2
	char module[MaxLengthOfAlias + 30] ={0};
 800717e:	0030      	movs	r0, r6
 8007180:	2227      	movs	r2, #39	; 0x27
 8007182:	f00c ff55 	bl	8014030 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8007186:	220a      	movs	r2, #10
 8007188:	2100      	movs	r1, #0
 800718a:	a801      	add	r0, sp, #4
 800718c:	f00c ff50 	bl	8014030 <memset>
	configASSERT(pcWriteBuffer);
 8007190:	2d00      	cmp	r5, #0
 8007192:	d063      	beq.n	800725c <groupCommand+0xf4>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007194:	4c54      	ldr	r4, [pc, #336]	; (80072e8 <groupCommand+0x180>)
 8007196:	2101      	movs	r1, #1
 8007198:	0022      	movs	r2, r4
 800719a:	4648      	mov	r0, r9
 800719c:	3250      	adds	r2, #80	; 0x50
 800719e:	f007 f95f 	bl	800e460 <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 80071a2:	6d22      	ldr	r2, [r4, #80]	; 0x50
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80071a4:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 80071a6:	a801      	add	r0, sp, #4
 80071a8:	f00d f991 	bl	80144ce <strncpy>
 80071ac:	2364      	movs	r3, #100	; 0x64
 80071ae:	4698      	mov	r8, r3
 80071b0:	4f4e      	ldr	r7, [pc, #312]	; (80072ec <groupCommand+0x184>)
 80071b2:	44b8      	add	r8, r7
		if(!strcmp(alias,groupAlias[i])){
 80071b4:	0039      	movs	r1, r7
 80071b6:	a801      	add	r0, sp, #4
 80071b8:	f7f8 ffa4 	bl	8000104 <strcmp>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d04a      	beq.n	8007256 <groupCommand+0xee>
 80071c0:	370a      	adds	r7, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 80071c2:	45b8      	cmp	r8, r7
 80071c4:	d1f6      	bne.n	80071b4 <groupCommand+0x4c>
	type =1;
 80071c6:	2301      	movs	r3, #1
 80071c8:	469a      	mov	sl, r3
	count =2;
 80071ca:	2302      	movs	r3, #2
 80071cc:	2754      	movs	r7, #84	; 0x54
	strcpy((char* )pcWriteBuffer,"Modules [");
 80071ce:	220a      	movs	r2, #10
 80071d0:	4947      	ldr	r1, [pc, #284]	; (80072f0 <groupCommand+0x188>)
 80071d2:	0028      	movs	r0, r5
	count =2;
 80071d4:	55e3      	strb	r3, [r4, r7]
	strcpy((char* )pcWriteBuffer,"Modules [");
 80071d6:	f00c ff22 	bl	801401e <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 80071da:	0022      	movs	r2, r4
 80071dc:	2102      	movs	r1, #2
 80071de:	3258      	adds	r2, #88	; 0x58
 80071e0:	4648      	mov	r0, r9
 80071e2:	f007 f93d 	bl	800e460 <FreeRTOS_CLIGetParameter>
 80071e6:	65e0      	str	r0, [r4, #92]	; 0x5c
	while(pcParameterString != NULL){
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d039      	beq.n	8007260 <groupCommand+0xf8>
		module[xParameterStringLength] ='\0';
 80071ec:	2300      	movs	r3, #0
 80071ee:	469b      	mov	fp, r3
		if(count > 2)
 80071f0:	3354      	adds	r3, #84	; 0x54
 80071f2:	4698      	mov	r8, r3
 80071f4:	e00f      	b.n	8007216 <groupCommand+0xae>
		strcat((char* )pcWriteBuffer,module);
 80071f6:	0031      	movs	r1, r6
 80071f8:	0028      	movs	r0, r5
 80071fa:	f00d f933 	bl	8014464 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 80071fe:	0022      	movs	r2, r4
 8007200:	4643      	mov	r3, r8
 8007202:	1c79      	adds	r1, r7, #1
 8007204:	b249      	sxtb	r1, r1
 8007206:	3258      	adds	r2, #88	; 0x58
 8007208:	4648      	mov	r0, r9
 800720a:	54e1      	strb	r1, [r4, r3]
 800720c:	f007 f928 	bl	800e460 <FreeRTOS_CLIGetParameter>
 8007210:	65e0      	str	r0, [r4, #92]	; 0x5c
	while(pcParameterString != NULL){
 8007212:	2800      	cmp	r0, #0
 8007214:	d03c      	beq.n	8007290 <groupCommand+0x128>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8007216:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8007218:	0001      	movs	r1, r0
 800721a:	003a      	movs	r2, r7
 800721c:	0030      	movs	r0, r6
 800721e:	f00d f956 	bl	80144ce <strncpy>
		module[xParameterStringLength] ='\0';
 8007222:	465b      	mov	r3, fp
		modID =GetID(module);
 8007224:	0030      	movs	r0, r6
		module[xParameterStringLength] ='\0';
 8007226:	55f3      	strb	r3, [r6, r7]
		modID =GetID(module);
 8007228:	f7fd f910 	bl	800444c <GetID>
		if(modID < 0)
 800722c:	2800      	cmp	r0, #0
 800722e:	db49      	blt.n	80072c4 <groupCommand+0x15c>
		result =AddModuleToGroup(modID,alias);
 8007230:	b2c0      	uxtb	r0, r0
 8007232:	a901      	add	r1, sp, #4
 8007234:	f7fd f9d4 	bl	80045e0 <AddModuleToGroup>
		if(result != BOS_OK)
 8007238:	2800      	cmp	r0, #0
 800723a:	d133      	bne.n	80072a4 <groupCommand+0x13c>
		if(count > 2)
 800723c:	4643      	mov	r3, r8
 800723e:	56e7      	ldrsb	r7, [r4, r3]
 8007240:	2f02      	cmp	r7, #2
 8007242:	ddd8      	ble.n	80071f6 <groupCommand+0x8e>
			strcat((char* )pcWriteBuffer,", ");
 8007244:	0028      	movs	r0, r5
 8007246:	f7f8 ff67 	bl	8000118 <strlen>
 800724a:	2203      	movs	r2, #3
 800724c:	1828      	adds	r0, r5, r0
 800724e:	4929      	ldr	r1, [pc, #164]	; (80072f4 <groupCommand+0x18c>)
 8007250:	f00c fee5 	bl	801401e <memcpy>
 8007254:	e7cf      	b.n	80071f6 <groupCommand+0x8e>
			type =0;
 8007256:	2300      	movs	r3, #0
 8007258:	469a      	mov	sl, r3
 800725a:	e7b6      	b.n	80071ca <groupCommand+0x62>
	configASSERT(pcWriteBuffer);
 800725c:	b672      	cpsid	i
 800725e:	e7fe      	b.n	800725e <groupCommand+0xf6>
	else if(count == 2)
 8007260:	57e3      	ldrsb	r3, [r4, r7]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d018      	beq.n	8007298 <groupCommand+0x130>
	else if(result == BOS_OK && type){
 8007266:	4653      	mov	r3, sl
		sprintf(module,(char* )pcMessageOKnew,alias);
 8007268:	aa01      	add	r2, sp, #4
 800726a:	4923      	ldr	r1, [pc, #140]	; (80072f8 <groupCommand+0x190>)
	else if(result == BOS_OK && type){
 800726c:	2b00      	cmp	r3, #0
 800726e:	d100      	bne.n	8007272 <groupCommand+0x10a>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8007270:	4922      	ldr	r1, [pc, #136]	; (80072fc <groupCommand+0x194>)
 8007272:	0030      	movs	r0, r6
 8007274:	f00d f8d6 	bl	8014424 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8007278:	0031      	movs	r1, r6
 800727a:	0028      	movs	r0, r5
 800727c:	f00d f8f2 	bl	8014464 <strcat>
}
 8007280:	2000      	movs	r0, #0
 8007282:	b00f      	add	sp, #60	; 0x3c
 8007284:	bc3c      	pop	{r2, r3, r4, r5}
 8007286:	4690      	mov	r8, r2
 8007288:	4699      	mov	r9, r3
 800728a:	46a2      	mov	sl, r4
 800728c:	46ab      	mov	fp, r5
 800728e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8007290:	4643      	mov	r3, r8
 8007292:	56e3      	ldrsb	r3, [r4, r3]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d1e6      	bne.n	8007266 <groupCommand+0xfe>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8007298:	aa01      	add	r2, sp, #4
 800729a:	4919      	ldr	r1, [pc, #100]	; (8007300 <groupCommand+0x198>)
 800729c:	0028      	movs	r0, r5
 800729e:	f00d f8c1 	bl	8014424 <sprintf>
 80072a2:	e7ed      	b.n	8007280 <groupCommand+0x118>
	else if(count == 2)
 80072a4:	2354      	movs	r3, #84	; 0x54
 80072a6:	56e3      	ldrsb	r3, [r4, r3]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d0f5      	beq.n	8007298 <groupCommand+0x130>
	else if(result == BOS_ERR_Keyword)
 80072ac:	2806      	cmp	r0, #6
 80072ae:	d015      	beq.n	80072dc <groupCommand+0x174>
	else if(result == BOS_ERR_ExistingAlias)
 80072b0:	2807      	cmp	r0, #7
 80072b2:	d00d      	beq.n	80072d0 <groupCommand+0x168>
	else if(result == BOS_ERR_ExistingCmd)
 80072b4:	2808      	cmp	r0, #8
 80072b6:	d1e3      	bne.n	8007280 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 80072b8:	aa01      	add	r2, sp, #4
 80072ba:	4912      	ldr	r1, [pc, #72]	; (8007304 <groupCommand+0x19c>)
 80072bc:	0028      	movs	r0, r5
 80072be:	f00d f8b1 	bl	8014424 <sprintf>
 80072c2:	e7dd      	b.n	8007280 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 80072c4:	0032      	movs	r2, r6
 80072c6:	4910      	ldr	r1, [pc, #64]	; (8007308 <groupCommand+0x1a0>)
 80072c8:	0028      	movs	r0, r5
 80072ca:	f00d f8ab 	bl	8014424 <sprintf>
	return pdFALSE;
 80072ce:	e7d7      	b.n	8007280 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 80072d0:	aa01      	add	r2, sp, #4
 80072d2:	490e      	ldr	r1, [pc, #56]	; (800730c <groupCommand+0x1a4>)
 80072d4:	0028      	movs	r0, r5
 80072d6:	f00d f8a5 	bl	8014424 <sprintf>
 80072da:	e7d1      	b.n	8007280 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 80072dc:	aa01      	add	r2, sp, #4
 80072de:	490c      	ldr	r1, [pc, #48]	; (8007310 <groupCommand+0x1a8>)
 80072e0:	0028      	movs	r0, r5
 80072e2:	f00d f89f 	bl	8014424 <sprintf>
 80072e6:	e7cb      	b.n	8007280 <groupCommand+0x118>
 80072e8:	20001240 	.word	0x20001240
 80072ec:	20000ad0 	.word	0x20000ad0
 80072f0:	0801a478 	.word	0x0801a478
 80072f4:	0801a484 	.word	0x0801a484
 80072f8:	0801a4b4 	.word	0x0801a4b4
 80072fc:	0801a4d0 	.word	0x0801a4d0
 8007300:	0801a488 	.word	0x0801a488
 8007304:	0801a564 	.word	0x0801a564
 8007308:	0801a5a4 	.word	0x0801a5a4
 800730c:	0801a530 	.word	0x0801a530
 8007310:	0801a4f0 	.word	0x0801a4f0

08007314 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	0005      	movs	r5, r0
 8007318:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 800731a:	2d00      	cmp	r5, #0
 800731c:	d01a      	beq.n	8007354 <nameCommand+0x40>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800731e:	4c1b      	ldr	r4, [pc, #108]	; (800738c <nameCommand+0x78>)
 8007320:	2101      	movs	r1, #1
 8007322:	0022      	movs	r2, r4
 8007324:	3260      	adds	r2, #96	; 0x60
 8007326:	f007 f89b 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(xParameterStringLength1 > MaxLengthOfAlias){
 800732a:	6e23      	ldr	r3, [r4, #96]	; 0x60
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800732c:	0001      	movs	r1, r0
 800732e:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8007330:	2b09      	cmp	r3, #9
 8007332:	dd01      	ble.n	8007338 <nameCommand+0x24>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8007334:	2300      	movs	r3, #0
 8007336:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8007338:	4e15      	ldr	r6, [pc, #84]	; (8007390 <nameCommand+0x7c>)
 800733a:	7830      	ldrb	r0, [r6, #0]
 800733c:	f7fd f8e6 	bl	800450c <NameModule>
	if(result == BOS_OK)
 8007340:	2800      	cmp	r0, #0
 8007342:	d009      	beq.n	8007358 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 8007344:	2806      	cmp	r0, #6
 8007346:	d01a      	beq.n	800737e <nameCommand+0x6a>
	else if(result == BOS_ERR_ExistingAlias)
 8007348:	2807      	cmp	r0, #7
 800734a:	d012      	beq.n	8007372 <nameCommand+0x5e>
	else if(result == BOS_ERR_ExistingCmd)
 800734c:	2808      	cmp	r0, #8
 800734e:	d00a      	beq.n	8007366 <nameCommand+0x52>
}
 8007350:	2000      	movs	r0, #0
 8007352:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8007354:	b672      	cpsid	i
 8007356:	e7fe      	b.n	8007356 <nameCommand+0x42>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007358:	7832      	ldrb	r2, [r6, #0]
 800735a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800735c:	490d      	ldr	r1, [pc, #52]	; (8007394 <nameCommand+0x80>)
 800735e:	0028      	movs	r0, r5
 8007360:	f00d f860 	bl	8014424 <sprintf>
 8007364:	e7f4      	b.n	8007350 <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8007366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007368:	490b      	ldr	r1, [pc, #44]	; (8007398 <nameCommand+0x84>)
 800736a:	0028      	movs	r0, r5
 800736c:	f00d f85a 	bl	8014424 <sprintf>
 8007370:	e7ee      	b.n	8007350 <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007374:	4909      	ldr	r1, [pc, #36]	; (800739c <nameCommand+0x88>)
 8007376:	0028      	movs	r0, r5
 8007378:	f00d f854 	bl	8014424 <sprintf>
 800737c:	e7e8      	b.n	8007350 <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 800737e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007380:	4907      	ldr	r1, [pc, #28]	; (80073a0 <nameCommand+0x8c>)
 8007382:	0028      	movs	r0, r5
 8007384:	f00d f84e 	bl	8014424 <sprintf>
 8007388:	e7e2      	b.n	8007350 <nameCommand+0x3c>
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	20001240 	.word	0x20001240
 8007390:	20000a98 	.word	0x20000a98
 8007394:	0801a5c8 	.word	0x0801a5c8
 8007398:	0801a564 	.word	0x0801a564
 800739c:	0801a530 	.word	0x0801a530
 80073a0:	0801a4f0 	.word	0x0801a4f0

080073a4 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80073a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073a6:	46c6      	mov	lr, r8
 80073a8:	b500      	push	{lr}
 80073aa:	0005      	movs	r5, r0
 80073ac:	b082      	sub	sp, #8
 80073ae:	4690      	mov	r8, r2
	configASSERT(pcWriteBuffer);
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d018      	beq.n	80073e6 <bootloaderUpdateCommand+0x42>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80073b4:	4c4d      	ldr	r4, [pc, #308]	; (80074ec <bootloaderUpdateCommand+0x148>)
 80073b6:	2101      	movs	r1, #1
 80073b8:	0022      	movs	r2, r4
 80073ba:	4640      	mov	r0, r8
 80073bc:	3268      	adds	r2, #104	; 0x68
 80073be:	f007 f84f 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d048      	beq.n	8007458 <bootloaderUpdateCommand+0xb4>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 80073c6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80073c8:	4949      	ldr	r1, [pc, #292]	; (80074f0 <bootloaderUpdateCommand+0x14c>)
 80073ca:	f00d f86f 	bl	80144ac <strncmp>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d00b      	beq.n	80073ea <bootloaderUpdateCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80073d2:	220f      	movs	r2, #15
 80073d4:	4947      	ldr	r1, [pc, #284]	; (80074f4 <bootloaderUpdateCommand+0x150>)
 80073d6:	0028      	movs	r0, r5
 80073d8:	f00c fe21 	bl	801401e <memcpy>
}
 80073dc:	2000      	movs	r0, #0
 80073de:	b002      	add	sp, #8
 80073e0:	bc04      	pop	{r2}
 80073e2:	4690      	mov	r8, r2
 80073e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 80073e6:	b672      	cpsid	i
 80073e8:	e7fe      	b.n	80073e8 <bootloaderUpdateCommand+0x44>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80073ea:	0022      	movs	r2, r4
 80073ec:	2102      	movs	r1, #2
 80073ee:	326c      	adds	r2, #108	; 0x6c
 80073f0:	4640      	mov	r0, r8
 80073f2:	f007 f835 	bl	800e460 <FreeRTOS_CLIGetParameter>
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80073f6:	0022      	movs	r2, r4
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80073f8:	6720      	str	r0, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80073fa:	3274      	adds	r2, #116	; 0x74
 80073fc:	2103      	movs	r1, #3
 80073fe:	4640      	mov	r0, r8
 8007400:	f007 f82e 	bl	800e460 <FreeRTOS_CLIGetParameter>
			if(pcParameterString2[0] == '#'){
 8007404:	2200      	movs	r2, #0
				result =BOS_ERR_WrongValue;
 8007406:	2168      	movs	r1, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8007408:	6f23      	ldr	r3, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800740a:	67a0      	str	r0, [r4, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 800740c:	569a      	ldrsb	r2, [r3, r2]
				result =BOS_ERR_WrongValue;
 800740e:	4688      	mov	r8, r1
			if(pcParameterString2[0] == '#'){
 8007410:	2a23      	cmp	r2, #35	; 0x23
 8007412:	d062      	beq.n	80074da <bootloaderUpdateCommand+0x136>
			if(pcParameterString3[0] == 'p'){
 8007414:	2300      	movs	r3, #0
 8007416:	56c3      	ldrsb	r3, [r0, r3]
 8007418:	2b70      	cmp	r3, #112	; 0x70
 800741a:	d059      	beq.n	80074d0 <bootloaderUpdateCommand+0x12c>
				result =BOS_ERR_WrongValue;
 800741c:	2368      	movs	r3, #104	; 0x68
 800741e:	4698      	mov	r8, r3
			if(module != myID){
 8007420:	4c35      	ldr	r4, [pc, #212]	; (80074f8 <bootloaderUpdateCommand+0x154>)
 8007422:	7823      	ldrb	r3, [r4, #0]
 8007424:	42bb      	cmp	r3, r7
 8007426:	d041      	beq.n	80074ac <bootloaderUpdateCommand+0x108>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8007428:	2200      	movs	r2, #0
 800742a:	4b34      	ldr	r3, [pc, #208]	; (80074fc <bootloaderUpdateCommand+0x158>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 800742c:	211a      	movs	r1, #26
				BOSMessaging.response = BOS_RESPONSE_NONE;
 800742e:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 8007430:	4b33      	ldr	r3, [pc, #204]	; (8007500 <bootloaderUpdateCommand+0x15c>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8007432:	3201      	adds	r2, #1
 8007434:	0038      	movs	r0, r7
				messageParams[0] =port;
 8007436:	701e      	strb	r6, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8007438:	f002 fa00 	bl	800983c <SendMessageToModule>
				osDelay(100);
 800743c:	2064      	movs	r0, #100	; 0x64
 800743e:	f006 feff 	bl	800e240 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8007442:	4b30      	ldr	r3, [pc, #192]	; (8007504 <bootloaderUpdateCommand+0x160>)
 8007444:	7820      	ldrb	r0, [r4, #0]
 8007446:	781a      	ldrb	r2, [r3, #0]
 8007448:	0039      	movs	r1, r7
 800744a:	0033      	movs	r3, r6
 800744c:	f7fc fcae 	bl	8003dac <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8007450:	4643      	mov	r3, r8
 8007452:	2b68      	cmp	r3, #104	; 0x68
 8007454:	d1c2      	bne.n	80073dc <bootloaderUpdateCommand+0x38>
 8007456:	e7bc      	b.n	80073d2 <bootloaderUpdateCommand+0x2e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8007458:	4b27      	ldr	r3, [pc, #156]	; (80074f8 <bootloaderUpdateCommand+0x154>)
 800745a:	492b      	ldr	r1, [pc, #172]	; (8007508 <bootloaderUpdateCommand+0x164>)
 800745c:	781a      	ldrb	r2, [r3, #0]
 800745e:	0028      	movs	r0, r5
 8007460:	f00c ffe0 	bl	8014424 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007464:	4b29      	ldr	r3, [pc, #164]	; (800750c <bootloaderUpdateCommand+0x168>)
 8007466:	0028      	movs	r0, r5
 8007468:	6819      	ldr	r1, [r3, #0]
 800746a:	f00c fffb 	bl	8014464 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800746e:	0028      	movs	r0, r5
 8007470:	f7f8 fe52 	bl	8000118 <strlen>
 8007474:	4b23      	ldr	r3, [pc, #140]	; (8007504 <bootloaderUpdateCommand+0x160>)
 8007476:	b282      	uxth	r2, r0
 8007478:	7818      	ldrb	r0, [r3, #0]
 800747a:	2301      	movs	r3, #1
 800747c:	425b      	negs	r3, r3
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	0029      	movs	r1, r5
 8007482:	3333      	adds	r3, #51	; 0x33
 8007484:	f006 fd90 	bl	800dfa8 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8007488:	4b21      	ldr	r3, [pc, #132]	; (8007510 <bootloaderUpdateCommand+0x16c>)
 800748a:	4a22      	ldr	r2, [pc, #136]	; (8007514 <bootloaderUpdateCommand+0x170>)
		osDelay(10);
 800748c:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800748e:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8007490:	2201      	movs	r2, #1
 8007492:	4b21      	ldr	r3, [pc, #132]	; (8007518 <bootloaderUpdateCommand+0x174>)
 8007494:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007496:	f006 fed3 	bl	800e240 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	4b1f      	ldr	r3, [pc, #124]	; (800751c <bootloaderUpdateCommand+0x178>)
 80074a0:	4a1f      	ldr	r2, [pc, #124]	; (8007520 <bootloaderUpdateCommand+0x17c>)
 80074a2:	60da      	str	r2, [r3, #12]
 80074a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80074a8:	46c0      	nop			; (mov r8, r8)
 80074aa:	e7fd      	b.n	80074a8 <bootloaderUpdateCommand+0x104>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 80074ac:	2100      	movs	r1, #0
 80074ae:	2319      	movs	r3, #25
 80074b0:	9100      	str	r1, [sp, #0]
 80074b2:	000a      	movs	r2, r1
 80074b4:	0030      	movs	r0, r6
 80074b6:	f001 ff61 	bl	800937c <SendMessageFromPort>
				osDelay(100);
 80074ba:	2064      	movs	r0, #100	; 0x64
 80074bc:	f006 fec0 	bl	800e240 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 80074c0:	7820      	ldrb	r0, [r4, #0]
 80074c2:	4b10      	ldr	r3, [pc, #64]	; (8007504 <bootloaderUpdateCommand+0x160>)
 80074c4:	0001      	movs	r1, r0
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	0033      	movs	r3, r6
 80074ca:	f7fc fc6f 	bl	8003dac <remoteBootloaderUpdate>
 80074ce:	e7bf      	b.n	8007450 <bootloaderUpdateCommand+0xac>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 80074d0:	3001      	adds	r0, #1
 80074d2:	f00c fae4 	bl	8013a9e <atol>
 80074d6:	b2c6      	uxtb	r6, r0
 80074d8:	e7a2      	b.n	8007420 <bootloaderUpdateCommand+0x7c>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 80074da:	1c58      	adds	r0, r3, #1
 80074dc:	f00c fadf 	bl	8013a9e <atol>
	BOS_Status result =BOS_OK;
 80074e0:	2300      	movs	r3, #0
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 80074e2:	b2c7      	uxtb	r7, r0
	BOS_Status result =BOS_OK;
 80074e4:	4698      	mov	r8, r3
 80074e6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80074e8:	e794      	b.n	8007414 <bootloaderUpdateCommand+0x70>
 80074ea:	46c0      	nop			; (mov r8, r8)
 80074ec:	20001240 	.word	0x20001240
 80074f0:	0801a600 	.word	0x0801a600
 80074f4:	0801a07c 	.word	0x0801a07c
 80074f8:	20000a98 	.word	0x20000a98
 80074fc:	20006c4c 	.word	0x20006c4c
 8007500:	20000b3c 	.word	0x20000b3c
 8007504:	20000c28 	.word	0x20000c28
 8007508:	0801a5e0 	.word	0x0801a5e0
 800750c:	2000007c 	.word	0x2000007c
 8007510:	20007ff0 	.word	0x20007ff0
 8007514:	deadbeef 	.word	0xdeadbeef
 8007518:	2000113e 	.word	0x2000113e
 800751c:	e000ed00 	.word	0xe000ed00
 8007520:	05fa0004 	.word	0x05fa0004

08007524 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007524:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8007526:	2800      	cmp	r0, #0
 8007528:	d01f      	beq.n	800756a <pingCommand+0x46>
	if(!moduleAlias[myID][0])
 800752a:	4b13      	ldr	r3, [pc, #76]	; (8007578 <pingCommand+0x54>)
 800752c:	4913      	ldr	r1, [pc, #76]	; (800757c <pingCommand+0x58>)
 800752e:	781a      	ldrb	r2, [r3, #0]
 8007530:	0093      	lsls	r3, r2, #2
 8007532:	189b      	adds	r3, r3, r2
 8007534:	005b      	lsls	r3, r3, #1
 8007536:	5c5c      	ldrb	r4, [r3, r1]
 8007538:	2c00      	cmp	r4, #0
 800753a:	d018      	beq.n	800756e <pingCommand+0x4a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 800753c:	185b      	adds	r3, r3, r1
 800753e:	4910      	ldr	r1, [pc, #64]	; (8007580 <pingCommand+0x5c>)
 8007540:	f00c ff70 	bl	8014424 <sprintf>
	RTOS_IND_blink(200);
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	2090      	movs	r0, #144	; 0x90
 8007548:	2201      	movs	r2, #1
 800754a:	0109      	lsls	r1, r1, #4
 800754c:	05c0      	lsls	r0, r0, #23
 800754e:	f00a fb17 	bl	8011b80 <HAL_GPIO_WritePin>
 8007552:	20c8      	movs	r0, #200	; 0xc8
 8007554:	f006 fe74 	bl	800e240 <osDelay>
 8007558:	2180      	movs	r1, #128	; 0x80
 800755a:	2090      	movs	r0, #144	; 0x90
 800755c:	2200      	movs	r2, #0
 800755e:	0109      	lsls	r1, r1, #4
 8007560:	05c0      	lsls	r0, r0, #23
 8007562:	f00a fb0d 	bl	8011b80 <HAL_GPIO_WritePin>
}
 8007566:	2000      	movs	r0, #0
 8007568:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800756a:	b672      	cpsid	i
 800756c:	e7fe      	b.n	800756c <pingCommand+0x48>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 800756e:	4905      	ldr	r1, [pc, #20]	; (8007584 <pingCommand+0x60>)
 8007570:	f00c ff58 	bl	8014424 <sprintf>
 8007574:	e7e6      	b.n	8007544 <pingCommand+0x20>
 8007576:	46c0      	nop			; (mov r8, r8)
 8007578:	20000a98 	.word	0x20000a98
 800757c:	20000dc4 	.word	0x20000dc4
 8007580:	0801a618 	.word	0x0801a618
 8007584:	0801a604 	.word	0x0801a604

08007588 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007588:	b510      	push	{r4, lr}
 800758a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800758c:	d101      	bne.n	8007592 <prvRunTimeStatsCommand+0xa>
 800758e:	b672      	cpsid	i
 8007590:	e7fe      	b.n	8007590 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007592:	2241      	movs	r2, #65	; 0x41
 8007594:	4904      	ldr	r1, [pc, #16]	; (80075a8 <prvRunTimeStatsCommand+0x20>)
 8007596:	f00c fd42 	bl	801401e <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800759a:	0020      	movs	r0, r4
 800759c:	3040      	adds	r0, #64	; 0x40
 800759e:	f008 f959 	bl	800f854 <vTaskGetRunTimeStats>
}
 80075a2:	2000      	movs	r0, #0
 80075a4:	bd10      	pop	{r4, pc}
 80075a6:	46c0      	nop			; (mov r8, r8)
 80075a8:	0801a634 	.word	0x0801a634

080075ac <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80075ac:	b510      	push	{r4, lr}
 80075ae:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80075b0:	d101      	bne.n	80075b6 <prvTaskStatsCommand+0xa>
 80075b2:	b672      	cpsid	i
 80075b4:	e7fe      	b.n	80075b4 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 80075b6:	2250      	movs	r2, #80	; 0x50
 80075b8:	4904      	ldr	r1, [pc, #16]	; (80075cc <prvTaskStatsCommand+0x20>)
 80075ba:	f00c fd30 	bl	801401e <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 80075be:	0020      	movs	r0, r4
 80075c0:	304f      	adds	r0, #79	; 0x4f
 80075c2:	f008 f8ed 	bl	800f7a0 <vTaskList>
}
 80075c6:	2000      	movs	r0, #0
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	46c0      	nop			; (mov r8, r8)
 80075cc:	0801a678 	.word	0x0801a678

080075d0 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80075d4:	d023      	beq.n	800761e <uuidCommand+0x4e>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 80075d6:	220e      	movs	r2, #14
 80075d8:	4912      	ldr	r1, [pc, #72]	; (8007624 <uuidCommand+0x54>)
 80075da:	f00c fd20 	bl	801401e <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 80075de:	4d12      	ldr	r5, [pc, #72]	; (8007628 <uuidCommand+0x58>)
 80075e0:	4b12      	ldr	r3, [pc, #72]	; (800762c <uuidCommand+0x5c>)
 80075e2:	0029      	movs	r1, r5
 80075e4:	0022      	movs	r2, r4
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	0020      	movs	r0, r4
 80075ea:	f00c ff1b 	bl	8014424 <sprintf>
 80075ee:	4b10      	ldr	r3, [pc, #64]	; (8007630 <uuidCommand+0x60>)
 80075f0:	0029      	movs	r1, r5
 80075f2:	0022      	movs	r2, r4
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	0020      	movs	r0, r4
 80075f8:	f00c ff14 	bl	8014424 <sprintf>
 80075fc:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <uuidCommand+0x64>)
 80075fe:	0029      	movs	r1, r5
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	0022      	movs	r2, r4
 8007604:	0020      	movs	r0, r4
 8007606:	f00c ff0d 	bl	8014424 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 800760a:	0020      	movs	r0, r4
 800760c:	f7f8 fd84 	bl	8000118 <strlen>
 8007610:	2203      	movs	r2, #3
 8007612:	1820      	adds	r0, r4, r0
 8007614:	4908      	ldr	r1, [pc, #32]	; (8007638 <uuidCommand+0x68>)
 8007616:	f00c fd02 	bl	801401e <memcpy>
}
 800761a:	2000      	movs	r0, #0
 800761c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 800761e:	b672      	cpsid	i
 8007620:	e7fe      	b.n	8007620 <uuidCommand+0x50>
 8007622:	46c0      	nop			; (mov r8, r8)
 8007624:	0801a6c8 	.word	0x0801a6c8
 8007628:	0801a6d8 	.word	0x0801a6d8
 800762c:	1ffff7ac 	.word	0x1ffff7ac
 8007630:	1ffff7b0 	.word	0x1ffff7b0
 8007634:	1ffff7b4 	.word	0x1ffff7b4
 8007638:	0801afa0 	.word	0x0801afa0

0800763c <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800763c:	b510      	push	{r4, lr}
 800763e:	0004      	movs	r4, r0
 8007640:	b084      	sub	sp, #16
	configASSERT(pcWriteBuffer);
 8007642:	2800      	cmp	r0, #0
 8007644:	d00a      	beq.n	800765c <timeCommand+0x20>
	GetTimeDate();
 8007646:	f006 fa8d 	bl	800db64 <GetTimeDate>
	if(BOS.hourformat == 24)
 800764a:	4916      	ldr	r1, [pc, #88]	; (80076a4 <timeCommand+0x68>)
 800764c:	7b4b      	ldrb	r3, [r1, #13]
 800764e:	2b18      	cmp	r3, #24
 8007650:	d006      	beq.n	8007660 <timeCommand+0x24>
	else if(BOS.hourformat == 12){
 8007652:	2b0c      	cmp	r3, #12
 8007654:	d00f      	beq.n	8007676 <timeCommand+0x3a>
}
 8007656:	2000      	movs	r0, #0
 8007658:	b004      	add	sp, #16
 800765a:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800765c:	b672      	cpsid	i
 800765e:	e7fe      	b.n	800765e <timeCommand+0x22>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8007660:	89c8      	ldrh	r0, [r1, #14]
 8007662:	7c4b      	ldrb	r3, [r1, #17]
 8007664:	7c8a      	ldrb	r2, [r1, #18]
 8007666:	9001      	str	r0, [sp, #4]
 8007668:	7c09      	ldrb	r1, [r1, #16]
 800766a:	0020      	movs	r0, r4
 800766c:	9100      	str	r1, [sp, #0]
 800766e:	490e      	ldr	r1, [pc, #56]	; (80076a8 <timeCommand+0x6c>)
 8007670:	f00c fed8 	bl	8014424 <sprintf>
 8007674:	e7ef      	b.n	8007656 <timeCommand+0x1a>
		if(BOS.time.ampm == RTC_AM)
 8007676:	7ccb      	ldrb	r3, [r1, #19]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d00e      	beq.n	800769a <timeCommand+0x5e>
		else if(BOS.time.ampm == RTC_PM)
 800767c:	2b02      	cmp	r3, #2
 800767e:	d1ea      	bne.n	8007656 <timeCommand+0x1a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8007680:	7c4b      	ldrb	r3, [r1, #17]
 8007682:	7c8a      	ldrb	r2, [r1, #18]
 8007684:	4809      	ldr	r0, [pc, #36]	; (80076ac <timeCommand+0x70>)
 8007686:	9002      	str	r0, [sp, #8]
 8007688:	89c8      	ldrh	r0, [r1, #14]
 800768a:	9001      	str	r0, [sp, #4]
 800768c:	7c09      	ldrb	r1, [r1, #16]
 800768e:	0020      	movs	r0, r4
 8007690:	9100      	str	r1, [sp, #0]
 8007692:	4907      	ldr	r1, [pc, #28]	; (80076b0 <timeCommand+0x74>)
 8007694:	f00c fec6 	bl	8014424 <sprintf>
 8007698:	e7dd      	b.n	8007656 <timeCommand+0x1a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 800769a:	7c4b      	ldrb	r3, [r1, #17]
 800769c:	7c8a      	ldrb	r2, [r1, #18]
 800769e:	4805      	ldr	r0, [pc, #20]	; (80076b4 <timeCommand+0x78>)
 80076a0:	e7f1      	b.n	8007686 <timeCommand+0x4a>
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	20006ccc 	.word	0x20006ccc
 80076a8:	0801a6e0 	.word	0x0801a6e0
 80076ac:	0801a738 	.word	0x0801a738
 80076b0:	0801a708 	.word	0x0801a708
 80076b4:	0801a734 	.word	0x0801a734

080076b8 <resetCommand>:
	configASSERT(pcWriteBuffer);
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d008      	beq.n	80076ce <resetCommand+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	4b04      	ldr	r3, [pc, #16]	; (80076d4 <resetCommand+0x1c>)
 80076c2:	4a05      	ldr	r2, [pc, #20]	; (80076d8 <resetCommand+0x20>)
 80076c4:	60da      	str	r2, [r3, #12]
 80076c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	e7fd      	b.n	80076ca <resetCommand+0x12>
 80076ce:	b672      	cpsid	i
 80076d0:	e7fe      	b.n	80076d0 <resetCommand+0x18>
 80076d2:	46c0      	nop			; (mov r8, r8)
 80076d4:	e000ed00 	.word	0xe000ed00
 80076d8:	05fa0004 	.word	0x05fa0004

080076dc <RegisterUserCLICommands>:
}
 80076dc:	4770      	bx	lr
 80076de:	46c0      	nop			; (mov r8, r8)

080076e0 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 80076e0:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80076e2:	4c45      	ldr	r4, [pc, #276]	; (80077f8 <vRegisterCLICommands+0x118>)
 80076e4:	0020      	movs	r0, r4
 80076e6:	f006 fe23 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80076ea:	0020      	movs	r0, r4
 80076ec:	3010      	adds	r0, #16
 80076ee:	f006 fe1f 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80076f2:	0020      	movs	r0, r4
 80076f4:	3020      	adds	r0, #32
 80076f6:	f006 fe1b 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 80076fa:	0020      	movs	r0, r4
 80076fc:	3030      	adds	r0, #48	; 0x30
 80076fe:	f006 fe17 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007702:	0020      	movs	r0, r4
 8007704:	3040      	adds	r0, #64	; 0x40
 8007706:	f006 fe13 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 800770a:	0020      	movs	r0, r4
 800770c:	3050      	adds	r0, #80	; 0x50
 800770e:	f006 fe0f 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8007712:	0020      	movs	r0, r4
 8007714:	3060      	adds	r0, #96	; 0x60
 8007716:	f006 fe0b 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 800771a:	0020      	movs	r0, r4
 800771c:	3070      	adds	r0, #112	; 0x70
 800771e:	f006 fe07 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 8007722:	4c36      	ldr	r4, [pc, #216]	; (80077fc <vRegisterCLICommands+0x11c>)
 8007724:	0020      	movs	r0, r4
 8007726:	f006 fe03 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 800772a:	0020      	movs	r0, r4
 800772c:	3010      	adds	r0, #16
 800772e:	f006 fdff 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8007732:	0020      	movs	r0, r4
 8007734:	3020      	adds	r0, #32
 8007736:	f006 fdfb 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 800773a:	0020      	movs	r0, r4
 800773c:	3030      	adds	r0, #48	; 0x30
 800773e:	f006 fdf7 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007742:	0020      	movs	r0, r4
 8007744:	3040      	adds	r0, #64	; 0x40
 8007746:	f006 fdf3 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 800774a:	0020      	movs	r0, r4
 800774c:	3050      	adds	r0, #80	; 0x50
 800774e:	f006 fdef 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8007752:	0020      	movs	r0, r4
 8007754:	3060      	adds	r0, #96	; 0x60
 8007756:	f006 fdeb 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 800775a:	0020      	movs	r0, r4
 800775c:	3070      	adds	r0, #112	; 0x70
 800775e:	f006 fde7 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 8007762:	4c27      	ldr	r4, [pc, #156]	; (8007800 <vRegisterCLICommands+0x120>)
 8007764:	0020      	movs	r0, r4
 8007766:	f006 fde3 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 800776a:	0020      	movs	r0, r4
 800776c:	3010      	adds	r0, #16
 800776e:	f006 fddf 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8007772:	0020      	movs	r0, r4
 8007774:	3020      	adds	r0, #32
 8007776:	f006 fddb 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 800777a:	0020      	movs	r0, r4
 800777c:	3030      	adds	r0, #48	; 0x30
 800777e:	f006 fdd7 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007782:	0020      	movs	r0, r4
 8007784:	3040      	adds	r0, #64	; 0x40
 8007786:	f006 fdd3 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 800778a:	0020      	movs	r0, r4
 800778c:	3050      	adds	r0, #80	; 0x50
 800778e:	f006 fdcf 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007792:	0020      	movs	r0, r4
 8007794:	3060      	adds	r0, #96	; 0x60
 8007796:	f006 fdcb 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 800779a:	0020      	movs	r0, r4
 800779c:	3070      	adds	r0, #112	; 0x70
 800779e:	f006 fdc7 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 80077a2:	4c18      	ldr	r4, [pc, #96]	; (8007804 <vRegisterCLICommands+0x124>)
 80077a4:	0020      	movs	r0, r4
 80077a6:	f006 fdc3 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 80077aa:	0020      	movs	r0, r4
 80077ac:	3010      	adds	r0, #16
 80077ae:	f006 fdbf 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 80077b2:	0020      	movs	r0, r4
 80077b4:	3020      	adds	r0, #32
 80077b6:	f006 fdbb 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 80077ba:	0020      	movs	r0, r4
 80077bc:	3030      	adds	r0, #48	; 0x30
 80077be:	f006 fdb7 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 80077c2:	0020      	movs	r0, r4
 80077c4:	3040      	adds	r0, #64	; 0x40
 80077c6:	f006 fdb3 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 80077ca:	0020      	movs	r0, r4
 80077cc:	3050      	adds	r0, #80	; 0x50
 80077ce:	f006 fdaf 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80077d2:	0020      	movs	r0, r4
 80077d4:	3060      	adds	r0, #96	; 0x60
 80077d6:	f006 fdab 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80077da:	0020      	movs	r0, r4
 80077dc:	3070      	adds	r0, #112	; 0x70
 80077de:	f006 fda7 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80077e2:	4809      	ldr	r0, [pc, #36]	; (8007808 <vRegisterCLICommands+0x128>)
 80077e4:	f006 fda4 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80077e8:	2223      	movs	r2, #35	; 0x23
 80077ea:	4b08      	ldr	r3, [pc, #32]	; (800780c <vRegisterCLICommands+0x12c>)
 80077ec:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80077ee:	f003 ffd5 	bl	800b79c <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80077f2:	f7ff ff73 	bl	80076dc <RegisterUserCLICommands>
}
 80077f6:	bd10      	pop	{r4, pc}
 80077f8:	08018974 	.word	0x08018974
 80077fc:	080189f4 	.word	0x080189f4
 8007800:	08018a74 	.word	0x08018a74
 8007804:	08018af4 	.word	0x08018af4
 8007808:	08018b74 	.word	0x08018b74
 800780c:	20006c48 	.word	0x20006c48

08007810 <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 8007810:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 8007812:	1e44      	subs	r4, r0, #1
 8007814:	00e5      	lsls	r5, r4, #3
 8007816:	4e07      	ldr	r6, [pc, #28]	; (8007834 <StopStreamDMA+0x24>)
 8007818:	1b2d      	subs	r5, r5, r4
 800781a:	00ed      	lsls	r5, r5, #3
 800781c:	19a8      	adds	r0, r5, r6
	
	HAL_DMA_Abort(hDMA);
 800781e:	f009 fa05 	bl	8010c2c <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8007822:	2300      	movs	r3, #0
 8007824:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] =0;
 8007826:	4804      	ldr	r0, [pc, #16]	; (8007838 <StopStreamDMA+0x28>)
 8007828:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR =0;
 800782a:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 800782c:	5023      	str	r3, [r4, r0]
	dmaStreamTotal[port - 1] =0;
 800782e:	1904      	adds	r4, r0, r4
 8007830:	6163      	str	r3, [r4, #20]
	
}
 8007832:	bd70      	pop	{r4, r5, r6, pc}
 8007834:	20001a9c 	.word	0x20001a9c
 8007838:	200012bc 	.word	0x200012bc

0800783c <SwitchMsgDMAToStream>:
	hDMA =&msgRxDMA[port - 1];
 800783c:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 800783e:	b570      	push	{r4, r5, r6, lr}
 8007840:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 8007842:	4d07      	ldr	r5, [pc, #28]	; (8007860 <SwitchMsgDMAToStream+0x24>)
 8007844:	1a24      	subs	r4, r4, r0
 8007846:	00e4      	lsls	r4, r4, #3
 8007848:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 800784a:	f009 f9ef 	bl	8010c2c <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800784e:	2300      	movs	r3, #0
 8007850:	5961      	ldr	r1, [r4, r5]
	
	// Stop the messaging DMA
	StopMsgDMA(port);
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 8007852:	4804      	ldr	r0, [pc, #16]	; (8007864 <SwitchMsgDMAToStream+0x28>)
	hDMA->Instance->CNDTR =0;
 8007854:	604b      	str	r3, [r1, #4]
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 8007856:	1820      	adds	r0, r4, r0
 8007858:	f004 feda 	bl	800c610 <DMA_STREAM_CH_Init>
}
 800785c:	bd70      	pop	{r4, r5, r6, pc}
 800785e:	46c0      	nop			; (mov r8, r8)
 8007860:	20001c94 	.word	0x20001c94
 8007864:	20001a9c 	.word	0x20001a9c

08007868 <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 8007868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800786a:	46d6      	mov	lr, sl
 800786c:	464f      	mov	r7, r9
 800786e:	4646      	mov	r6, r8
 8007870:	b5c0      	push	{r6, r7, lr}
	hDMA =&streamDMA[port - 1];
 8007872:	1e46      	subs	r6, r0, #1
 8007874:	00f4      	lsls	r4, r6, #3
 8007876:	4f15      	ldr	r7, [pc, #84]	; (80078cc <SwitchStreamDMAToMsg+0x64>)
 8007878:	1ba4      	subs	r4, r4, r6
 800787a:	00e4      	lsls	r4, r4, #3
 800787c:	19e3      	adds	r3, r4, r7
void SwitchStreamDMAToMsg(uint8_t port){
 800787e:	4680      	mov	r8, r0
	HAL_DMA_Abort(hDMA);
 8007880:	0018      	movs	r0, r3
	hDMA =&streamDMA[port - 1];
 8007882:	4699      	mov	r9, r3
	HAL_DMA_Abort(hDMA);
 8007884:	f009 f9d2 	bl	8010c2c <HAL_DMA_Abort>
	// Stop the streaming DMA
	StopStreamDMA(port);
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007888:	4b11      	ldr	r3, [pc, #68]	; (80078d0 <SwitchStreamDMAToMsg+0x68>)
	hDMA->Instance->CNDTR =0;
 800788a:	2500      	movs	r5, #0
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 800788c:	469a      	mov	sl, r3
	hDMA->Instance->CNDTR =0;
 800788e:	59e1      	ldr	r1, [r4, r7]
	dmaStreamCount[port - 1] =0;
 8007890:	4a10      	ldr	r2, [pc, #64]	; (80078d4 <SwitchStreamDMAToMsg+0x6c>)
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007892:	44a2      	add	sl, r4
	dmaStreamCount[port - 1] =0;
 8007894:	00b6      	lsls	r6, r6, #2
	hDMA->Instance->CNDTR =0;
 8007896:	604d      	str	r5, [r1, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007898:	4650      	mov	r0, sl
	dmaStreamCount[port - 1] =0;
 800789a:	50b5      	str	r5, [r6, r2]
	dmaStreamTotal[port - 1] =0;
 800789c:	1996      	adds	r6, r2, r6
 800789e:	6175      	str	r5, [r6, #20]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 80078a0:	f004 fea4 	bl	800c5ec <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 80078a4:	464b      	mov	r3, r9
 80078a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80078a8:	f003 ff9c 	bl	800b7e4 <GetPort>
 80078ac:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <SwitchStreamDMAToMsg+0x70>)
	streamDMA[port - 1].Instance =0;
 80078ae:	51e5      	str	r5, [r4, r7]
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 80078b0:	541d      	strb	r5, [r3, r0]
	dmaStreamDst[port - 1] =0;
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 80078b2:	4640      	mov	r0, r8
	dmaStreamDst[port - 1] =0;
 80078b4:	62b5      	str	r5, [r6, #40]	; 0x28
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 80078b6:	f006 fbff 	bl	800e0b8 <GetUart>
 80078ba:	4651      	mov	r1, sl
 80078bc:	f005 fa56 	bl	800cd6c <DMA_MSG_RX_Setup>
	
}
 80078c0:	bc1c      	pop	{r2, r3, r4}
 80078c2:	4690      	mov	r8, r2
 80078c4:	4699      	mov	r9, r3
 80078c6:	46a2      	mov	sl, r4
 80078c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ca:	46c0      	nop			; (mov r8, r8)
 80078cc:	20001a9c 	.word	0x20001a9c
 80078d0:	20001c94 	.word	0x20001c94
 80078d4:	200012bc 	.word	0x200012bc
 80078d8:	20000c2c 	.word	0x20000c2c

080078dc <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 80078dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078de:	46c6      	mov	lr, r8
 80078e0:	b500      	push	{lr}
 80078e2:	0005      	movs	r5, r0
 80078e4:	000f      	movs	r7, r1
 80078e6:	4690      	mov	r8, r2
	uint8_t srcPort =GetPort(huartSrc);
 80078e8:	f003 ff7c 	bl	800b7e4 <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80078ec:	4e0e      	ldr	r6, [pc, #56]	; (8007928 <StartDMAstream+0x4c>)
	uint8_t srcPort =GetPort(huartSrc);
 80078ee:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80078f0:	5c33      	ldrb	r3, [r6, r0]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d902      	bls.n	80078fc <StartDMAstream+0x20>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 80078f6:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d111      	bne.n	8007920 <StartDMAstream+0x44>
		SwitchMsgDMAToStream(srcPort);
 80078fc:	0020      	movs	r0, r4
 80078fe:	f7ff ff9d 	bl	800783c <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007902:	4a0a      	ldr	r2, [pc, #40]	; (800792c <StartDMAstream+0x50>)
 8007904:	1e63      	subs	r3, r4, #1
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	18d1      	adds	r1, r2, r3
 800790a:	628f      	str	r7, [r1, #40]	; 0x28
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 800790c:	2102      	movs	r1, #2
 800790e:	5531      	strb	r1, [r6, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 8007910:	2100      	movs	r1, #0
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007912:	0028      	movs	r0, r5
	dmaStreamCount[srcPort - 1] =0;
 8007914:	5099      	str	r1, [r3, r2]
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007916:	4642      	mov	r2, r8
 8007918:	0039      	movs	r1, r7
 800791a:	f005 fa81 	bl	800ce20 <DMA_STREAM_Setup>
	
	return BOS_OK;
 800791e:	2000      	movs	r0, #0
}
 8007920:	bc04      	pop	{r2}
 8007922:	4690      	mov	r8, r2
 8007924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007926:	46c0      	nop			; (mov r8, r8)
 8007928:	20000c2c 	.word	0x20000c2c
 800792c:	200012bc 	.word	0x200012bc

08007930 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	46ce      	mov	lr, r9
 8007934:	4647      	mov	r7, r8
 8007936:	b580      	push	{r7, lr}
	if(portStatus[port] != STREAM){
 8007938:	4a19      	ldr	r2, [pc, #100]	; (80079a0 <DMA_IRQHandler+0x70>)
 800793a:	1e45      	subs	r5, r0, #1
 800793c:	00ee      	lsls	r6, r5, #3
 800793e:	5c12      	ldrb	r2, [r2, r0]
 8007940:	1b73      	subs	r3, r6, r5
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	2a02      	cmp	r2, #2
 8007946:	d007      	beq.n	8007958 <DMA_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007948:	4816      	ldr	r0, [pc, #88]	; (80079a4 <DMA_IRQHandler+0x74>)
 800794a:	1818      	adds	r0, r3, r0
 800794c:	f009 f996 	bl	8010c7c <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007950:	bc0c      	pop	{r2, r3}
 8007952:	4690      	mov	r8, r2
 8007954:	4699      	mov	r9, r3
 8007956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007958:	4a13      	ldr	r2, [pc, #76]	; (80079a8 <DMA_IRQHandler+0x78>)
		if(dmaStreamTotal[port - 1])
 800795a:	00af      	lsls	r7, r5, #2
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 800795c:	4691      	mov	r9, r2
 800795e:	444b      	add	r3, r9
 8007960:	0018      	movs	r0, r3
 8007962:	001c      	movs	r4, r3
 8007964:	f009 f98a 	bl	8010c7c <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8007968:	4b10      	ldr	r3, [pc, #64]	; (80079ac <DMA_IRQHandler+0x7c>)
 800796a:	4698      	mov	r8, r3
 800796c:	19db      	adds	r3, r3, r7
 800796e:	695a      	ldr	r2, [r3, #20]
 8007970:	2a00      	cmp	r2, #0
 8007972:	d006      	beq.n	8007982 <DMA_IRQHandler+0x52>
			++dmaStreamCount[port - 1];
 8007974:	4643      	mov	r3, r8
 8007976:	4641      	mov	r1, r8
 8007978:	59db      	ldr	r3, [r3, r7]
 800797a:	3301      	adds	r3, #1
 800797c:	51cb      	str	r3, [r1, r7]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800797e:	429a      	cmp	r2, r3
 8007980:	d8e6      	bhi.n	8007950 <DMA_IRQHandler+0x20>
	HAL_DMA_Abort(hDMA);
 8007982:	0020      	movs	r0, r4
 8007984:	f009 f952 	bl	8010c2c <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8007988:	464b      	mov	r3, r9
 800798a:	1b75      	subs	r5, r6, r5
 800798c:	00ed      	lsls	r5, r5, #3
 800798e:	595a      	ldr	r2, [r3, r5]
 8007990:	2300      	movs	r3, #0
 8007992:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 8007994:	4642      	mov	r2, r8
 8007996:	51d3      	str	r3, [r2, r7]
	dmaStreamTotal[port - 1] =0;
 8007998:	4447      	add	r7, r8
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	e7d8      	b.n	8007950 <DMA_IRQHandler+0x20>
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	20000c2c 	.word	0x20000c2c
 80079a4:	20001c94 	.word	0x20001c94
 80079a8:	20001a9c 	.word	0x20001a9c
 80079ac:	200012bc 	.word	0x200012bc

080079b0 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 80079b0:	4b08      	ldr	r3, [pc, #32]	; (80079d4 <ResetUartORE+0x24>)
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	2308      	movs	r3, #8
 80079b6:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80079b8:	4a07      	ldr	r2, [pc, #28]	; (80079d8 <ResetUartORE+0x28>)
 80079ba:	6812      	ldr	r2, [r2, #0]
 80079bc:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80079be:	4a07      	ldr	r2, [pc, #28]	; (80079dc <ResetUartORE+0x2c>)
 80079c0:	6812      	ldr	r2, [r2, #0]
 80079c2:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 80079c4:	4a06      	ldr	r2, [pc, #24]	; (80079e0 <ResetUartORE+0x30>)
 80079c6:	6812      	ldr	r2, [r2, #0]
 80079c8:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80079ca:	4a06      	ldr	r2, [pc, #24]	; (80079e4 <ResetUartORE+0x34>)
 80079cc:	6812      	ldr	r2, [r2, #0]
 80079ce:	6213      	str	r3, [r2, #32]
#endif
}
 80079d0:	4770      	bx	lr
 80079d2:	46c0      	nop			; (mov r8, r8)
 80079d4:	20006f18 	.word	0x20006f18
 80079d8:	20007010 	.word	0x20007010
 80079dc:	20006df0 	.word	0x20006df0
 80079e0:	20006ea8 	.word	0x20006ea8
 80079e4:	20006f98 	.word	0x20006f98

080079e8 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	000d      	movs	r5, r1
 80079ec:	0006      	movs	r6, r0
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80079ee:	4c25      	ldr	r4, [pc, #148]	; (8007a84 <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 80079f0:	f009 fde4 	bl	80115bc <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80079f4:	4924      	ldr	r1, [pc, #144]	; (8007a88 <EE_VerifyPageFullWriteVariable+0xa0>)
 80079f6:	880a      	ldrh	r2, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80079f8:	8823      	ldrh	r3, [r4, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80079fa:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80079fc:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d105      	bne.n	8007a0e <EE_VerifyPageFullWriteVariable+0x26>
				if(PageStatusA == RECEIVE_DATA){
 8007a02:	4b22      	ldr	r3, [pc, #136]	; (8007a8c <EE_VerifyPageFullWriteVariable+0xa4>)
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d007      	beq.n	8007a18 <EE_VerifyPageFullWriteVariable+0x30>
 8007a08:	4a21      	ldr	r2, [pc, #132]	; (8007a90 <EE_VerifyPageFullWriteVariable+0xa8>)
 8007a0a:	0023      	movs	r3, r4
 8007a0c:	e007      	b.n	8007a1e <EE_VerifyPageFullWriteVariable+0x36>
			else if(PageStatusA == VALID_PAGE){
 8007a0e:	2a00      	cmp	r2, #0
 8007a10:	d122      	bne.n	8007a58 <EE_VerifyPageFullWriteVariable+0x70>
				if(PageStatusB == RECEIVE_DATA){
 8007a12:	4a1e      	ldr	r2, [pc, #120]	; (8007a8c <EE_VerifyPageFullWriteVariable+0xa4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d0f7      	beq.n	8007a08 <EE_VerifyPageFullWriteVariable+0x20>
 8007a18:	000c      	movs	r4, r1
 8007a1a:	000b      	movs	r3, r1
 8007a1c:	4a1d      	ldr	r2, [pc, #116]	; (8007a94 <EE_VerifyPageFullWriteVariable+0xac>)
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3301      	adds	r3, #1
 8007a22:	d103      	bne.n	8007a2c <EE_VerifyPageFullWriteVariable+0x44>
 8007a24:	e009      	b.n	8007a3a <EE_VerifyPageFullWriteVariable+0x52>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	d006      	beq.n	8007a3a <EE_VerifyPageFullWriteVariable+0x52>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 8007a2c:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 8007a2e:	42a2      	cmp	r2, r4
 8007a30:	d8f9      	bhi.n	8007a26 <EE_VerifyPageFullWriteVariable+0x3e>
		}
	}
	
	HAL_FLASH_Lock();
 8007a32:	f009 fdd5 	bl	80115e0 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 8007a36:	2080      	movs	r0, #128	; 0x80
}
 8007a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 8007a3a:	002a      	movs	r2, r5
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	0021      	movs	r1, r4
 8007a40:	2001      	movs	r0, #1
 8007a42:	f009 fe1b 	bl	801167c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a46:	4814      	ldr	r0, [pc, #80]	; (8007a98 <EE_VerifyPageFullWriteVariable+0xb0>)
 8007a48:	f009 fdd4 	bl	80115f4 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d005      	beq.n	8007a5c <EE_VerifyPageFullWriteVariable+0x74>
			return pFlash.ErrorCode;
 8007a50:	4b12      	ldr	r3, [pc, #72]	; (8007a9c <EE_VerifyPageFullWriteVariable+0xb4>)
 8007a52:	69d8      	ldr	r0, [r3, #28]
 8007a54:	b280      	uxth	r0, r0
 8007a56:	e7ef      	b.n	8007a38 <EE_VerifyPageFullWriteVariable+0x50>
		return NO_VALID_PAGE;
 8007a58:	20ab      	movs	r0, #171	; 0xab
 8007a5a:	e7ed      	b.n	8007a38 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a5c:	2701      	movs	r7, #1
 8007a5e:	4d10      	ldr	r5, [pc, #64]	; (8007aa0 <EE_VerifyPageFullWriteVariable+0xb8>)
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007a60:	1ca1      	adds	r1, r4, #2
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a62:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007a64:	0032      	movs	r2, r6
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a66:	43bb      	bics	r3, r7
 8007a68:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007a6a:	2001      	movs	r0, #1
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f009 fe05 	bl	801167c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a72:	4809      	ldr	r0, [pc, #36]	; (8007a98 <EE_VerifyPageFullWriteVariable+0xb0>)
 8007a74:	f009 fdbe 	bl	80115f4 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d1e9      	bne.n	8007a50 <EE_VerifyPageFullWriteVariable+0x68>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a7c:	692b      	ldr	r3, [r5, #16]
 8007a7e:	43bb      	bics	r3, r7
 8007a80:	612b      	str	r3, [r5, #16]
 8007a82:	e7e5      	b.n	8007a50 <EE_VerifyPageFullWriteVariable+0x68>
 8007a84:	0801f000 	.word	0x0801f000
 8007a88:	0801e000 	.word	0x0801e000
 8007a8c:	0000eeee 	.word	0x0000eeee
 8007a90:	0801fffe 	.word	0x0801fffe
 8007a94:	0801effe 	.word	0x0801effe
 8007a98:	0000c350 	.word	0x0000c350
 8007a9c:	200071b8 	.word	0x200071b8
 8007aa0:	40022000 	.word	0x40022000

08007aa4 <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007aa4:	4b11      	ldr	r3, [pc, #68]	; (8007aec <EE_ReadVariable+0x48>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 8007aa6:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007aa8:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007aaa:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <EE_ReadVariable+0x4c>)
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 8007ab0:	2a00      	cmp	r2, #0
 8007ab2:	d005      	beq.n	8007ac0 <EE_ReadVariable+0x1c>
			else if(PageStatusB == VALID_PAGE){
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d117      	bne.n	8007ae8 <EE_ReadVariable+0x44>
 8007ab8:	4b0e      	ldr	r3, [pc, #56]	; (8007af4 <EE_ReadVariable+0x50>)
 8007aba:	4c0f      	ldr	r4, [pc, #60]	; (8007af8 <EE_ReadVariable+0x54>)
 8007abc:	001a      	movs	r2, r3
 8007abe:	e002      	b.n	8007ac6 <EE_ReadVariable+0x22>
			if(PageStatusA == VALID_PAGE){
 8007ac0:	4b0e      	ldr	r3, [pc, #56]	; (8007afc <EE_ReadVariable+0x58>)
 8007ac2:	4c0f      	ldr	r4, [pc, #60]	; (8007b00 <EE_ReadVariable+0x5c>)
 8007ac4:	001a      	movs	r2, r3
		AddressValue =(*(__IO uint16_t* )Address);
 8007ac6:	8812      	ldrh	r2, [r2, #0]
		if(AddressValue == VirtAddress){
 8007ac8:	4290      	cmp	r0, r2
 8007aca:	d103      	bne.n	8007ad4 <EE_ReadVariable+0x30>
 8007acc:	e007      	b.n	8007ade <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 8007ace:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 8007ad0:	4282      	cmp	r2, r0
 8007ad2:	d004      	beq.n	8007ade <EE_ReadVariable+0x3a>
			Address =Address - 4;
 8007ad4:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 8007ad6:	42a3      	cmp	r3, r4
 8007ad8:	d8f9      	bhi.n	8007ace <EE_ReadVariable+0x2a>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 8007ada:	2001      	movs	r0, #1
}
 8007adc:	bd10      	pop	{r4, pc}
			*Data =(*(__IO uint16_t* )(Address - 2));
 8007ade:	3b02      	subs	r3, #2
 8007ae0:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 8007ae2:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 8007ae4:	800b      	strh	r3, [r1, #0]
			break;
 8007ae6:	e7f9      	b.n	8007adc <EE_ReadVariable+0x38>
		return NO_VALID_PAGE;
 8007ae8:	20ab      	movs	r0, #171	; 0xab
 8007aea:	e7f7      	b.n	8007adc <EE_ReadVariable+0x38>
 8007aec:	0801e000 	.word	0x0801e000
 8007af0:	0801f000 	.word	0x0801f000
 8007af4:	0801fffe 	.word	0x0801fffe
 8007af8:	0801f002 	.word	0x0801f002
 8007afc:	0801effe 	.word	0x0801effe
 8007b00:	0801e002 	.word	0x0801e002

08007b04 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b06:	46d6      	mov	lr, sl
 8007b08:	4646      	mov	r6, r8
 8007b0a:	464f      	mov	r7, r9
 8007b0c:	000c      	movs	r4, r1
 8007b0e:	b5c0      	push	{r6, r7, lr}
 8007b10:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 8007b12:	f009 fd53 	bl	80115bc <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007b16:	0021      	movs	r1, r4
 8007b18:	0030      	movs	r0, r6
 8007b1a:	f7ff ff65 	bl	80079e8 <EE_VerifyPageFullWriteVariable>
 8007b1e:	0005      	movs	r5, r0
	if(Status == PAGE_FULL){
 8007b20:	2880      	cmp	r0, #128	; 0x80
 8007b22:	d007      	beq.n	8007b34 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 8007b24:	f009 fd5c 	bl	80115e0 <HAL_FLASH_Lock>
}
 8007b28:	0028      	movs	r0, r5
 8007b2a:	bc1c      	pop	{r2, r3, r4}
 8007b2c:	4690      	mov	r8, r2
 8007b2e:	4699      	mov	r9, r3
 8007b30:	46a2      	mov	sl, r4
 8007b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 8007b34:	f009 fd42 	bl	80115bc <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007b38:	4935      	ldr	r1, [pc, #212]	; (8007c10 <EE_WriteVariable+0x10c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007b3a:	4a36      	ldr	r2, [pc, #216]	; (8007c14 <EE_WriteVariable+0x110>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007b3c:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007b3e:	8813      	ldrh	r3, [r2, #0]
 8007b40:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d013      	beq.n	8007b6e <EE_WriteVariable+0x6a>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 8007b46:	352b      	adds	r5, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1eb      	bne.n	8007b24 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 8007b4c:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007b4e:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 8007b50:	4a31      	ldr	r2, [pc, #196]	; (8007c18 <EE_WriteVariable+0x114>)
 8007b52:	2300      	movs	r3, #0
 8007b54:	4641      	mov	r1, r8
 8007b56:	2001      	movs	r0, #1
 8007b58:	f009 fd90 	bl	801167c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b5c:	482f      	ldr	r0, [pc, #188]	; (8007c1c <EE_WriteVariable+0x118>)
 8007b5e:	f009 fd49 	bl	80115f4 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d006      	beq.n	8007b74 <EE_WriteVariable+0x70>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
		return pFlash.ErrorCode;
 8007b66:	4b2e      	ldr	r3, [pc, #184]	; (8007c20 <EE_WriteVariable+0x11c>)
 8007b68:	69dd      	ldr	r5, [r3, #28]
 8007b6a:	b2ad      	uxth	r5, r5
 8007b6c:	e7da      	b.n	8007b24 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007b6e:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007b70:	4690      	mov	r8, r2
 8007b72:	e7ed      	b.n	8007b50 <EE_WriteVariable+0x4c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b74:	2101      	movs	r1, #1
 8007b76:	4a2b      	ldr	r2, [pc, #172]	; (8007c24 <EE_WriteVariable+0x120>)
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007b78:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b7a:	6913      	ldr	r3, [r2, #16]
 8007b7c:	438b      	bics	r3, r1
 8007b7e:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007b80:	0021      	movs	r1, r4
 8007b82:	f7ff ff31 	bl	80079e8 <EE_VerifyPageFullWriteVariable>
 8007b86:	1e05      	subs	r5, r0, #0
	if(EepromStatus != HAL_OK){
 8007b88:	d1cc      	bne.n	8007b24 <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007b8a:	4b27      	ldr	r3, [pc, #156]	; (8007c28 <EE_WriteVariable+0x124>)
 8007b8c:	2401      	movs	r4, #1
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b8e:	4f27      	ldr	r7, [pc, #156]	; (8007c2c <EE_WriteVariable+0x128>)
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007b90:	469a      	mov	sl, r3
 8007b92:	e003      	b.n	8007b9c <EE_WriteVariable+0x98>
 8007b94:	3401      	adds	r4, #1
 8007b96:	b2a4      	uxth	r4, r4
 8007b98:	4554      	cmp	r4, sl
 8007b9a:	d00f      	beq.n	8007bbc <EE_WriteVariable+0xb8>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 8007b9c:	42a6      	cmp	r6, r4
 8007b9e:	d0f9      	beq.n	8007b94 <EE_WriteVariable+0x90>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007ba0:	0039      	movs	r1, r7
 8007ba2:	0020      	movs	r0, r4
 8007ba4:	f7ff ff7e 	bl	8007aa4 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 8007ba8:	2801      	cmp	r0, #1
 8007baa:	d0f3      	beq.n	8007b94 <EE_WriteVariable+0x90>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007bac:	8839      	ldrh	r1, [r7, #0]
 8007bae:	0020      	movs	r0, r4
 8007bb0:	f7ff ff1a 	bl	80079e8 <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d0ed      	beq.n	8007b94 <EE_WriteVariable+0x90>
 8007bb8:	0005      	movs	r5, r0
 8007bba:	e7b3      	b.n	8007b24 <EE_WriteVariable+0x20>
	FLASH_PageErase(OldPageAddress);
 8007bbc:	4648      	mov	r0, r9
 8007bbe:	f009 fe2d 	bl	801181c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bc2:	4816      	ldr	r0, [pc, #88]	; (8007c1c <EE_WriteVariable+0x118>)
 8007bc4:	f009 fd16 	bl	80115f4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d1cc      	bne.n	8007b66 <EE_WriteVariable+0x62>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007bcc:	2080      	movs	r0, #128	; 0x80
 8007bce:	0100      	lsls	r0, r0, #4
 8007bd0:	4448      	add	r0, r9
 8007bd2:	f009 fe23 	bl	801181c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bd6:	4811      	ldr	r0, [pc, #68]	; (8007c1c <EE_WriteVariable+0x118>)
 8007bd8:	f009 fd0c 	bl	80115f4 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d1c2      	bne.n	8007b66 <EE_WriteVariable+0x62>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007be0:	2202      	movs	r2, #2
 8007be2:	4c10      	ldr	r4, [pc, #64]	; (8007c24 <EE_WriteVariable+0x120>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007be4:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007be6:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007be8:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007bea:	4393      	bics	r3, r2
 8007bec:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f009 fd43 	bl	801167c <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bf6:	4809      	ldr	r0, [pc, #36]	; (8007c1c <EE_WriteVariable+0x118>)
 8007bf8:	f009 fcfc 	bl	80115f4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d1b2      	bne.n	8007b66 <EE_WriteVariable+0x62>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c00:	2201      	movs	r2, #1
 8007c02:	6923      	ldr	r3, [r4, #16]
 8007c04:	4393      	bics	r3, r2
 8007c06:	6123      	str	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
 8007c08:	f009 fcea 	bl	80115e0 <HAL_FLASH_Lock>
 8007c0c:	e78a      	b.n	8007b24 <EE_WriteVariable+0x20>
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	0801e000 	.word	0x0801e000
 8007c14:	0801f000 	.word	0x0801f000
 8007c18:	0000eeee 	.word	0x0000eeee
 8007c1c:	0000c350 	.word	0x0000c350
 8007c20:	200071b8 	.word	0x200071b8
 8007c24:	40022000 	.word	0x40022000
 8007c28:	00000401 	.word	0x00000401
 8007c2c:	20001700 	.word	0x20001700

08007c30 <EE_Format>:
uint16_t EE_Format(void){
 8007c30:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 8007c32:	f009 fcc3 	bl	80115bc <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007c36:	481f      	ldr	r0, [pc, #124]	; (8007cb4 <EE_Format+0x84>)
 8007c38:	f009 fdf0 	bl	801181c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c3c:	481e      	ldr	r0, [pc, #120]	; (8007cb8 <EE_Format+0x88>)
 8007c3e:	f009 fcd9 	bl	80115f4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d003      	beq.n	8007c4e <EE_Format+0x1e>
			return pFlash.ErrorCode;
 8007c46:	4b1d      	ldr	r3, [pc, #116]	; (8007cbc <EE_Format+0x8c>)
 8007c48:	69d8      	ldr	r0, [r3, #28]
 8007c4a:	b280      	uxth	r0, r0
}
 8007c4c:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007c4e:	481c      	ldr	r0, [pc, #112]	; (8007cc0 <EE_Format+0x90>)
 8007c50:	f009 fde4 	bl	801181c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c54:	4818      	ldr	r0, [pc, #96]	; (8007cb8 <EE_Format+0x88>)
 8007c56:	f009 fccd 	bl	80115f4 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d1f3      	bne.n	8007c46 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c5e:	2202      	movs	r2, #2
 8007c60:	4c18      	ldr	r4, [pc, #96]	; (8007cc4 <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c62:	4914      	ldr	r1, [pc, #80]	; (8007cb4 <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c64:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c66:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c68:	4393      	bics	r3, r2
 8007c6a:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f009 fd04 	bl	801167c <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c74:	4810      	ldr	r0, [pc, #64]	; (8007cb8 <EE_Format+0x88>)
 8007c76:	f009 fcbd 	bl	80115f4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d1e3      	bne.n	8007c46 <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c7e:	2501      	movs	r5, #1
 8007c80:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c82:	4811      	ldr	r0, [pc, #68]	; (8007cc8 <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c84:	43ab      	bics	r3, r5
 8007c86:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c88:	f009 fdc8 	bl	801181c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c8c:	480a      	ldr	r0, [pc, #40]	; (8007cb8 <EE_Format+0x88>)
 8007c8e:	f009 fcb1 	bl	80115f4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d1d7      	bne.n	8007c46 <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c96:	480d      	ldr	r0, [pc, #52]	; (8007ccc <EE_Format+0x9c>)
 8007c98:	f009 fdc0 	bl	801181c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c9c:	4806      	ldr	r0, [pc, #24]	; (8007cb8 <EE_Format+0x88>)
 8007c9e:	f009 fca9 	bl	80115f4 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d1cf      	bne.n	8007c46 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007ca6:	6923      	ldr	r3, [r4, #16]
 8007ca8:	43ab      	bics	r3, r5
 8007caa:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 8007cac:	f009 fc98 	bl	80115e0 <HAL_FLASH_Lock>
	return FlashStatus;
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	e7cb      	b.n	8007c4c <EE_Format+0x1c>
 8007cb4:	0801e000 	.word	0x0801e000
 8007cb8:	0000c350 	.word	0x0000c350
 8007cbc:	200071b8 	.word	0x200071b8
 8007cc0:	0801e800 	.word	0x0801e800
 8007cc4:	40022000 	.word	0x40022000
 8007cc8:	0801f000 	.word	0x0801f000
 8007ccc:	0801f800 	.word	0x0801f800

08007cd0 <EE_Init>:
uint16_t EE_Init(void){
 8007cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cd2:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007cd4:	4c9d      	ldr	r4, [pc, #628]	; (8007f4c <EE_Init+0x27c>)
uint16_t EE_Init(void){
 8007cd6:	b500      	push	{lr}
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007cd8:	4d9d      	ldr	r5, [pc, #628]	; (8007f50 <EE_Init+0x280>)
	HAL_FLASH_Unlock();
 8007cda:	f009 fc6f 	bl	80115bc <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007cde:	8823      	ldrh	r3, [r4, #0]
	switch(PageStatusA){
 8007ce0:	499c      	ldr	r1, [pc, #624]	; (8007f54 <EE_Init+0x284>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007ce2:	882a      	ldrh	r2, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007ce4:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007ce6:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007ce8:	428b      	cmp	r3, r1
 8007cea:	d100      	bne.n	8007cee <EE_Init+0x1e>
 8007cec:	e06f      	b.n	8007dce <EE_Init+0xfe>
 8007cee:	489a      	ldr	r0, [pc, #616]	; (8007f58 <EE_Init+0x288>)
 8007cf0:	4283      	cmp	r3, r0
 8007cf2:	d05c      	beq.n	8007dae <EE_Init+0xde>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00e      	beq.n	8007d16 <EE_Init+0x46>
			FlashStatus =EE_Format();
 8007cf8:	f7ff ff9a 	bl	8007c30 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cfc:	4897      	ldr	r0, [pc, #604]	; (8007f5c <EE_Init+0x28c>)
 8007cfe:	f009 fc79 	bl	80115f4 <FLASH_WaitForLastOperation>
 8007d02:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 8007d04:	2d00      	cmp	r5, #0
 8007d06:	d102      	bne.n	8007d0e <EE_Init+0x3e>
	HAL_FLASH_Lock();
 8007d08:	f009 fc6a 	bl	80115e0 <HAL_FLASH_Lock>
	return HAL_OK;
 8007d0c:	2500      	movs	r5, #0
}
 8007d0e:	0028      	movs	r0, r5
 8007d10:	bc04      	pop	{r2}
 8007d12:	4690      	mov	r8, r2
 8007d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007d16:	2a00      	cmp	r2, #0
 8007d18:	d0ee      	beq.n	8007cf8 <EE_Init+0x28>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007d1a:	4282      	cmp	r2, r0
 8007d1c:	d100      	bne.n	8007d20 <EE_Init+0x50>
 8007d1e:	e103      	b.n	8007f28 <EE_Init+0x258>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007d20:	4b8f      	ldr	r3, [pc, #572]	; (8007f60 <EE_Init+0x290>)
	int16_t x =-1;
 8007d22:	2601      	movs	r6, #1
 8007d24:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007d26:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007d28:	4f8e      	ldr	r7, [pc, #568]	; (8007f64 <EE_Init+0x294>)
	int16_t x =-1;
 8007d2a:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007d2c:	883b      	ldrh	r3, [r7, #0]
 8007d2e:	b2a5      	uxth	r5, r4
 8007d30:	42ab      	cmp	r3, r5
 8007d32:	d100      	bne.n	8007d36 <EE_Init+0x66>
						x =VarIdx;
 8007d34:	b226      	sxth	r6, r4
					if(VarIdx != x){
 8007d36:	42b4      	cmp	r4, r6
 8007d38:	d010      	beq.n	8007d5c <EE_Init+0x8c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007d3a:	4641      	mov	r1, r8
 8007d3c:	0028      	movs	r0, r5
 8007d3e:	f7ff feb1 	bl	8007aa4 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007d42:	2801      	cmp	r0, #1
 8007d44:	d00a      	beq.n	8007d5c <EE_Init+0x8c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007d46:	4643      	mov	r3, r8
 8007d48:	0028      	movs	r0, r5
 8007d4a:	8819      	ldrh	r1, [r3, #0]
 8007d4c:	f7ff fe4c 	bl	80079e8 <EE_VerifyPageFullWriteVariable>
 8007d50:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d52:	4882      	ldr	r0, [pc, #520]	; (8007f5c <EE_Init+0x28c>)
 8007d54:	f009 fc4e 	bl	80115f4 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d1d8      	bne.n	8007d0e <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007d5c:	4b82      	ldr	r3, [pc, #520]	; (8007f68 <EE_Init+0x298>)
 8007d5e:	3401      	adds	r4, #1
 8007d60:	429c      	cmp	r4, r3
 8007d62:	d1e3      	bne.n	8007d2c <EE_Init+0x5c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007d64:	2200      	movs	r2, #0
 8007d66:	2300      	movs	r3, #0
 8007d68:	4979      	ldr	r1, [pc, #484]	; (8007f50 <EE_Init+0x280>)
 8007d6a:	2001      	movs	r0, #1
 8007d6c:	f009 fc86 	bl	801167c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d70:	487a      	ldr	r0, [pc, #488]	; (8007f5c <EE_Init+0x28c>)
 8007d72:	f009 fc3f 	bl	80115f4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d125      	bne.n	8007dc6 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	4c7b      	ldr	r4, [pc, #492]	; (8007f6c <EE_Init+0x29c>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007d7e:	4873      	ldr	r0, [pc, #460]	; (8007f4c <EE_Init+0x27c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007d80:	6923      	ldr	r3, [r4, #16]
 8007d82:	4393      	bics	r3, r2
 8007d84:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007d86:	f009 fd49 	bl	801181c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d8a:	4874      	ldr	r0, [pc, #464]	; (8007f5c <EE_Init+0x28c>)
 8007d8c:	f009 fc32 	bl	80115f4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d118      	bne.n	8007dc6 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007d94:	4876      	ldr	r0, [pc, #472]	; (8007f70 <EE_Init+0x2a0>)
 8007d96:	f009 fd41 	bl	801181c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d9a:	4870      	ldr	r0, [pc, #448]	; (8007f5c <EE_Init+0x28c>)
 8007d9c:	f009 fc2a 	bl	80115f4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d110      	bne.n	8007dc6 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007da4:	2202      	movs	r2, #2
 8007da6:	6923      	ldr	r3, [r4, #16]
 8007da8:	4393      	bics	r3, r2
 8007daa:	6123      	str	r3, [r4, #16]
 8007dac:	e7ac      	b.n	8007d08 <EE_Init+0x38>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007dae:	2a00      	cmp	r2, #0
 8007db0:	d07b      	beq.n	8007eaa <EE_Init+0x1da>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007db2:	428a      	cmp	r2, r1
 8007db4:	d100      	bne.n	8007db8 <EE_Init+0xe8>
 8007db6:	e08f      	b.n	8007ed8 <EE_Init+0x208>
				FlashStatus =EE_Format();
 8007db8:	f7ff ff3a 	bl	8007c30 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007dbc:	4867      	ldr	r0, [pc, #412]	; (8007f5c <EE_Init+0x28c>)
 8007dbe:	f009 fc19 	bl	80115f4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d0a0      	beq.n	8007d08 <EE_Init+0x38>
						return pFlash.ErrorCode;
 8007dc6:	4b6b      	ldr	r3, [pc, #428]	; (8007f74 <EE_Init+0x2a4>)
 8007dc8:	69dd      	ldr	r5, [r3, #28]
 8007dca:	b2ad      	uxth	r5, r5
 8007dcc:	e79f      	b.n	8007d0e <EE_Init+0x3e>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	d143      	bne.n	8007e5a <EE_Init+0x18a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007dd2:	4b63      	ldr	r3, [pc, #396]	; (8007f60 <EE_Init+0x290>)
	int16_t x =-1;
 8007dd4:	2601      	movs	r6, #1
 8007dd6:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007dd8:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007dda:	4f67      	ldr	r7, [pc, #412]	; (8007f78 <EE_Init+0x2a8>)
	int16_t x =-1;
 8007ddc:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007dde:	883b      	ldrh	r3, [r7, #0]
 8007de0:	b2a5      	uxth	r5, r4
 8007de2:	42ab      	cmp	r3, r5
 8007de4:	d100      	bne.n	8007de8 <EE_Init+0x118>
						x =VarIdx;
 8007de6:	b226      	sxth	r6, r4
					if(VarIdx != x){
 8007de8:	42b4      	cmp	r4, r6
 8007dea:	d011      	beq.n	8007e10 <EE_Init+0x140>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007dec:	4641      	mov	r1, r8
 8007dee:	0028      	movs	r0, r5
 8007df0:	f7ff fe58 	bl	8007aa4 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007df4:	2801      	cmp	r0, #1
 8007df6:	d00b      	beq.n	8007e10 <EE_Init+0x140>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007df8:	4643      	mov	r3, r8
 8007dfa:	0028      	movs	r0, r5
 8007dfc:	8819      	ldrh	r1, [r3, #0]
 8007dfe:	f7ff fdf3 	bl	80079e8 <EE_VerifyPageFullWriteVariable>
 8007e02:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e04:	4855      	ldr	r0, [pc, #340]	; (8007f5c <EE_Init+0x28c>)
 8007e06:	f009 fbf5 	bl	80115f4 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d000      	beq.n	8007e10 <EE_Init+0x140>
 8007e0e:	e77e      	b.n	8007d0e <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007e10:	4b55      	ldr	r3, [pc, #340]	; (8007f68 <EE_Init+0x298>)
 8007e12:	3401      	adds	r4, #1
 8007e14:	429c      	cmp	r4, r3
 8007e16:	d1e2      	bne.n	8007dde <EE_Init+0x10e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	494b      	ldr	r1, [pc, #300]	; (8007f4c <EE_Init+0x27c>)
 8007e1e:	2001      	movs	r0, #1
 8007e20:	f009 fc2c 	bl	801167c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e24:	484d      	ldr	r0, [pc, #308]	; (8007f5c <EE_Init+0x28c>)
 8007e26:	f009 fbe5 	bl	80115f4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d1cb      	bne.n	8007dc6 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007e2e:	2201      	movs	r2, #1
 8007e30:	4c4e      	ldr	r4, [pc, #312]	; (8007f6c <EE_Init+0x29c>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007e32:	4847      	ldr	r0, [pc, #284]	; (8007f50 <EE_Init+0x280>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007e34:	6923      	ldr	r3, [r4, #16]
 8007e36:	4393      	bics	r3, r2
 8007e38:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007e3a:	f009 fcef 	bl	801181c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e3e:	4847      	ldr	r0, [pc, #284]	; (8007f5c <EE_Init+0x28c>)
 8007e40:	f009 fbd8 	bl	80115f4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d1be      	bne.n	8007dc6 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007e48:	484c      	ldr	r0, [pc, #304]	; (8007f7c <EE_Init+0x2ac>)
 8007e4a:	f009 fce7 	bl	801181c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e4e:	4843      	ldr	r0, [pc, #268]	; (8007f5c <EE_Init+0x28c>)
 8007e50:	f009 fbd0 	bl	80115f4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d0a5      	beq.n	8007da4 <EE_Init+0xd4>
 8007e58:	e7b5      	b.n	8007dc6 <EE_Init+0xf6>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007e5a:	4b3f      	ldr	r3, [pc, #252]	; (8007f58 <EE_Init+0x288>)
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d1ab      	bne.n	8007db8 <EE_Init+0xe8>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007e60:	0028      	movs	r0, r5
 8007e62:	f009 fcdb 	bl	801181c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e66:	483d      	ldr	r0, [pc, #244]	; (8007f5c <EE_Init+0x28c>)
 8007e68:	f009 fbc4 	bl	80115f4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d1aa      	bne.n	8007dc6 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007e70:	4842      	ldr	r0, [pc, #264]	; (8007f7c <EE_Init+0x2ac>)
 8007e72:	f009 fcd3 	bl	801181c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e76:	4839      	ldr	r0, [pc, #228]	; (8007f5c <EE_Init+0x28c>)
 8007e78:	f009 fbbc 	bl	80115f4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d1a2      	bne.n	8007dc6 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007e80:	2202      	movs	r2, #2
 8007e82:	4d3a      	ldr	r5, [pc, #232]	; (8007f6c <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007e84:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007e86:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007e88:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007e8a:	4393      	bics	r3, r2
 8007e8c:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2300      	movs	r3, #0
 8007e92:	f009 fbf3 	bl	801167c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e96:	4831      	ldr	r0, [pc, #196]	; (8007f5c <EE_Init+0x28c>)
 8007e98:	f009 fbac 	bl	80115f4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d192      	bne.n	8007dc6 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	692b      	ldr	r3, [r5, #16]
 8007ea4:	4393      	bics	r3, r2
 8007ea6:	612b      	str	r3, [r5, #16]
 8007ea8:	e72e      	b.n	8007d08 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007eaa:	0020      	movs	r0, r4
 8007eac:	f009 fcb6 	bl	801181c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007eb0:	482a      	ldr	r0, [pc, #168]	; (8007f5c <EE_Init+0x28c>)
 8007eb2:	f009 fb9f 	bl	80115f4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d185      	bne.n	8007dc6 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007eba:	482d      	ldr	r0, [pc, #180]	; (8007f70 <EE_Init+0x2a0>)
 8007ebc:	f009 fcae 	bl	801181c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ec0:	4826      	ldr	r0, [pc, #152]	; (8007f5c <EE_Init+0x28c>)
 8007ec2:	f009 fb97 	bl	80115f4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d000      	beq.n	8007ecc <EE_Init+0x1fc>
 8007eca:	e77c      	b.n	8007dc6 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007ecc:	2102      	movs	r1, #2
 8007ece:	4a27      	ldr	r2, [pc, #156]	; (8007f6c <EE_Init+0x29c>)
 8007ed0:	6913      	ldr	r3, [r2, #16]
 8007ed2:	438b      	bics	r3, r1
 8007ed4:	6113      	str	r3, [r2, #16]
 8007ed6:	e717      	b.n	8007d08 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007ed8:	0020      	movs	r0, r4
 8007eda:	f009 fc9f 	bl	801181c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ede:	481f      	ldr	r0, [pc, #124]	; (8007f5c <EE_Init+0x28c>)
 8007ee0:	f009 fb88 	bl	80115f4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d000      	beq.n	8007eea <EE_Init+0x21a>
 8007ee8:	e76d      	b.n	8007dc6 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007eea:	4821      	ldr	r0, [pc, #132]	; (8007f70 <EE_Init+0x2a0>)
 8007eec:	f009 fc96 	bl	801181c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ef0:	481a      	ldr	r0, [pc, #104]	; (8007f5c <EE_Init+0x28c>)
 8007ef2:	f009 fb7f 	bl	80115f4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d000      	beq.n	8007efc <EE_Init+0x22c>
 8007efa:	e764      	b.n	8007dc6 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007efc:	2202      	movs	r2, #2
 8007efe:	4c1b      	ldr	r4, [pc, #108]	; (8007f6c <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007f00:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007f02:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007f04:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007f06:	4393      	bics	r3, r2
 8007f08:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	f009 fbb5 	bl	801167c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f12:	4812      	ldr	r0, [pc, #72]	; (8007f5c <EE_Init+0x28c>)
 8007f14:	f009 fb6e 	bl	80115f4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d000      	beq.n	8007f1e <EE_Init+0x24e>
 8007f1c:	e753      	b.n	8007dc6 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007f1e:	2201      	movs	r2, #1
 8007f20:	6923      	ldr	r3, [r4, #16]
 8007f22:	4393      	bics	r3, r2
 8007f24:	6123      	str	r3, [r4, #16]
 8007f26:	e6ef      	b.n	8007d08 <EE_Init+0x38>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007f28:	0028      	movs	r0, r5
 8007f2a:	f009 fc77 	bl	801181c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f2e:	480b      	ldr	r0, [pc, #44]	; (8007f5c <EE_Init+0x28c>)
 8007f30:	f009 fb60 	bl	80115f4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d000      	beq.n	8007f3a <EE_Init+0x26a>
 8007f38:	e745      	b.n	8007dc6 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007f3a:	4810      	ldr	r0, [pc, #64]	; (8007f7c <EE_Init+0x2ac>)
 8007f3c:	f009 fc6e 	bl	801181c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f40:	4806      	ldr	r0, [pc, #24]	; (8007f5c <EE_Init+0x28c>)
 8007f42:	f009 fb57 	bl	80115f4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d0c0      	beq.n	8007ecc <EE_Init+0x1fc>
 8007f4a:	e73c      	b.n	8007dc6 <EE_Init+0xf6>
 8007f4c:	0801e000 	.word	0x0801e000
 8007f50:	0801f000 	.word	0x0801f000
 8007f54:	0000eeee 	.word	0x0000eeee
 8007f58:	0000ffff 	.word	0x0000ffff
 8007f5c:	0000c350 	.word	0x0000c350
 8007f60:	20001700 	.word	0x20001700
 8007f64:	0801f006 	.word	0x0801f006
 8007f68:	00000401 	.word	0x00000401
 8007f6c:	40022000 	.word	0x40022000
 8007f70:	0801e800 	.word	0x0801e800
 8007f74:	200071b8 	.word	0x200071b8
 8007f78:	0801e006 	.word	0x0801e006
 8007f7c:	0801f800 	.word	0x0801f800

08007f80 <StartDefaultTask>:
}

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void *argument){
 8007f80:	b570      	push	{r4, r5, r6, lr}
 8007f82:	4c1d      	ldr	r4, [pc, #116]	; (8007ff8 <StartDefaultTask+0x78>)
 8007f84:	4d1d      	ldr	r5, [pc, #116]	; (8007ffc <StartDefaultTask+0x7c>)
 8007f86:	4e1e      	ldr	r6, [pc, #120]	; (8008000 <StartDefaultTask+0x80>)
 8007f88:	e00d      	b.n	8007fa6 <StartDefaultTask+0x26>
	
	/* Infinite loop */
	for(;;){
		/* Switch indicator LED according to mode */
		switch(indMode){
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d022      	beq.n	8007fd4 <StartDefaultTask+0x54>
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d029      	beq.n	8007fe6 <StartDefaultTask+0x66>
				break;
				
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8007f92:	f000 fe65 	bl	8008c60 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007f96:	f7fd fc6f 	bl	8005878 <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)
 8007f9a:	782b      	ldrb	r3, [r5, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d100      	bne.n	8007fa2 <StartDefaultTask+0x22>
			delayButtonStateReset = false;
 8007fa0:	7033      	strb	r3, [r6, #0]
		
		taskYIELD();
 8007fa2:	f007 ff85 	bl	800feb0 <vPortYield>
		switch(indMode){
 8007fa6:	7823      	ldrb	r3, [r4, #0]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d1ee      	bne.n	8007f8a <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 8007fac:	2180      	movs	r1, #128	; 0x80
 8007fae:	2090      	movs	r0, #144	; 0x90
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	05c0      	lsls	r0, r0, #23
 8007fb4:	0109      	lsls	r1, r1, #4
 8007fb6:	f009 fde3 	bl	8011b80 <HAL_GPIO_WritePin>
 8007fba:	2064      	movs	r0, #100	; 0x64
				RTOS_IND_blink(30);
 8007fbc:	f006 f940 	bl	800e240 <osDelay>
 8007fc0:	2180      	movs	r1, #128	; 0x80
 8007fc2:	2090      	movs	r0, #144	; 0x90
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	0109      	lsls	r1, r1, #4
 8007fc8:	05c0      	lsls	r0, r0, #23
 8007fca:	f009 fdd9 	bl	8011b80 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	7023      	strb	r3, [r4, #0]
				break;
 8007fd2:	e7de      	b.n	8007f92 <StartDefaultTask+0x12>
				RTOS_IND_blink(30);
 8007fd4:	2180      	movs	r1, #128	; 0x80
 8007fd6:	2090      	movs	r0, #144	; 0x90
 8007fd8:	2201      	movs	r2, #1
 8007fda:	05c0      	lsls	r0, r0, #23
 8007fdc:	0109      	lsls	r1, r1, #4
 8007fde:	f009 fdcf 	bl	8011b80 <HAL_GPIO_WritePin>
 8007fe2:	201e      	movs	r0, #30
 8007fe4:	e7ea      	b.n	8007fbc <StartDefaultTask+0x3c>
				RTOS_IND_blink(200);
 8007fe6:	2180      	movs	r1, #128	; 0x80
 8007fe8:	2090      	movs	r0, #144	; 0x90
 8007fea:	2201      	movs	r2, #1
 8007fec:	05c0      	lsls	r0, r0, #23
 8007fee:	0109      	lsls	r1, r1, #4
 8007ff0:	f009 fdc6 	bl	8011b80 <HAL_GPIO_WritePin>
 8007ff4:	20c8      	movs	r0, #200	; 0xc8
 8007ff6:	e7e1      	b.n	8007fbc <StartDefaultTask+0x3c>
 8007ff8:	2000113e 	.word	0x2000113e
 8007ffc:	200017cb 	.word	0x200017cb
 8008000:	200017c0 	.word	0x200017c0

08008004 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void){
 8008004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008006:	46c6      	mov	lr, r8
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8008008:	26a0      	movs	r6, #160	; 0xa0
 800800a:	2400      	movs	r4, #0
 800800c:	2703      	movs	r7, #3
void MX_FREERTOS_Init(void){
 800800e:	b500      	push	{lr}
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8008010:	4d5a      	ldr	r5, [pc, #360]	; (800817c <MX_FREERTOS_Init+0x178>)
void MX_FREERTOS_Init(void){
 8008012:	b08e      	sub	sp, #56	; 0x38
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8008014:	0076      	lsls	r6, r6, #1
 8008016:	9501      	str	r5, [sp, #4]
 8008018:	9700      	str	r7, [sp, #0]
 800801a:	0032      	movs	r2, r6
 800801c:	9403      	str	r4, [sp, #12]
 800801e:	9402      	str	r4, [sp, #8]
 8008020:	2300      	movs	r3, #0
 8008022:	4957      	ldr	r1, [pc, #348]	; (8008180 <MX_FREERTOS_Init+0x17c>)
 8008024:	4857      	ldr	r0, [pc, #348]	; (8008184 <MX_FREERTOS_Init+0x180>)
 8008026:	f007 f813 	bl	800f050 <xTaskGenericCreate>
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 800802a:	1d2b      	adds	r3, r5, #4
 800802c:	9301      	str	r3, [sp, #4]
 800802e:	9700      	str	r7, [sp, #0]
 8008030:	0032      	movs	r2, r6
 8008032:	9403      	str	r4, [sp, #12]
 8008034:	9402      	str	r4, [sp, #8]
 8008036:	2300      	movs	r3, #0
 8008038:	4953      	ldr	r1, [pc, #332]	; (8008188 <MX_FREERTOS_Init+0x184>)
 800803a:	4854      	ldr	r0, [pc, #336]	; (800818c <MX_FREERTOS_Init+0x188>)
 800803c:	f007 f808 	bl	800f050 <xTaskGenericCreate>
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8008040:	002b      	movs	r3, r5
 8008042:	3308      	adds	r3, #8
 8008044:	0032      	movs	r2, r6
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	9700      	str	r7, [sp, #0]
 800804a:	2300      	movs	r3, #0
 800804c:	4950      	ldr	r1, [pc, #320]	; (8008190 <MX_FREERTOS_Init+0x18c>)
 800804e:	9403      	str	r4, [sp, #12]
 8008050:	9402      	str	r4, [sp, #8]
 8008052:	4850      	ldr	r0, [pc, #320]	; (8008194 <MX_FREERTOS_Init+0x190>)
 8008054:	f006 fffc 	bl	800f050 <xTaskGenericCreate>
	vRegisterCLICommands();
 8008058:	f7ff fb42 	bl	80076e0 <vRegisterCLICommands>
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 800805c:	002b      	movs	r3, r5
 800805e:	330c      	adds	r3, #12
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	9700      	str	r7, [sp, #0]
 8008064:	0032      	movs	r2, r6
 8008066:	9403      	str	r4, [sp, #12]
 8008068:	9402      	str	r4, [sp, #8]
 800806a:	2300      	movs	r3, #0
 800806c:	494a      	ldr	r1, [pc, #296]	; (8008198 <MX_FREERTOS_Init+0x194>)
 800806e:	484b      	ldr	r0, [pc, #300]	; (800819c <MX_FREERTOS_Init+0x198>)
 8008070:	f006 ffee 	bl	800f050 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8008074:	002b      	movs	r3, r5
 8008076:	3310      	adds	r3, #16
 8008078:	9301      	str	r3, [sp, #4]
 800807a:	2304      	movs	r3, #4
 800807c:	4f48      	ldr	r7, [pc, #288]	; (80081a0 <MX_FREERTOS_Init+0x19c>)
 800807e:	4698      	mov	r8, r3
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	0032      	movs	r2, r6
 8008084:	9403      	str	r4, [sp, #12]
 8008086:	9402      	str	r4, [sp, #8]
 8008088:	3b03      	subs	r3, #3
 800808a:	4946      	ldr	r1, [pc, #280]	; (80081a4 <MX_FREERTOS_Init+0x1a0>)
 800808c:	0038      	movs	r0, r7
 800808e:	f006 ffdf 	bl	800f050 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8008092:	002b      	movs	r3, r5
 8008094:	3314      	adds	r3, #20
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	4643      	mov	r3, r8
 800809a:	0032      	movs	r2, r6
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	9403      	str	r4, [sp, #12]
 80080a0:	9402      	str	r4, [sp, #8]
 80080a2:	3b02      	subs	r3, #2
 80080a4:	4940      	ldr	r1, [pc, #256]	; (80081a8 <MX_FREERTOS_Init+0x1a4>)
 80080a6:	0038      	movs	r0, r7
 80080a8:	f006 ffd2 	bl	800f050 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 80080ac:	002b      	movs	r3, r5
 80080ae:	3318      	adds	r3, #24
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	4643      	mov	r3, r8
 80080b4:	0032      	movs	r2, r6
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	9403      	str	r4, [sp, #12]
 80080ba:	9402      	str	r4, [sp, #8]
 80080bc:	3b01      	subs	r3, #1
 80080be:	493b      	ldr	r1, [pc, #236]	; (80081ac <MX_FREERTOS_Init+0x1a8>)
 80080c0:	0038      	movs	r0, r7
 80080c2:	f006 ffc5 	bl	800f050 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 80080c6:	002b      	movs	r3, r5
 80080c8:	331c      	adds	r3, #28
 80080ca:	9301      	str	r3, [sp, #4]
 80080cc:	4643      	mov	r3, r8
 80080ce:	0032      	movs	r2, r6
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	9403      	str	r4, [sp, #12]
 80080d4:	9402      	str	r4, [sp, #8]
 80080d6:	4936      	ldr	r1, [pc, #216]	; (80081b0 <MX_FREERTOS_Init+0x1ac>)
 80080d8:	0038      	movs	r0, r7
 80080da:	f006 ffb9 	bl	800f050 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80080de:	4643      	mov	r3, r8
 80080e0:	3520      	adds	r5, #32
 80080e2:	0032      	movs	r2, r6
 80080e4:	9501      	str	r5, [sp, #4]
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	9403      	str	r4, [sp, #12]
 80080ea:	3301      	adds	r3, #1
 80080ec:	9402      	str	r4, [sp, #8]
 80080ee:	4931      	ldr	r1, [pc, #196]	; (80081b4 <MX_FREERTOS_Init+0x1b0>)
 80080f0:	0038      	movs	r0, r7
 80080f2:	f006 ffad 	bl	800f050 <xTaskGenericCreate>
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80080f6:	2101      	movs	r1, #1
 80080f8:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 80080fa:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80080fc:	f006 f8cc 	bl	800e298 <osSemaphoreCreate>
 8008100:	4e2d      	ldr	r6, [pc, #180]	; (80081b8 <MX_FREERTOS_Init+0x1b4>)
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8008102:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8008104:	6070      	str	r0, [r6, #4]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8008106:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 8008108:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 800810a:	f006 f8c5 	bl	800e298 <osSemaphoreCreate>
 800810e:	4d2b      	ldr	r5, [pc, #172]	; (80081bc <MX_FREERTOS_Init+0x1b8>)
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8008110:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8008112:	6068      	str	r0, [r5, #4]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8008114:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 8008116:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8008118:	f006 f8be 	bl	800e298 <osSemaphoreCreate>
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 800811c:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 800811e:	60b0      	str	r0, [r6, #8]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8008120:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 8008122:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8008124:	f006 f8b8 	bl	800e298 <osSemaphoreCreate>
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8008128:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 800812a:	60a8      	str	r0, [r5, #8]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800812c:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 800812e:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8008130:	f006 f8b2 	bl	800e298 <osSemaphoreCreate>
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8008134:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8008136:	60f0      	str	r0, [r6, #12]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8008138:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 800813a:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 800813c:	f006 f8ac 	bl	800e298 <osSemaphoreCreate>
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8008140:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8008142:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8008144:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 8008146:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8008148:	f006 f8a6 	bl	800e298 <osSemaphoreCreate>
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800814c:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 800814e:	6130      	str	r0, [r6, #16]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8008150:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 8008152:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8008154:	f006 f8a0 	bl	800e298 <osSemaphoreCreate>
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8008158:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800815a:	6128      	str	r0, [r5, #16]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800815c:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 800815e:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8008160:	f006 f89a 	bl	800e298 <osSemaphoreCreate>
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8008164:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8008166:	6170      	str	r0, [r6, #20]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8008168:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 800816a:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 800816c:	f006 f894 	bl	800e298 <osSemaphoreCreate>
 8008170:	6168      	str	r0, [r5, #20]
}
 8008172:	b00e      	add	sp, #56	; 0x38
 8008174:	bc04      	pop	{r2}
 8008176:	4690      	mov	r8, r2
 8008178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800817a:	46c0      	nop			; (mov r8, r8)
 800817c:	20001704 	.word	0x20001704
 8008180:	0801b630 	.word	0x0801b630
 8008184:	08007f81 	.word	0x08007f81
 8008188:	0801b63c 	.word	0x0801b63c
 800818c:	080099fd 	.word	0x080099fd
 8008190:	0801b648 	.word	0x0801b648
 8008194:	08013a85 	.word	0x08013a85
 8008198:	0801b654 	.word	0x0801b654
 800819c:	08005551 	.word	0x08005551
 80081a0:	08009de9 	.word	0x08009de9
 80081a4:	0801b65c 	.word	0x0801b65c
 80081a8:	0801b668 	.word	0x0801b668
 80081ac:	0801b674 	.word	0x0801b674
 80081b0:	0801b680 	.word	0x0801b680
 80081b4:	0801b68c 	.word	0x0801b68c
 80081b8:	20006d68 	.word	0x20006d68
 80081bc:	20006d4c 	.word	0x20006d4c

080081c0 <vMainConfigureTimerForRunTimeStats>:

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80081c0:	4b04      	ldr	r3, [pc, #16]	; (80081d4 <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 80081c2:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80081c4:	6818      	ldr	r0, [r3, #0]
 80081c6:	4904      	ldr	r1, [pc, #16]	; (80081d8 <vMainConfigureTimerForRunTimeStats+0x18>)
 80081c8:	f7f7 ffc2 	bl	8000150 <__udivsi3>
 80081cc:	4b03      	ldr	r3, [pc, #12]	; (80081dc <vMainConfigureTimerForRunTimeStats+0x1c>)
 80081ce:	6258      	str	r0, [r3, #36]	; 0x24
}
 80081d0:	bd10      	pop	{r4, pc}
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	200000b0 	.word	0x200000b0
 80081d8:	00002710 	.word	0x00002710
 80081dc:	20001704 	.word	0x20001704

080081e0 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80081e0:	21fa      	movs	r1, #250	; 0xfa
 80081e2:	4b0f      	ldr	r3, [pc, #60]	; (8008220 <ulMainGetRunTimeCounterValue+0x40>)
uint32_t ulMainGetRunTimeCounterValue(void){
 80081e4:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80081e6:	6818      	ldr	r0, [r3, #0]
 80081e8:	0089      	lsls	r1, r1, #2
 80081ea:	f7f7 ffb1 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80081ee:	4c0d      	ldr	r4, [pc, #52]	; (8008224 <ulMainGetRunTimeCounterValue+0x44>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80081f0:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80081f2:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 80081f4:	f006 ffd6 	bl	800f1a4 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 80081f8:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <ulMainGetRunTimeCounterValue+0x48>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	015b      	lsls	r3, r3, #5
 80081fe:	d50c      	bpl.n	800821a <ulMainGetRunTimeCounterValue+0x3a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008200:	6823      	ldr	r3, [r4, #0]
		ulTickCount++;
 8008202:	3001      	adds	r0, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008204:	1aed      	subs	r5, r5, r3
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8008206:	4b09      	ldr	r3, [pc, #36]	; (800822c <ulMainGetRunTimeCounterValue+0x4c>)
	ulReturn =(ulTickCount * 10UL);
 8008208:	0084      	lsls	r4, r0, #2
 800820a:	1824      	adds	r4, r4, r0
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 800820c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800820e:	0028      	movs	r0, r5
 8008210:	f7f7 ff9e 	bl	8000150 <__udivsi3>
	ulReturn =(ulTickCount * 10UL);
 8008214:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8008216:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8008218:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 800821a:	1bad      	subs	r5, r5, r6
 800821c:	e7f3      	b.n	8008206 <ulMainGetRunTimeCounterValue+0x26>
 800821e:	46c0      	nop			; (mov r8, r8)
 8008220:	200000b0 	.word	0x200000b0
 8008224:	e000e018 	.word	0xe000e018
 8008228:	e000ed04 	.word	0xe000ed04
 800822c:	20001704 	.word	0x20001704

08008230 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port){
}
 8008230:	4770      	bx	lr
 8008232:	46c0      	nop			; (mov r8, r8)

08008234 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 8008234:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 =0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if(BOS_initialized){
 8008236:	4d37      	ldr	r5, [pc, #220]	; (8008314 <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 8008238:	b08d      	sub	sp, #52	; 0x34
	if(BOS_initialized){
 800823a:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 800823c:	0006      	movs	r6, r0
 800823e:	000c      	movs	r4, r1
	if(BOS_initialized){
 8008240:	2b00      	cmp	r3, #0
 8008242:	d152      	bne.n	80082ea <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] =PORTBUTTON;
 8008244:	2204      	movs	r2, #4
 8008246:	4b34      	ldr	r3, [pc, #208]	; (8008318 <AddPortButton+0xe4>)
 8008248:	545a      	strb	r2, [r3, r1]
	if(BOS_initialized){
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 800824a:	250e      	movs	r5, #14
 800824c:	af04      	add	r7, sp, #16
 800824e:	446d      	add	r5, sp
 8008250:	002a      	movs	r2, r5
 8008252:	ab06      	add	r3, sp, #24
 8008254:	a905      	add	r1, sp, #20
 8008256:	9700      	str	r7, [sp, #0]
 8008258:	0020      	movs	r0, r4
 800825a:	f005 f999 	bl	800d590 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin =TX_Pin;
 800825e:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008260:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin =TX_Pin;
 8008262:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008264:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 8008266:	a907      	add	r1, sp, #28
 8008268:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800826a:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800826c:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800826e:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 8008270:	f009 fae6 	bl	8011840 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin =RX_Pin;
 8008274:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 8008276:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin =RX_Pin;
 8008278:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800827a:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 800827c:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800827e:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008280:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 8008282:	f009 fadd 	bl	8011840 <HAL_GPIO_Init>
	
	/* 4. Update button struct */
	button[port].type =buttonType;
 8008286:	00e2      	lsls	r2, r4, #3
 8008288:	4b24      	ldr	r3, [pc, #144]	; (800831c <AddPortButton+0xe8>)
 800828a:	1912      	adds	r2, r2, r4
 800828c:	189b      	adds	r3, r3, r2
	
	/* 5. Add to EEPROM if not already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 800828e:	0025      	movs	r5, r4
	button[port].type =buttonType;
 8008290:	705e      	strb	r6, [r3, #1]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008292:	2312      	movs	r3, #18
 8008294:	353a      	adds	r5, #58	; 0x3a
 8008296:	00ad      	lsls	r5, r5, #2
 8008298:	446b      	add	r3, sp
 800829a:	0019      	movs	r1, r3
 800829c:	0028      	movs	r0, r5
 800829e:	f7ff fc01 	bl	8007aa4 <EE_ReadVariable>
	if(!res)											// This variable exists
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d109      	bne.n	80082ba <AddPortButton+0x86>
	{
		temp8 =(uint8_t )(temp16 >> 8);
 80082a6:	466b      	mov	r3, sp
 80082a8:	8a5b      	ldrh	r3, [r3, #18]
 80082aa:	0a1b      	lsrs	r3, r3, #8
		if(((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))											// This is same port and same type, do not update
 80082ac:	091a      	lsrs	r2, r3, #4
 80082ae:	42a2      	cmp	r2, r4
 80082b0:	d103      	bne.n	80082ba <AddPortButton+0x86>
 80082b2:	220f      	movs	r2, #15
 80082b4:	4013      	ands	r3, r2
 80082b6:	42b3      	cmp	r3, r6
 80082b8:	d014      	beq.n	80082e4 <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
		}
	}
	else							// Variable does not exist. Create a new one
	{
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 80082ba:	466b      	mov	r3, sp
 80082bc:	0324      	lsls	r4, r4, #12
 80082be:	0231      	lsls	r1, r6, #8
 80082c0:	4321      	orrs	r1, r4
 80082c2:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 80082c4:	0028      	movs	r0, r5
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 80082c6:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 80082c8:	f7ff fc1c 	bl	8007b04 <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80082cc:	2100      	movs	r1, #0
 80082ce:	1c68      	adds	r0, r5, #1
 80082d0:	f7ff fc18 	bl	8007b04 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80082d4:	2100      	movs	r1, #0
 80082d6:	1ca8      	adds	r0, r5, #2
 80082d8:	f7ff fc14 	bl	8007b04 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80082dc:	1ce8      	adds	r0, r5, #3
 80082de:	2100      	movs	r1, #0
 80082e0:	f7ff fc10 	bl	8007b04 <EE_WriteVariable>
	}
	
	return result;
}
 80082e4:	2000      	movs	r0, #0
 80082e6:	b00d      	add	sp, #52	; 0x34
 80082e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 80082ea:	4b0d      	ldr	r3, [pc, #52]	; (8008320 <AddPortButton+0xec>)
 80082ec:	008f      	lsls	r7, r1, #2
 80082ee:	58f8      	ldr	r0, [r7, r3]
 80082f0:	f006 f812 	bl	800e318 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 80082f4:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <AddPortButton+0xf0>)
 80082f6:	58f8      	ldr	r0, [r7, r3]
 80082f8:	f006 f80e 	bl	800e318 <osSemaphoreRelease>
	portStatus[port] =PORTBUTTON;
 80082fc:	2104      	movs	r1, #4
 80082fe:	4a06      	ldr	r2, [pc, #24]	; (8008318 <AddPortButton+0xe4>)
 8008300:	782b      	ldrb	r3, [r5, #0]
 8008302:	5511      	strb	r1, [r2, r4]
	if(BOS_initialized){
 8008304:	2b00      	cmp	r3, #0
 8008306:	d0a0      	beq.n	800824a <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 8008308:	0020      	movs	r0, r4
 800830a:	f005 fed5 	bl	800e0b8 <GetUart>
 800830e:	f00a fe9f 	bl	8013050 <HAL_UART_DeInit>
 8008312:	e79a      	b.n	800824a <AddPortButton+0x16>
 8008314:	20000c3d 	.word	0x20000c3d
 8008318:	20000c2c 	.word	0x20000c2c
 800831c:	2000172c 	.word	0x2000172c
 8008320:	20006d68 	.word	0x20006d68
 8008324:	20006d4c 	.word	0x20006d4c

08008328 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port){
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type =NONE;
 800832c:	2300      	movs	r3, #0
 800832e:	4839      	ldr	r0, [pc, #228]	; (8008414 <RemovePortButton+0xec>)
 8008330:	00e9      	lsls	r1, r5, #3
 8008332:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec =0;
	button[port].releasedY2Sec =0;
	button[port].releasedY3Sec =0;
	
	/* 2. Remove from EEPROM if it's already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008334:	002c      	movs	r4, r5
	button[port].type =NONE;
 8008336:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port){
 8008338:	b082      	sub	sp, #8
	button[port].state =NONE;
 800833a:	540b      	strb	r3, [r1, r0]
	button[port].type =NONE;
 800833c:	7053      	strb	r3, [r2, #1]
	button[port].events =0;
 800833e:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec =0;
 8008340:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec =0;
 8008342:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec =0;
 8008344:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec =0;
 8008346:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec =0;
 8008348:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec =0;
 800834a:	71d3      	strb	r3, [r2, #7]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 800834c:	466b      	mov	r3, sp
 800834e:	343a      	adds	r4, #58	; 0x3a
 8008350:	00a4      	lsls	r4, r4, #2
 8008352:	1d99      	adds	r1, r3, #6
 8008354:	0020      	movs	r0, r4
 8008356:	f7ff fba5 	bl	8007aa4 <EE_ReadVariable>
	if(!res)						// This variable exists, reset all to zeros
 800835a:	2800      	cmp	r0, #0
 800835c:	d02d      	beq.n	80083ba <RemovePortButton+0x92>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart =GetUart(port);
 800835e:	0028      	movs	r0, r5
 8008360:	f005 feaa 	bl	800e0b8 <GetUart>
	
	if(huart->Instance == USART1){
 8008364:	4a2c      	ldr	r2, [pc, #176]	; (8008418 <RemovePortButton+0xf0>)
 8008366:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart =GetUart(port);
 8008368:	0006      	movs	r6, r0
	if(huart->Instance == USART1){
 800836a:	4293      	cmp	r3, r2
 800836c:	d03d      	beq.n	80083ea <RemovePortButton+0xc2>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	}
	else if(huart->Instance == USART2){
 800836e:	4a2b      	ldr	r2, [pc, #172]	; (800841c <RemovePortButton+0xf4>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d03e      	beq.n	80083f2 <RemovePortButton+0xca>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	}
	else if(huart->Instance == USART3){
 8008374:	4a2a      	ldr	r2, [pc, #168]	; (8008420 <RemovePortButton+0xf8>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d03f      	beq.n	80083fa <RemovePortButton+0xd2>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	}
	else if(huart->Instance == USART4){
 800837a:	4a2a      	ldr	r2, [pc, #168]	; (8008424 <RemovePortButton+0xfc>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d01a      	beq.n	80083b6 <RemovePortButton+0x8e>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	}
	else if(huart->Instance == USART5){
 8008380:	4a29      	ldr	r2, [pc, #164]	; (8008428 <RemovePortButton+0x100>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d03d      	beq.n	8008402 <RemovePortButton+0xda>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	}
	else if(huart->Instance == USART6){
 8008386:	4a29      	ldr	r2, [pc, #164]	; (800842c <RemovePortButton+0x104>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d03e      	beq.n	800840a <RemovePortButton+0xe2>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	}
	else if(huart->Instance == USART7){
 800838c:	4a28      	ldr	r2, [pc, #160]	; (8008430 <RemovePortButton+0x108>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d011      	beq.n	80083b6 <RemovePortButton+0x8e>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	}
	else if(huart->Instance == USART8){
 8008392:	4a28      	ldr	r2, [pc, #160]	; (8008434 <RemovePortButton+0x10c>)
 8008394:	4694      	mov	ip, r2
 8008396:	4463      	add	r3, ip
 8008398:	1e5c      	subs	r4, r3, #1
 800839a:	41a3      	sbcs	r3, r4
 800839c:	425c      	negs	r4, r3
 800839e:	b2e4      	uxtb	r4, r4
	}
	else
		result =BOS_ERROR;
	
	/* 4. Start scanning this port */
	portStatus[port] =FREE;
 80083a0:	2200      	movs	r2, #0
 80083a2:	4b25      	ldr	r3, [pc, #148]	; (8008438 <RemovePortButton+0x110>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 80083a4:	4925      	ldr	r1, [pc, #148]	; (800843c <RemovePortButton+0x114>)
	portStatus[port] =FREE;
 80083a6:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 80083a8:	0030      	movs	r0, r6
 80083aa:	3201      	adds	r2, #1
 80083ac:	f00a fe9e 	bl	80130ec <HAL_UART_Receive_IT>
	
	return result;
}
 80083b0:	0020      	movs	r0, r4
 80083b2:	b002      	add	sp, #8
 80083b4:	bd70      	pop	{r4, r5, r6, pc}
	BOS_Status result =BOS_OK;
 80083b6:	2400      	movs	r4, #0
 80083b8:	e7f2      	b.n	80083a0 <RemovePortButton+0x78>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),0);
 80083ba:	2100      	movs	r1, #0
 80083bc:	0020      	movs	r0, r4
 80083be:	f7ff fba1 	bl	8007b04 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80083c2:	2100      	movs	r1, #0
 80083c4:	1c60      	adds	r0, r4, #1
 80083c6:	f7ff fb9d 	bl	8007b04 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80083ca:	2100      	movs	r1, #0
 80083cc:	1ca0      	adds	r0, r4, #2
 80083ce:	f7ff fb99 	bl	8007b04 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80083d2:	2100      	movs	r1, #0
 80083d4:	1ce0      	adds	r0, r4, #3
 80083d6:	f7ff fb95 	bl	8007b04 <EE_WriteVariable>
	UART_HandleTypeDef *huart =GetUart(port);
 80083da:	0028      	movs	r0, r5
 80083dc:	f005 fe6c 	bl	800e0b8 <GetUart>
	if(huart->Instance == USART1){
 80083e0:	4a0d      	ldr	r2, [pc, #52]	; (8008418 <RemovePortButton+0xf0>)
 80083e2:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart =GetUart(port);
 80083e4:	0006      	movs	r6, r0
	if(huart->Instance == USART1){
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d1c1      	bne.n	800836e <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 80083ea:	f005 fc73 	bl	800dcd4 <MX_USART1_UART_Init>
	BOS_Status result =BOS_OK;
 80083ee:	2400      	movs	r4, #0
 80083f0:	e7d6      	b.n	80083a0 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 80083f2:	f005 fc87 	bl	800dd04 <MX_USART2_UART_Init>
	BOS_Status result =BOS_OK;
 80083f6:	2400      	movs	r4, #0
 80083f8:	e7d2      	b.n	80083a0 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 80083fa:	f005 fc9b 	bl	800dd34 <MX_USART3_UART_Init>
	BOS_Status result =BOS_OK;
 80083fe:	2400      	movs	r4, #0
 8008400:	e7ce      	b.n	80083a0 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 8008402:	f005 fcaf 	bl	800dd64 <MX_USART5_UART_Init>
	BOS_Status result =BOS_OK;
 8008406:	2400      	movs	r4, #0
 8008408:	e7ca      	b.n	80083a0 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800840a:	f005 fcc3 	bl	800dd94 <MX_USART6_UART_Init>
	BOS_Status result =BOS_OK;
 800840e:	2400      	movs	r4, #0
 8008410:	e7c6      	b.n	80083a0 <RemovePortButton+0x78>
 8008412:	46c0      	nop			; (mov r8, r8)
 8008414:	2000172c 	.word	0x2000172c
 8008418:	40013800 	.word	0x40013800
 800841c:	40004400 	.word	0x40004400
 8008420:	40004800 	.word	0x40004800
 8008424:	40004c00 	.word	0x40004c00
 8008428:	40005000 	.word	0x40005000
 800842c:	40011400 	.word	0x40011400
 8008430:	40011800 	.word	0x40011800
 8008434:	bffee400 	.word	0xbffee400
 8008438:	20000c2c 	.word	0x20000c2c
 800843c:	20000c4d 	.word	0x20000c4d

08008440 <SetButtonEvents>:
 dbl_clicked: Double click event (1: Enable, 0: Disable)
 pressed_x1sec, pressed_x1sec, pressed_x1sec: Press time for events X1, X2 and X3 in seconds. Use 0 to disable the event.
 released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event.
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 8008440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008442:	464e      	mov	r6, r9
 8008444:	4645      	mov	r5, r8
 8008446:	46de      	mov	lr, fp
 8008448:	4657      	mov	r7, sl
 800844a:	b5e0      	push	{r5, r6, r7, lr}
 800844c:	b087      	sub	sp, #28
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	ab10      	add	r3, sp, #64	; 0x40
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	0005      	movs	r5, r0
 8008456:	9302      	str	r3, [sp, #8]
 8008458:	ab11      	add	r3, sp, #68	; 0x44
 800845a:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;
	
	if(button[port].type == NONE)
 800845c:	00ec      	lsls	r4, r5, #3
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 800845e:	9303      	str	r3, [sp, #12]
 8008460:	ab12      	add	r3, sp, #72	; 0x48
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	469a      	mov	sl, r3
 8008466:	ab13      	add	r3, sp, #76	; 0x4c
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	4699      	mov	r9, r3
 800846c:	ab14      	add	r3, sp, #80	; 0x50
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	469b      	mov	fp, r3
 8008472:	ab15      	add	r3, sp, #84	; 0x54
 8008474:	7818      	ldrb	r0, [r3, #0]
	if(button[port].type == NONE)
 8008476:	4b80      	ldr	r3, [pc, #512]	; (8008678 <SetButtonEvents+0x238>)
 8008478:	4698      	mov	r8, r3
 800847a:	1963      	adds	r3, r4, r5
 800847c:	4443      	add	r3, r8
 800847e:	785e      	ldrb	r6, [r3, #1]
 8008480:	2e00      	cmp	r6, #0
 8008482:	d050      	beq.n	8008526 <SetButtonEvents+0xe6>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec =pressed_x1sec;
 8008484:	9e01      	ldr	r6, [sp, #4]
 8008486:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec =pressed_x2sec;
 8008488:	9e02      	ldr	r6, [sp, #8]
 800848a:	70de      	strb	r6, [r3, #3]
	button[port].pressedX3Sec =pressed_x3sec;
 800848c:	9e03      	ldr	r6, [sp, #12]
 800848e:	711e      	strb	r6, [r3, #4]
	button[port].releasedY1Sec =released_y1sec;
 8008490:	4656      	mov	r6, sl
 8008492:	715e      	strb	r6, [r3, #5]
	button[port].releasedY2Sec =released_y2sec;
 8008494:	464e      	mov	r6, r9
 8008496:	719e      	strb	r6, [r3, #6]
	button[port].releasedY3Sec =released_y3sec;
 8008498:	465e      	mov	r6, fp
 800849a:	71de      	strb	r6, [r3, #7]
	
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)){
 800849c:	2801      	cmp	r0, #1
 800849e:	d04b      	beq.n	8008538 <SetButtonEvents+0xf8>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d000      	beq.n	80084a6 <SetButtonEvents+0x66>
 80084a4:	e076      	b.n	8008594 <SetButtonEvents+0x154>
 80084a6:	2900      	cmp	r1, #0
 80084a8:	d000      	beq.n	80084ac <SetButtonEvents+0x6c>
 80084aa:	e0bf      	b.n	800862c <SetButtonEvents+0x1ec>
		button[port].events |= BUTTON_EVENT_CLICKED;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked){
		button[port].events &=~BUTTON_EVENT_CLICKED;
 80084ac:	2601      	movs	r6, #1
 80084ae:	7a19      	ldrb	r1, [r3, #8]
 80084b0:	43b1      	bics	r1, r6
 80084b2:	7219      	strb	r1, [r3, #8]
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 80084b4:	2a00      	cmp	r2, #0
 80084b6:	d142      	bne.n	800853e <SetButtonEvents+0xfe>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked){
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
 80084b8:	2302      	movs	r3, #2
 80084ba:	4399      	bics	r1, r3
 80084bc:	1963      	adds	r3, r4, r5
 80084be:	4443      	add	r3, r8
 80084c0:	7219      	strb	r1, [r3, #8]
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 80084c2:	9b01      	ldr	r3, [sp, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d143      	bne.n	8008550 <SetButtonEvents+0x110>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80084c8:	2304      	movs	r3, #4
 80084ca:	4399      	bics	r1, r3
 80084cc:	1963      	adds	r3, r4, r5
 80084ce:	4443      	add	r3, r8
 80084d0:	7219      	strb	r1, [r3, #8]
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 80084d2:	9b02      	ldr	r3, [sp, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d144      	bne.n	8008562 <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80084d8:	2308      	movs	r3, #8
 80084da:	4399      	bics	r1, r3
 80084dc:	1963      	adds	r3, r4, r5
 80084de:	4443      	add	r3, r8
 80084e0:	7219      	strb	r1, [r3, #8]
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d145      	bne.n	8008574 <SetButtonEvents+0x134>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80084e8:	2310      	movs	r3, #16
 80084ea:	000a      	movs	r2, r1
 80084ec:	439a      	bics	r2, r3
 80084ee:	1963      	adds	r3, r4, r5
 80084f0:	4443      	add	r3, r8
 80084f2:	721a      	strb	r2, [r3, #8]
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 80084f4:	4653      	mov	r3, sl
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d100      	bne.n	80084fc <SetButtonEvents+0xbc>
 80084fa:	e09c      	b.n	8008636 <SetButtonEvents+0x1f6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80084fc:	2120      	movs	r1, #32
 80084fe:	4311      	orrs	r1, r2
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 8008500:	464a      	mov	r2, r9
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008502:	1963      	adds	r3, r4, r5
 8008504:	4443      	add	r3, r8
 8008506:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 8008508:	2a00      	cmp	r2, #0
 800850a:	d100      	bne.n	800850e <SetButtonEvents+0xce>
 800850c:	e09d      	b.n	800864a <SetButtonEvents+0x20a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800850e:	2240      	movs	r2, #64	; 0x40
 8008510:	430a      	orrs	r2, r1
 8008512:	721a      	strb	r2, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 8008514:	465b      	mov	r3, fp
 8008516:	2b00      	cmp	r3, #0
 8008518:	d136      	bne.n	8008588 <SetButtonEvents+0x148>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800851a:	217f      	movs	r1, #127	; 0x7f
 800851c:	1963      	adds	r3, r4, r5
 800851e:	4443      	add	r3, r8
 8008520:	4011      	ands	r1, r2
 8008522:	7219      	strb	r1, [r3, #8]
 8008524:	e036      	b.n	8008594 <SetButtonEvents+0x154>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008526:	240b      	movs	r4, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	return result;
}
 8008528:	0020      	movs	r0, r4
 800852a:	b007      	add	sp, #28
 800852c:	bc3c      	pop	{r2, r3, r4, r5}
 800852e:	4690      	mov	r8, r2
 8008530:	4699      	mov	r9, r3
 8008532:	46a2      	mov	sl, r4
 8008534:	46ab      	mov	fp, r5
 8008536:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008538:	7a19      	ldrb	r1, [r3, #8]
 800853a:	2301      	movs	r3, #1
 800853c:	4319      	orrs	r1, r3
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800853e:	2202      	movs	r2, #2
 8008540:	1963      	adds	r3, r4, r5
 8008542:	4443      	add	r3, r8
 8008544:	4311      	orrs	r1, r2
 8008546:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 8008548:	2801      	cmp	r0, #1
 800854a:	d000      	beq.n	800854e <SetButtonEvents+0x10e>
 800854c:	e08c      	b.n	8008668 <SetButtonEvents+0x228>
 800854e:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008550:	2204      	movs	r2, #4
 8008552:	1963      	adds	r3, r4, r5
 8008554:	4443      	add	r3, r8
 8008556:	4311      	orrs	r1, r2
 8008558:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 800855a:	2801      	cmp	r0, #1
 800855c:	d000      	beq.n	8008560 <SetButtonEvents+0x120>
 800855e:	e07f      	b.n	8008660 <SetButtonEvents+0x220>
 8008560:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008562:	2208      	movs	r2, #8
 8008564:	1963      	adds	r3, r4, r5
 8008566:	4443      	add	r3, r8
 8008568:	4311      	orrs	r1, r2
 800856a:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 800856c:	2801      	cmp	r0, #1
 800856e:	d000      	beq.n	8008572 <SetButtonEvents+0x132>
 8008570:	e07e      	b.n	8008670 <SetButtonEvents+0x230>
 8008572:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008574:	2210      	movs	r2, #16
 8008576:	1963      	adds	r3, r4, r5
 8008578:	4443      	add	r3, r8
 800857a:	4311      	orrs	r1, r2
 800857c:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 800857e:	2801      	cmp	r0, #1
 8008580:	d16a      	bne.n	8008658 <SetButtonEvents+0x218>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008582:	2260      	movs	r2, #96	; 0x60
 8008584:	b2c9      	uxtb	r1, r1
 8008586:	430a      	orrs	r2, r1
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008588:	2180      	movs	r1, #128	; 0x80
 800858a:	1963      	adds	r3, r4, r5
 800858c:	4249      	negs	r1, r1
 800858e:	4443      	add	r3, r8
 8008590:	4311      	orrs	r1, r2
 8008592:	7219      	strb	r1, [r3, #8]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008594:	002e      	movs	r6, r5
 8008596:	ab04      	add	r3, sp, #16
 8008598:	363a      	adds	r6, #58	; 0x3a
 800859a:	00b6      	lsls	r6, r6, #2
 800859c:	1d9f      	adds	r7, r3, #6
 800859e:	0039      	movs	r1, r7
 80085a0:	0030      	movs	r0, r6
 80085a2:	f7ff fa7f 	bl	8007aa4 <EE_ReadVariable>
	if(!res)											// This variable exists
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d1bd      	bne.n	8008526 <SetButtonEvents+0xe6>
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 80085aa:	1964      	adds	r4, r4, r5
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
 80085ac:	883b      	ldrh	r3, [r7, #0]
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 80085ae:	4444      	add	r4, r8
 80085b0:	7a22      	ldrb	r2, [r4, #8]
 80085b2:	b2d9      	uxtb	r1, r3
 80085b4:	4291      	cmp	r1, r2
 80085b6:	d006      	beq.n	80085c6 <SetButtonEvents+0x186>
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 80085b8:	0a19      	lsrs	r1, r3, #8
 80085ba:	0209      	lsls	r1, r1, #8
 80085bc:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 80085be:	0030      	movs	r0, r6
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 80085c0:	8039      	strh	r1, [r7, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 80085c2:	f7ff fa9f 	bl	8007b04 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
 80085c6:	1c74      	adds	r4, r6, #1
 80085c8:	0039      	movs	r1, r7
 80085ca:	0020      	movs	r0, r4
 80085cc:	f7ff fa6a 	bl	8007aa4 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
 80085d0:	4652      	mov	r2, sl
 80085d2:	9b01      	ldr	r3, [sp, #4]
 80085d4:	0219      	lsls	r1, r3, #8
 80085d6:	883b      	ldrh	r3, [r7, #0]
 80085d8:	430a      	orrs	r2, r1
 80085da:	4293      	cmp	r3, r2
 80085dc:	d003      	beq.n	80085e6 <SetButtonEvents+0x1a6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
 80085de:	b291      	uxth	r1, r2
 80085e0:	0020      	movs	r0, r4
 80085e2:	f7ff fa8f 	bl	8007b04 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
 80085e6:	1cb4      	adds	r4, r6, #2
 80085e8:	0039      	movs	r1, r7
 80085ea:	0020      	movs	r0, r4
 80085ec:	f7ff fa5a 	bl	8007aa4 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
 80085f0:	464a      	mov	r2, r9
 80085f2:	9b02      	ldr	r3, [sp, #8]
 80085f4:	0219      	lsls	r1, r3, #8
 80085f6:	883b      	ldrh	r3, [r7, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d003      	beq.n	8008606 <SetButtonEvents+0x1c6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
 80085fe:	b291      	uxth	r1, r2
 8008600:	0020      	movs	r0, r4
 8008602:	f7ff fa7f 	bl	8007b04 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,&temp16);
 8008606:	3603      	adds	r6, #3
 8008608:	0039      	movs	r1, r7
 800860a:	0030      	movs	r0, r6
 800860c:	f7ff fa4a 	bl	8007aa4 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 8008610:	465a      	mov	r2, fp
 8008612:	9b03      	ldr	r3, [sp, #12]
	return result;
 8008614:	2400      	movs	r4, #0
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 8008616:	0219      	lsls	r1, r3, #8
 8008618:	883b      	ldrh	r3, [r7, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	4293      	cmp	r3, r2
 800861e:	d100      	bne.n	8008622 <SetButtonEvents+0x1e2>
 8008620:	e782      	b.n	8008528 <SetButtonEvents+0xe8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec);
 8008622:	b291      	uxth	r1, r2
 8008624:	0030      	movs	r0, r6
 8008626:	f7ff fa6d 	bl	8007b04 <EE_WriteVariable>
 800862a:	e77d      	b.n	8008528 <SetButtonEvents+0xe8>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800862c:	2601      	movs	r6, #1
 800862e:	7a19      	ldrb	r1, [r3, #8]
 8008630:	4331      	orrs	r1, r6
 8008632:	7219      	strb	r1, [r3, #8]
 8008634:	e73e      	b.n	80084b4 <SetButtonEvents+0x74>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008636:	2320      	movs	r3, #32
 8008638:	439a      	bics	r2, r3
 800863a:	1963      	adds	r3, r4, r5
 800863c:	4443      	add	r3, r8
 800863e:	0011      	movs	r1, r2
 8008640:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 8008642:	464a      	mov	r2, r9
 8008644:	2a00      	cmp	r2, #0
 8008646:	d000      	beq.n	800864a <SetButtonEvents+0x20a>
 8008648:	e761      	b.n	800850e <SetButtonEvents+0xce>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800864a:	2340      	movs	r3, #64	; 0x40
 800864c:	000a      	movs	r2, r1
 800864e:	439a      	bics	r2, r3
 8008650:	1963      	adds	r3, r4, r5
 8008652:	4443      	add	r3, r8
 8008654:	721a      	strb	r2, [r3, #8]
 8008656:	e75d      	b.n	8008514 <SetButtonEvents+0xd4>
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 8008658:	2800      	cmp	r0, #0
 800865a:	d19b      	bne.n	8008594 <SetButtonEvents+0x154>
 800865c:	7a1a      	ldrb	r2, [r3, #8]
 800865e:	e749      	b.n	80084f4 <SetButtonEvents+0xb4>
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008660:	2800      	cmp	r0, #0
 8008662:	d197      	bne.n	8008594 <SetButtonEvents+0x154>
 8008664:	7a19      	ldrb	r1, [r3, #8]
 8008666:	e734      	b.n	80084d2 <SetButtonEvents+0x92>
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 8008668:	2800      	cmp	r0, #0
 800866a:	d193      	bne.n	8008594 <SetButtonEvents+0x154>
 800866c:	7a19      	ldrb	r1, [r3, #8]
 800866e:	e728      	b.n	80084c2 <SetButtonEvents+0x82>
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 8008670:	2800      	cmp	r0, #0
 8008672:	d18f      	bne.n	8008594 <SetButtonEvents+0x154>
 8008674:	7a19      	ldrb	r1, [r3, #8]
 8008676:	e734      	b.n	80084e2 <SetButtonEvents+0xa2>
 8008678:	2000172c 	.word	0x2000172c

0800867c <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void){
	hadc.Instance = ADC1;
 800867c:	4811      	ldr	r0, [pc, #68]	; (80086c4 <MX_ADC_Init+0x48>)
 800867e:	4b12      	ldr	r3, [pc, #72]	; (80086c8 <MX_ADC_Init+0x4c>)
void MX_ADC_Init(void){
 8008680:	b510      	push	{r4, lr}
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008682:	2104      	movs	r1, #4
	hadc.Instance = ADC1;
 8008684:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008686:	2380      	movs	r3, #128	; 0x80
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008688:	6141      	str	r1, [r0, #20]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800868a:	061b      	lsls	r3, r3, #24
	hadc.Init.LowPowerAutoWait =DISABLE;
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
	hadc.Init.ContinuousConvMode =ENABLE;
	hadc.Init.DiscontinuousConvMode =DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800868c:	21c2      	movs	r1, #194	; 0xc2
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800868e:	2201      	movs	r2, #1
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008690:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008692:	2300      	movs	r3, #0
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008694:	31ff      	adds	r1, #255	; 0xff
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008696:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008698:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800869a:	6102      	str	r2, [r0, #16]
	hadc.Init.LowPowerAutoWait =DISABLE;
 800869c:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
 800869e:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode =ENABLE;
 80086a0:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode =DISABLE;
 80086a2:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80086a4:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80086a6:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests =DISABLE;
 80086a8:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80086aa:	6342      	str	r2, [r0, #52]	; 0x34
	
	if(HAL_ADC_Init(&hadc) != HAL_OK){
 80086ac:	f007 fe32 	bl	8010314 <HAL_ADC_Init>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d002      	beq.n	80086ba <MX_ADC_Init+0x3e>
		return ADC_CHANNEL_5;
}

void Error_Handler(void){
	
	HAL_Delay(100);
 80086b4:	2064      	movs	r0, #100	; 0x64
 80086b6:	f007 fd53 	bl	8010160 <HAL_Delay>
	ADC_flag =1;
 80086ba:	2368      	movs	r3, #104	; 0x68
 80086bc:	2101      	movs	r1, #1
 80086be:	4a03      	ldr	r2, [pc, #12]	; (80086cc <MX_ADC_Init+0x50>)
 80086c0:	54d1      	strb	r1, [r2, r3]
}
 80086c2:	bd10      	pop	{r4, pc}
 80086c4:	20006d84 	.word	0x20006d84
 80086c8:	40012400 	.word	0x40012400
 80086cc:	2000172c 	.word	0x2000172c

080086d0 <ADC_Channels_Config>:
void ADC_Channels_Config(ADC_HandleTypeDef *adcHandle){
 80086d0:	b510      	push	{r4, lr}
 80086d2:	0004      	movs	r4, r0
 80086d4:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 80086d6:	2214      	movs	r2, #20
 80086d8:	2100      	movs	r1, #0
 80086da:	a803      	add	r0, sp, #12
 80086dc:	f00b fca8 	bl	8014030 <memset>
	if(adcHandle->Instance == ADC1){
 80086e0:	4b11      	ldr	r3, [pc, #68]	; (8008728 <ADC_Channels_Config+0x58>)
 80086e2:	6822      	ldr	r2, [r4, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d001      	beq.n	80086ec <ADC_Channels_Config+0x1c>
}
 80086e8:	b008      	add	sp, #32
 80086ea:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 80086ec:	2080      	movs	r0, #128	; 0x80
 80086ee:	4b0f      	ldr	r3, [pc, #60]	; (800872c <ADC_Channels_Config+0x5c>)
 80086f0:	0080      	lsls	r0, r0, #2
 80086f2:	6999      	ldr	r1, [r3, #24]
 80086f4:	4301      	orrs	r1, r0
 80086f6:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80086f8:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 80086fa:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80086fc:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 80086fe:	4002      	ands	r2, r0
 8008700:	9201      	str	r2, [sp, #4]
 8008702:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008704:	695a      	ldr	r2, [r3, #20]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008706:	2090      	movs	r0, #144	; 0x90
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008708:	430a      	orrs	r2, r1
 800870a:	615a      	str	r2, [r3, #20]
 800870c:	695b      	ldr	r3, [r3, #20]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 800870e:	05c0      	lsls	r0, r0, #23
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008710:	400b      	ands	r3, r1
 8008712:	9302      	str	r3, [sp, #8]
 8008714:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8008716:	233c      	movs	r3, #60	; 0x3c
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008718:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800871a:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800871c:	3b39      	subs	r3, #57	; 0x39
 800871e:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008720:	f009 f88e 	bl	8011840 <HAL_GPIO_Init>
}
 8008724:	e7e0      	b.n	80086e8 <ADC_Channels_Config+0x18>
 8008726:	46c0      	nop			; (mov r8, r8)
 8008728:	40012400 	.word	0x40012400
 800872c:	40021000 	.word	0x40021000

08008730 <ReadTempAndVref>:
void ReadTempAndVref(float *temp,float *Vref){
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	46ce      	mov	lr, r9
 8008734:	4647      	mov	r7, r8
	if(0 == ADC_flag)
 8008736:	2368      	movs	r3, #104	; 0x68
void ReadTempAndVref(float *temp,float *Vref){
 8008738:	b580      	push	{r7, lr}
	if(0 == ADC_flag)
 800873a:	4c54      	ldr	r4, [pc, #336]	; (800888c <ReadTempAndVref+0x15c>)
void ReadTempAndVref(float *temp,float *Vref){
 800873c:	0006      	movs	r6, r0
	if(0 == ADC_flag)
 800873e:	5ce3      	ldrb	r3, [r4, r3]
void ReadTempAndVref(float *temp,float *Vref){
 8008740:	4689      	mov	r9, r1
	if(0 == ADC_flag)
 8008742:	2b00      	cmp	r3, #0
 8008744:	d100      	bne.n	8008748 <ReadTempAndVref+0x18>
 8008746:	e09d      	b.n	8008884 <ReadTempAndVref+0x154>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008748:	2310      	movs	r3, #16
 800874a:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800874c:	2380      	movs	r3, #128	; 0x80
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 800874e:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008750:	015b      	lsls	r3, r3, #5
 8008752:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008754:	2301      	movs	r3, #1
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008756:	4d4e      	ldr	r5, [pc, #312]	; (8008890 <ReadTempAndVref+0x160>)
 8008758:	316c      	adds	r1, #108	; 0x6c
 800875a:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800875c:	6763      	str	r3, [r4, #116]	; 0x74
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 800875e:	f007 ffa7 	bl	80106b0 <HAL_ADC_ConfigChannel>
 8008762:	2800      	cmp	r0, #0
 8008764:	d000      	beq.n	8008768 <ReadTempAndVref+0x38>
 8008766:	e089      	b.n	800887c <ReadTempAndVref+0x14c>
	HAL_ADC_Start(&hadc);
 8008768:	0028      	movs	r0, r5
 800876a:	f007 fe75 	bl	8010458 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 800876e:	2164      	movs	r1, #100	; 0x64
 8008770:	0028      	movs	r0, r5
 8008772:	f007 febd 	bl	80104f0 <HAL_ADC_PollForConversion>
	ADC_value_temp =HAL_ADC_GetValue(&hadc);
 8008776:	0028      	movs	r0, r5
 8008778:	f007 ff1e 	bl	80105b8 <HAL_ADC_GetValue>
 800877c:	2378      	movs	r3, #120	; 0x78
 800877e:	52e0      	strh	r0, [r4, r3]
	*temp =((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 8008780:	0400      	lsls	r0, r0, #16
 8008782:	0c00      	lsrs	r0, r0, #16
 8008784:	f7fa fa98 	bl	8002cb8 <__aeabi_i2d>
 8008788:	4a42      	ldr	r2, [pc, #264]	; (8008894 <ReadTempAndVref+0x164>)
 800878a:	4b43      	ldr	r3, [pc, #268]	; (8008898 <ReadTempAndVref+0x168>)
 800878c:	f7f9 fc88 	bl	80020a0 <__aeabi_dmul>
 8008790:	2200      	movs	r2, #0
 8008792:	4b42      	ldr	r3, [pc, #264]	; (800889c <ReadTempAndVref+0x16c>)
 8008794:	f7f9 f87a 	bl	800188c <__aeabi_ddiv>
 8008798:	4a41      	ldr	r2, [pc, #260]	; (80088a0 <ReadTempAndVref+0x170>)
 800879a:	4b42      	ldr	r3, [pc, #264]	; (80088a4 <ReadTempAndVref+0x174>)
 800879c:	f7f9 fef2 	bl	8002584 <__aeabi_dsub>
 80087a0:	4a41      	ldr	r2, [pc, #260]	; (80088a8 <ReadTempAndVref+0x178>)
 80087a2:	4b42      	ldr	r3, [pc, #264]	; (80088ac <ReadTempAndVref+0x17c>)
 80087a4:	f7f9 f872 	bl	800188c <__aeabi_ddiv>
 80087a8:	4b41      	ldr	r3, [pc, #260]	; (80088b0 <ReadTempAndVref+0x180>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	f7f8 fd52 	bl	8001254 <__aeabi_dadd>
 80087b0:	f7fa fb40 	bl	8002e34 <__aeabi_d2f>
 80087b4:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 80087b6:	0028      	movs	r0, r5
 80087b8:	f007 fe7a 	bl	80104b0 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80087bc:	2310      	movs	r3, #16
 80087be:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 80087c0:	4b3c      	ldr	r3, [pc, #240]	; (80088b4 <ReadTempAndVref+0x184>)
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80087c2:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 80087c4:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80087c6:	2301      	movs	r3, #1
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80087c8:	316c      	adds	r1, #108	; 0x6c
 80087ca:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80087cc:	6763      	str	r3, [r4, #116]	; 0x74
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80087ce:	f007 ff6f 	bl	80106b0 <HAL_ADC_ConfigChannel>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d14e      	bne.n	8008874 <ReadTempAndVref+0x144>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80087d6:	2311      	movs	r3, #17
 80087d8:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80087da:	2380      	movs	r3, #128	; 0x80
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80087dc:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80087de:	015b      	lsls	r3, r3, #5
 80087e0:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80087e2:	2305      	movs	r3, #5
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80087e4:	316c      	adds	r1, #108	; 0x6c
 80087e6:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80087e8:	6763      	str	r3, [r4, #116]	; 0x74
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80087ea:	f007 ff61 	bl	80106b0 <HAL_ADC_ConfigChannel>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d13c      	bne.n	800886c <ReadTempAndVref+0x13c>
	HAL_ADC_Start(&hadc);
 80087f2:	0028      	movs	r0, r5
 80087f4:	f007 fe30 	bl	8010458 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 80087f8:	2164      	movs	r1, #100	; 0x64
 80087fa:	0028      	movs	r0, r5
 80087fc:	f007 fe78 	bl	80104f0 <HAL_ADC_PollForConversion>
	ADC_value_Vref =HAL_ADC_GetValue(&hadc);
 8008800:	0028      	movs	r0, r5
 8008802:	f007 fed9 	bl	80105b8 <HAL_ADC_GetValue>
 8008806:	237a      	movs	r3, #122	; 0x7a
 8008808:	4680      	mov	r8, r0
 800880a:	52e0      	strh	r0, [r4, r3]
	*Vref =3.3 * (*Vref_Cal) / ADC_value_Vref;
 800880c:	4b2a      	ldr	r3, [pc, #168]	; (80088b8 <ReadTempAndVref+0x188>)
 800880e:	8818      	ldrh	r0, [r3, #0]
 8008810:	f7fa fa52 	bl	8002cb8 <__aeabi_i2d>
 8008814:	4a1f      	ldr	r2, [pc, #124]	; (8008894 <ReadTempAndVref+0x164>)
 8008816:	4b20      	ldr	r3, [pc, #128]	; (8008898 <ReadTempAndVref+0x168>)
 8008818:	f7f9 fc42 	bl	80020a0 <__aeabi_dmul>
 800881c:	4643      	mov	r3, r8
 800881e:	0006      	movs	r6, r0
 8008820:	0418      	lsls	r0, r3, #16
 8008822:	0c00      	lsrs	r0, r0, #16
 8008824:	000f      	movs	r7, r1
 8008826:	f7fa fa47 	bl	8002cb8 <__aeabi_i2d>
 800882a:	0002      	movs	r2, r0
 800882c:	000b      	movs	r3, r1
 800882e:	0030      	movs	r0, r6
 8008830:	0039      	movs	r1, r7
 8008832:	f7f9 f82b 	bl	800188c <__aeabi_ddiv>
 8008836:	f7fa fafd 	bl	8002e34 <__aeabi_d2f>
 800883a:	464b      	mov	r3, r9
 800883c:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800883e:	0028      	movs	r0, r5
 8008840:	f007 fe36 	bl	80104b0 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008844:	2311      	movs	r3, #17
 8008846:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 8008848:	4b1a      	ldr	r3, [pc, #104]	; (80088b4 <ReadTempAndVref+0x184>)
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 800884a:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800884c:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800884e:	2301      	movs	r3, #1
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008850:	316c      	adds	r1, #108	; 0x6c
 8008852:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008854:	6763      	str	r3, [r4, #116]	; 0x74
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008856:	f007 ff2b 	bl	80106b0 <HAL_ADC_ConfigChannel>
 800885a:	2800      	cmp	r0, #0
 800885c:	d002      	beq.n	8008864 <ReadTempAndVref+0x134>
	HAL_Delay(100);
 800885e:	2064      	movs	r0, #100	; 0x64
 8008860:	f007 fc7e 	bl	8010160 <HAL_Delay>
}
 8008864:	bc0c      	pop	{r2, r3}
 8008866:	4690      	mov	r8, r2
 8008868:	4699      	mov	r9, r3
 800886a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_Delay(100);
 800886c:	2064      	movs	r0, #100	; 0x64
 800886e:	f007 fc77 	bl	8010160 <HAL_Delay>
 8008872:	e7be      	b.n	80087f2 <ReadTempAndVref+0xc2>
 8008874:	2064      	movs	r0, #100	; 0x64
 8008876:	f007 fc73 	bl	8010160 <HAL_Delay>
 800887a:	e7ac      	b.n	80087d6 <ReadTempAndVref+0xa6>
 800887c:	2064      	movs	r0, #100	; 0x64
 800887e:	f007 fc6f 	bl	8010160 <HAL_Delay>
 8008882:	e771      	b.n	8008768 <ReadTempAndVref+0x38>
		MX_ADC_Init();
 8008884:	f7ff fefa 	bl	800867c <MX_ADC_Init>
 8008888:	e75e      	b.n	8008748 <ReadTempAndVref+0x18>
 800888a:	46c0      	nop			; (mov r8, r8)
 800888c:	2000172c 	.word	0x2000172c
 8008890:	20006d84 	.word	0x20006d84
 8008894:	66666666 	.word	0x66666666
 8008898:	400a6666 	.word	0x400a6666
 800889c:	40affe00 	.word	0x40affe00
 80088a0:	28f5c28f 	.word	0x28f5c28f
 80088a4:	3ff68f5c 	.word	0x3ff68f5c
 80088a8:	33333333 	.word	0x33333333
 80088ac:	40113333 	.word	0x40113333
 80088b0:	40390000 	.word	0x40390000
 80088b4:	00001001 	.word	0x00001001
 80088b8:	1ffff7ba 	.word	0x1ffff7ba

080088bc <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port,float *precentageValue){
 80088bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(port == 2 || port == 3){
 80088be:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port,float *precentageValue){
 80088c0:	b087      	sub	sp, #28
 80088c2:	0006      	movs	r6, r0
 80088c4:	000f      	movs	r7, r1
	if(port == 2 || port == 3){
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d901      	bls.n	80088ce <GetReadPrecentage+0x12>
}
 80088ca:	b007      	add	sp, #28
 80088cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(0 == ADC_flag){
 80088ce:	2368      	movs	r3, #104	; 0x68
 80088d0:	4c4d      	ldr	r4, [pc, #308]	; (8008a08 <GetReadPrecentage+0x14c>)
 80088d2:	5ce3      	ldrb	r3, [r4, r3]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d068      	beq.n	80089aa <GetReadPrecentage+0xee>
 80088d8:	4d4c      	ldr	r5, [pc, #304]	; (8008a0c <GetReadPrecentage+0x150>)
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80088da:	2090      	movs	r0, #144	; 0x90
 80088dc:	2201      	movs	r2, #1
 80088de:	2110      	movs	r1, #16
 80088e0:	05c0      	lsls	r0, r0, #23
 80088e2:	f009 f94d 	bl	8011b80 <HAL_GPIO_WritePin>
		Channel =Get_channel(GetUart(port),"bottom");
 80088e6:	0030      	movs	r0, r6
 80088e8:	f005 fbe6 	bl	800e0b8 <GetUart>
	if(huart->Instance == USART2 && side == "top")
 80088ec:	4a48      	ldr	r2, [pc, #288]	; (8008a10 <GetReadPrecentage+0x154>)
 80088ee:	6803      	ldr	r3, [r0, #0]
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d07b      	beq.n	80089ec <GetReadPrecentage+0x130>
	else if(huart->Instance == USART6 && side == "top")
 80088f4:	4a47      	ldr	r2, [pc, #284]	; (8008a14 <GetReadPrecentage+0x158>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d04c      	beq.n	8008994 <GetReadPrecentage+0xd8>
 80088fa:	2300      	movs	r3, #0
 80088fc:	0019      	movs	r1, r3
		Channel =Get_channel(GetUart(port),"bottom");
 80088fe:	227c      	movs	r2, #124	; 0x7c
 8008900:	54a3      	strb	r3, [r4, r2]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008902:	2380      	movs	r3, #128	; 0x80
		sConfig.Channel =Channel;
 8008904:	66e1      	str	r1, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008906:	015b      	lsls	r3, r3, #5
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008908:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800890a:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800890c:	2301      	movs	r3, #1
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 800890e:	316c      	adds	r1, #108	; 0x6c
 8008910:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008912:	6763      	str	r3, [r4, #116]	; 0x74
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008914:	f007 fecc 	bl	80106b0 <HAL_ADC_ConfigChannel>
 8008918:	2800      	cmp	r0, #0
 800891a:	d142      	bne.n	80089a2 <GetReadPrecentage+0xe6>
		HAL_ADC_Start(&hadc);
 800891c:	0028      	movs	r0, r5
 800891e:	f007 fd9b 	bl	8010458 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008922:	2164      	movs	r1, #100	; 0x64
 8008924:	0028      	movs	r0, r5
 8008926:	f007 fde3 	bl	80104f0 <HAL_ADC_PollForConversion>
		percentage =HAL_ADC_GetValue(&hadc);
 800892a:	0028      	movs	r0, r5
 800892c:	f007 fe44 	bl	80105b8 <HAL_ADC_GetValue>
 8008930:	f7f8 fc50 	bl	80011d4 <__aeabi_ui2f>
		percentage =3.3 * percentage / 4095;
 8008934:	f7fa fa2c 	bl	8002d90 <__aeabi_f2d>
 8008938:	4a37      	ldr	r2, [pc, #220]	; (8008a18 <GetReadPrecentage+0x15c>)
 800893a:	4b38      	ldr	r3, [pc, #224]	; (8008a1c <GetReadPrecentage+0x160>)
 800893c:	f7f9 fbb0 	bl	80020a0 <__aeabi_dmul>
 8008940:	2200      	movs	r2, #0
 8008942:	4b37      	ldr	r3, [pc, #220]	; (8008a20 <GetReadPrecentage+0x164>)
 8008944:	f7f8 ffa2 	bl	800188c <__aeabi_ddiv>
 8008948:	f7fa fa74 	bl	8002e34 <__aeabi_d2f>
 800894c:	4e35      	ldr	r6, [pc, #212]	; (8008a24 <GetReadPrecentage+0x168>)
		current =(100 * percentage) / 3.3;
 800894e:	4936      	ldr	r1, [pc, #216]	; (8008a28 <GetReadPrecentage+0x16c>)
		percentage =3.3 * percentage / 4095;
 8008950:	6030      	str	r0, [r6, #0]
		current =(100 * percentage) / 3.3;
 8008952:	f7f8 f929 	bl	8000ba8 <__aeabi_fmul>
 8008956:	f7fa fa1b 	bl	8002d90 <__aeabi_f2d>
 800895a:	4b30      	ldr	r3, [pc, #192]	; (8008a1c <GetReadPrecentage+0x160>)
 800895c:	4a2e      	ldr	r2, [pc, #184]	; (8008a18 <GetReadPrecentage+0x15c>)
 800895e:	f7f8 ff95 	bl	800188c <__aeabi_ddiv>
 8008962:	f7fa fa67 	bl	8002e34 <__aeabi_d2f>
 8008966:	6070      	str	r0, [r6, #4]
		*precentageValue =current;
 8008968:	6038      	str	r0, [r7, #0]
		HAL_ADC_Stop(&hadc);
 800896a:	0028      	movs	r0, r5
 800896c:	f007 fda0 	bl	80104b0 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008970:	237c      	movs	r3, #124	; 0x7c
 8008972:	5ce3      	ldrb	r3, [r4, r3]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008974:	0021      	movs	r1, r4
		sConfig.Channel =Channel;
 8008976:	66e3      	str	r3, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 8008978:	4b2c      	ldr	r3, [pc, #176]	; (8008a2c <GetReadPrecentage+0x170>)
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 800897a:	316c      	adds	r1, #108	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800897c:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800897e:	2301      	movs	r3, #1
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008980:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008982:	6763      	str	r3, [r4, #116]	; 0x74
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008984:	f007 fe94 	bl	80106b0 <HAL_ADC_ConfigChannel>
 8008988:	2800      	cmp	r0, #0
 800898a:	d09e      	beq.n	80088ca <GetReadPrecentage+0xe>
	HAL_Delay(100);
 800898c:	2064      	movs	r0, #100	; 0x64
 800898e:	f007 fbe7 	bl	8010160 <HAL_Delay>
 8008992:	e79a      	b.n	80088ca <GetReadPrecentage+0xe>
	else if(huart->Instance == USART6 && side == "top")
 8008994:	4a26      	ldr	r2, [pc, #152]	; (8008a30 <GetReadPrecentage+0x174>)
 8008996:	4b27      	ldr	r3, [pc, #156]	; (8008a34 <GetReadPrecentage+0x178>)
 8008998:	429a      	cmp	r2, r3
 800899a:	d031      	beq.n	8008a00 <GetReadPrecentage+0x144>
 800899c:	2105      	movs	r1, #5
		return ADC_CHANNEL_5;
 800899e:	2305      	movs	r3, #5
 80089a0:	e7ad      	b.n	80088fe <GetReadPrecentage+0x42>
	HAL_Delay(100);
 80089a2:	2064      	movs	r0, #100	; 0x64
 80089a4:	f007 fbdc 	bl	8010160 <HAL_Delay>
 80089a8:	e7b8      	b.n	800891c <GetReadPrecentage+0x60>
			MX_ADC_Init();
 80089aa:	f7ff fe67 	bl	800867c <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 80089ae:	0030      	movs	r0, r6
 80089b0:	f005 fb82 	bl	800e0b8 <GetUart>
 80089b4:	f00a fb4c 	bl	8013050 <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA,GPIO_PIN_4);
 80089b8:	2090      	movs	r0, #144	; 0x90
 80089ba:	2110      	movs	r1, #16
 80089bc:	05c0      	lsls	r0, r0, #23
 80089be:	f009 f83b 	bl	8011a38 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 80089c2:	4d12      	ldr	r5, [pc, #72]	; (8008a0c <GetReadPrecentage+0x150>)
 80089c4:	0028      	movs	r0, r5
 80089c6:	f007 ff03 	bl	80107d0 <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 80089ca:	2310      	movs	r3, #16
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 80089cc:	2090      	movs	r0, #144	; 0x90
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 80089ce:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089d0:	3b0f      	subs	r3, #15
 80089d2:	9302      	str	r3, [sp, #8]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 80089d4:	a901      	add	r1, sp, #4
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80089d6:	3302      	adds	r3, #2
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 80089d8:	05c0      	lsls	r0, r0, #23
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80089da:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 80089dc:	f008 ff30 	bl	8011840 <HAL_GPIO_Init>
			portStatus[port - 1] =CUSTOM;
 80089e0:	2206      	movs	r2, #6
 80089e2:	4b15      	ldr	r3, [pc, #84]	; (8008a38 <GetReadPrecentage+0x17c>)
 80089e4:	199b      	adds	r3, r3, r6
 80089e6:	3b01      	subs	r3, #1
 80089e8:	701a      	strb	r2, [r3, #0]
 80089ea:	e776      	b.n	80088da <GetReadPrecentage+0x1e>
	if(huart->Instance == USART2 && side == "top")
 80089ec:	4a10      	ldr	r2, [pc, #64]	; (8008a30 <GetReadPrecentage+0x174>)
 80089ee:	4b11      	ldr	r3, [pc, #68]	; (8008a34 <GetReadPrecentage+0x178>)
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d002      	beq.n	80089fa <GetReadPrecentage+0x13e>
 80089f4:	2103      	movs	r1, #3
		return ADC_CHANNEL_3;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e781      	b.n	80088fe <GetReadPrecentage+0x42>
	if(huart->Instance == USART2 && side == "top")
 80089fa:	2102      	movs	r1, #2
		return ADC_CHANNEL_2;
 80089fc:	2302      	movs	r3, #2
 80089fe:	e77e      	b.n	80088fe <GetReadPrecentage+0x42>
	else if(huart->Instance == USART6 && side == "top")
 8008a00:	2104      	movs	r1, #4
		return ADC_CHANNEL_4;
 8008a02:	2304      	movs	r3, #4
 8008a04:	e77b      	b.n	80088fe <GetReadPrecentage+0x42>
 8008a06:	46c0      	nop			; (mov r8, r8)
 8008a08:	2000172c 	.word	0x2000172c
 8008a0c:	20006d84 	.word	0x20006d84
 8008a10:	40004400 	.word	0x40004400
 8008a14:	40011400 	.word	0x40011400
 8008a18:	66666666 	.word	0x66666666
 8008a1c:	400a6666 	.word	0x400a6666
 8008a20:	40affe00 	.word	0x40affe00
 8008a24:	200017ac 	.word	0x200017ac
 8008a28:	42c80000 	.word	0x42c80000
 8008a2c:	00001001 	.word	0x00001001
 8008a30:	08019b30 	.word	0x08019b30
 8008a34:	08019b2c 	.word	0x08019b2c
 8008a38:	20000c2c 	.word	0x20000c2c

08008a3c <Get_Rank>:
	
}

uint8_t Get_Rank(uint8_t Port,char *side){
	
	if(Port == 2 && side == "top")
 8008a3c:	2802      	cmp	r0, #2
 8008a3e:	d00e      	beq.n	8008a5e <Get_Rank+0x22>
		Rank_t =0;
	else if(Port == 2 && side == "bottom")
		Rank_t =1;
	else if(Port == 3 && side == "top")
 8008a40:	2803      	cmp	r0, #3
 8008a42:	d002      	beq.n	8008a4a <Get_Rank+0xe>
 8008a44:	4b10      	ldr	r3, [pc, #64]	; (8008a88 <Get_Rank+0x4c>)
 8008a46:	7a18      	ldrb	r0, [r3, #8]
		Rank_t =2;
	else if(Port == 3 && side == "bottom")
		Rank_t =3;
	return Rank_t;
}
 8008a48:	4770      	bx	lr
	else if(Port == 3 && side == "top")
 8008a4a:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <Get_Rank+0x50>)
 8008a4c:	4299      	cmp	r1, r3
 8008a4e:	d016      	beq.n	8008a7e <Get_Rank+0x42>
	else if(Port == 3 && side == "bottom")
 8008a50:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <Get_Rank+0x54>)
 8008a52:	4299      	cmp	r1, r3
 8008a54:	d1f6      	bne.n	8008a44 <Get_Rank+0x8>
		Rank_t =3;
 8008a56:	4b0c      	ldr	r3, [pc, #48]	; (8008a88 <Get_Rank+0x4c>)
 8008a58:	7218      	strb	r0, [r3, #8]
 8008a5a:	2003      	movs	r0, #3
 8008a5c:	e7f4      	b.n	8008a48 <Get_Rank+0xc>
	if(Port == 2 && side == "top")
 8008a5e:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <Get_Rank+0x50>)
 8008a60:	4299      	cmp	r1, r3
 8008a62:	d007      	beq.n	8008a74 <Get_Rank+0x38>
	else if(Port == 2 && side == "bottom")
 8008a64:	4b0a      	ldr	r3, [pc, #40]	; (8008a90 <Get_Rank+0x54>)
 8008a66:	4299      	cmp	r1, r3
 8008a68:	d1ec      	bne.n	8008a44 <Get_Rank+0x8>
		Rank_t =1;
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	4b06      	ldr	r3, [pc, #24]	; (8008a88 <Get_Rank+0x4c>)
 8008a6e:	2001      	movs	r0, #1
 8008a70:	721a      	strb	r2, [r3, #8]
 8008a72:	e7e9      	b.n	8008a48 <Get_Rank+0xc>
		Rank_t =0;
 8008a74:	2200      	movs	r2, #0
 8008a76:	4b04      	ldr	r3, [pc, #16]	; (8008a88 <Get_Rank+0x4c>)
 8008a78:	2000      	movs	r0, #0
 8008a7a:	721a      	strb	r2, [r3, #8]
 8008a7c:	e7e4      	b.n	8008a48 <Get_Rank+0xc>
		Rank_t =2;
 8008a7e:	2202      	movs	r2, #2
 8008a80:	4b01      	ldr	r3, [pc, #4]	; (8008a88 <Get_Rank+0x4c>)
 8008a82:	3801      	subs	r0, #1
 8008a84:	721a      	strb	r2, [r3, #8]
 8008a86:	e7df      	b.n	8008a48 <Get_Rank+0xc>
 8008a88:	200017ac 	.word	0x200017ac
 8008a8c:	08019b2c 	.word	0x08019b2c
 8008a90:	08019b30 	.word	0x08019b30

08008a94 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port,char *side){
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(ADC_port == 2 || ADC_port == 3){
 8008a96:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port,char *side){
 8008a98:	0004      	movs	r4, r0
 8008a9a:	000d      	movs	r5, r1
	if(ADC_port == 2 || ADC_port == 3){
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d903      	bls.n	8008aa8 <ADCSelectChannel+0x14>
	ADC_Channels_Config(&hadc);
 8008aa0:	481d      	ldr	r0, [pc, #116]	; (8008b18 <ADCSelectChannel+0x84>)
 8008aa2:	f7ff fe15 	bl	80086d0 <ADC_Channels_Config>
}
 8008aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008aa8:	f005 fb06 	bl	800e0b8 <GetUart>
 8008aac:	f00a fad0 	bl	8013050 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] =CUSTOM;
 8008ab0:	2206      	movs	r2, #6
 8008ab2:	4b1a      	ldr	r3, [pc, #104]	; (8008b1c <ADCSelectChannel+0x88>)
		Channel =Get_channel(GetUart(ADC_port),side);
 8008ab4:	0020      	movs	r0, r4
		portStatus[ADC_port - 1] =CUSTOM;
 8008ab6:	191b      	adds	r3, r3, r4
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	701a      	strb	r2, [r3, #0]
		Channel =Get_channel(GetUart(ADC_port),side);
 8008abc:	f005 fafc 	bl	800e0b8 <GetUart>
	if(huart->Instance == USART2 && side == "top")
 8008ac0:	4a17      	ldr	r2, [pc, #92]	; (8008b20 <ADCSelectChannel+0x8c>)
 8008ac2:	6803      	ldr	r3, [r0, #0]
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d012      	beq.n	8008aee <ADCSelectChannel+0x5a>
	else if(huart->Instance == USART6 && side == "top")
 8008ac8:	4a16      	ldr	r2, [pc, #88]	; (8008b24 <ADCSelectChannel+0x90>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d017      	beq.n	8008afe <ADCSelectChannel+0x6a>
		Channel =Get_channel(GetUart(ADC_port),side);
 8008ace:	237c      	movs	r3, #124	; 0x7c
 8008ad0:	4e15      	ldr	r6, [pc, #84]	; (8008b28 <ADCSelectChannel+0x94>)
		Rank_t =Get_Rank(ADC_port,side);
 8008ad2:	0029      	movs	r1, r5
 8008ad4:	0020      	movs	r0, r4
		Channel =Get_channel(GetUart(ADC_port),side);
 8008ad6:	54f7      	strb	r7, [r6, r3]
		Rank_t =Get_Rank(ADC_port,side);
 8008ad8:	f7ff ffb0 	bl	8008a3c <Get_Rank>
 8008adc:	4b13      	ldr	r3, [pc, #76]	; (8008b2c <ADCSelectChannel+0x98>)
 8008ade:	7218      	strb	r0, [r3, #8]
		if(ADC_flag == 0)
 8008ae0:	2368      	movs	r3, #104	; 0x68
 8008ae2:	5cf3      	ldrb	r3, [r6, r3]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1db      	bne.n	8008aa0 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 8008ae8:	f7ff fdc8 	bl	800867c <MX_ADC_Init>
 8008aec:	e7d8      	b.n	8008aa0 <ADCSelectChannel+0xc>
	if(huart->Instance == USART2 && side == "top")
 8008aee:	4b10      	ldr	r3, [pc, #64]	; (8008b30 <ADCSelectChannel+0x9c>)
 8008af0:	429d      	cmp	r5, r3
 8008af2:	d00e      	beq.n	8008b12 <ADCSelectChannel+0x7e>
	else if(huart->Instance == USART2 && side == "bottom")
 8008af4:	4b0f      	ldr	r3, [pc, #60]	; (8008b34 <ADCSelectChannel+0xa0>)
 8008af6:	429d      	cmp	r5, r3
 8008af8:	d1e9      	bne.n	8008ace <ADCSelectChannel+0x3a>
		return ADC_CHANNEL_3;
 8008afa:	2703      	movs	r7, #3
 8008afc:	e7e7      	b.n	8008ace <ADCSelectChannel+0x3a>
	else if(huart->Instance == USART6 && side == "top")
 8008afe:	4b0c      	ldr	r3, [pc, #48]	; (8008b30 <ADCSelectChannel+0x9c>)
 8008b00:	429d      	cmp	r5, r3
 8008b02:	d004      	beq.n	8008b0e <ADCSelectChannel+0x7a>
	else if(huart->Instance == USART6 && side == "bottom")
 8008b04:	4b0b      	ldr	r3, [pc, #44]	; (8008b34 <ADCSelectChannel+0xa0>)
 8008b06:	429d      	cmp	r5, r3
 8008b08:	d1e1      	bne.n	8008ace <ADCSelectChannel+0x3a>
		return ADC_CHANNEL_5;
 8008b0a:	2705      	movs	r7, #5
 8008b0c:	e7df      	b.n	8008ace <ADCSelectChannel+0x3a>
		return ADC_CHANNEL_4;
 8008b0e:	2704      	movs	r7, #4
 8008b10:	e7dd      	b.n	8008ace <ADCSelectChannel+0x3a>
		return ADC_CHANNEL_2;
 8008b12:	2702      	movs	r7, #2
 8008b14:	e7db      	b.n	8008ace <ADCSelectChannel+0x3a>
 8008b16:	46c0      	nop			; (mov r8, r8)
 8008b18:	20006d84 	.word	0x20006d84
 8008b1c:	20000c2c 	.word	0x20000c2c
 8008b20:	40004400 	.word	0x40004400
 8008b24:	40011400 	.word	0x40011400
 8008b28:	2000172c 	.word	0x2000172c
 8008b2c:	200017ac 	.word	0x200017ac
 8008b30:	08019b2c 	.word	0x08019b2c
 8008b34:	08019b30 	.word	0x08019b30

08008b38 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	4647      	mov	r7, r8
 8008b3c:	46ce      	mov	lr, r9
	if(ADC_flag == 1){
 8008b3e:	2368      	movs	r3, #104	; 0x68
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008b40:	b580      	push	{r7, lr}
	if(ADC_flag == 1){
 8008b42:	4d3a      	ldr	r5, [pc, #232]	; (8008c2c <ReadADCChannel+0xf4>)
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008b44:	0007      	movs	r7, r0
	if(ADC_flag == 1){
 8008b46:	5ceb      	ldrb	r3, [r5, r3]
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008b48:	000c      	movs	r4, r1
 8008b4a:	0016      	movs	r6, r2
	if(ADC_flag == 1){
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d00b      	beq.n	8008b68 <ReadADCChannel+0x30>
 8008b50:	4c37      	ldr	r4, [pc, #220]	; (8008c30 <ReadADCChannel+0xf8>)
	*ADC_Value =(float )ADCchannelvalue[Rank_t];
 8008b52:	7a23      	ldrb	r3, [r4, #8]
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	18e4      	adds	r4, r4, r3
 8008b58:	89a0      	ldrh	r0, [r4, #12]
 8008b5a:	f7f8 fb3b 	bl	80011d4 <__aeabi_ui2f>
 8008b5e:	6030      	str	r0, [r6, #0]
}
 8008b60:	bc0c      	pop	{r2, r3}
 8008b62:	4690      	mov	r8, r2
 8008b64:	4699      	mov	r9, r3
 8008b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel =Get_channel(GetUart(Port),side);
 8008b68:	f005 faa6 	bl	800e0b8 <GetUart>
	if(huart->Instance == USART2 && side == "top")
 8008b6c:	4a31      	ldr	r2, [pc, #196]	; (8008c34 <ReadADCChannel+0xfc>)
 8008b6e:	6803      	ldr	r3, [r0, #0]
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d03f      	beq.n	8008bf4 <ReadADCChannel+0xbc>
	else if(huart->Instance == USART6 && side == "top")
 8008b74:	4a30      	ldr	r2, [pc, #192]	; (8008c38 <ReadADCChannel+0x100>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d049      	beq.n	8008c0e <ReadADCChannel+0xd6>
		Channel =Get_channel(GetUart(Port),side);
 8008b7a:	237c      	movs	r3, #124	; 0x7c
 8008b7c:	464a      	mov	r2, r9
 8008b7e:	4698      	mov	r8, r3
		Rank_t =Get_Rank(Port,side);
 8008b80:	0021      	movs	r1, r4
 8008b82:	0038      	movs	r0, r7
		Channel =Get_channel(GetUart(Port),side);
 8008b84:	54ea      	strb	r2, [r5, r3]
		Rank_t =Get_Rank(Port,side);
 8008b86:	f7ff ff59 	bl	8008a3c <Get_Rank>
		sConfig.Channel =Channel;
 8008b8a:	4643      	mov	r3, r8
 8008b8c:	5ceb      	ldrb	r3, [r5, r3]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b8e:	0029      	movs	r1, r5
		sConfig.Channel =Channel;
 8008b90:	66eb      	str	r3, [r5, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008b92:	2380      	movs	r3, #128	; 0x80
 8008b94:	015b      	lsls	r3, r3, #5
 8008b96:	672b      	str	r3, [r5, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008b98:	2303      	movs	r3, #3
		Rank_t =Get_Rank(Port,side);
 8008b9a:	4c25      	ldr	r4, [pc, #148]	; (8008c30 <ReadADCChannel+0xf8>)
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b9c:	4f27      	ldr	r7, [pc, #156]	; (8008c3c <ReadADCChannel+0x104>)
		Rank_t =Get_Rank(Port,side);
 8008b9e:	7220      	strb	r0, [r4, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008ba0:	316c      	adds	r1, #108	; 0x6c
 8008ba2:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008ba4:	676b      	str	r3, [r5, #116]	; 0x74
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008ba6:	f007 fd83 	bl	80106b0 <HAL_ADC_ConfigChannel>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d12b      	bne.n	8008c06 <ReadADCChannel+0xce>
		HAL_ADC_Start(&hadc);
 8008bae:	0038      	movs	r0, r7
 8008bb0:	f007 fc52 	bl	8010458 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008bb4:	2164      	movs	r1, #100	; 0x64
 8008bb6:	0038      	movs	r0, r7
 8008bb8:	f007 fc9a 	bl	80104f0 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] =HAL_ADC_GetValue(&hadc);
 8008bbc:	0038      	movs	r0, r7
 8008bbe:	f007 fcfb 	bl	80105b8 <HAL_ADC_GetValue>
 8008bc2:	7a23      	ldrb	r3, [r4, #8]
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	18e3      	adds	r3, r4, r3
 8008bc8:	8198      	strh	r0, [r3, #12]
		HAL_ADC_Stop(&hadc);
 8008bca:	0038      	movs	r0, r7
 8008bcc:	f007 fc70 	bl	80104b0 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008bd0:	237c      	movs	r3, #124	; 0x7c
 8008bd2:	5ceb      	ldrb	r3, [r5, r3]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008bd4:	0029      	movs	r1, r5
		sConfig.Channel =Channel;
 8008bd6:	66eb      	str	r3, [r5, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 8008bd8:	4b19      	ldr	r3, [pc, #100]	; (8008c40 <ReadADCChannel+0x108>)
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008bda:	316c      	adds	r1, #108	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 8008bdc:	672b      	str	r3, [r5, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008bde:	2303      	movs	r3, #3
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008be0:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008be2:	676b      	str	r3, [r5, #116]	; 0x74
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008be4:	f007 fd64 	bl	80106b0 <HAL_ADC_ConfigChannel>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d0b2      	beq.n	8008b52 <ReadADCChannel+0x1a>
	HAL_Delay(100);
 8008bec:	2064      	movs	r0, #100	; 0x64
 8008bee:	f007 fab7 	bl	8010160 <HAL_Delay>
 8008bf2:	e7ae      	b.n	8008b52 <ReadADCChannel+0x1a>
	if(huart->Instance == USART2 && side == "top")
 8008bf4:	4b13      	ldr	r3, [pc, #76]	; (8008c44 <ReadADCChannel+0x10c>)
 8008bf6:	429c      	cmp	r4, r3
 8008bf8:	d012      	beq.n	8008c20 <ReadADCChannel+0xe8>
	else if(huart->Instance == USART2 && side == "bottom")
 8008bfa:	4b13      	ldr	r3, [pc, #76]	; (8008c48 <ReadADCChannel+0x110>)
 8008bfc:	429c      	cmp	r4, r3
 8008bfe:	d1bc      	bne.n	8008b7a <ReadADCChannel+0x42>
		return ADC_CHANNEL_3;
 8008c00:	2303      	movs	r3, #3
 8008c02:	4699      	mov	r9, r3
 8008c04:	e7b9      	b.n	8008b7a <ReadADCChannel+0x42>
	HAL_Delay(100);
 8008c06:	2064      	movs	r0, #100	; 0x64
 8008c08:	f007 faaa 	bl	8010160 <HAL_Delay>
 8008c0c:	e7cf      	b.n	8008bae <ReadADCChannel+0x76>
	else if(huart->Instance == USART6 && side == "top")
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	; (8008c44 <ReadADCChannel+0x10c>)
 8008c10:	429c      	cmp	r4, r3
 8008c12:	d008      	beq.n	8008c26 <ReadADCChannel+0xee>
	else if(huart->Instance == USART6 && side == "bottom")
 8008c14:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <ReadADCChannel+0x110>)
 8008c16:	429c      	cmp	r4, r3
 8008c18:	d1af      	bne.n	8008b7a <ReadADCChannel+0x42>
		return ADC_CHANNEL_5;
 8008c1a:	2305      	movs	r3, #5
 8008c1c:	4699      	mov	r9, r3
 8008c1e:	e7ac      	b.n	8008b7a <ReadADCChannel+0x42>
		return ADC_CHANNEL_2;
 8008c20:	2302      	movs	r3, #2
 8008c22:	4699      	mov	r9, r3
 8008c24:	e7a9      	b.n	8008b7a <ReadADCChannel+0x42>
		return ADC_CHANNEL_4;
 8008c26:	2304      	movs	r3, #4
 8008c28:	4699      	mov	r9, r3
 8008c2a:	e7a6      	b.n	8008b7a <ReadADCChannel+0x42>
 8008c2c:	2000172c 	.word	0x2000172c
 8008c30:	200017ac 	.word	0x200017ac
 8008c34:	40004400 	.word	0x40004400
 8008c38:	40011400 	.word	0x40011400
 8008c3c:	20006d84 	.word	0x20006d84
 8008c40:	00001001 	.word	0x00001001
 8008c44:	08019b2c 	.word	0x08019b2c
 8008c48:	08019b30 	.word	0x08019b30

08008c4c <buttonReleasedCallback>:
 8008c4c:	4770      	bx	lr
 8008c4e:	46c0      	nop			; (mov r8, r8)

08008c50 <buttonClickedCallback>:
 8008c50:	4770      	bx	lr
 8008c52:	46c0      	nop			; (mov r8, r8)

08008c54 <buttonDblClickedCallback>:
 8008c54:	4770      	bx	lr
 8008c56:	46c0      	nop			; (mov r8, r8)

08008c58 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port,uint8_t eventType){
}
 8008c58:	4770      	bx	lr
 8008c5a:	46c0      	nop			; (mov r8, r8)

08008c5c <buttonReleasedForYCallback>:
 8008c5c:	4770      	bx	lr
 8008c5e:	46c0      	nop			; (mov r8, r8)

08008c60 <CheckAttachedButtons>:
void CheckAttachedButtons(void){
 8008c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c62:	4645      	mov	r5, r8
 8008c64:	46de      	mov	lr, fp
 8008c66:	464e      	mov	r6, r9
 8008c68:	4657      	mov	r7, sl
 8008c6a:	4bc5      	ldr	r3, [pc, #788]	; (8008f80 <CheckAttachedButtons+0x320>)
 8008c6c:	b5e0      	push	{r5, r6, r7, lr}
 8008c6e:	4698      	mov	r8, r3
 8008c70:	001c      	movs	r4, r3
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8008c72:	2300      	movs	r3, #0
void CheckAttachedButtons(void){
 8008c74:	b08b      	sub	sp, #44	; 0x2c
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8008c76:	9304      	str	r3, [sp, #16]
 8008c78:	469b      	mov	fp, r3
			if(delayButtonStateReset == false)
 8008c7a:	4bc2      	ldr	r3, [pc, #776]	; (8008f84 <CheckAttachedButtons+0x324>)
void CheckAttachedButtons(void){
 8008c7c:	2501      	movs	r5, #1
			if(delayButtonStateReset == false)
 8008c7e:	4699      	mov	r9, r3
 8008c80:	b2eb      	uxtb	r3, r5
 8008c82:	469a      	mov	sl, r3
		if(button[i].type)			// Only check defined butons
 8008c84:	7aa3      	ldrb	r3, [r4, #10]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d100      	bne.n	8008c8c <CheckAttachedButtons+0x2c>
 8008c8a:	e0c0      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
			if(delayButtonStateReset == false)
 8008c8c:	464b      	mov	r3, r9
 8008c8e:	7d1b      	ldrb	r3, [r3, #20]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d100      	bne.n	8008c96 <CheckAttachedButtons+0x36>
				button[i].state =NONE;
 8008c94:	7263      	strb	r3, [r4, #9]
			GetPortGPIOs(i,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 8008c96:	ab04      	add	r3, sp, #16
 8008c98:	469c      	mov	ip, r3
 8008c9a:	270e      	movs	r7, #14
 8008c9c:	ae07      	add	r6, sp, #28
 8008c9e:	4467      	add	r7, ip
 8008ca0:	ab09      	add	r3, sp, #36	; 0x24
 8008ca2:	0032      	movs	r2, r6
 8008ca4:	a908      	add	r1, sp, #32
 8008ca6:	9700      	str	r7, [sp, #0]
 8008ca8:	4650      	mov	r0, sl
 8008caa:	f004 fc71 	bl	800d590 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8008cae:	8831      	ldrh	r1, [r6, #0]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	9808      	ldr	r0, [sp, #32]
 8008cb4:	f008 ff64 	bl	8011b80 <HAL_GPIO_WritePin>
			Delay_us(10);
 8008cb8:	200a      	movs	r0, #10
 8008cba:	f004 ffe7 	bl	800dc8c <StartMicroDelay>
			if(HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin) == GPIO_PIN_RESET){
 8008cbe:	8839      	ldrh	r1, [r7, #0]
 8008cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cc2:	f008 ff57 	bl	8011b74 <HAL_GPIO_ReadPin>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d100      	bne.n	8008ccc <CheckAttachedButtons+0x6c>
 8008cca:	e14b      	b.n	8008f64 <CheckAttachedButtons+0x304>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8008ccc:	8831      	ldrh	r1, [r6, #0]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	9808      	ldr	r0, [sp, #32]
 8008cd2:	f008 ff55 	bl	8011b80 <HAL_GPIO_WritePin>
			switch(button[i].type){
 8008cd6:	7aa3      	ldrb	r3, [r4, #10]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d100      	bne.n	8008cde <CheckAttachedButtons+0x7e>
 8008cdc:	e0a6      	b.n	8008e2c <CheckAttachedButtons+0x1cc>
 8008cde:	d800      	bhi.n	8008ce2 <CheckAttachedButtons+0x82>
 8008ce0:	e0a1      	b.n	8008e26 <CheckAttachedButtons+0x1c6>
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d100      	bne.n	8008ce8 <CheckAttachedButtons+0x88>
 8008ce6:	e170      	b.n	8008fca <CheckAttachedButtons+0x36a>
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d000      	beq.n	8008cee <CheckAttachedButtons+0x8e>
 8008cec:	e156      	b.n	8008f9c <CheckAttachedButtons+0x33c>
 8008cee:	4641      	mov	r1, r8
					if(connected == GPIO_PIN_SET)
 8008cf0:	4658      	mov	r0, fp
 8008cf2:	00aa      	lsls	r2, r5, #2
 8008cf4:	3138      	adds	r1, #56	; 0x38
 8008cf6:	588b      	ldr	r3, [r1, r2]
 8008cf8:	2801      	cmp	r0, #1
 8008cfa:	d100      	bne.n	8008cfe <CheckAttachedButtons+0x9e>
 8008cfc:	e170      	b.n	8008fe0 <CheckAttachedButtons+0x380>
					else if(connected == GPIO_PIN_RESET)
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d100      	bne.n	8008d04 <CheckAttachedButtons+0xa4>
 8008d02:	e217      	b.n	8009134 <CheckAttachedButtons+0x4d4>
			if(state == CLOSED || state == ON){
 8008d04:	9904      	ldr	r1, [sp, #16]
 8008d06:	2904      	cmp	r1, #4
 8008d08:	d100      	bne.n	8008d0c <CheckAttachedButtons+0xac>
 8008d0a:	e14f      	b.n	8008fac <CheckAttachedButtons+0x34c>
 8008d0c:	9904      	ldr	r1, [sp, #16]
 8008d0e:	2902      	cmp	r1, #2
 8008d10:	d100      	bne.n	8008d14 <CheckAttachedButtons+0xb4>
 8008d12:	e14b      	b.n	8008fac <CheckAttachedButtons+0x34c>
			if(state == OPEN || state == OFF){
 8008d14:	9904      	ldr	r1, [sp, #16]
 8008d16:	2903      	cmp	r1, #3
 8008d18:	d002      	beq.n	8008d20 <CheckAttachedButtons+0xc0>
 8008d1a:	489b      	ldr	r0, [pc, #620]	; (8008f88 <CheckAttachedButtons+0x328>)
 8008d1c:	2901      	cmp	r1, #1
 8008d1e:	d114      	bne.n	8008d4a <CheckAttachedButtons+0xea>
				if(releaseCounter[i] < 0xFFFF)
 8008d20:	4640      	mov	r0, r8
 8008d22:	3050      	adds	r0, #80	; 0x50
 8008d24:	5881      	ldr	r1, [r0, r2]
 8008d26:	4e99      	ldr	r6, [pc, #612]	; (8008f8c <CheckAttachedButtons+0x32c>)
 8008d28:	42b1      	cmp	r1, r6
 8008d2a:	d900      	bls.n	8008d2e <CheckAttachedButtons+0xce>
 8008d2c:	e092      	b.n	8008e54 <CheckAttachedButtons+0x1f4>
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008d2e:	464f      	mov	r7, r9
					++releaseCounter[i];		// Advance the debounce counter
 8008d30:	3101      	adds	r1, #1
 8008d32:	5081      	str	r1, [r0, r2]
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008d34:	7fbf      	ldrb	r7, [r7, #30]
 8008d36:	4996      	ldr	r1, [pc, #600]	; (8008f90 <CheckAttachedButtons+0x330>)
 8008d38:	4893      	ldr	r0, [pc, #588]	; (8008f88 <CheckAttachedButtons+0x328>)
 8008d3a:	5c69      	ldrb	r1, [r5, r1]
 8008d3c:	7946      	ldrb	r6, [r0, #5]
 8008d3e:	2f02      	cmp	r7, #2
 8008d40:	d100      	bne.n	8008d44 <CheckAttachedButtons+0xe4>
 8008d42:	e092      	b.n	8008e6a <CheckAttachedButtons+0x20a>
				else if(dblCounter[i] > BOS.buttons.maxInterClickTime){
 8008d44:	42b1      	cmp	r1, r6
 8008d46:	d900      	bls.n	8008d4a <CheckAttachedButtons+0xea>
 8008d48:	e139      	b.n	8008fbe <CheckAttachedButtons+0x35e>
 8008d4a:	4646      	mov	r6, r8
 8008d4c:	3650      	adds	r6, #80	; 0x50
 8008d4e:	58b6      	ldr	r6, [r6, r2]
			if(pressCounter[i] < BOS.buttons.debounce){
 8008d50:	8801      	ldrh	r1, [r0, #0]
 8008d52:	9603      	str	r6, [sp, #12]
 8008d54:	4299      	cmp	r1, r3
 8008d56:	d826      	bhi.n	8008da6 <CheckAttachedButtons+0x146>
				if(pressCounter[i] == BOS.buttons.debounce){
 8008d58:	d105      	bne.n	8008d66 <CheckAttachedButtons+0x106>
					button[i].state =PRESSED;			// Record a PRESSED event. This event is always reset on next tick.
 8008d5a:	2707      	movs	r7, #7
 8008d5c:	7267      	strb	r7, [r4, #9]
					++pressCounter[i];
 8008d5e:	4647      	mov	r7, r8
 8008d60:	3301      	adds	r3, #1
 8008d62:	3738      	adds	r7, #56	; 0x38
 8008d64:	50bb      	str	r3, [r7, r2]
				if(releaseCounter[i] > BOS.buttons.debounce)			// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8008d66:	9e03      	ldr	r6, [sp, #12]
 8008d68:	42b1      	cmp	r1, r6
 8008d6a:	d205      	bcs.n	8008d78 <CheckAttachedButtons+0x118>
					releaseCounter[i] =0;
 8008d6c:	4646      	mov	r6, r8
 8008d6e:	2700      	movs	r7, #0
 8008d70:	3650      	adds	r6, #80	; 0x50
 8008d72:	50b7      	str	r7, [r6, r2]
 8008d74:	2600      	movs	r6, #0
 8008d76:	9603      	str	r6, [sp, #12]
				if(pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500){
 8008d78:	8847      	ldrh	r7, [r0, #2]
 8008d7a:	9705      	str	r7, [sp, #20]
 8008d7c:	429f      	cmp	r7, r3
 8008d7e:	d300      	bcc.n	8008d82 <CheckAttachedButtons+0x122>
 8008d80:	e07a      	b.n	8008e78 <CheckAttachedButtons+0x218>
 8008d82:	27f4      	movs	r7, #244	; 0xf4
 8008d84:	37ff      	adds	r7, #255	; 0xff
 8008d86:	42bb      	cmp	r3, r7
 8008d88:	d900      	bls.n	8008d8c <CheckAttachedButtons+0x12c>
 8008d8a:	e075      	b.n	8008e78 <CheckAttachedButtons+0x218>
					if(clicked == 0)
 8008d8c:	464b      	mov	r3, r9
 8008d8e:	7f9b      	ldrb	r3, [r3, #30]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d100      	bne.n	8008d96 <CheckAttachedButtons+0x136>
 8008d94:	e1d8      	b.n	8009148 <CheckAttachedButtons+0x4e8>
					else if(clicked == 2){
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d105      	bne.n	8008da6 <CheckAttachedButtons+0x146>
						if(dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime){
 8008d9a:	4b7d      	ldr	r3, [pc, #500]	; (8008f90 <CheckAttachedButtons+0x330>)
 8008d9c:	7907      	ldrb	r7, [r0, #4]
 8008d9e:	5ceb      	ldrb	r3, [r5, r3]
 8008da0:	429f      	cmp	r7, r3
 8008da2:	d200      	bcs.n	8008da6 <CheckAttachedButtons+0x146>
 8008da4:	e1dc      	b.n	8009160 <CheckAttachedButtons+0x500>
			if(releaseCounter[i] < BOS.buttons.debounce){
 8008da6:	9b03      	ldr	r3, [sp, #12]
 8008da8:	4299      	cmp	r1, r3
 8008daa:	d822      	bhi.n	8008df2 <CheckAttachedButtons+0x192>
 8008dac:	4643      	mov	r3, r8
 8008dae:	8840      	ldrh	r0, [r0, #2]
 8008db0:	3338      	adds	r3, #56	; 0x38
 8008db2:	589b      	ldr	r3, [r3, r2]
 8008db4:	9005      	str	r0, [sp, #20]
				if(releaseCounter[i] == BOS.buttons.debounce){
 8008db6:	9803      	ldr	r0, [sp, #12]
 8008db8:	4281      	cmp	r1, r0
 8008dba:	d100      	bne.n	8008dbe <CheckAttachedButtons+0x15e>
 8008dbc:	e19b      	b.n	80090f6 <CheckAttachedButtons+0x496>
 8008dbe:	4640      	mov	r0, r8
 8008dc0:	3050      	adds	r0, #80	; 0x50
 8008dc2:	5880      	ldr	r0, [r0, r2]
				if(pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008dc4:	4299      	cmp	r1, r3
 8008dc6:	d203      	bcs.n	8008dd0 <CheckAttachedButtons+0x170>
					pressCounter[i] =0;
 8008dc8:	4643      	mov	r3, r8
 8008dca:	2100      	movs	r1, #0
 8008dcc:	3338      	adds	r3, #56	; 0x38
 8008dce:	5099      	str	r1, [r3, r2]
				if(releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500){
 8008dd0:	9b05      	ldr	r3, [sp, #20]
 8008dd2:	4283      	cmp	r3, r0
 8008dd4:	d300      	bcc.n	8008dd8 <CheckAttachedButtons+0x178>
 8008dd6:	e091      	b.n	8008efc <CheckAttachedButtons+0x29c>
 8008dd8:	23f4      	movs	r3, #244	; 0xf4
 8008dda:	33ff      	adds	r3, #255	; 0xff
 8008ddc:	4298      	cmp	r0, r3
 8008dde:	d900      	bls.n	8008de2 <CheckAttachedButtons+0x182>
 8008de0:	e08c      	b.n	8008efc <CheckAttachedButtons+0x29c>
					if(clicked == 1){
 8008de2:	464b      	mov	r3, r9
 8008de4:	7f9b      	ldrb	r3, [r3, #30]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d100      	bne.n	8008dec <CheckAttachedButtons+0x18c>
 8008dea:	e15c      	b.n	80090a6 <CheckAttachedButtons+0x446>
					else if(clicked == 3){
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d100      	bne.n	8008df2 <CheckAttachedButtons+0x192>
 8008df0:	e12d      	b.n	800904e <CheckAttachedButtons+0x3ee>
			switch(button[i].state){
 8008df2:	7a63      	ldrb	r3, [r4, #9]
 8008df4:	3b05      	subs	r3, #5
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b09      	cmp	r3, #9
 8008dfa:	d808      	bhi.n	8008e0e <CheckAttachedButtons+0x1ae>
 8008dfc:	4a65      	ldr	r2, [pc, #404]	; (8008f94 <CheckAttachedButtons+0x334>)
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	58d3      	ldr	r3, [r2, r3]
 8008e02:	469f      	mov	pc, r3
					buttonPressedCallback(i);
 8008e04:	4650      	mov	r0, sl
 8008e06:	f7ff fa13 	bl	8008230 <buttonPressedCallback>
					button[i].state =NONE;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	7263      	strb	r3, [r4, #9]
 8008e0e:	3501      	adds	r5, #1
 8008e10:	3409      	adds	r4, #9
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8008e12:	2d06      	cmp	r5, #6
 8008e14:	d000      	beq.n	8008e18 <CheckAttachedButtons+0x1b8>
 8008e16:	e733      	b.n	8008c80 <CheckAttachedButtons+0x20>
}
 8008e18:	b00b      	add	sp, #44	; 0x2c
 8008e1a:	bc3c      	pop	{r2, r3, r4, r5}
 8008e1c:	4690      	mov	r8, r2
 8008e1e:	4699      	mov	r9, r3
 8008e20:	46a2      	mov	sl, r4
 8008e22:	46ab      	mov	fp, r5
 8008e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch(button[i].type){
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d000      	beq.n	8008e2c <CheckAttachedButtons+0x1cc>
 8008e2a:	e0b7      	b.n	8008f9c <CheckAttachedButtons+0x33c>
 8008e2c:	4641      	mov	r1, r8
					if(connected == GPIO_PIN_SET)
 8008e2e:	4658      	mov	r0, fp
 8008e30:	00aa      	lsls	r2, r5, #2
 8008e32:	3138      	adds	r1, #56	; 0x38
 8008e34:	588b      	ldr	r3, [r1, r2]
 8008e36:	2801      	cmp	r0, #1
 8008e38:	d100      	bne.n	8008e3c <CheckAttachedButtons+0x1dc>
 8008e3a:	e163      	b.n	8009104 <CheckAttachedButtons+0x4a4>
					else if(connected == GPIO_PIN_RESET)
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d000      	beq.n	8008e42 <CheckAttachedButtons+0x1e2>
 8008e40:	e760      	b.n	8008d04 <CheckAttachedButtons+0xa4>
				if(releaseCounter[i] < 0xFFFF)
 8008e42:	4640      	mov	r0, r8
 8008e44:	2103      	movs	r1, #3
 8008e46:	3050      	adds	r0, #80	; 0x50
 8008e48:	9104      	str	r1, [sp, #16]
 8008e4a:	4e50      	ldr	r6, [pc, #320]	; (8008f8c <CheckAttachedButtons+0x32c>)
 8008e4c:	5881      	ldr	r1, [r0, r2]
 8008e4e:	42b1      	cmp	r1, r6
 8008e50:	d800      	bhi.n	8008e54 <CheckAttachedButtons+0x1f4>
 8008e52:	e76c      	b.n	8008d2e <CheckAttachedButtons+0xce>
					releaseCounter[i] =0;		// Reset debounce counter
 8008e54:	2100      	movs	r1, #0
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008e56:	464f      	mov	r7, r9
					releaseCounter[i] =0;		// Reset debounce counter
 8008e58:	5081      	str	r1, [r0, r2]
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008e5a:	7fbf      	ldrb	r7, [r7, #30]
 8008e5c:	494c      	ldr	r1, [pc, #304]	; (8008f90 <CheckAttachedButtons+0x330>)
 8008e5e:	484a      	ldr	r0, [pc, #296]	; (8008f88 <CheckAttachedButtons+0x328>)
 8008e60:	5c69      	ldrb	r1, [r5, r1]
 8008e62:	7946      	ldrb	r6, [r0, #5]
 8008e64:	2f02      	cmp	r7, #2
 8008e66:	d000      	beq.n	8008e6a <CheckAttachedButtons+0x20a>
 8008e68:	e76c      	b.n	8008d44 <CheckAttachedButtons+0xe4>
 8008e6a:	42b1      	cmp	r1, r6
 8008e6c:	d900      	bls.n	8008e70 <CheckAttachedButtons+0x210>
 8008e6e:	e0a6      	b.n	8008fbe <CheckAttachedButtons+0x35e>
					++dblCounter[i];
 8008e70:	4e47      	ldr	r6, [pc, #284]	; (8008f90 <CheckAttachedButtons+0x330>)
 8008e72:	3101      	adds	r1, #1
 8008e74:	55a9      	strb	r1, [r5, r6]
 8008e76:	e768      	b.n	8008d4a <CheckAttachedButtons+0xea>
				else if(pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF){
 8008e78:	4f47      	ldr	r7, [pc, #284]	; (8008f98 <CheckAttachedButtons+0x338>)
 8008e7a:	46bc      	mov	ip, r7
 8008e7c:	001f      	movs	r7, r3
 8008e7e:	3ff5      	subs	r7, #245	; 0xf5
 8008e80:	3fff      	subs	r7, #255	; 0xff
 8008e82:	4567      	cmp	r7, ip
 8008e84:	d900      	bls.n	8008e88 <CheckAttachedButtons+0x228>
 8008e86:	e78e      	b.n	8008da6 <CheckAttachedButtons+0x146>
					if(clicked)
 8008e88:	464f      	mov	r7, r9
 8008e8a:	7fbf      	ldrb	r7, [r7, #30]
 8008e8c:	2f00      	cmp	r7, #0
 8008e8e:	d002      	beq.n	8008e96 <CheckAttachedButtons+0x236>
						clicked =0;						// Cannot be a click
 8008e90:	2700      	movs	r7, #0
 8008e92:	464e      	mov	r6, r9
 8008e94:	77b7      	strb	r7, [r6, #30]
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 8008e96:	7ae7      	ldrb	r7, [r4, #11]
 8008e98:	46bc      	mov	ip, r7
	t1 *=1000;
 8008e9a:	4666      	mov	r6, ip
 8008e9c:	017f      	lsls	r7, r7, #5
 8008e9e:	1bbf      	subs	r7, r7, r6
 8008ea0:	00bf      	lsls	r7, r7, #2
 8008ea2:	4467      	add	r7, ip
 8008ea4:	00ff      	lsls	r7, r7, #3
	if(pressCounter[port] == t1){
 8008ea6:	429f      	cmp	r7, r3
 8008ea8:	d100      	bne.n	8008eac <CheckAttachedButtons+0x24c>
 8008eaa:	e0e5      	b.n	8009078 <CheckAttachedButtons+0x418>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 8008eac:	7b26      	ldrb	r6, [r4, #12]
 8008eae:	46b4      	mov	ip, r6
	t2 *=1000;
 8008eb0:	0177      	lsls	r7, r6, #5
 8008eb2:	1bbf      	subs	r7, r7, r6
 8008eb4:	00bf      	lsls	r7, r7, #2
 8008eb6:	4467      	add	r7, ip
 8008eb8:	00ff      	lsls	r7, r7, #3
	else if(pressCounter[port] == t2){
 8008eba:	429f      	cmp	r7, r3
 8008ebc:	d009      	beq.n	8008ed2 <CheckAttachedButtons+0x272>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 8008ebe:	7b66      	ldrb	r6, [r4, #13]
 8008ec0:	46b4      	mov	ip, r6
	t3 *=1000;
 8008ec2:	0177      	lsls	r7, r6, #5
 8008ec4:	1bbf      	subs	r7, r7, r6
 8008ec6:	00bf      	lsls	r7, r7, #2
 8008ec8:	4467      	add	r7, ip
 8008eca:	00ff      	lsls	r7, r7, #3
	else if(pressCounter[port] == t3){
 8008ecc:	429f      	cmp	r7, r3
 8008ece:	d000      	beq.n	8008ed2 <CheckAttachedButtons+0x272>
 8008ed0:	e769      	b.n	8008da6 <CheckAttachedButtons+0x146>
		button[port].state =PRESSED_FOR_X2_SEC;
 8008ed2:	200a      	movs	r0, #10
 8008ed4:	7260      	strb	r0, [r4, #9]
			if(releaseCounter[i] < BOS.buttons.debounce){
 8008ed6:	9803      	ldr	r0, [sp, #12]
 8008ed8:	4281      	cmp	r1, r0
 8008eda:	d800      	bhi.n	8008ede <CheckAttachedButtons+0x27e>
 8008edc:	e76b      	b.n	8008db6 <CheckAttachedButtons+0x156>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)){
 8008ede:	464b      	mov	r3, r9
 8008ee0:	7d1b      	ldrb	r3, [r3, #20]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d193      	bne.n	8008e0e <CheckAttachedButtons+0x1ae>
 8008ee6:	7c63      	ldrb	r3, [r4, #17]
 8008ee8:	071b      	lsls	r3, r3, #28
 8008eea:	d590      	bpl.n	8008e0e <CheckAttachedButtons+0x1ae>
						delayButtonStateReset = true;
 8008eec:	2301      	movs	r3, #1
 8008eee:	464a      	mov	r2, r9
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 8008ef0:	2102      	movs	r1, #2
 8008ef2:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 8008ef4:	7513      	strb	r3, [r2, #20]
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 8008ef6:	f7ff feaf 	bl	8008c58 <buttonPressedForXCallback>
 8008efa:	e788      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
				else if(releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF){
 8008efc:	0003      	movs	r3, r0
 8008efe:	4a26      	ldr	r2, [pc, #152]	; (8008f98 <CheckAttachedButtons+0x338>)
 8008f00:	3bf5      	subs	r3, #245	; 0xf5
 8008f02:	3bff      	subs	r3, #255	; 0xff
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d900      	bls.n	8008f0a <CheckAttachedButtons+0x2aa>
 8008f08:	e773      	b.n	8008df2 <CheckAttachedButtons+0x192>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008f0a:	7ba1      	ldrb	r1, [r4, #14]
	t1 *=1000;
 8008f0c:	014b      	lsls	r3, r1, #5
 8008f0e:	1a5b      	subs	r3, r3, r1
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	185b      	adds	r3, r3, r1
 8008f14:	00db      	lsls	r3, r3, #3
	if(releaseCounter[port] == t1){
 8008f16:	4283      	cmp	r3, r0
 8008f18:	d100      	bne.n	8008f1c <CheckAttachedButtons+0x2bc>
 8008f1a:	e0d9      	b.n	80090d0 <CheckAttachedButtons+0x470>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008f1c:	7be1      	ldrb	r1, [r4, #15]
	t2 *=1000;
 8008f1e:	014b      	lsls	r3, r1, #5
 8008f20:	1a5b      	subs	r3, r3, r1
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	185b      	adds	r3, r3, r1
 8008f26:	00db      	lsls	r3, r3, #3
	else if(releaseCounter[port] == t2){
 8008f28:	4283      	cmp	r3, r0
 8008f2a:	d008      	beq.n	8008f3e <CheckAttachedButtons+0x2de>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008f2c:	7c21      	ldrb	r1, [r4, #16]
	t3 *=1000;
 8008f2e:	014b      	lsls	r3, r1, #5
 8008f30:	1a5b      	subs	r3, r3, r1
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	185b      	adds	r3, r3, r1
 8008f36:	00db      	lsls	r3, r3, #3
	else if(releaseCounter[port] == t3){
 8008f38:	4283      	cmp	r3, r0
 8008f3a:	d000      	beq.n	8008f3e <CheckAttachedButtons+0x2de>
 8008f3c:	e759      	b.n	8008df2 <CheckAttachedButtons+0x192>
		button[port].state =RELEASED_FOR_Y2_SEC;
 8008f3e:	230d      	movs	r3, #13
 8008f40:	7263      	strb	r3, [r4, #9]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)){
 8008f42:	464b      	mov	r3, r9
 8008f44:	7d1b      	ldrb	r3, [r3, #20]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d000      	beq.n	8008f4c <CheckAttachedButtons+0x2ec>
 8008f4a:	e760      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
 8008f4c:	7c63      	ldrb	r3, [r4, #17]
 8008f4e:	065b      	lsls	r3, r3, #25
 8008f50:	d400      	bmi.n	8008f54 <CheckAttachedButtons+0x2f4>
 8008f52:	e75c      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
						delayButtonStateReset = true;
 8008f54:	2301      	movs	r3, #1
 8008f56:	464a      	mov	r2, r9
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 8008f58:	2102      	movs	r1, #2
 8008f5a:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 8008f5c:	7513      	strb	r3, [r2, #20]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 8008f5e:	f7ff fe7d 	bl	8008c5c <buttonReleasedForYCallback>
 8008f62:	e754      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
				HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_SET);
 8008f64:	8831      	ldrh	r1, [r6, #0]
 8008f66:	2201      	movs	r2, #1
 8008f68:	9808      	ldr	r0, [sp, #32]
 8008f6a:	f008 fe09 	bl	8011b80 <HAL_GPIO_WritePin>
				Delay_us(10);
 8008f6e:	200a      	movs	r0, #10
 8008f70:	f004 fe8c 	bl	800dc8c <StartMicroDelay>
				connected =HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin);
 8008f74:	8839      	ldrh	r1, [r7, #0]
 8008f76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f78:	f008 fdfc 	bl	8011b74 <HAL_GPIO_ReadPin>
 8008f7c:	4683      	mov	fp, r0
 8008f7e:	e6a5      	b.n	8008ccc <CheckAttachedButtons+0x6c>
 8008f80:	2000172c 	.word	0x2000172c
 8008f84:	200017ac 	.word	0x200017ac
 8008f88:	20006ccc 	.word	0x20006ccc
 8008f8c:	0000fffe 	.word	0x0000fffe
 8008f90:	200017c4 	.word	0x200017c4
 8008f94:	08018bac 	.word	0x08018bac
 8008f98:	0000fe0a 	.word	0x0000fe0a
 8008f9c:	4643      	mov	r3, r8
			if(state == CLOSED || state == ON){
 8008f9e:	9904      	ldr	r1, [sp, #16]
 8008fa0:	3338      	adds	r3, #56	; 0x38
 8008fa2:	00aa      	lsls	r2, r5, #2
 8008fa4:	589b      	ldr	r3, [r3, r2]
 8008fa6:	2904      	cmp	r1, #4
 8008fa8:	d000      	beq.n	8008fac <CheckAttachedButtons+0x34c>
 8008faa:	e6af      	b.n	8008d0c <CheckAttachedButtons+0xac>
				if(pressCounter[i] < 0xFFFF)
 8008fac:	4972      	ldr	r1, [pc, #456]	; (8009178 <CheckAttachedButtons+0x518>)
 8008fae:	428b      	cmp	r3, r1
 8008fb0:	d819      	bhi.n	8008fe6 <CheckAttachedButtons+0x386>
					++pressCounter[i];			// Advance the debounce counter
 8008fb2:	4641      	mov	r1, r8
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	3138      	adds	r1, #56	; 0x38
 8008fb8:	508b      	str	r3, [r1, r2]
 8008fba:	4870      	ldr	r0, [pc, #448]	; (800917c <CheckAttachedButtons+0x51c>)
 8008fbc:	e6c5      	b.n	8008d4a <CheckAttachedButtons+0xea>
					clicked =0;
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	464e      	mov	r6, r9
 8008fc2:	77b1      	strb	r1, [r6, #30]
					dblCounter[i] =0;			// Reset the inter-click counter
 8008fc4:	4e6e      	ldr	r6, [pc, #440]	; (8009180 <CheckAttachedButtons+0x520>)
 8008fc6:	55a9      	strb	r1, [r5, r6]
 8008fc8:	e6bf      	b.n	8008d4a <CheckAttachedButtons+0xea>
 8008fca:	4641      	mov	r1, r8
					if(connected == GPIO_PIN_SET)
 8008fcc:	4658      	mov	r0, fp
 8008fce:	00aa      	lsls	r2, r5, #2
 8008fd0:	3138      	adds	r1, #56	; 0x38
 8008fd2:	588b      	ldr	r3, [r1, r2]
 8008fd4:	2801      	cmp	r0, #1
 8008fd6:	d100      	bne.n	8008fda <CheckAttachedButtons+0x37a>
 8008fd8:	e09d      	b.n	8009116 <CheckAttachedButtons+0x4b6>
					else if(connected == GPIO_PIN_RESET)
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d000      	beq.n	8008fe0 <CheckAttachedButtons+0x380>
 8008fde:	e691      	b.n	8008d04 <CheckAttachedButtons+0xa4>
						state =OFF;
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	9104      	str	r1, [sp, #16]
 8008fe4:	e69c      	b.n	8008d20 <CheckAttachedButtons+0xc0>
					pressCounter[i] =0;			// Reset debounce counter
 8008fe6:	4643      	mov	r3, r8
 8008fe8:	2100      	movs	r1, #0
 8008fea:	3338      	adds	r3, #56	; 0x38
 8008fec:	5099      	str	r1, [r3, r2]
 8008fee:	4863      	ldr	r0, [pc, #396]	; (800917c <CheckAttachedButtons+0x51c>)
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	e6aa      	b.n	8008d4a <CheckAttachedButtons+0xea>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)){
 8008ff4:	464b      	mov	r3, r9
 8008ff6:	7d1b      	ldrb	r3, [r3, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d000      	beq.n	8008ffe <CheckAttachedButtons+0x39e>
 8008ffc:	e707      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
 8008ffe:	7c63      	ldrb	r3, [r4, #17]
 8009000:	06db      	lsls	r3, r3, #27
 8009002:	d400      	bmi.n	8009006 <CheckAttachedButtons+0x3a6>
 8009004:	e703      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
						delayButtonStateReset = true;
 8009006:	2301      	movs	r3, #1
 8009008:	464a      	mov	r2, r9
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 800900a:	2103      	movs	r1, #3
 800900c:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 800900e:	7513      	strb	r3, [r2, #20]
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 8009010:	f7ff fe22 	bl	8008c58 <buttonPressedForXCallback>
 8009014:	e6fb      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
					buttonReleasedCallback(i);
 8009016:	4650      	mov	r0, sl
 8009018:	f7ff fe18 	bl	8008c4c <buttonReleasedCallback>
					button[i].state =NONE;
 800901c:	2300      	movs	r3, #0
 800901e:	3501      	adds	r5, #1
 8009020:	7263      	strb	r3, [r4, #9]
 8009022:	3409      	adds	r4, #9
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8009024:	2d06      	cmp	r5, #6
 8009026:	d000      	beq.n	800902a <CheckAttachedButtons+0x3ca>
 8009028:	e62a      	b.n	8008c80 <CheckAttachedButtons+0x20>
 800902a:	e6f5      	b.n	8008e18 <CheckAttachedButtons+0x1b8>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)){
 800902c:	464b      	mov	r3, r9
 800902e:	7d1b      	ldrb	r3, [r3, #20]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d000      	beq.n	8009036 <CheckAttachedButtons+0x3d6>
 8009034:	e6eb      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
 8009036:	7c63      	ldrb	r3, [r4, #17]
 8009038:	2b7f      	cmp	r3, #127	; 0x7f
 800903a:	d800      	bhi.n	800903e <CheckAttachedButtons+0x3de>
 800903c:	e6e7      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
						delayButtonStateReset = true;
 800903e:	2301      	movs	r3, #1
 8009040:	464a      	mov	r2, r9
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 8009042:	2103      	movs	r1, #3
 8009044:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 8009046:	7513      	strb	r3, [r2, #20]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 8009048:	f7ff fe08 	bl	8008c5c <buttonReleasedForYCallback>
 800904c:	e6df      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
						button[i].state =DBL_CLICKED;			// Record a double button click event
 800904e:	3303      	adds	r3, #3
 8009050:	7263      	strb	r3, [r4, #9]
						clicked =0;			// Prepare for a single click
 8009052:	464a      	mov	r2, r9
 8009054:	2300      	movs	r3, #0
 8009056:	7793      	strb	r3, [r2, #30]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)){
 8009058:	464b      	mov	r3, r9
 800905a:	7d1b      	ldrb	r3, [r3, #20]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d000      	beq.n	8009062 <CheckAttachedButtons+0x402>
 8009060:	e6d5      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
 8009062:	7c63      	ldrb	r3, [r4, #17]
 8009064:	079b      	lsls	r3, r3, #30
 8009066:	d400      	bmi.n	800906a <CheckAttachedButtons+0x40a>
 8009068:	e6d1      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
						delayButtonStateReset = true;
 800906a:	2301      	movs	r3, #1
 800906c:	464a      	mov	r2, r9
						buttonDblClickedCallback(i);
 800906e:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 8009070:	7513      	strb	r3, [r2, #20]
						buttonDblClickedCallback(i);
 8009072:	f7ff fdef 	bl	8008c54 <buttonDblClickedCallback>
 8009076:	e6ca      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
		button[port].state =PRESSED_FOR_X1_SEC;
 8009078:	2009      	movs	r0, #9
 800907a:	7260      	strb	r0, [r4, #9]
			if(releaseCounter[i] < BOS.buttons.debounce){
 800907c:	9803      	ldr	r0, [sp, #12]
 800907e:	4281      	cmp	r1, r0
 8009080:	d800      	bhi.n	8009084 <CheckAttachedButtons+0x424>
 8009082:	e698      	b.n	8008db6 <CheckAttachedButtons+0x156>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)){
 8009084:	464b      	mov	r3, r9
 8009086:	7d1b      	ldrb	r3, [r3, #20]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d000      	beq.n	800908e <CheckAttachedButtons+0x42e>
 800908c:	e6bf      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
 800908e:	7c63      	ldrb	r3, [r4, #17]
 8009090:	075b      	lsls	r3, r3, #29
 8009092:	d400      	bmi.n	8009096 <CheckAttachedButtons+0x436>
 8009094:	e6bb      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
						delayButtonStateReset = true;
 8009096:	2301      	movs	r3, #1
 8009098:	464a      	mov	r2, r9
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 800909a:	2101      	movs	r1, #1
 800909c:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 800909e:	7513      	strb	r3, [r2, #20]
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 80090a0:	f7ff fdda 	bl	8008c58 <buttonPressedForXCallback>
 80090a4:	e6b3      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
						clicked =2;			// Prepare for a double click
 80090a6:	464a      	mov	r2, r9
						button[i].state =CLICKED;	// Record a single button click event
 80090a8:	3304      	adds	r3, #4
 80090aa:	7263      	strb	r3, [r4, #9]
						clicked =2;			// Prepare for a double click
 80090ac:	3b03      	subs	r3, #3
 80090ae:	7793      	strb	r3, [r2, #30]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)){
 80090b0:	464b      	mov	r3, r9
 80090b2:	7d1b      	ldrb	r3, [r3, #20]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d000      	beq.n	80090ba <CheckAttachedButtons+0x45a>
 80090b8:	e6a9      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
 80090ba:	7c62      	ldrb	r2, [r4, #17]
 80090bc:	3301      	adds	r3, #1
 80090be:	4213      	tst	r3, r2
 80090c0:	d100      	bne.n	80090c4 <CheckAttachedButtons+0x464>
 80090c2:	e6a4      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
						delayButtonStateReset = true;
 80090c4:	464a      	mov	r2, r9
						buttonClickedCallback(i);
 80090c6:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 80090c8:	7513      	strb	r3, [r2, #20]
						buttonClickedCallback(i);
 80090ca:	f7ff fdc1 	bl	8008c50 <buttonClickedCallback>
 80090ce:	e69e      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
		button[port].state =RELEASED_FOR_Y1_SEC;
 80090d0:	230c      	movs	r3, #12
 80090d2:	7263      	strb	r3, [r4, #9]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)){
 80090d4:	464b      	mov	r3, r9
 80090d6:	7d1b      	ldrb	r3, [r3, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d000      	beq.n	80090de <CheckAttachedButtons+0x47e>
 80090dc:	e697      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
 80090de:	7c63      	ldrb	r3, [r4, #17]
 80090e0:	069b      	lsls	r3, r3, #26
 80090e2:	d400      	bmi.n	80090e6 <CheckAttachedButtons+0x486>
 80090e4:	e693      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
						delayButtonStateReset = true;
 80090e6:	2301      	movs	r3, #1
 80090e8:	464a      	mov	r2, r9
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 80090ea:	2101      	movs	r1, #1
 80090ec:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 80090ee:	7513      	strb	r3, [r2, #20]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 80090f0:	f7ff fdb4 	bl	8008c5c <buttonReleasedForYCallback>
 80090f4:	e68b      	b.n	8008e0e <CheckAttachedButtons+0x1ae>
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 80090f6:	2008      	movs	r0, #8
					++releaseCounter[i];
 80090f8:	4646      	mov	r6, r8
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 80090fa:	7260      	strb	r0, [r4, #9]
					++releaseCounter[i];
 80090fc:	3650      	adds	r6, #80	; 0x50
 80090fe:	1c48      	adds	r0, r1, #1
 8009100:	50b0      	str	r0, [r6, r2]
 8009102:	e65f      	b.n	8008dc4 <CheckAttachedButtons+0x164>
				if(pressCounter[i] < 0xFFFF)
 8009104:	481c      	ldr	r0, [pc, #112]	; (8009178 <CheckAttachedButtons+0x518>)
 8009106:	4283      	cmp	r3, r0
 8009108:	d80e      	bhi.n	8009128 <CheckAttachedButtons+0x4c8>
					++pressCounter[i];			// Advance the debounce counter
 800910a:	3301      	adds	r3, #1
 800910c:	508b      	str	r3, [r1, r2]
 800910e:	2104      	movs	r1, #4
 8009110:	481a      	ldr	r0, [pc, #104]	; (800917c <CheckAttachedButtons+0x51c>)
 8009112:	9104      	str	r1, [sp, #16]
 8009114:	e619      	b.n	8008d4a <CheckAttachedButtons+0xea>
				if(pressCounter[i] < 0xFFFF)
 8009116:	4818      	ldr	r0, [pc, #96]	; (8009178 <CheckAttachedButtons+0x518>)
 8009118:	4283      	cmp	r3, r0
 800911a:	d919      	bls.n	8009150 <CheckAttachedButtons+0x4f0>
					pressCounter[i] =0;			// Reset debounce counter
 800911c:	2300      	movs	r3, #0
 800911e:	508b      	str	r3, [r1, r2]
 8009120:	2102      	movs	r1, #2
 8009122:	4816      	ldr	r0, [pc, #88]	; (800917c <CheckAttachedButtons+0x51c>)
 8009124:	9104      	str	r1, [sp, #16]
 8009126:	e610      	b.n	8008d4a <CheckAttachedButtons+0xea>
 8009128:	2300      	movs	r3, #0
 800912a:	508b      	str	r3, [r1, r2]
						state =CLOSED;
 800912c:	2104      	movs	r1, #4
 800912e:	4813      	ldr	r0, [pc, #76]	; (800917c <CheckAttachedButtons+0x51c>)
 8009130:	9104      	str	r1, [sp, #16]
 8009132:	e60a      	b.n	8008d4a <CheckAttachedButtons+0xea>
				if(pressCounter[i] < 0xFFFF)
 8009134:	4810      	ldr	r0, [pc, #64]	; (8009178 <CheckAttachedButtons+0x518>)
 8009136:	4283      	cmp	r3, r0
 8009138:	d90a      	bls.n	8009150 <CheckAttachedButtons+0x4f0>
					pressCounter[i] =0;			// Reset debounce counter
 800913a:	465b      	mov	r3, fp
 800913c:	508b      	str	r3, [r1, r2]
						state =ON;
 800913e:	2102      	movs	r1, #2
					pressCounter[i] =0;			// Reset debounce counter
 8009140:	2300      	movs	r3, #0
						state =ON;
 8009142:	9104      	str	r1, [sp, #16]
 8009144:	480d      	ldr	r0, [pc, #52]	; (800917c <CheckAttachedButtons+0x51c>)
 8009146:	e600      	b.n	8008d4a <CheckAttachedButtons+0xea>
						clicked =1;		// Record a possible single click
 8009148:	464e      	mov	r6, r9
 800914a:	3301      	adds	r3, #1
 800914c:	77b3      	strb	r3, [r6, #30]
 800914e:	e62a      	b.n	8008da6 <CheckAttachedButtons+0x146>
						state =ON;
 8009150:	2102      	movs	r1, #2
 8009152:	9104      	str	r1, [sp, #16]
					++pressCounter[i];			// Advance the debounce counter
 8009154:	4641      	mov	r1, r8
 8009156:	3301      	adds	r3, #1
 8009158:	3138      	adds	r1, #56	; 0x38
 800915a:	508b      	str	r3, [r1, r2]
 800915c:	4807      	ldr	r0, [pc, #28]	; (800917c <CheckAttachedButtons+0x51c>)
 800915e:	e5f4      	b.n	8008d4a <CheckAttachedButtons+0xea>
						if(dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime){
 8009160:	7947      	ldrb	r7, [r0, #5]
 8009162:	429f      	cmp	r7, r3
 8009164:	d800      	bhi.n	8009168 <CheckAttachedButtons+0x508>
 8009166:	e61e      	b.n	8008da6 <CheckAttachedButtons+0x146>
							clicked =3;	// Record a possible double click
 8009168:	2303      	movs	r3, #3
 800916a:	464e      	mov	r6, r9
 800916c:	77b3      	strb	r3, [r6, #30]
							dblCounter[i] =0;	// Reset the inter-click counter
 800916e:	2300      	movs	r3, #0
 8009170:	4e03      	ldr	r6, [pc, #12]	; (8009180 <CheckAttachedButtons+0x520>)
 8009172:	55ab      	strb	r3, [r5, r6]
 8009174:	e617      	b.n	8008da6 <CheckAttachedButtons+0x146>
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	0000fffe 	.word	0x0000fffe
 800917c:	20006ccc 	.word	0x20006ccc
 8009180:	200017c4 	.word	0x200017c4

08009184 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8009184:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8009186:	f006 fe31 	bl	800fdec <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 800918a:	b2c4      	uxtb	r4, r0
 800918c:	0020      	movs	r0, r4
 800918e:	f7fe fb3f 	bl	8007810 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8009192:	0020      	movs	r0, r4
 8009194:	f7fe fb68 	bl	8007868 <SwitchStreamDMAToMsg>
}
 8009198:	bd10      	pop	{r4, pc}
 800919a:	46c0      	nop			; (mov r8, r8)

0800919c <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 800919c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800919e:	46ce      	mov	lr, r9
 80091a0:	4647      	mov	r7, r8
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b085      	sub	sp, #20
 80091a6:	0015      	movs	r5, r2
 80091a8:	466a      	mov	r2, sp
 80091aa:	73d3      	strb	r3, [r2, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 80091ac:	aa0c      	add	r2, sp, #48	; 0x30
 80091ae:	7812      	ldrb	r2, [r2, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 80091b0:	000e      	movs	r6, r1
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d06b      	beq.n	800928e <SetupDMAStreams+0xf2>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d051      	beq.n	800925e <SetupDMAStreams+0xc2>
 80091ba:	2a00      	cmp	r2, #0
 80091bc:	d04f      	beq.n	800925e <SetupDMAStreams+0xc2>
	if(direction == FORWARD){
 80091be:	2800      	cmp	r0, #0
 80091c0:	d06a      	beq.n	8009298 <SetupDMAStreams+0xfc>
	else if(direction == BACKWARD){
 80091c2:	2801      	cmp	r0, #1
 80091c4:	d052      	beq.n	800926c <SetupDMAStreams+0xd0>
		return BOS_ERR_WrongParam;
 80091c6:	2467      	movs	r4, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 80091c8:	2802      	cmp	r0, #2
 80091ca:	d149      	bne.n	8009260 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80091cc:	0018      	movs	r0, r3
 80091ce:	f004 ff73 	bl	800e0b8 <GetUart>
 80091d2:	ab0c      	add	r3, sp, #48	; 0x30
 80091d4:	0004      	movs	r4, r0
 80091d6:	7818      	ldrb	r0, [r3, #0]
 80091d8:	f004 ff6e 	bl	800e0b8 <GetUart>
 80091dc:	2201      	movs	r2, #1
 80091de:	0001      	movs	r1, r0
 80091e0:	0020      	movs	r0, r4
 80091e2:	f7fe fb7b 	bl	80078dc <StartDMAstream>
 80091e6:	2817      	cmp	r0, #23
 80091e8:	d04f      	beq.n	800928a <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80091ea:	21fa      	movs	r1, #250	; 0xfa
 80091ec:	0168      	lsls	r0, r5, #5
 80091ee:	1b40      	subs	r0, r0, r5
 80091f0:	0080      	lsls	r0, r0, #2
 80091f2:	1940      	adds	r0, r0, r5
 80091f4:	0089      	lsls	r1, r1, #2
 80091f6:	00c0      	lsls	r0, r0, #3
 80091f8:	f7f6 ffaa 	bl	8000150 <__udivsi3>
 80091fc:	4b49      	ldr	r3, [pc, #292]	; (8009324 <SetupDMAStreams+0x188>)
 80091fe:	4d4a      	ldr	r5, [pc, #296]	; (8009328 <SetupDMAStreams+0x18c>)
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	4698      	mov	r8, r3
 8009204:	230f      	movs	r3, #15
 8009206:	0001      	movs	r1, r0
 8009208:	2200      	movs	r2, #0
 800920a:	446b      	add	r3, sp
 800920c:	0007      	movs	r7, r0
 800920e:	0028      	movs	r0, r5
 8009210:	f006 fc88 	bl	800fb24 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8009214:	466b      	mov	r3, sp
 8009216:	7bdb      	ldrb	r3, [r3, #15]
 8009218:	4c44      	ldr	r4, [pc, #272]	; (800932c <SetupDMAStreams+0x190>)
 800921a:	3b01      	subs	r3, #1
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	511e      	str	r6, [r3, r4]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009220:	ab0c      	add	r3, sp, #48	; 0x30
 8009222:	7818      	ldrb	r0, [r3, #0]
 8009224:	f004 ff48 	bl	800e0b8 <GetUart>
 8009228:	466b      	mov	r3, sp
 800922a:	4681      	mov	r9, r0
 800922c:	7bd8      	ldrb	r0, [r3, #15]
 800922e:	f004 ff43 	bl	800e0b8 <GetUart>
 8009232:	2201      	movs	r2, #1
 8009234:	0001      	movs	r1, r0
 8009236:	4648      	mov	r0, r9
 8009238:	f7fe fb50 	bl	80078dc <StartDMAstream>
 800923c:	2817      	cmp	r0, #23
 800923e:	d024      	beq.n	800928a <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009240:	4643      	mov	r3, r8
 8009242:	0028      	movs	r0, r5
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	2200      	movs	r2, #0
 8009248:	ab0c      	add	r3, sp, #48	; 0x30
 800924a:	0039      	movs	r1, r7
 800924c:	f006 fc6a 	bl	800fb24 <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 8009250:	ab0c      	add	r3, sp, #48	; 0x30
 8009252:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009254:	0005      	movs	r5, r0
		dmaStreamTotal[dst - 1] =count;
 8009256:	3b01      	subs	r3, #1
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	511e      	str	r6, [r3, r4]
 800925c:	e044      	b.n	80092e8 <SetupDMAStreams+0x14c>
		return BOS_ERR_WrongParam;
 800925e:	2467      	movs	r4, #103	; 0x67
}
 8009260:	0020      	movs	r0, r4
 8009262:	b005      	add	sp, #20
 8009264:	bc0c      	pop	{r2, r3}
 8009266:	4690      	mov	r8, r2
 8009268:	4699      	mov	r9, r3
 800926a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 800926c:	0010      	movs	r0, r2
 800926e:	f004 ff23 	bl	800e0b8 <GetUart>
 8009272:	466b      	mov	r3, sp
 8009274:	0004      	movs	r4, r0
 8009276:	7bd8      	ldrb	r0, [r3, #15]
 8009278:	f004 ff1e 	bl	800e0b8 <GetUart>
 800927c:	2201      	movs	r2, #1
 800927e:	0001      	movs	r1, r0
 8009280:	0020      	movs	r0, r4
 8009282:	f7fe fb2b 	bl	80078dc <StartDMAstream>
 8009286:	2817      	cmp	r0, #23
 8009288:	d13d      	bne.n	8009306 <SetupDMAStreams+0x16a>
			return BOS_ERR_PORT_BUSY;
 800928a:	2417      	movs	r4, #23
 800928c:	e7e8      	b.n	8009260 <SetupDMAStreams+0xc4>
		portStatus[src] =STREAM;
 800928e:	2102      	movs	r1, #2
 8009290:	4a27      	ldr	r2, [pc, #156]	; (8009330 <SetupDMAStreams+0x194>)
		return BOS_ERR_WrongParam;
 8009292:	2467      	movs	r4, #103	; 0x67
		portStatus[src] =STREAM;
 8009294:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8009296:	e7e3      	b.n	8009260 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009298:	0018      	movs	r0, r3
 800929a:	f004 ff0d 	bl	800e0b8 <GetUart>
 800929e:	ab0c      	add	r3, sp, #48	; 0x30
 80092a0:	0004      	movs	r4, r0
 80092a2:	7818      	ldrb	r0, [r3, #0]
 80092a4:	f004 ff08 	bl	800e0b8 <GetUart>
 80092a8:	2201      	movs	r2, #1
 80092aa:	0001      	movs	r1, r0
 80092ac:	0020      	movs	r0, r4
 80092ae:	f7fe fb15 	bl	80078dc <StartDMAstream>
 80092b2:	2817      	cmp	r0, #23
 80092b4:	d0e9      	beq.n	800928a <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80092b6:	21fa      	movs	r1, #250	; 0xfa
 80092b8:	0168      	lsls	r0, r5, #5
 80092ba:	1b40      	subs	r0, r0, r5
 80092bc:	0080      	lsls	r0, r0, #2
 80092be:	1940      	adds	r0, r0, r5
 80092c0:	0089      	lsls	r1, r1, #2
 80092c2:	00c0      	lsls	r0, r0, #3
 80092c4:	f7f6 ff44 	bl	8000150 <__udivsi3>
 80092c8:	4b16      	ldr	r3, [pc, #88]	; (8009324 <SetupDMAStreams+0x188>)
 80092ca:	0001      	movs	r1, r0
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	230f      	movs	r3, #15
 80092d0:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80092d2:	2200      	movs	r2, #0
 80092d4:	4814      	ldr	r0, [pc, #80]	; (8009328 <SetupDMAStreams+0x18c>)
 80092d6:	f006 fc25 	bl	800fb24 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 80092da:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80092dc:	0005      	movs	r5, r0
		dmaStreamTotal[src - 1] =count;
 80092de:	7bdb      	ldrb	r3, [r3, #15]
 80092e0:	4a12      	ldr	r2, [pc, #72]	; (800932c <SetupDMAStreams+0x190>)
 80092e2:	3b01      	subs	r3, #1
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 80092e8:	2400      	movs	r4, #0
	if(xTimerStream != NULL)
 80092ea:	2d00      	cmp	r5, #0
 80092ec:	d0b8      	beq.n	8009260 <SetupDMAStreams+0xc4>
		xTimerStart(xTimerStream,portMAX_DELAY);
 80092ee:	f005 ff53 	bl	800f198 <xTaskGetTickCount>
 80092f2:	2301      	movs	r3, #1
 80092f4:	425b      	negs	r3, r3
 80092f6:	0002      	movs	r2, r0
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	2101      	movs	r1, #1
 80092fc:	2300      	movs	r3, #0
 80092fe:	0028      	movs	r0, r5
 8009300:	f006 fc30 	bl	800fb64 <xTimerGenericCommand>
 8009304:	e7ac      	b.n	8009260 <SetupDMAStreams+0xc4>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009306:	21fa      	movs	r1, #250	; 0xfa
 8009308:	0168      	lsls	r0, r5, #5
 800930a:	1b40      	subs	r0, r0, r5
 800930c:	0080      	lsls	r0, r0, #2
 800930e:	1940      	adds	r0, r0, r5
 8009310:	0089      	lsls	r1, r1, #2
 8009312:	00c0      	lsls	r0, r0, #3
 8009314:	f7f6 ff1c 	bl	8000150 <__udivsi3>
 8009318:	4b02      	ldr	r3, [pc, #8]	; (8009324 <SetupDMAStreams+0x188>)
 800931a:	0001      	movs	r1, r0
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	ab0c      	add	r3, sp, #48	; 0x30
 8009320:	e7d7      	b.n	80092d2 <SetupDMAStreams+0x136>
 8009322:	46c0      	nop			; (mov r8, r8)
 8009324:	08009185 	.word	0x08009185
 8009328:	0801b698 	.word	0x0801b698
 800932c:	200012d0 	.word	0x200012d0
 8009330:	20000c2c 	.word	0x20000c2c

08009334 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8009334:	b510      	push	{r4, lr}
	switch(port){
 8009336:	2805      	cmp	r0, #5
 8009338:	d80a      	bhi.n	8009350 <NotifyMessagingTask+0x1c>
 800933a:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <NotifyMessagingTask+0x30>)
 800933c:	0080      	lsls	r0, r0, #2
 800933e:	581b      	ldr	r3, [r3, r0]
 8009340:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P5
		case P5:
			xTaskNotifyGive(P5MsgTaskHandle)
 8009342:	4b09      	ldr	r3, [pc, #36]	; (8009368 <NotifyMessagingTask+0x34>)
 8009344:	6818      	ldr	r0, [r3, #0]
 8009346:	2202      	movs	r2, #2
 8009348:	2300      	movs	r3, #0
 800934a:	2100      	movs	r1, #0
 800934c:	f006 fb2a 	bl	800f9a4 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8009350:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8009352:	4b06      	ldr	r3, [pc, #24]	; (800936c <NotifyMessagingTask+0x38>)
 8009354:	e7f6      	b.n	8009344 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 8009356:	4b06      	ldr	r3, [pc, #24]	; (8009370 <NotifyMessagingTask+0x3c>)
 8009358:	e7f4      	b.n	8009344 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 800935a:	4b06      	ldr	r3, [pc, #24]	; (8009374 <NotifyMessagingTask+0x40>)
 800935c:	e7f2      	b.n	8009344 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 800935e:	4b06      	ldr	r3, [pc, #24]	; (8009378 <NotifyMessagingTask+0x44>)
 8009360:	e7f0      	b.n	8009344 <NotifyMessagingTask+0x10>
 8009362:	46c0      	nop			; (mov r8, r8)
 8009364:	08018bd4 	.word	0x08018bd4
 8009368:	20001724 	.word	0x20001724
 800936c:	20001714 	.word	0x20001714
 8009370:	20001718 	.word	0x20001718
 8009374:	2000171c 	.word	0x2000171c
 8009378:	20001720 	.word	0x20001720

0800937c <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	ac06      	add	r4, sp, #24
 8009382:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8009384:	0004      	movs	r4, r0
 8009386:	4314      	orrs	r4, r2
 8009388:	d011      	beq.n	80093ae <SendMessageFromPort+0x32>
 800938a:	2800      	cmp	r0, #0
 800938c:	d10b      	bne.n	80093a6 <SendMessageFromPort+0x2a>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 800938e:	1c96      	adds	r6, r2, #2
 8009390:	b2f6      	uxtb	r6, r6
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 8009392:	2467      	movs	r4, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8009394:	2e01      	cmp	r6, #1
 8009396:	d803      	bhi.n	80093a0 <SendMessageFromPort+0x24>
 8009398:	9500      	str	r5, [sp, #0]
 800939a:	f000 f80b 	bl	80093b4 <SendMessageFromPort.part.0>
 800939e:	0004      	movs	r4, r0
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 80093a0:	0020      	movs	r0, r4
 80093a2:	b002      	add	sp, #8
 80093a4:	bd70      	pop	{r4, r5, r6, pc}
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 80093a6:	2900      	cmp	r1, #0
 80093a8:	d0f6      	beq.n	8009398 <SendMessageFromPort+0x1c>
 80093aa:	2a00      	cmp	r2, #0
 80093ac:	d1f4      	bne.n	8009398 <SendMessageFromPort+0x1c>
		return BOS_ERR_WrongParam;
 80093ae:	2467      	movs	r4, #103	; 0x67
 80093b0:	e7f6      	b.n	80093a0 <SendMessageFromPort+0x24>
 80093b2:	46c0      	nop			; (mov r8, r8)

080093b4 <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80093b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093b6:	46de      	mov	lr, fp
 80093b8:	464e      	mov	r6, r9
 80093ba:	4645      	mov	r5, r8
 80093bc:	4657      	mov	r7, sl
 80093be:	b5e0      	push	{r5, r6, r7, lr}
 80093c0:	b087      	sub	sp, #28
 80093c2:	0005      	movs	r5, r0
 80093c4:	9004      	str	r0, [sp, #16]
 80093c6:	469b      	mov	fp, r3
	TaskPriority =uxTaskPriorityGet( NULL);
 80093c8:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80093ca:	ab10      	add	r3, sp, #64	; 0x40
 80093cc:	4689      	mov	r9, r1
 80093ce:	4690      	mov	r8, r2
 80093d0:	881e      	ldrh	r6, [r3, #0]
	TaskPriority =uxTaskPriorityGet( NULL);
 80093d2:	f005 fe51 	bl	800f078 <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80093d6:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 80093d8:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80093da:	2000      	movs	r0, #0
 80093dc:	f005 fe5c 	bl	800f098 <vTaskPrioritySet>
	message[0] ='H';
 80093e0:	2348      	movs	r3, #72	; 0x48
 80093e2:	4cd2      	ldr	r4, [pc, #840]	; (800972c <SendMessageFromPort.part.0+0x378>)
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80093e4:	464a      	mov	r2, r9
	message[0] ='H';
 80093e6:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 80093e8:	3312      	adds	r3, #18
 80093ea:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80093ec:	002b      	movs	r3, r5
 80093ee:	4313      	orrs	r3, r2
 80093f0:	d000      	beq.n	80093f4 <SendMessageFromPort.part.0+0x40>
 80093f2:	e094      	b.n	800951e <SendMessageFromPort.part.0+0x16a>
 80093f4:	4643      	mov	r3, r8
 80093f6:	1c9f      	adds	r7, r3, #2
 80093f8:	b2ff      	uxtb	r7, r7
 80093fa:	2f01      	cmp	r7, #1
 80093fc:	d800      	bhi.n	8009400 <SendMessageFromPort.part.0+0x4c>
 80093fe:	e095      	b.n	800952c <SendMessageFromPort.part.0+0x178>
 8009400:	465b      	mov	r3, fp
 8009402:	2b00      	cmp	r3, #0
 8009404:	d100      	bne.n	8009408 <SendMessageFromPort.part.0+0x54>
 8009406:	e091      	b.n	800952c <SendMessageFromPort.part.0+0x178>
			src =myID;
 8009408:	4bc9      	ldr	r3, [pc, #804]	; (8009730 <SendMessageFromPort.part.0+0x37c>)
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	4699      	mov	r9, r3
		message[2] =length;
 800940e:	2300      	movs	r3, #0
 8009410:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 8009412:	4643      	mov	r3, r8
 8009414:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 8009416:	464b      	mov	r3, r9
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8009418:	4ac6      	ldr	r2, [pc, #792]	; (8009734 <SendMessageFromPort.part.0+0x380>)
		message[4] =src;
 800941a:	7123      	strb	r3, [r4, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 800941c:	7913      	ldrb	r3, [r2, #4]
 800941e:	7851      	ldrb	r1, [r2, #1]
 8009420:	011b      	lsls	r3, r3, #4
 8009422:	7812      	ldrb	r2, [r2, #0]
 8009424:	0089      	lsls	r1, r1, #2
 8009426:	430b      	orrs	r3, r1
 8009428:	4313      	orrs	r3, r2
		if(code > 0xFF)
 800942a:	22ff      	movs	r2, #255	; 0xff
 800942c:	455a      	cmp	r2, fp
 800942e:	4192      	sbcs	r2, r2
 8009430:	4252      	negs	r2, r2
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8009432:	0052      	lsls	r2, r2, #1
 8009434:	4313      	orrs	r3, r2
		message[6 + shift] =(uint8_t )code;
 8009436:	465a      	mov	r2, fp
 8009438:	71a2      	strb	r2, [r4, #6]
		if(extendCode == true){
 800943a:	2200      	movs	r2, #0
 800943c:	4692      	mov	sl, r2
 800943e:	465a      	mov	r2, fp
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8009440:	b2db      	uxtb	r3, r3
 8009442:	7163      	strb	r3, [r4, #5]
		if(extendCode == true){
 8009444:	2aff      	cmp	r2, #255	; 0xff
 8009446:	d903      	bls.n	8009450 <SendMessageFromPort.part.0+0x9c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8009448:	0a12      	lsrs	r2, r2, #8
 800944a:	71e2      	strb	r2, [r4, #7]
			++shift;
 800944c:	2201      	movs	r2, #1
 800944e:	4692      	mov	sl, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8009450:	2e2e      	cmp	r6, #46	; 0x2e
 8009452:	d800      	bhi.n	8009456 <SendMessageFromPort.part.0+0xa2>
 8009454:	e157      	b.n	8009706 <SendMessageFromPort.part.0+0x352>
			message[5] |=0x80;
 8009456:	2280      	movs	r2, #128	; 0x80
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009458:	272e      	movs	r7, #46	; 0x2e
			message[5] |=0x80;
 800945a:	4252      	negs	r2, r2
			totalNumberOfParams =numberOfParams;
 800945c:	4db6      	ldr	r5, [pc, #728]	; (8009738 <SendMessageFromPort.part.0+0x384>)
			message[5] |=0x80;
 800945e:	4313      	orrs	r3, r2
 8009460:	7163      	strb	r3, [r4, #5]
			totalNumberOfParams =numberOfParams;
 8009462:	806e      	strh	r6, [r5, #2]
				if((totalNumberOfParams / numberOfParams) >= 1){
 8009464:	2e2d      	cmp	r6, #45	; 0x2d
 8009466:	d900      	bls.n	800946a <SendMessageFromPort.part.0+0xb6>
 8009468:	e136      	b.n	80096d8 <SendMessageFromPort.part.0+0x324>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 800946a:	237f      	movs	r3, #127	; 0x7f
 800946c:	7962      	ldrb	r2, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800946e:	8829      	ldrh	r1, [r5, #0]
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8009470:	4013      	ands	r3, r2
 8009472:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009474:	4653      	mov	r3, sl
 8009476:	1dd8      	adds	r0, r3, #7
 8009478:	4bb0      	ldr	r3, [pc, #704]	; (800973c <SendMessageFromPort.part.0+0x388>)
 800947a:	1820      	adds	r0, r4, r0
 800947c:	18c9      	adds	r1, r1, r3
 800947e:	0032      	movs	r2, r6
 8009480:	f00a fdcd 	bl	801401e <memcpy>
					ptrShift =0;
 8009484:	2300      	movs	r3, #0
 8009486:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 8009488:	806b      	strh	r3, [r5, #2]
					length =numberOfParams + shift + 4;
 800948a:	4653      	mov	r3, sl
 800948c:	1d1d      	adds	r5, r3, #4
 800948e:	19ad      	adds	r5, r5, r6
 8009490:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true){
 8009492:	4bab      	ldr	r3, [pc, #684]	; (8009740 <SendMessageFromPort.part.0+0x38c>)
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d03d      	beq.n	8009516 <SendMessageFromPort.part.0+0x162>
			if(dstGroupID < BOS_BROADCAST){
 800949a:	4baa      	ldr	r3, [pc, #680]	; (8009744 <SendMessageFromPort.part.0+0x390>)
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2bff      	cmp	r3, #255	; 0xff
 80094a0:	d100      	bne.n	80094a4 <SendMessageFromPort.part.0+0xf0>
 80094a2:	e106      	b.n	80096b2 <SendMessageFromPort.part.0+0x2fe>
				for(uint16_t i =1; i <= N; i++)						// N modules
 80094a4:	4aa8      	ldr	r2, [pc, #672]	; (8009748 <SendMessageFromPort.part.0+0x394>)
 80094a6:	7817      	ldrb	r7, [r2, #0]
 80094a8:	2f00      	cmp	r7, #0
 80094aa:	d100      	bne.n	80094ae <SendMessageFromPort.part.0+0xfa>
 80094ac:	e139      	b.n	8009722 <SendMessageFromPort.part.0+0x36e>
 80094ae:	2201      	movs	r2, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80094b0:	0021      	movs	r1, r4
 80094b2:	409a      	lsls	r2, r3
 80094b4:	4451      	add	r1, sl
 80094b6:	4694      	mov	ip, r2
 80094b8:	9105      	str	r1, [sp, #20]
 80094ba:	0039      	movs	r1, r7
			uint8_t groupMembers =0;
 80094bc:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80094be:	4667      	mov	r7, ip
				for(uint16_t i =1; i <= N; i++)						// N modules
 80094c0:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80094c2:	46ac      	mov	ip, r5
 80094c4:	000d      	movs	r5, r1
 80094c6:	48a1      	ldr	r0, [pc, #644]	; (800974c <SendMessageFromPort.part.0+0x398>)
					if(InGroup(i,dstGroupID)){
 80094c8:	8801      	ldrh	r1, [r0, #0]
 80094ca:	420f      	tst	r7, r1
 80094cc:	d009      	beq.n	80094e2 <SendMessageFromPort.part.0+0x12e>
						++groupMembers;							// Add this member
 80094ce:	3201      	adds	r2, #1
 80094d0:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 80094d2:	1991      	adds	r1, r2, r6
 80094d4:	292c      	cmp	r1, #44	; 0x2c
 80094d6:	dd00      	ble.n	80094da <SendMessageFromPort.part.0+0x126>
 80094d8:	e0fc      	b.n	80096d4 <SendMessageFromPort.part.0+0x320>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80094da:	9905      	ldr	r1, [sp, #20]
 80094dc:	1889      	adds	r1, r1, r2
 80094de:	1989      	adds	r1, r1, r6
 80094e0:	718b      	strb	r3, [r1, #6]
				for(uint16_t i =1; i <= N; i++)						// N modules
 80094e2:	3301      	adds	r3, #1
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	3002      	adds	r0, #2
 80094e8:	42ab      	cmp	r3, r5
 80094ea:	d9ed      	bls.n	80094c8 <SendMessageFromPort.part.0+0x114>
 80094ec:	4665      	mov	r5, ip
 80094ee:	0010      	movs	r0, r2
 80094f0:	1991      	adds	r1, r2, r6
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 80094f2:	4653      	mov	r3, sl
 80094f4:	3307      	adds	r3, #7
 80094f6:	199e      	adds	r6, r3, r6
 80094f8:	1836      	adds	r6, r6, r0
 80094fa:	55a2      	strb	r2, [r4, r6]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80094fc:	292b      	cmp	r1, #43	; 0x2b
 80094fe:	dd00      	ble.n	8009502 <SendMessageFromPort.part.0+0x14e>
 8009500:	e0e8      	b.n	80096d4 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8009502:	4993      	ldr	r1, [pc, #588]	; (8009750 <SendMessageFromPort.part.0+0x39c>)
 8009504:	3502      	adds	r5, #2
 8009506:	780b      	ldrb	r3, [r1, #0]
 8009508:	19a6      	adds	r6, r4, r6
 800950a:	3301      	adds	r3, #1
 800950c:	b2db      	uxtb	r3, r3
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 800950e:	18ad      	adds	r5, r5, r2
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8009510:	700b      	strb	r3, [r1, #0]
 8009512:	7073      	strb	r3, [r6, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8009514:	b2ed      	uxtb	r5, r5
 8009516:	4647      	mov	r7, r8
 8009518:	3702      	adds	r7, #2
 800951a:	b2ff      	uxtb	r7, r7
 800951c:	e012      	b.n	8009544 <SendMessageFromPort.part.0+0x190>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800951e:	465b      	mov	r3, fp
 8009520:	2b00      	cmp	r3, #0
 8009522:	d000      	beq.n	8009526 <SendMessageFromPort.part.0+0x172>
 8009524:	e0af      	b.n	8009686 <SendMessageFromPort.part.0+0x2d2>
 8009526:	4647      	mov	r7, r8
 8009528:	3702      	adds	r7, #2
 800952a:	b2ff      	uxtb	r7, r7
		length =messageLength[numberOfParams - 1];
 800952c:	3e01      	subs	r6, #1
 800952e:	4b89      	ldr	r3, [pc, #548]	; (8009754 <SendMessageFromPort.part.0+0x3a0>)
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8009530:	00f1      	lsls	r1, r6, #3
		length =messageLength[numberOfParams - 1];
 8009532:	5d9d      	ldrb	r5, [r3, r6]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8009534:	1b89      	subs	r1, r1, r6
 8009536:	4e88      	ldr	r6, [pc, #544]	; (8009758 <SendMessageFromPort.part.0+0x3a4>)
 8009538:	00c9      	lsls	r1, r1, #3
 800953a:	1989      	adds	r1, r1, r6
 800953c:	002a      	movs	r2, r5
 800953e:	4887      	ldr	r0, [pc, #540]	; (800975c <SendMessageFromPort.part.0+0x3a8>)
 8009540:	f00a fd6d 	bl	801401e <memcpy>
	memcpy(crcBuffer,&message[0],length + 3);
 8009544:	1ceb      	adds	r3, r5, #3
 8009546:	469a      	mov	sl, r3
 8009548:	4e85      	ldr	r6, [pc, #532]	; (8009760 <SendMessageFromPort.part.0+0x3ac>)
 800954a:	001a      	movs	r2, r3
 800954c:	0021      	movs	r1, r4
 800954e:	0030      	movs	r0, r6
	message[2] =length;
 8009550:	70a5      	strb	r5, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8009552:	f00a fd64 	bl	801401e <memcpy>
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009556:	b2ab      	uxth	r3, r5
 8009558:	4651      	mov	r1, sl
 800955a:	0030      	movs	r0, r6
 800955c:	9305      	str	r3, [sp, #20]
 800955e:	f003 ffa5 	bl	800d4ac <CalculateCRC8>
 8009562:	4653      	mov	r3, sl
	memset(crcBuffer,0,sizeof(crcBuffer));
 8009564:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009566:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8009568:	2100      	movs	r1, #0
 800956a:	0030      	movs	r0, r6
 800956c:	f00a fd60 	bl	8014030 <memset>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8009570:	465b      	mov	r3, fp
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009572:	2f01      	cmp	r7, #1
 8009574:	d94a      	bls.n	800960c <SendMessageFromPort.part.0+0x258>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8009576:	3b2c      	subs	r3, #44	; 0x2c
 8009578:	2b01      	cmp	r3, #1
 800957a:	d800      	bhi.n	800957e <SendMessageFromPort.part.0+0x1ca>
 800957c:	e08d      	b.n	800969a <SendMessageFromPort.part.0+0x2e6>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 800957e:	4b6d      	ldr	r3, [pc, #436]	; (8009734 <SendMessageFromPort.part.0+0x380>)
 8009580:	4698      	mov	r8, r3
 8009582:	88db      	ldrh	r3, [r3, #6]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d100      	bne.n	800958a <SendMessageFromPort.part.0+0x1d6>
 8009588:	e08f      	b.n	80096aa <SendMessageFromPort.part.0+0x2f6>
 800958a:	9e05      	ldr	r6, [sp, #20]
 800958c:	4f75      	ldr	r7, [pc, #468]	; (8009764 <SendMessageFromPort.part.0+0x3b0>)
 800958e:	4b76      	ldr	r3, [pc, #472]	; (8009768 <SendMessageFromPort.part.0+0x3b4>)
 8009590:	3604      	adds	r6, #4
 8009592:	46ba      	mov	sl, r7
 8009594:	b2b6      	uxth	r6, r6
 8009596:	2500      	movs	r5, #0
 8009598:	4699      	mov	r9, r3
 800959a:	9f04      	ldr	r7, [sp, #16]
 800959c:	e005      	b.n	80095aa <SendMessageFromPort.part.0+0x1f6>
 800959e:	4643      	mov	r3, r8
 80095a0:	3501      	adds	r5, #1
 80095a2:	88db      	ldrh	r3, [r3, #6]
 80095a4:	b2ed      	uxtb	r5, r5
 80095a6:	42ab      	cmp	r3, r5
 80095a8:	d91c      	bls.n	80095e4 <SendMessageFromPort.part.0+0x230>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 80095aa:	2332      	movs	r3, #50	; 0x32
 80095ac:	0032      	movs	r2, r6
 80095ae:	0021      	movs	r1, r4
 80095b0:	0038      	movs	r0, r7
 80095b2:	f004 fd4b 	bl	800e04c <writePxDMAMutex>
				osDelay(200);
 80095b6:	20c8      	movs	r0, #200	; 0xc8
 80095b8:	f004 fe42 	bl	800e240 <osDelay>
				if(ACK_FLAG == true)
 80095bc:	464b      	mov	r3, r9
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10f      	bne.n	80095e4 <SendMessageFromPort.part.0+0x230>
				if(rejected_FLAG == true)
 80095c4:	4653      	mov	r3, sl
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d0e8      	beq.n	800959e <SendMessageFromPort.part.0+0x1ea>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 80095cc:	2332      	movs	r3, #50	; 0x32
 80095ce:	0032      	movs	r2, r6
 80095d0:	0021      	movs	r1, r4
 80095d2:	0038      	movs	r0, r7
 80095d4:	f004 fd3a 	bl	800e04c <writePxDMAMutex>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 80095d8:	4643      	mov	r3, r8
 80095da:	3501      	adds	r5, #1
 80095dc:	88db      	ldrh	r3, [r3, #6]
 80095de:	b2ed      	uxtb	r5, r5
 80095e0:	42ab      	cmp	r3, r5
 80095e2:	d8e2      	bhi.n	80095aa <SendMessageFromPort.part.0+0x1f6>
 80095e4:	4657      	mov	r7, sl
		ACK_FLAG =false; rejected_FLAG=false;
 80095e6:	2300      	movs	r3, #0
 80095e8:	464a      	mov	r2, r9
 80095ea:	703b      	strb	r3, [r7, #0]
 80095ec:	7013      	strb	r3, [r2, #0]
	vTaskPrioritySet( NULL,TaskPriority);
 80095ee:	2000      	movs	r0, #0
 80095f0:	9903      	ldr	r1, [sp, #12]
 80095f2:	f005 fd51 	bl	800f098 <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 80095f6:	2202      	movs	r2, #2
	return result;
 80095f8:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 80095fa:	4b5c      	ldr	r3, [pc, #368]	; (800976c <SendMessageFromPort.part.0+0x3b8>)
 80095fc:	701a      	strb	r2, [r3, #0]
}
 80095fe:	b007      	add	sp, #28
 8009600:	bc3c      	pop	{r2, r3, r4, r5}
 8009602:	4690      	mov	r8, r2
 8009604:	4699      	mov	r9, r3
 8009606:	46a2      	mov	sl, r4
 8009608:	46ab      	mov	fp, r5
 800960a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 800960c:	2b00      	cmp	r3, #0
 800960e:	d03e      	beq.n	800968e <SendMessageFromPort.part.0+0x2da>
		FindBroadcastRoutes(src);
 8009610:	4648      	mov	r0, r9
 8009612:	f7fa fa43 	bl	8003a9c <FindBroadcastRoutes>
 8009616:	2300      	movs	r3, #0
 8009618:	4698      	mov	r8, r3
 800961a:	4b45      	ldr	r3, [pc, #276]	; (8009730 <SendMessageFromPort.part.0+0x37c>)
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 800961c:	9e05      	ldr	r6, [sp, #20]
 800961e:	4699      	mov	r9, r3
 8009620:	4b53      	ldr	r3, [pc, #332]	; (8009770 <SendMessageFromPort.part.0+0x3bc>)
 8009622:	3604      	adds	r6, #4
 8009624:	469b      	mov	fp, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009626:	2301      	movs	r3, #1
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009628:	b2b6      	uxth	r6, r6
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800962a:	469a      	mov	sl, r3
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 800962c:	0033      	movs	r3, r6
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800962e:	2501      	movs	r5, #1
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009630:	4646      	mov	r6, r8
 8009632:	4698      	mov	r8, r3
 8009634:	4f4b      	ldr	r7, [pc, #300]	; (8009764 <SendMessageFromPort.part.0+0x3b0>)
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009636:	464b      	mov	r3, r9
 8009638:	465a      	mov	r2, fp
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	3b01      	subs	r3, #1
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	5ad3      	ldrh	r3, [r2, r3]
 8009642:	4652      	mov	r2, sl
 8009644:	4133      	asrs	r3, r6
 8009646:	421a      	tst	r2, r3
 8009648:	d10a      	bne.n	8009660 <SendMessageFromPort.part.0+0x2ac>
			rejected_FLAG=false;
 800964a:	2300      	movs	r3, #0
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800964c:	3501      	adds	r5, #1
			Delay_us(10);
 800964e:	200a      	movs	r0, #10
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009650:	b2ed      	uxtb	r5, r5
			rejected_FLAG=false;
 8009652:	703b      	strb	r3, [r7, #0]
 8009654:	3601      	adds	r6, #1
			Delay_us(10);
 8009656:	f004 fb19 	bl	800dc8c <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800965a:	2d06      	cmp	r5, #6
 800965c:	d1eb      	bne.n	8009636 <SendMessageFromPort.part.0+0x282>
 800965e:	e7c6      	b.n	80095ee <SendMessageFromPort.part.0+0x23a>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009660:	2332      	movs	r3, #50	; 0x32
 8009662:	4642      	mov	r2, r8
 8009664:	0021      	movs	r1, r4
 8009666:	0028      	movs	r0, r5
 8009668:	f004 fcf0 	bl	800e04c <writePxDMAMutex>
				osDelay(200);
 800966c:	20c8      	movs	r0, #200	; 0xc8
 800966e:	f004 fde7 	bl	800e240 <osDelay>
				if(rejected_FLAG == true)
 8009672:	783b      	ldrb	r3, [r7, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d0e8      	beq.n	800964a <SendMessageFromPort.part.0+0x296>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009678:	2332      	movs	r3, #50	; 0x32
 800967a:	4642      	mov	r2, r8
 800967c:	0021      	movs	r1, r4
 800967e:	9804      	ldr	r0, [sp, #16]
 8009680:	f004 fce4 	bl	800e04c <writePxDMAMutex>
 8009684:	e7e1      	b.n	800964a <SendMessageFromPort.part.0+0x296>
		if(src == 0)
 8009686:	2a00      	cmp	r2, #0
 8009688:	d000      	beq.n	800968c <SendMessageFromPort.part.0+0x2d8>
 800968a:	e6c0      	b.n	800940e <SendMessageFromPort.part.0+0x5a>
 800968c:	e6bc      	b.n	8009408 <SendMessageFromPort.part.0+0x54>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 800968e:	464b      	mov	r3, r9
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1bd      	bne.n	8009610 <SendMessageFromPort.part.0+0x25c>
			src =message[4];
 8009694:	7923      	ldrb	r3, [r4, #4]
 8009696:	4699      	mov	r9, r3
 8009698:	e7ba      	b.n	8009610 <SendMessageFromPort.part.0+0x25c>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
 800969a:	9a05      	ldr	r2, [sp, #20]
 800969c:	2332      	movs	r3, #50	; 0x32
 800969e:	3204      	adds	r2, #4
 80096a0:	b292      	uxth	r2, r2
 80096a2:	0021      	movs	r1, r4
 80096a4:	9804      	ldr	r0, [sp, #16]
 80096a6:	f004 fcd1 	bl	800e04c <writePxDMAMutex>
 80096aa:	4b2f      	ldr	r3, [pc, #188]	; (8009768 <SendMessageFromPort.part.0+0x3b4>)
 80096ac:	4f2d      	ldr	r7, [pc, #180]	; (8009764 <SendMessageFromPort.part.0+0x3b0>)
 80096ae:	4699      	mov	r9, r3
 80096b0:	e799      	b.n	80095e6 <SendMessageFromPort.part.0+0x232>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80096b2:	2e2c      	cmp	r6, #44	; 0x2c
 80096b4:	d80e      	bhi.n	80096d4 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams] =++bcastID;
 80096b6:	4a26      	ldr	r2, [pc, #152]	; (8009750 <SendMessageFromPort.part.0+0x39c>)
 80096b8:	4647      	mov	r7, r8
 80096ba:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 80096bc:	3501      	adds	r5, #1
				message[7 + shift + numberOfParams] =++bcastID;
 80096be:	3301      	adds	r3, #1
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	7013      	strb	r3, [r2, #0]
 80096c4:	4652      	mov	r2, sl
 80096c6:	18a2      	adds	r2, r4, r2
 80096c8:	1996      	adds	r6, r2, r6
 80096ca:	3702      	adds	r7, #2
 80096cc:	71f3      	strb	r3, [r6, #7]
				length +=1;		// + bcastID
 80096ce:	b2ed      	uxtb	r5, r5
 80096d0:	b2ff      	uxtb	r7, r7
 80096d2:	e737      	b.n	8009544 <SendMessageFromPort.part.0+0x190>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80096d4:	2069      	movs	r0, #105	; 0x69
 80096d6:	e792      	b.n	80095fe <SendMessageFromPort.part.0+0x24a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 80096d8:	465b      	mov	r3, fp
 80096da:	4642      	mov	r2, r8
 80096dc:	4649      	mov	r1, r9
 80096de:	9700      	str	r7, [sp, #0]
 80096e0:	9804      	ldr	r0, [sp, #16]
 80096e2:	f7ff fe4b 	bl	800937c <SendMessageFromPort>
					osDelay(10);
 80096e6:	200a      	movs	r0, #10
 80096e8:	f004 fdaa 	bl	800e240 <osDelay>
					totalNumberOfParams -=numberOfParams;
 80096ec:	886e      	ldrh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 80096ee:	882b      	ldrh	r3, [r5, #0]
					totalNumberOfParams -=numberOfParams;
 80096f0:	3e2e      	subs	r6, #46	; 0x2e
 80096f2:	b2b6      	uxth	r6, r6
					ptrShift +=numberOfParams;
 80096f4:	332e      	adds	r3, #46	; 0x2e
					totalNumberOfParams -=numberOfParams;
 80096f6:	806e      	strh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 80096f8:	802b      	strh	r3, [r5, #0]
			while(totalNumberOfParams != 0){
 80096fa:	2e00      	cmp	r6, #0
 80096fc:	d000      	beq.n	8009700 <SendMessageFromPort.part.0+0x34c>
 80096fe:	e6b1      	b.n	8009464 <SendMessageFromPort.part.0+0xb0>
 8009700:	2500      	movs	r5, #0
 8009702:	362e      	adds	r6, #46	; 0x2e
 8009704:	e6c5      	b.n	8009492 <SendMessageFromPort.part.0+0xde>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009706:	4653      	mov	r3, sl
 8009708:	1dd8      	adds	r0, r3, #7
 800970a:	4b0b      	ldr	r3, [pc, #44]	; (8009738 <SendMessageFromPort.part.0+0x384>)
			length =numberOfParams + shift + 4;
 800970c:	1d35      	adds	r5, r6, #4
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800970e:	8819      	ldrh	r1, [r3, #0]
 8009710:	4b0a      	ldr	r3, [pc, #40]	; (800973c <SendMessageFromPort.part.0+0x388>)
 8009712:	1820      	adds	r0, r4, r0
 8009714:	18c9      	adds	r1, r1, r3
 8009716:	0032      	movs	r2, r6
			length =numberOfParams + shift + 4;
 8009718:	4455      	add	r5, sl
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800971a:	f00a fc80 	bl	801401e <memcpy>
			length =numberOfParams + shift + 4;
 800971e:	b2ed      	uxtb	r5, r5
 8009720:	e6b7      	b.n	8009492 <SendMessageFromPort.part.0+0xde>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009722:	0031      	movs	r1, r6
 8009724:	2000      	movs	r0, #0
			uint8_t groupMembers =0;
 8009726:	2200      	movs	r2, #0
 8009728:	e6e3      	b.n	80094f2 <SendMessageFromPort.part.0+0x13e>
 800972a:	46c0      	nop			; (mov r8, r8)
 800972c:	20000c58 	.word	0x20000c58
 8009730:	20000a98 	.word	0x20000a98
 8009734:	20006c4c 	.word	0x20006c4c
 8009738:	200017cc 	.word	0x200017cc
 800973c:	20000b3c 	.word	0x20000b3c
 8009740:	20001110 	.word	0x20001110
 8009744:	20000048 	.word	0x20000048
 8009748:	20000000 	.word	0x20000000
 800974c:	20000a9c 	.word	0x20000a9c
 8009750:	20000c48 	.word	0x20000c48
 8009754:	20000c50 	.word	0x20000c50
 8009758:	20000c90 	.word	0x20000c90
 800975c:	20000c5b 	.word	0x20000c5b
 8009760:	20001308 	.word	0x20001308
 8009764:	2000113c 	.word	0x2000113c
 8009768:	2000113d 	.word	0x2000113d
 800976c:	20000c3c 	.word	0x20000c3c
 8009770:	20000b6c 	.word	0x20000b6c

08009774 <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 8009774:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009776:	b500      	push	{lr}
	AddBcastPayload = false;
 8009778:	4b0b      	ldr	r3, [pc, #44]	; (80097a8 <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 800977a:	b083      	sub	sp, #12
	AddBcastPayload = false;
 800977c:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800977e:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <BroadcastReceivedMessage+0x38>)
 8009780:	b289      	uxth	r1, r1
 8009782:	7018      	strb	r0, [r3, #0]
 8009784:	9100      	str	r1, [sp, #0]
 8009786:	2300      	movs	r3, #0
	if(dstGroup == BOS_BROADCAST)
 8009788:	28ff      	cmp	r0, #255	; 0xff
 800978a:	d007      	beq.n	800979c <BroadcastReceivedMessage+0x28>
 800978c:	22fe      	movs	r2, #254	; 0xfe
 800978e:	2100      	movs	r1, #0
 8009790:	2000      	movs	r0, #0
 8009792:	f7ff fe0f 	bl	80093b4 <SendMessageFromPort.part.0>
}
 8009796:	2000      	movs	r0, #0
 8009798:	b003      	add	sp, #12
 800979a:	bd00      	pop	{pc}
 800979c:	32ff      	adds	r2, #255	; 0xff
 800979e:	2100      	movs	r1, #0
 80097a0:	2000      	movs	r0, #0
 80097a2:	f7ff fe07 	bl	80093b4 <SendMessageFromPort.part.0>
 80097a6:	e7f6      	b.n	8009796 <BroadcastReceivedMessage+0x22>
 80097a8:	20001110 	.word	0x20001110
 80097ac:	20000048 	.word	0x20000048

080097b0 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80097b0:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 80097b2:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80097b4:	001c      	movs	r4, r3
	AddBcastPayload = true;
 80097b6:	4b0e      	ldr	r3, [pc, #56]	; (80097f0 <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80097b8:	b083      	sub	sp, #12
	AddBcastPayload = true;
 80097ba:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 80097bc:	4b0d      	ldr	r3, [pc, #52]	; (80097f4 <BroadcastMessage+0x44>)
 80097be:	7019      	strb	r1, [r3, #0]
 80097c0:	9400      	str	r4, [sp, #0]
 80097c2:	0013      	movs	r3, r2
	if(dstGroup == BOS_BROADCAST)
 80097c4:	29ff      	cmp	r1, #255	; 0xff
 80097c6:	d00c      	beq.n	80097e2 <BroadcastMessage+0x32>
 80097c8:	0001      	movs	r1, r0
 80097ca:	22fe      	movs	r2, #254	; 0xfe
 80097cc:	2000      	movs	r0, #0
 80097ce:	f7ff fdf1 	bl	80093b4 <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 80097d2:	0022      	movs	r2, r4
 80097d4:	2100      	movs	r1, #0
 80097d6:	4808      	ldr	r0, [pc, #32]	; (80097f8 <BroadcastMessage+0x48>)
 80097d8:	f00a fc2a 	bl	8014030 <memset>
}
 80097dc:	2000      	movs	r0, #0
 80097de:	b003      	add	sp, #12
 80097e0:	bd30      	pop	{r4, r5, pc}
 80097e2:	0001      	movs	r1, r0
 80097e4:	22ff      	movs	r2, #255	; 0xff
 80097e6:	2000      	movs	r0, #0
 80097e8:	f7ff fde4 	bl	80093b4 <SendMessageFromPort.part.0>
 80097ec:	e7f1      	b.n	80097d2 <BroadcastMessage+0x22>
 80097ee:	46c0      	nop			; (mov r8, r8)
 80097f0:	20001110 	.word	0x20001110
 80097f4:	20000048 	.word	0x20000048
 80097f8:	20000b3c 	.word	0x20000b3c

080097fc <ForwardReceivedMessage>:
	AddBcastPayload = false;
 80097fc:	2200      	movs	r2, #0
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80097fe:	b530      	push	{r4, r5, lr}
 8009800:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8009802:	4b0b      	ldr	r3, [pc, #44]	; (8009830 <ForwardReceivedMessage+0x34>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009804:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009806:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009808:	1e42      	subs	r2, r0, #1
 800980a:	00d3      	lsls	r3, r2, #3
 800980c:	1a9b      	subs	r3, r3, r2
 800980e:	4a09      	ldr	r2, [pc, #36]	; (8009834 <ForwardReceivedMessage+0x38>)
 8009810:	00db      	lsls	r3, r3, #3
 8009812:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 8009814:	4b08      	ldr	r3, [pc, #32]	; (8009838 <ForwardReceivedMessage+0x3c>)
 8009816:	0021      	movs	r1, r4
 8009818:	7818      	ldrb	r0, [r3, #0]
 800981a:	f7fa f9e7 	bl	8003bec <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 800981e:	9500      	str	r5, [sp, #0]
 8009820:	2300      	movs	r3, #0
 8009822:	0022      	movs	r2, r4
 8009824:	2100      	movs	r1, #0
 8009826:	f7ff fda9 	bl	800937c <SendMessageFromPort>
}
 800982a:	2000      	movs	r0, #0
 800982c:	b003      	add	sp, #12
 800982e:	bd30      	pop	{r4, r5, pc}
 8009830:	20001110 	.word	0x20001110
 8009834:	20000c90 	.word	0x20000c90
 8009838:	20000a98 	.word	0x20000a98

0800983c <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 800983c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800983e:	4d0f      	ldr	r5, [pc, #60]	; (800987c <SendMessageToModule+0x40>)
 8009840:	0004      	movs	r4, r0
 8009842:	b083      	sub	sp, #12
 8009844:	000f      	movs	r7, r1
 8009846:	0016      	movs	r6, r2
 8009848:	7828      	ldrb	r0, [r5, #0]
	if(dst != BOS_BROADCAST){
 800984a:	2cff      	cmp	r4, #255	; 0xff
 800984c:	d010      	beq.n	8009870 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 800984e:	0021      	movs	r1, r4
 8009850:	f7fa f9cc 	bl	8003bec <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8009854:	7829      	ldrb	r1, [r5, #0]
 8009856:	0022      	movs	r2, r4
 8009858:	9600      	str	r6, [sp, #0]
 800985a:	003b      	movs	r3, r7
 800985c:	f7ff fd8e 	bl	800937c <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8009860:	0032      	movs	r2, r6
 8009862:	2100      	movs	r1, #0
 8009864:	4806      	ldr	r0, [pc, #24]	; (8009880 <SendMessageToModule+0x44>)
 8009866:	f00a fbe3 	bl	8014030 <memset>
}
 800986a:	2000      	movs	r0, #0
 800986c:	b003      	add	sp, #12
 800986e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8009870:	0013      	movs	r3, r2
 8009872:	000a      	movs	r2, r1
 8009874:	21ff      	movs	r1, #255	; 0xff
 8009876:	f7ff ff9b 	bl	80097b0 <BroadcastMessage>
 800987a:	e7f6      	b.n	800986a <SendMessageToModule+0x2e>
 800987c:	20000a98 	.word	0x20000a98
 8009880:	20000b3c 	.word	0x20000b3c

08009884 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009886:	4657      	mov	r7, sl
 8009888:	46de      	mov	lr, fp
 800988a:	464e      	mov	r6, r9
 800988c:	4645      	mov	r5, r8
 800988e:	b5e0      	push	{r5, r6, r7, lr}
 8009890:	b08f      	sub	sp, #60	; 0x3c
 8009892:	001e      	movs	r6, r3
 8009894:	ab18      	add	r3, sp, #96	; 0x60
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	4693      	mov	fp, r2
 800989a:	469a      	mov	sl, r3
 800989c:	ab1b      	add	r3, sp, #108	; 0x6c
 800989e:	781a      	ldrb	r2, [r3, #0]
 80098a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098a2:	000f      	movs	r7, r1
 80098a4:	0e19      	lsrs	r1, r3, #24
 80098a6:	0c1b      	lsrs	r3, r3, #16
 80098a8:	b2dc      	uxtb	r4, r3
 80098aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098ac:	4684      	mov	ip, r0
 80098ae:	0a1b      	lsrs	r3, r3, #8
 80098b0:	b2dd      	uxtb	r5, r3
 80098b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80098b4:	900d      	str	r0, [sp, #52]	; 0x34
 80098b6:	0e1b      	lsrs	r3, r3, #24
 80098b8:	0018      	movs	r0, r3
 80098ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80098bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80098be:	9206      	str	r2, [sp, #24]
 80098c0:	0c1b      	lsrs	r3, r3, #16
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	9307      	str	r3, [sp, #28]
 80098c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80098c8:	9109      	str	r1, [sp, #36]	; 0x24
 80098ca:	0a1b      	lsrs	r3, r3, #8
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 80098d0:	4b47      	ldr	r3, [pc, #284]	; (80099f0 <StartScastDMAStream+0x16c>)
 80098d2:	940a      	str	r4, [sp, #40]	; 0x28
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	950c      	str	r5, [sp, #48]	; 0x30
 80098d8:	42bb      	cmp	r3, r7
 80098da:	d16d      	bne.n	80099b8 <StartScastDMAStream+0x134>
 80098dc:	231a      	movs	r3, #26
 80098de:	4698      	mov	r8, r3
 80098e0:	4d44      	ldr	r5, [pc, #272]	; (80099f4 <StartScastDMAStream+0x170>)
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80098e2:	4c45      	ldr	r4, [pc, #276]	; (80099f8 <StartScastDMAStream+0x174>)
 80098e4:	44a8      	add	r8, r5
		FindRoute(srcM,dstM);
 80098e6:	0031      	movs	r1, r6
 80098e8:	0038      	movs	r0, r7
 80098ea:	f7fa f97f 	bl	8003bec <FindRoute>
		if(route[i]){
 80098ee:	7868      	ldrb	r0, [r5, #1]
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d035      	beq.n	8009960 <StartScastDMAStream+0xdc>
			if(route[i + 1]){
 80098f4:	78a9      	ldrb	r1, [r5, #2]
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d100      	bne.n	80098fc <StartScastDMAStream+0x78>
				temp1 =FindRoute(route[i],srcM);
 80098fa:	0039      	movs	r1, r7
 80098fc:	f7fa f976 	bl	8003bec <FindRoute>
			FindRoute(srcM,dstM);
 8009900:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 8009902:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 8009904:	0038      	movs	r0, r7
 8009906:	f7fa f971 	bl	8003bec <FindRoute>
			if(route[i] == dstM){
 800990a:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 800990c:	465b      	mov	r3, fp
			if(route[i] == dstM){
 800990e:	42b0      	cmp	r0, r6
 8009910:	d003      	beq.n	800991a <StartScastDMAStream+0x96>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009912:	7829      	ldrb	r1, [r5, #0]
 8009914:	f7fa f96a 	bl	8003bec <FindRoute>
 8009918:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800991a:	9a09      	ldr	r2, [sp, #36]	; 0x24
			messageParams[5] =(uint8_t )(timeout >> 16);
			messageParams[6] =(uint8_t )(timeout >> 8);
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 800991c:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800991e:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8009920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			messageParams[11] =stored; /* EEPROM storage */
 8009922:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 8009924:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8009926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			FindRoute(srcM,dstM);
 8009928:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 800992a:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 800992c:	9a19      	ldr	r2, [sp, #100]	; 0x64
			FindRoute(srcM,dstM);
 800992e:	0038      	movs	r0, r7
			messageParams[3] =(uint8_t )count;
 8009930:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009932:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			messageParams[11] =stored; /* EEPROM storage */
 8009934:	72e3      	strb	r3, [r4, #11]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009936:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009938:	9a07      	ldr	r2, [sp, #28]
 800993a:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 800993c:	9a08      	ldr	r2, [sp, #32]
 800993e:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009940:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009942:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009944:	4652      	mov	r2, sl
 8009946:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8009948:	464a      	mov	r2, r9
 800994a:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 800994c:	f7fa f94e 	bl	8003bec <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8009950:	7868      	ldrb	r0, [r5, #1]
 8009952:	220c      	movs	r2, #12
 8009954:	211b      	movs	r1, #27
 8009956:	f7ff ff71 	bl	800983c <SendMessageToModule>
			osDelay(10);
 800995a:	200a      	movs	r0, #10
 800995c:	f004 fc70 	bl	800e240 <osDelay>
 8009960:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8009962:	4545      	cmp	r5, r8
 8009964:	d1bf      	bne.n	80098e6 <StartScastDMAStream+0x62>
		}
	}
	
	if(srcM == dstM)
 8009966:	42b7      	cmp	r7, r6
 8009968:	d112      	bne.n	8009990 <StartScastDMAStream+0x10c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 800996a:	465b      	mov	r3, fp
 800996c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009974:	4650      	mov	r0, sl
 8009976:	f7ff fc11 	bl	800919c <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 800997a:	9b06      	ldr	r3, [sp, #24]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10d      	bne.n	800999c <StartScastDMAStream+0x118>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8009980:	2000      	movs	r0, #0
 8009982:	b00f      	add	sp, #60	; 0x3c
 8009984:	bc3c      	pop	{r2, r3, r4, r5}
 8009986:	4690      	mov	r8, r2
 8009988:	4699      	mov	r9, r3
 800998a:	46a2      	mov	sl, r4
 800998c:	46ab      	mov	fp, r5
 800998e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 8009990:	0031      	movs	r1, r6
 8009992:	0038      	movs	r0, r7
 8009994:	f7fa f92a 	bl	8003bec <FindRoute>
 8009998:	4683      	mov	fp, r0
 800999a:	e7e6      	b.n	800996a <StartScastDMAStream+0xe6>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 800999c:	2300      	movs	r3, #0
 800999e:	9304      	str	r3, [sp, #16]
 80099a0:	9303      	str	r3, [sp, #12]
 80099a2:	9302      	str	r3, [sp, #8]
 80099a4:	9301      	str	r3, [sp, #4]
 80099a6:	465b      	mov	r3, fp
 80099a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	9919      	ldr	r1, [sp, #100]	; 0x64
 80099ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099b0:	4650      	mov	r0, sl
 80099b2:	f7f9 fecb 	bl	800374c <SaveEEstreams>
 80099b6:	e7e3      	b.n	8009980 <StartScastDMAStream+0xfc>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80099b8:	4b0f      	ldr	r3, [pc, #60]	; (80099f8 <StartScastDMAStream+0x174>)
 80099ba:	7019      	strb	r1, [r3, #0]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80099bc:	9907      	ldr	r1, [sp, #28]
		messageParams[1] =(uint8_t )(count >> 16);
 80099be:	705c      	strb	r4, [r3, #1]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80099c0:	7159      	strb	r1, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 80099c2:	9908      	ldr	r1, [sp, #32]
		messageParams[3] =(uint8_t )count;
 80099c4:	9c19      	ldr	r4, [sp, #100]	; 0x64
		messageParams[6] =(uint8_t )(timeout >> 8);
 80099c6:	7199      	strb	r1, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 80099c8:	991a      	ldr	r1, [sp, #104]	; 0x68
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80099ca:	7118      	strb	r0, [r3, #4]
		messageParams[7] =(uint8_t )timeout;
 80099cc:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80099ce:	4651      	mov	r1, sl
 80099d0:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 80099d2:	4661      	mov	r1, ip
 80099d4:	7259      	strb	r1, [r3, #9]
		messageParams[11] =dstP; /* destination port */
 80099d6:	4659      	mov	r1, fp
		messageParams[12] =stored; /* EEPROM storage */
 80099d8:	731a      	strb	r2, [r3, #12]
		messageParams[11] =dstP; /* destination port */
 80099da:	72d9      	strb	r1, [r3, #11]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80099dc:	220d      	movs	r2, #13
 80099de:	211c      	movs	r1, #28
 80099e0:	0038      	movs	r0, r7
		messageParams[2] =(uint8_t )(count >> 8);
 80099e2:	709d      	strb	r5, [r3, #2]
		messageParams[3] =(uint8_t )count;
 80099e4:	70dc      	strb	r4, [r3, #3]
		messageParams[10] =dstM; /* destination module */
 80099e6:	729e      	strb	r6, [r3, #10]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80099e8:	f7ff ff28 	bl	800983c <SendMessageToModule>
		return result;
 80099ec:	e7c8      	b.n	8009980 <StartScastDMAStream+0xfc>
 80099ee:	46c0      	nop			; (mov r8, r8)
 80099f0:	20000a98 	.word	0x20000a98
 80099f4:	20006dcf 	.word	0x20006dcf
 80099f8:	20000b3c 	.word	0x20000b3c

080099fc <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 80099fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099fe:	4657      	mov	r7, sl
 8009a00:	4645      	mov	r5, r8
 8009a02:	46de      	mov	lr, fp
 8009a04:	464e      	mov	r6, r9
 8009a06:	4bd6      	ldr	r3, [pc, #856]	; (8009d60 <BackEndTask+0x364>)
 8009a08:	b5e0      	push	{r5, r6, r7, lr}
 8009a0a:	4698      	mov	r8, r3
 8009a0c:	4bd5      	ldr	r3, [pc, #852]	; (8009d64 <BackEndTask+0x368>)
 8009a0e:	4fd6      	ldr	r7, [pc, #856]	; (8009d68 <BackEndTask+0x36c>)
 8009a10:	469a      	mov	sl, r3
 8009a12:	2301      	movs	r3, #1
 8009a14:	b089      	sub	sp, #36	; 0x24
 8009a16:	1bdb      	subs	r3, r3, r7
 8009a18:	9307      	str	r3, [sp, #28]
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	2601      	movs	r6, #1
 8009a1e:	001c      	movs	r4, r3
 8009a20:	b2f3      	uxtb	r3, r6
 8009a22:	469b      	mov	fp, r3
	/* Infinite loop */
	for(;;){
		/* Search the circular receive buffers for any complete packets */
		for(port =1; port <= NumOfPorts; port++){
			/* A. Check for BOS messages */
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8009a24:	4643      	mov	r3, r8
 8009a26:	5d9b      	ldrb	r3, [r3, r6]
 8009a28:	1e75      	subs	r5, r6, #1
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d91d      	bls.n	8009a6a <BackEndTask+0x6e>
 8009a2e:	4bcf      	ldr	r3, [pc, #828]	; (8009d6c <BackEndTask+0x370>)
 8009a30:	469c      	mov	ip, r3
 8009a32:	4465      	add	r5, ip
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
				++rejectedMsg;
			}

			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
 8009a34:	782b      	ldrb	r3, [r5, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00e      	beq.n	8009a58 <BackEndTask+0x5c>
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
 8009a3a:	4643      	mov	r3, r8
				MsgDMAStopped[port - 1] = false;
 8009a3c:	2200      	movs	r2, #0
				if(portStatus[port] == OVERRUN)
 8009a3e:	199b      	adds	r3, r3, r6
 8009a40:	7819      	ldrb	r1, [r3, #0]
				MsgDMAStopped[port - 1] = false;
 8009a42:	702a      	strb	r2, [r5, #0]
				if(portStatus[port] == OVERRUN)
 8009a44:	2905      	cmp	r1, #5
 8009a46:	d100      	bne.n	8009a4a <BackEndTask+0x4e>
					portStatus[port] =FREE;
 8009a48:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8009a4a:	4658      	mov	r0, fp
 8009a4c:	f004 fb34 	bl	800e0b8 <GetUart>
 8009a50:	1939      	adds	r1, r7, r4
 8009a52:	22c0      	movs	r2, #192	; 0xc0
 8009a54:	f009 fbee 	bl	8013234 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8009a58:	23f0      	movs	r3, #240	; 0xf0
 8009a5a:	34c0      	adds	r4, #192	; 0xc0
 8009a5c:	3601      	adds	r6, #1
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	429c      	cmp	r4, r3
 8009a62:	d1dd      	bne.n	8009a20 <BackEndTask+0x24>
			}
		}

		taskYIELD();
 8009a64:	f006 fa24 	bl	800feb0 <vPortYield>
		for(port =1; port <= NumOfPorts; port++){
 8009a68:	e7d7      	b.n	8009a1a <BackEndTask+0x1e>
 8009a6a:	4bc1      	ldr	r3, [pc, #772]	; (8009d70 <BackEndTask+0x374>)
 8009a6c:	469c      	mov	ip, r3
 8009a6e:	44ac      	add	ip, r5
 8009a70:	4663      	mov	r3, ip
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009a72:	781a      	ldrb	r2, [r3, #0]
 8009a74:	9303      	str	r3, [sp, #12]
 8009a76:	2abf      	cmp	r2, #191	; 0xbf
 8009a78:	dc2a      	bgt.n	8009ad0 <BackEndTask+0xd4>
							if(BOS.disableCLI == false){
 8009a7a:	4bbe      	ldr	r3, [pc, #760]	; (8009d74 <BackEndTask+0x378>)
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	7e9b      	ldrb	r3, [r3, #26]
 8009a80:	9102      	str	r1, [sp, #8]
 8009a82:	9304      	str	r3, [sp, #16]
 8009a84:	1913      	adds	r3, r2, r4
 8009a86:	4699      	mov	r9, r3
 8009a88:	0073      	lsls	r3, r6, #1
 8009a8a:	3201      	adds	r2, #1
 8009a8c:	199b      	adds	r3, r3, r6
 8009a8e:	019b      	lsls	r3, r3, #6
 8009a90:	9206      	str	r2, [sp, #24]
 8009a92:	9a07      	ldr	r2, [sp, #28]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	18fb      	adds	r3, r7, r3
 8009a98:	44b9      	add	r9, r7
 8009a9a:	1b12      	subs	r2, r2, r4
 8009a9c:	9305      	str	r3, [sp, #20]
 8009a9e:	9501      	str	r5, [sp, #4]
 8009aa0:	464b      	mov	r3, r9
 8009aa2:	0011      	movs	r1, r2
 8009aa4:	e002      	b.n	8009aac <BackEndTask+0xb0>
 8009aa6:	3301      	adds	r3, #1
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009aa8:	2dc0      	cmp	r5, #192	; 0xc0
 8009aaa:	d07c      	beq.n	8009ba6 <BackEndTask+0x1aa>
 8009aac:	1b1a      	subs	r2, r3, r4
 8009aae:	1bd2      	subs	r2, r2, r7
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009ab0:	2abf      	cmp	r2, #191	; 0xbf
 8009ab2:	d100      	bne.n	8009ab6 <BackEndTask+0xba>
 8009ab4:	e0bb      	b.n	8009c2e <BackEndTask+0x232>
 8009ab6:	7818      	ldrb	r0, [r3, #0]
 8009ab8:	18cd      	adds	r5, r1, r3
 8009aba:	2848      	cmp	r0, #72	; 0x48
 8009abc:	d1f3      	bne.n	8009aa6 <BackEndTask+0xaa>
 8009abe:	7858      	ldrb	r0, [r3, #1]
 8009ac0:	285a      	cmp	r0, #90	; 0x5a
 8009ac2:	d1f0      	bne.n	8009aa6 <BackEndTask+0xaa>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8009ac4:	4653      	mov	r3, sl
 8009ac6:	9d01      	ldr	r5, [sp, #4]
 8009ac8:	605a      	str	r2, [r3, #4]
				if(emptyBuffer){
 8009aca:	9b02      	ldr	r3, [sp, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1c3      	bne.n	8009a58 <BackEndTask+0x5c>
				totalnumberofrecevedmesg++;
 8009ad0:	4653      	mov	r3, sl
 8009ad2:	4652      	mov	r2, sl
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	6013      	str	r3, [r2, #0]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009ada:	6853      	ldr	r3, [r2, #4]
 8009adc:	4699      	mov	r9, r3
 8009ade:	2bbd      	cmp	r3, #189	; 0xbd
 8009ae0:	d100      	bne.n	8009ae4 <BackEndTask+0xe8>
 8009ae2:	e080      	b.n	8009be6 <BackEndTask+0x1ea>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009ae4:	2bbe      	cmp	r3, #190	; 0xbe
 8009ae6:	d100      	bne.n	8009aea <BackEndTask+0xee>
 8009ae8:	e09b      	b.n	8009c22 <BackEndTask+0x226>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009aea:	2bbf      	cmp	r3, #191	; 0xbf
 8009aec:	d100      	bne.n	8009af0 <BackEndTask+0xf4>
 8009aee:	e0c2      	b.n	8009c76 <BackEndTask+0x27a>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009af0:	006b      	lsls	r3, r5, #1
 8009af2:	195b      	adds	r3, r3, r5
 8009af4:	019b      	lsls	r3, r3, #6
 8009af6:	18fb      	adds	r3, r7, r3
 8009af8:	444b      	add	r3, r9
 8009afa:	789a      	ldrb	r2, [r3, #2]
 8009afc:	4653      	mov	r3, sl
 8009afe:	609a      	str	r2, [r3, #8]
					parseStart =packetStart + 3;
 8009b00:	464b      	mov	r3, r9
 8009b02:	4651      	mov	r1, sl
 8009b04:	3303      	adds	r3, #3
 8009b06:	60cb      	str	r3, [r1, #12]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009b08:	1cd3      	adds	r3, r2, #3
 8009b0a:	9301      	str	r3, [sp, #4]
 8009b0c:	444b      	add	r3, r9
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8009b0e:	2bbf      	cmp	r3, #191	; 0xbf
 8009b10:	dd4b      	ble.n	8009baa <BackEndTask+0x1ae>
					packetEnd -= MSG_RX_BUF_SIZE;
 8009b12:	4651      	mov	r1, sl
 8009b14:	3bc0      	subs	r3, #192	; 0xc0
 8009b16:	610b      	str	r3, [r1, #16]
 8009b18:	4649      	mov	r1, r9
 8009b1a:	1908      	adds	r0, r1, r4
 8009b1c:	1838      	adds	r0, r7, r0
				if(packetStart != packetEnd) // Non-empty packet
 8009b1e:	4599      	cmp	r9, r3
 8009b20:	d04a      	beq.n	8009bb8 <BackEndTask+0x1bc>
					if(packetStart < packetEnd){
 8009b22:	4599      	cmp	r9, r3
 8009b24:	da6a      	bge.n	8009bfc <BackEndTask+0x200>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8009b26:	0001      	movs	r1, r0
 8009b28:	9a01      	ldr	r2, [sp, #4]
 8009b2a:	4893      	ldr	r0, [pc, #588]	; (8009d78 <BackEndTask+0x37c>)
 8009b2c:	f00a fa77 	bl	801401e <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009b30:	466b      	mov	r3, sp
 8009b32:	4891      	ldr	r0, [pc, #580]	; (8009d78 <BackEndTask+0x37c>)
 8009b34:	8899      	ldrh	r1, [r3, #4]
 8009b36:	f003 fcb9 	bl	800d4ac <CalculateCRC8>
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009b3a:	2238      	movs	r2, #56	; 0x38
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009b3c:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009b3e:	2100      	movs	r1, #0
 8009b40:	488d      	ldr	r0, [pc, #564]	; (8009d78 <BackEndTask+0x37c>)
 8009b42:	f00a fa75 	bl	8014030 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009b46:	4653      	mov	r3, sl
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	4699      	mov	r9, r3
 8009b4c:	464a      	mov	r2, r9
 8009b4e:	006b      	lsls	r3, r5, #1
 8009b50:	195b      	adds	r3, r3, r5
 8009b52:	019b      	lsls	r3, r3, #6
 8009b54:	18fb      	adds	r3, r7, r3
 8009b56:	5c9b      	ldrb	r3, [r3, r2]
 8009b58:	9a01      	ldr	r2, [sp, #4]
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d100      	bne.n	8009b60 <BackEndTask+0x164>
 8009b5e:	e092      	b.n	8009c86 <BackEndTask+0x28a>
				if(packetStart < packetEnd){
 8009b60:	4653      	mov	r3, sl
 8009b62:	4652      	mov	r2, sl
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	6892      	ldr	r2, [r2, #8]
 8009b68:	1918      	adds	r0, r3, r4
 8009b6a:	3204      	adds	r2, #4
 8009b6c:	1838      	adds	r0, r7, r0
 8009b6e:	9201      	str	r2, [sp, #4]
 8009b70:	4599      	cmp	r9, r3
 8009b72:	dd23      	ble.n	8009bbc <BackEndTask+0x1c0>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009b74:	2100      	movs	r1, #0
 8009b76:	f00a fa5b 	bl	8014030 <memset>
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009b7a:	464b      	mov	r3, r9
 8009b7c:	2bbf      	cmp	r3, #191	; 0xbf
 8009b7e:	d02e      	beq.n	8009bde <BackEndTask+0x1e2>
					UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009b80:	9a03      	ldr	r2, [sp, #12]
 8009b82:	3301      	adds	r3, #1
 8009b84:	7013      	strb	r3, [r2, #0]
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
 8009b86:	00f3      	lsls	r3, r6, #3
 8009b88:	1b9b      	subs	r3, r3, r6
 8009b8a:	4a7c      	ldr	r2, [pc, #496]	; (8009d7c <BackEndTask+0x380>)
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	3b37      	subs	r3, #55	; 0x37
 8009b90:	5cd0      	ldrb	r0, [r2, r3]
 8009b92:	212d      	movs	r1, #45	; 0x2d
 8009b94:	2200      	movs	r2, #0
 8009b96:	f7ff fe51 	bl	800983c <SendMessageToModule>
				++rejectedMsg;
 8009b9a:	4653      	mov	r3, sl
 8009b9c:	4652      	mov	r2, sl
 8009b9e:	8adb      	ldrh	r3, [r3, #22]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	82d3      	strh	r3, [r2, #22]
 8009ba4:	e743      	b.n	8009a2e <BackEndTask+0x32>
 8009ba6:	9d01      	ldr	r5, [sp, #4]
 8009ba8:	e78f      	b.n	8009aca <BackEndTask+0xce>
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009baa:	4651      	mov	r1, sl
 8009bac:	610b      	str	r3, [r1, #16]
 8009bae:	4649      	mov	r1, r9
 8009bb0:	1908      	adds	r0, r1, r4
 8009bb2:	1838      	adds	r0, r7, r0
				if(packetStart != packetEnd) // Non-empty packet
 8009bb4:	4599      	cmp	r9, r3
 8009bb6:	d1b4      	bne.n	8009b22 <BackEndTask+0x126>
 8009bb8:	3204      	adds	r2, #4
 8009bba:	9201      	str	r2, [sp, #4]
					MSG_RX_BUF_SIZE - packetStart);
 8009bbc:	22c0      	movs	r2, #192	; 0xc0
 8009bbe:	1ad3      	subs	r3, r2, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009bc0:	001a      	movs	r2, r3
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	9302      	str	r3, [sp, #8]
 8009bc6:	f00a fa33 	bl	8014030 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009bca:	9b02      	ldr	r3, [sp, #8]
 8009bcc:	9a01      	ldr	r2, [sp, #4]
 8009bce:	1938      	adds	r0, r7, r4
 8009bd0:	1ad2      	subs	r2, r2, r3
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	f00a fa2c 	bl	8014030 <memset>
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009bd8:	464b      	mov	r3, r9
 8009bda:	2bbf      	cmp	r3, #191	; 0xbf
 8009bdc:	d1d0      	bne.n	8009b80 <BackEndTask+0x184>
					UARTRxBufIndex[port - 1] =0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	9a03      	ldr	r2, [sp, #12]
 8009be2:	7013      	strb	r3, [r2, #0]
 8009be4:	e7cf      	b.n	8009b86 <BackEndTask+0x18a>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009be6:	0073      	lsls	r3, r6, #1
 8009be8:	199b      	adds	r3, r3, r6
 8009bea:	019b      	lsls	r3, r3, #6
 8009bec:	3b01      	subs	r3, #1
 8009bee:	5cfa      	ldrb	r2, [r7, r3]
 8009bf0:	4653      	mov	r3, sl
					parseStart =0;
 8009bf2:	4651      	mov	r1, sl
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009bf4:	609a      	str	r2, [r3, #8]
					parseStart =0;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	60cb      	str	r3, [r1, #12]
 8009bfa:	e785      	b.n	8009b08 <BackEndTask+0x10c>
						MSG_RX_BUF_SIZE - packetStart);
 8009bfc:	22c0      	movs	r2, #192	; 0xc0
 8009bfe:	464b      	mov	r3, r9
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	4699      	mov	r9, r3
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009c04:	001a      	movs	r2, r3
 8009c06:	0001      	movs	r1, r0
 8009c08:	485b      	ldr	r0, [pc, #364]	; (8009d78 <BackEndTask+0x37c>)
 8009c0a:	f00a fa08 	bl	801401e <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009c0e:	464a      	mov	r2, r9
 8009c10:	4b59      	ldr	r3, [pc, #356]	; (8009d78 <BackEndTask+0x37c>)
 8009c12:	1939      	adds	r1, r7, r4
 8009c14:	444b      	add	r3, r9
 8009c16:	0018      	movs	r0, r3
 8009c18:	9b01      	ldr	r3, [sp, #4]
 8009c1a:	1a9a      	subs	r2, r3, r2
 8009c1c:	f00a f9ff 	bl	801401e <memcpy>
 8009c20:	e786      	b.n	8009b30 <BackEndTask+0x134>
					packetLength =UARTRxBuf[port - 1][0];
 8009c22:	4653      	mov	r3, sl
					parseStart =1;
 8009c24:	2101      	movs	r1, #1
					packetLength =UARTRxBuf[port - 1][0];
 8009c26:	5d3a      	ldrb	r2, [r7, r4]
					parseStart =1;
 8009c28:	60d9      	str	r1, [r3, #12]
					packetLength =UARTRxBuf[port - 1][0];
 8009c2a:	609a      	str	r2, [r3, #8]
 8009c2c:	e76c      	b.n	8009b08 <BackEndTask+0x10c>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009c2e:	9805      	ldr	r0, [sp, #20]
 8009c30:	7800      	ldrb	r0, [r0, #0]
 8009c32:	2848      	cmp	r0, #72	; 0x48
 8009c34:	d07a      	beq.n	8009d2c <BackEndTask+0x330>
							if(BOS.disableCLI == false){
 8009c36:	9a04      	ldr	r2, [sp, #16]
 8009c38:	2a00      	cmp	r2, #0
 8009c3a:	d000      	beq.n	8009c3e <BackEndTask+0x242>
 8009c3c:	e70c      	b.n	8009a58 <BackEndTask+0x5c>
 8009c3e:	4648      	mov	r0, r9
 8009c40:	9a06      	ldr	r2, [sp, #24]
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009c42:	7805      	ldrb	r5, [r0, #0]
 8009c44:	469c      	mov	ip, r3
 8009c46:	1e53      	subs	r3, r2, #1
 8009c48:	2d0d      	cmp	r5, #13
 8009c4a:	d009      	beq.n	8009c60 <BackEndTask+0x264>
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	1c55      	adds	r5, r2, #1
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009c50:	2ac0      	cmp	r2, #192	; 0xc0
 8009c52:	d100      	bne.n	8009c56 <BackEndTask+0x25a>
 8009c54:	e700      	b.n	8009a58 <BackEndTask+0x5c>
							if(BOS.disableCLI == false){
 8009c56:	002a      	movs	r2, r5
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009c58:	7805      	ldrb	r5, [r0, #0]
 8009c5a:	1e53      	subs	r3, r2, #1
 8009c5c:	2d0d      	cmp	r5, #13
 8009c5e:	d1f5      	bne.n	8009c4c <BackEndTask+0x250>
 8009c60:	2bbf      	cmp	r3, #191	; 0xbf
 8009c62:	d100      	bne.n	8009c66 <BackEndTask+0x26a>
 8009c64:	e0ad      	b.n	8009dc2 <BackEndTask+0x3c6>
 8009c66:	7845      	ldrb	r5, [r0, #1]
 8009c68:	2d00      	cmp	r5, #0
 8009c6a:	d100      	bne.n	8009c6e <BackEndTask+0x272>
 8009c6c:	e08c      	b.n	8009d88 <BackEndTask+0x38c>
 8009c6e:	1c55      	adds	r5, r2, #1
 8009c70:	3001      	adds	r0, #1
							if(BOS.disableCLI == false){
 8009c72:	002a      	movs	r2, r5
 8009c74:	e7f0      	b.n	8009c58 <BackEndTask+0x25c>
					packetLength =UARTRxBuf[port - 1][1];
 8009c76:	193b      	adds	r3, r7, r4
 8009c78:	785a      	ldrb	r2, [r3, #1]
 8009c7a:	4653      	mov	r3, sl
					parseStart =2;
 8009c7c:	4651      	mov	r1, sl
					packetLength =UARTRxBuf[port - 1][1];
 8009c7e:	609a      	str	r2, [r3, #8]
					parseStart =2;
 8009c80:	2302      	movs	r3, #2
 8009c82:	60cb      	str	r3, [r1, #12]
 8009c84:	e740      	b.n	8009b08 <BackEndTask+0x10c>
						portStatus[port] =MSG;
 8009c86:	4643      	mov	r3, r8
 8009c88:	2201      	movs	r2, #1
 8009c8a:	559a      	strb	r2, [r3, r6]
						messageLength[port - 1] =packetLength;
 8009c8c:	4653      	mov	r3, sl
 8009c8e:	4a3c      	ldr	r2, [pc, #240]	; (8009d80 <BackEndTask+0x384>)
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	00f0      	lsls	r0, r6, #3
 8009c94:	5553      	strb	r3, [r2, r5]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009c96:	4652      	mov	r2, sl
 8009c98:	68d1      	ldr	r1, [r2, #12]
 8009c9a:	2238      	movs	r2, #56	; 0x38
 8009c9c:	4252      	negs	r2, r2
 8009c9e:	4694      	mov	ip, r2
 8009ca0:	1b80      	subs	r0, r0, r6
 8009ca2:	00c0      	lsls	r0, r0, #3
 8009ca4:	4484      	add	ip, r0
 8009ca6:	4662      	mov	r2, ip
 8009ca8:	9202      	str	r2, [sp, #8]
 8009caa:	4a34      	ldr	r2, [pc, #208]	; (8009d7c <BackEndTask+0x380>)
 8009cac:	000d      	movs	r5, r1
 8009cae:	3a38      	subs	r2, #56	; 0x38
 8009cb0:	1810      	adds	r0, r2, r0
 8009cb2:	22bf      	movs	r2, #191	; 0xbf
 8009cb4:	9104      	str	r1, [sp, #16]
 8009cb6:	1909      	adds	r1, r1, r4
						messageLength[port - 1] =packetLength;
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	1879      	adds	r1, r7, r1
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009cbc:	1b52      	subs	r2, r2, r5
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	dc38      	bgt.n	8009d34 <BackEndTask+0x338>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009cc2:	001a      	movs	r2, r3
 8009cc4:	f00a f9ab 	bl	801401e <memcpy>
						if(packetStart < packetEnd){
 8009cc8:	4653      	mov	r3, sl
 8009cca:	9a01      	ldr	r2, [sp, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	3204      	adds	r2, #4
 8009cd0:	1918      	adds	r0, r3, r4
 8009cd2:	1838      	adds	r0, r7, r0
 8009cd4:	9201      	str	r2, [sp, #4]
 8009cd6:	4599      	cmp	r9, r3
 8009cd8:	dc08      	bgt.n	8009cec <BackEndTask+0x2f0>
							MSG_RX_BUF_SIZE - packetStart);
 8009cda:	25c0      	movs	r5, #192	; 0xc0
 8009cdc:	1aed      	subs	r5, r5, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009cde:	002a      	movs	r2, r5
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	f00a f9a5 	bl	8014030 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009ce6:	9b01      	ldr	r3, [sp, #4]
 8009ce8:	1938      	adds	r0, r7, r4
 8009cea:	1b5a      	subs	r2, r3, r5
 8009cec:	2100      	movs	r1, #0
 8009cee:	f00a f99f 	bl	8014030 <memset>
						if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009cf2:	464b      	mov	r3, r9
 8009cf4:	2bbf      	cmp	r3, #191	; 0xbf
 8009cf6:	d02e      	beq.n	8009d56 <BackEndTask+0x35a>
							UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009cf8:	9a03      	ldr	r2, [sp, #12]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009cfe:	4653      	mov	r3, sl
 8009d00:	4652      	mov	r2, sl
 8009d02:	8a9b      	ldrh	r3, [r3, #20]
							NotifyMessagingTask(port);
 8009d04:	4658      	mov	r0, fp
						++acceptedMsg;
 8009d06:	3301      	adds	r3, #1
 8009d08:	8293      	strh	r3, [r2, #20]
						if(cMessage[port - 1][0] == myID || cMessage[port - 1][0] == BOS_BROADCAST || cMessage[port - 1][0] == BOS_MULTICAST)
 8009d0a:	9a02      	ldr	r2, [sp, #8]
 8009d0c:	4b1b      	ldr	r3, [pc, #108]	; (8009d7c <BackEndTask+0x380>)
 8009d0e:	5c9b      	ldrb	r3, [r3, r2]
 8009d10:	4a1c      	ldr	r2, [pc, #112]	; (8009d84 <BackEndTask+0x388>)
 8009d12:	7812      	ldrb	r2, [r2, #0]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d006      	beq.n	8009d26 <BackEndTask+0x32a>
 8009d18:	3302      	adds	r3, #2
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d902      	bls.n	8009d26 <BackEndTask+0x32a>
							ForwardReceivedMessage(port);
 8009d20:	f7ff fd6c 	bl	80097fc <ForwardReceivedMessage>
 8009d24:	e698      	b.n	8009a58 <BackEndTask+0x5c>
							NotifyMessagingTask(port);
 8009d26:	f7ff fb05 	bl	8009334 <NotifyMessagingTask>
 8009d2a:	e695      	b.n	8009a58 <BackEndTask+0x5c>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009d2c:	5d38      	ldrb	r0, [r7, r4]
 8009d2e:	285a      	cmp	r0, #90	; 0x5a
 8009d30:	d181      	bne.n	8009c36 <BackEndTask+0x23a>
 8009d32:	e6c7      	b.n	8009ac4 <BackEndTask+0xc8>
							MSG_RX_BUF_SIZE - parseStart);
 8009d34:	25c0      	movs	r5, #192	; 0xc0
 8009d36:	9b04      	ldr	r3, [sp, #16]
 8009d38:	1aed      	subs	r5, r5, r3
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009d3a:	002a      	movs	r2, r5
 8009d3c:	f00a f96f 	bl	801401e <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8009d40:	9b02      	ldr	r3, [sp, #8]
 8009d42:	1939      	adds	r1, r7, r4
 8009d44:	18e8      	adds	r0, r5, r3
 8009d46:	4b0d      	ldr	r3, [pc, #52]	; (8009d7c <BackEndTask+0x380>)
 8009d48:	469c      	mov	ip, r3
 8009d4a:	9b01      	ldr	r3, [sp, #4]
 8009d4c:	4460      	add	r0, ip
 8009d4e:	1b5a      	subs	r2, r3, r5
 8009d50:	f00a f965 	bl	801401e <memcpy>
 8009d54:	e7b8      	b.n	8009cc8 <BackEndTask+0x2cc>
							UARTRxBufIndex[port - 1] =0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	9a03      	ldr	r2, [sp, #12]
 8009d5a:	7013      	strb	r3, [r2, #0]
 8009d5c:	e7cf      	b.n	8009cfe <BackEndTask+0x302>
 8009d5e:	46c0      	nop			; (mov r8, r8)
 8009d60:	20000c2c 	.word	0x20000c2c
 8009d64:	200017d4 	.word	0x200017d4
 8009d68:	20001340 	.word	0x20001340
 8009d6c:	200012f8 	.word	0x200012f8
 8009d70:	20001300 	.word	0x20001300
 8009d74:	20006ccc 	.word	0x20006ccc
 8009d78:	20001308 	.word	0x20001308
 8009d7c:	20000c90 	.word	0x20000c90
 8009d80:	20000c50 	.word	0x20000c50
 8009d84:	20000a98 	.word	0x20000a98
 8009d88:	0018      	movs	r0, r3
 8009d8a:	9d01      	ldr	r5, [sp, #4]
 8009d8c:	b2d2      	uxtb	r2, r2
										UARTRxBuf[port - 1][j] =0;
 8009d8e:	2100      	movs	r1, #0
 8009d90:	006b      	lsls	r3, r5, #1
 8009d92:	195b      	adds	r3, r3, r5
 8009d94:	019b      	lsls	r3, r3, #6
 8009d96:	18fb      	adds	r3, r7, r3
 8009d98:	5419      	strb	r1, [r3, r0]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009d9a:	9b03      	ldr	r3, [sp, #12]
 8009d9c:	701a      	strb	r2, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8009d9e:	4642      	mov	r2, r8
 8009da0:	4b0e      	ldr	r3, [pc, #56]	; (8009ddc <BackEndTask+0x3e0>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	54d1      	strb	r1, [r2, r3]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009da6:	2303      	movs	r3, #3
 8009da8:	5593      	strb	r3, [r2, r6]
										PcPort =port;
 8009daa:	465a      	mov	r2, fp
 8009dac:	4b0b      	ldr	r3, [pc, #44]	; (8009ddc <BackEndTask+0x3e0>)
 8009dae:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009db0:	4b0b      	ldr	r3, [pc, #44]	; (8009de0 <BackEndTask+0x3e4>)
 8009db2:	2202      	movs	r2, #2
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	9801      	ldr	r0, [sp, #4]
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f005 fdf2 	bl	800f9a4 <xTaskGenericNotify>
										break;
 8009dc0:	e64a      	b.n	8009a58 <BackEndTask+0x5c>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009dc2:	5d3a      	ldrb	r2, [r7, r4]
 8009dc4:	0018      	movs	r0, r3
 8009dc6:	4663      	mov	r3, ip
 8009dc8:	2a00      	cmp	r2, #0
 8009dca:	d003      	beq.n	8009dd4 <BackEndTask+0x3d8>
							emptyBuffer = true;
 8009dcc:	2201      	movs	r2, #1
 8009dce:	18cd      	adds	r5, r1, r3
 8009dd0:	9202      	str	r2, [sp, #8]
 8009dd2:	e668      	b.n	8009aa6 <BackEndTask+0xaa>
 8009dd4:	9d01      	ldr	r5, [sp, #4]
 8009dd6:	22c0      	movs	r2, #192	; 0xc0
 8009dd8:	e7d9      	b.n	8009d8e <BackEndTask+0x392>
 8009dda:	46c0      	nop			; (mov r8, r8)
 8009ddc:	20000c28 	.word	0x20000c28
 8009de0:	20001710 	.word	0x20001710

08009de4 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8009de4:	2001      	movs	r0, #1
 8009de6:	4770      	bx	lr

08009de8 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8009de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dea:	4657      	mov	r7, sl
 8009dec:	4645      	mov	r5, r8
 8009dee:	46de      	mov	lr, fp
 8009df0:	464e      	mov	r6, r9
 8009df2:	b5e0      	push	{r5, r6, r7, lr}
	port =(int8_t )(unsigned )argument;
 8009df4:	b2c3      	uxtb	r3, r0
void PxMessagingTask(void *argument){
 8009df6:	b09d      	sub	sp, #116	; 0x74
	port =(int8_t )(unsigned )argument;
 8009df8:	930d      	str	r3, [sp, #52]	; 0x34
 8009dfa:	23ff      	movs	r3, #255	; 0xff
 8009dfc:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 8009dfe:	1e5d      	subs	r5, r3, #1
 8009e00:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e02:	00eb      	lsls	r3, r5, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009e04:	4adf      	ldr	r2, [pc, #892]	; (800a184 <PxMessagingTask+0x39c>)
 8009e06:	9306      	str	r3, [sp, #24]
 8009e08:	1b5b      	subs	r3, r3, r5
 8009e0a:	00db      	lsls	r3, r3, #3
 8009e0c:	4693      	mov	fp, r2
 8009e0e:	001a      	movs	r2, r3
 8009e10:	445a      	add	r2, fp
 8009e12:	920a      	str	r2, [sp, #40]	; 0x28
	HAL_StatusTypeDef status =HAL_OK;
 8009e14:	2200      	movs	r2, #0
 8009e16:	920f      	str	r2, [sp, #60]	; 0x3c
 8009e18:	4adb      	ldr	r2, [pc, #876]	; (800a188 <PxMessagingTask+0x3a0>)
 8009e1a:	930e      	str	r3, [sp, #56]	; 0x38
 8009e1c:	4690      	mov	r8, r2
 8009e1e:	1c5a      	adds	r2, r3, #1
 8009e20:	3305      	adds	r3, #5
 8009e22:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e24:	4bd9      	ldr	r3, [pc, #868]	; (800a18c <PxMessagingTask+0x3a4>)
 8009e26:	9216      	str	r2, [sp, #88]	; 0x58
 8009e28:	4699      	mov	r9, r3
									ADCSide =cMessage[port - 1][shift + 1];
 8009e2a:	2338      	movs	r3, #56	; 0x38
 8009e2c:	00aa      	lsls	r2, r5, #2
 8009e2e:	9210      	str	r2, [sp, #64]	; 0x40
 8009e30:	4ad7      	ldr	r2, [pc, #860]	; (800a190 <PxMessagingTask+0x3a8>)
	BOS_Status result =BOS_OK;
 8009e32:	2700      	movs	r7, #0
 8009e34:	4692      	mov	sl, r2
									ADCSide =cMessage[port - 1][shift + 1];
 8009e36:	436b      	muls	r3, r5
 8009e38:	445b      	add	r3, fp
 8009e3a:	9305      	str	r3, [sp, #20]
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	2001      	movs	r0, #1
 8009e40:	4249      	negs	r1, r1
 8009e42:	f005 fd6f 	bl	800f924 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 8009e46:	4643      	mov	r3, r8
 8009e48:	5d5e      	ldrb	r6, [r3, r5]
 8009e4a:	2e00      	cmp	r6, #0
 8009e4c:	d076      	beq.n	8009f3c <PxMessagingTask+0x154>
			if(cMessage[port - 1][2] >> 7){
 8009e4e:	9b06      	ldr	r3, [sp, #24]
 8009e50:	1b5b      	subs	r3, r3, r5
 8009e52:	00db      	lsls	r3, r3, #3
 8009e54:	445b      	add	r3, fp
 8009e56:	7899      	ldrb	r1, [r3, #2]
 8009e58:	b24b      	sxtb	r3, r1
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	da01      	bge.n	8009e62 <PxMessagingTask+0x7a>
 8009e5e:	f000 fcc9 	bl	800a7f4 <PxMessagingTask+0xa0c>
				longMessage =0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	4acb      	ldr	r2, [pc, #812]	; (800a194 <PxMessagingTask+0x3ac>)
 8009e66:	7013      	strb	r3, [r2, #0]
			dst =cMessage[port - 1][0];
 8009e68:	465a      	mov	r2, fp
 8009e6a:	9b06      	ldr	r3, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8009e6c:	4eca      	ldr	r6, [pc, #808]	; (800a198 <PxMessagingTask+0x3b0>)
			dst =cMessage[port - 1][0];
 8009e6e:	1b5b      	subs	r3, r3, r5
 8009e70:	00db      	lsls	r3, r3, #3
 8009e72:	5cd2      	ldrb	r2, [r2, r3]
			src =cMessage[port - 1][1];
 8009e74:	445b      	add	r3, fp
			dst =cMessage[port - 1][0];
 8009e76:	9207      	str	r2, [sp, #28]
			src =cMessage[port - 1][1];
 8009e78:	785a      	ldrb	r2, [r3, #1]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8009e7a:	0708      	lsls	r0, r1, #28
			src =cMessage[port - 1][1];
 8009e7c:	9204      	str	r2, [sp, #16]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	0014      	movs	r4, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8009e82:	0f80      	lsrs	r0, r0, #30
 8009e84:	7070      	strb	r0, [r6, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 8009e86:	0908      	lsrs	r0, r1, #4
 8009e88:	400c      	ands	r4, r1
 8009e8a:	4002      	ands	r2, r0
 8009e8c:	46a4      	mov	ip, r4
 8009e8e:	b2d0      	uxtb	r0, r2
 8009e90:	70f2      	strb	r2, [r6, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 8009e92:	2260      	movs	r2, #96	; 0x60
 8009e94:	4463      	add	r3, ip
 8009e96:	400a      	ands	r2, r1
 8009e98:	940c      	str	r4, [sp, #48]	; 0x30
 8009e9a:	7032      	strb	r2, [r6, #0]
 8009e9c:	0022      	movs	r2, r4
 8009e9e:	78dc      	ldrb	r4, [r3, #3]
 8009ea0:	9408      	str	r4, [sp, #32]
			if(extendCode == true){
 8009ea2:	0789      	lsls	r1, r1, #30
 8009ea4:	d507      	bpl.n	8009eb6 <PxMessagingTask+0xce>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8009ea6:	46a4      	mov	ip, r4
 8009ea8:	791b      	ldrb	r3, [r3, #4]
				++shift;
 8009eaa:	3201      	adds	r2, #1
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8009eac:	021b      	lsls	r3, r3, #8
 8009eae:	4463      	add	r3, ip
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	9308      	str	r3, [sp, #32]
				++shift;
 8009eb4:	920c      	str	r2, [sp, #48]	; 0x30
			if(true == BOSMessaging.received_Acknowledgment){
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d001      	beq.n	8009ebe <PxMessagingTask+0xd6>
 8009eba:	f000 fca0 	bl	800a7fe <PxMessagingTask+0xa16>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8009ebe:	9a07      	ldr	r2, [sp, #28]
 8009ec0:	1e53      	subs	r3, r2, #1
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2bfc      	cmp	r3, #252	; 0xfc
 8009ec6:	d801      	bhi.n	8009ecc <PxMessagingTask+0xe4>
 8009ec8:	f000 fc6e 	bl	800a7a8 <PxMessagingTask+0x9c0>
 8009ecc:	4643      	mov	r3, r8
 8009ece:	5d5e      	ldrb	r6, [r3, r5]
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009ed0:	9b07      	ldr	r3, [sp, #28]
 8009ed2:	2bff      	cmp	r3, #255	; 0xff
 8009ed4:	d001      	beq.n	8009eda <PxMessagingTask+0xf2>
 8009ed6:	f000 fca7 	bl	800a828 <PxMessagingTask+0xa40>
 8009eda:	9b06      	ldr	r3, [sp, #24]
 8009edc:	4aaf      	ldr	r2, [pc, #700]	; (800a19c <PxMessagingTask+0x3b4>)
 8009ede:	1b5c      	subs	r4, r3, r5
 8009ee0:	00e4      	lsls	r4, r4, #3
 8009ee2:	445c      	add	r4, fp
 8009ee4:	19a3      	adds	r3, r4, r6
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	7e12      	ldrb	r2, [r2, #24]
					result =BOS_ERR_MSG_Reflection;
 8009eec:	2703      	movs	r7, #3
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d024      	beq.n	8009f3c <PxMessagingTask+0x154>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009ef2:	4aaa      	ldr	r2, [pc, #680]	; (800a19c <PxMessagingTask+0x3b4>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8009ef4:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009ef6:	7613      	strb	r3, [r2, #24]
 8009ef8:	4aa9      	ldr	r2, [pc, #676]	; (800a1a0 <PxMessagingTask+0x3b8>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8009efa:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009efc:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8009efe:	f7ff fc39 	bl	8009774 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8009f02:	4643      	mov	r3, r8
 8009f04:	5d5e      	ldrb	r6, [r3, r5]
 8009f06:	2300      	movs	r3, #0
 8009f08:	19a4      	adds	r4, r4, r6
 8009f0a:	3c01      	subs	r4, #1
 8009f0c:	7023      	strb	r3, [r4, #0]
				shift +=4;
 8009f0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009f10:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 8009f12:	1b32      	subs	r2, r6, r4
 8009f14:	b2d3      	uxtb	r3, r2
 8009f16:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 8009f18:	9b08      	ldr	r3, [sp, #32]
 8009f1a:	2b2d      	cmp	r3, #45	; 0x2d
 8009f1c:	d900      	bls.n	8009f20 <PxMessagingTask+0x138>
 8009f1e:	e084      	b.n	800a02a <PxMessagingTask+0x242>
 8009f20:	4aa0      	ldr	r2, [pc, #640]	; (800a1a4 <PxMessagingTask+0x3bc>)
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	58d3      	ldr	r3, [r2, r3]
 8009f26:	469f      	mov	pc, r3
							SaveToRO();
 8009f28:	f001 faf4 	bl	800b514 <SaveToRO>
							SaveEEportsDir();
 8009f2c:	f7f9 fba2 	bl	8003674 <SaveEEportsDir>
							indMode =IND_PING;
 8009f30:	2301      	movs	r3, #1
							indMode =IND_TOPOLOGY;
 8009f32:	4a9d      	ldr	r2, [pc, #628]	; (800a1a8 <PxMessagingTask+0x3c0>)
 8009f34:	7013      	strb	r3, [r2, #0]
 8009f36:	4643      	mov	r3, r8
							IND_toggle();
 8009f38:	2700      	movs	r7, #0
 8009f3a:	5d5e      	ldrb	r6, [r3, r5]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009f3c:	0032      	movs	r2, r6
 8009f3e:	2100      	movs	r1, #0
 8009f40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f42:	f00a f875 	bl	8014030 <memset>
		messageLength[port - 1] =0;
 8009f46:	4643      	mov	r3, r8
 8009f48:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8009f4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
		messageLength[port - 1] =0;
 8009f4c:	555a      	strb	r2, [r3, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8009f4e:	4b97      	ldr	r3, [pc, #604]	; (800a1ac <PxMessagingTask+0x3c4>)
 8009f50:	5c5b      	ldrb	r3, [r3, r1]
 8009f52:	3b02      	subs	r3, #2
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d901      	bls.n	8009f5c <PxMessagingTask+0x174>
			portStatus[port] =FREE;
 8009f58:	4b94      	ldr	r3, [pc, #592]	; (800a1ac <PxMessagingTask+0x3c4>)
 8009f5a:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8009f5c:	f005 ffa8 	bl	800feb0 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8009f60:	e76c      	b.n	8009e3c <PxMessagingTask+0x54>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009f62:	9b05      	ldr	r3, [sp, #20]
 8009f64:	191a      	adds	r2, r3, r4
 8009f66:	7893      	ldrb	r3, [r2, #2]
 8009f68:	78d1      	ldrb	r1, [r2, #3]
 8009f6a:	021b      	lsls	r3, r3, #8
 8009f6c:	0409      	lsls	r1, r1, #16
 8009f6e:	185b      	adds	r3, r3, r1
 8009f70:	7851      	ldrb	r1, [r2, #1]
 8009f72:	7912      	ldrb	r2, [r2, #4]
 8009f74:	185b      	adds	r3, r3, r1
 8009f76:	0612      	lsls	r2, r2, #24
 8009f78:	189b      	adds	r3, r3, r2
 8009f7a:	4a8d      	ldr	r2, [pc, #564]	; (800a1b0 <PxMessagingTask+0x3c8>)
 8009f7c:	6393      	str	r3, [r2, #56]	; 0x38
									ADCPort =cMessage[port - 1][shift];
 8009f7e:	2644      	movs	r6, #68	; 0x44
									ADCSide =cMessage[port - 1][shift + 1];
 8009f80:	2146      	movs	r1, #70	; 0x46
									ADCPort =cMessage[port - 1][shift];
 8009f82:	4b8b      	ldr	r3, [pc, #556]	; (800a1b0 <PxMessagingTask+0x3c8>)
									ADCSide =cMessage[port - 1][shift + 1];
 8009f84:	4a8a      	ldr	r2, [pc, #552]	; (800a1b0 <PxMessagingTask+0x3c8>)
									ADCPort =cMessage[port - 1][shift];
 8009f86:	5398      	strh	r0, [r3, r6]
									ADCSide =cMessage[port - 1][shift + 1];
 8009f88:	9b05      	ldr	r3, [sp, #20]
 8009f8a:	191b      	adds	r3, r3, r4
 8009f8c:	785b      	ldrb	r3, [r3, #1]
 8009f8e:	5253      	strh	r3, [r2, r1]
									if(0 == ADCSide){
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <PxMessagingTask+0x1b0>
 8009f94:	f000 fdfc 	bl	800ab90 <PxMessagingTask+0xda8>
									else if(1 == ADCSide){
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d109      	bne.n	8009fb0 <PxMessagingTask+0x1c8>
										ADCSelectChannel(ADCPort,"bottom");
 8009f9c:	4985      	ldr	r1, [pc, #532]	; (800a1b4 <PxMessagingTask+0x3cc>)
 8009f9e:	f7fe fd79 	bl	8008a94 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 8009fa2:	4a83      	ldr	r2, [pc, #524]	; (800a1b0 <PxMessagingTask+0x3c8>)
 8009fa4:	4b82      	ldr	r3, [pc, #520]	; (800a1b0 <PxMessagingTask+0x3c8>)
 8009fa6:	3248      	adds	r2, #72	; 0x48
 8009fa8:	5d98      	ldrb	r0, [r3, r6]
 8009faa:	4982      	ldr	r1, [pc, #520]	; (800a1b4 <PxMessagingTask+0x3cc>)
 8009fac:	f7fe fdc4 	bl	8008b38 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 8009fb0:	497f      	ldr	r1, [pc, #508]	; (800a1b0 <PxMessagingTask+0x3c8>)
 8009fb2:	487f      	ldr	r0, [pc, #508]	; (800a1b0 <PxMessagingTask+0x3c8>)
 8009fb4:	314c      	adds	r1, #76	; 0x4c
 8009fb6:	3050      	adds	r0, #80	; 0x50
 8009fb8:	f7fe fbba 	bl	8008730 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 8009fbc:	4a7c      	ldr	r2, [pc, #496]	; (800a1b0 <PxMessagingTask+0x3c8>)
 8009fbe:	9b06      	ldr	r3, [sp, #24]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 8009fc0:	0011      	movs	r1, r2
									ADCPort =cMessage[port - 1][shift];
 8009fc2:	1b5e      	subs	r6, r3, r5
 8009fc4:	2344      	movs	r3, #68	; 0x44
 8009fc6:	00f6      	lsls	r6, r6, #3
 8009fc8:	445e      	add	r6, fp
 8009fca:	5d30      	ldrb	r0, [r6, r4]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 8009fcc:	3154      	adds	r1, #84	; 0x54
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009fce:	1934      	adds	r4, r6, r4
									ADCPort =cMessage[port - 1][shift];
 8009fd0:	52d0      	strh	r0, [r2, r3]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 8009fd2:	f7fe fc73 	bl	80088bc <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009fd6:	79a3      	ldrb	r3, [r4, #6]
 8009fd8:	79e2      	ldrb	r2, [r4, #7]
 8009fda:	021b      	lsls	r3, r3, #8
 8009fdc:	0412      	lsls	r2, r2, #16
 8009fde:	189b      	adds	r3, r3, r2
 8009fe0:	7962      	ldrb	r2, [r4, #5]
 8009fe2:	189b      	adds	r3, r3, r2
 8009fe4:	7a22      	ldrb	r2, [r4, #8]
 8009fe6:	0612      	lsls	r2, r2, #24
 8009fe8:	189b      	adds	r3, r3, r2
 8009fea:	4a71      	ldr	r2, [pc, #452]	; (800a1b0 <PxMessagingTask+0x3c8>)
 8009fec:	63d3      	str	r3, [r2, #60]	; 0x3c
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009fee:	7aa3      	ldrb	r3, [r4, #10]
 8009ff0:	7ae2      	ldrb	r2, [r4, #11]
 8009ff2:	021b      	lsls	r3, r3, #8
 8009ff4:	0412      	lsls	r2, r2, #16
 8009ff6:	189b      	adds	r3, r3, r2
 8009ff8:	7a62      	ldrb	r2, [r4, #9]
 8009ffa:	189b      	adds	r3, r3, r2
 8009ffc:	7b22      	ldrb	r2, [r4, #12]
 8009ffe:	0612      	lsls	r2, r2, #24
 800a000:	189b      	adds	r3, r3, r2
 800a002:	4a6b      	ldr	r2, [pc, #428]	; (800a1b0 <PxMessagingTask+0x3c8>)
 800a004:	6413      	str	r3, [r2, #64]	; 0x40
							ACK_FLAG =1;
 800a006:	2301      	movs	r3, #1
 800a008:	4a6b      	ldr	r2, [pc, #428]	; (800a1b8 <PxMessagingTask+0x3d0>)
 800a00a:	2700      	movs	r7, #0
 800a00c:	7013      	strb	r3, [r2, #0]
 800a00e:	4643      	mov	r3, r8
 800a010:	5d5e      	ldrb	r6, [r3, r5]
 800a012:	e793      	b.n	8009f3c <PxMessagingTask+0x154>
							switch(cMessage[port - 1][0 + shift]){
 800a014:	9b06      	ldr	r3, [sp, #24]
 800a016:	1b5b      	subs	r3, r3, r5
 800a018:	00db      	lsls	r3, r3, #3
 800a01a:	445b      	add	r3, fp
 800a01c:	5d18      	ldrb	r0, [r3, r4]
 800a01e:	282b      	cmp	r0, #43	; 0x2b
 800a020:	d8f1      	bhi.n	800a006 <PxMessagingTask+0x21e>
 800a022:	4a66      	ldr	r2, [pc, #408]	; (800a1bc <PxMessagingTask+0x3d4>)
 800a024:	0083      	lsls	r3, r0, #2
 800a026:	58d3      	ldr	r3, [r2, r3]
 800a028:	469f      	mov	pc, r3
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800a02a:	9400      	str	r4, [sp, #0]
 800a02c:	9b07      	ldr	r3, [sp, #28]
 800a02e:	9a04      	ldr	r2, [sp, #16]
 800a030:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a032:	9808      	ldr	r0, [sp, #32]
 800a034:	f7ff fed6 	bl	8009de4 <User_MessagingParser>
 800a038:	0007      	movs	r7, r0
							if(result == BOS_ERR_UnknownMessage){
 800a03a:	2801      	cmp	r0, #1
 800a03c:	d101      	bne.n	800a042 <PxMessagingTask+0x25a>
 800a03e:	f000 fc3d 	bl	800a8bc <PxMessagingTask+0xad4>
 800a042:	4643      	mov	r3, r8
 800a044:	5d5e      	ldrb	r6, [r3, r5]
 800a046:	e779      	b.n	8009f3c <PxMessagingTask+0x154>
							rejected_FLAG =1;
 800a048:	2301      	movs	r3, #1
 800a04a:	4a5d      	ldr	r2, [pc, #372]	; (800a1c0 <PxMessagingTask+0x3d8>)
 800a04c:	7013      	strb	r3, [r2, #0]
 800a04e:	e772      	b.n	8009f36 <PxMessagingTask+0x14e>
							for(p =0; p < numOfParams; p++){
 800a050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a052:	2b00      	cmp	r3, #0
 800a054:	d01d      	beq.n	800a092 <PxMessagingTask+0x2aa>
 800a056:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a058:	4659      	mov	r1, fp
 800a05a:	46b4      	mov	ip, r6
 800a05c:	1930      	adds	r0, r6, r4
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a05e:	2680      	movs	r6, #128	; 0x80
 800a060:	3101      	adds	r1, #1
 800a062:	4461      	add	r1, ip
 800a064:	9a04      	ldr	r2, [sp, #16]
 800a066:	190c      	adds	r4, r1, r4
 800a068:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a06a:	3a01      	subs	r2, #1
 800a06c:	4b55      	ldr	r3, [pc, #340]	; (800a1c4 <PxMessagingTask+0x3dc>)
 800a06e:	0052      	lsls	r2, r2, #1
 800a070:	3901      	subs	r1, #1
 800a072:	b2c9      	uxtb	r1, r1
 800a074:	5a9b      	ldrh	r3, [r3, r2]
 800a076:	4458      	add	r0, fp
 800a078:	1864      	adds	r4, r4, r1
 800a07a:	0236      	lsls	r6, r6, #8
 800a07c:	0037      	movs	r7, r6
 800a07e:	7801      	ldrb	r1, [r0, #0]
 800a080:	3001      	adds	r0, #1
 800a082:	3901      	subs	r1, #1
 800a084:	410f      	asrs	r7, r1
 800a086:	433b      	orrs	r3, r7
 800a088:	b29b      	uxth	r3, r3
							for(p =0; p < numOfParams; p++){
 800a08a:	4284      	cmp	r4, r0
 800a08c:	d1f6      	bne.n	800a07c <PxMessagingTask+0x294>
 800a08e:	494d      	ldr	r1, [pc, #308]	; (800a1c4 <PxMessagingTask+0x3dc>)
 800a090:	528b      	strh	r3, [r1, r2]
							responseStatus =BOS_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	e0fd      	b.n	800a292 <PxMessagingTask+0x4aa>
							temp =0;
 800a096:	2300      	movs	r3, #0
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a098:	2680      	movs	r6, #128	; 0x80
							for(p =1; p <= NumOfPorts; p++){
 800a09a:	2401      	movs	r4, #1
							temp =0;
 800a09c:	9309      	str	r3, [sp, #36]	; 0x24
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a09e:	0236      	lsls	r6, r6, #8
 800a0a0:	0020      	movs	r0, r4
 800a0a2:	f004 f809 	bl	800e0b8 <GetUart>
 800a0a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a0a8:	42b3      	cmp	r3, r6
 800a0aa:	d105      	bne.n	800a0b8 <PxMessagingTask+0x2d0>
									messageParams[temp++] =p;
 800a0ac:	4651      	mov	r1, sl
 800a0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0b0:	1c53      	adds	r3, r2, #1
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	548c      	strb	r4, [r1, r2]
 800a0b6:	9309      	str	r3, [sp, #36]	; 0x24
							for(p =1; p <= NumOfPorts; p++){
 800a0b8:	3401      	adds	r4, #1
 800a0ba:	b2e4      	uxtb	r4, r4
 800a0bc:	2c06      	cmp	r4, #6
 800a0be:	d1ef      	bne.n	800a0a0 <PxMessagingTask+0x2b8>
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a0c0:	466b      	mov	r3, sp
 800a0c2:	2114      	movs	r1, #20
 800a0c4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800a0c6:	9804      	ldr	r0, [sp, #16]
 800a0c8:	f7ff fbb8 	bl	800983c <SendMessageToModule>
 800a0cc:	e733      	b.n	8009f36 <PxMessagingTask+0x14e>
 800a0ce:	4b3e      	ldr	r3, [pc, #248]	; (800a1c8 <PxMessagingTask+0x3e0>)
 800a0d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0d2:	881f      	ldrh	r7, [r3, #0]
 800a0d4:	4b3d      	ldr	r3, [pc, #244]	; (800a1cc <PxMessagingTask+0x3e4>)
 800a0d6:	4694      	mov	ip, r2
 800a0d8:	19d8      	adds	r0, r3, r7
 800a0da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0dc:	4467      	add	r7, ip
 800a0de:	18e1      	adds	r1, r4, r3
 800a0e0:	4643      	mov	r3, r8
 800a0e2:	5d5e      	ldrb	r6, [r3, r5]
							if(longMessage){
 800a0e4:	4b2b      	ldr	r3, [pc, #172]	; (800a194 <PxMessagingTask+0x3ac>)
 800a0e6:	b2bf      	uxth	r7, r7
 800a0e8:	781c      	ldrb	r4, [r3, #0]
 800a0ea:	4459      	add	r1, fp
 800a0ec:	2c00      	cmp	r4, #0
 800a0ee:	d101      	bne.n	800a0f4 <PxMessagingTask+0x30c>
 800a0f0:	f000 fc76 	bl	800a9e0 <PxMessagingTask+0xbf8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a0f4:	f009 ff93 	bl	801401e <memcpy>
								longMessageLastPtr +=numOfParams;
 800a0f8:	4b33      	ldr	r3, [pc, #204]	; (800a1c8 <PxMessagingTask+0x3e0>)
 800a0fa:	801f      	strh	r7, [r3, #0]
 800a0fc:	2700      	movs	r7, #0
 800a0fe:	e71d      	b.n	8009f3c <PxMessagingTask+0x154>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800a100:	9b06      	ldr	r3, [sp, #24]
 800a102:	1b5b      	subs	r3, r3, r5
 800a104:	00db      	lsls	r3, r3, #3
 800a106:	445b      	add	r3, fp
 800a108:	5d1b      	ldrb	r3, [r3, r4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <PxMessagingTask+0x32a>
 800a10e:	f000 fc0c 	bl	800a92a <PxMessagingTask+0xb42>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800a112:	9b05      	ldr	r3, [sp, #20]
 800a114:	469c      	mov	ip, r3
 800a116:	4464      	add	r4, ip
 800a118:	78a3      	ldrb	r3, [r4, #2]
 800a11a:	78e2      	ldrb	r2, [r4, #3]
 800a11c:	061b      	lsls	r3, r3, #24
 800a11e:	0412      	lsls	r2, r2, #16
 800a120:	189b      	adds	r3, r3, r2
 800a122:	7962      	ldrb	r2, [r4, #5]
 800a124:	189b      	adds	r3, r3, r2
 800a126:	7922      	ldrb	r2, [r4, #4]
 800a128:	0212      	lsls	r2, r2, #8
 800a12a:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800a12c:	7862      	ldrb	r2, [r4, #1]
 800a12e:	3a01      	subs	r2, #1
 800a130:	b2d2      	uxtb	r2, r2
 800a132:	2a07      	cmp	r2, #7
 800a134:	d900      	bls.n	800a138 <PxMessagingTask+0x350>
 800a136:	e6fe      	b.n	8009f36 <PxMessagingTask+0x14e>
 800a138:	4925      	ldr	r1, [pc, #148]	; (800a1d0 <PxMessagingTask+0x3e8>)
 800a13a:	0092      	lsls	r2, r2, #2
 800a13c:	588a      	ldr	r2, [r1, r2]
 800a13e:	4697      	mov	pc, r2
							ExploreNeighbors(port);
 800a140:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a142:	f7f9 fc7f 	bl	8003a44 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800a146:	2302      	movs	r3, #2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a148:	2401      	movs	r4, #1
							temp =0;
 800a14a:	2700      	movs	r7, #0
							indMode =IND_TOPOLOGY;
 800a14c:	4a16      	ldr	r2, [pc, #88]	; (800a1a8 <PxMessagingTask+0x3c0>)
							osDelay(10);
 800a14e:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 800a150:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a152:	f004 f875 	bl	800e240 <osDelay>
 800a156:	4e1f      	ldr	r6, [pc, #124]	; (800a1d4 <PxMessagingTask+0x3ec>)
								if(neighbors[p - 1][0]){
 800a158:	8833      	ldrh	r3, [r6, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d009      	beq.n	800a172 <PxMessagingTask+0x38a>
									messageParams[temp] =p;
 800a15e:	4653      	mov	r3, sl
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a160:	1c78      	adds	r0, r7, #1
 800a162:	4450      	add	r0, sl
 800a164:	2204      	movs	r2, #4
 800a166:	0031      	movs	r1, r6
									messageParams[temp] =p;
 800a168:	55dc      	strb	r4, [r3, r7]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a16a:	f009 ff58 	bl	801401e <memcpy>
									temp +=5;
 800a16e:	3705      	adds	r7, #5
 800a170:	b2ff      	uxtb	r7, r7
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a172:	3401      	adds	r4, #1
 800a174:	b2e4      	uxtb	r4, r4
 800a176:	3604      	adds	r6, #4
 800a178:	2c06      	cmp	r4, #6
 800a17a:	d1ed      	bne.n	800a158 <PxMessagingTask+0x370>
 800a17c:	9709      	str	r7, [sp, #36]	; 0x24
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800a17e:	b2ba      	uxth	r2, r7
 800a180:	210d      	movs	r1, #13
 800a182:	e7a0      	b.n	800a0c6 <PxMessagingTask+0x2de>
 800a184:	20000c90 	.word	0x20000c90
 800a188:	20000c50 	.word	0x20000c50
 800a18c:	20000c40 	.word	0x20000c40
 800a190:	20000b3c 	.word	0x20000b3c
 800a194:	20000c4c 	.word	0x20000c4c
 800a198:	20006c4c 	.word	0x20006c4c
 800a19c:	200017d4 	.word	0x200017d4
 800a1a0:	20000c48 	.word	0x20000c48
 800a1a4:	08018bec 	.word	0x08018bec
 800a1a8:	2000113e 	.word	0x2000113e
 800a1ac:	20000c2c 	.word	0x20000c2c
 800a1b0:	20001854 	.word	0x20001854
 800a1b4:	08019b30 	.word	0x08019b30
 800a1b8:	2000113d 	.word	0x2000113d
 800a1bc:	08018ca4 	.word	0x08018ca4
 800a1c0:	2000113c 	.word	0x2000113c
 800a1c4:	20007140 	.word	0x20007140
 800a1c8:	20000c4a 	.word	0x20000c4a
 800a1cc:	200018ac 	.word	0x200018ac
 800a1d0:	08018d54 	.word	0x08018d54
 800a1d4:	20001128 	.word	0x20001128
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a1d8:	9b06      	ldr	r3, [sp, #24]
 800a1da:	9904      	ldr	r1, [sp, #16]
 800a1dc:	1b5b      	subs	r3, r3, r5
 800a1de:	00db      	lsls	r3, r3, #3
 800a1e0:	445b      	add	r3, fp
 800a1e2:	1918      	adds	r0, r3, r4
 800a1e4:	7882      	ldrb	r2, [r0, #2]
 800a1e6:	0209      	lsls	r1, r1, #8
 800a1e8:	4ed8      	ldr	r6, [pc, #864]	; (800a54c <PxMessagingTask+0x764>)
 800a1ea:	1852      	adds	r2, r2, r1
 800a1ec:	9910      	ldr	r1, [sp, #64]	; 0x40
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a1ee:	2700      	movs	r7, #0
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a1f0:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a1f2:	468c      	mov	ip, r1
 800a1f4:	0032      	movs	r2, r6
 800a1f6:	5d19      	ldrb	r1, [r3, r4]
 800a1f8:	7843      	ldrb	r3, [r0, #1]
 800a1fa:	0209      	lsls	r1, r1, #8
 800a1fc:	4462      	add	r2, ip
 800a1fe:	185b      	adds	r3, r3, r1
 800a200:	8053      	strh	r3, [r2, #2]
							messageParams[1] =(uint8_t )myPN;
 800a202:	4652      	mov	r2, sl
 800a204:	4bd2      	ldr	r3, [pc, #840]	; (800a550 <PxMessagingTask+0x768>)
							messageParams[2] =port;
 800a206:	9c0d      	ldr	r4, [sp, #52]	; 0x34
							messageParams[1] =(uint8_t )myPN;
 800a208:	881b      	ldrh	r3, [r3, #0]
							osDelay(2);
 800a20a:	2002      	movs	r0, #2
							messageParams[1] =(uint8_t )myPN;
 800a20c:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800a20e:	0a1b      	lsrs	r3, r3, #8
 800a210:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800a212:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800a214:	f004 f814 	bl	800e240 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a218:	2303      	movs	r3, #3
 800a21a:	2200      	movs	r2, #0
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	2100      	movs	r1, #0
 800a220:	3308      	adds	r3, #8
 800a222:	0020      	movs	r0, r4
 800a224:	f7ff f8aa 	bl	800937c <SendMessageFromPort>
 800a228:	4643      	mov	r3, r8
 800a22a:	5d5e      	ldrb	r6, [r3, r5]
 800a22c:	e686      	b.n	8009f3c <PxMessagingTask+0x154>
							IND_toggle();
 800a22e:	2180      	movs	r1, #128	; 0x80
 800a230:	2090      	movs	r0, #144	; 0x90
 800a232:	0109      	lsls	r1, r1, #4
 800a234:	05c0      	lsls	r0, r0, #23
 800a236:	f007 fca9 	bl	8011b8c <HAL_GPIO_TogglePin>
 800a23a:	e67c      	b.n	8009f36 <PxMessagingTask+0x14e>
							IND_OFF();
 800a23c:	2200      	movs	r2, #0
 800a23e:	2180      	movs	r1, #128	; 0x80
 800a240:	2090      	movs	r0, #144	; 0x90
 800a242:	0109      	lsls	r1, r1, #4
 800a244:	05c0      	lsls	r0, r0, #23
 800a246:	f007 fc9b 	bl	8011b80 <HAL_GPIO_WritePin>
 800a24a:	e674      	b.n	8009f36 <PxMessagingTask+0x14e>
							IND_ON();
 800a24c:	2201      	movs	r2, #1
 800a24e:	e7f6      	b.n	800a23e <PxMessagingTask+0x456>
							if(!moduleAlias[myID][0])
 800a250:	4bc0      	ldr	r3, [pc, #768]	; (800a554 <PxMessagingTask+0x76c>)
 800a252:	781a      	ldrb	r2, [r3, #0]
 800a254:	0093      	lsls	r3, r2, #2
 800a256:	189b      	adds	r3, r3, r2
 800a258:	4abf      	ldr	r2, [pc, #764]	; (800a558 <PxMessagingTask+0x770>)
 800a25a:	005b      	lsls	r3, r3, #1
 800a25c:	5cd3      	ldrb	r3, [r2, r3]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d001      	beq.n	800a266 <PxMessagingTask+0x47e>
 800a262:	f000 fd8d 	bl	800ad80 <PxMessagingTask+0xf98>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800a266:	48bd      	ldr	r0, [pc, #756]	; (800a55c <PxMessagingTask+0x774>)
 800a268:	9a04      	ldr	r2, [sp, #16]
 800a26a:	301c      	adds	r0, #28
 800a26c:	49bc      	ldr	r1, [pc, #752]	; (800a560 <PxMessagingTask+0x778>)
 800a26e:	f00a f8d9 	bl	8014424 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800a272:	4cba      	ldr	r4, [pc, #744]	; (800a55c <PxMessagingTask+0x774>)
 800a274:	341c      	adds	r4, #28
 800a276:	0020      	movs	r0, r4
 800a278:	f7f5 ff4e 	bl	8000118 <strlen>
 800a27c:	4bb9      	ldr	r3, [pc, #740]	; (800a564 <PxMessagingTask+0x77c>)
 800a27e:	b282      	uxth	r2, r0
 800a280:	7818      	ldrb	r0, [r3, #0]
 800a282:	2301      	movs	r3, #1
 800a284:	425b      	negs	r3, r3
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	0021      	movs	r1, r4
 800a28a:	3333      	adds	r3, #51	; 0x33
 800a28c:	f003 fe8c 	bl	800dfa8 <writePxMutex>
							responseStatus =BOS_OK;
 800a290:	2300      	movs	r3, #0
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800a292:	4ab5      	ldr	r2, [pc, #724]	; (800a568 <PxMessagingTask+0x780>)
 800a294:	2700      	movs	r7, #0
 800a296:	7013      	strb	r3, [r2, #0]
 800a298:	4643      	mov	r3, r8
 800a29a:	5d5e      	ldrb	r6, [r3, r5]
 800a29c:	e64e      	b.n	8009f3c <PxMessagingTask+0x154>
							indMode =IND_PING;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	4ab2      	ldr	r2, [pc, #712]	; (800a56c <PxMessagingTask+0x784>)
							osDelay(10);
 800a2a2:	200a      	movs	r0, #10
							indMode =IND_PING;
 800a2a4:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a2a6:	f003 ffcb 	bl	800e240 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 800a2aa:	2240      	movs	r2, #64	; 0x40
 800a2ac:	4bb0      	ldr	r3, [pc, #704]	; (800a570 <PxMessagingTask+0x788>)
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	4393      	bics	r3, r2
 800a2b2:	2b20      	cmp	r3, #32
 800a2b4:	d000      	beq.n	800a2b8 <PxMessagingTask+0x4d0>
 800a2b6:	e63e      	b.n	8009f36 <PxMessagingTask+0x14e>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2102      	movs	r1, #2
 800a2bc:	e703      	b.n	800a0c6 <PxMessagingTask+0x2de>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800a2be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2c2:	469c      	mov	ip, r3
 800a2c4:	9b06      	ldr	r3, [sp, #24]
 800a2c6:	1c61      	adds	r1, r4, #1
 800a2c8:	1b5b      	subs	r3, r3, r5
 800a2ca:	00db      	lsls	r3, r3, #3
 800a2cc:	445b      	add	r3, fp
 800a2ce:	5d18      	ldrb	r0, [r3, r4]
 800a2d0:	230a      	movs	r3, #10
 800a2d2:	4461      	add	r1, ip
 800a2d4:	3a01      	subs	r2, #1
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	b292      	uxth	r2, r2
 800a2da:	4459      	add	r1, fp
 800a2dc:	f003 fe64 	bl	800dfa8 <writePxMutex>
 800a2e0:	4643      	mov	r3, r8
 800a2e2:	2700      	movs	r7, #0
 800a2e4:	5d5e      	ldrb	r6, [r3, r5]
 800a2e6:	e629      	b.n	8009f3c <PxMessagingTask+0x154>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a2e8:	9b06      	ldr	r3, [sp, #24]
 800a2ea:	1b5b      	subs	r3, r3, r5
 800a2ec:	00db      	lsls	r3, r3, #3
 800a2ee:	445b      	add	r3, fp
 800a2f0:	5d1b      	ldrb	r3, [r3, r4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d000      	beq.n	800a2f8 <PxMessagingTask+0x510>
 800a2f6:	e340      	b.n	800a97a <PxMessagingTask+0xb92>
								myID =cMessage[port - 1][1 + shift];
 800a2f8:	9b05      	ldr	r3, [sp, #20]
 800a2fa:	4a96      	ldr	r2, [pc, #600]	; (800a554 <PxMessagingTask+0x76c>)
 800a2fc:	469c      	mov	ip, r3
 800a2fe:	4464      	add	r4, ip
 800a300:	7863      	ldrb	r3, [r4, #1]
 800a302:	2700      	movs	r7, #0
 800a304:	7013      	strb	r3, [r2, #0]
 800a306:	4643      	mov	r3, r8
 800a308:	5d5e      	ldrb	r6, [r3, r5]
 800a30a:	e617      	b.n	8009f3c <PxMessagingTask+0x154>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a30c:	9b06      	ldr	r3, [sp, #24]
 800a30e:	1b5b      	subs	r3, r3, r5
 800a310:	00db      	lsls	r3, r3, #3
 800a312:	445b      	add	r3, fp
 800a314:	5d1f      	ldrb	r7, [r3, r4]
 800a316:	191b      	adds	r3, r3, r4
 800a318:	78da      	ldrb	r2, [r3, #3]
 800a31a:	063f      	lsls	r7, r7, #24
 800a31c:	18bf      	adds	r7, r7, r2
 800a31e:	785a      	ldrb	r2, [r3, #1]
 800a320:	0412      	lsls	r2, r2, #16
 800a322:	18bf      	adds	r7, r7, r2
 800a324:	789a      	ldrb	r2, [r3, #2]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a326:	791b      	ldrb	r3, [r3, #4]
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a328:	0212      	lsls	r2, r2, #8
 800a32a:	18bf      	adds	r7, r7, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a32c:	9309      	str	r3, [sp, #36]	; 0x24
 800a32e:	2bff      	cmp	r3, #255	; 0xff
 800a330:	d100      	bne.n	800a334 <PxMessagingTask+0x54c>
 800a332:	e318      	b.n	800a966 <PxMessagingTask+0xb7e>
								for(p =0; p < numOfParams; p++){
 800a334:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a336:	2a00      	cmp	r2, #0
 800a338:	d100      	bne.n	800a33c <PxMessagingTask+0x554>
 800a33a:	e36f      	b.n	800aa1c <PxMessagingTask+0xc34>
 800a33c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a33e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a340:	191e      	adds	r6, r3, r4
 800a342:	465b      	mov	r3, fp
 800a344:	468c      	mov	ip, r1
 800a346:	3305      	adds	r3, #5
 800a348:	4463      	add	r3, ip
 800a34a:	191c      	adds	r4, r3, r4
 800a34c:	0013      	movs	r3, r2
 800a34e:	3b01      	subs	r3, #1
 800a350:	b2db      	uxtb	r3, r3
 800a352:	18e4      	adds	r4, r4, r3
									if(temp > 0 && temp <= NumOfPorts){
 800a354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a356:	445e      	add	r6, fp
 800a358:	3b01      	subs	r3, #1
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	d90a      	bls.n	800a376 <PxMessagingTask+0x58e>
								for(p =0; p < numOfParams; p++){
 800a360:	42b4      	cmp	r4, r6
 800a362:	d100      	bne.n	800a366 <PxMessagingTask+0x57e>
 800a364:	e5e7      	b.n	8009f36 <PxMessagingTask+0x14e>
 800a366:	7833      	ldrb	r3, [r6, #0]
 800a368:	3601      	adds	r6, #1
 800a36a:	9309      	str	r3, [sp, #36]	; 0x24
									if(temp > 0 && temp <= NumOfPorts){
 800a36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a36e:	3b01      	subs	r3, #1
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b04      	cmp	r3, #4
 800a374:	d8f4      	bhi.n	800a360 <PxMessagingTask+0x578>
										UpdateBaudrate(temp,temp32);
 800a376:	0039      	movs	r1, r7
 800a378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a37a:	f003 fe8b 	bl	800e094 <UpdateBaudrate>
 800a37e:	e7ef      	b.n	800a360 <PxMessagingTask+0x578>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a380:	2601      	movs	r6, #1
 800a382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a384:	18e7      	adds	r7, r4, r3
 800a386:	445f      	add	r7, fp
								if(p != port)
 800a388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a38a:	42b3      	cmp	r3, r6
 800a38c:	d005      	beq.n	800a39a <PxMessagingTask+0x5b2>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a38e:	0030      	movs	r0, r6
 800a390:	f003 fe92 	bl	800e0b8 <GetUart>
 800a394:	7839      	ldrb	r1, [r7, #0]
 800a396:	f003 fe9b 	bl	800e0d0 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a39a:	3601      	adds	r6, #1
 800a39c:	b2f6      	uxtb	r6, r6
 800a39e:	3701      	adds	r7, #1
 800a3a0:	2e06      	cmp	r6, #6
 800a3a2:	d1f1      	bne.n	800a388 <PxMessagingTask+0x5a0>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a3a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a3a6:	f003 fe87 	bl	800e0b8 <GetUart>
 800a3aa:	9b06      	ldr	r3, [sp, #24]
 800a3ac:	2700      	movs	r7, #0
 800a3ae:	1b5b      	subs	r3, r3, r5
 800a3b0:	00db      	lsls	r3, r3, #3
 800a3b2:	445b      	add	r3, fp
 800a3b4:	191c      	adds	r4, r3, r4
 800a3b6:	7aa1      	ldrb	r1, [r4, #10]
 800a3b8:	f003 fe8a 	bl	800e0d0 <SwapUartPins>
 800a3bc:	4643      	mov	r3, r8
 800a3be:	5d5e      	ldrb	r6, [r3, r5]
 800a3c0:	e5bc      	b.n	8009f3c <PxMessagingTask+0x154>
							temp =numOfParams / 5;
 800a3c2:	2105      	movs	r1, #5
 800a3c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a3c6:	f7f5 fec3 	bl	8000150 <__udivsi3>
 800a3ca:	b2c2      	uxtb	r2, r0
 800a3cc:	9209      	str	r2, [sp, #36]	; 0x24
							for(uint8_t k =0; k < temp; k++){
 800a3ce:	2a00      	cmp	r2, #0
 800a3d0:	d100      	bne.n	800a3d4 <PxMessagingTask+0x5ec>
 800a3d2:	e65e      	b.n	800a092 <PxMessagingTask+0x2aa>
 800a3d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a3d6:	465b      	mov	r3, fp
 800a3d8:	468c      	mov	ip, r1
 800a3da:	3305      	adds	r3, #5
 800a3dc:	4463      	add	r3, ip
 800a3de:	190e      	adds	r6, r1, r4
 800a3e0:	191c      	adds	r4, r3, r4
 800a3e2:	1e53      	subs	r3, r2, #1
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	009a      	lsls	r2, r3, #2
 800a3e8:	18d3      	adds	r3, r2, r3
 800a3ea:	445e      	add	r6, fp
 800a3ec:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a3ee:	4b61      	ldr	r3, [pc, #388]	; (800a574 <PxMessagingTask+0x78c>)
 800a3f0:	7830      	ldrb	r0, [r6, #0]
 800a3f2:	469c      	mov	ip, r3
 800a3f4:	3801      	subs	r0, #1
 800a3f6:	0080      	lsls	r0, r0, #2
 800a3f8:	1c71      	adds	r1, r6, #1
 800a3fa:	4460      	add	r0, ip
 800a3fc:	2204      	movs	r2, #4
 800a3fe:	3605      	adds	r6, #5
 800a400:	f009 fe0d 	bl	801401e <memcpy>
							for(uint8_t k =0; k < temp; k++){
 800a404:	42b4      	cmp	r4, r6
 800a406:	d1f2      	bne.n	800a3ee <PxMessagingTask+0x606>
							responseStatus =BOS_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	e742      	b.n	800a292 <PxMessagingTask+0x4aa>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a40c:	9b06      	ldr	r3, [sp, #24]
 800a40e:	9904      	ldr	r1, [sp, #16]
 800a410:	1b5b      	subs	r3, r3, r5
 800a412:	00db      	lsls	r3, r3, #3
 800a414:	445b      	add	r3, fp
 800a416:	1918      	adds	r0, r3, r4
 800a418:	7882      	ldrb	r2, [r0, #2]
 800a41a:	0209      	lsls	r1, r1, #8
 800a41c:	1852      	adds	r2, r2, r1
 800a41e:	4e4b      	ldr	r6, [pc, #300]	; (800a54c <PxMessagingTask+0x764>)
 800a420:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a422:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a424:	468c      	mov	ip, r1
 800a426:	0032      	movs	r2, r6
 800a428:	5d19      	ldrb	r1, [r3, r4]
 800a42a:	7843      	ldrb	r3, [r0, #1]
 800a42c:	0209      	lsls	r1, r1, #8
 800a42e:	185b      	adds	r3, r3, r1
 800a430:	4462      	add	r2, ip
 800a432:	8053      	strh	r3, [r2, #2]
							responseStatus =BOS_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	e72c      	b.n	800a292 <PxMessagingTask+0x4aa>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a438:	4b4f      	ldr	r3, [pc, #316]	; (800a578 <PxMessagingTask+0x790>)
 800a43a:	4a50      	ldr	r2, [pc, #320]	; (800a57c <PxMessagingTask+0x794>)
							osDelay(10);
 800a43c:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a43e:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a440:	2301      	movs	r3, #1
 800a442:	4a4a      	ldr	r2, [pc, #296]	; (800a56c <PxMessagingTask+0x784>)
 800a444:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a446:	f003 fefb 	bl	800e240 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	4b4c      	ldr	r3, [pc, #304]	; (800a580 <PxMessagingTask+0x798>)
 800a450:	4a4c      	ldr	r2, [pc, #304]	; (800a584 <PxMessagingTask+0x79c>)
 800a452:	60da      	str	r2, [r3, #12]
 800a454:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a458:	46c0      	nop			; (mov r8, r8)
 800a45a:	e7fd      	b.n	800a458 <PxMessagingTask+0x670>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a45c:	f003 fffc 	bl	800e458 <FreeRTOS_CLIGetOutputBuffer>
 800a460:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a462:	f7f5 fe59 	bl	8000118 <strlen>
 800a466:	2100      	movs	r1, #0
 800a468:	0002      	movs	r2, r0
 800a46a:	0030      	movs	r0, r6
 800a46c:	f009 fde0 	bl	8014030 <memset>
 800a470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a472:	18e1      	adds	r1, r4, r3
							if(longMessage){
 800a474:	4b44      	ldr	r3, [pc, #272]	; (800a588 <PxMessagingTask+0x7a0>)
 800a476:	4459      	add	r1, fp
 800a478:	781f      	ldrb	r7, [r3, #0]
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a47a:	4b44      	ldr	r3, [pc, #272]	; (800a58c <PxMessagingTask+0x7a4>)
 800a47c:	8818      	ldrh	r0, [r3, #0]
 800a47e:	1830      	adds	r0, r6, r0
							if(longMessage){
 800a480:	2f00      	cmp	r7, #0
 800a482:	d100      	bne.n	800a486 <PxMessagingTask+0x69e>
 800a484:	e299      	b.n	800a9ba <PxMessagingTask+0xbd2>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a486:	9c0c      	ldr	r4, [sp, #48]	; 0x30
								longMessageLastPtr +=numOfParams;
 800a488:	2700      	movs	r7, #0
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a48a:	0022      	movs	r2, r4
 800a48c:	f009 fdc7 	bl	801401e <memcpy>
								longMessageLastPtr +=numOfParams;
 800a490:	46a4      	mov	ip, r4
 800a492:	4b3e      	ldr	r3, [pc, #248]	; (800a58c <PxMessagingTask+0x7a4>)
 800a494:	881a      	ldrh	r2, [r3, #0]
 800a496:	4b3d      	ldr	r3, [pc, #244]	; (800a58c <PxMessagingTask+0x7a4>)
 800a498:	4462      	add	r2, ip
 800a49a:	801a      	strh	r2, [r3, #0]
 800a49c:	4643      	mov	r3, r8
 800a49e:	5d5e      	ldrb	r6, [r3, r5]
 800a4a0:	e54c      	b.n	8009f3c <PxMessagingTask+0x154>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a4a2:	f003 ffd9 	bl	800e458 <FreeRTOS_CLIGetOutputBuffer>
 800a4a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4a8:	0006      	movs	r6, r0
 800a4aa:	18e1      	adds	r1, r4, r3
							if(dst == BOS_BROADCAST)
 800a4ac:	9b07      	ldr	r3, [sp, #28]
 800a4ae:	4459      	add	r1, fp
 800a4b0:	2bff      	cmp	r3, #255	; 0xff
 800a4b2:	d100      	bne.n	800a4b6 <PxMessagingTask+0x6ce>
 800a4b4:	e212      	b.n	800a8dc <PxMessagingTask+0xaf4>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a4b6:	4829      	ldr	r0, [pc, #164]	; (800a55c <PxMessagingTask+0x774>)
							else if(dst == BOS_MULTICAST)
 800a4b8:	9b07      	ldr	r3, [sp, #28]
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a4ba:	306c      	adds	r0, #108	; 0x6c
							else if(dst == BOS_MULTICAST)
 800a4bc:	2bfe      	cmp	r3, #254	; 0xfe
 800a4be:	d100      	bne.n	800a4c2 <PxMessagingTask+0x6da>
 800a4c0:	e274      	b.n	800a9ac <PxMessagingTask+0xbc4>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a4c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4c4:	f009 fdab 	bl	801401e <memcpy>
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a4c8:	4f24      	ldr	r7, [pc, #144]	; (800a55c <PxMessagingTask+0x774>)
 800a4ca:	376c      	adds	r7, #108	; 0x6c
 800a4cc:	e001      	b.n	800a4d2 <PxMessagingTask+0x6ea>
							} while(xReturned != pdFALSE);
 800a4ce:	2c00      	cmp	r4, #0
 800a4d0:	d028      	beq.n	800a524 <PxMessagingTask+0x73c>
								PcPort =port;
 800a4d2:	4a24      	ldr	r2, [pc, #144]	; (800a564 <PxMessagingTask+0x77c>)
 800a4d4:	990d      	ldr	r1, [sp, #52]	; 0x34
								temp =PcPort;
 800a4d6:	4b23      	ldr	r3, [pc, #140]	; (800a564 <PxMessagingTask+0x77c>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a4d8:	0038      	movs	r0, r7
								temp =PcPort;
 800a4da:	781b      	ldrb	r3, [r3, #0]
								PcPort =port;
 800a4dc:	7011      	strb	r1, [r2, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a4de:	2299      	movs	r2, #153	; 0x99
 800a4e0:	0031      	movs	r1, r6
 800a4e2:	0092      	lsls	r2, r2, #2
								temp =PcPort;
 800a4e4:	9309      	str	r3, [sp, #36]	; 0x24
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a4e6:	f003 ff3f 	bl	800e368 <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 800a4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ec:	4a1d      	ldr	r2, [pc, #116]	; (800a564 <PxMessagingTask+0x77c>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a4ee:	0004      	movs	r4, r0
								PcPort =temp;
 800a4f0:	7013      	strb	r3, [r2, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800a4f2:	4b1f      	ldr	r3, [pc, #124]	; (800a570 <PxMessagingTask+0x788>)
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	2b60      	cmp	r3, #96	; 0x60
 800a4f8:	d1e9      	bne.n	800a4ce <PxMessagingTask+0x6e6>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a4fa:	0030      	movs	r0, r6
 800a4fc:	f7f5 fe0c 	bl	8000118 <strlen>
 800a500:	0031      	movs	r1, r6
 800a502:	0002      	movs	r2, r0
 800a504:	4650      	mov	r0, sl
 800a506:	f009 fd8a 	bl	801401e <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a50a:	0030      	movs	r0, r6
 800a50c:	f7f5 fe04 	bl	8000118 <strlen>
 800a510:	2118      	movs	r1, #24
 800a512:	b282      	uxth	r2, r0
 800a514:	9804      	ldr	r0, [sp, #16]
 800a516:	f7ff f991 	bl	800983c <SendMessageToModule>
									osDelay(10);
 800a51a:	200a      	movs	r0, #10
 800a51c:	f003 fe90 	bl	800e240 <osDelay>
							} while(xReturned != pdFALSE);
 800a520:	2c00      	cmp	r4, #0
 800a522:	d1d6      	bne.n	800a4d2 <PxMessagingTask+0x6ea>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a524:	480d      	ldr	r0, [pc, #52]	; (800a55c <PxMessagingTask+0x774>)
 800a526:	2232      	movs	r2, #50	; 0x32
 800a528:	306c      	adds	r0, #108	; 0x6c
 800a52a:	2100      	movs	r1, #0
 800a52c:	f009 fd80 	bl	8014030 <memset>
 800a530:	4643      	mov	r3, r8
 800a532:	2700      	movs	r7, #0
 800a534:	5d5e      	ldrb	r6, [r3, r5]
 800a536:	e501      	b.n	8009f3c <PxMessagingTask+0x154>
							ClearEEportsDir();
 800a538:	f7f9 f994 	bl	8003864 <ClearEEportsDir>
							ClearROtopology();
 800a53c:	f001 f8e2 	bl	800b704 <ClearROtopology>
							osDelay(100);
 800a540:	2064      	movs	r0, #100	; 0x64
 800a542:	f003 fe7d 	bl	800e240 <osDelay>
							indMode =IND_TOPOLOGY;
 800a546:	2302      	movs	r3, #2
 800a548:	e4f3      	b.n	8009f32 <PxMessagingTask+0x14a>
 800a54a:	46c0      	nop			; (mov r8, r8)
 800a54c:	20001128 	.word	0x20001128
 800a550:	20000028 	.word	0x20000028
 800a554:	20000a98 	.word	0x20000a98
 800a558:	20000dc4 	.word	0x20000dc4
 800a55c:	200017d4 	.word	0x200017d4
 800a560:	0801a604 	.word	0x0801a604
 800a564:	20000c28 	.word	0x20000c28
 800a568:	20000c3c 	.word	0x20000c3c
 800a56c:	2000113e 	.word	0x2000113e
 800a570:	20006c4c 	.word	0x20006c4c
 800a574:	20001114 	.word	0x20001114
 800a578:	20007ff0 	.word	0x20007ff0
 800a57c:	deadbeef 	.word	0xdeadbeef
 800a580:	e000ed00 	.word	0xe000ed00
 800a584:	05fa0004 	.word	0x05fa0004
 800a588:	20000c4c 	.word	0x20000c4c
 800a58c:	20000c4a 	.word	0x20000c4a
							temp =cMessage[port - 1][11 + shift];
 800a590:	230b      	movs	r3, #11
 800a592:	469c      	mov	ip, r3
 800a594:	44a4      	add	ip, r4
 800a596:	4662      	mov	r2, ip
 800a598:	9b06      	ldr	r3, [sp, #24]
 800a59a:	9204      	str	r2, [sp, #16]
 800a59c:	1b5b      	subs	r3, r3, r5
 800a59e:	00db      	lsls	r3, r3, #3
 800a5a0:	445b      	add	r3, fp
 800a5a2:	5c9b      	ldrb	r3, [r3, r2]
							if(numOfParams == 15)
 800a5a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5a6:	2a0f      	cmp	r2, #15
 800a5a8:	d100      	bne.n	800a5ac <PxMessagingTask+0x7c4>
 800a5aa:	e22c      	b.n	800aa06 <PxMessagingTask+0xc1e>
							if(numOfParams == 17)
 800a5ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
							temp =cMessage[port - 1][11 + shift];
 800a5ae:	0019      	movs	r1, r3
							if(numOfParams == 17)
 800a5b0:	2a11      	cmp	r2, #17
 800a5b2:	d101      	bne.n	800a5b8 <PxMessagingTask+0x7d0>
 800a5b4:	f000 fd1b 	bl	800afee <PxMessagingTask+0x1206>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a5b8:	9f06      	ldr	r7, [sp, #24]
 800a5ba:	1ca2      	adds	r2, r4, #2
 800a5bc:	9208      	str	r2, [sp, #32]
 800a5be:	1b7a      	subs	r2, r7, r5
 800a5c0:	00d2      	lsls	r2, r2, #3
 800a5c2:	445a      	add	r2, fp
 800a5c4:	1ce0      	adds	r0, r4, #3
 800a5c6:	5d17      	ldrb	r7, [r2, r4]
 800a5c8:	9009      	str	r0, [sp, #36]	; 0x24
 800a5ca:	5c10      	ldrb	r0, [r2, r0]
 800a5cc:	1c66      	adds	r6, r4, #1
 800a5ce:	063f      	lsls	r7, r7, #24
 800a5d0:	183f      	adds	r7, r7, r0
 800a5d2:	5d90      	ldrb	r0, [r2, r6]
 800a5d4:	9607      	str	r6, [sp, #28]
 800a5d6:	0400      	lsls	r0, r0, #16
 800a5d8:	183f      	adds	r7, r7, r0
 800a5da:	1ca0      	adds	r0, r4, #2
 800a5dc:	5c10      	ldrb	r0, [r2, r0]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a5de:	1d66      	adds	r6, r4, #5
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a5e0:	0200      	lsls	r0, r0, #8
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a5e2:	9612      	str	r6, [sp, #72]	; 0x48
 800a5e4:	1da6      	adds	r6, r4, #6
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a5e6:	183f      	adds	r7, r7, r0
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a5e8:	9613      	str	r6, [sp, #76]	; 0x4c
 800a5ea:	1d20      	adds	r0, r4, #4
 800a5ec:	1de6      	adds	r6, r4, #7
 800a5ee:	9011      	str	r0, [sp, #68]	; 0x44
 800a5f0:	9614      	str	r6, [sp, #80]	; 0x50
 800a5f2:	5c16      	ldrb	r6, [r2, r0]
 800a5f4:	1d60      	adds	r0, r4, #5
 800a5f6:	5c10      	ldrb	r0, [r2, r0]
 800a5f8:	0636      	lsls	r6, r6, #24
 800a5fa:	0400      	lsls	r0, r0, #16
 800a5fc:	1836      	adds	r6, r6, r0
 800a5fe:	1de0      	adds	r0, r4, #7
 800a600:	5c10      	ldrb	r0, [r2, r0]
 800a602:	1836      	adds	r6, r6, r0
 800a604:	1da0      	adds	r0, r4, #6
 800a606:	5c10      	ldrb	r0, [r2, r0]
 800a608:	0200      	lsls	r0, r0, #8
 800a60a:	1836      	adds	r6, r6, r0
 800a60c:	2009      	movs	r0, #9
 800a60e:	4684      	mov	ip, r0
 800a610:	44a4      	add	ip, r4
 800a612:	4660      	mov	r0, ip
 800a614:	9015      	str	r0, [sp, #84]	; 0x54
							if(temp == false){
 800a616:	2900      	cmp	r1, #0
 800a618:	d001      	beq.n	800a61e <PxMessagingTask+0x836>
 800a61a:	f000 fc8f 	bl	800af3c <PxMessagingTask+0x1154>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800a61e:	5c12      	ldrb	r2, [r2, r0]
 800a620:	2a00      	cmp	r2, #0
 800a622:	d00e      	beq.n	800a642 <PxMessagingTask+0x85a>
 800a624:	9905      	ldr	r1, [sp, #20]
 800a626:	1908      	adds	r0, r1, r4
 800a628:	7a81      	ldrb	r1, [r0, #10]
 800a62a:	2900      	cmp	r1, #0
 800a62c:	d009      	beq.n	800a642 <PxMessagingTask+0x85a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800a62e:	0013      	movs	r3, r2
 800a630:	7a00      	ldrb	r0, [r0, #8]
 800a632:	0032      	movs	r2, r6
 800a634:	9100      	str	r1, [sp, #0]
 800a636:	0039      	movs	r1, r7
 800a638:	f7fe fdb0 	bl	800919c <SetupDMAStreams>
 800a63c:	9b05      	ldr	r3, [sp, #20]
 800a63e:	9a04      	ldr	r2, [sp, #16]
 800a640:	5c9b      	ldrb	r3, [r3, r2]
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00a      	beq.n	800a65c <PxMessagingTask+0x874>
 800a646:	9a05      	ldr	r2, [sp, #20]
 800a648:	1911      	adds	r1, r2, r4
 800a64a:	7b0a      	ldrb	r2, [r1, #12]
 800a64c:	2a00      	cmp	r2, #0
 800a64e:	d005      	beq.n	800a65c <PxMessagingTask+0x874>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800a650:	7a08      	ldrb	r0, [r1, #8]
 800a652:	9200      	str	r2, [sp, #0]
 800a654:	0039      	movs	r1, r7
 800a656:	0032      	movs	r2, r6
 800a658:	f7fe fda0 	bl	800919c <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800a65c:	9b06      	ldr	r3, [sp, #24]
 800a65e:	1b5b      	subs	r3, r3, r5
 800a660:	00db      	lsls	r3, r3, #3
 800a662:	445b      	add	r3, fp
 800a664:	191b      	adds	r3, r3, r4
 800a666:	7b5b      	ldrb	r3, [r3, #13]
 800a668:	9309      	str	r3, [sp, #36]	; 0x24
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d100      	bne.n	800a670 <PxMessagingTask+0x888>
 800a66e:	e462      	b.n	8009f36 <PxMessagingTask+0x14e>
 800a670:	9b05      	ldr	r3, [sp, #20]
 800a672:	469c      	mov	ip, r3
 800a674:	4464      	add	r4, ip
 800a676:	7ba3      	ldrb	r3, [r4, #14]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d000      	beq.n	800a67e <PxMessagingTask+0x896>
 800a67c:	e1c7      	b.n	800aa0e <PxMessagingTask+0xc26>
 800a67e:	4642      	mov	r2, r8
 800a680:	9309      	str	r3, [sp, #36]	; 0x24
 800a682:	5d56      	ldrb	r6, [r2, r5]
 800a684:	001f      	movs	r7, r3
 800a686:	e459      	b.n	8009f3c <PxMessagingTask+0x154>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a688:	9b06      	ldr	r3, [sp, #24]
 800a68a:	2200      	movs	r2, #0
 800a68c:	1b5e      	subs	r6, r3, r5
 800a68e:	2300      	movs	r3, #0
 800a690:	00f6      	lsls	r6, r6, #3
 800a692:	445e      	add	r6, fp
 800a694:	5d30      	ldrb	r0, [r6, r4]
 800a696:	2100      	movs	r1, #0
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	3319      	adds	r3, #25
 800a69c:	f7fe fe6e 	bl	800937c <SendMessageFromPort>
							osDelay(100);
 800a6a0:	2064      	movs	r0, #100	; 0x64
 800a6a2:	f003 fdcd 	bl	800e240 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a6a6:	4ae8      	ldr	r2, [pc, #928]	; (800aa48 <PxMessagingTask+0xc60>)
 800a6a8:	5d33      	ldrb	r3, [r6, r4]
 800a6aa:	7811      	ldrb	r1, [r2, #0]
 800a6ac:	9804      	ldr	r0, [sp, #16]
 800a6ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6b0:	f7f9 fb7c 	bl	8003dac <remoteBootloaderUpdate>
 800a6b4:	4643      	mov	r3, r8
 800a6b6:	2700      	movs	r7, #0
 800a6b8:	5d5e      	ldrb	r6, [r3, r5]
 800a6ba:	e43f      	b.n	8009f3c <PxMessagingTask+0x154>
							responseStatus =BOS_OK; // Initialize response
 800a6bc:	2300      	movs	r3, #0
 800a6be:	4ae3      	ldr	r2, [pc, #908]	; (800aa4c <PxMessagingTask+0xc64>)
 800a6c0:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800a6c2:	9b06      	ldr	r3, [sp, #24]
 800a6c4:	1b5b      	subs	r3, r3, r5
 800a6c6:	00db      	lsls	r3, r3, #3
 800a6c8:	445b      	add	r3, fp
 800a6ca:	5d1f      	ldrb	r7, [r3, r4]
 800a6cc:	2f00      	cmp	r7, #0
 800a6ce:	d100      	bne.n	800a6d2 <PxMessagingTask+0x8ea>
 800a6d0:	e2ad      	b.n	800ac2e <PxMessagingTask+0xe46>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800a6d2:	2f1e      	cmp	r7, #30
 800a6d4:	d900      	bls.n	800a6d8 <PxMessagingTask+0x8f0>
 800a6d6:	e2a6      	b.n	800ac26 <PxMessagingTask+0xe3e>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a6d8:	2280      	movs	r2, #128	; 0x80
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a6da:	9905      	ldr	r1, [sp, #20]
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a6dc:	0592      	lsls	r2, r2, #22
 800a6de:	4694      	mov	ip, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a6e0:	1c62      	adds	r2, r4, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a6e2:	1e7e      	subs	r6, r7, #1
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a6e4:	9207      	str	r2, [sp, #28]
 800a6e6:	5c8f      	ldrb	r7, [r1, r2]
 800a6e8:	220f      	movs	r2, #15
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a6ea:	4bd9      	ldr	r3, [pc, #868]	; (800aa50 <PxMessagingTask+0xc68>)
 800a6ec:	00b6      	lsls	r6, r6, #2
 800a6ee:	599b      	ldr	r3, [r3, r6]
 800a6f0:	0c18      	lsrs	r0, r3, #16
 800a6f2:	4013      	ands	r3, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a6f4:	1e7a      	subs	r2, r7, #1
 800a6f6:	b2d2      	uxtb	r2, r2
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a6f8:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a6fa:	2a07      	cmp	r2, #7
 800a6fc:	d900      	bls.n	800a700 <PxMessagingTask+0x918>
 800a6fe:	e1dc      	b.n	800aaba <PxMessagingTask+0xcd2>
 800a700:	49d4      	ldr	r1, [pc, #848]	; (800aa54 <PxMessagingTask+0xc6c>)
 800a702:	0092      	lsls	r2, r2, #2
 800a704:	588a      	ldr	r2, [r1, r2]
 800a706:	4697      	mov	pc, r2
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800a708:	2202      	movs	r2, #2
 800a70a:	4252      	negs	r2, r2
 800a70c:	17d3      	asrs	r3, r2, #31
 800a70e:	4649      	mov	r1, r9
 800a710:	6808      	ldr	r0, [r1, #0]
 800a712:	6849      	ldr	r1, [r1, #4]
 800a714:	1812      	adds	r2, r2, r0
 800a716:	414b      	adcs	r3, r1
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <PxMessagingTask+0x938>
 800a71c:	f000 fc6f 	bl	800affe <PxMessagingTask+0x1216>
 800a720:	4643      	mov	r3, r8
 800a722:	5d5e      	ldrb	r6, [r3, r5]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800a724:	4bc9      	ldr	r3, [pc, #804]	; (800aa4c <PxMessagingTask+0xc64>)
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	2b10      	cmp	r3, #16
 800a72a:	d101      	bne.n	800a730 <PxMessagingTask+0x948>
 800a72c:	f000 fc64 	bl	800aff8 <PxMessagingTask+0x1210>
								responseStatus =BOS_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	4ac6      	ldr	r2, [pc, #792]	; (800aa4c <PxMessagingTask+0xc64>)
 800a734:	2700      	movs	r7, #0
 800a736:	7013      	strb	r3, [r2, #0]
 800a738:	f7ff fc00 	bl	8009f3c <PxMessagingTask+0x154>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800a73c:	9b06      	ldr	r3, [sp, #24]
 800a73e:	1b5b      	subs	r3, r3, r5
 800a740:	00db      	lsls	r3, r3, #3
 800a742:	445b      	add	r3, fp
 800a744:	5d1b      	ldrb	r3, [r3, r4]
 800a746:	e5a4      	b.n	800a292 <PxMessagingTask+0x4aa>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a748:	9b06      	ldr	r3, [sp, #24]
 800a74a:	49bf      	ldr	r1, [pc, #764]	; (800aa48 <PxMessagingTask+0xc60>)
 800a74c:	1b58      	subs	r0, r3, r5
 800a74e:	00c0      	lsls	r0, r0, #3
 800a750:	7809      	ldrb	r1, [r1, #0]
 800a752:	4458      	add	r0, fp
 800a754:	1902      	adds	r2, r0, r4
 800a756:	468c      	mov	ip, r1
 800a758:	7a51      	ldrb	r1, [r2, #9]
 800a75a:	7ad7      	ldrb	r7, [r2, #11]
 800a75c:	9104      	str	r1, [sp, #16]
 800a75e:	7b11      	ldrb	r1, [r2, #12]
 800a760:	7a93      	ldrb	r3, [r2, #10]
 800a762:	000e      	movs	r6, r1
 800a764:	1e71      	subs	r1, r6, #1
 800a766:	418e      	sbcs	r6, r1
 800a768:	9603      	str	r6, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a76a:	7916      	ldrb	r6, [r2, #4]
 800a76c:	7951      	ldrb	r1, [r2, #5]
 800a76e:	0636      	lsls	r6, r6, #24
 800a770:	0409      	lsls	r1, r1, #16
 800a772:	1871      	adds	r1, r6, r1
 800a774:	79d6      	ldrb	r6, [r2, #7]
 800a776:	1989      	adds	r1, r1, r6
 800a778:	7996      	ldrb	r6, [r2, #6]
 800a77a:	0236      	lsls	r6, r6, #8
 800a77c:	1989      	adds	r1, r1, r6
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a77e:	9102      	str	r1, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a780:	5d01      	ldrb	r1, [r0, r4]
 800a782:	78d0      	ldrb	r0, [r2, #3]
 800a784:	0609      	lsls	r1, r1, #24
 800a786:	1809      	adds	r1, r1, r0
 800a788:	7850      	ldrb	r0, [r2, #1]
 800a78a:	0400      	lsls	r0, r0, #16
 800a78c:	1809      	adds	r1, r1, r0
 800a78e:	7890      	ldrb	r0, [r2, #2]
 800a790:	0200      	lsls	r0, r0, #8
 800a792:	1809      	adds	r1, r1, r0
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a794:	9101      	str	r1, [sp, #4]
 800a796:	7a12      	ldrb	r2, [r2, #8]
 800a798:	4661      	mov	r1, ip
 800a79a:	9200      	str	r2, [sp, #0]
 800a79c:	9804      	ldr	r0, [sp, #16]
 800a79e:	003a      	movs	r2, r7
 800a7a0:	f7ff f870 	bl	8009884 <StartScastDMAStream>
 800a7a4:	f7ff fbc7 	bl	8009f36 <PxMessagingTask+0x14e>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a7a8:	4ba7      	ldr	r3, [pc, #668]	; (800aa48 <PxMessagingTask+0xc60>)
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d033      	beq.n	800a818 <PxMessagingTask+0xa30>
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d02e      	beq.n	800a812 <PxMessagingTask+0xa2a>
				ForwardReceivedMessage(port);
 800a7b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a7b6:	f7ff f821 	bl	80097fc <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 800a7ba:	4ba7      	ldr	r3, [pc, #668]	; (800aa58 <PxMessagingTask+0xc70>)
 800a7bc:	785b      	ldrb	r3, [r3, #1]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d002      	beq.n	800a7c8 <PxMessagingTask+0x9e0>
					indMode =IND_SHORT_BLINK;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	4aa5      	ldr	r2, [pc, #660]	; (800aa5c <PxMessagingTask+0xc74>)
 800a7c6:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 800a7c8:	9b08      	ldr	r3, [sp, #32]
 800a7ca:	2b19      	cmp	r3, #25
 800a7cc:	d071      	beq.n	800a8b2 <PxMessagingTask+0xaca>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800a7ce:	9b08      	ldr	r3, [sp, #32]
 800a7d0:	2b1a      	cmp	r3, #26
 800a7d2:	d000      	beq.n	800a7d6 <PxMessagingTask+0x9ee>
 800a7d4:	e435      	b.n	800a042 <PxMessagingTask+0x25a>
					Delay_ms(100);
 800a7d6:	2064      	movs	r0, #100	; 0x64
 800a7d8:	f005 fcc2 	bl	8010160 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800a7dc:	9b06      	ldr	r3, [sp, #24]
 800a7de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7e0:	1b5b      	subs	r3, r3, r5
 800a7e2:	00db      	lsls	r3, r3, #3
 800a7e4:	445b      	add	r3, fp
 800a7e6:	5c9b      	ldrb	r3, [r3, r2]
 800a7e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7ea:	9907      	ldr	r1, [sp, #28]
 800a7ec:	9804      	ldr	r0, [sp, #16]
 800a7ee:	f7f9 fadd 	bl	8003dac <remoteBootloaderUpdate>
 800a7f2:	e426      	b.n	800a042 <PxMessagingTask+0x25a>
				longMessage =1;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	4a9a      	ldr	r2, [pc, #616]	; (800aa60 <PxMessagingTask+0xc78>)
 800a7f8:	7013      	strb	r3, [r2, #0]
 800a7fa:	f7ff fb35 	bl	8009e68 <PxMessagingTask+0x80>
				BOSMessaging.Acknowledgment =false;
 800a7fe:	2300      	movs	r3, #0
 800a800:	4a95      	ldr	r2, [pc, #596]	; (800aa58 <PxMessagingTask+0xc70>)
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800a802:	212c      	movs	r1, #44	; 0x2c
				BOSMessaging.Acknowledgment =false;
 800a804:	7113      	strb	r3, [r2, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800a806:	9804      	ldr	r0, [sp, #16]
 800a808:	2200      	movs	r2, #0
 800a80a:	f7ff f817 	bl	800983c <SendMessageToModule>
 800a80e:	f7ff fb56 	bl	8009ebe <PxMessagingTask+0xd6>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a812:	9b08      	ldr	r3, [sp, #32]
 800a814:	2b10      	cmp	r3, #16
 800a816:	d1cd      	bne.n	800a7b4 <PxMessagingTask+0x9cc>
 800a818:	4643      	mov	r3, r8
 800a81a:	5d5e      	ldrb	r6, [r3, r5]
				if(result == BOS_OK){
 800a81c:	2f00      	cmp	r7, #0
 800a81e:	d101      	bne.n	800a824 <PxMessagingTask+0xa3c>
 800a820:	f7ff fb75 	bl	8009f0e <PxMessagingTask+0x126>
				}
 800a824:	f7ff fb8a 	bl	8009f3c <PxMessagingTask+0x154>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a828:	9b07      	ldr	r3, [sp, #28]
 800a82a:	2bfe      	cmp	r3, #254	; 0xfe
 800a82c:	d1f6      	bne.n	800a81c <PxMessagingTask+0xa34>
 800a82e:	9b06      	ldr	r3, [sp, #24]
 800a830:	4a8c      	ldr	r2, [pc, #560]	; (800aa64 <PxMessagingTask+0xc7c>)
 800a832:	1b5c      	subs	r4, r3, r5
 800a834:	00e4      	lsls	r4, r4, #3
 800a836:	445c      	add	r4, fp
 800a838:	19a3      	adds	r3, r4, r6
 800a83a:	3b01      	subs	r3, #1
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	7e12      	ldrb	r2, [r2, #24]
					result =BOS_ERR_MSG_Reflection;
 800a840:	2703      	movs	r7, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a842:	429a      	cmp	r2, r3
 800a844:	d101      	bne.n	800a84a <PxMessagingTask+0xa62>
 800a846:	f7ff fb79 	bl	8009f3c <PxMessagingTask+0x154>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a84a:	4a86      	ldr	r2, [pc, #536]	; (800aa64 <PxMessagingTask+0xc7c>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800a84c:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a84e:	7613      	strb	r3, [r2, #24]
 800a850:	4a85      	ldr	r2, [pc, #532]	; (800aa68 <PxMessagingTask+0xc80>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800a852:	20fe      	movs	r0, #254	; 0xfe
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a854:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800a856:	f7fe ff8d 	bl	8009774 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a85a:	4643      	mov	r3, r8
 800a85c:	2200      	movs	r2, #0
 800a85e:	5d5e      	ldrb	r6, [r3, r5]
 800a860:	19a3      	adds	r3, r4, r6
 800a862:	3b01      	subs	r3, #1
 800a864:	701a      	strb	r2, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800a866:	1eb0      	subs	r0, r6, #2
 800a868:	5c27      	ldrb	r7, [r4, r0]
 800a86a:	9709      	str	r7, [sp, #36]	; 0x24
					for(i =0; i < temp; i++){
 800a86c:	2f00      	cmp	r7, #0
 800a86e:	d01d      	beq.n	800a8ac <PxMessagingTask+0xac4>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800a870:	4b75      	ldr	r3, [pc, #468]	; (800aa48 <PxMessagingTask+0xc60>)
 800a872:	1bc0      	subs	r0, r0, r7
 800a874:	7819      	ldrb	r1, [r3, #0]
 800a876:	5c23      	ldrb	r3, [r4, r0]
 800a878:	428b      	cmp	r3, r1
 800a87a:	d101      	bne.n	800a880 <PxMessagingTask+0xa98>
 800a87c:	f7ff fb47 	bl	8009f0e <PxMessagingTask+0x126>
 800a880:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a882:	465a      	mov	r2, fp
 800a884:	46a4      	mov	ip, r4
 800a886:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a888:	3201      	adds	r2, #1
 800a88a:	1e7c      	subs	r4, r7, #1
 800a88c:	4462      	add	r2, ip
 800a88e:	b2e4      	uxtb	r4, r4
 800a890:	181b      	adds	r3, r3, r0
 800a892:	1912      	adds	r2, r2, r4
 800a894:	445b      	add	r3, fp
 800a896:	1812      	adds	r2, r2, r0
 800a898:	e006      	b.n	800a8a8 <PxMessagingTask+0xac0>
 800a89a:	3301      	adds	r3, #1
 800a89c:	1e58      	subs	r0, r3, #1
 800a89e:	7800      	ldrb	r0, [r0, #0]
 800a8a0:	4288      	cmp	r0, r1
 800a8a2:	d101      	bne.n	800a8a8 <PxMessagingTask+0xac0>
 800a8a4:	f7ff fb33 	bl	8009f0e <PxMessagingTask+0x126>
					for(i =0; i < temp; i++){
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d1f6      	bne.n	800a89a <PxMessagingTask+0xab2>
					result =BOS_ERR_WrongID;
 800a8ac:	2766      	movs	r7, #102	; 0x66
 800a8ae:	f7ff fb45 	bl	8009f3c <PxMessagingTask+0x154>
					Delay_ms(100);
 800a8b2:	2064      	movs	r0, #100	; 0x64
 800a8b4:	f005 fc54 	bl	8010160 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	e795      	b.n	800a7e8 <PxMessagingTask+0xa00>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800a8bc:	9a04      	ldr	r2, [sp, #16]
 800a8be:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a8c0:	9400      	str	r4, [sp, #0]
 800a8c2:	9b07      	ldr	r3, [sp, #28]
 800a8c4:	9808      	ldr	r0, [sp, #32]
 800a8c6:	f001 fccf 	bl	800c268 <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800a8ca:	2200      	movs	r2, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800a8cc:	0007      	movs	r7, r0
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800a8ce:	2100      	movs	r1, #0
		if(result == BOS_ERR_UnknownMessage){
 800a8d0:	2801      	cmp	r0, #1
 800a8d2:	d101      	bne.n	800a8d8 <PxMessagingTask+0xaf0>
 800a8d4:	f7ff fbf7 	bl	800a0c6 <PxMessagingTask+0x2de>
 800a8d8:	f7ff fbb3 	bl	800a042 <PxMessagingTask+0x25a>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800a8dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8de:	4861      	ldr	r0, [pc, #388]	; (800aa64 <PxMessagingTask+0xc7c>)
 800a8e0:	3a01      	subs	r2, #1
 800a8e2:	306c      	adds	r0, #108	; 0x6c
 800a8e4:	f009 fb9b 	bl	801401e <memcpy>
 800a8e8:	e5ee      	b.n	800a4c8 <PxMessagingTask+0x6e0>
										messageParams[0] =*(__IO int8_t* )temp32;
 800a8ea:	4652      	mov	r2, sl
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	7013      	strb	r3, [r2, #0]
										SendMessageToModule(src,
 800a8f0:	2201      	movs	r2, #1
											SendMessageToModule(src,
 800a8f2:	211f      	movs	r1, #31
 800a8f4:	f7ff fbe7 	bl	800a0c6 <PxMessagingTask+0x2de>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800a8f8:	4651      	mov	r1, sl
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	1212      	asrs	r2, r2, #8
 800a902:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	1412      	asrs	r2, r2, #16
 800a908:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800a90a:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 800a90c:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800a90e:	161b      	asrs	r3, r3, #24
 800a910:	70cb      	strb	r3, [r1, #3]
 800a912:	e7ee      	b.n	800a8f2 <PxMessagingTask+0xb0a>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800a914:	4651      	mov	r1, sl
 800a916:	781a      	ldrb	r2, [r3, #0]
 800a918:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800a91a:	785a      	ldrb	r2, [r3, #1]
 800a91c:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800a91e:	789a      	ldrb	r2, [r3, #2]
 800a920:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800a922:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 800a924:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800a926:	70cb      	strb	r3, [r1, #3]
 800a928:	e7e3      	b.n	800a8f2 <PxMessagingTask+0xb0a>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d100      	bne.n	800a930 <PxMessagingTask+0xb48>
 800a92e:	e3ad      	b.n	800b08c <PxMessagingTask+0x12a4>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800a930:	d801      	bhi.n	800a936 <PxMessagingTask+0xb4e>
 800a932:	f7ff fb00 	bl	8009f36 <PxMessagingTask+0x14e>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800a936:	3b04      	subs	r3, #4
 800a938:	4a45      	ldr	r2, [pc, #276]	; (800aa50 <PxMessagingTask+0xc68>)
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	270f      	movs	r7, #15
 800a93e:	58d2      	ldr	r2, [r2, r3]
 800a940:	4653      	mov	r3, sl
 800a942:	4017      	ands	r7, r2
 800a944:	701f      	strb	r7, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800a946:	d100      	bne.n	800a94a <PxMessagingTask+0xb62>
 800a948:	e397      	b.n	800b07a <PxMessagingTask+0x1292>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800a94a:	2380      	movs	r3, #128	; 0x80
									switch(messageParams[0]) // requested format
 800a94c:	3f01      	subs	r7, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800a94e:	0c12      	lsrs	r2, r2, #16
 800a950:	059b      	lsls	r3, r3, #22
									switch(messageParams[0]) // requested format
 800a952:	b2ff      	uxtb	r7, r7
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800a954:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 800a956:	2f07      	cmp	r7, #7
 800a958:	d901      	bls.n	800a95e <PxMessagingTask+0xb76>
 800a95a:	f7ff faec 	bl	8009f36 <PxMessagingTask+0x14e>
 800a95e:	4943      	ldr	r1, [pc, #268]	; (800aa6c <PxMessagingTask+0xc84>)
 800a960:	00bf      	lsls	r7, r7, #2
 800a962:	59c9      	ldr	r1, [r1, r7]
 800a964:	468f      	mov	pc, r1
								for(p =1; p <= NumOfPorts; p++){
 800a966:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 800a968:	0020      	movs	r0, r4
								for(p =1; p <= NumOfPorts; p++){
 800a96a:	3401      	adds	r4, #1
									UpdateBaudrate(p,temp32);
 800a96c:	0039      	movs	r1, r7
								for(p =1; p <= NumOfPorts; p++){
 800a96e:	b2e4      	uxtb	r4, r4
									UpdateBaudrate(p,temp32);
 800a970:	f003 fb90 	bl	800e094 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800a974:	2c06      	cmp	r4, #6
 800a976:	d1f7      	bne.n	800a968 <PxMessagingTask+0xb80>
 800a978:	e050      	b.n	800aa1c <PxMessagingTask+0xc34>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d001      	beq.n	800a982 <PxMessagingTask+0xb9a>
 800a97e:	f7ff fada 	bl	8009f36 <PxMessagingTask+0x14e>
								messageParams[0] =0; /* change own ID */
 800a982:	2700      	movs	r7, #0
 800a984:	4653      	mov	r3, sl
 800a986:	701f      	strb	r7, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800a988:	9b05      	ldr	r3, [sp, #20]
 800a98a:	4652      	mov	r2, sl
 800a98c:	469c      	mov	ip, r3
 800a98e:	4464      	add	r4, ip
 800a990:	7863      	ldrb	r3, [r4, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800a992:	78a0      	ldrb	r0, [r4, #2]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800a994:	7053      	strb	r3, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800a996:	2303      	movs	r3, #3
 800a998:	003a      	movs	r2, r7
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	0039      	movs	r1, r7
 800a99e:	330d      	adds	r3, #13
 800a9a0:	f7fe fcec 	bl	800937c <SendMessageFromPort>
 800a9a4:	4643      	mov	r3, r8
 800a9a6:	5d5e      	ldrb	r6, [r3, r5]
 800a9a8:	f7ff fac8 	bl	8009f3c <PxMessagingTask+0x154>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a9ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9b0:	1a9a      	subs	r2, r3, r2
 800a9b2:	3a02      	subs	r2, #2
 800a9b4:	f009 fb33 	bl	801401e <memcpy>
 800a9b8:	e586      	b.n	800a4c8 <PxMessagingTask+0x6e0>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a9ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9bc:	f009 fb2f 	bl	801401e <memcpy>
								longMessageLastPtr =0;
 800a9c0:	4b2b      	ldr	r3, [pc, #172]	; (800aa70 <PxMessagingTask+0xc88>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800a9c2:	482c      	ldr	r0, [pc, #176]	; (800aa74 <PxMessagingTask+0xc8c>)
								longMessageLastPtr =0;
 800a9c4:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 800a9c6:	4b21      	ldr	r3, [pc, #132]	; (800aa4c <PxMessagingTask+0xc64>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800a9c8:	6800      	ldr	r0, [r0, #0]
								responseStatus =BOS_OK;
 800a9ca:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	001a      	movs	r2, r3
 800a9d0:	0019      	movs	r1, r3
 800a9d2:	f004 ffe7 	bl	800f9a4 <xTaskGenericNotify>
 800a9d6:	4643      	mov	r3, r8
 800a9d8:	2700      	movs	r7, #0
 800a9da:	5d5e      	ldrb	r6, [r3, r5]
 800a9dc:	f7ff faae 	bl	8009f3c <PxMessagingTask+0x154>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a9e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9e2:	f009 fb1c 	bl	801401e <memcpy>
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a9e6:	2116      	movs	r1, #22
 800a9e8:	0038      	movs	r0, r7
 800a9ea:	f7f5 fbb1 	bl	8000150 <__udivsi3>
 800a9ee:	4b22      	ldr	r3, [pc, #136]	; (800aa78 <PxMessagingTask+0xc90>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800a9f0:	003a      	movs	r2, r7
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a9f2:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800a9f4:	4921      	ldr	r1, [pc, #132]	; (800aa7c <PxMessagingTask+0xc94>)
 800a9f6:	4822      	ldr	r0, [pc, #136]	; (800aa80 <PxMessagingTask+0xc98>)
 800a9f8:	f009 fb11 	bl	801401e <memcpy>
								longMessageLastPtr =0;
 800a9fc:	4b1c      	ldr	r3, [pc, #112]	; (800aa70 <PxMessagingTask+0xc88>)
 800a9fe:	2700      	movs	r7, #0
 800aa00:	801c      	strh	r4, [r3, #0]
 800aa02:	f7ff fa9b 	bl	8009f3c <PxMessagingTask+0x154>
								temp =cMessage[port - 1][13 + shift];
 800aa06:	9a05      	ldr	r2, [sp, #20]
 800aa08:	1912      	adds	r2, r2, r4
 800aa0a:	7b51      	ldrb	r1, [r2, #13]
 800aa0c:	e5d4      	b.n	800a5b8 <PxMessagingTask+0x7d0>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800aa0e:	7a20      	ldrb	r0, [r4, #8]
 800aa10:	0032      	movs	r2, r6
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	0039      	movs	r1, r7
 800aa16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa18:	f7fe fbc0 	bl	800919c <SetupDMAStreams>
 800aa1c:	4643      	mov	r3, r8
 800aa1e:	5d5e      	ldrb	r6, [r3, r5]
 800aa20:	2300      	movs	r3, #0
 800aa22:	9309      	str	r3, [sp, #36]	; 0x24
 800aa24:	001f      	movs	r7, r3
 800aa26:	f7ff fa89 	bl	8009f3c <PxMessagingTask+0x154>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800aa2a:	4651      	mov	r1, sl
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	0a12      	lsrs	r2, r2, #8
 800aa34:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	0c12      	lsrs	r2, r2, #16
 800aa3a:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800aa3c:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 800aa3e:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800aa40:	0e1b      	lsrs	r3, r3, #24
 800aa42:	70cb      	strb	r3, [r1, #3]
 800aa44:	e755      	b.n	800a8f2 <PxMessagingTask+0xb0a>
 800aa46:	46c0      	nop			; (mov r8, r8)
 800aa48:	20000a98 	.word	0x20000a98
 800aa4c:	20000c3c 	.word	0x20000c3c
 800aa50:	20006c54 	.word	0x20006c54
 800aa54:	08018d74 	.word	0x08018d74
 800aa58:	20006c4c 	.word	0x20006c4c
 800aa5c:	2000113e 	.word	0x2000113e
 800aa60:	20000c4c 	.word	0x20000c4c
 800aa64:	200017d4 	.word	0x200017d4
 800aa68:	20000c48 	.word	0x20000c48
 800aa6c:	08018d94 	.word	0x08018d94
 800aa70:	20000c4a 	.word	0x20000c4a
 800aa74:	20001710 	.word	0x20001710
 800aa78:	20000000 	.word	0x20000000
 800aa7c:	200018ac 	.word	0x200018ac
 800aa80:	20000ed4 	.word	0x20000ed4
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800aa84:	4651      	mov	r1, sl
 800aa86:	881a      	ldrh	r2, [r3, #0]
 800aa88:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800aa8a:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 800aa8c:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800aa8e:	b21b      	sxth	r3, r3
 800aa90:	121b      	asrs	r3, r3, #8
 800aa92:	704b      	strb	r3, [r1, #1]
 800aa94:	e72d      	b.n	800a8f2 <PxMessagingTask+0xb0a>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800aa96:	4651      	mov	r1, sl
 800aa98:	881a      	ldrh	r2, [r3, #0]
 800aa9a:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800aa9c:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 800aa9e:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800aaa0:	0a1b      	lsrs	r3, r3, #8
 800aaa2:	704b      	strb	r3, [r1, #1]
 800aaa4:	e725      	b.n	800a8f2 <PxMessagingTask+0xb0a>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d02c      	beq.n	800ab04 <PxMessagingTask+0xd1c>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800aaaa:	9b05      	ldr	r3, [sp, #20]
 800aaac:	1919      	adds	r1, r3, r4
 800aaae:	78ca      	ldrb	r2, [r1, #3]
 800aab0:	788b      	ldrb	r3, [r1, #2]
 800aab2:	0212      	lsls	r2, r2, #8
 800aab4:	189b      	adds	r3, r3, r2
 800aab6:	b21b      	sxth	r3, r3
 800aab8:	8003      	strh	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800aaba:	9905      	ldr	r1, [sp, #20]
 800aabc:	9807      	ldr	r0, [sp, #28]
 800aabe:	5d0b      	ldrb	r3, [r1, r4]
 800aac0:	5c09      	ldrb	r1, [r1, r0]
 800aac2:	200f      	movs	r0, #15
 800aac4:	3b01      	subs	r3, #1
 800aac6:	4ad8      	ldr	r2, [pc, #864]	; (800ae28 <PxMessagingTask+0x1040>)
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	58d2      	ldr	r2, [r2, r3]
 800aacc:	4010      	ands	r0, r2
 800aace:	4288      	cmp	r0, r1
 800aad0:	d008      	beq.n	800aae4 <PxMessagingTask+0xcfc>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800aad2:	48d6      	ldr	r0, [pc, #856]	; (800ae2c <PxMessagingTask+0x1044>)
 800aad4:	4684      	mov	ip, r0
 800aad6:	4461      	add	r1, ip
 800aad8:	400a      	ands	r2, r1
 800aada:	49d3      	ldr	r1, [pc, #844]	; (800ae28 <PxMessagingTask+0x1040>)
 800aadc:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800aade:	2314      	movs	r3, #20
 800aae0:	4ad3      	ldr	r2, [pc, #844]	; (800ae30 <PxMessagingTask+0x1048>)
 800aae2:	7013      	strb	r3, [r2, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800aae4:	2240      	movs	r2, #64	; 0x40
 800aae6:	4bd3      	ldr	r3, [pc, #844]	; (800ae34 <PxMessagingTask+0x104c>)
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	4393      	bics	r3, r2
 800aaec:	2b20      	cmp	r3, #32
 800aaee:	d001      	beq.n	800aaf4 <PxMessagingTask+0xd0c>
 800aaf0:	f7ff fa21 	bl	8009f36 <PxMessagingTask+0x14e>
								messageParams[0] =responseStatus;
 800aaf4:	4652      	mov	r2, sl
 800aaf6:	4bce      	ldr	r3, [pc, #824]	; (800ae30 <PxMessagingTask+0x1048>)
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800aaf8:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800aafe:	2201      	movs	r2, #1
 800ab00:	f7ff fae1 	bl	800a0c6 <PxMessagingTask+0x2de>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800ab04:	2002      	movs	r0, #2
 800ab06:	f009 f83d 	bl	8013b84 <malloc>
												if(temp32 != 0){
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d01e      	beq.n	800ab4c <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ab0e:	0403      	lsls	r3, r0, #16
 800ab10:	4ac5      	ldr	r2, [pc, #788]	; (800ae28 <PxMessagingTask+0x1040>)
 800ab12:	3304      	adds	r3, #4
 800ab14:	5193      	str	r3, [r2, r6]
 800ab16:	e7c8      	b.n	800aaaa <PxMessagingTask+0xcc2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d025      	beq.n	800ab68 <PxMessagingTask+0xd80>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800ab1c:	9b05      	ldr	r3, [sp, #20]
 800ab1e:	191b      	adds	r3, r3, r4
 800ab20:	789b      	ldrb	r3, [r3, #2]
 800ab22:	b25b      	sxtb	r3, r3
 800ab24:	7003      	strb	r3, [r0, #0]
 800ab26:	e7c8      	b.n	800aaba <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d013      	beq.n	800ab54 <PxMessagingTask+0xd6c>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800ab2c:	9b05      	ldr	r3, [sp, #20]
 800ab2e:	1919      	adds	r1, r3, r4
 800ab30:	78ca      	ldrb	r2, [r1, #3]
 800ab32:	788b      	ldrb	r3, [r1, #2]
 800ab34:	0212      	lsls	r2, r2, #8
 800ab36:	189b      	adds	r3, r3, r2
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	8003      	strh	r3, [r0, #0]
 800ab3c:	e7bd      	b.n	800aaba <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d01c      	beq.n	800ab7c <PxMessagingTask+0xd94>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800ab42:	9b05      	ldr	r3, [sp, #20]
 800ab44:	191b      	adds	r3, r3, r4
 800ab46:	789b      	ldrb	r3, [r3, #2]
 800ab48:	7003      	strb	r3, [r0, #0]
 800ab4a:	e7b6      	b.n	800aaba <PxMessagingTask+0xcd2>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800ab4c:	2312      	movs	r3, #18
 800ab4e:	4ab8      	ldr	r2, [pc, #736]	; (800ae30 <PxMessagingTask+0x1048>)
 800ab50:	7013      	strb	r3, [r2, #0]
 800ab52:	e7b2      	b.n	800aaba <PxMessagingTask+0xcd2>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800ab54:	2002      	movs	r0, #2
 800ab56:	f009 f815 	bl	8013b84 <malloc>
												if(temp32 != 0){
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d0f6      	beq.n	800ab4c <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ab5e:	0403      	lsls	r3, r0, #16
 800ab60:	4ab1      	ldr	r2, [pc, #708]	; (800ae28 <PxMessagingTask+0x1040>)
 800ab62:	3303      	adds	r3, #3
 800ab64:	5193      	str	r3, [r2, r6]
 800ab66:	e7e1      	b.n	800ab2c <PxMessagingTask+0xd44>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800ab68:	2001      	movs	r0, #1
 800ab6a:	f009 f80b 	bl	8013b84 <malloc>
												if(temp32 != 0){
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	d0ec      	beq.n	800ab4c <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ab72:	0403      	lsls	r3, r0, #16
 800ab74:	4aac      	ldr	r2, [pc, #688]	; (800ae28 <PxMessagingTask+0x1040>)
 800ab76:	3302      	adds	r3, #2
 800ab78:	5193      	str	r3, [r2, r6]
 800ab7a:	e7cf      	b.n	800ab1c <PxMessagingTask+0xd34>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800ab7c:	2001      	movs	r0, #1
 800ab7e:	f009 f801 	bl	8013b84 <malloc>
												if(temp32 != 0){
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d0e2      	beq.n	800ab4c <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ab86:	0403      	lsls	r3, r0, #16
 800ab88:	19df      	adds	r7, r3, r7
 800ab8a:	4ba7      	ldr	r3, [pc, #668]	; (800ae28 <PxMessagingTask+0x1040>)
 800ab8c:	519f      	str	r7, [r3, r6]
 800ab8e:	e7d8      	b.n	800ab42 <PxMessagingTask+0xd5a>
										ADCSelectChannel(ADCPort,"top");
 800ab90:	49a9      	ldr	r1, [pc, #676]	; (800ae38 <PxMessagingTask+0x1050>)
 800ab92:	f7fd ff7f 	bl	8008a94 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800ab96:	4ba9      	ldr	r3, [pc, #676]	; (800ae3c <PxMessagingTask+0x1054>)
 800ab98:	4aa8      	ldr	r2, [pc, #672]	; (800ae3c <PxMessagingTask+0x1054>)
 800ab9a:	5d98      	ldrb	r0, [r3, r6]
 800ab9c:	3248      	adds	r2, #72	; 0x48
 800ab9e:	49a6      	ldr	r1, [pc, #664]	; (800ae38 <PxMessagingTask+0x1050>)
 800aba0:	f7fd ffca 	bl	8008b38 <ReadADCChannel>
 800aba4:	f7ff fa04 	bl	8009fb0 <PxMessagingTask+0x1c8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d100      	bne.n	800abae <PxMessagingTask+0xdc6>
 800abac:	e085      	b.n	800acba <PxMessagingTask+0xed2>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800abae:	9b05      	ldr	r3, [sp, #20]
 800abb0:	191a      	adds	r2, r3, r4
 800abb2:	78d3      	ldrb	r3, [r2, #3]
 800abb4:	7911      	ldrb	r1, [r2, #4]
 800abb6:	021b      	lsls	r3, r3, #8
 800abb8:	0409      	lsls	r1, r1, #16
 800abba:	185b      	adds	r3, r3, r1
 800abbc:	7891      	ldrb	r1, [r2, #2]
 800abbe:	7952      	ldrb	r2, [r2, #5]
 800abc0:	185b      	adds	r3, r3, r1
 800abc2:	0612      	lsls	r2, r2, #24
 800abc4:	189b      	adds	r3, r3, r2
 800abc6:	464a      	mov	r2, r9
 800abc8:	4649      	mov	r1, r9
 800abca:	6013      	str	r3, [r2, #0]
 800abcc:	2200      	movs	r2, #0
 800abce:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800abd0:	6003      	str	r3, [r0, #0]
 800abd2:	e772      	b.n	800aaba <PxMessagingTask+0xcd2>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800abd4:	9b05      	ldr	r3, [sp, #20]
 800abd6:	469c      	mov	ip, r3
 800abd8:	4464      	add	r4, ip
 800abda:	78a3      	ldrb	r3, [r4, #2]
 800abdc:	78e2      	ldrb	r2, [r4, #3]
 800abde:	021b      	lsls	r3, r3, #8
 800abe0:	0412      	lsls	r2, r2, #16
 800abe2:	189b      	adds	r3, r3, r2
 800abe4:	7862      	ldrb	r2, [r4, #1]
 800abe6:	189b      	adds	r3, r3, r2
 800abe8:	7922      	ldrb	r2, [r4, #4]
 800abea:	0612      	lsls	r2, r2, #24
 800abec:	189b      	adds	r3, r3, r2
 800abee:	4a93      	ldr	r2, [pc, #588]	; (800ae3c <PxMessagingTask+0x1054>)
 800abf0:	62d3      	str	r3, [r2, #44]	; 0x2c
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800abf2:	79a3      	ldrb	r3, [r4, #6]
 800abf4:	79e2      	ldrb	r2, [r4, #7]
 800abf6:	021b      	lsls	r3, r3, #8
 800abf8:	0412      	lsls	r2, r2, #16
 800abfa:	189b      	adds	r3, r3, r2
 800abfc:	7962      	ldrb	r2, [r4, #5]
 800abfe:	189b      	adds	r3, r3, r2
 800ac00:	7a22      	ldrb	r2, [r4, #8]
 800ac02:	0612      	lsls	r2, r2, #24
 800ac04:	189b      	adds	r3, r3, r2
 800ac06:	4a8d      	ldr	r2, [pc, #564]	; (800ae3c <PxMessagingTask+0x1054>)
 800ac08:	6313      	str	r3, [r2, #48]	; 0x30
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800ac0a:	7aa3      	ldrb	r3, [r4, #10]
 800ac0c:	7ae2      	ldrb	r2, [r4, #11]
 800ac0e:	021b      	lsls	r3, r3, #8
 800ac10:	0412      	lsls	r2, r2, #16
 800ac12:	189b      	adds	r3, r3, r2
 800ac14:	7a62      	ldrb	r2, [r4, #9]
 800ac16:	189b      	adds	r3, r3, r2
 800ac18:	7b22      	ldrb	r2, [r4, #12]
 800ac1a:	0612      	lsls	r2, r2, #24
 800ac1c:	189b      	adds	r3, r3, r2
 800ac1e:	4a87      	ldr	r2, [pc, #540]	; (800ae3c <PxMessagingTask+0x1054>)
 800ac20:	6353      	str	r3, [r2, #52]	; 0x34
									break;
 800ac22:	f7ff f9f0 	bl	800a006 <PxMessagingTask+0x21e>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800ac26:	2313      	movs	r3, #19
 800ac28:	4a81      	ldr	r2, [pc, #516]	; (800ae30 <PxMessagingTask+0x1048>)
 800ac2a:	7013      	strb	r3, [r2, #0]
 800ac2c:	e75a      	b.n	800aae4 <PxMessagingTask+0xcfc>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ac2e:	9b05      	ldr	r3, [sp, #20]
 800ac30:	191b      	adds	r3, r3, r4
 800ac32:	789e      	ldrb	r6, [r3, #2]
 800ac34:	78da      	ldrb	r2, [r3, #3]
 800ac36:	0636      	lsls	r6, r6, #24
 800ac38:	0412      	lsls	r2, r2, #16
 800ac3a:	18b6      	adds	r6, r6, r2
 800ac3c:	795a      	ldrb	r2, [r3, #5]
 800ac3e:	18b6      	adds	r6, r6, r2
 800ac40:	791a      	ldrb	r2, [r3, #4]
 800ac42:	0212      	lsls	r2, r2, #8
 800ac44:	18b6      	adds	r6, r6, r2
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800ac46:	22e0      	movs	r2, #224	; 0xe0
 800ac48:	0612      	lsls	r2, r2, #24
 800ac4a:	18b1      	adds	r1, r6, r2
 800ac4c:	4a7c      	ldr	r2, [pc, #496]	; (800ae40 <PxMessagingTask+0x1058>)
 800ac4e:	4291      	cmp	r1, r2
 800ac50:	d900      	bls.n	800ac54 <PxMessagingTask+0xe6c>
 800ac52:	e08b      	b.n	800ad6c <PxMessagingTask+0xf84>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800ac54:	785b      	ldrb	r3, [r3, #1]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b07      	cmp	r3, #7
 800ac5c:	d900      	bls.n	800ac60 <PxMessagingTask+0xe78>
 800ac5e:	e741      	b.n	800aae4 <PxMessagingTask+0xcfc>
 800ac60:	4a78      	ldr	r2, [pc, #480]	; (800ae44 <PxMessagingTask+0x105c>)
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	58d3      	ldr	r3, [r2, r3]
 800ac66:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800ac68:	9b05      	ldr	r3, [sp, #20]
 800ac6a:	469c      	mov	ip, r3
 800ac6c:	4464      	add	r4, ip
 800ac6e:	78a3      	ldrb	r3, [r4, #2]
 800ac70:	78e2      	ldrb	r2, [r4, #3]
 800ac72:	021b      	lsls	r3, r3, #8
 800ac74:	0412      	lsls	r2, r2, #16
 800ac76:	189b      	adds	r3, r3, r2
 800ac78:	7862      	ldrb	r2, [r4, #1]
 800ac7a:	189b      	adds	r3, r3, r2
 800ac7c:	7922      	ldrb	r2, [r4, #4]
 800ac7e:	0612      	lsls	r2, r2, #24
 800ac80:	189b      	adds	r3, r3, r2
 800ac82:	4a6e      	ldr	r2, [pc, #440]	; (800ae3c <PxMessagingTask+0x1054>)
 800ac84:	6213      	str	r3, [r2, #32]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800ac86:	79a3      	ldrb	r3, [r4, #6]
 800ac88:	79e2      	ldrb	r2, [r4, #7]
 800ac8a:	021b      	lsls	r3, r3, #8
 800ac8c:	0412      	lsls	r2, r2, #16
 800ac8e:	189b      	adds	r3, r3, r2
 800ac90:	7962      	ldrb	r2, [r4, #5]
 800ac92:	189b      	adds	r3, r3, r2
 800ac94:	7a22      	ldrb	r2, [r4, #8]
 800ac96:	0612      	lsls	r2, r2, #24
 800ac98:	189b      	adds	r3, r3, r2
 800ac9a:	4a68      	ldr	r2, [pc, #416]	; (800ae3c <PxMessagingTask+0x1054>)
 800ac9c:	6253      	str	r3, [r2, #36]	; 0x24
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800ac9e:	7aa3      	ldrb	r3, [r4, #10]
 800aca0:	7ae2      	ldrb	r2, [r4, #11]
 800aca2:	021b      	lsls	r3, r3, #8
 800aca4:	0412      	lsls	r2, r2, #16
 800aca6:	189b      	adds	r3, r3, r2
 800aca8:	7a62      	ldrb	r2, [r4, #9]
 800acaa:	189b      	adds	r3, r3, r2
 800acac:	7b22      	ldrb	r2, [r4, #12]
 800acae:	0612      	lsls	r2, r2, #24
 800acb0:	189b      	adds	r3, r3, r2
 800acb2:	4a62      	ldr	r2, [pc, #392]	; (800ae3c <PxMessagingTask+0x1054>)
 800acb4:	6293      	str	r3, [r2, #40]	; 0x28
									break;
 800acb6:	f7ff f9a6 	bl	800a006 <PxMessagingTask+0x21e>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800acba:	2004      	movs	r0, #4
 800acbc:	f008 ff62 	bl	8013b84 <malloc>
												if(temp32 != 0){
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d100      	bne.n	800acc6 <PxMessagingTask+0xede>
 800acc4:	e742      	b.n	800ab4c <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800acc6:	0403      	lsls	r3, r0, #16
 800acc8:	4a57      	ldr	r2, [pc, #348]	; (800ae28 <PxMessagingTask+0x1040>)
 800acca:	3307      	adds	r3, #7
 800accc:	5193      	str	r3, [r2, r6]
 800acce:	e76e      	b.n	800abae <PxMessagingTask+0xdc6>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800acd0:	9b05      	ldr	r3, [sp, #20]
 800acd2:	469c      	mov	ip, r3
 800acd4:	4464      	add	r4, ip
 800acd6:	79e3      	ldrb	r3, [r4, #7]
 800acd8:	79a2      	ldrb	r2, [r4, #6]
 800acda:	021b      	lsls	r3, r3, #8
 800acdc:	189b      	adds	r3, r3, r2
 800acde:	7a22      	ldrb	r2, [r4, #8]
 800ace0:	0412      	lsls	r2, r2, #16
 800ace2:	189b      	adds	r3, r3, r2
 800ace4:	7a62      	ldrb	r2, [r4, #9]
 800ace6:	0612      	lsls	r2, r2, #24
 800ace8:	189b      	adds	r3, r3, r2
 800acea:	6033      	str	r3, [r6, #0]
											break;
 800acec:	e6fa      	b.n	800aae4 <PxMessagingTask+0xcfc>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800acee:	9b05      	ldr	r3, [sp, #20]
 800acf0:	469c      	mov	ip, r3
 800acf2:	4464      	add	r4, ip
 800acf4:	79e3      	ldrb	r3, [r4, #7]
 800acf6:	7a22      	ldrb	r2, [r4, #8]
 800acf8:	021b      	lsls	r3, r3, #8
 800acfa:	0412      	lsls	r2, r2, #16
 800acfc:	189b      	adds	r3, r3, r2
 800acfe:	79a2      	ldrb	r2, [r4, #6]
 800ad00:	e7ef      	b.n	800ace2 <PxMessagingTask+0xefa>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800ad02:	9b05      	ldr	r3, [sp, #20]
 800ad04:	469c      	mov	ip, r3
 800ad06:	4464      	add	r4, ip
 800ad08:	79e2      	ldrb	r2, [r4, #7]
 800ad0a:	79a3      	ldrb	r3, [r4, #6]
 800ad0c:	0212      	lsls	r2, r2, #8
 800ad0e:	189b      	adds	r3, r3, r2
 800ad10:	b21b      	sxth	r3, r3
 800ad12:	8033      	strh	r3, [r6, #0]
											break;
 800ad14:	e6e6      	b.n	800aae4 <PxMessagingTask+0xcfc>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800ad16:	9b05      	ldr	r3, [sp, #20]
 800ad18:	469c      	mov	ip, r3
 800ad1a:	4464      	add	r4, ip
 800ad1c:	79e2      	ldrb	r2, [r4, #7]
 800ad1e:	79a3      	ldrb	r3, [r4, #6]
 800ad20:	0212      	lsls	r2, r2, #8
 800ad22:	189b      	adds	r3, r3, r2
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	8033      	strh	r3, [r6, #0]
											break;
 800ad28:	e6dc      	b.n	800aae4 <PxMessagingTask+0xcfc>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800ad2a:	9b05      	ldr	r3, [sp, #20]
 800ad2c:	469c      	mov	ip, r3
 800ad2e:	2306      	movs	r3, #6
 800ad30:	4464      	add	r4, ip
 800ad32:	56e3      	ldrsb	r3, [r4, r3]
 800ad34:	7033      	strb	r3, [r6, #0]
											break;
 800ad36:	e6d5      	b.n	800aae4 <PxMessagingTask+0xcfc>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800ad38:	9b05      	ldr	r3, [sp, #20]
 800ad3a:	469c      	mov	ip, r3
 800ad3c:	4464      	add	r4, ip
 800ad3e:	79a3      	ldrb	r3, [r4, #6]
 800ad40:	7033      	strb	r3, [r6, #0]
											break;
 800ad42:	e6cf      	b.n	800aae4 <PxMessagingTask+0xcfc>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800ad44:	9b05      	ldr	r3, [sp, #20]
 800ad46:	4649      	mov	r1, r9
 800ad48:	469c      	mov	ip, r3
 800ad4a:	4464      	add	r4, ip
 800ad4c:	79e3      	ldrb	r3, [r4, #7]
 800ad4e:	7a22      	ldrb	r2, [r4, #8]
 800ad50:	021b      	lsls	r3, r3, #8
 800ad52:	0412      	lsls	r2, r2, #16
 800ad54:	189b      	adds	r3, r3, r2
 800ad56:	79a2      	ldrb	r2, [r4, #6]
 800ad58:	189b      	adds	r3, r3, r2
 800ad5a:	7a62      	ldrb	r2, [r4, #9]
 800ad5c:	0612      	lsls	r2, r2, #24
 800ad5e:	189b      	adds	r3, r3, r2
 800ad60:	464a      	mov	r2, r9
 800ad62:	6013      	str	r3, [r2, #0]
 800ad64:	2200      	movs	r2, #0
 800ad66:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800ad68:	6033      	str	r3, [r6, #0]
											break;
 800ad6a:	e6bb      	b.n	800aae4 <PxMessagingTask+0xcfc>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800ad6c:	23f8      	movs	r3, #248	; 0xf8
 800ad6e:	4a36      	ldr	r2, [pc, #216]	; (800ae48 <PxMessagingTask+0x1060>)
 800ad70:	061b      	lsls	r3, r3, #24
 800ad72:	18f3      	adds	r3, r6, r3
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d910      	bls.n	800ad9a <PxMessagingTask+0xfb2>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800ad78:	2215      	movs	r2, #21
 800ad7a:	4b2d      	ldr	r3, [pc, #180]	; (800ae30 <PxMessagingTask+0x1048>)
 800ad7c:	701a      	strb	r2, [r3, #0]
 800ad7e:	e6b1      	b.n	800aae4 <PxMessagingTask+0xcfc>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800ad80:	230a      	movs	r3, #10
 800ad82:	4932      	ldr	r1, [pc, #200]	; (800ae4c <PxMessagingTask+0x1064>)
 800ad84:	9a04      	ldr	r2, [sp, #16]
 800ad86:	468c      	mov	ip, r1
 800ad88:	4353      	muls	r3, r2
 800ad8a:	4831      	ldr	r0, [pc, #196]	; (800ae50 <PxMessagingTask+0x1068>)
 800ad8c:	4463      	add	r3, ip
 800ad8e:	4931      	ldr	r1, [pc, #196]	; (800ae54 <PxMessagingTask+0x106c>)
 800ad90:	301c      	adds	r0, #28
 800ad92:	f009 fb47 	bl	8014424 <sprintf>
 800ad96:	f7ff fa6c 	bl	800a272 <PxMessagingTask+0x48a>
									HAL_FLASH_Unlock();
 800ad9a:	f006 fc0f 	bl	80115bc <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800ad9e:	9b08      	ldr	r3, [sp, #32]
 800ada0:	2b22      	cmp	r3, #34	; 0x22
 800ada2:	d100      	bne.n	800ada6 <PxMessagingTask+0xfbe>
 800ada4:	e094      	b.n	800aed0 <PxMessagingTask+0x10e8>
									if(responseStatus == BOS_OK){
 800ada6:	4b22      	ldr	r3, [pc, #136]	; (800ae30 <PxMessagingTask+0x1048>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d15c      	bne.n	800ae68 <PxMessagingTask+0x1080>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800adae:	9b05      	ldr	r3, [sp, #20]
 800adb0:	191b      	adds	r3, r3, r4
 800adb2:	785b      	ldrb	r3, [r3, #1]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	2b07      	cmp	r3, #7
 800adba:	d855      	bhi.n	800ae68 <PxMessagingTask+0x1080>
 800adbc:	4a26      	ldr	r2, [pc, #152]	; (800ae58 <PxMessagingTask+0x1070>)
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	58d3      	ldr	r3, [r2, r3]
 800adc2:	469f      	mov	pc, r3
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d018      	beq.n	800adfa <PxMessagingTask+0x1012>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800adc8:	9b05      	ldr	r3, [sp, #20]
 800adca:	191a      	adds	r2, r3, r4
 800adcc:	78d3      	ldrb	r3, [r2, #3]
 800adce:	7891      	ldrb	r1, [r2, #2]
 800add0:	021b      	lsls	r3, r3, #8
 800add2:	185b      	adds	r3, r3, r1
 800add4:	7911      	ldrb	r1, [r2, #4]
 800add6:	0409      	lsls	r1, r1, #16
 800add8:	7952      	ldrb	r2, [r2, #5]
 800adda:	185b      	adds	r3, r3, r1
 800addc:	0612      	lsls	r2, r2, #24
 800adde:	189b      	adds	r3, r3, r2
 800ade0:	6003      	str	r3, [r0, #0]
 800ade2:	e66a      	b.n	800aaba <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d013      	beq.n	800ae10 <PxMessagingTask+0x1028>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800ade8:	9b05      	ldr	r3, [sp, #20]
 800adea:	191a      	adds	r2, r3, r4
 800adec:	78d3      	ldrb	r3, [r2, #3]
 800adee:	7911      	ldrb	r1, [r2, #4]
 800adf0:	021b      	lsls	r3, r3, #8
 800adf2:	0409      	lsls	r1, r1, #16
 800adf4:	185b      	adds	r3, r3, r1
 800adf6:	7891      	ldrb	r1, [r2, #2]
 800adf8:	e7ee      	b.n	800add8 <PxMessagingTask+0xff0>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800adfa:	2004      	movs	r0, #4
 800adfc:	f008 fec2 	bl	8013b84 <malloc>
												if(temp32 != 0){
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d100      	bne.n	800ae06 <PxMessagingTask+0x101e>
 800ae04:	e6a2      	b.n	800ab4c <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ae06:	0403      	lsls	r3, r0, #16
 800ae08:	4a07      	ldr	r2, [pc, #28]	; (800ae28 <PxMessagingTask+0x1040>)
 800ae0a:	3306      	adds	r3, #6
 800ae0c:	5193      	str	r3, [r2, r6]
 800ae0e:	e7db      	b.n	800adc8 <PxMessagingTask+0xfe0>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800ae10:	2004      	movs	r0, #4
 800ae12:	f008 feb7 	bl	8013b84 <malloc>
												if(temp32 != 0){
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d100      	bne.n	800ae1c <PxMessagingTask+0x1034>
 800ae1a:	e697      	b.n	800ab4c <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ae1c:	0403      	lsls	r3, r0, #16
 800ae1e:	4a02      	ldr	r2, [pc, #8]	; (800ae28 <PxMessagingTask+0x1040>)
 800ae20:	3305      	adds	r3, #5
 800ae22:	5193      	str	r3, [r2, r6]
 800ae24:	e7e0      	b.n	800ade8 <PxMessagingTask+0x1000>
 800ae26:	46c0      	nop			; (mov r8, r8)
 800ae28:	20006c54 	.word	0x20006c54
 800ae2c:	0000fff0 	.word	0x0000fff0
 800ae30:	20000c3c 	.word	0x20000c3c
 800ae34:	20006c4c 	.word	0x20006c4c
 800ae38:	08019b2c 	.word	0x08019b2c
 800ae3c:	20001854 	.word	0x20001854
 800ae40:	00007fff 	.word	0x00007fff
 800ae44:	08018db4 	.word	0x08018db4
 800ae48:	0001ffff 	.word	0x0001ffff
 800ae4c:	20000dc4 	.word	0x20000dc4
 800ae50:	200017d4 	.word	0x200017d4
 800ae54:	0801a618 	.word	0x0801a618
 800ae58:	08018dd4 	.word	0x08018dd4
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800ae5c:	6833      	ldr	r3, [r6, #0]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	d00c      	beq.n	800ae7c <PxMessagingTask+0x1094>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800ae62:	2316      	movs	r3, #22
 800ae64:	4ad6      	ldr	r2, [pc, #856]	; (800b1c0 <PxMessagingTask+0x13d8>)
 800ae66:	7013      	strb	r3, [r2, #0]
									HAL_FLASH_Lock();
 800ae68:	f006 fbba 	bl	80115e0 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800ae6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d100      	bne.n	800ae74 <PxMessagingTask+0x108c>
 800ae72:	e637      	b.n	800aae4 <PxMessagingTask+0xcfc>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800ae74:	2316      	movs	r3, #22
 800ae76:	4ad2      	ldr	r2, [pc, #840]	; (800b1c0 <PxMessagingTask+0x13d8>)
 800ae78:	7013      	strb	r3, [r2, #0]
 800ae7a:	e633      	b.n	800aae4 <PxMessagingTask+0xcfc>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800ae7c:	9b05      	ldr	r3, [sp, #20]
 800ae7e:	4649      	mov	r1, r9
 800ae80:	469c      	mov	ip, r3
 800ae82:	4464      	add	r4, ip
 800ae84:	79e2      	ldrb	r2, [r4, #7]
 800ae86:	7a23      	ldrb	r3, [r4, #8]
 800ae88:	0212      	lsls	r2, r2, #8
 800ae8a:	041b      	lsls	r3, r3, #16
 800ae8c:	18d2      	adds	r2, r2, r3
 800ae8e:	79a3      	ldrb	r3, [r4, #6]
													status =HAL_FLASH_Program(
 800ae90:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800ae92:	18d2      	adds	r2, r2, r3
 800ae94:	7a63      	ldrb	r3, [r4, #9]
 800ae96:	061b      	lsls	r3, r3, #24
 800ae98:	18d2      	adds	r2, r2, r3
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800ae9e:	0031      	movs	r1, r6
 800aea0:	f006 fbec 	bl	801167c <HAL_FLASH_Program>
 800aea4:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800aea6:	e7df      	b.n	800ae68 <PxMessagingTask+0x1080>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800aea8:	8832      	ldrh	r2, [r6, #0]
 800aeaa:	4bc6      	ldr	r3, [pc, #792]	; (800b1c4 <PxMessagingTask+0x13dc>)
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d1d8      	bne.n	800ae62 <PxMessagingTask+0x107a>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800aeb0:	9b05      	ldr	r3, [sp, #20]
 800aeb2:	469c      	mov	ip, r3
 800aeb4:	4464      	add	r4, ip
 800aeb6:	79e2      	ldrb	r2, [r4, #7]
 800aeb8:	79a3      	ldrb	r3, [r4, #6]
 800aeba:	0212      	lsls	r2, r2, #8
 800aebc:	18d2      	adds	r2, r2, r3
 800aebe:	17d3      	asrs	r3, r2, #31
 800aec0:	4649      	mov	r1, r9
													status =HAL_FLASH_Program(
 800aec2:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800aec4:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800aec6:	0031      	movs	r1, r6
 800aec8:	f006 fbd8 	bl	801167c <HAL_FLASH_Program>
 800aecc:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800aece:	e7cb      	b.n	800ae68 <PxMessagingTask+0x1080>
										erase.NbPages =1;
 800aed0:	3b21      	subs	r3, #33	; 0x21
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800aed2:	a918      	add	r1, sp, #96	; 0x60
 800aed4:	a819      	add	r0, sp, #100	; 0x64
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800aed6:	9719      	str	r7, [sp, #100]	; 0x64
										erase.PageAddress =temp32;
 800aed8:	961a      	str	r6, [sp, #104]	; 0x68
										erase.NbPages =1;
 800aeda:	931b      	str	r3, [sp, #108]	; 0x6c
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800aedc:	f006 fc32 	bl	8011744 <HAL_FLASHEx_Erase>
 800aee0:	900f      	str	r0, [sp, #60]	; 0x3c
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d103      	bne.n	800aeee <PxMessagingTask+0x1106>
 800aee6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aee8:	3301      	adds	r3, #1
 800aeea:	d100      	bne.n	800aeee <PxMessagingTask+0x1106>
 800aeec:	e75b      	b.n	800ada6 <PxMessagingTask+0xfbe>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800aeee:	2316      	movs	r3, #22
 800aef0:	4ab3      	ldr	r2, [pc, #716]	; (800b1c0 <PxMessagingTask+0x13d8>)
 800aef2:	7013      	strb	r3, [r2, #0]
 800aef4:	e757      	b.n	800ada6 <PxMessagingTask+0xfbe>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800aef6:	8832      	ldrh	r2, [r6, #0]
 800aef8:	4bb2      	ldr	r3, [pc, #712]	; (800b1c4 <PxMessagingTask+0x13dc>)
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d1b1      	bne.n	800ae62 <PxMessagingTask+0x107a>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800aefe:	9b05      	ldr	r3, [sp, #20]
 800af00:	469c      	mov	ip, r3
 800af02:	4464      	add	r4, ip
 800af04:	79a2      	ldrb	r2, [r4, #6]
 800af06:	2300      	movs	r3, #0
 800af08:	e7da      	b.n	800aec0 <PxMessagingTask+0x10d8>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800af0a:	6833      	ldr	r3, [r6, #0]
 800af0c:	3301      	adds	r3, #1
 800af0e:	d1a8      	bne.n	800ae62 <PxMessagingTask+0x107a>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800af10:	9b05      	ldr	r3, [sp, #20]
 800af12:	4649      	mov	r1, r9
 800af14:	469c      	mov	ip, r3
 800af16:	4464      	add	r4, ip
 800af18:	79e2      	ldrb	r2, [r4, #7]
 800af1a:	7a23      	ldrb	r3, [r4, #8]
 800af1c:	0212      	lsls	r2, r2, #8
 800af1e:	041b      	lsls	r3, r3, #16
 800af20:	18d2      	adds	r2, r2, r3
 800af22:	79a3      	ldrb	r3, [r4, #6]
													status =HAL_FLASH_Program(
 800af24:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800af26:	18d2      	adds	r2, r2, r3
 800af28:	7a63      	ldrb	r3, [r4, #9]
 800af2a:	061b      	lsls	r3, r3, #24
 800af2c:	18d2      	adds	r2, r2, r3
 800af2e:	2300      	movs	r3, #0
 800af30:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800af32:	0031      	movs	r1, r6
 800af34:	f006 fba2 	bl	801167c <HAL_FLASH_Program>
 800af38:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800af3a:	e795      	b.n	800ae68 <PxMessagingTask+0x1080>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800af3c:	2338      	movs	r3, #56	; 0x38
 800af3e:	435d      	muls	r5, r3
 800af40:	445d      	add	r5, fp
 800af42:	192e      	adds	r6, r5, r4
 800af44:	7a31      	ldrb	r1, [r6, #8]
 800af46:	20e4      	movs	r0, #228	; 0xe4
 800af48:	f7fc fddc 	bl	8007b04 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800af4c:	9a07      	ldr	r2, [sp, #28]
 800af4e:	5d2b      	ldrb	r3, [r5, r4]
 800af50:	5ca9      	ldrb	r1, [r5, r2]
 800af52:	021b      	lsls	r3, r3, #8
 800af54:	18c9      	adds	r1, r1, r3
 800af56:	b289      	uxth	r1, r1
 800af58:	20e5      	movs	r0, #229	; 0xe5
 800af5a:	f7fc fdd3 	bl	8007b04 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800af5e:	9b08      	ldr	r3, [sp, #32]
 800af60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af62:	5ceb      	ldrb	r3, [r5, r3]
 800af64:	5ca9      	ldrb	r1, [r5, r2]
 800af66:	021b      	lsls	r3, r3, #8
 800af68:	18c9      	adds	r1, r1, r3
 800af6a:	b289      	uxth	r1, r1
 800af6c:	20e6      	movs	r0, #230	; 0xe6
 800af6e:	f7fc fdc9 	bl	8007b04 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800af72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af76:	5ceb      	ldrb	r3, [r5, r3]
 800af78:	5ca9      	ldrb	r1, [r5, r2]
 800af7a:	021b      	lsls	r3, r3, #8
 800af7c:	18c9      	adds	r1, r1, r3
 800af7e:	b289      	uxth	r1, r1
 800af80:	20e7      	movs	r0, #231	; 0xe7
 800af82:	f7fc fdbf 	bl	8007b04 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800af86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af8a:	5ceb      	ldrb	r3, [r5, r3]
 800af8c:	5ca9      	ldrb	r1, [r5, r2]
 800af8e:	021b      	lsls	r3, r3, #8
 800af90:	18c9      	adds	r1, r1, r3
 800af92:	b289      	uxth	r1, r1
 800af94:	20e8      	movs	r0, #232	; 0xe8
 800af96:	f7fc fdb5 	bl	8007b04 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800af9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af9c:	7ab1      	ldrb	r1, [r6, #10]
 800af9e:	5ceb      	ldrb	r3, [r5, r3]
 800afa0:	20e9      	movs	r0, #233	; 0xe9
 800afa2:	021b      	lsls	r3, r3, #8
 800afa4:	18c9      	adds	r1, r1, r3
 800afa6:	b289      	uxth	r1, r1
 800afa8:	f7fc fdac 	bl	8007b04 <EE_WriteVariable>
								if(numOfParams == 19)
 800afac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afae:	2b13      	cmp	r3, #19
 800afb0:	d013      	beq.n	800afda <PxMessagingTask+0x11f2>
								if(numOfParams == 21)
 800afb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afb4:	2b15      	cmp	r3, #21
 800afb6:	d107      	bne.n	800afc8 <PxMessagingTask+0x11e0>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800afb8:	7b73      	ldrb	r3, [r6, #13]
 800afba:	7bb1      	ldrb	r1, [r6, #14]
 800afbc:	021b      	lsls	r3, r3, #8
 800afbe:	18c9      	adds	r1, r1, r3
 800afc0:	b289      	uxth	r1, r1
 800afc2:	20eb      	movs	r0, #235	; 0xeb
 800afc4:	f7fc fd9e 	bl	8007b04 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	4b7e      	ldr	r3, [pc, #504]	; (800b1c8 <PxMessagingTask+0x13e0>)
 800afce:	4a7f      	ldr	r2, [pc, #508]	; (800b1cc <PxMessagingTask+0x13e4>)
 800afd0:	60da      	str	r2, [r3, #12]
 800afd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800afd6:	46c0      	nop			; (mov r8, r8)
 800afd8:	e7fd      	b.n	800afd6 <PxMessagingTask+0x11ee>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800afda:	9b04      	ldr	r3, [sp, #16]
 800afdc:	7b31      	ldrb	r1, [r6, #12]
 800afde:	5ceb      	ldrb	r3, [r5, r3]
 800afe0:	20ea      	movs	r0, #234	; 0xea
 800afe2:	021b      	lsls	r3, r3, #8
 800afe4:	18c9      	adds	r1, r1, r3
 800afe6:	b289      	uxth	r1, r1
 800afe8:	f7fc fd8c 	bl	8007b04 <EE_WriteVariable>
 800afec:	e7ec      	b.n	800afc8 <PxMessagingTask+0x11e0>
								temp =cMessage[port - 1][15 + shift];
 800afee:	9a05      	ldr	r2, [sp, #20]
 800aff0:	1912      	adds	r2, r2, r4
 800aff2:	7bd1      	ldrb	r1, [r2, #15]
 800aff4:	f7ff fae0 	bl	800a5b8 <PxMessagingTask+0x7d0>
 800aff8:	2700      	movs	r7, #0
 800affa:	f7fe ff9f 	bl	8009f3c <PxMessagingTask+0x154>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800affe:	2a01      	cmp	r2, #1
 800b000:	d901      	bls.n	800b006 <PxMessagingTask+0x121e>
 800b002:	f7ff fb8d 	bl	800a720 <PxMessagingTask+0x938>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800b006:	9b05      	ldr	r3, [sp, #20]
 800b008:	4a71      	ldr	r2, [pc, #452]	; (800b1d0 <PxMessagingTask+0x13e8>)
 800b00a:	5d1b      	ldrb	r3, [r3, r4]
 800b00c:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800b00e:	2b08      	cmp	r3, #8
 800b010:	d901      	bls.n	800b016 <PxMessagingTask+0x122e>
 800b012:	f7ff fb85 	bl	800a720 <PxMessagingTask+0x938>
 800b016:	4a6f      	ldr	r2, [pc, #444]	; (800b1d4 <PxMessagingTask+0x13ec>)
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	58d3      	ldr	r3, [r2, r3]
 800b01c:	469f      	mov	pc, r3
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800b01e:	4651      	mov	r1, sl
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	0a12      	lsrs	r2, r2, #8
 800b028:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	0c12      	lsrs	r2, r2, #16
 800b02e:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800b030:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 800b032:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800b034:	0e1b      	lsrs	r3, r3, #24
 800b036:	710b      	strb	r3, [r1, #4]
 800b038:	e45b      	b.n	800a8f2 <PxMessagingTask+0xb0a>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800b03a:	4651      	mov	r1, sl
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	1212      	asrs	r2, r2, #8
 800b044:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	1412      	asrs	r2, r2, #16
 800b04a:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b04c:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 800b04e:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b050:	161b      	asrs	r3, r3, #24
 800b052:	710b      	strb	r3, [r1, #4]
 800b054:	e44d      	b.n	800a8f2 <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800b056:	4651      	mov	r1, sl
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b05c:	4b5e      	ldr	r3, [pc, #376]	; (800b1d8 <PxMessagingTask+0x13f0>)
 800b05e:	18d3      	adds	r3, r2, r3
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b064:	4b5d      	ldr	r3, [pc, #372]	; (800b1dc <PxMessagingTask+0x13f4>)
 800b066:	18d3      	adds	r3, r2, r3
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b06c:	4b5c      	ldr	r3, [pc, #368]	; (800b1e0 <PxMessagingTask+0x13f8>)
 800b06e:	469c      	mov	ip, r3
 800b070:	4462      	add	r2, ip
 800b072:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 800b074:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b076:	710b      	strb	r3, [r1, #4]
 800b078:	e43b      	b.n	800a8f2 <PxMessagingTask+0xb0a>
									SendMessageToModule(src,
 800b07a:	2201      	movs	r2, #1
 800b07c:	211f      	movs	r1, #31
 800b07e:	9804      	ldr	r0, [sp, #16]
 800b080:	f7fe fbdc 	bl	800983c <SendMessageToModule>
 800b084:	4643      	mov	r3, r8
 800b086:	5d5e      	ldrb	r6, [r3, r5]
 800b088:	f7fe ff58 	bl	8009f3c <PxMessagingTask+0x154>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b08c:	9b05      	ldr	r3, [sp, #20]
 800b08e:	2700      	movs	r7, #0
 800b090:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b094:	4466      	add	r6, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b096:	469c      	mov	ip, r3
 800b098:	1c60      	adds	r0, r4, #1
 800b09a:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b09c:	3e01      	subs	r6, #1
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b09e:	4458      	add	r0, fp
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b0a0:	7037      	strb	r7, [r6, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b0a2:	f7f8 fc6b 	bl	800397c <IsModuleParameter>
 800b0a6:	9009      	str	r0, [sp, #36]	; 0x24
								if(temp == 0){ // Parameter does not exist
 800b0a8:	42b8      	cmp	r0, r7
 800b0aa:	d03a      	beq.n	800b122 <PxMessagingTask+0x133a>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b0ac:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b0ae:	494d      	ldr	r1, [pc, #308]	; (800b1e4 <PxMessagingTask+0x13fc>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b0b2:	468c      	mov	ip, r1
 800b0b4:	4651      	mov	r1, sl
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	435a      	muls	r2, r3
 800b0ba:	4b4a      	ldr	r3, [pc, #296]	; (800b1e4 <PxMessagingTask+0x13fc>)
 800b0bc:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b0be:	4462      	add	r2, ip
 800b0c0:	7912      	ldrb	r2, [r2, #4]
 800b0c2:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800b0c4:	3a01      	subs	r2, #1
 800b0c6:	b2d2      	uxtb	r2, r2
 800b0c8:	2a07      	cmp	r2, #7
 800b0ca:	d901      	bls.n	800b0d0 <PxMessagingTask+0x12e8>
 800b0cc:	f7fe ffb9 	bl	800a042 <PxMessagingTask+0x25a>
 800b0d0:	4945      	ldr	r1, [pc, #276]	; (800b1e8 <PxMessagingTask+0x1400>)
 800b0d2:	0092      	lsls	r2, r2, #2
 800b0d4:	588a      	ldr	r2, [r1, r2]
 800b0d6:	4697      	mov	pc, r2
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800b0d8:	4651      	mov	r1, sl
 800b0da:	881a      	ldrh	r2, [r3, #0]
 800b0dc:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800b0de:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 800b0e0:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800b0e2:	0a1b      	lsrs	r3, r3, #8
 800b0e4:	708b      	strb	r3, [r1, #2]
 800b0e6:	f7ff fc04 	bl	800a8f2 <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )temp32;
 800b0ea:	4652      	mov	r2, sl
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 800b0f0:	2202      	movs	r2, #2
 800b0f2:	f7ff fbfe 	bl	800a8f2 <PxMessagingTask+0xb0a>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800b0f6:	4651      	mov	r1, sl
 800b0f8:	881a      	ldrh	r2, [r3, #0]
 800b0fa:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b0fc:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 800b0fe:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b100:	b21b      	sxth	r3, r3
 800b102:	121b      	asrs	r3, r3, #8
 800b104:	708b      	strb	r3, [r1, #2]
 800b106:	f7ff fbf4 	bl	800a8f2 <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800b10a:	4651      	mov	r1, sl
 800b10c:	781a      	ldrb	r2, [r3, #0]
 800b10e:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b110:	785a      	ldrb	r2, [r3, #1]
 800b112:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b114:	789a      	ldrb	r2, [r3, #2]
 800b116:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b118:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 800b11a:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b11c:	710b      	strb	r3, [r1, #4]
 800b11e:	f7ff fbe8 	bl	800a8f2 <PxMessagingTask+0xb0a>
									SendMessageToModule(src,
 800b122:	2201      	movs	r2, #1
 800b124:	211f      	movs	r1, #31
 800b126:	9804      	ldr	r0, [sp, #16]
 800b128:	f7fe fb88 	bl	800983c <SendMessageToModule>
 800b12c:	4643      	mov	r3, r8
 800b12e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b130:	5d5e      	ldrb	r6, [r3, r5]
 800b132:	f7fe ff03 	bl	8009f3c <PxMessagingTask+0x154>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800b136:	9b05      	ldr	r3, [sp, #20]
 800b138:	469c      	mov	ip, r3
 800b13a:	4464      	add	r4, ip
 800b13c:	78a3      	ldrb	r3, [r4, #2]
 800b13e:	7862      	ldrb	r2, [r4, #1]
 800b140:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b142:	189b      	adds	r3, r3, r2
 800b144:	464a      	mov	r2, r9
 800b146:	6013      	str	r3, [r2, #0]
 800b148:	17db      	asrs	r3, r3, #31
 800b14a:	6053      	str	r3, [r2, #4]
										break;
 800b14c:	f7ff fae8 	bl	800a720 <PxMessagingTask+0x938>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b150:	9b05      	ldr	r3, [sp, #20]
 800b152:	469c      	mov	ip, r3
 800b154:	4464      	add	r4, ip
 800b156:	78a3      	ldrb	r3, [r4, #2]
 800b158:	7862      	ldrb	r2, [r4, #1]
 800b15a:	021b      	lsls	r3, r3, #8
 800b15c:	189b      	adds	r3, r3, r2
 800b15e:	78e2      	ldrb	r2, [r4, #3]
 800b160:	0412      	lsls	r2, r2, #16
 800b162:	189b      	adds	r3, r3, r2
 800b164:	7922      	ldrb	r2, [r4, #4]
 800b166:	0612      	lsls	r2, r2, #24
 800b168:	e7eb      	b.n	800b142 <PxMessagingTask+0x135a>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800b16a:	9b05      	ldr	r3, [sp, #20]
 800b16c:	464a      	mov	r2, r9
 800b16e:	469c      	mov	ip, r3
 800b170:	2301      	movs	r3, #1
 800b172:	4464      	add	r4, ip
 800b174:	56e3      	ldrsb	r3, [r4, r3]
 800b176:	6013      	str	r3, [r2, #0]
 800b178:	17db      	asrs	r3, r3, #31
 800b17a:	6053      	str	r3, [r2, #4]
										break;
 800b17c:	f7ff fad0 	bl	800a720 <PxMessagingTask+0x938>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800b180:	9b05      	ldr	r3, [sp, #20]
 800b182:	464a      	mov	r2, r9
 800b184:	469c      	mov	ip, r3
 800b186:	4464      	add	r4, ip
 800b188:	7863      	ldrb	r3, [r4, #1]
 800b18a:	6013      	str	r3, [r2, #0]
 800b18c:	2300      	movs	r3, #0
 800b18e:	6053      	str	r3, [r2, #4]
										break;
 800b190:	f7ff fac6 	bl	800a720 <PxMessagingTask+0x938>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b194:	2310      	movs	r3, #16
 800b196:	f7ff f87c 	bl	800a292 <PxMessagingTask+0x4aa>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b19a:	9b05      	ldr	r3, [sp, #20]
 800b19c:	469c      	mov	ip, r3
 800b19e:	4464      	add	r4, ip
 800b1a0:	78a3      	ldrb	r3, [r4, #2]
 800b1a2:	78e2      	ldrb	r2, [r4, #3]
 800b1a4:	021b      	lsls	r3, r3, #8
 800b1a6:	0412      	lsls	r2, r2, #16
 800b1a8:	189b      	adds	r3, r3, r2
 800b1aa:	7862      	ldrb	r2, [r4, #1]
 800b1ac:	189b      	adds	r3, r3, r2
 800b1ae:	7922      	ldrb	r2, [r4, #4]
 800b1b0:	0612      	lsls	r2, r2, #24
 800b1b2:	189b      	adds	r3, r3, r2
 800b1b4:	464a      	mov	r2, r9
 800b1b6:	6013      	str	r3, [r2, #0]
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	6053      	str	r3, [r2, #4]
										break;
 800b1bc:	f7ff fab0 	bl	800a720 <PxMessagingTask+0x938>
 800b1c0:	20000c3c 	.word	0x20000c3c
 800b1c4:	0000ffff 	.word	0x0000ffff
 800b1c8:	e000ed00 	.word	0xe000ed00
 800b1cc:	05fa0004 	.word	0x05fa0004
 800b1d0:	2000002a 	.word	0x2000002a
 800b1d4:	08018df4 	.word	0x08018df4
 800b1d8:	20000001 	.word	0x20000001
 800b1dc:	20000002 	.word	0x20000002
 800b1e0:	20000003 	.word	0x20000003
 800b1e4:	20000094 	.word	0x20000094
 800b1e8:	08018e18 	.word	0x08018e18

0800b1ec <CheckForEnterKey>:
}
/*-----------------------------------------------------------*/

/* --- Check for CLI stop key --- */
static void CheckForEnterKey(void) {
	stopB = 0;
 800b1ec:	2300      	movs	r3, #0
static void CheckForEnterKey(void) {
 800b1ee:	b570      	push	{r4, r5, r6, lr}
	stopB = 0;
 800b1f0:	4c12      	ldr	r4, [pc, #72]	; (800b23c <CheckForEnterKey+0x50>)
 800b1f2:	4e13      	ldr	r6, [pc, #76]	; (800b240 <CheckForEnterKey+0x54>)
 800b1f4:	7023      	strb	r3, [r4, #0]
	// Look for ENTER key to stop the stream
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800b1f6:	4b13      	ldr	r3, [pc, #76]	; (800b244 <CheckForEnterKey+0x58>)
static void CheckForEnterKey(void) {
 800b1f8:	b082      	sub	sp, #8
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800b1fa:	781d      	ldrb	r5, [r3, #0]
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	3d01      	subs	r5, #1
 800b200:	0068      	lsls	r0, r5, #1
 800b202:	1941      	adds	r1, r0, r5
 800b204:	0189      	lsls	r1, r1, #6
 800b206:	1871      	adds	r1, r6, r1
 800b208:	e002      	b.n	800b210 <CheckForEnterKey+0x24>
 800b20a:	3301      	adds	r3, #1
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
 800b20c:	2bc0      	cmp	r3, #192	; 0xc0
 800b20e:	d012      	beq.n	800b236 <CheckForEnterKey+0x4a>
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800b210:	5cca      	ldrb	r2, [r1, r3]
 800b212:	2a0d      	cmp	r2, #13
 800b214:	d1f9      	bne.n	800b20a <CheckForEnterKey+0x1e>
			UARTRxBuf[PcPort - 1][chr] = 0;
 800b216:	2200      	movs	r2, #0
			mosfetMode = REQ_STOP;		// Stop the streaming task
 800b218:	210e      	movs	r1, #14
			UARTRxBuf[PcPort - 1][chr] = 0;
 800b21a:	1940      	adds	r0, r0, r5
 800b21c:	0180      	lsls	r0, r0, #6
 800b21e:	1830      	adds	r0, r6, r0
 800b220:	54c2      	strb	r2, [r0, r3]
			mosfetMode = REQ_STOP;		// Stop the streaming task
 800b222:	4b09      	ldr	r3, [pc, #36]	; (800b248 <CheckForEnterKey+0x5c>)
 800b224:	7019      	strb	r1, [r3, #0]
			xTimerStop(xTimerSwitch, 0); // Stop any running timeout timer
 800b226:	9200      	str	r2, [sp, #0]
 800b228:	2300      	movs	r3, #0
 800b22a:	390b      	subs	r1, #11
 800b22c:	6860      	ldr	r0, [r4, #4]
 800b22e:	f004 fc99 	bl	800fb64 <xTimerGenericCommand>
			stopB = 1;
 800b232:	2301      	movs	r3, #1
 800b234:	7023      	strb	r3, [r4, #0]
			break;
		}
	}
}
 800b236:	b002      	add	sp, #8
 800b238:	bd70      	pop	{r4, r5, r6, pc}
 800b23a:	46c0      	nop			; (mov r8, r8)
 800b23c:	200019cc 	.word	0x200019cc
 800b240:	20001340 	.word	0x20001340
 800b244:	20000c28 	.word	0x20000c28
 800b248:	2000700c 	.word	0x2000700c

0800b24c <ledModeCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE ledModeCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800b24c:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800b24e:	b530      	push	{r4, r5, lr}
 800b250:	b083      	sub	sp, #12
 800b252:	0005      	movs	r5, r0
	portBASE_TYPE xParameterStringLength1 = 0;
 800b254:	9301      	str	r3, [sp, #4]
		const int8_t *pcCommandString) {
 800b256:	0010      	movs	r0, r2

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800b258:	2d00      	cmp	r5, #0
 800b25a:	d01e      	beq.n	800b29a <ledModeCommand+0x4e>

	/* Obtain the 1st parameter string. */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800b25c:	2101      	movs	r1, #1
 800b25e:	aa01      	add	r2, sp, #4
 800b260:	f003 f8fe 	bl	800e460 <FreeRTOS_CLIGetParameter>
	1, /* Return the first parameter. */
	&xParameterStringLength1 /* Store the parameter string length. */
	);
	if (!strcmp((char*) pcParameterString1, "on")
 800b264:	4919      	ldr	r1, [pc, #100]	; (800b2cc <ledModeCommand+0x80>)
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800b266:	0004      	movs	r4, r0
	if (!strcmp((char*) pcParameterString1, "on")
 800b268:	f7f4 ff4c 	bl	8000104 <strcmp>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d016      	beq.n	800b29e <ledModeCommand+0x52>
			|| !strcmp((char*) pcParameterString1, "ON"))
 800b270:	4917      	ldr	r1, [pc, #92]	; (800b2d0 <ledModeCommand+0x84>)
 800b272:	0020      	movs	r0, r4
 800b274:	f7f4 ff46 	bl	8000104 <strcmp>
 800b278:	2800      	cmp	r0, #0
 800b27a:	d010      	beq.n	800b29e <ledModeCommand+0x52>
		SwitchindMode = 1;
	else if (!strcmp((char*) pcParameterString1, "off")
 800b27c:	4915      	ldr	r1, [pc, #84]	; (800b2d4 <ledModeCommand+0x88>)
 800b27e:	0020      	movs	r0, r4
 800b280:	f7f4 ff40 	bl	8000104 <strcmp>
 800b284:	2800      	cmp	r0, #0
 800b286:	d115      	bne.n	800b2b4 <ledModeCommand+0x68>
			|| !strcmp((char*) pcParameterString1, "OFF"))
		SwitchindMode = 0;
 800b288:	2200      	movs	r2, #0
 800b28a:	4b13      	ldr	r3, [pc, #76]	; (800b2d8 <ledModeCommand+0x8c>)
 800b28c:	721a      	strb	r2, [r3, #8]

	/* Respond to the command */
	if (SwitchindMode) {
		strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
	} else {
		strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 800b28e:	222f      	movs	r2, #47	; 0x2f
 800b290:	4912      	ldr	r1, [pc, #72]	; (800b2dc <ledModeCommand+0x90>)
 800b292:	0028      	movs	r0, r5
 800b294:	f008 fec3 	bl	801401e <memcpy>
 800b298:	e009      	b.n	800b2ae <ledModeCommand+0x62>
	configASSERT(pcWriteBuffer);
 800b29a:	b672      	cpsid	i
 800b29c:	e7fe      	b.n	800b29c <ledModeCommand+0x50>
		SwitchindMode = 1;
 800b29e:	2201      	movs	r2, #1
 800b2a0:	4b0d      	ldr	r3, [pc, #52]	; (800b2d8 <ledModeCommand+0x8c>)
 800b2a2:	721a      	strb	r2, [r3, #8]
		strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 800b2a4:	222e      	movs	r2, #46	; 0x2e
 800b2a6:	490e      	ldr	r1, [pc, #56]	; (800b2e0 <ledModeCommand+0x94>)
 800b2a8:	0028      	movs	r0, r5
 800b2aa:	f008 feb8 	bl	801401e <memcpy>
	}

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	b003      	add	sp, #12
 800b2b2:	bd30      	pop	{r4, r5, pc}
			|| !strcmp((char*) pcParameterString1, "OFF"))
 800b2b4:	490b      	ldr	r1, [pc, #44]	; (800b2e4 <ledModeCommand+0x98>)
 800b2b6:	0020      	movs	r0, r4
 800b2b8:	f7f4 ff24 	bl	8000104 <strcmp>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d0e3      	beq.n	800b288 <ledModeCommand+0x3c>
	if (SwitchindMode) {
 800b2c0:	4b05      	ldr	r3, [pc, #20]	; (800b2d8 <ledModeCommand+0x8c>)
 800b2c2:	7a1b      	ldrb	r3, [r3, #8]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d0e2      	beq.n	800b28e <ledModeCommand+0x42>
 800b2c8:	e7ec      	b.n	800b2a4 <ledModeCommand+0x58>
 800b2ca:	46c0      	nop			; (mov r8, r8)
 800b2cc:	0801adc0 	.word	0x0801adc0
 800b2d0:	0801b6a4 	.word	0x0801b6a4
 800b2d4:	0801b6a8 	.word	0x0801b6a8
 800b2d8:	200019cc 	.word	0x200019cc
 800b2dc:	0801b6e0 	.word	0x0801b6e0
 800b2e0:	0801b6b0 	.word	0x0801b6b0
 800b2e4:	0801b6ac 	.word	0x0801b6ac

0800b2e8 <SendMeasurementResult.isra.0>:
static Module_Status SendMeasurementResult(uint8_t request, float value, uint8_t module,
 800b2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ea:	46c6      	mov	lr, r8
 800b2ec:	b500      	push	{lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	1c05      	adds	r5, r0, #0
 800b2f2:	001f      	movs	r7, r3
 800b2f4:	000e      	movs	r6, r1
 800b2f6:	4690      	mov	r8, r2
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800b2f8:	f003 f8ae 	bl	800e458 <FreeRTOS_CLIGetOutputBuffer>
	switch (mosfetMode) {
 800b2fc:	4b3b      	ldr	r3, [pc, #236]	; (800b3ec <SendMeasurementResult.isra.0+0x104>)
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800b2fe:	0004      	movs	r4, r0
	switch (mosfetMode) {
 800b300:	781b      	ldrb	r3, [r3, #0]
	message = value;
 800b302:	9503      	str	r5, [sp, #12]
	switch (mosfetMode) {
 800b304:	2b0c      	cmp	r3, #12
 800b306:	d817      	bhi.n	800b338 <SendMeasurementResult.isra.0+0x50>
 800b308:	4a39      	ldr	r2, [pc, #228]	; (800b3f0 <SendMeasurementResult.isra.0+0x108>)
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	58d3      	ldr	r3, [r2, r3]
 800b30e:	469f      	mov	pc, r3
			sprintf((char*) pcOutputString, (char*) pcCurrentVerboseMsg, 0);
 800b310:	2200      	movs	r2, #0
 800b312:	4938      	ldr	r1, [pc, #224]	; (800b3f4 <SendMeasurementResult.isra.0+0x10c>)
 800b314:	f009 f886 	bl	8014424 <sprintf>
				strlen((char*) pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800b318:	0020      	movs	r0, r4
 800b31a:	f7f4 fefd 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800b31e:	4b36      	ldr	r3, [pc, #216]	; (800b3f8 <SendMeasurementResult.isra.0+0x110>)
 800b320:	b282      	uxth	r2, r0
 800b322:	7818      	ldrb	r0, [r3, #0]
 800b324:	2301      	movs	r3, #1
 800b326:	425b      	negs	r3, r3
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	33f6      	adds	r3, #246	; 0xf6
 800b32c:	33ff      	adds	r3, #255	; 0xff
 800b32e:	0021      	movs	r1, r4
 800b330:	f002 fe3a 	bl	800dfa8 <writePxMutex>
			CheckForEnterKey();
 800b334:	f7ff ff5a 	bl	800b1ec <CheckForEnterKey>
}
 800b338:	2000      	movs	r0, #0
 800b33a:	b004      	add	sp, #16
 800b33c:	bc04      	pop	{r2}
 800b33e:	4690      	mov	r8, r2
 800b340:	bdf0      	pop	{r4, r5, r6, r7, pc}
			memcpy(Buffer, &message, sizeof(float));
 800b342:	2204      	movs	r2, #4
 800b344:	a903      	add	r1, sp, #12
 800b346:	0038      	movs	r0, r7
 800b348:	f008 fe69 	bl	801401e <memcpy>
 800b34c:	e7f4      	b.n	800b338 <SendMeasurementResult.isra.0+0x50>
			if (module == myID) {
 800b34e:	4b2b      	ldr	r3, [pc, #172]	; (800b3fc <SendMeasurementResult.isra.0+0x114>)
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	42b3      	cmp	r3, r6
 800b354:	d037      	beq.n	800b3c6 <SendMeasurementResult.isra.0+0xde>
				messageParams[0] = port;
 800b356:	4642      	mov	r2, r8
 800b358:	4b29      	ldr	r3, [pc, #164]	; (800b400 <SendMeasurementResult.isra.0+0x118>)
				SendMessageToModule(module, CODE_PORT_FORWARD,
 800b35a:	0030      	movs	r0, r6
				messageParams[0] = port;
 800b35c:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&message) + 3);
 800b35e:	aa03      	add	r2, sp, #12
 800b360:	78d1      	ldrb	r1, [r2, #3]
 800b362:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&message) + 2);
 800b364:	7891      	ldrb	r1, [r2, #2]
 800b366:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&message) + 1);
 800b368:	7851      	ldrb	r1, [r2, #1]
				messageParams[4] = *((__IO uint8_t*) (&message) + 0);
 800b36a:	7812      	ldrb	r2, [r2, #0]
				messageParams[3] = *((__IO uint8_t*) (&message) + 1);
 800b36c:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&message) + 0);
 800b36e:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(module, CODE_PORT_FORWARD,
 800b370:	2123      	movs	r1, #35	; 0x23
 800b372:	2205      	movs	r2, #5
 800b374:	f7fe fa62 	bl	800983c <SendMessageToModule>
 800b378:	e7de      	b.n	800b338 <SendMeasurementResult.isra.0+0x50>
			sprintf((char*) pcOutputString, (char*) pcCurrentMsg, message);
 800b37a:	1c28      	adds	r0, r5, #0
 800b37c:	f7f7 fd08 	bl	8002d90 <__aeabi_f2d>
 800b380:	0002      	movs	r2, r0
 800b382:	000b      	movs	r3, r1
 800b384:	0020      	movs	r0, r4
 800b386:	491f      	ldr	r1, [pc, #124]	; (800b404 <SendMeasurementResult.isra.0+0x11c>)
 800b388:	f009 f84c 	bl	8014424 <sprintf>
 800b38c:	e7c4      	b.n	800b318 <SendMeasurementResult.isra.0+0x30>
			sprintf((char*) pcOutputString, (char*) pcCurrentVerboseMsg, message);
 800b38e:	1c28      	adds	r0, r5, #0
 800b390:	f7f7 fcfe 	bl	8002d90 <__aeabi_f2d>
 800b394:	0002      	movs	r2, r0
 800b396:	000b      	movs	r3, r1
 800b398:	0020      	movs	r0, r4
 800b39a:	4916      	ldr	r1, [pc, #88]	; (800b3f4 <SendMeasurementResult.isra.0+0x10c>)
 800b39c:	f009 f842 	bl	8014424 <sprintf>
 800b3a0:	e7ba      	b.n	800b318 <SendMeasurementResult.isra.0+0x30>
			strcpy((char*) pcOutputString, (char*) pcOutTimeout);
 800b3a2:	220a      	movs	r2, #10
 800b3a4:	4918      	ldr	r1, [pc, #96]	; (800b408 <SendMeasurementResult.isra.0+0x120>)
 800b3a6:	f008 fe3a 	bl	801401e <memcpy>
			writePxMutex(PcPort, (char*) pcOutputString,
 800b3aa:	4b13      	ldr	r3, [pc, #76]	; (800b3f8 <SendMeasurementResult.isra.0+0x110>)
 800b3ac:	2209      	movs	r2, #9
 800b3ae:	7818      	ldrb	r0, [r3, #0]
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	425b      	negs	r3, r3
 800b3b4:	9300      	str	r3, [sp, #0]
 800b3b6:	33f6      	adds	r3, #246	; 0xf6
 800b3b8:	33ff      	adds	r3, #255	; 0xff
 800b3ba:	0021      	movs	r1, r4
 800b3bc:	f002 fdf4 	bl	800dfa8 <writePxMutex>
			CheckForEnterKey();
 800b3c0:	f7ff ff14 	bl	800b1ec <CheckForEnterKey>
 800b3c4:	e7b8      	b.n	800b338 <SendMeasurementResult.isra.0+0x50>
				temp[0] = *((__IO uint8_t*) (&message) + 3);
 800b3c6:	ab03      	add	r3, sp, #12
 800b3c8:	78da      	ldrb	r2, [r3, #3]
 800b3ca:	4910      	ldr	r1, [pc, #64]	; (800b40c <SendMeasurementResult.isra.0+0x124>)
				writePxMutex(port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800b3cc:	4640      	mov	r0, r8
				temp[0] = *((__IO uint8_t*) (&message) + 3);
 800b3ce:	730a      	strb	r2, [r1, #12]
				temp[1] = *((__IO uint8_t*) (&message) + 2);
 800b3d0:	789a      	ldrb	r2, [r3, #2]
				writePxMutex(port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800b3d2:	310c      	adds	r1, #12
				temp[1] = *((__IO uint8_t*) (&message) + 2);
 800b3d4:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&message) + 1);
 800b3d6:	785a      	ldrb	r2, [r3, #1]
				temp[3] = *((__IO uint8_t*) (&message) + 0);
 800b3d8:	781b      	ldrb	r3, [r3, #0]
				temp[2] = *((__IO uint8_t*) (&message) + 1);
 800b3da:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&message) + 0);
 800b3dc:	70cb      	strb	r3, [r1, #3]
				writePxMutex(port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800b3de:	230a      	movs	r3, #10
 800b3e0:	2204      	movs	r2, #4
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	f002 fde0 	bl	800dfa8 <writePxMutex>
 800b3e8:	e7a6      	b.n	800b338 <SendMeasurementResult.isra.0+0x50>
 800b3ea:	46c0      	nop			; (mov r8, r8)
 800b3ec:	2000700c 	.word	0x2000700c
 800b3f0:	08018e38 	.word	0x08018e38
 800b3f4:	0801b720 	.word	0x0801b720
 800b3f8:	20000c28 	.word	0x20000c28
 800b3fc:	20000a98 	.word	0x20000a98
 800b400:	20000b3c 	.word	0x20000b3c
 800b404:	0801b710 	.word	0x0801b710
 800b408:	0801b728 	.word	0x0801b728
 800b40c:	200019cc 	.word	0x200019cc

0800b410 <Stream_current_To_Buffer.part.8>:
float Stream_current_To_Port(uint8_t Port, uint8_t Module, uint32_t Period,
 800b410:	0002      	movs	r2, r0
		xTimerSwitch = xTimerCreate("mosfetTimer",
 800b412:	21fa      	movs	r1, #250	; 0xfa
float Stream_current_To_Port(uint8_t Port, uint8_t Module, uint32_t Period,
 800b414:	b510      	push	{r4, lr}
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 800b416:	0140      	lsls	r0, r0, #5
 800b418:	1a80      	subs	r0, r0, r2
 800b41a:	0080      	lsls	r0, r0, #2
 800b41c:	1880      	adds	r0, r0, r2
float Stream_current_To_Port(uint8_t Port, uint8_t Module, uint32_t Period,
 800b41e:	b082      	sub	sp, #8
		xTimerSwitch = xTimerCreate("mosfetTimer",
 800b420:	0089      	lsls	r1, r1, #2
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 800b422:	00c0      	lsls	r0, r0, #3
		xTimerSwitch = xTimerCreate("mosfetTimer",
 800b424:	f7f4 fe94 	bl	8000150 <__udivsi3>
 800b428:	4b0b      	ldr	r3, [pc, #44]	; (800b458 <Stream_current_To_Buffer.part.8+0x48>)
 800b42a:	0001      	movs	r1, r0
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	2200      	movs	r2, #0
 800b430:	23ff      	movs	r3, #255	; 0xff
 800b432:	480a      	ldr	r0, [pc, #40]	; (800b45c <Stream_current_To_Buffer.part.8+0x4c>)
 800b434:	f004 fb76 	bl	800fb24 <xTimerCreate>
 800b438:	4b09      	ldr	r3, [pc, #36]	; (800b460 <Stream_current_To_Buffer.part.8+0x50>)
 800b43a:	0004      	movs	r4, r0
 800b43c:	6058      	str	r0, [r3, #4]
		xTimerStart(xTimerSwitch, portMAX_DELAY);
 800b43e:	f003 feab 	bl	800f198 <xTaskGetTickCount>
 800b442:	2301      	movs	r3, #1
 800b444:	425b      	negs	r3, r3
 800b446:	0002      	movs	r2, r0
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	2101      	movs	r1, #1
 800b44c:	2300      	movs	r3, #0
 800b44e:	0020      	movs	r0, r4
 800b450:	f004 fb88 	bl	800fb64 <xTimerGenericCommand>
}
 800b454:	b002      	add	sp, #8
 800b456:	bd10      	pop	{r4, pc}
 800b458:	0800bc55 	.word	0x0800bc55
 800b45c:	0801b734 	.word	0x0801b734
 800b460:	200019cc 	.word	0x200019cc

0800b464 <SystemClock_Config>:
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800b464:	2310      	movs	r3, #16
void SystemClock_Config(void) {
 800b466:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b468:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800b46a:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b46c:	2680      	movs	r6, #128	; 0x80
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b46e:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b470:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b472:	2401      	movs	r4, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b474:	2702      	movs	r7, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b476:	0276      	lsls	r6, r6, #9
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b478:	035b      	lsls	r3, r3, #13
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b47a:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b47c:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b47e:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b480:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b482:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b484:	9519      	str	r5, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b486:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b488:	9617      	str	r6, [sp, #92]	; 0x5c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b48a:	f006 fb8f 	bl	8011bac <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800b48e:	2307      	movs	r3, #7
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b490:	2101      	movs	r1, #1
 800b492:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800b494:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b496:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b498:	9505      	str	r5, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b49a:	9703      	str	r7, [sp, #12]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b49c:	f006 fe28 	bl	80120f0 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800b4a0:	4b1a      	ldr	r3, [pc, #104]	; (800b50c <SystemClock_Config+0xa8>)
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b4a2:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800b4a4:	9306      	str	r3, [sp, #24]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b4a6:	9508      	str	r5, [sp, #32]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b4a8:	9509      	str	r5, [sp, #36]	; 0x24
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b4aa:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b4ac:	f006 ffac 	bl	8012408 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800b4b0:	2180      	movs	r1, #128	; 0x80
 800b4b2:	4d17      	ldr	r5, [pc, #92]	; (800b510 <SystemClock_Config+0xac>)
 800b4b4:	0549      	lsls	r1, r1, #21
 800b4b6:	69ea      	ldr	r2, [r5, #28]
 800b4b8:	430a      	orrs	r2, r1
 800b4ba:	61ea      	str	r2, [r5, #28]
 800b4bc:	69eb      	ldr	r3, [r5, #28]
 800b4be:	400b      	ands	r3, r1
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800b4c4:	f006 fb68 	bl	8011b98 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b4c8:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b4ca:	a806      	add	r0, sp, #24
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b4d0:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b4d2:	f006 ff99 	bl	8012408 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800b4d6:	f006 ff69 	bl	80123ac <HAL_RCC_GetHCLKFreq>
 800b4da:	21fa      	movs	r1, #250	; 0xfa
 800b4dc:	0089      	lsls	r1, r1, #2
 800b4de:	f7f4 fe37 	bl	8000150 <__udivsi3>
 800b4e2:	f005 fa03 	bl	80108ec <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b4e6:	2004      	movs	r0, #4
 800b4e8:	f005 fa1c 	bl	8010924 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4ec:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE()
 800b4ee:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4f0:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE()
 800b4f2:	4323      	orrs	r3, r4
 800b4f4:	61ab      	str	r3, [r5, #24]
 800b4f6:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4f8:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE()
 800b4fa:	401c      	ands	r4, r3
 800b4fc:	9401      	str	r4, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4fe:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE()
 800b500:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b502:	f005 f9b3 	bl	801086c <HAL_NVIC_SetPriority>
}
 800b506:	b01b      	add	sp, #108	; 0x6c
 800b508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b50a:	46c0      	nop			; (mov r8, r8)
 800b50c:	00040003 	.word	0x00040003
 800b510:	40021000 	.word	0x40021000

0800b514 <SaveToRO>:
uint8_t SaveToRO(void) {
 800b514:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b516:	46de      	mov	lr, fp
 800b518:	4657      	mov	r7, sl
 800b51a:	464e      	mov	r6, r9
 800b51c:	4645      	mov	r5, r8
 800b51e:	b5e0      	push	{r5, r6, r7, lr}
 800b520:	b087      	sub	sp, #28
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 800b522:	2215      	movs	r2, #21
 800b524:	2100      	movs	r1, #0
 800b526:	4668      	mov	r0, sp
 800b528:	f008 fd82 	bl	8014030 <memset>
	HAL_FLASH_Unlock();
 800b52c:	f006 f846 	bl	80115bc <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800b530:	486a      	ldr	r0, [pc, #424]	; (800b6dc <SaveToRO+0x1c8>)
 800b532:	f006 f973 	bl	801181c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 800b536:	486a      	ldr	r0, [pc, #424]	; (800b6e0 <SaveToRO+0x1cc>)
 800b538:	f006 f85c 	bl	80115f4 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK) {
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d16e      	bne.n	800b61e <SaveToRO+0x10a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b540:	2202      	movs	r2, #2
 800b542:	4c68      	ldr	r4, [pc, #416]	; (800b6e4 <SaveToRO+0x1d0>)
 800b544:	6923      	ldr	r3, [r4, #16]
 800b546:	4393      	bics	r3, r2
 800b548:	6123      	str	r3, [r4, #16]
	if (myID) {
 800b54a:	4b67      	ldr	r3, [pc, #412]	; (800b6e8 <SaveToRO+0x1d4>)
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d000      	beq.n	800b554 <SaveToRO+0x40>
 800b552:	e06e      	b.n	800b632 <SaveToRO+0x11e>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800b554:	4b65      	ldr	r3, [pc, #404]	; (800b6ec <SaveToRO+0x1d8>)
 800b556:	469a      	mov	sl, r3
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d100      	bne.n	800b560 <SaveToRO+0x4c>
 800b55e:	e0b8      	b.n	800b6d2 <SaveToRO+0x1be>
 800b560:	4b63      	ldr	r3, [pc, #396]	; (800b6f0 <SaveToRO+0x1dc>)
 800b562:	2500      	movs	r5, #0
 800b564:	4c63      	ldr	r4, [pc, #396]	; (800b6f4 <SaveToRO+0x1e0>)
 800b566:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b568:	4f5e      	ldr	r7, [pc, #376]	; (800b6e4 <SaveToRO+0x1d0>)
 800b56a:	e006      	b.n	800b57a <SaveToRO+0x66>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800b56c:	4653      	mov	r3, sl
 800b56e:	3501      	adds	r5, #1
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	b2ed      	uxtb	r5, r5
 800b574:	42ab      	cmp	r3, r5
 800b576:	d800      	bhi.n	800b57a <SaveToRO+0x66>
 800b578:	e0ab      	b.n	800b6d2 <SaveToRO+0x1be>
		if (snippets[s].cond.conditionType) {
 800b57a:	00ab      	lsls	r3, r5, #2
 800b57c:	1959      	adds	r1, r3, r5
 800b57e:	4698      	mov	r8, r3
 800b580:	464b      	mov	r3, r9
 800b582:	0089      	lsls	r1, r1, #2
 800b584:	5c5b      	ldrb	r3, [r3, r1]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0f0      	beq.n	800b56c <SaveToRO+0x58>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b58a:	466b      	mov	r3, sp
 800b58c:	22fe      	movs	r2, #254	; 0xfe
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 800b58e:	1c58      	adds	r0, r3, #1
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b590:	701a      	strb	r2, [r3, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 800b592:	4449      	add	r1, r9
 800b594:	2214      	movs	r2, #20
 800b596:	f008 fd42 	bl	801401e <memcpy>
 800b59a:	2314      	movs	r3, #20
 800b59c:	469b      	mov	fp, r3
						*(uint16_t*) &snipBuffer[j * 2]);
 800b59e:	466b      	mov	r3, sp
 800b5a0:	44a3      	add	fp, r4
 800b5a2:	1b1e      	subs	r6, r3, r4
 800b5a4:	465b      	mov	r3, fp
 800b5a6:	46ab      	mov	fp, r5
 800b5a8:	001d      	movs	r5, r3
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800b5aa:	5b32      	ldrh	r2, [r6, r4]
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	0021      	movs	r1, r4
 800b5b0:	2001      	movs	r0, #1
 800b5b2:	f006 f863 	bl	801167c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800b5b6:	484a      	ldr	r0, [pc, #296]	; (800b6e0 <SaveToRO+0x1cc>)
 800b5b8:	f006 f81c 	bl	80115f4 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d12e      	bne.n	800b61e <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	693b      	ldr	r3, [r7, #16]
					currentAdd += 2;
 800b5c4:	3402      	adds	r4, #2
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5c6:	4393      	bics	r3, r2
 800b5c8:	613b      	str	r3, [r7, #16]
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800b5ca:	42ac      	cmp	r4, r5
 800b5cc:	d1ed      	bne.n	800b5aa <SaveToRO+0x96>
 800b5ce:	465d      	mov	r5, fp
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b5d0:	4643      	mov	r3, r8
 800b5d2:	195b      	adds	r3, r3, r5
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	444b      	add	r3, r9
 800b5d8:	2600      	movs	r6, #0
 800b5da:	4698      	mov	r8, r3
 800b5dc:	0025      	movs	r5, r4
 800b5de:	e012      	b.n	800b606 <SaveToRO+0xf2>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 800b5e0:	0073      	lsls	r3, r6, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800b5e2:	5ae2      	ldrh	r2, [r4, r3]
 800b5e4:	0029      	movs	r1, r5
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	2001      	movs	r0, #1
 800b5ea:	f006 f847 	bl	801167c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800b5ee:	483c      	ldr	r0, [pc, #240]	; (800b6e0 <SaveToRO+0x1cc>)
 800b5f0:	f006 f800 	bl	80115f4 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	d112      	bne.n	800b61e <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	693b      	ldr	r3, [r7, #16]
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b5fc:	3601      	adds	r6, #1
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5fe:	4393      	bics	r3, r2
 800b600:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b602:	3502      	adds	r5, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b604:	b2f6      	uxtb	r6, r6
 800b606:	4643      	mov	r3, r8
 800b608:	68dc      	ldr	r4, [r3, #12]
 800b60a:	0020      	movs	r0, r4
 800b60c:	f7f4 fd84 	bl	8000118 <strlen>
 800b610:	3001      	adds	r0, #1
 800b612:	0840      	lsrs	r0, r0, #1
 800b614:	4286      	cmp	r6, r0
 800b616:	d3e3      	bcc.n	800b5e0 <SaveToRO+0xcc>
 800b618:	002c      	movs	r4, r5
 800b61a:	465d      	mov	r5, fp
 800b61c:	e7a6      	b.n	800b56c <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800b61e:	4b36      	ldr	r3, [pc, #216]	; (800b6f8 <SaveToRO+0x1e4>)
 800b620:	69d8      	ldr	r0, [r3, #28]
 800b622:	b2c0      	uxtb	r0, r0
}
 800b624:	b007      	add	sp, #28
 800b626:	bc3c      	pop	{r2, r3, r4, r5}
 800b628:	4690      	mov	r8, r2
 800b62a:	4699      	mov	r9, r3
 800b62c:	46a2      	mov	sl, r4
 800b62e:	46ab      	mov	fp, r5
 800b630:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 800b632:	4a32      	ldr	r2, [pc, #200]	; (800b6fc <SaveToRO+0x1e8>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b634:	4929      	ldr	r1, [pc, #164]	; (800b6dc <SaveToRO+0x1c8>)
		temp = (uint16_t) (N << 8) + myID;
 800b636:	4693      	mov	fp, r2
 800b638:	7812      	ldrb	r2, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b63a:	2001      	movs	r0, #1
		temp = (uint16_t) (N << 8) + myID;
 800b63c:	0212      	lsls	r2, r2, #8
 800b63e:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b640:	b292      	uxth	r2, r2
 800b642:	2300      	movs	r3, #0
 800b644:	f006 f81a 	bl	801167c <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 800b648:	4825      	ldr	r0, [pc, #148]	; (800b6e0 <SaveToRO+0x1cc>)
 800b64a:	f005 ffd3 	bl	80115f4 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b64e:	2800      	cmp	r0, #0
 800b650:	d1e5      	bne.n	800b61e <SaveToRO+0x10a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b652:	2201      	movs	r2, #1
 800b654:	6923      	ldr	r3, [r4, #16]
 800b656:	4393      	bics	r3, r2
 800b658:	6123      	str	r3, [r4, #16]
		for (uint8_t i = 1; i <= N; i++) {
 800b65a:	465b      	mov	r3, fp
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d100      	bne.n	800b664 <SaveToRO+0x150>
 800b662:	e777      	b.n	800b554 <SaveToRO+0x40>
 800b664:	2301      	movs	r3, #1
 800b666:	469a      	mov	sl, r3
 800b668:	4b25      	ldr	r3, [pc, #148]	; (800b700 <SaveToRO+0x1ec>)
	uint16_t add = 2, temp = 0;
 800b66a:	2602      	movs	r6, #2
 800b66c:	4699      	mov	r9, r3
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b66e:	46a0      	mov	r8, r4
 800b670:	4653      	mov	r3, sl
 800b672:	1e5d      	subs	r5, r3, #1
 800b674:	2316      	movs	r3, #22
 800b676:	464f      	mov	r7, r9
 800b678:	435d      	muls	r5, r3
 800b67a:	464b      	mov	r3, r9
 800b67c:	3716      	adds	r7, #22
 800b67e:	195c      	adds	r4, r3, r5
 800b680:	197f      	adds	r7, r7, r5
 800b682:	e002      	b.n	800b68a <SaveToRO+0x176>
 800b684:	3402      	adds	r4, #2
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800b686:	42a7      	cmp	r7, r4
 800b688:	d01a      	beq.n	800b6c0 <SaveToRO+0x1ac>
				if (array[i - 1][0]) {
 800b68a:	464b      	mov	r3, r9
 800b68c:	5b5b      	ldrh	r3, [r3, r5]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d0f8      	beq.n	800b684 <SaveToRO+0x170>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800b692:	4b12      	ldr	r3, [pc, #72]	; (800b6dc <SaveToRO+0x1c8>)
 800b694:	8822      	ldrh	r2, [r4, #0]
 800b696:	18f1      	adds	r1, r6, r3
 800b698:	2001      	movs	r0, #1
 800b69a:	2300      	movs	r3, #0
 800b69c:	f005 ffee 	bl	801167c <HAL_FLASH_Program>
					add += 2;
 800b6a0:	3602      	adds	r6, #2
					FlashStatus = FLASH_WaitForLastOperation(
 800b6a2:	480f      	ldr	r0, [pc, #60]	; (800b6e0 <SaveToRO+0x1cc>)
					add += 2;
 800b6a4:	b2b6      	uxth	r6, r6
					FlashStatus = FLASH_WaitForLastOperation(
 800b6a6:	f005 ffa5 	bl	80115f4 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	d1b7      	bne.n	800b61e <SaveToRO+0x10a>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b6ae:	4643      	mov	r3, r8
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	3402      	adds	r4, #2
 800b6b6:	4393      	bics	r3, r2
 800b6b8:	4642      	mov	r2, r8
 800b6ba:	6113      	str	r3, [r2, #16]
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800b6bc:	42a7      	cmp	r7, r4
 800b6be:	d1e4      	bne.n	800b68a <SaveToRO+0x176>
		for (uint8_t i = 1; i <= N; i++) {
 800b6c0:	4653      	mov	r3, sl
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	469a      	mov	sl, r3
 800b6c8:	465b      	mov	r3, fp
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	4553      	cmp	r3, sl
 800b6ce:	d2cf      	bcs.n	800b670 <SaveToRO+0x15c>
 800b6d0:	e740      	b.n	800b554 <SaveToRO+0x40>
	HAL_FLASH_Lock();
 800b6d2:	f005 ff85 	bl	80115e0 <HAL_FLASH_Lock>
	return result;
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	e7a4      	b.n	800b624 <SaveToRO+0x110>
 800b6da:	46c0      	nop			; (mov r8, r8)
 800b6dc:	0801d800 	.word	0x0801d800
 800b6e0:	0000c350 	.word	0x0000c350
 800b6e4:	40022000 	.word	0x40022000
 800b6e8:	20000a98 	.word	0x20000a98
 800b6ec:	20001140 	.word	0x20001140
 800b6f0:	20006ce8 	.word	0x20006ce8
 800b6f4:	0801dc00 	.word	0x0801dc00
 800b6f8:	200071b8 	.word	0x200071b8
 800b6fc:	20000000 	.word	0x20000000
 800b700:	20000ed4 	.word	0x20000ed4

0800b704 <ClearROtopology>:
	memset(array, 0, sizeof(array));
 800b704:	228f      	movs	r2, #143	; 0x8f
uint8_t ClearROtopology(void) {
 800b706:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800b708:	0092      	lsls	r2, r2, #2
 800b70a:	2100      	movs	r1, #0
 800b70c:	4805      	ldr	r0, [pc, #20]	; (800b724 <ClearROtopology+0x20>)
 800b70e:	f008 fc8f 	bl	8014030 <memset>
	N = 1;
 800b712:	2201      	movs	r2, #1
 800b714:	4b04      	ldr	r3, [pc, #16]	; (800b728 <ClearROtopology+0x24>)
 800b716:	701a      	strb	r2, [r3, #0]
	myID = 0;
 800b718:	2200      	movs	r2, #0
 800b71a:	4b04      	ldr	r3, [pc, #16]	; (800b72c <ClearROtopology+0x28>)
 800b71c:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800b71e:	f7ff fef9 	bl	800b514 <SaveToRO>
}
 800b722:	bd10      	pop	{r4, pc}
 800b724:	20000ed4 	.word	0x20000ed4
 800b728:	20000000 	.word	0x20000000
 800b72c:	20000a98 	.word	0x20000a98

0800b730 <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 800b730:	b510      	push	{r4, lr}
 800b732:	b084      	sub	sp, #16
	MX_USART1_UART_Init();
 800b734:	f002 face 	bl	800dcd4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800b738:	f002 fae4 	bl	800dd04 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800b73c:	f002 fafa 	bl	800dd34 <MX_USART3_UART_Init>
	MX_USART5_UART_Init();
 800b740:	f002 fb10 	bl	800dd64 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800b744:	f002 fb26 	bl	800dd94 <MX_USART6_UART_Init>
	MX_ADC_Init();
 800b748:	f7fc ff98 	bl	800867c <MX_ADC_Init>
	xTaskCreate(MosfetTask,(const char* ) "MosfetTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&MosfetHandle);
 800b74c:	2300      	movs	r3, #0
 800b74e:	4c0e      	ldr	r4, [pc, #56]	; (800b788 <Module_Peripheral_Init+0x58>)
 800b750:	9303      	str	r3, [sp, #12]
 800b752:	9302      	str	r3, [sp, #8]
 800b754:	0023      	movs	r3, r4
 800b756:	3310      	adds	r3, #16
 800b758:	9301      	str	r3, [sp, #4]
 800b75a:	22a0      	movs	r2, #160	; 0xa0
 800b75c:	2303      	movs	r3, #3
 800b75e:	0052      	lsls	r2, r2, #1
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	490a      	ldr	r1, [pc, #40]	; (800b78c <Module_Peripheral_Init+0x5c>)
 800b764:	2300      	movs	r3, #0
 800b766:	480a      	ldr	r0, [pc, #40]	; (800b790 <Module_Peripheral_Init+0x60>)
 800b768:	f003 fc72 	bl	800f050 <xTaskGenericCreate>
	xTimerSwitch =xTimerCreate("SwitchTimer",pdMS_TO_TICKS(1000),pdFALSE,(void* )1,SwitchTimerCallback);
 800b76c:	21fa      	movs	r1, #250	; 0xfa
 800b76e:	4b09      	ldr	r3, [pc, #36]	; (800b794 <Module_Peripheral_Init+0x64>)
 800b770:	2200      	movs	r2, #0
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	0089      	lsls	r1, r1, #2
 800b776:	2301      	movs	r3, #1
 800b778:	4807      	ldr	r0, [pc, #28]	; (800b798 <Module_Peripheral_Init+0x68>)
 800b77a:	f004 f9d3 	bl	800fb24 <xTimerCreate>
 800b77e:	6060      	str	r0, [r4, #4]
	Switch_Init();
 800b780:	f001 fef4 	bl	800d56c <Switch_Init>
}
 800b784:	b004      	add	sp, #16
 800b786:	bd10      	pop	{r4, pc}
 800b788:	200019cc 	.word	0x200019cc
 800b78c:	0801b740 	.word	0x0801b740
 800b790:	0800c131 	.word	0x0800c131
 800b794:	0800bc55 	.word	0x0800bc55
 800b798:	0801b74c 	.word	0x0801b74c

0800b79c <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 800b79c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&onCommandDefinition);
 800b79e:	4c10      	ldr	r4, [pc, #64]	; (800b7e0 <RegisterModuleCLICommands+0x44>)
 800b7a0:	0020      	movs	r0, r4
 800b7a2:	f002 fdc5 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&offCommandDefinition);
 800b7a6:	0020      	movs	r0, r4
 800b7a8:	3010      	adds	r0, #16
 800b7aa:	f002 fdc1 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&toggleCommandDefinition);
 800b7ae:	0020      	movs	r0, r4
 800b7b0:	3020      	adds	r0, #32
 800b7b2:	f002 fdbd 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ledModeCommandDefinition);
 800b7b6:	0020      	movs	r0, r4
 800b7b8:	3030      	adds	r0, #48	; 0x30
 800b7ba:	f002 fdb9 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pwmCommandDefinition);
 800b7be:	0020      	movs	r0, r4
 800b7c0:	3040      	adds	r0, #64	; 0x40
 800b7c2:	f002 fdb5 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&mosfetSampleCommandDefinition);
 800b7c6:	0020      	movs	r0, r4
 800b7c8:	3050      	adds	r0, #80	; 0x50
 800b7ca:	f002 fdb1 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&mosfetStreamCommandDefinition);
 800b7ce:	0020      	movs	r0, r4
 800b7d0:	3060      	adds	r0, #96	; 0x60
 800b7d2:	f002 fdad 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&mosfetStopCommandDefinition);
 800b7d6:	0020      	movs	r0, r4
 800b7d8:	3070      	adds	r0, #112	; 0x70
 800b7da:	f002 fda9 	bl	800e330 <FreeRTOS_CLIRegisterCommand>
}
 800b7de:	bd10      	pop	{r4, pc}
 800b7e0:	08018eb4 	.word	0x08018eb4

0800b7e4 <GetPort>:
	if (huart->Instance == USART5)
 800b7e4:	6800      	ldr	r0, [r0, #0]
 800b7e6:	4b0e      	ldr	r3, [pc, #56]	; (800b820 <GetPort+0x3c>)
 800b7e8:	4298      	cmp	r0, r3
 800b7ea:	d011      	beq.n	800b810 <GetPort+0x2c>
	else if (huart->Instance == USART2)
 800b7ec:	4b0d      	ldr	r3, [pc, #52]	; (800b824 <GetPort+0x40>)
 800b7ee:	4298      	cmp	r0, r3
 800b7f0:	d012      	beq.n	800b818 <GetPort+0x34>
	else if (huart->Instance == USART6)
 800b7f2:	4b0d      	ldr	r3, [pc, #52]	; (800b828 <GetPort+0x44>)
 800b7f4:	4298      	cmp	r0, r3
 800b7f6:	d011      	beq.n	800b81c <GetPort+0x38>
	else if (huart->Instance == USART3)
 800b7f8:	4b0c      	ldr	r3, [pc, #48]	; (800b82c <GetPort+0x48>)
 800b7fa:	4298      	cmp	r0, r3
 800b7fc:	d00a      	beq.n	800b814 <GetPort+0x30>
	return 0;
 800b7fe:	4b0c      	ldr	r3, [pc, #48]	; (800b830 <GetPort+0x4c>)
 800b800:	469c      	mov	ip, r3
 800b802:	4460      	add	r0, ip
 800b804:	4243      	negs	r3, r0
 800b806:	4158      	adcs	r0, r3
 800b808:	2305      	movs	r3, #5
 800b80a:	4240      	negs	r0, r0
 800b80c:	4018      	ands	r0, r3
}
 800b80e:	4770      	bx	lr
		return P1;
 800b810:	2001      	movs	r0, #1
 800b812:	e7fc      	b.n	800b80e <GetPort+0x2a>
		return P4;
 800b814:	2004      	movs	r0, #4
 800b816:	e7fa      	b.n	800b80e <GetPort+0x2a>
		return P2;
 800b818:	2002      	movs	r0, #2
 800b81a:	e7f8      	b.n	800b80e <GetPort+0x2a>
		return P3;
 800b81c:	2003      	movs	r0, #3
 800b81e:	e7f6      	b.n	800b80e <GetPort+0x2a>
 800b820:	40005000 	.word	0x40005000
 800b824:	40004400 	.word	0x40004400
 800b828:	40011400 	.word	0x40011400
 800b82c:	40004800 	.word	0x40004800
 800b830:	bffec800 	.word	0xbffec800

0800b834 <TIM3_Init>:
	__TIM3_CLK_ENABLE()
 800b834:	2302      	movs	r3, #2
void TIM3_Init(void) {
 800b836:	b530      	push	{r4, r5, lr}
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b838:	2500      	movs	r5, #0
	__TIM3_CLK_ENABLE()
 800b83a:	4a24      	ldr	r2, [pc, #144]	; (800b8cc <TIM3_Init+0x98>)
void TIM3_Init(void) {
 800b83c:	b095      	sub	sp, #84	; 0x54
	__TIM3_CLK_ENABLE()
 800b83e:	69d1      	ldr	r1, [r2, #28]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800b840:	4823      	ldr	r0, [pc, #140]	; (800b8d0 <TIM3_Init+0x9c>)
	__TIM3_CLK_ENABLE()
 800b842:	4319      	orrs	r1, r3
 800b844:	61d1      	str	r1, [r2, #28]
 800b846:	69d2      	ldr	r2, [r2, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b848:	9309      	str	r3, [sp, #36]	; 0x24
	__TIM3_CLK_ENABLE()
 800b84a:	401a      	ands	r2, r3
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b84c:	3301      	adds	r3, #1
	__TIM3_CLK_ENABLE()
 800b84e:	9201      	str	r2, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b850:	930b      	str	r3, [sp, #44]	; 0x2c
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800b852:	a908      	add	r1, sp, #32
	GPIO_InitStruct.Pin = _Switch_PIN;
 800b854:	3b02      	subs	r3, #2
 800b856:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800b858:	930c      	str	r3, [sp, #48]	; 0x30
	__TIM3_CLK_ENABLE()
 800b85a:	9a01      	ldr	r2, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b85c:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800b85e:	f005 ffef 	bl	8011840 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b862:	2200      	movs	r2, #0
 800b864:	2100      	movs	r1, #0
 800b866:	2010      	movs	r0, #16
 800b868:	f005 f800 	bl	801086c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b86c:	2010      	movs	r0, #16
 800b86e:	f005 f829 	bl	80108c4 <HAL_NVIC_EnableIRQ>
	htim3.Instance = TIM3;
 800b872:	4c18      	ldr	r4, [pc, #96]	; (800b8d4 <TIM3_Init+0xa0>)
 800b874:	4b18      	ldr	r3, [pc, #96]	; (800b8d8 <TIM3_Init+0xa4>)
 800b876:	6023      	str	r3, [r4, #0]
	htim3.Init.Prescaler = (uint32_t) (HAL_RCC_GetSysClockFreq()
 800b878:	f006 fd52 	bl	8012320 <HAL_RCC_GetSysClockFreq>
 800b87c:	4917      	ldr	r1, [pc, #92]	; (800b8dc <TIM3_Init+0xa8>)
 800b87e:	f7f4 fc67 	bl	8000150 <__udivsi3>
			/ PWM_TIMER_CLOCK) - 1;
 800b882:	3801      	subs	r0, #1
	htim3.Init.Prescaler = (uint32_t) (HAL_RCC_GetSysClockFreq()
 800b884:	6060      	str	r0, [r4, #4]
	HAL_TIM_Base_Init(&htim3);
 800b886:	0020      	movs	r0, r4
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b888:	60a5      	str	r5, [r4, #8]
	htim3.Init.Period = 0;
 800b88a:	60e5      	str	r5, [r4, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b88c:	6125      	str	r5, [r4, #16]
	HAL_TIM_Base_Init(&htim3);
 800b88e:	f007 fadf 	bl	8012e50 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b892:	2380      	movs	r3, #128	; 0x80
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800b894:	a904      	add	r1, sp, #16
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b896:	015b      	lsls	r3, r3, #5
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800b898:	0020      	movs	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b89a:	9304      	str	r3, [sp, #16]
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800b89c:	f007 f9be 	bl	8012c1c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim3);
 800b8a0:	0020      	movs	r0, r4
 800b8a2:	f007 faef 	bl	8012e84 <HAL_TIM_PWM_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800b8a6:	a902      	add	r1, sp, #8
 800b8a8:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b8aa:	9502      	str	r5, [sp, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b8ac:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800b8ae:	f007 fbab 	bl	8013008 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b8b2:	2360      	movs	r3, #96	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _Switch_TIM_CH);
 800b8b4:	2208      	movs	r2, #8
 800b8b6:	a90d      	add	r1, sp, #52	; 0x34
 800b8b8:	0020      	movs	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b8ba:	930d      	str	r3, [sp, #52]	; 0x34
	sConfigOC.Pulse = 0;
 800b8bc:	950e      	str	r5, [sp, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b8be:	950f      	str	r5, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b8c0:	9511      	str	r5, [sp, #68]	; 0x44
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _Switch_TIM_CH);
 800b8c2:	f007 fb39 	bl	8012f38 <HAL_TIM_PWM_ConfigChannel>
}
 800b8c6:	b015      	add	sp, #84	; 0x54
 800b8c8:	bd30      	pop	{r4, r5, pc}
 800b8ca:	46c0      	nop			; (mov r8, r8)
 800b8cc:	40021000 	.word	0x40021000
 800b8d0:	48000400 	.word	0x48000400
 800b8d4:	20006e6c 	.word	0x20006e6c
 800b8d8:	40000400 	.word	0x40000400
 800b8dc:	00f42400 	.word	0x00f42400

0800b8e0 <TIM3_DeInit>:
void TIM3_DeInit(void) {
 800b8e0:	b510      	push	{r4, lr}
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800b8e2:	2010      	movs	r0, #16
 800b8e4:	f004 fff8 	bl	80108d8 <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_DeInit(&htim3);
 800b8e8:	4c06      	ldr	r4, [pc, #24]	; (800b904 <TIM3_DeInit+0x24>)
 800b8ea:	0020      	movs	r0, r4
 800b8ec:	f007 f8d8 	bl	8012aa0 <HAL_TIM_Base_DeInit>
	HAL_TIM_PWM_DeInit(&htim3);
 800b8f0:	0020      	movs	r0, r4
 800b8f2:	f007 f92d 	bl	8012b50 <HAL_TIM_PWM_DeInit>
	__TIM3_CLK_DISABLE();
 800b8f6:	2102      	movs	r1, #2
 800b8f8:	4a03      	ldr	r2, [pc, #12]	; (800b908 <TIM3_DeInit+0x28>)
 800b8fa:	69d3      	ldr	r3, [r2, #28]
 800b8fc:	438b      	bics	r3, r1
 800b8fe:	61d3      	str	r3, [r2, #28]
}
 800b900:	bd10      	pop	{r4, pc}
 800b902:	46c0      	nop			; (mov r8, r8)
 800b904:	20006e6c 	.word	0x20006e6c
 800b908:	40021000 	.word	0x40021000

0800b90c <Set_Switch_PWM>:
Module_Status Set_Switch_PWM(uint32_t freq, float dutycycle) {
 800b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90e:	1c0f      	adds	r7, r1, #0
	uint32_t ARR = PWM_TIMER_CLOCK / freq;
 800b910:	0001      	movs	r1, r0
 800b912:	4813      	ldr	r0, [pc, #76]	; (800b960 <Set_Switch_PWM+0x54>)
 800b914:	f7f4 fc1c 	bl	8000150 <__udivsi3>
	if (Switch_state != STATE_PWM)
 800b918:	4b12      	ldr	r3, [pc, #72]	; (800b964 <Set_Switch_PWM+0x58>)
	uint32_t ARR = PWM_TIMER_CLOCK / freq;
 800b91a:	0006      	movs	r6, r0
	if (Switch_state != STATE_PWM)
 800b91c:	7d1b      	ldrb	r3, [r3, #20]
 800b91e:	2b02      	cmp	r3, #2
 800b920:	d001      	beq.n	800b926 <Set_Switch_PWM+0x1a>
		TIM3_Init();
 800b922:	f7ff ff87 	bl	800b834 <TIM3_Init>
	htim3.Instance->ARR = ARR - 1;
 800b926:	4c10      	ldr	r4, [pc, #64]	; (800b968 <Set_Switch_PWM+0x5c>)
 800b928:	1e73      	subs	r3, r6, #1
 800b92a:	6825      	ldr	r5, [r4, #0]
	htim3.Instance->CCR3 = ((float) dutycycle / 100.0f) * ARR;
 800b92c:	490f      	ldr	r1, [pc, #60]	; (800b96c <Set_Switch_PWM+0x60>)
	htim3.Instance->ARR = ARR - 1;
 800b92e:	62eb      	str	r3, [r5, #44]	; 0x2c
	htim3.Instance->CCR3 = ((float) dutycycle / 100.0f) * ARR;
 800b930:	1c38      	adds	r0, r7, #0
 800b932:	f7f4 ff61 	bl	80007f8 <__aeabi_fdiv>
 800b936:	1c07      	adds	r7, r0, #0
 800b938:	0030      	movs	r0, r6
 800b93a:	f7f5 fc4b 	bl	80011d4 <__aeabi_ui2f>
 800b93e:	1c01      	adds	r1, r0, #0
 800b940:	1c38      	adds	r0, r7, #0
 800b942:	f7f5 f931 	bl	8000ba8 <__aeabi_fmul>
 800b946:	f7f4 fe3b 	bl	80005c0 <__aeabi_f2uiz>
	if (HAL_TIM_PWM_Start(&htim3, _Switch_TIM_CH) != HAL_OK)
 800b94a:	2108      	movs	r1, #8
	htim3.Instance->CCR3 = ((float) dutycycle / 100.0f) * ARR;
 800b94c:	63e8      	str	r0, [r5, #60]	; 0x3c
	if (HAL_TIM_PWM_Start(&htim3, _Switch_TIM_CH) != HAL_OK)
 800b94e:	0020      	movs	r0, r4
 800b950:	f007 f91e 	bl	8012b90 <HAL_TIM_PWM_Start>
 800b954:	1e43      	subs	r3, r0, #1
 800b956:	4198      	sbcs	r0, r3
 800b958:	4240      	negs	r0, r0
 800b95a:	b2c0      	uxtb	r0, r0
}
 800b95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b95e:	46c0      	nop			; (mov r8, r8)
 800b960:	00f42400 	.word	0x00f42400
 800b964:	200019cc 	.word	0x200019cc
 800b968:	20006e6c 	.word	0x20006e6c
 800b96c:	42c80000 	.word	0x42c80000

0800b970 <Output_PWM.part.2>:
Module_Status Output_PWM(float dutyCycle) {
 800b970:	b570      	push	{r4, r5, r6, lr}
	result = Set_Switch_PWM(Switch_PWM_DEF_FREQ, dutyCycle);
 800b972:	1c01      	adds	r1, r0, #0
Module_Status Output_PWM(float dutyCycle) {
 800b974:	1c05      	adds	r5, r0, #0
	result = Set_Switch_PWM(Switch_PWM_DEF_FREQ, dutyCycle);
 800b976:	480c      	ldr	r0, [pc, #48]	; (800b9a8 <Output_PWM.part.2+0x38>)
 800b978:	f7ff ffc8 	bl	800b90c <Set_Switch_PWM>
 800b97c:	1e04      	subs	r4, r0, #0
	if (result == H0FRx_OK) {
 800b97e:	d109      	bne.n	800b994 <Output_PWM.part.2+0x24>
		Switch_state = STATE_PWM;
 800b980:	2202      	movs	r2, #2
		Switch_OldDC = dutyCycle;
 800b982:	4b0a      	ldr	r3, [pc, #40]	; (800b9ac <Output_PWM.part.2+0x3c>)
		Switch_Oldstate = Switch_state;
 800b984:	490a      	ldr	r1, [pc, #40]	; (800b9b0 <Output_PWM.part.2+0x40>)
		Switch_OldDC = dutyCycle;
 800b986:	601d      	str	r5, [r3, #0]
		Switch_state = STATE_PWM;
 800b988:	4b0a      	ldr	r3, [pc, #40]	; (800b9b4 <Output_PWM.part.2+0x44>)
		Switch_Oldstate = Switch_state;
 800b98a:	700a      	strb	r2, [r1, #0]
		Switch_state = STATE_PWM;
 800b98c:	751a      	strb	r2, [r3, #20]
		if (SwitchindMode)
 800b98e:	7a1b      	ldrb	r3, [r3, #8]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d101      	bne.n	800b998 <Output_PWM.part.2+0x28>
}
 800b994:	0020      	movs	r0, r4
 800b996:	bd70      	pop	{r4, r5, r6, pc}
			IND_ON();
 800b998:	2180      	movs	r1, #128	; 0x80
 800b99a:	2090      	movs	r0, #144	; 0x90
 800b99c:	3a01      	subs	r2, #1
 800b99e:	0109      	lsls	r1, r1, #4
 800b9a0:	05c0      	lsls	r0, r0, #23
 800b9a2:	f006 f8ed 	bl	8011b80 <HAL_GPIO_WritePin>
 800b9a6:	e7f5      	b.n	800b994 <Output_PWM.part.2+0x24>
 800b9a8:	00005dc0 	.word	0x00005dc0
 800b9ac:	20006e64 	.word	0x20006e64
 800b9b0:	2000008c 	.word	0x2000008c
 800b9b4:	200019cc 	.word	0x200019cc

0800b9b8 <pwmCommand>:
portBASE_TYPE pwmCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
	Module_Status result = H0FRx_OK;

	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800b9b8:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800b9ba:	b530      	push	{r4, r5, lr}
 800b9bc:	b083      	sub	sp, #12
 800b9be:	0005      	movs	r5, r0
	portBASE_TYPE xParameterStringLength1 = 0;
 800b9c0:	9301      	str	r3, [sp, #4]
		const int8_t *pcCommandString) {
 800b9c2:	0010      	movs	r0, r2

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800b9c4:	2d00      	cmp	r5, #0
 800b9c6:	d01b      	beq.n	800ba00 <pwmCommand+0x48>

	/* Obtain the 1st parameter string. */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800b9c8:	aa01      	add	r2, sp, #4
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	f002 fd48 	bl	800e460 <FreeRTOS_CLIGetParameter>
	1, /* Return the first parameter. */
	&xParameterStringLength1 /* Store the parameter string length. */
	);

	dutycycle = (float) atof((char*) pcParameterString1);
 800b9d0:	f008 f85a 	bl	8013a88 <atof>
 800b9d4:	f7f7 fa2e 	bl	8002e34 <__aeabi_d2f>

	if (dutycycle < 0.0f || dutycycle > 100.0f)
 800b9d8:	2100      	movs	r1, #0
	dutycycle = (float) atof((char*) pcParameterString1);
 800b9da:	1c04      	adds	r4, r0, #0
	if (dutycycle < 0.0f || dutycycle > 100.0f)
 800b9dc:	f7f4 fd7e 	bl	80004dc <__aeabi_fcmplt>
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	d105      	bne.n	800b9f0 <pwmCommand+0x38>
 800b9e4:	4910      	ldr	r1, [pc, #64]	; (800ba28 <pwmCommand+0x70>)
 800b9e6:	1c20      	adds	r0, r4, #0
 800b9e8:	f7f4 fd8c 	bl	8000504 <__aeabi_fcmpgt>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d009      	beq.n	800ba04 <pwmCommand+0x4c>

	/* Respond to the command */
	if (result == H0FRx_OK) {
		sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, dutycycle);
	} else if (result == H0FRx_ERR_Wrong_Value) {
		strcpy((char*) pcWriteBuffer, (char*) pcWrongValue);
 800b9f0:	2237      	movs	r2, #55	; 0x37
 800b9f2:	490e      	ldr	r1, [pc, #56]	; (800ba2c <pwmCommand+0x74>)
 800b9f4:	0028      	movs	r0, r5
 800b9f6:	f008 fb12 	bl	801401e <memcpy>
	}

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	b003      	add	sp, #12
 800b9fe:	bd30      	pop	{r4, r5, pc}
	configASSERT(pcWriteBuffer);
 800ba00:	b672      	cpsid	i
 800ba02:	e7fe      	b.n	800ba02 <pwmCommand+0x4a>
 800ba04:	1c20      	adds	r0, r4, #0
 800ba06:	f7ff ffb3 	bl	800b970 <Output_PWM.part.2>
	if (result == H0FRx_OK) {
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	d002      	beq.n	800ba14 <pwmCommand+0x5c>
	} else if (result == H0FRx_ERR_Wrong_Value) {
 800ba0e:	2802      	cmp	r0, #2
 800ba10:	d1f3      	bne.n	800b9fa <pwmCommand+0x42>
 800ba12:	e7ed      	b.n	800b9f0 <pwmCommand+0x38>
		sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, dutycycle);
 800ba14:	1c20      	adds	r0, r4, #0
 800ba16:	f7f7 f9bb 	bl	8002d90 <__aeabi_f2d>
 800ba1a:	0002      	movs	r2, r0
 800ba1c:	000b      	movs	r3, r1
 800ba1e:	0028      	movs	r0, r5
 800ba20:	4903      	ldr	r1, [pc, #12]	; (800ba30 <pwmCommand+0x78>)
 800ba22:	f008 fcff 	bl	8014424 <sprintf>
 800ba26:	e7e8      	b.n	800b9fa <pwmCommand+0x42>
 800ba28:	42c80000 	.word	0x42c80000
 800ba2c:	0801b758 	.word	0x0801b758
 800ba30:	0801b790 	.word	0x0801b790

0800ba34 <Output_on>:
Module_Status Output_on(uint32_t timeout) {
 800ba34:	b530      	push	{r4, r5, lr}
	if (Switch_state == STATE_PWM) {
 800ba36:	4c23      	ldr	r4, [pc, #140]	; (800bac4 <Output_on+0x90>)
Module_Status Output_on(uint32_t timeout) {
 800ba38:	b083      	sub	sp, #12
	if (Switch_state == STATE_PWM) {
 800ba3a:	7d23      	ldrb	r3, [r4, #20]
Module_Status Output_on(uint32_t timeout) {
 800ba3c:	0005      	movs	r5, r0
	if (Switch_state == STATE_PWM) {
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d02e      	beq.n	800baa0 <Output_on+0x6c>
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 800ba42:	2201      	movs	r2, #1
 800ba44:	2101      	movs	r1, #1
 800ba46:	4820      	ldr	r0, [pc, #128]	; (800bac8 <Output_on+0x94>)
 800ba48:	f006 f89a 	bl	8011b80 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800ba4c:	7a23      	ldrb	r3, [r4, #8]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d11e      	bne.n	800ba90 <Output_on+0x5c>
	if (timeout != portMAX_DELAY) {
 800ba52:	1c6b      	adds	r3, r5, #1
 800ba54:	d015      	beq.n	800ba82 <Output_on+0x4e>
		if (xTimerIsTimerActive(xTimerSwitch))
 800ba56:	6860      	ldr	r0, [r4, #4]
 800ba58:	f004 f9bc 	bl	800fdd4 <xTimerIsTimerActive>
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	d128      	bne.n	800bab2 <Output_on+0x7e>
		xTimerChangePeriod(xTimerSwitch, pdMS_TO_TICKS(timeout), 100);
 800ba60:	21fa      	movs	r1, #250	; 0xfa
 800ba62:	0168      	lsls	r0, r5, #5
 800ba64:	1b40      	subs	r0, r0, r5
 800ba66:	0080      	lsls	r0, r0, #2
 800ba68:	1940      	adds	r0, r0, r5
 800ba6a:	0089      	lsls	r1, r1, #2
 800ba6c:	00c0      	lsls	r0, r0, #3
 800ba6e:	f7f4 fb6f 	bl	8000150 <__udivsi3>
 800ba72:	2364      	movs	r3, #100	; 0x64
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	0002      	movs	r2, r0
 800ba78:	2300      	movs	r3, #0
 800ba7a:	2104      	movs	r1, #4
 800ba7c:	6860      	ldr	r0, [r4, #4]
 800ba7e:	f004 f871 	bl	800fb64 <xTimerGenericCommand>
	Switch_state = STATE_ON;
 800ba82:	2301      	movs	r3, #1
}
 800ba84:	2000      	movs	r0, #0
	Switch_Oldstate = Switch_state;
 800ba86:	4a11      	ldr	r2, [pc, #68]	; (800bacc <Output_on+0x98>)
	Switch_state = STATE_ON;
 800ba88:	7523      	strb	r3, [r4, #20]
	Switch_Oldstate = Switch_state;
 800ba8a:	7013      	strb	r3, [r2, #0]
}
 800ba8c:	b003      	add	sp, #12
 800ba8e:	bd30      	pop	{r4, r5, pc}
		IND_ON();
 800ba90:	2180      	movs	r1, #128	; 0x80
 800ba92:	2090      	movs	r0, #144	; 0x90
 800ba94:	2201      	movs	r2, #1
 800ba96:	0109      	lsls	r1, r1, #4
 800ba98:	05c0      	lsls	r0, r0, #23
 800ba9a:	f006 f871 	bl	8011b80 <HAL_GPIO_WritePin>
 800ba9e:	e7d8      	b.n	800ba52 <Output_on+0x1e>
		HAL_TIM_PWM_Stop(&htim3, _Switch_TIM_CH);
 800baa0:	2108      	movs	r1, #8
 800baa2:	480b      	ldr	r0, [pc, #44]	; (800bad0 <Output_on+0x9c>)
 800baa4:	f007 f878 	bl	8012b98 <HAL_TIM_PWM_Stop>
		TIM3_DeInit();
 800baa8:	f7ff ff1a 	bl	800b8e0 <TIM3_DeInit>
		Switch_Init();
 800baac:	f001 fd5e 	bl	800d56c <Switch_Init>
 800bab0:	e7c7      	b.n	800ba42 <Output_on+0xe>
			xTimerStop(xTimerSwitch, 100);
 800bab2:	2364      	movs	r3, #100	; 0x64
 800bab4:	9300      	str	r3, [sp, #0]
 800bab6:	2200      	movs	r2, #0
 800bab8:	2300      	movs	r3, #0
 800baba:	2103      	movs	r1, #3
 800babc:	6860      	ldr	r0, [r4, #4]
 800babe:	f004 f851 	bl	800fb64 <xTimerGenericCommand>
 800bac2:	e7cd      	b.n	800ba60 <Output_on+0x2c>
 800bac4:	200019cc 	.word	0x200019cc
 800bac8:	48000400 	.word	0x48000400
 800bacc:	2000008c 	.word	0x2000008c
 800bad0:	20006e6c 	.word	0x20006e6c

0800bad4 <Current_Calculation>:
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bad4:	2380      	movs	r3, #128	; 0x80
static float Current_Calculation(void) {
 800bad6:	b5f0      	push	{r4, r5, r6, r7, lr}
	ADC_ChannelConfTypeDef sConfig ={0};
 800bad8:	2700      	movs	r7, #0
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bada:	2603      	movs	r6, #3
	HAL_ADC_ConfigChannel(&hadc,&sConfig);
 800badc:	4c19      	ldr	r4, [pc, #100]	; (800bb44 <Current_Calculation+0x70>)
static float Current_Calculation(void) {
 800bade:	b085      	sub	sp, #20
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bae0:	015b      	lsls	r3, r3, #5
	HAL_ADC_ConfigChannel(&hadc,&sConfig);
 800bae2:	a901      	add	r1, sp, #4
 800bae4:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bae6:	9302      	str	r3, [sp, #8]
	ADC_ChannelConfTypeDef sConfig ={0};
 800bae8:	9701      	str	r7, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800baea:	9603      	str	r6, [sp, #12]
	HAL_ADC_ConfigChannel(&hadc,&sConfig);
 800baec:	f004 fde0 	bl	80106b0 <HAL_ADC_ConfigChannel>
	Output_on(3000);
 800baf0:	4815      	ldr	r0, [pc, #84]	; (800bb48 <Current_Calculation+0x74>)
 800baf2:	f7ff ff9f 	bl	800ba34 <Output_on>
	Delay_ms(1000);
 800baf6:	20fa      	movs	r0, #250	; 0xfa
 800baf8:	0080      	lsls	r0, r0, #2
 800bafa:	f004 fb31 	bl	8010160 <HAL_Delay>
	HAL_ADC_Start(&hadc);
 800bafe:	0020      	movs	r0, r4
 800bb00:	f004 fcaa 	bl	8010458 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,10);
 800bb04:	210a      	movs	r1, #10
 800bb06:	0020      	movs	r0, r4
 800bb08:	f004 fcf2 	bl	80104f0 <HAL_ADC_PollForConversion>
	rawValues =HAL_ADC_GetValue(&hadc);
 800bb0c:	0020      	movs	r0, r4
 800bb0e:	f004 fd53 	bl	80105b8 <HAL_ADC_GetValue>
 800bb12:	4d0e      	ldr	r5, [pc, #56]	; (800bb4c <Current_Calculation+0x78>)
 800bb14:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 800bb16:	0020      	movs	r0, r4
 800bb18:	f004 fcca 	bl	80104b0 <HAL_ADC_Stop>
	sConfig.Rank = ADC_RANK_NONE;
 800bb1c:	4b0c      	ldr	r3, [pc, #48]	; (800bb50 <Current_Calculation+0x7c>)
	HAL_ADC_ConfigChannel(&hadc,&sConfig);
 800bb1e:	a901      	add	r1, sp, #4
 800bb20:	0020      	movs	r0, r4
	sConfig.Rank = ADC_RANK_NONE;
 800bb22:	9302      	str	r3, [sp, #8]
	sConfig.Channel = ADC_CHANNEL_0;
 800bb24:	9701      	str	r7, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bb26:	9603      	str	r6, [sp, #12]
	HAL_ADC_ConfigChannel(&hadc,&sConfig);
 800bb28:	f004 fdc2 	bl	80106b0 <HAL_ADC_ConfigChannel>
	return (rawValues * ADC_CONVERSION);
 800bb2c:	6828      	ldr	r0, [r5, #0]
 800bb2e:	f7f7 f8fd 	bl	8002d2c <__aeabi_ui2d>
 800bb32:	4a08      	ldr	r2, [pc, #32]	; (800bb54 <Current_Calculation+0x80>)
 800bb34:	4b08      	ldr	r3, [pc, #32]	; (800bb58 <Current_Calculation+0x84>)
 800bb36:	f7f6 fab3 	bl	80020a0 <__aeabi_dmul>
 800bb3a:	f7f7 f97b 	bl	8002e34 <__aeabi_d2f>
}
 800bb3e:	b005      	add	sp, #20
 800bb40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb42:	46c0      	nop			; (mov r8, r8)
 800bb44:	20006d84 	.word	0x20006d84
 800bb48:	00000bb8 	.word	0x00000bb8
 800bb4c:	20006dec 	.word	0x20006dec
 800bb50:	00001001 	.word	0x00001001
 800bb54:	a5119ce0 	.word	0xa5119ce0
 800bb58:	3f77c1bd 	.word	0x3f77c1bd

0800bb5c <mosfetSampleCommand>:
#endif
/*-----------------------------------------------------------*/

#ifdef H0FR7
static portBASE_TYPE mosfetSampleCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800bb5c:	b510      	push	{r4, lr}
 800bb5e:	1e04      	subs	r4, r0, #0

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800bb60:	d101      	bne.n	800bb66 <mosfetSampleCommand+0xa>
 800bb62:	b672      	cpsid	i
 800bb64:	e7fe      	b.n	800bb64 <mosfetSampleCommand+0x8>

	/* Obtain the value. */
	Current = Current_Calculation();
 800bb66:	f7ff ffb5 	bl	800bad4 <Current_Calculation>

	/* Respond to the command */
	sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, Current);
 800bb6a:	f7f7 f911 	bl	8002d90 <__aeabi_f2d>
 800bb6e:	0002      	movs	r2, r0
 800bb70:	000b      	movs	r3, r1
 800bb72:	0020      	movs	r0, r4
 800bb74:	4902      	ldr	r1, [pc, #8]	; (800bb80 <mosfetSampleCommand+0x24>)
 800bb76:	f008 fc55 	bl	8014424 <sprintf>

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	bd10      	pop	{r4, pc}
 800bb7e:	46c0      	nop			; (mov r8, r8)
 800bb80:	0801b7d8 	.word	0x0801b7d8

0800bb84 <onCommand>:
	portBASE_TYPE xParameterStringLength1 = 0;
 800bb84:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800bb86:	b530      	push	{r4, r5, lr}
 800bb88:	b083      	sub	sp, #12
 800bb8a:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 = 0;
 800bb8c:	9301      	str	r3, [sp, #4]
		const int8_t *pcCommandString) {
 800bb8e:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 800bb90:	2c00      	cmp	r4, #0
 800bb92:	d02d      	beq.n	800bbf0 <onCommand+0x6c>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800bb94:	2101      	movs	r1, #1
 800bb96:	aa01      	add	r2, sp, #4
 800bb98:	f002 fc62 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if (!strcmp((char*) pcParameterString1, "inf")
 800bb9c:	4915      	ldr	r1, [pc, #84]	; (800bbf4 <onCommand+0x70>)
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800bb9e:	0005      	movs	r5, r0
	if (!strcmp((char*) pcParameterString1, "inf")
 800bba0:	f7f4 fab0 	bl	8000104 <strcmp>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d10d      	bne.n	800bbc4 <onCommand+0x40>
	result = Output_on(timeout);
 800bba8:	2001      	movs	r0, #1
 800bbaa:	4240      	negs	r0, r0
 800bbac:	f7ff ff42 	bl	800ba34 <Output_on>
	if (result == H0FRx_OK) {
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d104      	bne.n	800bbbe <onCommand+0x3a>
			strcpy((char*) pcWriteBuffer, (char*) pcOKMessageInf);
 800bbb4:	2232      	movs	r2, #50	; 0x32
 800bbb6:	4910      	ldr	r1, [pc, #64]	; (800bbf8 <onCommand+0x74>)
 800bbb8:	0020      	movs	r0, r4
 800bbba:	f008 fa30 	bl	801401e <memcpy>
}
 800bbbe:	2000      	movs	r0, #0
 800bbc0:	b003      	add	sp, #12
 800bbc2:	bd30      	pop	{r4, r5, pc}
			|| !strcmp((char*) pcParameterString1, "INF"))
 800bbc4:	490d      	ldr	r1, [pc, #52]	; (800bbfc <onCommand+0x78>)
 800bbc6:	0028      	movs	r0, r5
 800bbc8:	f7f4 fa9c 	bl	8000104 <strcmp>
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	d0eb      	beq.n	800bba8 <onCommand+0x24>
		timeout = (uint32_t) atol((char*) pcParameterString1);
 800bbd0:	0028      	movs	r0, r5
 800bbd2:	f007 ff64 	bl	8013a9e <atol>
 800bbd6:	0005      	movs	r5, r0
	result = Output_on(timeout);
 800bbd8:	f7ff ff2c 	bl	800ba34 <Output_on>
	if (result == H0FRx_OK) {
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d1ee      	bne.n	800bbbe <onCommand+0x3a>
		if (timeout != portMAX_DELAY) {
 800bbe0:	1c6b      	adds	r3, r5, #1
 800bbe2:	d0e7      	beq.n	800bbb4 <onCommand+0x30>
			sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, timeout);
 800bbe4:	002a      	movs	r2, r5
 800bbe6:	4906      	ldr	r1, [pc, #24]	; (800bc00 <onCommand+0x7c>)
 800bbe8:	0020      	movs	r0, r4
 800bbea:	f008 fc1b 	bl	8014424 <sprintf>
 800bbee:	e7e6      	b.n	800bbbe <onCommand+0x3a>
	configASSERT(pcWriteBuffer);
 800bbf0:	b672      	cpsid	i
 800bbf2:	e7fe      	b.n	800bbf2 <onCommand+0x6e>
 800bbf4:	0801b7ec 	.word	0x0801b7ec
 800bbf8:	0801b82c 	.word	0x0801b82c
 800bbfc:	0801b7f0 	.word	0x0801b7f0
 800bc00:	0801b7f4 	.word	0x0801b7f4

0800bc04 <Output_off>:
Module_Status Output_off(void) {
 800bc04:	b510      	push	{r4, lr}
	if (Switch_state == STATE_PWM) {
 800bc06:	4c10      	ldr	r4, [pc, #64]	; (800bc48 <Output_off+0x44>)
 800bc08:	7d23      	ldrb	r3, [r4, #20]
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	d012      	beq.n	800bc34 <Output_off+0x30>
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_RESET);
 800bc0e:	2200      	movs	r2, #0
 800bc10:	2101      	movs	r1, #1
 800bc12:	480e      	ldr	r0, [pc, #56]	; (800bc4c <Output_off+0x48>)
 800bc14:	f005 ffb4 	bl	8011b80 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800bc18:	7a23      	ldrb	r3, [r4, #8]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d006      	beq.n	800bc2c <Output_off+0x28>
		IND_OFF();
 800bc1e:	2180      	movs	r1, #128	; 0x80
 800bc20:	2090      	movs	r0, #144	; 0x90
 800bc22:	2200      	movs	r2, #0
 800bc24:	0109      	lsls	r1, r1, #4
 800bc26:	05c0      	lsls	r0, r0, #23
 800bc28:	f005 ffaa 	bl	8011b80 <HAL_GPIO_WritePin>
	Switch_state = STATE_OFF;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	2000      	movs	r0, #0
	Switch_state = STATE_OFF;
 800bc30:	7523      	strb	r3, [r4, #20]
}
 800bc32:	bd10      	pop	{r4, pc}
		HAL_TIM_PWM_Stop(&htim3, _Switch_TIM_CH);
 800bc34:	2108      	movs	r1, #8
 800bc36:	4806      	ldr	r0, [pc, #24]	; (800bc50 <Output_off+0x4c>)
 800bc38:	f006 ffae 	bl	8012b98 <HAL_TIM_PWM_Stop>
		TIM3_DeInit();
 800bc3c:	f7ff fe50 	bl	800b8e0 <TIM3_DeInit>
		Switch_Init();
 800bc40:	f001 fc94 	bl	800d56c <Switch_Init>
 800bc44:	e7e3      	b.n	800bc0e <Output_off+0xa>
 800bc46:	46c0      	nop			; (mov r8, r8)
 800bc48:	200019cc 	.word	0x200019cc
 800bc4c:	48000400 	.word	0x48000400
 800bc50:	20006e6c 	.word	0x20006e6c

0800bc54 <SwitchTimerCallback>:
void SwitchTimerCallback(TimerHandle_t xTimerSwitch) {
 800bc54:	b510      	push	{r4, lr}
 800bc56:	0004      	movs	r4, r0
	Output_off();
 800bc58:	f7ff ffd4 	bl	800bc04 <Output_off>
	HAL_ADC_Stop(&hadc);
 800bc5c:	4806      	ldr	r0, [pc, #24]	; (800bc78 <SwitchTimerCallback+0x24>)
 800bc5e:	f004 fc27 	bl	80104b0 <HAL_ADC_Stop>
	tid = (uint32_t) pvTimerGetTimerID(xTimerSwitch);
 800bc62:	0020      	movs	r0, r4
 800bc64:	f004 f8c2 	bl	800fdec <pvTimerGetTimerID>
	if (TIMERID_TIMEOUT_MEASUREMENT == tid) {
 800bc68:	28ff      	cmp	r0, #255	; 0xff
 800bc6a:	d104      	bne.n	800bc76 <SwitchTimerCallback+0x22>
		startMeasurement = STOP_MEASUREMENT;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4a03      	ldr	r2, [pc, #12]	; (800bc7c <SwitchTimerCallback+0x28>)
 800bc70:	7553      	strb	r3, [r2, #21]
		mosfetMode = REQ_IDLE;		// Stop the streaming task
 800bc72:	4a03      	ldr	r2, [pc, #12]	; (800bc80 <SwitchTimerCallback+0x2c>)
 800bc74:	7013      	strb	r3, [r2, #0]
}
 800bc76:	bd10      	pop	{r4, pc}
 800bc78:	20006d84 	.word	0x20006d84
 800bc7c:	200019cc 	.word	0x200019cc
 800bc80:	2000700c 	.word	0x2000700c

0800bc84 <offCommand>:
		const int8_t *pcCommandString) {
 800bc84:	b510      	push	{r4, lr}
 800bc86:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800bc88:	d005      	beq.n	800bc96 <offCommand+0x12>
	result = Output_off();
 800bc8a:	f7ff ffbb 	bl	800bc04 <Output_off>
	if (result == H0FRx_OK) {
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d003      	beq.n	800bc9a <offCommand+0x16>
}
 800bc92:	2000      	movs	r0, #0
 800bc94:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800bc96:	b672      	cpsid	i
 800bc98:	e7fe      	b.n	800bc98 <offCommand+0x14>
		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800bc9a:	2223      	movs	r2, #35	; 0x23
 800bc9c:	4902      	ldr	r1, [pc, #8]	; (800bca8 <offCommand+0x24>)
 800bc9e:	0020      	movs	r0, r4
 800bca0:	f008 f9bd 	bl	801401e <memcpy>
 800bca4:	e7f5      	b.n	800bc92 <offCommand+0xe>
 800bca6:	46c0      	nop			; (mov r8, r8)
 800bca8:	0801b860 	.word	0x0801b860

0800bcac <Output_toggle>:
	if (Switch_state) {
 800bcac:	4b15      	ldr	r3, [pc, #84]	; (800bd04 <Output_toggle+0x58>)
Module_Status Output_toggle(void) {
 800bcae:	b510      	push	{r4, lr}
	if (Switch_state) {
 800bcb0:	7d1b      	ldrb	r3, [r3, #20]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d11b      	bne.n	800bcee <Output_toggle+0x42>
		if (Switch_Oldstate == STATE_ON)
 800bcb6:	4b14      	ldr	r3, [pc, #80]	; (800bd08 <Output_toggle+0x5c>)
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d01a      	beq.n	800bcf4 <Output_toggle+0x48>
	Module_Status result = H0FRx_OK;
 800bcbe:	2000      	movs	r0, #0
		else if (Switch_Oldstate == STATE_PWM)
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d000      	beq.n	800bcc6 <Output_toggle+0x1a>
}
 800bcc4:	bd10      	pop	{r4, pc}
			result = Output_PWM(Switch_OldDC);
 800bcc6:	4b11      	ldr	r3, [pc, #68]	; (800bd0c <Output_toggle+0x60>)
	if (dutyCycle < 0 || dutyCycle > 100)
 800bcc8:	2100      	movs	r1, #0
			result = Output_PWM(Switch_OldDC);
 800bcca:	681c      	ldr	r4, [r3, #0]
	if (dutyCycle < 0 || dutyCycle > 100)
 800bccc:	1c20      	adds	r0, r4, #0
 800bcce:	f7f4 fc05 	bl	80004dc <__aeabi_fcmplt>
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d113      	bne.n	800bcfe <Output_toggle+0x52>
 800bcd6:	490e      	ldr	r1, [pc, #56]	; (800bd10 <Output_toggle+0x64>)
 800bcd8:	1c20      	adds	r0, r4, #0
 800bcda:	f7f4 fc13 	bl	8000504 <__aeabi_fcmpgt>
 800bcde:	0003      	movs	r3, r0
		return H0FRx_ERR_Wrong_Value;
 800bce0:	2002      	movs	r0, #2
	if (dutyCycle < 0 || dutyCycle > 100)
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1ee      	bne.n	800bcc4 <Output_toggle+0x18>
 800bce6:	1c20      	adds	r0, r4, #0
 800bce8:	f7ff fe42 	bl	800b970 <Output_PWM.part.2>
 800bcec:	e7ea      	b.n	800bcc4 <Output_toggle+0x18>
		result = Output_off();
 800bcee:	f7ff ff89 	bl	800bc04 <Output_off>
 800bcf2:	e7e7      	b.n	800bcc4 <Output_toggle+0x18>
			result = Output_on(portMAX_DELAY);
 800bcf4:	2001      	movs	r0, #1
 800bcf6:	4240      	negs	r0, r0
 800bcf8:	f7ff fe9c 	bl	800ba34 <Output_on>
 800bcfc:	e7e2      	b.n	800bcc4 <Output_toggle+0x18>
		return H0FRx_ERR_Wrong_Value;
 800bcfe:	2002      	movs	r0, #2
 800bd00:	e7e0      	b.n	800bcc4 <Output_toggle+0x18>
 800bd02:	46c0      	nop			; (mov r8, r8)
 800bd04:	200019cc 	.word	0x200019cc
 800bd08:	2000008c 	.word	0x2000008c
 800bd0c:	20006e64 	.word	0x20006e64
 800bd10:	42c80000 	.word	0x42c80000

0800bd14 <toggleCommand>:
		const int8_t *pcCommandString) {
 800bd14:	b510      	push	{r4, lr}
 800bd16:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800bd18:	d00e      	beq.n	800bd38 <toggleCommand+0x24>
	result = Output_toggle();
 800bd1a:	f7ff ffc7 	bl	800bcac <Output_toggle>
	if (result == H0FRx_OK) {
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	d108      	bne.n	800bd34 <toggleCommand+0x20>
		if (Switch_state) {
 800bd22:	4b09      	ldr	r3, [pc, #36]	; (800bd48 <toggleCommand+0x34>)
 800bd24:	7d1b      	ldrb	r3, [r3, #20]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d108      	bne.n	800bd3c <toggleCommand+0x28>
			strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 800bd2a:	2223      	movs	r2, #35	; 0x23
 800bd2c:	4907      	ldr	r1, [pc, #28]	; (800bd4c <toggleCommand+0x38>)
 800bd2e:	0020      	movs	r0, r4
 800bd30:	f008 f975 	bl	801401e <memcpy>
}
 800bd34:	2000      	movs	r0, #0
 800bd36:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800bd38:	b672      	cpsid	i
 800bd3a:	e7fe      	b.n	800bd3a <toggleCommand+0x26>
			strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 800bd3c:	2222      	movs	r2, #34	; 0x22
 800bd3e:	4904      	ldr	r1, [pc, #16]	; (800bd50 <toggleCommand+0x3c>)
 800bd40:	0020      	movs	r0, r4
 800bd42:	f008 f96c 	bl	801401e <memcpy>
 800bd46:	e7f5      	b.n	800bd34 <toggleCommand+0x20>
 800bd48:	200019cc 	.word	0x200019cc
 800bd4c:	0801b860 	.word	0x0801b860
 800bd50:	0801b884 	.word	0x0801b884

0800bd54 <Stream_current_To_CLI>:
	mosfetMode = REQ_STREAM_PORT_CLI;
 800bd54:	2205      	movs	r2, #5
float Stream_current_To_CLI(uint32_t Period, uint32_t Timeout) {
 800bd56:	b530      	push	{r4, r5, lr}
	mosfetPeriod = Period;
 800bd58:	4b19      	ldr	r3, [pc, #100]	; (800bdc0 <Stream_current_To_CLI+0x6c>)
	mosfetTimeout = Timeout;
 800bd5a:	4c1a      	ldr	r4, [pc, #104]	; (800bdc4 <Stream_current_To_CLI+0x70>)
	mosfetPeriod = Period;
 800bd5c:	6018      	str	r0, [r3, #0]
	mosfetMode = REQ_STREAM_PORT_CLI;
 800bd5e:	4b1a      	ldr	r3, [pc, #104]	; (800bdc8 <Stream_current_To_CLI+0x74>)
float Stream_current_To_CLI(uint32_t Period, uint32_t Timeout) {
 800bd60:	b083      	sub	sp, #12
	mosfetMode = REQ_STREAM_PORT_CLI;
 800bd62:	701a      	strb	r2, [r3, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800bd64:	1e4b      	subs	r3, r1, #1
	mosfetTimeout = Timeout;
 800bd66:	6021      	str	r1, [r4, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800bd68:	3303      	adds	r3, #3
 800bd6a:	d907      	bls.n	800bd7c <Stream_current_To_CLI+0x28>
	if (mosfetTimeout > 0) {
 800bd6c:	2900      	cmp	r1, #0
 800bd6e:	d002      	beq.n	800bd76 <Stream_current_To_CLI+0x22>
		startMeasurement = START_MEASUREMENT;
 800bd70:	2201      	movs	r2, #1
 800bd72:	4b16      	ldr	r3, [pc, #88]	; (800bdcc <Stream_current_To_CLI+0x78>)
 800bd74:	755a      	strb	r2, [r3, #21]
}
 800bd76:	2000      	movs	r0, #0
 800bd78:	b003      	add	sp, #12
 800bd7a:	bd30      	pop	{r4, r5, pc}
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 800bd7c:	0148      	lsls	r0, r1, #5
 800bd7e:	1a40      	subs	r0, r0, r1
 800bd80:	0080      	lsls	r0, r0, #2
 800bd82:	1840      	adds	r0, r0, r1
		xTimerSwitch = xTimerCreate("mosfetTimer",
 800bd84:	21fa      	movs	r1, #250	; 0xfa
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 800bd86:	00c0      	lsls	r0, r0, #3
		xTimerSwitch = xTimerCreate("mosfetTimer",
 800bd88:	0089      	lsls	r1, r1, #2
 800bd8a:	f7f4 f9e1 	bl	8000150 <__udivsi3>
 800bd8e:	4b10      	ldr	r3, [pc, #64]	; (800bdd0 <Stream_current_To_CLI+0x7c>)
 800bd90:	0001      	movs	r1, r0
 800bd92:	2200      	movs	r2, #0
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	480f      	ldr	r0, [pc, #60]	; (800bdd4 <Stream_current_To_CLI+0x80>)
 800bd98:	23ff      	movs	r3, #255	; 0xff
 800bd9a:	f003 fec3 	bl	800fb24 <xTimerCreate>
 800bd9e:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <Stream_current_To_CLI+0x78>)
 800bda0:	0005      	movs	r5, r0
 800bda2:	6058      	str	r0, [r3, #4]
		xTimerStart(xTimerSwitch, portMAX_DELAY);
 800bda4:	f003 f9f8 	bl	800f198 <xTaskGetTickCount>
 800bda8:	2301      	movs	r3, #1
 800bdaa:	425b      	negs	r3, r3
 800bdac:	0002      	movs	r2, r0
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	0028      	movs	r0, r5
 800bdb6:	f003 fed5 	bl	800fb64 <xTimerGenericCommand>
 800bdba:	6821      	ldr	r1, [r4, #0]
 800bdbc:	e7d6      	b.n	800bd6c <Stream_current_To_CLI+0x18>
 800bdbe:	46c0      	nop			; (mov r8, r8)
 800bdc0:	20006f8c 	.word	0x20006f8c
 800bdc4:	20007080 	.word	0x20007080
 800bdc8:	2000700c 	.word	0x2000700c
 800bdcc:	200019cc 	.word	0x200019cc
 800bdd0:	0800bc55 	.word	0x0800bc55
 800bdd4:	0801b734 	.word	0x0801b734

0800bdd8 <Stream_current_To_CLI_V>:
	mosfetMode = REQ_STREAM_VERBOSE_PORT_CLI;
 800bdd8:	2206      	movs	r2, #6
float Stream_current_To_CLI_V(uint32_t Period, uint32_t Timeout) {
 800bdda:	b530      	push	{r4, r5, lr}
	mosfetPeriod = Period;
 800bddc:	4b19      	ldr	r3, [pc, #100]	; (800be44 <Stream_current_To_CLI_V+0x6c>)
	mosfetTimeout = Timeout;
 800bdde:	4c1a      	ldr	r4, [pc, #104]	; (800be48 <Stream_current_To_CLI_V+0x70>)
	mosfetPeriod = Period;
 800bde0:	6018      	str	r0, [r3, #0]
	mosfetMode = REQ_STREAM_VERBOSE_PORT_CLI;
 800bde2:	4b1a      	ldr	r3, [pc, #104]	; (800be4c <Stream_current_To_CLI_V+0x74>)
float Stream_current_To_CLI_V(uint32_t Period, uint32_t Timeout) {
 800bde4:	b083      	sub	sp, #12
	mosfetMode = REQ_STREAM_VERBOSE_PORT_CLI;
 800bde6:	701a      	strb	r2, [r3, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800bde8:	1e4b      	subs	r3, r1, #1
	mosfetTimeout = Timeout;
 800bdea:	6021      	str	r1, [r4, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800bdec:	3303      	adds	r3, #3
 800bdee:	d907      	bls.n	800be00 <Stream_current_To_CLI_V+0x28>
	if (mosfetTimeout > 0) {
 800bdf0:	2900      	cmp	r1, #0
 800bdf2:	d002      	beq.n	800bdfa <Stream_current_To_CLI_V+0x22>
		startMeasurement = START_MEASUREMENT;
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	4b16      	ldr	r3, [pc, #88]	; (800be50 <Stream_current_To_CLI_V+0x78>)
 800bdf8:	755a      	strb	r2, [r3, #21]
}
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	b003      	add	sp, #12
 800bdfe:	bd30      	pop	{r4, r5, pc}
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 800be00:	0148      	lsls	r0, r1, #5
 800be02:	1a40      	subs	r0, r0, r1
 800be04:	0080      	lsls	r0, r0, #2
 800be06:	1840      	adds	r0, r0, r1
		xTimerSwitch = xTimerCreate("mosfetTimer",
 800be08:	21fa      	movs	r1, #250	; 0xfa
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 800be0a:	00c0      	lsls	r0, r0, #3
		xTimerSwitch = xTimerCreate("mosfetTimer",
 800be0c:	0089      	lsls	r1, r1, #2
 800be0e:	f7f4 f99f 	bl	8000150 <__udivsi3>
 800be12:	4b10      	ldr	r3, [pc, #64]	; (800be54 <Stream_current_To_CLI_V+0x7c>)
 800be14:	0001      	movs	r1, r0
 800be16:	2200      	movs	r2, #0
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	480f      	ldr	r0, [pc, #60]	; (800be58 <Stream_current_To_CLI_V+0x80>)
 800be1c:	23ff      	movs	r3, #255	; 0xff
 800be1e:	f003 fe81 	bl	800fb24 <xTimerCreate>
 800be22:	4b0b      	ldr	r3, [pc, #44]	; (800be50 <Stream_current_To_CLI_V+0x78>)
 800be24:	0005      	movs	r5, r0
 800be26:	6058      	str	r0, [r3, #4]
		xTimerStart(xTimerSwitch, portMAX_DELAY);
 800be28:	f003 f9b6 	bl	800f198 <xTaskGetTickCount>
 800be2c:	2301      	movs	r3, #1
 800be2e:	425b      	negs	r3, r3
 800be30:	0002      	movs	r2, r0
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	2101      	movs	r1, #1
 800be36:	2300      	movs	r3, #0
 800be38:	0028      	movs	r0, r5
 800be3a:	f003 fe93 	bl	800fb64 <xTimerGenericCommand>
 800be3e:	6821      	ldr	r1, [r4, #0]
 800be40:	e7d6      	b.n	800bdf0 <Stream_current_To_CLI_V+0x18>
 800be42:	46c0      	nop			; (mov r8, r8)
 800be44:	20006f8c 	.word	0x20006f8c
 800be48:	20007080 	.word	0x20007080
 800be4c:	2000700c 	.word	0x2000700c
 800be50:	200019cc 	.word	0x200019cc
 800be54:	0800bc55 	.word	0x0800bc55
 800be58:	0801b734 	.word	0x0801b734

0800be5c <Stop_current_measurement>:
	mosfetMode = REQ_IDLE;
 800be5c:	2300      	movs	r3, #0
Module_Status Stop_current_measurement(void) {
 800be5e:	b500      	push	{lr}
	mosfetMode = REQ_IDLE;
 800be60:	4a09      	ldr	r2, [pc, #36]	; (800be88 <Stop_current_measurement+0x2c>)
Module_Status Stop_current_measurement(void) {
 800be62:	b083      	sub	sp, #12
	mosfetMode = REQ_IDLE;
 800be64:	7013      	strb	r3, [r2, #0]
	startMeasurement = STOP_MEASUREMENT;
 800be66:	4a09      	ldr	r2, [pc, #36]	; (800be8c <Stop_current_measurement+0x30>)
	xTimerStop(xTimerSwitch, 0);
 800be68:	2103      	movs	r1, #3
	startMeasurement = STOP_MEASUREMENT;
 800be6a:	7553      	strb	r3, [r2, #21]
	xTimerStop(xTimerSwitch, 0);
 800be6c:	6850      	ldr	r0, [r2, #4]
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	2200      	movs	r2, #0
 800be72:	f003 fe77 	bl	800fb64 <xTimerGenericCommand>
	Output_off();
 800be76:	f7ff fec5 	bl	800bc04 <Output_off>
	HAL_ADC_Stop(&hadc);
 800be7a:	4805      	ldr	r0, [pc, #20]	; (800be90 <Stop_current_measurement+0x34>)
 800be7c:	f004 fb18 	bl	80104b0 <HAL_ADC_Stop>
}
 800be80:	2000      	movs	r0, #0
 800be82:	b003      	add	sp, #12
 800be84:	bd00      	pop	{pc}
 800be86:	46c0      	nop			; (mov r8, r8)
 800be88:	2000700c 	.word	0x2000700c
 800be8c:	200019cc 	.word	0x200019cc
 800be90:	20006d84 	.word	0x20006d84

0800be94 <mosfetStreamCommand>:
/*-----------------------------------------------------------*/

static portBASE_TYPE mosfetStreamCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800be94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be96:	46d6      	mov	lr, sl
 800be98:	464f      	mov	r7, r9
 800be9a:	4646      	mov	r6, r8

	int8_t *pcParameterString1; /* period */
	int8_t *pcParameterString2; /* timeout */
	int8_t *pcParameterString3; /* port or buffer */
	int8_t *pcParameterString4; /* module */
	portBASE_TYPE xParameterStringLength1 = 0;
 800be9c:	2300      	movs	r3, #0
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800be9e:	b5c0      	push	{r6, r7, lr}
 800bea0:	b086      	sub	sp, #24
 800bea2:	0004      	movs	r4, r0
 800bea4:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800bea6:	9302      	str	r3, [sp, #8]
	portBASE_TYPE xParameterStringLength2 = 0;
 800bea8:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength3 = 0;
 800beaa:	9304      	str	r3, [sp, #16]
	portBASE_TYPE xParameterStringLength4 = 0;
 800beac:	9305      	str	r3, [sp, #20]

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800beae:	2800      	cmp	r0, #0
 800beb0:	d060      	beq.n	800bf74 <mosfetStreamCommand+0xe0>

	/* Obtain the 1st parameter string: period */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800beb2:	aa02      	add	r2, sp, #8
 800beb4:	2101      	movs	r1, #1
 800beb6:	0028      	movs	r0, r5
 800beb8:	f002 fad2 	bl	800e460 <FreeRTOS_CLIGetParameter>
			&xParameterStringLength1);
	/* Obtain the 2nd parameter string: timeout */
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,
 800bebc:	aa03      	add	r2, sp, #12
 800bebe:	2102      	movs	r1, #2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800bec0:	0007      	movs	r7, r0
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,
 800bec2:	0028      	movs	r0, r5
 800bec4:	f002 facc 	bl	800e460 <FreeRTOS_CLIGetParameter>
			&xParameterStringLength2);
	/* Obtain the 3rd parameter string: port */
	pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3,
 800bec8:	aa04      	add	r2, sp, #16
 800beca:	2103      	movs	r1, #3
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,
 800becc:	4681      	mov	r9, r0
	pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3,
 800bece:	0028      	movs	r0, r5
 800bed0:	f002 fac6 	bl	800e460 <FreeRTOS_CLIGetParameter>
			&xParameterStringLength3);
	/* Obtain the 4th parameter string: module */
	pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 4,
 800bed4:	aa05      	add	r2, sp, #20
	pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3,
 800bed6:	0006      	movs	r6, r0
	pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 4,
 800bed8:	2104      	movs	r1, #4
 800beda:	0028      	movs	r0, r5
 800bedc:	f002 fac0 	bl	800e460 <FreeRTOS_CLIGetParameter>
 800bee0:	4682      	mov	sl, r0
			&xParameterStringLength4);

	if (NULL != pcParameterString1) {
 800bee2:	2f00      	cmp	r7, #0
 800bee4:	d048      	beq.n	800bf78 <mosfetStreamCommand+0xe4>
		Period = atoi((char*) pcParameterString1);
 800bee6:	0038      	movs	r0, r7
 800bee8:	f007 fdd3 	bl	8013a92 <atoi>
	Module_Status result = H0FRx_OK;
 800beec:	2300      	movs	r3, #0
		Period = atoi((char*) pcParameterString1);
 800beee:	0007      	movs	r7, r0
	Module_Status result = H0FRx_OK;
 800bef0:	4698      	mov	r8, r3
	} else {
		result = H0FRx_ERR_WrongParams;
	}
	if (NULL != pcParameterString2) {
 800bef2:	464b      	mov	r3, r9
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d100      	bne.n	800befa <mosfetStreamCommand+0x66>
 800bef8:	e0db      	b.n	800c0b2 <mosfetStreamCommand+0x21e>
		if (!strncmp((const char*) pcParameterString2, "inf", 3)) {
 800befa:	2203      	movs	r2, #3
 800befc:	496f      	ldr	r1, [pc, #444]	; (800c0bc <mosfetStreamCommand+0x228>)
 800befe:	4648      	mov	r0, r9
 800bf00:	f008 fad4 	bl	80144ac <strncmp>
 800bf04:	2800      	cmp	r0, #0
 800bf06:	d000      	beq.n	800bf0a <mosfetStreamCommand+0x76>
 800bf08:	e0ce      	b.n	800c0a8 <mosfetStreamCommand+0x214>
			Timeout = portMAX_DELAY;
 800bf0a:	2501      	movs	r5, #1
 800bf0c:	426d      	negs	r5, r5
	} else {
		result = H0FRx_ERR_WrongParams;
	}

	/* streaming data to internal buffer (module parameter) */
		if (NULL != pcParameterString3 && !strncmp((const char *)pcParameterString3, "buffer", 6))
 800bf0e:	2e00      	cmp	r6, #0
 800bf10:	d100      	bne.n	800bf14 <mosfetStreamCommand+0x80>
 800bf12:	e0ac      	b.n	800c06e <mosfetStreamCommand+0x1da>
 800bf14:	2206      	movs	r2, #6
 800bf16:	496a      	ldr	r1, [pc, #424]	; (800c0c0 <mosfetStreamCommand+0x22c>)
 800bf18:	0030      	movs	r0, r6
 800bf1a:	f008 fac7 	bl	80144ac <strncmp>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d100      	bne.n	800bf24 <mosfetStreamCommand+0x90>
 800bf22:	e08c      	b.n	800c03e <mosfetStreamCommand+0x1aa>

			// Return right away here as we don't want to block the CLI
			return pdFALSE;
		}
	/* streaming data to port */
	else if (NULL != pcParameterString3 && NULL != pcParameterString4
 800bf24:	4653      	mov	r3, sl
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d003      	beq.n	800bf32 <mosfetStreamCommand+0x9e>
			&& pcParameterString3[0] == 'p') {
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	56f3      	ldrsb	r3, [r6, r3]
 800bf2e:	2b70      	cmp	r3, #112	; 0x70
 800bf30:	d060      	beq.n	800bff4 <mosfetStreamCommand+0x160>
					taskYIELD();
				}
			}

			else if (NULL != pcParameterString3
					&& !strncmp((const char*) pcParameterString3, "-v", 2)) {
 800bf32:	2202      	movs	r2, #2
 800bf34:	4963      	ldr	r1, [pc, #396]	; (800c0c4 <mosfetStreamCommand+0x230>)
 800bf36:	0030      	movs	r0, r6
 800bf38:	f008 fab8 	bl	80144ac <strncmp>
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	d039      	beq.n	800bfb4 <mosfetStreamCommand+0x120>
 800bf40:	4d61      	ldr	r5, [pc, #388]	; (800c0c8 <mosfetStreamCommand+0x234>)
			} else {
				result = H0FRx_ERR_WrongParams;
					}

	if (H0FRx_ERR_WrongParams == result) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
 800bf42:	2212      	movs	r2, #18
 800bf44:	4961      	ldr	r1, [pc, #388]	; (800c0cc <mosfetStreamCommand+0x238>)
 800bf46:	0020      	movs	r0, r4
 800bf48:	f008 f869 	bl	801401e <memcpy>
	}

	Stop_current_measurement();
 800bf4c:	f7ff ff86 	bl	800be5c <Stop_current_measurement>

		if (stopB) {
 800bf50:	782b      	ldrb	r3, [r5, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d114      	bne.n	800bf80 <mosfetStreamCommand+0xec>
					strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
			memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
			stopB = 0;
		} else {
			/* clean terminal output */
			memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800bf56:	0020      	movs	r0, r4
 800bf58:	f7f4 f8de 	bl	8000118 <strlen>
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	0002      	movs	r2, r0
 800bf60:	0020      	movs	r0, r4
 800bf62:	f008 f865 	bl	8014030 <memset>
		}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800bf66:	2000      	movs	r0, #0
 800bf68:	b006      	add	sp, #24
 800bf6a:	bc1c      	pop	{r2, r3, r4}
 800bf6c:	4690      	mov	r8, r2
 800bf6e:	4699      	mov	r9, r3
 800bf70:	46a2      	mov	sl, r4
 800bf72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 800bf74:	b672      	cpsid	i
 800bf76:	e7fe      	b.n	800bf76 <mosfetStreamCommand+0xe2>
		result = H0FRx_ERR_WrongParams;
 800bf78:	2304      	movs	r3, #4
	uint32_t Period = 0;
 800bf7a:	2700      	movs	r7, #0
		result = H0FRx_ERR_WrongParams;
 800bf7c:	4698      	mov	r8, r3
 800bf7e:	e7b8      	b.n	800bef2 <mosfetStreamCommand+0x5e>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageStopMsg);
 800bf80:	2221      	movs	r2, #33	; 0x21
 800bf82:	4953      	ldr	r1, [pc, #332]	; (800c0d0 <mosfetStreamCommand+0x23c>)
 800bf84:	0020      	movs	r0, r4
 800bf86:	f008 f84a 	bl	801401e <memcpy>
			writePxMutex(PcPort, (char*) pcWriteBuffer,
 800bf8a:	4b52      	ldr	r3, [pc, #328]	; (800c0d4 <mosfetStreamCommand+0x240>)
 800bf8c:	2220      	movs	r2, #32
 800bf8e:	7818      	ldrb	r0, [r3, #0]
 800bf90:	2301      	movs	r3, #1
 800bf92:	425b      	negs	r3, r3
 800bf94:	0021      	movs	r1, r4
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	3333      	adds	r3, #51	; 0x33
 800bf9a:	f002 f805 	bl	800dfa8 <writePxMutex>
			memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800bf9e:	0020      	movs	r0, r4
 800bfa0:	f7f4 f8ba 	bl	8000118 <strlen>
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	0002      	movs	r2, r0
 800bfa8:	0020      	movs	r0, r4
 800bfaa:	f008 f841 	bl	8014030 <memset>
			stopB = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	702b      	strb	r3, [r5, #0]
 800bfb2:	e7d8      	b.n	800bf66 <mosfetStreamCommand+0xd2>
				strcpy((char*) pcWriteBuffer, (char*) pcMessageCLI);
 800bfb4:	2225      	movs	r2, #37	; 0x25
 800bfb6:	4948      	ldr	r1, [pc, #288]	; (800c0d8 <mosfetStreamCommand+0x244>)
 800bfb8:	0020      	movs	r0, r4
 800bfba:	f008 f830 	bl	801401e <memcpy>
				writePxMutex(PcPort, (char*) pcWriteBuffer,
 800bfbe:	4b45      	ldr	r3, [pc, #276]	; (800c0d4 <mosfetStreamCommand+0x240>)
 800bfc0:	2224      	movs	r2, #36	; 0x24
 800bfc2:	7818      	ldrb	r0, [r3, #0]
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	425b      	negs	r3, r3
 800bfc8:	9300      	str	r3, [sp, #0]
 800bfca:	0021      	movs	r1, r4
 800bfcc:	3333      	adds	r3, #51	; 0x33
 800bfce:	f001 ffeb 	bl	800dfa8 <writePxMutex>
				Stream_current_To_CLI_V(Period, Timeout);
 800bfd2:	0029      	movs	r1, r5
 800bfd4:	0038      	movs	r0, r7
 800bfd6:	f7ff feff 	bl	800bdd8 <Stream_current_To_CLI_V>
				while (startMeasurement != STOP_MEASUREMENT) {taskYIELD();}
 800bfda:	4d3b      	ldr	r5, [pc, #236]	; (800c0c8 <mosfetStreamCommand+0x234>)
 800bfdc:	7d6b      	ldrb	r3, [r5, #21]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d004      	beq.n	800bfec <mosfetStreamCommand+0x158>
 800bfe2:	f003 ff65 	bl	800feb0 <vPortYield>
 800bfe6:	7d6b      	ldrb	r3, [r5, #21]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1fa      	bne.n	800bfe2 <mosfetStreamCommand+0x14e>
	if (H0FRx_ERR_WrongParams == result) {
 800bfec:	4643      	mov	r3, r8
 800bfee:	2b04      	cmp	r3, #4
 800bff0:	d1ac      	bne.n	800bf4c <mosfetStreamCommand+0xb8>
 800bff2:	e7a6      	b.n	800bf42 <mosfetStreamCommand+0xae>
		Port = (uint8_t) atol((char*) pcParameterString3 + 1);
 800bff4:	1c70      	adds	r0, r6, #1
 800bff6:	f007 fd52 	bl	8013a9e <atol>
 800bffa:	0006      	movs	r6, r0
		Module = atoi((char*) pcParameterString4);
 800bffc:	4650      	mov	r0, sl
 800bffe:	f007 fd48 	bl	8013a92 <atoi>
 800c002:	23ff      	movs	r3, #255	; 0xff
 800c004:	401e      	ands	r6, r3
 800c006:	46b0      	mov	r8, r6
 800c008:	4018      	ands	r0, r3
 800c00a:	0006      	movs	r6, r0
		sprintf((char*) pcWriteBuffer, (char*) pcMessageModule, Port, Module);
 800c00c:	0003      	movs	r3, r0
 800c00e:	4642      	mov	r2, r8
 800c010:	4932      	ldr	r1, [pc, #200]	; (800c0dc <mosfetStreamCommand+0x248>)
 800c012:	0020      	movs	r0, r4
 800c014:	f008 fa06 	bl	8014424 <sprintf>
	mosfetPeriod = Period;
 800c018:	4642      	mov	r2, r8
	mosfetPort = Port;
 800c01a:	4b31      	ldr	r3, [pc, #196]	; (800c0e0 <mosfetStreamCommand+0x24c>)
		Stream_current_To_Port(Period, Timeout, Port, Module);
 800c01c:	701f      	strb	r7, [r3, #0]
	mosfetModule = Module;
 800c01e:	4b31      	ldr	r3, [pc, #196]	; (800c0e4 <mosfetStreamCommand+0x250>)
		Stream_current_To_Port(Period, Timeout, Port, Module);
 800c020:	701d      	strb	r5, [r3, #0]
	mosfetPeriod = Period;
 800c022:	4b31      	ldr	r3, [pc, #196]	; (800c0e8 <mosfetStreamCommand+0x254>)
 800c024:	601a      	str	r2, [r3, #0]
	mosfetMode = REQ_STREAM_PORT;
 800c026:	2207      	movs	r2, #7
	mosfetTimeout = Timeout;
 800c028:	4b30      	ldr	r3, [pc, #192]	; (800c0ec <mosfetStreamCommand+0x258>)
 800c02a:	601e      	str	r6, [r3, #0]
	mosfetMode = REQ_STREAM_PORT;
 800c02c:	4b30      	ldr	r3, [pc, #192]	; (800c0f0 <mosfetStreamCommand+0x25c>)
 800c02e:	701a      	strb	r2, [r3, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800c030:	1e73      	subs	r3, r6, #1
 800c032:	3303      	adds	r3, #3
 800c034:	d897      	bhi.n	800bf66 <mosfetStreamCommand+0xd2>
 800c036:	0030      	movs	r0, r6
 800c038:	f7ff f9ea 	bl	800b410 <Stream_current_To_Buffer.part.8>
 800c03c:	e793      	b.n	800bf66 <mosfetStreamCommand+0xd2>
			strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageBuffer);
 800c03e:	225f      	movs	r2, #95	; 0x5f
 800c040:	492c      	ldr	r1, [pc, #176]	; (800c0f4 <mosfetStreamCommand+0x260>)
 800c042:	0020      	movs	r0, r4
 800c044:	f007 ffeb 	bl	801401e <memcpy>
	mosfetPeriod=Period;
 800c048:	4b27      	ldr	r3, [pc, #156]	; (800c0e8 <mosfetStreamCommand+0x254>)
	ptrBuffer=Buffer;
 800c04a:	4a2b      	ldr	r2, [pc, #172]	; (800c0f8 <mosfetStreamCommand+0x264>)
	mosfetPeriod=Period;
 800c04c:	601f      	str	r7, [r3, #0]
	mosfetTimeout=Timeout;
 800c04e:	4b27      	ldr	r3, [pc, #156]	; (800c0ec <mosfetStreamCommand+0x258>)
 800c050:	601d      	str	r5, [r3, #0]
	ptrBuffer=Buffer;
 800c052:	4b1d      	ldr	r3, [pc, #116]	; (800c0c8 <mosfetStreamCommand+0x234>)
 800c054:	3318      	adds	r3, #24
 800c056:	6053      	str	r3, [r2, #4]
	mosfetMode=REQ_STREAM_BUFFER;
 800c058:	2208      	movs	r2, #8
 800c05a:	4b25      	ldr	r3, [pc, #148]	; (800c0f0 <mosfetStreamCommand+0x25c>)
 800c05c:	701a      	strb	r2, [r3, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF))
 800c05e:	1e6b      	subs	r3, r5, #1
 800c060:	3303      	adds	r3, #3
 800c062:	d900      	bls.n	800c066 <mosfetStreamCommand+0x1d2>
 800c064:	e77f      	b.n	800bf66 <mosfetStreamCommand+0xd2>
 800c066:	0028      	movs	r0, r5
 800c068:	f7ff f9d2 	bl	800b410 <Stream_current_To_Buffer.part.8>
 800c06c:	e77b      	b.n	800bf66 <mosfetStreamCommand+0xd2>
				strcpy((char*) pcWriteBuffer, (char*) pcMessageCLI);
 800c06e:	2225      	movs	r2, #37	; 0x25
 800c070:	4919      	ldr	r1, [pc, #100]	; (800c0d8 <mosfetStreamCommand+0x244>)
 800c072:	0020      	movs	r0, r4
 800c074:	f007 ffd3 	bl	801401e <memcpy>
				writePxMutex(PcPort, (char*) pcWriteBuffer,
 800c078:	4b16      	ldr	r3, [pc, #88]	; (800c0d4 <mosfetStreamCommand+0x240>)
 800c07a:	2224      	movs	r2, #36	; 0x24
 800c07c:	7818      	ldrb	r0, [r3, #0]
 800c07e:	2301      	movs	r3, #1
 800c080:	425b      	negs	r3, r3
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	0021      	movs	r1, r4
 800c086:	3333      	adds	r3, #51	; 0x33
 800c088:	f001 ff8e 	bl	800dfa8 <writePxMutex>
				Stream_current_To_CLI(Period, Timeout);
 800c08c:	0029      	movs	r1, r5
 800c08e:	0038      	movs	r0, r7
 800c090:	f7ff fe60 	bl	800bd54 <Stream_current_To_CLI>
				while (startMeasurement != STOP_MEASUREMENT) {
 800c094:	4d0c      	ldr	r5, [pc, #48]	; (800c0c8 <mosfetStreamCommand+0x234>)
 800c096:	7d6b      	ldrb	r3, [r5, #21]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d0a7      	beq.n	800bfec <mosfetStreamCommand+0x158>
					taskYIELD();
 800c09c:	f003 ff08 	bl	800feb0 <vPortYield>
				while (startMeasurement != STOP_MEASUREMENT) {
 800c0a0:	7d6b      	ldrb	r3, [r5, #21]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1fa      	bne.n	800c09c <mosfetStreamCommand+0x208>
 800c0a6:	e7a1      	b.n	800bfec <mosfetStreamCommand+0x158>
			Timeout = atoi((char*) pcParameterString2);
 800c0a8:	4648      	mov	r0, r9
 800c0aa:	f007 fcf2 	bl	8013a92 <atoi>
 800c0ae:	0005      	movs	r5, r0
 800c0b0:	e72d      	b.n	800bf0e <mosfetStreamCommand+0x7a>
		result = H0FRx_ERR_WrongParams;
 800c0b2:	2304      	movs	r3, #4
	uint32_t Timeout = 0;
 800c0b4:	2500      	movs	r5, #0
		result = H0FRx_ERR_WrongParams;
 800c0b6:	4698      	mov	r8, r3
 800c0b8:	e729      	b.n	800bf0e <mosfetStreamCommand+0x7a>
 800c0ba:	46c0      	nop			; (mov r8, r8)
 800c0bc:	0801b7ec 	.word	0x0801b7ec
 800c0c0:	0801b8a8 	.word	0x0801b8a8
 800c0c4:	0801b96c 	.word	0x0801b96c
 800c0c8:	200019cc 	.word	0x200019cc
 800c0cc:	0801b970 	.word	0x0801b970
 800c0d0:	0801b984 	.word	0x0801b984
 800c0d4:	20000c28 	.word	0x20000c28
 800c0d8:	0801b944 	.word	0x0801b944
 800c0dc:	0801b910 	.word	0x0801b910
 800c0e0:	20006f90 	.word	0x20006f90
 800c0e4:	20006e60 	.word	0x20006e60
 800c0e8:	20006f8c 	.word	0x20006f8c
 800c0ec:	20007080 	.word	0x20007080
 800c0f0:	2000700c 	.word	0x2000700c
 800c0f4:	0801b8b0 	.word	0x0801b8b0
 800c0f8:	2000008c 	.word	0x2000008c

0800c0fc <MosfetStopCommand>:
/*-----------------------------------------------------------*/

static portBASE_TYPE MosfetStopCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800c0fc:	b510      	push	{r4, lr}
 800c0fe:	1e04      	subs	r4, r0, #0
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) pcCommandString;
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800c100:	d00a      	beq.n	800c118 <MosfetStopCommand+0x1c>

	result = Stop_current_measurement();
 800c102:	f7ff feab 	bl	800be5c <Stop_current_measurement>

	if (H0FRx_OK == result) {
 800c106:	2800      	cmp	r0, #0
 800c108:	d008      	beq.n	800c11c <MosfetStopCommand+0x20>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
	} else {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
 800c10a:	222d      	movs	r2, #45	; 0x2d
 800c10c:	4906      	ldr	r1, [pc, #24]	; (800c128 <MosfetStopCommand+0x2c>)
 800c10e:	0020      	movs	r0, r4
 800c110:	f007 ff85 	bl	801401e <memcpy>
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800c114:	2000      	movs	r0, #0
 800c116:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800c118:	b672      	cpsid	i
 800c11a:	e7fe      	b.n	800c11a <MosfetStopCommand+0x1e>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
 800c11c:	2221      	movs	r2, #33	; 0x21
 800c11e:	4903      	ldr	r1, [pc, #12]	; (800c12c <MosfetStopCommand+0x30>)
 800c120:	0020      	movs	r0, r4
 800c122:	f007 ff7c 	bl	801401e <memcpy>
 800c126:	e7f5      	b.n	800c114 <MosfetStopCommand+0x18>
 800c128:	0801b9cc 	.word	0x0801b9cc
 800c12c:	0801b9a8 	.word	0x0801b9a8

0800c130 <MosfetTask>:
static void MosfetTask(void *argument) {
 800c130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c132:	4657      	mov	r7, sl
 800c134:	4645      	mov	r5, r8
 800c136:	46de      	mov	lr, fp
 800c138:	464e      	mov	r6, r9
 800c13a:	4b44      	ldr	r3, [pc, #272]	; (800c24c <MosfetTask+0x11c>)
 800c13c:	b5e0      	push	{r5, r6, r7, lr}
 800c13e:	4698      	mov	r8, r3
 800c140:	4b43      	ldr	r3, [pc, #268]	; (800c250 <MosfetTask+0x120>)
 800c142:	4f44      	ldr	r7, [pc, #272]	; (800c254 <MosfetTask+0x124>)
 800c144:	469b      	mov	fp, r3
 800c146:	4b44      	ldr	r3, [pc, #272]	; (800c258 <MosfetTask+0x128>)
 800c148:	4c44      	ldr	r4, [pc, #272]	; (800c25c <MosfetTask+0x12c>)
 800c14a:	469a      	mov	sl, r3
 800c14c:	4b44      	ldr	r3, [pc, #272]	; (800c260 <MosfetTask+0x130>)
 800c14e:	4d45      	ldr	r5, [pc, #276]	; (800c264 <MosfetTask+0x134>)
 800c150:	4699      	mov	r9, r3
		switch (mosfetMode) {
 800c152:	783b      	ldrb	r3, [r7, #0]
 800c154:	3b05      	subs	r3, #5
 800c156:	b2db      	uxtb	r3, r3
 800c158:	2b09      	cmp	r3, #9
 800c15a:	d80c      	bhi.n	800c176 <MosfetTask+0x46>
 800c15c:	4642      	mov	r2, r8
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	58d3      	ldr	r3, [r2, r3]
 800c162:	469f      	mov	pc, r3
					Stop_current_measurement();
 800c164:	f7ff fe7a 	bl	800be5c <Stop_current_measurement>
				taskYIELD();
 800c168:	f003 fea2 	bl	800feb0 <vPortYield>
		switch (mosfetMode) {
 800c16c:	783b      	ldrb	r3, [r7, #0]
 800c16e:	3b05      	subs	r3, #5
 800c170:	b2db      	uxtb	r3, r3
 800c172:	2b09      	cmp	r3, #9
 800c174:	d9f2      	bls.n	800c15c <MosfetTask+0x2c>
					mosfetMode = REQ_STOP;
 800c176:	230e      	movs	r3, #14
 800c178:	703b      	strb	r3, [r7, #0]
					break;
 800c17a:	e7f5      	b.n	800c168 <MosfetTask+0x38>
					t0 = HAL_GetTick();
 800c17c:	f003 ffea 	bl	8010154 <HAL_GetTick>
 800c180:	0006      	movs	r6, r0
					Current = Current_Calculation();
 800c182:	f7ff fca7 	bl	800bad4 <Current_Calculation>
					SendMeasurementResult(mosfetMode, Current, mosfetModule,
 800c186:	464b      	mov	r3, r9
 800c188:	7819      	ldrb	r1, [r3, #0]
 800c18a:	4653      	mov	r3, sl
 800c18c:	2200      	movs	r2, #0
 800c18e:	685b      	ldr	r3, [r3, #4]
					Current = Current_Calculation();
 800c190:	61e0      	str	r0, [r4, #28]
					SendMeasurementResult(mosfetMode, Current, mosfetModule,
 800c192:	f7ff f8a9 	bl	800b2e8 <SendMeasurementResult.isra.0>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c196:	e004      	b.n	800c1a2 <MosfetTask+0x72>
 800c198:	7823      	ldrb	r3, [r4, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1e4      	bne.n	800c168 <MosfetTask+0x38>
						taskYIELD();
 800c19e:	f003 fe87 	bl	800feb0 <vPortYield>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c1a2:	f003 ffd7 	bl	8010154 <HAL_GetTick>
 800c1a6:	682b      	ldr	r3, [r5, #0]
 800c1a8:	1b80      	subs	r0, r0, r6
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	4298      	cmp	r0, r3
 800c1ae:	d3f3      	bcc.n	800c198 <MosfetTask+0x68>
 800c1b0:	e7da      	b.n	800c168 <MosfetTask+0x38>
					t0 = HAL_GetTick();
 800c1b2:	f003 ffcf 	bl	8010154 <HAL_GetTick>
 800c1b6:	0006      	movs	r6, r0
					Current = Current_Calculation();
 800c1b8:	f7ff fc8c 	bl	800bad4 <Current_Calculation>
					SendMeasurementResult(mosfetMode, Current, 0, PcPort, NULL);
 800c1bc:	465b      	mov	r3, fp
 800c1be:	2100      	movs	r1, #0
 800c1c0:	781a      	ldrb	r2, [r3, #0]
 800c1c2:	2300      	movs	r3, #0
					Current = Current_Calculation();
 800c1c4:	61e0      	str	r0, [r4, #28]
					SendMeasurementResult(mosfetMode, Current, 0, PcPort, NULL);
 800c1c6:	f7ff f88f 	bl	800b2e8 <SendMeasurementResult.isra.0>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c1ca:	e004      	b.n	800c1d6 <MosfetTask+0xa6>
 800c1cc:	7823      	ldrb	r3, [r4, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1ca      	bne.n	800c168 <MosfetTask+0x38>
						taskYIELD();
 800c1d2:	f003 fe6d 	bl	800feb0 <vPortYield>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c1d6:	f003 ffbd 	bl	8010154 <HAL_GetTick>
 800c1da:	682b      	ldr	r3, [r5, #0]
 800c1dc:	1b80      	subs	r0, r0, r6
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	4298      	cmp	r0, r3
 800c1e2:	d3f3      	bcc.n	800c1cc <MosfetTask+0x9c>
 800c1e4:	e7c0      	b.n	800c168 <MosfetTask+0x38>
					t0 = HAL_GetTick();
 800c1e6:	f003 ffb5 	bl	8010154 <HAL_GetTick>
 800c1ea:	0006      	movs	r6, r0
					Current = Current_Calculation();
 800c1ec:	f7ff fc72 	bl	800bad4 <Current_Calculation>
					SendMeasurementResult(mosfetMode, Current, 0, 0, NULL);
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	2100      	movs	r1, #0
					Current = Current_Calculation();
 800c1f6:	61e0      	str	r0, [r4, #28]
					SendMeasurementResult(mosfetMode, Current, 0, 0, NULL);
 800c1f8:	f7ff f876 	bl	800b2e8 <SendMeasurementResult.isra.0>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c1fc:	e004      	b.n	800c208 <MosfetTask+0xd8>
 800c1fe:	7823      	ldrb	r3, [r4, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1b1      	bne.n	800c168 <MosfetTask+0x38>
						taskYIELD();
 800c204:	f003 fe54 	bl	800feb0 <vPortYield>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c208:	f003 ffa4 	bl	8010154 <HAL_GetTick>
 800c20c:	682b      	ldr	r3, [r5, #0]
 800c20e:	1b80      	subs	r0, r0, r6
 800c210:	3b01      	subs	r3, #1
 800c212:	4298      	cmp	r0, r3
 800c214:	d3f3      	bcc.n	800c1fe <MosfetTask+0xce>
 800c216:	e7a7      	b.n	800c168 <MosfetTask+0x38>
					t0 = HAL_GetTick();
 800c218:	f003 ff9c 	bl	8010154 <HAL_GetTick>
 800c21c:	0006      	movs	r6, r0
					Current = Current_Calculation();
 800c21e:	f7ff fc59 	bl	800bad4 <Current_Calculation>
					SendMeasurementResult(mosfetMode, Current, 0, 0, NULL);
 800c222:	2300      	movs	r3, #0
 800c224:	2200      	movs	r2, #0
 800c226:	2100      	movs	r1, #0
					Current = Current_Calculation();
 800c228:	61e0      	str	r0, [r4, #28]
					SendMeasurementResult(mosfetMode, Current, 0, 0, NULL);
 800c22a:	f7ff f85d 	bl	800b2e8 <SendMeasurementResult.isra.0>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c22e:	e004      	b.n	800c23a <MosfetTask+0x10a>
 800c230:	7823      	ldrb	r3, [r4, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d198      	bne.n	800c168 <MosfetTask+0x38>
						taskYIELD();
 800c236:	f003 fe3b 	bl	800feb0 <vPortYield>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c23a:	f003 ff8b 	bl	8010154 <HAL_GetTick>
 800c23e:	682b      	ldr	r3, [r5, #0]
 800c240:	1b80      	subs	r0, r0, r6
 800c242:	3b01      	subs	r3, #1
 800c244:	4298      	cmp	r0, r3
 800c246:	d3f3      	bcc.n	800c230 <MosfetTask+0x100>
 800c248:	e78e      	b.n	800c168 <MosfetTask+0x38>
 800c24a:	46c0      	nop			; (mov r8, r8)
 800c24c:	08018e6c 	.word	0x08018e6c
 800c250:	20000c28 	.word	0x20000c28
 800c254:	2000700c 	.word	0x2000700c
 800c258:	2000008c 	.word	0x2000008c
 800c25c:	200019cc 	.word	0x200019cc
 800c260:	20006e60 	.word	0x20006e60
 800c264:	20006f8c 	.word	0x20006f8c

0800c268 <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	aa06      	add	r2, sp, #24
 800c26c:	7815      	ldrb	r5, [r2, #0]
	switch (code) {
 800c26e:	4a60      	ldr	r2, [pc, #384]	; (800c3f0 <Module_MessagingTask+0x188>)
		uint8_t dst, uint8_t shift) {
 800c270:	000c      	movs	r4, r1
	switch (code) {
 800c272:	4694      	mov	ip, r2
 800c274:	4460      	add	r0, ip
 800c276:	b282      	uxth	r2, r0
 800c278:	2a07      	cmp	r2, #7
 800c27a:	d900      	bls.n	800c27e <Module_MessagingTask+0x16>
 800c27c:	e0b6      	b.n	800c3ec <Module_MessagingTask+0x184>
 800c27e:	495d      	ldr	r1, [pc, #372]	; (800c3f4 <Module_MessagingTask+0x18c>)
 800c280:	0092      	lsls	r2, r2, #2
 800c282:	588a      	ldr	r2, [r1, r2]
 800c284:	4697      	mov	pc, r2
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24)	+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ cMessage[port - 1][shift];
 800c286:	3c01      	subs	r4, #1
		timeout = ((uint32_t) cMessage[port - 1][7 + shift] << 24)+ ((uint32_t) cMessage[port - 1][6 + shift] << 16)+ ((uint32_t) cMessage[port - 1][5 + shift] << 8)+ cMessage[port - 1][4 + shift];
 800c288:	00e3      	lsls	r3, r4, #3
 800c28a:	1b1c      	subs	r4, r3, r4
 800c28c:	4b5a      	ldr	r3, [pc, #360]	; (800c3f8 <Module_MessagingTask+0x190>)
 800c28e:	00e4      	lsls	r4, r4, #3
 800c290:	191c      	adds	r4, r3, r4
 800c292:	1962      	adds	r2, r4, r5
 800c294:	79d0      	ldrb	r0, [r2, #7]
 800c296:	7993      	ldrb	r3, [r2, #6]
 800c298:	0600      	lsls	r0, r0, #24
 800c29a:	041b      	lsls	r3, r3, #16
 800c29c:	18c0      	adds	r0, r0, r3
 800c29e:	7913      	ldrb	r3, [r2, #4]
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24)	+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ cMessage[port - 1][shift];
 800c2a0:	7891      	ldrb	r1, [r2, #2]
		timeout = ((uint32_t) cMessage[port - 1][7 + shift] << 24)+ ((uint32_t) cMessage[port - 1][6 + shift] << 16)+ ((uint32_t) cMessage[port - 1][5 + shift] << 8)+ cMessage[port - 1][4 + shift];
 800c2a2:	18c0      	adds	r0, r0, r3
 800c2a4:	7953      	ldrb	r3, [r2, #5]
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24)	+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ cMessage[port - 1][shift];
 800c2a6:	0409      	lsls	r1, r1, #16
		timeout = ((uint32_t) cMessage[port - 1][7 + shift] << 24)+ ((uint32_t) cMessage[port - 1][6 + shift] << 16)+ ((uint32_t) cMessage[port - 1][5 + shift] << 8)+ cMessage[port - 1][4 + shift];
 800c2a8:	021b      	lsls	r3, r3, #8
 800c2aa:	18c0      	adds	r0, r0, r3
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24)	+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ cMessage[port - 1][shift];
 800c2ac:	78d3      	ldrb	r3, [r2, #3]
 800c2ae:	7852      	ldrb	r2, [r2, #1]
 800c2b0:	061b      	lsls	r3, r3, #24
 800c2b2:	185b      	adds	r3, r3, r1
 800c2b4:	5d61      	ldrb	r1, [r4, r5]
 800c2b6:	0212      	lsls	r2, r2, #8
 800c2b8:	185b      	adds	r3, r3, r1
 800c2ba:	189b      	adds	r3, r3, r2
	mosfetPeriod=Period;
 800c2bc:	4a4f      	ldr	r2, [pc, #316]	; (800c3fc <Module_MessagingTask+0x194>)
 800c2be:	6013      	str	r3, [r2, #0]
	mosfetTimeout=Timeout;
 800c2c0:	4b4f      	ldr	r3, [pc, #316]	; (800c400 <Module_MessagingTask+0x198>)
	ptrBuffer=Buffer;
 800c2c2:	4a50      	ldr	r2, [pc, #320]	; (800c404 <Module_MessagingTask+0x19c>)
	mosfetTimeout=Timeout;
 800c2c4:	6018      	str	r0, [r3, #0]
	ptrBuffer=Buffer;
 800c2c6:	4b50      	ldr	r3, [pc, #320]	; (800c408 <Module_MessagingTask+0x1a0>)
 800c2c8:	3318      	adds	r3, #24
 800c2ca:	6053      	str	r3, [r2, #4]
	mosfetMode=REQ_STREAM_BUFFER;
 800c2cc:	2208      	movs	r2, #8
 800c2ce:	4b4f      	ldr	r3, [pc, #316]	; (800c40c <Module_MessagingTask+0x1a4>)
 800c2d0:	701a      	strb	r2, [r3, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF))
 800c2d2:	1e43      	subs	r3, r0, #1
 800c2d4:	3303      	adds	r3, #3
 800c2d6:	d800      	bhi.n	800c2da <Module_MessagingTask+0x72>
 800c2d8:	e084      	b.n	800c3e4 <Module_MessagingTask+0x17c>
	Module_Status result = H0FRx_OK;
 800c2da:	2000      	movs	r0, #0
 800c2dc:	e002      	b.n	800c2e4 <Module_MessagingTask+0x7c>
		Stop_current_measurement();
 800c2de:	f7ff fdbd 	bl	800be5c <Stop_current_measurement>
	Module_Status result = H0FRx_OK;
 800c2e2:	2000      	movs	r0, #0
}
 800c2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Output_toggle();
 800c2e6:	f7ff fce1 	bl	800bcac <Output_toggle>
	Module_Status result = H0FRx_OK;
 800c2ea:	2000      	movs	r0, #0
		break;
 800c2ec:	e7fa      	b.n	800c2e4 <Module_MessagingTask+0x7c>
		tempFloat = (float) (((uint64_t) cMessage[port - 1][shift] << 24)+ ((uint64_t) cMessage[port - 1][1 + shift] << 16)+ ((uint64_t) cMessage[port - 1][2 + shift] << 8)+ ((uint64_t) cMessage[port - 1][3 + shift]));
 800c2ee:	3c01      	subs	r4, #1
 800c2f0:	00e3      	lsls	r3, r4, #3
 800c2f2:	1b1c      	subs	r4, r3, r4
 800c2f4:	4b40      	ldr	r3, [pc, #256]	; (800c3f8 <Module_MessagingTask+0x190>)
 800c2f6:	00e4      	lsls	r4, r4, #3
 800c2f8:	191c      	adds	r4, r3, r4
 800c2fa:	1963      	adds	r3, r4, r5
 800c2fc:	785a      	ldrb	r2, [r3, #1]
 800c2fe:	2100      	movs	r1, #0
 800c300:	0410      	lsls	r0, r2, #16
 800c302:	5d62      	ldrb	r2, [r4, r5]
 800c304:	2500      	movs	r5, #0
 800c306:	0614      	lsls	r4, r2, #24
 800c308:	1900      	adds	r0, r0, r4
 800c30a:	4169      	adcs	r1, r5
 800c30c:	2500      	movs	r5, #0
 800c30e:	78dc      	ldrb	r4, [r3, #3]
 800c310:	1900      	adds	r0, r0, r4
 800c312:	4169      	adcs	r1, r5
 800c314:	789c      	ldrb	r4, [r3, #2]
 800c316:	2300      	movs	r3, #0
 800c318:	0222      	lsls	r2, r4, #8
 800c31a:	1880      	adds	r0, r0, r2
 800c31c:	4159      	adcs	r1, r3
 800c31e:	f7f4 f985 	bl	800062c <__aeabi_ul2f>
 800c322:	4b3b      	ldr	r3, [pc, #236]	; (800c410 <Module_MessagingTask+0x1a8>)
	if (dutyCycle < 0 || dutyCycle > 100)
 800c324:	493b      	ldr	r1, [pc, #236]	; (800c414 <Module_MessagingTask+0x1ac>)
		tempFloat = (float) (((uint64_t) cMessage[port - 1][shift] << 24)+ ((uint64_t) cMessage[port - 1][1 + shift] << 16)+ ((uint64_t) cMessage[port - 1][2 + shift] << 8)+ ((uint64_t) cMessage[port - 1][3 + shift]));
 800c326:	6018      	str	r0, [r3, #0]
 800c328:	1c04      	adds	r4, r0, #0
	if (dutyCycle < 0 || dutyCycle > 100)
 800c32a:	f7f4 f8eb 	bl	8000504 <__aeabi_fcmpgt>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d1d3      	bne.n	800c2da <Module_MessagingTask+0x72>
 800c332:	1c20      	adds	r0, r4, #0
 800c334:	f7ff fb1c 	bl	800b970 <Output_PWM.part.2>
	Module_Status result = H0FRx_OK;
 800c338:	2000      	movs	r0, #0
 800c33a:	e7d3      	b.n	800c2e4 <Module_MessagingTask+0x7c>
	mosfetMode = REQ_SAMPLE;
 800c33c:	220f      	movs	r2, #15
 800c33e:	4b33      	ldr	r3, [pc, #204]	; (800c40c <Module_MessagingTask+0x1a4>)
	startMeasurement = START_MEASUREMENT;
 800c340:	4e31      	ldr	r6, [pc, #196]	; (800c408 <Module_MessagingTask+0x1a0>)
	mosfetMode = REQ_SAMPLE;
 800c342:	701a      	strb	r2, [r3, #0]
	startMeasurement = START_MEASUREMENT;
 800c344:	2301      	movs	r3, #1
	if (mosfetState == REQ_TIMEOUT) {
 800c346:	4f34      	ldr	r7, [pc, #208]	; (800c418 <Module_MessagingTask+0x1b0>)
	startMeasurement = START_MEASUREMENT;
 800c348:	7573      	strb	r3, [r6, #21]
	if (mosfetState == REQ_TIMEOUT) {
 800c34a:	783b      	ldrb	r3, [r7, #0]
 800c34c:	2b09      	cmp	r3, #9
 800c34e:	d003      	beq.n	800c358 <Module_MessagingTask+0xf0>
		temp = Current_Calculation();
 800c350:	f7ff fbc0 	bl	800bad4 <Current_Calculation>
		mosfetState = REQ_IDLE;
 800c354:	2300      	movs	r3, #0
 800c356:	703b      	strb	r3, [r7, #0]
		SendMeasurementResult(REQ_SAMPLE, Current, cMessage[port - 1][1+shift], cMessage[port - 1][shift], NULL);
 800c358:	3c01      	subs	r4, #1
 800c35a:	00e3      	lsls	r3, r4, #3
 800c35c:	1b1b      	subs	r3, r3, r4
 800c35e:	4c26      	ldr	r4, [pc, #152]	; (800c3f8 <Module_MessagingTask+0x190>)
 800c360:	00db      	lsls	r3, r3, #3
 800c362:	18e4      	adds	r4, r4, r3
 800c364:	5d62      	ldrb	r2, [r4, r5]
 800c366:	1965      	adds	r5, r4, r5
 800c368:	7869      	ldrb	r1, [r5, #1]
 800c36a:	69f0      	ldr	r0, [r6, #28]
 800c36c:	2300      	movs	r3, #0
 800c36e:	f7fe ffbb 	bl	800b2e8 <SendMeasurementResult.isra.0>
	Module_Status result = H0FRx_OK;
 800c372:	2000      	movs	r0, #0
		break;
 800c374:	e7b6      	b.n	800c2e4 <Module_MessagingTask+0x7c>
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24)+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ cMessage[port - 1][shift];
 800c376:	1e61      	subs	r1, r4, #1
		timeout = ((uint32_t) cMessage[port - 1][7 + shift] << 24)+ ((uint32_t) cMessage[port - 1][6 + shift] << 16)+ ((uint32_t) cMessage[port - 1][5 + shift] << 8)+ cMessage[port - 1][4 + shift];
 800c378:	00ca      	lsls	r2, r1, #3
 800c37a:	1a52      	subs	r2, r2, r1
 800c37c:	491e      	ldr	r1, [pc, #120]	; (800c3f8 <Module_MessagingTask+0x190>)
 800c37e:	00d2      	lsls	r2, r2, #3
 800c380:	188a      	adds	r2, r1, r2
 800c382:	1951      	adds	r1, r2, r5
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24)+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ cMessage[port - 1][shift];
 800c384:	5d50      	ldrb	r0, [r2, r5]
		Stream_current_To_Port(period, timeout, port, dst);
 800c386:	4a25      	ldr	r2, [pc, #148]	; (800c41c <Module_MessagingTask+0x1b4>)
 800c388:	7909      	ldrb	r1, [r1, #4]
 800c38a:	7010      	strb	r0, [r2, #0]
	mosfetModule = Module;
 800c38c:	4a24      	ldr	r2, [pc, #144]	; (800c420 <Module_MessagingTask+0x1b8>)
 800c38e:	7011      	strb	r1, [r2, #0]
	mosfetMode = REQ_STREAM_PORT;
 800c390:	2107      	movs	r1, #7
	mosfetPeriod = Period;
 800c392:	4a1a      	ldr	r2, [pc, #104]	; (800c3fc <Module_MessagingTask+0x194>)
		Stream_current_To_Port(period, timeout, port, dst);
 800c394:	6014      	str	r4, [r2, #0]
	mosfetTimeout = Timeout;
 800c396:	4a1a      	ldr	r2, [pc, #104]	; (800c400 <Module_MessagingTask+0x198>)
 800c398:	6013      	str	r3, [r2, #0]
	mosfetMode = REQ_STREAM_PORT;
 800c39a:	4a1c      	ldr	r2, [pc, #112]	; (800c40c <Module_MessagingTask+0x1a4>)
 800c39c:	7011      	strb	r1, [r2, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800c39e:	1e5a      	subs	r2, r3, #1
 800c3a0:	3203      	adds	r2, #3
 800c3a2:	d89a      	bhi.n	800c2da <Module_MessagingTask+0x72>
 800c3a4:	0018      	movs	r0, r3
 800c3a6:	f7ff f833 	bl	800b410 <Stream_current_To_Buffer.part.8>
	Module_Status result = H0FRx_OK;
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	e79a      	b.n	800c2e4 <Module_MessagingTask+0x7c>
		temp32 = ((uint32_t) cMessage[port - 1][shift] << 24)+ ((uint32_t) cMessage[port - 1][1 + shift] << 16)+ ((uint32_t) cMessage[port - 1][2 + shift] << 8)+ cMessage[port - 1][3 + shift];
 800c3ae:	3c01      	subs	r4, #1
 800c3b0:	00e3      	lsls	r3, r4, #3
 800c3b2:	1b1c      	subs	r4, r3, r4
 800c3b4:	4b10      	ldr	r3, [pc, #64]	; (800c3f8 <Module_MessagingTask+0x190>)
 800c3b6:	00e4      	lsls	r4, r4, #3
 800c3b8:	191c      	adds	r4, r3, r4
 800c3ba:	1963      	adds	r3, r4, r5
 800c3bc:	7858      	ldrb	r0, [r3, #1]
 800c3be:	5d62      	ldrb	r2, [r4, r5]
 800c3c0:	0400      	lsls	r0, r0, #16
 800c3c2:	0612      	lsls	r2, r2, #24
 800c3c4:	1880      	adds	r0, r0, r2
 800c3c6:	78da      	ldrb	r2, [r3, #3]
 800c3c8:	789b      	ldrb	r3, [r3, #2]
 800c3ca:	1880      	adds	r0, r0, r2
 800c3cc:	021b      	lsls	r3, r3, #8
 800c3ce:	18c0      	adds	r0, r0, r3
 800c3d0:	4b14      	ldr	r3, [pc, #80]	; (800c424 <Module_MessagingTask+0x1bc>)
 800c3d2:	6018      	str	r0, [r3, #0]
		Output_on(temp32);
 800c3d4:	f7ff fb2e 	bl	800ba34 <Output_on>
	Module_Status result = H0FRx_OK;
 800c3d8:	2000      	movs	r0, #0
		break;
 800c3da:	e783      	b.n	800c2e4 <Module_MessagingTask+0x7c>
		Output_off();
 800c3dc:	f7ff fc12 	bl	800bc04 <Output_off>
	Module_Status result = H0FRx_OK;
 800c3e0:	2000      	movs	r0, #0
		break;
 800c3e2:	e77f      	b.n	800c2e4 <Module_MessagingTask+0x7c>
 800c3e4:	f7ff f814 	bl	800b410 <Stream_current_To_Buffer.part.8>
	Module_Status result = H0FRx_OK;
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	e77b      	b.n	800c2e4 <Module_MessagingTask+0x7c>
		result = H0FRx_ERR_UnknownMessage;
 800c3ec:	2001      	movs	r0, #1
 800c3ee:	e779      	b.n	800c2e4 <Module_MessagingTask+0x7c>
 800c3f0:	fffffd12 	.word	0xfffffd12
 800c3f4:	08018e94 	.word	0x08018e94
 800c3f8:	20000c90 	.word	0x20000c90
 800c3fc:	20006f8c 	.word	0x20006f8c
 800c400:	20007080 	.word	0x20007080
 800c404:	2000008c 	.word	0x2000008c
 800c408:	200019cc 	.word	0x200019cc
 800c40c:	2000700c 	.word	0x2000700c
 800c410:	20006f88 	.word	0x20006f88
 800c414:	42c80000 	.word	0x42c80000
 800c418:	20006e68 	.word	0x20006e68
 800c41c:	20006f90 	.word	0x20006f90
 800c420:	20006e60 	.word	0x20006e60
 800c424:	20006f94 	.word	0x20006f94

0800c428 <HAL_ADC_MspInit>:
ADC_HandleTypeDef hadc;


/* ADC init function */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c428:	b570      	push	{r4, r5, r6, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800c42a:	2400      	movs	r4, #0
{
 800c42c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c42e:	2214      	movs	r2, #20
{
 800c430:	0006      	movs	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c432:	2100      	movs	r1, #0
 800c434:	a803      	add	r0, sp, #12
  ADC_ChannelConfTypeDef sConfig = {0};
 800c436:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c438:	f007 fdfa 	bl	8014030 <memset>
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c43c:	2380      	movs	r3, #128	; 0x80
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c43e:	2503      	movs	r5, #3
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c440:	015b      	lsls	r3, r3, #5
  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800c442:	4669      	mov	r1, sp
 800c444:	0030      	movs	r0, r6
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c446:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c448:	9502      	str	r5, [sp, #8]
  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800c44a:	f004 f931 	bl	80106b0 <HAL_ADC_ConfigChannel>
  PA0     ------> ADC_IN0
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c44e:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c450:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c452:	a903      	add	r1, sp, #12
 800c454:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c456:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c458:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c45a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c45c:	f005 f9f0 	bl	8011840 <HAL_GPIO_Init>

}
 800c460:	b008      	add	sp, #32
 800c462:	bd70      	pop	{r4, r5, r6, pc}

0800c464 <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 800c464:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c466:	46de      	mov	lr, fp
 800c468:	4657      	mov	r7, sl
 800c46a:	464e      	mov	r6, r9
 800c46c:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 800c46e:	2201      	movs	r2, #1
 800c470:	4b53      	ldr	r3, [pc, #332]	; (800c5c0 <DMA_Init+0x15c>)
{
 800c472:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 800c474:	6959      	ldr	r1, [r3, #20]
{
 800c476:	b083      	sub	sp, #12
	__DMA1_CLK_ENABLE();
 800c478:	4311      	orrs	r1, r2
 800c47a:	6159      	str	r1, [r3, #20]
 800c47c:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800c47e:	4c51      	ldr	r4, [pc, #324]	; (800c5c4 <DMA_Init+0x160>)
	__DMA1_CLK_ENABLE();
 800c480:	400a      	ands	r2, r1
 800c482:	9200      	str	r2, [sp, #0]
 800c484:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800c486:	2202      	movs	r2, #2
 800c488:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c48a:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 800c48c:	4311      	orrs	r1, r2
 800c48e:	6159      	str	r1, [r3, #20]
 800c490:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c492:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 800c494:	401a      	ands	r2, r3
 800c496:	9201      	str	r2, [sp, #4]
 800c498:	9b01      	ldr	r3, [sp, #4]
	hDMA->Instance = ch;
 800c49a:	4b4b      	ldr	r3, [pc, #300]	; (800c5c8 <DMA_Init+0x164>)
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c49c:	2680      	movs	r6, #128	; 0x80
	hDMA->Instance = ch;
 800c49e:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c4a0:	2320      	movs	r3, #32
 800c4a2:	469b      	mov	fp, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c4a4:	01bf      	lsls	r7, r7, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c4a6:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c4a8:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c4aa:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c4ac:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c4ae:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c4b0:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c4b2:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800c4b4:	0020      	movs	r0, r4
 800c4b6:	f004 fb61 	bl	8010b7c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800c4ba:	4b44      	ldr	r3, [pc, #272]	; (800c5cc <DMA_Init+0x168>)
	HAL_DMA_Init(hDMA);		
 800c4bc:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800c4be:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c4c0:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c4c2:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c4c4:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c4c6:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c4c8:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c4ca:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c4cc:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c4ce:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800c4d0:	3038      	adds	r0, #56	; 0x38
 800c4d2:	f004 fb53 	bl	8010b7c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800c4d6:	4b3e      	ldr	r3, [pc, #248]	; (800c5d0 <DMA_Init+0x16c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c4d8:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 800c4da:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c4dc:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 800c4de:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c4e0:	50e5      	str	r5, [r4, r3]
 800c4e2:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	50e2      	str	r2, [r4, r3]
 800c4e8:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c4ee:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c4f0:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c4f2:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c4f4:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 800c4f6:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c4f8:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 800c4fa:	f004 fb3f 	bl	8010b7c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800c4fe:	23a8      	movs	r3, #168	; 0xa8
 800c500:	4a34      	ldr	r2, [pc, #208]	; (800c5d4 <DMA_Init+0x170>)
	HAL_DMA_Init(hDMA);		
 800c502:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800c504:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c506:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c508:	3304      	adds	r3, #4
 800c50a:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c50c:	3304      	adds	r3, #4
 800c50e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c510:	3304      	adds	r3, #4
 800c512:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c514:	3304      	adds	r3, #4
 800c516:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c518:	3304      	adds	r3, #4
 800c51a:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c51c:	3304      	adds	r3, #4
 800c51e:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c520:	3304      	adds	r3, #4
 800c522:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800c524:	30a8      	adds	r0, #168	; 0xa8
 800c526:	f004 fb29 	bl	8010b7c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800c52a:	23e0      	movs	r3, #224	; 0xe0
 800c52c:	4a2a      	ldr	r2, [pc, #168]	; (800c5d8 <DMA_Init+0x174>)
	HAL_DMA_Init(hDMA);		
 800c52e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800c530:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c532:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c534:	3304      	adds	r3, #4
 800c536:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c538:	3304      	adds	r3, #4
 800c53a:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c53c:	3304      	adds	r3, #4
 800c53e:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c540:	3304      	adds	r3, #4
 800c542:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c544:	3304      	adds	r3, #4
 800c546:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c548:	3304      	adds	r3, #4
 800c54a:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c54c:	3304      	adds	r3, #4
 800c54e:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800c550:	30e0      	adds	r0, #224	; 0xe0
 800c552:	f004 fb13 	bl	8010b7c <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800c556:	4c21      	ldr	r4, [pc, #132]	; (800c5dc <DMA_Init+0x178>)
 800c558:	4b21      	ldr	r3, [pc, #132]	; (800c5e0 <DMA_Init+0x17c>)
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c55a:	60a5      	str	r5, [r4, #8]
	hDMA->Instance = ch;
 800c55c:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c55e:	2310      	movs	r3, #16
 800c560:	469b      	mov	fp, r3
 800c562:	6063      	str	r3, [r4, #4]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c564:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c566:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c568:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800c56a:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c56c:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800c56e:	0020      	movs	r0, r4
 800c570:	f004 fb04 	bl	8010b7c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800c574:	4b1b      	ldr	r3, [pc, #108]	; (800c5e4 <DMA_Init+0x180>)
	HAL_DMA_Init(hDMA);		
 800c576:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800c578:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c57a:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c57c:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c57e:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c580:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c582:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c584:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 800c586:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c588:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800c58a:	3038      	adds	r0, #56	; 0x38
 800c58c:	f004 faf6 	bl	8010b7c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800c590:	4b15      	ldr	r3, [pc, #84]	; (800c5e8 <DMA_Init+0x184>)
	HAL_DMA_Init(hDMA);		
 800c592:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800c594:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c596:	465b      	mov	r3, fp
 800c598:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c59a:	4653      	mov	r3, sl
 800c59c:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 800c59e:	464b      	mov	r3, r9
 800c5a0:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c5a2:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c5a4:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c5a6:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c5a8:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c5aa:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800c5ac:	3070      	adds	r0, #112	; 0x70
 800c5ae:	f004 fae5 	bl	8010b7c <HAL_DMA_Init>
}
 800c5b2:	b003      	add	sp, #12
 800c5b4:	bc3c      	pop	{r2, r3, r4, r5}
 800c5b6:	4690      	mov	r8, r2
 800c5b8:	4699      	mov	r9, r3
 800c5ba:	46a2      	mov	sl, r4
 800c5bc:	46ab      	mov	fp, r5
 800c5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5c0:	40021000 	.word	0x40021000
 800c5c4:	20001c94 	.word	0x20001c94
 800c5c8:	40020008 	.word	0x40020008
 800c5cc:	40020030 	.word	0x40020030
 800c5d0:	40020058 	.word	0x40020058
 800c5d4:	4002006c 	.word	0x4002006c
 800c5d8:	4002041c 	.word	0x4002041c
 800c5dc:	20001bec 	.word	0x20001bec
 800c5e0:	4002001c 	.word	0x4002001c
 800c5e4:	40020044 	.word	0x40020044
 800c5e8:	40020080 	.word	0x40020080

0800c5ec <DMA_MSG_RX_CH_Init>:
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c5ec:	2300      	movs	r3, #0
{
 800c5ee:	b510      	push	{r4, lr}
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c5f0:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c5f2:	6083      	str	r3, [r0, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c5f4:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c5f6:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c5f8:	3320      	adds	r3, #32
 800c5fa:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c5fc:	2380      	movs	r3, #128	; 0x80
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c5fe:	2280      	movs	r2, #128	; 0x80
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c600:	019b      	lsls	r3, r3, #6
	hDMA->Instance = ch;
 800c602:	6001      	str	r1, [r0, #0]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c604:	60c2      	str	r2, [r0, #12]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c606:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 800c608:	f004 fab8 	bl	8010b7c <HAL_DMA_Init>
}
 800c60c:	bd10      	pop	{r4, pc}
 800c60e:	46c0      	nop			; (mov r8, r8)

0800c610 <DMA_STREAM_CH_Init>:
/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c610:	2300      	movs	r3, #0
{
 800c612:	b510      	push	{r4, lr}
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c614:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c616:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800c618:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c61a:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c61c:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c61e:	3320      	adds	r3, #32
 800c620:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800c622:	2380      	movs	r3, #128	; 0x80
 800c624:	015b      	lsls	r3, r3, #5
	hDMA->Instance = ch;
 800c626:	6001      	str	r1, [r0, #0]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800c628:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c62a:	f004 faa7 	bl	8010b7c <HAL_DMA_Init>
}
 800c62e:	bd10      	pop	{r4, pc}

0800c630 <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 800c630:	6803      	ldr	r3, [r0, #0]
 800c632:	4a21      	ldr	r2, [pc, #132]	; (800c6b8 <SetupDMAInterrupts+0x88>)
{
 800c634:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c636:	4293      	cmp	r3, r2
 800c638:	d01c      	beq.n	800c674 <SetupDMAInterrupts+0x44>
 800c63a:	d80e      	bhi.n	800c65a <SetupDMAInterrupts+0x2a>
 800c63c:	4a1f      	ldr	r2, [pc, #124]	; (800c6bc <SetupDMAInterrupts+0x8c>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d026      	beq.n	800c690 <SetupDMAInterrupts+0x60>
 800c642:	d82d      	bhi.n	800c6a0 <SetupDMAInterrupts+0x70>
 800c644:	4a1e      	ldr	r2, [pc, #120]	; (800c6c0 <SetupDMAInterrupts+0x90>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d131      	bne.n	800c6ae <SetupDMAInterrupts+0x7e>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800c64a:	2009      	movs	r0, #9
 800c64c:	2200      	movs	r2, #0
 800c64e:	f004 f90d 	bl	801086c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800c652:	2009      	movs	r0, #9
 800c654:	f004 f936 	bl	80108c4 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800c658:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c65a:	4a1a      	ldr	r2, [pc, #104]	; (800c6c4 <SetupDMAInterrupts+0x94>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d017      	beq.n	800c690 <SetupDMAInterrupts+0x60>
 800c660:	d910      	bls.n	800c684 <SetupDMAInterrupts+0x54>
 800c662:	4a19      	ldr	r2, [pc, #100]	; (800c6c8 <SetupDMAInterrupts+0x98>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d005      	beq.n	800c674 <SetupDMAInterrupts+0x44>
 800c668:	4a18      	ldr	r2, [pc, #96]	; (800c6cc <SetupDMAInterrupts+0x9c>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d002      	beq.n	800c674 <SetupDMAInterrupts+0x44>
 800c66e:	4a18      	ldr	r2, [pc, #96]	; (800c6d0 <SetupDMAInterrupts+0xa0>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d1f1      	bne.n	800c658 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800c674:	2200      	movs	r2, #0
 800c676:	200b      	movs	r0, #11
 800c678:	f004 f8f8 	bl	801086c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c67c:	200b      	movs	r0, #11
 800c67e:	f004 f921 	bl	80108c4 <HAL_NVIC_EnableIRQ>
}
 800c682:	e7e9      	b.n	800c658 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800c684:	4a13      	ldr	r2, [pc, #76]	; (800c6d4 <SetupDMAInterrupts+0xa4>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d0f4      	beq.n	800c674 <SetupDMAInterrupts+0x44>
 800c68a:	4a13      	ldr	r2, [pc, #76]	; (800c6d8 <SetupDMAInterrupts+0xa8>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d1e3      	bne.n	800c658 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800c690:	2200      	movs	r2, #0
 800c692:	200a      	movs	r0, #10
 800c694:	f004 f8ea 	bl	801086c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c698:	200a      	movs	r0, #10
 800c69a:	f004 f913 	bl	80108c4 <HAL_NVIC_EnableIRQ>
			break;
 800c69e:	e7db      	b.n	800c658 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800c6a0:	4a0e      	ldr	r2, [pc, #56]	; (800c6dc <SetupDMAInterrupts+0xac>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d0e6      	beq.n	800c674 <SetupDMAInterrupts+0x44>
 800c6a6:	4a0e      	ldr	r2, [pc, #56]	; (800c6e0 <SetupDMAInterrupts+0xb0>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d1d5      	bne.n	800c658 <SetupDMAInterrupts+0x28>
 800c6ac:	e7e2      	b.n	800c674 <SetupDMAInterrupts+0x44>
 800c6ae:	4a0d      	ldr	r2, [pc, #52]	; (800c6e4 <SetupDMAInterrupts+0xb4>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d0ed      	beq.n	800c690 <SetupDMAInterrupts+0x60>
 800c6b4:	e7d0      	b.n	800c658 <SetupDMAInterrupts+0x28>
 800c6b6:	46c0      	nop			; (mov r8, r8)
 800c6b8:	4002006c 	.word	0x4002006c
 800c6bc:	40020030 	.word	0x40020030
 800c6c0:	40020008 	.word	0x40020008
 800c6c4:	4002041c 	.word	0x4002041c
 800c6c8:	40020444 	.word	0x40020444
 800c6cc:	40020458 	.word	0x40020458
 800c6d0:	40020430 	.word	0x40020430
 800c6d4:	40020080 	.word	0x40020080
 800c6d8:	40020408 	.word	0x40020408
 800c6dc:	40020044 	.word	0x40020044
 800c6e0:	40020058 	.word	0x40020058
 800c6e4:	4002001c 	.word	0x4002001c

0800c6e8 <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 800c6e8:	6803      	ldr	r3, [r0, #0]
 800c6ea:	4a1b      	ldr	r2, [pc, #108]	; (800c758 <UnSetupDMAInterrupts+0x70>)
{
 800c6ec:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d018      	beq.n	800c724 <UnSetupDMAInterrupts+0x3c>
 800c6f2:	d80a      	bhi.n	800c70a <UnSetupDMAInterrupts+0x22>
 800c6f4:	4a19      	ldr	r2, [pc, #100]	; (800c75c <UnSetupDMAInterrupts+0x74>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d01e      	beq.n	800c738 <UnSetupDMAInterrupts+0x50>
 800c6fa:	d821      	bhi.n	800c740 <UnSetupDMAInterrupts+0x58>
 800c6fc:	4a18      	ldr	r2, [pc, #96]	; (800c760 <UnSetupDMAInterrupts+0x78>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d125      	bne.n	800c74e <UnSetupDMAInterrupts+0x66>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800c702:	2009      	movs	r0, #9
 800c704:	f004 f8e8 	bl	80108d8 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800c708:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c70a:	4a16      	ldr	r2, [pc, #88]	; (800c764 <UnSetupDMAInterrupts+0x7c>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d013      	beq.n	800c738 <UnSetupDMAInterrupts+0x50>
 800c710:	d90c      	bls.n	800c72c <UnSetupDMAInterrupts+0x44>
 800c712:	4a15      	ldr	r2, [pc, #84]	; (800c768 <UnSetupDMAInterrupts+0x80>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d005      	beq.n	800c724 <UnSetupDMAInterrupts+0x3c>
 800c718:	4a14      	ldr	r2, [pc, #80]	; (800c76c <UnSetupDMAInterrupts+0x84>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d002      	beq.n	800c724 <UnSetupDMAInterrupts+0x3c>
 800c71e:	4a14      	ldr	r2, [pc, #80]	; (800c770 <UnSetupDMAInterrupts+0x88>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d1f1      	bne.n	800c708 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c724:	200b      	movs	r0, #11
 800c726:	f004 f8d7 	bl	80108d8 <HAL_NVIC_DisableIRQ>
}
 800c72a:	e7ed      	b.n	800c708 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800c72c:	4a11      	ldr	r2, [pc, #68]	; (800c774 <UnSetupDMAInterrupts+0x8c>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d0f8      	beq.n	800c724 <UnSetupDMAInterrupts+0x3c>
 800c732:	4a11      	ldr	r2, [pc, #68]	; (800c778 <UnSetupDMAInterrupts+0x90>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d1e7      	bne.n	800c708 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c738:	200a      	movs	r0, #10
 800c73a:	f004 f8cd 	bl	80108d8 <HAL_NVIC_DisableIRQ>
			break;
 800c73e:	e7e3      	b.n	800c708 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800c740:	4a0e      	ldr	r2, [pc, #56]	; (800c77c <UnSetupDMAInterrupts+0x94>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d0ee      	beq.n	800c724 <UnSetupDMAInterrupts+0x3c>
 800c746:	4a0e      	ldr	r2, [pc, #56]	; (800c780 <UnSetupDMAInterrupts+0x98>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d1dd      	bne.n	800c708 <UnSetupDMAInterrupts+0x20>
 800c74c:	e7ea      	b.n	800c724 <UnSetupDMAInterrupts+0x3c>
 800c74e:	4a0d      	ldr	r2, [pc, #52]	; (800c784 <UnSetupDMAInterrupts+0x9c>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d0f1      	beq.n	800c738 <UnSetupDMAInterrupts+0x50>
 800c754:	e7d8      	b.n	800c708 <UnSetupDMAInterrupts+0x20>
 800c756:	46c0      	nop			; (mov r8, r8)
 800c758:	4002006c 	.word	0x4002006c
 800c75c:	40020030 	.word	0x40020030
 800c760:	40020008 	.word	0x40020008
 800c764:	4002041c 	.word	0x4002041c
 800c768:	40020444 	.word	0x40020444
 800c76c:	40020458 	.word	0x40020458
 800c770:	40020430 	.word	0x40020430
 800c774:	40020080 	.word	0x40020080
 800c778:	40020408 	.word	0x40020408
 800c77c:	40020044 	.word	0x40020044
 800c780:	40020058 	.word	0x40020058
 800c784:	4002001c 	.word	0x4002001c

0800c788 <DMA_MSG_TX_UnSetup>:
{	
 800c788:	b510      	push	{r4, lr}
 800c78a:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800c78c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800c78e:	f7ff ffab 	bl	800c6e8 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800c792:	2300      	movs	r3, #0
 800c794:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c796:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800c798:	6623      	str	r3, [r4, #96]	; 0x60
}
 800c79a:	bd10      	pop	{r4, pc}

0800c79c <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c79c:	6803      	ldr	r3, [r0, #0]
 800c79e:	4ac6      	ldr	r2, [pc, #792]	; (800cab8 <RemapAndLinkDMAtoUARTRx+0x31c>)
{
 800c7a0:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d03a      	beq.n	800c81c <RemapAndLinkDMAtoUARTRx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c7a6:	4ac5      	ldr	r2, [pc, #788]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x320>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d058      	beq.n	800c85e <RemapAndLinkDMAtoUARTRx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c7ac:	4ac4      	ldr	r2, [pc, #784]	; (800cac0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d100      	bne.n	800c7b4 <RemapAndLinkDMAtoUARTRx+0x18>
 800c7b2:	e093      	b.n	800c8dc <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c7b4:	4ac3      	ldr	r2, [pc, #780]	; (800cac4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d100      	bne.n	800c7bc <RemapAndLinkDMAtoUARTRx+0x20>
 800c7ba:	e0c0      	b.n	800c93e <RemapAndLinkDMAtoUARTRx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c7bc:	4ac2      	ldr	r2, [pc, #776]	; (800cac8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d100      	bne.n	800c7c4 <RemapAndLinkDMAtoUARTRx+0x28>
 800c7c2:	e19d      	b.n	800cb00 <RemapAndLinkDMAtoUARTRx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c7c4:	4ac1      	ldr	r2, [pc, #772]	; (800cacc <RemapAndLinkDMAtoUARTRx+0x330>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d100      	bne.n	800c7cc <RemapAndLinkDMAtoUARTRx+0x30>
 800c7ca:	e1b9      	b.n	800cb40 <RemapAndLinkDMAtoUARTRx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800c7cc:	4ac0      	ldr	r2, [pc, #768]	; (800cad0 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d000      	beq.n	800c7d4 <RemapAndLinkDMAtoUARTRx+0x38>
 800c7d2:	e265      	b.n	800cca0 <RemapAndLinkDMAtoUARTRx+0x504>
 800c7d4:	680b      	ldr	r3, [r1, #0]
 800c7d6:	4abf      	ldr	r2, [pc, #764]	; (800cad4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d100      	bne.n	800c7de <RemapAndLinkDMAtoUARTRx+0x42>
 800c7dc:	e230      	b.n	800cc40 <RemapAndLinkDMAtoUARTRx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800c7de:	4abe      	ldr	r2, [pc, #760]	; (800cad8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d100      	bne.n	800c7e6 <RemapAndLinkDMAtoUARTRx+0x4a>
 800c7e4:	e237      	b.n	800cc56 <RemapAndLinkDMAtoUARTRx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800c7e6:	4abd      	ldr	r2, [pc, #756]	; (800cadc <RemapAndLinkDMAtoUARTRx+0x340>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d100      	bne.n	800c7ee <RemapAndLinkDMAtoUARTRx+0x52>
 800c7ec:	e235      	b.n	800cc5a <RemapAndLinkDMAtoUARTRx+0x4be>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800c7ee:	4abc      	ldr	r2, [pc, #752]	; (800cae0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d100      	bne.n	800c7f6 <RemapAndLinkDMAtoUARTRx+0x5a>
 800c7f4:	e23d      	b.n	800cc72 <RemapAndLinkDMAtoUARTRx+0x4d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800c7f6:	4abb      	ldr	r2, [pc, #748]	; (800cae4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d100      	bne.n	800c7fe <RemapAndLinkDMAtoUARTRx+0x62>
 800c7fc:	e245      	b.n	800cc8a <RemapAndLinkDMAtoUARTRx+0x4ee>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800c7fe:	4aba      	ldr	r2, [pc, #744]	; (800cae8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d145      	bne.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800c804:	4ab9      	ldr	r2, [pc, #740]	; (800caec <RemapAndLinkDMAtoUARTRx+0x350>)
 800c806:	23a8      	movs	r3, #168	; 0xa8
 800c808:	4db9      	ldr	r5, [pc, #740]	; (800caf0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c80a:	58d4      	ldr	r4, [r2, r3]
 800c80c:	402c      	ands	r4, r5
 800c80e:	50d4      	str	r4, [r2, r3]
 800c810:	24e0      	movs	r4, #224	; 0xe0
 800c812:	58d5      	ldr	r5, [r2, r3]
 800c814:	0124      	lsls	r4, r4, #4
 800c816:	432c      	orrs	r4, r5
 800c818:	50d4      	str	r4, [r2, r3]
 800c81a:	e039      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c81c:	680b      	ldr	r3, [r1, #0]
 800c81e:	4aad      	ldr	r2, [pc, #692]	; (800cad4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d100      	bne.n	800c826 <RemapAndLinkDMAtoUARTRx+0x8a>
 800c824:	e07e      	b.n	800c924 <RemapAndLinkDMAtoUARTRx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800c826:	4aac      	ldr	r2, [pc, #688]	; (800cad8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d100      	bne.n	800c82e <RemapAndLinkDMAtoUARTRx+0x92>
 800c82c:	e085      	b.n	800c93a <RemapAndLinkDMAtoUARTRx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800c82e:	4aab      	ldr	r2, [pc, #684]	; (800cadc <RemapAndLinkDMAtoUARTRx+0x340>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d030      	beq.n	800c896 <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800c834:	4aaa      	ldr	r2, [pc, #680]	; (800cae0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d039      	beq.n	800c8ae <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800c83a:	4aaa      	ldr	r2, [pc, #680]	; (800cae4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d042      	beq.n	800c8c6 <RemapAndLinkDMAtoUARTRx+0x12a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800c840:	4aa9      	ldr	r2, [pc, #676]	; (800cae8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d124      	bne.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800c846:	4aa9      	ldr	r2, [pc, #676]	; (800caec <RemapAndLinkDMAtoUARTRx+0x350>)
 800c848:	23a8      	movs	r3, #168	; 0xa8
 800c84a:	4da9      	ldr	r5, [pc, #676]	; (800caf0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c84c:	58d4      	ldr	r4, [r2, r3]
 800c84e:	402c      	ands	r4, r5
 800c850:	50d4      	str	r4, [r2, r3]
 800c852:	2480      	movs	r4, #128	; 0x80
 800c854:	58d5      	ldr	r5, [r2, r3]
 800c856:	0124      	lsls	r4, r4, #4
 800c858:	432c      	orrs	r4, r5
 800c85a:	50d4      	str	r4, [r2, r3]
 800c85c:	e018      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c85e:	680b      	ldr	r3, [r1, #0]
 800c860:	4a9c      	ldr	r2, [pc, #624]	; (800cad4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d100      	bne.n	800c868 <RemapAndLinkDMAtoUARTRx+0xcc>
 800c866:	e0b0      	b.n	800c9ca <RemapAndLinkDMAtoUARTRx+0x22e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800c868:	4a9b      	ldr	r2, [pc, #620]	; (800cad8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d100      	bne.n	800c870 <RemapAndLinkDMAtoUARTRx+0xd4>
 800c86e:	e0b7      	b.n	800c9e0 <RemapAndLinkDMAtoUARTRx+0x244>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800c870:	4a9a      	ldr	r2, [pc, #616]	; (800cadc <RemapAndLinkDMAtoUARTRx+0x340>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d100      	bne.n	800c878 <RemapAndLinkDMAtoUARTRx+0xdc>
 800c876:	e0bf      	b.n	800c9f8 <RemapAndLinkDMAtoUARTRx+0x25c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800c878:	4a99      	ldr	r2, [pc, #612]	; (800cae0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d100      	bne.n	800c880 <RemapAndLinkDMAtoUARTRx+0xe4>
 800c87e:	e0c7      	b.n	800ca10 <RemapAndLinkDMAtoUARTRx+0x274>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800c880:	4a98      	ldr	r2, [pc, #608]	; (800cae4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d100      	bne.n	800c888 <RemapAndLinkDMAtoUARTRx+0xec>
 800c886:	e0cf      	b.n	800ca28 <RemapAndLinkDMAtoUARTRx+0x28c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800c888:	4a97      	ldr	r2, [pc, #604]	; (800cae8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d100      	bne.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
 800c88e:	e0d6      	b.n	800ca3e <RemapAndLinkDMAtoUARTRx+0x2a2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800c890:	6641      	str	r1, [r0, #100]	; 0x64
 800c892:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c894:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800c896:	23a8      	movs	r3, #168	; 0xa8
 800c898:	4a96      	ldr	r2, [pc, #600]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c89a:	4d97      	ldr	r5, [pc, #604]	; (800caf8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c89c:	58d4      	ldr	r4, [r2, r3]
 800c89e:	402c      	ands	r4, r5
 800c8a0:	50d4      	str	r4, [r2, r3]
 800c8a2:	2480      	movs	r4, #128	; 0x80
 800c8a4:	58d5      	ldr	r5, [r2, r3]
 800c8a6:	0324      	lsls	r4, r4, #12
 800c8a8:	432c      	orrs	r4, r5
 800c8aa:	50d4      	str	r4, [r2, r3]
 800c8ac:	e7f0      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800c8ae:	23a8      	movs	r3, #168	; 0xa8
 800c8b0:	4a90      	ldr	r2, [pc, #576]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c8b2:	4d92      	ldr	r5, [pc, #584]	; (800cafc <RemapAndLinkDMAtoUARTRx+0x360>)
 800c8b4:	58d4      	ldr	r4, [r2, r3]
 800c8b6:	402c      	ands	r4, r5
 800c8b8:	50d4      	str	r4, [r2, r3]
 800c8ba:	2480      	movs	r4, #128	; 0x80
 800c8bc:	58d5      	ldr	r5, [r2, r3]
 800c8be:	0424      	lsls	r4, r4, #16
 800c8c0:	432c      	orrs	r4, r5
 800c8c2:	50d4      	str	r4, [r2, r3]
 800c8c4:	e7e4      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800c8c6:	23a8      	movs	r3, #168	; 0xa8
 800c8c8:	25f0      	movs	r5, #240	; 0xf0
 800c8ca:	4a88      	ldr	r2, [pc, #544]	; (800caec <RemapAndLinkDMAtoUARTRx+0x350>)
 800c8cc:	58d4      	ldr	r4, [r2, r3]
 800c8ce:	43ac      	bics	r4, r5
 800c8d0:	50d4      	str	r4, [r2, r3]
 800c8d2:	58d4      	ldr	r4, [r2, r3]
 800c8d4:	3d70      	subs	r5, #112	; 0x70
 800c8d6:	432c      	orrs	r4, r5
 800c8d8:	50d4      	str	r4, [r2, r3]
 800c8da:	e7d9      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c8dc:	680b      	ldr	r3, [r1, #0]
 800c8de:	4a7d      	ldr	r2, [pc, #500]	; (800cad4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d100      	bne.n	800c8e6 <RemapAndLinkDMAtoUARTRx+0x14a>
 800c8e4:	e0ad      	b.n	800ca42 <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800c8e6:	4a7c      	ldr	r2, [pc, #496]	; (800cad8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d100      	bne.n	800c8ee <RemapAndLinkDMAtoUARTRx+0x152>
 800c8ec:	e0b4      	b.n	800ca58 <RemapAndLinkDMAtoUARTRx+0x2bc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800c8ee:	4a7b      	ldr	r2, [pc, #492]	; (800cadc <RemapAndLinkDMAtoUARTRx+0x340>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d100      	bne.n	800c8f6 <RemapAndLinkDMAtoUARTRx+0x15a>
 800c8f4:	e0b2      	b.n	800ca5c <RemapAndLinkDMAtoUARTRx+0x2c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800c8f6:	4a7a      	ldr	r2, [pc, #488]	; (800cae0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d100      	bne.n	800c8fe <RemapAndLinkDMAtoUARTRx+0x162>
 800c8fc:	e0ba      	b.n	800ca74 <RemapAndLinkDMAtoUARTRx+0x2d8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800c8fe:	4a79      	ldr	r2, [pc, #484]	; (800cae4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d100      	bne.n	800c906 <RemapAndLinkDMAtoUARTRx+0x16a>
 800c904:	e0c2      	b.n	800ca8c <RemapAndLinkDMAtoUARTRx+0x2f0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800c906:	4a78      	ldr	r2, [pc, #480]	; (800cae8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d1c1      	bne.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800c90c:	4a77      	ldr	r2, [pc, #476]	; (800caec <RemapAndLinkDMAtoUARTRx+0x350>)
 800c90e:	23a8      	movs	r3, #168	; 0xa8
 800c910:	4d77      	ldr	r5, [pc, #476]	; (800caf0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c912:	58d4      	ldr	r4, [r2, r3]
 800c914:	402c      	ands	r4, r5
 800c916:	50d4      	str	r4, [r2, r3]
 800c918:	24a0      	movs	r4, #160	; 0xa0
 800c91a:	58d5      	ldr	r5, [r2, r3]
 800c91c:	0124      	lsls	r4, r4, #4
 800c91e:	432c      	orrs	r4, r5
 800c920:	50d4      	str	r4, [r2, r3]
 800c922:	e7b5      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800c924:	23a8      	movs	r3, #168	; 0xa8
 800c926:	250f      	movs	r5, #15
 800c928:	4a72      	ldr	r2, [pc, #456]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c92a:	58d4      	ldr	r4, [r2, r3]
 800c92c:	43ac      	bics	r4, r5
 800c92e:	50d4      	str	r4, [r2, r3]
 800c930:	58d4      	ldr	r4, [r2, r3]
 800c932:	3d07      	subs	r5, #7
 800c934:	432c      	orrs	r4, r5
 800c936:	50d4      	str	r4, [r2, r3]
 800c938:	e7aa      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800c93a:	4a6e      	ldr	r2, [pc, #440]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c93c:	e784      	b.n	800c848 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c93e:	680b      	ldr	r3, [r1, #0]
 800c940:	4a64      	ldr	r2, [pc, #400]	; (800cad4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d01c      	beq.n	800c980 <RemapAndLinkDMAtoUARTRx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800c946:	4a64      	ldr	r2, [pc, #400]	; (800cad8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d024      	beq.n	800c996 <RemapAndLinkDMAtoUARTRx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800c94c:	4a63      	ldr	r2, [pc, #396]	; (800cadc <RemapAndLinkDMAtoUARTRx+0x340>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d023      	beq.n	800c99a <RemapAndLinkDMAtoUARTRx+0x1fe>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800c952:	4a63      	ldr	r2, [pc, #396]	; (800cae0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d02c      	beq.n	800c9b2 <RemapAndLinkDMAtoUARTRx+0x216>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800c958:	4a62      	ldr	r2, [pc, #392]	; (800cae4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d100      	bne.n	800c960 <RemapAndLinkDMAtoUARTRx+0x1c4>
 800c95e:	e0a0      	b.n	800caa2 <RemapAndLinkDMAtoUARTRx+0x306>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800c960:	4a61      	ldr	r2, [pc, #388]	; (800cae8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d000      	beq.n	800c968 <RemapAndLinkDMAtoUARTRx+0x1cc>
 800c966:	e793      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800c968:	4a60      	ldr	r2, [pc, #384]	; (800caec <RemapAndLinkDMAtoUARTRx+0x350>)
 800c96a:	23a8      	movs	r3, #168	; 0xa8
 800c96c:	4d60      	ldr	r5, [pc, #384]	; (800caf0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c96e:	58d4      	ldr	r4, [r2, r3]
 800c970:	402c      	ands	r4, r5
 800c972:	50d4      	str	r4, [r2, r3]
 800c974:	24b0      	movs	r4, #176	; 0xb0
 800c976:	58d5      	ldr	r5, [r2, r3]
 800c978:	0124      	lsls	r4, r4, #4
 800c97a:	432c      	orrs	r4, r5
 800c97c:	50d4      	str	r4, [r2, r3]
 800c97e:	e787      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800c980:	23a8      	movs	r3, #168	; 0xa8
 800c982:	250f      	movs	r5, #15
 800c984:	4a5b      	ldr	r2, [pc, #364]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c986:	58d4      	ldr	r4, [r2, r3]
 800c988:	43ac      	bics	r4, r5
 800c98a:	50d4      	str	r4, [r2, r3]
 800c98c:	58d4      	ldr	r4, [r2, r3]
 800c98e:	3d04      	subs	r5, #4
 800c990:	432c      	orrs	r4, r5
 800c992:	50d4      	str	r4, [r2, r3]
 800c994:	e77c      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800c996:	4a57      	ldr	r2, [pc, #348]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c998:	e7e7      	b.n	800c96a <RemapAndLinkDMAtoUARTRx+0x1ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800c99a:	23a8      	movs	r3, #168	; 0xa8
 800c99c:	4a55      	ldr	r2, [pc, #340]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c99e:	4d56      	ldr	r5, [pc, #344]	; (800caf8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c9a0:	58d4      	ldr	r4, [r2, r3]
 800c9a2:	402c      	ands	r4, r5
 800c9a4:	50d4      	str	r4, [r2, r3]
 800c9a6:	24b0      	movs	r4, #176	; 0xb0
 800c9a8:	58d5      	ldr	r5, [r2, r3]
 800c9aa:	0324      	lsls	r4, r4, #12
 800c9ac:	432c      	orrs	r4, r5
 800c9ae:	50d4      	str	r4, [r2, r3]
 800c9b0:	e76e      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800c9b2:	23a8      	movs	r3, #168	; 0xa8
 800c9b4:	4a4f      	ldr	r2, [pc, #316]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c9b6:	4d51      	ldr	r5, [pc, #324]	; (800cafc <RemapAndLinkDMAtoUARTRx+0x360>)
 800c9b8:	58d4      	ldr	r4, [r2, r3]
 800c9ba:	402c      	ands	r4, r5
 800c9bc:	50d4      	str	r4, [r2, r3]
 800c9be:	24b0      	movs	r4, #176	; 0xb0
 800c9c0:	58d5      	ldr	r5, [r2, r3]
 800c9c2:	0424      	lsls	r4, r4, #16
 800c9c4:	432c      	orrs	r4, r5
 800c9c6:	50d4      	str	r4, [r2, r3]
 800c9c8:	e762      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800c9ca:	23a8      	movs	r3, #168	; 0xa8
 800c9cc:	250f      	movs	r5, #15
 800c9ce:	4a49      	ldr	r2, [pc, #292]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c9d0:	58d4      	ldr	r4, [r2, r3]
 800c9d2:	43ac      	bics	r4, r5
 800c9d4:	50d4      	str	r4, [r2, r3]
 800c9d6:	58d4      	ldr	r4, [r2, r3]
 800c9d8:	3d06      	subs	r5, #6
 800c9da:	432c      	orrs	r4, r5
 800c9dc:	50d4      	str	r4, [r2, r3]
 800c9de:	e757      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800c9e0:	4a44      	ldr	r2, [pc, #272]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800c9e2:	23a8      	movs	r3, #168	; 0xa8
 800c9e4:	4d42      	ldr	r5, [pc, #264]	; (800caf0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c9e6:	58d4      	ldr	r4, [r2, r3]
 800c9e8:	402c      	ands	r4, r5
 800c9ea:	50d4      	str	r4, [r2, r3]
 800c9ec:	2490      	movs	r4, #144	; 0x90
 800c9ee:	58d5      	ldr	r5, [r2, r3]
 800c9f0:	0124      	lsls	r4, r4, #4
 800c9f2:	432c      	orrs	r4, r5
 800c9f4:	50d4      	str	r4, [r2, r3]
 800c9f6:	e74b      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800c9f8:	23a8      	movs	r3, #168	; 0xa8
 800c9fa:	4a3e      	ldr	r2, [pc, #248]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c9fc:	4d3e      	ldr	r5, [pc, #248]	; (800caf8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c9fe:	58d4      	ldr	r4, [r2, r3]
 800ca00:	402c      	ands	r4, r5
 800ca02:	50d4      	str	r4, [r2, r3]
 800ca04:	2490      	movs	r4, #144	; 0x90
 800ca06:	58d5      	ldr	r5, [r2, r3]
 800ca08:	0324      	lsls	r4, r4, #12
 800ca0a:	432c      	orrs	r4, r5
 800ca0c:	50d4      	str	r4, [r2, r3]
 800ca0e:	e73f      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800ca10:	23a8      	movs	r3, #168	; 0xa8
 800ca12:	4a38      	ldr	r2, [pc, #224]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800ca14:	4d39      	ldr	r5, [pc, #228]	; (800cafc <RemapAndLinkDMAtoUARTRx+0x360>)
 800ca16:	58d4      	ldr	r4, [r2, r3]
 800ca18:	402c      	ands	r4, r5
 800ca1a:	50d4      	str	r4, [r2, r3]
 800ca1c:	2490      	movs	r4, #144	; 0x90
 800ca1e:	58d5      	ldr	r5, [r2, r3]
 800ca20:	0424      	lsls	r4, r4, #16
 800ca22:	432c      	orrs	r4, r5
 800ca24:	50d4      	str	r4, [r2, r3]
 800ca26:	e733      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800ca28:	23a8      	movs	r3, #168	; 0xa8
 800ca2a:	25f0      	movs	r5, #240	; 0xf0
 800ca2c:	4a2f      	ldr	r2, [pc, #188]	; (800caec <RemapAndLinkDMAtoUARTRx+0x350>)
 800ca2e:	58d4      	ldr	r4, [r2, r3]
 800ca30:	43ac      	bics	r4, r5
 800ca32:	50d4      	str	r4, [r2, r3]
 800ca34:	58d4      	ldr	r4, [r2, r3]
 800ca36:	3d60      	subs	r5, #96	; 0x60
 800ca38:	432c      	orrs	r4, r5
 800ca3a:	50d4      	str	r4, [r2, r3]
 800ca3c:	e728      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800ca3e:	4a2b      	ldr	r2, [pc, #172]	; (800caec <RemapAndLinkDMAtoUARTRx+0x350>)
 800ca40:	e7cf      	b.n	800c9e2 <RemapAndLinkDMAtoUARTRx+0x246>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800ca42:	23a8      	movs	r3, #168	; 0xa8
 800ca44:	250f      	movs	r5, #15
 800ca46:	4a2b      	ldr	r2, [pc, #172]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800ca48:	58d4      	ldr	r4, [r2, r3]
 800ca4a:	43ac      	bics	r4, r5
 800ca4c:	50d4      	str	r4, [r2, r3]
 800ca4e:	58d4      	ldr	r4, [r2, r3]
 800ca50:	3d05      	subs	r5, #5
 800ca52:	432c      	orrs	r4, r5
 800ca54:	50d4      	str	r4, [r2, r3]
 800ca56:	e71b      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800ca58:	4a26      	ldr	r2, [pc, #152]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800ca5a:	e758      	b.n	800c90e <RemapAndLinkDMAtoUARTRx+0x172>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800ca5c:	23a8      	movs	r3, #168	; 0xa8
 800ca5e:	4a25      	ldr	r2, [pc, #148]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800ca60:	4d25      	ldr	r5, [pc, #148]	; (800caf8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800ca62:	58d4      	ldr	r4, [r2, r3]
 800ca64:	402c      	ands	r4, r5
 800ca66:	50d4      	str	r4, [r2, r3]
 800ca68:	24a0      	movs	r4, #160	; 0xa0
 800ca6a:	58d5      	ldr	r5, [r2, r3]
 800ca6c:	0324      	lsls	r4, r4, #12
 800ca6e:	432c      	orrs	r4, r5
 800ca70:	50d4      	str	r4, [r2, r3]
 800ca72:	e70d      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800ca74:	23a8      	movs	r3, #168	; 0xa8
 800ca76:	4a1f      	ldr	r2, [pc, #124]	; (800caf4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800ca78:	4d20      	ldr	r5, [pc, #128]	; (800cafc <RemapAndLinkDMAtoUARTRx+0x360>)
 800ca7a:	58d4      	ldr	r4, [r2, r3]
 800ca7c:	402c      	ands	r4, r5
 800ca7e:	50d4      	str	r4, [r2, r3]
 800ca80:	24a0      	movs	r4, #160	; 0xa0
 800ca82:	58d5      	ldr	r5, [r2, r3]
 800ca84:	0424      	lsls	r4, r4, #16
 800ca86:	432c      	orrs	r4, r5
 800ca88:	50d4      	str	r4, [r2, r3]
 800ca8a:	e701      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800ca8c:	23a8      	movs	r3, #168	; 0xa8
 800ca8e:	25f0      	movs	r5, #240	; 0xf0
 800ca90:	4a16      	ldr	r2, [pc, #88]	; (800caec <RemapAndLinkDMAtoUARTRx+0x350>)
 800ca92:	58d4      	ldr	r4, [r2, r3]
 800ca94:	43ac      	bics	r4, r5
 800ca96:	50d4      	str	r4, [r2, r3]
 800ca98:	58d4      	ldr	r4, [r2, r3]
 800ca9a:	3d50      	subs	r5, #80	; 0x50
 800ca9c:	432c      	orrs	r4, r5
 800ca9e:	50d4      	str	r4, [r2, r3]
 800caa0:	e6f6      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800caa2:	23a8      	movs	r3, #168	; 0xa8
 800caa4:	25f0      	movs	r5, #240	; 0xf0
 800caa6:	4a11      	ldr	r2, [pc, #68]	; (800caec <RemapAndLinkDMAtoUARTRx+0x350>)
 800caa8:	58d4      	ldr	r4, [r2, r3]
 800caaa:	43ac      	bics	r4, r5
 800caac:	50d4      	str	r4, [r2, r3]
 800caae:	58d4      	ldr	r4, [r2, r3]
 800cab0:	3d40      	subs	r5, #64	; 0x40
 800cab2:	432c      	orrs	r4, r5
 800cab4:	50d4      	str	r4, [r2, r3]
 800cab6:	e6eb      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
 800cab8:	40013800 	.word	0x40013800
 800cabc:	40004400 	.word	0x40004400
 800cac0:	40004800 	.word	0x40004800
 800cac4:	40004c00 	.word	0x40004c00
 800cac8:	40005000 	.word	0x40005000
 800cacc:	40011400 	.word	0x40011400
 800cad0:	40011800 	.word	0x40011800
 800cad4:	40020008 	.word	0x40020008
 800cad8:	40020030 	.word	0x40020030
 800cadc:	40020058 	.word	0x40020058
 800cae0:	4002006c 	.word	0x4002006c
 800cae4:	4002041c 	.word	0x4002041c
 800cae8:	40020430 	.word	0x40020430
 800caec:	40020400 	.word	0x40020400
 800caf0:	fffff0ff 	.word	0xfffff0ff
 800caf4:	40020000 	.word	0x40020000
 800caf8:	fff0ffff 	.word	0xfff0ffff
 800cafc:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800cb00:	680b      	ldr	r3, [r1, #0]
 800cb02:	4a8e      	ldr	r2, [pc, #568]	; (800cd3c <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d03b      	beq.n	800cb80 <RemapAndLinkDMAtoUARTRx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800cb08:	4a8d      	ldr	r2, [pc, #564]	; (800cd40 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d043      	beq.n	800cb96 <RemapAndLinkDMAtoUARTRx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800cb0e:	4a8d      	ldr	r2, [pc, #564]	; (800cd44 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d042      	beq.n	800cb9a <RemapAndLinkDMAtoUARTRx+0x3fe>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800cb14:	4a8c      	ldr	r2, [pc, #560]	; (800cd48 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d04b      	beq.n	800cbb2 <RemapAndLinkDMAtoUARTRx+0x416>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800cb1a:	4a8c      	ldr	r2, [pc, #560]	; (800cd4c <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d054      	beq.n	800cbca <RemapAndLinkDMAtoUARTRx+0x42e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800cb20:	4a8b      	ldr	r2, [pc, #556]	; (800cd50 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d000      	beq.n	800cb28 <RemapAndLinkDMAtoUARTRx+0x38c>
 800cb26:	e6b3      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800cb28:	4a8a      	ldr	r2, [pc, #552]	; (800cd54 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800cb2a:	23a8      	movs	r3, #168	; 0xa8
 800cb2c:	4d8a      	ldr	r5, [pc, #552]	; (800cd58 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800cb2e:	58d4      	ldr	r4, [r2, r3]
 800cb30:	402c      	ands	r4, r5
 800cb32:	50d4      	str	r4, [r2, r3]
 800cb34:	24c0      	movs	r4, #192	; 0xc0
 800cb36:	58d5      	ldr	r5, [r2, r3]
 800cb38:	0124      	lsls	r4, r4, #4
 800cb3a:	432c      	orrs	r4, r5
 800cb3c:	50d4      	str	r4, [r2, r3]
 800cb3e:	e6a7      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800cb40:	680b      	ldr	r3, [r1, #0]
 800cb42:	4a7e      	ldr	r2, [pc, #504]	; (800cd3c <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d04b      	beq.n	800cbe0 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800cb48:	4a7d      	ldr	r2, [pc, #500]	; (800cd40 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d053      	beq.n	800cbf6 <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800cb4e:	4a7d      	ldr	r2, [pc, #500]	; (800cd44 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d052      	beq.n	800cbfa <RemapAndLinkDMAtoUARTRx+0x45e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800cb54:	4a7c      	ldr	r2, [pc, #496]	; (800cd48 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d05b      	beq.n	800cc12 <RemapAndLinkDMAtoUARTRx+0x476>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800cb5a:	4a7c      	ldr	r2, [pc, #496]	; (800cd4c <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d064      	beq.n	800cc2a <RemapAndLinkDMAtoUARTRx+0x48e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800cb60:	4a7b      	ldr	r2, [pc, #492]	; (800cd50 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d000      	beq.n	800cb68 <RemapAndLinkDMAtoUARTRx+0x3cc>
 800cb66:	e693      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800cb68:	4a7a      	ldr	r2, [pc, #488]	; (800cd54 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800cb6a:	23a8      	movs	r3, #168	; 0xa8
 800cb6c:	4d7a      	ldr	r5, [pc, #488]	; (800cd58 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800cb6e:	58d4      	ldr	r4, [r2, r3]
 800cb70:	402c      	ands	r4, r5
 800cb72:	50d4      	str	r4, [r2, r3]
 800cb74:	24d0      	movs	r4, #208	; 0xd0
 800cb76:	58d5      	ldr	r5, [r2, r3]
 800cb78:	0124      	lsls	r4, r4, #4
 800cb7a:	432c      	orrs	r4, r5
 800cb7c:	50d4      	str	r4, [r2, r3]
 800cb7e:	e687      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800cb80:	23a8      	movs	r3, #168	; 0xa8
 800cb82:	250f      	movs	r5, #15
 800cb84:	4a75      	ldr	r2, [pc, #468]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800cb86:	58d4      	ldr	r4, [r2, r3]
 800cb88:	43ac      	bics	r4, r5
 800cb8a:	50d4      	str	r4, [r2, r3]
 800cb8c:	58d4      	ldr	r4, [r2, r3]
 800cb8e:	3d03      	subs	r5, #3
 800cb90:	432c      	orrs	r4, r5
 800cb92:	50d4      	str	r4, [r2, r3]
 800cb94:	e67c      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800cb96:	4a71      	ldr	r2, [pc, #452]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800cb98:	e7c7      	b.n	800cb2a <RemapAndLinkDMAtoUARTRx+0x38e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800cb9a:	23a8      	movs	r3, #168	; 0xa8
 800cb9c:	4a6f      	ldr	r2, [pc, #444]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800cb9e:	4d70      	ldr	r5, [pc, #448]	; (800cd60 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800cba0:	58d4      	ldr	r4, [r2, r3]
 800cba2:	402c      	ands	r4, r5
 800cba4:	50d4      	str	r4, [r2, r3]
 800cba6:	24c0      	movs	r4, #192	; 0xc0
 800cba8:	58d5      	ldr	r5, [r2, r3]
 800cbaa:	0324      	lsls	r4, r4, #12
 800cbac:	432c      	orrs	r4, r5
 800cbae:	50d4      	str	r4, [r2, r3]
 800cbb0:	e66e      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800cbb2:	23a8      	movs	r3, #168	; 0xa8
 800cbb4:	4a69      	ldr	r2, [pc, #420]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800cbb6:	4d6b      	ldr	r5, [pc, #428]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800cbb8:	58d4      	ldr	r4, [r2, r3]
 800cbba:	402c      	ands	r4, r5
 800cbbc:	50d4      	str	r4, [r2, r3]
 800cbbe:	24c0      	movs	r4, #192	; 0xc0
 800cbc0:	58d5      	ldr	r5, [r2, r3]
 800cbc2:	0424      	lsls	r4, r4, #16
 800cbc4:	432c      	orrs	r4, r5
 800cbc6:	50d4      	str	r4, [r2, r3]
 800cbc8:	e662      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800cbca:	23a8      	movs	r3, #168	; 0xa8
 800cbcc:	25f0      	movs	r5, #240	; 0xf0
 800cbce:	4a61      	ldr	r2, [pc, #388]	; (800cd54 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800cbd0:	58d4      	ldr	r4, [r2, r3]
 800cbd2:	43ac      	bics	r4, r5
 800cbd4:	50d4      	str	r4, [r2, r3]
 800cbd6:	58d4      	ldr	r4, [r2, r3]
 800cbd8:	3d30      	subs	r5, #48	; 0x30
 800cbda:	432c      	orrs	r4, r5
 800cbdc:	50d4      	str	r4, [r2, r3]
 800cbde:	e657      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800cbe0:	23a8      	movs	r3, #168	; 0xa8
 800cbe2:	250f      	movs	r5, #15
 800cbe4:	4a5d      	ldr	r2, [pc, #372]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800cbe6:	58d4      	ldr	r4, [r2, r3]
 800cbe8:	43ac      	bics	r4, r5
 800cbea:	50d4      	str	r4, [r2, r3]
 800cbec:	58d4      	ldr	r4, [r2, r3]
 800cbee:	3d02      	subs	r5, #2
 800cbf0:	432c      	orrs	r4, r5
 800cbf2:	50d4      	str	r4, [r2, r3]
 800cbf4:	e64c      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800cbf6:	4a59      	ldr	r2, [pc, #356]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800cbf8:	e7b7      	b.n	800cb6a <RemapAndLinkDMAtoUARTRx+0x3ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800cbfa:	23a8      	movs	r3, #168	; 0xa8
 800cbfc:	4a57      	ldr	r2, [pc, #348]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800cbfe:	4d58      	ldr	r5, [pc, #352]	; (800cd60 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800cc00:	58d4      	ldr	r4, [r2, r3]
 800cc02:	402c      	ands	r4, r5
 800cc04:	50d4      	str	r4, [r2, r3]
 800cc06:	24d0      	movs	r4, #208	; 0xd0
 800cc08:	58d5      	ldr	r5, [r2, r3]
 800cc0a:	0324      	lsls	r4, r4, #12
 800cc0c:	432c      	orrs	r4, r5
 800cc0e:	50d4      	str	r4, [r2, r3]
 800cc10:	e63e      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800cc12:	23a8      	movs	r3, #168	; 0xa8
 800cc14:	4a51      	ldr	r2, [pc, #324]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800cc16:	4d53      	ldr	r5, [pc, #332]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800cc18:	58d4      	ldr	r4, [r2, r3]
 800cc1a:	402c      	ands	r4, r5
 800cc1c:	50d4      	str	r4, [r2, r3]
 800cc1e:	24d0      	movs	r4, #208	; 0xd0
 800cc20:	58d5      	ldr	r5, [r2, r3]
 800cc22:	0424      	lsls	r4, r4, #16
 800cc24:	432c      	orrs	r4, r5
 800cc26:	50d4      	str	r4, [r2, r3]
 800cc28:	e632      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800cc2a:	23a8      	movs	r3, #168	; 0xa8
 800cc2c:	25f0      	movs	r5, #240	; 0xf0
 800cc2e:	4a49      	ldr	r2, [pc, #292]	; (800cd54 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800cc30:	58d4      	ldr	r4, [r2, r3]
 800cc32:	43ac      	bics	r4, r5
 800cc34:	50d4      	str	r4, [r2, r3]
 800cc36:	58d4      	ldr	r4, [r2, r3]
 800cc38:	3d20      	subs	r5, #32
 800cc3a:	432c      	orrs	r4, r5
 800cc3c:	50d4      	str	r4, [r2, r3]
 800cc3e:	e627      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800cc40:	23a8      	movs	r3, #168	; 0xa8
 800cc42:	250f      	movs	r5, #15
 800cc44:	4a45      	ldr	r2, [pc, #276]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800cc46:	58d4      	ldr	r4, [r2, r3]
 800cc48:	43ac      	bics	r4, r5
 800cc4a:	50d4      	str	r4, [r2, r3]
 800cc4c:	58d4      	ldr	r4, [r2, r3]
 800cc4e:	3d01      	subs	r5, #1
 800cc50:	432c      	orrs	r4, r5
 800cc52:	50d4      	str	r4, [r2, r3]
 800cc54:	e61c      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800cc56:	4a41      	ldr	r2, [pc, #260]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800cc58:	e5d5      	b.n	800c806 <RemapAndLinkDMAtoUARTRx+0x6a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800cc5a:	23a8      	movs	r3, #168	; 0xa8
 800cc5c:	4a3f      	ldr	r2, [pc, #252]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800cc5e:	4d40      	ldr	r5, [pc, #256]	; (800cd60 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800cc60:	58d4      	ldr	r4, [r2, r3]
 800cc62:	402c      	ands	r4, r5
 800cc64:	50d4      	str	r4, [r2, r3]
 800cc66:	24e0      	movs	r4, #224	; 0xe0
 800cc68:	58d5      	ldr	r5, [r2, r3]
 800cc6a:	0324      	lsls	r4, r4, #12
 800cc6c:	432c      	orrs	r4, r5
 800cc6e:	50d4      	str	r4, [r2, r3]
 800cc70:	e60e      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800cc72:	23a8      	movs	r3, #168	; 0xa8
 800cc74:	4a39      	ldr	r2, [pc, #228]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800cc76:	4d3b      	ldr	r5, [pc, #236]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800cc78:	58d4      	ldr	r4, [r2, r3]
 800cc7a:	402c      	ands	r4, r5
 800cc7c:	50d4      	str	r4, [r2, r3]
 800cc7e:	24e0      	movs	r4, #224	; 0xe0
 800cc80:	58d5      	ldr	r5, [r2, r3]
 800cc82:	0424      	lsls	r4, r4, #16
 800cc84:	432c      	orrs	r4, r5
 800cc86:	50d4      	str	r4, [r2, r3]
 800cc88:	e602      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800cc8a:	23a8      	movs	r3, #168	; 0xa8
 800cc8c:	25f0      	movs	r5, #240	; 0xf0
 800cc8e:	4a31      	ldr	r2, [pc, #196]	; (800cd54 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800cc90:	58d4      	ldr	r4, [r2, r3]
 800cc92:	43ac      	bics	r4, r5
 800cc94:	50d4      	str	r4, [r2, r3]
 800cc96:	58d4      	ldr	r4, [r2, r3]
 800cc98:	3d10      	subs	r5, #16
 800cc9a:	432c      	orrs	r4, r5
 800cc9c:	50d4      	str	r4, [r2, r3]
 800cc9e:	e5f7      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800cca0:	4a31      	ldr	r2, [pc, #196]	; (800cd68 <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d000      	beq.n	800cca8 <RemapAndLinkDMAtoUARTRx+0x50c>
 800cca6:	e5f3      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
 800cca8:	680b      	ldr	r3, [r1, #0]
 800ccaa:	4a24      	ldr	r2, [pc, #144]	; (800cd3c <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d01b      	beq.n	800cce8 <RemapAndLinkDMAtoUARTRx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800ccb0:	4a23      	ldr	r2, [pc, #140]	; (800cd40 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d022      	beq.n	800ccfc <RemapAndLinkDMAtoUARTRx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800ccb6:	4a23      	ldr	r2, [pc, #140]	; (800cd44 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d021      	beq.n	800cd00 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800ccbc:	4a22      	ldr	r2, [pc, #136]	; (800cd48 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d02a      	beq.n	800cd18 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800ccc2:	4a22      	ldr	r2, [pc, #136]	; (800cd4c <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d033      	beq.n	800cd30 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800ccc8:	4a21      	ldr	r2, [pc, #132]	; (800cd50 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d000      	beq.n	800ccd0 <RemapAndLinkDMAtoUARTRx+0x534>
 800ccce:	e5df      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800ccd0:	4a20      	ldr	r2, [pc, #128]	; (800cd54 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800ccd2:	23a8      	movs	r3, #168	; 0xa8
 800ccd4:	4d20      	ldr	r5, [pc, #128]	; (800cd58 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800ccd6:	58d4      	ldr	r4, [r2, r3]
 800ccd8:	402c      	ands	r4, r5
 800ccda:	50d4      	str	r4, [r2, r3]
 800ccdc:	24f0      	movs	r4, #240	; 0xf0
 800ccde:	58d5      	ldr	r5, [r2, r3]
 800cce0:	0124      	lsls	r4, r4, #4
 800cce2:	432c      	orrs	r4, r5
 800cce4:	50d4      	str	r4, [r2, r3]
 800cce6:	e5d3      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800cce8:	23a8      	movs	r3, #168	; 0xa8
 800ccea:	260f      	movs	r6, #15
 800ccec:	4a1b      	ldr	r2, [pc, #108]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ccee:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800ccf0:	43b5      	bics	r5, r6
 800ccf2:	50d5      	str	r5, [r2, r3]
 800ccf4:	58d4      	ldr	r4, [r2, r3]
 800ccf6:	4334      	orrs	r4, r6
 800ccf8:	50d4      	str	r4, [r2, r3]
 800ccfa:	e5c9      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800ccfc:	4a17      	ldr	r2, [pc, #92]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800ccfe:	e7e8      	b.n	800ccd2 <RemapAndLinkDMAtoUARTRx+0x536>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800cd00:	23a8      	movs	r3, #168	; 0xa8
 800cd02:	4a16      	ldr	r2, [pc, #88]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800cd04:	4d16      	ldr	r5, [pc, #88]	; (800cd60 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800cd06:	58d4      	ldr	r4, [r2, r3]
 800cd08:	402c      	ands	r4, r5
 800cd0a:	50d4      	str	r4, [r2, r3]
 800cd0c:	24f0      	movs	r4, #240	; 0xf0
 800cd0e:	58d5      	ldr	r5, [r2, r3]
 800cd10:	0324      	lsls	r4, r4, #12
 800cd12:	432c      	orrs	r4, r5
 800cd14:	50d4      	str	r4, [r2, r3]
 800cd16:	e5bb      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800cd18:	23a8      	movs	r3, #168	; 0xa8
 800cd1a:	4a10      	ldr	r2, [pc, #64]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800cd1c:	4d11      	ldr	r5, [pc, #68]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800cd1e:	58d4      	ldr	r4, [r2, r3]
 800cd20:	402c      	ands	r4, r5
 800cd22:	50d4      	str	r4, [r2, r3]
 800cd24:	24f0      	movs	r4, #240	; 0xf0
 800cd26:	58d5      	ldr	r5, [r2, r3]
 800cd28:	0424      	lsls	r4, r4, #16
 800cd2a:	432c      	orrs	r4, r5
 800cd2c:	50d4      	str	r4, [r2, r3]
 800cd2e:	e5af      	b.n	800c890 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800cd30:	23a8      	movs	r3, #168	; 0xa8
 800cd32:	4a08      	ldr	r2, [pc, #32]	; (800cd54 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800cd34:	26f0      	movs	r6, #240	; 0xf0
 800cd36:	58d5      	ldr	r5, [r2, r3]
 800cd38:	e7da      	b.n	800ccf0 <RemapAndLinkDMAtoUARTRx+0x554>
 800cd3a:	46c0      	nop			; (mov r8, r8)
 800cd3c:	40020008 	.word	0x40020008
 800cd40:	40020030 	.word	0x40020030
 800cd44:	40020058 	.word	0x40020058
 800cd48:	4002006c 	.word	0x4002006c
 800cd4c:	4002041c 	.word	0x4002041c
 800cd50:	40020430 	.word	0x40020430
 800cd54:	40020400 	.word	0x40020400
 800cd58:	fffff0ff 	.word	0xfffff0ff
 800cd5c:	40020000 	.word	0x40020000
 800cd60:	fff0ffff 	.word	0xfff0ffff
 800cd64:	ff0fffff 	.word	0xff0fffff
 800cd68:	40011c00 	.word	0x40011c00

0800cd6c <DMA_MSG_RX_Setup>:
{	
 800cd6c:	b570      	push	{r4, r5, r6, lr}
 800cd6e:	000d      	movs	r5, r1
 800cd70:	0004      	movs	r4, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800cd72:	f7ff fd13 	bl	800c79c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800cd76:	0028      	movs	r0, r5
 800cd78:	2100      	movs	r1, #0
 800cd7a:	f7ff fc59 	bl	800c630 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800cd7e:	0020      	movs	r0, r4
 800cd80:	f7fe fd30 	bl	800b7e4 <GetPort>
 800cd84:	3801      	subs	r0, #1
 800cd86:	0041      	lsls	r1, r0, #1
 800cd88:	1809      	adds	r1, r1, r0
 800cd8a:	4804      	ldr	r0, [pc, #16]	; (800cd9c <DMA_MSG_RX_Setup+0x30>)
 800cd8c:	0189      	lsls	r1, r1, #6
 800cd8e:	1809      	adds	r1, r1, r0
 800cd90:	22c0      	movs	r2, #192	; 0xc0
 800cd92:	0020      	movs	r0, r4
 800cd94:	f006 fa4e 	bl	8013234 <HAL_UART_Receive_DMA>
}
 800cd98:	bd70      	pop	{r4, r5, r6, pc}
 800cd9a:	46c0      	nop			; (mov r8, r8)
 800cd9c:	20001340 	.word	0x20001340

0800cda0 <SetupMessagingRxDMAs>:
{	
 800cda0:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800cda2:	4c14      	ldr	r4, [pc, #80]	; (800cdf4 <SetupMessagingRxDMAs+0x54>)
 800cda4:	7863      	ldrb	r3, [r4, #1]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d01f      	beq.n	800cdea <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P2] == FREE)	
 800cdaa:	78a3      	ldrb	r3, [r4, #2]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d017      	beq.n	800cde0 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P3] == FREE)
 800cdb0:	78e3      	ldrb	r3, [r4, #3]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00f      	beq.n	800cdd6 <SetupMessagingRxDMAs+0x36>
	if (portStatus[P4] == FREE)
 800cdb6:	7923      	ldrb	r3, [r4, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d007      	beq.n	800cdcc <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P5] == FREE)
 800cdbc:	7963      	ldrb	r3, [r4, #5]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d103      	bne.n	800cdca <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800cdc2:	490d      	ldr	r1, [pc, #52]	; (800cdf8 <SetupMessagingRxDMAs+0x58>)
 800cdc4:	480d      	ldr	r0, [pc, #52]	; (800cdfc <SetupMessagingRxDMAs+0x5c>)
 800cdc6:	f7ff ffd1 	bl	800cd6c <DMA_MSG_RX_Setup>
}
 800cdca:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800cdcc:	490c      	ldr	r1, [pc, #48]	; (800ce00 <SetupMessagingRxDMAs+0x60>)
 800cdce:	480d      	ldr	r0, [pc, #52]	; (800ce04 <SetupMessagingRxDMAs+0x64>)
 800cdd0:	f7ff ffcc 	bl	800cd6c <DMA_MSG_RX_Setup>
 800cdd4:	e7f2      	b.n	800cdbc <SetupMessagingRxDMAs+0x1c>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800cdd6:	490c      	ldr	r1, [pc, #48]	; (800ce08 <SetupMessagingRxDMAs+0x68>)
 800cdd8:	480c      	ldr	r0, [pc, #48]	; (800ce0c <SetupMessagingRxDMAs+0x6c>)
 800cdda:	f7ff ffc7 	bl	800cd6c <DMA_MSG_RX_Setup>
 800cdde:	e7ea      	b.n	800cdb6 <SetupMessagingRxDMAs+0x16>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800cde0:	490b      	ldr	r1, [pc, #44]	; (800ce10 <SetupMessagingRxDMAs+0x70>)
 800cde2:	480c      	ldr	r0, [pc, #48]	; (800ce14 <SetupMessagingRxDMAs+0x74>)
 800cde4:	f7ff ffc2 	bl	800cd6c <DMA_MSG_RX_Setup>
 800cde8:	e7e2      	b.n	800cdb0 <SetupMessagingRxDMAs+0x10>
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800cdea:	490b      	ldr	r1, [pc, #44]	; (800ce18 <SetupMessagingRxDMAs+0x78>)
 800cdec:	480b      	ldr	r0, [pc, #44]	; (800ce1c <SetupMessagingRxDMAs+0x7c>)
 800cdee:	f7ff ffbd 	bl	800cd6c <DMA_MSG_RX_Setup>
 800cdf2:	e7da      	b.n	800cdaa <SetupMessagingRxDMAs+0xa>
 800cdf4:	20000c2c 	.word	0x20000c2c
 800cdf8:	20001d74 	.word	0x20001d74
 800cdfc:	20006f18 	.word	0x20006f18
 800ce00:	20001d3c 	.word	0x20001d3c
 800ce04:	20006df0 	.word	0x20006df0
 800ce08:	20001d04 	.word	0x20001d04
 800ce0c:	20006f98 	.word	0x20006f98
 800ce10:	20001ccc 	.word	0x20001ccc
 800ce14:	20007010 	.word	0x20007010
 800ce18:	20001c94 	.word	0x20001c94
 800ce1c:	20006ea8 	.word	0x20006ea8

0800ce20 <DMA_STREAM_Setup>:
{	
 800ce20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce22:	0016      	movs	r6, r2
 800ce24:	0005      	movs	r5, r0
 800ce26:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800ce28:	f7fe fcdc 	bl	800b7e4 <GetPort>
	hDMA = &streamDMA[port-1];
 800ce2c:	3801      	subs	r0, #1
 800ce2e:	00c4      	lsls	r4, r0, #3
 800ce30:	1a24      	subs	r4, r4, r0
 800ce32:	480a      	ldr	r0, [pc, #40]	; (800ce5c <DMA_STREAM_Setup+0x3c>)
 800ce34:	00e4      	lsls	r4, r4, #3
 800ce36:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800ce38:	0021      	movs	r1, r4
 800ce3a:	0028      	movs	r0, r5
 800ce3c:	f7ff fcae 	bl	800c79c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800ce40:	0020      	movs	r0, r4
 800ce42:	2101      	movs	r1, #1
 800ce44:	f7ff fbf4 	bl	800c630 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800ce48:	2369      	movs	r3, #105	; 0x69
 800ce4a:	2201      	movs	r2, #1
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800ce4c:	6839      	ldr	r1, [r7, #0]
	huartSrc->State = HAL_UART_STATE_READY;
 800ce4e:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800ce50:	0028      	movs	r0, r5
 800ce52:	0032      	movs	r2, r6
 800ce54:	3128      	adds	r1, #40	; 0x28
 800ce56:	f006 f9ed 	bl	8013234 <HAL_UART_Receive_DMA>
}
 800ce5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce5c:	20001a9c 	.word	0x20001a9c

0800ce60 <RemapAndLinkDMAtoUARTTx>:
/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800ce60:	6803      	ldr	r3, [r0, #0]
 800ce62:	4ac6      	ldr	r2, [pc, #792]	; (800d17c <RemapAndLinkDMAtoUARTTx+0x31c>)
{
 800ce64:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d03a      	beq.n	800cee0 <RemapAndLinkDMAtoUARTTx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800ce6a:	4ac5      	ldr	r2, [pc, #788]	; (800d180 <RemapAndLinkDMAtoUARTTx+0x320>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d058      	beq.n	800cf22 <RemapAndLinkDMAtoUARTTx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800ce70:	4ac4      	ldr	r2, [pc, #784]	; (800d184 <RemapAndLinkDMAtoUARTTx+0x324>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d100      	bne.n	800ce78 <RemapAndLinkDMAtoUARTTx+0x18>
 800ce76:	e093      	b.n	800cfa0 <RemapAndLinkDMAtoUARTTx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800ce78:	4ac3      	ldr	r2, [pc, #780]	; (800d188 <RemapAndLinkDMAtoUARTTx+0x328>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d100      	bne.n	800ce80 <RemapAndLinkDMAtoUARTTx+0x20>
 800ce7e:	e0c0      	b.n	800d002 <RemapAndLinkDMAtoUARTTx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800ce80:	4ac2      	ldr	r2, [pc, #776]	; (800d18c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d100      	bne.n	800ce88 <RemapAndLinkDMAtoUARTTx+0x28>
 800ce86:	e19d      	b.n	800d1c4 <RemapAndLinkDMAtoUARTTx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800ce88:	4ac1      	ldr	r2, [pc, #772]	; (800d190 <RemapAndLinkDMAtoUARTTx+0x330>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d100      	bne.n	800ce90 <RemapAndLinkDMAtoUARTTx+0x30>
 800ce8e:	e1b9      	b.n	800d204 <RemapAndLinkDMAtoUARTTx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800ce90:	4ac0      	ldr	r2, [pc, #768]	; (800d194 <RemapAndLinkDMAtoUARTTx+0x334>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d000      	beq.n	800ce98 <RemapAndLinkDMAtoUARTTx+0x38>
 800ce96:	e265      	b.n	800d364 <RemapAndLinkDMAtoUARTTx+0x504>
 800ce98:	680b      	ldr	r3, [r1, #0]
 800ce9a:	4abf      	ldr	r2, [pc, #764]	; (800d198 <RemapAndLinkDMAtoUARTTx+0x338>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d100      	bne.n	800cea2 <RemapAndLinkDMAtoUARTTx+0x42>
 800cea0:	e230      	b.n	800d304 <RemapAndLinkDMAtoUARTTx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800cea2:	4abe      	ldr	r2, [pc, #760]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x33c>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d100      	bne.n	800ceaa <RemapAndLinkDMAtoUARTTx+0x4a>
 800cea8:	e237      	b.n	800d31a <RemapAndLinkDMAtoUARTTx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800ceaa:	4abd      	ldr	r2, [pc, #756]	; (800d1a0 <RemapAndLinkDMAtoUARTTx+0x340>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d100      	bne.n	800ceb2 <RemapAndLinkDMAtoUARTTx+0x52>
 800ceb0:	e23f      	b.n	800d332 <RemapAndLinkDMAtoUARTTx+0x4d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800ceb2:	4abc      	ldr	r2, [pc, #752]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x344>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d100      	bne.n	800ceba <RemapAndLinkDMAtoUARTTx+0x5a>
 800ceb8:	e247      	b.n	800d34a <RemapAndLinkDMAtoUARTTx+0x4ea>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800ceba:	4abb      	ldr	r2, [pc, #748]	; (800d1a8 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d100      	bne.n	800cec2 <RemapAndLinkDMAtoUARTTx+0x62>
 800cec0:	e24e      	b.n	800d360 <RemapAndLinkDMAtoUARTTx+0x500>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800cec2:	4aba      	ldr	r2, [pc, #744]	; (800d1ac <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d145      	bne.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800cec8:	23a8      	movs	r3, #168	; 0xa8
 800ceca:	4ab9      	ldr	r2, [pc, #740]	; (800d1b0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cecc:	4db9      	ldr	r5, [pc, #740]	; (800d1b4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800cece:	58d4      	ldr	r4, [r2, r3]
 800ced0:	402c      	ands	r4, r5
 800ced2:	50d4      	str	r4, [r2, r3]
 800ced4:	24e0      	movs	r4, #224	; 0xe0
 800ced6:	58d5      	ldr	r5, [r2, r3]
 800ced8:	0324      	lsls	r4, r4, #12
 800ceda:	432c      	orrs	r4, r5
 800cedc:	50d4      	str	r4, [r2, r3]
 800cede:	e039      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800cee0:	680b      	ldr	r3, [r1, #0]
 800cee2:	4aad      	ldr	r2, [pc, #692]	; (800d198 <RemapAndLinkDMAtoUARTTx+0x338>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d100      	bne.n	800ceea <RemapAndLinkDMAtoUARTTx+0x8a>
 800cee8:	e07e      	b.n	800cfe8 <RemapAndLinkDMAtoUARTTx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800ceea:	4aac      	ldr	r2, [pc, #688]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d100      	bne.n	800cef2 <RemapAndLinkDMAtoUARTTx+0x92>
 800cef0:	e085      	b.n	800cffe <RemapAndLinkDMAtoUARTTx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800cef2:	4aab      	ldr	r2, [pc, #684]	; (800d1a0 <RemapAndLinkDMAtoUARTTx+0x340>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d030      	beq.n	800cf5a <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800cef8:	4aaa      	ldr	r2, [pc, #680]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x344>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d039      	beq.n	800cf72 <RemapAndLinkDMAtoUARTTx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800cefe:	4aaa      	ldr	r2, [pc, #680]	; (800d1a8 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d041      	beq.n	800cf88 <RemapAndLinkDMAtoUARTTx+0x128>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800cf04:	4aa9      	ldr	r2, [pc, #676]	; (800d1ac <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d124      	bne.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800cf0a:	23a8      	movs	r3, #168	; 0xa8
 800cf0c:	4aa8      	ldr	r2, [pc, #672]	; (800d1b0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cf0e:	4da9      	ldr	r5, [pc, #676]	; (800d1b4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800cf10:	58d4      	ldr	r4, [r2, r3]
 800cf12:	402c      	ands	r4, r5
 800cf14:	50d4      	str	r4, [r2, r3]
 800cf16:	2480      	movs	r4, #128	; 0x80
 800cf18:	58d5      	ldr	r5, [r2, r3]
 800cf1a:	0324      	lsls	r4, r4, #12
 800cf1c:	432c      	orrs	r4, r5
 800cf1e:	50d4      	str	r4, [r2, r3]
 800cf20:	e018      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800cf22:	680b      	ldr	r3, [r1, #0]
 800cf24:	4a9c      	ldr	r2, [pc, #624]	; (800d198 <RemapAndLinkDMAtoUARTTx+0x338>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d100      	bne.n	800cf2c <RemapAndLinkDMAtoUARTTx+0xcc>
 800cf2a:	e0b9      	b.n	800d0a0 <RemapAndLinkDMAtoUARTTx+0x240>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800cf2c:	4a9b      	ldr	r2, [pc, #620]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x33c>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d100      	bne.n	800cf34 <RemapAndLinkDMAtoUARTTx+0xd4>
 800cf32:	e0c0      	b.n	800d0b6 <RemapAndLinkDMAtoUARTTx+0x256>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800cf34:	4a9a      	ldr	r2, [pc, #616]	; (800d1a0 <RemapAndLinkDMAtoUARTTx+0x340>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d100      	bne.n	800cf3c <RemapAndLinkDMAtoUARTTx+0xdc>
 800cf3a:	e0c8      	b.n	800d0ce <RemapAndLinkDMAtoUARTTx+0x26e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800cf3c:	4a99      	ldr	r2, [pc, #612]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x344>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d100      	bne.n	800cf44 <RemapAndLinkDMAtoUARTTx+0xe4>
 800cf42:	e0d0      	b.n	800d0e6 <RemapAndLinkDMAtoUARTTx+0x286>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800cf44:	4a98      	ldr	r2, [pc, #608]	; (800d1a8 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d100      	bne.n	800cf4c <RemapAndLinkDMAtoUARTTx+0xec>
 800cf4a:	e0d7      	b.n	800d0fc <RemapAndLinkDMAtoUARTTx+0x29c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800cf4c:	4a97      	ldr	r2, [pc, #604]	; (800d1ac <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d100      	bne.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
 800cf52:	e0d5      	b.n	800d100 <RemapAndLinkDMAtoUARTTx+0x2a0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800cf54:	6601      	str	r1, [r0, #96]	; 0x60
 800cf56:	6248      	str	r0, [r1, #36]	; 0x24
}
 800cf58:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800cf5a:	23a8      	movs	r3, #168	; 0xa8
 800cf5c:	4a96      	ldr	r2, [pc, #600]	; (800d1b8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800cf5e:	4d97      	ldr	r5, [pc, #604]	; (800d1bc <RemapAndLinkDMAtoUARTTx+0x35c>)
 800cf60:	58d4      	ldr	r4, [r2, r3]
 800cf62:	402c      	ands	r4, r5
 800cf64:	50d4      	str	r4, [r2, r3]
 800cf66:	2480      	movs	r4, #128	; 0x80
 800cf68:	58d5      	ldr	r5, [r2, r3]
 800cf6a:	0524      	lsls	r4, r4, #20
 800cf6c:	432c      	orrs	r4, r5
 800cf6e:	50d4      	str	r4, [r2, r3]
 800cf70:	e7f0      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800cf72:	23a8      	movs	r3, #168	; 0xa8
 800cf74:	250f      	movs	r5, #15
 800cf76:	4a8e      	ldr	r2, [pc, #568]	; (800d1b0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cf78:	58d4      	ldr	r4, [r2, r3]
 800cf7a:	43ac      	bics	r4, r5
 800cf7c:	50d4      	str	r4, [r2, r3]
 800cf7e:	58d4      	ldr	r4, [r2, r3]
 800cf80:	3d07      	subs	r5, #7
 800cf82:	432c      	orrs	r4, r5
 800cf84:	50d4      	str	r4, [r2, r3]
 800cf86:	e7e5      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800cf88:	4a89      	ldr	r2, [pc, #548]	; (800d1b0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cf8a:	23a8      	movs	r3, #168	; 0xa8
 800cf8c:	4d8c      	ldr	r5, [pc, #560]	; (800d1c0 <RemapAndLinkDMAtoUARTTx+0x360>)
 800cf8e:	58d4      	ldr	r4, [r2, r3]
 800cf90:	402c      	ands	r4, r5
 800cf92:	50d4      	str	r4, [r2, r3]
 800cf94:	2480      	movs	r4, #128	; 0x80
 800cf96:	58d5      	ldr	r5, [r2, r3]
 800cf98:	0224      	lsls	r4, r4, #8
 800cf9a:	432c      	orrs	r4, r5
 800cf9c:	50d4      	str	r4, [r2, r3]
 800cf9e:	e7d9      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800cfa0:	680b      	ldr	r3, [r1, #0]
 800cfa2:	4a7d      	ldr	r2, [pc, #500]	; (800d198 <RemapAndLinkDMAtoUARTTx+0x338>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d100      	bne.n	800cfaa <RemapAndLinkDMAtoUARTTx+0x14a>
 800cfa8:	e0b6      	b.n	800d118 <RemapAndLinkDMAtoUARTTx+0x2b8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800cfaa:	4a7c      	ldr	r2, [pc, #496]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x33c>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d100      	bne.n	800cfb2 <RemapAndLinkDMAtoUARTTx+0x152>
 800cfb0:	e0bd      	b.n	800d12e <RemapAndLinkDMAtoUARTTx+0x2ce>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800cfb2:	4a7b      	ldr	r2, [pc, #492]	; (800d1a0 <RemapAndLinkDMAtoUARTTx+0x340>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d100      	bne.n	800cfba <RemapAndLinkDMAtoUARTTx+0x15a>
 800cfb8:	e0c5      	b.n	800d146 <RemapAndLinkDMAtoUARTTx+0x2e6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800cfba:	4a7a      	ldr	r2, [pc, #488]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x344>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d100      	bne.n	800cfc2 <RemapAndLinkDMAtoUARTTx+0x162>
 800cfc0:	e0cd      	b.n	800d15e <RemapAndLinkDMAtoUARTTx+0x2fe>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800cfc2:	4a79      	ldr	r2, [pc, #484]	; (800d1a8 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d100      	bne.n	800cfca <RemapAndLinkDMAtoUARTTx+0x16a>
 800cfc8:	e0d4      	b.n	800d174 <RemapAndLinkDMAtoUARTTx+0x314>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800cfca:	4a78      	ldr	r2, [pc, #480]	; (800d1ac <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d1c1      	bne.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800cfd0:	23a8      	movs	r3, #168	; 0xa8
 800cfd2:	4a77      	ldr	r2, [pc, #476]	; (800d1b0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cfd4:	4d77      	ldr	r5, [pc, #476]	; (800d1b4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800cfd6:	58d4      	ldr	r4, [r2, r3]
 800cfd8:	402c      	ands	r4, r5
 800cfda:	50d4      	str	r4, [r2, r3]
 800cfdc:	24a0      	movs	r4, #160	; 0xa0
 800cfde:	58d5      	ldr	r5, [r2, r3]
 800cfe0:	0324      	lsls	r4, r4, #12
 800cfe2:	432c      	orrs	r4, r5
 800cfe4:	50d4      	str	r4, [r2, r3]
 800cfe6:	e7b5      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800cfe8:	23a8      	movs	r3, #168	; 0xa8
 800cfea:	25f0      	movs	r5, #240	; 0xf0
 800cfec:	4a72      	ldr	r2, [pc, #456]	; (800d1b8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800cfee:	58d4      	ldr	r4, [r2, r3]
 800cff0:	43ac      	bics	r4, r5
 800cff2:	50d4      	str	r4, [r2, r3]
 800cff4:	58d4      	ldr	r4, [r2, r3]
 800cff6:	3d70      	subs	r5, #112	; 0x70
 800cff8:	432c      	orrs	r4, r5
 800cffa:	50d4      	str	r4, [r2, r3]
 800cffc:	e7aa      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800cffe:	4a6e      	ldr	r2, [pc, #440]	; (800d1b8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d000:	e7c3      	b.n	800cf8a <RemapAndLinkDMAtoUARTTx+0x12a>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800d002:	680b      	ldr	r3, [r1, #0]
 800d004:	4a64      	ldr	r2, [pc, #400]	; (800d198 <RemapAndLinkDMAtoUARTTx+0x338>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d01c      	beq.n	800d044 <RemapAndLinkDMAtoUARTTx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800d00a:	4a64      	ldr	r2, [pc, #400]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x33c>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d024      	beq.n	800d05a <RemapAndLinkDMAtoUARTTx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800d010:	4a63      	ldr	r2, [pc, #396]	; (800d1a0 <RemapAndLinkDMAtoUARTTx+0x340>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d02d      	beq.n	800d072 <RemapAndLinkDMAtoUARTTx+0x212>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800d016:	4a63      	ldr	r2, [pc, #396]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x344>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d036      	beq.n	800d08a <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800d01c:	4a62      	ldr	r2, [pc, #392]	; (800d1a8 <RemapAndLinkDMAtoUARTTx+0x348>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d100      	bne.n	800d024 <RemapAndLinkDMAtoUARTTx+0x1c4>
 800d022:	e0a9      	b.n	800d178 <RemapAndLinkDMAtoUARTTx+0x318>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800d024:	4a61      	ldr	r2, [pc, #388]	; (800d1ac <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d000      	beq.n	800d02c <RemapAndLinkDMAtoUARTTx+0x1cc>
 800d02a:	e793      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800d02c:	23a8      	movs	r3, #168	; 0xa8
 800d02e:	4a60      	ldr	r2, [pc, #384]	; (800d1b0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d030:	4d60      	ldr	r5, [pc, #384]	; (800d1b4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d032:	58d4      	ldr	r4, [r2, r3]
 800d034:	402c      	ands	r4, r5
 800d036:	50d4      	str	r4, [r2, r3]
 800d038:	24b0      	movs	r4, #176	; 0xb0
 800d03a:	58d5      	ldr	r5, [r2, r3]
 800d03c:	0324      	lsls	r4, r4, #12
 800d03e:	432c      	orrs	r4, r5
 800d040:	50d4      	str	r4, [r2, r3]
 800d042:	e787      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800d044:	23a8      	movs	r3, #168	; 0xa8
 800d046:	25f0      	movs	r5, #240	; 0xf0
 800d048:	4a5b      	ldr	r2, [pc, #364]	; (800d1b8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d04a:	58d4      	ldr	r4, [r2, r3]
 800d04c:	43ac      	bics	r4, r5
 800d04e:	50d4      	str	r4, [r2, r3]
 800d050:	58d4      	ldr	r4, [r2, r3]
 800d052:	3d40      	subs	r5, #64	; 0x40
 800d054:	432c      	orrs	r4, r5
 800d056:	50d4      	str	r4, [r2, r3]
 800d058:	e77c      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800d05a:	4a57      	ldr	r2, [pc, #348]	; (800d1b8 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800d05c:	23a8      	movs	r3, #168	; 0xa8
 800d05e:	4d58      	ldr	r5, [pc, #352]	; (800d1c0 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d060:	58d4      	ldr	r4, [r2, r3]
 800d062:	402c      	ands	r4, r5
 800d064:	50d4      	str	r4, [r2, r3]
 800d066:	24b0      	movs	r4, #176	; 0xb0
 800d068:	58d5      	ldr	r5, [r2, r3]
 800d06a:	0224      	lsls	r4, r4, #8
 800d06c:	432c      	orrs	r4, r5
 800d06e:	50d4      	str	r4, [r2, r3]
 800d070:	e770      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800d072:	23a8      	movs	r3, #168	; 0xa8
 800d074:	4a50      	ldr	r2, [pc, #320]	; (800d1b8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d076:	4d51      	ldr	r5, [pc, #324]	; (800d1bc <RemapAndLinkDMAtoUARTTx+0x35c>)
 800d078:	58d4      	ldr	r4, [r2, r3]
 800d07a:	402c      	ands	r4, r5
 800d07c:	50d4      	str	r4, [r2, r3]
 800d07e:	24b0      	movs	r4, #176	; 0xb0
 800d080:	58d5      	ldr	r5, [r2, r3]
 800d082:	0524      	lsls	r4, r4, #20
 800d084:	432c      	orrs	r4, r5
 800d086:	50d4      	str	r4, [r2, r3]
 800d088:	e764      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800d08a:	23a8      	movs	r3, #168	; 0xa8
 800d08c:	250f      	movs	r5, #15
 800d08e:	4a48      	ldr	r2, [pc, #288]	; (800d1b0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d090:	58d4      	ldr	r4, [r2, r3]
 800d092:	43ac      	bics	r4, r5
 800d094:	50d4      	str	r4, [r2, r3]
 800d096:	58d4      	ldr	r4, [r2, r3]
 800d098:	3d04      	subs	r5, #4
 800d09a:	432c      	orrs	r4, r5
 800d09c:	50d4      	str	r4, [r2, r3]
 800d09e:	e759      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800d0a0:	23a8      	movs	r3, #168	; 0xa8
 800d0a2:	25f0      	movs	r5, #240	; 0xf0
 800d0a4:	4a44      	ldr	r2, [pc, #272]	; (800d1b8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d0a6:	58d4      	ldr	r4, [r2, r3]
 800d0a8:	43ac      	bics	r4, r5
 800d0aa:	50d4      	str	r4, [r2, r3]
 800d0ac:	58d4      	ldr	r4, [r2, r3]
 800d0ae:	3d60      	subs	r5, #96	; 0x60
 800d0b0:	432c      	orrs	r4, r5
 800d0b2:	50d4      	str	r4, [r2, r3]
 800d0b4:	e74e      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800d0b6:	4a40      	ldr	r2, [pc, #256]	; (800d1b8 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800d0b8:	23a8      	movs	r3, #168	; 0xa8
 800d0ba:	4d41      	ldr	r5, [pc, #260]	; (800d1c0 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d0bc:	58d4      	ldr	r4, [r2, r3]
 800d0be:	402c      	ands	r4, r5
 800d0c0:	50d4      	str	r4, [r2, r3]
 800d0c2:	2490      	movs	r4, #144	; 0x90
 800d0c4:	58d5      	ldr	r5, [r2, r3]
 800d0c6:	0224      	lsls	r4, r4, #8
 800d0c8:	432c      	orrs	r4, r5
 800d0ca:	50d4      	str	r4, [r2, r3]
 800d0cc:	e742      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800d0ce:	23a8      	movs	r3, #168	; 0xa8
 800d0d0:	4a39      	ldr	r2, [pc, #228]	; (800d1b8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d0d2:	4d3a      	ldr	r5, [pc, #232]	; (800d1bc <RemapAndLinkDMAtoUARTTx+0x35c>)
 800d0d4:	58d4      	ldr	r4, [r2, r3]
 800d0d6:	402c      	ands	r4, r5
 800d0d8:	50d4      	str	r4, [r2, r3]
 800d0da:	2490      	movs	r4, #144	; 0x90
 800d0dc:	58d5      	ldr	r5, [r2, r3]
 800d0de:	0524      	lsls	r4, r4, #20
 800d0e0:	432c      	orrs	r4, r5
 800d0e2:	50d4      	str	r4, [r2, r3]
 800d0e4:	e736      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800d0e6:	23a8      	movs	r3, #168	; 0xa8
 800d0e8:	250f      	movs	r5, #15
 800d0ea:	4a31      	ldr	r2, [pc, #196]	; (800d1b0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d0ec:	58d4      	ldr	r4, [r2, r3]
 800d0ee:	43ac      	bics	r4, r5
 800d0f0:	50d4      	str	r4, [r2, r3]
 800d0f2:	58d4      	ldr	r4, [r2, r3]
 800d0f4:	3d06      	subs	r5, #6
 800d0f6:	432c      	orrs	r4, r5
 800d0f8:	50d4      	str	r4, [r2, r3]
 800d0fa:	e72b      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800d0fc:	4a2c      	ldr	r2, [pc, #176]	; (800d1b0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d0fe:	e7db      	b.n	800d0b8 <RemapAndLinkDMAtoUARTTx+0x258>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800d100:	23a8      	movs	r3, #168	; 0xa8
 800d102:	4a2b      	ldr	r2, [pc, #172]	; (800d1b0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d104:	4d2b      	ldr	r5, [pc, #172]	; (800d1b4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d106:	58d4      	ldr	r4, [r2, r3]
 800d108:	402c      	ands	r4, r5
 800d10a:	50d4      	str	r4, [r2, r3]
 800d10c:	2490      	movs	r4, #144	; 0x90
 800d10e:	58d5      	ldr	r5, [r2, r3]
 800d110:	0324      	lsls	r4, r4, #12
 800d112:	432c      	orrs	r4, r5
 800d114:	50d4      	str	r4, [r2, r3]
 800d116:	e71d      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800d118:	23a8      	movs	r3, #168	; 0xa8
 800d11a:	25f0      	movs	r5, #240	; 0xf0
 800d11c:	4a26      	ldr	r2, [pc, #152]	; (800d1b8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d11e:	58d4      	ldr	r4, [r2, r3]
 800d120:	43ac      	bics	r4, r5
 800d122:	50d4      	str	r4, [r2, r3]
 800d124:	58d4      	ldr	r4, [r2, r3]
 800d126:	3d50      	subs	r5, #80	; 0x50
 800d128:	432c      	orrs	r4, r5
 800d12a:	50d4      	str	r4, [r2, r3]
 800d12c:	e712      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800d12e:	4a22      	ldr	r2, [pc, #136]	; (800d1b8 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800d130:	23a8      	movs	r3, #168	; 0xa8
 800d132:	4d23      	ldr	r5, [pc, #140]	; (800d1c0 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d134:	58d4      	ldr	r4, [r2, r3]
 800d136:	402c      	ands	r4, r5
 800d138:	50d4      	str	r4, [r2, r3]
 800d13a:	24a0      	movs	r4, #160	; 0xa0
 800d13c:	58d5      	ldr	r5, [r2, r3]
 800d13e:	0224      	lsls	r4, r4, #8
 800d140:	432c      	orrs	r4, r5
 800d142:	50d4      	str	r4, [r2, r3]
 800d144:	e706      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800d146:	23a8      	movs	r3, #168	; 0xa8
 800d148:	4a1b      	ldr	r2, [pc, #108]	; (800d1b8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d14a:	4d1c      	ldr	r5, [pc, #112]	; (800d1bc <RemapAndLinkDMAtoUARTTx+0x35c>)
 800d14c:	58d4      	ldr	r4, [r2, r3]
 800d14e:	402c      	ands	r4, r5
 800d150:	50d4      	str	r4, [r2, r3]
 800d152:	24a0      	movs	r4, #160	; 0xa0
 800d154:	58d5      	ldr	r5, [r2, r3]
 800d156:	0524      	lsls	r4, r4, #20
 800d158:	432c      	orrs	r4, r5
 800d15a:	50d4      	str	r4, [r2, r3]
 800d15c:	e6fa      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800d15e:	23a8      	movs	r3, #168	; 0xa8
 800d160:	250f      	movs	r5, #15
 800d162:	4a13      	ldr	r2, [pc, #76]	; (800d1b0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d164:	58d4      	ldr	r4, [r2, r3]
 800d166:	43ac      	bics	r4, r5
 800d168:	50d4      	str	r4, [r2, r3]
 800d16a:	58d4      	ldr	r4, [r2, r3]
 800d16c:	3d05      	subs	r5, #5
 800d16e:	432c      	orrs	r4, r5
 800d170:	50d4      	str	r4, [r2, r3]
 800d172:	e6ef      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800d174:	4a0e      	ldr	r2, [pc, #56]	; (800d1b0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d176:	e7db      	b.n	800d130 <RemapAndLinkDMAtoUARTTx+0x2d0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800d178:	4a0d      	ldr	r2, [pc, #52]	; (800d1b0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d17a:	e76f      	b.n	800d05c <RemapAndLinkDMAtoUARTTx+0x1fc>
 800d17c:	40013800 	.word	0x40013800
 800d180:	40004400 	.word	0x40004400
 800d184:	40004800 	.word	0x40004800
 800d188:	40004c00 	.word	0x40004c00
 800d18c:	40005000 	.word	0x40005000
 800d190:	40011400 	.word	0x40011400
 800d194:	40011800 	.word	0x40011800
 800d198:	4002001c 	.word	0x4002001c
 800d19c:	40020044 	.word	0x40020044
 800d1a0:	40020080 	.word	0x40020080
 800d1a4:	40020408 	.word	0x40020408
 800d1a8:	40020444 	.word	0x40020444
 800d1ac:	40020458 	.word	0x40020458
 800d1b0:	40020400 	.word	0x40020400
 800d1b4:	fff0ffff 	.word	0xfff0ffff
 800d1b8:	40020000 	.word	0x40020000
 800d1bc:	f0ffffff 	.word	0xf0ffffff
 800d1c0:	ffff0fff 	.word	0xffff0fff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800d1c4:	680b      	ldr	r3, [r1, #0]
 800d1c6:	4a8e      	ldr	r2, [pc, #568]	; (800d400 <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d03b      	beq.n	800d244 <RemapAndLinkDMAtoUARTTx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800d1cc:	4a8d      	ldr	r2, [pc, #564]	; (800d404 <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d043      	beq.n	800d25a <RemapAndLinkDMAtoUARTTx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800d1d2:	4a8d      	ldr	r2, [pc, #564]	; (800d408 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d04c      	beq.n	800d272 <RemapAndLinkDMAtoUARTTx+0x412>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800d1d8:	4a8c      	ldr	r2, [pc, #560]	; (800d40c <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d055      	beq.n	800d28a <RemapAndLinkDMAtoUARTTx+0x42a>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800d1de:	4a8c      	ldr	r2, [pc, #560]	; (800d410 <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d05d      	beq.n	800d2a0 <RemapAndLinkDMAtoUARTTx+0x440>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800d1e4:	4a8b      	ldr	r2, [pc, #556]	; (800d414 <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d000      	beq.n	800d1ec <RemapAndLinkDMAtoUARTTx+0x38c>
 800d1ea:	e6b3      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800d1ec:	23a8      	movs	r3, #168	; 0xa8
 800d1ee:	4a8a      	ldr	r2, [pc, #552]	; (800d418 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800d1f0:	4d8a      	ldr	r5, [pc, #552]	; (800d41c <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800d1f2:	58d4      	ldr	r4, [r2, r3]
 800d1f4:	402c      	ands	r4, r5
 800d1f6:	50d4      	str	r4, [r2, r3]
 800d1f8:	24c0      	movs	r4, #192	; 0xc0
 800d1fa:	58d5      	ldr	r5, [r2, r3]
 800d1fc:	0324      	lsls	r4, r4, #12
 800d1fe:	432c      	orrs	r4, r5
 800d200:	50d4      	str	r4, [r2, r3]
 800d202:	e6a7      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d204:	680b      	ldr	r3, [r1, #0]
 800d206:	4a7e      	ldr	r2, [pc, #504]	; (800d400 <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d04b      	beq.n	800d2a4 <RemapAndLinkDMAtoUARTTx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800d20c:	4a7d      	ldr	r2, [pc, #500]	; (800d404 <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d053      	beq.n	800d2ba <RemapAndLinkDMAtoUARTTx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800d212:	4a7d      	ldr	r2, [pc, #500]	; (800d408 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d05c      	beq.n	800d2d2 <RemapAndLinkDMAtoUARTTx+0x472>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800d218:	4a7c      	ldr	r2, [pc, #496]	; (800d40c <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d065      	beq.n	800d2ea <RemapAndLinkDMAtoUARTTx+0x48a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800d21e:	4a7c      	ldr	r2, [pc, #496]	; (800d410 <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d06d      	beq.n	800d300 <RemapAndLinkDMAtoUARTTx+0x4a0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d224:	4a7b      	ldr	r2, [pc, #492]	; (800d414 <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d000      	beq.n	800d22c <RemapAndLinkDMAtoUARTTx+0x3cc>
 800d22a:	e693      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800d22c:	23a8      	movs	r3, #168	; 0xa8
 800d22e:	4a7a      	ldr	r2, [pc, #488]	; (800d418 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800d230:	4d7a      	ldr	r5, [pc, #488]	; (800d41c <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800d232:	58d4      	ldr	r4, [r2, r3]
 800d234:	402c      	ands	r4, r5
 800d236:	50d4      	str	r4, [r2, r3]
 800d238:	24d0      	movs	r4, #208	; 0xd0
 800d23a:	58d5      	ldr	r5, [r2, r3]
 800d23c:	0324      	lsls	r4, r4, #12
 800d23e:	432c      	orrs	r4, r5
 800d240:	50d4      	str	r4, [r2, r3]
 800d242:	e687      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800d244:	23a8      	movs	r3, #168	; 0xa8
 800d246:	25f0      	movs	r5, #240	; 0xf0
 800d248:	4a75      	ldr	r2, [pc, #468]	; (800d420 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800d24a:	58d4      	ldr	r4, [r2, r3]
 800d24c:	43ac      	bics	r4, r5
 800d24e:	50d4      	str	r4, [r2, r3]
 800d250:	58d4      	ldr	r4, [r2, r3]
 800d252:	3d30      	subs	r5, #48	; 0x30
 800d254:	432c      	orrs	r4, r5
 800d256:	50d4      	str	r4, [r2, r3]
 800d258:	e67c      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800d25a:	4a71      	ldr	r2, [pc, #452]	; (800d420 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800d25c:	23a8      	movs	r3, #168	; 0xa8
 800d25e:	4d71      	ldr	r5, [pc, #452]	; (800d424 <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800d260:	58d4      	ldr	r4, [r2, r3]
 800d262:	402c      	ands	r4, r5
 800d264:	50d4      	str	r4, [r2, r3]
 800d266:	24c0      	movs	r4, #192	; 0xc0
 800d268:	58d5      	ldr	r5, [r2, r3]
 800d26a:	0224      	lsls	r4, r4, #8
 800d26c:	432c      	orrs	r4, r5
 800d26e:	50d4      	str	r4, [r2, r3]
 800d270:	e670      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800d272:	23a8      	movs	r3, #168	; 0xa8
 800d274:	4a6a      	ldr	r2, [pc, #424]	; (800d420 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800d276:	4d6c      	ldr	r5, [pc, #432]	; (800d428 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800d278:	58d4      	ldr	r4, [r2, r3]
 800d27a:	402c      	ands	r4, r5
 800d27c:	50d4      	str	r4, [r2, r3]
 800d27e:	24c0      	movs	r4, #192	; 0xc0
 800d280:	58d5      	ldr	r5, [r2, r3]
 800d282:	0524      	lsls	r4, r4, #20
 800d284:	432c      	orrs	r4, r5
 800d286:	50d4      	str	r4, [r2, r3]
 800d288:	e664      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800d28a:	23a8      	movs	r3, #168	; 0xa8
 800d28c:	250f      	movs	r5, #15
 800d28e:	4a62      	ldr	r2, [pc, #392]	; (800d418 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800d290:	58d4      	ldr	r4, [r2, r3]
 800d292:	43ac      	bics	r4, r5
 800d294:	50d4      	str	r4, [r2, r3]
 800d296:	58d4      	ldr	r4, [r2, r3]
 800d298:	3d03      	subs	r5, #3
 800d29a:	432c      	orrs	r4, r5
 800d29c:	50d4      	str	r4, [r2, r3]
 800d29e:	e659      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800d2a0:	4a5d      	ldr	r2, [pc, #372]	; (800d418 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800d2a2:	e7db      	b.n	800d25c <RemapAndLinkDMAtoUARTTx+0x3fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800d2a4:	23a8      	movs	r3, #168	; 0xa8
 800d2a6:	25f0      	movs	r5, #240	; 0xf0
 800d2a8:	4a5d      	ldr	r2, [pc, #372]	; (800d420 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800d2aa:	58d4      	ldr	r4, [r2, r3]
 800d2ac:	43ac      	bics	r4, r5
 800d2ae:	50d4      	str	r4, [r2, r3]
 800d2b0:	58d4      	ldr	r4, [r2, r3]
 800d2b2:	3d20      	subs	r5, #32
 800d2b4:	432c      	orrs	r4, r5
 800d2b6:	50d4      	str	r4, [r2, r3]
 800d2b8:	e64c      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800d2ba:	4a59      	ldr	r2, [pc, #356]	; (800d420 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d2bc:	23a8      	movs	r3, #168	; 0xa8
 800d2be:	4d59      	ldr	r5, [pc, #356]	; (800d424 <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800d2c0:	58d4      	ldr	r4, [r2, r3]
 800d2c2:	402c      	ands	r4, r5
 800d2c4:	50d4      	str	r4, [r2, r3]
 800d2c6:	24d0      	movs	r4, #208	; 0xd0
 800d2c8:	58d5      	ldr	r5, [r2, r3]
 800d2ca:	0224      	lsls	r4, r4, #8
 800d2cc:	432c      	orrs	r4, r5
 800d2ce:	50d4      	str	r4, [r2, r3]
 800d2d0:	e640      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800d2d2:	23a8      	movs	r3, #168	; 0xa8
 800d2d4:	4a52      	ldr	r2, [pc, #328]	; (800d420 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800d2d6:	4d54      	ldr	r5, [pc, #336]	; (800d428 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800d2d8:	58d4      	ldr	r4, [r2, r3]
 800d2da:	402c      	ands	r4, r5
 800d2dc:	50d4      	str	r4, [r2, r3]
 800d2de:	24d0      	movs	r4, #208	; 0xd0
 800d2e0:	58d5      	ldr	r5, [r2, r3]
 800d2e2:	0524      	lsls	r4, r4, #20
 800d2e4:	432c      	orrs	r4, r5
 800d2e6:	50d4      	str	r4, [r2, r3]
 800d2e8:	e634      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800d2ea:	23a8      	movs	r3, #168	; 0xa8
 800d2ec:	250f      	movs	r5, #15
 800d2ee:	4a4a      	ldr	r2, [pc, #296]	; (800d418 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800d2f0:	58d4      	ldr	r4, [r2, r3]
 800d2f2:	43ac      	bics	r4, r5
 800d2f4:	50d4      	str	r4, [r2, r3]
 800d2f6:	58d4      	ldr	r4, [r2, r3]
 800d2f8:	3d02      	subs	r5, #2
 800d2fa:	432c      	orrs	r4, r5
 800d2fc:	50d4      	str	r4, [r2, r3]
 800d2fe:	e629      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d300:	4a45      	ldr	r2, [pc, #276]	; (800d418 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800d302:	e7db      	b.n	800d2bc <RemapAndLinkDMAtoUARTTx+0x45c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800d304:	23a8      	movs	r3, #168	; 0xa8
 800d306:	25f0      	movs	r5, #240	; 0xf0
 800d308:	4a45      	ldr	r2, [pc, #276]	; (800d420 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800d30a:	58d4      	ldr	r4, [r2, r3]
 800d30c:	43ac      	bics	r4, r5
 800d30e:	50d4      	str	r4, [r2, r3]
 800d310:	58d4      	ldr	r4, [r2, r3]
 800d312:	3d10      	subs	r5, #16
 800d314:	432c      	orrs	r4, r5
 800d316:	50d4      	str	r4, [r2, r3]
 800d318:	e61c      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800d31a:	4a41      	ldr	r2, [pc, #260]	; (800d420 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d31c:	23a8      	movs	r3, #168	; 0xa8
 800d31e:	4d41      	ldr	r5, [pc, #260]	; (800d424 <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800d320:	58d4      	ldr	r4, [r2, r3]
 800d322:	402c      	ands	r4, r5
 800d324:	50d4      	str	r4, [r2, r3]
 800d326:	24e0      	movs	r4, #224	; 0xe0
 800d328:	58d5      	ldr	r5, [r2, r3]
 800d32a:	0224      	lsls	r4, r4, #8
 800d32c:	432c      	orrs	r4, r5
 800d32e:	50d4      	str	r4, [r2, r3]
 800d330:	e610      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800d332:	23a8      	movs	r3, #168	; 0xa8
 800d334:	4a3a      	ldr	r2, [pc, #232]	; (800d420 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800d336:	4d3c      	ldr	r5, [pc, #240]	; (800d428 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800d338:	58d4      	ldr	r4, [r2, r3]
 800d33a:	402c      	ands	r4, r5
 800d33c:	50d4      	str	r4, [r2, r3]
 800d33e:	24e0      	movs	r4, #224	; 0xe0
 800d340:	58d5      	ldr	r5, [r2, r3]
 800d342:	0524      	lsls	r4, r4, #20
 800d344:	432c      	orrs	r4, r5
 800d346:	50d4      	str	r4, [r2, r3]
 800d348:	e604      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800d34a:	23a8      	movs	r3, #168	; 0xa8
 800d34c:	250f      	movs	r5, #15
 800d34e:	4a32      	ldr	r2, [pc, #200]	; (800d418 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800d350:	58d4      	ldr	r4, [r2, r3]
 800d352:	43ac      	bics	r4, r5
 800d354:	50d4      	str	r4, [r2, r3]
 800d356:	58d4      	ldr	r4, [r2, r3]
 800d358:	3d01      	subs	r5, #1
 800d35a:	432c      	orrs	r4, r5
 800d35c:	50d4      	str	r4, [r2, r3]
 800d35e:	e5f9      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d360:	4a2d      	ldr	r2, [pc, #180]	; (800d418 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800d362:	e7db      	b.n	800d31c <RemapAndLinkDMAtoUARTTx+0x4bc>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800d364:	4a31      	ldr	r2, [pc, #196]	; (800d42c <RemapAndLinkDMAtoUARTTx+0x5cc>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d000      	beq.n	800d36c <RemapAndLinkDMAtoUARTTx+0x50c>
 800d36a:	e5f3      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
 800d36c:	680b      	ldr	r3, [r1, #0]
 800d36e:	4a24      	ldr	r2, [pc, #144]	; (800d400 <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d01b      	beq.n	800d3ac <RemapAndLinkDMAtoUARTTx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800d374:	4a23      	ldr	r2, [pc, #140]	; (800d404 <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d022      	beq.n	800d3c0 <RemapAndLinkDMAtoUARTTx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800d37a:	4a23      	ldr	r2, [pc, #140]	; (800d408 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d02b      	beq.n	800d3d8 <RemapAndLinkDMAtoUARTTx+0x578>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800d380:	4a22      	ldr	r2, [pc, #136]	; (800d40c <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d034      	beq.n	800d3f0 <RemapAndLinkDMAtoUARTTx+0x590>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800d386:	4a22      	ldr	r2, [pc, #136]	; (800d410 <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d036      	beq.n	800d3fa <RemapAndLinkDMAtoUARTTx+0x59a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800d38c:	4a21      	ldr	r2, [pc, #132]	; (800d414 <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d000      	beq.n	800d394 <RemapAndLinkDMAtoUARTTx+0x534>
 800d392:	e5df      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800d394:	23a8      	movs	r3, #168	; 0xa8
 800d396:	4a20      	ldr	r2, [pc, #128]	; (800d418 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800d398:	4d20      	ldr	r5, [pc, #128]	; (800d41c <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800d39a:	58d4      	ldr	r4, [r2, r3]
 800d39c:	402c      	ands	r4, r5
 800d39e:	50d4      	str	r4, [r2, r3]
 800d3a0:	24f0      	movs	r4, #240	; 0xf0
 800d3a2:	58d5      	ldr	r5, [r2, r3]
 800d3a4:	0324      	lsls	r4, r4, #12
 800d3a6:	432c      	orrs	r4, r5
 800d3a8:	50d4      	str	r4, [r2, r3]
 800d3aa:	e5d3      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800d3ac:	23a8      	movs	r3, #168	; 0xa8
 800d3ae:	26f0      	movs	r6, #240	; 0xf0
 800d3b0:	4a1b      	ldr	r2, [pc, #108]	; (800d420 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800d3b2:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800d3b4:	43b5      	bics	r5, r6
 800d3b6:	50d5      	str	r5, [r2, r3]
 800d3b8:	58d4      	ldr	r4, [r2, r3]
 800d3ba:	4334      	orrs	r4, r6
 800d3bc:	50d4      	str	r4, [r2, r3]
 800d3be:	e5c9      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800d3c0:	4a17      	ldr	r2, [pc, #92]	; (800d420 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800d3c2:	23a8      	movs	r3, #168	; 0xa8
 800d3c4:	4d17      	ldr	r5, [pc, #92]	; (800d424 <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800d3c6:	58d4      	ldr	r4, [r2, r3]
 800d3c8:	402c      	ands	r4, r5
 800d3ca:	50d4      	str	r4, [r2, r3]
 800d3cc:	24f0      	movs	r4, #240	; 0xf0
 800d3ce:	58d5      	ldr	r5, [r2, r3]
 800d3d0:	0224      	lsls	r4, r4, #8
 800d3d2:	432c      	orrs	r4, r5
 800d3d4:	50d4      	str	r4, [r2, r3]
 800d3d6:	e5bd      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800d3d8:	23a8      	movs	r3, #168	; 0xa8
 800d3da:	4a11      	ldr	r2, [pc, #68]	; (800d420 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800d3dc:	4d12      	ldr	r5, [pc, #72]	; (800d428 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800d3de:	58d4      	ldr	r4, [r2, r3]
 800d3e0:	402c      	ands	r4, r5
 800d3e2:	50d4      	str	r4, [r2, r3]
 800d3e4:	24f0      	movs	r4, #240	; 0xf0
 800d3e6:	58d5      	ldr	r5, [r2, r3]
 800d3e8:	0524      	lsls	r4, r4, #20
 800d3ea:	432c      	orrs	r4, r5
 800d3ec:	50d4      	str	r4, [r2, r3]
 800d3ee:	e5b1      	b.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800d3f0:	23a8      	movs	r3, #168	; 0xa8
 800d3f2:	4a09      	ldr	r2, [pc, #36]	; (800d418 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800d3f4:	260f      	movs	r6, #15
 800d3f6:	58d5      	ldr	r5, [r2, r3]
 800d3f8:	e7dc      	b.n	800d3b4 <RemapAndLinkDMAtoUARTTx+0x554>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800d3fa:	4a07      	ldr	r2, [pc, #28]	; (800d418 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800d3fc:	e7e1      	b.n	800d3c2 <RemapAndLinkDMAtoUARTTx+0x562>
 800d3fe:	46c0      	nop			; (mov r8, r8)
 800d400:	4002001c 	.word	0x4002001c
 800d404:	40020044 	.word	0x40020044
 800d408:	40020080 	.word	0x40020080
 800d40c:	40020408 	.word	0x40020408
 800d410:	40020444 	.word	0x40020444
 800d414:	40020458 	.word	0x40020458
 800d418:	40020400 	.word	0x40020400
 800d41c:	fff0ffff 	.word	0xfff0ffff
 800d420:	40020000 	.word	0x40020000
 800d424:	ffff0fff 	.word	0xffff0fff
 800d428:	f0ffffff 	.word	0xf0ffffff
 800d42c:	40011c00 	.word	0x40011c00

0800d430 <DMA_MSG_TX_Setup>:
	if (msgTxDMA[0].Parent == NULL)
 800d430:	4b0c      	ldr	r3, [pc, #48]	; (800d464 <DMA_MSG_TX_Setup+0x34>)
{	
 800d432:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800d434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d436:	2a00      	cmp	r2, #0
 800d438:	d00f      	beq.n	800d45a <DMA_MSG_TX_Setup+0x2a>
	else if (msgTxDMA[1].Parent == NULL)
 800d43a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d43c:	2a00      	cmp	r2, #0
 800d43e:	d00b      	beq.n	800d458 <DMA_MSG_TX_Setup+0x28>
	else if (msgTxDMA[2].Parent == NULL)
 800d440:	2294      	movs	r2, #148	; 0x94
 800d442:	589a      	ldr	r2, [r3, r2]
 800d444:	2a00      	cmp	r2, #0
 800d446:	d00a      	beq.n	800d45e <DMA_MSG_TX_Setup+0x2e>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800d448:	0021      	movs	r1, r4
 800d44a:	f7ff fd09 	bl	800ce60 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d44e:	2100      	movs	r1, #0
 800d450:	0020      	movs	r0, r4
 800d452:	f7ff f8ed 	bl	800c630 <SetupDMAInterrupts>
}
 800d456:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[1];
 800d458:	3338      	adds	r3, #56	; 0x38
 800d45a:	001c      	movs	r4, r3
 800d45c:	e7f4      	b.n	800d448 <DMA_MSG_TX_Setup+0x18>
		hDMA = &msgTxDMA[2];  
 800d45e:	3370      	adds	r3, #112	; 0x70
 800d460:	001c      	movs	r4, r3
 800d462:	e7f1      	b.n	800d448 <DMA_MSG_TX_Setup+0x18>
 800d464:	20001bec 	.word	0x20001bec

0800d468 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800d468:	2310      	movs	r3, #16
 800d46a:	4807      	ldr	r0, [pc, #28]	; (800d488 <CRC_Init+0x20>)
{
 800d46c:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800d46e:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800d470:	4b06      	ldr	r3, [pc, #24]	; (800d48c <CRC_Init+0x24>)
 800d472:	6003      	str	r3, [r0, #0]
 800d474:	2300      	movs	r3, #0
 800d476:	8083      	strh	r3, [r0, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800d478:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800d47a:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800d47c:	3303      	adds	r3, #3
 800d47e:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800d480:	f003 faaa 	bl	80109d8 <HAL_CRC_Init>
}
 800d484:	bd10      	pop	{r4, pc}
 800d486:	46c0      	nop			; (mov r8, r8)
 800d488:	20007084 	.word	0x20007084
 800d48c:	40023000 	.word	0x40023000

0800d490 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800d490:	2340      	movs	r3, #64	; 0x40
 800d492:	4a05      	ldr	r2, [pc, #20]	; (800d4a8 <HAL_CRC_MspInit+0x18>)
{
 800d494:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800d496:	6951      	ldr	r1, [r2, #20]
 800d498:	4319      	orrs	r1, r3
 800d49a:	6151      	str	r1, [r2, #20]
 800d49c:	6952      	ldr	r2, [r2, #20]
 800d49e:	4013      	ands	r3, r2
 800d4a0:	9301      	str	r3, [sp, #4]
 800d4a2:	9b01      	ldr	r3, [sp, #4]
}
 800d4a4:	b002      	add	sp, #8
 800d4a6:	4770      	bx	lr
 800d4a8:	40021000 	.word	0x40021000

0800d4ac <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800d4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ae:	0004      	movs	r4, r0
 800d4b0:	000d      	movs	r5, r1
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800d4b2:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800d4b4:	2c00      	cmp	r4, #0
 800d4b6:	d001      	beq.n	800d4bc <CalculateCRC8+0x10>
 800d4b8:	2900      	cmp	r1, #0
 800d4ba:	d100      	bne.n	800d4be <CalculateCRC8+0x12>
}
 800d4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800d4be:	4f09      	ldr	r7, [pc, #36]	; (800d4e4 <CalculateCRC8+0x38>)
 800d4c0:	088e      	lsrs	r6, r1, #2
 800d4c2:	0032      	movs	r2, r6
 800d4c4:	0021      	movs	r1, r4
 800d4c6:	0038      	movs	r0, r7
 800d4c8:	f003 fae4 	bl	8010a94 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800d4cc:	07ab      	lsls	r3, r5, #30
 800d4ce:	d101      	bne.n	800d4d4 <CalculateCRC8+0x28>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800d4d0:	b2c0      	uxtb	r0, r0
 800d4d2:	e7f3      	b.n	800d4bc <CalculateCRC8+0x10>
 800d4d4:	0131      	lsls	r1, r6, #4
 800d4d6:	1861      	adds	r1, r4, r1
 800d4d8:	2201      	movs	r2, #1
 800d4da:	0038      	movs	r0, r7
 800d4dc:	f003 fab0 	bl	8010a40 <HAL_CRC_Accumulate>
 800d4e0:	b2c0      	uxtb	r0, r0
 800d4e2:	e7eb      	b.n	800d4bc <CalculateCRC8+0x10>
 800d4e4:	20007084 	.word	0x20007084

0800d4e8 <GPIO_Init>:
/** Pinout Configuration
*/
void GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800d4e8:	2080      	movs	r0, #128	; 0x80
 800d4ea:	4b1f      	ldr	r3, [pc, #124]	; (800d568 <GPIO_Init+0x80>)
 800d4ec:	0300      	lsls	r0, r0, #12
 800d4ee:	6959      	ldr	r1, [r3, #20]
{
 800d4f0:	b500      	push	{lr}
  __GPIOC_CLK_ENABLE();
 800d4f2:	4301      	orrs	r1, r0
 800d4f4:	6159      	str	r1, [r3, #20]
 800d4f6:	695a      	ldr	r2, [r3, #20]
{
 800d4f8:	b08b      	sub	sp, #44	; 0x2c
  __GPIOC_CLK_ENABLE();
 800d4fa:	4002      	ands	r2, r0
  __GPIOA_CLK_ENABLE();
 800d4fc:	2080      	movs	r0, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800d4fe:	9200      	str	r2, [sp, #0]
 800d500:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 800d502:	6959      	ldr	r1, [r3, #20]
 800d504:	0280      	lsls	r0, r0, #10
 800d506:	4301      	orrs	r1, r0
 800d508:	6159      	str	r1, [r3, #20]
 800d50a:	695a      	ldr	r2, [r3, #20]
 800d50c:	4002      	ands	r2, r0
  __GPIOD_CLK_ENABLE();
 800d50e:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800d510:	9201      	str	r2, [sp, #4]
 800d512:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 800d514:	6959      	ldr	r1, [r3, #20]
 800d516:	0340      	lsls	r0, r0, #13
 800d518:	4301      	orrs	r1, r0
 800d51a:	6159      	str	r1, [r3, #20]
 800d51c:	695a      	ldr	r2, [r3, #20]
 800d51e:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800d520:	2080      	movs	r0, #128	; 0x80
  __GPIOD_CLK_ENABLE();
 800d522:	9202      	str	r2, [sp, #8]
 800d524:	9a02      	ldr	r2, [sp, #8]
  __GPIOB_CLK_ENABLE();
 800d526:	6959      	ldr	r1, [r3, #20]
 800d528:	02c0      	lsls	r0, r0, #11
 800d52a:	4301      	orrs	r1, r0
 800d52c:	6159      	str	r1, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800d52e:	2180      	movs	r1, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800d530:	695a      	ldr	r2, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800d532:	03c9      	lsls	r1, r1, #15
  __GPIOB_CLK_ENABLE();
 800d534:	4002      	ands	r2, r0
 800d536:	9203      	str	r2, [sp, #12]
 800d538:	9a03      	ldr	r2, [sp, #12]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800d53a:	695a      	ldr	r2, [r3, #20]
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800d53c:	2090      	movs	r0, #144	; 0x90
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800d53e:	430a      	orrs	r2, r1
 800d540:	615a      	str	r2, [r3, #20]
 800d542:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800d544:	05c0      	lsls	r0, r0, #23
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800d546:	400b      	ands	r3, r1
 800d548:	9304      	str	r3, [sp, #16]
 800d54a:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800d54c:	2380      	movs	r3, #128	; 0x80
 800d54e:	011b      	lsls	r3, r3, #4
 800d550:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d552:	2301      	movs	r3, #1
 800d554:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d556:	2300      	movs	r3, #0
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800d558:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d55a:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d55c:	3303      	adds	r3, #3
 800d55e:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800d560:	f004 f96e 	bl	8011840 <HAL_GPIO_Init>
}
 800d564:	b00b      	add	sp, #44	; 0x2c
 800d566:	bd00      	pop	{pc}
 800d568:	40021000 	.word	0x40021000

0800d56c <Switch_Init>:
*/
void Switch_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _Switch_PIN;
 800d56c:	2301      	movs	r3, #1
{
 800d56e:	b500      	push	{lr}
 800d570:	b087      	sub	sp, #28
	GPIO_InitStruct.Pin = _Switch_PIN;
 800d572:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d574:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d576:	2300      	movs	r3, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800d578:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d57a:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800d57c:	4803      	ldr	r0, [pc, #12]	; (800d58c <Switch_Init+0x20>)
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d57e:	3303      	adds	r3, #3
 800d580:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800d582:	f004 f95d 	bl	8011840 <HAL_GPIO_Init>
}
 800d586:	b007      	add	sp, #28
 800d588:	bd00      	pop	{pc}
 800d58a:	46c0      	nop			; (mov r8, r8)
 800d58c:	48000400 	.word	0x48000400

0800d590 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800d590:	b570      	push	{r4, r5, r6, lr}
 800d592:	0015      	movs	r5, r2
 800d594:	001c      	movs	r4, r3
 800d596:	000e      	movs	r6, r1
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800d598:	f000 fd8e 	bl	800e0b8 <GetUart>
	
	if (huart == &huart1) 
 800d59c:	4a25      	ldr	r2, [pc, #148]	; (800d634 <GetPortGPIOs+0xa4>)
	UART_HandleTypeDef* huart = GetUart(port);
 800d59e:	0003      	movs	r3, r0
	if (huart == &huart1) 
 800d5a0:	4290      	cmp	r0, r2
 800d5a2:	d00d      	beq.n	800d5c0 <GetPortGPIOs+0x30>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800d5a4:	4a24      	ldr	r2, [pc, #144]	; (800d638 <GetPortGPIOs+0xa8>)
 800d5a6:	4290      	cmp	r0, r2
 800d5a8:	d02e      	beq.n	800d608 <GetPortGPIOs+0x78>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800d5aa:	4a24      	ldr	r2, [pc, #144]	; (800d63c <GetPortGPIOs+0xac>)
 800d5ac:	4290      	cmp	r0, r2
 800d5ae:	d014      	beq.n	800d5da <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800d5b0:	4a23      	ldr	r2, [pc, #140]	; (800d640 <GetPortGPIOs+0xb0>)
 800d5b2:	4290      	cmp	r0, r2
 800d5b4:	d033      	beq.n	800d61e <GetPortGPIOs+0x8e>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800d5b6:	4a23      	ldr	r2, [pc, #140]	; (800d644 <GetPortGPIOs+0xb4>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800d5b8:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d019      	beq.n	800d5f2 <GetPortGPIOs+0x62>
	
	return result;	
}
 800d5be:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800d5c0:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800d5c2:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800d5c4:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800d5c6:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800d5c8:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800d5ca:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800d5cc:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800d5ce:	2380      	movs	r3, #128	; 0x80
 800d5d0:	9a04      	ldr	r2, [sp, #16]
 800d5d2:	00db      	lsls	r3, r3, #3
 800d5d4:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	e7f1      	b.n	800d5be <GetPortGPIOs+0x2e>
		*TX_Pin = USART3_TX_PIN;
 800d5da:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800d5dc:	4b1a      	ldr	r3, [pc, #104]	; (800d648 <GetPortGPIOs+0xb8>)
		*TX_Pin = USART3_TX_PIN;
 800d5de:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800d5e0:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800d5e2:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800d5e4:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800d5e6:	2380      	movs	r3, #128	; 0x80
 800d5e8:	9a04      	ldr	r2, [sp, #16]
 800d5ea:	011b      	lsls	r3, r3, #4
 800d5ec:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d5ee:	2000      	movs	r0, #0
 800d5f0:	e7e5      	b.n	800d5be <GetPortGPIOs+0x2e>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800d5f2:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800d5f4:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800d5f6:	05db      	lsls	r3, r3, #23
 800d5f8:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800d5fa:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800d5fc:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800d5fe:	2320      	movs	r3, #32
 800d600:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800d602:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800d604:	8013      	strh	r3, [r2, #0]
 800d606:	e7da      	b.n	800d5be <GetPortGPIOs+0x2e>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800d608:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800d60a:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800d60c:	05db      	lsls	r3, r3, #23
 800d60e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800d610:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800d612:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800d614:	2308      	movs	r3, #8
 800d616:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800d618:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800d61a:	8013      	strh	r3, [r2, #0]
 800d61c:	e7cf      	b.n	800d5be <GetPortGPIOs+0x2e>
		*TX_Pin = USART5_TX_PIN;
 800d61e:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800d620:	4b09      	ldr	r3, [pc, #36]	; (800d648 <GetPortGPIOs+0xb8>)
	BOS_Status result = BOS_OK;
 800d622:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800d624:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800d626:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800d628:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800d62a:	2310      	movs	r3, #16
 800d62c:	9a04      	ldr	r2, [sp, #16]
 800d62e:	8013      	strh	r3, [r2, #0]
 800d630:	e7c5      	b.n	800d5be <GetPortGPIOs+0x2e>
 800d632:	46c0      	nop			; (mov r8, r8)
 800d634:	20006f18 	.word	0x20006f18
 800d638:	20007010 	.word	0x20007010
 800d63c:	20006df0 	.word	0x20006df0
 800d640:	20006ea8 	.word	0x20006ea8
 800d644:	20006f98 	.word	0x20006f98
 800d648:	48000400 	.word	0x48000400

0800d64c <IsFactoryReset>:
  __GPIOA_CLK_ENABLE();
 800d64c:	2080      	movs	r0, #128	; 0x80
 800d64e:	4b38      	ldr	r3, [pc, #224]	; (800d730 <IsFactoryReset+0xe4>)
 800d650:	0280      	lsls	r0, r0, #10
 800d652:	6959      	ldr	r1, [r3, #20]
{
 800d654:	b570      	push	{r4, r5, r6, lr}
  __GPIOA_CLK_ENABLE();
 800d656:	4301      	orrs	r1, r0
 800d658:	6159      	str	r1, [r3, #20]
 800d65a:	695a      	ldr	r2, [r3, #20]
{
 800d65c:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800d65e:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800d660:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800d662:	9209      	str	r2, [sp, #36]	; 0x24
 800d664:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800d666:	6959      	ldr	r1, [r3, #20]
 800d668:	02c0      	lsls	r0, r0, #11
 800d66a:	4301      	orrs	r1, r0
 800d66c:	6159      	str	r1, [r3, #20]
 800d66e:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800d670:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800d672:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800d674:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800d676:	920a      	str	r2, [sp, #40]	; 0x28
 800d678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800d67a:	6959      	ldr	r1, [r3, #20]
 800d67c:	0300      	lsls	r0, r0, #12
 800d67e:	4301      	orrs	r1, r0
 800d680:	6159      	str	r1, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800d682:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800d684:	695a      	ldr	r2, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800d686:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800d688:	4002      	ands	r2, r0
 800d68a:	920b      	str	r2, [sp, #44]	; 0x2c
 800d68c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__GPIOD_CLK_ENABLE();
 800d68e:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800d690:	ad03      	add	r5, sp, #12
	__GPIOD_CLK_ENABLE();
 800d692:	430a      	orrs	r2, r1
 800d694:	615a      	str	r2, [r3, #20]
 800d696:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800d698:	446c      	add	r4, sp
	__GPIOD_CLK_ENABLE();
 800d69a:	400b      	ands	r3, r1
 800d69c:	930c      	str	r3, [sp, #48]	; 0x30
 800d69e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800d6a0:	230e      	movs	r3, #14
 800d6a2:	446b      	add	r3, sp
 800d6a4:	9300      	str	r3, [sp, #0]
 800d6a6:	002a      	movs	r2, r5
 800d6a8:	ab06      	add	r3, sp, #24
 800d6aa:	a905      	add	r1, sp, #20
 800d6ac:	2001      	movs	r0, #1
 800d6ae:	f7ff ff6f 	bl	800d590 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800d6b2:	aa04      	add	r2, sp, #16
 800d6b4:	ab08      	add	r3, sp, #32
 800d6b6:	a907      	add	r1, sp, #28
 800d6b8:	9400      	str	r4, [sp, #0]
 800d6ba:	2005      	movs	r0, #5
 800d6bc:	f7ff ff68 	bl	800d590 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6c0:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6c2:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6c4:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800d6c6:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800d6c8:	a90d      	add	r1, sp, #52	; 0x34
 800d6ca:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800d6cc:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6ce:	960f      	str	r6, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800d6d0:	f004 f8b6 	bl	8011840 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800d6d4:	2302      	movs	r3, #2
 800d6d6:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800d6d8:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800d6da:	a90d      	add	r1, sp, #52	; 0x34
 800d6dc:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800d6de:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d6e0:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800d6e2:	f004 f8ad 	bl	8011840 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800d6e6:	8829      	ldrh	r1, [r5, #0]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	9805      	ldr	r0, [sp, #20]
 800d6ec:	f004 fa48 	bl	8011b80 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800d6f0:	2005      	movs	r0, #5
 800d6f2:	f000 fadd 	bl	800dcb0 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800d6f6:	8821      	ldrh	r1, [r4, #0]
 800d6f8:	9808      	ldr	r0, [sp, #32]
 800d6fa:	f004 fa3b 	bl	8011b74 <HAL_GPIO_ReadPin>
 800d6fe:	2800      	cmp	r0, #0
 800d700:	d006      	beq.n	800d710 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800d702:	2201      	movs	r2, #1
	return 0;
 800d704:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800d706:	4b0b      	ldr	r3, [pc, #44]	; (800d734 <IsFactoryReset+0xe8>)
 800d708:	4252      	negs	r2, r2
 800d70a:	601a      	str	r2, [r3, #0]
}
 800d70c:	b012      	add	sp, #72	; 0x48
 800d70e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800d710:	8829      	ldrh	r1, [r5, #0]
 800d712:	2201      	movs	r2, #1
 800d714:	9805      	ldr	r0, [sp, #20]
 800d716:	f004 fa33 	bl	8011b80 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800d71a:	2005      	movs	r0, #5
 800d71c:	f000 fac8 	bl	800dcb0 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800d720:	8821      	ldrh	r1, [r4, #0]
 800d722:	9808      	ldr	r0, [sp, #32]
 800d724:	f004 fa26 	bl	8011b74 <HAL_GPIO_ReadPin>
 800d728:	2801      	cmp	r0, #1
 800d72a:	d1ea      	bne.n	800d702 <IsFactoryReset+0xb6>
 800d72c:	e7ee      	b.n	800d70c <IsFactoryReset+0xc0>
 800d72e:	46c0      	nop			; (mov r8, r8)
 800d730:	40021000 	.word	0x40021000
 800d734:	20007ff0 	.word	0x20007ff0

0800d738 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d738:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d73a:	f002 fd03 	bl	8010144 <HAL_IncTick>
  osSystickHandler();  
 800d73e:	f000 fdef 	bl	800e320 <osSystickHandler>

}
 800d742:	bd10      	pop	{r4, pc}

0800d744 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800d744:	e7fe      	b.n	800d744 <HardFault_Handler>
 800d746:	46c0      	nop			; (mov r8, r8)

0800d748 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d748:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d74a:	4802      	ldr	r0, [pc, #8]	; (800d754 <USART1_IRQHandler+0xc>)
 800d74c:	f006 f912 	bl	8013974 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d750:	bd10      	pop	{r4, pc}
 800d752:	46c0      	nop			; (mov r8, r8)
 800d754:	20006f18 	.word	0x20006f18

0800d758 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d758:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d75a:	4802      	ldr	r0, [pc, #8]	; (800d764 <USART2_IRQHandler+0xc>)
 800d75c:	f006 f90a 	bl	8013974 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d760:	bd10      	pop	{r4, pc}
 800d762:	46c0      	nop			; (mov r8, r8)
 800d764:	20007010 	.word	0x20007010

0800d768 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d768:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d76a:	4805      	ldr	r0, [pc, #20]	; (800d780 <USART3_8_IRQHandler+0x18>)
 800d76c:	f006 f902 	bl	8013974 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800d770:	4804      	ldr	r0, [pc, #16]	; (800d784 <USART3_8_IRQHandler+0x1c>)
 800d772:	f006 f8ff 	bl	8013974 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d776:	4804      	ldr	r0, [pc, #16]	; (800d788 <USART3_8_IRQHandler+0x20>)
 800d778:	f006 f8fc 	bl	8013974 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d77c:	bd10      	pop	{r4, pc}
 800d77e:	46c0      	nop			; (mov r8, r8)
 800d780:	20006df0 	.word	0x20006df0
 800d784:	20006ea8 	.word	0x20006ea8
 800d788:	20006f98 	.word	0x20006f98

0800d78c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d78c:	4b0c      	ldr	r3, [pc, #48]	; (800d7c0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
{
 800d78e:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	2310      	movs	r3, #16
 800d794:	4213      	tst	r3, r2
 800d796:	d10e      	bne.n	800d7b6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d798:	4a0a      	ldr	r2, [pc, #40]	; (800d7c4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d79a:	6811      	ldr	r1, [r2, #0]
 800d79c:	05c9      	lsls	r1, r1, #23
 800d79e:	d406      	bmi.n	800d7ae <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d7a0:	6812      	ldr	r2, [r2, #0]
 800d7a2:	4213      	tst	r3, r2
 800d7a4:	d002      	beq.n	800d7ac <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d7a6:	4808      	ldr	r0, [pc, #32]	; (800d7c8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d7a8:	f003 fa68 	bl	8010c7c <HAL_DMA_IRQHandler>
	}
}
 800d7ac:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800d7ae:	2002      	movs	r0, #2
 800d7b0:	f7fa f8be 	bl	8007930 <DMA_IRQHandler>
 800d7b4:	e7fa      	b.n	800d7ac <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		DMA_IRQHandler(P5);
 800d7b6:	2005      	movs	r0, #5
 800d7b8:	f7fa f8ba 	bl	8007930 <DMA_IRQHandler>
 800d7bc:	e7f6      	b.n	800d7ac <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
 800d7be:	46c0      	nop			; (mov r8, r8)
 800d7c0:	40020400 	.word	0x40020400
 800d7c4:	40020000 	.word	0x40020000
 800d7c8:	20001bec 	.word	0x20001bec

0800d7cc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d7cc:	4b12      	ldr	r3, [pc, #72]	; (800d818 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
{
 800d7ce:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	03d2      	lsls	r2, r2, #15
 800d7d4:	d414      	bmi.n	800d800 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	02d2      	lsls	r2, r2, #11
 800d7da:	d40d      	bmi.n	800d7f8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d7dc:	4a0f      	ldr	r2, [pc, #60]	; (800d81c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800d7de:	6812      	ldr	r2, [r2, #0]
 800d7e0:	05d2      	lsls	r2, r2, #23
 800d7e2:	d411      	bmi.n	800d808 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	04d2      	lsls	r2, r2, #19
 800d7e8:	d412      	bmi.n	800d810 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	01db      	lsls	r3, r3, #7
 800d7ee:	d506      	bpl.n	800d7fe <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d7f0:	480b      	ldr	r0, [pc, #44]	; (800d820 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d7f2:	f003 fa43 	bl	8010c7c <HAL_DMA_IRQHandler>
	}
}
 800d7f6:	e002      	b.n	800d7fe <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800d7f8:	2004      	movs	r0, #4
 800d7fa:	f7fa f899 	bl	8007930 <DMA_IRQHandler>
}
 800d7fe:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800d800:	2003      	movs	r0, #3
 800d802:	f7fa f895 	bl	8007930 <DMA_IRQHandler>
 800d806:	e7fa      	b.n	800d7fe <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800d808:	2006      	movs	r0, #6
 800d80a:	f7fa f891 	bl	8007930 <DMA_IRQHandler>
 800d80e:	e7f6      	b.n	800d7fe <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d810:	4804      	ldr	r0, [pc, #16]	; (800d824 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800d812:	f003 fa33 	bl	8010c7c <HAL_DMA_IRQHandler>
 800d816:	e7f2      	b.n	800d7fe <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800d818:	40020000 	.word	0x40020000
 800d81c:	40020400 	.word	0x40020400
 800d820:	20001c5c 	.word	0x20001c5c
 800d824:	20001c24 	.word	0x20001c24

0800d828 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800d828:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800d82a:	4802      	ldr	r0, [pc, #8]	; (800d834 <ADC1_COMP_IRQHandler+0xc>)
 800d82c:	f002 fed0 	bl	80105d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800d830:	bd10      	pop	{r4, pc}
 800d832:	46c0      	nop			; (mov r8, r8)
 800d834:	20006d84 	.word	0x20006d84

0800d838 <HAL_UART_TxCpltCallback>:
/*-----------------------------------------------------------*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d838:	2300      	movs	r3, #0
{
 800d83a:	b510      	push	{r4, lr}
 800d83c:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d83e:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d840:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 800d842:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800d844:	2b00      	cmp	r3, #0
 800d846:	d001      	beq.n	800d84c <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d848:	f7fe ff9e 	bl	800c788 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d84c:	0020      	movs	r0, r4
 800d84e:	f7fd ffc9 	bl	800b7e4 <GetPort>
 800d852:	4b04      	ldr	r3, [pc, #16]	; (800d864 <HAL_UART_TxCpltCallback+0x2c>)
 800d854:	0080      	lsls	r0, r0, #2
 800d856:	58c0      	ldr	r0, [r0, r3]
 800d858:	a901      	add	r1, sp, #4
 800d85a:	f001 f8e1 	bl	800ea20 <xQueueGiveFromISR>
}
 800d85e:	b002      	add	sp, #8
 800d860:	bd10      	pop	{r4, pc}
 800d862:	46c0      	nop			; (mov r8, r8)
 800d864:	20006d4c 	.word	0x20006d4c

0800d868 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d868:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d86a:	2369      	movs	r3, #105	; 0x69
 800d86c:	2501      	movs	r5, #1
 800d86e:	54c5      	strb	r5, [r0, r3]
{
 800d870:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d872:	f7fd ffb7 	bl	800b7e4 <GetPort>
	if (portStatus[port] == STREAM) {
 800d876:	4b0b      	ldr	r3, [pc, #44]	; (800d8a4 <HAL_UART_ErrorCallback+0x3c>)
 800d878:	5c1b      	ldrb	r3, [r3, r0]
 800d87a:	2b02      	cmp	r3, #2
 800d87c:	d004      	beq.n	800d888 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d87e:	4b0a      	ldr	r3, [pc, #40]	; (800d8a8 <HAL_UART_ErrorCallback+0x40>)
 800d880:	1818      	adds	r0, r3, r0
 800d882:	3801      	subs	r0, #1
 800d884:	7005      	strb	r5, [r0, #0]
	}	
}
 800d886:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d88a:	3801      	subs	r0, #1
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	0080      	lsls	r0, r0, #2
 800d890:	685a      	ldr	r2, [r3, #4]
 800d892:	4b06      	ldr	r3, [pc, #24]	; (800d8ac <HAL_UART_ErrorCallback+0x44>)
 800d894:	b292      	uxth	r2, r2
 800d896:	58c3      	ldr	r3, [r0, r3]
 800d898:	0020      	movs	r0, r4
 800d89a:	6819      	ldr	r1, [r3, #0]
 800d89c:	3128      	adds	r1, #40	; 0x28
 800d89e:	f005 fcc9 	bl	8013234 <HAL_UART_Receive_DMA>
 800d8a2:	e7f0      	b.n	800d886 <HAL_UART_ErrorCallback+0x1e>
 800d8a4:	20000c2c 	.word	0x20000c2c
 800d8a8:	200012f8 	.word	0x200012f8
 800d8ac:	200012e4 	.word	0x200012e4

0800d8b0 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d8b0:	b570      	push	{r4, r5, r6, lr}
 800d8b2:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800d8b4:	f7fd ff96 	bl	800b7e4 <GetPort>
 800d8b8:	4d12      	ldr	r5, [pc, #72]	; (800d904 <HAL_UART_RxCpltCallback+0x54>)
 800d8ba:	5c2b      	ldrb	r3, [r5, r0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d006      	beq.n	800d8ce <HAL_UART_RxCpltCallback+0x1e>
 800d8c0:	0020      	movs	r0, r4
 800d8c2:	f7fd ff8f 	bl	800b7e4 <GetPort>
 800d8c6:	5c2b      	ldrb	r3, [r5, r0]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d000      	beq.n	800d8ce <HAL_UART_RxCpltCallback+0x1e>
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
	}
}
 800d8cc:	bd70      	pop	{r4, r5, r6, pc}
		BOSMessaging.overrun = GetPort(huart);
 800d8ce:	0020      	movs	r0, r4
 800d8d0:	f7fd ff88 	bl	800b7e4 <GetPort>
 800d8d4:	4b0c      	ldr	r3, [pc, #48]	; (800d908 <HAL_UART_RxCpltCallback+0x58>)
 800d8d6:	7098      	strb	r0, [r3, #2]
		portStatus[GetPort(huart)] = OVERRUN;
 800d8d8:	0020      	movs	r0, r4
 800d8da:	f7fd ff83 	bl	800b7e4 <GetPort>
 800d8de:	2305      	movs	r3, #5
 800d8e0:	542b      	strb	r3, [r5, r0]
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800d8e2:	0020      	movs	r0, r4
 800d8e4:	f7fd ff7e 	bl	800b7e4 <GetPort>
 800d8e8:	4b08      	ldr	r3, [pc, #32]	; (800d90c <HAL_UART_RxCpltCallback+0x5c>)
 800d8ea:	1818      	adds	r0, r3, r0
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	3801      	subs	r0, #1
 800d8f0:	7003      	strb	r3, [r0, #0]
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800d8f2:	0020      	movs	r0, r4
 800d8f4:	f7fd ff76 	bl	800b7e4 <GetPort>
 800d8f8:	4b05      	ldr	r3, [pc, #20]	; (800d910 <HAL_UART_RxCpltCallback+0x60>)
 800d8fa:	1818      	adds	r0, r3, r0
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	3801      	subs	r0, #1
 800d900:	7003      	strb	r3, [r0, #0]
 800d902:	e7e3      	b.n	800d8cc <HAL_UART_RxCpltCallback+0x1c>
 800d904:	20000c2c 	.word	0x20000c2c
 800d908:	20006c4c 	.word	0x20006c4c
 800d90c:	20001300 	.word	0x20001300
 800d910:	200012f8 	.word	0x200012f8

0800d914 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800d914:	b672      	cpsid	i
 800d916:	e7fe      	b.n	800d916 <vApplicationStackOverflowHook+0x2>

0800d918 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800d918:	b672      	cpsid	i
 800d91a:	e7fe      	b.n	800d91a <vApplicationMallocFailedHook+0x2>

0800d91c <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d91c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d91e:	46de      	mov	lr, fp
 800d920:	464e      	mov	r6, r9
 800d922:	4645      	mov	r5, r8
 800d924:	4657      	mov	r7, sl
 800d926:	b5e0      	push	{r5, r6, r7, lr}
 800d928:	b08d      	sub	sp, #52	; 0x34
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d92a:	ae04      	add	r6, sp, #16
 800d92c:	0032      	movs	r2, r6
 800d92e:	4b34      	ldr	r3, [pc, #208]	; (800da00 <RTC_CalendarConfig+0xe4>)
 800d930:	cb13      	ldmia	r3!, {r0, r1, r4}
 800d932:	c213      	stmia	r2!, {r0, r1, r4}
 800d934:	ab01      	add	r3, sp, #4
 800d936:	4698      	mov	r8, r3
 800d938:	4642      	mov	r2, r8
 800d93a:	4b32      	ldr	r3, [pc, #200]	; (800da04 <RTC_CalendarConfig+0xe8>)
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
  *(comDate + 6) = 0;
 800d93c:	2400      	movs	r4, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d93e:	cb03      	ldmia	r3!, {r0, r1}
 800d940:	c203      	stmia	r2!, {r0, r1}
  year = atoi(comDate + 9);		// only last 2 digits
 800d942:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d944:	781b      	ldrb	r3, [r3, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800d946:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d948:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800d94a:	f006 f8a2 	bl	8013a92 <atoi>
 800d94e:	b2c3      	uxtb	r3, r0
  day = atoi(comDate + 4);
 800d950:	a805      	add	r0, sp, #20
  year = atoi(comDate + 9);		// only last 2 digits
 800d952:	469a      	mov	sl, r3
  *(comDate + 6) = 0;
 800d954:	71b4      	strb	r4, [r6, #6]
  day = atoi(comDate + 4);
 800d956:	f006 f89c 	bl	8013a92 <atoi>
 800d95a:	b2c3      	uxtb	r3, r0
 800d95c:	4699      	mov	r9, r3
 800d95e:	4d2a      	ldr	r5, [pc, #168]	; (800da08 <RTC_CalendarConfig+0xec>)
  *(comDate + 3) = 0;
 800d960:	70f4      	strb	r4, [r6, #3]
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d962:	6829      	ldr	r1, [r5, #0]
 800d964:	0030      	movs	r0, r6
 800d966:	f7f2 fbcd 	bl	8000104 <strcmp>
 800d96a:	3401      	adds	r4, #1
 800d96c:	b2e4      	uxtb	r4, r4
 800d96e:	2800      	cmp	r0, #0
 800d970:	d100      	bne.n	800d974 <RTC_CalendarConfig+0x58>
 800d972:	0027      	movs	r7, r4
 800d974:	3504      	adds	r5, #4
  for (uint8_t i = 0; i < 12; i++)
 800d976:	2c0c      	cmp	r4, #12
 800d978:	d1f3      	bne.n	800d962 <RTC_CalendarConfig+0x46>
			month = i + 1;
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d97a:	200a      	movs	r0, #10
 800d97c:	4468      	add	r0, sp
 800d97e:	f006 f888 	bl	8013a92 <atoi>
	*(comDate + 5) = 0;
 800d982:	2300      	movs	r3, #0
 800d984:	7173      	strb	r3, [r6, #5]
 800d986:	469b      	mov	fp, r3
	minutes = atoi(comTime + 3);
 800d988:	466b      	mov	r3, sp
	seconds = atoi(comTime + 6);
 800d98a:	0004      	movs	r4, r0
	minutes = atoi(comTime + 3);
 800d98c:	1dd8      	adds	r0, r3, #7
 800d98e:	f006 f880 	bl	8013a92 <atoi>
	*(comDate + 2) = 0;
 800d992:	465b      	mov	r3, fp
	minutes = atoi(comTime + 3);
 800d994:	0005      	movs	r5, r0
	hours = atoi(comTime);
 800d996:	4640      	mov	r0, r8
	*(comDate + 2) = 0;
 800d998:	70b3      	strb	r3, [r6, #2]
	hours = atoi(comTime);
 800d99a:	f006 f87a 	bl	8013a92 <atoi>
	
  /* Set Date */
  sdatestructure.Year = year;
 800d99e:	466b      	mov	r3, sp
 800d9a0:	4652      	mov	r2, sl
 800d9a2:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month = month;
  sdatestructure.Date = day;
 800d9a4:	464a      	mov	r2, r9
  sdatestructure.Month = month;
 800d9a6:	705f      	strb	r7, [r3, #1]
  sdatestructure.Date = day;
 800d9a8:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d9aa:	466a      	mov	r2, sp
 800d9ac:	2301      	movs	r3, #1
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d9ae:	4f17      	ldr	r7, [pc, #92]	; (800da0c <RTC_CalendarConfig+0xf0>)
	hours = atoi(comTime);
 800d9b0:	0006      	movs	r6, r0
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d9b2:	7013      	strb	r3, [r2, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d9b4:	4669      	mov	r1, sp
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	0038      	movs	r0, r7
 800d9ba:	f004 ff2f 	bl	801281c <HAL_RTC_SetDate>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	d116      	bne.n	800d9f0 <RTC_CalendarConfig+0xd4>

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
  stimestructure.Seconds = seconds;
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d9c2:	2218      	movs	r2, #24
 800d9c4:	4b12      	ldr	r3, [pc, #72]	; (800da10 <RTC_CalendarConfig+0xf4>)
  stimestructure.Hours = hours;
 800d9c6:	a907      	add	r1, sp, #28
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d9c8:	7208      	strb	r0, [r1, #8]
 800d9ca:	735a      	strb	r2, [r3, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d9cc:	60c8      	str	r0, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d9ce:	6108      	str	r0, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	0038      	movs	r0, r7
  stimestructure.Hours = hours;
 800d9d4:	700e      	strb	r6, [r1, #0]
  stimestructure.Minutes = minutes;
 800d9d6:	704d      	strb	r5, [r1, #1]
  stimestructure.Seconds = seconds;
 800d9d8:	708c      	strb	r4, [r1, #2]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d9da:	f004 fe8b 	bl	80126f4 <HAL_RTC_SetTime>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d106      	bne.n	800d9f0 <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d9e2:	0038      	movs	r0, r7
 800d9e4:	4a0b      	ldr	r2, [pc, #44]	; (800da14 <RTC_CalendarConfig+0xf8>)
 800d9e6:	2101      	movs	r1, #1
 800d9e8:	f004 ff94 	bl	8012914 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d9ec:	2000      	movs	r0, #0
 800d9ee:	e000      	b.n	800d9f2 <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800d9f0:	20ff      	movs	r0, #255	; 0xff
}
 800d9f2:	b00d      	add	sp, #52	; 0x34
 800d9f4:	bc3c      	pop	{r2, r3, r4, r5}
 800d9f6:	4690      	mov	r8, r2
 800d9f8:	4699      	mov	r9, r3
 800d9fa:	46a2      	mov	sl, r4
 800d9fc:	46ab      	mov	fp, r5
 800d9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da00:	080191d8 	.word	0x080191d8
 800da04:	0801bde4 	.word	0x0801bde4
 800da08:	2000004c 	.word	0x2000004c
 800da0c:	200070a8 	.word	0x200070a8
 800da10:	20006ccc 	.word	0x20006ccc
 800da14:	000032f2 	.word	0x000032f2

0800da18 <RTC_Init>:
  __HAL_RCC_RTC_ENABLE();
 800da18:	2380      	movs	r3, #128	; 0x80
{
 800da1a:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_RTC_ENABLE();
 800da1c:	4d1e      	ldr	r5, [pc, #120]	; (800da98 <RTC_Init+0x80>)
 800da1e:	021b      	lsls	r3, r3, #8
 800da20:	6a2a      	ldr	r2, [r5, #32]
	RtcHandle.Instance = RTC; 
 800da22:	4c1e      	ldr	r4, [pc, #120]	; (800da9c <RTC_Init+0x84>)
  __HAL_RCC_RTC_ENABLE();
 800da24:	4313      	orrs	r3, r2
 800da26:	622b      	str	r3, [r5, #32]
  RtcHandle.Init.AsynchPrediv = 124;
 800da28:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC; 
 800da2a:	4b1d      	ldr	r3, [pc, #116]	; (800daa0 <RTC_Init+0x88>)
  RtcHandle.Init.AsynchPrediv = 124;
 800da2c:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC; 
 800da2e:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800da30:	2300      	movs	r3, #0
  RtcHandle.Init.SynchPrediv = 1999;
 800da32:	4a1c      	ldr	r2, [pc, #112]	; (800daa4 <RTC_Init+0x8c>)
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800da34:	0020      	movs	r0, r4
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800da36:	6063      	str	r3, [r4, #4]
  RtcHandle.Init.SynchPrediv = 1999;
 800da38:	60e2      	str	r2, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800da3a:	6123      	str	r3, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800da3c:	6163      	str	r3, [r4, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800da3e:	61a3      	str	r3, [r4, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800da40:	f004 fe10 	bl	8012664 <HAL_RTC_Init>
 800da44:	0006      	movs	r6, r0
 800da46:	20ff      	movs	r0, #255	; 0xff
 800da48:	2e00      	cmp	r6, #0
 800da4a:	d119      	bne.n	800da80 <RTC_Init+0x68>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800da4c:	2101      	movs	r1, #1
 800da4e:	0020      	movs	r0, r4
 800da50:	f004 ff66 	bl	8012920 <HAL_RTCEx_BKUPRead>
 800da54:	4b14      	ldr	r3, [pc, #80]	; (800daa8 <RTC_Init+0x90>)
 800da56:	4298      	cmp	r0, r3
 800da58:	d113      	bne.n	800da82 <RTC_Init+0x6a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800da5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800da5c:	011b      	lsls	r3, r3, #4
 800da5e:	d501      	bpl.n	800da64 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800da60:	4b12      	ldr	r3, [pc, #72]	; (800daac <RTC_Init+0x94>)
 800da62:	701e      	strb	r6, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800da64:	4b0c      	ldr	r3, [pc, #48]	; (800da98 <RTC_Init+0x80>)
 800da66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da68:	015b      	lsls	r3, r3, #5
 800da6a:	d50c      	bpl.n	800da86 <RTC_Init+0x6e>
			bootStatus = RESET_BOOT;
 800da6c:	2201      	movs	r2, #1
 800da6e:	4b0f      	ldr	r3, [pc, #60]	; (800daac <RTC_Init+0x94>)
	return BOS_OK;
 800da70:	2000      	movs	r0, #0
			bootStatus = RESET_BOOT;
 800da72:	701a      	strb	r2, [r3, #0]
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800da74:	2380      	movs	r3, #128	; 0x80
 800da76:	4a08      	ldr	r2, [pc, #32]	; (800da98 <RTC_Init+0x80>)
 800da78:	045b      	lsls	r3, r3, #17
 800da7a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800da7c:	430b      	orrs	r3, r1
 800da7e:	6253      	str	r3, [r2, #36]	; 0x24
}
 800da80:	bd70      	pop	{r4, r5, r6, pc}
    RTC_CalendarConfig();
 800da82:	f7ff ff4b 	bl	800d91c <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800da86:	2380      	movs	r3, #128	; 0x80
 800da88:	4a03      	ldr	r2, [pc, #12]	; (800da98 <RTC_Init+0x80>)
 800da8a:	045b      	lsls	r3, r3, #17
 800da8c:	6a51      	ldr	r1, [r2, #36]	; 0x24
	return BOS_OK;
 800da8e:	2000      	movs	r0, #0
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800da90:	430b      	orrs	r3, r1
 800da92:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800da94:	e7f4      	b.n	800da80 <RTC_Init+0x68>
 800da96:	46c0      	nop			; (mov r8, r8)
 800da98:	40021000 	.word	0x40021000
 800da9c:	200070a8 	.word	0x200070a8
 800daa0:	40002800 	.word	0x40002800
 800daa4:	000007cf 	.word	0x000007cf
 800daa8:	000032f2 	.word	0x000032f2
 800daac:	20001de4 	.word	0x20001de4

0800dab0 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800dab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dab2:	46c6      	mov	lr, r8
 800dab4:	b500      	push	{lr}
 800dab6:	b086      	sub	sp, #24
 800dab8:	ac0c      	add	r4, sp, #48	; 0x30
 800daba:	7827      	ldrb	r7, [r4, #0]
 800dabc:	ac0d      	add	r4, sp, #52	; 0x34
 800dabe:	7824      	ldrb	r4, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800dac0:	3230      	adds	r2, #48	; 0x30
{
 800dac2:	46a0      	mov	r8, r4
 800dac4:	ac0e      	add	r4, sp, #56	; 0x38
 800dac6:	7825      	ldrb	r5, [r4, #0]
 800dac8:	ac0f      	add	r4, sp, #60	; 0x3c
 800daca:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 800dacc:	466c      	mov	r4, sp
 800dace:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800dad0:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800dad2:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800dad4:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800dad6:	4c20      	ldr	r4, [pc, #128]	; (800db58 <BOS_CalendarConfig+0xa8>)
 800dad8:	2200      	movs	r2, #0
 800dada:	4669      	mov	r1, sp
 800dadc:	0020      	movs	r0, r4
 800dade:	f004 fe9d 	bl	801281c <HAL_RTC_SetDate>
 800dae2:	2800      	cmp	r0, #0
 800dae4:	d123      	bne.n	800db2e <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
 800dae6:	4643      	mov	r3, r8
  stimestructure.Hours = hours;
 800dae8:	a901      	add	r1, sp, #4
 800daea:	700d      	strb	r5, [r1, #0]
  stimestructure.Minutes = minutes;
 800daec:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds; 
 800daee:	708f      	strb	r7, [r1, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800daf0:	6108      	str	r0, [r1, #16]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800daf2:	2d0c      	cmp	r5, #12
 800daf4:	d820      	bhi.n	800db38 <BOS_CalendarConfig+0x88>
 800daf6:	4d19      	ldr	r5, [pc, #100]	; (800db5c <BOS_CalendarConfig+0xac>)
	
	if (AMPM == RTC_AM) {
 800daf8:	2e01      	cmp	r6, #1
 800dafa:	d022      	beq.n	800db42 <BOS_CalendarConfig+0x92>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800dafc:	2e02      	cmp	r6, #2
 800dafe:	d025      	beq.n	800db4c <BOS_CalendarConfig+0x9c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800db00:	2318      	movs	r3, #24
 800db02:	736b      	strb	r3, [r5, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800db04:	2200      	movs	r2, #0
 800db06:	0020      	movs	r0, r4
 800db08:	f004 fdf4 	bl	80126f4 <HAL_RTC_SetTime>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d10e      	bne.n	800db2e <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800db10:	7b6b      	ldrb	r3, [r5, #13]
 800db12:	7929      	ldrb	r1, [r5, #4]
 800db14:	021b      	lsls	r3, r3, #8
 800db16:	301b      	adds	r0, #27
 800db18:	4319      	orrs	r1, r3
 800db1a:	30ff      	adds	r0, #255	; 0xff
 800db1c:	f7f9 fff2 	bl	8007b04 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800db20:	0020      	movs	r0, r4
 800db22:	4a0f      	ldr	r2, [pc, #60]	; (800db60 <BOS_CalendarConfig+0xb0>)
 800db24:	2101      	movs	r1, #1
 800db26:	f004 fef5 	bl	8012914 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800db2a:	2000      	movs	r0, #0
 800db2c:	e000      	b.n	800db30 <BOS_CalendarConfig+0x80>
		return BOS_ERROR;
 800db2e:	20ff      	movs	r0, #255	; 0xff
}
 800db30:	b006      	add	sp, #24
 800db32:	bc04      	pop	{r2}
 800db34:	4690      	mov	r8, r2
 800db36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hours > 12)	BOS.hourformat = 24;
 800db38:	2318      	movs	r3, #24
 800db3a:	4d08      	ldr	r5, [pc, #32]	; (800db5c <BOS_CalendarConfig+0xac>)
 800db3c:	736b      	strb	r3, [r5, #13]
	if (AMPM == RTC_AM) {
 800db3e:	2e01      	cmp	r6, #1
 800db40:	d1dc      	bne.n	800dafc <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800db42:	2300      	movs	r3, #0
 800db44:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800db46:	330c      	adds	r3, #12
 800db48:	736b      	strb	r3, [r5, #13]
 800db4a:	e7db      	b.n	800db04 <BOS_CalendarConfig+0x54>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800db4c:	2340      	movs	r3, #64	; 0x40
 800db4e:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800db50:	3b34      	subs	r3, #52	; 0x34
 800db52:	736b      	strb	r3, [r5, #13]
 800db54:	e7d6      	b.n	800db04 <BOS_CalendarConfig+0x54>
 800db56:	46c0      	nop			; (mov r8, r8)
 800db58:	200070a8 	.word	0x200070a8
 800db5c:	20006ccc 	.word	0x20006ccc
 800db60:	000032f2 	.word	0x000032f2

0800db64 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800db64:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800db66:	4d16      	ldr	r5, [pc, #88]	; (800dbc0 <GetTimeDate+0x5c>)
{
 800db68:	b087      	sub	sp, #28
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800db6a:	ac01      	add	r4, sp, #4
 800db6c:	0021      	movs	r1, r4
 800db6e:	2200      	movs	r2, #0
 800db70:	0028      	movs	r0, r5
 800db72:	f004 fcdf 	bl	8012534 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800db76:	4669      	mov	r1, sp
 800db78:	2200      	movs	r2, #0
 800db7a:	0028      	movs	r0, r5
 800db7c:	f004 fd0a 	bl	8012594 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800db80:	7a22      	ldrb	r2, [r4, #8]
 800db82:	4b10      	ldr	r3, [pc, #64]	; (800dbc4 <GetTimeDate+0x60>)
 800db84:	09d2      	lsrs	r2, r2, #7
 800db86:	3201      	adds	r2, #1
 800db88:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800db8a:	6862      	ldr	r2, [r4, #4]
	BOS.time.minutes = stimestructureget.Minutes;
	BOS.time.hours = stimestructureget.Hours;
	BOS.date.day = sdatestructureget.Date;
	BOS.date.month = sdatestructureget.Month;
	BOS.date.weekday = sdatestructureget.WeekDay;
	BOS.date.year = sdatestructureget.Year + 2000;
 800db8c:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800db8e:	0852      	lsrs	r2, r2, #1
 800db90:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800db92:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year = sdatestructureget.Year + 2000;
 800db94:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds = stimestructureget.Seconds;
 800db96:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800db98:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year = sdatestructureget.Year + 2000;
 800db9a:	468c      	mov	ip, r1
	BOS.time.minutes = stimestructureget.Minutes;
 800db9c:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800db9e:	7822      	ldrb	r2, [r4, #0]
 800dba0:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800dba2:	466a      	mov	r2, sp
 800dba4:	7892      	ldrb	r2, [r2, #2]
 800dba6:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800dba8:	466a      	mov	r2, sp
 800dbaa:	7852      	ldrb	r2, [r2, #1]
 800dbac:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800dbae:	466a      	mov	r2, sp
 800dbb0:	7812      	ldrb	r2, [r2, #0]
 800dbb2:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800dbb4:	466a      	mov	r2, sp
 800dbb6:	78d2      	ldrb	r2, [r2, #3]
 800dbb8:	4462      	add	r2, ip
 800dbba:	831a      	strh	r2, [r3, #24]
}
 800dbbc:	b007      	add	sp, #28
 800dbbe:	bd30      	pop	{r4, r5, pc}
 800dbc0:	200070a8 	.word	0x200070a8
 800dbc4:	20006ccc 	.word	0x20006ccc

0800dbc8 <TIM_USEC_Init>:
void TIM_USEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800dbc8:	2080      	movs	r0, #128	; 0x80
 800dbca:	4a13      	ldr	r2, [pc, #76]	; (800dc18 <TIM_USEC_Init+0x50>)
{
 800dbcc:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE();
 800dbce:	69d1      	ldr	r1, [r2, #28]
 800dbd0:	0040      	lsls	r0, r0, #1
 800dbd2:	4301      	orrs	r1, r0
 800dbd4:	61d1      	str	r1, [r2, #28]
 800dbd6:	69d3      	ldr	r3, [r2, #28]
{
 800dbd8:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 800dbda:	4003      	ands	r3, r0
 800dbdc:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800dbde:	4c0f      	ldr	r4, [pc, #60]	; (800dc1c <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE();
 800dbe0:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800dbe2:	4b0f      	ldr	r3, [pc, #60]	; (800dc20 <TIM_USEC_Init+0x58>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dbe4:	2500      	movs	r5, #0
  htim14.Instance = TIM14;
 800dbe6:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800dbe8:	f004 fbf4 	bl	80123d4 <HAL_RCC_GetPCLK1Freq>
 800dbec:	490d      	ldr	r1, [pc, #52]	; (800dc24 <TIM_USEC_Init+0x5c>)
 800dbee:	f7f2 faaf 	bl	8000150 <__udivsi3>
  htim14.Init.Period = 0xFFFF;
 800dbf2:	4b0d      	ldr	r3, [pc, #52]	; (800dc28 <TIM_USEC_Init+0x60>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800dbf4:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim14);
 800dbf6:	0020      	movs	r0, r4
  htim14.Init.Period = 0xFFFF;
 800dbf8:	60e3      	str	r3, [r4, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dbfa:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim14);
 800dbfc:	f005 f928 	bl	8012e50 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800dc00:	a902      	add	r1, sp, #8
 800dc02:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc04:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc06:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800dc08:	f005 f9fe 	bl	8013008 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800dc0c:	0020      	movs	r0, r4
 800dc0e:	f004 ff67 	bl	8012ae0 <HAL_TIM_Base_Start>
}
 800dc12:	b005      	add	sp, #20
 800dc14:	bd30      	pop	{r4, r5, pc}
 800dc16:	46c0      	nop			; (mov r8, r8)
 800dc18:	40021000 	.word	0x40021000
 800dc1c:	20007104 	.word	0x20007104
 800dc20:	40002000 	.word	0x40002000
 800dc24:	000f4240 	.word	0x000f4240
 800dc28:	0000ffff 	.word	0x0000ffff

0800dc2c <TIM_MSEC_Init>:
void TIM_MSEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800dc2c:	2080      	movs	r0, #128	; 0x80
 800dc2e:	4a13      	ldr	r2, [pc, #76]	; (800dc7c <TIM_MSEC_Init+0x50>)
{
 800dc30:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE();
 800dc32:	6991      	ldr	r1, [r2, #24]
 800dc34:	0240      	lsls	r0, r0, #9
 800dc36:	4301      	orrs	r1, r0
 800dc38:	6191      	str	r1, [r2, #24]
 800dc3a:	6993      	ldr	r3, [r2, #24]
{
 800dc3c:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 800dc3e:	4003      	ands	r3, r0
 800dc40:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800dc42:	4c0f      	ldr	r4, [pc, #60]	; (800dc80 <TIM_MSEC_Init+0x54>)
	__TIM15_CLK_ENABLE();
 800dc44:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 800dc46:	4b0f      	ldr	r3, [pc, #60]	; (800dc84 <TIM_MSEC_Init+0x58>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc48:	2500      	movs	r5, #0
  htim15.Instance = TIM15;
 800dc4a:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800dc4c:	f004 fbc2 	bl	80123d4 <HAL_RCC_GetPCLK1Freq>
 800dc50:	21fa      	movs	r1, #250	; 0xfa
 800dc52:	0089      	lsls	r1, r1, #2
 800dc54:	f7f2 fa7c 	bl	8000150 <__udivsi3>
  htim15.Init.Period = 0xFFFF;
 800dc58:	4b0b      	ldr	r3, [pc, #44]	; (800dc88 <TIM_MSEC_Init+0x5c>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800dc5a:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim15);
 800dc5c:	0020      	movs	r0, r4
  htim15.Init.Period = 0xFFFF;
 800dc5e:	60e3      	str	r3, [r4, #12]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc60:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim15);
 800dc62:	f005 f8f5 	bl	8012e50 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800dc66:	a902      	add	r1, sp, #8
 800dc68:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc6a:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc6c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800dc6e:	f005 f9cb 	bl	8013008 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800dc72:	0020      	movs	r0, r4
 800dc74:	f004 ff34 	bl	8012ae0 <HAL_TIM_Base_Start>
}
 800dc78:	b005      	add	sp, #20
 800dc7a:	bd30      	pop	{r4, r5, pc}
 800dc7c:	40021000 	.word	0x40021000
 800dc80:	200070c8 	.word	0x200070c8
 800dc84:	40014000 	.word	0x40014000
 800dc88:	0000ffff 	.word	0x0000ffff

0800dc8c <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800dc8c:	b510      	push	{r4, lr}
 800dc8e:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800dc90:	f002 f91a 	bl	800fec8 <vPortEnterCritical>
	
	if (Delay)
 800dc94:	2c00      	cmp	r4, #0
 800dc96:	d006      	beq.n	800dca6 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800dc98:	4b04      	ldr	r3, [pc, #16]	; (800dcac <StartMicroDelay+0x20>)
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800dc9e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800dca0:	1a5b      	subs	r3, r3, r1
 800dca2:	42a3      	cmp	r3, r4
 800dca4:	d9fb      	bls.n	800dc9e <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800dca6:	f002 f91b 	bl	800fee0 <vPortExitCritical>
}
 800dcaa:	bd10      	pop	{r4, pc}
 800dcac:	20007104 	.word	0x20007104

0800dcb0 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800dcb0:	b510      	push	{r4, lr}
 800dcb2:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800dcb4:	f002 f908 	bl	800fec8 <vPortEnterCritical>
	
	if (Delay)
 800dcb8:	2c00      	cmp	r4, #0
 800dcba:	d006      	beq.n	800dcca <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800dcbc:	4b04      	ldr	r3, [pc, #16]	; (800dcd0 <StartMilliDelay+0x20>)
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800dcc2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800dcc4:	1a5b      	subs	r3, r3, r1
 800dcc6:	42a3      	cmp	r3, r4
 800dcc8:	d9fb      	bls.n	800dcc2 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800dcca:	f002 f909 	bl	800fee0 <vPortExitCritical>
}
 800dcce:	bd10      	pop	{r4, pc}
 800dcd0:	200070c8 	.word	0x200070c8

0800dcd4 <MX_USART1_UART_Init>:

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
 800dcd4:	4809      	ldr	r0, [pc, #36]	; (800dcfc <MX_USART1_UART_Init+0x28>)
 800dcd6:	4b0a      	ldr	r3, [pc, #40]	; (800dd00 <MX_USART1_UART_Init+0x2c>)
{
 800dcd8:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800dcda:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dcdc:	23e1      	movs	r3, #225	; 0xe1
 800dcde:	031b      	lsls	r3, r3, #12
 800dce0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800dce2:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dce4:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800dce6:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dce8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800dcea:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800dcec:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dcee:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800dcf0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dcf2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dcf4:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800dcf6:	f005 fd77 	bl	80137e8 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800dcfa:	bd10      	pop	{r4, pc}
 800dcfc:	20006f18 	.word	0x20006f18
 800dd00:	40013800 	.word	0x40013800

0800dd04 <MX_USART2_UART_Init>:

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
 800dd04:	4809      	ldr	r0, [pc, #36]	; (800dd2c <MX_USART2_UART_Init+0x28>)
 800dd06:	4b0a      	ldr	r3, [pc, #40]	; (800dd30 <MX_USART2_UART_Init+0x2c>)
{
 800dd08:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800dd0a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dd0c:	23e1      	movs	r3, #225	; 0xe1
 800dd0e:	031b      	lsls	r3, r3, #12
 800dd10:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800dd12:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800dd14:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800dd16:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800dd18:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800dd1a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800dd1c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dd1e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800dd20:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dd22:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dd24:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800dd26:	f005 fd5f 	bl	80137e8 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800dd2a:	bd10      	pop	{r4, pc}
 800dd2c:	20007010 	.word	0x20007010
 800dd30:	40004400 	.word	0x40004400

0800dd34 <MX_USART3_UART_Init>:

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
  huart3.Instance = USART3;
 800dd34:	4809      	ldr	r0, [pc, #36]	; (800dd5c <MX_USART3_UART_Init+0x28>)
 800dd36:	4b0a      	ldr	r3, [pc, #40]	; (800dd60 <MX_USART3_UART_Init+0x2c>)
{
 800dd38:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800dd3a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dd3c:	23e1      	movs	r3, #225	; 0xe1
 800dd3e:	031b      	lsls	r3, r3, #12
 800dd40:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800dd42:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800dd44:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800dd46:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800dd48:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800dd4a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800dd4c:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dd4e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800dd50:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dd52:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dd54:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800dd56:	f005 fd47 	bl	80137e8 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800dd5a:	bd10      	pop	{r4, pc}
 800dd5c:	20006df0 	.word	0x20006df0
 800dd60:	40004800 	.word	0x40004800

0800dd64 <MX_USART5_UART_Init>:

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
  huart5.Instance = USART5;
 800dd64:	4809      	ldr	r0, [pc, #36]	; (800dd8c <MX_USART5_UART_Init+0x28>)
 800dd66:	4b0a      	ldr	r3, [pc, #40]	; (800dd90 <MX_USART5_UART_Init+0x2c>)
{
 800dd68:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800dd6a:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dd6c:	23e1      	movs	r3, #225	; 0xe1
 800dd6e:	031b      	lsls	r3, r3, #12
 800dd70:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 800dd72:	220c      	movs	r2, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800dd74:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800dd76:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800dd78:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800dd7a:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800dd7c:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dd7e:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800dd80:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dd82:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dd84:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800dd86:	f005 fd2f 	bl	80137e8 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800dd8a:	bd10      	pop	{r4, pc}
 800dd8c:	20006ea8 	.word	0x20006ea8
 800dd90:	40005000 	.word	0x40005000

0800dd94 <MX_USART6_UART_Init>:

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
  huart6.Instance = USART6;
 800dd94:	4809      	ldr	r0, [pc, #36]	; (800ddbc <MX_USART6_UART_Init+0x28>)
 800dd96:	4b0a      	ldr	r3, [pc, #40]	; (800ddc0 <MX_USART6_UART_Init+0x2c>)
{
 800dd98:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800dd9a:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dd9c:	23e1      	movs	r3, #225	; 0xe1
 800dd9e:	031b      	lsls	r3, r3, #12
 800dda0:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 800dda2:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800dda4:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800dda6:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800dda8:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800ddaa:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800ddac:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ddae:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800ddb0:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800ddb2:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ddb4:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800ddb6:	f005 fd17 	bl	80137e8 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800ddba:	bd10      	pop	{r4, pc}
 800ddbc:	20006f98 	.word	0x20006f98
 800ddc0:	40011400 	.word	0x40011400

0800ddc4 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ddc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddc6:	46c6      	mov	lr, r8
 800ddc8:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800ddca:	6803      	ldr	r3, [r0, #0]
 800ddcc:	4a6e      	ldr	r2, [pc, #440]	; (800df88 <HAL_UART_MspInit+0x1c4>)
{
 800ddce:	b08a      	sub	sp, #40	; 0x28
  if(huart->Instance==USART1)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d041      	beq.n	800de58 <HAL_UART_MspInit+0x94>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800ddd4:	4a6d      	ldr	r2, [pc, #436]	; (800df8c <HAL_UART_MspInit+0x1c8>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d06c      	beq.n	800deb4 <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800ddda:	4a6d      	ldr	r2, [pc, #436]	; (800df90 <HAL_UART_MspInit+0x1cc>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d100      	bne.n	800dde2 <HAL_UART_MspInit+0x1e>
 800dde0:	e094      	b.n	800df0c <HAL_UART_MspInit+0x148>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800dde2:	4a6c      	ldr	r2, [pc, #432]	; (800df94 <HAL_UART_MspInit+0x1d0>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d006      	beq.n	800ddf6 <HAL_UART_MspInit+0x32>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800dde8:	4a6b      	ldr	r2, [pc, #428]	; (800df98 <HAL_UART_MspInit+0x1d4>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d100      	bne.n	800ddf0 <HAL_UART_MspInit+0x2c>
 800ddee:	e0b0      	b.n	800df52 <HAL_UART_MspInit+0x18e>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800ddf0:	4a6a      	ldr	r2, [pc, #424]	; (800df9c <HAL_UART_MspInit+0x1d8>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d003      	beq.n	800ddfe <HAL_UART_MspInit+0x3a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800ddf6:	b00a      	add	sp, #40	; 0x28
 800ddf8:	bc04      	pop	{r2}
 800ddfa:	4690      	mov	r8, r2
 800ddfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART6_CLK_ENABLE();
 800ddfe:	2420      	movs	r4, #32
 800de00:	4b67      	ldr	r3, [pc, #412]	; (800dfa0 <HAL_UART_MspInit+0x1dc>)
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800de02:	2090      	movs	r0, #144	; 0x90
    __USART6_CLK_ENABLE();
 800de04:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de06:	2701      	movs	r7, #1
    __USART6_CLK_ENABLE();
 800de08:	4322      	orrs	r2, r4
 800de0a:	619a      	str	r2, [r3, #24]
 800de0c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de0e:	2603      	movs	r6, #3
    __USART6_CLK_ENABLE();
 800de10:	4023      	ands	r3, r4
 800de12:	9304      	str	r3, [sp, #16]
 800de14:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800de16:	2310      	movs	r3, #16
 800de18:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de1a:	3b0e      	subs	r3, #14
 800de1c:	4698      	mov	r8, r3
    GPIO_InitStruct.Alternate = USART6_AF;	
 800de1e:	2505      	movs	r5, #5
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800de20:	a905      	add	r1, sp, #20
 800de22:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de24:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de26:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de28:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800de2a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800de2c:	f003 fd08 	bl	8011840 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de30:	4643      	mov	r3, r8
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800de32:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800de34:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de36:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de38:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de3a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800de3c:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800de3e:	a905      	add	r1, sp, #20
 800de40:	05c0      	lsls	r0, r0, #23
 800de42:	f003 fcfd 	bl	8011840 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800de46:	2200      	movs	r2, #0
 800de48:	2101      	movs	r1, #1
 800de4a:	201d      	movs	r0, #29
 800de4c:	f002 fd0e 	bl	801086c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800de50:	201d      	movs	r0, #29
 800de52:	f002 fd37 	bl	80108c4 <HAL_NVIC_EnableIRQ>
}
 800de56:	e7ce      	b.n	800ddf6 <HAL_UART_MspInit+0x32>
    __USART1_CLK_ENABLE();
 800de58:	2080      	movs	r0, #128	; 0x80
 800de5a:	4a51      	ldr	r2, [pc, #324]	; (800dfa0 <HAL_UART_MspInit+0x1dc>)
 800de5c:	01c0      	lsls	r0, r0, #7
 800de5e:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de60:	2401      	movs	r4, #1
    __USART1_CLK_ENABLE();
 800de62:	4301      	orrs	r1, r0
 800de64:	6191      	str	r1, [r2, #24]
 800de66:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de68:	2602      	movs	r6, #2
    __USART1_CLK_ENABLE();
 800de6a:	4003      	ands	r3, r0
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800de70:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800de72:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de74:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800de76:	009b      	lsls	r3, r3, #2
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800de78:	a905      	add	r1, sp, #20
 800de7a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800de7c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de7e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de80:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de82:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800de84:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800de86:	f003 fcdb 	bl	8011840 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800de8a:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800de8c:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800de8e:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800de90:	a905      	add	r1, sp, #20
 800de92:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800de94:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de96:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de98:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de9a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800de9c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800de9e:	f003 fccf 	bl	8011840 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800dea2:	2200      	movs	r2, #0
 800dea4:	2101      	movs	r1, #1
 800dea6:	201b      	movs	r0, #27
 800dea8:	f002 fce0 	bl	801086c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800deac:	201b      	movs	r0, #27
 800deae:	f002 fd09 	bl	80108c4 <HAL_NVIC_EnableIRQ>
 800deb2:	e7a0      	b.n	800ddf6 <HAL_UART_MspInit+0x32>
    __USART2_CLK_ENABLE();
 800deb4:	2080      	movs	r0, #128	; 0x80
 800deb6:	4a3a      	ldr	r2, [pc, #232]	; (800dfa0 <HAL_UART_MspInit+0x1dc>)
 800deb8:	0280      	lsls	r0, r0, #10
 800deba:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800debc:	2401      	movs	r4, #1
    __USART2_CLK_ENABLE();
 800debe:	4301      	orrs	r1, r0
 800dec0:	61d1      	str	r1, [r2, #28]
 800dec2:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dec4:	2602      	movs	r6, #2
    __USART2_CLK_ENABLE();
 800dec6:	4003      	ands	r3, r0
 800dec8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800deca:	2090      	movs	r0, #144	; 0x90
    __USART2_CLK_ENABLE();
 800decc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dece:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800ded0:	2304      	movs	r3, #4
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800ded2:	a905      	add	r1, sp, #20
 800ded4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800ded6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ded8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800deda:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dedc:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800dede:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800dee0:	f003 fcae 	bl	8011840 <HAL_GPIO_Init>
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800dee4:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800dee6:	2308      	movs	r3, #8
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800dee8:	a905      	add	r1, sp, #20
 800deea:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800deec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deee:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800def0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800def2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800def4:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800def6:	f003 fca3 	bl	8011840 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800defa:	2200      	movs	r2, #0
 800defc:	2101      	movs	r1, #1
 800defe:	201c      	movs	r0, #28
 800df00:	f002 fcb4 	bl	801086c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800df04:	201c      	movs	r0, #28
 800df06:	f002 fcdd 	bl	80108c4 <HAL_NVIC_EnableIRQ>
 800df0a:	e774      	b.n	800ddf6 <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800df0c:	2080      	movs	r0, #128	; 0x80
 800df0e:	4a24      	ldr	r2, [pc, #144]	; (800dfa0 <HAL_UART_MspInit+0x1dc>)
 800df10:	02c0      	lsls	r0, r0, #11
 800df12:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df14:	2702      	movs	r7, #2
    __USART3_CLK_ENABLE();
 800df16:	4301      	orrs	r1, r0
 800df18:	61d1      	str	r1, [r2, #28]
 800df1a:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df1c:	2601      	movs	r6, #1
    __USART3_CLK_ENABLE();
 800df1e:	4003      	ands	r3, r0
 800df20:	9302      	str	r3, [sp, #8]
 800df22:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800df24:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df26:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = USART3_AF;	
 800df28:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800df2a:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800df2c:	a905      	add	r1, sp, #20
 800df2e:	481d      	ldr	r0, [pc, #116]	; (800dfa4 <HAL_UART_MspInit+0x1e0>)
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800df30:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df32:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df34:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df36:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800df38:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800df3a:	f003 fc81 	bl	8011840 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800df3e:	2380      	movs	r3, #128	; 0x80
 800df40:	011b      	lsls	r3, r3, #4
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800df42:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df44:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df46:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df48:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800df4a:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800df4c:	a905      	add	r1, sp, #20
 800df4e:	4815      	ldr	r0, [pc, #84]	; (800dfa4 <HAL_UART_MspInit+0x1e0>)
 800df50:	e777      	b.n	800de42 <HAL_UART_MspInit+0x7e>
    __USART5_CLK_ENABLE();
 800df52:	2080      	movs	r0, #128	; 0x80
 800df54:	4a12      	ldr	r2, [pc, #72]	; (800dfa0 <HAL_UART_MspInit+0x1dc>)
 800df56:	0340      	lsls	r0, r0, #13
 800df58:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df5a:	2702      	movs	r7, #2
    __USART5_CLK_ENABLE();
 800df5c:	4301      	orrs	r1, r0
 800df5e:	61d1      	str	r1, [r2, #28]
 800df60:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df62:	2601      	movs	r6, #1
    __USART5_CLK_ENABLE();
 800df64:	4003      	ands	r3, r0
 800df66:	9303      	str	r3, [sp, #12]
 800df68:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df6a:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800df6c:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USART5_AF;	
 800df6e:	2404      	movs	r4, #4
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800df70:	a905      	add	r1, sp, #20
 800df72:	480c      	ldr	r0, [pc, #48]	; (800dfa4 <HAL_UART_MspInit+0x1e0>)
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800df74:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df76:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df78:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df7a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800df7c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800df7e:	f003 fc5f 	bl	8011840 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800df82:	2310      	movs	r3, #16
 800df84:	e7dd      	b.n	800df42 <HAL_UART_MspInit+0x17e>
 800df86:	46c0      	nop			; (mov r8, r8)
 800df88:	40013800 	.word	0x40013800
 800df8c:	40004400 	.word	0x40004400
 800df90:	40004800 	.word	0x40004800
 800df94:	40004c00 	.word	0x40004c00
 800df98:	40005000 	.word	0x40005000
 800df9c:	40011400 	.word	0x40011400
 800dfa0:	40021000 	.word	0x40021000
 800dfa4:	48000400 	.word	0x48000400

0800dfa8 <writePxMutex>:
}

/* --- Blocking (polling-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout, uint32_t portTimeout)
{
 800dfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfaa:	4647      	mov	r7, r8
 800dfac:	46ce      	mov	lr, r9
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	0017      	movs	r7, r2
 800dfb2:	1e42      	subs	r2, r0, #1
 800dfb4:	b2d2      	uxtb	r2, r2
 800dfb6:	000e      	movs	r6, r1
 800dfb8:	2a04      	cmp	r2, #4
 800dfba:	d80e      	bhi.n	800dfda <writePxMutex+0x32>
 800dfbc:	4911      	ldr	r1, [pc, #68]	; (800e004 <writePxMutex+0x5c>)
 800dfbe:	0092      	lsls	r2, r2, #2
 800dfc0:	5852      	ldr	r2, [r2, r1]
 800dfc2:	4690      	mov	r8, r2
	HAL_StatusTypeDef result = HAL_ERROR;
	
	if (GetUart(port) != NULL) {
 800dfc4:	2a00      	cmp	r2, #0
 800dfc6:	d008      	beq.n	800dfda <writePxMutex+0x32>
		/*/ Wait for the semaphore to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dfc8:	4a0f      	ldr	r2, [pc, #60]	; (800e008 <writePxMutex+0x60>)
 800dfca:	0085      	lsls	r5, r0, #2
 800dfcc:	0019      	movs	r1, r3
 800dfce:	5950      	ldr	r0, [r2, r5]
 800dfd0:	4691      	mov	r9, r2
 800dfd2:	f000 f977 	bl	800e2c4 <osSemaphoreWait>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d007      	beq.n	800dfea <writePxMutex+0x42>
	HAL_StatusTypeDef result = HAL_ERROR;
 800dfda:	2401      	movs	r4, #1
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
		}
	}
	
	return result;
}
 800dfdc:	0020      	movs	r0, r4
 800dfde:	bc0c      	pop	{r2, r3}
 800dfe0:	4690      	mov	r8, r2
 800dfe2:	4699      	mov	r9, r3
 800dfe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800dfe6:	2803      	cmp	r0, #3
 800dfe8:	d007      	beq.n	800dffa <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800dfea:	9b08      	ldr	r3, [sp, #32]
 800dfec:	003a      	movs	r2, r7
 800dfee:	0031      	movs	r1, r6
 800dff0:	4640      	mov	r0, r8
 800dff2:	f005 fb57 	bl	80136a4 <HAL_UART_Transmit>
 800dff6:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800dff8:	d1f5      	bne.n	800dfe6 <writePxMutex+0x3e>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800dffa:	464b      	mov	r3, r9
 800dffc:	5958      	ldr	r0, [r3, r5]
 800dffe:	f000 f98b 	bl	800e318 <osSemaphoreRelease>
 800e002:	e7eb      	b.n	800dfdc <writePxMutex+0x34>
 800e004:	08018f34 	.word	0x08018f34
 800e008:	20006d4c 	.word	0x20006d4c

0800e00c <writePxITMutex>:
}

/* --- Non-blocking (interrupt-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxITMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800e00c:	b570      	push	{r4, r5, r6, lr}
 800e00e:	0015      	movs	r5, r2
 800e010:	1e42      	subs	r2, r0, #1
 800e012:	b2d2      	uxtb	r2, r2
 800e014:	000c      	movs	r4, r1
 800e016:	2a04      	cmp	r2, #4
 800e018:	d80c      	bhi.n	800e034 <writePxITMutex+0x28>
 800e01a:	490a      	ldr	r1, [pc, #40]	; (800e044 <writePxITMutex+0x38>)
 800e01c:	0092      	lsls	r2, r2, #2
 800e01e:	5856      	ldr	r6, [r2, r1]
	HAL_StatusTypeDef result = HAL_ERROR; 

	if (GetUart(port) != NULL) {	
 800e020:	2e00      	cmp	r6, #0
 800e022:	d007      	beq.n	800e034 <writePxITMutex+0x28>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e024:	4a08      	ldr	r2, [pc, #32]	; (800e048 <writePxITMutex+0x3c>)
 800e026:	0080      	lsls	r0, r0, #2
 800e028:	5880      	ldr	r0, [r0, r2]
 800e02a:	0019      	movs	r1, r3
 800e02c:	f000 f94a 	bl	800e2c4 <osSemaphoreWait>
 800e030:	2800      	cmp	r0, #0
 800e032:	d001      	beq.n	800e038 <writePxITMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e034:	2001      	movs	r0, #1
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800e036:	bd70      	pop	{r4, r5, r6, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800e038:	002a      	movs	r2, r5
 800e03a:	0021      	movs	r1, r4
 800e03c:	0030      	movs	r0, r6
 800e03e:	f005 f821 	bl	8013084 <HAL_UART_Transmit_IT>
 800e042:	e7f8      	b.n	800e036 <writePxITMutex+0x2a>
 800e044:	08018f34 	.word	0x08018f34
 800e048:	20006d4c 	.word	0x20006d4c

0800e04c <writePxDMAMutex>:

/* --- Non-blocking (DMA-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxDMAMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800e04c:	b570      	push	{r4, r5, r6, lr}
 800e04e:	0015      	movs	r5, r2
 800e050:	1e42      	subs	r2, r0, #1
 800e052:	b2d2      	uxtb	r2, r2
 800e054:	000c      	movs	r4, r1
 800e056:	2a04      	cmp	r2, #4
 800e058:	d80c      	bhi.n	800e074 <writePxDMAMutex+0x28>
 800e05a:	490c      	ldr	r1, [pc, #48]	; (800e08c <writePxDMAMutex+0x40>)
 800e05c:	0092      	lsls	r2, r2, #2
 800e05e:	5856      	ldr	r6, [r2, r1]
	HAL_StatusTypeDef result = HAL_ERROR; 
	UART_HandleTypeDef* hUart = GetUart(port);

	if (hUart != NULL) {	
 800e060:	2e00      	cmp	r6, #0
 800e062:	d007      	beq.n	800e074 <writePxDMAMutex+0x28>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e064:	4a0a      	ldr	r2, [pc, #40]	; (800e090 <writePxDMAMutex+0x44>)
 800e066:	0080      	lsls	r0, r0, #2
 800e068:	5880      	ldr	r0, [r0, r2]
 800e06a:	0019      	movs	r1, r3
 800e06c:	f000 f92a 	bl	800e2c4 <osSemaphoreWait>
 800e070:	2800      	cmp	r0, #0
 800e072:	d001      	beq.n	800e078 <writePxDMAMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e074:	2001      	movs	r0, #1
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800e076:	bd70      	pop	{r4, r5, r6, pc}
			DMA_MSG_TX_Setup(hUart);
 800e078:	0030      	movs	r0, r6
 800e07a:	f7ff f9d9 	bl	800d430 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800e07e:	002a      	movs	r2, r5
 800e080:	0021      	movs	r1, r4
 800e082:	0030      	movs	r0, r6
 800e084:	f005 f890 	bl	80131a8 <HAL_UART_Transmit_DMA>
 800e088:	e7f5      	b.n	800e076 <writePxDMAMutex+0x2a>
 800e08a:	46c0      	nop			; (mov r8, r8)
 800e08c:	08018f34 	.word	0x08018f34
 800e090:	20006d4c 	.word	0x20006d4c

0800e094 <UpdateBaudrate>:

/* --- Update baudrate for this port --- 
*/
BOS_Status UpdateBaudrate(uint8_t port, uint32_t baudrate)
{
 800e094:	3801      	subs	r0, #1
 800e096:	b2c0      	uxtb	r0, r0
 800e098:	b510      	push	{r4, lr}
 800e09a:	2804      	cmp	r0, #4
 800e09c:	d807      	bhi.n	800e0ae <UpdateBaudrate+0x1a>
 800e09e:	4b05      	ldr	r3, [pc, #20]	; (800e0b4 <UpdateBaudrate+0x20>)
 800e0a0:	0080      	lsls	r0, r0, #2
 800e0a2:	58c0      	ldr	r0, [r0, r3]
	BOS_Status result = BOS_OK; 
	UART_HandleTypeDef *huart = GetUart(port);

	huart->Init.BaudRate = baudrate;
 800e0a4:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800e0a6:	f005 fb9f 	bl	80137e8 <HAL_UART_Init>
	
	return result;
}
 800e0aa:	2000      	movs	r0, #0
 800e0ac:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate = baudrate;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	605b      	str	r3, [r3, #4]
 800e0b2:	deff      	udf	#255	; 0xff
 800e0b4:	08018f34 	.word	0x08018f34

0800e0b8 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
 800e0b8:	3801      	subs	r0, #1
 800e0ba:	b2c3      	uxtb	r3, r0
 800e0bc:	2000      	movs	r0, #0
 800e0be:	2b04      	cmp	r3, #4
 800e0c0:	d802      	bhi.n	800e0c8 <GetUart+0x10>
 800e0c2:	4a02      	ldr	r2, [pc, #8]	; (800e0cc <GetUart+0x14>)
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	5898      	ldr	r0, [r3, r2]
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800e0c8:	4770      	bx	lr
 800e0ca:	46c0      	nop			; (mov r8, r8)
 800e0cc:	08018f34 	.word	0x08018f34

0800e0d0 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800e0d0:	b570      	push	{r4, r5, r6, lr}
 800e0d2:	0004      	movs	r4, r0
 800e0d4:	000d      	movs	r5, r1
	if (huart != NULL) {
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	d003      	beq.n	800e0e2 <SwapUartPins+0x12>
		if (direction == REVERSED) {
 800e0da:	2901      	cmp	r1, #1
 800e0dc:	d017      	beq.n	800e10e <SwapUartPins+0x3e>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800e0de:	2900      	cmp	r1, #0
 800e0e0:	d000      	beq.n	800e0e4 <SwapUartPins+0x14>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800e0e2:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e0e4:	f7fd fb7e 	bl	800b7e4 <GetPort>
 800e0e8:	2180      	movs	r1, #128	; 0x80
 800e0ea:	3801      	subs	r0, #1
 800e0ec:	0209      	lsls	r1, r1, #8
 800e0ee:	4101      	asrs	r1, r0
 800e0f0:	4b12      	ldr	r3, [pc, #72]	; (800e13c <SwapUartPins+0x6c>)
 800e0f2:	4e13      	ldr	r6, [pc, #76]	; (800e140 <SwapUartPins+0x70>)
 800e0f4:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e0f6:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e0f8:	3b01      	subs	r3, #1
 800e0fa:	005b      	lsls	r3, r3, #1
 800e0fc:	5b9a      	ldrh	r2, [r3, r6]
			HAL_UART_Init(huart);		
 800e0fe:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e100:	438a      	bics	r2, r1
 800e102:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e104:	2308      	movs	r3, #8
 800e106:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);		
 800e108:	f005 fb6e 	bl	80137e8 <HAL_UART_Init>
}
 800e10c:	e7e9      	b.n	800e0e2 <SwapUartPins+0x12>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e10e:	f7fd fb69 	bl	800b7e4 <GetPort>
 800e112:	2180      	movs	r1, #128	; 0x80
 800e114:	0209      	lsls	r1, r1, #8
 800e116:	000a      	movs	r2, r1
 800e118:	3801      	subs	r0, #1
 800e11a:	4102      	asrs	r2, r0
 800e11c:	4b07      	ldr	r3, [pc, #28]	; (800e13c <SwapUartPins+0x6c>)
 800e11e:	4d08      	ldr	r5, [pc, #32]	; (800e140 <SwapUartPins+0x70>)
 800e120:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e122:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e124:	3b01      	subs	r3, #1
 800e126:	005b      	lsls	r3, r3, #1
 800e128:	5b58      	ldrh	r0, [r3, r5]
 800e12a:	4302      	orrs	r2, r0
 800e12c:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e12e:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800e130:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e132:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800e134:	f005 fb58 	bl	80137e8 <HAL_UART_Init>
 800e138:	e7d3      	b.n	800e0e2 <SwapUartPins+0x12>
 800e13a:	46c0      	nop			; (mov r8, r8)
 800e13c:	20000a98 	.word	0x20000a98
 800e140:	20007140 	.word	0x20007140

0800e144 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e144:	4816      	ldr	r0, [pc, #88]	; (800e1a0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e146:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e148:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e14a:	e003      	b.n	800e154 <LoopCopyDataInit>

0800e14c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e14c:	4b15      	ldr	r3, [pc, #84]	; (800e1a4 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e14e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e150:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e152:	3104      	adds	r1, #4

0800e154 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e154:	4814      	ldr	r0, [pc, #80]	; (800e1a8 <LoopForever+0xc>)
  ldr r3, =_edata
 800e156:	4b15      	ldr	r3, [pc, #84]	; (800e1ac <LoopForever+0x10>)
  adds r2, r0, r1
 800e158:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e15a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e15c:	d3f6      	bcc.n	800e14c <CopyDataInit>
  ldr r2, =_sbss
 800e15e:	4a14      	ldr	r2, [pc, #80]	; (800e1b0 <LoopForever+0x14>)
  b LoopFillZerobss
 800e160:	e002      	b.n	800e168 <LoopFillZerobss>

0800e162 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e162:	2300      	movs	r3, #0
  str  r3, [r2]
 800e164:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e166:	3204      	adds	r2, #4

0800e168 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e168:	4b12      	ldr	r3, [pc, #72]	; (800e1b4 <LoopForever+0x18>)
  cmp r2, r3
 800e16a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e16c:	d3f9      	bcc.n	800e162 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e16e:	4812      	ldr	r0, [pc, #72]	; (800e1b8 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e170:	4912      	ldr	r1, [pc, #72]	; (800e1bc <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e172:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e174:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e176:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e178:	d005      	beq.n	800e186 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e17a:	f000 f82b 	bl	800e1d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e17e:	f005 fccb 	bl	8013b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e182:	f005 fc7b 	bl	8013a7c <main>

0800e186 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e186:	480e      	ldr	r0, [pc, #56]	; (800e1c0 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e188:	490e      	ldr	r1, [pc, #56]	; (800e1c4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e18a:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e18c:	480e      	ldr	r0, [pc, #56]	; (800e1c8 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e18e:	490d      	ldr	r1, [pc, #52]	; (800e1c4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e190:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e192:	480e      	ldr	r0, [pc, #56]	; (800e1cc <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e194:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e196:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e198:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e19a:	4700      	bx	r0

0800e19c <LoopForever>:


LoopForever:
    b LoopForever
 800e19c:	e7fe      	b.n	800e19c <LoopForever>
 800e19e:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e1a0:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e1a4:	0801c238 	.word	0x0801c238
  ldr r0, =_sdata
 800e1a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800e1ac:	20000a78 	.word	0x20000a78
  ldr r2, =_sbss
 800e1b0:	20000a78 	.word	0x20000a78
  ldr r3, = _ebss
 800e1b4:	200071e8 	.word	0x200071e8
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e1b8:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e1bc:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e1c0:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e1c4:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e1c8:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e1cc:	1fffd800 	.word	0x1fffd800

0800e1d0 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e1d0:	e7fe      	b.n	800e1d0 <CEC_CAN_IRQHandler>
	...

0800e1d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e1d4:	2101      	movs	r1, #1
 800e1d6:	4b11      	ldr	r3, [pc, #68]	; (800e21c <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e1d8:	4811      	ldr	r0, [pc, #68]	; (800e220 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	430a      	orrs	r2, r1
 800e1de:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e1e0:	685a      	ldr	r2, [r3, #4]
 800e1e2:	4002      	ands	r2, r0
 800e1e4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	480e      	ldr	r0, [pc, #56]	; (800e224 <SystemInit+0x50>)
 800e1ea:	4002      	ands	r2, r0
 800e1ec:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	480d      	ldr	r0, [pc, #52]	; (800e228 <SystemInit+0x54>)
 800e1f2:	4002      	ands	r2, r0
 800e1f4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e1f6:	685a      	ldr	r2, [r3, #4]
 800e1f8:	480c      	ldr	r0, [pc, #48]	; (800e22c <SystemInit+0x58>)
 800e1fa:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e1fc:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e1fe:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e202:	4382      	bics	r2, r0
 800e204:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e208:	4809      	ldr	r0, [pc, #36]	; (800e230 <SystemInit+0x5c>)
 800e20a:	4002      	ands	r2, r0
 800e20c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e20e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e210:	438a      	bics	r2, r1
 800e212:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e214:	2200      	movs	r2, #0
 800e216:	609a      	str	r2, [r3, #8]

}
 800e218:	4770      	bx	lr
 800e21a:	46c0      	nop			; (mov r8, r8)
 800e21c:	40021000 	.word	0x40021000
 800e220:	08ffb80c 	.word	0x08ffb80c
 800e224:	fef6ffff 	.word	0xfef6ffff
 800e228:	fffbffff 	.word	0xfffbffff
 800e22c:	ffc0ffff 	.word	0xffc0ffff
 800e230:	fff0feac 	.word	0xfff0feac

0800e234 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e234:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e236:	f000 ff81 	bl	800f13c <vTaskStartScheduler>
  
  return osOK;
}
 800e23a:	2000      	movs	r0, #0
 800e23c:	bd10      	pop	{r4, pc}
 800e23e:	46c0      	nop			; (mov r8, r8)

0800e240 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e240:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e242:	2800      	cmp	r0, #0
 800e244:	d100      	bne.n	800e248 <osDelay+0x8>
 800e246:	3001      	adds	r0, #1
 800e248:	f001 f89e 	bl	800f388 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e24c:	2000      	movs	r0, #0
 800e24e:	bd10      	pop	{r4, pc}

0800e250 <osMutexRelease>:
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e250:	2300      	movs	r3, #0
{
 800e252:	b500      	push	{lr}
 800e254:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;
 800e256:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e258:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d00a      	beq.n	800e276 <osMutexRelease+0x26>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800e260:	a901      	add	r1, sp, #4
 800e262:	f000 fbdd 	bl	800ea20 <xQueueGiveFromISR>
 800e266:	2801      	cmp	r0, #1
 800e268:	d10c      	bne.n	800e284 <osMutexRelease+0x34>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e26a:	9b01      	ldr	r3, [sp, #4]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d10b      	bne.n	800e288 <osMutexRelease+0x38>
  osStatus result = osOK;
 800e270:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800e272:	b003      	add	sp, #12
 800e274:	bd00      	pop	{pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800e276:	2300      	movs	r3, #0
 800e278:	2200      	movs	r2, #0
 800e27a:	2100      	movs	r1, #0
 800e27c:	f000 faec 	bl	800e858 <xQueueGenericSend>
 800e280:	2801      	cmp	r0, #1
 800e282:	d0f5      	beq.n	800e270 <osMutexRelease+0x20>
    result = osErrorOS;
 800e284:	20ff      	movs	r0, #255	; 0xff
 800e286:	e7f4      	b.n	800e272 <osMutexRelease+0x22>
    portEND_SWITCHING_ISR(taskWoken);
 800e288:	2280      	movs	r2, #128	; 0x80
 800e28a:	4b02      	ldr	r3, [pc, #8]	; (800e294 <osMutexRelease+0x44>)
 800e28c:	0552      	lsls	r2, r2, #21
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	e7ee      	b.n	800e270 <osMutexRelease+0x20>
 800e292:	46c0      	nop			; (mov r8, r8)
 800e294:	e000ed04 	.word	0xe000ed04

0800e298 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e298:	b510      	push	{r4, lr}
 800e29a:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e29c:	2901      	cmp	r1, #1
 800e29e:	d005      	beq.n	800e2ac <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e2a0:	2100      	movs	r1, #0
 800e2a2:	f000 fac5 	bl	800e830 <xQueueCreateCountingSemaphore>
 800e2a6:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e2a8:	0020      	movs	r0, r4
 800e2aa:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e2ac:	2203      	movs	r2, #3
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	f000 fa96 	bl	800e7e0 <xQueueGenericCreate>
 800e2b4:	1e04      	subs	r4, r0, #0
 800e2b6:	d0f7      	beq.n	800e2a8 <osSemaphoreCreate+0x10>
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	2100      	movs	r1, #0
 800e2be:	f000 facb 	bl	800e858 <xQueueGenericSend>
 800e2c2:	e7f1      	b.n	800e2a8 <osSemaphoreCreate+0x10>

0800e2c4 <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e2c4:	2300      	movs	r3, #0
{
 800e2c6:	b500      	push	{lr}
 800e2c8:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;  
 800e2ca:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d01e      	beq.n	800e30e <osSemaphoreWait+0x4a>
 800e2d0:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d00b      	beq.n	800e2f0 <osSemaphoreWait+0x2c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e2d8:	aa01      	add	r2, sp, #4
 800e2da:	2100      	movs	r1, #0
 800e2dc:	f000 fc8e 	bl	800ebfc <xQueueReceiveFromISR>
 800e2e0:	2801      	cmp	r0, #1
 800e2e2:	d10c      	bne.n	800e2fe <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e2e4:	9b01      	ldr	r3, [sp, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10b      	bne.n	800e302 <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e2ea:	2000      	movs	r0, #0
}
 800e2ec:	b003      	add	sp, #12
 800e2ee:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e2f0:	000a      	movs	r2, r1
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	2100      	movs	r1, #0
 800e2f6:	f000 fbcd 	bl	800ea94 <xQueueGenericReceive>
 800e2fa:	2801      	cmp	r0, #1
 800e2fc:	d0f5      	beq.n	800e2ea <osSemaphoreWait+0x26>
      return osErrorOS;
 800e2fe:	20ff      	movs	r0, #255	; 0xff
 800e300:	e7f4      	b.n	800e2ec <osSemaphoreWait+0x28>
	portEND_SWITCHING_ISR(taskWoken);
 800e302:	2280      	movs	r2, #128	; 0x80
 800e304:	4b03      	ldr	r3, [pc, #12]	; (800e314 <osSemaphoreWait+0x50>)
 800e306:	0552      	lsls	r2, r2, #21
 800e308:	601a      	str	r2, [r3, #0]
  return osOK;
 800e30a:	2000      	movs	r0, #0
 800e30c:	e7ee      	b.n	800e2ec <osSemaphoreWait+0x28>
    return osErrorParameter;
 800e30e:	2080      	movs	r0, #128	; 0x80
 800e310:	e7ec      	b.n	800e2ec <osSemaphoreWait+0x28>
 800e312:	46c0      	nop			; (mov r8, r8)
 800e314:	e000ed04 	.word	0xe000ed04

0800e318 <osSemaphoreRelease>:
 800e318:	b510      	push	{r4, lr}
 800e31a:	f7ff ff99 	bl	800e250 <osMutexRelease>
 800e31e:	bd10      	pop	{r4, pc}

0800e320 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e320:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e322:	f001 f9bf 	bl	800f6a4 <xTaskGetSchedulerState>
 800e326:	2801      	cmp	r0, #1
 800e328:	d001      	beq.n	800e32e <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800e32a:	f001 fe13 	bl	800ff54 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e32e:	bd10      	pop	{r4, pc}

0800e330 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800e330:	b570      	push	{r4, r5, r6, lr}
 800e332:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800e334:	d013      	beq.n	800e35e <FreeRTOS_CLIRegisterCommand+0x2e>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e336:	2008      	movs	r0, #8
 800e338:	f001 fe44 	bl	800ffc4 <pvPortMalloc>
 800e33c:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800e33e:	d101      	bne.n	800e344 <FreeRTOS_CLIRegisterCommand+0x14>
 800e340:	b672      	cpsid	i
 800e342:	e7fe      	b.n	800e342 <FreeRTOS_CLIRegisterCommand+0x12>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800e344:	f001 fdc0 	bl	800fec8 <vPortEnterCritical>
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800e348:	2300      	movs	r3, #0
 800e34a:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800e34c:	4b05      	ldr	r3, [pc, #20]	; (800e364 <FreeRTOS_CLIRegisterCommand+0x34>)
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e34e:	6025      	str	r5, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800e354:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800e356:	f001 fdc3 	bl	800fee0 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800e35a:	2001      	movs	r0, #1
 800e35c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxCommandToRegister );
 800e35e:	b672      	cpsid	i
 800e360:	e7fe      	b.n	800e360 <FreeRTOS_CLIRegisterCommand+0x30>
 800e362:	46c0      	nop			; (mov r8, r8)
 800e364:	200000b4 	.word	0x200000b4

0800e368 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800e368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e36a:	4657      	mov	r7, sl
 800e36c:	46de      	mov	lr, fp
 800e36e:	464e      	mov	r6, r9
 800e370:	4645      	mov	r5, r8
 800e372:	b5e0      	push	{r5, r6, r7, lr}
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800e374:	4f34      	ldr	r7, [pc, #208]	; (800e448 <FreeRTOS_CLIProcessCommand+0xe0>)
{
 800e376:	0006      	movs	r6, r0
	if( pxCommand == NULL )
 800e378:	683b      	ldr	r3, [r7, #0]
{
 800e37a:	468a      	mov	sl, r1
 800e37c:	4693      	mov	fp, r2
	if( pxCommand == NULL )
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00e      	beq.n	800e3a0 <FreeRTOS_CLIProcessCommand+0x38>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	0032      	movs	r2, r6
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	4659      	mov	r1, fp
 800e38a:	4650      	mov	r0, sl
 800e38c:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800e38e:	2800      	cmp	r0, #0
 800e390:	d100      	bne.n	800e394 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800e392:	6038      	str	r0, [r7, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800e394:	bc3c      	pop	{r2, r3, r4, r5}
 800e396:	4690      	mov	r8, r2
 800e398:	4699      	mov	r9, r3
 800e39a:	46a2      	mov	sl, r4
 800e39c:	46ab      	mov	fp, r5
 800e39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e3a0:	3320      	adds	r3, #32
 800e3a2:	4699      	mov	r9, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e3a4:	4c29      	ldr	r4, [pc, #164]	; (800e44c <FreeRTOS_CLIProcessCommand+0xe4>)
 800e3a6:	3404      	adds	r4, #4
 800e3a8:	603c      	str	r4, [r7, #0]
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e3aa:	6823      	ldr	r3, [r4, #0]
 800e3ac:	681d      	ldr	r5, [r3, #0]
 800e3ae:	4698      	mov	r8, r3
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e3b0:	0028      	movs	r0, r5
 800e3b2:	f7f1 feb1 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e3b6:	464a      	mov	r2, r9
 800e3b8:	5c33      	ldrb	r3, [r6, r0]
 800e3ba:	4393      	bics	r3, r2
 800e3bc:	d106      	bne.n	800e3cc <FreeRTOS_CLIProcessCommand+0x64>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e3be:	0002      	movs	r2, r0
 800e3c0:	0029      	movs	r1, r5
 800e3c2:	0030      	movs	r0, r6
 800e3c4:	f006 f872 	bl	80144ac <strncmp>
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	d00a      	beq.n	800e3e2 <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e3cc:	6864      	ldr	r4, [r4, #4]
 800e3ce:	603c      	str	r4, [r7, #0]
 800e3d0:	2c00      	cmp	r4, #0
 800e3d2:	d1ea      	bne.n	800e3aa <FreeRTOS_CLIProcessCommand+0x42>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e3d4:	465a      	mov	r2, fp
 800e3d6:	491e      	ldr	r1, [pc, #120]	; (800e450 <FreeRTOS_CLIProcessCommand+0xe8>)
 800e3d8:	4650      	mov	r0, sl
 800e3da:	f006 f878 	bl	80144ce <strncpy>
		xReturn = pdFALSE;
 800e3de:	2000      	movs	r0, #0
	return xReturn;
 800e3e0:	e7d8      	b.n	800e394 <FreeRTOS_CLIProcessCommand+0x2c>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e3e2:	4643      	mov	r3, r8
 800e3e4:	250c      	movs	r5, #12
 800e3e6:	575d      	ldrsb	r5, [r3, r5]
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	2d00      	cmp	r5, #0
 800e3ec:	db26      	blt.n	800e43c <FreeRTOS_CLIProcessCommand+0xd4>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	56b2      	ldrsb	r2, [r6, r2]
 800e3f2:	2a00      	cmp	r2, #0
 800e3f4:	d025      	beq.n	800e442 <FreeRTOS_CLIProcessCommand+0xda>
 800e3f6:	0031      	movs	r1, r6
int8_t cParameters = 0;
 800e3f8:	2400      	movs	r4, #0
 800e3fa:	e005      	b.n	800e408 <FreeRTOS_CLIProcessCommand+0xa0>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800e3fc:	2000      	movs	r0, #0
	while( *pcCommandString != 0x00 )
 800e3fe:	2200      	movs	r2, #0
		}

		pcCommandString++;
 800e400:	3101      	adds	r1, #1
	while( *pcCommandString != 0x00 )
 800e402:	568a      	ldrsb	r2, [r1, r2]
 800e404:	2a00      	cmp	r2, #0
 800e406:	d007      	beq.n	800e418 <FreeRTOS_CLIProcessCommand+0xb0>
		if( ( *pcCommandString ) == ' ' )
 800e408:	2a20      	cmp	r2, #32
 800e40a:	d1f7      	bne.n	800e3fc <FreeRTOS_CLIProcessCommand+0x94>
			if( xLastCharacterWasSpace != pdTRUE )
 800e40c:	2801      	cmp	r0, #1
 800e40e:	d0f6      	beq.n	800e3fe <FreeRTOS_CLIProcessCommand+0x96>
				cParameters++;
 800e410:	3401      	adds	r4, #1
 800e412:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800e414:	2001      	movs	r0, #1
 800e416:	e7f2      	b.n	800e3fe <FreeRTOS_CLIProcessCommand+0x96>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e418:	2801      	cmp	r0, #1
 800e41a:	d00c      	beq.n	800e436 <FreeRTOS_CLIProcessCommand+0xce>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800e41c:	42a5      	cmp	r5, r4
 800e41e:	d00d      	beq.n	800e43c <FreeRTOS_CLIProcessCommand+0xd4>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e420:	2b00      	cmp	r3, #0
 800e422:	d0d7      	beq.n	800e3d4 <FreeRTOS_CLIProcessCommand+0x6c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e424:	465a      	mov	r2, fp
 800e426:	490b      	ldr	r1, [pc, #44]	; (800e454 <FreeRTOS_CLIProcessCommand+0xec>)
 800e428:	4650      	mov	r0, sl
 800e42a:	f006 f850 	bl	80144ce <strncpy>
		pxCommand = NULL;
 800e42e:	2300      	movs	r3, #0
 800e430:	2000      	movs	r0, #0
 800e432:	603b      	str	r3, [r7, #0]
 800e434:	e7ae      	b.n	800e394 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800e436:	3c01      	subs	r4, #1
 800e438:	b264      	sxtb	r4, r4
 800e43a:	e7ef      	b.n	800e41c <FreeRTOS_CLIProcessCommand+0xb4>
	else if( pxCommand != NULL )
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d1a0      	bne.n	800e382 <FreeRTOS_CLIProcessCommand+0x1a>
 800e440:	e7c8      	b.n	800e3d4 <FreeRTOS_CLIProcessCommand+0x6c>
int8_t cParameters = 0;
 800e442:	2400      	movs	r4, #0
 800e444:	e7ea      	b.n	800e41c <FreeRTOS_CLIProcessCommand+0xb4>
 800e446:	46c0      	nop			; (mov r8, r8)
 800e448:	20001de8 	.word	0x20001de8
 800e44c:	200000b4 	.word	0x200000b4
 800e450:	0801be48 	.word	0x0801be48
 800e454:	0801bdf0 	.word	0x0801bdf0

0800e458 <FreeRTOS_CLIGetOutputBuffer>:
}
 800e458:	4800      	ldr	r0, [pc, #0]	; (800e45c <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e45a:	4770      	bx	lr
 800e45c:	20001df8 	.word	0x20001df8

0800e460 <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800e460:	2300      	movs	r3, #0
{
 800e462:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800e464:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e466:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800e468:	2900      	cmp	r1, #0
 800e46a:	d021      	beq.n	800e4b0 <FreeRTOS_CLIGetParameter+0x50>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e46c:	2300      	movs	r3, #0
 800e46e:	56c3      	ldrsb	r3, [r0, r3]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d105      	bne.n	800e480 <FreeRTOS_CLIGetParameter+0x20>
 800e474:	e01c      	b.n	800e4b0 <FreeRTOS_CLIGetParameter+0x50>
 800e476:	2300      	movs	r3, #0
			pcCommandString++;
 800e478:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e47a:	56c3      	ldrsb	r3, [r0, r3]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d017      	beq.n	800e4b0 <FreeRTOS_CLIGetParameter+0x50>
 800e480:	2b20      	cmp	r3, #32
 800e482:	d1f8      	bne.n	800e476 <FreeRTOS_CLIGetParameter+0x16>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e484:	2300      	movs	r3, #0
			pcCommandString++;
 800e486:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e488:	56c3      	ldrsb	r3, [r0, r3]
 800e48a:	2b20      	cmp	r3, #32
 800e48c:	d0fa      	beq.n	800e484 <FreeRTOS_CLIGetParameter+0x24>
		if( *pcCommandString != 0x00 )
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d00e      	beq.n	800e4b0 <FreeRTOS_CLIGetParameter+0x50>
			uxParametersFound++;
 800e492:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800e494:	42a1      	cmp	r1, r4
 800e496:	d1e9      	bne.n	800e46c <FreeRTOS_CLIGetParameter+0xc>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e498:	2120      	movs	r1, #32
 800e49a:	7803      	ldrb	r3, [r0, #0]
 800e49c:	438b      	bics	r3, r1
 800e49e:	d007      	beq.n	800e4b0 <FreeRTOS_CLIGetParameter+0x50>
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	2420      	movs	r4, #32
					( *pxParameterStringLength )++;
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e4a8:	5cc1      	ldrb	r1, [r0, r3]
 800e4aa:	43a1      	bics	r1, r4
 800e4ac:	d1fa      	bne.n	800e4a4 <FreeRTOS_CLIGetParameter+0x44>
 800e4ae:	e000      	b.n	800e4b2 <FreeRTOS_CLIGetParameter+0x52>
					pcReturn = NULL;
 800e4b0:	2000      	movs	r0, #0
}
 800e4b2:	bd10      	pop	{r4, pc}

0800e4b4 <prvHelpCommand>:
{
 800e4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4b6:	46ce      	mov	lr, r9
 800e4b8:	4647      	mov	r7, r8
portBASE_TYPE xParameterStringLength1 = 0;
 800e4ba:	2300      	movs	r3, #0
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	0004      	movs	r4, r0
 800e4c2:	000d      	movs	r5, r1
 800e4c4:	0010      	movs	r0, r2
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	aa01      	add	r2, sp, #4
portBASE_TYPE xParameterStringLength1 = 0;
 800e4ca:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e4cc:	f7ff ffc8 	bl	800e460 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	d024      	beq.n	800e51e <prvHelpCommand+0x6a>
 800e4d4:	2206      	movs	r2, #6
 800e4d6:	4931      	ldr	r1, [pc, #196]	; (800e59c <prvHelpCommand+0xe8>)
 800e4d8:	f005 ffe8 	bl	80144ac <strncmp>
 800e4dc:	1e07      	subs	r7, r0, #0
 800e4de:	d118      	bne.n	800e512 <prvHelpCommand+0x5e>
		if( str == NumOfParamsHelpStrings )
 800e4e0:	4b2f      	ldr	r3, [pc, #188]	; (800e5a0 <prvHelpCommand+0xec>)
 800e4e2:	4698      	mov	r8, r3
 800e4e4:	791b      	ldrb	r3, [r3, #4]
 800e4e6:	2b07      	cmp	r3, #7
 800e4e8:	d047      	beq.n	800e57a <prvHelpCommand+0xc6>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e4ea:	1c5a      	adds	r2, r3, #1
 800e4ec:	b2d2      	uxtb	r2, r2
 800e4ee:	4691      	mov	r9, r2
 800e4f0:	4642      	mov	r2, r8
 800e4f2:	4649      	mov	r1, r9
 800e4f4:	7111      	strb	r1, [r2, #4]
 800e4f6:	4a2b      	ldr	r2, [pc, #172]	; (800e5a4 <prvHelpCommand+0xf0>)
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	5899      	ldr	r1, [r3, r2]
 800e4fc:	0020      	movs	r0, r4
 800e4fe:	002a      	movs	r2, r5
 800e500:	f005 ffe5 	bl	80144ce <strncpy>
		if( str == NumOfParamsHelpStrings )
 800e504:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800e506:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800e508:	2b07      	cmp	r3, #7
 800e50a:	d102      	bne.n	800e512 <prvHelpCommand+0x5e>
			xReturn = pdFALSE; str = 0;
 800e50c:	4643      	mov	r3, r8
 800e50e:	2600      	movs	r6, #0
 800e510:	711f      	strb	r7, [r3, #4]
}
 800e512:	0030      	movs	r0, r6
 800e514:	b003      	add	sp, #12
 800e516:	bc0c      	pop	{r2, r3}
 800e518:	4690      	mov	r8, r2
 800e51a:	4699      	mov	r9, r3
 800e51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800e51e:	4f20      	ldr	r7, [pc, #128]	; (800e5a0 <prvHelpCommand+0xec>)
 800e520:	68be      	ldr	r6, [r7, #8]
 800e522:	2e00      	cmp	r6, #0
 800e524:	d020      	beq.n	800e568 <prvHelpCommand+0xb4>
 800e526:	7b3b      	ldrb	r3, [r7, #12]
 800e528:	1c5a      	adds	r2, r3, #1
 800e52a:	b2d2      	uxtb	r2, r2
 800e52c:	4690      	mov	r8, r2
 800e52e:	6832      	ldr	r2, [r6, #0]
 800e530:	6851      	ldr	r1, [r2, #4]
		if (counter > numOfBosCommands) {
 800e532:	4a1d      	ldr	r2, [pc, #116]	; (800e5a8 <prvHelpCommand+0xf4>)
 800e534:	7812      	ldrb	r2, [r2, #0]
 800e536:	429a      	cmp	r2, r3
 800e538:	d22a      	bcs.n	800e590 <prvHelpCommand+0xdc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e53a:	002a      	movs	r2, r5
 800e53c:	0020      	movs	r0, r4
 800e53e:	3a08      	subs	r2, #8
 800e540:	3008      	adds	r0, #8
 800e542:	f005 ffc4 	bl	80144ce <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e546:	1c60      	adds	r0, r4, #1
 800e548:	4918      	ldr	r1, [pc, #96]	; (800e5ac <prvHelpCommand+0xf8>)
 800e54a:	f005 ffa7 	bl	801449c <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e54e:	2328      	movs	r3, #40	; 0x28
 800e550:	7023      	strb	r3, [r4, #0]
 800e552:	3301      	adds	r3, #1
 800e554:	71a3      	strb	r3, [r4, #6]
 800e556:	3b09      	subs	r3, #9
 800e558:	71e3      	strb	r3, [r4, #7]
		counter++;
 800e55a:	4643      	mov	r3, r8
		pxCommand = pxCommand->pxNext;
 800e55c:	6876      	ldr	r6, [r6, #4]
		counter++;
 800e55e:	733b      	strb	r3, [r7, #12]
		pxCommand = pxCommand->pxNext;
 800e560:	60be      	str	r6, [r7, #8]
			xReturn = pdTRUE;
 800e562:	1e73      	subs	r3, r6, #1
 800e564:	419e      	sbcs	r6, r3
 800e566:	e7d4      	b.n	800e512 <prvHelpCommand+0x5e>
			counter = 1;
 800e568:	2301      	movs	r3, #1
			pxCommand = &xRegisteredCommands;
 800e56a:	4e11      	ldr	r6, [pc, #68]	; (800e5b0 <prvHelpCommand+0xfc>)
			counter = 1;
 800e56c:	733b      	strb	r3, [r7, #12]
			pxCommand = &xRegisteredCommands;
 800e56e:	3604      	adds	r6, #4
			counter = 1;
 800e570:	3301      	adds	r3, #1
 800e572:	4698      	mov	r8, r3
			pxCommand = &xRegisteredCommands;
 800e574:	60be      	str	r6, [r7, #8]
			counter = 1;
 800e576:	3b01      	subs	r3, #1
 800e578:	e7d9      	b.n	800e52e <prvHelpCommand+0x7a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e57a:	4642      	mov	r2, r8
 800e57c:	3b06      	subs	r3, #6
 800e57e:	7113      	strb	r3, [r2, #4]
 800e580:	4b08      	ldr	r3, [pc, #32]	; (800e5a4 <prvHelpCommand+0xf0>)
 800e582:	002a      	movs	r2, r5
 800e584:	6819      	ldr	r1, [r3, #0]
 800e586:	0020      	movs	r0, r4
 800e588:	f005 ffa1 	bl	80144ce <strncpy>
			xReturn = pdTRUE;
 800e58c:	2601      	movs	r6, #1
 800e58e:	e7c0      	b.n	800e512 <prvHelpCommand+0x5e>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e590:	002a      	movs	r2, r5
 800e592:	0020      	movs	r0, r4
 800e594:	f005 ff9b 	bl	80144ce <strncpy>
 800e598:	e7df      	b.n	800e55a <prvHelpCommand+0xa6>
 800e59a:	46c0      	nop			; (mov r8, r8)
 800e59c:	0801a044 	.word	0x0801a044
 800e5a0:	20001de8 	.word	0x20001de8
 800e5a4:	2000002c 	.word	0x2000002c
 800e5a8:	20006c48 	.word	0x20006c48
 800e5ac:	080188ce 	.word	0x080188ce
 800e5b0:	200000b4 	.word	0x200000b4

0800e5b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5b4:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e5b6:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5b8:	3308      	adds	r3, #8
 800e5ba:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5bc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5be:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e5c0:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e5c2:	4252      	negs	r2, r2
 800e5c4:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e5c6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e5c8:	4770      	bx	lr
 800e5ca:	46c0      	nop			; (mov r8, r8)

0800e5cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e5d0:	4770      	bx	lr
 800e5d2:	46c0      	nop			; (mov r8, r8)

0800e5d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e5d4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e5d6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800e5d8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e5da:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e5dc:	689a      	ldr	r2, [r3, #8]
 800e5de:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e5e0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800e5e2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e5e4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	6003      	str	r3, [r0, #0]
}
 800e5ea:	4770      	bx	lr

0800e5ec <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5ec:	0002      	movs	r2, r0
{
 800e5ee:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e5f0:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5f2:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800e5f4:	1c63      	adds	r3, r4, #1
 800e5f6:	d101      	bne.n	800e5fc <vListInsert+0x10>
 800e5f8:	e00d      	b.n	800e616 <vListInsert+0x2a>
 800e5fa:	001a      	movs	r2, r3
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5fc:	6853      	ldr	r3, [r2, #4]
 800e5fe:	681d      	ldr	r5, [r3, #0]
 800e600:	42a5      	cmp	r5, r4
 800e602:	d9fa      	bls.n	800e5fa <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e604:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e606:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800e608:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800e60a:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800e60c:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800e60e:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e610:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e612:	6003      	str	r3, [r0, #0]
}
 800e614:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800e616:	6902      	ldr	r2, [r0, #16]
 800e618:	6853      	ldr	r3, [r2, #4]
 800e61a:	e7f3      	b.n	800e604 <vListInsert+0x18>

0800e61c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e61c:	6842      	ldr	r2, [r0, #4]
 800e61e:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e620:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e622:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e624:	6881      	ldr	r1, [r0, #8]
 800e626:	604a      	str	r2, [r1, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e628:	685a      	ldr	r2, [r3, #4]
 800e62a:	4282      	cmp	r2, r0
 800e62c:	d100      	bne.n	800e630 <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e62e:	6059      	str	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e630:	2200      	movs	r2, #0
 800e632:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	1e50      	subs	r0, r2, #1
 800e638:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e63a:	4770      	bx	lr

0800e63c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e63c:	b570      	push	{r4, r5, r6, lr}
 800e63e:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e640:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800e642:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e644:	2a00      	cmp	r2, #0
 800e646:	d107      	bne.n	800e658 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e648:	6805      	ldr	r5, [r0, #0]
 800e64a:	2d00      	cmp	r5, #0
 800e64c:	d02d      	beq.n	800e6aa <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800e64e:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800e650:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e652:	3301      	adds	r3, #1
 800e654:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800e656:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800e658:	2d00      	cmp	r5, #0
 800e65a:	d10e      	bne.n	800e67a <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e65c:	6880      	ldr	r0, [r0, #8]
 800e65e:	f005 fcde 	bl	801401e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e662:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e664:	68a3      	ldr	r3, [r4, #8]
 800e666:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e668:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e66a:	4463      	add	r3, ip
 800e66c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e66e:	4293      	cmp	r3, r2
 800e670:	d3ed      	bcc.n	800e64e <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e672:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800e674:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e676:	60a3      	str	r3, [r4, #8]
 800e678:	e7ea      	b.n	800e650 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e67a:	68c0      	ldr	r0, [r0, #12]
 800e67c:	f005 fccf 	bl	801401e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e680:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e682:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e684:	425a      	negs	r2, r3
 800e686:	68e3      	ldr	r3, [r4, #12]
 800e688:	189b      	adds	r3, r3, r2
 800e68a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e68c:	428b      	cmp	r3, r1
 800e68e:	d203      	bcs.n	800e698 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e690:	6863      	ldr	r3, [r4, #4]
 800e692:	469c      	mov	ip, r3
 800e694:	4462      	add	r2, ip
 800e696:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800e698:	2d02      	cmp	r5, #2
 800e69a:	d1d8      	bne.n	800e64e <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e69c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d0d5      	beq.n	800e64e <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800e6a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6a4:	3b01      	subs	r3, #1
 800e6a6:	63a3      	str	r3, [r4, #56]	; 0x38
 800e6a8:	e7d1      	b.n	800e64e <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e6aa:	6840      	ldr	r0, [r0, #4]
 800e6ac:	f001 f842 	bl	800f734 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e6b0:	6065      	str	r5, [r4, #4]
 800e6b2:	e7cd      	b.n	800e650 <prvCopyDataToQueue+0x14>

0800e6b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e6b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800e6b6:	b510      	push	{r4, lr}
 800e6b8:	000b      	movs	r3, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e6ba:	2a00      	cmp	r2, #0
 800e6bc:	d008      	beq.n	800e6d0 <prvCopyDataFromQueue+0x1c>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e6be:	68c1      	ldr	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e6c0:	6844      	ldr	r4, [r0, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e6c2:	1889      	adds	r1, r1, r2
 800e6c4:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e6c6:	42a1      	cmp	r1, r4
 800e6c8:	d203      	bcs.n	800e6d2 <prvCopyDataFromQueue+0x1e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e6ca:	0018      	movs	r0, r3
 800e6cc:	f005 fca7 	bl	801401e <memcpy>
	}
}
 800e6d0:	bd10      	pop	{r4, pc}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e6d2:	6801      	ldr	r1, [r0, #0]
 800e6d4:	60c1      	str	r1, [r0, #12]
 800e6d6:	e7f8      	b.n	800e6ca <prvCopyDataFromQueue+0x16>

0800e6d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e6d8:	b570      	push	{r4, r5, r6, lr}
 800e6da:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e6dc:	f001 fbf4 	bl	800fec8 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e6e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	dd1b      	ble.n	800e71e <prvUnlockQueue+0x46>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d018      	beq.n	800e71e <prvUnlockQueue+0x46>
 800e6ec:	0025      	movs	r5, r4
 800e6ee:	3524      	adds	r5, #36	; 0x24
 800e6f0:	e008      	b.n	800e704 <prvUnlockQueue+0x2c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800e6f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e6f4:	3b01      	subs	r3, #1
 800e6f6:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e6f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	dd0f      	ble.n	800e71e <prvUnlockQueue+0x46>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e700:	2b00      	cmp	r3, #0
 800e702:	d00c      	beq.n	800e71e <prvUnlockQueue+0x46>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e704:	0028      	movs	r0, r5
 800e706:	f000 ff49 	bl	800f59c <xTaskRemoveFromEventList>
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d0f1      	beq.n	800e6f2 <prvUnlockQueue+0x1a>
						vTaskMissedYield();
 800e70e:	f000 ffc3 	bl	800f698 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800e712:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e714:	3b01      	subs	r3, #1
 800e716:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e718:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	dcef      	bgt.n	800e6fe <prvUnlockQueue+0x26>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800e71e:	2301      	movs	r3, #1
 800e720:	425b      	negs	r3, r3
 800e722:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800e724:	f001 fbdc 	bl	800fee0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e728:	f001 fbce 	bl	800fec8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e72c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e72e:	2b00      	cmp	r3, #0
 800e730:	dd1b      	ble.n	800e76a <prvUnlockQueue+0x92>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e732:	6923      	ldr	r3, [r4, #16]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d018      	beq.n	800e76a <prvUnlockQueue+0x92>
 800e738:	0025      	movs	r5, r4
 800e73a:	3510      	adds	r5, #16
 800e73c:	e008      	b.n	800e750 <prvUnlockQueue+0x78>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800e73e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e740:	3b01      	subs	r3, #1
 800e742:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e744:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e746:	2b00      	cmp	r3, #0
 800e748:	dd0f      	ble.n	800e76a <prvUnlockQueue+0x92>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e74a:	6923      	ldr	r3, [r4, #16]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d00c      	beq.n	800e76a <prvUnlockQueue+0x92>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e750:	0028      	movs	r0, r5
 800e752:	f000 ff23 	bl	800f59c <xTaskRemoveFromEventList>
 800e756:	2800      	cmp	r0, #0
 800e758:	d0f1      	beq.n	800e73e <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800e75a:	f000 ff9d 	bl	800f698 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800e75e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e760:	3b01      	subs	r3, #1
 800e762:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e764:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e766:	2b00      	cmp	r3, #0
 800e768:	dcef      	bgt.n	800e74a <prvUnlockQueue+0x72>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800e76a:	2301      	movs	r3, #1
 800e76c:	425b      	negs	r3, r3
 800e76e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e770:	f001 fbb6 	bl	800fee0 <vPortExitCritical>
}
 800e774:	bd70      	pop	{r4, r5, r6, pc}
 800e776:	46c0      	nop			; (mov r8, r8)

0800e778 <xQueueGenericReset>:
{
 800e778:	b570      	push	{r4, r5, r6, lr}
 800e77a:	0004      	movs	r4, r0
 800e77c:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800e77e:	2800      	cmp	r0, #0
 800e780:	d01a      	beq.n	800e7b8 <xQueueGenericReset+0x40>
	taskENTER_CRITICAL();
 800e782:	f001 fba1 	bl	800fec8 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e786:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e788:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e78a:	6822      	ldr	r2, [r4, #0]
 800e78c:	434b      	muls	r3, r1
 800e78e:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e790:	1a5b      	subs	r3, r3, r1
 800e792:	18d3      	adds	r3, r2, r3
 800e794:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e796:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e798:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e79a:	2000      	movs	r0, #0
		pxQueue->xRxLock = queueUNLOCKED;
 800e79c:	425b      	negs	r3, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e79e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e7a0:	60a2      	str	r2, [r4, #8]
		pxQueue->xRxLock = queueUNLOCKED;
 800e7a2:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e7a4:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800e7a6:	2d00      	cmp	r5, #0
 800e7a8:	d108      	bne.n	800e7bc <xQueueGenericReset+0x44>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7aa:	6923      	ldr	r3, [r4, #16]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d10e      	bne.n	800e7ce <xQueueGenericReset+0x56>
	taskEXIT_CRITICAL();
 800e7b0:	f001 fb96 	bl	800fee0 <vPortExitCritical>
}
 800e7b4:	2001      	movs	r0, #1
 800e7b6:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800e7b8:	b672      	cpsid	i
 800e7ba:	e7fe      	b.n	800e7ba <xQueueGenericReset+0x42>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e7bc:	0020      	movs	r0, r4
 800e7be:	3010      	adds	r0, #16
 800e7c0:	f7ff fef8 	bl	800e5b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e7c4:	0020      	movs	r0, r4
 800e7c6:	3024      	adds	r0, #36	; 0x24
 800e7c8:	f7ff fef4 	bl	800e5b4 <vListInitialise>
 800e7cc:	e7f0      	b.n	800e7b0 <xQueueGenericReset+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e7ce:	0020      	movs	r0, r4
 800e7d0:	3010      	adds	r0, #16
 800e7d2:	f000 fee3 	bl	800f59c <xTaskRemoveFromEventList>
 800e7d6:	2801      	cmp	r0, #1
 800e7d8:	d1ea      	bne.n	800e7b0 <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800e7da:	f001 fb69 	bl	800feb0 <vPortYield>
 800e7de:	e7e7      	b.n	800e7b0 <xQueueGenericReset+0x38>

0800e7e0 <xQueueGenericCreate>:
{
 800e7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e2:	0005      	movs	r5, r0
 800e7e4:	000e      	movs	r6, r1
 800e7e6:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	d101      	bne.n	800e7f0 <xQueueGenericCreate+0x10>
 800e7ec:	b672      	cpsid	i
 800e7ee:	e7fe      	b.n	800e7ee <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e7f0:	2900      	cmp	r1, #0
 800e7f2:	d013      	beq.n	800e81c <xQueueGenericCreate+0x3c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7f4:	0008      	movs	r0, r1
 800e7f6:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e7f8:	3055      	adds	r0, #85	; 0x55
 800e7fa:	f001 fbe3 	bl	800ffc4 <pvPortMalloc>
 800e7fe:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e800:	d011      	beq.n	800e826 <xQueueGenericCreate+0x46>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800e802:	0003      	movs	r3, r0
 800e804:	3354      	adds	r3, #84	; 0x54
 800e806:	6003      	str	r3, [r0, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800e808:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e80a:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e80c:	2101      	movs	r1, #1
 800e80e:	0020      	movs	r0, r4
 800e810:	f7ff ffb2 	bl	800e778 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800e814:	2350      	movs	r3, #80	; 0x50
}
 800e816:	0020      	movs	r0, r4
			pxNewQueue->ucQueueType = ucQueueType;
 800e818:	54e7      	strb	r7, [r4, r3]
}
 800e81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e81c:	2054      	movs	r0, #84	; 0x54
 800e81e:	f001 fbd1 	bl	800ffc4 <pvPortMalloc>
 800e822:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e824:	d101      	bne.n	800e82a <xQueueGenericCreate+0x4a>
	configASSERT( xReturn );
 800e826:	b672      	cpsid	i
 800e828:	e7fe      	b.n	800e828 <xQueueGenericCreate+0x48>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e82a:	6024      	str	r4, [r4, #0]
 800e82c:	e7ec      	b.n	800e808 <xQueueGenericCreate+0x28>
 800e82e:	46c0      	nop			; (mov r8, r8)

0800e830 <xQueueCreateCountingSemaphore>:
	{
 800e830:	b510      	push	{r4, lr}
 800e832:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e834:	2800      	cmp	r0, #0
 800e836:	d101      	bne.n	800e83c <xQueueCreateCountingSemaphore+0xc>
 800e838:	b672      	cpsid	i
 800e83a:	e7fe      	b.n	800e83a <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e83c:	4288      	cmp	r0, r1
 800e83e:	d201      	bcs.n	800e844 <xQueueCreateCountingSemaphore+0x14>
 800e840:	b672      	cpsid	i
 800e842:	e7fe      	b.n	800e842 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e844:	2202      	movs	r2, #2
 800e846:	2100      	movs	r1, #0
 800e848:	f7ff ffca 	bl	800e7e0 <xQueueGenericCreate>
		if( xHandle != NULL )
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d001      	beq.n	800e854 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e850:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e852:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800e854:	b672      	cpsid	i
 800e856:	e7fe      	b.n	800e856 <xQueueCreateCountingSemaphore+0x26>

0800e858 <xQueueGenericSend>:
{
 800e858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e85a:	46c6      	mov	lr, r8
 800e85c:	b500      	push	{lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	0004      	movs	r4, r0
 800e862:	000f      	movs	r7, r1
 800e864:	9201      	str	r2, [sp, #4]
 800e866:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800e868:	2800      	cmp	r0, #0
 800e86a:	d100      	bne.n	800e86e <xQueueGenericSend+0x16>
 800e86c:	e07a      	b.n	800e964 <xQueueGenericSend+0x10c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e86e:	2900      	cmp	r1, #0
 800e870:	d100      	bne.n	800e874 <xQueueGenericSend+0x1c>
 800e872:	e071      	b.n	800e958 <xQueueGenericSend+0x100>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e874:	2d02      	cmp	r5, #2
 800e876:	d104      	bne.n	800e882 <xQueueGenericSend+0x2a>
 800e878:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d001      	beq.n	800e882 <xQueueGenericSend+0x2a>
 800e87e:	b672      	cpsid	i
 800e880:	e7fe      	b.n	800e880 <xQueueGenericSend+0x28>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e882:	f000 ff0f 	bl	800f6a4 <xTaskGetSchedulerState>
 800e886:	2800      	cmp	r0, #0
 800e888:	d104      	bne.n	800e894 <xQueueGenericSend+0x3c>
 800e88a:	9b01      	ldr	r3, [sp, #4]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d001      	beq.n	800e894 <xQueueGenericSend+0x3c>
 800e890:	b672      	cpsid	i
 800e892:	e7fe      	b.n	800e892 <xQueueGenericSend+0x3a>
		prvLockQueue( pxQueue );
 800e894:	2300      	movs	r3, #0
 800e896:	4698      	mov	r8, r3
		taskENTER_CRITICAL();
 800e898:	f001 fb16 	bl	800fec8 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e89c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e89e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e8a0:	2600      	movs	r6, #0
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d335      	bcc.n	800e912 <xQueueGenericSend+0xba>
 800e8a6:	2d02      	cmp	r5, #2
 800e8a8:	d033      	beq.n	800e912 <xQueueGenericSend+0xba>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8aa:	9b01      	ldr	r3, [sp, #4]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d05b      	beq.n	800e968 <xQueueGenericSend+0x110>
				else if( xEntryTimeSet == pdFALSE )
 800e8b0:	2e00      	cmp	r6, #0
 800e8b2:	d102      	bne.n	800e8ba <xQueueGenericSend+0x62>
					vTaskSetTimeOutState( &xTimeOut );
 800e8b4:	a802      	add	r0, sp, #8
 800e8b6:	f000 feab 	bl	800f610 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800e8ba:	f001 fb11 	bl	800fee0 <vPortExitCritical>
		vTaskSuspendAll();
 800e8be:	f000 fc63 	bl	800f188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e8c2:	f001 fb01 	bl	800fec8 <vPortEnterCritical>
 800e8c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	d101      	bne.n	800e8d0 <xQueueGenericSend+0x78>
 800e8cc:	4643      	mov	r3, r8
 800e8ce:	6463      	str	r3, [r4, #68]	; 0x44
 800e8d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	d101      	bne.n	800e8da <xQueueGenericSend+0x82>
 800e8d6:	4643      	mov	r3, r8
 800e8d8:	64a3      	str	r3, [r4, #72]	; 0x48
 800e8da:	f001 fb01 	bl	800fee0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e8de:	a901      	add	r1, sp, #4
 800e8e0:	a802      	add	r0, sp, #8
 800e8e2:	f000 fea5 	bl	800f630 <xTaskCheckForTimeOut>
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	d14b      	bne.n	800e982 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e8ea:	f001 faed 	bl	800fec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e8ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e8f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d01e      	beq.n	800e934 <xQueueGenericSend+0xdc>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e8f6:	f001 faf3 	bl	800fee0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800e8fa:	0020      	movs	r0, r4
 800e8fc:	f7ff feec 	bl	800e6d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e900:	f000 fce2 	bl	800f2c8 <xTaskResumeAll>
 800e904:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800e906:	f001 fadf 	bl	800fec8 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e90a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e90c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e90e:	4293      	cmp	r3, r2
 800e910:	d2c9      	bcs.n	800e8a6 <xQueueGenericSend+0x4e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e912:	002a      	movs	r2, r5
 800e914:	0039      	movs	r1, r7
 800e916:	0020      	movs	r0, r4
 800e918:	f7ff fe90 	bl	800e63c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e91c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d126      	bne.n	800e970 <xQueueGenericSend+0x118>
					else if( xYieldRequired != pdFALSE )
 800e922:	2800      	cmp	r0, #0
 800e924:	d12a      	bne.n	800e97c <xQueueGenericSend+0x124>
				taskEXIT_CRITICAL();
 800e926:	f001 fadb 	bl	800fee0 <vPortExitCritical>
				return pdPASS;
 800e92a:	2001      	movs	r0, #1
}
 800e92c:	b004      	add	sp, #16
 800e92e:	bc04      	pop	{r2}
 800e930:	4690      	mov	r8, r2
 800e932:	bdf0      	pop	{r4, r5, r6, r7, pc}
	taskEXIT_CRITICAL();
 800e934:	f001 fad4 	bl	800fee0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e938:	0020      	movs	r0, r4
 800e93a:	9901      	ldr	r1, [sp, #4]
 800e93c:	3010      	adds	r0, #16
 800e93e:	f000 fdf7 	bl	800f530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e942:	0020      	movs	r0, r4
 800e944:	f7ff fec8 	bl	800e6d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e948:	f000 fcbe 	bl	800f2c8 <xTaskResumeAll>
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d1d9      	bne.n	800e904 <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800e950:	f001 faae 	bl	800feb0 <vPortYield>
 800e954:	2601      	movs	r6, #1
 800e956:	e7d6      	b.n	800e906 <xQueueGenericSend+0xae>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e958:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d100      	bne.n	800e960 <xQueueGenericSend+0x108>
 800e95e:	e789      	b.n	800e874 <xQueueGenericSend+0x1c>
 800e960:	b672      	cpsid	i
 800e962:	e7fe      	b.n	800e962 <xQueueGenericSend+0x10a>
	configASSERT( pxQueue );
 800e964:	b672      	cpsid	i
 800e966:	e7fe      	b.n	800e966 <xQueueGenericSend+0x10e>
					taskEXIT_CRITICAL();
 800e968:	f001 faba 	bl	800fee0 <vPortExitCritical>
					return errQUEUE_FULL;
 800e96c:	2000      	movs	r0, #0
 800e96e:	e7dd      	b.n	800e92c <xQueueGenericSend+0xd4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e970:	0020      	movs	r0, r4
 800e972:	3024      	adds	r0, #36	; 0x24
 800e974:	f000 fe12 	bl	800f59c <xTaskRemoveFromEventList>
 800e978:	2801      	cmp	r0, #1
 800e97a:	d1d4      	bne.n	800e926 <xQueueGenericSend+0xce>
							queueYIELD_IF_USING_PREEMPTION();
 800e97c:	f001 fa98 	bl	800feb0 <vPortYield>
 800e980:	e7d1      	b.n	800e926 <xQueueGenericSend+0xce>
			prvUnlockQueue( pxQueue );
 800e982:	0020      	movs	r0, r4
 800e984:	f7ff fea8 	bl	800e6d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e988:	f000 fc9e 	bl	800f2c8 <xTaskResumeAll>
			return errQUEUE_FULL;
 800e98c:	2000      	movs	r0, #0
 800e98e:	e7cd      	b.n	800e92c <xQueueGenericSend+0xd4>

0800e990 <xQueueGenericSendFromISR>:
{
 800e990:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e992:	46c6      	mov	lr, r8
 800e994:	0004      	movs	r4, r0
 800e996:	b500      	push	{lr}
 800e998:	000d      	movs	r5, r1
 800e99a:	0017      	movs	r7, r2
 800e99c:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	d01d      	beq.n	800e9de <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9a2:	2900      	cmp	r1, #0
 800e9a4:	d016      	beq.n	800e9d4 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e9a6:	4643      	mov	r3, r8
 800e9a8:	2b02      	cmp	r3, #2
 800e9aa:	d104      	bne.n	800e9b6 <xQueueGenericSendFromISR+0x26>
 800e9ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d017      	beq.n	800e9e2 <xQueueGenericSendFromISR+0x52>
 800e9b2:	b672      	cpsid	i
 800e9b4:	e7fe      	b.n	800e9b4 <xQueueGenericSendFromISR+0x24>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9b6:	f001 faa1 	bl	800fefc <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e9ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e9bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9be:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d312      	bcc.n	800e9ea <xQueueGenericSendFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 800e9c4:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e9c6:	0030      	movs	r0, r6
 800e9c8:	f001 fa9e 	bl	800ff08 <vClearInterruptMaskFromISR>
}
 800e9cc:	0028      	movs	r0, r5
 800e9ce:	bc04      	pop	{r2}
 800e9d0:	4690      	mov	r8, r2
 800e9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d0e5      	beq.n	800e9a6 <xQueueGenericSendFromISR+0x16>
 800e9da:	b672      	cpsid	i
 800e9dc:	e7fe      	b.n	800e9dc <xQueueGenericSendFromISR+0x4c>
	configASSERT( pxQueue );
 800e9de:	b672      	cpsid	i
 800e9e0:	e7fe      	b.n	800e9e0 <xQueueGenericSendFromISR+0x50>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9e2:	f001 fa8b 	bl	800fefc <ulSetInterruptMaskFromISR>
 800e9e6:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e9e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e9ea:	4642      	mov	r2, r8
 800e9ec:	0029      	movs	r1, r5
 800e9ee:	0020      	movs	r0, r4
 800e9f0:	f7ff fe24 	bl	800e63c <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e9f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	d004      	beq.n	800ea04 <xQueueGenericSendFromISR+0x74>
				++( pxQueue->xTxLock );
 800e9fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e9fc:	2501      	movs	r5, #1
				++( pxQueue->xTxLock );
 800e9fe:	3301      	adds	r3, #1
 800ea00:	64a3      	str	r3, [r4, #72]	; 0x48
 800ea02:	e7e0      	b.n	800e9c6 <xQueueGenericSendFromISR+0x36>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea04:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
 800ea06:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d0dc      	beq.n	800e9c6 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea0c:	0020      	movs	r0, r4
 800ea0e:	3024      	adds	r0, #36	; 0x24
 800ea10:	f000 fdc4 	bl	800f59c <xTaskRemoveFromEventList>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	d0d6      	beq.n	800e9c6 <xQueueGenericSendFromISR+0x36>
							if( pxHigherPriorityTaskWoken != NULL )
 800ea18:	2f00      	cmp	r7, #0
 800ea1a:	d0d4      	beq.n	800e9c6 <xQueueGenericSendFromISR+0x36>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea1c:	603d      	str	r5, [r7, #0]
 800ea1e:	e7d2      	b.n	800e9c6 <xQueueGenericSendFromISR+0x36>

0800ea20 <xQueueGiveFromISR>:
{
 800ea20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea22:	0004      	movs	r4, r0
 800ea24:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800ea26:	2800      	cmp	r0, #0
 800ea28:	d01e      	beq.n	800ea68 <xQueueGiveFromISR+0x48>
	configASSERT( pxQueue->uxItemSize == 0 );
 800ea2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d001      	beq.n	800ea34 <xQueueGiveFromISR+0x14>
 800ea30:	b672      	cpsid	i
 800ea32:	e7fe      	b.n	800ea32 <xQueueGiveFromISR+0x12>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ea34:	6803      	ldr	r3, [r0, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d018      	beq.n	800ea6c <xQueueGiveFromISR+0x4c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea3a:	f001 fa5f 	bl	800fefc <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800ea3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea42:	0006      	movs	r6, r0
			xReturn = errQUEUE_FULL;
 800ea44:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d209      	bcs.n	800ea5e <xQueueGiveFromISR+0x3e>
			++( pxQueue->uxMessagesWaiting );
 800ea4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800ea50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ea52:	3301      	adds	r3, #1
 800ea54:	d00f      	beq.n	800ea76 <xQueueGiveFromISR+0x56>
				++( pxQueue->xTxLock );
 800ea56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ea58:	3301      	adds	r3, #1
 800ea5a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800ea5c:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ea5e:	0030      	movs	r0, r6
 800ea60:	f001 fa52 	bl	800ff08 <vClearInterruptMaskFromISR>
}
 800ea64:	0028      	movs	r0, r5
 800ea66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800ea68:	b672      	cpsid	i
 800ea6a:	e7fe      	b.n	800ea6a <xQueueGiveFromISR+0x4a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ea6c:	6843      	ldr	r3, [r0, #4]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d0e3      	beq.n	800ea3a <xQueueGiveFromISR+0x1a>
 800ea72:	b672      	cpsid	i
 800ea74:	e7fe      	b.n	800ea74 <xQueueGiveFromISR+0x54>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea78:	42ab      	cmp	r3, r5
 800ea7a:	d0ef      	beq.n	800ea5c <xQueueGiveFromISR+0x3c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea7c:	0020      	movs	r0, r4
 800ea7e:	3024      	adds	r0, #36	; 0x24
 800ea80:	f000 fd8c 	bl	800f59c <xTaskRemoveFromEventList>
 800ea84:	2800      	cmp	r0, #0
 800ea86:	d0e9      	beq.n	800ea5c <xQueueGiveFromISR+0x3c>
							if( pxHigherPriorityTaskWoken != NULL )
 800ea88:	2f00      	cmp	r7, #0
 800ea8a:	d0e7      	beq.n	800ea5c <xQueueGiveFromISR+0x3c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea8c:	2501      	movs	r5, #1
 800ea8e:	603d      	str	r5, [r7, #0]
 800ea90:	e7e5      	b.n	800ea5e <xQueueGiveFromISR+0x3e>
 800ea92:	46c0      	nop			; (mov r8, r8)

0800ea94 <xQueueGenericReceive>:
{
 800ea94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea96:	46c6      	mov	lr, r8
 800ea98:	b500      	push	{lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	0004      	movs	r4, r0
 800ea9e:	000d      	movs	r5, r1
 800eaa0:	9201      	str	r2, [sp, #4]
 800eaa2:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	d100      	bne.n	800eaaa <xQueueGenericReceive+0x16>
 800eaa8:	e07c      	b.n	800eba4 <xQueueGenericReceive+0x110>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eaaa:	2900      	cmp	r1, #0
 800eaac:	d100      	bne.n	800eab0 <xQueueGenericReceive+0x1c>
 800eaae:	e073      	b.n	800eb98 <xQueueGenericReceive+0x104>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eab0:	f000 fdf8 	bl	800f6a4 <xTaskGetSchedulerState>
 800eab4:	2800      	cmp	r0, #0
 800eab6:	d104      	bne.n	800eac2 <xQueueGenericReceive+0x2e>
 800eab8:	9b01      	ldr	r3, [sp, #4]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d001      	beq.n	800eac2 <xQueueGenericReceive+0x2e>
 800eabe:	b672      	cpsid	i
 800eac0:	e7fe      	b.n	800eac0 <xQueueGenericReceive+0x2c>
		taskENTER_CRITICAL();
 800eac2:	f001 fa01 	bl	800fec8 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d14b      	bne.n	800eb64 <xQueueGenericReceive+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800eacc:	9b01      	ldr	r3, [sp, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d100      	bne.n	800ead4 <xQueueGenericReceive+0x40>
 800ead2:	e08f      	b.n	800ebf4 <xQueueGenericReceive+0x160>
					vTaskSetTimeOutState( &xTimeOut );
 800ead4:	a802      	add	r0, sp, #8
 800ead6:	f000 fd9b 	bl	800f610 <vTaskSetTimeOutState>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eada:	2324      	movs	r3, #36	; 0x24
 800eadc:	4698      	mov	r8, r3
		prvLockQueue( pxQueue );
 800eade:	2600      	movs	r6, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eae0:	44a0      	add	r8, r4
 800eae2:	e00f      	b.n	800eb04 <xQueueGenericReceive+0x70>
	taskEXIT_CRITICAL();
 800eae4:	f001 f9fc 	bl	800fee0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800eae8:	0020      	movs	r0, r4
 800eaea:	f7ff fdf5 	bl	800e6d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eaee:	f000 fbeb 	bl	800f2c8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800eaf2:	f001 f9e9 	bl	800fec8 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eaf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d133      	bne.n	800eb64 <xQueueGenericReceive+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800eafc:	9b01      	ldr	r3, [sp, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d100      	bne.n	800eb04 <xQueueGenericReceive+0x70>
 800eb02:	e077      	b.n	800ebf4 <xQueueGenericReceive+0x160>
		taskEXIT_CRITICAL();
 800eb04:	f001 f9ec 	bl	800fee0 <vPortExitCritical>
		vTaskSuspendAll();
 800eb08:	f000 fb3e 	bl	800f188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb0c:	f001 f9dc 	bl	800fec8 <vPortEnterCritical>
 800eb10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eb12:	3301      	adds	r3, #1
 800eb14:	d100      	bne.n	800eb18 <xQueueGenericReceive+0x84>
 800eb16:	6466      	str	r6, [r4, #68]	; 0x44
 800eb18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	d100      	bne.n	800eb20 <xQueueGenericReceive+0x8c>
 800eb1e:	64a6      	str	r6, [r4, #72]	; 0x48
 800eb20:	f001 f9de 	bl	800fee0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb24:	a901      	add	r1, sp, #4
 800eb26:	a802      	add	r0, sp, #8
 800eb28:	f000 fd82 	bl	800f630 <xTaskCheckForTimeOut>
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d15a      	bne.n	800ebe6 <xQueueGenericReceive+0x152>
	taskENTER_CRITICAL();
 800eb30:	f001 f9ca 	bl	800fec8 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eb34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d1d4      	bne.n	800eae4 <xQueueGenericReceive+0x50>
	taskEXIT_CRITICAL();
 800eb3a:	f001 f9d1 	bl	800fee0 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb3e:	6823      	ldr	r3, [r4, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d034      	beq.n	800ebae <xQueueGenericReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eb44:	9901      	ldr	r1, [sp, #4]
 800eb46:	4640      	mov	r0, r8
 800eb48:	f000 fcf2 	bl	800f530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eb4c:	0020      	movs	r0, r4
 800eb4e:	f7ff fdc3 	bl	800e6d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eb52:	f000 fbb9 	bl	800f2c8 <xTaskResumeAll>
 800eb56:	2800      	cmp	r0, #0
 800eb58:	d026      	beq.n	800eba8 <xQueueGenericReceive+0x114>
		taskENTER_CRITICAL();
 800eb5a:	f001 f9b5 	bl	800fec8 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d0cb      	beq.n	800eafc <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb64:	0029      	movs	r1, r5
 800eb66:	0020      	movs	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800eb68:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb6a:	f7ff fda3 	bl	800e6b4 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800eb6e:	2f00      	cmp	r7, #0
 800eb70:	d125      	bne.n	800ebbe <xQueueGenericReceive+0x12a>
					--( pxQueue->uxMessagesWaiting );
 800eb72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb74:	3b01      	subs	r3, #1
 800eb76:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb78:	6823      	ldr	r3, [r4, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d102      	bne.n	800eb84 <xQueueGenericReceive+0xf0>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800eb7e:	f000 fec5 	bl	800f90c <pvTaskIncrementMutexHeldCount>
 800eb82:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb84:	6923      	ldr	r3, [r4, #16]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d126      	bne.n	800ebd8 <xQueueGenericReceive+0x144>
				taskEXIT_CRITICAL();
 800eb8a:	f001 f9a9 	bl	800fee0 <vPortExitCritical>
				return pdPASS;
 800eb8e:	2001      	movs	r0, #1
}
 800eb90:	b004      	add	sp, #16
 800eb92:	bc04      	pop	{r2}
 800eb94:	4690      	mov	r8, r2
 800eb96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb98:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d100      	bne.n	800eba0 <xQueueGenericReceive+0x10c>
 800eb9e:	e787      	b.n	800eab0 <xQueueGenericReceive+0x1c>
 800eba0:	b672      	cpsid	i
 800eba2:	e7fe      	b.n	800eba2 <xQueueGenericReceive+0x10e>
	configASSERT( pxQueue );
 800eba4:	b672      	cpsid	i
 800eba6:	e7fe      	b.n	800eba6 <xQueueGenericReceive+0x112>
					portYIELD_WITHIN_API();
 800eba8:	f001 f982 	bl	800feb0 <vPortYield>
 800ebac:	e7d5      	b.n	800eb5a <xQueueGenericReceive+0xc6>
						taskENTER_CRITICAL();
 800ebae:	f001 f98b 	bl	800fec8 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ebb2:	6860      	ldr	r0, [r4, #4]
 800ebb4:	f000 fd86 	bl	800f6c4 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800ebb8:	f001 f992 	bl	800fee0 <vPortExitCritical>
 800ebbc:	e7c2      	b.n	800eb44 <xQueueGenericReceive+0xb0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800ebc0:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d0e1      	beq.n	800eb8a <xQueueGenericReceive+0xf6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebc6:	0020      	movs	r0, r4
 800ebc8:	3024      	adds	r0, #36	; 0x24
 800ebca:	f000 fce7 	bl	800f59c <xTaskRemoveFromEventList>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d0db      	beq.n	800eb8a <xQueueGenericReceive+0xf6>
							queueYIELD_IF_USING_PREEMPTION();
 800ebd2:	f001 f96d 	bl	800feb0 <vPortYield>
 800ebd6:	e7d8      	b.n	800eb8a <xQueueGenericReceive+0xf6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800ebd8:	0020      	movs	r0, r4
 800ebda:	3010      	adds	r0, #16
 800ebdc:	f000 fcde 	bl	800f59c <xTaskRemoveFromEventList>
 800ebe0:	2801      	cmp	r0, #1
 800ebe2:	d1d2      	bne.n	800eb8a <xQueueGenericReceive+0xf6>
 800ebe4:	e7f5      	b.n	800ebd2 <xQueueGenericReceive+0x13e>
			prvUnlockQueue( pxQueue );
 800ebe6:	0020      	movs	r0, r4
 800ebe8:	f7ff fd76 	bl	800e6d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ebec:	f000 fb6c 	bl	800f2c8 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	e7cd      	b.n	800eb90 <xQueueGenericReceive+0xfc>
					taskEXIT_CRITICAL();
 800ebf4:	f001 f974 	bl	800fee0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	e7c9      	b.n	800eb90 <xQueueGenericReceive+0xfc>

0800ebfc <xQueueReceiveFromISR>:
{
 800ebfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebfe:	46c6      	mov	lr, r8
 800ec00:	0004      	movs	r4, r0
 800ec02:	b500      	push	{lr}
 800ec04:	4688      	mov	r8, r1
 800ec06:	0017      	movs	r7, r2
	configASSERT( pxQueue );
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	d00f      	beq.n	800ec2c <xQueueReceiveFromISR+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec0c:	2900      	cmp	r1, #0
 800ec0e:	d01d      	beq.n	800ec4c <xQueueReceiveFromISR+0x50>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec10:	f001 f974 	bl	800fefc <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec16:	0006      	movs	r6, r0
			xReturn = pdFAIL;
 800ec18:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d108      	bne.n	800ec30 <xQueueReceiveFromISR+0x34>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ec1e:	0030      	movs	r0, r6
 800ec20:	f001 f972 	bl	800ff08 <vClearInterruptMaskFromISR>
}
 800ec24:	0028      	movs	r0, r5
 800ec26:	bc04      	pop	{r2}
 800ec28:	4690      	mov	r8, r2
 800ec2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800ec2c:	b672      	cpsid	i
 800ec2e:	e7fe      	b.n	800ec2e <xQueueReceiveFromISR+0x32>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ec30:	4641      	mov	r1, r8
 800ec32:	0020      	movs	r0, r4
 800ec34:	f7ff fd3e 	bl	800e6b4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800ec38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec3a:	3b01      	subs	r3, #1
 800ec3c:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800ec3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ec40:	3301      	adds	r3, #1
 800ec42:	d008      	beq.n	800ec56 <xQueueReceiveFromISR+0x5a>
				++( pxQueue->xRxLock );
 800ec44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ec46:	3301      	adds	r3, #1
 800ec48:	6463      	str	r3, [r4, #68]	; 0x44
 800ec4a:	e007      	b.n	800ec5c <xQueueReceiveFromISR+0x60>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec4c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d0de      	beq.n	800ec10 <xQueueReceiveFromISR+0x14>
 800ec52:	b672      	cpsid	i
 800ec54:	e7fe      	b.n	800ec54 <xQueueReceiveFromISR+0x58>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec56:	6923      	ldr	r3, [r4, #16]
 800ec58:	42ab      	cmp	r3, r5
 800ec5a:	d101      	bne.n	800ec60 <xQueueReceiveFromISR+0x64>
			xReturn = pdPASS;
 800ec5c:	2501      	movs	r5, #1
 800ec5e:	e7de      	b.n	800ec1e <xQueueReceiveFromISR+0x22>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec60:	0020      	movs	r0, r4
 800ec62:	3010      	adds	r0, #16
 800ec64:	f000 fc9a 	bl	800f59c <xTaskRemoveFromEventList>
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	d0f7      	beq.n	800ec5c <xQueueReceiveFromISR+0x60>
						if( pxHigherPriorityTaskWoken != NULL )
 800ec6c:	2f00      	cmp	r7, #0
 800ec6e:	d0f5      	beq.n	800ec5c <xQueueReceiveFromISR+0x60>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ec70:	2501      	movs	r5, #1
 800ec72:	603d      	str	r5, [r7, #0]
 800ec74:	e7d3      	b.n	800ec1e <xQueueReceiveFromISR+0x22>
 800ec76:	46c0      	nop			; (mov r8, r8)

0800ec78 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec78:	2300      	movs	r3, #0
	{
 800ec7a:	b570      	push	{r4, r5, r6, lr}
 800ec7c:	4d06      	ldr	r5, [pc, #24]	; (800ec98 <vQueueAddToRegistry+0x20>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ec7e:	00dc      	lsls	r4, r3, #3
 800ec80:	192a      	adds	r2, r5, r4
 800ec82:	6816      	ldr	r6, [r2, #0]
 800ec84:	2e00      	cmp	r6, #0
 800ec86:	d003      	beq.n	800ec90 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec88:	3301      	adds	r3, #1
 800ec8a:	2b08      	cmp	r3, #8
 800ec8c:	d1f7      	bne.n	800ec7e <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ec8e:	bd70      	pop	{r4, r5, r6, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ec90:	5129      	str	r1, [r5, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ec92:	6050      	str	r0, [r2, #4]
				break;
 800ec94:	e7fb      	b.n	800ec8e <vQueueAddToRegistry+0x16>
 800ec96:	46c0      	nop			; (mov r8, r8)
 800ec98:	20007174 	.word	0x20007174

0800ec9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800ec9c:	b570      	push	{r4, r5, r6, lr}
 800ec9e:	0004      	movs	r4, r0
 800eca0:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eca2:	f001 f911 	bl	800fec8 <vPortEnterCritical>
 800eca6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eca8:	3301      	adds	r3, #1
 800ecaa:	d101      	bne.n	800ecb0 <vQueueWaitForMessageRestricted+0x14>
 800ecac:	2300      	movs	r3, #0
 800ecae:	6463      	str	r3, [r4, #68]	; 0x44
 800ecb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	d101      	bne.n	800ecba <vQueueWaitForMessageRestricted+0x1e>
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	64a3      	str	r3, [r4, #72]	; 0x48
 800ecba:	f001 f911 	bl	800fee0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ecbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d104      	bne.n	800ecce <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ecc4:	0020      	movs	r0, r4
 800ecc6:	0029      	movs	r1, r5
 800ecc8:	3024      	adds	r0, #36	; 0x24
 800ecca:	f000 fc51 	bl	800f570 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ecce:	0020      	movs	r0, r4
 800ecd0:	f7ff fd02 	bl	800e6d8 <prvUnlockQueue>
	}
 800ecd4:	bd70      	pop	{r4, r5, r6, pc}
 800ecd6:	46c0      	nop			; (mov r8, r8)

0800ecd8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800ecd8:	b510      	push	{r4, lr}
 800ecda:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800ecdc:	f005 fbde 	bl	801449c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ece0:	0020      	movs	r0, r4
 800ece2:	f7f1 fa19 	bl	8000118 <strlen>
 800ece6:	0003      	movs	r3, r0
 800ece8:	280b      	cmp	r0, #11
 800ecea:	d808      	bhi.n	800ecfe <prvWriteNameToBuffer+0x26>
 800ecec:	0022      	movs	r2, r4
		{
			pcBuffer[ x ] = ' ';
 800ecee:	2320      	movs	r3, #32
 800ecf0:	1820      	adds	r0, r4, r0
 800ecf2:	320c      	adds	r2, #12
 800ecf4:	7003      	strb	r3, [r0, #0]
 800ecf6:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ecf8:	4290      	cmp	r0, r2
 800ecfa:	d1fb      	bne.n	800ecf4 <prvWriteNameToBuffer+0x1c>
 800ecfc:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800ecfe:	18e0      	adds	r0, r4, r3
 800ed00:	2300      	movs	r3, #0
 800ed02:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800ed04:	bd10      	pop	{r4, pc}
 800ed06:	46c0      	nop			; (mov r8, r8)

0800ed08 <prvListTaskWithinSingleList.part.1>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800ed08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed0a:	46d6      	mov	lr, sl
 800ed0c:	464f      	mov	r7, r9
 800ed0e:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800ed10:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800ed12:	b5c0      	push	{r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800ed14:	685f      	ldr	r7, [r3, #4]
 800ed16:	2308      	movs	r3, #8
 800ed18:	469c      	mov	ip, r3
 800ed1a:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800ed1c:	4692      	mov	sl, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800ed1e:	604f      	str	r7, [r1, #4]
 800ed20:	4567      	cmp	r7, ip
 800ed22:	d042      	beq.n	800edaa <prvListTaskWithinSingleList.part.1+0xa2>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	0005      	movs	r5, r0
 800ed28:	4698      	mov	r8, r3
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800ed2a:	2302      	movs	r3, #2
	UBaseType_t uxTask = 0;
 800ed2c:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800ed2e:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ed30:	687f      	ldr	r7, [r7, #4]
 800ed32:	604f      	str	r7, [r1, #4]
 800ed34:	45bc      	cmp	ip, r7
 800ed36:	d035      	beq.n	800eda4 <prvListTaskWithinSingleList.part.1+0x9c>
 800ed38:	68fe      	ldr	r6, [r7, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800ed3a:	0033      	movs	r3, r6
 800ed3c:	3334      	adds	r3, #52	; 0x34
 800ed3e:	606b      	str	r3, [r5, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800ed40:	6c73      	ldr	r3, [r6, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800ed42:	602e      	str	r6, [r5, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800ed44:	60ab      	str	r3, [r5, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800ed46:	4653      	mov	r3, sl
 800ed48:	732b      	strb	r3, [r5, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800ed4a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800ed4c:	612b      	str	r3, [r5, #16]
					if( eState == eSuspended )
 800ed4e:	4653      	mov	r3, sl
 800ed50:	2b03      	cmp	r3, #3
 800ed52:	d018      	beq.n	800ed86 <prvListTaskWithinSingleList.part.1+0x7e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800ed54:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800ed56:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800ed58:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800ed5a:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800ed5c:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ed5e:	7813      	ldrb	r3, [r2, #0]
 800ed60:	2ba5      	cmp	r3, #165	; 0xa5
 800ed62:	d11d      	bne.n	800eda0 <prvListTaskWithinSingleList.part.1+0x98>
	uint32_t ulCount = 0U;
 800ed64:	2300      	movs	r3, #0
			ulCount++;
 800ed66:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ed68:	5cd4      	ldrb	r4, [r2, r3]
 800ed6a:	2ca5      	cmp	r4, #165	; 0xa5
 800ed6c:	d0fb      	beq.n	800ed66 <prvListTaskWithinSingleList.part.1+0x5e>
 800ed6e:	089b      	lsrs	r3, r3, #2
 800ed70:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800ed72:	83ab      	strh	r3, [r5, #28]
				uxTask++;
 800ed74:	3001      	adds	r0, #1
 800ed76:	3520      	adds	r5, #32
			} while( pxNextTCB != pxFirstTCB );
 800ed78:	45b0      	cmp	r8, r6
 800ed7a:	d1d9      	bne.n	800ed30 <prvListTaskWithinSingleList.part.1+0x28>
	}
 800ed7c:	bc1c      	pop	{r2, r3, r4}
 800ed7e:	4690      	mov	r8, r2
 800ed80:	4699      	mov	r9, r3
 800ed82:	46a2      	mov	sl, r4
 800ed84:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800ed86:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d0e3      	beq.n	800ed54 <prvListTaskWithinSingleList.part.1+0x4c>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800ed8c:	464b      	mov	r3, r9
 800ed8e:	732b      	strb	r3, [r5, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800ed90:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800ed92:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800ed94:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800ed96:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800ed98:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ed9a:	7813      	ldrb	r3, [r2, #0]
 800ed9c:	2ba5      	cmp	r3, #165	; 0xa5
 800ed9e:	d0e1      	beq.n	800ed64 <prvListTaskWithinSingleList.part.1+0x5c>
 800eda0:	2300      	movs	r3, #0
 800eda2:	e7e6      	b.n	800ed72 <prvListTaskWithinSingleList.part.1+0x6a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800eda4:	68cf      	ldr	r7, [r1, #12]
 800eda6:	604f      	str	r7, [r1, #4]
 800eda8:	e7c6      	b.n	800ed38 <prvListTaskWithinSingleList.part.1+0x30>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800edaa:	68cf      	ldr	r7, [r1, #12]
 800edac:	e7ba      	b.n	800ed24 <prvListTaskWithinSingleList.part.1+0x1c>
 800edae:	46c0      	nop			; (mov r8, r8)

0800edb0 <prvResetNextTaskUnblockTime.part.2>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800edb0:	4b03      	ldr	r3, [pc, #12]	; (800edc0 <prvResetNextTaskUnblockTime.part.2+0x10>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	685a      	ldr	r2, [r3, #4]
 800edba:	4b02      	ldr	r3, [pc, #8]	; (800edc4 <prvResetNextTaskUnblockTime.part.2+0x14>)
 800edbc:	601a      	str	r2, [r3, #0]
}
 800edbe:	4770      	bx	lr
 800edc0:	2000205c 	.word	0x2000205c
 800edc4:	200000c0 	.word	0x200000c0

0800edc8 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800edc8:	4b0c      	ldr	r3, [pc, #48]	; (800edfc <prvAddCurrentTaskToDelayedList+0x34>)
{
 800edca:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800edcc:	685a      	ldr	r2, [r3, #4]
{
 800edce:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800edd0:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800edd2:	689a      	ldr	r2, [r3, #8]
 800edd4:	4282      	cmp	r2, r0
 800edd6:	d80a      	bhi.n	800edee <prvAddCurrentTaskToDelayedList+0x26>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800edd8:	6818      	ldr	r0, [r3, #0]
 800edda:	6859      	ldr	r1, [r3, #4]
 800eddc:	3104      	adds	r1, #4
 800edde:	f7ff fc05 	bl	800e5ec <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800ede2:	4b07      	ldr	r3, [pc, #28]	; (800ee00 <prvAddCurrentTaskToDelayedList+0x38>)
 800ede4:	681a      	ldr	r2, [r3, #0]
 800ede6:	42a2      	cmp	r2, r4
 800ede8:	d900      	bls.n	800edec <prvAddCurrentTaskToDelayedList+0x24>
			xNextTaskUnblockTime = xTimeToWake;
 800edea:	601c      	str	r4, [r3, #0]
}
 800edec:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800edee:	68d8      	ldr	r0, [r3, #12]
 800edf0:	6859      	ldr	r1, [r3, #4]
 800edf2:	3104      	adds	r1, #4
 800edf4:	f7ff fbfa 	bl	800e5ec <vListInsert>
 800edf8:	e7f8      	b.n	800edec <prvAddCurrentTaskToDelayedList+0x24>
 800edfa:	46c0      	nop			; (mov r8, r8)
 800edfc:	2000205c 	.word	0x2000205c
 800ee00:	200000c0 	.word	0x200000c0

0800ee04 <xTaskGenericCreate.part.5>:
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 800ee04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee06:	464f      	mov	r7, r9
 800ee08:	4646      	mov	r6, r8
 800ee0a:	46d6      	mov	lr, sl
 800ee0c:	b5c0      	push	{r6, r7, lr}
 800ee0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ee10:	4680      	mov	r8, r0
 800ee12:	000c      	movs	r4, r1
 800ee14:	0015      	movs	r5, r2
 800ee16:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee18:	2f00      	cmp	r7, #0
 800ee1a:	d100      	bne.n	800ee1e <xTaskGenericCreate.part.5+0x1a>
 800ee1c:	e0ab      	b.n	800ef76 <xTaskGenericCreate.part.5+0x172>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800ee1e:	2060      	movs	r0, #96	; 0x60
 800ee20:	f001 f8d0 	bl	800ffc4 <pvPortMalloc>
 800ee24:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800ee26:	d100      	bne.n	800ee2a <xTaskGenericCreate.part.5+0x26>
 800ee28:	e0ae      	b.n	800ef88 <xTaskGenericCreate.part.5+0x184>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800ee2a:	00ad      	lsls	r5, r5, #2
				pxNewTCB->pxStack = pxStack;
 800ee2c:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800ee2e:	002a      	movs	r2, r5
 800ee30:	0038      	movs	r0, r7
 800ee32:	21a5      	movs	r1, #165	; 0xa5
 800ee34:	f005 f8fc 	bl	8014030 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800ee38:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800ee3a:	1f2f      	subs	r7, r5, #4
 800ee3c:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ee3e:	2307      	movs	r3, #7
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800ee40:	4467      	add	r7, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ee42:	439f      	bics	r7, r3
 800ee44:	0030      	movs	r0, r6
 800ee46:	0033      	movs	r3, r6
 800ee48:	3041      	adds	r0, #65	; 0x41
 800ee4a:	3334      	adds	r3, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800ee4c:	7822      	ldrb	r2, [r4, #0]
 800ee4e:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800ee50:	7822      	ldrb	r2, [r4, #0]
 800ee52:	2a00      	cmp	r2, #0
 800ee54:	d003      	beq.n	800ee5e <xTaskGenericCreate.part.5+0x5a>
 800ee56:	3301      	adds	r3, #1
 800ee58:	3401      	adds	r4, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee5a:	4298      	cmp	r0, r3
 800ee5c:	d1f6      	bne.n	800ee4c <xTaskGenericCreate.part.5+0x48>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ee5e:	2340      	movs	r3, #64	; 0x40
 800ee60:	2200      	movs	r2, #0
 800ee62:	9d08      	ldr	r5, [sp, #32]
 800ee64:	54f2      	strb	r2, [r6, r3]
 800ee66:	2d06      	cmp	r5, #6
 800ee68:	d84f      	bhi.n	800ef0a <xTaskGenericCreate.part.5+0x106>
		pxTCB->uxMutexesHeld = 0;
 800ee6a:	2400      	movs	r4, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800ee6c:	1d33      	adds	r3, r6, #4
 800ee6e:	0018      	movs	r0, r3
	pxTCB->uxPriority = uxPriority;
 800ee70:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800ee72:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800ee74:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800ee76:	469a      	mov	sl, r3
 800ee78:	f7ff fba8 	bl	800e5cc <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800ee7c:	0030      	movs	r0, r6
 800ee7e:	3018      	adds	r0, #24
 800ee80:	f7ff fba4 	bl	800e5cc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee84:	2307      	movs	r3, #7
 800ee86:	1b5b      	subs	r3, r3, r5
 800ee88:	61b3      	str	r3, [r6, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800ee8a:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800ee8c:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800ee8e:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800ee90:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800ee92:	65b4      	str	r4, [r6, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee94:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800ee96:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee98:	4641      	mov	r1, r8
 800ee9a:	0038      	movs	r0, r7
 800ee9c:	f000 ffcc 	bl	800fe38 <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800eea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eea2:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d000      	beq.n	800eeaa <xTaskGenericCreate.part.5+0xa6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eea8:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800eeaa:	f001 f80d 	bl	800fec8 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800eeae:	4c39      	ldr	r4, [pc, #228]	; (800ef94 <xTaskGenericCreate.part.5+0x190>)
 800eeb0:	6923      	ldr	r3, [r4, #16]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	6123      	str	r3, [r4, #16]
			if( pxCurrentTCB == NULL )
 800eeb6:	6863      	ldr	r3, [r4, #4]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d02f      	beq.n	800ef1c <xTaskGenericCreate.part.5+0x118>
				if( xSchedulerRunning == pdFALSE )
 800eebc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d025      	beq.n	800ef0e <xTaskGenericCreate.part.5+0x10a>
 800eec2:	4d35      	ldr	r5, [pc, #212]	; (800ef98 <xTaskGenericCreate.part.5+0x194>)
			uxTaskNumber++;
 800eec4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
			prvAddTaskToReadyList( pxNewTCB );
 800eec6:	4a35      	ldr	r2, [pc, #212]	; (800ef9c <xTaskGenericCreate.part.5+0x198>)
			uxTaskNumber++;
 800eec8:	3301      	adds	r3, #1
 800eeca:	67e3      	str	r3, [r4, #124]	; 0x7c
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eecc:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800eece:	6811      	ldr	r1, [r2, #0]
 800eed0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800eed2:	428b      	cmp	r3, r1
 800eed4:	d817      	bhi.n	800ef06 <xTaskGenericCreate.part.5+0x102>
 800eed6:	0098      	lsls	r0, r3, #2
 800eed8:	18c0      	adds	r0, r0, r3
 800eeda:	0080      	lsls	r0, r0, #2
 800eedc:	1828      	adds	r0, r5, r0
 800eede:	4651      	mov	r1, sl
 800eee0:	f7ff fb78 	bl	800e5d4 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800eee4:	f000 fffc 	bl	800fee0 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800eee8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
			xReturn = pdPASS;
 800eeea:	2501      	movs	r5, #1
		if( xSchedulerRunning != pdFALSE )
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d004      	beq.n	800eefa <xTaskGenericCreate.part.5+0xf6>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800eef0:	6863      	ldr	r3, [r4, #4]
 800eef2:	9a08      	ldr	r2, [sp, #32]
 800eef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d83a      	bhi.n	800ef70 <xTaskGenericCreate.part.5+0x16c>
}
 800eefa:	0028      	movs	r0, r5
 800eefc:	bc1c      	pop	{r2, r3, r4}
 800eefe:	4690      	mov	r8, r2
 800ef00:	4699      	mov	r9, r3
 800ef02:	46a2      	mov	sl, r4
 800ef04:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvAddTaskToReadyList( pxNewTCB );
 800ef06:	6013      	str	r3, [r2, #0]
 800ef08:	e7e5      	b.n	800eed6 <xTaskGenericCreate.part.5+0xd2>
 800ef0a:	2506      	movs	r5, #6
 800ef0c:	e7ad      	b.n	800ee6a <xTaskGenericCreate.part.5+0x66>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800ef0e:	6863      	ldr	r3, [r4, #4]
 800ef10:	9a08      	ldr	r2, [sp, #32]
 800ef12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d3d4      	bcc.n	800eec2 <xTaskGenericCreate.part.5+0xbe>
						pxCurrentTCB = pxNewTCB;
 800ef18:	6066      	str	r6, [r4, #4]
 800ef1a:	e7d2      	b.n	800eec2 <xTaskGenericCreate.part.5+0xbe>
				pxCurrentTCB =  pxNewTCB;
 800ef1c:	6066      	str	r6, [r4, #4]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ef1e:	6923      	ldr	r3, [r4, #16]
 800ef20:	4d1d      	ldr	r5, [pc, #116]	; (800ef98 <xTaskGenericCreate.part.5+0x194>)
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d1ce      	bne.n	800eec4 <xTaskGenericCreate.part.5+0xc0>
 800ef26:	238c      	movs	r3, #140	; 0x8c
 800ef28:	4698      	mov	r8, r3
 800ef2a:	002f      	movs	r7, r5
 800ef2c:	44a8      	add	r8, r5
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ef2e:	0038      	movs	r0, r7
 800ef30:	3714      	adds	r7, #20
 800ef32:	f7ff fb3f 	bl	800e5b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef36:	45b8      	cmp	r8, r7
 800ef38:	d1f9      	bne.n	800ef2e <xTaskGenericCreate.part.5+0x12a>
	vListInitialise( &xDelayedTaskList1 );
 800ef3a:	2314      	movs	r3, #20
 800ef3c:	4698      	mov	r8, r3
	vListInitialise( &xDelayedTaskList2 );
 800ef3e:	0027      	movs	r7, r4
	vListInitialise( &xDelayedTaskList1 );
 800ef40:	44a0      	add	r8, r4
 800ef42:	4640      	mov	r0, r8
	vListInitialise( &xDelayedTaskList2 );
 800ef44:	3728      	adds	r7, #40	; 0x28
	vListInitialise( &xDelayedTaskList1 );
 800ef46:	f7ff fb35 	bl	800e5b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ef4a:	0038      	movs	r0, r7
 800ef4c:	f7ff fb32 	bl	800e5b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ef50:	0020      	movs	r0, r4
 800ef52:	303c      	adds	r0, #60	; 0x3c
 800ef54:	f7ff fb2e 	bl	800e5b4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800ef58:	0020      	movs	r0, r4
 800ef5a:	3050      	adds	r0, #80	; 0x50
 800ef5c:	f7ff fb2a 	bl	800e5b4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800ef60:	0020      	movs	r0, r4
 800ef62:	3064      	adds	r0, #100	; 0x64
 800ef64:	f7ff fb26 	bl	800e5b4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800ef68:	4643      	mov	r3, r8
 800ef6a:	6023      	str	r3, [r4, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ef6c:	60e7      	str	r7, [r4, #12]
 800ef6e:	e7a9      	b.n	800eec4 <xTaskGenericCreate.part.5+0xc0>
				taskYIELD_IF_USING_PREEMPTION();
 800ef70:	f000 ff9e 	bl	800feb0 <vPortYield>
 800ef74:	e7c1      	b.n	800eefa <xTaskGenericCreate.part.5+0xf6>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef76:	0090      	lsls	r0, r2, #2
 800ef78:	f001 f824 	bl	800ffc4 <pvPortMalloc>
 800ef7c:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800ef7e:	d000      	beq.n	800ef82 <xTaskGenericCreate.part.5+0x17e>
 800ef80:	e74d      	b.n	800ee1e <xTaskGenericCreate.part.5+0x1a>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ef82:	2501      	movs	r5, #1
 800ef84:	426d      	negs	r5, r5
 800ef86:	e7b8      	b.n	800eefa <xTaskGenericCreate.part.5+0xf6>
 800ef88:	2501      	movs	r5, #1
				vPortFree( pxStack );
 800ef8a:	0038      	movs	r0, r7
 800ef8c:	f001 f896 	bl	80100bc <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ef90:	426d      	negs	r5, r5
 800ef92:	e7b2      	b.n	800eefa <xTaskGenericCreate.part.5+0xf6>
 800ef94:	2000205c 	.word	0x2000205c
 800ef98:	200020f8 	.word	0x200020f8
 800ef9c:	200020dc 	.word	0x200020dc

0800efa0 <vTaskSwitchContext.part.6>:
		xYieldPending = pdFALSE;
 800efa0:	2300      	movs	r3, #0
void vTaskSwitchContext( void )
 800efa2:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
 800efa4:	4d26      	ldr	r5, [pc, #152]	; (800f040 <vTaskSwitchContext.part.6+0xa0>)
 800efa6:	606b      	str	r3, [r5, #4]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800efa8:	f7f9 f91a 	bl	80081e0 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800efac:	68ab      	ldr	r3, [r5, #8]
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800efae:	4c25      	ldr	r4, [pc, #148]	; (800f044 <vTaskSwitchContext.part.6+0xa4>)
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800efb0:	4298      	cmp	r0, r3
 800efb2:	d904      	bls.n	800efbe <vTaskSwitchContext.part.6+0x1e>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800efb4:	6862      	ldr	r2, [r4, #4]
 800efb6:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800efb8:	1acb      	subs	r3, r1, r3
 800efba:	181b      	adds	r3, r3, r0
 800efbc:	6553      	str	r3, [r2, #84]	; 0x54
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800efbe:	6862      	ldr	r2, [r4, #4]
 800efc0:	6863      	ldr	r3, [r4, #4]
 800efc2:	6812      	ldr	r2, [r2, #0]
 800efc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				ulTaskSwitchedInTime = ulTotalRunTime;
 800efc6:	60a8      	str	r0, [r5, #8]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800efc8:	429a      	cmp	r2, r3
 800efca:	d804      	bhi.n	800efd6 <vTaskSwitchContext.part.6+0x36>
 800efcc:	6860      	ldr	r0, [r4, #4]
 800efce:	6861      	ldr	r1, [r4, #4]
 800efd0:	3134      	adds	r1, #52	; 0x34
 800efd2:	f7fe fc9f 	bl	800d914 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800efd6:	6863      	ldr	r3, [r4, #4]
 800efd8:	2214      	movs	r2, #20
 800efda:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800efdc:	491a      	ldr	r1, [pc, #104]	; (800f048 <vTaskSwitchContext.part.6+0xa8>)
 800efde:	f005 f80f 	bl	8014000 <memcmp>
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d004      	beq.n	800eff0 <vTaskSwitchContext.part.6+0x50>
 800efe6:	6860      	ldr	r0, [r4, #4]
 800efe8:	6861      	ldr	r1, [r4, #4]
 800efea:	3134      	adds	r1, #52	; 0x34
 800efec:	f7fe fc92 	bl	800d914 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800eff0:	6829      	ldr	r1, [r5, #0]
 800eff2:	4a16      	ldr	r2, [pc, #88]	; (800f04c <vTaskSwitchContext.part.6+0xac>)
 800eff4:	e006      	b.n	800f004 <vTaskSwitchContext.part.6+0x64>
 800eff6:	682b      	ldr	r3, [r5, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d018      	beq.n	800f02e <vTaskSwitchContext.part.6+0x8e>
 800effc:	682b      	ldr	r3, [r5, #0]
 800effe:	3b01      	subs	r3, #1
 800f000:	602b      	str	r3, [r5, #0]
 800f002:	6829      	ldr	r1, [r5, #0]
 800f004:	008b      	lsls	r3, r1, #2
 800f006:	185b      	adds	r3, r3, r1
 800f008:	009b      	lsls	r3, r3, #2
 800f00a:	58d3      	ldr	r3, [r2, r3]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d0f2      	beq.n	800eff6 <vTaskSwitchContext.part.6+0x56>
 800f010:	6828      	ldr	r0, [r5, #0]
 800f012:	0083      	lsls	r3, r0, #2
 800f014:	181b      	adds	r3, r3, r0
 800f016:	009b      	lsls	r3, r3, #2
 800f018:	18d5      	adds	r5, r2, r3
 800f01a:	6869      	ldr	r1, [r5, #4]
 800f01c:	3308      	adds	r3, #8
 800f01e:	6849      	ldr	r1, [r1, #4]
 800f020:	18d3      	adds	r3, r2, r3
 800f022:	6069      	str	r1, [r5, #4]
 800f024:	4299      	cmp	r1, r3
 800f026:	d004      	beq.n	800f032 <vTaskSwitchContext.part.6+0x92>
 800f028:	68cb      	ldr	r3, [r1, #12]
 800f02a:	6063      	str	r3, [r4, #4]
}
 800f02c:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f02e:	b672      	cpsid	i
 800f030:	e7fe      	b.n	800f030 <vTaskSwitchContext.part.6+0x90>
 800f032:	2314      	movs	r3, #20
 800f034:	4343      	muls	r3, r0
 800f036:	6849      	ldr	r1, [r1, #4]
 800f038:	18d2      	adds	r2, r2, r3
 800f03a:	6051      	str	r1, [r2, #4]
 800f03c:	e7f4      	b.n	800f028 <vTaskSwitchContext.part.6+0x88>
 800f03e:	46c0      	nop			; (mov r8, r8)
 800f040:	200020dc 	.word	0x200020dc
 800f044:	2000205c 	.word	0x2000205c
 800f048:	08018f58 	.word	0x08018f58
 800f04c:	200020f8 	.word	0x200020f8

0800f050 <xTaskGenericCreate>:
{
 800f050:	b530      	push	{r4, r5, lr}
 800f052:	b085      	sub	sp, #20
 800f054:	9c08      	ldr	r4, [sp, #32]
	configASSERT( pxTaskCode );
 800f056:	2800      	cmp	r0, #0
 800f058:	d003      	beq.n	800f062 <xTaskGenericCreate+0x12>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800f05a:	2c06      	cmp	r4, #6
 800f05c:	d903      	bls.n	800f066 <xTaskGenericCreate+0x16>
 800f05e:	b672      	cpsid	i
 800f060:	e7fe      	b.n	800f060 <xTaskGenericCreate+0x10>
	configASSERT( pxTaskCode );
 800f062:	b672      	cpsid	i
 800f064:	e7fe      	b.n	800f064 <xTaskGenericCreate+0x14>
 800f066:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f068:	9400      	str	r4, [sp, #0]
 800f06a:	9502      	str	r5, [sp, #8]
 800f06c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f06e:	9501      	str	r5, [sp, #4]
 800f070:	f7ff fec8 	bl	800ee04 <xTaskGenericCreate.part.5>
}
 800f074:	b005      	add	sp, #20
 800f076:	bd30      	pop	{r4, r5, pc}

0800f078 <uxTaskPriorityGet>:
	{
 800f078:	b510      	push	{r4, lr}
 800f07a:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f07c:	f000 ff24 	bl	800fec8 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f080:	2c00      	cmp	r4, #0
 800f082:	d101      	bne.n	800f088 <uxTaskPriorityGet+0x10>
 800f084:	4b03      	ldr	r3, [pc, #12]	; (800f094 <uxTaskPriorityGet+0x1c>)
 800f086:	685c      	ldr	r4, [r3, #4]
			uxReturn = pxTCB->uxPriority;
 800f088:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f08a:	f000 ff29 	bl	800fee0 <vPortExitCritical>
	}
 800f08e:	0020      	movs	r0, r4
 800f090:	bd10      	pop	{r4, pc}
 800f092:	46c0      	nop			; (mov r8, r8)
 800f094:	2000205c 	.word	0x2000205c

0800f098 <vTaskPrioritySet>:
	{
 800f098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f09a:	0004      	movs	r4, r0
 800f09c:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800f09e:	2906      	cmp	r1, #6
 800f0a0:	d901      	bls.n	800f0a6 <vTaskPrioritySet+0xe>
 800f0a2:	b672      	cpsid	i
 800f0a4:	e7fe      	b.n	800f0a4 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800f0a6:	f000 ff0f 	bl	800fec8 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f0aa:	2c00      	cmp	r4, #0
 800f0ac:	d101      	bne.n	800f0b2 <vTaskPrioritySet+0x1a>
 800f0ae:	4b20      	ldr	r3, [pc, #128]	; (800f130 <vTaskPrioritySet+0x98>)
 800f0b0:	685c      	ldr	r4, [r3, #4]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f0b2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f0b4:	4295      	cmp	r5, r2
 800f0b6:	d01f      	beq.n	800f0f8 <vTaskPrioritySet+0x60>
					if( pxTCB != pxCurrentTCB )
 800f0b8:	4b1d      	ldr	r3, [pc, #116]	; (800f130 <vTaskPrioritySet+0x98>)
				if( uxNewPriority > uxCurrentBasePriority )
 800f0ba:	d931      	bls.n	800f120 <vTaskPrioritySet+0x88>
					if( pxTCB != pxCurrentTCB )
 800f0bc:	6859      	ldr	r1, [r3, #4]
 800f0be:	42a1      	cmp	r1, r4
 800f0c0:	d033      	beq.n	800f12a <vTaskPrioritySet+0x92>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f0c2:	2600      	movs	r6, #0
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c8:	429d      	cmp	r5, r3
 800f0ca:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f0cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f0ce:	428a      	cmp	r2, r1
 800f0d0:	d100      	bne.n	800f0d4 <vTaskPrioritySet+0x3c>
						pxTCB->uxPriority = uxNewPriority;
 800f0d2:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f0d4:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800f0d6:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	db02      	blt.n	800f0e2 <vTaskPrioritySet+0x4a>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0dc:	2207      	movs	r2, #7
 800f0de:	1b55      	subs	r5, r2, r5
 800f0e0:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f0e2:	2314      	movs	r3, #20
 800f0e4:	434b      	muls	r3, r1
 800f0e6:	4d13      	ldr	r5, [pc, #76]	; (800f134 <vTaskPrioritySet+0x9c>)
 800f0e8:	6962      	ldr	r2, [r4, #20]
 800f0ea:	18eb      	adds	r3, r5, r3
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d006      	beq.n	800f0fe <vTaskPrioritySet+0x66>
				if( xYieldRequired == pdTRUE )
 800f0f0:	2e01      	cmp	r6, #1
 800f0f2:	d101      	bne.n	800f0f8 <vTaskPrioritySet+0x60>
					taskYIELD_IF_USING_PREEMPTION();
 800f0f4:	f000 fedc 	bl	800feb0 <vPortYield>
		taskEXIT_CRITICAL();
 800f0f8:	f000 fef2 	bl	800fee0 <vPortExitCritical>
	}
 800f0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f0fe:	1d27      	adds	r7, r4, #4
 800f100:	0038      	movs	r0, r7
 800f102:	f7ff fa8b 	bl	800e61c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f106:	4a0c      	ldr	r2, [pc, #48]	; (800f138 <vTaskPrioritySet+0xa0>)
 800f108:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f10a:	6811      	ldr	r1, [r2, #0]
 800f10c:	428b      	cmp	r3, r1
 800f10e:	d900      	bls.n	800f112 <vTaskPrioritySet+0x7a>
 800f110:	6013      	str	r3, [r2, #0]
 800f112:	2014      	movs	r0, #20
 800f114:	4358      	muls	r0, r3
 800f116:	0039      	movs	r1, r7
 800f118:	1828      	adds	r0, r5, r0
 800f11a:	f7ff fa5b 	bl	800e5d4 <vListInsertEnd>
 800f11e:	e7e7      	b.n	800f0f0 <vTaskPrioritySet+0x58>
				else if( pxTCB == pxCurrentTCB )
 800f120:	685e      	ldr	r6, [r3, #4]
 800f122:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f124:	4273      	negs	r3, r6
 800f126:	415e      	adcs	r6, r3
 800f128:	e7d0      	b.n	800f0cc <vTaskPrioritySet+0x34>
	BaseType_t xYieldRequired = pdFALSE;
 800f12a:	2600      	movs	r6, #0
 800f12c:	e7ce      	b.n	800f0cc <vTaskPrioritySet+0x34>
 800f12e:	46c0      	nop			; (mov r8, r8)
 800f130:	2000205c 	.word	0x2000205c
 800f134:	200020f8 	.word	0x200020f8
 800f138:	200020dc 	.word	0x200020dc

0800f13c <vTaskStartScheduler>:
{
 800f13c:	b510      	push	{r4, lr}
 800f13e:	2400      	movs	r4, #0
 800f140:	b084      	sub	sp, #16
 800f142:	9402      	str	r4, [sp, #8]
 800f144:	9401      	str	r4, [sp, #4]
 800f146:	9400      	str	r4, [sp, #0]
 800f148:	2300      	movs	r3, #0
 800f14a:	22a0      	movs	r2, #160	; 0xa0
 800f14c:	490b      	ldr	r1, [pc, #44]	; (800f17c <vTaskStartScheduler+0x40>)
 800f14e:	480c      	ldr	r0, [pc, #48]	; (800f180 <vTaskStartScheduler+0x44>)
 800f150:	f7ff fe58 	bl	800ee04 <xTaskGenericCreate.part.5>
		if( xReturn == pdPASS )
 800f154:	2801      	cmp	r0, #1
 800f156:	d003      	beq.n	800f160 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800f158:	2800      	cmp	r0, #0
 800f15a:	d10d      	bne.n	800f178 <vTaskStartScheduler+0x3c>
 800f15c:	b672      	cpsid	i
 800f15e:	e7fe      	b.n	800f15e <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800f160:	f000 fcc0 	bl	800fae4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f164:	2801      	cmp	r0, #1
 800f166:	d1f7      	bne.n	800f158 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f168:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f16a:	4b06      	ldr	r3, [pc, #24]	; (800f184 <vTaskStartScheduler+0x48>)
 800f16c:	6798      	str	r0, [r3, #120]	; 0x78
		xTickCount = ( TickType_t ) 0U;
 800f16e:	609c      	str	r4, [r3, #8]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f170:	f7f9 f826 	bl	80081c0 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f174:	f000 fe72 	bl	800fe5c <xPortStartScheduler>
}
 800f178:	b004      	add	sp, #16
 800f17a:	bd10      	pop	{r4, pc}
 800f17c:	0801bf1c 	.word	0x0801bf1c
 800f180:	0800f3cd 	.word	0x0800f3cd
 800f184:	2000205c 	.word	0x2000205c

0800f188 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f188:	4a02      	ldr	r2, [pc, #8]	; (800f194 <vTaskSuspendAll+0xc>)
 800f18a:	6913      	ldr	r3, [r2, #16]
 800f18c:	3301      	adds	r3, #1
 800f18e:	6113      	str	r3, [r2, #16]
}
 800f190:	4770      	bx	lr
 800f192:	46c0      	nop			; (mov r8, r8)
 800f194:	200020dc 	.word	0x200020dc

0800f198 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f198:	4b01      	ldr	r3, [pc, #4]	; (800f1a0 <xTaskGetTickCount+0x8>)
 800f19a:	6898      	ldr	r0, [r3, #8]
}
 800f19c:	4770      	bx	lr
 800f19e:	46c0      	nop			; (mov r8, r8)
 800f1a0:	2000205c 	.word	0x2000205c

0800f1a4 <xTaskGetTickCountFromISR>:
 800f1a4:	4b01      	ldr	r3, [pc, #4]	; (800f1ac <xTaskGetTickCountFromISR+0x8>)
 800f1a6:	6898      	ldr	r0, [r3, #8]
 800f1a8:	4770      	bx	lr
 800f1aa:	46c0      	nop			; (mov r8, r8)
 800f1ac:	2000205c 	.word	0x2000205c

0800f1b0 <xTaskIncrementTick>:
{
 800f1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b2:	4645      	mov	r5, r8
 800f1b4:	46de      	mov	lr, fp
 800f1b6:	4657      	mov	r7, sl
 800f1b8:	464e      	mov	r6, r9
 800f1ba:	b5e0      	push	{r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1bc:	4d3e      	ldr	r5, [pc, #248]	; (800f2b8 <xTaskIncrementTick+0x108>)
 800f1be:	692b      	ldr	r3, [r5, #16]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d119      	bne.n	800f1f8 <xTaskIncrementTick+0x48>
		++xTickCount;
 800f1c4:	4c3d      	ldr	r4, [pc, #244]	; (800f2bc <xTaskIncrementTick+0x10c>)
 800f1c6:	68a3      	ldr	r3, [r4, #8]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	60a3      	str	r3, [r4, #8]
			const TickType_t xConstTickCount = xTickCount;
 800f1cc:	68a3      	ldr	r3, [r4, #8]
 800f1ce:	469a      	mov	sl, r3
			if( xConstTickCount == ( TickType_t ) 0U )
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d020      	beq.n	800f216 <xTaskIncrementTick+0x66>
 800f1d4:	4f3a      	ldr	r7, [pc, #232]	; (800f2c0 <xTaskIncrementTick+0x110>)
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f1d6:	683b      	ldr	r3, [r7, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f1d8:	2600      	movs	r6, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f1da:	4553      	cmp	r3, sl
 800f1dc:	d921      	bls.n	800f222 <xTaskIncrementTick+0x72>
 800f1de:	4b39      	ldr	r3, [pc, #228]	; (800f2c4 <xTaskIncrementTick+0x114>)
 800f1e0:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f1e2:	6863      	ldr	r3, [r4, #4]
 800f1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1e6:	0093      	lsls	r3, r2, #2
 800f1e8:	189b      	adds	r3, r3, r2
 800f1ea:	464a      	mov	r2, r9
 800f1ec:	009b      	lsls	r3, r3, #2
 800f1ee:	58d3      	ldr	r3, [r2, r3]
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d905      	bls.n	800f200 <xTaskIncrementTick+0x50>
				xSwitchRequired = pdTRUE;
 800f1f4:	2601      	movs	r6, #1
 800f1f6:	e003      	b.n	800f200 <xTaskIncrementTick+0x50>
BaseType_t xSwitchRequired = pdFALSE;
 800f1f8:	2600      	movs	r6, #0
		++uxPendedTicks;
 800f1fa:	69ab      	ldr	r3, [r5, #24]
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	61ab      	str	r3, [r5, #24]
		if( xYieldPending != pdFALSE )
 800f200:	686b      	ldr	r3, [r5, #4]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d000      	beq.n	800f208 <xTaskIncrementTick+0x58>
			xSwitchRequired = pdTRUE;
 800f206:	2601      	movs	r6, #1
}
 800f208:	0030      	movs	r0, r6
 800f20a:	bc3c      	pop	{r2, r3, r4, r5}
 800f20c:	4690      	mov	r8, r2
 800f20e:	4699      	mov	r9, r3
 800f210:	46a2      	mov	sl, r4
 800f212:	46ab      	mov	fp, r5
 800f214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				taskSWITCH_DELAYED_LISTS();
 800f216:	6823      	ldr	r3, [r4, #0]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d039      	beq.n	800f292 <xTaskIncrementTick+0xe2>
 800f21e:	b672      	cpsid	i
 800f220:	e7fe      	b.n	800f220 <xTaskIncrementTick+0x70>
 800f222:	4b28      	ldr	r3, [pc, #160]	; (800f2c4 <xTaskIncrementTick+0x114>)
 800f224:	4699      	mov	r9, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f226:	6823      	ldr	r3, [r4, #0]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d02c      	beq.n	800f288 <xTaskIncrementTick+0xd8>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f22e:	6823      	ldr	r3, [r4, #0]
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	68db      	ldr	r3, [r3, #12]
 800f234:	4698      	mov	r8, r3
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f236:	685b      	ldr	r3, [r3, #4]
						if( xConstTickCount < xItemValue )
 800f238:	459a      	cmp	sl, r3
 800f23a:	d328      	bcc.n	800f28e <xTaskIncrementTick+0xde>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f23c:	2304      	movs	r3, #4
 800f23e:	4443      	add	r3, r8
 800f240:	0018      	movs	r0, r3
 800f242:	469b      	mov	fp, r3
 800f244:	f7ff f9ea 	bl	800e61c <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f248:	4643      	mov	r3, r8
 800f24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d003      	beq.n	800f258 <xTaskIncrementTick+0xa8>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f250:	4640      	mov	r0, r8
 800f252:	3018      	adds	r0, #24
 800f254:	f7ff f9e2 	bl	800e61c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f258:	4643      	mov	r3, r8
 800f25a:	682a      	ldr	r2, [r5, #0]
 800f25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f25e:	4293      	cmp	r3, r2
 800f260:	d900      	bls.n	800f264 <xTaskIncrementTick+0xb4>
 800f262:	602b      	str	r3, [r5, #0]
 800f264:	0098      	lsls	r0, r3, #2
 800f266:	18c0      	adds	r0, r0, r3
 800f268:	0080      	lsls	r0, r0, #2
 800f26a:	4448      	add	r0, r9
 800f26c:	4659      	mov	r1, fp
 800f26e:	f7ff f9b1 	bl	800e5d4 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f272:	4642      	mov	r2, r8
 800f274:	6863      	ldr	r3, [r4, #4]
 800f276:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d3d3      	bcc.n	800f226 <xTaskIncrementTick+0x76>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f27e:	6823      	ldr	r3, [r4, #0]
								xSwitchRequired = pdTRUE;
 800f280:	2601      	movs	r6, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1d2      	bne.n	800f22e <xTaskIncrementTick+0x7e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800f288:	3b01      	subs	r3, #1
 800f28a:	603b      	str	r3, [r7, #0]
						break;
 800f28c:	e7a9      	b.n	800f1e2 <xTaskIncrementTick+0x32>
							xNextTaskUnblockTime = xItemValue;
 800f28e:	603b      	str	r3, [r7, #0]
							break;
 800f290:	e7a7      	b.n	800f1e2 <xTaskIncrementTick+0x32>
				taskSWITCH_DELAYED_LISTS();
 800f292:	6823      	ldr	r3, [r4, #0]
 800f294:	68e2      	ldr	r2, [r4, #12]
 800f296:	6022      	str	r2, [r4, #0]
 800f298:	60e3      	str	r3, [r4, #12]
 800f29a:	696b      	ldr	r3, [r5, #20]
 800f29c:	3301      	adds	r3, #1
 800f29e:	616b      	str	r3, [r5, #20]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2a0:	6823      	ldr	r3, [r4, #0]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d103      	bne.n	800f2b0 <xTaskIncrementTick+0x100>
		xNextTaskUnblockTime = portMAX_DELAY;
 800f2a8:	4f05      	ldr	r7, [pc, #20]	; (800f2c0 <xTaskIncrementTick+0x110>)
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	603b      	str	r3, [r7, #0]
 800f2ae:	e792      	b.n	800f1d6 <xTaskIncrementTick+0x26>
 800f2b0:	f7ff fd7e 	bl	800edb0 <prvResetNextTaskUnblockTime.part.2>
 800f2b4:	e78e      	b.n	800f1d4 <xTaskIncrementTick+0x24>
 800f2b6:	46c0      	nop			; (mov r8, r8)
 800f2b8:	200020dc 	.word	0x200020dc
 800f2bc:	2000205c 	.word	0x2000205c
 800f2c0:	200000c0 	.word	0x200000c0
 800f2c4:	200020f8 	.word	0x200020f8

0800f2c8 <xTaskResumeAll>:
{
 800f2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ca:	46ce      	mov	lr, r9
 800f2cc:	4647      	mov	r7, r8
	configASSERT( uxSchedulerSuspended );
 800f2ce:	4c2b      	ldr	r4, [pc, #172]	; (800f37c <xTaskResumeAll+0xb4>)
{
 800f2d0:	b580      	push	{r7, lr}
	configASSERT( uxSchedulerSuspended );
 800f2d2:	6923      	ldr	r3, [r4, #16]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d101      	bne.n	800f2dc <xTaskResumeAll+0x14>
 800f2d8:	b672      	cpsid	i
 800f2da:	e7fe      	b.n	800f2da <xTaskResumeAll+0x12>
	taskENTER_CRITICAL();
 800f2dc:	f000 fdf4 	bl	800fec8 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f2e0:	6923      	ldr	r3, [r4, #16]
 800f2e2:	3b01      	subs	r3, #1
 800f2e4:	6123      	str	r3, [r4, #16]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2e6:	6923      	ldr	r3, [r4, #16]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d12d      	bne.n	800f348 <xTaskResumeAll+0x80>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f2ec:	4d24      	ldr	r5, [pc, #144]	; (800f380 <xTaskResumeAll+0xb8>)
 800f2ee:	692b      	ldr	r3, [r5, #16]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d029      	beq.n	800f348 <xTaskResumeAll+0x80>
					prvAddTaskToReadyList( pxTCB );
 800f2f4:	4b23      	ldr	r3, [pc, #140]	; (800f384 <xTaskResumeAll+0xbc>)
 800f2f6:	4699      	mov	r9, r3
						xYieldPending = pdTRUE;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	4698      	mov	r8, r3
 800f2fc:	e01a      	b.n	800f334 <xTaskResumeAll+0x6c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f2fe:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800f300:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f302:	0030      	movs	r0, r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f304:	1d37      	adds	r7, r6, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f306:	3018      	adds	r0, #24
 800f308:	f7ff f988 	bl	800e61c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f30c:	0038      	movs	r0, r7
 800f30e:	f7ff f985 	bl	800e61c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f312:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f314:	6822      	ldr	r2, [r4, #0]
 800f316:	4293      	cmp	r3, r2
 800f318:	d900      	bls.n	800f31c <xTaskResumeAll+0x54>
 800f31a:	6023      	str	r3, [r4, #0]
 800f31c:	0098      	lsls	r0, r3, #2
 800f31e:	18c0      	adds	r0, r0, r3
 800f320:	0080      	lsls	r0, r0, #2
 800f322:	4448      	add	r0, r9
 800f324:	0039      	movs	r1, r7
 800f326:	f7ff f955 	bl	800e5d4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f32a:	686b      	ldr	r3, [r5, #4]
 800f32c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800f32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f330:	429a      	cmp	r2, r3
 800f332:	d211      	bcs.n	800f358 <xTaskResumeAll+0x90>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f334:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f336:	2b00      	cmp	r3, #0
 800f338:	d1e1      	bne.n	800f2fe <xTaskResumeAll+0x36>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f33a:	69a3      	ldr	r3, [r4, #24]
							xYieldPending = pdTRUE;
 800f33c:	2501      	movs	r5, #1
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d110      	bne.n	800f364 <xTaskResumeAll+0x9c>
				if( xYieldPending == pdTRUE )
 800f342:	6864      	ldr	r4, [r4, #4]
 800f344:	2c01      	cmp	r4, #1
 800f346:	d00a      	beq.n	800f35e <xTaskResumeAll+0x96>
BaseType_t xAlreadyYielded = pdFALSE;
 800f348:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f34a:	f000 fdc9 	bl	800fee0 <vPortExitCritical>
}
 800f34e:	0020      	movs	r0, r4
 800f350:	bc0c      	pop	{r2, r3}
 800f352:	4690      	mov	r8, r2
 800f354:	4699      	mov	r9, r3
 800f356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 800f358:	4643      	mov	r3, r8
 800f35a:	6063      	str	r3, [r4, #4]
 800f35c:	e7ea      	b.n	800f334 <xTaskResumeAll+0x6c>
					taskYIELD_IF_USING_PREEMPTION();
 800f35e:	f000 fda7 	bl	800feb0 <vPortYield>
 800f362:	e7f2      	b.n	800f34a <xTaskResumeAll+0x82>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f364:	69a3      	ldr	r3, [r4, #24]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d0eb      	beq.n	800f342 <xTaskResumeAll+0x7a>
						if( xTaskIncrementTick() != pdFALSE )
 800f36a:	f7ff ff21 	bl	800f1b0 <xTaskIncrementTick>
 800f36e:	2800      	cmp	r0, #0
 800f370:	d000      	beq.n	800f374 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
 800f372:	6065      	str	r5, [r4, #4]
						--uxPendedTicks;
 800f374:	69a3      	ldr	r3, [r4, #24]
 800f376:	3b01      	subs	r3, #1
 800f378:	61a3      	str	r3, [r4, #24]
 800f37a:	e7f3      	b.n	800f364 <xTaskResumeAll+0x9c>
 800f37c:	200020dc 	.word	0x200020dc
 800f380:	2000205c 	.word	0x2000205c
 800f384:	200020f8 	.word	0x200020f8

0800f388 <vTaskDelay>:
	{
 800f388:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f38a:	2800      	cmp	r0, #0
 800f38c:	d016      	beq.n	800f3bc <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800f38e:	4b0d      	ldr	r3, [pc, #52]	; (800f3c4 <vTaskDelay+0x3c>)
 800f390:	691a      	ldr	r2, [r3, #16]
 800f392:	2a00      	cmp	r2, #0
 800f394:	d001      	beq.n	800f39a <vTaskDelay+0x12>
 800f396:	b672      	cpsid	i
 800f398:	e7fe      	b.n	800f398 <vTaskDelay+0x10>
	++uxSchedulerSuspended;
 800f39a:	691a      	ldr	r2, [r3, #16]
 800f39c:	3201      	adds	r2, #1
 800f39e:	611a      	str	r2, [r3, #16]
				xTimeToWake = xTickCount + xTicksToDelay;
 800f3a0:	4b09      	ldr	r3, [pc, #36]	; (800f3c8 <vTaskDelay+0x40>)
 800f3a2:	689c      	ldr	r4, [r3, #8]
 800f3a4:	1824      	adds	r4, r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f3a6:	6858      	ldr	r0, [r3, #4]
 800f3a8:	3004      	adds	r0, #4
 800f3aa:	f7ff f937 	bl	800e61c <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f3ae:	0020      	movs	r0, r4
 800f3b0:	f7ff fd0a 	bl	800edc8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f3b4:	f7ff ff88 	bl	800f2c8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	d101      	bne.n	800f3c0 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800f3bc:	f000 fd78 	bl	800feb0 <vPortYield>
	}
 800f3c0:	bd10      	pop	{r4, pc}
 800f3c2:	46c0      	nop			; (mov r8, r8)
 800f3c4:	200020dc 	.word	0x200020dc
 800f3c8:	2000205c 	.word	0x2000205c

0800f3cc <prvIdleTask>:
{
 800f3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ce:	4e15      	ldr	r6, [pc, #84]	; (800f424 <prvIdleTask+0x58>)
 800f3d0:	4c15      	ldr	r4, [pc, #84]	; (800f428 <prvIdleTask+0x5c>)
 800f3d2:	4f16      	ldr	r7, [pc, #88]	; (800f42c <prvIdleTask+0x60>)
 800f3d4:	e007      	b.n	800f3e6 <prvIdleTask+0x1a>
	++uxSchedulerSuspended;
 800f3d6:	6923      	ldr	r3, [r4, #16]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f3d8:	6d35      	ldr	r5, [r6, #80]	; 0x50
	++uxSchedulerSuspended;
 800f3da:	3301      	adds	r3, #1
 800f3dc:	6123      	str	r3, [r4, #16]
			( void ) xTaskResumeAll();
 800f3de:	f7ff ff73 	bl	800f2c8 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800f3e2:	2d00      	cmp	r5, #0
 800f3e4:	d108      	bne.n	800f3f8 <prvIdleTask+0x2c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f3e6:	68e3      	ldr	r3, [r4, #12]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d1f4      	bne.n	800f3d6 <prvIdleTask+0xa>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	d9f9      	bls.n	800f3e6 <prvIdleTask+0x1a>
				taskYIELD();
 800f3f2:	f000 fd5d 	bl	800feb0 <vPortYield>
 800f3f6:	e7f6      	b.n	800f3e6 <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
 800f3f8:	f000 fd66 	bl	800fec8 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f3fc:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800f3fe:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f400:	1d28      	adds	r0, r5, #4
 800f402:	f7ff f90b 	bl	800e61c <uxListRemove>
					--uxCurrentNumberOfTasks;
 800f406:	6933      	ldr	r3, [r6, #16]
 800f408:	3b01      	subs	r3, #1
 800f40a:	6133      	str	r3, [r6, #16]
					--uxTasksDeleted;
 800f40c:	68e3      	ldr	r3, [r4, #12]
 800f40e:	3b01      	subs	r3, #1
 800f410:	60e3      	str	r3, [r4, #12]
				taskEXIT_CRITICAL();
 800f412:	f000 fd65 	bl	800fee0 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800f416:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f418:	f000 fe50 	bl	80100bc <vPortFree>
		vPortFree( pxTCB );
 800f41c:	0028      	movs	r0, r5
 800f41e:	f000 fe4d 	bl	80100bc <vPortFree>
 800f422:	e7e0      	b.n	800f3e6 <prvIdleTask+0x1a>
 800f424:	2000205c 	.word	0x2000205c
 800f428:	200020dc 	.word	0x200020dc
 800f42c:	200020f8 	.word	0x200020f8

0800f430 <uxTaskGetSystemState>:
	{
 800f430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f432:	4647      	mov	r7, r8
 800f434:	46ce      	mov	lr, r9
 800f436:	4690      	mov	r8, r2
	++uxSchedulerSuspended;
 800f438:	4a33      	ldr	r2, [pc, #204]	; (800f508 <uxTaskGetSystemState+0xd8>)
	{
 800f43a:	b580      	push	{r7, lr}
	++uxSchedulerSuspended;
 800f43c:	6913      	ldr	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f43e:	4f33      	ldr	r7, [pc, #204]	; (800f50c <uxTaskGetSystemState+0xdc>)
	++uxSchedulerSuspended;
 800f440:	3301      	adds	r3, #1
 800f442:	6113      	str	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f444:	693b      	ldr	r3, [r7, #16]
	{
 800f446:	0006      	movs	r6, r0
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f448:	2500      	movs	r5, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f44a:	428b      	cmp	r3, r1
 800f44c:	d82c      	bhi.n	800f4a8 <uxTaskGetSystemState+0x78>
 800f44e:	238c      	movs	r3, #140	; 0x8c
 800f450:	425b      	negs	r3, r3
 800f452:	4699      	mov	r9, r3
 800f454:	4c2e      	ldr	r4, [pc, #184]	; (800f510 <uxTaskGetSystemState+0xe0>)
 800f456:	2300      	movs	r3, #0
 800f458:	44a1      	add	r9, r4
 800f45a:	e002      	b.n	800f462 <uxTaskGetSystemState+0x32>
 800f45c:	3c14      	subs	r4, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f45e:	454c      	cmp	r4, r9
 800f460:	d00d      	beq.n	800f47e <uxTaskGetSystemState+0x4e>
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f462:	6822      	ldr	r2, [r4, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f464:	18f0      	adds	r0, r6, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f466:	2a00      	cmp	r2, #0
 800f468:	d0f8      	beq.n	800f45c <uxTaskGetSystemState+0x2c>
 800f46a:	0021      	movs	r1, r4
 800f46c:	2201      	movs	r2, #1
 800f46e:	f7ff fc4b 	bl	800ed08 <prvListTaskWithinSingleList.part.1>
 800f472:	182d      	adds	r5, r5, r0
 800f474:	016b      	lsls	r3, r5, #5
 800f476:	3c14      	subs	r4, #20
 800f478:	18f0      	adds	r0, r6, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f47a:	454c      	cmp	r4, r9
 800f47c:	d1f1      	bne.n	800f462 <uxTaskGetSystemState+0x32>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f47e:	6839      	ldr	r1, [r7, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f480:	680b      	ldr	r3, [r1, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d121      	bne.n	800f4ca <uxTaskGetSystemState+0x9a>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f486:	68f9      	ldr	r1, [r7, #12]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f488:	680b      	ldr	r3, [r1, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d127      	bne.n	800f4de <uxTaskGetSystemState+0xae>
 800f48e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f490:	2b00      	cmp	r3, #0
 800f492:	d12d      	bne.n	800f4f0 <uxTaskGetSystemState+0xc0>
 800f494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f496:	2b00      	cmp	r3, #0
 800f498:	d10d      	bne.n	800f4b6 <uxTaskGetSystemState+0x86>
					if( pulTotalRunTime != NULL )
 800f49a:	4643      	mov	r3, r8
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d003      	beq.n	800f4a8 <uxTaskGetSystemState+0x78>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f4a0:	f7f8 fe9e 	bl	80081e0 <ulMainGetRunTimeCounterValue>
 800f4a4:	4643      	mov	r3, r8
 800f4a6:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800f4a8:	f7ff ff0e 	bl	800f2c8 <xTaskResumeAll>
	}
 800f4ac:	0028      	movs	r0, r5
 800f4ae:	bc0c      	pop	{r2, r3}
 800f4b0:	4690      	mov	r8, r2
 800f4b2:	4699      	mov	r9, r3
 800f4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4b6:	0039      	movs	r1, r7
 800f4b8:	2203      	movs	r2, #3
 800f4ba:	3164      	adds	r1, #100	; 0x64
 800f4bc:	f7ff fc24 	bl	800ed08 <prvListTaskWithinSingleList.part.1>
					if( pulTotalRunTime != NULL )
 800f4c0:	4643      	mov	r3, r8
 800f4c2:	182d      	adds	r5, r5, r0
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d1eb      	bne.n	800f4a0 <uxTaskGetSystemState+0x70>
 800f4c8:	e7ee      	b.n	800f4a8 <uxTaskGetSystemState+0x78>
 800f4ca:	2202      	movs	r2, #2
 800f4cc:	f7ff fc1c 	bl	800ed08 <prvListTaskWithinSingleList.part.1>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f4d0:	68f9      	ldr	r1, [r7, #12]
 800f4d2:	182d      	adds	r5, r5, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f4d4:	680b      	ldr	r3, [r1, #0]
 800f4d6:	0168      	lsls	r0, r5, #5
 800f4d8:	1830      	adds	r0, r6, r0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d0d7      	beq.n	800f48e <uxTaskGetSystemState+0x5e>
 800f4de:	2202      	movs	r2, #2
 800f4e0:	f7ff fc12 	bl	800ed08 <prvListTaskWithinSingleList.part.1>
 800f4e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4e6:	182d      	adds	r5, r5, r0
 800f4e8:	0168      	lsls	r0, r5, #5
 800f4ea:	1830      	adds	r0, r6, r0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d0d1      	beq.n	800f494 <uxTaskGetSystemState+0x64>
 800f4f0:	0039      	movs	r1, r7
 800f4f2:	2204      	movs	r2, #4
 800f4f4:	3150      	adds	r1, #80	; 0x50
 800f4f6:	f7ff fc07 	bl	800ed08 <prvListTaskWithinSingleList.part.1>
 800f4fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4fc:	182d      	adds	r5, r5, r0
 800f4fe:	0168      	lsls	r0, r5, #5
 800f500:	1830      	adds	r0, r6, r0
 800f502:	2b00      	cmp	r3, #0
 800f504:	d0c9      	beq.n	800f49a <uxTaskGetSystemState+0x6a>
 800f506:	e7d6      	b.n	800f4b6 <uxTaskGetSystemState+0x86>
 800f508:	200020dc 	.word	0x200020dc
 800f50c:	2000205c 	.word	0x2000205c
 800f510:	20002170 	.word	0x20002170

0800f514 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f514:	4b05      	ldr	r3, [pc, #20]	; (800f52c <vTaskSwitchContext+0x18>)
{
 800f516:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f518:	691a      	ldr	r2, [r3, #16]
 800f51a:	2a00      	cmp	r2, #0
 800f51c:	d002      	beq.n	800f524 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800f51e:	2201      	movs	r2, #1
 800f520:	605a      	str	r2, [r3, #4]
}
 800f522:	bd10      	pop	{r4, pc}
 800f524:	f7ff fd3c 	bl	800efa0 <vTaskSwitchContext.part.6>
 800f528:	e7fb      	b.n	800f522 <vTaskSwitchContext+0xe>
 800f52a:	46c0      	nop			; (mov r8, r8)
 800f52c:	200020dc 	.word	0x200020dc

0800f530 <vTaskPlaceOnEventList>:
{
 800f530:	b570      	push	{r4, r5, r6, lr}
 800f532:	000d      	movs	r5, r1
	configASSERT( pxEventList );
 800f534:	2800      	cmp	r0, #0
 800f536:	d00f      	beq.n	800f558 <vTaskPlaceOnEventList+0x28>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f538:	4c0c      	ldr	r4, [pc, #48]	; (800f56c <vTaskPlaceOnEventList+0x3c>)
 800f53a:	6861      	ldr	r1, [r4, #4]
 800f53c:	3118      	adds	r1, #24
 800f53e:	f7ff f855 	bl	800e5ec <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f542:	6860      	ldr	r0, [r4, #4]
 800f544:	3004      	adds	r0, #4
 800f546:	f7ff f869 	bl	800e61c <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f54a:	1c6b      	adds	r3, r5, #1
 800f54c:	d006      	beq.n	800f55c <vTaskPlaceOnEventList+0x2c>
			xTimeToWake = xTickCount + xTicksToWait;
 800f54e:	68a0      	ldr	r0, [r4, #8]
 800f550:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f552:	f7ff fc39 	bl	800edc8 <prvAddCurrentTaskToDelayedList>
}
 800f556:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 800f558:	b672      	cpsid	i
 800f55a:	e7fe      	b.n	800f55a <vTaskPlaceOnEventList+0x2a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f55c:	0020      	movs	r0, r4
 800f55e:	6861      	ldr	r1, [r4, #4]
 800f560:	3064      	adds	r0, #100	; 0x64
 800f562:	3104      	adds	r1, #4
 800f564:	f7ff f836 	bl	800e5d4 <vListInsertEnd>
 800f568:	e7f5      	b.n	800f556 <vTaskPlaceOnEventList+0x26>
 800f56a:	46c0      	nop			; (mov r8, r8)
 800f56c:	2000205c 	.word	0x2000205c

0800f570 <vTaskPlaceOnEventListRestricted>:
	{
 800f570:	b570      	push	{r4, r5, r6, lr}
 800f572:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800f574:	2800      	cmp	r0, #0
 800f576:	d101      	bne.n	800f57c <vTaskPlaceOnEventListRestricted+0xc>
 800f578:	b672      	cpsid	i
 800f57a:	e7fe      	b.n	800f57a <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f57c:	4c06      	ldr	r4, [pc, #24]	; (800f598 <vTaskPlaceOnEventListRestricted+0x28>)
 800f57e:	6861      	ldr	r1, [r4, #4]
 800f580:	3118      	adds	r1, #24
 800f582:	f7ff f827 	bl	800e5d4 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f586:	6860      	ldr	r0, [r4, #4]
 800f588:	3004      	adds	r0, #4
 800f58a:	f7ff f847 	bl	800e61c <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f58e:	68a0      	ldr	r0, [r4, #8]
 800f590:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f592:	f7ff fc19 	bl	800edc8 <prvAddCurrentTaskToDelayedList>
	}
 800f596:	bd70      	pop	{r4, r5, r6, pc}
 800f598:	2000205c 	.word	0x2000205c

0800f59c <xTaskRemoveFromEventList>:
{
 800f59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f59e:	68c3      	ldr	r3, [r0, #12]
 800f5a0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800f5a2:	2c00      	cmp	r4, #0
 800f5a4:	d024      	beq.n	800f5f0 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f5a6:	0027      	movs	r7, r4
 800f5a8:	3718      	adds	r7, #24
 800f5aa:	0038      	movs	r0, r7
 800f5ac:	f7ff f836 	bl	800e61c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f5b0:	4d14      	ldr	r5, [pc, #80]	; (800f604 <xTaskRemoveFromEventList+0x68>)
 800f5b2:	692b      	ldr	r3, [r5, #16]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d11d      	bne.n	800f5f4 <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f5b8:	1d26      	adds	r6, r4, #4
 800f5ba:	0030      	movs	r0, r6
 800f5bc:	f7ff f82e 	bl	800e61c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f5c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f5c2:	682a      	ldr	r2, [r5, #0]
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d900      	bls.n	800f5ca <xTaskRemoveFromEventList+0x2e>
 800f5c8:	602b      	str	r3, [r5, #0]
 800f5ca:	0098      	lsls	r0, r3, #2
 800f5cc:	18c0      	adds	r0, r0, r3
 800f5ce:	4b0e      	ldr	r3, [pc, #56]	; (800f608 <xTaskRemoveFromEventList+0x6c>)
 800f5d0:	0080      	lsls	r0, r0, #2
 800f5d2:	0031      	movs	r1, r6
 800f5d4:	18c0      	adds	r0, r0, r3
 800f5d6:	f7fe fffd 	bl	800e5d4 <vListInsertEnd>
 800f5da:	4e0c      	ldr	r6, [pc, #48]	; (800f60c <xTaskRemoveFromEventList+0x70>)
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f5dc:	6873      	ldr	r3, [r6, #4]
 800f5de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800f5e2:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d902      	bls.n	800f5ee <xTaskRemoveFromEventList+0x52>
		xYieldPending = pdTRUE;
 800f5e8:	2301      	movs	r3, #1
		xReturn = pdTRUE;
 800f5ea:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800f5ec:	606b      	str	r3, [r5, #4]
}
 800f5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxUnblockedTCB );
 800f5f0:	b672      	cpsid	i
 800f5f2:	e7fe      	b.n	800f5f2 <xTaskRemoveFromEventList+0x56>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f5f4:	4e05      	ldr	r6, [pc, #20]	; (800f60c <xTaskRemoveFromEventList+0x70>)
 800f5f6:	0039      	movs	r1, r7
 800f5f8:	0030      	movs	r0, r6
 800f5fa:	303c      	adds	r0, #60	; 0x3c
 800f5fc:	f7fe ffea 	bl	800e5d4 <vListInsertEnd>
 800f600:	e7ec      	b.n	800f5dc <xTaskRemoveFromEventList+0x40>
 800f602:	46c0      	nop			; (mov r8, r8)
 800f604:	200020dc 	.word	0x200020dc
 800f608:	200020f8 	.word	0x200020f8
 800f60c:	2000205c 	.word	0x2000205c

0800f610 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800f610:	2800      	cmp	r0, #0
 800f612:	d006      	beq.n	800f622 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f614:	4b04      	ldr	r3, [pc, #16]	; (800f628 <vTaskSetTimeOutState+0x18>)
 800f616:	695b      	ldr	r3, [r3, #20]
 800f618:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f61a:	4b04      	ldr	r3, [pc, #16]	; (800f62c <vTaskSetTimeOutState+0x1c>)
 800f61c:	689b      	ldr	r3, [r3, #8]
 800f61e:	6043      	str	r3, [r0, #4]
}
 800f620:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800f622:	b672      	cpsid	i
 800f624:	e7fe      	b.n	800f624 <vTaskSetTimeOutState+0x14>
 800f626:	46c0      	nop			; (mov r8, r8)
 800f628:	200020dc 	.word	0x200020dc
 800f62c:	2000205c 	.word	0x2000205c

0800f630 <xTaskCheckForTimeOut>:
{
 800f630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f632:	0004      	movs	r4, r0
 800f634:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800f636:	2800      	cmp	r0, #0
 800f638:	d025      	beq.n	800f686 <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 800f63a:	2900      	cmp	r1, #0
 800f63c:	d021      	beq.n	800f682 <xTaskCheckForTimeOut+0x52>
	taskENTER_CRITICAL();
 800f63e:	f000 fc43 	bl	800fec8 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f642:	4f13      	ldr	r7, [pc, #76]	; (800f690 <xTaskCheckForTimeOut+0x60>)
			if( *pxTicksToWait == portMAX_DELAY )
 800f644:	6833      	ldr	r3, [r6, #0]
		const TickType_t xConstTickCount = xTickCount;
 800f646:	68b9      	ldr	r1, [r7, #8]
			if( *pxTicksToWait == portMAX_DELAY )
 800f648:	1c5a      	adds	r2, r3, #1
 800f64a:	d01e      	beq.n	800f68a <xTaskCheckForTimeOut+0x5a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f64c:	4a11      	ldr	r2, [pc, #68]	; (800f694 <xTaskCheckForTimeOut+0x64>)
 800f64e:	6825      	ldr	r5, [r4, #0]
 800f650:	6950      	ldr	r0, [r2, #20]
 800f652:	4694      	mov	ip, r2
 800f654:	6862      	ldr	r2, [r4, #4]
 800f656:	4285      	cmp	r5, r0
 800f658:	d002      	beq.n	800f660 <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
 800f65a:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f65c:	4291      	cmp	r1, r2
 800f65e:	d20c      	bcs.n	800f67a <xTaskCheckForTimeOut+0x4a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f660:	1a88      	subs	r0, r1, r2
			xReturn = pdTRUE;
 800f662:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f664:	4283      	cmp	r3, r0
 800f666:	d908      	bls.n	800f67a <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800f668:	1a5b      	subs	r3, r3, r1
 800f66a:	189b      	adds	r3, r3, r2
 800f66c:	6033      	str	r3, [r6, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f66e:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 800f670:	2500      	movs	r5, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f672:	695b      	ldr	r3, [r3, #20]
 800f674:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800f67a:	f000 fc31 	bl	800fee0 <vPortExitCritical>
}
 800f67e:	0028      	movs	r0, r5
 800f680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
 800f682:	b672      	cpsid	i
 800f684:	e7fe      	b.n	800f684 <xTaskCheckForTimeOut+0x54>
	configASSERT( pxTimeOut );
 800f686:	b672      	cpsid	i
 800f688:	e7fe      	b.n	800f688 <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
 800f68a:	2500      	movs	r5, #0
 800f68c:	e7f5      	b.n	800f67a <xTaskCheckForTimeOut+0x4a>
 800f68e:	46c0      	nop			; (mov r8, r8)
 800f690:	2000205c 	.word	0x2000205c
 800f694:	200020dc 	.word	0x200020dc

0800f698 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f698:	2201      	movs	r2, #1
 800f69a:	4b01      	ldr	r3, [pc, #4]	; (800f6a0 <vTaskMissedYield+0x8>)
 800f69c:	605a      	str	r2, [r3, #4]
}
 800f69e:	4770      	bx	lr
 800f6a0:	200020dc 	.word	0x200020dc

0800f6a4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f6a4:	4b05      	ldr	r3, [pc, #20]	; (800f6bc <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f6a6:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800f6a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d004      	beq.n	800f6b8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6ae:	4b04      	ldr	r3, [pc, #16]	; (800f6c0 <xTaskGetSchedulerState+0x1c>)
 800f6b0:	6918      	ldr	r0, [r3, #16]
				xReturn = taskSCHEDULER_SUSPENDED;
 800f6b2:	4243      	negs	r3, r0
 800f6b4:	4158      	adcs	r0, r3
 800f6b6:	0040      	lsls	r0, r0, #1
	}
 800f6b8:	4770      	bx	lr
 800f6ba:	46c0      	nop			; (mov r8, r8)
 800f6bc:	2000205c 	.word	0x2000205c
 800f6c0:	200020dc 	.word	0x200020dc

0800f6c4 <vTaskPriorityInherit>:
	{
 800f6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6c6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f6c8:	d018      	beq.n	800f6fc <vTaskPriorityInherit+0x38>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f6ca:	4d17      	ldr	r5, [pc, #92]	; (800f728 <vTaskPriorityInherit+0x64>)
 800f6cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f6ce:	686b      	ldr	r3, [r5, #4]
 800f6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d212      	bcs.n	800f6fc <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f6d6:	6983      	ldr	r3, [r0, #24]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	db04      	blt.n	800f6e6 <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6dc:	686b      	ldr	r3, [r5, #4]
 800f6de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f6e0:	2307      	movs	r3, #7
 800f6e2:	1a5b      	subs	r3, r3, r1
 800f6e4:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f6e6:	0093      	lsls	r3, r2, #2
 800f6e8:	189b      	adds	r3, r3, r2
 800f6ea:	4e10      	ldr	r6, [pc, #64]	; (800f72c <vTaskPriorityInherit+0x68>)
 800f6ec:	009b      	lsls	r3, r3, #2
 800f6ee:	6962      	ldr	r2, [r4, #20]
 800f6f0:	18f3      	adds	r3, r6, r3
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d003      	beq.n	800f6fe <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f6f6:	686b      	ldr	r3, [r5, #4]
 800f6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6fa:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800f6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f6fe:	1d27      	adds	r7, r4, #4
 800f700:	0038      	movs	r0, r7
 800f702:	f7fe ff8b 	bl	800e61c <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f706:	686b      	ldr	r3, [r5, #4]
					prvAddTaskToReadyList( pxTCB );
 800f708:	4a09      	ldr	r2, [pc, #36]	; (800f730 <vTaskPriorityInherit+0x6c>)
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f70c:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f70e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f710:	428b      	cmp	r3, r1
 800f712:	d900      	bls.n	800f716 <vTaskPriorityInherit+0x52>
 800f714:	6013      	str	r3, [r2, #0]
 800f716:	0098      	lsls	r0, r3, #2
 800f718:	18c0      	adds	r0, r0, r3
 800f71a:	0080      	lsls	r0, r0, #2
 800f71c:	1830      	adds	r0, r6, r0
 800f71e:	0039      	movs	r1, r7
 800f720:	f7fe ff58 	bl	800e5d4 <vListInsertEnd>
	}
 800f724:	e7ea      	b.n	800f6fc <vTaskPriorityInherit+0x38>
 800f726:	46c0      	nop			; (mov r8, r8)
 800f728:	2000205c 	.word	0x2000205c
 800f72c:	200020f8 	.word	0x200020f8
 800f730:	200020dc 	.word	0x200020dc

0800f734 <xTaskPriorityDisinherit>:
	{
 800f734:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800f736:	2800      	cmp	r0, #0
 800f738:	d005      	beq.n	800f746 <xTaskPriorityDisinherit+0x12>
			configASSERT( pxTCB == pxCurrentTCB );
 800f73a:	4b16      	ldr	r3, [pc, #88]	; (800f794 <xTaskPriorityDisinherit+0x60>)
 800f73c:	685c      	ldr	r4, [r3, #4]
 800f73e:	4284      	cmp	r4, r0
 800f740:	d003      	beq.n	800f74a <xTaskPriorityDisinherit+0x16>
 800f742:	b672      	cpsid	i
 800f744:	e7fe      	b.n	800f744 <xTaskPriorityDisinherit+0x10>
	BaseType_t xReturn = pdFALSE;
 800f746:	2000      	movs	r0, #0
	}
 800f748:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 800f74a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d101      	bne.n	800f754 <xTaskPriorityDisinherit+0x20>
 800f750:	b672      	cpsid	i
 800f752:	e7fe      	b.n	800f752 <xTaskPriorityDisinherit+0x1e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f754:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f756:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800f758:	3b01      	subs	r3, #1
 800f75a:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f75c:	428a      	cmp	r2, r1
 800f75e:	d0f2      	beq.n	800f746 <xTaskPriorityDisinherit+0x12>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f760:	2b00      	cmp	r3, #0
 800f762:	d1f0      	bne.n	800f746 <xTaskPriorityDisinherit+0x12>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f764:	1d25      	adds	r5, r4, #4
 800f766:	0028      	movs	r0, r5
 800f768:	f7fe ff58 	bl	800e61c <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f76c:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f76e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f770:	1ad2      	subs	r2, r2, r3
 800f772:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f774:	4a08      	ldr	r2, [pc, #32]	; (800f798 <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f776:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f778:	6811      	ldr	r1, [r2, #0]
 800f77a:	428b      	cmp	r3, r1
 800f77c:	d900      	bls.n	800f780 <xTaskPriorityDisinherit+0x4c>
 800f77e:	6013      	str	r3, [r2, #0]
 800f780:	2014      	movs	r0, #20
 800f782:	4358      	muls	r0, r3
 800f784:	4b05      	ldr	r3, [pc, #20]	; (800f79c <xTaskPriorityDisinherit+0x68>)
 800f786:	0029      	movs	r1, r5
 800f788:	18c0      	adds	r0, r0, r3
 800f78a:	f7fe ff23 	bl	800e5d4 <vListInsertEnd>
					xReturn = pdTRUE;
 800f78e:	2001      	movs	r0, #1
		return xReturn;
 800f790:	e7da      	b.n	800f748 <xTaskPriorityDisinherit+0x14>
 800f792:	46c0      	nop			; (mov r8, r8)
 800f794:	2000205c 	.word	0x2000205c
 800f798:	200020dc 	.word	0x200020dc
 800f79c:	200020f8 	.word	0x200020f8

0800f7a0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7a2:	46c6      	mov	lr, r8
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f7a4:	2600      	movs	r6, #0
	{
 800f7a6:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f7a8:	4b27      	ldr	r3, [pc, #156]	; (800f848 <vTaskList+0xa8>)
	{
 800f7aa:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800f7ac:	691a      	ldr	r2, [r3, #16]
		*pcWriteBuffer = 0x00;
 800f7ae:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800f7b0:	9202      	str	r2, [sp, #8]
	{
 800f7b2:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f7b4:	6918      	ldr	r0, [r3, #16]
 800f7b6:	0140      	lsls	r0, r0, #5
 800f7b8:	f000 fc04 	bl	800ffc4 <pvPortMalloc>
 800f7bc:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800f7be:	d03f      	beq.n	800f840 <vTaskList+0xa0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	9902      	ldr	r1, [sp, #8]
 800f7c4:	f7ff fe34 	bl	800f430 <uxTaskGetSystemState>
 800f7c8:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f7ca:	9603      	str	r6, [sp, #12]
 800f7cc:	9b03      	ldr	r3, [sp, #12]
 800f7ce:	9a02      	ldr	r2, [sp, #8]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d932      	bls.n	800f83a <vTaskList+0x9a>
 800f7d4:	4b1d      	ldr	r3, [pc, #116]	; (800f84c <vTaskList+0xac>)
 800f7d6:	4e1e      	ldr	r6, [pc, #120]	; (800f850 <vTaskList+0xb0>)
 800f7d8:	4698      	mov	r8, r3
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f7da:	9b03      	ldr	r3, [sp, #12]
 800f7dc:	2700      	movs	r7, #0
 800f7de:	015b      	lsls	r3, r3, #5
 800f7e0:	18eb      	adds	r3, r5, r3
 800f7e2:	7b1b      	ldrb	r3, [r3, #12]
 800f7e4:	3b01      	subs	r3, #1
 800f7e6:	b2db      	uxtb	r3, r3
 800f7e8:	2b03      	cmp	r3, #3
 800f7ea:	d801      	bhi.n	800f7f0 <vTaskList+0x50>
 800f7ec:	4443      	add	r3, r8
 800f7ee:	7d1f      	ldrb	r7, [r3, #20]
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f7f0:	9b03      	ldr	r3, [sp, #12]
 800f7f2:	0020      	movs	r0, r4
 800f7f4:	015b      	lsls	r3, r3, #5
 800f7f6:	18eb      	adds	r3, r5, r3
 800f7f8:	6859      	ldr	r1, [r3, #4]
 800f7fa:	f7ff fa6d 	bl	800ecd8 <prvWriteNameToBuffer>
 800f7fe:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f800:	9b03      	ldr	r3, [sp, #12]
 800f802:	9a03      	ldr	r2, [sp, #12]
 800f804:	9903      	ldr	r1, [sp, #12]
 800f806:	015b      	lsls	r3, r3, #5
 800f808:	0149      	lsls	r1, r1, #5
 800f80a:	1869      	adds	r1, r5, r1
 800f80c:	6889      	ldr	r1, [r1, #8]
 800f80e:	18eb      	adds	r3, r5, r3
 800f810:	0152      	lsls	r2, r2, #5
 800f812:	691b      	ldr	r3, [r3, #16]
 800f814:	18aa      	adds	r2, r5, r2
 800f816:	9101      	str	r1, [sp, #4]
 800f818:	8b92      	ldrh	r2, [r2, #28]
 800f81a:	0031      	movs	r1, r6
 800f81c:	9200      	str	r2, [sp, #0]
 800f81e:	003a      	movs	r2, r7
 800f820:	f004 fe00 	bl	8014424 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f824:	0020      	movs	r0, r4
 800f826:	f7f0 fc77 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 800f82a:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f82c:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800f82e:	3301      	adds	r3, #1
 800f830:	9303      	str	r3, [sp, #12]
 800f832:	9a03      	ldr	r2, [sp, #12]
 800f834:	9b02      	ldr	r3, [sp, #8]
 800f836:	429a      	cmp	r2, r3
 800f838:	d3cf      	bcc.n	800f7da <vTaskList+0x3a>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f83a:	0028      	movs	r0, r5
 800f83c:	f000 fc3e 	bl	80100bc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f840:	b004      	add	sp, #16
 800f842:	bc04      	pop	{r2}
 800f844:	4690      	mov	r8, r2
 800f846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f848:	2000205c 	.word	0x2000205c
 800f84c:	08018f58 	.word	0x08018f58
 800f850:	0801bf24 	.word	0x0801bf24

0800f854 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800f854:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f856:	46c6      	mov	lr, r8
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f858:	2600      	movs	r6, #0
	{
 800f85a:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f85c:	4b28      	ldr	r3, [pc, #160]	; (800f900 <vTaskGetRunTimeStats+0xac>)
	{
 800f85e:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800f860:	691a      	ldr	r2, [r3, #16]
		*pcWriteBuffer = 0x00;
 800f862:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800f864:	9201      	str	r2, [sp, #4]
	{
 800f866:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f868:	6918      	ldr	r0, [r3, #16]
 800f86a:	0140      	lsls	r0, r0, #5
 800f86c:	f000 fbaa 	bl	800ffc4 <pvPortMalloc>
 800f870:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800f872:	d040      	beq.n	800f8f6 <vTaskGetRunTimeStats+0xa2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f874:	9901      	ldr	r1, [sp, #4]
 800f876:	aa03      	add	r2, sp, #12
 800f878:	f7ff fdda 	bl	800f430 <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800f87c:	2164      	movs	r1, #100	; 0x64
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f87e:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 800f880:	9803      	ldr	r0, [sp, #12]
 800f882:	f7f0 fc65 	bl	8000150 <__udivsi3>
 800f886:	1e01      	subs	r1, r0, #0
 800f888:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800f88a:	d031      	beq.n	800f8f0 <vTaskGetRunTimeStats+0x9c>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800f88c:	9602      	str	r6, [sp, #8]
 800f88e:	9b02      	ldr	r3, [sp, #8]
 800f890:	9a01      	ldr	r2, [sp, #4]
 800f892:	429a      	cmp	r2, r3
 800f894:	d92c      	bls.n	800f8f0 <vTaskGetRunTimeStats+0x9c>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f896:	4b1b      	ldr	r3, [pc, #108]	; (800f904 <vTaskGetRunTimeStats+0xb0>)
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f898:	4f1b      	ldr	r7, [pc, #108]	; (800f908 <vTaskGetRunTimeStats+0xb4>)
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f89a:	4698      	mov	r8, r3
 800f89c:	e00f      	b.n	800f8be <vTaskGetRunTimeStats+0x6a>
 800f89e:	0033      	movs	r3, r6
 800f8a0:	4641      	mov	r1, r8
 800f8a2:	f004 fdbf 	bl	8014424 <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800f8a6:	0020      	movs	r0, r4
 800f8a8:	f7f0 fc36 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800f8ac:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 800f8ae:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	9302      	str	r3, [sp, #8]
 800f8b4:	9a02      	ldr	r2, [sp, #8]
 800f8b6:	9b01      	ldr	r3, [sp, #4]
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	d219      	bcs.n	800f8f0 <vTaskGetRunTimeStats+0x9c>
 800f8bc:	9903      	ldr	r1, [sp, #12]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f8be:	9b02      	ldr	r3, [sp, #8]
 800f8c0:	015b      	lsls	r3, r3, #5
 800f8c2:	18eb      	adds	r3, r5, r3
 800f8c4:	6998      	ldr	r0, [r3, #24]
 800f8c6:	f7f0 fc43 	bl	8000150 <__udivsi3>
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f8ca:	9b02      	ldr	r3, [sp, #8]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f8cc:	0006      	movs	r6, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f8ce:	015b      	lsls	r3, r3, #5
 800f8d0:	18eb      	adds	r3, r5, r3
 800f8d2:	6859      	ldr	r1, [r3, #4]
 800f8d4:	0020      	movs	r0, r4
 800f8d6:	f7ff f9ff 	bl	800ecd8 <prvWriteNameToBuffer>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f8da:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f8dc:	0004      	movs	r4, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f8de:	015b      	lsls	r3, r3, #5
 800f8e0:	18eb      	adds	r3, r5, r3
 800f8e2:	699a      	ldr	r2, [r3, #24]
					if( ulStatsAsPercentage > 0UL )
 800f8e4:	2e00      	cmp	r6, #0
 800f8e6:	d1da      	bne.n	800f89e <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f8e8:	0039      	movs	r1, r7
 800f8ea:	f004 fd9b 	bl	8014424 <sprintf>
 800f8ee:	e7da      	b.n	800f8a6 <vTaskGetRunTimeStats+0x52>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f8f0:	0028      	movs	r0, r5
 800f8f2:	f000 fbe3 	bl	80100bc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f8f6:	b004      	add	sp, #16
 800f8f8:	bc04      	pop	{r2}
 800f8fa:	4690      	mov	r8, r2
 800f8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8fe:	46c0      	nop			; (mov r8, r8)
 800f900:	2000205c 	.word	0x2000205c
 800f904:	0801bf34 	.word	0x0801bf34
 800f908:	0801bf40 	.word	0x0801bf40

0800f90c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f90c:	4b04      	ldr	r3, [pc, #16]	; (800f920 <pvTaskIncrementMutexHeldCount+0x14>)
 800f90e:	685a      	ldr	r2, [r3, #4]
 800f910:	2a00      	cmp	r2, #0
 800f912:	d003      	beq.n	800f91c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f914:	6859      	ldr	r1, [r3, #4]
 800f916:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800f918:	3201      	adds	r2, #1
 800f91a:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f91c:	6858      	ldr	r0, [r3, #4]
	}
 800f91e:	4770      	bx	lr
 800f920:	2000205c 	.word	0x2000205c

0800f924 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f924:	b570      	push	{r4, r5, r6, lr}
 800f926:	0006      	movs	r6, r0
 800f928:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f92a:	f000 facd 	bl	800fec8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f92e:	4c1c      	ldr	r4, [pc, #112]	; (800f9a0 <ulTaskNotifyTake+0x7c>)
 800f930:	6863      	ldr	r3, [r4, #4]
 800f932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f934:	2b00      	cmp	r3, #0
 800f936:	d105      	bne.n	800f944 <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800f938:	2101      	movs	r1, #1
 800f93a:	6862      	ldr	r2, [r4, #4]
 800f93c:	335c      	adds	r3, #92	; 0x5c
 800f93e:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800f940:	2d00      	cmp	r5, #0
 800f942:	d119      	bne.n	800f978 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f944:	f000 facc 	bl	800fee0 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f948:	f000 fabe 	bl	800fec8 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f94c:	6863      	ldr	r3, [r4, #4]
 800f94e:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800f950:	2d00      	cmp	r5, #0
 800f952:	d005      	beq.n	800f960 <ulTaskNotifyTake+0x3c>
			{
				if( xClearCountOnExit != pdFALSE )
 800f954:	2e00      	cmp	r6, #0
 800f956:	d10b      	bne.n	800f970 <ulTaskNotifyTake+0x4c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800f958:	6862      	ldr	r2, [r4, #4]
 800f95a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f95c:	3b01      	subs	r3, #1
 800f95e:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800f960:	235c      	movs	r3, #92	; 0x5c
 800f962:	2100      	movs	r1, #0
 800f964:	6862      	ldr	r2, [r4, #4]
 800f966:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800f968:	f000 faba 	bl	800fee0 <vPortExitCritical>

		return ulReturn;
	}
 800f96c:	0028      	movs	r0, r5
 800f96e:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f970:	2200      	movs	r2, #0
 800f972:	6863      	ldr	r3, [r4, #4]
 800f974:	659a      	str	r2, [r3, #88]	; 0x58
 800f976:	e7f3      	b.n	800f960 <ulTaskNotifyTake+0x3c>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f978:	6860      	ldr	r0, [r4, #4]
 800f97a:	3004      	adds	r0, #4
 800f97c:	f7fe fe4e 	bl	800e61c <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800f980:	1c6b      	adds	r3, r5, #1
 800f982:	d006      	beq.n	800f992 <ulTaskNotifyTake+0x6e>
							xTimeToWake = xTickCount + xTicksToWait;
 800f984:	68a0      	ldr	r0, [r4, #8]
 800f986:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f988:	f7ff fa1e 	bl	800edc8 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800f98c:	f000 fa90 	bl	800feb0 <vPortYield>
 800f990:	e7d8      	b.n	800f944 <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f992:	0020      	movs	r0, r4
 800f994:	6861      	ldr	r1, [r4, #4]
 800f996:	3064      	adds	r0, #100	; 0x64
 800f998:	3104      	adds	r1, #4
 800f99a:	f7fe fe1b 	bl	800e5d4 <vListInsertEnd>
 800f99e:	e7f5      	b.n	800f98c <ulTaskNotifyTake+0x68>
 800f9a0:	2000205c 	.word	0x2000205c

0800f9a4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9a6:	0004      	movs	r4, r0
 800f9a8:	000e      	movs	r6, r1
 800f9aa:	0015      	movs	r5, r2
 800f9ac:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	d01b      	beq.n	800f9ea <xTaskGenericNotify+0x46>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800f9b2:	f000 fa89 	bl	800fec8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f9b6:	2f00      	cmp	r7, #0
 800f9b8:	d001      	beq.n	800f9be <xTaskGenericNotify+0x1a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f9ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f9bc:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800f9be:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 800f9c0:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 800f9c2:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->eNotifyState = eNotified;
 800f9c4:	54a1      	strb	r1, [r4, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 800f9c6:	b2db      	uxtb	r3, r3

			switch( eAction )
 800f9c8:	2d02      	cmp	r5, #2
 800f9ca:	d010      	beq.n	800f9ee <xTaskGenericNotify+0x4a>
 800f9cc:	d934      	bls.n	800fa38 <xTaskGenericNotify+0x94>
 800f9ce:	2d03      	cmp	r5, #3
 800f9d0:	d003      	beq.n	800f9da <xTaskGenericNotify+0x36>
 800f9d2:	2d04      	cmp	r5, #4
 800f9d4:	d102      	bne.n	800f9dc <xTaskGenericNotify+0x38>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800f9d6:	2b02      	cmp	r3, #2
 800f9d8:	d02c      	beq.n	800fa34 <xTaskGenericNotify+0x90>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f9da:	65a6      	str	r6, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d00a      	beq.n	800f9f6 <xTaskGenericNotify+0x52>
 800f9e0:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f9e2:	f000 fa7d 	bl	800fee0 <vPortExitCritical>

		return xReturn;
	}
 800f9e6:	0020      	movs	r0, r4
 800f9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( xTaskToNotify );
 800f9ea:	b672      	cpsid	i
 800f9ec:	e7fe      	b.n	800f9ec <xTaskGenericNotify+0x48>
					( pxTCB->ulNotifiedValue )++;
 800f9ee:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f9f0:	3201      	adds	r2, #1
 800f9f2:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800f9f4:	e7f2      	b.n	800f9dc <xTaskGenericNotify+0x38>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f9f6:	1d25      	adds	r5, r4, #4
 800f9f8:	0028      	movs	r0, r5
 800f9fa:	f7fe fe0f 	bl	800e61c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f9fe:	4a11      	ldr	r2, [pc, #68]	; (800fa44 <xTaskGenericNotify+0xa0>)
 800fa00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fa02:	6811      	ldr	r1, [r2, #0]
 800fa04:	428b      	cmp	r3, r1
 800fa06:	d900      	bls.n	800fa0a <xTaskGenericNotify+0x66>
 800fa08:	6013      	str	r3, [r2, #0]
 800fa0a:	2014      	movs	r0, #20
 800fa0c:	4358      	muls	r0, r3
 800fa0e:	4b0e      	ldr	r3, [pc, #56]	; (800fa48 <xTaskGenericNotify+0xa4>)
 800fa10:	0029      	movs	r1, r5
 800fa12:	18c0      	adds	r0, r0, r3
 800fa14:	f7fe fdde 	bl	800e5d4 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fa18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d001      	beq.n	800fa22 <xTaskGenericNotify+0x7e>
 800fa1e:	b672      	cpsid	i
 800fa20:	e7fe      	b.n	800fa20 <xTaskGenericNotify+0x7c>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fa22:	4b0a      	ldr	r3, [pc, #40]	; (800fa4c <xTaskGenericNotify+0xa8>)
 800fa24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fa26:	685b      	ldr	r3, [r3, #4]
 800fa28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d9d8      	bls.n	800f9e0 <xTaskGenericNotify+0x3c>
					taskYIELD_IF_USING_PREEMPTION();
 800fa2e:	f000 fa3f 	bl	800feb0 <vPortYield>
 800fa32:	e7d5      	b.n	800f9e0 <xTaskGenericNotify+0x3c>
						xReturn = pdFAIL;
 800fa34:	2400      	movs	r4, #0
 800fa36:	e7d4      	b.n	800f9e2 <xTaskGenericNotify+0x3e>
			switch( eAction )
 800fa38:	2d01      	cmp	r5, #1
 800fa3a:	d1cf      	bne.n	800f9dc <xTaskGenericNotify+0x38>
					pxTCB->ulNotifiedValue |= ulValue;
 800fa3c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fa3e:	4316      	orrs	r6, r2
 800fa40:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800fa42:	e7cb      	b.n	800f9dc <xTaskGenericNotify+0x38>
 800fa44:	200020dc 	.word	0x200020dc
 800fa48:	200020f8 	.word	0x200020f8
 800fa4c:	2000205c 	.word	0x2000205c

0800fa50 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fa50:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fa52:	f000 fa39 	bl	800fec8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fa56:	4c10      	ldr	r4, [pc, #64]	; (800fa98 <prvCheckForValidListAndQueue+0x48>)
 800fa58:	6823      	ldr	r3, [r4, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d002      	beq.n	800fa64 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa5e:	f000 fa3f 	bl	800fee0 <vPortExitCritical>
}
 800fa62:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList2 );
 800fa64:	0025      	movs	r5, r4
			vListInitialise( &xActiveTimerList1 );
 800fa66:	1d26      	adds	r6, r4, #4
 800fa68:	0030      	movs	r0, r6
			vListInitialise( &xActiveTimerList2 );
 800fa6a:	3518      	adds	r5, #24
			vListInitialise( &xActiveTimerList1 );
 800fa6c:	f7fe fda2 	bl	800e5b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa70:	0028      	movs	r0, r5
 800fa72:	f7fe fd9f 	bl	800e5b4 <vListInitialise>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800fa76:	2200      	movs	r2, #0
 800fa78:	2110      	movs	r1, #16
 800fa7a:	2004      	movs	r0, #4
			pxCurrentTimerList = &xActiveTimerList1;
 800fa7c:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 800fa7e:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800fa80:	f7fe feae 	bl	800e7e0 <xQueueGenericCreate>
 800fa84:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
 800fa86:	2800      	cmp	r0, #0
 800fa88:	d003      	beq.n	800fa92 <prvCheckForValidListAndQueue+0x42>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa8a:	4904      	ldr	r1, [pc, #16]	; (800fa9c <prvCheckForValidListAndQueue+0x4c>)
 800fa8c:	f7ff f8f4 	bl	800ec78 <vQueueAddToRegistry>
 800fa90:	e7e5      	b.n	800fa5e <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
 800fa92:	b672      	cpsid	i
 800fa94:	e7fe      	b.n	800fa94 <prvCheckForValidListAndQueue+0x44>
 800fa96:	46c0      	nop			; (mov r8, r8)
 800fa98:	20002184 	.word	0x20002184
 800fa9c:	0801bf4c 	.word	0x0801bf4c

0800faa0 <prvInsertTimerInActiveList>:
{
 800faa0:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800faa2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800faa4:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800faa6:	4291      	cmp	r1, r2
 800faa8:	d806      	bhi.n	800fab8 <prvInsertTimerInActiveList+0x18>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800faaa:	1ad2      	subs	r2, r2, r3
 800faac:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
 800faae:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d30d      	bcc.n	800fad0 <prvInsertTimerInActiveList+0x30>
}
 800fab4:	0020      	movs	r0, r4
 800fab6:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fab8:	429a      	cmp	r2, r3
 800faba:	d202      	bcs.n	800fac2 <prvInsertTimerInActiveList+0x22>
			xProcessTimerNow = pdTRUE;
 800fabc:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fabe:	4299      	cmp	r1, r3
 800fac0:	d2f8      	bcs.n	800fab4 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fac2:	4b07      	ldr	r3, [pc, #28]	; (800fae0 <prvInsertTimerInActiveList+0x40>)
 800fac4:	1d01      	adds	r1, r0, #4
 800fac6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fac8:	f7fe fd90 	bl	800e5ec <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800facc:	2400      	movs	r4, #0
 800face:	e7f1      	b.n	800fab4 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fad0:	4b03      	ldr	r3, [pc, #12]	; (800fae0 <prvInsertTimerInActiveList+0x40>)
 800fad2:	1d01      	adds	r1, r0, #4
 800fad4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fad6:	f7fe fd89 	bl	800e5ec <vListInsert>
 800fada:	2400      	movs	r4, #0
 800fadc:	e7ea      	b.n	800fab4 <prvInsertTimerInActiveList+0x14>
 800fade:	46c0      	nop			; (mov r8, r8)
 800fae0:	20002184 	.word	0x20002184

0800fae4 <xTimerCreateTimerTask>:
{
 800fae4:	b500      	push	{lr}
 800fae6:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800fae8:	f7ff ffb2 	bl	800fa50 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800faec:	4b0a      	ldr	r3, [pc, #40]	; (800fb18 <xTimerCreateTimerTask+0x34>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d00d      	beq.n	800fb10 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800faf4:	2300      	movs	r3, #0
 800faf6:	9303      	str	r3, [sp, #12]
 800faf8:	9302      	str	r3, [sp, #8]
 800fafa:	9301      	str	r3, [sp, #4]
 800fafc:	3303      	adds	r3, #3
 800fafe:	9300      	str	r3, [sp, #0]
 800fb00:	22a0      	movs	r2, #160	; 0xa0
 800fb02:	2300      	movs	r3, #0
 800fb04:	4905      	ldr	r1, [pc, #20]	; (800fb1c <xTimerCreateTimerTask+0x38>)
 800fb06:	4806      	ldr	r0, [pc, #24]	; (800fb20 <xTimerCreateTimerTask+0x3c>)
 800fb08:	f7ff faa2 	bl	800f050 <xTaskGenericCreate>
	configASSERT( xReturn );
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d101      	bne.n	800fb14 <xTimerCreateTimerTask+0x30>
 800fb10:	b672      	cpsid	i
 800fb12:	e7fe      	b.n	800fb12 <xTimerCreateTimerTask+0x2e>
}
 800fb14:	b005      	add	sp, #20
 800fb16:	bd00      	pop	{pc}
 800fb18:	20002184 	.word	0x20002184
 800fb1c:	0801bf54 	.word	0x0801bf54
 800fb20:	0800fc2d 	.word	0x0800fc2d

0800fb24 <xTimerCreate>:
{
 800fb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb26:	46c6      	mov	lr, r8
 800fb28:	000d      	movs	r5, r1
 800fb2a:	b500      	push	{lr}
 800fb2c:	4680      	mov	r8, r0
 800fb2e:	0017      	movs	r7, r2
 800fb30:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800fb32:	2900      	cmp	r1, #0
 800fb34:	d014      	beq.n	800fb60 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800fb36:	202c      	movs	r0, #44	; 0x2c
 800fb38:	f000 fa44 	bl	800ffc4 <pvPortMalloc>
 800fb3c:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800fb3e:	d00b      	beq.n	800fb58 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800fb40:	f7ff ff86 	bl	800fa50 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800fb44:	4643      	mov	r3, r8
 800fb46:	6023      	str	r3, [r4, #0]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800fb48:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800fb4a:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800fb4c:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800fb4e:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800fb50:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800fb52:	1d20      	adds	r0, r4, #4
 800fb54:	f7fe fd3a 	bl	800e5cc <vListInitialiseItem>
}
 800fb58:	0020      	movs	r0, r4
 800fb5a:	bc04      	pop	{r2}
 800fb5c:	4690      	mov	r8, r2
 800fb5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800fb60:	b672      	cpsid	i
 800fb62:	e7fe      	b.n	800fb62 <xTimerCreate+0x3e>

0800fb64 <xTimerGenericCommand>:
{
 800fb64:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800fb66:	4d13      	ldr	r5, [pc, #76]	; (800fbb4 <xTimerGenericCommand+0x50>)
{
 800fb68:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800fb6a:	682c      	ldr	r4, [r5, #0]
{
 800fb6c:	001e      	movs	r6, r3
	if( xTimerQueue != NULL )
 800fb6e:	2c00      	cmp	r4, #0
 800fb70:	d017      	beq.n	800fba2 <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 800fb72:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fb74:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800fb76:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fb78:	2905      	cmp	r1, #5
 800fb7a:	dc0a      	bgt.n	800fb92 <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fb7c:	f7ff fd92 	bl	800f6a4 <xTaskGetSchedulerState>
 800fb80:	2802      	cmp	r0, #2
 800fb82:	d010      	beq.n	800fba6 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fb84:	6828      	ldr	r0, [r5, #0]
 800fb86:	2300      	movs	r3, #0
 800fb88:	2200      	movs	r2, #0
 800fb8a:	4669      	mov	r1, sp
 800fb8c:	f7fe fe64 	bl	800e858 <xQueueGenericSend>
 800fb90:	e005      	b.n	800fb9e <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fb92:	2300      	movs	r3, #0
 800fb94:	0032      	movs	r2, r6
 800fb96:	4669      	mov	r1, sp
 800fb98:	0020      	movs	r0, r4
 800fb9a:	f7fe fef9 	bl	800e990 <xQueueGenericSendFromISR>
}
 800fb9e:	b004      	add	sp, #16
 800fba0:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 800fba2:	2000      	movs	r0, #0
	return xReturn;
 800fba4:	e7fb      	b.n	800fb9e <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fba6:	6828      	ldr	r0, [r5, #0]
 800fba8:	2300      	movs	r3, #0
 800fbaa:	9a08      	ldr	r2, [sp, #32]
 800fbac:	4669      	mov	r1, sp
 800fbae:	f7fe fe53 	bl	800e858 <xQueueGenericSend>
 800fbb2:	e7f4      	b.n	800fb9e <xTimerGenericCommand+0x3a>
 800fbb4:	20002184 	.word	0x20002184

0800fbb8 <prvSwitchTimerLists>:
{
 800fbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbba:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fbbc:	2300      	movs	r3, #0
{
 800fbbe:	b500      	push	{lr}
 800fbc0:	4e19      	ldr	r6, [pc, #100]	; (800fc28 <prvSwitchTimerLists+0x70>)
 800fbc2:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fbc4:	4698      	mov	r8, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fbc6:	e00c      	b.n	800fbe2 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fbc8:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fbca:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fbcc:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fbce:	1d25      	adds	r5, r4, #4
 800fbd0:	0028      	movs	r0, r5
 800fbd2:	f7fe fd23 	bl	800e61c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fbd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbd8:	0020      	movs	r0, r4
 800fbda:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fbdc:	69e3      	ldr	r3, [r4, #28]
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d00a      	beq.n	800fbf8 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fbe2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800fbe4:	681a      	ldr	r2, [r3, #0]
 800fbe6:	2a00      	cmp	r2, #0
 800fbe8:	d1ee      	bne.n	800fbc8 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 800fbea:	6b32      	ldr	r2, [r6, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 800fbec:	6333      	str	r3, [r6, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
 800fbee:	62f2      	str	r2, [r6, #44]	; 0x2c
}
 800fbf0:	b002      	add	sp, #8
 800fbf2:	bc04      	pop	{r2}
 800fbf4:	4690      	mov	r8, r2
 800fbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fbf8:	69a3      	ldr	r3, [r4, #24]
 800fbfa:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 800fbfc:	429f      	cmp	r7, r3
 800fbfe:	d206      	bcs.n	800fc0e <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fc00:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc02:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fc04:	0029      	movs	r1, r5
 800fc06:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800fc08:	f7fe fcf0 	bl	800e5ec <vListInsert>
 800fc0c:	e7e9      	b.n	800fbe2 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fc0e:	4643      	mov	r3, r8
 800fc10:	003a      	movs	r2, r7
 800fc12:	9300      	str	r3, [sp, #0]
 800fc14:	2100      	movs	r1, #0
 800fc16:	2300      	movs	r3, #0
 800fc18:	0020      	movs	r0, r4
 800fc1a:	f7ff ffa3 	bl	800fb64 <xTimerGenericCommand>
				configASSERT( xResult );
 800fc1e:	2800      	cmp	r0, #0
 800fc20:	d1df      	bne.n	800fbe2 <prvSwitchTimerLists+0x2a>
 800fc22:	b672      	cpsid	i
 800fc24:	e7fe      	b.n	800fc24 <prvSwitchTimerLists+0x6c>
 800fc26:	46c0      	nop			; (mov r8, r8)
 800fc28:	20002184 	.word	0x20002184

0800fc2c <prvTimerTask>:
{
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc30:	4646      	mov	r6, r8
 800fc32:	46d6      	mov	lr, sl
 800fc34:	464f      	mov	r7, r9
 800fc36:	4698      	mov	r8, r3
 800fc38:	b5c0      	push	{r6, r7, lr}
 800fc3a:	4d65      	ldr	r5, [pc, #404]	; (800fdd0 <prvTimerTask+0x1a4>)
 800fc3c:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fc3e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if( *pxListWasEmpty == pdFALSE )
 800fc40:	681a      	ldr	r2, [r3, #0]
 800fc42:	2a00      	cmp	r2, #0
 800fc44:	d04f      	beq.n	800fce6 <prvTimerTask+0xba>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 800fc4a:	f7ff fa9d 	bl	800f188 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800fc4e:	f7ff faa3 	bl	800f198 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800fc52:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800fc54:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800fc56:	4283      	cmp	r3, r0
 800fc58:	d84d      	bhi.n	800fcf6 <prvTimerTask+0xca>
	xLastTime = xTimeNow;
 800fc5a:	6368      	str	r0, [r5, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fc5c:	4287      	cmp	r7, r0
 800fc5e:	d960      	bls.n	800fd22 <prvTimerTask+0xf6>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800fc60:	1b39      	subs	r1, r7, r4
 800fc62:	6828      	ldr	r0, [r5, #0]
 800fc64:	f7ff f81a 	bl	800ec9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fc68:	f7ff fb2e 	bl	800f2c8 <xTaskResumeAll>
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	d055      	beq.n	800fd1c <prvTimerTask+0xf0>
 800fc70:	2684      	movs	r6, #132	; 0x84
 800fc72:	00b6      	lsls	r6, r6, #2
 800fc74:	27c7      	movs	r7, #199	; 0xc7
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fc76:	2300      	movs	r3, #0
 800fc78:	2200      	movs	r2, #0
 800fc7a:	a904      	add	r1, sp, #16
 800fc7c:	6828      	ldr	r0, [r5, #0]
 800fc7e:	f7fe ff09 	bl	800ea94 <xQueueGenericReceive>
 800fc82:	2800      	cmp	r0, #0
 800fc84:	d0db      	beq.n	800fc3e <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fc86:	9b04      	ldr	r3, [sp, #16]
 800fc88:	9c06      	ldr	r4, [sp, #24]
 800fc8a:	9302      	str	r3, [sp, #8]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	da0b      	bge.n	800fca8 <prvTimerTask+0x7c>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fc90:	9b07      	ldr	r3, [sp, #28]
 800fc92:	0020      	movs	r0, r4
 800fc94:	9302      	str	r3, [sp, #8]
 800fc96:	9b05      	ldr	r3, [sp, #20]
 800fc98:	9902      	ldr	r1, [sp, #8]
 800fc9a:	9303      	str	r3, [sp, #12]
 800fc9c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fc9e:	9b04      	ldr	r3, [sp, #16]
 800fca0:	9302      	str	r3, [sp, #8]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	dbe7      	blt.n	800fc76 <prvTimerTask+0x4a>
 800fca6:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800fca8:	6963      	ldr	r3, [r4, #20]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d002      	beq.n	800fcb4 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fcae:	1d20      	adds	r0, r4, #4
 800fcb0:	f7fe fcb4 	bl	800e61c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800fcb4:	f7ff fa70 	bl	800f198 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800fcb8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800fcba:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 800fcbc:	4298      	cmp	r0, r3
 800fcbe:	d320      	bcc.n	800fd02 <prvTimerTask+0xd6>
	xLastTime = xTimeNow;
 800fcc0:	464b      	mov	r3, r9
 800fcc2:	636b      	str	r3, [r5, #52]	; 0x34
 800fcc4:	9b04      	ldr	r3, [sp, #16]
 800fcc6:	2b09      	cmp	r3, #9
 800fcc8:	d8d5      	bhi.n	800fc76 <prvTimerTask+0x4a>
 800fcca:	4642      	mov	r2, r8
 800fccc:	409a      	lsls	r2, r3
 800fcce:	0013      	movs	r3, r2
 800fcd0:	4032      	ands	r2, r6
 800fcd2:	4692      	mov	sl, r2
 800fcd4:	d15a      	bne.n	800fd8c <prvTimerTask+0x160>
 800fcd6:	421f      	tst	r7, r3
 800fcd8:	d132      	bne.n	800fd40 <prvTimerTask+0x114>
 800fcda:	069b      	lsls	r3, r3, #26
 800fcdc:	d5cb      	bpl.n	800fc76 <prvTimerTask+0x4a>
					vPortFree( pxTimer );
 800fcde:	0020      	movs	r0, r4
 800fce0:	f000 f9ec 	bl	80100bc <vPortFree>
 800fce4:	e7c6      	b.n	800fc74 <prvTimerTask+0x48>
	vTaskSuspendAll();
 800fce6:	f7ff fa4f 	bl	800f188 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800fcea:	f7ff fa55 	bl	800f198 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800fcee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800fcf0:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800fcf2:	4298      	cmp	r0, r3
 800fcf4:	d208      	bcs.n	800fd08 <prvTimerTask+0xdc>
		prvSwitchTimerLists();
 800fcf6:	f7ff ff5f 	bl	800fbb8 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800fcfa:	636c      	str	r4, [r5, #52]	; 0x34
			( void ) xTaskResumeAll();
 800fcfc:	f7ff fae4 	bl	800f2c8 <xTaskResumeAll>
 800fd00:	e7b6      	b.n	800fc70 <prvTimerTask+0x44>
		prvSwitchTimerLists();
 800fd02:	f7ff ff59 	bl	800fbb8 <prvSwitchTimerLists>
 800fd06:	e7db      	b.n	800fcc0 <prvTimerTask+0x94>
		xNextExpireTime = ( TickType_t ) 0U;
 800fd08:	2700      	movs	r7, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800fd0a:	6828      	ldr	r0, [r5, #0]
 800fd0c:	1b39      	subs	r1, r7, r4
	xLastTime = xTimeNow;
 800fd0e:	636c      	str	r4, [r5, #52]	; 0x34
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800fd10:	f7fe ffc4 	bl	800ec9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fd14:	f7ff fad8 	bl	800f2c8 <xTaskResumeAll>
 800fd18:	2800      	cmp	r0, #0
 800fd1a:	d1a9      	bne.n	800fc70 <prvTimerTask+0x44>
					portYIELD_WITHIN_API();
 800fd1c:	f000 f8c8 	bl	800feb0 <vPortYield>
 800fd20:	e7a6      	b.n	800fc70 <prvTimerTask+0x44>
				( void ) xTaskResumeAll();
 800fd22:	f7ff fad1 	bl	800f2c8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd26:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fd28:	68db      	ldr	r3, [r3, #12]
 800fd2a:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd2c:	1d30      	adds	r0, r6, #4
 800fd2e:	f7fe fc75 	bl	800e61c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fd32:	69f3      	ldr	r3, [r6, #28]
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d034      	beq.n	800fda2 <prvTimerTask+0x176>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fd3a:	0030      	movs	r0, r6
 800fd3c:	4798      	blx	r3
 800fd3e:	e797      	b.n	800fc70 <prvTimerTask+0x44>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800fd40:	9b05      	ldr	r3, [sp, #20]
 800fd42:	0020      	movs	r0, r4
 800fd44:	9302      	str	r3, [sp, #8]
 800fd46:	9a02      	ldr	r2, [sp, #8]
 800fd48:	69a3      	ldr	r3, [r4, #24]
 800fd4a:	4694      	mov	ip, r2
 800fd4c:	4463      	add	r3, ip
 800fd4e:	0019      	movs	r1, r3
 800fd50:	0013      	movs	r3, r2
 800fd52:	464a      	mov	r2, r9
 800fd54:	f7ff fea4 	bl	800faa0 <prvInsertTimerInActiveList>
 800fd58:	2801      	cmp	r0, #1
 800fd5a:	d18b      	bne.n	800fc74 <prvTimerTask+0x48>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd5e:	0020      	movs	r0, r4
 800fd60:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fd62:	69e3      	ldr	r3, [r4, #28]
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d185      	bne.n	800fc74 <prvTimerTask+0x48>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fd68:	69a1      	ldr	r1, [r4, #24]
 800fd6a:	9b05      	ldr	r3, [sp, #20]
 800fd6c:	468c      	mov	ip, r1
 800fd6e:	9302      	str	r3, [sp, #8]
 800fd70:	4463      	add	r3, ip
 800fd72:	001a      	movs	r2, r3
 800fd74:	4653      	mov	r3, sl
 800fd76:	2100      	movs	r1, #0
 800fd78:	9300      	str	r3, [sp, #0]
 800fd7a:	0020      	movs	r0, r4
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	f7ff fef1 	bl	800fb64 <xTimerGenericCommand>
							configASSERT( xResult );
 800fd82:	2800      	cmp	r0, #0
 800fd84:	d000      	beq.n	800fd88 <prvTimerTask+0x15c>
 800fd86:	e775      	b.n	800fc74 <prvTimerTask+0x48>
 800fd88:	b672      	cpsid	i
 800fd8a:	e7fe      	b.n	800fd8a <prvTimerTask+0x15e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fd8c:	9905      	ldr	r1, [sp, #20]
 800fd8e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fd90:	2900      	cmp	r1, #0
 800fd92:	d01a      	beq.n	800fdca <prvTimerTask+0x19e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fd94:	4449      	add	r1, r9
 800fd96:	464b      	mov	r3, r9
 800fd98:	464a      	mov	r2, r9
 800fd9a:	0020      	movs	r0, r4
 800fd9c:	f7ff fe80 	bl	800faa0 <prvInsertTimerInActiveList>
 800fda0:	e768      	b.n	800fc74 <prvTimerTask+0x48>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800fda2:	69b3      	ldr	r3, [r6, #24]
 800fda4:	0022      	movs	r2, r4
 800fda6:	18f9      	adds	r1, r7, r3
 800fda8:	0030      	movs	r0, r6
 800fdaa:	003b      	movs	r3, r7
 800fdac:	f7ff fe78 	bl	800faa0 <prvInsertTimerInActiveList>
 800fdb0:	2801      	cmp	r0, #1
 800fdb2:	d1c1      	bne.n	800fd38 <prvTimerTask+0x10c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	003a      	movs	r2, r7
 800fdb8:	9300      	str	r3, [sp, #0]
 800fdba:	2100      	movs	r1, #0
 800fdbc:	0030      	movs	r0, r6
 800fdbe:	f7ff fed1 	bl	800fb64 <xTimerGenericCommand>
			configASSERT( xResult );
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	d1b8      	bne.n	800fd38 <prvTimerTask+0x10c>
 800fdc6:	b672      	cpsid	i
 800fdc8:	e7fe      	b.n	800fdc8 <prvTimerTask+0x19c>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fdca:	b672      	cpsid	i
 800fdcc:	e7fe      	b.n	800fdcc <prvTimerTask+0x1a0>
 800fdce:	46c0      	nop			; (mov r8, r8)
 800fdd0:	20002184 	.word	0x20002184

0800fdd4 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800fdd4:	b510      	push	{r4, lr}
 800fdd6:	0004      	movs	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800fdd8:	f000 f876 	bl	800fec8 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800fddc:	6964      	ldr	r4, [r4, #20]
 800fdde:	1e63      	subs	r3, r4, #1
 800fde0:	419c      	sbcs	r4, r3
	}
	taskEXIT_CRITICAL();
 800fde2:	f000 f87d 	bl	800fee0 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800fde6:	0020      	movs	r0, r4
 800fde8:	bd10      	pop	{r4, pc}
 800fdea:	46c0      	nop			; (mov r8, r8)

0800fdec <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800fdec:	b510      	push	{r4, lr}
 800fdee:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800fdf0:	d101      	bne.n	800fdf6 <pvTimerGetTimerID+0xa>
 800fdf2:	b672      	cpsid	i
 800fdf4:	e7fe      	b.n	800fdf4 <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 800fdf6:	f000 f867 	bl	800fec8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800fdfa:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800fdfc:	f000 f870 	bl	800fee0 <vPortExitCritical>

	return pvReturn;
}
 800fe00:	0020      	movs	r0, r4
 800fe02:	bd10      	pop	{r4, pc}

0800fe04 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fe04:	4b03      	ldr	r3, [pc, #12]	; (800fe14 <prvTaskExitError+0x10>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	d001      	beq.n	800fe10 <prvTaskExitError+0xc>
 800fe0c:	b672      	cpsid	i
 800fe0e:	e7fe      	b.n	800fe0e <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800fe10:	b672      	cpsid	i
 800fe12:	e7fe      	b.n	800fe12 <prvTaskExitError+0xe>
 800fe14:	200000c4 	.word	0x200000c4

0800fe18 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800fe18:	4a06      	ldr	r2, [pc, #24]	; (800fe34 <pxCurrentTCBConst2>)
 800fe1a:	6813      	ldr	r3, [r2, #0]
 800fe1c:	6818      	ldr	r0, [r3, #0]
 800fe1e:	3020      	adds	r0, #32
 800fe20:	f380 8809 	msr	PSP, r0
 800fe24:	2002      	movs	r0, #2
 800fe26:	f380 8814 	msr	CONTROL, r0
 800fe2a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800fe2c:	46ae      	mov	lr, r5
 800fe2e:	b662      	cpsie	i
 800fe30:	bd00      	pop	{pc}
 800fe32:	46c0      	nop			; (mov r8, r8)

0800fe34 <pxCurrentTCBConst2>:
 800fe34:	20002060 	.word	0x20002060

0800fe38 <pxPortInitialiseStack>:
{
 800fe38:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fe3a:	2480      	movs	r4, #128	; 0x80
 800fe3c:	1f03      	subs	r3, r0, #4
 800fe3e:	0464      	lsls	r4, r4, #17
 800fe40:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800fe42:	3b04      	subs	r3, #4
 800fe44:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fe46:	4903      	ldr	r1, [pc, #12]	; (800fe54 <pxPortInitialiseStack+0x1c>)
 800fe48:	3b04      	subs	r3, #4
 800fe4a:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fe4c:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800fe4e:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fe50:	601a      	str	r2, [r3, #0]
}
 800fe52:	bd10      	pop	{r4, pc}
 800fe54:	0800fe05 	.word	0x0800fe05

0800fe58 <SVC_Handler>:
}
 800fe58:	4770      	bx	lr
 800fe5a:	46c0      	nop			; (mov r8, r8)

0800fe5c <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800fe5c:	22ff      	movs	r2, #255	; 0xff
 800fe5e:	4b0f      	ldr	r3, [pc, #60]	; (800fe9c <xPortStartScheduler+0x40>)
 800fe60:	0412      	lsls	r2, r2, #16
 800fe62:	6819      	ldr	r1, [r3, #0]
{
 800fe64:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800fe66:	430a      	orrs	r2, r1
 800fe68:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800fe6a:	22ff      	movs	r2, #255	; 0xff
 800fe6c:	6819      	ldr	r1, [r3, #0]
 800fe6e:	0612      	lsls	r2, r2, #24
 800fe70:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe72:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800fe74:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe76:	4b0a      	ldr	r3, [pc, #40]	; (800fea0 <xPortStartScheduler+0x44>)
 800fe78:	0089      	lsls	r1, r1, #2
 800fe7a:	6818      	ldr	r0, [r3, #0]
 800fe7c:	f7f0 f968 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800fe80:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe82:	4b08      	ldr	r3, [pc, #32]	; (800fea4 <xPortStartScheduler+0x48>)
 800fe84:	3801      	subs	r0, #1
 800fe86:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800fe88:	4b07      	ldr	r3, [pc, #28]	; (800fea8 <xPortStartScheduler+0x4c>)
 800fe8a:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	4b07      	ldr	r3, [pc, #28]	; (800feac <xPortStartScheduler+0x50>)
 800fe90:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800fe92:	f7ff ffc1 	bl	800fe18 <vPortStartFirstTask>
	prvTaskExitError();
 800fe96:	f7ff ffb5 	bl	800fe04 <prvTaskExitError>
 800fe9a:	46c0      	nop			; (mov r8, r8)
 800fe9c:	e000ed20 	.word	0xe000ed20
 800fea0:	200000b0 	.word	0x200000b0
 800fea4:	e000e014 	.word	0xe000e014
 800fea8:	e000e010 	.word	0xe000e010
 800feac:	200000c4 	.word	0x200000c4

0800feb0 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800feb0:	2280      	movs	r2, #128	; 0x80
 800feb2:	4b04      	ldr	r3, [pc, #16]	; (800fec4 <vPortYield+0x14>)
 800feb4:	0552      	lsls	r2, r2, #21
 800feb6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800feb8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800febc:	f3bf 8f6f 	isb	sy
}
 800fec0:	4770      	bx	lr
 800fec2:	46c0      	nop			; (mov r8, r8)
 800fec4:	e000ed04 	.word	0xe000ed04

0800fec8 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800fec8:	b672      	cpsid	i
    uxCriticalNesting++;
 800feca:	4a04      	ldr	r2, [pc, #16]	; (800fedc <vPortEnterCritical+0x14>)
 800fecc:	6813      	ldr	r3, [r2, #0]
 800fece:	3301      	adds	r3, #1
 800fed0:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800fed2:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800fed6:	f3bf 8f6f 	isb	sy
}
 800feda:	4770      	bx	lr
 800fedc:	200000c4 	.word	0x200000c4

0800fee0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800fee0:	4a05      	ldr	r2, [pc, #20]	; (800fef8 <vPortExitCritical+0x18>)
 800fee2:	6813      	ldr	r3, [r2, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d101      	bne.n	800feec <vPortExitCritical+0xc>
 800fee8:	b672      	cpsid	i
 800feea:	e7fe      	b.n	800feea <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800feec:	3b01      	subs	r3, #1
 800feee:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d100      	bne.n	800fef6 <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 800fef4:	b662      	cpsie	i
}
 800fef6:	4770      	bx	lr
 800fef8:	200000c4 	.word	0x200000c4

0800fefc <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800fefc:	f3ef 8010 	mrs	r0, PRIMASK
 800ff00:	b672      	cpsid	i
 800ff02:	4770      	bx	lr
}
 800ff04:	2000      	movs	r0, #0
 800ff06:	46c0      	nop			; (mov r8, r8)

0800ff08 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800ff08:	f380 8810 	msr	PRIMASK, r0
 800ff0c:	4770      	bx	lr
 800ff0e:	46c0      	nop			; (mov r8, r8)

0800ff10 <PendSV_Handler>:
	__asm volatile
 800ff10:	f3ef 8009 	mrs	r0, PSP
 800ff14:	4b0e      	ldr	r3, [pc, #56]	; (800ff50 <pxCurrentTCBConst>)
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	3820      	subs	r0, #32
 800ff1a:	6010      	str	r0, [r2, #0]
 800ff1c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ff1e:	4644      	mov	r4, r8
 800ff20:	464d      	mov	r5, r9
 800ff22:	4656      	mov	r6, sl
 800ff24:	465f      	mov	r7, fp
 800ff26:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ff28:	b508      	push	{r3, lr}
 800ff2a:	b672      	cpsid	i
 800ff2c:	f7ff faf2 	bl	800f514 <vTaskSwitchContext>
 800ff30:	b662      	cpsie	i
 800ff32:	bc0c      	pop	{r2, r3}
 800ff34:	6811      	ldr	r1, [r2, #0]
 800ff36:	6808      	ldr	r0, [r1, #0]
 800ff38:	3010      	adds	r0, #16
 800ff3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ff3c:	46a0      	mov	r8, r4
 800ff3e:	46a9      	mov	r9, r5
 800ff40:	46b2      	mov	sl, r6
 800ff42:	46bb      	mov	fp, r7
 800ff44:	f380 8809 	msr	PSP, r0
 800ff48:	3820      	subs	r0, #32
 800ff4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ff4c:	4718      	bx	r3
 800ff4e:	46c0      	nop			; (mov r8, r8)

0800ff50 <pxCurrentTCBConst>:
 800ff50:	20002060 	.word	0x20002060

0800ff54 <xPortSysTickHandler>:
{
 800ff54:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ff56:	f7ff ffd1 	bl	800fefc <ulSetInterruptMaskFromISR>
 800ff5a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800ff5c:	f7ff f928 	bl	800f1b0 <xTaskIncrementTick>
 800ff60:	2800      	cmp	r0, #0
 800ff62:	d003      	beq.n	800ff6c <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800ff64:	2280      	movs	r2, #128	; 0x80
 800ff66:	4b03      	ldr	r3, [pc, #12]	; (800ff74 <xPortSysTickHandler+0x20>)
 800ff68:	0552      	lsls	r2, r2, #21
 800ff6a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ff6c:	0020      	movs	r0, r4
 800ff6e:	f7ff ffcb 	bl	800ff08 <vClearInterruptMaskFromISR>
}
 800ff72:	bd10      	pop	{r4, pc}
 800ff74:	e000ed04 	.word	0xe000ed04

0800ff78 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff78:	4b11      	ldr	r3, [pc, #68]	; (800ffc0 <prvInsertBlockIntoFreeList+0x48>)
{
 800ff7a:	b530      	push	{r4, r5, lr}
 800ff7c:	001d      	movs	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff7e:	681a      	ldr	r2, [r3, #0]
 800ff80:	4282      	cmp	r2, r0
 800ff82:	d201      	bcs.n	800ff88 <prvInsertBlockIntoFreeList+0x10>
 800ff84:	0013      	movs	r3, r2
 800ff86:	e7fa      	b.n	800ff7e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff88:	685c      	ldr	r4, [r3, #4]
 800ff8a:	1919      	adds	r1, r3, r4
 800ff8c:	4288      	cmp	r0, r1
 800ff8e:	d103      	bne.n	800ff98 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff90:	6841      	ldr	r1, [r0, #4]
 800ff92:	0018      	movs	r0, r3
 800ff94:	1909      	adds	r1, r1, r4
 800ff96:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ff98:	6841      	ldr	r1, [r0, #4]
 800ff9a:	1844      	adds	r4, r0, r1
 800ff9c:	42a2      	cmp	r2, r4
 800ff9e:	d109      	bne.n	800ffb4 <prvInsertBlockIntoFreeList+0x3c>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ffa0:	68ac      	ldr	r4, [r5, #8]
 800ffa2:	42a2      	cmp	r2, r4
 800ffa4:	d006      	beq.n	800ffb4 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ffa6:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ffa8:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ffaa:	46a4      	mov	ip, r4
 800ffac:	4461      	add	r1, ip
 800ffae:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ffb0:	6002      	str	r2, [r0, #0]
 800ffb2:	e000      	b.n	800ffb6 <prvInsertBlockIntoFreeList+0x3e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ffb4:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ffb6:	4298      	cmp	r0, r3
 800ffb8:	d000      	beq.n	800ffbc <prvInsertBlockIntoFreeList+0x44>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ffba:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ffbc:	bd30      	pop	{r4, r5, pc}
 800ffbe:	46c0      	nop			; (mov r8, r8)
 800ffc0:	200021bc 	.word	0x200021bc

0800ffc4 <pvPortMalloc>:
{
 800ffc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffc6:	46c6      	mov	lr, r8
 800ffc8:	b500      	push	{lr}
 800ffca:	0005      	movs	r5, r0
	vTaskSuspendAll();
 800ffcc:	f7ff f8dc 	bl	800f188 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800ffd0:	4c37      	ldr	r4, [pc, #220]	; (80100b0 <pvPortMalloc+0xec>)
 800ffd2:	68a3      	ldr	r3, [r4, #8]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d02a      	beq.n	801002e <pvPortMalloc+0x6a>
 800ffd8:	68e6      	ldr	r6, [r4, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ffda:	422e      	tst	r6, r5
 800ffdc:	d143      	bne.n	8010066 <pvPortMalloc+0xa2>
			if( xWantedSize > 0 )
 800ffde:	2d00      	cmp	r5, #0
 800ffe0:	d041      	beq.n	8010066 <pvPortMalloc+0xa2>
				xWantedSize += xHeapStructSize;
 800ffe2:	002b      	movs	r3, r5
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ffe4:	2207      	movs	r2, #7
				xWantedSize += xHeapStructSize;
 800ffe6:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ffe8:	421a      	tst	r2, r3
 800ffea:	d001      	beq.n	800fff0 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ffec:	4393      	bics	r3, r2
 800ffee:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d038      	beq.n	8010066 <pvPortMalloc+0xa2>
 800fff4:	6962      	ldr	r2, [r4, #20]
 800fff6:	4690      	mov	r8, r2
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d334      	bcc.n	8010066 <pvPortMalloc+0xa2>
				pxBlock = xStart.pxNextFreeBlock;
 800fffc:	6825      	ldr	r5, [r4, #0]
				pxPreviousBlock = &xStart;
 800fffe:	0021      	movs	r1, r4
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010000:	e004      	b.n	801000c <pvPortMalloc+0x48>
 8010002:	6828      	ldr	r0, [r5, #0]
 8010004:	2800      	cmp	r0, #0
 8010006:	d004      	beq.n	8010012 <pvPortMalloc+0x4e>
 8010008:	0029      	movs	r1, r5
 801000a:	0005      	movs	r5, r0
 801000c:	686a      	ldr	r2, [r5, #4]
 801000e:	429a      	cmp	r2, r3
 8010010:	d3f7      	bcc.n	8010002 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8010012:	68a0      	ldr	r0, [r4, #8]
 8010014:	42a8      	cmp	r0, r5
 8010016:	d026      	beq.n	8010066 <pvPortMalloc+0xa2>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010018:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801001a:	680f      	ldr	r7, [r1, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801001c:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801001e:	1ad1      	subs	r1, r2, r3
 8010020:	2910      	cmp	r1, #16
 8010022:	d931      	bls.n	8010088 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010024:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010026:	0742      	lsls	r2, r0, #29
 8010028:	d029      	beq.n	801007e <pvPortMalloc+0xba>
 801002a:	b672      	cpsid	i
 801002c:	e7fe      	b.n	801002c <pvPortMalloc+0x68>
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801002e:	2107      	movs	r1, #7
	ulAddress = ( uint32_t ) ucHeap;
 8010030:	4b20      	ldr	r3, [pc, #128]	; (80100b4 <pvPortMalloc+0xf0>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010032:	4219      	tst	r1, r3
 8010034:	d020      	beq.n	8010078 <pvPortMalloc+0xb4>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8010036:	185a      	adds	r2, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010038:	438a      	bics	r2, r1
 801003a:	0011      	movs	r1, r2
	ulAddress -= xHeapStructSize;
 801003c:	4e1e      	ldr	r6, [pc, #120]	; (80100b8 <pvPortMalloc+0xf4>)
	xStart.xBlockSize = ( size_t ) 0;
 801003e:	2000      	movs	r0, #0
	ulAddress -= xHeapStructSize;
 8010040:	46b4      	mov	ip, r6
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010042:	2607      	movs	r6, #7
	ulAddress -= xHeapStructSize;
 8010044:	4463      	add	r3, ip
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010046:	43b3      	bics	r3, r6
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010048:	2680      	movs	r6, #128	; 0x80
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 801004a:	1a9a      	subs	r2, r3, r2
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801004c:	0636      	lsls	r6, r6, #24
	xStart.xBlockSize = ( size_t ) 0;
 801004e:	6060      	str	r0, [r4, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010050:	6021      	str	r1, [r4, #0]
	pxEnd->xBlockSize = 0;
 8010052:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010054:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) ulAddress;
 8010056:	60a3      	str	r3, [r4, #8]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 8010058:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801005a:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801005c:	6122      	str	r2, [r4, #16]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801005e:	6162      	str	r2, [r4, #20]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010060:	60e6      	str	r6, [r4, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010062:	422e      	tst	r6, r5
 8010064:	d0bb      	beq.n	800ffde <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
 8010066:	f7ff f92f 	bl	800f2c8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 801006a:	f7fd fc55 	bl	800d918 <vApplicationMallocFailedHook>
 801006e:	2700      	movs	r7, #0
}
 8010070:	0038      	movs	r0, r7
 8010072:	bc04      	pop	{r2}
 8010074:	4690      	mov	r8, r2
 8010076:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010078:	001a      	movs	r2, r3
 801007a:	0019      	movs	r1, r3
 801007c:	e7de      	b.n	801003c <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801007e:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010080:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8010082:	f7ff ff79 	bl	800ff78 <prvInsertBlockIntoFreeList>
 8010086:	686a      	ldr	r2, [r5, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010088:	4643      	mov	r3, r8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801008a:	6921      	ldr	r1, [r4, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801008c:	1a9b      	subs	r3, r3, r2
 801008e:	6163      	str	r3, [r4, #20]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010090:	428b      	cmp	r3, r1
 8010092:	d200      	bcs.n	8010096 <pvPortMalloc+0xd2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010094:	6123      	str	r3, [r4, #16]
					pxBlock->pxNextFreeBlock = NULL;
 8010096:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010098:	4332      	orrs	r2, r6
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801009a:	3708      	adds	r7, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801009c:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801009e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80100a0:	f7ff f912 	bl	800f2c8 <xTaskResumeAll>
		if( pvReturn == NULL )
 80100a4:	2f00      	cmp	r7, #0
 80100a6:	d0e0      	beq.n	801006a <pvPortMalloc+0xa6>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80100a8:	077b      	lsls	r3, r7, #29
 80100aa:	d0e1      	beq.n	8010070 <pvPortMalloc+0xac>
 80100ac:	b672      	cpsid	i
 80100ae:	e7fe      	b.n	80100ae <pvPortMalloc+0xea>
 80100b0:	200021bc 	.word	0x200021bc
 80100b4:	200021d4 	.word	0x200021d4
 80100b8:	00004a30 	.word	0x00004a30

080100bc <vPortFree>:
{
 80100bc:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 80100be:	2800      	cmp	r0, #0
 80100c0:	d01b      	beq.n	80100fa <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80100c2:	4d0e      	ldr	r5, [pc, #56]	; (80100fc <vPortFree+0x40>)
 80100c4:	3808      	subs	r0, #8
 80100c6:	6843      	ldr	r3, [r0, #4]
 80100c8:	68ea      	ldr	r2, [r5, #12]
 80100ca:	0004      	movs	r4, r0
 80100cc:	421a      	tst	r2, r3
 80100ce:	d101      	bne.n	80100d4 <vPortFree+0x18>
 80100d0:	b672      	cpsid	i
 80100d2:	e7fe      	b.n	80100d2 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80100d4:	6801      	ldr	r1, [r0, #0]
 80100d6:	2900      	cmp	r1, #0
 80100d8:	d001      	beq.n	80100de <vPortFree+0x22>
 80100da:	b672      	cpsid	i
 80100dc:	e7fe      	b.n	80100dc <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80100de:	4393      	bics	r3, r2
 80100e0:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 80100e2:	f7ff f851 	bl	800f188 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80100e6:	696a      	ldr	r2, [r5, #20]
 80100e8:	6863      	ldr	r3, [r4, #4]
 80100ea:	4694      	mov	ip, r2
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80100ec:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 80100ee:	4463      	add	r3, ip
 80100f0:	616b      	str	r3, [r5, #20]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80100f2:	f7ff ff41 	bl	800ff78 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80100f6:	f7ff f8e7 	bl	800f2c8 <xTaskResumeAll>
}
 80100fa:	bd70      	pop	{r4, r5, r6, pc}
 80100fc:	200021bc 	.word	0x200021bc

08010100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010100:	b510      	push	{r4, lr}
 8010102:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8010104:	f002 f952 	bl	80123ac <HAL_RCC_GetHCLKFreq>
 8010108:	21fa      	movs	r1, #250	; 0xfa
 801010a:	0089      	lsls	r1, r1, #2
 801010c:	f7f0 f820 	bl	8000150 <__udivsi3>
 8010110:	f000 fbec 	bl	80108ec <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8010114:	2001      	movs	r0, #1
 8010116:	2200      	movs	r2, #0
 8010118:	0021      	movs	r1, r4
 801011a:	4240      	negs	r0, r0
 801011c:	f000 fba6 	bl	801086c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8010120:	2000      	movs	r0, #0
 8010122:	bd10      	pop	{r4, pc}

08010124 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010124:	2110      	movs	r1, #16
 8010126:	4a06      	ldr	r2, [pc, #24]	; (8010140 <HAL_Init+0x1c>)
{
 8010128:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801012a:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 801012c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801012e:	430b      	orrs	r3, r1
 8010130:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8010132:	f7ff ffe5 	bl	8010100 <HAL_InitTick>
  HAL_MspInit();
 8010136:	f001 fd2d 	bl	8011b94 <HAL_MspInit>
}
 801013a:	2000      	movs	r0, #0
 801013c:	bd10      	pop	{r4, pc}
 801013e:	46c0      	nop			; (mov r8, r8)
 8010140:	40022000 	.word	0x40022000

08010144 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8010144:	4a02      	ldr	r2, [pc, #8]	; (8010150 <HAL_IncTick+0xc>)
 8010146:	6813      	ldr	r3, [r2, #0]
 8010148:	3301      	adds	r3, #1
 801014a:	6013      	str	r3, [r2, #0]
}
 801014c:	4770      	bx	lr
 801014e:	46c0      	nop			; (mov r8, r8)
 8010150:	20006c0c 	.word	0x20006c0c

08010154 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010154:	4b01      	ldr	r3, [pc, #4]	; (801015c <HAL_GetTick+0x8>)
 8010156:	6818      	ldr	r0, [r3, #0]
}
 8010158:	4770      	bx	lr
 801015a:	46c0      	nop			; (mov r8, r8)
 801015c:	20006c0c 	.word	0x20006c0c

08010160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8010160:	b510      	push	{r4, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8010166:	f7ff fff5 	bl	8010154 <HAL_GetTick>
 801016a:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 801016c:	f7ff fff2 	bl	8010154 <HAL_GetTick>
 8010170:	9b01      	ldr	r3, [sp, #4]
 8010172:	1b00      	subs	r0, r0, r4
 8010174:	4298      	cmp	r0, r3
 8010176:	d3f9      	bcc.n	801016c <HAL_Delay+0xc>
  {
  }
}
 8010178:	b002      	add	sp, #8
 801017a:	bd10      	pop	{r4, pc}

0801017c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 801017c:	4b01      	ldr	r3, [pc, #4]	; (8010184 <HAL_GetREVID+0x8>)
 801017e:	6818      	ldr	r0, [r3, #0]
 8010180:	0c00      	lsrs	r0, r0, #16
}
 8010182:	4770      	bx	lr
 8010184:	40015800 	.word	0x40015800

08010188 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010188:	4b02      	ldr	r3, [pc, #8]	; (8010194 <HAL_GetDEVID+0xc>)
 801018a:	6818      	ldr	r0, [r3, #0]
 801018c:	0500      	lsls	r0, r0, #20
 801018e:	0d00      	lsrs	r0, r0, #20
}
 8010190:	4770      	bx	lr
 8010192:	46c0      	nop			; (mov r8, r8)
 8010194:	40015800 	.word	0x40015800

08010198 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010198:	2303      	movs	r3, #3
 801019a:	6802      	ldr	r2, [r0, #0]
{
 801019c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 801019e:	6891      	ldr	r1, [r2, #8]
{
 80101a0:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80101a2:	400b      	ands	r3, r1
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	d001      	beq.n	80101ac <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80101a8:	2000      	movs	r0, #0
}
 80101aa:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80101ac:	6811      	ldr	r1, [r2, #0]
 80101ae:	420b      	tst	r3, r1
 80101b0:	d00e      	beq.n	80101d0 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80101b2:	2305      	movs	r3, #5
 80101b4:	6891      	ldr	r1, [r2, #8]
 80101b6:	400b      	ands	r3, r1
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d00d      	beq.n	80101d8 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80101bc:	2210      	movs	r2, #16
 80101be:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80101c0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80101c2:	4313      	orrs	r3, r2
 80101c4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80101c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80101c8:	3a0f      	subs	r2, #15
 80101ca:	4313      	orrs	r3, r2
 80101cc:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80101ce:	e7ec      	b.n	80101aa <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 80101d0:	68d3      	ldr	r3, [r2, #12]
 80101d2:	041b      	lsls	r3, r3, #16
 80101d4:	d4ed      	bmi.n	80101b2 <ADC_Disable+0x1a>
 80101d6:	e7e7      	b.n	80101a8 <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 80101d8:	2102      	movs	r1, #2
 80101da:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80101dc:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 80101de:	430b      	orrs	r3, r1
 80101e0:	6093      	str	r3, [r2, #8]
 80101e2:	2303      	movs	r3, #3
 80101e4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80101e6:	f7ff ffb5 	bl	8010154 <HAL_GetTick>
 80101ea:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80101ec:	e004      	b.n	80101f8 <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80101ee:	f7ff ffb1 	bl	8010154 <HAL_GetTick>
 80101f2:	1b80      	subs	r0, r0, r6
 80101f4:	2802      	cmp	r0, #2
 80101f6:	d804      	bhi.n	8010202 <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80101f8:	6823      	ldr	r3, [r4, #0]
 80101fa:	689b      	ldr	r3, [r3, #8]
 80101fc:	421d      	tst	r5, r3
 80101fe:	d1f6      	bne.n	80101ee <ADC_Disable+0x56>
 8010200:	e7d2      	b.n	80101a8 <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010202:	2210      	movs	r2, #16
 8010204:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8010206:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010208:	4313      	orrs	r3, r2
 801020a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801020c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801020e:	431d      	orrs	r5, r3
 8010210:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010212:	e7ca      	b.n	80101aa <ADC_Disable+0x12>

08010214 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 8010214:	2300      	movs	r3, #0
{
 8010216:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010218:	6802      	ldr	r2, [r0, #0]
{
 801021a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 801021c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 801021e:	6891      	ldr	r1, [r2, #8]
 8010220:	3303      	adds	r3, #3
{
 8010222:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010224:	400b      	ands	r3, r1
 8010226:	2b01      	cmp	r3, #1
 8010228:	d031      	beq.n	801028e <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 801022a:	6891      	ldr	r1, [r2, #8]
 801022c:	4b20      	ldr	r3, [pc, #128]	; (80102b0 <ADC_Enable+0x9c>)
 801022e:	4219      	tst	r1, r3
 8010230:	d122      	bne.n	8010278 <ADC_Enable+0x64>
    __HAL_ADC_ENABLE(hadc);
 8010232:	2101      	movs	r1, #1
 8010234:	6893      	ldr	r3, [r2, #8]
 8010236:	430b      	orrs	r3, r1
 8010238:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 801023a:	4b1e      	ldr	r3, [pc, #120]	; (80102b4 <ADC_Enable+0xa0>)
 801023c:	491e      	ldr	r1, [pc, #120]	; (80102b8 <ADC_Enable+0xa4>)
 801023e:	6818      	ldr	r0, [r3, #0]
 8010240:	f7ef ff86 	bl	8000150 <__udivsi3>
 8010244:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8010246:	9b01      	ldr	r3, [sp, #4]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d005      	beq.n	8010258 <ADC_Enable+0x44>
      wait_loop_index--;
 801024c:	9b01      	ldr	r3, [sp, #4]
 801024e:	3b01      	subs	r3, #1
 8010250:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8010252:	9b01      	ldr	r3, [sp, #4]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d1f9      	bne.n	801024c <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 8010258:	f7ff ff7c 	bl	8010154 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801025c:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 801025e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8010260:	e004      	b.n	801026c <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010262:	f7ff ff77 	bl	8010154 <HAL_GetTick>
 8010266:	1b80      	subs	r0, r0, r6
 8010268:	2802      	cmp	r0, #2
 801026a:	d818      	bhi.n	801029e <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801026c:	6823      	ldr	r3, [r4, #0]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	421d      	tst	r5, r3
 8010272:	d0f6      	beq.n	8010262 <ADC_Enable+0x4e>
  return HAL_OK;
 8010274:	2000      	movs	r0, #0
 8010276:	e008      	b.n	801028a <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010278:	2210      	movs	r2, #16
      return HAL_ERROR;
 801027a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801027c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801027e:	4313      	orrs	r3, r2
 8010280:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010282:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010284:	3a0f      	subs	r2, #15
 8010286:	4313      	orrs	r3, r2
 8010288:	64a3      	str	r3, [r4, #72]	; 0x48
}
 801028a:	b002      	add	sp, #8
 801028c:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 801028e:	6811      	ldr	r1, [r2, #0]
 8010290:	420b      	tst	r3, r1
 8010292:	d1ef      	bne.n	8010274 <ADC_Enable+0x60>
 8010294:	68d3      	ldr	r3, [r2, #12]
 8010296:	041b      	lsls	r3, r3, #16
 8010298:	d5c7      	bpl.n	801022a <ADC_Enable+0x16>
  return HAL_OK;
 801029a:	2000      	movs	r0, #0
 801029c:	e7f5      	b.n	801028a <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801029e:	2210      	movs	r2, #16
 80102a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80102a2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80102a4:	4313      	orrs	r3, r2
 80102a6:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80102a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80102aa:	431d      	orrs	r5, r3
 80102ac:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 80102ae:	e7ec      	b.n	801028a <ADC_Enable+0x76>
 80102b0:	80000017 	.word	0x80000017
 80102b4:	200000b0 	.word	0x200000b0
 80102b8:	000f4240 	.word	0x000f4240

080102bc <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80102bc:	2204      	movs	r2, #4
 80102be:	6803      	ldr	r3, [r0, #0]
{
 80102c0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80102c2:	6899      	ldr	r1, [r3, #8]
{
 80102c4:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80102c6:	420a      	tst	r2, r1
 80102c8:	d010      	beq.n	80102ec <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80102ca:	6899      	ldr	r1, [r3, #8]
 80102cc:	420a      	tst	r2, r1
 80102ce:	d10f      	bne.n	80102f0 <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80102d0:	f7ff ff40 	bl	8010154 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80102d4:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 80102d6:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80102d8:	e004      	b.n	80102e4 <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80102da:	f7ff ff3b 	bl	8010154 <HAL_GetTick>
 80102de:	1b80      	subs	r0, r0, r6
 80102e0:	2802      	cmp	r0, #2
 80102e2:	d80d      	bhi.n	8010300 <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80102e4:	6823      	ldr	r3, [r4, #0]
 80102e6:	689b      	ldr	r3, [r3, #8]
 80102e8:	421d      	tst	r5, r3
 80102ea:	d1f6      	bne.n	80102da <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80102ec:	2000      	movs	r0, #0
}
 80102ee:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80102f0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80102f2:	0792      	lsls	r2, r2, #30
 80102f4:	d4ec      	bmi.n	80102d0 <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80102f6:	2110      	movs	r1, #16
 80102f8:	689a      	ldr	r2, [r3, #8]
 80102fa:	430a      	orrs	r2, r1
 80102fc:	609a      	str	r2, [r3, #8]
 80102fe:	e7e7      	b.n	80102d0 <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010300:	2210      	movs	r2, #16
 8010302:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010304:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010306:	4313      	orrs	r3, r2
 8010308:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801030a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801030c:	3a0f      	subs	r2, #15
 801030e:	4313      	orrs	r3, r2
 8010310:	64a3      	str	r3, [r4, #72]	; 0x48
 8010312:	e7ec      	b.n	80102ee <ADC_ConversionStop+0x32>

08010314 <HAL_ADC_Init>:
{
 8010314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010316:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8010318:	d100      	bne.n	801031c <HAL_ADC_Init+0x8>
 801031a:	e075      	b.n	8010408 <HAL_ADC_Init+0xf4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 801031c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801031e:	2b00      	cmp	r3, #0
 8010320:	d068      	beq.n	80103f4 <HAL_ADC_Init+0xe0>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8010322:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010324:	06db      	lsls	r3, r3, #27
 8010326:	d505      	bpl.n	8010334 <HAL_ADC_Init+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010328:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 801032a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801032c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801032e:	4313      	orrs	r3, r2
 8010330:	6463      	str	r3, [r4, #68]	; 0x44
}
 8010332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8010334:	2004      	movs	r0, #4
 8010336:	6823      	ldr	r3, [r4, #0]
 8010338:	689a      	ldr	r2, [r3, #8]
 801033a:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 801033c:	d1f4      	bne.n	8010328 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 801033e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010340:	4942      	ldr	r1, [pc, #264]	; (801044c <HAL_ADC_Init+0x138>)
 8010342:	400a      	ands	r2, r1
 8010344:	3106      	adds	r1, #6
 8010346:	31ff      	adds	r1, #255	; 0xff
 8010348:	430a      	orrs	r2, r1
 801034a:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 801034c:	2203      	movs	r2, #3
 801034e:	6899      	ldr	r1, [r3, #8]
 8010350:	400a      	ands	r2, r1
 8010352:	2a01      	cmp	r2, #1
 8010354:	d073      	beq.n	801043e <HAL_ADC_Init+0x12a>
      MODIFY_REG(hadc->Instance->CFGR1,
 8010356:	2118      	movs	r1, #24
 8010358:	68da      	ldr	r2, [r3, #12]
 801035a:	438a      	bics	r2, r1
 801035c:	68a1      	ldr	r1, [r4, #8]
 801035e:	430a      	orrs	r2, r1
 8010360:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8010362:	691a      	ldr	r2, [r3, #16]
 8010364:	6861      	ldr	r1, [r4, #4]
 8010366:	0092      	lsls	r2, r2, #2
 8010368:	0892      	lsrs	r2, r2, #2
 801036a:	430a      	orrs	r2, r1
 801036c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 801036e:	68da      	ldr	r2, [r3, #12]
 8010370:	4937      	ldr	r1, [pc, #220]	; (8010450 <HAL_ADC_Init+0x13c>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010372:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8010374:	400a      	ands	r2, r1
 8010376:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010378:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 801037a:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 801037c:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 801037e:	69e2      	ldr	r2, [r4, #28]
 8010380:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010382:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010384:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010386:	3a01      	subs	r2, #1
 8010388:	1e55      	subs	r5, r2, #1
 801038a:	41aa      	sbcs	r2, r5
 801038c:	0315      	lsls	r5, r2, #12
 801038e:	68e2      	ldr	r2, [r4, #12]
 8010390:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010392:	6922      	ldr	r2, [r4, #16]
 8010394:	4339      	orrs	r1, r7
 8010396:	2a02      	cmp	r2, #2
 8010398:	d100      	bne.n	801039c <HAL_ADC_Init+0x88>
 801039a:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 801039c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801039e:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80103a0:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 80103a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80103a4:	432a      	orrs	r2, r5
 80103a6:	4302      	orrs	r2, r0
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 80103a8:	2901      	cmp	r1, #1
 80103aa:	d042      	beq.n	8010432 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80103ac:	20c2      	movs	r0, #194	; 0xc2
 80103ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80103b0:	30ff      	adds	r0, #255	; 0xff
 80103b2:	4281      	cmp	r1, r0
 80103b4:	d002      	beq.n	80103bc <HAL_ADC_Init+0xa8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80103b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80103b8:	4301      	orrs	r1, r0
 80103ba:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80103bc:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80103be:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80103c0:	4311      	orrs	r1, r2
 80103c2:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80103c4:	2180      	movs	r1, #128	; 0x80
 80103c6:	0549      	lsls	r1, r1, #21
 80103c8:	428d      	cmp	r5, r1
 80103ca:	d01f      	beq.n	801040c <HAL_ADC_Init+0xf8>
 80103cc:	1e69      	subs	r1, r5, #1
 80103ce:	2906      	cmp	r1, #6
 80103d0:	d91c      	bls.n	801040c <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	491f      	ldr	r1, [pc, #124]	; (8010454 <HAL_ADC_Init+0x140>)
 80103d6:	400b      	ands	r3, r1
 80103d8:	4293      	cmp	r3, r2
 80103da:	d020      	beq.n	801041e <HAL_ADC_Init+0x10a>
      ADC_STATE_CLR_SET(hadc->State,
 80103dc:	2212      	movs	r2, #18
 80103de:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 80103e0:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80103e2:	4393      	bics	r3, r2
 80103e4:	3a02      	subs	r2, #2
 80103e6:	4313      	orrs	r3, r2
 80103e8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80103ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80103ec:	3a0f      	subs	r2, #15
 80103ee:	4313      	orrs	r3, r2
 80103f0:	64a3      	str	r3, [r4, #72]	; 0x48
 80103f2:	e79e      	b.n	8010332 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 80103f4:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 80103f6:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 80103f8:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80103fa:	f7fc f815 	bl	800c428 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80103fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010400:	06db      	lsls	r3, r3, #27
 8010402:	d500      	bpl.n	8010406 <HAL_ADC_Init+0xf2>
 8010404:	e790      	b.n	8010328 <HAL_ADC_Init+0x14>
 8010406:	e795      	b.n	8010334 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8010408:	2001      	movs	r0, #1
 801040a:	e792      	b.n	8010332 <HAL_ADC_Init+0x1e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 801040c:	2107      	movs	r1, #7
 801040e:	6958      	ldr	r0, [r3, #20]
 8010410:	4388      	bics	r0, r1
 8010412:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8010414:	6958      	ldr	r0, [r3, #20]
 8010416:	4029      	ands	r1, r5
 8010418:	4301      	orrs	r1, r0
 801041a:	6159      	str	r1, [r3, #20]
 801041c:	e7d9      	b.n	80103d2 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 801041e:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8010420:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8010422:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8010424:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010426:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8010428:	4393      	bics	r3, r2
 801042a:	3a02      	subs	r2, #2
 801042c:	4313      	orrs	r3, r2
 801042e:	6463      	str	r3, [r4, #68]	; 0x44
 8010430:	e77f      	b.n	8010332 <HAL_ADC_Init+0x1e>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010432:	2e00      	cmp	r6, #0
 8010434:	d1ba      	bne.n	80103ac <HAL_ADC_Init+0x98>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8010436:	2180      	movs	r1, #128	; 0x80
 8010438:	0249      	lsls	r1, r1, #9
 801043a:	430a      	orrs	r2, r1
 801043c:	e7b6      	b.n	80103ac <HAL_ADC_Init+0x98>
    if (ADC_IS_ENABLE(hadc) == RESET)
 801043e:	6819      	ldr	r1, [r3, #0]
 8010440:	420a      	tst	r2, r1
 8010442:	d194      	bne.n	801036e <HAL_ADC_Init+0x5a>
 8010444:	68da      	ldr	r2, [r3, #12]
 8010446:	0412      	lsls	r2, r2, #16
 8010448:	d491      	bmi.n	801036e <HAL_ADC_Init+0x5a>
 801044a:	e784      	b.n	8010356 <HAL_ADC_Init+0x42>
 801044c:	fffffefd 	.word	0xfffffefd
 8010450:	fffe0219 	.word	0xfffe0219
 8010454:	833fffe7 	.word	0x833fffe7

08010458 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010458:	6803      	ldr	r3, [r0, #0]
{
 801045a:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801045c:	689a      	ldr	r2, [r3, #8]
{
 801045e:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010460:	0752      	lsls	r2, r2, #29
 8010462:	d421      	bmi.n	80104a8 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 8010464:	2240      	movs	r2, #64	; 0x40
 8010466:	5c81      	ldrb	r1, [r0, r2]
 8010468:	2901      	cmp	r1, #1
 801046a:	d01d      	beq.n	80104a8 <HAL_ADC_Start+0x50>
 801046c:	2101      	movs	r1, #1
 801046e:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010470:	69c2      	ldr	r2, [r0, #28]
 8010472:	2a01      	cmp	r2, #1
 8010474:	d112      	bne.n	801049c <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 8010476:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010478:	490c      	ldr	r1, [pc, #48]	; (80104ac <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 801047a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 801047c:	4011      	ands	r1, r2
 801047e:	2280      	movs	r2, #128	; 0x80
 8010480:	0052      	lsls	r2, r2, #1
 8010482:	430a      	orrs	r2, r1
 8010484:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8010486:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 8010488:	2200      	movs	r2, #0
 801048a:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 801048c:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801048e:	321c      	adds	r2, #28
 8010490:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010492:	689a      	ldr	r2, [r3, #8]
 8010494:	393c      	subs	r1, #60	; 0x3c
 8010496:	430a      	orrs	r2, r1
 8010498:	609a      	str	r2, [r3, #8]
}
 801049a:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 801049c:	f7ff feba 	bl	8010214 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d1fa      	bne.n	801049a <HAL_ADC_Start+0x42>
 80104a4:	6823      	ldr	r3, [r4, #0]
 80104a6:	e7e6      	b.n	8010476 <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 80104a8:	2002      	movs	r0, #2
 80104aa:	e7f6      	b.n	801049a <HAL_ADC_Start+0x42>
 80104ac:	fffff0fe 	.word	0xfffff0fe

080104b0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80104b0:	2340      	movs	r3, #64	; 0x40
{ 
 80104b2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80104b4:	5cc2      	ldrb	r2, [r0, r3]
{ 
 80104b6:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80104b8:	2a01      	cmp	r2, #1
 80104ba:	d014      	beq.n	80104e6 <HAL_ADC_Stop+0x36>
 80104bc:	2501      	movs	r5, #1
 80104be:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80104c0:	f7ff fefc 	bl	80102bc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80104c4:	2800      	cmp	r0, #0
 80104c6:	d003      	beq.n	80104d0 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80104c8:	2340      	movs	r3, #64	; 0x40
 80104ca:	2200      	movs	r2, #0
 80104cc:	54e2      	strb	r2, [r4, r3]
}
 80104ce:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80104d0:	0020      	movs	r0, r4
 80104d2:	f7ff fe61 	bl	8010198 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80104d6:	2800      	cmp	r0, #0
 80104d8:	d1f6      	bne.n	80104c8 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80104da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80104dc:	4a03      	ldr	r2, [pc, #12]	; (80104ec <HAL_ADC_Stop+0x3c>)
 80104de:	4013      	ands	r3, r2
 80104e0:	431d      	orrs	r5, r3
 80104e2:	6465      	str	r5, [r4, #68]	; 0x44
 80104e4:	e7f0      	b.n	80104c8 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80104e6:	2002      	movs	r0, #2
 80104e8:	e7f1      	b.n	80104ce <HAL_ADC_Stop+0x1e>
 80104ea:	46c0      	nop			; (mov r8, r8)
 80104ec:	fffffefe 	.word	0xfffffefe

080104f0 <HAL_ADC_PollForConversion>:
{
 80104f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80104f2:	6943      	ldr	r3, [r0, #20]
{
 80104f4:	0006      	movs	r6, r0
 80104f6:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80104f8:	2b08      	cmp	r3, #8
 80104fa:	d04c      	beq.n	8010596 <HAL_ADC_PollForConversion+0xa6>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80104fc:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80104fe:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010500:	68db      	ldr	r3, [r3, #12]
 8010502:	07db      	lsls	r3, r3, #31
 8010504:	d43e      	bmi.n	8010584 <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 8010506:	f7ff fe25 	bl	8010154 <HAL_GetTick>
 801050a:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 801050c:	6832      	ldr	r2, [r6, #0]
 801050e:	e001      	b.n	8010514 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 8010510:	1c63      	adds	r3, r4, #1
 8010512:	d127      	bne.n	8010564 <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8010514:	6813      	ldr	r3, [r2, #0]
 8010516:	421d      	tst	r5, r3
 8010518:	d0fa      	beq.n	8010510 <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801051a:	2380      	movs	r3, #128	; 0x80
 801051c:	6c71      	ldr	r1, [r6, #68]	; 0x44
 801051e:	009b      	lsls	r3, r3, #2
 8010520:	430b      	orrs	r3, r1
 8010522:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010524:	23c0      	movs	r3, #192	; 0xc0
 8010526:	68d1      	ldr	r1, [r2, #12]
 8010528:	011b      	lsls	r3, r3, #4
 801052a:	4219      	tst	r1, r3
 801052c:	d113      	bne.n	8010556 <HAL_ADC_PollForConversion+0x66>
 801052e:	6a33      	ldr	r3, [r6, #32]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d110      	bne.n	8010556 <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010534:	6813      	ldr	r3, [r2, #0]
 8010536:	071b      	lsls	r3, r3, #28
 8010538:	d50d      	bpl.n	8010556 <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801053a:	6893      	ldr	r3, [r2, #8]
 801053c:	075b      	lsls	r3, r3, #29
 801053e:	d42f      	bmi.n	80105a0 <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010540:	210c      	movs	r1, #12
 8010542:	6853      	ldr	r3, [r2, #4]
 8010544:	438b      	bics	r3, r1
 8010546:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010548:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801054a:	491a      	ldr	r1, [pc, #104]	; (80105b4 <HAL_ADC_PollForConversion+0xc4>)
 801054c:	400b      	ands	r3, r1
 801054e:	3104      	adds	r1, #4
 8010550:	31ff      	adds	r1, #255	; 0xff
 8010552:	430b      	orrs	r3, r1
 8010554:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010556:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 8010558:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 801055a:	2b00      	cmp	r3, #0
 801055c:	d101      	bne.n	8010562 <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801055e:	330c      	adds	r3, #12
 8010560:	6013      	str	r3, [r2, #0]
}
 8010562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010564:	2c00      	cmp	r4, #0
 8010566:	d004      	beq.n	8010572 <HAL_ADC_PollForConversion+0x82>
 8010568:	f7ff fdf4 	bl	8010154 <HAL_GetTick>
 801056c:	1bc0      	subs	r0, r0, r7
 801056e:	42a0      	cmp	r0, r4
 8010570:	d9cc      	bls.n	801050c <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010572:	2204      	movs	r2, #4
 8010574:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 8010576:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010578:	4313      	orrs	r3, r2
 801057a:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 801057c:	2200      	movs	r2, #0
 801057e:	2340      	movs	r3, #64	; 0x40
 8010580:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8010582:	e7ee      	b.n	8010562 <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010584:	2220      	movs	r2, #32
 8010586:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010588:	4313      	orrs	r3, r2
 801058a:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 801058c:	2200      	movs	r2, #0
 801058e:	2340      	movs	r3, #64	; 0x40
 8010590:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010592:	2001      	movs	r0, #1
 8010594:	e7e5      	b.n	8010562 <HAL_ADC_PollForConversion+0x72>
  tickstart = HAL_GetTick();
 8010596:	f7ff fddd 	bl	8010154 <HAL_GetTick>
    tmp_Flag_EOC = ADC_FLAG_EOS;
 801059a:	2508      	movs	r5, #8
  tickstart = HAL_GetTick();
 801059c:	0007      	movs	r7, r0
 801059e:	e7b5      	b.n	801050c <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80105a0:	2120      	movs	r1, #32
 80105a2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80105a4:	430b      	orrs	r3, r1
 80105a6:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80105a8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80105aa:	391f      	subs	r1, #31
 80105ac:	430b      	orrs	r3, r1
 80105ae:	64b3      	str	r3, [r6, #72]	; 0x48
 80105b0:	e7d1      	b.n	8010556 <HAL_ADC_PollForConversion+0x66>
 80105b2:	46c0      	nop			; (mov r8, r8)
 80105b4:	fffffefe 	.word	0xfffffefe

080105b8 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80105b8:	2208      	movs	r2, #8
 80105ba:	6803      	ldr	r3, [r0, #0]
 80105bc:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 80105be:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80105c0:	4770      	bx	lr
 80105c2:	46c0      	nop			; (mov r8, r8)

080105c4 <HAL_ADC_ConvCpltCallback>:
 80105c4:	4770      	bx	lr
 80105c6:	46c0      	nop			; (mov r8, r8)

080105c8 <HAL_ADC_LevelOutOfWindowCallback>:
 80105c8:	4770      	bx	lr
 80105ca:	46c0      	nop			; (mov r8, r8)

080105cc <HAL_ADC_ErrorCallback>:
 80105cc:	4770      	bx	lr
 80105ce:	46c0      	nop			; (mov r8, r8)

080105d0 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80105d0:	2204      	movs	r2, #4
 80105d2:	6803      	ldr	r3, [r0, #0]
{
 80105d4:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80105d6:	6819      	ldr	r1, [r3, #0]
{
 80105d8:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80105da:	420a      	tst	r2, r1
 80105dc:	d04a      	beq.n	8010674 <HAL_ADC_IRQHandler+0xa4>
 80105de:	6859      	ldr	r1, [r3, #4]
 80105e0:	420a      	tst	r2, r1
 80105e2:	d047      	beq.n	8010674 <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80105e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80105e6:	06d2      	lsls	r2, r2, #27
 80105e8:	d404      	bmi.n	80105f4 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80105ea:	2280      	movs	r2, #128	; 0x80
 80105ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80105ee:	0092      	lsls	r2, r2, #2
 80105f0:	430a      	orrs	r2, r1
 80105f2:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80105f4:	22c0      	movs	r2, #192	; 0xc0
 80105f6:	68d9      	ldr	r1, [r3, #12]
 80105f8:	0112      	lsls	r2, r2, #4
 80105fa:	4211      	tst	r1, r2
 80105fc:	d113      	bne.n	8010626 <HAL_ADC_IRQHandler+0x56>
 80105fe:	6a22      	ldr	r2, [r4, #32]
 8010600:	2a00      	cmp	r2, #0
 8010602:	d110      	bne.n	8010626 <HAL_ADC_IRQHandler+0x56>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010604:	681a      	ldr	r2, [r3, #0]
 8010606:	0712      	lsls	r2, r2, #28
 8010608:	d50d      	bpl.n	8010626 <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801060a:	689a      	ldr	r2, [r3, #8]
 801060c:	0752      	lsls	r2, r2, #29
 801060e:	d444      	bmi.n	801069a <HAL_ADC_IRQHandler+0xca>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010610:	210c      	movs	r1, #12
 8010612:	685a      	ldr	r2, [r3, #4]
 8010614:	438a      	bics	r2, r1
 8010616:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8010618:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801061a:	4a24      	ldr	r2, [pc, #144]	; (80106ac <HAL_ADC_IRQHandler+0xdc>)
 801061c:	4013      	ands	r3, r2
 801061e:	3204      	adds	r2, #4
 8010620:	32ff      	adds	r2, #255	; 0xff
 8010622:	4313      	orrs	r3, r2
 8010624:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8010626:	0020      	movs	r0, r4
 8010628:	f7ff ffcc 	bl	80105c4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 801062c:	220c      	movs	r2, #12
 801062e:	6823      	ldr	r3, [r4, #0]
 8010630:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8010632:	2580      	movs	r5, #128	; 0x80
 8010634:	681a      	ldr	r2, [r3, #0]
 8010636:	4215      	tst	r5, r2
 8010638:	d002      	beq.n	8010640 <HAL_ADC_IRQHandler+0x70>
 801063a:	685a      	ldr	r2, [r3, #4]
 801063c:	4215      	tst	r5, r2
 801063e:	d121      	bne.n	8010684 <HAL_ADC_IRQHandler+0xb4>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8010640:	2210      	movs	r2, #16
 8010642:	6819      	ldr	r1, [r3, #0]
 8010644:	420a      	tst	r2, r1
 8010646:	d014      	beq.n	8010672 <HAL_ADC_IRQHandler+0xa2>
 8010648:	6859      	ldr	r1, [r3, #4]
 801064a:	420a      	tst	r2, r1
 801064c:	d011      	beq.n	8010672 <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 801064e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010650:	2a01      	cmp	r2, #1
 8010652:	d002      	beq.n	801065a <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8010654:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8010656:	07d2      	lsls	r2, r2, #31
 8010658:	d509      	bpl.n	801066e <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801065a:	2102      	movs	r1, #2
 801065c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 801065e:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8010660:	430a      	orrs	r2, r1
 8010662:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010664:	2210      	movs	r2, #16
 8010666:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8010668:	f7ff ffb0 	bl	80105cc <HAL_ADC_ErrorCallback>
 801066c:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801066e:	2210      	movs	r2, #16
 8010670:	601a      	str	r2, [r3, #0]
}
 8010672:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8010674:	2208      	movs	r2, #8
 8010676:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8010678:	420a      	tst	r2, r1
 801067a:	d0da      	beq.n	8010632 <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 801067c:	6859      	ldr	r1, [r3, #4]
 801067e:	420a      	tst	r2, r1
 8010680:	d0d7      	beq.n	8010632 <HAL_ADC_IRQHandler+0x62>
 8010682:	e7af      	b.n	80105e4 <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8010684:	2380      	movs	r3, #128	; 0x80
 8010686:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010688:	025b      	lsls	r3, r3, #9
 801068a:	4313      	orrs	r3, r2
 801068c:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 801068e:	0020      	movs	r0, r4
 8010690:	f7ff ff9a 	bl	80105c8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8010694:	6823      	ldr	r3, [r4, #0]
 8010696:	601d      	str	r5, [r3, #0]
 8010698:	e7d2      	b.n	8010640 <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801069a:	2220      	movs	r2, #32
 801069c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801069e:	4313      	orrs	r3, r2
 80106a0:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80106a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80106a4:	3a1f      	subs	r2, #31
 80106a6:	4313      	orrs	r3, r2
 80106a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80106aa:	e7bc      	b.n	8010626 <HAL_ADC_IRQHandler+0x56>
 80106ac:	fffffefe 	.word	0xfffffefe

080106b0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 80106b0:	2300      	movs	r3, #0
{
 80106b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106b4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80106b6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80106b8:	3340      	adds	r3, #64	; 0x40
 80106ba:	5cc2      	ldrb	r2, [r0, r3]
{
 80106bc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80106be:	2a01      	cmp	r2, #1
 80106c0:	d044      	beq.n	801074c <HAL_ADC_ConfigChannel+0x9c>
 80106c2:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80106c4:	6826      	ldr	r6, [r4, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80106c6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 80106c8:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80106ca:	68b3      	ldr	r3, [r6, #8]
 80106cc:	075b      	lsls	r3, r3, #29
 80106ce:	d509      	bpl.n	80106e4 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80106d0:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 80106d2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80106d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80106d6:	4313      	orrs	r3, r2
 80106d8:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80106da:	2340      	movs	r3, #64	; 0x40
 80106dc:	2200      	movs	r2, #0
 80106de:	54e2      	strb	r2, [r4, r3]
}
 80106e0:	b003      	add	sp, #12
 80106e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106e4:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 80106e6:	4d33      	ldr	r5, [pc, #204]	; (80107b4 <HAL_ADC_ConfigChannel+0x104>)
 80106e8:	001f      	movs	r7, r3
 80106ea:	46ac      	mov	ip, r5
 80106ec:	684d      	ldr	r5, [r1, #4]
 80106ee:	409a      	lsls	r2, r3
 80106f0:	3f10      	subs	r7, #16
 80106f2:	4565      	cmp	r5, ip
 80106f4:	d02c      	beq.n	8010750 <HAL_ADC_ConfigChannel+0xa0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80106f6:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 80106f8:	432a      	orrs	r2, r5
 80106fa:	62b2      	str	r2, [r6, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80106fc:	2280      	movs	r2, #128	; 0x80
 80106fe:	0552      	lsls	r2, r2, #21
 8010700:	4290      	cmp	r0, r2
 8010702:	d00f      	beq.n	8010724 <HAL_ADC_ConfigChannel+0x74>
 8010704:	3801      	subs	r0, #1
 8010706:	2806      	cmp	r0, #6
 8010708:	d90c      	bls.n	8010724 <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 801070a:	2207      	movs	r2, #7
 801070c:	6888      	ldr	r0, [r1, #8]
 801070e:	6971      	ldr	r1, [r6, #20]
 8010710:	4011      	ands	r1, r2
 8010712:	4288      	cmp	r0, r1
 8010714:	d006      	beq.n	8010724 <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010716:	6971      	ldr	r1, [r6, #20]
 8010718:	4391      	bics	r1, r2
 801071a:	6171      	str	r1, [r6, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 801071c:	6971      	ldr	r1, [r6, #20]
 801071e:	4002      	ands	r2, r0
 8010720:	430a      	orrs	r2, r1
 8010722:	6172      	str	r2, [r6, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010724:	2f02      	cmp	r7, #2
 8010726:	d80f      	bhi.n	8010748 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010728:	4923      	ldr	r1, [pc, #140]	; (80107b8 <HAL_ADC_ConfigChannel+0x108>)
 801072a:	680a      	ldr	r2, [r1, #0]
 801072c:	2b10      	cmp	r3, #16
 801072e:	d029      	beq.n	8010784 <HAL_ADC_ConfigChannel+0xd4>
 8010730:	3b11      	subs	r3, #17
 8010732:	4258      	negs	r0, r3
 8010734:	4143      	adcs	r3, r0
 8010736:	4821      	ldr	r0, [pc, #132]	; (80107bc <HAL_ADC_ConfigChannel+0x10c>)
 8010738:	425b      	negs	r3, r3
 801073a:	4003      	ands	r3, r0
 801073c:	2080      	movs	r0, #128	; 0x80
 801073e:	0440      	lsls	r0, r0, #17
 8010740:	4684      	mov	ip, r0
 8010742:	4463      	add	r3, ip
 8010744:	4313      	orrs	r3, r2
 8010746:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010748:	2000      	movs	r0, #0
 801074a:	e7c6      	b.n	80106da <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 801074c:	2002      	movs	r0, #2
 801074e:	e7c7      	b.n	80106e0 <HAL_ADC_ConfigChannel+0x30>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010750:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8010752:	4391      	bics	r1, r2
 8010754:	62b1      	str	r1, [r6, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010756:	2f02      	cmp	r7, #2
 8010758:	d8f6      	bhi.n	8010748 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801075a:	4a17      	ldr	r2, [pc, #92]	; (80107b8 <HAL_ADC_ConfigChannel+0x108>)
 801075c:	6811      	ldr	r1, [r2, #0]
 801075e:	2b10      	cmp	r3, #16
 8010760:	d00e      	beq.n	8010780 <HAL_ADC_ConfigChannel+0xd0>
 8010762:	3b11      	subs	r3, #17
 8010764:	001a      	movs	r2, r3
 8010766:	1e53      	subs	r3, r2, #1
 8010768:	419a      	sbcs	r2, r3
 801076a:	4b14      	ldr	r3, [pc, #80]	; (80107bc <HAL_ADC_ConfigChannel+0x10c>)
 801076c:	4252      	negs	r2, r2
 801076e:	4013      	ands	r3, r2
 8010770:	4a13      	ldr	r2, [pc, #76]	; (80107c0 <HAL_ADC_ConfigChannel+0x110>)
 8010772:	4694      	mov	ip, r2
 8010774:	4463      	add	r3, ip
 8010776:	4a10      	ldr	r2, [pc, #64]	; (80107b8 <HAL_ADC_ConfigChannel+0x108>)
 8010778:	400b      	ands	r3, r1
 801077a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801077c:	2000      	movs	r0, #0
 801077e:	e7ac      	b.n	80106da <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010780:	4b10      	ldr	r3, [pc, #64]	; (80107c4 <HAL_ADC_ConfigChannel+0x114>)
 8010782:	e7f8      	b.n	8010776 <HAL_ADC_ConfigChannel+0xc6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010784:	2380      	movs	r3, #128	; 0x80
 8010786:	041b      	lsls	r3, r3, #16
 8010788:	431a      	orrs	r2, r3
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 801078a:	4b0f      	ldr	r3, [pc, #60]	; (80107c8 <HAL_ADC_ConfigChannel+0x118>)
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801078c:	600a      	str	r2, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 801078e:	6818      	ldr	r0, [r3, #0]
 8010790:	490e      	ldr	r1, [pc, #56]	; (80107cc <HAL_ADC_ConfigChannel+0x11c>)
 8010792:	f7ef fcdd 	bl	8000150 <__udivsi3>
 8010796:	0083      	lsls	r3, r0, #2
 8010798:	1818      	adds	r0, r3, r0
 801079a:	0040      	lsls	r0, r0, #1
 801079c:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 801079e:	9b01      	ldr	r3, [sp, #4]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d0d1      	beq.n	8010748 <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 80107a4:	9b01      	ldr	r3, [sp, #4]
 80107a6:	3b01      	subs	r3, #1
 80107a8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80107aa:	9b01      	ldr	r3, [sp, #4]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d1f9      	bne.n	80107a4 <HAL_ADC_ConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80107b0:	2000      	movs	r0, #0
 80107b2:	e792      	b.n	80106da <HAL_ADC_ConfigChannel+0x2a>
 80107b4:	00001001 	.word	0x00001001
 80107b8:	40012708 	.word	0x40012708
 80107bc:	ff400000 	.word	0xff400000
 80107c0:	ffbfffff 	.word	0xffbfffff
 80107c4:	ff7fffff 	.word	0xff7fffff
 80107c8:	200000b0 	.word	0x200000b0
 80107cc:	000f4240 	.word	0x000f4240

080107d0 <HAL_ADCEx_Calibration_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80107d0:	2340      	movs	r3, #64	; 0x40
{
 80107d2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80107d4:	5cc2      	ldrb	r2, [r0, r3]
{
 80107d6:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80107d8:	2a01      	cmp	r2, #1
 80107da:	d042      	beq.n	8010862 <HAL_ADCEx_Calibration_Start+0x92>
 80107dc:	2201      	movs	r2, #1
 80107de:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80107e0:	6802      	ldr	r2, [r0, #0]
 80107e2:	3b3d      	subs	r3, #61	; 0x3d
 80107e4:	6891      	ldr	r1, [r2, #8]
 80107e6:	400b      	ands	r3, r1
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d105      	bne.n	80107f8 <HAL_ADCEx_Calibration_Start+0x28>
 80107ec:	6811      	ldr	r1, [r2, #0]
 80107ee:	420b      	tst	r3, r1
 80107f0:	d126      	bne.n	8010840 <HAL_ADCEx_Calibration_Start+0x70>
 80107f2:	68d3      	ldr	r3, [r2, #12]
 80107f4:	041b      	lsls	r3, r3, #16
 80107f6:	d423      	bmi.n	8010840 <HAL_ADCEx_Calibration_Start+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80107f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80107fa:	491b      	ldr	r1, [pc, #108]	; (8010868 <HAL_ADCEx_Calibration_Start+0x98>)
 80107fc:	400b      	ands	r3, r1
 80107fe:	3106      	adds	r1, #6
 8010800:	31ff      	adds	r1, #255	; 0xff
 8010802:	430b      	orrs	r3, r1
 8010804:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8010806:	2380      	movs	r3, #128	; 0x80
 8010808:	6891      	ldr	r1, [r2, #8]
 801080a:	061b      	lsls	r3, r3, #24
 801080c:	430b      	orrs	r3, r1
 801080e:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 8010810:	f7ff fca0 	bl	8010154 <HAL_GetTick>
 8010814:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8010816:	e004      	b.n	8010822 <HAL_ADCEx_Calibration_Start+0x52>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8010818:	f7ff fc9c 	bl	8010154 <HAL_GetTick>
 801081c:	1b40      	subs	r0, r0, r5
 801081e:	2802      	cmp	r0, #2
 8010820:	d814      	bhi.n	801084c <HAL_ADCEx_Calibration_Start+0x7c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8010822:	6823      	ldr	r3, [r4, #0]
 8010824:	689b      	ldr	r3, [r3, #8]
 8010826:	2b00      	cmp	r3, #0
 8010828:	dbf6      	blt.n	8010818 <HAL_ADCEx_Calibration_Start+0x48>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801082a:	2203      	movs	r2, #3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801082c:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 801082e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010830:	4393      	bics	r3, r2
 8010832:	3a02      	subs	r2, #2
 8010834:	4313      	orrs	r3, r2
 8010836:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010838:	2340      	movs	r3, #64	; 0x40
 801083a:	2200      	movs	r2, #0
 801083c:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 801083e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010840:	2220      	movs	r2, #32
 8010842:	6c63      	ldr	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010844:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010846:	4313      	orrs	r3, r2
 8010848:	6463      	str	r3, [r4, #68]	; 0x44
 801084a:	e7f5      	b.n	8010838 <HAL_ADCEx_Calibration_Start+0x68>
        ADC_STATE_CLR_SET(hadc->State,
 801084c:	2212      	movs	r2, #18
 801084e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8010850:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8010852:	4393      	bics	r3, r2
 8010854:	3a02      	subs	r2, #2
 8010856:	4313      	orrs	r3, r2
 8010858:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 801085a:	2200      	movs	r2, #0
 801085c:	2340      	movs	r3, #64	; 0x40
 801085e:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8010860:	e7ed      	b.n	801083e <HAL_ADCEx_Calibration_Start+0x6e>
  __HAL_LOCK(hadc);
 8010862:	2002      	movs	r0, #2
 8010864:	e7eb      	b.n	801083e <HAL_ADCEx_Calibration_Start+0x6e>
 8010866:	46c0      	nop			; (mov r8, r8)
 8010868:	fffffefd 	.word	0xfffffefd

0801086c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801086c:	22ff      	movs	r2, #255	; 0xff
 801086e:	2303      	movs	r3, #3
 8010870:	b530      	push	{r4, r5, lr}
 8010872:	0014      	movs	r4, r2
 8010874:	b2c5      	uxtb	r5, r0
 8010876:	402b      	ands	r3, r5
 8010878:	00db      	lsls	r3, r3, #3
 801087a:	409c      	lsls	r4, r3
 801087c:	0189      	lsls	r1, r1, #6
 801087e:	400a      	ands	r2, r1
 8010880:	43e4      	mvns	r4, r4
 8010882:	409a      	lsls	r2, r3
  if((int32_t)(IRQn) < 0) {
 8010884:	2800      	cmp	r0, #0
 8010886:	db0b      	blt.n	80108a0 <HAL_NVIC_SetPriority+0x34>
 8010888:	4b0c      	ldr	r3, [pc, #48]	; (80108bc <HAL_NVIC_SetPriority+0x50>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801088a:	0880      	lsrs	r0, r0, #2
 801088c:	469c      	mov	ip, r3
 801088e:	23c0      	movs	r3, #192	; 0xc0
 8010890:	0080      	lsls	r0, r0, #2
 8010892:	4460      	add	r0, ip
 8010894:	009b      	lsls	r3, r3, #2
 8010896:	58c1      	ldr	r1, [r0, r3]
 8010898:	400c      	ands	r4, r1
 801089a:	4322      	orrs	r2, r4
 801089c:	50c2      	str	r2, [r0, r3]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 801089e:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80108a0:	230f      	movs	r3, #15
 80108a2:	4907      	ldr	r1, [pc, #28]	; (80108c0 <HAL_NVIC_SetPriority+0x54>)
 80108a4:	402b      	ands	r3, r5
 80108a6:	468c      	mov	ip, r1
 80108a8:	3b08      	subs	r3, #8
 80108aa:	089b      	lsrs	r3, r3, #2
 80108ac:	009b      	lsls	r3, r3, #2
 80108ae:	4463      	add	r3, ip
 80108b0:	69d9      	ldr	r1, [r3, #28]
 80108b2:	400c      	ands	r4, r1
 80108b4:	4322      	orrs	r2, r4
 80108b6:	61da      	str	r2, [r3, #28]
 80108b8:	e7f1      	b.n	801089e <HAL_NVIC_SetPriority+0x32>
 80108ba:	46c0      	nop			; (mov r8, r8)
 80108bc:	e000e100 	.word	0xe000e100
 80108c0:	e000ed00 	.word	0xe000ed00

080108c4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80108c4:	231f      	movs	r3, #31
 80108c6:	4018      	ands	r0, r3
 80108c8:	3b1e      	subs	r3, #30
 80108ca:	4083      	lsls	r3, r0
 80108cc:	4a01      	ldr	r2, [pc, #4]	; (80108d4 <HAL_NVIC_EnableIRQ+0x10>)
 80108ce:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80108d0:	4770      	bx	lr
 80108d2:	46c0      	nop			; (mov r8, r8)
 80108d4:	e000e100 	.word	0xe000e100

080108d8 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80108d8:	231f      	movs	r3, #31
 80108da:	4018      	ands	r0, r3
 80108dc:	3b1e      	subs	r3, #30
 80108de:	4083      	lsls	r3, r0
 80108e0:	2280      	movs	r2, #128	; 0x80
 80108e2:	4901      	ldr	r1, [pc, #4]	; (80108e8 <HAL_NVIC_DisableIRQ+0x10>)
 80108e4:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80108e6:	4770      	bx	lr
 80108e8:	e000e100 	.word	0xe000e100

080108ec <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80108ec:	4a0a      	ldr	r2, [pc, #40]	; (8010918 <HAL_SYSTICK_Config+0x2c>)
 80108ee:	1e43      	subs	r3, r0, #1
 80108f0:	2001      	movs	r0, #1
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d80e      	bhi.n	8010914 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80108f6:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80108f8:	4a08      	ldr	r2, [pc, #32]	; (801091c <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80108fa:	4809      	ldr	r0, [pc, #36]	; (8010920 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80108fc:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80108fe:	6a03      	ldr	r3, [r0, #32]
 8010900:	0609      	lsls	r1, r1, #24
 8010902:	021b      	lsls	r3, r3, #8
 8010904:	0a1b      	lsrs	r3, r3, #8
 8010906:	430b      	orrs	r3, r1
 8010908:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801090a:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801090c:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801090e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010910:	3307      	adds	r3, #7
 8010912:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010914:	4770      	bx	lr
 8010916:	46c0      	nop			; (mov r8, r8)
 8010918:	00ffffff 	.word	0x00ffffff
 801091c:	e000e010 	.word	0xe000e010
 8010920:	e000ed00 	.word	0xe000ed00

08010924 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010924:	4a05      	ldr	r2, [pc, #20]	; (801093c <HAL_SYSTICK_CLKSourceConfig+0x18>)
 8010926:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010928:	2804      	cmp	r0, #4
 801092a:	d003      	beq.n	8010934 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 801092c:	2104      	movs	r1, #4
 801092e:	438b      	bics	r3, r1
 8010930:	6013      	str	r3, [r2, #0]
  }
}
 8010932:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010934:	4318      	orrs	r0, r3
 8010936:	6010      	str	r0, [r2, #0]
 8010938:	e7fb      	b.n	8010932 <HAL_SYSTICK_CLKSourceConfig+0xe>
 801093a:	46c0      	nop			; (mov r8, r8)
 801093c:	e000e010 	.word	0xe000e010

08010940 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010942:	468c      	mov	ip, r1
 8010944:	6806      	ldr	r6, [r0, #0]
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8010946:	0891      	lsrs	r1, r2, #2
 8010948:	d010      	beq.n	801096c <CRC_Handle_8+0x2c>
 801094a:	4664      	mov	r4, ip
 801094c:	008f      	lsls	r7, r1, #2
 801094e:	4467      	add	r7, ip
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010950:	7823      	ldrb	r3, [r4, #0]
 8010952:	7865      	ldrb	r5, [r4, #1]
 8010954:	061b      	lsls	r3, r3, #24
 8010956:	042d      	lsls	r5, r5, #16
 8010958:	432b      	orrs	r3, r5
 801095a:	78e5      	ldrb	r5, [r4, #3]
 801095c:	432b      	orrs	r3, r5
 801095e:	78a5      	ldrb	r5, [r4, #2]
 8010960:	3404      	adds	r4, #4
 8010962:	022d      	lsls	r5, r5, #8
 8010964:	432b      	orrs	r3, r5
 8010966:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 8010968:	42a7      	cmp	r7, r4
 801096a:	d1f1      	bne.n	8010950 <CRC_Handle_8+0x10>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 801096c:	2303      	movs	r3, #3
 801096e:	401a      	ands	r2, r3
 8010970:	d00b      	beq.n	801098a <CRC_Handle_8+0x4a>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010972:	0089      	lsls	r1, r1, #2
 8010974:	4663      	mov	r3, ip
     if  (BufferLength%4 == 1)
 8010976:	2a01      	cmp	r2, #1
 8010978:	d013      	beq.n	80109a2 <CRC_Handle_8+0x62>
     }
     if  (BufferLength%4 == 2)
 801097a:	2a02      	cmp	r2, #2
 801097c:	d107      	bne.n	801098e <CRC_Handle_8+0x4e>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 801097e:	5c5a      	ldrb	r2, [r3, r1]
 8010980:	4461      	add	r1, ip
 8010982:	784b      	ldrb	r3, [r1, #1]
 8010984:	0212      	lsls	r2, r2, #8
 8010986:	4313      	orrs	r3, r2
 8010988:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 801098a:	6830      	ldr	r0, [r6, #0]
}
 801098c:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 801098e:	5c5a      	ldrb	r2, [r3, r1]
 8010990:	4461      	add	r1, ip
 8010992:	784b      	ldrb	r3, [r1, #1]
 8010994:	0212      	lsls	r2, r2, #8
 8010996:	4313      	orrs	r3, r2
 8010998:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 801099a:	788b      	ldrb	r3, [r1, #2]
 801099c:	7033      	strb	r3, [r6, #0]
 801099e:	6806      	ldr	r6, [r0, #0]
 80109a0:	e7f3      	b.n	801098a <CRC_Handle_8+0x4a>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 80109a2:	5ccb      	ldrb	r3, [r1, r3]
 80109a4:	7033      	strb	r3, [r6, #0]
 80109a6:	6806      	ldr	r6, [r0, #0]
 80109a8:	e7ef      	b.n	801098a <CRC_Handle_8+0x4a>
 80109aa:	46c0      	nop			; (mov r8, r8)

080109ac <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80109ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 80109ae:	0857      	lsrs	r7, r2, #1
 80109b0:	6805      	ldr	r5, [r0, #0]
 80109b2:	d00a      	beq.n	80109ca <CRC_Handle_16+0x1e>
 80109b4:	0008      	movs	r0, r1
 80109b6:	00be      	lsls	r6, r7, #2
 80109b8:	1876      	adds	r6, r6, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 80109ba:	8803      	ldrh	r3, [r0, #0]
 80109bc:	8844      	ldrh	r4, [r0, #2]
 80109be:	041b      	lsls	r3, r3, #16
 80109c0:	4323      	orrs	r3, r4
 80109c2:	3004      	adds	r0, #4
 80109c4:	602b      	str	r3, [r5, #0]
  for(i = 0; i < (BufferLength/2); i++)
 80109c6:	4286      	cmp	r6, r0
 80109c8:	d1f7      	bne.n	80109ba <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 80109ca:	07d3      	lsls	r3, r2, #31
 80109cc:	d502      	bpl.n	80109d4 <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 80109ce:	00bf      	lsls	r7, r7, #2
 80109d0:	5a7b      	ldrh	r3, [r7, r1]
 80109d2:	802b      	strh	r3, [r5, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80109d4:	6828      	ldr	r0, [r5, #0]
}
 80109d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080109d8 <HAL_CRC_Init>:
{
 80109d8:	b510      	push	{r4, lr}
 80109da:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 80109dc:	d01f      	beq.n	8010a1e <HAL_CRC_Init+0x46>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 80109de:	7f43      	ldrb	r3, [r0, #29]
 80109e0:	b2db      	uxtb	r3, r3
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d01d      	beq.n	8010a22 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80109e6:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80109e8:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80109ea:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80109ec:	f000 f8ae 	bl	8010b4c <HAL_CRCEx_Init>
 80109f0:	2800      	cmp	r0, #0
 80109f2:	d114      	bne.n	8010a1e <HAL_CRC_Init+0x46>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80109f4:	7963      	ldrb	r3, [r4, #5]
 80109f6:	6822      	ldr	r2, [r4, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d01d      	beq.n	8010a38 <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80109fc:	6923      	ldr	r3, [r4, #16]
 80109fe:	6113      	str	r3, [r2, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010a00:	2160      	movs	r1, #96	; 0x60
 8010a02:	6893      	ldr	r3, [r2, #8]
 8010a04:	438b      	bics	r3, r1
 8010a06:	6961      	ldr	r1, [r4, #20]
 8010a08:	430b      	orrs	r3, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010a0a:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010a0c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010a0e:	6893      	ldr	r3, [r2, #8]
 8010a10:	438b      	bics	r3, r1
 8010a12:	69a1      	ldr	r1, [r4, #24]
 8010a14:	430b      	orrs	r3, r1
 8010a16:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8010a18:	2301      	movs	r3, #1
 8010a1a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8010a1c:	e000      	b.n	8010a20 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010a1e:	2001      	movs	r0, #1
}
 8010a20:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8010a22:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8010a24:	f7fc fd34 	bl	800d490 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010a28:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010a2a:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010a2c:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010a2e:	f000 f88d 	bl	8010b4c <HAL_CRCEx_Init>
 8010a32:	2800      	cmp	r0, #0
 8010a34:	d0de      	beq.n	80109f4 <HAL_CRC_Init+0x1c>
 8010a36:	e7f2      	b.n	8010a1e <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8010a38:	3b01      	subs	r3, #1
 8010a3a:	6113      	str	r3, [r2, #16]
 8010a3c:	e7e0      	b.n	8010a00 <HAL_CRC_Init+0x28>
 8010a3e:	46c0      	nop			; (mov r8, r8)

08010a40 <HAL_CRC_Accumulate>:
{
 8010a40:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 8010a42:	7f03      	ldrb	r3, [r0, #28]
{
 8010a44:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010a46:	2b01      	cmp	r3, #1
 8010a48:	d021      	beq.n	8010a8e <HAL_CRC_Accumulate+0x4e>
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010a4e:	3301      	adds	r3, #1
 8010a50:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010a52:	6a03      	ldr	r3, [r0, #32]
 8010a54:	2b02      	cmp	r3, #2
 8010a56:	d017      	beq.n	8010a88 <HAL_CRC_Accumulate+0x48>
 8010a58:	2b03      	cmp	r3, #3
 8010a5a:	d00a      	beq.n	8010a72 <HAL_CRC_Accumulate+0x32>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010a5c:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010a5e:	2b01      	cmp	r3, #1
 8010a60:	d102      	bne.n	8010a68 <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010a62:	0020      	movs	r0, r4
 8010a64:	f7ff ff6c 	bl	8010940 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010a68:	2301      	movs	r3, #1
 8010a6a:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	7723      	strb	r3, [r4, #28]
}
 8010a70:	bd10      	pop	{r4, pc}
 8010a72:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010a74:	2a00      	cmp	r2, #0
 8010a76:	d005      	beq.n	8010a84 <HAL_CRC_Accumulate+0x44>
 8010a78:	0092      	lsls	r2, r2, #2
 8010a7a:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010a7c:	c908      	ldmia	r1!, {r3}
 8010a7e:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010a80:	428a      	cmp	r2, r1
 8010a82:	d1fb      	bne.n	8010a7c <HAL_CRC_Accumulate+0x3c>
      temp = hcrc->Instance->DR;
 8010a84:	6800      	ldr	r0, [r0, #0]
      break;
 8010a86:	e7ef      	b.n	8010a68 <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010a88:	f7ff ff90 	bl	80109ac <CRC_Handle_16>
      break;
 8010a8c:	e7ec      	b.n	8010a68 <HAL_CRC_Accumulate+0x28>
  __HAL_LOCK(hcrc); 
 8010a8e:	2002      	movs	r0, #2
 8010a90:	e7ee      	b.n	8010a70 <HAL_CRC_Accumulate+0x30>
 8010a92:	46c0      	nop			; (mov r8, r8)

08010a94 <HAL_CRC_Calculate>:
{
 8010a94:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 8010a96:	7f03      	ldrb	r3, [r0, #28]
{
 8010a98:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010a9a:	2b01      	cmp	r3, #1
 8010a9c:	d026      	beq.n	8010aec <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010a9e:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 8010aa0:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010aa2:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010aa4:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 8010aa6:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 8010aa8:	6898      	ldr	r0, [r3, #8]
 8010aaa:	4328      	orrs	r0, r5
 8010aac:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 8010aae:	6a20      	ldr	r0, [r4, #32]
 8010ab0:	2802      	cmp	r0, #2
 8010ab2:	d017      	beq.n	8010ae4 <HAL_CRC_Calculate+0x50>
 8010ab4:	2803      	cmp	r0, #3
 8010ab6:	d007      	beq.n	8010ac8 <HAL_CRC_Calculate+0x34>
 8010ab8:	2801      	cmp	r0, #1
 8010aba:	d00f      	beq.n	8010adc <HAL_CRC_Calculate+0x48>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010abc:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 8010abe:	2301      	movs	r3, #1
 8010ac0:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	7723      	strb	r3, [r4, #28]
}
 8010ac6:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8010ac8:	2a00      	cmp	r2, #0
 8010aca:	d005      	beq.n	8010ad8 <HAL_CRC_Calculate+0x44>
 8010acc:	0092      	lsls	r2, r2, #2
 8010ace:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010ad0:	c901      	ldmia	r1!, {r0}
 8010ad2:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 8010ad4:	4291      	cmp	r1, r2
 8010ad6:	d1fb      	bne.n	8010ad0 <HAL_CRC_Calculate+0x3c>
      temp = hcrc->Instance->DR;
 8010ad8:	6818      	ldr	r0, [r3, #0]
      break;
 8010ada:	e7f0      	b.n	8010abe <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010adc:	0020      	movs	r0, r4
 8010ade:	f7ff ff2f 	bl	8010940 <CRC_Handle_8>
      break;
 8010ae2:	e7ec      	b.n	8010abe <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010ae4:	0020      	movs	r0, r4
 8010ae6:	f7ff ff61 	bl	80109ac <CRC_Handle_16>
      break;
 8010aea:	e7e8      	b.n	8010abe <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010aec:	2002      	movs	r0, #2
 8010aee:	e7ea      	b.n	8010ac6 <HAL_CRC_Calculate+0x32>

08010af0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010af0:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010af2:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010af4:	2501      	movs	r5, #1
 8010af6:	e001      	b.n	8010afc <HAL_CRCEx_Polynomial_Set+0xc>
 8010af8:	3b01      	subs	r3, #1
 8010afa:	d312      	bcc.n	8010b22 <HAL_CRCEx_Polynomial_Set+0x32>
 8010afc:	002c      	movs	r4, r5
 8010afe:	409c      	lsls	r4, r3
 8010b00:	4221      	tst	r1, r4
 8010b02:	d0f9      	beq.n	8010af8 <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 8010b04:	2a10      	cmp	r2, #16
 8010b06:	d01c      	beq.n	8010b42 <HAL_CRCEx_Polynomial_Set+0x52>
 8010b08:	2a18      	cmp	r2, #24
 8010b0a:	d012      	beq.n	8010b32 <HAL_CRCEx_Polynomial_Set+0x42>
 8010b0c:	2a08      	cmp	r2, #8
 8010b0e:	d014      	beq.n	8010b3a <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010b10:	6800      	ldr	r0, [r0, #0]
 8010b12:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010b14:	2118      	movs	r1, #24
 8010b16:	6883      	ldr	r3, [r0, #8]
 8010b18:	438b      	bics	r3, r1
 8010b1a:	431a      	orrs	r2, r3
 8010b1c:	6082      	str	r2, [r0, #8]
 8010b1e:	2000      	movs	r0, #0
  
  /* Return function status */
  return HAL_OK;
}
 8010b20:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 8010b22:	2a10      	cmp	r2, #16
 8010b24:	d003      	beq.n	8010b2e <HAL_CRCEx_Polynomial_Set+0x3e>
 8010b26:	2a18      	cmp	r2, #24
 8010b28:	d001      	beq.n	8010b2e <HAL_CRCEx_Polynomial_Set+0x3e>
 8010b2a:	2a08      	cmp	r2, #8
 8010b2c:	d1f0      	bne.n	8010b10 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 8010b2e:	2001      	movs	r0, #1
 8010b30:	e7f6      	b.n	8010b20 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 8010b32:	2b06      	cmp	r3, #6
 8010b34:	d9ec      	bls.n	8010b10 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 8010b36:	2001      	movs	r0, #1
 8010b38:	e7f2      	b.n	8010b20 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 8010b3a:	2b0f      	cmp	r3, #15
 8010b3c:	d9e8      	bls.n	8010b10 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 8010b3e:	2001      	movs	r0, #1
 8010b40:	e7ee      	b.n	8010b20 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 8010b42:	2b07      	cmp	r3, #7
 8010b44:	d9e4      	bls.n	8010b10 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 8010b46:	2001      	movs	r0, #1
 8010b48:	e7ea      	b.n	8010b20 <HAL_CRCEx_Polynomial_Set+0x30>
 8010b4a:	46c0      	nop			; (mov r8, r8)

08010b4c <HAL_CRCEx_Init>:
{
 8010b4c:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010b4e:	7903      	ldrb	r3, [r0, #4]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d108      	bne.n	8010b66 <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010b54:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010b56:	6803      	ldr	r3, [r0, #0]
   return HAL_OK;
 8010b58:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010b5a:	4a07      	ldr	r2, [pc, #28]	; (8010b78 <HAL_CRCEx_Init+0x2c>)
 8010b5c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010b5e:	689a      	ldr	r2, [r3, #8]
 8010b60:	438a      	bics	r2, r1
 8010b62:	609a      	str	r2, [r3, #8]
}
 8010b64:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010b66:	68c2      	ldr	r2, [r0, #12]
 8010b68:	6881      	ldr	r1, [r0, #8]
 8010b6a:	f7ff ffc1 	bl	8010af0 <HAL_CRCEx_Polynomial_Set>
 8010b6e:	1e43      	subs	r3, r0, #1
 8010b70:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8010b72:	b2c0      	uxtb	r0, r0
 8010b74:	e7f6      	b.n	8010b64 <HAL_CRCEx_Init+0x18>
 8010b76:	46c0      	nop			; (mov r8, r8)
 8010b78:	04c11db7 	.word	0x04c11db7

08010b7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010b7c:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010b7e:	2800      	cmp	r0, #0
 8010b80:	d023      	beq.n	8010bca <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 8010b82:	2321      	movs	r3, #33	; 0x21
 8010b84:	5cc3      	ldrb	r3, [r0, r3]
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d01b      	beq.n	8010bc4 <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010b8c:	2121      	movs	r1, #33	; 0x21
 8010b8e:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010b90:	6804      	ldr	r4, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8010b92:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 8010b94:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010b96:	4a0e      	ldr	r2, [pc, #56]	; (8010bd0 <HAL_DMA_Init+0x54>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010b98:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010b9a:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8010b9c:	6843      	ldr	r3, [r0, #4]
 8010b9e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010ba0:	68c5      	ldr	r5, [r0, #12]
 8010ba2:	432b      	orrs	r3, r5
 8010ba4:	6905      	ldr	r5, [r0, #16]
 8010ba6:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010ba8:	6945      	ldr	r5, [r0, #20]
 8010baa:	432b      	orrs	r3, r5
 8010bac:	6985      	ldr	r5, [r0, #24]
 8010bae:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010bb0:	69c5      	ldr	r5, [r0, #28]
 8010bb2:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010bb4:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8010bb6:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8010bc0:	2000      	movs	r0, #0
}  
 8010bc2:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 8010bc4:	2220      	movs	r2, #32
 8010bc6:	5483      	strb	r3, [r0, r2]
 8010bc8:	e7e0      	b.n	8010b8c <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 8010bca:	2001      	movs	r0, #1
 8010bcc:	e7f9      	b.n	8010bc2 <HAL_DMA_Init+0x46>
 8010bce:	46c0      	nop			; (mov r8, r8)
 8010bd0:	ffffc00f 	.word	0xffffc00f

08010bd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010bd4:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8010bd6:	2420      	movs	r4, #32
 8010bd8:	5d05      	ldrb	r5, [r0, r4]
 8010bda:	2d01      	cmp	r5, #1
 8010bdc:	d023      	beq.n	8010c26 <HAL_DMA_Start_IT+0x52>
 8010bde:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010be0:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 8010be2:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010be4:	3401      	adds	r4, #1
 8010be6:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010be8:	6804      	ldr	r4, [r0, #0]
 8010bea:	6825      	ldr	r5, [r4, #0]
 8010bec:	43b5      	bics	r5, r6
 8010bee:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010bf0:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010bf2:	6843      	ldr	r3, [r0, #4]
 8010bf4:	2b10      	cmp	r3, #16
 8010bf6:	d013      	beq.n	8010c20 <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010bf8:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010bfa:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010bfc:	2202      	movs	r2, #2
  return HAL_OK;    
 8010bfe:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010c00:	6823      	ldr	r3, [r4, #0]
 8010c02:	4313      	orrs	r3, r2
 8010c04:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010c06:	6823      	ldr	r3, [r4, #0]
 8010c08:	3202      	adds	r2, #2
 8010c0a:	4313      	orrs	r3, r2
 8010c0c:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8010c0e:	6823      	ldr	r3, [r4, #0]
 8010c10:	3204      	adds	r2, #4
 8010c12:	4313      	orrs	r3, r2
 8010c14:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 8010c16:	6823      	ldr	r3, [r4, #0]
 8010c18:	3a07      	subs	r2, #7
 8010c1a:	4313      	orrs	r3, r2
 8010c1c:	6023      	str	r3, [r4, #0]
} 
 8010c1e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8010c20:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8010c22:	60e1      	str	r1, [r4, #12]
 8010c24:	e7ea      	b.n	8010bfc <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 8010c26:	2002      	movs	r0, #2
 8010c28:	e7f9      	b.n	8010c1e <HAL_DMA_Start_IT+0x4a>
 8010c2a:	46c0      	nop			; (mov r8, r8)

08010c2c <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 8010c2c:	2101      	movs	r1, #1
 8010c2e:	6802      	ldr	r2, [r0, #0]
{
 8010c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 8010c32:	6813      	ldr	r3, [r2, #0]
{
 8010c34:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8010c36:	438b      	bics	r3, r1
 8010c38:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010c3a:	f7ff fa8b 	bl	8010154 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010c3e:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 8010c40:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010c42:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010c44:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010c46:	e004      	b.n	8010c52 <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010c48:	f7ff fa84 	bl	8010154 <HAL_GetTick>
 8010c4c:	1bc0      	subs	r0, r0, r7
 8010c4e:	42b0      	cmp	r0, r6
 8010c50:	d809      	bhi.n	8010c66 <HAL_DMA_Abort+0x3a>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010c52:	6823      	ldr	r3, [r4, #0]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	402b      	ands	r3, r5
 8010c58:	d1f6      	bne.n	8010c48 <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 8010c5a:	2221      	movs	r2, #33	; 0x21
  return HAL_OK; 
 8010c5c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8010c5e:	54a5      	strb	r5, [r4, r2]
  __HAL_UNLOCK(hdma);
 8010c60:	3a01      	subs	r2, #1
 8010c62:	54a3      	strb	r3, [r4, r2]
}
 8010c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010c66:	2220      	movs	r2, #32
 8010c68:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010c6a:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010c6c:	4313      	orrs	r3, r2
 8010c6e:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010c70:	2321      	movs	r3, #33	; 0x21
 8010c72:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010c74:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8010c76:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 8010c78:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010c7a:	e7f3      	b.n	8010c64 <HAL_DMA_Abort+0x38>

08010c7c <HAL_DMA_IRQHandler>:
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010c7c:	6803      	ldr	r3, [r0, #0]
 8010c7e:	4aa2      	ldr	r2, [pc, #648]	; (8010f08 <HAL_DMA_IRQHandler+0x28c>)
{        
 8010c80:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010c82:	0019      	movs	r1, r3
{        
 8010c84:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d937      	bls.n	8010cfa <HAL_DMA_IRQHandler+0x7e>
 8010c8a:	48a0      	ldr	r0, [pc, #640]	; (8010f0c <HAL_DMA_IRQHandler+0x290>)
 8010c8c:	4da0      	ldr	r5, [pc, #640]	; (8010f10 <HAL_DMA_IRQHandler+0x294>)
 8010c8e:	6806      	ldr	r6, [r0, #0]
 8010c90:	42ab      	cmp	r3, r5
 8010c92:	d100      	bne.n	8010c96 <HAL_DMA_IRQHandler+0x1a>
 8010c94:	e0ed      	b.n	8010e72 <HAL_DMA_IRQHandler+0x1f6>
 8010c96:	4d9f      	ldr	r5, [pc, #636]	; (8010f14 <HAL_DMA_IRQHandler+0x298>)
 8010c98:	42ab      	cmp	r3, r5
 8010c9a:	d100      	bne.n	8010c9e <HAL_DMA_IRQHandler+0x22>
 8010c9c:	e334      	b.n	8011308 <HAL_DMA_IRQHandler+0x68c>
 8010c9e:	4d9e      	ldr	r5, [pc, #632]	; (8010f18 <HAL_DMA_IRQHandler+0x29c>)
 8010ca0:	42ab      	cmp	r3, r5
 8010ca2:	d100      	bne.n	8010ca6 <HAL_DMA_IRQHandler+0x2a>
 8010ca4:	e129      	b.n	8010efa <HAL_DMA_IRQHandler+0x27e>
 8010ca6:	4d9d      	ldr	r5, [pc, #628]	; (8010f1c <HAL_DMA_IRQHandler+0x2a0>)
 8010ca8:	42ab      	cmp	r3, r5
 8010caa:	d100      	bne.n	8010cae <HAL_DMA_IRQHandler+0x32>
 8010cac:	e34b      	b.n	8011346 <HAL_DMA_IRQHandler+0x6ca>
 8010cae:	4d9c      	ldr	r5, [pc, #624]	; (8010f20 <HAL_DMA_IRQHandler+0x2a4>)
 8010cb0:	42ab      	cmp	r3, r5
 8010cb2:	d100      	bne.n	8010cb6 <HAL_DMA_IRQHandler+0x3a>
 8010cb4:	e38b      	b.n	80113ce <HAL_DMA_IRQHandler+0x752>
 8010cb6:	4d9b      	ldr	r5, [pc, #620]	; (8010f24 <HAL_DMA_IRQHandler+0x2a8>)
 8010cb8:	42ab      	cmp	r3, r5
 8010cba:	d100      	bne.n	8010cbe <HAL_DMA_IRQHandler+0x42>
 8010cbc:	e3cf      	b.n	801145e <HAL_DMA_IRQHandler+0x7e2>
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d100      	bne.n	8010cc4 <HAL_DMA_IRQHandler+0x48>
 8010cc2:	e35e      	b.n	8011382 <HAL_DMA_IRQHandler+0x706>
 8010cc4:	4a98      	ldr	r2, [pc, #608]	; (8010f28 <HAL_DMA_IRQHandler+0x2ac>)
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d101      	bne.n	8010cce <HAL_DMA_IRQHandler+0x52>
 8010cca:	f000 fbe8 	bl	801149e <HAL_DMA_IRQHandler+0x822>
 8010cce:	4a97      	ldr	r2, [pc, #604]	; (8010f2c <HAL_DMA_IRQHandler+0x2b0>)
 8010cd0:	4293      	cmp	r3, r2
 8010cd2:	d101      	bne.n	8010cd8 <HAL_DMA_IRQHandler+0x5c>
 8010cd4:	f000 fc04 	bl	80114e0 <HAL_DMA_IRQHandler+0x864>
 8010cd8:	4a95      	ldr	r2, [pc, #596]	; (8010f30 <HAL_DMA_IRQHandler+0x2b4>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d101      	bne.n	8010ce2 <HAL_DMA_IRQHandler+0x66>
 8010cde:	f000 fc21 	bl	8011524 <HAL_DMA_IRQHandler+0x8a8>
 8010ce2:	4a94      	ldr	r2, [pc, #592]	; (8010f34 <HAL_DMA_IRQHandler+0x2b8>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d101      	bne.n	8010cec <HAL_DMA_IRQHandler+0x70>
 8010ce8:	f000 fc37 	bl	801155a <HAL_DMA_IRQHandler+0x8de>
 8010cec:	0332      	lsls	r2, r6, #12
 8010cee:	d43c      	bmi.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010cf0:	4a86      	ldr	r2, [pc, #536]	; (8010f0c <HAL_DMA_IRQHandler+0x290>)
 8010cf2:	6810      	ldr	r0, [r2, #0]
 8010cf4:	2280      	movs	r2, #128	; 0x80
 8010cf6:	02d2      	lsls	r2, r2, #11
 8010cf8:	e0c0      	b.n	8010e7c <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010cfa:	488f      	ldr	r0, [pc, #572]	; (8010f38 <HAL_DMA_IRQHandler+0x2bc>)
 8010cfc:	4d84      	ldr	r5, [pc, #528]	; (8010f10 <HAL_DMA_IRQHandler+0x294>)
 8010cfe:	6806      	ldr	r6, [r0, #0]
 8010d00:	42ab      	cmp	r3, r5
 8010d02:	d02e      	beq.n	8010d62 <HAL_DMA_IRQHandler+0xe6>
 8010d04:	4d83      	ldr	r5, [pc, #524]	; (8010f14 <HAL_DMA_IRQHandler+0x298>)
 8010d06:	42ab      	cmp	r3, r5
 8010d08:	d100      	bne.n	8010d0c <HAL_DMA_IRQHandler+0x90>
 8010d0a:	e2f6      	b.n	80112fa <HAL_DMA_IRQHandler+0x67e>
 8010d0c:	4d82      	ldr	r5, [pc, #520]	; (8010f18 <HAL_DMA_IRQHandler+0x29c>)
 8010d0e:	42ab      	cmp	r3, r5
 8010d10:	d100      	bne.n	8010d14 <HAL_DMA_IRQHandler+0x98>
 8010d12:	e0ea      	b.n	8010eea <HAL_DMA_IRQHandler+0x26e>
 8010d14:	4d81      	ldr	r5, [pc, #516]	; (8010f1c <HAL_DMA_IRQHandler+0x2a0>)
 8010d16:	42ab      	cmp	r3, r5
 8010d18:	d100      	bne.n	8010d1c <HAL_DMA_IRQHandler+0xa0>
 8010d1a:	e30c      	b.n	8011336 <HAL_DMA_IRQHandler+0x6ba>
 8010d1c:	4d80      	ldr	r5, [pc, #512]	; (8010f20 <HAL_DMA_IRQHandler+0x2a4>)
 8010d1e:	42ab      	cmp	r3, r5
 8010d20:	d100      	bne.n	8010d24 <HAL_DMA_IRQHandler+0xa8>
 8010d22:	e35b      	b.n	80113dc <HAL_DMA_IRQHandler+0x760>
 8010d24:	4d7f      	ldr	r5, [pc, #508]	; (8010f24 <HAL_DMA_IRQHandler+0x2a8>)
 8010d26:	42ab      	cmp	r3, r5
 8010d28:	d100      	bne.n	8010d2c <HAL_DMA_IRQHandler+0xb0>
 8010d2a:	e390      	b.n	801144e <HAL_DMA_IRQHandler+0x7d2>
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	d100      	bne.n	8010d32 <HAL_DMA_IRQHandler+0xb6>
 8010d30:	e31f      	b.n	8011372 <HAL_DMA_IRQHandler+0x6f6>
 8010d32:	4a7d      	ldr	r2, [pc, #500]	; (8010f28 <HAL_DMA_IRQHandler+0x2ac>)
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d100      	bne.n	8010d3a <HAL_DMA_IRQHandler+0xbe>
 8010d38:	e3aa      	b.n	8011490 <HAL_DMA_IRQHandler+0x814>
 8010d3a:	4a7c      	ldr	r2, [pc, #496]	; (8010f2c <HAL_DMA_IRQHandler+0x2b0>)
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	d100      	bne.n	8010d42 <HAL_DMA_IRQHandler+0xc6>
 8010d40:	e3c7      	b.n	80114d2 <HAL_DMA_IRQHandler+0x856>
 8010d42:	4a7b      	ldr	r2, [pc, #492]	; (8010f30 <HAL_DMA_IRQHandler+0x2b4>)
 8010d44:	4293      	cmp	r3, r2
 8010d46:	d101      	bne.n	8010d4c <HAL_DMA_IRQHandler+0xd0>
 8010d48:	f000 fbe4 	bl	8011514 <HAL_DMA_IRQHandler+0x898>
 8010d4c:	4a79      	ldr	r2, [pc, #484]	; (8010f34 <HAL_DMA_IRQHandler+0x2b8>)
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d100      	bne.n	8010d54 <HAL_DMA_IRQHandler+0xd8>
 8010d52:	e2e8      	b.n	8011326 <HAL_DMA_IRQHandler+0x6aa>
 8010d54:	0332      	lsls	r2, r6, #12
 8010d56:	d408      	bmi.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010d58:	4a77      	ldr	r2, [pc, #476]	; (8010f38 <HAL_DMA_IRQHandler+0x2bc>)
 8010d5a:	6810      	ldr	r0, [r2, #0]
 8010d5c:	2280      	movs	r2, #128	; 0x80
 8010d5e:	02d2      	lsls	r2, r2, #11
 8010d60:	e15f      	b.n	8011022 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010d62:	0732      	lsls	r2, r6, #28
 8010d64:	d401      	bmi.n	8010d6a <HAL_DMA_IRQHandler+0xee>
 8010d66:	f000 fc0a 	bl	801157e <HAL_DMA_IRQHandler+0x902>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010d6a:	2208      	movs	r2, #8
 8010d6c:	6818      	ldr	r0, [r3, #0]
 8010d6e:	4202      	tst	r2, r0
 8010d70:	d100      	bne.n	8010d74 <HAL_DMA_IRQHandler+0xf8>
 8010d72:	e1f4      	b.n	801115e <HAL_DMA_IRQHandler+0x4e2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010d74:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010d76:	4d66      	ldr	r5, [pc, #408]	; (8010f10 <HAL_DMA_IRQHandler+0x294>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010d78:	4390      	bics	r0, r2
 8010d7a:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010d7c:	4862      	ldr	r0, [pc, #392]	; (8010f08 <HAL_DMA_IRQHandler+0x28c>)
 8010d7e:	4283      	cmp	r3, r0
 8010d80:	d800      	bhi.n	8010d84 <HAL_DMA_IRQHandler+0x108>
 8010d82:	e1a9      	b.n	80110d8 <HAL_DMA_IRQHandler+0x45c>
 8010d84:	42ab      	cmp	r3, r5
 8010d86:	d100      	bne.n	8010d8a <HAL_DMA_IRQHandler+0x10e>
 8010d88:	e310      	b.n	80113ac <HAL_DMA_IRQHandler+0x730>
 8010d8a:	4a62      	ldr	r2, [pc, #392]	; (8010f14 <HAL_DMA_IRQHandler+0x298>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d100      	bne.n	8010d92 <HAL_DMA_IRQHandler+0x116>
 8010d90:	e337      	b.n	8011402 <HAL_DMA_IRQHandler+0x786>
 8010d92:	4a61      	ldr	r2, [pc, #388]	; (8010f18 <HAL_DMA_IRQHandler+0x29c>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d100      	bne.n	8010d9a <HAL_DMA_IRQHandler+0x11e>
 8010d98:	e2df      	b.n	801135a <HAL_DMA_IRQHandler+0x6de>
 8010d9a:	4a60      	ldr	r2, [pc, #384]	; (8010f1c <HAL_DMA_IRQHandler+0x2a0>)
 8010d9c:	4293      	cmp	r3, r2
 8010d9e:	d100      	bne.n	8010da2 <HAL_DMA_IRQHandler+0x126>
 8010da0:	e370      	b.n	8011484 <HAL_DMA_IRQHandler+0x808>
 8010da2:	4a5f      	ldr	r2, [pc, #380]	; (8010f20 <HAL_DMA_IRQHandler+0x2a4>)
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d100      	bne.n	8010daa <HAL_DMA_IRQHandler+0x12e>
 8010da8:	e38a      	b.n	80114c0 <HAL_DMA_IRQHandler+0x844>
 8010daa:	4a5e      	ldr	r2, [pc, #376]	; (8010f24 <HAL_DMA_IRQHandler+0x2a8>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d100      	bne.n	8010db2 <HAL_DMA_IRQHandler+0x136>
 8010db0:	e3a4      	b.n	80114fc <HAL_DMA_IRQHandler+0x880>
 8010db2:	4283      	cmp	r3, r0
 8010db4:	d100      	bne.n	8010db8 <HAL_DMA_IRQHandler+0x13c>
 8010db6:	e3cd      	b.n	8011554 <HAL_DMA_IRQHandler+0x8d8>
 8010db8:	4a5b      	ldr	r2, [pc, #364]	; (8010f28 <HAL_DMA_IRQHandler+0x2ac>)
 8010dba:	4293      	cmp	r3, r2
 8010dbc:	d100      	bne.n	8010dc0 <HAL_DMA_IRQHandler+0x144>
 8010dbe:	e3d8      	b.n	8011572 <HAL_DMA_IRQHandler+0x8f6>
 8010dc0:	4a5a      	ldr	r2, [pc, #360]	; (8010f2c <HAL_DMA_IRQHandler+0x2b0>)
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d100      	bne.n	8010dc8 <HAL_DMA_IRQHandler+0x14c>
 8010dc6:	e3d8      	b.n	801157a <HAL_DMA_IRQHandler+0x8fe>
 8010dc8:	4a59      	ldr	r2, [pc, #356]	; (8010f30 <HAL_DMA_IRQHandler+0x2b4>)
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	d100      	bne.n	8010dd0 <HAL_DMA_IRQHandler+0x154>
 8010dce:	e2c4      	b.n	801135a <HAL_DMA_IRQHandler+0x6de>
 8010dd0:	4a5a      	ldr	r2, [pc, #360]	; (8010f3c <HAL_DMA_IRQHandler+0x2c0>)
 8010dd2:	189a      	adds	r2, r3, r2
 8010dd4:	4250      	negs	r0, r2
 8010dd6:	4142      	adcs	r2, r0
 8010dd8:	4859      	ldr	r0, [pc, #356]	; (8010f40 <HAL_DMA_IRQHandler+0x2c4>)
 8010dda:	4252      	negs	r2, r2
 8010ddc:	4002      	ands	r2, r0
 8010dde:	2080      	movs	r0, #128	; 0x80
 8010de0:	0300      	lsls	r0, r0, #12
 8010de2:	4684      	mov	ip, r0
 8010de4:	4462      	add	r2, ip
 8010de6:	4849      	ldr	r0, [pc, #292]	; (8010f0c <HAL_DMA_IRQHandler+0x290>)
 8010de8:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010dea:	2001      	movs	r0, #1
 8010dec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010dee:	4302      	orrs	r2, r0
 8010df0:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010df2:	2221      	movs	r2, #33	; 0x21
 8010df4:	3003      	adds	r0, #3
 8010df6:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010df8:	2000      	movs	r0, #0
 8010dfa:	3a01      	subs	r2, #1
 8010dfc:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010dfe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e00:	2a00      	cmp	r2, #0
 8010e02:	d000      	beq.n	8010e06 <HAL_DMA_IRQHandler+0x18a>
 8010e04:	e1a7      	b.n	8011156 <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010e06:	4a41      	ldr	r2, [pc, #260]	; (8010f0c <HAL_DMA_IRQHandler+0x290>)
 8010e08:	4d41      	ldr	r5, [pc, #260]	; (8010f10 <HAL_DMA_IRQHandler+0x294>)
 8010e0a:	6810      	ldr	r0, [r2, #0]
 8010e0c:	2204      	movs	r2, #4
 8010e0e:	42ab      	cmp	r3, r5
 8010e10:	d034      	beq.n	8010e7c <HAL_DMA_IRQHandler+0x200>
 8010e12:	4d40      	ldr	r5, [pc, #256]	; (8010f14 <HAL_DMA_IRQHandler+0x298>)
 8010e14:	2240      	movs	r2, #64	; 0x40
 8010e16:	42ab      	cmp	r3, r5
 8010e18:	d030      	beq.n	8010e7c <HAL_DMA_IRQHandler+0x200>
 8010e1a:	4a3f      	ldr	r2, [pc, #252]	; (8010f18 <HAL_DMA_IRQHandler+0x29c>)
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	d100      	bne.n	8010e22 <HAL_DMA_IRQHandler+0x1a6>
 8010e20:	e3b1      	b.n	8011586 <HAL_DMA_IRQHandler+0x90a>
 8010e22:	4a3e      	ldr	r2, [pc, #248]	; (8010f1c <HAL_DMA_IRQHandler+0x2a0>)
 8010e24:	4293      	cmp	r3, r2
 8010e26:	d100      	bne.n	8010e2a <HAL_DMA_IRQHandler+0x1ae>
 8010e28:	e39e      	b.n	8011568 <HAL_DMA_IRQHandler+0x8ec>
 8010e2a:	4a3d      	ldr	r2, [pc, #244]	; (8010f20 <HAL_DMA_IRQHandler+0x2a4>)
 8010e2c:	4293      	cmp	r3, r2
 8010e2e:	d100      	bne.n	8010e32 <HAL_DMA_IRQHandler+0x1b6>
 8010e30:	e760      	b.n	8010cf4 <HAL_DMA_IRQHandler+0x78>
 8010e32:	4a3c      	ldr	r2, [pc, #240]	; (8010f24 <HAL_DMA_IRQHandler+0x2a8>)
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d100      	bne.n	8010e3a <HAL_DMA_IRQHandler+0x1be>
 8010e38:	e315      	b.n	8011466 <HAL_DMA_IRQHandler+0x7ea>
 8010e3a:	4a33      	ldr	r2, [pc, #204]	; (8010f08 <HAL_DMA_IRQHandler+0x28c>)
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d100      	bne.n	8010e42 <HAL_DMA_IRQHandler+0x1c6>
 8010e40:	e2a3      	b.n	801138a <HAL_DMA_IRQHandler+0x70e>
 8010e42:	4d39      	ldr	r5, [pc, #228]	; (8010f28 <HAL_DMA_IRQHandler+0x2ac>)
 8010e44:	2204      	movs	r2, #4
 8010e46:	42ab      	cmp	r3, r5
 8010e48:	d018      	beq.n	8010e7c <HAL_DMA_IRQHandler+0x200>
 8010e4a:	4d38      	ldr	r5, [pc, #224]	; (8010f2c <HAL_DMA_IRQHandler+0x2b0>)
 8010e4c:	323c      	adds	r2, #60	; 0x3c
 8010e4e:	42ab      	cmp	r3, r5
 8010e50:	d014      	beq.n	8010e7c <HAL_DMA_IRQHandler+0x200>
 8010e52:	4a37      	ldr	r2, [pc, #220]	; (8010f30 <HAL_DMA_IRQHandler+0x2b4>)
 8010e54:	4293      	cmp	r3, r2
 8010e56:	d100      	bne.n	8010e5a <HAL_DMA_IRQHandler+0x1de>
 8010e58:	e395      	b.n	8011586 <HAL_DMA_IRQHandler+0x90a>
 8010e5a:	4a38      	ldr	r2, [pc, #224]	; (8010f3c <HAL_DMA_IRQHandler+0x2c0>)
 8010e5c:	189a      	adds	r2, r3, r2
 8010e5e:	4255      	negs	r5, r2
 8010e60:	416a      	adcs	r2, r5
 8010e62:	4d38      	ldr	r5, [pc, #224]	; (8010f44 <HAL_DMA_IRQHandler+0x2c8>)
 8010e64:	4252      	negs	r2, r2
 8010e66:	402a      	ands	r2, r5
 8010e68:	2580      	movs	r5, #128	; 0x80
 8010e6a:	02ed      	lsls	r5, r5, #11
 8010e6c:	46ac      	mov	ip, r5
 8010e6e:	4462      	add	r2, ip
 8010e70:	e004      	b.n	8010e7c <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010e72:	0732      	lsls	r2, r6, #28
 8010e74:	d500      	bpl.n	8010e78 <HAL_DMA_IRQHandler+0x1fc>
 8010e76:	e778      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010e78:	2204      	movs	r2, #4
 8010e7a:	6800      	ldr	r0, [r0, #0]
 8010e7c:	4210      	tst	r0, r2
 8010e7e:	d000      	beq.n	8010e82 <HAL_DMA_IRQHandler+0x206>
 8010e80:	e0d1      	b.n	8011026 <HAL_DMA_IRQHandler+0x3aa>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010e82:	4a22      	ldr	r2, [pc, #136]	; (8010f0c <HAL_DMA_IRQHandler+0x290>)
 8010e84:	6810      	ldr	r0, [r2, #0]
 8010e86:	4a22      	ldr	r2, [pc, #136]	; (8010f10 <HAL_DMA_IRQHandler+0x294>)
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	d100      	bne.n	8010e8e <HAL_DMA_IRQHandler+0x212>
 8010e8c:	e122      	b.n	80110d4 <HAL_DMA_IRQHandler+0x458>
 8010e8e:	4a21      	ldr	r2, [pc, #132]	; (8010f14 <HAL_DMA_IRQHandler+0x298>)
 8010e90:	4293      	cmp	r3, r2
 8010e92:	d05b      	beq.n	8010f4c <HAL_DMA_IRQHandler+0x2d0>
 8010e94:	4a20      	ldr	r2, [pc, #128]	; (8010f18 <HAL_DMA_IRQHandler+0x29c>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d100      	bne.n	8010e9c <HAL_DMA_IRQHandler+0x220>
 8010e9a:	e19a      	b.n	80111d2 <HAL_DMA_IRQHandler+0x556>
 8010e9c:	4a1f      	ldr	r2, [pc, #124]	; (8010f1c <HAL_DMA_IRQHandler+0x2a0>)
 8010e9e:	4293      	cmp	r3, r2
 8010ea0:	d100      	bne.n	8010ea4 <HAL_DMA_IRQHandler+0x228>
 8010ea2:	e237      	b.n	8011314 <HAL_DMA_IRQHandler+0x698>
 8010ea4:	4a1e      	ldr	r2, [pc, #120]	; (8010f20 <HAL_DMA_IRQHandler+0x2a4>)
 8010ea6:	4293      	cmp	r3, r2
 8010ea8:	d100      	bne.n	8010eac <HAL_DMA_IRQHandler+0x230>
 8010eaa:	e239      	b.n	8011320 <HAL_DMA_IRQHandler+0x6a4>
 8010eac:	4a1d      	ldr	r2, [pc, #116]	; (8010f24 <HAL_DMA_IRQHandler+0x2a8>)
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	d100      	bne.n	8010eb4 <HAL_DMA_IRQHandler+0x238>
 8010eb2:	e24f      	b.n	8011354 <HAL_DMA_IRQHandler+0x6d8>
 8010eb4:	4a14      	ldr	r2, [pc, #80]	; (8010f08 <HAL_DMA_IRQHandler+0x28c>)
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d100      	bne.n	8010ebc <HAL_DMA_IRQHandler+0x240>
 8010eba:	e297      	b.n	80113ec <HAL_DMA_IRQHandler+0x770>
 8010ebc:	4a1a      	ldr	r2, [pc, #104]	; (8010f28 <HAL_DMA_IRQHandler+0x2ac>)
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d100      	bne.n	8010ec4 <HAL_DMA_IRQHandler+0x248>
 8010ec2:	e107      	b.n	80110d4 <HAL_DMA_IRQHandler+0x458>
 8010ec4:	4a19      	ldr	r2, [pc, #100]	; (8010f2c <HAL_DMA_IRQHandler+0x2b0>)
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d040      	beq.n	8010f4c <HAL_DMA_IRQHandler+0x2d0>
 8010eca:	4a19      	ldr	r2, [pc, #100]	; (8010f30 <HAL_DMA_IRQHandler+0x2b4>)
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	d100      	bne.n	8010ed2 <HAL_DMA_IRQHandler+0x256>
 8010ed0:	e17f      	b.n	80111d2 <HAL_DMA_IRQHandler+0x556>
 8010ed2:	4a1a      	ldr	r2, [pc, #104]	; (8010f3c <HAL_DMA_IRQHandler+0x2c0>)
 8010ed4:	1899      	adds	r1, r3, r2
 8010ed6:	424a      	negs	r2, r1
 8010ed8:	4151      	adcs	r1, r2
 8010eda:	4a1b      	ldr	r2, [pc, #108]	; (8010f48 <HAL_DMA_IRQHandler+0x2cc>)
 8010edc:	4249      	negs	r1, r1
 8010ede:	400a      	ands	r2, r1
 8010ee0:	2180      	movs	r1, #128	; 0x80
 8010ee2:	0289      	lsls	r1, r1, #10
 8010ee4:	468c      	mov	ip, r1
 8010ee6:	4462      	add	r2, ip
 8010ee8:	e031      	b.n	8010f4e <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010eea:	0532      	lsls	r2, r6, #20
 8010eec:	d500      	bpl.n	8010ef0 <HAL_DMA_IRQHandler+0x274>
 8010eee:	e73c      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010ef0:	2280      	movs	r2, #128	; 0x80
 8010ef2:	6800      	ldr	r0, [r0, #0]
 8010ef4:	0019      	movs	r1, r3
 8010ef6:	00d2      	lsls	r2, r2, #3
 8010ef8:	e093      	b.n	8011022 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010efa:	0532      	lsls	r2, r6, #20
 8010efc:	d500      	bpl.n	8010f00 <HAL_DMA_IRQHandler+0x284>
 8010efe:	e734      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010f00:	2280      	movs	r2, #128	; 0x80
 8010f02:	6800      	ldr	r0, [r0, #0]
 8010f04:	00d2      	lsls	r2, r2, #3
 8010f06:	e7b9      	b.n	8010e7c <HAL_DMA_IRQHandler+0x200>
 8010f08:	40020080 	.word	0x40020080
 8010f0c:	40020400 	.word	0x40020400
 8010f10:	40020008 	.word	0x40020008
 8010f14:	4002001c 	.word	0x4002001c
 8010f18:	40020030 	.word	0x40020030
 8010f1c:	40020044 	.word	0x40020044
 8010f20:	40020058 	.word	0x40020058
 8010f24:	4002006c 	.word	0x4002006c
 8010f28:	40020408 	.word	0x40020408
 8010f2c:	4002041c 	.word	0x4002041c
 8010f30:	40020430 	.word	0x40020430
 8010f34:	40020444 	.word	0x40020444
 8010f38:	40020000 	.word	0x40020000
 8010f3c:	bffdfbbc 	.word	0xbffdfbbc
 8010f40:	fff88000 	.word	0xfff88000
 8010f44:	fffc4000 	.word	0xfffc4000
 8010f48:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010f4c:	2220      	movs	r2, #32
 8010f4e:	4002      	ands	r2, r0
 8010f50:	1e51      	subs	r1, r2, #1
 8010f52:	418a      	sbcs	r2, r1
 8010f54:	b2d2      	uxtb	r2, r2
 8010f56:	2a00      	cmp	r2, #0
 8010f58:	d050      	beq.n	8010ffc <HAL_DMA_IRQHandler+0x380>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010f5a:	2202      	movs	r2, #2
 8010f5c:	6819      	ldr	r1, [r3, #0]
 8010f5e:	420a      	tst	r2, r1
 8010f60:	d04c      	beq.n	8010ffc <HAL_DMA_IRQHandler+0x380>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010f62:	6819      	ldr	r1, [r3, #0]
 8010f64:	0689      	lsls	r1, r1, #26
 8010f66:	d402      	bmi.n	8010f6e <HAL_DMA_IRQHandler+0x2f2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010f68:	6819      	ldr	r1, [r3, #0]
 8010f6a:	4391      	bics	r1, r2
 8010f6c:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010f6e:	4ab5      	ldr	r2, [pc, #724]	; (8011244 <HAL_DMA_IRQHandler+0x5c8>)
 8010f70:	49b5      	ldr	r1, [pc, #724]	; (8011248 <HAL_DMA_IRQHandler+0x5cc>)
 8010f72:	4293      	cmp	r3, r2
 8010f74:	d800      	bhi.n	8010f78 <HAL_DMA_IRQHandler+0x2fc>
 8010f76:	e12f      	b.n	80111d8 <HAL_DMA_IRQHandler+0x55c>
 8010f78:	428b      	cmp	r3, r1
 8010f7a:	d100      	bne.n	8010f7e <HAL_DMA_IRQHandler+0x302>
 8010f7c:	e20e      	b.n	801139c <HAL_DMA_IRQHandler+0x720>
 8010f7e:	49b3      	ldr	r1, [pc, #716]	; (801124c <HAL_DMA_IRQHandler+0x5d0>)
 8010f80:	428b      	cmp	r3, r1
 8010f82:	d100      	bne.n	8010f86 <HAL_DMA_IRQHandler+0x30a>
 8010f84:	e237      	b.n	80113f6 <HAL_DMA_IRQHandler+0x77a>
 8010f86:	49b2      	ldr	r1, [pc, #712]	; (8011250 <HAL_DMA_IRQHandler+0x5d4>)
 8010f88:	428b      	cmp	r3, r1
 8010f8a:	d100      	bne.n	8010f8e <HAL_DMA_IRQHandler+0x312>
 8010f8c:	e271      	b.n	8011472 <HAL_DMA_IRQHandler+0x7f6>
 8010f8e:	49b1      	ldr	r1, [pc, #708]	; (8011254 <HAL_DMA_IRQHandler+0x5d8>)
 8010f90:	428b      	cmp	r3, r1
 8010f92:	d100      	bne.n	8010f96 <HAL_DMA_IRQHandler+0x31a>
 8010f94:	e1fc      	b.n	8011390 <HAL_DMA_IRQHandler+0x714>
 8010f96:	49b0      	ldr	r1, [pc, #704]	; (8011258 <HAL_DMA_IRQHandler+0x5dc>)
 8010f98:	428b      	cmp	r3, r1
 8010f9a:	d100      	bne.n	8010f9e <HAL_DMA_IRQHandler+0x322>
 8010f9c:	e28a      	b.n	80114b4 <HAL_DMA_IRQHandler+0x838>
 8010f9e:	49af      	ldr	r1, [pc, #700]	; (801125c <HAL_DMA_IRQHandler+0x5e0>)
 8010fa0:	428b      	cmp	r3, r1
 8010fa2:	d100      	bne.n	8010fa6 <HAL_DMA_IRQHandler+0x32a>
 8010fa4:	e2a7      	b.n	80114f6 <HAL_DMA_IRQHandler+0x87a>
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d100      	bne.n	8010fac <HAL_DMA_IRQHandler+0x330>
 8010faa:	e2c4      	b.n	8011536 <HAL_DMA_IRQHandler+0x8ba>
 8010fac:	4aac      	ldr	r2, [pc, #688]	; (8011260 <HAL_DMA_IRQHandler+0x5e4>)
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	d100      	bne.n	8010fb4 <HAL_DMA_IRQHandler+0x338>
 8010fb2:	e1f3      	b.n	801139c <HAL_DMA_IRQHandler+0x720>
 8010fb4:	4aab      	ldr	r2, [pc, #684]	; (8011264 <HAL_DMA_IRQHandler+0x5e8>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d100      	bne.n	8010fbc <HAL_DMA_IRQHandler+0x340>
 8010fba:	e21c      	b.n	80113f6 <HAL_DMA_IRQHandler+0x77a>
 8010fbc:	4aaa      	ldr	r2, [pc, #680]	; (8011268 <HAL_DMA_IRQHandler+0x5ec>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d100      	bne.n	8010fc4 <HAL_DMA_IRQHandler+0x348>
 8010fc2:	e256      	b.n	8011472 <HAL_DMA_IRQHandler+0x7f6>
 8010fc4:	4aa9      	ldr	r2, [pc, #676]	; (801126c <HAL_DMA_IRQHandler+0x5f0>)
 8010fc6:	4694      	mov	ip, r2
 8010fc8:	4463      	add	r3, ip
 8010fca:	1e5a      	subs	r2, r3, #1
 8010fcc:	4193      	sbcs	r3, r2
 8010fce:	22f0      	movs	r2, #240	; 0xf0
 8010fd0:	425b      	negs	r3, r3
 8010fd2:	0252      	lsls	r2, r2, #9
 8010fd4:	4013      	ands	r3, r2
 8010fd6:	2280      	movs	r2, #128	; 0x80
 8010fd8:	0192      	lsls	r2, r2, #6
 8010fda:	4694      	mov	ip, r2
 8010fdc:	4463      	add	r3, ip
 8010fde:	4aa4      	ldr	r2, [pc, #656]	; (8011270 <HAL_DMA_IRQHandler+0x5f4>)
 8010fe0:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010fe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010fe4:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010fe6:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010fe8:	2321      	movs	r3, #33	; 0x21
 8010fea:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010fec:	2200      	movs	r2, #0
 8010fee:	3b01      	subs	r3, #1
 8010ff0:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010ff2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d001      	beq.n	8010ffc <HAL_DMA_IRQHandler+0x380>
        hdma->XferCpltCallback(hdma);
 8010ff8:	0020      	movs	r0, r4
 8010ffa:	4798      	blx	r3
}  
 8010ffc:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010ffe:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011000:	489c      	ldr	r0, [pc, #624]	; (8011274 <HAL_DMA_IRQHandler+0x5f8>)
 8011002:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011004:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011006:	432a      	orrs	r2, r5
 8011008:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801100a:	2221      	movs	r2, #33	; 0x21
 801100c:	3503      	adds	r5, #3
 801100e:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8011010:	2500      	movs	r5, #0
 8011012:	3a01      	subs	r2, #1
 8011014:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011016:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011018:	2a00      	cmp	r2, #0
 801101a:	d000      	beq.n	801101e <HAL_DMA_IRQHandler+0x3a2>
 801101c:	e09b      	b.n	8011156 <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801101e:	6800      	ldr	r0, [r0, #0]
 8011020:	2204      	movs	r2, #4
 8011022:	4210      	tst	r0, r2
 8011024:	d050      	beq.n	80110c8 <HAL_DMA_IRQHandler+0x44c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011026:	2204      	movs	r2, #4
 8011028:	6818      	ldr	r0, [r3, #0]
 801102a:	4202      	tst	r2, r0
 801102c:	d048      	beq.n	80110c0 <HAL_DMA_IRQHandler+0x444>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801102e:	6818      	ldr	r0, [r3, #0]
 8011030:	0680      	lsls	r0, r0, #26
 8011032:	d402      	bmi.n	801103a <HAL_DMA_IRQHandler+0x3be>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011034:	6818      	ldr	r0, [r3, #0]
 8011036:	4390      	bics	r0, r2
 8011038:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801103a:	4a82      	ldr	r2, [pc, #520]	; (8011244 <HAL_DMA_IRQHandler+0x5c8>)
 801103c:	4291      	cmp	r1, r2
 801103e:	d800      	bhi.n	8011042 <HAL_DMA_IRQHandler+0x3c6>
 8011040:	e11e      	b.n	8011280 <HAL_DMA_IRQHandler+0x604>
 8011042:	4981      	ldr	r1, [pc, #516]	; (8011248 <HAL_DMA_IRQHandler+0x5cc>)
 8011044:	428b      	cmp	r3, r1
 8011046:	d100      	bne.n	801104a <HAL_DMA_IRQHandler+0x3ce>
 8011048:	e1ac      	b.n	80113a4 <HAL_DMA_IRQHandler+0x728>
 801104a:	4980      	ldr	r1, [pc, #512]	; (801124c <HAL_DMA_IRQHandler+0x5d0>)
 801104c:	428b      	cmp	r3, r1
 801104e:	d100      	bne.n	8011052 <HAL_DMA_IRQHandler+0x3d6>
 8011050:	e1d5      	b.n	80113fe <HAL_DMA_IRQHandler+0x782>
 8011052:	497f      	ldr	r1, [pc, #508]	; (8011250 <HAL_DMA_IRQHandler+0x5d4>)
 8011054:	428b      	cmp	r3, r1
 8011056:	d100      	bne.n	801105a <HAL_DMA_IRQHandler+0x3de>
 8011058:	e188      	b.n	801136c <HAL_DMA_IRQHandler+0x6f0>
 801105a:	497e      	ldr	r1, [pc, #504]	; (8011254 <HAL_DMA_IRQHandler+0x5d8>)
 801105c:	428b      	cmp	r3, r1
 801105e:	d100      	bne.n	8011062 <HAL_DMA_IRQHandler+0x3e6>
 8011060:	e20a      	b.n	8011478 <HAL_DMA_IRQHandler+0x7fc>
 8011062:	497d      	ldr	r1, [pc, #500]	; (8011258 <HAL_DMA_IRQHandler+0x5dc>)
 8011064:	428b      	cmp	r3, r1
 8011066:	d100      	bne.n	801106a <HAL_DMA_IRQHandler+0x3ee>
 8011068:	e22d      	b.n	80114c6 <HAL_DMA_IRQHandler+0x84a>
 801106a:	497c      	ldr	r1, [pc, #496]	; (801125c <HAL_DMA_IRQHandler+0x5e0>)
 801106c:	428b      	cmp	r3, r1
 801106e:	d100      	bne.n	8011072 <HAL_DMA_IRQHandler+0x3f6>
 8011070:	e247      	b.n	8011502 <HAL_DMA_IRQHandler+0x886>
 8011072:	4293      	cmp	r3, r2
 8011074:	d100      	bne.n	8011078 <HAL_DMA_IRQHandler+0x3fc>
 8011076:	e264      	b.n	8011542 <HAL_DMA_IRQHandler+0x8c6>
 8011078:	4a79      	ldr	r2, [pc, #484]	; (8011260 <HAL_DMA_IRQHandler+0x5e4>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d100      	bne.n	8011080 <HAL_DMA_IRQHandler+0x404>
 801107e:	e191      	b.n	80113a4 <HAL_DMA_IRQHandler+0x728>
 8011080:	4a78      	ldr	r2, [pc, #480]	; (8011264 <HAL_DMA_IRQHandler+0x5e8>)
 8011082:	4293      	cmp	r3, r2
 8011084:	d100      	bne.n	8011088 <HAL_DMA_IRQHandler+0x40c>
 8011086:	e1ba      	b.n	80113fe <HAL_DMA_IRQHandler+0x782>
 8011088:	4a77      	ldr	r2, [pc, #476]	; (8011268 <HAL_DMA_IRQHandler+0x5ec>)
 801108a:	4293      	cmp	r3, r2
 801108c:	d100      	bne.n	8011090 <HAL_DMA_IRQHandler+0x414>
 801108e:	e16d      	b.n	801136c <HAL_DMA_IRQHandler+0x6f0>
 8011090:	4a76      	ldr	r2, [pc, #472]	; (801126c <HAL_DMA_IRQHandler+0x5f0>)
 8011092:	189a      	adds	r2, r3, r2
 8011094:	1e51      	subs	r1, r2, #1
 8011096:	418a      	sbcs	r2, r1
 8011098:	21f0      	movs	r1, #240	; 0xf0
 801109a:	4252      	negs	r2, r2
 801109c:	0289      	lsls	r1, r1, #10
 801109e:	400a      	ands	r2, r1
 80110a0:	2180      	movs	r1, #128	; 0x80
 80110a2:	01c9      	lsls	r1, r1, #7
 80110a4:	468c      	mov	ip, r1
 80110a6:	4462      	add	r2, ip
 80110a8:	4971      	ldr	r1, [pc, #452]	; (8011270 <HAL_DMA_IRQHandler+0x5f4>)
 80110aa:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80110ac:	2221      	movs	r2, #33	; 0x21
 80110ae:	2111      	movs	r1, #17
 80110b0:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80110b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80110b4:	2a00      	cmp	r2, #0
 80110b6:	d100      	bne.n	80110ba <HAL_DMA_IRQHandler+0x43e>
 80110b8:	e6e3      	b.n	8010e82 <HAL_DMA_IRQHandler+0x206>
        hdma->XferHalfCpltCallback(hdma);
 80110ba:	0020      	movs	r0, r4
 80110bc:	4790      	blx	r2
 80110be:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80110c0:	4a60      	ldr	r2, [pc, #384]	; (8011244 <HAL_DMA_IRQHandler+0x5c8>)
 80110c2:	4293      	cmp	r3, r2
 80110c4:	d900      	bls.n	80110c8 <HAL_DMA_IRQHandler+0x44c>
 80110c6:	e6dc      	b.n	8010e82 <HAL_DMA_IRQHandler+0x206>
 80110c8:	4a6a      	ldr	r2, [pc, #424]	; (8011274 <HAL_DMA_IRQHandler+0x5f8>)
 80110ca:	6810      	ldr	r0, [r2, #0]
 80110cc:	4a5e      	ldr	r2, [pc, #376]	; (8011248 <HAL_DMA_IRQHandler+0x5cc>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d000      	beq.n	80110d4 <HAL_DMA_IRQHandler+0x458>
 80110d2:	e6dc      	b.n	8010e8e <HAL_DMA_IRQHandler+0x212>
 80110d4:	2202      	movs	r2, #2
 80110d6:	e73a      	b.n	8010f4e <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80110d8:	42ab      	cmp	r3, r5
 80110da:	d090      	beq.n	8010ffe <HAL_DMA_IRQHandler+0x382>
 80110dc:	4a5b      	ldr	r2, [pc, #364]	; (801124c <HAL_DMA_IRQHandler+0x5d0>)
 80110de:	4293      	cmp	r3, r2
 80110e0:	d100      	bne.n	80110e4 <HAL_DMA_IRQHandler+0x468>
 80110e2:	e1a1      	b.n	8011428 <HAL_DMA_IRQHandler+0x7ac>
 80110e4:	4a5a      	ldr	r2, [pc, #360]	; (8011250 <HAL_DMA_IRQHandler+0x5d4>)
 80110e6:	4293      	cmp	r3, r2
 80110e8:	d100      	bne.n	80110ec <HAL_DMA_IRQHandler+0x470>
 80110ea:	e13c      	b.n	8011366 <HAL_DMA_IRQHandler+0x6ea>
 80110ec:	4a59      	ldr	r2, [pc, #356]	; (8011254 <HAL_DMA_IRQHandler+0x5d8>)
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d100      	bne.n	80110f4 <HAL_DMA_IRQHandler+0x478>
 80110f2:	e1ca      	b.n	801148a <HAL_DMA_IRQHandler+0x80e>
 80110f4:	4a58      	ldr	r2, [pc, #352]	; (8011258 <HAL_DMA_IRQHandler+0x5dc>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d100      	bne.n	80110fc <HAL_DMA_IRQHandler+0x480>
 80110fa:	e1de      	b.n	80114ba <HAL_DMA_IRQHandler+0x83e>
 80110fc:	4a57      	ldr	r2, [pc, #348]	; (801125c <HAL_DMA_IRQHandler+0x5e0>)
 80110fe:	4293      	cmp	r3, r2
 8011100:	d100      	bne.n	8011104 <HAL_DMA_IRQHandler+0x488>
 8011102:	e201      	b.n	8011508 <HAL_DMA_IRQHandler+0x88c>
 8011104:	4283      	cmp	r3, r0
 8011106:	d100      	bne.n	801110a <HAL_DMA_IRQHandler+0x48e>
 8011108:	e21e      	b.n	8011548 <HAL_DMA_IRQHandler+0x8cc>
 801110a:	4a55      	ldr	r2, [pc, #340]	; (8011260 <HAL_DMA_IRQHandler+0x5e4>)
 801110c:	4293      	cmp	r3, r2
 801110e:	d100      	bne.n	8011112 <HAL_DMA_IRQHandler+0x496>
 8011110:	e22d      	b.n	801156e <HAL_DMA_IRQHandler+0x8f2>
 8011112:	4a54      	ldr	r2, [pc, #336]	; (8011264 <HAL_DMA_IRQHandler+0x5e8>)
 8011114:	4293      	cmp	r3, r2
 8011116:	d100      	bne.n	801111a <HAL_DMA_IRQHandler+0x49e>
 8011118:	e22d      	b.n	8011576 <HAL_DMA_IRQHandler+0x8fa>
 801111a:	4a53      	ldr	r2, [pc, #332]	; (8011268 <HAL_DMA_IRQHandler+0x5ec>)
 801111c:	4293      	cmp	r3, r2
 801111e:	d100      	bne.n	8011122 <HAL_DMA_IRQHandler+0x4a6>
 8011120:	e121      	b.n	8011366 <HAL_DMA_IRQHandler+0x6ea>
 8011122:	4a52      	ldr	r2, [pc, #328]	; (801126c <HAL_DMA_IRQHandler+0x5f0>)
 8011124:	189a      	adds	r2, r3, r2
 8011126:	4250      	negs	r0, r2
 8011128:	4142      	adcs	r2, r0
 801112a:	4853      	ldr	r0, [pc, #332]	; (8011278 <HAL_DMA_IRQHandler+0x5fc>)
 801112c:	4252      	negs	r2, r2
 801112e:	4002      	ands	r2, r0
 8011130:	2080      	movs	r0, #128	; 0x80
 8011132:	0300      	lsls	r0, r0, #12
 8011134:	4684      	mov	ip, r0
 8011136:	4462      	add	r2, ip
 8011138:	484e      	ldr	r0, [pc, #312]	; (8011274 <HAL_DMA_IRQHandler+0x5f8>)
 801113a:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801113c:	2001      	movs	r0, #1
 801113e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011140:	4302      	orrs	r2, r0
 8011142:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8011144:	2221      	movs	r2, #33	; 0x21
 8011146:	3003      	adds	r0, #3
 8011148:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801114a:	2000      	movs	r0, #0
 801114c:	3a01      	subs	r2, #1
 801114e:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011150:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011152:	2a00      	cmp	r2, #0
 8011154:	d007      	beq.n	8011166 <HAL_DMA_IRQHandler+0x4ea>
        hdma->XferErrorCallback(hdma);
 8011156:	0020      	movs	r0, r4
 8011158:	4790      	blx	r2
 801115a:	6823      	ldr	r3, [r4, #0]
 801115c:	0019      	movs	r1, r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801115e:	4a39      	ldr	r2, [pc, #228]	; (8011244 <HAL_DMA_IRQHandler+0x5c8>)
 8011160:	4293      	cmp	r3, r2
 8011162:	d900      	bls.n	8011166 <HAL_DMA_IRQHandler+0x4ea>
 8011164:	e64f      	b.n	8010e06 <HAL_DMA_IRQHandler+0x18a>
 8011166:	4a43      	ldr	r2, [pc, #268]	; (8011274 <HAL_DMA_IRQHandler+0x5f8>)
 8011168:	6810      	ldr	r0, [r2, #0]
 801116a:	4a37      	ldr	r2, [pc, #220]	; (8011248 <HAL_DMA_IRQHandler+0x5cc>)
 801116c:	4293      	cmp	r3, r2
 801116e:	d100      	bne.n	8011172 <HAL_DMA_IRQHandler+0x4f6>
 8011170:	e756      	b.n	8011020 <HAL_DMA_IRQHandler+0x3a4>
 8011172:	4a36      	ldr	r2, [pc, #216]	; (801124c <HAL_DMA_IRQHandler+0x5d0>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d100      	bne.n	801117a <HAL_DMA_IRQHandler+0x4fe>
 8011178:	e0c4      	b.n	8011304 <HAL_DMA_IRQHandler+0x688>
 801117a:	4a35      	ldr	r2, [pc, #212]	; (8011250 <HAL_DMA_IRQHandler+0x5d4>)
 801117c:	4293      	cmp	r3, r2
 801117e:	d100      	bne.n	8011182 <HAL_DMA_IRQHandler+0x506>
 8011180:	e0cb      	b.n	801131a <HAL_DMA_IRQHandler+0x69e>
 8011182:	4a34      	ldr	r2, [pc, #208]	; (8011254 <HAL_DMA_IRQHandler+0x5d8>)
 8011184:	4293      	cmp	r3, r2
 8011186:	d100      	bne.n	801118a <HAL_DMA_IRQHandler+0x50e>
 8011188:	e0d2      	b.n	8011330 <HAL_DMA_IRQHandler+0x6b4>
 801118a:	4a33      	ldr	r2, [pc, #204]	; (8011258 <HAL_DMA_IRQHandler+0x5dc>)
 801118c:	4293      	cmp	r3, r2
 801118e:	d100      	bne.n	8011192 <HAL_DMA_IRQHandler+0x516>
 8011190:	e5e4      	b.n	8010d5c <HAL_DMA_IRQHandler+0xe0>
 8011192:	4a32      	ldr	r2, [pc, #200]	; (801125c <HAL_DMA_IRQHandler+0x5e0>)
 8011194:	4293      	cmp	r3, r2
 8011196:	d100      	bne.n	801119a <HAL_DMA_IRQHandler+0x51e>
 8011198:	e15e      	b.n	8011458 <HAL_DMA_IRQHandler+0x7dc>
 801119a:	4a2a      	ldr	r2, [pc, #168]	; (8011244 <HAL_DMA_IRQHandler+0x5c8>)
 801119c:	4293      	cmp	r3, r2
 801119e:	d100      	bne.n	80111a2 <HAL_DMA_IRQHandler+0x526>
 80111a0:	e0ec      	b.n	801137c <HAL_DMA_IRQHandler+0x700>
 80111a2:	4a2f      	ldr	r2, [pc, #188]	; (8011260 <HAL_DMA_IRQHandler+0x5e4>)
 80111a4:	4293      	cmp	r3, r2
 80111a6:	d100      	bne.n	80111aa <HAL_DMA_IRQHandler+0x52e>
 80111a8:	e73a      	b.n	8011020 <HAL_DMA_IRQHandler+0x3a4>
 80111aa:	4a2e      	ldr	r2, [pc, #184]	; (8011264 <HAL_DMA_IRQHandler+0x5e8>)
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d100      	bne.n	80111b2 <HAL_DMA_IRQHandler+0x536>
 80111b0:	e0a8      	b.n	8011304 <HAL_DMA_IRQHandler+0x688>
 80111b2:	4a2d      	ldr	r2, [pc, #180]	; (8011268 <HAL_DMA_IRQHandler+0x5ec>)
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d100      	bne.n	80111ba <HAL_DMA_IRQHandler+0x53e>
 80111b8:	e0af      	b.n	801131a <HAL_DMA_IRQHandler+0x69e>
 80111ba:	4a2c      	ldr	r2, [pc, #176]	; (801126c <HAL_DMA_IRQHandler+0x5f0>)
 80111bc:	189a      	adds	r2, r3, r2
 80111be:	4255      	negs	r5, r2
 80111c0:	416a      	adcs	r2, r5
 80111c2:	4d2e      	ldr	r5, [pc, #184]	; (801127c <HAL_DMA_IRQHandler+0x600>)
 80111c4:	4252      	negs	r2, r2
 80111c6:	402a      	ands	r2, r5
 80111c8:	2580      	movs	r5, #128	; 0x80
 80111ca:	02ed      	lsls	r5, r5, #11
 80111cc:	46ac      	mov	ip, r5
 80111ce:	4462      	add	r2, ip
 80111d0:	e727      	b.n	8011022 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80111d2:	2280      	movs	r2, #128	; 0x80
 80111d4:	0092      	lsls	r2, r2, #2
 80111d6:	e6ba      	b.n	8010f4e <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80111d8:	428b      	cmp	r3, r1
 80111da:	d100      	bne.n	80111de <HAL_DMA_IRQHandler+0x562>
 80111dc:	e0e0      	b.n	80113a0 <HAL_DMA_IRQHandler+0x724>
 80111de:	491b      	ldr	r1, [pc, #108]	; (801124c <HAL_DMA_IRQHandler+0x5d0>)
 80111e0:	428b      	cmp	r3, r1
 80111e2:	d100      	bne.n	80111e6 <HAL_DMA_IRQHandler+0x56a>
 80111e4:	e105      	b.n	80113f2 <HAL_DMA_IRQHandler+0x776>
 80111e6:	491a      	ldr	r1, [pc, #104]	; (8011250 <HAL_DMA_IRQHandler+0x5d4>)
 80111e8:	428b      	cmp	r3, r1
 80111ea:	d100      	bne.n	80111ee <HAL_DMA_IRQHandler+0x572>
 80111ec:	e13e      	b.n	801146c <HAL_DMA_IRQHandler+0x7f0>
 80111ee:	4919      	ldr	r1, [pc, #100]	; (8011254 <HAL_DMA_IRQHandler+0x5d8>)
 80111f0:	428b      	cmp	r3, r1
 80111f2:	d100      	bne.n	80111f6 <HAL_DMA_IRQHandler+0x57a>
 80111f4:	e0cf      	b.n	8011396 <HAL_DMA_IRQHandler+0x71a>
 80111f6:	4918      	ldr	r1, [pc, #96]	; (8011258 <HAL_DMA_IRQHandler+0x5dc>)
 80111f8:	428b      	cmp	r3, r1
 80111fa:	d100      	bne.n	80111fe <HAL_DMA_IRQHandler+0x582>
 80111fc:	e157      	b.n	80114ae <HAL_DMA_IRQHandler+0x832>
 80111fe:	4917      	ldr	r1, [pc, #92]	; (801125c <HAL_DMA_IRQHandler+0x5e0>)
 8011200:	428b      	cmp	r3, r1
 8011202:	d100      	bne.n	8011206 <HAL_DMA_IRQHandler+0x58a>
 8011204:	e174      	b.n	80114f0 <HAL_DMA_IRQHandler+0x874>
 8011206:	4293      	cmp	r3, r2
 8011208:	d100      	bne.n	801120c <HAL_DMA_IRQHandler+0x590>
 801120a:	e197      	b.n	801153c <HAL_DMA_IRQHandler+0x8c0>
 801120c:	4a14      	ldr	r2, [pc, #80]	; (8011260 <HAL_DMA_IRQHandler+0x5e4>)
 801120e:	4293      	cmp	r3, r2
 8011210:	d100      	bne.n	8011214 <HAL_DMA_IRQHandler+0x598>
 8011212:	e0c5      	b.n	80113a0 <HAL_DMA_IRQHandler+0x724>
 8011214:	4a13      	ldr	r2, [pc, #76]	; (8011264 <HAL_DMA_IRQHandler+0x5e8>)
 8011216:	4293      	cmp	r3, r2
 8011218:	d100      	bne.n	801121c <HAL_DMA_IRQHandler+0x5a0>
 801121a:	e0ea      	b.n	80113f2 <HAL_DMA_IRQHandler+0x776>
 801121c:	4a12      	ldr	r2, [pc, #72]	; (8011268 <HAL_DMA_IRQHandler+0x5ec>)
 801121e:	4293      	cmp	r3, r2
 8011220:	d100      	bne.n	8011224 <HAL_DMA_IRQHandler+0x5a8>
 8011222:	e123      	b.n	801146c <HAL_DMA_IRQHandler+0x7f0>
 8011224:	4a11      	ldr	r2, [pc, #68]	; (801126c <HAL_DMA_IRQHandler+0x5f0>)
 8011226:	4694      	mov	ip, r2
 8011228:	4463      	add	r3, ip
 801122a:	1e5a      	subs	r2, r3, #1
 801122c:	4193      	sbcs	r3, r2
 801122e:	22f0      	movs	r2, #240	; 0xf0
 8011230:	425b      	negs	r3, r3
 8011232:	0252      	lsls	r2, r2, #9
 8011234:	4013      	ands	r3, r2
 8011236:	2280      	movs	r2, #128	; 0x80
 8011238:	0192      	lsls	r2, r2, #6
 801123a:	4694      	mov	ip, r2
 801123c:	4463      	add	r3, ip
 801123e:	4a0d      	ldr	r2, [pc, #52]	; (8011274 <HAL_DMA_IRQHandler+0x5f8>)
 8011240:	6053      	str	r3, [r2, #4]
 8011242:	e6ce      	b.n	8010fe2 <HAL_DMA_IRQHandler+0x366>
 8011244:	40020080 	.word	0x40020080
 8011248:	40020008 	.word	0x40020008
 801124c:	4002001c 	.word	0x4002001c
 8011250:	40020030 	.word	0x40020030
 8011254:	40020044 	.word	0x40020044
 8011258:	40020058 	.word	0x40020058
 801125c:	4002006c 	.word	0x4002006c
 8011260:	40020408 	.word	0x40020408
 8011264:	4002041c 	.word	0x4002041c
 8011268:	40020430 	.word	0x40020430
 801126c:	bffdfbbc 	.word	0xbffdfbbc
 8011270:	40020400 	.word	0x40020400
 8011274:	40020000 	.word	0x40020000
 8011278:	fff88000 	.word	0xfff88000
 801127c:	fffc4000 	.word	0xfffc4000
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011280:	49c2      	ldr	r1, [pc, #776]	; (801158c <HAL_DMA_IRQHandler+0x910>)
 8011282:	428b      	cmp	r3, r1
 8011284:	d100      	bne.n	8011288 <HAL_DMA_IRQHandler+0x60c>
 8011286:	e08f      	b.n	80113a8 <HAL_DMA_IRQHandler+0x72c>
 8011288:	49c1      	ldr	r1, [pc, #772]	; (8011590 <HAL_DMA_IRQHandler+0x914>)
 801128a:	428b      	cmp	r3, r1
 801128c:	d100      	bne.n	8011290 <HAL_DMA_IRQHandler+0x614>
 801128e:	e0b4      	b.n	80113fa <HAL_DMA_IRQHandler+0x77e>
 8011290:	49c0      	ldr	r1, [pc, #768]	; (8011594 <HAL_DMA_IRQHandler+0x918>)
 8011292:	428b      	cmp	r3, r1
 8011294:	d064      	beq.n	8011360 <HAL_DMA_IRQHandler+0x6e4>
 8011296:	49c0      	ldr	r1, [pc, #768]	; (8011598 <HAL_DMA_IRQHandler+0x91c>)
 8011298:	428b      	cmp	r3, r1
 801129a:	d100      	bne.n	801129e <HAL_DMA_IRQHandler+0x622>
 801129c:	e0ef      	b.n	801147e <HAL_DMA_IRQHandler+0x802>
 801129e:	49bf      	ldr	r1, [pc, #764]	; (801159c <HAL_DMA_IRQHandler+0x920>)
 80112a0:	428b      	cmp	r3, r1
 80112a2:	d100      	bne.n	80112a6 <HAL_DMA_IRQHandler+0x62a>
 80112a4:	e112      	b.n	80114cc <HAL_DMA_IRQHandler+0x850>
 80112a6:	49be      	ldr	r1, [pc, #760]	; (80115a0 <HAL_DMA_IRQHandler+0x924>)
 80112a8:	428b      	cmp	r3, r1
 80112aa:	d100      	bne.n	80112ae <HAL_DMA_IRQHandler+0x632>
 80112ac:	e12f      	b.n	801150e <HAL_DMA_IRQHandler+0x892>
 80112ae:	4293      	cmp	r3, r2
 80112b0:	d100      	bne.n	80112b4 <HAL_DMA_IRQHandler+0x638>
 80112b2:	e14c      	b.n	801154e <HAL_DMA_IRQHandler+0x8d2>
 80112b4:	4abb      	ldr	r2, [pc, #748]	; (80115a4 <HAL_DMA_IRQHandler+0x928>)
 80112b6:	4293      	cmp	r3, r2
 80112b8:	d076      	beq.n	80113a8 <HAL_DMA_IRQHandler+0x72c>
 80112ba:	4abb      	ldr	r2, [pc, #748]	; (80115a8 <HAL_DMA_IRQHandler+0x92c>)
 80112bc:	4293      	cmp	r3, r2
 80112be:	d100      	bne.n	80112c2 <HAL_DMA_IRQHandler+0x646>
 80112c0:	e09b      	b.n	80113fa <HAL_DMA_IRQHandler+0x77e>
 80112c2:	4aba      	ldr	r2, [pc, #744]	; (80115ac <HAL_DMA_IRQHandler+0x930>)
 80112c4:	4293      	cmp	r3, r2
 80112c6:	d04b      	beq.n	8011360 <HAL_DMA_IRQHandler+0x6e4>
 80112c8:	4ab9      	ldr	r2, [pc, #740]	; (80115b0 <HAL_DMA_IRQHandler+0x934>)
 80112ca:	189a      	adds	r2, r3, r2
 80112cc:	1e51      	subs	r1, r2, #1
 80112ce:	418a      	sbcs	r2, r1
 80112d0:	21f0      	movs	r1, #240	; 0xf0
 80112d2:	4252      	negs	r2, r2
 80112d4:	0289      	lsls	r1, r1, #10
 80112d6:	400a      	ands	r2, r1
 80112d8:	2180      	movs	r1, #128	; 0x80
 80112da:	01c9      	lsls	r1, r1, #7
 80112dc:	468c      	mov	ip, r1
 80112de:	4462      	add	r2, ip
 80112e0:	49b4      	ldr	r1, [pc, #720]	; (80115b4 <HAL_DMA_IRQHandler+0x938>)
 80112e2:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80112e4:	2221      	movs	r2, #33	; 0x21
 80112e6:	2111      	movs	r1, #17
 80112e8:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80112ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80112ec:	2a00      	cmp	r2, #0
 80112ee:	d100      	bne.n	80112f2 <HAL_DMA_IRQHandler+0x676>
 80112f0:	e6ea      	b.n	80110c8 <HAL_DMA_IRQHandler+0x44c>
        hdma->XferHalfCpltCallback(hdma);
 80112f2:	0020      	movs	r0, r4
 80112f4:	4790      	blx	r2
 80112f6:	6823      	ldr	r3, [r4, #0]
 80112f8:	e6e2      	b.n	80110c0 <HAL_DMA_IRQHandler+0x444>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80112fa:	0632      	lsls	r2, r6, #24
 80112fc:	d500      	bpl.n	8011300 <HAL_DMA_IRQHandler+0x684>
 80112fe:	e534      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011300:	0019      	movs	r1, r3
 8011302:	6800      	ldr	r0, [r0, #0]
 8011304:	2240      	movs	r2, #64	; 0x40
 8011306:	e68c      	b.n	8011022 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011308:	0632      	lsls	r2, r6, #24
 801130a:	d500      	bpl.n	801130e <HAL_DMA_IRQHandler+0x692>
 801130c:	e52d      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801130e:	6800      	ldr	r0, [r0, #0]
 8011310:	2240      	movs	r2, #64	; 0x40
 8011312:	e5b3      	b.n	8010e7c <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011314:	2280      	movs	r2, #128	; 0x80
 8011316:	0192      	lsls	r2, r2, #6
 8011318:	e619      	b.n	8010f4e <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801131a:	2280      	movs	r2, #128	; 0x80
 801131c:	00d2      	lsls	r2, r2, #3
 801131e:	e680      	b.n	8011022 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011320:	2280      	movs	r2, #128	; 0x80
 8011322:	0292      	lsls	r2, r2, #10
 8011324:	e613      	b.n	8010f4e <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011326:	0432      	lsls	r2, r6, #16
 8011328:	d500      	bpl.n	801132c <HAL_DMA_IRQHandler+0x6b0>
 801132a:	e51e      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801132c:	4aa1      	ldr	r2, [pc, #644]	; (80115b4 <HAL_DMA_IRQHandler+0x938>)
 801132e:	6810      	ldr	r0, [r2, #0]
 8011330:	2280      	movs	r2, #128	; 0x80
 8011332:	01d2      	lsls	r2, r2, #7
 8011334:	e675      	b.n	8011022 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011336:	0432      	lsls	r2, r6, #16
 8011338:	d500      	bpl.n	801133c <HAL_DMA_IRQHandler+0x6c0>
 801133a:	e516      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801133c:	2280      	movs	r2, #128	; 0x80
 801133e:	6800      	ldr	r0, [r0, #0]
 8011340:	0019      	movs	r1, r3
 8011342:	01d2      	lsls	r2, r2, #7
 8011344:	e66d      	b.n	8011022 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011346:	0432      	lsls	r2, r6, #16
 8011348:	d500      	bpl.n	801134c <HAL_DMA_IRQHandler+0x6d0>
 801134a:	e50e      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801134c:	2280      	movs	r2, #128	; 0x80
 801134e:	6800      	ldr	r0, [r0, #0]
 8011350:	01d2      	lsls	r2, r2, #7
 8011352:	e593      	b.n	8010e7c <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011354:	2280      	movs	r2, #128	; 0x80
 8011356:	0392      	lsls	r2, r2, #14
 8011358:	e5f9      	b.n	8010f4e <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801135a:	2280      	movs	r2, #128	; 0x80
 801135c:	0112      	lsls	r2, r2, #4
 801135e:	e542      	b.n	8010de6 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011360:	2280      	movs	r2, #128	; 0x80
 8011362:	00d2      	lsls	r2, r2, #3
 8011364:	e7bc      	b.n	80112e0 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011366:	2280      	movs	r2, #128	; 0x80
 8011368:	0112      	lsls	r2, r2, #4
 801136a:	e6e5      	b.n	8011138 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801136c:	2280      	movs	r2, #128	; 0x80
 801136e:	00d2      	lsls	r2, r2, #3
 8011370:	e69a      	b.n	80110a8 <HAL_DMA_IRQHandler+0x42c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011372:	0132      	lsls	r2, r6, #4
 8011374:	d500      	bpl.n	8011378 <HAL_DMA_IRQHandler+0x6fc>
 8011376:	e4f8      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011378:	0019      	movs	r1, r3
 801137a:	6800      	ldr	r0, [r0, #0]
 801137c:	2280      	movs	r2, #128	; 0x80
 801137e:	04d2      	lsls	r2, r2, #19
 8011380:	e64f      	b.n	8011022 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011382:	0132      	lsls	r2, r6, #4
 8011384:	d500      	bpl.n	8011388 <HAL_DMA_IRQHandler+0x70c>
 8011386:	e4f0      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011388:	6800      	ldr	r0, [r0, #0]
 801138a:	2280      	movs	r2, #128	; 0x80
 801138c:	04d2      	lsls	r2, r2, #19
 801138e:	e575      	b.n	8010e7c <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011390:	2380      	movs	r3, #128	; 0x80
 8011392:	019b      	lsls	r3, r3, #6
 8011394:	e623      	b.n	8010fde <HAL_DMA_IRQHandler+0x362>
 8011396:	2380      	movs	r3, #128	; 0x80
 8011398:	019b      	lsls	r3, r3, #6
 801139a:	e750      	b.n	801123e <HAL_DMA_IRQHandler+0x5c2>
 801139c:	2302      	movs	r3, #2
 801139e:	e61e      	b.n	8010fde <HAL_DMA_IRQHandler+0x362>
 80113a0:	2302      	movs	r3, #2
 80113a2:	e74c      	b.n	801123e <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80113a4:	2204      	movs	r2, #4
 80113a6:	e67f      	b.n	80110a8 <HAL_DMA_IRQHandler+0x42c>
 80113a8:	2204      	movs	r2, #4
 80113aa:	e799      	b.n	80112e0 <HAL_DMA_IRQHandler+0x664>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80113ac:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80113ae:	4882      	ldr	r0, [pc, #520]	; (80115b8 <HAL_DMA_IRQHandler+0x93c>)
 80113b0:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80113b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80113b4:	432a      	orrs	r2, r5
 80113b6:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80113b8:	2221      	movs	r2, #33	; 0x21
 80113ba:	3503      	adds	r5, #3
 80113bc:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80113be:	2500      	movs	r5, #0
 80113c0:	3a01      	subs	r2, #1
 80113c2:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80113c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80113c6:	2a00      	cmp	r2, #0
 80113c8:	d000      	beq.n	80113cc <HAL_DMA_IRQHandler+0x750>
 80113ca:	e6c4      	b.n	8011156 <HAL_DMA_IRQHandler+0x4da>
 80113cc:	e554      	b.n	8010e78 <HAL_DMA_IRQHandler+0x1fc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80113ce:	0332      	lsls	r2, r6, #12
 80113d0:	d500      	bpl.n	80113d4 <HAL_DMA_IRQHandler+0x758>
 80113d2:	e4ca      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80113d4:	2280      	movs	r2, #128	; 0x80
 80113d6:	6800      	ldr	r0, [r0, #0]
 80113d8:	02d2      	lsls	r2, r2, #11
 80113da:	e54f      	b.n	8010e7c <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80113dc:	0332      	lsls	r2, r6, #12
 80113de:	d500      	bpl.n	80113e2 <HAL_DMA_IRQHandler+0x766>
 80113e0:	e4c3      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80113e2:	2280      	movs	r2, #128	; 0x80
 80113e4:	6800      	ldr	r0, [r0, #0]
 80113e6:	0019      	movs	r1, r3
 80113e8:	02d2      	lsls	r2, r2, #11
 80113ea:	e61a      	b.n	8011022 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80113ec:	2280      	movs	r2, #128	; 0x80
 80113ee:	0492      	lsls	r2, r2, #18
 80113f0:	e5ad      	b.n	8010f4e <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80113f2:	2320      	movs	r3, #32
 80113f4:	e723      	b.n	801123e <HAL_DMA_IRQHandler+0x5c2>
 80113f6:	2320      	movs	r3, #32
 80113f8:	e5f1      	b.n	8010fde <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80113fa:	2240      	movs	r2, #64	; 0x40
 80113fc:	e770      	b.n	80112e0 <HAL_DMA_IRQHandler+0x664>
 80113fe:	2240      	movs	r2, #64	; 0x40
 8011400:	e652      	b.n	80110a8 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011402:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011404:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011406:	486c      	ldr	r0, [pc, #432]	; (80115b8 <HAL_DMA_IRQHandler+0x93c>)
 8011408:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801140a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801140c:	432a      	orrs	r2, r5
 801140e:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8011410:	2221      	movs	r2, #33	; 0x21
 8011412:	3503      	adds	r5, #3
 8011414:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8011416:	2500      	movs	r5, #0
 8011418:	3a01      	subs	r2, #1
 801141a:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801141c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801141e:	2a00      	cmp	r2, #0
 8011420:	d000      	beq.n	8011424 <HAL_DMA_IRQHandler+0x7a8>
 8011422:	e698      	b.n	8011156 <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011424:	6800      	ldr	r0, [r0, #0]
 8011426:	e4f4      	b.n	8010e12 <HAL_DMA_IRQHandler+0x196>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011428:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801142a:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801142c:	4861      	ldr	r0, [pc, #388]	; (80115b4 <HAL_DMA_IRQHandler+0x938>)
 801142e:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011430:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011432:	432a      	orrs	r2, r5
 8011434:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8011436:	2221      	movs	r2, #33	; 0x21
 8011438:	3503      	adds	r5, #3
 801143a:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801143c:	2500      	movs	r5, #0
 801143e:	3a01      	subs	r2, #1
 8011440:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011442:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011444:	2a00      	cmp	r2, #0
 8011446:	d000      	beq.n	801144a <HAL_DMA_IRQHandler+0x7ce>
 8011448:	e685      	b.n	8011156 <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801144a:	6800      	ldr	r0, [r0, #0]
 801144c:	e691      	b.n	8011172 <HAL_DMA_IRQHandler+0x4f6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801144e:	0232      	lsls	r2, r6, #8
 8011450:	d500      	bpl.n	8011454 <HAL_DMA_IRQHandler+0x7d8>
 8011452:	e48a      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011454:	0019      	movs	r1, r3
 8011456:	6800      	ldr	r0, [r0, #0]
 8011458:	2280      	movs	r2, #128	; 0x80
 801145a:	03d2      	lsls	r2, r2, #15
 801145c:	e5e1      	b.n	8011022 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801145e:	0232      	lsls	r2, r6, #8
 8011460:	d500      	bpl.n	8011464 <HAL_DMA_IRQHandler+0x7e8>
 8011462:	e482      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011464:	6800      	ldr	r0, [r0, #0]
 8011466:	2280      	movs	r2, #128	; 0x80
 8011468:	03d2      	lsls	r2, r2, #15
 801146a:	e507      	b.n	8010e7c <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801146c:	2380      	movs	r3, #128	; 0x80
 801146e:	009b      	lsls	r3, r3, #2
 8011470:	e6e5      	b.n	801123e <HAL_DMA_IRQHandler+0x5c2>
 8011472:	2380      	movs	r3, #128	; 0x80
 8011474:	009b      	lsls	r3, r3, #2
 8011476:	e5b2      	b.n	8010fde <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011478:	2280      	movs	r2, #128	; 0x80
 801147a:	01d2      	lsls	r2, r2, #7
 801147c:	e614      	b.n	80110a8 <HAL_DMA_IRQHandler+0x42c>
 801147e:	2280      	movs	r2, #128	; 0x80
 8011480:	01d2      	lsls	r2, r2, #7
 8011482:	e72d      	b.n	80112e0 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011484:	2280      	movs	r2, #128	; 0x80
 8011486:	0212      	lsls	r2, r2, #8
 8011488:	e4ad      	b.n	8010de6 <HAL_DMA_IRQHandler+0x16a>
 801148a:	2280      	movs	r2, #128	; 0x80
 801148c:	0212      	lsls	r2, r2, #8
 801148e:	e653      	b.n	8011138 <HAL_DMA_IRQHandler+0x4bc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011490:	0732      	lsls	r2, r6, #28
 8011492:	d500      	bpl.n	8011496 <HAL_DMA_IRQHandler+0x81a>
 8011494:	e469      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011496:	4a47      	ldr	r2, [pc, #284]	; (80115b4 <HAL_DMA_IRQHandler+0x938>)
 8011498:	6810      	ldr	r0, [r2, #0]
 801149a:	2204      	movs	r2, #4
 801149c:	e5c1      	b.n	8011022 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801149e:	0732      	lsls	r2, r6, #28
 80114a0:	d500      	bpl.n	80114a4 <HAL_DMA_IRQHandler+0x828>
 80114a2:	e462      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80114a4:	4a44      	ldr	r2, [pc, #272]	; (80115b8 <HAL_DMA_IRQHandler+0x93c>)
 80114a6:	493f      	ldr	r1, [pc, #252]	; (80115a4 <HAL_DMA_IRQHandler+0x928>)
 80114a8:	6810      	ldr	r0, [r2, #0]
 80114aa:	2204      	movs	r2, #4
 80114ac:	e4e6      	b.n	8010e7c <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80114ae:	2380      	movs	r3, #128	; 0x80
 80114b0:	029b      	lsls	r3, r3, #10
 80114b2:	e6c4      	b.n	801123e <HAL_DMA_IRQHandler+0x5c2>
 80114b4:	2380      	movs	r3, #128	; 0x80
 80114b6:	029b      	lsls	r3, r3, #10
 80114b8:	e591      	b.n	8010fde <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80114ba:	2280      	movs	r2, #128	; 0x80
 80114bc:	0312      	lsls	r2, r2, #12
 80114be:	e63b      	b.n	8011138 <HAL_DMA_IRQHandler+0x4bc>
 80114c0:	2280      	movs	r2, #128	; 0x80
 80114c2:	0312      	lsls	r2, r2, #12
 80114c4:	e48f      	b.n	8010de6 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80114c6:	2280      	movs	r2, #128	; 0x80
 80114c8:	02d2      	lsls	r2, r2, #11
 80114ca:	e5ed      	b.n	80110a8 <HAL_DMA_IRQHandler+0x42c>
 80114cc:	2280      	movs	r2, #128	; 0x80
 80114ce:	02d2      	lsls	r2, r2, #11
 80114d0:	e706      	b.n	80112e0 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80114d2:	0632      	lsls	r2, r6, #24
 80114d4:	d500      	bpl.n	80114d8 <HAL_DMA_IRQHandler+0x85c>
 80114d6:	e448      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80114d8:	4a36      	ldr	r2, [pc, #216]	; (80115b4 <HAL_DMA_IRQHandler+0x938>)
 80114da:	6810      	ldr	r0, [r2, #0]
 80114dc:	2240      	movs	r2, #64	; 0x40
 80114de:	e5a0      	b.n	8011022 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80114e0:	0632      	lsls	r2, r6, #24
 80114e2:	d500      	bpl.n	80114e6 <HAL_DMA_IRQHandler+0x86a>
 80114e4:	e441      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80114e6:	4a34      	ldr	r2, [pc, #208]	; (80115b8 <HAL_DMA_IRQHandler+0x93c>)
 80114e8:	492f      	ldr	r1, [pc, #188]	; (80115a8 <HAL_DMA_IRQHandler+0x92c>)
 80114ea:	6810      	ldr	r0, [r2, #0]
 80114ec:	2240      	movs	r2, #64	; 0x40
 80114ee:	e4c5      	b.n	8010e7c <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80114f0:	2380      	movs	r3, #128	; 0x80
 80114f2:	039b      	lsls	r3, r3, #14
 80114f4:	e6a3      	b.n	801123e <HAL_DMA_IRQHandler+0x5c2>
 80114f6:	2380      	movs	r3, #128	; 0x80
 80114f8:	039b      	lsls	r3, r3, #14
 80114fa:	e570      	b.n	8010fde <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80114fc:	2280      	movs	r2, #128	; 0x80
 80114fe:	0412      	lsls	r2, r2, #16
 8011500:	e471      	b.n	8010de6 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011502:	2280      	movs	r2, #128	; 0x80
 8011504:	03d2      	lsls	r2, r2, #15
 8011506:	e5cf      	b.n	80110a8 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011508:	2280      	movs	r2, #128	; 0x80
 801150a:	0412      	lsls	r2, r2, #16
 801150c:	e614      	b.n	8011138 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801150e:	2280      	movs	r2, #128	; 0x80
 8011510:	03d2      	lsls	r2, r2, #15
 8011512:	e6e5      	b.n	80112e0 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011514:	0532      	lsls	r2, r6, #20
 8011516:	d500      	bpl.n	801151a <HAL_DMA_IRQHandler+0x89e>
 8011518:	e427      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801151a:	4a26      	ldr	r2, [pc, #152]	; (80115b4 <HAL_DMA_IRQHandler+0x938>)
 801151c:	6810      	ldr	r0, [r2, #0]
 801151e:	2280      	movs	r2, #128	; 0x80
 8011520:	00d2      	lsls	r2, r2, #3
 8011522:	e57e      	b.n	8011022 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011524:	0532      	lsls	r2, r6, #20
 8011526:	d500      	bpl.n	801152a <HAL_DMA_IRQHandler+0x8ae>
 8011528:	e41f      	b.n	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801152a:	4a23      	ldr	r2, [pc, #140]	; (80115b8 <HAL_DMA_IRQHandler+0x93c>)
 801152c:	0019      	movs	r1, r3
 801152e:	6810      	ldr	r0, [r2, #0]
 8011530:	2280      	movs	r2, #128	; 0x80
 8011532:	00d2      	lsls	r2, r2, #3
 8011534:	e4a2      	b.n	8010e7c <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011536:	2380      	movs	r3, #128	; 0x80
 8011538:	049b      	lsls	r3, r3, #18
 801153a:	e550      	b.n	8010fde <HAL_DMA_IRQHandler+0x362>
 801153c:	2380      	movs	r3, #128	; 0x80
 801153e:	049b      	lsls	r3, r3, #18
 8011540:	e67d      	b.n	801123e <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011542:	2280      	movs	r2, #128	; 0x80
 8011544:	04d2      	lsls	r2, r2, #19
 8011546:	e5af      	b.n	80110a8 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011548:	2280      	movs	r2, #128	; 0x80
 801154a:	0512      	lsls	r2, r2, #20
 801154c:	e5f4      	b.n	8011138 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801154e:	2280      	movs	r2, #128	; 0x80
 8011550:	04d2      	lsls	r2, r2, #19
 8011552:	e6c5      	b.n	80112e0 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011554:	2280      	movs	r2, #128	; 0x80
 8011556:	0512      	lsls	r2, r2, #20
 8011558:	e445      	b.n	8010de6 <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801155a:	0432      	lsls	r2, r6, #16
 801155c:	d501      	bpl.n	8011562 <HAL_DMA_IRQHandler+0x8e6>
 801155e:	f7ff fc04 	bl	8010d6a <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011562:	0019      	movs	r1, r3
 8011564:	4a14      	ldr	r2, [pc, #80]	; (80115b8 <HAL_DMA_IRQHandler+0x93c>)
 8011566:	6810      	ldr	r0, [r2, #0]
 8011568:	2280      	movs	r2, #128	; 0x80
 801156a:	01d2      	lsls	r2, r2, #7
 801156c:	e486      	b.n	8010e7c <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801156e:	2208      	movs	r2, #8
 8011570:	e5e2      	b.n	8011138 <HAL_DMA_IRQHandler+0x4bc>
 8011572:	2208      	movs	r2, #8
 8011574:	e437      	b.n	8010de6 <HAL_DMA_IRQHandler+0x16a>
 8011576:	2280      	movs	r2, #128	; 0x80
 8011578:	e5de      	b.n	8011138 <HAL_DMA_IRQHandler+0x4bc>
 801157a:	2280      	movs	r2, #128	; 0x80
 801157c:	e433      	b.n	8010de6 <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801157e:	6800      	ldr	r0, [r0, #0]
 8011580:	0019      	movs	r1, r3
 8011582:	2204      	movs	r2, #4
 8011584:	e54d      	b.n	8011022 <HAL_DMA_IRQHandler+0x3a6>
 8011586:	2280      	movs	r2, #128	; 0x80
 8011588:	00d2      	lsls	r2, r2, #3
 801158a:	e477      	b.n	8010e7c <HAL_DMA_IRQHandler+0x200>
 801158c:	40020008 	.word	0x40020008
 8011590:	4002001c 	.word	0x4002001c
 8011594:	40020030 	.word	0x40020030
 8011598:	40020044 	.word	0x40020044
 801159c:	40020058 	.word	0x40020058
 80115a0:	4002006c 	.word	0x4002006c
 80115a4:	40020408 	.word	0x40020408
 80115a8:	4002041c 	.word	0x4002041c
 80115ac:	40020430 	.word	0x40020430
 80115b0:	bffdfbbc 	.word	0xbffdfbbc
 80115b4:	40020000 	.word	0x40020000
 80115b8:	40020400 	.word	0x40020400

080115bc <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80115bc:	4b05      	ldr	r3, [pc, #20]	; (80115d4 <HAL_FLASH_Unlock+0x18>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
  }
  else
  {
    return HAL_ERROR;
 80115be:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80115c0:	691a      	ldr	r2, [r3, #16]
 80115c2:	0612      	lsls	r2, r2, #24
 80115c4:	d504      	bpl.n	80115d0 <HAL_FLASH_Unlock+0x14>
  }

  return HAL_OK; 
 80115c6:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80115c8:	4a03      	ldr	r2, [pc, #12]	; (80115d8 <HAL_FLASH_Unlock+0x1c>)
 80115ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80115cc:	4a03      	ldr	r2, [pc, #12]	; (80115dc <HAL_FLASH_Unlock+0x20>)
 80115ce:	605a      	str	r2, [r3, #4]
}
 80115d0:	4770      	bx	lr
 80115d2:	46c0      	nop			; (mov r8, r8)
 80115d4:	40022000 	.word	0x40022000
 80115d8:	45670123 	.word	0x45670123
 80115dc:	cdef89ab 	.word	0xcdef89ab

080115e0 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80115e0:	2180      	movs	r1, #128	; 0x80
 80115e2:	4a03      	ldr	r2, [pc, #12]	; (80115f0 <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 80115e4:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80115e6:	6913      	ldr	r3, [r2, #16]
 80115e8:	430b      	orrs	r3, r1
 80115ea:	6113      	str	r3, [r2, #16]
}
 80115ec:	4770      	bx	lr
 80115ee:	46c0      	nop			; (mov r8, r8)
 80115f0:	40022000 	.word	0x40022000

080115f4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80115f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115f6:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80115f8:	f7fe fdac 	bl	8010154 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80115fc:	4c1d      	ldr	r4, [pc, #116]	; (8011674 <FLASH_WaitForLastOperation+0x80>)
  uint32_t tickstart = HAL_GetTick();
 80115fe:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011600:	2601      	movs	r6, #1
 8011602:	e001      	b.n	8011608 <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8011604:	1c6b      	adds	r3, r5, #1
 8011606:	d11d      	bne.n	8011644 <FLASH_WaitForLastOperation+0x50>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011608:	68e3      	ldr	r3, [r4, #12]
 801160a:	421e      	tst	r6, r3
 801160c:	d1fa      	bne.n	8011604 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801160e:	2320      	movs	r3, #32
 8011610:	68e2      	ldr	r2, [r4, #12]
 8011612:	4213      	tst	r3, r2
 8011614:	d000      	beq.n	8011618 <FLASH_WaitForLastOperation+0x24>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011616:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011618:	4b16      	ldr	r3, [pc, #88]	; (8011674 <FLASH_WaitForLastOperation+0x80>)
 801161a:	68da      	ldr	r2, [r3, #12]
 801161c:	06d2      	lsls	r2, r2, #27
 801161e:	d51a      	bpl.n	8011656 <FLASH_WaitForLastOperation+0x62>
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011620:	4b14      	ldr	r3, [pc, #80]	; (8011674 <FLASH_WaitForLastOperation+0x80>)
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	06db      	lsls	r3, r3, #27
 8011626:	d504      	bpl.n	8011632 <FLASH_WaitForLastOperation+0x3e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011628:	2102      	movs	r1, #2
 801162a:	4a13      	ldr	r2, [pc, #76]	; (8011678 <FLASH_WaitForLastOperation+0x84>)
 801162c:	69d3      	ldr	r3, [r2, #28]
 801162e:	430b      	orrs	r3, r1
 8011630:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011632:	4b10      	ldr	r3, [pc, #64]	; (8011674 <FLASH_WaitForLastOperation+0x80>)
 8011634:	68db      	ldr	r3, [r3, #12]
 8011636:	075b      	lsls	r3, r3, #29
 8011638:	d416      	bmi.n	8011668 <FLASH_WaitForLastOperation+0x74>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 801163a:	2214      	movs	r2, #20
    return HAL_ERROR;
 801163c:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 801163e:	4b0d      	ldr	r3, [pc, #52]	; (8011674 <FLASH_WaitForLastOperation+0x80>)
 8011640:	60da      	str	r2, [r3, #12]
}
 8011642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011644:	2d00      	cmp	r5, #0
 8011646:	d004      	beq.n	8011652 <FLASH_WaitForLastOperation+0x5e>
 8011648:	f7fe fd84 	bl	8010154 <HAL_GetTick>
 801164c:	1bc0      	subs	r0, r0, r7
 801164e:	42a8      	cmp	r0, r5
 8011650:	d9da      	bls.n	8011608 <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 8011652:	2003      	movs	r0, #3
 8011654:	e7f5      	b.n	8011642 <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011656:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8011658:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801165a:	075b      	lsls	r3, r3, #29
 801165c:	d5f1      	bpl.n	8011642 <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 801165e:	4b05      	ldr	r3, [pc, #20]	; (8011674 <FLASH_WaitForLastOperation+0x80>)
 8011660:	68db      	ldr	r3, [r3, #12]
 8011662:	06db      	lsls	r3, r3, #27
 8011664:	d5e5      	bpl.n	8011632 <FLASH_WaitForLastOperation+0x3e>
 8011666:	e7df      	b.n	8011628 <FLASH_WaitForLastOperation+0x34>
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011668:	2101      	movs	r1, #1
 801166a:	4a03      	ldr	r2, [pc, #12]	; (8011678 <FLASH_WaitForLastOperation+0x84>)
 801166c:	69d3      	ldr	r3, [r2, #28]
 801166e:	430b      	orrs	r3, r1
 8011670:	61d3      	str	r3, [r2, #28]
 8011672:	e7e2      	b.n	801163a <FLASH_WaitForLastOperation+0x46>
 8011674:	40022000 	.word	0x40022000
 8011678:	200071b8 	.word	0x200071b8

0801167c <HAL_FLASH_Program>:
{
 801167c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801167e:	464e      	mov	r6, r9
 8011680:	4657      	mov	r7, sl
 8011682:	46de      	mov	lr, fp
 8011684:	4645      	mov	r5, r8
 8011686:	b5e0      	push	{r5, r6, r7, lr}
 8011688:	469a      	mov	sl, r3
 801168a:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 801168c:	4b2a      	ldr	r3, [pc, #168]	; (8011738 <HAL_FLASH_Program+0xbc>)
{
 801168e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8011690:	4699      	mov	r9, r3
 8011692:	7e1b      	ldrb	r3, [r3, #24]
{
 8011694:	0004      	movs	r4, r0
 8011696:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8011698:	2b01      	cmp	r3, #1
 801169a:	d048      	beq.n	801172e <HAL_FLASH_Program+0xb2>
 801169c:	2501      	movs	r5, #1
 801169e:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80116a0:	4826      	ldr	r0, [pc, #152]	; (801173c <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 80116a2:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80116a4:	f7ff ffa6 	bl	80115f4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80116a8:	2800      	cmp	r0, #0
 80116aa:	d136      	bne.n	801171a <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80116ac:	2c01      	cmp	r4, #1
 80116ae:	d040      	beq.n	8011732 <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 80116b0:	3c02      	subs	r4, #2
 80116b2:	4263      	negs	r3, r4
 80116b4:	415c      	adcs	r4, r3
 80116b6:	2304      	movs	r3, #4
 80116b8:	4264      	negs	r4, r4
 80116ba:	43ac      	bics	r4, r5
 80116bc:	46a0      	mov	r8, r4
 80116be:	469c      	mov	ip, r3
 80116c0:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80116c2:	2300      	movs	r3, #0
      nbiterations = 4;
 80116c4:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80116c6:	469b      	mov	fp, r3
 80116c8:	e018      	b.n	80116fc <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80116ca:	4653      	mov	r3, sl
 80116cc:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80116ce:	464a      	mov	r2, r9
 80116d0:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80116d2:	2701      	movs	r7, #1
 80116d4:	4c1a      	ldr	r4, [pc, #104]	; (8011740 <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80116d6:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80116d8:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80116da:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80116dc:	433a      	orrs	r2, r7
 80116de:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80116e0:	4816      	ldr	r0, [pc, #88]	; (801173c <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 80116e2:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80116e4:	f7ff ff86 	bl	80115f4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80116e8:	6923      	ldr	r3, [r4, #16]
 80116ea:	43bb      	bics	r3, r7
 80116ec:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 80116ee:	2800      	cmp	r0, #0
 80116f0:	d113      	bne.n	801171a <HAL_FLASH_Program+0x9e>
 80116f2:	3501      	adds	r5, #1
    for (index = 0; index < nbiterations; index++)
 80116f4:	b2eb      	uxtb	r3, r5
 80116f6:	3602      	adds	r6, #2
 80116f8:	4598      	cmp	r8, r3
 80116fa:	d90e      	bls.n	801171a <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80116fc:	2220      	movs	r2, #32
 80116fe:	012b      	lsls	r3, r5, #4
 8011700:	4252      	negs	r2, r2
 8011702:	189a      	adds	r2, r3, r2
 8011704:	d5e1      	bpl.n	80116ca <HAL_FLASH_Program+0x4e>
 8011706:	2220      	movs	r2, #32
 8011708:	4651      	mov	r1, sl
 801170a:	1ad2      	subs	r2, r2, r3
 801170c:	4091      	lsls	r1, r2
 801170e:	000a      	movs	r2, r1
 8011710:	9901      	ldr	r1, [sp, #4]
 8011712:	40d9      	lsrs	r1, r3
 8011714:	000b      	movs	r3, r1
 8011716:	4313      	orrs	r3, r2
 8011718:	e7d9      	b.n	80116ce <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 801171a:	2300      	movs	r3, #0
 801171c:	464a      	mov	r2, r9
 801171e:	7613      	strb	r3, [r2, #24]
}
 8011720:	b003      	add	sp, #12
 8011722:	bc3c      	pop	{r2, r3, r4, r5}
 8011724:	4690      	mov	r8, r2
 8011726:	4699      	mov	r9, r3
 8011728:	46a2      	mov	sl, r4
 801172a:	46ab      	mov	fp, r5
 801172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 801172e:	2002      	movs	r0, #2
 8011730:	e7f6      	b.n	8011720 <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 8011732:	2301      	movs	r3, #1
 8011734:	4698      	mov	r8, r3
 8011736:	e7c4      	b.n	80116c2 <HAL_FLASH_Program+0x46>
 8011738:	200071b8 	.word	0x200071b8
 801173c:	0000c350 	.word	0x0000c350
 8011740:	40022000 	.word	0x40022000

08011744 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8011744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011746:	464f      	mov	r7, r9
 8011748:	4646      	mov	r6, r8
 801174a:	46d6      	mov	lr, sl
 801174c:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801174e:	4f30      	ldr	r7, [pc, #192]	; (8011810 <HAL_FLASHEx_Erase+0xcc>)
{
 8011750:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8011752:	7e3b      	ldrb	r3, [r7, #24]
{
 8011754:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8011756:	2b01      	cmp	r3, #1
 8011758:	d057      	beq.n	801180a <HAL_FLASHEx_Erase+0xc6>
 801175a:	2301      	movs	r3, #1
 801175c:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801175e:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011760:	482c      	ldr	r0, [pc, #176]	; (8011814 <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011762:	2b01      	cmp	r3, #1
 8011764:	d034      	beq.n	80117d0 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011766:	f7ff ff45 	bl	80115f4 <FLASH_WaitForLastOperation>
 801176a:	2800      	cmp	r0, #0
 801176c:	d134      	bne.n	80117d8 <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 801176e:	2301      	movs	r3, #1
 8011770:	464a      	mov	r2, r9
 8011772:	425b      	negs	r3, r3
 8011774:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011776:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 8011778:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801177a:	02db      	lsls	r3, r3, #11
 801177c:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 801177e:	429d      	cmp	r5, r3
 8011780:	d22a      	bcs.n	80117d8 <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011782:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011784:	4c24      	ldr	r4, [pc, #144]	; (8011818 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011786:	4698      	mov	r8, r3
 8011788:	e00a      	b.n	80117a0 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 801178a:	2380      	movs	r3, #128	; 0x80
 801178c:	011b      	lsls	r3, r3, #4
 801178e:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011790:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8011792:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011794:	4694      	mov	ip, r2
 8011796:	68b3      	ldr	r3, [r6, #8]
 8011798:	02db      	lsls	r3, r3, #11
 801179a:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 801179c:	42ab      	cmp	r3, r5
 801179e:	d91c      	bls.n	80117da <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80117a0:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80117a2:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80117a4:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80117a6:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80117a8:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80117aa:	481a      	ldr	r0, [pc, #104]	; (8011814 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80117ac:	4313      	orrs	r3, r2
 80117ae:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80117b0:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80117b2:	6923      	ldr	r3, [r4, #16]
 80117b4:	323e      	adds	r2, #62	; 0x3e
 80117b6:	4313      	orrs	r3, r2
 80117b8:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80117ba:	f7ff ff1b 	bl	80115f4 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80117be:	4652      	mov	r2, sl
 80117c0:	6923      	ldr	r3, [r4, #16]
 80117c2:	4393      	bics	r3, r2
 80117c4:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80117c6:	2800      	cmp	r0, #0
 80117c8:	d0df      	beq.n	801178a <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 80117ca:	464b      	mov	r3, r9
 80117cc:	601d      	str	r5, [r3, #0]
            break;
 80117ce:	e004      	b.n	80117da <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80117d0:	f7ff ff10 	bl	80115f4 <FLASH_WaitForLastOperation>
 80117d4:	2800      	cmp	r0, #0
 80117d6:	d007      	beq.n	80117e8 <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 80117d8:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80117da:	2300      	movs	r3, #0
 80117dc:	763b      	strb	r3, [r7, #24]
}
 80117de:	bc1c      	pop	{r2, r3, r4}
 80117e0:	4690      	mov	r8, r2
 80117e2:	4699      	mov	r9, r3
 80117e4:	46a2      	mov	sl, r4
 80117e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80117e8:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80117ea:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80117ec:	4c0a      	ldr	r4, [pc, #40]	; (8011818 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80117ee:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80117f0:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80117f2:	4808      	ldr	r0, [pc, #32]	; (8011814 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80117f4:	432b      	orrs	r3, r5
 80117f6:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80117f8:	6923      	ldr	r3, [r4, #16]
 80117fa:	4313      	orrs	r3, r2
 80117fc:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80117fe:	f7ff fef9 	bl	80115f4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8011802:	6923      	ldr	r3, [r4, #16]
 8011804:	43ab      	bics	r3, r5
 8011806:	6123      	str	r3, [r4, #16]
 8011808:	e7e7      	b.n	80117da <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 801180a:	2002      	movs	r0, #2
 801180c:	e7e7      	b.n	80117de <HAL_FLASHEx_Erase+0x9a>
 801180e:	46c0      	nop			; (mov r8, r8)
 8011810:	200071b8 	.word	0x200071b8
 8011814:	0000c350 	.word	0x0000c350
 8011818:	40022000 	.word	0x40022000

0801181c <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801181c:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801181e:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011820:	4b05      	ldr	r3, [pc, #20]	; (8011838 <FLASH_PageErase+0x1c>)
 8011822:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011824:	4b05      	ldr	r3, [pc, #20]	; (801183c <FLASH_PageErase+0x20>)
 8011826:	691a      	ldr	r2, [r3, #16]
 8011828:	430a      	orrs	r2, r1
 801182a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 801182c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801182e:	691a      	ldr	r2, [r3, #16]
 8011830:	313e      	adds	r1, #62	; 0x3e
 8011832:	430a      	orrs	r2, r1
 8011834:	611a      	str	r2, [r3, #16]
}
 8011836:	4770      	bx	lr
 8011838:	200071b8 	.word	0x200071b8
 801183c:	40022000 	.word	0x40022000

08011840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011842:	464e      	mov	r6, r9
 8011844:	46de      	mov	lr, fp
 8011846:	4657      	mov	r7, sl
 8011848:	4645      	mov	r5, r8
 801184a:	b5e0      	push	{r5, r6, r7, lr}
 801184c:	4689      	mov	r9, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 801184e:	6809      	ldr	r1, [r1, #0]
{ 
 8011850:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 8011852:	2900      	cmp	r1, #0
 8011854:	d100      	bne.n	8011858 <HAL_GPIO_Init+0x18>
 8011856:	e080      	b.n	801195a <HAL_GPIO_Init+0x11a>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011858:	4b70      	ldr	r3, [pc, #448]	; (8011a1c <HAL_GPIO_Init+0x1dc>)
  uint32_t position = 0x00;
 801185a:	2400      	movs	r4, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801185c:	469b      	mov	fp, r3
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801185e:	4b70      	ldr	r3, [pc, #448]	; (8011a20 <HAL_GPIO_Init+0x1e0>)
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011860:	2601      	movs	r6, #1
        temp = EXTI->IMR;
 8011862:	4698      	mov	r8, r3
 8011864:	468a      	mov	sl, r1
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011866:	0033      	movs	r3, r6
 8011868:	4652      	mov	r2, sl
 801186a:	40a3      	lsls	r3, r4
 801186c:	4013      	ands	r3, r2
 801186e:	9300      	str	r3, [sp, #0]
    if(iocurrent)
 8011870:	d06f      	beq.n	8011952 <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011872:	464b      	mov	r3, r9
 8011874:	6859      	ldr	r1, [r3, #4]
 8011876:	2310      	movs	r3, #16
 8011878:	000f      	movs	r7, r1
 801187a:	439f      	bics	r7, r3
 801187c:	003b      	movs	r3, r7
 801187e:	9701      	str	r7, [sp, #4]
 8011880:	2f02      	cmp	r7, #2
 8011882:	d100      	bne.n	8011886 <HAL_GPIO_Init+0x46>
 8011884:	e070      	b.n	8011968 <HAL_GPIO_Init+0x128>
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011886:	2203      	movs	r2, #3
 8011888:	0065      	lsls	r5, r4, #1
 801188a:	40aa      	lsls	r2, r5
 801188c:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 801188e:	6803      	ldr	r3, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011890:	4013      	ands	r3, r2
 8011892:	001f      	movs	r7, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011894:	2303      	movs	r3, #3
 8011896:	400b      	ands	r3, r1
 8011898:	40ab      	lsls	r3, r5
 801189a:	469c      	mov	ip, r3
 801189c:	003b      	movs	r3, r7
 801189e:	4667      	mov	r7, ip
 80118a0:	433b      	orrs	r3, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80118a2:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 80118a4:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80118a6:	3f01      	subs	r7, #1
 80118a8:	2f01      	cmp	r7, #1
 80118aa:	d800      	bhi.n	80118ae <HAL_GPIO_Init+0x6e>
 80118ac:	e079      	b.n	80119a2 <HAL_GPIO_Init+0x162>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80118ae:	464b      	mov	r3, r9
      temp = GPIOx->PUPDR;
 80118b0:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80118b2:	403a      	ands	r2, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80118b4:	689f      	ldr	r7, [r3, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80118b6:	2380      	movs	r3, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80118b8:	40af      	lsls	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80118ba:	055b      	lsls	r3, r3, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80118bc:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 80118be:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80118c0:	4219      	tst	r1, r3
 80118c2:	d046      	beq.n	8011952 <HAL_GPIO_Init+0x112>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80118c4:	465b      	mov	r3, fp
 80118c6:	699a      	ldr	r2, [r3, #24]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80118c8:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80118ca:	4332      	orrs	r2, r6
 80118cc:	619a      	str	r2, [r3, #24]
 80118ce:	699a      	ldr	r2, [r3, #24]
 80118d0:	4b54      	ldr	r3, [pc, #336]	; (8011a24 <HAL_GPIO_Init+0x1e4>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80118d2:	4027      	ands	r7, r4
 80118d4:	469c      	mov	ip, r3
 80118d6:	230f      	movs	r3, #15
 80118d8:	00bf      	lsls	r7, r7, #2
 80118da:	40bb      	lsls	r3, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80118dc:	4032      	ands	r2, r6
 80118de:	9203      	str	r2, [sp, #12]
 80118e0:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80118e2:	08a2      	lsrs	r2, r4, #2
 80118e4:	0092      	lsls	r2, r2, #2
 80118e6:	4462      	add	r2, ip
 80118e8:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80118ea:	439d      	bics	r5, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80118ec:	2390      	movs	r3, #144	; 0x90
 80118ee:	05db      	lsls	r3, r3, #23
 80118f0:	4298      	cmp	r0, r3
 80118f2:	d012      	beq.n	801191a <HAL_GPIO_Init+0xda>
 80118f4:	4b4c      	ldr	r3, [pc, #304]	; (8011a28 <HAL_GPIO_Init+0x1e8>)
 80118f6:	4298      	cmp	r0, r3
 80118f8:	d100      	bne.n	80118fc <HAL_GPIO_Init+0xbc>
 80118fa:	e083      	b.n	8011a04 <HAL_GPIO_Init+0x1c4>
 80118fc:	4b4b      	ldr	r3, [pc, #300]	; (8011a2c <HAL_GPIO_Init+0x1ec>)
 80118fe:	4298      	cmp	r0, r3
 8011900:	d100      	bne.n	8011904 <HAL_GPIO_Init+0xc4>
 8011902:	e07b      	b.n	80119fc <HAL_GPIO_Init+0x1bc>
 8011904:	4b4a      	ldr	r3, [pc, #296]	; (8011a30 <HAL_GPIO_Init+0x1f0>)
 8011906:	4298      	cmp	r0, r3
 8011908:	d100      	bne.n	801190c <HAL_GPIO_Init+0xcc>
 801190a:	e07f      	b.n	8011a0c <HAL_GPIO_Init+0x1cc>
 801190c:	4b49      	ldr	r3, [pc, #292]	; (8011a34 <HAL_GPIO_Init+0x1f4>)
 801190e:	4298      	cmp	r0, r3
 8011910:	d100      	bne.n	8011914 <HAL_GPIO_Init+0xd4>
 8011912:	e07f      	b.n	8011a14 <HAL_GPIO_Init+0x1d4>
 8011914:	2305      	movs	r3, #5
 8011916:	40bb      	lsls	r3, r7
 8011918:	431d      	orrs	r5, r3
        temp = EXTI->IMR;
 801191a:	4643      	mov	r3, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 801191c:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 801191e:	681a      	ldr	r2, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011920:	9b00      	ldr	r3, [sp, #0]
 8011922:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011924:	03cb      	lsls	r3, r1, #15
 8011926:	d451      	bmi.n	80119cc <HAL_GPIO_Init+0x18c>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8011928:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 801192a:	402a      	ands	r2, r5
        EXTI->IMR = temp;
 801192c:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 801192e:	685a      	ldr	r2, [r3, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011930:	038b      	lsls	r3, r1, #14
 8011932:	d452      	bmi.n	80119da <HAL_GPIO_Init+0x19a>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8011934:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011936:	402a      	ands	r2, r5
        EXTI->EMR = temp;
 8011938:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801193a:	689a      	ldr	r2, [r3, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801193c:	02cb      	lsls	r3, r1, #11
 801193e:	d453      	bmi.n	80119e8 <HAL_GPIO_Init+0x1a8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011940:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011942:	402a      	ands	r2, r5
        EXTI->RTSR = temp;
 8011944:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8011946:	68da      	ldr	r2, [r3, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011948:	028b      	lsls	r3, r1, #10
 801194a:	d454      	bmi.n	80119f6 <HAL_GPIO_Init+0x1b6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 801194c:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 801194e:	4643      	mov	r3, r8
 8011950:	60da      	str	r2, [r3, #12]
  while ((GPIO_Init->Pin) >> position)
 8011952:	4653      	mov	r3, sl
      }
    }
    
    position++;
 8011954:	3401      	adds	r4, #1
  while ((GPIO_Init->Pin) >> position)
 8011956:	40e3      	lsrs	r3, r4
 8011958:	d185      	bne.n	8011866 <HAL_GPIO_Init+0x26>
  } 
}
 801195a:	b005      	add	sp, #20
 801195c:	bc3c      	pop	{r2, r3, r4, r5}
 801195e:	4690      	mov	r8, r2
 8011960:	4699      	mov	r9, r3
 8011962:	46a2      	mov	sl, r4
 8011964:	46ab      	mov	fp, r5
 8011966:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8011968:	2507      	movs	r5, #7
 801196a:	4025      	ands	r5, r4
 801196c:	00ad      	lsls	r5, r5, #2
 801196e:	330d      	adds	r3, #13
 8011970:	40ab      	lsls	r3, r5
        temp = GPIOx->AFR[position >> 3];
 8011972:	08e2      	lsrs	r2, r4, #3
 8011974:	0092      	lsls	r2, r2, #2
 8011976:	1882      	adds	r2, r0, r2
 8011978:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 801197a:	439f      	bics	r7, r3
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 801197c:	464b      	mov	r3, r9
 801197e:	691b      	ldr	r3, [r3, #16]
 8011980:	40ab      	lsls	r3, r5
 8011982:	001d      	movs	r5, r3
 8011984:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8011986:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011988:	2203      	movs	r2, #3
 801198a:	0065      	lsls	r5, r4, #1
 801198c:	40aa      	lsls	r2, r5
 801198e:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8011990:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011992:	4017      	ands	r7, r2
 8011994:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011996:	2703      	movs	r7, #3
 8011998:	400f      	ands	r7, r1
 801199a:	40af      	lsls	r7, r5
 801199c:	4663      	mov	r3, ip
 801199e:	431f      	orrs	r7, r3
      GPIOx->MODER = temp;
 80119a0:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80119a2:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80119a4:	464b      	mov	r3, r9
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80119a6:	4017      	ands	r7, r2
 80119a8:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80119aa:	68df      	ldr	r7, [r3, #12]
 80119ac:	4663      	mov	r3, ip
 80119ae:	40af      	lsls	r7, r5
 80119b0:	431f      	orrs	r7, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80119b2:	0033      	movs	r3, r6
 80119b4:	40a3      	lsls	r3, r4
        GPIOx->OSPEEDR = temp;
 80119b6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80119b8:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80119ba:	439f      	bics	r7, r3
 80119bc:	46bc      	mov	ip, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80119be:	090f      	lsrs	r7, r1, #4
 80119c0:	4037      	ands	r7, r6
 80119c2:	40a7      	lsls	r7, r4
 80119c4:	4663      	mov	r3, ip
 80119c6:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 80119c8:	6047      	str	r7, [r0, #4]
 80119ca:	e770      	b.n	80118ae <HAL_GPIO_Init+0x6e>
          SET_BIT(temp, iocurrent); 
 80119cc:	9b00      	ldr	r3, [sp, #0]
 80119ce:	431a      	orrs	r2, r3
        EXTI->IMR = temp;
 80119d0:	4643      	mov	r3, r8
 80119d2:	601a      	str	r2, [r3, #0]
        temp = EXTI->EMR;
 80119d4:	685a      	ldr	r2, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80119d6:	038b      	lsls	r3, r1, #14
 80119d8:	d5ac      	bpl.n	8011934 <HAL_GPIO_Init+0xf4>
          SET_BIT(temp, iocurrent); 
 80119da:	9b00      	ldr	r3, [sp, #0]
 80119dc:	431a      	orrs	r2, r3
        EXTI->EMR = temp;
 80119de:	4643      	mov	r3, r8
 80119e0:	605a      	str	r2, [r3, #4]
        temp = EXTI->RTSR;
 80119e2:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80119e4:	02cb      	lsls	r3, r1, #11
 80119e6:	d5ab      	bpl.n	8011940 <HAL_GPIO_Init+0x100>
          SET_BIT(temp, iocurrent); 
 80119e8:	9b00      	ldr	r3, [sp, #0]
 80119ea:	431a      	orrs	r2, r3
        EXTI->RTSR = temp;
 80119ec:	4643      	mov	r3, r8
 80119ee:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 80119f0:	68da      	ldr	r2, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80119f2:	028b      	lsls	r3, r1, #10
 80119f4:	d5aa      	bpl.n	801194c <HAL_GPIO_Init+0x10c>
          SET_BIT(temp, iocurrent); 
 80119f6:	9b00      	ldr	r3, [sp, #0]
 80119f8:	431a      	orrs	r2, r3
 80119fa:	e7a8      	b.n	801194e <HAL_GPIO_Init+0x10e>
 80119fc:	2302      	movs	r3, #2
 80119fe:	40bb      	lsls	r3, r7
 8011a00:	431d      	orrs	r5, r3
 8011a02:	e78a      	b.n	801191a <HAL_GPIO_Init+0xda>
 8011a04:	0033      	movs	r3, r6
 8011a06:	40bb      	lsls	r3, r7
 8011a08:	431d      	orrs	r5, r3
 8011a0a:	e786      	b.n	801191a <HAL_GPIO_Init+0xda>
 8011a0c:	2303      	movs	r3, #3
 8011a0e:	40bb      	lsls	r3, r7
 8011a10:	431d      	orrs	r5, r3
 8011a12:	e782      	b.n	801191a <HAL_GPIO_Init+0xda>
 8011a14:	2304      	movs	r3, #4
 8011a16:	40bb      	lsls	r3, r7
 8011a18:	431d      	orrs	r5, r3
 8011a1a:	e77e      	b.n	801191a <HAL_GPIO_Init+0xda>
 8011a1c:	40021000 	.word	0x40021000
 8011a20:	40010400 	.word	0x40010400
 8011a24:	40010000 	.word	0x40010000
 8011a28:	48000400 	.word	0x48000400
 8011a2c:	48000800 	.word	0x48000800
 8011a30:	48000c00 	.word	0x48000c00
 8011a34:	48001000 	.word	0x48001000

08011a38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a3a:	46de      	mov	lr, fp
 8011a3c:	4657      	mov	r7, sl
 8011a3e:	464e      	mov	r6, r9
 8011a40:	4645      	mov	r5, r8
 8011a42:	b5e0      	push	{r5, r6, r7, lr}
 8011a44:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8011a46:	2900      	cmp	r1, #0
 8011a48:	d055      	beq.n	8011af6 <HAL_GPIO_DeInit+0xbe>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8011a4a:	2201      	movs	r2, #1
 8011a4c:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011a4e:	3202      	adds	r2, #2
 8011a50:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011a52:	320c      	adds	r2, #12
  uint32_t position = 0x00;
 8011a54:	2300      	movs	r3, #0
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011a56:	4691      	mov	r9, r2
    iocurrent = (GPIO_Pin) & (1 << position);
 8011a58:	4666      	mov	r6, ip
 8011a5a:	000d      	movs	r5, r1
 8011a5c:	409e      	lsls	r6, r3
 8011a5e:	4035      	ands	r5, r6
    if (iocurrent)
 8011a60:	d045      	beq.n	8011aee <HAL_GPIO_DeInit+0xb6>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011a62:	4647      	mov	r7, r8
 8011a64:	005c      	lsls	r4, r3, #1
 8011a66:	40a7      	lsls	r7, r4
 8011a68:	43fc      	mvns	r4, r7
 8011a6a:	6802      	ldr	r2, [r0, #0]
 8011a6c:	4022      	ands	r2, r4
 8011a6e:	6002      	str	r2, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011a70:	08da      	lsrs	r2, r3, #3
 8011a72:	0092      	lsls	r2, r2, #2
 8011a74:	1887      	adds	r7, r0, r2
 8011a76:	9701      	str	r7, [sp, #4]
 8011a78:	6a3f      	ldr	r7, [r7, #32]
 8011a7a:	46ba      	mov	sl, r7
 8011a7c:	2707      	movs	r7, #7
 8011a7e:	401f      	ands	r7, r3
 8011a80:	00bf      	lsls	r7, r7, #2
 8011a82:	46bb      	mov	fp, r7
 8011a84:	464f      	mov	r7, r9
 8011a86:	465a      	mov	r2, fp
 8011a88:	4097      	lsls	r7, r2
 8011a8a:	46bb      	mov	fp, r7
 8011a8c:	4657      	mov	r7, sl
 8011a8e:	465a      	mov	r2, fp
 8011a90:	4397      	bics	r7, r2
 8011a92:	003a      	movs	r2, r7
 8011a94:	9f01      	ldr	r7, [sp, #4]
 8011a96:	623a      	str	r2, [r7, #32]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011a98:	6882      	ldr	r2, [r0, #8]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011a9a:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011a9c:	4022      	ands	r2, r4
 8011a9e:	6082      	str	r2, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8011aa0:	6842      	ldr	r2, [r0, #4]
 8011aa2:	43b2      	bics	r2, r6
 8011aa4:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011aa6:	68c2      	ldr	r2, [r0, #12]
 8011aa8:	4014      	ands	r4, r2
 8011aaa:	60c4      	str	r4, [r0, #12]
 8011aac:	4c2b      	ldr	r4, [pc, #172]	; (8011b5c <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2];
 8011aae:	089a      	lsrs	r2, r3, #2
 8011ab0:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011ab2:	4644      	mov	r4, r8
 8011ab4:	401c      	ands	r4, r3
 8011ab6:	00a4      	lsls	r4, r4, #2
 8011ab8:	40a7      	lsls	r7, r4
 8011aba:	0092      	lsls	r2, r2, #2
 8011abc:	4452      	add	r2, sl
      tmp = SYSCFG->EXTICR[position >> 2];
 8011abe:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011ac0:	46ba      	mov	sl, r7
 8011ac2:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011ac4:	2790      	movs	r7, #144	; 0x90
 8011ac6:	05ff      	lsls	r7, r7, #23
 8011ac8:	42b8      	cmp	r0, r7
 8011aca:	d01b      	beq.n	8011b04 <HAL_GPIO_DeInit+0xcc>
 8011acc:	4f24      	ldr	r7, [pc, #144]	; (8011b60 <HAL_GPIO_DeInit+0x128>)
 8011ace:	42b8      	cmp	r0, r7
 8011ad0:	d033      	beq.n	8011b3a <HAL_GPIO_DeInit+0x102>
 8011ad2:	4f24      	ldr	r7, [pc, #144]	; (8011b64 <HAL_GPIO_DeInit+0x12c>)
 8011ad4:	42b8      	cmp	r0, r7
 8011ad6:	d038      	beq.n	8011b4a <HAL_GPIO_DeInit+0x112>
 8011ad8:	4f23      	ldr	r7, [pc, #140]	; (8011b68 <HAL_GPIO_DeInit+0x130>)
 8011ada:	42b8      	cmp	r0, r7
 8011adc:	d039      	beq.n	8011b52 <HAL_GPIO_DeInit+0x11a>
 8011ade:	4f23      	ldr	r7, [pc, #140]	; (8011b6c <HAL_GPIO_DeInit+0x134>)
 8011ae0:	42b8      	cmp	r0, r7
 8011ae2:	d02e      	beq.n	8011b42 <HAL_GPIO_DeInit+0x10a>
 8011ae4:	2705      	movs	r7, #5
 8011ae6:	40a7      	lsls	r7, r4
 8011ae8:	003c      	movs	r4, r7
 8011aea:	42a6      	cmp	r6, r4
 8011aec:	d00d      	beq.n	8011b0a <HAL_GPIO_DeInit+0xd2>
  while (GPIO_Pin >> position)
 8011aee:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8011af0:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8011af2:	40da      	lsrs	r2, r3
 8011af4:	d1b0      	bne.n	8011a58 <HAL_GPIO_DeInit+0x20>
  }
}
 8011af6:	b003      	add	sp, #12
 8011af8:	bc3c      	pop	{r2, r3, r4, r5}
 8011afa:	4690      	mov	r8, r2
 8011afc:	4699      	mov	r9, r3
 8011afe:	46a2      	mov	sl, r4
 8011b00:	46ab      	mov	fp, r5
 8011b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b04:	2400      	movs	r4, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011b06:	42a6      	cmp	r6, r4
 8011b08:	d1f1      	bne.n	8011aee <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8011b0a:	4656      	mov	r6, sl
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8011b0c:	43ed      	mvns	r5, r5
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8011b0e:	6894      	ldr	r4, [r2, #8]
    position++;
 8011b10:	3301      	adds	r3, #1
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8011b12:	43b4      	bics	r4, r6
 8011b14:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8011b16:	4c16      	ldr	r4, [pc, #88]	; (8011b70 <HAL_GPIO_DeInit+0x138>)
 8011b18:	6822      	ldr	r2, [r4, #0]
 8011b1a:	402a      	ands	r2, r5
 8011b1c:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8011b1e:	6862      	ldr	r2, [r4, #4]
 8011b20:	402a      	ands	r2, r5
 8011b22:	6062      	str	r2, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8011b24:	68a2      	ldr	r2, [r4, #8]
 8011b26:	402a      	ands	r2, r5
 8011b28:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8011b2a:	68e2      	ldr	r2, [r4, #12]
 8011b2c:	4015      	ands	r5, r2
  while (GPIO_Pin >> position)
 8011b2e:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8011b30:	60e5      	str	r5, [r4, #12]
  while (GPIO_Pin >> position)
 8011b32:	40da      	lsrs	r2, r3
 8011b34:	d000      	beq.n	8011b38 <HAL_GPIO_DeInit+0x100>
 8011b36:	e78f      	b.n	8011a58 <HAL_GPIO_DeInit+0x20>
 8011b38:	e7dd      	b.n	8011af6 <HAL_GPIO_DeInit+0xbe>
 8011b3a:	4667      	mov	r7, ip
 8011b3c:	40a7      	lsls	r7, r4
 8011b3e:	003c      	movs	r4, r7
 8011b40:	e7e1      	b.n	8011b06 <HAL_GPIO_DeInit+0xce>
 8011b42:	2704      	movs	r7, #4
 8011b44:	40a7      	lsls	r7, r4
 8011b46:	003c      	movs	r4, r7
 8011b48:	e7dd      	b.n	8011b06 <HAL_GPIO_DeInit+0xce>
 8011b4a:	2702      	movs	r7, #2
 8011b4c:	40a7      	lsls	r7, r4
 8011b4e:	003c      	movs	r4, r7
 8011b50:	e7d9      	b.n	8011b06 <HAL_GPIO_DeInit+0xce>
 8011b52:	4647      	mov	r7, r8
 8011b54:	40a7      	lsls	r7, r4
 8011b56:	003c      	movs	r4, r7
 8011b58:	e7d5      	b.n	8011b06 <HAL_GPIO_DeInit+0xce>
 8011b5a:	46c0      	nop			; (mov r8, r8)
 8011b5c:	40010000 	.word	0x40010000
 8011b60:	48000400 	.word	0x48000400
 8011b64:	48000800 	.word	0x48000800
 8011b68:	48000c00 	.word	0x48000c00
 8011b6c:	48001000 	.word	0x48001000
 8011b70:	40010400 	.word	0x40010400

08011b74 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011b74:	6900      	ldr	r0, [r0, #16]
 8011b76:	4008      	ands	r0, r1
 8011b78:	1e41      	subs	r1, r0, #1
 8011b7a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011b7c:	b2c0      	uxtb	r0, r0
  }
 8011b7e:	4770      	bx	lr

08011b80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011b80:	2a00      	cmp	r2, #0
 8011b82:	d101      	bne.n	8011b88 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011b84:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8011b86:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011b88:	6181      	str	r1, [r0, #24]
 8011b8a:	e7fc      	b.n	8011b86 <HAL_GPIO_WritePin+0x6>

08011b8c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011b8c:	6943      	ldr	r3, [r0, #20]
 8011b8e:	4059      	eors	r1, r3
 8011b90:	6141      	str	r1, [r0, #20]
}
 8011b92:	4770      	bx	lr

08011b94 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8011b94:	4770      	bx	lr
 8011b96:	46c0      	nop			; (mov r8, r8)

08011b98 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8011b98:	2380      	movs	r3, #128	; 0x80
 8011b9a:	4a03      	ldr	r2, [pc, #12]	; (8011ba8 <HAL_PWR_EnableBkUpAccess+0x10>)
 8011b9c:	005b      	lsls	r3, r3, #1
 8011b9e:	6811      	ldr	r1, [r2, #0]
 8011ba0:	430b      	orrs	r3, r1
 8011ba2:	6013      	str	r3, [r2, #0]
}
 8011ba4:	4770      	bx	lr
 8011ba6:	46c0      	nop			; (mov r8, r8)
 8011ba8:	40007000 	.word	0x40007000

08011bac <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bae:	46c6      	mov	lr, r8
 8011bb0:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011bb2:	6803      	ldr	r3, [r0, #0]
{
 8011bb4:	b082      	sub	sp, #8
 8011bb6:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011bb8:	07da      	lsls	r2, r3, #31
 8011bba:	d54b      	bpl.n	8011c54 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8011bbc:	210c      	movs	r1, #12
 8011bbe:	48c4      	ldr	r0, [pc, #784]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
 8011bc0:	6842      	ldr	r2, [r0, #4]
 8011bc2:	400a      	ands	r2, r1
 8011bc4:	2a04      	cmp	r2, #4
 8011bc6:	d100      	bne.n	8011bca <HAL_RCC_OscConfig+0x1e>
 8011bc8:	e153      	b.n	8011e72 <HAL_RCC_OscConfig+0x2c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8011bca:	6842      	ldr	r2, [r0, #4]
 8011bcc:	4011      	ands	r1, r2
 8011bce:	2908      	cmp	r1, #8
 8011bd0:	d108      	bne.n	8011be4 <HAL_RCC_OscConfig+0x38>
 8011bd2:	21c0      	movs	r1, #192	; 0xc0
 8011bd4:	6842      	ldr	r2, [r0, #4]
 8011bd6:	0249      	lsls	r1, r1, #9
 8011bd8:	400a      	ands	r2, r1
 8011bda:	2180      	movs	r1, #128	; 0x80
 8011bdc:	0249      	lsls	r1, r1, #9
 8011bde:	428a      	cmp	r2, r1
 8011be0:	d100      	bne.n	8011be4 <HAL_RCC_OscConfig+0x38>
 8011be2:	e146      	b.n	8011e72 <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011be4:	4dba      	ldr	r5, [pc, #744]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
 8011be6:	4abb      	ldr	r2, [pc, #748]	; (8011ed4 <HAL_RCC_OscConfig+0x328>)
 8011be8:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011bea:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011bec:	4013      	ands	r3, r2
 8011bee:	602b      	str	r3, [r5, #0]
 8011bf0:	682b      	ldr	r3, [r5, #0]
 8011bf2:	4ab9      	ldr	r2, [pc, #740]	; (8011ed8 <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011bf4:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011bf6:	4013      	ands	r3, r2
 8011bf8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8011bfa:	f7fe faab 	bl	8010154 <HAL_GetTick>
 8011bfe:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011c00:	e005      	b.n	8011c0e <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011c02:	f7fe faa7 	bl	8010154 <HAL_GetTick>
 8011c06:	1bc0      	subs	r0, r0, r7
 8011c08:	2864      	cmp	r0, #100	; 0x64
 8011c0a:	d900      	bls.n	8011c0e <HAL_RCC_OscConfig+0x62>
 8011c0c:	e13b      	b.n	8011e86 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011c0e:	682b      	ldr	r3, [r5, #0]
 8011c10:	4233      	tst	r3, r6
 8011c12:	d1f6      	bne.n	8011c02 <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011c14:	6863      	ldr	r3, [r4, #4]
 8011c16:	2b01      	cmp	r3, #1
 8011c18:	d100      	bne.n	8011c1c <HAL_RCC_OscConfig+0x70>
 8011c1a:	e196      	b.n	8011f4a <HAL_RCC_OscConfig+0x39e>
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d000      	beq.n	8011c22 <HAL_RCC_OscConfig+0x76>
 8011c20:	e1bc      	b.n	8011f9c <HAL_RCC_OscConfig+0x3f0>
 8011c22:	682b      	ldr	r3, [r5, #0]
 8011c24:	4aab      	ldr	r2, [pc, #684]	; (8011ed4 <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011c26:	4eaa      	ldr	r6, [pc, #680]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011c28:	4013      	ands	r3, r2
 8011c2a:	602b      	str	r3, [r5, #0]
 8011c2c:	682b      	ldr	r3, [r5, #0]
 8011c2e:	4aaa      	ldr	r2, [pc, #680]	; (8011ed8 <HAL_RCC_OscConfig+0x32c>)
 8011c30:	4013      	ands	r3, r2
 8011c32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011c34:	f7fe fa8e 	bl	8010154 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011c38:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8011c3a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011c3c:	02ad      	lsls	r5, r5, #10
 8011c3e:	e005      	b.n	8011c4c <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011c40:	f7fe fa88 	bl	8010154 <HAL_GetTick>
 8011c44:	1bc0      	subs	r0, r0, r7
 8011c46:	2864      	cmp	r0, #100	; 0x64
 8011c48:	d900      	bls.n	8011c4c <HAL_RCC_OscConfig+0xa0>
 8011c4a:	e11c      	b.n	8011e86 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011c4c:	6833      	ldr	r3, [r6, #0]
 8011c4e:	422b      	tst	r3, r5
 8011c50:	d1f6      	bne.n	8011c40 <HAL_RCC_OscConfig+0x94>
 8011c52:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011c54:	079a      	lsls	r2, r3, #30
 8011c56:	d529      	bpl.n	8011cac <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8011c58:	220c      	movs	r2, #12
 8011c5a:	499d      	ldr	r1, [pc, #628]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
 8011c5c:	6848      	ldr	r0, [r1, #4]
 8011c5e:	4202      	tst	r2, r0
 8011c60:	d100      	bne.n	8011c64 <HAL_RCC_OscConfig+0xb8>
 8011c62:	e0fd      	b.n	8011e60 <HAL_RCC_OscConfig+0x2b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011c64:	6848      	ldr	r0, [r1, #4]
 8011c66:	4002      	ands	r2, r0
 8011c68:	2a08      	cmp	r2, #8
 8011c6a:	d100      	bne.n	8011c6e <HAL_RCC_OscConfig+0xc2>
 8011c6c:	e0ef      	b.n	8011e4e <HAL_RCC_OscConfig+0x2a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011c6e:	68e3      	ldr	r3, [r4, #12]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d100      	bne.n	8011c76 <HAL_RCC_OscConfig+0xca>
 8011c74:	e138      	b.n	8011ee8 <HAL_RCC_OscConfig+0x33c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011c76:	2201      	movs	r2, #1
 8011c78:	4f95      	ldr	r7, [pc, #596]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011c7a:	2502      	movs	r5, #2
        __HAL_RCC_HSI_ENABLE();
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	4313      	orrs	r3, r2
 8011c80:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8011c82:	f7fe fa67 	bl	8010154 <HAL_GetTick>
 8011c86:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011c88:	e005      	b.n	8011c96 <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011c8a:	f7fe fa63 	bl	8010154 <HAL_GetTick>
 8011c8e:	1b80      	subs	r0, r0, r6
 8011c90:	2864      	cmp	r0, #100	; 0x64
 8011c92:	d900      	bls.n	8011c96 <HAL_RCC_OscConfig+0xea>
 8011c94:	e0f7      	b.n	8011e86 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	421d      	tst	r5, r3
 8011c9a:	d0f6      	beq.n	8011c8a <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011c9c:	21f8      	movs	r1, #248	; 0xf8
 8011c9e:	683a      	ldr	r2, [r7, #0]
 8011ca0:	6923      	ldr	r3, [r4, #16]
 8011ca2:	438a      	bics	r2, r1
 8011ca4:	00db      	lsls	r3, r3, #3
 8011ca6:	4313      	orrs	r3, r2
 8011ca8:	603b      	str	r3, [r7, #0]
 8011caa:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011cac:	071a      	lsls	r2, r3, #28
 8011cae:	d45d      	bmi.n	8011d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011cb0:	075a      	lsls	r2, r3, #29
 8011cb2:	d474      	bmi.n	8011d9e <HAL_RCC_OscConfig+0x1f2>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8011cb4:	06da      	lsls	r2, r3, #27
 8011cb6:	d512      	bpl.n	8011cde <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8011cb8:	6962      	ldr	r2, [r4, #20]
 8011cba:	2a01      	cmp	r2, #1
 8011cbc:	d100      	bne.n	8011cc0 <HAL_RCC_OscConfig+0x114>
 8011cbe:	e18c      	b.n	8011fda <HAL_RCC_OscConfig+0x42e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8011cc0:	3205      	adds	r2, #5
 8011cc2:	d000      	beq.n	8011cc6 <HAL_RCC_OscConfig+0x11a>
 8011cc4:	e124      	b.n	8011f10 <HAL_RCC_OscConfig+0x364>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8011cc6:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011cc8:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8011cca:	4981      	ldr	r1, [pc, #516]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
 8011ccc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8011cce:	4382      	bics	r2, r0
 8011cd0:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011cd2:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8011cd4:	69a2      	ldr	r2, [r4, #24]
 8011cd6:	43a8      	bics	r0, r5
 8011cd8:	00d2      	lsls	r2, r2, #3
 8011cda:	4302      	orrs	r2, r0
 8011cdc:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011cde:	069b      	lsls	r3, r3, #26
 8011ce0:	d522      	bpl.n	8011d28 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011ce2:	220c      	movs	r2, #12
 8011ce4:	497a      	ldr	r1, [pc, #488]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
 8011ce6:	684b      	ldr	r3, [r1, #4]
 8011ce8:	4013      	ands	r3, r2
 8011cea:	2b0c      	cmp	r3, #12
 8011cec:	d100      	bne.n	8011cf0 <HAL_RCC_OscConfig+0x144>
 8011cee:	e14a      	b.n	8011f86 <HAL_RCC_OscConfig+0x3da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011cf0:	684b      	ldr	r3, [r1, #4]
 8011cf2:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011cf4:	2a08      	cmp	r2, #8
 8011cf6:	d100      	bne.n	8011cfa <HAL_RCC_OscConfig+0x14e>
 8011cf8:	e13e      	b.n	8011f78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011cfa:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8011cfc:	4d74      	ldr	r5, [pc, #464]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d100      	bne.n	8011d04 <HAL_RCC_OscConfig+0x158>
 8011d02:	e156      	b.n	8011fb2 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8011d04:	2680      	movs	r6, #128	; 0x80
 8011d06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011d08:	0276      	lsls	r6, r6, #9
 8011d0a:	4333      	orrs	r3, r6
 8011d0c:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011d0e:	f7fe fa21 	bl	8010154 <HAL_GetTick>
 8011d12:	0007      	movs	r7, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011d14:	e005      	b.n	8011d22 <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011d16:	f7fe fa1d 	bl	8010154 <HAL_GetTick>
 8011d1a:	1bc0      	subs	r0, r0, r7
 8011d1c:	2864      	cmp	r0, #100	; 0x64
 8011d1e:	d900      	bls.n	8011d22 <HAL_RCC_OscConfig+0x176>
 8011d20:	e0b1      	b.n	8011e86 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011d22:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011d24:	4233      	tst	r3, r6
 8011d26:	d0f6      	beq.n	8011d16 <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d01c      	beq.n	8011d68 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011d2e:	220c      	movs	r2, #12
 8011d30:	4d67      	ldr	r5, [pc, #412]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
 8011d32:	6869      	ldr	r1, [r5, #4]
 8011d34:	400a      	ands	r2, r1
 8011d36:	2a08      	cmp	r2, #8
 8011d38:	d100      	bne.n	8011d3c <HAL_RCC_OscConfig+0x190>
 8011d3a:	e098      	b.n	8011e6e <HAL_RCC_OscConfig+0x2c2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011d3c:	2b02      	cmp	r3, #2
 8011d3e:	d100      	bne.n	8011d42 <HAL_RCC_OscConfig+0x196>
 8011d40:	e16a      	b.n	8012018 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011d42:	682b      	ldr	r3, [r5, #0]
 8011d44:	4a65      	ldr	r2, [pc, #404]	; (8011edc <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011d46:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8011d48:	4013      	ands	r3, r2
 8011d4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011d4c:	f7fe fa02 	bl	8010154 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011d50:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 8011d52:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011d54:	e005      	b.n	8011d62 <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d56:	f7fe f9fd 	bl	8010154 <HAL_GetTick>
 8011d5a:	1b80      	subs	r0, r0, r6
 8011d5c:	2864      	cmp	r0, #100	; 0x64
 8011d5e:	d900      	bls.n	8011d62 <HAL_RCC_OscConfig+0x1b6>
 8011d60:	e091      	b.n	8011e86 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011d62:	682b      	ldr	r3, [r5, #0]
 8011d64:	4223      	tst	r3, r4
 8011d66:	d1f6      	bne.n	8011d56 <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8011d68:	2000      	movs	r0, #0
 8011d6a:	e08d      	b.n	8011e88 <HAL_RCC_OscConfig+0x2dc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011d6c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 8011d6e:	4d58      	ldr	r5, [pc, #352]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d100      	bne.n	8011d76 <HAL_RCC_OscConfig+0x1ca>
 8011d74:	e08c      	b.n	8011e90 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 8011d76:	2201      	movs	r2, #1
 8011d78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011d7a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8011d7c:	4313      	orrs	r3, r2
 8011d7e:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011d80:	f7fe f9e8 	bl	8010154 <HAL_GetTick>
 8011d84:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011d86:	e004      	b.n	8011d92 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011d88:	f7fe f9e4 	bl	8010154 <HAL_GetTick>
 8011d8c:	1bc0      	subs	r0, r0, r7
 8011d8e:	2864      	cmp	r0, #100	; 0x64
 8011d90:	d879      	bhi.n	8011e86 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011d92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011d94:	421e      	tst	r6, r3
 8011d96:	d0f7      	beq.n	8011d88 <HAL_RCC_OscConfig+0x1dc>
 8011d98:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011d9a:	075a      	lsls	r2, r3, #29
 8011d9c:	d58a      	bpl.n	8011cb4 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011d9e:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011da0:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8011da2:	4a4b      	ldr	r2, [pc, #300]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
 8011da4:	0540      	lsls	r0, r0, #21
 8011da6:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011da8:	4d4d      	ldr	r5, [pc, #308]	; (8011ee0 <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8011daa:	4301      	orrs	r1, r0
 8011dac:	61d1      	str	r1, [r2, #28]
 8011dae:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011db0:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8011db2:	4003      	ands	r3, r0
 8011db4:	9301      	str	r3, [sp, #4]
 8011db6:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011db8:	682b      	ldr	r3, [r5, #0]
 8011dba:	4333      	orrs	r3, r6
 8011dbc:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8011dbe:	f7fe f9c9 	bl	8010154 <HAL_GetTick>
 8011dc2:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011dc4:	e004      	b.n	8011dd0 <HAL_RCC_OscConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8011dc6:	f7fe f9c5 	bl	8010154 <HAL_GetTick>
 8011dca:	1bc0      	subs	r0, r0, r7
 8011dcc:	2864      	cmp	r0, #100	; 0x64
 8011dce:	d85a      	bhi.n	8011e86 <HAL_RCC_OscConfig+0x2da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011dd0:	682b      	ldr	r3, [r5, #0]
 8011dd2:	4233      	tst	r3, r6
 8011dd4:	d0f7      	beq.n	8011dc6 <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8011dd6:	2201      	movs	r2, #1
 8011dd8:	4d3d      	ldr	r5, [pc, #244]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011dda:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8011ddc:	6a2b      	ldr	r3, [r5, #32]
 8011dde:	4393      	bics	r3, r2
 8011de0:	622b      	str	r3, [r5, #32]
 8011de2:	6a2b      	ldr	r3, [r5, #32]
 8011de4:	3203      	adds	r2, #3
 8011de6:	4393      	bics	r3, r2
 8011de8:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 8011dea:	f7fe f9b3 	bl	8010154 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011dee:	4b3d      	ldr	r3, [pc, #244]	; (8011ee4 <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 8011df0:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011df2:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011df4:	e004      	b.n	8011e00 <HAL_RCC_OscConfig+0x254>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011df6:	f7fe f9ad 	bl	8010154 <HAL_GetTick>
 8011dfa:	1bc0      	subs	r0, r0, r7
 8011dfc:	4540      	cmp	r0, r8
 8011dfe:	d842      	bhi.n	8011e86 <HAL_RCC_OscConfig+0x2da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011e00:	6a2b      	ldr	r3, [r5, #32]
 8011e02:	421e      	tst	r6, r3
 8011e04:	d1f7      	bne.n	8011df6 <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011e06:	68a3      	ldr	r3, [r4, #8]
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	d100      	bne.n	8011e0e <HAL_RCC_OscConfig+0x262>
 8011e0c:	e157      	b.n	80120be <HAL_RCC_OscConfig+0x512>
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d100      	bne.n	8011e14 <HAL_RCC_OscConfig+0x268>
 8011e12:	e139      	b.n	8012088 <HAL_RCC_OscConfig+0x4dc>
 8011e14:	2b05      	cmp	r3, #5
 8011e16:	d100      	bne.n	8011e1a <HAL_RCC_OscConfig+0x26e>
 8011e18:	e155      	b.n	80120c6 <HAL_RCC_OscConfig+0x51a>
 8011e1a:	2201      	movs	r2, #1
 8011e1c:	6a2b      	ldr	r3, [r5, #32]
 8011e1e:	4393      	bics	r3, r2
 8011e20:	622b      	str	r3, [r5, #32]
 8011e22:	6a2b      	ldr	r3, [r5, #32]
 8011e24:	3203      	adds	r2, #3
 8011e26:	4393      	bics	r3, r2
 8011e28:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8011e2a:	f7fe f993 	bl	8010154 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011e2e:	4e28      	ldr	r6, [pc, #160]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
      tickstart = HAL_GetTick();
 8011e30:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011e32:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011e34:	4f2b      	ldr	r7, [pc, #172]	; (8011ee4 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011e36:	e005      	b.n	8011e44 <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011e38:	f7fe f98c 	bl	8010154 <HAL_GetTick>
 8011e3c:	4643      	mov	r3, r8
 8011e3e:	1ac0      	subs	r0, r0, r3
 8011e40:	42b8      	cmp	r0, r7
 8011e42:	d820      	bhi.n	8011e86 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011e44:	6a33      	ldr	r3, [r6, #32]
 8011e46:	421d      	tst	r5, r3
 8011e48:	d0f6      	beq.n	8011e38 <HAL_RCC_OscConfig+0x28c>
 8011e4a:	6823      	ldr	r3, [r4, #0]
 8011e4c:	e732      	b.n	8011cb4 <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011e4e:	684a      	ldr	r2, [r1, #4]
 8011e50:	21c0      	movs	r1, #192	; 0xc0
 8011e52:	0249      	lsls	r1, r1, #9
 8011e54:	400a      	ands	r2, r1
 8011e56:	2180      	movs	r1, #128	; 0x80
 8011e58:	0209      	lsls	r1, r1, #8
 8011e5a:	428a      	cmp	r2, r1
 8011e5c:	d000      	beq.n	8011e60 <HAL_RCC_OscConfig+0x2b4>
 8011e5e:	e706      	b.n	8011c6e <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011e60:	4a1b      	ldr	r2, [pc, #108]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
 8011e62:	6812      	ldr	r2, [r2, #0]
 8011e64:	0792      	lsls	r2, r2, #30
 8011e66:	d526      	bpl.n	8011eb6 <HAL_RCC_OscConfig+0x30a>
 8011e68:	68e2      	ldr	r2, [r4, #12]
 8011e6a:	2a01      	cmp	r2, #1
 8011e6c:	d023      	beq.n	8011eb6 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8011e6e:	2001      	movs	r0, #1
 8011e70:	e00a      	b.n	8011e88 <HAL_RCC_OscConfig+0x2dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011e72:	4a17      	ldr	r2, [pc, #92]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
 8011e74:	6812      	ldr	r2, [r2, #0]
 8011e76:	0392      	lsls	r2, r2, #14
 8011e78:	d400      	bmi.n	8011e7c <HAL_RCC_OscConfig+0x2d0>
 8011e7a:	e6eb      	b.n	8011c54 <HAL_RCC_OscConfig+0xa8>
 8011e7c:	6862      	ldr	r2, [r4, #4]
 8011e7e:	2a00      	cmp	r2, #0
 8011e80:	d000      	beq.n	8011e84 <HAL_RCC_OscConfig+0x2d8>
 8011e82:	e6e7      	b.n	8011c54 <HAL_RCC_OscConfig+0xa8>
 8011e84:	e7f3      	b.n	8011e6e <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8011e86:	2003      	movs	r0, #3
}
 8011e88:	b002      	add	sp, #8
 8011e8a:	bc04      	pop	{r2}
 8011e8c:	4690      	mov	r8, r2
 8011e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8011e90:	2201      	movs	r2, #1
 8011e92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011e94:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8011e96:	4393      	bics	r3, r2
 8011e98:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011e9a:	f7fe f95b 	bl	8010154 <HAL_GetTick>
 8011e9e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011ea0:	e004      	b.n	8011eac <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011ea2:	f7fe f957 	bl	8010154 <HAL_GetTick>
 8011ea6:	1bc0      	subs	r0, r0, r7
 8011ea8:	2864      	cmp	r0, #100	; 0x64
 8011eaa:	d8ec      	bhi.n	8011e86 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011eac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011eae:	421e      	tst	r6, r3
 8011eb0:	d1f7      	bne.n	8011ea2 <HAL_RCC_OscConfig+0x2f6>
 8011eb2:	6823      	ldr	r3, [r4, #0]
 8011eb4:	e771      	b.n	8011d9a <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011eb6:	25f8      	movs	r5, #248	; 0xf8
 8011eb8:	4805      	ldr	r0, [pc, #20]	; (8011ed0 <HAL_RCC_OscConfig+0x324>)
 8011eba:	6922      	ldr	r2, [r4, #16]
 8011ebc:	6801      	ldr	r1, [r0, #0]
 8011ebe:	00d2      	lsls	r2, r2, #3
 8011ec0:	43a9      	bics	r1, r5
 8011ec2:	430a      	orrs	r2, r1
 8011ec4:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011ec6:	071a      	lsls	r2, r3, #28
 8011ec8:	d400      	bmi.n	8011ecc <HAL_RCC_OscConfig+0x320>
 8011eca:	e6f1      	b.n	8011cb0 <HAL_RCC_OscConfig+0x104>
 8011ecc:	e74e      	b.n	8011d6c <HAL_RCC_OscConfig+0x1c0>
 8011ece:	46c0      	nop			; (mov r8, r8)
 8011ed0:	40021000 	.word	0x40021000
 8011ed4:	fffeffff 	.word	0xfffeffff
 8011ed8:	fffbffff 	.word	0xfffbffff
 8011edc:	feffffff 	.word	0xfeffffff
 8011ee0:	40007000 	.word	0x40007000
 8011ee4:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 8011ee8:	2201      	movs	r2, #1
 8011eea:	4d7b      	ldr	r5, [pc, #492]	; (80120d8 <HAL_RCC_OscConfig+0x52c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011eec:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8011eee:	682b      	ldr	r3, [r5, #0]
 8011ef0:	4393      	bics	r3, r2
 8011ef2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011ef4:	f7fe f92e 	bl	8010154 <HAL_GetTick>
 8011ef8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011efa:	e004      	b.n	8011f06 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011efc:	f7fe f92a 	bl	8010154 <HAL_GetTick>
 8011f00:	1bc0      	subs	r0, r0, r7
 8011f02:	2864      	cmp	r0, #100	; 0x64
 8011f04:	d8bf      	bhi.n	8011e86 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011f06:	682b      	ldr	r3, [r5, #0]
 8011f08:	421e      	tst	r6, r3
 8011f0a:	d1f7      	bne.n	8011efc <HAL_RCC_OscConfig+0x350>
 8011f0c:	6823      	ldr	r3, [r4, #0]
 8011f0e:	e6cd      	b.n	8011cac <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011f10:	2204      	movs	r2, #4
 8011f12:	4d71      	ldr	r5, [pc, #452]	; (80120d8 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011f14:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8011f16:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011f18:	4313      	orrs	r3, r2
 8011f1a:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8011f1c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011f1e:	3a03      	subs	r2, #3
 8011f20:	4393      	bics	r3, r2
 8011f22:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011f24:	f7fe f916 	bl	8010154 <HAL_GetTick>
 8011f28:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011f2a:	e004      	b.n	8011f36 <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011f2c:	f7fe f912 	bl	8010154 <HAL_GetTick>
 8011f30:	1bc0      	subs	r0, r0, r7
 8011f32:	2864      	cmp	r0, #100	; 0x64
 8011f34:	d8a7      	bhi.n	8011e86 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011f36:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011f38:	421e      	tst	r6, r3
 8011f3a:	d1f7      	bne.n	8011f2c <HAL_RCC_OscConfig+0x380>
 8011f3c:	6823      	ldr	r3, [r4, #0]
 8011f3e:	e6ce      	b.n	8011cde <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011f40:	2380      	movs	r3, #128	; 0x80
 8011f42:	682a      	ldr	r2, [r5, #0]
 8011f44:	02db      	lsls	r3, r3, #11
 8011f46:	4313      	orrs	r3, r2
 8011f48:	602b      	str	r3, [r5, #0]
 8011f4a:	2380      	movs	r3, #128	; 0x80
 8011f4c:	682a      	ldr	r2, [r5, #0]
 8011f4e:	025b      	lsls	r3, r3, #9
 8011f50:	4313      	orrs	r3, r2
 8011f52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011f54:	f7fe f8fe 	bl	8010154 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011f58:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8011f5a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011f5c:	4e5e      	ldr	r6, [pc, #376]	; (80120d8 <HAL_RCC_OscConfig+0x52c>)
 8011f5e:	02ad      	lsls	r5, r5, #10
 8011f60:	e005      	b.n	8011f6e <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011f62:	f7fe f8f7 	bl	8010154 <HAL_GetTick>
 8011f66:	1bc0      	subs	r0, r0, r7
 8011f68:	2864      	cmp	r0, #100	; 0x64
 8011f6a:	d900      	bls.n	8011f6e <HAL_RCC_OscConfig+0x3c2>
 8011f6c:	e78b      	b.n	8011e86 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011f6e:	6833      	ldr	r3, [r6, #0]
 8011f70:	422b      	tst	r3, r5
 8011f72:	d0f6      	beq.n	8011f62 <HAL_RCC_OscConfig+0x3b6>
 8011f74:	6823      	ldr	r3, [r4, #0]
 8011f76:	e66d      	b.n	8011c54 <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011f78:	22c0      	movs	r2, #192	; 0xc0
 8011f7a:	684b      	ldr	r3, [r1, #4]
 8011f7c:	0252      	lsls	r2, r2, #9
 8011f7e:	4013      	ands	r3, r2
 8011f80:	4293      	cmp	r3, r2
 8011f82:	d000      	beq.n	8011f86 <HAL_RCC_OscConfig+0x3da>
 8011f84:	e6b9      	b.n	8011cfa <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8011f86:	4b54      	ldr	r3, [pc, #336]	; (80120d8 <HAL_RCC_OscConfig+0x52c>)
 8011f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f8a:	03db      	lsls	r3, r3, #15
 8011f8c:	d400      	bmi.n	8011f90 <HAL_RCC_OscConfig+0x3e4>
 8011f8e:	e6cb      	b.n	8011d28 <HAL_RCC_OscConfig+0x17c>
 8011f90:	69e3      	ldr	r3, [r4, #28]
 8011f92:	2b01      	cmp	r3, #1
 8011f94:	d100      	bne.n	8011f98 <HAL_RCC_OscConfig+0x3ec>
 8011f96:	e6c7      	b.n	8011d28 <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 8011f98:	2001      	movs	r0, #1
 8011f9a:	e775      	b.n	8011e88 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011f9c:	2b05      	cmp	r3, #5
 8011f9e:	d0cf      	beq.n	8011f40 <HAL_RCC_OscConfig+0x394>
 8011fa0:	682b      	ldr	r3, [r5, #0]
 8011fa2:	4a4e      	ldr	r2, [pc, #312]	; (80120dc <HAL_RCC_OscConfig+0x530>)
 8011fa4:	4013      	ands	r3, r2
 8011fa6:	602b      	str	r3, [r5, #0]
 8011fa8:	682b      	ldr	r3, [r5, #0]
 8011faa:	4a4d      	ldr	r2, [pc, #308]	; (80120e0 <HAL_RCC_OscConfig+0x534>)
 8011fac:	4013      	ands	r3, r2
 8011fae:	602b      	str	r3, [r5, #0]
 8011fb0:	e7d0      	b.n	8011f54 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI48_DISABLE();
 8011fb2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011fb4:	4a49      	ldr	r2, [pc, #292]	; (80120dc <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011fb6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8011fb8:	4013      	ands	r3, r2
 8011fba:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011fbc:	f7fe f8ca 	bl	8010154 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011fc0:	0276      	lsls	r6, r6, #9
        tickstart = HAL_GetTick();
 8011fc2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011fc4:	e005      	b.n	8011fd2 <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011fc6:	f7fe f8c5 	bl	8010154 <HAL_GetTick>
 8011fca:	1bc0      	subs	r0, r0, r7
 8011fcc:	2864      	cmp	r0, #100	; 0x64
 8011fce:	d900      	bls.n	8011fd2 <HAL_RCC_OscConfig+0x426>
 8011fd0:	e759      	b.n	8011e86 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011fd2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011fd4:	4233      	tst	r3, r6
 8011fd6:	d1f6      	bne.n	8011fc6 <HAL_RCC_OscConfig+0x41a>
 8011fd8:	e6a6      	b.n	8011d28 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011fda:	2104      	movs	r1, #4
 8011fdc:	4d3e      	ldr	r5, [pc, #248]	; (80120d8 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011fde:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8011fe0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011fe2:	430b      	orrs	r3, r1
 8011fe4:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8011fe6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011fe8:	431a      	orrs	r2, r3
 8011fea:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011fec:	f7fe f8b2 	bl	8010154 <HAL_GetTick>
 8011ff0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011ff2:	e005      	b.n	8012000 <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011ff4:	f7fe f8ae 	bl	8010154 <HAL_GetTick>
 8011ff8:	1bc0      	subs	r0, r0, r7
 8011ffa:	2864      	cmp	r0, #100	; 0x64
 8011ffc:	d900      	bls.n	8012000 <HAL_RCC_OscConfig+0x454>
 8011ffe:	e742      	b.n	8011e86 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8012000:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8012002:	421e      	tst	r6, r3
 8012004:	d0f6      	beq.n	8011ff4 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8012006:	21f8      	movs	r1, #248	; 0xf8
 8012008:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 801200a:	69a3      	ldr	r3, [r4, #24]
 801200c:	438a      	bics	r2, r1
 801200e:	00db      	lsls	r3, r3, #3
 8012010:	4313      	orrs	r3, r2
 8012012:	636b      	str	r3, [r5, #52]	; 0x34
 8012014:	6823      	ldr	r3, [r4, #0]
 8012016:	e662      	b.n	8011cde <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 8012018:	682b      	ldr	r3, [r5, #0]
 801201a:	4a32      	ldr	r2, [pc, #200]	; (80120e4 <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801201c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 801201e:	4013      	ands	r3, r2
 8012020:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8012022:	f7fe f897 	bl	8010154 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012026:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8012028:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801202a:	e005      	b.n	8012038 <HAL_RCC_OscConfig+0x48c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801202c:	f7fe f892 	bl	8010154 <HAL_GetTick>
 8012030:	1bc0      	subs	r0, r0, r7
 8012032:	2864      	cmp	r0, #100	; 0x64
 8012034:	d900      	bls.n	8012038 <HAL_RCC_OscConfig+0x48c>
 8012036:	e726      	b.n	8011e86 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012038:	682b      	ldr	r3, [r5, #0]
 801203a:	4233      	tst	r3, r6
 801203c:	d1f6      	bne.n	801202c <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801203e:	220f      	movs	r2, #15
 8012040:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8012042:	4393      	bics	r3, r2
 8012044:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012046:	4313      	orrs	r3, r2
 8012048:	62eb      	str	r3, [r5, #44]	; 0x2c
 801204a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801204c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801204e:	686a      	ldr	r2, [r5, #4]
 8012050:	430b      	orrs	r3, r1
 8012052:	4925      	ldr	r1, [pc, #148]	; (80120e8 <HAL_RCC_OscConfig+0x53c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8012054:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012056:	400a      	ands	r2, r1
 8012058:	4313      	orrs	r3, r2
 801205a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 801205c:	2380      	movs	r3, #128	; 0x80
 801205e:	682a      	ldr	r2, [r5, #0]
 8012060:	045b      	lsls	r3, r3, #17
 8012062:	4313      	orrs	r3, r2
 8012064:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8012066:	f7fe f875 	bl	8010154 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801206a:	4d1b      	ldr	r5, [pc, #108]	; (80120d8 <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 801206c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801206e:	04a4      	lsls	r4, r4, #18
 8012070:	e005      	b.n	801207e <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012072:	f7fe f86f 	bl	8010154 <HAL_GetTick>
 8012076:	1b80      	subs	r0, r0, r6
 8012078:	2864      	cmp	r0, #100	; 0x64
 801207a:	d900      	bls.n	801207e <HAL_RCC_OscConfig+0x4d2>
 801207c:	e703      	b.n	8011e86 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801207e:	682b      	ldr	r3, [r5, #0]
 8012080:	4223      	tst	r3, r4
 8012082:	d0f6      	beq.n	8012072 <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 8012084:	2000      	movs	r0, #0
 8012086:	e6ff      	b.n	8011e88 <HAL_RCC_OscConfig+0x2dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012088:	2201      	movs	r2, #1
 801208a:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801208c:	4e12      	ldr	r6, [pc, #72]	; (80120d8 <HAL_RCC_OscConfig+0x52c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801208e:	4393      	bics	r3, r2
 8012090:	622b      	str	r3, [r5, #32]
 8012092:	6a2b      	ldr	r3, [r5, #32]
 8012094:	3203      	adds	r2, #3
 8012096:	4393      	bics	r3, r2
 8012098:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 801209a:	f7fe f85b 	bl	8010154 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801209e:	2502      	movs	r5, #2
      tickstart = HAL_GetTick();
 80120a0:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80120a2:	4f12      	ldr	r7, [pc, #72]	; (80120ec <HAL_RCC_OscConfig+0x540>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80120a4:	e006      	b.n	80120b4 <HAL_RCC_OscConfig+0x508>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80120a6:	f7fe f855 	bl	8010154 <HAL_GetTick>
 80120aa:	4643      	mov	r3, r8
 80120ac:	1ac0      	subs	r0, r0, r3
 80120ae:	42b8      	cmp	r0, r7
 80120b0:	d900      	bls.n	80120b4 <HAL_RCC_OscConfig+0x508>
 80120b2:	e6e8      	b.n	8011e86 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80120b4:	6a33      	ldr	r3, [r6, #32]
 80120b6:	421d      	tst	r5, r3
 80120b8:	d1f5      	bne.n	80120a6 <HAL_RCC_OscConfig+0x4fa>
 80120ba:	6823      	ldr	r3, [r4, #0]
 80120bc:	e5fa      	b.n	8011cb4 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80120be:	6a2a      	ldr	r2, [r5, #32]
 80120c0:	4313      	orrs	r3, r2
 80120c2:	622b      	str	r3, [r5, #32]
 80120c4:	e6b1      	b.n	8011e2a <HAL_RCC_OscConfig+0x27e>
 80120c6:	2204      	movs	r2, #4
 80120c8:	6a2b      	ldr	r3, [r5, #32]
 80120ca:	4313      	orrs	r3, r2
 80120cc:	622b      	str	r3, [r5, #32]
 80120ce:	6a2b      	ldr	r3, [r5, #32]
 80120d0:	3a03      	subs	r2, #3
 80120d2:	4313      	orrs	r3, r2
 80120d4:	622b      	str	r3, [r5, #32]
 80120d6:	e6a8      	b.n	8011e2a <HAL_RCC_OscConfig+0x27e>
 80120d8:	40021000 	.word	0x40021000
 80120dc:	fffeffff 	.word	0xfffeffff
 80120e0:	fffbffff 	.word	0xfffbffff
 80120e4:	feffffff 	.word	0xfeffffff
 80120e8:	ffc27fff 	.word	0xffc27fff
 80120ec:	00001388 	.word	0x00001388

080120f0 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80120f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120f2:	46ce      	mov	lr, r9
 80120f4:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80120f6:	2301      	movs	r3, #1
{
 80120f8:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80120fa:	4985      	ldr	r1, [pc, #532]	; (8012310 <HAL_RCC_ClockConfig+0x220>)
{
 80120fc:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80120fe:	680a      	ldr	r2, [r1, #0]
{
 8012100:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8012102:	401a      	ands	r2, r3
 8012104:	42a2      	cmp	r2, r4
 8012106:	d20c      	bcs.n	8012122 <HAL_RCC_ClockConfig+0x32>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012108:	680a      	ldr	r2, [r1, #0]
 801210a:	439a      	bics	r2, r3
 801210c:	4322      	orrs	r2, r4
 801210e:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012110:	680a      	ldr	r2, [r1, #0]
 8012112:	4013      	ands	r3, r2
 8012114:	42a3      	cmp	r3, r4
 8012116:	d054      	beq.n	80121c2 <HAL_RCC_ClockConfig+0xd2>
    {
      return HAL_ERROR;
 8012118:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 801211a:	bc0c      	pop	{r2, r3}
 801211c:	4690      	mov	r8, r2
 801211e:	4699      	mov	r9, r3
 8012120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012122:	6803      	ldr	r3, [r0, #0]
 8012124:	079a      	lsls	r2, r3, #30
 8012126:	d506      	bpl.n	8012136 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012128:	20f0      	movs	r0, #240	; 0xf0
 801212a:	497a      	ldr	r1, [pc, #488]	; (8012314 <HAL_RCC_ClockConfig+0x224>)
 801212c:	684a      	ldr	r2, [r1, #4]
 801212e:	4382      	bics	r2, r0
 8012130:	68a8      	ldr	r0, [r5, #8]
 8012132:	4302      	orrs	r2, r0
 8012134:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012136:	07db      	lsls	r3, r3, #31
 8012138:	d52a      	bpl.n	8012190 <HAL_RCC_ClockConfig+0xa0>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801213a:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801213c:	4a75      	ldr	r2, [pc, #468]	; (8012314 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801213e:	2b01      	cmp	r3, #1
 8012140:	d073      	beq.n	801222a <HAL_RCC_ClockConfig+0x13a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012142:	2b02      	cmp	r3, #2
 8012144:	d075      	beq.n	8012232 <HAL_RCC_ClockConfig+0x142>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012146:	2b03      	cmp	r3, #3
 8012148:	d100      	bne.n	801214c <HAL_RCC_ClockConfig+0x5c>
 801214a:	e09c      	b.n	8012286 <HAL_RCC_ClockConfig+0x196>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801214c:	6812      	ldr	r2, [r2, #0]
 801214e:	0792      	lsls	r2, r2, #30
 8012150:	d5e2      	bpl.n	8012118 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012152:	2103      	movs	r1, #3
 8012154:	4e6f      	ldr	r6, [pc, #444]	; (8012314 <HAL_RCC_ClockConfig+0x224>)
 8012156:	6872      	ldr	r2, [r6, #4]
 8012158:	438a      	bics	r2, r1
 801215a:	4313      	orrs	r3, r2
 801215c:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 801215e:	f7fd fff9 	bl	8010154 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012162:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8012164:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012166:	2b01      	cmp	r3, #1
 8012168:	d07d      	beq.n	8012266 <HAL_RCC_ClockConfig+0x176>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801216a:	2b02      	cmp	r3, #2
 801216c:	d100      	bne.n	8012170 <HAL_RCC_ClockConfig+0x80>
 801216e:	e093      	b.n	8012298 <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012170:	2b03      	cmp	r3, #3
 8012172:	d066      	beq.n	8012242 <HAL_RCC_ClockConfig+0x152>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012174:	230c      	movs	r3, #12
 8012176:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012178:	4b67      	ldr	r3, [pc, #412]	; (8012318 <HAL_RCC_ClockConfig+0x228>)
 801217a:	4699      	mov	r9, r3
 801217c:	e004      	b.n	8012188 <HAL_RCC_ClockConfig+0x98>
 801217e:	f7fd ffe9 	bl	8010154 <HAL_GetTick>
 8012182:	1bc0      	subs	r0, r0, r7
 8012184:	4548      	cmp	r0, r9
 8012186:	d86c      	bhi.n	8012262 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012188:	4642      	mov	r2, r8
 801218a:	6873      	ldr	r3, [r6, #4]
 801218c:	421a      	tst	r2, r3
 801218e:	d1f6      	bne.n	801217e <HAL_RCC_ClockConfig+0x8e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012190:	2201      	movs	r2, #1
 8012192:	495f      	ldr	r1, [pc, #380]	; (8012310 <HAL_RCC_ClockConfig+0x220>)
 8012194:	680b      	ldr	r3, [r1, #0]
 8012196:	4393      	bics	r3, r2
 8012198:	4323      	orrs	r3, r4
 801219a:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801219c:	680b      	ldr	r3, [r1, #0]
 801219e:	401a      	ands	r2, r3
 80121a0:	42a2      	cmp	r2, r4
 80121a2:	d1b9      	bne.n	8012118 <HAL_RCC_ClockConfig+0x28>
 80121a4:	682b      	ldr	r3, [r5, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80121a6:	075b      	lsls	r3, r3, #29
 80121a8:	d506      	bpl.n	80121b8 <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80121aa:	4a5a      	ldr	r2, [pc, #360]	; (8012314 <HAL_RCC_ClockConfig+0x224>)
 80121ac:	495b      	ldr	r1, [pc, #364]	; (801231c <HAL_RCC_ClockConfig+0x22c>)
 80121ae:	6853      	ldr	r3, [r2, #4]
 80121b0:	400b      	ands	r3, r1
 80121b2:	68e9      	ldr	r1, [r5, #12]
 80121b4:	430b      	orrs	r3, r1
 80121b6:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 80121b8:	2000      	movs	r0, #0
 80121ba:	f7fd ffa1 	bl	8010100 <HAL_InitTick>
  return HAL_OK;
 80121be:	2000      	movs	r0, #0
 80121c0:	e7ab      	b.n	801211a <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80121c2:	6803      	ldr	r3, [r0, #0]
 80121c4:	079a      	lsls	r2, r3, #30
 80121c6:	d506      	bpl.n	80121d6 <HAL_RCC_ClockConfig+0xe6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80121c8:	20f0      	movs	r0, #240	; 0xf0
 80121ca:	4952      	ldr	r1, [pc, #328]	; (8012314 <HAL_RCC_ClockConfig+0x224>)
 80121cc:	684a      	ldr	r2, [r1, #4]
 80121ce:	4382      	bics	r2, r0
 80121d0:	68a8      	ldr	r0, [r5, #8]
 80121d2:	4302      	orrs	r2, r0
 80121d4:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80121d6:	07da      	lsls	r2, r3, #31
 80121d8:	d5e5      	bpl.n	80121a6 <HAL_RCC_ClockConfig+0xb6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80121da:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80121dc:	4a4d      	ldr	r2, [pc, #308]	; (8012314 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80121de:	2b01      	cmp	r3, #1
 80121e0:	d056      	beq.n	8012290 <HAL_RCC_ClockConfig+0x1a0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80121e2:	2b02      	cmp	r3, #2
 80121e4:	d029      	beq.n	801223a <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80121e6:	2b03      	cmp	r3, #3
 80121e8:	d073      	beq.n	80122d2 <HAL_RCC_ClockConfig+0x1e2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80121ea:	6812      	ldr	r2, [r2, #0]
 80121ec:	0792      	lsls	r2, r2, #30
 80121ee:	d593      	bpl.n	8012118 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80121f0:	2103      	movs	r1, #3
 80121f2:	4c48      	ldr	r4, [pc, #288]	; (8012314 <HAL_RCC_ClockConfig+0x224>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80121f4:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80121f6:	6862      	ldr	r2, [r4, #4]
 80121f8:	438a      	bics	r2, r1
 80121fa:	4313      	orrs	r3, r2
 80121fc:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 80121fe:	f7fd ffa9 	bl	8010154 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012202:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8012204:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012206:	2b01      	cmp	r3, #1
 8012208:	d056      	beq.n	80122b8 <HAL_RCC_ClockConfig+0x1c8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801220a:	2b02      	cmp	r3, #2
 801220c:	d065      	beq.n	80122da <HAL_RCC_ClockConfig+0x1ea>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801220e:	2b03      	cmp	r3, #3
 8012210:	d070      	beq.n	80122f4 <HAL_RCC_ClockConfig+0x204>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012212:	4b41      	ldr	r3, [pc, #260]	; (8012318 <HAL_RCC_ClockConfig+0x228>)
 8012214:	4698      	mov	r8, r3
 8012216:	e004      	b.n	8012222 <HAL_RCC_ClockConfig+0x132>
 8012218:	f7fd ff9c 	bl	8010154 <HAL_GetTick>
 801221c:	1b80      	subs	r0, r0, r6
 801221e:	4540      	cmp	r0, r8
 8012220:	d81f      	bhi.n	8012262 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012222:	6863      	ldr	r3, [r4, #4]
 8012224:	421f      	tst	r7, r3
 8012226:	d1f7      	bne.n	8012218 <HAL_RCC_ClockConfig+0x128>
 8012228:	e7bc      	b.n	80121a4 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801222a:	6812      	ldr	r2, [r2, #0]
 801222c:	0392      	lsls	r2, r2, #14
 801222e:	d490      	bmi.n	8012152 <HAL_RCC_ClockConfig+0x62>
 8012230:	e772      	b.n	8012118 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012232:	6812      	ldr	r2, [r2, #0]
 8012234:	0192      	lsls	r2, r2, #6
 8012236:	d48c      	bmi.n	8012152 <HAL_RCC_ClockConfig+0x62>
 8012238:	e76e      	b.n	8012118 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801223a:	6812      	ldr	r2, [r2, #0]
 801223c:	0192      	lsls	r2, r2, #6
 801223e:	d4d7      	bmi.n	80121f0 <HAL_RCC_ClockConfig+0x100>
 8012240:	e76a      	b.n	8012118 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012242:	3309      	adds	r3, #9
 8012244:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012246:	4b34      	ldr	r3, [pc, #208]	; (8012318 <HAL_RCC_ClockConfig+0x228>)
 8012248:	4699      	mov	r9, r3
 801224a:	e004      	b.n	8012256 <HAL_RCC_ClockConfig+0x166>
 801224c:	f7fd ff82 	bl	8010154 <HAL_GetTick>
 8012250:	1bc0      	subs	r0, r0, r7
 8012252:	4548      	cmp	r0, r9
 8012254:	d805      	bhi.n	8012262 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012256:	4642      	mov	r2, r8
 8012258:	6873      	ldr	r3, [r6, #4]
 801225a:	4013      	ands	r3, r2
 801225c:	2b0c      	cmp	r3, #12
 801225e:	d1f5      	bne.n	801224c <HAL_RCC_ClockConfig+0x15c>
 8012260:	e796      	b.n	8012190 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8012262:	2003      	movs	r0, #3
 8012264:	e759      	b.n	801211a <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012266:	330b      	adds	r3, #11
 8012268:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801226a:	4b2b      	ldr	r3, [pc, #172]	; (8012318 <HAL_RCC_ClockConfig+0x228>)
 801226c:	4699      	mov	r9, r3
 801226e:	e004      	b.n	801227a <HAL_RCC_ClockConfig+0x18a>
 8012270:	f7fd ff70 	bl	8010154 <HAL_GetTick>
 8012274:	1bc0      	subs	r0, r0, r7
 8012276:	4548      	cmp	r0, r9
 8012278:	d8f3      	bhi.n	8012262 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801227a:	4642      	mov	r2, r8
 801227c:	6873      	ldr	r3, [r6, #4]
 801227e:	4013      	ands	r3, r2
 8012280:	2b04      	cmp	r3, #4
 8012282:	d1f5      	bne.n	8012270 <HAL_RCC_ClockConfig+0x180>
 8012284:	e784      	b.n	8012190 <HAL_RCC_ClockConfig+0xa0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012286:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012288:	03d2      	lsls	r2, r2, #15
 801228a:	d500      	bpl.n	801228e <HAL_RCC_ClockConfig+0x19e>
 801228c:	e761      	b.n	8012152 <HAL_RCC_ClockConfig+0x62>
 801228e:	e743      	b.n	8012118 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012290:	6812      	ldr	r2, [r2, #0]
 8012292:	0392      	lsls	r2, r2, #14
 8012294:	d4ac      	bmi.n	80121f0 <HAL_RCC_ClockConfig+0x100>
 8012296:	e73f      	b.n	8012118 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012298:	330a      	adds	r3, #10
 801229a:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801229c:	4b1e      	ldr	r3, [pc, #120]	; (8012318 <HAL_RCC_ClockConfig+0x228>)
 801229e:	4699      	mov	r9, r3
 80122a0:	e004      	b.n	80122ac <HAL_RCC_ClockConfig+0x1bc>
 80122a2:	f7fd ff57 	bl	8010154 <HAL_GetTick>
 80122a6:	1bc0      	subs	r0, r0, r7
 80122a8:	4548      	cmp	r0, r9
 80122aa:	d8da      	bhi.n	8012262 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80122ac:	4642      	mov	r2, r8
 80122ae:	6873      	ldr	r3, [r6, #4]
 80122b0:	4013      	ands	r3, r2
 80122b2:	2b08      	cmp	r3, #8
 80122b4:	d1f5      	bne.n	80122a2 <HAL_RCC_ClockConfig+0x1b2>
 80122b6:	e76b      	b.n	8012190 <HAL_RCC_ClockConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80122b8:	4b17      	ldr	r3, [pc, #92]	; (8012318 <HAL_RCC_ClockConfig+0x228>)
 80122ba:	4698      	mov	r8, r3
 80122bc:	e004      	b.n	80122c8 <HAL_RCC_ClockConfig+0x1d8>
 80122be:	f7fd ff49 	bl	8010154 <HAL_GetTick>
 80122c2:	1b80      	subs	r0, r0, r6
 80122c4:	4540      	cmp	r0, r8
 80122c6:	d8cc      	bhi.n	8012262 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80122c8:	6863      	ldr	r3, [r4, #4]
 80122ca:	403b      	ands	r3, r7
 80122cc:	2b04      	cmp	r3, #4
 80122ce:	d1f6      	bne.n	80122be <HAL_RCC_ClockConfig+0x1ce>
 80122d0:	e768      	b.n	80121a4 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80122d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80122d4:	03d2      	lsls	r2, r2, #15
 80122d6:	d48b      	bmi.n	80121f0 <HAL_RCC_ClockConfig+0x100>
 80122d8:	e71e      	b.n	8012118 <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80122da:	4b0f      	ldr	r3, [pc, #60]	; (8012318 <HAL_RCC_ClockConfig+0x228>)
 80122dc:	4698      	mov	r8, r3
 80122de:	e004      	b.n	80122ea <HAL_RCC_ClockConfig+0x1fa>
 80122e0:	f7fd ff38 	bl	8010154 <HAL_GetTick>
 80122e4:	1b80      	subs	r0, r0, r6
 80122e6:	4540      	cmp	r0, r8
 80122e8:	d8bb      	bhi.n	8012262 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80122ea:	6863      	ldr	r3, [r4, #4]
 80122ec:	403b      	ands	r3, r7
 80122ee:	2b08      	cmp	r3, #8
 80122f0:	d1f6      	bne.n	80122e0 <HAL_RCC_ClockConfig+0x1f0>
 80122f2:	e757      	b.n	80121a4 <HAL_RCC_ClockConfig+0xb4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80122f4:	4b08      	ldr	r3, [pc, #32]	; (8012318 <HAL_RCC_ClockConfig+0x228>)
 80122f6:	4698      	mov	r8, r3
 80122f8:	e004      	b.n	8012304 <HAL_RCC_ClockConfig+0x214>
 80122fa:	f7fd ff2b 	bl	8010154 <HAL_GetTick>
 80122fe:	1b80      	subs	r0, r0, r6
 8012300:	4540      	cmp	r0, r8
 8012302:	d8ae      	bhi.n	8012262 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012304:	6863      	ldr	r3, [r4, #4]
 8012306:	403b      	ands	r3, r7
 8012308:	2b0c      	cmp	r3, #12
 801230a:	d1f6      	bne.n	80122fa <HAL_RCC_ClockConfig+0x20a>
 801230c:	e74a      	b.n	80121a4 <HAL_RCC_ClockConfig+0xb4>
 801230e:	46c0      	nop			; (mov r8, r8)
 8012310:	40022000 	.word	0x40022000
 8012314:	40021000 	.word	0x40021000
 8012318:	00001388 	.word	0x00001388
 801231c:	fffff8ff 	.word	0xfffff8ff

08012320 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012320:	b570      	push	{r4, r5, r6, lr}
 8012322:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012324:	4669      	mov	r1, sp
 8012326:	4b1c      	ldr	r3, [pc, #112]	; (8012398 <HAL_RCC_GetSysClockFreq+0x78>)
 8012328:	000a      	movs	r2, r1
 801232a:	0018      	movs	r0, r3
 801232c:	c870      	ldmia	r0!, {r4, r5, r6}
 801232e:	c270      	stmia	r2!, {r4, r5, r6}
 8012330:	6800      	ldr	r0, [r0, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012332:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012334:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012336:	aa04      	add	r2, sp, #16
 8012338:	0010      	movs	r0, r2
 801233a:	cb70      	ldmia	r3!, {r4, r5, r6}
 801233c:	c070      	stmia	r0!, {r4, r5, r6}
 801233e:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8012340:	4d16      	ldr	r5, [pc, #88]	; (801239c <HAL_RCC_GetSysClockFreq+0x7c>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012342:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012344:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8012346:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8012348:	4018      	ands	r0, r3
 801234a:	2808      	cmp	r0, #8
 801234c:	d00a      	beq.n	8012364 <HAL_RCC_GetSysClockFreq+0x44>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801234e:	380c      	subs	r0, #12
 8012350:	4243      	negs	r3, r0
 8012352:	4158      	adcs	r0, r3
 8012354:	4b12      	ldr	r3, [pc, #72]	; (80123a0 <HAL_RCC_GetSysClockFreq+0x80>)
 8012356:	4240      	negs	r0, r0
 8012358:	4018      	ands	r0, r3
 801235a:	4b12      	ldr	r3, [pc, #72]	; (80123a4 <HAL_RCC_GetSysClockFreq+0x84>)
 801235c:	469c      	mov	ip, r3
 801235e:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8012360:	b008      	add	sp, #32
 8012362:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8012364:	200f      	movs	r0, #15
 8012366:	0c9c      	lsrs	r4, r3, #18
 8012368:	4004      	ands	r4, r0
 801236a:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 801236c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 801236e:	4008      	ands	r0, r1
 8012370:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012372:	22c0      	movs	r2, #192	; 0xc0
 8012374:	2080      	movs	r0, #128	; 0x80
 8012376:	0252      	lsls	r2, r2, #9
 8012378:	4013      	ands	r3, r2
 801237a:	0240      	lsls	r0, r0, #9
 801237c:	4283      	cmp	r3, r0
 801237e:	d001      	beq.n	8012384 <HAL_RCC_GetSysClockFreq+0x64>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8012380:	4293      	cmp	r3, r2
 8012382:	d004      	beq.n	801238e <HAL_RCC_GetSysClockFreq+0x6e>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8012384:	4807      	ldr	r0, [pc, #28]	; (80123a4 <HAL_RCC_GetSysClockFreq+0x84>)
 8012386:	f7ed fee3 	bl	8000150 <__udivsi3>
 801238a:	4360      	muls	r0, r4
 801238c:	e7e8      	b.n	8012360 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 801238e:	4806      	ldr	r0, [pc, #24]	; (80123a8 <HAL_RCC_GetSysClockFreq+0x88>)
 8012390:	f7ed fede 	bl	8000150 <__udivsi3>
 8012394:	4360      	muls	r0, r4
 8012396:	e7e3      	b.n	8012360 <HAL_RCC_GetSysClockFreq+0x40>
 8012398:	08018f70 	.word	0x08018f70
 801239c:	40021000 	.word	0x40021000
 80123a0:	02625a00 	.word	0x02625a00
 80123a4:	007a1200 	.word	0x007a1200
 80123a8:	02dc6c00 	.word	0x02dc6c00

080123ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80123ac:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80123ae:	f7ff ffb7 	bl	8012320 <HAL_RCC_GetSysClockFreq>
 80123b2:	4b05      	ldr	r3, [pc, #20]	; (80123c8 <HAL_RCC_GetHCLKFreq+0x1c>)
 80123b4:	4a05      	ldr	r2, [pc, #20]	; (80123cc <HAL_RCC_GetHCLKFreq+0x20>)
 80123b6:	685b      	ldr	r3, [r3, #4]
 80123b8:	3220      	adds	r2, #32
 80123ba:	061b      	lsls	r3, r3, #24
 80123bc:	0f1b      	lsrs	r3, r3, #28
 80123be:	5cd3      	ldrb	r3, [r2, r3]
 80123c0:	40d8      	lsrs	r0, r3
 80123c2:	4b03      	ldr	r3, [pc, #12]	; (80123d0 <HAL_RCC_GetHCLKFreq+0x24>)
 80123c4:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80123c6:	bd10      	pop	{r4, pc}
 80123c8:	40021000 	.word	0x40021000
 80123cc:	08018f70 	.word	0x08018f70
 80123d0:	200000b0 	.word	0x200000b0

080123d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80123d4:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80123d6:	f7ff ffa3 	bl	8012320 <HAL_RCC_GetSysClockFreq>
 80123da:	4908      	ldr	r1, [pc, #32]	; (80123fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80123dc:	4a08      	ldr	r2, [pc, #32]	; (8012400 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80123de:	684b      	ldr	r3, [r1, #4]
 80123e0:	3220      	adds	r2, #32
 80123e2:	061b      	lsls	r3, r3, #24
 80123e4:	0f1b      	lsrs	r3, r3, #28
 80123e6:	5cd3      	ldrb	r3, [r2, r3]
 80123e8:	40d8      	lsrs	r0, r3
 80123ea:	4b06      	ldr	r3, [pc, #24]	; (8012404 <HAL_RCC_GetPCLK1Freq+0x30>)
 80123ec:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 80123ee:	684b      	ldr	r3, [r1, #4]
 80123f0:	055b      	lsls	r3, r3, #21
 80123f2:	0f5b      	lsrs	r3, r3, #29
 80123f4:	5cd3      	ldrb	r3, [r2, r3]
 80123f6:	40d8      	lsrs	r0, r3
}    
 80123f8:	bd10      	pop	{r4, pc}
 80123fa:	46c0      	nop			; (mov r8, r8)
 80123fc:	40021000 	.word	0x40021000
 8012400:	08018f70 	.word	0x08018f70
 8012404:	200000b0 	.word	0x200000b0

08012408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801240a:	46c6      	mov	lr, r8
 801240c:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801240e:	6803      	ldr	r3, [r0, #0]
{
 8012410:	b082      	sub	sp, #8
 8012412:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012414:	03da      	lsls	r2, r3, #15
 8012416:	d507      	bpl.n	8012428 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012418:	493e      	ldr	r1, [pc, #248]	; (8012514 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801241a:	6840      	ldr	r0, [r0, #4]
 801241c:	6a0a      	ldr	r2, [r1, #32]
 801241e:	4042      	eors	r2, r0
 8012420:	20c0      	movs	r0, #192	; 0xc0
 8012422:	0080      	lsls	r0, r0, #2
 8012424:	4202      	tst	r2, r0
 8012426:	d131      	bne.n	801248c <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012428:	07da      	lsls	r2, r3, #31
 801242a:	d506      	bpl.n	801243a <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801242c:	2003      	movs	r0, #3
 801242e:	4939      	ldr	r1, [pc, #228]	; (8012514 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8012430:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8012432:	4382      	bics	r2, r0
 8012434:	68a0      	ldr	r0, [r4, #8]
 8012436:	4302      	orrs	r2, r0
 8012438:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801243a:	079a      	lsls	r2, r3, #30
 801243c:	d506      	bpl.n	801244c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801243e:	4935      	ldr	r1, [pc, #212]	; (8012514 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8012440:	4835      	ldr	r0, [pc, #212]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8012442:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8012444:	4002      	ands	r2, r0
 8012446:	68e0      	ldr	r0, [r4, #12]
 8012448:	4302      	orrs	r2, r0
 801244a:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801244c:	035a      	lsls	r2, r3, #13
 801244e:	d506      	bpl.n	801245e <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8012450:	4930      	ldr	r1, [pc, #192]	; (8012514 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8012452:	4832      	ldr	r0, [pc, #200]	; (801251c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012454:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8012456:	4002      	ands	r2, r0
 8012458:	6920      	ldr	r0, [r4, #16]
 801245a:	4302      	orrs	r2, r0
 801245c:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801245e:	069a      	lsls	r2, r3, #26
 8012460:	d506      	bpl.n	8012470 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012462:	2010      	movs	r0, #16
 8012464:	492b      	ldr	r1, [pc, #172]	; (8012514 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8012466:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8012468:	4382      	bics	r2, r0
 801246a:	6960      	ldr	r0, [r4, #20]
 801246c:	4302      	orrs	r2, r0
 801246e:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8012470:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012472:	055b      	lsls	r3, r3, #21
 8012474:	d506      	bpl.n	8012484 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012476:	2140      	movs	r1, #64	; 0x40
 8012478:	4a26      	ldr	r2, [pc, #152]	; (8012514 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801247a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801247c:	438b      	bics	r3, r1
 801247e:	69a1      	ldr	r1, [r4, #24]
 8012480:	430b      	orrs	r3, r1
 8012482:	6313      	str	r3, [r2, #48]	; 0x30
}
 8012484:	b002      	add	sp, #8
 8012486:	bc04      	pop	{r2}
 8012488:	4690      	mov	r8, r2
 801248a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 801248c:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801248e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8012490:	69ca      	ldr	r2, [r1, #28]
 8012492:	0540      	lsls	r0, r0, #21
 8012494:	4302      	orrs	r2, r0
 8012496:	61ca      	str	r2, [r1, #28]
 8012498:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801249a:	4d21      	ldr	r5, [pc, #132]	; (8012520 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 801249c:	4003      	ands	r3, r0
 801249e:	9301      	str	r3, [sp, #4]
 80124a0:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80124a2:	682b      	ldr	r3, [r5, #0]
 80124a4:	0076      	lsls	r6, r6, #1
 80124a6:	4333      	orrs	r3, r6
 80124a8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80124aa:	f7fd fe53 	bl	8010154 <HAL_GetTick>
 80124ae:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80124b0:	e004      	b.n	80124bc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80124b2:	f7fd fe4f 	bl	8010154 <HAL_GetTick>
 80124b6:	1bc0      	subs	r0, r0, r7
 80124b8:	2864      	cmp	r0, #100	; 0x64
 80124ba:	d829      	bhi.n	8012510 <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80124bc:	682b      	ldr	r3, [r5, #0]
 80124be:	4233      	tst	r3, r6
 80124c0:	d0f7      	beq.n	80124b2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 80124c2:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80124c4:	4d13      	ldr	r5, [pc, #76]	; (8012514 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 80124c6:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80124c8:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80124ca:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80124cc:	4b15      	ldr	r3, [pc, #84]	; (8012524 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 80124ce:	4302      	orrs	r2, r0
 80124d0:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80124d2:	6a2a      	ldr	r2, [r5, #32]
 80124d4:	4814      	ldr	r0, [pc, #80]	; (8012528 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80124d6:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80124d8:	4002      	ands	r2, r0
 80124da:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 80124dc:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80124de:	078b      	lsls	r3, r1, #30
 80124e0:	d408      	bmi.n	80124f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80124e2:	4a0c      	ldr	r2, [pc, #48]	; (8012514 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80124e4:	490f      	ldr	r1, [pc, #60]	; (8012524 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80124e6:	6a13      	ldr	r3, [r2, #32]
 80124e8:	400b      	ands	r3, r1
 80124ea:	6861      	ldr	r1, [r4, #4]
 80124ec:	430b      	orrs	r3, r1
 80124ee:	6213      	str	r3, [r2, #32]
 80124f0:	6823      	ldr	r3, [r4, #0]
 80124f2:	e799      	b.n	8012428 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 80124f4:	f7fd fe2e 	bl	8010154 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80124f8:	4b0c      	ldr	r3, [pc, #48]	; (801252c <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 80124fa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80124fc:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80124fe:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012500:	6a2b      	ldr	r3, [r5, #32]
 8012502:	421e      	tst	r6, r3
 8012504:	d1ed      	bne.n	80124e2 <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012506:	f7fd fe25 	bl	8010154 <HAL_GetTick>
 801250a:	1bc0      	subs	r0, r0, r7
 801250c:	4540      	cmp	r0, r8
 801250e:	d9f7      	bls.n	8012500 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8012510:	2003      	movs	r0, #3
 8012512:	e7b7      	b.n	8012484 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8012514:	40021000 	.word	0x40021000
 8012518:	fffcffff 	.word	0xfffcffff
 801251c:	fff3ffff 	.word	0xfff3ffff
 8012520:	40007000 	.word	0x40007000
 8012524:	fffffcff 	.word	0xfffffcff
 8012528:	fffeffff 	.word	0xfffeffff
 801252c:	00001388 	.word	0x00001388

08012530 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012530:	4770      	bx	lr
 8012532:	46c0      	nop			; (mov r8, r8)

08012534 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012534:	6803      	ldr	r3, [r0, #0]
{
 8012536:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012538:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 801253a:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801253c:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801253e:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8012540:	681c      	ldr	r4, [r3, #0]
 8012542:	4b13      	ldr	r3, [pc, #76]	; (8012590 <HAL_RTC_GetTime+0x5c>)
 8012544:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8012546:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8012548:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801254a:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 801254c:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801254e:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8012550:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8012552:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8012554:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8012556:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8012558:	720e      	strb	r6, [r1, #8]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 801255a:	2a00      	cmp	r2, #0
 801255c:	d115      	bne.n	801258a <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 801255e:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012560:	0900      	lsrs	r0, r0, #4
 8012562:	0082      	lsls	r2, r0, #2
 8012564:	1810      	adds	r0, r2, r0
 8012566:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012568:	4035      	ands	r5, r6
 801256a:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801256c:	0918      	lsrs	r0, r3, #4
 801256e:	0082      	lsls	r2, r0, #2
 8012570:	1812      	adds	r2, r2, r0
 8012572:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012574:	4033      	ands	r3, r6
 8012576:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012578:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801257a:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801257c:	0093      	lsls	r3, r2, #2
 801257e:	189b      	adds	r3, r3, r2
 8012580:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012582:	4034      	ands	r4, r6
 8012584:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012586:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8012588:	708c      	strb	r4, [r1, #2]
}
 801258a:	2000      	movs	r0, #0
 801258c:	bd70      	pop	{r4, r5, r6, pc}
 801258e:	46c0      	nop			; (mov r8, r8)
 8012590:	007f7f7f 	.word	0x007f7f7f

08012594 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012594:	6803      	ldr	r3, [r0, #0]
 8012596:	4815      	ldr	r0, [pc, #84]	; (80125ec <HAL_RTC_GetDate+0x58>)
 8012598:	685b      	ldr	r3, [r3, #4]
{
 801259a:	b5f0      	push	{r4, r5, r6, r7, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 801259c:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801259e:	201f      	movs	r0, #31
 80125a0:	0a1c      	lsrs	r4, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80125a2:	0c1f      	lsrs	r7, r3, #16
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80125a4:	b2dd      	uxtb	r5, r3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80125a6:	b2e4      	uxtb	r4, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80125a8:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80125aa:	4020      	ands	r0, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80125ac:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80125ae:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80125b0:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80125b2:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80125b4:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80125b6:	2a00      	cmp	r2, #0
 80125b8:	d115      	bne.n	80125e6 <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 80125ba:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80125bc:	093b      	lsrs	r3, r7, #4
 80125be:	009a      	lsls	r2, r3, #2
 80125c0:	18d2      	adds	r2, r2, r3
 80125c2:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80125c4:	4037      	ands	r7, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80125c6:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80125c8:	19d2      	adds	r2, r2, r7
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80125ca:	0098      	lsls	r0, r3, #2
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80125cc:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80125ce:	092a      	lsrs	r2, r5, #4
 80125d0:	18c0      	adds	r0, r0, r3
 80125d2:	0093      	lsls	r3, r2, #2
 80125d4:	189b      	adds	r3, r3, r2
 80125d6:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80125d8:	4034      	ands	r4, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80125da:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80125dc:	4035      	ands	r5, r6
 80125de:	1904      	adds	r4, r0, r4
 80125e0:	195b      	adds	r3, r3, r5
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80125e2:	704c      	strb	r4, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80125e4:	708b      	strb	r3, [r1, #2]
}
 80125e6:	2000      	movs	r0, #0
 80125e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125ea:	46c0      	nop			; (mov r8, r8)
 80125ec:	00ffff3f 	.word	0x00ffff3f

080125f0 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80125f0:	21a0      	movs	r1, #160	; 0xa0
 80125f2:	6802      	ldr	r2, [r0, #0]
{
 80125f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80125f6:	68d3      	ldr	r3, [r2, #12]
{
 80125f8:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80125fa:	438b      	bics	r3, r1
 80125fc:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 80125fe:	f7fd fda9 	bl	8010154 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012602:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 8012604:	0007      	movs	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012606:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012608:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801260a:	e004      	b.n	8012616 <HAL_RTC_WaitForSynchro+0x26>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801260c:	f7fd fda2 	bl	8010154 <HAL_GetTick>
 8012610:	1bc0      	subs	r0, r0, r7
 8012612:	42b0      	cmp	r0, r6
 8012614:	d805      	bhi.n	8012622 <HAL_RTC_WaitForSynchro+0x32>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012616:	6823      	ldr	r3, [r4, #0]
 8012618:	68db      	ldr	r3, [r3, #12]
 801261a:	421d      	tst	r5, r3
 801261c:	d0f6      	beq.n	801260c <HAL_RTC_WaitForSynchro+0x1c>
  return HAL_OK;
 801261e:	2000      	movs	r0, #0
}
 8012620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8012622:	2003      	movs	r0, #3
 8012624:	e7fc      	b.n	8012620 <HAL_RTC_WaitForSynchro+0x30>
 8012626:	46c0      	nop			; (mov r8, r8)

08012628 <RTC_EnterInitMode>:
{
 8012628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801262a:	6803      	ldr	r3, [r0, #0]
{
 801262c:	0004      	movs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801262e:	68da      	ldr	r2, [r3, #12]
 8012630:	0652      	lsls	r2, r2, #25
 8012632:	d501      	bpl.n	8012638 <RTC_EnterInitMode+0x10>
  return HAL_OK;  
 8012634:	2000      	movs	r0, #0
}
 8012636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012638:	2201      	movs	r2, #1
 801263a:	4252      	negs	r2, r2
 801263c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 801263e:	f7fd fd89 	bl	8010154 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012642:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8012644:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012646:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012648:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801264a:	e004      	b.n	8012656 <RTC_EnterInitMode+0x2e>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801264c:	f7fd fd82 	bl	8010154 <HAL_GetTick>
 8012650:	1bc0      	subs	r0, r0, r7
 8012652:	42b0      	cmp	r0, r6
 8012654:	d804      	bhi.n	8012660 <RTC_EnterInitMode+0x38>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012656:	6823      	ldr	r3, [r4, #0]
 8012658:	68db      	ldr	r3, [r3, #12]
 801265a:	421d      	tst	r5, r3
 801265c:	d0f6      	beq.n	801264c <RTC_EnterInitMode+0x24>
 801265e:	e7e9      	b.n	8012634 <RTC_EnterInitMode+0xc>
        return HAL_TIMEOUT;
 8012660:	2003      	movs	r0, #3
 8012662:	e7e8      	b.n	8012636 <RTC_EnterInitMode+0xe>

08012664 <HAL_RTC_Init>:
{
 8012664:	b570      	push	{r4, r5, r6, lr}
 8012666:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8012668:	d03e      	beq.n	80126e8 <HAL_RTC_Init+0x84>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801266a:	7f43      	ldrb	r3, [r0, #29]
 801266c:	b2db      	uxtb	r3, r3
 801266e:	2b00      	cmp	r3, #0
 8012670:	d036      	beq.n	80126e0 <HAL_RTC_Init+0x7c>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012672:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012674:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012676:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012678:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801267a:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801267c:	625a      	str	r2, [r3, #36]	; 0x24
 801267e:	3a77      	subs	r2, #119	; 0x77
 8012680:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012682:	f7ff ffd1 	bl	8012628 <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012686:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012688:	2800      	cmp	r0, #0
 801268a:	d123      	bne.n	80126d4 <HAL_RTC_Init+0x70>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801268c:	689a      	ldr	r2, [r3, #8]
 801268e:	4917      	ldr	r1, [pc, #92]	; (80126ec <HAL_RTC_Init+0x88>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012690:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012692:	400a      	ands	r2, r1
 8012694:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012696:	6862      	ldr	r2, [r4, #4]
 8012698:	6899      	ldr	r1, [r3, #8]
 801269a:	432a      	orrs	r2, r5
 801269c:	6965      	ldr	r5, [r4, #20]
 801269e:	432a      	orrs	r2, r5
 80126a0:	430a      	orrs	r2, r1
 80126a2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80126a4:	68e2      	ldr	r2, [r4, #12]
 80126a6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80126a8:	68a2      	ldr	r2, [r4, #8]
 80126aa:	6919      	ldr	r1, [r3, #16]
 80126ac:	0412      	lsls	r2, r2, #16
 80126ae:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80126b0:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80126b2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80126b4:	68da      	ldr	r2, [r3, #12]
 80126b6:	438a      	bics	r2, r1
 80126b8:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80126ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80126bc:	490c      	ldr	r1, [pc, #48]	; (80126f0 <HAL_RTC_Init+0x8c>)
 80126be:	400a      	ands	r2, r1
 80126c0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80126c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80126c4:	69a1      	ldr	r1, [r4, #24]
 80126c6:	430a      	orrs	r2, r1
 80126c8:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80126ca:	22ff      	movs	r2, #255	; 0xff
 80126cc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80126ce:	2301      	movs	r3, #1
 80126d0:	7763      	strb	r3, [r4, #29]
}
 80126d2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80126d4:	22ff      	movs	r2, #255	; 0xff
 80126d6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80126d8:	2304      	movs	r3, #4
    return HAL_ERROR;
 80126da:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 80126dc:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80126de:	e7f8      	b.n	80126d2 <HAL_RTC_Init+0x6e>
    hrtc->Lock = HAL_UNLOCKED;
 80126e0:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80126e2:	f7ff ff25 	bl	8012530 <HAL_RTC_MspInit>
 80126e6:	e7c4      	b.n	8012672 <HAL_RTC_Init+0xe>
     return HAL_ERROR;
 80126e8:	2001      	movs	r0, #1
 80126ea:	e7f2      	b.n	80126d2 <HAL_RTC_Init+0x6e>
 80126ec:	ff8fffbf 	.word	0xff8fffbf
 80126f0:	fffbffff 	.word	0xfffbffff

080126f4 <HAL_RTC_SetTime>:
{
 80126f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80126f6:	7f03      	ldrb	r3, [r0, #28]
{
 80126f8:	0004      	movs	r4, r0
 80126fa:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80126fc:	2b01      	cmp	r3, #1
 80126fe:	d100      	bne.n	8012702 <HAL_RTC_SetTime+0xe>
 8012700:	e074      	b.n	80127ec <HAL_RTC_SetTime+0xf8>
 8012702:	2301      	movs	r3, #1
 8012704:	6806      	ldr	r6, [r0, #0]
 8012706:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012708:	3301      	adds	r3, #1
 801270a:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801270c:	68b3      	ldr	r3, [r6, #8]
 801270e:	2740      	movs	r7, #64	; 0x40
  if(Format == RTC_FORMAT_BIN)
 8012710:	2a00      	cmp	r2, #0
 8012712:	d031      	beq.n	8012778 <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012714:	403b      	ands	r3, r7
 8012716:	d065      	beq.n	80127e4 <HAL_RTC_SetTime+0xf0>
 8012718:	7a0b      	ldrb	r3, [r1, #8]
 801271a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801271c:	782f      	ldrb	r7, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 801271e:	7869      	ldrb	r1, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012720:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012722:	0209      	lsls	r1, r1, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012724:	430f      	orrs	r7, r1
              ((uint32_t)sTime->Seconds) | \
 8012726:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012728:	430f      	orrs	r7, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801272a:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801272c:	23ca      	movs	r3, #202	; 0xca
 801272e:	6273      	str	r3, [r6, #36]	; 0x24
 8012730:	3b77      	subs	r3, #119	; 0x77
 8012732:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012734:	0020      	movs	r0, r4
 8012736:	f7ff ff77 	bl	8012628 <RTC_EnterInitMode>
 801273a:	1e06      	subs	r6, r0, #0
 801273c:	d149      	bne.n	80127d2 <HAL_RTC_SetTime+0xde>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801273e:	4935      	ldr	r1, [pc, #212]	; (8012814 <HAL_RTC_SetTime+0x120>)
 8012740:	6822      	ldr	r2, [r4, #0]
 8012742:	4039      	ands	r1, r7
 8012744:	6011      	str	r1, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012746:	6893      	ldr	r3, [r2, #8]
 8012748:	4933      	ldr	r1, [pc, #204]	; (8012818 <HAL_RTC_SetTime+0x124>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801274a:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 801274c:	400b      	ands	r3, r1
 801274e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012750:	68eb      	ldr	r3, [r5, #12]
 8012752:	6891      	ldr	r1, [r2, #8]
 8012754:	4303      	orrs	r3, r0
 8012756:	430b      	orrs	r3, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012758:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801275a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801275c:	68d3      	ldr	r3, [r2, #12]
 801275e:	438b      	bics	r3, r1
 8012760:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012762:	6893      	ldr	r3, [r2, #8]
 8012764:	069b      	lsls	r3, r3, #26
 8012766:	d543      	bpl.n	80127f0 <HAL_RTC_SetTime+0xfc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012768:	23ff      	movs	r3, #255	; 0xff
 801276a:	6253      	str	r3, [r2, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 801276c:	3bfe      	subs	r3, #254	; 0xfe
 801276e:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012770:	2300      	movs	r3, #0
 8012772:	7723      	strb	r3, [r4, #28]
}
 8012774:	0030      	movs	r0, r6
 8012776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012778:	401f      	ands	r7, r3
 801277a:	d035      	beq.n	80127e8 <HAL_RTC_SetTime+0xf4>
 801277c:	7a0f      	ldrb	r7, [r1, #8]
 801277e:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012780:	7828      	ldrb	r0, [r5, #0]
  uint32_t bcdhigh = 0;
 8012782:	2300      	movs	r3, #0
  while(Value >= 10)
 8012784:	2809      	cmp	r0, #9
 8012786:	d906      	bls.n	8012796 <HAL_RTC_SetTime+0xa2>
    Value -= 10;
 8012788:	380a      	subs	r0, #10
 801278a:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 801278c:	3301      	adds	r3, #1
  while(Value >= 10)
 801278e:	2809      	cmp	r0, #9
 8012790:	d8fa      	bhi.n	8012788 <HAL_RTC_SetTime+0x94>
 8012792:	011b      	lsls	r3, r3, #4
 8012794:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012796:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012798:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801279a:	0400      	lsls	r0, r0, #16
  uint32_t bcdhigh = 0;
 801279c:	2100      	movs	r1, #0
  while(Value >= 10)
 801279e:	2b09      	cmp	r3, #9
 80127a0:	d906      	bls.n	80127b0 <HAL_RTC_SetTime+0xbc>
    Value -= 10;
 80127a2:	3b0a      	subs	r3, #10
 80127a4:	b2db      	uxtb	r3, r3
    bcdhigh++;
 80127a6:	3101      	adds	r1, #1
  while(Value >= 10)
 80127a8:	2b09      	cmp	r3, #9
 80127aa:	d8fa      	bhi.n	80127a2 <HAL_RTC_SetTime+0xae>
 80127ac:	0109      	lsls	r1, r1, #4
 80127ae:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80127b0:	430b      	orrs	r3, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80127b2:	78a9      	ldrb	r1, [r5, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80127b4:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 80127b6:	2909      	cmp	r1, #9
 80127b8:	d929      	bls.n	801280e <HAL_RTC_SetTime+0x11a>
    Value -= 10;
 80127ba:	390a      	subs	r1, #10
 80127bc:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 80127be:	3201      	adds	r2, #1
  while(Value >= 10)
 80127c0:	2909      	cmp	r1, #9
 80127c2:	d8fa      	bhi.n	80127ba <HAL_RTC_SetTime+0xc6>
 80127c4:	0112      	lsls	r2, r2, #4
 80127c6:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80127c8:	4307      	orrs	r7, r0
 80127ca:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80127cc:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80127ce:	430f      	orrs	r7, r1
 80127d0:	e7ac      	b.n	801272c <HAL_RTC_SetTime+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80127d2:	22ff      	movs	r2, #255	; 0xff
 80127d4:	6823      	ldr	r3, [r4, #0]
    return HAL_ERROR;
 80127d6:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80127d8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80127da:	2304      	movs	r3, #4
 80127dc:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80127de:	2300      	movs	r3, #0
 80127e0:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80127e2:	e7c7      	b.n	8012774 <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00;
 80127e4:	720b      	strb	r3, [r1, #8]
 80127e6:	e799      	b.n	801271c <HAL_RTC_SetTime+0x28>
      sTime->TimeFormat = 0x00;
 80127e8:	720f      	strb	r7, [r1, #8]
 80127ea:	e7c9      	b.n	8012780 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 80127ec:	2602      	movs	r6, #2
 80127ee:	e7c1      	b.n	8012774 <HAL_RTC_SetTime+0x80>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80127f0:	0020      	movs	r0, r4
 80127f2:	f7ff fefd 	bl	80125f0 <HAL_RTC_WaitForSynchro>
 80127f6:	2800      	cmp	r0, #0
 80127f8:	d101      	bne.n	80127fe <HAL_RTC_SetTime+0x10a>
 80127fa:	6822      	ldr	r2, [r4, #0]
 80127fc:	e7b4      	b.n	8012768 <HAL_RTC_SetTime+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80127fe:	22ff      	movs	r2, #255	; 0xff
 8012800:	6823      	ldr	r3, [r4, #0]
 8012802:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012804:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8012806:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012808:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 801280a:	2601      	movs	r6, #1
 801280c:	e7b2      	b.n	8012774 <HAL_RTC_SetTime+0x80>
  while(Value >= 10)
 801280e:	2200      	movs	r2, #0
 8012810:	e7da      	b.n	80127c8 <HAL_RTC_SetTime+0xd4>
 8012812:	46c0      	nop			; (mov r8, r8)
 8012814:	007f7f7f 	.word	0x007f7f7f
 8012818:	fffbffff 	.word	0xfffbffff

0801281c <HAL_RTC_SetDate>:
{
 801281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 801281e:	7f03      	ldrb	r3, [r0, #28]
{
 8012820:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 8012822:	2b01      	cmp	r3, #1
 8012824:	d062      	beq.n	80128ec <HAL_RTC_SetDate+0xd0>
 8012826:	2301      	movs	r3, #1
 8012828:	780f      	ldrb	r7, [r1, #0]
 801282a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 801282c:	3301      	adds	r3, #1
 801282e:	7743      	strb	r3, [r0, #29]
 8012830:	7848      	ldrb	r0, [r1, #1]
 8012832:	788e      	ldrb	r6, [r1, #2]
 8012834:	78cb      	ldrb	r3, [r1, #3]
 8012836:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012838:	2a00      	cmp	r2, #0
 801283a:	d022      	beq.n	8012882 <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801283c:	041b      	lsls	r3, r3, #16
 801283e:	433b      	orrs	r3, r7
 8012840:	001c      	movs	r4, r3
                  (((uint32_t)sDate->Month) << 8) | \
 8012842:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012844:	4334      	orrs	r4, r6
 8012846:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012848:	22ca      	movs	r2, #202	; 0xca
 801284a:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801284c:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801284e:	625a      	str	r2, [r3, #36]	; 0x24
 8012850:	3a77      	subs	r2, #119	; 0x77
 8012852:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012854:	f7ff fee8 	bl	8012628 <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012858:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801285a:	1e06      	subs	r6, r0, #0
 801285c:	d13e      	bne.n	80128dc <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801285e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012860:	4a2b      	ldr	r2, [pc, #172]	; (8012910 <HAL_RTC_SetDate+0xf4>)
 8012862:	4014      	ands	r4, r2
 8012864:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012866:	68da      	ldr	r2, [r3, #12]
 8012868:	438a      	bics	r2, r1
 801286a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 801286c:	689a      	ldr	r2, [r3, #8]
 801286e:	0692      	lsls	r2, r2, #26
 8012870:	d53e      	bpl.n	80128f0 <HAL_RTC_SetDate+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012872:	22ff      	movs	r2, #255	; 0xff
 8012874:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8012876:	2301      	movs	r3, #1
 8012878:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 801287a:	2300      	movs	r3, #0
 801287c:	772b      	strb	r3, [r5, #28]
}
 801287e:	0030      	movs	r0, r6
 8012880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012882:	2410      	movs	r4, #16
 8012884:	4204      	tst	r4, r0
 8012886:	d003      	beq.n	8012890 <HAL_RTC_SetDate+0x74>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012888:	43a0      	bics	r0, r4
 801288a:	300a      	adds	r0, #10
 801288c:	b2c0      	uxtb	r0, r0
 801288e:	7048      	strb	r0, [r1, #1]
  uint32_t bcdhigh = 0;
 8012890:	2100      	movs	r1, #0
  while(Value >= 10)
 8012892:	2b09      	cmp	r3, #9
 8012894:	d906      	bls.n	80128a4 <HAL_RTC_SetDate+0x88>
    Value -= 10;
 8012896:	3b0a      	subs	r3, #10
 8012898:	b2db      	uxtb	r3, r3
    bcdhigh++;
 801289a:	3101      	adds	r1, #1
  while(Value >= 10)
 801289c:	2b09      	cmp	r3, #9
 801289e:	d8fa      	bhi.n	8012896 <HAL_RTC_SetDate+0x7a>
 80128a0:	0109      	lsls	r1, r1, #4
 80128a2:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80128a4:	430b      	orrs	r3, r1
 80128a6:	041b      	lsls	r3, r3, #16
  uint32_t bcdhigh = 0;
 80128a8:	2100      	movs	r1, #0
  while(Value >= 10)
 80128aa:	2809      	cmp	r0, #9
 80128ac:	d906      	bls.n	80128bc <HAL_RTC_SetDate+0xa0>
    Value -= 10;
 80128ae:	380a      	subs	r0, #10
 80128b0:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 80128b2:	3101      	adds	r1, #1
  while(Value >= 10)
 80128b4:	2809      	cmp	r0, #9
 80128b6:	d8fa      	bhi.n	80128ae <HAL_RTC_SetDate+0x92>
 80128b8:	0109      	lsls	r1, r1, #4
 80128ba:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80128bc:	4308      	orrs	r0, r1
 80128be:	0200      	lsls	r0, r0, #8
  while(Value >= 10)
 80128c0:	2e09      	cmp	r6, #9
 80128c2:	d922      	bls.n	801290a <HAL_RTC_SetDate+0xee>
    Value -= 10;
 80128c4:	3e0a      	subs	r6, #10
 80128c6:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 80128c8:	3201      	adds	r2, #1
  while(Value >= 10)
 80128ca:	2e09      	cmp	r6, #9
 80128cc:	d8fa      	bhi.n	80128c4 <HAL_RTC_SetDate+0xa8>
 80128ce:	0112      	lsls	r2, r2, #4
 80128d0:	b2d4      	uxtb	r4, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80128d2:	433b      	orrs	r3, r7
 80128d4:	4303      	orrs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80128d6:	4334      	orrs	r4, r6
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80128d8:	431c      	orrs	r4, r3
 80128da:	e7b5      	b.n	8012848 <HAL_RTC_SetDate+0x2c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80128dc:	22ff      	movs	r2, #255	; 0xff
 80128de:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80128e0:	2304      	movs	r3, #4
 80128e2:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 80128e4:	2300      	movs	r3, #0
    return HAL_ERROR;
 80128e6:	2601      	movs	r6, #1
    __HAL_UNLOCK(hrtc);
 80128e8:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 80128ea:	e7c8      	b.n	801287e <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 80128ec:	2602      	movs	r6, #2
 80128ee:	e7c6      	b.n	801287e <HAL_RTC_SetDate+0x62>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80128f0:	0028      	movs	r0, r5
 80128f2:	f7ff fe7d 	bl	80125f0 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80128f6:	682b      	ldr	r3, [r5, #0]
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80128f8:	2800      	cmp	r0, #0
 80128fa:	d0ba      	beq.n	8012872 <HAL_RTC_SetDate+0x56>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80128fc:	22ff      	movs	r2, #255	; 0xff
 80128fe:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012900:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8012902:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012904:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8012906:	2601      	movs	r6, #1
 8012908:	e7b9      	b.n	801287e <HAL_RTC_SetDate+0x62>
  while(Value >= 10)
 801290a:	2400      	movs	r4, #0
 801290c:	e7e1      	b.n	80128d2 <HAL_RTC_SetDate+0xb6>
 801290e:	46c0      	nop			; (mov r8, r8)
 8012910:	00ffff3f 	.word	0x00ffff3f

08012914 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012914:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8012916:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012918:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 801291a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801291c:	600a      	str	r2, [r1, #0]
}
 801291e:	4770      	bx	lr

08012920 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012920:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8012922:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012924:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012926:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012928:	6808      	ldr	r0, [r1, #0]
}
 801292a:	4770      	bx	lr

0801292c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801292c:	2201      	movs	r2, #1
{
 801292e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012930:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012932:	6a03      	ldr	r3, [r0, #32]
 8012934:	4393      	bics	r3, r2
 8012936:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8012938:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 801293a:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 801293c:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801293e:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012940:	680d      	ldr	r5, [r1, #0]
 8012942:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012944:	2502      	movs	r5, #2
 8012946:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012948:	688d      	ldr	r5, [r1, #8]
 801294a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801294c:	4d0e      	ldr	r5, [pc, #56]	; (8012988 <TIM_OC1_SetConfig+0x5c>)
 801294e:	42a8      	cmp	r0, r5
 8012950:	d008      	beq.n	8012964 <TIM_OC1_SetConfig+0x38>
 8012952:	4d0e      	ldr	r5, [pc, #56]	; (801298c <TIM_OC1_SetConfig+0x60>)
 8012954:	42a8      	cmp	r0, r5
 8012956:	d005      	beq.n	8012964 <TIM_OC1_SetConfig+0x38>
 8012958:	4d0d      	ldr	r5, [pc, #52]	; (8012990 <TIM_OC1_SetConfig+0x64>)
 801295a:	42a8      	cmp	r0, r5
 801295c:	d002      	beq.n	8012964 <TIM_OC1_SetConfig+0x38>
 801295e:	4d0d      	ldr	r5, [pc, #52]	; (8012994 <TIM_OC1_SetConfig+0x68>)
 8012960:	42a8      	cmp	r0, r5
 8012962:	d10b      	bne.n	801297c <TIM_OC1_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012964:	2508      	movs	r5, #8
 8012966:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012968:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801296a:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 801296c:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 801296e:	2504      	movs	r5, #4
 8012970:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012972:	4d09      	ldr	r5, [pc, #36]	; (8012998 <TIM_OC1_SetConfig+0x6c>)
 8012974:	402a      	ands	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8012976:	694d      	ldr	r5, [r1, #20]
 8012978:	4335      	orrs	r5, r6
 801297a:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801297c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801297e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8012980:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8012982:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012984:	6203      	str	r3, [r0, #32]
}
 8012986:	bd70      	pop	{r4, r5, r6, pc}
 8012988:	40012c00 	.word	0x40012c00
 801298c:	40014000 	.word	0x40014000
 8012990:	40014400 	.word	0x40014400
 8012994:	40014800 	.word	0x40014800
 8012998:	fffffcff 	.word	0xfffffcff

0801299c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801299c:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801299e:	2473      	movs	r4, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80129a0:	6a03      	ldr	r3, [r0, #32]
 80129a2:	4a17      	ldr	r2, [pc, #92]	; (8012a00 <TIM_OC3_SetConfig+0x64>)
 80129a4:	4013      	ands	r3, r2
 80129a6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80129a8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80129aa:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80129ac:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80129ae:	43a5      	bics	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80129b0:	680c      	ldr	r4, [r1, #0]
 80129b2:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80129b4:	4c13      	ldr	r4, [pc, #76]	; (8012a04 <TIM_OC3_SetConfig+0x68>)
 80129b6:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80129b8:	688c      	ldr	r4, [r1, #8]
 80129ba:	0224      	lsls	r4, r4, #8
 80129bc:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80129be:	4c12      	ldr	r4, [pc, #72]	; (8012a08 <TIM_OC3_SetConfig+0x6c>)
 80129c0:	42a0      	cmp	r0, r4
 80129c2:	d015      	beq.n	80129f0 <TIM_OC3_SetConfig+0x54>
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80129c4:	4c11      	ldr	r4, [pc, #68]	; (8012a0c <TIM_OC3_SetConfig+0x70>)
 80129c6:	42a0      	cmp	r0, r4
 80129c8:	d005      	beq.n	80129d6 <TIM_OC3_SetConfig+0x3a>
 80129ca:	4c11      	ldr	r4, [pc, #68]	; (8012a10 <TIM_OC3_SetConfig+0x74>)
 80129cc:	42a0      	cmp	r0, r4
 80129ce:	d002      	beq.n	80129d6 <TIM_OC3_SetConfig+0x3a>
 80129d0:	4c10      	ldr	r4, [pc, #64]	; (8012a14 <TIM_OC3_SetConfig+0x78>)
 80129d2:	42a0      	cmp	r0, r4
 80129d4:	d106      	bne.n	80129e4 <TIM_OC3_SetConfig+0x48>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80129d6:	4c10      	ldr	r4, [pc, #64]	; (8012a18 <TIM_OC3_SetConfig+0x7c>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80129d8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80129da:	4014      	ands	r4, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80129dc:	698a      	ldr	r2, [r1, #24]
 80129de:	4332      	orrs	r2, r6
 80129e0:	0112      	lsls	r2, r2, #4
 80129e2:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80129e4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80129e6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80129e8:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80129ea:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80129ec:	6203      	str	r3, [r0, #32]
}
 80129ee:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 80129f0:	4c0a      	ldr	r4, [pc, #40]	; (8012a1c <TIM_OC3_SetConfig+0x80>)
 80129f2:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80129f4:	68cb      	ldr	r3, [r1, #12]
 80129f6:	021b      	lsls	r3, r3, #8
 80129f8:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 80129fa:	4c09      	ldr	r4, [pc, #36]	; (8012a20 <TIM_OC3_SetConfig+0x84>)
 80129fc:	4023      	ands	r3, r4
 80129fe:	e7ea      	b.n	80129d6 <TIM_OC3_SetConfig+0x3a>
 8012a00:	fffffeff 	.word	0xfffffeff
 8012a04:	fffffdff 	.word	0xfffffdff
 8012a08:	40012c00 	.word	0x40012c00
 8012a0c:	40014000 	.word	0x40014000
 8012a10:	40014400 	.word	0x40014400
 8012a14:	40014800 	.word	0x40014800
 8012a18:	ffffcfff 	.word	0xffffcfff
 8012a1c:	fffff7ff 	.word	0xfffff7ff
 8012a20:	fffffbff 	.word	0xfffffbff

08012a24 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012a24:	6a03      	ldr	r3, [r0, #32]
 8012a26:	4a14      	ldr	r2, [pc, #80]	; (8012a78 <TIM_OC4_SetConfig+0x54>)
{
 8012a28:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012a2a:	4013      	ands	r3, r2
 8012a2c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012a2e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012a30:	4d12      	ldr	r5, [pc, #72]	; (8012a7c <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8012a32:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8012a34:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012a36:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8012a38:	680d      	ldr	r5, [r1, #0]
 8012a3a:	022d      	lsls	r5, r5, #8
 8012a3c:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012a3e:	4d10      	ldr	r5, [pc, #64]	; (8012a80 <TIM_OC4_SetConfig+0x5c>)
 8012a40:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8012a42:	688a      	ldr	r2, [r1, #8]
 8012a44:	0312      	lsls	r2, r2, #12
 8012a46:	432a      	orrs	r2, r5

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8012a48:	4d0e      	ldr	r5, [pc, #56]	; (8012a84 <TIM_OC4_SetConfig+0x60>)
 8012a4a:	42a8      	cmp	r0, r5
 8012a4c:	d008      	beq.n	8012a60 <TIM_OC4_SetConfig+0x3c>
 8012a4e:	4d0e      	ldr	r5, [pc, #56]	; (8012a88 <TIM_OC4_SetConfig+0x64>)
 8012a50:	42a8      	cmp	r0, r5
 8012a52:	d005      	beq.n	8012a60 <TIM_OC4_SetConfig+0x3c>
 8012a54:	4d0d      	ldr	r5, [pc, #52]	; (8012a8c <TIM_OC4_SetConfig+0x68>)
 8012a56:	42a8      	cmp	r0, r5
 8012a58:	d002      	beq.n	8012a60 <TIM_OC4_SetConfig+0x3c>
 8012a5a:	4d0d      	ldr	r5, [pc, #52]	; (8012a90 <TIM_OC4_SetConfig+0x6c>)
 8012a5c:	42a8      	cmp	r0, r5
 8012a5e:	d104      	bne.n	8012a6a <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012a60:	4d0c      	ldr	r5, [pc, #48]	; (8012a94 <TIM_OC4_SetConfig+0x70>)
 8012a62:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8012a64:	694d      	ldr	r5, [r1, #20]
 8012a66:	01ad      	lsls	r5, r5, #6
 8012a68:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012a6a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012a6c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8012a6e:	61c4      	str	r4, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8012a70:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012a72:	6202      	str	r2, [r0, #32]
}
 8012a74:	bd30      	pop	{r4, r5, pc}
 8012a76:	46c0      	nop			; (mov r8, r8)
 8012a78:	ffffefff 	.word	0xffffefff
 8012a7c:	ffff8cff 	.word	0xffff8cff
 8012a80:	ffffdfff 	.word	0xffffdfff
 8012a84:	40012c00 	.word	0x40012c00
 8012a88:	40014000 	.word	0x40014000
 8012a8c:	40014400 	.word	0x40014400
 8012a90:	40014800 	.word	0x40014800
 8012a94:	ffffbfff 	.word	0xffffbfff

08012a98 <HAL_TIM_Base_MspInit>:
}
 8012a98:	4770      	bx	lr
 8012a9a:	46c0      	nop			; (mov r8, r8)

08012a9c <HAL_TIM_Base_MspDeInit>:
 8012a9c:	4770      	bx	lr
 8012a9e:	46c0      	nop			; (mov r8, r8)

08012aa0 <HAL_TIM_Base_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8012aa0:	2339      	movs	r3, #57	; 0x39
 8012aa2:	2202      	movs	r2, #2
{
 8012aa4:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8012aa6:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 8012aa8:	6803      	ldr	r3, [r0, #0]
 8012aaa:	4a0b      	ldr	r2, [pc, #44]	; (8012ad8 <HAL_TIM_Base_DeInit+0x38>)
 8012aac:	6a19      	ldr	r1, [r3, #32]
{
 8012aae:	0004      	movs	r4, r0
  __HAL_TIM_DISABLE(htim);
 8012ab0:	4211      	tst	r1, r2
 8012ab2:	d107      	bne.n	8012ac4 <HAL_TIM_Base_DeInit+0x24>
 8012ab4:	6a19      	ldr	r1, [r3, #32]
 8012ab6:	4a09      	ldr	r2, [pc, #36]	; (8012adc <HAL_TIM_Base_DeInit+0x3c>)
 8012ab8:	4211      	tst	r1, r2
 8012aba:	d103      	bne.n	8012ac4 <HAL_TIM_Base_DeInit+0x24>
 8012abc:	2101      	movs	r1, #1
 8012abe:	681a      	ldr	r2, [r3, #0]
 8012ac0:	438a      	bics	r2, r1
 8012ac2:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 8012ac4:	0020      	movs	r0, r4
 8012ac6:	f7ff ffe9 	bl	8012a9c <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8012aca:	2300      	movs	r3, #0
 8012acc:	2239      	movs	r2, #57	; 0x39
 8012ace:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 8012ad0:	3a01      	subs	r2, #1
}
 8012ad2:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8012ad4:	54a3      	strb	r3, [r4, r2]
}
 8012ad6:	bd10      	pop	{r4, pc}
 8012ad8:	00001111 	.word	0x00001111
 8012adc:	00000444 	.word	0x00000444

08012ae0 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8012ae0:	2239      	movs	r2, #57	; 0x39
 8012ae2:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8012ae4:	2101      	movs	r1, #1
{
 8012ae6:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 8012ae8:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8012aea:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8012aec:	6823      	ldr	r3, [r4, #0]
 8012aee:	430b      	orrs	r3, r1
 8012af0:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 8012af2:	5481      	strb	r1, [r0, r2]
}
 8012af4:	2000      	movs	r0, #0
 8012af6:	bd10      	pop	{r4, pc}

08012af8 <HAL_TIM_OC_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8012af8:	2201      	movs	r2, #1
 8012afa:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012afc:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012afe:	6a19      	ldr	r1, [r3, #32]
 8012b00:	4391      	bics	r1, r2
 8012b02:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8012b04:	6a19      	ldr	r1, [r3, #32]
 8012b06:	430a      	orrs	r2, r1
 8012b08:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012b0a:	4a0b      	ldr	r2, [pc, #44]	; (8012b38 <HAL_TIM_OC_Start+0x40>)
 8012b0c:	4293      	cmp	r3, r2
 8012b0e:	d008      	beq.n	8012b22 <HAL_TIM_OC_Start+0x2a>
 8012b10:	4a0a      	ldr	r2, [pc, #40]	; (8012b3c <HAL_TIM_OC_Start+0x44>)
 8012b12:	4293      	cmp	r3, r2
 8012b14:	d005      	beq.n	8012b22 <HAL_TIM_OC_Start+0x2a>
 8012b16:	4a0a      	ldr	r2, [pc, #40]	; (8012b40 <HAL_TIM_OC_Start+0x48>)
 8012b18:	4293      	cmp	r3, r2
 8012b1a:	d002      	beq.n	8012b22 <HAL_TIM_OC_Start+0x2a>
 8012b1c:	4a09      	ldr	r2, [pc, #36]	; (8012b44 <HAL_TIM_OC_Start+0x4c>)
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d104      	bne.n	8012b2c <HAL_TIM_OC_Start+0x34>
    __HAL_TIM_MOE_ENABLE(htim);
 8012b22:	2280      	movs	r2, #128	; 0x80
 8012b24:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8012b26:	0212      	lsls	r2, r2, #8
 8012b28:	430a      	orrs	r2, r1
 8012b2a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8012b2c:	2101      	movs	r1, #1
 8012b2e:	681a      	ldr	r2, [r3, #0]
}
 8012b30:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8012b32:	430a      	orrs	r2, r1
 8012b34:	601a      	str	r2, [r3, #0]
}
 8012b36:	4770      	bx	lr
 8012b38:	40012c00 	.word	0x40012c00
 8012b3c:	40014000 	.word	0x40014000
 8012b40:	40014400 	.word	0x40014400
 8012b44:	40014800 	.word	0x40014800

08012b48 <HAL_TIM_PWM_MspInit>:
 8012b48:	4770      	bx	lr
 8012b4a:	46c0      	nop			; (mov r8, r8)

08012b4c <HAL_TIM_PWM_MspDeInit>:
 8012b4c:	4770      	bx	lr
 8012b4e:	46c0      	nop			; (mov r8, r8)

08012b50 <HAL_TIM_PWM_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8012b50:	2339      	movs	r3, #57	; 0x39
 8012b52:	2202      	movs	r2, #2
{
 8012b54:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8012b56:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 8012b58:	6803      	ldr	r3, [r0, #0]
 8012b5a:	4a0b      	ldr	r2, [pc, #44]	; (8012b88 <HAL_TIM_PWM_DeInit+0x38>)
 8012b5c:	6a19      	ldr	r1, [r3, #32]
{
 8012b5e:	0004      	movs	r4, r0
  __HAL_TIM_DISABLE(htim);
 8012b60:	4211      	tst	r1, r2
 8012b62:	d107      	bne.n	8012b74 <HAL_TIM_PWM_DeInit+0x24>
 8012b64:	6a19      	ldr	r1, [r3, #32]
 8012b66:	4a09      	ldr	r2, [pc, #36]	; (8012b8c <HAL_TIM_PWM_DeInit+0x3c>)
 8012b68:	4211      	tst	r1, r2
 8012b6a:	d103      	bne.n	8012b74 <HAL_TIM_PWM_DeInit+0x24>
 8012b6c:	2101      	movs	r1, #1
 8012b6e:	681a      	ldr	r2, [r3, #0]
 8012b70:	438a      	bics	r2, r1
 8012b72:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 8012b74:	0020      	movs	r0, r4
 8012b76:	f7ff ffe9 	bl	8012b4c <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	2239      	movs	r2, #57	; 0x39
 8012b7e:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 8012b80:	3a01      	subs	r2, #1
}
 8012b82:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8012b84:	54a3      	strb	r3, [r4, r2]
}
 8012b86:	bd10      	pop	{r4, pc}
 8012b88:	00001111 	.word	0x00001111
 8012b8c:	00000444 	.word	0x00000444

08012b90 <HAL_TIM_PWM_Start>:
 8012b90:	b510      	push	{r4, lr}
 8012b92:	f7ff ffb1 	bl	8012af8 <HAL_TIM_OC_Start>
 8012b96:	bd10      	pop	{r4, pc}

08012b98 <HAL_TIM_PWM_Stop>:
{
 8012b98:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8012b9a:	2401      	movs	r4, #1
 8012b9c:	408c      	lsls	r4, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012b9e:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8012ba0:	6a1a      	ldr	r2, [r3, #32]
 8012ba2:	43a2      	bics	r2, r4
 8012ba4:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8012ba6:	6a1a      	ldr	r2, [r3, #32]
 8012ba8:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012baa:	4a15      	ldr	r2, [pc, #84]	; (8012c00 <HAL_TIM_PWM_Stop+0x68>)
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d019      	beq.n	8012be4 <HAL_TIM_PWM_Stop+0x4c>
 8012bb0:	4a14      	ldr	r2, [pc, #80]	; (8012c04 <HAL_TIM_PWM_Stop+0x6c>)
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	d016      	beq.n	8012be4 <HAL_TIM_PWM_Stop+0x4c>
 8012bb6:	4a14      	ldr	r2, [pc, #80]	; (8012c08 <HAL_TIM_PWM_Stop+0x70>)
 8012bb8:	4293      	cmp	r3, r2
 8012bba:	d013      	beq.n	8012be4 <HAL_TIM_PWM_Stop+0x4c>
 8012bbc:	4a13      	ldr	r2, [pc, #76]	; (8012c0c <HAL_TIM_PWM_Stop+0x74>)
 8012bbe:	4293      	cmp	r3, r2
 8012bc0:	d010      	beq.n	8012be4 <HAL_TIM_PWM_Stop+0x4c>
  __HAL_TIM_DISABLE(htim);
 8012bc2:	6a19      	ldr	r1, [r3, #32]
 8012bc4:	4a12      	ldr	r2, [pc, #72]	; (8012c10 <HAL_TIM_PWM_Stop+0x78>)
 8012bc6:	4211      	tst	r1, r2
 8012bc8:	d107      	bne.n	8012bda <HAL_TIM_PWM_Stop+0x42>
 8012bca:	6a19      	ldr	r1, [r3, #32]
 8012bcc:	4a11      	ldr	r2, [pc, #68]	; (8012c14 <HAL_TIM_PWM_Stop+0x7c>)
 8012bce:	4211      	tst	r1, r2
 8012bd0:	d103      	bne.n	8012bda <HAL_TIM_PWM_Stop+0x42>
 8012bd2:	2101      	movs	r1, #1
 8012bd4:	681a      	ldr	r2, [r3, #0]
 8012bd6:	438a      	bics	r2, r1
 8012bd8:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8012bda:	2339      	movs	r3, #57	; 0x39
 8012bdc:	2201      	movs	r2, #1
 8012bde:	54c2      	strb	r2, [r0, r3]
}
 8012be0:	2000      	movs	r0, #0
 8012be2:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8012be4:	6a19      	ldr	r1, [r3, #32]
 8012be6:	4a0a      	ldr	r2, [pc, #40]	; (8012c10 <HAL_TIM_PWM_Stop+0x78>)
 8012be8:	4211      	tst	r1, r2
 8012bea:	d1ea      	bne.n	8012bc2 <HAL_TIM_PWM_Stop+0x2a>
 8012bec:	6a19      	ldr	r1, [r3, #32]
 8012bee:	4a09      	ldr	r2, [pc, #36]	; (8012c14 <HAL_TIM_PWM_Stop+0x7c>)
 8012bf0:	4211      	tst	r1, r2
 8012bf2:	d1e6      	bne.n	8012bc2 <HAL_TIM_PWM_Stop+0x2a>
 8012bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012bf6:	4908      	ldr	r1, [pc, #32]	; (8012c18 <HAL_TIM_PWM_Stop+0x80>)
 8012bf8:	400a      	ands	r2, r1
 8012bfa:	645a      	str	r2, [r3, #68]	; 0x44
 8012bfc:	e7e1      	b.n	8012bc2 <HAL_TIM_PWM_Stop+0x2a>
 8012bfe:	46c0      	nop			; (mov r8, r8)
 8012c00:	40012c00 	.word	0x40012c00
 8012c04:	40014000 	.word	0x40014000
 8012c08:	40014400 	.word	0x40014400
 8012c0c:	40014800 	.word	0x40014800
 8012c10:	00001111 	.word	0x00001111
 8012c14:	00000444 	.word	0x00000444
 8012c18:	ffff7fff 	.word	0xffff7fff

08012c1c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8012c1c:	2338      	movs	r3, #56	; 0x38
{
 8012c1e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8012c20:	5cc2      	ldrb	r2, [r0, r3]
 8012c22:	2a01      	cmp	r2, #1
 8012c24:	d067      	beq.n	8012cf6 <HAL_TIM_ConfigClockSource+0xda>
 8012c26:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8012c28:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 8012c2a:	54c4      	strb	r4, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8012c30:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012c32:	4d5a      	ldr	r5, [pc, #360]	; (8012d9c <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr = htim->Instance->SMCR;
 8012c34:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012c36:	402a      	ands	r2, r5
  htim->Instance->SMCR = tmpsmcr;
 8012c38:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8012c3a:	680a      	ldr	r2, [r1, #0]
 8012c3c:	2a40      	cmp	r2, #64	; 0x40
 8012c3e:	d100      	bne.n	8012c42 <HAL_TIM_ConfigClockSource+0x26>
 8012c40:	e095      	b.n	8012d6e <HAL_TIM_ConfigClockSource+0x152>
 8012c42:	d91d      	bls.n	8012c80 <HAL_TIM_ConfigClockSource+0x64>
 8012c44:	2a70      	cmp	r2, #112	; 0x70
 8012c46:	d100      	bne.n	8012c4a <HAL_TIM_ConfigClockSource+0x2e>
 8012c48:	e081      	b.n	8012d4e <HAL_TIM_ConfigClockSource+0x132>
 8012c4a:	d92e      	bls.n	8012caa <HAL_TIM_ConfigClockSource+0x8e>
 8012c4c:	2480      	movs	r4, #128	; 0x80
 8012c4e:	0164      	lsls	r4, r4, #5
 8012c50:	42a2      	cmp	r2, r4
 8012c52:	d100      	bne.n	8012c56 <HAL_TIM_ConfigClockSource+0x3a>
 8012c54:	e076      	b.n	8012d44 <HAL_TIM_ConfigClockSource+0x128>
 8012c56:	2480      	movs	r4, #128	; 0x80
 8012c58:	01a4      	lsls	r4, r4, #6
 8012c5a:	42a2      	cmp	r2, r4
 8012c5c:	d11d      	bne.n	8012c9a <HAL_TIM_ConfigClockSource+0x7e>
  tmpsmcr = TIMx->SMCR;
 8012c5e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012c60:	4c4f      	ldr	r4, [pc, #316]	; (8012da0 <HAL_TIM_ConfigClockSource+0x184>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8012c62:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012c64:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8012c66:	688a      	ldr	r2, [r1, #8]
 8012c68:	68c9      	ldr	r1, [r1, #12]
 8012c6a:	432a      	orrs	r2, r5
 8012c6c:	0209      	lsls	r1, r1, #8
 8012c6e:	430a      	orrs	r2, r1
 8012c70:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8012c72:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012c74:	2280      	movs	r2, #128	; 0x80
 8012c76:	6899      	ldr	r1, [r3, #8]
 8012c78:	01d2      	lsls	r2, r2, #7
 8012c7a:	430a      	orrs	r2, r1
 8012c7c:	609a      	str	r2, [r3, #8]
    break;
 8012c7e:	e00c      	b.n	8012c9a <HAL_TIM_ConfigClockSource+0x7e>
  switch (sClockSourceConfig->ClockSource)
 8012c80:	2a10      	cmp	r2, #16
 8012c82:	d041      	beq.n	8012d08 <HAL_TIM_ConfigClockSource+0xec>
 8012c84:	d92e      	bls.n	8012ce4 <HAL_TIM_ConfigClockSource+0xc8>
 8012c86:	2a20      	cmp	r2, #32
 8012c88:	d037      	beq.n	8012cfa <HAL_TIM_ConfigClockSource+0xde>
 8012c8a:	2a30      	cmp	r2, #48	; 0x30
 8012c8c:	d105      	bne.n	8012c9a <HAL_TIM_ConfigClockSource+0x7e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8012c8e:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8012c90:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012c92:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012c94:	3939      	subs	r1, #57	; 0x39
 8012c96:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8012c98:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8012c9a:	2339      	movs	r3, #57	; 0x39
 8012c9c:	2201      	movs	r2, #1
 8012c9e:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	3b01      	subs	r3, #1
 8012ca4:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8012ca6:	2000      	movs	r0, #0
}
 8012ca8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8012caa:	2a50      	cmp	r2, #80	; 0x50
 8012cac:	d033      	beq.n	8012d16 <HAL_TIM_ConfigClockSource+0xfa>
 8012cae:	2a60      	cmp	r2, #96	; 0x60
 8012cb0:	d1f3      	bne.n	8012c9a <HAL_TIM_ConfigClockSource+0x7e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012cb2:	2510      	movs	r5, #16
 8012cb4:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012cb6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012cb8:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012cba:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012cbc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012cbe:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012cc0:	4e38      	ldr	r6, [pc, #224]	; (8012da4 <HAL_TIM_ConfigClockSource+0x188>)
  tmpccmr1 |= (TIM_ICFilter << 12);
 8012cc2:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012cc4:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12);
 8012cc6:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012cc8:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8012cca:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8012ccc:	6199      	str	r1, [r3, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012cce:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012cd0:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4);
 8012cd2:	0112      	lsls	r2, r2, #4
 8012cd4:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 8012cd6:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8012cd8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012cda:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012cdc:	3909      	subs	r1, #9
 8012cde:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8012ce0:	609a      	str	r2, [r3, #8]
 8012ce2:	e7da      	b.n	8012c9a <HAL_TIM_ConfigClockSource+0x7e>
  switch (sClockSourceConfig->ClockSource)
 8012ce4:	2a00      	cmp	r2, #0
 8012ce6:	d1d8      	bne.n	8012c9a <HAL_TIM_ConfigClockSource+0x7e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8012ce8:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8012cea:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012cec:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012cee:	3969      	subs	r1, #105	; 0x69
 8012cf0:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8012cf2:	609a      	str	r2, [r3, #8]
 8012cf4:	e7d1      	b.n	8012c9a <HAL_TIM_ConfigClockSource+0x7e>
  __HAL_LOCK(htim);
 8012cf6:	2002      	movs	r0, #2
 8012cf8:	e7d6      	b.n	8012ca8 <HAL_TIM_ConfigClockSource+0x8c>
   tmpsmcr &= ~TIM_SMCR_TS;
 8012cfa:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8012cfc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012cfe:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012d00:	3949      	subs	r1, #73	; 0x49
 8012d02:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8012d04:	609a      	str	r2, [r3, #8]
 8012d06:	e7c8      	b.n	8012c9a <HAL_TIM_ConfigClockSource+0x7e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8012d08:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8012d0a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012d0c:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012d0e:	3959      	subs	r1, #89	; 0x59
 8012d10:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8012d12:	609a      	str	r2, [r3, #8]
 8012d14:	e7c1      	b.n	8012c9a <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012d16:	684d      	ldr	r5, [r1, #4]
 8012d18:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8012d1a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012d1c:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8012d1e:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012d20:	43a6      	bics	r6, r4
 8012d22:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012d24:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8012d26:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012d28:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 8012d2a:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012d2c:	240a      	movs	r4, #10
 8012d2e:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8012d30:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8012d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012d34:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012d36:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8012d38:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012d3a:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012d3c:	3919      	subs	r1, #25
 8012d3e:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8012d40:	609a      	str	r2, [r3, #8]
 8012d42:	e7aa      	b.n	8012c9a <HAL_TIM_ConfigClockSource+0x7e>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8012d44:	2107      	movs	r1, #7
 8012d46:	689a      	ldr	r2, [r3, #8]
 8012d48:	438a      	bics	r2, r1
 8012d4a:	609a      	str	r2, [r3, #8]
    break;
 8012d4c:	e7a5      	b.n	8012c9a <HAL_TIM_ConfigClockSource+0x7e>
  tmpsmcr = TIMx->SMCR;
 8012d4e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012d50:	4c13      	ldr	r4, [pc, #76]	; (8012da0 <HAL_TIM_ConfigClockSource+0x184>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8012d52:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012d54:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8012d56:	688a      	ldr	r2, [r1, #8]
 8012d58:	68c9      	ldr	r1, [r1, #12]
 8012d5a:	432a      	orrs	r2, r5
 8012d5c:	0209      	lsls	r1, r1, #8
 8012d5e:	430a      	orrs	r2, r1
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012d60:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8012d62:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8012d64:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8012d66:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012d68:	430a      	orrs	r2, r1
      htim->Instance->SMCR = tmpsmcr;
 8012d6a:	609a      	str	r2, [r3, #8]
    break;
 8012d6c:	e795      	b.n	8012c9a <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012d6e:	684d      	ldr	r5, [r1, #4]
 8012d70:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8012d72:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012d74:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8012d76:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012d78:	43a6      	bics	r6, r4
 8012d7a:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012d7c:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8012d7e:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012d80:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 8012d82:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012d84:	240a      	movs	r4, #10
 8012d86:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8012d88:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8012d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012d8c:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012d8e:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8012d90:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012d92:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012d94:	3929      	subs	r1, #41	; 0x29
 8012d96:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8012d98:	609a      	str	r2, [r3, #8]
 8012d9a:	e77e      	b.n	8012c9a <HAL_TIM_ConfigClockSource+0x7e>
 8012d9c:	ffff0088 	.word	0xffff0088
 8012da0:	ffff00ff 	.word	0xffff00ff
 8012da4:	ffff0fff 	.word	0xffff0fff

08012da8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012da8:	4a22      	ldr	r2, [pc, #136]	; (8012e34 <TIM_Base_SetConfig+0x8c>)
{
 8012daa:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 8012dac:	6803      	ldr	r3, [r0, #0]
 8012dae:	688d      	ldr	r5, [r1, #8]
 8012db0:	680c      	ldr	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012db2:	4290      	cmp	r0, r2
 8012db4:	d02c      	beq.n	8012e10 <TIM_Base_SetConfig+0x68>
 8012db6:	2280      	movs	r2, #128	; 0x80
 8012db8:	05d2      	lsls	r2, r2, #23
 8012dba:	4290      	cmp	r0, r2
 8012dbc:	d012      	beq.n	8012de4 <TIM_Base_SetConfig+0x3c>
 8012dbe:	4a1e      	ldr	r2, [pc, #120]	; (8012e38 <TIM_Base_SetConfig+0x90>)
 8012dc0:	4290      	cmp	r0, r2
 8012dc2:	d00f      	beq.n	8012de4 <TIM_Base_SetConfig+0x3c>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012dc4:	4a1d      	ldr	r2, [pc, #116]	; (8012e3c <TIM_Base_SetConfig+0x94>)
 8012dc6:	4290      	cmp	r0, r2
 8012dc8:	d02e      	beq.n	8012e28 <TIM_Base_SetConfig+0x80>
 8012dca:	4a1d      	ldr	r2, [pc, #116]	; (8012e40 <TIM_Base_SetConfig+0x98>)
 8012dcc:	4290      	cmp	r0, r2
 8012dce:	d023      	beq.n	8012e18 <TIM_Base_SetConfig+0x70>
 8012dd0:	4a1c      	ldr	r2, [pc, #112]	; (8012e44 <TIM_Base_SetConfig+0x9c>)
 8012dd2:	4290      	cmp	r0, r2
 8012dd4:	d020      	beq.n	8012e18 <TIM_Base_SetConfig+0x70>
 8012dd6:	4a1c      	ldr	r2, [pc, #112]	; (8012e48 <TIM_Base_SetConfig+0xa0>)
 8012dd8:	4290      	cmp	r0, r2
 8012dda:	d01d      	beq.n	8012e18 <TIM_Base_SetConfig+0x70>
  TIMx->CR1 = tmpcr1;
 8012ddc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012dde:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012de0:	6284      	str	r4, [r0, #40]	; 0x28
 8012de2:	e012      	b.n	8012e0a <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012de4:	2270      	movs	r2, #112	; 0x70
 8012de6:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012de8:	684a      	ldr	r2, [r1, #4]
 8012dea:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012dec:	4a17      	ldr	r2, [pc, #92]	; (8012e4c <TIM_Base_SetConfig+0xa4>)
 8012dee:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012df0:	68ca      	ldr	r2, [r1, #12]
 8012df2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012df4:	6003      	str	r3, [r0, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012df6:	4b13      	ldr	r3, [pc, #76]	; (8012e44 <TIM_Base_SetConfig+0x9c>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012df8:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012dfa:	6284      	str	r4, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012dfc:	4298      	cmp	r0, r3
 8012dfe:	d002      	beq.n	8012e06 <TIM_Base_SetConfig+0x5e>
 8012e00:	4b11      	ldr	r3, [pc, #68]	; (8012e48 <TIM_Base_SetConfig+0xa0>)
 8012e02:	4298      	cmp	r0, r3
 8012e04:	d101      	bne.n	8012e0a <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 8012e06:	690b      	ldr	r3, [r1, #16]
 8012e08:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8012e0a:	2301      	movs	r3, #1
 8012e0c:	6143      	str	r3, [r0, #20]
}
 8012e0e:	bd30      	pop	{r4, r5, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012e10:	2270      	movs	r2, #112	; 0x70
 8012e12:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012e14:	684a      	ldr	r2, [r1, #4]
 8012e16:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012e18:	4a0c      	ldr	r2, [pc, #48]	; (8012e4c <TIM_Base_SetConfig+0xa4>)
 8012e1a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e1c:	68ca      	ldr	r2, [r1, #12]
 8012e1e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012e20:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012e22:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012e24:	6284      	str	r4, [r0, #40]	; 0x28
 8012e26:	e7ee      	b.n	8012e06 <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012e28:	4a08      	ldr	r2, [pc, #32]	; (8012e4c <TIM_Base_SetConfig+0xa4>)
 8012e2a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e2c:	68ca      	ldr	r2, [r1, #12]
 8012e2e:	4313      	orrs	r3, r2
 8012e30:	e7d4      	b.n	8012ddc <TIM_Base_SetConfig+0x34>
 8012e32:	46c0      	nop			; (mov r8, r8)
 8012e34:	40012c00 	.word	0x40012c00
 8012e38:	40000400 	.word	0x40000400
 8012e3c:	40002000 	.word	0x40002000
 8012e40:	40014000 	.word	0x40014000
 8012e44:	40014400 	.word	0x40014400
 8012e48:	40014800 	.word	0x40014800
 8012e4c:	fffffcff 	.word	0xfffffcff

08012e50 <HAL_TIM_Base_Init>:
{
 8012e50:	b570      	push	{r4, r5, r6, lr}
 8012e52:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012e54:	d014      	beq.n	8012e80 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012e56:	2339      	movs	r3, #57	; 0x39
 8012e58:	5cc3      	ldrb	r3, [r0, r3]
 8012e5a:	b2db      	uxtb	r3, r3
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d00a      	beq.n	8012e76 <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8012e60:	2302      	movs	r3, #2
 8012e62:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012e64:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8012e66:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012e68:	1d21      	adds	r1, r4, #4
 8012e6a:	f7ff ff9d 	bl	8012da8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012e6e:	2301      	movs	r3, #1
  return HAL_OK;
 8012e70:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8012e72:	5563      	strb	r3, [r4, r5]
}
 8012e74:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012e76:	2238      	movs	r2, #56	; 0x38
 8012e78:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 8012e7a:	f7ff fe0d 	bl	8012a98 <HAL_TIM_Base_MspInit>
 8012e7e:	e7ef      	b.n	8012e60 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8012e80:	2001      	movs	r0, #1
 8012e82:	e7f7      	b.n	8012e74 <HAL_TIM_Base_Init+0x24>

08012e84 <HAL_TIM_PWM_Init>:
{
 8012e84:	b570      	push	{r4, r5, r6, lr}
 8012e86:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012e88:	d014      	beq.n	8012eb4 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012e8a:	2339      	movs	r3, #57	; 0x39
 8012e8c:	5cc3      	ldrb	r3, [r0, r3]
 8012e8e:	b2db      	uxtb	r3, r3
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d00a      	beq.n	8012eaa <HAL_TIM_PWM_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8012e94:	2302      	movs	r3, #2
 8012e96:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012e98:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8012e9a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012e9c:	1d21      	adds	r1, r4, #4
 8012e9e:	f7ff ff83 	bl	8012da8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012ea2:	2301      	movs	r3, #1
  return HAL_OK;
 8012ea4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8012ea6:	5563      	strb	r3, [r4, r5]
}
 8012ea8:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012eaa:	2238      	movs	r2, #56	; 0x38
 8012eac:	5483      	strb	r3, [r0, r2]
    HAL_TIM_PWM_MspInit(htim);
 8012eae:	f7ff fe4b 	bl	8012b48 <HAL_TIM_PWM_MspInit>
 8012eb2:	e7ef      	b.n	8012e94 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8012eb4:	2001      	movs	r0, #1
 8012eb6:	e7f7      	b.n	8012ea8 <HAL_TIM_PWM_Init+0x24>

08012eb8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012eb8:	2210      	movs	r2, #16
 8012eba:	6a03      	ldr	r3, [r0, #32]
{
 8012ebc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012ebe:	4393      	bics	r3, r2
 8012ec0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8012ec2:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012ec4:	4c16      	ldr	r4, [pc, #88]	; (8012f20 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8012ec6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8012ec8:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012eca:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8);
 8012ecc:	680c      	ldr	r4, [r1, #0]
 8012ece:	0224      	lsls	r4, r4, #8
 8012ed0:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8012ed2:	2420      	movs	r4, #32
 8012ed4:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4);
 8012ed6:	688c      	ldr	r4, [r1, #8]
 8012ed8:	0124      	lsls	r4, r4, #4
 8012eda:	4322      	orrs	r2, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012edc:	4c11      	ldr	r4, [pc, #68]	; (8012f24 <TIM_OC2_SetConfig+0x6c>)
 8012ede:	42a0      	cmp	r0, r4
 8012ee0:	d015      	beq.n	8012f0e <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8012ee2:	4c11      	ldr	r4, [pc, #68]	; (8012f28 <TIM_OC2_SetConfig+0x70>)
 8012ee4:	42a0      	cmp	r0, r4
 8012ee6:	d005      	beq.n	8012ef4 <TIM_OC2_SetConfig+0x3c>
 8012ee8:	4c10      	ldr	r4, [pc, #64]	; (8012f2c <TIM_OC2_SetConfig+0x74>)
 8012eea:	42a0      	cmp	r0, r4
 8012eec:	d002      	beq.n	8012ef4 <TIM_OC2_SetConfig+0x3c>
 8012eee:	4c10      	ldr	r4, [pc, #64]	; (8012f30 <TIM_OC2_SetConfig+0x78>)
 8012ef0:	42a0      	cmp	r0, r4
 8012ef2:	d106      	bne.n	8012f02 <TIM_OC2_SetConfig+0x4a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012ef4:	4c0f      	ldr	r4, [pc, #60]	; (8012f34 <TIM_OC2_SetConfig+0x7c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8012ef6:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012ef8:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8012efa:	698b      	ldr	r3, [r1, #24]
 8012efc:	4333      	orrs	r3, r6
 8012efe:	009b      	lsls	r3, r3, #2
 8012f00:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 8012f02:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8012f04:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8012f06:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8012f08:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8012f0a:	6202      	str	r2, [r0, #32]
}
 8012f0c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8012f0e:	2480      	movs	r4, #128	; 0x80
 8012f10:	43a2      	bics	r2, r4
 8012f12:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8012f14:	68ca      	ldr	r2, [r1, #12]
 8012f16:	0112      	lsls	r2, r2, #4
 8012f18:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 8012f1a:	2440      	movs	r4, #64	; 0x40
 8012f1c:	43a2      	bics	r2, r4
 8012f1e:	e7e9      	b.n	8012ef4 <TIM_OC2_SetConfig+0x3c>
 8012f20:	ffff8cff 	.word	0xffff8cff
 8012f24:	40012c00 	.word	0x40012c00
 8012f28:	40014000 	.word	0x40014000
 8012f2c:	40014400 	.word	0x40014400
 8012f30:	40014800 	.word	0x40014800
 8012f34:	fffff3ff 	.word	0xfffff3ff

08012f38 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8012f38:	2338      	movs	r3, #56	; 0x38
{
 8012f3a:	b570      	push	{r4, r5, r6, lr}
 8012f3c:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8012f3e:	5cc2      	ldrb	r2, [r0, r3]
{
 8012f40:	0004      	movs	r4, r0
 8012f42:	000e      	movs	r6, r1
  __HAL_LOCK(htim);
 8012f44:	2a01      	cmp	r2, #1
 8012f46:	d038      	beq.n	8012fba <HAL_TIM_PWM_ConfigChannel+0x82>
 8012f48:	2201      	movs	r2, #1
 8012f4a:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	3201      	adds	r2, #1
 8012f50:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8012f52:	2d04      	cmp	r5, #4
 8012f54:	d043      	beq.n	8012fde <HAL_TIM_PWM_ConfigChannel+0xa6>
 8012f56:	d91d      	bls.n	8012f94 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8012f58:	2d08      	cmp	r5, #8
 8012f5a:	d030      	beq.n	8012fbe <HAL_TIM_PWM_ConfigChannel+0x86>
 8012f5c:	2d0c      	cmp	r5, #12
 8012f5e:	d111      	bne.n	8012f84 <HAL_TIM_PWM_ConfigChannel+0x4c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012f60:	6800      	ldr	r0, [r0, #0]
 8012f62:	f7ff fd5f 	bl	8012a24 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012f66:	2280      	movs	r2, #128	; 0x80
 8012f68:	6823      	ldr	r3, [r4, #0]
 8012f6a:	0112      	lsls	r2, r2, #4
 8012f6c:	69d9      	ldr	r1, [r3, #28]
 8012f6e:	430a      	orrs	r2, r1
 8012f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012f72:	69da      	ldr	r2, [r3, #28]
 8012f74:	4923      	ldr	r1, [pc, #140]	; (8013004 <HAL_TIM_PWM_ConfigChannel+0xcc>)
 8012f76:	400a      	ands	r2, r1
 8012f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8012f7a:	6932      	ldr	r2, [r6, #16]
 8012f7c:	69d9      	ldr	r1, [r3, #28]
 8012f7e:	0212      	lsls	r2, r2, #8
 8012f80:	430a      	orrs	r2, r1
 8012f82:	61da      	str	r2, [r3, #28]
  htim->State = HAL_TIM_STATE_READY;
 8012f84:	2339      	movs	r3, #57	; 0x39
 8012f86:	2201      	movs	r2, #1
 8012f88:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8012f8a:	2200      	movs	r2, #0
  return HAL_OK;
 8012f8c:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8012f8e:	3b01      	subs	r3, #1
 8012f90:	54e2      	strb	r2, [r4, r3]
}
 8012f92:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8012f94:	2d00      	cmp	r5, #0
 8012f96:	d1f5      	bne.n	8012f84 <HAL_TIM_PWM_ConfigChannel+0x4c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012f98:	6800      	ldr	r0, [r0, #0]
 8012f9a:	f7ff fcc7 	bl	801292c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012f9e:	2108      	movs	r1, #8
 8012fa0:	6823      	ldr	r3, [r4, #0]
 8012fa2:	699a      	ldr	r2, [r3, #24]
 8012fa4:	430a      	orrs	r2, r1
 8012fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012fa8:	699a      	ldr	r2, [r3, #24]
 8012faa:	3904      	subs	r1, #4
 8012fac:	438a      	bics	r2, r1
 8012fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012fb0:	699a      	ldr	r2, [r3, #24]
 8012fb2:	6931      	ldr	r1, [r6, #16]
 8012fb4:	430a      	orrs	r2, r1
 8012fb6:	619a      	str	r2, [r3, #24]
    break;
 8012fb8:	e7e4      	b.n	8012f84 <HAL_TIM_PWM_ConfigChannel+0x4c>
  __HAL_LOCK(htim);
 8012fba:	2002      	movs	r0, #2
 8012fbc:	e7e9      	b.n	8012f92 <HAL_TIM_PWM_ConfigChannel+0x5a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012fbe:	6800      	ldr	r0, [r0, #0]
 8012fc0:	f7ff fcec 	bl	801299c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012fc4:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012fc6:	6823      	ldr	r3, [r4, #0]
 8012fc8:	69da      	ldr	r2, [r3, #28]
 8012fca:	4315      	orrs	r5, r2
 8012fcc:	61dd      	str	r5, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012fce:	69da      	ldr	r2, [r3, #28]
 8012fd0:	438a      	bics	r2, r1
 8012fd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012fd4:	69da      	ldr	r2, [r3, #28]
 8012fd6:	6931      	ldr	r1, [r6, #16]
 8012fd8:	430a      	orrs	r2, r1
 8012fda:	61da      	str	r2, [r3, #28]
    break;
 8012fdc:	e7d2      	b.n	8012f84 <HAL_TIM_PWM_ConfigChannel+0x4c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012fde:	6800      	ldr	r0, [r0, #0]
 8012fe0:	f7ff ff6a 	bl	8012eb8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012fe4:	2280      	movs	r2, #128	; 0x80
 8012fe6:	6823      	ldr	r3, [r4, #0]
 8012fe8:	0112      	lsls	r2, r2, #4
 8012fea:	6999      	ldr	r1, [r3, #24]
 8012fec:	430a      	orrs	r2, r1
 8012fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012ff0:	699a      	ldr	r2, [r3, #24]
 8012ff2:	4904      	ldr	r1, [pc, #16]	; (8013004 <HAL_TIM_PWM_ConfigChannel+0xcc>)
 8012ff4:	400a      	ands	r2, r1
 8012ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8012ff8:	6932      	ldr	r2, [r6, #16]
 8012ffa:	6999      	ldr	r1, [r3, #24]
 8012ffc:	0212      	lsls	r2, r2, #8
 8012ffe:	430a      	orrs	r2, r1
 8013000:	619a      	str	r2, [r3, #24]
    break;
 8013002:	e7bf      	b.n	8012f84 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8013004:	fffffbff 	.word	0xfffffbff

08013008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8013008:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 801300a:	2438      	movs	r4, #56	; 0x38
 801300c:	5d03      	ldrb	r3, [r0, r4]
 801300e:	2b01      	cmp	r3, #1
 8013010:	d019      	beq.n	8013046 <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 8013012:	2539      	movs	r5, #57	; 0x39
 8013014:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8013016:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8013018:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801301a:	6803      	ldr	r3, [r0, #0]
 801301c:	685a      	ldr	r2, [r3, #4]
 801301e:	43b2      	bics	r2, r6
 8013020:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8013022:	685a      	ldr	r2, [r3, #4]
 8013024:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8013026:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8013028:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801302a:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 801302c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801302e:	689a      	ldr	r2, [r3, #8]
 8013030:	43b2      	bics	r2, r6
 8013032:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8013034:	689a      	ldr	r2, [r3, #8]
 8013036:	430a      	orrs	r2, r1
 8013038:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 801303a:	2301      	movs	r3, #1
 801303c:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 801303e:	2300      	movs	r3, #0
 8013040:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 8013042:	2000      	movs	r0, #0
}
 8013044:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8013046:	2002      	movs	r0, #2
 8013048:	e7fc      	b.n	8013044 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 801304a:	46c0      	nop			; (mov r8, r8)

0801304c <HAL_UART_MspDeInit>:
 801304c:	4770      	bx	lr
 801304e:	46c0      	nop			; (mov r8, r8)

08013050 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8013050:	b570      	push	{r4, r5, r6, lr}
 8013052:	0004      	movs	r4, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8013054:	2001      	movs	r0, #1
  if(huart == NULL)
 8013056:	2c00      	cmp	r4, #0
 8013058:	d012      	beq.n	8013080 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 801305a:	2669      	movs	r6, #105	; 0x69
 801305c:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0;
 801305e:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 8013060:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8013062:	6823      	ldr	r3, [r4, #0]
 8013064:	681a      	ldr	r2, [r3, #0]
 8013066:	4382      	bics	r2, r0
 8013068:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0;
  huart->Instance->CR3 = 0x0;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801306a:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0;
 801306c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 801306e:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8013070:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8013072:	f7ff ffeb 	bl	801304c <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8013076:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 8013078:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801307a:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 801307c:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 801307e:	54e5      	strb	r5, [r4, r3]
}
 8013080:	bd70      	pop	{r4, r5, r6, pc}
 8013082:	46c0      	nop			; (mov r8, r8)

08013084 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013084:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013086:	2069      	movs	r0, #105	; 0x69
{
 8013088:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801308a:	5c1c      	ldrb	r4, [r3, r0]
 801308c:	2c01      	cmp	r4, #1
 801308e:	d003      	beq.n	8013098 <HAL_UART_Transmit_IT+0x14>
 8013090:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013092:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013094:	2c22      	cmp	r4, #34	; 0x22
 8013096:	d122      	bne.n	80130de <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 8013098:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801309a:	2900      	cmp	r1, #0
 801309c:	d01f      	beq.n	80130de <HAL_UART_Transmit_IT+0x5a>
 801309e:	2a00      	cmp	r2, #0
 80130a0:	d01d      	beq.n	80130de <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 80130a2:	2468      	movs	r4, #104	; 0x68
 80130a4:	5d1d      	ldrb	r5, [r3, r4]
 80130a6:	2d01      	cmp	r5, #1
 80130a8:	d01d      	beq.n	80130e6 <HAL_UART_Transmit_IT+0x62>
 80130aa:	5518      	strb	r0, [r3, r4]
    huart->pTxBuffPtr = pData;
 80130ac:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 80130ae:	2150      	movs	r1, #80	; 0x50
 80130b0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80130b2:	3102      	adds	r1, #2
 80130b4:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80130b6:	2200      	movs	r2, #0
 80130b8:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80130ba:	3269      	adds	r2, #105	; 0x69
 80130bc:	5c99      	ldrb	r1, [r3, r2]
 80130be:	2922      	cmp	r1, #34	; 0x22
 80130c0:	d00e      	beq.n	80130e0 <HAL_UART_Transmit_IT+0x5c>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80130c2:	2112      	movs	r1, #18
 80130c4:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80130c6:	2001      	movs	r0, #1
 80130c8:	681a      	ldr	r2, [r3, #0]
 80130ca:	6891      	ldr	r1, [r2, #8]
 80130cc:	4301      	orrs	r1, r0
 80130ce:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 80130d0:	2000      	movs	r0, #0
 80130d2:	2168      	movs	r1, #104	; 0x68
 80130d4:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80130d6:	6813      	ldr	r3, [r2, #0]
 80130d8:	3118      	adds	r1, #24
 80130da:	430b      	orrs	r3, r1
 80130dc:	6013      	str	r3, [r2, #0]
  }
}
 80130de:	bd30      	pop	{r4, r5, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80130e0:	3110      	adds	r1, #16
 80130e2:	5499      	strb	r1, [r3, r2]
 80130e4:	e7ef      	b.n	80130c6 <HAL_UART_Transmit_IT+0x42>
    return HAL_BUSY;
 80130e6:	2002      	movs	r0, #2
 80130e8:	e7f9      	b.n	80130de <HAL_UART_Transmit_IT+0x5a>
 80130ea:	46c0      	nop			; (mov r8, r8)

080130ec <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80130ec:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80130ee:	2069      	movs	r0, #105	; 0x69
{
 80130f0:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80130f2:	5c1c      	ldrb	r4, [r3, r0]
 80130f4:	2c01      	cmp	r4, #1
 80130f6:	d003      	beq.n	8013100 <HAL_UART_Receive_IT+0x14>
 80130f8:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80130fa:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80130fc:	2c12      	cmp	r4, #18
 80130fe:	d134      	bne.n	801316a <HAL_UART_Receive_IT+0x7e>
      return HAL_ERROR;
 8013100:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8013102:	2900      	cmp	r1, #0
 8013104:	d031      	beq.n	801316a <HAL_UART_Receive_IT+0x7e>
 8013106:	2a00      	cmp	r2, #0
 8013108:	d02f      	beq.n	801316a <HAL_UART_Receive_IT+0x7e>
    __HAL_LOCK(huart);
 801310a:	2468      	movs	r4, #104	; 0x68
 801310c:	5d1d      	ldrb	r5, [r3, r4]
 801310e:	2d01      	cmp	r5, #1
 8013110:	d041      	beq.n	8013196 <HAL_UART_Receive_IT+0xaa>
 8013112:	5518      	strb	r0, [r3, r4]
    huart->pRxBuffPtr = pData;
 8013114:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8013116:	2158      	movs	r1, #88	; 0x58
 8013118:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 801311a:	3102      	adds	r1, #2
 801311c:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 801311e:	2180      	movs	r1, #128	; 0x80
 8013120:	689a      	ldr	r2, [r3, #8]
 8013122:	0149      	lsls	r1, r1, #5
 8013124:	428a      	cmp	r2, r1
 8013126:	d021      	beq.n	801316c <HAL_UART_Receive_IT+0x80>
 8013128:	2a00      	cmp	r2, #0
 801312a:	d129      	bne.n	8013180 <HAL_UART_Receive_IT+0x94>
 801312c:	691a      	ldr	r2, [r3, #16]
 801312e:	2a00      	cmp	r2, #0
 8013130:	d133      	bne.n	801319a <HAL_UART_Receive_IT+0xae>
 8013132:	225c      	movs	r2, #92	; 0x5c
 8013134:	21ff      	movs	r1, #255	; 0xff
 8013136:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013138:	2200      	movs	r2, #0
 801313a:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801313c:	3269      	adds	r2, #105	; 0x69
 801313e:	5c99      	ldrb	r1, [r3, r2]
 8013140:	2912      	cmp	r1, #18
 8013142:	d01a      	beq.n	801317a <HAL_UART_Receive_IT+0x8e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013144:	2122      	movs	r1, #34	; 0x22
 8013146:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8013148:	2180      	movs	r1, #128	; 0x80
 801314a:	681a      	ldr	r2, [r3, #0]
 801314c:	0049      	lsls	r1, r1, #1
 801314e:	6810      	ldr	r0, [r2, #0]
 8013150:	4301      	orrs	r1, r0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013152:	2001      	movs	r0, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8013154:	6011      	str	r1, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013156:	6891      	ldr	r1, [r2, #8]
 8013158:	4301      	orrs	r1, r0
 801315a:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 801315c:	2000      	movs	r0, #0
 801315e:	2168      	movs	r1, #104	; 0x68
 8013160:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8013162:	6813      	ldr	r3, [r2, #0]
 8013164:	3948      	subs	r1, #72	; 0x48
 8013166:	430b      	orrs	r3, r1
 8013168:	6013      	str	r3, [r2, #0]
  }
}
 801316a:	bd30      	pop	{r4, r5, pc}
    UART_MASK_COMPUTATION(huart);
 801316c:	691a      	ldr	r2, [r3, #16]
 801316e:	2a00      	cmp	r2, #0
 8013170:	d1df      	bne.n	8013132 <HAL_UART_Receive_IT+0x46>
 8013172:	490c      	ldr	r1, [pc, #48]	; (80131a4 <HAL_UART_Receive_IT+0xb8>)
 8013174:	325c      	adds	r2, #92	; 0x5c
 8013176:	5299      	strh	r1, [r3, r2]
 8013178:	e7de      	b.n	8013138 <HAL_UART_Receive_IT+0x4c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801317a:	3120      	adds	r1, #32
 801317c:	5499      	strb	r1, [r3, r2]
 801317e:	e7e3      	b.n	8013148 <HAL_UART_Receive_IT+0x5c>
    UART_MASK_COMPUTATION(huart);
 8013180:	2180      	movs	r1, #128	; 0x80
 8013182:	0549      	lsls	r1, r1, #21
 8013184:	428a      	cmp	r2, r1
 8013186:	d1d7      	bne.n	8013138 <HAL_UART_Receive_IT+0x4c>
 8013188:	691a      	ldr	r2, [r3, #16]
 801318a:	2a00      	cmp	r2, #0
 801318c:	d005      	beq.n	801319a <HAL_UART_Receive_IT+0xae>
 801318e:	225c      	movs	r2, #92	; 0x5c
 8013190:	213f      	movs	r1, #63	; 0x3f
 8013192:	5299      	strh	r1, [r3, r2]
 8013194:	e7d0      	b.n	8013138 <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 8013196:	2002      	movs	r0, #2
 8013198:	e7e7      	b.n	801316a <HAL_UART_Receive_IT+0x7e>
    UART_MASK_COMPUTATION(huart);
 801319a:	225c      	movs	r2, #92	; 0x5c
 801319c:	217f      	movs	r1, #127	; 0x7f
 801319e:	5299      	strh	r1, [r3, r2]
 80131a0:	e7ca      	b.n	8013138 <HAL_UART_Receive_IT+0x4c>
 80131a2:	46c0      	nop			; (mov r8, r8)
 80131a4:	000001ff 	.word	0x000001ff

080131a8 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80131a8:	b570      	push	{r4, r5, r6, lr}
 80131aa:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80131ac:	2069      	movs	r0, #105	; 0x69
 80131ae:	5c23      	ldrb	r3, [r4, r0]
 80131b0:	2b01      	cmp	r3, #1
 80131b2:	d003      	beq.n	80131bc <HAL_UART_Transmit_DMA+0x14>
 80131b4:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80131b6:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80131b8:	2b22      	cmp	r3, #34	; 0x22
 80131ba:	d12e      	bne.n	801321a <HAL_UART_Transmit_DMA+0x72>
      return HAL_ERROR;
 80131bc:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80131be:	2900      	cmp	r1, #0
 80131c0:	d02b      	beq.n	801321a <HAL_UART_Transmit_DMA+0x72>
 80131c2:	2a00      	cmp	r2, #0
 80131c4:	d029      	beq.n	801321a <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 80131c6:	2368      	movs	r3, #104	; 0x68
 80131c8:	5ce5      	ldrb	r5, [r4, r3]
 80131ca:	2d01      	cmp	r5, #1
 80131cc:	d029      	beq.n	8013222 <HAL_UART_Transmit_DMA+0x7a>
 80131ce:	54e0      	strb	r0, [r4, r3]
    huart->TxXferSize = Size;
 80131d0:	3b18      	subs	r3, #24
    huart->pTxBuffPtr = pData;
 80131d2:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80131d4:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80131d6:	3302      	adds	r3, #2
 80131d8:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131da:	2300      	movs	r3, #0
 80131dc:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80131de:	3369      	adds	r3, #105	; 0x69
 80131e0:	5ce0      	ldrb	r0, [r4, r3]
 80131e2:	2822      	cmp	r0, #34	; 0x22
 80131e4:	d01a      	beq.n	801321c <HAL_UART_Transmit_DMA+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80131e6:	2012      	movs	r0, #18
 80131e8:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80131ea:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80131ec:	4b0e      	ldr	r3, [pc, #56]	; (8013228 <HAL_UART_Transmit_DMA+0x80>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80131ee:	6825      	ldr	r5, [r4, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80131f0:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80131f2:	4b0e      	ldr	r3, [pc, #56]	; (801322c <HAL_UART_Transmit_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80131f4:	3528      	adds	r5, #40	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80131f6:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80131f8:	4b0d      	ldr	r3, [pc, #52]	; (8013230 <HAL_UART_Transmit_DMA+0x88>)
 80131fa:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80131fc:	0013      	movs	r3, r2
 80131fe:	002a      	movs	r2, r5
 8013200:	f7fd fce8 	bl	8010bd4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013204:	2240      	movs	r2, #64	; 0x40
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8013206:	2180      	movs	r1, #128	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013208:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 801320a:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801320c:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 801320e:	689a      	ldr	r2, [r3, #8]
 8013210:	430a      	orrs	r2, r1
 8013212:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8013214:	2368      	movs	r3, #104	; 0x68
 8013216:	2200      	movs	r2, #0
 8013218:	54e2      	strb	r2, [r4, r3]
  }
}
 801321a:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801321c:	3010      	adds	r0, #16
 801321e:	54e0      	strb	r0, [r4, r3]
 8013220:	e7e3      	b.n	80131ea <HAL_UART_Transmit_DMA+0x42>
    return HAL_BUSY;
 8013222:	2002      	movs	r0, #2
 8013224:	e7f9      	b.n	801321a <HAL_UART_Transmit_DMA+0x72>
 8013226:	46c0      	nop			; (mov r8, r8)
 8013228:	080132b9 	.word	0x080132b9
 801322c:	080132ed 	.word	0x080132ed
 8013230:	08013341 	.word	0x08013341

08013234 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013234:	b570      	push	{r4, r5, r6, lr}
 8013236:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013238:	2069      	movs	r0, #105	; 0x69
 801323a:	5c25      	ldrb	r5, [r4, r0]
 801323c:	2d01      	cmp	r5, #1
 801323e:	d003      	beq.n	8013248 <HAL_UART_Receive_DMA+0x14>
 8013240:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013242:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013244:	2b12      	cmp	r3, #18
 8013246:	d12b      	bne.n	80132a0 <HAL_UART_Receive_DMA+0x6c>
      return HAL_ERROR;
 8013248:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801324a:	2900      	cmp	r1, #0
 801324c:	d028      	beq.n	80132a0 <HAL_UART_Receive_DMA+0x6c>
 801324e:	2a00      	cmp	r2, #0
 8013250:	d026      	beq.n	80132a0 <HAL_UART_Receive_DMA+0x6c>
    __HAL_LOCK(huart);
 8013252:	2368      	movs	r3, #104	; 0x68
 8013254:	5ce5      	ldrb	r5, [r4, r3]
 8013256:	2d01      	cmp	r5, #1
 8013258:	d026      	beq.n	80132a8 <HAL_UART_Receive_DMA+0x74>
 801325a:	54e0      	strb	r0, [r4, r3]
    huart->RxXferSize = Size;
 801325c:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 801325e:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8013260:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013262:	2300      	movs	r3, #0
 8013264:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013266:	3369      	adds	r3, #105	; 0x69
 8013268:	5ce0      	ldrb	r0, [r4, r3]
 801326a:	2812      	cmp	r0, #18
 801326c:	d019      	beq.n	80132a2 <HAL_UART_Receive_DMA+0x6e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801326e:	2022      	movs	r0, #34	; 0x22
 8013270:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013272:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8013274:	4b0d      	ldr	r3, [pc, #52]	; (80132ac <HAL_UART_Receive_DMA+0x78>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8013276:	6825      	ldr	r5, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013278:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801327a:	4b0d      	ldr	r3, [pc, #52]	; (80132b0 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801327c:	3524      	adds	r5, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801327e:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013280:	4b0c      	ldr	r3, [pc, #48]	; (80132b4 <HAL_UART_Receive_DMA+0x80>)
 8013282:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8013284:	0013      	movs	r3, r2
 8013286:	000a      	movs	r2, r1
 8013288:	0029      	movs	r1, r5
 801328a:	f7fd fca3 	bl	8010bd4 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 801328e:	2140      	movs	r1, #64	; 0x40
 8013290:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8013292:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8013294:	6893      	ldr	r3, [r2, #8]
 8013296:	430b      	orrs	r3, r1
 8013298:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 801329a:	2368      	movs	r3, #104	; 0x68
 801329c:	2200      	movs	r2, #0
 801329e:	54e2      	strb	r2, [r4, r3]
  }
}
 80132a0:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80132a2:	3020      	adds	r0, #32
 80132a4:	54e0      	strb	r0, [r4, r3]
 80132a6:	e7e4      	b.n	8013272 <HAL_UART_Receive_DMA+0x3e>
    return HAL_BUSY;
 80132a8:	2002      	movs	r0, #2
 80132aa:	e7f9      	b.n	80132a0 <HAL_UART_Receive_DMA+0x6c>
 80132ac:	080132f9 	.word	0x080132f9
 80132b0:	08013335 	.word	0x08013335
 80132b4:	08013341 	.word	0x08013341

080132b8 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80132b8:	6803      	ldr	r3, [r0, #0]
{
 80132ba:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80132bc:	6819      	ldr	r1, [r3, #0]
 80132be:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80132c0:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80132c2:	400b      	ands	r3, r1
 80132c4:	d10b      	bne.n	80132de <UART_DMATransmitCplt+0x26>
  {  
    huart->TxXferCount = 0;
 80132c6:	2152      	movs	r1, #82	; 0x52
 80132c8:	5253      	strh	r3, [r2, r1]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80132ca:	6813      	ldr	r3, [r2, #0]
 80132cc:	312e      	adds	r1, #46	; 0x2e
 80132ce:	689a      	ldr	r2, [r3, #8]
 80132d0:	438a      	bics	r2, r1
 80132d2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80132d4:	681a      	ldr	r2, [r3, #0]
 80132d6:	3940      	subs	r1, #64	; 0x40
 80132d8:	430a      	orrs	r2, r1
 80132da:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80132dc:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80132de:	0010      	movs	r0, r2
 80132e0:	f7fa faaa 	bl	800d838 <HAL_UART_TxCpltCallback>
}
 80132e4:	e7fa      	b.n	80132dc <UART_DMATransmitCplt+0x24>
 80132e6:	46c0      	nop			; (mov r8, r8)

080132e8 <HAL_UART_TxHalfCpltCallback>:
 80132e8:	4770      	bx	lr
 80132ea:	46c0      	nop			; (mov r8, r8)

080132ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80132ec:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 80132ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80132f0:	f7ff fffa 	bl	80132e8 <HAL_UART_TxHalfCpltCallback>
}
 80132f4:	bd10      	pop	{r4, pc}
 80132f6:	46c0      	nop			; (mov r8, r8)

080132f8 <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80132f8:	6803      	ldr	r3, [r0, #0]
{
 80132fa:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80132fc:	6819      	ldr	r1, [r3, #0]
 80132fe:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013300:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013302:	400b      	ands	r3, r1
 8013304:	d10c      	bne.n	8013320 <UART_DMAReceiveCplt+0x28>
  {
    huart->RxXferCount = 0;
 8013306:	215a      	movs	r1, #90	; 0x5a

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8013308:	2040      	movs	r0, #64	; 0x40
    huart->RxXferCount = 0;
 801330a:	5253      	strh	r3, [r2, r1]
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 801330c:	6811      	ldr	r1, [r2, #0]
 801330e:	688b      	ldr	r3, [r1, #8]
 8013310:	4383      	bics	r3, r0
 8013312:	608b      	str	r3, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013314:	2369      	movs	r3, #105	; 0x69
 8013316:	5cd1      	ldrb	r1, [r2, r3]
 8013318:	2932      	cmp	r1, #50	; 0x32
 801331a:	d005      	beq.n	8013328 <UART_DMAReceiveCplt+0x30>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 801331c:	2101      	movs	r1, #1
 801331e:	54d1      	strb	r1, [r2, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8013320:	0010      	movs	r0, r2
 8013322:	f7fa fac5 	bl	800d8b0 <HAL_UART_RxCpltCallback>
}
 8013326:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013328:	3920      	subs	r1, #32
 801332a:	54d1      	strb	r1, [r2, r3]
 801332c:	e7f8      	b.n	8013320 <UART_DMAReceiveCplt+0x28>
 801332e:	46c0      	nop			; (mov r8, r8)

08013330 <HAL_UART_RxHalfCpltCallback>:
 8013330:	4770      	bx	lr
 8013332:	46c0      	nop			; (mov r8, r8)

08013334 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013334:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8013336:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013338:	f7ff fffa 	bl	8013330 <HAL_UART_RxHalfCpltCallback>
}
 801333c:	bd10      	pop	{r4, pc}
 801333e:	46c0      	nop			; (mov r8, r8)

08013340 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 8013340:	2300      	movs	r3, #0
 8013342:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013344:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8013346:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 8013348:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 801334a:	3a08      	subs	r2, #8
 801334c:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 801334e:	3369      	adds	r3, #105	; 0x69
 8013350:	3a51      	subs	r2, #81	; 0x51
 8013352:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013354:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013356:	320f      	adds	r2, #15
 8013358:	4313      	orrs	r3, r2
 801335a:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 801335c:	f7fa fa84 	bl	800d868 <HAL_UART_ErrorCallback>
}
 8013360:	bd10      	pop	{r4, pc}
 8013362:	46c0      	nop			; (mov r8, r8)

08013364 <UART_SetConfig>:
{
 8013364:	b570      	push	{r4, r5, r6, lr}
 8013366:	0005      	movs	r5, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013368:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801336a:	69c1      	ldr	r1, [r0, #28]
 801336c:	6883      	ldr	r3, [r0, #8]
 801336e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013370:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013372:	4303      	orrs	r3, r0
 8013374:	6968      	ldr	r0, [r5, #20]
 8013376:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013378:	4861      	ldr	r0, [pc, #388]	; (8013500 <UART_SetConfig+0x19c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801337a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801337c:	4002      	ands	r2, r0
 801337e:	4313      	orrs	r3, r2
 8013380:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013382:	6863      	ldr	r3, [r4, #4]
 8013384:	4a5f      	ldr	r2, [pc, #380]	; (8013504 <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8013386:	6a28      	ldr	r0, [r5, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013388:	4013      	ands	r3, r2
 801338a:	68ea      	ldr	r2, [r5, #12]
 801338c:	4313      	orrs	r3, r2
 801338e:	6063      	str	r3, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8013390:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8013392:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8013394:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8013396:	485c      	ldr	r0, [pc, #368]	; (8013508 <UART_SetConfig+0x1a4>)
 8013398:	4002      	ands	r2, r0
 801339a:	4313      	orrs	r3, r2
 801339c:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 801339e:	4b5b      	ldr	r3, [pc, #364]	; (801350c <UART_SetConfig+0x1a8>)
 80133a0:	429c      	cmp	r4, r3
 80133a2:	d044      	beq.n	801342e <UART_SetConfig+0xca>
 80133a4:	4b5a      	ldr	r3, [pc, #360]	; (8013510 <UART_SetConfig+0x1ac>)
 80133a6:	429c      	cmp	r4, r3
 80133a8:	d018      	beq.n	80133dc <UART_SetConfig+0x78>
 80133aa:	4b5a      	ldr	r3, [pc, #360]	; (8013514 <UART_SetConfig+0x1b0>)
 80133ac:	429c      	cmp	r4, r3
 80133ae:	d100      	bne.n	80133b2 <UART_SetConfig+0x4e>
 80133b0:	e085      	b.n	80134be <UART_SetConfig+0x15a>
 80133b2:	4b59      	ldr	r3, [pc, #356]	; (8013518 <UART_SetConfig+0x1b4>)
 80133b4:	429c      	cmp	r4, r3
 80133b6:	d031      	beq.n	801341c <UART_SetConfig+0xb8>
 80133b8:	4b58      	ldr	r3, [pc, #352]	; (801351c <UART_SetConfig+0x1b8>)
 80133ba:	429c      	cmp	r4, r3
 80133bc:	d02e      	beq.n	801341c <UART_SetConfig+0xb8>
 80133be:	4b58      	ldr	r3, [pc, #352]	; (8013520 <UART_SetConfig+0x1bc>)
 80133c0:	429c      	cmp	r4, r3
 80133c2:	d02b      	beq.n	801341c <UART_SetConfig+0xb8>
 80133c4:	4b57      	ldr	r3, [pc, #348]	; (8013524 <UART_SetConfig+0x1c0>)
 80133c6:	429c      	cmp	r4, r3
 80133c8:	d028      	beq.n	801341c <UART_SetConfig+0xb8>
 80133ca:	4b57      	ldr	r3, [pc, #348]	; (8013528 <UART_SetConfig+0x1c4>)
 80133cc:	429c      	cmp	r4, r3
 80133ce:	d025      	beq.n	801341c <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80133d0:	2380      	movs	r3, #128	; 0x80
 80133d2:	021b      	lsls	r3, r3, #8
 80133d4:	4299      	cmp	r1, r3
 80133d6:	d050      	beq.n	801347a <UART_SetConfig+0x116>
        ret = HAL_ERROR;
 80133d8:	2001      	movs	r0, #1
 80133da:	e01c      	b.n	8013416 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80133dc:	20c0      	movs	r0, #192	; 0xc0
 80133de:	2280      	movs	r2, #128	; 0x80
 80133e0:	4b52      	ldr	r3, [pc, #328]	; (801352c <UART_SetConfig+0x1c8>)
 80133e2:	0280      	lsls	r0, r0, #10
 80133e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133e6:	0252      	lsls	r2, r2, #9
 80133e8:	4003      	ands	r3, r0
 80133ea:	4293      	cmp	r3, r2
 80133ec:	d049      	beq.n	8013482 <UART_SetConfig+0x11e>
 80133ee:	d913      	bls.n	8013418 <UART_SetConfig+0xb4>
 80133f0:	2280      	movs	r2, #128	; 0x80
 80133f2:	0292      	lsls	r2, r2, #10
 80133f4:	4293      	cmp	r3, r2
 80133f6:	d100      	bne.n	80133fa <UART_SetConfig+0x96>
 80133f8:	e070      	b.n	80134dc <UART_SetConfig+0x178>
 80133fa:	4283      	cmp	r3, r0
 80133fc:	d1e8      	bne.n	80133d0 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80133fe:	2380      	movs	r3, #128	; 0x80
 8013400:	021b      	lsls	r3, r3, #8
 8013402:	4299      	cmp	r1, r3
 8013404:	d056      	beq.n	80134b4 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8013406:	6869      	ldr	r1, [r5, #4]
 8013408:	4849      	ldr	r0, [pc, #292]	; (8013530 <UART_SetConfig+0x1cc>)
 801340a:	f7ec fea1 	bl	8000150 <__udivsi3>
 801340e:	0400      	lsls	r0, r0, #16
 8013410:	0c00      	lsrs	r0, r0, #16
 8013412:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013414:	2000      	movs	r0, #0
}
 8013416:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013418:	2b00      	cmp	r3, #0
 801341a:	d1d9      	bne.n	80133d0 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801341c:	2380      	movs	r3, #128	; 0x80
 801341e:	021b      	lsls	r3, r3, #8
 8013420:	4299      	cmp	r1, r3
 8013422:	d060      	beq.n	80134e6 <UART_SetConfig+0x182>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013424:	f7fe ffd6 	bl	80123d4 <HAL_RCC_GetPCLK1Freq>
 8013428:	682c      	ldr	r4, [r5, #0]
 801342a:	6869      	ldr	r1, [r5, #4]
 801342c:	e7ed      	b.n	801340a <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801342e:	4b3f      	ldr	r3, [pc, #252]	; (801352c <UART_SetConfig+0x1c8>)
 8013430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013432:	2303      	movs	r3, #3
 8013434:	4013      	ands	r3, r2
 8013436:	4a3f      	ldr	r2, [pc, #252]	; (8013534 <UART_SetConfig+0x1d0>)
 8013438:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801343a:	2280      	movs	r2, #128	; 0x80
 801343c:	0212      	lsls	r2, r2, #8
 801343e:	4291      	cmp	r1, r2
 8013440:	d00e      	beq.n	8013460 <UART_SetConfig+0xfc>
    switch (clocksource)
 8013442:	2b02      	cmp	r3, #2
 8013444:	d0df      	beq.n	8013406 <UART_SetConfig+0xa2>
 8013446:	d956      	bls.n	80134f6 <UART_SetConfig+0x192>
 8013448:	2b04      	cmp	r3, #4
 801344a:	d01e      	beq.n	801348a <UART_SetConfig+0x126>
 801344c:	2b08      	cmp	r3, #8
 801344e:	d1c3      	bne.n	80133d8 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8013450:	2080      	movs	r0, #128	; 0x80
 8013452:	6869      	ldr	r1, [r5, #4]
 8013454:	0200      	lsls	r0, r0, #8
 8013456:	f7ec fe7b 	bl	8000150 <__udivsi3>
 801345a:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801345c:	2000      	movs	r0, #0
        break;
 801345e:	e7da      	b.n	8013416 <UART_SetConfig+0xb2>
    switch (clocksource)
 8013460:	2b02      	cmp	r3, #2
 8013462:	d027      	beq.n	80134b4 <UART_SetConfig+0x150>
 8013464:	d907      	bls.n	8013476 <UART_SetConfig+0x112>
 8013466:	2b04      	cmp	r3, #4
 8013468:	d014      	beq.n	8013494 <UART_SetConfig+0x130>
 801346a:	2b08      	cmp	r3, #8
 801346c:	d105      	bne.n	801347a <UART_SetConfig+0x116>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 801346e:	2080      	movs	r0, #128	; 0x80
 8013470:	6869      	ldr	r1, [r5, #4]
 8013472:	0240      	lsls	r0, r0, #9
 8013474:	e020      	b.n	80134b8 <UART_SetConfig+0x154>
    switch (clocksource)
 8013476:	2b00      	cmp	r3, #0
 8013478:	d035      	beq.n	80134e6 <UART_SetConfig+0x182>
 801347a:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 801347c:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 801347e:	60e3      	str	r3, [r4, #12]
 8013480:	e7c9      	b.n	8013416 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013482:	2380      	movs	r3, #128	; 0x80
 8013484:	021b      	lsls	r3, r3, #8
 8013486:	4299      	cmp	r1, r3
 8013488:	d004      	beq.n	8013494 <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801348a:	f7fe ff49 	bl	8012320 <HAL_RCC_GetSysClockFreq>
 801348e:	682c      	ldr	r4, [r5, #0]
 8013490:	6869      	ldr	r1, [r5, #4]
 8013492:	e7ba      	b.n	801340a <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013494:	f7fe ff44 	bl	8012320 <HAL_RCC_GetSysClockFreq>
 8013498:	6869      	ldr	r1, [r5, #4]
 801349a:	0040      	lsls	r0, r0, #1
 801349c:	f7ec fe58 	bl	8000150 <__udivsi3>
 80134a0:	682c      	ldr	r4, [r5, #0]
 80134a2:	220f      	movs	r2, #15
 80134a4:	0703      	lsls	r3, r0, #28
 80134a6:	0f5b      	lsrs	r3, r3, #29
 80134a8:	4390      	bics	r0, r2
 80134aa:	4303      	orrs	r3, r0
 80134ac:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80134ae:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 80134b0:	60e3      	str	r3, [r4, #12]
 80134b2:	e7b0      	b.n	8013416 <UART_SetConfig+0xb2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80134b4:	6869      	ldr	r1, [r5, #4]
 80134b6:	4820      	ldr	r0, [pc, #128]	; (8013538 <UART_SetConfig+0x1d4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80134b8:	f7ec fe4a 	bl	8000150 <__udivsi3>
 80134bc:	e7f1      	b.n	80134a2 <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80134be:	20c0      	movs	r0, #192	; 0xc0
 80134c0:	2280      	movs	r2, #128	; 0x80
 80134c2:	4b1a      	ldr	r3, [pc, #104]	; (801352c <UART_SetConfig+0x1c8>)
 80134c4:	0300      	lsls	r0, r0, #12
 80134c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134c8:	02d2      	lsls	r2, r2, #11
 80134ca:	4003      	ands	r3, r0
 80134cc:	4293      	cmp	r3, r2
 80134ce:	d0d8      	beq.n	8013482 <UART_SetConfig+0x11e>
 80134d0:	d9a2      	bls.n	8013418 <UART_SetConfig+0xb4>
 80134d2:	2280      	movs	r2, #128	; 0x80
 80134d4:	0312      	lsls	r2, r2, #12
 80134d6:	4293      	cmp	r3, r2
 80134d8:	d000      	beq.n	80134dc <UART_SetConfig+0x178>
 80134da:	e78e      	b.n	80133fa <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80134dc:	2380      	movs	r3, #128	; 0x80
 80134de:	021b      	lsls	r3, r3, #8
 80134e0:	4299      	cmp	r1, r3
 80134e2:	d1b5      	bne.n	8013450 <UART_SetConfig+0xec>
 80134e4:	e7c3      	b.n	801346e <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80134e6:	f7fe ff75 	bl	80123d4 <HAL_RCC_GetPCLK1Freq>
 80134ea:	6869      	ldr	r1, [r5, #4]
 80134ec:	0040      	lsls	r0, r0, #1
 80134ee:	f7ec fe2f 	bl	8000150 <__udivsi3>
 80134f2:	682c      	ldr	r4, [r5, #0]
 80134f4:	e7d5      	b.n	80134a2 <UART_SetConfig+0x13e>
    switch (clocksource)
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d094      	beq.n	8013424 <UART_SetConfig+0xc0>
        ret = HAL_ERROR;
 80134fa:	2001      	movs	r0, #1
 80134fc:	e78b      	b.n	8013416 <UART_SetConfig+0xb2>
 80134fe:	46c0      	nop			; (mov r8, r8)
 8013500:	efff69f3 	.word	0xefff69f3
 8013504:	ffffcfff 	.word	0xffffcfff
 8013508:	fffff4ff 	.word	0xfffff4ff
 801350c:	40013800 	.word	0x40013800
 8013510:	40004400 	.word	0x40004400
 8013514:	40004800 	.word	0x40004800
 8013518:	40004c00 	.word	0x40004c00
 801351c:	40005000 	.word	0x40005000
 8013520:	40011400 	.word	0x40011400
 8013524:	40011800 	.word	0x40011800
 8013528:	40011c00 	.word	0x40011c00
 801352c:	40021000 	.word	0x40021000
 8013530:	007a1200 	.word	0x007a1200
 8013534:	08018fa0 	.word	0x08018fa0
 8013538:	00f42400 	.word	0x00f42400

0801353c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801353c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 801353e:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013540:	07da      	lsls	r2, r3, #31
 8013542:	d506      	bpl.n	8013552 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013544:	6801      	ldr	r1, [r0, #0]
 8013546:	4c28      	ldr	r4, [pc, #160]	; (80135e8 <UART_AdvFeatureConfig+0xac>)
 8013548:	684a      	ldr	r2, [r1, #4]
 801354a:	4022      	ands	r2, r4
 801354c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801354e:	4322      	orrs	r2, r4
 8013550:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013552:	079a      	lsls	r2, r3, #30
 8013554:	d506      	bpl.n	8013564 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013556:	6801      	ldr	r1, [r0, #0]
 8013558:	4c24      	ldr	r4, [pc, #144]	; (80135ec <UART_AdvFeatureConfig+0xb0>)
 801355a:	684a      	ldr	r2, [r1, #4]
 801355c:	4022      	ands	r2, r4
 801355e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8013560:	4322      	orrs	r2, r4
 8013562:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013564:	075a      	lsls	r2, r3, #29
 8013566:	d506      	bpl.n	8013576 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013568:	6801      	ldr	r1, [r0, #0]
 801356a:	4c21      	ldr	r4, [pc, #132]	; (80135f0 <UART_AdvFeatureConfig+0xb4>)
 801356c:	684a      	ldr	r2, [r1, #4]
 801356e:	4022      	ands	r2, r4
 8013570:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8013572:	4322      	orrs	r2, r4
 8013574:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013576:	071a      	lsls	r2, r3, #28
 8013578:	d506      	bpl.n	8013588 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801357a:	6801      	ldr	r1, [r0, #0]
 801357c:	4c1d      	ldr	r4, [pc, #116]	; (80135f4 <UART_AdvFeatureConfig+0xb8>)
 801357e:	684a      	ldr	r2, [r1, #4]
 8013580:	4022      	ands	r2, r4
 8013582:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8013584:	4322      	orrs	r2, r4
 8013586:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013588:	06da      	lsls	r2, r3, #27
 801358a:	d506      	bpl.n	801359a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801358c:	6801      	ldr	r1, [r0, #0]
 801358e:	4c1a      	ldr	r4, [pc, #104]	; (80135f8 <UART_AdvFeatureConfig+0xbc>)
 8013590:	688a      	ldr	r2, [r1, #8]
 8013592:	4022      	ands	r2, r4
 8013594:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8013596:	4322      	orrs	r2, r4
 8013598:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801359a:	069a      	lsls	r2, r3, #26
 801359c:	d506      	bpl.n	80135ac <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801359e:	6801      	ldr	r1, [r0, #0]
 80135a0:	4c16      	ldr	r4, [pc, #88]	; (80135fc <UART_AdvFeatureConfig+0xc0>)
 80135a2:	688a      	ldr	r2, [r1, #8]
 80135a4:	4022      	ands	r2, r4
 80135a6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80135a8:	4322      	orrs	r2, r4
 80135aa:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80135ac:	065a      	lsls	r2, r3, #25
 80135ae:	d50a      	bpl.n	80135c6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80135b0:	6801      	ldr	r1, [r0, #0]
 80135b2:	4d13      	ldr	r5, [pc, #76]	; (8013600 <UART_AdvFeatureConfig+0xc4>)
 80135b4:	684a      	ldr	r2, [r1, #4]
 80135b6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80135b8:	402a      	ands	r2, r5
 80135ba:	4322      	orrs	r2, r4
 80135bc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80135be:	2280      	movs	r2, #128	; 0x80
 80135c0:	0352      	lsls	r2, r2, #13
 80135c2:	4294      	cmp	r4, r2
 80135c4:	d009      	beq.n	80135da <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80135c6:	061b      	lsls	r3, r3, #24
 80135c8:	d506      	bpl.n	80135d8 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80135ca:	6802      	ldr	r2, [r0, #0]
 80135cc:	490d      	ldr	r1, [pc, #52]	; (8013604 <UART_AdvFeatureConfig+0xc8>)
 80135ce:	6853      	ldr	r3, [r2, #4]
 80135d0:	400b      	ands	r3, r1
 80135d2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80135d4:	430b      	orrs	r3, r1
 80135d6:	6053      	str	r3, [r2, #4]
}
 80135d8:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80135da:	684a      	ldr	r2, [r1, #4]
 80135dc:	4c0a      	ldr	r4, [pc, #40]	; (8013608 <UART_AdvFeatureConfig+0xcc>)
 80135de:	4022      	ands	r2, r4
 80135e0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80135e2:	4322      	orrs	r2, r4
 80135e4:	604a      	str	r2, [r1, #4]
 80135e6:	e7ee      	b.n	80135c6 <UART_AdvFeatureConfig+0x8a>
 80135e8:	fffdffff 	.word	0xfffdffff
 80135ec:	fffeffff 	.word	0xfffeffff
 80135f0:	fffbffff 	.word	0xfffbffff
 80135f4:	ffff7fff 	.word	0xffff7fff
 80135f8:	ffffefff 	.word	0xffffefff
 80135fc:	ffffdfff 	.word	0xffffdfff
 8013600:	ffefffff 	.word	0xffefffff
 8013604:	fff7ffff 	.word	0xfff7ffff
 8013608:	ff9fffff 	.word	0xff9fffff

0801360c <UART_WaitOnFlagUntilTimeout>:
{
 801360c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801360e:	46c6      	mov	lr, r8
 8013610:	4690      	mov	r8, r2
 8013612:	b500      	push	{lr}
 8013614:	001d      	movs	r5, r3
 8013616:	0006      	movs	r6, r0
 8013618:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 801361a:	f7fc fd9b 	bl	8010154 <HAL_GetTick>
  if(Status == RESET)
 801361e:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 8013620:	0007      	movs	r7, r0
  if(Status == RESET)
 8013622:	2b00      	cmp	r3, #0
 8013624:	d112      	bne.n	801364c <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8013626:	6832      	ldr	r2, [r6, #0]
 8013628:	e001      	b.n	801362e <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 801362a:	1c6b      	adds	r3, r5, #1
 801362c:	d117      	bne.n	801365e <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 801362e:	69d3      	ldr	r3, [r2, #28]
 8013630:	4023      	ands	r3, r4
 8013632:	42a3      	cmp	r3, r4
 8013634:	d1f9      	bne.n	801362a <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8013636:	2000      	movs	r0, #0
}
 8013638:	bc04      	pop	{r2}
 801363a:	4690      	mov	r8, r2
 801363c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801363e:	2d00      	cmp	r5, #0
 8013640:	d015      	beq.n	801366e <UART_WaitOnFlagUntilTimeout+0x62>
 8013642:	f7fc fd87 	bl	8010154 <HAL_GetTick>
 8013646:	1bc0      	subs	r0, r0, r7
 8013648:	42a8      	cmp	r0, r5
 801364a:	d80f      	bhi.n	801366c <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 801364c:	6832      	ldr	r2, [r6, #0]
 801364e:	e001      	b.n	8013654 <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 8013650:	1c6b      	adds	r3, r5, #1
 8013652:	d1f4      	bne.n	801363e <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8013654:	69d3      	ldr	r3, [r2, #28]
 8013656:	4023      	ands	r3, r4
 8013658:	42a3      	cmp	r3, r4
 801365a:	d0f9      	beq.n	8013650 <UART_WaitOnFlagUntilTimeout+0x44>
 801365c:	e7eb      	b.n	8013636 <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801365e:	2d00      	cmp	r5, #0
 8013660:	d005      	beq.n	801366e <UART_WaitOnFlagUntilTimeout+0x62>
 8013662:	f7fc fd77 	bl	8010154 <HAL_GetTick>
 8013666:	1bc0      	subs	r0, r0, r7
 8013668:	42a8      	cmp	r0, r5
 801366a:	d9dc      	bls.n	8013626 <UART_WaitOnFlagUntilTimeout+0x1a>
 801366c:	6832      	ldr	r2, [r6, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801366e:	2180      	movs	r1, #128	; 0x80
 8013670:	6813      	ldr	r3, [r2, #0]
          return HAL_TIMEOUT;
 8013672:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013674:	438b      	bics	r3, r1
 8013676:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013678:	6813      	ldr	r3, [r2, #0]
 801367a:	3960      	subs	r1, #96	; 0x60
 801367c:	438b      	bics	r3, r1
 801367e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013680:	6813      	ldr	r3, [r2, #0]
 8013682:	4907      	ldr	r1, [pc, #28]	; (80136a0 <UART_WaitOnFlagUntilTimeout+0x94>)
 8013684:	400b      	ands	r3, r1
 8013686:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013688:	6893      	ldr	r3, [r2, #8]
 801368a:	3103      	adds	r1, #3
 801368c:	31ff      	adds	r1, #255	; 0xff
 801368e:	438b      	bics	r3, r1
 8013690:	6093      	str	r3, [r2, #8]
          huart->State = HAL_UART_STATE_READY;
 8013692:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 8013694:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 8013696:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 8013698:	3b01      	subs	r3, #1
 801369a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801369c:	e7cc      	b.n	8013638 <UART_WaitOnFlagUntilTimeout+0x2c>
 801369e:	46c0      	nop			; (mov r8, r8)
 80136a0:	fffffeff 	.word	0xfffffeff

080136a4 <HAL_UART_Transmit>:
{
 80136a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136a6:	46c6      	mov	lr, r8
 80136a8:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80136aa:	2369      	movs	r3, #105	; 0x69
{
 80136ac:	b500      	push	{lr}
 80136ae:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80136b0:	5cc1      	ldrb	r1, [r0, r3]
{
 80136b2:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80136b4:	2901      	cmp	r1, #1
 80136b6:	d003      	beq.n	80136c0 <HAL_UART_Transmit+0x1c>
 80136b8:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 80136ba:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80136bc:	2b22      	cmp	r3, #34	; 0x22
 80136be:	d147      	bne.n	8013750 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 80136c0:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80136c2:	2d00      	cmp	r5, #0
 80136c4:	d044      	beq.n	8013750 <HAL_UART_Transmit+0xac>
 80136c6:	2a00      	cmp	r2, #0
 80136c8:	d042      	beq.n	8013750 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80136ca:	2368      	movs	r3, #104	; 0x68
 80136cc:	5ce1      	ldrb	r1, [r4, r3]
 80136ce:	2901      	cmp	r1, #1
 80136d0:	d046      	beq.n	8013760 <HAL_UART_Transmit+0xbc>
 80136d2:	54e0      	strb	r0, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80136d4:	2300      	movs	r3, #0
 80136d6:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80136d8:	3369      	adds	r3, #105	; 0x69
 80136da:	5ce1      	ldrb	r1, [r4, r3]
 80136dc:	2922      	cmp	r1, #34	; 0x22
 80136de:	d03a      	beq.n	8013756 <HAL_UART_Transmit+0xb2>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80136e0:	2112      	movs	r1, #18
 80136e2:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80136e4:	2350      	movs	r3, #80	; 0x50
 80136e6:	52e2      	strh	r2, [r4, r3]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80136e8:	2380      	movs	r3, #128	; 0x80
 80136ea:	015b      	lsls	r3, r3, #5
      huart->TxXferCount--;
 80136ec:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80136ee:	4698      	mov	r8, r3
 80136f0:	e005      	b.n	80136fe <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80136f2:	782a      	ldrb	r2, [r5, #0]
 80136f4:	3501      	adds	r5, #1
 80136f6:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80136f8:	5ba2      	ldrh	r2, [r4, r6]
 80136fa:	2a00      	cmp	r2, #0
 80136fc:	d018      	beq.n	8013730 <HAL_UART_Transmit+0x8c>
      huart->TxXferCount--;
 80136fe:	3a01      	subs	r2, #1
 8013700:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8013702:	003b      	movs	r3, r7
 8013704:	2200      	movs	r2, #0
 8013706:	2180      	movs	r1, #128	; 0x80
 8013708:	0020      	movs	r0, r4
 801370a:	f7ff ff7f 	bl	801360c <UART_WaitOnFlagUntilTimeout>
 801370e:	2800      	cmp	r0, #0
 8013710:	d124      	bne.n	801375c <HAL_UART_Transmit+0xb8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013712:	68a2      	ldr	r2, [r4, #8]
 8013714:	6823      	ldr	r3, [r4, #0]
 8013716:	4542      	cmp	r2, r8
 8013718:	d1eb      	bne.n	80136f2 <HAL_UART_Transmit+0x4e>
 801371a:	6922      	ldr	r2, [r4, #16]
 801371c:	2a00      	cmp	r2, #0
 801371e:	d1e8      	bne.n	80136f2 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013720:	882a      	ldrh	r2, [r5, #0]
        pData += 2;
 8013722:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013724:	05d2      	lsls	r2, r2, #23
 8013726:	0dd2      	lsrs	r2, r2, #23
 8013728:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 801372a:	5ba2      	ldrh	r2, [r4, r6]
 801372c:	2a00      	cmp	r2, #0
 801372e:	d1e6      	bne.n	80136fe <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8013730:	003b      	movs	r3, r7
 8013732:	2140      	movs	r1, #64	; 0x40
 8013734:	0020      	movs	r0, r4
 8013736:	f7ff ff69 	bl	801360c <UART_WaitOnFlagUntilTimeout>
 801373a:	2800      	cmp	r0, #0
 801373c:	d10e      	bne.n	801375c <HAL_UART_Transmit+0xb8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801373e:	2369      	movs	r3, #105	; 0x69
 8013740:	5ce2      	ldrb	r2, [r4, r3]
 8013742:	2a32      	cmp	r2, #50	; 0x32
 8013744:	d00e      	beq.n	8013764 <HAL_UART_Transmit+0xc0>
      huart->State = HAL_UART_STATE_READY;
 8013746:	2201      	movs	r2, #1
 8013748:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 801374a:	2368      	movs	r3, #104	; 0x68
 801374c:	2200      	movs	r2, #0
 801374e:	54e2      	strb	r2, [r4, r3]
}
 8013750:	bc04      	pop	{r2}
 8013752:	4690      	mov	r8, r2
 8013754:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013756:	3110      	adds	r1, #16
 8013758:	54e1      	strb	r1, [r4, r3]
 801375a:	e7c3      	b.n	80136e4 <HAL_UART_Transmit+0x40>
        return HAL_TIMEOUT;
 801375c:	2003      	movs	r0, #3
 801375e:	e7f7      	b.n	8013750 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 8013760:	2002      	movs	r0, #2
 8013762:	e7f5      	b.n	8013750 <HAL_UART_Transmit+0xac>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013764:	3a10      	subs	r2, #16
 8013766:	54e2      	strb	r2, [r4, r3]
 8013768:	e7ef      	b.n	801374a <HAL_UART_Transmit+0xa6>
 801376a:	46c0      	nop			; (mov r8, r8)

0801376c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801376c:	2300      	movs	r3, #0
{
 801376e:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013770:	4a1a      	ldr	r2, [pc, #104]	; (80137dc <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013772:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013774:	6803      	ldr	r3, [r0, #0]
{
 8013776:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013778:	4293      	cmp	r3, r2
 801377a:	d00d      	beq.n	8013798 <UART_CheckIdleState+0x2c>
 801377c:	4a18      	ldr	r2, [pc, #96]	; (80137e0 <UART_CheckIdleState+0x74>)
 801377e:	4293      	cmp	r3, r2
 8013780:	d00a      	beq.n	8013798 <UART_CheckIdleState+0x2c>
 8013782:	4a18      	ldr	r2, [pc, #96]	; (80137e4 <UART_CheckIdleState+0x78>)
 8013784:	4293      	cmp	r3, r2
 8013786:	d007      	beq.n	8013798 <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 8013788:	2369      	movs	r3, #105	; 0x69
 801378a:	2201      	movs	r2, #1
 801378c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 801378e:	2200      	movs	r2, #0
  return HAL_OK;
 8013790:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8013792:	3b01      	subs	r3, #1
 8013794:	54e2      	strb	r2, [r4, r3]
}
 8013796:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013798:	681a      	ldr	r2, [r3, #0]
 801379a:	0712      	lsls	r2, r2, #28
 801379c:	d40e      	bmi.n	80137bc <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	075b      	lsls	r3, r3, #29
 80137a2:	d5f1      	bpl.n	8013788 <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80137a4:	23fa      	movs	r3, #250	; 0xfa
 80137a6:	2180      	movs	r1, #128	; 0x80
 80137a8:	009b      	lsls	r3, r3, #2
 80137aa:	2200      	movs	r2, #0
 80137ac:	03c9      	lsls	r1, r1, #15
 80137ae:	0020      	movs	r0, r4
 80137b0:	f7ff ff2c 	bl	801360c <UART_WaitOnFlagUntilTimeout>
 80137b4:	2800      	cmp	r0, #0
 80137b6:	d0e7      	beq.n	8013788 <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 80137b8:	2003      	movs	r0, #3
 80137ba:	e7ec      	b.n	8013796 <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80137bc:	23fa      	movs	r3, #250	; 0xfa
 80137be:	2180      	movs	r1, #128	; 0x80
 80137c0:	009b      	lsls	r3, r3, #2
 80137c2:	2200      	movs	r2, #0
 80137c4:	0389      	lsls	r1, r1, #14
 80137c6:	0020      	movs	r0, r4
 80137c8:	f7ff ff20 	bl	801360c <UART_WaitOnFlagUntilTimeout>
 80137cc:	2800      	cmp	r0, #0
 80137ce:	d1f3      	bne.n	80137b8 <UART_CheckIdleState+0x4c>
 80137d0:	6823      	ldr	r3, [r4, #0]
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	075b      	lsls	r3, r3, #29
 80137d6:	d5d7      	bpl.n	8013788 <UART_CheckIdleState+0x1c>
 80137d8:	e7e4      	b.n	80137a4 <UART_CheckIdleState+0x38>
 80137da:	46c0      	nop			; (mov r8, r8)
 80137dc:	40013800 	.word	0x40013800
 80137e0:	40004400 	.word	0x40004400
 80137e4:	40004800 	.word	0x40004800

080137e8 <HAL_UART_Init>:
{
 80137e8:	b510      	push	{r4, lr}
 80137ea:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80137ec:	d02a      	beq.n	8013844 <HAL_UART_Init+0x5c>
  if(huart->State == HAL_UART_STATE_RESET)
 80137ee:	2369      	movs	r3, #105	; 0x69
 80137f0:	5cc3      	ldrb	r3, [r0, r3]
 80137f2:	b2db      	uxtb	r3, r3
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d020      	beq.n	801383a <HAL_UART_Init+0x52>
  huart->State = HAL_UART_STATE_BUSY;
 80137f8:	2369      	movs	r3, #105	; 0x69
 80137fa:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 80137fc:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 80137fe:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8013800:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013802:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8013804:	6813      	ldr	r3, [r2, #0]
 8013806:	438b      	bics	r3, r1
 8013808:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801380a:	f7ff fdab 	bl	8013364 <UART_SetConfig>
 801380e:	2801      	cmp	r0, #1
 8013810:	d018      	beq.n	8013844 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013814:	2b00      	cmp	r3, #0
 8013816:	d117      	bne.n	8013848 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013818:	6823      	ldr	r3, [r4, #0]
 801381a:	490d      	ldr	r1, [pc, #52]	; (8013850 <HAL_UART_Init+0x68>)
 801381c:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 801381e:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013820:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013822:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013824:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013826:	689a      	ldr	r2, [r3, #8]
 8013828:	438a      	bics	r2, r1
 801382a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 801382c:	681a      	ldr	r2, [r3, #0]
 801382e:	3929      	subs	r1, #41	; 0x29
 8013830:	430a      	orrs	r2, r1
 8013832:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8013834:	f7ff ff9a 	bl	801376c <UART_CheckIdleState>
}
 8013838:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 801383a:	2268      	movs	r2, #104	; 0x68
 801383c:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 801383e:	f7fa fac1 	bl	800ddc4 <HAL_UART_MspInit>
 8013842:	e7d9      	b.n	80137f8 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8013844:	2001      	movs	r0, #1
 8013846:	e7f7      	b.n	8013838 <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 8013848:	0020      	movs	r0, r4
 801384a:	f7ff fe77 	bl	801353c <UART_AdvFeatureConfig>
 801384e:	e7e3      	b.n	8013818 <HAL_UART_Init+0x30>
 8013850:	ffffb7ff 	.word	0xffffb7ff

08013854 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013854:	2269      	movs	r2, #105	; 0x69
{
 8013856:	b530      	push	{r4, r5, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013858:	5c81      	ldrb	r1, [r0, r2]
{
 801385a:	0003      	movs	r3, r0
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801385c:	2912      	cmp	r1, #18
 801385e:	d003      	beq.n	8013868 <UART_Transmit_IT+0x14>
 8013860:	5c82      	ldrb	r2, [r0, r2]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8013862:	2002      	movs	r0, #2
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013864:	2a32      	cmp	r2, #50	; 0x32
 8013866:	d112      	bne.n	801388e <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8013868:	2252      	movs	r2, #82	; 0x52
 801386a:	5a9a      	ldrh	r2, [r3, r2]
 801386c:	6819      	ldr	r1, [r3, #0]
 801386e:	2a00      	cmp	r2, #0
 8013870:	d00e      	beq.n	8013890 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013872:	2480      	movs	r4, #128	; 0x80
 8013874:	689d      	ldr	r5, [r3, #8]
 8013876:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013878:	0164      	lsls	r4, r4, #5
 801387a:	42a5      	cmp	r5, r4
 801387c:	d012      	beq.n	80138a4 <UART_Transmit_IT+0x50>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 801387e:	1c44      	adds	r4, r0, #1
 8013880:	64dc      	str	r4, [r3, #76]	; 0x4c
 8013882:	7800      	ldrb	r0, [r0, #0]
 8013884:	8508      	strh	r0, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8013886:	2152      	movs	r1, #82	; 0x52
      return HAL_OK;
 8013888:	2000      	movs	r0, #0
      huart->TxXferCount--;
 801388a:	3a01      	subs	r2, #1
 801388c:	525a      	strh	r2, [r3, r1]
  }
}
 801388e:	bd30      	pop	{r4, r5, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013890:	680b      	ldr	r3, [r1, #0]
 8013892:	3280      	adds	r2, #128	; 0x80
 8013894:	4393      	bics	r3, r2
 8013896:	600b      	str	r3, [r1, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013898:	680b      	ldr	r3, [r1, #0]
 801389a:	3a40      	subs	r2, #64	; 0x40
 801389c:	4313      	orrs	r3, r2
 801389e:	600b      	str	r3, [r1, #0]
      return HAL_OK;
 80138a0:	2000      	movs	r0, #0
 80138a2:	e7f4      	b.n	801388e <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80138a4:	691c      	ldr	r4, [r3, #16]
 80138a6:	2c00      	cmp	r4, #0
 80138a8:	d1e9      	bne.n	801387e <UART_Transmit_IT+0x2a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80138aa:	8804      	ldrh	r4, [r0, #0]
        huart->pTxBuffPtr += 2;
 80138ac:	3002      	adds	r0, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80138ae:	05e4      	lsls	r4, r4, #23
 80138b0:	0de4      	lsrs	r4, r4, #23
 80138b2:	850c      	strh	r4, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80138b4:	64d8      	str	r0, [r3, #76]	; 0x4c
 80138b6:	e7e6      	b.n	8013886 <UART_Transmit_IT+0x32>

080138b8 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80138b8:	2140      	movs	r1, #64	; 0x40
 80138ba:	6803      	ldr	r3, [r0, #0]
{
 80138bc:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80138be:	681a      	ldr	r2, [r3, #0]
 80138c0:	438a      	bics	r2, r1
 80138c2:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80138c4:	2269      	movs	r2, #105	; 0x69
 80138c6:	5c81      	ldrb	r1, [r0, r2]
 80138c8:	2932      	cmp	r1, #50	; 0x32
 80138ca:	d008      	beq.n	80138de <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80138cc:	2401      	movs	r4, #1
 80138ce:	6899      	ldr	r1, [r3, #8]
 80138d0:	43a1      	bics	r1, r4
 80138d2:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 80138d4:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 80138d6:	f7f9 ffaf 	bl	800d838 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80138da:	2000      	movs	r0, #0
 80138dc:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 80138de:	2322      	movs	r3, #34	; 0x22
 80138e0:	5483      	strb	r3, [r0, r2]
 80138e2:	e7f8      	b.n	80138d6 <UART_EndTransmit_IT+0x1e>

080138e4 <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80138e4:	2369      	movs	r3, #105	; 0x69
{
 80138e6:	b570      	push	{r4, r5, r6, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80138e8:	5cc2      	ldrb	r2, [r0, r3]
 80138ea:	2a22      	cmp	r2, #34	; 0x22
 80138ec:	d003      	beq.n	80138f6 <UART_Receive_IT+0x12>
 80138ee:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80138f0:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80138f2:	2b32      	cmp	r3, #50	; 0x32
 80138f4:	d12b      	bne.n	801394e <UART_Receive_IT+0x6a>
  uint16_t uhMask = huart->Mask;
 80138f6:	235c      	movs	r3, #92	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80138f8:	2180      	movs	r1, #128	; 0x80
 80138fa:	6885      	ldr	r5, [r0, #8]
  uint16_t uhMask = huart->Mask;
 80138fc:	5ac3      	ldrh	r3, [r0, r3]
 80138fe:	6804      	ldr	r4, [r0, #0]
 8013900:	6d42      	ldr	r2, [r0, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013902:	0149      	lsls	r1, r1, #5
 8013904:	428d      	cmp	r5, r1
 8013906:	d024      	beq.n	8013952 <UART_Receive_IT+0x6e>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013908:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801390a:	1c54      	adds	r4, r2, #1
 801390c:	400b      	ands	r3, r1
 801390e:	6544      	str	r4, [r0, #84]	; 0x54
 8013910:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8013912:	225a      	movs	r2, #90	; 0x5a
 8013914:	5a83      	ldrh	r3, [r0, r2]
 8013916:	3b01      	subs	r3, #1
 8013918:	b29b      	uxth	r3, r3
 801391a:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 801391c:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 801391e:	2b00      	cmp	r3, #0
 8013920:	d115      	bne.n	801394e <UART_Receive_IT+0x6a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013922:	2120      	movs	r1, #32
 8013924:	6803      	ldr	r3, [r0, #0]
 8013926:	681a      	ldr	r2, [r3, #0]
 8013928:	438a      	bics	r2, r1
 801392a:	601a      	str	r2, [r3, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801392c:	2269      	movs	r2, #105	; 0x69
 801392e:	5c81      	ldrb	r1, [r0, r2]
 8013930:	2932      	cmp	r1, #50	; 0x32
 8013932:	d017      	beq.n	8013964 <UART_Receive_IT+0x80>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013934:	6819      	ldr	r1, [r3, #0]
 8013936:	4c0d      	ldr	r4, [pc, #52]	; (801396c <UART_Receive_IT+0x88>)
 8013938:	4021      	ands	r1, r4
 801393a:	6019      	str	r1, [r3, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801393c:	6899      	ldr	r1, [r3, #8]
 801393e:	3403      	adds	r4, #3
 8013940:	34ff      	adds	r4, #255	; 0xff
 8013942:	43a1      	bics	r1, r4
 8013944:	6099      	str	r1, [r3, #8]
        huart->State = HAL_UART_STATE_READY;
 8013946:	5484      	strb	r4, [r0, r2]
      HAL_UART_RxCpltCallback(huart);
 8013948:	f7f9 ffb2 	bl	800d8b0 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 801394c:	2200      	movs	r2, #0
  }
}
 801394e:	0010      	movs	r0, r2
 8013950:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013952:	6901      	ldr	r1, [r0, #16]
 8013954:	2900      	cmp	r1, #0
 8013956:	d1d7      	bne.n	8013908 <UART_Receive_IT+0x24>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8013958:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801395a:	400b      	ands	r3, r1
 801395c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 801395e:	3202      	adds	r2, #2
 8013960:	6542      	str	r2, [r0, #84]	; 0x54
 8013962:	e7d6      	b.n	8013912 <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8013964:	2312      	movs	r3, #18
 8013966:	5483      	strb	r3, [r0, r2]
 8013968:	e7ee      	b.n	8013948 <UART_Receive_IT+0x64>
 801396a:	46c0      	nop			; (mov r8, r8)
 801396c:	fffffeff 	.word	0xfffffeff

08013970 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8013970:	4770      	bx	lr
 8013972:	46c0      	nop			; (mov r8, r8)

08013974 <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8013974:	2201      	movs	r2, #1
 8013976:	6803      	ldr	r3, [r0, #0]
{
 8013978:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 801397a:	69d9      	ldr	r1, [r3, #28]
{
 801397c:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 801397e:	420a      	tst	r2, r1
 8013980:	d002      	beq.n	8013988 <HAL_UART_IRQHandler+0x14>
 8013982:	6819      	ldr	r1, [r3, #0]
 8013984:	05c9      	lsls	r1, r1, #23
 8013986:	d456      	bmi.n	8013a36 <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013988:	2202      	movs	r2, #2
 801398a:	69d9      	ldr	r1, [r3, #28]
 801398c:	420a      	tst	r2, r1
 801398e:	d003      	beq.n	8013998 <HAL_UART_IRQHandler+0x24>
 8013990:	2101      	movs	r1, #1
 8013992:	6898      	ldr	r0, [r3, #8]
 8013994:	4201      	tst	r1, r0
 8013996:	d146      	bne.n	8013a26 <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013998:	2204      	movs	r2, #4
 801399a:	69d9      	ldr	r1, [r3, #28]
 801399c:	420a      	tst	r2, r1
 801399e:	d003      	beq.n	80139a8 <HAL_UART_IRQHandler+0x34>
 80139a0:	2101      	movs	r1, #1
 80139a2:	6898      	ldr	r0, [r3, #8]
 80139a4:	4201      	tst	r1, r0
 80139a6:	d136      	bne.n	8013a16 <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80139a8:	2208      	movs	r2, #8
 80139aa:	69d9      	ldr	r1, [r3, #28]
 80139ac:	420a      	tst	r2, r1
 80139ae:	d003      	beq.n	80139b8 <HAL_UART_IRQHandler+0x44>
 80139b0:	2101      	movs	r1, #1
 80139b2:	6898      	ldr	r0, [r3, #8]
 80139b4:	4201      	tst	r1, r0
 80139b6:	d120      	bne.n	80139fa <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80139b8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80139ba:	2a00      	cmp	r2, #0
 80139bc:	d126      	bne.n	8013a0c <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80139be:	2280      	movs	r2, #128	; 0x80
 80139c0:	69d9      	ldr	r1, [r3, #28]
 80139c2:	0352      	lsls	r2, r2, #13
 80139c4:	4211      	tst	r1, r2
 80139c6:	d002      	beq.n	80139ce <HAL_UART_IRQHandler+0x5a>
 80139c8:	6899      	ldr	r1, [r3, #8]
 80139ca:	0249      	lsls	r1, r1, #9
 80139cc:	d43e      	bmi.n	8013a4c <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80139ce:	2220      	movs	r2, #32
 80139d0:	69d9      	ldr	r1, [r3, #28]
 80139d2:	420a      	tst	r2, r1
 80139d4:	d002      	beq.n	80139dc <HAL_UART_IRQHandler+0x68>
 80139d6:	6819      	ldr	r1, [r3, #0]
 80139d8:	420a      	tst	r2, r1
 80139da:	d140      	bne.n	8013a5e <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 80139dc:	2280      	movs	r2, #128	; 0x80
 80139de:	69d9      	ldr	r1, [r3, #28]
 80139e0:	420a      	tst	r2, r1
 80139e2:	d002      	beq.n	80139ea <HAL_UART_IRQHandler+0x76>
 80139e4:	6819      	ldr	r1, [r3, #0]
 80139e6:	420a      	tst	r2, r1
 80139e8:	d142      	bne.n	8013a70 <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 80139ea:	2240      	movs	r2, #64	; 0x40
 80139ec:	69d9      	ldr	r1, [r3, #28]
 80139ee:	420a      	tst	r2, r1
 80139f0:	d002      	beq.n	80139f8 <HAL_UART_IRQHandler+0x84>
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	421a      	tst	r2, r3
 80139f6:	d125      	bne.n	8013a44 <HAL_UART_IRQHandler+0xd0>
}
 80139f8:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80139fa:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80139fc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80139fe:	4302      	orrs	r2, r0
 8013a00:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013a02:	2269      	movs	r2, #105	; 0x69
 8013a04:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013a06:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8013a08:	2a00      	cmp	r2, #0
 8013a0a:	d0d8      	beq.n	80139be <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 8013a0c:	0020      	movs	r0, r4
 8013a0e:	f7f9 ff2b 	bl	800d868 <HAL_UART_ErrorCallback>
 8013a12:	6823      	ldr	r3, [r4, #0]
 8013a14:	e7d3      	b.n	80139be <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013a16:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013a18:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013a1a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8013a1c:	4302      	orrs	r2, r0
 8013a1e:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013a20:	2269      	movs	r2, #105	; 0x69
 8013a22:	54a1      	strb	r1, [r4, r2]
 8013a24:	e7c0      	b.n	80139a8 <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013a26:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8013a28:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013a2a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8013a2c:	4302      	orrs	r2, r0
 8013a2e:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013a30:	2269      	movs	r2, #105	; 0x69
 8013a32:	54a1      	strb	r1, [r4, r2]
 8013a34:	e7b0      	b.n	8013998 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8013a36:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013a38:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8013a3a:	4311      	orrs	r1, r2
 8013a3c:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013a3e:	2169      	movs	r1, #105	; 0x69
 8013a40:	5442      	strb	r2, [r0, r1]
 8013a42:	e7a1      	b.n	8013988 <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 8013a44:	0020      	movs	r0, r4
 8013a46:	f7ff ff37 	bl	80138b8 <UART_EndTransmit_IT>
}
 8013a4a:	e7d5      	b.n	80139f8 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8013a4c:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8013a4e:	2369      	movs	r3, #105	; 0x69
 8013a50:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 8013a52:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 8013a54:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8013a56:	f7ff ff8b 	bl	8013970 <HAL_UARTEx_WakeupCallback>
 8013a5a:	6823      	ldr	r3, [r4, #0]
 8013a5c:	e7b7      	b.n	80139ce <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 8013a5e:	0020      	movs	r0, r4
 8013a60:	f7ff ff40 	bl	80138e4 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013a64:	2108      	movs	r1, #8
 8013a66:	6823      	ldr	r3, [r4, #0]
 8013a68:	699a      	ldr	r2, [r3, #24]
 8013a6a:	430a      	orrs	r2, r1
 8013a6c:	619a      	str	r2, [r3, #24]
 8013a6e:	e7b5      	b.n	80139dc <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 8013a70:	0020      	movs	r0, r4
 8013a72:	f7ff feef 	bl	8013854 <UART_Transmit_IT>
 8013a76:	6823      	ldr	r3, [r4, #0]
 8013a78:	e7b7      	b.n	80139ea <HAL_UART_IRQHandler+0x76>
 8013a7a:	46c0      	nop			; (mov r8, r8)

08013a7c <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8013a7c:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8013a7e:	f7f0 ff67 	bl	8004950 <Module_Init>
 8013a82:	e7fe      	b.n	8013a82 <main+0x6>

08013a84 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8013a84:	e7fe      	b.n	8013a84 <UserTask>
 8013a86:	46c0      	nop			; (mov r8, r8)

08013a88 <atof>:
 8013a88:	b510      	push	{r4, lr}
 8013a8a:	2100      	movs	r1, #0
 8013a8c:	f001 fb74 	bl	8015178 <strtod>
 8013a90:	bd10      	pop	{r4, pc}

08013a92 <atoi>:
 8013a92:	b510      	push	{r4, lr}
 8013a94:	220a      	movs	r2, #10
 8013a96:	2100      	movs	r1, #0
 8013a98:	f001 fc3a 	bl	8015310 <strtol>
 8013a9c:	bd10      	pop	{r4, pc}

08013a9e <atol>:
 8013a9e:	b510      	push	{r4, lr}
 8013aa0:	220a      	movs	r2, #10
 8013aa2:	2100      	movs	r1, #0
 8013aa4:	f001 fc34 	bl	8015310 <strtol>
 8013aa8:	bd10      	pop	{r4, pc}
	...

08013aac <calloc>:
 8013aac:	b510      	push	{r4, lr}
 8013aae:	4b03      	ldr	r3, [pc, #12]	; (8013abc <calloc+0x10>)
 8013ab0:	000a      	movs	r2, r1
 8013ab2:	0001      	movs	r1, r0
 8013ab4:	6818      	ldr	r0, [r3, #0]
 8013ab6:	f000 f803 	bl	8013ac0 <_calloc_r>
 8013aba:	bd10      	pop	{r4, pc}
 8013abc:	200000c8 	.word	0x200000c8

08013ac0 <_calloc_r>:
 8013ac0:	b510      	push	{r4, lr}
 8013ac2:	4351      	muls	r1, r2
 8013ac4:	f000 f872 	bl	8013bac <_malloc_r>
 8013ac8:	1e04      	subs	r4, r0, #0
 8013aca:	d01a      	beq.n	8013b02 <_calloc_r+0x42>
 8013acc:	0003      	movs	r3, r0
 8013ace:	3b08      	subs	r3, #8
 8013ad0:	685a      	ldr	r2, [r3, #4]
 8013ad2:	2303      	movs	r3, #3
 8013ad4:	439a      	bics	r2, r3
 8013ad6:	3a04      	subs	r2, #4
 8013ad8:	2a24      	cmp	r2, #36	; 0x24
 8013ada:	d819      	bhi.n	8013b10 <_calloc_r+0x50>
 8013adc:	0003      	movs	r3, r0
 8013ade:	2a13      	cmp	r2, #19
 8013ae0:	d90b      	bls.n	8013afa <_calloc_r+0x3a>
 8013ae2:	2100      	movs	r1, #0
 8013ae4:	3308      	adds	r3, #8
 8013ae6:	6001      	str	r1, [r0, #0]
 8013ae8:	6041      	str	r1, [r0, #4]
 8013aea:	2a1b      	cmp	r2, #27
 8013aec:	d905      	bls.n	8013afa <_calloc_r+0x3a>
 8013aee:	6081      	str	r1, [r0, #8]
 8013af0:	60c1      	str	r1, [r0, #12]
 8013af2:	2a24      	cmp	r2, #36	; 0x24
 8013af4:	d007      	beq.n	8013b06 <_calloc_r+0x46>
 8013af6:	0003      	movs	r3, r0
 8013af8:	3310      	adds	r3, #16
 8013afa:	2200      	movs	r2, #0
 8013afc:	601a      	str	r2, [r3, #0]
 8013afe:	605a      	str	r2, [r3, #4]
 8013b00:	609a      	str	r2, [r3, #8]
 8013b02:	0020      	movs	r0, r4
 8013b04:	bd10      	pop	{r4, pc}
 8013b06:	0003      	movs	r3, r0
 8013b08:	6101      	str	r1, [r0, #16]
 8013b0a:	3318      	adds	r3, #24
 8013b0c:	6141      	str	r1, [r0, #20]
 8013b0e:	e7f4      	b.n	8013afa <_calloc_r+0x3a>
 8013b10:	2100      	movs	r1, #0
 8013b12:	f000 fa8d 	bl	8014030 <memset>
 8013b16:	e7f4      	b.n	8013b02 <_calloc_r+0x42>

08013b18 <__libc_init_array>:
 8013b18:	b570      	push	{r4, r5, r6, lr}
 8013b1a:	2600      	movs	r6, #0
 8013b1c:	4d0c      	ldr	r5, [pc, #48]	; (8013b50 <__libc_init_array+0x38>)
 8013b1e:	4c0d      	ldr	r4, [pc, #52]	; (8013b54 <__libc_init_array+0x3c>)
 8013b20:	1b64      	subs	r4, r4, r5
 8013b22:	10a4      	asrs	r4, r4, #2
 8013b24:	42a6      	cmp	r6, r4
 8013b26:	d109      	bne.n	8013b3c <__libc_init_array+0x24>
 8013b28:	2600      	movs	r6, #0
 8013b2a:	f004 fe41 	bl	80187b0 <_init>
 8013b2e:	4d0a      	ldr	r5, [pc, #40]	; (8013b58 <__libc_init_array+0x40>)
 8013b30:	4c0a      	ldr	r4, [pc, #40]	; (8013b5c <__libc_init_array+0x44>)
 8013b32:	1b64      	subs	r4, r4, r5
 8013b34:	10a4      	asrs	r4, r4, #2
 8013b36:	42a6      	cmp	r6, r4
 8013b38:	d105      	bne.n	8013b46 <__libc_init_array+0x2e>
 8013b3a:	bd70      	pop	{r4, r5, r6, pc}
 8013b3c:	00b3      	lsls	r3, r6, #2
 8013b3e:	58eb      	ldr	r3, [r5, r3]
 8013b40:	4798      	blx	r3
 8013b42:	3601      	adds	r6, #1
 8013b44:	e7ee      	b.n	8013b24 <__libc_init_array+0xc>
 8013b46:	00b3      	lsls	r3, r6, #2
 8013b48:	58eb      	ldr	r3, [r5, r3]
 8013b4a:	4798      	blx	r3
 8013b4c:	3601      	adds	r6, #1
 8013b4e:	e7f2      	b.n	8013b36 <__libc_init_array+0x1e>
 8013b50:	0801c22c 	.word	0x0801c22c
 8013b54:	0801c22c 	.word	0x0801c22c
 8013b58:	0801c22c 	.word	0x0801c22c
 8013b5c:	0801c234 	.word	0x0801c234

08013b60 <__locale_ctype_ptr_l>:
 8013b60:	30ec      	adds	r0, #236	; 0xec
 8013b62:	6800      	ldr	r0, [r0, #0]
 8013b64:	4770      	bx	lr
	...

08013b68 <__locale_ctype_ptr>:
 8013b68:	4b04      	ldr	r3, [pc, #16]	; (8013b7c <__locale_ctype_ptr+0x14>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d100      	bne.n	8013b74 <__locale_ctype_ptr+0xc>
 8013b72:	4b03      	ldr	r3, [pc, #12]	; (8013b80 <__locale_ctype_ptr+0x18>)
 8013b74:	33ec      	adds	r3, #236	; 0xec
 8013b76:	6818      	ldr	r0, [r3, #0]
 8013b78:	4770      	bx	lr
 8013b7a:	46c0      	nop			; (mov r8, r8)
 8013b7c:	200000c8 	.word	0x200000c8
 8013b80:	200004f8 	.word	0x200004f8

08013b84 <malloc>:
 8013b84:	b510      	push	{r4, lr}
 8013b86:	4b03      	ldr	r3, [pc, #12]	; (8013b94 <malloc+0x10>)
 8013b88:	0001      	movs	r1, r0
 8013b8a:	6818      	ldr	r0, [r3, #0]
 8013b8c:	f000 f80e 	bl	8013bac <_malloc_r>
 8013b90:	bd10      	pop	{r4, pc}
 8013b92:	46c0      	nop			; (mov r8, r8)
 8013b94:	200000c8 	.word	0x200000c8

08013b98 <free>:
 8013b98:	b510      	push	{r4, lr}
 8013b9a:	4b03      	ldr	r3, [pc, #12]	; (8013ba8 <free+0x10>)
 8013b9c:	0001      	movs	r1, r0
 8013b9e:	6818      	ldr	r0, [r3, #0]
 8013ba0:	f003 fd10 	bl	80175c4 <_free_r>
 8013ba4:	bd10      	pop	{r4, pc}
 8013ba6:	46c0      	nop			; (mov r8, r8)
 8013ba8:	200000c8 	.word	0x200000c8

08013bac <_malloc_r>:
 8013bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bae:	000d      	movs	r5, r1
 8013bb0:	b085      	sub	sp, #20
 8013bb2:	350b      	adds	r5, #11
 8013bb4:	9001      	str	r0, [sp, #4]
 8013bb6:	2d16      	cmp	r5, #22
 8013bb8:	d908      	bls.n	8013bcc <_malloc_r+0x20>
 8013bba:	2307      	movs	r3, #7
 8013bbc:	439d      	bics	r5, r3
 8013bbe:	d506      	bpl.n	8013bce <_malloc_r+0x22>
 8013bc0:	230c      	movs	r3, #12
 8013bc2:	9a01      	ldr	r2, [sp, #4]
 8013bc4:	6013      	str	r3, [r2, #0]
 8013bc6:	2000      	movs	r0, #0
 8013bc8:	b005      	add	sp, #20
 8013bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bcc:	2510      	movs	r5, #16
 8013bce:	428d      	cmp	r5, r1
 8013bd0:	d3f6      	bcc.n	8013bc0 <_malloc_r+0x14>
 8013bd2:	9801      	ldr	r0, [sp, #4]
 8013bd4:	f000 fa34 	bl	8014040 <__malloc_lock>
 8013bd8:	23f8      	movs	r3, #248	; 0xf8
 8013bda:	33ff      	adds	r3, #255	; 0xff
 8013bdc:	4ac4      	ldr	r2, [pc, #784]	; (8013ef0 <_malloc_r+0x344>)
 8013bde:	429d      	cmp	r5, r3
 8013be0:	d820      	bhi.n	8013c24 <_malloc_r+0x78>
 8013be2:	0029      	movs	r1, r5
 8013be4:	3108      	adds	r1, #8
 8013be6:	1851      	adds	r1, r2, r1
 8013be8:	0008      	movs	r0, r1
 8013bea:	684c      	ldr	r4, [r1, #4]
 8013bec:	3808      	subs	r0, #8
 8013bee:	08eb      	lsrs	r3, r5, #3
 8013bf0:	4284      	cmp	r4, r0
 8013bf2:	d104      	bne.n	8013bfe <_malloc_r+0x52>
 8013bf4:	68cc      	ldr	r4, [r1, #12]
 8013bf6:	3302      	adds	r3, #2
 8013bf8:	469c      	mov	ip, r3
 8013bfa:	42a1      	cmp	r1, r4
 8013bfc:	d02a      	beq.n	8013c54 <_malloc_r+0xa8>
 8013bfe:	2303      	movs	r3, #3
 8013c00:	6862      	ldr	r2, [r4, #4]
 8013c02:	68a1      	ldr	r1, [r4, #8]
 8013c04:	439a      	bics	r2, r3
 8013c06:	0013      	movs	r3, r2
 8013c08:	68e2      	ldr	r2, [r4, #12]
 8013c0a:	18e3      	adds	r3, r4, r3
 8013c0c:	60ca      	str	r2, [r1, #12]
 8013c0e:	6091      	str	r1, [r2, #8]
 8013c10:	2201      	movs	r2, #1
 8013c12:	6859      	ldr	r1, [r3, #4]
 8013c14:	430a      	orrs	r2, r1
 8013c16:	605a      	str	r2, [r3, #4]
 8013c18:	9801      	ldr	r0, [sp, #4]
 8013c1a:	f000 fa19 	bl	8014050 <__malloc_unlock>
 8013c1e:	0020      	movs	r0, r4
 8013c20:	3008      	adds	r0, #8
 8013c22:	e7d1      	b.n	8013bc8 <_malloc_r+0x1c>
 8013c24:	0a69      	lsrs	r1, r5, #9
 8013c26:	233f      	movs	r3, #63	; 0x3f
 8013c28:	2900      	cmp	r1, #0
 8013c2a:	d003      	beq.n	8013c34 <_malloc_r+0x88>
 8013c2c:	2904      	cmp	r1, #4
 8013c2e:	d828      	bhi.n	8013c82 <_malloc_r+0xd6>
 8013c30:	09ab      	lsrs	r3, r5, #6
 8013c32:	3338      	adds	r3, #56	; 0x38
 8013c34:	2103      	movs	r1, #3
 8013c36:	468c      	mov	ip, r1
 8013c38:	00d8      	lsls	r0, r3, #3
 8013c3a:	1880      	adds	r0, r0, r2
 8013c3c:	68c4      	ldr	r4, [r0, #12]
 8013c3e:	4284      	cmp	r4, r0
 8013c40:	d006      	beq.n	8013c50 <_malloc_r+0xa4>
 8013c42:	4666      	mov	r6, ip
 8013c44:	6861      	ldr	r1, [r4, #4]
 8013c46:	43b1      	bics	r1, r6
 8013c48:	1b4f      	subs	r7, r1, r5
 8013c4a:	2f0f      	cmp	r7, #15
 8013c4c:	dd31      	ble.n	8013cb2 <_malloc_r+0x106>
 8013c4e:	3b01      	subs	r3, #1
 8013c50:	3301      	adds	r3, #1
 8013c52:	469c      	mov	ip, r3
 8013c54:	6914      	ldr	r4, [r2, #16]
 8013c56:	49a7      	ldr	r1, [pc, #668]	; (8013ef4 <_malloc_r+0x348>)
 8013c58:	428c      	cmp	r4, r1
 8013c5a:	d055      	beq.n	8013d08 <_malloc_r+0x15c>
 8013c5c:	2303      	movs	r3, #3
 8013c5e:	6860      	ldr	r0, [r4, #4]
 8013c60:	4398      	bics	r0, r3
 8013c62:	0003      	movs	r3, r0
 8013c64:	1b46      	subs	r6, r0, r5
 8013c66:	2e0f      	cmp	r6, #15
 8013c68:	dd31      	ble.n	8013cce <_malloc_r+0x122>
 8013c6a:	2701      	movs	r7, #1
 8013c6c:	1960      	adds	r0, r4, r5
 8013c6e:	433d      	orrs	r5, r7
 8013c70:	4337      	orrs	r7, r6
 8013c72:	6065      	str	r5, [r4, #4]
 8013c74:	6150      	str	r0, [r2, #20]
 8013c76:	6110      	str	r0, [r2, #16]
 8013c78:	60c1      	str	r1, [r0, #12]
 8013c7a:	6081      	str	r1, [r0, #8]
 8013c7c:	6047      	str	r7, [r0, #4]
 8013c7e:	50e6      	str	r6, [r4, r3]
 8013c80:	e7ca      	b.n	8013c18 <_malloc_r+0x6c>
 8013c82:	2914      	cmp	r1, #20
 8013c84:	d802      	bhi.n	8013c8c <_malloc_r+0xe0>
 8013c86:	000b      	movs	r3, r1
 8013c88:	335b      	adds	r3, #91	; 0x5b
 8013c8a:	e7d3      	b.n	8013c34 <_malloc_r+0x88>
 8013c8c:	2954      	cmp	r1, #84	; 0x54
 8013c8e:	d802      	bhi.n	8013c96 <_malloc_r+0xea>
 8013c90:	0b2b      	lsrs	r3, r5, #12
 8013c92:	336e      	adds	r3, #110	; 0x6e
 8013c94:	e7ce      	b.n	8013c34 <_malloc_r+0x88>
 8013c96:	23aa      	movs	r3, #170	; 0xaa
 8013c98:	005b      	lsls	r3, r3, #1
 8013c9a:	4299      	cmp	r1, r3
 8013c9c:	d802      	bhi.n	8013ca4 <_malloc_r+0xf8>
 8013c9e:	0beb      	lsrs	r3, r5, #15
 8013ca0:	3377      	adds	r3, #119	; 0x77
 8013ca2:	e7c7      	b.n	8013c34 <_malloc_r+0x88>
 8013ca4:	4894      	ldr	r0, [pc, #592]	; (8013ef8 <_malloc_r+0x34c>)
 8013ca6:	237e      	movs	r3, #126	; 0x7e
 8013ca8:	4281      	cmp	r1, r0
 8013caa:	d8c3      	bhi.n	8013c34 <_malloc_r+0x88>
 8013cac:	0cab      	lsrs	r3, r5, #18
 8013cae:	337c      	adds	r3, #124	; 0x7c
 8013cb0:	e7c0      	b.n	8013c34 <_malloc_r+0x88>
 8013cb2:	68e6      	ldr	r6, [r4, #12]
 8013cb4:	2f00      	cmp	r7, #0
 8013cb6:	db08      	blt.n	8013cca <_malloc_r+0x11e>
 8013cb8:	68a3      	ldr	r3, [r4, #8]
 8013cba:	1861      	adds	r1, r4, r1
 8013cbc:	60de      	str	r6, [r3, #12]
 8013cbe:	60b3      	str	r3, [r6, #8]
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	684a      	ldr	r2, [r1, #4]
 8013cc4:	4313      	orrs	r3, r2
 8013cc6:	604b      	str	r3, [r1, #4]
 8013cc8:	e7a6      	b.n	8013c18 <_malloc_r+0x6c>
 8013cca:	0034      	movs	r4, r6
 8013ccc:	e7b7      	b.n	8013c3e <_malloc_r+0x92>
 8013cce:	6151      	str	r1, [r2, #20]
 8013cd0:	6111      	str	r1, [r2, #16]
 8013cd2:	2e00      	cmp	r6, #0
 8013cd4:	db05      	blt.n	8013ce2 <_malloc_r+0x136>
 8013cd6:	2101      	movs	r1, #1
 8013cd8:	1823      	adds	r3, r4, r0
 8013cda:	685a      	ldr	r2, [r3, #4]
 8013cdc:	4311      	orrs	r1, r2
 8013cde:	6059      	str	r1, [r3, #4]
 8013ce0:	e79a      	b.n	8013c18 <_malloc_r+0x6c>
 8013ce2:	4986      	ldr	r1, [pc, #536]	; (8013efc <_malloc_r+0x350>)
 8013ce4:	6857      	ldr	r7, [r2, #4]
 8013ce6:	4288      	cmp	r0, r1
 8013ce8:	d900      	bls.n	8013cec <_malloc_r+0x140>
 8013cea:	e090      	b.n	8013e0e <_malloc_r+0x262>
 8013cec:	08c3      	lsrs	r3, r0, #3
 8013cee:	39ff      	subs	r1, #255	; 0xff
 8013cf0:	1098      	asrs	r0, r3, #2
 8013cf2:	39ff      	subs	r1, #255	; 0xff
 8013cf4:	4081      	lsls	r1, r0
 8013cf6:	00db      	lsls	r3, r3, #3
 8013cf8:	4339      	orrs	r1, r7
 8013cfa:	6051      	str	r1, [r2, #4]
 8013cfc:	189a      	adds	r2, r3, r2
 8013cfe:	6893      	ldr	r3, [r2, #8]
 8013d00:	60e2      	str	r2, [r4, #12]
 8013d02:	60a3      	str	r3, [r4, #8]
 8013d04:	6094      	str	r4, [r2, #8]
 8013d06:	60dc      	str	r4, [r3, #12]
 8013d08:	4663      	mov	r3, ip
 8013d0a:	2201      	movs	r2, #1
 8013d0c:	4978      	ldr	r1, [pc, #480]	; (8013ef0 <_malloc_r+0x344>)
 8013d0e:	109b      	asrs	r3, r3, #2
 8013d10:	6848      	ldr	r0, [r1, #4]
 8013d12:	409a      	lsls	r2, r3
 8013d14:	4290      	cmp	r0, r2
 8013d16:	d32d      	bcc.n	8013d74 <_malloc_r+0x1c8>
 8013d18:	4202      	tst	r2, r0
 8013d1a:	d109      	bne.n	8013d30 <_malloc_r+0x184>
 8013d1c:	2303      	movs	r3, #3
 8013d1e:	4664      	mov	r4, ip
 8013d20:	439c      	bics	r4, r3
 8013d22:	0023      	movs	r3, r4
 8013d24:	3304      	adds	r3, #4
 8013d26:	469c      	mov	ip, r3
 8013d28:	0052      	lsls	r2, r2, #1
 8013d2a:	4202      	tst	r2, r0
 8013d2c:	d100      	bne.n	8013d30 <_malloc_r+0x184>
 8013d2e:	e0a4      	b.n	8013e7a <_malloc_r+0x2ce>
 8013d30:	4663      	mov	r3, ip
 8013d32:	00db      	lsls	r3, r3, #3
 8013d34:	18cb      	adds	r3, r1, r3
 8013d36:	9303      	str	r3, [sp, #12]
 8013d38:	001f      	movs	r7, r3
 8013d3a:	4663      	mov	r3, ip
 8013d3c:	9302      	str	r3, [sp, #8]
 8013d3e:	68fc      	ldr	r4, [r7, #12]
 8013d40:	42bc      	cmp	r4, r7
 8013d42:	d000      	beq.n	8013d46 <_malloc_r+0x19a>
 8013d44:	e09c      	b.n	8013e80 <_malloc_r+0x2d4>
 8013d46:	2003      	movs	r0, #3
 8013d48:	9b02      	ldr	r3, [sp, #8]
 8013d4a:	3708      	adds	r7, #8
 8013d4c:	3301      	adds	r3, #1
 8013d4e:	9302      	str	r3, [sp, #8]
 8013d50:	4203      	tst	r3, r0
 8013d52:	d1f4      	bne.n	8013d3e <_malloc_r+0x192>
 8013d54:	4663      	mov	r3, ip
 8013d56:	2003      	movs	r0, #3
 8013d58:	4203      	tst	r3, r0
 8013d5a:	d000      	beq.n	8013d5e <_malloc_r+0x1b2>
 8013d5c:	e0b3      	b.n	8013ec6 <_malloc_r+0x31a>
 8013d5e:	684b      	ldr	r3, [r1, #4]
 8013d60:	4393      	bics	r3, r2
 8013d62:	604b      	str	r3, [r1, #4]
 8013d64:	4b62      	ldr	r3, [pc, #392]	; (8013ef0 <_malloc_r+0x344>)
 8013d66:	0052      	lsls	r2, r2, #1
 8013d68:	685b      	ldr	r3, [r3, #4]
 8013d6a:	4293      	cmp	r3, r2
 8013d6c:	d302      	bcc.n	8013d74 <_malloc_r+0x1c8>
 8013d6e:	2a00      	cmp	r2, #0
 8013d70:	d000      	beq.n	8013d74 <_malloc_r+0x1c8>
 8013d72:	e0b9      	b.n	8013ee8 <_malloc_r+0x33c>
 8013d74:	2303      	movs	r3, #3
 8013d76:	688f      	ldr	r7, [r1, #8]
 8013d78:	687a      	ldr	r2, [r7, #4]
 8013d7a:	439a      	bics	r2, r3
 8013d7c:	9202      	str	r2, [sp, #8]
 8013d7e:	42aa      	cmp	r2, r5
 8013d80:	d303      	bcc.n	8013d8a <_malloc_r+0x1de>
 8013d82:	1b52      	subs	r2, r2, r5
 8013d84:	2a0f      	cmp	r2, #15
 8013d86:	dd00      	ble.n	8013d8a <_malloc_r+0x1de>
 8013d88:	e116      	b.n	8013fb8 <_malloc_r+0x40c>
 8013d8a:	4b5d      	ldr	r3, [pc, #372]	; (8013f00 <_malloc_r+0x354>)
 8013d8c:	2008      	movs	r0, #8
 8013d8e:	681e      	ldr	r6, [r3, #0]
 8013d90:	f002 fd26 	bl	80167e0 <sysconf>
 8013d94:	4b5b      	ldr	r3, [pc, #364]	; (8013f04 <_malloc_r+0x358>)
 8013d96:	3610      	adds	r6, #16
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	1976      	adds	r6, r6, r5
 8013d9c:	9003      	str	r0, [sp, #12]
 8013d9e:	3301      	adds	r3, #1
 8013da0:	d003      	beq.n	8013daa <_malloc_r+0x1fe>
 8013da2:	3e01      	subs	r6, #1
 8013da4:	1836      	adds	r6, r6, r0
 8013da6:	4243      	negs	r3, r0
 8013da8:	401e      	ands	r6, r3
 8013daa:	0031      	movs	r1, r6
 8013dac:	9801      	ldr	r0, [sp, #4]
 8013dae:	f000 fb27 	bl	8014400 <_sbrk_r>
 8013db2:	0004      	movs	r4, r0
 8013db4:	1c43      	adds	r3, r0, #1
 8013db6:	d100      	bne.n	8013dba <_malloc_r+0x20e>
 8013db8:	e0d6      	b.n	8013f68 <_malloc_r+0x3bc>
 8013dba:	9b02      	ldr	r3, [sp, #8]
 8013dbc:	18fb      	adds	r3, r7, r3
 8013dbe:	4283      	cmp	r3, r0
 8013dc0:	d903      	bls.n	8013dca <_malloc_r+0x21e>
 8013dc2:	4a4b      	ldr	r2, [pc, #300]	; (8013ef0 <_malloc_r+0x344>)
 8013dc4:	4297      	cmp	r7, r2
 8013dc6:	d000      	beq.n	8013dca <_malloc_r+0x21e>
 8013dc8:	e0ce      	b.n	8013f68 <_malloc_r+0x3bc>
 8013dca:	494f      	ldr	r1, [pc, #316]	; (8013f08 <_malloc_r+0x35c>)
 8013dcc:	680a      	ldr	r2, [r1, #0]
 8013dce:	18b2      	adds	r2, r6, r2
 8013dd0:	600a      	str	r2, [r1, #0]
 8013dd2:	9903      	ldr	r1, [sp, #12]
 8013dd4:	4694      	mov	ip, r2
 8013dd6:	1e48      	subs	r0, r1, #1
 8013dd8:	42a3      	cmp	r3, r4
 8013dda:	d000      	beq.n	8013dde <_malloc_r+0x232>
 8013ddc:	e09a      	b.n	8013f14 <_malloc_r+0x368>
 8013dde:	4203      	tst	r3, r0
 8013de0:	d000      	beq.n	8013de4 <_malloc_r+0x238>
 8013de2:	e097      	b.n	8013f14 <_malloc_r+0x368>
 8013de4:	9a02      	ldr	r2, [sp, #8]
 8013de6:	4b42      	ldr	r3, [pc, #264]	; (8013ef0 <_malloc_r+0x344>)
 8013de8:	1992      	adds	r2, r2, r6
 8013dea:	2601      	movs	r6, #1
 8013dec:	689b      	ldr	r3, [r3, #8]
 8013dee:	4316      	orrs	r6, r2
 8013df0:	605e      	str	r6, [r3, #4]
 8013df2:	4b45      	ldr	r3, [pc, #276]	; (8013f08 <_malloc_r+0x35c>)
 8013df4:	4a45      	ldr	r2, [pc, #276]	; (8013f0c <_malloc_r+0x360>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	6811      	ldr	r1, [r2, #0]
 8013dfa:	428b      	cmp	r3, r1
 8013dfc:	d900      	bls.n	8013e00 <_malloc_r+0x254>
 8013dfe:	6013      	str	r3, [r2, #0]
 8013e00:	4a43      	ldr	r2, [pc, #268]	; (8013f10 <_malloc_r+0x364>)
 8013e02:	6811      	ldr	r1, [r2, #0]
 8013e04:	428b      	cmp	r3, r1
 8013e06:	d800      	bhi.n	8013e0a <_malloc_r+0x25e>
 8013e08:	e0ae      	b.n	8013f68 <_malloc_r+0x3bc>
 8013e0a:	6013      	str	r3, [r2, #0]
 8013e0c:	e0ac      	b.n	8013f68 <_malloc_r+0x3bc>
 8013e0e:	0a40      	lsrs	r0, r0, #9
 8013e10:	2804      	cmp	r0, #4
 8013e12:	d810      	bhi.n	8013e36 <_malloc_r+0x28a>
 8013e14:	0999      	lsrs	r1, r3, #6
 8013e16:	3138      	adds	r1, #56	; 0x38
 8013e18:	00ce      	lsls	r6, r1, #3
 8013e1a:	18b6      	adds	r6, r6, r2
 8013e1c:	68b0      	ldr	r0, [r6, #8]
 8013e1e:	4286      	cmp	r6, r0
 8013e20:	d124      	bne.n	8013e6c <_malloc_r+0x2c0>
 8013e22:	2301      	movs	r3, #1
 8013e24:	1089      	asrs	r1, r1, #2
 8013e26:	408b      	lsls	r3, r1
 8013e28:	433b      	orrs	r3, r7
 8013e2a:	6053      	str	r3, [r2, #4]
 8013e2c:	60e6      	str	r6, [r4, #12]
 8013e2e:	60a0      	str	r0, [r4, #8]
 8013e30:	60b4      	str	r4, [r6, #8]
 8013e32:	60c4      	str	r4, [r0, #12]
 8013e34:	e768      	b.n	8013d08 <_malloc_r+0x15c>
 8013e36:	2814      	cmp	r0, #20
 8013e38:	d802      	bhi.n	8013e40 <_malloc_r+0x294>
 8013e3a:	0001      	movs	r1, r0
 8013e3c:	315b      	adds	r1, #91	; 0x5b
 8013e3e:	e7eb      	b.n	8013e18 <_malloc_r+0x26c>
 8013e40:	2854      	cmp	r0, #84	; 0x54
 8013e42:	d802      	bhi.n	8013e4a <_malloc_r+0x29e>
 8013e44:	0b19      	lsrs	r1, r3, #12
 8013e46:	316e      	adds	r1, #110	; 0x6e
 8013e48:	e7e6      	b.n	8013e18 <_malloc_r+0x26c>
 8013e4a:	21aa      	movs	r1, #170	; 0xaa
 8013e4c:	0049      	lsls	r1, r1, #1
 8013e4e:	4288      	cmp	r0, r1
 8013e50:	d802      	bhi.n	8013e58 <_malloc_r+0x2ac>
 8013e52:	0bd9      	lsrs	r1, r3, #15
 8013e54:	3177      	adds	r1, #119	; 0x77
 8013e56:	e7df      	b.n	8013e18 <_malloc_r+0x26c>
 8013e58:	4e27      	ldr	r6, [pc, #156]	; (8013ef8 <_malloc_r+0x34c>)
 8013e5a:	217e      	movs	r1, #126	; 0x7e
 8013e5c:	42b0      	cmp	r0, r6
 8013e5e:	d8db      	bhi.n	8013e18 <_malloc_r+0x26c>
 8013e60:	0c99      	lsrs	r1, r3, #18
 8013e62:	317c      	adds	r1, #124	; 0x7c
 8013e64:	e7d8      	b.n	8013e18 <_malloc_r+0x26c>
 8013e66:	6880      	ldr	r0, [r0, #8]
 8013e68:	4286      	cmp	r6, r0
 8013e6a:	d004      	beq.n	8013e76 <_malloc_r+0x2ca>
 8013e6c:	2103      	movs	r1, #3
 8013e6e:	6842      	ldr	r2, [r0, #4]
 8013e70:	438a      	bics	r2, r1
 8013e72:	429a      	cmp	r2, r3
 8013e74:	d8f7      	bhi.n	8013e66 <_malloc_r+0x2ba>
 8013e76:	68c6      	ldr	r6, [r0, #12]
 8013e78:	e7d8      	b.n	8013e2c <_malloc_r+0x280>
 8013e7a:	2304      	movs	r3, #4
 8013e7c:	449c      	add	ip, r3
 8013e7e:	e753      	b.n	8013d28 <_malloc_r+0x17c>
 8013e80:	2003      	movs	r0, #3
 8013e82:	6863      	ldr	r3, [r4, #4]
 8013e84:	4383      	bics	r3, r0
 8013e86:	1b5e      	subs	r6, r3, r5
 8013e88:	68e0      	ldr	r0, [r4, #12]
 8013e8a:	2e0f      	cmp	r6, #15
 8013e8c:	dd0e      	ble.n	8013eac <_malloc_r+0x300>
 8013e8e:	2701      	movs	r7, #1
 8013e90:	1962      	adds	r2, r4, r5
 8013e92:	433d      	orrs	r5, r7
 8013e94:	6065      	str	r5, [r4, #4]
 8013e96:	68a5      	ldr	r5, [r4, #8]
 8013e98:	4337      	orrs	r7, r6
 8013e9a:	60e8      	str	r0, [r5, #12]
 8013e9c:	6085      	str	r5, [r0, #8]
 8013e9e:	614a      	str	r2, [r1, #20]
 8013ea0:	610a      	str	r2, [r1, #16]
 8013ea2:	4914      	ldr	r1, [pc, #80]	; (8013ef4 <_malloc_r+0x348>)
 8013ea4:	6057      	str	r7, [r2, #4]
 8013ea6:	60d1      	str	r1, [r2, #12]
 8013ea8:	6091      	str	r1, [r2, #8]
 8013eaa:	e6e8      	b.n	8013c7e <_malloc_r+0xd2>
 8013eac:	2e00      	cmp	r6, #0
 8013eae:	db08      	blt.n	8013ec2 <_malloc_r+0x316>
 8013eb0:	2201      	movs	r2, #1
 8013eb2:	18e3      	adds	r3, r4, r3
 8013eb4:	6859      	ldr	r1, [r3, #4]
 8013eb6:	430a      	orrs	r2, r1
 8013eb8:	605a      	str	r2, [r3, #4]
 8013eba:	68a3      	ldr	r3, [r4, #8]
 8013ebc:	60d8      	str	r0, [r3, #12]
 8013ebe:	6083      	str	r3, [r0, #8]
 8013ec0:	e6aa      	b.n	8013c18 <_malloc_r+0x6c>
 8013ec2:	0004      	movs	r4, r0
 8013ec4:	e73c      	b.n	8013d40 <_malloc_r+0x194>
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	425b      	negs	r3, r3
 8013eca:	449c      	add	ip, r3
 8013ecc:	9b03      	ldr	r3, [sp, #12]
 8013ece:	6818      	ldr	r0, [r3, #0]
 8013ed0:	3b08      	subs	r3, #8
 8013ed2:	9003      	str	r0, [sp, #12]
 8013ed4:	4298      	cmp	r0, r3
 8013ed6:	d100      	bne.n	8013eda <_malloc_r+0x32e>
 8013ed8:	e73c      	b.n	8013d54 <_malloc_r+0x1a8>
 8013eda:	e743      	b.n	8013d64 <_malloc_r+0x1b8>
 8013edc:	2004      	movs	r0, #4
 8013ede:	0052      	lsls	r2, r2, #1
 8013ee0:	4484      	add	ip, r0
 8013ee2:	421a      	tst	r2, r3
 8013ee4:	d0fa      	beq.n	8013edc <_malloc_r+0x330>
 8013ee6:	e723      	b.n	8013d30 <_malloc_r+0x184>
 8013ee8:	9802      	ldr	r0, [sp, #8]
 8013eea:	4684      	mov	ip, r0
 8013eec:	e7f9      	b.n	8013ee2 <_malloc_r+0x336>
 8013eee:	46c0      	nop			; (mov r8, r8)
 8013ef0:	20000664 	.word	0x20000664
 8013ef4:	2000066c 	.word	0x2000066c
 8013ef8:	00000554 	.word	0x00000554
 8013efc:	000001ff 	.word	0x000001ff
 8013f00:	20006c40 	.word	0x20006c40
 8013f04:	20000a6c 	.word	0x20000a6c
 8013f08:	20006c10 	.word	0x20006c10
 8013f0c:	20006c38 	.word	0x20006c38
 8013f10:	20006c3c 	.word	0x20006c3c
 8013f14:	492e      	ldr	r1, [pc, #184]	; (8013fd0 <_malloc_r+0x424>)
 8013f16:	680a      	ldr	r2, [r1, #0]
 8013f18:	3201      	adds	r2, #1
 8013f1a:	d133      	bne.n	8013f84 <_malloc_r+0x3d8>
 8013f1c:	600c      	str	r4, [r1, #0]
 8013f1e:	2307      	movs	r3, #7
 8013f20:	4023      	ands	r3, r4
 8013f22:	d002      	beq.n	8013f2a <_malloc_r+0x37e>
 8013f24:	2208      	movs	r2, #8
 8013f26:	1ad3      	subs	r3, r2, r3
 8013f28:	18e4      	adds	r4, r4, r3
 8013f2a:	9a03      	ldr	r2, [sp, #12]
 8013f2c:	19a6      	adds	r6, r4, r6
 8013f2e:	18d3      	adds	r3, r2, r3
 8013f30:	4006      	ands	r6, r0
 8013f32:	1b9e      	subs	r6, r3, r6
 8013f34:	0031      	movs	r1, r6
 8013f36:	9801      	ldr	r0, [sp, #4]
 8013f38:	f000 fa62 	bl	8014400 <_sbrk_r>
 8013f3c:	1c43      	adds	r3, r0, #1
 8013f3e:	d101      	bne.n	8013f44 <_malloc_r+0x398>
 8013f40:	0020      	movs	r0, r4
 8013f42:	2600      	movs	r6, #0
 8013f44:	4a23      	ldr	r2, [pc, #140]	; (8013fd4 <_malloc_r+0x428>)
 8013f46:	1b00      	subs	r0, r0, r4
 8013f48:	6813      	ldr	r3, [r2, #0]
 8013f4a:	199b      	adds	r3, r3, r6
 8013f4c:	6013      	str	r3, [r2, #0]
 8013f4e:	2301      	movs	r3, #1
 8013f50:	4a21      	ldr	r2, [pc, #132]	; (8013fd8 <_malloc_r+0x42c>)
 8013f52:	1986      	adds	r6, r0, r6
 8013f54:	431e      	orrs	r6, r3
 8013f56:	6094      	str	r4, [r2, #8]
 8013f58:	6066      	str	r6, [r4, #4]
 8013f5a:	4297      	cmp	r7, r2
 8013f5c:	d100      	bne.n	8013f60 <_malloc_r+0x3b4>
 8013f5e:	e748      	b.n	8013df2 <_malloc_r+0x246>
 8013f60:	9a02      	ldr	r2, [sp, #8]
 8013f62:	2a0f      	cmp	r2, #15
 8013f64:	d813      	bhi.n	8013f8e <_malloc_r+0x3e2>
 8013f66:	6063      	str	r3, [r4, #4]
 8013f68:	2203      	movs	r2, #3
 8013f6a:	4b1b      	ldr	r3, [pc, #108]	; (8013fd8 <_malloc_r+0x42c>)
 8013f6c:	689b      	ldr	r3, [r3, #8]
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	4393      	bics	r3, r2
 8013f72:	1b5a      	subs	r2, r3, r5
 8013f74:	42ab      	cmp	r3, r5
 8013f76:	d301      	bcc.n	8013f7c <_malloc_r+0x3d0>
 8013f78:	2a0f      	cmp	r2, #15
 8013f7a:	dc1d      	bgt.n	8013fb8 <_malloc_r+0x40c>
 8013f7c:	9801      	ldr	r0, [sp, #4]
 8013f7e:	f000 f867 	bl	8014050 <__malloc_unlock>
 8013f82:	e620      	b.n	8013bc6 <_malloc_r+0x1a>
 8013f84:	1ae3      	subs	r3, r4, r3
 8013f86:	4a13      	ldr	r2, [pc, #76]	; (8013fd4 <_malloc_r+0x428>)
 8013f88:	4463      	add	r3, ip
 8013f8a:	6013      	str	r3, [r2, #0]
 8013f8c:	e7c7      	b.n	8013f1e <_malloc_r+0x372>
 8013f8e:	2207      	movs	r2, #7
 8013f90:	9e02      	ldr	r6, [sp, #8]
 8013f92:	3e0c      	subs	r6, #12
 8013f94:	4396      	bics	r6, r2
 8013f96:	687a      	ldr	r2, [r7, #4]
 8013f98:	4013      	ands	r3, r2
 8013f9a:	2205      	movs	r2, #5
 8013f9c:	4333      	orrs	r3, r6
 8013f9e:	607b      	str	r3, [r7, #4]
 8013fa0:	19bb      	adds	r3, r7, r6
 8013fa2:	605a      	str	r2, [r3, #4]
 8013fa4:	609a      	str	r2, [r3, #8]
 8013fa6:	2e0f      	cmp	r6, #15
 8013fa8:	d800      	bhi.n	8013fac <_malloc_r+0x400>
 8013faa:	e722      	b.n	8013df2 <_malloc_r+0x246>
 8013fac:	0039      	movs	r1, r7
 8013fae:	9801      	ldr	r0, [sp, #4]
 8013fb0:	3108      	adds	r1, #8
 8013fb2:	f003 fb07 	bl	80175c4 <_free_r>
 8013fb6:	e71c      	b.n	8013df2 <_malloc_r+0x246>
 8013fb8:	2301      	movs	r3, #1
 8013fba:	0018      	movs	r0, r3
 8013fbc:	4906      	ldr	r1, [pc, #24]	; (8013fd8 <_malloc_r+0x42c>)
 8013fbe:	4328      	orrs	r0, r5
 8013fc0:	688c      	ldr	r4, [r1, #8]
 8013fc2:	4313      	orrs	r3, r2
 8013fc4:	1965      	adds	r5, r4, r5
 8013fc6:	6060      	str	r0, [r4, #4]
 8013fc8:	608d      	str	r5, [r1, #8]
 8013fca:	606b      	str	r3, [r5, #4]
 8013fcc:	e624      	b.n	8013c18 <_malloc_r+0x6c>
 8013fce:	46c0      	nop			; (mov r8, r8)
 8013fd0:	20000a6c 	.word	0x20000a6c
 8013fd4:	20006c10 	.word	0x20006c10
 8013fd8:	20000664 	.word	0x20000664

08013fdc <__ascii_mbtowc>:
 8013fdc:	b082      	sub	sp, #8
 8013fde:	2900      	cmp	r1, #0
 8013fe0:	d100      	bne.n	8013fe4 <__ascii_mbtowc+0x8>
 8013fe2:	a901      	add	r1, sp, #4
 8013fe4:	1e10      	subs	r0, r2, #0
 8013fe6:	d006      	beq.n	8013ff6 <__ascii_mbtowc+0x1a>
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d006      	beq.n	8013ffa <__ascii_mbtowc+0x1e>
 8013fec:	7813      	ldrb	r3, [r2, #0]
 8013fee:	600b      	str	r3, [r1, #0]
 8013ff0:	7810      	ldrb	r0, [r2, #0]
 8013ff2:	1e43      	subs	r3, r0, #1
 8013ff4:	4198      	sbcs	r0, r3
 8013ff6:	b002      	add	sp, #8
 8013ff8:	4770      	bx	lr
 8013ffa:	2002      	movs	r0, #2
 8013ffc:	4240      	negs	r0, r0
 8013ffe:	e7fa      	b.n	8013ff6 <__ascii_mbtowc+0x1a>

08014000 <memcmp>:
 8014000:	b530      	push	{r4, r5, lr}
 8014002:	2400      	movs	r4, #0
 8014004:	42a2      	cmp	r2, r4
 8014006:	d101      	bne.n	801400c <memcmp+0xc>
 8014008:	2000      	movs	r0, #0
 801400a:	e005      	b.n	8014018 <memcmp+0x18>
 801400c:	5d03      	ldrb	r3, [r0, r4]
 801400e:	1c65      	adds	r5, r4, #1
 8014010:	5d0c      	ldrb	r4, [r1, r4]
 8014012:	42a3      	cmp	r3, r4
 8014014:	d001      	beq.n	801401a <memcmp+0x1a>
 8014016:	1b18      	subs	r0, r3, r4
 8014018:	bd30      	pop	{r4, r5, pc}
 801401a:	002c      	movs	r4, r5
 801401c:	e7f2      	b.n	8014004 <memcmp+0x4>

0801401e <memcpy>:
 801401e:	2300      	movs	r3, #0
 8014020:	b510      	push	{r4, lr}
 8014022:	429a      	cmp	r2, r3
 8014024:	d100      	bne.n	8014028 <memcpy+0xa>
 8014026:	bd10      	pop	{r4, pc}
 8014028:	5ccc      	ldrb	r4, [r1, r3]
 801402a:	54c4      	strb	r4, [r0, r3]
 801402c:	3301      	adds	r3, #1
 801402e:	e7f8      	b.n	8014022 <memcpy+0x4>

08014030 <memset>:
 8014030:	0003      	movs	r3, r0
 8014032:	1812      	adds	r2, r2, r0
 8014034:	4293      	cmp	r3, r2
 8014036:	d100      	bne.n	801403a <memset+0xa>
 8014038:	4770      	bx	lr
 801403a:	7019      	strb	r1, [r3, #0]
 801403c:	3301      	adds	r3, #1
 801403e:	e7f9      	b.n	8014034 <memset+0x4>

08014040 <__malloc_lock>:
 8014040:	b510      	push	{r4, lr}
 8014042:	4802      	ldr	r0, [pc, #8]	; (801404c <__malloc_lock+0xc>)
 8014044:	f003 feb2 	bl	8017dac <__retarget_lock_acquire_recursive>
 8014048:	bd10      	pop	{r4, pc}
 801404a:	46c0      	nop			; (mov r8, r8)
 801404c:	200071dc 	.word	0x200071dc

08014050 <__malloc_unlock>:
 8014050:	b510      	push	{r4, lr}
 8014052:	4802      	ldr	r0, [pc, #8]	; (801405c <__malloc_unlock+0xc>)
 8014054:	f003 feab 	bl	8017dae <__retarget_lock_release_recursive>
 8014058:	bd10      	pop	{r4, pc}
 801405a:	46c0      	nop			; (mov r8, r8)
 801405c:	200071dc 	.word	0x200071dc

08014060 <rand>:
 8014060:	4b09      	ldr	r3, [pc, #36]	; (8014088 <rand+0x28>)
 8014062:	b510      	push	{r4, lr}
 8014064:	681c      	ldr	r4, [r3, #0]
 8014066:	4a09      	ldr	r2, [pc, #36]	; (801408c <rand+0x2c>)
 8014068:	34a8      	adds	r4, #168	; 0xa8
 801406a:	6820      	ldr	r0, [r4, #0]
 801406c:	6861      	ldr	r1, [r4, #4]
 801406e:	4b08      	ldr	r3, [pc, #32]	; (8014090 <rand+0x30>)
 8014070:	f7ec fa7c 	bl	800056c <__aeabi_lmul>
 8014074:	2201      	movs	r2, #1
 8014076:	2300      	movs	r3, #0
 8014078:	1880      	adds	r0, r0, r2
 801407a:	4159      	adcs	r1, r3
 801407c:	6020      	str	r0, [r4, #0]
 801407e:	6061      	str	r1, [r4, #4]
 8014080:	0048      	lsls	r0, r1, #1
 8014082:	0840      	lsrs	r0, r0, #1
 8014084:	bd10      	pop	{r4, pc}
 8014086:	46c0      	nop			; (mov r8, r8)
 8014088:	200000c8 	.word	0x200000c8
 801408c:	4c957f2d 	.word	0x4c957f2d
 8014090:	5851f42d 	.word	0x5851f42d

08014094 <realloc>:
 8014094:	b510      	push	{r4, lr}
 8014096:	4b03      	ldr	r3, [pc, #12]	; (80140a4 <realloc+0x10>)
 8014098:	000a      	movs	r2, r1
 801409a:	0001      	movs	r1, r0
 801409c:	6818      	ldr	r0, [r3, #0]
 801409e:	f000 f803 	bl	80140a8 <_realloc_r>
 80140a2:	bd10      	pop	{r4, pc}
 80140a4:	200000c8 	.word	0x200000c8

080140a8 <_realloc_r>:
 80140a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140aa:	b087      	sub	sp, #28
 80140ac:	9003      	str	r0, [sp, #12]
 80140ae:	1e0c      	subs	r4, r1, #0
 80140b0:	9205      	str	r2, [sp, #20]
 80140b2:	d106      	bne.n	80140c2 <_realloc_r+0x1a>
 80140b4:	0011      	movs	r1, r2
 80140b6:	f7ff fd79 	bl	8013bac <_malloc_r>
 80140ba:	0007      	movs	r7, r0
 80140bc:	0038      	movs	r0, r7
 80140be:	b007      	add	sp, #28
 80140c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140c2:	9803      	ldr	r0, [sp, #12]
 80140c4:	f7ff ffbc 	bl	8014040 <__malloc_lock>
 80140c8:	0023      	movs	r3, r4
 80140ca:	3b08      	subs	r3, #8
 80140cc:	685f      	ldr	r7, [r3, #4]
 80140ce:	9302      	str	r3, [sp, #8]
 80140d0:	003a      	movs	r2, r7
 80140d2:	2303      	movs	r3, #3
 80140d4:	9e05      	ldr	r6, [sp, #20]
 80140d6:	439a      	bics	r2, r3
 80140d8:	360b      	adds	r6, #11
 80140da:	9204      	str	r2, [sp, #16]
 80140dc:	2e16      	cmp	r6, #22
 80140de:	d908      	bls.n	80140f2 <_realloc_r+0x4a>
 80140e0:	3304      	adds	r3, #4
 80140e2:	439e      	bics	r6, r3
 80140e4:	9601      	str	r6, [sp, #4]
 80140e6:	d506      	bpl.n	80140f6 <_realloc_r+0x4e>
 80140e8:	230c      	movs	r3, #12
 80140ea:	9a03      	ldr	r2, [sp, #12]
 80140ec:	2700      	movs	r7, #0
 80140ee:	6013      	str	r3, [r2, #0]
 80140f0:	e7e4      	b.n	80140bc <_realloc_r+0x14>
 80140f2:	2310      	movs	r3, #16
 80140f4:	9301      	str	r3, [sp, #4]
 80140f6:	9b01      	ldr	r3, [sp, #4]
 80140f8:	9a05      	ldr	r2, [sp, #20]
 80140fa:	4293      	cmp	r3, r2
 80140fc:	d3f4      	bcc.n	80140e8 <_realloc_r+0x40>
 80140fe:	9b01      	ldr	r3, [sp, #4]
 8014100:	9a04      	ldr	r2, [sp, #16]
 8014102:	4293      	cmp	r3, r2
 8014104:	dc00      	bgt.n	8014108 <_realloc_r+0x60>
 8014106:	e16f      	b.n	80143e8 <_realloc_r+0x340>
 8014108:	9b02      	ldr	r3, [sp, #8]
 801410a:	48bc      	ldr	r0, [pc, #752]	; (80143fc <_realloc_r+0x354>)
 801410c:	189b      	adds	r3, r3, r2
 801410e:	6882      	ldr	r2, [r0, #8]
 8014110:	4694      	mov	ip, r2
 8014112:	685a      	ldr	r2, [r3, #4]
 8014114:	459c      	cmp	ip, r3
 8014116:	d006      	beq.n	8014126 <_realloc_r+0x7e>
 8014118:	2501      	movs	r5, #1
 801411a:	0011      	movs	r1, r2
 801411c:	43a9      	bics	r1, r5
 801411e:	1859      	adds	r1, r3, r1
 8014120:	6849      	ldr	r1, [r1, #4]
 8014122:	4229      	tst	r1, r5
 8014124:	d146      	bne.n	80141b4 <_realloc_r+0x10c>
 8014126:	2103      	movs	r1, #3
 8014128:	438a      	bics	r2, r1
 801412a:	9904      	ldr	r1, [sp, #16]
 801412c:	188e      	adds	r6, r1, r2
 801412e:	9901      	ldr	r1, [sp, #4]
 8014130:	459c      	cmp	ip, r3
 8014132:	d117      	bne.n	8014164 <_realloc_r+0xbc>
 8014134:	3110      	adds	r1, #16
 8014136:	42b1      	cmp	r1, r6
 8014138:	dc3e      	bgt.n	80141b8 <_realloc_r+0x110>
 801413a:	9901      	ldr	r1, [sp, #4]
 801413c:	9b02      	ldr	r3, [sp, #8]
 801413e:	468c      	mov	ip, r1
 8014140:	4463      	add	r3, ip
 8014142:	6083      	str	r3, [r0, #8]
 8014144:	001a      	movs	r2, r3
 8014146:	1a73      	subs	r3, r6, r1
 8014148:	2601      	movs	r6, #1
 801414a:	4333      	orrs	r3, r6
 801414c:	6053      	str	r3, [r2, #4]
 801414e:	0023      	movs	r3, r4
 8014150:	3b08      	subs	r3, #8
 8014152:	685a      	ldr	r2, [r3, #4]
 8014154:	9803      	ldr	r0, [sp, #12]
 8014156:	4016      	ands	r6, r2
 8014158:	430e      	orrs	r6, r1
 801415a:	605e      	str	r6, [r3, #4]
 801415c:	f7ff ff78 	bl	8014050 <__malloc_unlock>
 8014160:	0027      	movs	r7, r4
 8014162:	e7ab      	b.n	80140bc <_realloc_r+0x14>
 8014164:	42b1      	cmp	r1, r6
 8014166:	dc27      	bgt.n	80141b8 <_realloc_r+0x110>
 8014168:	68da      	ldr	r2, [r3, #12]
 801416a:	689b      	ldr	r3, [r3, #8]
 801416c:	60da      	str	r2, [r3, #12]
 801416e:	6093      	str	r3, [r2, #8]
 8014170:	9b01      	ldr	r3, [sp, #4]
 8014172:	9a02      	ldr	r2, [sp, #8]
 8014174:	1af4      	subs	r4, r6, r3
 8014176:	9b02      	ldr	r3, [sp, #8]
 8014178:	1992      	adds	r2, r2, r6
 801417a:	685b      	ldr	r3, [r3, #4]
 801417c:	9304      	str	r3, [sp, #16]
 801417e:	2301      	movs	r3, #1
 8014180:	9804      	ldr	r0, [sp, #16]
 8014182:	4018      	ands	r0, r3
 8014184:	2c0f      	cmp	r4, #15
 8014186:	d800      	bhi.n	801418a <_realloc_r+0xe2>
 8014188:	e130      	b.n	80143ec <_realloc_r+0x344>
 801418a:	9d01      	ldr	r5, [sp, #4]
 801418c:	9902      	ldr	r1, [sp, #8]
 801418e:	4328      	orrs	r0, r5
 8014190:	1949      	adds	r1, r1, r5
 8014192:	9d02      	ldr	r5, [sp, #8]
 8014194:	431c      	orrs	r4, r3
 8014196:	6068      	str	r0, [r5, #4]
 8014198:	604c      	str	r4, [r1, #4]
 801419a:	6850      	ldr	r0, [r2, #4]
 801419c:	3108      	adds	r1, #8
 801419e:	4303      	orrs	r3, r0
 80141a0:	6053      	str	r3, [r2, #4]
 80141a2:	9803      	ldr	r0, [sp, #12]
 80141a4:	f003 fa0e 	bl	80175c4 <_free_r>
 80141a8:	9803      	ldr	r0, [sp, #12]
 80141aa:	f7ff ff51 	bl	8014050 <__malloc_unlock>
 80141ae:	9f02      	ldr	r7, [sp, #8]
 80141b0:	3708      	adds	r7, #8
 80141b2:	e783      	b.n	80140bc <_realloc_r+0x14>
 80141b4:	2200      	movs	r2, #0
 80141b6:	0013      	movs	r3, r2
 80141b8:	07f9      	lsls	r1, r7, #31
 80141ba:	d500      	bpl.n	80141be <_realloc_r+0x116>
 80141bc:	e0c6      	b.n	801434c <_realloc_r+0x2a4>
 80141be:	0021      	movs	r1, r4
 80141c0:	3908      	subs	r1, #8
 80141c2:	680d      	ldr	r5, [r1, #0]
 80141c4:	9902      	ldr	r1, [sp, #8]
 80141c6:	1b4d      	subs	r5, r1, r5
 80141c8:	2103      	movs	r1, #3
 80141ca:	686f      	ldr	r7, [r5, #4]
 80141cc:	438f      	bics	r7, r1
 80141ce:	9904      	ldr	r1, [sp, #16]
 80141d0:	187f      	adds	r7, r7, r1
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d100      	bne.n	80141d8 <_realloc_r+0x130>
 80141d6:	e084      	b.n	80142e2 <_realloc_r+0x23a>
 80141d8:	19d6      	adds	r6, r2, r7
 80141da:	459c      	cmp	ip, r3
 80141dc:	d148      	bne.n	8014270 <_realloc_r+0x1c8>
 80141de:	9b01      	ldr	r3, [sp, #4]
 80141e0:	3310      	adds	r3, #16
 80141e2:	42b3      	cmp	r3, r6
 80141e4:	dc7d      	bgt.n	80142e2 <_realloc_r+0x23a>
 80141e6:	68aa      	ldr	r2, [r5, #8]
 80141e8:	68eb      	ldr	r3, [r5, #12]
 80141ea:	002f      	movs	r7, r5
 80141ec:	60d3      	str	r3, [r2, #12]
 80141ee:	609a      	str	r2, [r3, #8]
 80141f0:	000a      	movs	r2, r1
 80141f2:	3a04      	subs	r2, #4
 80141f4:	3708      	adds	r7, #8
 80141f6:	2a24      	cmp	r2, #36	; 0x24
 80141f8:	d835      	bhi.n	8014266 <_realloc_r+0x1be>
 80141fa:	003b      	movs	r3, r7
 80141fc:	2a13      	cmp	r2, #19
 80141fe:	d908      	bls.n	8014212 <_realloc_r+0x16a>
 8014200:	6823      	ldr	r3, [r4, #0]
 8014202:	60ab      	str	r3, [r5, #8]
 8014204:	6863      	ldr	r3, [r4, #4]
 8014206:	60eb      	str	r3, [r5, #12]
 8014208:	2a1b      	cmp	r2, #27
 801420a:	d81a      	bhi.n	8014242 <_realloc_r+0x19a>
 801420c:	002b      	movs	r3, r5
 801420e:	3408      	adds	r4, #8
 8014210:	3310      	adds	r3, #16
 8014212:	6822      	ldr	r2, [r4, #0]
 8014214:	601a      	str	r2, [r3, #0]
 8014216:	6862      	ldr	r2, [r4, #4]
 8014218:	605a      	str	r2, [r3, #4]
 801421a:	68a2      	ldr	r2, [r4, #8]
 801421c:	609a      	str	r2, [r3, #8]
 801421e:	9b01      	ldr	r3, [sp, #4]
 8014220:	18ea      	adds	r2, r5, r3
 8014222:	4b76      	ldr	r3, [pc, #472]	; (80143fc <_realloc_r+0x354>)
 8014224:	609a      	str	r2, [r3, #8]
 8014226:	9b01      	ldr	r3, [sp, #4]
 8014228:	1af3      	subs	r3, r6, r3
 801422a:	2601      	movs	r6, #1
 801422c:	4333      	orrs	r3, r6
 801422e:	6053      	str	r3, [r2, #4]
 8014230:	686b      	ldr	r3, [r5, #4]
 8014232:	401e      	ands	r6, r3
 8014234:	9b01      	ldr	r3, [sp, #4]
 8014236:	431e      	orrs	r6, r3
 8014238:	606e      	str	r6, [r5, #4]
 801423a:	9803      	ldr	r0, [sp, #12]
 801423c:	f7ff ff08 	bl	8014050 <__malloc_unlock>
 8014240:	e73c      	b.n	80140bc <_realloc_r+0x14>
 8014242:	68a3      	ldr	r3, [r4, #8]
 8014244:	612b      	str	r3, [r5, #16]
 8014246:	68e3      	ldr	r3, [r4, #12]
 8014248:	616b      	str	r3, [r5, #20]
 801424a:	2a24      	cmp	r2, #36	; 0x24
 801424c:	d003      	beq.n	8014256 <_realloc_r+0x1ae>
 801424e:	002b      	movs	r3, r5
 8014250:	3410      	adds	r4, #16
 8014252:	3318      	adds	r3, #24
 8014254:	e7dd      	b.n	8014212 <_realloc_r+0x16a>
 8014256:	6923      	ldr	r3, [r4, #16]
 8014258:	61ab      	str	r3, [r5, #24]
 801425a:	002b      	movs	r3, r5
 801425c:	6962      	ldr	r2, [r4, #20]
 801425e:	3320      	adds	r3, #32
 8014260:	61ea      	str	r2, [r5, #28]
 8014262:	3418      	adds	r4, #24
 8014264:	e7d5      	b.n	8014212 <_realloc_r+0x16a>
 8014266:	0021      	movs	r1, r4
 8014268:	0038      	movs	r0, r7
 801426a:	f003 fdac 	bl	8017dc6 <memmove>
 801426e:	e7d6      	b.n	801421e <_realloc_r+0x176>
 8014270:	9a01      	ldr	r2, [sp, #4]
 8014272:	42b2      	cmp	r2, r6
 8014274:	dc35      	bgt.n	80142e2 <_realloc_r+0x23a>
 8014276:	0028      	movs	r0, r5
 8014278:	68da      	ldr	r2, [r3, #12]
 801427a:	689b      	ldr	r3, [r3, #8]
 801427c:	3008      	adds	r0, #8
 801427e:	60da      	str	r2, [r3, #12]
 8014280:	6093      	str	r3, [r2, #8]
 8014282:	68aa      	ldr	r2, [r5, #8]
 8014284:	68eb      	ldr	r3, [r5, #12]
 8014286:	60d3      	str	r3, [r2, #12]
 8014288:	609a      	str	r2, [r3, #8]
 801428a:	9a04      	ldr	r2, [sp, #16]
 801428c:	3a04      	subs	r2, #4
 801428e:	2a24      	cmp	r2, #36	; 0x24
 8014290:	d823      	bhi.n	80142da <_realloc_r+0x232>
 8014292:	2a13      	cmp	r2, #19
 8014294:	d907      	bls.n	80142a6 <_realloc_r+0x1fe>
 8014296:	6823      	ldr	r3, [r4, #0]
 8014298:	60ab      	str	r3, [r5, #8]
 801429a:	6863      	ldr	r3, [r4, #4]
 801429c:	60eb      	str	r3, [r5, #12]
 801429e:	2a1b      	cmp	r2, #27
 80142a0:	d809      	bhi.n	80142b6 <_realloc_r+0x20e>
 80142a2:	3408      	adds	r4, #8
 80142a4:	3008      	adds	r0, #8
 80142a6:	6823      	ldr	r3, [r4, #0]
 80142a8:	6003      	str	r3, [r0, #0]
 80142aa:	6863      	ldr	r3, [r4, #4]
 80142ac:	6043      	str	r3, [r0, #4]
 80142ae:	68a3      	ldr	r3, [r4, #8]
 80142b0:	6083      	str	r3, [r0, #8]
 80142b2:	9502      	str	r5, [sp, #8]
 80142b4:	e75c      	b.n	8014170 <_realloc_r+0xc8>
 80142b6:	68a3      	ldr	r3, [r4, #8]
 80142b8:	612b      	str	r3, [r5, #16]
 80142ba:	68e3      	ldr	r3, [r4, #12]
 80142bc:	616b      	str	r3, [r5, #20]
 80142be:	2a24      	cmp	r2, #36	; 0x24
 80142c0:	d003      	beq.n	80142ca <_realloc_r+0x222>
 80142c2:	0028      	movs	r0, r5
 80142c4:	3410      	adds	r4, #16
 80142c6:	3018      	adds	r0, #24
 80142c8:	e7ed      	b.n	80142a6 <_realloc_r+0x1fe>
 80142ca:	0028      	movs	r0, r5
 80142cc:	6923      	ldr	r3, [r4, #16]
 80142ce:	3020      	adds	r0, #32
 80142d0:	61ab      	str	r3, [r5, #24]
 80142d2:	6963      	ldr	r3, [r4, #20]
 80142d4:	3418      	adds	r4, #24
 80142d6:	61eb      	str	r3, [r5, #28]
 80142d8:	e7e5      	b.n	80142a6 <_realloc_r+0x1fe>
 80142da:	0021      	movs	r1, r4
 80142dc:	f003 fd73 	bl	8017dc6 <memmove>
 80142e0:	e7e7      	b.n	80142b2 <_realloc_r+0x20a>
 80142e2:	9b01      	ldr	r3, [sp, #4]
 80142e4:	42bb      	cmp	r3, r7
 80142e6:	dc31      	bgt.n	801434c <_realloc_r+0x2a4>
 80142e8:	0028      	movs	r0, r5
 80142ea:	68aa      	ldr	r2, [r5, #8]
 80142ec:	68eb      	ldr	r3, [r5, #12]
 80142ee:	3008      	adds	r0, #8
 80142f0:	60d3      	str	r3, [r2, #12]
 80142f2:	609a      	str	r2, [r3, #8]
 80142f4:	9a04      	ldr	r2, [sp, #16]
 80142f6:	3a04      	subs	r2, #4
 80142f8:	2a24      	cmp	r2, #36	; 0x24
 80142fa:	d823      	bhi.n	8014344 <_realloc_r+0x29c>
 80142fc:	2a13      	cmp	r2, #19
 80142fe:	d907      	bls.n	8014310 <_realloc_r+0x268>
 8014300:	6823      	ldr	r3, [r4, #0]
 8014302:	60ab      	str	r3, [r5, #8]
 8014304:	6863      	ldr	r3, [r4, #4]
 8014306:	60eb      	str	r3, [r5, #12]
 8014308:	2a1b      	cmp	r2, #27
 801430a:	d809      	bhi.n	8014320 <_realloc_r+0x278>
 801430c:	3408      	adds	r4, #8
 801430e:	3008      	adds	r0, #8
 8014310:	6823      	ldr	r3, [r4, #0]
 8014312:	6003      	str	r3, [r0, #0]
 8014314:	6863      	ldr	r3, [r4, #4]
 8014316:	6043      	str	r3, [r0, #4]
 8014318:	68a3      	ldr	r3, [r4, #8]
 801431a:	6083      	str	r3, [r0, #8]
 801431c:	003e      	movs	r6, r7
 801431e:	e7c8      	b.n	80142b2 <_realloc_r+0x20a>
 8014320:	68a3      	ldr	r3, [r4, #8]
 8014322:	612b      	str	r3, [r5, #16]
 8014324:	68e3      	ldr	r3, [r4, #12]
 8014326:	616b      	str	r3, [r5, #20]
 8014328:	2a24      	cmp	r2, #36	; 0x24
 801432a:	d003      	beq.n	8014334 <_realloc_r+0x28c>
 801432c:	0028      	movs	r0, r5
 801432e:	3410      	adds	r4, #16
 8014330:	3018      	adds	r0, #24
 8014332:	e7ed      	b.n	8014310 <_realloc_r+0x268>
 8014334:	0028      	movs	r0, r5
 8014336:	6923      	ldr	r3, [r4, #16]
 8014338:	3020      	adds	r0, #32
 801433a:	61ab      	str	r3, [r5, #24]
 801433c:	6963      	ldr	r3, [r4, #20]
 801433e:	3418      	adds	r4, #24
 8014340:	61eb      	str	r3, [r5, #28]
 8014342:	e7e5      	b.n	8014310 <_realloc_r+0x268>
 8014344:	0021      	movs	r1, r4
 8014346:	f003 fd3e 	bl	8017dc6 <memmove>
 801434a:	e7e7      	b.n	801431c <_realloc_r+0x274>
 801434c:	9905      	ldr	r1, [sp, #20]
 801434e:	9803      	ldr	r0, [sp, #12]
 8014350:	f7ff fc2c 	bl	8013bac <_malloc_r>
 8014354:	1e07      	subs	r7, r0, #0
 8014356:	d100      	bne.n	801435a <_realloc_r+0x2b2>
 8014358:	e76f      	b.n	801423a <_realloc_r+0x192>
 801435a:	0023      	movs	r3, r4
 801435c:	2201      	movs	r2, #1
 801435e:	3b08      	subs	r3, #8
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	4393      	bics	r3, r2
 8014364:	9a02      	ldr	r2, [sp, #8]
 8014366:	18d3      	adds	r3, r2, r3
 8014368:	0002      	movs	r2, r0
 801436a:	3a08      	subs	r2, #8
 801436c:	4293      	cmp	r3, r2
 801436e:	d105      	bne.n	801437c <_realloc_r+0x2d4>
 8014370:	685e      	ldr	r6, [r3, #4]
 8014372:	2303      	movs	r3, #3
 8014374:	439e      	bics	r6, r3
 8014376:	9b04      	ldr	r3, [sp, #16]
 8014378:	18f6      	adds	r6, r6, r3
 801437a:	e6f9      	b.n	8014170 <_realloc_r+0xc8>
 801437c:	9a04      	ldr	r2, [sp, #16]
 801437e:	3a04      	subs	r2, #4
 8014380:	2a24      	cmp	r2, #36	; 0x24
 8014382:	d82d      	bhi.n	80143e0 <_realloc_r+0x338>
 8014384:	2a13      	cmp	r2, #19
 8014386:	d928      	bls.n	80143da <_realloc_r+0x332>
 8014388:	6823      	ldr	r3, [r4, #0]
 801438a:	6003      	str	r3, [r0, #0]
 801438c:	6863      	ldr	r3, [r4, #4]
 801438e:	6043      	str	r3, [r0, #4]
 8014390:	2a1b      	cmp	r2, #27
 8014392:	d80e      	bhi.n	80143b2 <_realloc_r+0x30a>
 8014394:	0022      	movs	r2, r4
 8014396:	0003      	movs	r3, r0
 8014398:	3208      	adds	r2, #8
 801439a:	3308      	adds	r3, #8
 801439c:	6811      	ldr	r1, [r2, #0]
 801439e:	6019      	str	r1, [r3, #0]
 80143a0:	6851      	ldr	r1, [r2, #4]
 80143a2:	6059      	str	r1, [r3, #4]
 80143a4:	6892      	ldr	r2, [r2, #8]
 80143a6:	609a      	str	r2, [r3, #8]
 80143a8:	0021      	movs	r1, r4
 80143aa:	9803      	ldr	r0, [sp, #12]
 80143ac:	f003 f90a 	bl	80175c4 <_free_r>
 80143b0:	e743      	b.n	801423a <_realloc_r+0x192>
 80143b2:	68a3      	ldr	r3, [r4, #8]
 80143b4:	6083      	str	r3, [r0, #8]
 80143b6:	68e3      	ldr	r3, [r4, #12]
 80143b8:	60c3      	str	r3, [r0, #12]
 80143ba:	2a24      	cmp	r2, #36	; 0x24
 80143bc:	d004      	beq.n	80143c8 <_realloc_r+0x320>
 80143be:	0022      	movs	r2, r4
 80143c0:	0003      	movs	r3, r0
 80143c2:	3210      	adds	r2, #16
 80143c4:	3310      	adds	r3, #16
 80143c6:	e7e9      	b.n	801439c <_realloc_r+0x2f4>
 80143c8:	6923      	ldr	r3, [r4, #16]
 80143ca:	0022      	movs	r2, r4
 80143cc:	6103      	str	r3, [r0, #16]
 80143ce:	0003      	movs	r3, r0
 80143d0:	6961      	ldr	r1, [r4, #20]
 80143d2:	3218      	adds	r2, #24
 80143d4:	3318      	adds	r3, #24
 80143d6:	6141      	str	r1, [r0, #20]
 80143d8:	e7e0      	b.n	801439c <_realloc_r+0x2f4>
 80143da:	0003      	movs	r3, r0
 80143dc:	0022      	movs	r2, r4
 80143de:	e7dd      	b.n	801439c <_realloc_r+0x2f4>
 80143e0:	0021      	movs	r1, r4
 80143e2:	f003 fcf0 	bl	8017dc6 <memmove>
 80143e6:	e7df      	b.n	80143a8 <_realloc_r+0x300>
 80143e8:	9e04      	ldr	r6, [sp, #16]
 80143ea:	e6c1      	b.n	8014170 <_realloc_r+0xc8>
 80143ec:	9902      	ldr	r1, [sp, #8]
 80143ee:	4306      	orrs	r6, r0
 80143f0:	604e      	str	r6, [r1, #4]
 80143f2:	6851      	ldr	r1, [r2, #4]
 80143f4:	430b      	orrs	r3, r1
 80143f6:	6053      	str	r3, [r2, #4]
 80143f8:	e6d6      	b.n	80141a8 <_realloc_r+0x100>
 80143fa:	46c0      	nop			; (mov r8, r8)
 80143fc:	20000664 	.word	0x20000664

08014400 <_sbrk_r>:
 8014400:	2300      	movs	r3, #0
 8014402:	b570      	push	{r4, r5, r6, lr}
 8014404:	4c06      	ldr	r4, [pc, #24]	; (8014420 <_sbrk_r+0x20>)
 8014406:	0005      	movs	r5, r0
 8014408:	0008      	movs	r0, r1
 801440a:	6023      	str	r3, [r4, #0]
 801440c:	f004 f9c0 	bl	8018790 <_sbrk>
 8014410:	1c43      	adds	r3, r0, #1
 8014412:	d103      	bne.n	801441c <_sbrk_r+0x1c>
 8014414:	6823      	ldr	r3, [r4, #0]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d000      	beq.n	801441c <_sbrk_r+0x1c>
 801441a:	602b      	str	r3, [r5, #0]
 801441c:	bd70      	pop	{r4, r5, r6, pc}
 801441e:	46c0      	nop			; (mov r8, r8)
 8014420:	200071e4 	.word	0x200071e4

08014424 <sprintf>:
 8014424:	b40e      	push	{r1, r2, r3}
 8014426:	b500      	push	{lr}
 8014428:	490b      	ldr	r1, [pc, #44]	; (8014458 <sprintf+0x34>)
 801442a:	b09c      	sub	sp, #112	; 0x70
 801442c:	ab1d      	add	r3, sp, #116	; 0x74
 801442e:	9002      	str	r0, [sp, #8]
 8014430:	9006      	str	r0, [sp, #24]
 8014432:	9107      	str	r1, [sp, #28]
 8014434:	9104      	str	r1, [sp, #16]
 8014436:	4809      	ldr	r0, [pc, #36]	; (801445c <sprintf+0x38>)
 8014438:	4909      	ldr	r1, [pc, #36]	; (8014460 <sprintf+0x3c>)
 801443a:	cb04      	ldmia	r3!, {r2}
 801443c:	9105      	str	r1, [sp, #20]
 801443e:	6800      	ldr	r0, [r0, #0]
 8014440:	a902      	add	r1, sp, #8
 8014442:	9301      	str	r3, [sp, #4]
 8014444:	f000 ff78 	bl	8015338 <_svfprintf_r>
 8014448:	2300      	movs	r3, #0
 801444a:	9a02      	ldr	r2, [sp, #8]
 801444c:	7013      	strb	r3, [r2, #0]
 801444e:	b01c      	add	sp, #112	; 0x70
 8014450:	bc08      	pop	{r3}
 8014452:	b003      	add	sp, #12
 8014454:	4718      	bx	r3
 8014456:	46c0      	nop			; (mov r8, r8)
 8014458:	7fffffff 	.word	0x7fffffff
 801445c:	200000c8 	.word	0x200000c8
 8014460:	ffff0208 	.word	0xffff0208

08014464 <strcat>:
 8014464:	0002      	movs	r2, r0
 8014466:	b510      	push	{r4, lr}
 8014468:	7813      	ldrb	r3, [r2, #0]
 801446a:	1c54      	adds	r4, r2, #1
 801446c:	2b00      	cmp	r3, #0
 801446e:	d105      	bne.n	801447c <strcat+0x18>
 8014470:	5ccc      	ldrb	r4, [r1, r3]
 8014472:	54d4      	strb	r4, [r2, r3]
 8014474:	3301      	adds	r3, #1
 8014476:	2c00      	cmp	r4, #0
 8014478:	d1fa      	bne.n	8014470 <strcat+0xc>
 801447a:	bd10      	pop	{r4, pc}
 801447c:	0022      	movs	r2, r4
 801447e:	e7f3      	b.n	8014468 <strcat+0x4>

08014480 <strchr>:
 8014480:	b2c9      	uxtb	r1, r1
 8014482:	7803      	ldrb	r3, [r0, #0]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d004      	beq.n	8014492 <strchr+0x12>
 8014488:	428b      	cmp	r3, r1
 801448a:	d100      	bne.n	801448e <strchr+0xe>
 801448c:	4770      	bx	lr
 801448e:	3001      	adds	r0, #1
 8014490:	e7f7      	b.n	8014482 <strchr+0x2>
 8014492:	424b      	negs	r3, r1
 8014494:	4159      	adcs	r1, r3
 8014496:	4249      	negs	r1, r1
 8014498:	4008      	ands	r0, r1
 801449a:	e7f7      	b.n	801448c <strchr+0xc>

0801449c <strcpy>:
 801449c:	0003      	movs	r3, r0
 801449e:	780a      	ldrb	r2, [r1, #0]
 80144a0:	3101      	adds	r1, #1
 80144a2:	701a      	strb	r2, [r3, #0]
 80144a4:	3301      	adds	r3, #1
 80144a6:	2a00      	cmp	r2, #0
 80144a8:	d1f9      	bne.n	801449e <strcpy+0x2>
 80144aa:	4770      	bx	lr

080144ac <strncmp>:
 80144ac:	2300      	movs	r3, #0
 80144ae:	b530      	push	{r4, r5, lr}
 80144b0:	429a      	cmp	r2, r3
 80144b2:	d00a      	beq.n	80144ca <strncmp+0x1e>
 80144b4:	3a01      	subs	r2, #1
 80144b6:	5cc4      	ldrb	r4, [r0, r3]
 80144b8:	5ccd      	ldrb	r5, [r1, r3]
 80144ba:	42ac      	cmp	r4, r5
 80144bc:	d104      	bne.n	80144c8 <strncmp+0x1c>
 80144be:	4293      	cmp	r3, r2
 80144c0:	d002      	beq.n	80144c8 <strncmp+0x1c>
 80144c2:	3301      	adds	r3, #1
 80144c4:	2c00      	cmp	r4, #0
 80144c6:	d1f6      	bne.n	80144b6 <strncmp+0xa>
 80144c8:	1b63      	subs	r3, r4, r5
 80144ca:	0018      	movs	r0, r3
 80144cc:	bd30      	pop	{r4, r5, pc}

080144ce <strncpy>:
 80144ce:	b530      	push	{r4, r5, lr}
 80144d0:	0005      	movs	r5, r0
 80144d2:	2a00      	cmp	r2, #0
 80144d4:	d100      	bne.n	80144d8 <strncpy+0xa>
 80144d6:	bd30      	pop	{r4, r5, pc}
 80144d8:	780c      	ldrb	r4, [r1, #0]
 80144da:	3a01      	subs	r2, #1
 80144dc:	1c6b      	adds	r3, r5, #1
 80144de:	702c      	strb	r4, [r5, #0]
 80144e0:	3101      	adds	r1, #1
 80144e2:	2c00      	cmp	r4, #0
 80144e4:	d105      	bne.n	80144f2 <strncpy+0x24>
 80144e6:	189a      	adds	r2, r3, r2
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d0f4      	beq.n	80144d6 <strncpy+0x8>
 80144ec:	701c      	strb	r4, [r3, #0]
 80144ee:	3301      	adds	r3, #1
 80144f0:	e7fa      	b.n	80144e8 <strncpy+0x1a>
 80144f2:	001d      	movs	r5, r3
 80144f4:	e7ed      	b.n	80144d2 <strncpy+0x4>
	...

080144f8 <sulp>:
 80144f8:	b570      	push	{r4, r5, r6, lr}
 80144fa:	0016      	movs	r6, r2
 80144fc:	000d      	movs	r5, r1
 80144fe:	f003 ff17 	bl	8018330 <__ulp>
 8014502:	2e00      	cmp	r6, #0
 8014504:	d00d      	beq.n	8014522 <sulp+0x2a>
 8014506:	236b      	movs	r3, #107	; 0x6b
 8014508:	006a      	lsls	r2, r5, #1
 801450a:	0d52      	lsrs	r2, r2, #21
 801450c:	1a9b      	subs	r3, r3, r2
 801450e:	2b00      	cmp	r3, #0
 8014510:	dd07      	ble.n	8014522 <sulp+0x2a>
 8014512:	2400      	movs	r4, #0
 8014514:	4a03      	ldr	r2, [pc, #12]	; (8014524 <sulp+0x2c>)
 8014516:	051b      	lsls	r3, r3, #20
 8014518:	189d      	adds	r5, r3, r2
 801451a:	002b      	movs	r3, r5
 801451c:	0022      	movs	r2, r4
 801451e:	f7ed fdbf 	bl	80020a0 <__aeabi_dmul>
 8014522:	bd70      	pop	{r4, r5, r6, pc}
 8014524:	3ff00000 	.word	0x3ff00000

08014528 <_strtod_l>:
 8014528:	b5f0      	push	{r4, r5, r6, r7, lr}
 801452a:	b0a7      	sub	sp, #156	; 0x9c
 801452c:	9307      	str	r3, [sp, #28]
 801452e:	2300      	movs	r3, #0
 8014530:	9004      	str	r0, [sp, #16]
 8014532:	9807      	ldr	r0, [sp, #28]
 8014534:	9322      	str	r3, [sp, #136]	; 0x88
 8014536:	9106      	str	r1, [sp, #24]
 8014538:	921d      	str	r2, [sp, #116]	; 0x74
 801453a:	f003 fc28 	bl	8017d8e <__localeconv_l>
 801453e:	0005      	movs	r5, r0
 8014540:	6800      	ldr	r0, [r0, #0]
 8014542:	f7eb fde9 	bl	8000118 <strlen>
 8014546:	2600      	movs	r6, #0
 8014548:	2700      	movs	r7, #0
 801454a:	9b06      	ldr	r3, [sp, #24]
 801454c:	9005      	str	r0, [sp, #20]
 801454e:	9321      	str	r3, [sp, #132]	; 0x84
 8014550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014552:	781a      	ldrb	r2, [r3, #0]
 8014554:	2a0d      	cmp	r2, #13
 8014556:	d839      	bhi.n	80145cc <_strtod_l+0xa4>
 8014558:	2a09      	cmp	r2, #9
 801455a:	d23d      	bcs.n	80145d8 <_strtod_l+0xb0>
 801455c:	2a00      	cmp	r2, #0
 801455e:	d044      	beq.n	80145ea <_strtod_l+0xc2>
 8014560:	2300      	movs	r3, #0
 8014562:	9313      	str	r3, [sp, #76]	; 0x4c
 8014564:	2200      	movs	r2, #0
 8014566:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8014568:	920c      	str	r2, [sp, #48]	; 0x30
 801456a:	7823      	ldrb	r3, [r4, #0]
 801456c:	2b30      	cmp	r3, #48	; 0x30
 801456e:	d000      	beq.n	8014572 <_strtod_l+0x4a>
 8014570:	e07e      	b.n	8014670 <_strtod_l+0x148>
 8014572:	7863      	ldrb	r3, [r4, #1]
 8014574:	2b58      	cmp	r3, #88	; 0x58
 8014576:	d002      	beq.n	801457e <_strtod_l+0x56>
 8014578:	2b78      	cmp	r3, #120	; 0x78
 801457a:	d000      	beq.n	801457e <_strtod_l+0x56>
 801457c:	e06e      	b.n	801465c <_strtod_l+0x134>
 801457e:	9b07      	ldr	r3, [sp, #28]
 8014580:	4a96      	ldr	r2, [pc, #600]	; (80147dc <_strtod_l+0x2b4>)
 8014582:	9302      	str	r3, [sp, #8]
 8014584:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014586:	a921      	add	r1, sp, #132	; 0x84
 8014588:	9301      	str	r3, [sp, #4]
 801458a:	ab22      	add	r3, sp, #136	; 0x88
 801458c:	9300      	str	r3, [sp, #0]
 801458e:	9804      	ldr	r0, [sp, #16]
 8014590:	ab23      	add	r3, sp, #140	; 0x8c
 8014592:	f003 f914 	bl	80177be <__gethex>
 8014596:	2507      	movs	r5, #7
 8014598:	9005      	str	r0, [sp, #20]
 801459a:	4005      	ands	r5, r0
 801459c:	d005      	beq.n	80145aa <_strtod_l+0x82>
 801459e:	2d06      	cmp	r5, #6
 80145a0:	d12f      	bne.n	8014602 <_strtod_l+0xda>
 80145a2:	2300      	movs	r3, #0
 80145a4:	3401      	adds	r4, #1
 80145a6:	9421      	str	r4, [sp, #132]	; 0x84
 80145a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80145aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d002      	beq.n	80145b6 <_strtod_l+0x8e>
 80145b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80145b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80145b4:	601a      	str	r2, [r3, #0]
 80145b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d01d      	beq.n	80145f8 <_strtod_l+0xd0>
 80145bc:	2380      	movs	r3, #128	; 0x80
 80145be:	0032      	movs	r2, r6
 80145c0:	061b      	lsls	r3, r3, #24
 80145c2:	18fb      	adds	r3, r7, r3
 80145c4:	0010      	movs	r0, r2
 80145c6:	0019      	movs	r1, r3
 80145c8:	b027      	add	sp, #156	; 0x9c
 80145ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145cc:	2a2b      	cmp	r2, #43	; 0x2b
 80145ce:	d016      	beq.n	80145fe <_strtod_l+0xd6>
 80145d0:	2a2d      	cmp	r2, #45	; 0x2d
 80145d2:	d003      	beq.n	80145dc <_strtod_l+0xb4>
 80145d4:	2a20      	cmp	r2, #32
 80145d6:	d1c3      	bne.n	8014560 <_strtod_l+0x38>
 80145d8:	3301      	adds	r3, #1
 80145da:	e7b8      	b.n	801454e <_strtod_l+0x26>
 80145dc:	2201      	movs	r2, #1
 80145de:	9213      	str	r2, [sp, #76]	; 0x4c
 80145e0:	1c5a      	adds	r2, r3, #1
 80145e2:	9221      	str	r2, [sp, #132]	; 0x84
 80145e4:	785b      	ldrb	r3, [r3, #1]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d1bc      	bne.n	8014564 <_strtod_l+0x3c>
 80145ea:	9b06      	ldr	r3, [sp, #24]
 80145ec:	9321      	str	r3, [sp, #132]	; 0x84
 80145ee:	2300      	movs	r3, #0
 80145f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80145f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d1db      	bne.n	80145b0 <_strtod_l+0x88>
 80145f8:	0032      	movs	r2, r6
 80145fa:	003b      	movs	r3, r7
 80145fc:	e7e2      	b.n	80145c4 <_strtod_l+0x9c>
 80145fe:	2200      	movs	r2, #0
 8014600:	e7ed      	b.n	80145de <_strtod_l+0xb6>
 8014602:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014604:	2a00      	cmp	r2, #0
 8014606:	d007      	beq.n	8014618 <_strtod_l+0xf0>
 8014608:	2135      	movs	r1, #53	; 0x35
 801460a:	a824      	add	r0, sp, #144	; 0x90
 801460c:	f003 ff7d 	bl	801850a <__copybits>
 8014610:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014612:	9804      	ldr	r0, [sp, #16]
 8014614:	f003 fc12 	bl	8017e3c <_Bfree>
 8014618:	1e68      	subs	r0, r5, #1
 801461a:	2804      	cmp	r0, #4
 801461c:	d806      	bhi.n	801462c <_strtod_l+0x104>
 801461e:	f7eb fd83 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014622:	030c      	.short	0x030c
 8014624:	1917      	.short	0x1917
 8014626:	0c          	.byte	0x0c
 8014627:	00          	.byte	0x00
 8014628:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801462a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801462c:	9b05      	ldr	r3, [sp, #20]
 801462e:	071b      	lsls	r3, r3, #28
 8014630:	d5bb      	bpl.n	80145aa <_strtod_l+0x82>
 8014632:	2380      	movs	r3, #128	; 0x80
 8014634:	061b      	lsls	r3, r3, #24
 8014636:	431f      	orrs	r7, r3
 8014638:	e7b7      	b.n	80145aa <_strtod_l+0x82>
 801463a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801463c:	4a68      	ldr	r2, [pc, #416]	; (80147e0 <_strtod_l+0x2b8>)
 801463e:	4969      	ldr	r1, [pc, #420]	; (80147e4 <_strtod_l+0x2bc>)
 8014640:	401a      	ands	r2, r3
 8014642:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014644:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014646:	185b      	adds	r3, r3, r1
 8014648:	051b      	lsls	r3, r3, #20
 801464a:	431a      	orrs	r2, r3
 801464c:	0017      	movs	r7, r2
 801464e:	e7ed      	b.n	801462c <_strtod_l+0x104>
 8014650:	4f65      	ldr	r7, [pc, #404]	; (80147e8 <_strtod_l+0x2c0>)
 8014652:	e7eb      	b.n	801462c <_strtod_l+0x104>
 8014654:	2601      	movs	r6, #1
 8014656:	4f65      	ldr	r7, [pc, #404]	; (80147ec <_strtod_l+0x2c4>)
 8014658:	4276      	negs	r6, r6
 801465a:	e7e7      	b.n	801462c <_strtod_l+0x104>
 801465c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801465e:	1c5a      	adds	r2, r3, #1
 8014660:	9221      	str	r2, [sp, #132]	; 0x84
 8014662:	785b      	ldrb	r3, [r3, #1]
 8014664:	2b30      	cmp	r3, #48	; 0x30
 8014666:	d0f9      	beq.n	801465c <_strtod_l+0x134>
 8014668:	2b00      	cmp	r3, #0
 801466a:	d09e      	beq.n	80145aa <_strtod_l+0x82>
 801466c:	2301      	movs	r3, #1
 801466e:	930c      	str	r3, [sp, #48]	; 0x30
 8014670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014672:	220a      	movs	r2, #10
 8014674:	9312      	str	r3, [sp, #72]	; 0x48
 8014676:	2300      	movs	r3, #0
 8014678:	930b      	str	r3, [sp, #44]	; 0x2c
 801467a:	9308      	str	r3, [sp, #32]
 801467c:	930a      	str	r3, [sp, #40]	; 0x28
 801467e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8014680:	7804      	ldrb	r4, [r0, #0]
 8014682:	0023      	movs	r3, r4
 8014684:	3b30      	subs	r3, #48	; 0x30
 8014686:	b2d9      	uxtb	r1, r3
 8014688:	2909      	cmp	r1, #9
 801468a:	d934      	bls.n	80146f6 <_strtod_l+0x1ce>
 801468c:	9a05      	ldr	r2, [sp, #20]
 801468e:	6829      	ldr	r1, [r5, #0]
 8014690:	f7ff ff0c 	bl	80144ac <strncmp>
 8014694:	2800      	cmp	r0, #0
 8014696:	d040      	beq.n	801471a <_strtod_l+0x1f2>
 8014698:	2000      	movs	r0, #0
 801469a:	0023      	movs	r3, r4
 801469c:	4684      	mov	ip, r0
 801469e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146a0:	9007      	str	r0, [sp, #28]
 80146a2:	9205      	str	r2, [sp, #20]
 80146a4:	2220      	movs	r2, #32
 80146a6:	0019      	movs	r1, r3
 80146a8:	4391      	bics	r1, r2
 80146aa:	000a      	movs	r2, r1
 80146ac:	2100      	movs	r1, #0
 80146ae:	2a45      	cmp	r2, #69	; 0x45
 80146b0:	d000      	beq.n	80146b4 <_strtod_l+0x18c>
 80146b2:	e0bf      	b.n	8014834 <_strtod_l+0x30c>
 80146b4:	9b05      	ldr	r3, [sp, #20]
 80146b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80146b8:	4303      	orrs	r3, r0
 80146ba:	4313      	orrs	r3, r2
 80146bc:	428b      	cmp	r3, r1
 80146be:	d094      	beq.n	80145ea <_strtod_l+0xc2>
 80146c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146c2:	9306      	str	r3, [sp, #24]
 80146c4:	3301      	adds	r3, #1
 80146c6:	9321      	str	r3, [sp, #132]	; 0x84
 80146c8:	9b06      	ldr	r3, [sp, #24]
 80146ca:	785b      	ldrb	r3, [r3, #1]
 80146cc:	2b2b      	cmp	r3, #43	; 0x2b
 80146ce:	d100      	bne.n	80146d2 <_strtod_l+0x1aa>
 80146d0:	e082      	b.n	80147d8 <_strtod_l+0x2b0>
 80146d2:	000c      	movs	r4, r1
 80146d4:	2b2d      	cmp	r3, #45	; 0x2d
 80146d6:	d105      	bne.n	80146e4 <_strtod_l+0x1bc>
 80146d8:	2401      	movs	r4, #1
 80146da:	9b06      	ldr	r3, [sp, #24]
 80146dc:	3302      	adds	r3, #2
 80146de:	9321      	str	r3, [sp, #132]	; 0x84
 80146e0:	9b06      	ldr	r3, [sp, #24]
 80146e2:	789b      	ldrb	r3, [r3, #2]
 80146e4:	001a      	movs	r2, r3
 80146e6:	3a30      	subs	r2, #48	; 0x30
 80146e8:	2a09      	cmp	r2, #9
 80146ea:	d800      	bhi.n	80146ee <_strtod_l+0x1c6>
 80146ec:	e084      	b.n	80147f8 <_strtod_l+0x2d0>
 80146ee:	9a06      	ldr	r2, [sp, #24]
 80146f0:	2100      	movs	r1, #0
 80146f2:	9221      	str	r2, [sp, #132]	; 0x84
 80146f4:	e09e      	b.n	8014834 <_strtod_l+0x30c>
 80146f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80146f8:	2908      	cmp	r1, #8
 80146fa:	dc09      	bgt.n	8014710 <_strtod_l+0x1e8>
 80146fc:	9908      	ldr	r1, [sp, #32]
 80146fe:	4351      	muls	r1, r2
 8014700:	18cb      	adds	r3, r1, r3
 8014702:	9308      	str	r3, [sp, #32]
 8014704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014706:	3001      	adds	r0, #1
 8014708:	3301      	adds	r3, #1
 801470a:	930a      	str	r3, [sp, #40]	; 0x28
 801470c:	9021      	str	r0, [sp, #132]	; 0x84
 801470e:	e7b6      	b.n	801467e <_strtod_l+0x156>
 8014710:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014712:	4351      	muls	r1, r2
 8014714:	18cb      	adds	r3, r1, r3
 8014716:	930b      	str	r3, [sp, #44]	; 0x2c
 8014718:	e7f4      	b.n	8014704 <_strtod_l+0x1dc>
 801471a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801471c:	9b05      	ldr	r3, [sp, #20]
 801471e:	4694      	mov	ip, r2
 8014720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014722:	4463      	add	r3, ip
 8014724:	9321      	str	r3, [sp, #132]	; 0x84
 8014726:	781b      	ldrb	r3, [r3, #0]
 8014728:	2a00      	cmp	r2, #0
 801472a:	d036      	beq.n	801479a <_strtod_l+0x272>
 801472c:	4684      	mov	ip, r0
 801472e:	9205      	str	r2, [sp, #20]
 8014730:	001a      	movs	r2, r3
 8014732:	3a30      	subs	r2, #48	; 0x30
 8014734:	2a09      	cmp	r2, #9
 8014736:	d912      	bls.n	801475e <_strtod_l+0x236>
 8014738:	2201      	movs	r2, #1
 801473a:	9207      	str	r2, [sp, #28]
 801473c:	e7b2      	b.n	80146a4 <_strtod_l+0x17c>
 801473e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014740:	3001      	adds	r0, #1
 8014742:	1c5a      	adds	r2, r3, #1
 8014744:	9221      	str	r2, [sp, #132]	; 0x84
 8014746:	785b      	ldrb	r3, [r3, #1]
 8014748:	2b30      	cmp	r3, #48	; 0x30
 801474a:	d0f8      	beq.n	801473e <_strtod_l+0x216>
 801474c:	001a      	movs	r2, r3
 801474e:	3a31      	subs	r2, #49	; 0x31
 8014750:	2a08      	cmp	r2, #8
 8014752:	d83c      	bhi.n	80147ce <_strtod_l+0x2a6>
 8014754:	4684      	mov	ip, r0
 8014756:	2000      	movs	r0, #0
 8014758:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801475a:	9005      	str	r0, [sp, #20]
 801475c:	9212      	str	r2, [sp, #72]	; 0x48
 801475e:	3b30      	subs	r3, #48	; 0x30
 8014760:	1c42      	adds	r2, r0, #1
 8014762:	2b00      	cmp	r3, #0
 8014764:	d013      	beq.n	801478e <_strtod_l+0x266>
 8014766:	210a      	movs	r1, #10
 8014768:	4494      	add	ip, r2
 801476a:	9a05      	ldr	r2, [sp, #20]
 801476c:	1885      	adds	r5, r0, r2
 801476e:	42aa      	cmp	r2, r5
 8014770:	d115      	bne.n	801479e <_strtod_l+0x276>
 8014772:	9905      	ldr	r1, [sp, #20]
 8014774:	9a05      	ldr	r2, [sp, #20]
 8014776:	3101      	adds	r1, #1
 8014778:	1809      	adds	r1, r1, r0
 801477a:	1812      	adds	r2, r2, r0
 801477c:	9105      	str	r1, [sp, #20]
 801477e:	2a08      	cmp	r2, #8
 8014780:	dc1b      	bgt.n	80147ba <_strtod_l+0x292>
 8014782:	220a      	movs	r2, #10
 8014784:	9908      	ldr	r1, [sp, #32]
 8014786:	434a      	muls	r2, r1
 8014788:	189b      	adds	r3, r3, r2
 801478a:	2200      	movs	r2, #0
 801478c:	9308      	str	r3, [sp, #32]
 801478e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014790:	0010      	movs	r0, r2
 8014792:	1c59      	adds	r1, r3, #1
 8014794:	9121      	str	r1, [sp, #132]	; 0x84
 8014796:	785b      	ldrb	r3, [r3, #1]
 8014798:	e7ca      	b.n	8014730 <_strtod_l+0x208>
 801479a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801479c:	e7d4      	b.n	8014748 <_strtod_l+0x220>
 801479e:	1c54      	adds	r4, r2, #1
 80147a0:	2a08      	cmp	r2, #8
 80147a2:	dc04      	bgt.n	80147ae <_strtod_l+0x286>
 80147a4:	9a08      	ldr	r2, [sp, #32]
 80147a6:	434a      	muls	r2, r1
 80147a8:	9208      	str	r2, [sp, #32]
 80147aa:	0022      	movs	r2, r4
 80147ac:	e7df      	b.n	801476e <_strtod_l+0x246>
 80147ae:	2c10      	cmp	r4, #16
 80147b0:	dcfb      	bgt.n	80147aa <_strtod_l+0x282>
 80147b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80147b4:	434a      	muls	r2, r1
 80147b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80147b8:	e7f7      	b.n	80147aa <_strtod_l+0x282>
 80147ba:	9905      	ldr	r1, [sp, #20]
 80147bc:	2200      	movs	r2, #0
 80147be:	2910      	cmp	r1, #16
 80147c0:	dce5      	bgt.n	801478e <_strtod_l+0x266>
 80147c2:	210a      	movs	r1, #10
 80147c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80147c6:	4341      	muls	r1, r0
 80147c8:	185b      	adds	r3, r3, r1
 80147ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80147cc:	e7df      	b.n	801478e <_strtod_l+0x266>
 80147ce:	2200      	movs	r2, #0
 80147d0:	4694      	mov	ip, r2
 80147d2:	9205      	str	r2, [sp, #20]
 80147d4:	3201      	adds	r2, #1
 80147d6:	e7b0      	b.n	801473a <_strtod_l+0x212>
 80147d8:	000c      	movs	r4, r1
 80147da:	e77e      	b.n	80146da <_strtod_l+0x1b2>
 80147dc:	0801bf6c 	.word	0x0801bf6c
 80147e0:	ffefffff 	.word	0xffefffff
 80147e4:	00000433 	.word	0x00000433
 80147e8:	7ff00000 	.word	0x7ff00000
 80147ec:	7fffffff 	.word	0x7fffffff
 80147f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147f2:	1c5a      	adds	r2, r3, #1
 80147f4:	9221      	str	r2, [sp, #132]	; 0x84
 80147f6:	785b      	ldrb	r3, [r3, #1]
 80147f8:	2b30      	cmp	r3, #48	; 0x30
 80147fa:	d0f9      	beq.n	80147f0 <_strtod_l+0x2c8>
 80147fc:	001a      	movs	r2, r3
 80147fe:	3a31      	subs	r2, #49	; 0x31
 8014800:	2100      	movs	r1, #0
 8014802:	2a08      	cmp	r2, #8
 8014804:	d816      	bhi.n	8014834 <_strtod_l+0x30c>
 8014806:	3b30      	subs	r3, #48	; 0x30
 8014808:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801480a:	930e      	str	r3, [sp, #56]	; 0x38
 801480c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801480e:	1c59      	adds	r1, r3, #1
 8014810:	9121      	str	r1, [sp, #132]	; 0x84
 8014812:	785b      	ldrb	r3, [r3, #1]
 8014814:	001a      	movs	r2, r3
 8014816:	3a30      	subs	r2, #48	; 0x30
 8014818:	2a09      	cmp	r2, #9
 801481a:	d932      	bls.n	8014882 <_strtod_l+0x35a>
 801481c:	1b4a      	subs	r2, r1, r5
 801481e:	4dad      	ldr	r5, [pc, #692]	; (8014ad4 <_strtod_l+0x5ac>)
 8014820:	0029      	movs	r1, r5
 8014822:	2a08      	cmp	r2, #8
 8014824:	dc03      	bgt.n	801482e <_strtod_l+0x306>
 8014826:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014828:	42a9      	cmp	r1, r5
 801482a:	dd00      	ble.n	801482e <_strtod_l+0x306>
 801482c:	0029      	movs	r1, r5
 801482e:	2c00      	cmp	r4, #0
 8014830:	d000      	beq.n	8014834 <_strtod_l+0x30c>
 8014832:	4249      	negs	r1, r1
 8014834:	9a05      	ldr	r2, [sp, #20]
 8014836:	2a00      	cmp	r2, #0
 8014838:	d149      	bne.n	80148ce <_strtod_l+0x3a6>
 801483a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801483c:	4310      	orrs	r0, r2
 801483e:	d000      	beq.n	8014842 <_strtod_l+0x31a>
 8014840:	e6b3      	b.n	80145aa <_strtod_l+0x82>
 8014842:	9a07      	ldr	r2, [sp, #28]
 8014844:	2a00      	cmp	r2, #0
 8014846:	d000      	beq.n	801484a <_strtod_l+0x322>
 8014848:	e6cf      	b.n	80145ea <_strtod_l+0xc2>
 801484a:	2b4e      	cmp	r3, #78	; 0x4e
 801484c:	d025      	beq.n	801489a <_strtod_l+0x372>
 801484e:	dc1f      	bgt.n	8014890 <_strtod_l+0x368>
 8014850:	2b49      	cmp	r3, #73	; 0x49
 8014852:	d000      	beq.n	8014856 <_strtod_l+0x32e>
 8014854:	e6c9      	b.n	80145ea <_strtod_l+0xc2>
 8014856:	49a0      	ldr	r1, [pc, #640]	; (8014ad8 <_strtod_l+0x5b0>)
 8014858:	a821      	add	r0, sp, #132	; 0x84
 801485a:	f003 f9ed 	bl	8017c38 <__match>
 801485e:	2800      	cmp	r0, #0
 8014860:	d100      	bne.n	8014864 <_strtod_l+0x33c>
 8014862:	e6c2      	b.n	80145ea <_strtod_l+0xc2>
 8014864:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014866:	499d      	ldr	r1, [pc, #628]	; (8014adc <_strtod_l+0x5b4>)
 8014868:	3b01      	subs	r3, #1
 801486a:	a821      	add	r0, sp, #132	; 0x84
 801486c:	9321      	str	r3, [sp, #132]	; 0x84
 801486e:	f003 f9e3 	bl	8017c38 <__match>
 8014872:	2800      	cmp	r0, #0
 8014874:	d102      	bne.n	801487c <_strtod_l+0x354>
 8014876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014878:	3301      	adds	r3, #1
 801487a:	9321      	str	r3, [sp, #132]	; 0x84
 801487c:	4f98      	ldr	r7, [pc, #608]	; (8014ae0 <_strtod_l+0x5b8>)
 801487e:	2600      	movs	r6, #0
 8014880:	e693      	b.n	80145aa <_strtod_l+0x82>
 8014882:	220a      	movs	r2, #10
 8014884:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014886:	434a      	muls	r2, r1
 8014888:	18d2      	adds	r2, r2, r3
 801488a:	3a30      	subs	r2, #48	; 0x30
 801488c:	920e      	str	r2, [sp, #56]	; 0x38
 801488e:	e7bd      	b.n	801480c <_strtod_l+0x2e4>
 8014890:	2b69      	cmp	r3, #105	; 0x69
 8014892:	d0e0      	beq.n	8014856 <_strtod_l+0x32e>
 8014894:	2b6e      	cmp	r3, #110	; 0x6e
 8014896:	d000      	beq.n	801489a <_strtod_l+0x372>
 8014898:	e6a7      	b.n	80145ea <_strtod_l+0xc2>
 801489a:	4992      	ldr	r1, [pc, #584]	; (8014ae4 <_strtod_l+0x5bc>)
 801489c:	a821      	add	r0, sp, #132	; 0x84
 801489e:	f003 f9cb 	bl	8017c38 <__match>
 80148a2:	2800      	cmp	r0, #0
 80148a4:	d100      	bne.n	80148a8 <_strtod_l+0x380>
 80148a6:	e6a0      	b.n	80145ea <_strtod_l+0xc2>
 80148a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	2b28      	cmp	r3, #40	; 0x28
 80148ae:	d10c      	bne.n	80148ca <_strtod_l+0x3a2>
 80148b0:	aa24      	add	r2, sp, #144	; 0x90
 80148b2:	498d      	ldr	r1, [pc, #564]	; (8014ae8 <_strtod_l+0x5c0>)
 80148b4:	a821      	add	r0, sp, #132	; 0x84
 80148b6:	f003 f9d3 	bl	8017c60 <__hexnan>
 80148ba:	2805      	cmp	r0, #5
 80148bc:	d105      	bne.n	80148ca <_strtod_l+0x3a2>
 80148be:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80148c0:	4a87      	ldr	r2, [pc, #540]	; (8014ae0 <_strtod_l+0x5b8>)
 80148c2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80148c4:	431a      	orrs	r2, r3
 80148c6:	0017      	movs	r7, r2
 80148c8:	e66f      	b.n	80145aa <_strtod_l+0x82>
 80148ca:	4f88      	ldr	r7, [pc, #544]	; (8014aec <_strtod_l+0x5c4>)
 80148cc:	e7d7      	b.n	801487e <_strtod_l+0x356>
 80148ce:	4663      	mov	r3, ip
 80148d0:	1acb      	subs	r3, r1, r3
 80148d2:	9307      	str	r3, [sp, #28]
 80148d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d101      	bne.n	80148de <_strtod_l+0x3b6>
 80148da:	9b05      	ldr	r3, [sp, #20]
 80148dc:	930a      	str	r3, [sp, #40]	; 0x28
 80148de:	9c05      	ldr	r4, [sp, #20]
 80148e0:	2c10      	cmp	r4, #16
 80148e2:	dd00      	ble.n	80148e6 <_strtod_l+0x3be>
 80148e4:	2410      	movs	r4, #16
 80148e6:	9808      	ldr	r0, [sp, #32]
 80148e8:	f7ee fa20 	bl	8002d2c <__aeabi_ui2d>
 80148ec:	9b05      	ldr	r3, [sp, #20]
 80148ee:	0006      	movs	r6, r0
 80148f0:	000f      	movs	r7, r1
 80148f2:	2b09      	cmp	r3, #9
 80148f4:	dc15      	bgt.n	8014922 <_strtod_l+0x3fa>
 80148f6:	9b07      	ldr	r3, [sp, #28]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d100      	bne.n	80148fe <_strtod_l+0x3d6>
 80148fc:	e655      	b.n	80145aa <_strtod_l+0x82>
 80148fe:	9b07      	ldr	r3, [sp, #28]
 8014900:	2b00      	cmp	r3, #0
 8014902:	dc00      	bgt.n	8014906 <_strtod_l+0x3de>
 8014904:	e07d      	b.n	8014a02 <_strtod_l+0x4da>
 8014906:	2b16      	cmp	r3, #22
 8014908:	dc62      	bgt.n	80149d0 <_strtod_l+0x4a8>
 801490a:	00dc      	lsls	r4, r3, #3
 801490c:	4b78      	ldr	r3, [pc, #480]	; (8014af0 <_strtod_l+0x5c8>)
 801490e:	0032      	movs	r2, r6
 8014910:	1919      	adds	r1, r3, r4
 8014912:	003b      	movs	r3, r7
 8014914:	6808      	ldr	r0, [r1, #0]
 8014916:	6849      	ldr	r1, [r1, #4]
 8014918:	f7ed fbc2 	bl	80020a0 <__aeabi_dmul>
 801491c:	0006      	movs	r6, r0
 801491e:	000f      	movs	r7, r1
 8014920:	e643      	b.n	80145aa <_strtod_l+0x82>
 8014922:	0022      	movs	r2, r4
 8014924:	4b72      	ldr	r3, [pc, #456]	; (8014af0 <_strtod_l+0x5c8>)
 8014926:	3a09      	subs	r2, #9
 8014928:	00d2      	lsls	r2, r2, #3
 801492a:	189b      	adds	r3, r3, r2
 801492c:	681a      	ldr	r2, [r3, #0]
 801492e:	685b      	ldr	r3, [r3, #4]
 8014930:	f7ed fbb6 	bl	80020a0 <__aeabi_dmul>
 8014934:	0006      	movs	r6, r0
 8014936:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014938:	000f      	movs	r7, r1
 801493a:	f7ee f9f7 	bl	8002d2c <__aeabi_ui2d>
 801493e:	000b      	movs	r3, r1
 8014940:	0002      	movs	r2, r0
 8014942:	0039      	movs	r1, r7
 8014944:	0030      	movs	r0, r6
 8014946:	f7ec fc85 	bl	8001254 <__aeabi_dadd>
 801494a:	9b05      	ldr	r3, [sp, #20]
 801494c:	0006      	movs	r6, r0
 801494e:	000f      	movs	r7, r1
 8014950:	2b0f      	cmp	r3, #15
 8014952:	ddd0      	ble.n	80148f6 <_strtod_l+0x3ce>
 8014954:	9b05      	ldr	r3, [sp, #20]
 8014956:	1b1c      	subs	r4, r3, r4
 8014958:	9b07      	ldr	r3, [sp, #28]
 801495a:	18e4      	adds	r4, r4, r3
 801495c:	2c00      	cmp	r4, #0
 801495e:	dc00      	bgt.n	8014962 <_strtod_l+0x43a>
 8014960:	e094      	b.n	8014a8c <_strtod_l+0x564>
 8014962:	230f      	movs	r3, #15
 8014964:	4023      	ands	r3, r4
 8014966:	d00a      	beq.n	801497e <_strtod_l+0x456>
 8014968:	4961      	ldr	r1, [pc, #388]	; (8014af0 <_strtod_l+0x5c8>)
 801496a:	00db      	lsls	r3, r3, #3
 801496c:	18c9      	adds	r1, r1, r3
 801496e:	0032      	movs	r2, r6
 8014970:	6808      	ldr	r0, [r1, #0]
 8014972:	6849      	ldr	r1, [r1, #4]
 8014974:	003b      	movs	r3, r7
 8014976:	f7ed fb93 	bl	80020a0 <__aeabi_dmul>
 801497a:	0006      	movs	r6, r0
 801497c:	000f      	movs	r7, r1
 801497e:	230f      	movs	r3, #15
 8014980:	439c      	bics	r4, r3
 8014982:	d06e      	beq.n	8014a62 <_strtod_l+0x53a>
 8014984:	3326      	adds	r3, #38	; 0x26
 8014986:	33ff      	adds	r3, #255	; 0xff
 8014988:	429c      	cmp	r4, r3
 801498a:	dd48      	ble.n	8014a1e <_strtod_l+0x4f6>
 801498c:	2400      	movs	r4, #0
 801498e:	9405      	str	r4, [sp, #20]
 8014990:	940b      	str	r4, [sp, #44]	; 0x2c
 8014992:	940a      	str	r4, [sp, #40]	; 0x28
 8014994:	2322      	movs	r3, #34	; 0x22
 8014996:	2600      	movs	r6, #0
 8014998:	9a04      	ldr	r2, [sp, #16]
 801499a:	4f51      	ldr	r7, [pc, #324]	; (8014ae0 <_strtod_l+0x5b8>)
 801499c:	6013      	str	r3, [r2, #0]
 801499e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149a0:	42b3      	cmp	r3, r6
 80149a2:	d100      	bne.n	80149a6 <_strtod_l+0x47e>
 80149a4:	e601      	b.n	80145aa <_strtod_l+0x82>
 80149a6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80149a8:	9804      	ldr	r0, [sp, #16]
 80149aa:	f003 fa47 	bl	8017e3c <_Bfree>
 80149ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80149b0:	9804      	ldr	r0, [sp, #16]
 80149b2:	f003 fa43 	bl	8017e3c <_Bfree>
 80149b6:	9905      	ldr	r1, [sp, #20]
 80149b8:	9804      	ldr	r0, [sp, #16]
 80149ba:	f003 fa3f 	bl	8017e3c <_Bfree>
 80149be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80149c0:	9804      	ldr	r0, [sp, #16]
 80149c2:	f003 fa3b 	bl	8017e3c <_Bfree>
 80149c6:	0021      	movs	r1, r4
 80149c8:	9804      	ldr	r0, [sp, #16]
 80149ca:	f003 fa37 	bl	8017e3c <_Bfree>
 80149ce:	e5ec      	b.n	80145aa <_strtod_l+0x82>
 80149d0:	2325      	movs	r3, #37	; 0x25
 80149d2:	9a05      	ldr	r2, [sp, #20]
 80149d4:	1a9b      	subs	r3, r3, r2
 80149d6:	9a07      	ldr	r2, [sp, #28]
 80149d8:	4293      	cmp	r3, r2
 80149da:	dbbb      	blt.n	8014954 <_strtod_l+0x42c>
 80149dc:	230f      	movs	r3, #15
 80149de:	9a05      	ldr	r2, [sp, #20]
 80149e0:	4c43      	ldr	r4, [pc, #268]	; (8014af0 <_strtod_l+0x5c8>)
 80149e2:	1a9d      	subs	r5, r3, r2
 80149e4:	00e9      	lsls	r1, r5, #3
 80149e6:	1861      	adds	r1, r4, r1
 80149e8:	0032      	movs	r2, r6
 80149ea:	6808      	ldr	r0, [r1, #0]
 80149ec:	6849      	ldr	r1, [r1, #4]
 80149ee:	003b      	movs	r3, r7
 80149f0:	f7ed fb56 	bl	80020a0 <__aeabi_dmul>
 80149f4:	9b07      	ldr	r3, [sp, #28]
 80149f6:	1b5e      	subs	r6, r3, r5
 80149f8:	00f6      	lsls	r6, r6, #3
 80149fa:	19a6      	adds	r6, r4, r6
 80149fc:	6832      	ldr	r2, [r6, #0]
 80149fe:	6873      	ldr	r3, [r6, #4]
 8014a00:	e78a      	b.n	8014918 <_strtod_l+0x3f0>
 8014a02:	9b07      	ldr	r3, [sp, #28]
 8014a04:	3316      	adds	r3, #22
 8014a06:	dba5      	blt.n	8014954 <_strtod_l+0x42c>
 8014a08:	9b07      	ldr	r3, [sp, #28]
 8014a0a:	0030      	movs	r0, r6
 8014a0c:	00da      	lsls	r2, r3, #3
 8014a0e:	4b38      	ldr	r3, [pc, #224]	; (8014af0 <_strtod_l+0x5c8>)
 8014a10:	0039      	movs	r1, r7
 8014a12:	1a9b      	subs	r3, r3, r2
 8014a14:	681a      	ldr	r2, [r3, #0]
 8014a16:	685b      	ldr	r3, [r3, #4]
 8014a18:	f7ec ff38 	bl	800188c <__aeabi_ddiv>
 8014a1c:	e77e      	b.n	801491c <_strtod_l+0x3f4>
 8014a1e:	2300      	movs	r3, #0
 8014a20:	0030      	movs	r0, r6
 8014a22:	0039      	movs	r1, r7
 8014a24:	001d      	movs	r5, r3
 8014a26:	1124      	asrs	r4, r4, #4
 8014a28:	2c01      	cmp	r4, #1
 8014a2a:	dc1d      	bgt.n	8014a68 <_strtod_l+0x540>
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d001      	beq.n	8014a34 <_strtod_l+0x50c>
 8014a30:	0006      	movs	r6, r0
 8014a32:	000f      	movs	r7, r1
 8014a34:	4b2f      	ldr	r3, [pc, #188]	; (8014af4 <_strtod_l+0x5cc>)
 8014a36:	00ed      	lsls	r5, r5, #3
 8014a38:	18ff      	adds	r7, r7, r3
 8014a3a:	4b2f      	ldr	r3, [pc, #188]	; (8014af8 <_strtod_l+0x5d0>)
 8014a3c:	0032      	movs	r2, r6
 8014a3e:	195d      	adds	r5, r3, r5
 8014a40:	6828      	ldr	r0, [r5, #0]
 8014a42:	6869      	ldr	r1, [r5, #4]
 8014a44:	003b      	movs	r3, r7
 8014a46:	f7ed fb2b 	bl	80020a0 <__aeabi_dmul>
 8014a4a:	4b25      	ldr	r3, [pc, #148]	; (8014ae0 <_strtod_l+0x5b8>)
 8014a4c:	4a2b      	ldr	r2, [pc, #172]	; (8014afc <_strtod_l+0x5d4>)
 8014a4e:	0006      	movs	r6, r0
 8014a50:	400b      	ands	r3, r1
 8014a52:	4293      	cmp	r3, r2
 8014a54:	d89a      	bhi.n	801498c <_strtod_l+0x464>
 8014a56:	4a2a      	ldr	r2, [pc, #168]	; (8014b00 <_strtod_l+0x5d8>)
 8014a58:	4293      	cmp	r3, r2
 8014a5a:	d913      	bls.n	8014a84 <_strtod_l+0x55c>
 8014a5c:	2601      	movs	r6, #1
 8014a5e:	4f29      	ldr	r7, [pc, #164]	; (8014b04 <_strtod_l+0x5dc>)
 8014a60:	4276      	negs	r6, r6
 8014a62:	2300      	movs	r3, #0
 8014a64:	9306      	str	r3, [sp, #24]
 8014a66:	e07b      	b.n	8014b60 <_strtod_l+0x638>
 8014a68:	2201      	movs	r2, #1
 8014a6a:	4214      	tst	r4, r2
 8014a6c:	d007      	beq.n	8014a7e <_strtod_l+0x556>
 8014a6e:	4a22      	ldr	r2, [pc, #136]	; (8014af8 <_strtod_l+0x5d0>)
 8014a70:	00eb      	lsls	r3, r5, #3
 8014a72:	189b      	adds	r3, r3, r2
 8014a74:	681a      	ldr	r2, [r3, #0]
 8014a76:	685b      	ldr	r3, [r3, #4]
 8014a78:	f7ed fb12 	bl	80020a0 <__aeabi_dmul>
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	3501      	adds	r5, #1
 8014a80:	1064      	asrs	r4, r4, #1
 8014a82:	e7d1      	b.n	8014a28 <_strtod_l+0x500>
 8014a84:	23d4      	movs	r3, #212	; 0xd4
 8014a86:	049b      	lsls	r3, r3, #18
 8014a88:	18cf      	adds	r7, r1, r3
 8014a8a:	e7ea      	b.n	8014a62 <_strtod_l+0x53a>
 8014a8c:	2c00      	cmp	r4, #0
 8014a8e:	d0e8      	beq.n	8014a62 <_strtod_l+0x53a>
 8014a90:	230f      	movs	r3, #15
 8014a92:	4264      	negs	r4, r4
 8014a94:	4023      	ands	r3, r4
 8014a96:	d00a      	beq.n	8014aae <_strtod_l+0x586>
 8014a98:	4a15      	ldr	r2, [pc, #84]	; (8014af0 <_strtod_l+0x5c8>)
 8014a9a:	00db      	lsls	r3, r3, #3
 8014a9c:	18d3      	adds	r3, r2, r3
 8014a9e:	0030      	movs	r0, r6
 8014aa0:	681a      	ldr	r2, [r3, #0]
 8014aa2:	685b      	ldr	r3, [r3, #4]
 8014aa4:	0039      	movs	r1, r7
 8014aa6:	f7ec fef1 	bl	800188c <__aeabi_ddiv>
 8014aaa:	0006      	movs	r6, r0
 8014aac:	000f      	movs	r7, r1
 8014aae:	1124      	asrs	r4, r4, #4
 8014ab0:	d0d7      	beq.n	8014a62 <_strtod_l+0x53a>
 8014ab2:	2c1f      	cmp	r4, #31
 8014ab4:	dd28      	ble.n	8014b08 <_strtod_l+0x5e0>
 8014ab6:	2400      	movs	r4, #0
 8014ab8:	9405      	str	r4, [sp, #20]
 8014aba:	940b      	str	r4, [sp, #44]	; 0x2c
 8014abc:	940a      	str	r4, [sp, #40]	; 0x28
 8014abe:	2322      	movs	r3, #34	; 0x22
 8014ac0:	9a04      	ldr	r2, [sp, #16]
 8014ac2:	2600      	movs	r6, #0
 8014ac4:	6013      	str	r3, [r2, #0]
 8014ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ac8:	2700      	movs	r7, #0
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d000      	beq.n	8014ad0 <_strtod_l+0x5a8>
 8014ace:	e76a      	b.n	80149a6 <_strtod_l+0x47e>
 8014ad0:	e56b      	b.n	80145aa <_strtod_l+0x82>
 8014ad2:	46c0      	nop			; (mov r8, r8)
 8014ad4:	00004e1f 	.word	0x00004e1f
 8014ad8:	0801bfc5 	.word	0x0801bfc5
 8014adc:	0801c118 	.word	0x0801c118
 8014ae0:	7ff00000 	.word	0x7ff00000
 8014ae4:	0801bfcd 	.word	0x0801bfcd
 8014ae8:	0801bf80 	.word	0x0801bf80
 8014aec:	fff80000 	.word	0xfff80000
 8014af0:	0801c150 	.word	0x0801c150
 8014af4:	fcb00000 	.word	0xfcb00000
 8014af8:	0801c128 	.word	0x0801c128
 8014afc:	7ca00000 	.word	0x7ca00000
 8014b00:	7c900000 	.word	0x7c900000
 8014b04:	7fefffff 	.word	0x7fefffff
 8014b08:	2310      	movs	r3, #16
 8014b0a:	4023      	ands	r3, r4
 8014b0c:	9306      	str	r3, [sp, #24]
 8014b0e:	d001      	beq.n	8014b14 <_strtod_l+0x5ec>
 8014b10:	236a      	movs	r3, #106	; 0x6a
 8014b12:	9306      	str	r3, [sp, #24]
 8014b14:	2300      	movs	r3, #0
 8014b16:	0030      	movs	r0, r6
 8014b18:	0039      	movs	r1, r7
 8014b1a:	001d      	movs	r5, r3
 8014b1c:	2c00      	cmp	r4, #0
 8014b1e:	dd00      	ble.n	8014b22 <_strtod_l+0x5fa>
 8014b20:	e10e      	b.n	8014d40 <_strtod_l+0x818>
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d001      	beq.n	8014b2a <_strtod_l+0x602>
 8014b26:	0006      	movs	r6, r0
 8014b28:	000f      	movs	r7, r1
 8014b2a:	9b06      	ldr	r3, [sp, #24]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d00f      	beq.n	8014b50 <_strtod_l+0x628>
 8014b30:	236b      	movs	r3, #107	; 0x6b
 8014b32:	0079      	lsls	r1, r7, #1
 8014b34:	0d49      	lsrs	r1, r1, #21
 8014b36:	003a      	movs	r2, r7
 8014b38:	1a5b      	subs	r3, r3, r1
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	dd08      	ble.n	8014b50 <_strtod_l+0x628>
 8014b3e:	2b1f      	cmp	r3, #31
 8014b40:	dc00      	bgt.n	8014b44 <_strtod_l+0x61c>
 8014b42:	e112      	b.n	8014d6a <_strtod_l+0x842>
 8014b44:	2600      	movs	r6, #0
 8014b46:	2b34      	cmp	r3, #52	; 0x34
 8014b48:	dc00      	bgt.n	8014b4c <_strtod_l+0x624>
 8014b4a:	e107      	b.n	8014d5c <_strtod_l+0x834>
 8014b4c:	27dc      	movs	r7, #220	; 0xdc
 8014b4e:	04bf      	lsls	r7, r7, #18
 8014b50:	2200      	movs	r2, #0
 8014b52:	2300      	movs	r3, #0
 8014b54:	0030      	movs	r0, r6
 8014b56:	0039      	movs	r1, r7
 8014b58:	f7eb fc80 	bl	800045c <__aeabi_dcmpeq>
 8014b5c:	2800      	cmp	r0, #0
 8014b5e:	d1aa      	bne.n	8014ab6 <_strtod_l+0x58e>
 8014b60:	9b08      	ldr	r3, [sp, #32]
 8014b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b64:	9300      	str	r3, [sp, #0]
 8014b66:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014b68:	9b05      	ldr	r3, [sp, #20]
 8014b6a:	9804      	ldr	r0, [sp, #16]
 8014b6c:	f003 f9ae 	bl	8017ecc <__s2b>
 8014b70:	900b      	str	r0, [sp, #44]	; 0x2c
 8014b72:	2800      	cmp	r0, #0
 8014b74:	d100      	bne.n	8014b78 <_strtod_l+0x650>
 8014b76:	e709      	b.n	801498c <_strtod_l+0x464>
 8014b78:	9b07      	ldr	r3, [sp, #28]
 8014b7a:	9a07      	ldr	r2, [sp, #28]
 8014b7c:	17db      	asrs	r3, r3, #31
 8014b7e:	4252      	negs	r2, r2
 8014b80:	4013      	ands	r3, r2
 8014b82:	9315      	str	r3, [sp, #84]	; 0x54
 8014b84:	9b07      	ldr	r3, [sp, #28]
 8014b86:	2400      	movs	r4, #0
 8014b88:	43db      	mvns	r3, r3
 8014b8a:	9a07      	ldr	r2, [sp, #28]
 8014b8c:	17db      	asrs	r3, r3, #31
 8014b8e:	401a      	ands	r2, r3
 8014b90:	921c      	str	r2, [sp, #112]	; 0x70
 8014b92:	9405      	str	r4, [sp, #20]
 8014b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b96:	9804      	ldr	r0, [sp, #16]
 8014b98:	6859      	ldr	r1, [r3, #4]
 8014b9a:	f003 f927 	bl	8017dec <_Balloc>
 8014b9e:	900a      	str	r0, [sp, #40]	; 0x28
 8014ba0:	2800      	cmp	r0, #0
 8014ba2:	d100      	bne.n	8014ba6 <_strtod_l+0x67e>
 8014ba4:	e6f6      	b.n	8014994 <_strtod_l+0x46c>
 8014ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ba8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014baa:	691b      	ldr	r3, [r3, #16]
 8014bac:	310c      	adds	r1, #12
 8014bae:	1c9a      	adds	r2, r3, #2
 8014bb0:	0092      	lsls	r2, r2, #2
 8014bb2:	300c      	adds	r0, #12
 8014bb4:	9308      	str	r3, [sp, #32]
 8014bb6:	f7ff fa32 	bl	801401e <memcpy>
 8014bba:	ab24      	add	r3, sp, #144	; 0x90
 8014bbc:	9301      	str	r3, [sp, #4]
 8014bbe:	ab23      	add	r3, sp, #140	; 0x8c
 8014bc0:	9300      	str	r3, [sp, #0]
 8014bc2:	0032      	movs	r2, r6
 8014bc4:	003b      	movs	r3, r7
 8014bc6:	9804      	ldr	r0, [sp, #16]
 8014bc8:	960e      	str	r6, [sp, #56]	; 0x38
 8014bca:	970f      	str	r7, [sp, #60]	; 0x3c
 8014bcc:	f003 fc22 	bl	8018414 <__d2b>
 8014bd0:	9022      	str	r0, [sp, #136]	; 0x88
 8014bd2:	2800      	cmp	r0, #0
 8014bd4:	d100      	bne.n	8014bd8 <_strtod_l+0x6b0>
 8014bd6:	e6dd      	b.n	8014994 <_strtod_l+0x46c>
 8014bd8:	2101      	movs	r1, #1
 8014bda:	9804      	ldr	r0, [sp, #16]
 8014bdc:	f003 f9fd 	bl	8017fda <__i2b>
 8014be0:	9005      	str	r0, [sp, #20]
 8014be2:	2800      	cmp	r0, #0
 8014be4:	d100      	bne.n	8014be8 <_strtod_l+0x6c0>
 8014be6:	e6d5      	b.n	8014994 <_strtod_l+0x46c>
 8014be8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	da00      	bge.n	8014bf0 <_strtod_l+0x6c8>
 8014bee:	e0c1      	b.n	8014d74 <_strtod_l+0x84c>
 8014bf0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014bf2:	189d      	adds	r5, r3, r2
 8014bf4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014bf6:	4694      	mov	ip, r2
 8014bf8:	9906      	ldr	r1, [sp, #24]
 8014bfa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014bfc:	1a5b      	subs	r3, r3, r1
 8014bfe:	2136      	movs	r1, #54	; 0x36
 8014c00:	189b      	adds	r3, r3, r2
 8014c02:	1a8a      	subs	r2, r1, r2
 8014c04:	49b2      	ldr	r1, [pc, #712]	; (8014ed0 <_strtod_l+0x9a8>)
 8014c06:	3b01      	subs	r3, #1
 8014c08:	2001      	movs	r0, #1
 8014c0a:	428b      	cmp	r3, r1
 8014c0c:	db00      	blt.n	8014c10 <_strtod_l+0x6e8>
 8014c0e:	e0bd      	b.n	8014d8c <_strtod_l+0x864>
 8014c10:	1ac9      	subs	r1, r1, r3
 8014c12:	1a52      	subs	r2, r2, r1
 8014c14:	291f      	cmp	r1, #31
 8014c16:	dd00      	ble.n	8014c1a <_strtod_l+0x6f2>
 8014c18:	e0b1      	b.n	8014d7e <_strtod_l+0x856>
 8014c1a:	4088      	lsls	r0, r1
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	9014      	str	r0, [sp, #80]	; 0x50
 8014c20:	9310      	str	r3, [sp, #64]	; 0x40
 8014c22:	18ab      	adds	r3, r5, r2
 8014c24:	9308      	str	r3, [sp, #32]
 8014c26:	0013      	movs	r3, r2
 8014c28:	9a06      	ldr	r2, [sp, #24]
 8014c2a:	4463      	add	r3, ip
 8014c2c:	18d3      	adds	r3, r2, r3
 8014c2e:	9a08      	ldr	r2, [sp, #32]
 8014c30:	930c      	str	r3, [sp, #48]	; 0x30
 8014c32:	002b      	movs	r3, r5
 8014c34:	4295      	cmp	r5, r2
 8014c36:	dd00      	ble.n	8014c3a <_strtod_l+0x712>
 8014c38:	0013      	movs	r3, r2
 8014c3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c3c:	4293      	cmp	r3, r2
 8014c3e:	dd00      	ble.n	8014c42 <_strtod_l+0x71a>
 8014c40:	0013      	movs	r3, r2
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	dd06      	ble.n	8014c54 <_strtod_l+0x72c>
 8014c46:	9a08      	ldr	r2, [sp, #32]
 8014c48:	1aed      	subs	r5, r5, r3
 8014c4a:	1ad2      	subs	r2, r2, r3
 8014c4c:	9208      	str	r2, [sp, #32]
 8014c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c50:	1ad2      	subs	r2, r2, r3
 8014c52:	920c      	str	r2, [sp, #48]	; 0x30
 8014c54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d017      	beq.n	8014c8a <_strtod_l+0x762>
 8014c5a:	001a      	movs	r2, r3
 8014c5c:	9905      	ldr	r1, [sp, #20]
 8014c5e:	9804      	ldr	r0, [sp, #16]
 8014c60:	f003 fa54 	bl	801810c <__pow5mult>
 8014c64:	9005      	str	r0, [sp, #20]
 8014c66:	2800      	cmp	r0, #0
 8014c68:	d100      	bne.n	8014c6c <_strtod_l+0x744>
 8014c6a:	e693      	b.n	8014994 <_strtod_l+0x46c>
 8014c6c:	0001      	movs	r1, r0
 8014c6e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014c70:	9804      	ldr	r0, [sp, #16]
 8014c72:	f003 f9bb 	bl	8017fec <__multiply>
 8014c76:	9012      	str	r0, [sp, #72]	; 0x48
 8014c78:	2800      	cmp	r0, #0
 8014c7a:	d100      	bne.n	8014c7e <_strtod_l+0x756>
 8014c7c:	e68a      	b.n	8014994 <_strtod_l+0x46c>
 8014c7e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014c80:	9804      	ldr	r0, [sp, #16]
 8014c82:	f003 f8db 	bl	8017e3c <_Bfree>
 8014c86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014c88:	9322      	str	r3, [sp, #136]	; 0x88
 8014c8a:	9b08      	ldr	r3, [sp, #32]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	dd00      	ble.n	8014c92 <_strtod_l+0x76a>
 8014c90:	e07f      	b.n	8014d92 <_strtod_l+0x86a>
 8014c92:	9b07      	ldr	r3, [sp, #28]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	dd08      	ble.n	8014caa <_strtod_l+0x782>
 8014c98:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014c9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014c9c:	9804      	ldr	r0, [sp, #16]
 8014c9e:	f003 fa35 	bl	801810c <__pow5mult>
 8014ca2:	900a      	str	r0, [sp, #40]	; 0x28
 8014ca4:	2800      	cmp	r0, #0
 8014ca6:	d100      	bne.n	8014caa <_strtod_l+0x782>
 8014ca8:	e674      	b.n	8014994 <_strtod_l+0x46c>
 8014caa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	dd08      	ble.n	8014cc2 <_strtod_l+0x79a>
 8014cb0:	001a      	movs	r2, r3
 8014cb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014cb4:	9804      	ldr	r0, [sp, #16]
 8014cb6:	f003 fa6b 	bl	8018190 <__lshift>
 8014cba:	900a      	str	r0, [sp, #40]	; 0x28
 8014cbc:	2800      	cmp	r0, #0
 8014cbe:	d100      	bne.n	8014cc2 <_strtod_l+0x79a>
 8014cc0:	e668      	b.n	8014994 <_strtod_l+0x46c>
 8014cc2:	2d00      	cmp	r5, #0
 8014cc4:	dd08      	ble.n	8014cd8 <_strtod_l+0x7b0>
 8014cc6:	002a      	movs	r2, r5
 8014cc8:	9905      	ldr	r1, [sp, #20]
 8014cca:	9804      	ldr	r0, [sp, #16]
 8014ccc:	f003 fa60 	bl	8018190 <__lshift>
 8014cd0:	9005      	str	r0, [sp, #20]
 8014cd2:	2800      	cmp	r0, #0
 8014cd4:	d100      	bne.n	8014cd8 <_strtod_l+0x7b0>
 8014cd6:	e65d      	b.n	8014994 <_strtod_l+0x46c>
 8014cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014cda:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014cdc:	9804      	ldr	r0, [sp, #16]
 8014cde:	f003 fac3 	bl	8018268 <__mdiff>
 8014ce2:	1e04      	subs	r4, r0, #0
 8014ce4:	d100      	bne.n	8014ce8 <_strtod_l+0x7c0>
 8014ce6:	e655      	b.n	8014994 <_strtod_l+0x46c>
 8014ce8:	2500      	movs	r5, #0
 8014cea:	68c3      	ldr	r3, [r0, #12]
 8014cec:	9905      	ldr	r1, [sp, #20]
 8014cee:	60c5      	str	r5, [r0, #12]
 8014cf0:	9312      	str	r3, [sp, #72]	; 0x48
 8014cf2:	f003 fa9f 	bl	8018234 <__mcmp>
 8014cf6:	42a8      	cmp	r0, r5
 8014cf8:	da55      	bge.n	8014da6 <_strtod_l+0x87e>
 8014cfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014cfc:	42ab      	cmp	r3, r5
 8014cfe:	d11b      	bne.n	8014d38 <_strtod_l+0x810>
 8014d00:	42ae      	cmp	r6, r5
 8014d02:	d119      	bne.n	8014d38 <_strtod_l+0x810>
 8014d04:	033b      	lsls	r3, r7, #12
 8014d06:	42ab      	cmp	r3, r5
 8014d08:	d116      	bne.n	8014d38 <_strtod_l+0x810>
 8014d0a:	22d6      	movs	r2, #214	; 0xd6
 8014d0c:	4b71      	ldr	r3, [pc, #452]	; (8014ed4 <_strtod_l+0x9ac>)
 8014d0e:	04d2      	lsls	r2, r2, #19
 8014d10:	403b      	ands	r3, r7
 8014d12:	4293      	cmp	r3, r2
 8014d14:	d910      	bls.n	8014d38 <_strtod_l+0x810>
 8014d16:	6963      	ldr	r3, [r4, #20]
 8014d18:	42ab      	cmp	r3, r5
 8014d1a:	d102      	bne.n	8014d22 <_strtod_l+0x7fa>
 8014d1c:	6923      	ldr	r3, [r4, #16]
 8014d1e:	2b01      	cmp	r3, #1
 8014d20:	dd0a      	ble.n	8014d38 <_strtod_l+0x810>
 8014d22:	0021      	movs	r1, r4
 8014d24:	2201      	movs	r2, #1
 8014d26:	9804      	ldr	r0, [sp, #16]
 8014d28:	f003 fa32 	bl	8018190 <__lshift>
 8014d2c:	9905      	ldr	r1, [sp, #20]
 8014d2e:	0004      	movs	r4, r0
 8014d30:	f003 fa80 	bl	8018234 <__mcmp>
 8014d34:	2800      	cmp	r0, #0
 8014d36:	dc6b      	bgt.n	8014e10 <_strtod_l+0x8e8>
 8014d38:	9b06      	ldr	r3, [sp, #24]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d178      	bne.n	8014e30 <_strtod_l+0x908>
 8014d3e:	e632      	b.n	80149a6 <_strtod_l+0x47e>
 8014d40:	2201      	movs	r2, #1
 8014d42:	4214      	tst	r4, r2
 8014d44:	d007      	beq.n	8014d56 <_strtod_l+0x82e>
 8014d46:	4a64      	ldr	r2, [pc, #400]	; (8014ed8 <_strtod_l+0x9b0>)
 8014d48:	00eb      	lsls	r3, r5, #3
 8014d4a:	18d3      	adds	r3, r2, r3
 8014d4c:	681a      	ldr	r2, [r3, #0]
 8014d4e:	685b      	ldr	r3, [r3, #4]
 8014d50:	f7ed f9a6 	bl	80020a0 <__aeabi_dmul>
 8014d54:	2301      	movs	r3, #1
 8014d56:	3501      	adds	r5, #1
 8014d58:	1064      	asrs	r4, r4, #1
 8014d5a:	e6df      	b.n	8014b1c <_strtod_l+0x5f4>
 8014d5c:	2101      	movs	r1, #1
 8014d5e:	3b20      	subs	r3, #32
 8014d60:	4249      	negs	r1, r1
 8014d62:	4099      	lsls	r1, r3
 8014d64:	400a      	ands	r2, r1
 8014d66:	0017      	movs	r7, r2
 8014d68:	e6f2      	b.n	8014b50 <_strtod_l+0x628>
 8014d6a:	2201      	movs	r2, #1
 8014d6c:	4252      	negs	r2, r2
 8014d6e:	409a      	lsls	r2, r3
 8014d70:	4016      	ands	r6, r2
 8014d72:	e6ed      	b.n	8014b50 <_strtod_l+0x628>
 8014d74:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014d76:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014d78:	1ad2      	subs	r2, r2, r3
 8014d7a:	4694      	mov	ip, r2
 8014d7c:	e73c      	b.n	8014bf8 <_strtod_l+0x6d0>
 8014d7e:	4957      	ldr	r1, [pc, #348]	; (8014edc <_strtod_l+0x9b4>)
 8014d80:	1acb      	subs	r3, r1, r3
 8014d82:	0001      	movs	r1, r0
 8014d84:	4099      	lsls	r1, r3
 8014d86:	9110      	str	r1, [sp, #64]	; 0x40
 8014d88:	9014      	str	r0, [sp, #80]	; 0x50
 8014d8a:	e74a      	b.n	8014c22 <_strtod_l+0x6fa>
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	9310      	str	r3, [sp, #64]	; 0x40
 8014d90:	e7fa      	b.n	8014d88 <_strtod_l+0x860>
 8014d92:	9a08      	ldr	r2, [sp, #32]
 8014d94:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014d96:	9804      	ldr	r0, [sp, #16]
 8014d98:	f003 f9fa 	bl	8018190 <__lshift>
 8014d9c:	9022      	str	r0, [sp, #136]	; 0x88
 8014d9e:	2800      	cmp	r0, #0
 8014da0:	d000      	beq.n	8014da4 <_strtod_l+0x87c>
 8014da2:	e776      	b.n	8014c92 <_strtod_l+0x76a>
 8014da4:	e5f6      	b.n	8014994 <_strtod_l+0x46c>
 8014da6:	970c      	str	r7, [sp, #48]	; 0x30
 8014da8:	2800      	cmp	r0, #0
 8014daa:	d000      	beq.n	8014dae <_strtod_l+0x886>
 8014dac:	e0a0      	b.n	8014ef0 <_strtod_l+0x9c8>
 8014dae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014db0:	033b      	lsls	r3, r7, #12
 8014db2:	0b1b      	lsrs	r3, r3, #12
 8014db4:	2a00      	cmp	r2, #0
 8014db6:	d027      	beq.n	8014e08 <_strtod_l+0x8e0>
 8014db8:	4a49      	ldr	r2, [pc, #292]	; (8014ee0 <_strtod_l+0x9b8>)
 8014dba:	4293      	cmp	r3, r2
 8014dbc:	d157      	bne.n	8014e6e <_strtod_l+0x946>
 8014dbe:	2201      	movs	r2, #1
 8014dc0:	9b06      	ldr	r3, [sp, #24]
 8014dc2:	4252      	negs	r2, r2
 8014dc4:	0031      	movs	r1, r6
 8014dc6:	0010      	movs	r0, r2
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d00b      	beq.n	8014de4 <_strtod_l+0x8bc>
 8014dcc:	25d4      	movs	r5, #212	; 0xd4
 8014dce:	4b41      	ldr	r3, [pc, #260]	; (8014ed4 <_strtod_l+0x9ac>)
 8014dd0:	04ed      	lsls	r5, r5, #19
 8014dd2:	403b      	ands	r3, r7
 8014dd4:	0010      	movs	r0, r2
 8014dd6:	42ab      	cmp	r3, r5
 8014dd8:	d804      	bhi.n	8014de4 <_strtod_l+0x8bc>
 8014dda:	306c      	adds	r0, #108	; 0x6c
 8014ddc:	0d1b      	lsrs	r3, r3, #20
 8014dde:	1ac3      	subs	r3, r0, r3
 8014de0:	409a      	lsls	r2, r3
 8014de2:	0010      	movs	r0, r2
 8014de4:	4281      	cmp	r1, r0
 8014de6:	d142      	bne.n	8014e6e <_strtod_l+0x946>
 8014de8:	4b3e      	ldr	r3, [pc, #248]	; (8014ee4 <_strtod_l+0x9bc>)
 8014dea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d102      	bne.n	8014df6 <_strtod_l+0x8ce>
 8014df0:	1c4b      	adds	r3, r1, #1
 8014df2:	d100      	bne.n	8014df6 <_strtod_l+0x8ce>
 8014df4:	e5ce      	b.n	8014994 <_strtod_l+0x46c>
 8014df6:	4b37      	ldr	r3, [pc, #220]	; (8014ed4 <_strtod_l+0x9ac>)
 8014df8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014dfa:	2600      	movs	r6, #0
 8014dfc:	401a      	ands	r2, r3
 8014dfe:	0013      	movs	r3, r2
 8014e00:	2280      	movs	r2, #128	; 0x80
 8014e02:	0352      	lsls	r2, r2, #13
 8014e04:	189f      	adds	r7, r3, r2
 8014e06:	e797      	b.n	8014d38 <_strtod_l+0x810>
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d130      	bne.n	8014e6e <_strtod_l+0x946>
 8014e0c:	2e00      	cmp	r6, #0
 8014e0e:	d12e      	bne.n	8014e6e <_strtod_l+0x946>
 8014e10:	9906      	ldr	r1, [sp, #24]
 8014e12:	003b      	movs	r3, r7
 8014e14:	4a2f      	ldr	r2, [pc, #188]	; (8014ed4 <_strtod_l+0x9ac>)
 8014e16:	2900      	cmp	r1, #0
 8014e18:	d020      	beq.n	8014e5c <_strtod_l+0x934>
 8014e1a:	0011      	movs	r1, r2
 8014e1c:	20d6      	movs	r0, #214	; 0xd6
 8014e1e:	4039      	ands	r1, r7
 8014e20:	04c0      	lsls	r0, r0, #19
 8014e22:	4281      	cmp	r1, r0
 8014e24:	dc1a      	bgt.n	8014e5c <_strtod_l+0x934>
 8014e26:	23dc      	movs	r3, #220	; 0xdc
 8014e28:	049b      	lsls	r3, r3, #18
 8014e2a:	4299      	cmp	r1, r3
 8014e2c:	dc00      	bgt.n	8014e30 <_strtod_l+0x908>
 8014e2e:	e646      	b.n	8014abe <_strtod_l+0x596>
 8014e30:	4b2d      	ldr	r3, [pc, #180]	; (8014ee8 <_strtod_l+0x9c0>)
 8014e32:	0030      	movs	r0, r6
 8014e34:	931b      	str	r3, [sp, #108]	; 0x6c
 8014e36:	2300      	movs	r3, #0
 8014e38:	931a      	str	r3, [sp, #104]	; 0x68
 8014e3a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014e3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014e3e:	0039      	movs	r1, r7
 8014e40:	f7ed f92e 	bl	80020a0 <__aeabi_dmul>
 8014e44:	0006      	movs	r6, r0
 8014e46:	000f      	movs	r7, r1
 8014e48:	1e0b      	subs	r3, r1, #0
 8014e4a:	d000      	beq.n	8014e4e <_strtod_l+0x926>
 8014e4c:	e5ab      	b.n	80149a6 <_strtod_l+0x47e>
 8014e4e:	2800      	cmp	r0, #0
 8014e50:	d000      	beq.n	8014e54 <_strtod_l+0x92c>
 8014e52:	e5a8      	b.n	80149a6 <_strtod_l+0x47e>
 8014e54:	9a04      	ldr	r2, [sp, #16]
 8014e56:	3322      	adds	r3, #34	; 0x22
 8014e58:	6013      	str	r3, [r2, #0]
 8014e5a:	e5a4      	b.n	80149a6 <_strtod_l+0x47e>
 8014e5c:	2601      	movs	r6, #1
 8014e5e:	4013      	ands	r3, r2
 8014e60:	4a22      	ldr	r2, [pc, #136]	; (8014eec <_strtod_l+0x9c4>)
 8014e62:	4276      	negs	r6, r6
 8014e64:	189b      	adds	r3, r3, r2
 8014e66:	4a1e      	ldr	r2, [pc, #120]	; (8014ee0 <_strtod_l+0x9b8>)
 8014e68:	431a      	orrs	r2, r3
 8014e6a:	0017      	movs	r7, r2
 8014e6c:	e764      	b.n	8014d38 <_strtod_l+0x810>
 8014e6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d015      	beq.n	8014ea0 <_strtod_l+0x978>
 8014e74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014e78:	4213      	tst	r3, r2
 8014e7a:	d100      	bne.n	8014e7e <_strtod_l+0x956>
 8014e7c:	e75c      	b.n	8014d38 <_strtod_l+0x810>
 8014e7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e80:	9a06      	ldr	r2, [sp, #24]
 8014e82:	0030      	movs	r0, r6
 8014e84:	0039      	movs	r1, r7
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d00f      	beq.n	8014eaa <_strtod_l+0x982>
 8014e8a:	f7ff fb35 	bl	80144f8 <sulp>
 8014e8e:	0002      	movs	r2, r0
 8014e90:	000b      	movs	r3, r1
 8014e92:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014e94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014e96:	f7ec f9dd 	bl	8001254 <__aeabi_dadd>
 8014e9a:	0006      	movs	r6, r0
 8014e9c:	000f      	movs	r7, r1
 8014e9e:	e74b      	b.n	8014d38 <_strtod_l+0x810>
 8014ea0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ea2:	4233      	tst	r3, r6
 8014ea4:	d100      	bne.n	8014ea8 <_strtod_l+0x980>
 8014ea6:	e747      	b.n	8014d38 <_strtod_l+0x810>
 8014ea8:	e7e9      	b.n	8014e7e <_strtod_l+0x956>
 8014eaa:	f7ff fb25 	bl	80144f8 <sulp>
 8014eae:	0002      	movs	r2, r0
 8014eb0:	000b      	movs	r3, r1
 8014eb2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014eb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014eb6:	f7ed fb65 	bl	8002584 <__aeabi_dsub>
 8014eba:	2200      	movs	r2, #0
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	0006      	movs	r6, r0
 8014ec0:	000f      	movs	r7, r1
 8014ec2:	f7eb facb 	bl	800045c <__aeabi_dcmpeq>
 8014ec6:	2800      	cmp	r0, #0
 8014ec8:	d000      	beq.n	8014ecc <_strtod_l+0x9a4>
 8014eca:	e5f8      	b.n	8014abe <_strtod_l+0x596>
 8014ecc:	e734      	b.n	8014d38 <_strtod_l+0x810>
 8014ece:	46c0      	nop			; (mov r8, r8)
 8014ed0:	fffffc02 	.word	0xfffffc02
 8014ed4:	7ff00000 	.word	0x7ff00000
 8014ed8:	0801bf98 	.word	0x0801bf98
 8014edc:	fffffbe2 	.word	0xfffffbe2
 8014ee0:	000fffff 	.word	0x000fffff
 8014ee4:	7fefffff 	.word	0x7fefffff
 8014ee8:	39500000 	.word	0x39500000
 8014eec:	fff00000 	.word	0xfff00000
 8014ef0:	9905      	ldr	r1, [sp, #20]
 8014ef2:	0020      	movs	r0, r4
 8014ef4:	f003 fae2 	bl	80184bc <__ratio>
 8014ef8:	2380      	movs	r3, #128	; 0x80
 8014efa:	2200      	movs	r2, #0
 8014efc:	05db      	lsls	r3, r3, #23
 8014efe:	9008      	str	r0, [sp, #32]
 8014f00:	9109      	str	r1, [sp, #36]	; 0x24
 8014f02:	f7eb fabb 	bl	800047c <__aeabi_dcmple>
 8014f06:	2800      	cmp	r0, #0
 8014f08:	d100      	bne.n	8014f0c <_strtod_l+0x9e4>
 8014f0a:	e07f      	b.n	801500c <_strtod_l+0xae4>
 8014f0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d04b      	beq.n	8014faa <_strtod_l+0xa82>
 8014f12:	2200      	movs	r2, #0
 8014f14:	4b8a      	ldr	r3, [pc, #552]	; (8015140 <_strtod_l+0xc18>)
 8014f16:	9210      	str	r2, [sp, #64]	; 0x40
 8014f18:	9311      	str	r3, [sp, #68]	; 0x44
 8014f1a:	4b89      	ldr	r3, [pc, #548]	; (8015140 <_strtod_l+0xc18>)
 8014f1c:	9308      	str	r3, [sp, #32]
 8014f1e:	4a89      	ldr	r2, [pc, #548]	; (8015144 <_strtod_l+0xc1c>)
 8014f20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f22:	4013      	ands	r3, r2
 8014f24:	9314      	str	r3, [sp, #80]	; 0x50
 8014f26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f28:	4b87      	ldr	r3, [pc, #540]	; (8015148 <_strtod_l+0xc20>)
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d000      	beq.n	8014f30 <_strtod_l+0xa08>
 8014f2e:	e0ba      	b.n	80150a6 <_strtod_l+0xb7e>
 8014f30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f34:	921a      	str	r2, [sp, #104]	; 0x68
 8014f36:	931b      	str	r3, [sp, #108]	; 0x6c
 8014f38:	4a84      	ldr	r2, [pc, #528]	; (801514c <_strtod_l+0xc24>)
 8014f3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f3c:	4694      	mov	ip, r2
 8014f3e:	4463      	add	r3, ip
 8014f40:	001f      	movs	r7, r3
 8014f42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014f44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f46:	0030      	movs	r0, r6
 8014f48:	0039      	movs	r1, r7
 8014f4a:	920c      	str	r2, [sp, #48]	; 0x30
 8014f4c:	930d      	str	r3, [sp, #52]	; 0x34
 8014f4e:	f003 f9ef 	bl	8018330 <__ulp>
 8014f52:	0002      	movs	r2, r0
 8014f54:	000b      	movs	r3, r1
 8014f56:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014f58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014f5a:	f7ed f8a1 	bl	80020a0 <__aeabi_dmul>
 8014f5e:	0032      	movs	r2, r6
 8014f60:	003b      	movs	r3, r7
 8014f62:	f7ec f977 	bl	8001254 <__aeabi_dadd>
 8014f66:	4a77      	ldr	r2, [pc, #476]	; (8015144 <_strtod_l+0xc1c>)
 8014f68:	4b79      	ldr	r3, [pc, #484]	; (8015150 <_strtod_l+0xc28>)
 8014f6a:	0006      	movs	r6, r0
 8014f6c:	400a      	ands	r2, r1
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d964      	bls.n	801503c <_strtod_l+0xb14>
 8014f72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f74:	4a77      	ldr	r2, [pc, #476]	; (8015154 <_strtod_l+0xc2c>)
 8014f76:	4293      	cmp	r3, r2
 8014f78:	d103      	bne.n	8014f82 <_strtod_l+0xa5a>
 8014f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f7c:	3301      	adds	r3, #1
 8014f7e:	d100      	bne.n	8014f82 <_strtod_l+0xa5a>
 8014f80:	e508      	b.n	8014994 <_strtod_l+0x46c>
 8014f82:	2601      	movs	r6, #1
 8014f84:	4f73      	ldr	r7, [pc, #460]	; (8015154 <_strtod_l+0xc2c>)
 8014f86:	4276      	negs	r6, r6
 8014f88:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014f8a:	9804      	ldr	r0, [sp, #16]
 8014f8c:	f002 ff56 	bl	8017e3c <_Bfree>
 8014f90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014f92:	9804      	ldr	r0, [sp, #16]
 8014f94:	f002 ff52 	bl	8017e3c <_Bfree>
 8014f98:	9905      	ldr	r1, [sp, #20]
 8014f9a:	9804      	ldr	r0, [sp, #16]
 8014f9c:	f002 ff4e 	bl	8017e3c <_Bfree>
 8014fa0:	0021      	movs	r1, r4
 8014fa2:	9804      	ldr	r0, [sp, #16]
 8014fa4:	f002 ff4a 	bl	8017e3c <_Bfree>
 8014fa8:	e5f4      	b.n	8014b94 <_strtod_l+0x66c>
 8014faa:	2e00      	cmp	r6, #0
 8014fac:	d11e      	bne.n	8014fec <_strtod_l+0xac4>
 8014fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fb0:	031b      	lsls	r3, r3, #12
 8014fb2:	d121      	bne.n	8014ff8 <_strtod_l+0xad0>
 8014fb4:	9808      	ldr	r0, [sp, #32]
 8014fb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fb8:	2200      	movs	r2, #0
 8014fba:	4b61      	ldr	r3, [pc, #388]	; (8015140 <_strtod_l+0xc18>)
 8014fbc:	f7eb fa54 	bl	8000468 <__aeabi_dcmplt>
 8014fc0:	2800      	cmp	r0, #0
 8014fc2:	d11f      	bne.n	8015004 <_strtod_l+0xadc>
 8014fc4:	9808      	ldr	r0, [sp, #32]
 8014fc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fc8:	2200      	movs	r2, #0
 8014fca:	4b63      	ldr	r3, [pc, #396]	; (8015158 <_strtod_l+0xc30>)
 8014fcc:	f7ed f868 	bl	80020a0 <__aeabi_dmul>
 8014fd0:	0005      	movs	r5, r0
 8014fd2:	9108      	str	r1, [sp, #32]
 8014fd4:	2280      	movs	r2, #128	; 0x80
 8014fd6:	0612      	lsls	r2, r2, #24
 8014fd8:	4694      	mov	ip, r2
 8014fda:	9b08      	ldr	r3, [sp, #32]
 8014fdc:	951e      	str	r5, [sp, #120]	; 0x78
 8014fde:	4463      	add	r3, ip
 8014fe0:	931f      	str	r3, [sp, #124]	; 0x7c
 8014fe2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014fe4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014fe6:	9210      	str	r2, [sp, #64]	; 0x40
 8014fe8:	9311      	str	r3, [sp, #68]	; 0x44
 8014fea:	e798      	b.n	8014f1e <_strtod_l+0x9f6>
 8014fec:	2e01      	cmp	r6, #1
 8014fee:	d103      	bne.n	8014ff8 <_strtod_l+0xad0>
 8014ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d100      	bne.n	8014ff8 <_strtod_l+0xad0>
 8014ff6:	e562      	b.n	8014abe <_strtod_l+0x596>
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	4b58      	ldr	r3, [pc, #352]	; (801515c <_strtod_l+0xc34>)
 8014ffc:	2500      	movs	r5, #0
 8014ffe:	9210      	str	r2, [sp, #64]	; 0x40
 8015000:	9311      	str	r3, [sp, #68]	; 0x44
 8015002:	e78a      	b.n	8014f1a <_strtod_l+0x9f2>
 8015004:	4b54      	ldr	r3, [pc, #336]	; (8015158 <_strtod_l+0xc30>)
 8015006:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015008:	9308      	str	r3, [sp, #32]
 801500a:	e7e3      	b.n	8014fd4 <_strtod_l+0xaac>
 801500c:	4b52      	ldr	r3, [pc, #328]	; (8015158 <_strtod_l+0xc30>)
 801500e:	9808      	ldr	r0, [sp, #32]
 8015010:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015012:	2200      	movs	r2, #0
 8015014:	f7ed f844 	bl	80020a0 <__aeabi_dmul>
 8015018:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801501a:	0005      	movs	r5, r0
 801501c:	9108      	str	r1, [sp, #32]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d107      	bne.n	8015032 <_strtod_l+0xb0a>
 8015022:	2380      	movs	r3, #128	; 0x80
 8015024:	061b      	lsls	r3, r3, #24
 8015026:	18cb      	adds	r3, r1, r3
 8015028:	9016      	str	r0, [sp, #88]	; 0x58
 801502a:	9317      	str	r3, [sp, #92]	; 0x5c
 801502c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801502e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015030:	e7d9      	b.n	8014fe6 <_strtod_l+0xabe>
 8015032:	0002      	movs	r2, r0
 8015034:	9b08      	ldr	r3, [sp, #32]
 8015036:	9216      	str	r2, [sp, #88]	; 0x58
 8015038:	9317      	str	r3, [sp, #92]	; 0x5c
 801503a:	e7f7      	b.n	801502c <_strtod_l+0xb04>
 801503c:	23d4      	movs	r3, #212	; 0xd4
 801503e:	049b      	lsls	r3, r3, #18
 8015040:	18cf      	adds	r7, r1, r3
 8015042:	9b06      	ldr	r3, [sp, #24]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d19f      	bne.n	8014f88 <_strtod_l+0xa60>
 8015048:	4b3e      	ldr	r3, [pc, #248]	; (8015144 <_strtod_l+0xc1c>)
 801504a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801504c:	970c      	str	r7, [sp, #48]	; 0x30
 801504e:	403b      	ands	r3, r7
 8015050:	429a      	cmp	r2, r3
 8015052:	d199      	bne.n	8014f88 <_strtod_l+0xa60>
 8015054:	9908      	ldr	r1, [sp, #32]
 8015056:	0028      	movs	r0, r5
 8015058:	f7ed fdf8 	bl	8002c4c <__aeabi_d2iz>
 801505c:	f7ed fe2c 	bl	8002cb8 <__aeabi_i2d>
 8015060:	000b      	movs	r3, r1
 8015062:	0002      	movs	r2, r0
 8015064:	9908      	ldr	r1, [sp, #32]
 8015066:	0028      	movs	r0, r5
 8015068:	f7ed fa8c 	bl	8002584 <__aeabi_dsub>
 801506c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801506e:	9008      	str	r0, [sp, #32]
 8015070:	9109      	str	r1, [sp, #36]	; 0x24
 8015072:	2b00      	cmp	r3, #0
 8015074:	d104      	bne.n	8015080 <_strtod_l+0xb58>
 8015076:	2e00      	cmp	r6, #0
 8015078:	d102      	bne.n	8015080 <_strtod_l+0xb58>
 801507a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801507c:	031b      	lsls	r3, r3, #12
 801507e:	d058      	beq.n	8015132 <_strtod_l+0xc0a>
 8015080:	9808      	ldr	r0, [sp, #32]
 8015082:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015084:	4a36      	ldr	r2, [pc, #216]	; (8015160 <_strtod_l+0xc38>)
 8015086:	4b37      	ldr	r3, [pc, #220]	; (8015164 <_strtod_l+0xc3c>)
 8015088:	f7eb f9ee 	bl	8000468 <__aeabi_dcmplt>
 801508c:	2800      	cmp	r0, #0
 801508e:	d000      	beq.n	8015092 <_strtod_l+0xb6a>
 8015090:	e489      	b.n	80149a6 <_strtod_l+0x47e>
 8015092:	9808      	ldr	r0, [sp, #32]
 8015094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015096:	4a34      	ldr	r2, [pc, #208]	; (8015168 <_strtod_l+0xc40>)
 8015098:	4b2f      	ldr	r3, [pc, #188]	; (8015158 <_strtod_l+0xc30>)
 801509a:	f7eb f9f9 	bl	8000490 <__aeabi_dcmpgt>
 801509e:	2800      	cmp	r0, #0
 80150a0:	d100      	bne.n	80150a4 <_strtod_l+0xb7c>
 80150a2:	e771      	b.n	8014f88 <_strtod_l+0xa60>
 80150a4:	e47f      	b.n	80149a6 <_strtod_l+0x47e>
 80150a6:	9b06      	ldr	r3, [sp, #24]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d02a      	beq.n	8015102 <_strtod_l+0xbda>
 80150ac:	23d4      	movs	r3, #212	; 0xd4
 80150ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80150b0:	04db      	lsls	r3, r3, #19
 80150b2:	429a      	cmp	r2, r3
 80150b4:	d825      	bhi.n	8015102 <_strtod_l+0xbda>
 80150b6:	4a2d      	ldr	r2, [pc, #180]	; (801516c <_strtod_l+0xc44>)
 80150b8:	4b2d      	ldr	r3, [pc, #180]	; (8015170 <_strtod_l+0xc48>)
 80150ba:	0028      	movs	r0, r5
 80150bc:	9908      	ldr	r1, [sp, #32]
 80150be:	f7eb f9dd 	bl	800047c <__aeabi_dcmple>
 80150c2:	2800      	cmp	r0, #0
 80150c4:	d016      	beq.n	80150f4 <_strtod_l+0xbcc>
 80150c6:	0028      	movs	r0, r5
 80150c8:	9908      	ldr	r1, [sp, #32]
 80150ca:	f7eb fa91 	bl	80005f0 <__aeabi_d2uiz>
 80150ce:	2800      	cmp	r0, #0
 80150d0:	d100      	bne.n	80150d4 <_strtod_l+0xbac>
 80150d2:	3001      	adds	r0, #1
 80150d4:	f7ed fe2a 	bl	8002d2c <__aeabi_ui2d>
 80150d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80150da:	0005      	movs	r5, r0
 80150dc:	9108      	str	r1, [sp, #32]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d122      	bne.n	8015128 <_strtod_l+0xc00>
 80150e2:	2380      	movs	r3, #128	; 0x80
 80150e4:	061b      	lsls	r3, r3, #24
 80150e6:	18cb      	adds	r3, r1, r3
 80150e8:	9018      	str	r0, [sp, #96]	; 0x60
 80150ea:	9319      	str	r3, [sp, #100]	; 0x64
 80150ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80150ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80150f0:	9210      	str	r2, [sp, #64]	; 0x40
 80150f2:	9311      	str	r3, [sp, #68]	; 0x44
 80150f4:	22d6      	movs	r2, #214	; 0xd6
 80150f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80150f8:	04d2      	lsls	r2, r2, #19
 80150fa:	189b      	adds	r3, r3, r2
 80150fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80150fe:	1a9b      	subs	r3, r3, r2
 8015100:	9311      	str	r3, [sp, #68]	; 0x44
 8015102:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015104:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015106:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8015108:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801510a:	f003 f911 	bl	8018330 <__ulp>
 801510e:	0002      	movs	r2, r0
 8015110:	000b      	movs	r3, r1
 8015112:	0030      	movs	r0, r6
 8015114:	0039      	movs	r1, r7
 8015116:	f7ec ffc3 	bl	80020a0 <__aeabi_dmul>
 801511a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801511c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801511e:	f7ec f899 	bl	8001254 <__aeabi_dadd>
 8015122:	0006      	movs	r6, r0
 8015124:	000f      	movs	r7, r1
 8015126:	e78c      	b.n	8015042 <_strtod_l+0xb1a>
 8015128:	0002      	movs	r2, r0
 801512a:	9b08      	ldr	r3, [sp, #32]
 801512c:	9218      	str	r2, [sp, #96]	; 0x60
 801512e:	9319      	str	r3, [sp, #100]	; 0x64
 8015130:	e7dc      	b.n	80150ec <_strtod_l+0xbc4>
 8015132:	4a0b      	ldr	r2, [pc, #44]	; (8015160 <_strtod_l+0xc38>)
 8015134:	4b0f      	ldr	r3, [pc, #60]	; (8015174 <_strtod_l+0xc4c>)
 8015136:	9808      	ldr	r0, [sp, #32]
 8015138:	9909      	ldr	r1, [sp, #36]	; 0x24
 801513a:	f7eb f995 	bl	8000468 <__aeabi_dcmplt>
 801513e:	e7ae      	b.n	801509e <_strtod_l+0xb76>
 8015140:	3ff00000 	.word	0x3ff00000
 8015144:	7ff00000 	.word	0x7ff00000
 8015148:	7fe00000 	.word	0x7fe00000
 801514c:	fcb00000 	.word	0xfcb00000
 8015150:	7c9fffff 	.word	0x7c9fffff
 8015154:	7fefffff 	.word	0x7fefffff
 8015158:	3fe00000 	.word	0x3fe00000
 801515c:	bff00000 	.word	0xbff00000
 8015160:	94a03595 	.word	0x94a03595
 8015164:	3fdfffff 	.word	0x3fdfffff
 8015168:	35afe535 	.word	0x35afe535
 801516c:	ffc00000 	.word	0xffc00000
 8015170:	41dfffff 	.word	0x41dfffff
 8015174:	3fcfffff 	.word	0x3fcfffff

08015178 <strtod>:
 8015178:	4b06      	ldr	r3, [pc, #24]	; (8015194 <strtod+0x1c>)
 801517a:	b510      	push	{r4, lr}
 801517c:	0004      	movs	r4, r0
 801517e:	6818      	ldr	r0, [r3, #0]
 8015180:	000a      	movs	r2, r1
 8015182:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015184:	2b00      	cmp	r3, #0
 8015186:	d100      	bne.n	801518a <strtod+0x12>
 8015188:	4b03      	ldr	r3, [pc, #12]	; (8015198 <strtod+0x20>)
 801518a:	0021      	movs	r1, r4
 801518c:	f7ff f9cc 	bl	8014528 <_strtod_l>
 8015190:	bd10      	pop	{r4, pc}
 8015192:	46c0      	nop			; (mov r8, r8)
 8015194:	200000c8 	.word	0x200000c8
 8015198:	200004f8 	.word	0x200004f8

0801519c <strtok>:
 801519c:	4b03      	ldr	r3, [pc, #12]	; (80151ac <strtok+0x10>)
 801519e:	b510      	push	{r4, lr}
 80151a0:	681a      	ldr	r2, [r3, #0]
 80151a2:	2301      	movs	r3, #1
 80151a4:	325c      	adds	r2, #92	; 0x5c
 80151a6:	f000 f803 	bl	80151b0 <__strtok_r>
 80151aa:	bd10      	pop	{r4, pc}
 80151ac:	200000c8 	.word	0x200000c8

080151b0 <__strtok_r>:
 80151b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151b2:	2800      	cmp	r0, #0
 80151b4:	d104      	bne.n	80151c0 <__strtok_r+0x10>
 80151b6:	6810      	ldr	r0, [r2, #0]
 80151b8:	2800      	cmp	r0, #0
 80151ba:	d101      	bne.n	80151c0 <__strtok_r+0x10>
 80151bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151be:	0020      	movs	r0, r4
 80151c0:	000e      	movs	r6, r1
 80151c2:	7805      	ldrb	r5, [r0, #0]
 80151c4:	1c44      	adds	r4, r0, #1
 80151c6:	7837      	ldrb	r7, [r6, #0]
 80151c8:	2f00      	cmp	r7, #0
 80151ca:	d104      	bne.n	80151d6 <__strtok_r+0x26>
 80151cc:	2d00      	cmp	r5, #0
 80151ce:	d110      	bne.n	80151f2 <__strtok_r+0x42>
 80151d0:	6015      	str	r5, [r2, #0]
 80151d2:	0028      	movs	r0, r5
 80151d4:	e7f2      	b.n	80151bc <__strtok_r+0xc>
 80151d6:	3601      	adds	r6, #1
 80151d8:	42bd      	cmp	r5, r7
 80151da:	d1f4      	bne.n	80151c6 <__strtok_r+0x16>
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d1ee      	bne.n	80151be <__strtok_r+0xe>
 80151e0:	6014      	str	r4, [r2, #0]
 80151e2:	7003      	strb	r3, [r0, #0]
 80151e4:	e7ea      	b.n	80151bc <__strtok_r+0xc>
 80151e6:	0033      	movs	r3, r6
 80151e8:	e00d      	b.n	8015206 <__strtok_r+0x56>
 80151ea:	3501      	adds	r5, #1
 80151ec:	2f00      	cmp	r7, #0
 80151ee:	d103      	bne.n	80151f8 <__strtok_r+0x48>
 80151f0:	001c      	movs	r4, r3
 80151f2:	000d      	movs	r5, r1
 80151f4:	7826      	ldrb	r6, [r4, #0]
 80151f6:	1c63      	adds	r3, r4, #1
 80151f8:	782f      	ldrb	r7, [r5, #0]
 80151fa:	42be      	cmp	r6, r7
 80151fc:	d1f5      	bne.n	80151ea <__strtok_r+0x3a>
 80151fe:	2e00      	cmp	r6, #0
 8015200:	d0f1      	beq.n	80151e6 <__strtok_r+0x36>
 8015202:	2100      	movs	r1, #0
 8015204:	7021      	strb	r1, [r4, #0]
 8015206:	6013      	str	r3, [r2, #0]
 8015208:	e7d8      	b.n	80151bc <__strtok_r+0xc>
	...

0801520c <_strtol_l.isra.0>:
 801520c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801520e:	001f      	movs	r7, r3
 8015210:	000e      	movs	r6, r1
 8015212:	b087      	sub	sp, #28
 8015214:	9005      	str	r0, [sp, #20]
 8015216:	9101      	str	r1, [sp, #4]
 8015218:	9202      	str	r2, [sp, #8]
 801521a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801521c:	7834      	ldrb	r4, [r6, #0]
 801521e:	f7fe fc9f 	bl	8013b60 <__locale_ctype_ptr_l>
 8015222:	2208      	movs	r2, #8
 8015224:	1900      	adds	r0, r0, r4
 8015226:	7843      	ldrb	r3, [r0, #1]
 8015228:	1c75      	adds	r5, r6, #1
 801522a:	4013      	ands	r3, r2
 801522c:	d136      	bne.n	801529c <_strtol_l.isra.0+0x90>
 801522e:	2c2d      	cmp	r4, #45	; 0x2d
 8015230:	d136      	bne.n	80152a0 <_strtol_l.isra.0+0x94>
 8015232:	1cb5      	adds	r5, r6, #2
 8015234:	7874      	ldrb	r4, [r6, #1]
 8015236:	2601      	movs	r6, #1
 8015238:	2f00      	cmp	r7, #0
 801523a:	d062      	beq.n	8015302 <_strtol_l.isra.0+0xf6>
 801523c:	2f10      	cmp	r7, #16
 801523e:	d109      	bne.n	8015254 <_strtol_l.isra.0+0x48>
 8015240:	2c30      	cmp	r4, #48	; 0x30
 8015242:	d107      	bne.n	8015254 <_strtol_l.isra.0+0x48>
 8015244:	2220      	movs	r2, #32
 8015246:	782b      	ldrb	r3, [r5, #0]
 8015248:	4393      	bics	r3, r2
 801524a:	2b58      	cmp	r3, #88	; 0x58
 801524c:	d154      	bne.n	80152f8 <_strtol_l.isra.0+0xec>
 801524e:	2710      	movs	r7, #16
 8015250:	786c      	ldrb	r4, [r5, #1]
 8015252:	3502      	adds	r5, #2
 8015254:	4b2d      	ldr	r3, [pc, #180]	; (801530c <_strtol_l.isra.0+0x100>)
 8015256:	0039      	movs	r1, r7
 8015258:	18f3      	adds	r3, r6, r3
 801525a:	0018      	movs	r0, r3
 801525c:	9303      	str	r3, [sp, #12]
 801525e:	f7ea fffd 	bl	800025c <__aeabi_uidivmod>
 8015262:	9104      	str	r1, [sp, #16]
 8015264:	2101      	movs	r1, #1
 8015266:	2300      	movs	r3, #0
 8015268:	4249      	negs	r1, r1
 801526a:	0002      	movs	r2, r0
 801526c:	468c      	mov	ip, r1
 801526e:	0018      	movs	r0, r3
 8015270:	0021      	movs	r1, r4
 8015272:	3930      	subs	r1, #48	; 0x30
 8015274:	2909      	cmp	r1, #9
 8015276:	d81a      	bhi.n	80152ae <_strtol_l.isra.0+0xa2>
 8015278:	000c      	movs	r4, r1
 801527a:	42a7      	cmp	r7, r4
 801527c:	dd23      	ble.n	80152c6 <_strtol_l.isra.0+0xba>
 801527e:	1c59      	adds	r1, r3, #1
 8015280:	d009      	beq.n	8015296 <_strtol_l.isra.0+0x8a>
 8015282:	4663      	mov	r3, ip
 8015284:	4282      	cmp	r2, r0
 8015286:	d306      	bcc.n	8015296 <_strtol_l.isra.0+0x8a>
 8015288:	d102      	bne.n	8015290 <_strtol_l.isra.0+0x84>
 801528a:	9904      	ldr	r1, [sp, #16]
 801528c:	42a1      	cmp	r1, r4
 801528e:	db02      	blt.n	8015296 <_strtol_l.isra.0+0x8a>
 8015290:	2301      	movs	r3, #1
 8015292:	4378      	muls	r0, r7
 8015294:	1820      	adds	r0, r4, r0
 8015296:	782c      	ldrb	r4, [r5, #0]
 8015298:	3501      	adds	r5, #1
 801529a:	e7e9      	b.n	8015270 <_strtol_l.isra.0+0x64>
 801529c:	002e      	movs	r6, r5
 801529e:	e7bc      	b.n	801521a <_strtol_l.isra.0+0xe>
 80152a0:	2c2b      	cmp	r4, #43	; 0x2b
 80152a2:	d001      	beq.n	80152a8 <_strtol_l.isra.0+0x9c>
 80152a4:	001e      	movs	r6, r3
 80152a6:	e7c7      	b.n	8015238 <_strtol_l.isra.0+0x2c>
 80152a8:	1cb5      	adds	r5, r6, #2
 80152aa:	7874      	ldrb	r4, [r6, #1]
 80152ac:	e7fa      	b.n	80152a4 <_strtol_l.isra.0+0x98>
 80152ae:	0021      	movs	r1, r4
 80152b0:	3941      	subs	r1, #65	; 0x41
 80152b2:	2919      	cmp	r1, #25
 80152b4:	d801      	bhi.n	80152ba <_strtol_l.isra.0+0xae>
 80152b6:	3c37      	subs	r4, #55	; 0x37
 80152b8:	e7df      	b.n	801527a <_strtol_l.isra.0+0x6e>
 80152ba:	0021      	movs	r1, r4
 80152bc:	3961      	subs	r1, #97	; 0x61
 80152be:	2919      	cmp	r1, #25
 80152c0:	d801      	bhi.n	80152c6 <_strtol_l.isra.0+0xba>
 80152c2:	3c57      	subs	r4, #87	; 0x57
 80152c4:	e7d9      	b.n	801527a <_strtol_l.isra.0+0x6e>
 80152c6:	1c5a      	adds	r2, r3, #1
 80152c8:	d108      	bne.n	80152dc <_strtol_l.isra.0+0xd0>
 80152ca:	9a05      	ldr	r2, [sp, #20]
 80152cc:	3323      	adds	r3, #35	; 0x23
 80152ce:	6013      	str	r3, [r2, #0]
 80152d0:	9b02      	ldr	r3, [sp, #8]
 80152d2:	9803      	ldr	r0, [sp, #12]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d109      	bne.n	80152ec <_strtol_l.isra.0+0xe0>
 80152d8:	b007      	add	sp, #28
 80152da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152dc:	2e00      	cmp	r6, #0
 80152de:	d000      	beq.n	80152e2 <_strtol_l.isra.0+0xd6>
 80152e0:	4240      	negs	r0, r0
 80152e2:	9a02      	ldr	r2, [sp, #8]
 80152e4:	2a00      	cmp	r2, #0
 80152e6:	d0f7      	beq.n	80152d8 <_strtol_l.isra.0+0xcc>
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d001      	beq.n	80152f0 <_strtol_l.isra.0+0xe4>
 80152ec:	1e6b      	subs	r3, r5, #1
 80152ee:	9301      	str	r3, [sp, #4]
 80152f0:	9b02      	ldr	r3, [sp, #8]
 80152f2:	9a01      	ldr	r2, [sp, #4]
 80152f4:	601a      	str	r2, [r3, #0]
 80152f6:	e7ef      	b.n	80152d8 <_strtol_l.isra.0+0xcc>
 80152f8:	2430      	movs	r4, #48	; 0x30
 80152fa:	2f00      	cmp	r7, #0
 80152fc:	d1aa      	bne.n	8015254 <_strtol_l.isra.0+0x48>
 80152fe:	2708      	movs	r7, #8
 8015300:	e7a8      	b.n	8015254 <_strtol_l.isra.0+0x48>
 8015302:	2c30      	cmp	r4, #48	; 0x30
 8015304:	d09e      	beq.n	8015244 <_strtol_l.isra.0+0x38>
 8015306:	270a      	movs	r7, #10
 8015308:	e7a4      	b.n	8015254 <_strtol_l.isra.0+0x48>
 801530a:	46c0      	nop			; (mov r8, r8)
 801530c:	7fffffff 	.word	0x7fffffff

08015310 <strtol>:
 8015310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015312:	0013      	movs	r3, r2
 8015314:	4a06      	ldr	r2, [pc, #24]	; (8015330 <strtol+0x20>)
 8015316:	0005      	movs	r5, r0
 8015318:	6810      	ldr	r0, [r2, #0]
 801531a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801531c:	2c00      	cmp	r4, #0
 801531e:	d100      	bne.n	8015322 <strtol+0x12>
 8015320:	4c04      	ldr	r4, [pc, #16]	; (8015334 <strtol+0x24>)
 8015322:	000a      	movs	r2, r1
 8015324:	9400      	str	r4, [sp, #0]
 8015326:	0029      	movs	r1, r5
 8015328:	f7ff ff70 	bl	801520c <_strtol_l.isra.0>
 801532c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801532e:	46c0      	nop			; (mov r8, r8)
 8015330:	200000c8 	.word	0x200000c8
 8015334:	200004f8 	.word	0x200004f8

08015338 <_svfprintf_r>:
 8015338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801533a:	b0d9      	sub	sp, #356	; 0x164
 801533c:	910b      	str	r1, [sp, #44]	; 0x2c
 801533e:	9209      	str	r2, [sp, #36]	; 0x24
 8015340:	001c      	movs	r4, r3
 8015342:	900a      	str	r0, [sp, #40]	; 0x28
 8015344:	f002 fd26 	bl	8017d94 <_localeconv_r>
 8015348:	6803      	ldr	r3, [r0, #0]
 801534a:	0018      	movs	r0, r3
 801534c:	931c      	str	r3, [sp, #112]	; 0x70
 801534e:	f7ea fee3 	bl	8000118 <strlen>
 8015352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015354:	9014      	str	r0, [sp, #80]	; 0x50
 8015356:	899b      	ldrh	r3, [r3, #12]
 8015358:	061b      	lsls	r3, r3, #24
 801535a:	d518      	bpl.n	801538e <_svfprintf_r+0x56>
 801535c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801535e:	691b      	ldr	r3, [r3, #16]
 8015360:	9308      	str	r3, [sp, #32]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d113      	bne.n	801538e <_svfprintf_r+0x56>
 8015366:	2140      	movs	r1, #64	; 0x40
 8015368:	980a      	ldr	r0, [sp, #40]	; 0x28
 801536a:	f7fe fc1f 	bl	8013bac <_malloc_r>
 801536e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015370:	6018      	str	r0, [r3, #0]
 8015372:	6118      	str	r0, [r3, #16]
 8015374:	2800      	cmp	r0, #0
 8015376:	d107      	bne.n	8015388 <_svfprintf_r+0x50>
 8015378:	230c      	movs	r3, #12
 801537a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801537c:	6013      	str	r3, [r2, #0]
 801537e:	3b0d      	subs	r3, #13
 8015380:	9315      	str	r3, [sp, #84]	; 0x54
 8015382:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015384:	b059      	add	sp, #356	; 0x164
 8015386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015388:	2340      	movs	r3, #64	; 0x40
 801538a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801538c:	6153      	str	r3, [r2, #20]
 801538e:	2600      	movs	r6, #0
 8015390:	af2f      	add	r7, sp, #188	; 0xbc
 8015392:	972c      	str	r7, [sp, #176]	; 0xb0
 8015394:	962e      	str	r6, [sp, #184]	; 0xb8
 8015396:	962d      	str	r6, [sp, #180]	; 0xb4
 8015398:	960d      	str	r6, [sp, #52]	; 0x34
 801539a:	961a      	str	r6, [sp, #104]	; 0x68
 801539c:	9619      	str	r6, [sp, #100]	; 0x64
 801539e:	961e      	str	r6, [sp, #120]	; 0x78
 80153a0:	961d      	str	r6, [sp, #116]	; 0x74
 80153a2:	9613      	str	r6, [sp, #76]	; 0x4c
 80153a4:	961b      	str	r6, [sp, #108]	; 0x6c
 80153a6:	961f      	str	r6, [sp, #124]	; 0x7c
 80153a8:	9615      	str	r6, [sp, #84]	; 0x54
 80153aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80153ac:	782b      	ldrb	r3, [r5, #0]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d002      	beq.n	80153b8 <_svfprintf_r+0x80>
 80153b2:	2b25      	cmp	r3, #37	; 0x25
 80153b4:	d000      	beq.n	80153b8 <_svfprintf_r+0x80>
 80153b6:	e095      	b.n	80154e4 <_svfprintf_r+0x1ac>
 80153b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153ba:	1aee      	subs	r6, r5, r3
 80153bc:	d017      	beq.n	80153ee <_svfprintf_r+0xb6>
 80153be:	603b      	str	r3, [r7, #0]
 80153c0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80153c2:	607e      	str	r6, [r7, #4]
 80153c4:	199b      	adds	r3, r3, r6
 80153c6:	932e      	str	r3, [sp, #184]	; 0xb8
 80153c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153ca:	3708      	adds	r7, #8
 80153cc:	9308      	str	r3, [sp, #32]
 80153ce:	3301      	adds	r3, #1
 80153d0:	932d      	str	r3, [sp, #180]	; 0xb4
 80153d2:	2b07      	cmp	r3, #7
 80153d4:	dd08      	ble.n	80153e8 <_svfprintf_r+0xb0>
 80153d6:	aa2c      	add	r2, sp, #176	; 0xb0
 80153d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153dc:	f003 f900 	bl	80185e0 <__ssprint_r>
 80153e0:	2800      	cmp	r0, #0
 80153e2:	d000      	beq.n	80153e6 <_svfprintf_r+0xae>
 80153e4:	e2d9      	b.n	801599a <_svfprintf_r+0x662>
 80153e6:	af2f      	add	r7, sp, #188	; 0xbc
 80153e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153ea:	199b      	adds	r3, r3, r6
 80153ec:	9315      	str	r3, [sp, #84]	; 0x54
 80153ee:	782b      	ldrb	r3, [r5, #0]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d101      	bne.n	80153f8 <_svfprintf_r+0xc0>
 80153f4:	f001 f9e5 	bl	80167c2 <_svfprintf_r+0x148a>
 80153f8:	1c6b      	adds	r3, r5, #1
 80153fa:	221b      	movs	r2, #27
 80153fc:	9311      	str	r3, [sp, #68]	; 0x44
 80153fe:	2300      	movs	r3, #0
 8015400:	a91e      	add	r1, sp, #120	; 0x78
 8015402:	1852      	adds	r2, r2, r1
 8015404:	7013      	strb	r3, [r2, #0]
 8015406:	2201      	movs	r2, #1
 8015408:	001e      	movs	r6, r3
 801540a:	2520      	movs	r5, #32
 801540c:	4252      	negs	r2, r2
 801540e:	9208      	str	r2, [sp, #32]
 8015410:	9316      	str	r3, [sp, #88]	; 0x58
 8015412:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015414:	781b      	ldrb	r3, [r3, #0]
 8015416:	930e      	str	r3, [sp, #56]	; 0x38
 8015418:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801541a:	3301      	adds	r3, #1
 801541c:	9311      	str	r3, [sp, #68]	; 0x44
 801541e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015420:	3820      	subs	r0, #32
 8015422:	285a      	cmp	r0, #90	; 0x5a
 8015424:	d901      	bls.n	801542a <_svfprintf_r+0xf2>
 8015426:	f000 fe3d 	bl	80160a4 <_svfprintf_r+0xd6c>
 801542a:	f7ea fe87 	bl	800013c <__gnu_thumb1_case_shi>
 801542e:	009e      	.short	0x009e
 8015430:	063b063b 	.word	0x063b063b
 8015434:	063b00a7 	.word	0x063b00a7
 8015438:	063b063b 	.word	0x063b063b
 801543c:	063b0080 	.word	0x063b0080
 8015440:	00a9063b 	.word	0x00a9063b
 8015444:	063b00b3 	.word	0x063b00b3
 8015448:	00b900b1 	.word	0x00b900b1
 801544c:	00dd063b 	.word	0x00dd063b
 8015450:	00df00df 	.word	0x00df00df
 8015454:	00df00df 	.word	0x00df00df
 8015458:	00df00df 	.word	0x00df00df
 801545c:	00df00df 	.word	0x00df00df
 8015460:	063b00df 	.word	0x063b00df
 8015464:	063b063b 	.word	0x063b063b
 8015468:	063b063b 	.word	0x063b063b
 801546c:	063b063b 	.word	0x063b063b
 8015470:	063b0240 	.word	0x063b0240
 8015474:	01fd010a 	.word	0x01fd010a
 8015478:	02400240 	.word	0x02400240
 801547c:	063b0240 	.word	0x063b0240
 8015480:	063b063b 	.word	0x063b063b
 8015484:	00f1063b 	.word	0x00f1063b
 8015488:	063b063b 	.word	0x063b063b
 801548c:	063b04e2 	.word	0x063b04e2
 8015490:	063b063b 	.word	0x063b063b
 8015494:	063b0537 	.word	0x063b0537
 8015498:	063b0557 	.word	0x063b0557
 801549c:	005d063b 	.word	0x005d063b
 80154a0:	063b063b 	.word	0x063b063b
 80154a4:	063b063b 	.word	0x063b063b
 80154a8:	063b063b 	.word	0x063b063b
 80154ac:	063b063b 	.word	0x063b063b
 80154b0:	063b0240 	.word	0x063b0240
 80154b4:	01ff010a 	.word	0x01ff010a
 80154b8:	02400240 	.word	0x02400240
 80154bc:	00f30240 	.word	0x00f30240
 80154c0:	010601ff 	.word	0x010601ff
 80154c4:	00ff063b 	.word	0x00ff063b
 80154c8:	04c5063b 	.word	0x04c5063b
 80154cc:	052704e4 	.word	0x052704e4
 80154d0:	063b0106 	.word	0x063b0106
 80154d4:	fff20537 	.word	0xfff20537
 80154d8:	063b0559 	.word	0x063b0559
 80154dc:	0582063b 	.word	0x0582063b
 80154e0:	fff2063b 	.word	0xfff2063b
 80154e4:	3501      	adds	r5, #1
 80154e6:	e761      	b.n	80153ac <_svfprintf_r+0x74>
 80154e8:	4bcb      	ldr	r3, [pc, #812]	; (8015818 <_svfprintf_r+0x4e0>)
 80154ea:	2220      	movs	r2, #32
 80154ec:	931e      	str	r3, [sp, #120]	; 0x78
 80154ee:	4032      	ands	r2, r6
 80154f0:	d101      	bne.n	80154f6 <_svfprintf_r+0x1be>
 80154f2:	f000 fd21 	bl	8015f38 <_svfprintf_r+0xc00>
 80154f6:	2307      	movs	r3, #7
 80154f8:	3407      	adds	r4, #7
 80154fa:	439c      	bics	r4, r3
 80154fc:	0023      	movs	r3, r4
 80154fe:	3308      	adds	r3, #8
 8015500:	9312      	str	r3, [sp, #72]	; 0x48
 8015502:	6823      	ldr	r3, [r4, #0]
 8015504:	6864      	ldr	r4, [r4, #4]
 8015506:	9306      	str	r3, [sp, #24]
 8015508:	9407      	str	r4, [sp, #28]
 801550a:	07f3      	lsls	r3, r6, #31
 801550c:	d50a      	bpl.n	8015524 <_svfprintf_r+0x1ec>
 801550e:	9b06      	ldr	r3, [sp, #24]
 8015510:	9a07      	ldr	r2, [sp, #28]
 8015512:	4313      	orrs	r3, r2
 8015514:	d006      	beq.n	8015524 <_svfprintf_r+0x1ec>
 8015516:	2230      	movs	r2, #48	; 0x30
 8015518:	ab25      	add	r3, sp, #148	; 0x94
 801551a:	701a      	strb	r2, [r3, #0]
 801551c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801551e:	705a      	strb	r2, [r3, #1]
 8015520:	2302      	movs	r3, #2
 8015522:	431e      	orrs	r6, r3
 8015524:	4bbd      	ldr	r3, [pc, #756]	; (801581c <_svfprintf_r+0x4e4>)
 8015526:	401e      	ands	r6, r3
 8015528:	2302      	movs	r3, #2
 801552a:	f000 fc74 	bl	8015e16 <_svfprintf_r+0xade>
 801552e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015530:	f002 fc30 	bl	8017d94 <_localeconv_r>
 8015534:	6843      	ldr	r3, [r0, #4]
 8015536:	0018      	movs	r0, r3
 8015538:	931f      	str	r3, [sp, #124]	; 0x7c
 801553a:	f7ea fded 	bl	8000118 <strlen>
 801553e:	901b      	str	r0, [sp, #108]	; 0x6c
 8015540:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015542:	f002 fc27 	bl	8017d94 <_localeconv_r>
 8015546:	6883      	ldr	r3, [r0, #8]
 8015548:	9313      	str	r3, [sp, #76]	; 0x4c
 801554a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801554c:	2b00      	cmp	r3, #0
 801554e:	d100      	bne.n	8015552 <_svfprintf_r+0x21a>
 8015550:	e75f      	b.n	8015412 <_svfprintf_r+0xda>
 8015552:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015554:	2b00      	cmp	r3, #0
 8015556:	d100      	bne.n	801555a <_svfprintf_r+0x222>
 8015558:	e75b      	b.n	8015412 <_svfprintf_r+0xda>
 801555a:	781b      	ldrb	r3, [r3, #0]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d100      	bne.n	8015562 <_svfprintf_r+0x22a>
 8015560:	e757      	b.n	8015412 <_svfprintf_r+0xda>
 8015562:	2380      	movs	r3, #128	; 0x80
 8015564:	00db      	lsls	r3, r3, #3
 8015566:	431e      	orrs	r6, r3
 8015568:	e753      	b.n	8015412 <_svfprintf_r+0xda>
 801556a:	231b      	movs	r3, #27
 801556c:	aa1e      	add	r2, sp, #120	; 0x78
 801556e:	189b      	adds	r3, r3, r2
 8015570:	781a      	ldrb	r2, [r3, #0]
 8015572:	2a00      	cmp	r2, #0
 8015574:	d000      	beq.n	8015578 <_svfprintf_r+0x240>
 8015576:	e74c      	b.n	8015412 <_svfprintf_r+0xda>
 8015578:	701d      	strb	r5, [r3, #0]
 801557a:	e74a      	b.n	8015412 <_svfprintf_r+0xda>
 801557c:	2301      	movs	r3, #1
 801557e:	e7f2      	b.n	8015566 <_svfprintf_r+0x22e>
 8015580:	6823      	ldr	r3, [r4, #0]
 8015582:	3404      	adds	r4, #4
 8015584:	9316      	str	r3, [sp, #88]	; 0x58
 8015586:	2b00      	cmp	r3, #0
 8015588:	db00      	blt.n	801558c <_svfprintf_r+0x254>
 801558a:	e742      	b.n	8015412 <_svfprintf_r+0xda>
 801558c:	425b      	negs	r3, r3
 801558e:	9316      	str	r3, [sp, #88]	; 0x58
 8015590:	2304      	movs	r3, #4
 8015592:	e7e8      	b.n	8015566 <_svfprintf_r+0x22e>
 8015594:	231b      	movs	r3, #27
 8015596:	aa1e      	add	r2, sp, #120	; 0x78
 8015598:	189b      	adds	r3, r3, r2
 801559a:	222b      	movs	r2, #43	; 0x2b
 801559c:	701a      	strb	r2, [r3, #0]
 801559e:	e738      	b.n	8015412 <_svfprintf_r+0xda>
 80155a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80155a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80155a4:	7812      	ldrb	r2, [r2, #0]
 80155a6:	3301      	adds	r3, #1
 80155a8:	920e      	str	r2, [sp, #56]	; 0x38
 80155aa:	2a2a      	cmp	r2, #42	; 0x2a
 80155ac:	d008      	beq.n	80155c0 <_svfprintf_r+0x288>
 80155ae:	2200      	movs	r2, #0
 80155b0:	9208      	str	r2, [sp, #32]
 80155b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80155b4:	001a      	movs	r2, r3
 80155b6:	3930      	subs	r1, #48	; 0x30
 80155b8:	2909      	cmp	r1, #9
 80155ba:	d90c      	bls.n	80155d6 <_svfprintf_r+0x29e>
 80155bc:	9211      	str	r2, [sp, #68]	; 0x44
 80155be:	e72e      	b.n	801541e <_svfprintf_r+0xe6>
 80155c0:	6821      	ldr	r1, [r4, #0]
 80155c2:	1d22      	adds	r2, r4, #4
 80155c4:	9108      	str	r1, [sp, #32]
 80155c6:	2900      	cmp	r1, #0
 80155c8:	da02      	bge.n	80155d0 <_svfprintf_r+0x298>
 80155ca:	2101      	movs	r1, #1
 80155cc:	4249      	negs	r1, r1
 80155ce:	9108      	str	r1, [sp, #32]
 80155d0:	0014      	movs	r4, r2
 80155d2:	9311      	str	r3, [sp, #68]	; 0x44
 80155d4:	e71d      	b.n	8015412 <_svfprintf_r+0xda>
 80155d6:	200a      	movs	r0, #10
 80155d8:	9a08      	ldr	r2, [sp, #32]
 80155da:	4342      	muls	r2, r0
 80155dc:	1852      	adds	r2, r2, r1
 80155de:	9208      	str	r2, [sp, #32]
 80155e0:	781a      	ldrb	r2, [r3, #0]
 80155e2:	3301      	adds	r3, #1
 80155e4:	920e      	str	r2, [sp, #56]	; 0x38
 80155e6:	e7e4      	b.n	80155b2 <_svfprintf_r+0x27a>
 80155e8:	2380      	movs	r3, #128	; 0x80
 80155ea:	e7bc      	b.n	8015566 <_svfprintf_r+0x22e>
 80155ec:	2300      	movs	r3, #0
 80155ee:	9316      	str	r3, [sp, #88]	; 0x58
 80155f0:	220a      	movs	r2, #10
 80155f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80155f4:	4353      	muls	r3, r2
 80155f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80155f8:	3a30      	subs	r2, #48	; 0x30
 80155fa:	18d3      	adds	r3, r2, r3
 80155fc:	9316      	str	r3, [sp, #88]	; 0x58
 80155fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015600:	1c5a      	adds	r2, r3, #1
 8015602:	781b      	ldrb	r3, [r3, #0]
 8015604:	9211      	str	r2, [sp, #68]	; 0x44
 8015606:	930e      	str	r3, [sp, #56]	; 0x38
 8015608:	3b30      	subs	r3, #48	; 0x30
 801560a:	2b09      	cmp	r3, #9
 801560c:	d9f0      	bls.n	80155f0 <_svfprintf_r+0x2b8>
 801560e:	e7d5      	b.n	80155bc <_svfprintf_r+0x284>
 8015610:	2308      	movs	r3, #8
 8015612:	e7a8      	b.n	8015566 <_svfprintf_r+0x22e>
 8015614:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015616:	781b      	ldrb	r3, [r3, #0]
 8015618:	2b68      	cmp	r3, #104	; 0x68
 801561a:	d105      	bne.n	8015628 <_svfprintf_r+0x2f0>
 801561c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801561e:	3301      	adds	r3, #1
 8015620:	9311      	str	r3, [sp, #68]	; 0x44
 8015622:	2380      	movs	r3, #128	; 0x80
 8015624:	009b      	lsls	r3, r3, #2
 8015626:	e79e      	b.n	8015566 <_svfprintf_r+0x22e>
 8015628:	2340      	movs	r3, #64	; 0x40
 801562a:	e79c      	b.n	8015566 <_svfprintf_r+0x22e>
 801562c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801562e:	781b      	ldrb	r3, [r3, #0]
 8015630:	2b6c      	cmp	r3, #108	; 0x6c
 8015632:	d104      	bne.n	801563e <_svfprintf_r+0x306>
 8015634:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015636:	3301      	adds	r3, #1
 8015638:	9311      	str	r3, [sp, #68]	; 0x44
 801563a:	432e      	orrs	r6, r5
 801563c:	e6e9      	b.n	8015412 <_svfprintf_r+0xda>
 801563e:	2310      	movs	r3, #16
 8015640:	e791      	b.n	8015566 <_svfprintf_r+0x22e>
 8015642:	1d23      	adds	r3, r4, #4
 8015644:	6822      	ldr	r2, [r4, #0]
 8015646:	9312      	str	r3, [sp, #72]	; 0x48
 8015648:	ab3f      	add	r3, sp, #252	; 0xfc
 801564a:	701a      	strb	r2, [r3, #0]
 801564c:	221b      	movs	r2, #27
 801564e:	2000      	movs	r0, #0
 8015650:	a91e      	add	r1, sp, #120	; 0x78
 8015652:	1852      	adds	r2, r2, r1
 8015654:	7010      	strb	r0, [r2, #0]
 8015656:	2201      	movs	r2, #1
 8015658:	0005      	movs	r5, r0
 801565a:	900c      	str	r0, [sp, #48]	; 0x30
 801565c:	9208      	str	r2, [sp, #32]
 801565e:	9017      	str	r0, [sp, #92]	; 0x5c
 8015660:	9010      	str	r0, [sp, #64]	; 0x40
 8015662:	900f      	str	r0, [sp, #60]	; 0x3c
 8015664:	9309      	str	r3, [sp, #36]	; 0x24
 8015666:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015668:	9a08      	ldr	r2, [sp, #32]
 801566a:	9318      	str	r3, [sp, #96]	; 0x60
 801566c:	4293      	cmp	r3, r2
 801566e:	da00      	bge.n	8015672 <_svfprintf_r+0x33a>
 8015670:	9218      	str	r2, [sp, #96]	; 0x60
 8015672:	231b      	movs	r3, #27
 8015674:	aa1e      	add	r2, sp, #120	; 0x78
 8015676:	189b      	adds	r3, r3, r2
 8015678:	781b      	ldrb	r3, [r3, #0]
 801567a:	1e5a      	subs	r2, r3, #1
 801567c:	4193      	sbcs	r3, r2
 801567e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015680:	18d3      	adds	r3, r2, r3
 8015682:	9318      	str	r3, [sp, #96]	; 0x60
 8015684:	2302      	movs	r3, #2
 8015686:	4033      	ands	r3, r6
 8015688:	9320      	str	r3, [sp, #128]	; 0x80
 801568a:	d002      	beq.n	8015692 <_svfprintf_r+0x35a>
 801568c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801568e:	3302      	adds	r3, #2
 8015690:	9318      	str	r3, [sp, #96]	; 0x60
 8015692:	2384      	movs	r3, #132	; 0x84
 8015694:	4033      	ands	r3, r6
 8015696:	9321      	str	r3, [sp, #132]	; 0x84
 8015698:	d121      	bne.n	80156de <_svfprintf_r+0x3a6>
 801569a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801569c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801569e:	1a9c      	subs	r4, r3, r2
 80156a0:	2c00      	cmp	r4, #0
 80156a2:	dd1c      	ble.n	80156de <_svfprintf_r+0x3a6>
 80156a4:	0039      	movs	r1, r7
 80156a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156a8:	485d      	ldr	r0, [pc, #372]	; (8015820 <_svfprintf_r+0x4e8>)
 80156aa:	9322      	str	r3, [sp, #136]	; 0x88
 80156ac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80156ae:	3301      	adds	r3, #1
 80156b0:	3108      	adds	r1, #8
 80156b2:	6038      	str	r0, [r7, #0]
 80156b4:	2c10      	cmp	r4, #16
 80156b6:	dd01      	ble.n	80156bc <_svfprintf_r+0x384>
 80156b8:	f000 fd08 	bl	80160cc <_svfprintf_r+0xd94>
 80156bc:	607c      	str	r4, [r7, #4]
 80156be:	18a4      	adds	r4, r4, r2
 80156c0:	942e      	str	r4, [sp, #184]	; 0xb8
 80156c2:	932d      	str	r3, [sp, #180]	; 0xb4
 80156c4:	000f      	movs	r7, r1
 80156c6:	2b07      	cmp	r3, #7
 80156c8:	dd09      	ble.n	80156de <_svfprintf_r+0x3a6>
 80156ca:	aa2c      	add	r2, sp, #176	; 0xb0
 80156cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156d0:	f002 ff86 	bl	80185e0 <__ssprint_r>
 80156d4:	2800      	cmp	r0, #0
 80156d6:	d001      	beq.n	80156dc <_svfprintf_r+0x3a4>
 80156d8:	f001 f852 	bl	8016780 <_svfprintf_r+0x1448>
 80156dc:	af2f      	add	r7, sp, #188	; 0xbc
 80156de:	231b      	movs	r3, #27
 80156e0:	aa1e      	add	r2, sp, #120	; 0x78
 80156e2:	189b      	adds	r3, r3, r2
 80156e4:	781a      	ldrb	r2, [r3, #0]
 80156e6:	2a00      	cmp	r2, #0
 80156e8:	d017      	beq.n	801571a <_svfprintf_r+0x3e2>
 80156ea:	603b      	str	r3, [r7, #0]
 80156ec:	2301      	movs	r3, #1
 80156ee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80156f0:	607b      	str	r3, [r7, #4]
 80156f2:	0013      	movs	r3, r2
 80156f4:	3301      	adds	r3, #1
 80156f6:	932e      	str	r3, [sp, #184]	; 0xb8
 80156f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156fa:	3708      	adds	r7, #8
 80156fc:	9322      	str	r3, [sp, #136]	; 0x88
 80156fe:	3301      	adds	r3, #1
 8015700:	932d      	str	r3, [sp, #180]	; 0xb4
 8015702:	2b07      	cmp	r3, #7
 8015704:	dd09      	ble.n	801571a <_svfprintf_r+0x3e2>
 8015706:	aa2c      	add	r2, sp, #176	; 0xb0
 8015708:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801570a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801570c:	f002 ff68 	bl	80185e0 <__ssprint_r>
 8015710:	2800      	cmp	r0, #0
 8015712:	d001      	beq.n	8015718 <_svfprintf_r+0x3e0>
 8015714:	f001 f834 	bl	8016780 <_svfprintf_r+0x1448>
 8015718:	af2f      	add	r7, sp, #188	; 0xbc
 801571a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801571c:	2b00      	cmp	r3, #0
 801571e:	d019      	beq.n	8015754 <_svfprintf_r+0x41c>
 8015720:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015722:	9320      	str	r3, [sp, #128]	; 0x80
 8015724:	ab25      	add	r3, sp, #148	; 0x94
 8015726:	603b      	str	r3, [r7, #0]
 8015728:	2302      	movs	r3, #2
 801572a:	607b      	str	r3, [r7, #4]
 801572c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801572e:	3708      	adds	r7, #8
 8015730:	3302      	adds	r3, #2
 8015732:	932e      	str	r3, [sp, #184]	; 0xb8
 8015734:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015736:	9320      	str	r3, [sp, #128]	; 0x80
 8015738:	3301      	adds	r3, #1
 801573a:	932d      	str	r3, [sp, #180]	; 0xb4
 801573c:	2b07      	cmp	r3, #7
 801573e:	dd09      	ble.n	8015754 <_svfprintf_r+0x41c>
 8015740:	aa2c      	add	r2, sp, #176	; 0xb0
 8015742:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015744:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015746:	f002 ff4b 	bl	80185e0 <__ssprint_r>
 801574a:	2800      	cmp	r0, #0
 801574c:	d001      	beq.n	8015752 <_svfprintf_r+0x41a>
 801574e:	f001 f817 	bl	8016780 <_svfprintf_r+0x1448>
 8015752:	af2f      	add	r7, sp, #188	; 0xbc
 8015754:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015756:	2b80      	cmp	r3, #128	; 0x80
 8015758:	d121      	bne.n	801579e <_svfprintf_r+0x466>
 801575a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801575c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801575e:	1a9c      	subs	r4, r3, r2
 8015760:	2c00      	cmp	r4, #0
 8015762:	dd1c      	ble.n	801579e <_svfprintf_r+0x466>
 8015764:	0039      	movs	r1, r7
 8015766:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015768:	482e      	ldr	r0, [pc, #184]	; (8015824 <_svfprintf_r+0x4ec>)
 801576a:	9320      	str	r3, [sp, #128]	; 0x80
 801576c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801576e:	3301      	adds	r3, #1
 8015770:	3108      	adds	r1, #8
 8015772:	6038      	str	r0, [r7, #0]
 8015774:	2c10      	cmp	r4, #16
 8015776:	dd01      	ble.n	801577c <_svfprintf_r+0x444>
 8015778:	f000 fcbc 	bl	80160f4 <_svfprintf_r+0xdbc>
 801577c:	607c      	str	r4, [r7, #4]
 801577e:	18a4      	adds	r4, r4, r2
 8015780:	942e      	str	r4, [sp, #184]	; 0xb8
 8015782:	932d      	str	r3, [sp, #180]	; 0xb4
 8015784:	000f      	movs	r7, r1
 8015786:	2b07      	cmp	r3, #7
 8015788:	dd09      	ble.n	801579e <_svfprintf_r+0x466>
 801578a:	aa2c      	add	r2, sp, #176	; 0xb0
 801578c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801578e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015790:	f002 ff26 	bl	80185e0 <__ssprint_r>
 8015794:	2800      	cmp	r0, #0
 8015796:	d001      	beq.n	801579c <_svfprintf_r+0x464>
 8015798:	f000 fff2 	bl	8016780 <_svfprintf_r+0x1448>
 801579c:	af2f      	add	r7, sp, #188	; 0xbc
 801579e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80157a0:	9a08      	ldr	r2, [sp, #32]
 80157a2:	1a9c      	subs	r4, r3, r2
 80157a4:	2c00      	cmp	r4, #0
 80157a6:	dd1c      	ble.n	80157e2 <_svfprintf_r+0x4aa>
 80157a8:	0039      	movs	r1, r7
 80157aa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80157ac:	481d      	ldr	r0, [pc, #116]	; (8015824 <_svfprintf_r+0x4ec>)
 80157ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80157b0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80157b2:	3301      	adds	r3, #1
 80157b4:	3108      	adds	r1, #8
 80157b6:	6038      	str	r0, [r7, #0]
 80157b8:	2c10      	cmp	r4, #16
 80157ba:	dd01      	ble.n	80157c0 <_svfprintf_r+0x488>
 80157bc:	f000 fcb4 	bl	8016128 <_svfprintf_r+0xdf0>
 80157c0:	18a2      	adds	r2, r4, r2
 80157c2:	607c      	str	r4, [r7, #4]
 80157c4:	922e      	str	r2, [sp, #184]	; 0xb8
 80157c6:	932d      	str	r3, [sp, #180]	; 0xb4
 80157c8:	000f      	movs	r7, r1
 80157ca:	2b07      	cmp	r3, #7
 80157cc:	dd09      	ble.n	80157e2 <_svfprintf_r+0x4aa>
 80157ce:	aa2c      	add	r2, sp, #176	; 0xb0
 80157d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157d4:	f002 ff04 	bl	80185e0 <__ssprint_r>
 80157d8:	2800      	cmp	r0, #0
 80157da:	d001      	beq.n	80157e0 <_svfprintf_r+0x4a8>
 80157dc:	f000 ffd0 	bl	8016780 <_svfprintf_r+0x1448>
 80157e0:	af2f      	add	r7, sp, #188	; 0xbc
 80157e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80157e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80157e6:	05f3      	lsls	r3, r6, #23
 80157e8:	d501      	bpl.n	80157ee <_svfprintf_r+0x4b6>
 80157ea:	f000 fcb1 	bl	8016150 <_svfprintf_r+0xe18>
 80157ee:	9a08      	ldr	r2, [sp, #32]
 80157f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157f2:	4694      	mov	ip, r2
 80157f4:	603b      	str	r3, [r7, #0]
 80157f6:	9b08      	ldr	r3, [sp, #32]
 80157f8:	607b      	str	r3, [r7, #4]
 80157fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80157fc:	4463      	add	r3, ip
 80157fe:	932e      	str	r3, [sp, #184]	; 0xb8
 8015800:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015802:	9308      	str	r3, [sp, #32]
 8015804:	3301      	adds	r3, #1
 8015806:	932d      	str	r3, [sp, #180]	; 0xb4
 8015808:	2b07      	cmp	r3, #7
 801580a:	dd01      	ble.n	8015810 <_svfprintf_r+0x4d8>
 801580c:	f000 fd94 	bl	8016338 <_svfprintf_r+0x1000>
 8015810:	3708      	adds	r7, #8
 8015812:	f000 fce4 	bl	80161de <_svfprintf_r+0xea6>
 8015816:	46c0      	nop			; (mov r8, r8)
 8015818:	0801bfe1 	.word	0x0801bfe1
 801581c:	fffffbff 	.word	0xfffffbff
 8015820:	0801bff4 	.word	0x0801bff4
 8015824:	0801c004 	.word	0x0801c004
 8015828:	2310      	movs	r3, #16
 801582a:	431e      	orrs	r6, r3
 801582c:	06b3      	lsls	r3, r6, #26
 801582e:	d52c      	bpl.n	801588a <_svfprintf_r+0x552>
 8015830:	2307      	movs	r3, #7
 8015832:	3407      	adds	r4, #7
 8015834:	439c      	bics	r4, r3
 8015836:	0023      	movs	r3, r4
 8015838:	3308      	adds	r3, #8
 801583a:	9312      	str	r3, [sp, #72]	; 0x48
 801583c:	6823      	ldr	r3, [r4, #0]
 801583e:	6864      	ldr	r4, [r4, #4]
 8015840:	9306      	str	r3, [sp, #24]
 8015842:	9407      	str	r4, [sp, #28]
 8015844:	9b07      	ldr	r3, [sp, #28]
 8015846:	2b00      	cmp	r3, #0
 8015848:	da0b      	bge.n	8015862 <_svfprintf_r+0x52a>
 801584a:	9906      	ldr	r1, [sp, #24]
 801584c:	9a07      	ldr	r2, [sp, #28]
 801584e:	2400      	movs	r4, #0
 8015850:	424b      	negs	r3, r1
 8015852:	4194      	sbcs	r4, r2
 8015854:	9306      	str	r3, [sp, #24]
 8015856:	9407      	str	r4, [sp, #28]
 8015858:	231b      	movs	r3, #27
 801585a:	aa1e      	add	r2, sp, #120	; 0x78
 801585c:	189b      	adds	r3, r3, r2
 801585e:	222d      	movs	r2, #45	; 0x2d
 8015860:	701a      	strb	r2, [r3, #0]
 8015862:	9b08      	ldr	r3, [sp, #32]
 8015864:	3301      	adds	r3, #1
 8015866:	d000      	beq.n	801586a <_svfprintf_r+0x532>
 8015868:	e382      	b.n	8015f70 <_svfprintf_r+0xc38>
 801586a:	9b07      	ldr	r3, [sp, #28]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d000      	beq.n	8015872 <_svfprintf_r+0x53a>
 8015870:	e3b0      	b.n	8015fd4 <_svfprintf_r+0xc9c>
 8015872:	9b06      	ldr	r3, [sp, #24]
 8015874:	2b09      	cmp	r3, #9
 8015876:	d900      	bls.n	801587a <_svfprintf_r+0x542>
 8015878:	e3ac      	b.n	8015fd4 <_svfprintf_r+0xc9c>
 801587a:	23e7      	movs	r3, #231	; 0xe7
 801587c:	aa1e      	add	r2, sp, #120	; 0x78
 801587e:	189b      	adds	r3, r3, r2
 8015880:	9a06      	ldr	r2, [sp, #24]
 8015882:	3230      	adds	r2, #48	; 0x30
 8015884:	701a      	strb	r2, [r3, #0]
 8015886:	9309      	str	r3, [sp, #36]	; 0x24
 8015888:	e395      	b.n	8015fb6 <_svfprintf_r+0xc7e>
 801588a:	1d23      	adds	r3, r4, #4
 801588c:	9312      	str	r3, [sp, #72]	; 0x48
 801588e:	06f3      	lsls	r3, r6, #27
 8015890:	d504      	bpl.n	801589c <_svfprintf_r+0x564>
 8015892:	6823      	ldr	r3, [r4, #0]
 8015894:	9306      	str	r3, [sp, #24]
 8015896:	17db      	asrs	r3, r3, #31
 8015898:	9307      	str	r3, [sp, #28]
 801589a:	e7d3      	b.n	8015844 <_svfprintf_r+0x50c>
 801589c:	6823      	ldr	r3, [r4, #0]
 801589e:	0672      	lsls	r2, r6, #25
 80158a0:	d501      	bpl.n	80158a6 <_svfprintf_r+0x56e>
 80158a2:	b21b      	sxth	r3, r3
 80158a4:	e7f6      	b.n	8015894 <_svfprintf_r+0x55c>
 80158a6:	05b2      	lsls	r2, r6, #22
 80158a8:	d5f4      	bpl.n	8015894 <_svfprintf_r+0x55c>
 80158aa:	b25b      	sxtb	r3, r3
 80158ac:	e7f2      	b.n	8015894 <_svfprintf_r+0x55c>
 80158ae:	2307      	movs	r3, #7
 80158b0:	3407      	adds	r4, #7
 80158b2:	439c      	bics	r4, r3
 80158b4:	0023      	movs	r3, r4
 80158b6:	2201      	movs	r2, #1
 80158b8:	3308      	adds	r3, #8
 80158ba:	9312      	str	r3, [sp, #72]	; 0x48
 80158bc:	6823      	ldr	r3, [r4, #0]
 80158be:	4252      	negs	r2, r2
 80158c0:	931a      	str	r3, [sp, #104]	; 0x68
 80158c2:	6863      	ldr	r3, [r4, #4]
 80158c4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80158c6:	005c      	lsls	r4, r3, #1
 80158c8:	0864      	lsrs	r4, r4, #1
 80158ca:	9319      	str	r3, [sp, #100]	; 0x64
 80158cc:	0028      	movs	r0, r5
 80158ce:	4bcf      	ldr	r3, [pc, #828]	; (8015c0c <_svfprintf_r+0x8d4>)
 80158d0:	0021      	movs	r1, r4
 80158d2:	f7ed f99f 	bl	8002c14 <__aeabi_dcmpun>
 80158d6:	2800      	cmp	r0, #0
 80158d8:	d125      	bne.n	8015926 <_svfprintf_r+0x5ee>
 80158da:	2201      	movs	r2, #1
 80158dc:	4bcb      	ldr	r3, [pc, #812]	; (8015c0c <_svfprintf_r+0x8d4>)
 80158de:	4252      	negs	r2, r2
 80158e0:	0028      	movs	r0, r5
 80158e2:	0021      	movs	r1, r4
 80158e4:	f7ea fdca 	bl	800047c <__aeabi_dcmple>
 80158e8:	2800      	cmp	r0, #0
 80158ea:	d11c      	bne.n	8015926 <_svfprintf_r+0x5ee>
 80158ec:	2200      	movs	r2, #0
 80158ee:	2300      	movs	r3, #0
 80158f0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80158f2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80158f4:	f7ea fdb8 	bl	8000468 <__aeabi_dcmplt>
 80158f8:	2800      	cmp	r0, #0
 80158fa:	d004      	beq.n	8015906 <_svfprintf_r+0x5ce>
 80158fc:	231b      	movs	r3, #27
 80158fe:	aa1e      	add	r2, sp, #120	; 0x78
 8015900:	189b      	adds	r3, r3, r2
 8015902:	222d      	movs	r2, #45	; 0x2d
 8015904:	701a      	strb	r2, [r3, #0]
 8015906:	4bc2      	ldr	r3, [pc, #776]	; (8015c10 <_svfprintf_r+0x8d8>)
 8015908:	9309      	str	r3, [sp, #36]	; 0x24
 801590a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801590c:	2b47      	cmp	r3, #71	; 0x47
 801590e:	dc01      	bgt.n	8015914 <_svfprintf_r+0x5dc>
 8015910:	4bc0      	ldr	r3, [pc, #768]	; (8015c14 <_svfprintf_r+0x8dc>)
 8015912:	9309      	str	r3, [sp, #36]	; 0x24
 8015914:	2380      	movs	r3, #128	; 0x80
 8015916:	439e      	bics	r6, r3
 8015918:	2300      	movs	r3, #0
 801591a:	930c      	str	r3, [sp, #48]	; 0x30
 801591c:	3303      	adds	r3, #3
 801591e:	9308      	str	r3, [sp, #32]
 8015920:	2300      	movs	r3, #0
 8015922:	9317      	str	r3, [sp, #92]	; 0x5c
 8015924:	e34f      	b.n	8015fc6 <_svfprintf_r+0xc8e>
 8015926:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015928:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801592a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801592c:	9919      	ldr	r1, [sp, #100]	; 0x64
 801592e:	f7ed f971 	bl	8002c14 <__aeabi_dcmpun>
 8015932:	2800      	cmp	r0, #0
 8015934:	d00e      	beq.n	8015954 <_svfprintf_r+0x61c>
 8015936:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015938:	2b00      	cmp	r3, #0
 801593a:	da04      	bge.n	8015946 <_svfprintf_r+0x60e>
 801593c:	231b      	movs	r3, #27
 801593e:	aa1e      	add	r2, sp, #120	; 0x78
 8015940:	189b      	adds	r3, r3, r2
 8015942:	222d      	movs	r2, #45	; 0x2d
 8015944:	701a      	strb	r2, [r3, #0]
 8015946:	4bb4      	ldr	r3, [pc, #720]	; (8015c18 <_svfprintf_r+0x8e0>)
 8015948:	9309      	str	r3, [sp, #36]	; 0x24
 801594a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801594c:	2b47      	cmp	r3, #71	; 0x47
 801594e:	dce1      	bgt.n	8015914 <_svfprintf_r+0x5dc>
 8015950:	4bb2      	ldr	r3, [pc, #712]	; (8015c1c <_svfprintf_r+0x8e4>)
 8015952:	e7de      	b.n	8015912 <_svfprintf_r+0x5da>
 8015954:	2320      	movs	r3, #32
 8015956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015958:	439a      	bics	r2, r3
 801595a:	920f      	str	r2, [sp, #60]	; 0x3c
 801595c:	2a41      	cmp	r2, #65	; 0x41
 801595e:	d124      	bne.n	80159aa <_svfprintf_r+0x672>
 8015960:	2230      	movs	r2, #48	; 0x30
 8015962:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015964:	ab25      	add	r3, sp, #148	; 0x94
 8015966:	701a      	strb	r2, [r3, #0]
 8015968:	3228      	adds	r2, #40	; 0x28
 801596a:	2961      	cmp	r1, #97	; 0x61
 801596c:	d100      	bne.n	8015970 <_svfprintf_r+0x638>
 801596e:	3220      	adds	r2, #32
 8015970:	705a      	strb	r2, [r3, #1]
 8015972:	2302      	movs	r3, #2
 8015974:	431e      	orrs	r6, r3
 8015976:	9b08      	ldr	r3, [sp, #32]
 8015978:	2b63      	cmp	r3, #99	; 0x63
 801597a:	dc00      	bgt.n	801597e <_svfprintf_r+0x646>
 801597c:	e09e      	b.n	8015abc <_svfprintf_r+0x784>
 801597e:	1c59      	adds	r1, r3, #1
 8015980:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015982:	f7fe f913 	bl	8013bac <_malloc_r>
 8015986:	9009      	str	r0, [sp, #36]	; 0x24
 8015988:	2800      	cmp	r0, #0
 801598a:	d000      	beq.n	801598e <_svfprintf_r+0x656>
 801598c:	e09b      	b.n	8015ac6 <_svfprintf_r+0x78e>
 801598e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015990:	899a      	ldrh	r2, [r3, #12]
 8015992:	2340      	movs	r3, #64	; 0x40
 8015994:	4313      	orrs	r3, r2
 8015996:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015998:	8193      	strh	r3, [r2, #12]
 801599a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801599c:	899b      	ldrh	r3, [r3, #12]
 801599e:	065b      	lsls	r3, r3, #25
 80159a0:	d400      	bmi.n	80159a4 <_svfprintf_r+0x66c>
 80159a2:	e4ee      	b.n	8015382 <_svfprintf_r+0x4a>
 80159a4:	2301      	movs	r3, #1
 80159a6:	425b      	negs	r3, r3
 80159a8:	e4ea      	b.n	8015380 <_svfprintf_r+0x48>
 80159aa:	9b08      	ldr	r3, [sp, #32]
 80159ac:	900c      	str	r0, [sp, #48]	; 0x30
 80159ae:	3301      	adds	r3, #1
 80159b0:	d100      	bne.n	80159b4 <_svfprintf_r+0x67c>
 80159b2:	e08b      	b.n	8015acc <_svfprintf_r+0x794>
 80159b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159b6:	2b47      	cmp	r3, #71	; 0x47
 80159b8:	d103      	bne.n	80159c2 <_svfprintf_r+0x68a>
 80159ba:	9b08      	ldr	r3, [sp, #32]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d100      	bne.n	80159c2 <_svfprintf_r+0x68a>
 80159c0:	e087      	b.n	8015ad2 <_svfprintf_r+0x79a>
 80159c2:	2380      	movs	r3, #128	; 0x80
 80159c4:	005b      	lsls	r3, r3, #1
 80159c6:	4333      	orrs	r3, r6
 80159c8:	9320      	str	r3, [sp, #128]	; 0x80
 80159ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80159cc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	db00      	blt.n	80159d4 <_svfprintf_r+0x69c>
 80159d2:	e082      	b.n	8015ada <_svfprintf_r+0x7a2>
 80159d4:	2280      	movs	r2, #128	; 0x80
 80159d6:	0612      	lsls	r2, r2, #24
 80159d8:	4694      	mov	ip, r2
 80159da:	4463      	add	r3, ip
 80159dc:	930d      	str	r3, [sp, #52]	; 0x34
 80159de:	232d      	movs	r3, #45	; 0x2d
 80159e0:	9322      	str	r3, [sp, #136]	; 0x88
 80159e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159e4:	2b41      	cmp	r3, #65	; 0x41
 80159e6:	d000      	beq.n	80159ea <_svfprintf_r+0x6b2>
 80159e8:	e105      	b.n	8015bf6 <_svfprintf_r+0x8be>
 80159ea:	aa26      	add	r2, sp, #152	; 0x98
 80159ec:	0020      	movs	r0, r4
 80159ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80159f0:	f002 fdc4 	bl	801857c <frexp>
 80159f4:	23ff      	movs	r3, #255	; 0xff
 80159f6:	2200      	movs	r2, #0
 80159f8:	059b      	lsls	r3, r3, #22
 80159fa:	f7ec fb51 	bl	80020a0 <__aeabi_dmul>
 80159fe:	2200      	movs	r2, #0
 8015a00:	2300      	movs	r3, #0
 8015a02:	0004      	movs	r4, r0
 8015a04:	000d      	movs	r5, r1
 8015a06:	f7ea fd29 	bl	800045c <__aeabi_dcmpeq>
 8015a0a:	2800      	cmp	r0, #0
 8015a0c:	d001      	beq.n	8015a12 <_svfprintf_r+0x6da>
 8015a0e:	2301      	movs	r3, #1
 8015a10:	9326      	str	r3, [sp, #152]	; 0x98
 8015a12:	4b83      	ldr	r3, [pc, #524]	; (8015c20 <_svfprintf_r+0x8e8>)
 8015a14:	9317      	str	r3, [sp, #92]	; 0x5c
 8015a16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a18:	2b61      	cmp	r3, #97	; 0x61
 8015a1a:	d101      	bne.n	8015a20 <_svfprintf_r+0x6e8>
 8015a1c:	4b81      	ldr	r3, [pc, #516]	; (8015c24 <_svfprintf_r+0x8ec>)
 8015a1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8015a20:	9b08      	ldr	r3, [sp, #32]
 8015a22:	3b01      	subs	r3, #1
 8015a24:	9310      	str	r3, [sp, #64]	; 0x40
 8015a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a28:	9318      	str	r3, [sp, #96]	; 0x60
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	4b7e      	ldr	r3, [pc, #504]	; (8015c28 <_svfprintf_r+0x8f0>)
 8015a2e:	0020      	movs	r0, r4
 8015a30:	0029      	movs	r1, r5
 8015a32:	f7ec fb35 	bl	80020a0 <__aeabi_dmul>
 8015a36:	000d      	movs	r5, r1
 8015a38:	0004      	movs	r4, r0
 8015a3a:	f7ed f907 	bl	8002c4c <__aeabi_d2iz>
 8015a3e:	9021      	str	r0, [sp, #132]	; 0x84
 8015a40:	f7ed f93a 	bl	8002cb8 <__aeabi_i2d>
 8015a44:	0002      	movs	r2, r0
 8015a46:	000b      	movs	r3, r1
 8015a48:	0020      	movs	r0, r4
 8015a4a:	0029      	movs	r1, r5
 8015a4c:	f7ec fd9a 	bl	8002584 <__aeabi_dsub>
 8015a50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015a52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015a54:	3301      	adds	r3, #1
 8015a56:	930d      	str	r3, [sp, #52]	; 0x34
 8015a58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015a5a:	0004      	movs	r4, r0
 8015a5c:	5c9b      	ldrb	r3, [r3, r2]
 8015a5e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015a60:	000d      	movs	r5, r1
 8015a62:	7013      	strb	r3, [r2, #0]
 8015a64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a66:	9323      	str	r3, [sp, #140]	; 0x8c
 8015a68:	3301      	adds	r3, #1
 8015a6a:	d00a      	beq.n	8015a82 <_svfprintf_r+0x74a>
 8015a6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a6e:	2200      	movs	r2, #0
 8015a70:	3b01      	subs	r3, #1
 8015a72:	9310      	str	r3, [sp, #64]	; 0x40
 8015a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a76:	9318      	str	r3, [sp, #96]	; 0x60
 8015a78:	2300      	movs	r3, #0
 8015a7a:	f7ea fcef 	bl	800045c <__aeabi_dcmpeq>
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	d0d3      	beq.n	8015a2a <_svfprintf_r+0x6f2>
 8015a82:	2200      	movs	r2, #0
 8015a84:	4b69      	ldr	r3, [pc, #420]	; (8015c2c <_svfprintf_r+0x8f4>)
 8015a86:	0020      	movs	r0, r4
 8015a88:	0029      	movs	r1, r5
 8015a8a:	f7ea fd01 	bl	8000490 <__aeabi_dcmpgt>
 8015a8e:	2800      	cmp	r0, #0
 8015a90:	d126      	bne.n	8015ae0 <_svfprintf_r+0x7a8>
 8015a92:	2200      	movs	r2, #0
 8015a94:	4b65      	ldr	r3, [pc, #404]	; (8015c2c <_svfprintf_r+0x8f4>)
 8015a96:	0020      	movs	r0, r4
 8015a98:	0029      	movs	r1, r5
 8015a9a:	f7ea fcdf 	bl	800045c <__aeabi_dcmpeq>
 8015a9e:	2800      	cmp	r0, #0
 8015aa0:	d002      	beq.n	8015aa8 <_svfprintf_r+0x770>
 8015aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015aa4:	07db      	lsls	r3, r3, #31
 8015aa6:	d41b      	bmi.n	8015ae0 <_svfprintf_r+0x7a8>
 8015aa8:	2130      	movs	r1, #48	; 0x30
 8015aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015aac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8015aae:	1898      	adds	r0, r3, r2
 8015ab0:	930d      	str	r3, [sp, #52]	; 0x34
 8015ab2:	1ac2      	subs	r2, r0, r3
 8015ab4:	d426      	bmi.n	8015b04 <_svfprintf_r+0x7cc>
 8015ab6:	7019      	strb	r1, [r3, #0]
 8015ab8:	3301      	adds	r3, #1
 8015aba:	e7f9      	b.n	8015ab0 <_svfprintf_r+0x778>
 8015abc:	2300      	movs	r3, #0
 8015abe:	930c      	str	r3, [sp, #48]	; 0x30
 8015ac0:	ab3f      	add	r3, sp, #252	; 0xfc
 8015ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8015ac4:	e77d      	b.n	80159c2 <_svfprintf_r+0x68a>
 8015ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ac8:	930c      	str	r3, [sp, #48]	; 0x30
 8015aca:	e77a      	b.n	80159c2 <_svfprintf_r+0x68a>
 8015acc:	2306      	movs	r3, #6
 8015ace:	9308      	str	r3, [sp, #32]
 8015ad0:	e777      	b.n	80159c2 <_svfprintf_r+0x68a>
 8015ad2:	9b08      	ldr	r3, [sp, #32]
 8015ad4:	930c      	str	r3, [sp, #48]	; 0x30
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	e7f9      	b.n	8015ace <_svfprintf_r+0x796>
 8015ada:	930d      	str	r3, [sp, #52]	; 0x34
 8015adc:	2300      	movs	r3, #0
 8015ade:	e77f      	b.n	80159e0 <_svfprintf_r+0x6a8>
 8015ae0:	2030      	movs	r0, #48	; 0x30
 8015ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ae4:	932a      	str	r3, [sp, #168]	; 0xa8
 8015ae6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ae8:	7bda      	ldrb	r2, [r3, #15]
 8015aea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015aec:	3b01      	subs	r3, #1
 8015aee:	932a      	str	r3, [sp, #168]	; 0xa8
 8015af0:	7819      	ldrb	r1, [r3, #0]
 8015af2:	4291      	cmp	r1, r2
 8015af4:	d07d      	beq.n	8015bf2 <_svfprintf_r+0x8ba>
 8015af6:	1c4a      	adds	r2, r1, #1
 8015af8:	b2d2      	uxtb	r2, r2
 8015afa:	2939      	cmp	r1, #57	; 0x39
 8015afc:	d101      	bne.n	8015b02 <_svfprintf_r+0x7ca>
 8015afe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015b00:	7a92      	ldrb	r2, [r2, #10]
 8015b02:	701a      	strb	r2, [r3, #0]
 8015b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b08:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8015b0a:	1a9b      	subs	r3, r3, r2
 8015b0c:	930d      	str	r3, [sp, #52]	; 0x34
 8015b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b10:	2b47      	cmp	r3, #71	; 0x47
 8015b12:	d000      	beq.n	8015b16 <_svfprintf_r+0x7de>
 8015b14:	e0d2      	b.n	8015cbc <_svfprintf_r+0x984>
 8015b16:	1ceb      	adds	r3, r5, #3
 8015b18:	db03      	blt.n	8015b22 <_svfprintf_r+0x7ea>
 8015b1a:	9b08      	ldr	r3, [sp, #32]
 8015b1c:	42ab      	cmp	r3, r5
 8015b1e:	db00      	blt.n	8015b22 <_svfprintf_r+0x7ea>
 8015b20:	e0fd      	b.n	8015d1e <_svfprintf_r+0x9e6>
 8015b22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b24:	3b02      	subs	r3, #2
 8015b26:	930e      	str	r3, [sp, #56]	; 0x38
 8015b28:	2238      	movs	r2, #56	; 0x38
 8015b2a:	466b      	mov	r3, sp
 8015b2c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015b2e:	189b      	adds	r3, r3, r2
 8015b30:	3a18      	subs	r2, #24
 8015b32:	4391      	bics	r1, r2
 8015b34:	1e6c      	subs	r4, r5, #1
 8015b36:	000a      	movs	r2, r1
 8015b38:	9426      	str	r4, [sp, #152]	; 0x98
 8015b3a:	781b      	ldrb	r3, [r3, #0]
 8015b3c:	2100      	movs	r1, #0
 8015b3e:	2a41      	cmp	r2, #65	; 0x41
 8015b40:	d102      	bne.n	8015b48 <_svfprintf_r+0x810>
 8015b42:	330f      	adds	r3, #15
 8015b44:	b2db      	uxtb	r3, r3
 8015b46:	3101      	adds	r1, #1
 8015b48:	aa28      	add	r2, sp, #160	; 0xa0
 8015b4a:	7013      	strb	r3, [r2, #0]
 8015b4c:	232b      	movs	r3, #43	; 0x2b
 8015b4e:	2c00      	cmp	r4, #0
 8015b50:	da02      	bge.n	8015b58 <_svfprintf_r+0x820>
 8015b52:	2401      	movs	r4, #1
 8015b54:	232d      	movs	r3, #45	; 0x2d
 8015b56:	1b64      	subs	r4, r4, r5
 8015b58:	7053      	strb	r3, [r2, #1]
 8015b5a:	2c09      	cmp	r4, #9
 8015b5c:	dc00      	bgt.n	8015b60 <_svfprintf_r+0x828>
 8015b5e:	e0c7      	b.n	8015cf0 <_svfprintf_r+0x9b8>
 8015b60:	2537      	movs	r5, #55	; 0x37
 8015b62:	ab1e      	add	r3, sp, #120	; 0x78
 8015b64:	18ed      	adds	r5, r5, r3
 8015b66:	1e6b      	subs	r3, r5, #1
 8015b68:	0020      	movs	r0, r4
 8015b6a:	210a      	movs	r1, #10
 8015b6c:	9308      	str	r3, [sp, #32]
 8015b6e:	f7ea fc5f 	bl	8000430 <__aeabi_idivmod>
 8015b72:	1e6b      	subs	r3, r5, #1
 8015b74:	3130      	adds	r1, #48	; 0x30
 8015b76:	7019      	strb	r1, [r3, #0]
 8015b78:	0020      	movs	r0, r4
 8015b7a:	210a      	movs	r1, #10
 8015b7c:	f7ea fb72 	bl	8000264 <__divsi3>
 8015b80:	0004      	movs	r4, r0
 8015b82:	2809      	cmp	r0, #9
 8015b84:	dd00      	ble.n	8015b88 <_svfprintf_r+0x850>
 8015b86:	e0ac      	b.n	8015ce2 <_svfprintf_r+0x9aa>
 8015b88:	232a      	movs	r3, #42	; 0x2a
 8015b8a:	2137      	movs	r1, #55	; 0x37
 8015b8c:	aa1e      	add	r2, sp, #120	; 0x78
 8015b8e:	3d02      	subs	r5, #2
 8015b90:	3430      	adds	r4, #48	; 0x30
 8015b92:	702c      	strb	r4, [r5, #0]
 8015b94:	189b      	adds	r3, r3, r2
 8015b96:	1889      	adds	r1, r1, r2
 8015b98:	001a      	movs	r2, r3
 8015b9a:	428d      	cmp	r5, r1
 8015b9c:	d200      	bcs.n	8015ba0 <_svfprintf_r+0x868>
 8015b9e:	e0a2      	b.n	8015ce6 <_svfprintf_r+0x9ae>
 8015ba0:	ab28      	add	r3, sp, #160	; 0xa0
 8015ba2:	1ad3      	subs	r3, r2, r3
 8015ba4:	931d      	str	r3, [sp, #116]	; 0x74
 8015ba6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015baa:	4694      	mov	ip, r2
 8015bac:	4463      	add	r3, ip
 8015bae:	9308      	str	r3, [sp, #32]
 8015bb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015bb2:	2b01      	cmp	r3, #1
 8015bb4:	dc01      	bgt.n	8015bba <_svfprintf_r+0x882>
 8015bb6:	07f3      	lsls	r3, r6, #31
 8015bb8:	d504      	bpl.n	8015bc4 <_svfprintf_r+0x88c>
 8015bba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015bbc:	9b08      	ldr	r3, [sp, #32]
 8015bbe:	4694      	mov	ip, r2
 8015bc0:	4463      	add	r3, ip
 8015bc2:	9308      	str	r3, [sp, #32]
 8015bc4:	2280      	movs	r2, #128	; 0x80
 8015bc6:	4b1a      	ldr	r3, [pc, #104]	; (8015c30 <_svfprintf_r+0x8f8>)
 8015bc8:	0052      	lsls	r2, r2, #1
 8015bca:	4033      	ands	r3, r6
 8015bcc:	431a      	orrs	r2, r3
 8015bce:	2300      	movs	r3, #0
 8015bd0:	001d      	movs	r5, r3
 8015bd2:	9220      	str	r2, [sp, #128]	; 0x80
 8015bd4:	9310      	str	r3, [sp, #64]	; 0x40
 8015bd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8015bd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d100      	bne.n	8015be0 <_svfprintf_r+0x8a8>
 8015bde:	e270      	b.n	80160c2 <_svfprintf_r+0xd8a>
 8015be0:	231b      	movs	r3, #27
 8015be2:	aa1e      	add	r2, sp, #120	; 0x78
 8015be4:	189b      	adds	r3, r3, r2
 8015be6:	222d      	movs	r2, #45	; 0x2d
 8015be8:	701a      	strb	r2, [r3, #0]
 8015bea:	2300      	movs	r3, #0
 8015bec:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015bee:	9317      	str	r3, [sp, #92]	; 0x5c
 8015bf0:	e539      	b.n	8015666 <_svfprintf_r+0x32e>
 8015bf2:	7018      	strb	r0, [r3, #0]
 8015bf4:	e779      	b.n	8015aea <_svfprintf_r+0x7b2>
 8015bf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015bf8:	2b46      	cmp	r3, #70	; 0x46
 8015bfa:	d01b      	beq.n	8015c34 <_svfprintf_r+0x8fc>
 8015bfc:	9d08      	ldr	r5, [sp, #32]
 8015bfe:	2b45      	cmp	r3, #69	; 0x45
 8015c00:	d101      	bne.n	8015c06 <_svfprintf_r+0x8ce>
 8015c02:	9b08      	ldr	r3, [sp, #32]
 8015c04:	1c5d      	adds	r5, r3, #1
 8015c06:	2302      	movs	r3, #2
 8015c08:	e016      	b.n	8015c38 <_svfprintf_r+0x900>
 8015c0a:	46c0      	nop			; (mov r8, r8)
 8015c0c:	7fefffff 	.word	0x7fefffff
 8015c10:	0801bfc4 	.word	0x0801bfc4
 8015c14:	0801bfc0 	.word	0x0801bfc0
 8015c18:	0801bfcc 	.word	0x0801bfcc
 8015c1c:	0801bfc8 	.word	0x0801bfc8
 8015c20:	0801bfe1 	.word	0x0801bfe1
 8015c24:	0801bfd0 	.word	0x0801bfd0
 8015c28:	40300000 	.word	0x40300000
 8015c2c:	3fe00000 	.word	0x3fe00000
 8015c30:	fffffbff 	.word	0xfffffbff
 8015c34:	2303      	movs	r3, #3
 8015c36:	9d08      	ldr	r5, [sp, #32]
 8015c38:	aa2a      	add	r2, sp, #168	; 0xa8
 8015c3a:	9204      	str	r2, [sp, #16]
 8015c3c:	aa27      	add	r2, sp, #156	; 0x9c
 8015c3e:	9203      	str	r2, [sp, #12]
 8015c40:	aa26      	add	r2, sp, #152	; 0x98
 8015c42:	9202      	str	r2, [sp, #8]
 8015c44:	9300      	str	r3, [sp, #0]
 8015c46:	9501      	str	r5, [sp, #4]
 8015c48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c4a:	0022      	movs	r2, r4
 8015c4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c4e:	f000 fe79 	bl	8016944 <_dtoa_r>
 8015c52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c54:	9009      	str	r0, [sp, #36]	; 0x24
 8015c56:	2b47      	cmp	r3, #71	; 0x47
 8015c58:	d101      	bne.n	8015c5e <_svfprintf_r+0x926>
 8015c5a:	07f3      	lsls	r3, r6, #31
 8015c5c:	d524      	bpl.n	8015ca8 <_svfprintf_r+0x970>
 8015c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c60:	195b      	adds	r3, r3, r5
 8015c62:	9310      	str	r3, [sp, #64]	; 0x40
 8015c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c66:	2b46      	cmp	r3, #70	; 0x46
 8015c68:	d113      	bne.n	8015c92 <_svfprintf_r+0x95a>
 8015c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c6c:	781b      	ldrb	r3, [r3, #0]
 8015c6e:	2b30      	cmp	r3, #48	; 0x30
 8015c70:	d10a      	bne.n	8015c88 <_svfprintf_r+0x950>
 8015c72:	2200      	movs	r2, #0
 8015c74:	2300      	movs	r3, #0
 8015c76:	0020      	movs	r0, r4
 8015c78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015c7a:	f7ea fbef 	bl	800045c <__aeabi_dcmpeq>
 8015c7e:	2800      	cmp	r0, #0
 8015c80:	d102      	bne.n	8015c88 <_svfprintf_r+0x950>
 8015c82:	2301      	movs	r3, #1
 8015c84:	1b5d      	subs	r5, r3, r5
 8015c86:	9526      	str	r5, [sp, #152]	; 0x98
 8015c88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015c8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c8c:	4694      	mov	ip, r2
 8015c8e:	4463      	add	r3, ip
 8015c90:	9310      	str	r3, [sp, #64]	; 0x40
 8015c92:	2200      	movs	r2, #0
 8015c94:	2300      	movs	r3, #0
 8015c96:	0020      	movs	r0, r4
 8015c98:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015c9a:	f7ea fbdf 	bl	800045c <__aeabi_dcmpeq>
 8015c9e:	2230      	movs	r2, #48	; 0x30
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	d006      	beq.n	8015cb2 <_svfprintf_r+0x97a>
 8015ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ca6:	932a      	str	r3, [sp, #168]	; 0xa8
 8015ca8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015caa:	e72c      	b.n	8015b06 <_svfprintf_r+0x7ce>
 8015cac:	1c59      	adds	r1, r3, #1
 8015cae:	912a      	str	r1, [sp, #168]	; 0xa8
 8015cb0:	701a      	strb	r2, [r3, #0]
 8015cb2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015cb4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015cb6:	4299      	cmp	r1, r3
 8015cb8:	d8f8      	bhi.n	8015cac <_svfprintf_r+0x974>
 8015cba:	e7f5      	b.n	8015ca8 <_svfprintf_r+0x970>
 8015cbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cbe:	2b46      	cmp	r3, #70	; 0x46
 8015cc0:	d000      	beq.n	8015cc4 <_svfprintf_r+0x98c>
 8015cc2:	e731      	b.n	8015b28 <_svfprintf_r+0x7f0>
 8015cc4:	9b08      	ldr	r3, [sp, #32]
 8015cc6:	2d00      	cmp	r5, #0
 8015cc8:	dd21      	ble.n	8015d0e <_svfprintf_r+0x9d6>
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d101      	bne.n	8015cd2 <_svfprintf_r+0x99a>
 8015cce:	07f3      	lsls	r3, r6, #31
 8015cd0:	d54a      	bpl.n	8015d68 <_svfprintf_r+0xa30>
 8015cd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015cd4:	18eb      	adds	r3, r5, r3
 8015cd6:	9a08      	ldr	r2, [sp, #32]
 8015cd8:	18d3      	adds	r3, r2, r3
 8015cda:	9308      	str	r3, [sp, #32]
 8015cdc:	2366      	movs	r3, #102	; 0x66
 8015cde:	930e      	str	r3, [sp, #56]	; 0x38
 8015ce0:	e034      	b.n	8015d4c <_svfprintf_r+0xa14>
 8015ce2:	9d08      	ldr	r5, [sp, #32]
 8015ce4:	e73f      	b.n	8015b66 <_svfprintf_r+0x82e>
 8015ce6:	782a      	ldrb	r2, [r5, #0]
 8015ce8:	3501      	adds	r5, #1
 8015cea:	701a      	strb	r2, [r3, #0]
 8015cec:	3301      	adds	r3, #1
 8015cee:	e753      	b.n	8015b98 <_svfprintf_r+0x860>
 8015cf0:	232a      	movs	r3, #42	; 0x2a
 8015cf2:	aa1e      	add	r2, sp, #120	; 0x78
 8015cf4:	189b      	adds	r3, r3, r2
 8015cf6:	2900      	cmp	r1, #0
 8015cf8:	d105      	bne.n	8015d06 <_svfprintf_r+0x9ce>
 8015cfa:	2230      	movs	r2, #48	; 0x30
 8015cfc:	ab28      	add	r3, sp, #160	; 0xa0
 8015cfe:	709a      	strb	r2, [r3, #2]
 8015d00:	232b      	movs	r3, #43	; 0x2b
 8015d02:	aa1e      	add	r2, sp, #120	; 0x78
 8015d04:	189b      	adds	r3, r3, r2
 8015d06:	3430      	adds	r4, #48	; 0x30
 8015d08:	1c5a      	adds	r2, r3, #1
 8015d0a:	701c      	strb	r4, [r3, #0]
 8015d0c:	e748      	b.n	8015ba0 <_svfprintf_r+0x868>
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d102      	bne.n	8015d18 <_svfprintf_r+0x9e0>
 8015d12:	3301      	adds	r3, #1
 8015d14:	421e      	tst	r6, r3
 8015d16:	d029      	beq.n	8015d6c <_svfprintf_r+0xa34>
 8015d18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d1a:	3301      	adds	r3, #1
 8015d1c:	e7db      	b.n	8015cd6 <_svfprintf_r+0x99e>
 8015d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d20:	42ab      	cmp	r3, r5
 8015d22:	dc06      	bgt.n	8015d32 <_svfprintf_r+0x9fa>
 8015d24:	07f3      	lsls	r3, r6, #31
 8015d26:	d524      	bpl.n	8015d72 <_svfprintf_r+0xa3a>
 8015d28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d2a:	18eb      	adds	r3, r5, r3
 8015d2c:	9308      	str	r3, [sp, #32]
 8015d2e:	2367      	movs	r3, #103	; 0x67
 8015d30:	e7d5      	b.n	8015cde <_svfprintf_r+0x9a6>
 8015d32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d36:	4694      	mov	ip, r2
 8015d38:	4463      	add	r3, ip
 8015d3a:	9308      	str	r3, [sp, #32]
 8015d3c:	2367      	movs	r3, #103	; 0x67
 8015d3e:	930e      	str	r3, [sp, #56]	; 0x38
 8015d40:	2d00      	cmp	r5, #0
 8015d42:	dc03      	bgt.n	8015d4c <_svfprintf_r+0xa14>
 8015d44:	9b08      	ldr	r3, [sp, #32]
 8015d46:	1b5b      	subs	r3, r3, r5
 8015d48:	3301      	adds	r3, #1
 8015d4a:	9308      	str	r3, [sp, #32]
 8015d4c:	2380      	movs	r3, #128	; 0x80
 8015d4e:	00db      	lsls	r3, r3, #3
 8015d50:	401e      	ands	r6, r3
 8015d52:	2300      	movs	r3, #0
 8015d54:	960f      	str	r6, [sp, #60]	; 0x3c
 8015d56:	9310      	str	r3, [sp, #64]	; 0x40
 8015d58:	2e00      	cmp	r6, #0
 8015d5a:	d100      	bne.n	8015d5e <_svfprintf_r+0xa26>
 8015d5c:	e73c      	b.n	8015bd8 <_svfprintf_r+0x8a0>
 8015d5e:	2d00      	cmp	r5, #0
 8015d60:	dc27      	bgt.n	8015db2 <_svfprintf_r+0xa7a>
 8015d62:	2300      	movs	r3, #0
 8015d64:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d66:	e737      	b.n	8015bd8 <_svfprintf_r+0x8a0>
 8015d68:	9508      	str	r5, [sp, #32]
 8015d6a:	e7b7      	b.n	8015cdc <_svfprintf_r+0x9a4>
 8015d6c:	2266      	movs	r2, #102	; 0x66
 8015d6e:	920e      	str	r2, [sp, #56]	; 0x38
 8015d70:	e7eb      	b.n	8015d4a <_svfprintf_r+0xa12>
 8015d72:	9508      	str	r5, [sp, #32]
 8015d74:	e7db      	b.n	8015d2e <_svfprintf_r+0x9f6>
 8015d76:	42ab      	cmp	r3, r5
 8015d78:	da0e      	bge.n	8015d98 <_svfprintf_r+0xa60>
 8015d7a:	1aed      	subs	r5, r5, r3
 8015d7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015d7e:	785b      	ldrb	r3, [r3, #1]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d012      	beq.n	8015daa <_svfprintf_r+0xa72>
 8015d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d86:	3301      	adds	r3, #1
 8015d88:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015d90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015d92:	781b      	ldrb	r3, [r3, #0]
 8015d94:	2bff      	cmp	r3, #255	; 0xff
 8015d96:	d1ee      	bne.n	8015d76 <_svfprintf_r+0xa3e>
 8015d98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015d9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d9c:	189b      	adds	r3, r3, r2
 8015d9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015da0:	4353      	muls	r3, r2
 8015da2:	9a08      	ldr	r2, [sp, #32]
 8015da4:	189b      	adds	r3, r3, r2
 8015da6:	9308      	str	r3, [sp, #32]
 8015da8:	e716      	b.n	8015bd8 <_svfprintf_r+0x8a0>
 8015daa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015dac:	3301      	adds	r3, #1
 8015dae:	9310      	str	r3, [sp, #64]	; 0x40
 8015db0:	e7ee      	b.n	8015d90 <_svfprintf_r+0xa58>
 8015db2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015db4:	930f      	str	r3, [sp, #60]	; 0x3c
 8015db6:	e7eb      	b.n	8015d90 <_svfprintf_r+0xa58>
 8015db8:	0022      	movs	r2, r4
 8015dba:	ca08      	ldmia	r2!, {r3}
 8015dbc:	9212      	str	r2, [sp, #72]	; 0x48
 8015dbe:	06b2      	lsls	r2, r6, #26
 8015dc0:	d508      	bpl.n	8015dd4 <_svfprintf_r+0xa9c>
 8015dc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015dc4:	601a      	str	r2, [r3, #0]
 8015dc6:	17d2      	asrs	r2, r2, #31
 8015dc8:	605a      	str	r2, [r3, #4]
 8015dca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015dcc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015dce:	9309      	str	r3, [sp, #36]	; 0x24
 8015dd0:	f7ff faeb 	bl	80153aa <_svfprintf_r+0x72>
 8015dd4:	06f2      	lsls	r2, r6, #27
 8015dd6:	d502      	bpl.n	8015dde <_svfprintf_r+0xaa6>
 8015dd8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015dda:	601a      	str	r2, [r3, #0]
 8015ddc:	e7f5      	b.n	8015dca <_svfprintf_r+0xa92>
 8015dde:	0672      	lsls	r2, r6, #25
 8015de0:	d502      	bpl.n	8015de8 <_svfprintf_r+0xab0>
 8015de2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015de4:	801a      	strh	r2, [r3, #0]
 8015de6:	e7f0      	b.n	8015dca <_svfprintf_r+0xa92>
 8015de8:	05b2      	lsls	r2, r6, #22
 8015dea:	d5f5      	bpl.n	8015dd8 <_svfprintf_r+0xaa0>
 8015dec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015dee:	701a      	strb	r2, [r3, #0]
 8015df0:	e7eb      	b.n	8015dca <_svfprintf_r+0xa92>
 8015df2:	2310      	movs	r3, #16
 8015df4:	431e      	orrs	r6, r3
 8015df6:	2220      	movs	r2, #32
 8015df8:	4032      	ands	r2, r6
 8015dfa:	d025      	beq.n	8015e48 <_svfprintf_r+0xb10>
 8015dfc:	2307      	movs	r3, #7
 8015dfe:	3407      	adds	r4, #7
 8015e00:	439c      	bics	r4, r3
 8015e02:	0023      	movs	r3, r4
 8015e04:	3308      	adds	r3, #8
 8015e06:	9312      	str	r3, [sp, #72]	; 0x48
 8015e08:	6823      	ldr	r3, [r4, #0]
 8015e0a:	6864      	ldr	r4, [r4, #4]
 8015e0c:	9306      	str	r3, [sp, #24]
 8015e0e:	9407      	str	r4, [sp, #28]
 8015e10:	4bc2      	ldr	r3, [pc, #776]	; (801611c <_svfprintf_r+0xde4>)
 8015e12:	401e      	ands	r6, r3
 8015e14:	2300      	movs	r3, #0
 8015e16:	221b      	movs	r2, #27
 8015e18:	a91e      	add	r1, sp, #120	; 0x78
 8015e1a:	1852      	adds	r2, r2, r1
 8015e1c:	2100      	movs	r1, #0
 8015e1e:	7011      	strb	r1, [r2, #0]
 8015e20:	9a08      	ldr	r2, [sp, #32]
 8015e22:	3201      	adds	r2, #1
 8015e24:	d100      	bne.n	8015e28 <_svfprintf_r+0xaf0>
 8015e26:	e0a6      	b.n	8015f76 <_svfprintf_r+0xc3e>
 8015e28:	0032      	movs	r2, r6
 8015e2a:	2180      	movs	r1, #128	; 0x80
 8015e2c:	9807      	ldr	r0, [sp, #28]
 8015e2e:	438e      	bics	r6, r1
 8015e30:	9906      	ldr	r1, [sp, #24]
 8015e32:	4301      	orrs	r1, r0
 8015e34:	d000      	beq.n	8015e38 <_svfprintf_r+0xb00>
 8015e36:	e09e      	b.n	8015f76 <_svfprintf_r+0xc3e>
 8015e38:	9908      	ldr	r1, [sp, #32]
 8015e3a:	2900      	cmp	r1, #0
 8015e3c:	d100      	bne.n	8015e40 <_svfprintf_r+0xb08>
 8015e3e:	e125      	b.n	801608c <_svfprintf_r+0xd54>
 8015e40:	2b01      	cmp	r3, #1
 8015e42:	d000      	beq.n	8015e46 <_svfprintf_r+0xb0e>
 8015e44:	e09a      	b.n	8015f7c <_svfprintf_r+0xc44>
 8015e46:	e518      	b.n	801587a <_svfprintf_r+0x542>
 8015e48:	1d23      	adds	r3, r4, #4
 8015e4a:	9312      	str	r3, [sp, #72]	; 0x48
 8015e4c:	2310      	movs	r3, #16
 8015e4e:	4033      	ands	r3, r6
 8015e50:	d003      	beq.n	8015e5a <_svfprintf_r+0xb22>
 8015e52:	6823      	ldr	r3, [r4, #0]
 8015e54:	9306      	str	r3, [sp, #24]
 8015e56:	9207      	str	r2, [sp, #28]
 8015e58:	e7da      	b.n	8015e10 <_svfprintf_r+0xad8>
 8015e5a:	2240      	movs	r2, #64	; 0x40
 8015e5c:	4032      	ands	r2, r6
 8015e5e:	d004      	beq.n	8015e6a <_svfprintf_r+0xb32>
 8015e60:	6822      	ldr	r2, [r4, #0]
 8015e62:	b292      	uxth	r2, r2
 8015e64:	9206      	str	r2, [sp, #24]
 8015e66:	9307      	str	r3, [sp, #28]
 8015e68:	e7d2      	b.n	8015e10 <_svfprintf_r+0xad8>
 8015e6a:	2380      	movs	r3, #128	; 0x80
 8015e6c:	009b      	lsls	r3, r3, #2
 8015e6e:	4033      	ands	r3, r6
 8015e70:	d002      	beq.n	8015e78 <_svfprintf_r+0xb40>
 8015e72:	6823      	ldr	r3, [r4, #0]
 8015e74:	b2db      	uxtb	r3, r3
 8015e76:	e7ed      	b.n	8015e54 <_svfprintf_r+0xb1c>
 8015e78:	6822      	ldr	r2, [r4, #0]
 8015e7a:	e7f3      	b.n	8015e64 <_svfprintf_r+0xb2c>
 8015e7c:	1d23      	adds	r3, r4, #4
 8015e7e:	49a8      	ldr	r1, [pc, #672]	; (8016120 <_svfprintf_r+0xde8>)
 8015e80:	aa25      	add	r2, sp, #148	; 0x94
 8015e82:	9312      	str	r3, [sp, #72]	; 0x48
 8015e84:	6823      	ldr	r3, [r4, #0]
 8015e86:	8011      	strh	r1, [r2, #0]
 8015e88:	4aa6      	ldr	r2, [pc, #664]	; (8016124 <_svfprintf_r+0xdec>)
 8015e8a:	9306      	str	r3, [sp, #24]
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	921e      	str	r2, [sp, #120]	; 0x78
 8015e90:	2278      	movs	r2, #120	; 0x78
 8015e92:	9307      	str	r3, [sp, #28]
 8015e94:	3302      	adds	r3, #2
 8015e96:	431e      	orrs	r6, r3
 8015e98:	920e      	str	r2, [sp, #56]	; 0x38
 8015e9a:	e7bc      	b.n	8015e16 <_svfprintf_r+0xade>
 8015e9c:	1d23      	adds	r3, r4, #4
 8015e9e:	9312      	str	r3, [sp, #72]	; 0x48
 8015ea0:	6823      	ldr	r3, [r4, #0]
 8015ea2:	2400      	movs	r4, #0
 8015ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8015ea6:	231b      	movs	r3, #27
 8015ea8:	aa1e      	add	r2, sp, #120	; 0x78
 8015eaa:	189b      	adds	r3, r3, r2
 8015eac:	701c      	strb	r4, [r3, #0]
 8015eae:	9b08      	ldr	r3, [sp, #32]
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	d00e      	beq.n	8015ed2 <_svfprintf_r+0xb9a>
 8015eb4:	9a08      	ldr	r2, [sp, #32]
 8015eb6:	0021      	movs	r1, r4
 8015eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015eba:	f001 ff79 	bl	8017db0 <memchr>
 8015ebe:	900c      	str	r0, [sp, #48]	; 0x30
 8015ec0:	42a0      	cmp	r0, r4
 8015ec2:	d100      	bne.n	8015ec6 <_svfprintf_r+0xb8e>
 8015ec4:	e100      	b.n	80160c8 <_svfprintf_r+0xd90>
 8015ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ec8:	1a83      	subs	r3, r0, r2
 8015eca:	9308      	str	r3, [sp, #32]
 8015ecc:	940c      	str	r4, [sp, #48]	; 0x30
 8015ece:	0023      	movs	r3, r4
 8015ed0:	e527      	b.n	8015922 <_svfprintf_r+0x5ea>
 8015ed2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015ed4:	f7ea f920 	bl	8000118 <strlen>
 8015ed8:	9008      	str	r0, [sp, #32]
 8015eda:	e7f7      	b.n	8015ecc <_svfprintf_r+0xb94>
 8015edc:	2310      	movs	r3, #16
 8015ede:	431e      	orrs	r6, r3
 8015ee0:	2220      	movs	r2, #32
 8015ee2:	4032      	ands	r2, r6
 8015ee4:	d00b      	beq.n	8015efe <_svfprintf_r+0xbc6>
 8015ee6:	2307      	movs	r3, #7
 8015ee8:	3407      	adds	r4, #7
 8015eea:	439c      	bics	r4, r3
 8015eec:	0023      	movs	r3, r4
 8015eee:	3308      	adds	r3, #8
 8015ef0:	9312      	str	r3, [sp, #72]	; 0x48
 8015ef2:	6823      	ldr	r3, [r4, #0]
 8015ef4:	6864      	ldr	r4, [r4, #4]
 8015ef6:	9306      	str	r3, [sp, #24]
 8015ef8:	9407      	str	r4, [sp, #28]
 8015efa:	2301      	movs	r3, #1
 8015efc:	e78b      	b.n	8015e16 <_svfprintf_r+0xade>
 8015efe:	1d23      	adds	r3, r4, #4
 8015f00:	9312      	str	r3, [sp, #72]	; 0x48
 8015f02:	2310      	movs	r3, #16
 8015f04:	4033      	ands	r3, r6
 8015f06:	d003      	beq.n	8015f10 <_svfprintf_r+0xbd8>
 8015f08:	6823      	ldr	r3, [r4, #0]
 8015f0a:	9306      	str	r3, [sp, #24]
 8015f0c:	9207      	str	r2, [sp, #28]
 8015f0e:	e7f4      	b.n	8015efa <_svfprintf_r+0xbc2>
 8015f10:	2240      	movs	r2, #64	; 0x40
 8015f12:	4032      	ands	r2, r6
 8015f14:	d004      	beq.n	8015f20 <_svfprintf_r+0xbe8>
 8015f16:	6822      	ldr	r2, [r4, #0]
 8015f18:	b292      	uxth	r2, r2
 8015f1a:	9206      	str	r2, [sp, #24]
 8015f1c:	9307      	str	r3, [sp, #28]
 8015f1e:	e7ec      	b.n	8015efa <_svfprintf_r+0xbc2>
 8015f20:	2380      	movs	r3, #128	; 0x80
 8015f22:	009b      	lsls	r3, r3, #2
 8015f24:	4033      	ands	r3, r6
 8015f26:	d002      	beq.n	8015f2e <_svfprintf_r+0xbf6>
 8015f28:	6823      	ldr	r3, [r4, #0]
 8015f2a:	b2db      	uxtb	r3, r3
 8015f2c:	e7ed      	b.n	8015f0a <_svfprintf_r+0xbd2>
 8015f2e:	6822      	ldr	r2, [r4, #0]
 8015f30:	e7f3      	b.n	8015f1a <_svfprintf_r+0xbe2>
 8015f32:	4b7c      	ldr	r3, [pc, #496]	; (8016124 <_svfprintf_r+0xdec>)
 8015f34:	f7ff fad9 	bl	80154ea <_svfprintf_r+0x1b2>
 8015f38:	1d23      	adds	r3, r4, #4
 8015f3a:	9312      	str	r3, [sp, #72]	; 0x48
 8015f3c:	2310      	movs	r3, #16
 8015f3e:	4033      	ands	r3, r6
 8015f40:	d004      	beq.n	8015f4c <_svfprintf_r+0xc14>
 8015f42:	6823      	ldr	r3, [r4, #0]
 8015f44:	9306      	str	r3, [sp, #24]
 8015f46:	9207      	str	r2, [sp, #28]
 8015f48:	f7ff fadf 	bl	801550a <_svfprintf_r+0x1d2>
 8015f4c:	2240      	movs	r2, #64	; 0x40
 8015f4e:	4032      	ands	r2, r6
 8015f50:	d005      	beq.n	8015f5e <_svfprintf_r+0xc26>
 8015f52:	6822      	ldr	r2, [r4, #0]
 8015f54:	b292      	uxth	r2, r2
 8015f56:	9206      	str	r2, [sp, #24]
 8015f58:	9307      	str	r3, [sp, #28]
 8015f5a:	f7ff fad6 	bl	801550a <_svfprintf_r+0x1d2>
 8015f5e:	2380      	movs	r3, #128	; 0x80
 8015f60:	009b      	lsls	r3, r3, #2
 8015f62:	4033      	ands	r3, r6
 8015f64:	d002      	beq.n	8015f6c <_svfprintf_r+0xc34>
 8015f66:	6823      	ldr	r3, [r4, #0]
 8015f68:	b2db      	uxtb	r3, r3
 8015f6a:	e7eb      	b.n	8015f44 <_svfprintf_r+0xc0c>
 8015f6c:	6822      	ldr	r2, [r4, #0]
 8015f6e:	e7f2      	b.n	8015f56 <_svfprintf_r+0xc1e>
 8015f70:	0032      	movs	r2, r6
 8015f72:	2301      	movs	r3, #1
 8015f74:	e759      	b.n	8015e2a <_svfprintf_r+0xaf2>
 8015f76:	2b01      	cmp	r3, #1
 8015f78:	d100      	bne.n	8015f7c <_svfprintf_r+0xc44>
 8015f7a:	e476      	b.n	801586a <_svfprintf_r+0x532>
 8015f7c:	2b02      	cmp	r3, #2
 8015f7e:	d06b      	beq.n	8016058 <_svfprintf_r+0xd20>
 8015f80:	2507      	movs	r5, #7
 8015f82:	ab58      	add	r3, sp, #352	; 0x160
 8015f84:	1e5a      	subs	r2, r3, #1
 8015f86:	9209      	str	r2, [sp, #36]	; 0x24
 8015f88:	9a06      	ldr	r2, [sp, #24]
 8015f8a:	1e59      	subs	r1, r3, #1
 8015f8c:	402a      	ands	r2, r5
 8015f8e:	3230      	adds	r2, #48	; 0x30
 8015f90:	700a      	strb	r2, [r1, #0]
 8015f92:	9907      	ldr	r1, [sp, #28]
 8015f94:	074c      	lsls	r4, r1, #29
 8015f96:	9906      	ldr	r1, [sp, #24]
 8015f98:	08c8      	lsrs	r0, r1, #3
 8015f9a:	9907      	ldr	r1, [sp, #28]
 8015f9c:	4304      	orrs	r4, r0
 8015f9e:	08c9      	lsrs	r1, r1, #3
 8015fa0:	9107      	str	r1, [sp, #28]
 8015fa2:	0021      	movs	r1, r4
 8015fa4:	9807      	ldr	r0, [sp, #28]
 8015fa6:	9406      	str	r4, [sp, #24]
 8015fa8:	4301      	orrs	r1, r0
 8015faa:	d111      	bne.n	8015fd0 <_svfprintf_r+0xc98>
 8015fac:	07f1      	lsls	r1, r6, #31
 8015fae:	d502      	bpl.n	8015fb6 <_svfprintf_r+0xc7e>
 8015fb0:	3b02      	subs	r3, #2
 8015fb2:	2a30      	cmp	r2, #48	; 0x30
 8015fb4:	d173      	bne.n	801609e <_svfprintf_r+0xd66>
 8015fb6:	9b08      	ldr	r3, [sp, #32]
 8015fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fba:	9317      	str	r3, [sp, #92]	; 0x5c
 8015fbc:	ab58      	add	r3, sp, #352	; 0x160
 8015fbe:	1a9b      	subs	r3, r3, r2
 8015fc0:	9308      	str	r3, [sp, #32]
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	930c      	str	r3, [sp, #48]	; 0x30
 8015fc6:	9310      	str	r3, [sp, #64]	; 0x40
 8015fc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8015fca:	001d      	movs	r5, r3
 8015fcc:	f7ff fb4b 	bl	8015666 <_svfprintf_r+0x32e>
 8015fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fd2:	e7d7      	b.n	8015f84 <_svfprintf_r+0xc4c>
 8015fd4:	2480      	movs	r4, #128	; 0x80
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	00e4      	lsls	r4, r4, #3
 8015fda:	930d      	str	r3, [sp, #52]	; 0x34
 8015fdc:	4034      	ands	r4, r6
 8015fde:	ab58      	add	r3, sp, #352	; 0x160
 8015fe0:	3b01      	subs	r3, #1
 8015fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8015fe4:	220a      	movs	r2, #10
 8015fe6:	9806      	ldr	r0, [sp, #24]
 8015fe8:	9907      	ldr	r1, [sp, #28]
 8015fea:	2300      	movs	r3, #0
 8015fec:	f7ea fa9e 	bl	800052c <__aeabi_uldivmod>
 8015ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ff2:	3230      	adds	r2, #48	; 0x30
 8015ff4:	701a      	strb	r2, [r3, #0]
 8015ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ff8:	3301      	adds	r3, #1
 8015ffa:	930d      	str	r3, [sp, #52]	; 0x34
 8015ffc:	2c00      	cmp	r4, #0
 8015ffe:	d01d      	beq.n	801603c <_svfprintf_r+0xd04>
 8016000:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016002:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016004:	781b      	ldrb	r3, [r3, #0]
 8016006:	429a      	cmp	r2, r3
 8016008:	d118      	bne.n	801603c <_svfprintf_r+0xd04>
 801600a:	2aff      	cmp	r2, #255	; 0xff
 801600c:	d016      	beq.n	801603c <_svfprintf_r+0xd04>
 801600e:	9b07      	ldr	r3, [sp, #28]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d102      	bne.n	801601a <_svfprintf_r+0xce2>
 8016014:	9b06      	ldr	r3, [sp, #24]
 8016016:	2b09      	cmp	r3, #9
 8016018:	d910      	bls.n	801603c <_svfprintf_r+0xd04>
 801601a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801601c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801601e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8016020:	1a9b      	subs	r3, r3, r2
 8016022:	0018      	movs	r0, r3
 8016024:	9309      	str	r3, [sp, #36]	; 0x24
 8016026:	f7fe fa52 	bl	80144ce <strncpy>
 801602a:	2200      	movs	r2, #0
 801602c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801602e:	920d      	str	r2, [sp, #52]	; 0x34
 8016030:	785b      	ldrb	r3, [r3, #1]
 8016032:	1e5a      	subs	r2, r3, #1
 8016034:	4193      	sbcs	r3, r2
 8016036:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016038:	18d3      	adds	r3, r2, r3
 801603a:	9313      	str	r3, [sp, #76]	; 0x4c
 801603c:	220a      	movs	r2, #10
 801603e:	9806      	ldr	r0, [sp, #24]
 8016040:	9907      	ldr	r1, [sp, #28]
 8016042:	2300      	movs	r3, #0
 8016044:	f7ea fa72 	bl	800052c <__aeabi_uldivmod>
 8016048:	9006      	str	r0, [sp, #24]
 801604a:	9107      	str	r1, [sp, #28]
 801604c:	9b06      	ldr	r3, [sp, #24]
 801604e:	9a07      	ldr	r2, [sp, #28]
 8016050:	4313      	orrs	r3, r2
 8016052:	d0b0      	beq.n	8015fb6 <_svfprintf_r+0xc7e>
 8016054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016056:	e7c3      	b.n	8015fe0 <_svfprintf_r+0xca8>
 8016058:	200f      	movs	r0, #15
 801605a:	ab58      	add	r3, sp, #352	; 0x160
 801605c:	9309      	str	r3, [sp, #36]	; 0x24
 801605e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016060:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016062:	3b01      	subs	r3, #1
 8016064:	9309      	str	r3, [sp, #36]	; 0x24
 8016066:	9b06      	ldr	r3, [sp, #24]
 8016068:	4003      	ands	r3, r0
 801606a:	5cd3      	ldrb	r3, [r2, r3]
 801606c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801606e:	7013      	strb	r3, [r2, #0]
 8016070:	9b07      	ldr	r3, [sp, #28]
 8016072:	0719      	lsls	r1, r3, #28
 8016074:	9b06      	ldr	r3, [sp, #24]
 8016076:	091a      	lsrs	r2, r3, #4
 8016078:	9b07      	ldr	r3, [sp, #28]
 801607a:	4311      	orrs	r1, r2
 801607c:	091b      	lsrs	r3, r3, #4
 801607e:	9307      	str	r3, [sp, #28]
 8016080:	000b      	movs	r3, r1
 8016082:	9a07      	ldr	r2, [sp, #28]
 8016084:	9106      	str	r1, [sp, #24]
 8016086:	4313      	orrs	r3, r2
 8016088:	d1e9      	bne.n	801605e <_svfprintf_r+0xd26>
 801608a:	e794      	b.n	8015fb6 <_svfprintf_r+0xc7e>
 801608c:	a958      	add	r1, sp, #352	; 0x160
 801608e:	9109      	str	r1, [sp, #36]	; 0x24
 8016090:	2b00      	cmp	r3, #0
 8016092:	d190      	bne.n	8015fb6 <_svfprintf_r+0xc7e>
 8016094:	07d3      	lsls	r3, r2, #31
 8016096:	d58e      	bpl.n	8015fb6 <_svfprintf_r+0xc7e>
 8016098:	23e7      	movs	r3, #231	; 0xe7
 801609a:	aa1e      	add	r2, sp, #120	; 0x78
 801609c:	189b      	adds	r3, r3, r2
 801609e:	2230      	movs	r2, #48	; 0x30
 80160a0:	f7ff fbf0 	bl	8015884 <_svfprintf_r+0x54c>
 80160a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d100      	bne.n	80160ac <_svfprintf_r+0xd74>
 80160aa:	e38a      	b.n	80167c2 <_svfprintf_r+0x148a>
 80160ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80160ae:	ab3f      	add	r3, sp, #252	; 0xfc
 80160b0:	701a      	strb	r2, [r3, #0]
 80160b2:	221b      	movs	r2, #27
 80160b4:	2000      	movs	r0, #0
 80160b6:	a91e      	add	r1, sp, #120	; 0x78
 80160b8:	1852      	adds	r2, r2, r1
 80160ba:	7010      	strb	r0, [r2, #0]
 80160bc:	9412      	str	r4, [sp, #72]	; 0x48
 80160be:	f7ff faca 	bl	8015656 <_svfprintf_r+0x31e>
 80160c2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80160c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80160c6:	e592      	b.n	8015bee <_svfprintf_r+0x8b6>
 80160c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160ca:	e42a      	b.n	8015922 <_svfprintf_r+0x5ea>
 80160cc:	2010      	movs	r0, #16
 80160ce:	1812      	adds	r2, r2, r0
 80160d0:	6078      	str	r0, [r7, #4]
 80160d2:	922e      	str	r2, [sp, #184]	; 0xb8
 80160d4:	932d      	str	r3, [sp, #180]	; 0xb4
 80160d6:	2b07      	cmp	r3, #7
 80160d8:	dd08      	ble.n	80160ec <_svfprintf_r+0xdb4>
 80160da:	aa2c      	add	r2, sp, #176	; 0xb0
 80160dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160e0:	f002 fa7e 	bl	80185e0 <__ssprint_r>
 80160e4:	2800      	cmp	r0, #0
 80160e6:	d000      	beq.n	80160ea <_svfprintf_r+0xdb2>
 80160e8:	e34a      	b.n	8016780 <_svfprintf_r+0x1448>
 80160ea:	a92f      	add	r1, sp, #188	; 0xbc
 80160ec:	3c10      	subs	r4, #16
 80160ee:	000f      	movs	r7, r1
 80160f0:	f7ff fad8 	bl	80156a4 <_svfprintf_r+0x36c>
 80160f4:	2010      	movs	r0, #16
 80160f6:	1812      	adds	r2, r2, r0
 80160f8:	6078      	str	r0, [r7, #4]
 80160fa:	922e      	str	r2, [sp, #184]	; 0xb8
 80160fc:	932d      	str	r3, [sp, #180]	; 0xb4
 80160fe:	2b07      	cmp	r3, #7
 8016100:	dd08      	ble.n	8016114 <_svfprintf_r+0xddc>
 8016102:	aa2c      	add	r2, sp, #176	; 0xb0
 8016104:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016106:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016108:	f002 fa6a 	bl	80185e0 <__ssprint_r>
 801610c:	2800      	cmp	r0, #0
 801610e:	d000      	beq.n	8016112 <_svfprintf_r+0xdda>
 8016110:	e336      	b.n	8016780 <_svfprintf_r+0x1448>
 8016112:	a92f      	add	r1, sp, #188	; 0xbc
 8016114:	3c10      	subs	r4, #16
 8016116:	000f      	movs	r7, r1
 8016118:	f7ff fb24 	bl	8015764 <_svfprintf_r+0x42c>
 801611c:	fffffbff 	.word	0xfffffbff
 8016120:	00007830 	.word	0x00007830
 8016124:	0801bfd0 	.word	0x0801bfd0
 8016128:	2010      	movs	r0, #16
 801612a:	1812      	adds	r2, r2, r0
 801612c:	6078      	str	r0, [r7, #4]
 801612e:	922e      	str	r2, [sp, #184]	; 0xb8
 8016130:	932d      	str	r3, [sp, #180]	; 0xb4
 8016132:	2b07      	cmp	r3, #7
 8016134:	dd08      	ble.n	8016148 <_svfprintf_r+0xe10>
 8016136:	aa2c      	add	r2, sp, #176	; 0xb0
 8016138:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801613a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801613c:	f002 fa50 	bl	80185e0 <__ssprint_r>
 8016140:	2800      	cmp	r0, #0
 8016142:	d000      	beq.n	8016146 <_svfprintf_r+0xe0e>
 8016144:	e31c      	b.n	8016780 <_svfprintf_r+0x1448>
 8016146:	a92f      	add	r1, sp, #188	; 0xbc
 8016148:	3c10      	subs	r4, #16
 801614a:	000f      	movs	r7, r1
 801614c:	f7ff fb2c 	bl	80157a8 <_svfprintf_r+0x470>
 8016150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016152:	2b65      	cmp	r3, #101	; 0x65
 8016154:	dc00      	bgt.n	8016158 <_svfprintf_r+0xe20>
 8016156:	e259      	b.n	801660c <_svfprintf_r+0x12d4>
 8016158:	2200      	movs	r2, #0
 801615a:	2300      	movs	r3, #0
 801615c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801615e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016160:	f7ea f97c 	bl	800045c <__aeabi_dcmpeq>
 8016164:	2800      	cmp	r0, #0
 8016166:	d07c      	beq.n	8016262 <_svfprintf_r+0xf2a>
 8016168:	4b81      	ldr	r3, [pc, #516]	; (8016370 <_svfprintf_r+0x1038>)
 801616a:	603b      	str	r3, [r7, #0]
 801616c:	2301      	movs	r3, #1
 801616e:	607b      	str	r3, [r7, #4]
 8016170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016172:	3708      	adds	r7, #8
 8016174:	3301      	adds	r3, #1
 8016176:	932e      	str	r3, [sp, #184]	; 0xb8
 8016178:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801617a:	9308      	str	r3, [sp, #32]
 801617c:	3301      	adds	r3, #1
 801617e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016180:	2b07      	cmp	r3, #7
 8016182:	dd08      	ble.n	8016196 <_svfprintf_r+0xe5e>
 8016184:	aa2c      	add	r2, sp, #176	; 0xb0
 8016186:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016188:	980a      	ldr	r0, [sp, #40]	; 0x28
 801618a:	f002 fa29 	bl	80185e0 <__ssprint_r>
 801618e:	2800      	cmp	r0, #0
 8016190:	d000      	beq.n	8016194 <_svfprintf_r+0xe5c>
 8016192:	e2f5      	b.n	8016780 <_svfprintf_r+0x1448>
 8016194:	af2f      	add	r7, sp, #188	; 0xbc
 8016196:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016198:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801619a:	4293      	cmp	r3, r2
 801619c:	db01      	blt.n	80161a2 <_svfprintf_r+0xe6a>
 801619e:	07f3      	lsls	r3, r6, #31
 80161a0:	d51d      	bpl.n	80161de <_svfprintf_r+0xea6>
 80161a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80161a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80161a6:	4694      	mov	ip, r2
 80161a8:	603b      	str	r3, [r7, #0]
 80161aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80161ac:	607b      	str	r3, [r7, #4]
 80161ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80161b0:	3708      	adds	r7, #8
 80161b2:	4463      	add	r3, ip
 80161b4:	932e      	str	r3, [sp, #184]	; 0xb8
 80161b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80161b8:	9308      	str	r3, [sp, #32]
 80161ba:	3301      	adds	r3, #1
 80161bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80161be:	2b07      	cmp	r3, #7
 80161c0:	dd08      	ble.n	80161d4 <_svfprintf_r+0xe9c>
 80161c2:	aa2c      	add	r2, sp, #176	; 0xb0
 80161c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80161c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80161c8:	f002 fa0a 	bl	80185e0 <__ssprint_r>
 80161cc:	2800      	cmp	r0, #0
 80161ce:	d000      	beq.n	80161d2 <_svfprintf_r+0xe9a>
 80161d0:	e2d6      	b.n	8016780 <_svfprintf_r+0x1448>
 80161d2:	af2f      	add	r7, sp, #188	; 0xbc
 80161d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161d6:	2510      	movs	r5, #16
 80161d8:	1e5c      	subs	r4, r3, #1
 80161da:	2c00      	cmp	r4, #0
 80161dc:	dc2f      	bgt.n	801623e <_svfprintf_r+0xf06>
 80161de:	0773      	lsls	r3, r6, #29
 80161e0:	d500      	bpl.n	80161e4 <_svfprintf_r+0xeac>
 80161e2:	e2af      	b.n	8016744 <_svfprintf_r+0x140c>
 80161e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80161e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80161e8:	4293      	cmp	r3, r2
 80161ea:	da00      	bge.n	80161ee <_svfprintf_r+0xeb6>
 80161ec:	0013      	movs	r3, r2
 80161ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80161f0:	18d3      	adds	r3, r2, r3
 80161f2:	9315      	str	r3, [sp, #84]	; 0x54
 80161f4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80161f6:	9308      	str	r3, [sp, #32]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d007      	beq.n	801620c <_svfprintf_r+0xed4>
 80161fc:	aa2c      	add	r2, sp, #176	; 0xb0
 80161fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016200:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016202:	f002 f9ed 	bl	80185e0 <__ssprint_r>
 8016206:	2800      	cmp	r0, #0
 8016208:	d000      	beq.n	801620c <_svfprintf_r+0xed4>
 801620a:	e2b9      	b.n	8016780 <_svfprintf_r+0x1448>
 801620c:	2300      	movs	r3, #0
 801620e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016212:	2b00      	cmp	r3, #0
 8016214:	d000      	beq.n	8016218 <_svfprintf_r+0xee0>
 8016216:	e2cf      	b.n	80167b8 <_svfprintf_r+0x1480>
 8016218:	af2f      	add	r7, sp, #188	; 0xbc
 801621a:	e5d6      	b.n	8015dca <_svfprintf_r+0xa92>
 801621c:	3210      	adds	r2, #16
 801621e:	607d      	str	r5, [r7, #4]
 8016220:	922e      	str	r2, [sp, #184]	; 0xb8
 8016222:	932d      	str	r3, [sp, #180]	; 0xb4
 8016224:	2b07      	cmp	r3, #7
 8016226:	dd08      	ble.n	801623a <_svfprintf_r+0xf02>
 8016228:	aa2c      	add	r2, sp, #176	; 0xb0
 801622a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801622c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801622e:	f002 f9d7 	bl	80185e0 <__ssprint_r>
 8016232:	2800      	cmp	r0, #0
 8016234:	d000      	beq.n	8016238 <_svfprintf_r+0xf00>
 8016236:	e2a3      	b.n	8016780 <_svfprintf_r+0x1448>
 8016238:	a92f      	add	r1, sp, #188	; 0xbc
 801623a:	000f      	movs	r7, r1
 801623c:	3c10      	subs	r4, #16
 801623e:	0039      	movs	r1, r7
 8016240:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016242:	484c      	ldr	r0, [pc, #304]	; (8016374 <_svfprintf_r+0x103c>)
 8016244:	9308      	str	r3, [sp, #32]
 8016246:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016248:	3301      	adds	r3, #1
 801624a:	3108      	adds	r1, #8
 801624c:	6038      	str	r0, [r7, #0]
 801624e:	2c10      	cmp	r4, #16
 8016250:	dce4      	bgt.n	801621c <_svfprintf_r+0xee4>
 8016252:	607c      	str	r4, [r7, #4]
 8016254:	18a4      	adds	r4, r4, r2
 8016256:	942e      	str	r4, [sp, #184]	; 0xb8
 8016258:	932d      	str	r3, [sp, #180]	; 0xb4
 801625a:	000f      	movs	r7, r1
 801625c:	2b07      	cmp	r3, #7
 801625e:	ddbe      	ble.n	80161de <_svfprintf_r+0xea6>
 8016260:	e06a      	b.n	8016338 <_svfprintf_r+0x1000>
 8016262:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016264:	2b00      	cmp	r3, #0
 8016266:	dd00      	ble.n	801626a <_svfprintf_r+0xf32>
 8016268:	e086      	b.n	8016378 <_svfprintf_r+0x1040>
 801626a:	4b41      	ldr	r3, [pc, #260]	; (8016370 <_svfprintf_r+0x1038>)
 801626c:	603b      	str	r3, [r7, #0]
 801626e:	2301      	movs	r3, #1
 8016270:	607b      	str	r3, [r7, #4]
 8016272:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016274:	3708      	adds	r7, #8
 8016276:	3301      	adds	r3, #1
 8016278:	932e      	str	r3, [sp, #184]	; 0xb8
 801627a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801627c:	9308      	str	r3, [sp, #32]
 801627e:	3301      	adds	r3, #1
 8016280:	932d      	str	r3, [sp, #180]	; 0xb4
 8016282:	2b07      	cmp	r3, #7
 8016284:	dd08      	ble.n	8016298 <_svfprintf_r+0xf60>
 8016286:	aa2c      	add	r2, sp, #176	; 0xb0
 8016288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801628a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801628c:	f002 f9a8 	bl	80185e0 <__ssprint_r>
 8016290:	2800      	cmp	r0, #0
 8016292:	d000      	beq.n	8016296 <_svfprintf_r+0xf5e>
 8016294:	e274      	b.n	8016780 <_svfprintf_r+0x1448>
 8016296:	af2f      	add	r7, sp, #188	; 0xbc
 8016298:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801629a:	2b00      	cmp	r3, #0
 801629c:	d104      	bne.n	80162a8 <_svfprintf_r+0xf70>
 801629e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d101      	bne.n	80162a8 <_svfprintf_r+0xf70>
 80162a4:	07f3      	lsls	r3, r6, #31
 80162a6:	d59a      	bpl.n	80161de <_svfprintf_r+0xea6>
 80162a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80162aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80162ac:	4694      	mov	ip, r2
 80162ae:	603b      	str	r3, [r7, #0]
 80162b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80162b2:	607b      	str	r3, [r7, #4]
 80162b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80162b6:	3708      	adds	r7, #8
 80162b8:	4463      	add	r3, ip
 80162ba:	932e      	str	r3, [sp, #184]	; 0xb8
 80162bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80162be:	9308      	str	r3, [sp, #32]
 80162c0:	3301      	adds	r3, #1
 80162c2:	932d      	str	r3, [sp, #180]	; 0xb4
 80162c4:	2b07      	cmp	r3, #7
 80162c6:	dd08      	ble.n	80162da <_svfprintf_r+0xfa2>
 80162c8:	aa2c      	add	r2, sp, #176	; 0xb0
 80162ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80162cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80162ce:	f002 f987 	bl	80185e0 <__ssprint_r>
 80162d2:	2800      	cmp	r0, #0
 80162d4:	d000      	beq.n	80162d8 <_svfprintf_r+0xfa0>
 80162d6:	e253      	b.n	8016780 <_svfprintf_r+0x1448>
 80162d8:	af2f      	add	r7, sp, #188	; 0xbc
 80162da:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80162dc:	2c00      	cmp	r4, #0
 80162de:	da1a      	bge.n	8016316 <_svfprintf_r+0xfde>
 80162e0:	0039      	movs	r1, r7
 80162e2:	2510      	movs	r5, #16
 80162e4:	4264      	negs	r4, r4
 80162e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80162e8:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80162ea:	9308      	str	r3, [sp, #32]
 80162ec:	1c5a      	adds	r2, r3, #1
 80162ee:	4b21      	ldr	r3, [pc, #132]	; (8016374 <_svfprintf_r+0x103c>)
 80162f0:	3708      	adds	r7, #8
 80162f2:	600b      	str	r3, [r1, #0]
 80162f4:	2c10      	cmp	r4, #16
 80162f6:	dc29      	bgt.n	801634c <_svfprintf_r+0x1014>
 80162f8:	604c      	str	r4, [r1, #4]
 80162fa:	1824      	adds	r4, r4, r0
 80162fc:	942e      	str	r4, [sp, #184]	; 0xb8
 80162fe:	922d      	str	r2, [sp, #180]	; 0xb4
 8016300:	2a07      	cmp	r2, #7
 8016302:	dd08      	ble.n	8016316 <_svfprintf_r+0xfde>
 8016304:	aa2c      	add	r2, sp, #176	; 0xb0
 8016306:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016308:	980a      	ldr	r0, [sp, #40]	; 0x28
 801630a:	f002 f969 	bl	80185e0 <__ssprint_r>
 801630e:	2800      	cmp	r0, #0
 8016310:	d000      	beq.n	8016314 <_svfprintf_r+0xfdc>
 8016312:	e235      	b.n	8016780 <_svfprintf_r+0x1448>
 8016314:	af2f      	add	r7, sp, #188	; 0xbc
 8016316:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801631a:	468c      	mov	ip, r1
 801631c:	603b      	str	r3, [r7, #0]
 801631e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016320:	607b      	str	r3, [r7, #4]
 8016322:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016324:	4463      	add	r3, ip
 8016326:	932e      	str	r3, [sp, #184]	; 0xb8
 8016328:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801632a:	1c5a      	adds	r2, r3, #1
 801632c:	9308      	str	r3, [sp, #32]
 801632e:	922d      	str	r2, [sp, #180]	; 0xb4
 8016330:	2a07      	cmp	r2, #7
 8016332:	dc01      	bgt.n	8016338 <_svfprintf_r+0x1000>
 8016334:	f7ff fa6c 	bl	8015810 <_svfprintf_r+0x4d8>
 8016338:	aa2c      	add	r2, sp, #176	; 0xb0
 801633a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801633c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801633e:	f002 f94f 	bl	80185e0 <__ssprint_r>
 8016342:	2800      	cmp	r0, #0
 8016344:	d000      	beq.n	8016348 <_svfprintf_r+0x1010>
 8016346:	e21b      	b.n	8016780 <_svfprintf_r+0x1448>
 8016348:	af2f      	add	r7, sp, #188	; 0xbc
 801634a:	e748      	b.n	80161de <_svfprintf_r+0xea6>
 801634c:	3010      	adds	r0, #16
 801634e:	604d      	str	r5, [r1, #4]
 8016350:	902e      	str	r0, [sp, #184]	; 0xb8
 8016352:	922d      	str	r2, [sp, #180]	; 0xb4
 8016354:	2a07      	cmp	r2, #7
 8016356:	dd08      	ble.n	801636a <_svfprintf_r+0x1032>
 8016358:	aa2c      	add	r2, sp, #176	; 0xb0
 801635a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801635c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801635e:	f002 f93f 	bl	80185e0 <__ssprint_r>
 8016362:	2800      	cmp	r0, #0
 8016364:	d000      	beq.n	8016368 <_svfprintf_r+0x1030>
 8016366:	e20b      	b.n	8016780 <_svfprintf_r+0x1448>
 8016368:	af2f      	add	r7, sp, #188	; 0xbc
 801636a:	3c10      	subs	r4, #16
 801636c:	0039      	movs	r1, r7
 801636e:	e7ba      	b.n	80162e6 <_svfprintf_r+0xfae>
 8016370:	0801bff2 	.word	0x0801bff2
 8016374:	0801c004 	.word	0x0801c004
 8016378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801637a:	002c      	movs	r4, r5
 801637c:	429d      	cmp	r5, r3
 801637e:	dd00      	ble.n	8016382 <_svfprintf_r+0x104a>
 8016380:	001c      	movs	r4, r3
 8016382:	2c00      	cmp	r4, #0
 8016384:	dd15      	ble.n	80163b2 <_svfprintf_r+0x107a>
 8016386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016388:	607c      	str	r4, [r7, #4]
 801638a:	603b      	str	r3, [r7, #0]
 801638c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801638e:	3708      	adds	r7, #8
 8016390:	18e3      	adds	r3, r4, r3
 8016392:	932e      	str	r3, [sp, #184]	; 0xb8
 8016394:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016396:	9308      	str	r3, [sp, #32]
 8016398:	3301      	adds	r3, #1
 801639a:	932d      	str	r3, [sp, #180]	; 0xb4
 801639c:	2b07      	cmp	r3, #7
 801639e:	dd08      	ble.n	80163b2 <_svfprintf_r+0x107a>
 80163a0:	aa2c      	add	r2, sp, #176	; 0xb0
 80163a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80163a6:	f002 f91b 	bl	80185e0 <__ssprint_r>
 80163aa:	2800      	cmp	r0, #0
 80163ac:	d000      	beq.n	80163b0 <_svfprintf_r+0x1078>
 80163ae:	e1e7      	b.n	8016780 <_svfprintf_r+0x1448>
 80163b0:	af2f      	add	r7, sp, #188	; 0xbc
 80163b2:	43e3      	mvns	r3, r4
 80163b4:	17db      	asrs	r3, r3, #31
 80163b6:	401c      	ands	r4, r3
 80163b8:	1b2c      	subs	r4, r5, r4
 80163ba:	2c00      	cmp	r4, #0
 80163bc:	dd1a      	ble.n	80163f4 <_svfprintf_r+0x10bc>
 80163be:	0039      	movs	r1, r7
 80163c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80163c2:	48d4      	ldr	r0, [pc, #848]	; (8016714 <_svfprintf_r+0x13dc>)
 80163c4:	9308      	str	r3, [sp, #32]
 80163c6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80163c8:	3301      	adds	r3, #1
 80163ca:	3108      	adds	r1, #8
 80163cc:	6038      	str	r0, [r7, #0]
 80163ce:	2c10      	cmp	r4, #16
 80163d0:	dd00      	ble.n	80163d4 <_svfprintf_r+0x109c>
 80163d2:	e089      	b.n	80164e8 <_svfprintf_r+0x11b0>
 80163d4:	607c      	str	r4, [r7, #4]
 80163d6:	18a4      	adds	r4, r4, r2
 80163d8:	942e      	str	r4, [sp, #184]	; 0xb8
 80163da:	932d      	str	r3, [sp, #180]	; 0xb4
 80163dc:	000f      	movs	r7, r1
 80163de:	2b07      	cmp	r3, #7
 80163e0:	dd08      	ble.n	80163f4 <_svfprintf_r+0x10bc>
 80163e2:	aa2c      	add	r2, sp, #176	; 0xb0
 80163e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80163e8:	f002 f8fa 	bl	80185e0 <__ssprint_r>
 80163ec:	2800      	cmp	r0, #0
 80163ee:	d000      	beq.n	80163f2 <_svfprintf_r+0x10ba>
 80163f0:	e1c6      	b.n	8016780 <_svfprintf_r+0x1448>
 80163f2:	af2f      	add	r7, sp, #188	; 0xbc
 80163f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163f6:	195d      	adds	r5, r3, r5
 80163f8:	0573      	lsls	r3, r6, #21
 80163fa:	d50d      	bpl.n	8016418 <_svfprintf_r+0x10e0>
 80163fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d000      	beq.n	8016404 <_svfprintf_r+0x10cc>
 8016402:	e084      	b.n	801650e <_svfprintf_r+0x11d6>
 8016404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016406:	2b00      	cmp	r3, #0
 8016408:	d000      	beq.n	801640c <_svfprintf_r+0x10d4>
 801640a:	e083      	b.n	8016514 <_svfprintf_r+0x11dc>
 801640c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801640e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016410:	189b      	adds	r3, r3, r2
 8016412:	429d      	cmp	r5, r3
 8016414:	d900      	bls.n	8016418 <_svfprintf_r+0x10e0>
 8016416:	001d      	movs	r5, r3
 8016418:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801641a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801641c:	4293      	cmp	r3, r2
 801641e:	db01      	blt.n	8016424 <_svfprintf_r+0x10ec>
 8016420:	07f3      	lsls	r3, r6, #31
 8016422:	d518      	bpl.n	8016456 <_svfprintf_r+0x111e>
 8016424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016426:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016428:	4694      	mov	ip, r2
 801642a:	603b      	str	r3, [r7, #0]
 801642c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801642e:	607b      	str	r3, [r7, #4]
 8016430:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016432:	3708      	adds	r7, #8
 8016434:	4463      	add	r3, ip
 8016436:	932e      	str	r3, [sp, #184]	; 0xb8
 8016438:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801643a:	9308      	str	r3, [sp, #32]
 801643c:	3301      	adds	r3, #1
 801643e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016440:	2b07      	cmp	r3, #7
 8016442:	dd08      	ble.n	8016456 <_svfprintf_r+0x111e>
 8016444:	aa2c      	add	r2, sp, #176	; 0xb0
 8016446:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016448:	980a      	ldr	r0, [sp, #40]	; 0x28
 801644a:	f002 f8c9 	bl	80185e0 <__ssprint_r>
 801644e:	2800      	cmp	r0, #0
 8016450:	d000      	beq.n	8016454 <_svfprintf_r+0x111c>
 8016452:	e195      	b.n	8016780 <_svfprintf_r+0x1448>
 8016454:	af2f      	add	r7, sp, #188	; 0xbc
 8016456:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801645a:	4694      	mov	ip, r2
 801645c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801645e:	4463      	add	r3, ip
 8016460:	1b5b      	subs	r3, r3, r5
 8016462:	1a54      	subs	r4, r2, r1
 8016464:	429c      	cmp	r4, r3
 8016466:	dd00      	ble.n	801646a <_svfprintf_r+0x1132>
 8016468:	001c      	movs	r4, r3
 801646a:	2c00      	cmp	r4, #0
 801646c:	dd14      	ble.n	8016498 <_svfprintf_r+0x1160>
 801646e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016470:	603d      	str	r5, [r7, #0]
 8016472:	18e3      	adds	r3, r4, r3
 8016474:	932e      	str	r3, [sp, #184]	; 0xb8
 8016476:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016478:	607c      	str	r4, [r7, #4]
 801647a:	9308      	str	r3, [sp, #32]
 801647c:	3301      	adds	r3, #1
 801647e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016480:	3708      	adds	r7, #8
 8016482:	2b07      	cmp	r3, #7
 8016484:	dd08      	ble.n	8016498 <_svfprintf_r+0x1160>
 8016486:	aa2c      	add	r2, sp, #176	; 0xb0
 8016488:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801648a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801648c:	f002 f8a8 	bl	80185e0 <__ssprint_r>
 8016490:	2800      	cmp	r0, #0
 8016492:	d000      	beq.n	8016496 <_svfprintf_r+0x115e>
 8016494:	e174      	b.n	8016780 <_svfprintf_r+0x1448>
 8016496:	af2f      	add	r7, sp, #188	; 0xbc
 8016498:	43e3      	mvns	r3, r4
 801649a:	17db      	asrs	r3, r3, #31
 801649c:	401c      	ands	r4, r3
 801649e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80164a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164a2:	2510      	movs	r5, #16
 80164a4:	1a9b      	subs	r3, r3, r2
 80164a6:	1b1c      	subs	r4, r3, r4
 80164a8:	2c00      	cmp	r4, #0
 80164aa:	dc00      	bgt.n	80164ae <_svfprintf_r+0x1176>
 80164ac:	e697      	b.n	80161de <_svfprintf_r+0xea6>
 80164ae:	0039      	movs	r1, r7
 80164b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80164b2:	4898      	ldr	r0, [pc, #608]	; (8016714 <_svfprintf_r+0x13dc>)
 80164b4:	9308      	str	r3, [sp, #32]
 80164b6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80164b8:	3301      	adds	r3, #1
 80164ba:	3108      	adds	r1, #8
 80164bc:	6038      	str	r0, [r7, #0]
 80164be:	2c10      	cmp	r4, #16
 80164c0:	dc00      	bgt.n	80164c4 <_svfprintf_r+0x118c>
 80164c2:	e6c6      	b.n	8016252 <_svfprintf_r+0xf1a>
 80164c4:	3210      	adds	r2, #16
 80164c6:	607d      	str	r5, [r7, #4]
 80164c8:	922e      	str	r2, [sp, #184]	; 0xb8
 80164ca:	932d      	str	r3, [sp, #180]	; 0xb4
 80164cc:	2b07      	cmp	r3, #7
 80164ce:	dd08      	ble.n	80164e2 <_svfprintf_r+0x11aa>
 80164d0:	aa2c      	add	r2, sp, #176	; 0xb0
 80164d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164d6:	f002 f883 	bl	80185e0 <__ssprint_r>
 80164da:	2800      	cmp	r0, #0
 80164dc:	d000      	beq.n	80164e0 <_svfprintf_r+0x11a8>
 80164de:	e14f      	b.n	8016780 <_svfprintf_r+0x1448>
 80164e0:	a92f      	add	r1, sp, #188	; 0xbc
 80164e2:	3c10      	subs	r4, #16
 80164e4:	000f      	movs	r7, r1
 80164e6:	e7e2      	b.n	80164ae <_svfprintf_r+0x1176>
 80164e8:	2010      	movs	r0, #16
 80164ea:	1812      	adds	r2, r2, r0
 80164ec:	6078      	str	r0, [r7, #4]
 80164ee:	922e      	str	r2, [sp, #184]	; 0xb8
 80164f0:	932d      	str	r3, [sp, #180]	; 0xb4
 80164f2:	2b07      	cmp	r3, #7
 80164f4:	dd08      	ble.n	8016508 <_svfprintf_r+0x11d0>
 80164f6:	aa2c      	add	r2, sp, #176	; 0xb0
 80164f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164fc:	f002 f870 	bl	80185e0 <__ssprint_r>
 8016500:	2800      	cmp	r0, #0
 8016502:	d000      	beq.n	8016506 <_svfprintf_r+0x11ce>
 8016504:	e13c      	b.n	8016780 <_svfprintf_r+0x1448>
 8016506:	a92f      	add	r1, sp, #188	; 0xbc
 8016508:	3c10      	subs	r4, #16
 801650a:	000f      	movs	r7, r1
 801650c:	e757      	b.n	80163be <_svfprintf_r+0x1086>
 801650e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016510:	2b00      	cmp	r3, #0
 8016512:	d061      	beq.n	80165d8 <_svfprintf_r+0x12a0>
 8016514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016516:	3b01      	subs	r3, #1
 8016518:	9310      	str	r3, [sp, #64]	; 0x40
 801651a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801651c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801651e:	4694      	mov	ip, r2
 8016520:	603b      	str	r3, [r7, #0]
 8016522:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016524:	607b      	str	r3, [r7, #4]
 8016526:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016528:	3708      	adds	r7, #8
 801652a:	4463      	add	r3, ip
 801652c:	932e      	str	r3, [sp, #184]	; 0xb8
 801652e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016530:	9308      	str	r3, [sp, #32]
 8016532:	3301      	adds	r3, #1
 8016534:	932d      	str	r3, [sp, #180]	; 0xb4
 8016536:	2b07      	cmp	r3, #7
 8016538:	dd08      	ble.n	801654c <_svfprintf_r+0x1214>
 801653a:	aa2c      	add	r2, sp, #176	; 0xb0
 801653c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801653e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016540:	f002 f84e 	bl	80185e0 <__ssprint_r>
 8016544:	2800      	cmp	r0, #0
 8016546:	d000      	beq.n	801654a <_svfprintf_r+0x1212>
 8016548:	e11a      	b.n	8016780 <_svfprintf_r+0x1448>
 801654a:	af2f      	add	r7, sp, #188	; 0xbc
 801654c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801654e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016550:	189b      	adds	r3, r3, r2
 8016552:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016554:	1b5b      	subs	r3, r3, r5
 8016556:	7814      	ldrb	r4, [r2, #0]
 8016558:	429c      	cmp	r4, r3
 801655a:	dd00      	ble.n	801655e <_svfprintf_r+0x1226>
 801655c:	001c      	movs	r4, r3
 801655e:	2c00      	cmp	r4, #0
 8016560:	dd14      	ble.n	801658c <_svfprintf_r+0x1254>
 8016562:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016564:	603d      	str	r5, [r7, #0]
 8016566:	18e3      	adds	r3, r4, r3
 8016568:	932e      	str	r3, [sp, #184]	; 0xb8
 801656a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801656c:	607c      	str	r4, [r7, #4]
 801656e:	9308      	str	r3, [sp, #32]
 8016570:	3301      	adds	r3, #1
 8016572:	932d      	str	r3, [sp, #180]	; 0xb4
 8016574:	3708      	adds	r7, #8
 8016576:	2b07      	cmp	r3, #7
 8016578:	dd08      	ble.n	801658c <_svfprintf_r+0x1254>
 801657a:	aa2c      	add	r2, sp, #176	; 0xb0
 801657c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801657e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016580:	f002 f82e 	bl	80185e0 <__ssprint_r>
 8016584:	2800      	cmp	r0, #0
 8016586:	d000      	beq.n	801658a <_svfprintf_r+0x1252>
 8016588:	e0fa      	b.n	8016780 <_svfprintf_r+0x1448>
 801658a:	af2f      	add	r7, sp, #188	; 0xbc
 801658c:	43e3      	mvns	r3, r4
 801658e:	17db      	asrs	r3, r3, #31
 8016590:	401c      	ands	r4, r3
 8016592:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016594:	781b      	ldrb	r3, [r3, #0]
 8016596:	1b1c      	subs	r4, r3, r4
 8016598:	2c00      	cmp	r4, #0
 801659a:	dd19      	ble.n	80165d0 <_svfprintf_r+0x1298>
 801659c:	0039      	movs	r1, r7
 801659e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80165a0:	485c      	ldr	r0, [pc, #368]	; (8016714 <_svfprintf_r+0x13dc>)
 80165a2:	9308      	str	r3, [sp, #32]
 80165a4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80165a6:	3301      	adds	r3, #1
 80165a8:	3108      	adds	r1, #8
 80165aa:	6038      	str	r0, [r7, #0]
 80165ac:	2c10      	cmp	r4, #16
 80165ae:	dc1a      	bgt.n	80165e6 <_svfprintf_r+0x12ae>
 80165b0:	607c      	str	r4, [r7, #4]
 80165b2:	18a4      	adds	r4, r4, r2
 80165b4:	942e      	str	r4, [sp, #184]	; 0xb8
 80165b6:	932d      	str	r3, [sp, #180]	; 0xb4
 80165b8:	000f      	movs	r7, r1
 80165ba:	2b07      	cmp	r3, #7
 80165bc:	dd08      	ble.n	80165d0 <_svfprintf_r+0x1298>
 80165be:	aa2c      	add	r2, sp, #176	; 0xb0
 80165c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165c4:	f002 f80c 	bl	80185e0 <__ssprint_r>
 80165c8:	2800      	cmp	r0, #0
 80165ca:	d000      	beq.n	80165ce <_svfprintf_r+0x1296>
 80165cc:	e0d8      	b.n	8016780 <_svfprintf_r+0x1448>
 80165ce:	af2f      	add	r7, sp, #188	; 0xbc
 80165d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80165d2:	781b      	ldrb	r3, [r3, #0]
 80165d4:	18ed      	adds	r5, r5, r3
 80165d6:	e711      	b.n	80163fc <_svfprintf_r+0x10c4>
 80165d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80165da:	3b01      	subs	r3, #1
 80165dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80165de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165e0:	3b01      	subs	r3, #1
 80165e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80165e4:	e799      	b.n	801651a <_svfprintf_r+0x11e2>
 80165e6:	2010      	movs	r0, #16
 80165e8:	1812      	adds	r2, r2, r0
 80165ea:	6078      	str	r0, [r7, #4]
 80165ec:	922e      	str	r2, [sp, #184]	; 0xb8
 80165ee:	932d      	str	r3, [sp, #180]	; 0xb4
 80165f0:	2b07      	cmp	r3, #7
 80165f2:	dd08      	ble.n	8016606 <_svfprintf_r+0x12ce>
 80165f4:	aa2c      	add	r2, sp, #176	; 0xb0
 80165f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165fa:	f001 fff1 	bl	80185e0 <__ssprint_r>
 80165fe:	2800      	cmp	r0, #0
 8016600:	d000      	beq.n	8016604 <_svfprintf_r+0x12cc>
 8016602:	e0bd      	b.n	8016780 <_svfprintf_r+0x1448>
 8016604:	a92f      	add	r1, sp, #188	; 0xbc
 8016606:	3c10      	subs	r4, #16
 8016608:	000f      	movs	r7, r1
 801660a:	e7c7      	b.n	801659c <_svfprintf_r+0x1264>
 801660c:	003c      	movs	r4, r7
 801660e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016610:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8016612:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016614:	9308      	str	r3, [sp, #32]
 8016616:	3101      	adds	r1, #1
 8016618:	3301      	adds	r3, #1
 801661a:	3408      	adds	r4, #8
 801661c:	2a01      	cmp	r2, #1
 801661e:	dc03      	bgt.n	8016628 <_svfprintf_r+0x12f0>
 8016620:	2201      	movs	r2, #1
 8016622:	4216      	tst	r6, r2
 8016624:	d100      	bne.n	8016628 <_svfprintf_r+0x12f0>
 8016626:	e088      	b.n	801673a <_svfprintf_r+0x1402>
 8016628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801662a:	912e      	str	r1, [sp, #184]	; 0xb8
 801662c:	603a      	str	r2, [r7, #0]
 801662e:	2201      	movs	r2, #1
 8016630:	932d      	str	r3, [sp, #180]	; 0xb4
 8016632:	607a      	str	r2, [r7, #4]
 8016634:	2b07      	cmp	r3, #7
 8016636:	dd08      	ble.n	801664a <_svfprintf_r+0x1312>
 8016638:	aa2c      	add	r2, sp, #176	; 0xb0
 801663a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801663c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801663e:	f001 ffcf 	bl	80185e0 <__ssprint_r>
 8016642:	2800      	cmp	r0, #0
 8016644:	d000      	beq.n	8016648 <_svfprintf_r+0x1310>
 8016646:	e09b      	b.n	8016780 <_svfprintf_r+0x1448>
 8016648:	ac2f      	add	r4, sp, #188	; 0xbc
 801664a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801664c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801664e:	4694      	mov	ip, r2
 8016650:	6023      	str	r3, [r4, #0]
 8016652:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016654:	6063      	str	r3, [r4, #4]
 8016656:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016658:	3408      	adds	r4, #8
 801665a:	4463      	add	r3, ip
 801665c:	932e      	str	r3, [sp, #184]	; 0xb8
 801665e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016660:	9308      	str	r3, [sp, #32]
 8016662:	3301      	adds	r3, #1
 8016664:	932d      	str	r3, [sp, #180]	; 0xb4
 8016666:	2b07      	cmp	r3, #7
 8016668:	dd08      	ble.n	801667c <_svfprintf_r+0x1344>
 801666a:	aa2c      	add	r2, sp, #176	; 0xb0
 801666c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801666e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016670:	f001 ffb6 	bl	80185e0 <__ssprint_r>
 8016674:	2800      	cmp	r0, #0
 8016676:	d000      	beq.n	801667a <_svfprintf_r+0x1342>
 8016678:	e082      	b.n	8016780 <_svfprintf_r+0x1448>
 801667a:	ac2f      	add	r4, sp, #188	; 0xbc
 801667c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801667e:	2200      	movs	r2, #0
 8016680:	1e5d      	subs	r5, r3, #1
 8016682:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016684:	2300      	movs	r3, #0
 8016686:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016688:	f7e9 fee8 	bl	800045c <__aeabi_dcmpeq>
 801668c:	2800      	cmp	r0, #0
 801668e:	d12c      	bne.n	80166ea <_svfprintf_r+0x13b2>
 8016690:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016692:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016694:	9308      	str	r3, [sp, #32]
 8016696:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016698:	6065      	str	r5, [r4, #4]
 801669a:	1c5a      	adds	r2, r3, #1
 801669c:	930e      	str	r3, [sp, #56]	; 0x38
 801669e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166a0:	922d      	str	r2, [sp, #180]	; 0xb4
 80166a2:	3301      	adds	r3, #1
 80166a4:	6023      	str	r3, [r4, #0]
 80166a6:	9b08      	ldr	r3, [sp, #32]
 80166a8:	3408      	adds	r4, #8
 80166aa:	3b01      	subs	r3, #1
 80166ac:	185b      	adds	r3, r3, r1
 80166ae:	932e      	str	r3, [sp, #184]	; 0xb8
 80166b0:	2a07      	cmp	r2, #7
 80166b2:	dd07      	ble.n	80166c4 <_svfprintf_r+0x138c>
 80166b4:	aa2c      	add	r2, sp, #176	; 0xb0
 80166b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80166ba:	f001 ff91 	bl	80185e0 <__ssprint_r>
 80166be:	2800      	cmp	r0, #0
 80166c0:	d15e      	bne.n	8016780 <_svfprintf_r+0x1448>
 80166c2:	ac2f      	add	r4, sp, #188	; 0xbc
 80166c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80166c6:	ab28      	add	r3, sp, #160	; 0xa0
 80166c8:	4694      	mov	ip, r2
 80166ca:	6023      	str	r3, [r4, #0]
 80166cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80166ce:	6063      	str	r3, [r4, #4]
 80166d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80166d2:	4463      	add	r3, ip
 80166d4:	932e      	str	r3, [sp, #184]	; 0xb8
 80166d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80166d8:	9308      	str	r3, [sp, #32]
 80166da:	3301      	adds	r3, #1
 80166dc:	932d      	str	r3, [sp, #180]	; 0xb4
 80166de:	2b07      	cmp	r3, #7
 80166e0:	dd00      	ble.n	80166e4 <_svfprintf_r+0x13ac>
 80166e2:	e629      	b.n	8016338 <_svfprintf_r+0x1000>
 80166e4:	3408      	adds	r4, #8
 80166e6:	0027      	movs	r7, r4
 80166e8:	e579      	b.n	80161de <_svfprintf_r+0xea6>
 80166ea:	2710      	movs	r7, #16
 80166ec:	2d00      	cmp	r5, #0
 80166ee:	dde9      	ble.n	80166c4 <_svfprintf_r+0x138c>
 80166f0:	0021      	movs	r1, r4
 80166f2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80166f4:	4807      	ldr	r0, [pc, #28]	; (8016714 <_svfprintf_r+0x13dc>)
 80166f6:	9308      	str	r3, [sp, #32]
 80166f8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80166fa:	3301      	adds	r3, #1
 80166fc:	3108      	adds	r1, #8
 80166fe:	6020      	str	r0, [r4, #0]
 8016700:	2d10      	cmp	r5, #16
 8016702:	dc09      	bgt.n	8016718 <_svfprintf_r+0x13e0>
 8016704:	6065      	str	r5, [r4, #4]
 8016706:	000c      	movs	r4, r1
 8016708:	18ad      	adds	r5, r5, r2
 801670a:	952e      	str	r5, [sp, #184]	; 0xb8
 801670c:	932d      	str	r3, [sp, #180]	; 0xb4
 801670e:	2b07      	cmp	r3, #7
 8016710:	ddd8      	ble.n	80166c4 <_svfprintf_r+0x138c>
 8016712:	e7cf      	b.n	80166b4 <_svfprintf_r+0x137c>
 8016714:	0801c004 	.word	0x0801c004
 8016718:	3210      	adds	r2, #16
 801671a:	6067      	str	r7, [r4, #4]
 801671c:	922e      	str	r2, [sp, #184]	; 0xb8
 801671e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016720:	2b07      	cmp	r3, #7
 8016722:	dd07      	ble.n	8016734 <_svfprintf_r+0x13fc>
 8016724:	aa2c      	add	r2, sp, #176	; 0xb0
 8016726:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016728:	980a      	ldr	r0, [sp, #40]	; 0x28
 801672a:	f001 ff59 	bl	80185e0 <__ssprint_r>
 801672e:	2800      	cmp	r0, #0
 8016730:	d126      	bne.n	8016780 <_svfprintf_r+0x1448>
 8016732:	a92f      	add	r1, sp, #188	; 0xbc
 8016734:	3d10      	subs	r5, #16
 8016736:	000c      	movs	r4, r1
 8016738:	e7da      	b.n	80166f0 <_svfprintf_r+0x13b8>
 801673a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801673c:	912e      	str	r1, [sp, #184]	; 0xb8
 801673e:	c705      	stmia	r7!, {r0, r2}
 8016740:	932d      	str	r3, [sp, #180]	; 0xb4
 8016742:	e7e4      	b.n	801670e <_svfprintf_r+0x13d6>
 8016744:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016746:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016748:	2510      	movs	r5, #16
 801674a:	1a9c      	subs	r4, r3, r2
 801674c:	2c00      	cmp	r4, #0
 801674e:	dc00      	bgt.n	8016752 <_svfprintf_r+0x141a>
 8016750:	e548      	b.n	80161e4 <_svfprintf_r+0xeac>
 8016752:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016754:	4921      	ldr	r1, [pc, #132]	; (80167dc <_svfprintf_r+0x14a4>)
 8016756:	9308      	str	r3, [sp, #32]
 8016758:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801675a:	3301      	adds	r3, #1
 801675c:	6039      	str	r1, [r7, #0]
 801675e:	2c10      	cmp	r4, #16
 8016760:	dc19      	bgt.n	8016796 <_svfprintf_r+0x145e>
 8016762:	607c      	str	r4, [r7, #4]
 8016764:	18a4      	adds	r4, r4, r2
 8016766:	942e      	str	r4, [sp, #184]	; 0xb8
 8016768:	932d      	str	r3, [sp, #180]	; 0xb4
 801676a:	2b07      	cmp	r3, #7
 801676c:	dc00      	bgt.n	8016770 <_svfprintf_r+0x1438>
 801676e:	e539      	b.n	80161e4 <_svfprintf_r+0xeac>
 8016770:	aa2c      	add	r2, sp, #176	; 0xb0
 8016772:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016774:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016776:	f001 ff33 	bl	80185e0 <__ssprint_r>
 801677a:	2800      	cmp	r0, #0
 801677c:	d100      	bne.n	8016780 <_svfprintf_r+0x1448>
 801677e:	e531      	b.n	80161e4 <_svfprintf_r+0xeac>
 8016780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016782:	2b00      	cmp	r3, #0
 8016784:	d101      	bne.n	801678a <_svfprintf_r+0x1452>
 8016786:	f7ff f908 	bl	801599a <_svfprintf_r+0x662>
 801678a:	0019      	movs	r1, r3
 801678c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801678e:	f000 ff19 	bl	80175c4 <_free_r>
 8016792:	f7ff f902 	bl	801599a <_svfprintf_r+0x662>
 8016796:	3210      	adds	r2, #16
 8016798:	607d      	str	r5, [r7, #4]
 801679a:	922e      	str	r2, [sp, #184]	; 0xb8
 801679c:	932d      	str	r3, [sp, #180]	; 0xb4
 801679e:	3708      	adds	r7, #8
 80167a0:	2b07      	cmp	r3, #7
 80167a2:	dd07      	ble.n	80167b4 <_svfprintf_r+0x147c>
 80167a4:	aa2c      	add	r2, sp, #176	; 0xb0
 80167a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167aa:	f001 ff19 	bl	80185e0 <__ssprint_r>
 80167ae:	2800      	cmp	r0, #0
 80167b0:	d1e6      	bne.n	8016780 <_svfprintf_r+0x1448>
 80167b2:	af2f      	add	r7, sp, #188	; 0xbc
 80167b4:	3c10      	subs	r4, #16
 80167b6:	e7cc      	b.n	8016752 <_svfprintf_r+0x141a>
 80167b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80167ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167bc:	f000 ff02 	bl	80175c4 <_free_r>
 80167c0:	e52a      	b.n	8016218 <_svfprintf_r+0xee0>
 80167c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80167c4:	9306      	str	r3, [sp, #24]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d101      	bne.n	80167ce <_svfprintf_r+0x1496>
 80167ca:	f7ff f8e6 	bl	801599a <_svfprintf_r+0x662>
 80167ce:	aa2c      	add	r2, sp, #176	; 0xb0
 80167d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167d4:	f001 ff04 	bl	80185e0 <__ssprint_r>
 80167d8:	f7ff f8df 	bl	801599a <_svfprintf_r+0x662>
 80167dc:	0801bff4 	.word	0x0801bff4

080167e0 <sysconf>:
 80167e0:	2380      	movs	r3, #128	; 0x80
 80167e2:	b510      	push	{r4, lr}
 80167e4:	015b      	lsls	r3, r3, #5
 80167e6:	2808      	cmp	r0, #8
 80167e8:	d004      	beq.n	80167f4 <sysconf+0x14>
 80167ea:	f000 fe7d 	bl	80174e8 <__errno>
 80167ee:	2316      	movs	r3, #22
 80167f0:	6003      	str	r3, [r0, #0]
 80167f2:	3b17      	subs	r3, #23
 80167f4:	0018      	movs	r0, r3
 80167f6:	bd10      	pop	{r4, pc}

080167f8 <__ascii_wctomb>:
 80167f8:	1e0b      	subs	r3, r1, #0
 80167fa:	d004      	beq.n	8016806 <__ascii_wctomb+0xe>
 80167fc:	2aff      	cmp	r2, #255	; 0xff
 80167fe:	d904      	bls.n	801680a <__ascii_wctomb+0x12>
 8016800:	238a      	movs	r3, #138	; 0x8a
 8016802:	6003      	str	r3, [r0, #0]
 8016804:	3b8b      	subs	r3, #139	; 0x8b
 8016806:	0018      	movs	r0, r3
 8016808:	4770      	bx	lr
 801680a:	700a      	strb	r2, [r1, #0]
 801680c:	2301      	movs	r3, #1
 801680e:	e7fa      	b.n	8016806 <__ascii_wctomb+0xe>

08016810 <register_fini>:
 8016810:	4b03      	ldr	r3, [pc, #12]	; (8016820 <register_fini+0x10>)
 8016812:	b510      	push	{r4, lr}
 8016814:	2b00      	cmp	r3, #0
 8016816:	d002      	beq.n	801681e <register_fini+0xe>
 8016818:	4802      	ldr	r0, [pc, #8]	; (8016824 <register_fini+0x14>)
 801681a:	f000 f805 	bl	8016828 <atexit>
 801681e:	bd10      	pop	{r4, pc}
 8016820:	00000000 	.word	0x00000000
 8016824:	080174f5 	.word	0x080174f5

08016828 <atexit>:
 8016828:	2300      	movs	r3, #0
 801682a:	b510      	push	{r4, lr}
 801682c:	0001      	movs	r1, r0
 801682e:	001a      	movs	r2, r3
 8016830:	0018      	movs	r0, r3
 8016832:	f001 ff53 	bl	80186dc <__register_exitproc>
 8016836:	bd10      	pop	{r4, pc}

08016838 <quorem>:
 8016838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801683a:	6903      	ldr	r3, [r0, #16]
 801683c:	690c      	ldr	r4, [r1, #16]
 801683e:	b089      	sub	sp, #36	; 0x24
 8016840:	0007      	movs	r7, r0
 8016842:	9105      	str	r1, [sp, #20]
 8016844:	2600      	movs	r6, #0
 8016846:	42a3      	cmp	r3, r4
 8016848:	db65      	blt.n	8016916 <quorem+0xde>
 801684a:	000b      	movs	r3, r1
 801684c:	3c01      	subs	r4, #1
 801684e:	3314      	adds	r3, #20
 8016850:	00a5      	lsls	r5, r4, #2
 8016852:	9303      	str	r3, [sp, #12]
 8016854:	195b      	adds	r3, r3, r5
 8016856:	9304      	str	r3, [sp, #16]
 8016858:	0003      	movs	r3, r0
 801685a:	3314      	adds	r3, #20
 801685c:	9302      	str	r3, [sp, #8]
 801685e:	195d      	adds	r5, r3, r5
 8016860:	9b04      	ldr	r3, [sp, #16]
 8016862:	6828      	ldr	r0, [r5, #0]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	1c59      	adds	r1, r3, #1
 8016868:	9301      	str	r3, [sp, #4]
 801686a:	f7e9 fc71 	bl	8000150 <__udivsi3>
 801686e:	9001      	str	r0, [sp, #4]
 8016870:	42b0      	cmp	r0, r6
 8016872:	d029      	beq.n	80168c8 <quorem+0x90>
 8016874:	9b03      	ldr	r3, [sp, #12]
 8016876:	9802      	ldr	r0, [sp, #8]
 8016878:	469c      	mov	ip, r3
 801687a:	9606      	str	r6, [sp, #24]
 801687c:	4662      	mov	r2, ip
 801687e:	ca08      	ldmia	r2!, {r3}
 8016880:	4694      	mov	ip, r2
 8016882:	9a01      	ldr	r2, [sp, #4]
 8016884:	b299      	uxth	r1, r3
 8016886:	4351      	muls	r1, r2
 8016888:	0c1b      	lsrs	r3, r3, #16
 801688a:	4353      	muls	r3, r2
 801688c:	1989      	adds	r1, r1, r6
 801688e:	0c0a      	lsrs	r2, r1, #16
 8016890:	189b      	adds	r3, r3, r2
 8016892:	9307      	str	r3, [sp, #28]
 8016894:	0c1e      	lsrs	r6, r3, #16
 8016896:	6803      	ldr	r3, [r0, #0]
 8016898:	b289      	uxth	r1, r1
 801689a:	b29a      	uxth	r2, r3
 801689c:	9b06      	ldr	r3, [sp, #24]
 801689e:	18d2      	adds	r2, r2, r3
 80168a0:	6803      	ldr	r3, [r0, #0]
 80168a2:	1a52      	subs	r2, r2, r1
 80168a4:	0c19      	lsrs	r1, r3, #16
 80168a6:	466b      	mov	r3, sp
 80168a8:	8b9b      	ldrh	r3, [r3, #28]
 80168aa:	1acb      	subs	r3, r1, r3
 80168ac:	1411      	asrs	r1, r2, #16
 80168ae:	185b      	adds	r3, r3, r1
 80168b0:	1419      	asrs	r1, r3, #16
 80168b2:	b292      	uxth	r2, r2
 80168b4:	041b      	lsls	r3, r3, #16
 80168b6:	431a      	orrs	r2, r3
 80168b8:	9b04      	ldr	r3, [sp, #16]
 80168ba:	9106      	str	r1, [sp, #24]
 80168bc:	c004      	stmia	r0!, {r2}
 80168be:	4563      	cmp	r3, ip
 80168c0:	d2dc      	bcs.n	801687c <quorem+0x44>
 80168c2:	682b      	ldr	r3, [r5, #0]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d02d      	beq.n	8016924 <quorem+0xec>
 80168c8:	9905      	ldr	r1, [sp, #20]
 80168ca:	0038      	movs	r0, r7
 80168cc:	f001 fcb2 	bl	8018234 <__mcmp>
 80168d0:	2800      	cmp	r0, #0
 80168d2:	db1f      	blt.n	8016914 <quorem+0xdc>
 80168d4:	2500      	movs	r5, #0
 80168d6:	9b01      	ldr	r3, [sp, #4]
 80168d8:	9802      	ldr	r0, [sp, #8]
 80168da:	3301      	adds	r3, #1
 80168dc:	9903      	ldr	r1, [sp, #12]
 80168de:	9301      	str	r3, [sp, #4]
 80168e0:	6802      	ldr	r2, [r0, #0]
 80168e2:	c908      	ldmia	r1!, {r3}
 80168e4:	b292      	uxth	r2, r2
 80168e6:	1955      	adds	r5, r2, r5
 80168e8:	b29a      	uxth	r2, r3
 80168ea:	1aaa      	subs	r2, r5, r2
 80168ec:	6805      	ldr	r5, [r0, #0]
 80168ee:	0c1b      	lsrs	r3, r3, #16
 80168f0:	0c2d      	lsrs	r5, r5, #16
 80168f2:	1aeb      	subs	r3, r5, r3
 80168f4:	1415      	asrs	r5, r2, #16
 80168f6:	195b      	adds	r3, r3, r5
 80168f8:	141d      	asrs	r5, r3, #16
 80168fa:	b292      	uxth	r2, r2
 80168fc:	041b      	lsls	r3, r3, #16
 80168fe:	4313      	orrs	r3, r2
 8016900:	c008      	stmia	r0!, {r3}
 8016902:	9b04      	ldr	r3, [sp, #16]
 8016904:	428b      	cmp	r3, r1
 8016906:	d2eb      	bcs.n	80168e0 <quorem+0xa8>
 8016908:	9a02      	ldr	r2, [sp, #8]
 801690a:	00a3      	lsls	r3, r4, #2
 801690c:	18d3      	adds	r3, r2, r3
 801690e:	681a      	ldr	r2, [r3, #0]
 8016910:	2a00      	cmp	r2, #0
 8016912:	d011      	beq.n	8016938 <quorem+0x100>
 8016914:	9e01      	ldr	r6, [sp, #4]
 8016916:	0030      	movs	r0, r6
 8016918:	b009      	add	sp, #36	; 0x24
 801691a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801691c:	682b      	ldr	r3, [r5, #0]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d104      	bne.n	801692c <quorem+0xf4>
 8016922:	3c01      	subs	r4, #1
 8016924:	9b02      	ldr	r3, [sp, #8]
 8016926:	3d04      	subs	r5, #4
 8016928:	42ab      	cmp	r3, r5
 801692a:	d3f7      	bcc.n	801691c <quorem+0xe4>
 801692c:	613c      	str	r4, [r7, #16]
 801692e:	e7cb      	b.n	80168c8 <quorem+0x90>
 8016930:	681a      	ldr	r2, [r3, #0]
 8016932:	2a00      	cmp	r2, #0
 8016934:	d104      	bne.n	8016940 <quorem+0x108>
 8016936:	3c01      	subs	r4, #1
 8016938:	9a02      	ldr	r2, [sp, #8]
 801693a:	3b04      	subs	r3, #4
 801693c:	429a      	cmp	r2, r3
 801693e:	d3f7      	bcc.n	8016930 <quorem+0xf8>
 8016940:	613c      	str	r4, [r7, #16]
 8016942:	e7e7      	b.n	8016914 <quorem+0xdc>

08016944 <_dtoa_r>:
 8016944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016946:	0014      	movs	r4, r2
 8016948:	001d      	movs	r5, r3
 801694a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801694c:	b09b      	sub	sp, #108	; 0x6c
 801694e:	9002      	str	r0, [sp, #8]
 8016950:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8016952:	9406      	str	r4, [sp, #24]
 8016954:	9507      	str	r5, [sp, #28]
 8016956:	2900      	cmp	r1, #0
 8016958:	d009      	beq.n	801696e <_dtoa_r+0x2a>
 801695a:	2301      	movs	r3, #1
 801695c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801695e:	4093      	lsls	r3, r2
 8016960:	604a      	str	r2, [r1, #4]
 8016962:	608b      	str	r3, [r1, #8]
 8016964:	f001 fa6a 	bl	8017e3c <_Bfree>
 8016968:	2300      	movs	r3, #0
 801696a:	9a02      	ldr	r2, [sp, #8]
 801696c:	6413      	str	r3, [r2, #64]	; 0x40
 801696e:	2d00      	cmp	r5, #0
 8016970:	da20      	bge.n	80169b4 <_dtoa_r+0x70>
 8016972:	2301      	movs	r3, #1
 8016974:	6033      	str	r3, [r6, #0]
 8016976:	006b      	lsls	r3, r5, #1
 8016978:	085b      	lsrs	r3, r3, #1
 801697a:	9307      	str	r3, [sp, #28]
 801697c:	9c07      	ldr	r4, [sp, #28]
 801697e:	4bb2      	ldr	r3, [pc, #712]	; (8016c48 <_dtoa_r+0x304>)
 8016980:	0022      	movs	r2, r4
 8016982:	9317      	str	r3, [sp, #92]	; 0x5c
 8016984:	401a      	ands	r2, r3
 8016986:	429a      	cmp	r2, r3
 8016988:	d117      	bne.n	80169ba <_dtoa_r+0x76>
 801698a:	4bb0      	ldr	r3, [pc, #704]	; (8016c4c <_dtoa_r+0x308>)
 801698c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801698e:	6013      	str	r3, [r2, #0]
 8016990:	9b06      	ldr	r3, [sp, #24]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d103      	bne.n	801699e <_dtoa_r+0x5a>
 8016996:	0324      	lsls	r4, r4, #12
 8016998:	d101      	bne.n	801699e <_dtoa_r+0x5a>
 801699a:	f000 fd89 	bl	80174b0 <_dtoa_r+0xb6c>
 801699e:	4bac      	ldr	r3, [pc, #688]	; (8016c50 <_dtoa_r+0x30c>)
 80169a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80169a2:	9308      	str	r3, [sp, #32]
 80169a4:	2a00      	cmp	r2, #0
 80169a6:	d002      	beq.n	80169ae <_dtoa_r+0x6a>
 80169a8:	4baa      	ldr	r3, [pc, #680]	; (8016c54 <_dtoa_r+0x310>)
 80169aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80169ac:	6013      	str	r3, [r2, #0]
 80169ae:	9808      	ldr	r0, [sp, #32]
 80169b0:	b01b      	add	sp, #108	; 0x6c
 80169b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169b4:	2300      	movs	r3, #0
 80169b6:	6033      	str	r3, [r6, #0]
 80169b8:	e7e0      	b.n	801697c <_dtoa_r+0x38>
 80169ba:	9e06      	ldr	r6, [sp, #24]
 80169bc:	9f07      	ldr	r7, [sp, #28]
 80169be:	2200      	movs	r2, #0
 80169c0:	2300      	movs	r3, #0
 80169c2:	0030      	movs	r0, r6
 80169c4:	0039      	movs	r1, r7
 80169c6:	f7e9 fd49 	bl	800045c <__aeabi_dcmpeq>
 80169ca:	1e05      	subs	r5, r0, #0
 80169cc:	d00b      	beq.n	80169e6 <_dtoa_r+0xa2>
 80169ce:	2301      	movs	r3, #1
 80169d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80169d2:	6013      	str	r3, [r2, #0]
 80169d4:	4ba0      	ldr	r3, [pc, #640]	; (8016c58 <_dtoa_r+0x314>)
 80169d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80169d8:	9308      	str	r3, [sp, #32]
 80169da:	2a00      	cmp	r2, #0
 80169dc:	d0e7      	beq.n	80169ae <_dtoa_r+0x6a>
 80169de:	4a9f      	ldr	r2, [pc, #636]	; (8016c5c <_dtoa_r+0x318>)
 80169e0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80169e2:	600a      	str	r2, [r1, #0]
 80169e4:	e7e3      	b.n	80169ae <_dtoa_r+0x6a>
 80169e6:	ab18      	add	r3, sp, #96	; 0x60
 80169e8:	9301      	str	r3, [sp, #4]
 80169ea:	ab19      	add	r3, sp, #100	; 0x64
 80169ec:	9300      	str	r3, [sp, #0]
 80169ee:	0032      	movs	r2, r6
 80169f0:	003b      	movs	r3, r7
 80169f2:	9802      	ldr	r0, [sp, #8]
 80169f4:	f001 fd0e 	bl	8018414 <__d2b>
 80169f8:	0063      	lsls	r3, r4, #1
 80169fa:	9003      	str	r0, [sp, #12]
 80169fc:	0d5b      	lsrs	r3, r3, #21
 80169fe:	d074      	beq.n	8016aea <_dtoa_r+0x1a6>
 8016a00:	033a      	lsls	r2, r7, #12
 8016a02:	4c97      	ldr	r4, [pc, #604]	; (8016c60 <_dtoa_r+0x31c>)
 8016a04:	0b12      	lsrs	r2, r2, #12
 8016a06:	4314      	orrs	r4, r2
 8016a08:	0021      	movs	r1, r4
 8016a0a:	4a96      	ldr	r2, [pc, #600]	; (8016c64 <_dtoa_r+0x320>)
 8016a0c:	0030      	movs	r0, r6
 8016a0e:	9516      	str	r5, [sp, #88]	; 0x58
 8016a10:	189e      	adds	r6, r3, r2
 8016a12:	2200      	movs	r2, #0
 8016a14:	4b94      	ldr	r3, [pc, #592]	; (8016c68 <_dtoa_r+0x324>)
 8016a16:	f7eb fdb5 	bl	8002584 <__aeabi_dsub>
 8016a1a:	4a94      	ldr	r2, [pc, #592]	; (8016c6c <_dtoa_r+0x328>)
 8016a1c:	4b94      	ldr	r3, [pc, #592]	; (8016c70 <_dtoa_r+0x32c>)
 8016a1e:	f7eb fb3f 	bl	80020a0 <__aeabi_dmul>
 8016a22:	4a94      	ldr	r2, [pc, #592]	; (8016c74 <_dtoa_r+0x330>)
 8016a24:	4b94      	ldr	r3, [pc, #592]	; (8016c78 <_dtoa_r+0x334>)
 8016a26:	f7ea fc15 	bl	8001254 <__aeabi_dadd>
 8016a2a:	0004      	movs	r4, r0
 8016a2c:	0030      	movs	r0, r6
 8016a2e:	000d      	movs	r5, r1
 8016a30:	f7ec f942 	bl	8002cb8 <__aeabi_i2d>
 8016a34:	4a91      	ldr	r2, [pc, #580]	; (8016c7c <_dtoa_r+0x338>)
 8016a36:	4b92      	ldr	r3, [pc, #584]	; (8016c80 <_dtoa_r+0x33c>)
 8016a38:	f7eb fb32 	bl	80020a0 <__aeabi_dmul>
 8016a3c:	0002      	movs	r2, r0
 8016a3e:	000b      	movs	r3, r1
 8016a40:	0020      	movs	r0, r4
 8016a42:	0029      	movs	r1, r5
 8016a44:	f7ea fc06 	bl	8001254 <__aeabi_dadd>
 8016a48:	0004      	movs	r4, r0
 8016a4a:	000d      	movs	r5, r1
 8016a4c:	f7ec f8fe 	bl	8002c4c <__aeabi_d2iz>
 8016a50:	2200      	movs	r2, #0
 8016a52:	0007      	movs	r7, r0
 8016a54:	2300      	movs	r3, #0
 8016a56:	0020      	movs	r0, r4
 8016a58:	0029      	movs	r1, r5
 8016a5a:	f7e9 fd05 	bl	8000468 <__aeabi_dcmplt>
 8016a5e:	2800      	cmp	r0, #0
 8016a60:	d009      	beq.n	8016a76 <_dtoa_r+0x132>
 8016a62:	0038      	movs	r0, r7
 8016a64:	f7ec f928 	bl	8002cb8 <__aeabi_i2d>
 8016a68:	002b      	movs	r3, r5
 8016a6a:	0022      	movs	r2, r4
 8016a6c:	f7e9 fcf6 	bl	800045c <__aeabi_dcmpeq>
 8016a70:	4243      	negs	r3, r0
 8016a72:	4158      	adcs	r0, r3
 8016a74:	1a3f      	subs	r7, r7, r0
 8016a76:	2301      	movs	r3, #1
 8016a78:	9314      	str	r3, [sp, #80]	; 0x50
 8016a7a:	2f16      	cmp	r7, #22
 8016a7c:	d80d      	bhi.n	8016a9a <_dtoa_r+0x156>
 8016a7e:	4981      	ldr	r1, [pc, #516]	; (8016c84 <_dtoa_r+0x340>)
 8016a80:	00fb      	lsls	r3, r7, #3
 8016a82:	18c9      	adds	r1, r1, r3
 8016a84:	6808      	ldr	r0, [r1, #0]
 8016a86:	6849      	ldr	r1, [r1, #4]
 8016a88:	9a06      	ldr	r2, [sp, #24]
 8016a8a:	9b07      	ldr	r3, [sp, #28]
 8016a8c:	f7e9 fd00 	bl	8000490 <__aeabi_dcmpgt>
 8016a90:	2800      	cmp	r0, #0
 8016a92:	d046      	beq.n	8016b22 <_dtoa_r+0x1de>
 8016a94:	2300      	movs	r3, #0
 8016a96:	3f01      	subs	r7, #1
 8016a98:	9314      	str	r3, [sp, #80]	; 0x50
 8016a9a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016a9c:	1b9e      	subs	r6, r3, r6
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	930a      	str	r3, [sp, #40]	; 0x28
 8016aa2:	0033      	movs	r3, r6
 8016aa4:	3b01      	subs	r3, #1
 8016aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8016aa8:	d504      	bpl.n	8016ab4 <_dtoa_r+0x170>
 8016aaa:	2301      	movs	r3, #1
 8016aac:	1b9b      	subs	r3, r3, r6
 8016aae:	930a      	str	r3, [sp, #40]	; 0x28
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ab4:	2f00      	cmp	r7, #0
 8016ab6:	db36      	blt.n	8016b26 <_dtoa_r+0x1e2>
 8016ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016aba:	9711      	str	r7, [sp, #68]	; 0x44
 8016abc:	19db      	adds	r3, r3, r7
 8016abe:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	9304      	str	r3, [sp, #16]
 8016ac4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016ac6:	2401      	movs	r4, #1
 8016ac8:	2b09      	cmp	r3, #9
 8016aca:	d900      	bls.n	8016ace <_dtoa_r+0x18a>
 8016acc:	e082      	b.n	8016bd4 <_dtoa_r+0x290>
 8016ace:	2b05      	cmp	r3, #5
 8016ad0:	dd02      	ble.n	8016ad8 <_dtoa_r+0x194>
 8016ad2:	2400      	movs	r4, #0
 8016ad4:	3b04      	subs	r3, #4
 8016ad6:	9320      	str	r3, [sp, #128]	; 0x80
 8016ad8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016ada:	1e98      	subs	r0, r3, #2
 8016adc:	2803      	cmp	r0, #3
 8016ade:	d900      	bls.n	8016ae2 <_dtoa_r+0x19e>
 8016ae0:	e082      	b.n	8016be8 <_dtoa_r+0x2a4>
 8016ae2:	f7e9 fb21 	bl	8000128 <__gnu_thumb1_case_uqi>
 8016ae6:	7573      	.short	0x7573
 8016ae8:	6828      	.short	0x6828
 8016aea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016aec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016aee:	189e      	adds	r6, r3, r2
 8016af0:	4b65      	ldr	r3, [pc, #404]	; (8016c88 <_dtoa_r+0x344>)
 8016af2:	18f2      	adds	r2, r6, r3
 8016af4:	2a20      	cmp	r2, #32
 8016af6:	dd0f      	ble.n	8016b18 <_dtoa_r+0x1d4>
 8016af8:	2340      	movs	r3, #64	; 0x40
 8016afa:	1a9b      	subs	r3, r3, r2
 8016afc:	409c      	lsls	r4, r3
 8016afe:	4b63      	ldr	r3, [pc, #396]	; (8016c8c <_dtoa_r+0x348>)
 8016b00:	9806      	ldr	r0, [sp, #24]
 8016b02:	18f3      	adds	r3, r6, r3
 8016b04:	40d8      	lsrs	r0, r3
 8016b06:	4320      	orrs	r0, r4
 8016b08:	f7ec f910 	bl	8002d2c <__aeabi_ui2d>
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	4c60      	ldr	r4, [pc, #384]	; (8016c90 <_dtoa_r+0x34c>)
 8016b10:	3e01      	subs	r6, #1
 8016b12:	1909      	adds	r1, r1, r4
 8016b14:	9316      	str	r3, [sp, #88]	; 0x58
 8016b16:	e77c      	b.n	8016a12 <_dtoa_r+0xce>
 8016b18:	2320      	movs	r3, #32
 8016b1a:	9806      	ldr	r0, [sp, #24]
 8016b1c:	1a9b      	subs	r3, r3, r2
 8016b1e:	4098      	lsls	r0, r3
 8016b20:	e7f2      	b.n	8016b08 <_dtoa_r+0x1c4>
 8016b22:	9014      	str	r0, [sp, #80]	; 0x50
 8016b24:	e7b9      	b.n	8016a9a <_dtoa_r+0x156>
 8016b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b28:	1bdb      	subs	r3, r3, r7
 8016b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8016b2c:	427b      	negs	r3, r7
 8016b2e:	9304      	str	r3, [sp, #16]
 8016b30:	2300      	movs	r3, #0
 8016b32:	9311      	str	r3, [sp, #68]	; 0x44
 8016b34:	e7c6      	b.n	8016ac4 <_dtoa_r+0x180>
 8016b36:	2301      	movs	r3, #1
 8016b38:	930d      	str	r3, [sp, #52]	; 0x34
 8016b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	dd57      	ble.n	8016bf0 <_dtoa_r+0x2ac>
 8016b40:	930c      	str	r3, [sp, #48]	; 0x30
 8016b42:	9309      	str	r3, [sp, #36]	; 0x24
 8016b44:	2200      	movs	r2, #0
 8016b46:	9902      	ldr	r1, [sp, #8]
 8016b48:	644a      	str	r2, [r1, #68]	; 0x44
 8016b4a:	3204      	adds	r2, #4
 8016b4c:	0010      	movs	r0, r2
 8016b4e:	9902      	ldr	r1, [sp, #8]
 8016b50:	3014      	adds	r0, #20
 8016b52:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8016b54:	4298      	cmp	r0, r3
 8016b56:	d950      	bls.n	8016bfa <_dtoa_r+0x2b6>
 8016b58:	9802      	ldr	r0, [sp, #8]
 8016b5a:	f001 f947 	bl	8017dec <_Balloc>
 8016b5e:	9b02      	ldr	r3, [sp, #8]
 8016b60:	9008      	str	r0, [sp, #32]
 8016b62:	6418      	str	r0, [r3, #64]	; 0x40
 8016b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b66:	2b0e      	cmp	r3, #14
 8016b68:	d900      	bls.n	8016b6c <_dtoa_r+0x228>
 8016b6a:	e10c      	b.n	8016d86 <_dtoa_r+0x442>
 8016b6c:	2c00      	cmp	r4, #0
 8016b6e:	d100      	bne.n	8016b72 <_dtoa_r+0x22e>
 8016b70:	e109      	b.n	8016d86 <_dtoa_r+0x442>
 8016b72:	9b06      	ldr	r3, [sp, #24]
 8016b74:	9c07      	ldr	r4, [sp, #28]
 8016b76:	9312      	str	r3, [sp, #72]	; 0x48
 8016b78:	9413      	str	r4, [sp, #76]	; 0x4c
 8016b7a:	2f00      	cmp	r7, #0
 8016b7c:	dc00      	bgt.n	8016b80 <_dtoa_r+0x23c>
 8016b7e:	e08b      	b.n	8016c98 <_dtoa_r+0x354>
 8016b80:	210f      	movs	r1, #15
 8016b82:	003a      	movs	r2, r7
 8016b84:	4b3f      	ldr	r3, [pc, #252]	; (8016c84 <_dtoa_r+0x340>)
 8016b86:	400a      	ands	r2, r1
 8016b88:	00d2      	lsls	r2, r2, #3
 8016b8a:	189b      	adds	r3, r3, r2
 8016b8c:	681d      	ldr	r5, [r3, #0]
 8016b8e:	685e      	ldr	r6, [r3, #4]
 8016b90:	2302      	movs	r3, #2
 8016b92:	113c      	asrs	r4, r7, #4
 8016b94:	930e      	str	r3, [sp, #56]	; 0x38
 8016b96:	06e3      	lsls	r3, r4, #27
 8016b98:	d50b      	bpl.n	8016bb2 <_dtoa_r+0x26e>
 8016b9a:	4b3e      	ldr	r3, [pc, #248]	; (8016c94 <_dtoa_r+0x350>)
 8016b9c:	400c      	ands	r4, r1
 8016b9e:	6a1a      	ldr	r2, [r3, #32]
 8016ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ba2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016ba4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016ba6:	f7ea fe71 	bl	800188c <__aeabi_ddiv>
 8016baa:	2303      	movs	r3, #3
 8016bac:	9006      	str	r0, [sp, #24]
 8016bae:	9107      	str	r1, [sp, #28]
 8016bb0:	930e      	str	r3, [sp, #56]	; 0x38
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	e03b      	b.n	8016c2e <_dtoa_r+0x2ea>
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	930d      	str	r3, [sp, #52]	; 0x34
 8016bba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016bbc:	18fb      	adds	r3, r7, r3
 8016bbe:	930c      	str	r3, [sp, #48]	; 0x30
 8016bc0:	3301      	adds	r3, #1
 8016bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	dcbd      	bgt.n	8016b44 <_dtoa_r+0x200>
 8016bc8:	2301      	movs	r3, #1
 8016bca:	e7bb      	b.n	8016b44 <_dtoa_r+0x200>
 8016bcc:	2300      	movs	r3, #0
 8016bce:	e7b3      	b.n	8016b38 <_dtoa_r+0x1f4>
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	e7f1      	b.n	8016bb8 <_dtoa_r+0x274>
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	940d      	str	r4, [sp, #52]	; 0x34
 8016bd8:	9320      	str	r3, [sp, #128]	; 0x80
 8016bda:	3b01      	subs	r3, #1
 8016bdc:	2200      	movs	r2, #0
 8016bde:	930c      	str	r3, [sp, #48]	; 0x30
 8016be0:	9309      	str	r3, [sp, #36]	; 0x24
 8016be2:	3313      	adds	r3, #19
 8016be4:	9221      	str	r2, [sp, #132]	; 0x84
 8016be6:	e7ad      	b.n	8016b44 <_dtoa_r+0x200>
 8016be8:	2301      	movs	r3, #1
 8016bea:	930d      	str	r3, [sp, #52]	; 0x34
 8016bec:	3b02      	subs	r3, #2
 8016bee:	e7f5      	b.n	8016bdc <_dtoa_r+0x298>
 8016bf0:	2301      	movs	r3, #1
 8016bf2:	930c      	str	r3, [sp, #48]	; 0x30
 8016bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8016bf6:	001a      	movs	r2, r3
 8016bf8:	e7f4      	b.n	8016be4 <_dtoa_r+0x2a0>
 8016bfa:	9802      	ldr	r0, [sp, #8]
 8016bfc:	3101      	adds	r1, #1
 8016bfe:	6441      	str	r1, [r0, #68]	; 0x44
 8016c00:	0052      	lsls	r2, r2, #1
 8016c02:	e7a3      	b.n	8016b4c <_dtoa_r+0x208>
 8016c04:	2301      	movs	r3, #1
 8016c06:	421c      	tst	r4, r3
 8016c08:	d00e      	beq.n	8016c28 <_dtoa_r+0x2e4>
 8016c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c0c:	4a21      	ldr	r2, [pc, #132]	; (8016c94 <_dtoa_r+0x350>)
 8016c0e:	3301      	adds	r3, #1
 8016c10:	930e      	str	r3, [sp, #56]	; 0x38
 8016c12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c14:	0028      	movs	r0, r5
 8016c16:	00db      	lsls	r3, r3, #3
 8016c18:	189b      	adds	r3, r3, r2
 8016c1a:	0031      	movs	r1, r6
 8016c1c:	681a      	ldr	r2, [r3, #0]
 8016c1e:	685b      	ldr	r3, [r3, #4]
 8016c20:	f7eb fa3e 	bl	80020a0 <__aeabi_dmul>
 8016c24:	0005      	movs	r5, r0
 8016c26:	000e      	movs	r6, r1
 8016c28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c2a:	1064      	asrs	r4, r4, #1
 8016c2c:	3301      	adds	r3, #1
 8016c2e:	9310      	str	r3, [sp, #64]	; 0x40
 8016c30:	2c00      	cmp	r4, #0
 8016c32:	d1e7      	bne.n	8016c04 <_dtoa_r+0x2c0>
 8016c34:	9806      	ldr	r0, [sp, #24]
 8016c36:	9907      	ldr	r1, [sp, #28]
 8016c38:	002a      	movs	r2, r5
 8016c3a:	0033      	movs	r3, r6
 8016c3c:	f7ea fe26 	bl	800188c <__aeabi_ddiv>
 8016c40:	9006      	str	r0, [sp, #24]
 8016c42:	9107      	str	r1, [sp, #28]
 8016c44:	e043      	b.n	8016cce <_dtoa_r+0x38a>
 8016c46:	46c0      	nop			; (mov r8, r8)
 8016c48:	7ff00000 	.word	0x7ff00000
 8016c4c:	0000270f 	.word	0x0000270f
 8016c50:	0801c11e 	.word	0x0801c11e
 8016c54:	0801c121 	.word	0x0801c121
 8016c58:	0801bff2 	.word	0x0801bff2
 8016c5c:	0801bff3 	.word	0x0801bff3
 8016c60:	3ff00000 	.word	0x3ff00000
 8016c64:	fffffc01 	.word	0xfffffc01
 8016c68:	3ff80000 	.word	0x3ff80000
 8016c6c:	636f4361 	.word	0x636f4361
 8016c70:	3fd287a7 	.word	0x3fd287a7
 8016c74:	8b60c8b3 	.word	0x8b60c8b3
 8016c78:	3fc68a28 	.word	0x3fc68a28
 8016c7c:	509f79fb 	.word	0x509f79fb
 8016c80:	3fd34413 	.word	0x3fd34413
 8016c84:	0801c150 	.word	0x0801c150
 8016c88:	00000432 	.word	0x00000432
 8016c8c:	00000412 	.word	0x00000412
 8016c90:	fe100000 	.word	0xfe100000
 8016c94:	0801c128 	.word	0x0801c128
 8016c98:	2302      	movs	r3, #2
 8016c9a:	930e      	str	r3, [sp, #56]	; 0x38
 8016c9c:	2f00      	cmp	r7, #0
 8016c9e:	d016      	beq.n	8016cce <_dtoa_r+0x38a>
 8016ca0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016ca2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016ca4:	427c      	negs	r4, r7
 8016ca6:	330d      	adds	r3, #13
 8016ca8:	4023      	ands	r3, r4
 8016caa:	4acf      	ldr	r2, [pc, #828]	; (8016fe8 <_dtoa_r+0x6a4>)
 8016cac:	00db      	lsls	r3, r3, #3
 8016cae:	18d3      	adds	r3, r2, r3
 8016cb0:	681a      	ldr	r2, [r3, #0]
 8016cb2:	685b      	ldr	r3, [r3, #4]
 8016cb4:	f7eb f9f4 	bl	80020a0 <__aeabi_dmul>
 8016cb8:	2300      	movs	r3, #0
 8016cba:	2601      	movs	r6, #1
 8016cbc:	001d      	movs	r5, r3
 8016cbe:	9006      	str	r0, [sp, #24]
 8016cc0:	9107      	str	r1, [sp, #28]
 8016cc2:	1124      	asrs	r4, r4, #4
 8016cc4:	2c00      	cmp	r4, #0
 8016cc6:	d000      	beq.n	8016cca <_dtoa_r+0x386>
 8016cc8:	e08c      	b.n	8016de4 <_dtoa_r+0x4a0>
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d1b8      	bne.n	8016c40 <_dtoa_r+0x2fc>
 8016cce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d100      	bne.n	8016cd6 <_dtoa_r+0x392>
 8016cd4:	e096      	b.n	8016e04 <_dtoa_r+0x4c0>
 8016cd6:	9c06      	ldr	r4, [sp, #24]
 8016cd8:	9d07      	ldr	r5, [sp, #28]
 8016cda:	2200      	movs	r2, #0
 8016cdc:	4bc3      	ldr	r3, [pc, #780]	; (8016fec <_dtoa_r+0x6a8>)
 8016cde:	0020      	movs	r0, r4
 8016ce0:	0029      	movs	r1, r5
 8016ce2:	f7e9 fbc1 	bl	8000468 <__aeabi_dcmplt>
 8016ce6:	2800      	cmp	r0, #0
 8016ce8:	d100      	bne.n	8016cec <_dtoa_r+0x3a8>
 8016cea:	e08b      	b.n	8016e04 <_dtoa_r+0x4c0>
 8016cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d100      	bne.n	8016cf4 <_dtoa_r+0x3b0>
 8016cf2:	e087      	b.n	8016e04 <_dtoa_r+0x4c0>
 8016cf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	dd41      	ble.n	8016d7e <_dtoa_r+0x43a>
 8016cfa:	4bbd      	ldr	r3, [pc, #756]	; (8016ff0 <_dtoa_r+0x6ac>)
 8016cfc:	2200      	movs	r2, #0
 8016cfe:	0020      	movs	r0, r4
 8016d00:	0029      	movs	r1, r5
 8016d02:	f7eb f9cd 	bl	80020a0 <__aeabi_dmul>
 8016d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d08:	9006      	str	r0, [sp, #24]
 8016d0a:	9107      	str	r1, [sp, #28]
 8016d0c:	3301      	adds	r3, #1
 8016d0e:	930e      	str	r3, [sp, #56]	; 0x38
 8016d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d12:	1e7e      	subs	r6, r7, #1
 8016d14:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016d16:	9310      	str	r3, [sp, #64]	; 0x40
 8016d18:	f7eb ffce 	bl	8002cb8 <__aeabi_i2d>
 8016d1c:	9a06      	ldr	r2, [sp, #24]
 8016d1e:	9b07      	ldr	r3, [sp, #28]
 8016d20:	f7eb f9be 	bl	80020a0 <__aeabi_dmul>
 8016d24:	2200      	movs	r2, #0
 8016d26:	4bb3      	ldr	r3, [pc, #716]	; (8016ff4 <_dtoa_r+0x6b0>)
 8016d28:	f7ea fa94 	bl	8001254 <__aeabi_dadd>
 8016d2c:	4ab2      	ldr	r2, [pc, #712]	; (8016ff8 <_dtoa_r+0x6b4>)
 8016d2e:	900e      	str	r0, [sp, #56]	; 0x38
 8016d30:	910f      	str	r1, [sp, #60]	; 0x3c
 8016d32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016d34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016d36:	4694      	mov	ip, r2
 8016d38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d3a:	4463      	add	r3, ip
 8016d3c:	9315      	str	r3, [sp, #84]	; 0x54
 8016d3e:	001d      	movs	r5, r3
 8016d40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d161      	bne.n	8016e0a <_dtoa_r+0x4c6>
 8016d46:	9806      	ldr	r0, [sp, #24]
 8016d48:	9907      	ldr	r1, [sp, #28]
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	4bab      	ldr	r3, [pc, #684]	; (8016ffc <_dtoa_r+0x6b8>)
 8016d4e:	f7eb fc19 	bl	8002584 <__aeabi_dsub>
 8016d52:	0022      	movs	r2, r4
 8016d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d56:	9006      	str	r0, [sp, #24]
 8016d58:	9107      	str	r1, [sp, #28]
 8016d5a:	f7e9 fb99 	bl	8000490 <__aeabi_dcmpgt>
 8016d5e:	2800      	cmp	r0, #0
 8016d60:	d000      	beq.n	8016d64 <_dtoa_r+0x420>
 8016d62:	e2aa      	b.n	80172ba <_dtoa_r+0x976>
 8016d64:	48a6      	ldr	r0, [pc, #664]	; (8017000 <_dtoa_r+0x6bc>)
 8016d66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016d68:	4684      	mov	ip, r0
 8016d6a:	4461      	add	r1, ip
 8016d6c:	000b      	movs	r3, r1
 8016d6e:	9806      	ldr	r0, [sp, #24]
 8016d70:	9907      	ldr	r1, [sp, #28]
 8016d72:	0022      	movs	r2, r4
 8016d74:	f7e9 fb78 	bl	8000468 <__aeabi_dcmplt>
 8016d78:	2800      	cmp	r0, #0
 8016d7a:	d000      	beq.n	8016d7e <_dtoa_r+0x43a>
 8016d7c:	e297      	b.n	80172ae <_dtoa_r+0x96a>
 8016d7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016d80:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016d82:	9306      	str	r3, [sp, #24]
 8016d84:	9407      	str	r4, [sp, #28]
 8016d86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	da00      	bge.n	8016d8e <_dtoa_r+0x44a>
 8016d8c:	e15e      	b.n	801704c <_dtoa_r+0x708>
 8016d8e:	2f0e      	cmp	r7, #14
 8016d90:	dd00      	ble.n	8016d94 <_dtoa_r+0x450>
 8016d92:	e15b      	b.n	801704c <_dtoa_r+0x708>
 8016d94:	4b94      	ldr	r3, [pc, #592]	; (8016fe8 <_dtoa_r+0x6a4>)
 8016d96:	00fa      	lsls	r2, r7, #3
 8016d98:	189b      	adds	r3, r3, r2
 8016d9a:	685c      	ldr	r4, [r3, #4]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	9304      	str	r3, [sp, #16]
 8016da0:	9405      	str	r4, [sp, #20]
 8016da2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	db00      	blt.n	8016daa <_dtoa_r+0x466>
 8016da8:	e0da      	b.n	8016f60 <_dtoa_r+0x61c>
 8016daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	dd00      	ble.n	8016db2 <_dtoa_r+0x46e>
 8016db0:	e0d6      	b.n	8016f60 <_dtoa_r+0x61c>
 8016db2:	d000      	beq.n	8016db6 <_dtoa_r+0x472>
 8016db4:	e27f      	b.n	80172b6 <_dtoa_r+0x972>
 8016db6:	9804      	ldr	r0, [sp, #16]
 8016db8:	9905      	ldr	r1, [sp, #20]
 8016dba:	2200      	movs	r2, #0
 8016dbc:	4b8f      	ldr	r3, [pc, #572]	; (8016ffc <_dtoa_r+0x6b8>)
 8016dbe:	f7eb f96f 	bl	80020a0 <__aeabi_dmul>
 8016dc2:	9a06      	ldr	r2, [sp, #24]
 8016dc4:	9b07      	ldr	r3, [sp, #28]
 8016dc6:	f7e9 fb6d 	bl	80004a4 <__aeabi_dcmpge>
 8016dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dcc:	9304      	str	r3, [sp, #16]
 8016dce:	001e      	movs	r6, r3
 8016dd0:	2800      	cmp	r0, #0
 8016dd2:	d000      	beq.n	8016dd6 <_dtoa_r+0x492>
 8016dd4:	e251      	b.n	801727a <_dtoa_r+0x936>
 8016dd6:	9b08      	ldr	r3, [sp, #32]
 8016dd8:	9a08      	ldr	r2, [sp, #32]
 8016dda:	1c5d      	adds	r5, r3, #1
 8016ddc:	2331      	movs	r3, #49	; 0x31
 8016dde:	3701      	adds	r7, #1
 8016de0:	7013      	strb	r3, [r2, #0]
 8016de2:	e24d      	b.n	8017280 <_dtoa_r+0x93c>
 8016de4:	4234      	tst	r4, r6
 8016de6:	d00a      	beq.n	8016dfe <_dtoa_r+0x4ba>
 8016de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016dea:	4a86      	ldr	r2, [pc, #536]	; (8017004 <_dtoa_r+0x6c0>)
 8016dec:	3301      	adds	r3, #1
 8016dee:	930e      	str	r3, [sp, #56]	; 0x38
 8016df0:	00eb      	lsls	r3, r5, #3
 8016df2:	189b      	adds	r3, r3, r2
 8016df4:	681a      	ldr	r2, [r3, #0]
 8016df6:	685b      	ldr	r3, [r3, #4]
 8016df8:	f7eb f952 	bl	80020a0 <__aeabi_dmul>
 8016dfc:	0033      	movs	r3, r6
 8016dfe:	1064      	asrs	r4, r4, #1
 8016e00:	3501      	adds	r5, #1
 8016e02:	e75f      	b.n	8016cc4 <_dtoa_r+0x380>
 8016e04:	003e      	movs	r6, r7
 8016e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e08:	e784      	b.n	8016d14 <_dtoa_r+0x3d0>
 8016e0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e0c:	1e5a      	subs	r2, r3, #1
 8016e0e:	4b76      	ldr	r3, [pc, #472]	; (8016fe8 <_dtoa_r+0x6a4>)
 8016e10:	00d2      	lsls	r2, r2, #3
 8016e12:	189b      	adds	r3, r3, r2
 8016e14:	6818      	ldr	r0, [r3, #0]
 8016e16:	6859      	ldr	r1, [r3, #4]
 8016e18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d04b      	beq.n	8016eb6 <_dtoa_r+0x572>
 8016e1e:	0002      	movs	r2, r0
 8016e20:	000b      	movs	r3, r1
 8016e22:	2000      	movs	r0, #0
 8016e24:	4978      	ldr	r1, [pc, #480]	; (8017008 <_dtoa_r+0x6c4>)
 8016e26:	f7ea fd31 	bl	800188c <__aeabi_ddiv>
 8016e2a:	002b      	movs	r3, r5
 8016e2c:	0022      	movs	r2, r4
 8016e2e:	f7eb fba9 	bl	8002584 <__aeabi_dsub>
 8016e32:	9b08      	ldr	r3, [sp, #32]
 8016e34:	900e      	str	r0, [sp, #56]	; 0x38
 8016e36:	910f      	str	r1, [sp, #60]	; 0x3c
 8016e38:	9315      	str	r3, [sp, #84]	; 0x54
 8016e3a:	9806      	ldr	r0, [sp, #24]
 8016e3c:	9907      	ldr	r1, [sp, #28]
 8016e3e:	f7eb ff05 	bl	8002c4c <__aeabi_d2iz>
 8016e42:	0004      	movs	r4, r0
 8016e44:	f7eb ff38 	bl	8002cb8 <__aeabi_i2d>
 8016e48:	0002      	movs	r2, r0
 8016e4a:	000b      	movs	r3, r1
 8016e4c:	9806      	ldr	r0, [sp, #24]
 8016e4e:	9907      	ldr	r1, [sp, #28]
 8016e50:	f7eb fb98 	bl	8002584 <__aeabi_dsub>
 8016e54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016e56:	3430      	adds	r4, #48	; 0x30
 8016e58:	1c5d      	adds	r5, r3, #1
 8016e5a:	701c      	strb	r4, [r3, #0]
 8016e5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e60:	9006      	str	r0, [sp, #24]
 8016e62:	9107      	str	r1, [sp, #28]
 8016e64:	f7e9 fb00 	bl	8000468 <__aeabi_dcmplt>
 8016e68:	2800      	cmp	r0, #0
 8016e6a:	d16c      	bne.n	8016f46 <_dtoa_r+0x602>
 8016e6c:	9a06      	ldr	r2, [sp, #24]
 8016e6e:	9b07      	ldr	r3, [sp, #28]
 8016e70:	2000      	movs	r0, #0
 8016e72:	495e      	ldr	r1, [pc, #376]	; (8016fec <_dtoa_r+0x6a8>)
 8016e74:	f7eb fb86 	bl	8002584 <__aeabi_dsub>
 8016e78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e7c:	f7e9 faf4 	bl	8000468 <__aeabi_dcmplt>
 8016e80:	2800      	cmp	r0, #0
 8016e82:	d000      	beq.n	8016e86 <_dtoa_r+0x542>
 8016e84:	e0c3      	b.n	801700e <_dtoa_r+0x6ca>
 8016e86:	9b08      	ldr	r3, [sp, #32]
 8016e88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016e8a:	1aeb      	subs	r3, r5, r3
 8016e8c:	429a      	cmp	r2, r3
 8016e8e:	dc00      	bgt.n	8016e92 <_dtoa_r+0x54e>
 8016e90:	e775      	b.n	8016d7e <_dtoa_r+0x43a>
 8016e92:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016e94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016e96:	2200      	movs	r2, #0
 8016e98:	4b55      	ldr	r3, [pc, #340]	; (8016ff0 <_dtoa_r+0x6ac>)
 8016e9a:	f7eb f901 	bl	80020a0 <__aeabi_dmul>
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	900e      	str	r0, [sp, #56]	; 0x38
 8016ea2:	910f      	str	r1, [sp, #60]	; 0x3c
 8016ea4:	9806      	ldr	r0, [sp, #24]
 8016ea6:	9907      	ldr	r1, [sp, #28]
 8016ea8:	4b51      	ldr	r3, [pc, #324]	; (8016ff0 <_dtoa_r+0x6ac>)
 8016eaa:	f7eb f8f9 	bl	80020a0 <__aeabi_dmul>
 8016eae:	9515      	str	r5, [sp, #84]	; 0x54
 8016eb0:	9006      	str	r0, [sp, #24]
 8016eb2:	9107      	str	r1, [sp, #28]
 8016eb4:	e7c1      	b.n	8016e3a <_dtoa_r+0x4f6>
 8016eb6:	0022      	movs	r2, r4
 8016eb8:	002b      	movs	r3, r5
 8016eba:	f7eb f8f1 	bl	80020a0 <__aeabi_dmul>
 8016ebe:	9c08      	ldr	r4, [sp, #32]
 8016ec0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016ec2:	0023      	movs	r3, r4
 8016ec4:	4694      	mov	ip, r2
 8016ec6:	900e      	str	r0, [sp, #56]	; 0x38
 8016ec8:	910f      	str	r1, [sp, #60]	; 0x3c
 8016eca:	4463      	add	r3, ip
 8016ecc:	9315      	str	r3, [sp, #84]	; 0x54
 8016ece:	9806      	ldr	r0, [sp, #24]
 8016ed0:	9907      	ldr	r1, [sp, #28]
 8016ed2:	f7eb febb 	bl	8002c4c <__aeabi_d2iz>
 8016ed6:	0005      	movs	r5, r0
 8016ed8:	f7eb feee 	bl	8002cb8 <__aeabi_i2d>
 8016edc:	000b      	movs	r3, r1
 8016ede:	0002      	movs	r2, r0
 8016ee0:	9806      	ldr	r0, [sp, #24]
 8016ee2:	9907      	ldr	r1, [sp, #28]
 8016ee4:	f7eb fb4e 	bl	8002584 <__aeabi_dsub>
 8016ee8:	3530      	adds	r5, #48	; 0x30
 8016eea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016eec:	7025      	strb	r5, [r4, #0]
 8016eee:	3401      	adds	r4, #1
 8016ef0:	9006      	str	r0, [sp, #24]
 8016ef2:	9107      	str	r1, [sp, #28]
 8016ef4:	42a3      	cmp	r3, r4
 8016ef6:	d12a      	bne.n	8016f4e <_dtoa_r+0x60a>
 8016ef8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016efa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016efc:	9a08      	ldr	r2, [sp, #32]
 8016efe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f00:	4694      	mov	ip, r2
 8016f02:	4463      	add	r3, ip
 8016f04:	2200      	movs	r2, #0
 8016f06:	001d      	movs	r5, r3
 8016f08:	4b3f      	ldr	r3, [pc, #252]	; (8017008 <_dtoa_r+0x6c4>)
 8016f0a:	f7ea f9a3 	bl	8001254 <__aeabi_dadd>
 8016f0e:	0002      	movs	r2, r0
 8016f10:	000b      	movs	r3, r1
 8016f12:	9806      	ldr	r0, [sp, #24]
 8016f14:	9907      	ldr	r1, [sp, #28]
 8016f16:	f7e9 fabb 	bl	8000490 <__aeabi_dcmpgt>
 8016f1a:	2800      	cmp	r0, #0
 8016f1c:	d000      	beq.n	8016f20 <_dtoa_r+0x5dc>
 8016f1e:	e076      	b.n	801700e <_dtoa_r+0x6ca>
 8016f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f24:	2000      	movs	r0, #0
 8016f26:	4938      	ldr	r1, [pc, #224]	; (8017008 <_dtoa_r+0x6c4>)
 8016f28:	f7eb fb2c 	bl	8002584 <__aeabi_dsub>
 8016f2c:	0002      	movs	r2, r0
 8016f2e:	000b      	movs	r3, r1
 8016f30:	9806      	ldr	r0, [sp, #24]
 8016f32:	9907      	ldr	r1, [sp, #28]
 8016f34:	f7e9 fa98 	bl	8000468 <__aeabi_dcmplt>
 8016f38:	2800      	cmp	r0, #0
 8016f3a:	d100      	bne.n	8016f3e <_dtoa_r+0x5fa>
 8016f3c:	e71f      	b.n	8016d7e <_dtoa_r+0x43a>
 8016f3e:	1e6b      	subs	r3, r5, #1
 8016f40:	781a      	ldrb	r2, [r3, #0]
 8016f42:	2a30      	cmp	r2, #48	; 0x30
 8016f44:	d001      	beq.n	8016f4a <_dtoa_r+0x606>
 8016f46:	0037      	movs	r7, r6
 8016f48:	e03f      	b.n	8016fca <_dtoa_r+0x686>
 8016f4a:	001d      	movs	r5, r3
 8016f4c:	e7f7      	b.n	8016f3e <_dtoa_r+0x5fa>
 8016f4e:	9806      	ldr	r0, [sp, #24]
 8016f50:	9907      	ldr	r1, [sp, #28]
 8016f52:	2200      	movs	r2, #0
 8016f54:	4b26      	ldr	r3, [pc, #152]	; (8016ff0 <_dtoa_r+0x6ac>)
 8016f56:	f7eb f8a3 	bl	80020a0 <__aeabi_dmul>
 8016f5a:	9006      	str	r0, [sp, #24]
 8016f5c:	9107      	str	r1, [sp, #28]
 8016f5e:	e7b6      	b.n	8016ece <_dtoa_r+0x58a>
 8016f60:	9e08      	ldr	r6, [sp, #32]
 8016f62:	9a04      	ldr	r2, [sp, #16]
 8016f64:	9b05      	ldr	r3, [sp, #20]
 8016f66:	9806      	ldr	r0, [sp, #24]
 8016f68:	9907      	ldr	r1, [sp, #28]
 8016f6a:	f7ea fc8f 	bl	800188c <__aeabi_ddiv>
 8016f6e:	f7eb fe6d 	bl	8002c4c <__aeabi_d2iz>
 8016f72:	0004      	movs	r4, r0
 8016f74:	f7eb fea0 	bl	8002cb8 <__aeabi_i2d>
 8016f78:	9a04      	ldr	r2, [sp, #16]
 8016f7a:	9b05      	ldr	r3, [sp, #20]
 8016f7c:	f7eb f890 	bl	80020a0 <__aeabi_dmul>
 8016f80:	0002      	movs	r2, r0
 8016f82:	000b      	movs	r3, r1
 8016f84:	9806      	ldr	r0, [sp, #24]
 8016f86:	9907      	ldr	r1, [sp, #28]
 8016f88:	f7eb fafc 	bl	8002584 <__aeabi_dsub>
 8016f8c:	0023      	movs	r3, r4
 8016f8e:	3330      	adds	r3, #48	; 0x30
 8016f90:	7033      	strb	r3, [r6, #0]
 8016f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f94:	9b08      	ldr	r3, [sp, #32]
 8016f96:	1c75      	adds	r5, r6, #1
 8016f98:	1aeb      	subs	r3, r5, r3
 8016f9a:	429a      	cmp	r2, r3
 8016f9c:	d148      	bne.n	8017030 <_dtoa_r+0x6ec>
 8016f9e:	0002      	movs	r2, r0
 8016fa0:	000b      	movs	r3, r1
 8016fa2:	f7ea f957 	bl	8001254 <__aeabi_dadd>
 8016fa6:	9a04      	ldr	r2, [sp, #16]
 8016fa8:	9b05      	ldr	r3, [sp, #20]
 8016faa:	9006      	str	r0, [sp, #24]
 8016fac:	9107      	str	r1, [sp, #28]
 8016fae:	f7e9 fa6f 	bl	8000490 <__aeabi_dcmpgt>
 8016fb2:	2800      	cmp	r0, #0
 8016fb4:	d12a      	bne.n	801700c <_dtoa_r+0x6c8>
 8016fb6:	9a04      	ldr	r2, [sp, #16]
 8016fb8:	9b05      	ldr	r3, [sp, #20]
 8016fba:	9806      	ldr	r0, [sp, #24]
 8016fbc:	9907      	ldr	r1, [sp, #28]
 8016fbe:	f7e9 fa4d 	bl	800045c <__aeabi_dcmpeq>
 8016fc2:	2800      	cmp	r0, #0
 8016fc4:	d001      	beq.n	8016fca <_dtoa_r+0x686>
 8016fc6:	07e3      	lsls	r3, r4, #31
 8016fc8:	d420      	bmi.n	801700c <_dtoa_r+0x6c8>
 8016fca:	9903      	ldr	r1, [sp, #12]
 8016fcc:	9802      	ldr	r0, [sp, #8]
 8016fce:	f000 ff35 	bl	8017e3c <_Bfree>
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	702b      	strb	r3, [r5, #0]
 8016fd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016fd8:	3701      	adds	r7, #1
 8016fda:	601f      	str	r7, [r3, #0]
 8016fdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d100      	bne.n	8016fe4 <_dtoa_r+0x6a0>
 8016fe2:	e4e4      	b.n	80169ae <_dtoa_r+0x6a>
 8016fe4:	601d      	str	r5, [r3, #0]
 8016fe6:	e4e2      	b.n	80169ae <_dtoa_r+0x6a>
 8016fe8:	0801c150 	.word	0x0801c150
 8016fec:	3ff00000 	.word	0x3ff00000
 8016ff0:	40240000 	.word	0x40240000
 8016ff4:	401c0000 	.word	0x401c0000
 8016ff8:	fcc00000 	.word	0xfcc00000
 8016ffc:	40140000 	.word	0x40140000
 8017000:	7cc00000 	.word	0x7cc00000
 8017004:	0801c128 	.word	0x0801c128
 8017008:	3fe00000 	.word	0x3fe00000
 801700c:	003e      	movs	r6, r7
 801700e:	1e6b      	subs	r3, r5, #1
 8017010:	781a      	ldrb	r2, [r3, #0]
 8017012:	2a39      	cmp	r2, #57	; 0x39
 8017014:	d106      	bne.n	8017024 <_dtoa_r+0x6e0>
 8017016:	9a08      	ldr	r2, [sp, #32]
 8017018:	429a      	cmp	r2, r3
 801701a:	d107      	bne.n	801702c <_dtoa_r+0x6e8>
 801701c:	2330      	movs	r3, #48	; 0x30
 801701e:	7013      	strb	r3, [r2, #0]
 8017020:	0013      	movs	r3, r2
 8017022:	3601      	adds	r6, #1
 8017024:	781a      	ldrb	r2, [r3, #0]
 8017026:	3201      	adds	r2, #1
 8017028:	701a      	strb	r2, [r3, #0]
 801702a:	e78c      	b.n	8016f46 <_dtoa_r+0x602>
 801702c:	001d      	movs	r5, r3
 801702e:	e7ee      	b.n	801700e <_dtoa_r+0x6ca>
 8017030:	2200      	movs	r2, #0
 8017032:	4ba4      	ldr	r3, [pc, #656]	; (80172c4 <_dtoa_r+0x980>)
 8017034:	f7eb f834 	bl	80020a0 <__aeabi_dmul>
 8017038:	2200      	movs	r2, #0
 801703a:	2300      	movs	r3, #0
 801703c:	9006      	str	r0, [sp, #24]
 801703e:	9107      	str	r1, [sp, #28]
 8017040:	002e      	movs	r6, r5
 8017042:	f7e9 fa0b 	bl	800045c <__aeabi_dcmpeq>
 8017046:	2800      	cmp	r0, #0
 8017048:	d08b      	beq.n	8016f62 <_dtoa_r+0x61e>
 801704a:	e7be      	b.n	8016fca <_dtoa_r+0x686>
 801704c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801704e:	2a00      	cmp	r2, #0
 8017050:	d100      	bne.n	8017054 <_dtoa_r+0x710>
 8017052:	e0da      	b.n	801720a <_dtoa_r+0x8c6>
 8017054:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017056:	2a01      	cmp	r2, #1
 8017058:	dd00      	ble.n	801705c <_dtoa_r+0x718>
 801705a:	e0bd      	b.n	80171d8 <_dtoa_r+0x894>
 801705c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801705e:	2a00      	cmp	r2, #0
 8017060:	d100      	bne.n	8017064 <_dtoa_r+0x720>
 8017062:	e0b5      	b.n	80171d0 <_dtoa_r+0x88c>
 8017064:	4a98      	ldr	r2, [pc, #608]	; (80172c8 <_dtoa_r+0x984>)
 8017066:	189b      	adds	r3, r3, r2
 8017068:	9d04      	ldr	r5, [sp, #16]
 801706a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801706c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801706e:	2101      	movs	r1, #1
 8017070:	18d2      	adds	r2, r2, r3
 8017072:	920a      	str	r2, [sp, #40]	; 0x28
 8017074:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017076:	9802      	ldr	r0, [sp, #8]
 8017078:	18d3      	adds	r3, r2, r3
 801707a:	930b      	str	r3, [sp, #44]	; 0x2c
 801707c:	f000 ffad 	bl	8017fda <__i2b>
 8017080:	0006      	movs	r6, r0
 8017082:	2c00      	cmp	r4, #0
 8017084:	dd0e      	ble.n	80170a4 <_dtoa_r+0x760>
 8017086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017088:	2b00      	cmp	r3, #0
 801708a:	dd0b      	ble.n	80170a4 <_dtoa_r+0x760>
 801708c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801708e:	0023      	movs	r3, r4
 8017090:	4294      	cmp	r4, r2
 8017092:	dd00      	ble.n	8017096 <_dtoa_r+0x752>
 8017094:	0013      	movs	r3, r2
 8017096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017098:	1ae4      	subs	r4, r4, r3
 801709a:	1ad2      	subs	r2, r2, r3
 801709c:	920a      	str	r2, [sp, #40]	; 0x28
 801709e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80170a0:	1ad3      	subs	r3, r2, r3
 80170a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80170a4:	9b04      	ldr	r3, [sp, #16]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d01f      	beq.n	80170ea <_dtoa_r+0x7a6>
 80170aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d100      	bne.n	80170b2 <_dtoa_r+0x76e>
 80170b0:	e0af      	b.n	8017212 <_dtoa_r+0x8ce>
 80170b2:	2d00      	cmp	r5, #0
 80170b4:	d011      	beq.n	80170da <_dtoa_r+0x796>
 80170b6:	0031      	movs	r1, r6
 80170b8:	002a      	movs	r2, r5
 80170ba:	9802      	ldr	r0, [sp, #8]
 80170bc:	f001 f826 	bl	801810c <__pow5mult>
 80170c0:	9a03      	ldr	r2, [sp, #12]
 80170c2:	0001      	movs	r1, r0
 80170c4:	0006      	movs	r6, r0
 80170c6:	9802      	ldr	r0, [sp, #8]
 80170c8:	f000 ff90 	bl	8017fec <__multiply>
 80170cc:	9903      	ldr	r1, [sp, #12]
 80170ce:	9010      	str	r0, [sp, #64]	; 0x40
 80170d0:	9802      	ldr	r0, [sp, #8]
 80170d2:	f000 feb3 	bl	8017e3c <_Bfree>
 80170d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170d8:	9303      	str	r3, [sp, #12]
 80170da:	9b04      	ldr	r3, [sp, #16]
 80170dc:	1b5a      	subs	r2, r3, r5
 80170de:	d004      	beq.n	80170ea <_dtoa_r+0x7a6>
 80170e0:	9903      	ldr	r1, [sp, #12]
 80170e2:	9802      	ldr	r0, [sp, #8]
 80170e4:	f001 f812 	bl	801810c <__pow5mult>
 80170e8:	9003      	str	r0, [sp, #12]
 80170ea:	2101      	movs	r1, #1
 80170ec:	9802      	ldr	r0, [sp, #8]
 80170ee:	f000 ff74 	bl	8017fda <__i2b>
 80170f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80170f4:	9004      	str	r0, [sp, #16]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d100      	bne.n	80170fc <_dtoa_r+0x7b8>
 80170fa:	e1e3      	b.n	80174c4 <_dtoa_r+0xb80>
 80170fc:	001a      	movs	r2, r3
 80170fe:	0001      	movs	r1, r0
 8017100:	9802      	ldr	r0, [sp, #8]
 8017102:	f001 f803 	bl	801810c <__pow5mult>
 8017106:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017108:	9004      	str	r0, [sp, #16]
 801710a:	2b01      	cmp	r3, #1
 801710c:	dd00      	ble.n	8017110 <_dtoa_r+0x7cc>
 801710e:	e082      	b.n	8017216 <_dtoa_r+0x8d2>
 8017110:	2500      	movs	r5, #0
 8017112:	9b06      	ldr	r3, [sp, #24]
 8017114:	42ab      	cmp	r3, r5
 8017116:	d10e      	bne.n	8017136 <_dtoa_r+0x7f2>
 8017118:	9b07      	ldr	r3, [sp, #28]
 801711a:	031b      	lsls	r3, r3, #12
 801711c:	42ab      	cmp	r3, r5
 801711e:	d10a      	bne.n	8017136 <_dtoa_r+0x7f2>
 8017120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017122:	9a07      	ldr	r2, [sp, #28]
 8017124:	4213      	tst	r3, r2
 8017126:	d006      	beq.n	8017136 <_dtoa_r+0x7f2>
 8017128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801712a:	3501      	adds	r5, #1
 801712c:	3301      	adds	r3, #1
 801712e:	930a      	str	r3, [sp, #40]	; 0x28
 8017130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017132:	3301      	adds	r3, #1
 8017134:	930b      	str	r3, [sp, #44]	; 0x2c
 8017136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017138:	2001      	movs	r0, #1
 801713a:	2b00      	cmp	r3, #0
 801713c:	d16c      	bne.n	8017218 <_dtoa_r+0x8d4>
 801713e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017140:	1818      	adds	r0, r3, r0
 8017142:	231f      	movs	r3, #31
 8017144:	4018      	ands	r0, r3
 8017146:	d07e      	beq.n	8017246 <_dtoa_r+0x902>
 8017148:	3301      	adds	r3, #1
 801714a:	1a1b      	subs	r3, r3, r0
 801714c:	2b04      	cmp	r3, #4
 801714e:	dd70      	ble.n	8017232 <_dtoa_r+0x8ee>
 8017150:	231c      	movs	r3, #28
 8017152:	1a18      	subs	r0, r3, r0
 8017154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017156:	1824      	adds	r4, r4, r0
 8017158:	181b      	adds	r3, r3, r0
 801715a:	930a      	str	r3, [sp, #40]	; 0x28
 801715c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801715e:	181b      	adds	r3, r3, r0
 8017160:	930b      	str	r3, [sp, #44]	; 0x2c
 8017162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017164:	2b00      	cmp	r3, #0
 8017166:	dd05      	ble.n	8017174 <_dtoa_r+0x830>
 8017168:	001a      	movs	r2, r3
 801716a:	9903      	ldr	r1, [sp, #12]
 801716c:	9802      	ldr	r0, [sp, #8]
 801716e:	f001 f80f 	bl	8018190 <__lshift>
 8017172:	9003      	str	r0, [sp, #12]
 8017174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017176:	2b00      	cmp	r3, #0
 8017178:	dd05      	ble.n	8017186 <_dtoa_r+0x842>
 801717a:	001a      	movs	r2, r3
 801717c:	9904      	ldr	r1, [sp, #16]
 801717e:	9802      	ldr	r0, [sp, #8]
 8017180:	f001 f806 	bl	8018190 <__lshift>
 8017184:	9004      	str	r0, [sp, #16]
 8017186:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017188:	2b00      	cmp	r3, #0
 801718a:	d05e      	beq.n	801724a <_dtoa_r+0x906>
 801718c:	9904      	ldr	r1, [sp, #16]
 801718e:	9803      	ldr	r0, [sp, #12]
 8017190:	f001 f850 	bl	8018234 <__mcmp>
 8017194:	2800      	cmp	r0, #0
 8017196:	da58      	bge.n	801724a <_dtoa_r+0x906>
 8017198:	2300      	movs	r3, #0
 801719a:	220a      	movs	r2, #10
 801719c:	9903      	ldr	r1, [sp, #12]
 801719e:	9802      	ldr	r0, [sp, #8]
 80171a0:	f000 fe56 	bl	8017e50 <__multadd>
 80171a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80171a6:	3f01      	subs	r7, #1
 80171a8:	9003      	str	r0, [sp, #12]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d100      	bne.n	80171b0 <_dtoa_r+0x86c>
 80171ae:	e190      	b.n	80174d2 <_dtoa_r+0xb8e>
 80171b0:	2300      	movs	r3, #0
 80171b2:	0031      	movs	r1, r6
 80171b4:	220a      	movs	r2, #10
 80171b6:	9802      	ldr	r0, [sp, #8]
 80171b8:	f000 fe4a 	bl	8017e50 <__multadd>
 80171bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171be:	0006      	movs	r6, r0
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	dd00      	ble.n	80171c6 <_dtoa_r+0x882>
 80171c4:	e088      	b.n	80172d8 <_dtoa_r+0x994>
 80171c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80171c8:	2b02      	cmp	r3, #2
 80171ca:	dc00      	bgt.n	80171ce <_dtoa_r+0x88a>
 80171cc:	e084      	b.n	80172d8 <_dtoa_r+0x994>
 80171ce:	e044      	b.n	801725a <_dtoa_r+0x916>
 80171d0:	2336      	movs	r3, #54	; 0x36
 80171d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80171d4:	1a9b      	subs	r3, r3, r2
 80171d6:	e747      	b.n	8017068 <_dtoa_r+0x724>
 80171d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171da:	1e5d      	subs	r5, r3, #1
 80171dc:	9b04      	ldr	r3, [sp, #16]
 80171de:	42ab      	cmp	r3, r5
 80171e0:	db08      	blt.n	80171f4 <_dtoa_r+0x8b0>
 80171e2:	1b5d      	subs	r5, r3, r5
 80171e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	da0c      	bge.n	8017204 <_dtoa_r+0x8c0>
 80171ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80171ee:	1a9c      	subs	r4, r3, r2
 80171f0:	2300      	movs	r3, #0
 80171f2:	e73b      	b.n	801706c <_dtoa_r+0x728>
 80171f4:	9b04      	ldr	r3, [sp, #16]
 80171f6:	9504      	str	r5, [sp, #16]
 80171f8:	1aea      	subs	r2, r5, r3
 80171fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80171fc:	2500      	movs	r5, #0
 80171fe:	189b      	adds	r3, r3, r2
 8017200:	9311      	str	r3, [sp, #68]	; 0x44
 8017202:	e7ef      	b.n	80171e4 <_dtoa_r+0x8a0>
 8017204:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017208:	e730      	b.n	801706c <_dtoa_r+0x728>
 801720a:	9d04      	ldr	r5, [sp, #16]
 801720c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801720e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8017210:	e737      	b.n	8017082 <_dtoa_r+0x73e>
 8017212:	9a04      	ldr	r2, [sp, #16]
 8017214:	e764      	b.n	80170e0 <_dtoa_r+0x79c>
 8017216:	2500      	movs	r5, #0
 8017218:	9b04      	ldr	r3, [sp, #16]
 801721a:	9a04      	ldr	r2, [sp, #16]
 801721c:	691b      	ldr	r3, [r3, #16]
 801721e:	9310      	str	r3, [sp, #64]	; 0x40
 8017220:	3303      	adds	r3, #3
 8017222:	009b      	lsls	r3, r3, #2
 8017224:	18d3      	adds	r3, r2, r3
 8017226:	6858      	ldr	r0, [r3, #4]
 8017228:	f000 fe8e 	bl	8017f48 <__hi0bits>
 801722c:	2320      	movs	r3, #32
 801722e:	1a18      	subs	r0, r3, r0
 8017230:	e785      	b.n	801713e <_dtoa_r+0x7fa>
 8017232:	2b04      	cmp	r3, #4
 8017234:	d095      	beq.n	8017162 <_dtoa_r+0x81e>
 8017236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017238:	331c      	adds	r3, #28
 801723a:	18d2      	adds	r2, r2, r3
 801723c:	920a      	str	r2, [sp, #40]	; 0x28
 801723e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017240:	18e4      	adds	r4, r4, r3
 8017242:	18d3      	adds	r3, r2, r3
 8017244:	e78c      	b.n	8017160 <_dtoa_r+0x81c>
 8017246:	0003      	movs	r3, r0
 8017248:	e7f5      	b.n	8017236 <_dtoa_r+0x8f2>
 801724a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801724c:	2b00      	cmp	r3, #0
 801724e:	dc3d      	bgt.n	80172cc <_dtoa_r+0x988>
 8017250:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017252:	2b02      	cmp	r3, #2
 8017254:	dd3a      	ble.n	80172cc <_dtoa_r+0x988>
 8017256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017258:	930c      	str	r3, [sp, #48]	; 0x30
 801725a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801725c:	2b00      	cmp	r3, #0
 801725e:	d10c      	bne.n	801727a <_dtoa_r+0x936>
 8017260:	9904      	ldr	r1, [sp, #16]
 8017262:	2205      	movs	r2, #5
 8017264:	9802      	ldr	r0, [sp, #8]
 8017266:	f000 fdf3 	bl	8017e50 <__multadd>
 801726a:	9004      	str	r0, [sp, #16]
 801726c:	0001      	movs	r1, r0
 801726e:	9803      	ldr	r0, [sp, #12]
 8017270:	f000 ffe0 	bl	8018234 <__mcmp>
 8017274:	2800      	cmp	r0, #0
 8017276:	dd00      	ble.n	801727a <_dtoa_r+0x936>
 8017278:	e5ad      	b.n	8016dd6 <_dtoa_r+0x492>
 801727a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801727c:	9d08      	ldr	r5, [sp, #32]
 801727e:	43df      	mvns	r7, r3
 8017280:	2300      	movs	r3, #0
 8017282:	9309      	str	r3, [sp, #36]	; 0x24
 8017284:	9904      	ldr	r1, [sp, #16]
 8017286:	9802      	ldr	r0, [sp, #8]
 8017288:	f000 fdd8 	bl	8017e3c <_Bfree>
 801728c:	2e00      	cmp	r6, #0
 801728e:	d100      	bne.n	8017292 <_dtoa_r+0x94e>
 8017290:	e69b      	b.n	8016fca <_dtoa_r+0x686>
 8017292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017294:	2b00      	cmp	r3, #0
 8017296:	d005      	beq.n	80172a4 <_dtoa_r+0x960>
 8017298:	42b3      	cmp	r3, r6
 801729a:	d003      	beq.n	80172a4 <_dtoa_r+0x960>
 801729c:	0019      	movs	r1, r3
 801729e:	9802      	ldr	r0, [sp, #8]
 80172a0:	f000 fdcc 	bl	8017e3c <_Bfree>
 80172a4:	0031      	movs	r1, r6
 80172a6:	9802      	ldr	r0, [sp, #8]
 80172a8:	f000 fdc8 	bl	8017e3c <_Bfree>
 80172ac:	e68d      	b.n	8016fca <_dtoa_r+0x686>
 80172ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80172b0:	9304      	str	r3, [sp, #16]
 80172b2:	001e      	movs	r6, r3
 80172b4:	e7e1      	b.n	801727a <_dtoa_r+0x936>
 80172b6:	2300      	movs	r3, #0
 80172b8:	e7fa      	b.n	80172b0 <_dtoa_r+0x96c>
 80172ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80172bc:	0037      	movs	r7, r6
 80172be:	9304      	str	r3, [sp, #16]
 80172c0:	001e      	movs	r6, r3
 80172c2:	e588      	b.n	8016dd6 <_dtoa_r+0x492>
 80172c4:	40240000 	.word	0x40240000
 80172c8:	00000433 	.word	0x00000433
 80172cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d100      	bne.n	80172d4 <_dtoa_r+0x990>
 80172d2:	e0b2      	b.n	801743a <_dtoa_r+0xaf6>
 80172d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172d6:	930c      	str	r3, [sp, #48]	; 0x30
 80172d8:	2c00      	cmp	r4, #0
 80172da:	dd05      	ble.n	80172e8 <_dtoa_r+0x9a4>
 80172dc:	0031      	movs	r1, r6
 80172de:	0022      	movs	r2, r4
 80172e0:	9802      	ldr	r0, [sp, #8]
 80172e2:	f000 ff55 	bl	8018190 <__lshift>
 80172e6:	0006      	movs	r6, r0
 80172e8:	0030      	movs	r0, r6
 80172ea:	2d00      	cmp	r5, #0
 80172ec:	d011      	beq.n	8017312 <_dtoa_r+0x9ce>
 80172ee:	6871      	ldr	r1, [r6, #4]
 80172f0:	9802      	ldr	r0, [sp, #8]
 80172f2:	f000 fd7b 	bl	8017dec <_Balloc>
 80172f6:	0031      	movs	r1, r6
 80172f8:	0004      	movs	r4, r0
 80172fa:	6933      	ldr	r3, [r6, #16]
 80172fc:	310c      	adds	r1, #12
 80172fe:	1c9a      	adds	r2, r3, #2
 8017300:	0092      	lsls	r2, r2, #2
 8017302:	300c      	adds	r0, #12
 8017304:	f7fc fe8b 	bl	801401e <memcpy>
 8017308:	2201      	movs	r2, #1
 801730a:	0021      	movs	r1, r4
 801730c:	9802      	ldr	r0, [sp, #8]
 801730e:	f000 ff3f 	bl	8018190 <__lshift>
 8017312:	9609      	str	r6, [sp, #36]	; 0x24
 8017314:	0006      	movs	r6, r0
 8017316:	9b08      	ldr	r3, [sp, #32]
 8017318:	930a      	str	r3, [sp, #40]	; 0x28
 801731a:	9904      	ldr	r1, [sp, #16]
 801731c:	9803      	ldr	r0, [sp, #12]
 801731e:	f7ff fa8b 	bl	8016838 <quorem>
 8017322:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017324:	900d      	str	r0, [sp, #52]	; 0x34
 8017326:	0004      	movs	r4, r0
 8017328:	9803      	ldr	r0, [sp, #12]
 801732a:	f000 ff83 	bl	8018234 <__mcmp>
 801732e:	0032      	movs	r2, r6
 8017330:	9010      	str	r0, [sp, #64]	; 0x40
 8017332:	9904      	ldr	r1, [sp, #16]
 8017334:	9802      	ldr	r0, [sp, #8]
 8017336:	f000 ff97 	bl	8018268 <__mdiff>
 801733a:	2301      	movs	r3, #1
 801733c:	930b      	str	r3, [sp, #44]	; 0x2c
 801733e:	68c3      	ldr	r3, [r0, #12]
 8017340:	3430      	adds	r4, #48	; 0x30
 8017342:	0005      	movs	r5, r0
 8017344:	2b00      	cmp	r3, #0
 8017346:	d104      	bne.n	8017352 <_dtoa_r+0xa0e>
 8017348:	0001      	movs	r1, r0
 801734a:	9803      	ldr	r0, [sp, #12]
 801734c:	f000 ff72 	bl	8018234 <__mcmp>
 8017350:	900b      	str	r0, [sp, #44]	; 0x2c
 8017352:	0029      	movs	r1, r5
 8017354:	9802      	ldr	r0, [sp, #8]
 8017356:	f000 fd71 	bl	8017e3c <_Bfree>
 801735a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801735c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801735e:	4313      	orrs	r3, r2
 8017360:	d10e      	bne.n	8017380 <_dtoa_r+0xa3c>
 8017362:	9a06      	ldr	r2, [sp, #24]
 8017364:	3301      	adds	r3, #1
 8017366:	4213      	tst	r3, r2
 8017368:	d10a      	bne.n	8017380 <_dtoa_r+0xa3c>
 801736a:	2c39      	cmp	r4, #57	; 0x39
 801736c:	d026      	beq.n	80173bc <_dtoa_r+0xa78>
 801736e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017370:	2b00      	cmp	r3, #0
 8017372:	dd01      	ble.n	8017378 <_dtoa_r+0xa34>
 8017374:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017376:	3431      	adds	r4, #49	; 0x31
 8017378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801737a:	1c5d      	adds	r5, r3, #1
 801737c:	701c      	strb	r4, [r3, #0]
 801737e:	e781      	b.n	8017284 <_dtoa_r+0x940>
 8017380:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017382:	2b00      	cmp	r3, #0
 8017384:	db07      	blt.n	8017396 <_dtoa_r+0xa52>
 8017386:	001d      	movs	r5, r3
 8017388:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801738a:	431d      	orrs	r5, r3
 801738c:	d122      	bne.n	80173d4 <_dtoa_r+0xa90>
 801738e:	2301      	movs	r3, #1
 8017390:	9a06      	ldr	r2, [sp, #24]
 8017392:	4213      	tst	r3, r2
 8017394:	d11e      	bne.n	80173d4 <_dtoa_r+0xa90>
 8017396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017398:	2b00      	cmp	r3, #0
 801739a:	dded      	ble.n	8017378 <_dtoa_r+0xa34>
 801739c:	9903      	ldr	r1, [sp, #12]
 801739e:	2201      	movs	r2, #1
 80173a0:	9802      	ldr	r0, [sp, #8]
 80173a2:	f000 fef5 	bl	8018190 <__lshift>
 80173a6:	9904      	ldr	r1, [sp, #16]
 80173a8:	9003      	str	r0, [sp, #12]
 80173aa:	f000 ff43 	bl	8018234 <__mcmp>
 80173ae:	2800      	cmp	r0, #0
 80173b0:	dc02      	bgt.n	80173b8 <_dtoa_r+0xa74>
 80173b2:	d1e1      	bne.n	8017378 <_dtoa_r+0xa34>
 80173b4:	07e3      	lsls	r3, r4, #31
 80173b6:	d5df      	bpl.n	8017378 <_dtoa_r+0xa34>
 80173b8:	2c39      	cmp	r4, #57	; 0x39
 80173ba:	d1db      	bne.n	8017374 <_dtoa_r+0xa30>
 80173bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173c0:	1c5d      	adds	r5, r3, #1
 80173c2:	2339      	movs	r3, #57	; 0x39
 80173c4:	7013      	strb	r3, [r2, #0]
 80173c6:	1e6b      	subs	r3, r5, #1
 80173c8:	781a      	ldrb	r2, [r3, #0]
 80173ca:	2a39      	cmp	r2, #57	; 0x39
 80173cc:	d067      	beq.n	801749e <_dtoa_r+0xb5a>
 80173ce:	3201      	adds	r2, #1
 80173d0:	701a      	strb	r2, [r3, #0]
 80173d2:	e757      	b.n	8017284 <_dtoa_r+0x940>
 80173d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173d6:	1c5d      	adds	r5, r3, #1
 80173d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173da:	2b00      	cmp	r3, #0
 80173dc:	dd04      	ble.n	80173e8 <_dtoa_r+0xaa4>
 80173de:	2c39      	cmp	r4, #57	; 0x39
 80173e0:	d0ec      	beq.n	80173bc <_dtoa_r+0xa78>
 80173e2:	3401      	adds	r4, #1
 80173e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173e6:	e7c9      	b.n	801737c <_dtoa_r+0xa38>
 80173e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80173ec:	701c      	strb	r4, [r3, #0]
 80173ee:	9b08      	ldr	r3, [sp, #32]
 80173f0:	1aeb      	subs	r3, r5, r3
 80173f2:	4293      	cmp	r3, r2
 80173f4:	d03e      	beq.n	8017474 <_dtoa_r+0xb30>
 80173f6:	2300      	movs	r3, #0
 80173f8:	220a      	movs	r2, #10
 80173fa:	9903      	ldr	r1, [sp, #12]
 80173fc:	9802      	ldr	r0, [sp, #8]
 80173fe:	f000 fd27 	bl	8017e50 <__multadd>
 8017402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017404:	9003      	str	r0, [sp, #12]
 8017406:	42b3      	cmp	r3, r6
 8017408:	d109      	bne.n	801741e <_dtoa_r+0xada>
 801740a:	2300      	movs	r3, #0
 801740c:	220a      	movs	r2, #10
 801740e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017410:	9802      	ldr	r0, [sp, #8]
 8017412:	f000 fd1d 	bl	8017e50 <__multadd>
 8017416:	9009      	str	r0, [sp, #36]	; 0x24
 8017418:	0006      	movs	r6, r0
 801741a:	950a      	str	r5, [sp, #40]	; 0x28
 801741c:	e77d      	b.n	801731a <_dtoa_r+0x9d6>
 801741e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017420:	2300      	movs	r3, #0
 8017422:	220a      	movs	r2, #10
 8017424:	9802      	ldr	r0, [sp, #8]
 8017426:	f000 fd13 	bl	8017e50 <__multadd>
 801742a:	2300      	movs	r3, #0
 801742c:	9009      	str	r0, [sp, #36]	; 0x24
 801742e:	220a      	movs	r2, #10
 8017430:	0031      	movs	r1, r6
 8017432:	9802      	ldr	r0, [sp, #8]
 8017434:	f000 fd0c 	bl	8017e50 <__multadd>
 8017438:	e7ee      	b.n	8017418 <_dtoa_r+0xad4>
 801743a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801743c:	930c      	str	r3, [sp, #48]	; 0x30
 801743e:	9b08      	ldr	r3, [sp, #32]
 8017440:	9306      	str	r3, [sp, #24]
 8017442:	9904      	ldr	r1, [sp, #16]
 8017444:	9803      	ldr	r0, [sp, #12]
 8017446:	f7ff f9f7 	bl	8016838 <quorem>
 801744a:	9b06      	ldr	r3, [sp, #24]
 801744c:	3030      	adds	r0, #48	; 0x30
 801744e:	1c5d      	adds	r5, r3, #1
 8017450:	7018      	strb	r0, [r3, #0]
 8017452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017454:	9b08      	ldr	r3, [sp, #32]
 8017456:	0004      	movs	r4, r0
 8017458:	1aeb      	subs	r3, r5, r3
 801745a:	429a      	cmp	r2, r3
 801745c:	dd08      	ble.n	8017470 <_dtoa_r+0xb2c>
 801745e:	2300      	movs	r3, #0
 8017460:	220a      	movs	r2, #10
 8017462:	9903      	ldr	r1, [sp, #12]
 8017464:	9802      	ldr	r0, [sp, #8]
 8017466:	f000 fcf3 	bl	8017e50 <__multadd>
 801746a:	9506      	str	r5, [sp, #24]
 801746c:	9003      	str	r0, [sp, #12]
 801746e:	e7e8      	b.n	8017442 <_dtoa_r+0xafe>
 8017470:	2300      	movs	r3, #0
 8017472:	9309      	str	r3, [sp, #36]	; 0x24
 8017474:	9903      	ldr	r1, [sp, #12]
 8017476:	2201      	movs	r2, #1
 8017478:	9802      	ldr	r0, [sp, #8]
 801747a:	f000 fe89 	bl	8018190 <__lshift>
 801747e:	9904      	ldr	r1, [sp, #16]
 8017480:	9003      	str	r0, [sp, #12]
 8017482:	f000 fed7 	bl	8018234 <__mcmp>
 8017486:	2800      	cmp	r0, #0
 8017488:	dc9d      	bgt.n	80173c6 <_dtoa_r+0xa82>
 801748a:	d101      	bne.n	8017490 <_dtoa_r+0xb4c>
 801748c:	07e3      	lsls	r3, r4, #31
 801748e:	d49a      	bmi.n	80173c6 <_dtoa_r+0xa82>
 8017490:	1e6b      	subs	r3, r5, #1
 8017492:	781a      	ldrb	r2, [r3, #0]
 8017494:	2a30      	cmp	r2, #48	; 0x30
 8017496:	d000      	beq.n	801749a <_dtoa_r+0xb56>
 8017498:	e6f4      	b.n	8017284 <_dtoa_r+0x940>
 801749a:	001d      	movs	r5, r3
 801749c:	e7f8      	b.n	8017490 <_dtoa_r+0xb4c>
 801749e:	9a08      	ldr	r2, [sp, #32]
 80174a0:	429a      	cmp	r2, r3
 80174a2:	d103      	bne.n	80174ac <_dtoa_r+0xb68>
 80174a4:	2331      	movs	r3, #49	; 0x31
 80174a6:	3701      	adds	r7, #1
 80174a8:	7013      	strb	r3, [r2, #0]
 80174aa:	e6eb      	b.n	8017284 <_dtoa_r+0x940>
 80174ac:	001d      	movs	r5, r3
 80174ae:	e78a      	b.n	80173c6 <_dtoa_r+0xa82>
 80174b0:	4b0b      	ldr	r3, [pc, #44]	; (80174e0 <_dtoa_r+0xb9c>)
 80174b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80174b4:	9308      	str	r3, [sp, #32]
 80174b6:	4b0b      	ldr	r3, [pc, #44]	; (80174e4 <_dtoa_r+0xba0>)
 80174b8:	2a00      	cmp	r2, #0
 80174ba:	d001      	beq.n	80174c0 <_dtoa_r+0xb7c>
 80174bc:	f7ff fa75 	bl	80169aa <_dtoa_r+0x66>
 80174c0:	f7ff fa75 	bl	80169ae <_dtoa_r+0x6a>
 80174c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80174c6:	2b01      	cmp	r3, #1
 80174c8:	dc00      	bgt.n	80174cc <_dtoa_r+0xb88>
 80174ca:	e621      	b.n	8017110 <_dtoa_r+0x7cc>
 80174cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80174ce:	2001      	movs	r0, #1
 80174d0:	e635      	b.n	801713e <_dtoa_r+0x7fa>
 80174d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	dcb2      	bgt.n	801743e <_dtoa_r+0xafa>
 80174d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80174da:	2b02      	cmp	r3, #2
 80174dc:	ddaf      	ble.n	801743e <_dtoa_r+0xafa>
 80174de:	e6bc      	b.n	801725a <_dtoa_r+0x916>
 80174e0:	0801c115 	.word	0x0801c115
 80174e4:	0801c11d 	.word	0x0801c11d

080174e8 <__errno>:
 80174e8:	4b01      	ldr	r3, [pc, #4]	; (80174f0 <__errno+0x8>)
 80174ea:	6818      	ldr	r0, [r3, #0]
 80174ec:	4770      	bx	lr
 80174ee:	46c0      	nop			; (mov r8, r8)
 80174f0:	200000c8 	.word	0x200000c8

080174f4 <__libc_fini_array>:
 80174f4:	b570      	push	{r4, r5, r6, lr}
 80174f6:	4d07      	ldr	r5, [pc, #28]	; (8017514 <__libc_fini_array+0x20>)
 80174f8:	4c07      	ldr	r4, [pc, #28]	; (8017518 <__libc_fini_array+0x24>)
 80174fa:	1b64      	subs	r4, r4, r5
 80174fc:	10a4      	asrs	r4, r4, #2
 80174fe:	2c00      	cmp	r4, #0
 8017500:	d102      	bne.n	8017508 <__libc_fini_array+0x14>
 8017502:	f001 f95b 	bl	80187bc <_fini>
 8017506:	bd70      	pop	{r4, r5, r6, pc}
 8017508:	3c01      	subs	r4, #1
 801750a:	00a3      	lsls	r3, r4, #2
 801750c:	58eb      	ldr	r3, [r5, r3]
 801750e:	4798      	blx	r3
 8017510:	e7f5      	b.n	80174fe <__libc_fini_array+0xa>
 8017512:	46c0      	nop			; (mov r8, r8)
 8017514:	0801c234 	.word	0x0801c234
 8017518:	0801c238 	.word	0x0801c238

0801751c <_malloc_trim_r>:
 801751c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801751e:	0005      	movs	r5, r0
 8017520:	2008      	movs	r0, #8
 8017522:	000c      	movs	r4, r1
 8017524:	f7ff f95c 	bl	80167e0 <sysconf>
 8017528:	0007      	movs	r7, r0
 801752a:	0028      	movs	r0, r5
 801752c:	f7fc fd88 	bl	8014040 <__malloc_lock>
 8017530:	2203      	movs	r2, #3
 8017532:	4e21      	ldr	r6, [pc, #132]	; (80175b8 <_malloc_trim_r+0x9c>)
 8017534:	0039      	movs	r1, r7
 8017536:	68b3      	ldr	r3, [r6, #8]
 8017538:	685b      	ldr	r3, [r3, #4]
 801753a:	4393      	bics	r3, r2
 801753c:	1b18      	subs	r0, r3, r4
 801753e:	3811      	subs	r0, #17
 8017540:	19c0      	adds	r0, r0, r7
 8017542:	9301      	str	r3, [sp, #4]
 8017544:	f7e8 fe04 	bl	8000150 <__udivsi3>
 8017548:	1e44      	subs	r4, r0, #1
 801754a:	437c      	muls	r4, r7
 801754c:	42a7      	cmp	r7, r4
 801754e:	dd04      	ble.n	801755a <_malloc_trim_r+0x3e>
 8017550:	0028      	movs	r0, r5
 8017552:	f7fc fd7d 	bl	8014050 <__malloc_unlock>
 8017556:	2000      	movs	r0, #0
 8017558:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801755a:	2100      	movs	r1, #0
 801755c:	0028      	movs	r0, r5
 801755e:	f7fc ff4f 	bl	8014400 <_sbrk_r>
 8017562:	68b3      	ldr	r3, [r6, #8]
 8017564:	9a01      	ldr	r2, [sp, #4]
 8017566:	189b      	adds	r3, r3, r2
 8017568:	4298      	cmp	r0, r3
 801756a:	d1f1      	bne.n	8017550 <_malloc_trim_r+0x34>
 801756c:	4261      	negs	r1, r4
 801756e:	0028      	movs	r0, r5
 8017570:	f7fc ff46 	bl	8014400 <_sbrk_r>
 8017574:	1c43      	adds	r3, r0, #1
 8017576:	d110      	bne.n	801759a <_malloc_trim_r+0x7e>
 8017578:	2100      	movs	r1, #0
 801757a:	0028      	movs	r0, r5
 801757c:	f7fc ff40 	bl	8014400 <_sbrk_r>
 8017580:	68b2      	ldr	r2, [r6, #8]
 8017582:	1a81      	subs	r1, r0, r2
 8017584:	290f      	cmp	r1, #15
 8017586:	dde3      	ble.n	8017550 <_malloc_trim_r+0x34>
 8017588:	4b0c      	ldr	r3, [pc, #48]	; (80175bc <_malloc_trim_r+0xa0>)
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	1ac0      	subs	r0, r0, r3
 801758e:	4b0c      	ldr	r3, [pc, #48]	; (80175c0 <_malloc_trim_r+0xa4>)
 8017590:	6018      	str	r0, [r3, #0]
 8017592:	2301      	movs	r3, #1
 8017594:	430b      	orrs	r3, r1
 8017596:	6053      	str	r3, [r2, #4]
 8017598:	e7da      	b.n	8017550 <_malloc_trim_r+0x34>
 801759a:	68b2      	ldr	r2, [r6, #8]
 801759c:	2601      	movs	r6, #1
 801759e:	9b01      	ldr	r3, [sp, #4]
 80175a0:	0028      	movs	r0, r5
 80175a2:	1b1b      	subs	r3, r3, r4
 80175a4:	4333      	orrs	r3, r6
 80175a6:	6053      	str	r3, [r2, #4]
 80175a8:	4b05      	ldr	r3, [pc, #20]	; (80175c0 <_malloc_trim_r+0xa4>)
 80175aa:	681a      	ldr	r2, [r3, #0]
 80175ac:	1b14      	subs	r4, r2, r4
 80175ae:	601c      	str	r4, [r3, #0]
 80175b0:	f7fc fd4e 	bl	8014050 <__malloc_unlock>
 80175b4:	0030      	movs	r0, r6
 80175b6:	e7cf      	b.n	8017558 <_malloc_trim_r+0x3c>
 80175b8:	20000664 	.word	0x20000664
 80175bc:	20000a6c 	.word	0x20000a6c
 80175c0:	20006c10 	.word	0x20006c10

080175c4 <_free_r>:
 80175c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80175c6:	1e0d      	subs	r5, r1, #0
 80175c8:	9001      	str	r0, [sp, #4]
 80175ca:	d02d      	beq.n	8017628 <_free_r+0x64>
 80175cc:	f7fc fd38 	bl	8014040 <__malloc_lock>
 80175d0:	2301      	movs	r3, #1
 80175d2:	0029      	movs	r1, r5
 80175d4:	469c      	mov	ip, r3
 80175d6:	3908      	subs	r1, #8
 80175d8:	684f      	ldr	r7, [r1, #4]
 80175da:	4662      	mov	r2, ip
 80175dc:	003b      	movs	r3, r7
 80175de:	4666      	mov	r6, ip
 80175e0:	4393      	bics	r3, r2
 80175e2:	18c8      	adds	r0, r1, r3
 80175e4:	6845      	ldr	r5, [r0, #4]
 80175e6:	3202      	adds	r2, #2
 80175e8:	4395      	bics	r5, r2
 80175ea:	4a4a      	ldr	r2, [pc, #296]	; (8017714 <_free_r+0x150>)
 80175ec:	4037      	ands	r7, r6
 80175ee:	6896      	ldr	r6, [r2, #8]
 80175f0:	4286      	cmp	r6, r0
 80175f2:	d11a      	bne.n	801762a <_free_r+0x66>
 80175f4:	195b      	adds	r3, r3, r5
 80175f6:	2f00      	cmp	r7, #0
 80175f8:	d106      	bne.n	8017608 <_free_r+0x44>
 80175fa:	6808      	ldr	r0, [r1, #0]
 80175fc:	1a09      	subs	r1, r1, r0
 80175fe:	688d      	ldr	r5, [r1, #8]
 8017600:	181b      	adds	r3, r3, r0
 8017602:	68c8      	ldr	r0, [r1, #12]
 8017604:	60e8      	str	r0, [r5, #12]
 8017606:	6085      	str	r5, [r0, #8]
 8017608:	2001      	movs	r0, #1
 801760a:	4318      	orrs	r0, r3
 801760c:	6048      	str	r0, [r1, #4]
 801760e:	6091      	str	r1, [r2, #8]
 8017610:	4a41      	ldr	r2, [pc, #260]	; (8017718 <_free_r+0x154>)
 8017612:	6812      	ldr	r2, [r2, #0]
 8017614:	429a      	cmp	r2, r3
 8017616:	d804      	bhi.n	8017622 <_free_r+0x5e>
 8017618:	4b40      	ldr	r3, [pc, #256]	; (801771c <_free_r+0x158>)
 801761a:	9801      	ldr	r0, [sp, #4]
 801761c:	6819      	ldr	r1, [r3, #0]
 801761e:	f7ff ff7d 	bl	801751c <_malloc_trim_r>
 8017622:	9801      	ldr	r0, [sp, #4]
 8017624:	f7fc fd14 	bl	8014050 <__malloc_unlock>
 8017628:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801762a:	2600      	movs	r6, #0
 801762c:	6045      	str	r5, [r0, #4]
 801762e:	42b7      	cmp	r7, r6
 8017630:	d109      	bne.n	8017646 <_free_r+0x82>
 8017632:	680f      	ldr	r7, [r1, #0]
 8017634:	4c3a      	ldr	r4, [pc, #232]	; (8017720 <_free_r+0x15c>)
 8017636:	1bc9      	subs	r1, r1, r7
 8017638:	19db      	adds	r3, r3, r7
 801763a:	688f      	ldr	r7, [r1, #8]
 801763c:	42a7      	cmp	r7, r4
 801763e:	d02b      	beq.n	8017698 <_free_r+0xd4>
 8017640:	68cc      	ldr	r4, [r1, #12]
 8017642:	60fc      	str	r4, [r7, #12]
 8017644:	60a7      	str	r7, [r4, #8]
 8017646:	1947      	adds	r7, r0, r5
 8017648:	687c      	ldr	r4, [r7, #4]
 801764a:	2701      	movs	r7, #1
 801764c:	423c      	tst	r4, r7
 801764e:	d10b      	bne.n	8017668 <_free_r+0xa4>
 8017650:	195b      	adds	r3, r3, r5
 8017652:	6885      	ldr	r5, [r0, #8]
 8017654:	2e00      	cmp	r6, #0
 8017656:	d121      	bne.n	801769c <_free_r+0xd8>
 8017658:	4c31      	ldr	r4, [pc, #196]	; (8017720 <_free_r+0x15c>)
 801765a:	42a5      	cmp	r5, r4
 801765c:	d11e      	bne.n	801769c <_free_r+0xd8>
 801765e:	003e      	movs	r6, r7
 8017660:	6151      	str	r1, [r2, #20]
 8017662:	6111      	str	r1, [r2, #16]
 8017664:	60cd      	str	r5, [r1, #12]
 8017666:	608d      	str	r5, [r1, #8]
 8017668:	2001      	movs	r0, #1
 801766a:	0005      	movs	r5, r0
 801766c:	431d      	orrs	r5, r3
 801766e:	604d      	str	r5, [r1, #4]
 8017670:	50cb      	str	r3, [r1, r3]
 8017672:	2e00      	cmp	r6, #0
 8017674:	d1d5      	bne.n	8017622 <_free_r+0x5e>
 8017676:	4d2b      	ldr	r5, [pc, #172]	; (8017724 <_free_r+0x160>)
 8017678:	42ab      	cmp	r3, r5
 801767a:	d813      	bhi.n	80176a4 <_free_r+0xe0>
 801767c:	08db      	lsrs	r3, r3, #3
 801767e:	109d      	asrs	r5, r3, #2
 8017680:	40a8      	lsls	r0, r5
 8017682:	6854      	ldr	r4, [r2, #4]
 8017684:	00db      	lsls	r3, r3, #3
 8017686:	4320      	orrs	r0, r4
 8017688:	6050      	str	r0, [r2, #4]
 801768a:	189a      	adds	r2, r3, r2
 801768c:	6893      	ldr	r3, [r2, #8]
 801768e:	60ca      	str	r2, [r1, #12]
 8017690:	608b      	str	r3, [r1, #8]
 8017692:	6091      	str	r1, [r2, #8]
 8017694:	60d9      	str	r1, [r3, #12]
 8017696:	e7c4      	b.n	8017622 <_free_r+0x5e>
 8017698:	4666      	mov	r6, ip
 801769a:	e7d4      	b.n	8017646 <_free_r+0x82>
 801769c:	68c0      	ldr	r0, [r0, #12]
 801769e:	60e8      	str	r0, [r5, #12]
 80176a0:	6085      	str	r5, [r0, #8]
 80176a2:	e7e1      	b.n	8017668 <_free_r+0xa4>
 80176a4:	0a5d      	lsrs	r5, r3, #9
 80176a6:	2d04      	cmp	r5, #4
 80176a8:	d812      	bhi.n	80176d0 <_free_r+0x10c>
 80176aa:	0998      	lsrs	r0, r3, #6
 80176ac:	3038      	adds	r0, #56	; 0x38
 80176ae:	00c6      	lsls	r6, r0, #3
 80176b0:	18b6      	adds	r6, r6, r2
 80176b2:	68b5      	ldr	r5, [r6, #8]
 80176b4:	2703      	movs	r7, #3
 80176b6:	42ae      	cmp	r6, r5
 80176b8:	d125      	bne.n	8017706 <_free_r+0x142>
 80176ba:	2301      	movs	r3, #1
 80176bc:	1080      	asrs	r0, r0, #2
 80176be:	4083      	lsls	r3, r0
 80176c0:	6850      	ldr	r0, [r2, #4]
 80176c2:	4303      	orrs	r3, r0
 80176c4:	6053      	str	r3, [r2, #4]
 80176c6:	60ce      	str	r6, [r1, #12]
 80176c8:	608d      	str	r5, [r1, #8]
 80176ca:	60b1      	str	r1, [r6, #8]
 80176cc:	60e9      	str	r1, [r5, #12]
 80176ce:	e7a8      	b.n	8017622 <_free_r+0x5e>
 80176d0:	2d14      	cmp	r5, #20
 80176d2:	d802      	bhi.n	80176da <_free_r+0x116>
 80176d4:	0028      	movs	r0, r5
 80176d6:	305b      	adds	r0, #91	; 0x5b
 80176d8:	e7e9      	b.n	80176ae <_free_r+0xea>
 80176da:	2d54      	cmp	r5, #84	; 0x54
 80176dc:	d802      	bhi.n	80176e4 <_free_r+0x120>
 80176de:	0b18      	lsrs	r0, r3, #12
 80176e0:	306e      	adds	r0, #110	; 0x6e
 80176e2:	e7e4      	b.n	80176ae <_free_r+0xea>
 80176e4:	20aa      	movs	r0, #170	; 0xaa
 80176e6:	0040      	lsls	r0, r0, #1
 80176e8:	4285      	cmp	r5, r0
 80176ea:	d802      	bhi.n	80176f2 <_free_r+0x12e>
 80176ec:	0bd8      	lsrs	r0, r3, #15
 80176ee:	3077      	adds	r0, #119	; 0x77
 80176f0:	e7dd      	b.n	80176ae <_free_r+0xea>
 80176f2:	4e0d      	ldr	r6, [pc, #52]	; (8017728 <_free_r+0x164>)
 80176f4:	207e      	movs	r0, #126	; 0x7e
 80176f6:	42b5      	cmp	r5, r6
 80176f8:	d8d9      	bhi.n	80176ae <_free_r+0xea>
 80176fa:	0c98      	lsrs	r0, r3, #18
 80176fc:	307c      	adds	r0, #124	; 0x7c
 80176fe:	e7d6      	b.n	80176ae <_free_r+0xea>
 8017700:	68ad      	ldr	r5, [r5, #8]
 8017702:	42ae      	cmp	r6, r5
 8017704:	d003      	beq.n	801770e <_free_r+0x14a>
 8017706:	686a      	ldr	r2, [r5, #4]
 8017708:	43ba      	bics	r2, r7
 801770a:	429a      	cmp	r2, r3
 801770c:	d8f8      	bhi.n	8017700 <_free_r+0x13c>
 801770e:	68ee      	ldr	r6, [r5, #12]
 8017710:	e7d9      	b.n	80176c6 <_free_r+0x102>
 8017712:	46c0      	nop			; (mov r8, r8)
 8017714:	20000664 	.word	0x20000664
 8017718:	20000a70 	.word	0x20000a70
 801771c:	20006c40 	.word	0x20006c40
 8017720:	2000066c 	.word	0x2000066c
 8017724:	000001ff 	.word	0x000001ff
 8017728:	00000554 	.word	0x00000554

0801772c <rshift>:
 801772c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801772e:	0004      	movs	r4, r0
 8017730:	6905      	ldr	r5, [r0, #16]
 8017732:	3414      	adds	r4, #20
 8017734:	114b      	asrs	r3, r1, #5
 8017736:	0026      	movs	r6, r4
 8017738:	429d      	cmp	r5, r3
 801773a:	dd14      	ble.n	8017766 <rshift+0x3a>
 801773c:	221f      	movs	r2, #31
 801773e:	00ad      	lsls	r5, r5, #2
 8017740:	009b      	lsls	r3, r3, #2
 8017742:	4011      	ands	r1, r2
 8017744:	1965      	adds	r5, r4, r5
 8017746:	18e3      	adds	r3, r4, r3
 8017748:	0022      	movs	r2, r4
 801774a:	2900      	cmp	r1, #0
 801774c:	d01e      	beq.n	801778c <rshift+0x60>
 801774e:	cb04      	ldmia	r3!, {r2}
 8017750:	2720      	movs	r7, #32
 8017752:	40ca      	lsrs	r2, r1
 8017754:	46a4      	mov	ip, r4
 8017756:	1a7f      	subs	r7, r7, r1
 8017758:	4666      	mov	r6, ip
 801775a:	429d      	cmp	r5, r3
 801775c:	d80b      	bhi.n	8017776 <rshift+0x4a>
 801775e:	6032      	str	r2, [r6, #0]
 8017760:	2a00      	cmp	r2, #0
 8017762:	d000      	beq.n	8017766 <rshift+0x3a>
 8017764:	3604      	adds	r6, #4
 8017766:	1b33      	subs	r3, r6, r4
 8017768:	109b      	asrs	r3, r3, #2
 801776a:	6103      	str	r3, [r0, #16]
 801776c:	42a6      	cmp	r6, r4
 801776e:	d101      	bne.n	8017774 <rshift+0x48>
 8017770:	2300      	movs	r3, #0
 8017772:	6143      	str	r3, [r0, #20]
 8017774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017776:	681e      	ldr	r6, [r3, #0]
 8017778:	40be      	lsls	r6, r7
 801777a:	4332      	orrs	r2, r6
 801777c:	4666      	mov	r6, ip
 801777e:	c604      	stmia	r6!, {r2}
 8017780:	cb04      	ldmia	r3!, {r2}
 8017782:	46b4      	mov	ip, r6
 8017784:	40ca      	lsrs	r2, r1
 8017786:	e7e7      	b.n	8017758 <rshift+0x2c>
 8017788:	cb02      	ldmia	r3!, {r1}
 801778a:	c202      	stmia	r2!, {r1}
 801778c:	0016      	movs	r6, r2
 801778e:	429d      	cmp	r5, r3
 8017790:	d8fa      	bhi.n	8017788 <rshift+0x5c>
 8017792:	e7e8      	b.n	8017766 <rshift+0x3a>

08017794 <__hexdig_fun>:
 8017794:	0003      	movs	r3, r0
 8017796:	3b30      	subs	r3, #48	; 0x30
 8017798:	2b09      	cmp	r3, #9
 801779a:	d803      	bhi.n	80177a4 <__hexdig_fun+0x10>
 801779c:	3820      	subs	r0, #32
 801779e:	b2c3      	uxtb	r3, r0
 80177a0:	0018      	movs	r0, r3
 80177a2:	4770      	bx	lr
 80177a4:	0003      	movs	r3, r0
 80177a6:	3b61      	subs	r3, #97	; 0x61
 80177a8:	2b05      	cmp	r3, #5
 80177aa:	d801      	bhi.n	80177b0 <__hexdig_fun+0x1c>
 80177ac:	3847      	subs	r0, #71	; 0x47
 80177ae:	e7f6      	b.n	801779e <__hexdig_fun+0xa>
 80177b0:	0002      	movs	r2, r0
 80177b2:	3a41      	subs	r2, #65	; 0x41
 80177b4:	2300      	movs	r3, #0
 80177b6:	2a05      	cmp	r2, #5
 80177b8:	d8f2      	bhi.n	80177a0 <__hexdig_fun+0xc>
 80177ba:	3827      	subs	r0, #39	; 0x27
 80177bc:	e7ef      	b.n	801779e <__hexdig_fun+0xa>

080177be <__gethex>:
 80177be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177c0:	b08d      	sub	sp, #52	; 0x34
 80177c2:	9005      	str	r0, [sp, #20]
 80177c4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80177c6:	9109      	str	r1, [sp, #36]	; 0x24
 80177c8:	9202      	str	r2, [sp, #8]
 80177ca:	930a      	str	r3, [sp, #40]	; 0x28
 80177cc:	f000 fadf 	bl	8017d8e <__localeconv_l>
 80177d0:	6803      	ldr	r3, [r0, #0]
 80177d2:	0018      	movs	r0, r3
 80177d4:	9307      	str	r3, [sp, #28]
 80177d6:	f7e8 fc9f 	bl	8000118 <strlen>
 80177da:	2202      	movs	r2, #2
 80177dc:	9b07      	ldr	r3, [sp, #28]
 80177de:	4252      	negs	r2, r2
 80177e0:	181b      	adds	r3, r3, r0
 80177e2:	3b01      	subs	r3, #1
 80177e4:	781b      	ldrb	r3, [r3, #0]
 80177e6:	9004      	str	r0, [sp, #16]
 80177e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80177ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177ec:	6819      	ldr	r1, [r3, #0]
 80177ee:	1c8b      	adds	r3, r1, #2
 80177f0:	1a52      	subs	r2, r2, r1
 80177f2:	18d1      	adds	r1, r2, r3
 80177f4:	9301      	str	r3, [sp, #4]
 80177f6:	9108      	str	r1, [sp, #32]
 80177f8:	9901      	ldr	r1, [sp, #4]
 80177fa:	3301      	adds	r3, #1
 80177fc:	7808      	ldrb	r0, [r1, #0]
 80177fe:	2830      	cmp	r0, #48	; 0x30
 8017800:	d0f7      	beq.n	80177f2 <__gethex+0x34>
 8017802:	f7ff ffc7 	bl	8017794 <__hexdig_fun>
 8017806:	1e07      	subs	r7, r0, #0
 8017808:	d000      	beq.n	801780c <__gethex+0x4e>
 801780a:	e06f      	b.n	80178ec <__gethex+0x12e>
 801780c:	9a04      	ldr	r2, [sp, #16]
 801780e:	9907      	ldr	r1, [sp, #28]
 8017810:	9801      	ldr	r0, [sp, #4]
 8017812:	f7fc fe4b 	bl	80144ac <strncmp>
 8017816:	2800      	cmp	r0, #0
 8017818:	d000      	beq.n	801781c <__gethex+0x5e>
 801781a:	e06d      	b.n	80178f8 <__gethex+0x13a>
 801781c:	9b01      	ldr	r3, [sp, #4]
 801781e:	9a04      	ldr	r2, [sp, #16]
 8017820:	189c      	adds	r4, r3, r2
 8017822:	7820      	ldrb	r0, [r4, #0]
 8017824:	f7ff ffb6 	bl	8017794 <__hexdig_fun>
 8017828:	2800      	cmp	r0, #0
 801782a:	d069      	beq.n	8017900 <__gethex+0x142>
 801782c:	9401      	str	r4, [sp, #4]
 801782e:	9b01      	ldr	r3, [sp, #4]
 8017830:	7818      	ldrb	r0, [r3, #0]
 8017832:	2830      	cmp	r0, #48	; 0x30
 8017834:	d009      	beq.n	801784a <__gethex+0x8c>
 8017836:	f7ff ffad 	bl	8017794 <__hexdig_fun>
 801783a:	4243      	negs	r3, r0
 801783c:	4143      	adcs	r3, r0
 801783e:	9303      	str	r3, [sp, #12]
 8017840:	2301      	movs	r3, #1
 8017842:	0026      	movs	r6, r4
 8017844:	9308      	str	r3, [sp, #32]
 8017846:	9c01      	ldr	r4, [sp, #4]
 8017848:	e004      	b.n	8017854 <__gethex+0x96>
 801784a:	9b01      	ldr	r3, [sp, #4]
 801784c:	3301      	adds	r3, #1
 801784e:	9301      	str	r3, [sp, #4]
 8017850:	e7ed      	b.n	801782e <__gethex+0x70>
 8017852:	3401      	adds	r4, #1
 8017854:	7820      	ldrb	r0, [r4, #0]
 8017856:	f7ff ff9d 	bl	8017794 <__hexdig_fun>
 801785a:	2800      	cmp	r0, #0
 801785c:	d1f9      	bne.n	8017852 <__gethex+0x94>
 801785e:	9a04      	ldr	r2, [sp, #16]
 8017860:	9907      	ldr	r1, [sp, #28]
 8017862:	0020      	movs	r0, r4
 8017864:	f7fc fe22 	bl	80144ac <strncmp>
 8017868:	2800      	cmp	r0, #0
 801786a:	d109      	bne.n	8017880 <__gethex+0xc2>
 801786c:	2e00      	cmp	r6, #0
 801786e:	d10a      	bne.n	8017886 <__gethex+0xc8>
 8017870:	9b04      	ldr	r3, [sp, #16]
 8017872:	18e4      	adds	r4, r4, r3
 8017874:	0026      	movs	r6, r4
 8017876:	7820      	ldrb	r0, [r4, #0]
 8017878:	f7ff ff8c 	bl	8017794 <__hexdig_fun>
 801787c:	2800      	cmp	r0, #0
 801787e:	d139      	bne.n	80178f4 <__gethex+0x136>
 8017880:	2700      	movs	r7, #0
 8017882:	42be      	cmp	r6, r7
 8017884:	d001      	beq.n	801788a <__gethex+0xcc>
 8017886:	1b37      	subs	r7, r6, r4
 8017888:	00bf      	lsls	r7, r7, #2
 801788a:	7823      	ldrb	r3, [r4, #0]
 801788c:	2b50      	cmp	r3, #80	; 0x50
 801788e:	d001      	beq.n	8017894 <__gethex+0xd6>
 8017890:	2b70      	cmp	r3, #112	; 0x70
 8017892:	d142      	bne.n	801791a <__gethex+0x15c>
 8017894:	7863      	ldrb	r3, [r4, #1]
 8017896:	2b2b      	cmp	r3, #43	; 0x2b
 8017898:	d034      	beq.n	8017904 <__gethex+0x146>
 801789a:	2b2d      	cmp	r3, #45	; 0x2d
 801789c:	d036      	beq.n	801790c <__gethex+0x14e>
 801789e:	2300      	movs	r3, #0
 80178a0:	1c66      	adds	r6, r4, #1
 80178a2:	9306      	str	r3, [sp, #24]
 80178a4:	7830      	ldrb	r0, [r6, #0]
 80178a6:	f7ff ff75 	bl	8017794 <__hexdig_fun>
 80178aa:	1e43      	subs	r3, r0, #1
 80178ac:	b2db      	uxtb	r3, r3
 80178ae:	2b18      	cmp	r3, #24
 80178b0:	d833      	bhi.n	801791a <__gethex+0x15c>
 80178b2:	3810      	subs	r0, #16
 80178b4:	0005      	movs	r5, r0
 80178b6:	3601      	adds	r6, #1
 80178b8:	7830      	ldrb	r0, [r6, #0]
 80178ba:	f7ff ff6b 	bl	8017794 <__hexdig_fun>
 80178be:	1e43      	subs	r3, r0, #1
 80178c0:	b2db      	uxtb	r3, r3
 80178c2:	2b18      	cmp	r3, #24
 80178c4:	d924      	bls.n	8017910 <__gethex+0x152>
 80178c6:	9b06      	ldr	r3, [sp, #24]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d000      	beq.n	80178ce <__gethex+0x110>
 80178cc:	426d      	negs	r5, r5
 80178ce:	197f      	adds	r7, r7, r5
 80178d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178d2:	601e      	str	r6, [r3, #0]
 80178d4:	9b03      	ldr	r3, [sp, #12]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d021      	beq.n	801791e <__gethex+0x160>
 80178da:	9b08      	ldr	r3, [sp, #32]
 80178dc:	2606      	movs	r6, #6
 80178de:	425a      	negs	r2, r3
 80178e0:	4153      	adcs	r3, r2
 80178e2:	425b      	negs	r3, r3
 80178e4:	401e      	ands	r6, r3
 80178e6:	0030      	movs	r0, r6
 80178e8:	b00d      	add	sp, #52	; 0x34
 80178ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178ec:	2300      	movs	r3, #0
 80178ee:	9303      	str	r3, [sp, #12]
 80178f0:	001e      	movs	r6, r3
 80178f2:	e7a8      	b.n	8017846 <__gethex+0x88>
 80178f4:	3401      	adds	r4, #1
 80178f6:	e7be      	b.n	8017876 <__gethex+0xb8>
 80178f8:	9c01      	ldr	r4, [sp, #4]
 80178fa:	2301      	movs	r3, #1
 80178fc:	9303      	str	r3, [sp, #12]
 80178fe:	e7c4      	b.n	801788a <__gethex+0xcc>
 8017900:	0007      	movs	r7, r0
 8017902:	e7fa      	b.n	80178fa <__gethex+0x13c>
 8017904:	2300      	movs	r3, #0
 8017906:	9306      	str	r3, [sp, #24]
 8017908:	1ca6      	adds	r6, r4, #2
 801790a:	e7cb      	b.n	80178a4 <__gethex+0xe6>
 801790c:	2301      	movs	r3, #1
 801790e:	e7fa      	b.n	8017906 <__gethex+0x148>
 8017910:	230a      	movs	r3, #10
 8017912:	435d      	muls	r5, r3
 8017914:	182d      	adds	r5, r5, r0
 8017916:	3d10      	subs	r5, #16
 8017918:	e7cd      	b.n	80178b6 <__gethex+0xf8>
 801791a:	0026      	movs	r6, r4
 801791c:	e7d8      	b.n	80178d0 <__gethex+0x112>
 801791e:	9b01      	ldr	r3, [sp, #4]
 8017920:	9903      	ldr	r1, [sp, #12]
 8017922:	1ae3      	subs	r3, r4, r3
 8017924:	3b01      	subs	r3, #1
 8017926:	2b07      	cmp	r3, #7
 8017928:	dc47      	bgt.n	80179ba <__gethex+0x1fc>
 801792a:	9805      	ldr	r0, [sp, #20]
 801792c:	f000 fa5e 	bl	8017dec <_Balloc>
 8017930:	0003      	movs	r3, r0
 8017932:	3314      	adds	r3, #20
 8017934:	9303      	str	r3, [sp, #12]
 8017936:	9308      	str	r3, [sp, #32]
 8017938:	2300      	movs	r3, #0
 801793a:	0005      	movs	r5, r0
 801793c:	001e      	movs	r6, r3
 801793e:	9306      	str	r3, [sp, #24]
 8017940:	9b01      	ldr	r3, [sp, #4]
 8017942:	42a3      	cmp	r3, r4
 8017944:	d33c      	bcc.n	80179c0 <__gethex+0x202>
 8017946:	9c08      	ldr	r4, [sp, #32]
 8017948:	9b03      	ldr	r3, [sp, #12]
 801794a:	c440      	stmia	r4!, {r6}
 801794c:	1ae4      	subs	r4, r4, r3
 801794e:	10a4      	asrs	r4, r4, #2
 8017950:	612c      	str	r4, [r5, #16]
 8017952:	0030      	movs	r0, r6
 8017954:	f000 faf8 	bl	8017f48 <__hi0bits>
 8017958:	9b02      	ldr	r3, [sp, #8]
 801795a:	0164      	lsls	r4, r4, #5
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	1a26      	subs	r6, r4, r0
 8017960:	9301      	str	r3, [sp, #4]
 8017962:	429e      	cmp	r6, r3
 8017964:	dd5f      	ble.n	8017a26 <__gethex+0x268>
 8017966:	1af6      	subs	r6, r6, r3
 8017968:	0031      	movs	r1, r6
 801796a:	0028      	movs	r0, r5
 801796c:	f000 fde3 	bl	8018536 <__any_on>
 8017970:	1e04      	subs	r4, r0, #0
 8017972:	d00f      	beq.n	8017994 <__gethex+0x1d6>
 8017974:	2401      	movs	r4, #1
 8017976:	211f      	movs	r1, #31
 8017978:	0020      	movs	r0, r4
 801797a:	1e73      	subs	r3, r6, #1
 801797c:	4019      	ands	r1, r3
 801797e:	4088      	lsls	r0, r1
 8017980:	0001      	movs	r1, r0
 8017982:	115a      	asrs	r2, r3, #5
 8017984:	9803      	ldr	r0, [sp, #12]
 8017986:	0092      	lsls	r2, r2, #2
 8017988:	5812      	ldr	r2, [r2, r0]
 801798a:	420a      	tst	r2, r1
 801798c:	d002      	beq.n	8017994 <__gethex+0x1d6>
 801798e:	42a3      	cmp	r3, r4
 8017990:	dc41      	bgt.n	8017a16 <__gethex+0x258>
 8017992:	2402      	movs	r4, #2
 8017994:	0031      	movs	r1, r6
 8017996:	0028      	movs	r0, r5
 8017998:	f7ff fec8 	bl	801772c <rshift>
 801799c:	19bf      	adds	r7, r7, r6
 801799e:	9b02      	ldr	r3, [sp, #8]
 80179a0:	689b      	ldr	r3, [r3, #8]
 80179a2:	9304      	str	r3, [sp, #16]
 80179a4:	42bb      	cmp	r3, r7
 80179a6:	da4e      	bge.n	8017a46 <__gethex+0x288>
 80179a8:	0029      	movs	r1, r5
 80179aa:	9805      	ldr	r0, [sp, #20]
 80179ac:	f000 fa46 	bl	8017e3c <_Bfree>
 80179b0:	2300      	movs	r3, #0
 80179b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80179b4:	26a3      	movs	r6, #163	; 0xa3
 80179b6:	6013      	str	r3, [r2, #0]
 80179b8:	e795      	b.n	80178e6 <__gethex+0x128>
 80179ba:	3101      	adds	r1, #1
 80179bc:	105b      	asrs	r3, r3, #1
 80179be:	e7b2      	b.n	8017926 <__gethex+0x168>
 80179c0:	1e63      	subs	r3, r4, #1
 80179c2:	9309      	str	r3, [sp, #36]	; 0x24
 80179c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80179c6:	781b      	ldrb	r3, [r3, #0]
 80179c8:	4293      	cmp	r3, r2
 80179ca:	d015      	beq.n	80179f8 <__gethex+0x23a>
 80179cc:	9b06      	ldr	r3, [sp, #24]
 80179ce:	2b20      	cmp	r3, #32
 80179d0:	d105      	bne.n	80179de <__gethex+0x220>
 80179d2:	9b08      	ldr	r3, [sp, #32]
 80179d4:	601e      	str	r6, [r3, #0]
 80179d6:	2600      	movs	r6, #0
 80179d8:	3304      	adds	r3, #4
 80179da:	9308      	str	r3, [sp, #32]
 80179dc:	9606      	str	r6, [sp, #24]
 80179de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179e0:	7818      	ldrb	r0, [r3, #0]
 80179e2:	f7ff fed7 	bl	8017794 <__hexdig_fun>
 80179e6:	230f      	movs	r3, #15
 80179e8:	4018      	ands	r0, r3
 80179ea:	9b06      	ldr	r3, [sp, #24]
 80179ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80179ee:	4098      	lsls	r0, r3
 80179f0:	3304      	adds	r3, #4
 80179f2:	4306      	orrs	r6, r0
 80179f4:	9306      	str	r3, [sp, #24]
 80179f6:	e7a3      	b.n	8017940 <__gethex+0x182>
 80179f8:	2301      	movs	r3, #1
 80179fa:	9a04      	ldr	r2, [sp, #16]
 80179fc:	1a9c      	subs	r4, r3, r2
 80179fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a00:	191c      	adds	r4, r3, r4
 8017a02:	9b01      	ldr	r3, [sp, #4]
 8017a04:	429c      	cmp	r4, r3
 8017a06:	d3e1      	bcc.n	80179cc <__gethex+0x20e>
 8017a08:	9907      	ldr	r1, [sp, #28]
 8017a0a:	0020      	movs	r0, r4
 8017a0c:	f7fc fd4e 	bl	80144ac <strncmp>
 8017a10:	2800      	cmp	r0, #0
 8017a12:	d1db      	bne.n	80179cc <__gethex+0x20e>
 8017a14:	e794      	b.n	8017940 <__gethex+0x182>
 8017a16:	1eb1      	subs	r1, r6, #2
 8017a18:	0028      	movs	r0, r5
 8017a1a:	f000 fd8c 	bl	8018536 <__any_on>
 8017a1e:	2800      	cmp	r0, #0
 8017a20:	d0b7      	beq.n	8017992 <__gethex+0x1d4>
 8017a22:	2403      	movs	r4, #3
 8017a24:	e7b6      	b.n	8017994 <__gethex+0x1d6>
 8017a26:	9b01      	ldr	r3, [sp, #4]
 8017a28:	2400      	movs	r4, #0
 8017a2a:	429e      	cmp	r6, r3
 8017a2c:	dab7      	bge.n	801799e <__gethex+0x1e0>
 8017a2e:	1b9e      	subs	r6, r3, r6
 8017a30:	0029      	movs	r1, r5
 8017a32:	0032      	movs	r2, r6
 8017a34:	9805      	ldr	r0, [sp, #20]
 8017a36:	f000 fbab 	bl	8018190 <__lshift>
 8017a3a:	0003      	movs	r3, r0
 8017a3c:	3314      	adds	r3, #20
 8017a3e:	0005      	movs	r5, r0
 8017a40:	1bbf      	subs	r7, r7, r6
 8017a42:	9303      	str	r3, [sp, #12]
 8017a44:	e7ab      	b.n	801799e <__gethex+0x1e0>
 8017a46:	9b02      	ldr	r3, [sp, #8]
 8017a48:	685e      	ldr	r6, [r3, #4]
 8017a4a:	42be      	cmp	r6, r7
 8017a4c:	dd6b      	ble.n	8017b26 <__gethex+0x368>
 8017a4e:	9b01      	ldr	r3, [sp, #4]
 8017a50:	1bf6      	subs	r6, r6, r7
 8017a52:	42b3      	cmp	r3, r6
 8017a54:	dc32      	bgt.n	8017abc <__gethex+0x2fe>
 8017a56:	9b02      	ldr	r3, [sp, #8]
 8017a58:	68db      	ldr	r3, [r3, #12]
 8017a5a:	2b02      	cmp	r3, #2
 8017a5c:	d026      	beq.n	8017aac <__gethex+0x2ee>
 8017a5e:	2b03      	cmp	r3, #3
 8017a60:	d028      	beq.n	8017ab4 <__gethex+0x2f6>
 8017a62:	2b01      	cmp	r3, #1
 8017a64:	d119      	bne.n	8017a9a <__gethex+0x2dc>
 8017a66:	9b01      	ldr	r3, [sp, #4]
 8017a68:	42b3      	cmp	r3, r6
 8017a6a:	d116      	bne.n	8017a9a <__gethex+0x2dc>
 8017a6c:	2b01      	cmp	r3, #1
 8017a6e:	dc0d      	bgt.n	8017a8c <__gethex+0x2ce>
 8017a70:	9b02      	ldr	r3, [sp, #8]
 8017a72:	2662      	movs	r6, #98	; 0x62
 8017a74:	685b      	ldr	r3, [r3, #4]
 8017a76:	9301      	str	r3, [sp, #4]
 8017a78:	9a01      	ldr	r2, [sp, #4]
 8017a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a7c:	601a      	str	r2, [r3, #0]
 8017a7e:	2301      	movs	r3, #1
 8017a80:	9a03      	ldr	r2, [sp, #12]
 8017a82:	612b      	str	r3, [r5, #16]
 8017a84:	6013      	str	r3, [r2, #0]
 8017a86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017a88:	601d      	str	r5, [r3, #0]
 8017a8a:	e72c      	b.n	80178e6 <__gethex+0x128>
 8017a8c:	9901      	ldr	r1, [sp, #4]
 8017a8e:	0028      	movs	r0, r5
 8017a90:	3901      	subs	r1, #1
 8017a92:	f000 fd50 	bl	8018536 <__any_on>
 8017a96:	2800      	cmp	r0, #0
 8017a98:	d1ea      	bne.n	8017a70 <__gethex+0x2b2>
 8017a9a:	0029      	movs	r1, r5
 8017a9c:	9805      	ldr	r0, [sp, #20]
 8017a9e:	f000 f9cd 	bl	8017e3c <_Bfree>
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017aa6:	2650      	movs	r6, #80	; 0x50
 8017aa8:	6013      	str	r3, [r2, #0]
 8017aaa:	e71c      	b.n	80178e6 <__gethex+0x128>
 8017aac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d0de      	beq.n	8017a70 <__gethex+0x2b2>
 8017ab2:	e7f2      	b.n	8017a9a <__gethex+0x2dc>
 8017ab4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d1da      	bne.n	8017a70 <__gethex+0x2b2>
 8017aba:	e7ee      	b.n	8017a9a <__gethex+0x2dc>
 8017abc:	1e77      	subs	r7, r6, #1
 8017abe:	2c00      	cmp	r4, #0
 8017ac0:	d12f      	bne.n	8017b22 <__gethex+0x364>
 8017ac2:	2f00      	cmp	r7, #0
 8017ac4:	d004      	beq.n	8017ad0 <__gethex+0x312>
 8017ac6:	0039      	movs	r1, r7
 8017ac8:	0028      	movs	r0, r5
 8017aca:	f000 fd34 	bl	8018536 <__any_on>
 8017ace:	0004      	movs	r4, r0
 8017ad0:	231f      	movs	r3, #31
 8017ad2:	117a      	asrs	r2, r7, #5
 8017ad4:	401f      	ands	r7, r3
 8017ad6:	3b1e      	subs	r3, #30
 8017ad8:	40bb      	lsls	r3, r7
 8017ada:	9903      	ldr	r1, [sp, #12]
 8017adc:	0092      	lsls	r2, r2, #2
 8017ade:	5852      	ldr	r2, [r2, r1]
 8017ae0:	421a      	tst	r2, r3
 8017ae2:	d001      	beq.n	8017ae8 <__gethex+0x32a>
 8017ae4:	2302      	movs	r3, #2
 8017ae6:	431c      	orrs	r4, r3
 8017ae8:	9b01      	ldr	r3, [sp, #4]
 8017aea:	0031      	movs	r1, r6
 8017aec:	1b9b      	subs	r3, r3, r6
 8017aee:	2602      	movs	r6, #2
 8017af0:	0028      	movs	r0, r5
 8017af2:	9301      	str	r3, [sp, #4]
 8017af4:	f7ff fe1a 	bl	801772c <rshift>
 8017af8:	9b02      	ldr	r3, [sp, #8]
 8017afa:	685f      	ldr	r7, [r3, #4]
 8017afc:	2c00      	cmp	r4, #0
 8017afe:	d040      	beq.n	8017b82 <__gethex+0x3c4>
 8017b00:	9b02      	ldr	r3, [sp, #8]
 8017b02:	68db      	ldr	r3, [r3, #12]
 8017b04:	2b02      	cmp	r3, #2
 8017b06:	d010      	beq.n	8017b2a <__gethex+0x36c>
 8017b08:	2b03      	cmp	r3, #3
 8017b0a:	d012      	beq.n	8017b32 <__gethex+0x374>
 8017b0c:	2b01      	cmp	r3, #1
 8017b0e:	d106      	bne.n	8017b1e <__gethex+0x360>
 8017b10:	07a2      	lsls	r2, r4, #30
 8017b12:	d504      	bpl.n	8017b1e <__gethex+0x360>
 8017b14:	9a03      	ldr	r2, [sp, #12]
 8017b16:	6812      	ldr	r2, [r2, #0]
 8017b18:	4314      	orrs	r4, r2
 8017b1a:	421c      	tst	r4, r3
 8017b1c:	d10c      	bne.n	8017b38 <__gethex+0x37a>
 8017b1e:	2310      	movs	r3, #16
 8017b20:	e02e      	b.n	8017b80 <__gethex+0x3c2>
 8017b22:	2401      	movs	r4, #1
 8017b24:	e7d4      	b.n	8017ad0 <__gethex+0x312>
 8017b26:	2601      	movs	r6, #1
 8017b28:	e7e8      	b.n	8017afc <__gethex+0x33e>
 8017b2a:	2301      	movs	r3, #1
 8017b2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017b2e:	1a9b      	subs	r3, r3, r2
 8017b30:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d0f2      	beq.n	8017b1e <__gethex+0x360>
 8017b38:	692c      	ldr	r4, [r5, #16]
 8017b3a:	00a3      	lsls	r3, r4, #2
 8017b3c:	9304      	str	r3, [sp, #16]
 8017b3e:	002b      	movs	r3, r5
 8017b40:	00a2      	lsls	r2, r4, #2
 8017b42:	3314      	adds	r3, #20
 8017b44:	1899      	adds	r1, r3, r2
 8017b46:	2200      	movs	r2, #0
 8017b48:	4694      	mov	ip, r2
 8017b4a:	681a      	ldr	r2, [r3, #0]
 8017b4c:	1c50      	adds	r0, r2, #1
 8017b4e:	d01d      	beq.n	8017b8c <__gethex+0x3ce>
 8017b50:	3201      	adds	r2, #1
 8017b52:	601a      	str	r2, [r3, #0]
 8017b54:	002b      	movs	r3, r5
 8017b56:	3314      	adds	r3, #20
 8017b58:	2e02      	cmp	r6, #2
 8017b5a:	d13a      	bne.n	8017bd2 <__gethex+0x414>
 8017b5c:	9a02      	ldr	r2, [sp, #8]
 8017b5e:	9901      	ldr	r1, [sp, #4]
 8017b60:	6812      	ldr	r2, [r2, #0]
 8017b62:	3a01      	subs	r2, #1
 8017b64:	428a      	cmp	r2, r1
 8017b66:	d10a      	bne.n	8017b7e <__gethex+0x3c0>
 8017b68:	114a      	asrs	r2, r1, #5
 8017b6a:	211f      	movs	r1, #31
 8017b6c:	9801      	ldr	r0, [sp, #4]
 8017b6e:	0092      	lsls	r2, r2, #2
 8017b70:	4001      	ands	r1, r0
 8017b72:	2001      	movs	r0, #1
 8017b74:	0004      	movs	r4, r0
 8017b76:	408c      	lsls	r4, r1
 8017b78:	58d3      	ldr	r3, [r2, r3]
 8017b7a:	4223      	tst	r3, r4
 8017b7c:	d148      	bne.n	8017c10 <__gethex+0x452>
 8017b7e:	2320      	movs	r3, #32
 8017b80:	431e      	orrs	r6, r3
 8017b82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017b84:	601d      	str	r5, [r3, #0]
 8017b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b88:	601f      	str	r7, [r3, #0]
 8017b8a:	e6ac      	b.n	80178e6 <__gethex+0x128>
 8017b8c:	4662      	mov	r2, ip
 8017b8e:	c304      	stmia	r3!, {r2}
 8017b90:	4299      	cmp	r1, r3
 8017b92:	d8da      	bhi.n	8017b4a <__gethex+0x38c>
 8017b94:	68ab      	ldr	r3, [r5, #8]
 8017b96:	429c      	cmp	r4, r3
 8017b98:	db12      	blt.n	8017bc0 <__gethex+0x402>
 8017b9a:	686b      	ldr	r3, [r5, #4]
 8017b9c:	9805      	ldr	r0, [sp, #20]
 8017b9e:	1c59      	adds	r1, r3, #1
 8017ba0:	f000 f924 	bl	8017dec <_Balloc>
 8017ba4:	0029      	movs	r1, r5
 8017ba6:	692b      	ldr	r3, [r5, #16]
 8017ba8:	9003      	str	r0, [sp, #12]
 8017baa:	1c9a      	adds	r2, r3, #2
 8017bac:	0092      	lsls	r2, r2, #2
 8017bae:	310c      	adds	r1, #12
 8017bb0:	300c      	adds	r0, #12
 8017bb2:	f7fc fa34 	bl	801401e <memcpy>
 8017bb6:	0029      	movs	r1, r5
 8017bb8:	9805      	ldr	r0, [sp, #20]
 8017bba:	f000 f93f 	bl	8017e3c <_Bfree>
 8017bbe:	9d03      	ldr	r5, [sp, #12]
 8017bc0:	692b      	ldr	r3, [r5, #16]
 8017bc2:	1c5a      	adds	r2, r3, #1
 8017bc4:	612a      	str	r2, [r5, #16]
 8017bc6:	2201      	movs	r2, #1
 8017bc8:	3304      	adds	r3, #4
 8017bca:	009b      	lsls	r3, r3, #2
 8017bcc:	18eb      	adds	r3, r5, r3
 8017bce:	605a      	str	r2, [r3, #4]
 8017bd0:	e7c0      	b.n	8017b54 <__gethex+0x396>
 8017bd2:	692a      	ldr	r2, [r5, #16]
 8017bd4:	42a2      	cmp	r2, r4
 8017bd6:	dd0a      	ble.n	8017bee <__gethex+0x430>
 8017bd8:	2101      	movs	r1, #1
 8017bda:	0028      	movs	r0, r5
 8017bdc:	f7ff fda6 	bl	801772c <rshift>
 8017be0:	9b02      	ldr	r3, [sp, #8]
 8017be2:	3701      	adds	r7, #1
 8017be4:	689b      	ldr	r3, [r3, #8]
 8017be6:	2601      	movs	r6, #1
 8017be8:	42bb      	cmp	r3, r7
 8017bea:	dac8      	bge.n	8017b7e <__gethex+0x3c0>
 8017bec:	e6dc      	b.n	80179a8 <__gethex+0x1ea>
 8017bee:	241f      	movs	r4, #31
 8017bf0:	9a01      	ldr	r2, [sp, #4]
 8017bf2:	2601      	movs	r6, #1
 8017bf4:	4022      	ands	r2, r4
 8017bf6:	1e14      	subs	r4, r2, #0
 8017bf8:	d0c1      	beq.n	8017b7e <__gethex+0x3c0>
 8017bfa:	9a04      	ldr	r2, [sp, #16]
 8017bfc:	189b      	adds	r3, r3, r2
 8017bfe:	3b04      	subs	r3, #4
 8017c00:	6818      	ldr	r0, [r3, #0]
 8017c02:	f000 f9a1 	bl	8017f48 <__hi0bits>
 8017c06:	2120      	movs	r1, #32
 8017c08:	1b0c      	subs	r4, r1, r4
 8017c0a:	42a0      	cmp	r0, r4
 8017c0c:	dbe4      	blt.n	8017bd8 <__gethex+0x41a>
 8017c0e:	e7b6      	b.n	8017b7e <__gethex+0x3c0>
 8017c10:	0006      	movs	r6, r0
 8017c12:	e7b4      	b.n	8017b7e <__gethex+0x3c0>

08017c14 <L_shift>:
 8017c14:	2308      	movs	r3, #8
 8017c16:	b570      	push	{r4, r5, r6, lr}
 8017c18:	2520      	movs	r5, #32
 8017c1a:	1a9a      	subs	r2, r3, r2
 8017c1c:	0092      	lsls	r2, r2, #2
 8017c1e:	1aad      	subs	r5, r5, r2
 8017c20:	6843      	ldr	r3, [r0, #4]
 8017c22:	6806      	ldr	r6, [r0, #0]
 8017c24:	001c      	movs	r4, r3
 8017c26:	40ac      	lsls	r4, r5
 8017c28:	40d3      	lsrs	r3, r2
 8017c2a:	4334      	orrs	r4, r6
 8017c2c:	6004      	str	r4, [r0, #0]
 8017c2e:	6043      	str	r3, [r0, #4]
 8017c30:	3004      	adds	r0, #4
 8017c32:	4288      	cmp	r0, r1
 8017c34:	d3f4      	bcc.n	8017c20 <L_shift+0xc>
 8017c36:	bd70      	pop	{r4, r5, r6, pc}

08017c38 <__match>:
 8017c38:	b530      	push	{r4, r5, lr}
 8017c3a:	6803      	ldr	r3, [r0, #0]
 8017c3c:	780c      	ldrb	r4, [r1, #0]
 8017c3e:	3301      	adds	r3, #1
 8017c40:	2c00      	cmp	r4, #0
 8017c42:	d102      	bne.n	8017c4a <__match+0x12>
 8017c44:	6003      	str	r3, [r0, #0]
 8017c46:	2001      	movs	r0, #1
 8017c48:	bd30      	pop	{r4, r5, pc}
 8017c4a:	781a      	ldrb	r2, [r3, #0]
 8017c4c:	0015      	movs	r5, r2
 8017c4e:	3d41      	subs	r5, #65	; 0x41
 8017c50:	2d19      	cmp	r5, #25
 8017c52:	d800      	bhi.n	8017c56 <__match+0x1e>
 8017c54:	3220      	adds	r2, #32
 8017c56:	3101      	adds	r1, #1
 8017c58:	42a2      	cmp	r2, r4
 8017c5a:	d0ef      	beq.n	8017c3c <__match+0x4>
 8017c5c:	2000      	movs	r0, #0
 8017c5e:	e7f3      	b.n	8017c48 <__match+0x10>

08017c60 <__hexnan>:
 8017c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c62:	b08b      	sub	sp, #44	; 0x2c
 8017c64:	9201      	str	r2, [sp, #4]
 8017c66:	680a      	ldr	r2, [r1, #0]
 8017c68:	9901      	ldr	r1, [sp, #4]
 8017c6a:	1153      	asrs	r3, r2, #5
 8017c6c:	009b      	lsls	r3, r3, #2
 8017c6e:	18cb      	adds	r3, r1, r3
 8017c70:	9304      	str	r3, [sp, #16]
 8017c72:	231f      	movs	r3, #31
 8017c74:	401a      	ands	r2, r3
 8017c76:	9008      	str	r0, [sp, #32]
 8017c78:	9206      	str	r2, [sp, #24]
 8017c7a:	d002      	beq.n	8017c82 <__hexnan+0x22>
 8017c7c:	9b04      	ldr	r3, [sp, #16]
 8017c7e:	3304      	adds	r3, #4
 8017c80:	9304      	str	r3, [sp, #16]
 8017c82:	9b04      	ldr	r3, [sp, #16]
 8017c84:	2500      	movs	r5, #0
 8017c86:	1f1e      	subs	r6, r3, #4
 8017c88:	0037      	movs	r7, r6
 8017c8a:	0034      	movs	r4, r6
 8017c8c:	9b08      	ldr	r3, [sp, #32]
 8017c8e:	6035      	str	r5, [r6, #0]
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	9507      	str	r5, [sp, #28]
 8017c94:	9305      	str	r3, [sp, #20]
 8017c96:	9502      	str	r5, [sp, #8]
 8017c98:	9b05      	ldr	r3, [sp, #20]
 8017c9a:	3301      	adds	r3, #1
 8017c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8017c9e:	9b05      	ldr	r3, [sp, #20]
 8017ca0:	785b      	ldrb	r3, [r3, #1]
 8017ca2:	9303      	str	r3, [sp, #12]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d028      	beq.n	8017cfa <__hexnan+0x9a>
 8017ca8:	9803      	ldr	r0, [sp, #12]
 8017caa:	f7ff fd73 	bl	8017794 <__hexdig_fun>
 8017cae:	2800      	cmp	r0, #0
 8017cb0:	d145      	bne.n	8017d3e <__hexnan+0xde>
 8017cb2:	9b03      	ldr	r3, [sp, #12]
 8017cb4:	2b20      	cmp	r3, #32
 8017cb6:	d819      	bhi.n	8017cec <__hexnan+0x8c>
 8017cb8:	9b02      	ldr	r3, [sp, #8]
 8017cba:	9a07      	ldr	r2, [sp, #28]
 8017cbc:	4293      	cmp	r3, r2
 8017cbe:	dd12      	ble.n	8017ce6 <__hexnan+0x86>
 8017cc0:	42bc      	cmp	r4, r7
 8017cc2:	d206      	bcs.n	8017cd2 <__hexnan+0x72>
 8017cc4:	2d07      	cmp	r5, #7
 8017cc6:	dc04      	bgt.n	8017cd2 <__hexnan+0x72>
 8017cc8:	002a      	movs	r2, r5
 8017cca:	0039      	movs	r1, r7
 8017ccc:	0020      	movs	r0, r4
 8017cce:	f7ff ffa1 	bl	8017c14 <L_shift>
 8017cd2:	9b01      	ldr	r3, [sp, #4]
 8017cd4:	2508      	movs	r5, #8
 8017cd6:	429c      	cmp	r4, r3
 8017cd8:	d905      	bls.n	8017ce6 <__hexnan+0x86>
 8017cda:	1f27      	subs	r7, r4, #4
 8017cdc:	2500      	movs	r5, #0
 8017cde:	003c      	movs	r4, r7
 8017ce0:	9b02      	ldr	r3, [sp, #8]
 8017ce2:	603d      	str	r5, [r7, #0]
 8017ce4:	9307      	str	r3, [sp, #28]
 8017ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ce8:	9305      	str	r3, [sp, #20]
 8017cea:	e7d5      	b.n	8017c98 <__hexnan+0x38>
 8017cec:	9b03      	ldr	r3, [sp, #12]
 8017cee:	2b29      	cmp	r3, #41	; 0x29
 8017cf0:	d14a      	bne.n	8017d88 <__hexnan+0x128>
 8017cf2:	9b05      	ldr	r3, [sp, #20]
 8017cf4:	9a08      	ldr	r2, [sp, #32]
 8017cf6:	3302      	adds	r3, #2
 8017cf8:	6013      	str	r3, [r2, #0]
 8017cfa:	9b02      	ldr	r3, [sp, #8]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d043      	beq.n	8017d88 <__hexnan+0x128>
 8017d00:	42bc      	cmp	r4, r7
 8017d02:	d206      	bcs.n	8017d12 <__hexnan+0xb2>
 8017d04:	2d07      	cmp	r5, #7
 8017d06:	dc04      	bgt.n	8017d12 <__hexnan+0xb2>
 8017d08:	002a      	movs	r2, r5
 8017d0a:	0039      	movs	r1, r7
 8017d0c:	0020      	movs	r0, r4
 8017d0e:	f7ff ff81 	bl	8017c14 <L_shift>
 8017d12:	9b01      	ldr	r3, [sp, #4]
 8017d14:	429c      	cmp	r4, r3
 8017d16:	d926      	bls.n	8017d66 <__hexnan+0x106>
 8017d18:	cc04      	ldmia	r4!, {r2}
 8017d1a:	601a      	str	r2, [r3, #0]
 8017d1c:	3304      	adds	r3, #4
 8017d1e:	42a6      	cmp	r6, r4
 8017d20:	d2fa      	bcs.n	8017d18 <__hexnan+0xb8>
 8017d22:	2200      	movs	r2, #0
 8017d24:	c304      	stmia	r3!, {r2}
 8017d26:	429e      	cmp	r6, r3
 8017d28:	d2fc      	bcs.n	8017d24 <__hexnan+0xc4>
 8017d2a:	6833      	ldr	r3, [r6, #0]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d104      	bne.n	8017d3a <__hexnan+0xda>
 8017d30:	9b01      	ldr	r3, [sp, #4]
 8017d32:	429e      	cmp	r6, r3
 8017d34:	d126      	bne.n	8017d84 <__hexnan+0x124>
 8017d36:	2301      	movs	r3, #1
 8017d38:	6033      	str	r3, [r6, #0]
 8017d3a:	2005      	movs	r0, #5
 8017d3c:	e025      	b.n	8017d8a <__hexnan+0x12a>
 8017d3e:	9b02      	ldr	r3, [sp, #8]
 8017d40:	3501      	adds	r5, #1
 8017d42:	3301      	adds	r3, #1
 8017d44:	9302      	str	r3, [sp, #8]
 8017d46:	2d08      	cmp	r5, #8
 8017d48:	dd06      	ble.n	8017d58 <__hexnan+0xf8>
 8017d4a:	9b01      	ldr	r3, [sp, #4]
 8017d4c:	429c      	cmp	r4, r3
 8017d4e:	d9ca      	bls.n	8017ce6 <__hexnan+0x86>
 8017d50:	2300      	movs	r3, #0
 8017d52:	2501      	movs	r5, #1
 8017d54:	3c04      	subs	r4, #4
 8017d56:	6023      	str	r3, [r4, #0]
 8017d58:	220f      	movs	r2, #15
 8017d5a:	6823      	ldr	r3, [r4, #0]
 8017d5c:	4010      	ands	r0, r2
 8017d5e:	011b      	lsls	r3, r3, #4
 8017d60:	4318      	orrs	r0, r3
 8017d62:	6020      	str	r0, [r4, #0]
 8017d64:	e7bf      	b.n	8017ce6 <__hexnan+0x86>
 8017d66:	9b06      	ldr	r3, [sp, #24]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d0de      	beq.n	8017d2a <__hexnan+0xca>
 8017d6c:	2120      	movs	r1, #32
 8017d6e:	9a06      	ldr	r2, [sp, #24]
 8017d70:	9b04      	ldr	r3, [sp, #16]
 8017d72:	1a89      	subs	r1, r1, r2
 8017d74:	2201      	movs	r2, #1
 8017d76:	4252      	negs	r2, r2
 8017d78:	40ca      	lsrs	r2, r1
 8017d7a:	3b04      	subs	r3, #4
 8017d7c:	6819      	ldr	r1, [r3, #0]
 8017d7e:	400a      	ands	r2, r1
 8017d80:	601a      	str	r2, [r3, #0]
 8017d82:	e7d2      	b.n	8017d2a <__hexnan+0xca>
 8017d84:	3e04      	subs	r6, #4
 8017d86:	e7d0      	b.n	8017d2a <__hexnan+0xca>
 8017d88:	2004      	movs	r0, #4
 8017d8a:	b00b      	add	sp, #44	; 0x2c
 8017d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d8e <__localeconv_l>:
 8017d8e:	30f0      	adds	r0, #240	; 0xf0
 8017d90:	4770      	bx	lr
	...

08017d94 <_localeconv_r>:
 8017d94:	4b03      	ldr	r3, [pc, #12]	; (8017da4 <_localeconv_r+0x10>)
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8017d9a:	2800      	cmp	r0, #0
 8017d9c:	d100      	bne.n	8017da0 <_localeconv_r+0xc>
 8017d9e:	4802      	ldr	r0, [pc, #8]	; (8017da8 <_localeconv_r+0x14>)
 8017da0:	30f0      	adds	r0, #240	; 0xf0
 8017da2:	4770      	bx	lr
 8017da4:	200000c8 	.word	0x200000c8
 8017da8:	200004f8 	.word	0x200004f8

08017dac <__retarget_lock_acquire_recursive>:
 8017dac:	4770      	bx	lr

08017dae <__retarget_lock_release_recursive>:
 8017dae:	4770      	bx	lr

08017db0 <memchr>:
 8017db0:	b2c9      	uxtb	r1, r1
 8017db2:	1882      	adds	r2, r0, r2
 8017db4:	4290      	cmp	r0, r2
 8017db6:	d101      	bne.n	8017dbc <memchr+0xc>
 8017db8:	2000      	movs	r0, #0
 8017dba:	4770      	bx	lr
 8017dbc:	7803      	ldrb	r3, [r0, #0]
 8017dbe:	428b      	cmp	r3, r1
 8017dc0:	d0fb      	beq.n	8017dba <memchr+0xa>
 8017dc2:	3001      	adds	r0, #1
 8017dc4:	e7f6      	b.n	8017db4 <memchr+0x4>

08017dc6 <memmove>:
 8017dc6:	b510      	push	{r4, lr}
 8017dc8:	4288      	cmp	r0, r1
 8017dca:	d902      	bls.n	8017dd2 <memmove+0xc>
 8017dcc:	188b      	adds	r3, r1, r2
 8017dce:	4298      	cmp	r0, r3
 8017dd0:	d303      	bcc.n	8017dda <memmove+0x14>
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	e007      	b.n	8017de6 <memmove+0x20>
 8017dd6:	5c8b      	ldrb	r3, [r1, r2]
 8017dd8:	5483      	strb	r3, [r0, r2]
 8017dda:	3a01      	subs	r2, #1
 8017ddc:	d2fb      	bcs.n	8017dd6 <memmove+0x10>
 8017dde:	bd10      	pop	{r4, pc}
 8017de0:	5ccc      	ldrb	r4, [r1, r3]
 8017de2:	54c4      	strb	r4, [r0, r3]
 8017de4:	3301      	adds	r3, #1
 8017de6:	429a      	cmp	r2, r3
 8017de8:	d1fa      	bne.n	8017de0 <memmove+0x1a>
 8017dea:	e7f8      	b.n	8017dde <memmove+0x18>

08017dec <_Balloc>:
 8017dec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017dee:	b570      	push	{r4, r5, r6, lr}
 8017df0:	0004      	movs	r4, r0
 8017df2:	000d      	movs	r5, r1
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d012      	beq.n	8017e1e <_Balloc+0x32>
 8017df8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8017dfa:	00ab      	lsls	r3, r5, #2
 8017dfc:	18d3      	adds	r3, r2, r3
 8017dfe:	6818      	ldr	r0, [r3, #0]
 8017e00:	2800      	cmp	r0, #0
 8017e02:	d115      	bne.n	8017e30 <_Balloc+0x44>
 8017e04:	2101      	movs	r1, #1
 8017e06:	000e      	movs	r6, r1
 8017e08:	40ae      	lsls	r6, r5
 8017e0a:	1d72      	adds	r2, r6, #5
 8017e0c:	0092      	lsls	r2, r2, #2
 8017e0e:	0020      	movs	r0, r4
 8017e10:	f7fb fe56 	bl	8013ac0 <_calloc_r>
 8017e14:	2800      	cmp	r0, #0
 8017e16:	d009      	beq.n	8017e2c <_Balloc+0x40>
 8017e18:	6045      	str	r5, [r0, #4]
 8017e1a:	6086      	str	r6, [r0, #8]
 8017e1c:	e00a      	b.n	8017e34 <_Balloc+0x48>
 8017e1e:	2221      	movs	r2, #33	; 0x21
 8017e20:	2104      	movs	r1, #4
 8017e22:	f7fb fe4d 	bl	8013ac0 <_calloc_r>
 8017e26:	64e0      	str	r0, [r4, #76]	; 0x4c
 8017e28:	2800      	cmp	r0, #0
 8017e2a:	d1e5      	bne.n	8017df8 <_Balloc+0xc>
 8017e2c:	2000      	movs	r0, #0
 8017e2e:	bd70      	pop	{r4, r5, r6, pc}
 8017e30:	6802      	ldr	r2, [r0, #0]
 8017e32:	601a      	str	r2, [r3, #0]
 8017e34:	2300      	movs	r3, #0
 8017e36:	6103      	str	r3, [r0, #16]
 8017e38:	60c3      	str	r3, [r0, #12]
 8017e3a:	e7f8      	b.n	8017e2e <_Balloc+0x42>

08017e3c <_Bfree>:
 8017e3c:	2900      	cmp	r1, #0
 8017e3e:	d006      	beq.n	8017e4e <_Bfree+0x12>
 8017e40:	684b      	ldr	r3, [r1, #4]
 8017e42:	009a      	lsls	r2, r3, #2
 8017e44:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017e46:	189b      	adds	r3, r3, r2
 8017e48:	681a      	ldr	r2, [r3, #0]
 8017e4a:	600a      	str	r2, [r1, #0]
 8017e4c:	6019      	str	r1, [r3, #0]
 8017e4e:	4770      	bx	lr

08017e50 <__multadd>:
 8017e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e52:	001e      	movs	r6, r3
 8017e54:	2314      	movs	r3, #20
 8017e56:	469c      	mov	ip, r3
 8017e58:	0007      	movs	r7, r0
 8017e5a:	000c      	movs	r4, r1
 8017e5c:	2000      	movs	r0, #0
 8017e5e:	690d      	ldr	r5, [r1, #16]
 8017e60:	448c      	add	ip, r1
 8017e62:	4663      	mov	r3, ip
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	3001      	adds	r0, #1
 8017e68:	b299      	uxth	r1, r3
 8017e6a:	4663      	mov	r3, ip
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	4351      	muls	r1, r2
 8017e70:	0c1b      	lsrs	r3, r3, #16
 8017e72:	4353      	muls	r3, r2
 8017e74:	1989      	adds	r1, r1, r6
 8017e76:	0c0e      	lsrs	r6, r1, #16
 8017e78:	199b      	adds	r3, r3, r6
 8017e7a:	b289      	uxth	r1, r1
 8017e7c:	0c1e      	lsrs	r6, r3, #16
 8017e7e:	041b      	lsls	r3, r3, #16
 8017e80:	185b      	adds	r3, r3, r1
 8017e82:	4661      	mov	r1, ip
 8017e84:	c108      	stmia	r1!, {r3}
 8017e86:	468c      	mov	ip, r1
 8017e88:	4285      	cmp	r5, r0
 8017e8a:	dcea      	bgt.n	8017e62 <__multadd+0x12>
 8017e8c:	2e00      	cmp	r6, #0
 8017e8e:	d01b      	beq.n	8017ec8 <__multadd+0x78>
 8017e90:	68a3      	ldr	r3, [r4, #8]
 8017e92:	42ab      	cmp	r3, r5
 8017e94:	dc12      	bgt.n	8017ebc <__multadd+0x6c>
 8017e96:	6863      	ldr	r3, [r4, #4]
 8017e98:	0038      	movs	r0, r7
 8017e9a:	1c59      	adds	r1, r3, #1
 8017e9c:	f7ff ffa6 	bl	8017dec <_Balloc>
 8017ea0:	0021      	movs	r1, r4
 8017ea2:	6923      	ldr	r3, [r4, #16]
 8017ea4:	9001      	str	r0, [sp, #4]
 8017ea6:	1c9a      	adds	r2, r3, #2
 8017ea8:	0092      	lsls	r2, r2, #2
 8017eaa:	310c      	adds	r1, #12
 8017eac:	300c      	adds	r0, #12
 8017eae:	f7fc f8b6 	bl	801401e <memcpy>
 8017eb2:	0021      	movs	r1, r4
 8017eb4:	0038      	movs	r0, r7
 8017eb6:	f7ff ffc1 	bl	8017e3c <_Bfree>
 8017eba:	9c01      	ldr	r4, [sp, #4]
 8017ebc:	1d2b      	adds	r3, r5, #4
 8017ebe:	009b      	lsls	r3, r3, #2
 8017ec0:	18e3      	adds	r3, r4, r3
 8017ec2:	3501      	adds	r5, #1
 8017ec4:	605e      	str	r6, [r3, #4]
 8017ec6:	6125      	str	r5, [r4, #16]
 8017ec8:	0020      	movs	r0, r4
 8017eca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08017ecc <__s2b>:
 8017ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017ece:	0006      	movs	r6, r0
 8017ed0:	0018      	movs	r0, r3
 8017ed2:	000c      	movs	r4, r1
 8017ed4:	3008      	adds	r0, #8
 8017ed6:	2109      	movs	r1, #9
 8017ed8:	9301      	str	r3, [sp, #4]
 8017eda:	0015      	movs	r5, r2
 8017edc:	f7e8 f9c2 	bl	8000264 <__divsi3>
 8017ee0:	2301      	movs	r3, #1
 8017ee2:	2100      	movs	r1, #0
 8017ee4:	4283      	cmp	r3, r0
 8017ee6:	db1f      	blt.n	8017f28 <__s2b+0x5c>
 8017ee8:	0030      	movs	r0, r6
 8017eea:	f7ff ff7f 	bl	8017dec <_Balloc>
 8017eee:	9b08      	ldr	r3, [sp, #32]
 8017ef0:	6143      	str	r3, [r0, #20]
 8017ef2:	2301      	movs	r3, #1
 8017ef4:	6103      	str	r3, [r0, #16]
 8017ef6:	2d09      	cmp	r5, #9
 8017ef8:	dd19      	ble.n	8017f2e <__s2b+0x62>
 8017efa:	0023      	movs	r3, r4
 8017efc:	3309      	adds	r3, #9
 8017efe:	001f      	movs	r7, r3
 8017f00:	9300      	str	r3, [sp, #0]
 8017f02:	1964      	adds	r4, r4, r5
 8017f04:	783b      	ldrb	r3, [r7, #0]
 8017f06:	0001      	movs	r1, r0
 8017f08:	3b30      	subs	r3, #48	; 0x30
 8017f0a:	220a      	movs	r2, #10
 8017f0c:	0030      	movs	r0, r6
 8017f0e:	3701      	adds	r7, #1
 8017f10:	f7ff ff9e 	bl	8017e50 <__multadd>
 8017f14:	42a7      	cmp	r7, r4
 8017f16:	d1f5      	bne.n	8017f04 <__s2b+0x38>
 8017f18:	9b00      	ldr	r3, [sp, #0]
 8017f1a:	195c      	adds	r4, r3, r5
 8017f1c:	3c08      	subs	r4, #8
 8017f1e:	002f      	movs	r7, r5
 8017f20:	9b01      	ldr	r3, [sp, #4]
 8017f22:	429f      	cmp	r7, r3
 8017f24:	db06      	blt.n	8017f34 <__s2b+0x68>
 8017f26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017f28:	005b      	lsls	r3, r3, #1
 8017f2a:	3101      	adds	r1, #1
 8017f2c:	e7da      	b.n	8017ee4 <__s2b+0x18>
 8017f2e:	340a      	adds	r4, #10
 8017f30:	2509      	movs	r5, #9
 8017f32:	e7f4      	b.n	8017f1e <__s2b+0x52>
 8017f34:	1b63      	subs	r3, r4, r5
 8017f36:	5ddb      	ldrb	r3, [r3, r7]
 8017f38:	0001      	movs	r1, r0
 8017f3a:	3b30      	subs	r3, #48	; 0x30
 8017f3c:	220a      	movs	r2, #10
 8017f3e:	0030      	movs	r0, r6
 8017f40:	f7ff ff86 	bl	8017e50 <__multadd>
 8017f44:	3701      	adds	r7, #1
 8017f46:	e7eb      	b.n	8017f20 <__s2b+0x54>

08017f48 <__hi0bits>:
 8017f48:	0003      	movs	r3, r0
 8017f4a:	0c02      	lsrs	r2, r0, #16
 8017f4c:	2000      	movs	r0, #0
 8017f4e:	4282      	cmp	r2, r0
 8017f50:	d101      	bne.n	8017f56 <__hi0bits+0xe>
 8017f52:	041b      	lsls	r3, r3, #16
 8017f54:	3010      	adds	r0, #16
 8017f56:	0e1a      	lsrs	r2, r3, #24
 8017f58:	d101      	bne.n	8017f5e <__hi0bits+0x16>
 8017f5a:	3008      	adds	r0, #8
 8017f5c:	021b      	lsls	r3, r3, #8
 8017f5e:	0f1a      	lsrs	r2, r3, #28
 8017f60:	d101      	bne.n	8017f66 <__hi0bits+0x1e>
 8017f62:	3004      	adds	r0, #4
 8017f64:	011b      	lsls	r3, r3, #4
 8017f66:	0f9a      	lsrs	r2, r3, #30
 8017f68:	d101      	bne.n	8017f6e <__hi0bits+0x26>
 8017f6a:	3002      	adds	r0, #2
 8017f6c:	009b      	lsls	r3, r3, #2
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	db03      	blt.n	8017f7a <__hi0bits+0x32>
 8017f72:	3001      	adds	r0, #1
 8017f74:	005b      	lsls	r3, r3, #1
 8017f76:	d400      	bmi.n	8017f7a <__hi0bits+0x32>
 8017f78:	2020      	movs	r0, #32
 8017f7a:	4770      	bx	lr

08017f7c <__lo0bits>:
 8017f7c:	2207      	movs	r2, #7
 8017f7e:	6803      	ldr	r3, [r0, #0]
 8017f80:	b510      	push	{r4, lr}
 8017f82:	0001      	movs	r1, r0
 8017f84:	401a      	ands	r2, r3
 8017f86:	d00d      	beq.n	8017fa4 <__lo0bits+0x28>
 8017f88:	2401      	movs	r4, #1
 8017f8a:	2000      	movs	r0, #0
 8017f8c:	4223      	tst	r3, r4
 8017f8e:	d105      	bne.n	8017f9c <__lo0bits+0x20>
 8017f90:	3002      	adds	r0, #2
 8017f92:	4203      	tst	r3, r0
 8017f94:	d003      	beq.n	8017f9e <__lo0bits+0x22>
 8017f96:	40e3      	lsrs	r3, r4
 8017f98:	0020      	movs	r0, r4
 8017f9a:	600b      	str	r3, [r1, #0]
 8017f9c:	bd10      	pop	{r4, pc}
 8017f9e:	089b      	lsrs	r3, r3, #2
 8017fa0:	600b      	str	r3, [r1, #0]
 8017fa2:	e7fb      	b.n	8017f9c <__lo0bits+0x20>
 8017fa4:	b29c      	uxth	r4, r3
 8017fa6:	0010      	movs	r0, r2
 8017fa8:	2c00      	cmp	r4, #0
 8017faa:	d101      	bne.n	8017fb0 <__lo0bits+0x34>
 8017fac:	2010      	movs	r0, #16
 8017fae:	0c1b      	lsrs	r3, r3, #16
 8017fb0:	b2da      	uxtb	r2, r3
 8017fb2:	2a00      	cmp	r2, #0
 8017fb4:	d101      	bne.n	8017fba <__lo0bits+0x3e>
 8017fb6:	3008      	adds	r0, #8
 8017fb8:	0a1b      	lsrs	r3, r3, #8
 8017fba:	071a      	lsls	r2, r3, #28
 8017fbc:	d101      	bne.n	8017fc2 <__lo0bits+0x46>
 8017fbe:	3004      	adds	r0, #4
 8017fc0:	091b      	lsrs	r3, r3, #4
 8017fc2:	079a      	lsls	r2, r3, #30
 8017fc4:	d101      	bne.n	8017fca <__lo0bits+0x4e>
 8017fc6:	3002      	adds	r0, #2
 8017fc8:	089b      	lsrs	r3, r3, #2
 8017fca:	07da      	lsls	r2, r3, #31
 8017fcc:	d4e8      	bmi.n	8017fa0 <__lo0bits+0x24>
 8017fce:	085b      	lsrs	r3, r3, #1
 8017fd0:	d001      	beq.n	8017fd6 <__lo0bits+0x5a>
 8017fd2:	3001      	adds	r0, #1
 8017fd4:	e7e4      	b.n	8017fa0 <__lo0bits+0x24>
 8017fd6:	2020      	movs	r0, #32
 8017fd8:	e7e0      	b.n	8017f9c <__lo0bits+0x20>

08017fda <__i2b>:
 8017fda:	b510      	push	{r4, lr}
 8017fdc:	000c      	movs	r4, r1
 8017fde:	2101      	movs	r1, #1
 8017fe0:	f7ff ff04 	bl	8017dec <_Balloc>
 8017fe4:	2301      	movs	r3, #1
 8017fe6:	6144      	str	r4, [r0, #20]
 8017fe8:	6103      	str	r3, [r0, #16]
 8017fea:	bd10      	pop	{r4, pc}

08017fec <__multiply>:
 8017fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fee:	690b      	ldr	r3, [r1, #16]
 8017ff0:	0014      	movs	r4, r2
 8017ff2:	6912      	ldr	r2, [r2, #16]
 8017ff4:	b089      	sub	sp, #36	; 0x24
 8017ff6:	000d      	movs	r5, r1
 8017ff8:	4293      	cmp	r3, r2
 8017ffa:	da01      	bge.n	8018000 <__multiply+0x14>
 8017ffc:	0025      	movs	r5, r4
 8017ffe:	000c      	movs	r4, r1
 8018000:	692f      	ldr	r7, [r5, #16]
 8018002:	6926      	ldr	r6, [r4, #16]
 8018004:	6869      	ldr	r1, [r5, #4]
 8018006:	19bb      	adds	r3, r7, r6
 8018008:	9302      	str	r3, [sp, #8]
 801800a:	68ab      	ldr	r3, [r5, #8]
 801800c:	19ba      	adds	r2, r7, r6
 801800e:	4293      	cmp	r3, r2
 8018010:	da00      	bge.n	8018014 <__multiply+0x28>
 8018012:	3101      	adds	r1, #1
 8018014:	f7ff feea 	bl	8017dec <_Balloc>
 8018018:	0002      	movs	r2, r0
 801801a:	19bb      	adds	r3, r7, r6
 801801c:	3214      	adds	r2, #20
 801801e:	009b      	lsls	r3, r3, #2
 8018020:	18d3      	adds	r3, r2, r3
 8018022:	469c      	mov	ip, r3
 8018024:	2100      	movs	r1, #0
 8018026:	0013      	movs	r3, r2
 8018028:	9004      	str	r0, [sp, #16]
 801802a:	4563      	cmp	r3, ip
 801802c:	d31d      	bcc.n	801806a <__multiply+0x7e>
 801802e:	3514      	adds	r5, #20
 8018030:	00bf      	lsls	r7, r7, #2
 8018032:	19eb      	adds	r3, r5, r7
 8018034:	3414      	adds	r4, #20
 8018036:	00b6      	lsls	r6, r6, #2
 8018038:	9305      	str	r3, [sp, #20]
 801803a:	19a3      	adds	r3, r4, r6
 801803c:	9503      	str	r5, [sp, #12]
 801803e:	9401      	str	r4, [sp, #4]
 8018040:	9307      	str	r3, [sp, #28]
 8018042:	9b07      	ldr	r3, [sp, #28]
 8018044:	9901      	ldr	r1, [sp, #4]
 8018046:	4299      	cmp	r1, r3
 8018048:	d311      	bcc.n	801806e <__multiply+0x82>
 801804a:	9b02      	ldr	r3, [sp, #8]
 801804c:	2b00      	cmp	r3, #0
 801804e:	dd06      	ble.n	801805e <__multiply+0x72>
 8018050:	2304      	movs	r3, #4
 8018052:	425b      	negs	r3, r3
 8018054:	449c      	add	ip, r3
 8018056:	4663      	mov	r3, ip
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d051      	beq.n	8018102 <__multiply+0x116>
 801805e:	9b04      	ldr	r3, [sp, #16]
 8018060:	9a02      	ldr	r2, [sp, #8]
 8018062:	0018      	movs	r0, r3
 8018064:	611a      	str	r2, [r3, #16]
 8018066:	b009      	add	sp, #36	; 0x24
 8018068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801806a:	c302      	stmia	r3!, {r1}
 801806c:	e7dd      	b.n	801802a <__multiply+0x3e>
 801806e:	9b01      	ldr	r3, [sp, #4]
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	b298      	uxth	r0, r3
 8018074:	2800      	cmp	r0, #0
 8018076:	d01c      	beq.n	80180b2 <__multiply+0xc6>
 8018078:	0015      	movs	r5, r2
 801807a:	2600      	movs	r6, #0
 801807c:	9f03      	ldr	r7, [sp, #12]
 801807e:	cf02      	ldmia	r7!, {r1}
 8018080:	682c      	ldr	r4, [r5, #0]
 8018082:	b28b      	uxth	r3, r1
 8018084:	4343      	muls	r3, r0
 8018086:	0c09      	lsrs	r1, r1, #16
 8018088:	4341      	muls	r1, r0
 801808a:	b2a4      	uxth	r4, r4
 801808c:	191b      	adds	r3, r3, r4
 801808e:	199b      	adds	r3, r3, r6
 8018090:	000e      	movs	r6, r1
 8018092:	6829      	ldr	r1, [r5, #0]
 8018094:	9506      	str	r5, [sp, #24]
 8018096:	0c09      	lsrs	r1, r1, #16
 8018098:	1871      	adds	r1, r6, r1
 801809a:	0c1e      	lsrs	r6, r3, #16
 801809c:	1989      	adds	r1, r1, r6
 801809e:	0c0e      	lsrs	r6, r1, #16
 80180a0:	b29b      	uxth	r3, r3
 80180a2:	0409      	lsls	r1, r1, #16
 80180a4:	430b      	orrs	r3, r1
 80180a6:	c508      	stmia	r5!, {r3}
 80180a8:	9b05      	ldr	r3, [sp, #20]
 80180aa:	42bb      	cmp	r3, r7
 80180ac:	d8e7      	bhi.n	801807e <__multiply+0x92>
 80180ae:	9b06      	ldr	r3, [sp, #24]
 80180b0:	605e      	str	r6, [r3, #4]
 80180b2:	9b01      	ldr	r3, [sp, #4]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	0c1d      	lsrs	r5, r3, #16
 80180b8:	d01e      	beq.n	80180f8 <__multiply+0x10c>
 80180ba:	0010      	movs	r0, r2
 80180bc:	2700      	movs	r7, #0
 80180be:	6813      	ldr	r3, [r2, #0]
 80180c0:	9e03      	ldr	r6, [sp, #12]
 80180c2:	6831      	ldr	r1, [r6, #0]
 80180c4:	6804      	ldr	r4, [r0, #0]
 80180c6:	b289      	uxth	r1, r1
 80180c8:	4369      	muls	r1, r5
 80180ca:	0c24      	lsrs	r4, r4, #16
 80180cc:	1909      	adds	r1, r1, r4
 80180ce:	19c9      	adds	r1, r1, r7
 80180d0:	040f      	lsls	r7, r1, #16
 80180d2:	b29b      	uxth	r3, r3
 80180d4:	433b      	orrs	r3, r7
 80180d6:	6003      	str	r3, [r0, #0]
 80180d8:	ce80      	ldmia	r6!, {r7}
 80180da:	6843      	ldr	r3, [r0, #4]
 80180dc:	0c3f      	lsrs	r7, r7, #16
 80180de:	436f      	muls	r7, r5
 80180e0:	b29b      	uxth	r3, r3
 80180e2:	18fb      	adds	r3, r7, r3
 80180e4:	0c09      	lsrs	r1, r1, #16
 80180e6:	185b      	adds	r3, r3, r1
 80180e8:	9905      	ldr	r1, [sp, #20]
 80180ea:	9006      	str	r0, [sp, #24]
 80180ec:	0c1f      	lsrs	r7, r3, #16
 80180ee:	3004      	adds	r0, #4
 80180f0:	42b1      	cmp	r1, r6
 80180f2:	d8e6      	bhi.n	80180c2 <__multiply+0xd6>
 80180f4:	9906      	ldr	r1, [sp, #24]
 80180f6:	604b      	str	r3, [r1, #4]
 80180f8:	9b01      	ldr	r3, [sp, #4]
 80180fa:	3204      	adds	r2, #4
 80180fc:	3304      	adds	r3, #4
 80180fe:	9301      	str	r3, [sp, #4]
 8018100:	e79f      	b.n	8018042 <__multiply+0x56>
 8018102:	9b02      	ldr	r3, [sp, #8]
 8018104:	3b01      	subs	r3, #1
 8018106:	9302      	str	r3, [sp, #8]
 8018108:	e79f      	b.n	801804a <__multiply+0x5e>
	...

0801810c <__pow5mult>:
 801810c:	2303      	movs	r3, #3
 801810e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018110:	4013      	ands	r3, r2
 8018112:	0006      	movs	r6, r0
 8018114:	000f      	movs	r7, r1
 8018116:	0015      	movs	r5, r2
 8018118:	2b00      	cmp	r3, #0
 801811a:	d008      	beq.n	801812e <__pow5mult+0x22>
 801811c:	491a      	ldr	r1, [pc, #104]	; (8018188 <__pow5mult+0x7c>)
 801811e:	3b01      	subs	r3, #1
 8018120:	009a      	lsls	r2, r3, #2
 8018122:	5852      	ldr	r2, [r2, r1]
 8018124:	2300      	movs	r3, #0
 8018126:	0039      	movs	r1, r7
 8018128:	f7ff fe92 	bl	8017e50 <__multadd>
 801812c:	0007      	movs	r7, r0
 801812e:	10ad      	asrs	r5, r5, #2
 8018130:	d027      	beq.n	8018182 <__pow5mult+0x76>
 8018132:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8018134:	2c00      	cmp	r4, #0
 8018136:	d107      	bne.n	8018148 <__pow5mult+0x3c>
 8018138:	4914      	ldr	r1, [pc, #80]	; (801818c <__pow5mult+0x80>)
 801813a:	0030      	movs	r0, r6
 801813c:	f7ff ff4d 	bl	8017fda <__i2b>
 8018140:	2300      	movs	r3, #0
 8018142:	0004      	movs	r4, r0
 8018144:	64b0      	str	r0, [r6, #72]	; 0x48
 8018146:	6003      	str	r3, [r0, #0]
 8018148:	2301      	movs	r3, #1
 801814a:	421d      	tst	r5, r3
 801814c:	d00a      	beq.n	8018164 <__pow5mult+0x58>
 801814e:	0039      	movs	r1, r7
 8018150:	0022      	movs	r2, r4
 8018152:	0030      	movs	r0, r6
 8018154:	f7ff ff4a 	bl	8017fec <__multiply>
 8018158:	0039      	movs	r1, r7
 801815a:	9001      	str	r0, [sp, #4]
 801815c:	0030      	movs	r0, r6
 801815e:	f7ff fe6d 	bl	8017e3c <_Bfree>
 8018162:	9f01      	ldr	r7, [sp, #4]
 8018164:	106d      	asrs	r5, r5, #1
 8018166:	d00c      	beq.n	8018182 <__pow5mult+0x76>
 8018168:	6820      	ldr	r0, [r4, #0]
 801816a:	2800      	cmp	r0, #0
 801816c:	d107      	bne.n	801817e <__pow5mult+0x72>
 801816e:	0022      	movs	r2, r4
 8018170:	0021      	movs	r1, r4
 8018172:	0030      	movs	r0, r6
 8018174:	f7ff ff3a 	bl	8017fec <__multiply>
 8018178:	2300      	movs	r3, #0
 801817a:	6020      	str	r0, [r4, #0]
 801817c:	6003      	str	r3, [r0, #0]
 801817e:	0004      	movs	r4, r0
 8018180:	e7e2      	b.n	8018148 <__pow5mult+0x3c>
 8018182:	0038      	movs	r0, r7
 8018184:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018186:	46c0      	nop			; (mov r8, r8)
 8018188:	0801c218 	.word	0x0801c218
 801818c:	00000271 	.word	0x00000271

08018190 <__lshift>:
 8018190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018192:	000d      	movs	r5, r1
 8018194:	0017      	movs	r7, r2
 8018196:	692b      	ldr	r3, [r5, #16]
 8018198:	1154      	asrs	r4, r2, #5
 801819a:	b085      	sub	sp, #20
 801819c:	18e3      	adds	r3, r4, r3
 801819e:	9301      	str	r3, [sp, #4]
 80181a0:	3301      	adds	r3, #1
 80181a2:	9300      	str	r3, [sp, #0]
 80181a4:	6849      	ldr	r1, [r1, #4]
 80181a6:	68ab      	ldr	r3, [r5, #8]
 80181a8:	9002      	str	r0, [sp, #8]
 80181aa:	9a00      	ldr	r2, [sp, #0]
 80181ac:	4293      	cmp	r3, r2
 80181ae:	db35      	blt.n	801821c <__lshift+0x8c>
 80181b0:	9802      	ldr	r0, [sp, #8]
 80181b2:	f7ff fe1b 	bl	8017dec <_Balloc>
 80181b6:	2300      	movs	r3, #0
 80181b8:	0002      	movs	r2, r0
 80181ba:	0006      	movs	r6, r0
 80181bc:	0019      	movs	r1, r3
 80181be:	3214      	adds	r2, #20
 80181c0:	42a3      	cmp	r3, r4
 80181c2:	db2e      	blt.n	8018222 <__lshift+0x92>
 80181c4:	43e3      	mvns	r3, r4
 80181c6:	17db      	asrs	r3, r3, #31
 80181c8:	401c      	ands	r4, r3
 80181ca:	002b      	movs	r3, r5
 80181cc:	00a4      	lsls	r4, r4, #2
 80181ce:	1914      	adds	r4, r2, r4
 80181d0:	692a      	ldr	r2, [r5, #16]
 80181d2:	3314      	adds	r3, #20
 80181d4:	0092      	lsls	r2, r2, #2
 80181d6:	189a      	adds	r2, r3, r2
 80181d8:	4694      	mov	ip, r2
 80181da:	221f      	movs	r2, #31
 80181dc:	4017      	ands	r7, r2
 80181de:	d024      	beq.n	801822a <__lshift+0x9a>
 80181e0:	3201      	adds	r2, #1
 80181e2:	1bd2      	subs	r2, r2, r7
 80181e4:	9203      	str	r2, [sp, #12]
 80181e6:	2200      	movs	r2, #0
 80181e8:	6819      	ldr	r1, [r3, #0]
 80181ea:	0020      	movs	r0, r4
 80181ec:	40b9      	lsls	r1, r7
 80181ee:	430a      	orrs	r2, r1
 80181f0:	c404      	stmia	r4!, {r2}
 80181f2:	cb04      	ldmia	r3!, {r2}
 80181f4:	9903      	ldr	r1, [sp, #12]
 80181f6:	40ca      	lsrs	r2, r1
 80181f8:	459c      	cmp	ip, r3
 80181fa:	d8f5      	bhi.n	80181e8 <__lshift+0x58>
 80181fc:	6042      	str	r2, [r0, #4]
 80181fe:	2a00      	cmp	r2, #0
 8018200:	d002      	beq.n	8018208 <__lshift+0x78>
 8018202:	9b01      	ldr	r3, [sp, #4]
 8018204:	3302      	adds	r3, #2
 8018206:	9300      	str	r3, [sp, #0]
 8018208:	9b00      	ldr	r3, [sp, #0]
 801820a:	9802      	ldr	r0, [sp, #8]
 801820c:	3b01      	subs	r3, #1
 801820e:	6133      	str	r3, [r6, #16]
 8018210:	0029      	movs	r1, r5
 8018212:	f7ff fe13 	bl	8017e3c <_Bfree>
 8018216:	0030      	movs	r0, r6
 8018218:	b005      	add	sp, #20
 801821a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801821c:	3101      	adds	r1, #1
 801821e:	005b      	lsls	r3, r3, #1
 8018220:	e7c3      	b.n	80181aa <__lshift+0x1a>
 8018222:	0098      	lsls	r0, r3, #2
 8018224:	5011      	str	r1, [r2, r0]
 8018226:	3301      	adds	r3, #1
 8018228:	e7ca      	b.n	80181c0 <__lshift+0x30>
 801822a:	cb04      	ldmia	r3!, {r2}
 801822c:	c404      	stmia	r4!, {r2}
 801822e:	459c      	cmp	ip, r3
 8018230:	d8fb      	bhi.n	801822a <__lshift+0x9a>
 8018232:	e7e9      	b.n	8018208 <__lshift+0x78>

08018234 <__mcmp>:
 8018234:	690a      	ldr	r2, [r1, #16]
 8018236:	6903      	ldr	r3, [r0, #16]
 8018238:	b530      	push	{r4, r5, lr}
 801823a:	1a9b      	subs	r3, r3, r2
 801823c:	d10d      	bne.n	801825a <__mcmp+0x26>
 801823e:	0092      	lsls	r2, r2, #2
 8018240:	3014      	adds	r0, #20
 8018242:	3114      	adds	r1, #20
 8018244:	1884      	adds	r4, r0, r2
 8018246:	1889      	adds	r1, r1, r2
 8018248:	3c04      	subs	r4, #4
 801824a:	3904      	subs	r1, #4
 801824c:	6825      	ldr	r5, [r4, #0]
 801824e:	680a      	ldr	r2, [r1, #0]
 8018250:	4295      	cmp	r5, r2
 8018252:	d004      	beq.n	801825e <__mcmp+0x2a>
 8018254:	2301      	movs	r3, #1
 8018256:	4295      	cmp	r5, r2
 8018258:	d304      	bcc.n	8018264 <__mcmp+0x30>
 801825a:	0018      	movs	r0, r3
 801825c:	bd30      	pop	{r4, r5, pc}
 801825e:	42a0      	cmp	r0, r4
 8018260:	d3f2      	bcc.n	8018248 <__mcmp+0x14>
 8018262:	e7fa      	b.n	801825a <__mcmp+0x26>
 8018264:	425b      	negs	r3, r3
 8018266:	e7f8      	b.n	801825a <__mcmp+0x26>

08018268 <__mdiff>:
 8018268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801826a:	000d      	movs	r5, r1
 801826c:	b085      	sub	sp, #20
 801826e:	0007      	movs	r7, r0
 8018270:	0011      	movs	r1, r2
 8018272:	0028      	movs	r0, r5
 8018274:	0014      	movs	r4, r2
 8018276:	f7ff ffdd 	bl	8018234 <__mcmp>
 801827a:	1e06      	subs	r6, r0, #0
 801827c:	d108      	bne.n	8018290 <__mdiff+0x28>
 801827e:	0001      	movs	r1, r0
 8018280:	0038      	movs	r0, r7
 8018282:	f7ff fdb3 	bl	8017dec <_Balloc>
 8018286:	2301      	movs	r3, #1
 8018288:	6146      	str	r6, [r0, #20]
 801828a:	6103      	str	r3, [r0, #16]
 801828c:	b005      	add	sp, #20
 801828e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018290:	2301      	movs	r3, #1
 8018292:	9301      	str	r3, [sp, #4]
 8018294:	2800      	cmp	r0, #0
 8018296:	db04      	blt.n	80182a2 <__mdiff+0x3a>
 8018298:	0023      	movs	r3, r4
 801829a:	002c      	movs	r4, r5
 801829c:	001d      	movs	r5, r3
 801829e:	2300      	movs	r3, #0
 80182a0:	9301      	str	r3, [sp, #4]
 80182a2:	6861      	ldr	r1, [r4, #4]
 80182a4:	0038      	movs	r0, r7
 80182a6:	f7ff fda1 	bl	8017dec <_Balloc>
 80182aa:	002f      	movs	r7, r5
 80182ac:	2200      	movs	r2, #0
 80182ae:	9b01      	ldr	r3, [sp, #4]
 80182b0:	6926      	ldr	r6, [r4, #16]
 80182b2:	60c3      	str	r3, [r0, #12]
 80182b4:	3414      	adds	r4, #20
 80182b6:	00b3      	lsls	r3, r6, #2
 80182b8:	18e3      	adds	r3, r4, r3
 80182ba:	9302      	str	r3, [sp, #8]
 80182bc:	692b      	ldr	r3, [r5, #16]
 80182be:	3714      	adds	r7, #20
 80182c0:	009b      	lsls	r3, r3, #2
 80182c2:	18fb      	adds	r3, r7, r3
 80182c4:	9303      	str	r3, [sp, #12]
 80182c6:	0003      	movs	r3, r0
 80182c8:	4694      	mov	ip, r2
 80182ca:	3314      	adds	r3, #20
 80182cc:	cc20      	ldmia	r4!, {r5}
 80182ce:	cf04      	ldmia	r7!, {r2}
 80182d0:	9201      	str	r2, [sp, #4]
 80182d2:	b2aa      	uxth	r2, r5
 80182d4:	4494      	add	ip, r2
 80182d6:	466a      	mov	r2, sp
 80182d8:	4661      	mov	r1, ip
 80182da:	8892      	ldrh	r2, [r2, #4]
 80182dc:	0c2d      	lsrs	r5, r5, #16
 80182de:	1a8a      	subs	r2, r1, r2
 80182e0:	9901      	ldr	r1, [sp, #4]
 80182e2:	0c09      	lsrs	r1, r1, #16
 80182e4:	1a69      	subs	r1, r5, r1
 80182e6:	1415      	asrs	r5, r2, #16
 80182e8:	1949      	adds	r1, r1, r5
 80182ea:	140d      	asrs	r5, r1, #16
 80182ec:	b292      	uxth	r2, r2
 80182ee:	0409      	lsls	r1, r1, #16
 80182f0:	430a      	orrs	r2, r1
 80182f2:	601a      	str	r2, [r3, #0]
 80182f4:	9a03      	ldr	r2, [sp, #12]
 80182f6:	46ac      	mov	ip, r5
 80182f8:	3304      	adds	r3, #4
 80182fa:	42ba      	cmp	r2, r7
 80182fc:	d8e6      	bhi.n	80182cc <__mdiff+0x64>
 80182fe:	9902      	ldr	r1, [sp, #8]
 8018300:	001a      	movs	r2, r3
 8018302:	428c      	cmp	r4, r1
 8018304:	d305      	bcc.n	8018312 <__mdiff+0xaa>
 8018306:	3a04      	subs	r2, #4
 8018308:	6813      	ldr	r3, [r2, #0]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d00e      	beq.n	801832c <__mdiff+0xc4>
 801830e:	6106      	str	r6, [r0, #16]
 8018310:	e7bc      	b.n	801828c <__mdiff+0x24>
 8018312:	cc04      	ldmia	r4!, {r2}
 8018314:	b291      	uxth	r1, r2
 8018316:	4461      	add	r1, ip
 8018318:	140d      	asrs	r5, r1, #16
 801831a:	0c12      	lsrs	r2, r2, #16
 801831c:	1952      	adds	r2, r2, r5
 801831e:	1415      	asrs	r5, r2, #16
 8018320:	b289      	uxth	r1, r1
 8018322:	0412      	lsls	r2, r2, #16
 8018324:	430a      	orrs	r2, r1
 8018326:	46ac      	mov	ip, r5
 8018328:	c304      	stmia	r3!, {r2}
 801832a:	e7e8      	b.n	80182fe <__mdiff+0x96>
 801832c:	3e01      	subs	r6, #1
 801832e:	e7ea      	b.n	8018306 <__mdiff+0x9e>

08018330 <__ulp>:
 8018330:	000b      	movs	r3, r1
 8018332:	4910      	ldr	r1, [pc, #64]	; (8018374 <__ulp+0x44>)
 8018334:	b510      	push	{r4, lr}
 8018336:	4019      	ands	r1, r3
 8018338:	4b0f      	ldr	r3, [pc, #60]	; (8018378 <__ulp+0x48>)
 801833a:	18c9      	adds	r1, r1, r3
 801833c:	2900      	cmp	r1, #0
 801833e:	dd04      	ble.n	801834a <__ulp+0x1a>
 8018340:	2200      	movs	r2, #0
 8018342:	000b      	movs	r3, r1
 8018344:	0010      	movs	r0, r2
 8018346:	0019      	movs	r1, r3
 8018348:	bd10      	pop	{r4, pc}
 801834a:	4249      	negs	r1, r1
 801834c:	1509      	asrs	r1, r1, #20
 801834e:	2200      	movs	r2, #0
 8018350:	2300      	movs	r3, #0
 8018352:	2913      	cmp	r1, #19
 8018354:	dc04      	bgt.n	8018360 <__ulp+0x30>
 8018356:	2080      	movs	r0, #128	; 0x80
 8018358:	0300      	lsls	r0, r0, #12
 801835a:	4108      	asrs	r0, r1
 801835c:	0003      	movs	r3, r0
 801835e:	e7f1      	b.n	8018344 <__ulp+0x14>
 8018360:	3914      	subs	r1, #20
 8018362:	2001      	movs	r0, #1
 8018364:	291e      	cmp	r1, #30
 8018366:	dc02      	bgt.n	801836e <__ulp+0x3e>
 8018368:	241f      	movs	r4, #31
 801836a:	1a61      	subs	r1, r4, r1
 801836c:	4088      	lsls	r0, r1
 801836e:	0002      	movs	r2, r0
 8018370:	e7e8      	b.n	8018344 <__ulp+0x14>
 8018372:	46c0      	nop			; (mov r8, r8)
 8018374:	7ff00000 	.word	0x7ff00000
 8018378:	fcc00000 	.word	0xfcc00000

0801837c <__b2d>:
 801837c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801837e:	0006      	movs	r6, r0
 8018380:	6903      	ldr	r3, [r0, #16]
 8018382:	3614      	adds	r6, #20
 8018384:	009b      	lsls	r3, r3, #2
 8018386:	18f3      	adds	r3, r6, r3
 8018388:	1f1d      	subs	r5, r3, #4
 801838a:	682c      	ldr	r4, [r5, #0]
 801838c:	000f      	movs	r7, r1
 801838e:	0020      	movs	r0, r4
 8018390:	9301      	str	r3, [sp, #4]
 8018392:	f7ff fdd9 	bl	8017f48 <__hi0bits>
 8018396:	2320      	movs	r3, #32
 8018398:	1a1b      	subs	r3, r3, r0
 801839a:	603b      	str	r3, [r7, #0]
 801839c:	491c      	ldr	r1, [pc, #112]	; (8018410 <__b2d+0x94>)
 801839e:	280a      	cmp	r0, #10
 80183a0:	dc16      	bgt.n	80183d0 <__b2d+0x54>
 80183a2:	230b      	movs	r3, #11
 80183a4:	0027      	movs	r7, r4
 80183a6:	1a1b      	subs	r3, r3, r0
 80183a8:	40df      	lsrs	r7, r3
 80183aa:	4339      	orrs	r1, r7
 80183ac:	469c      	mov	ip, r3
 80183ae:	000b      	movs	r3, r1
 80183b0:	2100      	movs	r1, #0
 80183b2:	42ae      	cmp	r6, r5
 80183b4:	d202      	bcs.n	80183bc <__b2d+0x40>
 80183b6:	9901      	ldr	r1, [sp, #4]
 80183b8:	3908      	subs	r1, #8
 80183ba:	6809      	ldr	r1, [r1, #0]
 80183bc:	3015      	adds	r0, #21
 80183be:	4084      	lsls	r4, r0
 80183c0:	4660      	mov	r0, ip
 80183c2:	40c1      	lsrs	r1, r0
 80183c4:	430c      	orrs	r4, r1
 80183c6:	0022      	movs	r2, r4
 80183c8:	0010      	movs	r0, r2
 80183ca:	0019      	movs	r1, r3
 80183cc:	b003      	add	sp, #12
 80183ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183d0:	2700      	movs	r7, #0
 80183d2:	42ae      	cmp	r6, r5
 80183d4:	d202      	bcs.n	80183dc <__b2d+0x60>
 80183d6:	9d01      	ldr	r5, [sp, #4]
 80183d8:	3d08      	subs	r5, #8
 80183da:	682f      	ldr	r7, [r5, #0]
 80183dc:	380b      	subs	r0, #11
 80183de:	4684      	mov	ip, r0
 80183e0:	1e03      	subs	r3, r0, #0
 80183e2:	d012      	beq.n	801840a <__b2d+0x8e>
 80183e4:	409c      	lsls	r4, r3
 80183e6:	2020      	movs	r0, #32
 80183e8:	4321      	orrs	r1, r4
 80183ea:	003c      	movs	r4, r7
 80183ec:	1ac0      	subs	r0, r0, r3
 80183ee:	40c4      	lsrs	r4, r0
 80183f0:	4321      	orrs	r1, r4
 80183f2:	000b      	movs	r3, r1
 80183f4:	2100      	movs	r1, #0
 80183f6:	42b5      	cmp	r5, r6
 80183f8:	d901      	bls.n	80183fe <__b2d+0x82>
 80183fa:	3d04      	subs	r5, #4
 80183fc:	6829      	ldr	r1, [r5, #0]
 80183fe:	4664      	mov	r4, ip
 8018400:	40c1      	lsrs	r1, r0
 8018402:	40a7      	lsls	r7, r4
 8018404:	430f      	orrs	r7, r1
 8018406:	003a      	movs	r2, r7
 8018408:	e7de      	b.n	80183c8 <__b2d+0x4c>
 801840a:	4321      	orrs	r1, r4
 801840c:	000b      	movs	r3, r1
 801840e:	e7fa      	b.n	8018406 <__b2d+0x8a>
 8018410:	3ff00000 	.word	0x3ff00000

08018414 <__d2b>:
 8018414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018416:	001d      	movs	r5, r3
 8018418:	2101      	movs	r1, #1
 801841a:	0014      	movs	r4, r2
 801841c:	9f08      	ldr	r7, [sp, #32]
 801841e:	f7ff fce5 	bl	8017dec <_Balloc>
 8018422:	032b      	lsls	r3, r5, #12
 8018424:	006d      	lsls	r5, r5, #1
 8018426:	0006      	movs	r6, r0
 8018428:	0b1b      	lsrs	r3, r3, #12
 801842a:	0d6d      	lsrs	r5, r5, #21
 801842c:	d124      	bne.n	8018478 <__d2b+0x64>
 801842e:	9301      	str	r3, [sp, #4]
 8018430:	2c00      	cmp	r4, #0
 8018432:	d027      	beq.n	8018484 <__d2b+0x70>
 8018434:	4668      	mov	r0, sp
 8018436:	9400      	str	r4, [sp, #0]
 8018438:	f7ff fda0 	bl	8017f7c <__lo0bits>
 801843c:	9c00      	ldr	r4, [sp, #0]
 801843e:	2800      	cmp	r0, #0
 8018440:	d01e      	beq.n	8018480 <__d2b+0x6c>
 8018442:	9b01      	ldr	r3, [sp, #4]
 8018444:	2120      	movs	r1, #32
 8018446:	001a      	movs	r2, r3
 8018448:	1a09      	subs	r1, r1, r0
 801844a:	408a      	lsls	r2, r1
 801844c:	40c3      	lsrs	r3, r0
 801844e:	4322      	orrs	r2, r4
 8018450:	6172      	str	r2, [r6, #20]
 8018452:	9301      	str	r3, [sp, #4]
 8018454:	9c01      	ldr	r4, [sp, #4]
 8018456:	61b4      	str	r4, [r6, #24]
 8018458:	1e63      	subs	r3, r4, #1
 801845a:	419c      	sbcs	r4, r3
 801845c:	3401      	adds	r4, #1
 801845e:	6134      	str	r4, [r6, #16]
 8018460:	2d00      	cmp	r5, #0
 8018462:	d018      	beq.n	8018496 <__d2b+0x82>
 8018464:	4b12      	ldr	r3, [pc, #72]	; (80184b0 <__d2b+0x9c>)
 8018466:	18ed      	adds	r5, r5, r3
 8018468:	2335      	movs	r3, #53	; 0x35
 801846a:	182d      	adds	r5, r5, r0
 801846c:	603d      	str	r5, [r7, #0]
 801846e:	1a18      	subs	r0, r3, r0
 8018470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018472:	6018      	str	r0, [r3, #0]
 8018474:	0030      	movs	r0, r6
 8018476:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018478:	2280      	movs	r2, #128	; 0x80
 801847a:	0352      	lsls	r2, r2, #13
 801847c:	4313      	orrs	r3, r2
 801847e:	e7d6      	b.n	801842e <__d2b+0x1a>
 8018480:	6174      	str	r4, [r6, #20]
 8018482:	e7e7      	b.n	8018454 <__d2b+0x40>
 8018484:	a801      	add	r0, sp, #4
 8018486:	f7ff fd79 	bl	8017f7c <__lo0bits>
 801848a:	2401      	movs	r4, #1
 801848c:	9b01      	ldr	r3, [sp, #4]
 801848e:	6134      	str	r4, [r6, #16]
 8018490:	6173      	str	r3, [r6, #20]
 8018492:	3020      	adds	r0, #32
 8018494:	e7e4      	b.n	8018460 <__d2b+0x4c>
 8018496:	4b07      	ldr	r3, [pc, #28]	; (80184b4 <__d2b+0xa0>)
 8018498:	18c0      	adds	r0, r0, r3
 801849a:	4b07      	ldr	r3, [pc, #28]	; (80184b8 <__d2b+0xa4>)
 801849c:	6038      	str	r0, [r7, #0]
 801849e:	18e3      	adds	r3, r4, r3
 80184a0:	009b      	lsls	r3, r3, #2
 80184a2:	18f3      	adds	r3, r6, r3
 80184a4:	6958      	ldr	r0, [r3, #20]
 80184a6:	f7ff fd4f 	bl	8017f48 <__hi0bits>
 80184aa:	0164      	lsls	r4, r4, #5
 80184ac:	1a20      	subs	r0, r4, r0
 80184ae:	e7df      	b.n	8018470 <__d2b+0x5c>
 80184b0:	fffffbcd 	.word	0xfffffbcd
 80184b4:	fffffbce 	.word	0xfffffbce
 80184b8:	3fffffff 	.word	0x3fffffff

080184bc <__ratio>:
 80184bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184be:	b085      	sub	sp, #20
 80184c0:	000f      	movs	r7, r1
 80184c2:	a902      	add	r1, sp, #8
 80184c4:	0006      	movs	r6, r0
 80184c6:	f7ff ff59 	bl	801837c <__b2d>
 80184ca:	0004      	movs	r4, r0
 80184cc:	000d      	movs	r5, r1
 80184ce:	0038      	movs	r0, r7
 80184d0:	a903      	add	r1, sp, #12
 80184d2:	9400      	str	r4, [sp, #0]
 80184d4:	9501      	str	r5, [sp, #4]
 80184d6:	f7ff ff51 	bl	801837c <__b2d>
 80184da:	6936      	ldr	r6, [r6, #16]
 80184dc:	693f      	ldr	r7, [r7, #16]
 80184de:	0002      	movs	r2, r0
 80184e0:	1bf7      	subs	r7, r6, r7
 80184e2:	017e      	lsls	r6, r7, #5
 80184e4:	46b4      	mov	ip, r6
 80184e6:	9f03      	ldr	r7, [sp, #12]
 80184e8:	9e02      	ldr	r6, [sp, #8]
 80184ea:	000b      	movs	r3, r1
 80184ec:	1bf6      	subs	r6, r6, r7
 80184ee:	4466      	add	r6, ip
 80184f0:	0537      	lsls	r7, r6, #20
 80184f2:	2e00      	cmp	r6, #0
 80184f4:	dd07      	ble.n	8018506 <__ratio+0x4a>
 80184f6:	1979      	adds	r1, r7, r5
 80184f8:	9101      	str	r1, [sp, #4]
 80184fa:	9800      	ldr	r0, [sp, #0]
 80184fc:	9901      	ldr	r1, [sp, #4]
 80184fe:	f7e9 f9c5 	bl	800188c <__aeabi_ddiv>
 8018502:	b005      	add	sp, #20
 8018504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018506:	1bcb      	subs	r3, r1, r7
 8018508:	e7f7      	b.n	80184fa <__ratio+0x3e>

0801850a <__copybits>:
 801850a:	0013      	movs	r3, r2
 801850c:	3901      	subs	r1, #1
 801850e:	b510      	push	{r4, lr}
 8018510:	1149      	asrs	r1, r1, #5
 8018512:	6912      	ldr	r2, [r2, #16]
 8018514:	3101      	adds	r1, #1
 8018516:	0089      	lsls	r1, r1, #2
 8018518:	3314      	adds	r3, #20
 801851a:	0092      	lsls	r2, r2, #2
 801851c:	1841      	adds	r1, r0, r1
 801851e:	189a      	adds	r2, r3, r2
 8018520:	429a      	cmp	r2, r3
 8018522:	d803      	bhi.n	801852c <__copybits+0x22>
 8018524:	2300      	movs	r3, #0
 8018526:	4281      	cmp	r1, r0
 8018528:	d803      	bhi.n	8018532 <__copybits+0x28>
 801852a:	bd10      	pop	{r4, pc}
 801852c:	cb10      	ldmia	r3!, {r4}
 801852e:	c010      	stmia	r0!, {r4}
 8018530:	e7f6      	b.n	8018520 <__copybits+0x16>
 8018532:	c008      	stmia	r0!, {r3}
 8018534:	e7f7      	b.n	8018526 <__copybits+0x1c>

08018536 <__any_on>:
 8018536:	0002      	movs	r2, r0
 8018538:	6900      	ldr	r0, [r0, #16]
 801853a:	b510      	push	{r4, lr}
 801853c:	3214      	adds	r2, #20
 801853e:	114b      	asrs	r3, r1, #5
 8018540:	4298      	cmp	r0, r3
 8018542:	db12      	blt.n	801856a <__any_on+0x34>
 8018544:	dd0b      	ble.n	801855e <__any_on+0x28>
 8018546:	201f      	movs	r0, #31
 8018548:	4001      	ands	r1, r0
 801854a:	d008      	beq.n	801855e <__any_on+0x28>
 801854c:	0098      	lsls	r0, r3, #2
 801854e:	5884      	ldr	r4, [r0, r2]
 8018550:	0020      	movs	r0, r4
 8018552:	40c8      	lsrs	r0, r1
 8018554:	4088      	lsls	r0, r1
 8018556:	0001      	movs	r1, r0
 8018558:	2001      	movs	r0, #1
 801855a:	428c      	cmp	r4, r1
 801855c:	d104      	bne.n	8018568 <__any_on+0x32>
 801855e:	009b      	lsls	r3, r3, #2
 8018560:	18d3      	adds	r3, r2, r3
 8018562:	4293      	cmp	r3, r2
 8018564:	d803      	bhi.n	801856e <__any_on+0x38>
 8018566:	2000      	movs	r0, #0
 8018568:	bd10      	pop	{r4, pc}
 801856a:	0003      	movs	r3, r0
 801856c:	e7f7      	b.n	801855e <__any_on+0x28>
 801856e:	3b04      	subs	r3, #4
 8018570:	6819      	ldr	r1, [r3, #0]
 8018572:	2900      	cmp	r1, #0
 8018574:	d0f5      	beq.n	8018562 <__any_on+0x2c>
 8018576:	2001      	movs	r0, #1
 8018578:	e7f6      	b.n	8018568 <__any_on+0x32>
	...

0801857c <frexp>:
 801857c:	b570      	push	{r4, r5, r6, lr}
 801857e:	0014      	movs	r4, r2
 8018580:	2500      	movs	r5, #0
 8018582:	6025      	str	r5, [r4, #0]
 8018584:	4d10      	ldr	r5, [pc, #64]	; (80185c8 <frexp+0x4c>)
 8018586:	004b      	lsls	r3, r1, #1
 8018588:	000a      	movs	r2, r1
 801858a:	085b      	lsrs	r3, r3, #1
 801858c:	42ab      	cmp	r3, r5
 801858e:	dc1a      	bgt.n	80185c6 <frexp+0x4a>
 8018590:	001d      	movs	r5, r3
 8018592:	4305      	orrs	r5, r0
 8018594:	d017      	beq.n	80185c6 <frexp+0x4a>
 8018596:	4d0d      	ldr	r5, [pc, #52]	; (80185cc <frexp+0x50>)
 8018598:	42ab      	cmp	r3, r5
 801859a:	dc09      	bgt.n	80185b0 <frexp+0x34>
 801859c:	2200      	movs	r2, #0
 801859e:	4b0c      	ldr	r3, [pc, #48]	; (80185d0 <frexp+0x54>)
 80185a0:	f7e9 fd7e 	bl	80020a0 <__aeabi_dmul>
 80185a4:	2536      	movs	r5, #54	; 0x36
 80185a6:	000a      	movs	r2, r1
 80185a8:	004b      	lsls	r3, r1, #1
 80185aa:	426d      	negs	r5, r5
 80185ac:	085b      	lsrs	r3, r3, #1
 80185ae:	6025      	str	r5, [r4, #0]
 80185b0:	4d08      	ldr	r5, [pc, #32]	; (80185d4 <frexp+0x58>)
 80185b2:	151b      	asrs	r3, r3, #20
 80185b4:	195b      	adds	r3, r3, r5
 80185b6:	6825      	ldr	r5, [r4, #0]
 80185b8:	18eb      	adds	r3, r5, r3
 80185ba:	6023      	str	r3, [r4, #0]
 80185bc:	4b06      	ldr	r3, [pc, #24]	; (80185d8 <frexp+0x5c>)
 80185be:	401a      	ands	r2, r3
 80185c0:	4b06      	ldr	r3, [pc, #24]	; (80185dc <frexp+0x60>)
 80185c2:	4313      	orrs	r3, r2
 80185c4:	0019      	movs	r1, r3
 80185c6:	bd70      	pop	{r4, r5, r6, pc}
 80185c8:	7fefffff 	.word	0x7fefffff
 80185cc:	000fffff 	.word	0x000fffff
 80185d0:	43500000 	.word	0x43500000
 80185d4:	fffffc02 	.word	0xfffffc02
 80185d8:	800fffff 	.word	0x800fffff
 80185dc:	3fe00000 	.word	0x3fe00000

080185e0 <__ssprint_r>:
 80185e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185e2:	6893      	ldr	r3, [r2, #8]
 80185e4:	b087      	sub	sp, #28
 80185e6:	9002      	str	r0, [sp, #8]
 80185e8:	000c      	movs	r4, r1
 80185ea:	0016      	movs	r6, r2
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d063      	beq.n	80186b8 <__ssprint_r+0xd8>
 80185f0:	6813      	ldr	r3, [r2, #0]
 80185f2:	9303      	str	r3, [sp, #12]
 80185f4:	2300      	movs	r3, #0
 80185f6:	001f      	movs	r7, r3
 80185f8:	9305      	str	r3, [sp, #20]
 80185fa:	2f00      	cmp	r7, #0
 80185fc:	d02e      	beq.n	801865c <__ssprint_r+0x7c>
 80185fe:	68a5      	ldr	r5, [r4, #8]
 8018600:	42af      	cmp	r7, r5
 8018602:	d347      	bcc.n	8018694 <__ssprint_r+0xb4>
 8018604:	2390      	movs	r3, #144	; 0x90
 8018606:	89a2      	ldrh	r2, [r4, #12]
 8018608:	00db      	lsls	r3, r3, #3
 801860a:	421a      	tst	r2, r3
 801860c:	d042      	beq.n	8018694 <__ssprint_r+0xb4>
 801860e:	2003      	movs	r0, #3
 8018610:	6921      	ldr	r1, [r4, #16]
 8018612:	6823      	ldr	r3, [r4, #0]
 8018614:	1a5b      	subs	r3, r3, r1
 8018616:	9304      	str	r3, [sp, #16]
 8018618:	6963      	ldr	r3, [r4, #20]
 801861a:	4343      	muls	r3, r0
 801861c:	0fd8      	lsrs	r0, r3, #31
 801861e:	18c3      	adds	r3, r0, r3
 8018620:	105b      	asrs	r3, r3, #1
 8018622:	9301      	str	r3, [sp, #4]
 8018624:	9b04      	ldr	r3, [sp, #16]
 8018626:	9801      	ldr	r0, [sp, #4]
 8018628:	3301      	adds	r3, #1
 801862a:	19db      	adds	r3, r3, r7
 801862c:	4283      	cmp	r3, r0
 801862e:	d900      	bls.n	8018632 <__ssprint_r+0x52>
 8018630:	9301      	str	r3, [sp, #4]
 8018632:	0553      	lsls	r3, r2, #21
 8018634:	d544      	bpl.n	80186c0 <__ssprint_r+0xe0>
 8018636:	9901      	ldr	r1, [sp, #4]
 8018638:	9802      	ldr	r0, [sp, #8]
 801863a:	f7fb fab7 	bl	8013bac <_malloc_r>
 801863e:	1e05      	subs	r5, r0, #0
 8018640:	d114      	bne.n	801866c <__ssprint_r+0x8c>
 8018642:	230c      	movs	r3, #12
 8018644:	9a02      	ldr	r2, [sp, #8]
 8018646:	2001      	movs	r0, #1
 8018648:	6013      	str	r3, [r2, #0]
 801864a:	2340      	movs	r3, #64	; 0x40
 801864c:	89a2      	ldrh	r2, [r4, #12]
 801864e:	4240      	negs	r0, r0
 8018650:	4313      	orrs	r3, r2
 8018652:	81a3      	strh	r3, [r4, #12]
 8018654:	2300      	movs	r3, #0
 8018656:	60b3      	str	r3, [r6, #8]
 8018658:	6073      	str	r3, [r6, #4]
 801865a:	e02f      	b.n	80186bc <__ssprint_r+0xdc>
 801865c:	9b03      	ldr	r3, [sp, #12]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	9305      	str	r3, [sp, #20]
 8018662:	9b03      	ldr	r3, [sp, #12]
 8018664:	685f      	ldr	r7, [r3, #4]
 8018666:	3308      	adds	r3, #8
 8018668:	9303      	str	r3, [sp, #12]
 801866a:	e7c6      	b.n	80185fa <__ssprint_r+0x1a>
 801866c:	9a04      	ldr	r2, [sp, #16]
 801866e:	6921      	ldr	r1, [r4, #16]
 8018670:	f7fb fcd5 	bl	801401e <memcpy>
 8018674:	89a3      	ldrh	r3, [r4, #12]
 8018676:	4a18      	ldr	r2, [pc, #96]	; (80186d8 <__ssprint_r+0xf8>)
 8018678:	401a      	ands	r2, r3
 801867a:	2380      	movs	r3, #128	; 0x80
 801867c:	4313      	orrs	r3, r2
 801867e:	81a3      	strh	r3, [r4, #12]
 8018680:	9b04      	ldr	r3, [sp, #16]
 8018682:	6125      	str	r5, [r4, #16]
 8018684:	18ed      	adds	r5, r5, r3
 8018686:	6025      	str	r5, [r4, #0]
 8018688:	003d      	movs	r5, r7
 801868a:	9b01      	ldr	r3, [sp, #4]
 801868c:	9a04      	ldr	r2, [sp, #16]
 801868e:	6163      	str	r3, [r4, #20]
 8018690:	1a9b      	subs	r3, r3, r2
 8018692:	60a3      	str	r3, [r4, #8]
 8018694:	42bd      	cmp	r5, r7
 8018696:	d900      	bls.n	801869a <__ssprint_r+0xba>
 8018698:	003d      	movs	r5, r7
 801869a:	002a      	movs	r2, r5
 801869c:	9905      	ldr	r1, [sp, #20]
 801869e:	6820      	ldr	r0, [r4, #0]
 80186a0:	f7ff fb91 	bl	8017dc6 <memmove>
 80186a4:	68a3      	ldr	r3, [r4, #8]
 80186a6:	1b5b      	subs	r3, r3, r5
 80186a8:	60a3      	str	r3, [r4, #8]
 80186aa:	6823      	ldr	r3, [r4, #0]
 80186ac:	195d      	adds	r5, r3, r5
 80186ae:	68b3      	ldr	r3, [r6, #8]
 80186b0:	6025      	str	r5, [r4, #0]
 80186b2:	1bdb      	subs	r3, r3, r7
 80186b4:	60b3      	str	r3, [r6, #8]
 80186b6:	d1d1      	bne.n	801865c <__ssprint_r+0x7c>
 80186b8:	2000      	movs	r0, #0
 80186ba:	6070      	str	r0, [r6, #4]
 80186bc:	b007      	add	sp, #28
 80186be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80186c0:	9a01      	ldr	r2, [sp, #4]
 80186c2:	9802      	ldr	r0, [sp, #8]
 80186c4:	f7fb fcf0 	bl	80140a8 <_realloc_r>
 80186c8:	1e05      	subs	r5, r0, #0
 80186ca:	d1d9      	bne.n	8018680 <__ssprint_r+0xa0>
 80186cc:	6921      	ldr	r1, [r4, #16]
 80186ce:	9802      	ldr	r0, [sp, #8]
 80186d0:	f7fe ff78 	bl	80175c4 <_free_r>
 80186d4:	e7b5      	b.n	8018642 <__ssprint_r+0x62>
 80186d6:	46c0      	nop			; (mov r8, r8)
 80186d8:	fffffb7f 	.word	0xfffffb7f

080186dc <__register_exitproc>:
 80186dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80186de:	4d29      	ldr	r5, [pc, #164]	; (8018784 <__register_exitproc+0xa8>)
 80186e0:	0006      	movs	r6, r0
 80186e2:	6828      	ldr	r0, [r5, #0]
 80186e4:	9301      	str	r3, [sp, #4]
 80186e6:	9100      	str	r1, [sp, #0]
 80186e8:	0017      	movs	r7, r2
 80186ea:	f7ff fb5f 	bl	8017dac <__retarget_lock_acquire_recursive>
 80186ee:	4b26      	ldr	r3, [pc, #152]	; (8018788 <__register_exitproc+0xac>)
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	001c      	movs	r4, r3
 80186f4:	34fc      	adds	r4, #252	; 0xfc
 80186f6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80186f8:	2800      	cmp	r0, #0
 80186fa:	d103      	bne.n	8018704 <__register_exitproc+0x28>
 80186fc:	334d      	adds	r3, #77	; 0x4d
 80186fe:	33ff      	adds	r3, #255	; 0xff
 8018700:	0018      	movs	r0, r3
 8018702:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018704:	6843      	ldr	r3, [r0, #4]
 8018706:	2b1f      	cmp	r3, #31
 8018708:	dd18      	ble.n	801873c <__register_exitproc+0x60>
 801870a:	4b20      	ldr	r3, [pc, #128]	; (801878c <__register_exitproc+0xb0>)
 801870c:	2b00      	cmp	r3, #0
 801870e:	d105      	bne.n	801871c <__register_exitproc+0x40>
 8018710:	6828      	ldr	r0, [r5, #0]
 8018712:	f7ff fb4c 	bl	8017dae <__retarget_lock_release_recursive>
 8018716:	2001      	movs	r0, #1
 8018718:	4240      	negs	r0, r0
 801871a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801871c:	20c8      	movs	r0, #200	; 0xc8
 801871e:	0040      	lsls	r0, r0, #1
 8018720:	f7fb fa30 	bl	8013b84 <malloc>
 8018724:	2800      	cmp	r0, #0
 8018726:	d0f3      	beq.n	8018710 <__register_exitproc+0x34>
 8018728:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801872a:	2300      	movs	r3, #0
 801872c:	6002      	str	r2, [r0, #0]
 801872e:	22c4      	movs	r2, #196	; 0xc4
 8018730:	0052      	lsls	r2, r2, #1
 8018732:	6043      	str	r3, [r0, #4]
 8018734:	64e0      	str	r0, [r4, #76]	; 0x4c
 8018736:	5083      	str	r3, [r0, r2]
 8018738:	3204      	adds	r2, #4
 801873a:	5083      	str	r3, [r0, r2]
 801873c:	6843      	ldr	r3, [r0, #4]
 801873e:	2e00      	cmp	r6, #0
 8018740:	d014      	beq.n	801876c <__register_exitproc+0x90>
 8018742:	009a      	lsls	r2, r3, #2
 8018744:	1882      	adds	r2, r0, r2
 8018746:	0011      	movs	r1, r2
 8018748:	3188      	adds	r1, #136	; 0x88
 801874a:	600f      	str	r7, [r1, #0]
 801874c:	2101      	movs	r1, #1
 801874e:	0004      	movs	r4, r0
 8018750:	4099      	lsls	r1, r3
 8018752:	3485      	adds	r4, #133	; 0x85
 8018754:	34ff      	adds	r4, #255	; 0xff
 8018756:	6865      	ldr	r5, [r4, #4]
 8018758:	32fc      	adds	r2, #252	; 0xfc
 801875a:	430d      	orrs	r5, r1
 801875c:	6065      	str	r5, [r4, #4]
 801875e:	9d01      	ldr	r5, [sp, #4]
 8018760:	60d5      	str	r5, [r2, #12]
 8018762:	2e02      	cmp	r6, #2
 8018764:	d102      	bne.n	801876c <__register_exitproc+0x90>
 8018766:	68a2      	ldr	r2, [r4, #8]
 8018768:	4311      	orrs	r1, r2
 801876a:	60a1      	str	r1, [r4, #8]
 801876c:	1c5a      	adds	r2, r3, #1
 801876e:	6042      	str	r2, [r0, #4]
 8018770:	3302      	adds	r3, #2
 8018772:	9a00      	ldr	r2, [sp, #0]
 8018774:	009b      	lsls	r3, r3, #2
 8018776:	501a      	str	r2, [r3, r0]
 8018778:	4b02      	ldr	r3, [pc, #8]	; (8018784 <__register_exitproc+0xa8>)
 801877a:	6818      	ldr	r0, [r3, #0]
 801877c:	f7ff fb17 	bl	8017dae <__retarget_lock_release_recursive>
 8018780:	2000      	movs	r0, #0
 8018782:	e7ca      	b.n	801871a <__register_exitproc+0x3e>
 8018784:	20000a74 	.word	0x20000a74
 8018788:	0801bf5c 	.word	0x0801bf5c
 801878c:	08013b85 	.word	0x08013b85

08018790 <_sbrk>:
 8018790:	4b05      	ldr	r3, [pc, #20]	; (80187a8 <_sbrk+0x18>)
 8018792:	0002      	movs	r2, r0
 8018794:	6819      	ldr	r1, [r3, #0]
 8018796:	2900      	cmp	r1, #0
 8018798:	d101      	bne.n	801879e <_sbrk+0xe>
 801879a:	4904      	ldr	r1, [pc, #16]	; (80187ac <_sbrk+0x1c>)
 801879c:	6019      	str	r1, [r3, #0]
 801879e:	6818      	ldr	r0, [r3, #0]
 80187a0:	1882      	adds	r2, r0, r2
 80187a2:	601a      	str	r2, [r3, #0]
 80187a4:	4770      	bx	lr
 80187a6:	46c0      	nop			; (mov r8, r8)
 80187a8:	20006c44 	.word	0x20006c44
 80187ac:	200071e8 	.word	0x200071e8

080187b0 <_init>:
 80187b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187b2:	46c0      	nop			; (mov r8, r8)
 80187b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187b6:	bc08      	pop	{r3}
 80187b8:	469e      	mov	lr, r3
 80187ba:	4770      	bx	lr

080187bc <_fini>:
 80187bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187be:	46c0      	nop			; (mov r8, r8)
 80187c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187c2:	bc08      	pop	{r3}
 80187c4:	469e      	mov	lr, r3
 80187c6:	4770      	bx	lr
