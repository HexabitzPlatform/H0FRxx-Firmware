
H0FRxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016c94  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033ec  08016d50  08016d50  00026d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a13c  0801a13c  00030a88  2**0
                  CONTENTS
  4 .ARM          00000008  0801a13c  0801a13c  0002a13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a144  0801a144  00030a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a144  0801a144  0002a144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a14c  0801a14c  0002a14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    0000000c  20000000  0801a150  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a78  20000010  0801a15c  00030010  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006350  20000a88  0801abd4  00030a88  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20006dd8  0801abd4  00036dd8  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a88  2**0
                  CONTENTS, READONLY
 13 .debug_info   00055add  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000096ba  00000000  00000000  0008658d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001ab93  00000000  00000000  0008fc47  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001a88  00000000  00000000  000aa7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002e88  00000000  00000000  000ac268  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00017a5e  00000000  00000000  000af0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a6f2  00000000  00000000  000c6b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d1240  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063c4  00000000  00000000  000d12bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a88 	.word	0x20000a88
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08016d38 	.word	0x08016d38

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a8c 	.word	0x20000a8c
 8000100:	08016d38 	.word	0x08016d38

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	080173dc 	.word	0x080173dc
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	0801741c 	.word	0x0801741c
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	0801745c 	.word	0x0801745c
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <Send_BOS_Message>:
 *New private function [inside SendMessageFromPort() ] for sending BOS Messages.
 *instead of writePxDMAMutex (the previous function)
 */

HAL_StatusTypeDef Send_BOS_Message(uint8_t port, uint8_t* buffer, uint16_t n, uint32_t mutexTimeout)
{
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	46c6      	mov	lr, r8
 8002d28:	b500      	push	{lr}
 8002d2a:	0006      	movs	r6, r0
 8002d2c:	000d      	movs	r5, r1
 8002d2e:	4690      	mov	r8, r2
 8002d30:	001c      	movs	r4, r3
	HAL_StatusTypeDef result =HAL_ERROR;

	if(GetUart(port) != NULL){
 8002d32:	f00a f8a1 	bl	800ce78 <GetUart>
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d01c      	beq.n	8002d74 <Send_BOS_Message+0x50>
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK){
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <Send_BOS_Message+0x60>)
 8002d3c:	00b2      	lsls	r2, r6, #2
 8002d3e:	58d0      	ldr	r0, [r2, r3]
 8002d40:	0021      	movs	r1, r4
 8002d42:	f00a fa11 	bl	800d168 <osSemaphoreWait>
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d114      	bne.n	8002d74 <Send_BOS_Message+0x50>
			for(uint8_t i=0;i<n;i++)
 8002d4a:	4643      	mov	r3, r8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d011      	beq.n	8002d74 <Send_BOS_Message+0x50>
 8002d50:	2400      	movs	r4, #0
			{
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002d52:	0030      	movs	r0, r6
 8002d54:	f00a f890 	bl	800ce78 <GetUart>
 8002d58:	0029      	movs	r1, r5
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f00e fcbc 	bl	80116d8 <HAL_UART_Transmit_IT>
			for(uint8_t i=0;i<n;i++)
 8002d60:	3401      	adds	r4, #1
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002d62:	0007      	movs	r7, r0
			for(uint8_t i=0;i<n;i++)
 8002d64:	b2e4      	uxtb	r4, r4
				buffer++;
				//Delay_us(500);
				Delay_ms(2);
 8002d66:	2002      	movs	r0, #2
				buffer++;
 8002d68:	3501      	adds	r5, #1
				Delay_ms(2);
 8002d6a:	f00c f863 	bl	800ee34 <HAL_Delay>
			for(uint8_t i=0;i<n;i++)
 8002d6e:	4544      	cmp	r4, r8
 8002d70:	d3ef      	bcc.n	8002d52 <Send_BOS_Message+0x2e>
 8002d72:	e000      	b.n	8002d76 <Send_BOS_Message+0x52>
	HAL_StatusTypeDef result =HAL_ERROR;
 8002d74:	2701      	movs	r7, #1
			}
		}
	}
	Delay_ms(10);// Delay Between Sending Two Messages.
 8002d76:	200a      	movs	r0, #10
 8002d78:	f00c f85c 	bl	800ee34 <HAL_Delay>
	return result;
}
 8002d7c:	0038      	movs	r0, r7
 8002d7e:	bc04      	pop	{r2}
 8002d80:	4690      	mov	r8, r2
 8002d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d84:	200068f8 	.word	0x200068f8

08002d88 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d88:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d8c:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d8e:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 8002d90:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d92:	b29b      	uxth	r3, r3
	if(temp == 0xFFFF)				// Memory has been erased
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d035      	beq.n	8002e04 <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d98:	0a1e      	lsrs	r6, r3, #8
		if(N == 0)
 8002d9a:	d02c      	beq.n	8002df6 <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <LoadROtopology+0x94>)
 8002d9e:	b2f6      	uxtb	r6, r6
 8002da0:	7016      	strb	r6, [r2, #0]
			N =1;
		myID =(uint8_t )temp;
 8002da2:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <LoadROtopology+0x98>)
 8002da4:	7013      	strb	r3, [r2, #0]
 8002da6:	466b      	mov	r3, sp
 8002da8:	1dd9      	adds	r1, r3, #7
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002daa:	2300      	movs	r3, #0
		myID =(uint8_t )temp;
 8002dac:	2202      	movs	r2, #2
 8002dae:	2401      	movs	r4, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002db0:	469c      	mov	ip, r3
 8002db2:	4d1c      	ldr	r5, [pc, #112]	; (8002e24 <LoadROtopology+0x9c>)
 8002db4:	4663      	mov	r3, ip
 8002db6:	700b      	strb	r3, [r1, #0]
 8002db8:	780b      	ldrb	r3, [r1, #0]
 8002dba:	2b0a      	cmp	r3, #10
 8002dbc:	d814      	bhi.n	8002de8 <LoadROtopology+0x60>
 8002dbe:	1e63      	subs	r3, r4, #1
 8002dc0:	0098      	lsls	r0, r3, #2
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002dc2:	18c0      	adds	r0, r0, r3
 8002dc4:	0040      	lsls	r0, r0, #1
 8002dc6:	18c0      	adds	r0, r0, r3
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <LoadROtopology+0x8c>)
 8002dca:	18d7      	adds	r7, r2, r3
 8002dcc:	780b      	ldrb	r3, [r1, #0]
 8002dce:	883f      	ldrh	r7, [r7, #0]
 8002dd0:	18c3      	adds	r3, r0, r3
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	52ef      	strh	r7, [r5, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002dd6:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002dd8:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002dda:	3301      	adds	r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	700b      	strb	r3, [r1, #0]
 8002de0:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002de2:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002de4:	2b0a      	cmp	r3, #10
 8002de6:	d9ef      	bls.n	8002dc8 <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 8002de8:	3401      	adds	r4, #1
 8002dea:	b2e4      	uxtb	r4, r4
 8002dec:	42b4      	cmp	r4, r6
 8002dee:	d9e1      	bls.n	8002db4 <LoadROtopology+0x2c>
 8002df0:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 8002df2:	b003      	add	sp, #12
 8002df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 8002df6:	2101      	movs	r1, #1
 8002df8:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 8002dfa:	2601      	movs	r6, #1
			N =1;
 8002dfc:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8002dfe:	4a08      	ldr	r2, [pc, #32]	; (8002e20 <LoadROtopology+0x98>)
 8002e00:	7013      	strb	r3, [r2, #0]
 8002e02:	e7d0      	b.n	8002da6 <LoadROtopology+0x1e>
		N =1;
 8002e04:	2201      	movs	r2, #1
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 8002e08:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 8002e0a:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <LoadROtopology+0x98>)
 8002e10:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002e12:	e7ee      	b.n	8002df2 <LoadROtopology+0x6a>
 8002e14:	0801d800 	.word	0x0801d800
 8002e18:	0000ffff 	.word	0x0000ffff
 8002e1c:	20000010 	.word	0x20000010
 8002e20:	20000aa8 	.word	0x20000aa8
 8002e24:	20000ee4 	.word	0x20000ee4

08002e28 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2a:	46c6      	mov	lr, r8
 8002e2c:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002e2e:	4e0f      	ldr	r6, [pc, #60]	; (8002e6c <LoadEEportsDir+0x44>)
 8002e30:	7833      	ldrb	r3, [r6, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <LoadEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8002e36:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8002e38:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002e3a:	4698      	mov	r8, r3
 8002e3c:	4f0c      	ldr	r7, [pc, #48]	; (8002e70 <LoadEEportsDir+0x48>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002e3e:	1e61      	subs	r1, r4, #1
 8002e40:	0049      	lsls	r1, r1, #1
 8002e42:	1c65      	adds	r5, r4, #1
 8002e44:	1879      	adds	r1, r7, r1
 8002e46:	b2a8      	uxth	r0, r5
 8002e48:	f007 fee8 	bl	800ac1c <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002e4c:	2c19      	cmp	r4, #25
 8002e4e:	d901      	bls.n	8002e54 <LoadEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8002e50:	230a      	movs	r3, #10
 8002e52:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8002e54:	7833      	ldrb	r3, [r6, #0]
 8002e56:	b2ec      	uxtb	r4, r5
 8002e58:	42a3      	cmp	r3, r4
 8002e5a:	d2f0      	bcs.n	8002e3e <LoadEEportsDir+0x16>
	}
	
	return result;
}
 8002e5c:	4640      	mov	r0, r8
 8002e5e:	bc04      	pop	{r2}
 8002e60:	4690      	mov	r8, r2
 8002e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	4698      	mov	r8, r3
 8002e68:	e7f8      	b.n	8002e5c <LoadEEportsDir+0x34>
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	20000010 	.word	0x20000010
 8002e70:	20006d34 	.word	0x20006d34

08002e74 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e76:	464e      	mov	r6, r9
 8002e78:	46de      	mov	lr, fp
 8002e7a:	4657      	mov	r7, sl
 8002e7c:	4645      	mov	r5, r8
 8002e7e:	b5e0      	push	{r5, r6, r7, lr}
 8002e80:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e82:	466b      	mov	r3, sp
 8002e84:	1d9e      	adds	r6, r3, #6
 8002e86:	2300      	movs	r3, #0
 8002e88:	8033      	strh	r3, [r6, #0]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	4b17      	ldr	r3, [pc, #92]	; (8002eec <LoadEEalias+0x78>)
	uint16_t add =0, temp =0;
 8002e8e:	241c      	movs	r4, #28
 8002e90:	469a      	mov	sl, r3
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <LoadEEalias+0x7c>)
 8002e94:	469b      	mov	fp, r3
 8002e96:	4643      	mov	r3, r8
 8002e98:	009f      	lsls	r7, r3, #2
 8002e9a:	18fd      	adds	r5, r7, r3
 8002e9c:	1d63      	adds	r3, r4, #5
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	4699      	mov	r9, r3
 8002ea2:	006d      	lsls	r5, r5, #1
 8002ea4:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002ea6:	0020      	movs	r0, r4
 8002ea8:	0031      	movs	r1, r6
 8002eaa:	f007 feb7 	bl	800ac1c <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002eae:	8833      	ldrh	r3, [r6, #0]
 8002eb0:	3401      	adds	r4, #1
 8002eb2:	706b      	strb	r3, [r5, #1]
 8002eb4:	b2a4      	uxth	r4, r4
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	702b      	strb	r3, [r5, #0]
 8002eba:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002ebc:	454c      	cmp	r4, r9
 8002ebe:	d1f2      	bne.n	8002ea6 <LoadEEalias+0x32>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	4447      	add	r7, r8
 8002ec4:	007f      	lsls	r7, r7, #1
 8002ec6:	4457      	add	r7, sl
 8002ec8:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002eca:	4643      	mov	r3, r8
 8002ecc:	3301      	adds	r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	4698      	mov	r8, r3
 8002ed2:	465b      	mov	r3, fp
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	4543      	cmp	r3, r8
 8002ed8:	d2dd      	bcs.n	8002e96 <LoadEEalias+0x22>
	}
	
	return result;
}
 8002eda:	2000      	movs	r0, #0
 8002edc:	b003      	add	sp, #12
 8002ede:	bc3c      	pop	{r2, r3, r4, r5}
 8002ee0:	4690      	mov	r8, r2
 8002ee2:	4699      	mov	r9, r3
 8002ee4:	46a2      	mov	sl, r4
 8002ee6:	46ab      	mov	fp, r5
 8002ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	20000dd4 	.word	0x20000dd4
 8002ef0:	20000010 	.word	0x20000010

08002ef4 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef6:	4646      	mov	r6, r8
 8002ef8:	46d6      	mov	lr, sl
 8002efa:	464f      	mov	r7, r9
 8002efc:	b5c0      	push	{r6, r7, lr}
 8002efe:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002f00:	466b      	mov	r3, sp
 8002f02:	1d9e      	adds	r6, r3, #6
 8002f04:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002f06:	4c22      	ldr	r4, [pc, #136]	; (8002f90 <LoadEEgroup+0x9c>)
	uint16_t add =0, temp =0;
 8002f08:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 8002f0a:	7823      	ldrb	r3, [r4, #0]
	uint16_t add =0, temp =0;
 8002f0c:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d03a      	beq.n	8002f88 <LoadEEgroup+0x94>
 8002f12:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <LoadEEgroup+0xa0>)
 8002f14:	2100      	movs	r1, #0
 8002f16:	4699      	mov	r9, r3
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002f18:	1d1f      	adds	r7, r3, #4
 8002f1a:	0028      	movs	r0, r5
 8002f1c:	0049      	lsls	r1, r1, #1
 8002f1e:	30cb      	adds	r0, #203	; 0xcb
 8002f20:	1879      	adds	r1, r7, r1
 8002f22:	b280      	uxth	r0, r0
		add++;
 8002f24:	3501      	adds	r5, #1
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002f26:	f007 fe79 	bl	800ac1c <EE_ReadVariable>
		add++;
 8002f2a:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002f2c:	7823      	ldrb	r3, [r4, #0]
 8002f2e:	b2e9      	uxtb	r1, r5
 8002f30:	428b      	cmp	r3, r1
 8002f32:	d8f2      	bhi.n	8002f1a <LoadEEgroup+0x26>
 8002f34:	2338      	movs	r3, #56	; 0x38
 8002f36:	002c      	movs	r4, r5
 8002f38:	35cb      	adds	r5, #203	; 0xcb
 8002f3a:	469c      	mov	ip, r3
 8002f3c:	b2ab      	uxth	r3, r5
 8002f3e:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f40:	2300      	movs	r3, #0
 8002f42:	469a      	mov	sl, r3
 8002f44:	3499      	adds	r4, #153	; 0x99
 8002f46:	44e1      	add	r9, ip
 8002f48:	b2a4      	uxth	r4, r4
	uint16_t add =0, temp =0;
 8002f4a:	464d      	mov	r5, r9
 8002f4c:	1d67      	adds	r7, r4, #5
 8002f4e:	b2bf      	uxth	r7, r7
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002f50:	0020      	movs	r0, r4
 8002f52:	0031      	movs	r1, r6
 8002f54:	f007 fe62 	bl	800ac1c <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002f58:	8833      	ldrh	r3, [r6, #0]
 8002f5a:	3401      	adds	r4, #1
 8002f5c:	706b      	strb	r3, [r5, #1]
 8002f5e:	b2a4      	uxth	r4, r4
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	702b      	strb	r3, [r5, #0]
 8002f64:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f66:	42bc      	cmp	r4, r7
 8002f68:	d1f2      	bne.n	8002f50 <LoadEEgroup+0x5c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	4652      	mov	r2, sl
 8002f6e:	725a      	strb	r2, [r3, #9]
 8002f70:	230a      	movs	r3, #10
 8002f72:	469c      	mov	ip, r3
 8002f74:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002f76:	45a0      	cmp	r8, r4
 8002f78:	d1e7      	bne.n	8002f4a <LoadEEgroup+0x56>
	}
	
	return result;
}
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bc1c      	pop	{r2, r3, r4}
 8002f80:	4690      	mov	r8, r2
 8002f82:	4699      	mov	r9, r3
 8002f84:	46a2      	mov	sl, r4
 8002f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f88:	4b02      	ldr	r3, [pc, #8]	; (8002f94 <LoadEEgroup+0xa0>)
 8002f8a:	4699      	mov	r9, r3
 8002f8c:	e7d2      	b.n	8002f34 <LoadEEgroup+0x40>
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	20000010 	.word	0x20000010
 8002f94:	20000aa8 	.word	0x20000aa8

08002f98 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9a:	46ce      	mov	lr, r9
 8002f9c:	4647      	mov	r7, r8
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f9e:	260e      	movs	r6, #14
 8002fa0:	2300      	movs	r3, #0
BOS_Status LoadEEstreams(void){
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b085      	sub	sp, #20
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002fa6:	ac03      	add	r4, sp, #12
 8002fa8:	446e      	add	r6, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002faa:	0021      	movs	r1, r4
 8002fac:	20e4      	movs	r0, #228	; 0xe4
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002fae:	8023      	strh	r3, [r4, #0]
 8002fb0:	8033      	strh	r3, [r6, #0]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002fb2:	f007 fe33 	bl	800ac1c <EE_ReadVariable>
	uint8_t direction =0;
 8002fb6:	2700      	movs	r7, #0
	if(!status1){
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d100      	bne.n	8002fbe <LoadEEstreams+0x26>
		direction =(uint8_t )temp1;
 8002fbc:	7827      	ldrb	r7, [r4, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002fbe:	0021      	movs	r1, r4
 8002fc0:	20e5      	movs	r0, #229	; 0xe5
 8002fc2:	f007 fe2b 	bl	800ac1c <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002fc6:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002fc8:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002fca:	20e6      	movs	r0, #230	; 0xe6
 8002fcc:	f007 fe26 	bl	800ac1c <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002fd0:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002fd2:	4305      	orrs	r5, r0
 8002fd4:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002fd6:	4698      	mov	r8, r3
	if(!status1 && !status2){
 8002fd8:	2d00      	cmp	r5, #0
 8002fda:	d104      	bne.n	8002fe6 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002fdc:	8823      	ldrh	r3, [r4, #0]
 8002fde:	8832      	ldrh	r2, [r6, #0]
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	4698      	mov	r8, r3
 8002fe4:	4490      	add	r8, r2
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002fe6:	0021      	movs	r1, r4
 8002fe8:	20e7      	movs	r0, #231	; 0xe7
 8002fea:	f007 fe17 	bl	800ac1c <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002fee:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002ff0:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002ff2:	20e8      	movs	r0, #232	; 0xe8
 8002ff4:	f007 fe12 	bl	800ac1c <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002ff8:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002ffa:	4305      	orrs	r5, r0
 8002ffc:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002ffe:	4699      	mov	r9, r3
	if(!status1 && !status2){
 8003000:	2d00      	cmp	r5, #0
 8003002:	d104      	bne.n	800300e <LoadEEstreams+0x76>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8003004:	8823      	ldrh	r3, [r4, #0]
 8003006:	8832      	ldrh	r2, [r6, #0]
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	4699      	mov	r9, r3
 800300c:	4491      	add	r9, r2
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 800300e:	0021      	movs	r1, r4
 8003010:	20e9      	movs	r0, #233	; 0xe9
 8003012:	f007 fe03 	bl	800ac1c <EE_ReadVariable>
	if(!status1){
 8003016:	2800      	cmp	r0, #0
 8003018:	d030      	beq.n	800307c <LoadEEstreams+0xe4>
 800301a:	4d26      	ldr	r5, [pc, #152]	; (80030b4 <LoadEEstreams+0x11c>)
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 800301c:	0021      	movs	r1, r4
 800301e:	20ea      	movs	r0, #234	; 0xea
 8003020:	f007 fdfc 	bl	800ac1c <EE_ReadVariable>
	if(!status1){
 8003024:	2800      	cmp	r0, #0
 8003026:	d103      	bne.n	8003030 <LoadEEstreams+0x98>
		src2 =(uint8_t )(temp1 >> 8);
 8003028:	8823      	ldrh	r3, [r4, #0]
 800302a:	0a1a      	lsrs	r2, r3, #8
 800302c:	77aa      	strb	r2, [r5, #30]
		dst2 =(uint8_t )temp1;
 800302e:	77eb      	strb	r3, [r5, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8003030:	0021      	movs	r1, r4
 8003032:	20eb      	movs	r0, #235	; 0xeb
 8003034:	f007 fdf2 	bl	800ac1c <EE_ReadVariable>
	if(!status1){
 8003038:	2800      	cmp	r0, #0
 800303a:	d105      	bne.n	8003048 <LoadEEstreams+0xb0>
		src3 =(uint8_t )(temp1 >> 8);
 800303c:	2220      	movs	r2, #32
 800303e:	8823      	ldrh	r3, [r4, #0]
 8003040:	0a19      	lsrs	r1, r3, #8
 8003042:	54a9      	strb	r1, [r5, r2]
		dst3 =(uint8_t )temp1;
 8003044:	3201      	adds	r2, #1
 8003046:	54ab      	strb	r3, [r5, r2]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003048:	7f2b      	ldrb	r3, [r5, #28]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <LoadEEstreams+0xbc>
 800304e:	7f6a      	ldrb	r2, [r5, #29]
 8003050:	2a00      	cmp	r2, #0
 8003052:	d120      	bne.n	8003096 <LoadEEstreams+0xfe>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003054:	7fab      	ldrb	r3, [r5, #30]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <LoadEEstreams+0xc8>
 800305a:	7fea      	ldrb	r2, [r5, #31]
 800305c:	2a00      	cmp	r2, #0
 800305e:	d121      	bne.n	80030a4 <LoadEEstreams+0x10c>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003060:	2320      	movs	r3, #32
 8003062:	5ceb      	ldrb	r3, [r5, r3]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <LoadEEstreams+0xd8>
 8003068:	2221      	movs	r2, #33	; 0x21
 800306a:	5caa      	ldrb	r2, [r5, r2]
 800306c:	2a00      	cmp	r2, #0
 800306e:	d10b      	bne.n	8003088 <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003070:	2000      	movs	r0, #0
 8003072:	b005      	add	sp, #20
 8003074:	bc0c      	pop	{r2, r3}
 8003076:	4690      	mov	r8, r2
 8003078:	4699      	mov	r9, r3
 800307a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src1 =(uint8_t )(temp1 >> 8);
 800307c:	8823      	ldrh	r3, [r4, #0]
 800307e:	4d0d      	ldr	r5, [pc, #52]	; (80030b4 <LoadEEstreams+0x11c>)
 8003080:	0a1a      	lsrs	r2, r3, #8
 8003082:	772a      	strb	r2, [r5, #28]
		dst1 =(uint8_t )temp1;
 8003084:	776b      	strb	r3, [r5, #29]
 8003086:	e7c9      	b.n	800301c <LoadEEstreams+0x84>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003088:	9200      	str	r2, [sp, #0]
 800308a:	4641      	mov	r1, r8
 800308c:	464a      	mov	r2, r9
 800308e:	0038      	movs	r0, r7
 8003090:	f004 fcfa 	bl	8007a88 <SetupDMAStreams>
 8003094:	e7ec      	b.n	8003070 <LoadEEstreams+0xd8>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8003096:	9200      	str	r2, [sp, #0]
 8003098:	4641      	mov	r1, r8
 800309a:	464a      	mov	r2, r9
 800309c:	0038      	movs	r0, r7
 800309e:	f004 fcf3 	bl	8007a88 <SetupDMAStreams>
 80030a2:	e7d7      	b.n	8003054 <LoadEEstreams+0xbc>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 80030a4:	9200      	str	r2, [sp, #0]
 80030a6:	4641      	mov	r1, r8
 80030a8:	464a      	mov	r2, r9
 80030aa:	0038      	movs	r0, r7
 80030ac:	f004 fcec 	bl	8007a88 <SetupDMAStreams>
 80030b0:	e7d6      	b.n	8003060 <LoadEEstreams+0xc8>
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	20000b28 	.word	0x20000b28

080030b8 <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80030b8:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 80030ba:	b570      	push	{r4, r5, r6, lr}
 80030bc:	b082      	sub	sp, #8
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80030be:	ac01      	add	r4, sp, #4
 80030c0:	0021      	movs	r1, r4
 80030c2:	0040      	lsls	r0, r0, #1
 80030c4:	f007 fdaa 	bl	800ac1c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d15d      	bne.n	8003188 <LoadEEparams+0xd0>
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030cc:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =(uint8_t )temp1;
 80030ce:	8823      	ldrh	r3, [r4, #0]
 80030d0:	4d54      	ldr	r5, [pc, #336]	; (8003224 <LoadEEparams+0x16c>)
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030d2:	0021      	movs	r1, r4
		BOSMessaging.response =(uint8_t )temp1;
 80030d4:	702b      	strb	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030d6:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030dc:	f007 fd9e 	bl	800ac1c <EE_ReadVariable>

	if(!status1){
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d15e      	bne.n	80031a2 <LoadEEparams+0xea>
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030e4:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030e6:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030e8:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030ea:	0bda      	lsrs	r2, r3, #15
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030ec:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80030ee:	085b      	lsrs	r3, r3, #1
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030f0:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80030f2:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030f4:	f007 fd92 	bl	800ac1c <EE_ReadVariable>
	if(!status1)
		BOS.buttons.debounce =temp1;
 80030f8:	4d4b      	ldr	r5, [pc, #300]	; (8003228 <LoadEEparams+0x170>)
	if(!status1)
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d15e      	bne.n	80031bc <LoadEEparams+0x104>
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030fe:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 8003100:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003102:	0021      	movs	r1, r4
 8003104:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =temp1;
 8003106:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003108:	f007 fd88 	bl	800ac1c <EE_ReadVariable>
	if(!status1)
 800310c:	2800      	cmp	r0, #0
 800310e:	d15f      	bne.n	80031d0 <LoadEEparams+0x118>
		BOS.buttons.singleClickTime =temp1;
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003110:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 8003112:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003114:	0021      	movs	r1, r4
 8003116:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =temp1;
 8003118:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800311a:	f007 fd7f 	bl	800ac1c <EE_ReadVariable>
	if(!status1){
 800311e:	2800      	cmp	r0, #0
 8003120:	d160      	bne.n	80031e4 <LoadEEparams+0x12c>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003122:	8823      	ldrh	r3, [r4, #0]
 8003124:	712b      	strb	r3, [r5, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	716b      	strb	r3, [r5, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 800312a:	208c      	movs	r0, #140	; 0x8c
 800312c:	0021      	movs	r1, r4
 800312e:	0040      	lsls	r0, r0, #1
 8003130:	f007 fd74 	bl	800ac1c <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003134:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003136:	0006      	movs	r6, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003138:	201a      	movs	r0, #26
 800313a:	1d99      	adds	r1, r3, #6
 800313c:	30ff      	adds	r0, #255	; 0xff
 800313e:	f007 fd6d 	bl	800ac1c <EE_ReadVariable>
	if(!status1 && !status2){
 8003142:	4306      	orrs	r6, r0
 8003144:	b2b6      	uxth	r6, r6
 8003146:	2e00      	cmp	r6, #0
 8003148:	d15f      	bne.n	800320a <LoadEEparams+0x152>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 800314a:	466b      	mov	r3, sp
 800314c:	88db      	ldrh	r3, [r3, #6]
 800314e:	8822      	ldrh	r2, [r4, #0]
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	4313      	orrs	r3, r2
 8003154:	60ab      	str	r3, [r5, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003156:	208d      	movs	r0, #141	; 0x8d
 8003158:	0021      	movs	r1, r4
 800315a:	0040      	lsls	r0, r0, #1
 800315c:	f007 fd5e 	bl	800ac1c <EE_ReadVariable>
	if(!status1){
 8003160:	2800      	cmp	r0, #0
 8003162:	d145      	bne.n	80031f0 <LoadEEparams+0x138>
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003164:	201c      	movs	r0, #28
		BOS.daylightsaving =(int8_t )temp1;
 8003166:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003168:	0021      	movs	r1, r4
		BOS.daylightsaving =(int8_t )temp1;
 800316a:	732b      	strb	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800316c:	30ff      	adds	r0, #255	; 0xff
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	736b      	strb	r3, [r5, #13]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003172:	f007 fd53 	bl	800ac1c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003176:	2800      	cmp	r0, #0
 8003178:	d044      	beq.n	8003204 <LoadEEparams+0x14c>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 800317a:	2326      	movs	r3, #38	; 0x26
 800317c:	4a2b      	ldr	r2, [pc, #172]	; (800322c <LoadEEparams+0x174>)
 800317e:	5cd3      	ldrb	r3, [r2, r3]
 8003180:	76ab      	strb	r3, [r5, #26]
	}
	
	return result;
}
 8003182:	2000      	movs	r0, #0
 8003184:	b002      	add	sp, #8
 8003186:	bd70      	pop	{r4, r5, r6, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003188:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =BOSMessging_default.response;
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <LoadEEparams+0x174>)
 800318c:	4d25      	ldr	r5, [pc, #148]	; (8003224 <LoadEEparams+0x16c>)
 800318e:	791a      	ldrb	r2, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003190:	0021      	movs	r1, r4
		BOSMessaging.response =BOSMessging_default.response;
 8003192:	702a      	strb	r2, [r5, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003194:	795b      	ldrb	r3, [r3, #5]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003196:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =BOSMessging_default.trace;
 8003198:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800319a:	f007 fd3f 	bl	800ac1c <EE_ReadVariable>
	if(!status1){
 800319e:	2800      	cmp	r0, #0
 80031a0:	d0a0      	beq.n	80030e4 <LoadEEparams+0x2c>
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031a2:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80031a4:	4b21      	ldr	r3, [pc, #132]	; (800322c <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031a6:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80031a8:	7a1a      	ldrb	r2, [r3, #8]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031aa:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80031ac:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80031ae:	895b      	ldrh	r3, [r3, #10]
 80031b0:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031b2:	f007 fd33 	bl	800ac1c <EE_ReadVariable>
		BOS.buttons.debounce =temp1;
 80031b6:	4d1c      	ldr	r5, [pc, #112]	; (8003228 <LoadEEparams+0x170>)
	if(!status1)
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d0a0      	beq.n	80030fe <LoadEEparams+0x46>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031bc:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031c0:	0021      	movs	r1, r4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031c2:	899b      	ldrh	r3, [r3, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031c4:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031c6:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031c8:	f007 fd28 	bl	800ac1c <EE_ReadVariable>
	if(!status1)
 80031cc:	2800      	cmp	r0, #0
 80031ce:	d09f      	beq.n	8003110 <LoadEEparams+0x58>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031d0:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031d2:	4b16      	ldr	r3, [pc, #88]	; (800322c <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031d4:	0021      	movs	r1, r4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031d6:	89db      	ldrh	r3, [r3, #14]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031d8:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031da:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031dc:	f007 fd1e 	bl	800ac1c <EE_ReadVariable>
	if(!status1){
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d09e      	beq.n	8003122 <LoadEEparams+0x6a>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <LoadEEparams+0x174>)
 80031e6:	7c1a      	ldrb	r2, [r3, #16]
 80031e8:	712a      	strb	r2, [r5, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 80031ea:	7c5b      	ldrb	r3, [r3, #17]
 80031ec:	716b      	strb	r3, [r5, #5]
 80031ee:	e79c      	b.n	800312a <LoadEEparams+0x72>
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031f0:	23c0      	movs	r3, #192	; 0xc0
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80031f2:	201c      	movs	r0, #28
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031f4:	015b      	lsls	r3, r3, #5
 80031f6:	81ab      	strh	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80031f8:	0021      	movs	r1, r4
 80031fa:	30ff      	adds	r0, #255	; 0xff
 80031fc:	f007 fd0e 	bl	800ac1c <EE_ReadVariable>
	if(!status1){
 8003200:	2800      	cmp	r0, #0
 8003202:	d1ba      	bne.n	800317a <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 8003204:	8823      	ldrh	r3, [r4, #0]
 8003206:	76ab      	strb	r3, [r5, #26]
 8003208:	e7bb      	b.n	8003182 <LoadEEparams+0xca>
	else if(CLI_LOW_Baudrate_Flag)
 800320a:	2322      	movs	r3, #34	; 0x22
 800320c:	4a08      	ldr	r2, [pc, #32]	; (8003230 <LoadEEparams+0x178>)
 800320e:	5cd3      	ldrb	r3, [r2, r3]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <LoadEEparams+0x164>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003214:	23e1      	movs	r3, #225	; 0xe1
 8003216:	025b      	lsls	r3, r3, #9
 8003218:	60ab      	str	r3, [r5, #8]
 800321a:	e79c      	b.n	8003156 <LoadEEparams+0x9e>
		BOS.clibaudrate =BOS_default.clibaudrate;
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <LoadEEparams+0x174>)
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	60ab      	str	r3, [r5, #8]
 8003222:	e798      	b.n	8003156 <LoadEEparams+0x9e>
 8003224:	200067f4 	.word	0x200067f4
 8003228:	20006874 	.word	0x20006874
 800322c:	20000010 	.word	0x20000010
 8003230:	20000b28 	.word	0x20000b28

08003234 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003236:	46de      	mov	lr, fp
 8003238:	4657      	mov	r7, sl
 800323a:	464e      	mov	r6, r9
 800323c:	4645      	mov	r5, r8
 800323e:	b5e0      	push	{r5, r6, r7, lr}
 8003240:	b08b      	sub	sp, #44	; 0x2c
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 8003242:	ab02      	add	r3, sp, #8
 8003244:	469c      	mov	ip, r3
 8003246:	261e      	movs	r6, #30
 8003248:	2300      	movs	r3, #0
 800324a:	4466      	add	r6, ip
 800324c:	8033      	strh	r3, [r6, #0]
 800324e:	330f      	adds	r3, #15
 8003250:	469a      	mov	sl, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003252:	3b0e      	subs	r3, #14
	uint16_t temp16 =0, status1 =0;
 8003254:	2501      	movs	r5, #1
 8003256:	24ec      	movs	r4, #236	; 0xec
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003258:	469b      	mov	fp, r3
 800325a:	e004      	b.n	8003266 <LoadEEbuttons+0x32>
 800325c:	3404      	adds	r4, #4
 800325e:	3501      	adds	r5, #1
 8003260:	b2a4      	uxth	r4, r4
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003262:	2d07      	cmp	r5, #7
 8003264:	d05e      	beq.n	8003324 <LoadEEbuttons+0xf0>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003266:	0031      	movs	r1, r6
 8003268:	0020      	movs	r0, r4
 800326a:	f007 fcd7 	bl	800ac1c <EE_ReadVariable>
 800326e:	b2eb      	uxtb	r3, r5
 8003270:	1e07      	subs	r7, r0, #0
 8003272:	4699      	mov	r9, r3
		if(!status1)									// This variable exists
 8003274:	d1f2      	bne.n	800325c <LoadEEbuttons+0x28>
			temp8 =(uint8_t )(temp16 >> 8);
 8003276:	8832      	ldrh	r2, [r6, #0]
 8003278:	0a13      	lsrs	r3, r2, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 800327a:	0919      	lsrs	r1, r3, #4
 800327c:	42a9      	cmp	r1, r5
 800327e:	d1ed      	bne.n	800325c <LoadEEbuttons+0x28>
 8003280:	4651      	mov	r1, sl
 8003282:	400b      	ands	r3, r1
 8003284:	d0ea      	beq.n	800325c <LoadEEbuttons+0x28>
				button[i + 1].type =temp8 & 0x0F;
 8003286:	482b      	ldr	r0, [pc, #172]	; (8003334 <LoadEEbuttons+0x100>)
 8003288:	00e9      	lsls	r1, r5, #3
 800328a:	4680      	mov	r8, r0
 800328c:	1949      	adds	r1, r1, r5
 800328e:	4488      	add	r8, r1
 8003290:	4641      	mov	r1, r8
 8003292:	00a8      	lsls	r0, r5, #2
 8003294:	704b      	strb	r3, [r1, #1]
 8003296:	b283      	uxth	r3, r0
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003298:	0018      	movs	r0, r3
 800329a:	30e9      	adds	r0, #233	; 0xe9
				button[i + 1].events =(uint8_t )temp16;
 800329c:	720a      	strb	r2, [r1, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 800329e:	b280      	uxth	r0, r0
 80032a0:	0031      	movs	r1, r6
 80032a2:	9307      	str	r3, [sp, #28]
 80032a4:	f007 fcba 	bl	800ac1c <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80032a8:	4641      	mov	r1, r8
 80032aa:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80032ac:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80032ae:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80032b0:	30ea      	adds	r0, #234	; 0xea
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80032b2:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80032b4:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80032b6:	b280      	uxth	r0, r0
 80032b8:	0031      	movs	r1, r6
 80032ba:	f007 fcaf 	bl	800ac1c <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80032be:	4641      	mov	r1, r8
 80032c0:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80032c2:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80032c4:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80032c6:	30eb      	adds	r0, #235	; 0xeb
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80032c8:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 80032ca:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80032cc:	b280      	uxth	r0, r0
 80032ce:	0031      	movs	r1, r6
 80032d0:	f007 fca4 	bl	800ac1c <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80032d4:	4641      	mov	r1, r8
 80032d6:	8833      	ldrh	r3, [r6, #0]
				AddPortButton(button[i + 1].type,i + 1);
 80032d8:	7848      	ldrb	r0, [r1, #1]
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80032da:	0a1a      	lsrs	r2, r3, #8
 80032dc:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80032de:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i + 1].type,i + 1);
 80032e0:	4649      	mov	r1, r9
 80032e2:	f008 f84b 	bl	800b37c <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80032e6:	4643      	mov	r3, r8
 80032e8:	4658      	mov	r0, fp
 80032ea:	7a19      	ldrb	r1, [r3, #8]
 80032ec:	789b      	ldrb	r3, [r3, #2]
 80032ee:	104a      	asrs	r2, r1, #1
 80032f0:	4002      	ands	r2, r0
 80032f2:	4001      	ands	r1, r0
 80032f4:	4640      	mov	r0, r8
 80032f6:	9705      	str	r7, [sp, #20]
 80032f8:	79c0      	ldrb	r0, [r0, #7]
 80032fa:	3404      	adds	r4, #4
 80032fc:	9004      	str	r0, [sp, #16]
 80032fe:	4640      	mov	r0, r8
 8003300:	7980      	ldrb	r0, [r0, #6]
 8003302:	3501      	adds	r5, #1
 8003304:	9003      	str	r0, [sp, #12]
 8003306:	4640      	mov	r0, r8
 8003308:	7940      	ldrb	r0, [r0, #5]
 800330a:	b2a4      	uxth	r4, r4
 800330c:	9002      	str	r0, [sp, #8]
 800330e:	4640      	mov	r0, r8
 8003310:	7900      	ldrb	r0, [r0, #4]
 8003312:	9001      	str	r0, [sp, #4]
 8003314:	4640      	mov	r0, r8
 8003316:	78c0      	ldrb	r0, [r0, #3]
 8003318:	9000      	str	r0, [sp, #0]
 800331a:	4648      	mov	r0, r9
 800331c:	f008 f934 	bl	800b588 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003320:	2d07      	cmp	r5, #7
 8003322:	d1a0      	bne.n	8003266 <LoadEEbuttons+0x32>
			}
		}
	}
	
	return result;
}
 8003324:	2000      	movs	r0, #0
 8003326:	b00b      	add	sp, #44	; 0x2c
 8003328:	bc3c      	pop	{r2, r3, r4, r5}
 800332a:	4690      	mov	r8, r2
 800332c:	4699      	mov	r9, r3
 800332e:	46a2      	mov	sl, r4
 8003330:	46ab      	mov	fp, r5
 8003332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003334:	200023d0 	.word	0x200023d0

08003338 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333a:	46de      	mov	lr, fp
 800333c:	4645      	mov	r5, r8
 800333e:	4657      	mov	r7, sl
 8003340:	464e      	mov	r6, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003342:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 8003344:	b5e0      	push	{r5, r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003346:	f00e fee1 	bl	801210c <malloc>
 800334a:	1e05      	subs	r5, r0, #0
	if(snipBuffer == NULL)
 800334c:	d065      	beq.n	800341a <LoadROsnippets+0xe2>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 800334e:	4c3b      	ldr	r4, [pc, #236]	; (800343c <LoadROsnippets+0x104>)
		return BOS_ERROR;
 8003350:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 8003352:	7822      	ldrb	r2, [r4, #0]
 8003354:	2afe      	cmp	r2, #254	; 0xfe
 8003356:	d156      	bne.n	8003406 <LoadROsnippets+0xce>
 8003358:	1c6b      	adds	r3, r5, #1
 800335a:	4698      	mov	r8, r3
 800335c:	2364      	movs	r3, #100	; 0x64
 800335e:	4699      	mov	r9, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003360:	4b37      	ldr	r3, [pc, #220]	; (8003440 <LoadROsnippets+0x108>)
 8003362:	4e38      	ldr	r6, [pc, #224]	; (8003444 <LoadROsnippets+0x10c>)
 8003364:	469b      	mov	fp, r3
 8003366:	44b1      	add	r9, r6
 8003368:	0020      	movs	r0, r4
 800336a:	46a2      	mov	sl, r4
 800336c:	3014      	adds	r0, #20
 800336e:	1b29      	subs	r1, r5, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003370:	7822      	ldrb	r2, [r4, #0]
 8003372:	550a      	strb	r2, [r1, r4]
 8003374:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003376:	4284      	cmp	r4, r0
 8003378:	d1fa      	bne.n	8003370 <LoadROsnippets+0x38>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 800337a:	2214      	movs	r2, #20
 800337c:	4641      	mov	r1, r8
 800337e:	0030      	movs	r0, r6
 8003380:	f00f f911 	bl	80125a6 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003384:	2100      	movs	r1, #0
 8003386:	2214      	movs	r2, #20
 8003388:	0028      	movs	r0, r5
 800338a:	f00f f915 	bl	80125b8 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800338e:	7821      	ldrb	r1, [r4, #0]
 8003390:	1c8b      	adds	r3, r1, #2
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d942      	bls.n	800341e <LoadROsnippets+0xe6>
 8003398:	4657      	mov	r7, sl
 800339a:	0028      	movs	r0, r5
 800339c:	3746      	adds	r7, #70	; 0x46
		i =0;
 800339e:	2300      	movs	r3, #0
 80033a0:	e002      	b.n	80033a8 <LoadROsnippets+0x70>
 80033a2:	3001      	adds	r0, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033a4:	42a7      	cmp	r7, r4
 80033a6:	d034      	beq.n	8003412 <LoadROsnippets+0xda>
			++currentAdd;
 80033a8:	3401      	adds	r4, #1
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80033aa:	7001      	strb	r1, [r0, #0]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033ac:	7821      	ldrb	r1, [r4, #0]
			++i;
 80033ae:	3301      	adds	r3, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033b0:	1c8a      	adds	r2, r1, #2
 80033b2:	b2d2      	uxtb	r2, r2
			++i;
 80033b4:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033b6:	2a01      	cmp	r2, #1
 80033b8:	d8f3      	bhi.n	80033a2 <LoadROsnippets+0x6a>
 80033ba:	469a      	mov	sl, r3
 80033bc:	1e5a      	subs	r2, r3, #1
		if(snipBuffer[i - 1] != 0)
 80033be:	5caa      	ldrb	r2, [r5, r2]
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	d002      	beq.n	80033ca <LoadROsnippets+0x92>
			++i;	// String termination char was not recorded, then add one
 80033c4:	3301      	adds	r3, #1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	469a      	mov	sl, r3
		snippets[s].cmd =(char* )malloc(i);
 80033ca:	4650      	mov	r0, sl
 80033cc:	f00e fe9e 	bl	801210c <malloc>
 80033d0:	60f0      	str	r0, [r6, #12]
		if(snippets[s].cmd == NULL){
 80033d2:	2800      	cmp	r0, #0
 80033d4:	d028      	beq.n	8003428 <LoadROsnippets+0xf0>
			memcpy(snippets[s].cmd,snipBuffer,i);
 80033d6:	4652      	mov	r2, sl
 80033d8:	0029      	movs	r1, r5
 80033da:	f00f f8e4 	bl	80125a6 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80033de:	465b      	mov	r3, fp
 80033e0:	465a      	mov	r2, fp
 80033e2:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 80033e4:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 80033e6:	3301      	adds	r3, #1
 80033e8:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 80033ea:	0028      	movs	r0, r5
 80033ec:	4652      	mov	r2, sl
 80033ee:	f00f f8e3 	bl	80125b8 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 80033f2:	7823      	ldrb	r3, [r4, #0]
 80033f4:	2bfe      	cmp	r3, #254	; 0xfe
 80033f6:	d102      	bne.n	80033fe <LoadROsnippets+0xc6>
 80033f8:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80033fa:	45b1      	cmp	r9, r6
 80033fc:	d1b4      	bne.n	8003368 <LoadROsnippets+0x30>
			break;
	}
	
	free(snipBuffer);
 80033fe:	0028      	movs	r0, r5
 8003400:	f00e fe8e 	bl	8012120 <free>
	return BOS_OK;
 8003404:	2000      	movs	r0, #0
}
 8003406:	bc3c      	pop	{r2, r3, r4, r5}
 8003408:	4690      	mov	r8, r2
 800340a:	4699      	mov	r9, r3
 800340c:	46a2      	mov	sl, r4
 800340e:	46ab      	mov	fp, r5
 8003410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003412:	2332      	movs	r3, #50	; 0x32
 8003414:	2231      	movs	r2, #49	; 0x31
 8003416:	469a      	mov	sl, r3
 8003418:	e7d1      	b.n	80033be <LoadROsnippets+0x86>
		return BOS_MEM_FULL;
 800341a:	20fb      	movs	r0, #251	; 0xfb
 800341c:	e7f3      	b.n	8003406 <LoadROsnippets+0xce>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800341e:	2201      	movs	r2, #1
 8003420:	2300      	movs	r3, #0
 8003422:	4252      	negs	r2, r2
 8003424:	469a      	mov	sl, r3
 8003426:	e7ca      	b.n	80033be <LoadROsnippets+0x86>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003428:	2214      	movs	r2, #20
 800342a:	2100      	movs	r1, #0
 800342c:	0030      	movs	r0, r6
 800342e:	f00f f8c3 	bl	80125b8 <memset>
			free(snipBuffer);
 8003432:	0028      	movs	r0, r5
 8003434:	f00e fe74 	bl	8012120 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003438:	200e      	movs	r0, #14
 800343a:	e7e4      	b.n	8003406 <LoadROsnippets+0xce>
 800343c:	0801dc00 	.word	0x0801dc00
 8003440:	200016e4 	.word	0x200016e4
 8003444:	20006890 	.word	0x20006890

08003448 <LoadEEvars>:
void LoadEEvars(void){
 8003448:	b510      	push	{r4, lr}
	LoadROtopology();
 800344a:	f7ff fc9d 	bl	8002d88 <LoadROtopology>
	LoadEEportsDir();
 800344e:	f7ff fceb 	bl	8002e28 <LoadEEportsDir>
	LoadEEalias();
 8003452:	f7ff fd0f 	bl	8002e74 <LoadEEalias>
	LoadEEgroup();
 8003456:	f7ff fd4d 	bl	8002ef4 <LoadEEgroup>
	LoadEEstreams();
 800345a:	f7ff fd9d 	bl	8002f98 <LoadEEstreams>
	LoadEEparams();
 800345e:	f7ff fe2b 	bl	80030b8 <LoadEEparams>
	LoadEEbuttons();
 8003462:	f7ff fee7 	bl	8003234 <LoadEEbuttons>
	LoadROsnippets();
 8003466:	f7ff ff67 	bl	8003338 <LoadROsnippets>
}
 800346a:	bd10      	pop	{r4, pc}

0800346c <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	46c6      	mov	lr, r8
 8003470:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003472:	4e10      	ldr	r6, [pc, #64]	; (80034b4 <SaveEEportsDir+0x48>)
 8003474:	7833      	ldrb	r3, [r6, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <SaveEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 800347a:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 800347c:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800347e:	4698      	mov	r8, r3
 8003480:	4f0d      	ldr	r7, [pc, #52]	; (80034b8 <SaveEEportsDir+0x4c>)
 8003482:	e007      	b.n	8003494 <SaveEEportsDir+0x28>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003484:	2c19      	cmp	r4, #25
 8003486:	d901      	bls.n	800348c <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 8003488:	230a      	movs	r3, #10
 800348a:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 800348c:	7833      	ldrb	r3, [r6, #0]
 800348e:	b2ec      	uxtb	r4, r5
 8003490:	42a3      	cmp	r3, r4
 8003492:	d30b      	bcc.n	80034ac <SaveEEportsDir+0x40>
		if(arrayPortsDir[i - 1])
 8003494:	1e63      	subs	r3, r4, #1
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	5af9      	ldrh	r1, [r7, r3]
 800349a:	1c65      	adds	r5, r4, #1
 800349c:	2900      	cmp	r1, #0
 800349e:	d0f1      	beq.n	8003484 <SaveEEportsDir+0x18>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80034a0:	b2a8      	uxth	r0, r5
 80034a2:	f007 fbeb 	bl	800ac7c <EE_WriteVariable>
 80034a6:	e7ed      	b.n	8003484 <SaveEEportsDir+0x18>
	BOS_Status result =BOS_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	4698      	mov	r8, r3
	}
	
	return result;
}
 80034ac:	4640      	mov	r0, r8
 80034ae:	bc04      	pop	{r2}
 80034b0:	4690      	mov	r8, r2
 80034b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b4:	20000010 	.word	0x20000010
 80034b8:	20006d34 	.word	0x20006d34

080034bc <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80034bc:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 80034be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c0:	4646      	mov	r6, r8
 80034c2:	46d6      	mov	lr, sl
 80034c4:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 80034c6:	4698      	mov	r8, r3
 80034c8:	4b1c      	ldr	r3, [pc, #112]	; (800353c <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 80034ca:	b5c0      	push	{r6, r7, lr}
 80034cc:	4699      	mov	r9, r3
 80034ce:	4b1c      	ldr	r3, [pc, #112]	; (8003540 <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80034d0:	2600      	movs	r6, #0
 80034d2:	469a      	mov	sl, r3
 80034d4:	e005      	b.n	80034e2 <SaveEEalias+0x26>
 80034d6:	4653      	mov	r3, sl
 80034d8:	3601      	adds	r6, #1
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b2f6      	uxtb	r6, r6
 80034de:	42b3      	cmp	r3, r6
 80034e0:	d325      	bcc.n	800352e <SaveEEalias+0x72>
	    {
		if(moduleAlias[i][0]){
 80034e2:	464b      	mov	r3, r9
 80034e4:	00b4      	lsls	r4, r6, #2
 80034e6:	19a4      	adds	r4, r4, r6
 80034e8:	0064      	lsls	r4, r4, #1
 80034ea:	5d1b      	ldrb	r3, [r3, r4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f2      	beq.n	80034d6 <SaveEEalias+0x1a>
 80034f0:	4645      	mov	r5, r8
 80034f2:	4647      	mov	r7, r8
 80034f4:	351c      	adds	r5, #28
 80034f6:	3721      	adds	r7, #33	; 0x21
 80034f8:	444c      	add	r4, r9
 80034fa:	b2ad      	uxth	r5, r5
 80034fc:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80034fe:	7861      	ldrb	r1, [r4, #1]
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 8003504:	0028      	movs	r0, r5
 8003506:	3501      	adds	r5, #1
 8003508:	b289      	uxth	r1, r1
 800350a:	b2ad      	uxth	r5, r5
 800350c:	f007 fbb6 	bl	800ac7c <EE_WriteVariable>
 8003510:	3402      	adds	r4, #2
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003512:	42bd      	cmp	r5, r7
 8003514:	d001      	beq.n	800351a <SaveEEalias+0x5e>
 8003516:	7823      	ldrb	r3, [r4, #0]
 8003518:	e7f1      	b.n	80034fe <SaveEEalias+0x42>
 800351a:	4643      	mov	r3, r8
 800351c:	3305      	adds	r3, #5
 800351e:	b29b      	uxth	r3, r3
 8003520:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003522:	4653      	mov	r3, sl
 8003524:	3601      	adds	r6, #1
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b2f6      	uxtb	r6, r6
 800352a:	42b3      	cmp	r3, r6
 800352c:	d2d9      	bcs.n	80034e2 <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 800352e:	2000      	movs	r0, #0
 8003530:	bc1c      	pop	{r2, r3, r4}
 8003532:	4690      	mov	r8, r2
 8003534:	4699      	mov	r9, r3
 8003536:	46a2      	mov	sl, r4
 8003538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	20000dd4 	.word	0x20000dd4
 8003540:	20000010 	.word	0x20000010

08003544 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	46de      	mov	lr, fp
 8003548:	4657      	mov	r7, sl
 800354a:	464e      	mov	r6, r9
 800354c:	4645      	mov	r5, r8
 800354e:	468b      	mov	fp, r1
 8003550:	b5e0      	push	{r5, r6, r7, lr}
 8003552:	001e      	movs	r6, r3
 8003554:	ab0a      	add	r3, sp, #40	; 0x28
 8003556:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003558:	b281      	uxth	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800355a:	469a      	mov	sl, r3
 800355c:	ab0b      	add	r3, sp, #44	; 0x2c
 800355e:	781d      	ldrb	r5, [r3, #0]
 8003560:	ab0c      	add	r3, sp, #48	; 0x30
 8003562:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003564:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003566:	4698      	mov	r8, r3
 8003568:	ab0d      	add	r3, sp, #52	; 0x34
 800356a:	781c      	ldrb	r4, [r3, #0]
 800356c:	ab0e      	add	r3, sp, #56	; 0x38
 800356e:	4691      	mov	r9, r2
 8003570:	781f      	ldrb	r7, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003572:	f007 fb83 	bl	800ac7c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003576:	465b      	mov	r3, fp
 8003578:	0a19      	lsrs	r1, r3, #8
 800357a:	b289      	uxth	r1, r1
 800357c:	20e5      	movs	r0, #229	; 0xe5
 800357e:	f007 fb7d 	bl	800ac7c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8003582:	465b      	mov	r3, fp
 8003584:	20e6      	movs	r0, #230	; 0xe6
 8003586:	b299      	uxth	r1, r3
 8003588:	f007 fb78 	bl	800ac7c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 800358c:	464b      	mov	r3, r9
 800358e:	0a19      	lsrs	r1, r3, #8
 8003590:	b289      	uxth	r1, r1
 8003592:	20e7      	movs	r0, #231	; 0xe7
 8003594:	f007 fb72 	bl	800ac7c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003598:	464b      	mov	r3, r9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800359a:	0236      	lsls	r6, r6, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 800359c:	b299      	uxth	r1, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800359e:	4456      	add	r6, sl
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80035a0:	20e8      	movs	r0, #232	; 0xe8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80035a2:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80035a4:	f007 fb6a 	bl	800ac7c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80035a8:	4445      	add	r5, r8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80035aa:	b2b1      	uxth	r1, r6
 80035ac:	20e9      	movs	r0, #233	; 0xe9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80035ae:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80035b0:	f007 fb64 	bl	800ac7c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80035b4:	19e4      	adds	r4, r4, r7
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80035b6:	b2a9      	uxth	r1, r5
 80035b8:	20ea      	movs	r0, #234	; 0xea
 80035ba:	f007 fb5f 	bl	800ac7c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80035be:	b2a1      	uxth	r1, r4
 80035c0:	20eb      	movs	r0, #235	; 0xeb
 80035c2:	f007 fb5b 	bl	800ac7c <EE_WriteVariable>
	
	return result;
}
 80035c6:	2000      	movs	r0, #0
 80035c8:	bc3c      	pop	{r2, r3, r4, r5}
 80035ca:	4690      	mov	r8, r2
 80035cc:	4699      	mov	r9, r3
 80035ce:	46a2      	mov	sl, r4
 80035d0:	46ab      	mov	fp, r5
 80035d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035d4 <SaveEEparams>:

BOS_Status SaveEEparams(void){
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80035d4:	208a      	movs	r0, #138	; 0x8a
BOS_Status SaveEEparams(void){
 80035d6:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80035d8:	4c1e      	ldr	r4, [pc, #120]	; (8003654 <SaveEEparams+0x80>)
 80035da:	0040      	lsls	r0, r0, #1
 80035dc:	7863      	ldrb	r3, [r4, #1]
 80035de:	7821      	ldrb	r1, [r4, #0]
 80035e0:	015b      	lsls	r3, r3, #5
 80035e2:	4319      	orrs	r1, r3
 80035e4:	f007 fb4a 	bl	800ac7c <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 80035e8:	208e      	movs	r0, #142	; 0x8e
 80035ea:	7921      	ldrb	r1, [r4, #4]
 80035ec:	88e3      	ldrh	r3, [r4, #6]
 80035ee:	03c9      	lsls	r1, r1, #15
 80035f0:	4319      	orrs	r1, r3
 80035f2:	b289      	uxth	r1, r1
 80035f4:	0040      	lsls	r0, r0, #1
 80035f6:	f007 fb41 	bl	800ac7c <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 80035fa:	2016      	movs	r0, #22
 80035fc:	4c16      	ldr	r4, [pc, #88]	; (8003658 <SaveEEparams+0x84>)
 80035fe:	30ff      	adds	r0, #255	; 0xff
 8003600:	8821      	ldrh	r1, [r4, #0]
 8003602:	f007 fb3b 	bl	800ac7c <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 8003606:	208b      	movs	r0, #139	; 0x8b
 8003608:	8861      	ldrh	r1, [r4, #2]
 800360a:	0040      	lsls	r0, r0, #1
 800360c:	f007 fb36 	bl	800ac7c <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003610:	2018      	movs	r0, #24
 8003612:	7963      	ldrb	r3, [r4, #5]
 8003614:	7b21      	ldrb	r1, [r4, #12]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	4319      	orrs	r1, r3
 800361a:	30ff      	adds	r0, #255	; 0xff
 800361c:	f007 fb2e 	bl	800ac7c <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003620:	208c      	movs	r0, #140	; 0x8c
 8003622:	8921      	ldrh	r1, [r4, #8]
 8003624:	0040      	lsls	r0, r0, #1
 8003626:	f007 fb29 	bl	800ac7c <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800362a:	201a      	movs	r0, #26
 800362c:	8961      	ldrh	r1, [r4, #10]
 800362e:	30ff      	adds	r0, #255	; 0xff
 8003630:	f007 fb24 	bl	800ac7c <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003634:	208d      	movs	r0, #141	; 0x8d
 8003636:	7b63      	ldrb	r3, [r4, #13]
 8003638:	7921      	ldrb	r1, [r4, #4]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	4319      	orrs	r1, r3
 800363e:	0040      	lsls	r0, r0, #1
 8003640:	f007 fb1c 	bl	800ac7c <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003644:	201c      	movs	r0, #28
 8003646:	7ea1      	ldrb	r1, [r4, #26]
 8003648:	30ff      	adds	r0, #255	; 0xff
 800364a:	f007 fb17 	bl	800ac7c <EE_WriteVariable>
	
	return result;
}
 800364e:	2000      	movs	r0, #0
 8003650:	bd10      	pop	{r4, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	200067f4 	.word	0x200067f4
 8003658:	20006874 	.word	0x20006874

0800365c <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 800365c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365e:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003660:	4f12      	ldr	r7, [pc, #72]	; (80036ac <ClearEEportsDir+0x50>)
BOS_Status ClearEEportsDir(void){
 8003662:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003664:	2234      	movs	r2, #52	; 0x34
 8003666:	2100      	movs	r1, #0
 8003668:	0038      	movs	r0, r7
 800366a:	f00e ffa5 	bl	80125b8 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800366e:	4e10      	ldr	r6, [pc, #64]	; (80036b0 <ClearEEportsDir+0x54>)
 8003670:	7833      	ldrb	r3, [r6, #0]
	BOS_Status result =BOS_OK;
 8003672:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003674:	2b00      	cmp	r3, #0
 8003676:	d015      	beq.n	80036a4 <ClearEEportsDir+0x48>
	BOS_Status result =BOS_OK;
 8003678:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 800367a:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800367c:	4698      	mov	r8, r3
 800367e:	2502      	movs	r5, #2
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003680:	2c19      	cmp	r4, #25
 8003682:	d901      	bls.n	8003688 <ClearEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8003684:	230a      	movs	r3, #10
 8003686:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003688:	7833      	ldrb	r3, [r6, #0]
 800368a:	b2ec      	uxtb	r4, r5
 800368c:	42a3      	cmp	r3, r4
 800368e:	d309      	bcc.n	80036a4 <ClearEEportsDir+0x48>
 8003690:	1e63      	subs	r3, r4, #1
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	5af9      	ldrh	r1, [r7, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003696:	1c65      	adds	r5, r4, #1
		if(arrayPortsDir[i - 1])
 8003698:	2900      	cmp	r1, #0
 800369a:	d0f1      	beq.n	8003680 <ClearEEportsDir+0x24>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800369c:	b2a8      	uxth	r0, r5
 800369e:	f007 faed 	bl	800ac7c <EE_WriteVariable>
 80036a2:	e7ed      	b.n	8003680 <ClearEEportsDir+0x24>
	}
	
	return result;
}
 80036a4:	4640      	mov	r0, r8
 80036a6:	bc04      	pop	{r2}
 80036a8:	4690      	mov	r8, r2
 80036aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ac:	20006d34 	.word	0x20006d34
 80036b0:	20000010 	.word	0x20000010

080036b4 <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036b4:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 80036b6:	b570      	push	{r4, r5, r6, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036b8:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 80036ba:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036bc:	ad03      	add	r5, sp, #12
 80036be:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036c0:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	002a      	movs	r2, r5
 80036c6:	ab06      	add	r3, sp, #24
 80036c8:	a905      	add	r1, sp, #20
 80036ca:	2001      	movs	r0, #1
 80036cc:	f007 fd80 	bl	800b1d0 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036d0:	aa04      	add	r2, sp, #16
 80036d2:	ab08      	add	r3, sp, #32
 80036d4:	a907      	add	r1, sp, #28
 80036d6:	9400      	str	r4, [sp, #0]
 80036d8:	2002      	movs	r0, #2
 80036da:	f007 fd79 	bl	800b1d0 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036de:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e2:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80036e4:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80036e6:	a909      	add	r1, sp, #36	; 0x24
 80036e8:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80036ea:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	960b      	str	r6, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80036ee:	f00c fec3 	bl	8010478 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036f2:	2302      	movs	r3, #2
 80036f4:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80036f6:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 80036f8:	a909      	add	r1, sp, #36	; 0x24
 80036fa:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80036fc:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036fe:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003700:	f00c feba 	bl	8010478 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003704:	8829      	ldrh	r1, [r5, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	9805      	ldr	r0, [sp, #20]
 800370a:	f00d f855 	bl	80107b8 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800370e:	2005      	movs	r0, #5
 8003710:	f009 f9b6 	bl	800ca80 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003714:	8821      	ldrh	r1, [r4, #0]
 8003716:	9808      	ldr	r0, [sp, #32]
 8003718:	f00d f848 	bl	80107ac <HAL_GPIO_ReadPin>
 800371c:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 800371e:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10f      	bne.n	8003744 <IsLowerCLIbaud+0x90>
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003724:	8829      	ldrh	r1, [r5, #0]
 8003726:	2201      	movs	r2, #1
 8003728:	9805      	ldr	r0, [sp, #20]
 800372a:	f00d f845 	bl	80107b8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800372e:	2005      	movs	r0, #5
 8003730:	f009 f9a6 	bl	800ca80 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8003734:	8821      	ldrh	r1, [r4, #0]
 8003736:	9808      	ldr	r0, [sp, #32]
 8003738:	f00d f838 	bl	80107ac <HAL_GPIO_ReadPin>
 800373c:	3801      	subs	r0, #1
 800373e:	4243      	negs	r3, r0
 8003740:	4158      	adcs	r0, r3
			return 1;
 8003742:	b2c0      	uxtb	r0, r0
}
 8003744:	b00e      	add	sp, #56	; 0x38
 8003746:	bd70      	pop	{r4, r5, r6, pc}

08003748 <IsModuleParameter>:

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <IsModuleParameter+0x14>)
uint8_t IsModuleParameter(char *name){
 800374a:	b510      	push	{r4, lr}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 800374c:	6899      	ldr	r1, [r3, #8]
 800374e:	f7fc fcd9 	bl	8000104 <strcmp>
 8003752:	4243      	negs	r3, r0
 8003754:	4158      	adcs	r0, r3
			return i + 1;
	}
	return 0;
}
 8003756:	b2c0      	uxtb	r0, r0
 8003758:	bd10      	pop	{r4, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	200000a4 	.word	0x200000a4

08003760 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	46de      	mov	lr, fp
 8003764:	4657      	mov	r7, sl
 8003766:	464e      	mov	r6, r9
 8003768:	4645      	mov	r5, r8
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 800376a:	4923      	ldr	r1, [pc, #140]	; (80037f8 <IsMathOperator+0x98>)
uint8_t IsMathOperator(char *string){
 800376c:	b5e0      	push	{r5, r6, r7, lr}
 800376e:	0004      	movs	r4, r0
		if(!strcmp(string,"="))
 8003770:	f7fc fcc8 	bl	8000104 <strcmp>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003774:	4b21      	ldr	r3, [pc, #132]	; (80037fc <IsMathOperator+0x9c>)
		if(!strcmp(string,"="))
 8003776:	0006      	movs	r6, r0
		else if(!strcmp(string,"<"))
 8003778:	4698      	mov	r8, r3
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 800377a:	4b21      	ldr	r3, [pc, #132]	; (8003800 <IsMathOperator+0xa0>)
		if(!strcmp(string,"="))
 800377c:	2506      	movs	r5, #6
		else if(!strcmp(string,">="))
 800377e:	4699      	mov	r9, r3
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003780:	4b20      	ldr	r3, [pc, #128]	; (8003804 <IsMathOperator+0xa4>)
		else if(!strcmp(string,">"))
 8003782:	4f21      	ldr	r7, [pc, #132]	; (8003808 <IsMathOperator+0xa8>)
		else if(!strcmp(string,"<="))
 8003784:	469a      	mov	sl, r3
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <IsMathOperator+0xac>)
 8003788:	469b      	mov	fp, r3
		if(!strcmp(string,"="))
 800378a:	2e00      	cmp	r6, #0
 800378c:	d028      	beq.n	80037e0 <IsMathOperator+0x80>
		else if(!strcmp(string,">"))
 800378e:	0039      	movs	r1, r7
 8003790:	0020      	movs	r0, r4
 8003792:	f7fc fcb7 	bl	8000104 <strcmp>
 8003796:	2800      	cmp	r0, #0
 8003798:	d024      	beq.n	80037e4 <IsMathOperator+0x84>
		else if(!strcmp(string,"<"))
 800379a:	4641      	mov	r1, r8
 800379c:	0020      	movs	r0, r4
 800379e:	f7fc fcb1 	bl	8000104 <strcmp>
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d020      	beq.n	80037e8 <IsMathOperator+0x88>
		else if(!strcmp(string,">="))
 80037a6:	4649      	mov	r1, r9
 80037a8:	0020      	movs	r0, r4
 80037aa:	f7fc fcab 	bl	8000104 <strcmp>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d01c      	beq.n	80037ec <IsMathOperator+0x8c>
		else if(!strcmp(string,"<="))
 80037b2:	4651      	mov	r1, sl
 80037b4:	0020      	movs	r0, r4
 80037b6:	f7fc fca5 	bl	8000104 <strcmp>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d018      	beq.n	80037f0 <IsMathOperator+0x90>
		else if(!strcmp(string,"!="))
 80037be:	4659      	mov	r1, fp
 80037c0:	0020      	movs	r0, r4
 80037c2:	f7fc fc9f 	bl	8000104 <strcmp>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d014      	beq.n	80037f4 <IsMathOperator+0x94>
 80037ca:	3d01      	subs	r5, #1
 80037cc:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80037ce:	2d00      	cmp	r5, #0
 80037d0:	d1db      	bne.n	800378a <IsMathOperator+0x2a>
			return MATH_NOT_EQUAL;
	}
	return 0;
 80037d2:	2000      	movs	r0, #0
}
 80037d4:	bc3c      	pop	{r2, r3, r4, r5}
 80037d6:	4690      	mov	r8, r2
 80037d8:	4699      	mov	r9, r3
 80037da:	46a2      	mov	sl, r4
 80037dc:	46ab      	mov	fp, r5
 80037de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 80037e0:	2001      	movs	r0, #1
 80037e2:	e7f7      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_GREATER;
 80037e4:	2002      	movs	r0, #2
 80037e6:	e7f5      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_SMALLER;
 80037e8:	2003      	movs	r0, #3
 80037ea:	e7f3      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_GREATER_EQUAL;
 80037ec:	2004      	movs	r0, #4
 80037ee:	e7f1      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_SMALLER_EQUAL;
 80037f0:	2005      	movs	r0, #5
 80037f2:	e7ef      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_NOT_EQUAL;
 80037f4:	2006      	movs	r0, #6
 80037f6:	e7ed      	b.n	80037d4 <IsMathOperator+0x74>
 80037f8:	0801749c 	.word	0x0801749c
 80037fc:	080174a4 	.word	0x080174a4
 8003800:	080174a8 	.word	0x080174a8
 8003804:	080174ac 	.word	0x080174ac
 8003808:	080174a0 	.word	0x080174a0
 800380c:	080174b0 	.word	0x080174b0

08003810 <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 8003810:	b570      	push	{r4, r5, r6, lr}
		else Output_Port_Array[i-1] = FindRoute(myID, i);
	}
#endif

	/* Initialize and configure RTC */
	RTC_Init();
 8003812:	f008 ffe9 	bl	800c7e8 <RTC_Init>
	GetTimeDate();
 8003816:	f009 f88d 	bl	800c934 <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 800381a:	f007 fb15 	bl	800ae48 <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 800381e:	f007 fc83 	bl	800b128 <GPIO_Init>
	DMA_Init();
 8003822:	f006 fbd5 	bl	8009fd0 <DMA_Init>
	TIM_USEC_Init();
 8003826:	f009 f8b7 	bl	800c998 <TIM_USEC_Init>
	CRC_Init();
 800382a:	f007 f92d 	bl	800aa88 <CRC_Init>
	TIM_MSEC_Init();
 800382e:	f009 f8e5 	bl	800c9fc <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 8003832:	f007 fd2b 	bl	800b28c <IsFactoryReset>
 8003836:	2800      	cmp	r0, #0
 8003838:	d162      	bne.n	8003900 <BOS_Init+0xf0>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 800383a:	f7ff ff3b 	bl	80036b4 <IsLowerCLIbaud>
 800383e:	2800      	cmp	r0, #0
 8003840:	d052      	beq.n	80038e8 <BOS_Init+0xd8>
		CLI_LOW_Baudrate_Flag =1;
 8003842:	2322      	movs	r3, #34	; 0x22
 8003844:	2201      	movs	r2, #1
 8003846:	4e38      	ldr	r6, [pc, #224]	; (8003928 <BOS_Init+0x118>)
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003848:	2032      	movs	r0, #50	; 0x32
		Module_Peripheral_Init();
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800384a:	2401      	movs	r4, #1
		CLI_LOW_Baudrate_Flag =1;
 800384c:	54f2      	strb	r2, [r6, r3]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 800384e:	f009 f917 	bl	800ca80 <StartMilliDelay>
		Module_Peripheral_Init();
 8003852:	f006 fa49 	bl	8009ce8 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003856:	21e1      	movs	r1, #225	; 0xe1
 8003858:	4d34      	ldr	r5, [pc, #208]	; (800392c <BOS_Init+0x11c>)
			UpdateBaudrate(port,BOS.clibaudrate);
 800385a:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800385c:	3401      	adds	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800385e:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003860:	b2e4      	uxtb	r4, r4
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003862:	60a9      	str	r1, [r5, #8]
			UpdateBaudrate(port,BOS.clibaudrate);
 8003864:	f009 faf6 	bl	800ce54 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003868:	2c06      	cmp	r4, #6
 800386a:	d007      	beq.n	800387c <BOS_Init+0x6c>
			UpdateBaudrate(port,BOS.clibaudrate);
 800386c:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800386e:	3401      	adds	r4, #1
 8003870:	68a9      	ldr	r1, [r5, #8]
 8003872:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 8003874:	f009 faee 	bl	800ce54 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003878:	2c06      	cmp	r4, #6
 800387a:	d1f7      	bne.n	800386c <BOS_Init+0x5c>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
		Module_Peripheral_Init();
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 800387c:	f7ff fde4 	bl	8003448 <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 8003880:	f009 fb82 	bl	800cf88 <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003884:	f007 f854 	bl	800a930 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
	{
		IND_ON();
 8003888:	2180      	movs	r1, #128	; 0x80
 800388a:	2090      	movs	r0, #144	; 0x90
	if(myID == 0) /* Native module */
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <BOS_Init+0x120>)
		IND_ON();
 800388e:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 8003890:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 8003892:	0109      	lsls	r1, r1, #4
 8003894:	05c0      	lsls	r0, r0, #23
	if(myID == 0) /* Native module */
 8003896:	2b00      	cmp	r3, #0
 8003898:	d02d      	beq.n	80038f6 <BOS_Init+0xe6>
		Delay_ms_no_rtos(500);IND_OFF();
	}
	else /* Non-native module */
	{
		IND_ON();
 800389a:	f00c ff8d 	bl	80107b8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 800389e:	20fa      	movs	r0, #250	; 0xfa
 80038a0:	0040      	lsls	r0, r0, #1
 80038a2:	f009 f8ed 	bl	800ca80 <StartMilliDelay>
		IND_OFF();
 80038a6:	2180      	movs	r1, #128	; 0x80
 80038a8:	2090      	movs	r0, #144	; 0x90
 80038aa:	2200      	movs	r2, #0
 80038ac:	0109      	lsls	r1, r1, #4
 80038ae:	05c0      	lsls	r0, r0, #23
 80038b0:	f00c ff82 	bl	80107b8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80038b4:	2064      	movs	r0, #100	; 0x64
 80038b6:	f009 f8e3 	bl	800ca80 <StartMilliDelay>
		IND_ON();
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	2090      	movs	r0, #144	; 0x90
 80038be:	2201      	movs	r2, #1
 80038c0:	05c0      	lsls	r0, r0, #23
 80038c2:	0109      	lsls	r1, r1, #4
 80038c4:	f00c ff78 	bl	80107b8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80038c8:	2064      	movs	r0, #100	; 0x64
 80038ca:	f009 f8d9 	bl	800ca80 <StartMilliDelay>
		IND_OFF();
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	2090      	movs	r0, #144	; 0x90
 80038d2:	2200      	movs	r2, #0
 80038d4:	0109      	lsls	r1, r1, #4
 80038d6:	05c0      	lsls	r0, r0, #23
 80038d8:	f00c ff6e 	bl	80107b8 <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 80038dc:	f003 fd5c 	bl	8007398 <ResetUartORE>
	
	BOS_initialized =1;
 80038e0:	2323      	movs	r3, #35	; 0x23
 80038e2:	2201      	movs	r2, #1
 80038e4:	54f2      	strb	r2, [r6, r3]
}
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80038e8:	2032      	movs	r0, #50	; 0x32
 80038ea:	f009 f8c9 	bl	800ca80 <StartMilliDelay>
		Module_Peripheral_Init();
 80038ee:	f006 f9fb 	bl	8009ce8 <Module_Peripheral_Init>
 80038f2:	4e0d      	ldr	r6, [pc, #52]	; (8003928 <BOS_Init+0x118>)
 80038f4:	e7c2      	b.n	800387c <BOS_Init+0x6c>
		IND_ON();
 80038f6:	f00c ff5f 	bl	80107b8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 80038fa:	20fa      	movs	r0, #250	; 0xfa
 80038fc:	0040      	lsls	r0, r0, #1
 80038fe:	e7e4      	b.n	80038ca <BOS_Init+0xba>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 8003900:	4c0c      	ldr	r4, [pc, #48]	; (8003934 <BOS_Init+0x124>)
 8003902:	4d0d      	ldr	r5, [pc, #52]	; (8003938 <BOS_Init+0x128>)
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	42ab      	cmp	r3, r5
 8003908:	d004      	beq.n	8003914 <BOS_Init+0x104>
		if(EE_Format() == HAL_OK){
 800390a:	f007 fa4d 	bl	800ada8 <EE_Format>
 800390e:	2800      	cmp	r0, #0
 8003910:	d100      	bne.n	8003914 <BOS_Init+0x104>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003912:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003914:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <BOS_Init+0x12c>)
 800391a:	4a09      	ldr	r2, [pc, #36]	; (8003940 <BOS_Init+0x130>)
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	e7fd      	b.n	8003922 <BOS_Init+0x112>
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	20000b28 	.word	0x20000b28
 800392c:	20006874 	.word	0x20006874
 8003930:	20000aa8 	.word	0x20000aa8
 8003934:	20007ff0 	.word	0x20007ff0
 8003938:	beefdead 	.word	0xbeefdead
 800393c:	e000ed00 	.word	0xe000ed00
 8003940:	05fa0004 	.word	0x05fa0004

08003944 <Module_Init>:
void Module_Init(void){
 8003944:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003946:	f00b fa57 	bl	800edf8 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800394a:	f005 ffef 	bl	800992c <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 800394e:	f7ff ff5f 	bl	8003810 <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003952:	f003 fd3d 	bl	80073d0 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003956:	f009 fbbf 	bl	800d0d8 <osKernelStart>
}
 800395a:	bd10      	pop	{r4, pc}

0800395c <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 800395c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800395e:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003960:	4e12      	ldr	r6, [pc, #72]	; (80039ac <ExploreNeighbors+0x50>)
 8003962:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <ExploreNeighbors+0x54>)
			messageParams[1] =(uint8_t )myPN;
 8003964:	0035      	movs	r5, r6
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003966:	0007      	movs	r7, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003968:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 800396a:	4698      	mov	r8, r3
BOS_Status ExploreNeighbors(uint8_t ignore){
 800396c:	b500      	push	{lr}
			messageParams[1] =(uint8_t )myPN;
 800396e:	3524      	adds	r5, #36	; 0x24
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003970:	b082      	sub	sp, #8
		if(port != ignore){
 8003972:	42a7      	cmp	r7, r4
 8003974:	d011      	beq.n	800399a <ExploreNeighbors+0x3e>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003976:	4643      	mov	r3, r8
 8003978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397a:	2224      	movs	r2, #36	; 0x24
 800397c:	0a19      	lsrs	r1, r3, #8
			messageParams[1] =(uint8_t )myPN;
 800397e:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003980:	2303      	movs	r3, #3
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003982:	54b1      	strb	r1, [r6, r2]
			messageParams[2] =port;
 8003984:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003986:	2200      	movs	r2, #0
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	2100      	movs	r1, #0
 800398c:	3307      	adds	r3, #7
 800398e:	0020      	movs	r0, r4
 8003990:	f004 f96a 	bl	8007c68 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003994:	200a      	movs	r0, #10
 8003996:	f009 fba5 	bl	800d0e4 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 800399a:	3401      	adds	r4, #1
 800399c:	b2e4      	uxtb	r4, r4
 800399e:	2c06      	cmp	r4, #6
 80039a0:	d1e7      	bne.n	8003972 <ExploreNeighbors+0x16>
		}
	}
	
	return result;
}
 80039a2:	2000      	movs	r0, #0
 80039a4:	b002      	add	sp, #8
 80039a6:	bc04      	pop	{r2}
 80039a8:	4690      	mov	r8, r2
 80039aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ac:	20000b28 	.word	0x20000b28
 80039b0:	20000010 	.word	0x20000010

080039b4 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 80039b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039b6:	4657      	mov	r7, sl
 80039b8:	464e      	mov	r6, r9
 80039ba:	4645      	mov	r5, r8
 80039bc:	46de      	mov	lr, fp
 80039be:	b5e0      	push	{r5, r6, r7, lr}
 80039c0:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 80039c2:	466a      	mov	r2, sp
 80039c4:	4b4b      	ldr	r3, [pc, #300]	; (8003af4 <FindBroadcastRoutes+0x140>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 80039c6:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 80039c8:	781d      	ldrb	r5, [r3, #0]
 80039ca:	1deb      	adds	r3, r5, #7
 80039cc:	08db      	lsrs	r3, r3, #3
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	469d      	mov	sp, r3
 80039d4:	466e      	mov	r6, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 80039d6:	2d00      	cmp	r5, #0
 80039d8:	d00c      	beq.n	80039f4 <FindBroadcastRoutes+0x40>
		modules[m] =0;
 80039da:	2100      	movs	r1, #0
 80039dc:	1e6c      	subs	r4, r5, #1
 80039de:	4a46      	ldr	r2, [pc, #280]	; (8003af8 <FindBroadcastRoutes+0x144>)
 80039e0:	b2e4      	uxtb	r4, r4
 80039e2:	3401      	adds	r4, #1
 80039e4:	3254      	adds	r2, #84	; 0x54
 80039e6:	446c      	add	r4, sp
 80039e8:	7019      	strb	r1, [r3, #0]
 80039ea:	3301      	adds	r3, #1
		bcastRoutes[m] =0;
 80039ec:	8011      	strh	r1, [r2, #0]
 80039ee:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 80039f0:	42a3      	cmp	r3, r4
 80039f2:	d1f9      	bne.n	80039e8 <FindBroadcastRoutes+0x34>
	}
	modules[src - 1] =++level;					// Tag the source
 80039f4:	2301      	movs	r3, #1
 80039f6:	2216      	movs	r2, #22
 80039f8:	3801      	subs	r0, #1
 80039fa:	5433      	strb	r3, [r6, r0]
 80039fc:	4b3f      	ldr	r3, [pc, #252]	; (8003afc <FindBroadcastRoutes+0x148>)
 80039fe:	4342      	muls	r2, r0
 8003a00:	469c      	mov	ip, r3

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a02:	4b3d      	ldr	r3, [pc, #244]	; (8003af8 <FindBroadcastRoutes+0x144>)
 8003a04:	0040      	lsls	r0, r0, #1
 8003a06:	1818      	adds	r0, r3, r0
 8003a08:	2301      	movs	r3, #1
 8003a0a:	3202      	adds	r2, #2
 8003a0c:	4462      	add	r2, ip
 8003a0e:	469c      	mov	ip, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a10:	3301      	adds	r3, #1
	modules[src - 1] =++level;					// Tag the source
 8003a12:	2100      	movs	r1, #0
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a14:	2454      	movs	r4, #84	; 0x54
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a16:	469a      	mov	sl, r3
 8003a18:	46b3      	mov	fp, r6
 8003a1a:	607d      	str	r5, [r7, #4]
		if(array[src - 1][p]){
 8003a1c:	8813      	ldrh	r3, [r2, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00d      	beq.n	8003a3e <FindBroadcastRoutes+0x8a>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a22:	5b05      	ldrh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a24:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a26:	46a8      	mov	r8, r5
 8003a28:	4665      	mov	r5, ip
 8003a2a:	408d      	lsls	r5, r1
 8003a2c:	46a9      	mov	r9, r5
 8003a2e:	4645      	mov	r5, r8
 8003a30:	464e      	mov	r6, r9
 8003a32:	4335      	orrs	r5, r6
 8003a34:	5305      	strh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a36:	4655      	mov	r5, sl
 8003a38:	445b      	add	r3, fp
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	701d      	strb	r5, [r3, #0]
 8003a3e:	3101      	adds	r1, #1
 8003a40:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 8003a42:	2906      	cmp	r1, #6
 8003a44:	d1ea      	bne.n	8003a1c <FindBroadcastRoutes+0x68>
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a46:	2254      	movs	r2, #84	; 0x54
	++level;												// Move one level
 8003a48:	2302      	movs	r3, #2
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a4a:	4692      	mov	sl, r2
 8003a4c:	465e      	mov	r6, fp
	++level;												// Move one level
 8003a4e:	469b      	mov	fp, r3
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a50:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <FindBroadcastRoutes+0x144>)
 8003a52:	687d      	ldr	r5, [r7, #4]
 8003a54:	449a      	add	sl, r3
 8003a56:	4653      	mov	r3, sl
 8003a58:	46a8      	mov	r8, r5
 8003a5a:	465d      	mov	r5, fp
 8003a5c:	603b      	str	r3, [r7, #0]
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a5e:	4643      	mov	r3, r8
		++level;											// Move one level
 8003a60:	3501      	adds	r5, #1
 8003a62:	b2ed      	uxtb	r5, r5
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d03b      	beq.n	8003ae0 <FindBroadcastRoutes+0x12c>
 8003a68:	1e6b      	subs	r3, r5, #1
 8003a6a:	4699      	mov	r9, r3
		untaged =0;								// Reset the untaged counter
 8003a6c:	2300      	movs	r3, #0
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a6e:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003a70:	469c      	mov	ip, r3
 8003a72:	46ab      	mov	fp, r5
 8003a74:	e003      	b.n	8003a7e <FindBroadcastRoutes+0xca>
 8003a76:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a78:	b2d3      	uxtb	r3, r2
 8003a7a:	4598      	cmp	r8, r3
 8003a7c:	d92c      	bls.n	8003ad8 <FindBroadcastRoutes+0x124>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003a7e:	5cb3      	ldrb	r3, [r6, r2]
 8003a80:	454b      	cmp	r3, r9
 8003a82:	d1f8      	bne.n	8003a76 <FindBroadcastRoutes+0xc2>
 8003a84:	2116      	movs	r1, #22
 8003a86:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <FindBroadcastRoutes+0x14c>)
 8003a88:	4351      	muls	r1, r2
 8003a8a:	469a      	mov	sl, r3
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	4451      	add	r1, sl
 8003a90:	46e2      	mov	sl, ip
 8003a92:	4694      	mov	ip, r2
 8003a94:	0055      	lsls	r5, r2, #1
 8003a96:	607d      	str	r5, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003a98:	880b      	ldrh	r3, [r1, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d012      	beq.n	8003ac4 <FindBroadcastRoutes+0x110>
 8003a9e:	08db      	lsrs	r3, r3, #3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	5cf2      	ldrb	r2, [r6, r3]
 8003aa4:	2a00      	cmp	r2, #0
 8003aa6:	d10d      	bne.n	8003ac4 <FindBroadcastRoutes+0x110>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003aa8:	683c      	ldr	r4, [r7, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	5b15      	ldrh	r5, [r2, r4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4082      	lsls	r2, r0
 8003ab2:	4315      	orrs	r5, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	5315      	strh	r5, [r2, r4]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
						++untaged;
 8003ab8:	4654      	mov	r4, sl
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003aba:	465a      	mov	r2, fp
						++untaged;
 8003abc:	3401      	adds	r4, #1
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003abe:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003ac0:	b2e3      	uxtb	r3, r4
 8003ac2:	469a      	mov	sl, r3
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003ac8:	2806      	cmp	r0, #6
 8003aca:	d1e5      	bne.n	8003a98 <FindBroadcastRoutes+0xe4>
 8003acc:	4662      	mov	r2, ip
 8003ace:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003ad0:	b2d3      	uxtb	r3, r2
 8003ad2:	46d4      	mov	ip, sl
 8003ad4:	4598      	cmp	r8, r3
 8003ad6:	d8d2      	bhi.n	8003a7e <FindBroadcastRoutes+0xca>
					}
				}
			}
		}
	} while(untaged);
 8003ad8:	4663      	mov	r3, ip
 8003ada:	465d      	mov	r5, fp
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1be      	bne.n	8003a5e <FindBroadcastRoutes+0xaa>
	
	return result;
}
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b003      	add	sp, #12
 8003ae6:	bc3c      	pop	{r2, r3, r4, r5}
 8003ae8:	4690      	mov	r8, r2
 8003aea:	4699      	mov	r9, r3
 8003aec:	46a2      	mov	sl, r4
 8003aee:	46ab      	mov	fp, r5
 8003af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	20000010 	.word	0x20000010
 8003af8:	20000b28 	.word	0x20000b28
 8003afc:	20000ee4 	.word	0x20000ee4
 8003b00:	20000ee6 	.word	0x20000ee6

08003b04 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b06:	46de      	mov	lr, fp
 8003b08:	464e      	mov	r6, r9
 8003b0a:	4645      	mov	r5, r8
 8003b0c:	4657      	mov	r7, sl
 8003b0e:	b5e0      	push	{r5, r6, r7, lr}
 8003b10:	b091      	sub	sp, #68	; 0x44
#ifdef __N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003b12:	ac03      	add	r4, sp, #12
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003b14:	0005      	movs	r5, r0
 8003b16:	000e      	movs	r6, r1
 8003b18:	9101      	str	r1, [sp, #4]
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003b1a:	2232      	movs	r2, #50	; 0x32
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	0020      	movs	r0, r4
 8003b20:	f00e fd4a 	bl	80125b8 <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 8003b24:	221a      	movs	r2, #26
 8003b26:	2100      	movs	r1, #0
 8003b28:	4862      	ldr	r0, [pc, #392]	; (8003cb4 <FindRoute+0x1b0>)
 8003b2a:	f00e fd45 	bl	80125b8 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b2e:	2100      	movs	r1, #0
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b30:	2024      	movs	r0, #36	; 0x24
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b32:	4b61      	ldr	r3, [pc, #388]	; (8003cb8 <FindRoute+0x1b4>)
 8003b34:	1e6a      	subs	r2, r5, #1
 8003b36:	469c      	mov	ip, r3
 8003b38:	189b      	adds	r3, r3, r2
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b3a:	5419      	strb	r1, [r3, r0]
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b3c:	7219      	strb	r1, [r3, #8]
 8003b3e:	2316      	movs	r3, #22
 8003b40:	4353      	muls	r3, r2
 8003b42:	4a5e      	ldr	r2, [pc, #376]	; (8003cbc <FindRoute+0x1b8>)
 8003b44:	3302      	adds	r3, #2
 8003b46:	4693      	mov	fp, r2
 8003b48:	445b      	add	r3, fp
 8003b4a:	4699      	mov	r9, r3
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b4c:	001a      	movs	r2, r3
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 8003b4e:	3823      	subs	r0, #35	; 0x23
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003b50:	b2b1      	uxth	r1, r6
 8003b52:	8813      	ldrh	r3, [r2, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <FindRoute+0x5c>
 8003b58:	08db      	lsrs	r3, r3, #3
 8003b5a:	428b      	cmp	r3, r1
 8003b5c:	d100      	bne.n	8003b60 <FindRoute+0x5c>
 8003b5e:	e099      	b.n	8003c94 <FindRoute+0x190>
	for(int col =1; col <= 6; col++){
 8003b60:	3001      	adds	r0, #1
 8003b62:	3202      	adds	r2, #2
 8003b64:	2807      	cmp	r0, #7
 8003b66:	d1f4      	bne.n	8003b52 <FindRoute+0x4e>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 8003b68:	4b55      	ldr	r3, [pc, #340]	; (8003cc0 <FindRoute+0x1bc>)
 8003b6a:	7819      	ldrb	r1, [r3, #0]
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	2900      	cmp	r1, #0
 8003b70:	d100      	bne.n	8003b74 <FindRoute+0x70>
 8003b72:	e09a      	b.n	8003caa <FindRoute+0x1a6>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b74:	2208      	movs	r2, #8
 8003b76:	4462      	add	r2, ip
 8003b78:	4690      	mov	r8, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	4666      	mov	r6, ip
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b7e:	27ff      	movs	r7, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b80:	4692      	mov	sl, r2
 8003b82:	3624      	adds	r6, #36	; 0x24
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003b84:	429d      	cmp	r5, r3
 8003b86:	d005      	beq.n	8003b94 <FindRoute+0x90>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b88:	4640      	mov	r0, r8
 8003b8a:	1e5a      	subs	r2, r3, #1
 8003b8c:	5487      	strb	r7, [r0, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b8e:	4650      	mov	r0, sl
 8003b90:	18b2      	adds	r2, r6, r2
 8003b92:	7010      	strb	r0, [r2, #0]
	for(int i =1; i <= N; i++){
 8003b94:	3301      	adds	r3, #1
 8003b96:	428b      	cmp	r3, r1
 8003b98:	ddf4      	ble.n	8003b84 <FindRoute+0x80>
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	4463      	add	r3, ip
	uint8_t u =0;
 8003b9e:	2500      	movs	r5, #0
 8003ba0:	4698      	mov	r8, r3
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
 8003ba2:	2201      	movs	r2, #1
	
	for(int i =0; i < N; i++){
 8003ba4:	2300      	movs	r3, #0
		temp &=Q[i];
 8003ba6:	5ce0      	ldrb	r0, [r4, r3]
	for(int i =0; i < N; i++){
 8003ba8:	3301      	adds	r3, #1
		temp &=Q[i];
 8003baa:	4002      	ands	r2, r0
	for(int i =0; i < N; i++){
 8003bac:	428b      	cmp	r3, r1
 8003bae:	dbfa      	blt.n	8003ba6 <FindRoute+0xa2>
	while(!QnotEmpty(Q)){
 8003bb0:	2a00      	cmp	r2, #0
 8003bb2:	d000      	beq.n	8003bb6 <FindRoute+0xb2>
 8003bb4:	e07c      	b.n	8003cb0 <FindRoute+0x1ac>
 8003bb6:	4663      	mov	r3, ip
 8003bb8:	7a1a      	ldrb	r2, [r3, #8]
	if(!Q[0])						// Not visited yet
 8003bba:	7823      	ldrb	r3, [r4, #0]
		smallest =arr[0];
 8003bbc:	0010      	movs	r0, r2
	if(!Q[0])						// Not visited yet
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d000      	beq.n	8003bc4 <FindRoute+0xc0>
	uint8_t smallest =0xFF;
 8003bc2:	20ff      	movs	r0, #255	; 0xff
 8003bc4:	2500      	movs	r5, #0
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e001      	b.n	8003bce <FindRoute+0xca>
 8003bca:	4642      	mov	r2, r8
 8003bcc:	5c9a      	ldrb	r2, [r3, r2]
		if((arr[i] < smallest) && !Q[i]){
 8003bce:	4290      	cmp	r0, r2
 8003bd0:	d904      	bls.n	8003bdc <FindRoute+0xd8>
 8003bd2:	5ce6      	ldrb	r6, [r4, r3]
 8003bd4:	2e00      	cmp	r6, #0
 8003bd6:	d101      	bne.n	8003bdc <FindRoute+0xd8>
			index =i;
 8003bd8:	0010      	movs	r0, r2
 8003bda:	b2dd      	uxtb	r5, r3
	for(int i =0; i < N; i++){
 8003bdc:	3301      	adds	r3, #1
 8003bde:	428b      	cmp	r3, r1
 8003be0:	dbf3      	blt.n	8003bca <FindRoute+0xc6>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003be2:	3501      	adds	r5, #1
		if(u == desID){
 8003be4:	9b01      	ldr	r3, [sp, #4]
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003be6:	b2ed      	uxtb	r5, r5
		if(u == desID){
 8003be8:	429d      	cmp	r5, r3
 8003bea:	d023      	beq.n	8003c34 <FindRoute+0x130>
			Q[u - 1] =1;									// Remove u from Q
 8003bec:	2301      	movs	r3, #1
 8003bee:	1e6f      	subs	r7, r5, #1
 8003bf0:	55e3      	strb	r3, [r4, r7]
 8003bf2:	2316      	movs	r3, #22
 8003bf4:	465e      	mov	r6, fp
 8003bf6:	437b      	muls	r3, r7
 8003bf8:	360e      	adds	r6, #14
 8003bfa:	1c9a      	adds	r2, r3, #2
 8003bfc:	445a      	add	r2, fp
 8003bfe:	18f6      	adds	r6, r6, r3
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c00:	4467      	add	r7, ip
 8003c02:	9100      	str	r1, [sp, #0]
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003c04:	8813      	ldrh	r3, [r2, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00f      	beq.n	8003c2a <FindRoute+0x126>
				v =(array[u - 1][n] >> 3);
 8003c0a:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	5ce0      	ldrb	r0, [r4, r3]
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d109      	bne.n	8003c2a <FindRoute+0x126>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c16:	7a38      	ldrb	r0, [r7, #8]
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003c18:	4463      	add	r3, ip
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c1a:	3001      	adds	r0, #1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003c1c:	7a19      	ldrb	r1, [r3, #8]
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c1e:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003c20:	4281      	cmp	r1, r0
 8003c22:	d902      	bls.n	8003c2a <FindRoute+0x126>
						routePrev[v - 1] =u;
 8003c24:	2124      	movs	r1, #36	; 0x24
						routeDist[v - 1] =alt;
 8003c26:	7218      	strb	r0, [r3, #8]
						routePrev[v - 1] =u;
 8003c28:	545d      	strb	r5, [r3, r1]
 8003c2a:	3202      	adds	r2, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003c2c:	42b2      	cmp	r2, r6
 8003c2e:	d1e9      	bne.n	8003c04 <FindRoute+0x100>
 8003c30:	9900      	ldr	r1, [sp, #0]
 8003c32:	e7b6      	b.n	8003ba2 <FindRoute+0x9e>
 8003c34:	3b01      	subs	r3, #1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	4463      	add	r3, ip
 8003c3a:	5c9a      	ldrb	r2, [r3, r2]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2a00      	cmp	r2, #0
 8003c40:	d101      	bne.n	8003c46 <FindRoute+0x142>
 8003c42:	e00b      	b.n	8003c5c <FindRoute+0x158>
 8003c44:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003c46:	491b      	ldr	r1, [pc, #108]	; (8003cb4 <FindRoute+0x1b0>)
 8003c48:	1c58      	adds	r0, r3, #1
 8003c4a:	54cd      	strb	r5, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c4c:	4663      	mov	r3, ip
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	3323      	adds	r3, #35	; 0x23
 8003c52:	7819      	ldrb	r1, [r3, #0]
 8003c54:	0015      	movs	r5, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003c56:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c58:	2900      	cmp	r1, #0
 8003c5a:	d1f3      	bne.n	8003c44 <FindRoute+0x140>
	for(int col =1; col <= 6; col++){
 8003c5c:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003c5e:	464c      	mov	r4, r9
 8003c60:	9b01      	ldr	r3, [sp, #4]
 8003c62:	4463      	add	r3, ip
 8003c64:	8822      	ldrh	r2, [r4, #0]
 8003c66:	2a00      	cmp	r2, #0
 8003c68:	d008      	beq.n	8003c7c <FindRoute+0x178>
 8003c6a:	4d12      	ldr	r5, [pc, #72]	; (8003cb4 <FindRoute+0x1b0>)
 8003c6c:	79d9      	ldrb	r1, [r3, #7]
 8003c6e:	46ac      	mov	ip, r5
 8003c70:	4461      	add	r1, ip
 8003c72:	3901      	subs	r1, #1
 8003c74:	7809      	ldrb	r1, [r1, #0]
 8003c76:	08d2      	lsrs	r2, r2, #3
 8003c78:	4291      	cmp	r1, r2
 8003c7a:	d014      	beq.n	8003ca6 <FindRoute+0x1a2>
	for(int col =1; col <= 6; col++){
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	3402      	adds	r4, #2
 8003c80:	2807      	cmp	r0, #7
 8003c82:	d1ef      	bne.n	8003c64 <FindRoute+0x160>
	return 0;
 8003c84:	2000      	movs	r0, #0
}
 8003c86:	b011      	add	sp, #68	; 0x44
 8003c88:	bc3c      	pop	{r2, r3, r4, r5}
 8003c8a:	4690      	mov	r8, r2
 8003c8c:	4699      	mov	r9, r3
 8003c8e:	46a2      	mov	sl, r4
 8003c90:	46ab      	mov	fp, r5
 8003c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
			routeDist[desID - 1] =1;
 8003c94:	9901      	ldr	r1, [sp, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	000b      	movs	r3, r1
 8003c9a:	4463      	add	r3, ip
 8003c9c:	71da      	strb	r2, [r3, #7]
			route[0] =desID;
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <FindRoute+0x1b0>)
			return col;
 8003ca0:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8003ca2:	7019      	strb	r1, [r3, #0]
			return col;
 8003ca4:	e7ef      	b.n	8003c86 <FindRoute+0x182>
			return col;
 8003ca6:	b2c0      	uxtb	r0, r0
 8003ca8:	e7ed      	b.n	8003c86 <FindRoute+0x182>
	for(int i =1; i <= N; i++){
 8003caa:	425b      	negs	r3, r3
 8003cac:	2500      	movs	r5, #0
 8003cae:	e7c2      	b.n	8003c36 <FindRoute+0x132>
 8003cb0:	1e6b      	subs	r3, r5, #1
 8003cb2:	e7c0      	b.n	8003c36 <FindRoute+0x132>
 8003cb4:	2000693c 	.word	0x2000693c
 8003cb8:	20000ba8 	.word	0x20000ba8
 8003cbc:	20000ee4 	.word	0x20000ee4
 8003cc0:	20000010 	.word	0x20000010

08003cc4 <DisplayTopology>:

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cc4:	4b5b      	ldr	r3, [pc, #364]	; (8003e34 <DisplayTopology+0x170>)
void DisplayTopology(uint8_t port){
 8003cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cc8:	001c      	movs	r4, r3
void DisplayTopology(uint8_t port){
 8003cca:	4645      	mov	r5, r8
 8003ccc:	464e      	mov	r6, r9
 8003cce:	46de      	mov	lr, fp
 8003cd0:	4657      	mov	r7, sl
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cd2:	3440      	adds	r4, #64	; 0x40
 8003cd4:	0022      	movs	r2, r4
void DisplayTopology(uint8_t port){
 8003cd6:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cd8:	4698      	mov	r8, r3
 8003cda:	4b57      	ldr	r3, [pc, #348]	; (8003e38 <DisplayTopology+0x174>)
void DisplayTopology(uint8_t port){
 8003cdc:	0007      	movs	r7, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cde:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ce0:	c223      	stmia	r2!, {r0, r1, r5}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ce2:	2501      	movs	r5, #1
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ce4:	6819      	ldr	r1, [r3, #0]
void DisplayTopology(uint8_t port){
 8003ce6:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ce8:	6011      	str	r1, [r2, #0]
 8003cea:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cec:	426d      	negs	r5, r5
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cee:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cf0:	0021      	movs	r1, r4
 8003cf2:	2332      	movs	r3, #50	; 0x32
 8003cf4:	9500      	str	r5, [sp, #0]
 8003cf6:	2211      	movs	r2, #17
 8003cf8:	0038      	movs	r0, r7
 8003cfa:	f009 f859 	bl	800cdb0 <writePxMutex>
 8003cfe:	4b4f      	ldr	r3, [pc, #316]	; (8003e3c <DisplayTopology+0x178>)
 8003d00:	2601      	movs	r6, #1
 8003d02:	4699      	mov	r9, r3
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003d04:	0032      	movs	r2, r6
 8003d06:	4649      	mov	r1, r9
 8003d08:	0020      	movs	r0, r4
 8003d0a:	f00e fe4f 	bl	80129ac <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d0e:	0020      	movs	r0, r4
 8003d10:	f7fc fa02 	bl	8000118 <strlen>
 8003d14:	3601      	adds	r6, #1
 8003d16:	b282      	uxth	r2, r0
 8003d18:	9500      	str	r5, [sp, #0]
 8003d1a:	2332      	movs	r3, #50	; 0x32
 8003d1c:	0021      	movs	r1, r4
 8003d1e:	0038      	movs	r0, r7
 8003d20:	f009 f846 	bl	800cdb0 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003d24:	2e06      	cmp	r6, #6
 8003d26:	d1ed      	bne.n	8003d04 <DisplayTopology+0x40>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003d28:	2332      	movs	r3, #50	; 0x32
 8003d2a:	9500      	str	r5, [sp, #0]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	4944      	ldr	r1, [pc, #272]	; (8003e40 <DisplayTopology+0x17c>)
 8003d30:	0038      	movs	r0, r7
 8003d32:	f009 f83d 	bl	800cdb0 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003d36:	4b43      	ldr	r3, [pc, #268]	; (8003e44 <DisplayTopology+0x180>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d061      	beq.n	8003e02 <DisplayTopology+0x13e>
 8003d3e:	4b42      	ldr	r3, [pc, #264]	; (8003e48 <DisplayTopology+0x184>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d40:	4645      	mov	r5, r8
 8003d42:	4699      	mov	r9, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d44:	2301      	movs	r3, #1
 8003d46:	425b      	negs	r3, r3
 8003d48:	4698      	mov	r8, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003d4a:	4b40      	ldr	r3, [pc, #256]	; (8003e4c <DisplayTopology+0x188>)
	for(uint8_t row =0; row < N; row++){
 8003d4c:	2400      	movs	r4, #0
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003d4e:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d50:	3540      	adds	r5, #64	; 0x40
 8003d52:	1c63      	adds	r3, r4, #1
 8003d54:	001a      	movs	r2, r3
 8003d56:	493e      	ldr	r1, [pc, #248]	; (8003e50 <DisplayTopology+0x18c>)
 8003d58:	0028      	movs	r0, r5
 8003d5a:	469a      	mov	sl, r3
 8003d5c:	f00e fe26 	bl	80129ac <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d60:	0028      	movs	r0, r5
 8003d62:	f7fc f9d9 	bl	8000118 <strlen>
 8003d66:	4643      	mov	r3, r8
 8003d68:	b282      	uxth	r2, r0
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	0029      	movs	r1, r5
 8003d6e:	2332      	movs	r3, #50	; 0x32
 8003d70:	0038      	movs	r0, r7
 8003d72:	f009 f81d 	bl	800cdb0 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d76:	2316      	movs	r3, #22
 8003d78:	435c      	muls	r4, r3
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	5b1b      	ldrh	r3, [r3, r4]
 8003d7e:	2205      	movs	r2, #5
 8003d80:	0059      	lsls	r1, r3, #1
 8003d82:	18c9      	adds	r1, r1, r3
 8003d84:	4b33      	ldr	r3, [pc, #204]	; (8003e54 <DisplayTopology+0x190>)
 8003d86:	0049      	lsls	r1, r1, #1
 8003d88:	469c      	mov	ip, r3
 8003d8a:	0028      	movs	r0, r5
 8003d8c:	4461      	add	r1, ip
 8003d8e:	f00e fe62 	bl	8012a56 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003d92:	4643      	mov	r3, r8
 8003d94:	2205      	movs	r2, #5
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	0029      	movs	r1, r5
 8003d9a:	2332      	movs	r3, #50	; 0x32
 8003d9c:	0038      	movs	r0, r7
 8003d9e:	f009 f807 	bl	800cdb0 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003da2:	4643      	mov	r3, r8
 8003da4:	2201      	movs	r2, #1
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	492b      	ldr	r1, [pc, #172]	; (8003e58 <DisplayTopology+0x194>)
 8003daa:	2332      	movs	r3, #50	; 0x32
 8003dac:	0038      	movs	r0, r7
 8003dae:	f008 ffff 	bl	800cdb0 <writePxMutex>
 8003db2:	464b      	mov	r3, r9
 8003db4:	1ca6      	adds	r6, r4, #2
 8003db6:	330c      	adds	r3, #12
 8003db8:	444e      	add	r6, r9
 8003dba:	191c      	adds	r4, r3, r4
			if(!array[row][col])
 8003dbc:	8832      	ldrh	r2, [r6, #0]
 8003dbe:	2a00      	cmp	r2, #0
 8003dc0:	d12f      	bne.n	8003e22 <DisplayTopology+0x15e>
				sprintf(pcUserMessage,"%d\t",0);
 8003dc2:	4926      	ldr	r1, [pc, #152]	; (8003e5c <DisplayTopology+0x198>)
 8003dc4:	0028      	movs	r0, r5
 8003dc6:	f00e fdf1 	bl	80129ac <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003dca:	0028      	movs	r0, r5
 8003dcc:	f7fc f9a4 	bl	8000118 <strlen>
 8003dd0:	4643      	mov	r3, r8
 8003dd2:	b282      	uxth	r2, r0
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	0029      	movs	r1, r5
 8003dd8:	2332      	movs	r3, #50	; 0x32
 8003dda:	0038      	movs	r0, r7
 8003ddc:	3602      	adds	r6, #2
 8003dde:	f008 ffe7 	bl	800cdb0 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003de2:	42a6      	cmp	r6, r4
 8003de4:	d1ea      	bne.n	8003dbc <DisplayTopology+0xf8>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003de6:	4643      	mov	r3, r8
 8003de8:	2202      	movs	r2, #2
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	491c      	ldr	r1, [pc, #112]	; (8003e60 <DisplayTopology+0x19c>)
 8003dee:	2332      	movs	r3, #50	; 0x32
 8003df0:	0038      	movs	r0, r7
 8003df2:	f008 ffdd 	bl	800cdb0 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003df6:	4653      	mov	r3, sl
 8003df8:	b2dc      	uxtb	r4, r3
 8003dfa:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <DisplayTopology+0x180>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	42a3      	cmp	r3, r4
 8003e00:	d8a7      	bhi.n	8003d52 <DisplayTopology+0x8e>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003e02:	2301      	movs	r3, #1
 8003e04:	425b      	negs	r3, r3
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	3333      	adds	r3, #51	; 0x33
 8003e0c:	4915      	ldr	r1, [pc, #84]	; (8003e64 <DisplayTopology+0x1a0>)
 8003e0e:	0038      	movs	r0, r7
 8003e10:	f008 ffce 	bl	800cdb0 <writePxMutex>
}
 8003e14:	b003      	add	sp, #12
 8003e16:	bc3c      	pop	{r2, r3, r4, r5}
 8003e18:	4690      	mov	r8, r2
 8003e1a:	4699      	mov	r9, r3
 8003e1c:	46a2      	mov	sl, r4
 8003e1e:	46ab      	mov	fp, r5
 8003e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003e22:	2307      	movs	r3, #7
 8003e24:	4659      	mov	r1, fp
 8003e26:	4013      	ands	r3, r2
 8003e28:	0028      	movs	r0, r5
 8003e2a:	08d2      	lsrs	r2, r2, #3
 8003e2c:	f00e fdbe 	bl	80129ac <sprintf>
 8003e30:	e7cb      	b.n	8003dca <DisplayTopology+0x106>
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	20000ba8 	.word	0x20000ba8
 8003e38:	080174b4 	.word	0x080174b4
 8003e3c:	080174c8 	.word	0x080174c8
 8003e40:	08018354 	.word	0x08018354
 8003e44:	20000010 	.word	0x20000010
 8003e48:	20000ee4 	.word	0x20000ee4
 8003e4c:	080174e0 	.word	0x080174e0
 8003e50:	080174d0 	.word	0x080174d0
 8003e54:	08016dfc 	.word	0x08016dfc
 8003e58:	080174c4 	.word	0x080174c4
 8003e5c:	080174dc 	.word	0x080174dc
 8003e60:	080175ec 	.word	0x080175ec
 8003e64:	08018dc8 	.word	0x08018dc8

08003e68 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6a:	4645      	mov	r5, r8
 8003e6c:	46de      	mov	lr, fp
 8003e6e:	4657      	mov	r7, sl
 8003e70:	464e      	mov	r6, r9
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e72:	4934      	ldr	r1, [pc, #208]	; (8003f44 <DisplayPortsDir+0xdc>)
void DisplayPortsDir(uint8_t port){
 8003e74:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e76:	3140      	adds	r1, #64	; 0x40
 8003e78:	000a      	movs	r2, r1
 8003e7a:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <DisplayPortsDir+0xe0>)
void DisplayPortsDir(uint8_t port){
 8003e7c:	4682      	mov	sl, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e7e:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e80:	c231      	stmia	r2!, {r0, r4, r5}
 8003e82:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e84:	c231      	stmia	r2!, {r0, r4, r5}
 8003e86:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 8003e88:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e8a:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	425b      	negs	r3, r3
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	221b      	movs	r2, #27
 8003e94:	3333      	adds	r3, #51	; 0x33
 8003e96:	4650      	mov	r0, sl
 8003e98:	f008 ff8a 	bl	800cdb0 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e9c:	4b2b      	ldr	r3, [pc, #172]	; (8003f4c <DisplayPortsDir+0xe4>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d035      	beq.n	8003f10 <DisplayPortsDir+0xa8>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	4699      	mov	r9, r3
 8003ea8:	4b29      	ldr	r3, [pc, #164]	; (8003f50 <DisplayPortsDir+0xe8>)
 8003eaa:	4698      	mov	r8, r3
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003eac:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <DisplayPortsDir+0xec>)
 8003eae:	469b      	mov	fp, r3
 8003eb0:	464b      	mov	r3, r9
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003eb2:	2680      	movs	r6, #128	; 0x80
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003eb4:	4f23      	ldr	r7, [pc, #140]	; (8003f44 <DisplayPortsDir+0xdc>)
 8003eb6:	1e5d      	subs	r5, r3, #1
 8003eb8:	006d      	lsls	r5, r5, #1
	for(uint8_t i =1; i <= N; i++){
 8003eba:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003ebc:	0236      	lsls	r6, r6, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003ebe:	3740      	adds	r7, #64	; 0x40
 8003ec0:	e002      	b.n	8003ec8 <DisplayPortsDir+0x60>
 8003ec2:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003ec4:	2c0a      	cmp	r4, #10
 8003ec6:	d01b      	beq.n	8003f00 <DisplayPortsDir+0x98>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003ec8:	0031      	movs	r1, r6
 8003eca:	4642      	mov	r2, r8
 8003ecc:	4119      	asrs	r1, r3
 8003ece:	5b52      	ldrh	r2, [r2, r5]
 8003ed0:	1c5c      	adds	r4, r3, #1
 8003ed2:	4211      	tst	r1, r2
 8003ed4:	d0f5      	beq.n	8003ec2 <DisplayPortsDir+0x5a>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003ed6:	0023      	movs	r3, r4
 8003ed8:	464a      	mov	r2, r9
 8003eda:	4659      	mov	r1, fp
 8003edc:	0038      	movs	r0, r7
 8003ede:	f00e fd65 	bl	80129ac <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003ee2:	0038      	movs	r0, r7
 8003ee4:	f7fc f918 	bl	8000118 <strlen>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	425b      	negs	r3, r3
 8003eec:	b282      	uxth	r2, r0
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	0039      	movs	r1, r7
 8003ef2:	3333      	adds	r3, #51	; 0x33
 8003ef4:	4650      	mov	r0, sl
 8003ef6:	f008 ff5b 	bl	800cdb0 <writePxMutex>
 8003efa:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003efc:	2c0a      	cmp	r4, #10
 8003efe:	d1e3      	bne.n	8003ec8 <DisplayPortsDir+0x60>
	for(uint8_t i =1; i <= N; i++){
 8003f00:	464b      	mov	r3, r9
 8003f02:	3301      	adds	r3, #1
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	4699      	mov	r9, r3
 8003f08:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <DisplayPortsDir+0xe4>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	454b      	cmp	r3, r9
 8003f0e:	d2cf      	bcs.n	8003eb0 <DisplayPortsDir+0x48>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003f10:	490c      	ldr	r1, [pc, #48]	; (8003f44 <DisplayPortsDir+0xdc>)
 8003f12:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <DisplayPortsDir+0xf0>)
 8003f14:	3140      	adds	r1, #64	; 0x40
 8003f16:	000a      	movs	r2, r1
 8003f18:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003f1a:	c231      	stmia	r2!, {r0, r4, r5}
 8003f1c:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003f1e:	c231      	stmia	r2!, {r0, r4, r5}
 8003f20:	cb11      	ldmia	r3!, {r0, r4}
 8003f22:	c211      	stmia	r2!, {r0, r4}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f24:	2301      	movs	r3, #1
 8003f26:	425b      	negs	r3, r3
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	221f      	movs	r2, #31
 8003f2c:	3333      	adds	r3, #51	; 0x33
 8003f2e:	4650      	mov	r0, sl
 8003f30:	f008 ff3e 	bl	800cdb0 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003f34:	b003      	add	sp, #12
 8003f36:	bc3c      	pop	{r2, r3, r4, r5}
 8003f38:	4690      	mov	r8, r2
 8003f3a:	4699      	mov	r9, r3
 8003f3c:	46a2      	mov	sl, r4
 8003f3e:	46ab      	mov	fp, r5
 8003f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	20000ba8 	.word	0x20000ba8
 8003f48:	080174e8 	.word	0x080174e8
 8003f4c:	20000010 	.word	0x20000010
 8003f50:	20006d34 	.word	0x20006d34
 8003f54:	08017504 	.word	0x08017504
 8003f58:	08017518 	.word	0x08017518

08003f5c <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f5e:	46de      	mov	lr, fp
 8003f60:	464e      	mov	r6, r9
 8003f62:	4645      	mov	r5, r8
 8003f64:	4657      	mov	r7, sl
 8003f66:	b5e0      	push	{r5, r6, r7, lr}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f6c:	f009 f9c2 	bl	800d2f4 <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 8003f70:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f72:	0004      	movs	r4, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f74:	4d98      	ldr	r5, [pc, #608]	; (80041d8 <DisplayModuleStatus+0x27c>)
	strcpy((char* )pcOutputString,"");
 8003f76:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f78:	4b98      	ldr	r3, [pc, #608]	; (80041dc <DisplayModuleStatus+0x280>)
 8003f7a:	3540      	adds	r5, #64	; 0x40
 8003f7c:	781a      	ldrb	r2, [r3, #0]
 8003f7e:	4998      	ldr	r1, [pc, #608]	; (80041e0 <DisplayModuleStatus+0x284>)
 8003f80:	0028      	movs	r0, r5
 8003f82:	f00e fd13 	bl	80129ac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f86:	0029      	movs	r1, r5
 8003f88:	0020      	movs	r0, r4
 8003f8a:	f00e fd2f 	bl	80129ec <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f8e:	4b95      	ldr	r3, [pc, #596]	; (80041e4 <DisplayModuleStatus+0x288>)
 8003f90:	4995      	ldr	r1, [pc, #596]	; (80041e8 <DisplayModuleStatus+0x28c>)
 8003f92:	7c1a      	ldrb	r2, [r3, #16]
 8003f94:	0028      	movs	r0, r5
 8003f96:	4698      	mov	r8, r3
 8003f98:	f00e fd08 	bl	80129ac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f9c:	0029      	movs	r1, r5
 8003f9e:	0020      	movs	r0, r4
 8003fa0:	f00e fd24 	bl	80129ec <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003fa4:	2306      	movs	r3, #6
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	4990      	ldr	r1, [pc, #576]	; (80041ec <DisplayModuleStatus+0x290>)
 8003fac:	3b04      	subs	r3, #4
 8003fae:	0028      	movs	r0, r5
 8003fb0:	f00e fcfc 	bl	80129ac <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003fb4:	0029      	movs	r1, r5
 8003fb6:	0020      	movs	r0, r4
 8003fb8:	f00e fd18 	bl	80129ec <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003fbc:	4a8c      	ldr	r2, [pc, #560]	; (80041f0 <DisplayModuleStatus+0x294>)
 8003fbe:	498d      	ldr	r1, [pc, #564]	; (80041f4 <DisplayModuleStatus+0x298>)
 8003fc0:	0028      	movs	r0, r5
 8003fc2:	f00e fcf3 	bl	80129ac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fc6:	0029      	movs	r1, r5
 8003fc8:	0020      	movs	r0, r4
 8003fca:	f00e fd0f 	bl	80129ec <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003fce:	4a8a      	ldr	r2, [pc, #552]	; (80041f8 <DisplayModuleStatus+0x29c>)
 8003fd0:	498a      	ldr	r1, [pc, #552]	; (80041fc <DisplayModuleStatus+0x2a0>)
 8003fd2:	0028      	movs	r0, r5
 8003fd4:	f00e fcea 	bl	80129ac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fd8:	0029      	movs	r1, r5
 8003fda:	0020      	movs	r0, r4
 8003fdc:	f00e fd06 	bl	80129ec <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003fe0:	002a      	movs	r2, r5
 8003fe2:	4b87      	ldr	r3, [pc, #540]	; (8004200 <DisplayModuleStatus+0x2a4>)
 8003fe4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fe6:	c243      	stmia	r2!, {r0, r1, r6}
 8003fe8:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 8003fea:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003fec:	6011      	str	r1, [r2, #0]
 8003fee:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 8003ff0:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003ff2:	8091      	strh	r1, [r2, #4]
 8003ff4:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003ff6:	0029      	movs	r1, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003ff8:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003ffa:	f00e fcf7 	bl	80129ec <strcat>
 8003ffe:	4b81      	ldr	r3, [pc, #516]	; (8004204 <DisplayModuleStatus+0x2a8>)
 8004000:	4699      	mov	r9, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8004002:	4b81      	ldr	r3, [pc, #516]	; (8004208 <DisplayModuleStatus+0x2ac>)
 8004004:	469a      	mov	sl, r3
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
				break;
			case PORTBUTTON:
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004006:	4b81      	ldr	r3, [pc, #516]	; (800420c <DisplayModuleStatus+0x2b0>)
 8004008:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 800400a:	0032      	movs	r2, r6
 800400c:	4649      	mov	r1, r9
 800400e:	0028      	movs	r0, r5
 8004010:	f00e fccc 	bl	80129ac <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004014:	0029      	movs	r1, r5
 8004016:	0020      	movs	r0, r4
 8004018:	f00e fce8 	bl	80129ec <strcat>
		switch(portStatus[i]){
 800401c:	4643      	mov	r3, r8
 800401e:	3314      	adds	r3, #20
 8004020:	5cf3      	ldrb	r3, [r6, r3]
 8004022:	2b04      	cmp	r3, #4
 8004024:	d80b      	bhi.n	800403e <DisplayModuleStatus+0xe2>
 8004026:	4652      	mov	r2, sl
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	58d3      	ldr	r3, [r2, r3]
 800402c:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 800402e:	002a      	movs	r2, r5
 8004030:	4b77      	ldr	r3, [pc, #476]	; (8004210 <DisplayModuleStatus+0x2b4>)
 8004032:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004034:	c283      	stmia	r2!, {r0, r1, r7}
 8004036:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004038:	c283      	stmia	r2!, {r0, r1, r7}
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	8013      	strh	r3, [r2, #0]
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 800403e:	0029      	movs	r1, r5
 8004040:	0020      	movs	r0, r4
 8004042:	3601      	adds	r6, #1
 8004044:	f00e fcd2 	bl	80129ec <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004048:	2e06      	cmp	r6, #6
 800404a:	d1de      	bne.n	800400a <DisplayModuleStatus+0xae>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800404c:	002a      	movs	r2, r5
 800404e:	4b71      	ldr	r3, [pc, #452]	; (8004214 <DisplayModuleStatus+0x2b8>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004050:	46a0      	mov	r8, r4
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8004052:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004054:	c243      	stmia	r2!, {r0, r1, r6}
 8004056:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004058:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 800405a:	0029      	movs	r1, r5
 800405c:	0020      	movs	r0, r4
 800405e:	f00e fcc5 	bl	80129ec <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004062:	4b6d      	ldr	r3, [pc, #436]	; (8004218 <DisplayModuleStatus+0x2bc>)
 8004064:	4e6d      	ldr	r6, [pc, #436]	; (800421c <DisplayModuleStatus+0x2c0>)
 8004066:	469b      	mov	fp, r3
 8004068:	4b6d      	ldr	r3, [pc, #436]	; (8004220 <DisplayModuleStatus+0x2c4>)
	strcat((char* )pcOutputString,pcUserMessage);
 800406a:	2501      	movs	r5, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 800406c:	469a      	mov	sl, r3
 800406e:	e01d      	b.n	80040ac <DisplayModuleStatus+0x150>
 8004070:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004072:	f005 fe6f 	bl	8009d54 <GetPort>
 8004076:	465a      	mov	r2, fp
 8004078:	00ab      	lsls	r3, r5, #2
 800407a:	3b04      	subs	r3, #4
 800407c:	0004      	movs	r4, r0
 800407e:	58d0      	ldr	r0, [r2, r3]
 8004080:	f005 fe68 	bl	8009d54 <GetPort>
 8004084:	2340      	movs	r3, #64	; 0x40
 8004086:	4699      	mov	r9, r3
 8004088:	4b53      	ldr	r3, [pc, #332]	; (80041d8 <DisplayModuleStatus+0x27c>)
 800408a:	002a      	movs	r2, r5
 800408c:	469c      	mov	ip, r3
 800408e:	44e1      	add	r9, ip
 8004090:	9000      	str	r0, [sp, #0]
 8004092:	0023      	movs	r3, r4
 8004094:	4651      	mov	r1, sl
 8004096:	4648      	mov	r0, r9
 8004098:	f00e fc88 	bl	80129ac <sprintf>
 800409c:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 800409e:	4649      	mov	r1, r9
 80040a0:	4640      	mov	r0, r8
 80040a2:	f00e fca3 	bl	80129ec <strcat>
 80040a6:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80040a8:	2d07      	cmp	r5, #7
 80040aa:	d011      	beq.n	80040d0 <DisplayModuleStatus+0x174>
		if(streamDMA[i - 1].Instance == 0){
 80040ac:	6833      	ldr	r3, [r6, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1de      	bne.n	8004070 <DisplayModuleStatus+0x114>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80040b2:	4c49      	ldr	r4, [pc, #292]	; (80041d8 <DisplayModuleStatus+0x27c>)
 80040b4:	002a      	movs	r2, r5
 80040b6:	3440      	adds	r4, #64	; 0x40
 80040b8:	495a      	ldr	r1, [pc, #360]	; (8004224 <DisplayModuleStatus+0x2c8>)
 80040ba:	0020      	movs	r0, r4
 80040bc:	f00e fc76 	bl	80129ac <sprintf>
 80040c0:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 80040c2:	0021      	movs	r1, r4
 80040c4:	4640      	mov	r0, r8
 80040c6:	f00e fc91 	bl	80129ec <strcat>
 80040ca:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80040cc:	2d07      	cmp	r5, #7
 80040ce:	d1ed      	bne.n	80040ac <DisplayModuleStatus+0x150>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 80040d0:	4640      	mov	r0, r8
 80040d2:	f7fc f821 	bl	8000118 <strlen>
 80040d6:	4644      	mov	r4, r8
 80040d8:	0005      	movs	r5, r0
 80040da:	4b53      	ldr	r3, [pc, #332]	; (8004228 <DisplayModuleStatus+0x2cc>)
 80040dc:	2202      	movs	r2, #2
 80040de:	0019      	movs	r1, r3
 80040e0:	1820      	adds	r0, r4, r0
 80040e2:	4698      	mov	r8, r3
 80040e4:	f00e fa5f 	bl	80125a6 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 80040e8:	1ca8      	adds	r0, r5, #2
 80040ea:	221d      	movs	r2, #29
 80040ec:	1820      	adds	r0, r4, r0
 80040ee:	494f      	ldr	r1, [pc, #316]	; (800422c <DisplayModuleStatus+0x2d0>)
 80040f0:	f00e fa59 	bl	80125a6 <memcpy>
	temp =strlen((char* )pcOutputString);
 80040f4:	231e      	movs	r3, #30
 80040f6:	469b      	mov	fp, r3
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
		{
			sprintf(pcUserMessage,"P%d ",p);
 80040f8:	4b4d      	ldr	r3, [pc, #308]	; (8004230 <DisplayModuleStatus+0x2d4>)
	temp =strlen((char* )pcOutputString);
 80040fa:	44ab      	add	fp, r5
			sprintf(pcUserMessage,"P%d ",p);
 80040fc:	4699      	mov	r9, r3
 80040fe:	2340      	movs	r3, #64	; 0x40
 8004100:	469a      	mov	sl, r3
 8004102:	4b35      	ldr	r3, [pc, #212]	; (80041d8 <DisplayModuleStatus+0x27c>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004104:	2580      	movs	r5, #128	; 0x80
			sprintf(pcUserMessage,"P%d ",p);
 8004106:	469c      	mov	ip, r3
	temp =strlen((char* )pcOutputString);
 8004108:	2200      	movs	r2, #0
 800410a:	4e4a      	ldr	r6, [pc, #296]	; (8004234 <DisplayModuleStatus+0x2d8>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800410c:	022d      	lsls	r5, r5, #8
			sprintf(pcUserMessage,"P%d ",p);
 800410e:	44e2      	add	sl, ip
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004110:	0029      	movs	r1, r5
 8004112:	4111      	asrs	r1, r2
 8004114:	4b31      	ldr	r3, [pc, #196]	; (80041dc <DisplayModuleStatus+0x280>)
 8004116:	1c57      	adds	r7, r2, #1
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	3b01      	subs	r3, #1
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	5af3      	ldrh	r3, [r6, r3]
 8004120:	4219      	tst	r1, r3
 8004122:	d148      	bne.n	80041b6 <DisplayModuleStatus+0x25a>
 8004124:	003a      	movs	r2, r7
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004126:	2f05      	cmp	r7, #5
 8004128:	d1f2      	bne.n	8004110 <DisplayModuleStatus+0x1b4>
			strcat((char* )pcOutputString,pcUserMessage);
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 800412a:	0020      	movs	r0, r4
 800412c:	f7fb fff4 	bl	8000118 <strlen>
 8004130:	465b      	mov	r3, fp
 8004132:	b29b      	uxth	r3, r3
 8004134:	0005      	movs	r5, r0
 8004136:	1820      	adds	r0, r4, r0
 8004138:	42ab      	cmp	r3, r5
 800413a:	d046      	beq.n	80041ca <DisplayModuleStatus+0x26e>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 800413c:	2203      	movs	r2, #3
 800413e:	4641      	mov	r1, r8
 8004140:	f00e fa31 	bl	80125a6 <memcpy>
	
	/* Display output */
	if(port)
 8004144:	9b03      	ldr	r3, [sp, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <DisplayModuleStatus+0x206>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800414a:	0020      	movs	r0, r4
 800414c:	f7fb ffe4 	bl	8000118 <strlen>
 8004150:	2301      	movs	r3, #1
 8004152:	425b      	negs	r3, r3
 8004154:	b282      	uxth	r2, r0
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	0021      	movs	r1, r4
 800415a:	3333      	adds	r3, #51	; 0x33
 800415c:	9803      	ldr	r0, [sp, #12]
 800415e:	f008 fe27 	bl	800cdb0 <writePxMutex>
	
}
 8004162:	b005      	add	sp, #20
 8004164:	bc3c      	pop	{r2, r3, r4, r5}
 8004166:	4690      	mov	r8, r2
 8004168:	4699      	mov	r9, r3
 800416a:	46a2      	mov	sl, r4
 800416c:	46ab      	mov	fp, r5
 800416e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 8004170:	002a      	movs	r2, r5
 8004172:	4b31      	ldr	r3, [pc, #196]	; (8004238 <DisplayModuleStatus+0x2dc>)
 8004174:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004176:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 8004178:	e761      	b.n	800403e <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 800417a:	002a      	movs	r2, r5
 800417c:	4b2f      	ldr	r3, [pc, #188]	; (800423c <DisplayModuleStatus+0x2e0>)
 800417e:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004180:	c283      	stmia	r2!, {r0, r1, r7}
 8004182:	cb03      	ldmia	r3!, {r0, r1}
 8004184:	c203      	stmia	r2!, {r0, r1}
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	7013      	strb	r3, [r2, #0]
				break;
 800418a:	e758      	b.n	800403e <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 800418c:	002b      	movs	r3, r5
 800418e:	465a      	mov	r2, fp
 8004190:	ca83      	ldmia	r2!, {r0, r1, r7}
 8004192:	c383      	stmia	r3!, {r0, r1, r7}
 8004194:	ca83      	ldmia	r2!, {r0, r1, r7}
 8004196:	c383      	stmia	r3!, {r0, r1, r7}
 8004198:	6811      	ldr	r1, [r2, #0]
 800419a:	6019      	str	r1, [r3, #0]
 800419c:	8891      	ldrh	r1, [r2, #4]
 800419e:	8099      	strh	r1, [r3, #4]
 80041a0:	7992      	ldrb	r2, [r2, #6]
 80041a2:	719a      	strb	r2, [r3, #6]
				break;
 80041a4:	e74b      	b.n	800403e <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Free\n\r");
 80041a6:	4b26      	ldr	r3, [pc, #152]	; (8004240 <DisplayModuleStatus+0x2e4>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	602a      	str	r2, [r5, #0]
 80041ac:	889a      	ldrh	r2, [r3, #4]
 80041ae:	80aa      	strh	r2, [r5, #4]
 80041b0:	799b      	ldrb	r3, [r3, #6]
 80041b2:	71ab      	strb	r3, [r5, #6]
				break;
 80041b4:	e743      	b.n	800403e <DisplayModuleStatus+0xe2>
			sprintf(pcUserMessage,"P%d ",p);
 80041b6:	4649      	mov	r1, r9
 80041b8:	003a      	movs	r2, r7
 80041ba:	4650      	mov	r0, sl
 80041bc:	f00e fbf6 	bl	80129ac <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80041c0:	4651      	mov	r1, sl
 80041c2:	0020      	movs	r0, r4
 80041c4:	f00e fc12 	bl	80129ec <strcat>
 80041c8:	e7ac      	b.n	8004124 <DisplayModuleStatus+0x1c8>
		strcat((char* )pcOutputString,"None");
 80041ca:	2205      	movs	r2, #5
 80041cc:	491d      	ldr	r1, [pc, #116]	; (8004244 <DisplayModuleStatus+0x2e8>)
 80041ce:	f00e f9ea 	bl	80125a6 <memcpy>
 80041d2:	1d28      	adds	r0, r5, #4
 80041d4:	1820      	adds	r0, r4, r0
 80041d6:	e7b1      	b.n	800413c <DisplayModuleStatus+0x1e0>
 80041d8:	20000ba8 	.word	0x20000ba8
 80041dc:	20000aa8 	.word	0x20000aa8
 80041e0:	08017538 	.word	0x08017538
 80041e4:	20000c28 	.word	0x20000c28
 80041e8:	08017554 	.word	0x08017554
 80041ec:	08017570 	.word	0x08017570
 80041f0:	08017590 	.word	0x08017590
 80041f4:	0801759c 	.word	0x0801759c
 80041f8:	080175b4 	.word	0x080175b4
 80041fc:	080175c0 	.word	0x080175c0
 8004200:	080175dc 	.word	0x080175dc
 8004204:	080175f0 	.word	0x080175f0
 8004208:	08016d50 	.word	0x08016d50
 800420c:	08017640 	.word	0x08017640
 8004210:	08017624 	.word	0x08017624
 8004214:	08017660 	.word	0x08017660
 8004218:	20001860 	.word	0x20001860
 800421c:	20002084 	.word	0x20002084
 8004220:	08017694 	.word	0x08017694
 8004224:	08017678 	.word	0x08017678
 8004228:	080175ec 	.word	0x080175ec
 800422c:	080176c4 	.word	0x080176c4
 8004230:	080176e4 	.word	0x080176e4
 8004234:	20006d34 	.word	0x20006d34
 8004238:	08017618 	.word	0x08017618
 800423c:	08017600 	.word	0x08017600
 8004240:	080175f8 	.word	0x080175f8
 8004244:	080176ec 	.word	0x080176ec

08004248 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800424a:	46c6      	mov	lr, r8
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 800424c:	4929      	ldr	r1, [pc, #164]	; (80042f4 <GetID+0xac>)
int16_t GetID(char *string){
 800424e:	b500      	push	{lr}
 8004250:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 8004252:	f7fb ff57 	bl	8000104 <strcmp>
 8004256:	2800      	cmp	r0, #0
 8004258:	d02c      	beq.n	80042b4 <GetID+0x6c>
		return myID;
	else if(!strcmp(string,"all"))
 800425a:	4927      	ldr	r1, [pc, #156]	; (80042f8 <GetID+0xb0>)
 800425c:	0030      	movs	r0, r6
 800425e:	f7fb ff51 	bl	8000104 <strcmp>
 8004262:	2800      	cmp	r0, #0
 8004264:	d02b      	beq.n	80042be <GetID+0x76>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 8004266:	7833      	ldrb	r3, [r6, #0]
 8004268:	4698      	mov	r8, r3
 800426a:	2b23      	cmp	r3, #35	; 0x23
 800426c:	d030      	beq.n	80042d0 <GetID+0x88>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 800426e:	4b23      	ldr	r3, [pc, #140]	; (80042fc <GetID+0xb4>)
 8004270:	781f      	ldrb	r7, [r3, #0]
 8004272:	2f00      	cmp	r7, #0
 8004274:	d00f      	beq.n	8004296 <GetID+0x4e>
 8004276:	2400      	movs	r4, #0
 8004278:	4d21      	ldr	r5, [pc, #132]	; (8004300 <GetID+0xb8>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 800427a:	0029      	movs	r1, r5
 800427c:	0030      	movs	r0, r6
 800427e:	f7fb ff41 	bl	8000104 <strcmp>
 8004282:	2800      	cmp	r0, #0
 8004284:	d102      	bne.n	800428c <GetID+0x44>
 8004286:	4643      	mov	r3, r8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d11a      	bne.n	80042c2 <GetID+0x7a>
		for(i =0; i < N; i++){
 800428c:	3401      	adds	r4, #1
 800428e:	b2e4      	uxtb	r4, r4
 8004290:	350a      	adds	r5, #10
 8004292:	42a7      	cmp	r7, r4
 8004294:	d1f1      	bne.n	800427a <GetID+0x32>
 8004296:	2400      	movs	r4, #0
 8004298:	4d1a      	ldr	r5, [pc, #104]	; (8004304 <GetID+0xbc>)
 800429a:	3538      	adds	r5, #56	; 0x38
				return (i);
		}
		
		/* Check group alias */
		for(i =0; i < MaxNumOfGroups; i++){
			if(!strcmp(string,groupAlias[i]))
 800429c:	0029      	movs	r1, r5
 800429e:	0030      	movs	r0, r6
 80042a0:	f7fb ff30 	bl	8000104 <strcmp>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d00e      	beq.n	80042c6 <GetID+0x7e>
 80042a8:	3401      	adds	r4, #1
 80042aa:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 80042ac:	2c0a      	cmp	r4, #10
 80042ae:	d1f5      	bne.n	800429c <GetID+0x54>
				return (BOS_MULTICAST | (i << 8));
		}
		
		return BOS_ERR_WrongName;
 80042b0:	2064      	movs	r0, #100	; 0x64
 80042b2:	e001      	b.n	80042b8 <GetID+0x70>
		return myID;
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <GetID+0xbc>)
 80042b6:	7818      	ldrb	r0, [r3, #0]
	}
	
}
 80042b8:	bc04      	pop	{r2}
 80042ba:	4690      	mov	r8, r2
 80042bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_BROADCAST;
 80042be:	20ff      	movs	r0, #255	; 0xff
 80042c0:	e7fa      	b.n	80042b8 <GetID+0x70>
				return (i);
 80042c2:	b220      	sxth	r0, r4
 80042c4:	e7f8      	b.n	80042b8 <GetID+0x70>
				return (BOS_MULTICAST | (i << 8));
 80042c6:	20fe      	movs	r0, #254	; 0xfe
 80042c8:	0224      	lsls	r4, r4, #8
 80042ca:	4320      	orrs	r0, r4
 80042cc:	b200      	sxth	r0, r0
 80042ce:	e7f3      	b.n	80042b8 <GetID+0x70>
		id =atol(string + 1);
 80042d0:	1c70      	adds	r0, r6, #1
 80042d2:	f00d fea8 	bl	8012026 <atol>
 80042d6:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <GetID+0x9c>
 80042dc:	4a07      	ldr	r2, [pc, #28]	; (80042fc <GetID+0xb4>)
 80042de:	7812      	ldrb	r2, [r2, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d204      	bcs.n	80042ee <GetID+0xa6>
		else if(id == myID)
 80042e4:	4a07      	ldr	r2, [pc, #28]	; (8004304 <GetID+0xbc>)
			return BOS_ERR_WrongID;
 80042e6:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80042e8:	7812      	ldrb	r2, [r2, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d1e4      	bne.n	80042b8 <GetID+0x70>
			return myID;
 80042ee:	b218      	sxth	r0, r3
 80042f0:	e7e2      	b.n	80042b8 <GetID+0x70>
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	080176f4 	.word	0x080176f4
 80042f8:	080176f8 	.word	0x080176f8
 80042fc:	20000010 	.word	0x20000010
 8004300:	20000dd4 	.word	0x20000dd4
 8004304:	20000aa8 	.word	0x20000aa8

08004308 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800430a:	46c6      	mov	lr, r8
 800430c:	4c2c      	ldr	r4, [pc, #176]	; (80043c0 <NameModule+0xb8>)
 800430e:	0007      	movs	r7, r0
 8004310:	0026      	movs	r6, r4
 8004312:	000d      	movs	r5, r1
 8004314:	b500      	push	{lr}
 8004316:	3610      	adds	r6, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 8004318:	0021      	movs	r1, r4
 800431a:	0028      	movs	r0, r5
 800431c:	f7fb fef2 	bl	8000104 <strcmp>
 8004320:	2800      	cmp	r0, #0
 8004322:	d040      	beq.n	80043a6 <NameModule+0x9e>
 8004324:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 8004326:	42a6      	cmp	r6, r4
 8004328:	d1f6      	bne.n	8004318 <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 800432a:	4b26      	ldr	r3, [pc, #152]	; (80043c4 <NameModule+0xbc>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d914      	bls.n	800435c <NameModule+0x54>
 8004332:	4c25      	ldr	r4, [pc, #148]	; (80043c8 <NameModule+0xc0>)
 8004334:	009e      	lsls	r6, r3, #2
 8004336:	18f6      	adds	r6, r6, r3
 8004338:	0023      	movs	r3, r4
 800433a:	0076      	lsls	r6, r6, #1
 800433c:	3b0a      	subs	r3, #10
 800433e:	18f6      	adds	r6, r6, r3
 8004340:	e002      	b.n	8004348 <NameModule+0x40>
 8004342:	340a      	adds	r4, #10
 8004344:	42b4      	cmp	r4, r6
 8004346:	d009      	beq.n	800435c <NameModule+0x54>
		if(!strcmp(alias,moduleAlias[i]))
 8004348:	0021      	movs	r1, r4
 800434a:	0028      	movs	r0, r5
 800434c:	f7fb feda 	bl	8000104 <strcmp>
 8004350:	2800      	cmp	r0, #0
 8004352:	d1f6      	bne.n	8004342 <NameModule+0x3a>
			return BOS_ERR_ExistingAlias;
 8004354:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 8004356:	bc04      	pop	{r2}
 8004358:	4690      	mov	r8, r2
 800435a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800435c:	4e1b      	ldr	r6, [pc, #108]	; (80043cc <NameModule+0xc4>)
 800435e:	0034      	movs	r4, r6
 8004360:	369c      	adds	r6, #156	; 0x9c
 8004362:	3438      	adds	r4, #56	; 0x38
		if(!strcmp(alias,groupAlias[i]))
 8004364:	0021      	movs	r1, r4
 8004366:	0028      	movs	r0, r5
 8004368:	f7fb fecc 	bl	8000104 <strcmp>
 800436c:	2800      	cmp	r0, #0
 800436e:	d0f1      	beq.n	8004354 <NameModule+0x4c>
 8004370:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004372:	42a6      	cmp	r6, r4
 8004374:	d1f6      	bne.n	8004364 <NameModule+0x5c>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004376:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <NameModule+0xc8>)
 8004378:	4c16      	ldr	r4, [pc, #88]	; (80043d4 <NameModule+0xcc>)
 800437a:	4698      	mov	r8, r3
 800437c:	61dc      	str	r4, [r3, #28]
 800437e:	e004      	b.n	800438a <NameModule+0x82>
 8004380:	4643      	mov	r3, r8
 8004382:	6864      	ldr	r4, [r4, #4]
 8004384:	61dc      	str	r4, [r3, #28]
 8004386:	2c00      	cmp	r4, #0
 8004388:	d00f      	beq.n	80043aa <NameModule+0xa2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	681e      	ldr	r6, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800438e:	0030      	movs	r0, r6
 8004390:	f7fb fec2 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004394:	0031      	movs	r1, r6
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004396:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004398:	0028      	movs	r0, r5
 800439a:	f00e fb4b 	bl	8012a34 <strncmp>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d1ee      	bne.n	8004380 <NameModule+0x78>
			return BOS_ERR_ExistingCmd;
 80043a2:	2008      	movs	r0, #8
 80043a4:	e7d7      	b.n	8004356 <NameModule+0x4e>
			return BOS_ERR_Keyword;
 80043a6:	2006      	movs	r0, #6
 80043a8:	e7d5      	b.n	8004356 <NameModule+0x4e>
	strcpy(moduleAlias[module],alias);
 80043aa:	00b8      	lsls	r0, r7, #2
 80043ac:	19c0      	adds	r0, r0, r7
 80043ae:	4f0a      	ldr	r7, [pc, #40]	; (80043d8 <NameModule+0xd0>)
 80043b0:	0040      	lsls	r0, r0, #1
 80043b2:	0029      	movs	r1, r5
 80043b4:	19c0      	adds	r0, r0, r7
 80043b6:	f00e fb35 	bl	8012a24 <strcpy>
	result =SaveEEalias();
 80043ba:	f7ff f87f 	bl	80034bc <SaveEEalias>
	return result;
 80043be:	e7ca      	b.n	8004356 <NameModule+0x4e>
 80043c0:	08016dac 	.word	0x08016dac
 80043c4:	20000010 	.word	0x20000010
 80043c8:	20000dde 	.word	0x20000dde
 80043cc:	20000aa8 	.word	0x20000aa8
 80043d0:	20000c28 	.word	0x20000c28
 80043d4:	200000cc 	.word	0x200000cc
 80043d8:	20000dd4 	.word	0x20000dd4

080043dc <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 80043dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043de:	464f      	mov	r7, r9
 80043e0:	4646      	mov	r6, r8
 80043e2:	46d6      	mov	lr, sl
 80043e4:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <AddModuleToGroup+0x104>)
 80043e6:	b5c0      	push	{r6, r7, lr}
 80043e8:	001f      	movs	r7, r3
 80043ea:	3738      	adds	r7, #56	; 0x38
 80043ec:	4680      	mov	r8, r0
 80043ee:	000e      	movs	r6, r1
 80043f0:	4699      	mov	r9, r3
 80043f2:	003c      	movs	r4, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80043f4:	2500      	movs	r5, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80043f6:	0021      	movs	r1, r4
 80043f8:	0030      	movs	r0, r6
 80043fa:	f7fb fe83 	bl	8000104 <strcmp>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d02a      	beq.n	8004458 <AddModuleToGroup+0x7c>
	for(i =0; i < MaxNumOfGroups; i++){
 8004402:	3501      	adds	r5, #1
 8004404:	340a      	adds	r4, #10
 8004406:	2d0a      	cmp	r5, #10
 8004408:	d1f5      	bne.n	80043f6 <AddModuleToGroup+0x1a>
 800440a:	4c36      	ldr	r4, [pc, #216]	; (80044e4 <AddModuleToGroup+0x108>)
 800440c:	0025      	movs	r5, r4
 800440e:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004410:	0021      	movs	r1, r4
 8004412:	0030      	movs	r0, r6
 8004414:	f7fb fe76 	bl	8000104 <strcmp>
 8004418:	2800      	cmp	r0, #0
 800441a:	d051      	beq.n	80044c0 <AddModuleToGroup+0xe4>
 800441c:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 800441e:	42a5      	cmp	r5, r4
 8004420:	d1f6      	bne.n	8004410 <AddModuleToGroup+0x34>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 8004422:	4b31      	ldr	r3, [pc, #196]	; (80044e8 <AddModuleToGroup+0x10c>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d920      	bls.n	800446c <AddModuleToGroup+0x90>
 800442a:	4c30      	ldr	r4, [pc, #192]	; (80044ec <AddModuleToGroup+0x110>)
 800442c:	009d      	lsls	r5, r3, #2
 800442e:	18ed      	adds	r5, r5, r3
 8004430:	0023      	movs	r3, r4
 8004432:	006d      	lsls	r5, r5, #1
 8004434:	3b0a      	subs	r3, #10
 8004436:	18ed      	adds	r5, r5, r3
 8004438:	e002      	b.n	8004440 <AddModuleToGroup+0x64>
 800443a:	340a      	adds	r4, #10
 800443c:	42a5      	cmp	r5, r4
 800443e:	d015      	beq.n	800446c <AddModuleToGroup+0x90>
		if(!strcmp(group,moduleAlias[j]))
 8004440:	0021      	movs	r1, r4
 8004442:	0030      	movs	r0, r6
 8004444:	f7fb fe5e 	bl	8000104 <strcmp>
 8004448:	2800      	cmp	r0, #0
 800444a:	d1f6      	bne.n	800443a <AddModuleToGroup+0x5e>
			return BOS_ERR_ExistingAlias;
 800444c:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 800444e:	bc1c      	pop	{r2, r3, r4}
 8004450:	4690      	mov	r8, r2
 8004452:	4699      	mov	r9, r3
 8004454:	46a2      	mov	sl, r4
 8004456:	bdf0      	pop	{r4, r5, r6, r7, pc}
			groupModules[module - 1] |=(0x0001 << i);
 8004458:	2201      	movs	r2, #1
 800445a:	4647      	mov	r7, r8
 800445c:	40aa      	lsls	r2, r5
 800445e:	3f01      	subs	r7, #1
 8004460:	007f      	lsls	r7, r7, #1
 8004462:	444f      	add	r7, r9
 8004464:	88bb      	ldrh	r3, [r7, #4]
 8004466:	4313      	orrs	r3, r2
 8004468:	80bb      	strh	r3, [r7, #4]
			return result;
 800446a:	e7f0      	b.n	800444e <AddModuleToGroup+0x72>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800446c:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <AddModuleToGroup+0x114>)
 800446e:	4c21      	ldr	r4, [pc, #132]	; (80044f4 <AddModuleToGroup+0x118>)
 8004470:	469a      	mov	sl, r3
 8004472:	621c      	str	r4, [r3, #32]
 8004474:	e004      	b.n	8004480 <AddModuleToGroup+0xa4>
 8004476:	4653      	mov	r3, sl
 8004478:	6864      	ldr	r4, [r4, #4]
 800447a:	621c      	str	r4, [r3, #32]
 800447c:	2c00      	cmp	r4, #0
 800447e:	d00d      	beq.n	800449c <AddModuleToGroup+0xc0>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004484:	0028      	movs	r0, r5
 8004486:	f7fb fe47 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800448a:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800448c:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800448e:	0030      	movs	r0, r6
 8004490:	f00e fad0 	bl	8012a34 <strncmp>
 8004494:	2800      	cmp	r0, #0
 8004496:	d1ee      	bne.n	8004476 <AddModuleToGroup+0x9a>
			return BOS_ERR_ExistingCmd;
 8004498:	2008      	movs	r0, #8
 800449a:	e7d8      	b.n	800444e <AddModuleToGroup+0x72>
		if(!groupAlias[i][0]){
 800449c:	783b      	ldrb	r3, [r7, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d010      	beq.n	80044c4 <AddModuleToGroup+0xe8>
	for(i =0; i < MaxNumOfGroups; i++){
 80044a2:	3401      	adds	r4, #1
 80044a4:	370a      	adds	r7, #10
 80044a6:	2c0a      	cmp	r4, #10
 80044a8:	d1f8      	bne.n	800449c <AddModuleToGroup+0xc0>
 80044aa:	2380      	movs	r3, #128	; 0x80
 80044ac:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 80044ae:	4647      	mov	r7, r8
 80044b0:	3f01      	subs	r7, #1
 80044b2:	007f      	lsls	r7, r7, #1
 80044b4:	444f      	add	r7, r9
 80044b6:	88ba      	ldrh	r2, [r7, #4]
	return result;
 80044b8:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 80044ba:	4313      	orrs	r3, r2
 80044bc:	80bb      	strh	r3, [r7, #4]
	return result;
 80044be:	e7c6      	b.n	800444e <AddModuleToGroup+0x72>
			return BOS_ERR_Keyword;
 80044c0:	2006      	movs	r0, #6
 80044c2:	e7c4      	b.n	800444e <AddModuleToGroup+0x72>
			strcpy(groupAlias[i],group);
 80044c4:	464b      	mov	r3, r9
 80044c6:	00a0      	lsls	r0, r4, #2
 80044c8:	1900      	adds	r0, r0, r4
 80044ca:	3338      	adds	r3, #56	; 0x38
 80044cc:	0040      	lsls	r0, r0, #1
 80044ce:	1818      	adds	r0, r3, r0
 80044d0:	0031      	movs	r1, r6
 80044d2:	f00e faa7 	bl	8012a24 <strcpy>
 80044d6:	2301      	movs	r3, #1
 80044d8:	40a3      	lsls	r3, r4
 80044da:	b21b      	sxth	r3, r3
			break;
 80044dc:	e7e7      	b.n	80044ae <AddModuleToGroup+0xd2>
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	20000aa8 	.word	0x20000aa8
 80044e4:	08016dac 	.word	0x08016dac
 80044e8:	20000010 	.word	0x20000010
 80044ec:	20000dde 	.word	0x20000dde
 80044f0:	20000c28 	.word	0x20000c28
 80044f4:	200000cc 	.word	0x200000cc

080044f8 <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	4645      	mov	r5, r8
 80044fc:	4657      	mov	r7, sl
 80044fe:	464e      	mov	r6, r9
 8004500:	46de      	mov	lr, fp
 8004502:	b5e0      	push	{r5, r6, r7, lr}
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 8004504:	4f82      	ldr	r7, [pc, #520]	; (8004710 <WriteToRemote+0x218>)
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004506:	b083      	sub	sp, #12
 8004508:	ac0c      	add	r4, sp, #48	; 0x30
 800450a:	cc40      	ldmia	r4!, {r6}
	response =BOSMessaging.response;
 800450c:	783d      	ldrb	r5, [r7, #0]
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800450e:	9001      	str	r0, [sp, #4]
 8004510:	7824      	ldrb	r4, [r4, #0]
	response =BOSMessaging.response;
 8004512:	46a8      	mov	r8, r5
	if(timeout)
 8004514:	2e00      	cmp	r6, #0
 8004516:	d059      	beq.n	80045cc <WriteToRemote+0xd4>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 8004518:	2520      	movs	r5, #32
 800451a:	703d      	strb	r5, [r7, #0]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
		code = CODE_WRITE_REMOTE_FORCE;
 800451c:	4265      	negs	r5, r4
 800451e:	416c      	adcs	r4, r5
 8004520:	2501      	movs	r5, #1
 8004522:	2022      	movs	r0, #34	; 0x22
 8004524:	4264      	negs	r4, r4
 8004526:	43ac      	bics	r4, r5
 8004528:	46a3      	mov	fp, r4
 800452a:	4684      	mov	ip, r0
 800452c:	b2d5      	uxtb	r5, r2
 800452e:	46a9      	mov	r9, r5
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 8004530:	4d78      	ldr	r5, [pc, #480]	; (8004714 <WriteToRemote+0x21c>)
		code = CODE_WRITE_REMOTE_FORCE;
 8004532:	44e3      	add	fp, ip
	if(remoteAddress < FLASH_BASE){
 8004534:	42aa      	cmp	r2, r5
 8004536:	d829      	bhi.n	800458c <WriteToRemote+0x94>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 8004538:	2224      	movs	r2, #36	; 0x24
 800453a:	464c      	mov	r4, r9
 800453c:	4d76      	ldr	r5, [pc, #472]	; (8004718 <WriteToRemote+0x220>)
 800453e:	54ac      	strb	r4, [r5, r2]
		messageParams[1] =format;						// Send local format
 8004540:	002a      	movs	r2, r5
 8004542:	3224      	adds	r2, #36	; 0x24
 8004544:	7053      	strb	r3, [r2, #1]
		/* Send variable value based on local format */
		switch(format){
 8004546:	2b08      	cmp	r3, #8
 8004548:	d814      	bhi.n	8004574 <WriteToRemote+0x7c>
 800454a:	4a74      	ldr	r2, [pc, #464]	; (800471c <WriteToRemote+0x224>)
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	58d3      	ldr	r3, [r2, r3]
 8004550:	469f      	mov	pc, r3
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
				SendMessageToModule(module,code,10);
				break;
			case FMT_INT32:
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 8004552:	680b      	ldr	r3, [r1, #0]
 8004554:	3524      	adds	r5, #36	; 0x24
 8004556:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 8004558:	680b      	ldr	r3, [r1, #0]
 800455a:	121b      	asrs	r3, r3, #8
 800455c:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 800455e:	680b      	ldr	r3, [r1, #0]
 8004560:	141b      	asrs	r3, r3, #16
 8004562:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004564:	680b      	ldr	r3, [r1, #0]
 8004566:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,code,10);
 8004568:	220a      	movs	r2, #10
 800456a:	4659      	mov	r1, fp
 800456c:	9801      	ldr	r0, [sp, #4]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 800456e:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,code,10);
 8004570:	f003 fdda 	bl	8008128 <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 8004574:	4643      	mov	r3, r8
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 8004576:	2000      	movs	r0, #0
	BOSMessaging.response =response;
 8004578:	703b      	strb	r3, [r7, #0]
	if(timeout){
 800457a:	2e00      	cmp	r6, #0
 800457c:	d128      	bne.n	80045d0 <WriteToRemote+0xd8>
}
 800457e:	b003      	add	sp, #12
 8004580:	bc3c      	pop	{r2, r3, r4, r5}
 8004582:	4690      	mov	r8, r2
 8004584:	4699      	mov	r9, r3
 8004586:	46a2      	mov	sl, r4
 8004588:	46ab      	mov	fp, r5
 800458a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		messageParams[0] =0;
 800458c:	2024      	movs	r0, #36	; 0x24
 800458e:	4684      	mov	ip, r0
 8004590:	2000      	movs	r0, #0
 8004592:	4682      	mov	sl, r0
 8004594:	4660      	mov	r0, ip
 8004596:	4654      	mov	r4, sl
 8004598:	4d5f      	ldr	r5, [pc, #380]	; (8004718 <WriteToRemote+0x220>)
		messageParams[1] =format;							// Local format
 800459a:	44ac      	add	ip, r5
		messageParams[0] =0;
 800459c:	542c      	strb	r4, [r5, r0]
		messageParams[1] =format;							// Local format
 800459e:	4660      	mov	r0, ip
 80045a0:	7043      	strb	r3, [r0, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 80045a2:	0e10      	lsrs	r0, r2, #24
 80045a4:	4682      	mov	sl, r0
 80045a6:	4660      	mov	r0, ip
 80045a8:	4654      	mov	r4, sl
 80045aa:	7084      	strb	r4, [r0, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80045ac:	0c10      	lsrs	r0, r2, #16
 80045ae:	4682      	mov	sl, r0
 80045b0:	4660      	mov	r0, ip
 80045b2:	4654      	mov	r4, sl
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 80045b4:	0a12      	lsrs	r2, r2, #8
 80045b6:	7102      	strb	r2, [r0, #4]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80045b8:	70c4      	strb	r4, [r0, #3]
		messageParams[5] =(uint8_t )remoteAddress;
 80045ba:	4662      	mov	r2, ip
 80045bc:	4648      	mov	r0, r9
 80045be:	7150      	strb	r0, [r2, #5]
		switch(format){
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d8d7      	bhi.n	8004574 <WriteToRemote+0x7c>
 80045c4:	4a56      	ldr	r2, [pc, #344]	; (8004720 <WriteToRemote+0x228>)
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	58d3      	ldr	r3, [r2, r3]
 80045ca:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 80045cc:	703e      	strb	r6, [r7, #0]
 80045ce:	e7a5      	b.n	800451c <WriteToRemote+0x24>
		uint32_t t0 =HAL_GetTick();
 80045d0:	f00a fc2a 	bl	800ee28 <HAL_GetTick>
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80045d4:	2424      	movs	r4, #36	; 0x24
		uint32_t t0 =HAL_GetTick();
 80045d6:	0007      	movs	r7, r0
 80045d8:	4d52      	ldr	r5, [pc, #328]	; (8004724 <WriteToRemote+0x22c>)
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80045da:	5d28      	ldrb	r0, [r5, r4]
 80045dc:	2800      	cmp	r0, #0
 80045de:	d0ce      	beq.n	800457e <WriteToRemote+0x86>
 80045e0:	f00a fc22 	bl	800ee28 <HAL_GetTick>
 80045e4:	1bc0      	subs	r0, r0, r7
 80045e6:	42b0      	cmp	r0, r6
 80045e8:	d3f7      	bcc.n	80045da <WriteToRemote+0xe2>
 80045ea:	5d28      	ldrb	r0, [r5, r4]
		return responseStatus;
 80045ec:	e7c7      	b.n	800457e <WriteToRemote+0x86>
				messageParams[2] =*(__IO int8_t* )localAddress;
 80045ee:	780b      	ldrb	r3, [r1, #0]
 80045f0:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80045f2:	2203      	movs	r2, #3
 80045f4:	2120      	movs	r1, #32
 80045f6:	9801      	ldr	r0, [sp, #4]
				messageParams[2] =*(__IO int8_t* )localAddress;
 80045f8:	70ab      	strb	r3, [r5, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80045fa:	f003 fd95 	bl	8008128 <SendMessageToModule>
				break;
 80045fe:	e7b9      	b.n	8004574 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO int8_t* )localAddress;
 8004600:	780b      	ldrb	r3, [r1, #0]
 8004602:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,code,7);
 8004604:	2207      	movs	r2, #7
 8004606:	4659      	mov	r1, fp
 8004608:	9801      	ldr	r0, [sp, #4]
				messageParams[6] =*(__IO int8_t* )localAddress;
 800460a:	71ab      	strb	r3, [r5, #6]
				SendMessageToModule(module,code,7);
 800460c:	f003 fd8c 	bl	8008128 <SendMessageToModule>
				break;
 8004610:	e7b0      	b.n	8004574 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 8004612:	680b      	ldr	r3, [r1, #0]
 8004614:	3524      	adds	r5, #36	; 0x24
 8004616:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 8004618:	680b      	ldr	r3, [r1, #0]
 800461a:	0a1b      	lsrs	r3, r3, #8
 800461c:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 800461e:	680b      	ldr	r3, [r1, #0]
 8004620:	0c1b      	lsrs	r3, r3, #16
 8004622:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004624:	680b      	ldr	r3, [r1, #0]
 8004626:	0e1b      	lsrs	r3, r3, #24
 8004628:	e79e      	b.n	8004568 <WriteToRemote+0x70>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 800462a:	780b      	ldrb	r3, [r1, #0]
 800462c:	3524      	adds	r5, #36	; 0x24
 800462e:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004630:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004632:	220a      	movs	r2, #10
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004634:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 8004636:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004638:	9801      	ldr	r0, [sp, #4]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 800463a:	712b      	strb	r3, [r5, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 800463c:	78cb      	ldrb	r3, [r1, #3]
 800463e:	716b      	strb	r3, [r5, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 8004640:	790b      	ldrb	r3, [r1, #4]
 8004642:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 8004644:	794b      	ldrb	r3, [r1, #5]
 8004646:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 8004648:	798b      	ldrb	r3, [r1, #6]
 800464a:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800464c:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800464e:	2120      	movs	r1, #32
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004650:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004652:	f003 fd69 	bl	8008128 <SendMessageToModule>
				break;
 8004656:	e78d      	b.n	8004574 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 8004658:	780b      	ldrb	r3, [r1, #0]
 800465a:	3524      	adds	r5, #36	; 0x24
 800465c:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 800465e:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,code,14);
 8004660:	220e      	movs	r2, #14
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004662:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004664:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,code,14);
 8004666:	9801      	ldr	r0, [sp, #4]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004668:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 800466a:	78cb      	ldrb	r3, [r1, #3]
 800466c:	726b      	strb	r3, [r5, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 800466e:	790b      	ldrb	r3, [r1, #4]
 8004670:	72ab      	strb	r3, [r5, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 8004672:	794b      	ldrb	r3, [r1, #5]
 8004674:	72eb      	strb	r3, [r5, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 8004676:	798b      	ldrb	r3, [r1, #6]
 8004678:	732b      	strb	r3, [r5, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800467a:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,code,14);
 800467c:	4659      	mov	r1, fp
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800467e:	736b      	strb	r3, [r5, #13]
				SendMessageToModule(module,code,14);
 8004680:	f003 fd52 	bl	8008128 <SendMessageToModule>
				break;
 8004684:	e776      	b.n	8004574 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 8004686:	880b      	ldrh	r3, [r1, #0]
 8004688:	3524      	adds	r5, #36	; 0x24
 800468a:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 800468c:	880b      	ldrh	r3, [r1, #0]
 800468e:	b21b      	sxth	r3, r3
 8004690:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,code,8);
 8004692:	2208      	movs	r2, #8
 8004694:	4659      	mov	r1, fp
 8004696:	9801      	ldr	r0, [sp, #4]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004698:	71eb      	strb	r3, [r5, #7]
				SendMessageToModule(module,code,8);
 800469a:	f003 fd45 	bl	8008128 <SendMessageToModule>
				break;
 800469e:	e769      	b.n	8004574 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80046a0:	880b      	ldrh	r3, [r1, #0]
 80046a2:	3524      	adds	r5, #36	; 0x24
 80046a4:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80046a6:	880b      	ldrh	r3, [r1, #0]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	e7f2      	b.n	8004692 <WriteToRemote+0x19a>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80046ac:	680b      	ldr	r3, [r1, #0]
 80046ae:	3524      	adds	r5, #36	; 0x24
 80046b0:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80046b2:	680b      	ldr	r3, [r1, #0]
 80046b4:	121b      	asrs	r3, r3, #8
 80046b6:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80046b8:	680b      	ldr	r3, [r1, #0]
 80046ba:	141b      	asrs	r3, r3, #16
 80046bc:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80046be:	680b      	ldr	r3, [r1, #0]
 80046c0:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80046c2:	2206      	movs	r2, #6
 80046c4:	2120      	movs	r1, #32
 80046c6:	9801      	ldr	r0, [sp, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80046c8:	716b      	strb	r3, [r5, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80046ca:	f003 fd2d 	bl	8008128 <SendMessageToModule>
				break;
 80046ce:	e751      	b.n	8004574 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80046d0:	680b      	ldr	r3, [r1, #0]
 80046d2:	3524      	adds	r5, #36	; 0x24
 80046d4:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80046d6:	680b      	ldr	r3, [r1, #0]
 80046d8:	0a1b      	lsrs	r3, r3, #8
 80046da:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 80046dc:	680b      	ldr	r3, [r1, #0]
 80046de:	0c1b      	lsrs	r3, r3, #16
 80046e0:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 80046e2:	680b      	ldr	r3, [r1, #0]
 80046e4:	0e1b      	lsrs	r3, r3, #24
 80046e6:	e7ec      	b.n	80046c2 <WriteToRemote+0x1ca>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80046e8:	880b      	ldrh	r3, [r1, #0]
 80046ea:	3524      	adds	r5, #36	; 0x24
 80046ec:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80046ee:	880b      	ldrh	r3, [r1, #0]
 80046f0:	b21b      	sxth	r3, r3
 80046f2:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 80046f4:	2204      	movs	r2, #4
 80046f6:	2120      	movs	r1, #32
 80046f8:	9801      	ldr	r0, [sp, #4]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80046fa:	70eb      	strb	r3, [r5, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 80046fc:	f003 fd14 	bl	8008128 <SendMessageToModule>
				break;
 8004700:	e738      	b.n	8004574 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 8004702:	880b      	ldrh	r3, [r1, #0]
 8004704:	3524      	adds	r5, #36	; 0x24
 8004706:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 8004708:	880b      	ldrh	r3, [r1, #0]
 800470a:	0a1b      	lsrs	r3, r3, #8
 800470c:	e7f2      	b.n	80046f4 <WriteToRemote+0x1fc>
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	200067f4 	.word	0x200067f4
 8004714:	07ffffff 	.word	0x07ffffff
 8004718:	20000b28 	.word	0x20000b28
 800471c:	08016d64 	.word	0x08016d64
 8004720:	08016d88 	.word	0x08016d88
 8004724:	20000c28 	.word	0x20000c28

08004728 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004728:	b530      	push	{r4, r5, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 800472a:	2101      	movs	r1, #1
char* GetDateString(void){
 800472c:	b083      	sub	sp, #12
	char *buffer =malloc(30 * sizeof(int8_t));
 800472e:	201e      	movs	r0, #30
 8004730:	f00d fc80 	bl	8012034 <calloc>
 8004734:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004736:	4809      	ldr	r0, [pc, #36]	; (800475c <GetDateString+0x34>)
 8004738:	4909      	ldr	r1, [pc, #36]	; (8004760 <GetDateString+0x38>)
 800473a:	7d02      	ldrb	r2, [r0, #20]
 800473c:	8b05      	ldrh	r5, [r0, #24]
 800473e:	7d83      	ldrb	r3, [r0, #22]
 8004740:	3a01      	subs	r2, #1
 8004742:	9501      	str	r5, [sp, #4]
 8004744:	7d40      	ldrb	r0, [r0, #21]
 8004746:	0092      	lsls	r2, r2, #2
 8004748:	188a      	adds	r2, r1, r2
 800474a:	9000      	str	r0, [sp, #0]
 800474c:	6912      	ldr	r2, [r2, #16]
 800474e:	312c      	adds	r1, #44	; 0x2c
 8004750:	0020      	movs	r0, r4
 8004752:	f00e f92b 	bl	80129ac <sprintf>
	return buffer;
}
 8004756:	0020      	movs	r0, r4
 8004758:	b003      	add	sp, #12
 800475a:	bd30      	pop	{r4, r5, pc}
 800475c:	20006874 	.word	0x20006874
 8004760:	08016dac 	.word	0x08016dac

08004764 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004764:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004766:	4b08      	ldr	r3, [pc, #32]	; (8004788 <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004768:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800476a:	7819      	ldrb	r1, [r3, #0]
 800476c:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 800476e:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004770:	9303      	str	r3, [sp, #12]
 8004772:	3b02      	subs	r3, #2
 8004774:	9302      	str	r3, [sp, #8]
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	3303      	adds	r3, #3
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	000b      	movs	r3, r1
 800477e:	f003 fcf7 	bl	8008170 <StartScastDMAStream>
}
 8004782:	b005      	add	sp, #20
 8004784:	bd00      	pop	{pc}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	20000aa8 	.word	0x20000aa8

0800478c <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 800478c:	2300      	movs	r3, #0
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 800478e:	b530      	push	{r4, r5, lr}
 8004790:	0004      	movs	r4, r0
 8004792:	000d      	movs	r5, r1
 8004794:	b087      	sub	sp, #28
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004796:	9304      	str	r3, [sp, #16]
 8004798:	9303      	str	r3, [sp, #12]
 800479a:	9302      	str	r3, [sp, #8]
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	2200      	movs	r2, #0
 80047a2:	2100      	movs	r1, #0
 80047a4:	2000      	movs	r0, #0
 80047a6:	f7fe fecd 	bl	8003544 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80047aa:	1e60      	subs	r0, r4, #1
 80047ac:	00c3      	lsls	r3, r0, #3
 80047ae:	4912      	ldr	r1, [pc, #72]	; (80047f8 <Unbridge+0x6c>)
 80047b0:	1a1b      	subs	r3, r3, r0
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	585b      	ldr	r3, [r3, r1]
 80047b6:	1e6a      	subs	r2, r5, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d012      	beq.n	80047e2 <Unbridge+0x56>
 80047bc:	00d3      	lsls	r3, r2, #3
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	585b      	ldr	r3, [r3, r1]
		SwitchStreamDMAToMsg(port1);
 80047c4:	0020      	movs	r0, r4
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d104      	bne.n	80047d4 <Unbridge+0x48>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 80047ca:	f006 f8f1 	bl	800a9b0 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047ce:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80047d0:	b007      	add	sp, #28
 80047d2:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 80047d4:	f006 f8ec 	bl	800a9b0 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80047d8:	0028      	movs	r0, r5
 80047da:	f006 f8e9 	bl	800a9b0 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047de:	2000      	movs	r0, #0
 80047e0:	e7f6      	b.n	80047d0 <Unbridge+0x44>
	else if(streamDMA[port2 - 1].Instance != 0){
 80047e2:	00d3      	lsls	r3, r2, #3
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	585b      	ldr	r3, [r3, r1]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <Unbridge+0x66>
		SwitchStreamDMAToMsg(port2);
 80047ee:	0028      	movs	r0, r5
 80047f0:	e7eb      	b.n	80047ca <Unbridge+0x3e>
		return BOS_ERR_WrongValue;
 80047f2:	2068      	movs	r0, #104	; 0x68
 80047f4:	e7ec      	b.n	80047d0 <Unbridge+0x44>
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	20002084 	.word	0x20002084

080047fc <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 80047fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fe:	46d6      	mov	lr, sl
 8004800:	4646      	mov	r6, r8
 8004802:	464f      	mov	r7, r9
 8004804:	b5c0      	push	{r6, r7, lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004806:	4e27      	ldr	r6, [pc, #156]	; (80048a4 <AddSnippet.part.0+0xa8>)
 8004808:	4d27      	ldr	r5, [pc, #156]	; (80048a8 <AddSnippet.part.0+0xac>)
 800480a:	7833      	ldrb	r3, [r6, #0]
BOS_Status AddSnippet(uint8_t code,char *string){
 800480c:	4680      	mov	r8, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 800480e:	3b01      	subs	r3, #1
 8004810:	009c      	lsls	r4, r3, #2
 8004812:	18e4      	adds	r4, r4, r3
 8004814:	00a4      	lsls	r4, r4, #2
 8004816:	192c      	adds	r4, r5, r4
 8004818:	68e3      	ldr	r3, [r4, #12]
 800481a:	469a      	mov	sl, r3
 800481c:	f7fb fc7c 	bl	8000118 <strlen>
 8004820:	4653      	mov	r3, sl
 8004822:	4681      	mov	r9, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02e      	beq.n	8004886 <AddSnippet.part.0+0x8a>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004828:	4650      	mov	r0, sl
 800482a:	f7fb fc75 	bl	8000118 <strlen>
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 800482e:	4649      	mov	r1, r9
 8004830:	3102      	adds	r1, #2
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004832:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004834:	1809      	adds	r1, r1, r0
 8004836:	4650      	mov	r0, sl
 8004838:	f00d fef0 	bl	801261c <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 800483c:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 800483e:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004840:	3a01      	subs	r2, #1
 8004842:	0093      	lsls	r3, r2, #2
 8004844:	189b      	adds	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	18eb      	adds	r3, r5, r3
 800484a:	68d8      	ldr	r0, [r3, #12]
 800484c:	1c7a      	adds	r2, r7, #1
 800484e:	1880      	adds	r0, r0, r2
 8004850:	4641      	mov	r1, r8
 8004852:	f00e f8e7 	bl	8012a24 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004856:	7832      	ldrb	r2, [r6, #0]
 8004858:	3a01      	subs	r2, #1
 800485a:	0093      	lsls	r3, r2, #2
 800485c:	189b      	adds	r3, r3, r2
 800485e:	2213      	movs	r2, #19
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	18eb      	adds	r3, r5, r3
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	55da      	strb	r2, [r3, r7]
 8004868:	7833      	ldrb	r3, [r6, #0]
 800486a:	3b01      	subs	r3, #1
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 800486c:	0098      	lsls	r0, r3, #2
 800486e:	18c0      	adds	r0, r0, r3
 8004870:	0080      	lsls	r0, r0, #2
 8004872:	1828      	adds	r0, r5, r0
 8004874:	68c3      	ldr	r3, [r0, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00d      	beq.n	8004896 <AddSnippet.part.0+0x9a>
			
		default:
			break;
	}
	
	return BOS_OK;
 800487a:	2000      	movs	r0, #0
}
 800487c:	bc1c      	pop	{r2, r3, r4}
 800487e:	4690      	mov	r8, r2
 8004880:	4699      	mov	r9, r3
 8004882:	46a2      	mov	sl, r4
 8004884:	bdf0      	pop	{r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004886:	3001      	adds	r0, #1
 8004888:	f00d fc40 	bl	801210c <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 800488c:	4641      	mov	r1, r8
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 800488e:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004890:	f00e f8c8 	bl	8012a24 <strcpy>
 8004894:	e7f1      	b.n	800487a <AddSnippet.part.0+0x7e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004896:	2214      	movs	r2, #20
 8004898:	2100      	movs	r1, #0
 800489a:	f00d fe8d 	bl	80125b8 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 800489e:	200e      	movs	r0, #14
 80048a0:	e7ec      	b.n	800487c <AddSnippet.part.0+0x80>
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	200016e4 	.word	0x200016e4
 80048a8:	20006890 	.word	0x20006890

080048ac <StringToLowerCase>:
void StringToLowerCase(char *string){
 80048ac:	b570      	push	{r4, r5, r6, lr}
	for(int i =0; string[i]; i++){
 80048ae:	7804      	ldrb	r4, [r0, #0]
void StringToLowerCase(char *string){
 80048b0:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 80048b2:	2c00      	cmp	r4, #0
 80048b4:	d00d      	beq.n	80048d2 <StringToLowerCase+0x26>
		string[i] =tolower(string[i]);
 80048b6:	2603      	movs	r6, #3
 80048b8:	f00d fc1a 	bl	80120f0 <__locale_ctype_ptr>
 80048bc:	1900      	adds	r0, r0, r4
 80048be:	7842      	ldrb	r2, [r0, #1]
 80048c0:	4032      	ands	r2, r6
 80048c2:	2a01      	cmp	r2, #1
 80048c4:	d100      	bne.n	80048c8 <StringToLowerCase+0x1c>
 80048c6:	3420      	adds	r4, #32
 80048c8:	702c      	strb	r4, [r5, #0]
 80048ca:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 80048cc:	782c      	ldrb	r4, [r5, #0]
 80048ce:	2c00      	cmp	r4, #0
 80048d0:	d1f2      	bne.n	80048b8 <StringToLowerCase+0xc>
}
 80048d2:	bd70      	pop	{r4, r5, r6, pc}

080048d4 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 80048d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d6:	4657      	mov	r7, sl
 80048d8:	464e      	mov	r6, r9
 80048da:	46de      	mov	lr, fp
 80048dc:	4645      	mov	r5, r8
 80048de:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80048e0:	4ed8      	ldr	r6, [pc, #864]	; (8004c44 <ParseSnippetCondition+0x370>)
BOS_Status ParseSnippetCondition(char *string){
 80048e2:	b08b      	sub	sp, #44	; 0x2c
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80048e4:	7834      	ldrb	r4, [r6, #0]
BOS_Status ParseSnippetCondition(char *string){
 80048e6:	0007      	movs	r7, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80048e8:	2c05      	cmp	r4, #5
 80048ea:	d067      	beq.n	80049bc <ParseSnippetCondition+0xe8>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80048ec:	00a3      	lsls	r3, r4, #2
 80048ee:	4dd6      	ldr	r5, [pc, #856]	; (8004c48 <ParseSnippetCondition+0x374>)
 80048f0:	1918      	adds	r0, r3, r4
 80048f2:	0080      	lsls	r0, r0, #2
 80048f4:	469a      	mov	sl, r3
 80048f6:	182b      	adds	r3, r5, r0
 80048f8:	4699      	mov	r9, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	464a      	mov	r2, r9
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 80048fe:	3002      	adds	r0, #2
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004900:	8013      	strh	r3, [r2, #0]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004902:	1828      	adds	r0, r5, r0
 8004904:	2204      	movs	r2, #4
 8004906:	2100      	movs	r1, #0
 8004908:	f00d fe56 	bl	80125b8 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 800490c:	783b      	ldrb	r3, [r7, #0]
 800490e:	2b62      	cmp	r3, #98	; 0x62
 8004910:	d102      	bne.n	8004918 <ParseSnippetCondition+0x44>
 8004912:	78bb      	ldrb	r3, [r7, #2]
 8004914:	2b2e      	cmp	r3, #46	; 0x2e
 8004916:	d057      	beq.n	80049c8 <ParseSnippetCondition+0xf4>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004918:	1d33      	adds	r3, r6, #4
 800491a:	4698      	mov	r8, r3
 800491c:	0018      	movs	r0, r3
 800491e:	0039      	movs	r1, r7
 8004920:	f00e f880 	bl	8012a24 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004924:	4cc9      	ldr	r4, [pc, #804]	; (8004c4c <ParseSnippetCondition+0x378>)
 8004926:	4640      	mov	r0, r8
 8004928:	0021      	movs	r1, r4
 800492a:	f00e fefb 	bl	8013724 <strtok>
		secondPart =strtok( NULL," ");
 800492e:	0021      	movs	r1, r4
		firstPart =strtok((char* )cInputString," ");
 8004930:	0007      	movs	r7, r0
		secondPart =strtok( NULL," ");
 8004932:	2000      	movs	r0, #0
 8004934:	f00e fef6 	bl	8013724 <strtok>
		thirdPart =strtok( NULL," ");
 8004938:	0021      	movs	r1, r4
		secondPart =strtok( NULL," ");
 800493a:	4680      	mov	r8, r0
		thirdPart =strtok( NULL," ");
 800493c:	2000      	movs	r0, #0
 800493e:	f00e fef1 	bl	8013724 <strtok>
 8004942:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004944:	2f00      	cmp	r7, #0
 8004946:	d02f      	beq.n	80049a8 <ParseSnippetCondition+0xd4>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004948:	0038      	movs	r0, r7
 800494a:	f7fe fefd 	bl	8003748 <IsModuleParameter>
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 800494e:	4643      	mov	r3, r8
			modPar1 =IsModuleParameter(firstPart);
 8004950:	1e07      	subs	r7, r0, #0
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004952:	d036      	beq.n	80049c2 <ParseSnippetCondition+0xee>
 8004954:	2b00      	cmp	r3, #0
 8004956:	d024      	beq.n	80049a2 <ParseSnippetCondition+0xce>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004958:	2c00      	cmp	r4, #0
 800495a:	d025      	beq.n	80049a8 <ParseSnippetCondition+0xd4>
				modPar2 =IsModuleParameter(thirdPart);
 800495c:	0020      	movs	r0, r4
 800495e:	f7fe fef3 	bl	8003748 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004962:	2800      	cmp	r0, #0
 8004964:	d06b      	beq.n	8004a3e <ParseSnippetCondition+0x16a>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004966:	2204      	movs	r2, #4
 8004968:	7833      	ldrb	r3, [r6, #0]
 800496a:	009c      	lsls	r4, r3, #2
 800496c:	4699      	mov	r9, r3
 800496e:	18e3      	adds	r3, r4, r3
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004974:	18eb      	adds	r3, r5, r3
 8004976:	70df      	strb	r7, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004978:	71d8      	strb	r0, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800497a:	4640      	mov	r0, r8
 800497c:	f7fe fef0 	bl	8003760 <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004980:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004982:	444c      	add	r4, r9
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004984:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004986:	00a4      	lsls	r4, r4, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004988:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800498a:	192c      	adds	r4, r5, r4
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 800498c:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800498e:	7060      	strb	r0, [r4, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004990:	18ed      	adds	r5, r5, r3
 8004992:	786b      	ldrb	r3, [r5, #1]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <ParseSnippetCondition+0xd4>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8004998:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet
 800499a:	3201      	adds	r2, #1
 800499c:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 800499e:	4698      	mov	r8, r3
 80049a0:	e004      	b.n	80049ac <ParseSnippetCondition+0xd8>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 80049a2:	2c00      	cmp	r4, #0
 80049a4:	d100      	bne.n	80049a8 <ParseSnippetCondition+0xd4>
 80049a6:	e07f      	b.n	8004aa8 <ParseSnippetCondition+0x1d4>
			return BOS_ERR_WrongParam;
 80049a8:	2367      	movs	r3, #103	; 0x67
 80049aa:	4698      	mov	r8, r3
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 80049ac:	4640      	mov	r0, r8
 80049ae:	b00b      	add	sp, #44	; 0x2c
 80049b0:	bc3c      	pop	{r2, r3, r4, r5}
 80049b2:	4690      	mov	r8, r2
 80049b4:	4699      	mov	r9, r3
 80049b6:	46a2      	mov	sl, r4
 80049b8:	46ab      	mov	fp, r5
 80049ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_SNIP_MEM_FULL;
 80049bc:	230e      	movs	r3, #14
 80049be:	4698      	mov	r8, r3
 80049c0:	e7f4      	b.n	80049ac <ParseSnippetCondition+0xd8>
			else if(secondPart != NULL && thirdPart != NULL){
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1c8      	bne.n	8004958 <ParseSnippetCondition+0x84>
 80049c6:	e7ef      	b.n	80049a8 <ParseSnippetCondition+0xd4>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80049c8:	787b      	ldrb	r3, [r7, #1]
 80049ca:	3b30      	subs	r3, #48	; 0x30
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	469b      	mov	fp, r3
	BOS_Status status =BOS_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	4698      	mov	r8, r3
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80049d4:	465b      	mov	r3, fp
 80049d6:	2b05      	cmp	r3, #5
 80049d8:	d8e8      	bhi.n	80049ac <ParseSnippetCondition+0xd8>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80049da:	4649      	mov	r1, r9
 80049dc:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80049de:	4658      	mov	r0, fp
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80049e0:	800b      	strh	r3, [r1, #0]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80049e2:	1cfb      	adds	r3, r7, #3
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80049e4:	7088      	strb	r0, [r1, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80049e6:	2207      	movs	r2, #7
 80049e8:	4999      	ldr	r1, [pc, #612]	; (8004c50 <ParseSnippetCondition+0x37c>)
 80049ea:	0018      	movs	r0, r3
 80049ec:	9307      	str	r3, [sp, #28]
 80049ee:	f00e f821 	bl	8012a34 <strncmp>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d03d      	beq.n	8004a72 <ParseSnippetCondition+0x19e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 80049f6:	220e      	movs	r2, #14
 80049f8:	4996      	ldr	r1, [pc, #600]	; (8004c54 <ParseSnippetCondition+0x380>)
 80049fa:	9807      	ldr	r0, [sp, #28]
 80049fc:	f00e f81a 	bl	8012a34 <strncmp>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d15e      	bne.n	8004ac2 <ParseSnippetCondition+0x1ee>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004a04:	2306      	movs	r3, #6
 8004a06:	464a      	mov	r2, r9
 8004a08:	70d3      	strb	r3, [r2, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004a0a:	465b      	mov	r3, fp
 8004a0c:	00da      	lsls	r2, r3, #3
 8004a0e:	4b92      	ldr	r3, [pc, #584]	; (8004c58 <ParseSnippetCondition+0x384>)
 8004a10:	445a      	add	r2, fp
 8004a12:	189b      	adds	r3, r3, r2
 8004a14:	7a1b      	ldrb	r3, [r3, #8]
 8004a16:	079b      	lsls	r3, r3, #30
 8004a18:	d40e      	bmi.n	8004a38 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	9305      	str	r3, [sp, #20]
 8004a1e:	4643      	mov	r3, r8
 8004a20:	2201      	movs	r2, #1
 8004a22:	9304      	str	r3, [sp, #16]
 8004a24:	9303      	str	r3, [sp, #12]
 8004a26:	9302      	str	r3, [sp, #8]
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	2300      	movs	r3, #0
 8004a30:	4658      	mov	r0, fp
 8004a32:	f006 fda9 	bl	800b588 <SetButtonEvents>
 8004a36:	7834      	ldrb	r4, [r6, #0]
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004a38:	3401      	adds	r4, #1
 8004a3a:	7034      	strb	r4, [r6, #0]
 8004a3c:	e7b6      	b.n	80049ac <ParseSnippetCondition+0xd8>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004a3e:	7832      	ldrb	r2, [r6, #0]
					float constant =atof(thirdPart);
 8004a40:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004a42:	0093      	lsls	r3, r2, #2
 8004a44:	189b      	adds	r3, r3, r2
 8004a46:	2203      	movs	r2, #3
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004a4c:	18eb      	adds	r3, r5, r3
 8004a4e:	70df      	strb	r7, [r3, #3]
					float constant =atof(thirdPart);
 8004a50:	f00d fade 	bl	8012010 <atof>
 8004a54:	f7fe f8b8 	bl	8002bc8 <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004a58:	7833      	ldrb	r3, [r6, #0]
					float constant =atof(thirdPart);
 8004a5a:	9009      	str	r0, [sp, #36]	; 0x24
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004a5c:	009c      	lsls	r4, r3, #2
 8004a5e:	18e0      	adds	r0, r4, r3
 8004a60:	0080      	lsls	r0, r0, #2
 8004a62:	3006      	adds	r0, #6
 8004a64:	1828      	adds	r0, r5, r0
 8004a66:	2204      	movs	r2, #4
 8004a68:	a909      	add	r1, sp, #36	; 0x24
 8004a6a:	4699      	mov	r9, r3
 8004a6c:	f00d fd9b 	bl	80125a6 <memcpy>
 8004a70:	e783      	b.n	800497a <ParseSnippetCondition+0xa6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004a72:	2305      	movs	r3, #5
 8004a74:	4649      	mov	r1, r9
 8004a76:	70cb      	strb	r3, [r1, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004a78:	4659      	mov	r1, fp
 8004a7a:	4b77      	ldr	r3, [pc, #476]	; (8004c58 <ParseSnippetCondition+0x384>)
 8004a7c:	00ca      	lsls	r2, r1, #3
 8004a7e:	445a      	add	r2, fp
 8004a80:	189b      	adds	r3, r3, r2
 8004a82:	2201      	movs	r2, #1
 8004a84:	7a1b      	ldrb	r3, [r3, #8]
 8004a86:	421a      	tst	r2, r3
 8004a88:	d1d6      	bne.n	8004a38 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	9305      	str	r3, [sp, #20]
 8004a8e:	4643      	mov	r3, r8
 8004a90:	2200      	movs	r2, #0
 8004a92:	9304      	str	r3, [sp, #16]
 8004a94:	9303      	str	r3, [sp, #12]
 8004a96:	9302      	str	r3, [sp, #8]
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	4658      	mov	r0, fp
 8004aa0:	f006 fd72 	bl	800b588 <SetButtonEvents>
 8004aa4:	7834      	ldrb	r4, [r6, #0]
 8004aa6:	e7c7      	b.n	8004a38 <ParseSnippetCondition+0x164>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004aa8:	2102      	movs	r1, #2
 8004aaa:	7832      	ldrb	r2, [r6, #0]
 8004aac:	0093      	lsls	r3, r2, #2
 8004aae:	189b      	adds	r3, r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	54e9      	strb	r1, [r5, r3]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004ab4:	18ed      	adds	r5, r5, r3
				return BOS_OK;
 8004ab6:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004ab8:	3201      	adds	r2, #1
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004aba:	70e8      	strb	r0, [r5, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004abc:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004abe:	4698      	mov	r8, r3
 8004ac0:	e774      	b.n	80049ac <ParseSnippetCondition+0xd8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004ac2:	220c      	movs	r2, #12
 8004ac4:	4965      	ldr	r1, [pc, #404]	; (8004c5c <ParseSnippetCondition+0x388>)
 8004ac6:	9807      	ldr	r0, [sp, #28]
 8004ac8:	f00d ffb4 	bl	8012a34 <strncmp>
 8004acc:	2800      	cmp	r0, #0
 8004ace:	d131      	bne.n	8004b34 <ParseSnippetCondition+0x260>
				if(!button[port].pressedX1Sec){
 8004ad0:	465b      	mov	r3, fp
 8004ad2:	00da      	lsls	r2, r3, #3
 8004ad4:	4b60      	ldr	r3, [pc, #384]	; (8004c58 <ParseSnippetCondition+0x384>)
 8004ad6:	445a      	add	r2, fp
 8004ad8:	189b      	adds	r3, r3, r2
 8004ada:	789a      	ldrb	r2, [r3, #2]
 8004adc:	2a00      	cmp	r2, #0
 8004ade:	d063      	beq.n	8004ba8 <ParseSnippetCondition+0x2d4>
				else if(!button[port].pressedX2Sec){
 8004ae0:	78da      	ldrb	r2, [r3, #3]
 8004ae2:	2a00      	cmp	r2, #0
 8004ae4:	d07d      	beq.n	8004be2 <ParseSnippetCondition+0x30e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004ae6:	220c      	movs	r2, #12
				else if(!button[port].pressedX3Sec){
 8004ae8:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004aea:	4690      	mov	r8, r2
				else if(!button[port].pressedX3Sec){
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1a3      	bne.n	8004a38 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004af0:	0023      	movs	r3, r4
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004af2:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004af4:	4453      	add	r3, sl
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	18eb      	adds	r3, r5, r3
 8004afa:	3a01      	subs	r2, #1
 8004afc:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004afe:	300f      	adds	r0, #15
 8004b00:	f00d fa8b 	bl	801201a <atoi>
 8004b04:	7832      	ldrb	r2, [r6, #0]
 8004b06:	b2c0      	uxtb	r0, r0
 8004b08:	0093      	lsls	r3, r2, #2
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004b10:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004b12:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004b14:	9305      	str	r3, [sp, #20]
 8004b16:	2300      	movs	r3, #0
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	9304      	str	r3, [sp, #16]
 8004b1e:	9303      	str	r3, [sp, #12]
 8004b20:	9302      	str	r3, [sp, #8]
 8004b22:	9001      	str	r0, [sp, #4]
 8004b24:	9300      	str	r3, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b26:	4658      	mov	r0, fp
 8004b28:	f006 fd2e 	bl	800b588 <SetButtonEvents>
					status =BOS_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	7834      	ldrb	r4, [r6, #0]
 8004b30:	4698      	mov	r8, r3
 8004b32:	e781      	b.n	8004a38 <ParseSnippetCondition+0x164>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004b34:	220d      	movs	r2, #13
 8004b36:	494a      	ldr	r1, [pc, #296]	; (8004c60 <ParseSnippetCondition+0x38c>)
 8004b38:	9807      	ldr	r0, [sp, #28]
 8004b3a:	f00d ff7b 	bl	8012a34 <strncmp>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d000      	beq.n	8004b44 <ParseSnippetCondition+0x270>
 8004b42:	e779      	b.n	8004a38 <ParseSnippetCondition+0x164>
				if(!button[port].releasedY1Sec){
 8004b44:	465b      	mov	r3, fp
 8004b46:	4a44      	ldr	r2, [pc, #272]	; (8004c58 <ParseSnippetCondition+0x384>)
 8004b48:	00d9      	lsls	r1, r3, #3
 8004b4a:	18cb      	adds	r3, r1, r3
 8004b4c:	18d3      	adds	r3, r2, r3
 8004b4e:	7958      	ldrb	r0, [r3, #5]
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d05e      	beq.n	8004c12 <ParseSnippetCondition+0x33e>
				else if(!button[port].releasedY2Sec){
 8004b54:	799b      	ldrb	r3, [r3, #6]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d100      	bne.n	8004b5c <ParseSnippetCondition+0x288>
 8004b5a:	e083      	b.n	8004c64 <ParseSnippetCondition+0x390>
				else if(!button[port].releasedY3Sec){
 8004b5c:	4459      	add	r1, fp
 8004b5e:	1852      	adds	r2, r2, r1
 8004b60:	79d3      	ldrb	r3, [r2, #7]
 8004b62:	4699      	mov	r9, r3
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004b64:	230d      	movs	r3, #13
 8004b66:	4698      	mov	r8, r3
				else if(!button[port].releasedY3Sec){
 8004b68:	464b      	mov	r3, r9
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d000      	beq.n	8004b70 <ParseSnippetCondition+0x29c>
 8004b6e:	e763      	b.n	8004a38 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004b70:	3314      	adds	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b72:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004b74:	4698      	mov	r8, r3
 8004b76:	435c      	muls	r4, r3
 8004b78:	3b06      	subs	r3, #6
 8004b7a:	192c      	adds	r4, r5, r4
 8004b7c:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b7e:	3010      	adds	r0, #16
 8004b80:	f00d fa4b 	bl	801201a <atoi>
 8004b84:	4642      	mov	r2, r8
 8004b86:	7833      	ldrb	r3, [r6, #0]
 8004b88:	b2c0      	uxtb	r0, r0
 8004b8a:	4353      	muls	r3, r2
 8004b8c:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b8e:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b90:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b92:	9305      	str	r3, [sp, #20]
 8004b94:	464b      	mov	r3, r9
 8004b96:	9303      	str	r3, [sp, #12]
 8004b98:	9302      	str	r3, [sp, #8]
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9004      	str	r0, [sp, #16]
 8004ba2:	001a      	movs	r2, r3
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	e7be      	b.n	8004b26 <ParseSnippetCondition+0x252>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004ba8:	2309      	movs	r3, #9
 8004baa:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bac:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004bae:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bb0:	300f      	adds	r0, #15
 8004bb2:	f00d fa32 	bl	801201a <atoi>
 8004bb6:	7831      	ldrb	r1, [r6, #0]
 8004bb8:	b2c3      	uxtb	r3, r0
 8004bba:	008a      	lsls	r2, r1, #2
 8004bbc:	1852      	adds	r2, r2, r1
 8004bbe:	0092      	lsls	r2, r2, #2
 8004bc0:	18ad      	adds	r5, r5, r2
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bc2:	2201      	movs	r2, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bc4:	712b      	strb	r3, [r5, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bc6:	9205      	str	r2, [sp, #20]
 8004bc8:	4642      	mov	r2, r8
 8004bca:	9204      	str	r2, [sp, #16]
 8004bcc:	9203      	str	r2, [sp, #12]
 8004bce:	9202      	str	r2, [sp, #8]
 8004bd0:	9201      	str	r2, [sp, #4]
 8004bd2:	9200      	str	r2, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4658      	mov	r0, fp
 8004bda:	f006 fcd5 	bl	800b588 <SetButtonEvents>
 8004bde:	7834      	ldrb	r4, [r6, #0]
 8004be0:	e72a      	b.n	8004a38 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004be2:	230a      	movs	r3, #10
 8004be4:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004be6:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004be8:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bea:	300f      	adds	r0, #15
 8004bec:	f00d fa15 	bl	801201a <atoi>
 8004bf0:	7832      	ldrb	r2, [r6, #0]
 8004bf2:	b2c0      	uxtb	r0, r0
 8004bf4:	0093      	lsls	r3, r2, #2
 8004bf6:	189b      	adds	r3, r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bfc:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bfe:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c00:	9305      	str	r3, [sp, #20]
 8004c02:	4643      	mov	r3, r8
 8004c04:	9000      	str	r0, [sp, #0]
 8004c06:	9304      	str	r3, [sp, #16]
 8004c08:	9303      	str	r3, [sp, #12]
 8004c0a:	9302      	str	r3, [sp, #8]
 8004c0c:	9301      	str	r3, [sp, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e7e0      	b.n	8004bd4 <ParseSnippetCondition+0x300>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004c12:	230c      	movs	r3, #12
 8004c14:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c16:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004c18:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c1a:	3010      	adds	r0, #16
 8004c1c:	f00d f9fd 	bl	801201a <atoi>
 8004c20:	7832      	ldrb	r2, [r6, #0]
 8004c22:	b2c0      	uxtb	r0, r0
 8004c24:	0093      	lsls	r3, r2, #2
 8004c26:	189b      	adds	r3, r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004c2c:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c2e:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004c30:	9305      	str	r3, [sp, #20]
 8004c32:	4643      	mov	r3, r8
 8004c34:	9002      	str	r0, [sp, #8]
 8004c36:	9304      	str	r3, [sp, #16]
 8004c38:	9303      	str	r3, [sp, #12]
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e7c8      	b.n	8004bd4 <ParseSnippetCondition+0x300>
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	200016e4 	.word	0x200016e4
 8004c48:	20006890 	.word	0x20006890
 8004c4c:	080175f4 	.word	0x080175f4
 8004c50:	08018388 	.word	0x08018388
 8004c54:	08017bbc 	.word	0x08017bbc
 8004c58:	200023d0 	.word	0x200023d0
 8004c5c:	08017bcc 	.word	0x08017bcc
 8004c60:	08017bdc 	.word	0x08017bdc
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004c64:	0023      	movs	r3, r4
 8004c66:	220d      	movs	r2, #13
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c68:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004c6a:	4453      	add	r3, sl
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	18eb      	adds	r3, r5, r3
 8004c70:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c72:	3010      	adds	r0, #16
 8004c74:	f00d f9d1 	bl	801201a <atoi>
 8004c78:	7832      	ldrb	r2, [r6, #0]
 8004c7a:	b2c0      	uxtb	r0, r0
 8004c7c:	0093      	lsls	r3, r2, #2
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004c84:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c86:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004c88:	9305      	str	r3, [sp, #20]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9003      	str	r0, [sp, #12]
 8004c8e:	9304      	str	r3, [sp, #16]
 8004c90:	9302      	str	r3, [sp, #8]
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	e744      	b.n	8004b26 <ParseSnippetCondition+0x252>

08004c9c <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9e:	46de      	mov	lr, fp
 8004ca0:	4657      	mov	r7, sl
 8004ca2:	4645      	mov	r5, r8
 8004ca4:	464e      	mov	r6, r9
 8004ca6:	468a      	mov	sl, r1
 8004ca8:	b5e0      	push	{r5, r6, r7, lr}
 8004caa:	b08b      	sub	sp, #44	; 0x2c
 8004cac:	9002      	str	r0, [sp, #8]
 8004cae:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	2209      	movs	r2, #9
 8004cb4:	a807      	add	r0, sp, #28
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004cb6:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004cb8:	f00d fc7e 	bl	80125b8 <memset>
 8004cbc:	4bcd      	ldr	r3, [pc, #820]	; (8004ff4 <CLI_CommandParser+0x358>)
				if(id == myID){
 8004cbe:	4656      	mov	r6, sl
 8004cc0:	4698      	mov	r8, r3
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004cc2:	4bcd      	ldr	r3, [pc, #820]	; (8004ff8 <CLI_CommandParser+0x35c>)
				if(id == myID){
 8004cc4:	46ba      	mov	sl, r7
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004cc6:	469b      	mov	fp, r3
 8004cc8:	e02d      	b.n	8004d26 <CLI_CommandParser+0x8a>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004cca:	2206      	movs	r2, #6
 8004ccc:	49cb      	ldr	r1, [pc, #812]	; (8004ffc <CLI_CommandParser+0x360>)
 8004cce:	0028      	movs	r0, r5
 8004cd0:	f00d feb0 	bl	8012a34 <strncmp>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d057      	beq.n	8004d88 <CLI_CommandParser+0xec>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004cd8:	2f02      	cmp	r7, #2
 8004cda:	d100      	bne.n	8004cde <CLI_CommandParser+0x42>
 8004cdc:	e0d2      	b.n	8004e84 <CLI_CommandParser+0x1e8>
			loc =strchr((char* )cInputString,'.');
 8004cde:	212e      	movs	r1, #46	; 0x2e
 8004ce0:	0028      	movs	r0, r5
 8004ce2:	f00d fe91 	bl	8012a08 <strchr>
 8004ce6:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ce8:	d007      	beq.n	8004cfa <CLI_CommandParser+0x5e>
 8004cea:	3803      	subs	r0, #3
 8004cec:	2203      	movs	r2, #3
 8004cee:	4659      	mov	r1, fp
 8004cf0:	f00d fea0 	bl	8012a34 <strncmp>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d000      	beq.n	8004cfa <CLI_CommandParser+0x5e>
 8004cf8:	e079      	b.n	8004dee <CLI_CommandParser+0x152>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004cfa:	2299      	movs	r2, #153	; 0x99
 8004cfc:	0021      	movs	r1, r4
 8004cfe:	0092      	lsls	r2, r2, #2
 8004d00:	0028      	movs	r0, r5
 8004d02:	f008 fa7f 	bl	800d204 <FreeRTOS_CLIProcessCommand>
 8004d06:	4682      	mov	sl, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d08:	7823      	ldrb	r3, [r4, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d139      	bne.n	8004d82 <CLI_CommandParser+0xe6>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004d0e:	0020      	movs	r0, r4
 8004d10:	f7fb fa02 	bl	8000118 <strlen>
 8004d14:	2100      	movs	r1, #0
 8004d16:	0002      	movs	r2, r0
 8004d18:	0020      	movs	r0, r4
 8004d1a:	f00d fc4d 	bl	80125b8 <memset>
	} while(xReturned != pdFALSE);
 8004d1e:	4653      	mov	r3, sl
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d100      	bne.n	8004d26 <CLI_CommandParser+0x8a>
 8004d24:	e1d0      	b.n	80050c8 <CLI_CommandParser+0x42c>
		StringToLowerCase((char* )cInputString);
 8004d26:	0028      	movs	r0, r5
 8004d28:	f7ff fdc0 	bl	80048ac <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004d2c:	2336      	movs	r3, #54	; 0x36
 8004d2e:	4699      	mov	r9, r3
 8004d30:	4643      	mov	r3, r8
 8004d32:	464a      	mov	r2, r9
 8004d34:	5c9f      	ldrb	r7, [r3, r2]
 8004d36:	2f00      	cmp	r7, #0
 8004d38:	d1c7      	bne.n	8004cca <CLI_CommandParser+0x2e>
 8004d3a:	3a33      	subs	r2, #51	; 0x33
 8004d3c:	49b0      	ldr	r1, [pc, #704]	; (8005000 <CLI_CommandParser+0x364>)
 8004d3e:	0028      	movs	r0, r5
 8004d40:	f00d fe78 	bl	8012a34 <strncmp>
 8004d44:	1e07      	subs	r7, r0, #0
 8004d46:	d1ca      	bne.n	8004cde <CLI_CommandParser+0x42>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004d48:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 8004d4a:	f7ff fdc3 	bl	80048d4 <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d000      	beq.n	8004d54 <CLI_CommandParser+0xb8>
 8004d52:	e09f      	b.n	8004e94 <CLI_CommandParser+0x1f8>
				recordSnippet = SNIPPET_COMMANDS;
 8004d54:	2302      	movs	r3, #2
 8004d56:	4642      	mov	r2, r8
 8004d58:	4649      	mov	r1, r9
 8004d5a:	5453      	strb	r3, [r2, r1]
				pcOutputString[0] ='\r';
 8004d5c:	330b      	adds	r3, #11
 8004d5e:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d60:	2e00      	cmp	r6, #0
 8004d62:	d027      	beq.n	8004db4 <CLI_CommandParser+0x118>
 8004d64:	2300      	movs	r3, #0
 8004d66:	469a      	mov	sl, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004d68:	0020      	movs	r0, r4
 8004d6a:	f7fb f9d5 	bl	8000118 <strlen>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	425b      	negs	r3, r3
 8004d72:	b282      	uxth	r2, r0
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	0021      	movs	r1, r4
 8004d78:	3333      	adds	r3, #51	; 0x33
 8004d7a:	9802      	ldr	r0, [sp, #8]
 8004d7c:	f008 f818 	bl	800cdb0 <writePxMutex>
 8004d80:	e7c5      	b.n	8004d0e <CLI_CommandParser+0x72>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d82:	2e00      	cmp	r6, #0
 8004d84:	d0c3      	beq.n	8004d0e <CLI_CommandParser+0x72>
 8004d86:	e7ef      	b.n	8004d68 <CLI_CommandParser+0xcc>
			recordSnippet =0;
 8004d88:	4643      	mov	r3, r8
 8004d8a:	464a      	mov	r2, r9
 8004d8c:	5498      	strb	r0, [r3, r2]
			snippets[numOfRecordedSnippets - 1].state = true;
 8004d8e:	781a      	ldrb	r2, [r3, #0]
 8004d90:	3a01      	subs	r2, #1
 8004d92:	0093      	lsls	r3, r2, #2
 8004d94:	189b      	adds	r3, r3, r2
 8004d96:	4a9b      	ldr	r2, [pc, #620]	; (8005004 <CLI_CommandParser+0x368>)
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	18d3      	adds	r3, r2, r3
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004da0:	f004 fe1c 	bl	80099dc <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004da4:	2241      	movs	r2, #65	; 0x41
 8004da6:	4998      	ldr	r1, [pc, #608]	; (8005008 <CLI_CommandParser+0x36c>)
 8004da8:	0020      	movs	r0, r4
 8004daa:	f00d fbfc 	bl	80125a6 <memcpy>
 8004dae:	7823      	ldrb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1d5      	bne.n	8004d60 <CLI_CommandParser+0xc4>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004db4:	0020      	movs	r0, r4
 8004db6:	f7fb f9af 	bl	8000118 <strlen>
 8004dba:	2100      	movs	r1, #0
 8004dbc:	0002      	movs	r2, r0
 8004dbe:	0020      	movs	r0, r4
 8004dc0:	46b2      	mov	sl, r6
 8004dc2:	f00d fbf9 	bl	80125b8 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004dc6:	2209      	movs	r2, #9
 8004dc8:	2100      	movs	r1, #0
 8004dca:	a807      	add	r0, sp, #28
 8004dcc:	f00d fbf4 	bl	80125b8 <memset>
	if(!recordSnippet && enableOutput)
 8004dd0:	2336      	movs	r3, #54	; 0x36
 8004dd2:	4642      	mov	r2, r8
 8004dd4:	5cd3      	ldrb	r3, [r2, r3]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d102      	bne.n	8004de0 <CLI_CommandParser+0x144>
 8004dda:	4653      	mov	r3, sl
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d16a      	bne.n	8004eb6 <CLI_CommandParser+0x21a>
}
 8004de0:	b00b      	add	sp, #44	; 0x2c
 8004de2:	bc3c      	pop	{r2, r3, r4, r5}
 8004de4:	4690      	mov	r8, r2
 8004de6:	4699      	mov	r9, r3
 8004de8:	46a2      	mov	sl, r4
 8004dea:	46ab      	mov	fp, r5
 8004dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004dee:	f00d f97f 	bl	80120f0 <__locale_ctype_ptr>
 8004df2:	787b      	ldrb	r3, [r7, #1]
 8004df4:	18c0      	adds	r0, r0, r3
 8004df6:	7843      	ldrb	r3, [r0, #1]
 8004df8:	075b      	lsls	r3, r3, #29
 8004dfa:	d500      	bpl.n	8004dfe <CLI_CommandParser+0x162>
 8004dfc:	e77d      	b.n	8004cfa <CLI_CommandParser+0x5e>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004dfe:	1b7a      	subs	r2, r7, r5
 8004e00:	0029      	movs	r1, r5
 8004e02:	a807      	add	r0, sp, #28
 8004e04:	f00d fe27 	bl	8012a56 <strncpy>
				id =GetID(idString);
 8004e08:	a807      	add	r0, sp, #28
 8004e0a:	f7ff fa1d 	bl	8004248 <GetID>
				if(id == myID){
 8004e0e:	4b7f      	ldr	r3, [pc, #508]	; (800500c <CLI_CommandParser+0x370>)
				id =GetID(idString);
 8004e10:	9003      	str	r0, [sp, #12]
				if(id == myID){
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	9305      	str	r3, [sp, #20]
 8004e16:	4298      	cmp	r0, r3
 8004e18:	d057      	beq.n	8004eca <CLI_CommandParser+0x22e>
				else if(id == BOS_ERR_WrongName){
 8004e1a:	9b03      	ldr	r3, [sp, #12]
 8004e1c:	2b64      	cmp	r3, #100	; 0x64
 8004e1e:	d100      	bne.n	8004e22 <CLI_CommandParser+0x186>
 8004e20:	e0da      	b.n	8004fd8 <CLI_CommandParser+0x33c>
				else if(id == BOS_ERR_WrongID){
 8004e22:	9b03      	ldr	r3, [sp, #12]
 8004e24:	2b66      	cmp	r3, #102	; 0x66
 8004e26:	d100      	bne.n	8004e2a <CLI_CommandParser+0x18e>
 8004e28:	e0dd      	b.n	8004fe6 <CLI_CommandParser+0x34a>
 8004e2a:	1c7b      	adds	r3, r7, #1
 8004e2c:	9304      	str	r3, [sp, #16]
				else if(id == BOS_BROADCAST){
 8004e2e:	9b03      	ldr	r3, [sp, #12]
 8004e30:	2bff      	cmp	r3, #255	; 0xff
 8004e32:	d100      	bne.n	8004e36 <CLI_CommandParser+0x19a>
 8004e34:	e08b      	b.n	8004f4e <CLI_CommandParser+0x2b2>
				else if((uint8_t )id == BOS_MULTICAST){
 8004e36:	466b      	mov	r3, sp
 8004e38:	7b1b      	ldrb	r3, [r3, #12]
 8004e3a:	4699      	mov	r9, r3
 8004e3c:	2bfe      	cmp	r3, #254	; 0xfe
 8004e3e:	d100      	bne.n	8004e42 <CLI_CommandParser+0x1a6>
 8004e40:	e102      	b.n	8005048 <CLI_CommandParser+0x3ac>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004e42:	2206      	movs	r2, #6
 8004e44:	4972      	ldr	r1, [pc, #456]	; (8005010 <CLI_CommandParser+0x374>)
 8004e46:	9804      	ldr	r0, [sp, #16]
 8004e48:	f00d fdf4 	bl	8012a34 <strncmp>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d144      	bne.n	8004eda <CLI_CommandParser+0x23e>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004e50:	4b70      	ldr	r3, [pc, #448]	; (8005014 <CLI_CommandParser+0x378>)
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e52:	2200      	movs	r2, #0
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004e54:	7018      	strb	r0, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e56:	2119      	movs	r1, #25
 8004e58:	4648      	mov	r0, r9
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004e5a:	469a      	mov	sl, r3
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e5c:	f003 f964 	bl	8008128 <SendMessageToModule>
						osDelay(100);
 8004e60:	2064      	movs	r0, #100	; 0x64
 8004e62:	f008 f93f 	bl	800d0e4 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004e66:	4b6c      	ldr	r3, [pc, #432]	; (8005018 <CLI_CommandParser+0x37c>)
 8004e68:	4649      	mov	r1, r9
 8004e6a:	781a      	ldrb	r2, [r3, #0]
 8004e6c:	4b67      	ldr	r3, [pc, #412]	; (800500c <CLI_CommandParser+0x370>)
 8004e6e:	7818      	ldrb	r0, [r3, #0]
 8004e70:	2300      	movs	r3, #0
 8004e72:	f004 fed7 	bl	8009c24 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8004e76:	4653      	mov	r3, sl
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b60      	cmp	r3, #96	; 0x60
 8004e7c:	d100      	bne.n	8004e80 <CLI_CommandParser+0x1e4>
 8004e7e:	e095      	b.n	8004fac <CLI_CommandParser+0x310>
 8004e80:	7823      	ldrb	r3, [r4, #0]
 8004e82:	e795      	b.n	8004db0 <CLI_CommandParser+0x114>
 8004e84:	0028      	movs	r0, r5
 8004e86:	f7ff fcb9 	bl	80047fc <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d10c      	bne.n	8004ea8 <CLI_CommandParser+0x20c>
				pcOutputString[0] ='\r';
 8004e8e:	230d      	movs	r3, #13
 8004e90:	7023      	strb	r3, [r4, #0]
 8004e92:	e765      	b.n	8004d60 <CLI_CommandParser+0xc4>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e94:	2252      	movs	r2, #82	; 0x52
 8004e96:	4961      	ldr	r1, [pc, #388]	; (800501c <CLI_CommandParser+0x380>)
 8004e98:	0020      	movs	r0, r4
 8004e9a:	f00d fb84 	bl	80125a6 <memcpy>
				recordSnippet =0;
 8004e9e:	4643      	mov	r3, r8
 8004ea0:	464a      	mov	r2, r9
 8004ea2:	549f      	strb	r7, [r3, r2]
 8004ea4:	7823      	ldrb	r3, [r4, #0]
 8004ea6:	e783      	b.n	8004db0 <CLI_CommandParser+0x114>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004ea8:	2252      	movs	r2, #82	; 0x52
 8004eaa:	495c      	ldr	r1, [pc, #368]	; (800501c <CLI_CommandParser+0x380>)
 8004eac:	0020      	movs	r0, r4
 8004eae:	f00d fb7a 	bl	80125a6 <memcpy>
 8004eb2:	7823      	ldrb	r3, [r4, #0]
 8004eb4:	e77c      	b.n	8004db0 <CLI_CommandParser+0x114>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	425b      	negs	r3, r3
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	2238      	movs	r2, #56	; 0x38
 8004ebe:	3333      	adds	r3, #51	; 0x33
 8004ec0:	4957      	ldr	r1, [pc, #348]	; (8005020 <CLI_CommandParser+0x384>)
 8004ec2:	9802      	ldr	r0, [sp, #8]
 8004ec4:	f007 ff74 	bl	800cdb0 <writePxMutex>
}
 8004ec8:	e78a      	b.n	8004de0 <CLI_CommandParser+0x144>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004eca:	2299      	movs	r2, #153	; 0x99
 8004ecc:	1c78      	adds	r0, r7, #1
 8004ece:	0092      	lsls	r2, r2, #2
 8004ed0:	0021      	movs	r1, r4
 8004ed2:	f008 f997 	bl	800d204 <FreeRTOS_CLIProcessCommand>
 8004ed6:	4682      	mov	sl, r0
 8004ed8:	e716      	b.n	8004d08 <CLI_CommandParser+0x6c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004eda:	0028      	movs	r0, r5
 8004edc:	f7fb f91c 	bl	8000118 <strlen>
 8004ee0:	0007      	movs	r7, r0
 8004ee2:	a807      	add	r0, sp, #28
 8004ee4:	f7fb f918 	bl	8000118 <strlen>
 8004ee8:	4682      	mov	sl, r0
 8004eea:	1e7a      	subs	r2, r7, #1
 8004eec:	1a12      	subs	r2, r2, r0
 8004eee:	9904      	ldr	r1, [sp, #16]
 8004ef0:	484c      	ldr	r0, [pc, #304]	; (8005024 <CLI_CommandParser+0x388>)
 8004ef2:	f00d fdb0 	bl	8012a56 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004ef6:	0028      	movs	r0, r5
 8004ef8:	f7fb f90e 	bl	8000118 <strlen>
 8004efc:	4653      	mov	r3, sl
 8004efe:	3801      	subs	r0, #1
 8004f00:	1ac2      	subs	r2, r0, r3
 8004f02:	b292      	uxth	r2, r2
 8004f04:	2117      	movs	r1, #23
 8004f06:	4648      	mov	r0, r9
 8004f08:	f003 f90e 	bl	8008128 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8004f0c:	9a03      	ldr	r2, [sp, #12]
 8004f0e:	4946      	ldr	r1, [pc, #280]	; (8005028 <CLI_CommandParser+0x38c>)
 8004f10:	0020      	movs	r0, r4
 8004f12:	f00d fd4b 	bl	80129ac <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8004f16:	7823      	ldrb	r3, [r4, #0]
 8004f18:	0020      	movs	r0, r4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00d      	beq.n	8004f3a <CLI_CommandParser+0x29e>
 8004f1e:	f7fb f8fb 	bl	8000118 <strlen>
 8004f22:	0002      	movs	r2, r0
 8004f24:	2e00      	cmp	r6, #0
 8004f26:	d00b      	beq.n	8004f40 <CLI_CommandParser+0x2a4>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8004f28:	2301      	movs	r3, #1
 8004f2a:	b282      	uxth	r2, r0
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	0021      	movs	r1, r4
 8004f30:	3331      	adds	r3, #49	; 0x31
 8004f32:	9802      	ldr	r0, [sp, #8]
 8004f34:	f007 ff3c 	bl	800cdb0 <writePxMutex>
 8004f38:	0020      	movs	r0, r4
 8004f3a:	f7fb f8ed 	bl	8000118 <strlen>
 8004f3e:	0002      	movs	r2, r0
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f40:	2100      	movs	r1, #0
 8004f42:	0020      	movs	r0, r4
 8004f44:	f00d fb38 	bl	80125b8 <memset>
 8004f48:	4b32      	ldr	r3, [pc, #200]	; (8005014 <CLI_CommandParser+0x378>)
 8004f4a:	469a      	mov	sl, r3
 8004f4c:	e793      	b.n	8004e76 <CLI_CommandParser+0x1da>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004f4e:	221a      	movs	r2, #26
 8004f50:	2100      	movs	r1, #0
 8004f52:	4836      	ldr	r0, [pc, #216]	; (800502c <CLI_CommandParser+0x390>)
 8004f54:	f00d fb30 	bl	80125b8 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f58:	0028      	movs	r0, r5
 8004f5a:	f7fb f8dd 	bl	8000118 <strlen>
 8004f5e:	0007      	movs	r7, r0
 8004f60:	a807      	add	r0, sp, #28
 8004f62:	f7fb f8d9 	bl	8000118 <strlen>
 8004f66:	4681      	mov	r9, r0
 8004f68:	3f01      	subs	r7, #1
 8004f6a:	1a3a      	subs	r2, r7, r0
 8004f6c:	9f04      	ldr	r7, [sp, #16]
 8004f6e:	482d      	ldr	r0, [pc, #180]	; (8005024 <CLI_CommandParser+0x388>)
 8004f70:	0039      	movs	r1, r7
 8004f72:	f00d fd70 	bl	8012a56 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f76:	0028      	movs	r0, r5
 8004f78:	f7fb f8ce 	bl	8000118 <strlen>
 8004f7c:	464b      	mov	r3, r9
 8004f7e:	1ac3      	subs	r3, r0, r3
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2217      	movs	r2, #23
 8004f84:	21ff      	movs	r1, #255	; 0xff
 8004f86:	9805      	ldr	r0, [sp, #20]
 8004f88:	f003 f888 	bl	800809c <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f8c:	2299      	movs	r2, #153	; 0x99
 8004f8e:	0021      	movs	r1, r4
 8004f90:	0092      	lsls	r2, r2, #2
 8004f92:	0038      	movs	r0, r7
 8004f94:	f008 f936 	bl	800d204 <FreeRTOS_CLIProcessCommand>
 8004f98:	4682      	mov	sl, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004f9a:	0020      	movs	r0, r4
 8004f9c:	f7fb f8bc 	bl	8000118 <strlen>
 8004fa0:	221d      	movs	r2, #29
 8004fa2:	1820      	adds	r0, r4, r0
 8004fa4:	4922      	ldr	r1, [pc, #136]	; (8005030 <CLI_CommandParser+0x394>)
 8004fa6:	f00d fafe 	bl	80125a6 <memcpy>
 8004faa:	e6ad      	b.n	8004d08 <CLI_CommandParser+0x6c>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004fac:	21fa      	movs	r1, #250	; 0xfa
 8004fae:	2001      	movs	r0, #1
 8004fb0:	0089      	lsls	r1, r1, #2
 8004fb2:	f009 fb4f 	bl	800e654 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004fb6:	4b1f      	ldr	r3, [pc, #124]	; (8005034 <CLI_CommandParser+0x398>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d100      	bne.n	8004fc0 <CLI_CommandParser+0x324>
 8004fbe:	e75f      	b.n	8004e80 <CLI_CommandParser+0x1e4>
							++timedoutMsg;
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <CLI_CommandParser+0x39c>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004fc2:	491e      	ldr	r1, [pc, #120]	; (800503c <CLI_CommandParser+0x3a0>)
							++timedoutMsg;
 8004fc4:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004fc6:	0020      	movs	r0, r4
							++timedoutMsg;
 8004fc8:	3301      	adds	r3, #1
 8004fca:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004fcc:	9b03      	ldr	r3, [sp, #12]
 8004fce:	0022      	movs	r2, r4
 8004fd0:	f00d fcec 	bl	80129ac <sprintf>
 8004fd4:	7823      	ldrb	r3, [r4, #0]
 8004fd6:	e6eb      	b.n	8004db0 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004fd8:	2227      	movs	r2, #39	; 0x27
 8004fda:	4919      	ldr	r1, [pc, #100]	; (8005040 <CLI_CommandParser+0x3a4>)
 8004fdc:	0020      	movs	r0, r4
 8004fde:	f00d fae2 	bl	80125a6 <memcpy>
 8004fe2:	7823      	ldrb	r3, [r4, #0]
 8004fe4:	e6e4      	b.n	8004db0 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004fe6:	2225      	movs	r2, #37	; 0x25
 8004fe8:	4916      	ldr	r1, [pc, #88]	; (8005044 <CLI_CommandParser+0x3a8>)
 8004fea:	0020      	movs	r0, r4
 8004fec:	f00d fadb 	bl	80125a6 <memcpy>
 8004ff0:	7823      	ldrb	r3, [r4, #0]
 8004ff2:	e6dd      	b.n	8004db0 <CLI_CommandParser+0x114>
 8004ff4:	200016e4 	.word	0x200016e4
 8004ff8:	08017c90 	.word	0x08017c90
 8004ffc:	08017c44 	.word	0x08017c44
 8005000:	08017bec 	.word	0x08017bec
 8005004:	20006890 	.word	0x20006890
 8005008:	08017c4c 	.word	0x08017c4c
 800500c:	20000aa8 	.word	0x20000aa8
 8005010:	08017d30 	.word	0x08017d30
 8005014:	200067f4 	.word	0x200067f4
 8005018:	20000c38 	.word	0x20000c38
 800501c:	08017bf0 	.word	0x08017bf0
 8005020:	08017d7c 	.word	0x08017d7c
 8005024:	20000b4c 	.word	0x20000b4c
 8005028:	08017d38 	.word	0x08017d38
 800502c:	20000db8 	.word	0x20000db8
 8005030:	08017ce4 	.word	0x08017ce4
 8005034:	20000c4c 	.word	0x20000c4c
 8005038:	20001fb4 	.word	0x20001fb4
 800503c:	08017d5c 	.word	0x08017d5c
 8005040:	08017c94 	.word	0x08017c94
 8005044:	08017cbc 	.word	0x08017cbc
					group =id >> 8;
 8005048:	4640      	mov	r0, r8
 800504a:	2237      	movs	r2, #55	; 0x37
 800504c:	9b03      	ldr	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800504e:	2100      	movs	r1, #0
					group =id >> 8;
 8005050:	121f      	asrs	r7, r3, #8
 8005052:	b2fb      	uxtb	r3, r7
 8005054:	5483      	strb	r3, [r0, r2]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005056:	3a1d      	subs	r2, #29
 8005058:	481c      	ldr	r0, [pc, #112]	; (80050cc <CLI_CommandParser+0x430>)
					group =id >> 8;
 800505a:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800505c:	f00d faac 	bl	80125b8 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005060:	0028      	movs	r0, r5
 8005062:	f7fb f859 	bl	8000118 <strlen>
 8005066:	0007      	movs	r7, r0
 8005068:	a807      	add	r0, sp, #28
 800506a:	f7fb f855 	bl	8000118 <strlen>
 800506e:	4681      	mov	r9, r0
 8005070:	3f01      	subs	r7, #1
 8005072:	1a3a      	subs	r2, r7, r0
 8005074:	9904      	ldr	r1, [sp, #16]
 8005076:	4816      	ldr	r0, [pc, #88]	; (80050d0 <CLI_CommandParser+0x434>)
 8005078:	f00d fced 	bl	8012a56 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 800507c:	0028      	movs	r0, r5
 800507e:	f7fb f84b 	bl	8000118 <strlen>
 8005082:	464f      	mov	r7, r9
 8005084:	1bc3      	subs	r3, r0, r7
 8005086:	b29b      	uxth	r3, r3
 8005088:	2217      	movs	r2, #23
 800508a:	9903      	ldr	r1, [sp, #12]
 800508c:	9805      	ldr	r0, [sp, #20]
 800508e:	f003 f805 	bl	800809c <BroadcastMessage>
					if(InGroup(myID,group))
 8005092:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <CLI_CommandParser+0x438>)
 8005094:	4a10      	ldr	r2, [pc, #64]	; (80050d8 <CLI_CommandParser+0x43c>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	4641      	mov	r1, r8
 800509a:	3b01      	subs	r3, #1
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	5a9b      	ldrh	r3, [r3, r2]
 80050a0:	2237      	movs	r2, #55	; 0x37
 80050a2:	5c8a      	ldrb	r2, [r1, r2]
 80050a4:	4113      	asrs	r3, r2
 80050a6:	07db      	lsls	r3, r3, #31
 80050a8:	d406      	bmi.n	80050b8 <CLI_CommandParser+0x41c>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 80050aa:	ab07      	add	r3, sp, #28
 80050ac:	0022      	movs	r2, r4
 80050ae:	490b      	ldr	r1, [pc, #44]	; (80050dc <CLI_CommandParser+0x440>)
 80050b0:	0020      	movs	r0, r4
 80050b2:	f00d fc7b 	bl	80129ac <sprintf>
 80050b6:	e627      	b.n	8004d08 <CLI_CommandParser+0x6c>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80050b8:	2299      	movs	r2, #153	; 0x99
 80050ba:	0021      	movs	r1, r4
 80050bc:	0092      	lsls	r2, r2, #2
 80050be:	9804      	ldr	r0, [sp, #16]
 80050c0:	f008 f8a0 	bl	800d204 <FreeRTOS_CLIProcessCommand>
 80050c4:	4682      	mov	sl, r0
 80050c6:	e7f0      	b.n	80050aa <CLI_CommandParser+0x40e>
 80050c8:	46b2      	mov	sl, r6
 80050ca:	e67c      	b.n	8004dc6 <CLI_CommandParser+0x12a>
 80050cc:	20000db8 	.word	0x20000db8
 80050d0:	20000b4c 	.word	0x20000b4c
 80050d4:	20000aa8 	.word	0x20000aa8
 80050d8:	20000aac 	.word	0x20000aac
 80050dc:	08017d04 	.word	0x08017d04

080050e0 <prvCLITask>:
void prvCLITask(void *pvParameters){
 80050e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e2:	46de      	mov	lr, fp
 80050e4:	4645      	mov	r5, r8
 80050e6:	4657      	mov	r7, sl
 80050e8:	464e      	mov	r6, r9
 80050ea:	b5e0      	push	{r5, r6, r7, lr}
 80050ec:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 80050ee:	ab02      	add	r3, sp, #8
 80050f0:	469c      	mov	ip, r3
 80050f2:	250f      	movs	r5, #15
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80050f4:	2101      	movs	r1, #1
	char cRxedChar ='\0';
 80050f6:	2300      	movs	r3, #0
 80050f8:	4465      	add	r5, ip
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80050fa:	4249      	negs	r1, r1
 80050fc:	2001      	movs	r0, #1
	char cRxedChar ='\0';
 80050fe:	702b      	strb	r3, [r5, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005100:	f009 faa8 	bl	800e654 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005104:	f008 f8f6 	bl	800d2f4 <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005108:	23e1      	movs	r3, #225	; 0xe1
 800510a:	4a50      	ldr	r2, [pc, #320]	; (800524c <prvCLITask+0x16c>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800510c:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 800510e:	6892      	ldr	r2, [r2, #8]
 8005110:	031b      	lsls	r3, r3, #12
 8005112:	429a      	cmp	r2, r3
 8005114:	d100      	bne.n	8005118 <prvCLITask+0x38>
 8005116:	e094      	b.n	8005242 <prvCLITask+0x162>
 8005118:	4b4d      	ldr	r3, [pc, #308]	; (8005250 <prvCLITask+0x170>)
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800511a:	2401      	movs	r4, #1
 800511c:	001e      	movs	r6, r3
 800511e:	7819      	ldrb	r1, [r3, #0]
			if(port != PcPort)
 8005120:	428c      	cmp	r4, r1
 8005122:	d005      	beq.n	8005130 <prvCLITask+0x50>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005124:	21e1      	movs	r1, #225	; 0xe1
 8005126:	0020      	movs	r0, r4
 8005128:	0309      	lsls	r1, r1, #12
 800512a:	f007 fe93 	bl	800ce54 <UpdateBaudrate>
 800512e:	7831      	ldrb	r1, [r6, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005130:	3401      	adds	r4, #1
 8005132:	b2e4      	uxtb	r4, r4
 8005134:	2c06      	cmp	r4, #6
 8005136:	d1f3      	bne.n	8005120 <prvCLITask+0x40>
 8005138:	46b1      	mov	r9, r6
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 800513a:	4846      	ldr	r0, [pc, #280]	; (8005254 <prvCLITask+0x174>)
 800513c:	4b46      	ldr	r3, [pc, #280]	; (8005258 <prvCLITask+0x178>)
 800513e:	0004      	movs	r4, r0
 8005140:	881a      	ldrh	r2, [r3, #0]
 8005142:	3438      	adds	r4, #56	; 0x38
 8005144:	0053      	lsls	r3, r2, #1
 8005146:	189b      	adds	r3, r3, r2
 8005148:	4a44      	ldr	r2, [pc, #272]	; (800525c <prvCLITask+0x17c>)
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	189b      	adds	r3, r3, r2
 800514e:	4a44      	ldr	r2, [pc, #272]	; (8005260 <prvCLITask+0x180>)
 8005150:	4683      	mov	fp, r0
 8005152:	7812      	ldrb	r2, [r2, #0]
 8005154:	0020      	movs	r0, r4
 8005156:	9100      	str	r1, [sp, #0]
 8005158:	4942      	ldr	r1, [pc, #264]	; (8005264 <prvCLITask+0x184>)
 800515a:	f00d fc27 	bl	80129ac <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 800515e:	464b      	mov	r3, r9
 8005160:	22a4      	movs	r2, #164	; 0xa4
 8005162:	4941      	ldr	r1, [pc, #260]	; (8005268 <prvCLITask+0x188>)
 8005164:	0092      	lsls	r2, r2, #2
 8005166:	7818      	ldrb	r0, [r3, #0]
 8005168:	230a      	movs	r3, #10
 800516a:	f007 fe53 	bl	800ce14 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 800516e:	0020      	movs	r0, r4
 8005170:	f7fa ffd2 	bl	8000118 <strlen>
 8005174:	464b      	mov	r3, r9
 8005176:	b282      	uxth	r2, r0
 8005178:	0021      	movs	r1, r4
 800517a:	7818      	ldrb	r0, [r3, #0]
 800517c:	230a      	movs	r3, #10
 800517e:	f007 fe49 	bl	800ce14 <writePxITMutex>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005182:	2214      	movs	r2, #20
 8005184:	4694      	mov	ip, r2
 8005186:	4b39      	ldr	r3, [pc, #228]	; (800526c <prvCLITask+0x18c>)
	int8_t cInputIndex =0, *pcOutputString;
 8005188:	2600      	movs	r6, #0
 800518a:	4698      	mov	r8, r3
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800518c:	4b38      	ldr	r3, [pc, #224]	; (8005270 <prvCLITask+0x190>)
 800518e:	4c39      	ldr	r4, [pc, #228]	; (8005274 <prvCLITask+0x194>)
 8005190:	4463      	add	r3, ip
 8005192:	469a      	mov	sl, r3
				strcpy((char* )cLastInputString,(char* )cInputString);
 8005194:	2360      	movs	r3, #96	; 0x60
 8005196:	469c      	mov	ip, r3
			Rx_Data[PcPort - 1] = 0;
 8005198:	2700      	movs	r7, #0
				strcpy((char* )cLastInputString,(char* )cInputString);
 800519a:	44e3      	add	fp, ip
 800519c:	e001      	b.n	80051a2 <prvCLITask+0xc2>
		taskYIELD();
 800519e:	f009 fcfd 	bl	800eb9c <vPortYield>
		if(Read_In_CLI_Task_Flag == 1)
 80051a2:	7823      	ldrb	r3, [r4, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d1fa      	bne.n	800519e <prvCLITask+0xbe>
			cRxedChar = Rx_Data[PcPort - 1];
 80051a8:	464b      	mov	r3, r9
 80051aa:	4642      	mov	r2, r8
 80051ac:	7818      	ldrb	r0, [r3, #0]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80051ae:	0029      	movs	r1, r5
			cRxedChar = Rx_Data[PcPort - 1];
 80051b0:	1e43      	subs	r3, r0, #1
 80051b2:	5cd2      	ldrb	r2, [r2, r3]
			Read_In_CLI_Task_Flag = 0;
 80051b4:	7027      	strb	r7, [r4, #0]
			cRxedChar = Rx_Data[PcPort - 1];
 80051b6:	702a      	strb	r2, [r5, #0]
			Rx_Data[PcPort - 1] = 0;
 80051b8:	4642      	mov	r2, r8
 80051ba:	54d7      	strb	r7, [r2, r3]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80051bc:	230a      	movs	r3, #10
 80051be:	2201      	movs	r2, #1
 80051c0:	f007 fe28 	bl	800ce14 <writePxITMutex>
			if(cRxedChar == '\r'){
 80051c4:	782b      	ldrb	r3, [r5, #0]
 80051c6:	2b0d      	cmp	r3, #13
 80051c8:	d01b      	beq.n	8005202 <prvCLITask+0x122>
				if(cRxedChar == '\n'){
 80051ca:	2b0a      	cmp	r3, #10
 80051cc:	d0e7      	beq.n	800519e <prvCLITask+0xbe>
				else if(cRxedChar == '\b' || cRxedChar == 127 ){
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d00d      	beq.n	80051ee <prvCLITask+0x10e>
 80051d2:	2b7f      	cmp	r3, #127	; 0x7f
 80051d4:	d00b      	beq.n	80051ee <prvCLITask+0x10e>
					if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80051d6:	001a      	movs	r2, r3
 80051d8:	3a20      	subs	r2, #32
 80051da:	2a5e      	cmp	r2, #94	; 0x5e
 80051dc:	d8df      	bhi.n	800519e <prvCLITask+0xbe>
						if(cInputIndex < cmdMAX_INPUT_SIZE){
 80051de:	2e31      	cmp	r6, #49	; 0x31
 80051e0:	dcdd      	bgt.n	800519e <prvCLITask+0xbe>
							cInputString[cInputIndex] =cRxedChar;
 80051e2:	4a23      	ldr	r2, [pc, #140]	; (8005270 <prvCLITask+0x190>)
 80051e4:	1992      	adds	r2, r2, r6
							cInputIndex++;
 80051e6:	3601      	adds	r6, #1
							cInputString[cInputIndex] =cRxedChar;
 80051e8:	7513      	strb	r3, [r2, #20]
							cInputIndex++;
 80051ea:	b276      	sxtb	r6, r6
 80051ec:	e7d7      	b.n	800519e <prvCLITask+0xbe>
					if(cInputIndex > 0){
 80051ee:	2e00      	cmp	r6, #0
 80051f0:	d0d5      	beq.n	800519e <prvCLITask+0xbe>
						cInputString[cInputIndex] ='\0';
 80051f2:	4a1f      	ldr	r2, [pc, #124]	; (8005270 <prvCLITask+0x190>)
						cInputIndex--;
 80051f4:	3e01      	subs	r6, #1
						cInputString[cInputIndex] ='\0';
 80051f6:	4694      	mov	ip, r2
						cInputIndex--;
 80051f8:	b2f3      	uxtb	r3, r6
 80051fa:	b25e      	sxtb	r6, r3
						cInputString[cInputIndex] ='\0';
 80051fc:	4463      	add	r3, ip
 80051fe:	751f      	strb	r7, [r3, #20]
 8005200:	e7cd      	b.n	800519e <prvCLITask+0xbe>
				writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005202:	464b      	mov	r3, r9
 8005204:	2202      	movs	r2, #2
 8005206:	7818      	ldrb	r0, [r3, #0]
 8005208:	491b      	ldr	r1, [pc, #108]	; (8005278 <prvCLITask+0x198>)
 800520a:	230a      	movs	r3, #10
 800520c:	f007 fe02 	bl	800ce14 <writePxITMutex>
				if(cInputIndex == 0){
 8005210:	2e00      	cmp	r6, #0
 8005212:	d011      	beq.n	8005238 <prvCLITask+0x158>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005214:	464b      	mov	r3, r9
 8005216:	4652      	mov	r2, sl
 8005218:	7818      	ldrb	r0, [r3, #0]
 800521a:	2101      	movs	r1, #1
 800521c:	9b03      	ldr	r3, [sp, #12]
 800521e:	f7ff fd3d 	bl	8004c9c <CLI_CommandParser>
				strcpy((char* )cLastInputString,(char* )cInputString);
 8005222:	4651      	mov	r1, sl
 8005224:	4658      	mov	r0, fp
 8005226:	f00d fbfd 	bl	8012a24 <strcpy>
				memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 800522a:	2232      	movs	r2, #50	; 0x32
 800522c:	2100      	movs	r1, #0
 800522e:	4650      	mov	r0, sl
 8005230:	f00d f9c2 	bl	80125b8 <memset>
				cInputIndex =0;
 8005234:	2600      	movs	r6, #0
 8005236:	e7b2      	b.n	800519e <prvCLITask+0xbe>
					strcpy((char* )cInputString,(char* )cLastInputString);
 8005238:	4659      	mov	r1, fp
 800523a:	4650      	mov	r0, sl
 800523c:	f00d fbf2 	bl	8012a24 <strcpy>
 8005240:	e7e8      	b.n	8005214 <prvCLITask+0x134>
 8005242:	4b03      	ldr	r3, [pc, #12]	; (8005250 <prvCLITask+0x170>)
 8005244:	4699      	mov	r9, r3
 8005246:	7819      	ldrb	r1, [r3, #0]
 8005248:	e777      	b.n	800513a <prvCLITask+0x5a>
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	20006874 	.word	0x20006874
 8005250:	20000c38 	.word	0x20000c38
 8005254:	200016e4 	.word	0x200016e4
 8005258:	20000038 	.word	0x20000038
 800525c:	08016dfc 	.word	0x08016dfc
 8005260:	20000aa8 	.word	0x20000aa8
 8005264:	08017db8 	.word	0x08017db8
 8005268:	08017de4 	.word	0x08017de4
 800526c:	20001ca4 	.word	0x20001ca4
 8005270:	20001764 	.word	0x20001764
 8005274:	200016e1 	.word	0x200016e1
 8005278:	080195d4 	.word	0x080195d4

0800527c <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 800527e:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005280:	000c      	movs	r4, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005282:	781a      	ldrb	r2, [r3, #0]
 8005284:	3a01      	subs	r2, #1
 8005286:	0093      	lsls	r3, r2, #2
 8005288:	189b      	adds	r3, r3, r2
 800528a:	4a18      	ldr	r2, [pc, #96]	; (80052ec <ParseSnippetCommand+0x70>)
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	18d3      	adds	r3, r2, r3
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d018      	beq.n	80052c8 <ParseSnippetCommand+0x4c>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005296:	4e16      	ldr	r6, [pc, #88]	; (80052f0 <ParseSnippetCommand+0x74>)
 8005298:	6cb5      	ldr	r5, [r6, #72]	; 0x48
 800529a:	2d00      	cmp	r5, #0
 800529c:	d016      	beq.n	80052cc <ParseSnippetCommand+0x50>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 800529e:	782b      	ldrb	r3, [r5, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00e      	beq.n	80052c2 <ParseSnippetCommand+0x46>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 80052a4:	2113      	movs	r1, #19
 80052a6:	0028      	movs	r0, r5
 80052a8:	f00d fbae 	bl	8012a08 <strchr>
 80052ac:	1e07      	subs	r7, r0, #0
	if(ptrEnd != NULL){
 80052ae:	d010      	beq.n	80052d2 <ParseSnippetCommand+0x56>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 80052b0:	1b42      	subs	r2, r0, r5
 80052b2:	0029      	movs	r1, r5
 80052b4:	0020      	movs	r0, r4
 80052b6:	f00d fbce 	bl	8012a56 <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 80052ba:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 80052bc:	3701      	adds	r7, #1
 80052be:	64b7      	str	r7, [r6, #72]	; 0x48
}
 80052c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ptrStart =0;		// Initialize the start pointer for next Snippet
 80052c2:	64b3      	str	r3, [r6, #72]	; 0x48
		return false;
 80052c4:	2000      	movs	r0, #0
 80052c6:	e7fb      	b.n	80052c0 <ParseSnippetCommand+0x44>
		return false;
 80052c8:	2000      	movs	r0, #0
 80052ca:	e7f9      	b.n	80052c0 <ParseSnippetCommand+0x44>
		ptrStart =snippetBuffer;
 80052cc:	64b0      	str	r0, [r6, #72]	; 0x48
 80052ce:	0005      	movs	r5, r0
 80052d0:	e7e5      	b.n	800529e <ParseSnippetCommand+0x22>
		strcpy((char* )cliBuffer,ptrStart);
 80052d2:	0029      	movs	r1, r5
 80052d4:	0020      	movs	r0, r4
 80052d6:	f00d fba5 	bl	8012a24 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 80052da:	0020      	movs	r0, r4
 80052dc:	f7fa ff1c 	bl	8000118 <strlen>
 80052e0:	182d      	adds	r5, r5, r0
 80052e2:	64b5      	str	r5, [r6, #72]	; 0x48
	return true;
 80052e4:	2001      	movs	r0, #1
 80052e6:	e7eb      	b.n	80052c0 <ParseSnippetCommand+0x44>
 80052e8:	200016e4 	.word	0x200016e4
 80052ec:	20006890 	.word	0x20006890
 80052f0:	20001764 	.word	0x20001764

080052f4 <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 80052f4:	0083      	lsls	r3, r0, #2
bool CheckSnippetCondition(uint8_t index){
 80052f6:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 80052f8:	1818      	adds	r0, r3, r0
 80052fa:	492e      	ldr	r1, [pc, #184]	; (80053b4 <CheckSnippetCondition+0xc0>)
 80052fc:	0080      	lsls	r0, r0, #2
 80052fe:	5c0b      	ldrb	r3, [r1, r0]
bool CheckSnippetCondition(uint8_t index){
 8005300:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 8005302:	2b01      	cmp	r3, #1
 8005304:	d020      	beq.n	8005348 <CheckSnippetCondition+0x54>
 8005306:	2b03      	cmp	r3, #3
 8005308:	d11b      	bne.n	8005342 <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800530a:	180c      	adds	r4, r1, r0
 800530c:	78e2      	ldrb	r2, [r4, #3]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800530e:	3006      	adds	r0, #6
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005310:	3a01      	subs	r2, #1
 8005312:	0053      	lsls	r3, r2, #1
 8005314:	189b      	adds	r3, r3, r2
 8005316:	4a28      	ldr	r2, [pc, #160]	; (80053b8 <CheckSnippetCondition+0xc4>)
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	589b      	ldr	r3, [r3, r2]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800531c:	1841      	adds	r1, r0, r1
 800531e:	2204      	movs	r2, #4
 8005320:	a801      	add	r0, sp, #4
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005322:	681d      	ldr	r5, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005324:	f00d f93f 	bl	80125a6 <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 8005328:	7863      	ldrb	r3, [r4, #1]
 800532a:	2b06      	cmp	r3, #6
 800532c:	d809      	bhi.n	8005342 <CheckSnippetCondition+0x4e>
 800532e:	4a23      	ldr	r2, [pc, #140]	; (80053bc <CheckSnippetCondition+0xc8>)
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	58d3      	ldr	r3, [r2, r3]
 8005334:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 8005336:	1c29      	adds	r1, r5, #0
 8005338:	9801      	ldr	r0, [sp, #4]
 800533a:	f7fb f8e3 	bl	8000504 <__aeabi_fcmpgt>
 800533e:	2800      	cmp	r0, #0
 8005340:	d114      	bne.n	800536c <CheckSnippetCondition+0x78>
			
		default:
			break;
	}
	
	return false;
 8005342:	2000      	movs	r0, #0
}
 8005344:	b003      	add	sp, #12
 8005346:	bd30      	pop	{r4, r5, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 8005348:	1808      	adds	r0, r1, r0
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 800534a:	7882      	ldrb	r2, [r0, #2]
 800534c:	78c0      	ldrb	r0, [r0, #3]
 800534e:	00d3      	lsls	r3, r2, #3
 8005350:	189b      	adds	r3, r3, r2
 8005352:	4a1b      	ldr	r2, [pc, #108]	; (80053c0 <CheckSnippetCondition+0xcc>)
 8005354:	5c9b      	ldrb	r3, [r3, r2]
 8005356:	1a18      	subs	r0, r3, r0
 8005358:	4243      	negs	r3, r0
 800535a:	4158      	adcs	r0, r3
 800535c:	b2c0      	uxtb	r0, r0
 800535e:	e7f1      	b.n	8005344 <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005360:	1c29      	adds	r1, r5, #0
 8005362:	9801      	ldr	r0, [sp, #4]
 8005364:	f7fb f8b4 	bl	80004d0 <__aeabi_fcmpeq>
 8005368:	2800      	cmp	r0, #0
 800536a:	d1ea      	bne.n	8005342 <CheckSnippetCondition+0x4e>
 800536c:	2100      	movs	r1, #0
 800536e:	1c28      	adds	r0, r5, #0
 8005370:	f7fb f8ae 	bl	80004d0 <__aeabi_fcmpeq>
 8005374:	4243      	negs	r3, r0
 8005376:	4158      	adcs	r0, r3
 8005378:	e7e4      	b.n	8005344 <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 800537a:	1c29      	adds	r1, r5, #0
 800537c:	9801      	ldr	r0, [sp, #4]
 800537e:	f7fb f8a7 	bl	80004d0 <__aeabi_fcmpeq>
 8005382:	1e43      	subs	r3, r0, #1
 8005384:	4198      	sbcs	r0, r3
 8005386:	e7dd      	b.n	8005344 <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 8005388:	1c29      	adds	r1, r5, #0
 800538a:	9801      	ldr	r0, [sp, #4]
 800538c:	f7fb f8a6 	bl	80004dc <__aeabi_fcmplt>
 8005390:	1e43      	subs	r3, r0, #1
 8005392:	4198      	sbcs	r0, r3
 8005394:	e7d6      	b.n	8005344 <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 8005396:	1c29      	adds	r1, r5, #0
 8005398:	9801      	ldr	r0, [sp, #4]
 800539a:	f7fb f8a9 	bl	80004f0 <__aeabi_fcmple>
 800539e:	1e43      	subs	r3, r0, #1
 80053a0:	4198      	sbcs	r0, r3
 80053a2:	e7cf      	b.n	8005344 <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80053a4:	1c29      	adds	r1, r5, #0
 80053a6:	9801      	ldr	r0, [sp, #4]
 80053a8:	f7fb f8b6 	bl	8000518 <__aeabi_fcmpge>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d1dd      	bne.n	800536c <CheckSnippetCondition+0x78>
 80053b0:	e7c7      	b.n	8005342 <CheckSnippetCondition+0x4e>
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	20006890 	.word	0x20006890
 80053b8:	200000a4 	.word	0x200000a4
 80053bc:	08016eb0 	.word	0x08016eb0
 80053c0:	200023d0 	.word	0x200023d0

080053c4 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	46de      	mov	lr, fp
 80053c8:	464e      	mov	r6, r9
 80053ca:	4645      	mov	r5, r8
 80053cc:	4657      	mov	r7, sl
 80053ce:	b5e0      	push	{r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80053d0:	f007 ff90 	bl	800d2f4 <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80053d4:	4b23      	ldr	r3, [pc, #140]	; (8005464 <ExecuteSnippet+0xa0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80053d6:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 80053d8:	4698      	mov	r8, r3
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d039      	beq.n	8005454 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80053e0:	4b21      	ldr	r3, [pc, #132]	; (8005468 <ExecuteSnippet+0xa4>)
 80053e2:	4f22      	ldr	r7, [pc, #136]	; (800546c <ExecuteSnippet+0xa8>)
 80053e4:	469b      	mov	fp, r3
 80053e6:	2320      	movs	r3, #32
 80053e8:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80053ea:	4b21      	ldr	r3, [pc, #132]	; (8005470 <ExecuteSnippet+0xac>)
 80053ec:	4d21      	ldr	r5, [pc, #132]	; (8005474 <ExecuteSnippet+0xb0>)
	for(s =0; s < numOfRecordedSnippets; s++){
 80053ee:	2400      	movs	r4, #0
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80053f0:	374c      	adds	r7, #76	; 0x4c
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80053f2:	4699      	mov	r9, r3
 80053f4:	e006      	b.n	8005404 <ExecuteSnippet+0x40>
	for(s =0; s < numOfRecordedSnippets; s++){
 80053f6:	4643      	mov	r3, r8
 80053f8:	3401      	adds	r4, #1
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	b2a4      	uxth	r4, r4
 80053fe:	3514      	adds	r5, #20
 8005400:	42a3      	cmp	r3, r4
 8005402:	d927      	bls.n	8005454 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
 8005404:	7c2b      	ldrb	r3, [r5, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f5      	beq.n	80053f6 <ExecuteSnippet+0x32>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 800540a:	b2e0      	uxtb	r0, r4
 800540c:	f7ff ff72 	bl	80052f4 <CheckSnippetCondition>
 8005410:	2800      	cmp	r0, #0
 8005412:	d0f0      	beq.n	80053f6 <ExecuteSnippet+0x32>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005414:	465b      	mov	r3, fp
 8005416:	4652      	mov	r2, sl
 8005418:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800541a:	e00e      	b.n	800543a <ExecuteSnippet+0x76>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 800541c:	464b      	mov	r3, r9
 800541e:	003a      	movs	r2, r7
 8005420:	7818      	ldrb	r0, [r3, #0]
 8005422:	2100      	movs	r1, #0
 8005424:	0033      	movs	r3, r6
 8005426:	f7ff fc39 	bl	8004c9c <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800542a:	0030      	movs	r0, r6
 800542c:	f7fa fe74 	bl	8000118 <strlen>
 8005430:	2100      	movs	r1, #0
 8005432:	0002      	movs	r2, r0
 8005434:	0030      	movs	r0, r6
 8005436:	f00d f8bf 	bl	80125b8 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800543a:	0039      	movs	r1, r7
 800543c:	68e8      	ldr	r0, [r5, #12]
 800543e:	f7ff ff1d 	bl	800527c <ParseSnippetCommand>
 8005442:	2800      	cmp	r0, #0
 8005444:	d1ea      	bne.n	800541c <ExecuteSnippet+0x58>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005446:	4643      	mov	r3, r8
 8005448:	3401      	adds	r4, #1
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	b2a4      	uxth	r4, r4
 800544e:	3514      	adds	r5, #20
 8005450:	42a3      	cmp	r3, r4
 8005452:	d8d7      	bhi.n	8005404 <ExecuteSnippet+0x40>
			}
		}
	}
	
	return result;
}
 8005454:	2000      	movs	r0, #0
 8005456:	bc3c      	pop	{r2, r3, r4, r5}
 8005458:	4690      	mov	r8, r2
 800545a:	4699      	mov	r9, r3
 800545c:	46a2      	mov	sl, r4
 800545e:	46ab      	mov	fp, r5
 8005460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	200016e4 	.word	0x200016e4
 8005468:	200067f4 	.word	0x200067f4
 800546c:	20001764 	.word	0x20001764
 8005470:	20000c38 	.word	0x20000c38
 8005474:	20006890 	.word	0x20006890

08005478 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005478:	2000      	movs	r0, #0
 800547a:	4770      	bx	lr

0800547c <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800547c:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 800547e:	4b03      	ldr	r3, [pc, #12]	; (800548c <flashsizeCommand+0x10>)
 8005480:	4903      	ldr	r1, [pc, #12]	; (8005490 <flashsizeCommand+0x14>)
 8005482:	881a      	ldrh	r2, [r3, #0]
 8005484:	f00d fa92 	bl	80129ac <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005488:	2000      	movs	r0, #0
 800548a:	bd10      	pop	{r4, pc}
 800548c:	1ffff7cc 	.word	0x1ffff7cc
 8005490:	08018078 	.word	0x08018078

08005494 <ReadVrefCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005494:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005496:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005498:	0004      	movs	r4, r0
 800549a:	b082      	sub	sp, #8
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 800549c:	a901      	add	r1, sp, #4
 800549e:	4668      	mov	r0, sp
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80054a4:	f006 f9e8 	bl	800b878 <ReadTempAndVref>
	
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80054a8:	4669      	mov	r1, sp
 80054aa:	0020      	movs	r0, r4
 80054ac:	f00d faba 	bl	8012a24 <strcpy>
	
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80054b0:	9801      	ldr	r0, [sp, #4]
 80054b2:	f7fd fb37 	bl	8002b24 <__aeabi_f2d>
 80054b6:	0002      	movs	r2, r0
 80054b8:	000b      	movs	r3, r1
 80054ba:	0020      	movs	r0, r4
 80054bc:	4902      	ldr	r1, [pc, #8]	; (80054c8 <ReadVrefCommand+0x34>)
 80054be:	f00d fa75 	bl	80129ac <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80054c2:	2000      	movs	r0, #0
 80054c4:	b002      	add	sp, #8
 80054c6:	bd10      	pop	{r4, pc}
 80054c8:	08018098 	.word	0x08018098

080054cc <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054cc:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80054ce:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054d0:	0004      	movs	r4, r0
 80054d2:	b082      	sub	sp, #8
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80054d4:	a901      	add	r1, sp, #4
 80054d6:	4668      	mov	r0, sp
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80054dc:	f006 f9cc 	bl	800b878 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80054e0:	4669      	mov	r1, sp
 80054e2:	0020      	movs	r0, r4
 80054e4:	f00d fa9e 	bl	8012a24 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 80054e8:	9800      	ldr	r0, [sp, #0]
 80054ea:	f7fd fb1b 	bl	8002b24 <__aeabi_f2d>
 80054ee:	0002      	movs	r2, r0
 80054f0:	000b      	movs	r3, r1
 80054f2:	0020      	movs	r0, r4
 80054f4:	4902      	ldr	r1, [pc, #8]	; (8005500 <ReadTempCommand+0x34>)
 80054f6:	f00d fa59 	bl	80129ac <sprintf>
}
 80054fa:	2000      	movs	r0, #0
 80054fc:	b002      	add	sp, #8
 80054fe:	bd10      	pop	{r4, pc}
 8005500:	080180c0 	.word	0x080180c0

08005504 <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005504:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005508:	0014      	movs	r4, r2
 800550a:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 800550c:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 800550e:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005510:	2300      	movs	r3, #0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005512:	aa01      	add	r2, sp, #4
 8005514:	2101      	movs	r1, #1
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005516:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005518:	0020      	movs	r0, r4
	float ADC_Value_CLI =0;
 800551a:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800551c:	f007 feee 	bl	800d2fc <FreeRTOS_CLIGetParameter>
 8005520:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005522:	aa02      	add	r2, sp, #8
 8005524:	2102      	movs	r1, #2
 8005526:	0020      	movs	r0, r4
 8005528:	f007 fee8 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800552c:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800552e:	0007      	movs	r7, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005530:	3b32      	subs	r3, #50	; 0x32
 8005532:	2b01      	cmp	r3, #1
 8005534:	d907      	bls.n	8005546 <ADCReadCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005536:	2215      	movs	r2, #21
 8005538:	4919      	ldr	r1, [pc, #100]	; (80055a0 <ADCReadCommand+0x9c>)
 800553a:	0030      	movs	r0, r6
 800553c:	f00d f833 	bl	80125a6 <memcpy>
}
 8005540:	2000      	movs	r0, #0
 8005542:	b005      	add	sp, #20
 8005544:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005546:	0028      	movs	r0, r5
 8005548:	f00c fd6d 	bl	8012026 <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 800554c:	4d15      	ldr	r5, [pc, #84]	; (80055a4 <ADCReadCommand+0xa0>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800554e:	b2c4      	uxtb	r4, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005550:	0029      	movs	r1, r5
 8005552:	0038      	movs	r0, r7
 8005554:	f7fa fdd6 	bl	8000104 <strcmp>
 8005558:	2800      	cmp	r0, #0
 800555a:	d005      	beq.n	8005568 <ADCReadCommand+0x64>
 800555c:	4912      	ldr	r1, [pc, #72]	; (80055a8 <ADCReadCommand+0xa4>)
 800555e:	0038      	movs	r0, r7
 8005560:	f7fa fdd0 	bl	8000104 <strcmp>
 8005564:	2800      	cmp	r0, #0
 8005566:	d115      	bne.n	8005594 <ADCReadCommand+0x90>
			ADCSelectChannel(ADCports,ADC_Side);
 8005568:	0029      	movs	r1, r5
 800556a:	0020      	movs	r0, r4
 800556c:	f006 fb4a 	bl	800bc04 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005570:	aa03      	add	r2, sp, #12
 8005572:	0029      	movs	r1, r5
 8005574:	0020      	movs	r0, r4
 8005576:	f006 fb95 	bl	800bca4 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 800557a:	a903      	add	r1, sp, #12
 800557c:	0030      	movs	r0, r6
 800557e:	f00d fa51 	bl	8012a24 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005582:	9803      	ldr	r0, [sp, #12]
 8005584:	f7fb f81c 	bl	80005c0 <__aeabi_f2uiz>
 8005588:	4908      	ldr	r1, [pc, #32]	; (80055ac <ADCReadCommand+0xa8>)
 800558a:	b282      	uxth	r2, r0
 800558c:	0030      	movs	r0, r6
 800558e:	f00d fa0d 	bl	80129ac <sprintf>
 8005592:	e7d5      	b.n	8005540 <ADCReadCommand+0x3c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005594:	2212      	movs	r2, #18
 8005596:	4906      	ldr	r1, [pc, #24]	; (80055b0 <ADCReadCommand+0xac>)
 8005598:	0030      	movs	r0, r6
 800559a:	f00d f804 	bl	80125a6 <memcpy>
 800559e:	e7cf      	b.n	8005540 <ADCReadCommand+0x3c>
 80055a0:	08018114 	.word	0x08018114
 80055a4:	080180e4 	.word	0x080180e4
 80055a8:	080180e8 	.word	0x080180e8
 80055ac:	080180f0 	.word	0x080180f0
 80055b0:	08018100 	.word	0x08018100

080055b4 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055b6:	4657      	mov	r7, sl
 80055b8:	46de      	mov	lr, fp
 80055ba:	464e      	mov	r6, r9
 80055bc:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0;
 80055be:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055c0:	b5e0      	push	{r5, r6, r7, lr}
 80055c2:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 80055c4:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 80055c6:	4b5b      	ldr	r3, [pc, #364]	; (8005734 <testportCommand+0x180>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055c8:	2101      	movs	r1, #1
	char WriteVaule[1] ="H";
 80055ca:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055cc:	4682      	mov	sl, r0
	char WriteVaule[1] ="H";
 80055ce:	af02      	add	r7, sp, #8
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055d0:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055d2:	aa03      	add	r2, sp, #12
	char WriteVaule[1] ="H";
 80055d4:	703b      	strb	r3, [r7, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055d6:	f007 fe91 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80055da:	4957      	ldr	r1, [pc, #348]	; (8005738 <testportCommand+0x184>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055dc:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80055de:	f7fa fd91 	bl	8000104 <strcmp>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d15c      	bne.n	80056a0 <testportCommand+0xec>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 80055e6:	4d55      	ldr	r5, [pc, #340]	; (800573c <testportCommand+0x188>)
 80055e8:	4a55      	ldr	r2, [pc, #340]	; (8005740 <testportCommand+0x18c>)
 80055ea:	782b      	ldrb	r3, [r5, #0]
 80055ec:	2401      	movs	r4, #1
 80055ee:	18d2      	adds	r2, r2, r3
 80055f0:	3a01      	subs	r2, #1
 80055f2:	7816      	ldrb	r6, [r2, #0]
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80055f4:	4a53      	ldr	r2, [pc, #332]	; (8005744 <testportCommand+0x190>)
 80055f6:	4691      	mov	r9, r2
 80055f8:	e003      	b.n	8005602 <testportCommand+0x4e>
 80055fa:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 80055fc:	2c06      	cmp	r4, #6
 80055fe:	d047      	beq.n	8005690 <testportCommand+0xdc>
 8005600:	782b      	ldrb	r3, [r5, #0]
 8005602:	b2e2      	uxtb	r2, r4
 8005604:	4690      	mov	r8, r2
			if(PcPort != ports){
 8005606:	4293      	cmp	r3, r2
 8005608:	d0f7      	beq.n	80055fa <testportCommand+0x46>
				WriteVaule[0] =rand();
 800560a:	f00c ffed 	bl	80125e8 <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 800560e:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 8005610:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005612:	2201      	movs	r2, #1
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	0039      	movs	r1, r7
 8005618:	469b      	mov	fp, r3
 800561a:	4640      	mov	r0, r8
 800561c:	3b5a      	subs	r3, #90	; 0x5a
 800561e:	f007 fbc7 	bl	800cdb0 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005622:	4640      	mov	r0, r8
 8005624:	f007 fc28 	bl	800ce78 <GetUart>
 8005628:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 800562a:	783a      	ldrb	r2, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800562c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 800562e:	b2db      	uxtb	r3, r3
 8005630:	429a      	cmp	r2, r3
 8005632:	d03f      	beq.n	80056b4 <testportCommand+0x100>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005634:	0022      	movs	r2, r4
 8005636:	4944      	ldr	r1, [pc, #272]	; (8005748 <testportCommand+0x194>)
 8005638:	4650      	mov	r0, sl
 800563a:	f00d f9b7 	bl	80129ac <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800563e:	4650      	mov	r0, sl
 8005640:	f7fa fd6a 	bl	8000118 <strlen>
 8005644:	465b      	mov	r3, fp
 8005646:	b282      	uxth	r2, r0
 8005648:	4651      	mov	r1, sl
 800564a:	7828      	ldrb	r0, [r5, #0]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	230a      	movs	r3, #10
 8005650:	f007 fbae 	bl	800cdb0 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005654:	2254      	movs	r2, #84	; 0x54
 8005656:	493d      	ldr	r1, [pc, #244]	; (800574c <testportCommand+0x198>)
 8005658:	4650      	mov	r0, sl
 800565a:	f00c ffa4 	bl	80125a6 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800565e:	2364      	movs	r3, #100	; 0x64
 8005660:	7828      	ldrb	r0, [r5, #0]
 8005662:	2253      	movs	r2, #83	; 0x53
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	4651      	mov	r1, sl
 8005668:	3b5a      	subs	r3, #90	; 0x5a
 800566a:	f007 fba1 	bl	800cdb0 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 800566e:	3601      	adds	r6, #1
 8005670:	e002      	b.n	8005678 <testportCommand+0xc4>
					Delay_ms(1);
 8005672:	2001      	movs	r0, #1
 8005674:	f009 fbde 	bl	800ee34 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005678:	782a      	ldrb	r2, [r5, #0]
 800567a:	3a01      	subs	r2, #1
 800567c:	0053      	lsls	r3, r2, #1
 800567e:	189b      	adds	r3, r3, r2
 8005680:	019b      	lsls	r3, r3, #6
 8005682:	444b      	add	r3, r9
 8005684:	5d9b      	ldrb	r3, [r3, r6]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f3      	beq.n	8005672 <testportCommand+0xbe>
 800568a:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 800568c:	2c06      	cmp	r4, #6
 800568e:	d1b7      	bne.n	8005600 <testportCommand+0x4c>
}
 8005690:	2000      	movs	r0, #0
 8005692:	b005      	add	sp, #20
 8005694:	bc3c      	pop	{r2, r3, r4, r5}
 8005696:	4690      	mov	r8, r2
 8005698:	4699      	mov	r9, r3
 800569a:	46a2      	mov	sl, r4
 800569c:	46ab      	mov	fp, r5
 800569e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(pcParameterString1[0] == 'p'){
 80056a0:	2300      	movs	r3, #0
 80056a2:	56e3      	ldrsb	r3, [r4, r3]
 80056a4:	2b70      	cmp	r3, #112	; 0x70
 80056a6:	d016      	beq.n	80056d6 <testportCommand+0x122>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80056a8:	220f      	movs	r2, #15
 80056aa:	4929      	ldr	r1, [pc, #164]	; (8005750 <testportCommand+0x19c>)
 80056ac:	4650      	mov	r0, sl
 80056ae:	f00c ff7a 	bl	80125a6 <memcpy>
 80056b2:	e7ed      	b.n	8005690 <testportCommand+0xdc>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 80056b4:	0022      	movs	r2, r4
 80056b6:	4927      	ldr	r1, [pc, #156]	; (8005754 <testportCommand+0x1a0>)
 80056b8:	4650      	mov	r0, sl
 80056ba:	f00d f977 	bl	80129ac <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80056be:	4650      	mov	r0, sl
 80056c0:	f7fa fd2a 	bl	8000118 <strlen>
 80056c4:	465b      	mov	r3, fp
 80056c6:	b282      	uxth	r2, r0
 80056c8:	4651      	mov	r1, sl
 80056ca:	7828      	ldrb	r0, [r5, #0]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	3b5a      	subs	r3, #90	; 0x5a
 80056d0:	f007 fb6e 	bl	800cdb0 <writePxMutex>
 80056d4:	e7be      	b.n	8005654 <testportCommand+0xa0>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80056d6:	1c60      	adds	r0, r4, #1
 80056d8:	f00c fca5 	bl	8012026 <atol>
 80056dc:	b2c5      	uxtb	r5, r0
		if(portt > 0 && portt <= NumOfPorts){
 80056de:	1e6b      	subs	r3, r5, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80056e0:	0004      	movs	r4, r0
		if(portt > 0 && portt <= NumOfPorts){
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d905      	bls.n	80056f2 <testportCommand+0x13e>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80056e6:	221b      	movs	r2, #27
 80056e8:	491b      	ldr	r1, [pc, #108]	; (8005758 <testportCommand+0x1a4>)
 80056ea:	4650      	mov	r0, sl
 80056ec:	f00c ff5b 	bl	80125a6 <memcpy>
 80056f0:	e7ce      	b.n	8005690 <testportCommand+0xdc>
				WriteVaule[0] =rand();
 80056f2:	f00c ff79 	bl	80125e8 <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80056f6:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 80056f8:	7038      	strb	r0, [r7, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80056fa:	2201      	movs	r2, #1
 80056fc:	0039      	movs	r1, r7
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	0028      	movs	r0, r5
 8005702:	3b32      	subs	r3, #50	; 0x32
 8005704:	f007 fb54 	bl	800cdb0 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005708:	2000      	movs	r0, #0
 800570a:	f007 fbb5 	bl	800ce78 <GetUart>
 800570e:	22ff      	movs	r2, #255	; 0xff
 8005710:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 8005712:	7839      	ldrb	r1, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005714:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005716:	4022      	ands	r2, r4
			if(WriteVaule[0] == ReadValue[0])
 8005718:	b2db      	uxtb	r3, r3
 800571a:	4299      	cmp	r1, r3
 800571c:	d004      	beq.n	8005728 <testportCommand+0x174>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 800571e:	490a      	ldr	r1, [pc, #40]	; (8005748 <testportCommand+0x194>)
 8005720:	4650      	mov	r0, sl
 8005722:	f00d f943 	bl	80129ac <sprintf>
 8005726:	e7b3      	b.n	8005690 <testportCommand+0xdc>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005728:	490a      	ldr	r1, [pc, #40]	; (8005754 <testportCommand+0x1a0>)
 800572a:	4650      	mov	r0, sl
 800572c:	f00d f93e 	bl	80129ac <sprintf>
 8005730:	e7ae      	b.n	8005690 <testportCommand+0xdc>
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	08017128 	.word	0x08017128
 8005738:	080176f8 	.word	0x080176f8
 800573c:	20000c38 	.word	0x20000c38
 8005740:	200018a4 	.word	0x200018a4
 8005744:	200018e4 	.word	0x200018e4
 8005748:	08018148 	.word	0x08018148
 800574c:	0801815c 	.word	0x0801815c
 8005750:	080181cc 	.word	0x080181cc
 8005754:	0801812c 	.word	0x0801812c
 8005758:	080181b0 	.word	0x080181b0

0800575c <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005760:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005762:	b082      	sub	sp, #8
 8005764:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005766:	466a      	mov	r2, sp
 8005768:	2101      	movs	r1, #1
 800576a:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005770:	f007 fdc4 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005774:	2300      	movs	r3, #0
 8005776:	56c3      	ldrsb	r3, [r0, r3]
 8005778:	2b70      	cmp	r3, #112	; 0x70
 800577a:	d010      	beq.n	800579e <unbridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800577c:	aa01      	add	r2, sp, #4
 800577e:	2102      	movs	r1, #2
 8005780:	0020      	movs	r0, r4
 8005782:	f007 fdbb 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005786:	2300      	movs	r3, #0
 8005788:	56c3      	ldrsb	r3, [r0, r3]
 800578a:	2b70      	cmp	r3, #112	; 0x70
 800578c:	d027      	beq.n	80057de <unbridgeCommand+0x82>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800578e:	220f      	movs	r2, #15
 8005790:	4919      	ldr	r1, [pc, #100]	; (80057f8 <unbridgeCommand+0x9c>)
 8005792:	0028      	movs	r0, r5
 8005794:	f00c ff07 	bl	80125a6 <memcpy>
}
 8005798:	2000      	movs	r0, #0
 800579a:	b002      	add	sp, #8
 800579c:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 800579e:	3001      	adds	r0, #1
 80057a0:	f00c fc41 	bl	8012026 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80057a4:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80057a6:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80057a8:	2102      	movs	r1, #2
 80057aa:	0020      	movs	r0, r4
 80057ac:	f007 fda6 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80057b0:	2300      	movs	r3, #0
 80057b2:	56c3      	ldrsb	r3, [r0, r3]
 80057b4:	2b70      	cmp	r3, #112	; 0x70
 80057b6:	d1ea      	bne.n	800578e <unbridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80057b8:	3001      	adds	r0, #1
 80057ba:	f00c fc34 	bl	8012026 <atol>
 80057be:	0004      	movs	r4, r0
		result =Unbridge(port1,port2);
 80057c0:	b2c1      	uxtb	r1, r0
 80057c2:	b2f0      	uxtb	r0, r6
 80057c4:	f7fe ffe2 	bl	800478c <Unbridge>
	if(result == BOS_OK)
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d10c      	bne.n	80057e6 <unbridgeCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80057cc:	22ff      	movs	r2, #255	; 0xff
 80057ce:	0023      	movs	r3, r4
 80057d0:	490a      	ldr	r1, [pc, #40]	; (80057fc <unbridgeCommand+0xa0>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	0028      	movs	r0, r5
 80057d6:	4032      	ands	r2, r6
 80057d8:	f00d f8e8 	bl	80129ac <sprintf>
 80057dc:	e7dc      	b.n	8005798 <unbridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80057de:	3001      	adds	r0, #1
 80057e0:	f00c fc21 	bl	8012026 <atol>
 80057e4:	e7d3      	b.n	800578e <unbridgeCommand+0x32>
	else if(result == BOS_ERR_WrongParam)
 80057e6:	2867      	cmp	r0, #103	; 0x67
 80057e8:	d0d1      	beq.n	800578e <unbridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 80057ea:	2219      	movs	r2, #25
 80057ec:	4904      	ldr	r1, [pc, #16]	; (8005800 <unbridgeCommand+0xa4>)
 80057ee:	0028      	movs	r0, r5
 80057f0:	f00c fed9 	bl	80125a6 <memcpy>
	return pdFALSE;
 80057f4:	e7d0      	b.n	8005798 <unbridgeCommand+0x3c>
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	080181cc 	.word	0x080181cc
 80057fc:	080181dc 	.word	0x080181dc
 8005800:	080181fc 	.word	0x080181fc

08005804 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005808:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800580a:	b082      	sub	sp, #8
 800580c:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800580e:	466a      	mov	r2, sp
 8005810:	2101      	movs	r1, #1
 8005812:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005818:	f007 fd70 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800581c:	2300      	movs	r3, #0
 800581e:	56c3      	ldrsb	r3, [r0, r3]
 8005820:	2b70      	cmp	r3, #112	; 0x70
 8005822:	d010      	beq.n	8005846 <bridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005824:	aa01      	add	r2, sp, #4
 8005826:	2102      	movs	r1, #2
 8005828:	0020      	movs	r0, r4
 800582a:	f007 fd67 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800582e:	2300      	movs	r3, #0
 8005830:	56c3      	ldrsb	r3, [r0, r3]
 8005832:	2b70      	cmp	r3, #112	; 0x70
 8005834:	d027      	beq.n	8005886 <bridgeCommand+0x82>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005836:	220f      	movs	r2, #15
 8005838:	4919      	ldr	r1, [pc, #100]	; (80058a0 <bridgeCommand+0x9c>)
 800583a:	0028      	movs	r0, r5
 800583c:	f00c feb3 	bl	80125a6 <memcpy>
}
 8005840:	2000      	movs	r0, #0
 8005842:	b002      	add	sp, #8
 8005844:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005846:	3001      	adds	r0, #1
 8005848:	f00c fbed 	bl	8012026 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800584c:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 800584e:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005850:	2102      	movs	r1, #2
 8005852:	0020      	movs	r0, r4
 8005854:	f007 fd52 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005858:	2300      	movs	r3, #0
 800585a:	56c3      	ldrsb	r3, [r0, r3]
 800585c:	2b70      	cmp	r3, #112	; 0x70
 800585e:	d1ea      	bne.n	8005836 <bridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005860:	3001      	adds	r0, #1
 8005862:	f00c fbe0 	bl	8012026 <atol>
 8005866:	0004      	movs	r4, r0
		result =Bridge(port1,port2);
 8005868:	b2c1      	uxtb	r1, r0
 800586a:	b2f0      	uxtb	r0, r6
 800586c:	f7fe ff7a 	bl	8004764 <Bridge>
	if(result == BOS_OK)
 8005870:	2800      	cmp	r0, #0
 8005872:	d10c      	bne.n	800588e <bridgeCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005874:	22ff      	movs	r2, #255	; 0xff
 8005876:	0023      	movs	r3, r4
 8005878:	490a      	ldr	r1, [pc, #40]	; (80058a4 <bridgeCommand+0xa0>)
 800587a:	4013      	ands	r3, r2
 800587c:	0028      	movs	r0, r5
 800587e:	4032      	ands	r2, r6
 8005880:	f00d f894 	bl	80129ac <sprintf>
 8005884:	e7dc      	b.n	8005840 <bridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005886:	3001      	adds	r0, #1
 8005888:	f00c fbcd 	bl	8012026 <atol>
 800588c:	e7d3      	b.n	8005836 <bridgeCommand+0x32>
	else if(result == BOS_ERR_WrongParam)
 800588e:	2867      	cmp	r0, #103	; 0x67
 8005890:	d0d1      	beq.n	8005836 <bridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005892:	2217      	movs	r2, #23
 8005894:	4904      	ldr	r1, [pc, #16]	; (80058a8 <bridgeCommand+0xa4>)
 8005896:	0028      	movs	r0, r5
 8005898:	f00c fe85 	bl	80125a6 <memcpy>
	return pdFALSE;
 800589c:	e7d0      	b.n	8005840 <bridgeCommand+0x3c>
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	080181cc 	.word	0x080181cc
 80058a4:	08018218 	.word	0x08018218
 80058a8:	0801823c 	.word	0x0801823c

080058ac <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ae:	46d6      	mov	lr, sl
 80058b0:	4646      	mov	r6, r8
 80058b2:	464f      	mov	r7, r9
	portBASE_TYPE xParameterStringLength1 =0;
 80058b4:	2400      	movs	r4, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058b6:	b5c0      	push	{r6, r7, lr}
 80058b8:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058ba:	2101      	movs	r1, #1
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058bc:	0006      	movs	r6, r0
 80058be:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058c0:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80058c2:	9401      	str	r4, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058c4:	f007 fd1a 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 80058c8:	f00c fba7 	bl	801201a <atoi>
 80058cc:	b2c5      	uxtb	r5, r0
	if(!index || index > numOfRecordedSnippets)
 80058ce:	2d00      	cmp	r5, #0
 80058d0:	d003      	beq.n	80058da <delSnipCommand+0x2e>
 80058d2:	4f30      	ldr	r7, [pc, #192]	; (8005994 <delSnipCommand+0xe8>)
 80058d4:	783b      	ldrb	r3, [r7, #0]
 80058d6:	42ab      	cmp	r3, r5
 80058d8:	d20b      	bcs.n	80058f2 <delSnipCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058da:	2223      	movs	r2, #35	; 0x23
 80058dc:	492e      	ldr	r1, [pc, #184]	; (8005998 <delSnipCommand+0xec>)
 80058de:	0030      	movs	r0, r6
 80058e0:	f00c fe61 	bl	80125a6 <memcpy>
}
 80058e4:	2000      	movs	r0, #0
 80058e6:	b002      	add	sp, #8
 80058e8:	bc1c      	pop	{r2, r3, r4}
 80058ea:	4690      	mov	r8, r2
 80058ec:	4699      	mov	r9, r3
 80058ee:	46a2      	mov	sl, r4
 80058f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 80058f2:	23ff      	movs	r3, #255	; 0xff
 80058f4:	4003      	ands	r3, r0
 80058f6:	469a      	mov	sl, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	0098      	lsls	r0, r3, #2
 80058fc:	18c0      	adds	r0, r0, r3
 80058fe:	4b27      	ldr	r3, [pc, #156]	; (800599c <delSnipCommand+0xf0>)
 8005900:	0080      	lsls	r0, r0, #2
 8005902:	4699      	mov	r9, r3
 8005904:	4680      	mov	r8, r0
 8005906:	44c8      	add	r8, r9
 8005908:	4643      	mov	r3, r8
		memset(snippets[index - 1].cond.buffer1,0,4);
 800590a:	3002      	adds	r0, #2
		snippets[index - 1].cond.conditionType =0;
 800590c:	801c      	strh	r4, [r3, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 800590e:	2204      	movs	r2, #4
 8005910:	2100      	movs	r1, #0
 8005912:	4448      	add	r0, r9
 8005914:	f00c fe50 	bl	80125b8 <memset>
		snippets[index - 1].state = false;
 8005918:	2300      	movs	r3, #0
 800591a:	4642      	mov	r2, r8
 800591c:	7413      	strb	r3, [r2, #16]
		free(snippets[index - 1].cmd);
 800591e:	68d0      	ldr	r0, [r2, #12]
 8005920:	f00c fbfe 	bl	8012120 <free>
		snippets[index - 1].cmd = NULL;
 8005924:	4643      	mov	r3, r8
 8005926:	60dc      	str	r4, [r3, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005928:	783b      	ldrb	r3, [r7, #0]
 800592a:	42ab      	cmp	r3, r5
 800592c:	d92e      	bls.n	800598c <delSnipCommand+0xe0>
 800592e:	3b01      	subs	r3, #1
 8005930:	1b58      	subs	r0, r3, r5
 8005932:	b2c0      	uxtb	r0, r0
 8005934:	4450      	add	r0, sl
 8005936:	4652      	mov	r2, sl
 8005938:	0085      	lsls	r5, r0, #2
 800593a:	182d      	adds	r5, r5, r0
 800593c:	4648      	mov	r0, r9
 800593e:	0094      	lsls	r4, r2, #2
 8005940:	4454      	add	r4, sl
 8005942:	00a4      	lsls	r4, r4, #2
 8005944:	00ad      	lsls	r5, r5, #2
 8005946:	3014      	adds	r0, #20
 8005948:	444c      	add	r4, r9
 800594a:	4698      	mov	r8, r3
 800594c:	182d      	adds	r5, r5, r0
 800594e:	e002      	b.n	8005956 <delSnipCommand+0xaa>
 8005950:	3414      	adds	r4, #20
 8005952:	42ac      	cmp	r4, r5
 8005954:	d010      	beq.n	8005978 <delSnipCommand+0xcc>
			if(snippets[s].cond.conditionType){
 8005956:	7823      	ldrb	r3, [r4, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f9      	beq.n	8005950 <delSnipCommand+0xa4>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 800595c:	0020      	movs	r0, r4
 800595e:	0021      	movs	r1, r4
 8005960:	2214      	movs	r2, #20
 8005962:	3814      	subs	r0, #20
 8005964:	f00c fe1f 	bl	80125a6 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005968:	0020      	movs	r0, r4
 800596a:	2214      	movs	r2, #20
 800596c:	2100      	movs	r1, #0
 800596e:	3414      	adds	r4, #20
 8005970:	f00c fe22 	bl	80125b8 <memset>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005974:	42ac      	cmp	r4, r5
 8005976:	d1ee      	bne.n	8005956 <delSnipCommand+0xaa>
		--numOfRecordedSnippets;
 8005978:	4643      	mov	r3, r8
 800597a:	703b      	strb	r3, [r7, #0]
		SaveToRO();
 800597c:	f004 f82e 	bl	80099dc <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005980:	2236      	movs	r2, #54	; 0x36
 8005982:	4907      	ldr	r1, [pc, #28]	; (80059a0 <delSnipCommand+0xf4>)
 8005984:	0030      	movs	r0, r6
 8005986:	f00c fe0e 	bl	80125a6 <memcpy>
 800598a:	e7ab      	b.n	80058e4 <delSnipCommand+0x38>
 800598c:	3b01      	subs	r3, #1
 800598e:	4698      	mov	r8, r3
 8005990:	e7f2      	b.n	8005978 <delSnipCommand+0xcc>
 8005992:	46c0      	nop			; (mov r8, r8)
 8005994:	200016e4 	.word	0x200016e4
 8005998:	0801828c 	.word	0x0801828c
 800599c:	20006890 	.word	0x20006890
 80059a0:	08018254 	.word	0x08018254

080059a4 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059a4:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 80059a6:	2400      	movs	r4, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059a8:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059aa:	2101      	movs	r1, #1
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059ac:	0005      	movs	r5, r0
 80059ae:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059b0:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80059b2:	9401      	str	r4, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059b4:	f007 fca2 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 80059b8:	f00c fb2f 	bl	801201a <atoi>
 80059bc:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <pauseSnipCommand+0x26>
 80059c2:	4a0e      	ldr	r2, [pc, #56]	; (80059fc <pauseSnipCommand+0x58>)
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d207      	bcs.n	80059da <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059ca:	2223      	movs	r2, #35	; 0x23
 80059cc:	490c      	ldr	r1, [pc, #48]	; (8005a00 <pauseSnipCommand+0x5c>)
 80059ce:	0028      	movs	r0, r5
 80059d0:	f00c fde9 	bl	80125a6 <memcpy>
}
 80059d4:	2000      	movs	r0, #0
 80059d6:	b003      	add	sp, #12
 80059d8:	bd30      	pop	{r4, r5, pc}
		snippets[index - 1].state = false;
 80059da:	23ff      	movs	r3, #255	; 0xff
 80059dc:	4018      	ands	r0, r3
 80059de:	3801      	subs	r0, #1
 80059e0:	0083      	lsls	r3, r0, #2
 80059e2:	1818      	adds	r0, r3, r0
 80059e4:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <pauseSnipCommand+0x60>)
 80059e6:	0080      	lsls	r0, r0, #2
 80059e8:	1818      	adds	r0, r3, r0
 80059ea:	7404      	strb	r4, [r0, #16]
		SaveToRO();
 80059ec:	f003 fff6 	bl	80099dc <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 80059f0:	2235      	movs	r2, #53	; 0x35
 80059f2:	4905      	ldr	r1, [pc, #20]	; (8005a08 <pauseSnipCommand+0x64>)
 80059f4:	0028      	movs	r0, r5
 80059f6:	f00c fdd6 	bl	80125a6 <memcpy>
 80059fa:	e7eb      	b.n	80059d4 <pauseSnipCommand+0x30>
 80059fc:	200016e4 	.word	0x200016e4
 8005a00:	0801828c 	.word	0x0801828c
 8005a04:	20006890 	.word	0x20006890
 8005a08:	080182b0 	.word	0x080182b0

08005a0c <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005a0c:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a12:	2101      	movs	r1, #1
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a14:	0004      	movs	r4, r0
 8005a16:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a18:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005a1a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a1c:	f007 fc6e 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005a20:	f00c fafb 	bl	801201a <atoi>
 8005a24:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <actSnipCommand+0x26>
 8005a2a:	4a0f      	ldr	r2, [pc, #60]	; (8005a68 <actSnipCommand+0x5c>)
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d207      	bcs.n	8005a42 <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a32:	2223      	movs	r2, #35	; 0x23
 8005a34:	490d      	ldr	r1, [pc, #52]	; (8005a6c <actSnipCommand+0x60>)
 8005a36:	0020      	movs	r0, r4
 8005a38:	f00c fdb5 	bl	80125a6 <memcpy>
}
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	b002      	add	sp, #8
 8005a40:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005a42:	23ff      	movs	r3, #255	; 0xff
 8005a44:	4018      	ands	r0, r3
 8005a46:	3801      	subs	r0, #1
 8005a48:	0083      	lsls	r3, r0, #2
 8005a4a:	1818      	adds	r0, r3, r0
 8005a4c:	4b08      	ldr	r3, [pc, #32]	; (8005a70 <actSnipCommand+0x64>)
 8005a4e:	0080      	lsls	r0, r0, #2
 8005a50:	1818      	adds	r0, r3, r0
 8005a52:	2301      	movs	r3, #1
 8005a54:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005a56:	f003 ffc1 	bl	80099dc <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005a5a:	2238      	movs	r2, #56	; 0x38
 8005a5c:	4905      	ldr	r1, [pc, #20]	; (8005a74 <actSnipCommand+0x68>)
 8005a5e:	0020      	movs	r0, r4
 8005a60:	f00c fda1 	bl	80125a6 <memcpy>
 8005a64:	e7ea      	b.n	8005a3c <actSnipCommand+0x30>
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	200016e4 	.word	0x200016e4
 8005a6c:	0801828c 	.word	0x0801828c
 8005a70:	20006890 	.word	0x20006890
 8005a74:	080182e8 	.word	0x080182e8

08005a78 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a7a:	46de      	mov	lr, fp
 8005a7c:	4657      	mov	r7, sl
 8005a7e:	464e      	mov	r6, r9
 8005a80:	4645      	mov	r5, r8
 8005a82:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 8005a84:	4b7c      	ldr	r3, [pc, #496]	; (8005c78 <snipCommand+0x200>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a86:	b08b      	sub	sp, #44	; 0x2c
	char status[2][7] ={"Paused", "Active"};
 8005a88:	3304      	adds	r3, #4
 8005a8a:	aa06      	add	r2, sp, #24
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a8c:	0007      	movs	r7, r0
	char status[2][7] ={"Paused", "Active"};
 8005a8e:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005a90:	c213      	stmia	r2!, {r0, r1, r4}
 8005a92:	881b      	ldrh	r3, [r3, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005a94:	4979      	ldr	r1, [pc, #484]	; (8005c7c <snipCommand+0x204>)
	char status[2][7] ={"Paused", "Active"};
 8005a96:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005a98:	4b79      	ldr	r3, [pc, #484]	; (8005c80 <snipCommand+0x208>)
 8005a9a:	2237      	movs	r2, #55	; 0x37
 8005a9c:	7818      	ldrb	r0, [r3, #0]
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	425b      	negs	r3, r3
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	3333      	adds	r3, #51	; 0x33
 8005aa6:	f007 f983 	bl	800cdb0 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005aaa:	4b76      	ldr	r3, [pc, #472]	; (8005c84 <snipCommand+0x20c>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d044      	beq.n	8005b3c <snipCommand+0xc4>
 8005ab2:	2500      	movs	r5, #0
 8005ab4:	4b74      	ldr	r3, [pc, #464]	; (8005c88 <snipCommand+0x210>)
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005ab6:	46a8      	mov	r8, r5
 8005ab8:	469a      	mov	sl, r3
 8005aba:	4c74      	ldr	r4, [pc, #464]	; (8005c8c <snipCommand+0x214>)
 8005abc:	4643      	mov	r3, r8
		if(snippets[s].cond.conditionType)
 8005abe:	009d      	lsls	r5, r3, #2
 8005ac0:	18e9      	adds	r1, r5, r3
 8005ac2:	1c5e      	adds	r6, r3, #1
 8005ac4:	008b      	lsls	r3, r1, #2
 8005ac6:	469b      	mov	fp, r3
 8005ac8:	4653      	mov	r3, sl
 8005aca:	465a      	mov	r2, fp
 8005acc:	5c9b      	ldrb	r3, [r3, r2]
 8005ace:	b2f6      	uxtb	r6, r6
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d140      	bne.n	8005b56 <snipCommand+0xde>
 8005ad4:	4659      	mov	r1, fp
 8005ad6:	4451      	add	r1, sl
 8005ad8:	68c8      	ldr	r0, [r1, #12]
 8005ada:	4445      	add	r5, r8
 8005adc:	00ad      	lsls	r5, r5, #2
 8005ade:	4455      	add	r5, sl
 8005ae0:	e00e      	b.n	8005b00 <snipCommand+0x88>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005ae2:	0023      	movs	r3, r4
 8005ae4:	003a      	movs	r2, r7
 8005ae6:	496a      	ldr	r1, [pc, #424]	; (8005c90 <snipCommand+0x218>)
 8005ae8:	0038      	movs	r0, r7
 8005aea:	f00c ff5f 	bl	80129ac <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005aee:	0020      	movs	r0, r4
 8005af0:	f7fa fb12 	bl	8000118 <strlen>
 8005af4:	2100      	movs	r1, #0
 8005af6:	0002      	movs	r2, r0
 8005af8:	0020      	movs	r0, r4
 8005afa:	f00c fd5d 	bl	80125b8 <memset>
 8005afe:	68e8      	ldr	r0, [r5, #12]
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005b00:	0021      	movs	r1, r4
 8005b02:	f7ff fbbb 	bl	800527c <ParseSnippetCommand>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d1eb      	bne.n	8005ae2 <snipCommand+0x6a>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005b0a:	0038      	movs	r0, r7
 8005b0c:	f7fa fb04 	bl	8000118 <strlen>
 8005b10:	220c      	movs	r2, #12
 8005b12:	0005      	movs	r5, r0
 8005b14:	495f      	ldr	r1, [pc, #380]	; (8005c94 <snipCommand+0x21c>)
 8005b16:	1838      	adds	r0, r7, r0
 8005b18:	f00c fd45 	bl	80125a6 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005b1c:	4b58      	ldr	r3, [pc, #352]	; (8005c80 <snipCommand+0x208>)
 8005b1e:	350b      	adds	r5, #11
 8005b20:	7818      	ldrb	r0, [r3, #0]
 8005b22:	2301      	movs	r3, #1
 8005b24:	425b      	negs	r3, r3
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	b2aa      	uxth	r2, r5
 8005b2a:	3333      	adds	r3, #51	; 0x33
 8005b2c:	0039      	movs	r1, r7
 8005b2e:	f007 f93f 	bl	800cdb0 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005b32:	4b54      	ldr	r3, [pc, #336]	; (8005c84 <snipCommand+0x20c>)
 8005b34:	46b0      	mov	r8, r6
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	42b3      	cmp	r3, r6
 8005b3a:	d8bf      	bhi.n	8005abc <snipCommand+0x44>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005b3c:	22b5      	movs	r2, #181	; 0xb5
 8005b3e:	4956      	ldr	r1, [pc, #344]	; (8005c98 <snipCommand+0x220>)
 8005b40:	0038      	movs	r0, r7
 8005b42:	f00c fd30 	bl	80125a6 <memcpy>
}
 8005b46:	2000      	movs	r0, #0
 8005b48:	b00b      	add	sp, #44	; 0x2c
 8005b4a:	bc3c      	pop	{r2, r3, r4, r5}
 8005b4c:	4690      	mov	r8, r2
 8005b4e:	4699      	mov	r9, r3
 8005b50:	46a2      	mov	sl, r4
 8005b52:	46ab      	mov	fp, r5
 8005b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005b56:	46d1      	mov	r9, sl
 8005b58:	44d9      	add	r9, fp
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	7c1a      	ldrb	r2, [r3, #16]
 8005b5e:	494f      	ldr	r1, [pc, #316]	; (8005c9c <snipCommand+0x224>)
 8005b60:	00d3      	lsls	r3, r2, #3
 8005b62:	1a9b      	subs	r3, r3, r2
 8005b64:	aa06      	add	r2, sp, #24
 8005b66:	4694      	mov	ip, r2
 8005b68:	0038      	movs	r0, r7
 8005b6a:	4463      	add	r3, ip
 8005b6c:	0032      	movs	r2, r6
 8005b6e:	f00c ff1d 	bl	80129ac <sprintf>
		switch(snippets[s].cond.conditionType){
 8005b72:	4653      	mov	r3, sl
 8005b74:	465a      	mov	r2, fp
 8005b76:	5c9b      	ldrb	r3, [r3, r2]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d029      	beq.n	8005bd0 <snipCommand+0x158>
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d175      	bne.n	8005c6c <snipCommand+0x1f4>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005b80:	4659      	mov	r1, fp
 8005b82:	3106      	adds	r1, #6
 8005b84:	4451      	add	r1, sl
 8005b86:	2204      	movs	r2, #4
 8005b88:	a805      	add	r0, sp, #20
 8005b8a:	f00c fd0c 	bl	80125a6 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005b8e:	464b      	mov	r3, r9
 8005b90:	78da      	ldrb	r2, [r3, #3]
 8005b92:	9805      	ldr	r0, [sp, #20]
 8005b94:	3a01      	subs	r2, #1
 8005b96:	0053      	lsls	r3, r2, #1
 8005b98:	189b      	adds	r3, r3, r2
 8005b9a:	4a41      	ldr	r2, [pc, #260]	; (8005ca0 <snipCommand+0x228>)
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	18d3      	adds	r3, r2, r3
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	469b      	mov	fp, r3
 8005ba4:	f7fc ffbe 	bl	8002b24 <__aeabi_f2d>
 8005ba8:	464b      	mov	r3, r9
 8005baa:	9002      	str	r0, [sp, #8]
 8005bac:	9103      	str	r1, [sp, #12]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	4a31      	ldr	r2, [pc, #196]	; (8005c78 <snipCommand+0x200>)
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	0059      	lsls	r1, r3, #1
 8005bb6:	3214      	adds	r2, #20
 8005bb8:	18cb      	adds	r3, r1, r3
 8005bba:	18d3      	adds	r3, r2, r3
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	003a      	movs	r2, r7
 8005bc0:	465b      	mov	r3, fp
 8005bc2:	4938      	ldr	r1, [pc, #224]	; (8005ca4 <snipCommand+0x22c>)
 8005bc4:	0038      	movs	r0, r7
 8005bc6:	f00c fef1 	bl	80129ac <sprintf>
 8005bca:	464b      	mov	r3, r9
 8005bcc:	68d8      	ldr	r0, [r3, #12]
				break;
 8005bce:	e784      	b.n	8005ada <snipCommand+0x62>
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	68d8      	ldr	r0, [r3, #12]
				switch(snippets[s].cond.buffer1[1]){
 8005bd4:	78db      	ldrb	r3, [r3, #3]
 8005bd6:	3b05      	subs	r3, #5
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b09      	cmp	r3, #9
 8005bdc:	d900      	bls.n	8005be0 <snipCommand+0x168>
 8005bde:	e77c      	b.n	8005ada <snipCommand+0x62>
 8005be0:	4a31      	ldr	r2, [pc, #196]	; (8005ca8 <snipCommand+0x230>)
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	58d3      	ldr	r3, [r2, r3]
 8005be6:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005be8:	4643      	mov	r3, r8
 8005bea:	18eb      	adds	r3, r5, r3
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4453      	add	r3, sl
 8005bf0:	4699      	mov	r9, r3
 8005bf2:	464a      	mov	r2, r9
 8005bf4:	789b      	ldrb	r3, [r3, #2]
 8005bf6:	9001      	str	r0, [sp, #4]
 8005bf8:	7912      	ldrb	r2, [r2, #4]
 8005bfa:	492c      	ldr	r1, [pc, #176]	; (8005cac <snipCommand+0x234>)
 8005bfc:	9200      	str	r2, [sp, #0]
 8005bfe:	0038      	movs	r0, r7
 8005c00:	003a      	movs	r2, r7
 8005c02:	f00c fed3 	bl	80129ac <sprintf>
 8005c06:	464b      	mov	r3, r9
 8005c08:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c0a:	e766      	b.n	8005ada <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005c0c:	4643      	mov	r3, r8
 8005c0e:	18eb      	adds	r3, r5, r3
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4453      	add	r3, sl
 8005c14:	4699      	mov	r9, r3
 8005c16:	464a      	mov	r2, r9
 8005c18:	789b      	ldrb	r3, [r3, #2]
 8005c1a:	9001      	str	r0, [sp, #4]
 8005c1c:	7912      	ldrb	r2, [r2, #4]
 8005c1e:	4924      	ldr	r1, [pc, #144]	; (8005cb0 <snipCommand+0x238>)
 8005c20:	9200      	str	r2, [sp, #0]
 8005c22:	0038      	movs	r0, r7
 8005c24:	003a      	movs	r2, r7
 8005c26:	f00c fec1 	bl	80129ac <sprintf>
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c2e:	e754      	b.n	8005ada <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005c30:	4643      	mov	r3, r8
 8005c32:	18eb      	adds	r3, r5, r3
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4453      	add	r3, sl
 8005c38:	4699      	mov	r9, r3
 8005c3a:	003a      	movs	r2, r7
 8005c3c:	789b      	ldrb	r3, [r3, #2]
 8005c3e:	491d      	ldr	r1, [pc, #116]	; (8005cb4 <snipCommand+0x23c>)
 8005c40:	9000      	str	r0, [sp, #0]
 8005c42:	0038      	movs	r0, r7
 8005c44:	f00c feb2 	bl	80129ac <sprintf>
 8005c48:	464b      	mov	r3, r9
 8005c4a:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c4c:	e745      	b.n	8005ada <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005c4e:	4643      	mov	r3, r8
 8005c50:	18eb      	adds	r3, r5, r3
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4453      	add	r3, sl
 8005c56:	4699      	mov	r9, r3
 8005c58:	003a      	movs	r2, r7
 8005c5a:	789b      	ldrb	r3, [r3, #2]
 8005c5c:	4916      	ldr	r1, [pc, #88]	; (8005cb8 <snipCommand+0x240>)
 8005c5e:	9000      	str	r0, [sp, #0]
 8005c60:	0038      	movs	r0, r7
 8005c62:	f00c fea3 	bl	80129ac <sprintf>
 8005c66:	464b      	mov	r3, r9
 8005c68:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c6a:	e736      	b.n	8005ada <snipCommand+0x62>
 8005c6c:	2314      	movs	r3, #20
 8005c6e:	4642      	mov	r2, r8
 8005c70:	4353      	muls	r3, r2
 8005c72:	4453      	add	r3, sl
 8005c74:	68d8      	ldr	r0, [r3, #12]
 8005c76:	e730      	b.n	8005ada <snipCommand+0x62>
 8005c78:	08017128 	.word	0x08017128
 8005c7c:	08018320 	.word	0x08018320
 8005c80:	20000c38 	.word	0x20000c38
 8005c84:	200016e4 	.word	0x200016e4
 8005c88:	20006890 	.word	0x20006890
 8005c8c:	200017e4 	.word	0x200017e4
 8005c90:	080183d4 	.word	0x080183d4
 8005c94:	080183dc 	.word	0x080183dc
 8005c98:	080183e8 	.word	0x080183e8
 8005c9c:	08018358 	.word	0x08018358
 8005ca0:	200000a4 	.word	0x200000a4
 8005ca4:	080183c4 	.word	0x080183c4
 8005ca8:	08016ecc 	.word	0x08016ecc
 8005cac:	080183a8 	.word	0x080183a8
 8005cb0:	08018390 	.word	0x08018390
 8005cb4:	08018378 	.word	0x08018378
 8005cb8:	08018364 	.word	0x08018364

08005cbc <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005cc0:	f009 f8cc 	bl	800ee5c <HAL_GetDEVID>
	switch(dev){
 8005cc4:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <idcodeCommand+0x78>)
 8005cc6:	0400      	lsls	r0, r0, #16
 8005cc8:	469c      	mov	ip, r3
 8005cca:	0c00      	lsrs	r0, r0, #16
 8005ccc:	4460      	add	r0, ip
 8005cce:	2808      	cmp	r0, #8
 8005cd0:	d82a      	bhi.n	8005d28 <idcodeCommand+0x6c>
 8005cd2:	4b19      	ldr	r3, [pc, #100]	; (8005d38 <idcodeCommand+0x7c>)
 8005cd4:	0080      	lsls	r0, r0, #2
 8005cd6:	581b      	ldr	r3, [r3, r0]
 8005cd8:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005cda:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <idcodeCommand+0x80>)
 8005cdc:	4918      	ldr	r1, [pc, #96]	; (8005d40 <idcodeCommand+0x84>)
 8005cde:	0020      	movs	r0, r4
 8005ce0:	f00c fe64 	bl	80129ac <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005ce4:	f009 f8b4 	bl	800ee50 <HAL_GetREVID>
 8005ce8:	0022      	movs	r2, r4
 8005cea:	0b03      	lsrs	r3, r0, #12
 8005cec:	4915      	ldr	r1, [pc, #84]	; (8005d44 <idcodeCommand+0x88>)
 8005cee:	0020      	movs	r0, r4
 8005cf0:	f00c fe5c 	bl	80129ac <sprintf>
}
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005cf8:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <idcodeCommand+0x8c>)
 8005cfa:	4911      	ldr	r1, [pc, #68]	; (8005d40 <idcodeCommand+0x84>)
 8005cfc:	0020      	movs	r0, r4
 8005cfe:	f00c fe55 	bl	80129ac <sprintf>
			break;
 8005d02:	e7ef      	b.n	8005ce4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005d04:	4a11      	ldr	r2, [pc, #68]	; (8005d4c <idcodeCommand+0x90>)
 8005d06:	490e      	ldr	r1, [pc, #56]	; (8005d40 <idcodeCommand+0x84>)
 8005d08:	0020      	movs	r0, r4
 8005d0a:	f00c fe4f 	bl	80129ac <sprintf>
			break;
 8005d0e:	e7e9      	b.n	8005ce4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005d10:	4a0f      	ldr	r2, [pc, #60]	; (8005d50 <idcodeCommand+0x94>)
 8005d12:	490b      	ldr	r1, [pc, #44]	; (8005d40 <idcodeCommand+0x84>)
 8005d14:	0020      	movs	r0, r4
 8005d16:	f00c fe49 	bl	80129ac <sprintf>
			break;
 8005d1a:	e7e3      	b.n	8005ce4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005d1c:	4a0d      	ldr	r2, [pc, #52]	; (8005d54 <idcodeCommand+0x98>)
 8005d1e:	4908      	ldr	r1, [pc, #32]	; (8005d40 <idcodeCommand+0x84>)
 8005d20:	0020      	movs	r0, r4
 8005d22:	f00c fe43 	bl	80129ac <sprintf>
			break;
 8005d26:	e7dd      	b.n	8005ce4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005d28:	4a0b      	ldr	r2, [pc, #44]	; (8005d58 <idcodeCommand+0x9c>)
 8005d2a:	4905      	ldr	r1, [pc, #20]	; (8005d40 <idcodeCommand+0x84>)
 8005d2c:	0020      	movs	r0, r4
 8005d2e:	f00c fe3d 	bl	80129ac <sprintf>
			break;
 8005d32:	e7d7      	b.n	8005ce4 <idcodeCommand+0x28>
 8005d34:	fffffbc0 	.word	0xfffffbc0
 8005d38:	08016ef4 	.word	0x08016ef4
 8005d3c:	080184d8 	.word	0x080184d8
 8005d40:	080184ac 	.word	0x080184ac
 8005d44:	080184f8 	.word	0x080184f8
 8005d48:	080184cc 	.word	0x080184cc
 8005d4c:	080184e4 	.word	0x080184e4
 8005d50:	080184a0 	.word	0x080184a0
 8005d54:	080184c0 	.word	0x080184c0
 8005d58:	080184f0 	.word	0x080184f0

08005d5c <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	0004      	movs	r4, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005d60:	220e      	movs	r2, #14
 8005d62:	4911      	ldr	r1, [pc, #68]	; (8005da8 <uuidCommand+0x4c>)
 8005d64:	f00c fc1f 	bl	80125a6 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005d68:	4d10      	ldr	r5, [pc, #64]	; (8005dac <uuidCommand+0x50>)
 8005d6a:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <uuidCommand+0x54>)
 8005d6c:	0029      	movs	r1, r5
 8005d6e:	0022      	movs	r2, r4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	0020      	movs	r0, r4
 8005d74:	f00c fe1a 	bl	80129ac <sprintf>
 8005d78:	4b0e      	ldr	r3, [pc, #56]	; (8005db4 <uuidCommand+0x58>)
 8005d7a:	0029      	movs	r1, r5
 8005d7c:	0022      	movs	r2, r4
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	0020      	movs	r0, r4
 8005d82:	f00c fe13 	bl	80129ac <sprintf>
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <uuidCommand+0x5c>)
 8005d88:	0029      	movs	r1, r5
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	0022      	movs	r2, r4
 8005d8e:	0020      	movs	r0, r4
 8005d90:	f00c fe0c 	bl	80129ac <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005d94:	0020      	movs	r0, r4
 8005d96:	f7fa f9bf 	bl	8000118 <strlen>
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	1820      	adds	r0, r4, r0
 8005d9e:	4907      	ldr	r1, [pc, #28]	; (8005dbc <uuidCommand+0x60>)
 8005da0:	f00c fc01 	bl	80125a6 <memcpy>
}
 8005da4:	2000      	movs	r0, #0
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	08018510 	.word	0x08018510
 8005dac:	08018520 	.word	0x08018520
 8005db0:	1ffff7ac 	.word	0x1ffff7ac
 8005db4:	1ffff7b0 	.word	0x1ffff7b0
 8005db8:	1ffff7b4 	.word	0x1ffff7b4
 8005dbc:	080195d4 	.word	0x080195d4

08005dc0 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dc0:	b510      	push	{r4, lr}
 8005dc2:	0004      	movs	r4, r0
	GetTimeDate();
 8005dc4:	f006 fdb6 	bl	800c934 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8005dc8:	f7fe fcae 	bl	8004728 <GetDateString>
 8005dcc:	4903      	ldr	r1, [pc, #12]	; (8005ddc <dateCommand+0x1c>)
 8005dce:	0002      	movs	r2, r0
 8005dd0:	0020      	movs	r0, r4
 8005dd2:	f00c fdeb 	bl	80129ac <sprintf>
}
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	bd10      	pop	{r4, pc}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	08018528 	.word	0x08018528

08005de0 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de2:	46ce      	mov	lr, r9
 8005de4:	4647      	mov	r7, r8
 8005de6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005de8:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dee:	466a      	mov	r2, sp
 8005df0:	2101      	movs	r1, #1
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005df2:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005df4:	0028      	movs	r0, r5
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dfa:	f007 fa7f 	bl	800d2fc <FreeRTOS_CLIGetParameter>
 8005dfe:	4b6b      	ldr	r3, [pc, #428]	; (8005fac <getCommand+0x1cc>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005e00:	2204      	movs	r2, #4
 8005e02:	496b      	ldr	r1, [pc, #428]	; (8005fb0 <getCommand+0x1d0>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e04:	0004      	movs	r4, r0
 8005e06:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005e08:	f00c fe14 	bl	8012a34 <strncmp>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d119      	bne.n	8005e44 <getCommand+0x64>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8005e10:	9b00      	ldr	r3, [sp, #0]
 8005e12:	1d27      	adds	r7, r4, #4
 8005e14:	1f1d      	subs	r5, r3, #4
 8005e16:	002a      	movs	r2, r5
 8005e18:	4966      	ldr	r1, [pc, #408]	; (8005fb4 <getCommand+0x1d4>)
 8005e1a:	0038      	movs	r0, r7
 8005e1c:	f00c fe0a 	bl	8012a34 <strncmp>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d121      	bne.n	8005e68 <getCommand+0x88>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8005e24:	4b64      	ldr	r3, [pc, #400]	; (8005fb8 <getCommand+0x1d8>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b60      	cmp	r3, #96	; 0x60
 8005e2a:	d100      	bne.n	8005e2e <getCommand+0x4e>
 8005e2c:	e071      	b.n	8005f12 <getCommand+0x132>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	d069      	beq.n	8005f06 <getCommand+0x126>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d100      	bne.n	8005e38 <getCommand+0x58>
 8005e36:	e096      	b.n	8005f66 <getCommand+0x186>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8005e38:	0022      	movs	r2, r4
 8005e3a:	4960      	ldr	r1, [pc, #384]	; (8005fbc <getCommand+0x1dc>)
 8005e3c:	0030      	movs	r0, r6
 8005e3e:	f00c fdb5 	bl	80129ac <sprintf>
 8005e42:	e00b      	b.n	8005e5c <getCommand+0x7c>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8005e44:	2205      	movs	r2, #5
 8005e46:	495e      	ldr	r1, [pc, #376]	; (8005fc0 <getCommand+0x1e0>)
 8005e48:	0020      	movs	r0, r4
 8005e4a:	f00c fdf3 	bl	8012a34 <strncmp>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d03b      	beq.n	8005eca <getCommand+0xea>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005e52:	2213      	movs	r2, #19
 8005e54:	495b      	ldr	r1, [pc, #364]	; (8005fc4 <getCommand+0x1e4>)
 8005e56:	0030      	movs	r0, r6
 8005e58:	f00c fba5 	bl	80125a6 <memcpy>
}
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	b003      	add	sp, #12
 8005e60:	bc0c      	pop	{r2, r3}
 8005e62:	4690      	mov	r8, r2
 8005e64:	4699      	mov	r9, r3
 8005e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8005e68:	002a      	movs	r2, r5
 8005e6a:	4957      	ldr	r1, [pc, #348]	; (8005fc8 <getCommand+0x1e8>)
 8005e6c:	0038      	movs	r0, r7
 8005e6e:	f00c fde1 	bl	8012a34 <strncmp>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d041      	beq.n	8005efa <getCommand+0x11a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8005e76:	002a      	movs	r2, r5
 8005e78:	4954      	ldr	r1, [pc, #336]	; (8005fcc <getCommand+0x1ec>)
 8005e7a:	0038      	movs	r0, r7
 8005e7c:	f00c fdda 	bl	8012a34 <strncmp>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d07d      	beq.n	8005f80 <getCommand+0x1a0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8005e84:	002a      	movs	r2, r5
 8005e86:	4952      	ldr	r1, [pc, #328]	; (8005fd0 <getCommand+0x1f0>)
 8005e88:	0038      	movs	r0, r7
 8005e8a:	f00c fdd3 	bl	8012a34 <strncmp>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d07d      	beq.n	8005f8e <getCommand+0x1ae>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8005e92:	002a      	movs	r2, r5
 8005e94:	494f      	ldr	r1, [pc, #316]	; (8005fd4 <getCommand+0x1f4>)
 8005e96:	0038      	movs	r0, r7
 8005e98:	f00c fdcc 	bl	8012a34 <strncmp>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d068      	beq.n	8005f72 <getCommand+0x192>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8005ea0:	002a      	movs	r2, r5
 8005ea2:	494d      	ldr	r1, [pc, #308]	; (8005fd8 <getCommand+0x1f8>)
 8005ea4:	0038      	movs	r0, r7
 8005ea6:	f00c fdc5 	bl	8012a34 <strncmp>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d076      	beq.n	8005f9c <getCommand+0x1bc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8005eae:	002a      	movs	r2, r5
 8005eb0:	494a      	ldr	r1, [pc, #296]	; (8005fdc <getCommand+0x1fc>)
 8005eb2:	0038      	movs	r0, r7
 8005eb4:	f00c fdbe 	bl	8012a34 <strncmp>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d1ca      	bne.n	8005e52 <getCommand+0x72>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8005ebc:	4b48      	ldr	r3, [pc, #288]	; (8005fe0 <getCommand+0x200>)
 8005ebe:	4949      	ldr	r1, [pc, #292]	; (8005fe4 <getCommand+0x204>)
 8005ec0:	795a      	ldrb	r2, [r3, #5]
 8005ec2:	0030      	movs	r0, r6
 8005ec4:	f00c fd72 	bl	80129ac <sprintf>
 8005ec8:	e7c8      	b.n	8005e5c <getCommand+0x7c>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005eca:	0028      	movs	r0, r5
 8005ecc:	aa01      	add	r2, sp, #4
 8005ece:	2102      	movs	r1, #2
 8005ed0:	f007 fa14 	bl	800d2fc <FreeRTOS_CLIGetParameter>
 8005ed4:	2400      	movs	r4, #0
 8005ed6:	0007      	movs	r7, r0
 8005ed8:	4d43      	ldr	r5, [pc, #268]	; (8005fe8 <getCommand+0x208>)
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8005eda:	0029      	movs	r1, r5
 8005edc:	0038      	movs	r0, r7
 8005ede:	f7fa f911 	bl	8000104 <strcmp>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d01b      	beq.n	8005f1e <getCommand+0x13e>
 8005ee6:	3401      	adds	r4, #1
 8005ee8:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8005eea:	2c0a      	cmp	r4, #10
 8005eec:	d1f5      	bne.n	8005eda <getCommand+0xfa>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8005eee:	003a      	movs	r2, r7
 8005ef0:	493e      	ldr	r1, [pc, #248]	; (8005fec <getCommand+0x20c>)
 8005ef2:	0030      	movs	r0, r6
 8005ef4:	f00c fd5a 	bl	80129ac <sprintf>
			return pdFALSE;
 8005ef8:	e7b0      	b.n	8005e5c <getCommand+0x7c>
			if(BOSMessaging.trace == TRACE_BOTH)
 8005efa:	4b2f      	ldr	r3, [pc, #188]	; (8005fb8 <getCommand+0x1d8>)
 8005efc:	785b      	ldrb	r3, [r3, #1]
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d007      	beq.n	8005f12 <getCommand+0x132>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d195      	bne.n	8005e32 <getCommand+0x52>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005f06:	4a3a      	ldr	r2, [pc, #232]	; (8005ff0 <getCommand+0x210>)
 8005f08:	493a      	ldr	r1, [pc, #232]	; (8005ff4 <getCommand+0x214>)
 8005f0a:	0030      	movs	r0, r6
 8005f0c:	f00c fd4e 	bl	80129ac <sprintf>
 8005f10:	e7a4      	b.n	8005e5c <getCommand+0x7c>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005f12:	4a39      	ldr	r2, [pc, #228]	; (8005ff8 <getCommand+0x218>)
 8005f14:	4937      	ldr	r1, [pc, #220]	; (8005ff4 <getCommand+0x214>)
 8005f16:	0030      	movs	r0, r6
 8005f18:	f00c fd48 	bl	80129ac <sprintf>
 8005f1c:	e79e      	b.n	8005e5c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8005f1e:	003a      	movs	r2, r7
 8005f20:	4936      	ldr	r1, [pc, #216]	; (8005ffc <getCommand+0x21c>)
 8005f22:	0030      	movs	r0, r6
 8005f24:	f00c fd42 	bl	80129ac <sprintf>
			for(j =1; j <= N; j++)						// N modules
 8005f28:	4f35      	ldr	r7, [pc, #212]	; (8006000 <getCommand+0x220>)
 8005f2a:	783b      	ldrb	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d095      	beq.n	8005e5c <getCommand+0x7c>
 8005f30:	2501      	movs	r5, #1
 8005f32:	4b34      	ldr	r3, [pc, #208]	; (8006004 <getCommand+0x224>)
 8005f34:	40a5      	lsls	r5, r4
 8005f36:	4698      	mov	r8, r3
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f38:	4b33      	ldr	r3, [pc, #204]	; (8006008 <getCommand+0x228>)
			for(j =1; j <= N; j++)						// N modules
 8005f3a:	2401      	movs	r4, #1
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f3c:	4699      	mov	r9, r3
 8005f3e:	e005      	b.n	8005f4c <getCommand+0x16c>
			for(j =1; j <= N; j++)						// N modules
 8005f40:	3401      	adds	r4, #1
 8005f42:	783b      	ldrb	r3, [r7, #0]
 8005f44:	b2e4      	uxtb	r4, r4
 8005f46:	42a3      	cmp	r3, r4
 8005f48:	d200      	bcs.n	8005f4c <getCommand+0x16c>
 8005f4a:	e787      	b.n	8005e5c <getCommand+0x7c>
				if(InGroup(j,i)){
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	1e63      	subs	r3, r4, #1
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	5ad3      	ldrh	r3, [r2, r3]
 8005f54:	421d      	tst	r5, r3
 8005f56:	d0f3      	beq.n	8005f40 <getCommand+0x160>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f58:	0023      	movs	r3, r4
 8005f5a:	0032      	movs	r2, r6
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	0030      	movs	r0, r6
 8005f60:	f00c fd24 	bl	80129ac <sprintf>
 8005f64:	e7ec      	b.n	8005f40 <getCommand+0x160>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005f66:	4a29      	ldr	r2, [pc, #164]	; (800600c <getCommand+0x22c>)
 8005f68:	4922      	ldr	r1, [pc, #136]	; (8005ff4 <getCommand+0x214>)
 8005f6a:	0030      	movs	r0, r6
 8005f6c:	f00c fd1e 	bl	80129ac <sprintf>
 8005f70:	e774      	b.n	8005e5c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8005f72:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <getCommand+0x200>)
 8005f74:	491b      	ldr	r1, [pc, #108]	; (8005fe4 <getCommand+0x204>)
 8005f76:	885a      	ldrh	r2, [r3, #2]
 8005f78:	0030      	movs	r0, r6
 8005f7a:	f00c fd17 	bl	80129ac <sprintf>
 8005f7e:	e76d      	b.n	8005e5c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8005f80:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <getCommand+0x200>)
 8005f82:	4918      	ldr	r1, [pc, #96]	; (8005fe4 <getCommand+0x204>)
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	0030      	movs	r0, r6
 8005f88:	f00c fd10 	bl	80129ac <sprintf>
 8005f8c:	e766      	b.n	8005e5c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8005f8e:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <getCommand+0x200>)
 8005f90:	4914      	ldr	r1, [pc, #80]	; (8005fe4 <getCommand+0x204>)
 8005f92:	881a      	ldrh	r2, [r3, #0]
 8005f94:	0030      	movs	r0, r6
 8005f96:	f00c fd09 	bl	80129ac <sprintf>
 8005f9a:	e75f      	b.n	8005e5c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8005f9c:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <getCommand+0x200>)
 8005f9e:	4911      	ldr	r1, [pc, #68]	; (8005fe4 <getCommand+0x204>)
 8005fa0:	791a      	ldrb	r2, [r3, #4]
 8005fa2:	0030      	movs	r0, r6
 8005fa4:	f00c fd02 	bl	80129ac <sprintf>
 8005fa8:	e758      	b.n	8005e5c <getCommand+0x7c>
 8005faa:	46c0      	nop			; (mov r8, r8)
 8005fac:	200017e4 	.word	0x200017e4
 8005fb0:	08018540 	.word	0x08018540
 8005fb4:	08018548 	.word	0x08018548
 8005fb8:	200067f4 	.word	0x200067f4
 8005fbc:	080185dc 	.word	0x080185dc
 8005fc0:	080185b8 	.word	0x080185b8
 8005fc4:	080185c8 	.word	0x080185c8
 8005fc8:	08018560 	.word	0x08018560
 8005fcc:	08018568 	.word	0x08018568
 8005fd0:	08018574 	.word	0x08018574
 8005fd4:	08018580 	.word	0x08018580
 8005fd8:	08018590 	.word	0x08018590
 8005fdc:	080185a4 	.word	0x080185a4
 8005fe0:	20006874 	.word	0x20006874
 8005fe4:	08017d54 	.word	0x08017d54
 8005fe8:	20000ae0 	.word	0x20000ae0
 8005fec:	080185fc 	.word	0x080185fc
 8005ff0:	08018554 	.word	0x08018554
 8005ff4:	080175d4 	.word	0x080175d4
 8005ff8:	080176f8 	.word	0x080176f8
 8005ffc:	08018618 	.word	0x08018618
 8006000:	20000010 	.word	0x20000010
 8006004:	20000aac 	.word	0x20000aac
 8006008:	080185c0 	.word	0x080185c0
 800600c:	08018558 	.word	0x08018558

08006010 <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006010:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006012:	b570      	push	{r4, r5, r6, lr}
 8006014:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006016:	2101      	movs	r1, #1
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006018:	0006      	movs	r6, r0
 800601a:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800601c:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 800601e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006020:	f007 f96c 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006024:	9d01      	ldr	r5, [sp, #4]
 8006026:	491f      	ldr	r1, [pc, #124]	; (80060a4 <defaultCommand+0x94>)
 8006028:	002a      	movs	r2, r5
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800602a:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 800602c:	f00c fd02 	bl	8012a34 <strncmp>
 8006030:	2800      	cmp	r0, #0
 8006032:	d026      	beq.n	8006082 <defaultCommand+0x72>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006034:	002a      	movs	r2, r5
 8006036:	491c      	ldr	r1, [pc, #112]	; (80060a8 <defaultCommand+0x98>)
 8006038:	0020      	movs	r0, r4
 800603a:	f00c fcfb 	bl	8012a34 <strncmp>
 800603e:	2800      	cmp	r0, #0
 8006040:	d119      	bne.n	8006076 <defaultCommand+0x66>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006042:	2116      	movs	r1, #22
 8006044:	2200      	movs	r2, #0
 8006046:	20ff      	movs	r0, #255	; 0xff
 8006048:	f002 f86e 	bl	8008128 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 800604c:	2202      	movs	r2, #2
 800604e:	4b17      	ldr	r3, [pc, #92]	; (80060ac <defaultCommand+0x9c>)
		osDelay(100);
 8006050:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 8006052:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006054:	f007 f846 	bl	800d0e4 <osDelay>
		ClearEEportsDir();
 8006058:	f7fd fb00 	bl	800365c <ClearEEportsDir>
		ClearROtopology();
 800605c:	f003 fdb6 	bl	8009bcc <ClearROtopology>
		osDelay(100);
 8006060:	2064      	movs	r0, #100	; 0x64
 8006062:	f007 f83f 	bl	800d0e4 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006066:	2240      	movs	r2, #64	; 0x40
 8006068:	4911      	ldr	r1, [pc, #68]	; (80060b0 <defaultCommand+0xa0>)
 800606a:	0030      	movs	r0, r6
 800606c:	f00c fa9b 	bl	80125a6 <memcpy>
}
 8006070:	2000      	movs	r0, #0
 8006072:	b002      	add	sp, #8
 8006074:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006076:	220f      	movs	r2, #15
 8006078:	490e      	ldr	r1, [pc, #56]	; (80060b4 <defaultCommand+0xa4>)
 800607a:	0030      	movs	r0, r6
 800607c:	f00c fa93 	bl	80125a6 <memcpy>
 8006080:	e7f6      	b.n	8006070 <defaultCommand+0x60>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 8006082:	490d      	ldr	r1, [pc, #52]	; (80060b8 <defaultCommand+0xa8>)
 8006084:	4b0d      	ldr	r3, [pc, #52]	; (80060bc <defaultCommand+0xac>)
 8006086:	000a      	movs	r2, r1
 8006088:	cb13      	ldmia	r3!, {r0, r1, r4}
 800608a:	c213      	stmia	r2!, {r0, r1, r4}
 800608c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800608e:	c213      	stmia	r2!, {r0, r1, r4}
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006094:	f7fd fa9e 	bl	80035d4 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006098:	2227      	movs	r2, #39	; 0x27
 800609a:	4909      	ldr	r1, [pc, #36]	; (80060c0 <defaultCommand+0xb0>)
 800609c:	0030      	movs	r0, r6
 800609e:	f00c fa82 	bl	80125a6 <memcpy>
 80060a2:	e7e5      	b.n	8006070 <defaultCommand+0x60>
 80060a4:	0801862c 	.word	0x0801862c
 80060a8:	0801865c 	.word	0x0801865c
 80060ac:	2000114e 	.word	0x2000114e
 80060b0:	08018674 	.word	0x08018674
 80060b4:	08018664 	.word	0x08018664
 80060b8:	20006874 	.word	0x20006874
 80060bc:	2000001c 	.word	0x2000001c
 80060c0:	08018634 	.word	0x08018634

080060c4 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c6:	46de      	mov	lr, fp
 80060c8:	4657      	mov	r7, sl
 80060ca:	464e      	mov	r6, r9
 80060cc:	4645      	mov	r5, r8
 80060ce:	b5e0      	push	{r5, r6, r7, lr}
 80060d0:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80060d2:	2300      	movs	r3, #0
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060d4:	b08f      	sub	sp, #60	; 0x3c
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060d6:	aa09      	add	r2, sp, #36	; 0x24
 80060d8:	2101      	movs	r1, #1
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060da:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060dc:	0038      	movs	r0, r7
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80060de:	9309      	str	r3, [sp, #36]	; 0x24
 80060e0:	930a      	str	r3, [sp, #40]	; 0x28
 80060e2:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80060e4:	930c      	str	r3, [sp, #48]	; 0x30
 80060e6:	930d      	str	r3, [sp, #52]	; 0x34
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060e8:	f007 f908 	bl	800d2fc <FreeRTOS_CLIGetParameter>
 80060ec:	4ccf      	ldr	r4, [pc, #828]	; (800642c <setCommand+0x368>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060ee:	2204      	movs	r2, #4
 80060f0:	49cf      	ldr	r1, [pc, #828]	; (8006430 <setCommand+0x36c>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060f2:	0006      	movs	r6, r0
 80060f4:	63a0      	str	r0, [r4, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060f6:	f00c fc9d 	bl	8012a34 <strncmp>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d100      	bne.n	8006100 <setCommand+0x3c>
 80060fe:	e082      	b.n	8006206 <setCommand+0x142>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 8006100:	2204      	movs	r2, #4
 8006102:	49cc      	ldr	r1, [pc, #816]	; (8006434 <setCommand+0x370>)
 8006104:	0030      	movs	r0, r6
 8006106:	f00c fc95 	bl	8012a34 <strncmp>
 800610a:	2800      	cmp	r0, #0
 800610c:	d014      	beq.n	8006138 <setCommand+0x74>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 800610e:	2204      	movs	r2, #4
 8006110:	49c9      	ldr	r1, [pc, #804]	; (8006438 <setCommand+0x374>)
 8006112:	0030      	movs	r0, r6
 8006114:	f00c fc8e 	bl	8012a34 <strncmp>
 8006118:	2800      	cmp	r0, #0
 800611a:	d100      	bne.n	800611e <setCommand+0x5a>
 800611c:	e0e0      	b.n	80062e0 <setCommand+0x21c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800611e:	2213      	movs	r2, #19
 8006120:	49c6      	ldr	r1, [pc, #792]	; (800643c <setCommand+0x378>)
 8006122:	0028      	movs	r0, r5
 8006124:	f00c fa3f 	bl	80125a6 <memcpy>
}
 8006128:	2000      	movs	r0, #0
 800612a:	b00f      	add	sp, #60	; 0x3c
 800612c:	bc3c      	pop	{r2, r3, r4, r5}
 800612e:	4690      	mov	r8, r2
 8006130:	4699      	mov	r9, r3
 8006132:	46a2      	mov	sl, r4
 8006134:	46ab      	mov	fp, r5
 8006136:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006138:	aa0a      	add	r2, sp, #40	; 0x28
 800613a:	2102      	movs	r1, #2
 800613c:	0038      	movs	r0, r7
 800613e:	f007 f8dd 	bl	800d2fc <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006142:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006144:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006146:	2103      	movs	r1, #3
 8006148:	0038      	movs	r0, r7
 800614a:	f007 f8d7 	bl	800d2fc <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800614e:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006150:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006152:	2104      	movs	r1, #4
 8006154:	0038      	movs	r0, r7
 8006156:	f007 f8d1 	bl	800d2fc <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800615a:	aa0d      	add	r2, sp, #52	; 0x34
 800615c:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800615e:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006160:	0038      	movs	r0, r7
 8006162:	f007 f8cb 	bl	800d2fc <FreeRTOS_CLIGetParameter>
 8006166:	64a0      	str	r0, [r4, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006168:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800616a:	f00b ff56 	bl	801201a <atoi>
 800616e:	b2c3      	uxtb	r3, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006170:	6c20      	ldr	r0, [r4, #64]	; 0x40
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006172:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006174:	f00b ff51 	bl	801201a <atoi>
 8006178:	0007      	movs	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800617a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800617c:	f00b ff4d 	bl	801201a <atoi>
		if(pcParameterString5 != NULL){
 8006180:	6ca6      	ldr	r6, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006182:	4682      	mov	sl, r0
		if(pcParameterString5 != NULL){
 8006184:	2e00      	cmp	r6, #0
 8006186:	d010      	beq.n	80061aa <setCommand+0xe6>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006188:	2202      	movs	r2, #2
 800618a:	49ad      	ldr	r1, [pc, #692]	; (8006440 <setCommand+0x37c>)
 800618c:	0030      	movs	r0, r6
 800618e:	f00c fc51 	bl	8012a34 <strncmp>
 8006192:	2800      	cmp	r0, #0
 8006194:	d100      	bne.n	8006198 <setCommand+0xd4>
 8006196:	e145      	b.n	8006424 <setCommand+0x360>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006198:	2202      	movs	r2, #2
 800619a:	49aa      	ldr	r1, [pc, #680]	; (8006444 <setCommand+0x380>)
 800619c:	0030      	movs	r0, r6
 800619e:	f00c fc49 	bl	8012a34 <strncmp>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d129      	bne.n	80061fa <setCommand+0x136>
				temp84 =RTC_PM;
 80061a6:	2302      	movs	r3, #2
 80061a8:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80061aa:	464b      	mov	r3, r9
 80061ac:	2b17      	cmp	r3, #23
 80061ae:	d824      	bhi.n	80061fa <setCommand+0x136>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80061b0:	b2ff      	uxtb	r7, r7
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80061b2:	2f3b      	cmp	r7, #59	; 0x3b
 80061b4:	d821      	bhi.n	80061fa <setCommand+0x136>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80061b6:	4653      	mov	r3, sl
 80061b8:	b2de      	uxtb	r6, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80061ba:	2e3b      	cmp	r6, #59	; 0x3b
 80061bc:	d81d      	bhi.n	80061fa <setCommand+0x136>
				GetTimeDate();
 80061be:	f006 fbb9 	bl	800c934 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 80061c2:	4ba1      	ldr	r3, [pc, #644]	; (8006448 <setCommand+0x384>)
 80061c4:	7d1a      	ldrb	r2, [r3, #20]
 80061c6:	7d59      	ldrb	r1, [r3, #21]
 80061c8:	7d98      	ldrb	r0, [r3, #22]
 80061ca:	4694      	mov	ip, r2
 80061cc:	8b1a      	ldrh	r2, [r3, #24]
 80061ce:	7b1b      	ldrb	r3, [r3, #12]
 80061d0:	9701      	str	r7, [sp, #4]
 80061d2:	b25b      	sxtb	r3, r3
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	4643      	mov	r3, r8
 80061d8:	9303      	str	r3, [sp, #12]
 80061da:	464b      	mov	r3, r9
 80061dc:	9600      	str	r6, [sp, #0]
 80061de:	9302      	str	r3, [sp, #8]
 80061e0:	4663      	mov	r3, ip
 80061e2:	f006 fb4d 	bl	800c880 <BOS_CalendarConfig>
 80061e6:	4681      	mov	r9, r0
	if(result == BOS_OK){
 80061e8:	464b      	mov	r3, r9
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d100      	bne.n	80061f0 <setCommand+0x12c>
 80061ee:	e24d      	b.n	800668c <setCommand+0x5c8>
	else if(result == BOS_ERR_WrongParam)
 80061f0:	464b      	mov	r3, r9
 80061f2:	2b67      	cmp	r3, #103	; 0x67
 80061f4:	d093      	beq.n	800611e <setCommand+0x5a>
	else if(result == BOS_ERR_WrongValue)
 80061f6:	2b68      	cmp	r3, #104	; 0x68
 80061f8:	d196      	bne.n	8006128 <setCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80061fa:	220f      	movs	r2, #15
 80061fc:	4993      	ldr	r1, [pc, #588]	; (800644c <setCommand+0x388>)
 80061fe:	0028      	movs	r0, r5
 8006200:	f00c f9d1 	bl	80125a6 <memcpy>
 8006204:	e790      	b.n	8006128 <setCommand+0x64>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006206:	aa0a      	add	r2, sp, #40	; 0x28
 8006208:	2102      	movs	r1, #2
 800620a:	0038      	movs	r0, r7
 800620c:	f007 f876 	bl	800d2fc <FreeRTOS_CLIGetParameter>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006210:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006212:	4680      	mov	r8, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006214:	1d1e      	adds	r6, r3, #4
 8006216:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006218:	63e0      	str	r0, [r4, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800621a:	1f1f      	subs	r7, r3, #4
 800621c:	4b8c      	ldr	r3, [pc, #560]	; (8006450 <setCommand+0x38c>)
 800621e:	003a      	movs	r2, r7
 8006220:	0019      	movs	r1, r3
 8006222:	0030      	movs	r0, r6
 8006224:	4699      	mov	r9, r3
 8006226:	f00c fc05 	bl	8012a34 <strncmp>
 800622a:	2800      	cmp	r0, #0
 800622c:	d128      	bne.n	8006280 <setCommand+0x1bc>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 800622e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006230:	4988      	ldr	r1, [pc, #544]	; (8006454 <setCommand+0x390>)
 8006232:	0032      	movs	r2, r6
 8006234:	4640      	mov	r0, r8
 8006236:	f00c fbfd 	bl	8012a34 <strncmp>
 800623a:	2800      	cmp	r0, #0
 800623c:	d100      	bne.n	8006240 <setCommand+0x17c>
 800623e:	e21a      	b.n	8006676 <setCommand+0x5b2>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006240:	0032      	movs	r2, r6
 8006242:	4985      	ldr	r1, [pc, #532]	; (8006458 <setCommand+0x394>)
 8006244:	4640      	mov	r0, r8
 8006246:	f00c fbf5 	bl	8012a34 <strncmp>
 800624a:	2800      	cmp	r0, #0
 800624c:	d100      	bne.n	8006250 <setCommand+0x18c>
 800624e:	e256      	b.n	80066fe <setCommand+0x63a>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006250:	0032      	movs	r2, r6
 8006252:	4982      	ldr	r1, [pc, #520]	; (800645c <setCommand+0x398>)
 8006254:	4640      	mov	r0, r8
 8006256:	f00c fbed 	bl	8012a34 <strncmp>
 800625a:	2800      	cmp	r0, #0
 800625c:	d100      	bne.n	8006260 <setCommand+0x19c>
 800625e:	e222      	b.n	80066a6 <setCommand+0x5e2>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006260:	0032      	movs	r2, r6
 8006262:	497f      	ldr	r1, [pc, #508]	; (8006460 <setCommand+0x39c>)
 8006264:	4640      	mov	r0, r8
 8006266:	f00c fbe5 	bl	8012a34 <strncmp>
 800626a:	2800      	cmp	r0, #0
 800626c:	d1c5      	bne.n	80061fa <setCommand+0x136>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 800626e:	4b7d      	ldr	r3, [pc, #500]	; (8006464 <setCommand+0x3a0>)
 8006270:	7018      	strb	r0, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006272:	208a      	movs	r0, #138	; 0x8a
 8006274:	7859      	ldrb	r1, [r3, #1]
 8006276:	0040      	lsls	r0, r0, #1
 8006278:	0209      	lsls	r1, r1, #8
 800627a:	f004 fcff 	bl	800ac7c <EE_WriteVariable>
 800627e:	e205      	b.n	800668c <setCommand+0x5c8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006280:	003a      	movs	r2, r7
 8006282:	4979      	ldr	r1, [pc, #484]	; (8006468 <setCommand+0x3a4>)
 8006284:	0030      	movs	r0, r6
 8006286:	f00c fbd5 	bl	8012a34 <strncmp>
 800628a:	2800      	cmp	r0, #0
 800628c:	d000      	beq.n	8006290 <setCommand+0x1cc>
 800628e:	e08d      	b.n	80063ac <setCommand+0x2e8>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006290:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006292:	4970      	ldr	r1, [pc, #448]	; (8006454 <setCommand+0x390>)
 8006294:	0032      	movs	r2, r6
 8006296:	4640      	mov	r0, r8
 8006298:	f00c fbcc 	bl	8012a34 <strncmp>
 800629c:	2800      	cmp	r0, #0
 800629e:	d100      	bne.n	80062a2 <setCommand+0x1de>
 80062a0:	e239      	b.n	8006716 <setCommand+0x652>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80062a2:	0032      	movs	r2, r6
 80062a4:	496c      	ldr	r1, [pc, #432]	; (8006458 <setCommand+0x394>)
 80062a6:	4640      	mov	r0, r8
 80062a8:	f00c fbc4 	bl	8012a34 <strncmp>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d100      	bne.n	80062b2 <setCommand+0x1ee>
 80062b0:	e213      	b.n	80066da <setCommand+0x616>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80062b2:	0032      	movs	r2, r6
 80062b4:	4649      	mov	r1, r9
 80062b6:	4640      	mov	r0, r8
 80062b8:	f00c fbbc 	bl	8012a34 <strncmp>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d100      	bne.n	80062c2 <setCommand+0x1fe>
 80062c0:	e274      	b.n	80067ac <setCommand+0x6e8>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80062c2:	0032      	movs	r2, r6
 80062c4:	4966      	ldr	r1, [pc, #408]	; (8006460 <setCommand+0x39c>)
 80062c6:	4640      	mov	r0, r8
 80062c8:	f00c fbb4 	bl	8012a34 <strncmp>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d194      	bne.n	80061fa <setCommand+0x136>
				BOSMessaging.trace =TRACE_NONE;
 80062d0:	4b64      	ldr	r3, [pc, #400]	; (8006464 <setCommand+0x3a0>)
 80062d2:	7058      	strb	r0, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80062d4:	3015      	adds	r0, #21
 80062d6:	7819      	ldrb	r1, [r3, #0]
 80062d8:	30ff      	adds	r0, #255	; 0xff
 80062da:	f004 fccf 	bl	800ac7c <EE_WriteVariable>
 80062de:	e1d5      	b.n	800668c <setCommand+0x5c8>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80062e0:	aa0a      	add	r2, sp, #40	; 0x28
 80062e2:	2102      	movs	r1, #2
 80062e4:	0038      	movs	r0, r7
 80062e6:	f007 f809 	bl	800d2fc <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062ea:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80062ec:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062ee:	2103      	movs	r1, #3
 80062f0:	0038      	movs	r0, r7
 80062f2:	f007 f803 	bl	800d2fc <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80062f6:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062f8:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80062fa:	2104      	movs	r1, #4
 80062fc:	0038      	movs	r0, r7
 80062fe:	f006 fffd 	bl	800d2fc <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006302:	aa0d      	add	r2, sp, #52	; 0x34
 8006304:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006306:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006308:	0038      	movs	r0, r7
 800630a:	f006 fff7 	bl	800d2fc <FreeRTOS_CLIGetParameter>
 800630e:	64a0      	str	r0, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006310:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006312:	f00b fe82 	bl	801201a <atoi>
 8006316:	4680      	mov	r8, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006318:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800631a:	f00b fe7e 	bl	801201a <atoi>
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 800631e:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006320:	4682      	mov	sl, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006322:	2206      	movs	r2, #6
 8006324:	4951      	ldr	r1, [pc, #324]	; (800646c <setCommand+0x3a8>)
 8006326:	0038      	movs	r0, r7
 8006328:	f00c fb84 	bl	8012a34 <strncmp>
 800632c:	2800      	cmp	r0, #0
 800632e:	d100      	bne.n	8006332 <setCommand+0x26e>
 8006330:	e0b6      	b.n	80064a0 <setCommand+0x3dc>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006332:	2207      	movs	r2, #7
 8006334:	494e      	ldr	r1, [pc, #312]	; (8006470 <setCommand+0x3ac>)
 8006336:	0038      	movs	r0, r7
 8006338:	f00c fb7c 	bl	8012a34 <strncmp>
 800633c:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800633e:	9006      	str	r0, [sp, #24]
 8006340:	2207      	movs	r2, #7
 8006342:	494c      	ldr	r1, [pc, #304]	; (8006474 <setCommand+0x3b0>)
 8006344:	0030      	movs	r0, r6
 8006346:	f00c fb75 	bl	8012a34 <strncmp>
 800634a:	9b06      	ldr	r3, [sp, #24]
 800634c:	4681      	mov	r9, r0
 800634e:	9007      	str	r0, [sp, #28]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d100      	bne.n	8006356 <setCommand+0x292>
 8006354:	e1a4      	b.n	80066a0 <setCommand+0x5dc>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006356:	2209      	movs	r2, #9
 8006358:	4947      	ldr	r1, [pc, #284]	; (8006478 <setCommand+0x3b4>)
 800635a:	0038      	movs	r0, r7
 800635c:	f00c fb6a 	bl	8012a34 <strncmp>
 8006360:	2800      	cmp	r0, #0
 8006362:	d100      	bne.n	8006366 <setCommand+0x2a2>
 8006364:	e211      	b.n	800678a <setCommand+0x6c6>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006366:	2208      	movs	r2, #8
 8006368:	4944      	ldr	r1, [pc, #272]	; (800647c <setCommand+0x3b8>)
 800636a:	0038      	movs	r0, r7
 800636c:	f00c fb62 	bl	8012a34 <strncmp>
 8006370:	2800      	cmp	r0, #0
 8006372:	d100      	bne.n	8006376 <setCommand+0x2b2>
 8006374:	e220      	b.n	80067b8 <setCommand+0x6f4>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006376:	2206      	movs	r2, #6
 8006378:	4941      	ldr	r1, [pc, #260]	; (8006480 <setCommand+0x3bc>)
 800637a:	0038      	movs	r0, r7
 800637c:	f00c fb5a 	bl	8012a34 <strncmp>
 8006380:	2800      	cmp	r0, #0
 8006382:	d100      	bne.n	8006386 <setCommand+0x2c2>
 8006384:	e22e      	b.n	80067e4 <setCommand+0x720>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006386:	2208      	movs	r2, #8
 8006388:	493e      	ldr	r1, [pc, #248]	; (8006484 <setCommand+0x3c0>)
 800638a:	0038      	movs	r0, r7
 800638c:	f00c fb52 	bl	8012a34 <strncmp>
 8006390:	2800      	cmp	r0, #0
 8006392:	d100      	bne.n	8006396 <setCommand+0x2d2>
 8006394:	e229      	b.n	80067ea <setCommand+0x726>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006396:	2206      	movs	r2, #6
 8006398:	493b      	ldr	r1, [pc, #236]	; (8006488 <setCommand+0x3c4>)
 800639a:	0038      	movs	r0, r7
 800639c:	f00c fb4a 	bl	8012a34 <strncmp>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d000      	beq.n	80063a6 <setCommand+0x2e2>
 80063a4:	e262      	b.n	800686c <setCommand+0x7a8>
			temp81 =SUNDAY;
 80063a6:	2307      	movs	r3, #7
 80063a8:	469b      	mov	fp, r3
 80063aa:	e082      	b.n	80064b2 <setCommand+0x3ee>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80063ac:	003a      	movs	r2, r7
 80063ae:	4937      	ldr	r1, [pc, #220]	; (800648c <setCommand+0x3c8>)
 80063b0:	0030      	movs	r0, r6
 80063b2:	f00c fb3f 	bl	8012a34 <strncmp>
 80063b6:	4681      	mov	r9, r0
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d100      	bne.n	80063be <setCommand+0x2fa>
 80063bc:	e1b7      	b.n	800672e <setCommand+0x66a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80063be:	003a      	movs	r2, r7
 80063c0:	4933      	ldr	r1, [pc, #204]	; (8006490 <setCommand+0x3cc>)
 80063c2:	0030      	movs	r0, r6
 80063c4:	f00c fb36 	bl	8012a34 <strncmp>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d100      	bne.n	80063ce <setCommand+0x30a>
 80063cc:	e177      	b.n	80066be <setCommand+0x5fa>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80063ce:	003a      	movs	r2, r7
 80063d0:	4930      	ldr	r1, [pc, #192]	; (8006494 <setCommand+0x3d0>)
 80063d2:	0030      	movs	r0, r6
 80063d4:	f00c fb2e 	bl	8012a34 <strncmp>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d100      	bne.n	80063de <setCommand+0x31a>
 80063dc:	e1d8      	b.n	8006790 <setCommand+0x6cc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80063de:	003a      	movs	r2, r7
 80063e0:	492d      	ldr	r1, [pc, #180]	; (8006498 <setCommand+0x3d4>)
 80063e2:	0030      	movs	r0, r6
 80063e4:	f00c fb26 	bl	8012a34 <strncmp>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d100      	bne.n	80063ee <setCommand+0x32a>
 80063ec:	e1e7      	b.n	80067be <setCommand+0x6fa>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80063ee:	003a      	movs	r2, r7
 80063f0:	492a      	ldr	r1, [pc, #168]	; (800649c <setCommand+0x3d8>)
 80063f2:	0030      	movs	r0, r6
 80063f4:	f00c fb1e 	bl	8012a34 <strncmp>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d000      	beq.n	80063fe <setCommand+0x33a>
 80063fc:	e68f      	b.n	800611e <setCommand+0x5a>
			temp16 =atoi((const char* )pcParameterString2);
 80063fe:	4640      	mov	r0, r8
 8006400:	f00b fe0b 	bl	801201a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006404:	1e43      	subs	r3, r0, #1
 8006406:	b29b      	uxth	r3, r3
 8006408:	2bfe      	cmp	r3, #254	; 0xfe
 800640a:	d900      	bls.n	800640e <setCommand+0x34a>
 800640c:	e6f5      	b.n	80061fa <setCommand+0x136>
				BOS.buttons.maxInterClickTime =temp16;
 800640e:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <setCommand+0x384>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006410:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 8006412:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006414:	0200      	lsls	r0, r0, #8
 8006416:	4301      	orrs	r1, r0
 8006418:	2018      	movs	r0, #24
 800641a:	b289      	uxth	r1, r1
 800641c:	30ff      	adds	r0, #255	; 0xff
 800641e:	f004 fc2d 	bl	800ac7c <EE_WriteVariable>
 8006422:	e133      	b.n	800668c <setCommand+0x5c8>
				temp84 =RTC_AM;
 8006424:	2301      	movs	r3, #1
 8006426:	4698      	mov	r8, r3
 8006428:	e6bf      	b.n	80061aa <setCommand+0xe6>
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	200017e4 	.word	0x200017e4
 8006430:	08018540 	.word	0x08018540
 8006434:	080187b8 	.word	0x080187b8
 8006438:	080187c8 	.word	0x080187c8
 800643c:	080185c8 	.word	0x080185c8
 8006440:	080187c0 	.word	0x080187c0
 8006444:	080187c4 	.word	0x080187c4
 8006448:	20006874 	.word	0x20006874
 800644c:	08018664 	.word	0x08018664
 8006450:	08018548 	.word	0x08018548
 8006454:	080176f8 	.word	0x080176f8
 8006458:	080186b4 	.word	0x080186b4
 800645c:	080186bc 	.word	0x080186bc
 8006460:	08018558 	.word	0x08018558
 8006464:	200067f4 	.word	0x200067f4
 8006468:	08018560 	.word	0x08018560
 800646c:	080187d0 	.word	0x080187d0
 8006470:	080187d8 	.word	0x080187d8
 8006474:	080187e0 	.word	0x080187e0
 8006478:	080187e8 	.word	0x080187e8
 800647c:	080187f4 	.word	0x080187f4
 8006480:	08018800 	.word	0x08018800
 8006484:	08018808 	.word	0x08018808
 8006488:	08018814 	.word	0x08018814
 800648c:	08018568 	.word	0x08018568
 8006490:	08018574 	.word	0x08018574
 8006494:	08018580 	.word	0x08018580
 8006498:	08018590 	.word	0x08018590
 800649c:	080185a4 	.word	0x080185a4
 80064a0:	6c26      	ldr	r6, [r4, #64]	; 0x40
 80064a2:	2207      	movs	r2, #7
 80064a4:	49d3      	ldr	r1, [pc, #844]	; (80067f4 <setCommand+0x730>)
 80064a6:	0030      	movs	r0, r6
 80064a8:	f00c fac4 	bl	8012a34 <strncmp>
			temp81 =MONDAY;
 80064ac:	2301      	movs	r3, #1
 80064ae:	4681      	mov	r9, r0
 80064b0:	469b      	mov	fp, r3
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80064b2:	464b      	mov	r3, r9
			temp82 =JANUARY;
 80064b4:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d123      	bne.n	8006502 <setCommand+0x43e>
		temp83 =atoi((const char* )pcParameterString4);		// day
 80064ba:	4643      	mov	r3, r8
 80064bc:	b2de      	uxtb	r6, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80064be:	1e73      	subs	r3, r6, #1
 80064c0:	2b1e      	cmp	r3, #30
 80064c2:	d900      	bls.n	80064c6 <setCommand+0x402>
 80064c4:	e699      	b.n	80061fa <setCommand+0x136>
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064c6:	4653      	mov	r3, sl
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	469a      	mov	sl, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80064cc:	4bca      	ldr	r3, [pc, #808]	; (80067f8 <setCommand+0x734>)
 80064ce:	4453      	add	r3, sl
 80064d0:	2b64      	cmp	r3, #100	; 0x64
 80064d2:	d900      	bls.n	80064d6 <setCommand+0x412>
 80064d4:	e691      	b.n	80061fa <setCommand+0x136>
				GetTimeDate();
 80064d6:	f006 fa2d 	bl	800c934 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80064da:	220c      	movs	r2, #12
 80064dc:	4bc7      	ldr	r3, [pc, #796]	; (80067fc <setCommand+0x738>)
 80064de:	0031      	movs	r1, r6
 80064e0:	569a      	ldrsb	r2, [r3, r2]
 80064e2:	0038      	movs	r0, r7
 80064e4:	9204      	str	r2, [sp, #16]
 80064e6:	7cda      	ldrb	r2, [r3, #19]
 80064e8:	9203      	str	r2, [sp, #12]
 80064ea:	7c9a      	ldrb	r2, [r3, #18]
 80064ec:	9202      	str	r2, [sp, #8]
 80064ee:	7c5a      	ldrb	r2, [r3, #17]
 80064f0:	9201      	str	r2, [sp, #4]
 80064f2:	7c1b      	ldrb	r3, [r3, #16]
 80064f4:	4652      	mov	r2, sl
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	465b      	mov	r3, fp
 80064fa:	f006 f9c1 	bl	800c880 <BOS_CalendarConfig>
 80064fe:	4681      	mov	r9, r0
 8006500:	e672      	b.n	80061e8 <setCommand+0x124>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006502:	2202      	movs	r2, #2
 8006504:	49be      	ldr	r1, [pc, #760]	; (8006800 <setCommand+0x73c>)
 8006506:	0030      	movs	r0, r6
 8006508:	f00c fa94 	bl	8012a34 <strncmp>
 800650c:	2800      	cmp	r0, #0
 800650e:	d0d4      	beq.n	80064ba <setCommand+0x3f6>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006510:	2208      	movs	r2, #8
 8006512:	49bc      	ldr	r1, [pc, #752]	; (8006804 <setCommand+0x740>)
 8006514:	0030      	movs	r0, r6
 8006516:	f00c fa8d 	bl	8012a34 <strncmp>
 800651a:	2800      	cmp	r0, #0
 800651c:	d100      	bne.n	8006520 <setCommand+0x45c>
 800651e:	e1c8      	b.n	80068b2 <setCommand+0x7ee>
 8006520:	2202      	movs	r2, #2
 8006522:	49b9      	ldr	r1, [pc, #740]	; (8006808 <setCommand+0x744>)
 8006524:	0030      	movs	r0, r6
 8006526:	f00c fa85 	bl	8012a34 <strncmp>
 800652a:	2800      	cmp	r0, #0
 800652c:	d100      	bne.n	8006530 <setCommand+0x46c>
 800652e:	e1c0      	b.n	80068b2 <setCommand+0x7ee>
 8006530:	2300      	movs	r3, #0
 8006532:	4699      	mov	r9, r3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006534:	2205      	movs	r2, #5
 8006536:	49b5      	ldr	r1, [pc, #724]	; (800680c <setCommand+0x748>)
 8006538:	0030      	movs	r0, r6
 800653a:	f00c fa7b 	bl	8012a34 <strncmp>
 800653e:	2800      	cmp	r0, #0
 8006540:	d100      	bne.n	8006544 <setCommand+0x480>
 8006542:	e0d6      	b.n	80066f2 <setCommand+0x62e>
 8006544:	2202      	movs	r2, #2
 8006546:	49b2      	ldr	r1, [pc, #712]	; (8006810 <setCommand+0x74c>)
 8006548:	0030      	movs	r0, r6
 800654a:	f00c fa73 	bl	8012a34 <strncmp>
 800654e:	2800      	cmp	r0, #0
 8006550:	d100      	bne.n	8006554 <setCommand+0x490>
 8006552:	e0ce      	b.n	80066f2 <setCommand+0x62e>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006554:	2205      	movs	r2, #5
 8006556:	49af      	ldr	r1, [pc, #700]	; (8006814 <setCommand+0x750>)
 8006558:	0030      	movs	r0, r6
 800655a:	f00c fa6b 	bl	8012a34 <strncmp>
 800655e:	2800      	cmp	r0, #0
 8006560:	d100      	bne.n	8006564 <setCommand+0x4a0>
 8006562:	e145      	b.n	80067f0 <setCommand+0x72c>
 8006564:	2202      	movs	r2, #2
 8006566:	49ac      	ldr	r1, [pc, #688]	; (8006818 <setCommand+0x754>)
 8006568:	0030      	movs	r0, r6
 800656a:	f00c fa63 	bl	8012a34 <strncmp>
 800656e:	2800      	cmp	r0, #0
 8006570:	d100      	bne.n	8006574 <setCommand+0x4b0>
 8006572:	e13d      	b.n	80067f0 <setCommand+0x72c>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006574:	2203      	movs	r2, #3
 8006576:	49a9      	ldr	r1, [pc, #676]	; (800681c <setCommand+0x758>)
 8006578:	0030      	movs	r0, r6
 800657a:	f00c fa5b 	bl	8012a34 <strncmp>
 800657e:	2800      	cmp	r0, #0
 8006580:	d100      	bne.n	8006584 <setCommand+0x4c0>
 8006582:	e192      	b.n	80068aa <setCommand+0x7e6>
 8006584:	2202      	movs	r2, #2
 8006586:	49a6      	ldr	r1, [pc, #664]	; (8006820 <setCommand+0x75c>)
 8006588:	0030      	movs	r0, r6
 800658a:	f00c fa53 	bl	8012a34 <strncmp>
 800658e:	2800      	cmp	r0, #0
 8006590:	d100      	bne.n	8006594 <setCommand+0x4d0>
 8006592:	e18a      	b.n	80068aa <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006594:	2204      	movs	r2, #4
 8006596:	49a3      	ldr	r1, [pc, #652]	; (8006824 <setCommand+0x760>)
 8006598:	0030      	movs	r0, r6
 800659a:	f00c fa4b 	bl	8012a34 <strncmp>
 800659e:	2800      	cmp	r0, #0
 80065a0:	d100      	bne.n	80065a4 <setCommand+0x4e0>
 80065a2:	e184      	b.n	80068ae <setCommand+0x7ea>
 80065a4:	2202      	movs	r2, #2
 80065a6:	49a0      	ldr	r1, [pc, #640]	; (8006828 <setCommand+0x764>)
 80065a8:	0030      	movs	r0, r6
 80065aa:	f00c fa43 	bl	8012a34 <strncmp>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d100      	bne.n	80065b4 <setCommand+0x4f0>
 80065b2:	e17c      	b.n	80068ae <setCommand+0x7ea>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 80065b4:	2204      	movs	r2, #4
 80065b6:	499d      	ldr	r1, [pc, #628]	; (800682c <setCommand+0x768>)
 80065b8:	0030      	movs	r0, r6
 80065ba:	f00c fa3b 	bl	8012a34 <strncmp>
 80065be:	2800      	cmp	r0, #0
 80065c0:	d100      	bne.n	80065c4 <setCommand+0x500>
 80065c2:	e178      	b.n	80068b6 <setCommand+0x7f2>
 80065c4:	2202      	movs	r2, #2
 80065c6:	499a      	ldr	r1, [pc, #616]	; (8006830 <setCommand+0x76c>)
 80065c8:	0030      	movs	r0, r6
 80065ca:	f00c fa33 	bl	8012a34 <strncmp>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d100      	bne.n	80065d4 <setCommand+0x510>
 80065d2:	e170      	b.n	80068b6 <setCommand+0x7f2>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 80065d4:	2205      	movs	r2, #5
 80065d6:	4997      	ldr	r1, [pc, #604]	; (8006834 <setCommand+0x770>)
 80065d8:	0030      	movs	r0, r6
 80065da:	f00c fa2b 	bl	8012a34 <strncmp>
 80065de:	2800      	cmp	r0, #0
 80065e0:	d100      	bne.n	80065e4 <setCommand+0x520>
 80065e2:	e170      	b.n	80068c6 <setCommand+0x802>
 80065e4:	2202      	movs	r2, #2
 80065e6:	4994      	ldr	r1, [pc, #592]	; (8006838 <setCommand+0x774>)
 80065e8:	0030      	movs	r0, r6
 80065ea:	f00c fa23 	bl	8012a34 <strncmp>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d100      	bne.n	80065f4 <setCommand+0x530>
 80065f2:	e168      	b.n	80068c6 <setCommand+0x802>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 80065f4:	2209      	movs	r2, #9
 80065f6:	4991      	ldr	r1, [pc, #580]	; (800683c <setCommand+0x778>)
 80065f8:	0030      	movs	r0, r6
 80065fa:	f00c fa1b 	bl	8012a34 <strncmp>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d100      	bne.n	8006604 <setCommand+0x540>
 8006602:	e15e      	b.n	80068c2 <setCommand+0x7fe>
 8006604:	2202      	movs	r2, #2
 8006606:	498e      	ldr	r1, [pc, #568]	; (8006840 <setCommand+0x77c>)
 8006608:	0030      	movs	r0, r6
 800660a:	f00c fa13 	bl	8012a34 <strncmp>
 800660e:	2800      	cmp	r0, #0
 8006610:	d100      	bne.n	8006614 <setCommand+0x550>
 8006612:	e156      	b.n	80068c2 <setCommand+0x7fe>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006614:	2207      	movs	r2, #7
 8006616:	498b      	ldr	r1, [pc, #556]	; (8006844 <setCommand+0x780>)
 8006618:	0030      	movs	r0, r6
 800661a:	f00c fa0b 	bl	8012a34 <strncmp>
 800661e:	2800      	cmp	r0, #0
 8006620:	d100      	bne.n	8006624 <setCommand+0x560>
 8006622:	e14c      	b.n	80068be <setCommand+0x7fa>
 8006624:	2202      	movs	r2, #2
 8006626:	4988      	ldr	r1, [pc, #544]	; (8006848 <setCommand+0x784>)
 8006628:	0030      	movs	r0, r6
 800662a:	f00c fa03 	bl	8012a34 <strncmp>
 800662e:	2800      	cmp	r0, #0
 8006630:	d100      	bne.n	8006634 <setCommand+0x570>
 8006632:	e144      	b.n	80068be <setCommand+0x7fa>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006634:	2208      	movs	r2, #8
 8006636:	4985      	ldr	r1, [pc, #532]	; (800684c <setCommand+0x788>)
 8006638:	0030      	movs	r0, r6
 800663a:	f00c f9fb 	bl	8012a34 <strncmp>
 800663e:	2800      	cmp	r0, #0
 8006640:	d100      	bne.n	8006644 <setCommand+0x580>
 8006642:	e13a      	b.n	80068ba <setCommand+0x7f6>
 8006644:	2202      	movs	r2, #2
 8006646:	4982      	ldr	r1, [pc, #520]	; (8006850 <setCommand+0x78c>)
 8006648:	0030      	movs	r0, r6
 800664a:	f00c f9f3 	bl	8012a34 <strncmp>
 800664e:	2800      	cmp	r0, #0
 8006650:	d100      	bne.n	8006654 <setCommand+0x590>
 8006652:	e132      	b.n	80068ba <setCommand+0x7f6>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006654:	2208      	movs	r2, #8
 8006656:	497f      	ldr	r1, [pc, #508]	; (8006854 <setCommand+0x790>)
 8006658:	0030      	movs	r0, r6
 800665a:	f00c f9eb 	bl	8012a34 <strncmp>
 800665e:	2800      	cmp	r0, #0
 8006660:	d007      	beq.n	8006672 <setCommand+0x5ae>
 8006662:	2202      	movs	r2, #2
 8006664:	497c      	ldr	r1, [pc, #496]	; (8006858 <setCommand+0x794>)
 8006666:	0030      	movs	r0, r6
 8006668:	f00c f9e4 	bl	8012a34 <strncmp>
 800666c:	2800      	cmp	r0, #0
 800666e:	d000      	beq.n	8006672 <setCommand+0x5ae>
 8006670:	e5c3      	b.n	80061fa <setCommand+0x136>
			temp82 =DECEMBER;
 8006672:	270c      	movs	r7, #12
 8006674:	e03e      	b.n	80066f4 <setCommand+0x630>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006676:	2260      	movs	r2, #96	; 0x60
 8006678:	4b78      	ldr	r3, [pc, #480]	; (800685c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800667a:	3015      	adds	r0, #21
 800667c:	7859      	ldrb	r1, [r3, #1]
				BOSMessaging.response = BOS_RESPONSE_ALL;
 800667e:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006680:	2360      	movs	r3, #96	; 0x60
 8006682:	0209      	lsls	r1, r1, #8
 8006684:	4319      	orrs	r1, r3
 8006686:	30ff      	adds	r0, #255	; 0xff
 8006688:	f004 faf8 	bl	800ac7c <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800668c:	2300      	movs	r3, #0
 800668e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006690:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006692:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006694:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006696:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006698:	4971      	ldr	r1, [pc, #452]	; (8006860 <setCommand+0x79c>)
 800669a:	f00c f987 	bl	80129ac <sprintf>
	return pdFALSE;
 800669e:	e543      	b.n	8006128 <setCommand+0x64>
			temp81 =TUESDAY;
 80066a0:	2302      	movs	r3, #2
 80066a2:	469b      	mov	fp, r3
 80066a4:	e705      	b.n	80064b2 <setCommand+0x3ee>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80066a6:	2240      	movs	r2, #64	; 0x40
 80066a8:	4b6c      	ldr	r3, [pc, #432]	; (800685c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066aa:	3015      	adds	r0, #21
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80066ac:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066ae:	7859      	ldrb	r1, [r3, #1]
 80066b0:	2340      	movs	r3, #64	; 0x40
 80066b2:	0209      	lsls	r1, r1, #8
 80066b4:	4319      	orrs	r1, r3
 80066b6:	30ff      	adds	r0, #255	; 0xff
 80066b8:	f004 fae0 	bl	800ac7c <EE_WriteVariable>
 80066bc:	e7e6      	b.n	800668c <setCommand+0x5c8>
			temp16 =atoi((const char* )pcParameterString2);
 80066be:	4640      	mov	r0, r8
 80066c0:	f00b fcab 	bl	801201a <atoi>
 80066c4:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80066c6:	2900      	cmp	r1, #0
 80066c8:	d100      	bne.n	80066cc <setCommand+0x608>
 80066ca:	e596      	b.n	80061fa <setCommand+0x136>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066cc:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 80066ce:	4b4b      	ldr	r3, [pc, #300]	; (80067fc <setCommand+0x738>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066d0:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 80066d2:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066d4:	f004 fad2 	bl	800ac7c <EE_WriteVariable>
 80066d8:	e7d8      	b.n	800668c <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_MESSAGE;
 80066da:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066dc:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_MESSAGE;
 80066de:	4b5f      	ldr	r3, [pc, #380]	; (800685c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066e0:	0049      	lsls	r1, r1, #1
				BOSMessaging.trace =TRACE_MESSAGE;
 80066e2:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	3015      	adds	r0, #21
 80066e8:	4319      	orrs	r1, r3
 80066ea:	30ff      	adds	r0, #255	; 0xff
 80066ec:	f004 fac6 	bl	800ac7c <EE_WriteVariable>
 80066f0:	e7cc      	b.n	800668c <setCommand+0x5c8>
			temp82 =MARCH;
 80066f2:	2703      	movs	r7, #3
		if(result == BOS_OK){
 80066f4:	464b      	mov	r3, r9
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d000      	beq.n	80066fc <setCommand+0x638>
 80066fa:	e579      	b.n	80061f0 <setCommand+0x12c>
 80066fc:	e6dd      	b.n	80064ba <setCommand+0x3f6>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 80066fe:	2220      	movs	r2, #32
 8006700:	4b56      	ldr	r3, [pc, #344]	; (800685c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006702:	3015      	adds	r0, #21
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006704:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006706:	7859      	ldrb	r1, [r3, #1]
 8006708:	2320      	movs	r3, #32
 800670a:	0209      	lsls	r1, r1, #8
 800670c:	4319      	orrs	r1, r3
 800670e:	30ff      	adds	r0, #255	; 0xff
 8006710:	f004 fab4 	bl	800ac7c <EE_WriteVariable>
 8006714:	e7ba      	b.n	800668c <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_BOTH;
 8006716:	2203      	movs	r2, #3
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006718:	21c0      	movs	r1, #192	; 0xc0
				BOSMessaging.trace =TRACE_BOTH;
 800671a:	4b50      	ldr	r3, [pc, #320]	; (800685c <setCommand+0x798>)
 800671c:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800671e:	781b      	ldrb	r3, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006720:	0089      	lsls	r1, r1, #2
 8006722:	3015      	adds	r0, #21
 8006724:	4319      	orrs	r1, r3
 8006726:	30ff      	adds	r0, #255	; 0xff
 8006728:	f004 faa8 	bl	800ac7c <EE_WriteVariable>
 800672c:	e7ae      	b.n	800668c <setCommand+0x5c8>
			temp2 =atoi((const char* )pcParameterString2);
 800672e:	4640      	mov	r0, r8
 8006730:	f00b fc73 	bl	801201a <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006734:	23e1      	movs	r3, #225	; 0xe1
 8006736:	031b      	lsls	r3, r3, #12
 8006738:	4298      	cmp	r0, r3
 800673a:	d900      	bls.n	800673e <setCommand+0x67a>
 800673c:	e55d      	b.n	80061fa <setCommand+0x136>
				BOS.clibaudrate =temp2;
 800673e:	4e2f      	ldr	r6, [pc, #188]	; (80067fc <setCommand+0x738>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006740:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 8006742:	60b0      	str	r0, [r6, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006744:	208c      	movs	r0, #140	; 0x8c
 8006746:	0040      	lsls	r0, r0, #1
 8006748:	f004 fa98 	bl	800ac7c <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800674c:	201a      	movs	r0, #26
 800674e:	8971      	ldrh	r1, [r6, #10]
 8006750:	30ff      	adds	r0, #255	; 0xff
 8006752:	f004 fa93 	bl	800ac7c <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006756:	4649      	mov	r1, r9
 8006758:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800675a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800675c:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800675e:	54d1      	strb	r1, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006760:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006762:	493f      	ldr	r1, [pc, #252]	; (8006860 <setCommand+0x79c>)
 8006764:	f00c f922 	bl	80129ac <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006768:	0028      	movs	r0, r5
 800676a:	f7f9 fcd5 	bl	8000118 <strlen>
 800676e:	0004      	movs	r4, r0
 8006770:	2230      	movs	r2, #48	; 0x30
 8006772:	1828      	adds	r0, r5, r0
 8006774:	493b      	ldr	r1, [pc, #236]	; (8006864 <setCommand+0x7a0>)
 8006776:	f00b ff16 	bl	80125a6 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 800677a:	0020      	movs	r0, r4
 800677c:	302f      	adds	r0, #47	; 0x2f
 800677e:	1828      	adds	r0, r5, r0
 8006780:	22b2      	movs	r2, #178	; 0xb2
 8006782:	4939      	ldr	r1, [pc, #228]	; (8006868 <setCommand+0x7a4>)
 8006784:	f00b ff0f 	bl	80125a6 <memcpy>
 8006788:	e4ce      	b.n	8006128 <setCommand+0x64>
			temp81 =WEDNESDAY;
 800678a:	2303      	movs	r3, #3
 800678c:	469b      	mov	fp, r3
 800678e:	e690      	b.n	80064b2 <setCommand+0x3ee>
			temp16 =atoi((const char* )pcParameterString2);
 8006790:	4640      	mov	r0, r8
 8006792:	f00b fc42 	bl	801201a <atoi>
 8006796:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006798:	2900      	cmp	r1, #0
 800679a:	d100      	bne.n	800679e <setCommand+0x6da>
 800679c:	e52d      	b.n	80061fa <setCommand+0x136>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 800679e:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 80067a0:	4b16      	ldr	r3, [pc, #88]	; (80067fc <setCommand+0x738>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80067a2:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 80067a4:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80067a6:	f004 fa69 	bl	800ac7c <EE_WriteVariable>
 80067aa:	e76f      	b.n	800668c <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_RESPONSE;
 80067ac:	2202      	movs	r2, #2
 80067ae:	4b2b      	ldr	r3, [pc, #172]	; (800685c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80067b0:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_RESPONSE;
 80067b2:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	e7b3      	b.n	8006720 <setCommand+0x65c>
			temp81 =THURSDAY;
 80067b8:	2304      	movs	r3, #4
 80067ba:	469b      	mov	fp, r3
 80067bc:	e679      	b.n	80064b2 <setCommand+0x3ee>
			temp16 =atoi((const char* )pcParameterString2);
 80067be:	4640      	mov	r0, r8
 80067c0:	f00b fc2b 	bl	801201a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80067c4:	1e43      	subs	r3, r0, #1
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2bfe      	cmp	r3, #254	; 0xfe
 80067ca:	d900      	bls.n	80067ce <setCommand+0x70a>
 80067cc:	e515      	b.n	80061fa <setCommand+0x136>
				BOS.buttons.minInterClickTime =temp16;
 80067ce:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <setCommand+0x738>)
 80067d0:	b2c0      	uxtb	r0, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067d2:	7959      	ldrb	r1, [r3, #5]
				BOS.buttons.minInterClickTime =temp16;
 80067d4:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067d6:	0209      	lsls	r1, r1, #8
 80067d8:	4301      	orrs	r1, r0
 80067da:	2018      	movs	r0, #24
 80067dc:	30ff      	adds	r0, #255	; 0xff
 80067de:	f004 fa4d 	bl	800ac7c <EE_WriteVariable>
 80067e2:	e753      	b.n	800668c <setCommand+0x5c8>
			temp81 =FRIDAY;
 80067e4:	2305      	movs	r3, #5
 80067e6:	469b      	mov	fp, r3
 80067e8:	e663      	b.n	80064b2 <setCommand+0x3ee>
			temp81 =SATURDAY;
 80067ea:	2306      	movs	r3, #6
 80067ec:	469b      	mov	fp, r3
 80067ee:	e660      	b.n	80064b2 <setCommand+0x3ee>
			temp82 =APRIL;
 80067f0:	2704      	movs	r7, #4
 80067f2:	e77f      	b.n	80066f4 <setCommand+0x630>
 80067f4:	080187e0 	.word	0x080187e0
 80067f8:	fffff830 	.word	0xfffff830
 80067fc:	20006874 	.word	0x20006874
 8006800:	0801889c 	.word	0x0801889c
 8006804:	080188a0 	.word	0x080188a0
 8006808:	080188ac 	.word	0x080188ac
 800680c:	0801881c 	.word	0x0801881c
 8006810:	08018824 	.word	0x08018824
 8006814:	08018828 	.word	0x08018828
 8006818:	08018830 	.word	0x08018830
 800681c:	08018834 	.word	0x08018834
 8006820:	08018838 	.word	0x08018838
 8006824:	0801883c 	.word	0x0801883c
 8006828:	08018844 	.word	0x08018844
 800682c:	08018848 	.word	0x08018848
 8006830:	08018850 	.word	0x08018850
 8006834:	08018854 	.word	0x08018854
 8006838:	0801885c 	.word	0x0801885c
 800683c:	08018860 	.word	0x08018860
 8006840:	0801886c 	.word	0x0801886c
 8006844:	08018870 	.word	0x08018870
 8006848:	08018878 	.word	0x08018878
 800684c:	0801887c 	.word	0x0801887c
 8006850:	08018888 	.word	0x08018888
 8006854:	0801888c 	.word	0x0801888c
 8006858:	08018898 	.word	0x08018898
 800685c:	200067f4 	.word	0x200067f4
 8006860:	080186c0 	.word	0x080186c0
 8006864:	080186d4 	.word	0x080186d4
 8006868:	08018704 	.word	0x08018704
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800686c:	9b07      	ldr	r3, [sp, #28]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d100      	bne.n	8006874 <setCommand+0x7b0>
 8006872:	e4c2      	b.n	80061fa <setCommand+0x136>
 8006874:	2202      	movs	r2, #2
 8006876:	4915      	ldr	r1, [pc, #84]	; (80068cc <setCommand+0x808>)
 8006878:	0030      	movs	r0, r6
 800687a:	f00c f8db 	bl	8012a34 <strncmp>
 800687e:	2800      	cmp	r0, #0
 8006880:	d100      	bne.n	8006884 <setCommand+0x7c0>
 8006882:	e4ba      	b.n	80061fa <setCommand+0x136>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006884:	2208      	movs	r2, #8
 8006886:	4912      	ldr	r1, [pc, #72]	; (80068d0 <setCommand+0x80c>)
 8006888:	0030      	movs	r0, r6
 800688a:	f00c f8d3 	bl	8012a34 <strncmp>
 800688e:	2800      	cmp	r0, #0
 8006890:	d100      	bne.n	8006894 <setCommand+0x7d0>
 8006892:	e4b2      	b.n	80061fa <setCommand+0x136>
 8006894:	2202      	movs	r2, #2
 8006896:	490f      	ldr	r1, [pc, #60]	; (80068d4 <setCommand+0x810>)
 8006898:	0030      	movs	r0, r6
 800689a:	f00c f8cb 	bl	8012a34 <strncmp>
 800689e:	2800      	cmp	r0, #0
 80068a0:	d100      	bne.n	80068a4 <setCommand+0x7e0>
 80068a2:	e4aa      	b.n	80061fa <setCommand+0x136>
			result =BOS_ERR_WrongValue;
 80068a4:	2368      	movs	r3, #104	; 0x68
 80068a6:	4699      	mov	r9, r3
 80068a8:	e644      	b.n	8006534 <setCommand+0x470>
			temp82 =MAY;
 80068aa:	2705      	movs	r7, #5
 80068ac:	e722      	b.n	80066f4 <setCommand+0x630>
			temp82 =JUNE;
 80068ae:	2706      	movs	r7, #6
 80068b0:	e720      	b.n	80066f4 <setCommand+0x630>
			temp82 =FEBRUARY;
 80068b2:	2702      	movs	r7, #2
 80068b4:	e601      	b.n	80064ba <setCommand+0x3f6>
			temp82 =JULY;
 80068b6:	2707      	movs	r7, #7
 80068b8:	e71c      	b.n	80066f4 <setCommand+0x630>
			temp82 =NOVEMBER;
 80068ba:	270b      	movs	r7, #11
 80068bc:	e71a      	b.n	80066f4 <setCommand+0x630>
			temp82 =OCTOBER;
 80068be:	270a      	movs	r7, #10
 80068c0:	e718      	b.n	80066f4 <setCommand+0x630>
			temp82 =SEPTEMBER;
 80068c2:	2709      	movs	r7, #9
 80068c4:	e716      	b.n	80066f4 <setCommand+0x630>
			temp82 =AUGUST;
 80068c6:	2708      	movs	r7, #8
 80068c8:	e714      	b.n	80066f4 <setCommand+0x630>
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	0801889c 	.word	0x0801889c
 80068d0:	080188a0 	.word	0x080188a0
 80068d4:	080188ac 	.word	0x080188ac

080068d8 <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 80068d8:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80068da:	b530      	push	{r4, r5, lr}
 80068dc:	b083      	sub	sp, #12
 80068de:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068e0:	2101      	movs	r1, #1
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80068e2:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068e4:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80068e6:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068e8:	f006 fd08 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80068ec:	2300      	movs	r3, #0
 80068ee:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 80068f0:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 80068f2:	2b70      	cmp	r3, #112	; 0x70
 80068f4:	d00d      	beq.n	8006912 <removebuttonCommand+0x3a>
	result =RemovePortButton(port);
 80068f6:	0020      	movs	r0, r4
 80068f8:	f004 fdba 	bl	800b470 <RemovePortButton>
	if(result == BOS_OK){
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d105      	bne.n	800690c <removebuttonCommand+0x34>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006900:	0023      	movs	r3, r4
 8006902:	0022      	movs	r2, r4
 8006904:	4905      	ldr	r1, [pc, #20]	; (800691c <removebuttonCommand+0x44>)
 8006906:	0028      	movs	r0, r5
 8006908:	f00c f850 	bl	80129ac <sprintf>
}
 800690c:	2000      	movs	r0, #0
 800690e:	b003      	add	sp, #12
 8006910:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006912:	3001      	adds	r0, #1
 8006914:	f00b fb87 	bl	8012026 <atol>
 8006918:	b2c4      	uxtb	r4, r0
 800691a:	e7ec      	b.n	80068f6 <removebuttonCommand+0x1e>
 800691c:	080188b0 	.word	0x080188b0

08006920 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006922:	46ce      	mov	lr, r9
 8006924:	4647      	mov	r7, r8
 8006926:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006928:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800692a:	b580      	push	{r7, lr}
 800692c:	b085      	sub	sp, #20
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800692e:	aa02      	add	r2, sp, #8
 8006930:	2101      	movs	r1, #1
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006932:	4680      	mov	r8, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006934:	0030      	movs	r0, r6
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006936:	9302      	str	r3, [sp, #8]
 8006938:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800693a:	f006 fcdf 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800693e:	9f02      	ldr	r7, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006940:	4b24      	ldr	r3, [pc, #144]	; (80069d4 <addbuttonCommand+0xb4>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006942:	003a      	movs	r2, r7
 8006944:	4924      	ldr	r1, [pc, #144]	; (80069d8 <addbuttonCommand+0xb8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006946:	0004      	movs	r4, r0
 8006948:	4699      	mov	r9, r3
 800694a:	64d8      	str	r0, [r3, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800694c:	f00c f872 	bl	8012a34 <strncmp>
		type =MOMENTARY_NO;
 8006950:	2501      	movs	r5, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006952:	2800      	cmp	r0, #0
 8006954:	d007      	beq.n	8006966 <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006956:	003a      	movs	r2, r7
 8006958:	4920      	ldr	r1, [pc, #128]	; (80069dc <addbuttonCommand+0xbc>)
 800695a:	0020      	movs	r0, r4
 800695c:	f00c f86a 	bl	8012a34 <strncmp>
		type =MOMENTARY_NC;
 8006960:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006962:	2800      	cmp	r0, #0
 8006964:	d11f      	bne.n	80069a6 <addbuttonCommand+0x86>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006966:	aa03      	add	r2, sp, #12
 8006968:	2102      	movs	r1, #2
 800696a:	0030      	movs	r0, r6
 800696c:	f006 fcc6 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006970:	2300      	movs	r3, #0
 8006972:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006974:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006976:	2b70      	cmp	r3, #112	; 0x70
 8006978:	d026      	beq.n	80069c8 <addbuttonCommand+0xa8>
	result =AddPortButton(type,port);
 800697a:	0021      	movs	r1, r4
 800697c:	0028      	movs	r0, r5
 800697e:	f004 fcfd 	bl	800b37c <AddPortButton>
	if(result == BOS_OK){
 8006982:	2800      	cmp	r0, #0
 8006984:	d109      	bne.n	800699a <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006986:	464b      	mov	r3, r9
 8006988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800698a:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 800698c:	4914      	ldr	r1, [pc, #80]	; (80069e0 <addbuttonCommand+0xc0>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 800698e:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006990:	9400      	str	r4, [sp, #0]
 8006992:	0023      	movs	r3, r4
 8006994:	4640      	mov	r0, r8
 8006996:	f00c f809 	bl	80129ac <sprintf>
}
 800699a:	2000      	movs	r0, #0
 800699c:	b005      	add	sp, #20
 800699e:	bc0c      	pop	{r2, r3}
 80069a0:	4690      	mov	r8, r2
 80069a2:	4699      	mov	r9, r3
 80069a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 80069a6:	003a      	movs	r2, r7
 80069a8:	490e      	ldr	r1, [pc, #56]	; (80069e4 <addbuttonCommand+0xc4>)
 80069aa:	0020      	movs	r0, r4
 80069ac:	f00c f842 	bl	8012a34 <strncmp>
		type =ONOFF_NO;
 80069b0:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d0d7      	beq.n	8006966 <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 80069b6:	003a      	movs	r2, r7
 80069b8:	490b      	ldr	r1, [pc, #44]	; (80069e8 <addbuttonCommand+0xc8>)
 80069ba:	0020      	movs	r0, r4
 80069bc:	f00c f83a 	bl	8012a34 <strncmp>
		type =ONOFF_NC;
 80069c0:	4245      	negs	r5, r0
 80069c2:	4145      	adcs	r5, r0
 80069c4:	00ad      	lsls	r5, r5, #2
 80069c6:	e7ce      	b.n	8006966 <addbuttonCommand+0x46>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 80069c8:	3001      	adds	r0, #1
 80069ca:	f00b fb2c 	bl	8012026 <atol>
 80069ce:	b2c4      	uxtb	r4, r0
 80069d0:	e7d3      	b.n	800697a <addbuttonCommand+0x5a>
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	200017e4 	.word	0x200017e4
 80069d8:	080188d8 	.word	0x080188d8
 80069dc:	080188e8 	.word	0x080188e8
 80069e0:	08018910 	.word	0x08018910
 80069e4:	080188f8 	.word	0x080188f8
 80069e8:	08018904 	.word	0x08018904

080069ec <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80069ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ee:	46de      	mov	lr, fp
 80069f0:	464e      	mov	r6, r9
 80069f2:	4657      	mov	r7, sl
 80069f4:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80069f6:	2300      	movs	r3, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80069f8:	0014      	movs	r4, r2
 80069fa:	b5e0      	push	{r5, r6, r7, lr}
 80069fc:	b099      	sub	sp, #100	; 0x64
 80069fe:	9007      	str	r0, [sp, #28]
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006a00:	220a      	movs	r2, #10
 8006a02:	2100      	movs	r1, #0
 8006a04:	a80f      	add	r0, sp, #60	; 0x3c
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006a06:	9308      	str	r3, [sp, #32]
 8006a08:	9309      	str	r3, [sp, #36]	; 0x24
 8006a0a:	930a      	str	r3, [sp, #40]	; 0x28
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006a0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8006a10:	930d      	str	r3, [sp, #52]	; 0x34
	portBASE_TYPE xParameterStringLength7 =0;
 8006a12:	930e      	str	r3, [sp, #56]	; 0x38
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006a14:	f00b fdd0 	bl	80125b8 <memset>
 8006a18:	220a      	movs	r2, #10
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	a812      	add	r0, sp, #72	; 0x48
 8006a1e:	f00b fdcb 	bl	80125b8 <memset>
 8006a22:	220a      	movs	r2, #10
 8006a24:	2100      	movs	r1, #0
 8006a26:	a815      	add	r0, sp, #84	; 0x54
 8006a28:	f00b fdc6 	bl	80125b8 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006a2c:	aa08      	add	r2, sp, #32
 8006a2e:	2101      	movs	r1, #1
 8006a30:	0020      	movs	r0, r4
 8006a32:	f006 fc63 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006a36:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a38:	2200      	movs	r2, #0
	if(pcParameterString1[0] == 'P'){
 8006a3a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a3c:	4691      	mov	r9, r2
	if(pcParameterString1[0] == 'P'){
 8006a3e:	2b50      	cmp	r3, #80	; 0x50
 8006a40:	d100      	bne.n	8006a44 <scastCommand+0x58>
 8006a42:	e085      	b.n	8006b50 <scastCommand+0x164>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006a44:	aa09      	add	r2, sp, #36	; 0x24
 8006a46:	2102      	movs	r1, #2
 8006a48:	0020      	movs	r0, r4
 8006a4a:	f006 fc57 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006a50:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006a52:	a80f      	add	r0, sp, #60	; 0x3c
 8006a54:	f00b ffff 	bl	8012a56 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006a58:	a80f      	add	r0, sp, #60	; 0x3c
 8006a5a:	f7fd fbf5 	bl	8004248 <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006a5e:	aa0a      	add	r2, sp, #40	; 0x28
	srcM =(uint8_t )GetID(par1);
 8006a60:	b2c5      	uxtb	r5, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006a62:	2103      	movs	r1, #3
 8006a64:	0020      	movs	r0, r4
 8006a66:	f006 fc49 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006a6a:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a6c:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 8006a6e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a70:	4692      	mov	sl, r2
	if(pcParameterString3[0] == 'p'){
 8006a72:	2b70      	cmp	r3, #112	; 0x70
 8006a74:	d066      	beq.n	8006b44 <scastCommand+0x158>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006a76:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a78:	2104      	movs	r1, #4
 8006a7a:	0020      	movs	r0, r4
 8006a7c:	f006 fc3e 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006a80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006a82:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006a84:	a812      	add	r0, sp, #72	; 0x48
 8006a86:	f00b ffe6 	bl	8012a56 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006a8a:	a812      	add	r0, sp, #72	; 0x48
 8006a8c:	f7fd fbdc 	bl	8004248 <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a90:	aa0c      	add	r2, sp, #48	; 0x30
	dstM =(uint8_t )GetID(par2);
 8006a92:	b2c3      	uxtb	r3, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a94:	2105      	movs	r1, #5
 8006a96:	0020      	movs	r0, r4
	dstM =(uint8_t )GetID(par2);
 8006a98:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a9a:	f006 fc2f 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006a9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aa0:	492e      	ldr	r1, [pc, #184]	; (8006b5c <scastCommand+0x170>)
 8006aa2:	001a      	movs	r2, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006aa4:	0007      	movs	r7, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006aa6:	4698      	mov	r8, r3
 8006aa8:	f00b ffc4 	bl	8012a34 <strncmp>
		direction =FORWARD;
 8006aac:	2600      	movs	r6, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d007      	beq.n	8006ac2 <scastCommand+0xd6>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006ab2:	4642      	mov	r2, r8
 8006ab4:	492a      	ldr	r1, [pc, #168]	; (8006b60 <scastCommand+0x174>)
 8006ab6:	0038      	movs	r0, r7
 8006ab8:	f00b ffbc 	bl	8012a34 <strncmp>
		direction =BACKWARD;
 8006abc:	3601      	adds	r6, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d137      	bne.n	8006b32 <scastCommand+0x146>
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006ac2:	0039      	movs	r1, r7
 8006ac4:	4642      	mov	r2, r8
 8006ac6:	a815      	add	r0, sp, #84	; 0x54
 8006ac8:	f00b ffc5 	bl	8012a56 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006acc:	aa0d      	add	r2, sp, #52	; 0x34
 8006ace:	2106      	movs	r1, #6
 8006ad0:	0020      	movs	r0, r4
 8006ad2:	f006 fc13 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006ad6:	f00b faa6 	bl	8012026 <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006ada:	aa0e      	add	r2, sp, #56	; 0x38
 8006adc:	2107      	movs	r1, #7
	count =(uint32_t )atol((char* )pcParameterString6);
 8006ade:	0007      	movs	r7, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006ae0:	0020      	movs	r0, r4
 8006ae2:	f006 fc0b 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006ae6:	f00b fa9e 	bl	8012026 <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006aea:	2300      	movs	r3, #0
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006aec:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006aee:	9303      	str	r3, [sp, #12]
 8006af0:	9002      	str	r0, [sp, #8]
 8006af2:	9701      	str	r7, [sp, #4]
 8006af4:	9600      	str	r6, [sp, #0]
 8006af6:	465b      	mov	r3, fp
 8006af8:	4652      	mov	r2, sl
 8006afa:	0029      	movs	r1, r5
 8006afc:	4648      	mov	r0, r9
 8006afe:	f001 fb37 	bl	8008170 <StartScastDMAStream>
	if(result == BOS_OK){
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d10d      	bne.n	8006b22 <scastCommand+0x136>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006b06:	ab12      	add	r3, sp, #72	; 0x48
 8006b08:	9302      	str	r3, [sp, #8]
 8006b0a:	4653      	mov	r3, sl
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	ab0f      	add	r3, sp, #60	; 0x3c
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	9404      	str	r4, [sp, #16]
 8006b14:	9703      	str	r7, [sp, #12]
 8006b16:	464b      	mov	r3, r9
 8006b18:	aa15      	add	r2, sp, #84	; 0x54
 8006b1a:	4912      	ldr	r1, [pc, #72]	; (8006b64 <scastCommand+0x178>)
 8006b1c:	9807      	ldr	r0, [sp, #28]
 8006b1e:	f00b ff45 	bl	80129ac <sprintf>
}
 8006b22:	2000      	movs	r0, #0
 8006b24:	b019      	add	sp, #100	; 0x64
 8006b26:	bc3c      	pop	{r2, r3, r4, r5}
 8006b28:	4690      	mov	r8, r2
 8006b2a:	4699      	mov	r9, r3
 8006b2c:	46a2      	mov	sl, r4
 8006b2e:	46ab      	mov	fp, r5
 8006b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006b32:	4642      	mov	r2, r8
 8006b34:	490c      	ldr	r1, [pc, #48]	; (8006b68 <scastCommand+0x17c>)
 8006b36:	0038      	movs	r0, r7
 8006b38:	f00b ff7c 	bl	8012a34 <strncmp>
		direction =BIDIRECTIONAL;
 8006b3c:	4246      	negs	r6, r0
 8006b3e:	4146      	adcs	r6, r0
 8006b40:	0076      	lsls	r6, r6, #1
 8006b42:	e7be      	b.n	8006ac2 <scastCommand+0xd6>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006b44:	3001      	adds	r0, #1
 8006b46:	f00b fa6e 	bl	8012026 <atol>
 8006b4a:	b2c3      	uxtb	r3, r0
 8006b4c:	469a      	mov	sl, r3
 8006b4e:	e792      	b.n	8006a76 <scastCommand+0x8a>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006b50:	3001      	adds	r0, #1
 8006b52:	f00b fa68 	bl	8012026 <atol>
 8006b56:	b2c3      	uxtb	r3, r0
 8006b58:	4699      	mov	r9, r3
 8006b5a:	e773      	b.n	8006a44 <scastCommand+0x58>
 8006b5c:	08018944 	.word	0x08018944
 8006b60:	0801894c 	.word	0x0801894c
 8006b64:	08018968 	.word	0x08018968
 8006b68:	08018958 	.word	0x08018958

08006b6c <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(N > 1)
 8006b6e:	4d22      	ldr	r5, [pc, #136]	; (8006bf8 <infoCommand+0x8c>)
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b70:	b083      	sub	sp, #12
	if(N > 1)
 8006b72:	782a      	ldrb	r2, [r5, #0]
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b74:	0004      	movs	r4, r0
	BOS_Status result =BOS_OK;
 8006b76:	2700      	movs	r7, #0
	if(N > 1)
 8006b78:	2a01      	cmp	r2, #1
 8006b7a:	d903      	bls.n	8006b84 <infoCommand+0x18>
		result =ReadPortsDir();
 8006b7c:	f006 f9ae 	bl	800cedc <ReadPortsDir>
 8006b80:	0007      	movs	r7, r0
 8006b82:	782a      	ldrb	r2, [r5, #0]
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006b84:	491d      	ldr	r1, [pc, #116]	; (8006bfc <infoCommand+0x90>)
 8006b86:	0020      	movs	r0, r4
 8006b88:	f00b ff10 	bl	80129ac <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006b8c:	2601      	movs	r6, #1
 8006b8e:	0020      	movs	r0, r4
 8006b90:	f7f9 fac2 	bl	8000118 <strlen>
 8006b94:	4d1a      	ldr	r5, [pc, #104]	; (8006c00 <infoCommand+0x94>)
 8006b96:	4276      	negs	r6, r6
 8006b98:	b282      	uxth	r2, r0
 8006b9a:	2332      	movs	r3, #50	; 0x32
 8006b9c:	7828      	ldrb	r0, [r5, #0]
 8006b9e:	0021      	movs	r1, r4
 8006ba0:	9600      	str	r6, [sp, #0]
 8006ba2:	f006 f905 	bl	800cdb0 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006ba6:	2213      	movs	r2, #19
 8006ba8:	4916      	ldr	r1, [pc, #88]	; (8006c04 <infoCommand+0x98>)
 8006baa:	0020      	movs	r0, r4
 8006bac:	f00b fcfb 	bl	80125a6 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006bb0:	7828      	ldrb	r0, [r5, #0]
 8006bb2:	2332      	movs	r3, #50	; 0x32
 8006bb4:	2212      	movs	r2, #18
 8006bb6:	0021      	movs	r1, r4
 8006bb8:	9600      	str	r6, [sp, #0]
 8006bba:	f006 f8f9 	bl	800cdb0 <writePxMutex>
	DisplayTopology(PcPort);
 8006bbe:	7828      	ldrb	r0, [r5, #0]
 8006bc0:	f7fd f880 	bl	8003cc4 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006bc4:	7828      	ldrb	r0, [r5, #0]
 8006bc6:	f7fd f94f 	bl	8003e68 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006bca:	2f02      	cmp	r7, #2
 8006bcc:	d007      	beq.n	8006bde <infoCommand+0x72>
	sprintf((char* )pcWriteBuffer," ");
 8006bce:	2202      	movs	r2, #2
 8006bd0:	490d      	ldr	r1, [pc, #52]	; (8006c08 <infoCommand+0x9c>)
 8006bd2:	0020      	movs	r0, r4
 8006bd4:	f00b fce7 	bl	80125a6 <memcpy>
}
 8006bd8:	2000      	movs	r0, #0
 8006bda:	b003      	add	sp, #12
 8006bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006bde:	2244      	movs	r2, #68	; 0x44
 8006be0:	490a      	ldr	r1, [pc, #40]	; (8006c0c <infoCommand+0xa0>)
 8006be2:	0020      	movs	r0, r4
 8006be4:	f00b fcdf 	bl	80125a6 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006be8:	7828      	ldrb	r0, [r5, #0]
 8006bea:	2332      	movs	r3, #50	; 0x32
 8006bec:	9600      	str	r6, [sp, #0]
 8006bee:	2243      	movs	r2, #67	; 0x43
 8006bf0:	0021      	movs	r1, r4
 8006bf2:	f006 f8dd 	bl	800cdb0 <writePxMutex>
 8006bf6:	e7ea      	b.n	8006bce <infoCommand+0x62>
 8006bf8:	20000010 	.word	0x20000010
 8006bfc:	080189f0 	.word	0x080189f0
 8006c00:	20000c38 	.word	0x20000c38
 8006c04:	08018a0c 	.word	0x08018a0c
 8006c08:	080175f4 	.word	0x080175f4
 8006c0c:	08018a20 	.word	0x08018a20

08006c10 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c10:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006c12:	2000      	movs	r0, #0
 8006c14:	f7fd f9a2 	bl	8003f5c <DisplayModuleStatus>
}
 8006c18:	2000      	movs	r0, #0
 8006c1a:	bd10      	pop	{r4, pc}

08006c1c <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c1e:	46de      	mov	lr, fp
 8006c20:	464e      	mov	r6, r9
 8006c22:	4645      	mov	r5, r8
 8006c24:	4657      	mov	r7, sl
 8006c26:	b5e0      	push	{r5, r6, r7, lr}
 8006c28:	b091      	sub	sp, #68	; 0x44
	char module[MaxLengthOfAlias + 30] ={0};
 8006c2a:	ae06      	add	r6, sp, #24
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c2c:	4691      	mov	r9, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8006c2e:	2100      	movs	r1, #0
 8006c30:	2227      	movs	r2, #39	; 0x27
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c32:	4680      	mov	r8, r0
	char module[MaxLengthOfAlias + 30] ={0};
 8006c34:	0030      	movs	r0, r6
 8006c36:	f00b fcbf 	bl	80125b8 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006c3a:	220a      	movs	r2, #10
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	a803      	add	r0, sp, #12
 8006c40:	f00b fcba 	bl	80125b8 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c44:	4d52      	ldr	r5, [pc, #328]	; (8006d90 <groupCommand+0x174>)
 8006c46:	2101      	movs	r1, #1
 8006c48:	002a      	movs	r2, r5
 8006c4a:	4648      	mov	r0, r9
 8006c4c:	3250      	adds	r2, #80	; 0x50
 8006c4e:	f006 fb55 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006c52:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c54:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006c56:	a803      	add	r0, sp, #12
 8006c58:	f00b fefd 	bl	8012a56 <strncpy>
 8006c5c:	4c4d      	ldr	r4, [pc, #308]	; (8006d94 <groupCommand+0x178>)
 8006c5e:	0027      	movs	r7, r4
 8006c60:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006c62:	0021      	movs	r1, r4
 8006c64:	a803      	add	r0, sp, #12
 8006c66:	f7f9 fa4d 	bl	8000104 <strcmp>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d049      	beq.n	8006d02 <groupCommand+0xe6>
 8006c6e:	340a      	adds	r4, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006c70:	42a7      	cmp	r7, r4
 8006c72:	d1f6      	bne.n	8006c62 <groupCommand+0x46>
	type =1;
 8006c74:	2301      	movs	r3, #1
 8006c76:	9301      	str	r3, [sp, #4]
	count =2;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	2454      	movs	r4, #84	; 0x54
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006c7c:	220a      	movs	r2, #10
 8006c7e:	4946      	ldr	r1, [pc, #280]	; (8006d98 <groupCommand+0x17c>)
 8006c80:	4640      	mov	r0, r8
	count =2;
 8006c82:	552b      	strb	r3, [r5, r4]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006c84:	f00b fc8f 	bl	80125a6 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006c88:	002a      	movs	r2, r5
 8006c8a:	2102      	movs	r1, #2
 8006c8c:	3258      	adds	r2, #88	; 0x58
 8006c8e:	4648      	mov	r0, r9
 8006c90:	f006 fb34 	bl	800d2fc <FreeRTOS_CLIGetParameter>
 8006c94:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d069      	beq.n	8006d6e <groupCommand+0x152>
		module[xParameterStringLength] ='\0';
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	469a      	mov	sl, r3
			strcat((char* )pcWriteBuffer,", ");
 8006c9e:	4b3f      	ldr	r3, [pc, #252]	; (8006d9c <groupCommand+0x180>)
		if(count > 2)
 8006ca0:	2754      	movs	r7, #84	; 0x54
			strcat((char* )pcWriteBuffer,", ");
 8006ca2:	469b      	mov	fp, r3
 8006ca4:	e00e      	b.n	8006cc4 <groupCommand+0xa8>
		strcat((char* )pcWriteBuffer,module);
 8006ca6:	0031      	movs	r1, r6
 8006ca8:	4640      	mov	r0, r8
 8006caa:	f00b fe9f 	bl	80129ec <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006cae:	002a      	movs	r2, r5
 8006cb0:	3401      	adds	r4, #1
 8006cb2:	b261      	sxtb	r1, r4
 8006cb4:	3258      	adds	r2, #88	; 0x58
 8006cb6:	4648      	mov	r0, r9
 8006cb8:	55e9      	strb	r1, [r5, r7]
 8006cba:	f006 fb1f 	bl	800d2fc <FreeRTOS_CLIGetParameter>
 8006cbe:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d03e      	beq.n	8006d42 <groupCommand+0x126>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006cc4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006cc6:	0001      	movs	r1, r0
 8006cc8:	0022      	movs	r2, r4
 8006cca:	0030      	movs	r0, r6
 8006ccc:	f00b fec3 	bl	8012a56 <strncpy>
		module[xParameterStringLength] ='\0';
 8006cd0:	4653      	mov	r3, sl
		modID =GetID(module);
 8006cd2:	0030      	movs	r0, r6
		module[xParameterStringLength] ='\0';
 8006cd4:	5533      	strb	r3, [r6, r4]
		modID =GetID(module);
 8006cd6:	f7fd fab7 	bl	8004248 <GetID>
		if(modID < 0)
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	db14      	blt.n	8006d08 <groupCommand+0xec>
		result =AddModuleToGroup(modID,alias);
 8006cde:	b2c0      	uxtb	r0, r0
 8006ce0:	a903      	add	r1, sp, #12
 8006ce2:	f7fd fb7b 	bl	80043dc <AddModuleToGroup>
		if(result != BOS_OK)
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d11b      	bne.n	8006d22 <groupCommand+0x106>
		if(count > 2)
 8006cea:	57ec      	ldrsb	r4, [r5, r7]
 8006cec:	2c02      	cmp	r4, #2
 8006cee:	ddda      	ble.n	8006ca6 <groupCommand+0x8a>
			strcat((char* )pcWriteBuffer,", ");
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	f7f9 fa11 	bl	8000118 <strlen>
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	4440      	add	r0, r8
 8006cfa:	4659      	mov	r1, fp
 8006cfc:	f00b fc53 	bl	80125a6 <memcpy>
 8006d00:	e7d1      	b.n	8006ca6 <groupCommand+0x8a>
			type =0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	e7b7      	b.n	8006c78 <groupCommand+0x5c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006d08:	0032      	movs	r2, r6
 8006d0a:	4925      	ldr	r1, [pc, #148]	; (8006da0 <groupCommand+0x184>)
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	f00b fe4d 	bl	80129ac <sprintf>
}
 8006d12:	2000      	movs	r0, #0
 8006d14:	b011      	add	sp, #68	; 0x44
 8006d16:	bc3c      	pop	{r2, r3, r4, r5}
 8006d18:	4690      	mov	r8, r2
 8006d1a:	4699      	mov	r9, r3
 8006d1c:	46a2      	mov	sl, r4
 8006d1e:	46ab      	mov	fp, r5
 8006d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8006d22:	2354      	movs	r3, #84	; 0x54
 8006d24:	56eb      	ldrsb	r3, [r5, r3]
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d024      	beq.n	8006d74 <groupCommand+0x158>
	else if(result == BOS_ERR_Keyword)
 8006d2a:	2806      	cmp	r0, #6
 8006d2c:	d019      	beq.n	8006d62 <groupCommand+0x146>
	else if(result == BOS_ERR_ExistingAlias)
 8006d2e:	2807      	cmp	r0, #7
 8006d30:	d028      	beq.n	8006d84 <groupCommand+0x168>
	else if(result == BOS_ERR_ExistingCmd)
 8006d32:	2808      	cmp	r0, #8
 8006d34:	d1ed      	bne.n	8006d12 <groupCommand+0xf6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006d36:	aa03      	add	r2, sp, #12
 8006d38:	491a      	ldr	r1, [pc, #104]	; (8006da4 <groupCommand+0x188>)
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	f00b fe36 	bl	80129ac <sprintf>
 8006d40:	e7e7      	b.n	8006d12 <groupCommand+0xf6>
	else if(count == 2)
 8006d42:	57eb      	ldrsb	r3, [r5, r7]
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d015      	beq.n	8006d74 <groupCommand+0x158>
	else if(result == BOS_OK && type){
 8006d48:	9b01      	ldr	r3, [sp, #4]
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006d4a:	aa03      	add	r2, sp, #12
	else if(result == BOS_OK && type){
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d117      	bne.n	8006d80 <groupCommand+0x164>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006d50:	4915      	ldr	r1, [pc, #84]	; (8006da8 <groupCommand+0x18c>)
 8006d52:	0030      	movs	r0, r6
 8006d54:	f00b fe2a 	bl	80129ac <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006d58:	0031      	movs	r1, r6
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	f00b fe46 	bl	80129ec <strcat>
 8006d60:	e7d7      	b.n	8006d12 <groupCommand+0xf6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006d62:	aa03      	add	r2, sp, #12
 8006d64:	4911      	ldr	r1, [pc, #68]	; (8006dac <groupCommand+0x190>)
 8006d66:	4640      	mov	r0, r8
 8006d68:	f00b fe20 	bl	80129ac <sprintf>
 8006d6c:	e7d1      	b.n	8006d12 <groupCommand+0xf6>
	else if(count == 2)
 8006d6e:	572b      	ldrsb	r3, [r5, r4]
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d1e9      	bne.n	8006d48 <groupCommand+0x12c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8006d74:	aa03      	add	r2, sp, #12
 8006d76:	490e      	ldr	r1, [pc, #56]	; (8006db0 <groupCommand+0x194>)
 8006d78:	4640      	mov	r0, r8
 8006d7a:	f00b fe17 	bl	80129ac <sprintf>
 8006d7e:	e7c8      	b.n	8006d12 <groupCommand+0xf6>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006d80:	490c      	ldr	r1, [pc, #48]	; (8006db4 <groupCommand+0x198>)
 8006d82:	e7e6      	b.n	8006d52 <groupCommand+0x136>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8006d84:	aa03      	add	r2, sp, #12
 8006d86:	490c      	ldr	r1, [pc, #48]	; (8006db8 <groupCommand+0x19c>)
 8006d88:	4640      	mov	r0, r8
 8006d8a:	f00b fe0f 	bl	80129ac <sprintf>
 8006d8e:	e7c0      	b.n	8006d12 <groupCommand+0xf6>
 8006d90:	200017e4 	.word	0x200017e4
 8006d94:	20000ae0 	.word	0x20000ae0
 8006d98:	08018a64 	.word	0x08018a64
 8006d9c:	08018a70 	.word	0x08018a70
 8006da0:	08018b90 	.word	0x08018b90
 8006da4:	08018b50 	.word	0x08018b50
 8006da8:	08018abc 	.word	0x08018abc
 8006dac:	08018adc 	.word	0x08018adc
 8006db0:	08018a74 	.word	0x08018a74
 8006db4:	08018aa0 	.word	0x08018aa0
 8006db8:	08018b1c 	.word	0x08018b1c

08006dbc <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006dbc:	b570      	push	{r4, r5, r6, lr}
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006dbe:	4c1b      	ldr	r4, [pc, #108]	; (8006e2c <nameCommand+0x70>)
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006dc0:	0006      	movs	r6, r0
 8006dc2:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006dc4:	0022      	movs	r2, r4
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	3260      	adds	r2, #96	; 0x60
 8006dca:	f006 fa97 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006dce:	6e23      	ldr	r3, [r4, #96]	; 0x60
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006dd0:	0001      	movs	r1, r0
 8006dd2:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006dd4:	2b09      	cmp	r3, #9
 8006dd6:	dd01      	ble.n	8006ddc <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8006dd8:	2300      	movs	r3, #0
 8006dda:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8006ddc:	4d14      	ldr	r5, [pc, #80]	; (8006e30 <nameCommand+0x74>)
 8006dde:	7828      	ldrb	r0, [r5, #0]
 8006de0:	f7fd fa92 	bl	8004308 <NameModule>
	if(result == BOS_OK)
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d007      	beq.n	8006df8 <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8006de8:	2806      	cmp	r0, #6
 8006dea:	d012      	beq.n	8006e12 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8006dec:	2807      	cmp	r0, #7
 8006dee:	d00a      	beq.n	8006e06 <nameCommand+0x4a>
	else if(result == BOS_ERR_ExistingCmd)
 8006df0:	2808      	cmp	r0, #8
 8006df2:	d014      	beq.n	8006e1e <nameCommand+0x62>
}
 8006df4:	2000      	movs	r0, #0
 8006df6:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8006df8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dfa:	782a      	ldrb	r2, [r5, #0]
 8006dfc:	490d      	ldr	r1, [pc, #52]	; (8006e34 <nameCommand+0x78>)
 8006dfe:	0030      	movs	r0, r6
 8006e00:	f00b fdd4 	bl	80129ac <sprintf>
 8006e04:	e7f6      	b.n	8006df4 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8006e06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e08:	490b      	ldr	r1, [pc, #44]	; (8006e38 <nameCommand+0x7c>)
 8006e0a:	0030      	movs	r0, r6
 8006e0c:	f00b fdce 	bl	80129ac <sprintf>
 8006e10:	e7f0      	b.n	8006df4 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8006e12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e14:	4909      	ldr	r1, [pc, #36]	; (8006e3c <nameCommand+0x80>)
 8006e16:	0030      	movs	r0, r6
 8006e18:	f00b fdc8 	bl	80129ac <sprintf>
 8006e1c:	e7ea      	b.n	8006df4 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8006e1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e20:	4907      	ldr	r1, [pc, #28]	; (8006e40 <nameCommand+0x84>)
 8006e22:	0030      	movs	r0, r6
 8006e24:	f00b fdc2 	bl	80129ac <sprintf>
 8006e28:	e7e4      	b.n	8006df4 <nameCommand+0x38>
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	200017e4 	.word	0x200017e4
 8006e30:	20000aa8 	.word	0x20000aa8
 8006e34:	08018bb4 	.word	0x08018bb4
 8006e38:	08018b1c 	.word	0x08018b1c
 8006e3c:	08018adc 	.word	0x08018adc
 8006e40:	08018b50 	.word	0x08018b50

08006e44 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e46:	46c6      	mov	lr, r8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e48:	4c50      	ldr	r4, [pc, #320]	; (8006f8c <bootloaderUpdateCommand+0x148>)
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e4a:	0015      	movs	r5, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e4c:	0022      	movs	r2, r4
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e4e:	b500      	push	{lr}
 8006e50:	0006      	movs	r6, r0
 8006e52:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e54:	3268      	adds	r2, #104	; 0x68
 8006e56:	2101      	movs	r1, #1
 8006e58:	0028      	movs	r0, r5
 8006e5a:	f006 fa4f 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d069      	beq.n	8006f36 <bootloaderUpdateCommand+0xf2>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8006e62:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8006e64:	494a      	ldr	r1, [pc, #296]	; (8006f90 <bootloaderUpdateCommand+0x14c>)
 8006e66:	f00b fde5 	bl	8012a34 <strncmp>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d133      	bne.n	8006ed6 <bootloaderUpdateCommand+0x92>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e6e:	0022      	movs	r2, r4
 8006e70:	2102      	movs	r1, #2
 8006e72:	326c      	adds	r2, #108	; 0x6c
 8006e74:	0028      	movs	r0, r5
 8006e76:	f006 fa41 	bl	800d2fc <FreeRTOS_CLIGetParameter>
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e7a:	0022      	movs	r2, r4
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e7c:	6720      	str	r0, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e7e:	3274      	adds	r2, #116	; 0x74
 8006e80:	0028      	movs	r0, r5
 8006e82:	2103      	movs	r1, #3
 8006e84:	f006 fa3a 	bl	800d2fc <FreeRTOS_CLIGetParameter>
			if(pcParameterString2[0] == '#'){
 8006e88:	2200      	movs	r2, #0
 8006e8a:	6f23      	ldr	r3, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e8c:	67a0      	str	r0, [r4, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 8006e8e:	569a      	ldrsb	r2, [r3, r2]
				result =BOS_ERR_WrongValue;
 8006e90:	2568      	movs	r5, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8006e92:	2a23      	cmp	r2, #35	; 0x23
 8006e94:	d029      	beq.n	8006eea <bootloaderUpdateCommand+0xa6>
			if(pcParameterString3[0] == 'p'){
 8006e96:	2300      	movs	r3, #0
 8006e98:	56c3      	ldrsb	r3, [r0, r3]
 8006e9a:	2b70      	cmp	r3, #112	; 0x70
 8006e9c:	d02f      	beq.n	8006efe <bootloaderUpdateCommand+0xba>
			if(module != myID){
 8006e9e:	4c3d      	ldr	r4, [pc, #244]	; (8006f94 <bootloaderUpdateCommand+0x150>)
				result =BOS_ERR_WrongValue;
 8006ea0:	2568      	movs	r5, #104	; 0x68
			if(module != myID){
 8006ea2:	7823      	ldrb	r3, [r4, #0]
 8006ea4:	42bb      	cmp	r3, r7
 8006ea6:	d033      	beq.n	8006f10 <bootloaderUpdateCommand+0xcc>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4b3b      	ldr	r3, [pc, #236]	; (8006f98 <bootloaderUpdateCommand+0x154>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006eac:	211a      	movs	r1, #26
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006eae:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	4b3a      	ldr	r3, [pc, #232]	; (8006f9c <bootloaderUpdateCommand+0x158>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006eb4:	0038      	movs	r0, r7
				messageParams[0] =port;
 8006eb6:	701a      	strb	r2, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f001 f935 	bl	8008128 <SendMessageToModule>
				osDelay(100);
 8006ebe:	2064      	movs	r0, #100	; 0x64
 8006ec0:	f006 f910 	bl	800d0e4 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8006ec4:	4b36      	ldr	r3, [pc, #216]	; (8006fa0 <bootloaderUpdateCommand+0x15c>)
 8006ec6:	7820      	ldrb	r0, [r4, #0]
 8006ec8:	781a      	ldrb	r2, [r3, #0]
 8006eca:	0039      	movs	r1, r7
 8006ecc:	4643      	mov	r3, r8
 8006ece:	f002 fea9 	bl	8009c24 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8006ed2:	2d68      	cmp	r5, #104	; 0x68
 8006ed4:	d104      	bne.n	8006ee0 <bootloaderUpdateCommand+0x9c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006ed6:	220f      	movs	r2, #15
 8006ed8:	4932      	ldr	r1, [pc, #200]	; (8006fa4 <bootloaderUpdateCommand+0x160>)
 8006eda:	0030      	movs	r0, r6
 8006edc:	f00b fb63 	bl	80125a6 <memcpy>
}
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	b002      	add	sp, #8
 8006ee4:	bc04      	pop	{r2}
 8006ee6:	4690      	mov	r8, r2
 8006ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006eea:	1c58      	adds	r0, r3, #1
 8006eec:	f00b f89b 	bl	8012026 <atol>
			if(pcParameterString3[0] == 'p'){
 8006ef0:	2300      	movs	r3, #0
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006ef2:	b2c7      	uxtb	r7, r0
 8006ef4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	BOS_Status result =BOS_OK;
 8006ef6:	2500      	movs	r5, #0
			if(pcParameterString3[0] == 'p'){
 8006ef8:	56c3      	ldrsb	r3, [r0, r3]
 8006efa:	2b70      	cmp	r3, #112	; 0x70
 8006efc:	d1cf      	bne.n	8006e9e <bootloaderUpdateCommand+0x5a>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006efe:	3001      	adds	r0, #1
 8006f00:	f00b f891 	bl	8012026 <atol>
			if(module != myID){
 8006f04:	4c23      	ldr	r4, [pc, #140]	; (8006f94 <bootloaderUpdateCommand+0x150>)
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006f06:	b2c3      	uxtb	r3, r0
 8006f08:	4698      	mov	r8, r3
			if(module != myID){
 8006f0a:	7823      	ldrb	r3, [r4, #0]
 8006f0c:	42bb      	cmp	r3, r7
 8006f0e:	d1cb      	bne.n	8006ea8 <bootloaderUpdateCommand+0x64>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8006f10:	2300      	movs	r3, #0
 8006f12:	2200      	movs	r2, #0
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	2100      	movs	r1, #0
 8006f18:	3319      	adds	r3, #25
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	f000 fea4 	bl	8007c68 <SendMessageFromPort>
				osDelay(100);
 8006f20:	2064      	movs	r0, #100	; 0x64
 8006f22:	f006 f8df 	bl	800d0e4 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8006f26:	7820      	ldrb	r0, [r4, #0]
 8006f28:	4b1d      	ldr	r3, [pc, #116]	; (8006fa0 <bootloaderUpdateCommand+0x15c>)
 8006f2a:	0001      	movs	r1, r0
 8006f2c:	781a      	ldrb	r2, [r3, #0]
 8006f2e:	4643      	mov	r3, r8
 8006f30:	f002 fe78 	bl	8009c24 <remoteBootloaderUpdate>
 8006f34:	e7cd      	b.n	8006ed2 <bootloaderUpdateCommand+0x8e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8006f36:	4b17      	ldr	r3, [pc, #92]	; (8006f94 <bootloaderUpdateCommand+0x150>)
 8006f38:	491b      	ldr	r1, [pc, #108]	; (8006fa8 <bootloaderUpdateCommand+0x164>)
 8006f3a:	781a      	ldrb	r2, [r3, #0]
 8006f3c:	0030      	movs	r0, r6
 8006f3e:	f00b fd35 	bl	80129ac <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8006f42:	4b1a      	ldr	r3, [pc, #104]	; (8006fac <bootloaderUpdateCommand+0x168>)
 8006f44:	0030      	movs	r0, r6
 8006f46:	6819      	ldr	r1, [r3, #0]
 8006f48:	f00b fd50 	bl	80129ec <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006f4c:	0030      	movs	r0, r6
 8006f4e:	f7f9 f8e3 	bl	8000118 <strlen>
 8006f52:	4b13      	ldr	r3, [pc, #76]	; (8006fa0 <bootloaderUpdateCommand+0x15c>)
 8006f54:	b282      	uxth	r2, r0
 8006f56:	7818      	ldrb	r0, [r3, #0]
 8006f58:	2301      	movs	r3, #1
 8006f5a:	425b      	negs	r3, r3
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	0031      	movs	r1, r6
 8006f60:	3333      	adds	r3, #51	; 0x33
 8006f62:	f005 ff25 	bl	800cdb0 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8006f66:	4b12      	ldr	r3, [pc, #72]	; (8006fb0 <bootloaderUpdateCommand+0x16c>)
 8006f68:	4a12      	ldr	r2, [pc, #72]	; (8006fb4 <bootloaderUpdateCommand+0x170>)
		osDelay(10);
 8006f6a:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8006f6c:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8006f6e:	2201      	movs	r2, #1
 8006f70:	4b11      	ldr	r3, [pc, #68]	; (8006fb8 <bootloaderUpdateCommand+0x174>)
 8006f72:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006f74:	f006 f8b6 	bl	800d0e4 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <bootloaderUpdateCommand+0x178>)
 8006f7e:	4a10      	ldr	r2, [pc, #64]	; (8006fc0 <bootloaderUpdateCommand+0x17c>)
 8006f80:	60da      	str	r2, [r3, #12]
 8006f82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	e7fd      	b.n	8006f86 <bootloaderUpdateCommand+0x142>
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	200017e4 	.word	0x200017e4
 8006f90:	08018bec 	.word	0x08018bec
 8006f94:	20000aa8 	.word	0x20000aa8
 8006f98:	200067f4 	.word	0x200067f4
 8006f9c:	20000b4c 	.word	0x20000b4c
 8006fa0:	20000c38 	.word	0x20000c38
 8006fa4:	08018664 	.word	0x08018664
 8006fa8:	08018bcc 	.word	0x08018bcc
 8006fac:	20000068 	.word	0x20000068
 8006fb0:	20007ff0 	.word	0x20007ff0
 8006fb4:	deadbeef 	.word	0xdeadbeef
 8006fb8:	2000114e 	.word	0x2000114e
 8006fbc:	e000ed00 	.word	0xe000ed00
 8006fc0:	05fa0004 	.word	0x05fa0004

08006fc4 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fc4:	b510      	push	{r4, lr}
	if(!moduleAlias[myID][0])
 8006fc6:	4b12      	ldr	r3, [pc, #72]	; (8007010 <pingCommand+0x4c>)
 8006fc8:	4912      	ldr	r1, [pc, #72]	; (8007014 <pingCommand+0x50>)
 8006fca:	781a      	ldrb	r2, [r3, #0]
 8006fcc:	0093      	lsls	r3, r2, #2
 8006fce:	189b      	adds	r3, r3, r2
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	5c5c      	ldrb	r4, [r3, r1]
 8006fd4:	2c00      	cmp	r4, #0
 8006fd6:	d016      	beq.n	8007006 <pingCommand+0x42>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8006fd8:	185b      	adds	r3, r3, r1
 8006fda:	490f      	ldr	r1, [pc, #60]	; (8007018 <pingCommand+0x54>)
 8006fdc:	f00b fce6 	bl	80129ac <sprintf>
	RTOS_IND_blink(200);
 8006fe0:	2180      	movs	r1, #128	; 0x80
 8006fe2:	2090      	movs	r0, #144	; 0x90
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	0109      	lsls	r1, r1, #4
 8006fe8:	05c0      	lsls	r0, r0, #23
 8006fea:	f009 fbe5 	bl	80107b8 <HAL_GPIO_WritePin>
 8006fee:	20c8      	movs	r0, #200	; 0xc8
 8006ff0:	f006 f878 	bl	800d0e4 <osDelay>
 8006ff4:	2180      	movs	r1, #128	; 0x80
 8006ff6:	2090      	movs	r0, #144	; 0x90
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	0109      	lsls	r1, r1, #4
 8006ffc:	05c0      	lsls	r0, r0, #23
 8006ffe:	f009 fbdb 	bl	80107b8 <HAL_GPIO_WritePin>
}
 8007002:	2000      	movs	r0, #0
 8007004:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8007006:	4905      	ldr	r1, [pc, #20]	; (800701c <pingCommand+0x58>)
 8007008:	f00b fcd0 	bl	80129ac <sprintf>
 800700c:	e7e8      	b.n	8006fe0 <pingCommand+0x1c>
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	20000aa8 	.word	0x20000aa8
 8007014:	20000dd4 	.word	0x20000dd4
 8007018:	08018c04 	.word	0x08018c04
 800701c:	08018bf0 	.word	0x08018bf0

08007020 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007020:	b510      	push	{r4, lr}
 8007022:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007024:	2241      	movs	r2, #65	; 0x41
 8007026:	4904      	ldr	r1, [pc, #16]	; (8007038 <prvRunTimeStatsCommand+0x18>)
 8007028:	f00b fabd 	bl	80125a6 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800702c:	0020      	movs	r0, r4
 800702e:	3040      	adds	r0, #64	; 0x40
 8007030:	f007 faa8 	bl	800e584 <vTaskGetRunTimeStats>
}
 8007034:	2000      	movs	r0, #0
 8007036:	bd10      	pop	{r4, pc}
 8007038:	08018c20 	.word	0x08018c20

0800703c <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800703c:	b510      	push	{r4, lr}
 800703e:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007040:	2250      	movs	r2, #80	; 0x50
 8007042:	4904      	ldr	r1, [pc, #16]	; (8007054 <prvTaskStatsCommand+0x18>)
 8007044:	f00b faaf 	bl	80125a6 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 8007048:	0020      	movs	r0, r4
 800704a:	304f      	adds	r0, #79	; 0x4f
 800704c:	f007 fa40 	bl	800e4d0 <vTaskList>
}
 8007050:	2000      	movs	r0, #0
 8007052:	bd10      	pop	{r4, pc}
 8007054:	08018c64 	.word	0x08018c64

08007058 <setBaudrateCommand>:
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0;
 800705c:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800705e:	b082      	sub	sp, #8
 8007060:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007062:	466a      	mov	r2, sp
 8007064:	2101      	movs	r1, #1
 8007066:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0;
 8007068:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 800706a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800706c:	f006 f946 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8007070:	2300      	movs	r3, #0
 8007072:	56c3      	ldrsb	r3, [r0, r3]
 8007074:	2b70      	cmp	r3, #112	; 0x70
 8007076:	d00e      	beq.n	8007096 <setBaudrateCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007078:	aa01      	add	r2, sp, #4
 800707a:	2102      	movs	r1, #2
 800707c:	0020      	movs	r0, r4
 800707e:	f006 f93d 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8007082:	f00a ffd0 	bl	8012026 <atol>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8007086:	2213      	movs	r2, #19
 8007088:	490f      	ldr	r1, [pc, #60]	; (80070c8 <setBaudrateCommand+0x70>)
 800708a:	0028      	movs	r0, r5
 800708c:	f00b fa8b 	bl	80125a6 <memcpy>
}
 8007090:	2000      	movs	r0, #0
 8007092:	b002      	add	sp, #8
 8007094:	bd70      	pop	{r4, r5, r6, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8007096:	3001      	adds	r0, #1
 8007098:	f00a ffc5 	bl	8012026 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800709c:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800709e:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80070a0:	2102      	movs	r1, #2
 80070a2:	0020      	movs	r0, r4
 80070a4:	f006 f92a 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80070a8:	f00a ffbd 	bl	8012026 <atol>
 80070ac:	0004      	movs	r4, r0
		UpdateBaudrate(port,baudrate);
 80070ae:	b2f0      	uxtb	r0, r6
 80070b0:	0021      	movs	r1, r4
 80070b2:	f005 fecf 	bl	800ce54 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 80070b6:	23ff      	movs	r3, #255	; 0xff
 80070b8:	0022      	movs	r2, r4
 80070ba:	4033      	ands	r3, r6
 80070bc:	4903      	ldr	r1, [pc, #12]	; (80070cc <setBaudrateCommand+0x74>)
 80070be:	0028      	movs	r0, r5
 80070c0:	f00b fc74 	bl	80129ac <sprintf>
 80070c4:	e7e4      	b.n	8007090 <setBaudrateCommand+0x38>
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	08018cdc 	.word	0x08018cdc
 80070cc:	08018cb4 	.word	0x08018cb4

080070d0 <GetReadPrecentageCommand>:

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80070d0:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070d2:	b510      	push	{r4, lr}
 80070d4:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 80070d6:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80070d8:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070da:	0004      	movs	r4, r0
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070dc:	2101      	movs	r1, #1
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070de:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070e0:	466a      	mov	r2, sp
	float ADC_Value_CLI =0;
 80070e2:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070e4:	f006 f90a 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80070e8:	7803      	ldrb	r3, [r0, #0]
 80070ea:	3b32      	subs	r3, #50	; 0x32
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d907      	bls.n	8007100 <GetReadPrecentageCommand+0x30>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80070f0:	2215      	movs	r2, #21
 80070f2:	490b      	ldr	r1, [pc, #44]	; (8007120 <GetReadPrecentageCommand+0x50>)
 80070f4:	0020      	movs	r0, r4
 80070f6:	f00b fa56 	bl	80125a6 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80070fa:	2000      	movs	r0, #0
 80070fc:	b002      	add	sp, #8
 80070fe:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8007100:	f00a ff91 	bl	8012026 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8007104:	a901      	add	r1, sp, #4
 8007106:	b2c0      	uxtb	r0, r0
 8007108:	f004 fc7c 	bl	800ba04 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 800710c:	9801      	ldr	r0, [sp, #4]
 800710e:	f7fb fd09 	bl	8002b24 <__aeabi_f2d>
 8007112:	0002      	movs	r2, r0
 8007114:	000b      	movs	r3, r1
 8007116:	0020      	movs	r0, r4
 8007118:	4902      	ldr	r1, [pc, #8]	; (8007124 <GetReadPrecentageCommand+0x54>)
 800711a:	f00b fc47 	bl	80129ac <sprintf>
 800711e:	e7ec      	b.n	80070fa <GetReadPrecentageCommand+0x2a>
 8007120:	08018114 	.word	0x08018114
 8007124:	08018cf0 	.word	0x08018cf0

08007128 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007128:	b510      	push	{r4, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	0004      	movs	r4, r0
	GetTimeDate();
 800712e:	f005 fc01 	bl	800c934 <GetTimeDate>
	if(BOS.hourformat == 24)
 8007132:	4915      	ldr	r1, [pc, #84]	; (8007188 <timeCommand+0x60>)
 8007134:	7b4b      	ldrb	r3, [r1, #13]
 8007136:	2b18      	cmp	r3, #24
 8007138:	d016      	beq.n	8007168 <timeCommand+0x40>
	else if(BOS.hourformat == 12){
 800713a:	2b0c      	cmp	r3, #12
 800713c:	d002      	beq.n	8007144 <timeCommand+0x1c>
}
 800713e:	2000      	movs	r0, #0
 8007140:	b004      	add	sp, #16
 8007142:	bd10      	pop	{r4, pc}
		if(BOS.time.ampm == RTC_AM)
 8007144:	7ccb      	ldrb	r3, [r1, #19]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d019      	beq.n	800717e <timeCommand+0x56>
		else if(BOS.time.ampm == RTC_PM)
 800714a:	2b02      	cmp	r3, #2
 800714c:	d1f7      	bne.n	800713e <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800714e:	7c4b      	ldrb	r3, [r1, #17]
 8007150:	7c8a      	ldrb	r2, [r1, #18]
 8007152:	480e      	ldr	r0, [pc, #56]	; (800718c <timeCommand+0x64>)
 8007154:	9002      	str	r0, [sp, #8]
 8007156:	89c8      	ldrh	r0, [r1, #14]
 8007158:	9001      	str	r0, [sp, #4]
 800715a:	7c09      	ldrb	r1, [r1, #16]
 800715c:	0020      	movs	r0, r4
 800715e:	9100      	str	r1, [sp, #0]
 8007160:	490b      	ldr	r1, [pc, #44]	; (8007190 <timeCommand+0x68>)
 8007162:	f00b fc23 	bl	80129ac <sprintf>
 8007166:	e7ea      	b.n	800713e <timeCommand+0x16>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8007168:	89c8      	ldrh	r0, [r1, #14]
 800716a:	7c4b      	ldrb	r3, [r1, #17]
 800716c:	7c8a      	ldrb	r2, [r1, #18]
 800716e:	9001      	str	r0, [sp, #4]
 8007170:	7c09      	ldrb	r1, [r1, #16]
 8007172:	0020      	movs	r0, r4
 8007174:	9100      	str	r1, [sp, #0]
 8007176:	4907      	ldr	r1, [pc, #28]	; (8007194 <timeCommand+0x6c>)
 8007178:	f00b fc18 	bl	80129ac <sprintf>
 800717c:	e7df      	b.n	800713e <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 800717e:	7c4b      	ldrb	r3, [r1, #17]
 8007180:	7c8a      	ldrb	r2, [r1, #18]
 8007182:	4805      	ldr	r0, [pc, #20]	; (8007198 <timeCommand+0x70>)
 8007184:	e7e6      	b.n	8007154 <timeCommand+0x2c>
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	20006874 	.word	0x20006874
 800718c:	08018d6c 	.word	0x08018d6c
 8007190:	08018d3c 	.word	0x08018d3c
 8007194:	08018d14 	.word	0x08018d14
 8007198:	08018d68 	.word	0x08018d68

0800719c <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	4b03      	ldr	r3, [pc, #12]	; (80071b0 <resetCommand+0x14>)
 80071a2:	4a04      	ldr	r2, [pc, #16]	; (80071b4 <resetCommand+0x18>)
 80071a4:	60da      	str	r2, [r3, #12]
 80071a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	e7fd      	b.n	80071aa <resetCommand+0xe>
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	e000ed00 	.word	0xe000ed00
 80071b4:	05fa0004 	.word	0x05fa0004

080071b8 <RegisterUserCLICommands>:
}
 80071b8:	4770      	bx	lr
 80071ba:	46c0      	nop			; (mov r8, r8)

080071bc <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 80071bc:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80071be:	4c45      	ldr	r4, [pc, #276]	; (80072d4 <vRegisterCLICommands+0x118>)
 80071c0:	0020      	movs	r0, r4
 80071c2:	f006 f807 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80071c6:	0020      	movs	r0, r4
 80071c8:	3010      	adds	r0, #16
 80071ca:	f006 f803 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80071ce:	0020      	movs	r0, r4
 80071d0:	3020      	adds	r0, #32
 80071d2:	f005 ffff 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 80071d6:	0020      	movs	r0, r4
 80071d8:	3030      	adds	r0, #48	; 0x30
 80071da:	f005 fffb 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 80071de:	0020      	movs	r0, r4
 80071e0:	3040      	adds	r0, #64	; 0x40
 80071e2:	f005 fff7 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 80071e6:	0020      	movs	r0, r4
 80071e8:	3050      	adds	r0, #80	; 0x50
 80071ea:	f005 fff3 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80071ee:	0020      	movs	r0, r4
 80071f0:	3060      	adds	r0, #96	; 0x60
 80071f2:	f005 ffef 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80071f6:	0020      	movs	r0, r4
 80071f8:	3070      	adds	r0, #112	; 0x70
 80071fa:	f005 ffeb 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80071fe:	4c36      	ldr	r4, [pc, #216]	; (80072d8 <vRegisterCLICommands+0x11c>)
 8007200:	0020      	movs	r0, r4
 8007202:	f005 ffe7 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007206:	0020      	movs	r0, r4
 8007208:	3010      	adds	r0, #16
 800720a:	f005 ffe3 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 800720e:	0020      	movs	r0, r4
 8007210:	3020      	adds	r0, #32
 8007212:	f005 ffdf 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8007216:	0020      	movs	r0, r4
 8007218:	3030      	adds	r0, #48	; 0x30
 800721a:	f005 ffdb 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 800721e:	0020      	movs	r0, r4
 8007220:	3040      	adds	r0, #64	; 0x40
 8007222:	f005 ffd7 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8007226:	0020      	movs	r0, r4
 8007228:	3050      	adds	r0, #80	; 0x50
 800722a:	f005 ffd3 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 800722e:	0020      	movs	r0, r4
 8007230:	3060      	adds	r0, #96	; 0x60
 8007232:	f005 ffcf 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007236:	0020      	movs	r0, r4
 8007238:	3070      	adds	r0, #112	; 0x70
 800723a:	f005 ffcb 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800723e:	4c27      	ldr	r4, [pc, #156]	; (80072dc <vRegisterCLICommands+0x120>)
 8007240:	0020      	movs	r0, r4
 8007242:	f005 ffc7 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007246:	0020      	movs	r0, r4
 8007248:	3010      	adds	r0, #16
 800724a:	f005 ffc3 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 800724e:	0020      	movs	r0, r4
 8007250:	3020      	adds	r0, #32
 8007252:	f005 ffbf 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007256:	0020      	movs	r0, r4
 8007258:	3030      	adds	r0, #48	; 0x30
 800725a:	f005 ffbb 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 800725e:	0020      	movs	r0, r4
 8007260:	3040      	adds	r0, #64	; 0x40
 8007262:	f005 ffb7 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 8007266:	0020      	movs	r0, r4
 8007268:	3050      	adds	r0, #80	; 0x50
 800726a:	f005 ffb3 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 800726e:	0020      	movs	r0, r4
 8007270:	3060      	adds	r0, #96	; 0x60
 8007272:	f005 ffaf 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007276:	0020      	movs	r0, r4
 8007278:	3070      	adds	r0, #112	; 0x70
 800727a:	f005 ffab 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800727e:	4c18      	ldr	r4, [pc, #96]	; (80072e0 <vRegisterCLICommands+0x124>)
 8007280:	0020      	movs	r0, r4
 8007282:	f005 ffa7 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007286:	0020      	movs	r0, r4
 8007288:	3010      	adds	r0, #16
 800728a:	f005 ffa3 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 800728e:	0020      	movs	r0, r4
 8007290:	3020      	adds	r0, #32
 8007292:	f005 ff9f 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8007296:	0020      	movs	r0, r4
 8007298:	3030      	adds	r0, #48	; 0x30
 800729a:	f005 ff9b 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 800729e:	0020      	movs	r0, r4
 80072a0:	3040      	adds	r0, #64	; 0x40
 80072a2:	f005 ff97 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 80072a6:	0020      	movs	r0, r4
 80072a8:	3050      	adds	r0, #80	; 0x50
 80072aa:	f005 ff93 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80072ae:	0020      	movs	r0, r4
 80072b0:	3060      	adds	r0, #96	; 0x60
 80072b2:	f005 ff8f 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80072b6:	0020      	movs	r0, r4
 80072b8:	3070      	adds	r0, #112	; 0x70
 80072ba:	f005 ff8b 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80072be:	4809      	ldr	r0, [pc, #36]	; (80072e4 <vRegisterCLICommands+0x128>)
 80072c0:	f005 ff88 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80072c4:	2223      	movs	r2, #35	; 0x23
 80072c6:	4b08      	ldr	r3, [pc, #32]	; (80072e8 <vRegisterCLICommands+0x12c>)
 80072c8:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80072ca:	f002 fd2f 	bl	8009d2c <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80072ce:	f7ff ff73 	bl	80071b8 <RegisterUserCLICommands>
}
 80072d2:	bd10      	pop	{r4, pc}
 80072d4:	08016f18 	.word	0x08016f18
 80072d8:	08016f98 	.word	0x08016f98
 80072dc:	08017018 	.word	0x08017018
 80072e0:	08017098 	.word	0x08017098
 80072e4:	08017118 	.word	0x08017118
 80072e8:	200067f0 	.word	0x200067f0

080072ec <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 80072ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ee:	46c6      	mov	lr, r8
 80072f0:	b500      	push	{lr}
 80072f2:	0005      	movs	r5, r0
 80072f4:	000e      	movs	r6, r1
 80072f6:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 80072f8:	f002 fd2c 	bl	8009d54 <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80072fc:	4b0f      	ldr	r3, [pc, #60]	; (800733c <StartDMAstream+0x50>)
	uint8_t srcPort =GetPort(huartSrc);
 80072fe:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007300:	4698      	mov	r8, r3
 8007302:	5c1b      	ldrb	r3, [r3, r0]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d902      	bls.n	800730e <StartDMAstream+0x22>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007308:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800730a:	2b03      	cmp	r3, #3
 800730c:	d112      	bne.n	8007334 <StartDMAstream+0x48>
		SwitchMsgDMAToStream(srcPort);
 800730e:	0020      	movs	r0, r4
 8007310:	f002 ff3a 	bl	800a188 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007314:	4b0a      	ldr	r3, [pc, #40]	; (8007340 <StartDMAstream+0x54>)
 8007316:	1e62      	subs	r2, r4, #1
 8007318:	0092      	lsls	r2, r2, #2
 800731a:	50d6      	str	r6, [r2, r3]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 800731c:	2102      	movs	r1, #2
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 800731e:	189b      	adds	r3, r3, r2
	portStatus[srcPort] =STREAM;
 8007320:	4640      	mov	r0, r8
	dmaStreamCount[srcPort - 1] =0;
 8007322:	2200      	movs	r2, #0
	portStatus[srcPort] =STREAM;
 8007324:	5501      	strb	r1, [r0, r4]
	dmaStreamCount[srcPort - 1] =0;
 8007326:	615a      	str	r2, [r3, #20]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007328:	0028      	movs	r0, r5
 800732a:	003a      	movs	r2, r7
 800732c:	0031      	movs	r1, r6
 800732e:	f003 fb8b 	bl	800aa48 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007332:	2000      	movs	r0, #0
}
 8007334:	bc04      	pop	{r2}
 8007336:	4690      	mov	r8, r2
 8007338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800733a:	46c0      	nop			; (mov r8, r8)
 800733c:	20000c3c 	.word	0x20000c3c
 8007340:	20001860 	.word	0x20001860

08007344 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007344:	b570      	push	{r4, r5, r6, lr}
 8007346:	0005      	movs	r5, r0
	if(portStatus[port] != STREAM){
 8007348:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <DMA_IRQHandler+0x44>)
 800734a:	1e44      	subs	r4, r0, #1
 800734c:	00e0      	lsls	r0, r4, #3
 800734e:	5d5b      	ldrb	r3, [r3, r5]
 8007350:	1b00      	subs	r0, r0, r4
 8007352:	00c0      	lsls	r0, r0, #3
 8007354:	2b02      	cmp	r3, #2
 8007356:	d004      	beq.n	8007362 <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007358:	4b0c      	ldr	r3, [pc, #48]	; (800738c <DMA_IRQHandler+0x48>)
 800735a:	18c0      	adds	r0, r0, r3
 800735c:	f008 faaa 	bl	800f8b4 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007360:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007362:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <DMA_IRQHandler+0x4c>)
		if(dmaStreamTotal[port - 1])
 8007364:	00a4      	lsls	r4, r4, #2
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007366:	18c0      	adds	r0, r0, r3
 8007368:	f008 faa4 	bl	800f8b4 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 800736c:	4b09      	ldr	r3, [pc, #36]	; (8007394 <DMA_IRQHandler+0x50>)
 800736e:	191c      	adds	r4, r3, r4
 8007370:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007372:	2a00      	cmp	r2, #0
 8007374:	d004      	beq.n	8007380 <DMA_IRQHandler+0x3c>
			++dmaStreamCount[port - 1];
 8007376:	6963      	ldr	r3, [r4, #20]
 8007378:	3301      	adds	r3, #1
 800737a:	6163      	str	r3, [r4, #20]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800737c:	429a      	cmp	r2, r3
 800737e:	d8ef      	bhi.n	8007360 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007380:	0028      	movs	r0, r5
 8007382:	f002 fee9 	bl	800a158 <StopStreamDMA>
 8007386:	e7eb      	b.n	8007360 <DMA_IRQHandler+0x1c>
 8007388:	20000c3c 	.word	0x20000c3c
 800738c:	2000227c 	.word	0x2000227c
 8007390:	20002084 	.word	0x20002084
 8007394:	20001860 	.word	0x20001860

08007398 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007398:	4b08      	ldr	r3, [pc, #32]	; (80073bc <ResetUartORE+0x24>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	2308      	movs	r3, #8
 800739e:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80073a0:	4a07      	ldr	r2, [pc, #28]	; (80073c0 <ResetUartORE+0x28>)
 80073a2:	6812      	ldr	r2, [r2, #0]
 80073a4:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80073a6:	4a07      	ldr	r2, [pc, #28]	; (80073c4 <ResetUartORE+0x2c>)
 80073a8:	6812      	ldr	r2, [r2, #0]
 80073aa:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 80073ac:	4a06      	ldr	r2, [pc, #24]	; (80073c8 <ResetUartORE+0x30>)
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80073b2:	4a06      	ldr	r2, [pc, #24]	; (80073cc <ResetUartORE+0x34>)
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	6213      	str	r3, [r2, #32]
#endif
}
 80073b8:	4770      	bx	lr
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	20006ac0 	.word	0x20006ac0
 80073c0:	20006bb8 	.word	0x20006bb8
 80073c4:	20006998 	.word	0x20006998
 80073c8:	20006a50 	.word	0x20006a50
 80073cc:	20006b40 	.word	0x20006b40

080073d0 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 80073d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80073d2:	2400      	movs	r4, #0
 80073d4:	2603      	movs	r6, #3
 80073d6:	4d57      	ldr	r5, [pc, #348]	; (8007534 <MX_FREERTOS_Init+0x164>)
void MX_FREERTOS_Init(void){
 80073d8:	b08f      	sub	sp, #60	; 0x3c
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80073da:	9501      	str	r5, [sp, #4]
 80073dc:	9600      	str	r6, [sp, #0]
 80073de:	9403      	str	r4, [sp, #12]
 80073e0:	9402      	str	r4, [sp, #8]
 80073e2:	2300      	movs	r3, #0
 80073e4:	22f0      	movs	r2, #240	; 0xf0
 80073e6:	4954      	ldr	r1, [pc, #336]	; (8007538 <MX_FREERTOS_Init+0x168>)
 80073e8:	4854      	ldr	r0, [pc, #336]	; (800753c <MX_FREERTOS_Init+0x16c>)
 80073ea:	f006 fc39 	bl	800dc60 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(BACKEND_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 80073ee:	1d2b      	adds	r3, r5, #4
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	9600      	str	r6, [sp, #0]
 80073f4:	9403      	str	r4, [sp, #12]
 80073f6:	9402      	str	r4, [sp, #8]
 80073f8:	2300      	movs	r3, #0
 80073fa:	22f0      	movs	r2, #240	; 0xf0
 80073fc:	4950      	ldr	r1, [pc, #320]	; (8007540 <MX_FREERTOS_Init+0x170>)
 80073fe:	4851      	ldr	r0, [pc, #324]	; (8007544 <MX_FREERTOS_Init+0x174>)
 8007400:	f006 fc2e 	bl	800dc60 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(USER_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007404:	002b      	movs	r3, r5
 8007406:	3308      	adds	r3, #8
 8007408:	9301      	str	r3, [sp, #4]
 800740a:	9600      	str	r6, [sp, #0]
 800740c:	2300      	movs	r3, #0
 800740e:	22f0      	movs	r2, #240	; 0xf0
 8007410:	494d      	ldr	r1, [pc, #308]	; (8007548 <MX_FREERTOS_Init+0x178>)
 8007412:	9403      	str	r4, [sp, #12]
 8007414:	9402      	str	r4, [sp, #8]
 8007416:	484d      	ldr	r0, [pc, #308]	; (800754c <MX_FREERTOS_Init+0x17c>)
 8007418:	f006 fc22 	bl	800dc60 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 800741c:	f7ff fece 	bl	80071bc <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007420:	002b      	movs	r3, r5
 8007422:	228c      	movs	r2, #140	; 0x8c
 8007424:	330c      	adds	r3, #12
 8007426:	9301      	str	r3, [sp, #4]
 8007428:	9600      	str	r6, [sp, #0]
 800742a:	9403      	str	r4, [sp, #12]
 800742c:	9402      	str	r4, [sp, #8]
 800742e:	2300      	movs	r3, #0
 8007430:	0052      	lsls	r2, r2, #1
 8007432:	4947      	ldr	r1, [pc, #284]	; (8007550 <MX_FREERTOS_Init+0x180>)
 8007434:	4847      	ldr	r0, [pc, #284]	; (8007554 <MX_FREERTOS_Init+0x184>)
 8007436:	f006 fc13 	bl	800dc60 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 800743a:	002b      	movs	r3, r5
 800743c:	2704      	movs	r7, #4
 800743e:	4e46      	ldr	r6, [pc, #280]	; (8007558 <MX_FREERTOS_Init+0x188>)
 8007440:	3310      	adds	r3, #16
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	9403      	str	r4, [sp, #12]
 8007446:	9402      	str	r4, [sp, #8]
 8007448:	9700      	str	r7, [sp, #0]
 800744a:	2301      	movs	r3, #1
 800744c:	22f0      	movs	r2, #240	; 0xf0
 800744e:	4943      	ldr	r1, [pc, #268]	; (800755c <MX_FREERTOS_Init+0x18c>)
 8007450:	0030      	movs	r0, r6
 8007452:	f006 fc05 	bl	800dc60 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007456:	002b      	movs	r3, r5
 8007458:	3314      	adds	r3, #20
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	9403      	str	r4, [sp, #12]
 800745e:	9402      	str	r4, [sp, #8]
 8007460:	9700      	str	r7, [sp, #0]
 8007462:	2302      	movs	r3, #2
 8007464:	22f0      	movs	r2, #240	; 0xf0
 8007466:	493e      	ldr	r1, [pc, #248]	; (8007560 <MX_FREERTOS_Init+0x190>)
 8007468:	0030      	movs	r0, r6
 800746a:	f006 fbf9 	bl	800dc60 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 800746e:	002b      	movs	r3, r5
 8007470:	3318      	adds	r3, #24
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	9403      	str	r4, [sp, #12]
 8007476:	9402      	str	r4, [sp, #8]
 8007478:	9700      	str	r7, [sp, #0]
 800747a:	2303      	movs	r3, #3
 800747c:	22f0      	movs	r2, #240	; 0xf0
 800747e:	4939      	ldr	r1, [pc, #228]	; (8007564 <MX_FREERTOS_Init+0x194>)
 8007480:	0030      	movs	r0, r6
 8007482:	f006 fbed 	bl	800dc60 <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007486:	002b      	movs	r3, r5
 8007488:	331c      	adds	r3, #28
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	9403      	str	r4, [sp, #12]
 800748e:	9402      	str	r4, [sp, #8]
 8007490:	9700      	str	r7, [sp, #0]
 8007492:	2304      	movs	r3, #4
 8007494:	22f0      	movs	r2, #240	; 0xf0
 8007496:	4934      	ldr	r1, [pc, #208]	; (8007568 <MX_FREERTOS_Init+0x198>)
 8007498:	0030      	movs	r0, r6
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 800749a:	3520      	adds	r5, #32
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 800749c:	f006 fbe0 	bl	800dc60 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80074a0:	2305      	movs	r3, #5
 80074a2:	22f0      	movs	r2, #240	; 0xf0
 80074a4:	9501      	str	r5, [sp, #4]
 80074a6:	9403      	str	r4, [sp, #12]
 80074a8:	9402      	str	r4, [sp, #8]
 80074aa:	9700      	str	r7, [sp, #0]
 80074ac:	492f      	ldr	r1, [pc, #188]	; (800756c <MX_FREERTOS_Init+0x19c>)
 80074ae:	0030      	movs	r0, r6
 80074b0:	f006 fbd6 	bl	800dc60 <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074b4:	2101      	movs	r1, #1
 80074b6:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 80074b8:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074ba:	f005 fe3f 	bl	800d13c <osSemaphoreCreate>
 80074be:	4e2c      	ldr	r6, [pc, #176]	; (8007570 <MX_FREERTOS_Init+0x1a0>)
	osSemaphoreDef(SemaphoreP2);
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074c0:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074c2:	6070      	str	r0, [r6, #4]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074c4:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 80074c6:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074c8:	f005 fe38 	bl	800d13c <osSemaphoreCreate>
 80074cc:	4d29      	ldr	r5, [pc, #164]	; (8007574 <MX_FREERTOS_Init+0x1a4>)
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074ce:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074d0:	6068      	str	r0, [r5, #4]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074d2:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 80074d4:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074d6:	f005 fe31 	bl	800d13c <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP4);
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074da:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074dc:	60b0      	str	r0, [r6, #8]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074de:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 80074e0:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074e2:	f005 fe2b 	bl	800d13c <osSemaphoreCreate>
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80074e6:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074e8:	60a8      	str	r0, [r5, #8]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80074ea:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 80074ec:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80074ee:	f005 fe25 	bl	800d13c <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP6);
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80074f2:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80074f4:	60f0      	str	r0, [r6, #12]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80074f6:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 80074f8:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80074fa:	f005 fe1f 	bl	800d13c <osSemaphoreCreate>
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 80074fe:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007500:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007502:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 8007504:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007506:	f005 fe19 	bl	800d13c <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP8);
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800750a:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 800750c:	6130      	str	r0, [r6, #16]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800750e:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 8007510:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007512:	f005 fe13 	bl	800d13c <osSemaphoreCreate>
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007516:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007518:	6128      	str	r0, [r5, #16]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800751a:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 800751c:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800751e:	f005 fe0d 	bl	800d13c <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP10);
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007522:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007524:	6170      	str	r0, [r6, #20]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007526:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 8007528:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 800752a:	f005 fe07 	bl	800d13c <osSemaphoreCreate>
 800752e:	6168      	str	r0, [r5, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
#endif
	
}
 8007530:	b00f      	add	sp, #60	; 0x3c
 8007532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007534:	20001cac 	.word	0x20001cac
 8007538:	080199ec 	.word	0x080199ec
 800753c:	08007979 	.word	0x08007979
 8007540:	080199f8 	.word	0x080199f8
 8007544:	080082e9 	.word	0x080082e9
 8007548:	08019a04 	.word	0x08019a04
 800754c:	0801200d 	.word	0x0801200d
 8007550:	08019a10 	.word	0x08019a10
 8007554:	080050e1 	.word	0x080050e1
 8007558:	08008451 	.word	0x08008451
 800755c:	08019a18 	.word	0x08019a18
 8007560:	08019a24 	.word	0x08019a24
 8007564:	08019a30 	.word	0x08019a30
 8007568:	08019a3c 	.word	0x08019a3c
 800756c:	08019a48 	.word	0x08019a48
 8007570:	20006918 	.word	0x20006918
 8007574:	200068f8 	.word	0x200068f8

08007578 <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 8007578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800757a:	46de      	mov	lr, fp
 800757c:	4657      	mov	r7, sl
 800757e:	464e      	mov	r6, r9
 8007580:	4645      	mov	r5, r8
 8007582:	b5e0      	push	{r5, r6, r7, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 8007584:	4bd4      	ldr	r3, [pc, #848]	; (80078d8 <ExecuteMonitor+0x360>)
{
 8007586:	b085      	sub	sp, #20
    if(Monitor_time == INTIAL_VALUE)
 8007588:	469b      	mov	fp, r3
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b03      	cmp	r3, #3
 800758e:	d006      	beq.n	800759e <ExecuteMonitor+0x26>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
		           }
	}
  }
}
 8007590:	b005      	add	sp, #20
 8007592:	bc3c      	pop	{r2, r3, r4, r5}
 8007594:	4690      	mov	r8, r2
 8007596:	4699      	mov	r9, r3
 8007598:	46a2      	mov	sl, r4
 800759a:	46ab      	mov	fp, r5
 800759c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Monitor_time =0;
 800759e:	2300      	movs	r3, #0
 80075a0:	465a      	mov	r2, fp
 80075a2:	6013      	str	r3, [r2, #0]
	flag=0;
 80075a4:	7113      	strb	r3, [r2, #4]
	currentCharacter=SPACE;
 80075a6:	3320      	adds	r3, #32
 80075a8:	7153      	strb	r3, [r2, #5]
 80075aa:	4bcc      	ldr	r3, [pc, #816]	; (80078dc <ExecuteMonitor+0x364>)
 80075ac:	4ecc      	ldr	r6, [pc, #816]	; (80078e0 <ExecuteMonitor+0x368>)
 80075ae:	4699      	mov	r9, r3
 80075b0:	4bcc      	ldr	r3, [pc, #816]	; (80078e4 <ExecuteMonitor+0x36c>)
 80075b2:	4dcd      	ldr	r5, [pc, #820]	; (80078e8 <ExecuteMonitor+0x370>)
 80075b4:	469a      	mov	sl, r3
 80075b6:	4ccd      	ldr	r4, [pc, #820]	; (80078ec <ExecuteMonitor+0x374>)
		                    nonProcessingParameterIndex=0;
 80075b8:	2200      	movs	r2, #0
 80075ba:	4bcd      	ldr	r3, [pc, #820]	; (80078f0 <ExecuteMonitor+0x378>)
		            	    perviousCharacter= INTIAL_VALUE;
 80075bc:	2703      	movs	r7, #3
		                    nonProcessingParameterIndex=0;
 80075be:	701a      	strb	r2, [r3, #0]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 80075c0:	2320      	movs	r3, #32
 80075c2:	4698      	mov	r8, r3
 80075c4:	e004      	b.n	80075d0 <ExecuteMonitor+0x58>
 80075c6:	2a01      	cmp	r2, #1
 80075c8:	d04c      	beq.n	8007664 <ExecuteMonitor+0xec>
 80075ca:	2a02      	cmp	r2, #2
 80075cc:	d100      	bne.n	80075d0 <ExecuteMonitor+0x58>
 80075ce:	e0a8      	b.n	8007722 <ExecuteMonitor+0x1aa>
		            	    perviousCharacter= INTIAL_VALUE;
 80075d0:	464b      	mov	r3, r9
		            	    Delay_us(100);
 80075d2:	2064      	movs	r0, #100	; 0x64
		            	    perviousCharacter= INTIAL_VALUE;
 80075d4:	701f      	strb	r7, [r3, #0]
		            	    Delay_us(100);
 80075d6:	f005 fa41 	bl	800ca5c <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 80075da:	465b      	mov	r3, fp
 80075dc:	464a      	mov	r2, r9
 80075de:	795b      	ldrb	r3, [r3, #5]
 80075e0:	7812      	ldrb	r2, [r2, #0]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d00b      	beq.n	80075fe <ExecuteMonitor+0x86>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 80075e6:	4ac2      	ldr	r2, [pc, #776]	; (80078f0 <ExecuteMonitor+0x378>)
 80075e8:	48c1      	ldr	r0, [pc, #772]	; (80078f0 <ExecuteMonitor+0x378>)
 80075ea:	7812      	ldrb	r2, [r2, #0]
 80075ec:	1c51      	adds	r1, r2, #1
 80075ee:	7001      	strb	r1, [r0, #0]
 80075f0:	2124      	movs	r1, #36	; 0x24
 80075f2:	4452      	add	r2, sl
 80075f4:	5453      	strb	r3, [r2, r1]
								perviousCharacter=currentCharacter;
 80075f6:	464a      	mov	r2, r9
 80075f8:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 80075fa:	465a      	mov	r2, fp
 80075fc:	7157      	strb	r7, [r2, #5]
 80075fe:	465a      	mov	r2, fp
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007600:	4641      	mov	r1, r8
 8007602:	7912      	ldrb	r2, [r2, #4]
 8007604:	438b      	bics	r3, r1
 8007606:	d1de      	bne.n	80075c6 <ExecuteMonitor+0x4e>
                   if(flag == NonActive)
 8007608:	2a00      	cmp	r2, #0
 800760a:	d129      	bne.n	8007660 <ExecuteMonitor+0xe8>
                	   nonProcessingParameterIndex=0;
 800760c:	4bb8      	ldr	r3, [pc, #736]	; (80078f0 <ExecuteMonitor+0x378>)
 800760e:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 8007610:	4653      	mov	r3, sl
 8007612:	3224      	adds	r2, #36	; 0x24
 8007614:	5c9b      	ldrb	r3, [r3, r2]
 8007616:	2b5b      	cmp	r3, #91	; 0x5b
 8007618:	d100      	bne.n	800761c <ExecuteMonitor+0xa4>
 800761a:	e0eb      	b.n	80077f4 <ExecuteMonitor+0x27c>
 		            else if(FirstCharacterInParameter == '#')
 800761c:	2b23      	cmp	r3, #35	; 0x23
 800761e:	d100      	bne.n	8007622 <ExecuteMonitor+0xaa>
 8007620:	e141      	b.n	80078a6 <ExecuteMonitor+0x32e>
 		            else if(FirstCharacterInParameter == '=')
 8007622:	2b3d      	cmp	r3, #61	; 0x3d
 8007624:	d100      	bne.n	8007628 <ExecuteMonitor+0xb0>
 8007626:	e175      	b.n	8007914 <ExecuteMonitor+0x39c>
 8007628:	2338      	movs	r3, #56	; 0x38
 800762a:	4652      	mov	r2, sl
 800762c:	5cd7      	ldrb	r7, [r2, r3]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800762e:	4650      	mov	r0, sl
               	   desiredArray=ParameterLocationIn2dArray;
 8007630:	4bb0      	ldr	r3, [pc, #704]	; (80078f4 <ExecuteMonitor+0x37c>)
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007632:	0139      	lsls	r1, r7, #4
               	   desiredArray=ParameterLocationIn2dArray;
 8007634:	701f      	strb	r7, [r3, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007636:	304c      	adds	r0, #76	; 0x4c
 8007638:	1bcf      	subs	r7, r1, r7
 800763a:	19c0      	adds	r0, r0, r7
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 800763c:	4657      	mov	r7, sl
 800763e:	3738      	adds	r7, #56	; 0x38
 8007640:	0039      	movs	r1, r7
 8007642:	220f      	movs	r2, #15
 8007644:	f00a ffaf 	bl	80125a6 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 8007648:	4650      	mov	r0, sl
 800764a:	2214      	movs	r2, #20
 800764c:	2100      	movs	r1, #0
 800764e:	3024      	adds	r0, #36	; 0x24
 8007650:	f00a ffb2 	bl	80125b8 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8007654:	2214      	movs	r2, #20
 8007656:	2100      	movs	r1, #0
 8007658:	0038      	movs	r0, r7
 800765a:	f00a ffad 	bl	80125b8 <memset>
 800765e:	e7ab      	b.n	80075b8 <ExecuteMonitor+0x40>
                   if(flag == RUN_FOR_ONCE)
 8007660:	2a01      	cmp	r2, #1
 8007662:	d15b      	bne.n	800771c <ExecuteMonitor+0x1a4>
                	twoDMatrixIndex=1;
 8007664:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 8007666:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 8007668:	702b      	strb	r3, [r5, #0]
		          	counter=0;
 800766a:	4ba3      	ldr	r3, [pc, #652]	; (80078f8 <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 800766c:	7032      	strb	r2, [r6, #0]
		          	counter=0;
 800766e:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 8007670:	4ba2      	ldr	r3, [pc, #648]	; (80078fc <ExecuteMonitor+0x384>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d02e      	beq.n	80076d6 <ExecuteMonitor+0x15e>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007678:	224c      	movs	r2, #76	; 0x4c
		           while(counter != numCommandParameters)
 800767a:	2100      	movs	r1, #0
 800767c:	2300      	movs	r3, #0
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800767e:	4690      	mov	r8, r2
		           while(counter != numCommandParameters)
 8007680:	2201      	movs	r2, #1
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007682:	0010      	movs	r0, r2
 8007684:	2720      	movs	r7, #32
 8007686:	001a      	movs	r2, r3
 8007688:	0003      	movs	r3, r0
 800768a:	e002      	b.n	8007692 <ExecuteMonitor+0x11a>
 800768c:	4b9a      	ldr	r3, [pc, #616]	; (80078f8 <ExecuteMonitor+0x380>)
 800768e:	781a      	ldrb	r2, [r3, #0]
 8007690:	782b      	ldrb	r3, [r5, #0]
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007692:	1c58      	adds	r0, r3, #1
 8007694:	7028      	strb	r0, [r5, #0]
 8007696:	1c48      	adds	r0, r1, #1
 8007698:	7030      	strb	r0, [r6, #0]
 800769a:	0110      	lsls	r0, r2, #4
 800769c:	1a82      	subs	r2, r0, r2
 800769e:	4452      	add	r2, sl
 80076a0:	18d2      	adds	r2, r2, r3
 80076a2:	4643      	mov	r3, r8
 80076a4:	5cd3      	ldrb	r3, [r2, r3]
 80076a6:	2244      	movs	r2, #68	; 0x44
 80076a8:	1861      	adds	r1, r4, r1
		            	Delay_ms(1);
 80076aa:	2001      	movs	r0, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80076ac:	548b      	strb	r3, [r1, r2]
		            	Delay_ms(1);
 80076ae:	f007 fbc1 	bl	800ee34 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80076b2:	7831      	ldrb	r1, [r6, #0]
 80076b4:	1863      	adds	r3, r4, r1
 80076b6:	3343      	adds	r3, #67	; 0x43
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	43bb      	bics	r3, r7
 80076bc:	d1e6      	bne.n	800768c <ExecuteMonitor+0x114>
		                   counter++;
 80076be:	4b8e      	ldr	r3, [pc, #568]	; (80078f8 <ExecuteMonitor+0x380>)
 80076c0:	4a8d      	ldr	r2, [pc, #564]	; (80078f8 <ExecuteMonitor+0x380>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	3301      	adds	r3, #1
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 80076ca:	2201      	movs	r2, #1
 80076cc:	702a      	strb	r2, [r5, #0]
		           while(counter != numCommandParameters)
 80076ce:	4a8b      	ldr	r2, [pc, #556]	; (80078fc <ExecuteMonitor+0x384>)
 80076d0:	7812      	ldrb	r2, [r2, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d1d4      	bne.n	8007680 <ExecuteMonitor+0x108>
		          		   flag=0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	465a      	mov	r2, fp
 80076da:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 80076dc:	4a86      	ldr	r2, [pc, #536]	; (80078f8 <ExecuteMonitor+0x380>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80076de:	2744      	movs	r7, #68	; 0x44
		          		   counter=0;
 80076e0:	7013      	strb	r3, [r2, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80076e2:	4a87      	ldr	r2, [pc, #540]	; (8007900 <ExecuteMonitor+0x388>)
 80076e4:	7013      	strb	r3, [r2, #0]
 80076e6:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80076e8:	4a86      	ldr	r2, [pc, #536]	; (8007904 <ExecuteMonitor+0x38c>)
		          			Delay_ms(1);
 80076ea:	2001      	movs	r0, #1
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80076ec:	18d2      	adds	r2, r2, r3
 80076ee:	18e3      	adds	r3, r4, r3
 80076f0:	5ddb      	ldrb	r3, [r3, r7]
 80076f2:	3281      	adds	r2, #129	; 0x81
 80076f4:	32ff      	adds	r2, #255	; 0xff
 80076f6:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 80076f8:	f007 fb9c 	bl	800ee34 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80076fc:	4b80      	ldr	r3, [pc, #512]	; (8007900 <ExecuteMonitor+0x388>)
 80076fe:	4a80      	ldr	r2, [pc, #512]	; (8007900 <ExecuteMonitor+0x388>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	3301      	adds	r3, #1
 8007704:	b2db      	uxtb	r3, r3
 8007706:	7013      	strb	r3, [r2, #0]
 8007708:	2b3f      	cmp	r3, #63	; 0x3f
 800770a:	d9ed      	bls.n	80076e8 <ExecuteMonitor+0x170>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 800770c:	0020      	movs	r0, r4
 800770e:	2240      	movs	r2, #64	; 0x40
 8007710:	3044      	adds	r0, #68	; 0x44
 8007712:	2100      	movs	r1, #0
 8007714:	f00a ff50 	bl	80125b8 <memset>
 8007718:	465b      	mov	r3, fp
 800771a:	791a      	ldrb	r2, [r3, #4]
                   if(flag == CONTINUOUS_RUN)
 800771c:	2a02      	cmp	r2, #2
 800771e:	d000      	beq.n	8007722 <ExecuteMonitor+0x1aa>
 8007720:	e74a      	b.n	80075b8 <ExecuteMonitor+0x40>
                	twoDMatrixIndex=1;
 8007722:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 8007724:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 8007726:	702b      	strb	r3, [r5, #0]
   		          	counter=0;
 8007728:	4b73      	ldr	r3, [pc, #460]	; (80078f8 <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 800772a:	7032      	strb	r2, [r6, #0]
   		          	counter=0;
 800772c:	701a      	strb	r2, [r3, #0]
   		           while(counter != numCommandParameters)
 800772e:	4b73      	ldr	r3, [pc, #460]	; (80078fc <ExecuteMonitor+0x384>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d033      	beq.n	800779e <ExecuteMonitor+0x226>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007736:	224c      	movs	r2, #76	; 0x4c
   		           while(counter != numCommandParameters)
 8007738:	2100      	movs	r1, #0
 800773a:	2300      	movs	r3, #0
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800773c:	4690      	mov	r8, r2
   		           while(counter != numCommandParameters)
 800773e:	2201      	movs	r2, #1
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007740:	0010      	movs	r0, r2
 8007742:	2720      	movs	r7, #32
 8007744:	001a      	movs	r2, r3
 8007746:	0003      	movs	r3, r0
 8007748:	e001      	b.n	800774e <ExecuteMonitor+0x1d6>
 800774a:	781a      	ldrb	r2, [r3, #0]
 800774c:	782b      	ldrb	r3, [r5, #0]
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800774e:	1c58      	adds	r0, r3, #1
 8007750:	7028      	strb	r0, [r5, #0]
 8007752:	1c48      	adds	r0, r1, #1
 8007754:	7030      	strb	r0, [r6, #0]
 8007756:	0110      	lsls	r0, r2, #4
 8007758:	1a82      	subs	r2, r0, r2
 800775a:	4452      	add	r2, sl
 800775c:	18d2      	adds	r2, r2, r3
 800775e:	4643      	mov	r3, r8
 8007760:	5cd3      	ldrb	r3, [r2, r3]
 8007762:	2244      	movs	r2, #68	; 0x44
 8007764:	1861      	adds	r1, r4, r1
   		            	Delay_ms(1);
 8007766:	2001      	movs	r0, #1
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007768:	548b      	strb	r3, [r1, r2]
   		            	Delay_ms(1);
 800776a:	f007 fb63 	bl	800ee34 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800776e:	7831      	ldrb	r1, [r6, #0]
 8007770:	1863      	adds	r3, r4, r1
 8007772:	3343      	adds	r3, #67	; 0x43
 8007774:	781a      	ldrb	r2, [r3, #0]
 8007776:	4b60      	ldr	r3, [pc, #384]	; (80078f8 <ExecuteMonitor+0x380>)
 8007778:	43ba      	bics	r2, r7
 800777a:	d1e6      	bne.n	800774a <ExecuteMonitor+0x1d2>
   		             counter++;
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	485e      	ldr	r0, [pc, #376]	; (80078f8 <ExecuteMonitor+0x380>)
 8007780:	3301      	adds	r3, #1
 8007782:	b2db      	uxtb	r3, r3
 8007784:	7003      	strb	r3, [r0, #0]
   		             twoDMatrixIndex=1;
 8007786:	2001      	movs	r0, #1
 8007788:	7028      	strb	r0, [r5, #0]
   		           while(counter != numCommandParameters)
 800778a:	485c      	ldr	r0, [pc, #368]	; (80078fc <ExecuteMonitor+0x384>)
 800778c:	7800      	ldrb	r0, [r0, #0]
 800778e:	4298      	cmp	r0, r3
 8007790:	d1d5      	bne.n	800773e <ExecuteMonitor+0x1c6>
 8007792:	465b      	mov	r3, fp
		            counter=0;
 8007794:	4958      	ldr	r1, [pc, #352]	; (80078f8 <ExecuteMonitor+0x380>)
 8007796:	791b      	ldrb	r3, [r3, #4]
 8007798:	700a      	strb	r2, [r1, #0]
                  while(flag != NonActive)
 800779a:	2b00      	cmp	r3, #0
 800779c:	d01e      	beq.n	80077dc <ExecuteMonitor+0x264>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800779e:	2744      	movs	r7, #68	; 0x44
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80077a0:	2200      	movs	r2, #0
 80077a2:	4b57      	ldr	r3, [pc, #348]	; (8007900 <ExecuteMonitor+0x388>)
 80077a4:	701a      	strb	r2, [r3, #0]
 80077a6:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077a8:	4a56      	ldr	r2, [pc, #344]	; (8007904 <ExecuteMonitor+0x38c>)
		          			Delay_us(200);
 80077aa:	20c8      	movs	r0, #200	; 0xc8
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077ac:	18d2      	adds	r2, r2, r3
 80077ae:	18e3      	adds	r3, r4, r3
 80077b0:	5ddb      	ldrb	r3, [r3, r7]
 80077b2:	3281      	adds	r2, #129	; 0x81
 80077b4:	32ff      	adds	r2, #255	; 0xff
 80077b6:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 80077b8:	f005 f950 	bl	800ca5c <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80077bc:	4b50      	ldr	r3, [pc, #320]	; (8007900 <ExecuteMonitor+0x388>)
 80077be:	4a50      	ldr	r2, [pc, #320]	; (8007900 <ExecuteMonitor+0x388>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	3301      	adds	r3, #1
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	7013      	strb	r3, [r2, #0]
 80077c8:	2b3f      	cmp	r3, #63	; 0x3f
 80077ca:	d9ed      	bls.n	80077a8 <ExecuteMonitor+0x230>
  	          		 Delay_ms(Monitor_time);
 80077cc:	465b      	mov	r3, fp
 80077ce:	6818      	ldr	r0, [r3, #0]
 80077d0:	f007 fb30 	bl	800ee34 <HAL_Delay>
                  while(flag != NonActive)
 80077d4:	465b      	mov	r3, fp
 80077d6:	791b      	ldrb	r3, [r3, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e1      	bne.n	80077a0 <ExecuteMonitor+0x228>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 80077dc:	0020      	movs	r0, r4
 80077de:	2240      	movs	r2, #64	; 0x40
 80077e0:	2100      	movs	r1, #0
 80077e2:	3044      	adds	r0, #68	; 0x44
 80077e4:	f00a fee8 	bl	80125b8 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 80077e8:	22c0      	movs	r2, #192	; 0xc0
 80077ea:	2100      	movs	r1, #0
 80077ec:	4846      	ldr	r0, [pc, #280]	; (8007908 <ExecuteMonitor+0x390>)
 80077ee:	f00a fee3 	bl	80125b8 <memset>
 80077f2:	e6e1      	b.n	80075b8 <ExecuteMonitor+0x40>
 		            	nonProcessingParameterIndex++;
 80077f4:	4a3e      	ldr	r2, [pc, #248]	; (80078f0 <ExecuteMonitor+0x378>)
 80077f6:	3b5a      	subs	r3, #90	; 0x5a
 80077f8:	7013      	strb	r3, [r2, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 80077fa:	4b44      	ldr	r3, [pc, #272]	; (800790c <ExecuteMonitor+0x394>)
 80077fc:	210a      	movs	r1, #10
 80077fe:	781f      	ldrb	r7, [r3, #0]
 8007800:	4653      	mov	r3, sl
 8007802:	9701      	str	r7, [sp, #4]
 8007804:	3324      	adds	r3, #36	; 0x24
 8007806:	7858      	ldrb	r0, [r3, #1]
 8007808:	f7f8 fd28 	bl	800025c <__aeabi_uidivmod>
 800780c:	2303      	movs	r3, #3
 800780e:	b2c9      	uxtb	r1, r1
 8007810:	4698      	mov	r8, r3
 8007812:	42b9      	cmp	r1, r7
 8007814:	d101      	bne.n	800781a <ExecuteMonitor+0x2a2>
 8007816:	e0a1      	b.n	800795c <ExecuteMonitor+0x3e4>
 8007818:	46b8      	mov	r8, r7
 800781a:	4643      	mov	r3, r8
 800781c:	1c9f      	adds	r7, r3, #2
 800781e:	4653      	mov	r3, sl
 8007820:	2224      	movs	r2, #36	; 0x24
 8007822:	4443      	add	r3, r8
 8007824:	5c98      	ldrb	r0, [r3, r2]
 8007826:	210a      	movs	r1, #10
 8007828:	f7f8 fd18 	bl	800025c <__aeabi_uidivmod>
 800782c:	9b01      	ldr	r3, [sp, #4]
 800782e:	b2c9      	uxtb	r1, r1
 8007830:	b2ff      	uxtb	r7, r7
 8007832:	4299      	cmp	r1, r3
 8007834:	d1f0      	bne.n	8007818 <ExecuteMonitor+0x2a0>
 8007836:	4643      	mov	r3, r8
 8007838:	46b8      	mov	r8, r7
 800783a:	3301      	adds	r3, #1
 800783c:	b2db      	uxtb	r3, r3
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	9702      	str	r7, [sp, #8]
 		            			nonProcessingParameterIndex++;
 8007842:	4a2b      	ldr	r2, [pc, #172]	; (80078f0 <ExecuteMonitor+0x378>)
 8007844:	9901      	ldr	r1, [sp, #4]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007846:	4453      	add	r3, sl
 		            			nonProcessingParameterIndex++;
 8007848:	7011      	strb	r1, [r2, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 800784a:	2224      	movs	r2, #36	; 0x24
 800784c:	5c9b      	ldrb	r3, [r3, r2]
 800784e:	210a      	movs	r1, #10
 8007850:	0018      	movs	r0, r3
 8007852:	9303      	str	r3, [sp, #12]
 8007854:	f7f8 fd02 	bl	800025c <__aeabi_uidivmod>
 8007858:	2338      	movs	r3, #56	; 0x38
 800785a:	4652      	mov	r2, sl
 800785c:	b2cf      	uxtb	r7, r1
 800785e:	54d7      	strb	r7, [r2, r3]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8007860:	9b03      	ldr	r3, [sp, #12]
 8007862:	2b5d      	cmp	r3, #93	; 0x5d
 8007864:	d00d      	beq.n	8007882 <ExecuteMonitor+0x30a>
 8007866:	9b01      	ldr	r3, [sp, #4]
 8007868:	3301      	adds	r3, #1
 800786a:	b2db      	uxtb	r3, r3
 800786c:	e000      	b.n	8007870 <ExecuteMonitor+0x2f8>
 800786e:	0013      	movs	r3, r2
 8007870:	2124      	movs	r1, #36	; 0x24
 8007872:	1c5a      	adds	r2, r3, #1
 8007874:	4453      	add	r3, sl
 8007876:	5c5b      	ldrb	r3, [r3, r1]
 8007878:	b2d2      	uxtb	r2, r2
 800787a:	2b5d      	cmp	r3, #93	; 0x5d
 800787c:	d1f7      	bne.n	800786e <ExecuteMonitor+0x2f6>
 800787e:	4690      	mov	r8, r2
 8007880:	9202      	str	r2, [sp, #8]
 		            	nonProcessingParameterIndex++;
 8007882:	4642      	mov	r2, r8
 8007884:	4b1a      	ldr	r3, [pc, #104]	; (80078f0 <ExecuteMonitor+0x378>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007886:	4651      	mov	r1, sl
 		            	nonProcessingParameterIndex++;
 8007888:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 800788a:	2301      	movs	r3, #1
 800788c:	4a20      	ldr	r2, [pc, #128]	; (8007910 <ExecuteMonitor+0x398>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800788e:	4650      	mov	r0, sl
 		            	processingParameterIndex=1;
 8007890:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007892:	9b02      	ldr	r3, [sp, #8]
 8007894:	2214      	movs	r2, #20
 8007896:	469c      	mov	ip, r3
 8007898:	3124      	adds	r1, #36	; 0x24
 800789a:	1ad2      	subs	r2, r2, r3
 800789c:	4461      	add	r1, ip
 800789e:	3039      	adds	r0, #57	; 0x39
 80078a0:	f00a fe81 	bl	80125a6 <memcpy>
 80078a4:	e6c3      	b.n	800762e <ExecuteMonitor+0xb6>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80078a6:	4653      	mov	r3, sl
 80078a8:	3324      	adds	r3, #36	; 0x24
 80078aa:	7858      	ldrb	r0, [r3, #1]
 80078ac:	210a      	movs	r1, #10
 80078ae:	f7f8 fcd5 	bl	800025c <__aeabi_uidivmod>
 80078b2:	4652      	mov	r2, sl
 80078b4:	2338      	movs	r3, #56	; 0x38
 80078b6:	b2cf      	uxtb	r7, r1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078b8:	4650      	mov	r0, sl
 80078ba:	4651      	mov	r1, sl
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80078bc:	54d7      	strb	r7, [r2, r3]
 		            	nonProcessingParameterIndex=2;
 80078be:	4a0c      	ldr	r2, [pc, #48]	; (80078f0 <ExecuteMonitor+0x378>)
 80078c0:	3b36      	subs	r3, #54	; 0x36
 80078c2:	7013      	strb	r3, [r2, #0]
 		            	processingParameterIndex=1;
 80078c4:	4a12      	ldr	r2, [pc, #72]	; (8007910 <ExecuteMonitor+0x398>)
 80078c6:	3b01      	subs	r3, #1
 80078c8:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078ca:	3126      	adds	r1, #38	; 0x26
 80078cc:	2212      	movs	r2, #18
 80078ce:	3039      	adds	r0, #57	; 0x39
 80078d0:	f00a fe69 	bl	80125a6 <memcpy>
 80078d4:	e6ab      	b.n	800762e <ExecuteMonitor+0xb6>
 80078d6:	46c0      	nop			; (mov r8, r8)
 80078d8:	20000000 	.word	0x20000000
 80078dc:	200068f4 	.word	0x200068f4
 80078e0:	20006938 	.word	0x20006938
 80078e4:	20001cac 	.word	0x20001cac
 80078e8:	20006935 	.word	0x20006935
 80078ec:	20001d2c 	.word	0x20001d2c
 80078f0:	20006915 	.word	0x20006915
 80078f4:	20006937 	.word	0x20006937
 80078f8:	20006916 	.word	0x20006916
 80078fc:	20006934 	.word	0x20006934
 8007900:	200068f5 	.word	0x200068f5
 8007904:	200018e4 	.word	0x200018e4
 8007908:	20001a64 	.word	0x20001a64
 800790c:	20006936 	.word	0x20006936
 8007910:	20006914 	.word	0x20006914
                	    digitTheCommand=nonProcessingParameter[1]%10;
 8007914:	4657      	mov	r7, sl
 8007916:	3724      	adds	r7, #36	; 0x24
 8007918:	7878      	ldrb	r0, [r7, #1]
 800791a:	210a      	movs	r1, #10
 800791c:	f7f8 fc9e 	bl	800025c <__aeabi_uidivmod>
 8007920:	4b11      	ldr	r3, [pc, #68]	; (8007968 <ExecuteMonitor+0x3f0>)
 8007922:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 8007924:	78b8      	ldrb	r0, [r7, #2]
 8007926:	210a      	movs	r1, #10
 8007928:	f7f8 fc98 	bl	800025c <__aeabi_uidivmod>
 800792c:	4b0f      	ldr	r3, [pc, #60]	; (800796c <ExecuteMonitor+0x3f4>)
 800792e:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007930:	78f8      	ldrb	r0, [r7, #3]
 8007932:	210a      	movs	r1, #10
 8007934:	f7f8 fc92 	bl	800025c <__aeabi_uidivmod>
 8007938:	4652      	mov	r2, sl
 800793a:	2338      	movs	r3, #56	; 0x38
 800793c:	b2cf      	uxtb	r7, r1
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800793e:	4650      	mov	r0, sl
 8007940:	4651      	mov	r1, sl
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007942:	54d7      	strb	r7, [r2, r3]
                	    nonProcessingParameterIndex=4;
 8007944:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <ExecuteMonitor+0x3f8>)
 8007946:	3b34      	subs	r3, #52	; 0x34
 8007948:	7013      	strb	r3, [r2, #0]
                	    processingParameterIndex=1;
 800794a:	4a0a      	ldr	r2, [pc, #40]	; (8007974 <ExecuteMonitor+0x3fc>)
 800794c:	3b03      	subs	r3, #3
 800794e:	7013      	strb	r3, [r2, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007950:	3128      	adds	r1, #40	; 0x28
 8007952:	2210      	movs	r2, #16
 8007954:	3039      	adds	r0, #57	; 0x39
 8007956:	f00a fe26 	bl	80125a6 <memcpy>
 800795a:	e668      	b.n	800762e <ExecuteMonitor+0xb6>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 800795c:	2202      	movs	r2, #2
 800795e:	9302      	str	r3, [sp, #8]
 8007960:	9201      	str	r2, [sp, #4]
 8007962:	3b01      	subs	r3, #1
 8007964:	e76d      	b.n	8007842 <ExecuteMonitor+0x2ca>
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	20006936 	.word	0x20006936
 800796c:	20006934 	.word	0x20006934
 8007970:	20006915 	.word	0x20006915
 8007974:	20006914 	.word	0x20006914

08007978 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	4c1e      	ldr	r4, [pc, #120]	; (80079f4 <StartDefaultTask+0x7c>)
 800797c:	4d1e      	ldr	r5, [pc, #120]	; (80079f8 <StartDefaultTask+0x80>)
 800797e:	4e1f      	ldr	r6, [pc, #124]	; (80079fc <StartDefaultTask+0x84>)
 8007980:	e00f      	b.n	80079a2 <StartDefaultTask+0x2a>
		switch(indMode){
 8007982:	2b03      	cmp	r3, #3
 8007984:	d024      	beq.n	80079d0 <StartDefaultTask+0x58>
 8007986:	2b01      	cmp	r3, #1
 8007988:	d02b      	beq.n	80079e2 <StartDefaultTask+0x6a>
		CheckAttachedButtons();
 800798a:	f004 fa1f 	bl	800bdcc <CheckAttachedButtons>
		ExecuteSnippet();
 800798e:	f7fd fd19 	bl	80053c4 <ExecuteSnippet>
		ExecuteMonitor();
 8007992:	f7ff fdf1 	bl	8007578 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 8007996:	782b      	ldrb	r3, [r5, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d100      	bne.n	800799e <StartDefaultTask+0x26>
			delayButtonStateReset = false;
 800799c:	7033      	strb	r3, [r6, #0]
		taskYIELD();
 800799e:	f007 f8fd 	bl	800eb9c <vPortYield>
		switch(indMode){
 80079a2:	7823      	ldrb	r3, [r4, #0]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d1ec      	bne.n	8007982 <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 80079a8:	2180      	movs	r1, #128	; 0x80
 80079aa:	2090      	movs	r0, #144	; 0x90
 80079ac:	2201      	movs	r2, #1
 80079ae:	05c0      	lsls	r0, r0, #23
 80079b0:	0109      	lsls	r1, r1, #4
 80079b2:	f008 ff01 	bl	80107b8 <HAL_GPIO_WritePin>
 80079b6:	2064      	movs	r0, #100	; 0x64
				RTOS_IND_blink(30);
 80079b8:	f005 fb94 	bl	800d0e4 <osDelay>
 80079bc:	2180      	movs	r1, #128	; 0x80
 80079be:	2090      	movs	r0, #144	; 0x90
 80079c0:	2200      	movs	r2, #0
 80079c2:	0109      	lsls	r1, r1, #4
 80079c4:	05c0      	lsls	r0, r0, #23
 80079c6:	f008 fef7 	bl	80107b8 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80079ca:	2300      	movs	r3, #0
 80079cc:	7023      	strb	r3, [r4, #0]
				break;
 80079ce:	e7dc      	b.n	800798a <StartDefaultTask+0x12>
				RTOS_IND_blink(30);
 80079d0:	2180      	movs	r1, #128	; 0x80
 80079d2:	2090      	movs	r0, #144	; 0x90
 80079d4:	2201      	movs	r2, #1
 80079d6:	05c0      	lsls	r0, r0, #23
 80079d8:	0109      	lsls	r1, r1, #4
 80079da:	f008 feed 	bl	80107b8 <HAL_GPIO_WritePin>
 80079de:	201e      	movs	r0, #30
 80079e0:	e7ea      	b.n	80079b8 <StartDefaultTask+0x40>
				RTOS_IND_blink(200);
 80079e2:	2180      	movs	r1, #128	; 0x80
 80079e4:	2090      	movs	r0, #144	; 0x90
 80079e6:	2201      	movs	r2, #1
 80079e8:	05c0      	lsls	r0, r0, #23
 80079ea:	0109      	lsls	r1, r1, #4
 80079ec:	f008 fee4 	bl	80107b8 <HAL_GPIO_WritePin>
 80079f0:	20c8      	movs	r0, #200	; 0xc8
 80079f2:	e7e1      	b.n	80079b8 <StartDefaultTask+0x40>
 80079f4:	2000114e 	.word	0x2000114e
 80079f8:	2000246f 	.word	0x2000246f
 80079fc:	20002464 	.word	0x20002464

08007a00 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007a00:	4b04      	ldr	r3, [pc, #16]	; (8007a14 <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 8007a02:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	4904      	ldr	r1, [pc, #16]	; (8007a18 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007a08:	f7f8 fba2 	bl	8000150 <__udivsi3>
 8007a0c:	4b03      	ldr	r3, [pc, #12]	; (8007a1c <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007a0e:	6058      	str	r0, [r3, #4]
}
 8007a10:	bd10      	pop	{r4, pc}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	200000c4 	.word	0x200000c4
 8007a18:	00002710 	.word	0x00002710
 8007a1c:	20001dac 	.word	0x20001dac

08007a20 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a20:	21fa      	movs	r1, #250	; 0xfa
 8007a22:	4b0f      	ldr	r3, [pc, #60]	; (8007a60 <ulMainGetRunTimeCounterValue+0x40>)
uint32_t ulMainGetRunTimeCounterValue(void){
 8007a24:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a26:	6818      	ldr	r0, [r3, #0]
 8007a28:	0089      	lsls	r1, r1, #2
 8007a2a:	f7f8 fb91 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a2e:	4c0d      	ldr	r4, [pc, #52]	; (8007a64 <ulMainGetRunTimeCounterValue+0x44>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a30:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a32:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007a34:	f006 fa82 	bl	800df3c <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007a38:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <ulMainGetRunTimeCounterValue+0x48>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	015b      	lsls	r3, r3, #5
 8007a3e:	d50c      	bpl.n	8007a5a <ulMainGetRunTimeCounterValue+0x3a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a40:	6823      	ldr	r3, [r4, #0]
		ulTickCount++;
 8007a42:	3001      	adds	r0, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a44:	1aed      	subs	r5, r5, r3
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a46:	4b09      	ldr	r3, [pc, #36]	; (8007a6c <ulMainGetRunTimeCounterValue+0x4c>)
	ulReturn =(ulTickCount * 10UL);
 8007a48:	0084      	lsls	r4, r0, #2
 8007a4a:	1824      	adds	r4, r4, r0
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a4c:	6859      	ldr	r1, [r3, #4]
 8007a4e:	0028      	movs	r0, r5
 8007a50:	f7f8 fb7e 	bl	8000150 <__udivsi3>
	ulReturn =(ulTickCount * 10UL);
 8007a54:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a56:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007a58:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a5a:	1bad      	subs	r5, r5, r6
 8007a5c:	e7f3      	b.n	8007a46 <ulMainGetRunTimeCounterValue+0x26>
 8007a5e:	46c0      	nop			; (mov r8, r8)
 8007a60:	200000c4 	.word	0x200000c4
 8007a64:	e000e018 	.word	0xe000e018
 8007a68:	e000ed04 	.word	0xe000ed04
 8007a6c:	20001dac 	.word	0x20001dac

08007a70 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007a70:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007a72:	f007 f83b 	bl	800eaec <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007a76:	b2c4      	uxtb	r4, r0
 8007a78:	0020      	movs	r0, r4
 8007a7a:	f002 fb6d 	bl	800a158 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007a7e:	0020      	movs	r0, r4
 8007a80:	f002 ff96 	bl	800a9b0 <SwitchStreamDMAToMsg>
}
 8007a84:	bd10      	pop	{r4, pc}
 8007a86:	46c0      	nop			; (mov r8, r8)

08007a88 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a8a:	46ce      	mov	lr, r9
 8007a8c:	4647      	mov	r7, r8
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b085      	sub	sp, #20
 8007a92:	0015      	movs	r5, r2
 8007a94:	466a      	mov	r2, sp
 8007a96:	73d3      	strb	r3, [r2, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007a98:	aa0c      	add	r2, sp, #48	; 0x30
 8007a9a:	7812      	ldrb	r2, [r2, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007a9c:	000e      	movs	r6, r1
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d06b      	beq.n	8007b7a <SetupDMAStreams+0xf2>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d051      	beq.n	8007b4a <SetupDMAStreams+0xc2>
 8007aa6:	2a00      	cmp	r2, #0
 8007aa8:	d04f      	beq.n	8007b4a <SetupDMAStreams+0xc2>
	if(direction == FORWARD){
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d06a      	beq.n	8007b84 <SetupDMAStreams+0xfc>
	else if(direction == BACKWARD){
 8007aae:	2801      	cmp	r0, #1
 8007ab0:	d052      	beq.n	8007b58 <SetupDMAStreams+0xd0>
		return BOS_ERR_WrongParam;
 8007ab2:	2467      	movs	r4, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8007ab4:	2802      	cmp	r0, #2
 8007ab6:	d149      	bne.n	8007b4c <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007ab8:	0018      	movs	r0, r3
 8007aba:	f005 f9dd 	bl	800ce78 <GetUart>
 8007abe:	ab0c      	add	r3, sp, #48	; 0x30
 8007ac0:	0004      	movs	r4, r0
 8007ac2:	7818      	ldrb	r0, [r3, #0]
 8007ac4:	f005 f9d8 	bl	800ce78 <GetUart>
 8007ac8:	2201      	movs	r2, #1
 8007aca:	0001      	movs	r1, r0
 8007acc:	0020      	movs	r0, r4
 8007ace:	f7ff fc0d 	bl	80072ec <StartDMAstream>
 8007ad2:	2817      	cmp	r0, #23
 8007ad4:	d04f      	beq.n	8007b76 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007ad6:	21fa      	movs	r1, #250	; 0xfa
 8007ad8:	0168      	lsls	r0, r5, #5
 8007ada:	1b40      	subs	r0, r0, r5
 8007adc:	0080      	lsls	r0, r0, #2
 8007ade:	1940      	adds	r0, r0, r5
 8007ae0:	0089      	lsls	r1, r1, #2
 8007ae2:	00c0      	lsls	r0, r0, #3
 8007ae4:	f7f8 fb34 	bl	8000150 <__udivsi3>
 8007ae8:	4b49      	ldr	r3, [pc, #292]	; (8007c10 <SetupDMAStreams+0x188>)
 8007aea:	4d4a      	ldr	r5, [pc, #296]	; (8007c14 <SetupDMAStreams+0x18c>)
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	4698      	mov	r8, r3
 8007af0:	230f      	movs	r3, #15
 8007af2:	0001      	movs	r1, r0
 8007af4:	2200      	movs	r2, #0
 8007af6:	446b      	add	r3, sp
 8007af8:	0007      	movs	r7, r0
 8007afa:	0028      	movs	r0, r5
 8007afc:	f006 fe9a 	bl	800e834 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007b00:	466b      	mov	r3, sp
 8007b02:	7bdb      	ldrb	r3, [r3, #15]
 8007b04:	4c44      	ldr	r4, [pc, #272]	; (8007c18 <SetupDMAStreams+0x190>)
 8007b06:	3b01      	subs	r3, #1
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	511e      	str	r6, [r3, r4]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007b0c:	ab0c      	add	r3, sp, #48	; 0x30
 8007b0e:	7818      	ldrb	r0, [r3, #0]
 8007b10:	f005 f9b2 	bl	800ce78 <GetUart>
 8007b14:	466b      	mov	r3, sp
 8007b16:	4681      	mov	r9, r0
 8007b18:	7bd8      	ldrb	r0, [r3, #15]
 8007b1a:	f005 f9ad 	bl	800ce78 <GetUart>
 8007b1e:	2201      	movs	r2, #1
 8007b20:	0001      	movs	r1, r0
 8007b22:	4648      	mov	r0, r9
 8007b24:	f7ff fbe2 	bl	80072ec <StartDMAstream>
 8007b28:	2817      	cmp	r0, #23
 8007b2a:	d024      	beq.n	8007b76 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007b2c:	4643      	mov	r3, r8
 8007b2e:	0028      	movs	r0, r5
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	2200      	movs	r2, #0
 8007b34:	ab0c      	add	r3, sp, #48	; 0x30
 8007b36:	0039      	movs	r1, r7
 8007b38:	f006 fe7c 	bl	800e834 <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 8007b3c:	ab0c      	add	r3, sp, #48	; 0x30
 8007b3e:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007b40:	0005      	movs	r5, r0
		dmaStreamTotal[dst - 1] =count;
 8007b42:	3b01      	subs	r3, #1
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	511e      	str	r6, [r3, r4]
 8007b48:	e044      	b.n	8007bd4 <SetupDMAStreams+0x14c>
		return BOS_ERR_WrongParam;
 8007b4a:	2467      	movs	r4, #103	; 0x67
}
 8007b4c:	0020      	movs	r0, r4
 8007b4e:	b005      	add	sp, #20
 8007b50:	bc0c      	pop	{r2, r3}
 8007b52:	4690      	mov	r8, r2
 8007b54:	4699      	mov	r9, r3
 8007b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007b58:	0010      	movs	r0, r2
 8007b5a:	f005 f98d 	bl	800ce78 <GetUart>
 8007b5e:	466b      	mov	r3, sp
 8007b60:	0004      	movs	r4, r0
 8007b62:	7bd8      	ldrb	r0, [r3, #15]
 8007b64:	f005 f988 	bl	800ce78 <GetUart>
 8007b68:	2201      	movs	r2, #1
 8007b6a:	0001      	movs	r1, r0
 8007b6c:	0020      	movs	r0, r4
 8007b6e:	f7ff fbbd 	bl	80072ec <StartDMAstream>
 8007b72:	2817      	cmp	r0, #23
 8007b74:	d13d      	bne.n	8007bf2 <SetupDMAStreams+0x16a>
			return BOS_ERR_PORT_BUSY;
 8007b76:	2417      	movs	r4, #23
 8007b78:	e7e8      	b.n	8007b4c <SetupDMAStreams+0xc4>
		portStatus[src] =STREAM;
 8007b7a:	2102      	movs	r1, #2
 8007b7c:	4a27      	ldr	r2, [pc, #156]	; (8007c1c <SetupDMAStreams+0x194>)
		return BOS_ERR_WrongParam;
 8007b7e:	2467      	movs	r4, #103	; 0x67
		portStatus[src] =STREAM;
 8007b80:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8007b82:	e7e3      	b.n	8007b4c <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007b84:	0018      	movs	r0, r3
 8007b86:	f005 f977 	bl	800ce78 <GetUart>
 8007b8a:	ab0c      	add	r3, sp, #48	; 0x30
 8007b8c:	0004      	movs	r4, r0
 8007b8e:	7818      	ldrb	r0, [r3, #0]
 8007b90:	f005 f972 	bl	800ce78 <GetUart>
 8007b94:	2201      	movs	r2, #1
 8007b96:	0001      	movs	r1, r0
 8007b98:	0020      	movs	r0, r4
 8007b9a:	f7ff fba7 	bl	80072ec <StartDMAstream>
 8007b9e:	2817      	cmp	r0, #23
 8007ba0:	d0e9      	beq.n	8007b76 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007ba2:	21fa      	movs	r1, #250	; 0xfa
 8007ba4:	0168      	lsls	r0, r5, #5
 8007ba6:	1b40      	subs	r0, r0, r5
 8007ba8:	0080      	lsls	r0, r0, #2
 8007baa:	1940      	adds	r0, r0, r5
 8007bac:	0089      	lsls	r1, r1, #2
 8007bae:	00c0      	lsls	r0, r0, #3
 8007bb0:	f7f8 face 	bl	8000150 <__udivsi3>
 8007bb4:	4b16      	ldr	r3, [pc, #88]	; (8007c10 <SetupDMAStreams+0x188>)
 8007bb6:	0001      	movs	r1, r0
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	230f      	movs	r3, #15
 8007bbc:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	4814      	ldr	r0, [pc, #80]	; (8007c14 <SetupDMAStreams+0x18c>)
 8007bc2:	f006 fe37 	bl	800e834 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007bc6:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007bc8:	0005      	movs	r5, r0
		dmaStreamTotal[src - 1] =count;
 8007bca:	7bdb      	ldrb	r3, [r3, #15]
 8007bcc:	4a12      	ldr	r2, [pc, #72]	; (8007c18 <SetupDMAStreams+0x190>)
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 8007bd4:	2400      	movs	r4, #0
	if(xTimerStream != NULL)
 8007bd6:	2d00      	cmp	r5, #0
 8007bd8:	d0b8      	beq.n	8007b4c <SetupDMAStreams+0xc4>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007bda:	f006 f9a9 	bl	800df30 <xTaskGetTickCount>
 8007bde:	2301      	movs	r3, #1
 8007be0:	425b      	negs	r3, r3
 8007be2:	0002      	movs	r2, r0
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	2101      	movs	r1, #1
 8007be8:	2300      	movs	r3, #0
 8007bea:	0028      	movs	r0, r5
 8007bec:	f006 fe42 	bl	800e874 <xTimerGenericCommand>
 8007bf0:	e7ac      	b.n	8007b4c <SetupDMAStreams+0xc4>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007bf2:	21fa      	movs	r1, #250	; 0xfa
 8007bf4:	0168      	lsls	r0, r5, #5
 8007bf6:	1b40      	subs	r0, r0, r5
 8007bf8:	0080      	lsls	r0, r0, #2
 8007bfa:	1940      	adds	r0, r0, r5
 8007bfc:	0089      	lsls	r1, r1, #2
 8007bfe:	00c0      	lsls	r0, r0, #3
 8007c00:	f7f8 faa6 	bl	8000150 <__udivsi3>
 8007c04:	4b02      	ldr	r3, [pc, #8]	; (8007c10 <SetupDMAStreams+0x188>)
 8007c06:	0001      	movs	r1, r0
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	ab0c      	add	r3, sp, #48	; 0x30
 8007c0c:	e7d7      	b.n	8007bbe <SetupDMAStreams+0x136>
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	08007a71 	.word	0x08007a71
 8007c14:	08019a54 	.word	0x08019a54
 8007c18:	20001888 	.word	0x20001888
 8007c1c:	20000c3c 	.word	0x20000c3c

08007c20 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007c20:	b510      	push	{r4, lr}
	switch(port){
 8007c22:	2805      	cmp	r0, #5
 8007c24:	d80a      	bhi.n	8007c3c <NotifyMessagingTask+0x1c>
 8007c26:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <NotifyMessagingTask+0x30>)
 8007c28:	0080      	lsls	r0, r0, #2
 8007c2a:	581b      	ldr	r3, [r3, r0]
 8007c2c:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P5
		case P5:
			xTaskNotifyGive(P5MsgTaskHandle)
 8007c2e:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <NotifyMessagingTask+0x34>)
 8007c30:	6818      	ldr	r0, [r3, #0]
 8007c32:	2202      	movs	r2, #2
 8007c34:	2300      	movs	r3, #0
 8007c36:	2100      	movs	r1, #0
 8007c38:	f006 fd4c 	bl	800e6d4 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8007c3c:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8007c3e:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <NotifyMessagingTask+0x38>)
 8007c40:	e7f6      	b.n	8007c30 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 8007c42:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <NotifyMessagingTask+0x3c>)
 8007c44:	e7f4      	b.n	8007c30 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007c46:	4b06      	ldr	r3, [pc, #24]	; (8007c60 <NotifyMessagingTask+0x40>)
 8007c48:	e7f2      	b.n	8007c30 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 8007c4a:	4b06      	ldr	r3, [pc, #24]	; (8007c64 <NotifyMessagingTask+0x44>)
 8007c4c:	e7f0      	b.n	8007c30 <NotifyMessagingTask+0x10>
 8007c4e:	46c0      	nop			; (mov r8, r8)
 8007c50:	08017150 	.word	0x08017150
 8007c54:	20001ccc 	.word	0x20001ccc
 8007c58:	20001cbc 	.word	0x20001cbc
 8007c5c:	20001cc0 	.word	0x20001cc0
 8007c60:	20001cc4 	.word	0x20001cc4
 8007c64:	20001cc8 	.word	0x20001cc8

08007c68 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	ac06      	add	r4, sp, #24
 8007c6e:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8007c70:	0004      	movs	r4, r0
 8007c72:	4314      	orrs	r4, r2
 8007c74:	d011      	beq.n	8007c9a <SendMessageFromPort+0x32>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d10b      	bne.n	8007c92 <SendMessageFromPort+0x2a>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007c7a:	1c96      	adds	r6, r2, #2
 8007c7c:	b2f6      	uxtb	r6, r6
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 8007c7e:	2467      	movs	r4, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007c80:	2e01      	cmp	r6, #1
 8007c82:	d803      	bhi.n	8007c8c <SendMessageFromPort+0x24>
 8007c84:	9500      	str	r5, [sp, #0]
 8007c86:	f000 f80b 	bl	8007ca0 <SendMessageFromPort.part.0>
 8007c8a:	0004      	movs	r4, r0
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 8007c8c:	0020      	movs	r0, r4
 8007c8e:	b002      	add	sp, #8
 8007c90:	bd70      	pop	{r4, r5, r6, pc}
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007c92:	2900      	cmp	r1, #0
 8007c94:	d0f6      	beq.n	8007c84 <SendMessageFromPort+0x1c>
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	d1f4      	bne.n	8007c84 <SendMessageFromPort+0x1c>
		return BOS_ERR_WrongParam;
 8007c9a:	2467      	movs	r4, #103	; 0x67
 8007c9c:	e7f6      	b.n	8007c8c <SendMessageFromPort+0x24>
 8007c9e:	46c0      	nop			; (mov r8, r8)

08007ca0 <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca2:	46de      	mov	lr, fp
 8007ca4:	464e      	mov	r6, r9
 8007ca6:	4645      	mov	r5, r8
 8007ca8:	4657      	mov	r7, sl
 8007caa:	b5e0      	push	{r5, r6, r7, lr}
 8007cac:	b087      	sub	sp, #28
 8007cae:	0005      	movs	r5, r0
 8007cb0:	9004      	str	r0, [sp, #16]
 8007cb2:	469b      	mov	fp, r3
	TaskPriority =uxTaskPriorityGet( NULL);
 8007cb4:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007cb6:	ab10      	add	r3, sp, #64	; 0x40
 8007cb8:	4689      	mov	r9, r1
 8007cba:	4690      	mov	r8, r2
 8007cbc:	881e      	ldrh	r6, [r3, #0]
	TaskPriority =uxTaskPriorityGet( NULL);
 8007cbe:	f006 f8a1 	bl	800de04 <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007cc2:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 8007cc4:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	f006 f8ac 	bl	800de24 <vTaskPrioritySet>
	message[0] ='H';
 8007ccc:	2348      	movs	r3, #72	; 0x48
 8007cce:	4cd2      	ldr	r4, [pc, #840]	; (8008018 <SendMessageFromPort.part.0+0x378>)
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007cd0:	464a      	mov	r2, r9
	message[0] ='H';
 8007cd2:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 8007cd4:	3312      	adds	r3, #18
 8007cd6:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007cd8:	002b      	movs	r3, r5
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	d000      	beq.n	8007ce0 <SendMessageFromPort.part.0+0x40>
 8007cde:	e094      	b.n	8007e0a <SendMessageFromPort.part.0+0x16a>
 8007ce0:	4643      	mov	r3, r8
 8007ce2:	1c9f      	adds	r7, r3, #2
 8007ce4:	b2ff      	uxtb	r7, r7
 8007ce6:	2f01      	cmp	r7, #1
 8007ce8:	d800      	bhi.n	8007cec <SendMessageFromPort.part.0+0x4c>
 8007cea:	e095      	b.n	8007e18 <SendMessageFromPort.part.0+0x178>
 8007cec:	465b      	mov	r3, fp
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d100      	bne.n	8007cf4 <SendMessageFromPort.part.0+0x54>
 8007cf2:	e091      	b.n	8007e18 <SendMessageFromPort.part.0+0x178>
			src =myID;
 8007cf4:	4bc9      	ldr	r3, [pc, #804]	; (800801c <SendMessageFromPort.part.0+0x37c>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	4699      	mov	r9, r3
		message[2] =length;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 8007cfe:	4643      	mov	r3, r8
 8007d00:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 8007d02:	464b      	mov	r3, r9
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d04:	4ac6      	ldr	r2, [pc, #792]	; (8008020 <SendMessageFromPort.part.0+0x380>)
		message[4] =src;
 8007d06:	7123      	strb	r3, [r4, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d08:	7913      	ldrb	r3, [r2, #4]
 8007d0a:	7851      	ldrb	r1, [r2, #1]
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	7812      	ldrb	r2, [r2, #0]
 8007d10:	0089      	lsls	r1, r1, #2
 8007d12:	430b      	orrs	r3, r1
 8007d14:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8007d16:	22ff      	movs	r2, #255	; 0xff
 8007d18:	455a      	cmp	r2, fp
 8007d1a:	4192      	sbcs	r2, r2
 8007d1c:	4252      	negs	r2, r2
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d1e:	0052      	lsls	r2, r2, #1
 8007d20:	4313      	orrs	r3, r2
		message[6 + shift] =(uint8_t )code;
 8007d22:	465a      	mov	r2, fp
 8007d24:	71a2      	strb	r2, [r4, #6]
		if(extendCode == true){
 8007d26:	2200      	movs	r2, #0
 8007d28:	4692      	mov	sl, r2
 8007d2a:	465a      	mov	r2, fp
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	7163      	strb	r3, [r4, #5]
		if(extendCode == true){
 8007d30:	2aff      	cmp	r2, #255	; 0xff
 8007d32:	d903      	bls.n	8007d3c <SendMessageFromPort.part.0+0x9c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8007d34:	0a12      	lsrs	r2, r2, #8
 8007d36:	71e2      	strb	r2, [r4, #7]
			++shift;
 8007d38:	2201      	movs	r2, #1
 8007d3a:	4692      	mov	sl, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007d3c:	2e2e      	cmp	r6, #46	; 0x2e
 8007d3e:	d800      	bhi.n	8007d42 <SendMessageFromPort.part.0+0xa2>
 8007d40:	e157      	b.n	8007ff2 <SendMessageFromPort.part.0+0x352>
			message[5] |=0x80;
 8007d42:	2280      	movs	r2, #128	; 0x80
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007d44:	272e      	movs	r7, #46	; 0x2e
			message[5] |=0x80;
 8007d46:	4252      	negs	r2, r2
			totalNumberOfParams =numberOfParams;
 8007d48:	4db6      	ldr	r5, [pc, #728]	; (8008024 <SendMessageFromPort.part.0+0x384>)
			message[5] |=0x80;
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	7163      	strb	r3, [r4, #5]
			totalNumberOfParams =numberOfParams;
 8007d4e:	806e      	strh	r6, [r5, #2]
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007d50:	2e2d      	cmp	r6, #45	; 0x2d
 8007d52:	d900      	bls.n	8007d56 <SendMessageFromPort.part.0+0xb6>
 8007d54:	e136      	b.n	8007fc4 <SendMessageFromPort.part.0+0x324>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007d56:	237f      	movs	r3, #127	; 0x7f
 8007d58:	7962      	ldrb	r2, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007d5a:	8829      	ldrh	r1, [r5, #0]
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007d60:	4653      	mov	r3, sl
 8007d62:	1dd8      	adds	r0, r3, #7
 8007d64:	4bb0      	ldr	r3, [pc, #704]	; (8008028 <SendMessageFromPort.part.0+0x388>)
 8007d66:	1820      	adds	r0, r4, r0
 8007d68:	18c9      	adds	r1, r1, r3
 8007d6a:	0032      	movs	r2, r6
 8007d6c:	f00a fc1b 	bl	80125a6 <memcpy>
					ptrShift =0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 8007d74:	806b      	strh	r3, [r5, #2]
					length =numberOfParams + shift + 4;
 8007d76:	4653      	mov	r3, sl
 8007d78:	1d1d      	adds	r5, r3, #4
 8007d7a:	19ad      	adds	r5, r5, r6
 8007d7c:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true){
 8007d7e:	4bab      	ldr	r3, [pc, #684]	; (800802c <SendMessageFromPort.part.0+0x38c>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d03d      	beq.n	8007e02 <SendMessageFromPort.part.0+0x162>
			if(dstGroupID < BOS_BROADCAST){
 8007d86:	4baa      	ldr	r3, [pc, #680]	; (8008030 <SendMessageFromPort.part.0+0x390>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2bff      	cmp	r3, #255	; 0xff
 8007d8c:	d100      	bne.n	8007d90 <SendMessageFromPort.part.0+0xf0>
 8007d8e:	e106      	b.n	8007f9e <SendMessageFromPort.part.0+0x2fe>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007d90:	4aa8      	ldr	r2, [pc, #672]	; (8008034 <SendMessageFromPort.part.0+0x394>)
 8007d92:	7817      	ldrb	r7, [r2, #0]
 8007d94:	2f00      	cmp	r7, #0
 8007d96:	d100      	bne.n	8007d9a <SendMessageFromPort.part.0+0xfa>
 8007d98:	e139      	b.n	800800e <SendMessageFromPort.part.0+0x36e>
 8007d9a:	2201      	movs	r2, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007d9c:	0021      	movs	r1, r4
 8007d9e:	409a      	lsls	r2, r3
 8007da0:	4451      	add	r1, sl
 8007da2:	4694      	mov	ip, r2
 8007da4:	9105      	str	r1, [sp, #20]
 8007da6:	0039      	movs	r1, r7
			uint8_t groupMembers =0;
 8007da8:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007daa:	4667      	mov	r7, ip
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007dac:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007dae:	46ac      	mov	ip, r5
 8007db0:	000d      	movs	r5, r1
 8007db2:	48a1      	ldr	r0, [pc, #644]	; (8008038 <SendMessageFromPort.part.0+0x398>)
					if(InGroup(i,dstGroupID)){
 8007db4:	8801      	ldrh	r1, [r0, #0]
 8007db6:	420f      	tst	r7, r1
 8007db8:	d009      	beq.n	8007dce <SendMessageFromPort.part.0+0x12e>
						++groupMembers;							// Add this member
 8007dba:	3201      	adds	r2, #1
 8007dbc:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8007dbe:	1991      	adds	r1, r2, r6
 8007dc0:	292c      	cmp	r1, #44	; 0x2c
 8007dc2:	dd00      	ble.n	8007dc6 <SendMessageFromPort.part.0+0x126>
 8007dc4:	e0fc      	b.n	8007fc0 <SendMessageFromPort.part.0+0x320>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007dc6:	9905      	ldr	r1, [sp, #20]
 8007dc8:	1889      	adds	r1, r1, r2
 8007dca:	1989      	adds	r1, r1, r6
 8007dcc:	718b      	strb	r3, [r1, #6]
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007dce:	3301      	adds	r3, #1
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	3002      	adds	r0, #2
 8007dd4:	42ab      	cmp	r3, r5
 8007dd6:	d9ed      	bls.n	8007db4 <SendMessageFromPort.part.0+0x114>
 8007dd8:	4665      	mov	r5, ip
 8007dda:	0010      	movs	r0, r2
 8007ddc:	1991      	adds	r1, r2, r6
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8007dde:	4653      	mov	r3, sl
 8007de0:	3307      	adds	r3, #7
 8007de2:	199e      	adds	r6, r3, r6
 8007de4:	1836      	adds	r6, r6, r0
 8007de6:	55a2      	strb	r2, [r4, r6]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007de8:	292b      	cmp	r1, #43	; 0x2b
 8007dea:	dd00      	ble.n	8007dee <SendMessageFromPort.part.0+0x14e>
 8007dec:	e0e8      	b.n	8007fc0 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007dee:	4993      	ldr	r1, [pc, #588]	; (800803c <SendMessageFromPort.part.0+0x39c>)
 8007df0:	3502      	adds	r5, #2
 8007df2:	780b      	ldrb	r3, [r1, #0]
 8007df4:	19a6      	adds	r6, r4, r6
 8007df6:	3301      	adds	r3, #1
 8007df8:	b2db      	uxtb	r3, r3
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007dfa:	18ad      	adds	r5, r5, r2
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007dfc:	700b      	strb	r3, [r1, #0]
 8007dfe:	7073      	strb	r3, [r6, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007e00:	b2ed      	uxtb	r5, r5
 8007e02:	4647      	mov	r7, r8
 8007e04:	3702      	adds	r7, #2
 8007e06:	b2ff      	uxtb	r7, r7
 8007e08:	e012      	b.n	8007e30 <SendMessageFromPort.part.0+0x190>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007e0a:	465b      	mov	r3, fp
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d000      	beq.n	8007e12 <SendMessageFromPort.part.0+0x172>
 8007e10:	e0af      	b.n	8007f72 <SendMessageFromPort.part.0+0x2d2>
 8007e12:	4647      	mov	r7, r8
 8007e14:	3702      	adds	r7, #2
 8007e16:	b2ff      	uxtb	r7, r7
		length =messageLength[numberOfParams - 1];
 8007e18:	3e01      	subs	r6, #1
 8007e1a:	4b89      	ldr	r3, [pc, #548]	; (8008040 <SendMessageFromPort.part.0+0x3a0>)
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007e1c:	00f1      	lsls	r1, r6, #3
		length =messageLength[numberOfParams - 1];
 8007e1e:	5d9d      	ldrb	r5, [r3, r6]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007e20:	1b89      	subs	r1, r1, r6
 8007e22:	4e88      	ldr	r6, [pc, #544]	; (8008044 <SendMessageFromPort.part.0+0x3a4>)
 8007e24:	00c9      	lsls	r1, r1, #3
 8007e26:	1989      	adds	r1, r1, r6
 8007e28:	002a      	movs	r2, r5
 8007e2a:	4887      	ldr	r0, [pc, #540]	; (8008048 <SendMessageFromPort.part.0+0x3a8>)
 8007e2c:	f00a fbbb 	bl	80125a6 <memcpy>
	memcpy(crcBuffer,&message[0],length + 3);
 8007e30:	1ceb      	adds	r3, r5, #3
 8007e32:	469a      	mov	sl, r3
 8007e34:	4e85      	ldr	r6, [pc, #532]	; (800804c <SendMessageFromPort.part.0+0x3ac>)
 8007e36:	001a      	movs	r2, r3
 8007e38:	0021      	movs	r1, r4
 8007e3a:	0030      	movs	r0, r6
	message[2] =length;
 8007e3c:	70a5      	strb	r5, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8007e3e:	f00a fbb2 	bl	80125a6 <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007e42:	b2ab      	uxth	r3, r5
 8007e44:	4651      	mov	r1, sl
 8007e46:	0030      	movs	r0, r6
 8007e48:	9305      	str	r3, [sp, #20]
 8007e4a:	f002 fe3f 	bl	800aacc <CalculateCRC8>
 8007e4e:	4653      	mov	r3, sl
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007e50:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007e52:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007e54:	2100      	movs	r1, #0
 8007e56:	0030      	movs	r0, r6
 8007e58:	f00a fbae 	bl	80125b8 <memset>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007e5c:	465b      	mov	r3, fp
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007e5e:	2f01      	cmp	r7, #1
 8007e60:	d94a      	bls.n	8007ef8 <SendMessageFromPort.part.0+0x258>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007e62:	3b2c      	subs	r3, #44	; 0x2c
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d800      	bhi.n	8007e6a <SendMessageFromPort.part.0+0x1ca>
 8007e68:	e08d      	b.n	8007f86 <SendMessageFromPort.part.0+0x2e6>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007e6a:	4b6d      	ldr	r3, [pc, #436]	; (8008020 <SendMessageFromPort.part.0+0x380>)
 8007e6c:	4698      	mov	r8, r3
 8007e6e:	88db      	ldrh	r3, [r3, #6]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d100      	bne.n	8007e76 <SendMessageFromPort.part.0+0x1d6>
 8007e74:	e08f      	b.n	8007f96 <SendMessageFromPort.part.0+0x2f6>
 8007e76:	9e05      	ldr	r6, [sp, #20]
 8007e78:	4f75      	ldr	r7, [pc, #468]	; (8008050 <SendMessageFromPort.part.0+0x3b0>)
 8007e7a:	4b76      	ldr	r3, [pc, #472]	; (8008054 <SendMessageFromPort.part.0+0x3b4>)
 8007e7c:	3604      	adds	r6, #4
 8007e7e:	46ba      	mov	sl, r7
 8007e80:	b2b6      	uxth	r6, r6
 8007e82:	2500      	movs	r5, #0
 8007e84:	4699      	mov	r9, r3
 8007e86:	9f04      	ldr	r7, [sp, #16]
 8007e88:	e005      	b.n	8007e96 <SendMessageFromPort.part.0+0x1f6>
 8007e8a:	4643      	mov	r3, r8
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	88db      	ldrh	r3, [r3, #6]
 8007e90:	b2ed      	uxtb	r5, r5
 8007e92:	42ab      	cmp	r3, r5
 8007e94:	d91c      	bls.n	8007ed0 <SendMessageFromPort.part.0+0x230>
				Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007e96:	2332      	movs	r3, #50	; 0x32
 8007e98:	0032      	movs	r2, r6
 8007e9a:	0021      	movs	r1, r4
 8007e9c:	0038      	movs	r0, r7
 8007e9e:	f7fa ff41 	bl	8002d24 <Send_BOS_Message>
				osDelay(200);
 8007ea2:	20c8      	movs	r0, #200	; 0xc8
 8007ea4:	f005 f91e 	bl	800d0e4 <osDelay>
				if(ACK_FLAG == true)
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10f      	bne.n	8007ed0 <SendMessageFromPort.part.0+0x230>
				if(rejected_FLAG == true)
 8007eb0:	4653      	mov	r3, sl
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0e8      	beq.n	8007e8a <SendMessageFromPort.part.0+0x1ea>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007eb8:	2332      	movs	r3, #50	; 0x32
 8007eba:	0032      	movs	r2, r6
 8007ebc:	0021      	movs	r1, r4
 8007ebe:	0038      	movs	r0, r7
 8007ec0:	f7fa ff30 	bl	8002d24 <Send_BOS_Message>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007ec4:	4643      	mov	r3, r8
 8007ec6:	3501      	adds	r5, #1
 8007ec8:	88db      	ldrh	r3, [r3, #6]
 8007eca:	b2ed      	uxtb	r5, r5
 8007ecc:	42ab      	cmp	r3, r5
 8007ece:	d8e2      	bhi.n	8007e96 <SendMessageFromPort.part.0+0x1f6>
 8007ed0:	4657      	mov	r7, sl
		ACK_FLAG =false; rejected_FLAG=false;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	464a      	mov	r2, r9
 8007ed6:	703b      	strb	r3, [r7, #0]
 8007ed8:	7013      	strb	r3, [r2, #0]
	vTaskPrioritySet( NULL,TaskPriority);
 8007eda:	2000      	movs	r0, #0
 8007edc:	9903      	ldr	r1, [sp, #12]
 8007ede:	f005 ffa1 	bl	800de24 <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 8007ee2:	2202      	movs	r2, #2
	return result;
 8007ee4:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 8007ee6:	4b5c      	ldr	r3, [pc, #368]	; (8008058 <SendMessageFromPort.part.0+0x3b8>)
 8007ee8:	701a      	strb	r2, [r3, #0]
}
 8007eea:	b007      	add	sp, #28
 8007eec:	bc3c      	pop	{r2, r3, r4, r5}
 8007eee:	4690      	mov	r8, r2
 8007ef0:	4699      	mov	r9, r3
 8007ef2:	46a2      	mov	sl, r4
 8007ef4:	46ab      	mov	fp, r5
 8007ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d03e      	beq.n	8007f7a <SendMessageFromPort.part.0+0x2da>
		FindBroadcastRoutes(src);
 8007efc:	4648      	mov	r0, r9
 8007efe:	f7fb fd59 	bl	80039b4 <FindBroadcastRoutes>
 8007f02:	2300      	movs	r3, #0
 8007f04:	4698      	mov	r8, r3
 8007f06:	4b45      	ldr	r3, [pc, #276]	; (800801c <SendMessageFromPort.part.0+0x37c>)
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f08:	9e05      	ldr	r6, [sp, #20]
 8007f0a:	4699      	mov	r9, r3
 8007f0c:	4b53      	ldr	r3, [pc, #332]	; (800805c <SendMessageFromPort.part.0+0x3bc>)
 8007f0e:	3604      	adds	r6, #4
 8007f10:	469b      	mov	fp, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f12:	2301      	movs	r3, #1
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f14:	b2b6      	uxth	r6, r6
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f16:	469a      	mov	sl, r3
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f18:	0033      	movs	r3, r6
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f1a:	2501      	movs	r5, #1
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f1c:	4646      	mov	r6, r8
 8007f1e:	4698      	mov	r8, r3
 8007f20:	4f4b      	ldr	r7, [pc, #300]	; (8008050 <SendMessageFromPort.part.0+0x3b0>)
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f22:	464b      	mov	r3, r9
 8007f24:	465a      	mov	r2, fp
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	5ad3      	ldrh	r3, [r2, r3]
 8007f2e:	4652      	mov	r2, sl
 8007f30:	4133      	asrs	r3, r6
 8007f32:	421a      	tst	r2, r3
 8007f34:	d10a      	bne.n	8007f4c <SendMessageFromPort.part.0+0x2ac>
			rejected_FLAG=false;
 8007f36:	2300      	movs	r3, #0
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f38:	3501      	adds	r5, #1
			Delay_us(10);
 8007f3a:	200a      	movs	r0, #10
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f3c:	b2ed      	uxtb	r5, r5
			rejected_FLAG=false;
 8007f3e:	703b      	strb	r3, [r7, #0]
 8007f40:	3601      	adds	r6, #1
			Delay_us(10);
 8007f42:	f004 fd8b 	bl	800ca5c <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f46:	2d06      	cmp	r5, #6
 8007f48:	d1eb      	bne.n	8007f22 <SendMessageFromPort.part.0+0x282>
 8007f4a:	e7c6      	b.n	8007eda <SendMessageFromPort.part.0+0x23a>
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f4c:	2332      	movs	r3, #50	; 0x32
 8007f4e:	4642      	mov	r2, r8
 8007f50:	0021      	movs	r1, r4
 8007f52:	0028      	movs	r0, r5
 8007f54:	f7fa fee6 	bl	8002d24 <Send_BOS_Message>
				osDelay(200);
 8007f58:	20c8      	movs	r0, #200	; 0xc8
 8007f5a:	f005 f8c3 	bl	800d0e4 <osDelay>
				if(rejected_FLAG == true)
 8007f5e:	783b      	ldrb	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d0e8      	beq.n	8007f36 <SendMessageFromPort.part.0+0x296>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007f64:	2332      	movs	r3, #50	; 0x32
 8007f66:	4642      	mov	r2, r8
 8007f68:	0021      	movs	r1, r4
 8007f6a:	9804      	ldr	r0, [sp, #16]
 8007f6c:	f7fa feda 	bl	8002d24 <Send_BOS_Message>
 8007f70:	e7e1      	b.n	8007f36 <SendMessageFromPort.part.0+0x296>
		if(src == 0)
 8007f72:	2a00      	cmp	r2, #0
 8007f74:	d000      	beq.n	8007f78 <SendMessageFromPort.part.0+0x2d8>
 8007f76:	e6c0      	b.n	8007cfa <SendMessageFromPort.part.0+0x5a>
 8007f78:	e6bc      	b.n	8007cf4 <SendMessageFromPort.part.0+0x54>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007f7a:	464b      	mov	r3, r9
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1bd      	bne.n	8007efc <SendMessageFromPort.part.0+0x25c>
			src =message[4];
 8007f80:	7923      	ldrb	r3, [r4, #4]
 8007f82:	4699      	mov	r9, r3
 8007f84:	e7ba      	b.n	8007efc <SendMessageFromPort.part.0+0x25c>
			Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007f86:	9a05      	ldr	r2, [sp, #20]
 8007f88:	2332      	movs	r3, #50	; 0x32
 8007f8a:	3204      	adds	r2, #4
 8007f8c:	b292      	uxth	r2, r2
 8007f8e:	0021      	movs	r1, r4
 8007f90:	9804      	ldr	r0, [sp, #16]
 8007f92:	f7fa fec7 	bl	8002d24 <Send_BOS_Message>
 8007f96:	4b2f      	ldr	r3, [pc, #188]	; (8008054 <SendMessageFromPort.part.0+0x3b4>)
 8007f98:	4f2d      	ldr	r7, [pc, #180]	; (8008050 <SendMessageFromPort.part.0+0x3b0>)
 8007f9a:	4699      	mov	r9, r3
 8007f9c:	e799      	b.n	8007ed2 <SendMessageFromPort.part.0+0x232>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8007f9e:	2e2c      	cmp	r6, #44	; 0x2c
 8007fa0:	d80e      	bhi.n	8007fc0 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams] =++bcastID;
 8007fa2:	4a26      	ldr	r2, [pc, #152]	; (800803c <SendMessageFromPort.part.0+0x39c>)
 8007fa4:	4647      	mov	r7, r8
 8007fa6:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 8007fa8:	3501      	adds	r5, #1
				message[7 + shift + numberOfParams] =++bcastID;
 8007faa:	3301      	adds	r3, #1
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	7013      	strb	r3, [r2, #0]
 8007fb0:	4652      	mov	r2, sl
 8007fb2:	18a2      	adds	r2, r4, r2
 8007fb4:	1996      	adds	r6, r2, r6
 8007fb6:	3702      	adds	r7, #2
 8007fb8:	71f3      	strb	r3, [r6, #7]
				length +=1;		// + bcastID
 8007fba:	b2ed      	uxtb	r5, r5
 8007fbc:	b2ff      	uxtb	r7, r7
 8007fbe:	e737      	b.n	8007e30 <SendMessageFromPort.part.0+0x190>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8007fc0:	2069      	movs	r0, #105	; 0x69
 8007fc2:	e792      	b.n	8007eea <SendMessageFromPort.part.0+0x24a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007fc4:	465b      	mov	r3, fp
 8007fc6:	4642      	mov	r2, r8
 8007fc8:	4649      	mov	r1, r9
 8007fca:	9700      	str	r7, [sp, #0]
 8007fcc:	9804      	ldr	r0, [sp, #16]
 8007fce:	f7ff fe4b 	bl	8007c68 <SendMessageFromPort>
					osDelay(10);
 8007fd2:	200a      	movs	r0, #10
 8007fd4:	f005 f886 	bl	800d0e4 <osDelay>
					totalNumberOfParams -=numberOfParams;
 8007fd8:	886e      	ldrh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 8007fda:	882b      	ldrh	r3, [r5, #0]
					totalNumberOfParams -=numberOfParams;
 8007fdc:	3e2e      	subs	r6, #46	; 0x2e
 8007fde:	b2b6      	uxth	r6, r6
					ptrShift +=numberOfParams;
 8007fe0:	332e      	adds	r3, #46	; 0x2e
					totalNumberOfParams -=numberOfParams;
 8007fe2:	806e      	strh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 8007fe4:	802b      	strh	r3, [r5, #0]
			while(totalNumberOfParams != 0){
 8007fe6:	2e00      	cmp	r6, #0
 8007fe8:	d000      	beq.n	8007fec <SendMessageFromPort.part.0+0x34c>
 8007fea:	e6b1      	b.n	8007d50 <SendMessageFromPort.part.0+0xb0>
 8007fec:	2500      	movs	r5, #0
 8007fee:	362e      	adds	r6, #46	; 0x2e
 8007ff0:	e6c5      	b.n	8007d7e <SendMessageFromPort.part.0+0xde>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007ff2:	4653      	mov	r3, sl
 8007ff4:	1dd8      	adds	r0, r3, #7
 8007ff6:	4b0b      	ldr	r3, [pc, #44]	; (8008024 <SendMessageFromPort.part.0+0x384>)
			length =numberOfParams + shift + 4;
 8007ff8:	1d35      	adds	r5, r6, #4
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007ffa:	8819      	ldrh	r1, [r3, #0]
 8007ffc:	4b0a      	ldr	r3, [pc, #40]	; (8008028 <SendMessageFromPort.part.0+0x388>)
 8007ffe:	1820      	adds	r0, r4, r0
 8008000:	18c9      	adds	r1, r1, r3
 8008002:	0032      	movs	r2, r6
			length =numberOfParams + shift + 4;
 8008004:	4455      	add	r5, sl
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8008006:	f00a face 	bl	80125a6 <memcpy>
			length =numberOfParams + shift + 4;
 800800a:	b2ed      	uxtb	r5, r5
 800800c:	e6b7      	b.n	8007d7e <SendMessageFromPort.part.0+0xde>
				for(uint16_t i =1; i <= N; i++)						// N modules
 800800e:	0031      	movs	r1, r6
 8008010:	2000      	movs	r0, #0
			uint8_t groupMembers =0;
 8008012:	2200      	movs	r2, #0
 8008014:	e6e3      	b.n	8007dde <SendMessageFromPort.part.0+0x13e>
 8008016:	46c0      	nop			; (mov r8, r8)
 8008018:	20000c68 	.word	0x20000c68
 800801c:	20000aa8 	.word	0x20000aa8
 8008020:	200067f4 	.word	0x200067f4
 8008024:	20001db4 	.word	0x20001db4
 8008028:	20000b4c 	.word	0x20000b4c
 800802c:	20001120 	.word	0x20001120
 8008030:	20000058 	.word	0x20000058
 8008034:	20000010 	.word	0x20000010
 8008038:	20000aac 	.word	0x20000aac
 800803c:	20000c58 	.word	0x20000c58
 8008040:	20000c60 	.word	0x20000c60
 8008044:	20000ca0 	.word	0x20000ca0
 8008048:	20000c6b 	.word	0x20000c6b
 800804c:	200018ac 	.word	0x200018ac
 8008050:	2000114c 	.word	0x2000114c
 8008054:	2000114d 	.word	0x2000114d
 8008058:	20000c4c 	.word	0x20000c4c
 800805c:	20000b7c 	.word	0x20000b7c

08008060 <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 8008060:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8008062:	b500      	push	{lr}
	AddBcastPayload = false;
 8008064:	4b0b      	ldr	r3, [pc, #44]	; (8008094 <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8008066:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8008068:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800806a:	4b0b      	ldr	r3, [pc, #44]	; (8008098 <BroadcastReceivedMessage+0x38>)
 800806c:	b289      	uxth	r1, r1
 800806e:	7018      	strb	r0, [r3, #0]
 8008070:	9100      	str	r1, [sp, #0]
 8008072:	2300      	movs	r3, #0
	if(dstGroup == BOS_BROADCAST)
 8008074:	28ff      	cmp	r0, #255	; 0xff
 8008076:	d007      	beq.n	8008088 <BroadcastReceivedMessage+0x28>
 8008078:	22fe      	movs	r2, #254	; 0xfe
 800807a:	2100      	movs	r1, #0
 800807c:	2000      	movs	r0, #0
 800807e:	f7ff fe0f 	bl	8007ca0 <SendMessageFromPort.part.0>
}
 8008082:	2000      	movs	r0, #0
 8008084:	b003      	add	sp, #12
 8008086:	bd00      	pop	{pc}
 8008088:	32ff      	adds	r2, #255	; 0xff
 800808a:	2100      	movs	r1, #0
 800808c:	2000      	movs	r0, #0
 800808e:	f7ff fe07 	bl	8007ca0 <SendMessageFromPort.part.0>
 8008092:	e7f6      	b.n	8008082 <BroadcastReceivedMessage+0x22>
 8008094:	20001120 	.word	0x20001120
 8008098:	20000058 	.word	0x20000058

0800809c <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 800809c:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 800809e:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80080a0:	001c      	movs	r4, r3
	AddBcastPayload = true;
 80080a2:	4b0e      	ldr	r3, [pc, #56]	; (80080dc <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80080a4:	b083      	sub	sp, #12
	AddBcastPayload = true;
 80080a6:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 80080a8:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <BroadcastMessage+0x44>)
 80080aa:	7019      	strb	r1, [r3, #0]
 80080ac:	9400      	str	r4, [sp, #0]
 80080ae:	0013      	movs	r3, r2
	if(dstGroup == BOS_BROADCAST)
 80080b0:	29ff      	cmp	r1, #255	; 0xff
 80080b2:	d00c      	beq.n	80080ce <BroadcastMessage+0x32>
 80080b4:	0001      	movs	r1, r0
 80080b6:	22fe      	movs	r2, #254	; 0xfe
 80080b8:	2000      	movs	r0, #0
 80080ba:	f7ff fdf1 	bl	8007ca0 <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 80080be:	0022      	movs	r2, r4
 80080c0:	2100      	movs	r1, #0
 80080c2:	4808      	ldr	r0, [pc, #32]	; (80080e4 <BroadcastMessage+0x48>)
 80080c4:	f00a fa78 	bl	80125b8 <memset>
}
 80080c8:	2000      	movs	r0, #0
 80080ca:	b003      	add	sp, #12
 80080cc:	bd30      	pop	{r4, r5, pc}
 80080ce:	0001      	movs	r1, r0
 80080d0:	22ff      	movs	r2, #255	; 0xff
 80080d2:	2000      	movs	r0, #0
 80080d4:	f7ff fde4 	bl	8007ca0 <SendMessageFromPort.part.0>
 80080d8:	e7f1      	b.n	80080be <BroadcastMessage+0x22>
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	20001120 	.word	0x20001120
 80080e0:	20000058 	.word	0x20000058
 80080e4:	20000b4c 	.word	0x20000b4c

080080e8 <ForwardReceivedMessage>:
	AddBcastPayload = false;
 80080e8:	2200      	movs	r2, #0
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80080ea:	b530      	push	{r4, r5, lr}
 80080ec:	0005      	movs	r5, r0
	AddBcastPayload = false;
 80080ee:	4b0b      	ldr	r3, [pc, #44]	; (800811c <ForwardReceivedMessage+0x34>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80080f0:	b083      	sub	sp, #12
	AddBcastPayload = false;
 80080f2:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 80080f4:	1e42      	subs	r2, r0, #1
 80080f6:	00d3      	lsls	r3, r2, #3
 80080f8:	1a9b      	subs	r3, r3, r2
 80080fa:	4a09      	ldr	r2, [pc, #36]	; (8008120 <ForwardReceivedMessage+0x38>)
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	5c9c      	ldrb	r4, [r3, r2]
		port =FindRoute(myID,dst);
 8008100:	4b08      	ldr	r3, [pc, #32]	; (8008124 <ForwardReceivedMessage+0x3c>)
 8008102:	0021      	movs	r1, r4
 8008104:	7818      	ldrb	r0, [r3, #0]
 8008106:	f7fb fcfd 	bl	8003b04 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 800810a:	9500      	str	r5, [sp, #0]
 800810c:	2300      	movs	r3, #0
 800810e:	0022      	movs	r2, r4
 8008110:	2100      	movs	r1, #0
 8008112:	f7ff fda9 	bl	8007c68 <SendMessageFromPort>
}
 8008116:	2000      	movs	r0, #0
 8008118:	b003      	add	sp, #12
 800811a:	bd30      	pop	{r4, r5, pc}
 800811c:	20001120 	.word	0x20001120
 8008120:	20000ca0 	.word	0x20000ca0
 8008124:	20000aa8 	.word	0x20000aa8

08008128 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8008128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800812a:	4d0f      	ldr	r5, [pc, #60]	; (8008168 <SendMessageToModule+0x40>)
 800812c:	0004      	movs	r4, r0
 800812e:	b083      	sub	sp, #12
 8008130:	000f      	movs	r7, r1
 8008132:	0016      	movs	r6, r2
 8008134:	7828      	ldrb	r0, [r5, #0]
	if(dst != BOS_BROADCAST){
 8008136:	2cff      	cmp	r4, #255	; 0xff
 8008138:	d010      	beq.n	800815c <SendMessageToModule+0x34>
				port =FindRoute(myID,dst);
 800813a:	0021      	movs	r1, r4
 800813c:	f7fb fce2 	bl	8003b04 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8008140:	7829      	ldrb	r1, [r5, #0]
 8008142:	0022      	movs	r2, r4
 8008144:	9600      	str	r6, [sp, #0]
 8008146:	003b      	movs	r3, r7
 8008148:	f7ff fd8e 	bl	8007c68 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 800814c:	0032      	movs	r2, r6
 800814e:	2100      	movs	r1, #0
 8008150:	4806      	ldr	r0, [pc, #24]	; (800816c <SendMessageToModule+0x44>)
 8008152:	f00a fa31 	bl	80125b8 <memset>
}
 8008156:	2000      	movs	r0, #0
 8008158:	b003      	add	sp, #12
 800815a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 800815c:	0013      	movs	r3, r2
 800815e:	000a      	movs	r2, r1
 8008160:	21ff      	movs	r1, #255	; 0xff
 8008162:	f7ff ff9b 	bl	800809c <BroadcastMessage>
 8008166:	e7f6      	b.n	8008156 <SendMessageToModule+0x2e>
 8008168:	20000aa8 	.word	0x20000aa8
 800816c:	20000b4c 	.word	0x20000b4c

08008170 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8008170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008172:	4657      	mov	r7, sl
 8008174:	46de      	mov	lr, fp
 8008176:	464e      	mov	r6, r9
 8008178:	4645      	mov	r5, r8
 800817a:	b5e0      	push	{r5, r6, r7, lr}
 800817c:	b08f      	sub	sp, #60	; 0x3c
 800817e:	001e      	movs	r6, r3
 8008180:	ab18      	add	r3, sp, #96	; 0x60
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	4693      	mov	fp, r2
 8008186:	469a      	mov	sl, r3
 8008188:	ab1b      	add	r3, sp, #108	; 0x6c
 800818a:	781a      	ldrb	r2, [r3, #0]
 800818c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800818e:	000f      	movs	r7, r1
 8008190:	0e19      	lsrs	r1, r3, #24
 8008192:	0c1b      	lsrs	r3, r3, #16
 8008194:	b2dc      	uxtb	r4, r3
 8008196:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008198:	4684      	mov	ip, r0
 800819a:	0a1b      	lsrs	r3, r3, #8
 800819c:	b2dd      	uxtb	r5, r3
 800819e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081a0:	900d      	str	r0, [sp, #52]	; 0x34
 80081a2:	0e1b      	lsrs	r3, r3, #24
 80081a4:	0018      	movs	r0, r3
 80081a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80081a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081aa:	9206      	str	r2, [sp, #24]
 80081ac:	0c1b      	lsrs	r3, r3, #16
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	9307      	str	r3, [sp, #28]
 80081b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081b4:	9109      	str	r1, [sp, #36]	; 0x24
 80081b6:	0a1b      	lsrs	r3, r3, #8
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 80081bc:	4b47      	ldr	r3, [pc, #284]	; (80082dc <StartScastDMAStream+0x16c>)
 80081be:	940a      	str	r4, [sp, #40]	; 0x28
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	950c      	str	r5, [sp, #48]	; 0x30
 80081c4:	42bb      	cmp	r3, r7
 80081c6:	d16d      	bne.n	80082a4 <StartScastDMAStream+0x134>
 80081c8:	231a      	movs	r3, #26
 80081ca:	4698      	mov	r8, r3
 80081cc:	4d44      	ldr	r5, [pc, #272]	; (80082e0 <StartScastDMAStream+0x170>)
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80081ce:	4c45      	ldr	r4, [pc, #276]	; (80082e4 <StartScastDMAStream+0x174>)
 80081d0:	44a8      	add	r8, r5
		FindRoute(srcM,dstM);
 80081d2:	0031      	movs	r1, r6
 80081d4:	0038      	movs	r0, r7
 80081d6:	f7fb fc95 	bl	8003b04 <FindRoute>
		if(route[i]){
 80081da:	7868      	ldrb	r0, [r5, #1]
 80081dc:	2800      	cmp	r0, #0
 80081de:	d035      	beq.n	800824c <StartScastDMAStream+0xdc>
			if(route[i + 1]){
 80081e0:	78a9      	ldrb	r1, [r5, #2]
 80081e2:	2900      	cmp	r1, #0
 80081e4:	d100      	bne.n	80081e8 <StartScastDMAStream+0x78>
				temp1 =FindRoute(route[i],srcM);
 80081e6:	0039      	movs	r1, r7
 80081e8:	f7fb fc8c 	bl	8003b04 <FindRoute>
			FindRoute(srcM,dstM);
 80081ec:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 80081ee:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 80081f0:	0038      	movs	r0, r7
 80081f2:	f7fb fc87 	bl	8003b04 <FindRoute>
			if(route[i] == dstM){
 80081f6:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 80081f8:	465b      	mov	r3, fp
			if(route[i] == dstM){
 80081fa:	42b0      	cmp	r0, r6
 80081fc:	d003      	beq.n	8008206 <StartScastDMAStream+0x96>
				temp2 =FindRoute(route[i],route[i - 1]);
 80081fe:	7829      	ldrb	r1, [r5, #0]
 8008200:	f7fb fc80 	bl	8003b04 <FindRoute>
 8008204:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008206:	9a09      	ldr	r2, [sp, #36]	; 0x24
			messageParams[5] =(uint8_t )(timeout >> 16);
			messageParams[6] =(uint8_t )(timeout >> 8);
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 8008208:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800820a:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 800820c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			messageParams[11] =stored; /* EEPROM storage */
 800820e:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 8008210:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8008212:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			FindRoute(srcM,dstM);
 8008214:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 8008216:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8008218:	9a19      	ldr	r2, [sp, #100]	; 0x64
			FindRoute(srcM,dstM);
 800821a:	0038      	movs	r0, r7
			messageParams[3] =(uint8_t )count;
 800821c:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 800821e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			messageParams[11] =stored; /* EEPROM storage */
 8008220:	72e3      	strb	r3, [r4, #11]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008222:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8008224:	9a07      	ldr	r2, [sp, #28]
 8008226:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8008228:	9a08      	ldr	r2, [sp, #32]
 800822a:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 800822c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800822e:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8008230:	4652      	mov	r2, sl
 8008232:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8008234:	464a      	mov	r2, r9
 8008236:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 8008238:	f7fb fc64 	bl	8003b04 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 800823c:	7868      	ldrb	r0, [r5, #1]
 800823e:	220c      	movs	r2, #12
 8008240:	211b      	movs	r1, #27
 8008242:	f7ff ff71 	bl	8008128 <SendMessageToModule>
			osDelay(10);
 8008246:	200a      	movs	r0, #10
 8008248:	f004 ff4c 	bl	800d0e4 <osDelay>
 800824c:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 800824e:	4545      	cmp	r5, r8
 8008250:	d1bf      	bne.n	80081d2 <StartScastDMAStream+0x62>
		}
	}
	
	if(srcM == dstM)
 8008252:	42b7      	cmp	r7, r6
 8008254:	d112      	bne.n	800827c <StartScastDMAStream+0x10c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8008256:	465b      	mov	r3, fp
 8008258:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800825e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008260:	4650      	mov	r0, sl
 8008262:	f7ff fc11 	bl	8007a88 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 8008266:	9b06      	ldr	r3, [sp, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10d      	bne.n	8008288 <StartScastDMAStream+0x118>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 800826c:	2000      	movs	r0, #0
 800826e:	b00f      	add	sp, #60	; 0x3c
 8008270:	bc3c      	pop	{r2, r3, r4, r5}
 8008272:	4690      	mov	r8, r2
 8008274:	4699      	mov	r9, r3
 8008276:	46a2      	mov	sl, r4
 8008278:	46ab      	mov	fp, r5
 800827a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 800827c:	0031      	movs	r1, r6
 800827e:	0038      	movs	r0, r7
 8008280:	f7fb fc40 	bl	8003b04 <FindRoute>
 8008284:	4683      	mov	fp, r0
 8008286:	e7e6      	b.n	8008256 <StartScastDMAStream+0xe6>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8008288:	2300      	movs	r3, #0
 800828a:	9304      	str	r3, [sp, #16]
 800828c:	9303      	str	r3, [sp, #12]
 800828e:	9302      	str	r3, [sp, #8]
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	465b      	mov	r3, fp
 8008294:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	9919      	ldr	r1, [sp, #100]	; 0x64
 800829a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800829c:	4650      	mov	r0, sl
 800829e:	f7fb f951 	bl	8003544 <SaveEEstreams>
 80082a2:	e7e3      	b.n	800826c <StartScastDMAStream+0xfc>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80082a4:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <StartScastDMAStream+0x174>)
 80082a6:	7019      	strb	r1, [r3, #0]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80082a8:	9907      	ldr	r1, [sp, #28]
		messageParams[1] =(uint8_t )(count >> 16);
 80082aa:	705c      	strb	r4, [r3, #1]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80082ac:	7159      	strb	r1, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 80082ae:	9908      	ldr	r1, [sp, #32]
		messageParams[3] =(uint8_t )count;
 80082b0:	9c19      	ldr	r4, [sp, #100]	; 0x64
		messageParams[6] =(uint8_t )(timeout >> 8);
 80082b2:	7199      	strb	r1, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 80082b4:	991a      	ldr	r1, [sp, #104]	; 0x68
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80082b6:	7118      	strb	r0, [r3, #4]
		messageParams[7] =(uint8_t )timeout;
 80082b8:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80082ba:	4651      	mov	r1, sl
 80082bc:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 80082be:	4661      	mov	r1, ip
 80082c0:	7259      	strb	r1, [r3, #9]
		messageParams[11] =dstP; /* destination port */
 80082c2:	4659      	mov	r1, fp
		messageParams[12] =stored; /* EEPROM storage */
 80082c4:	731a      	strb	r2, [r3, #12]
		messageParams[11] =dstP; /* destination port */
 80082c6:	72d9      	strb	r1, [r3, #11]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80082c8:	220d      	movs	r2, #13
 80082ca:	211c      	movs	r1, #28
 80082cc:	0038      	movs	r0, r7
		messageParams[2] =(uint8_t )(count >> 8);
 80082ce:	709d      	strb	r5, [r3, #2]
		messageParams[3] =(uint8_t )count;
 80082d0:	70dc      	strb	r4, [r3, #3]
		messageParams[10] =dstM; /* destination module */
 80082d2:	729e      	strb	r6, [r3, #10]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80082d4:	f7ff ff28 	bl	8008128 <SendMessageToModule>
		return result;
 80082d8:	e7c8      	b.n	800826c <StartScastDMAStream+0xfc>
 80082da:	46c0      	nop			; (mov r8, r8)
 80082dc:	20000aa8 	.word	0x20000aa8
 80082e0:	2000693b 	.word	0x2000693b
 80082e4:	20000b4c 	.word	0x20000b4c

080082e8 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 80082e8:	4b4e      	ldr	r3, [pc, #312]	; (8008424 <BackEndTask+0x13c>)
 80082ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ec:	4657      	mov	r7, sl
 80082ee:	46de      	mov	lr, fp
 80082f0:	464e      	mov	r6, r9
 80082f2:	4645      	mov	r5, r8
 80082f4:	4699      	mov	r9, r3
 80082f6:	4b4c      	ldr	r3, [pc, #304]	; (8008428 <BackEndTask+0x140>)
 80082f8:	b5e0      	push	{r5, r6, r7, lr}
 80082fa:	469b      	mov	fp, r3
 80082fc:	4b4b      	ldr	r3, [pc, #300]	; (800842c <BackEndTask+0x144>)
 80082fe:	4f4c      	ldr	r7, [pc, #304]	; (8008430 <BackEndTask+0x148>)
 8008300:	4698      	mov	r8, r3
 8008302:	4b4c      	ldr	r3, [pc, #304]	; (8008434 <BackEndTask+0x14c>)
 8008304:	b083      	sub	sp, #12
 8008306:	469a      	mov	sl, r3


	uint8_t calculated_crc,port_number,length,port_index;
	for(;;)
	{
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008308:	464b      	mov	r3, r9
 800830a:	4a4b      	ldr	r2, [pc, #300]	; (8008438 <BackEndTask+0x150>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	7812      	ldrb	r2, [r2, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d054      	beq.n	80083be <BackEndTask+0xd6>
		{
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008314:	4a49      	ldr	r2, [pc, #292]	; (800843c <BackEndTask+0x154>)
			port_index = port_number - 1;
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008316:	2048      	movs	r0, #72	; 0x48
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008318:	5cd3      	ldrb	r3, [r2, r3]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 800831a:	255a      	movs	r5, #90	; 0x5a
			port_index = port_number - 1;
 800831c:	1e5c      	subs	r4, r3, #1
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 800831e:	9301      	str	r3, [sp, #4]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008320:	465b      	mov	r3, fp
			port_index = port_number - 1;
 8008322:	b2e4      	uxtb	r4, r4
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008324:	5d19      	ldrb	r1, [r3, r4]
 8008326:	00a6      	lsls	r6, r4, #2
 8008328:	00cb      	lsls	r3, r1, #3
 800832a:	1a59      	subs	r1, r3, r1
 800832c:	1933      	adds	r3, r6, r4
 800832e:	00da      	lsls	r2, r3, #3
 8008330:	1ad2      	subs	r2, r2, r3
 8008332:	00c9      	lsls	r1, r1, #3
 8008334:	00d2      	lsls	r2, r2, #3
 8008336:	188b      	adds	r3, r1, r2
 8008338:	54f8      	strb	r0, [r7, r3]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 800833a:	18f8      	adds	r0, r7, r3
 800833c:	7045      	strb	r5, [r0, #1]

			length = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 800833e:	7885      	ldrb	r5, [r0, #2]

			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 8008340:	4640      	mov	r0, r8
 8008342:	5cfb      	ldrb	r3, [r7, r3]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 8008344:	7085      	strb	r5, [r0, #2]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 8008346:	7003      	strb	r3, [r0, #0]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
 8008348:	235a      	movs	r3, #90	; 0x5a
 800834a:	7043      	strb	r3, [r0, #1]
			for(int i=0;i<length;i++)
 800834c:	2d00      	cmp	r5, #0
 800834e:	d00b      	beq.n	8008368 <BackEndTask+0x80>
 8008350:	1cd3      	adds	r3, r2, #3
 8008352:	4642      	mov	r2, r8
 8008354:	185b      	adds	r3, r3, r1
 8008356:	3203      	adds	r2, #3
 8008358:	18fb      	adds	r3, r7, r3
 800835a:	1950      	adds	r0, r2, r5
			{
				Calculate_CRC_Buffer[i+3] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][i + 3];
 800835c:	7819      	ldrb	r1, [r3, #0]
 800835e:	3301      	adds	r3, #1
 8008360:	7011      	strb	r1, [r2, #0]
 8008362:	3201      	adds	r2, #1
			for(int i=0;i<length;i++)
 8008364:	4282      	cmp	r2, r0
 8008366:	d1f9      	bne.n	800835c <BackEndTask+0x74>
			}

			calculated_crc = CalculateCRC8(Calculate_CRC_Buffer,
 8008368:	1ce9      	adds	r1, r5, #3
 800836a:	4640      	mov	r0, r8
 800836c:	f002 fbae 	bl	800aacc <CalculateCRC8>
				length + 3);


			Message_counter++;
 8008370:	4653      	mov	r3, sl
 8008372:	4652      	mov	r2, sl
 8008374:	881b      	ldrh	r3, [r3, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 8008376:	1936      	adds	r6, r6, r4
			Message_counter++;
 8008378:	3301      	adds	r3, #1
 800837a:	8013      	strh	r3, [r2, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 800837c:	465b      	mov	r3, fp
 800837e:	5d1b      	ldrb	r3, [r3, r4]
 8008380:	00f2      	lsls	r2, r6, #3
 8008382:	00d9      	lsls	r1, r3, #3
 8008384:	1b92      	subs	r2, r2, r6
 8008386:	1ac9      	subs	r1, r1, r3
 8008388:	00c9      	lsls	r1, r1, #3
 800838a:	00d2      	lsls	r2, r2, #3
 800838c:	188e      	adds	r6, r1, r2
 800838e:	19be      	adds	r6, r7, r6
 8008390:	1976      	adds	r6, r6, r5
 8008392:	78f6      	ldrb	r6, [r6, #3]
 8008394:	4286      	cmp	r6, r0
 8008396:	d01d      	beq.n	80083d4 <BackEndTask+0xec>


			}
			else
			{
				Rejected_Messages++;
 8008398:	4652      	mov	r2, sl
 800839a:	4651      	mov	r1, sl
 800839c:	8892      	ldrh	r2, [r2, #4]
 800839e:	3201      	adds	r2, #1
 80083a0:	808a      	strh	r2, [r1, #4]
				//TODO: Implement something here when the message is rejected.
			}

			MSG_Buffer_Index_Start[port_index]++;
 80083a2:	3301      	adds	r3, #1
 80083a4:	b2db      	uxtb	r3, r3
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80083a6:	2b05      	cmp	r3, #5
 80083a8:	d010      	beq.n	80083cc <BackEndTask+0xe4>
			MSG_Buffer_Index_Start[port_index]++;
 80083aa:	465a      	mov	r2, fp
 80083ac:	5513      	strb	r3, [r2, r4]

			Process_Message_Buffer_Index_Start++;
 80083ae:	464b      	mov	r3, r9
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	3301      	adds	r3, #1
 80083b4:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80083b6:	2b05      	cmp	r3, #5
 80083b8:	d004      	beq.n	80083c4 <BackEndTask+0xdc>
			Process_Message_Buffer_Index_Start++;
 80083ba:	464a      	mov	r2, r9
 80083bc:	7013      	strb	r3, [r2, #0]
		}

		taskYIELD();
 80083be:	f006 fbed 	bl	800eb9c <vPortYield>
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80083c2:	e7a1      	b.n	8008308 <BackEndTask+0x20>
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80083c4:	464b      	mov	r3, r9
 80083c6:	2200      	movs	r2, #0
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	e7f8      	b.n	80083be <BackEndTask+0xd6>
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80083cc:	465b      	mov	r3, fp
 80083ce:	2200      	movs	r2, #0
 80083d0:	551a      	strb	r2, [r3, r4]
 80083d2:	e7ec      	b.n	80083ae <BackEndTask+0xc6>
				Accepted_Messages++;
 80083d4:	4653      	mov	r3, sl
 80083d6:	4650      	mov	r0, sl
 80083d8:	885b      	ldrh	r3, [r3, #2]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80083da:	00e6      	lsls	r6, r4, #3
				Accepted_Messages++;
 80083dc:	3301      	adds	r3, #1
 80083de:	8043      	strh	r3, [r0, #2]
				messageLength[port_index] =length;
 80083e0:	4b17      	ldr	r3, [pc, #92]	; (8008440 <BackEndTask+0x158>)
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80083e2:	3203      	adds	r2, #3
				messageLength[port_index] =length;
 80083e4:	551d      	strb	r5, [r3, r4]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80083e6:	1b36      	subs	r6, r6, r4
 80083e8:	4b16      	ldr	r3, [pc, #88]	; (8008444 <BackEndTask+0x15c>)
 80083ea:	00f6      	lsls	r6, r6, #3
 80083ec:	1851      	adds	r1, r2, r1
 80083ee:	1998      	adds	r0, r3, r6
 80083f0:	002a      	movs	r2, r5
 80083f2:	1879      	adds	r1, r7, r1
 80083f4:	f00a f8d7 	bl	80125a6 <memcpy>
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 80083f8:	4b12      	ldr	r3, [pc, #72]	; (8008444 <BackEndTask+0x15c>)
 80083fa:	4a13      	ldr	r2, [pc, #76]	; (8008448 <BackEndTask+0x160>)
 80083fc:	5d9b      	ldrb	r3, [r3, r6]
 80083fe:	7812      	ldrb	r2, [r2, #0]
					NotifyMessagingTask(port_number);
 8008400:	9801      	ldr	r0, [sp, #4]
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 8008402:	429a      	cmp	r2, r3
 8008404:	d008      	beq.n	8008418 <BackEndTask+0x130>
 8008406:	3302      	adds	r3, #2
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b01      	cmp	r3, #1
 800840c:	d904      	bls.n	8008418 <BackEndTask+0x130>
					ForwardReceivedMessage(port_number);
 800840e:	f7ff fe6b 	bl	80080e8 <ForwardReceivedMessage>
 8008412:	465b      	mov	r3, fp
 8008414:	5d1b      	ldrb	r3, [r3, r4]
 8008416:	e7c4      	b.n	80083a2 <BackEndTask+0xba>
					NotifyMessagingTask(port_number);
 8008418:	f7ff fc02 	bl	8007c20 <NotifyMessagingTask>
 800841c:	465b      	mov	r3, fp
 800841e:	5d1b      	ldrb	r3, [r3, r4]
 8008420:	e7bf      	b.n	80083a2 <BackEndTask+0xba>
 8008422:	46c0      	nop			; (mov r8, r8)
 8008424:	20001150 	.word	0x20001150
 8008428:	200016dc 	.word	0x200016dc
 800842c:	2000695c 	.word	0x2000695c
 8008430:	2000115c 	.word	0x2000115c
 8008434:	20001dbc 	.word	0x20001dbc
 8008438:	2000114f 	.word	0x2000114f
 800843c:	20001154 	.word	0x20001154
 8008440:	20000c60 	.word	0x20000c60
 8008444:	20000ca0 	.word	0x20000ca0
 8008448:	20000aa8 	.word	0x20000aa8

0800844c <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 800844c:	2001      	movs	r0, #1
 800844e:	4770      	bx	lr

08008450 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8008450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008452:	464e      	mov	r6, r9
 8008454:	46de      	mov	lr, fp
 8008456:	4645      	mov	r5, r8
 8008458:	4657      	mov	r7, sl
 800845a:	b5e0      	push	{r5, r6, r7, lr}
	port =(int8_t )(unsigned )argument;
 800845c:	b2c3      	uxtb	r3, r0
void PxMessagingTask(void *argument){
 800845e:	b099      	sub	sp, #100	; 0x64
	port =(int8_t )(unsigned )argument;
 8008460:	930d      	str	r3, [sp, #52]	; 0x34
 8008462:	23ff      	movs	r3, #255	; 0xff
 8008464:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 8008466:	1e5c      	subs	r4, r3, #1
 8008468:	930a      	str	r3, [sp, #40]	; 0x28
 800846a:	00e3      	lsls	r3, r4, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800846c:	4ae3      	ldr	r2, [pc, #908]	; (80087fc <PxMessagingTask+0x3ac>)
 800846e:	9306      	str	r3, [sp, #24]
 8008470:	1b1b      	subs	r3, r3, r4
 8008472:	00db      	lsls	r3, r3, #3
 8008474:	4693      	mov	fp, r2
 8008476:	001a      	movs	r2, r3
 8008478:	445a      	add	r2, fp
 800847a:	9209      	str	r2, [sp, #36]	; 0x24
	HAL_StatusTypeDef status =HAL_OK;
 800847c:	2200      	movs	r2, #0
 800847e:	920f      	str	r2, [sp, #60]	; 0x3c
 8008480:	4adf      	ldr	r2, [pc, #892]	; (8008800 <PxMessagingTask+0x3b0>)
 8008482:	930e      	str	r3, [sp, #56]	; 0x38
 8008484:	4691      	mov	r9, r2
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	3305      	adds	r3, #5
 800848a:	9317      	str	r3, [sp, #92]	; 0x5c
 800848c:	4bdd      	ldr	r3, [pc, #884]	; (8008804 <PxMessagingTask+0x3b4>)
	BOS_Status result =BOS_OK;
 800848e:	2600      	movs	r6, #0
 8008490:	4698      	mov	r8, r3
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8008492:	2338      	movs	r3, #56	; 0x38
 8008494:	4363      	muls	r3, r4
 8008496:	9216      	str	r2, [sp, #88]	; 0x58
 8008498:	445b      	add	r3, fp
 800849a:	00a2      	lsls	r2, r4, #2
 800849c:	9210      	str	r2, [sp, #64]	; 0x40
 800849e:	9305      	str	r3, [sp, #20]
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80084a0:	2101      	movs	r1, #1
 80084a2:	2001      	movs	r0, #1
 80084a4:	4249      	negs	r1, r1
 80084a6:	f006 f8d5 	bl	800e654 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 80084aa:	464b      	mov	r3, r9
 80084ac:	5d1f      	ldrb	r7, [r3, r4]
 80084ae:	2f00      	cmp	r7, #0
 80084b0:	d100      	bne.n	80084b4 <PxMessagingTask+0x64>
 80084b2:	e085      	b.n	80085c0 <PxMessagingTask+0x170>
			if(cMessage[port - 1][2] >> 7){
 80084b4:	9b06      	ldr	r3, [sp, #24]
 80084b6:	1b1b      	subs	r3, r3, r4
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	445b      	add	r3, fp
 80084bc:	7899      	ldrb	r1, [r3, #2]
 80084be:	b24b      	sxtb	r3, r1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	da01      	bge.n	80084c8 <PxMessagingTask+0x78>
 80084c4:	f000 fcc7 	bl	8008e56 <PxMessagingTask+0xa06>
				longMessage =0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	4acf      	ldr	r2, [pc, #828]	; (8008808 <PxMessagingTask+0x3b8>)
 80084cc:	7013      	strb	r3, [r2, #0]
			dst =cMessage[port - 1][0];
 80084ce:	465a      	mov	r2, fp
 80084d0:	9b06      	ldr	r3, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 80084d2:	4fce      	ldr	r7, [pc, #824]	; (800880c <PxMessagingTask+0x3bc>)
			dst =cMessage[port - 1][0];
 80084d4:	1b1b      	subs	r3, r3, r4
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	5cd2      	ldrb	r2, [r2, r3]
			src =cMessage[port - 1][1];
 80084da:	445b      	add	r3, fp
			dst =cMessage[port - 1][0];
 80084dc:	9207      	str	r2, [sp, #28]
			src =cMessage[port - 1][1];
 80084de:	785a      	ldrb	r2, [r3, #1]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 80084e0:	0708      	lsls	r0, r1, #28
			src =cMessage[port - 1][1];
 80084e2:	4692      	mov	sl, r2
 80084e4:	2201      	movs	r2, #1
 80084e6:	0015      	movs	r5, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 80084e8:	0f80      	lsrs	r0, r0, #30
 80084ea:	7078      	strb	r0, [r7, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 80084ec:	0908      	lsrs	r0, r1, #4
 80084ee:	400d      	ands	r5, r1
 80084f0:	4002      	ands	r2, r0
 80084f2:	46ac      	mov	ip, r5
 80084f4:	b2d0      	uxtb	r0, r2
 80084f6:	70fa      	strb	r2, [r7, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 80084f8:	2260      	movs	r2, #96	; 0x60
 80084fa:	4463      	add	r3, ip
 80084fc:	400a      	ands	r2, r1
 80084fe:	950c      	str	r5, [sp, #48]	; 0x30
 8008500:	703a      	strb	r2, [r7, #0]
 8008502:	002a      	movs	r2, r5
 8008504:	78dd      	ldrb	r5, [r3, #3]
 8008506:	9508      	str	r5, [sp, #32]
			if(extendCode == true){
 8008508:	0789      	lsls	r1, r1, #30
 800850a:	d507      	bpl.n	800851c <PxMessagingTask+0xcc>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800850c:	46ac      	mov	ip, r5
 800850e:	791b      	ldrb	r3, [r3, #4]
				++shift;
 8008510:	3201      	adds	r2, #1
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008512:	021b      	lsls	r3, r3, #8
 8008514:	4463      	add	r3, ip
 8008516:	b29b      	uxth	r3, r3
 8008518:	9308      	str	r3, [sp, #32]
				++shift;
 800851a:	920c      	str	r2, [sp, #48]	; 0x30
			if(true == BOSMessaging.received_Acknowledgment){
 800851c:	2800      	cmp	r0, #0
 800851e:	d007      	beq.n	8008530 <PxMessagingTask+0xe0>
				BOSMessaging.Acknowledgment =false;
 8008520:	2300      	movs	r3, #0
 8008522:	4aba      	ldr	r2, [pc, #744]	; (800880c <PxMessagingTask+0x3bc>)
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008524:	212c      	movs	r1, #44	; 0x2c
				BOSMessaging.Acknowledgment =false;
 8008526:	7113      	strb	r3, [r2, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008528:	4650      	mov	r0, sl
 800852a:	2200      	movs	r2, #0
 800852c:	f7ff fdfc 	bl	8008128 <SendMessageToModule>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008530:	9a07      	ldr	r2, [sp, #28]
 8008532:	1e53      	subs	r3, r2, #1
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2bfc      	cmp	r3, #252	; 0xfc
 8008538:	d801      	bhi.n	800853e <PxMessagingTask+0xee>
 800853a:	f000 fc71 	bl	8008e20 <PxMessagingTask+0x9d0>
 800853e:	464b      	mov	r3, r9
 8008540:	5d1f      	ldrb	r7, [r3, r4]
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008542:	9b07      	ldr	r3, [sp, #28]
 8008544:	2bff      	cmp	r3, #255	; 0xff
 8008546:	d001      	beq.n	800854c <PxMessagingTask+0xfc>
 8008548:	f000 fcb5 	bl	8008eb6 <PxMessagingTask+0xa66>
 800854c:	9b06      	ldr	r3, [sp, #24]
 800854e:	4ab0      	ldr	r2, [pc, #704]	; (8008810 <PxMessagingTask+0x3c0>)
 8008550:	1b1d      	subs	r5, r3, r4
 8008552:	00ed      	lsls	r5, r5, #3
 8008554:	445d      	add	r5, fp
 8008556:	19eb      	adds	r3, r5, r7
 8008558:	3b01      	subs	r3, #1
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	7992      	ldrb	r2, [r2, #6]
					result =BOS_ERR_MSG_Reflection;
 800855e:	2603      	movs	r6, #3
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008560:	429a      	cmp	r2, r3
 8008562:	d02d      	beq.n	80085c0 <PxMessagingTask+0x170>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008564:	4aaa      	ldr	r2, [pc, #680]	; (8008810 <PxMessagingTask+0x3c0>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008566:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008568:	7193      	strb	r3, [r2, #6]
 800856a:	4aaa      	ldr	r2, [pc, #680]	; (8008814 <PxMessagingTask+0x3c4>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800856c:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800856e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008570:	f7ff fd76 	bl	8008060 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008574:	464b      	mov	r3, r9
 8008576:	5d1f      	ldrb	r7, [r3, r4]
 8008578:	2300      	movs	r3, #0
 800857a:	19ed      	adds	r5, r5, r7
 800857c:	3d01      	subs	r5, #1
 800857e:	702b      	strb	r3, [r5, #0]
				shift +=4;
 8008580:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008582:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 8008584:	1b7a      	subs	r2, r7, r5
 8008586:	b2d3      	uxtb	r3, r2
 8008588:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 800858a:	9b08      	ldr	r3, [sp, #32]
 800858c:	2b2d      	cmp	r3, #45	; 0x2d
 800858e:	d901      	bls.n	8008594 <PxMessagingTask+0x144>
 8008590:	f000 fc79 	bl	8008e86 <PxMessagingTask+0xa36>
 8008594:	4aa0      	ldr	r2, [pc, #640]	; (8008818 <PxMessagingTask+0x3c8>)
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	58d3      	ldr	r3, [r2, r3]
 800859a:	469f      	mov	pc, r3
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800859c:	9b06      	ldr	r3, [sp, #24]
 800859e:	1b1b      	subs	r3, r3, r4
 80085a0:	00db      	lsls	r3, r3, #3
 80085a2:	445b      	add	r3, fp
 80085a4:	5d5b      	ldrb	r3, [r3, r5]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <PxMessagingTask+0x15e>
 80085aa:	f000 fd6d 	bl	8009088 <PxMessagingTask+0xc38>
								myID =cMessage[port - 1][1 + shift];
 80085ae:	9b05      	ldr	r3, [sp, #20]
 80085b0:	4a9a      	ldr	r2, [pc, #616]	; (800881c <PxMessagingTask+0x3cc>)
 80085b2:	469c      	mov	ip, r3
 80085b4:	4465      	add	r5, ip
 80085b6:	786b      	ldrb	r3, [r5, #1]
 80085b8:	7013      	strb	r3, [r2, #0]
 80085ba:	464b      	mov	r3, r9
 80085bc:	2600      	movs	r6, #0
 80085be:	5d1f      	ldrb	r7, [r3, r4]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80085c0:	003a      	movs	r2, r7
 80085c2:	2100      	movs	r1, #0
 80085c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085c6:	f009 fff7 	bl	80125b8 <memset>
		messageLength[port - 1] =0;
 80085ca:	464b      	mov	r3, r9
 80085cc:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 80085ce:	990a      	ldr	r1, [sp, #40]	; 0x28
		messageLength[port - 1] =0;
 80085d0:	551a      	strb	r2, [r3, r4]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 80085d2:	4b93      	ldr	r3, [pc, #588]	; (8008820 <PxMessagingTask+0x3d0>)
 80085d4:	5c5b      	ldrb	r3, [r3, r1]
 80085d6:	3b02      	subs	r3, #2
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d901      	bls.n	80085e0 <PxMessagingTask+0x190>
			portStatus[port] =FREE;
 80085dc:	4b90      	ldr	r3, [pc, #576]	; (8008820 <PxMessagingTask+0x3d0>)
 80085de:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 80085e0:	f006 fadc 	bl	800eb9c <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80085e4:	e75c      	b.n	80084a0 <PxMessagingTask+0x50>
 80085e6:	2308      	movs	r3, #8
 80085e8:	469a      	mov	sl, r3
 80085ea:	3301      	adds	r3, #1
 80085ec:	469c      	mov	ip, r3
 80085ee:	44ac      	add	ip, r5
 80085f0:	4663      	mov	r3, ip
 80085f2:	9308      	str	r3, [sp, #32]
 80085f4:	230a      	movs	r3, #10
 80085f6:	469c      	mov	ip, r3
 80085f8:	44ac      	add	ip, r5
 80085fa:	4663      	mov	r3, ip
 80085fc:	930c      	str	r3, [sp, #48]	; 0x30
 80085fe:	230b      	movs	r3, #11
 8008600:	469c      	mov	ip, r3
 8008602:	44ac      	add	ip, r5
 8008604:	4663      	mov	r3, ip
 8008606:	9307      	str	r3, [sp, #28]
 8008608:	230c      	movs	r3, #12
 800860a:	469c      	mov	ip, r3
 800860c:	9b06      	ldr	r3, [sp, #24]
 800860e:	1da8      	adds	r0, r5, #6
 8008610:	1b1b      	subs	r3, r3, r4
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	445b      	add	r3, fp
 8008616:	195a      	adds	r2, r3, r5
							switch(cMessage[port - 1][0 + shift]){
 8008618:	5d5b      	ldrb	r3, [r3, r5]
 800861a:	1def      	adds	r7, r5, #7
 800861c:	44aa      	add	sl, r5
 800861e:	44ac      	add	ip, r5
 8008620:	7852      	ldrb	r2, [r2, #1]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d101      	bne.n	800862a <PxMessagingTask+0x1da>
 8008626:	f000 fd01 	bl	800902c <PxMessagingTask+0xbdc>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <PxMessagingTask+0x1e2>
 800862e:	f000 fccf 	bl	8008fd0 <PxMessagingTask+0xb80>
 8008632:	2b02      	cmp	r3, #2
 8008634:	d10c      	bne.n	8008650 <PxMessagingTask+0x200>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8008636:	9b05      	ldr	r3, [sp, #20]
 8008638:	1959      	adds	r1, r3, r5
 800863a:	788b      	ldrb	r3, [r1, #2]
 800863c:	78c8      	ldrb	r0, [r1, #3]
 800863e:	021b      	lsls	r3, r3, #8
 8008640:	0400      	lsls	r0, r0, #16
 8008642:	181b      	adds	r3, r3, r0
 8008644:	189a      	adds	r2, r3, r2
 8008646:	790b      	ldrb	r3, [r1, #4]
 8008648:	061b      	lsls	r3, r3, #24
 800864a:	18d2      	adds	r2, r2, r3
 800864c:	4b75      	ldr	r3, [pc, #468]	; (8008824 <PxMessagingTask+0x3d4>)
 800864e:	625a      	str	r2, [r3, #36]	; 0x24
							ADCPort =cMessage[port - 1][shift];
 8008650:	9b06      	ldr	r3, [sp, #24]
 8008652:	4a74      	ldr	r2, [pc, #464]	; (8008824 <PxMessagingTask+0x3d4>)
 8008654:	1b1b      	subs	r3, r3, r4
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	445b      	add	r3, fp
 800865a:	5d58      	ldrb	r0, [r3, r5]
							ADCSide =cMessage[port - 1][shift + 1];
 800865c:	195b      	adds	r3, r3, r5
 800865e:	785b      	ldrb	r3, [r3, #1]
							ADCPort =cMessage[port - 1][shift];
 8008660:	8610      	strh	r0, [r2, #48]	; 0x30
							ADCSide =cMessage[port - 1][shift + 1];
 8008662:	8653      	strh	r3, [r2, #50]	; 0x32
							if(0 == ADCSide){
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <PxMessagingTask+0x21c>
 8008668:	f000 fc7e 	bl	8008f68 <PxMessagingTask+0xb18>
							else if(1 == ADCSide){
 800866c:	2b01      	cmp	r3, #1
 800866e:	d10a      	bne.n	8008686 <PxMessagingTask+0x236>
								ADCSelectChannel(ADCPort,"bottom");
 8008670:	496d      	ldr	r1, [pc, #436]	; (8008828 <PxMessagingTask+0x3d8>)
 8008672:	f003 fac7 	bl	800bc04 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 8008676:	4b6b      	ldr	r3, [pc, #428]	; (8008824 <PxMessagingTask+0x3d4>)
 8008678:	4a6a      	ldr	r2, [pc, #424]	; (8008824 <PxMessagingTask+0x3d4>)
 800867a:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800867c:	3234      	adds	r2, #52	; 0x34
 800867e:	b2c0      	uxtb	r0, r0
 8008680:	4969      	ldr	r1, [pc, #420]	; (8008828 <PxMessagingTask+0x3d8>)
 8008682:	f003 fb0f 	bl	800bca4 <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 8008686:	4967      	ldr	r1, [pc, #412]	; (8008824 <PxMessagingTask+0x3d4>)
 8008688:	4866      	ldr	r0, [pc, #408]	; (8008824 <PxMessagingTask+0x3d4>)
 800868a:	3138      	adds	r1, #56	; 0x38
 800868c:	303c      	adds	r0, #60	; 0x3c
 800868e:	f003 f8f3 	bl	800b878 <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 8008692:	9b06      	ldr	r3, [sp, #24]
 8008694:	1b1e      	subs	r6, r3, r4
 8008696:	4b63      	ldr	r3, [pc, #396]	; (8008824 <PxMessagingTask+0x3d4>)
 8008698:	00f6      	lsls	r6, r6, #3
							GetReadPrecentage(ADCPort,&ADCPercentage);
 800869a:	0019      	movs	r1, r3
							ADCPort =cMessage[port - 1][shift];
 800869c:	445e      	add	r6, fp
 800869e:	5d70      	ldrb	r0, [r6, r5]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80086a0:	3140      	adds	r1, #64	; 0x40
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80086a2:	1975      	adds	r5, r6, r5
							ADCPort =cMessage[port - 1][shift];
 80086a4:	8618      	strh	r0, [r3, #48]	; 0x30
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80086a6:	f003 f9ad 	bl	800ba04 <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80086aa:	79ab      	ldrb	r3, [r5, #6]
 80086ac:	79ea      	ldrb	r2, [r5, #7]
 80086ae:	021b      	lsls	r3, r3, #8
 80086b0:	0412      	lsls	r2, r2, #16
 80086b2:	189b      	adds	r3, r3, r2
 80086b4:	796a      	ldrb	r2, [r5, #5]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80086b6:	2600      	movs	r6, #0
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80086b8:	189b      	adds	r3, r3, r2
 80086ba:	7a2a      	ldrb	r2, [r5, #8]
 80086bc:	0612      	lsls	r2, r2, #24
 80086be:	189b      	adds	r3, r3, r2
 80086c0:	4a58      	ldr	r2, [pc, #352]	; (8008824 <PxMessagingTask+0x3d4>)
 80086c2:	6293      	str	r3, [r2, #40]	; 0x28
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80086c4:	7aab      	ldrb	r3, [r5, #10]
 80086c6:	7aea      	ldrb	r2, [r5, #11]
 80086c8:	021b      	lsls	r3, r3, #8
 80086ca:	0412      	lsls	r2, r2, #16
 80086cc:	189b      	adds	r3, r3, r2
 80086ce:	7a6a      	ldrb	r2, [r5, #9]
 80086d0:	189b      	adds	r3, r3, r2
 80086d2:	7b2a      	ldrb	r2, [r5, #12]
 80086d4:	0612      	lsls	r2, r2, #24
 80086d6:	189b      	adds	r3, r3, r2
 80086d8:	4a52      	ldr	r2, [pc, #328]	; (8008824 <PxMessagingTask+0x3d4>)
 80086da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086dc:	464b      	mov	r3, r9
 80086de:	5d1f      	ldrb	r7, [r3, r4]
 80086e0:	e76e      	b.n	80085c0 <PxMessagingTask+0x170>
							rejected_FLAG =1;
 80086e2:	2301      	movs	r3, #1
 80086e4:	4a51      	ldr	r2, [pc, #324]	; (800882c <PxMessagingTask+0x3dc>)
 80086e6:	7013      	strb	r3, [r2, #0]
 80086e8:	e767      	b.n	80085ba <PxMessagingTask+0x16a>
							ACK_FLAG =1;
 80086ea:	2301      	movs	r3, #1
 80086ec:	4a50      	ldr	r2, [pc, #320]	; (8008830 <PxMessagingTask+0x3e0>)
 80086ee:	2600      	movs	r6, #0
 80086f0:	7013      	strb	r3, [r2, #0]
 80086f2:	464b      	mov	r3, r9
 80086f4:	5d1f      	ldrb	r7, [r3, r4]
 80086f6:	e763      	b.n	80085c0 <PxMessagingTask+0x170>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 80086f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086fc:	469c      	mov	ip, r3
 80086fe:	9b06      	ldr	r3, [sp, #24]
 8008700:	1c69      	adds	r1, r5, #1
 8008702:	1b1b      	subs	r3, r3, r4
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	445b      	add	r3, fp
 8008708:	5d58      	ldrb	r0, [r3, r5]
 800870a:	230a      	movs	r3, #10
 800870c:	4461      	add	r1, ip
 800870e:	3a01      	subs	r2, #1
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	b292      	uxth	r2, r2
 8008714:	4459      	add	r1, fp
 8008716:	f004 fb4b 	bl	800cdb0 <writePxMutex>
 800871a:	464b      	mov	r3, r9
 800871c:	2600      	movs	r6, #0
 800871e:	5d1f      	ldrb	r7, [r3, r4]
 8008720:	e74e      	b.n	80085c0 <PxMessagingTask+0x170>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 8008722:	9b06      	ldr	r3, [sp, #24]
 8008724:	1b1b      	subs	r3, r3, r4
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	445b      	add	r3, fp
 800872a:	5d5b      	ldrb	r3, [r3, r5]
 800872c:	4a41      	ldr	r2, [pc, #260]	; (8008834 <PxMessagingTask+0x3e4>)
 800872e:	2600      	movs	r6, #0
 8008730:	7013      	strb	r3, [r2, #0]
 8008732:	464b      	mov	r3, r9
 8008734:	5d1f      	ldrb	r7, [r3, r4]
 8008736:	e743      	b.n	80085c0 <PxMessagingTask+0x170>
							responseStatus =BOS_OK; // Initialize response
 8008738:	2300      	movs	r3, #0
 800873a:	4a3e      	ldr	r2, [pc, #248]	; (8008834 <PxMessagingTask+0x3e4>)
 800873c:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	1b1b      	subs	r3, r3, r4
 8008742:	00db      	lsls	r3, r3, #3
 8008744:	445b      	add	r3, fp
 8008746:	5d5e      	ldrb	r6, [r3, r5]
 8008748:	2e00      	cmp	r6, #0
 800874a:	d101      	bne.n	8008750 <PxMessagingTask+0x300>
 800874c:	f000 ff54 	bl	80095f8 <PxMessagingTask+0x11a8>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 8008750:	2e1e      	cmp	r6, #30
 8008752:	d901      	bls.n	8008758 <PxMessagingTask+0x308>
 8008754:	f000 ff4c 	bl	80095f0 <PxMessagingTask+0x11a0>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8008758:	2280      	movs	r2, #128	; 0x80
									switch(cMessage[port - 1][1 + shift]) // requested format
 800875a:	9905      	ldr	r1, [sp, #20]
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800875c:	0592      	lsls	r2, r2, #22
 800875e:	4694      	mov	ip, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 8008760:	1c6a      	adds	r2, r5, #1
 8008762:	5c8f      	ldrb	r7, [r1, r2]
 8008764:	9207      	str	r2, [sp, #28]
 8008766:	220f      	movs	r2, #15
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8008768:	3e01      	subs	r6, #1
 800876a:	4b33      	ldr	r3, [pc, #204]	; (8008838 <PxMessagingTask+0x3e8>)
 800876c:	00b6      	lsls	r6, r6, #2
 800876e:	599b      	ldr	r3, [r3, r6]
 8008770:	0c18      	lsrs	r0, r3, #16
 8008772:	4013      	ands	r3, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 8008774:	1e7a      	subs	r2, r7, #1
 8008776:	b2d2      	uxtb	r2, r2
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8008778:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800877a:	2a07      	cmp	r2, #7
 800877c:	d901      	bls.n	8008782 <PxMessagingTask+0x332>
 800877e:	f000 fdbd 	bl	80092fc <PxMessagingTask+0xeac>
 8008782:	492e      	ldr	r1, [pc, #184]	; (800883c <PxMessagingTask+0x3ec>)
 8008784:	0092      	lsls	r2, r2, #2
 8008786:	588a      	ldr	r2, [r1, r2]
 8008788:	4697      	mov	pc, r2
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800878a:	2202      	movs	r2, #2
 800878c:	4252      	negs	r2, r2
 800878e:	17d3      	asrs	r3, r2, #31
 8008790:	4641      	mov	r1, r8
 8008792:	6808      	ldr	r0, [r1, #0]
 8008794:	6849      	ldr	r1, [r1, #4]
 8008796:	1812      	adds	r2, r2, r0
 8008798:	414b      	adcs	r3, r1
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <PxMessagingTask+0x352>
 800879e:	f000 fcb7 	bl	8009110 <PxMessagingTask+0xcc0>
 80087a2:	464b      	mov	r3, r9
 80087a4:	5d1f      	ldrb	r7, [r3, r4]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 80087a6:	4b23      	ldr	r3, [pc, #140]	; (8008834 <PxMessagingTask+0x3e4>)
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	2b10      	cmp	r3, #16
 80087ac:	d101      	bne.n	80087b2 <PxMessagingTask+0x362>
 80087ae:	f000 fcac 	bl	800910a <PxMessagingTask+0xcba>
								responseStatus =BOS_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	4a1f      	ldr	r2, [pc, #124]	; (8008834 <PxMessagingTask+0x3e4>)
 80087b6:	2600      	movs	r6, #0
 80087b8:	7013      	strb	r3, [r2, #0]
 80087ba:	e701      	b.n	80085c0 <PxMessagingTask+0x170>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 80087bc:	9b06      	ldr	r3, [sp, #24]
 80087be:	1b1b      	subs	r3, r3, r4
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	445b      	add	r3, fp
 80087c4:	5d5b      	ldrb	r3, [r3, r5]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <PxMessagingTask+0x37e>
 80087ca:	f000 fd6a 	bl	80092a2 <PxMessagingTask+0xe52>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 80087ce:	9b05      	ldr	r3, [sp, #20]
 80087d0:	469c      	mov	ip, r3
 80087d2:	4465      	add	r5, ip
 80087d4:	78ab      	ldrb	r3, [r5, #2]
 80087d6:	78ea      	ldrb	r2, [r5, #3]
 80087d8:	061b      	lsls	r3, r3, #24
 80087da:	0412      	lsls	r2, r2, #16
 80087dc:	189b      	adds	r3, r3, r2
 80087de:	796a      	ldrb	r2, [r5, #5]
 80087e0:	189b      	adds	r3, r3, r2
 80087e2:	792a      	ldrb	r2, [r5, #4]
 80087e4:	0212      	lsls	r2, r2, #8
 80087e6:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 80087e8:	786a      	ldrb	r2, [r5, #1]
 80087ea:	3a01      	subs	r2, #1
 80087ec:	b2d2      	uxtb	r2, r2
 80087ee:	2a07      	cmp	r2, #7
 80087f0:	d900      	bls.n	80087f4 <PxMessagingTask+0x3a4>
 80087f2:	e6e2      	b.n	80085ba <PxMessagingTask+0x16a>
 80087f4:	4912      	ldr	r1, [pc, #72]	; (8008840 <PxMessagingTask+0x3f0>)
 80087f6:	0092      	lsls	r2, r2, #2
 80087f8:	588a      	ldr	r2, [r1, r2]
 80087fa:	4697      	mov	pc, r2
 80087fc:	20000ca0 	.word	0x20000ca0
 8008800:	20000c60 	.word	0x20000c60
 8008804:	20000c50 	.word	0x20000c50
 8008808:	20000c5c 	.word	0x20000c5c
 800880c:	200067f4 	.word	0x200067f4
 8008810:	20001dbc 	.word	0x20001dbc
 8008814:	20000c58 	.word	0x20000c58
 8008818:	08017168 	.word	0x08017168
 800881c:	20000aa8 	.word	0x20000aa8
 8008820:	20000c3c 	.word	0x20000c3c
 8008824:	20001e3c 	.word	0x20001e3c
 8008828:	080180e8 	.word	0x080180e8
 800882c:	2000114c 	.word	0x2000114c
 8008830:	2000114d 	.word	0x2000114d
 8008834:	20000c4c 	.word	0x20000c4c
 8008838:	200067fc 	.word	0x200067fc
 800883c:	08017220 	.word	0x08017220
 8008840:	08017240 	.word	0x08017240
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008844:	9b06      	ldr	r3, [sp, #24]
 8008846:	49de      	ldr	r1, [pc, #888]	; (8008bc0 <PxMessagingTask+0x770>)
 8008848:	1b18      	subs	r0, r3, r4
 800884a:	00c0      	lsls	r0, r0, #3
 800884c:	7809      	ldrb	r1, [r1, #0]
 800884e:	4458      	add	r0, fp
 8008850:	1942      	adds	r2, r0, r5
 8008852:	468c      	mov	ip, r1
 8008854:	7a51      	ldrb	r1, [r2, #9]
 8008856:	7ad7      	ldrb	r7, [r2, #11]
 8008858:	468a      	mov	sl, r1
 800885a:	7b11      	ldrb	r1, [r2, #12]
 800885c:	7a93      	ldrb	r3, [r2, #10]
 800885e:	000e      	movs	r6, r1
 8008860:	1e71      	subs	r1, r6, #1
 8008862:	418e      	sbcs	r6, r1
 8008864:	9603      	str	r6, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008866:	7916      	ldrb	r6, [r2, #4]
 8008868:	7951      	ldrb	r1, [r2, #5]
 800886a:	0636      	lsls	r6, r6, #24
 800886c:	0409      	lsls	r1, r1, #16
 800886e:	1871      	adds	r1, r6, r1
 8008870:	79d6      	ldrb	r6, [r2, #7]
 8008872:	1989      	adds	r1, r1, r6
 8008874:	7996      	ldrb	r6, [r2, #6]
 8008876:	0236      	lsls	r6, r6, #8
 8008878:	1989      	adds	r1, r1, r6
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800887a:	9102      	str	r1, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800887c:	5d41      	ldrb	r1, [r0, r5]
 800887e:	78d0      	ldrb	r0, [r2, #3]
 8008880:	0609      	lsls	r1, r1, #24
 8008882:	1809      	adds	r1, r1, r0
 8008884:	7850      	ldrb	r0, [r2, #1]
 8008886:	0400      	lsls	r0, r0, #16
 8008888:	1809      	adds	r1, r1, r0
 800888a:	7890      	ldrb	r0, [r2, #2]
 800888c:	0200      	lsls	r0, r0, #8
 800888e:	1809      	adds	r1, r1, r0
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008890:	9101      	str	r1, [sp, #4]
 8008892:	7a12      	ldrb	r2, [r2, #8]
 8008894:	4661      	mov	r1, ip
 8008896:	9200      	str	r2, [sp, #0]
 8008898:	4650      	mov	r0, sl
 800889a:	003a      	movs	r2, r7
 800889c:	f7ff fc68 	bl	8008170 <StartScastDMAStream>
 80088a0:	e68b      	b.n	80085ba <PxMessagingTask+0x16a>
							SaveToRO();
 80088a2:	f001 f89b 	bl	80099dc <SaveToRO>
							SaveEEportsDir();
 80088a6:	f7fa fde1 	bl	800346c <SaveEEportsDir>
							indMode =IND_PING;
 80088aa:	2301      	movs	r3, #1
							indMode =IND_TOPOLOGY;
 80088ac:	4ac5      	ldr	r2, [pc, #788]	; (8008bc4 <PxMessagingTask+0x774>)
 80088ae:	2600      	movs	r6, #0
 80088b0:	7013      	strb	r3, [r2, #0]
 80088b2:	464b      	mov	r3, r9
 80088b4:	5d1f      	ldrb	r7, [r3, r4]
 80088b6:	e683      	b.n	80085c0 <PxMessagingTask+0x170>
							for(p =0; p < numOfParams; p++){
 80088b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d01d      	beq.n	80088fa <PxMessagingTask+0x4aa>
 80088be:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80088c0:	4659      	mov	r1, fp
 80088c2:	46b4      	mov	ip, r6
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 80088c4:	4652      	mov	r2, sl
 80088c6:	1970      	adds	r0, r6, r5
 80088c8:	2680      	movs	r6, #128	; 0x80
 80088ca:	3101      	adds	r1, #1
 80088cc:	4461      	add	r1, ip
 80088ce:	194d      	adds	r5, r1, r5
 80088d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088d2:	3a01      	subs	r2, #1
 80088d4:	4bbc      	ldr	r3, [pc, #752]	; (8008bc8 <PxMessagingTask+0x778>)
 80088d6:	0052      	lsls	r2, r2, #1
 80088d8:	3901      	subs	r1, #1
 80088da:	b2c9      	uxtb	r1, r1
 80088dc:	5a9b      	ldrh	r3, [r3, r2]
 80088de:	4458      	add	r0, fp
 80088e0:	186d      	adds	r5, r5, r1
 80088e2:	0236      	lsls	r6, r6, #8
 80088e4:	0037      	movs	r7, r6
 80088e6:	7801      	ldrb	r1, [r0, #0]
 80088e8:	3001      	adds	r0, #1
 80088ea:	3901      	subs	r1, #1
 80088ec:	410f      	asrs	r7, r1
 80088ee:	433b      	orrs	r3, r7
 80088f0:	b29b      	uxth	r3, r3
							for(p =0; p < numOfParams; p++){
 80088f2:	4285      	cmp	r5, r0
 80088f4:	d1f6      	bne.n	80088e4 <PxMessagingTask+0x494>
 80088f6:	49b4      	ldr	r1, [pc, #720]	; (8008bc8 <PxMessagingTask+0x778>)
 80088f8:	528b      	strh	r3, [r1, r2]
							responseStatus =BOS_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	e716      	b.n	800872c <PxMessagingTask+0x2dc>
							ReadPortsDirMSG(src);
 80088fe:	4650      	mov	r0, sl
 8008900:	f004 fb1a 	bl	800cf38 <ReadPortsDirMSG>
 8008904:	464b      	mov	r3, r9
 8008906:	2600      	movs	r6, #0
 8008908:	5d1f      	ldrb	r7, [r3, r4]
 800890a:	e659      	b.n	80085c0 <PxMessagingTask+0x170>
 800890c:	4baf      	ldr	r3, [pc, #700]	; (8008bcc <PxMessagingTask+0x77c>)
 800890e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008910:	881e      	ldrh	r6, [r3, #0]
 8008912:	4baf      	ldr	r3, [pc, #700]	; (8008bd0 <PxMessagingTask+0x780>)
 8008914:	4694      	mov	ip, r2
 8008916:	1998      	adds	r0, r3, r6
 8008918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800891a:	4466      	add	r6, ip
 800891c:	18e9      	adds	r1, r5, r3
 800891e:	464b      	mov	r3, r9
 8008920:	5d1f      	ldrb	r7, [r3, r4]
							if(longMessage){
 8008922:	4bac      	ldr	r3, [pc, #688]	; (8008bd4 <PxMessagingTask+0x784>)
 8008924:	b2b6      	uxth	r6, r6
 8008926:	781d      	ldrb	r5, [r3, #0]
 8008928:	4459      	add	r1, fp
 800892a:	2d00      	cmp	r5, #0
 800892c:	d101      	bne.n	8008932 <PxMessagingTask+0x4e2>
 800892e:	f000 fc69 	bl	8009204 <PxMessagingTask+0xdb4>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008932:	f009 fe38 	bl	80125a6 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008936:	4ba5      	ldr	r3, [pc, #660]	; (8008bcc <PxMessagingTask+0x77c>)
 8008938:	801e      	strh	r6, [r3, #0]
 800893a:	2600      	movs	r6, #0
 800893c:	e640      	b.n	80085c0 <PxMessagingTask+0x170>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800893e:	2601      	movs	r6, #1
 8008940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008942:	18ef      	adds	r7, r5, r3
 8008944:	445f      	add	r7, fp
								if(p != port)
 8008946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008948:	42b3      	cmp	r3, r6
 800894a:	d005      	beq.n	8008958 <PxMessagingTask+0x508>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800894c:	0030      	movs	r0, r6
 800894e:	f004 fa93 	bl	800ce78 <GetUart>
 8008952:	7839      	ldrb	r1, [r7, #0]
 8008954:	f004 fa9c 	bl	800ce90 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008958:	3601      	adds	r6, #1
 800895a:	b2f6      	uxtb	r6, r6
 800895c:	3701      	adds	r7, #1
 800895e:	2e06      	cmp	r6, #6
 8008960:	d1f1      	bne.n	8008946 <PxMessagingTask+0x4f6>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 8008962:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008964:	f004 fa88 	bl	800ce78 <GetUart>
 8008968:	9b06      	ldr	r3, [sp, #24]
 800896a:	2600      	movs	r6, #0
 800896c:	1b1b      	subs	r3, r3, r4
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	445b      	add	r3, fp
 8008972:	195d      	adds	r5, r3, r5
 8008974:	7aa9      	ldrb	r1, [r5, #10]
 8008976:	f004 fa8b 	bl	800ce90 <SwapUartPins>
 800897a:	464b      	mov	r3, r9
 800897c:	5d1f      	ldrb	r7, [r3, r4]
 800897e:	e61f      	b.n	80085c0 <PxMessagingTask+0x170>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008980:	9b06      	ldr	r3, [sp, #24]
 8008982:	1b1b      	subs	r3, r3, r4
 8008984:	00db      	lsls	r3, r3, #3
 8008986:	445b      	add	r3, fp
 8008988:	5d5f      	ldrb	r7, [r3, r5]
 800898a:	195b      	adds	r3, r3, r5
 800898c:	78da      	ldrb	r2, [r3, #3]
 800898e:	063f      	lsls	r7, r7, #24
 8008990:	18bf      	adds	r7, r7, r2
 8008992:	785a      	ldrb	r2, [r3, #1]
 8008994:	0412      	lsls	r2, r2, #16
 8008996:	18bf      	adds	r7, r7, r2
 8008998:	789a      	ldrb	r2, [r3, #2]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800899a:	791b      	ldrb	r3, [r3, #4]
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800899c:	0212      	lsls	r2, r2, #8
 800899e:	18bf      	adds	r7, r7, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 80089a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80089a2:	2bff      	cmp	r3, #255	; 0xff
 80089a4:	d101      	bne.n	80089aa <PxMessagingTask+0x55a>
 80089a6:	f000 fc4e 	bl	8009246 <PxMessagingTask+0xdf6>
								for(p =0; p < numOfParams; p++){
 80089aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	d101      	bne.n	80089b4 <PxMessagingTask+0x564>
 80089b0:	f000 fc42 	bl	8009238 <PxMessagingTask+0xde8>
 80089b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80089b8:	195e      	adds	r6, r3, r5
 80089ba:	465b      	mov	r3, fp
 80089bc:	468c      	mov	ip, r1
 80089be:	3305      	adds	r3, #5
 80089c0:	4463      	add	r3, ip
 80089c2:	195d      	adds	r5, r3, r5
 80089c4:	0013      	movs	r3, r2
 80089c6:	3b01      	subs	r3, #1
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	18ed      	adds	r5, r5, r3
									if(temp > 0 && temp <= NumOfPorts){
 80089cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ce:	445e      	add	r6, fp
 80089d0:	3b01      	subs	r3, #1
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	d90a      	bls.n	80089ee <PxMessagingTask+0x59e>
								for(p =0; p < numOfParams; p++){
 80089d8:	42b5      	cmp	r5, r6
 80089da:	d100      	bne.n	80089de <PxMessagingTask+0x58e>
 80089dc:	e5ed      	b.n	80085ba <PxMessagingTask+0x16a>
 80089de:	7833      	ldrb	r3, [r6, #0]
 80089e0:	3601      	adds	r6, #1
 80089e2:	930b      	str	r3, [sp, #44]	; 0x2c
									if(temp > 0 && temp <= NumOfPorts){
 80089e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089e6:	3b01      	subs	r3, #1
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b04      	cmp	r3, #4
 80089ec:	d8f4      	bhi.n	80089d8 <PxMessagingTask+0x588>
										UpdateBaudrate(temp,temp32);
 80089ee:	0039      	movs	r1, r7
 80089f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80089f2:	f004 fa2f 	bl	800ce54 <UpdateBaudrate>
 80089f6:	e7ef      	b.n	80089d8 <PxMessagingTask+0x588>
							temp =numOfParams / 5;
 80089f8:	2105      	movs	r1, #5
 80089fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80089fc:	f7f7 fba8 	bl	8000150 <__udivsi3>
 8008a00:	b2c2      	uxtb	r2, r0
 8008a02:	920b      	str	r2, [sp, #44]	; 0x2c
							for(uint8_t k =0; k < temp; k++){
 8008a04:	2a00      	cmp	r2, #0
 8008a06:	d100      	bne.n	8008a0a <PxMessagingTask+0x5ba>
 8008a08:	e777      	b.n	80088fa <PxMessagingTask+0x4aa>
 8008a0a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008a0c:	465b      	mov	r3, fp
 8008a0e:	468c      	mov	ip, r1
 8008a10:	3305      	adds	r3, #5
 8008a12:	4463      	add	r3, ip
 8008a14:	194e      	adds	r6, r1, r5
 8008a16:	195d      	adds	r5, r3, r5
 8008a18:	1e53      	subs	r3, r2, #1
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	009a      	lsls	r2, r3, #2
 8008a1e:	18d3      	adds	r3, r2, r3
 8008a20:	445e      	add	r6, fp
 8008a22:	18ed      	adds	r5, r5, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8008a24:	4b6c      	ldr	r3, [pc, #432]	; (8008bd8 <PxMessagingTask+0x788>)
 8008a26:	7830      	ldrb	r0, [r6, #0]
 8008a28:	469c      	mov	ip, r3
 8008a2a:	3801      	subs	r0, #1
 8008a2c:	0080      	lsls	r0, r0, #2
 8008a2e:	1c71      	adds	r1, r6, #1
 8008a30:	4460      	add	r0, ip
 8008a32:	2204      	movs	r2, #4
 8008a34:	3605      	adds	r6, #5
 8008a36:	f009 fdb6 	bl	80125a6 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 8008a3a:	42b5      	cmp	r5, r6
 8008a3c:	d1f2      	bne.n	8008a24 <PxMessagingTask+0x5d4>
							responseStatus =BOS_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	e674      	b.n	800872c <PxMessagingTask+0x2dc>
							ExploreNeighbors(port);
 8008a42:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008a44:	f7fa ff8a 	bl	800395c <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8008a48:	2302      	movs	r3, #2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008a4a:	2501      	movs	r5, #1
							temp =0;
 8008a4c:	2700      	movs	r7, #0
							indMode =IND_TOPOLOGY;
 8008a4e:	4a5d      	ldr	r2, [pc, #372]	; (8008bc4 <PxMessagingTask+0x774>)
							osDelay(10);
 8008a50:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 8008a52:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008a54:	f004 fb46 	bl	800d0e4 <osDelay>
 8008a58:	4e60      	ldr	r6, [pc, #384]	; (8008bdc <PxMessagingTask+0x78c>)
								if(neighbors[p - 1][0]){
 8008a5a:	8833      	ldrh	r3, [r6, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00a      	beq.n	8008a76 <PxMessagingTask+0x626>
									messageParams[temp] =p;
 8008a60:	4b5f      	ldr	r3, [pc, #380]	; (8008be0 <PxMessagingTask+0x790>)
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008a62:	1c78      	adds	r0, r7, #1
 8008a64:	469c      	mov	ip, r3
 8008a66:	2204      	movs	r2, #4
 8008a68:	4460      	add	r0, ip
 8008a6a:	0031      	movs	r1, r6
									messageParams[temp] =p;
 8008a6c:	55dd      	strb	r5, [r3, r7]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008a6e:	f009 fd9a 	bl	80125a6 <memcpy>
									temp +=5;
 8008a72:	3705      	adds	r7, #5
 8008a74:	b2ff      	uxtb	r7, r7
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008a76:	3501      	adds	r5, #1
 8008a78:	b2ed      	uxtb	r5, r5
 8008a7a:	3604      	adds	r6, #4
 8008a7c:	2d06      	cmp	r5, #6
 8008a7e:	d1ec      	bne.n	8008a5a <PxMessagingTask+0x60a>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8008a80:	210d      	movs	r1, #13
 8008a82:	970b      	str	r7, [sp, #44]	; 0x2c
 8008a84:	b2ba      	uxth	r2, r7
										SendMessageToModule(src,
 8008a86:	4650      	mov	r0, sl
 8008a88:	f7ff fb4e 	bl	8008128 <SendMessageToModule>
 8008a8c:	e595      	b.n	80085ba <PxMessagingTask+0x16a>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008a8e:	4651      	mov	r1, sl
 8008a90:	9b06      	ldr	r3, [sp, #24]
 8008a92:	0209      	lsls	r1, r1, #8
 8008a94:	1b1b      	subs	r3, r3, r4
 8008a96:	00db      	lsls	r3, r3, #3
 8008a98:	445b      	add	r3, fp
 8008a9a:	1958      	adds	r0, r3, r5
 8008a9c:	7882      	ldrb	r2, [r0, #2]
 8008a9e:	4e4f      	ldr	r6, [pc, #316]	; (8008bdc <PxMessagingTask+0x78c>)
 8008aa0:	1852      	adds	r2, r2, r1
 8008aa2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008aa4:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008aa6:	468c      	mov	ip, r1
 8008aa8:	0032      	movs	r2, r6
 8008aaa:	5d59      	ldrb	r1, [r3, r5]
 8008aac:	7843      	ldrb	r3, [r0, #1]
 8008aae:	0209      	lsls	r1, r1, #8
 8008ab0:	185b      	adds	r3, r3, r1
 8008ab2:	4462      	add	r2, ip
 8008ab4:	8053      	strh	r3, [r2, #2]
							responseStatus =BOS_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	e638      	b.n	800872c <PxMessagingTask+0x2dc>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008aba:	4651      	mov	r1, sl
 8008abc:	9b06      	ldr	r3, [sp, #24]
 8008abe:	0209      	lsls	r1, r1, #8
 8008ac0:	1b1b      	subs	r3, r3, r4
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	445b      	add	r3, fp
 8008ac6:	1958      	adds	r0, r3, r5
 8008ac8:	7882      	ldrb	r2, [r0, #2]
 8008aca:	4e44      	ldr	r6, [pc, #272]	; (8008bdc <PxMessagingTask+0x78c>)
 8008acc:	1852      	adds	r2, r2, r1
 8008ace:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008ad0:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008ad2:	468c      	mov	ip, r1
 8008ad4:	0032      	movs	r2, r6
 8008ad6:	5d59      	ldrb	r1, [r3, r5]
 8008ad8:	7843      	ldrb	r3, [r0, #1]
 8008ada:	0209      	lsls	r1, r1, #8
 8008adc:	4462      	add	r2, ip
 8008ade:	185b      	adds	r3, r3, r1
 8008ae0:	8053      	strh	r3, [r2, #2]
							messageParams[1] =(uint8_t )myPN;
 8008ae2:	4b40      	ldr	r3, [pc, #256]	; (8008be4 <PxMessagingTask+0x794>)
 8008ae4:	4a3e      	ldr	r2, [pc, #248]	; (8008be0 <PxMessagingTask+0x790>)
 8008ae6:	881b      	ldrh	r3, [r3, #0]
							messageParams[2] =port;
 8008ae8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
							messageParams[1] =(uint8_t )myPN;
 8008aea:	7053      	strb	r3, [r2, #1]
							osDelay(2);
 8008aec:	2002      	movs	r0, #2
							messageParams[0] =(uint8_t )(myPN >> 8);
 8008aee:	0a1b      	lsrs	r3, r3, #8
 8008af0:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8008af2:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 8008af4:	f004 faf6 	bl	800d0e4 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8008af8:	2303      	movs	r3, #3
 8008afa:	2200      	movs	r2, #0
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	2100      	movs	r1, #0
 8008b00:	3308      	adds	r3, #8
 8008b02:	0028      	movs	r0, r5
 8008b04:	f7ff f8b0 	bl	8007c68 <SendMessageFromPort>
 8008b08:	464b      	mov	r3, r9
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	5d1f      	ldrb	r7, [r3, r4]
 8008b0e:	e557      	b.n	80085c0 <PxMessagingTask+0x170>
							IND_toggle();
 8008b10:	2180      	movs	r1, #128	; 0x80
 8008b12:	2090      	movs	r0, #144	; 0x90
 8008b14:	0109      	lsls	r1, r1, #4
 8008b16:	05c0      	lsls	r0, r0, #23
 8008b18:	f007 fe54 	bl	80107c4 <HAL_GPIO_TogglePin>
 8008b1c:	464b      	mov	r3, r9
 8008b1e:	2600      	movs	r6, #0
 8008b20:	5d1f      	ldrb	r7, [r3, r4]
 8008b22:	e54d      	b.n	80085c0 <PxMessagingTask+0x170>
							IND_OFF();
 8008b24:	2200      	movs	r2, #0
 8008b26:	2180      	movs	r1, #128	; 0x80
 8008b28:	2090      	movs	r0, #144	; 0x90
 8008b2a:	0109      	lsls	r1, r1, #4
 8008b2c:	05c0      	lsls	r0, r0, #23
 8008b2e:	f007 fe43 	bl	80107b8 <HAL_GPIO_WritePin>
 8008b32:	e542      	b.n	80085ba <PxMessagingTask+0x16a>
							IND_ON();
 8008b34:	2201      	movs	r2, #1
 8008b36:	e7f6      	b.n	8008b26 <PxMessagingTask+0x6d6>
							if(!moduleAlias[myID][0])
 8008b38:	4b21      	ldr	r3, [pc, #132]	; (8008bc0 <PxMessagingTask+0x770>)
 8008b3a:	781a      	ldrb	r2, [r3, #0]
 8008b3c:	0093      	lsls	r3, r2, #2
 8008b3e:	189b      	adds	r3, r3, r2
 8008b40:	4a29      	ldr	r2, [pc, #164]	; (8008be8 <PxMessagingTask+0x798>)
 8008b42:	005b      	lsls	r3, r3, #1
 8008b44:	5cd3      	ldrb	r3, [r2, r3]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d000      	beq.n	8008b4c <PxMessagingTask+0x6fc>
 8008b4a:	e2d1      	b.n	80090f0 <PxMessagingTask+0xca0>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8008b4c:	4827      	ldr	r0, [pc, #156]	; (8008bec <PxMessagingTask+0x79c>)
 8008b4e:	4652      	mov	r2, sl
 8008b50:	3008      	adds	r0, #8
 8008b52:	4927      	ldr	r1, [pc, #156]	; (8008bf0 <PxMessagingTask+0x7a0>)
 8008b54:	f009 ff2a 	bl	80129ac <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8008b58:	4d24      	ldr	r5, [pc, #144]	; (8008bec <PxMessagingTask+0x79c>)
 8008b5a:	3508      	adds	r5, #8
 8008b5c:	0028      	movs	r0, r5
 8008b5e:	f7f7 fadb 	bl	8000118 <strlen>
 8008b62:	4b24      	ldr	r3, [pc, #144]	; (8008bf4 <PxMessagingTask+0x7a4>)
 8008b64:	b282      	uxth	r2, r0
 8008b66:	7818      	ldrb	r0, [r3, #0]
 8008b68:	2301      	movs	r3, #1
 8008b6a:	425b      	negs	r3, r3
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	0029      	movs	r1, r5
 8008b70:	3333      	adds	r3, #51	; 0x33
 8008b72:	f004 f91d 	bl	800cdb0 <writePxMutex>
							responseStatus =BOS_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	e5d8      	b.n	800872c <PxMessagingTask+0x2dc>
							indMode =IND_PING;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4a11      	ldr	r2, [pc, #68]	; (8008bc4 <PxMessagingTask+0x774>)
							osDelay(10);
 8008b7e:	200a      	movs	r0, #10
							indMode =IND_PING;
 8008b80:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008b82:	f004 faaf 	bl	800d0e4 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 8008b86:	2240      	movs	r2, #64	; 0x40
 8008b88:	4b1b      	ldr	r3, [pc, #108]	; (8008bf8 <PxMessagingTask+0x7a8>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	4393      	bics	r3, r2
 8008b8e:	2b20      	cmp	r3, #32
 8008b90:	d000      	beq.n	8008b94 <PxMessagingTask+0x744>
 8008b92:	e512      	b.n	80085ba <PxMessagingTask+0x16a>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8008b94:	2200      	movs	r2, #0
 8008b96:	2102      	movs	r1, #2
 8008b98:	e775      	b.n	8008a86 <PxMessagingTask+0x636>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008b9a:	4b18      	ldr	r3, [pc, #96]	; (8008bfc <PxMessagingTask+0x7ac>)
 8008b9c:	4a18      	ldr	r2, [pc, #96]	; (8008c00 <PxMessagingTask+0x7b0>)
							osDelay(10);
 8008b9e:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008ba0:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	4a07      	ldr	r2, [pc, #28]	; (8008bc4 <PxMessagingTask+0x774>)
 8008ba6:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008ba8:	f004 fa9c 	bl	800d0e4 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	4b14      	ldr	r3, [pc, #80]	; (8008c04 <PxMessagingTask+0x7b4>)
 8008bb2:	4a15      	ldr	r2, [pc, #84]	; (8008c08 <PxMessagingTask+0x7b8>)
 8008bb4:	60da      	str	r2, [r3, #12]
 8008bb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008bba:	46c0      	nop			; (mov r8, r8)
 8008bbc:	e7fd      	b.n	8008bba <PxMessagingTask+0x76a>
 8008bbe:	46c0      	nop			; (mov r8, r8)
 8008bc0:	20000aa8 	.word	0x20000aa8
 8008bc4:	2000114e 	.word	0x2000114e
 8008bc8:	20006d34 	.word	0x20006d34
 8008bcc:	20000c5a 	.word	0x20000c5a
 8008bd0:	20001e80 	.word	0x20001e80
 8008bd4:	20000c5c 	.word	0x20000c5c
 8008bd8:	20001124 	.word	0x20001124
 8008bdc:	20001138 	.word	0x20001138
 8008be0:	20000b4c 	.word	0x20000b4c
 8008be4:	20000038 	.word	0x20000038
 8008be8:	20000dd4 	.word	0x20000dd4
 8008bec:	20001dbc 	.word	0x20001dbc
 8008bf0:	08018bf0 	.word	0x08018bf0
 8008bf4:	20000c38 	.word	0x20000c38
 8008bf8:	200067f4 	.word	0x200067f4
 8008bfc:	20007ff0 	.word	0x20007ff0
 8008c00:	deadbeef 	.word	0xdeadbeef
 8008c04:	e000ed00 	.word	0xe000ed00
 8008c08:	05fa0004 	.word	0x05fa0004
							temp =cMessage[port - 1][11 + shift];
 8008c0c:	230b      	movs	r3, #11
 8008c0e:	469c      	mov	ip, r3
 8008c10:	44ac      	add	ip, r5
 8008c12:	4662      	mov	r2, ip
 8008c14:	9b06      	ldr	r3, [sp, #24]
 8008c16:	9207      	str	r2, [sp, #28]
 8008c18:	1b1b      	subs	r3, r3, r4
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	445b      	add	r3, fp
 8008c1e:	5c9b      	ldrb	r3, [r3, r2]
							if(numOfParams == 15)
 8008c20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c22:	2a0f      	cmp	r2, #15
 8008c24:	d100      	bne.n	8008c28 <PxMessagingTask+0x7d8>
 8008c26:	e318      	b.n	800925a <PxMessagingTask+0xe0a>
							if(numOfParams == 17)
 8008c28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
							temp =cMessage[port - 1][11 + shift];
 8008c2a:	0019      	movs	r1, r3
							if(numOfParams == 17)
 8008c2c:	2a11      	cmp	r2, #17
 8008c2e:	d100      	bne.n	8008c32 <PxMessagingTask+0x7e2>
 8008c30:	e317      	b.n	8009262 <PxMessagingTask+0xe12>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c32:	9f06      	ldr	r7, [sp, #24]
 8008c34:	1caa      	adds	r2, r5, #2
 8008c36:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c38:	1b3a      	subs	r2, r7, r4
 8008c3a:	00d2      	lsls	r2, r2, #3
 8008c3c:	445a      	add	r2, fp
 8008c3e:	1ce8      	adds	r0, r5, #3
 8008c40:	5d57      	ldrb	r7, [r2, r5]
 8008c42:	9011      	str	r0, [sp, #68]	; 0x44
 8008c44:	5c10      	ldrb	r0, [r2, r0]
 8008c46:	1c6e      	adds	r6, r5, #1
 8008c48:	063f      	lsls	r7, r7, #24
 8008c4a:	183f      	adds	r7, r7, r0
 8008c4c:	5d90      	ldrb	r0, [r2, r6]
 8008c4e:	9608      	str	r6, [sp, #32]
 8008c50:	0400      	lsls	r0, r0, #16
 8008c52:	183f      	adds	r7, r7, r0
 8008c54:	1ca8      	adds	r0, r5, #2
 8008c56:	5c10      	ldrb	r0, [r2, r0]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008c58:	1d6e      	adds	r6, r5, #5
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c5a:	0200      	lsls	r0, r0, #8
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008c5c:	9613      	str	r6, [sp, #76]	; 0x4c
 8008c5e:	1dae      	adds	r6, r5, #6
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c60:	183f      	adds	r7, r7, r0
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008c62:	9614      	str	r6, [sp, #80]	; 0x50
 8008c64:	1d28      	adds	r0, r5, #4
 8008c66:	1dee      	adds	r6, r5, #7
 8008c68:	9012      	str	r0, [sp, #72]	; 0x48
 8008c6a:	9615      	str	r6, [sp, #84]	; 0x54
 8008c6c:	5c16      	ldrb	r6, [r2, r0]
 8008c6e:	1d68      	adds	r0, r5, #5
 8008c70:	5c10      	ldrb	r0, [r2, r0]
 8008c72:	0636      	lsls	r6, r6, #24
 8008c74:	0400      	lsls	r0, r0, #16
 8008c76:	1836      	adds	r6, r6, r0
 8008c78:	1de8      	adds	r0, r5, #7
 8008c7a:	5c10      	ldrb	r0, [r2, r0]
 8008c7c:	1836      	adds	r6, r6, r0
 8008c7e:	1da8      	adds	r0, r5, #6
 8008c80:	5c10      	ldrb	r0, [r2, r0]
 8008c82:	0200      	lsls	r0, r0, #8
 8008c84:	1836      	adds	r6, r6, r0
 8008c86:	0028      	movs	r0, r5
 8008c88:	3009      	adds	r0, #9
							if(temp == false){
 8008c8a:	2900      	cmp	r1, #0
 8008c8c:	d000      	beq.n	8008c90 <PxMessagingTask+0x840>
 8008c8e:	e24f      	b.n	8009130 <PxMessagingTask+0xce0>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8008c90:	5c12      	ldrb	r2, [r2, r0]
 8008c92:	2a00      	cmp	r2, #0
 8008c94:	d00e      	beq.n	8008cb4 <PxMessagingTask+0x864>
 8008c96:	9905      	ldr	r1, [sp, #20]
 8008c98:	1948      	adds	r0, r1, r5
 8008c9a:	7a81      	ldrb	r1, [r0, #10]
 8008c9c:	2900      	cmp	r1, #0
 8008c9e:	d009      	beq.n	8008cb4 <PxMessagingTask+0x864>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8008ca0:	0013      	movs	r3, r2
 8008ca2:	7a00      	ldrb	r0, [r0, #8]
 8008ca4:	0032      	movs	r2, r6
 8008ca6:	9100      	str	r1, [sp, #0]
 8008ca8:	0039      	movs	r1, r7
 8008caa:	f7fe feed 	bl	8007a88 <SetupDMAStreams>
 8008cae:	9b05      	ldr	r3, [sp, #20]
 8008cb0:	9a07      	ldr	r2, [sp, #28]
 8008cb2:	5c9b      	ldrb	r3, [r3, r2]
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00a      	beq.n	8008cce <PxMessagingTask+0x87e>
 8008cb8:	9a05      	ldr	r2, [sp, #20]
 8008cba:	1951      	adds	r1, r2, r5
 8008cbc:	7b0a      	ldrb	r2, [r1, #12]
 8008cbe:	2a00      	cmp	r2, #0
 8008cc0:	d005      	beq.n	8008cce <PxMessagingTask+0x87e>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8008cc2:	7a08      	ldrb	r0, [r1, #8]
 8008cc4:	9200      	str	r2, [sp, #0]
 8008cc6:	0039      	movs	r1, r7
 8008cc8:	0032      	movs	r2, r6
 8008cca:	f7fe fedd 	bl	8007a88 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 8008cce:	9b06      	ldr	r3, [sp, #24]
 8008cd0:	1b1b      	subs	r3, r3, r4
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	445b      	add	r3, fp
 8008cd6:	195b      	adds	r3, r3, r5
 8008cd8:	7b5b      	ldrb	r3, [r3, #13]
 8008cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d100      	bne.n	8008ce2 <PxMessagingTask+0x892>
 8008ce0:	e46b      	b.n	80085ba <PxMessagingTask+0x16a>
 8008ce2:	9b05      	ldr	r3, [sp, #20]
 8008ce4:	469c      	mov	ip, r3
 8008ce6:	4465      	add	r5, ip
 8008ce8:	7bab      	ldrb	r3, [r5, #14]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d000      	beq.n	8008cf0 <PxMessagingTask+0x8a0>
 8008cee:	e29c      	b.n	800922a <PxMessagingTask+0xdda>
 8008cf0:	464a      	mov	r2, r9
 8008cf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cf4:	5d17      	ldrb	r7, [r2, r4]
 8008cf6:	001e      	movs	r6, r3
 8008cf8:	e462      	b.n	80085c0 <PxMessagingTask+0x170>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 8008cfa:	9b06      	ldr	r3, [sp, #24]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	1b1e      	subs	r6, r3, r4
 8008d00:	2300      	movs	r3, #0
 8008d02:	00f6      	lsls	r6, r6, #3
 8008d04:	445e      	add	r6, fp
 8008d06:	5d70      	ldrb	r0, [r6, r5]
 8008d08:	2100      	movs	r1, #0
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	3319      	adds	r3, #25
 8008d0e:	f7fe ffab 	bl	8007c68 <SendMessageFromPort>
							osDelay(100);
 8008d12:	2064      	movs	r0, #100	; 0x64
 8008d14:	f004 f9e6 	bl	800d0e4 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 8008d18:	4ae8      	ldr	r2, [pc, #928]	; (80090bc <PxMessagingTask+0xc6c>)
 8008d1a:	5d73      	ldrb	r3, [r6, r5]
 8008d1c:	7811      	ldrb	r1, [r2, #0]
 8008d1e:	4650      	mov	r0, sl
 8008d20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d22:	f000 ff7f 	bl	8009c24 <remoteBootloaderUpdate>
 8008d26:	464b      	mov	r3, r9
 8008d28:	2600      	movs	r6, #0
 8008d2a:	5d1f      	ldrb	r7, [r3, r4]
 8008d2c:	e448      	b.n	80085c0 <PxMessagingTask+0x170>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008d2e:	f004 fae1 	bl	800d2f4 <FreeRTOS_CLIGetOutputBuffer>
 8008d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d34:	0006      	movs	r6, r0
 8008d36:	18e9      	adds	r1, r5, r3
							if(dst == BOS_BROADCAST)
 8008d38:	9b07      	ldr	r3, [sp, #28]
 8008d3a:	4459      	add	r1, fp
 8008d3c:	2bff      	cmp	r3, #255	; 0xff
 8008d3e:	d100      	bne.n	8008d42 <PxMessagingTask+0x8f2>
 8008d40:	e13f      	b.n	8008fc2 <PxMessagingTask+0xb72>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008d42:	48df      	ldr	r0, [pc, #892]	; (80090c0 <PxMessagingTask+0xc70>)
							else if(dst == BOS_MULTICAST)
 8008d44:	9b07      	ldr	r3, [sp, #28]
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008d46:	3058      	adds	r0, #88	; 0x58
							else if(dst == BOS_MULTICAST)
 8008d48:	2bfe      	cmp	r3, #254	; 0xfe
 8008d4a:	d100      	bne.n	8008d4e <PxMessagingTask+0x8fe>
 8008d4c:	e132      	b.n	8008fb4 <PxMessagingTask+0xb64>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008d4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d50:	f009 fc29 	bl	80125a6 <memcpy>
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008d54:	4fda      	ldr	r7, [pc, #872]	; (80090c0 <PxMessagingTask+0xc70>)
 8008d56:	3758      	adds	r7, #88	; 0x58
 8008d58:	e001      	b.n	8008d5e <PxMessagingTask+0x90e>
							} while(xReturned != pdFALSE);
 8008d5a:	2d00      	cmp	r5, #0
 8008d5c:	d028      	beq.n	8008db0 <PxMessagingTask+0x960>
								PcPort =port;
 8008d5e:	4ad9      	ldr	r2, [pc, #868]	; (80090c4 <PxMessagingTask+0xc74>)
 8008d60:	990d      	ldr	r1, [sp, #52]	; 0x34
								temp =PcPort;
 8008d62:	4bd8      	ldr	r3, [pc, #864]	; (80090c4 <PxMessagingTask+0xc74>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008d64:	0038      	movs	r0, r7
								temp =PcPort;
 8008d66:	781b      	ldrb	r3, [r3, #0]
								PcPort =port;
 8008d68:	7011      	strb	r1, [r2, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008d6a:	2299      	movs	r2, #153	; 0x99
 8008d6c:	0031      	movs	r1, r6
 8008d6e:	0092      	lsls	r2, r2, #2
								temp =PcPort;
 8008d70:	930b      	str	r3, [sp, #44]	; 0x2c
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008d72:	f004 fa47 	bl	800d204 <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 8008d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d78:	4ad2      	ldr	r2, [pc, #840]	; (80090c4 <PxMessagingTask+0xc74>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008d7a:	0005      	movs	r5, r0
								PcPort =temp;
 8008d7c:	7013      	strb	r3, [r2, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8008d7e:	4bd2      	ldr	r3, [pc, #840]	; (80090c8 <PxMessagingTask+0xc78>)
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2b60      	cmp	r3, #96	; 0x60
 8008d84:	d1e9      	bne.n	8008d5a <PxMessagingTask+0x90a>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 8008d86:	0030      	movs	r0, r6
 8008d88:	f7f7 f9c6 	bl	8000118 <strlen>
 8008d8c:	0031      	movs	r1, r6
 8008d8e:	0002      	movs	r2, r0
 8008d90:	48ce      	ldr	r0, [pc, #824]	; (80090cc <PxMessagingTask+0xc7c>)
 8008d92:	f009 fc08 	bl	80125a6 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8008d96:	0030      	movs	r0, r6
 8008d98:	f7f7 f9be 	bl	8000118 <strlen>
 8008d9c:	2118      	movs	r1, #24
 8008d9e:	b282      	uxth	r2, r0
 8008da0:	4650      	mov	r0, sl
 8008da2:	f7ff f9c1 	bl	8008128 <SendMessageToModule>
									osDelay(10);
 8008da6:	200a      	movs	r0, #10
 8008da8:	f004 f99c 	bl	800d0e4 <osDelay>
							} while(xReturned != pdFALSE);
 8008dac:	2d00      	cmp	r5, #0
 8008dae:	d1d6      	bne.n	8008d5e <PxMessagingTask+0x90e>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 8008db0:	48c3      	ldr	r0, [pc, #780]	; (80090c0 <PxMessagingTask+0xc70>)
 8008db2:	2232      	movs	r2, #50	; 0x32
 8008db4:	3058      	adds	r0, #88	; 0x58
 8008db6:	2100      	movs	r1, #0
 8008db8:	f009 fbfe 	bl	80125b8 <memset>
 8008dbc:	464b      	mov	r3, r9
 8008dbe:	2600      	movs	r6, #0
 8008dc0:	5d1f      	ldrb	r7, [r3, r4]
 8008dc2:	f7ff fbfd 	bl	80085c0 <PxMessagingTask+0x170>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008dc6:	f004 fa95 	bl	800d2f4 <FreeRTOS_CLIGetOutputBuffer>
 8008dca:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8008dcc:	f7f7 f9a4 	bl	8000118 <strlen>
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	0002      	movs	r2, r0
 8008dd4:	0030      	movs	r0, r6
 8008dd6:	f009 fbef 	bl	80125b8 <memset>
 8008dda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ddc:	18e9      	adds	r1, r5, r3
							if(longMessage){
 8008dde:	4bbc      	ldr	r3, [pc, #752]	; (80090d0 <PxMessagingTask+0xc80>)
 8008de0:	4459      	add	r1, fp
 8008de2:	781f      	ldrb	r7, [r3, #0]
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008de4:	4bbb      	ldr	r3, [pc, #748]	; (80090d4 <PxMessagingTask+0xc84>)
 8008de6:	8818      	ldrh	r0, [r3, #0]
 8008de8:	1830      	adds	r0, r6, r0
							if(longMessage){
 8008dea:	2f00      	cmp	r7, #0
 8008dec:	d100      	bne.n	8008df0 <PxMessagingTask+0x9a0>
 8008dee:	e0ce      	b.n	8008f8e <PxMessagingTask+0xb3e>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008df0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
								longMessageLastPtr +=numOfParams;
 8008df2:	2600      	movs	r6, #0
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008df4:	002a      	movs	r2, r5
 8008df6:	f009 fbd6 	bl	80125a6 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008dfa:	46ac      	mov	ip, r5
 8008dfc:	4bb5      	ldr	r3, [pc, #724]	; (80090d4 <PxMessagingTask+0xc84>)
 8008dfe:	881a      	ldrh	r2, [r3, #0]
 8008e00:	4bb4      	ldr	r3, [pc, #720]	; (80090d4 <PxMessagingTask+0xc84>)
 8008e02:	4462      	add	r2, ip
 8008e04:	801a      	strh	r2, [r3, #0]
 8008e06:	464b      	mov	r3, r9
 8008e08:	5d1f      	ldrb	r7, [r3, r4]
 8008e0a:	f7ff fbd9 	bl	80085c0 <PxMessagingTask+0x170>
							ClearEEportsDir();
 8008e0e:	f7fa fc25 	bl	800365c <ClearEEportsDir>
							ClearROtopology();
 8008e12:	f000 fedb 	bl	8009bcc <ClearROtopology>
							osDelay(100);
 8008e16:	2064      	movs	r0, #100	; 0x64
 8008e18:	f004 f964 	bl	800d0e4 <osDelay>
							indMode =IND_TOPOLOGY;
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e545      	b.n	80088ac <PxMessagingTask+0x45c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008e20:	4ba6      	ldr	r3, [pc, #664]	; (80090bc <PxMessagingTask+0xc6c>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d01e      	beq.n	8008e66 <PxMessagingTask+0xa16>
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d019      	beq.n	8008e60 <PxMessagingTask+0xa10>
				ForwardReceivedMessage(port);
 8008e2c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008e2e:	f7ff f95b 	bl	80080e8 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 8008e32:	4ba5      	ldr	r3, [pc, #660]	; (80090c8 <PxMessagingTask+0xc78>)
 8008e34:	785b      	ldrb	r3, [r3, #1]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <PxMessagingTask+0x9f0>
					indMode =IND_SHORT_BLINK;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	4aa6      	ldr	r2, [pc, #664]	; (80090d8 <PxMessagingTask+0xc88>)
 8008e3e:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 8008e40:	9b08      	ldr	r3, [sp, #32]
 8008e42:	2b19      	cmp	r3, #25
 8008e44:	d07c      	beq.n	8008f40 <PxMessagingTask+0xaf0>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8008e46:	9b08      	ldr	r3, [sp, #32]
 8008e48:	2b1a      	cmp	r3, #26
 8008e4a:	d100      	bne.n	8008e4e <PxMessagingTask+0x9fe>
 8008e4c:	e082      	b.n	8008f54 <PxMessagingTask+0xb04>
 8008e4e:	464b      	mov	r3, r9
 8008e50:	5d1f      	ldrb	r7, [r3, r4]
 8008e52:	f7ff fbb5 	bl	80085c0 <PxMessagingTask+0x170>
				longMessage =1;
 8008e56:	2301      	movs	r3, #1
 8008e58:	4a9d      	ldr	r2, [pc, #628]	; (80090d0 <PxMessagingTask+0xc80>)
 8008e5a:	7013      	strb	r3, [r2, #0]
 8008e5c:	f7ff fb37 	bl	80084ce <PxMessagingTask+0x7e>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008e60:	9b08      	ldr	r3, [sp, #32]
 8008e62:	2b10      	cmp	r3, #16
 8008e64:	d1e2      	bne.n	8008e2c <PxMessagingTask+0x9dc>
 8008e66:	464b      	mov	r3, r9
 8008e68:	5d1f      	ldrb	r7, [r3, r4]
				if(result == BOS_OK){
 8008e6a:	2e00      	cmp	r6, #0
 8008e6c:	d001      	beq.n	8008e72 <PxMessagingTask+0xa22>
 8008e6e:	f7ff fba7 	bl	80085c0 <PxMessagingTask+0x170>
				shift +=4;
 8008e72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e74:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 8008e76:	1b7a      	subs	r2, r7, r5
 8008e78:	b2d3      	uxtb	r3, r2
 8008e7a:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 8008e7c:	9b08      	ldr	r3, [sp, #32]
 8008e7e:	2b2d      	cmp	r3, #45	; 0x2d
 8008e80:	d801      	bhi.n	8008e86 <PxMessagingTask+0xa36>
 8008e82:	f7ff fb87 	bl	8008594 <PxMessagingTask+0x144>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 8008e86:	9500      	str	r5, [sp, #0]
 8008e88:	9b07      	ldr	r3, [sp, #28]
 8008e8a:	4652      	mov	r2, sl
 8008e8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008e8e:	9808      	ldr	r0, [sp, #32]
 8008e90:	f7ff fadc 	bl	800844c <User_MessagingParser>
 8008e94:	0006      	movs	r6, r0
							if(result == BOS_ERR_UnknownMessage){
 8008e96:	2801      	cmp	r0, #1
 8008e98:	d1d9      	bne.n	8008e4e <PxMessagingTask+0x9fe>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8008e9a:	4652      	mov	r2, sl
 8008e9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008e9e:	9500      	str	r5, [sp, #0]
 8008ea0:	9b07      	ldr	r3, [sp, #28]
 8008ea2:	9808      	ldr	r0, [sp, #32]
 8008ea4:	f001 f840 	bl	8009f28 <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8008ea8:	2200      	movs	r2, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8008eaa:	0006      	movs	r6, r0
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8008eac:	2100      	movs	r1, #0
		if(result == BOS_ERR_UnknownMessage){
 8008eae:	2801      	cmp	r0, #1
 8008eb0:	d100      	bne.n	8008eb4 <PxMessagingTask+0xa64>
 8008eb2:	e5e8      	b.n	8008a86 <PxMessagingTask+0x636>
 8008eb4:	e7cb      	b.n	8008e4e <PxMessagingTask+0x9fe>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008eb6:	9b07      	ldr	r3, [sp, #28]
 8008eb8:	2bfe      	cmp	r3, #254	; 0xfe
 8008eba:	d1d6      	bne.n	8008e6a <PxMessagingTask+0xa1a>
 8008ebc:	9b06      	ldr	r3, [sp, #24]
 8008ebe:	4a80      	ldr	r2, [pc, #512]	; (80090c0 <PxMessagingTask+0xc70>)
 8008ec0:	1b1d      	subs	r5, r3, r4
 8008ec2:	00ed      	lsls	r5, r5, #3
 8008ec4:	445d      	add	r5, fp
 8008ec6:	19eb      	adds	r3, r5, r7
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	7992      	ldrb	r2, [r2, #6]
					result =BOS_ERR_MSG_Reflection;
 8008ece:	2603      	movs	r6, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d101      	bne.n	8008ed8 <PxMessagingTask+0xa88>
 8008ed4:	f7ff fb74 	bl	80085c0 <PxMessagingTask+0x170>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008ed8:	4a79      	ldr	r2, [pc, #484]	; (80090c0 <PxMessagingTask+0xc70>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008eda:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008edc:	7193      	strb	r3, [r2, #6]
 8008ede:	4a7f      	ldr	r2, [pc, #508]	; (80090dc <PxMessagingTask+0xc8c>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008ee0:	20fe      	movs	r0, #254	; 0xfe
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008ee2:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008ee4:	f7ff f8bc 	bl	8008060 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008ee8:	464b      	mov	r3, r9
 8008eea:	2200      	movs	r2, #0
 8008eec:	5d1f      	ldrb	r7, [r3, r4]
 8008eee:	19eb      	adds	r3, r5, r7
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	701a      	strb	r2, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8008ef4:	1eb8      	subs	r0, r7, #2
 8008ef6:	5c2e      	ldrb	r6, [r5, r0]
 8008ef8:	960b      	str	r6, [sp, #44]	; 0x2c
					for(i =0; i < temp; i++){
 8008efa:	2e00      	cmp	r6, #0
 8008efc:	d01d      	beq.n	8008f3a <PxMessagingTask+0xaea>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8008efe:	4b6f      	ldr	r3, [pc, #444]	; (80090bc <PxMessagingTask+0xc6c>)
 8008f00:	1b80      	subs	r0, r0, r6
 8008f02:	7819      	ldrb	r1, [r3, #0]
 8008f04:	5c2b      	ldrb	r3, [r5, r0]
 8008f06:	428b      	cmp	r3, r1
 8008f08:	d101      	bne.n	8008f0e <PxMessagingTask+0xabe>
 8008f0a:	f7ff fb39 	bl	8008580 <PxMessagingTask+0x130>
 8008f0e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008f10:	465a      	mov	r2, fp
 8008f12:	46ac      	mov	ip, r5
 8008f14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008f16:	3201      	adds	r2, #1
 8008f18:	1e75      	subs	r5, r6, #1
 8008f1a:	4462      	add	r2, ip
 8008f1c:	b2ed      	uxtb	r5, r5
 8008f1e:	181b      	adds	r3, r3, r0
 8008f20:	1952      	adds	r2, r2, r5
 8008f22:	445b      	add	r3, fp
 8008f24:	1812      	adds	r2, r2, r0
 8008f26:	e006      	b.n	8008f36 <PxMessagingTask+0xae6>
 8008f28:	3301      	adds	r3, #1
 8008f2a:	1e58      	subs	r0, r3, #1
 8008f2c:	7800      	ldrb	r0, [r0, #0]
 8008f2e:	4288      	cmp	r0, r1
 8008f30:	d101      	bne.n	8008f36 <PxMessagingTask+0xae6>
 8008f32:	f7ff fb25 	bl	8008580 <PxMessagingTask+0x130>
					for(i =0; i < temp; i++){
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d1f6      	bne.n	8008f28 <PxMessagingTask+0xad8>
					result =BOS_ERR_WrongID;
 8008f3a:	2666      	movs	r6, #102	; 0x66
 8008f3c:	f7ff fb40 	bl	80085c0 <PxMessagingTask+0x170>
					Delay_ms(100);
 8008f40:	2064      	movs	r0, #100	; 0x64
 8008f42:	f005 ff77 	bl	800ee34 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8008f46:	2300      	movs	r3, #0
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008f48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f4a:	9907      	ldr	r1, [sp, #28]
 8008f4c:	4650      	mov	r0, sl
 8008f4e:	f000 fe69 	bl	8009c24 <remoteBootloaderUpdate>
 8008f52:	e77c      	b.n	8008e4e <PxMessagingTask+0x9fe>
					Delay_ms(100);
 8008f54:	2064      	movs	r0, #100	; 0x64
 8008f56:	f005 ff6d 	bl	800ee34 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008f5a:	9b06      	ldr	r3, [sp, #24]
 8008f5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f5e:	1b1b      	subs	r3, r3, r4
 8008f60:	00db      	lsls	r3, r3, #3
 8008f62:	445b      	add	r3, fp
 8008f64:	5c9b      	ldrb	r3, [r3, r2]
 8008f66:	e7ef      	b.n	8008f48 <PxMessagingTask+0xaf8>
								ADCSelectChannel(ADCPort,"top");
 8008f68:	495d      	ldr	r1, [pc, #372]	; (80090e0 <PxMessagingTask+0xc90>)
 8008f6a:	f002 fe4b 	bl	800bc04 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 8008f6e:	4b5d      	ldr	r3, [pc, #372]	; (80090e4 <PxMessagingTask+0xc94>)
 8008f70:	4a5c      	ldr	r2, [pc, #368]	; (80090e4 <PxMessagingTask+0xc94>)
 8008f72:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 8008f74:	3234      	adds	r2, #52	; 0x34
 8008f76:	b2c0      	uxtb	r0, r0
 8008f78:	4959      	ldr	r1, [pc, #356]	; (80090e0 <PxMessagingTask+0xc90>)
 8008f7a:	f002 fe93 	bl	800bca4 <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 8008f7e:	4959      	ldr	r1, [pc, #356]	; (80090e4 <PxMessagingTask+0xc94>)
 8008f80:	4858      	ldr	r0, [pc, #352]	; (80090e4 <PxMessagingTask+0xc94>)
 8008f82:	3138      	adds	r1, #56	; 0x38
 8008f84:	303c      	adds	r0, #60	; 0x3c
 8008f86:	f002 fc77 	bl	800b878 <ReadTempAndVref>
 8008f8a:	f7ff fb82 	bl	8008692 <PxMessagingTask+0x242>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f90:	f009 fb09 	bl	80125a6 <memcpy>
								longMessageLastPtr =0;
 8008f94:	4b4f      	ldr	r3, [pc, #316]	; (80090d4 <PxMessagingTask+0xc84>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008f96:	4854      	ldr	r0, [pc, #336]	; (80090e8 <PxMessagingTask+0xc98>)
								longMessageLastPtr =0;
 8008f98:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 8008f9a:	4b54      	ldr	r3, [pc, #336]	; (80090ec <PxMessagingTask+0xc9c>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008f9c:	6800      	ldr	r0, [r0, #0]
								responseStatus =BOS_OK;
 8008f9e:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	001a      	movs	r2, r3
 8008fa4:	0019      	movs	r1, r3
 8008fa6:	f005 fb95 	bl	800e6d4 <xTaskGenericNotify>
 8008faa:	464b      	mov	r3, r9
 8008fac:	2600      	movs	r6, #0
 8008fae:	5d1f      	ldrb	r7, [r3, r4]
 8008fb0:	f7ff fb06 	bl	80085c0 <PxMessagingTask+0x170>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008fb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fb8:	1a9a      	subs	r2, r3, r2
 8008fba:	3a02      	subs	r2, #2
 8008fbc:	f009 faf3 	bl	80125a6 <memcpy>
 8008fc0:	e6c8      	b.n	8008d54 <PxMessagingTask+0x904>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 8008fc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fc4:	483e      	ldr	r0, [pc, #248]	; (80090c0 <PxMessagingTask+0xc70>)
 8008fc6:	3a01      	subs	r2, #1
 8008fc8:	3058      	adds	r0, #88	; 0x58
 8008fca:	f009 faec 	bl	80125a6 <memcpy>
 8008fce:	e6c1      	b.n	8008d54 <PxMessagingTask+0x904>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8008fd0:	9905      	ldr	r1, [sp, #20]
 8008fd2:	1949      	adds	r1, r1, r5
 8008fd4:	788b      	ldrb	r3, [r1, #2]
 8008fd6:	78ce      	ldrb	r6, [r1, #3]
 8008fd8:	021b      	lsls	r3, r3, #8
 8008fda:	0436      	lsls	r6, r6, #16
 8008fdc:	199b      	adds	r3, r3, r6
 8008fde:	189b      	adds	r3, r3, r2
 8008fe0:	790a      	ldrb	r2, [r1, #4]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8008fe2:	9905      	ldr	r1, [sp, #20]
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8008fe4:	0612      	lsls	r2, r2, #24
 8008fe6:	189b      	adds	r3, r3, r2
 8008fe8:	4a3e      	ldr	r2, [pc, #248]	; (80090e4 <PxMessagingTask+0xc94>)
 8008fea:	60d3      	str	r3, [r2, #12]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8008fec:	5c0b      	ldrb	r3, [r1, r0]
 8008fee:	5dca      	ldrb	r2, [r1, r7]
 8008ff0:	021b      	lsls	r3, r3, #8
 8008ff2:	0412      	lsls	r2, r2, #16
 8008ff4:	189b      	adds	r3, r3, r2
 8008ff6:	1d6a      	adds	r2, r5, #5
 8008ff8:	5c8a      	ldrb	r2, [r1, r2]
 8008ffa:	189b      	adds	r3, r3, r2
 8008ffc:	4652      	mov	r2, sl
 8008ffe:	5c8a      	ldrb	r2, [r1, r2]
 8009000:	0612      	lsls	r2, r2, #24
 8009002:	189b      	adds	r3, r3, r2
 8009004:	4a37      	ldr	r2, [pc, #220]	; (80090e4 <PxMessagingTask+0xc94>)
 8009006:	6113      	str	r3, [r2, #16]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800900a:	9a07      	ldr	r2, [sp, #28]
 800900c:	5ccb      	ldrb	r3, [r1, r3]
 800900e:	5c8a      	ldrb	r2, [r1, r2]
 8009010:	021b      	lsls	r3, r3, #8
 8009012:	0412      	lsls	r2, r2, #16
 8009014:	189b      	adds	r3, r3, r2
 8009016:	9a08      	ldr	r2, [sp, #32]
 8009018:	5c8a      	ldrb	r2, [r1, r2]
 800901a:	189b      	adds	r3, r3, r2
 800901c:	4662      	mov	r2, ip
 800901e:	5c8a      	ldrb	r2, [r1, r2]
 8009020:	0612      	lsls	r2, r2, #24
 8009022:	189b      	adds	r3, r3, r2
 8009024:	4a2f      	ldr	r2, [pc, #188]	; (80090e4 <PxMessagingTask+0xc94>)
 8009026:	6153      	str	r3, [r2, #20]
									break;
 8009028:	f7ff fb12 	bl	8008650 <PxMessagingTask+0x200>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800902c:	9905      	ldr	r1, [sp, #20]
 800902e:	1949      	adds	r1, r1, r5
 8009030:	788b      	ldrb	r3, [r1, #2]
 8009032:	78ce      	ldrb	r6, [r1, #3]
 8009034:	021b      	lsls	r3, r3, #8
 8009036:	0436      	lsls	r6, r6, #16
 8009038:	199b      	adds	r3, r3, r6
 800903a:	189b      	adds	r3, r3, r2
 800903c:	790a      	ldrb	r2, [r1, #4]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800903e:	9905      	ldr	r1, [sp, #20]
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009040:	0612      	lsls	r2, r2, #24
 8009042:	189b      	adds	r3, r3, r2
 8009044:	4a27      	ldr	r2, [pc, #156]	; (80090e4 <PxMessagingTask+0xc94>)
 8009046:	6193      	str	r3, [r2, #24]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009048:	5c0b      	ldrb	r3, [r1, r0]
 800904a:	5dca      	ldrb	r2, [r1, r7]
 800904c:	021b      	lsls	r3, r3, #8
 800904e:	0412      	lsls	r2, r2, #16
 8009050:	189b      	adds	r3, r3, r2
 8009052:	1d6a      	adds	r2, r5, #5
 8009054:	5c8a      	ldrb	r2, [r1, r2]
 8009056:	189b      	adds	r3, r3, r2
 8009058:	4652      	mov	r2, sl
 800905a:	5c8a      	ldrb	r2, [r1, r2]
 800905c:	0612      	lsls	r2, r2, #24
 800905e:	189b      	adds	r3, r3, r2
 8009060:	4a20      	ldr	r2, [pc, #128]	; (80090e4 <PxMessagingTask+0xc94>)
 8009062:	61d3      	str	r3, [r2, #28]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009066:	9a07      	ldr	r2, [sp, #28]
 8009068:	5ccb      	ldrb	r3, [r1, r3]
 800906a:	5c8a      	ldrb	r2, [r1, r2]
 800906c:	021b      	lsls	r3, r3, #8
 800906e:	0412      	lsls	r2, r2, #16
 8009070:	189b      	adds	r3, r3, r2
 8009072:	9a08      	ldr	r2, [sp, #32]
 8009074:	5c8a      	ldrb	r2, [r1, r2]
 8009076:	189b      	adds	r3, r3, r2
 8009078:	4662      	mov	r2, ip
 800907a:	5c8a      	ldrb	r2, [r1, r2]
 800907c:	0612      	lsls	r2, r2, #24
 800907e:	189b      	adds	r3, r3, r2
 8009080:	4a18      	ldr	r2, [pc, #96]	; (80090e4 <PxMessagingTask+0xc94>)
 8009082:	6213      	str	r3, [r2, #32]
									break;
 8009084:	f7ff fae4 	bl	8008650 <PxMessagingTask+0x200>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 8009088:	2b01      	cmp	r3, #1
 800908a:	d001      	beq.n	8009090 <PxMessagingTask+0xc40>
 800908c:	f7ff fa95 	bl	80085ba <PxMessagingTask+0x16a>
								messageParams[0] =0; /* change own ID */
 8009090:	2600      	movs	r6, #0
 8009092:	4b0e      	ldr	r3, [pc, #56]	; (80090cc <PxMessagingTask+0xc7c>)
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8009094:	4a0d      	ldr	r2, [pc, #52]	; (80090cc <PxMessagingTask+0xc7c>)
								messageParams[0] =0; /* change own ID */
 8009096:	701e      	strb	r6, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8009098:	9b05      	ldr	r3, [sp, #20]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800909a:	0031      	movs	r1, r6
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800909c:	469c      	mov	ip, r3
 800909e:	4465      	add	r5, ip
 80090a0:	786b      	ldrb	r3, [r5, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80090a2:	78a8      	ldrb	r0, [r5, #2]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80090a4:	7053      	strb	r3, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80090a6:	2303      	movs	r3, #3
 80090a8:	0032      	movs	r2, r6
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	330d      	adds	r3, #13
 80090ae:	f7fe fddb 	bl	8007c68 <SendMessageFromPort>
 80090b2:	464b      	mov	r3, r9
 80090b4:	5d1f      	ldrb	r7, [r3, r4]
 80090b6:	f7ff fa83 	bl	80085c0 <PxMessagingTask+0x170>
 80090ba:	46c0      	nop			; (mov r8, r8)
 80090bc:	20000aa8 	.word	0x20000aa8
 80090c0:	20001dbc 	.word	0x20001dbc
 80090c4:	20000c38 	.word	0x20000c38
 80090c8:	200067f4 	.word	0x200067f4
 80090cc:	20000b4c 	.word	0x20000b4c
 80090d0:	20000c5c 	.word	0x20000c5c
 80090d4:	20000c5a 	.word	0x20000c5a
 80090d8:	2000114e 	.word	0x2000114e
 80090dc:	20000c58 	.word	0x20000c58
 80090e0:	080180e4 	.word	0x080180e4
 80090e4:	20001e3c 	.word	0x20001e3c
 80090e8:	20001cb8 	.word	0x20001cb8
 80090ec:	20000c4c 	.word	0x20000c4c
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 80090f0:	4652      	mov	r2, sl
 80090f2:	230a      	movs	r3, #10
 80090f4:	4353      	muls	r3, r2
 80090f6:	4adf      	ldr	r2, [pc, #892]	; (8009474 <PxMessagingTask+0x1024>)
 80090f8:	48df      	ldr	r0, [pc, #892]	; (8009478 <PxMessagingTask+0x1028>)
 80090fa:	4694      	mov	ip, r2
 80090fc:	49df      	ldr	r1, [pc, #892]	; (800947c <PxMessagingTask+0x102c>)
 80090fe:	4463      	add	r3, ip
 8009100:	4652      	mov	r2, sl
 8009102:	3008      	adds	r0, #8
 8009104:	f009 fc52 	bl	80129ac <sprintf>
 8009108:	e526      	b.n	8008b58 <PxMessagingTask+0x708>
 800910a:	2600      	movs	r6, #0
 800910c:	f7ff fa58 	bl	80085c0 <PxMessagingTask+0x170>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009110:	2a01      	cmp	r2, #1
 8009112:	d901      	bls.n	8009118 <PxMessagingTask+0xcc8>
 8009114:	f7ff fb45 	bl	80087a2 <PxMessagingTask+0x352>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 8009118:	9b05      	ldr	r3, [sp, #20]
 800911a:	4ad9      	ldr	r2, [pc, #868]	; (8009480 <PxMessagingTask+0x1030>)
 800911c:	5d5b      	ldrb	r3, [r3, r5]
 800911e:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 8009120:	2b08      	cmp	r3, #8
 8009122:	d901      	bls.n	8009128 <PxMessagingTask+0xcd8>
 8009124:	f7ff fb3d 	bl	80087a2 <PxMessagingTask+0x352>
 8009128:	4ad6      	ldr	r2, [pc, #856]	; (8009484 <PxMessagingTask+0x1034>)
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	58d3      	ldr	r3, [r2, r3]
 800912e:	469f      	mov	pc, r3
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 8009130:	2338      	movs	r3, #56	; 0x38
 8009132:	46aa      	mov	sl, r5
 8009134:	435c      	muls	r4, r3
 8009136:	445c      	add	r4, fp
 8009138:	1965      	adds	r5, r4, r5
 800913a:	0007      	movs	r7, r0
 800913c:	7a29      	ldrb	r1, [r5, #8]
 800913e:	20e4      	movs	r0, #228	; 0xe4
 8009140:	f001 fd9c 	bl	800ac7c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 8009144:	4653      	mov	r3, sl
 8009146:	9a08      	ldr	r2, [sp, #32]
 8009148:	5ce3      	ldrb	r3, [r4, r3]
 800914a:	5ca1      	ldrb	r1, [r4, r2]
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	18c9      	adds	r1, r1, r3
 8009150:	b289      	uxth	r1, r1
 8009152:	20e5      	movs	r0, #229	; 0xe5
 8009154:	f001 fd92 	bl	800ac7c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 8009158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800915a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800915c:	5ce3      	ldrb	r3, [r4, r3]
 800915e:	5ca1      	ldrb	r1, [r4, r2]
 8009160:	021b      	lsls	r3, r3, #8
 8009162:	18c9      	adds	r1, r1, r3
 8009164:	b289      	uxth	r1, r1
 8009166:	20e6      	movs	r0, #230	; 0xe6
 8009168:	f001 fd88 	bl	800ac7c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800916c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800916e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009170:	5ce3      	ldrb	r3, [r4, r3]
 8009172:	5ca1      	ldrb	r1, [r4, r2]
 8009174:	021b      	lsls	r3, r3, #8
 8009176:	18c9      	adds	r1, r1, r3
 8009178:	b289      	uxth	r1, r1
 800917a:	20e7      	movs	r0, #231	; 0xe7
 800917c:	f001 fd7e 	bl	800ac7c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 8009180:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009182:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009184:	5ce3      	ldrb	r3, [r4, r3]
 8009186:	5ca1      	ldrb	r1, [r4, r2]
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	18c9      	adds	r1, r1, r3
 800918c:	b289      	uxth	r1, r1
 800918e:	20e8      	movs	r0, #232	; 0xe8
 8009190:	f001 fd74 	bl	800ac7c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 8009194:	5de3      	ldrb	r3, [r4, r7]
 8009196:	7aa9      	ldrb	r1, [r5, #10]
 8009198:	021b      	lsls	r3, r3, #8
 800919a:	18c9      	adds	r1, r1, r3
 800919c:	b289      	uxth	r1, r1
 800919e:	20e9      	movs	r0, #233	; 0xe9
 80091a0:	f001 fd6c 	bl	800ac7c <EE_WriteVariable>
								if(numOfParams == 19)
 80091a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091a6:	2b13      	cmp	r3, #19
 80091a8:	d013      	beq.n	80091d2 <PxMessagingTask+0xd82>
								if(numOfParams == 21)
 80091aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ac:	2b15      	cmp	r3, #21
 80091ae:	d107      	bne.n	80091c0 <PxMessagingTask+0xd70>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 80091b0:	7b6b      	ldrb	r3, [r5, #13]
 80091b2:	7ba9      	ldrb	r1, [r5, #14]
 80091b4:	021b      	lsls	r3, r3, #8
 80091b6:	18c9      	adds	r1, r1, r3
 80091b8:	b289      	uxth	r1, r1
 80091ba:	20eb      	movs	r0, #235	; 0xeb
 80091bc:	f001 fd5e 	bl	800ac7c <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	4bb0      	ldr	r3, [pc, #704]	; (8009488 <PxMessagingTask+0x1038>)
 80091c6:	4ab1      	ldr	r2, [pc, #708]	; (800948c <PxMessagingTask+0x103c>)
 80091c8:	60da      	str	r2, [r3, #12]
 80091ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80091ce:	46c0      	nop			; (mov r8, r8)
 80091d0:	e7fd      	b.n	80091ce <PxMessagingTask+0xd7e>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 80091d2:	9b07      	ldr	r3, [sp, #28]
 80091d4:	7b29      	ldrb	r1, [r5, #12]
 80091d6:	5ce3      	ldrb	r3, [r4, r3]
 80091d8:	20ea      	movs	r0, #234	; 0xea
 80091da:	021b      	lsls	r3, r3, #8
 80091dc:	18c9      	adds	r1, r1, r3
 80091de:	b289      	uxth	r1, r1
 80091e0:	f001 fd4c 	bl	800ac7c <EE_WriteVariable>
 80091e4:	e7ec      	b.n	80091c0 <PxMessagingTask+0xd70>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	49a9      	ldr	r1, [pc, #676]	; (8009490 <PxMessagingTask+0x1040>)
 80091ea:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	0a12      	lsrs	r2, r2, #8
 80091f0:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	0c12      	lsrs	r2, r2, #16
 80091f6:	708a      	strb	r2, [r1, #2]
										SendMessageToModule(src,
 80091f8:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	0e1b      	lsrs	r3, r3, #24
 80091fe:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 8009200:	211f      	movs	r1, #31
 8009202:	e440      	b.n	8008a86 <PxMessagingTask+0x636>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009204:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009206:	f009 f9ce 	bl	80125a6 <memcpy>
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800920a:	2116      	movs	r1, #22
 800920c:	0030      	movs	r0, r6
 800920e:	f7f6 ff9f 	bl	8000150 <__udivsi3>
 8009212:	4ba0      	ldr	r3, [pc, #640]	; (8009494 <PxMessagingTask+0x1044>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8009214:	0032      	movs	r2, r6
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8009216:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8009218:	499f      	ldr	r1, [pc, #636]	; (8009498 <PxMessagingTask+0x1048>)
 800921a:	48a0      	ldr	r0, [pc, #640]	; (800949c <PxMessagingTask+0x104c>)
 800921c:	f009 f9c3 	bl	80125a6 <memcpy>
								longMessageLastPtr =0;
 8009220:	4b9f      	ldr	r3, [pc, #636]	; (80094a0 <PxMessagingTask+0x1050>)
 8009222:	2600      	movs	r6, #0
 8009224:	801d      	strh	r5, [r3, #0]
 8009226:	f7ff f9cb 	bl	80085c0 <PxMessagingTask+0x170>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800922a:	7a28      	ldrb	r0, [r5, #8]
 800922c:	0032      	movs	r2, r6
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	0039      	movs	r1, r7
 8009232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009234:	f7fe fc28 	bl	8007a88 <SetupDMAStreams>
 8009238:	464b      	mov	r3, r9
 800923a:	5d1f      	ldrb	r7, [r3, r4]
 800923c:	2300      	movs	r3, #0
 800923e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009240:	001e      	movs	r6, r3
 8009242:	f7ff f9bd 	bl	80085c0 <PxMessagingTask+0x170>
								for(p =1; p <= NumOfPorts; p++){
 8009246:	2501      	movs	r5, #1
									UpdateBaudrate(p,temp32);
 8009248:	0028      	movs	r0, r5
								for(p =1; p <= NumOfPorts; p++){
 800924a:	3501      	adds	r5, #1
									UpdateBaudrate(p,temp32);
 800924c:	0039      	movs	r1, r7
								for(p =1; p <= NumOfPorts; p++){
 800924e:	b2ed      	uxtb	r5, r5
									UpdateBaudrate(p,temp32);
 8009250:	f003 fe00 	bl	800ce54 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 8009254:	2d06      	cmp	r5, #6
 8009256:	d1f7      	bne.n	8009248 <PxMessagingTask+0xdf8>
 8009258:	e7ee      	b.n	8009238 <PxMessagingTask+0xde8>
								temp =cMessage[port - 1][13 + shift];
 800925a:	9a05      	ldr	r2, [sp, #20]
 800925c:	1952      	adds	r2, r2, r5
 800925e:	7b51      	ldrb	r1, [r2, #13]
 8009260:	e4e7      	b.n	8008c32 <PxMessagingTask+0x7e2>
								temp =cMessage[port - 1][15 + shift];
 8009262:	9a05      	ldr	r2, [sp, #20]
 8009264:	1952      	adds	r2, r2, r5
 8009266:	7bd1      	ldrb	r1, [r2, #15]
 8009268:	e4e3      	b.n	8008c32 <PxMessagingTask+0x7e2>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800926a:	881a      	ldrh	r2, [r3, #0]
 800926c:	4988      	ldr	r1, [pc, #544]	; (8009490 <PxMessagingTask+0x1040>)
 800926e:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009270:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 8009272:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009274:	b21b      	sxth	r3, r3
 8009276:	121b      	asrs	r3, r3, #8
 8009278:	704b      	strb	r3, [r1, #1]
 800927a:	e7c1      	b.n	8009200 <PxMessagingTask+0xdb0>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800927c:	881a      	ldrh	r2, [r3, #0]
 800927e:	4984      	ldr	r1, [pc, #528]	; (8009490 <PxMessagingTask+0x1040>)
 8009280:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009282:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 8009284:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009286:	0a1b      	lsrs	r3, r3, #8
 8009288:	704b      	strb	r3, [r1, #1]
 800928a:	e7b9      	b.n	8009200 <PxMessagingTask+0xdb0>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800928c:	781a      	ldrb	r2, [r3, #0]
 800928e:	4980      	ldr	r1, [pc, #512]	; (8009490 <PxMessagingTask+0x1040>)
 8009290:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 8009292:	785a      	ldrb	r2, [r3, #1]
 8009294:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 8009296:	789a      	ldrb	r2, [r3, #2]
 8009298:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800929a:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 800929c:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800929e:	70cb      	strb	r3, [r1, #3]
 80092a0:	e7ae      	b.n	8009200 <PxMessagingTask+0xdb0>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d100      	bne.n	80092a8 <PxMessagingTask+0xe58>
 80092a6:	e0be      	b.n	8009426 <PxMessagingTask+0xfd6>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 80092a8:	d801      	bhi.n	80092ae <PxMessagingTask+0xe5e>
 80092aa:	f7ff f986 	bl	80085ba <PxMessagingTask+0x16a>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 80092ae:	260f      	movs	r6, #15
 80092b0:	3b04      	subs	r3, #4
 80092b2:	4a7c      	ldr	r2, [pc, #496]	; (80094a4 <PxMessagingTask+0x1054>)
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	58d2      	ldr	r2, [r2, r3]
 80092b8:	4b75      	ldr	r3, [pc, #468]	; (8009490 <PxMessagingTask+0x1040>)
 80092ba:	4016      	ands	r6, r2
 80092bc:	701e      	strb	r6, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 80092be:	d100      	bne.n	80092c2 <PxMessagingTask+0xe72>
 80092c0:	e0a8      	b.n	8009414 <PxMessagingTask+0xfc4>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 80092c2:	2380      	movs	r3, #128	; 0x80
									switch(messageParams[0]) // requested format
 80092c4:	3e01      	subs	r6, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 80092c6:	0c12      	lsrs	r2, r2, #16
 80092c8:	059b      	lsls	r3, r3, #22
									switch(messageParams[0]) // requested format
 80092ca:	b2f6      	uxtb	r6, r6
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 80092cc:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 80092ce:	2e07      	cmp	r6, #7
 80092d0:	d901      	bls.n	80092d6 <PxMessagingTask+0xe86>
 80092d2:	f7ff f972 	bl	80085ba <PxMessagingTask+0x16a>
 80092d6:	4974      	ldr	r1, [pc, #464]	; (80094a8 <PxMessagingTask+0x1058>)
 80092d8:	00b6      	lsls	r6, r6, #2
 80092da:	5989      	ldr	r1, [r1, r6]
 80092dc:	468f      	mov	pc, r1
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d031      	beq.n	8009346 <PxMessagingTask+0xef6>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 80092e2:	9b05      	ldr	r3, [sp, #20]
 80092e4:	195a      	adds	r2, r3, r5
 80092e6:	78d3      	ldrb	r3, [r2, #3]
 80092e8:	7891      	ldrb	r1, [r2, #2]
 80092ea:	021b      	lsls	r3, r3, #8
 80092ec:	185b      	adds	r3, r3, r1
 80092ee:	7911      	ldrb	r1, [r2, #4]
 80092f0:	0409      	lsls	r1, r1, #16
 80092f2:	7952      	ldrb	r2, [r2, #5]
 80092f4:	185b      	adds	r3, r3, r1
 80092f6:	0612      	lsls	r2, r2, #24
 80092f8:	189b      	adds	r3, r3, r2
 80092fa:	6003      	str	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 80092fc:	9905      	ldr	r1, [sp, #20]
 80092fe:	9807      	ldr	r0, [sp, #28]
 8009300:	5d4b      	ldrb	r3, [r1, r5]
 8009302:	5c09      	ldrb	r1, [r1, r0]
 8009304:	200f      	movs	r0, #15
 8009306:	3b01      	subs	r3, #1
 8009308:	4a66      	ldr	r2, [pc, #408]	; (80094a4 <PxMessagingTask+0x1054>)
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	58d2      	ldr	r2, [r2, r3]
 800930e:	4010      	ands	r0, r2
 8009310:	4288      	cmp	r0, r1
 8009312:	d008      	beq.n	8009326 <PxMessagingTask+0xed6>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 8009314:	4865      	ldr	r0, [pc, #404]	; (80094ac <PxMessagingTask+0x105c>)
 8009316:	4684      	mov	ip, r0
 8009318:	4461      	add	r1, ip
 800931a:	400a      	ands	r2, r1
 800931c:	4961      	ldr	r1, [pc, #388]	; (80094a4 <PxMessagingTask+0x1054>)
 800931e:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 8009320:	2314      	movs	r3, #20
 8009322:	4a63      	ldr	r2, [pc, #396]	; (80094b0 <PxMessagingTask+0x1060>)
 8009324:	7013      	strb	r3, [r2, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 8009326:	2240      	movs	r2, #64	; 0x40
 8009328:	4b62      	ldr	r3, [pc, #392]	; (80094b4 <PxMessagingTask+0x1064>)
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	4393      	bics	r3, r2
 800932e:	2b20      	cmp	r3, #32
 8009330:	d001      	beq.n	8009336 <PxMessagingTask+0xee6>
 8009332:	f7ff f942 	bl	80085ba <PxMessagingTask+0x16a>
								messageParams[0] =responseStatus;
 8009336:	4b5e      	ldr	r3, [pc, #376]	; (80094b0 <PxMessagingTask+0x1060>)
 8009338:	4a55      	ldr	r2, [pc, #340]	; (8009490 <PxMessagingTask+0x1040>)
 800933a:	781b      	ldrb	r3, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800933c:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 800933e:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8009340:	2201      	movs	r2, #1
 8009342:	f7ff fba0 	bl	8008a86 <PxMessagingTask+0x636>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 8009346:	2004      	movs	r0, #4
 8009348:	f008 fee0 	bl	801210c <malloc>
												if(temp32 != 0){
 800934c:	2800      	cmp	r0, #0
 800934e:	d00f      	beq.n	8009370 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009350:	0403      	lsls	r3, r0, #16
 8009352:	4a54      	ldr	r2, [pc, #336]	; (80094a4 <PxMessagingTask+0x1054>)
 8009354:	3306      	adds	r3, #6
 8009356:	5193      	str	r3, [r2, r6]
 8009358:	e7c3      	b.n	80092e2 <PxMessagingTask+0xe92>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00c      	beq.n	8009378 <PxMessagingTask+0xf28>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800935e:	9b05      	ldr	r3, [sp, #20]
 8009360:	195a      	adds	r2, r3, r5
 8009362:	78d3      	ldrb	r3, [r2, #3]
 8009364:	7911      	ldrb	r1, [r2, #4]
 8009366:	021b      	lsls	r3, r3, #8
 8009368:	0409      	lsls	r1, r1, #16
 800936a:	185b      	adds	r3, r3, r1
 800936c:	7891      	ldrb	r1, [r2, #2]
 800936e:	e7c0      	b.n	80092f2 <PxMessagingTask+0xea2>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009370:	2312      	movs	r3, #18
 8009372:	4a4f      	ldr	r2, [pc, #316]	; (80094b0 <PxMessagingTask+0x1060>)
 8009374:	7013      	strb	r3, [r2, #0]
 8009376:	e7c1      	b.n	80092fc <PxMessagingTask+0xeac>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 8009378:	2004      	movs	r0, #4
 800937a:	f008 fec7 	bl	801210c <malloc>
												if(temp32 != 0){
 800937e:	2800      	cmp	r0, #0
 8009380:	d0f6      	beq.n	8009370 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009382:	0403      	lsls	r3, r0, #16
 8009384:	4a47      	ldr	r2, [pc, #284]	; (80094a4 <PxMessagingTask+0x1054>)
 8009386:	3305      	adds	r3, #5
 8009388:	5193      	str	r3, [r2, r6]
 800938a:	e7e8      	b.n	800935e <PxMessagingTask+0xf0e>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	4940      	ldr	r1, [pc, #256]	; (8009490 <PxMessagingTask+0x1040>)
 8009390:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	0a12      	lsrs	r2, r2, #8
 8009396:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	0c12      	lsrs	r2, r2, #16
 800939c:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800939e:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 80093a0:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80093a2:	0e1b      	lsrs	r3, r3, #24
 80093a4:	710b      	strb	r3, [r1, #4]
 80093a6:	e72b      	b.n	8009200 <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80093a8:	881a      	ldrh	r2, [r3, #0]
 80093aa:	4939      	ldr	r1, [pc, #228]	; (8009490 <PxMessagingTask+0x1040>)
 80093ac:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80093ae:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 80093b0:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80093b2:	b21b      	sxth	r3, r3
 80093b4:	121b      	asrs	r3, r3, #8
 80093b6:	708b      	strb	r3, [r1, #2]
 80093b8:	e722      	b.n	8009200 <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80093ba:	881a      	ldrh	r2, [r3, #0]
 80093bc:	4934      	ldr	r1, [pc, #208]	; (8009490 <PxMessagingTask+0x1040>)
 80093be:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80093c0:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 80093c2:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80093c4:	0a1b      	lsrs	r3, r3, #8
 80093c6:	708b      	strb	r3, [r1, #2]
 80093c8:	e71a      	b.n	8009200 <PxMessagingTask+0xdb0>
											messageParams[1] =*(__IO int8_t* )temp32;
 80093ca:	4a31      	ldr	r2, [pc, #196]	; (8009490 <PxMessagingTask+0x1040>)
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 80093d0:	2202      	movs	r2, #2
 80093d2:	e715      	b.n	8009200 <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	492e      	ldr	r1, [pc, #184]	; (8009490 <PxMessagingTask+0x1040>)
 80093d8:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	1212      	asrs	r2, r2, #8
 80093de:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	1412      	asrs	r2, r2, #16
 80093e4:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80093e6:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 80093e8:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80093ea:	161b      	asrs	r3, r3, #24
 80093ec:	710b      	strb	r3, [r1, #4]
 80093ee:	e707      	b.n	8009200 <PxMessagingTask+0xdb0>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	4927      	ldr	r1, [pc, #156]	; (8009490 <PxMessagingTask+0x1040>)
 80093f4:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 80093f6:	4b30      	ldr	r3, [pc, #192]	; (80094b8 <PxMessagingTask+0x1068>)
 80093f8:	18d3      	adds	r3, r2, r3
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 80093fe:	4b2f      	ldr	r3, [pc, #188]	; (80094bc <PxMessagingTask+0x106c>)
 8009400:	18d3      	adds	r3, r2, r3
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009406:	4b2e      	ldr	r3, [pc, #184]	; (80094c0 <PxMessagingTask+0x1070>)
 8009408:	469c      	mov	ip, r3
 800940a:	4462      	add	r2, ip
 800940c:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 800940e:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009410:	710b      	strb	r3, [r1, #4]
 8009412:	e6f5      	b.n	8009200 <PxMessagingTask+0xdb0>
									SendMessageToModule(src,
 8009414:	2201      	movs	r2, #1
 8009416:	211f      	movs	r1, #31
 8009418:	4650      	mov	r0, sl
 800941a:	f7fe fe85 	bl	8008128 <SendMessageToModule>
 800941e:	464b      	mov	r3, r9
 8009420:	5d1f      	ldrb	r7, [r3, r4]
 8009422:	f7ff f8cd 	bl	80085c0 <PxMessagingTask+0x170>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009426:	9b05      	ldr	r3, [sp, #20]
 8009428:	2600      	movs	r6, #0
 800942a:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800942c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800942e:	4467      	add	r7, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009430:	469c      	mov	ip, r3
 8009432:	1c68      	adds	r0, r5, #1
 8009434:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009436:	3f01      	subs	r7, #1
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009438:	4458      	add	r0, fp
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800943a:	703e      	strb	r6, [r7, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800943c:	f7fa f984 	bl	8003748 <IsModuleParameter>
 8009440:	900b      	str	r0, [sp, #44]	; 0x2c
								if(temp == 0){ // Parameter does not exist
 8009442:	42b0      	cmp	r0, r6
 8009444:	d100      	bne.n	8009448 <PxMessagingTask+0xff8>
 8009446:	e0a4      	b.n	8009592 <PxMessagingTask+0x1142>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009448:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 800944a:	491e      	ldr	r1, [pc, #120]	; (80094c4 <PxMessagingTask+0x1074>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800944c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
									messageParams[0] =modParam[temp - 1].paramFormat;
 800944e:	468c      	mov	ip, r1
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009450:	3b01      	subs	r3, #1
 8009452:	435a      	muls	r2, r3
 8009454:	4b1b      	ldr	r3, [pc, #108]	; (80094c4 <PxMessagingTask+0x1074>)
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009456:	490e      	ldr	r1, [pc, #56]	; (8009490 <PxMessagingTask+0x1040>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009458:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800945a:	4462      	add	r2, ip
 800945c:	7912      	ldrb	r2, [r2, #4]
 800945e:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 8009460:	3a01      	subs	r2, #1
 8009462:	b2d2      	uxtb	r2, r2
 8009464:	2a07      	cmp	r2, #7
 8009466:	d900      	bls.n	800946a <PxMessagingTask+0x101a>
 8009468:	e4f1      	b.n	8008e4e <PxMessagingTask+0x9fe>
 800946a:	4917      	ldr	r1, [pc, #92]	; (80094c8 <PxMessagingTask+0x1078>)
 800946c:	0092      	lsls	r2, r2, #2
 800946e:	588a      	ldr	r2, [r1, r2]
 8009470:	4697      	mov	pc, r2
 8009472:	46c0      	nop			; (mov r8, r8)
 8009474:	20000dd4 	.word	0x20000dd4
 8009478:	20001dbc 	.word	0x20001dbc
 800947c:	08018c04 	.word	0x08018c04
 8009480:	2000003a 	.word	0x2000003a
 8009484:	08017260 	.word	0x08017260
 8009488:	e000ed00 	.word	0xe000ed00
 800948c:	05fa0004 	.word	0x05fa0004
 8009490:	20000b4c 	.word	0x20000b4c
 8009494:	20000010 	.word	0x20000010
 8009498:	20001e80 	.word	0x20001e80
 800949c:	20000ee4 	.word	0x20000ee4
 80094a0:	20000c5a 	.word	0x20000c5a
 80094a4:	200067fc 	.word	0x200067fc
 80094a8:	08017284 	.word	0x08017284
 80094ac:	0000fff0 	.word	0x0000fff0
 80094b0:	20000c4c 	.word	0x20000c4c
 80094b4:	200067f4 	.word	0x200067f4
 80094b8:	20000001 	.word	0x20000001
 80094bc:	20000002 	.word	0x20000002
 80094c0:	20000003 	.word	0x20000003
 80094c4:	200000a4 	.word	0x200000a4
 80094c8:	080172a4 	.word	0x080172a4
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d100      	bne.n	80094d2 <PxMessagingTask+0x1082>
 80094d0:	e0ce      	b.n	8009670 <PxMessagingTask+0x1220>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 80094d2:	9b05      	ldr	r3, [sp, #20]
 80094d4:	1959      	adds	r1, r3, r5
 80094d6:	78ca      	ldrb	r2, [r1, #3]
 80094d8:	788b      	ldrb	r3, [r1, #2]
 80094da:	0212      	lsls	r2, r2, #8
 80094dc:	189b      	adds	r3, r3, r2
 80094de:	b21b      	sxth	r3, r3
 80094e0:	8003      	strh	r3, [r0, #0]
 80094e2:	e70b      	b.n	80092fc <PxMessagingTask+0xeac>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	49d7      	ldr	r1, [pc, #860]	; (8009844 <PxMessagingTask+0x13f4>)
 80094e8:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	1212      	asrs	r2, r2, #8
 80094ee:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	1412      	asrs	r2, r2, #16
 80094f4:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80094f6:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 80094f8:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80094fa:	161b      	asrs	r3, r3, #24
 80094fc:	70cb      	strb	r3, [r1, #3]
 80094fe:	e67f      	b.n	8009200 <PxMessagingTask+0xdb0>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009500:	2b00      	cmp	r3, #0
 8009502:	d100      	bne.n	8009506 <PxMessagingTask+0x10b6>
 8009504:	e0df      	b.n	80096c6 <PxMessagingTask+0x1276>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009506:	9b05      	ldr	r3, [sp, #20]
 8009508:	195a      	adds	r2, r3, r5
 800950a:	78d3      	ldrb	r3, [r2, #3]
 800950c:	7911      	ldrb	r1, [r2, #4]
 800950e:	021b      	lsls	r3, r3, #8
 8009510:	0409      	lsls	r1, r1, #16
 8009512:	185b      	adds	r3, r3, r1
 8009514:	7891      	ldrb	r1, [r2, #2]
 8009516:	7952      	ldrb	r2, [r2, #5]
 8009518:	185b      	adds	r3, r3, r1
 800951a:	0612      	lsls	r2, r2, #24
 800951c:	189b      	adds	r3, r3, r2
 800951e:	4642      	mov	r2, r8
 8009520:	4641      	mov	r1, r8
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	2200      	movs	r2, #0
 8009526:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 8009528:	6003      	str	r3, [r0, #0]
 800952a:	e6e7      	b.n	80092fc <PxMessagingTask+0xeac>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800952c:	9b05      	ldr	r3, [sp, #20]
 800952e:	4642      	mov	r2, r8
 8009530:	469c      	mov	ip, r3
 8009532:	2301      	movs	r3, #1
 8009534:	4465      	add	r5, ip
 8009536:	56eb      	ldrsb	r3, [r5, r3]
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	17db      	asrs	r3, r3, #31
 800953c:	6053      	str	r3, [r2, #4]
										break;
 800953e:	f7ff f930 	bl	80087a2 <PxMessagingTask+0x352>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00f      	beq.n	8009566 <PxMessagingTask+0x1116>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 8009546:	9b05      	ldr	r3, [sp, #20]
 8009548:	1959      	adds	r1, r3, r5
 800954a:	78ca      	ldrb	r2, [r1, #3]
 800954c:	788b      	ldrb	r3, [r1, #2]
 800954e:	0212      	lsls	r2, r2, #8
 8009550:	189b      	adds	r3, r3, r2
 8009552:	b29b      	uxth	r3, r3
 8009554:	8003      	strh	r3, [r0, #0]
 8009556:	e6d1      	b.n	80092fc <PxMessagingTask+0xeac>
											messageParams[1] =*(__IO uint8_t* )temp32;
 8009558:	4aba      	ldr	r2, [pc, #744]	; (8009844 <PxMessagingTask+0x13f4>)
 800955a:	781b      	ldrb	r3, [r3, #0]
											SendMessageToModule(src,
 800955c:	211f      	movs	r1, #31
											messageParams[1] =*(__IO uint8_t* )temp32;
 800955e:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 8009560:	2202      	movs	r2, #2
 8009562:	f7ff fa90 	bl	8008a86 <PxMessagingTask+0x636>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 8009566:	2002      	movs	r0, #2
 8009568:	f008 fdd0 	bl	801210c <malloc>
												if(temp32 != 0){
 800956c:	2800      	cmp	r0, #0
 800956e:	d100      	bne.n	8009572 <PxMessagingTask+0x1122>
 8009570:	e6fe      	b.n	8009370 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009572:	0403      	lsls	r3, r0, #16
 8009574:	4ab4      	ldr	r2, [pc, #720]	; (8009848 <PxMessagingTask+0x13f8>)
 8009576:	3303      	adds	r3, #3
 8009578:	5193      	str	r3, [r2, r6]
 800957a:	e7e4      	b.n	8009546 <PxMessagingTask+0x10f6>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800957c:	781a      	ldrb	r2, [r3, #0]
 800957e:	49b1      	ldr	r1, [pc, #708]	; (8009844 <PxMessagingTask+0x13f4>)
 8009580:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009582:	785a      	ldrb	r2, [r3, #1]
 8009584:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009586:	789a      	ldrb	r2, [r3, #2]
 8009588:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800958a:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 800958c:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800958e:	710b      	strb	r3, [r1, #4]
 8009590:	e636      	b.n	8009200 <PxMessagingTask+0xdb0>
									SendMessageToModule(src,
 8009592:	2201      	movs	r2, #1
 8009594:	211f      	movs	r1, #31
 8009596:	4650      	mov	r0, sl
 8009598:	f7fe fdc6 	bl	8008128 <SendMessageToModule>
 800959c:	464b      	mov	r3, r9
 800959e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80095a0:	5d1f      	ldrb	r7, [r3, r4]
 80095a2:	f7ff f80d 	bl	80085c0 <PxMessagingTask+0x170>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00c      	beq.n	80095c4 <PxMessagingTask+0x1174>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 80095aa:	9b05      	ldr	r3, [sp, #20]
 80095ac:	195b      	adds	r3, r3, r5
 80095ae:	789b      	ldrb	r3, [r3, #2]
 80095b0:	b25b      	sxtb	r3, r3
 80095b2:	7003      	strb	r3, [r0, #0]
 80095b4:	e6a2      	b.n	80092fc <PxMessagingTask+0xeac>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00f      	beq.n	80095da <PxMessagingTask+0x118a>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	195b      	adds	r3, r3, r5
 80095be:	789b      	ldrb	r3, [r3, #2]
 80095c0:	7003      	strb	r3, [r0, #0]
 80095c2:	e69b      	b.n	80092fc <PxMessagingTask+0xeac>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 80095c4:	2001      	movs	r0, #1
 80095c6:	f008 fda1 	bl	801210c <malloc>
												if(temp32 != 0){
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d100      	bne.n	80095d0 <PxMessagingTask+0x1180>
 80095ce:	e6cf      	b.n	8009370 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80095d0:	0403      	lsls	r3, r0, #16
 80095d2:	4a9d      	ldr	r2, [pc, #628]	; (8009848 <PxMessagingTask+0x13f8>)
 80095d4:	3302      	adds	r3, #2
 80095d6:	5193      	str	r3, [r2, r6]
 80095d8:	e7e7      	b.n	80095aa <PxMessagingTask+0x115a>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 80095da:	2001      	movs	r0, #1
 80095dc:	f008 fd96 	bl	801210c <malloc>
												if(temp32 != 0){
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d100      	bne.n	80095e6 <PxMessagingTask+0x1196>
 80095e4:	e6c4      	b.n	8009370 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80095e6:	0403      	lsls	r3, r0, #16
 80095e8:	19df      	adds	r7, r3, r7
 80095ea:	4b97      	ldr	r3, [pc, #604]	; (8009848 <PxMessagingTask+0x13f8>)
 80095ec:	519f      	str	r7, [r3, r6]
 80095ee:	e7e4      	b.n	80095ba <PxMessagingTask+0x116a>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 80095f0:	2313      	movs	r3, #19
 80095f2:	4a96      	ldr	r2, [pc, #600]	; (800984c <PxMessagingTask+0x13fc>)
 80095f4:	7013      	strb	r3, [r2, #0]
 80095f6:	e696      	b.n	8009326 <PxMessagingTask+0xed6>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 80095f8:	9b05      	ldr	r3, [sp, #20]
 80095fa:	195b      	adds	r3, r3, r5
 80095fc:	789e      	ldrb	r6, [r3, #2]
 80095fe:	78da      	ldrb	r2, [r3, #3]
 8009600:	0636      	lsls	r6, r6, #24
 8009602:	0412      	lsls	r2, r2, #16
 8009604:	18b6      	adds	r6, r6, r2
 8009606:	795a      	ldrb	r2, [r3, #5]
 8009608:	18b6      	adds	r6, r6, r2
 800960a:	791a      	ldrb	r2, [r3, #4]
 800960c:	0212      	lsls	r2, r2, #8
 800960e:	18b6      	adds	r6, r6, r2
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 8009610:	22e0      	movs	r2, #224	; 0xe0
 8009612:	0612      	lsls	r2, r2, #24
 8009614:	18b1      	adds	r1, r6, r2
 8009616:	4a8e      	ldr	r2, [pc, #568]	; (8009850 <PxMessagingTask+0x1400>)
 8009618:	4291      	cmp	r1, r2
 800961a:	d900      	bls.n	800961e <PxMessagingTask+0x11ce>
 800961c:	e0ac      	b.n	8009778 <PxMessagingTask+0x1328>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800961e:	785b      	ldrb	r3, [r3, #1]
 8009620:	3b01      	subs	r3, #1
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b07      	cmp	r3, #7
 8009626:	d900      	bls.n	800962a <PxMessagingTask+0x11da>
 8009628:	e67d      	b.n	8009326 <PxMessagingTask+0xed6>
 800962a:	4a8a      	ldr	r2, [pc, #552]	; (8009854 <PxMessagingTask+0x1404>)
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	58d3      	ldr	r3, [r2, r3]
 8009630:	469f      	mov	pc, r3
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 8009632:	9b05      	ldr	r3, [sp, #20]
 8009634:	469c      	mov	ip, r3
 8009636:	4465      	add	r5, ip
 8009638:	78ab      	ldrb	r3, [r5, #2]
 800963a:	786a      	ldrb	r2, [r5, #1]
 800963c:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800963e:	189b      	adds	r3, r3, r2
 8009640:	4642      	mov	r2, r8
 8009642:	6013      	str	r3, [r2, #0]
 8009644:	17db      	asrs	r3, r3, #31
 8009646:	6053      	str	r3, [r2, #4]
										break;
 8009648:	f7ff f8ab 	bl	80087a2 <PxMessagingTask+0x352>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800964c:	9b05      	ldr	r3, [sp, #20]
 800964e:	469c      	mov	ip, r3
 8009650:	4465      	add	r5, ip
 8009652:	78ab      	ldrb	r3, [r5, #2]
 8009654:	786a      	ldrb	r2, [r5, #1]
 8009656:	021b      	lsls	r3, r3, #8
 8009658:	189b      	adds	r3, r3, r2
 800965a:	78ea      	ldrb	r2, [r5, #3]
 800965c:	0412      	lsls	r2, r2, #16
 800965e:	189b      	adds	r3, r3, r2
 8009660:	792a      	ldrb	r2, [r5, #4]
 8009662:	0612      	lsls	r2, r2, #24
 8009664:	e7eb      	b.n	800963e <PxMessagingTask+0x11ee>
										messageParams[0] =*(__IO uint8_t* )temp32;
 8009666:	4a77      	ldr	r2, [pc, #476]	; (8009844 <PxMessagingTask+0x13f4>)
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	7013      	strb	r3, [r2, #0]
										SendMessageToModule(src,
 800966c:	2201      	movs	r2, #1
 800966e:	e5c7      	b.n	8009200 <PxMessagingTask+0xdb0>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 8009670:	2002      	movs	r0, #2
 8009672:	f008 fd4b 	bl	801210c <malloc>
												if(temp32 != 0){
 8009676:	2800      	cmp	r0, #0
 8009678:	d100      	bne.n	800967c <PxMessagingTask+0x122c>
 800967a:	e679      	b.n	8009370 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800967c:	0403      	lsls	r3, r0, #16
 800967e:	4a72      	ldr	r2, [pc, #456]	; (8009848 <PxMessagingTask+0x13f8>)
 8009680:	3304      	adds	r3, #4
 8009682:	5193      	str	r3, [r2, r6]
 8009684:	e725      	b.n	80094d2 <PxMessagingTask+0x1082>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009686:	2310      	movs	r3, #16
 8009688:	f7ff f850 	bl	800872c <PxMessagingTask+0x2dc>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800968c:	9b05      	ldr	r3, [sp, #20]
 800968e:	469c      	mov	ip, r3
 8009690:	4465      	add	r5, ip
 8009692:	78ab      	ldrb	r3, [r5, #2]
 8009694:	78ea      	ldrb	r2, [r5, #3]
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	0412      	lsls	r2, r2, #16
 800969a:	189b      	adds	r3, r3, r2
 800969c:	786a      	ldrb	r2, [r5, #1]
 800969e:	189b      	adds	r3, r3, r2
 80096a0:	792a      	ldrb	r2, [r5, #4]
 80096a2:	0612      	lsls	r2, r2, #24
 80096a4:	189b      	adds	r3, r3, r2
 80096a6:	4642      	mov	r2, r8
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	2300      	movs	r3, #0
 80096ac:	6053      	str	r3, [r2, #4]
										break;
 80096ae:	f7ff f878 	bl	80087a2 <PxMessagingTask+0x352>
										remoteBuffer =cMessage[port - 1][1 + shift];
 80096b2:	9b05      	ldr	r3, [sp, #20]
 80096b4:	4642      	mov	r2, r8
 80096b6:	469c      	mov	ip, r3
 80096b8:	4465      	add	r5, ip
 80096ba:	786b      	ldrb	r3, [r5, #1]
 80096bc:	6013      	str	r3, [r2, #0]
 80096be:	2300      	movs	r3, #0
 80096c0:	6053      	str	r3, [r2, #4]
										break;
 80096c2:	f7ff f86e 	bl	80087a2 <PxMessagingTask+0x352>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 80096c6:	2004      	movs	r0, #4
 80096c8:	f008 fd20 	bl	801210c <malloc>
												if(temp32 != 0){
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d100      	bne.n	80096d2 <PxMessagingTask+0x1282>
 80096d0:	e64e      	b.n	8009370 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80096d2:	0403      	lsls	r3, r0, #16
 80096d4:	4a5c      	ldr	r2, [pc, #368]	; (8009848 <PxMessagingTask+0x13f8>)
 80096d6:	3307      	adds	r3, #7
 80096d8:	5193      	str	r3, [r2, r6]
 80096da:	e714      	b.n	8009506 <PxMessagingTask+0x10b6>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 80096dc:	9b05      	ldr	r3, [sp, #20]
 80096de:	469c      	mov	ip, r3
 80096e0:	4465      	add	r5, ip
 80096e2:	79eb      	ldrb	r3, [r5, #7]
 80096e4:	79aa      	ldrb	r2, [r5, #6]
 80096e6:	021b      	lsls	r3, r3, #8
 80096e8:	189b      	adds	r3, r3, r2
 80096ea:	7a2a      	ldrb	r2, [r5, #8]
 80096ec:	0412      	lsls	r2, r2, #16
 80096ee:	189b      	adds	r3, r3, r2
 80096f0:	7a6a      	ldrb	r2, [r5, #9]
 80096f2:	0612      	lsls	r2, r2, #24
 80096f4:	189b      	adds	r3, r3, r2
 80096f6:	6033      	str	r3, [r6, #0]
											break;
 80096f8:	e615      	b.n	8009326 <PxMessagingTask+0xed6>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 80096fa:	9b05      	ldr	r3, [sp, #20]
 80096fc:	469c      	mov	ip, r3
 80096fe:	4465      	add	r5, ip
 8009700:	79eb      	ldrb	r3, [r5, #7]
 8009702:	7a2a      	ldrb	r2, [r5, #8]
 8009704:	021b      	lsls	r3, r3, #8
 8009706:	0412      	lsls	r2, r2, #16
 8009708:	189b      	adds	r3, r3, r2
 800970a:	79aa      	ldrb	r2, [r5, #6]
 800970c:	e7ef      	b.n	80096ee <PxMessagingTask+0x129e>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800970e:	9b05      	ldr	r3, [sp, #20]
 8009710:	469c      	mov	ip, r3
 8009712:	4465      	add	r5, ip
 8009714:	79ea      	ldrb	r2, [r5, #7]
 8009716:	79ab      	ldrb	r3, [r5, #6]
 8009718:	0212      	lsls	r2, r2, #8
 800971a:	189b      	adds	r3, r3, r2
 800971c:	b21b      	sxth	r3, r3
 800971e:	8033      	strh	r3, [r6, #0]
											break;
 8009720:	e601      	b.n	8009326 <PxMessagingTask+0xed6>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009722:	9b05      	ldr	r3, [sp, #20]
 8009724:	469c      	mov	ip, r3
 8009726:	4465      	add	r5, ip
 8009728:	79ea      	ldrb	r2, [r5, #7]
 800972a:	79ab      	ldrb	r3, [r5, #6]
 800972c:	0212      	lsls	r2, r2, #8
 800972e:	189b      	adds	r3, r3, r2
 8009730:	b29b      	uxth	r3, r3
 8009732:	8033      	strh	r3, [r6, #0]
											break;
 8009734:	e5f7      	b.n	8009326 <PxMessagingTask+0xed6>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 8009736:	9b05      	ldr	r3, [sp, #20]
 8009738:	469c      	mov	ip, r3
 800973a:	2306      	movs	r3, #6
 800973c:	4465      	add	r5, ip
 800973e:	56eb      	ldrsb	r3, [r5, r3]
 8009740:	7033      	strb	r3, [r6, #0]
											break;
 8009742:	e5f0      	b.n	8009326 <PxMessagingTask+0xed6>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 8009744:	9b05      	ldr	r3, [sp, #20]
 8009746:	469c      	mov	ip, r3
 8009748:	4465      	add	r5, ip
 800974a:	79ab      	ldrb	r3, [r5, #6]
 800974c:	7033      	strb	r3, [r6, #0]
											break;
 800974e:	e5ea      	b.n	8009326 <PxMessagingTask+0xed6>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009750:	9b05      	ldr	r3, [sp, #20]
 8009752:	4641      	mov	r1, r8
 8009754:	469c      	mov	ip, r3
 8009756:	4465      	add	r5, ip
 8009758:	79eb      	ldrb	r3, [r5, #7]
 800975a:	7a2a      	ldrb	r2, [r5, #8]
 800975c:	021b      	lsls	r3, r3, #8
 800975e:	0412      	lsls	r2, r2, #16
 8009760:	189b      	adds	r3, r3, r2
 8009762:	79aa      	ldrb	r2, [r5, #6]
 8009764:	189b      	adds	r3, r3, r2
 8009766:	7a6a      	ldrb	r2, [r5, #9]
 8009768:	0612      	lsls	r2, r2, #24
 800976a:	189b      	adds	r3, r3, r2
 800976c:	4642      	mov	r2, r8
 800976e:	6013      	str	r3, [r2, #0]
 8009770:	2200      	movs	r2, #0
 8009772:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 8009774:	6033      	str	r3, [r6, #0]
											break;
 8009776:	e5d6      	b.n	8009326 <PxMessagingTask+0xed6>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 8009778:	23f8      	movs	r3, #248	; 0xf8
 800977a:	4a37      	ldr	r2, [pc, #220]	; (8009858 <PxMessagingTask+0x1408>)
 800977c:	061b      	lsls	r3, r3, #24
 800977e:	18f3      	adds	r3, r6, r3
 8009780:	4293      	cmp	r3, r2
 8009782:	d903      	bls.n	800978c <PxMessagingTask+0x133c>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 8009784:	2215      	movs	r2, #21
 8009786:	4b31      	ldr	r3, [pc, #196]	; (800984c <PxMessagingTask+0x13fc>)
 8009788:	701a      	strb	r2, [r3, #0]
 800978a:	e5cc      	b.n	8009326 <PxMessagingTask+0xed6>
									HAL_FLASH_Unlock();
 800978c:	f006 fd32 	bl	80101f4 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 8009790:	9b08      	ldr	r3, [sp, #32]
 8009792:	2b22      	cmp	r3, #34	; 0x22
 8009794:	d102      	bne.n	800979c <PxMessagingTask+0x134c>
										EraseSector(temp32);
 8009796:	0030      	movs	r0, r6
 8009798:	f001 fcae 	bl	800b0f8 <EraseSector>
									if(responseStatus == BOS_OK){
 800979c:	4b2b      	ldr	r3, [pc, #172]	; (800984c <PxMessagingTask+0x13fc>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d110      	bne.n	80097c6 <PxMessagingTask+0x1376>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 80097a4:	9b05      	ldr	r3, [sp, #20]
 80097a6:	195b      	adds	r3, r3, r5
 80097a8:	785b      	ldrb	r3, [r3, #1]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b07      	cmp	r3, #7
 80097b0:	d809      	bhi.n	80097c6 <PxMessagingTask+0x1376>
 80097b2:	4a2a      	ldr	r2, [pc, #168]	; (800985c <PxMessagingTask+0x140c>)
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	58d3      	ldr	r3, [r2, r3]
 80097b8:	469f      	mov	pc, r3
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 80097ba:	6833      	ldr	r3, [r6, #0]
 80097bc:	3301      	adds	r3, #1
 80097be:	d020      	beq.n	8009802 <PxMessagingTask+0x13b2>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 80097c0:	2216      	movs	r2, #22
 80097c2:	4b22      	ldr	r3, [pc, #136]	; (800984c <PxMessagingTask+0x13fc>)
 80097c4:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 80097c6:	f006 fd27 	bl	8010218 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 80097ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d100      	bne.n	80097d2 <PxMessagingTask+0x1382>
 80097d0:	e5a9      	b.n	8009326 <PxMessagingTask+0xed6>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 80097d2:	2216      	movs	r2, #22
 80097d4:	4b1d      	ldr	r3, [pc, #116]	; (800984c <PxMessagingTask+0x13fc>)
 80097d6:	701a      	strb	r2, [r3, #0]
 80097d8:	e5a5      	b.n	8009326 <PxMessagingTask+0xed6>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 80097da:	8832      	ldrh	r2, [r6, #0]
 80097dc:	4b20      	ldr	r3, [pc, #128]	; (8009860 <PxMessagingTask+0x1410>)
 80097de:	429a      	cmp	r2, r3
 80097e0:	d1ee      	bne.n	80097c0 <PxMessagingTask+0x1370>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 80097e2:	9b05      	ldr	r3, [sp, #20]
 80097e4:	469c      	mov	ip, r3
 80097e6:	4465      	add	r5, ip
 80097e8:	79ea      	ldrb	r2, [r5, #7]
 80097ea:	79ab      	ldrb	r3, [r5, #6]
 80097ec:	0212      	lsls	r2, r2, #8
 80097ee:	18d2      	adds	r2, r2, r3
 80097f0:	17d3      	asrs	r3, r2, #31
 80097f2:	4641      	mov	r1, r8
													status =HAL_FLASH_Program(
 80097f4:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 80097f6:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 80097f8:	0031      	movs	r1, r6
 80097fa:	f006 fd5b 	bl	80102b4 <HAL_FLASH_Program>
 80097fe:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009800:	e7e1      	b.n	80097c6 <PxMessagingTask+0x1376>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009802:	9b05      	ldr	r3, [sp, #20]
 8009804:	4641      	mov	r1, r8
 8009806:	469c      	mov	ip, r3
 8009808:	4465      	add	r5, ip
 800980a:	79ea      	ldrb	r2, [r5, #7]
 800980c:	7a2b      	ldrb	r3, [r5, #8]
 800980e:	0212      	lsls	r2, r2, #8
 8009810:	041b      	lsls	r3, r3, #16
 8009812:	18d2      	adds	r2, r2, r3
 8009814:	79ab      	ldrb	r3, [r5, #6]
													status =HAL_FLASH_Program(
 8009816:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009818:	18d2      	adds	r2, r2, r3
 800981a:	7a6b      	ldrb	r3, [r5, #9]
 800981c:	061b      	lsls	r3, r3, #24
 800981e:	18d2      	adds	r2, r2, r3
 8009820:	2300      	movs	r3, #0
 8009822:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009824:	0031      	movs	r1, r6
 8009826:	f006 fd45 	bl	80102b4 <HAL_FLASH_Program>
 800982a:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800982c:	e7cb      	b.n	80097c6 <PxMessagingTask+0x1376>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800982e:	8832      	ldrh	r2, [r6, #0]
 8009830:	4b0b      	ldr	r3, [pc, #44]	; (8009860 <PxMessagingTask+0x1410>)
 8009832:	429a      	cmp	r2, r3
 8009834:	d1c4      	bne.n	80097c0 <PxMessagingTask+0x1370>
													remoteBuffer =cMessage[port - 1][6 + shift];
 8009836:	9b05      	ldr	r3, [sp, #20]
 8009838:	469c      	mov	ip, r3
 800983a:	4465      	add	r5, ip
 800983c:	79aa      	ldrb	r2, [r5, #6]
 800983e:	2300      	movs	r3, #0
 8009840:	e7d7      	b.n	80097f2 <PxMessagingTask+0x13a2>
 8009842:	46c0      	nop			; (mov r8, r8)
 8009844:	20000b4c 	.word	0x20000b4c
 8009848:	200067fc 	.word	0x200067fc
 800984c:	20000c4c 	.word	0x20000c4c
 8009850:	00007fff 	.word	0x00007fff
 8009854:	080172c4 	.word	0x080172c4
 8009858:	0001ffff 	.word	0x0001ffff
 800985c:	080172e4 	.word	0x080172e4
 8009860:	0000ffff 	.word	0x0000ffff
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009864:	6833      	ldr	r3, [r6, #0]
 8009866:	3301      	adds	r3, #1
 8009868:	d1aa      	bne.n	80097c0 <PxMessagingTask+0x1370>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800986a:	9b05      	ldr	r3, [sp, #20]
 800986c:	4641      	mov	r1, r8
 800986e:	469c      	mov	ip, r3
 8009870:	4465      	add	r5, ip
 8009872:	79ea      	ldrb	r2, [r5, #7]
 8009874:	7a2b      	ldrb	r3, [r5, #8]
 8009876:	0212      	lsls	r2, r2, #8
 8009878:	041b      	lsls	r3, r3, #16
 800987a:	18d2      	adds	r2, r2, r3
 800987c:	79ab      	ldrb	r3, [r5, #6]
													status =HAL_FLASH_Program(
 800987e:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009880:	18d2      	adds	r2, r2, r3
 8009882:	7a6b      	ldrb	r3, [r5, #9]
 8009884:	061b      	lsls	r3, r3, #24
 8009886:	18d2      	adds	r2, r2, r3
 8009888:	2300      	movs	r3, #0
 800988a:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800988c:	0031      	movs	r1, r6
 800988e:	f006 fd11 	bl	80102b4 <HAL_FLASH_Program>
 8009892:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009894:	e797      	b.n	80097c6 <PxMessagingTask+0x1376>
 8009896:	46c0      	nop			; (mov r8, r8)

08009898 <ledModeCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE ledModeCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8009898:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800989a:	b530      	push	{r4, r5, lr}
 800989c:	b083      	sub	sp, #12
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	/* Obtain the 1st parameter string. */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800989e:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 80098a0:	0005      	movs	r5, r0
 80098a2:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 80098a4:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 80098a6:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 80098a8:	f003 fd28 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	1, /* Return the first parameter. */
	&xParameterStringLength1 /* Store the parameter string length. */
	);
	if (!strcmp((char*) pcParameterString1, "on")
 80098ac:	4918      	ldr	r1, [pc, #96]	; (8009910 <ledModeCommand+0x78>)
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 80098ae:	0004      	movs	r4, r0
	if (!strcmp((char*) pcParameterString1, "on")
 80098b0:	f7f6 fc28 	bl	8000104 <strcmp>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d005      	beq.n	80098c4 <ledModeCommand+0x2c>
			|| !strcmp((char*) pcParameterString1, "ON"))
 80098b8:	4916      	ldr	r1, [pc, #88]	; (8009914 <ledModeCommand+0x7c>)
 80098ba:	0020      	movs	r0, r4
 80098bc:	f7f6 fc22 	bl	8000104 <strcmp>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d10a      	bne.n	80098da <ledModeCommand+0x42>
		SwitchindMode = 1;
 80098c4:	2201      	movs	r2, #1
 80098c6:	4b14      	ldr	r3, [pc, #80]	; (8009918 <ledModeCommand+0x80>)
 80098c8:	701a      	strb	r2, [r3, #0]
			|| !strcmp((char*) pcParameterString1, "OFF"))
		SwitchindMode = 0;

	/* Respond to the command */
	if (SwitchindMode) {
		strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 80098ca:	222e      	movs	r2, #46	; 0x2e
 80098cc:	4913      	ldr	r1, [pc, #76]	; (800991c <ledModeCommand+0x84>)
 80098ce:	0028      	movs	r0, r5
 80098d0:	f008 fe69 	bl	80125a6 <memcpy>
	}

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80098d4:	2000      	movs	r0, #0
 80098d6:	b003      	add	sp, #12
 80098d8:	bd30      	pop	{r4, r5, pc}
	else if (!strcmp((char*) pcParameterString1, "off")
 80098da:	4911      	ldr	r1, [pc, #68]	; (8009920 <ledModeCommand+0x88>)
 80098dc:	0020      	movs	r0, r4
 80098de:	f7f6 fc11 	bl	8000104 <strcmp>
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d108      	bne.n	80098f8 <ledModeCommand+0x60>
		SwitchindMode = 0;
 80098e6:	2200      	movs	r2, #0
 80098e8:	4b0b      	ldr	r3, [pc, #44]	; (8009918 <ledModeCommand+0x80>)
 80098ea:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 80098ec:	222f      	movs	r2, #47	; 0x2f
 80098ee:	490d      	ldr	r1, [pc, #52]	; (8009924 <ledModeCommand+0x8c>)
 80098f0:	0028      	movs	r0, r5
 80098f2:	f008 fe58 	bl	80125a6 <memcpy>
 80098f6:	e7ed      	b.n	80098d4 <ledModeCommand+0x3c>
			|| !strcmp((char*) pcParameterString1, "OFF"))
 80098f8:	490b      	ldr	r1, [pc, #44]	; (8009928 <ledModeCommand+0x90>)
 80098fa:	0020      	movs	r0, r4
 80098fc:	f7f6 fc02 	bl	8000104 <strcmp>
 8009900:	2800      	cmp	r0, #0
 8009902:	d0f0      	beq.n	80098e6 <ledModeCommand+0x4e>
	if (SwitchindMode) {
 8009904:	4b04      	ldr	r3, [pc, #16]	; (8009918 <ledModeCommand+0x80>)
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d0ef      	beq.n	80098ec <ledModeCommand+0x54>
 800990c:	e7dd      	b.n	80098ca <ledModeCommand+0x32>
 800990e:	46c0      	nop			; (mov r8, r8)
 8009910:	080193f4 	.word	0x080193f4
 8009914:	08019a60 	.word	0x08019a60
 8009918:	20001fbc 	.word	0x20001fbc
 800991c:	08019a6c 	.word	0x08019a6c
 8009920:	08019a64 	.word	0x08019a64
 8009924:	08019a9c 	.word	0x08019a9c
 8009928:	08019a68 	.word	0x08019a68

0800992c <SystemClock_Config>:
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800992c:	2310      	movs	r3, #16
void SystemClock_Config(void) {
 800992e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009930:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8009932:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009934:	2680      	movs	r6, #128	; 0x80
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009936:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8009938:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800993a:	2401      	movs	r4, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800993c:	2702      	movs	r7, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800993e:	0276      	lsls	r6, r6, #9
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009940:	035b      	lsls	r3, r3, #13
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009942:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009944:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009946:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009948:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800994a:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800994c:	9519      	str	r5, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800994e:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009950:	9617      	str	r6, [sp, #92]	; 0x5c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009952:	f006 ff47 	bl	80107e4 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8009956:	2307      	movs	r3, #7
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8009958:	2101      	movs	r1, #1
 800995a:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800995c:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800995e:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009960:	9505      	str	r5, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009962:	9703      	str	r7, [sp, #12]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8009964:	f007 f9e0 	bl	8010d28 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8009968:	4b1a      	ldr	r3, [pc, #104]	; (80099d4 <SystemClock_Config+0xa8>)
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800996a:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800996c:	9306      	str	r3, [sp, #24]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800996e:	9508      	str	r5, [sp, #32]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009970:	9509      	str	r5, [sp, #36]	; 0x24
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009972:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009974:	f007 fb64 	bl	8011040 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 8009978:	2180      	movs	r1, #128	; 0x80
 800997a:	4d17      	ldr	r5, [pc, #92]	; (80099d8 <SystemClock_Config+0xac>)
 800997c:	0549      	lsls	r1, r1, #21
 800997e:	69ea      	ldr	r2, [r5, #28]
 8009980:	430a      	orrs	r2, r1
 8009982:	61ea      	str	r2, [r5, #28]
 8009984:	69eb      	ldr	r3, [r5, #28]
 8009986:	400b      	ands	r3, r1
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800998c:	f006 ff20 	bl	80107d0 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009990:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009992:	a806      	add	r0, sp, #24
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009998:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800999a:	f007 fb51 	bl	8011040 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800999e:	f007 fb21 	bl	8010fe4 <HAL_RCC_GetHCLKFreq>
 80099a2:	21fa      	movs	r1, #250	; 0xfa
 80099a4:	0089      	lsls	r1, r1, #2
 80099a6:	f7f6 fbd3 	bl	8000150 <__udivsi3>
 80099aa:	f005 fdbb 	bl	800f524 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80099ae:	2004      	movs	r0, #4
 80099b0:	f005 fdd4 	bl	800f55c <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80099b4:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE()
 80099b6:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80099b8:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE()
 80099ba:	4323      	orrs	r3, r4
 80099bc:	61ab      	str	r3, [r5, #24]
 80099be:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80099c0:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE()
 80099c2:	401c      	ands	r4, r3
 80099c4:	9401      	str	r4, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80099c6:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE()
 80099c8:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80099ca:	f005 fd6b 	bl	800f4a4 <HAL_NVIC_SetPriority>
}
 80099ce:	b01b      	add	sp, #108	; 0x6c
 80099d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d2:	46c0      	nop			; (mov r8, r8)
 80099d4:	00040003 	.word	0x00040003
 80099d8:	40021000 	.word	0x40021000

080099dc <SaveToRO>:
uint8_t SaveToRO(void) {
 80099dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099de:	46de      	mov	lr, fp
 80099e0:	4657      	mov	r7, sl
 80099e2:	464e      	mov	r6, r9
 80099e4:	4645      	mov	r5, r8
 80099e6:	b5e0      	push	{r5, r6, r7, lr}
 80099e8:	b087      	sub	sp, #28
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 80099ea:	2215      	movs	r2, #21
 80099ec:	2100      	movs	r1, #0
 80099ee:	4668      	mov	r0, sp
 80099f0:	f008 fde2 	bl	80125b8 <memset>
	HAL_FLASH_Unlock();
 80099f4:	f006 fbfe 	bl	80101f4 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 80099f8:	486a      	ldr	r0, [pc, #424]	; (8009ba4 <SaveToRO+0x1c8>)
 80099fa:	f006 fd2b 	bl	8010454 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 80099fe:	486a      	ldr	r0, [pc, #424]	; (8009ba8 <SaveToRO+0x1cc>)
 8009a00:	f006 fc14 	bl	801022c <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK) {
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d16e      	bne.n	8009ae6 <SaveToRO+0x10a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8009a08:	2202      	movs	r2, #2
 8009a0a:	4c68      	ldr	r4, [pc, #416]	; (8009bac <SaveToRO+0x1d0>)
 8009a0c:	6923      	ldr	r3, [r4, #16]
 8009a0e:	4393      	bics	r3, r2
 8009a10:	6123      	str	r3, [r4, #16]
	if (myID) {
 8009a12:	4b67      	ldr	r3, [pc, #412]	; (8009bb0 <SaveToRO+0x1d4>)
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d000      	beq.n	8009a1c <SaveToRO+0x40>
 8009a1a:	e06e      	b.n	8009afa <SaveToRO+0x11e>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8009a1c:	4b65      	ldr	r3, [pc, #404]	; (8009bb4 <SaveToRO+0x1d8>)
 8009a1e:	469a      	mov	sl, r3
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d100      	bne.n	8009a28 <SaveToRO+0x4c>
 8009a26:	e0b8      	b.n	8009b9a <SaveToRO+0x1be>
 8009a28:	4b63      	ldr	r3, [pc, #396]	; (8009bb8 <SaveToRO+0x1dc>)
 8009a2a:	2500      	movs	r5, #0
 8009a2c:	4c63      	ldr	r4, [pc, #396]	; (8009bbc <SaveToRO+0x1e0>)
 8009a2e:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a30:	4f5e      	ldr	r7, [pc, #376]	; (8009bac <SaveToRO+0x1d0>)
 8009a32:	e006      	b.n	8009a42 <SaveToRO+0x66>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8009a34:	4653      	mov	r3, sl
 8009a36:	3501      	adds	r5, #1
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	b2ed      	uxtb	r5, r5
 8009a3c:	42ab      	cmp	r3, r5
 8009a3e:	d800      	bhi.n	8009a42 <SaveToRO+0x66>
 8009a40:	e0ab      	b.n	8009b9a <SaveToRO+0x1be>
		if (snippets[s].cond.conditionType) {
 8009a42:	00ab      	lsls	r3, r5, #2
 8009a44:	1959      	adds	r1, r3, r5
 8009a46:	4698      	mov	r8, r3
 8009a48:	464b      	mov	r3, r9
 8009a4a:	0089      	lsls	r1, r1, #2
 8009a4c:	5c5b      	ldrb	r3, [r3, r1]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d0f0      	beq.n	8009a34 <SaveToRO+0x58>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 8009a52:	466b      	mov	r3, sp
 8009a54:	22fe      	movs	r2, #254	; 0xfe
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 8009a56:	1c58      	adds	r0, r3, #1
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 8009a58:	701a      	strb	r2, [r3, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 8009a5a:	4449      	add	r1, r9
 8009a5c:	2214      	movs	r2, #20
 8009a5e:	f008 fda2 	bl	80125a6 <memcpy>
 8009a62:	2314      	movs	r3, #20
 8009a64:	469b      	mov	fp, r3
						*(uint16_t*) &snipBuffer[j * 2]);
 8009a66:	466b      	mov	r3, sp
 8009a68:	44a3      	add	fp, r4
 8009a6a:	1b1e      	subs	r6, r3, r4
 8009a6c:	465b      	mov	r3, fp
 8009a6e:	46ab      	mov	fp, r5
 8009a70:	001d      	movs	r5, r3
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 8009a72:	5b32      	ldrh	r2, [r6, r4]
 8009a74:	2300      	movs	r3, #0
 8009a76:	0021      	movs	r1, r4
 8009a78:	2001      	movs	r0, #1
 8009a7a:	f006 fc1b 	bl	80102b4 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 8009a7e:	484a      	ldr	r0, [pc, #296]	; (8009ba8 <SaveToRO+0x1cc>)
 8009a80:	f006 fbd4 	bl	801022c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d12e      	bne.n	8009ae6 <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a88:	2201      	movs	r2, #1
 8009a8a:	693b      	ldr	r3, [r7, #16]
					currentAdd += 2;
 8009a8c:	3402      	adds	r4, #2
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a8e:	4393      	bics	r3, r2
 8009a90:	613b      	str	r3, [r7, #16]
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 8009a92:	42ac      	cmp	r4, r5
 8009a94:	d1ed      	bne.n	8009a72 <SaveToRO+0x96>
 8009a96:	465d      	mov	r5, fp
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009a98:	4643      	mov	r3, r8
 8009a9a:	195b      	adds	r3, r3, r5
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	444b      	add	r3, r9
 8009aa0:	2600      	movs	r6, #0
 8009aa2:	4698      	mov	r8, r3
 8009aa4:	0025      	movs	r5, r4
 8009aa6:	e012      	b.n	8009ace <SaveToRO+0xf2>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 8009aa8:	0073      	lsls	r3, r6, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 8009aaa:	5ae2      	ldrh	r2, [r4, r3]
 8009aac:	0029      	movs	r1, r5
 8009aae:	2300      	movs	r3, #0
 8009ab0:	2001      	movs	r0, #1
 8009ab2:	f006 fbff 	bl	80102b4 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 8009ab6:	483c      	ldr	r0, [pc, #240]	; (8009ba8 <SaveToRO+0x1cc>)
 8009ab8:	f006 fbb8 	bl	801022c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009abc:	2800      	cmp	r0, #0
 8009abe:	d112      	bne.n	8009ae6 <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	693b      	ldr	r3, [r7, #16]
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009ac4:	3601      	adds	r6, #1
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009ac6:	4393      	bics	r3, r2
 8009ac8:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 8009aca:	3502      	adds	r5, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009acc:	b2f6      	uxtb	r6, r6
 8009ace:	4643      	mov	r3, r8
 8009ad0:	68dc      	ldr	r4, [r3, #12]
 8009ad2:	0020      	movs	r0, r4
 8009ad4:	f7f6 fb20 	bl	8000118 <strlen>
 8009ad8:	3001      	adds	r0, #1
 8009ada:	0840      	lsrs	r0, r0, #1
 8009adc:	4286      	cmp	r6, r0
 8009ade:	d3e3      	bcc.n	8009aa8 <SaveToRO+0xcc>
 8009ae0:	002c      	movs	r4, r5
 8009ae2:	465d      	mov	r5, fp
 8009ae4:	e7a6      	b.n	8009a34 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 8009ae6:	4b36      	ldr	r3, [pc, #216]	; (8009bc0 <SaveToRO+0x1e4>)
 8009ae8:	69d8      	ldr	r0, [r3, #28]
 8009aea:	b2c0      	uxtb	r0, r0
}
 8009aec:	b007      	add	sp, #28
 8009aee:	bc3c      	pop	{r2, r3, r4, r5}
 8009af0:	4690      	mov	r8, r2
 8009af2:	4699      	mov	r9, r3
 8009af4:	46a2      	mov	sl, r4
 8009af6:	46ab      	mov	fp, r5
 8009af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 8009afa:	4a32      	ldr	r2, [pc, #200]	; (8009bc4 <SaveToRO+0x1e8>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009afc:	4929      	ldr	r1, [pc, #164]	; (8009ba4 <SaveToRO+0x1c8>)
		temp = (uint16_t) (N << 8) + myID;
 8009afe:	4693      	mov	fp, r2
 8009b00:	7812      	ldrb	r2, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009b02:	2001      	movs	r0, #1
		temp = (uint16_t) (N << 8) + myID;
 8009b04:	0212      	lsls	r2, r2, #8
 8009b06:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009b08:	b292      	uxth	r2, r2
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f006 fbd2 	bl	80102b4 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 8009b10:	4825      	ldr	r0, [pc, #148]	; (8009ba8 <SaveToRO+0x1cc>)
 8009b12:	f006 fb8b 	bl	801022c <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d1e5      	bne.n	8009ae6 <SaveToRO+0x10a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	6923      	ldr	r3, [r4, #16]
 8009b1e:	4393      	bics	r3, r2
 8009b20:	6123      	str	r3, [r4, #16]
		for (uint8_t i = 1; i <= N; i++) {
 8009b22:	465b      	mov	r3, fp
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d100      	bne.n	8009b2c <SaveToRO+0x150>
 8009b2a:	e777      	b.n	8009a1c <SaveToRO+0x40>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	469a      	mov	sl, r3
 8009b30:	4b25      	ldr	r3, [pc, #148]	; (8009bc8 <SaveToRO+0x1ec>)
	uint16_t add = 2, temp = 0;
 8009b32:	2602      	movs	r6, #2
 8009b34:	4699      	mov	r9, r3
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009b36:	46a0      	mov	r8, r4
 8009b38:	4653      	mov	r3, sl
 8009b3a:	1e5d      	subs	r5, r3, #1
 8009b3c:	2316      	movs	r3, #22
 8009b3e:	464f      	mov	r7, r9
 8009b40:	435d      	muls	r5, r3
 8009b42:	464b      	mov	r3, r9
 8009b44:	3716      	adds	r7, #22
 8009b46:	195c      	adds	r4, r3, r5
 8009b48:	197f      	adds	r7, r7, r5
 8009b4a:	e002      	b.n	8009b52 <SaveToRO+0x176>
 8009b4c:	3402      	adds	r4, #2
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8009b4e:	42a7      	cmp	r7, r4
 8009b50:	d01a      	beq.n	8009b88 <SaveToRO+0x1ac>
				if (array[i - 1][0]) {
 8009b52:	464b      	mov	r3, r9
 8009b54:	5b5b      	ldrh	r3, [r3, r5]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d0f8      	beq.n	8009b4c <SaveToRO+0x170>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8009b5a:	4b12      	ldr	r3, [pc, #72]	; (8009ba4 <SaveToRO+0x1c8>)
 8009b5c:	8822      	ldrh	r2, [r4, #0]
 8009b5e:	18f1      	adds	r1, r6, r3
 8009b60:	2001      	movs	r0, #1
 8009b62:	2300      	movs	r3, #0
 8009b64:	f006 fba6 	bl	80102b4 <HAL_FLASH_Program>
					add += 2;
 8009b68:	3602      	adds	r6, #2
					FlashStatus = FLASH_WaitForLastOperation(
 8009b6a:	480f      	ldr	r0, [pc, #60]	; (8009ba8 <SaveToRO+0x1cc>)
					add += 2;
 8009b6c:	b2b6      	uxth	r6, r6
					FlashStatus = FLASH_WaitForLastOperation(
 8009b6e:	f006 fb5d 	bl	801022c <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d1b7      	bne.n	8009ae6 <SaveToRO+0x10a>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009b76:	4643      	mov	r3, r8
 8009b78:	2201      	movs	r2, #1
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	3402      	adds	r4, #2
 8009b7e:	4393      	bics	r3, r2
 8009b80:	4642      	mov	r2, r8
 8009b82:	6113      	str	r3, [r2, #16]
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8009b84:	42a7      	cmp	r7, r4
 8009b86:	d1e4      	bne.n	8009b52 <SaveToRO+0x176>
		for (uint8_t i = 1; i <= N; i++) {
 8009b88:	4653      	mov	r3, sl
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	469a      	mov	sl, r3
 8009b90:	465b      	mov	r3, fp
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	4553      	cmp	r3, sl
 8009b96:	d2cf      	bcs.n	8009b38 <SaveToRO+0x15c>
 8009b98:	e740      	b.n	8009a1c <SaveToRO+0x40>
	HAL_FLASH_Lock();
 8009b9a:	f006 fb3d 	bl	8010218 <HAL_FLASH_Lock>
	return result;
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	e7a4      	b.n	8009aec <SaveToRO+0x110>
 8009ba2:	46c0      	nop			; (mov r8, r8)
 8009ba4:	0801d800 	.word	0x0801d800
 8009ba8:	0000c350 	.word	0x0000c350
 8009bac:	40022000 	.word	0x40022000
 8009bb0:	20000aa8 	.word	0x20000aa8
 8009bb4:	200016e4 	.word	0x200016e4
 8009bb8:	20006890 	.word	0x20006890
 8009bbc:	0801dc00 	.word	0x0801dc00
 8009bc0:	20006da8 	.word	0x20006da8
 8009bc4:	20000010 	.word	0x20000010
 8009bc8:	20000ee4 	.word	0x20000ee4

08009bcc <ClearROtopology>:
	memset(array, 0, sizeof(array));
 8009bcc:	228f      	movs	r2, #143	; 0x8f
uint8_t ClearROtopology(void) {
 8009bce:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 8009bd0:	0092      	lsls	r2, r2, #2
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	4805      	ldr	r0, [pc, #20]	; (8009bec <ClearROtopology+0x20>)
 8009bd6:	f008 fcef 	bl	80125b8 <memset>
	N = 1;
 8009bda:	2201      	movs	r2, #1
 8009bdc:	4b04      	ldr	r3, [pc, #16]	; (8009bf0 <ClearROtopology+0x24>)
 8009bde:	701a      	strb	r2, [r3, #0]
	myID = 0;
 8009be0:	2200      	movs	r2, #0
 8009be2:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <ClearROtopology+0x28>)
 8009be4:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 8009be6:	f7ff fef9 	bl	80099dc <SaveToRO>
}
 8009bea:	bd10      	pop	{r4, pc}
 8009bec:	20000ee4 	.word	0x20000ee4
 8009bf0:	20000010 	.word	0x20000010
 8009bf4:	20000aa8 	.word	0x20000aa8

08009bf8 <SetupPortForRemoteBootloaderUpdate>:
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8009bf8:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8009bfa:	f003 f93d 	bl	800ce78 <GetUart>
	huart->Init.BaudRate =57600;
 8009bfe:	23e1      	movs	r3, #225	; 0xe1
 8009c00:	021b      	lsls	r3, r3, #8
 8009c02:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8009c04:	2380      	movs	r3, #128	; 0x80
 8009c06:	00db      	lsls	r3, r3, #3
 8009c08:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8009c0a:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 8009c0c:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8009c0e:	015b      	lsls	r3, r3, #5
 8009c10:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8009c12:	f008 f8ad 	bl	8011d70 <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8009c16:	2120      	movs	r1, #32
 8009c18:	6822      	ldr	r2, [r4, #0]
 8009c1a:	6813      	ldr	r3, [r2, #0]
 8009c1c:	430b      	orrs	r3, r1
 8009c1e:	6013      	str	r3, [r2, #0]
}
 8009c20:	bd10      	pop	{r4, pc}
 8009c22:	46c0      	nop			; (mov r8, r8)

08009c24 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c26:	46ce      	mov	lr, r9
 8009c28:	4647      	mov	r7, r8
 8009c2a:	4698      	mov	r8, r3
 8009c2c:	b580      	push	{r7, lr}
	myOutport =FindRoute(myID,dst);
 8009c2e:	4c2a      	ldr	r4, [pc, #168]	; (8009cd8 <remoteBootloaderUpdate+0xb4>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009c30:	b085      	sub	sp, #20
 8009c32:	4681      	mov	r9, r0
	myOutport =FindRoute(myID,dst);
 8009c34:	7820      	ldrb	r0, [r4, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009c36:	000f      	movs	r7, r1
 8009c38:	0015      	movs	r5, r2
	myOutport =FindRoute(myID,dst);
 8009c3a:	f7f9 ff63 	bl	8003b04 <FindRoute>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009c3e:	4643      	mov	r3, r8
	myOutport =FindRoute(myID,dst);
 8009c40:	0006      	movs	r6, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d11a      	bne.n	8009c7c <remoteBootloaderUpdate+0x58>
	if(src == myID){
 8009c46:	7823      	ldrb	r3, [r4, #0]
 8009c48:	454b      	cmp	r3, r9
 8009c4a:	d03b      	beq.n	8009cc4 <remoteBootloaderUpdate+0xa0>
	SetupPortForRemoteBootloaderUpdate(inport);
 8009c4c:	0028      	movs	r0, r5
 8009c4e:	f7ff ffd3 	bl	8009bf8 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8009c52:	0030      	movs	r0, r6
 8009c54:	f7ff ffd0 	bl	8009bf8 <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8009c58:	2300      	movs	r3, #0
 8009c5a:	7821      	ldrb	r1, [r4, #0]
 8009c5c:	9303      	str	r3, [sp, #12]
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	9302      	str	r3, [sp, #8]
 8009c62:	9301      	str	r3, [sp, #4]
 8009c64:	3303      	adds	r3, #3
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	0032      	movs	r2, r6
 8009c6a:	000b      	movs	r3, r1
 8009c6c:	0028      	movs	r0, r5
 8009c6e:	f7fe fa7f 	bl	8008170 <StartScastDMAStream>
}
 8009c72:	b005      	add	sp, #20
 8009c74:	bc0c      	pop	{r2, r3}
 8009c76:	4690      	mov	r8, r2
 8009c78:	4699      	mov	r9, r3
 8009c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009c7c:	7823      	ldrb	r3, [r4, #0]
 8009c7e:	42bb      	cmp	r3, r7
 8009c80:	d01c      	beq.n	8009cbc <remoteBootloaderUpdate+0x98>
	if(src == myID){
 8009c82:	454b      	cmp	r3, r9
 8009c84:	d1e2      	bne.n	8009c4c <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009c86:	f003 fb35 	bl	800d2f4 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8009c8a:	4b14      	ldr	r3, [pc, #80]	; (8009cdc <remoteBootloaderUpdate+0xb8>)
 8009c8c:	003a      	movs	r2, r7
 8009c8e:	6819      	ldr	r1, [r3, #0]
 8009c90:	4643      	mov	r3, r8
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009c92:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8009c94:	f008 fe8a 	bl	80129ac <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8009c98:	4b11      	ldr	r3, [pc, #68]	; (8009ce0 <remoteBootloaderUpdate+0xbc>)
 8009c9a:	4648      	mov	r0, r9
 8009c9c:	6819      	ldr	r1, [r3, #0]
 8009c9e:	f008 fea5 	bl	80129ec <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8009ca2:	4648      	mov	r0, r9
 8009ca4:	f7f6 fa38 	bl	8000118 <strlen>
 8009ca8:	2332      	movs	r3, #50	; 0x32
 8009caa:	b282      	uxth	r2, r0
 8009cac:	4649      	mov	r1, r9
 8009cae:	0028      	movs	r0, r5
 8009cb0:	f003 f8b0 	bl	800ce14 <writePxITMutex>
		Delay_ms(100);
 8009cb4:	2064      	movs	r0, #100	; 0x64
 8009cb6:	f005 f8bd 	bl	800ee34 <HAL_Delay>
 8009cba:	e7c7      	b.n	8009c4c <remoteBootloaderUpdate+0x28>
 8009cbc:	4646      	mov	r6, r8
	if(src == myID){
 8009cbe:	454f      	cmp	r7, r9
 8009cc0:	d1c4      	bne.n	8009c4c <remoteBootloaderUpdate+0x28>
 8009cc2:	e7e0      	b.n	8009c86 <remoteBootloaderUpdate+0x62>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009cc4:	f003 fb16 	bl	800d2f4 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8009cc8:	4b06      	ldr	r3, [pc, #24]	; (8009ce4 <remoteBootloaderUpdate+0xc0>)
 8009cca:	003a      	movs	r2, r7
 8009ccc:	6819      	ldr	r1, [r3, #0]
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009cce:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8009cd0:	f008 fe6c 	bl	80129ac <sprintf>
 8009cd4:	e7e0      	b.n	8009c98 <remoteBootloaderUpdate+0x74>
 8009cd6:	46c0      	nop			; (mov r8, r8)
 8009cd8:	20000aa8 	.word	0x20000aa8
 8009cdc:	20000060 	.word	0x20000060
 8009ce0:	2000005c 	.word	0x2000005c
 8009ce4:	20000064 	.word	0x20000064

08009ce8 <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 8009ce8:	b500      	push	{lr}
 8009cea:	b083      	sub	sp, #12
	MX_USART1_UART_Init();
 8009cec:	f002 fef6 	bl	800cadc <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8009cf0:	f002 ff0c 	bl	800cb0c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8009cf4:	f002 ff22 	bl	800cb3c <MX_USART3_UART_Init>
	MX_USART5_UART_Init();
 8009cf8:	f002 ff38 	bl	800cb6c <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 8009cfc:	f002 ff4e 	bl	800cb9c <MX_USART6_UART_Init>
	xTimerSwitch =xTimerCreate("SwitchTimer",pdMS_TO_TICKS(1000),pdFALSE,(void* )1,SwitchTimerCallback);
 8009d00:	21fa      	movs	r1, #250	; 0xfa
 8009d02:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <Module_Peripheral_Init+0x38>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	0089      	lsls	r1, r1, #2
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	4805      	ldr	r0, [pc, #20]	; (8009d24 <Module_Peripheral_Init+0x3c>)
 8009d0e:	f004 fd91 	bl	800e834 <xTimerCreate>
 8009d12:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <Module_Peripheral_Init+0x40>)
 8009d14:	6058      	str	r0, [r3, #4]
	Switch_Init();
 8009d16:	f001 fa49 	bl	800b1ac <Switch_Init>
}
 8009d1a:	b003      	add	sp, #12
 8009d1c:	bd00      	pop	{pc}
 8009d1e:	46c0      	nop			; (mov r8, r8)
 8009d20:	08009ed5 	.word	0x08009ed5
 8009d24:	08019acc 	.word	0x08019acc
 8009d28:	20001fbc 	.word	0x20001fbc

08009d2c <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 8009d2c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&onCommandDefinition);
 8009d2e:	4c08      	ldr	r4, [pc, #32]	; (8009d50 <RegisterModuleCLICommands+0x24>)
 8009d30:	0020      	movs	r0, r4
 8009d32:	f003 fa4f 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&offCommandDefinition);
 8009d36:	0020      	movs	r0, r4
 8009d38:	3010      	adds	r0, #16
 8009d3a:	f003 fa4b 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&toggleCommandDefinition);
 8009d3e:	0020      	movs	r0, r4
 8009d40:	3020      	adds	r0, #32
 8009d42:	f003 fa47 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ledModeCommandDefinition);
 8009d46:	0020      	movs	r0, r4
 8009d48:	3030      	adds	r0, #48	; 0x30
 8009d4a:	f003 fa43 	bl	800d1d4 <FreeRTOS_CLIRegisterCommand>
}
 8009d4e:	bd10      	pop	{r4, pc}
 8009d50:	08017304 	.word	0x08017304

08009d54 <GetPort>:
	if (huart->Instance == USART5)
 8009d54:	6800      	ldr	r0, [r0, #0]
 8009d56:	4b0e      	ldr	r3, [pc, #56]	; (8009d90 <GetPort+0x3c>)
 8009d58:	4298      	cmp	r0, r3
 8009d5a:	d011      	beq.n	8009d80 <GetPort+0x2c>
	else if (huart->Instance == USART2)
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	; (8009d94 <GetPort+0x40>)
 8009d5e:	4298      	cmp	r0, r3
 8009d60:	d012      	beq.n	8009d88 <GetPort+0x34>
	else if (huart->Instance == USART6)
 8009d62:	4b0d      	ldr	r3, [pc, #52]	; (8009d98 <GetPort+0x44>)
 8009d64:	4298      	cmp	r0, r3
 8009d66:	d011      	beq.n	8009d8c <GetPort+0x38>
	else if (huart->Instance == USART3)
 8009d68:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <GetPort+0x48>)
 8009d6a:	4298      	cmp	r0, r3
 8009d6c:	d00a      	beq.n	8009d84 <GetPort+0x30>
	return 0;
 8009d6e:	4b0c      	ldr	r3, [pc, #48]	; (8009da0 <GetPort+0x4c>)
 8009d70:	469c      	mov	ip, r3
 8009d72:	4460      	add	r0, ip
 8009d74:	4243      	negs	r3, r0
 8009d76:	4158      	adcs	r0, r3
 8009d78:	2305      	movs	r3, #5
 8009d7a:	4240      	negs	r0, r0
 8009d7c:	4018      	ands	r0, r3
}
 8009d7e:	4770      	bx	lr
		return P1;
 8009d80:	2001      	movs	r0, #1
 8009d82:	e7fc      	b.n	8009d7e <GetPort+0x2a>
		return P4;
 8009d84:	2004      	movs	r0, #4
 8009d86:	e7fa      	b.n	8009d7e <GetPort+0x2a>
		return P2;
 8009d88:	2002      	movs	r0, #2
 8009d8a:	e7f8      	b.n	8009d7e <GetPort+0x2a>
		return P3;
 8009d8c:	2003      	movs	r0, #3
 8009d8e:	e7f6      	b.n	8009d7e <GetPort+0x2a>
 8009d90:	40005000 	.word	0x40005000
 8009d94:	40004400 	.word	0x40004400
 8009d98:	40011400 	.word	0x40011400
 8009d9c:	40004800 	.word	0x40004800
 8009da0:	bffec800 	.word	0xbffec800

08009da4 <Output_on>:
Module_Status Output_on(uint32_t timeout) {
 8009da4:	b530      	push	{r4, r5, lr}
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 8009da6:	2201      	movs	r2, #1
Module_Status Output_on(uint32_t timeout) {
 8009da8:	b083      	sub	sp, #12
 8009daa:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 8009dac:	2101      	movs	r1, #1
 8009dae:	481b      	ldr	r0, [pc, #108]	; (8009e1c <Output_on+0x78>)
 8009db0:	f006 fd02 	bl	80107b8 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 8009db4:	4c1a      	ldr	r4, [pc, #104]	; (8009e20 <Output_on+0x7c>)
 8009db6:	7823      	ldrb	r3, [r4, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d11e      	bne.n	8009dfa <Output_on+0x56>
	if (timeout != portMAX_DELAY) {
 8009dbc:	1c6b      	adds	r3, r5, #1
 8009dbe:	d015      	beq.n	8009dec <Output_on+0x48>
		if (xTimerIsTimerActive(xTimerSwitch))
 8009dc0:	6860      	ldr	r0, [r4, #4]
 8009dc2:	f004 fe87 	bl	800ead4 <xTimerIsTimerActive>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d11f      	bne.n	8009e0a <Output_on+0x66>
		xTimerChangePeriod(xTimerSwitch, pdMS_TO_TICKS(timeout), 100);
 8009dca:	21fa      	movs	r1, #250	; 0xfa
 8009dcc:	0168      	lsls	r0, r5, #5
 8009dce:	1b40      	subs	r0, r0, r5
 8009dd0:	0080      	lsls	r0, r0, #2
 8009dd2:	1940      	adds	r0, r0, r5
 8009dd4:	0089      	lsls	r1, r1, #2
 8009dd6:	00c0      	lsls	r0, r0, #3
 8009dd8:	f7f6 f9ba 	bl	8000150 <__udivsi3>
 8009ddc:	2364      	movs	r3, #100	; 0x64
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	0002      	movs	r2, r0
 8009de2:	2300      	movs	r3, #0
 8009de4:	2104      	movs	r1, #4
 8009de6:	6860      	ldr	r0, [r4, #4]
 8009de8:	f004 fd44 	bl	800e874 <xTimerGenericCommand>
	Switch_state = STATE_ON;
 8009dec:	2301      	movs	r3, #1
}
 8009dee:	2000      	movs	r0, #0
	Switch_Oldstate = Switch_state;
 8009df0:	4a0c      	ldr	r2, [pc, #48]	; (8009e24 <Output_on+0x80>)
	Switch_state = STATE_ON;
 8009df2:	7223      	strb	r3, [r4, #8]
	Switch_Oldstate = Switch_state;
 8009df4:	7013      	strb	r3, [r2, #0]
}
 8009df6:	b003      	add	sp, #12
 8009df8:	bd30      	pop	{r4, r5, pc}
		IND_ON();
 8009dfa:	2180      	movs	r1, #128	; 0x80
 8009dfc:	2090      	movs	r0, #144	; 0x90
 8009dfe:	2201      	movs	r2, #1
 8009e00:	0109      	lsls	r1, r1, #4
 8009e02:	05c0      	lsls	r0, r0, #23
 8009e04:	f006 fcd8 	bl	80107b8 <HAL_GPIO_WritePin>
 8009e08:	e7d8      	b.n	8009dbc <Output_on+0x18>
			xTimerStop(xTimerSwitch, 100);
 8009e0a:	2364      	movs	r3, #100	; 0x64
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2300      	movs	r3, #0
 8009e12:	2103      	movs	r1, #3
 8009e14:	6860      	ldr	r0, [r4, #4]
 8009e16:	f004 fd2d 	bl	800e874 <xTimerGenericCommand>
 8009e1a:	e7d6      	b.n	8009dca <Output_on+0x26>
 8009e1c:	48000400 	.word	0x48000400
 8009e20:	20001fbc 	.word	0x20001fbc
 8009e24:	2000009c 	.word	0x2000009c

08009e28 <onCommand>:
	portBASE_TYPE xParameterStringLength1 = 0;
 8009e28:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 8009e2a:	b530      	push	{r4, r5, lr}
 8009e2c:	b083      	sub	sp, #12
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009e2e:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 8009e30:	0005      	movs	r5, r0
 8009e32:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009e34:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 8009e36:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009e38:	f003 fa60 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if (!strcmp((char*) pcParameterString1, "inf")
 8009e3c:	4914      	ldr	r1, [pc, #80]	; (8009e90 <onCommand+0x68>)
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8009e3e:	0004      	movs	r4, r0
	if (!strcmp((char*) pcParameterString1, "inf")
 8009e40:	f7f6 f960 	bl	8000104 <strcmp>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d005      	beq.n	8009e54 <onCommand+0x2c>
			|| !strcmp((char*) pcParameterString1, "INF"))
 8009e48:	4912      	ldr	r1, [pc, #72]	; (8009e94 <onCommand+0x6c>)
 8009e4a:	0020      	movs	r0, r4
 8009e4c:	f7f6 f95a 	bl	8000104 <strcmp>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	d10d      	bne.n	8009e70 <onCommand+0x48>
	result = Output_on(timeout);
 8009e54:	2001      	movs	r0, #1
 8009e56:	4240      	negs	r0, r0
 8009e58:	f7ff ffa4 	bl	8009da4 <Output_on>
	if (result == H0FRx_OK) {
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d104      	bne.n	8009e6a <onCommand+0x42>
			strcpy((char*) pcWriteBuffer, (char*) pcOKMessageInf);
 8009e60:	2232      	movs	r2, #50	; 0x32
 8009e62:	490d      	ldr	r1, [pc, #52]	; (8009e98 <onCommand+0x70>)
 8009e64:	0028      	movs	r0, r5
 8009e66:	f008 fb9e 	bl	80125a6 <memcpy>
}
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	b003      	add	sp, #12
 8009e6e:	bd30      	pop	{r4, r5, pc}
		timeout = (uint32_t) atol((char*) pcParameterString1);
 8009e70:	0020      	movs	r0, r4
 8009e72:	f008 f8d8 	bl	8012026 <atol>
 8009e76:	0004      	movs	r4, r0
	result = Output_on(timeout);
 8009e78:	f7ff ff94 	bl	8009da4 <Output_on>
	if (result == H0FRx_OK) {
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d1f4      	bne.n	8009e6a <onCommand+0x42>
		if (timeout != portMAX_DELAY) {
 8009e80:	1c63      	adds	r3, r4, #1
 8009e82:	d0ed      	beq.n	8009e60 <onCommand+0x38>
			sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, timeout);
 8009e84:	0022      	movs	r2, r4
 8009e86:	4905      	ldr	r1, [pc, #20]	; (8009e9c <onCommand+0x74>)
 8009e88:	0028      	movs	r0, r5
 8009e8a:	f008 fd8f 	bl	80129ac <sprintf>
 8009e8e:	e7ec      	b.n	8009e6a <onCommand+0x42>
 8009e90:	08019ad8 	.word	0x08019ad8
 8009e94:	08019adc 	.word	0x08019adc
 8009e98:	08019b18 	.word	0x08019b18
 8009e9c:	08019ae0 	.word	0x08019ae0

08009ea0 <Output_off>:
Module_Status Output_off(void) {
 8009ea0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_RESET);
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	4809      	ldr	r0, [pc, #36]	; (8009ecc <Output_off+0x2c>)
 8009ea8:	f006 fc86 	bl	80107b8 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 8009eac:	4c08      	ldr	r4, [pc, #32]	; (8009ed0 <Output_off+0x30>)
 8009eae:	7823      	ldrb	r3, [r4, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d006      	beq.n	8009ec2 <Output_off+0x22>
		IND_OFF();
 8009eb4:	2180      	movs	r1, #128	; 0x80
 8009eb6:	2090      	movs	r0, #144	; 0x90
 8009eb8:	2200      	movs	r2, #0
 8009eba:	0109      	lsls	r1, r1, #4
 8009ebc:	05c0      	lsls	r0, r0, #23
 8009ebe:	f006 fc7b 	bl	80107b8 <HAL_GPIO_WritePin>
	Switch_state = STATE_OFF;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	2000      	movs	r0, #0
	Switch_state = STATE_OFF;
 8009ec6:	7223      	strb	r3, [r4, #8]
}
 8009ec8:	bd10      	pop	{r4, pc}
 8009eca:	46c0      	nop			; (mov r8, r8)
 8009ecc:	48000400 	.word	0x48000400
 8009ed0:	20001fbc 	.word	0x20001fbc

08009ed4 <SwitchTimerCallback>:
void SwitchTimerCallback(TimerHandle_t xTimerSwitch) {
 8009ed4:	b510      	push	{r4, lr}
	Output_off();
 8009ed6:	f7ff ffe3 	bl	8009ea0 <Output_off>
}
 8009eda:	bd10      	pop	{r4, pc}

08009edc <offCommand>:
		const int8_t *pcCommandString) {
 8009edc:	b510      	push	{r4, lr}
 8009ede:	0004      	movs	r4, r0
	result = Output_off();
 8009ee0:	f7ff ffde 	bl	8009ea0 <Output_off>
	if (result == H0FRx_OK) {
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d104      	bne.n	8009ef2 <offCommand+0x16>
		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 8009ee8:	2223      	movs	r2, #35	; 0x23
 8009eea:	4903      	ldr	r1, [pc, #12]	; (8009ef8 <offCommand+0x1c>)
 8009eec:	0020      	movs	r0, r4
 8009eee:	f008 fb5a 	bl	80125a6 <memcpy>
}
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	bd10      	pop	{r4, pc}
 8009ef6:	46c0      	nop			; (mov r8, r8)
 8009ef8:	08019b4c 	.word	0x08019b4c

08009efc <Output_toggle>:
	if (Switch_state) {
 8009efc:	4b08      	ldr	r3, [pc, #32]	; (8009f20 <Output_toggle+0x24>)
Module_Status Output_toggle(void) {
 8009efe:	b510      	push	{r4, lr}
	if (Switch_state) {
 8009f00:	7a1b      	ldrb	r3, [r3, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d105      	bne.n	8009f12 <Output_toggle+0x16>
		if (Switch_Oldstate == STATE_ON)
 8009f06:	4b07      	ldr	r3, [pc, #28]	; (8009f24 <Output_toggle+0x28>)
	Module_Status result = H0FRx_OK;
 8009f08:	2000      	movs	r0, #0
		if (Switch_Oldstate == STATE_ON)
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d003      	beq.n	8009f18 <Output_toggle+0x1c>
}
 8009f10:	bd10      	pop	{r4, pc}
		result = Output_off();
 8009f12:	f7ff ffc5 	bl	8009ea0 <Output_off>
 8009f16:	e7fb      	b.n	8009f10 <Output_toggle+0x14>
			result = Output_on(portMAX_DELAY);
 8009f18:	3801      	subs	r0, #1
 8009f1a:	f7ff ff43 	bl	8009da4 <Output_on>
 8009f1e:	e7f7      	b.n	8009f10 <Output_toggle+0x14>
 8009f20:	20001fbc 	.word	0x20001fbc
 8009f24:	2000009c 	.word	0x2000009c

08009f28 <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 8009f28:	b510      	push	{r4, lr}
 8009f2a:	ab02      	add	r3, sp, #8
 8009f2c:	781a      	ldrb	r2, [r3, #0]
	switch (code) {
 8009f2e:	4b15      	ldr	r3, [pc, #84]	; (8009f84 <Module_MessagingTask+0x5c>)
 8009f30:	4298      	cmp	r0, r3
 8009f32:	d022      	beq.n	8009f7a <Module_MessagingTask+0x52>
 8009f34:	3301      	adds	r3, #1
 8009f36:	4298      	cmp	r0, r3
 8009f38:	d01b      	beq.n	8009f72 <Module_MessagingTask+0x4a>
 8009f3a:	4b13      	ldr	r3, [pc, #76]	; (8009f88 <Module_MessagingTask+0x60>)
 8009f3c:	4298      	cmp	r0, r3
 8009f3e:	d001      	beq.n	8009f44 <Module_MessagingTask+0x1c>
		result = H0FRx_ERR_UnknownMessage;
 8009f40:	2001      	movs	r0, #1
}
 8009f42:	bd10      	pop	{r4, pc}
		temp32 = cMessage[port - 1][shift] + ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t)cMessage[port - 1][3 + shift]<< 24);
 8009f44:	3901      	subs	r1, #1
 8009f46:	00cb      	lsls	r3, r1, #3
 8009f48:	1a59      	subs	r1, r3, r1
 8009f4a:	4b10      	ldr	r3, [pc, #64]	; (8009f8c <Module_MessagingTask+0x64>)
 8009f4c:	00c9      	lsls	r1, r1, #3
 8009f4e:	1859      	adds	r1, r3, r1
 8009f50:	188b      	adds	r3, r1, r2
 8009f52:	7858      	ldrb	r0, [r3, #1]
 8009f54:	789c      	ldrb	r4, [r3, #2]
 8009f56:	5c8a      	ldrb	r2, [r1, r2]
 8009f58:	78db      	ldrb	r3, [r3, #3]
 8009f5a:	0200      	lsls	r0, r0, #8
 8009f5c:	0424      	lsls	r4, r4, #16
 8009f5e:	1900      	adds	r0, r0, r4
 8009f60:	1880      	adds	r0, r0, r2
 8009f62:	061b      	lsls	r3, r3, #24
 8009f64:	18c0      	adds	r0, r0, r3
 8009f66:	4b0a      	ldr	r3, [pc, #40]	; (8009f90 <Module_MessagingTask+0x68>)
 8009f68:	6018      	str	r0, [r3, #0]
		Output_on(temp32);
 8009f6a:	f7ff ff1b 	bl	8009da4 <Output_on>
	Module_Status result = H0FRx_OK;
 8009f6e:	2000      	movs	r0, #0
		break;
 8009f70:	e7e7      	b.n	8009f42 <Module_MessagingTask+0x1a>
		Output_toggle();
 8009f72:	f7ff ffc3 	bl	8009efc <Output_toggle>
	Module_Status result = H0FRx_OK;
 8009f76:	2000      	movs	r0, #0
		break;
 8009f78:	e7e3      	b.n	8009f42 <Module_MessagingTask+0x1a>
		Output_off();
 8009f7a:	f7ff ff91 	bl	8009ea0 <Output_off>
	Module_Status result = H0FRx_OK;
 8009f7e:	2000      	movs	r0, #0
		break;
 8009f80:	e7df      	b.n	8009f42 <Module_MessagingTask+0x1a>
 8009f82:	46c0      	nop			; (mov r8, r8)
 8009f84:	000002ef 	.word	0x000002ef
 8009f88:	000002ee 	.word	0x000002ee
 8009f8c:	20000ca0 	.word	0x20000ca0
 8009f90:	20006b3c 	.word	0x20006b3c

08009f94 <toggleCommand>:
		const int8_t *pcCommandString) {
 8009f94:	b510      	push	{r4, lr}
 8009f96:	0004      	movs	r4, r0
	result = Output_toggle();
 8009f98:	f7ff ffb0 	bl	8009efc <Output_toggle>
	if (result == H0FRx_OK) {
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d108      	bne.n	8009fb2 <toggleCommand+0x1e>
		if (Switch_state) {
 8009fa0:	4b08      	ldr	r3, [pc, #32]	; (8009fc4 <toggleCommand+0x30>)
 8009fa2:	7a1b      	ldrb	r3, [r3, #8]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d106      	bne.n	8009fb6 <toggleCommand+0x22>
			strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 8009fa8:	2223      	movs	r2, #35	; 0x23
 8009faa:	4907      	ldr	r1, [pc, #28]	; (8009fc8 <toggleCommand+0x34>)
 8009fac:	0020      	movs	r0, r4
 8009fae:	f008 fafa 	bl	80125a6 <memcpy>
}
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	bd10      	pop	{r4, pc}
			strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 8009fb6:	2222      	movs	r2, #34	; 0x22
 8009fb8:	4904      	ldr	r1, [pc, #16]	; (8009fcc <toggleCommand+0x38>)
 8009fba:	0020      	movs	r0, r4
 8009fbc:	f008 faf3 	bl	80125a6 <memcpy>
 8009fc0:	e7f7      	b.n	8009fb2 <toggleCommand+0x1e>
 8009fc2:	46c0      	nop			; (mov r8, r8)
 8009fc4:	20001fbc 	.word	0x20001fbc
 8009fc8:	08019b4c 	.word	0x08019b4c
 8009fcc:	08019b70 	.word	0x08019b70

08009fd0 <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 8009fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fd2:	46de      	mov	lr, fp
 8009fd4:	4657      	mov	r7, sl
 8009fd6:	464e      	mov	r6, r9
 8009fd8:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 8009fda:	2201      	movs	r2, #1
 8009fdc:	4b53      	ldr	r3, [pc, #332]	; (800a12c <DMA_Init+0x15c>)
{
 8009fde:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 8009fe0:	6959      	ldr	r1, [r3, #20]
{
 8009fe2:	b083      	sub	sp, #12
	__DMA1_CLK_ENABLE();
 8009fe4:	4311      	orrs	r1, r2
 8009fe6:	6159      	str	r1, [r3, #20]
 8009fe8:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 8009fea:	4c51      	ldr	r4, [pc, #324]	; (800a130 <DMA_Init+0x160>)
	__DMA1_CLK_ENABLE();
 8009fec:	400a      	ands	r2, r1
 8009fee:	9200      	str	r2, [sp, #0]
 8009ff0:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009ff6:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 8009ff8:	4311      	orrs	r1, r2
 8009ffa:	6159      	str	r1, [r3, #20]
 8009ffc:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009ffe:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 800a000:	401a      	ands	r2, r3
 800a002:	9201      	str	r2, [sp, #4]
 800a004:	9b01      	ldr	r3, [sp, #4]
	hDMA->Instance = ch;
 800a006:	4b4b      	ldr	r3, [pc, #300]	; (800a134 <DMA_Init+0x164>)
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a008:	2680      	movs	r6, #128	; 0x80
	hDMA->Instance = ch;
 800a00a:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a00c:	2320      	movs	r3, #32
 800a00e:	469b      	mov	fp, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a010:	01bf      	lsls	r7, r7, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a012:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a014:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a016:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a018:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a01a:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a01c:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a01e:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800a020:	0020      	movs	r0, r4
 800a022:	f005 fbc7 	bl	800f7b4 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a026:	4b44      	ldr	r3, [pc, #272]	; (800a138 <DMA_Init+0x168>)
	HAL_DMA_Init(hDMA);		
 800a028:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a02a:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a02c:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a02e:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a030:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a032:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a034:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a036:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a038:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a03a:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800a03c:	3038      	adds	r0, #56	; 0x38
 800a03e:	f005 fbb9 	bl	800f7b4 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a042:	4b3e      	ldr	r3, [pc, #248]	; (800a13c <DMA_Init+0x16c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a044:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 800a046:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a048:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 800a04a:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a04c:	50e5      	str	r5, [r4, r3]
 800a04e:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a050:	3304      	adds	r3, #4
 800a052:	50e2      	str	r2, [r4, r3]
 800a054:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a056:	3304      	adds	r3, #4
 800a058:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a05a:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a05c:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a05e:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a060:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 800a062:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a064:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 800a066:	f005 fba5 	bl	800f7b4 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a06a:	23a8      	movs	r3, #168	; 0xa8
 800a06c:	4a34      	ldr	r2, [pc, #208]	; (800a140 <DMA_Init+0x170>)
	HAL_DMA_Init(hDMA);		
 800a06e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a070:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a072:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a074:	3304      	adds	r3, #4
 800a076:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a078:	3304      	adds	r3, #4
 800a07a:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a07c:	3304      	adds	r3, #4
 800a07e:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a080:	3304      	adds	r3, #4
 800a082:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a084:	3304      	adds	r3, #4
 800a086:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a088:	3304      	adds	r3, #4
 800a08a:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a08c:	3304      	adds	r3, #4
 800a08e:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800a090:	30a8      	adds	r0, #168	; 0xa8
 800a092:	f005 fb8f 	bl	800f7b4 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a096:	23e0      	movs	r3, #224	; 0xe0
 800a098:	4a2a      	ldr	r2, [pc, #168]	; (800a144 <DMA_Init+0x174>)
	HAL_DMA_Init(hDMA);		
 800a09a:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a09c:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a09e:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a0a0:	3304      	adds	r3, #4
 800a0a2:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a0b8:	3304      	adds	r3, #4
 800a0ba:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800a0bc:	30e0      	adds	r0, #224	; 0xe0
 800a0be:	f005 fb79 	bl	800f7b4 <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800a0c2:	4c21      	ldr	r4, [pc, #132]	; (800a148 <DMA_Init+0x178>)
 800a0c4:	4b21      	ldr	r3, [pc, #132]	; (800a14c <DMA_Init+0x17c>)
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a0c6:	60a5      	str	r5, [r4, #8]
	hDMA->Instance = ch;
 800a0c8:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a0ca:	2310      	movs	r3, #16
 800a0cc:	469b      	mov	fp, r3
 800a0ce:	6063      	str	r3, [r4, #4]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a0d0:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a0d2:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a0d4:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800a0d6:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a0d8:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800a0da:	0020      	movs	r0, r4
 800a0dc:	f005 fb6a 	bl	800f7b4 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a0e0:	4b1b      	ldr	r3, [pc, #108]	; (800a150 <DMA_Init+0x180>)
	HAL_DMA_Init(hDMA);		
 800a0e2:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a0e4:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a0e6:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a0e8:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a0ea:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a0ec:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a0ee:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a0f0:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 800a0f2:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a0f4:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800a0f6:	3038      	adds	r0, #56	; 0x38
 800a0f8:	f005 fb5c 	bl	800f7b4 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a0fc:	4b15      	ldr	r3, [pc, #84]	; (800a154 <DMA_Init+0x184>)
	HAL_DMA_Init(hDMA);		
 800a0fe:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a100:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a102:	465b      	mov	r3, fp
 800a104:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a106:	4653      	mov	r3, sl
 800a108:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 800a10a:	464b      	mov	r3, r9
 800a10c:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a10e:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a110:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a112:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a114:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a116:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800a118:	3070      	adds	r0, #112	; 0x70
 800a11a:	f005 fb4b 	bl	800f7b4 <HAL_DMA_Init>
}
 800a11e:	b003      	add	sp, #12
 800a120:	bc3c      	pop	{r2, r3, r4, r5}
 800a122:	4690      	mov	r8, r2
 800a124:	4699      	mov	r9, r3
 800a126:	46a2      	mov	sl, r4
 800a128:	46ab      	mov	fp, r5
 800a12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a12c:	40021000 	.word	0x40021000
 800a130:	2000227c 	.word	0x2000227c
 800a134:	40020008 	.word	0x40020008
 800a138:	40020030 	.word	0x40020030
 800a13c:	40020058 	.word	0x40020058
 800a140:	4002006c 	.word	0x4002006c
 800a144:	4002041c 	.word	0x4002041c
 800a148:	200021d4 	.word	0x200021d4
 800a14c:	4002001c 	.word	0x4002001c
 800a150:	40020044 	.word	0x40020044
 800a154:	40020080 	.word	0x40020080

0800a158 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800a158:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800a15a:	1e44      	subs	r4, r0, #1
 800a15c:	00e5      	lsls	r5, r4, #3
 800a15e:	4e07      	ldr	r6, [pc, #28]	; (800a17c <StopStreamDMA+0x24>)
 800a160:	1b2d      	subs	r5, r5, r4
 800a162:	00ed      	lsls	r5, r5, #3
 800a164:	19a8      	adds	r0, r5, r6

	HAL_DMA_Abort(hDMA);
 800a166:	f005 fb7d 	bl	800f864 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] = 0;
 800a16e:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR = 0;
 800a170:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800a172:	4a03      	ldr	r2, [pc, #12]	; (800a180 <StopStreamDMA+0x28>)
 800a174:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800a176:	4a03      	ldr	r2, [pc, #12]	; (800a184 <StopStreamDMA+0x2c>)
 800a178:	50a3      	str	r3, [r4, r2]

}
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	20002084 	.word	0x20002084
 800a180:	20001874 	.word	0x20001874
 800a184:	20001888 	.word	0x20001888

0800a188 <SwitchMsgDMAToStream>:
 */
void StopMsgDMA(uint8_t port){
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800a188:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800a18a:	b570      	push	{r4, r5, r6, lr}
 800a18c:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 800a18e:	4d0c      	ldr	r5, [pc, #48]	; (800a1c0 <SwitchMsgDMAToStream+0x38>)
 800a190:	1a24      	subs	r4, r4, r0
 800a192:	00e4      	lsls	r4, r4, #3
 800a194:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 800a196:	f005 fb65 	bl	800f864 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800a19a:	2300      	movs	r3, #0
 800a19c:	5962      	ldr	r2, [r4, r5]
	hDMA->Instance = ch;
 800a19e:	4809      	ldr	r0, [pc, #36]	; (800a1c4 <SwitchMsgDMAToStream+0x3c>)
	hDMA->Instance->CNDTR =0;
 800a1a0:	6053      	str	r3, [r2, #4]
	hDMA->Instance = ch;
 800a1a2:	5022      	str	r2, [r4, r0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a1a4:	1900      	adds	r0, r0, r4
 800a1a6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a1a8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800a1aa:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a1ac:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a1ae:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a1b0:	3320      	adds	r3, #32
 800a1b2:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800a1b4:	2380      	movs	r3, #128	; 0x80
 800a1b6:	015b      	lsls	r3, r3, #5
 800a1b8:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 800a1ba:	f005 fafb 	bl	800f7b4 <HAL_DMA_Init>
	// Stop the messaging DMA
	StopMsgDMA(port);

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
}
 800a1be:	bd70      	pop	{r4, r5, r6, pc}
 800a1c0:	2000227c 	.word	0x2000227c
 800a1c4:	20002084 	.word	0x20002084

0800a1c8 <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 800a1c8:	6803      	ldr	r3, [r0, #0]
 800a1ca:	4a21      	ldr	r2, [pc, #132]	; (800a250 <SetupDMAInterrupts+0x88>)
{
 800a1cc:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d01c      	beq.n	800a20c <SetupDMAInterrupts+0x44>
 800a1d2:	d80e      	bhi.n	800a1f2 <SetupDMAInterrupts+0x2a>
 800a1d4:	4a1f      	ldr	r2, [pc, #124]	; (800a254 <SetupDMAInterrupts+0x8c>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d026      	beq.n	800a228 <SetupDMAInterrupts+0x60>
 800a1da:	d82d      	bhi.n	800a238 <SetupDMAInterrupts+0x70>
 800a1dc:	4a1e      	ldr	r2, [pc, #120]	; (800a258 <SetupDMAInterrupts+0x90>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d131      	bne.n	800a246 <SetupDMAInterrupts+0x7e>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800a1e2:	2009      	movs	r0, #9
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f005 f95d 	bl	800f4a4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800a1ea:	2009      	movs	r0, #9
 800a1ec:	f005 f986 	bl	800f4fc <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800a1f0:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800a1f2:	4a1a      	ldr	r2, [pc, #104]	; (800a25c <SetupDMAInterrupts+0x94>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d017      	beq.n	800a228 <SetupDMAInterrupts+0x60>
 800a1f8:	d910      	bls.n	800a21c <SetupDMAInterrupts+0x54>
 800a1fa:	4a19      	ldr	r2, [pc, #100]	; (800a260 <SetupDMAInterrupts+0x98>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d005      	beq.n	800a20c <SetupDMAInterrupts+0x44>
 800a200:	4a18      	ldr	r2, [pc, #96]	; (800a264 <SetupDMAInterrupts+0x9c>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d002      	beq.n	800a20c <SetupDMAInterrupts+0x44>
 800a206:	4a18      	ldr	r2, [pc, #96]	; (800a268 <SetupDMAInterrupts+0xa0>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d1f1      	bne.n	800a1f0 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800a20c:	2200      	movs	r2, #0
 800a20e:	200b      	movs	r0, #11
 800a210:	f005 f948 	bl	800f4a4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800a214:	200b      	movs	r0, #11
 800a216:	f005 f971 	bl	800f4fc <HAL_NVIC_EnableIRQ>
}
 800a21a:	e7e9      	b.n	800a1f0 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800a21c:	4a13      	ldr	r2, [pc, #76]	; (800a26c <SetupDMAInterrupts+0xa4>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d0f4      	beq.n	800a20c <SetupDMAInterrupts+0x44>
 800a222:	4a13      	ldr	r2, [pc, #76]	; (800a270 <SetupDMAInterrupts+0xa8>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d1e3      	bne.n	800a1f0 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800a228:	2200      	movs	r2, #0
 800a22a:	200a      	movs	r0, #10
 800a22c:	f005 f93a 	bl	800f4a4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800a230:	200a      	movs	r0, #10
 800a232:	f005 f963 	bl	800f4fc <HAL_NVIC_EnableIRQ>
			break;
 800a236:	e7db      	b.n	800a1f0 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800a238:	4a0e      	ldr	r2, [pc, #56]	; (800a274 <SetupDMAInterrupts+0xac>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d0e6      	beq.n	800a20c <SetupDMAInterrupts+0x44>
 800a23e:	4a0e      	ldr	r2, [pc, #56]	; (800a278 <SetupDMAInterrupts+0xb0>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d1d5      	bne.n	800a1f0 <SetupDMAInterrupts+0x28>
 800a244:	e7e2      	b.n	800a20c <SetupDMAInterrupts+0x44>
 800a246:	4a0d      	ldr	r2, [pc, #52]	; (800a27c <SetupDMAInterrupts+0xb4>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d0ed      	beq.n	800a228 <SetupDMAInterrupts+0x60>
 800a24c:	e7d0      	b.n	800a1f0 <SetupDMAInterrupts+0x28>
 800a24e:	46c0      	nop			; (mov r8, r8)
 800a250:	4002006c 	.word	0x4002006c
 800a254:	40020030 	.word	0x40020030
 800a258:	40020008 	.word	0x40020008
 800a25c:	4002041c 	.word	0x4002041c
 800a260:	40020444 	.word	0x40020444
 800a264:	40020458 	.word	0x40020458
 800a268:	40020430 	.word	0x40020430
 800a26c:	40020080 	.word	0x40020080
 800a270:	40020408 	.word	0x40020408
 800a274:	40020044 	.word	0x40020044
 800a278:	40020058 	.word	0x40020058
 800a27c:	4002001c 	.word	0x4002001c

0800a280 <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 800a280:	6803      	ldr	r3, [r0, #0]
 800a282:	4a1b      	ldr	r2, [pc, #108]	; (800a2f0 <UnSetupDMAInterrupts+0x70>)
{
 800a284:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800a286:	4293      	cmp	r3, r2
 800a288:	d018      	beq.n	800a2bc <UnSetupDMAInterrupts+0x3c>
 800a28a:	d80a      	bhi.n	800a2a2 <UnSetupDMAInterrupts+0x22>
 800a28c:	4a19      	ldr	r2, [pc, #100]	; (800a2f4 <UnSetupDMAInterrupts+0x74>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d01e      	beq.n	800a2d0 <UnSetupDMAInterrupts+0x50>
 800a292:	d821      	bhi.n	800a2d8 <UnSetupDMAInterrupts+0x58>
 800a294:	4a18      	ldr	r2, [pc, #96]	; (800a2f8 <UnSetupDMAInterrupts+0x78>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d125      	bne.n	800a2e6 <UnSetupDMAInterrupts+0x66>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800a29a:	2009      	movs	r0, #9
 800a29c:	f005 f938 	bl	800f510 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800a2a0:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800a2a2:	4a16      	ldr	r2, [pc, #88]	; (800a2fc <UnSetupDMAInterrupts+0x7c>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d013      	beq.n	800a2d0 <UnSetupDMAInterrupts+0x50>
 800a2a8:	d90c      	bls.n	800a2c4 <UnSetupDMAInterrupts+0x44>
 800a2aa:	4a15      	ldr	r2, [pc, #84]	; (800a300 <UnSetupDMAInterrupts+0x80>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d005      	beq.n	800a2bc <UnSetupDMAInterrupts+0x3c>
 800a2b0:	4a14      	ldr	r2, [pc, #80]	; (800a304 <UnSetupDMAInterrupts+0x84>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d002      	beq.n	800a2bc <UnSetupDMAInterrupts+0x3c>
 800a2b6:	4a14      	ldr	r2, [pc, #80]	; (800a308 <UnSetupDMAInterrupts+0x88>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d1f1      	bne.n	800a2a0 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800a2bc:	200b      	movs	r0, #11
 800a2be:	f005 f927 	bl	800f510 <HAL_NVIC_DisableIRQ>
}
 800a2c2:	e7ed      	b.n	800a2a0 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800a2c4:	4a11      	ldr	r2, [pc, #68]	; (800a30c <UnSetupDMAInterrupts+0x8c>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d0f8      	beq.n	800a2bc <UnSetupDMAInterrupts+0x3c>
 800a2ca:	4a11      	ldr	r2, [pc, #68]	; (800a310 <UnSetupDMAInterrupts+0x90>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d1e7      	bne.n	800a2a0 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800a2d0:	200a      	movs	r0, #10
 800a2d2:	f005 f91d 	bl	800f510 <HAL_NVIC_DisableIRQ>
			break;
 800a2d6:	e7e3      	b.n	800a2a0 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800a2d8:	4a0e      	ldr	r2, [pc, #56]	; (800a314 <UnSetupDMAInterrupts+0x94>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d0ee      	beq.n	800a2bc <UnSetupDMAInterrupts+0x3c>
 800a2de:	4a0e      	ldr	r2, [pc, #56]	; (800a318 <UnSetupDMAInterrupts+0x98>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d1dd      	bne.n	800a2a0 <UnSetupDMAInterrupts+0x20>
 800a2e4:	e7ea      	b.n	800a2bc <UnSetupDMAInterrupts+0x3c>
 800a2e6:	4a0d      	ldr	r2, [pc, #52]	; (800a31c <UnSetupDMAInterrupts+0x9c>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d0f1      	beq.n	800a2d0 <UnSetupDMAInterrupts+0x50>
 800a2ec:	e7d8      	b.n	800a2a0 <UnSetupDMAInterrupts+0x20>
 800a2ee:	46c0      	nop			; (mov r8, r8)
 800a2f0:	4002006c 	.word	0x4002006c
 800a2f4:	40020030 	.word	0x40020030
 800a2f8:	40020008 	.word	0x40020008
 800a2fc:	4002041c 	.word	0x4002041c
 800a300:	40020444 	.word	0x40020444
 800a304:	40020458 	.word	0x40020458
 800a308:	40020430 	.word	0x40020430
 800a30c:	40020080 	.word	0x40020080
 800a310:	40020408 	.word	0x40020408
 800a314:	40020044 	.word	0x40020044
 800a318:	40020058 	.word	0x40020058
 800a31c:	4002001c 	.word	0x4002001c

0800a320 <DMA_MSG_TX_UnSetup>:
{	
 800a320:	b510      	push	{r4, lr}
 800a322:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800a324:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800a326:	f7ff ffab 	bl	800a280 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a32e:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800a330:	6623      	str	r3, [r4, #96]	; 0x60
}
 800a332:	bd10      	pop	{r4, pc}

0800a334 <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a334:	6803      	ldr	r3, [r0, #0]
 800a336:	4ac6      	ldr	r2, [pc, #792]	; (800a650 <RemapAndLinkDMAtoUARTRx+0x31c>)
{
 800a338:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d03a      	beq.n	800a3b4 <RemapAndLinkDMAtoUARTRx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800a33e:	4ac5      	ldr	r2, [pc, #788]	; (800a654 <RemapAndLinkDMAtoUARTRx+0x320>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d058      	beq.n	800a3f6 <RemapAndLinkDMAtoUARTRx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800a344:	4ac4      	ldr	r2, [pc, #784]	; (800a658 <RemapAndLinkDMAtoUARTRx+0x324>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d100      	bne.n	800a34c <RemapAndLinkDMAtoUARTRx+0x18>
 800a34a:	e093      	b.n	800a474 <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800a34c:	4ac3      	ldr	r2, [pc, #780]	; (800a65c <RemapAndLinkDMAtoUARTRx+0x328>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d100      	bne.n	800a354 <RemapAndLinkDMAtoUARTRx+0x20>
 800a352:	e0c0      	b.n	800a4d6 <RemapAndLinkDMAtoUARTRx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800a354:	4ac2      	ldr	r2, [pc, #776]	; (800a660 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d100      	bne.n	800a35c <RemapAndLinkDMAtoUARTRx+0x28>
 800a35a:	e19d      	b.n	800a698 <RemapAndLinkDMAtoUARTRx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800a35c:	4ac1      	ldr	r2, [pc, #772]	; (800a664 <RemapAndLinkDMAtoUARTRx+0x330>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d100      	bne.n	800a364 <RemapAndLinkDMAtoUARTRx+0x30>
 800a362:	e1b9      	b.n	800a6d8 <RemapAndLinkDMAtoUARTRx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800a364:	4ac0      	ldr	r2, [pc, #768]	; (800a668 <RemapAndLinkDMAtoUARTRx+0x334>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d000      	beq.n	800a36c <RemapAndLinkDMAtoUARTRx+0x38>
 800a36a:	e265      	b.n	800a838 <RemapAndLinkDMAtoUARTRx+0x504>
 800a36c:	680b      	ldr	r3, [r1, #0]
 800a36e:	4abf      	ldr	r2, [pc, #764]	; (800a66c <RemapAndLinkDMAtoUARTRx+0x338>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d100      	bne.n	800a376 <RemapAndLinkDMAtoUARTRx+0x42>
 800a374:	e230      	b.n	800a7d8 <RemapAndLinkDMAtoUARTRx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800a376:	4abe      	ldr	r2, [pc, #760]	; (800a670 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d100      	bne.n	800a37e <RemapAndLinkDMAtoUARTRx+0x4a>
 800a37c:	e237      	b.n	800a7ee <RemapAndLinkDMAtoUARTRx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800a37e:	4abd      	ldr	r2, [pc, #756]	; (800a674 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d100      	bne.n	800a386 <RemapAndLinkDMAtoUARTRx+0x52>
 800a384:	e235      	b.n	800a7f2 <RemapAndLinkDMAtoUARTRx+0x4be>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800a386:	4abc      	ldr	r2, [pc, #752]	; (800a678 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d100      	bne.n	800a38e <RemapAndLinkDMAtoUARTRx+0x5a>
 800a38c:	e23d      	b.n	800a80a <RemapAndLinkDMAtoUARTRx+0x4d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800a38e:	4abb      	ldr	r2, [pc, #748]	; (800a67c <RemapAndLinkDMAtoUARTRx+0x348>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d100      	bne.n	800a396 <RemapAndLinkDMAtoUARTRx+0x62>
 800a394:	e245      	b.n	800a822 <RemapAndLinkDMAtoUARTRx+0x4ee>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800a396:	4aba      	ldr	r2, [pc, #744]	; (800a680 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d145      	bne.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800a39c:	4ab9      	ldr	r2, [pc, #740]	; (800a684 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a39e:	23a8      	movs	r3, #168	; 0xa8
 800a3a0:	4db9      	ldr	r5, [pc, #740]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a3a2:	58d4      	ldr	r4, [r2, r3]
 800a3a4:	402c      	ands	r4, r5
 800a3a6:	50d4      	str	r4, [r2, r3]
 800a3a8:	24e0      	movs	r4, #224	; 0xe0
 800a3aa:	58d5      	ldr	r5, [r2, r3]
 800a3ac:	0124      	lsls	r4, r4, #4
 800a3ae:	432c      	orrs	r4, r5
 800a3b0:	50d4      	str	r4, [r2, r3]
 800a3b2:	e039      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a3b4:	680b      	ldr	r3, [r1, #0]
 800a3b6:	4aad      	ldr	r2, [pc, #692]	; (800a66c <RemapAndLinkDMAtoUARTRx+0x338>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d100      	bne.n	800a3be <RemapAndLinkDMAtoUARTRx+0x8a>
 800a3bc:	e07e      	b.n	800a4bc <RemapAndLinkDMAtoUARTRx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800a3be:	4aac      	ldr	r2, [pc, #688]	; (800a670 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d100      	bne.n	800a3c6 <RemapAndLinkDMAtoUARTRx+0x92>
 800a3c4:	e085      	b.n	800a4d2 <RemapAndLinkDMAtoUARTRx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800a3c6:	4aab      	ldr	r2, [pc, #684]	; (800a674 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d030      	beq.n	800a42e <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800a3cc:	4aaa      	ldr	r2, [pc, #680]	; (800a678 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d039      	beq.n	800a446 <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800a3d2:	4aaa      	ldr	r2, [pc, #680]	; (800a67c <RemapAndLinkDMAtoUARTRx+0x348>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d042      	beq.n	800a45e <RemapAndLinkDMAtoUARTRx+0x12a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800a3d8:	4aa9      	ldr	r2, [pc, #676]	; (800a680 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d124      	bne.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800a3de:	4aa9      	ldr	r2, [pc, #676]	; (800a684 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a3e0:	23a8      	movs	r3, #168	; 0xa8
 800a3e2:	4da9      	ldr	r5, [pc, #676]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a3e4:	58d4      	ldr	r4, [r2, r3]
 800a3e6:	402c      	ands	r4, r5
 800a3e8:	50d4      	str	r4, [r2, r3]
 800a3ea:	2480      	movs	r4, #128	; 0x80
 800a3ec:	58d5      	ldr	r5, [r2, r3]
 800a3ee:	0124      	lsls	r4, r4, #4
 800a3f0:	432c      	orrs	r4, r5
 800a3f2:	50d4      	str	r4, [r2, r3]
 800a3f4:	e018      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800a3f6:	680b      	ldr	r3, [r1, #0]
 800a3f8:	4a9c      	ldr	r2, [pc, #624]	; (800a66c <RemapAndLinkDMAtoUARTRx+0x338>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d100      	bne.n	800a400 <RemapAndLinkDMAtoUARTRx+0xcc>
 800a3fe:	e0b0      	b.n	800a562 <RemapAndLinkDMAtoUARTRx+0x22e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800a400:	4a9b      	ldr	r2, [pc, #620]	; (800a670 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d100      	bne.n	800a408 <RemapAndLinkDMAtoUARTRx+0xd4>
 800a406:	e0b7      	b.n	800a578 <RemapAndLinkDMAtoUARTRx+0x244>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800a408:	4a9a      	ldr	r2, [pc, #616]	; (800a674 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d100      	bne.n	800a410 <RemapAndLinkDMAtoUARTRx+0xdc>
 800a40e:	e0bf      	b.n	800a590 <RemapAndLinkDMAtoUARTRx+0x25c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800a410:	4a99      	ldr	r2, [pc, #612]	; (800a678 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d100      	bne.n	800a418 <RemapAndLinkDMAtoUARTRx+0xe4>
 800a416:	e0c7      	b.n	800a5a8 <RemapAndLinkDMAtoUARTRx+0x274>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800a418:	4a98      	ldr	r2, [pc, #608]	; (800a67c <RemapAndLinkDMAtoUARTRx+0x348>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d100      	bne.n	800a420 <RemapAndLinkDMAtoUARTRx+0xec>
 800a41e:	e0cf      	b.n	800a5c0 <RemapAndLinkDMAtoUARTRx+0x28c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800a420:	4a97      	ldr	r2, [pc, #604]	; (800a680 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d100      	bne.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
 800a426:	e0d6      	b.n	800a5d6 <RemapAndLinkDMAtoUARTRx+0x2a2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800a428:	6641      	str	r1, [r0, #100]	; 0x64
 800a42a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800a42c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800a42e:	23a8      	movs	r3, #168	; 0xa8
 800a430:	4a96      	ldr	r2, [pc, #600]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a432:	4d97      	ldr	r5, [pc, #604]	; (800a690 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a434:	58d4      	ldr	r4, [r2, r3]
 800a436:	402c      	ands	r4, r5
 800a438:	50d4      	str	r4, [r2, r3]
 800a43a:	2480      	movs	r4, #128	; 0x80
 800a43c:	58d5      	ldr	r5, [r2, r3]
 800a43e:	0324      	lsls	r4, r4, #12
 800a440:	432c      	orrs	r4, r5
 800a442:	50d4      	str	r4, [r2, r3]
 800a444:	e7f0      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800a446:	23a8      	movs	r3, #168	; 0xa8
 800a448:	4a90      	ldr	r2, [pc, #576]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a44a:	4d92      	ldr	r5, [pc, #584]	; (800a694 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a44c:	58d4      	ldr	r4, [r2, r3]
 800a44e:	402c      	ands	r4, r5
 800a450:	50d4      	str	r4, [r2, r3]
 800a452:	2480      	movs	r4, #128	; 0x80
 800a454:	58d5      	ldr	r5, [r2, r3]
 800a456:	0424      	lsls	r4, r4, #16
 800a458:	432c      	orrs	r4, r5
 800a45a:	50d4      	str	r4, [r2, r3]
 800a45c:	e7e4      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800a45e:	23a8      	movs	r3, #168	; 0xa8
 800a460:	25f0      	movs	r5, #240	; 0xf0
 800a462:	4a88      	ldr	r2, [pc, #544]	; (800a684 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a464:	58d4      	ldr	r4, [r2, r3]
 800a466:	43ac      	bics	r4, r5
 800a468:	50d4      	str	r4, [r2, r3]
 800a46a:	58d4      	ldr	r4, [r2, r3]
 800a46c:	3d70      	subs	r5, #112	; 0x70
 800a46e:	432c      	orrs	r4, r5
 800a470:	50d4      	str	r4, [r2, r3]
 800a472:	e7d9      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800a474:	680b      	ldr	r3, [r1, #0]
 800a476:	4a7d      	ldr	r2, [pc, #500]	; (800a66c <RemapAndLinkDMAtoUARTRx+0x338>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d100      	bne.n	800a47e <RemapAndLinkDMAtoUARTRx+0x14a>
 800a47c:	e0ad      	b.n	800a5da <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800a47e:	4a7c      	ldr	r2, [pc, #496]	; (800a670 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d100      	bne.n	800a486 <RemapAndLinkDMAtoUARTRx+0x152>
 800a484:	e0b4      	b.n	800a5f0 <RemapAndLinkDMAtoUARTRx+0x2bc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800a486:	4a7b      	ldr	r2, [pc, #492]	; (800a674 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d100      	bne.n	800a48e <RemapAndLinkDMAtoUARTRx+0x15a>
 800a48c:	e0b2      	b.n	800a5f4 <RemapAndLinkDMAtoUARTRx+0x2c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800a48e:	4a7a      	ldr	r2, [pc, #488]	; (800a678 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d100      	bne.n	800a496 <RemapAndLinkDMAtoUARTRx+0x162>
 800a494:	e0ba      	b.n	800a60c <RemapAndLinkDMAtoUARTRx+0x2d8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800a496:	4a79      	ldr	r2, [pc, #484]	; (800a67c <RemapAndLinkDMAtoUARTRx+0x348>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d100      	bne.n	800a49e <RemapAndLinkDMAtoUARTRx+0x16a>
 800a49c:	e0c2      	b.n	800a624 <RemapAndLinkDMAtoUARTRx+0x2f0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800a49e:	4a78      	ldr	r2, [pc, #480]	; (800a680 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d1c1      	bne.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800a4a4:	4a77      	ldr	r2, [pc, #476]	; (800a684 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a4a6:	23a8      	movs	r3, #168	; 0xa8
 800a4a8:	4d77      	ldr	r5, [pc, #476]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a4aa:	58d4      	ldr	r4, [r2, r3]
 800a4ac:	402c      	ands	r4, r5
 800a4ae:	50d4      	str	r4, [r2, r3]
 800a4b0:	24a0      	movs	r4, #160	; 0xa0
 800a4b2:	58d5      	ldr	r5, [r2, r3]
 800a4b4:	0124      	lsls	r4, r4, #4
 800a4b6:	432c      	orrs	r4, r5
 800a4b8:	50d4      	str	r4, [r2, r3]
 800a4ba:	e7b5      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800a4bc:	23a8      	movs	r3, #168	; 0xa8
 800a4be:	250f      	movs	r5, #15
 800a4c0:	4a72      	ldr	r2, [pc, #456]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a4c2:	58d4      	ldr	r4, [r2, r3]
 800a4c4:	43ac      	bics	r4, r5
 800a4c6:	50d4      	str	r4, [r2, r3]
 800a4c8:	58d4      	ldr	r4, [r2, r3]
 800a4ca:	3d07      	subs	r5, #7
 800a4cc:	432c      	orrs	r4, r5
 800a4ce:	50d4      	str	r4, [r2, r3]
 800a4d0:	e7aa      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800a4d2:	4a6e      	ldr	r2, [pc, #440]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a4d4:	e784      	b.n	800a3e0 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800a4d6:	680b      	ldr	r3, [r1, #0]
 800a4d8:	4a64      	ldr	r2, [pc, #400]	; (800a66c <RemapAndLinkDMAtoUARTRx+0x338>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d01c      	beq.n	800a518 <RemapAndLinkDMAtoUARTRx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800a4de:	4a64      	ldr	r2, [pc, #400]	; (800a670 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d024      	beq.n	800a52e <RemapAndLinkDMAtoUARTRx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800a4e4:	4a63      	ldr	r2, [pc, #396]	; (800a674 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d023      	beq.n	800a532 <RemapAndLinkDMAtoUARTRx+0x1fe>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800a4ea:	4a63      	ldr	r2, [pc, #396]	; (800a678 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d02c      	beq.n	800a54a <RemapAndLinkDMAtoUARTRx+0x216>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800a4f0:	4a62      	ldr	r2, [pc, #392]	; (800a67c <RemapAndLinkDMAtoUARTRx+0x348>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d100      	bne.n	800a4f8 <RemapAndLinkDMAtoUARTRx+0x1c4>
 800a4f6:	e0a0      	b.n	800a63a <RemapAndLinkDMAtoUARTRx+0x306>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800a4f8:	4a61      	ldr	r2, [pc, #388]	; (800a680 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d000      	beq.n	800a500 <RemapAndLinkDMAtoUARTRx+0x1cc>
 800a4fe:	e793      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800a500:	4a60      	ldr	r2, [pc, #384]	; (800a684 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a502:	23a8      	movs	r3, #168	; 0xa8
 800a504:	4d60      	ldr	r5, [pc, #384]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a506:	58d4      	ldr	r4, [r2, r3]
 800a508:	402c      	ands	r4, r5
 800a50a:	50d4      	str	r4, [r2, r3]
 800a50c:	24b0      	movs	r4, #176	; 0xb0
 800a50e:	58d5      	ldr	r5, [r2, r3]
 800a510:	0124      	lsls	r4, r4, #4
 800a512:	432c      	orrs	r4, r5
 800a514:	50d4      	str	r4, [r2, r3]
 800a516:	e787      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800a518:	23a8      	movs	r3, #168	; 0xa8
 800a51a:	250f      	movs	r5, #15
 800a51c:	4a5b      	ldr	r2, [pc, #364]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a51e:	58d4      	ldr	r4, [r2, r3]
 800a520:	43ac      	bics	r4, r5
 800a522:	50d4      	str	r4, [r2, r3]
 800a524:	58d4      	ldr	r4, [r2, r3]
 800a526:	3d04      	subs	r5, #4
 800a528:	432c      	orrs	r4, r5
 800a52a:	50d4      	str	r4, [r2, r3]
 800a52c:	e77c      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800a52e:	4a57      	ldr	r2, [pc, #348]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a530:	e7e7      	b.n	800a502 <RemapAndLinkDMAtoUARTRx+0x1ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800a532:	23a8      	movs	r3, #168	; 0xa8
 800a534:	4a55      	ldr	r2, [pc, #340]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a536:	4d56      	ldr	r5, [pc, #344]	; (800a690 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a538:	58d4      	ldr	r4, [r2, r3]
 800a53a:	402c      	ands	r4, r5
 800a53c:	50d4      	str	r4, [r2, r3]
 800a53e:	24b0      	movs	r4, #176	; 0xb0
 800a540:	58d5      	ldr	r5, [r2, r3]
 800a542:	0324      	lsls	r4, r4, #12
 800a544:	432c      	orrs	r4, r5
 800a546:	50d4      	str	r4, [r2, r3]
 800a548:	e76e      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800a54a:	23a8      	movs	r3, #168	; 0xa8
 800a54c:	4a4f      	ldr	r2, [pc, #316]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a54e:	4d51      	ldr	r5, [pc, #324]	; (800a694 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a550:	58d4      	ldr	r4, [r2, r3]
 800a552:	402c      	ands	r4, r5
 800a554:	50d4      	str	r4, [r2, r3]
 800a556:	24b0      	movs	r4, #176	; 0xb0
 800a558:	58d5      	ldr	r5, [r2, r3]
 800a55a:	0424      	lsls	r4, r4, #16
 800a55c:	432c      	orrs	r4, r5
 800a55e:	50d4      	str	r4, [r2, r3]
 800a560:	e762      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800a562:	23a8      	movs	r3, #168	; 0xa8
 800a564:	250f      	movs	r5, #15
 800a566:	4a49      	ldr	r2, [pc, #292]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a568:	58d4      	ldr	r4, [r2, r3]
 800a56a:	43ac      	bics	r4, r5
 800a56c:	50d4      	str	r4, [r2, r3]
 800a56e:	58d4      	ldr	r4, [r2, r3]
 800a570:	3d06      	subs	r5, #6
 800a572:	432c      	orrs	r4, r5
 800a574:	50d4      	str	r4, [r2, r3]
 800a576:	e757      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800a578:	4a44      	ldr	r2, [pc, #272]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800a57a:	23a8      	movs	r3, #168	; 0xa8
 800a57c:	4d42      	ldr	r5, [pc, #264]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a57e:	58d4      	ldr	r4, [r2, r3]
 800a580:	402c      	ands	r4, r5
 800a582:	50d4      	str	r4, [r2, r3]
 800a584:	2490      	movs	r4, #144	; 0x90
 800a586:	58d5      	ldr	r5, [r2, r3]
 800a588:	0124      	lsls	r4, r4, #4
 800a58a:	432c      	orrs	r4, r5
 800a58c:	50d4      	str	r4, [r2, r3]
 800a58e:	e74b      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800a590:	23a8      	movs	r3, #168	; 0xa8
 800a592:	4a3e      	ldr	r2, [pc, #248]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a594:	4d3e      	ldr	r5, [pc, #248]	; (800a690 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a596:	58d4      	ldr	r4, [r2, r3]
 800a598:	402c      	ands	r4, r5
 800a59a:	50d4      	str	r4, [r2, r3]
 800a59c:	2490      	movs	r4, #144	; 0x90
 800a59e:	58d5      	ldr	r5, [r2, r3]
 800a5a0:	0324      	lsls	r4, r4, #12
 800a5a2:	432c      	orrs	r4, r5
 800a5a4:	50d4      	str	r4, [r2, r3]
 800a5a6:	e73f      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800a5a8:	23a8      	movs	r3, #168	; 0xa8
 800a5aa:	4a38      	ldr	r2, [pc, #224]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a5ac:	4d39      	ldr	r5, [pc, #228]	; (800a694 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a5ae:	58d4      	ldr	r4, [r2, r3]
 800a5b0:	402c      	ands	r4, r5
 800a5b2:	50d4      	str	r4, [r2, r3]
 800a5b4:	2490      	movs	r4, #144	; 0x90
 800a5b6:	58d5      	ldr	r5, [r2, r3]
 800a5b8:	0424      	lsls	r4, r4, #16
 800a5ba:	432c      	orrs	r4, r5
 800a5bc:	50d4      	str	r4, [r2, r3]
 800a5be:	e733      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800a5c0:	23a8      	movs	r3, #168	; 0xa8
 800a5c2:	25f0      	movs	r5, #240	; 0xf0
 800a5c4:	4a2f      	ldr	r2, [pc, #188]	; (800a684 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a5c6:	58d4      	ldr	r4, [r2, r3]
 800a5c8:	43ac      	bics	r4, r5
 800a5ca:	50d4      	str	r4, [r2, r3]
 800a5cc:	58d4      	ldr	r4, [r2, r3]
 800a5ce:	3d60      	subs	r5, #96	; 0x60
 800a5d0:	432c      	orrs	r4, r5
 800a5d2:	50d4      	str	r4, [r2, r3]
 800a5d4:	e728      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800a5d6:	4a2b      	ldr	r2, [pc, #172]	; (800a684 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a5d8:	e7cf      	b.n	800a57a <RemapAndLinkDMAtoUARTRx+0x246>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800a5da:	23a8      	movs	r3, #168	; 0xa8
 800a5dc:	250f      	movs	r5, #15
 800a5de:	4a2b      	ldr	r2, [pc, #172]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a5e0:	58d4      	ldr	r4, [r2, r3]
 800a5e2:	43ac      	bics	r4, r5
 800a5e4:	50d4      	str	r4, [r2, r3]
 800a5e6:	58d4      	ldr	r4, [r2, r3]
 800a5e8:	3d05      	subs	r5, #5
 800a5ea:	432c      	orrs	r4, r5
 800a5ec:	50d4      	str	r4, [r2, r3]
 800a5ee:	e71b      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800a5f0:	4a26      	ldr	r2, [pc, #152]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a5f2:	e758      	b.n	800a4a6 <RemapAndLinkDMAtoUARTRx+0x172>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800a5f4:	23a8      	movs	r3, #168	; 0xa8
 800a5f6:	4a25      	ldr	r2, [pc, #148]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a5f8:	4d25      	ldr	r5, [pc, #148]	; (800a690 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a5fa:	58d4      	ldr	r4, [r2, r3]
 800a5fc:	402c      	ands	r4, r5
 800a5fe:	50d4      	str	r4, [r2, r3]
 800a600:	24a0      	movs	r4, #160	; 0xa0
 800a602:	58d5      	ldr	r5, [r2, r3]
 800a604:	0324      	lsls	r4, r4, #12
 800a606:	432c      	orrs	r4, r5
 800a608:	50d4      	str	r4, [r2, r3]
 800a60a:	e70d      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800a60c:	23a8      	movs	r3, #168	; 0xa8
 800a60e:	4a1f      	ldr	r2, [pc, #124]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x358>)
 800a610:	4d20      	ldr	r5, [pc, #128]	; (800a694 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a612:	58d4      	ldr	r4, [r2, r3]
 800a614:	402c      	ands	r4, r5
 800a616:	50d4      	str	r4, [r2, r3]
 800a618:	24a0      	movs	r4, #160	; 0xa0
 800a61a:	58d5      	ldr	r5, [r2, r3]
 800a61c:	0424      	lsls	r4, r4, #16
 800a61e:	432c      	orrs	r4, r5
 800a620:	50d4      	str	r4, [r2, r3]
 800a622:	e701      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800a624:	23a8      	movs	r3, #168	; 0xa8
 800a626:	25f0      	movs	r5, #240	; 0xf0
 800a628:	4a16      	ldr	r2, [pc, #88]	; (800a684 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a62a:	58d4      	ldr	r4, [r2, r3]
 800a62c:	43ac      	bics	r4, r5
 800a62e:	50d4      	str	r4, [r2, r3]
 800a630:	58d4      	ldr	r4, [r2, r3]
 800a632:	3d50      	subs	r5, #80	; 0x50
 800a634:	432c      	orrs	r4, r5
 800a636:	50d4      	str	r4, [r2, r3]
 800a638:	e6f6      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800a63a:	23a8      	movs	r3, #168	; 0xa8
 800a63c:	25f0      	movs	r5, #240	; 0xf0
 800a63e:	4a11      	ldr	r2, [pc, #68]	; (800a684 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a640:	58d4      	ldr	r4, [r2, r3]
 800a642:	43ac      	bics	r4, r5
 800a644:	50d4      	str	r4, [r2, r3]
 800a646:	58d4      	ldr	r4, [r2, r3]
 800a648:	3d40      	subs	r5, #64	; 0x40
 800a64a:	432c      	orrs	r4, r5
 800a64c:	50d4      	str	r4, [r2, r3]
 800a64e:	e6eb      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
 800a650:	40013800 	.word	0x40013800
 800a654:	40004400 	.word	0x40004400
 800a658:	40004800 	.word	0x40004800
 800a65c:	40004c00 	.word	0x40004c00
 800a660:	40005000 	.word	0x40005000
 800a664:	40011400 	.word	0x40011400
 800a668:	40011800 	.word	0x40011800
 800a66c:	40020008 	.word	0x40020008
 800a670:	40020030 	.word	0x40020030
 800a674:	40020058 	.word	0x40020058
 800a678:	4002006c 	.word	0x4002006c
 800a67c:	4002041c 	.word	0x4002041c
 800a680:	40020430 	.word	0x40020430
 800a684:	40020400 	.word	0x40020400
 800a688:	fffff0ff 	.word	0xfffff0ff
 800a68c:	40020000 	.word	0x40020000
 800a690:	fff0ffff 	.word	0xfff0ffff
 800a694:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800a698:	680b      	ldr	r3, [r1, #0]
 800a69a:	4a8e      	ldr	r2, [pc, #568]	; (800a8d4 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d03b      	beq.n	800a718 <RemapAndLinkDMAtoUARTRx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800a6a0:	4a8d      	ldr	r2, [pc, #564]	; (800a8d8 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d043      	beq.n	800a72e <RemapAndLinkDMAtoUARTRx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800a6a6:	4a8d      	ldr	r2, [pc, #564]	; (800a8dc <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d042      	beq.n	800a732 <RemapAndLinkDMAtoUARTRx+0x3fe>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800a6ac:	4a8c      	ldr	r2, [pc, #560]	; (800a8e0 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d04b      	beq.n	800a74a <RemapAndLinkDMAtoUARTRx+0x416>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800a6b2:	4a8c      	ldr	r2, [pc, #560]	; (800a8e4 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d054      	beq.n	800a762 <RemapAndLinkDMAtoUARTRx+0x42e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800a6b8:	4a8b      	ldr	r2, [pc, #556]	; (800a8e8 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d000      	beq.n	800a6c0 <RemapAndLinkDMAtoUARTRx+0x38c>
 800a6be:	e6b3      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800a6c0:	4a8a      	ldr	r2, [pc, #552]	; (800a8ec <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a6c2:	23a8      	movs	r3, #168	; 0xa8
 800a6c4:	4d8a      	ldr	r5, [pc, #552]	; (800a8f0 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800a6c6:	58d4      	ldr	r4, [r2, r3]
 800a6c8:	402c      	ands	r4, r5
 800a6ca:	50d4      	str	r4, [r2, r3]
 800a6cc:	24c0      	movs	r4, #192	; 0xc0
 800a6ce:	58d5      	ldr	r5, [r2, r3]
 800a6d0:	0124      	lsls	r4, r4, #4
 800a6d2:	432c      	orrs	r4, r5
 800a6d4:	50d4      	str	r4, [r2, r3]
 800a6d6:	e6a7      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800a6d8:	680b      	ldr	r3, [r1, #0]
 800a6da:	4a7e      	ldr	r2, [pc, #504]	; (800a8d4 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d04b      	beq.n	800a778 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800a6e0:	4a7d      	ldr	r2, [pc, #500]	; (800a8d8 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d053      	beq.n	800a78e <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800a6e6:	4a7d      	ldr	r2, [pc, #500]	; (800a8dc <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d052      	beq.n	800a792 <RemapAndLinkDMAtoUARTRx+0x45e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800a6ec:	4a7c      	ldr	r2, [pc, #496]	; (800a8e0 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d05b      	beq.n	800a7aa <RemapAndLinkDMAtoUARTRx+0x476>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800a6f2:	4a7c      	ldr	r2, [pc, #496]	; (800a8e4 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d064      	beq.n	800a7c2 <RemapAndLinkDMAtoUARTRx+0x48e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800a6f8:	4a7b      	ldr	r2, [pc, #492]	; (800a8e8 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d000      	beq.n	800a700 <RemapAndLinkDMAtoUARTRx+0x3cc>
 800a6fe:	e693      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800a700:	4a7a      	ldr	r2, [pc, #488]	; (800a8ec <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a702:	23a8      	movs	r3, #168	; 0xa8
 800a704:	4d7a      	ldr	r5, [pc, #488]	; (800a8f0 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800a706:	58d4      	ldr	r4, [r2, r3]
 800a708:	402c      	ands	r4, r5
 800a70a:	50d4      	str	r4, [r2, r3]
 800a70c:	24d0      	movs	r4, #208	; 0xd0
 800a70e:	58d5      	ldr	r5, [r2, r3]
 800a710:	0124      	lsls	r4, r4, #4
 800a712:	432c      	orrs	r4, r5
 800a714:	50d4      	str	r4, [r2, r3]
 800a716:	e687      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800a718:	23a8      	movs	r3, #168	; 0xa8
 800a71a:	250f      	movs	r5, #15
 800a71c:	4a75      	ldr	r2, [pc, #468]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a71e:	58d4      	ldr	r4, [r2, r3]
 800a720:	43ac      	bics	r4, r5
 800a722:	50d4      	str	r4, [r2, r3]
 800a724:	58d4      	ldr	r4, [r2, r3]
 800a726:	3d03      	subs	r5, #3
 800a728:	432c      	orrs	r4, r5
 800a72a:	50d4      	str	r4, [r2, r3]
 800a72c:	e67c      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800a72e:	4a71      	ldr	r2, [pc, #452]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a730:	e7c7      	b.n	800a6c2 <RemapAndLinkDMAtoUARTRx+0x38e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800a732:	23a8      	movs	r3, #168	; 0xa8
 800a734:	4a6f      	ldr	r2, [pc, #444]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a736:	4d70      	ldr	r5, [pc, #448]	; (800a8f8 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a738:	58d4      	ldr	r4, [r2, r3]
 800a73a:	402c      	ands	r4, r5
 800a73c:	50d4      	str	r4, [r2, r3]
 800a73e:	24c0      	movs	r4, #192	; 0xc0
 800a740:	58d5      	ldr	r5, [r2, r3]
 800a742:	0324      	lsls	r4, r4, #12
 800a744:	432c      	orrs	r4, r5
 800a746:	50d4      	str	r4, [r2, r3]
 800a748:	e66e      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800a74a:	23a8      	movs	r3, #168	; 0xa8
 800a74c:	4a69      	ldr	r2, [pc, #420]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a74e:	4d6b      	ldr	r5, [pc, #428]	; (800a8fc <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a750:	58d4      	ldr	r4, [r2, r3]
 800a752:	402c      	ands	r4, r5
 800a754:	50d4      	str	r4, [r2, r3]
 800a756:	24c0      	movs	r4, #192	; 0xc0
 800a758:	58d5      	ldr	r5, [r2, r3]
 800a75a:	0424      	lsls	r4, r4, #16
 800a75c:	432c      	orrs	r4, r5
 800a75e:	50d4      	str	r4, [r2, r3]
 800a760:	e662      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800a762:	23a8      	movs	r3, #168	; 0xa8
 800a764:	25f0      	movs	r5, #240	; 0xf0
 800a766:	4a61      	ldr	r2, [pc, #388]	; (800a8ec <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a768:	58d4      	ldr	r4, [r2, r3]
 800a76a:	43ac      	bics	r4, r5
 800a76c:	50d4      	str	r4, [r2, r3]
 800a76e:	58d4      	ldr	r4, [r2, r3]
 800a770:	3d30      	subs	r5, #48	; 0x30
 800a772:	432c      	orrs	r4, r5
 800a774:	50d4      	str	r4, [r2, r3]
 800a776:	e657      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800a778:	23a8      	movs	r3, #168	; 0xa8
 800a77a:	250f      	movs	r5, #15
 800a77c:	4a5d      	ldr	r2, [pc, #372]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a77e:	58d4      	ldr	r4, [r2, r3]
 800a780:	43ac      	bics	r4, r5
 800a782:	50d4      	str	r4, [r2, r3]
 800a784:	58d4      	ldr	r4, [r2, r3]
 800a786:	3d02      	subs	r5, #2
 800a788:	432c      	orrs	r4, r5
 800a78a:	50d4      	str	r4, [r2, r3]
 800a78c:	e64c      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800a78e:	4a59      	ldr	r2, [pc, #356]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a790:	e7b7      	b.n	800a702 <RemapAndLinkDMAtoUARTRx+0x3ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800a792:	23a8      	movs	r3, #168	; 0xa8
 800a794:	4a57      	ldr	r2, [pc, #348]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a796:	4d58      	ldr	r5, [pc, #352]	; (800a8f8 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a798:	58d4      	ldr	r4, [r2, r3]
 800a79a:	402c      	ands	r4, r5
 800a79c:	50d4      	str	r4, [r2, r3]
 800a79e:	24d0      	movs	r4, #208	; 0xd0
 800a7a0:	58d5      	ldr	r5, [r2, r3]
 800a7a2:	0324      	lsls	r4, r4, #12
 800a7a4:	432c      	orrs	r4, r5
 800a7a6:	50d4      	str	r4, [r2, r3]
 800a7a8:	e63e      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800a7aa:	23a8      	movs	r3, #168	; 0xa8
 800a7ac:	4a51      	ldr	r2, [pc, #324]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a7ae:	4d53      	ldr	r5, [pc, #332]	; (800a8fc <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a7b0:	58d4      	ldr	r4, [r2, r3]
 800a7b2:	402c      	ands	r4, r5
 800a7b4:	50d4      	str	r4, [r2, r3]
 800a7b6:	24d0      	movs	r4, #208	; 0xd0
 800a7b8:	58d5      	ldr	r5, [r2, r3]
 800a7ba:	0424      	lsls	r4, r4, #16
 800a7bc:	432c      	orrs	r4, r5
 800a7be:	50d4      	str	r4, [r2, r3]
 800a7c0:	e632      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800a7c2:	23a8      	movs	r3, #168	; 0xa8
 800a7c4:	25f0      	movs	r5, #240	; 0xf0
 800a7c6:	4a49      	ldr	r2, [pc, #292]	; (800a8ec <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a7c8:	58d4      	ldr	r4, [r2, r3]
 800a7ca:	43ac      	bics	r4, r5
 800a7cc:	50d4      	str	r4, [r2, r3]
 800a7ce:	58d4      	ldr	r4, [r2, r3]
 800a7d0:	3d20      	subs	r5, #32
 800a7d2:	432c      	orrs	r4, r5
 800a7d4:	50d4      	str	r4, [r2, r3]
 800a7d6:	e627      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800a7d8:	23a8      	movs	r3, #168	; 0xa8
 800a7da:	250f      	movs	r5, #15
 800a7dc:	4a45      	ldr	r2, [pc, #276]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a7de:	58d4      	ldr	r4, [r2, r3]
 800a7e0:	43ac      	bics	r4, r5
 800a7e2:	50d4      	str	r4, [r2, r3]
 800a7e4:	58d4      	ldr	r4, [r2, r3]
 800a7e6:	3d01      	subs	r5, #1
 800a7e8:	432c      	orrs	r4, r5
 800a7ea:	50d4      	str	r4, [r2, r3]
 800a7ec:	e61c      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800a7ee:	4a41      	ldr	r2, [pc, #260]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a7f0:	e5d5      	b.n	800a39e <RemapAndLinkDMAtoUARTRx+0x6a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800a7f2:	23a8      	movs	r3, #168	; 0xa8
 800a7f4:	4a3f      	ldr	r2, [pc, #252]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a7f6:	4d40      	ldr	r5, [pc, #256]	; (800a8f8 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a7f8:	58d4      	ldr	r4, [r2, r3]
 800a7fa:	402c      	ands	r4, r5
 800a7fc:	50d4      	str	r4, [r2, r3]
 800a7fe:	24e0      	movs	r4, #224	; 0xe0
 800a800:	58d5      	ldr	r5, [r2, r3]
 800a802:	0324      	lsls	r4, r4, #12
 800a804:	432c      	orrs	r4, r5
 800a806:	50d4      	str	r4, [r2, r3]
 800a808:	e60e      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800a80a:	23a8      	movs	r3, #168	; 0xa8
 800a80c:	4a39      	ldr	r2, [pc, #228]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a80e:	4d3b      	ldr	r5, [pc, #236]	; (800a8fc <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a810:	58d4      	ldr	r4, [r2, r3]
 800a812:	402c      	ands	r4, r5
 800a814:	50d4      	str	r4, [r2, r3]
 800a816:	24e0      	movs	r4, #224	; 0xe0
 800a818:	58d5      	ldr	r5, [r2, r3]
 800a81a:	0424      	lsls	r4, r4, #16
 800a81c:	432c      	orrs	r4, r5
 800a81e:	50d4      	str	r4, [r2, r3]
 800a820:	e602      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800a822:	23a8      	movs	r3, #168	; 0xa8
 800a824:	25f0      	movs	r5, #240	; 0xf0
 800a826:	4a31      	ldr	r2, [pc, #196]	; (800a8ec <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a828:	58d4      	ldr	r4, [r2, r3]
 800a82a:	43ac      	bics	r4, r5
 800a82c:	50d4      	str	r4, [r2, r3]
 800a82e:	58d4      	ldr	r4, [r2, r3]
 800a830:	3d10      	subs	r5, #16
 800a832:	432c      	orrs	r4, r5
 800a834:	50d4      	str	r4, [r2, r3]
 800a836:	e5f7      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800a838:	4a31      	ldr	r2, [pc, #196]	; (800a900 <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d000      	beq.n	800a840 <RemapAndLinkDMAtoUARTRx+0x50c>
 800a83e:	e5f3      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
 800a840:	680b      	ldr	r3, [r1, #0]
 800a842:	4a24      	ldr	r2, [pc, #144]	; (800a8d4 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d01b      	beq.n	800a880 <RemapAndLinkDMAtoUARTRx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800a848:	4a23      	ldr	r2, [pc, #140]	; (800a8d8 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d022      	beq.n	800a894 <RemapAndLinkDMAtoUARTRx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800a84e:	4a23      	ldr	r2, [pc, #140]	; (800a8dc <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d021      	beq.n	800a898 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800a854:	4a22      	ldr	r2, [pc, #136]	; (800a8e0 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d02a      	beq.n	800a8b0 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800a85a:	4a22      	ldr	r2, [pc, #136]	; (800a8e4 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d033      	beq.n	800a8c8 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800a860:	4a21      	ldr	r2, [pc, #132]	; (800a8e8 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d000      	beq.n	800a868 <RemapAndLinkDMAtoUARTRx+0x534>
 800a866:	e5df      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800a868:	4a20      	ldr	r2, [pc, #128]	; (800a8ec <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a86a:	23a8      	movs	r3, #168	; 0xa8
 800a86c:	4d20      	ldr	r5, [pc, #128]	; (800a8f0 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800a86e:	58d4      	ldr	r4, [r2, r3]
 800a870:	402c      	ands	r4, r5
 800a872:	50d4      	str	r4, [r2, r3]
 800a874:	24f0      	movs	r4, #240	; 0xf0
 800a876:	58d5      	ldr	r5, [r2, r3]
 800a878:	0124      	lsls	r4, r4, #4
 800a87a:	432c      	orrs	r4, r5
 800a87c:	50d4      	str	r4, [r2, r3]
 800a87e:	e5d3      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800a880:	23a8      	movs	r3, #168	; 0xa8
 800a882:	260f      	movs	r6, #15
 800a884:	4a1b      	ldr	r2, [pc, #108]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a886:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800a888:	43b5      	bics	r5, r6
 800a88a:	50d5      	str	r5, [r2, r3]
 800a88c:	58d4      	ldr	r4, [r2, r3]
 800a88e:	4334      	orrs	r4, r6
 800a890:	50d4      	str	r4, [r2, r3]
 800a892:	e5c9      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800a894:	4a17      	ldr	r2, [pc, #92]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a896:	e7e8      	b.n	800a86a <RemapAndLinkDMAtoUARTRx+0x536>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800a898:	23a8      	movs	r3, #168	; 0xa8
 800a89a:	4a16      	ldr	r2, [pc, #88]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a89c:	4d16      	ldr	r5, [pc, #88]	; (800a8f8 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a89e:	58d4      	ldr	r4, [r2, r3]
 800a8a0:	402c      	ands	r4, r5
 800a8a2:	50d4      	str	r4, [r2, r3]
 800a8a4:	24f0      	movs	r4, #240	; 0xf0
 800a8a6:	58d5      	ldr	r5, [r2, r3]
 800a8a8:	0324      	lsls	r4, r4, #12
 800a8aa:	432c      	orrs	r4, r5
 800a8ac:	50d4      	str	r4, [r2, r3]
 800a8ae:	e5bb      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800a8b0:	23a8      	movs	r3, #168	; 0xa8
 800a8b2:	4a10      	ldr	r2, [pc, #64]	; (800a8f4 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a8b4:	4d11      	ldr	r5, [pc, #68]	; (800a8fc <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a8b6:	58d4      	ldr	r4, [r2, r3]
 800a8b8:	402c      	ands	r4, r5
 800a8ba:	50d4      	str	r4, [r2, r3]
 800a8bc:	24f0      	movs	r4, #240	; 0xf0
 800a8be:	58d5      	ldr	r5, [r2, r3]
 800a8c0:	0424      	lsls	r4, r4, #16
 800a8c2:	432c      	orrs	r4, r5
 800a8c4:	50d4      	str	r4, [r2, r3]
 800a8c6:	e5af      	b.n	800a428 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800a8c8:	23a8      	movs	r3, #168	; 0xa8
 800a8ca:	4a08      	ldr	r2, [pc, #32]	; (800a8ec <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a8cc:	26f0      	movs	r6, #240	; 0xf0
 800a8ce:	58d5      	ldr	r5, [r2, r3]
 800a8d0:	e7da      	b.n	800a888 <RemapAndLinkDMAtoUARTRx+0x554>
 800a8d2:	46c0      	nop			; (mov r8, r8)
 800a8d4:	40020008 	.word	0x40020008
 800a8d8:	40020030 	.word	0x40020030
 800a8dc:	40020058 	.word	0x40020058
 800a8e0:	4002006c 	.word	0x4002006c
 800a8e4:	4002041c 	.word	0x4002041c
 800a8e8:	40020430 	.word	0x40020430
 800a8ec:	40020400 	.word	0x40020400
 800a8f0:	fffff0ff 	.word	0xfffff0ff
 800a8f4:	40020000 	.word	0x40020000
 800a8f8:	fff0ffff 	.word	0xfff0ffff
 800a8fc:	ff0fffff 	.word	0xff0fffff
 800a900:	40011c00 	.word	0x40011c00

0800a904 <DMA_MSG_RX_Setup>:
{	
 800a904:	b570      	push	{r4, r5, r6, lr}
 800a906:	000d      	movs	r5, r1
 800a908:	0004      	movs	r4, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800a90a:	f7ff fd13 	bl	800a334 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800a90e:	0028      	movs	r0, r5
 800a910:	2100      	movs	r1, #0
 800a912:	f7ff fc59 	bl	800a1c8 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);	
 800a916:	0020      	movs	r0, r4
 800a918:	f7ff fa1c 	bl	8009d54 <GetPort>
 800a91c:	1e41      	subs	r1, r0, #1
 800a91e:	4803      	ldr	r0, [pc, #12]	; (800a92c <DMA_MSG_RX_Setup+0x28>)
 800a920:	2201      	movs	r2, #1
 800a922:	1809      	adds	r1, r1, r0
 800a924:	0020      	movs	r0, r4
 800a926:	f006 ff69 	bl	80117fc <HAL_UART_Receive_DMA>
}
 800a92a:	bd70      	pop	{r4, r5, r6, pc}
 800a92c:	20001ca4 	.word	0x20001ca4

0800a930 <SetupMessagingRxDMAs>:
{	
 800a930:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800a932:	4c14      	ldr	r4, [pc, #80]	; (800a984 <SetupMessagingRxDMAs+0x54>)
 800a934:	7863      	ldrb	r3, [r4, #1]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d01f      	beq.n	800a97a <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P2] == FREE)	
 800a93a:	78a3      	ldrb	r3, [r4, #2]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d017      	beq.n	800a970 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P3] == FREE)
 800a940:	78e3      	ldrb	r3, [r4, #3]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00f      	beq.n	800a966 <SetupMessagingRxDMAs+0x36>
	if (portStatus[P4] == FREE)
 800a946:	7923      	ldrb	r3, [r4, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d007      	beq.n	800a95c <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P5] == FREE)
 800a94c:	7963      	ldrb	r3, [r4, #5]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d103      	bne.n	800a95a <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800a952:	490d      	ldr	r1, [pc, #52]	; (800a988 <SetupMessagingRxDMAs+0x58>)
 800a954:	480d      	ldr	r0, [pc, #52]	; (800a98c <SetupMessagingRxDMAs+0x5c>)
 800a956:	f7ff ffd5 	bl	800a904 <DMA_MSG_RX_Setup>
}
 800a95a:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800a95c:	490c      	ldr	r1, [pc, #48]	; (800a990 <SetupMessagingRxDMAs+0x60>)
 800a95e:	480d      	ldr	r0, [pc, #52]	; (800a994 <SetupMessagingRxDMAs+0x64>)
 800a960:	f7ff ffd0 	bl	800a904 <DMA_MSG_RX_Setup>
 800a964:	e7f2      	b.n	800a94c <SetupMessagingRxDMAs+0x1c>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800a966:	490c      	ldr	r1, [pc, #48]	; (800a998 <SetupMessagingRxDMAs+0x68>)
 800a968:	480c      	ldr	r0, [pc, #48]	; (800a99c <SetupMessagingRxDMAs+0x6c>)
 800a96a:	f7ff ffcb 	bl	800a904 <DMA_MSG_RX_Setup>
 800a96e:	e7ea      	b.n	800a946 <SetupMessagingRxDMAs+0x16>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800a970:	490b      	ldr	r1, [pc, #44]	; (800a9a0 <SetupMessagingRxDMAs+0x70>)
 800a972:	480c      	ldr	r0, [pc, #48]	; (800a9a4 <SetupMessagingRxDMAs+0x74>)
 800a974:	f7ff ffc6 	bl	800a904 <DMA_MSG_RX_Setup>
 800a978:	e7e2      	b.n	800a940 <SetupMessagingRxDMAs+0x10>
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800a97a:	490b      	ldr	r1, [pc, #44]	; (800a9a8 <SetupMessagingRxDMAs+0x78>)
 800a97c:	480b      	ldr	r0, [pc, #44]	; (800a9ac <SetupMessagingRxDMAs+0x7c>)
 800a97e:	f7ff ffc1 	bl	800a904 <DMA_MSG_RX_Setup>
 800a982:	e7da      	b.n	800a93a <SetupMessagingRxDMAs+0xa>
 800a984:	20000c3c 	.word	0x20000c3c
 800a988:	2000235c 	.word	0x2000235c
 800a98c:	20006ac0 	.word	0x20006ac0
 800a990:	20002324 	.word	0x20002324
 800a994:	20006998 	.word	0x20006998
 800a998:	200022ec 	.word	0x200022ec
 800a99c:	20006b40 	.word	0x20006b40
 800a9a0:	200022b4 	.word	0x200022b4
 800a9a4:	20006bb8 	.word	0x20006bb8
 800a9a8:	2000227c 	.word	0x2000227c
 800a9ac:	20006a50 	.word	0x20006a50

0800a9b0 <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800a9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9b2:	46d6      	mov	lr, sl
 800a9b4:	464f      	mov	r7, r9
 800a9b6:	4646      	mov	r6, r8
 800a9b8:	b5c0      	push	{r6, r7, lr}
	hDMA = &streamDMA[port - 1];
 800a9ba:	1e47      	subs	r7, r0, #1
 800a9bc:	00fe      	lsls	r6, r7, #3
 800a9be:	4b1c      	ldr	r3, [pc, #112]	; (800aa30 <SwitchStreamDMAToMsg+0x80>)
 800a9c0:	1bf6      	subs	r6, r6, r7
 800a9c2:	00f6      	lsls	r6, r6, #3
 800a9c4:	4698      	mov	r8, r3
 800a9c6:	46b2      	mov	sl, r6
 800a9c8:	44c2      	add	sl, r8
void SwitchStreamDMAToMsg(uint8_t port) {
 800a9ca:	4681      	mov	r9, r0
	HAL_DMA_Abort(hDMA);
 800a9cc:	4650      	mov	r0, sl
 800a9ce:	f004 ff49 	bl	800f864 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a9d2:	4643      	mov	r3, r8
 800a9d4:	2400      	movs	r4, #0
 800a9d6:	58f2      	ldr	r2, [r6, r3]
	dmaStreamCount[port - 1] = 0;
 800a9d8:	4b16      	ldr	r3, [pc, #88]	; (800aa34 <SwitchStreamDMAToMsg+0x84>)
 800a9da:	00bf      	lsls	r7, r7, #2
	hDMA->Instance->CNDTR = 0;
 800a9dc:	6054      	str	r4, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800a9de:	50fc      	str	r4, [r7, r3]
	dmaStreamTotal[port - 1] = 0;
 800a9e0:	4b15      	ldr	r3, [pc, #84]	; (800aa38 <SwitchStreamDMAToMsg+0x88>)
 800a9e2:	50fc      	str	r4, [r7, r3]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800a9e4:	4b15      	ldr	r3, [pc, #84]	; (800aa3c <SwitchStreamDMAToMsg+0x8c>)
 800a9e6:	18f5      	adds	r5, r6, r3
	hDMA->Instance = ch;
 800a9e8:	50f2      	str	r2, [r6, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a9ea:	2380      	movs	r3, #128	; 0x80
 800a9ec:	60eb      	str	r3, [r5, #12]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a9ee:	3b60      	subs	r3, #96	; 0x60
 800a9f0:	61ab      	str	r3, [r5, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a9f2:	2380      	movs	r3, #128	; 0x80
 800a9f4:	019b      	lsls	r3, r3, #6
 800a9f6:	61eb      	str	r3, [r5, #28]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a9f8:	606c      	str	r4, [r5, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a9fa:	60ac      	str	r4, [r5, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a9fc:	612c      	str	r4, [r5, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a9fe:	616c      	str	r4, [r5, #20]
	HAL_DMA_Init(hDMA);		
 800aa00:	0028      	movs	r0, r5
 800aa02:	f004 fed7 	bl	800f7b4 <HAL_DMA_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800aa06:	4653      	mov	r3, sl
 800aa08:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800aa0a:	f7ff f9a3 	bl	8009d54 <GetPort>
 800aa0e:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <SwitchStreamDMAToMsg+0x90>)
 800aa10:	541c      	strb	r4, [r3, r0]
	streamDMA[port - 1].Instance = 0;
 800aa12:	4643      	mov	r3, r8
 800aa14:	50f4      	str	r4, [r6, r3]
	dmaStreamDst[port - 1] = 0;
 800aa16:	4b0b      	ldr	r3, [pc, #44]	; (800aa44 <SwitchStreamDMAToMsg+0x94>)
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800aa18:	4648      	mov	r0, r9
	dmaStreamDst[port - 1] = 0;
 800aa1a:	50fc      	str	r4, [r7, r3]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800aa1c:	f002 fa2c 	bl	800ce78 <GetUart>
 800aa20:	0029      	movs	r1, r5
 800aa22:	f7ff ff6f 	bl	800a904 <DMA_MSG_RX_Setup>
}
 800aa26:	bc1c      	pop	{r2, r3, r4}
 800aa28:	4690      	mov	r8, r2
 800aa2a:	4699      	mov	r9, r3
 800aa2c:	46a2      	mov	sl, r4
 800aa2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa30:	20002084 	.word	0x20002084
 800aa34:	20001874 	.word	0x20001874
 800aa38:	20001888 	.word	0x20001888
 800aa3c:	2000227c 	.word	0x2000227c
 800aa40:	20000c3c 	.word	0x20000c3c
 800aa44:	20001860 	.word	0x20001860

0800aa48 <DMA_STREAM_Setup>:
{	
 800aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4a:	0016      	movs	r6, r2
 800aa4c:	0005      	movs	r5, r0
 800aa4e:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800aa50:	f7ff f980 	bl	8009d54 <GetPort>
	hDMA = &streamDMA[port-1];
 800aa54:	3801      	subs	r0, #1
 800aa56:	00c4      	lsls	r4, r0, #3
 800aa58:	1a24      	subs	r4, r4, r0
 800aa5a:	480a      	ldr	r0, [pc, #40]	; (800aa84 <DMA_STREAM_Setup+0x3c>)
 800aa5c:	00e4      	lsls	r4, r4, #3
 800aa5e:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800aa60:	0021      	movs	r1, r4
 800aa62:	0028      	movs	r0, r5
 800aa64:	f7ff fc66 	bl	800a334 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800aa68:	0020      	movs	r0, r4
 800aa6a:	2101      	movs	r1, #1
 800aa6c:	f7ff fbac 	bl	800a1c8 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800aa70:	2369      	movs	r3, #105	; 0x69
 800aa72:	2201      	movs	r2, #1
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800aa74:	6839      	ldr	r1, [r7, #0]
	huartSrc->State = HAL_UART_STATE_READY;
 800aa76:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800aa78:	0028      	movs	r0, r5
 800aa7a:	0032      	movs	r2, r6
 800aa7c:	3128      	adds	r1, #40	; 0x28
 800aa7e:	f006 febd 	bl	80117fc <HAL_UART_Receive_DMA>
}
 800aa82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa84:	20002084 	.word	0x20002084

0800aa88 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800aa88:	2310      	movs	r3, #16
 800aa8a:	4807      	ldr	r0, [pc, #28]	; (800aaa8 <CRC_Init+0x20>)
{
 800aa8c:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800aa8e:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800aa90:	4b06      	ldr	r3, [pc, #24]	; (800aaac <CRC_Init+0x24>)
 800aa92:	6003      	str	r3, [r0, #0]
 800aa94:	2300      	movs	r3, #0
 800aa96:	8083      	strh	r3, [r0, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800aa98:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800aa9a:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800aa9c:	3303      	adds	r3, #3
 800aa9e:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800aaa0:	f004 fdb6 	bl	800f610 <HAL_CRC_Init>
}
 800aaa4:	bd10      	pop	{r4, pc}
 800aaa6:	46c0      	nop			; (mov r8, r8)
 800aaa8:	20006c2c 	.word	0x20006c2c
 800aaac:	40023000 	.word	0x40023000

0800aab0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800aab0:	2340      	movs	r3, #64	; 0x40
 800aab2:	4a05      	ldr	r2, [pc, #20]	; (800aac8 <HAL_CRC_MspInit+0x18>)
{
 800aab4:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800aab6:	6951      	ldr	r1, [r2, #20]
 800aab8:	4319      	orrs	r1, r3
 800aaba:	6151      	str	r1, [r2, #20]
 800aabc:	6952      	ldr	r2, [r2, #20]
 800aabe:	4013      	ands	r3, r2
 800aac0:	9301      	str	r3, [sp, #4]
 800aac2:	9b01      	ldr	r3, [sp, #4]
}
 800aac4:	b002      	add	sp, #8
 800aac6:	4770      	bx	lr
 800aac8:	40021000 	.word	0x40021000

0800aacc <CalculateCRC8>:
 */
uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800aacc:	2300      	movs	r3, #0
{
 800aace:	b570      	push	{r4, r5, r6, lr}
 800aad0:	b082      	sub	sp, #8
 800aad2:	0005      	movs	r5, r0
 800aad4:	000c      	movs	r4, r1
  uint8_t temp_buffer[4] = {0};
 800aad6:	9301      	str	r3, [sp, #4]

	return pTemp;
  }
  
else
	return 0;
 800aad8:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800aada:	2d00      	cmp	r5, #0
 800aadc:	d019      	beq.n	800ab12 <CalculateCRC8+0x46>
 800aade:	2900      	cmp	r1, #0
 800aae0:	d017      	beq.n	800ab12 <CalculateCRC8+0x46>
	if(size < 4)
 800aae2:	2903      	cmp	r1, #3
 800aae4:	d817      	bhi.n	800ab16 <CalculateCRC8+0x4a>
			temp_buffer[i] = pBuffer[temp_index++];
 800aae6:	466a      	mov	r2, sp
 800aae8:	782b      	ldrb	r3, [r5, #0]
 800aaea:	7113      	strb	r3, [r2, #4]
			if(--size == 0) break;
 800aaec:	2901      	cmp	r1, #1
 800aaee:	d00a      	beq.n	800ab06 <CalculateCRC8+0x3a>
		for(int i=0; i<4; i++)
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	3c02      	subs	r4, #2
 800aaf4:	b2a4      	uxth	r4, r4
 800aaf6:	3401      	adds	r4, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800aaf8:	4669      	mov	r1, sp
		for(int i=0; i<4; i++)
 800aafa:	3301      	adds	r3, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800aafc:	5cea      	ldrb	r2, [r5, r3]
 800aafe:	3104      	adds	r1, #4
 800ab00:	54ca      	strb	r2, [r1, r3]
			if(--size == 0) break;
 800ab02:	429c      	cmp	r4, r3
 800ab04:	d1f8      	bne.n	800aaf8 <CalculateCRC8+0x2c>
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800ab06:	2201      	movs	r2, #1
 800ab08:	a901      	add	r1, sp, #4
 800ab0a:	4814      	ldr	r0, [pc, #80]	; (800ab5c <CalculateCRC8+0x90>)
 800ab0c:	f004 fdde 	bl	800f6cc <HAL_CRC_Calculate>
 800ab10:	b2c0      	uxtb	r0, r0
}
 800ab12:	b002      	add	sp, #8
 800ab14:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800ab16:	4e11      	ldr	r6, [pc, #68]	; (800ab5c <CalculateCRC8+0x90>)
 800ab18:	088a      	lsrs	r2, r1, #2
 800ab1a:	0030      	movs	r0, r6
 800ab1c:	0029      	movs	r1, r5
 800ab1e:	f004 fdd5 	bl	800f6cc <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800ab22:	2203      	movs	r2, #3
 800ab24:	0013      	movs	r3, r2
 800ab26:	4023      	ands	r3, r4
 800ab28:	d015      	beq.n	800ab56 <CalculateCRC8+0x8a>
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	b299      	uxth	r1, r3
			for(int i=0; i<4; i++)
 800ab2e:	2300      	movs	r3, #0
			temp_index = size - (size%4);
 800ab30:	4394      	bics	r4, r2
 800ab32:	b2e4      	uxtb	r4, r4
				temp_buffer[i] = pBuffer[temp_index++];
 800ab34:	1c62      	adds	r2, r4, #1
 800ab36:	5d28      	ldrb	r0, [r5, r4]
 800ab38:	466c      	mov	r4, sp
 800ab3a:	3404      	adds	r4, #4
 800ab3c:	b2d2      	uxtb	r2, r2
 800ab3e:	54e0      	strb	r0, [r4, r3]
				if(--size == 0) break;
 800ab40:	4299      	cmp	r1, r3
 800ab42:	d003      	beq.n	800ab4c <CalculateCRC8+0x80>
			for(int i=0; i<4; i++)
 800ab44:	3301      	adds	r3, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800ab46:	0014      	movs	r4, r2
			for(int i=0; i<4; i++)
 800ab48:	2b04      	cmp	r3, #4
 800ab4a:	d1f3      	bne.n	800ab34 <CalculateCRC8+0x68>
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	a901      	add	r1, sp, #4
 800ab50:	0030      	movs	r0, r6
 800ab52:	f004 fd91 	bl	800f678 <HAL_CRC_Accumulate>
 800ab56:	b2c0      	uxtb	r0, r0
 800ab58:	e7db      	b.n	800ab12 <CalculateCRC8+0x46>
 800ab5a:	46c0      	nop			; (mov r8, r8)
 800ab5c:	20006c2c 	.word	0x20006c2c

0800ab60 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab62:	000d      	movs	r5, r1
 800ab64:	0006      	movs	r6, r0
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800ab66:	4c25      	ldr	r4, [pc, #148]	; (800abfc <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800ab68:	f005 fb44 	bl	80101f4 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ab6c:	4924      	ldr	r1, [pc, #144]	; (800ac00 <EE_VerifyPageFullWriteVariable+0xa0>)
 800ab6e:	880a      	ldrh	r2, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800ab70:	8823      	ldrh	r3, [r4, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ab72:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800ab74:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d105      	bne.n	800ab86 <EE_VerifyPageFullWriteVariable+0x26>
				if(PageStatusA == RECEIVE_DATA){
 800ab7a:	4b22      	ldr	r3, [pc, #136]	; (800ac04 <EE_VerifyPageFullWriteVariable+0xa4>)
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d007      	beq.n	800ab90 <EE_VerifyPageFullWriteVariable+0x30>
 800ab80:	4a21      	ldr	r2, [pc, #132]	; (800ac08 <EE_VerifyPageFullWriteVariable+0xa8>)
 800ab82:	0023      	movs	r3, r4
 800ab84:	e007      	b.n	800ab96 <EE_VerifyPageFullWriteVariable+0x36>
			else if(PageStatusA == VALID_PAGE){
 800ab86:	2a00      	cmp	r2, #0
 800ab88:	d122      	bne.n	800abd0 <EE_VerifyPageFullWriteVariable+0x70>
				if(PageStatusB == RECEIVE_DATA){
 800ab8a:	4a1e      	ldr	r2, [pc, #120]	; (800ac04 <EE_VerifyPageFullWriteVariable+0xa4>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d0f7      	beq.n	800ab80 <EE_VerifyPageFullWriteVariable+0x20>
 800ab90:	000c      	movs	r4, r1
 800ab92:	000b      	movs	r3, r1
 800ab94:	4a1d      	ldr	r2, [pc, #116]	; (800ac0c <EE_VerifyPageFullWriteVariable+0xac>)
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	d103      	bne.n	800aba4 <EE_VerifyPageFullWriteVariable+0x44>
 800ab9c:	e009      	b.n	800abb2 <EE_VerifyPageFullWriteVariable+0x52>
 800ab9e:	6823      	ldr	r3, [r4, #0]
 800aba0:	3301      	adds	r3, #1
 800aba2:	d006      	beq.n	800abb2 <EE_VerifyPageFullWriteVariable+0x52>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800aba4:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800aba6:	42a2      	cmp	r2, r4
 800aba8:	d8f9      	bhi.n	800ab9e <EE_VerifyPageFullWriteVariable+0x3e>
		}
	}
	
	HAL_FLASH_Lock();
 800abaa:	f005 fb35 	bl	8010218 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800abae:	2080      	movs	r0, #128	; 0x80
}
 800abb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800abb2:	002a      	movs	r2, r5
 800abb4:	2300      	movs	r3, #0
 800abb6:	0021      	movs	r1, r4
 800abb8:	2001      	movs	r0, #1
 800abba:	f005 fb7b 	bl	80102b4 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800abbe:	4814      	ldr	r0, [pc, #80]	; (800ac10 <EE_VerifyPageFullWriteVariable+0xb0>)
 800abc0:	f005 fb34 	bl	801022c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d005      	beq.n	800abd4 <EE_VerifyPageFullWriteVariable+0x74>
			return pFlash.ErrorCode;
 800abc8:	4b12      	ldr	r3, [pc, #72]	; (800ac14 <EE_VerifyPageFullWriteVariable+0xb4>)
 800abca:	69d8      	ldr	r0, [r3, #28]
 800abcc:	b280      	uxth	r0, r0
 800abce:	e7ef      	b.n	800abb0 <EE_VerifyPageFullWriteVariable+0x50>
		return NO_VALID_PAGE;
 800abd0:	20ab      	movs	r0, #171	; 0xab
 800abd2:	e7ed      	b.n	800abb0 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800abd4:	2701      	movs	r7, #1
 800abd6:	4d10      	ldr	r5, [pc, #64]	; (800ac18 <EE_VerifyPageFullWriteVariable+0xb8>)
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800abd8:	1ca1      	adds	r1, r4, #2
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800abda:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800abdc:	0032      	movs	r2, r6
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800abde:	43bb      	bics	r3, r7
 800abe0:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800abe2:	2001      	movs	r0, #1
 800abe4:	2300      	movs	r3, #0
 800abe6:	f005 fb65 	bl	80102b4 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800abea:	4809      	ldr	r0, [pc, #36]	; (800ac10 <EE_VerifyPageFullWriteVariable+0xb0>)
 800abec:	f005 fb1e 	bl	801022c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d1e9      	bne.n	800abc8 <EE_VerifyPageFullWriteVariable+0x68>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800abf4:	692b      	ldr	r3, [r5, #16]
 800abf6:	43bb      	bics	r3, r7
 800abf8:	612b      	str	r3, [r5, #16]
 800abfa:	e7e5      	b.n	800abc8 <EE_VerifyPageFullWriteVariable+0x68>
 800abfc:	0801f000 	.word	0x0801f000
 800ac00:	0801e000 	.word	0x0801e000
 800ac04:	0000eeee 	.word	0x0000eeee
 800ac08:	0801fffe 	.word	0x0801fffe
 800ac0c:	0801effe 	.word	0x0801effe
 800ac10:	0000c350 	.word	0x0000c350
 800ac14:	20006da8 	.word	0x20006da8
 800ac18:	40022000 	.word	0x40022000

0800ac1c <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ac1c:	4b11      	ldr	r3, [pc, #68]	; (800ac64 <EE_ReadVariable+0x48>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800ac1e:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ac20:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800ac22:	4b11      	ldr	r3, [pc, #68]	; (800ac68 <EE_ReadVariable+0x4c>)
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800ac28:	2a00      	cmp	r2, #0
 800ac2a:	d005      	beq.n	800ac38 <EE_ReadVariable+0x1c>
			else if(PageStatusB == VALID_PAGE){
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d117      	bne.n	800ac60 <EE_ReadVariable+0x44>
 800ac30:	4b0e      	ldr	r3, [pc, #56]	; (800ac6c <EE_ReadVariable+0x50>)
 800ac32:	4c0f      	ldr	r4, [pc, #60]	; (800ac70 <EE_ReadVariable+0x54>)
 800ac34:	001a      	movs	r2, r3
 800ac36:	e002      	b.n	800ac3e <EE_ReadVariable+0x22>
			if(PageStatusA == VALID_PAGE){
 800ac38:	4b0e      	ldr	r3, [pc, #56]	; (800ac74 <EE_ReadVariable+0x58>)
 800ac3a:	4c0f      	ldr	r4, [pc, #60]	; (800ac78 <EE_ReadVariable+0x5c>)
 800ac3c:	001a      	movs	r2, r3
		AddressValue =(*(__IO uint16_t* )Address);
 800ac3e:	8812      	ldrh	r2, [r2, #0]
		if(AddressValue == VirtAddress){
 800ac40:	4290      	cmp	r0, r2
 800ac42:	d103      	bne.n	800ac4c <EE_ReadVariable+0x30>
 800ac44:	e007      	b.n	800ac56 <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 800ac46:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 800ac48:	4282      	cmp	r2, r0
 800ac4a:	d004      	beq.n	800ac56 <EE_ReadVariable+0x3a>
			Address =Address - 4;
 800ac4c:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800ac4e:	42a3      	cmp	r3, r4
 800ac50:	d8f9      	bhi.n	800ac46 <EE_ReadVariable+0x2a>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800ac52:	2001      	movs	r0, #1
}
 800ac54:	bd10      	pop	{r4, pc}
			*Data =(*(__IO uint16_t* )(Address - 2));
 800ac56:	3b02      	subs	r3, #2
 800ac58:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 800ac5a:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 800ac5c:	800b      	strh	r3, [r1, #0]
			break;
 800ac5e:	e7f9      	b.n	800ac54 <EE_ReadVariable+0x38>
		return NO_VALID_PAGE;
 800ac60:	20ab      	movs	r0, #171	; 0xab
 800ac62:	e7f7      	b.n	800ac54 <EE_ReadVariable+0x38>
 800ac64:	0801e000 	.word	0x0801e000
 800ac68:	0801f000 	.word	0x0801f000
 800ac6c:	0801fffe 	.word	0x0801fffe
 800ac70:	0801f002 	.word	0x0801f002
 800ac74:	0801effe 	.word	0x0801effe
 800ac78:	0801e002 	.word	0x0801e002

0800ac7c <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800ac7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac7e:	46d6      	mov	lr, sl
 800ac80:	4646      	mov	r6, r8
 800ac82:	464f      	mov	r7, r9
 800ac84:	000c      	movs	r4, r1
 800ac86:	b5c0      	push	{r6, r7, lr}
 800ac88:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 800ac8a:	f005 fab3 	bl	80101f4 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800ac8e:	0021      	movs	r1, r4
 800ac90:	0030      	movs	r0, r6
 800ac92:	f7ff ff65 	bl	800ab60 <EE_VerifyPageFullWriteVariable>
 800ac96:	0005      	movs	r5, r0
	if(Status == PAGE_FULL){
 800ac98:	2880      	cmp	r0, #128	; 0x80
 800ac9a:	d007      	beq.n	800acac <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800ac9c:	f005 fabc 	bl	8010218 <HAL_FLASH_Lock>
}
 800aca0:	0028      	movs	r0, r5
 800aca2:	bc1c      	pop	{r2, r3, r4}
 800aca4:	4690      	mov	r8, r2
 800aca6:	4699      	mov	r9, r3
 800aca8:	46a2      	mov	sl, r4
 800acaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800acac:	f005 faa2 	bl	80101f4 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800acb0:	4935      	ldr	r1, [pc, #212]	; (800ad88 <EE_WriteVariable+0x10c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800acb2:	4a36      	ldr	r2, [pc, #216]	; (800ad8c <EE_WriteVariable+0x110>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800acb4:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800acb6:	8813      	ldrh	r3, [r2, #0]
 800acb8:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800acba:	2800      	cmp	r0, #0
 800acbc:	d013      	beq.n	800ace6 <EE_WriteVariable+0x6a>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800acbe:	352b      	adds	r5, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d1eb      	bne.n	800ac9c <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800acc4:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800acc6:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800acc8:	4a31      	ldr	r2, [pc, #196]	; (800ad90 <EE_WriteVariable+0x114>)
 800acca:	2300      	movs	r3, #0
 800accc:	4641      	mov	r1, r8
 800acce:	2001      	movs	r0, #1
 800acd0:	f005 faf0 	bl	80102b4 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800acd4:	482f      	ldr	r0, [pc, #188]	; (800ad94 <EE_WriteVariable+0x118>)
 800acd6:	f005 faa9 	bl	801022c <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800acda:	2800      	cmp	r0, #0
 800acdc:	d006      	beq.n	800acec <EE_WriteVariable+0x70>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
		return pFlash.ErrorCode;
 800acde:	4b2e      	ldr	r3, [pc, #184]	; (800ad98 <EE_WriteVariable+0x11c>)
 800ace0:	69dd      	ldr	r5, [r3, #28]
 800ace2:	b2ad      	uxth	r5, r5
 800ace4:	e7da      	b.n	800ac9c <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800ace6:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800ace8:	4690      	mov	r8, r2
 800acea:	e7ed      	b.n	800acc8 <EE_WriteVariable+0x4c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800acec:	2101      	movs	r1, #1
 800acee:	4a2b      	ldr	r2, [pc, #172]	; (800ad9c <EE_WriteVariable+0x120>)
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800acf0:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800acf2:	6913      	ldr	r3, [r2, #16]
 800acf4:	438b      	bics	r3, r1
 800acf6:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800acf8:	0021      	movs	r1, r4
 800acfa:	f7ff ff31 	bl	800ab60 <EE_VerifyPageFullWriteVariable>
 800acfe:	1e05      	subs	r5, r0, #0
	if(EepromStatus != HAL_OK){
 800ad00:	d1cc      	bne.n	800ac9c <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800ad02:	4b27      	ldr	r3, [pc, #156]	; (800ada0 <EE_WriteVariable+0x124>)
 800ad04:	2401      	movs	r4, #1
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ad06:	4f27      	ldr	r7, [pc, #156]	; (800ada4 <EE_WriteVariable+0x128>)
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800ad08:	469a      	mov	sl, r3
 800ad0a:	e003      	b.n	800ad14 <EE_WriteVariable+0x98>
 800ad0c:	3401      	adds	r4, #1
 800ad0e:	b2a4      	uxth	r4, r4
 800ad10:	4554      	cmp	r4, sl
 800ad12:	d00f      	beq.n	800ad34 <EE_WriteVariable+0xb8>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800ad14:	42a6      	cmp	r6, r4
 800ad16:	d0f9      	beq.n	800ad0c <EE_WriteVariable+0x90>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ad18:	0039      	movs	r1, r7
 800ad1a:	0020      	movs	r0, r4
 800ad1c:	f7ff ff7e 	bl	800ac1c <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800ad20:	2801      	cmp	r0, #1
 800ad22:	d0f3      	beq.n	800ad0c <EE_WriteVariable+0x90>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800ad24:	8839      	ldrh	r1, [r7, #0]
 800ad26:	0020      	movs	r0, r4
 800ad28:	f7ff ff1a 	bl	800ab60 <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d0ed      	beq.n	800ad0c <EE_WriteVariable+0x90>
 800ad30:	0005      	movs	r5, r0
 800ad32:	e7b3      	b.n	800ac9c <EE_WriteVariable+0x20>
	FLASH_PageErase(OldPageAddress);
 800ad34:	4648      	mov	r0, r9
 800ad36:	f005 fb8d 	bl	8010454 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad3a:	4816      	ldr	r0, [pc, #88]	; (800ad94 <EE_WriteVariable+0x118>)
 800ad3c:	f005 fa76 	bl	801022c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d1cc      	bne.n	800acde <EE_WriteVariable+0x62>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800ad44:	2080      	movs	r0, #128	; 0x80
 800ad46:	0100      	lsls	r0, r0, #4
 800ad48:	4448      	add	r0, r9
 800ad4a:	f005 fb83 	bl	8010454 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad4e:	4811      	ldr	r0, [pc, #68]	; (800ad94 <EE_WriteVariable+0x118>)
 800ad50:	f005 fa6c 	bl	801022c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800ad54:	2800      	cmp	r0, #0
 800ad56:	d1c2      	bne.n	800acde <EE_WriteVariable+0x62>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ad58:	2202      	movs	r2, #2
 800ad5a:	4c10      	ldr	r4, [pc, #64]	; (800ad9c <EE_WriteVariable+0x120>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800ad5c:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ad5e:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800ad60:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ad62:	4393      	bics	r3, r2
 800ad64:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800ad66:	2200      	movs	r2, #0
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f005 faa3 	bl	80102b4 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad6e:	4809      	ldr	r0, [pc, #36]	; (800ad94 <EE_WriteVariable+0x118>)
 800ad70:	f005 fa5c 	bl	801022c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d1b2      	bne.n	800acde <EE_WriteVariable+0x62>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ad78:	2201      	movs	r2, #1
 800ad7a:	6923      	ldr	r3, [r4, #16]
 800ad7c:	4393      	bics	r3, r2
 800ad7e:	6123      	str	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
 800ad80:	f005 fa4a 	bl	8010218 <HAL_FLASH_Lock>
 800ad84:	e78a      	b.n	800ac9c <EE_WriteVariable+0x20>
 800ad86:	46c0      	nop			; (mov r8, r8)
 800ad88:	0801e000 	.word	0x0801e000
 800ad8c:	0801f000 	.word	0x0801f000
 800ad90:	0000eeee 	.word	0x0000eeee
 800ad94:	0000c350 	.word	0x0000c350
 800ad98:	20006da8 	.word	0x20006da8
 800ad9c:	40022000 	.word	0x40022000
 800ada0:	00000401 	.word	0x00000401
 800ada4:	200023cc 	.word	0x200023cc

0800ada8 <EE_Format>:
uint16_t EE_Format(void){
 800ada8:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 800adaa:	f005 fa23 	bl	80101f4 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800adae:	481f      	ldr	r0, [pc, #124]	; (800ae2c <EE_Format+0x84>)
 800adb0:	f005 fb50 	bl	8010454 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800adb4:	481e      	ldr	r0, [pc, #120]	; (800ae30 <EE_Format+0x88>)
 800adb6:	f005 fa39 	bl	801022c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800adba:	2800      	cmp	r0, #0
 800adbc:	d003      	beq.n	800adc6 <EE_Format+0x1e>
			return pFlash.ErrorCode;
 800adbe:	4b1d      	ldr	r3, [pc, #116]	; (800ae34 <EE_Format+0x8c>)
 800adc0:	69d8      	ldr	r0, [r3, #28]
 800adc2:	b280      	uxth	r0, r0
}
 800adc4:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800adc6:	481c      	ldr	r0, [pc, #112]	; (800ae38 <EE_Format+0x90>)
 800adc8:	f005 fb44 	bl	8010454 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800adcc:	4818      	ldr	r0, [pc, #96]	; (800ae30 <EE_Format+0x88>)
 800adce:	f005 fa2d 	bl	801022c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800add2:	2800      	cmp	r0, #0
 800add4:	d1f3      	bne.n	800adbe <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800add6:	2202      	movs	r2, #2
 800add8:	4c18      	ldr	r4, [pc, #96]	; (800ae3c <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800adda:	4914      	ldr	r1, [pc, #80]	; (800ae2c <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800addc:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800adde:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ade0:	4393      	bics	r3, r2
 800ade2:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ade4:	2200      	movs	r2, #0
 800ade6:	2300      	movs	r3, #0
 800ade8:	f005 fa64 	bl	80102b4 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800adec:	4810      	ldr	r0, [pc, #64]	; (800ae30 <EE_Format+0x88>)
 800adee:	f005 fa1d 	bl	801022c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800adf2:	2800      	cmp	r0, #0
 800adf4:	d1e3      	bne.n	800adbe <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800adf6:	2501      	movs	r5, #1
 800adf8:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800adfa:	4811      	ldr	r0, [pc, #68]	; (800ae40 <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800adfc:	43ab      	bics	r3, r5
 800adfe:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ae00:	f005 fb28 	bl	8010454 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae04:	480a      	ldr	r0, [pc, #40]	; (800ae30 <EE_Format+0x88>)
 800ae06:	f005 fa11 	bl	801022c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d1d7      	bne.n	800adbe <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ae0e:	480d      	ldr	r0, [pc, #52]	; (800ae44 <EE_Format+0x9c>)
 800ae10:	f005 fb20 	bl	8010454 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae14:	4806      	ldr	r0, [pc, #24]	; (800ae30 <EE_Format+0x88>)
 800ae16:	f005 fa09 	bl	801022c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d1cf      	bne.n	800adbe <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ae1e:	6923      	ldr	r3, [r4, #16]
 800ae20:	43ab      	bics	r3, r5
 800ae22:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 800ae24:	f005 f9f8 	bl	8010218 <HAL_FLASH_Lock>
	return FlashStatus;
 800ae28:	2000      	movs	r0, #0
 800ae2a:	e7cb      	b.n	800adc4 <EE_Format+0x1c>
 800ae2c:	0801e000 	.word	0x0801e000
 800ae30:	0000c350 	.word	0x0000c350
 800ae34:	20006da8 	.word	0x20006da8
 800ae38:	0801e800 	.word	0x0801e800
 800ae3c:	40022000 	.word	0x40022000
 800ae40:	0801f000 	.word	0x0801f000
 800ae44:	0801f800 	.word	0x0801f800

0800ae48 <EE_Init>:
uint16_t EE_Init(void){
 800ae48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae4a:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ae4c:	4c9d      	ldr	r4, [pc, #628]	; (800b0c4 <EE_Init+0x27c>)
uint16_t EE_Init(void){
 800ae4e:	b500      	push	{lr}
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800ae50:	4d9d      	ldr	r5, [pc, #628]	; (800b0c8 <EE_Init+0x280>)
	HAL_FLASH_Unlock();
 800ae52:	f005 f9cf 	bl	80101f4 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ae56:	8823      	ldrh	r3, [r4, #0]
	switch(PageStatusA){
 800ae58:	499c      	ldr	r1, [pc, #624]	; (800b0cc <EE_Init+0x284>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800ae5a:	882a      	ldrh	r2, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ae5c:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800ae5e:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800ae60:	428b      	cmp	r3, r1
 800ae62:	d100      	bne.n	800ae66 <EE_Init+0x1e>
 800ae64:	e06f      	b.n	800af46 <EE_Init+0xfe>
 800ae66:	489a      	ldr	r0, [pc, #616]	; (800b0d0 <EE_Init+0x288>)
 800ae68:	4283      	cmp	r3, r0
 800ae6a:	d05c      	beq.n	800af26 <EE_Init+0xde>
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00e      	beq.n	800ae8e <EE_Init+0x46>
			FlashStatus =EE_Format();
 800ae70:	f7ff ff9a 	bl	800ada8 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae74:	4897      	ldr	r0, [pc, #604]	; (800b0d4 <EE_Init+0x28c>)
 800ae76:	f005 f9d9 	bl	801022c <FLASH_WaitForLastOperation>
 800ae7a:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 800ae7c:	2d00      	cmp	r5, #0
 800ae7e:	d102      	bne.n	800ae86 <EE_Init+0x3e>
	HAL_FLASH_Lock();
 800ae80:	f005 f9ca 	bl	8010218 <HAL_FLASH_Lock>
	return HAL_OK;
 800ae84:	2500      	movs	r5, #0
}
 800ae86:	0028      	movs	r0, r5
 800ae88:	bc04      	pop	{r2}
 800ae8a:	4690      	mov	r8, r2
 800ae8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800ae8e:	2a00      	cmp	r2, #0
 800ae90:	d0ee      	beq.n	800ae70 <EE_Init+0x28>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800ae92:	4282      	cmp	r2, r0
 800ae94:	d100      	bne.n	800ae98 <EE_Init+0x50>
 800ae96:	e103      	b.n	800b0a0 <EE_Init+0x258>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ae98:	4b8f      	ldr	r3, [pc, #572]	; (800b0d8 <EE_Init+0x290>)
	int16_t x =-1;
 800ae9a:	2601      	movs	r6, #1
 800ae9c:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ae9e:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800aea0:	4f8e      	ldr	r7, [pc, #568]	; (800b0dc <EE_Init+0x294>)
	int16_t x =-1;
 800aea2:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800aea4:	883b      	ldrh	r3, [r7, #0]
 800aea6:	b2a5      	uxth	r5, r4
 800aea8:	42ab      	cmp	r3, r5
 800aeaa:	d100      	bne.n	800aeae <EE_Init+0x66>
						x =VarIdx;
 800aeac:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800aeae:	42b4      	cmp	r4, r6
 800aeb0:	d010      	beq.n	800aed4 <EE_Init+0x8c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800aeb2:	4641      	mov	r1, r8
 800aeb4:	0028      	movs	r0, r5
 800aeb6:	f7ff feb1 	bl	800ac1c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800aeba:	2801      	cmp	r0, #1
 800aebc:	d00a      	beq.n	800aed4 <EE_Init+0x8c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800aebe:	4643      	mov	r3, r8
 800aec0:	0028      	movs	r0, r5
 800aec2:	8819      	ldrh	r1, [r3, #0]
 800aec4:	f7ff fe4c 	bl	800ab60 <EE_VerifyPageFullWriteVariable>
 800aec8:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aeca:	4882      	ldr	r0, [pc, #520]	; (800b0d4 <EE_Init+0x28c>)
 800aecc:	f005 f9ae 	bl	801022c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d1d8      	bne.n	800ae86 <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800aed4:	4b82      	ldr	r3, [pc, #520]	; (800b0e0 <EE_Init+0x298>)
 800aed6:	3401      	adds	r4, #1
 800aed8:	429c      	cmp	r4, r3
 800aeda:	d1e3      	bne.n	800aea4 <EE_Init+0x5c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800aedc:	2200      	movs	r2, #0
 800aede:	2300      	movs	r3, #0
 800aee0:	4979      	ldr	r1, [pc, #484]	; (800b0c8 <EE_Init+0x280>)
 800aee2:	2001      	movs	r0, #1
 800aee4:	f005 f9e6 	bl	80102b4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aee8:	487a      	ldr	r0, [pc, #488]	; (800b0d4 <EE_Init+0x28c>)
 800aeea:	f005 f99f 	bl	801022c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d125      	bne.n	800af3e <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aef2:	2201      	movs	r2, #1
 800aef4:	4c7b      	ldr	r4, [pc, #492]	; (800b0e4 <EE_Init+0x29c>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800aef6:	4873      	ldr	r0, [pc, #460]	; (800b0c4 <EE_Init+0x27c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aef8:	6923      	ldr	r3, [r4, #16]
 800aefa:	4393      	bics	r3, r2
 800aefc:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800aefe:	f005 faa9 	bl	8010454 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800af02:	4874      	ldr	r0, [pc, #464]	; (800b0d4 <EE_Init+0x28c>)
 800af04:	f005 f992 	bl	801022c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800af08:	2800      	cmp	r0, #0
 800af0a:	d118      	bne.n	800af3e <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800af0c:	4876      	ldr	r0, [pc, #472]	; (800b0e8 <EE_Init+0x2a0>)
 800af0e:	f005 faa1 	bl	8010454 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800af12:	4870      	ldr	r0, [pc, #448]	; (800b0d4 <EE_Init+0x28c>)
 800af14:	f005 f98a 	bl	801022c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800af18:	2800      	cmp	r0, #0
 800af1a:	d110      	bne.n	800af3e <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800af1c:	2202      	movs	r2, #2
 800af1e:	6923      	ldr	r3, [r4, #16]
 800af20:	4393      	bics	r3, r2
 800af22:	6123      	str	r3, [r4, #16]
 800af24:	e7ac      	b.n	800ae80 <EE_Init+0x38>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800af26:	2a00      	cmp	r2, #0
 800af28:	d07b      	beq.n	800b022 <EE_Init+0x1da>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800af2a:	428a      	cmp	r2, r1
 800af2c:	d100      	bne.n	800af30 <EE_Init+0xe8>
 800af2e:	e08f      	b.n	800b050 <EE_Init+0x208>
				FlashStatus =EE_Format();
 800af30:	f7ff ff3a 	bl	800ada8 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800af34:	4867      	ldr	r0, [pc, #412]	; (800b0d4 <EE_Init+0x28c>)
 800af36:	f005 f979 	bl	801022c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d0a0      	beq.n	800ae80 <EE_Init+0x38>
						return pFlash.ErrorCode;
 800af3e:	4b6b      	ldr	r3, [pc, #428]	; (800b0ec <EE_Init+0x2a4>)
 800af40:	69dd      	ldr	r5, [r3, #28]
 800af42:	b2ad      	uxth	r5, r5
 800af44:	e79f      	b.n	800ae86 <EE_Init+0x3e>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800af46:	2a00      	cmp	r2, #0
 800af48:	d143      	bne.n	800afd2 <EE_Init+0x18a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800af4a:	4b63      	ldr	r3, [pc, #396]	; (800b0d8 <EE_Init+0x290>)
	int16_t x =-1;
 800af4c:	2601      	movs	r6, #1
 800af4e:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800af50:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800af52:	4f67      	ldr	r7, [pc, #412]	; (800b0f0 <EE_Init+0x2a8>)
	int16_t x =-1;
 800af54:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800af56:	883b      	ldrh	r3, [r7, #0]
 800af58:	b2a5      	uxth	r5, r4
 800af5a:	42ab      	cmp	r3, r5
 800af5c:	d100      	bne.n	800af60 <EE_Init+0x118>
						x =VarIdx;
 800af5e:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800af60:	42b4      	cmp	r4, r6
 800af62:	d011      	beq.n	800af88 <EE_Init+0x140>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800af64:	4641      	mov	r1, r8
 800af66:	0028      	movs	r0, r5
 800af68:	f7ff fe58 	bl	800ac1c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800af6c:	2801      	cmp	r0, #1
 800af6e:	d00b      	beq.n	800af88 <EE_Init+0x140>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800af70:	4643      	mov	r3, r8
 800af72:	0028      	movs	r0, r5
 800af74:	8819      	ldrh	r1, [r3, #0]
 800af76:	f7ff fdf3 	bl	800ab60 <EE_VerifyPageFullWriteVariable>
 800af7a:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800af7c:	4855      	ldr	r0, [pc, #340]	; (800b0d4 <EE_Init+0x28c>)
 800af7e:	f005 f955 	bl	801022c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800af82:	2800      	cmp	r0, #0
 800af84:	d000      	beq.n	800af88 <EE_Init+0x140>
 800af86:	e77e      	b.n	800ae86 <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800af88:	4b55      	ldr	r3, [pc, #340]	; (800b0e0 <EE_Init+0x298>)
 800af8a:	3401      	adds	r4, #1
 800af8c:	429c      	cmp	r4, r3
 800af8e:	d1e2      	bne.n	800af56 <EE_Init+0x10e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800af90:	2200      	movs	r2, #0
 800af92:	2300      	movs	r3, #0
 800af94:	494b      	ldr	r1, [pc, #300]	; (800b0c4 <EE_Init+0x27c>)
 800af96:	2001      	movs	r0, #1
 800af98:	f005 f98c 	bl	80102b4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800af9c:	484d      	ldr	r0, [pc, #308]	; (800b0d4 <EE_Init+0x28c>)
 800af9e:	f005 f945 	bl	801022c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d1cb      	bne.n	800af3e <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800afa6:	2201      	movs	r2, #1
 800afa8:	4c4e      	ldr	r4, [pc, #312]	; (800b0e4 <EE_Init+0x29c>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800afaa:	4847      	ldr	r0, [pc, #284]	; (800b0c8 <EE_Init+0x280>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800afac:	6923      	ldr	r3, [r4, #16]
 800afae:	4393      	bics	r3, r2
 800afb0:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800afb2:	f005 fa4f 	bl	8010454 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800afb6:	4847      	ldr	r0, [pc, #284]	; (800b0d4 <EE_Init+0x28c>)
 800afb8:	f005 f938 	bl	801022c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d1be      	bne.n	800af3e <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800afc0:	484c      	ldr	r0, [pc, #304]	; (800b0f4 <EE_Init+0x2ac>)
 800afc2:	f005 fa47 	bl	8010454 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800afc6:	4843      	ldr	r0, [pc, #268]	; (800b0d4 <EE_Init+0x28c>)
 800afc8:	f005 f930 	bl	801022c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800afcc:	2800      	cmp	r0, #0
 800afce:	d0a5      	beq.n	800af1c <EE_Init+0xd4>
 800afd0:	e7b5      	b.n	800af3e <EE_Init+0xf6>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800afd2:	4b3f      	ldr	r3, [pc, #252]	; (800b0d0 <EE_Init+0x288>)
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d1ab      	bne.n	800af30 <EE_Init+0xe8>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800afd8:	0028      	movs	r0, r5
 800afda:	f005 fa3b 	bl	8010454 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800afde:	483d      	ldr	r0, [pc, #244]	; (800b0d4 <EE_Init+0x28c>)
 800afe0:	f005 f924 	bl	801022c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d1aa      	bne.n	800af3e <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800afe8:	4842      	ldr	r0, [pc, #264]	; (800b0f4 <EE_Init+0x2ac>)
 800afea:	f005 fa33 	bl	8010454 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800afee:	4839      	ldr	r0, [pc, #228]	; (800b0d4 <EE_Init+0x28c>)
 800aff0:	f005 f91c 	bl	801022c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d1a2      	bne.n	800af3e <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800aff8:	2202      	movs	r2, #2
 800affa:	4d3a      	ldr	r5, [pc, #232]	; (800b0e4 <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800affc:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800affe:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b000:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b002:	4393      	bics	r3, r2
 800b004:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b006:	2200      	movs	r2, #0
 800b008:	2300      	movs	r3, #0
 800b00a:	f005 f953 	bl	80102b4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b00e:	4831      	ldr	r0, [pc, #196]	; (800b0d4 <EE_Init+0x28c>)
 800b010:	f005 f90c 	bl	801022c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b014:	2800      	cmp	r0, #0
 800b016:	d192      	bne.n	800af3e <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b018:	2201      	movs	r2, #1
 800b01a:	692b      	ldr	r3, [r5, #16]
 800b01c:	4393      	bics	r3, r2
 800b01e:	612b      	str	r3, [r5, #16]
 800b020:	e72e      	b.n	800ae80 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b022:	0020      	movs	r0, r4
 800b024:	f005 fa16 	bl	8010454 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b028:	482a      	ldr	r0, [pc, #168]	; (800b0d4 <EE_Init+0x28c>)
 800b02a:	f005 f8ff 	bl	801022c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b02e:	2800      	cmp	r0, #0
 800b030:	d185      	bne.n	800af3e <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b032:	482d      	ldr	r0, [pc, #180]	; (800b0e8 <EE_Init+0x2a0>)
 800b034:	f005 fa0e 	bl	8010454 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b038:	4826      	ldr	r0, [pc, #152]	; (800b0d4 <EE_Init+0x28c>)
 800b03a:	f005 f8f7 	bl	801022c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b03e:	2800      	cmp	r0, #0
 800b040:	d000      	beq.n	800b044 <EE_Init+0x1fc>
 800b042:	e77c      	b.n	800af3e <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b044:	2102      	movs	r1, #2
 800b046:	4a27      	ldr	r2, [pc, #156]	; (800b0e4 <EE_Init+0x29c>)
 800b048:	6913      	ldr	r3, [r2, #16]
 800b04a:	438b      	bics	r3, r1
 800b04c:	6113      	str	r3, [r2, #16]
 800b04e:	e717      	b.n	800ae80 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b050:	0020      	movs	r0, r4
 800b052:	f005 f9ff 	bl	8010454 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b056:	481f      	ldr	r0, [pc, #124]	; (800b0d4 <EE_Init+0x28c>)
 800b058:	f005 f8e8 	bl	801022c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d000      	beq.n	800b062 <EE_Init+0x21a>
 800b060:	e76d      	b.n	800af3e <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b062:	4821      	ldr	r0, [pc, #132]	; (800b0e8 <EE_Init+0x2a0>)
 800b064:	f005 f9f6 	bl	8010454 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b068:	481a      	ldr	r0, [pc, #104]	; (800b0d4 <EE_Init+0x28c>)
 800b06a:	f005 f8df 	bl	801022c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b06e:	2800      	cmp	r0, #0
 800b070:	d000      	beq.n	800b074 <EE_Init+0x22c>
 800b072:	e764      	b.n	800af3e <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b074:	2202      	movs	r2, #2
 800b076:	4c1b      	ldr	r4, [pc, #108]	; (800b0e4 <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b078:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b07a:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b07c:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b07e:	4393      	bics	r3, r2
 800b080:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b082:	2200      	movs	r2, #0
 800b084:	2300      	movs	r3, #0
 800b086:	f005 f915 	bl	80102b4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b08a:	4812      	ldr	r0, [pc, #72]	; (800b0d4 <EE_Init+0x28c>)
 800b08c:	f005 f8ce 	bl	801022c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b090:	2800      	cmp	r0, #0
 800b092:	d000      	beq.n	800b096 <EE_Init+0x24e>
 800b094:	e753      	b.n	800af3e <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b096:	2201      	movs	r2, #1
 800b098:	6923      	ldr	r3, [r4, #16]
 800b09a:	4393      	bics	r3, r2
 800b09c:	6123      	str	r3, [r4, #16]
 800b09e:	e6ef      	b.n	800ae80 <EE_Init+0x38>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b0a0:	0028      	movs	r0, r5
 800b0a2:	f005 f9d7 	bl	8010454 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b0a6:	480b      	ldr	r0, [pc, #44]	; (800b0d4 <EE_Init+0x28c>)
 800b0a8:	f005 f8c0 	bl	801022c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d000      	beq.n	800b0b2 <EE_Init+0x26a>
 800b0b0:	e745      	b.n	800af3e <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b0b2:	4810      	ldr	r0, [pc, #64]	; (800b0f4 <EE_Init+0x2ac>)
 800b0b4:	f005 f9ce 	bl	8010454 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b0b8:	4806      	ldr	r0, [pc, #24]	; (800b0d4 <EE_Init+0x28c>)
 800b0ba:	f005 f8b7 	bl	801022c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d0c0      	beq.n	800b044 <EE_Init+0x1fc>
 800b0c2:	e73c      	b.n	800af3e <EE_Init+0xf6>
 800b0c4:	0801e000 	.word	0x0801e000
 800b0c8:	0801f000 	.word	0x0801f000
 800b0cc:	0000eeee 	.word	0x0000eeee
 800b0d0:	0000ffff 	.word	0x0000ffff
 800b0d4:	0000c350 	.word	0x0000c350
 800b0d8:	200023cc 	.word	0x200023cc
 800b0dc:	0801f006 	.word	0x0801f006
 800b0e0:	00000401 	.word	0x00000401
 800b0e4:	40022000 	.word	0x40022000
 800b0e8:	0801e800 	.word	0x0801e800
 800b0ec:	20006da8 	.word	0x20006da8
 800b0f0:	0801e006 	.word	0x0801e006
 800b0f4:	0801f800 	.word	0x0801f800

0800b0f8 <EraseSector>:
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b0f8:	2300      	movs	r3, #0
BOS_Status EraseSector(uint32_t sector ) {
 800b0fa:	b500      	push	{lr}
 800b0fc:	b085      	sub	sp, #20
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b0fe:	9301      	str	r3, [sp, #4]
		erase.PageAddress = sector;
 800b100:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800b102:	3301      	adds	r3, #1
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b104:	4669      	mov	r1, sp
 800b106:	a801      	add	r0, sp, #4
		erase.NbPages =1;
 800b108:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b10a:	f005 f937 	bl	801037c <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b10e:	2800      	cmp	r0, #0
 800b110:	d102      	bne.n	800b118 <EraseSector+0x20>
 800b112:	9b00      	ldr	r3, [sp, #0]
 800b114:	3301      	adds	r3, #1
 800b116:	d002      	beq.n	800b11e <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b118:	2216      	movs	r2, #22
 800b11a:	4b02      	ldr	r3, [pc, #8]	; (800b124 <EraseSector+0x2c>)
 800b11c:	701a      	strb	r2, [r3, #0]

	return result;
}
 800b11e:	2000      	movs	r0, #0
 800b120:	b005      	add	sp, #20
 800b122:	bd00      	pop	{pc}
 800b124:	20000c4c 	.word	0x20000c4c

0800b128 <GPIO_Init>:
/** Pinout Configuration
*/
void GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800b128:	2080      	movs	r0, #128	; 0x80
 800b12a:	4b1f      	ldr	r3, [pc, #124]	; (800b1a8 <GPIO_Init+0x80>)
 800b12c:	0300      	lsls	r0, r0, #12
 800b12e:	6959      	ldr	r1, [r3, #20]
{
 800b130:	b500      	push	{lr}
  __GPIOC_CLK_ENABLE();
 800b132:	4301      	orrs	r1, r0
 800b134:	6159      	str	r1, [r3, #20]
 800b136:	695a      	ldr	r2, [r3, #20]
{
 800b138:	b08b      	sub	sp, #44	; 0x2c
  __GPIOC_CLK_ENABLE();
 800b13a:	4002      	ands	r2, r0
  __GPIOA_CLK_ENABLE();
 800b13c:	2080      	movs	r0, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800b13e:	9200      	str	r2, [sp, #0]
 800b140:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 800b142:	6959      	ldr	r1, [r3, #20]
 800b144:	0280      	lsls	r0, r0, #10
 800b146:	4301      	orrs	r1, r0
 800b148:	6159      	str	r1, [r3, #20]
 800b14a:	695a      	ldr	r2, [r3, #20]
 800b14c:	4002      	ands	r2, r0
  __GPIOD_CLK_ENABLE();
 800b14e:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800b150:	9201      	str	r2, [sp, #4]
 800b152:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 800b154:	6959      	ldr	r1, [r3, #20]
 800b156:	0340      	lsls	r0, r0, #13
 800b158:	4301      	orrs	r1, r0
 800b15a:	6159      	str	r1, [r3, #20]
 800b15c:	695a      	ldr	r2, [r3, #20]
 800b15e:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800b160:	2080      	movs	r0, #128	; 0x80
  __GPIOD_CLK_ENABLE();
 800b162:	9202      	str	r2, [sp, #8]
 800b164:	9a02      	ldr	r2, [sp, #8]
  __GPIOB_CLK_ENABLE();
 800b166:	6959      	ldr	r1, [r3, #20]
 800b168:	02c0      	lsls	r0, r0, #11
 800b16a:	4301      	orrs	r1, r0
 800b16c:	6159      	str	r1, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800b16e:	2180      	movs	r1, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800b170:	695a      	ldr	r2, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800b172:	03c9      	lsls	r1, r1, #15
  __GPIOB_CLK_ENABLE();
 800b174:	4002      	ands	r2, r0
 800b176:	9203      	str	r2, [sp, #12]
 800b178:	9a03      	ldr	r2, [sp, #12]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800b17a:	695a      	ldr	r2, [r3, #20]
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800b17c:	2090      	movs	r0, #144	; 0x90
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800b17e:	430a      	orrs	r2, r1
 800b180:	615a      	str	r2, [r3, #20]
 800b182:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800b184:	05c0      	lsls	r0, r0, #23
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800b186:	400b      	ands	r3, r1
 800b188:	9304      	str	r3, [sp, #16]
 800b18a:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800b18c:	2380      	movs	r3, #128	; 0x80
 800b18e:	011b      	lsls	r3, r3, #4
 800b190:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b192:	2301      	movs	r3, #1
 800b194:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b196:	2300      	movs	r3, #0
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800b198:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b19a:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b19c:	3303      	adds	r3, #3
 800b19e:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800b1a0:	f005 f96a 	bl	8010478 <HAL_GPIO_Init>
}
 800b1a4:	b00b      	add	sp, #44	; 0x2c
 800b1a6:	bd00      	pop	{pc}
 800b1a8:	40021000 	.word	0x40021000

0800b1ac <Switch_Init>:
*/
void Switch_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _Switch_PIN;
 800b1ac:	2301      	movs	r3, #1
{
 800b1ae:	b500      	push	{lr}
 800b1b0:	b087      	sub	sp, #28
	GPIO_InitStruct.Pin = _Switch_PIN;
 800b1b2:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b1b4:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1b6:	2300      	movs	r3, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800b1b8:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ba:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800b1bc:	4803      	ldr	r0, [pc, #12]	; (800b1cc <Switch_Init+0x20>)
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b1be:	3303      	adds	r3, #3
 800b1c0:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800b1c2:	f005 f959 	bl	8010478 <HAL_GPIO_Init>
}
 800b1c6:	b007      	add	sp, #28
 800b1c8:	bd00      	pop	{pc}
 800b1ca:	46c0      	nop			; (mov r8, r8)
 800b1cc:	48000400 	.word	0x48000400

0800b1d0 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800b1d0:	b570      	push	{r4, r5, r6, lr}
 800b1d2:	0015      	movs	r5, r2
 800b1d4:	001c      	movs	r4, r3
 800b1d6:	000e      	movs	r6, r1
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800b1d8:	f001 fe4e 	bl	800ce78 <GetUart>
	
	if (huart == &huart1) 
 800b1dc:	4a25      	ldr	r2, [pc, #148]	; (800b274 <GetPortGPIOs+0xa4>)
	UART_HandleTypeDef* huart = GetUart(port);
 800b1de:	0003      	movs	r3, r0
	if (huart == &huart1) 
 800b1e0:	4290      	cmp	r0, r2
 800b1e2:	d00d      	beq.n	800b200 <GetPortGPIOs+0x30>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800b1e4:	4a24      	ldr	r2, [pc, #144]	; (800b278 <GetPortGPIOs+0xa8>)
 800b1e6:	4290      	cmp	r0, r2
 800b1e8:	d02e      	beq.n	800b248 <GetPortGPIOs+0x78>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800b1ea:	4a24      	ldr	r2, [pc, #144]	; (800b27c <GetPortGPIOs+0xac>)
 800b1ec:	4290      	cmp	r0, r2
 800b1ee:	d014      	beq.n	800b21a <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800b1f0:	4a23      	ldr	r2, [pc, #140]	; (800b280 <GetPortGPIOs+0xb0>)
 800b1f2:	4290      	cmp	r0, r2
 800b1f4:	d033      	beq.n	800b25e <GetPortGPIOs+0x8e>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800b1f6:	4a23      	ldr	r2, [pc, #140]	; (800b284 <GetPortGPIOs+0xb4>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800b1f8:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d019      	beq.n	800b232 <GetPortGPIOs+0x62>
	
	return result;	
}
 800b1fe:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800b200:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800b202:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800b204:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800b206:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800b208:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800b20a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800b20c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800b20e:	2380      	movs	r3, #128	; 0x80
 800b210:	9a04      	ldr	r2, [sp, #16]
 800b212:	00db      	lsls	r3, r3, #3
 800b214:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800b216:	2000      	movs	r0, #0
 800b218:	e7f1      	b.n	800b1fe <GetPortGPIOs+0x2e>
		*TX_Pin = USART3_TX_PIN;
 800b21a:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800b21c:	4b1a      	ldr	r3, [pc, #104]	; (800b288 <GetPortGPIOs+0xb8>)
		*TX_Pin = USART3_TX_PIN;
 800b21e:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800b220:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800b222:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800b224:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800b226:	2380      	movs	r3, #128	; 0x80
 800b228:	9a04      	ldr	r2, [sp, #16]
 800b22a:	011b      	lsls	r3, r3, #4
 800b22c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800b22e:	2000      	movs	r0, #0
 800b230:	e7e5      	b.n	800b1fe <GetPortGPIOs+0x2e>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800b232:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800b234:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800b236:	05db      	lsls	r3, r3, #23
 800b238:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800b23a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800b23c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800b23e:	2320      	movs	r3, #32
 800b240:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800b242:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800b244:	8013      	strh	r3, [r2, #0]
 800b246:	e7da      	b.n	800b1fe <GetPortGPIOs+0x2e>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800b248:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800b24a:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800b24c:	05db      	lsls	r3, r3, #23
 800b24e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800b250:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800b252:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800b254:	2308      	movs	r3, #8
 800b256:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800b258:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800b25a:	8013      	strh	r3, [r2, #0]
 800b25c:	e7cf      	b.n	800b1fe <GetPortGPIOs+0x2e>
		*TX_Pin = USART5_TX_PIN;
 800b25e:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800b260:	4b09      	ldr	r3, [pc, #36]	; (800b288 <GetPortGPIOs+0xb8>)
	BOS_Status result = BOS_OK;
 800b262:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800b264:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800b266:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800b268:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800b26a:	2310      	movs	r3, #16
 800b26c:	9a04      	ldr	r2, [sp, #16]
 800b26e:	8013      	strh	r3, [r2, #0]
 800b270:	e7c5      	b.n	800b1fe <GetPortGPIOs+0x2e>
 800b272:	46c0      	nop			; (mov r8, r8)
 800b274:	20006ac0 	.word	0x20006ac0
 800b278:	20006bb8 	.word	0x20006bb8
 800b27c:	20006998 	.word	0x20006998
 800b280:	20006a50 	.word	0x20006a50
 800b284:	20006b40 	.word	0x20006b40
 800b288:	48000400 	.word	0x48000400

0800b28c <IsFactoryReset>:
  __GPIOA_CLK_ENABLE();
 800b28c:	2080      	movs	r0, #128	; 0x80
 800b28e:	4b38      	ldr	r3, [pc, #224]	; (800b370 <IsFactoryReset+0xe4>)
 800b290:	0280      	lsls	r0, r0, #10
 800b292:	6959      	ldr	r1, [r3, #20]
{
 800b294:	b570      	push	{r4, r5, r6, lr}
  __GPIOA_CLK_ENABLE();
 800b296:	4301      	orrs	r1, r0
 800b298:	6159      	str	r1, [r3, #20]
 800b29a:	695a      	ldr	r2, [r3, #20]
{
 800b29c:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800b29e:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800b2a0:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800b2a2:	9209      	str	r2, [sp, #36]	; 0x24
 800b2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800b2a6:	6959      	ldr	r1, [r3, #20]
 800b2a8:	02c0      	lsls	r0, r0, #11
 800b2aa:	4301      	orrs	r1, r0
 800b2ac:	6159      	str	r1, [r3, #20]
 800b2ae:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b2b0:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800b2b2:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800b2b4:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800b2b6:	920a      	str	r2, [sp, #40]	; 0x28
 800b2b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800b2ba:	6959      	ldr	r1, [r3, #20]
 800b2bc:	0300      	lsls	r0, r0, #12
 800b2be:	4301      	orrs	r1, r0
 800b2c0:	6159      	str	r1, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800b2c2:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800b2c4:	695a      	ldr	r2, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800b2c6:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800b2c8:	4002      	ands	r2, r0
 800b2ca:	920b      	str	r2, [sp, #44]	; 0x2c
 800b2cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__GPIOD_CLK_ENABLE();
 800b2ce:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800b2d0:	ad03      	add	r5, sp, #12
	__GPIOD_CLK_ENABLE();
 800b2d2:	430a      	orrs	r2, r1
 800b2d4:	615a      	str	r2, [r3, #20]
 800b2d6:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b2d8:	446c      	add	r4, sp
	__GPIOD_CLK_ENABLE();
 800b2da:	400b      	ands	r3, r1
 800b2dc:	930c      	str	r3, [sp, #48]	; 0x30
 800b2de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800b2e0:	230e      	movs	r3, #14
 800b2e2:	446b      	add	r3, sp
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	002a      	movs	r2, r5
 800b2e8:	ab06      	add	r3, sp, #24
 800b2ea:	a905      	add	r1, sp, #20
 800b2ec:	2001      	movs	r0, #1
 800b2ee:	f7ff ff6f 	bl	800b1d0 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b2f2:	aa04      	add	r2, sp, #16
 800b2f4:	ab08      	add	r3, sp, #32
 800b2f6:	a907      	add	r1, sp, #28
 800b2f8:	9400      	str	r4, [sp, #0]
 800b2fa:	2005      	movs	r0, #5
 800b2fc:	f7ff ff68 	bl	800b1d0 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b300:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b302:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b304:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800b306:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800b308:	a90d      	add	r1, sp, #52	; 0x34
 800b30a:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800b30c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b30e:	960f      	str	r6, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800b310:	f005 f8b2 	bl	8010478 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800b314:	2302      	movs	r3, #2
 800b316:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800b318:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800b31a:	a90d      	add	r1, sp, #52	; 0x34
 800b31c:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800b31e:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b320:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800b322:	f005 f8a9 	bl	8010478 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800b326:	8829      	ldrh	r1, [r5, #0]
 800b328:	2200      	movs	r2, #0
 800b32a:	9805      	ldr	r0, [sp, #20]
 800b32c:	f005 fa44 	bl	80107b8 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800b330:	2005      	movs	r0, #5
 800b332:	f001 fba5 	bl	800ca80 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800b336:	8821      	ldrh	r1, [r4, #0]
 800b338:	9808      	ldr	r0, [sp, #32]
 800b33a:	f005 fa37 	bl	80107ac <HAL_GPIO_ReadPin>
 800b33e:	2800      	cmp	r0, #0
 800b340:	d006      	beq.n	800b350 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800b342:	2201      	movs	r2, #1
	return 0;
 800b344:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800b346:	4b0b      	ldr	r3, [pc, #44]	; (800b374 <IsFactoryReset+0xe8>)
 800b348:	4252      	negs	r2, r2
 800b34a:	601a      	str	r2, [r3, #0]
}
 800b34c:	b012      	add	sp, #72	; 0x48
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800b350:	8829      	ldrh	r1, [r5, #0]
 800b352:	2201      	movs	r2, #1
 800b354:	9805      	ldr	r0, [sp, #20]
 800b356:	f005 fa2f 	bl	80107b8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800b35a:	2005      	movs	r0, #5
 800b35c:	f001 fb90 	bl	800ca80 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800b360:	8821      	ldrh	r1, [r4, #0]
 800b362:	9808      	ldr	r0, [sp, #32]
 800b364:	f005 fa22 	bl	80107ac <HAL_GPIO_ReadPin>
 800b368:	2801      	cmp	r0, #1
 800b36a:	d1ea      	bne.n	800b342 <IsFactoryReset+0xb6>
 800b36c:	e7ee      	b.n	800b34c <IsFactoryReset+0xc0>
 800b36e:	46c0      	nop			; (mov r8, r8)
 800b370:	40021000 	.word	0x40021000
 800b374:	20007ff0 	.word	0x20007ff0

0800b378 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800b378:	4770      	bx	lr
 800b37a:	46c0      	nop			; (mov r8, r8)

0800b37c <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b37c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800b37e:	4d37      	ldr	r5, [pc, #220]	; (800b45c <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b380:	b08d      	sub	sp, #52	; 0x34
	if (BOS_initialized) {
 800b382:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b384:	0006      	movs	r6, r0
 800b386:	000c      	movs	r4, r1
	if (BOS_initialized) {
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d152      	bne.n	800b432 <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800b38c:	2204      	movs	r2, #4
 800b38e:	4b34      	ldr	r3, [pc, #208]	; (800b460 <AddPortButton+0xe4>)
 800b390:	545a      	strb	r2, [r3, r1]
	if (BOS_initialized) {
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800b392:	250e      	movs	r5, #14
 800b394:	af04      	add	r7, sp, #16
 800b396:	446d      	add	r5, sp
 800b398:	002a      	movs	r2, r5
 800b39a:	ab06      	add	r3, sp, #24
 800b39c:	a905      	add	r1, sp, #20
 800b39e:	9700      	str	r7, [sp, #0]
 800b3a0:	0020      	movs	r0, r4
 800b3a2:	f7ff ff15 	bl	800b1d0 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800b3a6:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3a8:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = TX_Pin;
 800b3aa:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3ac:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800b3ae:	a907      	add	r1, sp, #28
 800b3b0:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3b2:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3b4:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800b3b6:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800b3b8:	f005 f85e 	bl	8010478 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800b3bc:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b3be:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = RX_Pin;
 800b3c0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b3c2:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b3c4:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3c6:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b3c8:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b3ca:	f005 f855 	bl	8010478 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800b3ce:	00e2      	lsls	r2, r4, #3
 800b3d0:	4b24      	ldr	r3, [pc, #144]	; (800b464 <AddPortButton+0xe8>)
 800b3d2:	1912      	adds	r2, r2, r4
 800b3d4:	189b      	adds	r3, r3, r2

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b3d6:	0025      	movs	r5, r4
	button[port].type = buttonType;
 800b3d8:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b3da:	2312      	movs	r3, #18
 800b3dc:	353a      	adds	r5, #58	; 0x3a
 800b3de:	00ad      	lsls	r5, r5, #2
 800b3e0:	446b      	add	r3, sp
 800b3e2:	0019      	movs	r1, r3
 800b3e4:	0028      	movs	r0, r5
 800b3e6:	f7ff fc19 	bl	800ac1c <EE_ReadVariable>
	if (!res)											// This variable exists
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d109      	bne.n	800b402 <AddPortButton+0x86>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800b3ee:	466b      	mov	r3, sp
 800b3f0:	8a5b      	ldrh	r3, [r3, #18]
 800b3f2:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800b3f4:	091a      	lsrs	r2, r3, #4
 800b3f6:	42a2      	cmp	r2, r4
 800b3f8:	d103      	bne.n	800b402 <AddPortButton+0x86>
 800b3fa:	220f      	movs	r2, #15
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	42b3      	cmp	r3, r6
 800b400:	d014      	beq.n	800b42c <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
		}
	} else							// Variable does not exist. Create a new one
	{
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800b402:	466b      	mov	r3, sp
 800b404:	0324      	lsls	r4, r4, #12
 800b406:	0231      	lsls	r1, r6, #8
 800b408:	4321      	orrs	r1, r4
 800b40a:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b40c:	0028      	movs	r0, r5
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800b40e:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b410:	f7ff fc34 	bl	800ac7c <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800b414:	2100      	movs	r1, #0
 800b416:	1c68      	adds	r0, r5, #1
 800b418:	f7ff fc30 	bl	800ac7c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800b41c:	2100      	movs	r1, #0
 800b41e:	1ca8      	adds	r0, r5, #2
 800b420:	f7ff fc2c 	bl	800ac7c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800b424:	1ce8      	adds	r0, r5, #3
 800b426:	2100      	movs	r1, #0
 800b428:	f7ff fc28 	bl	800ac7c <EE_WriteVariable>
	}

	return result;
}
 800b42c:	2000      	movs	r0, #0
 800b42e:	b00d      	add	sp, #52	; 0x34
 800b430:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800b432:	4b0d      	ldr	r3, [pc, #52]	; (800b468 <AddPortButton+0xec>)
 800b434:	008f      	lsls	r7, r1, #2
 800b436:	58f8      	ldr	r0, [r7, r3]
 800b438:	f001 fec0 	bl	800d1bc <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800b43c:	4b0b      	ldr	r3, [pc, #44]	; (800b46c <AddPortButton+0xf0>)
 800b43e:	58f8      	ldr	r0, [r7, r3]
 800b440:	f001 febc 	bl	800d1bc <osSemaphoreRelease>
	portStatus[port] = PORTBUTTON;
 800b444:	2104      	movs	r1, #4
 800b446:	4a06      	ldr	r2, [pc, #24]	; (800b460 <AddPortButton+0xe4>)
 800b448:	782b      	ldrb	r3, [r5, #0]
 800b44a:	5511      	strb	r1, [r2, r4]
	if (BOS_initialized) {
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d0a0      	beq.n	800b392 <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 800b450:	0020      	movs	r0, r4
 800b452:	f001 fd11 	bl	800ce78 <GetUart>
 800b456:	f006 f925 	bl	80116a4 <HAL_UART_DeInit>
 800b45a:	e79a      	b.n	800b392 <AddPortButton+0x16>
 800b45c:	20000b4b 	.word	0x20000b4b
 800b460:	20000c3c 	.word	0x20000c3c
 800b464:	200023d0 	.word	0x200023d0
 800b468:	20006918 	.word	0x20006918
 800b46c:	200068f8 	.word	0x200068f8

0800b470 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800b470:	b570      	push	{r4, r5, r6, lr}
 800b472:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800b474:	2300      	movs	r3, #0
 800b476:	4839      	ldr	r0, [pc, #228]	; (800b55c <RemovePortButton+0xec>)
 800b478:	00e9      	lsls	r1, r5, #3
 800b47a:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec = 0;
	button[port].releasedY2Sec = 0;
	button[port].releasedY3Sec = 0;

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b47c:	002c      	movs	r4, r5
	button[port].type = NONE;
 800b47e:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port) {
 800b480:	b082      	sub	sp, #8
	button[port].state = NONE;
 800b482:	540b      	strb	r3, [r1, r0]
	button[port].type = NONE;
 800b484:	7053      	strb	r3, [r2, #1]
	button[port].events = 0;
 800b486:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800b488:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800b48a:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800b48c:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800b48e:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800b490:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800b492:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b494:	466b      	mov	r3, sp
 800b496:	343a      	adds	r4, #58	; 0x3a
 800b498:	00a4      	lsls	r4, r4, #2
 800b49a:	1d99      	adds	r1, r3, #6
 800b49c:	0020      	movs	r0, r4
 800b49e:	f7ff fbbd 	bl	800ac1c <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d02d      	beq.n	800b502 <RemovePortButton+0x92>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800b4a6:	0028      	movs	r0, r5
 800b4a8:	f001 fce6 	bl	800ce78 <GetUart>

	if (huart->Instance == USART1) {
 800b4ac:	4a2c      	ldr	r2, [pc, #176]	; (800b560 <RemovePortButton+0xf0>)
 800b4ae:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800b4b0:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d03d      	beq.n	800b532 <RemovePortButton+0xc2>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800b4b6:	4a2b      	ldr	r2, [pc, #172]	; (800b564 <RemovePortButton+0xf4>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d03e      	beq.n	800b53a <RemovePortButton+0xca>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800b4bc:	4a2a      	ldr	r2, [pc, #168]	; (800b568 <RemovePortButton+0xf8>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d03f      	beq.n	800b542 <RemovePortButton+0xd2>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800b4c2:	4a2a      	ldr	r2, [pc, #168]	; (800b56c <RemovePortButton+0xfc>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d01a      	beq.n	800b4fe <RemovePortButton+0x8e>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800b4c8:	4a29      	ldr	r2, [pc, #164]	; (800b570 <RemovePortButton+0x100>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d03d      	beq.n	800b54a <RemovePortButton+0xda>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800b4ce:	4a29      	ldr	r2, [pc, #164]	; (800b574 <RemovePortButton+0x104>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d03e      	beq.n	800b552 <RemovePortButton+0xe2>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800b4d4:	4a28      	ldr	r2, [pc, #160]	; (800b578 <RemovePortButton+0x108>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d011      	beq.n	800b4fe <RemovePortButton+0x8e>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800b4da:	4a28      	ldr	r2, [pc, #160]	; (800b57c <RemovePortButton+0x10c>)
 800b4dc:	4694      	mov	ip, r2
 800b4de:	4463      	add	r3, ip
 800b4e0:	1e5c      	subs	r4, r3, #1
 800b4e2:	41a3      	sbcs	r3, r4
 800b4e4:	425c      	negs	r4, r3
 800b4e6:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	4b25      	ldr	r3, [pc, #148]	; (800b580 <RemovePortButton+0x110>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800b4ec:	4925      	ldr	r1, [pc, #148]	; (800b584 <RemovePortButton+0x114>)
	portStatus[port] = FREE;
 800b4ee:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800b4f0:	0030      	movs	r0, r6
 800b4f2:	3201      	adds	r2, #1
 800b4f4:	f006 f924 	bl	8011740 <HAL_UART_Receive_IT>

	return result;
}
 800b4f8:	0020      	movs	r0, r4
 800b4fa:	b002      	add	sp, #8
 800b4fc:	bd70      	pop	{r4, r5, r6, pc}
	BOS_Status result = BOS_OK;
 800b4fe:	2400      	movs	r4, #0
 800b500:	e7f2      	b.n	800b4e8 <RemovePortButton+0x78>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800b502:	2100      	movs	r1, #0
 800b504:	0020      	movs	r0, r4
 800b506:	f7ff fbb9 	bl	800ac7c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800b50a:	2100      	movs	r1, #0
 800b50c:	1c60      	adds	r0, r4, #1
 800b50e:	f7ff fbb5 	bl	800ac7c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800b512:	2100      	movs	r1, #0
 800b514:	1ca0      	adds	r0, r4, #2
 800b516:	f7ff fbb1 	bl	800ac7c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800b51a:	2100      	movs	r1, #0
 800b51c:	1ce0      	adds	r0, r4, #3
 800b51e:	f7ff fbad 	bl	800ac7c <EE_WriteVariable>
	UART_HandleTypeDef *huart = GetUart(port);
 800b522:	0028      	movs	r0, r5
 800b524:	f001 fca8 	bl	800ce78 <GetUart>
	if (huart->Instance == USART1) {
 800b528:	4a0d      	ldr	r2, [pc, #52]	; (800b560 <RemovePortButton+0xf0>)
 800b52a:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800b52c:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800b52e:	4293      	cmp	r3, r2
 800b530:	d1c1      	bne.n	800b4b6 <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 800b532:	f001 fad3 	bl	800cadc <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800b536:	2400      	movs	r4, #0
 800b538:	e7d6      	b.n	800b4e8 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800b53a:	f001 fae7 	bl	800cb0c <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800b53e:	2400      	movs	r4, #0
 800b540:	e7d2      	b.n	800b4e8 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800b542:	f001 fafb 	bl	800cb3c <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800b546:	2400      	movs	r4, #0
 800b548:	e7ce      	b.n	800b4e8 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 800b54a:	f001 fb0f 	bl	800cb6c <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800b54e:	2400      	movs	r4, #0
 800b550:	e7ca      	b.n	800b4e8 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800b552:	f001 fb23 	bl	800cb9c <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800b556:	2400      	movs	r4, #0
 800b558:	e7c6      	b.n	800b4e8 <RemovePortButton+0x78>
 800b55a:	46c0      	nop			; (mov r8, r8)
 800b55c:	200023d0 	.word	0x200023d0
 800b560:	40013800 	.word	0x40013800
 800b564:	40004400 	.word	0x40004400
 800b568:	40004800 	.word	0x40004800
 800b56c:	40004c00 	.word	0x40004c00
 800b570:	40005000 	.word	0x40005000
 800b574:	40011400 	.word	0x40011400
 800b578:	40011800 	.word	0x40011800
 800b57c:	bffee400 	.word	0xbffee400
 800b580:	20000c3c 	.word	0x20000c3c
 800b584:	20000c5d 	.word	0x20000c5d

0800b588 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800b588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b58a:	464e      	mov	r6, r9
 800b58c:	4645      	mov	r5, r8
 800b58e:	46de      	mov	lr, fp
 800b590:	4657      	mov	r7, sl
 800b592:	b5e0      	push	{r5, r6, r7, lr}
 800b594:	b087      	sub	sp, #28
 800b596:	9301      	str	r3, [sp, #4]
 800b598:	ab10      	add	r3, sp, #64	; 0x40
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	0005      	movs	r5, r0
 800b59e:	9302      	str	r3, [sp, #8]
 800b5a0:	ab11      	add	r3, sp, #68	; 0x44
 800b5a2:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800b5a4:	00ec      	lsls	r4, r5, #3
		uint8_t mode) {
 800b5a6:	9303      	str	r3, [sp, #12]
 800b5a8:	ab12      	add	r3, sp, #72	; 0x48
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	469a      	mov	sl, r3
 800b5ae:	ab13      	add	r3, sp, #76	; 0x4c
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	4699      	mov	r9, r3
 800b5b4:	ab14      	add	r3, sp, #80	; 0x50
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	469b      	mov	fp, r3
 800b5ba:	ab15      	add	r3, sp, #84	; 0x54
 800b5bc:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 800b5be:	4b80      	ldr	r3, [pc, #512]	; (800b7c0 <SetButtonEvents+0x238>)
 800b5c0:	4698      	mov	r8, r3
 800b5c2:	1963      	adds	r3, r4, r5
 800b5c4:	4443      	add	r3, r8
 800b5c6:	785e      	ldrb	r6, [r3, #1]
 800b5c8:	2e00      	cmp	r6, #0
 800b5ca:	d050      	beq.n	800b66e <SetButtonEvents+0xe6>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800b5cc:	9e01      	ldr	r6, [sp, #4]
 800b5ce:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800b5d0:	9e02      	ldr	r6, [sp, #8]
 800b5d2:	70de      	strb	r6, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800b5d4:	9e03      	ldr	r6, [sp, #12]
 800b5d6:	711e      	strb	r6, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 800b5d8:	4656      	mov	r6, sl
 800b5da:	715e      	strb	r6, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800b5dc:	464e      	mov	r6, r9
 800b5de:	719e      	strb	r6, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800b5e0:	465e      	mov	r6, fp
 800b5e2:	71de      	strb	r6, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800b5e4:	2801      	cmp	r0, #1
 800b5e6:	d04b      	beq.n	800b680 <SetButtonEvents+0xf8>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d000      	beq.n	800b5ee <SetButtonEvents+0x66>
 800b5ec:	e076      	b.n	800b6dc <SetButtonEvents+0x154>
 800b5ee:	2900      	cmp	r1, #0
 800b5f0:	d000      	beq.n	800b5f4 <SetButtonEvents+0x6c>
 800b5f2:	e0bf      	b.n	800b774 <SetButtonEvents+0x1ec>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800b5f4:	2601      	movs	r6, #1
 800b5f6:	7a19      	ldrb	r1, [r3, #8]
 800b5f8:	43b1      	bics	r1, r6
 800b5fa:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800b5fc:	2a00      	cmp	r2, #0
 800b5fe:	d142      	bne.n	800b686 <SetButtonEvents+0xfe>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800b600:	2302      	movs	r3, #2
 800b602:	4399      	bics	r1, r3
 800b604:	1963      	adds	r3, r4, r5
 800b606:	4443      	add	r3, r8
 800b608:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800b60a:	9b01      	ldr	r3, [sp, #4]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d143      	bne.n	800b698 <SetButtonEvents+0x110>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800b610:	2304      	movs	r3, #4
 800b612:	4399      	bics	r1, r3
 800b614:	1963      	adds	r3, r4, r5
 800b616:	4443      	add	r3, r8
 800b618:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800b61a:	9b02      	ldr	r3, [sp, #8]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d144      	bne.n	800b6aa <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800b620:	2308      	movs	r3, #8
 800b622:	4399      	bics	r1, r3
 800b624:	1963      	adds	r3, r4, r5
 800b626:	4443      	add	r3, r8
 800b628:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d145      	bne.n	800b6bc <SetButtonEvents+0x134>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800b630:	2310      	movs	r3, #16
 800b632:	000a      	movs	r2, r1
 800b634:	439a      	bics	r2, r3
 800b636:	1963      	adds	r3, r4, r5
 800b638:	4443      	add	r3, r8
 800b63a:	721a      	strb	r2, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800b63c:	4653      	mov	r3, sl
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d100      	bne.n	800b644 <SetButtonEvents+0xbc>
 800b642:	e09c      	b.n	800b77e <SetButtonEvents+0x1f6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800b644:	2120      	movs	r1, #32
 800b646:	4311      	orrs	r1, r2
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800b648:	464a      	mov	r2, r9
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800b64a:	1963      	adds	r3, r4, r5
 800b64c:	4443      	add	r3, r8
 800b64e:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800b650:	2a00      	cmp	r2, #0
 800b652:	d100      	bne.n	800b656 <SetButtonEvents+0xce>
 800b654:	e09d      	b.n	800b792 <SetButtonEvents+0x20a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800b656:	2240      	movs	r2, #64	; 0x40
 800b658:	430a      	orrs	r2, r1
 800b65a:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800b65c:	465b      	mov	r3, fp
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d136      	bne.n	800b6d0 <SetButtonEvents+0x148>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800b662:	217f      	movs	r1, #127	; 0x7f
 800b664:	1963      	adds	r3, r4, r5
 800b666:	4443      	add	r3, r8
 800b668:	4011      	ands	r1, r2
 800b66a:	7219      	strb	r1, [r3, #8]
 800b66c:	e036      	b.n	800b6dc <SetButtonEvents+0x154>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800b66e:	240b      	movs	r4, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 800b670:	0020      	movs	r0, r4
 800b672:	b007      	add	sp, #28
 800b674:	bc3c      	pop	{r2, r3, r4, r5}
 800b676:	4690      	mov	r8, r2
 800b678:	4699      	mov	r9, r3
 800b67a:	46a2      	mov	sl, r4
 800b67c:	46ab      	mov	fp, r5
 800b67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 800b680:	7a19      	ldrb	r1, [r3, #8]
 800b682:	2301      	movs	r3, #1
 800b684:	4319      	orrs	r1, r3
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800b686:	2202      	movs	r2, #2
 800b688:	1963      	adds	r3, r4, r5
 800b68a:	4443      	add	r3, r8
 800b68c:	4311      	orrs	r1, r2
 800b68e:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b690:	2801      	cmp	r0, #1
 800b692:	d000      	beq.n	800b696 <SetButtonEvents+0x10e>
 800b694:	e08c      	b.n	800b7b0 <SetButtonEvents+0x228>
 800b696:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800b698:	2204      	movs	r2, #4
 800b69a:	1963      	adds	r3, r4, r5
 800b69c:	4443      	add	r3, r8
 800b69e:	4311      	orrs	r1, r2
 800b6a0:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b6a2:	2801      	cmp	r0, #1
 800b6a4:	d000      	beq.n	800b6a8 <SetButtonEvents+0x120>
 800b6a6:	e07f      	b.n	800b7a8 <SetButtonEvents+0x220>
 800b6a8:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800b6aa:	2208      	movs	r2, #8
 800b6ac:	1963      	adds	r3, r4, r5
 800b6ae:	4443      	add	r3, r8
 800b6b0:	4311      	orrs	r1, r2
 800b6b2:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b6b4:	2801      	cmp	r0, #1
 800b6b6:	d000      	beq.n	800b6ba <SetButtonEvents+0x132>
 800b6b8:	e07e      	b.n	800b7b8 <SetButtonEvents+0x230>
 800b6ba:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800b6bc:	2210      	movs	r2, #16
 800b6be:	1963      	adds	r3, r4, r5
 800b6c0:	4443      	add	r3, r8
 800b6c2:	4311      	orrs	r1, r2
 800b6c4:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b6c6:	2801      	cmp	r0, #1
 800b6c8:	d16a      	bne.n	800b7a0 <SetButtonEvents+0x218>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800b6ca:	2260      	movs	r2, #96	; 0x60
 800b6cc:	b2c9      	uxtb	r1, r1
 800b6ce:	430a      	orrs	r2, r1
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800b6d0:	2180      	movs	r1, #128	; 0x80
 800b6d2:	1963      	adds	r3, r4, r5
 800b6d4:	4249      	negs	r1, r1
 800b6d6:	4443      	add	r3, r8
 800b6d8:	4311      	orrs	r1, r2
 800b6da:	7219      	strb	r1, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b6dc:	002e      	movs	r6, r5
 800b6de:	ab04      	add	r3, sp, #16
 800b6e0:	363a      	adds	r6, #58	; 0x3a
 800b6e2:	00b6      	lsls	r6, r6, #2
 800b6e4:	1d9f      	adds	r7, r3, #6
 800b6e6:	0039      	movs	r1, r7
 800b6e8:	0030      	movs	r0, r6
 800b6ea:	f7ff fa97 	bl	800ac1c <EE_ReadVariable>
	if (!res)											// This variable exists
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d1bd      	bne.n	800b66e <SetButtonEvents+0xe6>
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800b6f2:	1964      	adds	r4, r4, r5
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800b6f4:	883b      	ldrh	r3, [r7, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800b6f6:	4444      	add	r4, r8
 800b6f8:	7a22      	ldrb	r2, [r4, #8]
 800b6fa:	b2d9      	uxtb	r1, r3
 800b6fc:	4291      	cmp	r1, r2
 800b6fe:	d006      	beq.n	800b70e <SetButtonEvents+0x186>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800b700:	0a19      	lsrs	r1, r3, #8
 800b702:	0209      	lsls	r1, r1, #8
 800b704:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b706:	0030      	movs	r0, r6
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800b708:	8039      	strh	r1, [r7, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b70a:	f7ff fab7 	bl	800ac7c <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800b70e:	1c74      	adds	r4, r6, #1
 800b710:	0039      	movs	r1, r7
 800b712:	0020      	movs	r0, r4
 800b714:	f7ff fa82 	bl	800ac1c <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800b718:	4652      	mov	r2, sl
 800b71a:	9b01      	ldr	r3, [sp, #4]
 800b71c:	0219      	lsls	r1, r3, #8
 800b71e:	883b      	ldrh	r3, [r7, #0]
 800b720:	430a      	orrs	r2, r1
		if (temp16
 800b722:	4293      	cmp	r3, r2
 800b724:	d003      	beq.n	800b72e <SetButtonEvents+0x1a6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800b726:	b291      	uxth	r1, r2
 800b728:	0020      	movs	r0, r4
 800b72a:	f7ff faa7 	bl	800ac7c <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800b72e:	1cb4      	adds	r4, r6, #2
 800b730:	0039      	movs	r1, r7
 800b732:	0020      	movs	r0, r4
 800b734:	f7ff fa72 	bl	800ac1c <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800b738:	464a      	mov	r2, r9
 800b73a:	9b02      	ldr	r3, [sp, #8]
 800b73c:	0219      	lsls	r1, r3, #8
 800b73e:	883b      	ldrh	r3, [r7, #0]
 800b740:	430a      	orrs	r2, r1
		if (temp16
 800b742:	4293      	cmp	r3, r2
 800b744:	d003      	beq.n	800b74e <SetButtonEvents+0x1c6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800b746:	b291      	uxth	r1, r2
 800b748:	0020      	movs	r0, r4
 800b74a:	f7ff fa97 	bl	800ac7c <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800b74e:	3603      	adds	r6, #3
 800b750:	0039      	movs	r1, r7
 800b752:	0030      	movs	r0, r6
 800b754:	f7ff fa62 	bl	800ac1c <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800b758:	465a      	mov	r2, fp
 800b75a:	9b03      	ldr	r3, [sp, #12]
	return result;
 800b75c:	2400      	movs	r4, #0
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800b75e:	0219      	lsls	r1, r3, #8
 800b760:	883b      	ldrh	r3, [r7, #0]
 800b762:	430a      	orrs	r2, r1
		if (temp16
 800b764:	4293      	cmp	r3, r2
 800b766:	d100      	bne.n	800b76a <SetButtonEvents+0x1e2>
 800b768:	e782      	b.n	800b670 <SetButtonEvents+0xe8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800b76a:	b291      	uxth	r1, r2
 800b76c:	0030      	movs	r0, r6
 800b76e:	f7ff fa85 	bl	800ac7c <EE_WriteVariable>
 800b772:	e77d      	b.n	800b670 <SetButtonEvents+0xe8>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800b774:	2601      	movs	r6, #1
 800b776:	7a19      	ldrb	r1, [r3, #8]
 800b778:	4331      	orrs	r1, r6
 800b77a:	7219      	strb	r1, [r3, #8]
 800b77c:	e73e      	b.n	800b5fc <SetButtonEvents+0x74>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800b77e:	2320      	movs	r3, #32
 800b780:	439a      	bics	r2, r3
 800b782:	1963      	adds	r3, r4, r5
 800b784:	4443      	add	r3, r8
 800b786:	0011      	movs	r1, r2
 800b788:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800b78a:	464a      	mov	r2, r9
 800b78c:	2a00      	cmp	r2, #0
 800b78e:	d000      	beq.n	800b792 <SetButtonEvents+0x20a>
 800b790:	e761      	b.n	800b656 <SetButtonEvents+0xce>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800b792:	2340      	movs	r3, #64	; 0x40
 800b794:	000a      	movs	r2, r1
 800b796:	439a      	bics	r2, r3
 800b798:	1963      	adds	r3, r4, r5
 800b79a:	4443      	add	r3, r8
 800b79c:	721a      	strb	r2, [r3, #8]
 800b79e:	e75d      	b.n	800b65c <SetButtonEvents+0xd4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d19b      	bne.n	800b6dc <SetButtonEvents+0x154>
 800b7a4:	7a1a      	ldrb	r2, [r3, #8]
 800b7a6:	e749      	b.n	800b63c <SetButtonEvents+0xb4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	d197      	bne.n	800b6dc <SetButtonEvents+0x154>
 800b7ac:	7a19      	ldrb	r1, [r3, #8]
 800b7ae:	e734      	b.n	800b61a <SetButtonEvents+0x92>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d193      	bne.n	800b6dc <SetButtonEvents+0x154>
 800b7b4:	7a19      	ldrb	r1, [r3, #8]
 800b7b6:	e728      	b.n	800b60a <SetButtonEvents+0x82>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d18f      	bne.n	800b6dc <SetButtonEvents+0x154>
 800b7bc:	7a19      	ldrb	r1, [r3, #8]
 800b7be:	e734      	b.n	800b62a <SetButtonEvents+0xa2>
 800b7c0:	200023d0 	.word	0x200023d0

0800b7c4 <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void) {
	hadc.Instance = ADC1;
 800b7c4:	4811      	ldr	r0, [pc, #68]	; (800b80c <MX_ADC_Init+0x48>)
 800b7c6:	4b12      	ldr	r3, [pc, #72]	; (800b810 <MX_ADC_Init+0x4c>)
void MX_ADC_Init(void) {
 800b7c8:	b510      	push	{r4, lr}
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b7ca:	2104      	movs	r1, #4
	hadc.Instance = ADC1;
 800b7cc:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b7ce:	2380      	movs	r3, #128	; 0x80
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b7d0:	6141      	str	r1, [r0, #20]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b7d2:	061b      	lsls	r3, r3, #24
	hadc.Init.LowPowerAutoWait = DISABLE;
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
	hadc.Init.ContinuousConvMode = ENABLE;
	hadc.Init.DiscontinuousConvMode = DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b7d4:	21c2      	movs	r1, #194	; 0xc2
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800b7d6:	2201      	movs	r2, #1
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b7d8:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800b7da:	2300      	movs	r3, #0
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b7dc:	31ff      	adds	r1, #255	; 0xff
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800b7de:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b7e0:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800b7e2:	6102      	str	r2, [r0, #16]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800b7e4:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800b7e6:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 800b7e8:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800b7ea:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b7ec:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b7ee:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 800b7f0:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800b7f2:	6342      	str	r2, [r0, #52]	; 0x34

	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800b7f4:	f003 fbf8 	bl	800efe8 <HAL_ADC_Init>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d002      	beq.n	800b802 <MX_ADC_Init+0x3e>
		return ADC_CHANNEL_5;
}

void Error_Handler(void) {

	HAL_Delay(100);
 800b7fc:	2064      	movs	r0, #100	; 0x64
 800b7fe:	f003 fb19 	bl	800ee34 <HAL_Delay>
	ADC_flag = 1;
 800b802:	2368      	movs	r3, #104	; 0x68
 800b804:	2101      	movs	r1, #1
 800b806:	4a03      	ldr	r2, [pc, #12]	; (800b814 <MX_ADC_Init+0x50>)
 800b808:	54d1      	strb	r1, [r2, r3]
}
 800b80a:	bd10      	pop	{r4, pc}
 800b80c:	20006c50 	.word	0x20006c50
 800b810:	40012400 	.word	0x40012400
 800b814:	200023d0 	.word	0x200023d0

0800b818 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800b818:	b500      	push	{lr}
 800b81a:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800b81c:	2214      	movs	r2, #20
 800b81e:	2100      	movs	r1, #0
 800b820:	a803      	add	r0, sp, #12
 800b822:	f006 fec9 	bl	80125b8 <memset>
		__HAL_RCC_ADC1_CLK_ENABLE();
 800b826:	2080      	movs	r0, #128	; 0x80
 800b828:	4b11      	ldr	r3, [pc, #68]	; (800b870 <HAL_ADC_MspInit+0x58>)
 800b82a:	0080      	lsls	r0, r0, #2
 800b82c:	6999      	ldr	r1, [r3, #24]
 800b82e:	4301      	orrs	r1, r0
 800b830:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b832:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 800b834:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b836:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 800b838:	4002      	ands	r2, r0
 800b83a:	9201      	str	r2, [sp, #4]
 800b83c:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b83e:	695a      	ldr	r2, [r3, #20]
 800b840:	430a      	orrs	r2, r1
 800b842:	615a      	str	r2, [r3, #20]
 800b844:	695b      	ldr	r3, [r3, #20]
		if(flag_ADC_Select==1){
 800b846:	4a0b      	ldr	r2, [pc, #44]	; (800b874 <HAL_ADC_MspInit+0x5c>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b848:	400b      	ands	r3, r1
 800b84a:	9302      	str	r3, [sp, #8]
 800b84c:	9b02      	ldr	r3, [sp, #8]
		if(flag_ADC_Select==1){
 800b84e:	2369      	movs	r3, #105	; 0x69
 800b850:	5cd3      	ldrb	r3, [r2, r3]
 800b852:	2b01      	cmp	r3, #1
 800b854:	d001      	beq.n	800b85a <HAL_ADC_MspInit+0x42>
}
 800b856:	b009      	add	sp, #36	; 0x24
 800b858:	bd00      	pop	{pc}
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b85a:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800b85c:	333b      	adds	r3, #59	; 0x3b
 800b85e:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b860:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b862:	3b39      	subs	r3, #57	; 0x39
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b864:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b866:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b868:	f004 fe06 	bl	8010478 <HAL_GPIO_Init>
}
 800b86c:	e7f3      	b.n	800b856 <HAL_ADC_MspInit+0x3e>
 800b86e:	46c0      	nop			; (mov r8, r8)
 800b870:	40021000 	.word	0x40021000
 800b874:	200023d0 	.word	0x200023d0

0800b878 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87a:	46ce      	mov	lr, r9
 800b87c:	4647      	mov	r7, r8
	if (0 == ADC_flag)
 800b87e:	2368      	movs	r3, #104	; 0x68
void ReadTempAndVref(float *temp, float *Vref) {
 800b880:	b580      	push	{r7, lr}
	if (0 == ADC_flag)
 800b882:	4c54      	ldr	r4, [pc, #336]	; (800b9d4 <ReadTempAndVref+0x15c>)
void ReadTempAndVref(float *temp, float *Vref) {
 800b884:	0006      	movs	r6, r0
	if (0 == ADC_flag)
 800b886:	5ce3      	ldrb	r3, [r4, r3]
void ReadTempAndVref(float *temp, float *Vref) {
 800b888:	4689      	mov	r9, r1
	if (0 == ADC_flag)
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d100      	bne.n	800b890 <ReadTempAndVref+0x18>
 800b88e:	e09d      	b.n	800b9cc <ReadTempAndVref+0x154>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800b890:	2310      	movs	r3, #16
 800b892:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b894:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b896:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b898:	015b      	lsls	r3, r3, #5
 800b89a:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b89c:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b89e:	4d4e      	ldr	r5, [pc, #312]	; (800b9d8 <ReadTempAndVref+0x160>)
 800b8a0:	316c      	adds	r1, #108	; 0x6c
 800b8a2:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b8a4:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b8a6:	f003 fd6d 	bl	800f384 <HAL_ADC_ConfigChannel>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d000      	beq.n	800b8b0 <ReadTempAndVref+0x38>
 800b8ae:	e089      	b.n	800b9c4 <ReadTempAndVref+0x14c>
	HAL_ADC_Start(&hadc);
 800b8b0:	0028      	movs	r0, r5
 800b8b2:	f003 fc3b 	bl	800f12c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800b8b6:	2164      	movs	r1, #100	; 0x64
 800b8b8:	0028      	movs	r0, r5
 800b8ba:	f003 fc83 	bl	800f1c4 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800b8be:	0028      	movs	r0, r5
 800b8c0:	f003 fce4 	bl	800f28c <HAL_ADC_GetValue>
 800b8c4:	2378      	movs	r3, #120	; 0x78
 800b8c6:	52e0      	strh	r0, [r4, r3]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800b8c8:	0400      	lsls	r0, r0, #16
 800b8ca:	0c00      	lsrs	r0, r0, #16
 800b8cc:	f7f7 f8be 	bl	8002a4c <__aeabi_i2d>
 800b8d0:	4a42      	ldr	r2, [pc, #264]	; (800b9dc <ReadTempAndVref+0x164>)
 800b8d2:	4b43      	ldr	r3, [pc, #268]	; (800b9e0 <ReadTempAndVref+0x168>)
 800b8d4:	f7f6 faae 	bl	8001e34 <__aeabi_dmul>
 800b8d8:	2200      	movs	r2, #0
 800b8da:	4b42      	ldr	r3, [pc, #264]	; (800b9e4 <ReadTempAndVref+0x16c>)
 800b8dc:	f7f5 fea0 	bl	8001620 <__aeabi_ddiv>
 800b8e0:	4a41      	ldr	r2, [pc, #260]	; (800b9e8 <ReadTempAndVref+0x170>)
 800b8e2:	4b42      	ldr	r3, [pc, #264]	; (800b9ec <ReadTempAndVref+0x174>)
 800b8e4:	f7f6 fd18 	bl	8002318 <__aeabi_dsub>
 800b8e8:	4a41      	ldr	r2, [pc, #260]	; (800b9f0 <ReadTempAndVref+0x178>)
 800b8ea:	4b42      	ldr	r3, [pc, #264]	; (800b9f4 <ReadTempAndVref+0x17c>)
 800b8ec:	f7f5 fe98 	bl	8001620 <__aeabi_ddiv>
 800b8f0:	4b41      	ldr	r3, [pc, #260]	; (800b9f8 <ReadTempAndVref+0x180>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f7f5 fb78 	bl	8000fe8 <__aeabi_dadd>
 800b8f8:	f7f7 f966 	bl	8002bc8 <__aeabi_d2f>
 800b8fc:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800b8fe:	0028      	movs	r0, r5
 800b900:	f003 fc40 	bl	800f184 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800b904:	2310      	movs	r3, #16
 800b906:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 800b908:	4b3c      	ldr	r3, [pc, #240]	; (800b9fc <ReadTempAndVref+0x184>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b90a:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800b90c:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b90e:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b910:	316c      	adds	r1, #108	; 0x6c
 800b912:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b914:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b916:	f003 fd35 	bl	800f384 <HAL_ADC_ConfigChannel>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	d14e      	bne.n	800b9bc <ReadTempAndVref+0x144>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800b91e:	2311      	movs	r3, #17
 800b920:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b922:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b924:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b926:	015b      	lsls	r3, r3, #5
 800b928:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800b92a:	2305      	movs	r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b92c:	316c      	adds	r1, #108	; 0x6c
 800b92e:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800b930:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b932:	f003 fd27 	bl	800f384 <HAL_ADC_ConfigChannel>
 800b936:	2800      	cmp	r0, #0
 800b938:	d13c      	bne.n	800b9b4 <ReadTempAndVref+0x13c>
	HAL_ADC_Start(&hadc);
 800b93a:	0028      	movs	r0, r5
 800b93c:	f003 fbf6 	bl	800f12c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800b940:	2164      	movs	r1, #100	; 0x64
 800b942:	0028      	movs	r0, r5
 800b944:	f003 fc3e 	bl	800f1c4 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800b948:	0028      	movs	r0, r5
 800b94a:	f003 fc9f 	bl	800f28c <HAL_ADC_GetValue>
 800b94e:	237a      	movs	r3, #122	; 0x7a
 800b950:	4680      	mov	r8, r0
 800b952:	52e0      	strh	r0, [r4, r3]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800b954:	4b2a      	ldr	r3, [pc, #168]	; (800ba00 <ReadTempAndVref+0x188>)
 800b956:	8818      	ldrh	r0, [r3, #0]
 800b958:	f7f7 f878 	bl	8002a4c <__aeabi_i2d>
 800b95c:	4a1f      	ldr	r2, [pc, #124]	; (800b9dc <ReadTempAndVref+0x164>)
 800b95e:	4b20      	ldr	r3, [pc, #128]	; (800b9e0 <ReadTempAndVref+0x168>)
 800b960:	f7f6 fa68 	bl	8001e34 <__aeabi_dmul>
 800b964:	4643      	mov	r3, r8
 800b966:	0006      	movs	r6, r0
 800b968:	0418      	lsls	r0, r3, #16
 800b96a:	0c00      	lsrs	r0, r0, #16
 800b96c:	000f      	movs	r7, r1
 800b96e:	f7f7 f86d 	bl	8002a4c <__aeabi_i2d>
 800b972:	0002      	movs	r2, r0
 800b974:	000b      	movs	r3, r1
 800b976:	0030      	movs	r0, r6
 800b978:	0039      	movs	r1, r7
 800b97a:	f7f5 fe51 	bl	8001620 <__aeabi_ddiv>
 800b97e:	f7f7 f923 	bl	8002bc8 <__aeabi_d2f>
 800b982:	464b      	mov	r3, r9
 800b984:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800b986:	0028      	movs	r0, r5
 800b988:	f003 fbfc 	bl	800f184 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800b98c:	2311      	movs	r3, #17
 800b98e:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 800b990:	4b1a      	ldr	r3, [pc, #104]	; (800b9fc <ReadTempAndVref+0x184>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b992:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800b994:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b996:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b998:	316c      	adds	r1, #108	; 0x6c
 800b99a:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b99c:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b99e:	f003 fcf1 	bl	800f384 <HAL_ADC_ConfigChannel>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d002      	beq.n	800b9ac <ReadTempAndVref+0x134>
	HAL_Delay(100);
 800b9a6:	2064      	movs	r0, #100	; 0x64
 800b9a8:	f003 fa44 	bl	800ee34 <HAL_Delay>
}
 800b9ac:	bc0c      	pop	{r2, r3}
 800b9ae:	4690      	mov	r8, r2
 800b9b0:	4699      	mov	r9, r3
 800b9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_Delay(100);
 800b9b4:	2064      	movs	r0, #100	; 0x64
 800b9b6:	f003 fa3d 	bl	800ee34 <HAL_Delay>
 800b9ba:	e7be      	b.n	800b93a <ReadTempAndVref+0xc2>
 800b9bc:	2064      	movs	r0, #100	; 0x64
 800b9be:	f003 fa39 	bl	800ee34 <HAL_Delay>
 800b9c2:	e7ac      	b.n	800b91e <ReadTempAndVref+0xa6>
 800b9c4:	2064      	movs	r0, #100	; 0x64
 800b9c6:	f003 fa35 	bl	800ee34 <HAL_Delay>
 800b9ca:	e771      	b.n	800b8b0 <ReadTempAndVref+0x38>
		MX_ADC_Init();
 800b9cc:	f7ff fefa 	bl	800b7c4 <MX_ADC_Init>
 800b9d0:	e75e      	b.n	800b890 <ReadTempAndVref+0x18>
 800b9d2:	46c0      	nop			; (mov r8, r8)
 800b9d4:	200023d0 	.word	0x200023d0
 800b9d8:	20006c50 	.word	0x20006c50
 800b9dc:	66666666 	.word	0x66666666
 800b9e0:	400a6666 	.word	0x400a6666
 800b9e4:	40affe00 	.word	0x40affe00
 800b9e8:	28f5c28f 	.word	0x28f5c28f
 800b9ec:	3ff68f5c 	.word	0x3ff68f5c
 800b9f0:	33333333 	.word	0x33333333
 800b9f4:	40113333 	.word	0x40113333
 800b9f8:	40390000 	.word	0x40390000
 800b9fc:	00001001 	.word	0x00001001
 800ba00:	1ffff7ba 	.word	0x1ffff7ba

0800ba04 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800ba04:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (port == 2 || port == 3) {
 800ba06:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800ba08:	b087      	sub	sp, #28
 800ba0a:	0005      	movs	r5, r0
 800ba0c:	000e      	movs	r6, r1
	if (port == 2 || port == 3) {
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d901      	bls.n	800ba16 <GetReadPrecentage+0x12>
}
 800ba12:	b007      	add	sp, #28
 800ba14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (0 == ADC_flag) {
 800ba16:	2368      	movs	r3, #104	; 0x68
 800ba18:	4c57      	ldr	r4, [pc, #348]	; (800bb78 <GetReadPrecentage+0x174>)
 800ba1a:	5ce3      	ldrb	r3, [r4, r3]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d062      	beq.n	800bae6 <GetReadPrecentage+0xe2>
		Channel = Get_channel(GetUart(port), "bottom");
 800ba20:	0028      	movs	r0, r5
 800ba22:	f001 fa29 	bl	800ce78 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800ba26:	4a55      	ldr	r2, [pc, #340]	; (800bb7c <GetReadPrecentage+0x178>)
 800ba28:	6803      	ldr	r3, [r0, #0]
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d07e      	beq.n	800bb2c <GetReadPrecentage+0x128>
	else if (huart->Instance == USART6 && side == "top")
 800ba2e:	4a54      	ldr	r2, [pc, #336]	; (800bb80 <GetReadPrecentage+0x17c>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d04d      	beq.n	800bad0 <GetReadPrecentage+0xcc>
 800ba34:	2300      	movs	r3, #0
 800ba36:	0019      	movs	r1, r3
		Channel = Get_channel(GetUart(port), "bottom");
 800ba38:	227c      	movs	r2, #124	; 0x7c
 800ba3a:	54a3      	strb	r3, [r4, r2]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800ba3c:	2380      	movs	r3, #128	; 0x80
		sConfig.Channel = Channel;
 800ba3e:	66e1      	str	r1, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800ba40:	015b      	lsls	r3, r3, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ba42:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800ba44:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800ba46:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ba48:	4d4e      	ldr	r5, [pc, #312]	; (800bb84 <GetReadPrecentage+0x180>)
 800ba4a:	316c      	adds	r1, #108	; 0x6c
 800ba4c:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800ba4e:	6763      	str	r3, [r4, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ba50:	f003 fc98 	bl	800f384 <HAL_ADC_ConfigChannel>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d142      	bne.n	800bade <GetReadPrecentage+0xda>
		HAL_ADC_Start(&hadc);
 800ba58:	0028      	movs	r0, r5
 800ba5a:	f003 fb67 	bl	800f12c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800ba5e:	2164      	movs	r1, #100	; 0x64
 800ba60:	0028      	movs	r0, r5
 800ba62:	f003 fbaf 	bl	800f1c4 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800ba66:	0028      	movs	r0, r5
 800ba68:	f003 fc10 	bl	800f28c <HAL_ADC_GetValue>
 800ba6c:	f7f5 fa7c 	bl	8000f68 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800ba70:	f7f7 f858 	bl	8002b24 <__aeabi_f2d>
 800ba74:	4a44      	ldr	r2, [pc, #272]	; (800bb88 <GetReadPrecentage+0x184>)
 800ba76:	4b45      	ldr	r3, [pc, #276]	; (800bb8c <GetReadPrecentage+0x188>)
 800ba78:	f7f6 f9dc 	bl	8001e34 <__aeabi_dmul>
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	4b44      	ldr	r3, [pc, #272]	; (800bb90 <GetReadPrecentage+0x18c>)
 800ba80:	f7f5 fdce 	bl	8001620 <__aeabi_ddiv>
 800ba84:	f7f7 f8a0 	bl	8002bc8 <__aeabi_d2f>
 800ba88:	4f42      	ldr	r7, [pc, #264]	; (800bb94 <GetReadPrecentage+0x190>)
		current = (100 * percentage) / 3.3;
 800ba8a:	4943      	ldr	r1, [pc, #268]	; (800bb98 <GetReadPrecentage+0x194>)
		percentage = 3.3 * percentage / 4095;
 800ba8c:	6038      	str	r0, [r7, #0]
		current = (100 * percentage) / 3.3;
 800ba8e:	f7f4 ff55 	bl	800093c <__aeabi_fmul>
 800ba92:	f7f7 f847 	bl	8002b24 <__aeabi_f2d>
 800ba96:	4b3d      	ldr	r3, [pc, #244]	; (800bb8c <GetReadPrecentage+0x188>)
 800ba98:	4a3b      	ldr	r2, [pc, #236]	; (800bb88 <GetReadPrecentage+0x184>)
 800ba9a:	f7f5 fdc1 	bl	8001620 <__aeabi_ddiv>
 800ba9e:	f7f7 f893 	bl	8002bc8 <__aeabi_d2f>
 800baa2:	6078      	str	r0, [r7, #4]
		*precentageValue = current;
 800baa4:	6030      	str	r0, [r6, #0]
		HAL_ADC_Stop(&hadc);
 800baa6:	0028      	movs	r0, r5
 800baa8:	f003 fb6c 	bl	800f184 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800baac:	237c      	movs	r3, #124	; 0x7c
 800baae:	5ce3      	ldrb	r3, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bab0:	0021      	movs	r1, r4
		sConfig.Channel = Channel;
 800bab2:	66e3      	str	r3, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800bab4:	4b39      	ldr	r3, [pc, #228]	; (800bb9c <GetReadPrecentage+0x198>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bab6:	316c      	adds	r1, #108	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800bab8:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800baba:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800babc:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800babe:	6763      	str	r3, [r4, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bac0:	f003 fc60 	bl	800f384 <HAL_ADC_ConfigChannel>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d0a4      	beq.n	800ba12 <GetReadPrecentage+0xe>
	HAL_Delay(100);
 800bac8:	2064      	movs	r0, #100	; 0x64
 800baca:	f003 f9b3 	bl	800ee34 <HAL_Delay>
 800bace:	e7a0      	b.n	800ba12 <GetReadPrecentage+0xe>
	else if (huart->Instance == USART6 && side == "top")
 800bad0:	4a33      	ldr	r2, [pc, #204]	; (800bba0 <GetReadPrecentage+0x19c>)
 800bad2:	4b34      	ldr	r3, [pc, #208]	; (800bba4 <GetReadPrecentage+0x1a0>)
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d04c      	beq.n	800bb72 <GetReadPrecentage+0x16e>
 800bad8:	2105      	movs	r1, #5
		return ADC_CHANNEL_5;
 800bada:	2305      	movs	r3, #5
 800badc:	e7ac      	b.n	800ba38 <GetReadPrecentage+0x34>
	HAL_Delay(100);
 800bade:	2064      	movs	r0, #100	; 0x64
 800bae0:	f003 f9a8 	bl	800ee34 <HAL_Delay>
 800bae4:	e7b8      	b.n	800ba58 <GetReadPrecentage+0x54>
			MX_ADC_Init();
 800bae6:	f7ff fe6d 	bl	800b7c4 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800baea:	0028      	movs	r0, r5
 800baec:	f001 f9c4 	bl	800ce78 <GetUart>
 800baf0:	f005 fdd8 	bl	80116a4 <HAL_UART_DeInit>
			if (port == 3) {
 800baf4:	2d03      	cmp	r5, #3
 800baf6:	d020      	beq.n	800bb3a <GetReadPrecentage+0x136>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800baf8:	2090      	movs	r0, #144	; 0x90
 800bafa:	2104      	movs	r1, #4
 800bafc:	05c0      	lsls	r0, r0, #23
 800bafe:	f004 fdb7 	bl	8010670 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800bb02:	2304      	movs	r3, #4
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb04:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800bb06:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb08:	3b03      	subs	r3, #3
 800bb0a:	9302      	str	r3, [sp, #8]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb0c:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bb0e:	3302      	adds	r3, #2
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb10:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bb12:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb14:	f004 fcb0 	bl	8010478 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800bb18:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800bb1a:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800bb1c:	4b22      	ldr	r3, [pc, #136]	; (800bba8 <GetReadPrecentage+0x1a4>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800bb1e:	2104      	movs	r1, #4
				portStatus[port - 1] = CUSTOM;
 800bb20:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800bb22:	05c0      	lsls	r0, r0, #23
 800bb24:	3a05      	subs	r2, #5
 800bb26:	f004 fe47 	bl	80107b8 <HAL_GPIO_WritePin>
 800bb2a:	e779      	b.n	800ba20 <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800bb2c:	4a1c      	ldr	r2, [pc, #112]	; (800bba0 <GetReadPrecentage+0x19c>)
 800bb2e:	4b1d      	ldr	r3, [pc, #116]	; (800bba4 <GetReadPrecentage+0x1a0>)
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d01b      	beq.n	800bb6c <GetReadPrecentage+0x168>
 800bb34:	2103      	movs	r1, #3
		return ADC_CHANNEL_3;
 800bb36:	2303      	movs	r3, #3
 800bb38:	e77e      	b.n	800ba38 <GetReadPrecentage+0x34>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800bb3a:	2090      	movs	r0, #144	; 0x90
 800bb3c:	2110      	movs	r1, #16
 800bb3e:	05c0      	lsls	r0, r0, #23
 800bb40:	f004 fd96 	bl	8010670 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800bb44:	2310      	movs	r3, #16
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb46:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800bb48:	9301      	str	r3, [sp, #4]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb4a:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb4c:	3b0f      	subs	r3, #15
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb4e:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb50:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bb52:	9504      	str	r5, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb54:	f004 fc90 	bl	8010478 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800bb58:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800bb5a:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800bb5c:	4b12      	ldr	r3, [pc, #72]	; (800bba8 <GetReadPrecentage+0x1a4>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800bb5e:	2110      	movs	r1, #16
				portStatus[port - 1] = CUSTOM;
 800bb60:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800bb62:	05c0      	lsls	r0, r0, #23
 800bb64:	3a05      	subs	r2, #5
 800bb66:	f004 fe27 	bl	80107b8 <HAL_GPIO_WritePin>
 800bb6a:	e759      	b.n	800ba20 <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800bb6c:	2102      	movs	r1, #2
		return ADC_CHANNEL_2;
 800bb6e:	2302      	movs	r3, #2
 800bb70:	e762      	b.n	800ba38 <GetReadPrecentage+0x34>
	else if (huart->Instance == USART6 && side == "top")
 800bb72:	2104      	movs	r1, #4
		return ADC_CHANNEL_4;
 800bb74:	2304      	movs	r3, #4
 800bb76:	e75f      	b.n	800ba38 <GetReadPrecentage+0x34>
 800bb78:	200023d0 	.word	0x200023d0
 800bb7c:	40004400 	.word	0x40004400
 800bb80:	40011400 	.word	0x40011400
 800bb84:	20006c50 	.word	0x20006c50
 800bb88:	66666666 	.word	0x66666666
 800bb8c:	400a6666 	.word	0x400a6666
 800bb90:	40affe00 	.word	0x40affe00
 800bb94:	20002450 	.word	0x20002450
 800bb98:	42c80000 	.word	0x42c80000
 800bb9c:	00001001 	.word	0x00001001
 800bba0:	080180e8 	.word	0x080180e8
 800bba4:	080180e4 	.word	0x080180e4
 800bba8:	20000c3c 	.word	0x20000c3c

0800bbac <Get_Rank>:

}

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800bbac:	2802      	cmp	r0, #2
 800bbae:	d00e      	beq.n	800bbce <Get_Rank+0x22>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800bbb0:	2803      	cmp	r0, #3
 800bbb2:	d002      	beq.n	800bbba <Get_Rank+0xe>
 800bbb4:	4b10      	ldr	r3, [pc, #64]	; (800bbf8 <Get_Rank+0x4c>)
 800bbb6:	7a18      	ldrb	r0, [r3, #8]
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
}
 800bbb8:	4770      	bx	lr
	else if (Port == 3 && side == "top")
 800bbba:	4b10      	ldr	r3, [pc, #64]	; (800bbfc <Get_Rank+0x50>)
 800bbbc:	4299      	cmp	r1, r3
 800bbbe:	d016      	beq.n	800bbee <Get_Rank+0x42>
	else if (Port == 3 && side == "bottom")
 800bbc0:	4b0f      	ldr	r3, [pc, #60]	; (800bc00 <Get_Rank+0x54>)
 800bbc2:	4299      	cmp	r1, r3
 800bbc4:	d1f6      	bne.n	800bbb4 <Get_Rank+0x8>
		Rank_t = 3;
 800bbc6:	4b0c      	ldr	r3, [pc, #48]	; (800bbf8 <Get_Rank+0x4c>)
 800bbc8:	7218      	strb	r0, [r3, #8]
 800bbca:	2003      	movs	r0, #3
 800bbcc:	e7f4      	b.n	800bbb8 <Get_Rank+0xc>
	if (Port == 2 && side == "top")
 800bbce:	4b0b      	ldr	r3, [pc, #44]	; (800bbfc <Get_Rank+0x50>)
 800bbd0:	4299      	cmp	r1, r3
 800bbd2:	d007      	beq.n	800bbe4 <Get_Rank+0x38>
	else if (Port == 2 && side == "bottom")
 800bbd4:	4b0a      	ldr	r3, [pc, #40]	; (800bc00 <Get_Rank+0x54>)
 800bbd6:	4299      	cmp	r1, r3
 800bbd8:	d1ec      	bne.n	800bbb4 <Get_Rank+0x8>
		Rank_t = 1;
 800bbda:	2201      	movs	r2, #1
 800bbdc:	4b06      	ldr	r3, [pc, #24]	; (800bbf8 <Get_Rank+0x4c>)
 800bbde:	2001      	movs	r0, #1
 800bbe0:	721a      	strb	r2, [r3, #8]
 800bbe2:	e7e9      	b.n	800bbb8 <Get_Rank+0xc>
		Rank_t = 0;
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	4b04      	ldr	r3, [pc, #16]	; (800bbf8 <Get_Rank+0x4c>)
 800bbe8:	2000      	movs	r0, #0
 800bbea:	721a      	strb	r2, [r3, #8]
 800bbec:	e7e4      	b.n	800bbb8 <Get_Rank+0xc>
		Rank_t = 2;
 800bbee:	2202      	movs	r2, #2
 800bbf0:	4b01      	ldr	r3, [pc, #4]	; (800bbf8 <Get_Rank+0x4c>)
 800bbf2:	3801      	subs	r0, #1
 800bbf4:	721a      	strb	r2, [r3, #8]
 800bbf6:	e7df      	b.n	800bbb8 <Get_Rank+0xc>
 800bbf8:	20002450 	.word	0x20002450
 800bbfc:	080180e4 	.word	0x080180e4
 800bc00:	080180e8 	.word	0x080180e8

0800bc04 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800bc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ADC_port == 2 || ADC_port == 3) {
 800bc06:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800bc08:	0004      	movs	r4, r0
 800bc0a:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d900      	bls.n	800bc12 <ADCSelectChannel+0xe>
}
 800bc10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		flag_ADC_Select=1;
 800bc12:	2369      	movs	r3, #105	; 0x69
 800bc14:	2201      	movs	r2, #1
 800bc16:	4e1c      	ldr	r6, [pc, #112]	; (800bc88 <ADCSelectChannel+0x84>)
 800bc18:	54f2      	strb	r2, [r6, r3]
		HAL_UART_DeInit(GetUart(ADC_port));
 800bc1a:	f001 f92d 	bl	800ce78 <GetUart>
 800bc1e:	f005 fd41 	bl	80116a4 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800bc22:	2206      	movs	r2, #6
 800bc24:	4b19      	ldr	r3, [pc, #100]	; (800bc8c <ADCSelectChannel+0x88>)
		Channel = Get_channel(GetUart(ADC_port), side);
 800bc26:	0020      	movs	r0, r4
		portStatus[ADC_port - 1] = CUSTOM;
 800bc28:	191b      	adds	r3, r3, r4
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 800bc2e:	f001 f923 	bl	800ce78 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800bc32:	4a17      	ldr	r2, [pc, #92]	; (800bc90 <ADCSelectChannel+0x8c>)
 800bc34:	6803      	ldr	r3, [r0, #0]
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d011      	beq.n	800bc5e <ADCSelectChannel+0x5a>
	else if (huart->Instance == USART6 && side == "top")
 800bc3a:	4a16      	ldr	r2, [pc, #88]	; (800bc94 <ADCSelectChannel+0x90>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d016      	beq.n	800bc6e <ADCSelectChannel+0x6a>
		Channel = Get_channel(GetUart(ADC_port), side);
 800bc40:	237c      	movs	r3, #124	; 0x7c
		Rank_t = Get_Rank(ADC_port, side);
 800bc42:	0029      	movs	r1, r5
 800bc44:	0020      	movs	r0, r4
		Channel = Get_channel(GetUart(ADC_port), side);
 800bc46:	54f7      	strb	r7, [r6, r3]
		Rank_t = Get_Rank(ADC_port, side);
 800bc48:	f7ff ffb0 	bl	800bbac <Get_Rank>
 800bc4c:	4b12      	ldr	r3, [pc, #72]	; (800bc98 <ADCSelectChannel+0x94>)
 800bc4e:	7218      	strb	r0, [r3, #8]
		if (ADC_flag == 0)
 800bc50:	2368      	movs	r3, #104	; 0x68
 800bc52:	5cf3      	ldrb	r3, [r6, r3]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1db      	bne.n	800bc10 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 800bc58:	f7ff fdb4 	bl	800b7c4 <MX_ADC_Init>
}
 800bc5c:	e7d8      	b.n	800bc10 <ADCSelectChannel+0xc>
	if (huart->Instance == USART2 && side == "top")
 800bc5e:	4b0f      	ldr	r3, [pc, #60]	; (800bc9c <ADCSelectChannel+0x98>)
 800bc60:	429d      	cmp	r5, r3
 800bc62:	d00e      	beq.n	800bc82 <ADCSelectChannel+0x7e>
	else if (huart->Instance == USART2 && side == "bottom")
 800bc64:	4b0e      	ldr	r3, [pc, #56]	; (800bca0 <ADCSelectChannel+0x9c>)
 800bc66:	429d      	cmp	r5, r3
 800bc68:	d1ea      	bne.n	800bc40 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_3;
 800bc6a:	2703      	movs	r7, #3
 800bc6c:	e7e8      	b.n	800bc40 <ADCSelectChannel+0x3c>
	else if (huart->Instance == USART6 && side == "top")
 800bc6e:	4b0b      	ldr	r3, [pc, #44]	; (800bc9c <ADCSelectChannel+0x98>)
 800bc70:	429d      	cmp	r5, r3
 800bc72:	d004      	beq.n	800bc7e <ADCSelectChannel+0x7a>
	else if (huart->Instance == USART6 && side == "bottom")
 800bc74:	4b0a      	ldr	r3, [pc, #40]	; (800bca0 <ADCSelectChannel+0x9c>)
 800bc76:	429d      	cmp	r5, r3
 800bc78:	d1e2      	bne.n	800bc40 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_5;
 800bc7a:	2705      	movs	r7, #5
 800bc7c:	e7e0      	b.n	800bc40 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_4;
 800bc7e:	2704      	movs	r7, #4
 800bc80:	e7de      	b.n	800bc40 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_2;
 800bc82:	2702      	movs	r7, #2
 800bc84:	e7dc      	b.n	800bc40 <ADCSelectChannel+0x3c>
 800bc86:	46c0      	nop			; (mov r8, r8)
 800bc88:	200023d0 	.word	0x200023d0
 800bc8c:	20000c3c 	.word	0x20000c3c
 800bc90:	40004400 	.word	0x40004400
 800bc94:	40011400 	.word	0x40011400
 800bc98:	20002450 	.word	0x20002450
 800bc9c:	080180e4 	.word	0x080180e4
 800bca0:	080180e8 	.word	0x080180e8

0800bca4 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca6:	4647      	mov	r7, r8
 800bca8:	46ce      	mov	lr, r9
	if (ADC_flag == 1) {
 800bcaa:	2368      	movs	r3, #104	; 0x68
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800bcac:	b580      	push	{r7, lr}
	if (ADC_flag == 1) {
 800bcae:	4d3a      	ldr	r5, [pc, #232]	; (800bd98 <ReadADCChannel+0xf4>)
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800bcb0:	0007      	movs	r7, r0
	if (ADC_flag == 1) {
 800bcb2:	5ceb      	ldrb	r3, [r5, r3]
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800bcb4:	000c      	movs	r4, r1
 800bcb6:	0016      	movs	r6, r2
	if (ADC_flag == 1) {
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d00b      	beq.n	800bcd4 <ReadADCChannel+0x30>
 800bcbc:	4c37      	ldr	r4, [pc, #220]	; (800bd9c <ReadADCChannel+0xf8>)
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800bcbe:	7a23      	ldrb	r3, [r4, #8]
 800bcc0:	005b      	lsls	r3, r3, #1
 800bcc2:	18e4      	adds	r4, r4, r3
 800bcc4:	89a0      	ldrh	r0, [r4, #12]
 800bcc6:	f7f5 f94f 	bl	8000f68 <__aeabi_ui2f>
 800bcca:	6030      	str	r0, [r6, #0]
}
 800bccc:	bc0c      	pop	{r2, r3}
 800bcce:	4690      	mov	r8, r2
 800bcd0:	4699      	mov	r9, r3
 800bcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800bcd4:	f001 f8d0 	bl	800ce78 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800bcd8:	4a31      	ldr	r2, [pc, #196]	; (800bda0 <ReadADCChannel+0xfc>)
 800bcda:	6803      	ldr	r3, [r0, #0]
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d03f      	beq.n	800bd60 <ReadADCChannel+0xbc>
	else if (huart->Instance == USART6 && side == "top")
 800bce0:	4a30      	ldr	r2, [pc, #192]	; (800bda4 <ReadADCChannel+0x100>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d049      	beq.n	800bd7a <ReadADCChannel+0xd6>
		Channel = Get_channel(GetUart(Port), side);
 800bce6:	237c      	movs	r3, #124	; 0x7c
 800bce8:	464a      	mov	r2, r9
 800bcea:	4698      	mov	r8, r3
		Rank_t = Get_Rank(Port, side);
 800bcec:	0021      	movs	r1, r4
 800bcee:	0038      	movs	r0, r7
		Channel = Get_channel(GetUart(Port), side);
 800bcf0:	54ea      	strb	r2, [r5, r3]
		Rank_t = Get_Rank(Port, side);
 800bcf2:	f7ff ff5b 	bl	800bbac <Get_Rank>
		sConfig.Channel = Channel;
 800bcf6:	4643      	mov	r3, r8
 800bcf8:	5ceb      	ldrb	r3, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bcfa:	0029      	movs	r1, r5
		sConfig.Channel = Channel;
 800bcfc:	66eb      	str	r3, [r5, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bcfe:	2380      	movs	r3, #128	; 0x80
 800bd00:	015b      	lsls	r3, r3, #5
 800bd02:	672b      	str	r3, [r5, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bd04:	2303      	movs	r3, #3
		Rank_t = Get_Rank(Port, side);
 800bd06:	4c25      	ldr	r4, [pc, #148]	; (800bd9c <ReadADCChannel+0xf8>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bd08:	4f27      	ldr	r7, [pc, #156]	; (800bda8 <ReadADCChannel+0x104>)
		Rank_t = Get_Rank(Port, side);
 800bd0a:	7220      	strb	r0, [r4, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bd0c:	316c      	adds	r1, #108	; 0x6c
 800bd0e:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bd10:	676b      	str	r3, [r5, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bd12:	f003 fb37 	bl	800f384 <HAL_ADC_ConfigChannel>
 800bd16:	2800      	cmp	r0, #0
 800bd18:	d12b      	bne.n	800bd72 <ReadADCChannel+0xce>
		HAL_ADC_Start(&hadc);
 800bd1a:	0038      	movs	r0, r7
 800bd1c:	f003 fa06 	bl	800f12c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800bd20:	2164      	movs	r1, #100	; 0x64
 800bd22:	0038      	movs	r0, r7
 800bd24:	f003 fa4e 	bl	800f1c4 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800bd28:	0038      	movs	r0, r7
 800bd2a:	f003 faaf 	bl	800f28c <HAL_ADC_GetValue>
 800bd2e:	7a23      	ldrb	r3, [r4, #8]
 800bd30:	005b      	lsls	r3, r3, #1
 800bd32:	18e3      	adds	r3, r4, r3
 800bd34:	8198      	strh	r0, [r3, #12]
		HAL_ADC_Stop(&hadc);
 800bd36:	0038      	movs	r0, r7
 800bd38:	f003 fa24 	bl	800f184 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800bd3c:	237c      	movs	r3, #124	; 0x7c
 800bd3e:	5ceb      	ldrb	r3, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bd40:	0029      	movs	r1, r5
		sConfig.Channel = Channel;
 800bd42:	66eb      	str	r3, [r5, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800bd44:	4b19      	ldr	r3, [pc, #100]	; (800bdac <ReadADCChannel+0x108>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bd46:	316c      	adds	r1, #108	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800bd48:	672b      	str	r3, [r5, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bd4a:	2303      	movs	r3, #3
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bd4c:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bd4e:	676b      	str	r3, [r5, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bd50:	f003 fb18 	bl	800f384 <HAL_ADC_ConfigChannel>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d0b2      	beq.n	800bcbe <ReadADCChannel+0x1a>
	HAL_Delay(100);
 800bd58:	2064      	movs	r0, #100	; 0x64
 800bd5a:	f003 f86b 	bl	800ee34 <HAL_Delay>
 800bd5e:	e7ae      	b.n	800bcbe <ReadADCChannel+0x1a>
	if (huart->Instance == USART2 && side == "top")
 800bd60:	4b13      	ldr	r3, [pc, #76]	; (800bdb0 <ReadADCChannel+0x10c>)
 800bd62:	429c      	cmp	r4, r3
 800bd64:	d012      	beq.n	800bd8c <ReadADCChannel+0xe8>
	else if (huart->Instance == USART2 && side == "bottom")
 800bd66:	4b13      	ldr	r3, [pc, #76]	; (800bdb4 <ReadADCChannel+0x110>)
 800bd68:	429c      	cmp	r4, r3
 800bd6a:	d1bc      	bne.n	800bce6 <ReadADCChannel+0x42>
		return ADC_CHANNEL_3;
 800bd6c:	2303      	movs	r3, #3
 800bd6e:	4699      	mov	r9, r3
 800bd70:	e7b9      	b.n	800bce6 <ReadADCChannel+0x42>
	HAL_Delay(100);
 800bd72:	2064      	movs	r0, #100	; 0x64
 800bd74:	f003 f85e 	bl	800ee34 <HAL_Delay>
 800bd78:	e7cf      	b.n	800bd1a <ReadADCChannel+0x76>
	else if (huart->Instance == USART6 && side == "top")
 800bd7a:	4b0d      	ldr	r3, [pc, #52]	; (800bdb0 <ReadADCChannel+0x10c>)
 800bd7c:	429c      	cmp	r4, r3
 800bd7e:	d008      	beq.n	800bd92 <ReadADCChannel+0xee>
	else if (huart->Instance == USART6 && side == "bottom")
 800bd80:	4b0c      	ldr	r3, [pc, #48]	; (800bdb4 <ReadADCChannel+0x110>)
 800bd82:	429c      	cmp	r4, r3
 800bd84:	d1af      	bne.n	800bce6 <ReadADCChannel+0x42>
		return ADC_CHANNEL_5;
 800bd86:	2305      	movs	r3, #5
 800bd88:	4699      	mov	r9, r3
 800bd8a:	e7ac      	b.n	800bce6 <ReadADCChannel+0x42>
		return ADC_CHANNEL_2;
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	4699      	mov	r9, r3
 800bd90:	e7a9      	b.n	800bce6 <ReadADCChannel+0x42>
		return ADC_CHANNEL_4;
 800bd92:	2304      	movs	r3, #4
 800bd94:	4699      	mov	r9, r3
 800bd96:	e7a6      	b.n	800bce6 <ReadADCChannel+0x42>
 800bd98:	200023d0 	.word	0x200023d0
 800bd9c:	20002450 	.word	0x20002450
 800bda0:	40004400 	.word	0x40004400
 800bda4:	40011400 	.word	0x40011400
 800bda8:	20006c50 	.word	0x20006c50
 800bdac:	00001001 	.word	0x00001001
 800bdb0:	080180e4 	.word	0x080180e4
 800bdb4:	080180e8 	.word	0x080180e8

0800bdb8 <buttonReleasedCallback>:
 800bdb8:	4770      	bx	lr
 800bdba:	46c0      	nop			; (mov r8, r8)

0800bdbc <buttonClickedCallback>:
 800bdbc:	4770      	bx	lr
 800bdbe:	46c0      	nop			; (mov r8, r8)

0800bdc0 <buttonDblClickedCallback>:
 800bdc0:	4770      	bx	lr
 800bdc2:	46c0      	nop			; (mov r8, r8)

0800bdc4 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800bdc4:	4770      	bx	lr
 800bdc6:	46c0      	nop			; (mov r8, r8)

0800bdc8 <buttonReleasedForYCallback>:
 800bdc8:	4770      	bx	lr
 800bdca:	46c0      	nop			; (mov r8, r8)

0800bdcc <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800bdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdce:	4645      	mov	r5, r8
 800bdd0:	46de      	mov	lr, fp
 800bdd2:	464e      	mov	r6, r9
 800bdd4:	4657      	mov	r7, sl
 800bdd6:	4bc5      	ldr	r3, [pc, #788]	; (800c0ec <CheckAttachedButtons+0x320>)
 800bdd8:	b5e0      	push	{r5, r6, r7, lr}
 800bdda:	4698      	mov	r8, r3
 800bddc:	001c      	movs	r4, r3
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800bdde:	2300      	movs	r3, #0
void CheckAttachedButtons(void) {
 800bde0:	b08b      	sub	sp, #44	; 0x2c
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800bde2:	9304      	str	r3, [sp, #16]
 800bde4:	469b      	mov	fp, r3
			if (delayButtonStateReset == false)
 800bde6:	4bc2      	ldr	r3, [pc, #776]	; (800c0f0 <CheckAttachedButtons+0x324>)
void CheckAttachedButtons(void) {
 800bde8:	2501      	movs	r5, #1
			if (delayButtonStateReset == false)
 800bdea:	4699      	mov	r9, r3
 800bdec:	b2eb      	uxtb	r3, r5
 800bdee:	469a      	mov	sl, r3
		if (button[i].type)			// Only check defined butons
 800bdf0:	7aa3      	ldrb	r3, [r4, #10]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d100      	bne.n	800bdf8 <CheckAttachedButtons+0x2c>
 800bdf6:	e0c0      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
			if (delayButtonStateReset == false)
 800bdf8:	464b      	mov	r3, r9
 800bdfa:	7d1b      	ldrb	r3, [r3, #20]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d100      	bne.n	800be02 <CheckAttachedButtons+0x36>
				button[i].state = NONE;
 800be00:	7263      	strb	r3, [r4, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800be02:	ab04      	add	r3, sp, #16
 800be04:	469c      	mov	ip, r3
 800be06:	270e      	movs	r7, #14
 800be08:	ae07      	add	r6, sp, #28
 800be0a:	4467      	add	r7, ip
 800be0c:	ab09      	add	r3, sp, #36	; 0x24
 800be0e:	0032      	movs	r2, r6
 800be10:	a908      	add	r1, sp, #32
 800be12:	9700      	str	r7, [sp, #0]
 800be14:	4650      	mov	r0, sl
 800be16:	f7ff f9db 	bl	800b1d0 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800be1a:	8831      	ldrh	r1, [r6, #0]
 800be1c:	2200      	movs	r2, #0
 800be1e:	9808      	ldr	r0, [sp, #32]
 800be20:	f004 fcca 	bl	80107b8 <HAL_GPIO_WritePin>
			Delay_us(10);
 800be24:	200a      	movs	r0, #10
 800be26:	f000 fe19 	bl	800ca5c <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800be2a:	8839      	ldrh	r1, [r7, #0]
 800be2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be2e:	f004 fcbd 	bl	80107ac <HAL_GPIO_ReadPin>
 800be32:	2800      	cmp	r0, #0
 800be34:	d100      	bne.n	800be38 <CheckAttachedButtons+0x6c>
 800be36:	e14b      	b.n	800c0d0 <CheckAttachedButtons+0x304>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800be38:	8831      	ldrh	r1, [r6, #0]
 800be3a:	2200      	movs	r2, #0
 800be3c:	9808      	ldr	r0, [sp, #32]
 800be3e:	f004 fcbb 	bl	80107b8 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800be42:	7aa3      	ldrb	r3, [r4, #10]
 800be44:	2b02      	cmp	r3, #2
 800be46:	d100      	bne.n	800be4a <CheckAttachedButtons+0x7e>
 800be48:	e0a6      	b.n	800bf98 <CheckAttachedButtons+0x1cc>
 800be4a:	d800      	bhi.n	800be4e <CheckAttachedButtons+0x82>
 800be4c:	e0a1      	b.n	800bf92 <CheckAttachedButtons+0x1c6>
 800be4e:	2b03      	cmp	r3, #3
 800be50:	d100      	bne.n	800be54 <CheckAttachedButtons+0x88>
 800be52:	e170      	b.n	800c136 <CheckAttachedButtons+0x36a>
 800be54:	2b04      	cmp	r3, #4
 800be56:	d000      	beq.n	800be5a <CheckAttachedButtons+0x8e>
 800be58:	e156      	b.n	800c108 <CheckAttachedButtons+0x33c>
 800be5a:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800be5c:	4658      	mov	r0, fp
 800be5e:	00aa      	lsls	r2, r5, #2
 800be60:	3138      	adds	r1, #56	; 0x38
 800be62:	588b      	ldr	r3, [r1, r2]
 800be64:	2801      	cmp	r0, #1
 800be66:	d100      	bne.n	800be6a <CheckAttachedButtons+0x9e>
 800be68:	e170      	b.n	800c14c <CheckAttachedButtons+0x380>
				else if (connected == GPIO_PIN_RESET)
 800be6a:	2800      	cmp	r0, #0
 800be6c:	d100      	bne.n	800be70 <CheckAttachedButtons+0xa4>
 800be6e:	e217      	b.n	800c2a0 <CheckAttachedButtons+0x4d4>
			if (state == CLOSED || state == ON) {
 800be70:	9904      	ldr	r1, [sp, #16]
 800be72:	2904      	cmp	r1, #4
 800be74:	d100      	bne.n	800be78 <CheckAttachedButtons+0xac>
 800be76:	e14f      	b.n	800c118 <CheckAttachedButtons+0x34c>
 800be78:	9904      	ldr	r1, [sp, #16]
 800be7a:	2902      	cmp	r1, #2
 800be7c:	d100      	bne.n	800be80 <CheckAttachedButtons+0xb4>
 800be7e:	e14b      	b.n	800c118 <CheckAttachedButtons+0x34c>
			if (state == OPEN || state == OFF) {
 800be80:	9904      	ldr	r1, [sp, #16]
 800be82:	2903      	cmp	r1, #3
 800be84:	d002      	beq.n	800be8c <CheckAttachedButtons+0xc0>
 800be86:	489b      	ldr	r0, [pc, #620]	; (800c0f4 <CheckAttachedButtons+0x328>)
 800be88:	2901      	cmp	r1, #1
 800be8a:	d114      	bne.n	800beb6 <CheckAttachedButtons+0xea>
				if (releaseCounter[i] < 0xFFFF)
 800be8c:	4640      	mov	r0, r8
 800be8e:	3050      	adds	r0, #80	; 0x50
 800be90:	5881      	ldr	r1, [r0, r2]
 800be92:	4e99      	ldr	r6, [pc, #612]	; (800c0f8 <CheckAttachedButtons+0x32c>)
 800be94:	42b1      	cmp	r1, r6
 800be96:	d900      	bls.n	800be9a <CheckAttachedButtons+0xce>
 800be98:	e092      	b.n	800bfc0 <CheckAttachedButtons+0x1f4>
				if (clicked == 2
 800be9a:	464f      	mov	r7, r9
					++releaseCounter[i];		// Advance the debounce counter
 800be9c:	3101      	adds	r1, #1
 800be9e:	5081      	str	r1, [r0, r2]
				if (clicked == 2
 800bea0:	7fbf      	ldrb	r7, [r7, #30]
 800bea2:	4996      	ldr	r1, [pc, #600]	; (800c0fc <CheckAttachedButtons+0x330>)
 800bea4:	4893      	ldr	r0, [pc, #588]	; (800c0f4 <CheckAttachedButtons+0x328>)
 800bea6:	5c69      	ldrb	r1, [r5, r1]
 800bea8:	7946      	ldrb	r6, [r0, #5]
 800beaa:	2f02      	cmp	r7, #2
 800beac:	d100      	bne.n	800beb0 <CheckAttachedButtons+0xe4>
 800beae:	e092      	b.n	800bfd6 <CheckAttachedButtons+0x20a>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800beb0:	42b1      	cmp	r1, r6
 800beb2:	d900      	bls.n	800beb6 <CheckAttachedButtons+0xea>
 800beb4:	e139      	b.n	800c12a <CheckAttachedButtons+0x35e>
 800beb6:	4646      	mov	r6, r8
 800beb8:	3650      	adds	r6, #80	; 0x50
 800beba:	58b6      	ldr	r6, [r6, r2]
			if (pressCounter[i] < BOS.buttons.debounce) {
 800bebc:	8801      	ldrh	r1, [r0, #0]
 800bebe:	9603      	str	r6, [sp, #12]
 800bec0:	4299      	cmp	r1, r3
 800bec2:	d826      	bhi.n	800bf12 <CheckAttachedButtons+0x146>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800bec4:	d105      	bne.n	800bed2 <CheckAttachedButtons+0x106>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800bec6:	2707      	movs	r7, #7
 800bec8:	7267      	strb	r7, [r4, #9]
					++pressCounter[i];
 800beca:	4647      	mov	r7, r8
 800becc:	3301      	adds	r3, #1
 800bece:	3738      	adds	r7, #56	; 0x38
 800bed0:	50bb      	str	r3, [r7, r2]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800bed2:	9e03      	ldr	r6, [sp, #12]
 800bed4:	42b1      	cmp	r1, r6
 800bed6:	d205      	bcs.n	800bee4 <CheckAttachedButtons+0x118>
					releaseCounter[i] = 0;
 800bed8:	4646      	mov	r6, r8
 800beda:	2700      	movs	r7, #0
 800bedc:	3650      	adds	r6, #80	; 0x50
 800bede:	50b7      	str	r7, [r6, r2]
 800bee0:	2600      	movs	r6, #0
 800bee2:	9603      	str	r6, [sp, #12]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800bee4:	8847      	ldrh	r7, [r0, #2]
 800bee6:	9705      	str	r7, [sp, #20]
 800bee8:	429f      	cmp	r7, r3
 800beea:	d300      	bcc.n	800beee <CheckAttachedButtons+0x122>
 800beec:	e07a      	b.n	800bfe4 <CheckAttachedButtons+0x218>
						&& pressCounter[i] < 500) {
 800beee:	27f4      	movs	r7, #244	; 0xf4
 800bef0:	37ff      	adds	r7, #255	; 0xff
 800bef2:	42bb      	cmp	r3, r7
 800bef4:	d900      	bls.n	800bef8 <CheckAttachedButtons+0x12c>
 800bef6:	e075      	b.n	800bfe4 <CheckAttachedButtons+0x218>
					if (clicked == 0)
 800bef8:	464b      	mov	r3, r9
 800befa:	7f9b      	ldrb	r3, [r3, #30]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d100      	bne.n	800bf02 <CheckAttachedButtons+0x136>
 800bf00:	e1d8      	b.n	800c2b4 <CheckAttachedButtons+0x4e8>
					else if (clicked == 2) {
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	d105      	bne.n	800bf12 <CheckAttachedButtons+0x146>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800bf06:	4b7d      	ldr	r3, [pc, #500]	; (800c0fc <CheckAttachedButtons+0x330>)
 800bf08:	7907      	ldrb	r7, [r0, #4]
 800bf0a:	5ceb      	ldrb	r3, [r5, r3]
 800bf0c:	429f      	cmp	r7, r3
 800bf0e:	d200      	bcs.n	800bf12 <CheckAttachedButtons+0x146>
 800bf10:	e1dc      	b.n	800c2cc <CheckAttachedButtons+0x500>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800bf12:	9b03      	ldr	r3, [sp, #12]
 800bf14:	4299      	cmp	r1, r3
 800bf16:	d822      	bhi.n	800bf5e <CheckAttachedButtons+0x192>
 800bf18:	4643      	mov	r3, r8
 800bf1a:	8840      	ldrh	r0, [r0, #2]
 800bf1c:	3338      	adds	r3, #56	; 0x38
 800bf1e:	589b      	ldr	r3, [r3, r2]
 800bf20:	9005      	str	r0, [sp, #20]
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800bf22:	9803      	ldr	r0, [sp, #12]
 800bf24:	4281      	cmp	r1, r0
 800bf26:	d100      	bne.n	800bf2a <CheckAttachedButtons+0x15e>
 800bf28:	e19b      	b.n	800c262 <CheckAttachedButtons+0x496>
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	3050      	adds	r0, #80	; 0x50
 800bf2e:	5880      	ldr	r0, [r0, r2]
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800bf30:	4299      	cmp	r1, r3
 800bf32:	d203      	bcs.n	800bf3c <CheckAttachedButtons+0x170>
					pressCounter[i] = 0;
 800bf34:	4643      	mov	r3, r8
 800bf36:	2100      	movs	r1, #0
 800bf38:	3338      	adds	r3, #56	; 0x38
 800bf3a:	5099      	str	r1, [r3, r2]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800bf3c:	9b05      	ldr	r3, [sp, #20]
 800bf3e:	4283      	cmp	r3, r0
 800bf40:	d300      	bcc.n	800bf44 <CheckAttachedButtons+0x178>
 800bf42:	e091      	b.n	800c068 <CheckAttachedButtons+0x29c>
						&& releaseCounter[i] < 500) {
 800bf44:	23f4      	movs	r3, #244	; 0xf4
 800bf46:	33ff      	adds	r3, #255	; 0xff
 800bf48:	4298      	cmp	r0, r3
 800bf4a:	d900      	bls.n	800bf4e <CheckAttachedButtons+0x182>
 800bf4c:	e08c      	b.n	800c068 <CheckAttachedButtons+0x29c>
					if (clicked == 1) {
 800bf4e:	464b      	mov	r3, r9
 800bf50:	7f9b      	ldrb	r3, [r3, #30]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d100      	bne.n	800bf58 <CheckAttachedButtons+0x18c>
 800bf56:	e15c      	b.n	800c212 <CheckAttachedButtons+0x446>
					} else if (clicked == 3) {
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d100      	bne.n	800bf5e <CheckAttachedButtons+0x192>
 800bf5c:	e12d      	b.n	800c1ba <CheckAttachedButtons+0x3ee>
			switch (button[i].state) {
 800bf5e:	7a63      	ldrb	r3, [r4, #9]
 800bf60:	3b05      	subs	r3, #5
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	2b09      	cmp	r3, #9
 800bf66:	d808      	bhi.n	800bf7a <CheckAttachedButtons+0x1ae>
 800bf68:	4a65      	ldr	r2, [pc, #404]	; (800c100 <CheckAttachedButtons+0x334>)
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	58d3      	ldr	r3, [r2, r3]
 800bf6e:	469f      	mov	pc, r3
				buttonPressedCallback(i);
 800bf70:	4650      	mov	r0, sl
 800bf72:	f7ff fa01 	bl	800b378 <buttonPressedCallback>
				button[i].state = NONE;
 800bf76:	2300      	movs	r3, #0
 800bf78:	7263      	strb	r3, [r4, #9]
 800bf7a:	3501      	adds	r5, #1
 800bf7c:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800bf7e:	2d06      	cmp	r5, #6
 800bf80:	d000      	beq.n	800bf84 <CheckAttachedButtons+0x1b8>
 800bf82:	e733      	b.n	800bdec <CheckAttachedButtons+0x20>
}
 800bf84:	b00b      	add	sp, #44	; 0x2c
 800bf86:	bc3c      	pop	{r2, r3, r4, r5}
 800bf88:	4690      	mov	r8, r2
 800bf8a:	4699      	mov	r9, r3
 800bf8c:	46a2      	mov	sl, r4
 800bf8e:	46ab      	mov	fp, r5
 800bf90:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (button[i].type) {
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d000      	beq.n	800bf98 <CheckAttachedButtons+0x1cc>
 800bf96:	e0b7      	b.n	800c108 <CheckAttachedButtons+0x33c>
 800bf98:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800bf9a:	4658      	mov	r0, fp
 800bf9c:	00aa      	lsls	r2, r5, #2
 800bf9e:	3138      	adds	r1, #56	; 0x38
 800bfa0:	588b      	ldr	r3, [r1, r2]
 800bfa2:	2801      	cmp	r0, #1
 800bfa4:	d100      	bne.n	800bfa8 <CheckAttachedButtons+0x1dc>
 800bfa6:	e163      	b.n	800c270 <CheckAttachedButtons+0x4a4>
				else if (connected == GPIO_PIN_RESET)
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d000      	beq.n	800bfae <CheckAttachedButtons+0x1e2>
 800bfac:	e760      	b.n	800be70 <CheckAttachedButtons+0xa4>
				if (releaseCounter[i] < 0xFFFF)
 800bfae:	4640      	mov	r0, r8
 800bfb0:	2103      	movs	r1, #3
 800bfb2:	3050      	adds	r0, #80	; 0x50
 800bfb4:	9104      	str	r1, [sp, #16]
 800bfb6:	4e50      	ldr	r6, [pc, #320]	; (800c0f8 <CheckAttachedButtons+0x32c>)
 800bfb8:	5881      	ldr	r1, [r0, r2]
 800bfba:	42b1      	cmp	r1, r6
 800bfbc:	d800      	bhi.n	800bfc0 <CheckAttachedButtons+0x1f4>
 800bfbe:	e76c      	b.n	800be9a <CheckAttachedButtons+0xce>
					releaseCounter[i] = 0;		// Reset debounce counter
 800bfc0:	2100      	movs	r1, #0
				if (clicked == 2
 800bfc2:	464f      	mov	r7, r9
					releaseCounter[i] = 0;		// Reset debounce counter
 800bfc4:	5081      	str	r1, [r0, r2]
				if (clicked == 2
 800bfc6:	7fbf      	ldrb	r7, [r7, #30]
 800bfc8:	494c      	ldr	r1, [pc, #304]	; (800c0fc <CheckAttachedButtons+0x330>)
 800bfca:	484a      	ldr	r0, [pc, #296]	; (800c0f4 <CheckAttachedButtons+0x328>)
 800bfcc:	5c69      	ldrb	r1, [r5, r1]
 800bfce:	7946      	ldrb	r6, [r0, #5]
 800bfd0:	2f02      	cmp	r7, #2
 800bfd2:	d000      	beq.n	800bfd6 <CheckAttachedButtons+0x20a>
 800bfd4:	e76c      	b.n	800beb0 <CheckAttachedButtons+0xe4>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800bfd6:	42b1      	cmp	r1, r6
 800bfd8:	d900      	bls.n	800bfdc <CheckAttachedButtons+0x210>
 800bfda:	e0a6      	b.n	800c12a <CheckAttachedButtons+0x35e>
					++dblCounter[i];
 800bfdc:	4e47      	ldr	r6, [pc, #284]	; (800c0fc <CheckAttachedButtons+0x330>)
 800bfde:	3101      	adds	r1, #1
 800bfe0:	55a9      	strb	r1, [r5, r6]
 800bfe2:	e768      	b.n	800beb6 <CheckAttachedButtons+0xea>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800bfe4:	4f47      	ldr	r7, [pc, #284]	; (800c104 <CheckAttachedButtons+0x338>)
 800bfe6:	46bc      	mov	ip, r7
 800bfe8:	001f      	movs	r7, r3
 800bfea:	3ff5      	subs	r7, #245	; 0xf5
 800bfec:	3fff      	subs	r7, #255	; 0xff
 800bfee:	4567      	cmp	r7, ip
 800bff0:	d900      	bls.n	800bff4 <CheckAttachedButtons+0x228>
 800bff2:	e78e      	b.n	800bf12 <CheckAttachedButtons+0x146>
					if (clicked)
 800bff4:	464f      	mov	r7, r9
 800bff6:	7fbf      	ldrb	r7, [r7, #30]
 800bff8:	2f00      	cmp	r7, #0
 800bffa:	d002      	beq.n	800c002 <CheckAttachedButtons+0x236>
						clicked = 0;						// Cannot be a click
 800bffc:	2700      	movs	r7, #0
 800bffe:	464e      	mov	r6, r9
 800c000:	77b7      	strb	r7, [r6, #30]
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800c002:	7ae7      	ldrb	r7, [r4, #11]
 800c004:	46bc      	mov	ip, r7
	t1 *= 1000;
 800c006:	4666      	mov	r6, ip
 800c008:	017f      	lsls	r7, r7, #5
 800c00a:	1bbf      	subs	r7, r7, r6
 800c00c:	00bf      	lsls	r7, r7, #2
 800c00e:	4467      	add	r7, ip
 800c010:	00ff      	lsls	r7, r7, #3
	if (pressCounter[port] == t1) {
 800c012:	429f      	cmp	r7, r3
 800c014:	d100      	bne.n	800c018 <CheckAttachedButtons+0x24c>
 800c016:	e0e5      	b.n	800c1e4 <CheckAttachedButtons+0x418>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800c018:	7b26      	ldrb	r6, [r4, #12]
 800c01a:	46b4      	mov	ip, r6
	t2 *= 1000;
 800c01c:	0177      	lsls	r7, r6, #5
 800c01e:	1bbf      	subs	r7, r7, r6
 800c020:	00bf      	lsls	r7, r7, #2
 800c022:	4467      	add	r7, ip
 800c024:	00ff      	lsls	r7, r7, #3
	} else if (pressCounter[port] == t2) {
 800c026:	429f      	cmp	r7, r3
 800c028:	d009      	beq.n	800c03e <CheckAttachedButtons+0x272>
			t3 = button[port].pressedX3Sec;
 800c02a:	7b66      	ldrb	r6, [r4, #13]
 800c02c:	46b4      	mov	ip, r6
	t3 *= 1000;
 800c02e:	0177      	lsls	r7, r6, #5
 800c030:	1bbf      	subs	r7, r7, r6
 800c032:	00bf      	lsls	r7, r7, #2
 800c034:	4467      	add	r7, ip
 800c036:	00ff      	lsls	r7, r7, #3
	} else if (pressCounter[port] == t3) {
 800c038:	429f      	cmp	r7, r3
 800c03a:	d000      	beq.n	800c03e <CheckAttachedButtons+0x272>
 800c03c:	e769      	b.n	800bf12 <CheckAttachedButtons+0x146>
		button[port].state = PRESSED_FOR_X2_SEC;
 800c03e:	200a      	movs	r0, #10
 800c040:	7260      	strb	r0, [r4, #9]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800c042:	9803      	ldr	r0, [sp, #12]
 800c044:	4281      	cmp	r1, r0
 800c046:	d800      	bhi.n	800c04a <CheckAttachedButtons+0x27e>
 800c048:	e76b      	b.n	800bf22 <CheckAttachedButtons+0x156>
				if (!delayButtonStateReset
 800c04a:	464b      	mov	r3, r9
 800c04c:	7d1b      	ldrb	r3, [r3, #20]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d193      	bne.n	800bf7a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800c052:	7c63      	ldrb	r3, [r4, #17]
 800c054:	071b      	lsls	r3, r3, #28
 800c056:	d590      	bpl.n	800bf7a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c058:	2301      	movs	r3, #1
 800c05a:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800c05c:	2102      	movs	r1, #2
 800c05e:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c060:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800c062:	f7ff feaf 	bl	800bdc4 <buttonPressedForXCallback>
 800c066:	e788      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
				} else if (releaseCounter[i] >= 500
 800c068:	0003      	movs	r3, r0
 800c06a:	4a26      	ldr	r2, [pc, #152]	; (800c104 <CheckAttachedButtons+0x338>)
 800c06c:	3bf5      	subs	r3, #245	; 0xf5
 800c06e:	3bff      	subs	r3, #255	; 0xff
 800c070:	4293      	cmp	r3, r2
 800c072:	d900      	bls.n	800c076 <CheckAttachedButtons+0x2aa>
 800c074:	e773      	b.n	800bf5e <CheckAttachedButtons+0x192>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800c076:	7ba1      	ldrb	r1, [r4, #14]
	t1 *= 1000;
 800c078:	014b      	lsls	r3, r1, #5
 800c07a:	1a5b      	subs	r3, r3, r1
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	185b      	adds	r3, r3, r1
 800c080:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 800c082:	4283      	cmp	r3, r0
 800c084:	d100      	bne.n	800c088 <CheckAttachedButtons+0x2bc>
 800c086:	e0d9      	b.n	800c23c <CheckAttachedButtons+0x470>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800c088:	7be1      	ldrb	r1, [r4, #15]
	t2 *= 1000;
 800c08a:	014b      	lsls	r3, r1, #5
 800c08c:	1a5b      	subs	r3, r3, r1
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	185b      	adds	r3, r3, r1
 800c092:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t2) {
 800c094:	4283      	cmp	r3, r0
 800c096:	d008      	beq.n	800c0aa <CheckAttachedButtons+0x2de>
			t3 = button[port].releasedY3Sec;
 800c098:	7c21      	ldrb	r1, [r4, #16]
	t3 *= 1000;
 800c09a:	014b      	lsls	r3, r1, #5
 800c09c:	1a5b      	subs	r3, r3, r1
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	185b      	adds	r3, r3, r1
 800c0a2:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t3) {
 800c0a4:	4283      	cmp	r3, r0
 800c0a6:	d000      	beq.n	800c0aa <CheckAttachedButtons+0x2de>
 800c0a8:	e759      	b.n	800bf5e <CheckAttachedButtons+0x192>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800c0aa:	230d      	movs	r3, #13
 800c0ac:	7263      	strb	r3, [r4, #9]
				if (!delayButtonStateReset
 800c0ae:	464b      	mov	r3, r9
 800c0b0:	7d1b      	ldrb	r3, [r3, #20]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d000      	beq.n	800c0b8 <CheckAttachedButtons+0x2ec>
 800c0b6:	e760      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800c0b8:	7c63      	ldrb	r3, [r4, #17]
 800c0ba:	065b      	lsls	r3, r3, #25
 800c0bc:	d400      	bmi.n	800c0c0 <CheckAttachedButtons+0x2f4>
 800c0be:	e75c      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800c0c4:	2102      	movs	r1, #2
 800c0c6:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c0c8:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800c0ca:	f7ff fe7d 	bl	800bdc8 <buttonReleasedForYCallback>
 800c0ce:	e754      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800c0d0:	8831      	ldrh	r1, [r6, #0]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	9808      	ldr	r0, [sp, #32]
 800c0d6:	f004 fb6f 	bl	80107b8 <HAL_GPIO_WritePin>
				Delay_us(10);
 800c0da:	200a      	movs	r0, #10
 800c0dc:	f000 fcbe 	bl	800ca5c <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800c0e0:	8839      	ldrh	r1, [r7, #0]
 800c0e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0e4:	f004 fb62 	bl	80107ac <HAL_GPIO_ReadPin>
 800c0e8:	4683      	mov	fp, r0
 800c0ea:	e6a5      	b.n	800be38 <CheckAttachedButtons+0x6c>
 800c0ec:	200023d0 	.word	0x200023d0
 800c0f0:	20002450 	.word	0x20002450
 800c0f4:	20006874 	.word	0x20006874
 800c0f8:	0000fffe 	.word	0x0000fffe
 800c0fc:	20002468 	.word	0x20002468
 800c100:	08017344 	.word	0x08017344
 800c104:	0000fe0a 	.word	0x0000fe0a
 800c108:	4643      	mov	r3, r8
			if (state == CLOSED || state == ON) {
 800c10a:	9904      	ldr	r1, [sp, #16]
 800c10c:	3338      	adds	r3, #56	; 0x38
 800c10e:	00aa      	lsls	r2, r5, #2
 800c110:	589b      	ldr	r3, [r3, r2]
 800c112:	2904      	cmp	r1, #4
 800c114:	d000      	beq.n	800c118 <CheckAttachedButtons+0x34c>
 800c116:	e6af      	b.n	800be78 <CheckAttachedButtons+0xac>
				if (pressCounter[i] < 0xFFFF)
 800c118:	4972      	ldr	r1, [pc, #456]	; (800c2e4 <CheckAttachedButtons+0x518>)
 800c11a:	428b      	cmp	r3, r1
 800c11c:	d819      	bhi.n	800c152 <CheckAttachedButtons+0x386>
					++pressCounter[i];			// Advance the debounce counter
 800c11e:	4641      	mov	r1, r8
 800c120:	3301      	adds	r3, #1
 800c122:	3138      	adds	r1, #56	; 0x38
 800c124:	508b      	str	r3, [r1, r2]
 800c126:	4870      	ldr	r0, [pc, #448]	; (800c2e8 <CheckAttachedButtons+0x51c>)
 800c128:	e6c5      	b.n	800beb6 <CheckAttachedButtons+0xea>
					clicked = 0;
 800c12a:	2100      	movs	r1, #0
 800c12c:	464e      	mov	r6, r9
 800c12e:	77b1      	strb	r1, [r6, #30]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800c130:	4e6e      	ldr	r6, [pc, #440]	; (800c2ec <CheckAttachedButtons+0x520>)
 800c132:	55a9      	strb	r1, [r5, r6]
 800c134:	e6bf      	b.n	800beb6 <CheckAttachedButtons+0xea>
 800c136:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800c138:	4658      	mov	r0, fp
 800c13a:	00aa      	lsls	r2, r5, #2
 800c13c:	3138      	adds	r1, #56	; 0x38
 800c13e:	588b      	ldr	r3, [r1, r2]
 800c140:	2801      	cmp	r0, #1
 800c142:	d100      	bne.n	800c146 <CheckAttachedButtons+0x37a>
 800c144:	e09d      	b.n	800c282 <CheckAttachedButtons+0x4b6>
				else if (connected == GPIO_PIN_RESET)
 800c146:	2800      	cmp	r0, #0
 800c148:	d000      	beq.n	800c14c <CheckAttachedButtons+0x380>
 800c14a:	e691      	b.n	800be70 <CheckAttachedButtons+0xa4>
					state = OFF;
 800c14c:	2101      	movs	r1, #1
 800c14e:	9104      	str	r1, [sp, #16]
 800c150:	e69c      	b.n	800be8c <CheckAttachedButtons+0xc0>
					pressCounter[i] = 0;			// Reset debounce counter
 800c152:	4643      	mov	r3, r8
 800c154:	2100      	movs	r1, #0
 800c156:	3338      	adds	r3, #56	; 0x38
 800c158:	5099      	str	r1, [r3, r2]
 800c15a:	4863      	ldr	r0, [pc, #396]	; (800c2e8 <CheckAttachedButtons+0x51c>)
 800c15c:	2300      	movs	r3, #0
 800c15e:	e6aa      	b.n	800beb6 <CheckAttachedButtons+0xea>
				if (!delayButtonStateReset
 800c160:	464b      	mov	r3, r9
 800c162:	7d1b      	ldrb	r3, [r3, #20]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d000      	beq.n	800c16a <CheckAttachedButtons+0x39e>
 800c168:	e707      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800c16a:	7c63      	ldrb	r3, [r4, #17]
 800c16c:	06db      	lsls	r3, r3, #27
 800c16e:	d400      	bmi.n	800c172 <CheckAttachedButtons+0x3a6>
 800c170:	e703      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c172:	2301      	movs	r3, #1
 800c174:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800c176:	2103      	movs	r1, #3
 800c178:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c17a:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800c17c:	f7ff fe22 	bl	800bdc4 <buttonPressedForXCallback>
 800c180:	e6fb      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
				buttonReleasedCallback(i);
 800c182:	4650      	mov	r0, sl
 800c184:	f7ff fe18 	bl	800bdb8 <buttonReleasedCallback>
				button[i].state = NONE;
 800c188:	2300      	movs	r3, #0
 800c18a:	3501      	adds	r5, #1
 800c18c:	7263      	strb	r3, [r4, #9]
 800c18e:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800c190:	2d06      	cmp	r5, #6
 800c192:	d000      	beq.n	800c196 <CheckAttachedButtons+0x3ca>
 800c194:	e62a      	b.n	800bdec <CheckAttachedButtons+0x20>
 800c196:	e6f5      	b.n	800bf84 <CheckAttachedButtons+0x1b8>
				if (!delayButtonStateReset
 800c198:	464b      	mov	r3, r9
 800c19a:	7d1b      	ldrb	r3, [r3, #20]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d000      	beq.n	800c1a2 <CheckAttachedButtons+0x3d6>
 800c1a0:	e6eb      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800c1a2:	7c63      	ldrb	r3, [r4, #17]
 800c1a4:	2b7f      	cmp	r3, #127	; 0x7f
 800c1a6:	d800      	bhi.n	800c1aa <CheckAttachedButtons+0x3de>
 800c1a8:	e6e7      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800c1ae:	2103      	movs	r1, #3
 800c1b0:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c1b2:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800c1b4:	f7ff fe08 	bl	800bdc8 <buttonReleasedForYCallback>
 800c1b8:	e6df      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800c1ba:	3303      	adds	r3, #3
 800c1bc:	7263      	strb	r3, [r4, #9]
						clicked = 0;			// Prepare for a single click
 800c1be:	464a      	mov	r2, r9
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	7793      	strb	r3, [r2, #30]
				if (!delayButtonStateReset
 800c1c4:	464b      	mov	r3, r9
 800c1c6:	7d1b      	ldrb	r3, [r3, #20]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d000      	beq.n	800c1ce <CheckAttachedButtons+0x402>
 800c1cc:	e6d5      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800c1ce:	7c63      	ldrb	r3, [r4, #17]
 800c1d0:	079b      	lsls	r3, r3, #30
 800c1d2:	d400      	bmi.n	800c1d6 <CheckAttachedButtons+0x40a>
 800c1d4:	e6d1      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	464a      	mov	r2, r9
					buttonDblClickedCallback(i);
 800c1da:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c1dc:	7513      	strb	r3, [r2, #20]
					buttonDblClickedCallback(i);
 800c1de:	f7ff fdef 	bl	800bdc0 <buttonDblClickedCallback>
 800c1e2:	e6ca      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
		button[port].state = PRESSED_FOR_X1_SEC;
 800c1e4:	2009      	movs	r0, #9
 800c1e6:	7260      	strb	r0, [r4, #9]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800c1e8:	9803      	ldr	r0, [sp, #12]
 800c1ea:	4281      	cmp	r1, r0
 800c1ec:	d800      	bhi.n	800c1f0 <CheckAttachedButtons+0x424>
 800c1ee:	e698      	b.n	800bf22 <CheckAttachedButtons+0x156>
				if (!delayButtonStateReset
 800c1f0:	464b      	mov	r3, r9
 800c1f2:	7d1b      	ldrb	r3, [r3, #20]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d000      	beq.n	800c1fa <CheckAttachedButtons+0x42e>
 800c1f8:	e6bf      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800c1fa:	7c63      	ldrb	r3, [r4, #17]
 800c1fc:	075b      	lsls	r3, r3, #29
 800c1fe:	d400      	bmi.n	800c202 <CheckAttachedButtons+0x436>
 800c200:	e6bb      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c202:	2301      	movs	r3, #1
 800c204:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800c206:	2101      	movs	r1, #1
 800c208:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c20a:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800c20c:	f7ff fdda 	bl	800bdc4 <buttonPressedForXCallback>
 800c210:	e6b3      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
						clicked = 2;			// Prepare for a double click
 800c212:	464a      	mov	r2, r9
						button[i].state = CLICKED;// Record a single button click event
 800c214:	3304      	adds	r3, #4
 800c216:	7263      	strb	r3, [r4, #9]
						clicked = 2;			// Prepare for a double click
 800c218:	3b03      	subs	r3, #3
 800c21a:	7793      	strb	r3, [r2, #30]
				if (!delayButtonStateReset
 800c21c:	464b      	mov	r3, r9
 800c21e:	7d1b      	ldrb	r3, [r3, #20]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d000      	beq.n	800c226 <CheckAttachedButtons+0x45a>
 800c224:	e6a9      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800c226:	7c62      	ldrb	r2, [r4, #17]
 800c228:	3301      	adds	r3, #1
 800c22a:	4213      	tst	r3, r2
 800c22c:	d100      	bne.n	800c230 <CheckAttachedButtons+0x464>
 800c22e:	e6a4      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c230:	464a      	mov	r2, r9
					buttonClickedCallback(i);
 800c232:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c234:	7513      	strb	r3, [r2, #20]
					buttonClickedCallback(i);
 800c236:	f7ff fdc1 	bl	800bdbc <buttonClickedCallback>
 800c23a:	e69e      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800c23c:	230c      	movs	r3, #12
 800c23e:	7263      	strb	r3, [r4, #9]
				if (!delayButtonStateReset
 800c240:	464b      	mov	r3, r9
 800c242:	7d1b      	ldrb	r3, [r3, #20]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d000      	beq.n	800c24a <CheckAttachedButtons+0x47e>
 800c248:	e697      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800c24a:	7c63      	ldrb	r3, [r4, #17]
 800c24c:	069b      	lsls	r3, r3, #26
 800c24e:	d400      	bmi.n	800c252 <CheckAttachedButtons+0x486>
 800c250:	e693      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800c252:	2301      	movs	r3, #1
 800c254:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800c256:	2101      	movs	r1, #1
 800c258:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c25a:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800c25c:	f7ff fdb4 	bl	800bdc8 <buttonReleasedForYCallback>
 800c260:	e68b      	b.n	800bf7a <CheckAttachedButtons+0x1ae>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800c262:	2008      	movs	r0, #8
					++releaseCounter[i];
 800c264:	4646      	mov	r6, r8
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800c266:	7260      	strb	r0, [r4, #9]
					++releaseCounter[i];
 800c268:	3650      	adds	r6, #80	; 0x50
 800c26a:	1c48      	adds	r0, r1, #1
 800c26c:	50b0      	str	r0, [r6, r2]
 800c26e:	e65f      	b.n	800bf30 <CheckAttachedButtons+0x164>
				if (pressCounter[i] < 0xFFFF)
 800c270:	481c      	ldr	r0, [pc, #112]	; (800c2e4 <CheckAttachedButtons+0x518>)
 800c272:	4283      	cmp	r3, r0
 800c274:	d80e      	bhi.n	800c294 <CheckAttachedButtons+0x4c8>
					++pressCounter[i];			// Advance the debounce counter
 800c276:	3301      	adds	r3, #1
 800c278:	508b      	str	r3, [r1, r2]
 800c27a:	2104      	movs	r1, #4
 800c27c:	481a      	ldr	r0, [pc, #104]	; (800c2e8 <CheckAttachedButtons+0x51c>)
 800c27e:	9104      	str	r1, [sp, #16]
 800c280:	e619      	b.n	800beb6 <CheckAttachedButtons+0xea>
				if (pressCounter[i] < 0xFFFF)
 800c282:	4818      	ldr	r0, [pc, #96]	; (800c2e4 <CheckAttachedButtons+0x518>)
 800c284:	4283      	cmp	r3, r0
 800c286:	d919      	bls.n	800c2bc <CheckAttachedButtons+0x4f0>
					pressCounter[i] = 0;			// Reset debounce counter
 800c288:	2300      	movs	r3, #0
 800c28a:	508b      	str	r3, [r1, r2]
 800c28c:	2102      	movs	r1, #2
 800c28e:	4816      	ldr	r0, [pc, #88]	; (800c2e8 <CheckAttachedButtons+0x51c>)
 800c290:	9104      	str	r1, [sp, #16]
 800c292:	e610      	b.n	800beb6 <CheckAttachedButtons+0xea>
 800c294:	2300      	movs	r3, #0
 800c296:	508b      	str	r3, [r1, r2]
					state = CLOSED;
 800c298:	2104      	movs	r1, #4
 800c29a:	4813      	ldr	r0, [pc, #76]	; (800c2e8 <CheckAttachedButtons+0x51c>)
 800c29c:	9104      	str	r1, [sp, #16]
 800c29e:	e60a      	b.n	800beb6 <CheckAttachedButtons+0xea>
				if (pressCounter[i] < 0xFFFF)
 800c2a0:	4810      	ldr	r0, [pc, #64]	; (800c2e4 <CheckAttachedButtons+0x518>)
 800c2a2:	4283      	cmp	r3, r0
 800c2a4:	d90a      	bls.n	800c2bc <CheckAttachedButtons+0x4f0>
					pressCounter[i] = 0;			// Reset debounce counter
 800c2a6:	465b      	mov	r3, fp
 800c2a8:	508b      	str	r3, [r1, r2]
					state = ON;
 800c2aa:	2102      	movs	r1, #2
					pressCounter[i] = 0;			// Reset debounce counter
 800c2ac:	2300      	movs	r3, #0
					state = ON;
 800c2ae:	9104      	str	r1, [sp, #16]
 800c2b0:	480d      	ldr	r0, [pc, #52]	; (800c2e8 <CheckAttachedButtons+0x51c>)
 800c2b2:	e600      	b.n	800beb6 <CheckAttachedButtons+0xea>
						clicked = 1;		// Record a possible single click
 800c2b4:	464e      	mov	r6, r9
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	77b3      	strb	r3, [r6, #30]
 800c2ba:	e62a      	b.n	800bf12 <CheckAttachedButtons+0x146>
					state = ON;
 800c2bc:	2102      	movs	r1, #2
 800c2be:	9104      	str	r1, [sp, #16]
					++pressCounter[i];			// Advance the debounce counter
 800c2c0:	4641      	mov	r1, r8
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	3138      	adds	r1, #56	; 0x38
 800c2c6:	508b      	str	r3, [r1, r2]
 800c2c8:	4807      	ldr	r0, [pc, #28]	; (800c2e8 <CheckAttachedButtons+0x51c>)
 800c2ca:	e5f4      	b.n	800beb6 <CheckAttachedButtons+0xea>
								&& dblCounter[i]
 800c2cc:	7947      	ldrb	r7, [r0, #5]
 800c2ce:	429f      	cmp	r7, r3
 800c2d0:	d800      	bhi.n	800c2d4 <CheckAttachedButtons+0x508>
 800c2d2:	e61e      	b.n	800bf12 <CheckAttachedButtons+0x146>
							clicked = 3;	// Record a possible double click
 800c2d4:	2303      	movs	r3, #3
 800c2d6:	464e      	mov	r6, r9
 800c2d8:	77b3      	strb	r3, [r6, #30]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800c2da:	2300      	movs	r3, #0
 800c2dc:	4e03      	ldr	r6, [pc, #12]	; (800c2ec <CheckAttachedButtons+0x520>)
 800c2de:	55ab      	strb	r3, [r5, r6]
 800c2e0:	e617      	b.n	800bf12 <CheckAttachedButtons+0x146>
 800c2e2:	46c0      	nop			; (mov r8, r8)
 800c2e4:	0000fffe 	.word	0x0000fffe
 800c2e8:	20006874 	.word	0x20006874
 800c2ec:	20002468 	.word	0x20002468

0800c2f0 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800c2f0:	f3bf 8f4f 	dsb	sy
 800c2f4:	4b03      	ldr	r3, [pc, #12]	; (800c304 <NVIC_SystemReset+0x14>)
 800c2f6:	4a04      	ldr	r2, [pc, #16]	; (800c308 <NVIC_SystemReset+0x18>)
 800c2f8:	60da      	str	r2, [r3, #12]
 800c2fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800c2fe:	46c0      	nop			; (mov r8, r8)
 800c300:	e7fd      	b.n	800c2fe <NVIC_SystemReset+0xe>
 800c302:	46c0      	nop			; (mov r8, r8)
 800c304:	e000ed00 	.word	0xe000ed00
 800c308:	05fa0004 	.word	0x05fa0004

0800c30c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800c30c:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800c30e:	f002 fd83 	bl	800ee18 <HAL_IncTick>
  osSystickHandler();  
 800c312:	f000 ff57 	bl	800d1c4 <osSystickHandler>

}
 800c316:	bd10      	pop	{r4, pc}

0800c318 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800c318:	b530      	push	{r4, r5, lr}
	/* Loop here */
	uint8_t* error_message = "HardFault Error\r\n";
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800c31a:	24ff      	movs	r4, #255	; 0xff
 800c31c:	4d09      	ldr	r5, [pc, #36]	; (800c344 <HardFault_Handler+0x2c>)
{
 800c31e:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800c320:	7828      	ldrb	r0, [r5, #0]
 800c322:	23ff      	movs	r3, #255	; 0xff
 800c324:	2211      	movs	r2, #17
 800c326:	4908      	ldr	r1, [pc, #32]	; (800c348 <HardFault_Handler+0x30>)
 800c328:	9400      	str	r4, [sp, #0]
 800c32a:	f000 fd41 	bl	800cdb0 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800c32e:	4b07      	ldr	r3, [pc, #28]	; (800c34c <HardFault_Handler+0x34>)
 800c330:	7828      	ldrb	r0, [r5, #0]
 800c332:	6819      	ldr	r1, [r3, #0]
 800c334:	220f      	movs	r2, #15
 800c336:	23ff      	movs	r3, #255	; 0xff
 800c338:	9400      	str	r4, [sp, #0]
 800c33a:	f000 fd39 	bl	800cdb0 <writePxMutex>
	NVIC_SystemReset();
 800c33e:	f7ff ffd7 	bl	800c2f0 <NVIC_SystemReset>
 800c342:	46c0      	nop			; (mov r8, r8)
 800c344:	20000c38 	.word	0x20000c38
 800c348:	08019cb8 	.word	0x08019cb8
 800c34c:	200000b0 	.word	0x200000b0

0800c350 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800c350:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800c352:	4802      	ldr	r0, [pc, #8]	; (800c35c <USART1_IRQHandler+0xc>)
 800c354:	f005 fdd2 	bl	8011efc <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c358:	bd10      	pop	{r4, pc}
 800c35a:	46c0      	nop			; (mov r8, r8)
 800c35c:	20006ac0 	.word	0x20006ac0

0800c360 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800c360:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800c362:	4802      	ldr	r0, [pc, #8]	; (800c36c <USART2_IRQHandler+0xc>)
 800c364:	f005 fdca 	bl	8011efc <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c368:	bd10      	pop	{r4, pc}
 800c36a:	46c0      	nop			; (mov r8, r8)
 800c36c:	20006bb8 	.word	0x20006bb8

0800c370 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800c370:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800c372:	4805      	ldr	r0, [pc, #20]	; (800c388 <USART3_8_IRQHandler+0x18>)
 800c374:	f005 fdc2 	bl	8011efc <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800c378:	4804      	ldr	r0, [pc, #16]	; (800c38c <USART3_8_IRQHandler+0x1c>)
 800c37a:	f005 fdbf 	bl	8011efc <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800c37e:	4804      	ldr	r0, [pc, #16]	; (800c390 <USART3_8_IRQHandler+0x20>)
 800c380:	f005 fdbc 	bl	8011efc <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c384:	bd10      	pop	{r4, pc}
 800c386:	46c0      	nop			; (mov r8, r8)
 800c388:	20006998 	.word	0x20006998
 800c38c:	20006a50 	.word	0x20006a50
 800c390:	20006b40 	.word	0x20006b40

0800c394 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800c394:	4b0c      	ldr	r3, [pc, #48]	; (800c3c8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
{
 800c396:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	2310      	movs	r3, #16
 800c39c:	4213      	tst	r3, r2
 800c39e:	d10e      	bne.n	800c3be <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800c3a0:	4a0a      	ldr	r2, [pc, #40]	; (800c3cc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800c3a2:	6811      	ldr	r1, [r2, #0]
 800c3a4:	05c9      	lsls	r1, r1, #23
 800c3a6:	d406      	bmi.n	800c3b6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800c3a8:	6812      	ldr	r2, [r2, #0]
 800c3aa:	4213      	tst	r3, r2
 800c3ac:	d002      	beq.n	800c3b4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800c3ae:	4808      	ldr	r0, [pc, #32]	; (800c3d0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800c3b0:	f003 fa80 	bl	800f8b4 <HAL_DMA_IRQHandler>
	}
}
 800c3b4:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800c3b6:	2002      	movs	r0, #2
 800c3b8:	f7fa ffc4 	bl	8007344 <DMA_IRQHandler>
 800c3bc:	e7fa      	b.n	800c3b4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		DMA_IRQHandler(P5);
 800c3be:	2005      	movs	r0, #5
 800c3c0:	f7fa ffc0 	bl	8007344 <DMA_IRQHandler>
 800c3c4:	e7f6      	b.n	800c3b4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
 800c3c6:	46c0      	nop			; (mov r8, r8)
 800c3c8:	40020400 	.word	0x40020400
 800c3cc:	40020000 	.word	0x40020000
 800c3d0:	200021d4 	.word	0x200021d4

0800c3d4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800c3d4:	4b12      	ldr	r3, [pc, #72]	; (800c420 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
{
 800c3d6:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	03d2      	lsls	r2, r2, #15
 800c3dc:	d414      	bmi.n	800c408 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	02d2      	lsls	r2, r2, #11
 800c3e2:	d40d      	bmi.n	800c400 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800c3e4:	4a0f      	ldr	r2, [pc, #60]	; (800c424 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800c3e6:	6812      	ldr	r2, [r2, #0]
 800c3e8:	05d2      	lsls	r2, r2, #23
 800c3ea:	d411      	bmi.n	800c410 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	04d2      	lsls	r2, r2, #19
 800c3f0:	d412      	bmi.n	800c418 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	01db      	lsls	r3, r3, #7
 800c3f6:	d506      	bpl.n	800c406 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800c3f8:	480b      	ldr	r0, [pc, #44]	; (800c428 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800c3fa:	f003 fa5b 	bl	800f8b4 <HAL_DMA_IRQHandler>
	}
}
 800c3fe:	e002      	b.n	800c406 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800c400:	2004      	movs	r0, #4
 800c402:	f7fa ff9f 	bl	8007344 <DMA_IRQHandler>
}
 800c406:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800c408:	2003      	movs	r0, #3
 800c40a:	f7fa ff9b 	bl	8007344 <DMA_IRQHandler>
 800c40e:	e7fa      	b.n	800c406 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800c410:	2006      	movs	r0, #6
 800c412:	f7fa ff97 	bl	8007344 <DMA_IRQHandler>
 800c416:	e7f6      	b.n	800c406 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800c418:	4804      	ldr	r0, [pc, #16]	; (800c42c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800c41a:	f003 fa4b 	bl	800f8b4 <HAL_DMA_IRQHandler>
 800c41e:	e7f2      	b.n	800c406 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800c420:	40020000 	.word	0x40020000
 800c424:	40020400 	.word	0x40020400
 800c428:	20002244 	.word	0x20002244
 800c42c:	2000220c 	.word	0x2000220c

0800c430 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800c430:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800c432:	4802      	ldr	r0, [pc, #8]	; (800c43c <ADC1_COMP_IRQHandler+0xc>)
 800c434:	f002 ff36 	bl	800f2a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800c438:	bd10      	pop	{r4, pc}
 800c43a:	46c0      	nop			; (mov r8, r8)
 800c43c:	20006c50 	.word	0x20006c50

0800c440 <HAL_UART_TxCpltCallback>:
/*-----------------------------------------------------------*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800c440:	2300      	movs	r3, #0
{
 800c442:	b510      	push	{r4, lr}
 800c444:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800c446:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800c448:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 800c44a:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d001      	beq.n	800c454 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800c450:	f7fd ff66 	bl	800a320 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800c454:	0020      	movs	r0, r4
 800c456:	f7fd fc7d 	bl	8009d54 <GetPort>
 800c45a:	4b04      	ldr	r3, [pc, #16]	; (800c46c <HAL_UART_TxCpltCallback+0x2c>)
 800c45c:	0080      	lsls	r0, r0, #2
 800c45e:	58c0      	ldr	r0, [r0, r3]
 800c460:	a901      	add	r1, sp, #4
 800c462:	f001 f9e7 	bl	800d834 <xQueueGiveFromISR>
}
 800c466:	b002      	add	sp, #8
 800c468:	bd10      	pop	{r4, pc}
 800c46a:	46c0      	nop			; (mov r8, r8)
 800c46c:	200068f8 	.word	0x200068f8

0800c470 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c470:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800c472:	2369      	movs	r3, #105	; 0x69
 800c474:	2501      	movs	r5, #1
 800c476:	54c5      	strb	r5, [r0, r3]
{
 800c478:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800c47a:	f7fd fc6b 	bl	8009d54 <GetPort>
	if (portStatus[port] == STREAM) {
 800c47e:	4b0b      	ldr	r3, [pc, #44]	; (800c4ac <HAL_UART_ErrorCallback+0x3c>)
 800c480:	5c1b      	ldrb	r3, [r3, r0]
 800c482:	2b02      	cmp	r3, #2
 800c484:	d004      	beq.n	800c490 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800c486:	4b0a      	ldr	r3, [pc, #40]	; (800c4b0 <HAL_UART_ErrorCallback+0x40>)
 800c488:	1818      	adds	r0, r3, r0
 800c48a:	3801      	subs	r0, #1
 800c48c:	7005      	strb	r5, [r0, #0]
	}	
}
 800c48e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800c490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c492:	3801      	subs	r0, #1
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	0080      	lsls	r0, r0, #2
 800c498:	685a      	ldr	r2, [r3, #4]
 800c49a:	4b06      	ldr	r3, [pc, #24]	; (800c4b4 <HAL_UART_ErrorCallback+0x44>)
 800c49c:	b292      	uxth	r2, r2
 800c49e:	58c3      	ldr	r3, [r0, r3]
 800c4a0:	0020      	movs	r0, r4
 800c4a2:	6819      	ldr	r1, [r3, #0]
 800c4a4:	3128      	adds	r1, #40	; 0x28
 800c4a6:	f005 f9a9 	bl	80117fc <HAL_UART_Receive_DMA>
 800c4aa:	e7f0      	b.n	800c48e <HAL_UART_ErrorCallback+0x1e>
 800c4ac:	20000c3c 	.word	0x20000c3c
 800c4b0:	2000189c 	.word	0x2000189c
 800c4b4:	20001860 	.word	0x20001860

0800c4b8 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800c4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ba:	46de      	mov	lr, fp
 800c4bc:	464e      	mov	r6, r9
 800c4be:	4645      	mov	r5, r8
 800c4c0:	4657      	mov	r7, sl
 800c4c2:	b5e0      	push	{r5, r6, r7, lr}
 800c4c4:	b085      	sub	sp, #20
 800c4c6:	0004      	movs	r4, r0
	uint8_t port_number = GetPort(huart);
 800c4c8:	f7fd fc44 	bl	8009d54 <GetPort>
	uint8_t port_index = port_number - 1;
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c4cc:	4e60      	ldr	r6, [pc, #384]	; (800c650 <HAL_UART_RxCpltCallback+0x198>)
	uint8_t port_index = port_number - 1;
 800c4ce:	1e43      	subs	r3, r0, #1
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	4a60      	ldr	r2, [pc, #384]	; (800c654 <HAL_UART_RxCpltCallback+0x19c>)
 800c4d4:	5cf5      	ldrb	r5, [r6, r3]
 800c4d6:	5c11      	ldrb	r1, [r2, r0]
 800c4d8:	2d0d      	cmp	r5, #13
 800c4da:	d00a      	beq.n	800c4f2 <HAL_UART_RxCpltCallback+0x3a>

		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
		Activate_CLI_For_First_Time_Flag = 1;

	}
	else if(portStatus[port_number] == CLI)
 800c4dc:	2903      	cmp	r1, #3
 800c4de:	d00c      	beq.n	800c4fa <HAL_UART_RxCpltCallback+0x42>
	{
		Read_In_CLI_Task_Flag = 1;
	}

	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800c4e0:	2d48      	cmp	r5, #72	; 0x48
 800c4e2:	d066      	beq.n	800c5b2 <HAL_UART_RxCpltCallback+0xfa>
	{
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
	}

	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800c4e4:	2d5a      	cmp	r5, #90	; 0x5a
 800c4e6:	d11b      	bne.n	800c520 <HAL_UART_RxCpltCallback+0x68>
 800c4e8:	2907      	cmp	r1, #7
 800c4ea:	d11b      	bne.n	800c524 <HAL_UART_RxCpltCallback+0x6c>
	{
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 800c4ec:	2308      	movs	r3, #8
 800c4ee:	5413      	strb	r3, [r2, r0]
 800c4f0:	e006      	b.n	800c500 <HAL_UART_RxCpltCallback+0x48>
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c4f2:	2900      	cmp	r1, #0
 800c4f4:	d046      	beq.n	800c584 <HAL_UART_RxCpltCallback+0xcc>
	else if(portStatus[port_number] == CLI)
 800c4f6:	2903      	cmp	r1, #3
 800c4f8:	d112      	bne.n	800c520 <HAL_UART_RxCpltCallback+0x68>
		Read_In_CLI_Task_Flag = 1;
 800c4fa:	4b57      	ldr	r3, [pc, #348]	; (800c658 <HAL_UART_RxCpltCallback+0x1a0>)
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	701a      	strb	r2, [r3, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
			portStatus[port_number] =FREE; // End of receiving message.
		}
	}

		HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800c500:	0020      	movs	r0, r4
 800c502:	f7fd fc27 	bl	8009d54 <GetPort>
 800c506:	1e41      	subs	r1, r0, #1
 800c508:	1871      	adds	r1, r6, r1
 800c50a:	2201      	movs	r2, #1
 800c50c:	0020      	movs	r0, r4
 800c50e:	f005 f975 	bl	80117fc <HAL_UART_Receive_DMA>
}
 800c512:	b005      	add	sp, #20
 800c514:	bc3c      	pop	{r2, r3, r4, r5}
 800c516:	4690      	mov	r8, r2
 800c518:	4699      	mov	r9, r3
 800c51a:	46a2      	mov	sl, r4
 800c51c:	46ab      	mov	fp, r5
 800c51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(Rx_Data[port_index] != 'Z' && portStatus[port_number] == H_Status)
 800c520:	2907      	cmp	r1, #7
 800c522:	d07b      	beq.n	800c61c <HAL_UART_RxCpltCallback+0x164>
	else if(portStatus[port_number] == Z_Status)
 800c524:	2908      	cmp	r1, #8
 800c526:	d07c      	beq.n	800c622 <HAL_UART_RxCpltCallback+0x16a>
	else if(portStatus[port_number] == MSG)
 800c528:	2901      	cmp	r1, #1
 800c52a:	d1e9      	bne.n	800c500 <HAL_UART_RxCpltCallback+0x48>
 800c52c:	4f4b      	ldr	r7, [pc, #300]	; (800c65c <HAL_UART_RxCpltCallback+0x1a4>)
		if(temp_length[port_index] > 1)
 800c52e:	494b      	ldr	r1, [pc, #300]	; (800c65c <HAL_UART_RxCpltCallback+0x1a4>)
 800c530:	5cff      	ldrb	r7, [r7, r3]
 800c532:	18c9      	adds	r1, r1, r3
 800c534:	46b9      	mov	r9, r7
 800c536:	2701      	movs	r7, #1
 800c538:	444f      	add	r7, r9
 800c53a:	b2ff      	uxtb	r7, r7
 800c53c:	4688      	mov	r8, r1
 800c53e:	7a09      	ldrb	r1, [r1, #8]
 800c540:	9702      	str	r7, [sp, #8]
 800c542:	2701      	movs	r7, #1
 800c544:	468c      	mov	ip, r1
 800c546:	427f      	negs	r7, r7
 800c548:	4467      	add	r7, ip
 800c54a:	b2ff      	uxtb	r7, r7
 800c54c:	9701      	str	r7, [sp, #4]
 800c54e:	4667      	mov	r7, ip
 800c550:	4943      	ldr	r1, [pc, #268]	; (800c660 <HAL_UART_RxCpltCallback+0x1a8>)
 800c552:	468a      	mov	sl, r1
 800c554:	5cc9      	ldrb	r1, [r1, r3]
 800c556:	9100      	str	r1, [sp, #0]
 800c558:	2f01      	cmp	r7, #1
 800c55a:	d92f      	bls.n	800c5bc <HAL_UART_RxCpltCallback+0x104>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800c55c:	00ca      	lsls	r2, r1, #3
 800c55e:	1a52      	subs	r2, r2, r1
 800c560:	4694      	mov	ip, r2
 800c562:	0099      	lsls	r1, r3, #2
 800c564:	18c9      	adds	r1, r1, r3
 800c566:	00ca      	lsls	r2, r1, #3
 800c568:	1a51      	subs	r1, r2, r1
 800c56a:	4461      	add	r1, ip
 800c56c:	4a3d      	ldr	r2, [pc, #244]	; (800c664 <HAL_UART_RxCpltCallback+0x1ac>)
 800c56e:	00c9      	lsls	r1, r1, #3
 800c570:	1851      	adds	r1, r2, r1
 800c572:	464a      	mov	r2, r9
			temp_index[port_index]++;
 800c574:	9f02      	ldr	r7, [sp, #8]
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800c576:	548d      	strb	r5, [r1, r2]
			temp_index[port_index]++;
 800c578:	4a38      	ldr	r2, [pc, #224]	; (800c65c <HAL_UART_RxCpltCallback+0x1a4>)
 800c57a:	54d7      	strb	r7, [r2, r3]
			temp_length[port_index]--;
 800c57c:	4643      	mov	r3, r8
 800c57e:	9f01      	ldr	r7, [sp, #4]
 800c580:	721f      	strb	r7, [r3, #8]
 800c582:	e7bd      	b.n	800c500 <HAL_UART_RxCpltCallback+0x48>
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800c584:	2303      	movs	r3, #3
		for(int i=0;i<=NumOfPorts;i++) portStatus[i] = FREE; // Free all ports
 800c586:	7011      	strb	r1, [r2, #0]
 800c588:	7051      	strb	r1, [r2, #1]
 800c58a:	7091      	strb	r1, [r2, #2]
 800c58c:	70d1      	strb	r1, [r2, #3]
 800c58e:	7111      	strb	r1, [r2, #4]
 800c590:	7151      	strb	r1, [r2, #5]
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800c592:	5413      	strb	r3, [r2, r0]
		PcPort = port_number;
 800c594:	4b34      	ldr	r3, [pc, #208]	; (800c668 <HAL_UART_RxCpltCallback+0x1b0>)
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800c596:	2202      	movs	r2, #2
		PcPort = port_number;
 800c598:	7018      	strb	r0, [r3, #0]
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800c59a:	4b34      	ldr	r3, [pc, #208]	; (800c66c <HAL_UART_RxCpltCallback+0x1b4>)
 800c59c:	6818      	ldr	r0, [r3, #0]
 800c59e:	2300      	movs	r3, #0
 800c5a0:	f002 f898 	bl	800e6d4 <xTaskGenericNotify>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800c5a4:	4b32      	ldr	r3, [pc, #200]	; (800c670 <HAL_UART_RxCpltCallback+0x1b8>)
 800c5a6:	781a      	ldrb	r2, [r3, #0]
 800c5a8:	2a01      	cmp	r2, #1
 800c5aa:	d1a7      	bne.n	800c4fc <HAL_UART_RxCpltCallback+0x44>
 800c5ac:	492a      	ldr	r1, [pc, #168]	; (800c658 <HAL_UART_RxCpltCallback+0x1a0>)
 800c5ae:	700a      	strb	r2, [r1, #0]
 800c5b0:	e7a4      	b.n	800c4fc <HAL_UART_RxCpltCallback+0x44>
	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800c5b2:	2900      	cmp	r1, #0
 800c5b4:	d1b4      	bne.n	800c520 <HAL_UART_RxCpltCallback+0x68>
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800c5b6:	2307      	movs	r3, #7
 800c5b8:	5413      	strb	r3, [r2, r0]
 800c5ba:	e7a1      	b.n	800c500 <HAL_UART_RxCpltCallback+0x48>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800c5bc:	9900      	ldr	r1, [sp, #0]
 800c5be:	00cf      	lsls	r7, r1, #3
 800c5c0:	1a7f      	subs	r7, r7, r1
 800c5c2:	9703      	str	r7, [sp, #12]
 800c5c4:	009f      	lsls	r7, r3, #2
 800c5c6:	46bb      	mov	fp, r7
 800c5c8:	449b      	add	fp, r3
 800c5ca:	465f      	mov	r7, fp
 800c5cc:	4659      	mov	r1, fp
 800c5ce:	00ff      	lsls	r7, r7, #3
 800c5d0:	1a7f      	subs	r7, r7, r1
 800c5d2:	46bc      	mov	ip, r7
 800c5d4:	9f03      	ldr	r7, [sp, #12]
 800c5d6:	46bb      	mov	fp, r7
 800c5d8:	44dc      	add	ip, fp
 800c5da:	4661      	mov	r1, ip
 800c5dc:	00c9      	lsls	r1, r1, #3
 800c5de:	468c      	mov	ip, r1
 800c5e0:	4920      	ldr	r1, [pc, #128]	; (800c664 <HAL_UART_RxCpltCallback+0x1ac>)
 800c5e2:	464f      	mov	r7, r9
 800c5e4:	468b      	mov	fp, r1
 800c5e6:	44dc      	add	ip, fp
 800c5e8:	4661      	mov	r1, ip
 800c5ea:	55cd      	strb	r5, [r1, r7]
			temp_index[port_index]++;
 800c5ec:	9902      	ldr	r1, [sp, #8]
 800c5ee:	4d1b      	ldr	r5, [pc, #108]	; (800c65c <HAL_UART_RxCpltCallback+0x1a4>)
 800c5f0:	54e9      	strb	r1, [r5, r3]
			temp_length[port_index]--;
 800c5f2:	4641      	mov	r1, r8
 800c5f4:	9d01      	ldr	r5, [sp, #4]
 800c5f6:	720d      	strb	r5, [r1, #8]
			MSG_Buffer_Index_End[port_index]++;
 800c5f8:	9900      	ldr	r1, [sp, #0]
 800c5fa:	3101      	adds	r1, #1
 800c5fc:	b2c9      	uxtb	r1, r1
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800c5fe:	2905      	cmp	r1, #5
 800c600:	d100      	bne.n	800c604 <HAL_UART_RxCpltCallback+0x14c>
 800c602:	2100      	movs	r1, #0
 800c604:	4655      	mov	r5, sl
 800c606:	54e9      	strb	r1, [r5, r3]
			Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800c608:	491a      	ldr	r1, [pc, #104]	; (800c674 <HAL_UART_RxCpltCallback+0x1bc>)
 800c60a:	4d1b      	ldr	r5, [pc, #108]	; (800c678 <HAL_UART_RxCpltCallback+0x1c0>)
 800c60c:	780b      	ldrb	r3, [r1, #0]
 800c60e:	54e8      	strb	r0, [r5, r3]
			Process_Message_Buffer_Index_End++;
 800c610:	3301      	adds	r3, #1
 800c612:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800c614:	2b05      	cmp	r3, #5
 800c616:	d100      	bne.n	800c61a <HAL_UART_RxCpltCallback+0x162>
 800c618:	2300      	movs	r3, #0
 800c61a:	700b      	strb	r3, [r1, #0]
			portStatus[port_number] =FREE; // End of receiving message.
 800c61c:	2300      	movs	r3, #0
 800c61e:	5413      	strb	r3, [r2, r0]
 800c620:	e76e      	b.n	800c500 <HAL_UART_RxCpltCallback+0x48>
		portStatus[port_number] =MSG; // Receive length byte.
 800c622:	3907      	subs	r1, #7
 800c624:	5411      	strb	r1, [r2, r0]
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800c626:	4a0e      	ldr	r2, [pc, #56]	; (800c660 <HAL_UART_RxCpltCallback+0x1a8>)
 800c628:	5cd7      	ldrb	r7, [r2, r3]
 800c62a:	00fa      	lsls	r2, r7, #3
 800c62c:	1bd7      	subs	r7, r2, r7
 800c62e:	009a      	lsls	r2, r3, #2
 800c630:	18d2      	adds	r2, r2, r3
 800c632:	00d1      	lsls	r1, r2, #3
 800c634:	1a8a      	subs	r2, r1, r2
 800c636:	19d2      	adds	r2, r2, r7
 800c638:	490a      	ldr	r1, [pc, #40]	; (800c664 <HAL_UART_RxCpltCallback+0x1ac>)
 800c63a:	00d2      	lsls	r2, r2, #3
 800c63c:	188a      	adds	r2, r1, r2
		temp_index[port_index] = 3;
 800c63e:	2103      	movs	r1, #3
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800c640:	7095      	strb	r5, [r2, #2]
		temp_index[port_index] = 3;
 800c642:	4a06      	ldr	r2, [pc, #24]	; (800c65c <HAL_UART_RxCpltCallback+0x1a4>)
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800c644:	3501      	adds	r5, #1
		temp_index[port_index] = 3;
 800c646:	54d1      	strb	r1, [r2, r3]
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800c648:	18d3      	adds	r3, r2, r3
 800c64a:	721d      	strb	r5, [r3, #8]
 800c64c:	e758      	b.n	800c500 <HAL_UART_RxCpltCallback+0x48>
 800c64e:	46c0      	nop			; (mov r8, r8)
 800c650:	20001ca4 	.word	0x20001ca4
 800c654:	20000c3c 	.word	0x20000c3c
 800c658:	200016e1 	.word	0x200016e1
 800c65c:	20002470 	.word	0x20002470
 800c660:	200016d4 	.word	0x200016d4
 800c664:	2000115c 	.word	0x2000115c
 800c668:	20000c38 	.word	0x20000c38
 800c66c:	20001cb8 	.word	0x20001cb8
 800c670:	200016e2 	.word	0x200016e2
 800c674:	2000114f 	.word	0x2000114f
 800c678:	20001154 	.word	0x20001154

0800c67c <vApplicationStackOverflowHook>:

/*-----------------------------------------------------------*/
/* Run time stack overflow checking is performed if
 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 function is called if a stack overflow is detected. */
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800c67c:	b530      	push	{r4, r5, lr}
	(void )pcTaskName;
	(void )pxTask;
	uint8_t* error_message = "Stack Overflow\r\n";
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800c67e:	24ff      	movs	r4, #255	; 0xff
 800c680:	4d09      	ldr	r5, [pc, #36]	; (800c6a8 <vApplicationStackOverflowHook+0x2c>)
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800c682:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800c684:	7828      	ldrb	r0, [r5, #0]
 800c686:	23ff      	movs	r3, #255	; 0xff
 800c688:	2210      	movs	r2, #16
 800c68a:	4908      	ldr	r1, [pc, #32]	; (800c6ac <vApplicationStackOverflowHook+0x30>)
 800c68c:	9400      	str	r4, [sp, #0]
 800c68e:	f000 fb8f 	bl	800cdb0 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800c692:	4b07      	ldr	r3, [pc, #28]	; (800c6b0 <vApplicationStackOverflowHook+0x34>)
 800c694:	7828      	ldrb	r0, [r5, #0]
 800c696:	6819      	ldr	r1, [r3, #0]
 800c698:	220f      	movs	r2, #15
 800c69a:	23ff      	movs	r3, #255	; 0xff
 800c69c:	9400      	str	r4, [sp, #0]
 800c69e:	f000 fb87 	bl	800cdb0 <writePxMutex>
	NVIC_SystemReset();
 800c6a2:	f7ff fe25 	bl	800c2f0 <NVIC_SystemReset>
 800c6a6:	46c0      	nop			; (mov r8, r8)
 800c6a8:	20000c38 	.word	0x20000c38
 800c6ac:	08019ccc 	.word	0x08019ccc
 800c6b0:	200000b0 	.word	0x200000b0

0800c6b4 <vApplicationMallocFailedHook>:
	 demo application.  If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
	void vApplicationMallocFailedHook(void){
 800c6b4:	b530      	push	{r4, r5, lr}
		uint8_t* error_message = "Heap size exceeded\r\n";
		writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800c6b6:	24ff      	movs	r4, #255	; 0xff
 800c6b8:	4d09      	ldr	r5, [pc, #36]	; (800c6e0 <vApplicationMallocFailedHook+0x2c>)
	void vApplicationMallocFailedHook(void){
 800c6ba:	b083      	sub	sp, #12
		writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800c6bc:	7828      	ldrb	r0, [r5, #0]
 800c6be:	23ff      	movs	r3, #255	; 0xff
 800c6c0:	2214      	movs	r2, #20
 800c6c2:	4908      	ldr	r1, [pc, #32]	; (800c6e4 <vApplicationMallocFailedHook+0x30>)
 800c6c4:	9400      	str	r4, [sp, #0]
 800c6c6:	f000 fb73 	bl	800cdb0 <writePxMutex>
		writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800c6ca:	4b07      	ldr	r3, [pc, #28]	; (800c6e8 <vApplicationMallocFailedHook+0x34>)
 800c6cc:	7828      	ldrb	r0, [r5, #0]
 800c6ce:	6819      	ldr	r1, [r3, #0]
 800c6d0:	220f      	movs	r2, #15
 800c6d2:	23ff      	movs	r3, #255	; 0xff
 800c6d4:	9400      	str	r4, [sp, #0]
 800c6d6:	f000 fb6b 	bl	800cdb0 <writePxMutex>
		NVIC_SystemReset();
 800c6da:	f7ff fe09 	bl	800c2f0 <NVIC_SystemReset>
 800c6de:	46c0      	nop			; (mov r8, r8)
 800c6e0:	20000c38 	.word	0x20000c38
 800c6e4:	08019ce0 	.word	0x08019ce0
 800c6e8:	200000b0 	.word	0x200000b0

0800c6ec <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800c6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ee:	46de      	mov	lr, fp
 800c6f0:	464e      	mov	r6, r9
 800c6f2:	4645      	mov	r5, r8
 800c6f4:	4657      	mov	r7, sl
 800c6f6:	b5e0      	push	{r5, r6, r7, lr}
 800c6f8:	b08d      	sub	sp, #52	; 0x34
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c6fa:	ae04      	add	r6, sp, #16
 800c6fc:	0032      	movs	r2, r6
 800c6fe:	4b34      	ldr	r3, [pc, #208]	; (800c7d0 <RTC_CalendarConfig+0xe4>)
 800c700:	cb13      	ldmia	r3!, {r0, r1, r4}
 800c702:	c213      	stmia	r2!, {r0, r1, r4}
 800c704:	ab01      	add	r3, sp, #4
 800c706:	4698      	mov	r8, r3
 800c708:	4642      	mov	r2, r8
 800c70a:	4b32      	ldr	r3, [pc, #200]	; (800c7d4 <RTC_CalendarConfig+0xe8>)
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
  *(comDate + 6) = 0;
 800c70c:	2400      	movs	r4, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c70e:	cb03      	ldmia	r3!, {r0, r1}
 800c710:	c203      	stmia	r2!, {r0, r1}
  year = atoi(comDate + 9);		// only last 2 digits
 800c712:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c714:	781b      	ldrb	r3, [r3, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800c716:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c718:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800c71a:	f005 fc7e 	bl	801201a <atoi>
 800c71e:	b2c3      	uxtb	r3, r0
  day = atoi(comDate + 4);
 800c720:	a805      	add	r0, sp, #20
  year = atoi(comDate + 9);		// only last 2 digits
 800c722:	469a      	mov	sl, r3
  *(comDate + 6) = 0;
 800c724:	71b4      	strb	r4, [r6, #6]
  day = atoi(comDate + 4);
 800c726:	f005 fc78 	bl	801201a <atoi>
 800c72a:	b2c3      	uxtb	r3, r0
 800c72c:	4699      	mov	r9, r3
 800c72e:	4d2a      	ldr	r5, [pc, #168]	; (800c7d8 <RTC_CalendarConfig+0xec>)
  *(comDate + 3) = 0;
 800c730:	70f4      	strb	r4, [r6, #3]
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800c732:	6829      	ldr	r1, [r5, #0]
 800c734:	0030      	movs	r0, r6
 800c736:	f7f3 fce5 	bl	8000104 <strcmp>
 800c73a:	3401      	adds	r4, #1
 800c73c:	b2e4      	uxtb	r4, r4
 800c73e:	2800      	cmp	r0, #0
 800c740:	d100      	bne.n	800c744 <RTC_CalendarConfig+0x58>
 800c742:	0027      	movs	r7, r4
 800c744:	3504      	adds	r5, #4
  for (uint8_t i = 0; i < 12; i++)
 800c746:	2c0c      	cmp	r4, #12
 800c748:	d1f3      	bne.n	800c732 <RTC_CalendarConfig+0x46>
			month = i + 1;
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800c74a:	200a      	movs	r0, #10
 800c74c:	4468      	add	r0, sp
 800c74e:	f005 fc64 	bl	801201a <atoi>
	*(comDate + 5) = 0;
 800c752:	2300      	movs	r3, #0
 800c754:	7173      	strb	r3, [r6, #5]
 800c756:	469b      	mov	fp, r3
	minutes = atoi(comTime + 3);
 800c758:	466b      	mov	r3, sp
	seconds = atoi(comTime + 6);
 800c75a:	0004      	movs	r4, r0
	minutes = atoi(comTime + 3);
 800c75c:	1dd8      	adds	r0, r3, #7
 800c75e:	f005 fc5c 	bl	801201a <atoi>
	*(comDate + 2) = 0;
 800c762:	465b      	mov	r3, fp
	minutes = atoi(comTime + 3);
 800c764:	0005      	movs	r5, r0
	hours = atoi(comTime);
 800c766:	4640      	mov	r0, r8
	*(comDate + 2) = 0;
 800c768:	70b3      	strb	r3, [r6, #2]
	hours = atoi(comTime);
 800c76a:	f005 fc56 	bl	801201a <atoi>
	
  /* Set Date */
  sdatestructure.Year = year;
 800c76e:	466b      	mov	r3, sp
 800c770:	4652      	mov	r2, sl
 800c772:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month = month;
  sdatestructure.Date = day;
 800c774:	464a      	mov	r2, r9
  sdatestructure.Month = month;
 800c776:	705f      	strb	r7, [r3, #1]
  sdatestructure.Date = day;
 800c778:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800c77a:	466a      	mov	r2, sp
 800c77c:	2301      	movs	r3, #1
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c77e:	4f17      	ldr	r7, [pc, #92]	; (800c7dc <RTC_CalendarConfig+0xf0>)
	hours = atoi(comTime);
 800c780:	0006      	movs	r6, r0
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800c782:	7013      	strb	r3, [r2, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c784:	4669      	mov	r1, sp
 800c786:	2200      	movs	r2, #0
 800c788:	0038      	movs	r0, r7
 800c78a:	f004 fe63 	bl	8011454 <HAL_RTC_SetDate>
 800c78e:	2800      	cmp	r0, #0
 800c790:	d116      	bne.n	800c7c0 <RTC_CalendarConfig+0xd4>

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
  stimestructure.Seconds = seconds;
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800c792:	2218      	movs	r2, #24
 800c794:	4b12      	ldr	r3, [pc, #72]	; (800c7e0 <RTC_CalendarConfig+0xf4>)
  stimestructure.Hours = hours;
 800c796:	a907      	add	r1, sp, #28
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800c798:	7208      	strb	r0, [r1, #8]
 800c79a:	735a      	strb	r2, [r3, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c79c:	60c8      	str	r0, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800c79e:	6108      	str	r0, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	0038      	movs	r0, r7
  stimestructure.Hours = hours;
 800c7a4:	700e      	strb	r6, [r1, #0]
  stimestructure.Minutes = minutes;
 800c7a6:	704d      	strb	r5, [r1, #1]
  stimestructure.Seconds = seconds;
 800c7a8:	708c      	strb	r4, [r1, #2]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c7aa:	f004 fdbf 	bl	801132c <HAL_RTC_SetTime>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d106      	bne.n	800c7c0 <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800c7b2:	0038      	movs	r0, r7
 800c7b4:	4a0b      	ldr	r2, [pc, #44]	; (800c7e4 <RTC_CalendarConfig+0xf8>)
 800c7b6:	2101      	movs	r1, #1
 800c7b8:	f004 fec8 	bl	801154c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800c7bc:	2000      	movs	r0, #0
 800c7be:	e000      	b.n	800c7c2 <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800c7c0:	20ff      	movs	r0, #255	; 0xff
}
 800c7c2:	b00d      	add	sp, #52	; 0x34
 800c7c4:	bc3c      	pop	{r2, r3, r4, r5}
 800c7c6:	4690      	mov	r8, r2
 800c7c8:	4699      	mov	r9, r3
 800c7ca:	46a2      	mov	sl, r4
 800c7cc:	46ab      	mov	fp, r5
 800c7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7d0:	08017590 	.word	0x08017590
 800c7d4:	080175b4 	.word	0x080175b4
 800c7d8:	2000006c 	.word	0x2000006c
 800c7dc:	20006c9c 	.word	0x20006c9c
 800c7e0:	20006874 	.word	0x20006874
 800c7e4:	000032f2 	.word	0x000032f2

0800c7e8 <RTC_Init>:
  __HAL_RCC_RTC_ENABLE();
 800c7e8:	2380      	movs	r3, #128	; 0x80
{
 800c7ea:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_RTC_ENABLE();
 800c7ec:	4d1e      	ldr	r5, [pc, #120]	; (800c868 <RTC_Init+0x80>)
 800c7ee:	021b      	lsls	r3, r3, #8
 800c7f0:	6a2a      	ldr	r2, [r5, #32]
	RtcHandle.Instance = RTC; 
 800c7f2:	4c1e      	ldr	r4, [pc, #120]	; (800c86c <RTC_Init+0x84>)
  __HAL_RCC_RTC_ENABLE();
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	622b      	str	r3, [r5, #32]
  RtcHandle.Init.AsynchPrediv = 124;
 800c7f8:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC; 
 800c7fa:	4b1d      	ldr	r3, [pc, #116]	; (800c870 <RTC_Init+0x88>)
  RtcHandle.Init.AsynchPrediv = 124;
 800c7fc:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC; 
 800c7fe:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800c800:	2300      	movs	r3, #0
  RtcHandle.Init.SynchPrediv = 1999;
 800c802:	4a1c      	ldr	r2, [pc, #112]	; (800c874 <RTC_Init+0x8c>)
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800c804:	0020      	movs	r0, r4
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800c806:	6063      	str	r3, [r4, #4]
  RtcHandle.Init.SynchPrediv = 1999;
 800c808:	60e2      	str	r2, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c80a:	6123      	str	r3, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c80c:	6163      	str	r3, [r4, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c80e:	61a3      	str	r3, [r4, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800c810:	f004 fd44 	bl	801129c <HAL_RTC_Init>
 800c814:	0006      	movs	r6, r0
 800c816:	20ff      	movs	r0, #255	; 0xff
 800c818:	2e00      	cmp	r6, #0
 800c81a:	d119      	bne.n	800c850 <RTC_Init+0x68>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800c81c:	2101      	movs	r1, #1
 800c81e:	0020      	movs	r0, r4
 800c820:	f004 fe9a 	bl	8011558 <HAL_RTCEx_BKUPRead>
 800c824:	4b14      	ldr	r3, [pc, #80]	; (800c878 <RTC_Init+0x90>)
 800c826:	4298      	cmp	r0, r3
 800c828:	d113      	bne.n	800c852 <RTC_Init+0x6a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800c82a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c82c:	011b      	lsls	r3, r3, #4
 800c82e:	d501      	bpl.n	800c834 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800c830:	4b12      	ldr	r3, [pc, #72]	; (800c87c <RTC_Init+0x94>)
 800c832:	701e      	strb	r6, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800c834:	4b0c      	ldr	r3, [pc, #48]	; (800c868 <RTC_Init+0x80>)
 800c836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c838:	015b      	lsls	r3, r3, #5
 800c83a:	d50c      	bpl.n	800c856 <RTC_Init+0x6e>
			bootStatus = RESET_BOOT;
 800c83c:	2201      	movs	r2, #1
 800c83e:	4b0f      	ldr	r3, [pc, #60]	; (800c87c <RTC_Init+0x94>)
	return BOS_OK;
 800c840:	2000      	movs	r0, #0
			bootStatus = RESET_BOOT;
 800c842:	701a      	strb	r2, [r3, #0]
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800c844:	2380      	movs	r3, #128	; 0x80
 800c846:	4a08      	ldr	r2, [pc, #32]	; (800c868 <RTC_Init+0x80>)
 800c848:	045b      	lsls	r3, r3, #17
 800c84a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800c84c:	430b      	orrs	r3, r1
 800c84e:	6253      	str	r3, [r2, #36]	; 0x24
}
 800c850:	bd70      	pop	{r4, r5, r6, pc}
    RTC_CalendarConfig();
 800c852:	f7ff ff4b 	bl	800c6ec <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800c856:	2380      	movs	r3, #128	; 0x80
 800c858:	4a03      	ldr	r2, [pc, #12]	; (800c868 <RTC_Init+0x80>)
 800c85a:	045b      	lsls	r3, r3, #17
 800c85c:	6a51      	ldr	r1, [r2, #36]	; 0x24
	return BOS_OK;
 800c85e:	2000      	movs	r0, #0
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800c860:	430b      	orrs	r3, r1
 800c862:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800c864:	e7f4      	b.n	800c850 <RTC_Init+0x68>
 800c866:	46c0      	nop			; (mov r8, r8)
 800c868:	40021000 	.word	0x40021000
 800c86c:	20006c9c 	.word	0x20006c9c
 800c870:	40002800 	.word	0x40002800
 800c874:	000007cf 	.word	0x000007cf
 800c878:	000032f2 	.word	0x000032f2
 800c87c:	2000247d 	.word	0x2000247d

0800c880 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800c880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c882:	46c6      	mov	lr, r8
 800c884:	b500      	push	{lr}
 800c886:	b086      	sub	sp, #24
 800c888:	ac0c      	add	r4, sp, #48	; 0x30
 800c88a:	7827      	ldrb	r7, [r4, #0]
 800c88c:	ac0d      	add	r4, sp, #52	; 0x34
 800c88e:	7824      	ldrb	r4, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800c890:	3230      	adds	r2, #48	; 0x30
{
 800c892:	46a0      	mov	r8, r4
 800c894:	ac0e      	add	r4, sp, #56	; 0x38
 800c896:	7825      	ldrb	r5, [r4, #0]
 800c898:	ac0f      	add	r4, sp, #60	; 0x3c
 800c89a:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 800c89c:	466c      	mov	r4, sp
 800c89e:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800c8a0:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800c8a2:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800c8a4:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c8a6:	4c20      	ldr	r4, [pc, #128]	; (800c928 <BOS_CalendarConfig+0xa8>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	4669      	mov	r1, sp
 800c8ac:	0020      	movs	r0, r4
 800c8ae:	f004 fdd1 	bl	8011454 <HAL_RTC_SetDate>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d123      	bne.n	800c8fe <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
 800c8b6:	4643      	mov	r3, r8
  stimestructure.Hours = hours;
 800c8b8:	a901      	add	r1, sp, #4
 800c8ba:	700d      	strb	r5, [r1, #0]
  stimestructure.Minutes = minutes;
 800c8bc:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds; 
 800c8be:	708f      	strb	r7, [r1, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800c8c0:	6108      	str	r0, [r1, #16]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800c8c2:	2d0c      	cmp	r5, #12
 800c8c4:	d820      	bhi.n	800c908 <BOS_CalendarConfig+0x88>
 800c8c6:	4d19      	ldr	r5, [pc, #100]	; (800c92c <BOS_CalendarConfig+0xac>)
	
	if (AMPM == RTC_AM) {
 800c8c8:	2e01      	cmp	r6, #1
 800c8ca:	d022      	beq.n	800c912 <BOS_CalendarConfig+0x92>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800c8cc:	2e02      	cmp	r6, #2
 800c8ce:	d025      	beq.n	800c91c <BOS_CalendarConfig+0x9c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800c8d0:	2318      	movs	r3, #24
 800c8d2:	736b      	strb	r3, [r5, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	0020      	movs	r0, r4
 800c8d8:	f004 fd28 	bl	801132c <HAL_RTC_SetTime>
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	d10e      	bne.n	800c8fe <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800c8e0:	7b6b      	ldrb	r3, [r5, #13]
 800c8e2:	7929      	ldrb	r1, [r5, #4]
 800c8e4:	021b      	lsls	r3, r3, #8
 800c8e6:	301b      	adds	r0, #27
 800c8e8:	4319      	orrs	r1, r3
 800c8ea:	30ff      	adds	r0, #255	; 0xff
 800c8ec:	f7fe f9c6 	bl	800ac7c <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800c8f0:	0020      	movs	r0, r4
 800c8f2:	4a0f      	ldr	r2, [pc, #60]	; (800c930 <BOS_CalendarConfig+0xb0>)
 800c8f4:	2101      	movs	r1, #1
 800c8f6:	f004 fe29 	bl	801154c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	e000      	b.n	800c900 <BOS_CalendarConfig+0x80>
		return BOS_ERROR;
 800c8fe:	20ff      	movs	r0, #255	; 0xff
}
 800c900:	b006      	add	sp, #24
 800c902:	bc04      	pop	{r2}
 800c904:	4690      	mov	r8, r2
 800c906:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hours > 12)	BOS.hourformat = 24;
 800c908:	2318      	movs	r3, #24
 800c90a:	4d08      	ldr	r5, [pc, #32]	; (800c92c <BOS_CalendarConfig+0xac>)
 800c90c:	736b      	strb	r3, [r5, #13]
	if (AMPM == RTC_AM) {
 800c90e:	2e01      	cmp	r6, #1
 800c910:	d1dc      	bne.n	800c8cc <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800c912:	2300      	movs	r3, #0
 800c914:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800c916:	330c      	adds	r3, #12
 800c918:	736b      	strb	r3, [r5, #13]
 800c91a:	e7db      	b.n	800c8d4 <BOS_CalendarConfig+0x54>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800c91c:	2340      	movs	r3, #64	; 0x40
 800c91e:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800c920:	3b34      	subs	r3, #52	; 0x34
 800c922:	736b      	strb	r3, [r5, #13]
 800c924:	e7d6      	b.n	800c8d4 <BOS_CalendarConfig+0x54>
 800c926:	46c0      	nop			; (mov r8, r8)
 800c928:	20006c9c 	.word	0x20006c9c
 800c92c:	20006874 	.word	0x20006874
 800c930:	000032f2 	.word	0x000032f2

0800c934 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800c934:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800c936:	4d16      	ldr	r5, [pc, #88]	; (800c990 <GetTimeDate+0x5c>)
{
 800c938:	b087      	sub	sp, #28
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800c93a:	ac01      	add	r4, sp, #4
 800c93c:	0021      	movs	r1, r4
 800c93e:	2200      	movs	r2, #0
 800c940:	0028      	movs	r0, r5
 800c942:	f004 fc13 	bl	801116c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800c946:	4669      	mov	r1, sp
 800c948:	2200      	movs	r2, #0
 800c94a:	0028      	movs	r0, r5
 800c94c:	f004 fc3e 	bl	80111cc <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800c950:	7a22      	ldrb	r2, [r4, #8]
 800c952:	4b10      	ldr	r3, [pc, #64]	; (800c994 <GetTimeDate+0x60>)
 800c954:	09d2      	lsrs	r2, r2, #7
 800c956:	3201      	adds	r2, #1
 800c958:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800c95a:	6862      	ldr	r2, [r4, #4]
	BOS.time.minutes = stimestructureget.Minutes;
	BOS.time.hours = stimestructureget.Hours;
	BOS.date.day = sdatestructureget.Date;
	BOS.date.month = sdatestructureget.Month;
	BOS.date.weekday = sdatestructureget.WeekDay;
	BOS.date.year = sdatestructureget.Year + 2000;
 800c95c:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800c95e:	0852      	lsrs	r2, r2, #1
 800c960:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800c962:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c964:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds = stimestructureget.Seconds;
 800c966:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800c968:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c96a:	468c      	mov	ip, r1
	BOS.time.minutes = stimestructureget.Minutes;
 800c96c:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800c96e:	7822      	ldrb	r2, [r4, #0]
 800c970:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800c972:	466a      	mov	r2, sp
 800c974:	7892      	ldrb	r2, [r2, #2]
 800c976:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800c978:	466a      	mov	r2, sp
 800c97a:	7852      	ldrb	r2, [r2, #1]
 800c97c:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800c97e:	466a      	mov	r2, sp
 800c980:	7812      	ldrb	r2, [r2, #0]
 800c982:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c984:	466a      	mov	r2, sp
 800c986:	78d2      	ldrb	r2, [r2, #3]
 800c988:	4462      	add	r2, ip
 800c98a:	831a      	strh	r2, [r3, #24]
}
 800c98c:	b007      	add	sp, #28
 800c98e:	bd30      	pop	{r4, r5, pc}
 800c990:	20006c9c 	.word	0x20006c9c
 800c994:	20006874 	.word	0x20006874

0800c998 <TIM_USEC_Init>:
void TIM_USEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800c998:	2080      	movs	r0, #128	; 0x80
 800c99a:	4a13      	ldr	r2, [pc, #76]	; (800c9e8 <TIM_USEC_Init+0x50>)
{
 800c99c:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE();
 800c99e:	69d1      	ldr	r1, [r2, #28]
 800c9a0:	0040      	lsls	r0, r0, #1
 800c9a2:	4301      	orrs	r1, r0
 800c9a4:	61d1      	str	r1, [r2, #28]
 800c9a6:	69d3      	ldr	r3, [r2, #28]
{
 800c9a8:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 800c9aa:	4003      	ands	r3, r0
 800c9ac:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800c9ae:	4c0f      	ldr	r4, [pc, #60]	; (800c9ec <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE();
 800c9b0:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800c9b2:	4b0f      	ldr	r3, [pc, #60]	; (800c9f0 <TIM_USEC_Init+0x58>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c9b4:	2500      	movs	r5, #0
  htim14.Instance = TIM14;
 800c9b6:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800c9b8:	f004 fb28 	bl	801100c <HAL_RCC_GetPCLK1Freq>
 800c9bc:	490d      	ldr	r1, [pc, #52]	; (800c9f4 <TIM_USEC_Init+0x5c>)
 800c9be:	f7f3 fbc7 	bl	8000150 <__udivsi3>
  htim14.Init.Period = 0xFFFF;
 800c9c2:	4b0d      	ldr	r3, [pc, #52]	; (800c9f8 <TIM_USEC_Init+0x60>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800c9c4:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim14);
 800c9c6:	0020      	movs	r0, r4
  htim14.Init.Period = 0xFFFF;
 800c9c8:	60e3      	str	r3, [r4, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c9ca:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim14);
 800c9cc:	f004 fe2c 	bl	8011628 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800c9d0:	a902      	add	r1, sp, #8
 800c9d2:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c9d4:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c9d6:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800c9d8:	f004 fe40 	bl	801165c <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800c9dc:	0020      	movs	r0, r4
 800c9de:	f004 fdc3 	bl	8011568 <HAL_TIM_Base_Start>
}
 800c9e2:	b005      	add	sp, #20
 800c9e4:	bd30      	pop	{r4, r5, pc}
 800c9e6:	46c0      	nop			; (mov r8, r8)
 800c9e8:	40021000 	.word	0x40021000
 800c9ec:	20006cf8 	.word	0x20006cf8
 800c9f0:	40002000 	.word	0x40002000
 800c9f4:	000f4240 	.word	0x000f4240
 800c9f8:	0000ffff 	.word	0x0000ffff

0800c9fc <TIM_MSEC_Init>:
void TIM_MSEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800c9fc:	2080      	movs	r0, #128	; 0x80
 800c9fe:	4a13      	ldr	r2, [pc, #76]	; (800ca4c <TIM_MSEC_Init+0x50>)
{
 800ca00:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE();
 800ca02:	6991      	ldr	r1, [r2, #24]
 800ca04:	0240      	lsls	r0, r0, #9
 800ca06:	4301      	orrs	r1, r0
 800ca08:	6191      	str	r1, [r2, #24]
 800ca0a:	6993      	ldr	r3, [r2, #24]
{
 800ca0c:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 800ca0e:	4003      	ands	r3, r0
 800ca10:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800ca12:	4c0f      	ldr	r4, [pc, #60]	; (800ca50 <TIM_MSEC_Init+0x54>)
	__TIM15_CLK_ENABLE();
 800ca14:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 800ca16:	4b0f      	ldr	r3, [pc, #60]	; (800ca54 <TIM_MSEC_Init+0x58>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca18:	2500      	movs	r5, #0
  htim15.Instance = TIM15;
 800ca1a:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800ca1c:	f004 faf6 	bl	801100c <HAL_RCC_GetPCLK1Freq>
 800ca20:	21fa      	movs	r1, #250	; 0xfa
 800ca22:	0089      	lsls	r1, r1, #2
 800ca24:	f7f3 fb94 	bl	8000150 <__udivsi3>
  htim15.Init.Period = 0xFFFF;
 800ca28:	4b0b      	ldr	r3, [pc, #44]	; (800ca58 <TIM_MSEC_Init+0x5c>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800ca2a:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim15);
 800ca2c:	0020      	movs	r0, r4
  htim15.Init.Period = 0xFFFF;
 800ca2e:	60e3      	str	r3, [r4, #12]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca30:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim15);
 800ca32:	f004 fdf9 	bl	8011628 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800ca36:	a902      	add	r1, sp, #8
 800ca38:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ca3a:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ca3c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800ca3e:	f004 fe0d 	bl	801165c <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800ca42:	0020      	movs	r0, r4
 800ca44:	f004 fd90 	bl	8011568 <HAL_TIM_Base_Start>
}
 800ca48:	b005      	add	sp, #20
 800ca4a:	bd30      	pop	{r4, r5, pc}
 800ca4c:	40021000 	.word	0x40021000
 800ca50:	20006cbc 	.word	0x20006cbc
 800ca54:	40014000 	.word	0x40014000
 800ca58:	0000ffff 	.word	0x0000ffff

0800ca5c <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800ca5c:	b510      	push	{r4, lr}
 800ca5e:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800ca60:	f002 f8a8 	bl	800ebb4 <vPortEnterCritical>
	
	if (Delay)
 800ca64:	2c00      	cmp	r4, #0
 800ca66:	d006      	beq.n	800ca76 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800ca68:	4b04      	ldr	r3, [pc, #16]	; (800ca7c <StartMicroDelay+0x20>)
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800ca6e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800ca70:	1a5b      	subs	r3, r3, r1
 800ca72:	42a3      	cmp	r3, r4
 800ca74:	d9fb      	bls.n	800ca6e <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800ca76:	f002 f8a9 	bl	800ebcc <vPortExitCritical>
}
 800ca7a:	bd10      	pop	{r4, pc}
 800ca7c:	20006cf8 	.word	0x20006cf8

0800ca80 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800ca80:	b510      	push	{r4, lr}
 800ca82:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800ca84:	f002 f896 	bl	800ebb4 <vPortEnterCritical>
	
	if (Delay)
 800ca88:	2c00      	cmp	r4, #0
 800ca8a:	d006      	beq.n	800ca9a <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800ca8c:	4b04      	ldr	r3, [pc, #16]	; (800caa0 <StartMilliDelay+0x20>)
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800ca92:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800ca94:	1a5b      	subs	r3, r3, r1
 800ca96:	42a3      	cmp	r3, r4
 800ca98:	d9fb      	bls.n	800ca92 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800ca9a:	f002 f897 	bl	800ebcc <vPortExitCritical>
}
 800ca9e:	bd10      	pop	{r4, pc}
 800caa0:	20006cbc 	.word	0x20006cbc

0800caa4 <SwapUartPins.part.0>:

/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
 800caa4:	b570      	push	{r4, r5, r6, lr}
 800caa6:	0004      	movs	r4, r0
{
	if (huart != NULL) {
		if (direction == REVERSED) {
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800caa8:	f7fd f954 	bl	8009d54 <GetPort>
 800caac:	2180      	movs	r1, #128	; 0x80
 800caae:	0209      	lsls	r1, r1, #8
 800cab0:	000a      	movs	r2, r1
 800cab2:	3801      	subs	r0, #1
 800cab4:	4102      	asrs	r2, r0
 800cab6:	4b07      	ldr	r3, [pc, #28]	; (800cad4 <SwapUartPins.part.0+0x30>)
 800cab8:	4d07      	ldr	r5, [pc, #28]	; (800cad8 <SwapUartPins.part.0+0x34>)
 800caba:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800cabc:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800cabe:	3b01      	subs	r3, #1
 800cac0:	005b      	lsls	r3, r3, #1
 800cac2:	5b58      	ldrh	r0, [r3, r5]
 800cac4:	4302      	orrs	r2, r0
 800cac6:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800cac8:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800caca:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800cacc:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800cace:	f005 f94f 	bl	8011d70 <HAL_UART_Init>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800cad2:	bd70      	pop	{r4, r5, r6, pc}
 800cad4:	20000aa8 	.word	0x20000aa8
 800cad8:	20006d34 	.word	0x20006d34

0800cadc <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 800cadc:	4809      	ldr	r0, [pc, #36]	; (800cb04 <MX_USART1_UART_Init+0x28>)
 800cade:	4b0a      	ldr	r3, [pc, #40]	; (800cb08 <MX_USART1_UART_Init+0x2c>)
{
 800cae0:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800cae2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800cae4:	23e1      	movs	r3, #225	; 0xe1
 800cae6:	031b      	lsls	r3, r3, #12
 800cae8:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800caea:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800caec:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800caee:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800caf0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800caf2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800caf4:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800caf6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800caf8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800cafa:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cafc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800cafe:	f005 f937 	bl	8011d70 <HAL_UART_Init>
}
 800cb02:	bd10      	pop	{r4, pc}
 800cb04:	20006ac0 	.word	0x20006ac0
 800cb08:	40013800 	.word	0x40013800

0800cb0c <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 800cb0c:	4809      	ldr	r0, [pc, #36]	; (800cb34 <MX_USART2_UART_Init+0x28>)
 800cb0e:	4b0a      	ldr	r3, [pc, #40]	; (800cb38 <MX_USART2_UART_Init+0x2c>)
{
 800cb10:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800cb12:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800cb14:	23e1      	movs	r3, #225	; 0xe1
 800cb16:	031b      	lsls	r3, r3, #12
 800cb18:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800cb1a:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800cb1c:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800cb1e:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800cb20:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800cb22:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800cb24:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cb26:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800cb28:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800cb2a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cb2c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800cb2e:	f005 f91f 	bl	8011d70 <HAL_UART_Init>
}
 800cb32:	bd10      	pop	{r4, pc}
 800cb34:	20006bb8 	.word	0x20006bb8
 800cb38:	40004400 	.word	0x40004400

0800cb3c <MX_USART3_UART_Init>:
  huart3.Instance = USART3;
 800cb3c:	4809      	ldr	r0, [pc, #36]	; (800cb64 <MX_USART3_UART_Init+0x28>)
 800cb3e:	4b0a      	ldr	r3, [pc, #40]	; (800cb68 <MX_USART3_UART_Init+0x2c>)
{
 800cb40:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800cb42:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800cb44:	23e1      	movs	r3, #225	; 0xe1
 800cb46:	031b      	lsls	r3, r3, #12
 800cb48:	6043      	str	r3, [r0, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800cb4a:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800cb4c:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800cb4e:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800cb50:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800cb52:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800cb54:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cb56:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800cb58:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800cb5a:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cb5c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800cb5e:	f005 f907 	bl	8011d70 <HAL_UART_Init>
}
 800cb62:	bd10      	pop	{r4, pc}
 800cb64:	20006998 	.word	0x20006998
 800cb68:	40004800 	.word	0x40004800

0800cb6c <MX_USART5_UART_Init>:
  huart5.Instance = USART5;
 800cb6c:	4809      	ldr	r0, [pc, #36]	; (800cb94 <MX_USART5_UART_Init+0x28>)
 800cb6e:	4b0a      	ldr	r3, [pc, #40]	; (800cb98 <MX_USART5_UART_Init+0x2c>)
{
 800cb70:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800cb72:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800cb74:	23e1      	movs	r3, #225	; 0xe1
 800cb76:	031b      	lsls	r3, r3, #12
 800cb78:	6043      	str	r3, [r0, #4]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800cb7a:	220c      	movs	r2, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800cb7c:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800cb7e:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800cb80:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800cb82:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800cb84:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cb86:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800cb88:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800cb8a:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cb8c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800cb8e:	f005 f8ef 	bl	8011d70 <HAL_UART_Init>
}
 800cb92:	bd10      	pop	{r4, pc}
 800cb94:	20006a50 	.word	0x20006a50
 800cb98:	40005000 	.word	0x40005000

0800cb9c <MX_USART6_UART_Init>:
  huart6.Instance = USART6;
 800cb9c:	4809      	ldr	r0, [pc, #36]	; (800cbc4 <MX_USART6_UART_Init+0x28>)
 800cb9e:	4b0a      	ldr	r3, [pc, #40]	; (800cbc8 <MX_USART6_UART_Init+0x2c>)
{
 800cba0:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800cba2:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800cba4:	23e1      	movs	r3, #225	; 0xe1
 800cba6:	031b      	lsls	r3, r3, #12
 800cba8:	6043      	str	r3, [r0, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800cbaa:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800cbac:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800cbae:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800cbb0:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800cbb2:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800cbb4:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cbb6:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800cbb8:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800cbba:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cbbc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800cbbe:	f005 f8d7 	bl	8011d70 <HAL_UART_Init>
}
 800cbc2:	bd10      	pop	{r4, pc}
 800cbc4:	20006b40 	.word	0x20006b40
 800cbc8:	40011400 	.word	0x40011400

0800cbcc <HAL_UART_MspInit>:
{
 800cbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbce:	46c6      	mov	lr, r8
 800cbd0:	b500      	push	{lr}
  if(huart->Instance==USART1)
 800cbd2:	6803      	ldr	r3, [r0, #0]
 800cbd4:	4a6e      	ldr	r2, [pc, #440]	; (800cd90 <HAL_UART_MspInit+0x1c4>)
{
 800cbd6:	b08a      	sub	sp, #40	; 0x28
  if(huart->Instance==USART1)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d041      	beq.n	800cc60 <HAL_UART_MspInit+0x94>
  else if(huart->Instance==USART2)
 800cbdc:	4a6d      	ldr	r2, [pc, #436]	; (800cd94 <HAL_UART_MspInit+0x1c8>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d06c      	beq.n	800ccbc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 800cbe2:	4a6d      	ldr	r2, [pc, #436]	; (800cd98 <HAL_UART_MspInit+0x1cc>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d100      	bne.n	800cbea <HAL_UART_MspInit+0x1e>
 800cbe8:	e094      	b.n	800cd14 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART4)
 800cbea:	4a6c      	ldr	r2, [pc, #432]	; (800cd9c <HAL_UART_MspInit+0x1d0>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d006      	beq.n	800cbfe <HAL_UART_MspInit+0x32>
  else if(huart->Instance==USART5)
 800cbf0:	4a6b      	ldr	r2, [pc, #428]	; (800cda0 <HAL_UART_MspInit+0x1d4>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d100      	bne.n	800cbf8 <HAL_UART_MspInit+0x2c>
 800cbf6:	e0b0      	b.n	800cd5a <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART6)
 800cbf8:	4a6a      	ldr	r2, [pc, #424]	; (800cda4 <HAL_UART_MspInit+0x1d8>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d003      	beq.n	800cc06 <HAL_UART_MspInit+0x3a>
}
 800cbfe:	b00a      	add	sp, #40	; 0x28
 800cc00:	bc04      	pop	{r2}
 800cc02:	4690      	mov	r8, r2
 800cc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART6_CLK_ENABLE();
 800cc06:	2420      	movs	r4, #32
 800cc08:	4b67      	ldr	r3, [pc, #412]	; (800cda8 <HAL_UART_MspInit+0x1dc>)
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800cc0a:	2090      	movs	r0, #144	; 0x90
    __USART6_CLK_ENABLE();
 800cc0c:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc0e:	2701      	movs	r7, #1
    __USART6_CLK_ENABLE();
 800cc10:	4322      	orrs	r2, r4
 800cc12:	619a      	str	r2, [r3, #24]
 800cc14:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc16:	2603      	movs	r6, #3
    __USART6_CLK_ENABLE();
 800cc18:	4023      	ands	r3, r4
 800cc1a:	9304      	str	r3, [sp, #16]
 800cc1c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800cc1e:	2310      	movs	r3, #16
 800cc20:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc22:	3b0e      	subs	r3, #14
 800cc24:	4698      	mov	r8, r3
    GPIO_InitStruct.Alternate = USART6_AF;	
 800cc26:	2505      	movs	r5, #5
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800cc28:	a905      	add	r1, sp, #20
 800cc2a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc2c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc2e:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc30:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800cc32:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800cc34:	f003 fc20 	bl	8010478 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc38:	4643      	mov	r3, r8
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800cc3a:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800cc3c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc3e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc40:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc42:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800cc44:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800cc46:	a905      	add	r1, sp, #20
 800cc48:	05c0      	lsls	r0, r0, #23
 800cc4a:	f003 fc15 	bl	8010478 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800cc4e:	2200      	movs	r2, #0
 800cc50:	2101      	movs	r1, #1
 800cc52:	201d      	movs	r0, #29
 800cc54:	f002 fc26 	bl	800f4a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800cc58:	201d      	movs	r0, #29
 800cc5a:	f002 fc4f 	bl	800f4fc <HAL_NVIC_EnableIRQ>
}
 800cc5e:	e7ce      	b.n	800cbfe <HAL_UART_MspInit+0x32>
    __USART1_CLK_ENABLE();
 800cc60:	2080      	movs	r0, #128	; 0x80
 800cc62:	4a51      	ldr	r2, [pc, #324]	; (800cda8 <HAL_UART_MspInit+0x1dc>)
 800cc64:	01c0      	lsls	r0, r0, #7
 800cc66:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc68:	2401      	movs	r4, #1
    __USART1_CLK_ENABLE();
 800cc6a:	4301      	orrs	r1, r0
 800cc6c:	6191      	str	r1, [r2, #24]
 800cc6e:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc70:	2602      	movs	r6, #2
    __USART1_CLK_ENABLE();
 800cc72:	4003      	ands	r3, r0
 800cc74:	9300      	str	r3, [sp, #0]
 800cc76:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800cc78:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800cc7a:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc7c:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800cc7e:	009b      	lsls	r3, r3, #2
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800cc80:	a905      	add	r1, sp, #20
 800cc82:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800cc84:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc86:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc88:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc8a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800cc8c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800cc8e:	f003 fbf3 	bl	8010478 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800cc92:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800cc94:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800cc96:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800cc98:	a905      	add	r1, sp, #20
 800cc9a:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800cc9c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc9e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cca0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cca2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800cca4:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800cca6:	f003 fbe7 	bl	8010478 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800ccaa:	2200      	movs	r2, #0
 800ccac:	2101      	movs	r1, #1
 800ccae:	201b      	movs	r0, #27
 800ccb0:	f002 fbf8 	bl	800f4a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ccb4:	201b      	movs	r0, #27
 800ccb6:	f002 fc21 	bl	800f4fc <HAL_NVIC_EnableIRQ>
 800ccba:	e7a0      	b.n	800cbfe <HAL_UART_MspInit+0x32>
    __USART2_CLK_ENABLE();
 800ccbc:	2080      	movs	r0, #128	; 0x80
 800ccbe:	4a3a      	ldr	r2, [pc, #232]	; (800cda8 <HAL_UART_MspInit+0x1dc>)
 800ccc0:	0280      	lsls	r0, r0, #10
 800ccc2:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ccc4:	2401      	movs	r4, #1
    __USART2_CLK_ENABLE();
 800ccc6:	4301      	orrs	r1, r0
 800ccc8:	61d1      	str	r1, [r2, #28]
 800ccca:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cccc:	2602      	movs	r6, #2
    __USART2_CLK_ENABLE();
 800ccce:	4003      	ands	r3, r0
 800ccd0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800ccd2:	2090      	movs	r0, #144	; 0x90
    __USART2_CLK_ENABLE();
 800ccd4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ccd6:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800ccd8:	2304      	movs	r3, #4
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800ccda:	a905      	add	r1, sp, #20
 800ccdc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800ccde:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cce0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cce2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cce4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800cce6:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800cce8:	f003 fbc6 	bl	8010478 <HAL_GPIO_Init>
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800ccec:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800ccee:	2308      	movs	r3, #8
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800ccf0:	a905      	add	r1, sp, #20
 800ccf2:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800ccf4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccf6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ccf8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ccfa:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800ccfc:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800ccfe:	f003 fbbb 	bl	8010478 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800cd02:	2200      	movs	r2, #0
 800cd04:	2101      	movs	r1, #1
 800cd06:	201c      	movs	r0, #28
 800cd08:	f002 fbcc 	bl	800f4a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800cd0c:	201c      	movs	r0, #28
 800cd0e:	f002 fbf5 	bl	800f4fc <HAL_NVIC_EnableIRQ>
 800cd12:	e774      	b.n	800cbfe <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800cd14:	2080      	movs	r0, #128	; 0x80
 800cd16:	4a24      	ldr	r2, [pc, #144]	; (800cda8 <HAL_UART_MspInit+0x1dc>)
 800cd18:	02c0      	lsls	r0, r0, #11
 800cd1a:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd1c:	2702      	movs	r7, #2
    __USART3_CLK_ENABLE();
 800cd1e:	4301      	orrs	r1, r0
 800cd20:	61d1      	str	r1, [r2, #28]
 800cd22:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cd24:	2601      	movs	r6, #1
    __USART3_CLK_ENABLE();
 800cd26:	4003      	ands	r3, r0
 800cd28:	9302      	str	r3, [sp, #8]
 800cd2a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800cd2c:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cd2e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = USART3_AF;	
 800cd30:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800cd32:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800cd34:	a905      	add	r1, sp, #20
 800cd36:	481d      	ldr	r0, [pc, #116]	; (800cdac <HAL_UART_MspInit+0x1e0>)
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800cd38:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd3a:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cd3c:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cd3e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800cd40:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800cd42:	f003 fb99 	bl	8010478 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800cd46:	2380      	movs	r3, #128	; 0x80
 800cd48:	011b      	lsls	r3, r3, #4
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800cd4a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd4c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cd4e:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cd50:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800cd52:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800cd54:	a905      	add	r1, sp, #20
 800cd56:	4815      	ldr	r0, [pc, #84]	; (800cdac <HAL_UART_MspInit+0x1e0>)
 800cd58:	e777      	b.n	800cc4a <HAL_UART_MspInit+0x7e>
    __USART5_CLK_ENABLE();
 800cd5a:	2080      	movs	r0, #128	; 0x80
 800cd5c:	4a12      	ldr	r2, [pc, #72]	; (800cda8 <HAL_UART_MspInit+0x1dc>)
 800cd5e:	0340      	lsls	r0, r0, #13
 800cd60:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd62:	2702      	movs	r7, #2
    __USART5_CLK_ENABLE();
 800cd64:	4301      	orrs	r1, r0
 800cd66:	61d1      	str	r1, [r2, #28]
 800cd68:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cd6a:	2601      	movs	r6, #1
    __USART5_CLK_ENABLE();
 800cd6c:	4003      	ands	r3, r0
 800cd6e:	9303      	str	r3, [sp, #12]
 800cd70:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cd72:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800cd74:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USART5_AF;	
 800cd76:	2404      	movs	r4, #4
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800cd78:	a905      	add	r1, sp, #20
 800cd7a:	480c      	ldr	r0, [pc, #48]	; (800cdac <HAL_UART_MspInit+0x1e0>)
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800cd7c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd7e:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cd80:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cd82:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800cd84:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800cd86:	f003 fb77 	bl	8010478 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800cd8a:	2310      	movs	r3, #16
 800cd8c:	e7dd      	b.n	800cd4a <HAL_UART_MspInit+0x17e>
 800cd8e:	46c0      	nop			; (mov r8, r8)
 800cd90:	40013800 	.word	0x40013800
 800cd94:	40004400 	.word	0x40004400
 800cd98:	40004800 	.word	0x40004800
 800cd9c:	40004c00 	.word	0x40004c00
 800cda0:	40005000 	.word	0x40005000
 800cda4:	40011400 	.word	0x40011400
 800cda8:	40021000 	.word	0x40021000
 800cdac:	48000400 	.word	0x48000400

0800cdb0 <writePxMutex>:
{
 800cdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb2:	4647      	mov	r7, r8
 800cdb4:	46ce      	mov	lr, r9
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	0017      	movs	r7, r2
 800cdba:	1e42      	subs	r2, r0, #1
 800cdbc:	b2d2      	uxtb	r2, r2
 800cdbe:	000e      	movs	r6, r1
 800cdc0:	2a04      	cmp	r2, #4
 800cdc2:	d80e      	bhi.n	800cde2 <writePxMutex+0x32>
 800cdc4:	4911      	ldr	r1, [pc, #68]	; (800ce0c <writePxMutex+0x5c>)
 800cdc6:	0092      	lsls	r2, r2, #2
 800cdc8:	5852      	ldr	r2, [r2, r1]
 800cdca:	4690      	mov	r8, r2
	if (GetUart(port) != NULL) {
 800cdcc:	2a00      	cmp	r2, #0
 800cdce:	d008      	beq.n	800cde2 <writePxMutex+0x32>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800cdd0:	4a0f      	ldr	r2, [pc, #60]	; (800ce10 <writePxMutex+0x60>)
 800cdd2:	0085      	lsls	r5, r0, #2
 800cdd4:	0019      	movs	r1, r3
 800cdd6:	5950      	ldr	r0, [r2, r5]
 800cdd8:	4691      	mov	r9, r2
 800cdda:	f000 f9c5 	bl	800d168 <osSemaphoreWait>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	d007      	beq.n	800cdf2 <writePxMutex+0x42>
	HAL_StatusTypeDef result = HAL_ERROR;
 800cde2:	2401      	movs	r4, #1
}
 800cde4:	0020      	movs	r0, r4
 800cde6:	bc0c      	pop	{r2, r3}
 800cde8:	4690      	mov	r8, r2
 800cdea:	4699      	mov	r9, r3
 800cdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800cdee:	2803      	cmp	r0, #3
 800cdf0:	d007      	beq.n	800ce02 <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800cdf2:	9b08      	ldr	r3, [sp, #32]
 800cdf4:	003a      	movs	r2, r7
 800cdf6:	0031      	movs	r1, r6
 800cdf8:	4640      	mov	r0, r8
 800cdfa:	f004 ff17 	bl	8011c2c <HAL_UART_Transmit>
 800cdfe:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800ce00:	d1f5      	bne.n	800cdee <writePxMutex+0x3e>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800ce02:	464b      	mov	r3, r9
 800ce04:	5958      	ldr	r0, [r3, r5]
 800ce06:	f000 f9d9 	bl	800d1bc <osSemaphoreRelease>
 800ce0a:	e7eb      	b.n	800cde4 <writePxMutex+0x34>
 800ce0c:	0801736c 	.word	0x0801736c
 800ce10:	200068f8 	.word	0x200068f8

0800ce14 <writePxITMutex>:
{
 800ce14:	b570      	push	{r4, r5, r6, lr}
 800ce16:	0015      	movs	r5, r2
 800ce18:	1e42      	subs	r2, r0, #1
 800ce1a:	b2d2      	uxtb	r2, r2
 800ce1c:	000c      	movs	r4, r1
 800ce1e:	2a04      	cmp	r2, #4
 800ce20:	d80c      	bhi.n	800ce3c <writePxITMutex+0x28>
 800ce22:	490a      	ldr	r1, [pc, #40]	; (800ce4c <writePxITMutex+0x38>)
 800ce24:	0092      	lsls	r2, r2, #2
 800ce26:	5856      	ldr	r6, [r2, r1]
	if (GetUart(port) != NULL) {	
 800ce28:	2e00      	cmp	r6, #0
 800ce2a:	d007      	beq.n	800ce3c <writePxITMutex+0x28>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800ce2c:	4a08      	ldr	r2, [pc, #32]	; (800ce50 <writePxITMutex+0x3c>)
 800ce2e:	0080      	lsls	r0, r0, #2
 800ce30:	5880      	ldr	r0, [r0, r2]
 800ce32:	0019      	movs	r1, r3
 800ce34:	f000 f998 	bl	800d168 <osSemaphoreWait>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	d001      	beq.n	800ce40 <writePxITMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800ce3c:	2001      	movs	r0, #1
}
 800ce3e:	bd70      	pop	{r4, r5, r6, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800ce40:	002a      	movs	r2, r5
 800ce42:	0021      	movs	r1, r4
 800ce44:	0030      	movs	r0, r6
 800ce46:	f004 fc47 	bl	80116d8 <HAL_UART_Transmit_IT>
 800ce4a:	e7f8      	b.n	800ce3e <writePxITMutex+0x2a>
 800ce4c:	0801736c 	.word	0x0801736c
 800ce50:	200068f8 	.word	0x200068f8

0800ce54 <UpdateBaudrate>:
{
 800ce54:	3801      	subs	r0, #1
 800ce56:	b2c0      	uxtb	r0, r0
 800ce58:	b510      	push	{r4, lr}
 800ce5a:	2804      	cmp	r0, #4
 800ce5c:	d807      	bhi.n	800ce6e <UpdateBaudrate+0x1a>
 800ce5e:	4b05      	ldr	r3, [pc, #20]	; (800ce74 <UpdateBaudrate+0x20>)
 800ce60:	0080      	lsls	r0, r0, #2
 800ce62:	58c0      	ldr	r0, [r0, r3]
	huart->Init.BaudRate = baudrate;
 800ce64:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800ce66:	f004 ff83 	bl	8011d70 <HAL_UART_Init>
}
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate = baudrate;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	605b      	str	r3, [r3, #4]
 800ce72:	deff      	udf	#255	; 0xff
 800ce74:	0801736c 	.word	0x0801736c

0800ce78 <GetUart>:
{
 800ce78:	3801      	subs	r0, #1
 800ce7a:	b2c3      	uxtb	r3, r0
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	2b04      	cmp	r3, #4
 800ce80:	d802      	bhi.n	800ce88 <GetUart+0x10>
 800ce82:	4a02      	ldr	r2, [pc, #8]	; (800ce8c <GetUart+0x14>)
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	5898      	ldr	r0, [r3, r2]
}
 800ce88:	4770      	bx	lr
 800ce8a:	46c0      	nop			; (mov r8, r8)
 800ce8c:	0801736c 	.word	0x0801736c

0800ce90 <SwapUartPins>:
{
 800ce90:	b570      	push	{r4, r5, r6, lr}
 800ce92:	0004      	movs	r4, r0
 800ce94:	000d      	movs	r5, r1
	if (huart != NULL) {
 800ce96:	2800      	cmp	r0, #0
 800ce98:	d003      	beq.n	800cea2 <SwapUartPins+0x12>
		if (direction == REVERSED) {
 800ce9a:	2901      	cmp	r1, #1
 800ce9c:	d017      	beq.n	800cece <SwapUartPins+0x3e>
		} else if (direction == NORMAL) {
 800ce9e:	2900      	cmp	r1, #0
 800cea0:	d000      	beq.n	800cea4 <SwapUartPins+0x14>
}
 800cea2:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800cea4:	f7fc ff56 	bl	8009d54 <GetPort>
 800cea8:	2180      	movs	r1, #128	; 0x80
 800ceaa:	3801      	subs	r0, #1
 800ceac:	0209      	lsls	r1, r1, #8
 800ceae:	4101      	asrs	r1, r0
 800ceb0:	4b08      	ldr	r3, [pc, #32]	; (800ced4 <SwapUartPins+0x44>)
 800ceb2:	4e09      	ldr	r6, [pc, #36]	; (800ced8 <SwapUartPins+0x48>)
 800ceb4:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800ceb6:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800ceb8:	3b01      	subs	r3, #1
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	5b9a      	ldrh	r2, [r3, r6]
			HAL_UART_Init(huart);		
 800cebe:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800cec0:	438a      	bics	r2, r1
 800cec2:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800cec4:	2308      	movs	r3, #8
 800cec6:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);		
 800cec8:	f004 ff52 	bl	8011d70 <HAL_UART_Init>
}
 800cecc:	e7e9      	b.n	800cea2 <SwapUartPins+0x12>
 800cece:	f7ff fde9 	bl	800caa4 <SwapUartPins.part.0>
 800ced2:	e7e6      	b.n	800cea2 <SwapUartPins+0x12>
 800ced4:	20000aa8 	.word	0x20000aa8
 800ced8:	20006d34 	.word	0x20006d34

0800cedc <ReadPortsDir>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800cedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cede:	46c6      	mov	lr, r8
 800cee0:	b500      	push	{lr}
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800cee2:	4d12      	ldr	r5, [pc, #72]	; (800cf2c <ReadPortsDir+0x50>)
 800cee4:	782b      	ldrb	r3, [r5, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d01d      	beq.n	800cf26 <ReadPortsDir+0x4a>
	BOS_Status result = BOS_OK;
 800ceea:	2300      	movs	r3, #0
	for (uint8_t i = 1; i <= N; i++) {
 800ceec:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800ceee:	4698      	mov	r8, r3
 800cef0:	4e0f      	ldr	r6, [pc, #60]	; (800cf30 <ReadPortsDir+0x54>)
		if (i != myID) {
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
			Delay_ms_no_rtos(50);
			if (responseStatus != BOS_OK) {
 800cef2:	4f10      	ldr	r7, [pc, #64]	; (800cf34 <ReadPortsDir+0x58>)
		if (i != myID) {
 800cef4:	7833      	ldrb	r3, [r6, #0]
 800cef6:	42a3      	cmp	r3, r4
 800cef8:	d00c      	beq.n	800cf14 <ReadPortsDir+0x38>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800cefa:	2200      	movs	r2, #0
 800cefc:	2113      	movs	r1, #19
 800cefe:	0020      	movs	r0, r4
 800cf00:	f7fb f912 	bl	8008128 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800cf04:	2032      	movs	r0, #50	; 0x32
 800cf06:	f7ff fdbb 	bl	800ca80 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800cf0a:	783b      	ldrb	r3, [r7, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d001      	beq.n	800cf14 <ReadPortsDir+0x38>
				result = BOS_ERR_NoResponse;
 800cf10:	2302      	movs	r3, #2
 800cf12:	4698      	mov	r8, r3
	for (uint8_t i = 1; i <= N; i++) {
 800cf14:	3401      	adds	r4, #1
 800cf16:	782b      	ldrb	r3, [r5, #0]
 800cf18:	b2e4      	uxtb	r4, r4
 800cf1a:	42a3      	cmp	r3, r4
 800cf1c:	d2ea      	bcs.n	800cef4 <ReadPortsDir+0x18>
			}
		}
	}

	return result;
}
 800cf1e:	4640      	mov	r0, r8
 800cf20:	bc04      	pop	{r2}
 800cf22:	4690      	mov	r8, r2
 800cf24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result = BOS_OK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	4698      	mov	r8, r3
 800cf2a:	e7f8      	b.n	800cf1e <ReadPortsDir+0x42>
 800cf2c:	20000010 	.word	0x20000010
 800cf30:	20000aa8 	.word	0x20000aa8
 800cf34:	20000c4c 	.word	0x20000c4c

0800cf38 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800cf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
 800cf3a:	2301      	movs	r3, #1
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800cf3c:	2580      	movs	r5, #128	; 0x80
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800cf3e:	490f      	ldr	r1, [pc, #60]	; (800cf7c <ReadPortsDirMSG+0x44>)
	uint16_t temp =0;
 800cf40:	2200      	movs	r2, #0
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800cf42:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cf44:	022d      	lsls	r5, r5, #8
			messageParams[temp++] = p;
 800cf46:	4f0e      	ldr	r7, [pc, #56]	; (800cf80 <ReadPortsDirMSG+0x48>)
 800cf48:	4e0e      	ldr	r6, [pc, #56]	; (800cf84 <ReadPortsDirMSG+0x4c>)
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800cf4a:	b2dc      	uxtb	r4, r3
 800cf4c:	42a9      	cmp	r1, r5
 800cf4e:	d102      	bne.n	800cf56 <ReadPortsDirMSG+0x1e>
			messageParams[temp++] = p;
 800cf50:	1c51      	adds	r1, r2, #1
 800cf52:	54bc      	strb	r4, [r7, r2]
 800cf54:	b28a      	uxth	r2, r1
	for (int p = 1; p <= NumOfPorts; p++) {
 800cf56:	3301      	adds	r3, #1
 800cf58:	2b06      	cmp	r3, #6
 800cf5a:	d009      	beq.n	800cf70 <ReadPortsDirMSG+0x38>
 800cf5c:	0099      	lsls	r1, r3, #2
 800cf5e:	3904      	subs	r1, #4
 800cf60:	5871      	ldr	r1, [r6, r1]
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800cf62:	b2dc      	uxtb	r4, r3
 800cf64:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cf66:	42a9      	cmp	r1, r5
 800cf68:	d0f2      	beq.n	800cf50 <ReadPortsDirMSG+0x18>
	for (int p = 1; p <= NumOfPorts; p++) {
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	2b06      	cmp	r3, #6
 800cf6e:	d1f5      	bne.n	800cf5c <ReadPortsDirMSG+0x24>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800cf70:	2114      	movs	r1, #20
 800cf72:	f7fb f8d9 	bl	8008128 <SendMessageToModule>
	return result;
}
 800cf76:	2000      	movs	r0, #0
 800cf78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf7a:	46c0      	nop			; (mov r8, r8)
 800cf7c:	20006a50 	.word	0x20006a50
 800cf80:	20000b4c 	.word	0x20000b4c
 800cf84:	0801736c 	.word	0x0801736c

0800cf88 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800cf88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf8a:	46c6      	mov	lr, r8
 800cf8c:	4b12      	ldr	r3, [pc, #72]	; (800cfd8 <UpdateMyPortsDir+0x50>)
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800cf8e:	2580      	movs	r5, #128	; 0x80
{
 800cf90:	2400      	movs	r4, #0
 800cf92:	4698      	mov	r8, r3
 800cf94:	b500      	push	{lr}
 800cf96:	4811      	ldr	r0, [pc, #68]	; (800cfdc <UpdateMyPortsDir+0x54>)
 800cf98:	4f11      	ldr	r7, [pc, #68]	; (800cfe0 <UpdateMyPortsDir+0x58>)
 800cf9a:	4e12      	ldr	r6, [pc, #72]	; (800cfe4 <UpdateMyPortsDir+0x5c>)
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800cf9c:	022d      	lsls	r5, r5, #8
 800cf9e:	002a      	movs	r2, r5
 800cfa0:	4122      	asrs	r2, r4
 800cfa2:	7833      	ldrb	r3, [r6, #0]
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	005b      	lsls	r3, r3, #1
 800cfa8:	5afb      	ldrh	r3, [r7, r3]
 800cfaa:	421a      	tst	r2, r3
 800cfac:	d00a      	beq.n	800cfc4 <UpdateMyPortsDir+0x3c>
	if (huart != NULL) {
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d001      	beq.n	800cfb6 <UpdateMyPortsDir+0x2e>
 800cfb2:	f7ff fd77 	bl	800caa4 <SwapUartPins.part.0>
 800cfb6:	3401      	adds	r4, #1
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800cfb8:	2c05      	cmp	r4, #5
 800cfba:	d009      	beq.n	800cfd0 <UpdateMyPortsDir+0x48>
 800cfbc:	4642      	mov	r2, r8
 800cfbe:	00a3      	lsls	r3, r4, #2
 800cfc0:	5898      	ldr	r0, [r3, r2]
 800cfc2:	e7ec      	b.n	800cf9e <UpdateMyPortsDir+0x16>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	3401      	adds	r4, #1
 800cfc8:	f7ff ff62 	bl	800ce90 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800cfcc:	2c05      	cmp	r4, #5
 800cfce:	d1f5      	bne.n	800cfbc <UpdateMyPortsDir+0x34>
			SwapUartPins(GetUart(p), REVERSED);
		}
	}

	return result;
}
 800cfd0:	2000      	movs	r0, #0
 800cfd2:	bc04      	pop	{r2}
 800cfd4:	4690      	mov	r8, r2
 800cfd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfd8:	0801736c 	.word	0x0801736c
 800cfdc:	20006a50 	.word	0x20006a50
 800cfe0:	20006d34 	.word	0x20006d34
 800cfe4:	20000aa8 	.word	0x20000aa8

0800cfe8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800cfe8:	4816      	ldr	r0, [pc, #88]	; (800d044 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800cfea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800cfec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800cfee:	e003      	b.n	800cff8 <LoopCopyDataInit>

0800cff0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800cff0:	4b15      	ldr	r3, [pc, #84]	; (800d048 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800cff2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800cff4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800cff6:	3104      	adds	r1, #4

0800cff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800cff8:	4814      	ldr	r0, [pc, #80]	; (800d04c <LoopForever+0xc>)
  ldr r3, =_edata
 800cffa:	4b15      	ldr	r3, [pc, #84]	; (800d050 <LoopForever+0x10>)
  adds r2, r0, r1
 800cffc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800cffe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d000:	d3f6      	bcc.n	800cff0 <CopyDataInit>
  ldr r2, =_sbss
 800d002:	4a14      	ldr	r2, [pc, #80]	; (800d054 <LoopForever+0x14>)
  b LoopFillZerobss
 800d004:	e002      	b.n	800d00c <LoopFillZerobss>

0800d006 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d006:	2300      	movs	r3, #0
  str  r3, [r2]
 800d008:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d00a:	3204      	adds	r2, #4

0800d00c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d00c:	4b12      	ldr	r3, [pc, #72]	; (800d058 <LoopForever+0x18>)
  cmp r2, r3
 800d00e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d010:	d3f9      	bcc.n	800d006 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d012:	4812      	ldr	r0, [pc, #72]	; (800d05c <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d014:	4912      	ldr	r1, [pc, #72]	; (800d060 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d016:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d018:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d01a:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d01c:	d005      	beq.n	800d02a <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d01e:	f000 f82b 	bl	800d078 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d022:	f005 f83d 	bl	80120a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d026:	f004 ffed 	bl	8012004 <main>

0800d02a <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d02a:	480e      	ldr	r0, [pc, #56]	; (800d064 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d02c:	490e      	ldr	r1, [pc, #56]	; (800d068 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d02e:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d030:	480e      	ldr	r0, [pc, #56]	; (800d06c <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d032:	490d      	ldr	r1, [pc, #52]	; (800d068 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d034:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d036:	480e      	ldr	r0, [pc, #56]	; (800d070 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d038:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d03a:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d03c:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d03e:	4700      	bx	r0

0800d040 <LoopForever>:


LoopForever:
    b LoopForever
 800d040:	e7fe      	b.n	800d040 <LoopForever>
 800d042:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d044:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d048:	0801a15c 	.word	0x0801a15c
  ldr r0, =_sdata
 800d04c:	20000010 	.word	0x20000010
  ldr r3, =_edata
 800d050:	20000a88 	.word	0x20000a88
  ldr r2, =_sbss
 800d054:	20000a88 	.word	0x20000a88
  ldr r3, = _ebss
 800d058:	20006dd8 	.word	0x20006dd8
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d05c:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d060:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d064:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d068:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d06c:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d070:	1fffd800 	.word	0x1fffd800

0800d074 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d074:	e7fe      	b.n	800d074 <CEC_CAN_IRQHandler>
	...

0800d078 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d078:	2101      	movs	r1, #1
 800d07a:	4b11      	ldr	r3, [pc, #68]	; (800d0c0 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d07c:	4811      	ldr	r0, [pc, #68]	; (800d0c4 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	430a      	orrs	r2, r1
 800d082:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d084:	685a      	ldr	r2, [r3, #4]
 800d086:	4002      	ands	r2, r0
 800d088:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	480e      	ldr	r0, [pc, #56]	; (800d0c8 <SystemInit+0x50>)
 800d08e:	4002      	ands	r2, r0
 800d090:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	480d      	ldr	r0, [pc, #52]	; (800d0cc <SystemInit+0x54>)
 800d096:	4002      	ands	r2, r0
 800d098:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d09a:	685a      	ldr	r2, [r3, #4]
 800d09c:	480c      	ldr	r0, [pc, #48]	; (800d0d0 <SystemInit+0x58>)
 800d09e:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d0a0:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d0a2:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0a6:	4382      	bics	r2, r0
 800d0a8:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d0aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0ac:	4809      	ldr	r0, [pc, #36]	; (800d0d4 <SystemInit+0x5c>)
 800d0ae:	4002      	ands	r2, r0
 800d0b0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d0b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0b4:	438a      	bics	r2, r1
 800d0b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	609a      	str	r2, [r3, #8]

}
 800d0bc:	4770      	bx	lr
 800d0be:	46c0      	nop			; (mov r8, r8)
 800d0c0:	40021000 	.word	0x40021000
 800d0c4:	08ffb80c 	.word	0x08ffb80c
 800d0c8:	fef6ffff 	.word	0xfef6ffff
 800d0cc:	fffbffff 	.word	0xfffbffff
 800d0d0:	ffc0ffff 	.word	0xffc0ffff
 800d0d4:	fff0feac 	.word	0xfff0feac

0800d0d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d0d8:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800d0da:	f000 fef9 	bl	800ded0 <vTaskStartScheduler>
  
  return osOK;
}
 800d0de:	2000      	movs	r0, #0
 800d0e0:	bd10      	pop	{r4, pc}
 800d0e2:	46c0      	nop			; (mov r8, r8)

0800d0e4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d0e4:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	d100      	bne.n	800d0ec <osDelay+0x8>
 800d0ea:	3001      	adds	r0, #1
 800d0ec:	f001 f814 	bl	800e118 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	bd10      	pop	{r4, pc}

0800d0f4 <osMutexRelease>:
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d0f4:	2300      	movs	r3, #0
{
 800d0f6:	b500      	push	{lr}
 800d0f8:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;
 800d0fa:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0fc:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00a      	beq.n	800d11a <osMutexRelease+0x26>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d104:	a901      	add	r1, sp, #4
 800d106:	f000 fb95 	bl	800d834 <xQueueGiveFromISR>
 800d10a:	2801      	cmp	r0, #1
 800d10c:	d10c      	bne.n	800d128 <osMutexRelease+0x34>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d10e:	9b01      	ldr	r3, [sp, #4]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10b      	bne.n	800d12c <osMutexRelease+0x38>
  osStatus result = osOK;
 800d114:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800d116:	b003      	add	sp, #12
 800d118:	bd00      	pop	{pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d11a:	2300      	movs	r3, #0
 800d11c:	2200      	movs	r2, #0
 800d11e:	2100      	movs	r1, #0
 800d120:	f000 fad4 	bl	800d6cc <xQueueGenericSend>
 800d124:	2801      	cmp	r0, #1
 800d126:	d0f5      	beq.n	800d114 <osMutexRelease+0x20>
    result = osErrorOS;
 800d128:	20ff      	movs	r0, #255	; 0xff
 800d12a:	e7f4      	b.n	800d116 <osMutexRelease+0x22>
    portEND_SWITCHING_ISR(taskWoken);
 800d12c:	2280      	movs	r2, #128	; 0x80
 800d12e:	4b02      	ldr	r3, [pc, #8]	; (800d138 <osMutexRelease+0x44>)
 800d130:	0552      	lsls	r2, r2, #21
 800d132:	601a      	str	r2, [r3, #0]
 800d134:	e7ee      	b.n	800d114 <osMutexRelease+0x20>
 800d136:	46c0      	nop			; (mov r8, r8)
 800d138:	e000ed04 	.word	0xe000ed04

0800d13c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800d13c:	b510      	push	{r4, lr}
 800d13e:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800d140:	2901      	cmp	r1, #1
 800d142:	d005      	beq.n	800d150 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800d144:	2100      	movs	r1, #0
 800d146:	f000 fab7 	bl	800d6b8 <xQueueCreateCountingSemaphore>
 800d14a:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800d14c:	0020      	movs	r0, r4
 800d14e:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800d150:	2203      	movs	r2, #3
 800d152:	2100      	movs	r1, #0
 800d154:	f000 fa8e 	bl	800d674 <xQueueGenericCreate>
 800d158:	1e04      	subs	r4, r0, #0
 800d15a:	d0f7      	beq.n	800d14c <osSemaphoreCreate+0x10>
 800d15c:	2300      	movs	r3, #0
 800d15e:	2200      	movs	r2, #0
 800d160:	2100      	movs	r1, #0
 800d162:	f000 fab3 	bl	800d6cc <xQueueGenericSend>
 800d166:	e7f1      	b.n	800d14c <osSemaphoreCreate+0x10>

0800d168 <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d168:	2300      	movs	r3, #0
{
 800d16a:	b500      	push	{lr}
 800d16c:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;  
 800d16e:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d170:	2800      	cmp	r0, #0
 800d172:	d01e      	beq.n	800d1b2 <osSemaphoreWait+0x4a>
 800d174:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00b      	beq.n	800d194 <osSemaphoreWait+0x2c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d17c:	aa01      	add	r2, sp, #4
 800d17e:	2100      	movs	r1, #0
 800d180:	f000 fc1e 	bl	800d9c0 <xQueueReceiveFromISR>
 800d184:	2801      	cmp	r0, #1
 800d186:	d10c      	bne.n	800d1a2 <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d188:	9b01      	ldr	r3, [sp, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10b      	bne.n	800d1a6 <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800d18e:	2000      	movs	r0, #0
}
 800d190:	b003      	add	sp, #12
 800d192:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d194:	000a      	movs	r2, r1
 800d196:	2300      	movs	r3, #0
 800d198:	2100      	movs	r1, #0
 800d19a:	f000 fb75 	bl	800d888 <xQueueGenericReceive>
 800d19e:	2801      	cmp	r0, #1
 800d1a0:	d0f5      	beq.n	800d18e <osSemaphoreWait+0x26>
      return osErrorOS;
 800d1a2:	20ff      	movs	r0, #255	; 0xff
 800d1a4:	e7f4      	b.n	800d190 <osSemaphoreWait+0x28>
	portEND_SWITCHING_ISR(taskWoken);
 800d1a6:	2280      	movs	r2, #128	; 0x80
 800d1a8:	4b03      	ldr	r3, [pc, #12]	; (800d1b8 <osSemaphoreWait+0x50>)
 800d1aa:	0552      	lsls	r2, r2, #21
 800d1ac:	601a      	str	r2, [r3, #0]
  return osOK;
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	e7ee      	b.n	800d190 <osSemaphoreWait+0x28>
    return osErrorParameter;
 800d1b2:	2080      	movs	r0, #128	; 0x80
 800d1b4:	e7ec      	b.n	800d190 <osSemaphoreWait+0x28>
 800d1b6:	46c0      	nop			; (mov r8, r8)
 800d1b8:	e000ed04 	.word	0xe000ed04

0800d1bc <osSemaphoreRelease>:
 800d1bc:	b510      	push	{r4, lr}
 800d1be:	f7ff ff99 	bl	800d0f4 <osMutexRelease>
 800d1c2:	bd10      	pop	{r4, pc}

0800d1c4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d1c4:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d1c6:	f001 f919 	bl	800e3fc <xTaskGetSchedulerState>
 800d1ca:	2801      	cmp	r0, #1
 800d1cc:	d001      	beq.n	800d1d2 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d1ce:	f001 fd33 	bl	800ec38 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d1d2:	bd10      	pop	{r4, pc}

0800d1d4 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d1d4:	b570      	push	{r4, r5, r6, lr}
 800d1d6:	0006      	movs	r6, r0

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d1d8:	2008      	movs	r0, #8
 800d1da:	f001 fd65 	bl	800eca8 <pvPortMalloc>
portBASE_TYPE xReturn = pdFAIL;
 800d1de:	2500      	movs	r5, #0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d1e0:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );

	if( pxNewListItem != NULL )
 800d1e2:	d00a      	beq.n	800d1fa <FreeRTOS_CLIRegisterCommand+0x26>
	{
		taskENTER_CRITICAL();
 800d1e4:	f001 fce6 	bl	800ebb4 <vPortEnterCritical>
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d1e8:	4b05      	ldr	r3, [pc, #20]	; (800d200 <FreeRTOS_CLIRegisterCommand+0x2c>)
			pxNewListItem->pxNext = NULL;
 800d1ea:	6065      	str	r5, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d1ec:	681a      	ldr	r2, [r3, #0]
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d1ee:	6026      	str	r6, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d1f0:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d1f2:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d1f4:	f001 fcea 	bl	800ebcc <vPortExitCritical>

		xReturn = pdPASS;
 800d1f8:	3501      	adds	r5, #1
	}

	return xReturn;
}
 800d1fa:	0028      	movs	r0, r5
 800d1fc:	bd70      	pop	{r4, r5, r6, pc}
 800d1fe:	46c0      	nop			; (mov r8, r8)
 800d200:	200000c8 	.word	0x200000c8

0800d204 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d206:	4657      	mov	r7, sl
 800d208:	46de      	mov	lr, fp
 800d20a:	464e      	mov	r6, r9
 800d20c:	4645      	mov	r5, r8
 800d20e:	b5e0      	push	{r5, r6, r7, lr}
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d210:	4f34      	ldr	r7, [pc, #208]	; (800d2e4 <FreeRTOS_CLIProcessCommand+0xe0>)
{
 800d212:	0006      	movs	r6, r0
	if( pxCommand == NULL )
 800d214:	683b      	ldr	r3, [r7, #0]
{
 800d216:	468a      	mov	sl, r1
 800d218:	4693      	mov	fp, r2
	if( pxCommand == NULL )
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00e      	beq.n	800d23c <FreeRTOS_CLIProcessCommand+0x38>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	0032      	movs	r2, r6
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	4659      	mov	r1, fp
 800d226:	4650      	mov	r0, sl
 800d228:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d100      	bne.n	800d230 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d22e:	6038      	str	r0, [r7, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d230:	bc3c      	pop	{r2, r3, r4, r5}
 800d232:	4690      	mov	r8, r2
 800d234:	4699      	mov	r9, r3
 800d236:	46a2      	mov	sl, r4
 800d238:	46ab      	mov	fp, r5
 800d23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d23c:	3320      	adds	r3, #32
 800d23e:	4699      	mov	r9, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d240:	4c29      	ldr	r4, [pc, #164]	; (800d2e8 <FreeRTOS_CLIProcessCommand+0xe4>)
 800d242:	3404      	adds	r4, #4
 800d244:	603c      	str	r4, [r7, #0]
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d246:	6823      	ldr	r3, [r4, #0]
 800d248:	681d      	ldr	r5, [r3, #0]
 800d24a:	4698      	mov	r8, r3
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d24c:	0028      	movs	r0, r5
 800d24e:	f7f2 ff63 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d252:	464a      	mov	r2, r9
 800d254:	5c33      	ldrb	r3, [r6, r0]
 800d256:	4393      	bics	r3, r2
 800d258:	d106      	bne.n	800d268 <FreeRTOS_CLIProcessCommand+0x64>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d25a:	0002      	movs	r2, r0
 800d25c:	0029      	movs	r1, r5
 800d25e:	0030      	movs	r0, r6
 800d260:	f005 fbe8 	bl	8012a34 <strncmp>
 800d264:	2800      	cmp	r0, #0
 800d266:	d00a      	beq.n	800d27e <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d268:	6864      	ldr	r4, [r4, #4]
 800d26a:	603c      	str	r4, [r7, #0]
 800d26c:	2c00      	cmp	r4, #0
 800d26e:	d1ea      	bne.n	800d246 <FreeRTOS_CLIProcessCommand+0x42>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d270:	465a      	mov	r2, fp
 800d272:	491e      	ldr	r1, [pc, #120]	; (800d2ec <FreeRTOS_CLIProcessCommand+0xe8>)
 800d274:	4650      	mov	r0, sl
 800d276:	f005 fbee 	bl	8012a56 <strncpy>
		xReturn = pdFALSE;
 800d27a:	2000      	movs	r0, #0
	return xReturn;
 800d27c:	e7d8      	b.n	800d230 <FreeRTOS_CLIProcessCommand+0x2c>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d27e:	4643      	mov	r3, r8
 800d280:	250c      	movs	r5, #12
 800d282:	575d      	ldrsb	r5, [r3, r5]
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	2d00      	cmp	r5, #0
 800d288:	db26      	blt.n	800d2d8 <FreeRTOS_CLIProcessCommand+0xd4>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d28a:	2200      	movs	r2, #0
 800d28c:	56b2      	ldrsb	r2, [r6, r2]
 800d28e:	2a00      	cmp	r2, #0
 800d290:	d025      	beq.n	800d2de <FreeRTOS_CLIProcessCommand+0xda>
 800d292:	0031      	movs	r1, r6
int8_t cParameters = 0;
 800d294:	2400      	movs	r4, #0
 800d296:	e005      	b.n	800d2a4 <FreeRTOS_CLIProcessCommand+0xa0>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d298:	2000      	movs	r0, #0
	while( *pcCommandString != 0x00 )
 800d29a:	2200      	movs	r2, #0
		}

		pcCommandString++;
 800d29c:	3101      	adds	r1, #1
	while( *pcCommandString != 0x00 )
 800d29e:	568a      	ldrsb	r2, [r1, r2]
 800d2a0:	2a00      	cmp	r2, #0
 800d2a2:	d007      	beq.n	800d2b4 <FreeRTOS_CLIProcessCommand+0xb0>
		if( ( *pcCommandString ) == ' ' )
 800d2a4:	2a20      	cmp	r2, #32
 800d2a6:	d1f7      	bne.n	800d298 <FreeRTOS_CLIProcessCommand+0x94>
			if( xLastCharacterWasSpace != pdTRUE )
 800d2a8:	2801      	cmp	r0, #1
 800d2aa:	d0f6      	beq.n	800d29a <FreeRTOS_CLIProcessCommand+0x96>
				cParameters++;
 800d2ac:	3401      	adds	r4, #1
 800d2ae:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d2b0:	2001      	movs	r0, #1
 800d2b2:	e7f2      	b.n	800d29a <FreeRTOS_CLIProcessCommand+0x96>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d2b4:	2801      	cmp	r0, #1
 800d2b6:	d00c      	beq.n	800d2d2 <FreeRTOS_CLIProcessCommand+0xce>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800d2b8:	42a5      	cmp	r5, r4
 800d2ba:	d00d      	beq.n	800d2d8 <FreeRTOS_CLIProcessCommand+0xd4>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d0d7      	beq.n	800d270 <FreeRTOS_CLIProcessCommand+0x6c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d2c0:	465a      	mov	r2, fp
 800d2c2:	490b      	ldr	r1, [pc, #44]	; (800d2f0 <FreeRTOS_CLIProcessCommand+0xec>)
 800d2c4:	4650      	mov	r0, sl
 800d2c6:	f005 fbc6 	bl	8012a56 <strncpy>
		pxCommand = NULL;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	2000      	movs	r0, #0
 800d2ce:	603b      	str	r3, [r7, #0]
 800d2d0:	e7ae      	b.n	800d230 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d2d2:	3c01      	subs	r4, #1
 800d2d4:	b264      	sxtb	r4, r4
 800d2d6:	e7ef      	b.n	800d2b8 <FreeRTOS_CLIProcessCommand+0xb4>
	else if( pxCommand != NULL )
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1a0      	bne.n	800d21e <FreeRTOS_CLIProcessCommand+0x1a>
 800d2dc:	e7c8      	b.n	800d270 <FreeRTOS_CLIProcessCommand+0x6c>
int8_t cParameters = 0;
 800d2de:	2400      	movs	r4, #0
 800d2e0:	e7ea      	b.n	800d2b8 <FreeRTOS_CLIProcessCommand+0xb4>
 800d2e2:	46c0      	nop			; (mov r8, r8)
 800d2e4:	20002480 	.word	0x20002480
 800d2e8:	200000c8 	.word	0x200000c8
 800d2ec:	08019d60 	.word	0x08019d60
 800d2f0:	08019d08 	.word	0x08019d08

0800d2f4 <FreeRTOS_CLIGetOutputBuffer>:
}
 800d2f4:	4800      	ldr	r0, [pc, #0]	; (800d2f8 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800d2f6:	4770      	bx	lr
 800d2f8:	20002490 	.word	0x20002490

0800d2fc <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800d2fc:	2300      	movs	r3, #0
{
 800d2fe:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800d300:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800d302:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800d304:	2900      	cmp	r1, #0
 800d306:	d021      	beq.n	800d34c <FreeRTOS_CLIGetParameter+0x50>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d308:	2300      	movs	r3, #0
 800d30a:	56c3      	ldrsb	r3, [r0, r3]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d105      	bne.n	800d31c <FreeRTOS_CLIGetParameter+0x20>
 800d310:	e01c      	b.n	800d34c <FreeRTOS_CLIGetParameter+0x50>
 800d312:	2300      	movs	r3, #0
			pcCommandString++;
 800d314:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d316:	56c3      	ldrsb	r3, [r0, r3]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d017      	beq.n	800d34c <FreeRTOS_CLIGetParameter+0x50>
 800d31c:	2b20      	cmp	r3, #32
 800d31e:	d1f8      	bne.n	800d312 <FreeRTOS_CLIGetParameter+0x16>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d320:	2300      	movs	r3, #0
			pcCommandString++;
 800d322:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d324:	56c3      	ldrsb	r3, [r0, r3]
 800d326:	2b20      	cmp	r3, #32
 800d328:	d0fa      	beq.n	800d320 <FreeRTOS_CLIGetParameter+0x24>
		if( *pcCommandString != 0x00 )
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00e      	beq.n	800d34c <FreeRTOS_CLIGetParameter+0x50>
			uxParametersFound++;
 800d32e:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800d330:	42a1      	cmp	r1, r4
 800d332:	d1e9      	bne.n	800d308 <FreeRTOS_CLIGetParameter+0xc>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d334:	2120      	movs	r1, #32
 800d336:	7803      	ldrb	r3, [r0, #0]
 800d338:	438b      	bics	r3, r1
 800d33a:	d007      	beq.n	800d34c <FreeRTOS_CLIGetParameter+0x50>
 800d33c:	2300      	movs	r3, #0
 800d33e:	2420      	movs	r4, #32
					( *pxParameterStringLength )++;
 800d340:	3301      	adds	r3, #1
 800d342:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d344:	5cc1      	ldrb	r1, [r0, r3]
 800d346:	43a1      	bics	r1, r4
 800d348:	d1fa      	bne.n	800d340 <FreeRTOS_CLIGetParameter+0x44>
 800d34a:	e000      	b.n	800d34e <FreeRTOS_CLIGetParameter+0x52>
					pcReturn = NULL;
 800d34c:	2000      	movs	r0, #0
}
 800d34e:	bd10      	pop	{r4, pc}

0800d350 <prvHelpCommand>:
{
 800d350:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d352:	46ce      	mov	lr, r9
 800d354:	4647      	mov	r7, r8
portBASE_TYPE xParameterStringLength1 = 0;
 800d356:	2300      	movs	r3, #0
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b083      	sub	sp, #12
 800d35c:	0004      	movs	r4, r0
 800d35e:	000d      	movs	r5, r1
 800d360:	0010      	movs	r0, r2
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d362:	2101      	movs	r1, #1
 800d364:	aa01      	add	r2, sp, #4
portBASE_TYPE xParameterStringLength1 = 0;
 800d366:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d368:	f7ff ffc8 	bl	800d2fc <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800d36c:	2800      	cmp	r0, #0
 800d36e:	d024      	beq.n	800d3ba <prvHelpCommand+0x6a>
 800d370:	2206      	movs	r2, #6
 800d372:	4931      	ldr	r1, [pc, #196]	; (800d438 <prvHelpCommand+0xe8>)
 800d374:	f005 fb5e 	bl	8012a34 <strncmp>
 800d378:	1e07      	subs	r7, r0, #0
 800d37a:	d118      	bne.n	800d3ae <prvHelpCommand+0x5e>
		if( str == NumOfParamsHelpStrings )
 800d37c:	4b2f      	ldr	r3, [pc, #188]	; (800d43c <prvHelpCommand+0xec>)
 800d37e:	4698      	mov	r8, r3
 800d380:	791b      	ldrb	r3, [r3, #4]
 800d382:	2b07      	cmp	r3, #7
 800d384:	d047      	beq.n	800d416 <prvHelpCommand+0xc6>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d386:	1c5a      	adds	r2, r3, #1
 800d388:	b2d2      	uxtb	r2, r2
 800d38a:	4691      	mov	r9, r2
 800d38c:	4642      	mov	r2, r8
 800d38e:	4649      	mov	r1, r9
 800d390:	7111      	strb	r1, [r2, #4]
 800d392:	4a2b      	ldr	r2, [pc, #172]	; (800d440 <prvHelpCommand+0xf0>)
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	5899      	ldr	r1, [r3, r2]
 800d398:	0020      	movs	r0, r4
 800d39a:	002a      	movs	r2, r5
 800d39c:	f005 fb5b 	bl	8012a56 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800d3a0:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800d3a2:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800d3a4:	2b07      	cmp	r3, #7
 800d3a6:	d102      	bne.n	800d3ae <prvHelpCommand+0x5e>
			xReturn = pdFALSE; str = 0;
 800d3a8:	4643      	mov	r3, r8
 800d3aa:	2600      	movs	r6, #0
 800d3ac:	711f      	strb	r7, [r3, #4]
}
 800d3ae:	0030      	movs	r0, r6
 800d3b0:	b003      	add	sp, #12
 800d3b2:	bc0c      	pop	{r2, r3}
 800d3b4:	4690      	mov	r8, r2
 800d3b6:	4699      	mov	r9, r3
 800d3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800d3ba:	4f20      	ldr	r7, [pc, #128]	; (800d43c <prvHelpCommand+0xec>)
 800d3bc:	68be      	ldr	r6, [r7, #8]
 800d3be:	2e00      	cmp	r6, #0
 800d3c0:	d020      	beq.n	800d404 <prvHelpCommand+0xb4>
 800d3c2:	7b3b      	ldrb	r3, [r7, #12]
 800d3c4:	1c5a      	adds	r2, r3, #1
 800d3c6:	b2d2      	uxtb	r2, r2
 800d3c8:	4690      	mov	r8, r2
 800d3ca:	6832      	ldr	r2, [r6, #0]
 800d3cc:	6851      	ldr	r1, [r2, #4]
		if (counter > numOfBosCommands) {
 800d3ce:	4a1d      	ldr	r2, [pc, #116]	; (800d444 <prvHelpCommand+0xf4>)
 800d3d0:	7812      	ldrb	r2, [r2, #0]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d22a      	bcs.n	800d42c <prvHelpCommand+0xdc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800d3d6:	002a      	movs	r2, r5
 800d3d8:	0020      	movs	r0, r4
 800d3da:	3a08      	subs	r2, #8
 800d3dc:	3008      	adds	r0, #8
 800d3de:	f005 fb3a 	bl	8012a56 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800d3e2:	1c60      	adds	r0, r4, #1
 800d3e4:	4918      	ldr	r1, [pc, #96]	; (800d448 <prvHelpCommand+0xf8>)
 800d3e6:	f005 fb1d 	bl	8012a24 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800d3ea:	2328      	movs	r3, #40	; 0x28
 800d3ec:	7023      	strb	r3, [r4, #0]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	71a3      	strb	r3, [r4, #6]
 800d3f2:	3b09      	subs	r3, #9
 800d3f4:	71e3      	strb	r3, [r4, #7]
		counter++;
 800d3f6:	4643      	mov	r3, r8
		pxCommand = pxCommand->pxNext;
 800d3f8:	6876      	ldr	r6, [r6, #4]
		counter++;
 800d3fa:	733b      	strb	r3, [r7, #12]
		pxCommand = pxCommand->pxNext;
 800d3fc:	60be      	str	r6, [r7, #8]
			xReturn = pdTRUE;
 800d3fe:	1e73      	subs	r3, r6, #1
 800d400:	419e      	sbcs	r6, r3
 800d402:	e7d4      	b.n	800d3ae <prvHelpCommand+0x5e>
			counter = 1;
 800d404:	2301      	movs	r3, #1
			pxCommand = &xRegisteredCommands;
 800d406:	4e11      	ldr	r6, [pc, #68]	; (800d44c <prvHelpCommand+0xfc>)
			counter = 1;
 800d408:	733b      	strb	r3, [r7, #12]
			pxCommand = &xRegisteredCommands;
 800d40a:	3604      	adds	r6, #4
			counter = 1;
 800d40c:	3301      	adds	r3, #1
 800d40e:	4698      	mov	r8, r3
			pxCommand = &xRegisteredCommands;
 800d410:	60be      	str	r6, [r7, #8]
			counter = 1;
 800d412:	3b01      	subs	r3, #1
 800d414:	e7d9      	b.n	800d3ca <prvHelpCommand+0x7a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d416:	4642      	mov	r2, r8
 800d418:	3b06      	subs	r3, #6
 800d41a:	7113      	strb	r3, [r2, #4]
 800d41c:	4b08      	ldr	r3, [pc, #32]	; (800d440 <prvHelpCommand+0xf0>)
 800d41e:	002a      	movs	r2, r5
 800d420:	6819      	ldr	r1, [r3, #0]
 800d422:	0020      	movs	r0, r4
 800d424:	f005 fb17 	bl	8012a56 <strncpy>
			xReturn = pdTRUE;
 800d428:	2601      	movs	r6, #1
 800d42a:	e7c0      	b.n	800d3ae <prvHelpCommand+0x5e>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800d42c:	002a      	movs	r2, r5
 800d42e:	0020      	movs	r0, r4
 800d430:	f005 fb11 	bl	8012a56 <strncpy>
 800d434:	e7df      	b.n	800d3f6 <prvHelpCommand+0xa6>
 800d436:	46c0      	nop			; (mov r8, r8)
 800d438:	0801862c 	.word	0x0801862c
 800d43c:	20002480 	.word	0x20002480
 800d440:	2000003c 	.word	0x2000003c
 800d444:	200067f0 	.word	0x200067f0
 800d448:	08016e50 	.word	0x08016e50
 800d44c:	200000c8 	.word	0x200000c8

0800d450 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d450:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d452:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d454:	3308      	adds	r3, #8
 800d456:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d458:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d45a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d45c:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d45e:	4252      	negs	r2, r2
 800d460:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d462:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d464:	4770      	bx	lr
 800d466:	46c0      	nop			; (mov r8, r8)

0800d468 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d468:	2300      	movs	r3, #0
 800d46a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d46c:	4770      	bx	lr
 800d46e:	46c0      	nop			; (mov r8, r8)

0800d470 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d470:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d472:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d474:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d476:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d478:	689a      	ldr	r2, [r3, #8]
 800d47a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d47c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d47e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d480:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d482:	3301      	adds	r3, #1
 800d484:	6003      	str	r3, [r0, #0]
}
 800d486:	4770      	bx	lr

0800d488 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d488:	0002      	movs	r2, r0
{
 800d48a:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d48c:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d48e:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800d490:	1c63      	adds	r3, r4, #1
 800d492:	d101      	bne.n	800d498 <vListInsert+0x10>
 800d494:	e00d      	b.n	800d4b2 <vListInsert+0x2a>
 800d496:	001a      	movs	r2, r3
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d498:	6853      	ldr	r3, [r2, #4]
 800d49a:	681d      	ldr	r5, [r3, #0]
 800d49c:	42a5      	cmp	r5, r4
 800d49e:	d9fa      	bls.n	800d496 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d4a0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d4a2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d4a4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800d4a6:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800d4a8:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800d4aa:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d4ac:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d4ae:	6003      	str	r3, [r0, #0]
}
 800d4b0:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800d4b2:	6902      	ldr	r2, [r0, #16]
 800d4b4:	6853      	ldr	r3, [r2, #4]
 800d4b6:	e7f3      	b.n	800d4a0 <vListInsert+0x18>

0800d4b8 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d4b8:	6842      	ldr	r2, [r0, #4]
 800d4ba:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d4bc:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d4be:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d4c0:	6881      	ldr	r1, [r0, #8]
 800d4c2:	604a      	str	r2, [r1, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d4c4:	685a      	ldr	r2, [r3, #4]
 800d4c6:	4282      	cmp	r2, r0
 800d4c8:	d100      	bne.n	800d4cc <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d4ca:	6059      	str	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	1e50      	subs	r0, r2, #1
 800d4d4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800d4d6:	4770      	bx	lr

0800d4d8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d4d8:	b570      	push	{r4, r5, r6, lr}
 800d4da:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d4dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800d4de:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d4e0:	2a00      	cmp	r2, #0
 800d4e2:	d107      	bne.n	800d4f4 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4e4:	6805      	ldr	r5, [r0, #0]
 800d4e6:	2d00      	cmp	r5, #0
 800d4e8:	d02d      	beq.n	800d546 <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800d4ea:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800d4ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800d4f2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d4f4:	2d00      	cmp	r5, #0
 800d4f6:	d10e      	bne.n	800d516 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d4f8:	6880      	ldr	r0, [r0, #8]
 800d4fa:	f005 f854 	bl	80125a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d4fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d500:	68a3      	ldr	r3, [r4, #8]
 800d502:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d504:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d506:	4463      	add	r3, ip
 800d508:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d3ed      	bcc.n	800d4ea <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d50e:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800d510:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d512:	60a3      	str	r3, [r4, #8]
 800d514:	e7ea      	b.n	800d4ec <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d516:	68c0      	ldr	r0, [r0, #12]
 800d518:	f005 f845 	bl	80125a6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d51c:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d51e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d520:	425a      	negs	r2, r3
 800d522:	68e3      	ldr	r3, [r4, #12]
 800d524:	189b      	adds	r3, r3, r2
 800d526:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d528:	428b      	cmp	r3, r1
 800d52a:	d203      	bcs.n	800d534 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d52c:	6863      	ldr	r3, [r4, #4]
 800d52e:	469c      	mov	ip, r3
 800d530:	4462      	add	r2, ip
 800d532:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d534:	2d02      	cmp	r5, #2
 800d536:	d1d8      	bne.n	800d4ea <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d538:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d0d5      	beq.n	800d4ea <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800d53e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d540:	3b01      	subs	r3, #1
 800d542:	63a3      	str	r3, [r4, #56]	; 0x38
 800d544:	e7d1      	b.n	800d4ea <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d546:	6840      	ldr	r0, [r0, #4]
 800d548:	f000 ff98 	bl	800e47c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800d54c:	6065      	str	r5, [r4, #4]
 800d54e:	e7cd      	b.n	800d4ec <prvCopyDataToQueue+0x14>

0800d550 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d550:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800d552:	b510      	push	{r4, lr}
 800d554:	000b      	movs	r3, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d556:	2a00      	cmp	r2, #0
 800d558:	d008      	beq.n	800d56c <prvCopyDataFromQueue+0x1c>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d55a:	68c1      	ldr	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d55c:	6844      	ldr	r4, [r0, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d55e:	1889      	adds	r1, r1, r2
 800d560:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d562:	42a1      	cmp	r1, r4
 800d564:	d203      	bcs.n	800d56e <prvCopyDataFromQueue+0x1e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d566:	0018      	movs	r0, r3
 800d568:	f005 f81d 	bl	80125a6 <memcpy>
	}
}
 800d56c:	bd10      	pop	{r4, pc}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d56e:	6801      	ldr	r1, [r0, #0]
 800d570:	60c1      	str	r1, [r0, #12]
 800d572:	e7f8      	b.n	800d566 <prvCopyDataFromQueue+0x16>

0800d574 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d574:	b570      	push	{r4, r5, r6, lr}
 800d576:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d578:	f001 fb1c 	bl	800ebb4 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800d57c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d57e:	2b00      	cmp	r3, #0
 800d580:	dd1b      	ble.n	800d5ba <prvUnlockQueue+0x46>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d584:	2b00      	cmp	r3, #0
 800d586:	d018      	beq.n	800d5ba <prvUnlockQueue+0x46>
 800d588:	0025      	movs	r5, r4
 800d58a:	3524      	adds	r5, #36	; 0x24
 800d58c:	e008      	b.n	800d5a0 <prvUnlockQueue+0x2c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800d58e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d590:	3b01      	subs	r3, #1
 800d592:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800d594:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d596:	2b00      	cmp	r3, #0
 800d598:	dd0f      	ble.n	800d5ba <prvUnlockQueue+0x46>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d59a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00c      	beq.n	800d5ba <prvUnlockQueue+0x46>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5a0:	0028      	movs	r0, r5
 800d5a2:	f000 feb7 	bl	800e314 <xTaskRemoveFromEventList>
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d0f1      	beq.n	800d58e <prvUnlockQueue+0x1a>
						vTaskMissedYield();
 800d5aa:	f000 ff21 	bl	800e3f0 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800d5ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800d5b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	dcef      	bgt.n	800d59a <prvUnlockQueue+0x26>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	425b      	negs	r3, r3
 800d5be:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800d5c0:	f001 fb04 	bl	800ebcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d5c4:	f001 faf6 	bl	800ebb4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800d5c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	dd1b      	ble.n	800d606 <prvUnlockQueue+0x92>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5ce:	6923      	ldr	r3, [r4, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d018      	beq.n	800d606 <prvUnlockQueue+0x92>
 800d5d4:	0025      	movs	r5, r4
 800d5d6:	3510      	adds	r5, #16
 800d5d8:	e008      	b.n	800d5ec <prvUnlockQueue+0x78>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800d5da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d5dc:	3b01      	subs	r3, #1
 800d5de:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800d5e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	dd0f      	ble.n	800d606 <prvUnlockQueue+0x92>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5e6:	6923      	ldr	r3, [r4, #16]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00c      	beq.n	800d606 <prvUnlockQueue+0x92>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5ec:	0028      	movs	r0, r5
 800d5ee:	f000 fe91 	bl	800e314 <xTaskRemoveFromEventList>
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	d0f1      	beq.n	800d5da <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800d5f6:	f000 fefb 	bl	800e3f0 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800d5fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d5fc:	3b01      	subs	r3, #1
 800d5fe:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800d600:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d602:	2b00      	cmp	r3, #0
 800d604:	dcef      	bgt.n	800d5e6 <prvUnlockQueue+0x72>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800d606:	2301      	movs	r3, #1
 800d608:	425b      	negs	r3, r3
 800d60a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d60c:	f001 fade 	bl	800ebcc <vPortExitCritical>
}
 800d610:	bd70      	pop	{r4, r5, r6, pc}
 800d612:	46c0      	nop			; (mov r8, r8)

0800d614 <xQueueGenericReset>:
{
 800d614:	b570      	push	{r4, r5, r6, lr}
 800d616:	0004      	movs	r4, r0
 800d618:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800d61a:	f001 facb 	bl	800ebb4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d61e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d620:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d622:	6822      	ldr	r2, [r4, #0]
 800d624:	434b      	muls	r3, r1
 800d626:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d628:	1a5b      	subs	r3, r3, r1
 800d62a:	18d3      	adds	r3, r2, r3
 800d62c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800d62e:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d630:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d632:	2000      	movs	r0, #0
		pxQueue->xRxLock = queueUNLOCKED;
 800d634:	425b      	negs	r3, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d636:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d638:	60a2      	str	r2, [r4, #8]
		pxQueue->xRxLock = queueUNLOCKED;
 800d63a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800d63c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800d63e:	2d00      	cmp	r5, #0
 800d640:	d10f      	bne.n	800d662 <xQueueGenericReset+0x4e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d642:	6923      	ldr	r3, [r4, #16]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d103      	bne.n	800d650 <xQueueGenericReset+0x3c>
	taskEXIT_CRITICAL();
 800d648:	f001 fac0 	bl	800ebcc <vPortExitCritical>
}
 800d64c:	2001      	movs	r0, #1
 800d64e:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800d650:	0020      	movs	r0, r4
 800d652:	3010      	adds	r0, #16
 800d654:	f000 fe5e 	bl	800e314 <xTaskRemoveFromEventList>
 800d658:	2801      	cmp	r0, #1
 800d65a:	d1f5      	bne.n	800d648 <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
 800d65c:	f001 fa9e 	bl	800eb9c <vPortYield>
 800d660:	e7f2      	b.n	800d648 <xQueueGenericReset+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d662:	0020      	movs	r0, r4
 800d664:	3010      	adds	r0, #16
 800d666:	f7ff fef3 	bl	800d450 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d66a:	0020      	movs	r0, r4
 800d66c:	3024      	adds	r0, #36	; 0x24
 800d66e:	f7ff feef 	bl	800d450 <vListInitialise>
 800d672:	e7e9      	b.n	800d648 <xQueueGenericReset+0x34>

0800d674 <xQueueGenericCreate>:
{
 800d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d676:	0006      	movs	r6, r0
 800d678:	000d      	movs	r5, r1
 800d67a:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d67c:	2900      	cmp	r1, #0
 800d67e:	d009      	beq.n	800d694 <xQueueGenericCreate+0x20>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d680:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d682:	3055      	adds	r0, #85	; 0x55
 800d684:	f001 fb10 	bl	800eca8 <pvPortMalloc>
 800d688:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800d68a:	d013      	beq.n	800d6b4 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800d68c:	0003      	movs	r3, r0
 800d68e:	3354      	adds	r3, #84	; 0x54
 800d690:	6003      	str	r3, [r0, #0]
 800d692:	e005      	b.n	800d6a0 <xQueueGenericCreate+0x2c>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d694:	2054      	movs	r0, #84	; 0x54
 800d696:	f001 fb07 	bl	800eca8 <pvPortMalloc>
 800d69a:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800d69c:	d00a      	beq.n	800d6b4 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d69e:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800d6a0:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800d6a2:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6a4:	2101      	movs	r1, #1
 800d6a6:	0020      	movs	r0, r4
 800d6a8:	f7ff ffb4 	bl	800d614 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800d6ac:	2350      	movs	r3, #80	; 0x50
 800d6ae:	54e7      	strb	r7, [r4, r3]
}
 800d6b0:	0020      	movs	r0, r4
 800d6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
QueueHandle_t xReturn = NULL;
 800d6b4:	2400      	movs	r4, #0
 800d6b6:	e7fb      	b.n	800d6b0 <xQueueGenericCreate+0x3c>

0800d6b8 <xQueueCreateCountingSemaphore>:
	{
 800d6b8:	b510      	push	{r4, lr}
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d6ba:	2202      	movs	r2, #2
	{
 800d6bc:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d6be:	2100      	movs	r1, #0
 800d6c0:	f7ff ffd8 	bl	800d674 <xQueueGenericCreate>
		if( xHandle != NULL )
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d000      	beq.n	800d6ca <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d6c8:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800d6ca:	bd10      	pop	{r4, pc}

0800d6cc <xQueueGenericSend>:
{
 800d6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ce:	46c6      	mov	lr, r8
 800d6d0:	0004      	movs	r4, r0
 800d6d2:	b500      	push	{lr}
 800d6d4:	b084      	sub	sp, #16
 800d6d6:	9201      	str	r2, [sp, #4]
 800d6d8:	001e      	movs	r6, r3
 800d6da:	4688      	mov	r8, r1
		taskENTER_CRITICAL();
 800d6dc:	f001 fa6a 	bl	800ebb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d6e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d6e4:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d6e6:	2700      	movs	r7, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d330      	bcc.n	800d74e <xQueueGenericSend+0x82>
 800d6ec:	2e02      	cmp	r6, #2
 800d6ee:	d02e      	beq.n	800d74e <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6f0:	9b01      	ldr	r3, [sp, #4]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d052      	beq.n	800d79c <xQueueGenericSend+0xd0>
				else if( xEntryTimeSet == pdFALSE )
 800d6f6:	2d00      	cmp	r5, #0
 800d6f8:	d03a      	beq.n	800d770 <xQueueGenericSend+0xa4>
		taskEXIT_CRITICAL();
 800d6fa:	f001 fa67 	bl	800ebcc <vPortExitCritical>
		vTaskSuspendAll();
 800d6fe:	f000 fc0f 	bl	800df20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d702:	f001 fa57 	bl	800ebb4 <vPortEnterCritical>
 800d706:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d708:	3301      	adds	r3, #1
 800d70a:	d100      	bne.n	800d70e <xQueueGenericSend+0x42>
 800d70c:	6467      	str	r7, [r4, #68]	; 0x44
 800d70e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d710:	3301      	adds	r3, #1
 800d712:	d100      	bne.n	800d716 <xQueueGenericSend+0x4a>
 800d714:	64a7      	str	r7, [r4, #72]	; 0x48
 800d716:	f001 fa59 	bl	800ebcc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d71a:	a901      	add	r1, sp, #4
 800d71c:	a802      	add	r0, sp, #8
 800d71e:	f000 fe3b 	bl	800e398 <xTaskCheckForTimeOut>
 800d722:	2800      	cmp	r0, #0
 800d724:	d13e      	bne.n	800d7a4 <xQueueGenericSend+0xd8>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d726:	f001 fa45 	bl	800ebb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d72a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d72c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d72e:	4293      	cmp	r3, r2
 800d730:	d022      	beq.n	800d778 <xQueueGenericSend+0xac>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d732:	f001 fa4b 	bl	800ebcc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d736:	0020      	movs	r0, r4
 800d738:	f7ff ff1c 	bl	800d574 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d73c:	f000 fc8e 	bl	800e05c <xTaskResumeAll>
 800d740:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800d742:	f001 fa37 	bl	800ebb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d746:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d748:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d2ce      	bcs.n	800d6ec <xQueueGenericSend+0x20>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d74e:	0032      	movs	r2, r6
 800d750:	4641      	mov	r1, r8
 800d752:	0020      	movs	r0, r4
 800d754:	f7ff fec0 	bl	800d4d8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d129      	bne.n	800d7b2 <xQueueGenericSend+0xe6>
					else if( xYieldRequired != pdFALSE )
 800d75e:	2800      	cmp	r0, #0
 800d760:	d12d      	bne.n	800d7be <xQueueGenericSend+0xf2>
				taskEXIT_CRITICAL();
 800d762:	f001 fa33 	bl	800ebcc <vPortExitCritical>
				return pdPASS;
 800d766:	2001      	movs	r0, #1
}
 800d768:	b004      	add	sp, #16
 800d76a:	bc04      	pop	{r2}
 800d76c:	4690      	mov	r8, r2
 800d76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vTaskSetTimeOutState( &xTimeOut );
 800d770:	a802      	add	r0, sp, #8
 800d772:	f000 fe05 	bl	800e380 <vTaskSetTimeOutState>
 800d776:	e7c0      	b.n	800d6fa <xQueueGenericSend+0x2e>
	taskEXIT_CRITICAL();
 800d778:	f001 fa28 	bl	800ebcc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d77c:	0020      	movs	r0, r4
 800d77e:	9901      	ldr	r1, [sp, #4]
 800d780:	3010      	adds	r0, #16
 800d782:	f000 fd99 	bl	800e2b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d786:	0020      	movs	r0, r4
 800d788:	f7ff fef4 	bl	800d574 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d78c:	f000 fc66 	bl	800e05c <xTaskResumeAll>
 800d790:	2800      	cmp	r0, #0
 800d792:	d1d5      	bne.n	800d740 <xQueueGenericSend+0x74>
					portYIELD_WITHIN_API();
 800d794:	f001 fa02 	bl	800eb9c <vPortYield>
 800d798:	2501      	movs	r5, #1
 800d79a:	e7d2      	b.n	800d742 <xQueueGenericSend+0x76>
					taskEXIT_CRITICAL();
 800d79c:	f001 fa16 	bl	800ebcc <vPortExitCritical>
					return errQUEUE_FULL;
 800d7a0:	2000      	movs	r0, #0
 800d7a2:	e7e1      	b.n	800d768 <xQueueGenericSend+0x9c>
			prvUnlockQueue( pxQueue );
 800d7a4:	0020      	movs	r0, r4
 800d7a6:	f7ff fee5 	bl	800d574 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7aa:	f000 fc57 	bl	800e05c <xTaskResumeAll>
			return errQUEUE_FULL;
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	e7da      	b.n	800d768 <xQueueGenericSend+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800d7b2:	0020      	movs	r0, r4
 800d7b4:	3024      	adds	r0, #36	; 0x24
 800d7b6:	f000 fdad 	bl	800e314 <xTaskRemoveFromEventList>
 800d7ba:	2801      	cmp	r0, #1
 800d7bc:	d1d1      	bne.n	800d762 <xQueueGenericSend+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 800d7be:	f001 f9ed 	bl	800eb9c <vPortYield>
 800d7c2:	e7ce      	b.n	800d762 <xQueueGenericSend+0x96>

0800d7c4 <xQueueGenericSendFromISR>:
{
 800d7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c6:	46ce      	mov	lr, r9
 800d7c8:	4647      	mov	r7, r8
 800d7ca:	0004      	movs	r4, r0
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	4691      	mov	r9, r2
 800d7d0:	001d      	movs	r5, r3
 800d7d2:	4688      	mov	r8, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7d4:	f001 fa04 	bl	800ebe0 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d7d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d7da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7dc:	0007      	movs	r7, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d30a      	bcc.n	800d7f8 <xQueueGenericSendFromISR+0x34>
			xReturn = errQUEUE_FULL;
 800d7e2:	2600      	movs	r6, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d7e4:	2d02      	cmp	r5, #2
 800d7e6:	d007      	beq.n	800d7f8 <xQueueGenericSendFromISR+0x34>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d7e8:	0038      	movs	r0, r7
 800d7ea:	f001 f9ff 	bl	800ebec <vClearInterruptMaskFromISR>
}
 800d7ee:	0030      	movs	r0, r6
 800d7f0:	bc0c      	pop	{r2, r3}
 800d7f2:	4690      	mov	r8, r2
 800d7f4:	4699      	mov	r9, r3
 800d7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7f8:	002a      	movs	r2, r5
 800d7fa:	4641      	mov	r1, r8
 800d7fc:	0020      	movs	r0, r4
 800d7fe:	f7ff fe6b 	bl	800d4d8 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800d802:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d804:	3301      	adds	r3, #1
 800d806:	d004      	beq.n	800d812 <xQueueGenericSendFromISR+0x4e>
				++( pxQueue->xTxLock );
 800d808:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d80a:	3301      	adds	r3, #1
 800d80c:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800d80e:	2601      	movs	r6, #1
 800d810:	e7ea      	b.n	800d7e8 <xQueueGenericSendFromISR+0x24>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d814:	2b00      	cmp	r3, #0
 800d816:	d0fa      	beq.n	800d80e <xQueueGenericSendFromISR+0x4a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d818:	0020      	movs	r0, r4
 800d81a:	3024      	adds	r0, #36	; 0x24
 800d81c:	f000 fd7a 	bl	800e314 <xTaskRemoveFromEventList>
 800d820:	2800      	cmp	r0, #0
 800d822:	d0f4      	beq.n	800d80e <xQueueGenericSendFromISR+0x4a>
							if( pxHigherPriorityTaskWoken != NULL )
 800d824:	464b      	mov	r3, r9
 800d826:	2b00      	cmp	r3, #0
 800d828:	d0f1      	beq.n	800d80e <xQueueGenericSendFromISR+0x4a>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d82a:	2301      	movs	r3, #1
 800d82c:	464a      	mov	r2, r9
			xReturn = pdPASS;
 800d82e:	2601      	movs	r6, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d830:	6013      	str	r3, [r2, #0]
 800d832:	e7d9      	b.n	800d7e8 <xQueueGenericSendFromISR+0x24>

0800d834 <xQueueGiveFromISR>:
{
 800d834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d836:	0004      	movs	r4, r0
 800d838:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d83a:	f001 f9d1 	bl	800ebe0 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800d83e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d840:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d842:	0006      	movs	r6, r0
			xReturn = errQUEUE_FULL;
 800d844:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800d846:	4293      	cmp	r3, r2
 800d848:	d209      	bcs.n	800d85e <xQueueGiveFromISR+0x2a>
			++( pxQueue->uxMessagesWaiting );
 800d84a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d84c:	3301      	adds	r3, #1
 800d84e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800d850:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d852:	3301      	adds	r3, #1
 800d854:	d008      	beq.n	800d868 <xQueueGiveFromISR+0x34>
				++( pxQueue->xTxLock );
 800d856:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d858:	3301      	adds	r3, #1
 800d85a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800d85c:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d85e:	0030      	movs	r0, r6
 800d860:	f001 f9c4 	bl	800ebec <vClearInterruptMaskFromISR>
}
 800d864:	0028      	movs	r0, r5
 800d866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d0f6      	beq.n	800d85c <xQueueGiveFromISR+0x28>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d86e:	0020      	movs	r0, r4
 800d870:	3024      	adds	r0, #36	; 0x24
 800d872:	f000 fd4f 	bl	800e314 <xTaskRemoveFromEventList>
 800d876:	2800      	cmp	r0, #0
 800d878:	d0f0      	beq.n	800d85c <xQueueGiveFromISR+0x28>
							if( pxHigherPriorityTaskWoken != NULL )
 800d87a:	2f00      	cmp	r7, #0
 800d87c:	d0ee      	beq.n	800d85c <xQueueGiveFromISR+0x28>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d87e:	2301      	movs	r3, #1
			xReturn = pdPASS;
 800d880:	2501      	movs	r5, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d882:	603b      	str	r3, [r7, #0]
 800d884:	e7eb      	b.n	800d85e <xQueueGiveFromISR+0x2a>
 800d886:	46c0      	nop			; (mov r8, r8)

0800d888 <xQueueGenericReceive>:
{
 800d888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d88a:	46c6      	mov	lr, r8
 800d88c:	0004      	movs	r4, r0
 800d88e:	b500      	push	{lr}
 800d890:	b084      	sub	sp, #16
 800d892:	4698      	mov	r8, r3
 800d894:	000f      	movs	r7, r1
 800d896:	9201      	str	r2, [sp, #4]
		taskENTER_CRITICAL();
 800d898:	f001 f98c 	bl	800ebb4 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d89c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d148      	bne.n	800d934 <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8a2:	9b01      	ldr	r3, [sp, #4]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d06a      	beq.n	800d97e <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8a8:	0026      	movs	r6, r4
					vTaskSetTimeOutState( &xTimeOut );
 800d8aa:	a802      	add	r0, sp, #8
 800d8ac:	f000 fd68 	bl	800e380 <vTaskSetTimeOutState>
		prvLockQueue( pxQueue );
 800d8b0:	2500      	movs	r5, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8b2:	3624      	adds	r6, #36	; 0x24
 800d8b4:	e017      	b.n	800d8e6 <xQueueGenericReceive+0x5e>
	taskEXIT_CRITICAL();
 800d8b6:	f001 f989 	bl	800ebcc <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8ba:	6823      	ldr	r3, [r4, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d056      	beq.n	800d96e <xQueueGenericReceive+0xe6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8c0:	9901      	ldr	r1, [sp, #4]
 800d8c2:	0030      	movs	r0, r6
 800d8c4:	f000 fcf8 	bl	800e2b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d8c8:	0020      	movs	r0, r4
 800d8ca:	f7ff fe53 	bl	800d574 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8ce:	f000 fbc5 	bl	800e05c <xTaskResumeAll>
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	d048      	beq.n	800d968 <xQueueGenericReceive+0xe0>
		taskENTER_CRITICAL();
 800d8d6:	f001 f96d 	bl	800ebb4 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d129      	bne.n	800d934 <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8e0:	9b01      	ldr	r3, [sp, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d04b      	beq.n	800d97e <xQueueGenericReceive+0xf6>
		taskEXIT_CRITICAL();
 800d8e6:	f001 f971 	bl	800ebcc <vPortExitCritical>
		vTaskSuspendAll();
 800d8ea:	f000 fb19 	bl	800df20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8ee:	f001 f961 	bl	800ebb4 <vPortEnterCritical>
 800d8f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	d100      	bne.n	800d8fa <xQueueGenericReceive+0x72>
 800d8f8:	6465      	str	r5, [r4, #68]	; 0x44
 800d8fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	d100      	bne.n	800d902 <xQueueGenericReceive+0x7a>
 800d900:	64a5      	str	r5, [r4, #72]	; 0x48
 800d902:	f001 f963 	bl	800ebcc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d906:	a901      	add	r1, sp, #4
 800d908:	a802      	add	r0, sp, #8
 800d90a:	f000 fd45 	bl	800e398 <xTaskCheckForTimeOut>
 800d90e:	2800      	cmp	r0, #0
 800d910:	d13c      	bne.n	800d98c <xQueueGenericReceive+0x104>
	taskENTER_CRITICAL();
 800d912:	f001 f94f 	bl	800ebb4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d0cc      	beq.n	800d8b6 <xQueueGenericReceive+0x2e>
	taskEXIT_CRITICAL();
 800d91c:	f001 f956 	bl	800ebcc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d920:	0020      	movs	r0, r4
 800d922:	f7ff fe27 	bl	800d574 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d926:	f000 fb99 	bl	800e05c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800d92a:	f001 f943 	bl	800ebb4 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d92e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d930:	2b00      	cmp	r3, #0
 800d932:	d0d5      	beq.n	800d8e0 <xQueueGenericReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d934:	0039      	movs	r1, r7
 800d936:	0020      	movs	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800d938:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d93a:	f7ff fe09 	bl	800d550 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800d93e:	4643      	mov	r3, r8
 800d940:	2b00      	cmp	r3, #0
 800d942:	d12a      	bne.n	800d99a <xQueueGenericReceive+0x112>
					--( pxQueue->uxMessagesWaiting );
 800d944:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d946:	3b01      	subs	r3, #1
 800d948:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d033      	beq.n	800d9b8 <xQueueGenericReceive+0x130>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d950:	6923      	ldr	r3, [r4, #16]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d025      	beq.n	800d9a2 <xQueueGenericReceive+0x11a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800d956:	0020      	movs	r0, r4
 800d958:	3010      	adds	r0, #16
 800d95a:	f000 fcdb 	bl	800e314 <xTaskRemoveFromEventList>
 800d95e:	2801      	cmp	r0, #1
 800d960:	d11f      	bne.n	800d9a2 <xQueueGenericReceive+0x11a>
							queueYIELD_IF_USING_PREEMPTION();
 800d962:	f001 f91b 	bl	800eb9c <vPortYield>
 800d966:	e01c      	b.n	800d9a2 <xQueueGenericReceive+0x11a>
					portYIELD_WITHIN_API();
 800d968:	f001 f918 	bl	800eb9c <vPortYield>
 800d96c:	e7b3      	b.n	800d8d6 <xQueueGenericReceive+0x4e>
						taskENTER_CRITICAL();
 800d96e:	f001 f921 	bl	800ebb4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d972:	6860      	ldr	r0, [r4, #4]
 800d974:	f000 fd4e 	bl	800e414 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800d978:	f001 f928 	bl	800ebcc <vPortExitCritical>
 800d97c:	e7a0      	b.n	800d8c0 <xQueueGenericReceive+0x38>
					taskEXIT_CRITICAL();
 800d97e:	f001 f925 	bl	800ebcc <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d982:	2000      	movs	r0, #0
}
 800d984:	b004      	add	sp, #16
 800d986:	bc04      	pop	{r2}
 800d988:	4690      	mov	r8, r2
 800d98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 800d98c:	0020      	movs	r0, r4
 800d98e:	f7ff fdf1 	bl	800d574 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d992:	f000 fb63 	bl	800e05c <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800d996:	2000      	movs	r0, #0
 800d998:	e7f4      	b.n	800d984 <xQueueGenericReceive+0xfc>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d99a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800d99c:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d103      	bne.n	800d9aa <xQueueGenericReceive+0x122>
				taskEXIT_CRITICAL();
 800d9a2:	f001 f913 	bl	800ebcc <vPortExitCritical>
				return pdPASS;
 800d9a6:	2001      	movs	r0, #1
 800d9a8:	e7ec      	b.n	800d984 <xQueueGenericReceive+0xfc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9aa:	0020      	movs	r0, r4
 800d9ac:	3024      	adds	r0, #36	; 0x24
 800d9ae:	f000 fcb1 	bl	800e314 <xTaskRemoveFromEventList>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d0f5      	beq.n	800d9a2 <xQueueGenericReceive+0x11a>
 800d9b6:	e7d4      	b.n	800d962 <xQueueGenericReceive+0xda>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d9b8:	f000 fe40 	bl	800e63c <pvTaskIncrementMutexHeldCount>
 800d9bc:	6060      	str	r0, [r4, #4]
 800d9be:	e7c7      	b.n	800d950 <xQueueGenericReceive+0xc8>

0800d9c0 <xQueueReceiveFromISR>:
{
 800d9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9c2:	46c6      	mov	lr, r8
 800d9c4:	0004      	movs	r4, r0
 800d9c6:	b500      	push	{lr}
 800d9c8:	000f      	movs	r7, r1
 800d9ca:	4690      	mov	r8, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d9cc:	f001 f908 	bl	800ebe0 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d9d2:	0006      	movs	r6, r0
			xReturn = pdFAIL;
 800d9d4:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d106      	bne.n	800d9e8 <xQueueReceiveFromISR+0x28>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d9da:	0030      	movs	r0, r6
 800d9dc:	f001 f906 	bl	800ebec <vClearInterruptMaskFromISR>
}
 800d9e0:	0028      	movs	r0, r5
 800d9e2:	bc04      	pop	{r2}
 800d9e4:	4690      	mov	r8, r2
 800d9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9e8:	0039      	movs	r1, r7
 800d9ea:	0020      	movs	r0, r4
 800d9ec:	f7ff fdb0 	bl	800d550 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800d9f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800d9f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	d004      	beq.n	800da06 <xQueueReceiveFromISR+0x46>
				++( pxQueue->xRxLock );
 800d9fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d9fe:	3301      	adds	r3, #1
 800da00:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800da02:	2501      	movs	r5, #1
 800da04:	e7e9      	b.n	800d9da <xQueueReceiveFromISR+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da06:	6923      	ldr	r3, [r4, #16]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d0fa      	beq.n	800da02 <xQueueReceiveFromISR+0x42>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da0c:	0020      	movs	r0, r4
 800da0e:	3010      	adds	r0, #16
 800da10:	f000 fc80 	bl	800e314 <xTaskRemoveFromEventList>
 800da14:	2800      	cmp	r0, #0
 800da16:	d0f4      	beq.n	800da02 <xQueueReceiveFromISR+0x42>
						if( pxHigherPriorityTaskWoken != NULL )
 800da18:	4643      	mov	r3, r8
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d0f1      	beq.n	800da02 <xQueueReceiveFromISR+0x42>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800da1e:	2301      	movs	r3, #1
 800da20:	4642      	mov	r2, r8
			xReturn = pdPASS;
 800da22:	2501      	movs	r5, #1
							*pxHigherPriorityTaskWoken = pdTRUE;
 800da24:	6013      	str	r3, [r2, #0]
 800da26:	e7d8      	b.n	800d9da <xQueueReceiveFromISR+0x1a>

0800da28 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da28:	2300      	movs	r3, #0
	{
 800da2a:	b570      	push	{r4, r5, r6, lr}
 800da2c:	4d06      	ldr	r5, [pc, #24]	; (800da48 <vQueueAddToRegistry+0x20>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800da2e:	00dc      	lsls	r4, r3, #3
 800da30:	192a      	adds	r2, r5, r4
 800da32:	6816      	ldr	r6, [r2, #0]
 800da34:	2e00      	cmp	r6, #0
 800da36:	d003      	beq.n	800da40 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da38:	3301      	adds	r3, #1
 800da3a:	2b08      	cmp	r3, #8
 800da3c:	d1f7      	bne.n	800da2e <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800da3e:	bd70      	pop	{r4, r5, r6, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800da40:	5129      	str	r1, [r5, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800da42:	6050      	str	r0, [r2, #4]
				break;
 800da44:	e7fb      	b.n	800da3e <vQueueAddToRegistry+0x16>
 800da46:	46c0      	nop			; (mov r8, r8)
 800da48:	20006d68 	.word	0x20006d68

0800da4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800da4c:	b570      	push	{r4, r5, r6, lr}
 800da4e:	0004      	movs	r4, r0
 800da50:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800da52:	f001 f8af 	bl	800ebb4 <vPortEnterCritical>
 800da56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800da58:	3301      	adds	r3, #1
 800da5a:	d101      	bne.n	800da60 <vQueueWaitForMessageRestricted+0x14>
 800da5c:	2300      	movs	r3, #0
 800da5e:	6463      	str	r3, [r4, #68]	; 0x44
 800da60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800da62:	3301      	adds	r3, #1
 800da64:	d101      	bne.n	800da6a <vQueueWaitForMessageRestricted+0x1e>
 800da66:	2300      	movs	r3, #0
 800da68:	64a3      	str	r3, [r4, #72]	; 0x48
 800da6a:	f001 f8af 	bl	800ebcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800da6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da70:	2b00      	cmp	r3, #0
 800da72:	d104      	bne.n	800da7e <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da74:	0020      	movs	r0, r4
 800da76:	0029      	movs	r1, r5
 800da78:	3024      	adds	r0, #36	; 0x24
 800da7a:	f000 fc39 	bl	800e2f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800da7e:	0020      	movs	r0, r4
 800da80:	f7ff fd78 	bl	800d574 <prvUnlockQueue>
	}
 800da84:	bd70      	pop	{r4, r5, r6, pc}
 800da86:	46c0      	nop			; (mov r8, r8)

0800da88 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800da88:	b510      	push	{r4, lr}
 800da8a:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800da8c:	f004 ffca 	bl	8012a24 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800da90:	0020      	movs	r0, r4
 800da92:	f7f2 fb41 	bl	8000118 <strlen>
 800da96:	0003      	movs	r3, r0
 800da98:	280b      	cmp	r0, #11
 800da9a:	d808      	bhi.n	800daae <prvWriteNameToBuffer+0x26>
 800da9c:	0022      	movs	r2, r4
		{
			pcBuffer[ x ] = ' ';
 800da9e:	2320      	movs	r3, #32
 800daa0:	1820      	adds	r0, r4, r0
 800daa2:	320c      	adds	r2, #12
 800daa4:	7003      	strb	r3, [r0, #0]
 800daa6:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800daa8:	4290      	cmp	r0, r2
 800daaa:	d1fb      	bne.n	800daa4 <prvWriteNameToBuffer+0x1c>
 800daac:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800daae:	18e0      	adds	r0, r4, r3
 800dab0:	2300      	movs	r3, #0
 800dab2:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800dab4:	bd10      	pop	{r4, pc}
 800dab6:	46c0      	nop			; (mov r8, r8)

0800dab8 <prvListTaskWithinSingleList.part.1>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800dab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daba:	46d6      	mov	lr, sl
 800dabc:	464f      	mov	r7, r9
 800dabe:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800dac0:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800dac2:	b5c0      	push	{r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800dac4:	685f      	ldr	r7, [r3, #4]
 800dac6:	2308      	movs	r3, #8
 800dac8:	469c      	mov	ip, r3
 800daca:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800dacc:	4692      	mov	sl, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800dace:	604f      	str	r7, [r1, #4]
 800dad0:	4567      	cmp	r7, ip
 800dad2:	d042      	beq.n	800db5a <prvListTaskWithinSingleList.part.1+0xa2>
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	0005      	movs	r5, r0
 800dad8:	4698      	mov	r8, r3
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800dada:	2302      	movs	r3, #2
	UBaseType_t uxTask = 0;
 800dadc:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800dade:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800dae0:	687f      	ldr	r7, [r7, #4]
 800dae2:	604f      	str	r7, [r1, #4]
 800dae4:	45bc      	cmp	ip, r7
 800dae6:	d035      	beq.n	800db54 <prvListTaskWithinSingleList.part.1+0x9c>
 800dae8:	68fe      	ldr	r6, [r7, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800daea:	0033      	movs	r3, r6
 800daec:	3334      	adds	r3, #52	; 0x34
 800daee:	606b      	str	r3, [r5, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800daf0:	6c73      	ldr	r3, [r6, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800daf2:	602e      	str	r6, [r5, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800daf4:	60ab      	str	r3, [r5, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800daf6:	4653      	mov	r3, sl
 800daf8:	732b      	strb	r3, [r5, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800dafa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800dafc:	612b      	str	r3, [r5, #16]
					if( eState == eSuspended )
 800dafe:	4653      	mov	r3, sl
 800db00:	2b03      	cmp	r3, #3
 800db02:	d018      	beq.n	800db36 <prvListTaskWithinSingleList.part.1+0x7e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800db04:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800db06:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800db08:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800db0a:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800db0c:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800db0e:	7813      	ldrb	r3, [r2, #0]
 800db10:	2ba5      	cmp	r3, #165	; 0xa5
 800db12:	d11d      	bne.n	800db50 <prvListTaskWithinSingleList.part.1+0x98>
	uint32_t ulCount = 0U;
 800db14:	2300      	movs	r3, #0
			ulCount++;
 800db16:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800db18:	5cd4      	ldrb	r4, [r2, r3]
 800db1a:	2ca5      	cmp	r4, #165	; 0xa5
 800db1c:	d0fb      	beq.n	800db16 <prvListTaskWithinSingleList.part.1+0x5e>
 800db1e:	089b      	lsrs	r3, r3, #2
 800db20:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800db22:	83ab      	strh	r3, [r5, #28]
				uxTask++;
 800db24:	3001      	adds	r0, #1
 800db26:	3520      	adds	r5, #32
			} while( pxNextTCB != pxFirstTCB );
 800db28:	45b0      	cmp	r8, r6
 800db2a:	d1d9      	bne.n	800dae0 <prvListTaskWithinSingleList.part.1+0x28>
	}
 800db2c:	bc1c      	pop	{r2, r3, r4}
 800db2e:	4690      	mov	r8, r2
 800db30:	4699      	mov	r9, r3
 800db32:	46a2      	mov	sl, r4
 800db34:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800db36:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d0e3      	beq.n	800db04 <prvListTaskWithinSingleList.part.1+0x4c>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800db3c:	464b      	mov	r3, r9
 800db3e:	732b      	strb	r3, [r5, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800db40:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800db42:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800db44:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800db46:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800db48:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800db4a:	7813      	ldrb	r3, [r2, #0]
 800db4c:	2ba5      	cmp	r3, #165	; 0xa5
 800db4e:	d0e1      	beq.n	800db14 <prvListTaskWithinSingleList.part.1+0x5c>
 800db50:	2300      	movs	r3, #0
 800db52:	e7e6      	b.n	800db22 <prvListTaskWithinSingleList.part.1+0x6a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800db54:	68cf      	ldr	r7, [r1, #12]
 800db56:	604f      	str	r7, [r1, #4]
 800db58:	e7c6      	b.n	800dae8 <prvListTaskWithinSingleList.part.1+0x30>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800db5a:	68cf      	ldr	r7, [r1, #12]
 800db5c:	e7ba      	b.n	800dad4 <prvListTaskWithinSingleList.part.1+0x1c>
 800db5e:	46c0      	nop			; (mov r8, r8)

0800db60 <prvResetNextTaskUnblockTime.part.2>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800db60:	4b03      	ldr	r3, [pc, #12]	; (800db70 <prvResetNextTaskUnblockTime.part.2+0x10>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	685a      	ldr	r2, [r3, #4]
 800db6a:	4b02      	ldr	r3, [pc, #8]	; (800db74 <prvResetNextTaskUnblockTime.part.2+0x14>)
 800db6c:	601a      	str	r2, [r3, #0]
}
 800db6e:	4770      	bx	lr
 800db70:	200026f4 	.word	0x200026f4
 800db74:	200000d4 	.word	0x200000d4

0800db78 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800db78:	4b0c      	ldr	r3, [pc, #48]	; (800dbac <prvAddCurrentTaskToDelayedList+0x34>)
{
 800db7a:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800db7c:	685a      	ldr	r2, [r3, #4]
{
 800db7e:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800db80:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800db82:	689a      	ldr	r2, [r3, #8]
 800db84:	4282      	cmp	r2, r0
 800db86:	d80a      	bhi.n	800db9e <prvAddCurrentTaskToDelayedList+0x26>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800db88:	6818      	ldr	r0, [r3, #0]
 800db8a:	6859      	ldr	r1, [r3, #4]
 800db8c:	3104      	adds	r1, #4
 800db8e:	f7ff fc7b 	bl	800d488 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800db92:	4b07      	ldr	r3, [pc, #28]	; (800dbb0 <prvAddCurrentTaskToDelayedList+0x38>)
 800db94:	681a      	ldr	r2, [r3, #0]
 800db96:	42a2      	cmp	r2, r4
 800db98:	d900      	bls.n	800db9c <prvAddCurrentTaskToDelayedList+0x24>
			xNextTaskUnblockTime = xTimeToWake;
 800db9a:	601c      	str	r4, [r3, #0]
}
 800db9c:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800db9e:	68d8      	ldr	r0, [r3, #12]
 800dba0:	6859      	ldr	r1, [r3, #4]
 800dba2:	3104      	adds	r1, #4
 800dba4:	f7ff fc70 	bl	800d488 <vListInsert>
 800dba8:	e7f8      	b.n	800db9c <prvAddCurrentTaskToDelayedList+0x24>
 800dbaa:	46c0      	nop			; (mov r8, r8)
 800dbac:	200026f4 	.word	0x200026f4
 800dbb0:	200000d4 	.word	0x200000d4

0800dbb4 <vTaskSwitchContext.part.5>:
		xYieldPending = pdFALSE;
 800dbb4:	2300      	movs	r3, #0
void vTaskSwitchContext( void )
 800dbb6:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 800dbb8:	4c26      	ldr	r4, [pc, #152]	; (800dc54 <vTaskSwitchContext.part.5+0xa0>)
 800dbba:	6123      	str	r3, [r4, #16]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800dbbc:	f7f9 ff30 	bl	8007a20 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800dbc0:	6963      	ldr	r3, [r4, #20]
 800dbc2:	4298      	cmp	r0, r3
 800dbc4:	d904      	bls.n	800dbd0 <vTaskSwitchContext.part.5+0x1c>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800dbc6:	6862      	ldr	r2, [r4, #4]
 800dbc8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800dbca:	1acb      	subs	r3, r1, r3
 800dbcc:	181b      	adds	r3, r3, r0
 800dbce:	6553      	str	r3, [r2, #84]	; 0x54
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800dbd0:	6862      	ldr	r2, [r4, #4]
 800dbd2:	6863      	ldr	r3, [r4, #4]
 800dbd4:	6812      	ldr	r2, [r2, #0]
 800dbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				ulTaskSwitchedInTime = ulTotalRunTime;
 800dbd8:	6160      	str	r0, [r4, #20]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d923      	bls.n	800dc26 <vTaskSwitchContext.part.5+0x72>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800dbde:	6863      	ldr	r3, [r4, #4]
 800dbe0:	2214      	movs	r2, #20
 800dbe2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dbe4:	491c      	ldr	r1, [pc, #112]	; (800dc58 <vTaskSwitchContext.part.5+0xa4>)
 800dbe6:	f004 fccf 	bl	8012588 <memcmp>
 800dbea:	2800      	cmp	r0, #0
 800dbec:	d128      	bne.n	800dc40 <vTaskSwitchContext.part.5+0x8c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800dbee:	69a2      	ldr	r2, [r4, #24]
 800dbf0:	491a      	ldr	r1, [pc, #104]	; (800dc5c <vTaskSwitchContext.part.5+0xa8>)
 800dbf2:	e003      	b.n	800dbfc <vTaskSwitchContext.part.5+0x48>
 800dbf4:	69a3      	ldr	r3, [r4, #24]
 800dbf6:	3b01      	subs	r3, #1
 800dbf8:	61a3      	str	r3, [r4, #24]
 800dbfa:	69a2      	ldr	r2, [r4, #24]
 800dbfc:	0093      	lsls	r3, r2, #2
 800dbfe:	189b      	adds	r3, r3, r2
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	58cb      	ldr	r3, [r1, r3]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d0f5      	beq.n	800dbf4 <vTaskSwitchContext.part.5+0x40>
 800dc08:	69a2      	ldr	r2, [r4, #24]
 800dc0a:	0093      	lsls	r3, r2, #2
 800dc0c:	189b      	adds	r3, r3, r2
 800dc0e:	009b      	lsls	r3, r3, #2
 800dc10:	18c8      	adds	r0, r1, r3
 800dc12:	6842      	ldr	r2, [r0, #4]
 800dc14:	3308      	adds	r3, #8
 800dc16:	6852      	ldr	r2, [r2, #4]
 800dc18:	18c9      	adds	r1, r1, r3
 800dc1a:	6042      	str	r2, [r0, #4]
 800dc1c:	428a      	cmp	r2, r1
 800dc1e:	d015      	beq.n	800dc4c <vTaskSwitchContext.part.5+0x98>
 800dc20:	68d3      	ldr	r3, [r2, #12]
 800dc22:	6063      	str	r3, [r4, #4]
}
 800dc24:	bd10      	pop	{r4, pc}
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800dc26:	6860      	ldr	r0, [r4, #4]
 800dc28:	6861      	ldr	r1, [r4, #4]
 800dc2a:	3134      	adds	r1, #52	; 0x34
 800dc2c:	f7fe fd26 	bl	800c67c <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800dc30:	6863      	ldr	r3, [r4, #4]
 800dc32:	2214      	movs	r2, #20
 800dc34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dc36:	4908      	ldr	r1, [pc, #32]	; (800dc58 <vTaskSwitchContext.part.5+0xa4>)
 800dc38:	f004 fca6 	bl	8012588 <memcmp>
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	d0d6      	beq.n	800dbee <vTaskSwitchContext.part.5+0x3a>
 800dc40:	6860      	ldr	r0, [r4, #4]
 800dc42:	6861      	ldr	r1, [r4, #4]
 800dc44:	3134      	adds	r1, #52	; 0x34
 800dc46:	f7fe fd19 	bl	800c67c <vApplicationStackOverflowHook>
 800dc4a:	e7d0      	b.n	800dbee <vTaskSwitchContext.part.5+0x3a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800dc4c:	6852      	ldr	r2, [r2, #4]
 800dc4e:	6042      	str	r2, [r0, #4]
 800dc50:	e7e6      	b.n	800dc20 <vTaskSwitchContext.part.5+0x6c>
 800dc52:	46c0      	nop			; (mov r8, r8)
 800dc54:	200026f4 	.word	0x200026f4
 800dc58:	08017390 	.word	0x08017390
 800dc5c:	20002790 	.word	0x20002790

0800dc60 <xTaskGenericCreate>:
{
 800dc60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc62:	464f      	mov	r7, r9
 800dc64:	4646      	mov	r6, r8
 800dc66:	46d6      	mov	lr, sl
 800dc68:	b5c0      	push	{r6, r7, lr}
 800dc6a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800dc6c:	4680      	mov	r8, r0
 800dc6e:	000c      	movs	r4, r1
 800dc70:	0015      	movs	r5, r2
 800dc72:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc74:	2f00      	cmp	r7, #0
 800dc76:	d100      	bne.n	800dc7a <xTaskGenericCreate+0x1a>
 800dc78:	e0ae      	b.n	800ddd8 <xTaskGenericCreate+0x178>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800dc7a:	2060      	movs	r0, #96	; 0x60
 800dc7c:	f001 f814 	bl	800eca8 <pvPortMalloc>
 800dc80:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800dc82:	d100      	bne.n	800dc86 <xTaskGenericCreate+0x26>
 800dc84:	e0b1      	b.n	800ddea <xTaskGenericCreate+0x18a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800dc86:	00ad      	lsls	r5, r5, #2
				pxNewTCB->pxStack = pxStack;
 800dc88:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800dc8a:	002a      	movs	r2, r5
 800dc8c:	0038      	movs	r0, r7
 800dc8e:	21a5      	movs	r1, #165	; 0xa5
 800dc90:	f004 fc92 	bl	80125b8 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800dc94:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800dc96:	1f2f      	subs	r7, r5, #4
 800dc98:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800dc9a:	2307      	movs	r3, #7
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800dc9c:	4467      	add	r7, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800dc9e:	439f      	bics	r7, r3
 800dca0:	0030      	movs	r0, r6
 800dca2:	0033      	movs	r3, r6
 800dca4:	3041      	adds	r0, #65	; 0x41
 800dca6:	3334      	adds	r3, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800dca8:	7822      	ldrb	r2, [r4, #0]
 800dcaa:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800dcac:	7822      	ldrb	r2, [r4, #0]
 800dcae:	2a00      	cmp	r2, #0
 800dcb0:	d003      	beq.n	800dcba <xTaskGenericCreate+0x5a>
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	3401      	adds	r4, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dcb6:	4298      	cmp	r0, r3
 800dcb8:	d1f6      	bne.n	800dca8 <xTaskGenericCreate+0x48>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dcba:	2340      	movs	r3, #64	; 0x40
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	9d08      	ldr	r5, [sp, #32]
 800dcc0:	54f2      	strb	r2, [r6, r3]
 800dcc2:	2d06      	cmp	r5, #6
 800dcc4:	d84f      	bhi.n	800dd66 <xTaskGenericCreate+0x106>
		pxTCB->uxMutexesHeld = 0;
 800dcc6:	2400      	movs	r4, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800dcc8:	1d33      	adds	r3, r6, #4
 800dcca:	0018      	movs	r0, r3
	pxTCB->uxPriority = uxPriority;
 800dccc:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800dcce:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800dcd0:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800dcd2:	469a      	mov	sl, r3
 800dcd4:	f7ff fbc8 	bl	800d468 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800dcd8:	0030      	movs	r0, r6
 800dcda:	3018      	adds	r0, #24
 800dcdc:	f7ff fbc4 	bl	800d468 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dce0:	2307      	movs	r3, #7
 800dce2:	1b5b      	subs	r3, r3, r5
 800dce4:	61b3      	str	r3, [r6, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800dce6:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800dce8:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800dcea:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800dcec:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800dcee:	65b4      	str	r4, [r6, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dcf0:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800dcf2:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dcf4:	4641      	mov	r1, r8
 800dcf6:	0038      	movs	r0, r7
 800dcf8:	f000 ff14 	bl	800eb24 <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800dcfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dcfe:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d000      	beq.n	800dd06 <xTaskGenericCreate+0xa6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dd04:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800dd06:	f000 ff55 	bl	800ebb4 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800dd0a:	4c3b      	ldr	r4, [pc, #236]	; (800ddf8 <xTaskGenericCreate+0x198>)
 800dd0c:	69e3      	ldr	r3, [r4, #28]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	61e3      	str	r3, [r4, #28]
			if( pxCurrentTCB == NULL )
 800dd12:	6863      	ldr	r3, [r4, #4]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d02f      	beq.n	800dd78 <xTaskGenericCreate+0x118>
				if( xSchedulerRunning == pdFALSE )
 800dd18:	4d38      	ldr	r5, [pc, #224]	; (800ddfc <xTaskGenericCreate+0x19c>)
 800dd1a:	686b      	ldr	r3, [r5, #4]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d024      	beq.n	800dd6a <xTaskGenericCreate+0x10a>
 800dd20:	4f37      	ldr	r7, [pc, #220]	; (800de00 <xTaskGenericCreate+0x1a0>)
			uxTaskNumber++;
 800dd22:	68ab      	ldr	r3, [r5, #8]
			prvAddTaskToReadyList( pxNewTCB );
 800dd24:	69a2      	ldr	r2, [r4, #24]
			uxTaskNumber++;
 800dd26:	3301      	adds	r3, #1
 800dd28:	60ab      	str	r3, [r5, #8]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dd2a:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800dd2c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d817      	bhi.n	800dd62 <xTaskGenericCreate+0x102>
 800dd32:	0098      	lsls	r0, r3, #2
 800dd34:	18c0      	adds	r0, r0, r3
 800dd36:	0080      	lsls	r0, r0, #2
 800dd38:	1838      	adds	r0, r7, r0
 800dd3a:	4651      	mov	r1, sl
 800dd3c:	f7ff fb98 	bl	800d470 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800dd40:	f000 ff44 	bl	800ebcc <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800dd44:	686b      	ldr	r3, [r5, #4]
			xReturn = pdPASS;
 800dd46:	2501      	movs	r5, #1
		if( xSchedulerRunning != pdFALSE )
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d004      	beq.n	800dd56 <xTaskGenericCreate+0xf6>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800dd4c:	6863      	ldr	r3, [r4, #4]
 800dd4e:	9a08      	ldr	r2, [sp, #32]
 800dd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d317      	bcc.n	800dd86 <xTaskGenericCreate+0x126>
}
 800dd56:	0028      	movs	r0, r5
 800dd58:	bc1c      	pop	{r2, r3, r4}
 800dd5a:	4690      	mov	r8, r2
 800dd5c:	4699      	mov	r9, r3
 800dd5e:	46a2      	mov	sl, r4
 800dd60:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvAddTaskToReadyList( pxNewTCB );
 800dd62:	61a3      	str	r3, [r4, #24]
 800dd64:	e7e5      	b.n	800dd32 <xTaskGenericCreate+0xd2>
 800dd66:	2506      	movs	r5, #6
 800dd68:	e7ad      	b.n	800dcc6 <xTaskGenericCreate+0x66>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800dd6a:	6863      	ldr	r3, [r4, #4]
 800dd6c:	9a08      	ldr	r2, [sp, #32]
 800dd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d8d5      	bhi.n	800dd20 <xTaskGenericCreate+0xc0>
						pxCurrentTCB = pxNewTCB;
 800dd74:	6066      	str	r6, [r4, #4]
 800dd76:	e7d3      	b.n	800dd20 <xTaskGenericCreate+0xc0>
				pxCurrentTCB =  pxNewTCB;
 800dd78:	6066      	str	r6, [r4, #4]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd7a:	69e3      	ldr	r3, [r4, #28]
 800dd7c:	4f20      	ldr	r7, [pc, #128]	; (800de00 <xTaskGenericCreate+0x1a0>)
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d004      	beq.n	800dd8c <xTaskGenericCreate+0x12c>
 800dd82:	4d1e      	ldr	r5, [pc, #120]	; (800ddfc <xTaskGenericCreate+0x19c>)
 800dd84:	e7cd      	b.n	800dd22 <xTaskGenericCreate+0xc2>
				taskYIELD_IF_USING_PREEMPTION();
 800dd86:	f000 ff09 	bl	800eb9c <vPortYield>
 800dd8a:	e7e4      	b.n	800dd56 <xTaskGenericCreate+0xf6>
 800dd8c:	238c      	movs	r3, #140	; 0x8c
 800dd8e:	4698      	mov	r8, r3
 800dd90:	003d      	movs	r5, r7
 800dd92:	44b8      	add	r8, r7
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd94:	0028      	movs	r0, r5
 800dd96:	3514      	adds	r5, #20
 800dd98:	f7ff fb5a 	bl	800d450 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd9c:	4545      	cmp	r5, r8
 800dd9e:	d1f9      	bne.n	800dd94 <xTaskGenericCreate+0x134>
	vListInitialise( &xDelayedTaskList1 );
 800dda0:	2320      	movs	r3, #32
 800dda2:	4698      	mov	r8, r3
	vListInitialise( &xDelayedTaskList2 );
 800dda4:	0025      	movs	r5, r4
	vListInitialise( &xDelayedTaskList1 );
 800dda6:	44a0      	add	r8, r4
	vListInitialise( &xDelayedTaskList2 );
 800dda8:	3534      	adds	r5, #52	; 0x34
	vListInitialise( &xDelayedTaskList1 );
 800ddaa:	4640      	mov	r0, r8
 800ddac:	f7ff fb50 	bl	800d450 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ddb0:	0028      	movs	r0, r5
 800ddb2:	f7ff fb4d 	bl	800d450 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ddb6:	0020      	movs	r0, r4
 800ddb8:	3048      	adds	r0, #72	; 0x48
 800ddba:	f7ff fb49 	bl	800d450 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800ddbe:	0020      	movs	r0, r4
 800ddc0:	305c      	adds	r0, #92	; 0x5c
 800ddc2:	f7ff fb45 	bl	800d450 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800ddc6:	0020      	movs	r0, r4
 800ddc8:	3070      	adds	r0, #112	; 0x70
 800ddca:	f7ff fb41 	bl	800d450 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800ddce:	4643      	mov	r3, r8
 800ddd0:	6023      	str	r3, [r4, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ddd2:	60e5      	str	r5, [r4, #12]
 800ddd4:	4d09      	ldr	r5, [pc, #36]	; (800ddfc <xTaskGenericCreate+0x19c>)
 800ddd6:	e7a4      	b.n	800dd22 <xTaskGenericCreate+0xc2>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddd8:	0090      	lsls	r0, r2, #2
 800ddda:	f000 ff65 	bl	800eca8 <pvPortMalloc>
 800ddde:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800dde0:	d000      	beq.n	800dde4 <xTaskGenericCreate+0x184>
 800dde2:	e74a      	b.n	800dc7a <xTaskGenericCreate+0x1a>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dde4:	2501      	movs	r5, #1
 800dde6:	426d      	negs	r5, r5
 800dde8:	e7b5      	b.n	800dd56 <xTaskGenericCreate+0xf6>
 800ddea:	2501      	movs	r5, #1
				vPortFree( pxStack );
 800ddec:	0038      	movs	r0, r7
 800ddee:	f000 ffd1 	bl	800ed94 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ddf2:	426d      	negs	r5, r5
 800ddf4:	e7af      	b.n	800dd56 <xTaskGenericCreate+0xf6>
 800ddf6:	46c0      	nop			; (mov r8, r8)
 800ddf8:	200026f4 	.word	0x200026f4
 800ddfc:	20002774 	.word	0x20002774
 800de00:	20002790 	.word	0x20002790

0800de04 <uxTaskPriorityGet>:
	{
 800de04:	b510      	push	{r4, lr}
 800de06:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800de08:	f000 fed4 	bl	800ebb4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800de0c:	2c00      	cmp	r4, #0
 800de0e:	d101      	bne.n	800de14 <uxTaskPriorityGet+0x10>
 800de10:	4b03      	ldr	r3, [pc, #12]	; (800de20 <uxTaskPriorityGet+0x1c>)
 800de12:	685c      	ldr	r4, [r3, #4]
			uxReturn = pxTCB->uxPriority;
 800de14:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800de16:	f000 fed9 	bl	800ebcc <vPortExitCritical>
	}
 800de1a:	0020      	movs	r0, r4
 800de1c:	bd10      	pop	{r4, pc}
 800de1e:	46c0      	nop			; (mov r8, r8)
 800de20:	200026f4 	.word	0x200026f4

0800de24 <vTaskPrioritySet>:
	{
 800de24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de26:	46c6      	mov	lr, r8
 800de28:	0004      	movs	r4, r0
 800de2a:	b500      	push	{lr}
 800de2c:	000d      	movs	r5, r1
 800de2e:	2906      	cmp	r1, #6
 800de30:	d900      	bls.n	800de34 <vTaskPrioritySet+0x10>
 800de32:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800de34:	f000 febe 	bl	800ebb4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800de38:	2c00      	cmp	r4, #0
 800de3a:	d02b      	beq.n	800de94 <vTaskPrioritySet+0x70>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800de3c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800de3e:	42aa      	cmp	r2, r5
 800de40:	d01a      	beq.n	800de78 <vTaskPrioritySet+0x54>
					if( pxTCB != pxCurrentTCB )
 800de42:	4f21      	ldr	r7, [pc, #132]	; (800dec8 <vTaskPrioritySet+0xa4>)
				if( uxNewPriority > uxCurrentBasePriority )
 800de44:	d31d      	bcc.n	800de82 <vTaskPrioritySet+0x5e>
				else if( pxTCB == pxCurrentTCB )
 800de46:	687e      	ldr	r6, [r7, #4]
 800de48:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800de4a:	4273      	negs	r3, r6
 800de4c:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800de4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800de50:	428a      	cmp	r2, r1
 800de52:	d100      	bne.n	800de56 <vTaskPrioritySet+0x32>
						pxTCB->uxPriority = uxNewPriority;
 800de54:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de56:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800de58:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	db02      	blt.n	800de64 <vTaskPrioritySet+0x40>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de5e:	2307      	movs	r3, #7
 800de60:	1b5d      	subs	r5, r3, r5
 800de62:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800de64:	008b      	lsls	r3, r1, #2
 800de66:	185b      	adds	r3, r3, r1
 800de68:	4d18      	ldr	r5, [pc, #96]	; (800decc <vTaskPrioritySet+0xa8>)
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	6962      	ldr	r2, [r4, #20]
 800de6e:	18eb      	adds	r3, r5, r3
 800de70:	429a      	cmp	r2, r3
 800de72:	d015      	beq.n	800dea0 <vTaskPrioritySet+0x7c>
				if( xYieldRequired == pdTRUE )
 800de74:	2e01      	cmp	r6, #1
 800de76:	d010      	beq.n	800de9a <vTaskPrioritySet+0x76>
		taskEXIT_CRITICAL();
 800de78:	f000 fea8 	bl	800ebcc <vPortExitCritical>
	}
 800de7c:	bc04      	pop	{r2}
 800de7e:	4690      	mov	r8, r2
 800de80:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( pxTCB != pxCurrentTCB )
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	42a3      	cmp	r3, r4
 800de86:	d01d      	beq.n	800dec4 <vTaskPrioritySet+0xa0>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800de88:	2600      	movs	r6, #0
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de8e:	429d      	cmp	r5, r3
 800de90:	4176      	adcs	r6, r6
 800de92:	e7dc      	b.n	800de4e <vTaskPrioritySet+0x2a>
			pxTCB = prvGetTCBFromHandle( xTask );
 800de94:	4b0c      	ldr	r3, [pc, #48]	; (800dec8 <vTaskPrioritySet+0xa4>)
 800de96:	685c      	ldr	r4, [r3, #4]
 800de98:	e7d0      	b.n	800de3c <vTaskPrioritySet+0x18>
					taskYIELD_IF_USING_PREEMPTION();
 800de9a:	f000 fe7f 	bl	800eb9c <vPortYield>
 800de9e:	e7eb      	b.n	800de78 <vTaskPrioritySet+0x54>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800dea0:	1d23      	adds	r3, r4, #4
 800dea2:	0018      	movs	r0, r3
 800dea4:	4698      	mov	r8, r3
 800dea6:	f7ff fb07 	bl	800d4b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800deaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800deac:	69ba      	ldr	r2, [r7, #24]
 800deae:	4293      	cmp	r3, r2
 800deb0:	d900      	bls.n	800deb4 <vTaskPrioritySet+0x90>
 800deb2:	61bb      	str	r3, [r7, #24]
 800deb4:	0098      	lsls	r0, r3, #2
 800deb6:	18c0      	adds	r0, r0, r3
 800deb8:	0080      	lsls	r0, r0, #2
 800deba:	1828      	adds	r0, r5, r0
 800debc:	4641      	mov	r1, r8
 800debe:	f7ff fad7 	bl	800d470 <vListInsertEnd>
 800dec2:	e7d7      	b.n	800de74 <vTaskPrioritySet+0x50>
	BaseType_t xYieldRequired = pdFALSE;
 800dec4:	2600      	movs	r6, #0
 800dec6:	e7c2      	b.n	800de4e <vTaskPrioritySet+0x2a>
 800dec8:	200026f4 	.word	0x200026f4
 800decc:	20002790 	.word	0x20002790

0800ded0 <vTaskStartScheduler>:
{
 800ded0:	b510      	push	{r4, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800ded2:	2400      	movs	r4, #0
{
 800ded4:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800ded6:	9403      	str	r4, [sp, #12]
 800ded8:	9402      	str	r4, [sp, #8]
 800deda:	9401      	str	r4, [sp, #4]
 800dedc:	9400      	str	r4, [sp, #0]
 800dede:	2300      	movs	r3, #0
 800dee0:	2296      	movs	r2, #150	; 0x96
 800dee2:	490b      	ldr	r1, [pc, #44]	; (800df10 <vTaskStartScheduler+0x40>)
 800dee4:	480b      	ldr	r0, [pc, #44]	; (800df14 <vTaskStartScheduler+0x44>)
 800dee6:	f7ff febb 	bl	800dc60 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800deea:	2801      	cmp	r0, #1
 800deec:	d001      	beq.n	800def2 <vTaskStartScheduler+0x22>
}
 800deee:	b004      	add	sp, #16
 800def0:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
 800def2:	f000 fc83 	bl	800e7fc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800def6:	2801      	cmp	r0, #1
 800def8:	d1f9      	bne.n	800deee <vTaskStartScheduler+0x1e>
		portDISABLE_INTERRUPTS();
 800defa:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800defc:	4b06      	ldr	r3, [pc, #24]	; (800df18 <vTaskStartScheduler+0x48>)
 800defe:	6058      	str	r0, [r3, #4]
		xTickCount = ( TickType_t ) 0U;
 800df00:	4b06      	ldr	r3, [pc, #24]	; (800df1c <vTaskStartScheduler+0x4c>)
 800df02:	609c      	str	r4, [r3, #8]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800df04:	f7f9 fd7c 	bl	8007a00 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800df08:	f000 fe1e 	bl	800eb48 <xPortStartScheduler>
}
 800df0c:	e7ef      	b.n	800deee <vTaskStartScheduler+0x1e>
 800df0e:	46c0      	nop			; (mov r8, r8)
 800df10:	08019e34 	.word	0x08019e34
 800df14:	0800e151 	.word	0x0800e151
 800df18:	20002774 	.word	0x20002774
 800df1c:	200026f4 	.word	0x200026f4

0800df20 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800df20:	4a02      	ldr	r2, [pc, #8]	; (800df2c <vTaskSuspendAll+0xc>)
 800df22:	6913      	ldr	r3, [r2, #16]
 800df24:	3301      	adds	r3, #1
 800df26:	6113      	str	r3, [r2, #16]
}
 800df28:	4770      	bx	lr
 800df2a:	46c0      	nop			; (mov r8, r8)
 800df2c:	20002774 	.word	0x20002774

0800df30 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800df30:	4b01      	ldr	r3, [pc, #4]	; (800df38 <xTaskGetTickCount+0x8>)
 800df32:	6898      	ldr	r0, [r3, #8]
}
 800df34:	4770      	bx	lr
 800df36:	46c0      	nop			; (mov r8, r8)
 800df38:	200026f4 	.word	0x200026f4

0800df3c <xTaskGetTickCountFromISR>:
 800df3c:	4b01      	ldr	r3, [pc, #4]	; (800df44 <xTaskGetTickCountFromISR+0x8>)
 800df3e:	6898      	ldr	r0, [r3, #8]
 800df40:	4770      	bx	lr
 800df42:	46c0      	nop			; (mov r8, r8)
 800df44:	200026f4 	.word	0x200026f4

0800df48 <xTaskIncrementTick>:
{
 800df48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df4a:	46d6      	mov	lr, sl
 800df4c:	464f      	mov	r7, r9
 800df4e:	4646      	mov	r6, r8
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df50:	4b3e      	ldr	r3, [pc, #248]	; (800e04c <xTaskIncrementTick+0x104>)
{
 800df52:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df54:	691a      	ldr	r2, [r3, #16]
 800df56:	2a00      	cmp	r2, #0
 800df58:	d11b      	bne.n	800df92 <xTaskIncrementTick+0x4a>
		++xTickCount;
 800df5a:	4c3d      	ldr	r4, [pc, #244]	; (800e050 <xTaskIncrementTick+0x108>)
 800df5c:	68a2      	ldr	r2, [r4, #8]
 800df5e:	3201      	adds	r2, #1
 800df60:	60a2      	str	r2, [r4, #8]
			const TickType_t xConstTickCount = xTickCount;
 800df62:	68a2      	ldr	r2, [r4, #8]
 800df64:	4690      	mov	r8, r2
			if( xConstTickCount == ( TickType_t ) 0U )
 800df66:	2a00      	cmp	r2, #0
 800df68:	d022      	beq.n	800dfb0 <xTaskIncrementTick+0x68>
 800df6a:	4b3a      	ldr	r3, [pc, #232]	; (800e054 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800df6c:	2700      	movs	r7, #0
 800df6e:	469a      	mov	sl, r3
			if( xConstTickCount >= xNextTaskUnblockTime )
 800df70:	4653      	mov	r3, sl
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4543      	cmp	r3, r8
 800df76:	d931      	bls.n	800dfdc <xTaskIncrementTick+0x94>
 800df78:	4b37      	ldr	r3, [pc, #220]	; (800e058 <xTaskIncrementTick+0x110>)
 800df7a:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800df7c:	6863      	ldr	r3, [r4, #4]
 800df7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df80:	0093      	lsls	r3, r2, #2
 800df82:	189b      	adds	r3, r3, r2
 800df84:	464a      	mov	r2, r9
 800df86:	009b      	lsls	r3, r3, #2
 800df88:	58d3      	ldr	r3, [r2, r3]
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d906      	bls.n	800df9c <xTaskIncrementTick+0x54>
				xSwitchRequired = pdTRUE;
 800df8e:	2701      	movs	r7, #1
 800df90:	e004      	b.n	800df9c <xTaskIncrementTick+0x54>
BaseType_t xSwitchRequired = pdFALSE;
 800df92:	2700      	movs	r7, #0
		++uxPendedTicks;
 800df94:	699a      	ldr	r2, [r3, #24]
 800df96:	4c2e      	ldr	r4, [pc, #184]	; (800e050 <xTaskIncrementTick+0x108>)
 800df98:	3201      	adds	r2, #1
 800df9a:	619a      	str	r2, [r3, #24]
		if( xYieldPending != pdFALSE )
 800df9c:	6923      	ldr	r3, [r4, #16]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d000      	beq.n	800dfa4 <xTaskIncrementTick+0x5c>
			xSwitchRequired = pdTRUE;
 800dfa2:	2701      	movs	r7, #1
}
 800dfa4:	0038      	movs	r0, r7
 800dfa6:	bc1c      	pop	{r2, r3, r4}
 800dfa8:	4690      	mov	r8, r2
 800dfaa:	4699      	mov	r9, r3
 800dfac:	46a2      	mov	sl, r4
 800dfae:	bdf0      	pop	{r4, r5, r6, r7, pc}
				taskSWITCH_DELAYED_LISTS();
 800dfb0:	6822      	ldr	r2, [r4, #0]
 800dfb2:	68e1      	ldr	r1, [r4, #12]
 800dfb4:	6021      	str	r1, [r4, #0]
 800dfb6:	60e2      	str	r2, [r4, #12]
 800dfb8:	695a      	ldr	r2, [r3, #20]
 800dfba:	3201      	adds	r2, #1
 800dfbc:	615a      	str	r2, [r3, #20]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfbe:	6823      	ldr	r3, [r4, #0]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d13b      	bne.n	800e03e <xTaskIncrementTick+0xf6>
		xNextTaskUnblockTime = portMAX_DELAY;
 800dfc6:	4b23      	ldr	r3, [pc, #140]	; (800e054 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800dfc8:	2700      	movs	r7, #0
		xNextTaskUnblockTime = portMAX_DELAY;
 800dfca:	469a      	mov	sl, r3
 800dfcc:	2301      	movs	r3, #1
 800dfce:	4652      	mov	r2, sl
 800dfd0:	425b      	negs	r3, r3
 800dfd2:	6013      	str	r3, [r2, #0]
			if( xConstTickCount >= xNextTaskUnblockTime )
 800dfd4:	4653      	mov	r3, sl
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4543      	cmp	r3, r8
 800dfda:	d8cd      	bhi.n	800df78 <xTaskIncrementTick+0x30>
 800dfdc:	4b1e      	ldr	r3, [pc, #120]	; (800e058 <xTaskIncrementTick+0x110>)
 800dfde:	4699      	mov	r9, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfe0:	6823      	ldr	r3, [r4, #0]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d026      	beq.n	800e036 <xTaskIncrementTick+0xee>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dfe8:	6823      	ldr	r3, [r4, #0]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800dfee:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 800dff0:	4598      	cmp	r8, r3
 800dff2:	d327      	bcc.n	800e044 <xTaskIncrementTick+0xfc>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800dff4:	1d2e      	adds	r6, r5, #4
 800dff6:	0030      	movs	r0, r6
 800dff8:	f7ff fa5e 	bl	800d4b8 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dffc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d003      	beq.n	800e00a <xTaskIncrementTick+0xc2>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e002:	0028      	movs	r0, r5
 800e004:	3018      	adds	r0, #24
 800e006:	f7ff fa57 	bl	800d4b8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e00a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e00c:	69a2      	ldr	r2, [r4, #24]
 800e00e:	4293      	cmp	r3, r2
 800e010:	d900      	bls.n	800e014 <xTaskIncrementTick+0xcc>
 800e012:	61a3      	str	r3, [r4, #24]
 800e014:	0098      	lsls	r0, r3, #2
 800e016:	18c0      	adds	r0, r0, r3
 800e018:	0080      	lsls	r0, r0, #2
 800e01a:	4448      	add	r0, r9
 800e01c:	0031      	movs	r1, r6
 800e01e:	f7ff fa27 	bl	800d470 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e022:	6863      	ldr	r3, [r4, #4]
 800e024:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e028:	429a      	cmp	r2, r3
 800e02a:	d3d9      	bcc.n	800dfe0 <xTaskIncrementTick+0x98>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e02c:	6823      	ldr	r3, [r4, #0]
								xSwitchRequired = pdTRUE;
 800e02e:	2701      	movs	r7, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d1d8      	bne.n	800dfe8 <xTaskIncrementTick+0xa0>
						xNextTaskUnblockTime = portMAX_DELAY;
 800e036:	4652      	mov	r2, sl
 800e038:	3b01      	subs	r3, #1
 800e03a:	6013      	str	r3, [r2, #0]
						break;
 800e03c:	e79e      	b.n	800df7c <xTaskIncrementTick+0x34>
 800e03e:	f7ff fd8f 	bl	800db60 <prvResetNextTaskUnblockTime.part.2>
 800e042:	e792      	b.n	800df6a <xTaskIncrementTick+0x22>
							xNextTaskUnblockTime = xItemValue;
 800e044:	4652      	mov	r2, sl
 800e046:	6013      	str	r3, [r2, #0]
							break;
 800e048:	e798      	b.n	800df7c <xTaskIncrementTick+0x34>
 800e04a:	46c0      	nop			; (mov r8, r8)
 800e04c:	20002774 	.word	0x20002774
 800e050:	200026f4 	.word	0x200026f4
 800e054:	200000d4 	.word	0x200000d4
 800e058:	20002790 	.word	0x20002790

0800e05c <xTaskResumeAll>:
{
 800e05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e05e:	46ce      	mov	lr, r9
 800e060:	4647      	mov	r7, r8
 800e062:	b580      	push	{r7, lr}
	taskENTER_CRITICAL();
 800e064:	f000 fda6 	bl	800ebb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e068:	4f28      	ldr	r7, [pc, #160]	; (800e10c <xTaskResumeAll+0xb0>)
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	3b01      	subs	r3, #1
 800e06e:	613b      	str	r3, [r7, #16]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d13b      	bne.n	800e0ee <xTaskResumeAll+0x92>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e076:	4c26      	ldr	r4, [pc, #152]	; (800e110 <xTaskResumeAll+0xb4>)
 800e078:	69e3      	ldr	r3, [r4, #28]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d037      	beq.n	800e0ee <xTaskResumeAll+0x92>
					prvAddTaskToReadyList( pxTCB );
 800e07e:	4b25      	ldr	r3, [pc, #148]	; (800e114 <xTaskResumeAll+0xb8>)
 800e080:	4698      	mov	r8, r3
						xYieldPending = pdTRUE;
 800e082:	2301      	movs	r3, #1
 800e084:	4699      	mov	r9, r3
 800e086:	e01a      	b.n	800e0be <xTaskResumeAll+0x62>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e088:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e08a:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e08c:	0028      	movs	r0, r5
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e08e:	1d2e      	adds	r6, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e090:	3018      	adds	r0, #24
 800e092:	f7ff fa11 	bl	800d4b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e096:	0030      	movs	r0, r6
 800e098:	f7ff fa0e 	bl	800d4b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e09c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e09e:	69a2      	ldr	r2, [r4, #24]
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d900      	bls.n	800e0a6 <xTaskResumeAll+0x4a>
 800e0a4:	61a3      	str	r3, [r4, #24]
 800e0a6:	0098      	lsls	r0, r3, #2
 800e0a8:	18c0      	adds	r0, r0, r3
 800e0aa:	0080      	lsls	r0, r0, #2
 800e0ac:	4440      	add	r0, r8
 800e0ae:	0031      	movs	r1, r6
 800e0b0:	f7ff f9de 	bl	800d470 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0b4:	6863      	ldr	r3, [r4, #4]
 800e0b6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d21f      	bcs.n	800e0fe <xTaskResumeAll+0xa2>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d1e1      	bne.n	800e088 <xTaskResumeAll+0x2c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e0c4:	69bb      	ldr	r3, [r7, #24]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d00e      	beq.n	800e0e8 <xTaskResumeAll+0x8c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e0ca:	69bb      	ldr	r3, [r7, #24]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d00b      	beq.n	800e0e8 <xTaskResumeAll+0x8c>
							xYieldPending = pdTRUE;
 800e0d0:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
 800e0d2:	f7ff ff39 	bl	800df48 <xTaskIncrementTick>
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	d000      	beq.n	800e0dc <xTaskResumeAll+0x80>
							xYieldPending = pdTRUE;
 800e0da:	6125      	str	r5, [r4, #16]
						--uxPendedTicks;
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	61bb      	str	r3, [r7, #24]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d1f4      	bne.n	800e0d2 <xTaskResumeAll+0x76>
				if( xYieldPending == pdTRUE )
 800e0e8:	6923      	ldr	r3, [r4, #16]
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d00a      	beq.n	800e104 <xTaskResumeAll+0xa8>
BaseType_t xAlreadyYielded = pdFALSE;
 800e0ee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e0f0:	f000 fd6c 	bl	800ebcc <vPortExitCritical>
}
 800e0f4:	0020      	movs	r0, r4
 800e0f6:	bc0c      	pop	{r2, r3}
 800e0f8:	4690      	mov	r8, r2
 800e0fa:	4699      	mov	r9, r3
 800e0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 800e0fe:	464b      	mov	r3, r9
 800e100:	6123      	str	r3, [r4, #16]
 800e102:	e7dc      	b.n	800e0be <xTaskResumeAll+0x62>
					taskYIELD_IF_USING_PREEMPTION();
 800e104:	f000 fd4a 	bl	800eb9c <vPortYield>
						xAlreadyYielded = pdTRUE;
 800e108:	2401      	movs	r4, #1
 800e10a:	e7f1      	b.n	800e0f0 <xTaskResumeAll+0x94>
 800e10c:	20002774 	.word	0x20002774
 800e110:	200026f4 	.word	0x200026f4
 800e114:	20002790 	.word	0x20002790

0800e118 <vTaskDelay>:
	{
 800e118:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e11a:	2800      	cmp	r0, #0
 800e11c:	d011      	beq.n	800e142 <vTaskDelay+0x2a>
	++uxSchedulerSuspended;
 800e11e:	4a0a      	ldr	r2, [pc, #40]	; (800e148 <vTaskDelay+0x30>)
 800e120:	6913      	ldr	r3, [r2, #16]
 800e122:	3301      	adds	r3, #1
 800e124:	6113      	str	r3, [r2, #16]
				xTimeToWake = xTickCount + xTicksToDelay;
 800e126:	4b09      	ldr	r3, [pc, #36]	; (800e14c <vTaskDelay+0x34>)
 800e128:	689c      	ldr	r4, [r3, #8]
 800e12a:	1824      	adds	r4, r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e12c:	6858      	ldr	r0, [r3, #4]
 800e12e:	3004      	adds	r0, #4
 800e130:	f7ff f9c2 	bl	800d4b8 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e134:	0020      	movs	r0, r4
 800e136:	f7ff fd1f 	bl	800db78 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e13a:	f7ff ff8f 	bl	800e05c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e13e:	2800      	cmp	r0, #0
 800e140:	d101      	bne.n	800e146 <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
 800e142:	f000 fd2b 	bl	800eb9c <vPortYield>
	}
 800e146:	bd10      	pop	{r4, pc}
 800e148:	20002774 	.word	0x20002774
 800e14c:	200026f4 	.word	0x200026f4

0800e150 <prvIdleTask>:
{
 800e150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e152:	4e15      	ldr	r6, [pc, #84]	; (800e1a8 <prvIdleTask+0x58>)
 800e154:	4c15      	ldr	r4, [pc, #84]	; (800e1ac <prvIdleTask+0x5c>)
 800e156:	4f16      	ldr	r7, [pc, #88]	; (800e1b0 <prvIdleTask+0x60>)
 800e158:	e007      	b.n	800e16a <prvIdleTask+0x1a>
	++uxSchedulerSuspended;
 800e15a:	6923      	ldr	r3, [r4, #16]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e15c:	6df5      	ldr	r5, [r6, #92]	; 0x5c
	++uxSchedulerSuspended;
 800e15e:	3301      	adds	r3, #1
 800e160:	6123      	str	r3, [r4, #16]
			( void ) xTaskResumeAll();
 800e162:	f7ff ff7b 	bl	800e05c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e166:	2d00      	cmp	r5, #0
 800e168:	d108      	bne.n	800e17c <prvIdleTask+0x2c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e16a:	68e3      	ldr	r3, [r4, #12]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d1f4      	bne.n	800e15a <prvIdleTask+0xa>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	2b01      	cmp	r3, #1
 800e174:	d9f9      	bls.n	800e16a <prvIdleTask+0x1a>
				taskYIELD();
 800e176:	f000 fd11 	bl	800eb9c <vPortYield>
 800e17a:	e7f6      	b.n	800e16a <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
 800e17c:	f000 fd1a 	bl	800ebb4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e180:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800e182:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e184:	1d28      	adds	r0, r5, #4
 800e186:	f7ff f997 	bl	800d4b8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e18a:	69f3      	ldr	r3, [r6, #28]
 800e18c:	3b01      	subs	r3, #1
 800e18e:	61f3      	str	r3, [r6, #28]
					--uxTasksDeleted;
 800e190:	68e3      	ldr	r3, [r4, #12]
 800e192:	3b01      	subs	r3, #1
 800e194:	60e3      	str	r3, [r4, #12]
				taskEXIT_CRITICAL();
 800e196:	f000 fd19 	bl	800ebcc <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800e19a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e19c:	f000 fdfa 	bl	800ed94 <vPortFree>
		vPortFree( pxTCB );
 800e1a0:	0028      	movs	r0, r5
 800e1a2:	f000 fdf7 	bl	800ed94 <vPortFree>
 800e1a6:	e7e0      	b.n	800e16a <prvIdleTask+0x1a>
 800e1a8:	200026f4 	.word	0x200026f4
 800e1ac:	20002774 	.word	0x20002774
 800e1b0:	20002790 	.word	0x20002790

0800e1b4 <uxTaskGetSystemState>:
	{
 800e1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1b6:	4647      	mov	r7, r8
 800e1b8:	46ce      	mov	lr, r9
 800e1ba:	4690      	mov	r8, r2
	++uxSchedulerSuspended;
 800e1bc:	4a33      	ldr	r2, [pc, #204]	; (800e28c <uxTaskGetSystemState+0xd8>)
	{
 800e1be:	b580      	push	{r7, lr}
	++uxSchedulerSuspended;
 800e1c0:	6913      	ldr	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e1c2:	4f33      	ldr	r7, [pc, #204]	; (800e290 <uxTaskGetSystemState+0xdc>)
	++uxSchedulerSuspended;
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	6113      	str	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e1c8:	69fb      	ldr	r3, [r7, #28]
	{
 800e1ca:	0006      	movs	r6, r0
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e1cc:	2500      	movs	r5, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e1ce:	428b      	cmp	r3, r1
 800e1d0:	d82c      	bhi.n	800e22c <uxTaskGetSystemState+0x78>
 800e1d2:	238c      	movs	r3, #140	; 0x8c
 800e1d4:	425b      	negs	r3, r3
 800e1d6:	4699      	mov	r9, r3
 800e1d8:	4c2e      	ldr	r4, [pc, #184]	; (800e294 <uxTaskGetSystemState+0xe0>)
 800e1da:	2300      	movs	r3, #0
 800e1dc:	44a1      	add	r9, r4
 800e1de:	e002      	b.n	800e1e6 <uxTaskGetSystemState+0x32>
 800e1e0:	3c14      	subs	r4, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1e2:	454c      	cmp	r4, r9
 800e1e4:	d00d      	beq.n	800e202 <uxTaskGetSystemState+0x4e>
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e1e6:	6822      	ldr	r2, [r4, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e1e8:	18f0      	adds	r0, r6, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e1ea:	2a00      	cmp	r2, #0
 800e1ec:	d0f8      	beq.n	800e1e0 <uxTaskGetSystemState+0x2c>
 800e1ee:	0021      	movs	r1, r4
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	f7ff fc61 	bl	800dab8 <prvListTaskWithinSingleList.part.1>
 800e1f6:	182d      	adds	r5, r5, r0
 800e1f8:	016b      	lsls	r3, r5, #5
 800e1fa:	3c14      	subs	r4, #20
 800e1fc:	18f0      	adds	r0, r6, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1fe:	454c      	cmp	r4, r9
 800e200:	d1f1      	bne.n	800e1e6 <uxTaskGetSystemState+0x32>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e202:	6839      	ldr	r1, [r7, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e204:	680b      	ldr	r3, [r1, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d121      	bne.n	800e24e <uxTaskGetSystemState+0x9a>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e20a:	68f9      	ldr	r1, [r7, #12]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e20c:	680b      	ldr	r3, [r1, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d127      	bne.n	800e262 <uxTaskGetSystemState+0xae>
 800e212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e214:	2b00      	cmp	r3, #0
 800e216:	d12d      	bne.n	800e274 <uxTaskGetSystemState+0xc0>
 800e218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d10d      	bne.n	800e23a <uxTaskGetSystemState+0x86>
					if( pulTotalRunTime != NULL )
 800e21e:	4643      	mov	r3, r8
 800e220:	2b00      	cmp	r3, #0
 800e222:	d003      	beq.n	800e22c <uxTaskGetSystemState+0x78>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e224:	f7f9 fbfc 	bl	8007a20 <ulMainGetRunTimeCounterValue>
 800e228:	4643      	mov	r3, r8
 800e22a:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e22c:	f7ff ff16 	bl	800e05c <xTaskResumeAll>
	}
 800e230:	0028      	movs	r0, r5
 800e232:	bc0c      	pop	{r2, r3}
 800e234:	4690      	mov	r8, r2
 800e236:	4699      	mov	r9, r3
 800e238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e23a:	0039      	movs	r1, r7
 800e23c:	2203      	movs	r2, #3
 800e23e:	3170      	adds	r1, #112	; 0x70
 800e240:	f7ff fc3a 	bl	800dab8 <prvListTaskWithinSingleList.part.1>
					if( pulTotalRunTime != NULL )
 800e244:	4643      	mov	r3, r8
 800e246:	182d      	adds	r5, r5, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d1eb      	bne.n	800e224 <uxTaskGetSystemState+0x70>
 800e24c:	e7ee      	b.n	800e22c <uxTaskGetSystemState+0x78>
 800e24e:	2202      	movs	r2, #2
 800e250:	f7ff fc32 	bl	800dab8 <prvListTaskWithinSingleList.part.1>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e254:	68f9      	ldr	r1, [r7, #12]
 800e256:	182d      	adds	r5, r5, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e258:	680b      	ldr	r3, [r1, #0]
 800e25a:	0168      	lsls	r0, r5, #5
 800e25c:	1830      	adds	r0, r6, r0
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d0d7      	beq.n	800e212 <uxTaskGetSystemState+0x5e>
 800e262:	2202      	movs	r2, #2
 800e264:	f7ff fc28 	bl	800dab8 <prvListTaskWithinSingleList.part.1>
 800e268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e26a:	182d      	adds	r5, r5, r0
 800e26c:	0168      	lsls	r0, r5, #5
 800e26e:	1830      	adds	r0, r6, r0
 800e270:	2b00      	cmp	r3, #0
 800e272:	d0d1      	beq.n	800e218 <uxTaskGetSystemState+0x64>
 800e274:	0039      	movs	r1, r7
 800e276:	2204      	movs	r2, #4
 800e278:	315c      	adds	r1, #92	; 0x5c
 800e27a:	f7ff fc1d 	bl	800dab8 <prvListTaskWithinSingleList.part.1>
 800e27e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e280:	182d      	adds	r5, r5, r0
 800e282:	0168      	lsls	r0, r5, #5
 800e284:	1830      	adds	r0, r6, r0
 800e286:	2b00      	cmp	r3, #0
 800e288:	d0c9      	beq.n	800e21e <uxTaskGetSystemState+0x6a>
 800e28a:	e7d6      	b.n	800e23a <uxTaskGetSystemState+0x86>
 800e28c:	20002774 	.word	0x20002774
 800e290:	200026f4 	.word	0x200026f4
 800e294:	20002808 	.word	0x20002808

0800e298 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e298:	4b05      	ldr	r3, [pc, #20]	; (800e2b0 <vTaskSwitchContext+0x18>)
{
 800e29a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e29c:	691b      	ldr	r3, [r3, #16]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d003      	beq.n	800e2aa <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	4b03      	ldr	r3, [pc, #12]	; (800e2b4 <vTaskSwitchContext+0x1c>)
 800e2a6:	611a      	str	r2, [r3, #16]
}
 800e2a8:	bd10      	pop	{r4, pc}
 800e2aa:	f7ff fc83 	bl	800dbb4 <vTaskSwitchContext.part.5>
 800e2ae:	e7fb      	b.n	800e2a8 <vTaskSwitchContext+0x10>
 800e2b0:	20002774 	.word	0x20002774
 800e2b4:	200026f4 	.word	0x200026f4

0800e2b8 <vTaskPlaceOnEventList>:
{
 800e2b8:	b570      	push	{r4, r5, r6, lr}
 800e2ba:	000d      	movs	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2bc:	4c0b      	ldr	r4, [pc, #44]	; (800e2ec <vTaskPlaceOnEventList+0x34>)
 800e2be:	6861      	ldr	r1, [r4, #4]
 800e2c0:	3118      	adds	r1, #24
 800e2c2:	f7ff f8e1 	bl	800d488 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e2c6:	6860      	ldr	r0, [r4, #4]
 800e2c8:	3004      	adds	r0, #4
 800e2ca:	f7ff f8f5 	bl	800d4b8 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800e2ce:	1c6b      	adds	r3, r5, #1
 800e2d0:	d004      	beq.n	800e2dc <vTaskPlaceOnEventList+0x24>
			xTimeToWake = xTickCount + xTicksToWait;
 800e2d2:	68a0      	ldr	r0, [r4, #8]
 800e2d4:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e2d6:	f7ff fc4f 	bl	800db78 <prvAddCurrentTaskToDelayedList>
}
 800e2da:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e2dc:	0020      	movs	r0, r4
 800e2de:	6861      	ldr	r1, [r4, #4]
 800e2e0:	3070      	adds	r0, #112	; 0x70
 800e2e2:	3104      	adds	r1, #4
 800e2e4:	f7ff f8c4 	bl	800d470 <vListInsertEnd>
 800e2e8:	e7f7      	b.n	800e2da <vTaskPlaceOnEventList+0x22>
 800e2ea:	46c0      	nop			; (mov r8, r8)
 800e2ec:	200026f4 	.word	0x200026f4

0800e2f0 <vTaskPlaceOnEventListRestricted>:
	{
 800e2f0:	b570      	push	{r4, r5, r6, lr}
 800e2f2:	000d      	movs	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2f4:	4c06      	ldr	r4, [pc, #24]	; (800e310 <vTaskPlaceOnEventListRestricted+0x20>)
 800e2f6:	6861      	ldr	r1, [r4, #4]
 800e2f8:	3118      	adds	r1, #24
 800e2fa:	f7ff f8b9 	bl	800d470 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e2fe:	6860      	ldr	r0, [r4, #4]
 800e300:	3004      	adds	r0, #4
 800e302:	f7ff f8d9 	bl	800d4b8 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800e306:	68a0      	ldr	r0, [r4, #8]
 800e308:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e30a:	f7ff fc35 	bl	800db78 <prvAddCurrentTaskToDelayedList>
	}
 800e30e:	bd70      	pop	{r4, r5, r6, pc}
 800e310:	200026f4 	.word	0x200026f4

0800e314 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e314:	68c3      	ldr	r3, [r0, #12]
{
 800e316:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e318:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e31a:	0026      	movs	r6, r4
 800e31c:	3618      	adds	r6, #24
 800e31e:	0030      	movs	r0, r6
 800e320:	f7ff f8ca 	bl	800d4b8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e324:	4b13      	ldr	r3, [pc, #76]	; (800e374 <xTaskRemoveFromEventList+0x60>)
 800e326:	691b      	ldr	r3, [r3, #16]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d11a      	bne.n	800e362 <xTaskRemoveFromEventList+0x4e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800e32c:	1d26      	adds	r6, r4, #4
 800e32e:	0030      	movs	r0, r6
 800e330:	f7ff f8c2 	bl	800d4b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e334:	4d10      	ldr	r5, [pc, #64]	; (800e378 <xTaskRemoveFromEventList+0x64>)
 800e336:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e338:	69aa      	ldr	r2, [r5, #24]
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d818      	bhi.n	800e370 <xTaskRemoveFromEventList+0x5c>
 800e33e:	0098      	lsls	r0, r3, #2
 800e340:	18c0      	adds	r0, r0, r3
 800e342:	4b0e      	ldr	r3, [pc, #56]	; (800e37c <xTaskRemoveFromEventList+0x68>)
 800e344:	0080      	lsls	r0, r0, #2
 800e346:	18c0      	adds	r0, r0, r3
 800e348:	0031      	movs	r1, r6
 800e34a:	f7ff f891 	bl	800d470 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e34e:	686b      	ldr	r3, [r5, #4]
 800e350:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800e354:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e356:	429a      	cmp	r2, r3
 800e358:	d902      	bls.n	800e360 <xTaskRemoveFromEventList+0x4c>
		xYieldPending = pdTRUE;
 800e35a:	2301      	movs	r3, #1
		xReturn = pdTRUE;
 800e35c:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800e35e:	612b      	str	r3, [r5, #16]
}
 800e360:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e362:	4d05      	ldr	r5, [pc, #20]	; (800e378 <xTaskRemoveFromEventList+0x64>)
 800e364:	0031      	movs	r1, r6
 800e366:	0028      	movs	r0, r5
 800e368:	3048      	adds	r0, #72	; 0x48
 800e36a:	f7ff f881 	bl	800d470 <vListInsertEnd>
 800e36e:	e7ee      	b.n	800e34e <xTaskRemoveFromEventList+0x3a>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e370:	61ab      	str	r3, [r5, #24]
 800e372:	e7e4      	b.n	800e33e <xTaskRemoveFromEventList+0x2a>
 800e374:	20002774 	.word	0x20002774
 800e378:	200026f4 	.word	0x200026f4
 800e37c:	20002790 	.word	0x20002790

0800e380 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e380:	4b03      	ldr	r3, [pc, #12]	; (800e390 <vTaskSetTimeOutState+0x10>)
 800e382:	695b      	ldr	r3, [r3, #20]
 800e384:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e386:	4b03      	ldr	r3, [pc, #12]	; (800e394 <vTaskSetTimeOutState+0x14>)
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	6043      	str	r3, [r0, #4]
}
 800e38c:	4770      	bx	lr
 800e38e:	46c0      	nop			; (mov r8, r8)
 800e390:	20002774 	.word	0x20002774
 800e394:	200026f4 	.word	0x200026f4

0800e398 <xTaskCheckForTimeOut>:
{
 800e398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39a:	000e      	movs	r6, r1
 800e39c:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e39e:	f000 fc09 	bl	800ebb4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e3a2:	4911      	ldr	r1, [pc, #68]	; (800e3e8 <xTaskCheckForTimeOut+0x50>)
			if( *pxTicksToWait == portMAX_DELAY )
 800e3a4:	6832      	ldr	r2, [r6, #0]
		const TickType_t xConstTickCount = xTickCount;
 800e3a6:	6888      	ldr	r0, [r1, #8]
			if( *pxTicksToWait == portMAX_DELAY )
 800e3a8:	1c53      	adds	r3, r2, #1
 800e3aa:	d01a      	beq.n	800e3e2 <xTaskCheckForTimeOut+0x4a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e3ac:	4b0f      	ldr	r3, [pc, #60]	; (800e3ec <xTaskCheckForTimeOut+0x54>)
 800e3ae:	6827      	ldr	r7, [r4, #0]
 800e3b0:	695d      	ldr	r5, [r3, #20]
 800e3b2:	469c      	mov	ip, r3
 800e3b4:	6863      	ldr	r3, [r4, #4]
 800e3b6:	42af      	cmp	r7, r5
 800e3b8:	d002      	beq.n	800e3c0 <xTaskCheckForTimeOut+0x28>
			xReturn = pdTRUE;
 800e3ba:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e3bc:	4298      	cmp	r0, r3
 800e3be:	d20c      	bcs.n	800e3da <xTaskCheckForTimeOut+0x42>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800e3c0:	1ac7      	subs	r7, r0, r3
			xReturn = pdTRUE;
 800e3c2:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800e3c4:	42ba      	cmp	r2, r7
 800e3c6:	d908      	bls.n	800e3da <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800e3c8:	1a1b      	subs	r3, r3, r0
 800e3ca:	189b      	adds	r3, r3, r2
 800e3cc:	6033      	str	r3, [r6, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e3ce:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 800e3d0:	2500      	movs	r5, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e3d2:	695b      	ldr	r3, [r3, #20]
 800e3d4:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e3d6:	688b      	ldr	r3, [r1, #8]
 800e3d8:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800e3da:	f000 fbf7 	bl	800ebcc <vPortExitCritical>
}
 800e3de:	0028      	movs	r0, r5
 800e3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800e3e2:	2500      	movs	r5, #0
 800e3e4:	e7f9      	b.n	800e3da <xTaskCheckForTimeOut+0x42>
 800e3e6:	46c0      	nop			; (mov r8, r8)
 800e3e8:	200026f4 	.word	0x200026f4
 800e3ec:	20002774 	.word	0x20002774

0800e3f0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	4b01      	ldr	r3, [pc, #4]	; (800e3f8 <vTaskMissedYield+0x8>)
 800e3f4:	611a      	str	r2, [r3, #16]
}
 800e3f6:	4770      	bx	lr
 800e3f8:	200026f4 	.word	0x200026f4

0800e3fc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e3fc:	4b04      	ldr	r3, [pc, #16]	; (800e410 <xTaskGetSchedulerState+0x14>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e3fe:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800e400:	685a      	ldr	r2, [r3, #4]
 800e402:	2a00      	cmp	r2, #0
 800e404:	d003      	beq.n	800e40e <xTaskGetSchedulerState+0x12>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e406:	6918      	ldr	r0, [r3, #16]
				xReturn = taskSCHEDULER_SUSPENDED;
 800e408:	4243      	negs	r3, r0
 800e40a:	4158      	adcs	r0, r3
 800e40c:	0040      	lsls	r0, r0, #1
	}
 800e40e:	4770      	bx	lr
 800e410:	20002774 	.word	0x20002774

0800e414 <vTaskPriorityInherit>:
	{
 800e414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e416:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800e418:	d018      	beq.n	800e44c <vTaskPriorityInherit+0x38>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e41a:	4d16      	ldr	r5, [pc, #88]	; (800e474 <vTaskPriorityInherit+0x60>)
 800e41c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e41e:	686b      	ldr	r3, [r5, #4]
 800e420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e422:	429a      	cmp	r2, r3
 800e424:	d212      	bcs.n	800e44c <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e426:	6983      	ldr	r3, [r0, #24]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	db04      	blt.n	800e436 <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e42c:	686b      	ldr	r3, [r5, #4]
 800e42e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e430:	2307      	movs	r3, #7
 800e432:	1a5b      	subs	r3, r3, r1
 800e434:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e436:	0093      	lsls	r3, r2, #2
 800e438:	189b      	adds	r3, r3, r2
 800e43a:	4e0f      	ldr	r6, [pc, #60]	; (800e478 <vTaskPriorityInherit+0x64>)
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	6962      	ldr	r2, [r4, #20]
 800e440:	18f3      	adds	r3, r6, r3
 800e442:	429a      	cmp	r2, r3
 800e444:	d003      	beq.n	800e44e <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e446:	686b      	ldr	r3, [r5, #4]
 800e448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e44a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800e44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e44e:	1d27      	adds	r7, r4, #4
 800e450:	0038      	movs	r0, r7
 800e452:	f7ff f831 	bl	800d4b8 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e456:	686b      	ldr	r3, [r5, #4]
					prvAddTaskToReadyList( pxTCB );
 800e458:	69aa      	ldr	r2, [r5, #24]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e45c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e45e:	4293      	cmp	r3, r2
 800e460:	d900      	bls.n	800e464 <vTaskPriorityInherit+0x50>
 800e462:	61ab      	str	r3, [r5, #24]
 800e464:	0098      	lsls	r0, r3, #2
 800e466:	18c0      	adds	r0, r0, r3
 800e468:	0080      	lsls	r0, r0, #2
 800e46a:	1830      	adds	r0, r6, r0
 800e46c:	0039      	movs	r1, r7
 800e46e:	f7fe ffff 	bl	800d470 <vListInsertEnd>
	}
 800e472:	e7eb      	b.n	800e44c <vTaskPriorityInherit+0x38>
 800e474:	200026f4 	.word	0x200026f4
 800e478:	20002790 	.word	0x20002790

0800e47c <xTaskPriorityDisinherit>:
	{
 800e47c:	b570      	push	{r4, r5, r6, lr}
 800e47e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800e480:	d008      	beq.n	800e494 <xTaskPriorityDisinherit+0x18>
			( pxTCB->uxMutexesHeld )--;
 800e482:	6d03      	ldr	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e484:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e486:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800e488:	3b01      	subs	r3, #1
 800e48a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e48c:	428a      	cmp	r2, r1
 800e48e:	d001      	beq.n	800e494 <xTaskPriorityDisinherit+0x18>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e490:	2b00      	cmp	r3, #0
 800e492:	d001      	beq.n	800e498 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800e494:	2000      	movs	r0, #0
	}
 800e496:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e498:	1d05      	adds	r5, r0, #4
 800e49a:	0028      	movs	r0, r5
 800e49c:	f7ff f80c 	bl	800d4b8 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4a0:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e4a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4a4:	1ad2      	subs	r2, r2, r3
 800e4a6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e4a8:	4a07      	ldr	r2, [pc, #28]	; (800e4c8 <xTaskPriorityDisinherit+0x4c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e4aa:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e4ac:	6991      	ldr	r1, [r2, #24]
 800e4ae:	428b      	cmp	r3, r1
 800e4b0:	d900      	bls.n	800e4b4 <xTaskPriorityDisinherit+0x38>
 800e4b2:	6193      	str	r3, [r2, #24]
 800e4b4:	0098      	lsls	r0, r3, #2
 800e4b6:	18c0      	adds	r0, r0, r3
 800e4b8:	4b04      	ldr	r3, [pc, #16]	; (800e4cc <xTaskPriorityDisinherit+0x50>)
 800e4ba:	0080      	lsls	r0, r0, #2
 800e4bc:	18c0      	adds	r0, r0, r3
 800e4be:	0029      	movs	r1, r5
 800e4c0:	f7fe ffd6 	bl	800d470 <vListInsertEnd>
					xReturn = pdTRUE;
 800e4c4:	2001      	movs	r0, #1
		return xReturn;
 800e4c6:	e7e6      	b.n	800e496 <xTaskPriorityDisinherit+0x1a>
 800e4c8:	200026f4 	.word	0x200026f4
 800e4cc:	20002790 	.word	0x20002790

0800e4d0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800e4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4d2:	46c6      	mov	lr, r8
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800e4d4:	2600      	movs	r6, #0
	{
 800e4d6:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e4d8:	4b27      	ldr	r3, [pc, #156]	; (800e578 <vTaskList+0xa8>)
	{
 800e4da:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800e4dc:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800e4de:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800e4e0:	9202      	str	r2, [sp, #8]
	{
 800e4e2:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800e4e4:	69d8      	ldr	r0, [r3, #28]
 800e4e6:	0140      	lsls	r0, r0, #5
 800e4e8:	f000 fbde 	bl	800eca8 <pvPortMalloc>
 800e4ec:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800e4ee:	d03f      	beq.n	800e570 <vTaskList+0xa0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	9902      	ldr	r1, [sp, #8]
 800e4f4:	f7ff fe5e 	bl	800e1b4 <uxTaskGetSystemState>
 800e4f8:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800e4fa:	9603      	str	r6, [sp, #12]
 800e4fc:	9b03      	ldr	r3, [sp, #12]
 800e4fe:	9a02      	ldr	r2, [sp, #8]
 800e500:	429a      	cmp	r2, r3
 800e502:	d932      	bls.n	800e56a <vTaskList+0x9a>
 800e504:	4b1d      	ldr	r3, [pc, #116]	; (800e57c <vTaskList+0xac>)
 800e506:	4e1e      	ldr	r6, [pc, #120]	; (800e580 <vTaskList+0xb0>)
 800e508:	4698      	mov	r8, r3
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800e50a:	9b03      	ldr	r3, [sp, #12]
 800e50c:	2700      	movs	r7, #0
 800e50e:	015b      	lsls	r3, r3, #5
 800e510:	18eb      	adds	r3, r5, r3
 800e512:	7b1b      	ldrb	r3, [r3, #12]
 800e514:	3b01      	subs	r3, #1
 800e516:	b2db      	uxtb	r3, r3
 800e518:	2b03      	cmp	r3, #3
 800e51a:	d801      	bhi.n	800e520 <vTaskList+0x50>
 800e51c:	4443      	add	r3, r8
 800e51e:	7d1f      	ldrb	r7, [r3, #20]
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e520:	9b03      	ldr	r3, [sp, #12]
 800e522:	0020      	movs	r0, r4
 800e524:	015b      	lsls	r3, r3, #5
 800e526:	18eb      	adds	r3, r5, r3
 800e528:	6859      	ldr	r1, [r3, #4]
 800e52a:	f7ff faad 	bl	800da88 <prvWriteNameToBuffer>
 800e52e:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800e530:	9b03      	ldr	r3, [sp, #12]
 800e532:	9a03      	ldr	r2, [sp, #12]
 800e534:	9903      	ldr	r1, [sp, #12]
 800e536:	015b      	lsls	r3, r3, #5
 800e538:	0149      	lsls	r1, r1, #5
 800e53a:	1869      	adds	r1, r5, r1
 800e53c:	6889      	ldr	r1, [r1, #8]
 800e53e:	18eb      	adds	r3, r5, r3
 800e540:	0152      	lsls	r2, r2, #5
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	18aa      	adds	r2, r5, r2
 800e546:	9101      	str	r1, [sp, #4]
 800e548:	8b92      	ldrh	r2, [r2, #28]
 800e54a:	0031      	movs	r1, r6
 800e54c:	9200      	str	r2, [sp, #0]
 800e54e:	003a      	movs	r2, r7
 800e550:	f004 fa2c 	bl	80129ac <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800e554:	0020      	movs	r0, r4
 800e556:	f7f1 fddf 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 800e55a:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 800e55c:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800e55e:	3301      	adds	r3, #1
 800e560:	9303      	str	r3, [sp, #12]
 800e562:	9a03      	ldr	r2, [sp, #12]
 800e564:	9b02      	ldr	r3, [sp, #8]
 800e566:	429a      	cmp	r2, r3
 800e568:	d3cf      	bcc.n	800e50a <vTaskList+0x3a>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800e56a:	0028      	movs	r0, r5
 800e56c:	f000 fc12 	bl	800ed94 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e570:	b004      	add	sp, #16
 800e572:	bc04      	pop	{r2}
 800e574:	4690      	mov	r8, r2
 800e576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e578:	200026f4 	.word	0x200026f4
 800e57c:	08017390 	.word	0x08017390
 800e580:	08019e3c 	.word	0x08019e3c

0800e584 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800e584:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e586:	46c6      	mov	lr, r8
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800e588:	2600      	movs	r6, #0
	{
 800e58a:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e58c:	4b28      	ldr	r3, [pc, #160]	; (800e630 <vTaskGetRunTimeStats+0xac>)
	{
 800e58e:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800e590:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800e592:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800e594:	9201      	str	r2, [sp, #4]
	{
 800e596:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800e598:	69d8      	ldr	r0, [r3, #28]
 800e59a:	0140      	lsls	r0, r0, #5
 800e59c:	f000 fb84 	bl	800eca8 <pvPortMalloc>
 800e5a0:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800e5a2:	d040      	beq.n	800e626 <vTaskGetRunTimeStats+0xa2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800e5a4:	9901      	ldr	r1, [sp, #4]
 800e5a6:	aa03      	add	r2, sp, #12
 800e5a8:	f7ff fe04 	bl	800e1b4 <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800e5ac:	2164      	movs	r1, #100	; 0x64
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800e5ae:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 800e5b0:	9803      	ldr	r0, [sp, #12]
 800e5b2:	f7f1 fdcd 	bl	8000150 <__udivsi3>
 800e5b6:	1e01      	subs	r1, r0, #0
 800e5b8:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800e5ba:	d031      	beq.n	800e620 <vTaskGetRunTimeStats+0x9c>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800e5bc:	9602      	str	r6, [sp, #8]
 800e5be:	9b02      	ldr	r3, [sp, #8]
 800e5c0:	9a01      	ldr	r2, [sp, #4]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d92c      	bls.n	800e620 <vTaskGetRunTimeStats+0x9c>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e5c6:	4b1b      	ldr	r3, [pc, #108]	; (800e634 <vTaskGetRunTimeStats+0xb0>)
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800e5c8:	4f1b      	ldr	r7, [pc, #108]	; (800e638 <vTaskGetRunTimeStats+0xb4>)
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e5ca:	4698      	mov	r8, r3
 800e5cc:	e00f      	b.n	800e5ee <vTaskGetRunTimeStats+0x6a>
 800e5ce:	0033      	movs	r3, r6
 800e5d0:	4641      	mov	r1, r8
 800e5d2:	f004 f9eb 	bl	80129ac <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800e5d6:	0020      	movs	r0, r4
 800e5d8:	f7f1 fd9e 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800e5dc:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 800e5de:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	9302      	str	r3, [sp, #8]
 800e5e4:	9a02      	ldr	r2, [sp, #8]
 800e5e6:	9b01      	ldr	r3, [sp, #4]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d219      	bcs.n	800e620 <vTaskGetRunTimeStats+0x9c>
 800e5ec:	9903      	ldr	r1, [sp, #12]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800e5ee:	9b02      	ldr	r3, [sp, #8]
 800e5f0:	015b      	lsls	r3, r3, #5
 800e5f2:	18eb      	adds	r3, r5, r3
 800e5f4:	6998      	ldr	r0, [r3, #24]
 800e5f6:	f7f1 fdab 	bl	8000150 <__udivsi3>
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e5fa:	9b02      	ldr	r3, [sp, #8]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800e5fc:	0006      	movs	r6, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e5fe:	015b      	lsls	r3, r3, #5
 800e600:	18eb      	adds	r3, r5, r3
 800e602:	6859      	ldr	r1, [r3, #4]
 800e604:	0020      	movs	r0, r4
 800e606:	f7ff fa3f 	bl	800da88 <prvWriteNameToBuffer>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e60a:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e60c:	0004      	movs	r4, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e60e:	015b      	lsls	r3, r3, #5
 800e610:	18eb      	adds	r3, r5, r3
 800e612:	699a      	ldr	r2, [r3, #24]
					if( ulStatsAsPercentage > 0UL )
 800e614:	2e00      	cmp	r6, #0
 800e616:	d1da      	bne.n	800e5ce <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800e618:	0039      	movs	r1, r7
 800e61a:	f004 f9c7 	bl	80129ac <sprintf>
 800e61e:	e7da      	b.n	800e5d6 <vTaskGetRunTimeStats+0x52>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800e620:	0028      	movs	r0, r5
 800e622:	f000 fbb7 	bl	800ed94 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e626:	b004      	add	sp, #16
 800e628:	bc04      	pop	{r2}
 800e62a:	4690      	mov	r8, r2
 800e62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e62e:	46c0      	nop			; (mov r8, r8)
 800e630:	200026f4 	.word	0x200026f4
 800e634:	08019e4c 	.word	0x08019e4c
 800e638:	08019e58 	.word	0x08019e58

0800e63c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e63c:	4b04      	ldr	r3, [pc, #16]	; (800e650 <pvTaskIncrementMutexHeldCount+0x14>)
 800e63e:	685a      	ldr	r2, [r3, #4]
 800e640:	2a00      	cmp	r2, #0
 800e642:	d003      	beq.n	800e64c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e644:	6859      	ldr	r1, [r3, #4]
 800e646:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800e648:	3201      	adds	r2, #1
 800e64a:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e64c:	6858      	ldr	r0, [r3, #4]
	}
 800e64e:	4770      	bx	lr
 800e650:	200026f4 	.word	0x200026f4

0800e654 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800e654:	b570      	push	{r4, r5, r6, lr}
 800e656:	0006      	movs	r6, r0
 800e658:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800e65a:	f000 faab 	bl	800ebb4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800e65e:	4c1c      	ldr	r4, [pc, #112]	; (800e6d0 <ulTaskNotifyTake+0x7c>)
 800e660:	6863      	ldr	r3, [r4, #4]
 800e662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e664:	2b00      	cmp	r3, #0
 800e666:	d105      	bne.n	800e674 <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800e668:	2101      	movs	r1, #1
 800e66a:	6862      	ldr	r2, [r4, #4]
 800e66c:	335c      	adds	r3, #92	; 0x5c
 800e66e:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800e670:	2d00      	cmp	r5, #0
 800e672:	d119      	bne.n	800e6a8 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e674:	f000 faaa 	bl	800ebcc <vPortExitCritical>

		taskENTER_CRITICAL();
 800e678:	f000 fa9c 	bl	800ebb4 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800e67c:	6863      	ldr	r3, [r4, #4]
 800e67e:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800e680:	2d00      	cmp	r5, #0
 800e682:	d005      	beq.n	800e690 <ulTaskNotifyTake+0x3c>
			{
				if( xClearCountOnExit != pdFALSE )
 800e684:	2e00      	cmp	r6, #0
 800e686:	d10b      	bne.n	800e6a0 <ulTaskNotifyTake+0x4c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800e688:	6862      	ldr	r2, [r4, #4]
 800e68a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e68c:	3b01      	subs	r3, #1
 800e68e:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800e690:	235c      	movs	r3, #92	; 0x5c
 800e692:	2100      	movs	r1, #0
 800e694:	6862      	ldr	r2, [r4, #4]
 800e696:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800e698:	f000 fa98 	bl	800ebcc <vPortExitCritical>

		return ulReturn;
	}
 800e69c:	0028      	movs	r0, r5
 800e69e:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	6863      	ldr	r3, [r4, #4]
 800e6a4:	659a      	str	r2, [r3, #88]	; 0x58
 800e6a6:	e7f3      	b.n	800e690 <ulTaskNotifyTake+0x3c>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e6a8:	6860      	ldr	r0, [r4, #4]
 800e6aa:	3004      	adds	r0, #4
 800e6ac:	f7fe ff04 	bl	800d4b8 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800e6b0:	1c6b      	adds	r3, r5, #1
 800e6b2:	d006      	beq.n	800e6c2 <ulTaskNotifyTake+0x6e>
							xTimeToWake = xTickCount + xTicksToWait;
 800e6b4:	68a0      	ldr	r0, [r4, #8]
 800e6b6:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e6b8:	f7ff fa5e 	bl	800db78 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800e6bc:	f000 fa6e 	bl	800eb9c <vPortYield>
 800e6c0:	e7d8      	b.n	800e674 <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e6c2:	0020      	movs	r0, r4
 800e6c4:	6861      	ldr	r1, [r4, #4]
 800e6c6:	3070      	adds	r0, #112	; 0x70
 800e6c8:	3104      	adds	r1, #4
 800e6ca:	f7fe fed1 	bl	800d470 <vListInsertEnd>
 800e6ce:	e7f5      	b.n	800e6bc <ulTaskNotifyTake+0x68>
 800e6d0:	200026f4 	.word	0x200026f4

0800e6d4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d6:	001e      	movs	r6, r3
 800e6d8:	0004      	movs	r4, r0
 800e6da:	000f      	movs	r7, r1
 800e6dc:	0015      	movs	r5, r2
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800e6de:	f000 fa69 	bl	800ebb4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e6e2:	2e00      	cmp	r6, #0
 800e6e4:	d001      	beq.n	800e6ea <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e6e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e6e8:	6033      	str	r3, [r6, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800e6ea:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 800e6ec:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 800e6ee:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->eNotifyState = eNotified;
 800e6f0:	54a1      	strb	r1, [r4, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 800e6f2:	b2db      	uxtb	r3, r3

			switch( eAction )
 800e6f4:	2d02      	cmp	r5, #2
 800e6f6:	d02e      	beq.n	800e756 <xTaskGenericNotify+0x82>
 800e6f8:	d927      	bls.n	800e74a <xTaskGenericNotify+0x76>
 800e6fa:	2d03      	cmp	r5, #3
 800e6fc:	d003      	beq.n	800e706 <xTaskGenericNotify+0x32>
 800e6fe:	2d04      	cmp	r5, #4
 800e700:	d102      	bne.n	800e708 <xTaskGenericNotify+0x34>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800e702:	2b02      	cmp	r3, #2
 800e704:	d02b      	beq.n	800e75e <xTaskGenericNotify+0x8a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e706:	65a7      	str	r7, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d004      	beq.n	800e716 <xTaskGenericNotify+0x42>
 800e70c:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e70e:	f000 fa5d 	bl	800ebcc <vPortExitCritical>

		return xReturn;
	}
 800e712:	0020      	movs	r0, r4
 800e714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e716:	1d26      	adds	r6, r4, #4
 800e718:	0030      	movs	r0, r6
 800e71a:	f7fe fecd 	bl	800d4b8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e71e:	4d11      	ldr	r5, [pc, #68]	; (800e764 <xTaskGenericNotify+0x90>)
 800e720:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e722:	69aa      	ldr	r2, [r5, #24]
 800e724:	4293      	cmp	r3, r2
 800e726:	d900      	bls.n	800e72a <xTaskGenericNotify+0x56>
 800e728:	61ab      	str	r3, [r5, #24]
 800e72a:	0098      	lsls	r0, r3, #2
 800e72c:	18c0      	adds	r0, r0, r3
 800e72e:	4b0e      	ldr	r3, [pc, #56]	; (800e768 <xTaskGenericNotify+0x94>)
 800e730:	0080      	lsls	r0, r0, #2
 800e732:	18c0      	adds	r0, r0, r3
 800e734:	0031      	movs	r1, r6
 800e736:	f7fe fe9b 	bl	800d470 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e73a:	686b      	ldr	r3, [r5, #4]
 800e73c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e740:	429a      	cmp	r2, r3
 800e742:	d9e3      	bls.n	800e70c <xTaskGenericNotify+0x38>
					taskYIELD_IF_USING_PREEMPTION();
 800e744:	f000 fa2a 	bl	800eb9c <vPortYield>
 800e748:	e7e0      	b.n	800e70c <xTaskGenericNotify+0x38>
			switch( eAction )
 800e74a:	2d01      	cmp	r5, #1
 800e74c:	d1dc      	bne.n	800e708 <xTaskGenericNotify+0x34>
					pxTCB->ulNotifiedValue |= ulValue;
 800e74e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e750:	4317      	orrs	r7, r2
 800e752:	65a7      	str	r7, [r4, #88]	; 0x58
					break;
 800e754:	e7d8      	b.n	800e708 <xTaskGenericNotify+0x34>
					( pxTCB->ulNotifiedValue )++;
 800e756:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e758:	3201      	adds	r2, #1
 800e75a:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800e75c:	e7d4      	b.n	800e708 <xTaskGenericNotify+0x34>
						xReturn = pdFAIL;
 800e75e:	2400      	movs	r4, #0
 800e760:	e7d5      	b.n	800e70e <xTaskGenericNotify+0x3a>
 800e762:	46c0      	nop			; (mov r8, r8)
 800e764:	200026f4 	.word	0x200026f4
 800e768:	20002790 	.word	0x20002790

0800e76c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e76c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e76e:	f000 fa21 	bl	800ebb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e772:	4c0f      	ldr	r4, [pc, #60]	; (800e7b0 <prvCheckForValidListAndQueue+0x44>)
 800e774:	6823      	ldr	r3, [r4, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d002      	beq.n	800e780 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e77a:	f000 fa27 	bl	800ebcc <vPortExitCritical>
}
 800e77e:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList2 );
 800e780:	0025      	movs	r5, r4
			vListInitialise( &xActiveTimerList1 );
 800e782:	1d26      	adds	r6, r4, #4
 800e784:	0030      	movs	r0, r6
			vListInitialise( &xActiveTimerList2 );
 800e786:	3518      	adds	r5, #24
			vListInitialise( &xActiveTimerList1 );
 800e788:	f7fe fe62 	bl	800d450 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e78c:	0028      	movs	r0, r5
 800e78e:	f7fe fe5f 	bl	800d450 <vListInitialise>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e792:	2200      	movs	r2, #0
 800e794:	2110      	movs	r1, #16
 800e796:	2004      	movs	r0, #4
			pxCurrentTimerList = &xActiveTimerList1;
 800e798:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 800e79a:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e79c:	f7fe ff6a 	bl	800d674 <xQueueGenericCreate>
 800e7a0:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	d0e9      	beq.n	800e77a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e7a6:	4903      	ldr	r1, [pc, #12]	; (800e7b4 <prvCheckForValidListAndQueue+0x48>)
 800e7a8:	f7ff f93e 	bl	800da28 <vQueueAddToRegistry>
 800e7ac:	e7e5      	b.n	800e77a <prvCheckForValidListAndQueue+0xe>
 800e7ae:	46c0      	nop			; (mov r8, r8)
 800e7b0:	2000281c 	.word	0x2000281c
 800e7b4:	08019e64 	.word	0x08019e64

0800e7b8 <prvInsertTimerInActiveList>:
{
 800e7b8:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e7ba:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e7bc:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800e7be:	4291      	cmp	r1, r2
 800e7c0:	d806      	bhi.n	800e7d0 <prvInsertTimerInActiveList+0x18>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800e7c2:	1ad2      	subs	r2, r2, r3
 800e7c4:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
 800e7c6:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d30d      	bcc.n	800e7e8 <prvInsertTimerInActiveList+0x30>
}
 800e7cc:	0020      	movs	r0, r4
 800e7ce:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d202      	bcs.n	800e7da <prvInsertTimerInActiveList+0x22>
			xProcessTimerNow = pdTRUE;
 800e7d4:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e7d6:	4299      	cmp	r1, r3
 800e7d8:	d2f8      	bcs.n	800e7cc <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e7da:	4b07      	ldr	r3, [pc, #28]	; (800e7f8 <prvInsertTimerInActiveList+0x40>)
 800e7dc:	1d01      	adds	r1, r0, #4
 800e7de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e7e0:	f7fe fe52 	bl	800d488 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e7e4:	2400      	movs	r4, #0
 800e7e6:	e7f1      	b.n	800e7cc <prvInsertTimerInActiveList+0x14>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e7e8:	4b03      	ldr	r3, [pc, #12]	; (800e7f8 <prvInsertTimerInActiveList+0x40>)
 800e7ea:	1d01      	adds	r1, r0, #4
 800e7ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e7ee:	f7fe fe4b 	bl	800d488 <vListInsert>
 800e7f2:	2400      	movs	r4, #0
 800e7f4:	e7ea      	b.n	800e7cc <prvInsertTimerInActiveList+0x14>
 800e7f6:	46c0      	nop			; (mov r8, r8)
 800e7f8:	2000281c 	.word	0x2000281c

0800e7fc <xTimerCreateTimerTask>:
{
 800e7fc:	b500      	push	{lr}
 800e7fe:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800e800:	f7ff ffb4 	bl	800e76c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e804:	4b08      	ldr	r3, [pc, #32]	; (800e828 <xTimerCreateTimerTask+0x2c>)
BaseType_t xReturn = pdFAIL;
 800e806:	2000      	movs	r0, #0
	if( xTimerQueue != NULL )
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d00a      	beq.n	800e824 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800e80e:	2303      	movs	r3, #3
 800e810:	9003      	str	r0, [sp, #12]
 800e812:	9002      	str	r0, [sp, #8]
 800e814:	9001      	str	r0, [sp, #4]
 800e816:	9300      	str	r3, [sp, #0]
 800e818:	2296      	movs	r2, #150	; 0x96
 800e81a:	2300      	movs	r3, #0
 800e81c:	4903      	ldr	r1, [pc, #12]	; (800e82c <xTimerCreateTimerTask+0x30>)
 800e81e:	4804      	ldr	r0, [pc, #16]	; (800e830 <xTimerCreateTimerTask+0x34>)
 800e820:	f7ff fa1e 	bl	800dc60 <xTaskGenericCreate>
}
 800e824:	b005      	add	sp, #20
 800e826:	bd00      	pop	{pc}
 800e828:	2000281c 	.word	0x2000281c
 800e82c:	08019e6c 	.word	0x08019e6c
 800e830:	0800e935 	.word	0x0800e935

0800e834 <xTimerCreate>:
{
 800e834:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e836:	46c6      	mov	lr, r8
 800e838:	000d      	movs	r5, r1
 800e83a:	b500      	push	{lr}
 800e83c:	4680      	mov	r8, r0
 800e83e:	0017      	movs	r7, r2
 800e840:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800e842:	2900      	cmp	r1, #0
 800e844:	d014      	beq.n	800e870 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800e846:	202c      	movs	r0, #44	; 0x2c
 800e848:	f000 fa2e 	bl	800eca8 <pvPortMalloc>
 800e84c:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800e84e:	d00b      	beq.n	800e868 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800e850:	f7ff ff8c 	bl	800e76c <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800e854:	4643      	mov	r3, r8
 800e856:	6023      	str	r3, [r4, #0]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e858:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e85a:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800e85c:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800e85e:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e860:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e862:	1d20      	adds	r0, r4, #4
 800e864:	f7fe fe00 	bl	800d468 <vListInitialiseItem>
}
 800e868:	0020      	movs	r0, r4
 800e86a:	bc04      	pop	{r2}
 800e86c:	4690      	mov	r8, r2
 800e86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTimer = NULL;
 800e870:	2400      	movs	r4, #0
	return ( TimerHandle_t ) pxNewTimer;
 800e872:	e7f9      	b.n	800e868 <xTimerCreate+0x34>

0800e874 <xTimerGenericCommand>:
{
 800e874:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800e876:	4d13      	ldr	r5, [pc, #76]	; (800e8c4 <xTimerGenericCommand+0x50>)
{
 800e878:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800e87a:	682c      	ldr	r4, [r5, #0]
{
 800e87c:	001e      	movs	r6, r3
	if( xTimerQueue != NULL )
 800e87e:	2c00      	cmp	r4, #0
 800e880:	d017      	beq.n	800e8b2 <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 800e882:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e884:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e886:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e888:	2905      	cmp	r1, #5
 800e88a:	dc0a      	bgt.n	800e8a2 <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e88c:	f7ff fdb6 	bl	800e3fc <xTaskGetSchedulerState>
 800e890:	2802      	cmp	r0, #2
 800e892:	d010      	beq.n	800e8b6 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e894:	6828      	ldr	r0, [r5, #0]
 800e896:	2300      	movs	r3, #0
 800e898:	2200      	movs	r2, #0
 800e89a:	4669      	mov	r1, sp
 800e89c:	f7fe ff16 	bl	800d6cc <xQueueGenericSend>
 800e8a0:	e005      	b.n	800e8ae <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	0032      	movs	r2, r6
 800e8a6:	4669      	mov	r1, sp
 800e8a8:	0020      	movs	r0, r4
 800e8aa:	f7fe ff8b 	bl	800d7c4 <xQueueGenericSendFromISR>
}
 800e8ae:	b004      	add	sp, #16
 800e8b0:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 800e8b2:	2000      	movs	r0, #0
	return xReturn;
 800e8b4:	e7fb      	b.n	800e8ae <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e8b6:	6828      	ldr	r0, [r5, #0]
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	9a08      	ldr	r2, [sp, #32]
 800e8bc:	4669      	mov	r1, sp
 800e8be:	f7fe ff05 	bl	800d6cc <xQueueGenericSend>
 800e8c2:	e7f4      	b.n	800e8ae <xTimerGenericCommand+0x3a>
 800e8c4:	2000281c 	.word	0x2000281c

0800e8c8 <prvSwitchTimerLists>:
{
 800e8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8ca:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8cc:	2300      	movs	r3, #0
{
 800e8ce:	b500      	push	{lr}
 800e8d0:	4e17      	ldr	r6, [pc, #92]	; (800e930 <prvSwitchTimerLists+0x68>)
 800e8d2:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8d4:	4698      	mov	r8, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8d6:	e00c      	b.n	800e8f2 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8d8:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8da:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8dc:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8de:	1d25      	adds	r5, r4, #4
 800e8e0:	0028      	movs	r0, r5
 800e8e2:	f7fe fde9 	bl	800d4b8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8e8:	0020      	movs	r0, r4
 800e8ea:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e8ec:	69e3      	ldr	r3, [r4, #28]
 800e8ee:	2b01      	cmp	r3, #1
 800e8f0:	d00a      	beq.n	800e908 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8f2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	2a00      	cmp	r2, #0
 800e8f8:	d1ee      	bne.n	800e8d8 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 800e8fa:	6b32      	ldr	r2, [r6, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 800e8fc:	6333      	str	r3, [r6, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
 800e8fe:	62f2      	str	r2, [r6, #44]	; 0x2c
}
 800e900:	b002      	add	sp, #8
 800e902:	bc04      	pop	{r2}
 800e904:	4690      	mov	r8, r2
 800e906:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e908:	69a3      	ldr	r3, [r4, #24]
 800e90a:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 800e90c:	429f      	cmp	r7, r3
 800e90e:	d206      	bcs.n	800e91e <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e910:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e912:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e914:	0029      	movs	r1, r5
 800e916:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800e918:	f7fe fdb6 	bl	800d488 <vListInsert>
 800e91c:	e7e9      	b.n	800e8f2 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e91e:	4643      	mov	r3, r8
 800e920:	003a      	movs	r2, r7
 800e922:	9300      	str	r3, [sp, #0]
 800e924:	2100      	movs	r1, #0
 800e926:	2300      	movs	r3, #0
 800e928:	0020      	movs	r0, r4
 800e92a:	f7ff ffa3 	bl	800e874 <xTimerGenericCommand>
 800e92e:	e7e0      	b.n	800e8f2 <prvSwitchTimerLists+0x2a>
 800e930:	2000281c 	.word	0x2000281c

0800e934 <prvTimerTask>:
		xNextExpireTime = ( TickType_t ) 0U;
 800e934:	2300      	movs	r3, #0
{
 800e936:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e938:	4645      	mov	r5, r8
 800e93a:	4657      	mov	r7, sl
 800e93c:	46de      	mov	lr, fp
 800e93e:	464e      	mov	r6, r9
		xNextExpireTime = ( TickType_t ) 0U;
 800e940:	4698      	mov	r8, r3
 800e942:	3301      	adds	r3, #1
 800e944:	469a      	mov	sl, r3
{
 800e946:	b5e0      	push	{r5, r6, r7, lr}
 800e948:	4d61      	ldr	r5, [pc, #388]	; (800ead0 <prvTimerTask+0x19c>)
 800e94a:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e94c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if( *pxListWasEmpty == pdFALSE )
 800e94e:	681a      	ldr	r2, [r3, #0]
 800e950:	2a00      	cmp	r2, #0
 800e952:	d050      	beq.n	800e9f6 <prvTimerTask+0xc2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800e958:	f7ff fae2 	bl	800df20 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e95c:	f7ff fae8 	bl	800df30 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e960:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800e962:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800e964:	4283      	cmp	r3, r0
 800e966:	d84e      	bhi.n	800ea06 <prvTimerTask+0xd2>
	xLastTime = xTimeNow;
 800e968:	6368      	str	r0, [r5, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e96a:	4286      	cmp	r6, r0
 800e96c:	d961      	bls.n	800ea32 <prvTimerTask+0xfe>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800e96e:	1b31      	subs	r1, r6, r4
 800e970:	6828      	ldr	r0, [r5, #0]
 800e972:	f7ff f86b 	bl	800da4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e976:	f7ff fb71 	bl	800e05c <xTaskResumeAll>
 800e97a:	2800      	cmp	r0, #0
 800e97c:	d056      	beq.n	800ea2c <prvTimerTask+0xf8>
 800e97e:	2784      	movs	r7, #132	; 0x84
 800e980:	00bf      	lsls	r7, r7, #2
 800e982:	23c7      	movs	r3, #199	; 0xc7
 800e984:	4699      	mov	r9, r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e986:	2300      	movs	r3, #0
 800e988:	2200      	movs	r2, #0
 800e98a:	a904      	add	r1, sp, #16
 800e98c:	6828      	ldr	r0, [r5, #0]
 800e98e:	f7fe ff7b 	bl	800d888 <xQueueGenericReceive>
 800e992:	2800      	cmp	r0, #0
 800e994:	d0da      	beq.n	800e94c <prvTimerTask+0x18>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e996:	9b04      	ldr	r3, [sp, #16]
 800e998:	9c06      	ldr	r4, [sp, #24]
 800e99a:	9302      	str	r3, [sp, #8]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	da0b      	bge.n	800e9b8 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e9a0:	9b07      	ldr	r3, [sp, #28]
 800e9a2:	0020      	movs	r0, r4
 800e9a4:	9302      	str	r3, [sp, #8]
 800e9a6:	9b05      	ldr	r3, [sp, #20]
 800e9a8:	9902      	ldr	r1, [sp, #8]
 800e9aa:	9303      	str	r3, [sp, #12]
 800e9ac:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e9ae:	9b04      	ldr	r3, [sp, #16]
 800e9b0:	9302      	str	r3, [sp, #8]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	dbe7      	blt.n	800e986 <prvTimerTask+0x52>
 800e9b6:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800e9b8:	6963      	ldr	r3, [r4, #20]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d002      	beq.n	800e9c4 <prvTimerTask+0x90>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e9be:	1d20      	adds	r0, r4, #4
 800e9c0:	f7fe fd7a 	bl	800d4b8 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800e9c4:	f7ff fab4 	bl	800df30 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e9c8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800e9ca:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 800e9cc:	4298      	cmp	r0, r3
 800e9ce:	d320      	bcc.n	800ea12 <prvTimerTask+0xde>
 800e9d0:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
 800e9d2:	636e      	str	r6, [r5, #52]	; 0x34
 800e9d4:	2b09      	cmp	r3, #9
 800e9d6:	d8d6      	bhi.n	800e986 <prvTimerTask+0x52>
 800e9d8:	4652      	mov	r2, sl
 800e9da:	409a      	lsls	r2, r3
 800e9dc:	0013      	movs	r3, r2
 800e9de:	403a      	ands	r2, r7
 800e9e0:	4693      	mov	fp, r2
 800e9e2:	d16b      	bne.n	800eabc <prvTimerTask+0x188>
 800e9e4:	464a      	mov	r2, r9
 800e9e6:	421a      	tst	r2, r3
 800e9e8:	d144      	bne.n	800ea74 <prvTimerTask+0x140>
 800e9ea:	069b      	lsls	r3, r3, #26
 800e9ec:	d5cb      	bpl.n	800e986 <prvTimerTask+0x52>
					vPortFree( pxTimer );
 800e9ee:	0020      	movs	r0, r4
 800e9f0:	f000 f9d0 	bl	800ed94 <vPortFree>
 800e9f4:	e7c5      	b.n	800e982 <prvTimerTask+0x4e>
	vTaskSuspendAll();
 800e9f6:	f7ff fa93 	bl	800df20 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e9fa:	f7ff fa99 	bl	800df30 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e9fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800ea00:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800ea02:	4283      	cmp	r3, r0
 800ea04:	d908      	bls.n	800ea18 <prvTimerTask+0xe4>
		prvSwitchTimerLists();
 800ea06:	f7ff ff5f 	bl	800e8c8 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800ea0a:	636c      	str	r4, [r5, #52]	; 0x34
			( void ) xTaskResumeAll();
 800ea0c:	f7ff fb26 	bl	800e05c <xTaskResumeAll>
 800ea10:	e7b5      	b.n	800e97e <prvTimerTask+0x4a>
		prvSwitchTimerLists();
 800ea12:	f7ff ff59 	bl	800e8c8 <prvSwitchTimerLists>
 800ea16:	e7db      	b.n	800e9d0 <prvTimerTask+0x9c>
		xNextExpireTime = ( TickType_t ) 0U;
 800ea18:	2600      	movs	r6, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800ea1a:	6828      	ldr	r0, [r5, #0]
 800ea1c:	1b31      	subs	r1, r6, r4
	xLastTime = xTimeNow;
 800ea1e:	636c      	str	r4, [r5, #52]	; 0x34
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800ea20:	f7ff f814 	bl	800da4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ea24:	f7ff fb1a 	bl	800e05c <xTaskResumeAll>
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	d1a8      	bne.n	800e97e <prvTimerTask+0x4a>
					portYIELD_WITHIN_API();
 800ea2c:	f000 f8b6 	bl	800eb9c <vPortYield>
 800ea30:	e7a5      	b.n	800e97e <prvTimerTask+0x4a>
				( void ) xTaskResumeAll();
 800ea32:	f7ff fb13 	bl	800e05c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea3c:	1d38      	adds	r0, r7, #4
 800ea3e:	f7fe fd3b 	bl	800d4b8 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d003      	beq.n	800ea50 <prvTimerTask+0x11c>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4a:	0038      	movs	r0, r7
 800ea4c:	4798      	blx	r3
 800ea4e:	e796      	b.n	800e97e <prvTimerTask+0x4a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	0022      	movs	r2, r4
 800ea54:	18f1      	adds	r1, r6, r3
 800ea56:	0038      	movs	r0, r7
 800ea58:	0033      	movs	r3, r6
 800ea5a:	f7ff fead 	bl	800e7b8 <prvInsertTimerInActiveList>
 800ea5e:	2801      	cmp	r0, #1
 800ea60:	d1f2      	bne.n	800ea48 <prvTimerTask+0x114>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea62:	4643      	mov	r3, r8
 800ea64:	0032      	movs	r2, r6
 800ea66:	9300      	str	r3, [sp, #0]
 800ea68:	2100      	movs	r1, #0
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	0038      	movs	r0, r7
 800ea6e:	f7ff ff01 	bl	800e874 <xTimerGenericCommand>
 800ea72:	e7e9      	b.n	800ea48 <prvTimerTask+0x114>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800ea74:	9b05      	ldr	r3, [sp, #20]
 800ea76:	0020      	movs	r0, r4
 800ea78:	9302      	str	r3, [sp, #8]
 800ea7a:	9a02      	ldr	r2, [sp, #8]
 800ea7c:	69a3      	ldr	r3, [r4, #24]
 800ea7e:	4694      	mov	ip, r2
 800ea80:	4463      	add	r3, ip
 800ea82:	0019      	movs	r1, r3
 800ea84:	0013      	movs	r3, r2
 800ea86:	0032      	movs	r2, r6
 800ea88:	f7ff fe96 	bl	800e7b8 <prvInsertTimerInActiveList>
 800ea8c:	2801      	cmp	r0, #1
 800ea8e:	d000      	beq.n	800ea92 <prvTimerTask+0x15e>
 800ea90:	e777      	b.n	800e982 <prvTimerTask+0x4e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea94:	0020      	movs	r0, r4
 800ea96:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ea98:	69e3      	ldr	r3, [r4, #28]
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d000      	beq.n	800eaa0 <prvTimerTask+0x16c>
 800ea9e:	e770      	b.n	800e982 <prvTimerTask+0x4e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eaa0:	69a1      	ldr	r1, [r4, #24]
 800eaa2:	9b05      	ldr	r3, [sp, #20]
 800eaa4:	468c      	mov	ip, r1
 800eaa6:	9302      	str	r3, [sp, #8]
 800eaa8:	4463      	add	r3, ip
 800eaaa:	001a      	movs	r2, r3
 800eaac:	465b      	mov	r3, fp
 800eaae:	2100      	movs	r1, #0
 800eab0:	9300      	str	r3, [sp, #0]
 800eab2:	0020      	movs	r0, r4
 800eab4:	2300      	movs	r3, #0
 800eab6:	f7ff fedd 	bl	800e874 <xTimerGenericCommand>
 800eaba:	e762      	b.n	800e982 <prvTimerTask+0x4e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eabc:	9905      	ldr	r1, [sp, #20]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eabe:	0033      	movs	r3, r6
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eac0:	61a1      	str	r1, [r4, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eac2:	0032      	movs	r2, r6
 800eac4:	1989      	adds	r1, r1, r6
 800eac6:	0020      	movs	r0, r4
 800eac8:	f7ff fe76 	bl	800e7b8 <prvInsertTimerInActiveList>
 800eacc:	e759      	b.n	800e982 <prvTimerTask+0x4e>
 800eace:	46c0      	nop			; (mov r8, r8)
 800ead0:	2000281c 	.word	0x2000281c

0800ead4 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800ead4:	b510      	push	{r4, lr}
 800ead6:	0004      	movs	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800ead8:	f000 f86c 	bl	800ebb4 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800eadc:	6964      	ldr	r4, [r4, #20]
 800eade:	1e63      	subs	r3, r4, #1
 800eae0:	419c      	sbcs	r4, r3
	}
	taskEXIT_CRITICAL();
 800eae2:	f000 f873 	bl	800ebcc <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800eae6:	0020      	movs	r0, r4
 800eae8:	bd10      	pop	{r4, pc}
 800eaea:	46c0      	nop			; (mov r8, r8)

0800eaec <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800eaec:	b510      	push	{r4, lr}
 800eaee:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800eaf0:	f000 f860 	bl	800ebb4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800eaf4:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800eaf6:	f000 f869 	bl	800ebcc <vPortExitCritical>

	return pvReturn;
}
 800eafa:	0020      	movs	r0, r4
 800eafc:	bd10      	pop	{r4, pc}
 800eafe:	46c0      	nop			; (mov r8, r8)

0800eb00 <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800eb00:	b672      	cpsid	i
 800eb02:	e7fe      	b.n	800eb02 <prvTaskExitError+0x2>

0800eb04 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800eb04:	4a06      	ldr	r2, [pc, #24]	; (800eb20 <pxCurrentTCBConst2>)
 800eb06:	6813      	ldr	r3, [r2, #0]
 800eb08:	6818      	ldr	r0, [r3, #0]
 800eb0a:	3020      	adds	r0, #32
 800eb0c:	f380 8809 	msr	PSP, r0
 800eb10:	2002      	movs	r0, #2
 800eb12:	f380 8814 	msr	CONTROL, r0
 800eb16:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800eb18:	46ae      	mov	lr, r5
 800eb1a:	b662      	cpsie	i
 800eb1c:	bd00      	pop	{pc}
 800eb1e:	46c0      	nop			; (mov r8, r8)

0800eb20 <pxCurrentTCBConst2>:
 800eb20:	200026f8 	.word	0x200026f8

0800eb24 <pxPortInitialiseStack>:
{
 800eb24:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eb26:	2480      	movs	r4, #128	; 0x80
 800eb28:	1f03      	subs	r3, r0, #4
 800eb2a:	0464      	lsls	r4, r4, #17
 800eb2c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800eb2e:	3b04      	subs	r3, #4
 800eb30:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eb32:	4903      	ldr	r1, [pc, #12]	; (800eb40 <pxPortInitialiseStack+0x1c>)
 800eb34:	3b04      	subs	r3, #4
 800eb36:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eb38:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800eb3a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eb3c:	601a      	str	r2, [r3, #0]
}
 800eb3e:	bd10      	pop	{r4, pc}
 800eb40:	0800eb01 	.word	0x0800eb01

0800eb44 <SVC_Handler>:
 800eb44:	4770      	bx	lr
 800eb46:	46c0      	nop			; (mov r8, r8)

0800eb48 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800eb48:	22ff      	movs	r2, #255	; 0xff
 800eb4a:	4b0f      	ldr	r3, [pc, #60]	; (800eb88 <xPortStartScheduler+0x40>)
 800eb4c:	0412      	lsls	r2, r2, #16
 800eb4e:	6819      	ldr	r1, [r3, #0]
{
 800eb50:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800eb52:	430a      	orrs	r2, r1
 800eb54:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800eb56:	22ff      	movs	r2, #255	; 0xff
 800eb58:	6819      	ldr	r1, [r3, #0]
 800eb5a:	0612      	lsls	r2, r2, #24
 800eb5c:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb5e:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800eb60:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb62:	4b0a      	ldr	r3, [pc, #40]	; (800eb8c <xPortStartScheduler+0x44>)
 800eb64:	0089      	lsls	r1, r1, #2
 800eb66:	6818      	ldr	r0, [r3, #0]
 800eb68:	f7f1 faf2 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800eb6c:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb6e:	4b08      	ldr	r3, [pc, #32]	; (800eb90 <xPortStartScheduler+0x48>)
 800eb70:	3801      	subs	r0, #1
 800eb72:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800eb74:	4b07      	ldr	r3, [pc, #28]	; (800eb94 <xPortStartScheduler+0x4c>)
 800eb76:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800eb78:	2200      	movs	r2, #0
 800eb7a:	4b07      	ldr	r3, [pc, #28]	; (800eb98 <xPortStartScheduler+0x50>)
 800eb7c:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800eb7e:	f7ff ffc1 	bl	800eb04 <vPortStartFirstTask>
	portDISABLE_INTERRUPTS();
 800eb82:	b672      	cpsid	i
 800eb84:	e7fe      	b.n	800eb84 <xPortStartScheduler+0x3c>
 800eb86:	46c0      	nop			; (mov r8, r8)
 800eb88:	e000ed20 	.word	0xe000ed20
 800eb8c:	200000c4 	.word	0x200000c4
 800eb90:	e000e014 	.word	0xe000e014
 800eb94:	e000e010 	.word	0xe000e010
 800eb98:	200000d8 	.word	0x200000d8

0800eb9c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800eb9c:	2280      	movs	r2, #128	; 0x80
 800eb9e:	4b04      	ldr	r3, [pc, #16]	; (800ebb0 <vPortYield+0x14>)
 800eba0:	0552      	lsls	r2, r2, #21
 800eba2:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800eba4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800eba8:	f3bf 8f6f 	isb	sy
}
 800ebac:	4770      	bx	lr
 800ebae:	46c0      	nop			; (mov r8, r8)
 800ebb0:	e000ed04 	.word	0xe000ed04

0800ebb4 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800ebb4:	b672      	cpsid	i
    uxCriticalNesting++;
 800ebb6:	4a04      	ldr	r2, [pc, #16]	; (800ebc8 <vPortEnterCritical+0x14>)
 800ebb8:	6813      	ldr	r3, [r2, #0]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800ebbe:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800ebc2:	f3bf 8f6f 	isb	sy
}
 800ebc6:	4770      	bx	lr
 800ebc8:	200000d8 	.word	0x200000d8

0800ebcc <vPortExitCritical>:
    uxCriticalNesting--;
 800ebcc:	4a03      	ldr	r2, [pc, #12]	; (800ebdc <vPortExitCritical+0x10>)
 800ebce:	6813      	ldr	r3, [r2, #0]
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d100      	bne.n	800ebda <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800ebd8:	b662      	cpsie	i
}
 800ebda:	4770      	bx	lr
 800ebdc:	200000d8 	.word	0x200000d8

0800ebe0 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800ebe0:	f3ef 8010 	mrs	r0, PRIMASK
 800ebe4:	b672      	cpsid	i
 800ebe6:	4770      	bx	lr
}
 800ebe8:	2000      	movs	r0, #0
 800ebea:	46c0      	nop			; (mov r8, r8)

0800ebec <vClearInterruptMaskFromISR>:
	__asm volatile(
 800ebec:	f380 8810 	msr	PRIMASK, r0
 800ebf0:	4770      	bx	lr
 800ebf2:	46c0      	nop			; (mov r8, r8)

0800ebf4 <PendSV_Handler>:
	__asm volatile
 800ebf4:	f3ef 8009 	mrs	r0, PSP
 800ebf8:	4b0e      	ldr	r3, [pc, #56]	; (800ec34 <pxCurrentTCBConst>)
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	3820      	subs	r0, #32
 800ebfe:	6010      	str	r0, [r2, #0]
 800ec00:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ec02:	4644      	mov	r4, r8
 800ec04:	464d      	mov	r5, r9
 800ec06:	4656      	mov	r6, sl
 800ec08:	465f      	mov	r7, fp
 800ec0a:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ec0c:	b508      	push	{r3, lr}
 800ec0e:	b672      	cpsid	i
 800ec10:	f7ff fb42 	bl	800e298 <vTaskSwitchContext>
 800ec14:	b662      	cpsie	i
 800ec16:	bc0c      	pop	{r2, r3}
 800ec18:	6811      	ldr	r1, [r2, #0]
 800ec1a:	6808      	ldr	r0, [r1, #0]
 800ec1c:	3010      	adds	r0, #16
 800ec1e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ec20:	46a0      	mov	r8, r4
 800ec22:	46a9      	mov	r9, r5
 800ec24:	46b2      	mov	sl, r6
 800ec26:	46bb      	mov	fp, r7
 800ec28:	f380 8809 	msr	PSP, r0
 800ec2c:	3820      	subs	r0, #32
 800ec2e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ec30:	4718      	bx	r3
 800ec32:	46c0      	nop			; (mov r8, r8)

0800ec34 <pxCurrentTCBConst>:
 800ec34:	200026f8 	.word	0x200026f8

0800ec38 <xPortSysTickHandler>:
{
 800ec38:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec3a:	f7ff ffd1 	bl	800ebe0 <ulSetInterruptMaskFromISR>
 800ec3e:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800ec40:	f7ff f982 	bl	800df48 <xTaskIncrementTick>
 800ec44:	2800      	cmp	r0, #0
 800ec46:	d003      	beq.n	800ec50 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800ec48:	2280      	movs	r2, #128	; 0x80
 800ec4a:	4b03      	ldr	r3, [pc, #12]	; (800ec58 <xPortSysTickHandler+0x20>)
 800ec4c:	0552      	lsls	r2, r2, #21
 800ec4e:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ec50:	0020      	movs	r0, r4
 800ec52:	f7ff ffcb 	bl	800ebec <vClearInterruptMaskFromISR>
}
 800ec56:	bd10      	pop	{r4, pc}
 800ec58:	e000ed04 	.word	0xe000ed04

0800ec5c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec5c:	b530      	push	{r4, r5, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec5e:	4c11      	ldr	r4, [pc, #68]	; (800eca4 <prvInsertBlockIntoFreeList+0x48>)
 800ec60:	0022      	movs	r2, r4
 800ec62:	e000      	b.n	800ec66 <prvInsertBlockIntoFreeList+0xa>
 800ec64:	001a      	movs	r2, r3
 800ec66:	6813      	ldr	r3, [r2, #0]
 800ec68:	4283      	cmp	r3, r0
 800ec6a:	d3fb      	bcc.n	800ec64 <prvInsertBlockIntoFreeList+0x8>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec6c:	6851      	ldr	r1, [r2, #4]
 800ec6e:	1855      	adds	r5, r2, r1
 800ec70:	42a8      	cmp	r0, r5
 800ec72:	d012      	beq.n	800ec9a <prvInsertBlockIntoFreeList+0x3e>
 800ec74:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec76:	1845      	adds	r5, r0, r1
 800ec78:	42ab      	cmp	r3, r5
 800ec7a:	d004      	beq.n	800ec86 <prvInsertBlockIntoFreeList+0x2a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec7c:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec7e:	4290      	cmp	r0, r2
 800ec80:	d000      	beq.n	800ec84 <prvInsertBlockIntoFreeList+0x28>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec82:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec84:	bd30      	pop	{r4, r5, pc}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec86:	68a4      	ldr	r4, [r4, #8]
 800ec88:	42a3      	cmp	r3, r4
 800ec8a:	d0f7      	beq.n	800ec7c <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec8c:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec8e:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec90:	46a4      	mov	ip, r4
 800ec92:	4461      	add	r1, ip
 800ec94:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec96:	6003      	str	r3, [r0, #0]
 800ec98:	e7f1      	b.n	800ec7e <prvInsertBlockIntoFreeList+0x22>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec9a:	6840      	ldr	r0, [r0, #4]
 800ec9c:	1809      	adds	r1, r1, r0
 800ec9e:	6051      	str	r1, [r2, #4]
 800eca0:	0010      	movs	r0, r2
 800eca2:	e7e8      	b.n	800ec76 <prvInsertBlockIntoFreeList+0x1a>
 800eca4:	20002854 	.word	0x20002854

0800eca8 <pvPortMalloc>:
{
 800eca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecaa:	46c6      	mov	lr, r8
 800ecac:	b500      	push	{lr}
 800ecae:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800ecb0:	f7ff f936 	bl	800df20 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800ecb4:	4d35      	ldr	r5, [pc, #212]	; (800ed8c <pvPortMalloc+0xe4>)
 800ecb6:	68ab      	ldr	r3, [r5, #8]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d03d      	beq.n	800ed38 <pvPortMalloc+0x90>
 800ecbc:	68ee      	ldr	r6, [r5, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ecbe:	4226      	tst	r6, r4
 800ecc0:	d101      	bne.n	800ecc6 <pvPortMalloc+0x1e>
			if( xWantedSize > 0 )
 800ecc2:	2c00      	cmp	r4, #0
 800ecc4:	d108      	bne.n	800ecd8 <pvPortMalloc+0x30>
	( void ) xTaskResumeAll();
 800ecc6:	f7ff f9c9 	bl	800e05c <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800ecca:	f7fd fcf3 	bl	800c6b4 <vApplicationMallocFailedHook>
 800ecce:	2700      	movs	r7, #0
}
 800ecd0:	0038      	movs	r0, r7
 800ecd2:	bc04      	pop	{r2}
 800ecd4:	4690      	mov	r8, r2
 800ecd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xWantedSize += xHeapStructSize;
 800ecd8:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ecda:	2207      	movs	r2, #7
				xWantedSize += xHeapStructSize;
 800ecdc:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ecde:	421a      	tst	r2, r3
 800ece0:	d145      	bne.n	800ed6e <pvPortMalloc+0xc6>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d0ef      	beq.n	800ecc6 <pvPortMalloc+0x1e>
 800ece6:	696a      	ldr	r2, [r5, #20]
 800ece8:	4690      	mov	r8, r2
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d3eb      	bcc.n	800ecc6 <pvPortMalloc+0x1e>
				pxBlock = xStart.pxNextFreeBlock;
 800ecee:	682c      	ldr	r4, [r5, #0]
				pxPreviousBlock = &xStart;
 800ecf0:	0028      	movs	r0, r5
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ecf2:	e004      	b.n	800ecfe <pvPortMalloc+0x56>
 800ecf4:	6822      	ldr	r2, [r4, #0]
 800ecf6:	2a00      	cmp	r2, #0
 800ecf8:	d004      	beq.n	800ed04 <pvPortMalloc+0x5c>
 800ecfa:	0020      	movs	r0, r4
 800ecfc:	0014      	movs	r4, r2
 800ecfe:	6861      	ldr	r1, [r4, #4]
 800ed00:	4299      	cmp	r1, r3
 800ed02:	d3f7      	bcc.n	800ecf4 <pvPortMalloc+0x4c>
				if( pxBlock != pxEnd )
 800ed04:	68aa      	ldr	r2, [r5, #8]
 800ed06:	42a2      	cmp	r2, r4
 800ed08:	d0dd      	beq.n	800ecc6 <pvPortMalloc+0x1e>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed0a:	6807      	ldr	r7, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed0c:	6822      	ldr	r2, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed0e:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed10:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed12:	1aca      	subs	r2, r1, r3
 800ed14:	2a10      	cmp	r2, #16
 800ed16:	d831      	bhi.n	800ed7c <pvPortMalloc+0xd4>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ed18:	4643      	mov	r3, r8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ed1a:	692a      	ldr	r2, [r5, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ed1c:	1a5b      	subs	r3, r3, r1
 800ed1e:	616b      	str	r3, [r5, #20]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d200      	bcs.n	800ed26 <pvPortMalloc+0x7e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ed24:	612b      	str	r3, [r5, #16]
					pxBlock->pxNextFreeBlock = NULL;
 800ed26:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ed28:	4331      	orrs	r1, r6
 800ed2a:	6061      	str	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ed2c:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800ed2e:	f7ff f995 	bl	800e05c <xTaskResumeAll>
		if( pvReturn == NULL )
 800ed32:	2f00      	cmp	r7, #0
 800ed34:	d1cc      	bne.n	800ecd0 <pvPortMalloc+0x28>
 800ed36:	e7c8      	b.n	800ecca <pvPortMalloc+0x22>
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ed38:	2107      	movs	r1, #7
	ulAddress = ( uint32_t ) ucHeap;
 800ed3a:	4b15      	ldr	r3, [pc, #84]	; (800ed90 <pvPortMalloc+0xe8>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ed3c:	4219      	tst	r1, r3
 800ed3e:	d119      	bne.n	800ed74 <pvPortMalloc+0xcc>
 800ed40:	001a      	movs	r2, r3
 800ed42:	0019      	movs	r1, r3
	ulAddress -= xHeapStructSize;
 800ed44:	26fd      	movs	r6, #253	; 0xfd
 800ed46:	01b6      	lsls	r6, r6, #6
 800ed48:	46b4      	mov	ip, r6
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800ed4a:	2607      	movs	r6, #7
	ulAddress -= xHeapStructSize;
 800ed4c:	4463      	add	r3, ip
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800ed4e:	43b3      	bics	r3, r6
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ed50:	2680      	movs	r6, #128	; 0x80
	xStart.xBlockSize = ( size_t ) 0;
 800ed52:	2000      	movs	r0, #0
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800ed54:	1a9a      	subs	r2, r3, r2
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ed56:	0636      	lsls	r6, r6, #24
	xStart.xBlockSize = ( size_t ) 0;
 800ed58:	6068      	str	r0, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ed5a:	6029      	str	r1, [r5, #0]
	pxEnd->xBlockSize = 0;
 800ed5c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ed5e:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) ulAddress;
 800ed60:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800ed62:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ed64:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed66:	612a      	str	r2, [r5, #16]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed68:	616a      	str	r2, [r5, #20]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ed6a:	60ee      	str	r6, [r5, #12]
 800ed6c:	e7a7      	b.n	800ecbe <pvPortMalloc+0x16>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ed6e:	4393      	bics	r3, r2
 800ed70:	3308      	adds	r3, #8
 800ed72:	e7b6      	b.n	800ece2 <pvPortMalloc+0x3a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800ed74:	1dda      	adds	r2, r3, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800ed76:	438a      	bics	r2, r1
 800ed78:	0011      	movs	r1, r2
 800ed7a:	e7e3      	b.n	800ed44 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed7c:	18e0      	adds	r0, r4, r3
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ed7e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ed80:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800ed82:	f7ff ff6b 	bl	800ec5c <prvInsertBlockIntoFreeList>
 800ed86:	6861      	ldr	r1, [r4, #4]
 800ed88:	e7c6      	b.n	800ed18 <pvPortMalloc+0x70>
 800ed8a:	46c0      	nop			; (mov r8, r8)
 800ed8c:	20002854 	.word	0x20002854
 800ed90:	2000286c 	.word	0x2000286c

0800ed94 <vPortFree>:
{
 800ed94:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800ed96:	2800      	cmp	r0, #0
 800ed98:	d009      	beq.n	800edae <vPortFree+0x1a>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ed9a:	4d0d      	ldr	r5, [pc, #52]	; (800edd0 <vPortFree+0x3c>)
 800ed9c:	3808      	subs	r0, #8
 800ed9e:	6843      	ldr	r3, [r0, #4]
 800eda0:	68ea      	ldr	r2, [r5, #12]
 800eda2:	0004      	movs	r4, r0
 800eda4:	421a      	tst	r2, r3
 800eda6:	d002      	beq.n	800edae <vPortFree+0x1a>
			if( pxLink->pxNextFreeBlock == NULL )
 800eda8:	6801      	ldr	r1, [r0, #0]
 800edaa:	2900      	cmp	r1, #0
 800edac:	d000      	beq.n	800edb0 <vPortFree+0x1c>
}
 800edae:	bd70      	pop	{r4, r5, r6, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800edb0:	4393      	bics	r3, r2
 800edb2:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800edb4:	f7ff f8b4 	bl	800df20 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800edb8:	696a      	ldr	r2, [r5, #20]
 800edba:	6863      	ldr	r3, [r4, #4]
 800edbc:	4694      	mov	ip, r2
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800edbe:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800edc0:	4463      	add	r3, ip
 800edc2:	616b      	str	r3, [r5, #20]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800edc4:	f7ff ff4a 	bl	800ec5c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800edc8:	f7ff f948 	bl	800e05c <xTaskResumeAll>
}
 800edcc:	e7ef      	b.n	800edae <vPortFree+0x1a>
 800edce:	46c0      	nop			; (mov r8, r8)
 800edd0:	20002854 	.word	0x20002854

0800edd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800edd4:	b510      	push	{r4, lr}
 800edd6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800edd8:	f002 f904 	bl	8010fe4 <HAL_RCC_GetHCLKFreq>
 800eddc:	21fa      	movs	r1, #250	; 0xfa
 800edde:	0089      	lsls	r1, r1, #2
 800ede0:	f7f1 f9b6 	bl	8000150 <__udivsi3>
 800ede4:	f000 fb9e 	bl	800f524 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800ede8:	2001      	movs	r0, #1
 800edea:	2200      	movs	r2, #0
 800edec:	0021      	movs	r1, r4
 800edee:	4240      	negs	r0, r0
 800edf0:	f000 fb58 	bl	800f4a4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800edf4:	2000      	movs	r0, #0
 800edf6:	bd10      	pop	{r4, pc}

0800edf8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800edf8:	2110      	movs	r1, #16
 800edfa:	4a06      	ldr	r2, [pc, #24]	; (800ee14 <HAL_Init+0x1c>)
{
 800edfc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800edfe:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800ee00:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ee02:	430b      	orrs	r3, r1
 800ee04:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800ee06:	f7ff ffe5 	bl	800edd4 <HAL_InitTick>
  HAL_MspInit();
 800ee0a:	f001 fcdf 	bl	80107cc <HAL_MspInit>
}
 800ee0e:	2000      	movs	r0, #0
 800ee10:	bd10      	pop	{r4, pc}
 800ee12:	46c0      	nop			; (mov r8, r8)
 800ee14:	40022000 	.word	0x40022000

0800ee18 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800ee18:	4a02      	ldr	r2, [pc, #8]	; (800ee24 <HAL_IncTick+0xc>)
 800ee1a:	6813      	ldr	r3, [r2, #0]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	6013      	str	r3, [r2, #0]
}
 800ee20:	4770      	bx	lr
 800ee22:	46c0      	nop			; (mov r8, r8)
 800ee24:	200067b4 	.word	0x200067b4

0800ee28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800ee28:	4b01      	ldr	r3, [pc, #4]	; (800ee30 <HAL_GetTick+0x8>)
 800ee2a:	6818      	ldr	r0, [r3, #0]
}
 800ee2c:	4770      	bx	lr
 800ee2e:	46c0      	nop			; (mov r8, r8)
 800ee30:	200067b4 	.word	0x200067b4

0800ee34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800ee34:	b510      	push	{r4, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800ee3a:	f7ff fff5 	bl	800ee28 <HAL_GetTick>
 800ee3e:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800ee40:	f7ff fff2 	bl	800ee28 <HAL_GetTick>
 800ee44:	9b01      	ldr	r3, [sp, #4]
 800ee46:	1b00      	subs	r0, r0, r4
 800ee48:	4298      	cmp	r0, r3
 800ee4a:	d3f9      	bcc.n	800ee40 <HAL_Delay+0xc>
  {
  }
}
 800ee4c:	b002      	add	sp, #8
 800ee4e:	bd10      	pop	{r4, pc}

0800ee50 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800ee50:	4b01      	ldr	r3, [pc, #4]	; (800ee58 <HAL_GetREVID+0x8>)
 800ee52:	6818      	ldr	r0, [r3, #0]
 800ee54:	0c00      	lsrs	r0, r0, #16
}
 800ee56:	4770      	bx	lr
 800ee58:	40015800 	.word	0x40015800

0800ee5c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800ee5c:	4b02      	ldr	r3, [pc, #8]	; (800ee68 <HAL_GetDEVID+0xc>)
 800ee5e:	6818      	ldr	r0, [r3, #0]
 800ee60:	0500      	lsls	r0, r0, #20
 800ee62:	0d00      	lsrs	r0, r0, #20
}
 800ee64:	4770      	bx	lr
 800ee66:	46c0      	nop			; (mov r8, r8)
 800ee68:	40015800 	.word	0x40015800

0800ee6c <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ee6c:	2303      	movs	r3, #3
 800ee6e:	6802      	ldr	r2, [r0, #0]
{
 800ee70:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ee72:	6891      	ldr	r1, [r2, #8]
{
 800ee74:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ee76:	400b      	ands	r3, r1
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d001      	beq.n	800ee80 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800ee7c:	2000      	movs	r0, #0
}
 800ee7e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ee80:	6811      	ldr	r1, [r2, #0]
 800ee82:	420b      	tst	r3, r1
 800ee84:	d00e      	beq.n	800eea4 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800ee86:	2305      	movs	r3, #5
 800ee88:	6891      	ldr	r1, [r2, #8]
 800ee8a:	400b      	ands	r3, r1
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d00d      	beq.n	800eeac <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ee90:	2210      	movs	r2, #16
 800ee92:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800ee94:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ee96:	4313      	orrs	r3, r2
 800ee98:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ee9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ee9c:	3a0f      	subs	r2, #15
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800eea2:	e7ec      	b.n	800ee7e <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 800eea4:	68d3      	ldr	r3, [r2, #12]
 800eea6:	041b      	lsls	r3, r3, #16
 800eea8:	d4ed      	bmi.n	800ee86 <ADC_Disable+0x1a>
 800eeaa:	e7e7      	b.n	800ee7c <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 800eeac:	2102      	movs	r1, #2
 800eeae:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800eeb0:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 800eeb2:	430b      	orrs	r3, r1
 800eeb4:	6093      	str	r3, [r2, #8]
 800eeb6:	2303      	movs	r3, #3
 800eeb8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800eeba:	f7ff ffb5 	bl	800ee28 <HAL_GetTick>
 800eebe:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800eec0:	e004      	b.n	800eecc <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800eec2:	f7ff ffb1 	bl	800ee28 <HAL_GetTick>
 800eec6:	1b80      	subs	r0, r0, r6
 800eec8:	2802      	cmp	r0, #2
 800eeca:	d804      	bhi.n	800eed6 <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800eecc:	6823      	ldr	r3, [r4, #0]
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	421d      	tst	r5, r3
 800eed2:	d1f6      	bne.n	800eec2 <ADC_Disable+0x56>
 800eed4:	e7d2      	b.n	800ee7c <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eed6:	2210      	movs	r2, #16
 800eed8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800eeda:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eedc:	4313      	orrs	r3, r2
 800eede:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eee0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eee2:	431d      	orrs	r5, r3
 800eee4:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800eee6:	e7ca      	b.n	800ee7e <ADC_Disable+0x12>

0800eee8 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800eee8:	2300      	movs	r3, #0
{
 800eeea:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800eeec:	6802      	ldr	r2, [r0, #0]
{
 800eeee:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800eef0:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800eef2:	6891      	ldr	r1, [r2, #8]
 800eef4:	3303      	adds	r3, #3
{
 800eef6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800eef8:	400b      	ands	r3, r1
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d031      	beq.n	800ef62 <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800eefe:	6891      	ldr	r1, [r2, #8]
 800ef00:	4b20      	ldr	r3, [pc, #128]	; (800ef84 <ADC_Enable+0x9c>)
 800ef02:	4219      	tst	r1, r3
 800ef04:	d122      	bne.n	800ef4c <ADC_Enable+0x64>
    __HAL_ADC_ENABLE(hadc);
 800ef06:	2101      	movs	r1, #1
 800ef08:	6893      	ldr	r3, [r2, #8]
 800ef0a:	430b      	orrs	r3, r1
 800ef0c:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800ef0e:	4b1e      	ldr	r3, [pc, #120]	; (800ef88 <ADC_Enable+0xa0>)
 800ef10:	491e      	ldr	r1, [pc, #120]	; (800ef8c <ADC_Enable+0xa4>)
 800ef12:	6818      	ldr	r0, [r3, #0]
 800ef14:	f7f1 f91c 	bl	8000150 <__udivsi3>
 800ef18:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800ef1a:	9b01      	ldr	r3, [sp, #4]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d005      	beq.n	800ef2c <ADC_Enable+0x44>
      wait_loop_index--;
 800ef20:	9b01      	ldr	r3, [sp, #4]
 800ef22:	3b01      	subs	r3, #1
 800ef24:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800ef26:	9b01      	ldr	r3, [sp, #4]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d1f9      	bne.n	800ef20 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800ef2c:	f7ff ff7c 	bl	800ee28 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ef30:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800ef32:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ef34:	e004      	b.n	800ef40 <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ef36:	f7ff ff77 	bl	800ee28 <HAL_GetTick>
 800ef3a:	1b80      	subs	r0, r0, r6
 800ef3c:	2802      	cmp	r0, #2
 800ef3e:	d818      	bhi.n	800ef72 <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ef40:	6823      	ldr	r3, [r4, #0]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	421d      	tst	r5, r3
 800ef46:	d0f6      	beq.n	800ef36 <ADC_Enable+0x4e>
  return HAL_OK;
 800ef48:	2000      	movs	r0, #0
 800ef4a:	e008      	b.n	800ef5e <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ef4c:	2210      	movs	r2, #16
      return HAL_ERROR;
 800ef4e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ef50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef52:	4313      	orrs	r3, r2
 800ef54:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ef56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef58:	3a0f      	subs	r2, #15
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	64a3      	str	r3, [r4, #72]	; 0x48
}
 800ef5e:	b002      	add	sp, #8
 800ef60:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ef62:	6811      	ldr	r1, [r2, #0]
 800ef64:	420b      	tst	r3, r1
 800ef66:	d1ef      	bne.n	800ef48 <ADC_Enable+0x60>
 800ef68:	68d3      	ldr	r3, [r2, #12]
 800ef6a:	041b      	lsls	r3, r3, #16
 800ef6c:	d5c7      	bpl.n	800eefe <ADC_Enable+0x16>
  return HAL_OK;
 800ef6e:	2000      	movs	r0, #0
 800ef70:	e7f5      	b.n	800ef5e <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ef72:	2210      	movs	r2, #16
 800ef74:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800ef76:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ef7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef7e:	431d      	orrs	r5, r3
 800ef80:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800ef82:	e7ec      	b.n	800ef5e <ADC_Enable+0x76>
 800ef84:	80000017 	.word	0x80000017
 800ef88:	200000c4 	.word	0x200000c4
 800ef8c:	000f4240 	.word	0x000f4240

0800ef90 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800ef90:	2204      	movs	r2, #4
 800ef92:	6803      	ldr	r3, [r0, #0]
{
 800ef94:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800ef96:	6899      	ldr	r1, [r3, #8]
{
 800ef98:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800ef9a:	420a      	tst	r2, r1
 800ef9c:	d010      	beq.n	800efc0 <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800ef9e:	6899      	ldr	r1, [r3, #8]
 800efa0:	420a      	tst	r2, r1
 800efa2:	d10f      	bne.n	800efc4 <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800efa4:	f7ff ff40 	bl	800ee28 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800efa8:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800efaa:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800efac:	e004      	b.n	800efb8 <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800efae:	f7ff ff3b 	bl	800ee28 <HAL_GetTick>
 800efb2:	1b80      	subs	r0, r0, r6
 800efb4:	2802      	cmp	r0, #2
 800efb6:	d80d      	bhi.n	800efd4 <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800efb8:	6823      	ldr	r3, [r4, #0]
 800efba:	689b      	ldr	r3, [r3, #8]
 800efbc:	421d      	tst	r5, r3
 800efbe:	d1f6      	bne.n	800efae <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800efc0:	2000      	movs	r0, #0
}
 800efc2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800efc4:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800efc6:	0792      	lsls	r2, r2, #30
 800efc8:	d4ec      	bmi.n	800efa4 <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800efca:	2110      	movs	r1, #16
 800efcc:	689a      	ldr	r2, [r3, #8]
 800efce:	430a      	orrs	r2, r1
 800efd0:	609a      	str	r2, [r3, #8]
 800efd2:	e7e7      	b.n	800efa4 <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800efd4:	2210      	movs	r2, #16
 800efd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800efd8:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800efda:	4313      	orrs	r3, r2
 800efdc:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800efde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800efe0:	3a0f      	subs	r2, #15
 800efe2:	4313      	orrs	r3, r2
 800efe4:	64a3      	str	r3, [r4, #72]	; 0x48
 800efe6:	e7ec      	b.n	800efc2 <ADC_ConversionStop+0x32>

0800efe8 <HAL_ADC_Init>:
{
 800efe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efea:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800efec:	d100      	bne.n	800eff0 <HAL_ADC_Init+0x8>
 800efee:	e075      	b.n	800f0dc <HAL_ADC_Init+0xf4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800eff0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d068      	beq.n	800f0c8 <HAL_ADC_Init+0xe0>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800eff6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eff8:	06db      	lsls	r3, r3, #27
 800effa:	d505      	bpl.n	800f008 <HAL_ADC_Init+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800effc:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800effe:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f000:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f002:	4313      	orrs	r3, r2
 800f004:	6463      	str	r3, [r4, #68]	; 0x44
}
 800f006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800f008:	2004      	movs	r0, #4
 800f00a:	6823      	ldr	r3, [r4, #0]
 800f00c:	689a      	ldr	r2, [r3, #8]
 800f00e:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800f010:	d1f4      	bne.n	800effc <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800f012:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f014:	4942      	ldr	r1, [pc, #264]	; (800f120 <HAL_ADC_Init+0x138>)
 800f016:	400a      	ands	r2, r1
 800f018:	3106      	adds	r1, #6
 800f01a:	31ff      	adds	r1, #255	; 0xff
 800f01c:	430a      	orrs	r2, r1
 800f01e:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f020:	2203      	movs	r2, #3
 800f022:	6899      	ldr	r1, [r3, #8]
 800f024:	400a      	ands	r2, r1
 800f026:	2a01      	cmp	r2, #1
 800f028:	d073      	beq.n	800f112 <HAL_ADC_Init+0x12a>
      MODIFY_REG(hadc->Instance->CFGR1,
 800f02a:	2118      	movs	r1, #24
 800f02c:	68da      	ldr	r2, [r3, #12]
 800f02e:	438a      	bics	r2, r1
 800f030:	68a1      	ldr	r1, [r4, #8]
 800f032:	430a      	orrs	r2, r1
 800f034:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800f036:	691a      	ldr	r2, [r3, #16]
 800f038:	6861      	ldr	r1, [r4, #4]
 800f03a:	0092      	lsls	r2, r2, #2
 800f03c:	0892      	lsrs	r2, r2, #2
 800f03e:	430a      	orrs	r2, r1
 800f040:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f042:	68da      	ldr	r2, [r3, #12]
 800f044:	4937      	ldr	r1, [pc, #220]	; (800f124 <HAL_ADC_Init+0x13c>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f046:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f048:	400a      	ands	r2, r1
 800f04a:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f04c:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f04e:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f050:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800f052:	69e2      	ldr	r2, [r4, #28]
 800f054:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f056:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800f058:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f05a:	3a01      	subs	r2, #1
 800f05c:	1e55      	subs	r5, r2, #1
 800f05e:	41aa      	sbcs	r2, r5
 800f060:	0315      	lsls	r5, r2, #12
 800f062:	68e2      	ldr	r2, [r4, #12]
 800f064:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f066:	6922      	ldr	r2, [r4, #16]
 800f068:	4339      	orrs	r1, r7
 800f06a:	2a02      	cmp	r2, #2
 800f06c:	d100      	bne.n	800f070 <HAL_ADC_Init+0x88>
 800f06e:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800f070:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f072:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f074:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f076:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f078:	432a      	orrs	r2, r5
 800f07a:	4302      	orrs	r2, r0
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f07c:	2901      	cmp	r1, #1
 800f07e:	d042      	beq.n	800f106 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f080:	20c2      	movs	r0, #194	; 0xc2
 800f082:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f084:	30ff      	adds	r0, #255	; 0xff
 800f086:	4281      	cmp	r1, r0
 800f088:	d002      	beq.n	800f090 <HAL_ADC_Init+0xa8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800f08a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f08c:	4301      	orrs	r1, r0
 800f08e:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f090:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f092:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f094:	4311      	orrs	r1, r2
 800f096:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f098:	2180      	movs	r1, #128	; 0x80
 800f09a:	0549      	lsls	r1, r1, #21
 800f09c:	428d      	cmp	r5, r1
 800f09e:	d01f      	beq.n	800f0e0 <HAL_ADC_Init+0xf8>
 800f0a0:	1e69      	subs	r1, r5, #1
 800f0a2:	2906      	cmp	r1, #6
 800f0a4:	d91c      	bls.n	800f0e0 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	491f      	ldr	r1, [pc, #124]	; (800f128 <HAL_ADC_Init+0x140>)
 800f0aa:	400b      	ands	r3, r1
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d020      	beq.n	800f0f2 <HAL_ADC_Init+0x10a>
      ADC_STATE_CLR_SET(hadc->State,
 800f0b0:	2212      	movs	r2, #18
 800f0b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800f0b4:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800f0b6:	4393      	bics	r3, r2
 800f0b8:	3a02      	subs	r2, #2
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f0be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f0c0:	3a0f      	subs	r2, #15
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	64a3      	str	r3, [r4, #72]	; 0x48
 800f0c6:	e79e      	b.n	800f006 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800f0c8:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800f0ca:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800f0cc:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800f0ce:	f7fc fba3 	bl	800b818 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f0d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f0d4:	06db      	lsls	r3, r3, #27
 800f0d6:	d500      	bpl.n	800f0da <HAL_ADC_Init+0xf2>
 800f0d8:	e790      	b.n	800effc <HAL_ADC_Init+0x14>
 800f0da:	e795      	b.n	800f008 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 800f0dc:	2001      	movs	r0, #1
 800f0de:	e792      	b.n	800f006 <HAL_ADC_Init+0x1e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f0e0:	2107      	movs	r1, #7
 800f0e2:	6958      	ldr	r0, [r3, #20]
 800f0e4:	4388      	bics	r0, r1
 800f0e6:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800f0e8:	6958      	ldr	r0, [r3, #20]
 800f0ea:	4029      	ands	r1, r5
 800f0ec:	4301      	orrs	r1, r0
 800f0ee:	6159      	str	r1, [r3, #20]
 800f0f0:	e7d9      	b.n	800f0a6 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 800f0f2:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f0f4:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800f0f6:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800f0f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f0fa:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f0fc:	4393      	bics	r3, r2
 800f0fe:	3a02      	subs	r2, #2
 800f100:	4313      	orrs	r3, r2
 800f102:	6463      	str	r3, [r4, #68]	; 0x44
 800f104:	e77f      	b.n	800f006 <HAL_ADC_Init+0x1e>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f106:	2e00      	cmp	r6, #0
 800f108:	d1ba      	bne.n	800f080 <HAL_ADC_Init+0x98>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800f10a:	2180      	movs	r1, #128	; 0x80
 800f10c:	0249      	lsls	r1, r1, #9
 800f10e:	430a      	orrs	r2, r1
 800f110:	e7b6      	b.n	800f080 <HAL_ADC_Init+0x98>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f112:	6819      	ldr	r1, [r3, #0]
 800f114:	420a      	tst	r2, r1
 800f116:	d194      	bne.n	800f042 <HAL_ADC_Init+0x5a>
 800f118:	68da      	ldr	r2, [r3, #12]
 800f11a:	0412      	lsls	r2, r2, #16
 800f11c:	d491      	bmi.n	800f042 <HAL_ADC_Init+0x5a>
 800f11e:	e784      	b.n	800f02a <HAL_ADC_Init+0x42>
 800f120:	fffffefd 	.word	0xfffffefd
 800f124:	fffe0219 	.word	0xfffe0219
 800f128:	833fffe7 	.word	0x833fffe7

0800f12c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f12c:	6803      	ldr	r3, [r0, #0]
{
 800f12e:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f130:	689a      	ldr	r2, [r3, #8]
{
 800f132:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f134:	0752      	lsls	r2, r2, #29
 800f136:	d421      	bmi.n	800f17c <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800f138:	2240      	movs	r2, #64	; 0x40
 800f13a:	5c81      	ldrb	r1, [r0, r2]
 800f13c:	2901      	cmp	r1, #1
 800f13e:	d01d      	beq.n	800f17c <HAL_ADC_Start+0x50>
 800f140:	2101      	movs	r1, #1
 800f142:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f144:	69c2      	ldr	r2, [r0, #28]
 800f146:	2a01      	cmp	r2, #1
 800f148:	d112      	bne.n	800f170 <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800f14a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f14c:	490c      	ldr	r1, [pc, #48]	; (800f180 <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f14e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f150:	4011      	ands	r1, r2
 800f152:	2280      	movs	r2, #128	; 0x80
 800f154:	0052      	lsls	r2, r2, #1
 800f156:	430a      	orrs	r2, r1
 800f158:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f15a:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800f15c:	2200      	movs	r2, #0
 800f15e:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800f160:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f162:	321c      	adds	r2, #28
 800f164:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f166:	689a      	ldr	r2, [r3, #8]
 800f168:	393c      	subs	r1, #60	; 0x3c
 800f16a:	430a      	orrs	r2, r1
 800f16c:	609a      	str	r2, [r3, #8]
}
 800f16e:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800f170:	f7ff feba 	bl	800eee8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800f174:	2800      	cmp	r0, #0
 800f176:	d1fa      	bne.n	800f16e <HAL_ADC_Start+0x42>
 800f178:	6823      	ldr	r3, [r4, #0]
 800f17a:	e7e6      	b.n	800f14a <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 800f17c:	2002      	movs	r0, #2
 800f17e:	e7f6      	b.n	800f16e <HAL_ADC_Start+0x42>
 800f180:	fffff0fe 	.word	0xfffff0fe

0800f184 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800f184:	2340      	movs	r3, #64	; 0x40
{ 
 800f186:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800f188:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800f18a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f18c:	2a01      	cmp	r2, #1
 800f18e:	d014      	beq.n	800f1ba <HAL_ADC_Stop+0x36>
 800f190:	2501      	movs	r5, #1
 800f192:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800f194:	f7ff fefc 	bl	800ef90 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800f198:	2800      	cmp	r0, #0
 800f19a:	d003      	beq.n	800f1a4 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800f19c:	2340      	movs	r3, #64	; 0x40
 800f19e:	2200      	movs	r2, #0
 800f1a0:	54e2      	strb	r2, [r4, r3]
}
 800f1a2:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800f1a4:	0020      	movs	r0, r4
 800f1a6:	f7ff fe61 	bl	800ee6c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	d1f6      	bne.n	800f19c <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800f1ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f1b0:	4a03      	ldr	r2, [pc, #12]	; (800f1c0 <HAL_ADC_Stop+0x3c>)
 800f1b2:	4013      	ands	r3, r2
 800f1b4:	431d      	orrs	r5, r3
 800f1b6:	6465      	str	r5, [r4, #68]	; 0x44
 800f1b8:	e7f0      	b.n	800f19c <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800f1ba:	2002      	movs	r0, #2
 800f1bc:	e7f1      	b.n	800f1a2 <HAL_ADC_Stop+0x1e>
 800f1be:	46c0      	nop			; (mov r8, r8)
 800f1c0:	fffffefe 	.word	0xfffffefe

0800f1c4 <HAL_ADC_PollForConversion>:
{
 800f1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f1c6:	6943      	ldr	r3, [r0, #20]
{
 800f1c8:	0006      	movs	r6, r0
 800f1ca:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f1cc:	2b08      	cmp	r3, #8
 800f1ce:	d04c      	beq.n	800f26a <HAL_ADC_PollForConversion+0xa6>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f1d0:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f1d2:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f1d4:	68db      	ldr	r3, [r3, #12]
 800f1d6:	07db      	lsls	r3, r3, #31
 800f1d8:	d43e      	bmi.n	800f258 <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 800f1da:	f7ff fe25 	bl	800ee28 <HAL_GetTick>
 800f1de:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f1e0:	6832      	ldr	r2, [r6, #0]
 800f1e2:	e001      	b.n	800f1e8 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 800f1e4:	1c63      	adds	r3, r4, #1
 800f1e6:	d127      	bne.n	800f238 <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f1e8:	6813      	ldr	r3, [r2, #0]
 800f1ea:	421d      	tst	r5, r3
 800f1ec:	d0fa      	beq.n	800f1e4 <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f1ee:	2380      	movs	r3, #128	; 0x80
 800f1f0:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	430b      	orrs	r3, r1
 800f1f6:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800f1f8:	23c0      	movs	r3, #192	; 0xc0
 800f1fa:	68d1      	ldr	r1, [r2, #12]
 800f1fc:	011b      	lsls	r3, r3, #4
 800f1fe:	4219      	tst	r1, r3
 800f200:	d113      	bne.n	800f22a <HAL_ADC_PollForConversion+0x66>
 800f202:	6a33      	ldr	r3, [r6, #32]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d110      	bne.n	800f22a <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800f208:	6813      	ldr	r3, [r2, #0]
 800f20a:	071b      	lsls	r3, r3, #28
 800f20c:	d50d      	bpl.n	800f22a <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f20e:	6893      	ldr	r3, [r2, #8]
 800f210:	075b      	lsls	r3, r3, #29
 800f212:	d42f      	bmi.n	800f274 <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f214:	210c      	movs	r1, #12
 800f216:	6853      	ldr	r3, [r2, #4]
 800f218:	438b      	bics	r3, r1
 800f21a:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800f21c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f21e:	491a      	ldr	r1, [pc, #104]	; (800f288 <HAL_ADC_PollForConversion+0xc4>)
 800f220:	400b      	ands	r3, r1
 800f222:	3104      	adds	r1, #4
 800f224:	31ff      	adds	r1, #255	; 0xff
 800f226:	430b      	orrs	r3, r1
 800f228:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f22a:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 800f22c:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d101      	bne.n	800f236 <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f232:	330c      	adds	r3, #12
 800f234:	6013      	str	r3, [r2, #0]
}
 800f236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800f238:	2c00      	cmp	r4, #0
 800f23a:	d004      	beq.n	800f246 <HAL_ADC_PollForConversion+0x82>
 800f23c:	f7ff fdf4 	bl	800ee28 <HAL_GetTick>
 800f240:	1bc0      	subs	r0, r0, r7
 800f242:	42a0      	cmp	r0, r4
 800f244:	d9cc      	bls.n	800f1e0 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f246:	2204      	movs	r2, #4
 800f248:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 800f24a:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f24c:	4313      	orrs	r3, r2
 800f24e:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800f250:	2200      	movs	r2, #0
 800f252:	2340      	movs	r3, #64	; 0x40
 800f254:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800f256:	e7ee      	b.n	800f236 <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f258:	2220      	movs	r2, #32
 800f25a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f25c:	4313      	orrs	r3, r2
 800f25e:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f260:	2200      	movs	r2, #0
 800f262:	2340      	movs	r3, #64	; 0x40
 800f264:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800f266:	2001      	movs	r0, #1
 800f268:	e7e5      	b.n	800f236 <HAL_ADC_PollForConversion+0x72>
  tickstart = HAL_GetTick();
 800f26a:	f7ff fddd 	bl	800ee28 <HAL_GetTick>
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f26e:	2508      	movs	r5, #8
  tickstart = HAL_GetTick();
 800f270:	0007      	movs	r7, r0
 800f272:	e7b5      	b.n	800f1e0 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f274:	2120      	movs	r1, #32
 800f276:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f278:	430b      	orrs	r3, r1
 800f27a:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f27c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800f27e:	391f      	subs	r1, #31
 800f280:	430b      	orrs	r3, r1
 800f282:	64b3      	str	r3, [r6, #72]	; 0x48
 800f284:	e7d1      	b.n	800f22a <HAL_ADC_PollForConversion+0x66>
 800f286:	46c0      	nop			; (mov r8, r8)
 800f288:	fffffefe 	.word	0xfffffefe

0800f28c <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800f28c:	2208      	movs	r2, #8
 800f28e:	6803      	ldr	r3, [r0, #0]
 800f290:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800f292:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800f294:	4770      	bx	lr
 800f296:	46c0      	nop			; (mov r8, r8)

0800f298 <HAL_ADC_ConvCpltCallback>:
 800f298:	4770      	bx	lr
 800f29a:	46c0      	nop			; (mov r8, r8)

0800f29c <HAL_ADC_LevelOutOfWindowCallback>:
 800f29c:	4770      	bx	lr
 800f29e:	46c0      	nop			; (mov r8, r8)

0800f2a0 <HAL_ADC_ErrorCallback>:
 800f2a0:	4770      	bx	lr
 800f2a2:	46c0      	nop			; (mov r8, r8)

0800f2a4 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800f2a4:	2204      	movs	r2, #4
 800f2a6:	6803      	ldr	r3, [r0, #0]
{
 800f2a8:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800f2aa:	6819      	ldr	r1, [r3, #0]
{
 800f2ac:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800f2ae:	420a      	tst	r2, r1
 800f2b0:	d04a      	beq.n	800f348 <HAL_ADC_IRQHandler+0xa4>
 800f2b2:	6859      	ldr	r1, [r3, #4]
 800f2b4:	420a      	tst	r2, r1
 800f2b6:	d047      	beq.n	800f348 <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f2b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f2ba:	06d2      	lsls	r2, r2, #27
 800f2bc:	d404      	bmi.n	800f2c8 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800f2be:	2280      	movs	r2, #128	; 0x80
 800f2c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f2c2:	0092      	lsls	r2, r2, #2
 800f2c4:	430a      	orrs	r2, r1
 800f2c6:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800f2c8:	22c0      	movs	r2, #192	; 0xc0
 800f2ca:	68d9      	ldr	r1, [r3, #12]
 800f2cc:	0112      	lsls	r2, r2, #4
 800f2ce:	4211      	tst	r1, r2
 800f2d0:	d113      	bne.n	800f2fa <HAL_ADC_IRQHandler+0x56>
 800f2d2:	6a22      	ldr	r2, [r4, #32]
 800f2d4:	2a00      	cmp	r2, #0
 800f2d6:	d110      	bne.n	800f2fa <HAL_ADC_IRQHandler+0x56>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	0712      	lsls	r2, r2, #28
 800f2dc:	d50d      	bpl.n	800f2fa <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f2de:	689a      	ldr	r2, [r3, #8]
 800f2e0:	0752      	lsls	r2, r2, #29
 800f2e2:	d444      	bmi.n	800f36e <HAL_ADC_IRQHandler+0xca>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f2e4:	210c      	movs	r1, #12
 800f2e6:	685a      	ldr	r2, [r3, #4]
 800f2e8:	438a      	bics	r2, r1
 800f2ea:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800f2ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f2ee:	4a24      	ldr	r2, [pc, #144]	; (800f380 <HAL_ADC_IRQHandler+0xdc>)
 800f2f0:	4013      	ands	r3, r2
 800f2f2:	3204      	adds	r2, #4
 800f2f4:	32ff      	adds	r2, #255	; 0xff
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 800f2fa:	0020      	movs	r0, r4
 800f2fc:	f7ff ffcc 	bl	800f298 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800f300:	220c      	movs	r2, #12
 800f302:	6823      	ldr	r3, [r4, #0]
 800f304:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800f306:	2580      	movs	r5, #128	; 0x80
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	4215      	tst	r5, r2
 800f30c:	d002      	beq.n	800f314 <HAL_ADC_IRQHandler+0x70>
 800f30e:	685a      	ldr	r2, [r3, #4]
 800f310:	4215      	tst	r5, r2
 800f312:	d121      	bne.n	800f358 <HAL_ADC_IRQHandler+0xb4>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800f314:	2210      	movs	r2, #16
 800f316:	6819      	ldr	r1, [r3, #0]
 800f318:	420a      	tst	r2, r1
 800f31a:	d014      	beq.n	800f346 <HAL_ADC_IRQHandler+0xa2>
 800f31c:	6859      	ldr	r1, [r3, #4]
 800f31e:	420a      	tst	r2, r1
 800f320:	d011      	beq.n	800f346 <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800f322:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f324:	2a01      	cmp	r2, #1
 800f326:	d002      	beq.n	800f32e <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800f328:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800f32a:	07d2      	lsls	r2, r2, #31
 800f32c:	d509      	bpl.n	800f342 <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800f32e:	2102      	movs	r1, #2
 800f330:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 800f332:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800f334:	430a      	orrs	r2, r1
 800f336:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800f338:	2210      	movs	r2, #16
 800f33a:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800f33c:	f7ff ffb0 	bl	800f2a0 <HAL_ADC_ErrorCallback>
 800f340:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800f342:	2210      	movs	r2, #16
 800f344:	601a      	str	r2, [r3, #0]
}
 800f346:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800f348:	2208      	movs	r2, #8
 800f34a:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800f34c:	420a      	tst	r2, r1
 800f34e:	d0da      	beq.n	800f306 <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800f350:	6859      	ldr	r1, [r3, #4]
 800f352:	420a      	tst	r2, r1
 800f354:	d0d7      	beq.n	800f306 <HAL_ADC_IRQHandler+0x62>
 800f356:	e7af      	b.n	800f2b8 <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800f358:	2380      	movs	r3, #128	; 0x80
 800f35a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f35c:	025b      	lsls	r3, r3, #9
 800f35e:	4313      	orrs	r3, r2
 800f360:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800f362:	0020      	movs	r0, r4
 800f364:	f7ff ff9a 	bl	800f29c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800f368:	6823      	ldr	r3, [r4, #0]
 800f36a:	601d      	str	r5, [r3, #0]
 800f36c:	e7d2      	b.n	800f314 <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f36e:	2220      	movs	r2, #32
 800f370:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f372:	4313      	orrs	r3, r2
 800f374:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f376:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f378:	3a1f      	subs	r2, #31
 800f37a:	4313      	orrs	r3, r2
 800f37c:	64a3      	str	r3, [r4, #72]	; 0x48
 800f37e:	e7bc      	b.n	800f2fa <HAL_ADC_IRQHandler+0x56>
 800f380:	fffffefe 	.word	0xfffffefe

0800f384 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800f384:	2300      	movs	r3, #0
{
 800f386:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f388:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800f38a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800f38c:	3340      	adds	r3, #64	; 0x40
 800f38e:	5cc2      	ldrb	r2, [r0, r3]
{
 800f390:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f392:	2a01      	cmp	r2, #1
 800f394:	d044      	beq.n	800f420 <HAL_ADC_ConfigChannel+0x9c>
 800f396:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f398:	6826      	ldr	r6, [r4, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f39a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 800f39c:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f39e:	68b3      	ldr	r3, [r6, #8]
 800f3a0:	075b      	lsls	r3, r3, #29
 800f3a2:	d509      	bpl.n	800f3b8 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f3a4:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800f3a6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f3a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800f3ae:	2340      	movs	r3, #64	; 0x40
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	54e2      	strb	r2, [r4, r3]
}
 800f3b4:	b003      	add	sp, #12
 800f3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3b8:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 800f3ba:	4d33      	ldr	r5, [pc, #204]	; (800f488 <HAL_ADC_ConfigChannel+0x104>)
 800f3bc:	001f      	movs	r7, r3
 800f3be:	46ac      	mov	ip, r5
 800f3c0:	684d      	ldr	r5, [r1, #4]
 800f3c2:	409a      	lsls	r2, r3
 800f3c4:	3f10      	subs	r7, #16
 800f3c6:	4565      	cmp	r5, ip
 800f3c8:	d02c      	beq.n	800f424 <HAL_ADC_ConfigChannel+0xa0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800f3ca:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 800f3cc:	432a      	orrs	r2, r5
 800f3ce:	62b2      	str	r2, [r6, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f3d0:	2280      	movs	r2, #128	; 0x80
 800f3d2:	0552      	lsls	r2, r2, #21
 800f3d4:	4290      	cmp	r0, r2
 800f3d6:	d00f      	beq.n	800f3f8 <HAL_ADC_ConfigChannel+0x74>
 800f3d8:	3801      	subs	r0, #1
 800f3da:	2806      	cmp	r0, #6
 800f3dc:	d90c      	bls.n	800f3f8 <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800f3de:	2207      	movs	r2, #7
 800f3e0:	6888      	ldr	r0, [r1, #8]
 800f3e2:	6971      	ldr	r1, [r6, #20]
 800f3e4:	4011      	ands	r1, r2
 800f3e6:	4288      	cmp	r0, r1
 800f3e8:	d006      	beq.n	800f3f8 <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f3ea:	6971      	ldr	r1, [r6, #20]
 800f3ec:	4391      	bics	r1, r2
 800f3ee:	6171      	str	r1, [r6, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800f3f0:	6971      	ldr	r1, [r6, #20]
 800f3f2:	4002      	ands	r2, r0
 800f3f4:	430a      	orrs	r2, r1
 800f3f6:	6172      	str	r2, [r6, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800f3f8:	2f02      	cmp	r7, #2
 800f3fa:	d80f      	bhi.n	800f41c <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f3fc:	4923      	ldr	r1, [pc, #140]	; (800f48c <HAL_ADC_ConfigChannel+0x108>)
 800f3fe:	680a      	ldr	r2, [r1, #0]
 800f400:	2b10      	cmp	r3, #16
 800f402:	d029      	beq.n	800f458 <HAL_ADC_ConfigChannel+0xd4>
 800f404:	3b11      	subs	r3, #17
 800f406:	4258      	negs	r0, r3
 800f408:	4143      	adcs	r3, r0
 800f40a:	4821      	ldr	r0, [pc, #132]	; (800f490 <HAL_ADC_ConfigChannel+0x10c>)
 800f40c:	425b      	negs	r3, r3
 800f40e:	4003      	ands	r3, r0
 800f410:	2080      	movs	r0, #128	; 0x80
 800f412:	0440      	lsls	r0, r0, #17
 800f414:	4684      	mov	ip, r0
 800f416:	4463      	add	r3, ip
 800f418:	4313      	orrs	r3, r2
 800f41a:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f41c:	2000      	movs	r0, #0
 800f41e:	e7c6      	b.n	800f3ae <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800f420:	2002      	movs	r0, #2
 800f422:	e7c7      	b.n	800f3b4 <HAL_ADC_ConfigChannel+0x30>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800f424:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800f426:	4391      	bics	r1, r2
 800f428:	62b1      	str	r1, [r6, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800f42a:	2f02      	cmp	r7, #2
 800f42c:	d8f6      	bhi.n	800f41c <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f42e:	4a17      	ldr	r2, [pc, #92]	; (800f48c <HAL_ADC_ConfigChannel+0x108>)
 800f430:	6811      	ldr	r1, [r2, #0]
 800f432:	2b10      	cmp	r3, #16
 800f434:	d00e      	beq.n	800f454 <HAL_ADC_ConfigChannel+0xd0>
 800f436:	3b11      	subs	r3, #17
 800f438:	001a      	movs	r2, r3
 800f43a:	1e53      	subs	r3, r2, #1
 800f43c:	419a      	sbcs	r2, r3
 800f43e:	4b14      	ldr	r3, [pc, #80]	; (800f490 <HAL_ADC_ConfigChannel+0x10c>)
 800f440:	4252      	negs	r2, r2
 800f442:	4013      	ands	r3, r2
 800f444:	4a13      	ldr	r2, [pc, #76]	; (800f494 <HAL_ADC_ConfigChannel+0x110>)
 800f446:	4694      	mov	ip, r2
 800f448:	4463      	add	r3, ip
 800f44a:	4a10      	ldr	r2, [pc, #64]	; (800f48c <HAL_ADC_ConfigChannel+0x108>)
 800f44c:	400b      	ands	r3, r1
 800f44e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f450:	2000      	movs	r0, #0
 800f452:	e7ac      	b.n	800f3ae <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f454:	4b10      	ldr	r3, [pc, #64]	; (800f498 <HAL_ADC_ConfigChannel+0x114>)
 800f456:	e7f8      	b.n	800f44a <HAL_ADC_ConfigChannel+0xc6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f458:	2380      	movs	r3, #128	; 0x80
 800f45a:	041b      	lsls	r3, r3, #16
 800f45c:	431a      	orrs	r2, r3
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800f45e:	4b0f      	ldr	r3, [pc, #60]	; (800f49c <HAL_ADC_ConfigChannel+0x118>)
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f460:	600a      	str	r2, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800f462:	6818      	ldr	r0, [r3, #0]
 800f464:	490e      	ldr	r1, [pc, #56]	; (800f4a0 <HAL_ADC_ConfigChannel+0x11c>)
 800f466:	f7f0 fe73 	bl	8000150 <__udivsi3>
 800f46a:	0083      	lsls	r3, r0, #2
 800f46c:	1818      	adds	r0, r3, r0
 800f46e:	0040      	lsls	r0, r0, #1
 800f470:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 800f472:	9b01      	ldr	r3, [sp, #4]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d0d1      	beq.n	800f41c <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 800f478:	9b01      	ldr	r3, [sp, #4]
 800f47a:	3b01      	subs	r3, #1
 800f47c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800f47e:	9b01      	ldr	r3, [sp, #4]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d1f9      	bne.n	800f478 <HAL_ADC_ConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f484:	2000      	movs	r0, #0
 800f486:	e792      	b.n	800f3ae <HAL_ADC_ConfigChannel+0x2a>
 800f488:	00001001 	.word	0x00001001
 800f48c:	40012708 	.word	0x40012708
 800f490:	ff400000 	.word	0xff400000
 800f494:	ffbfffff 	.word	0xffbfffff
 800f498:	ff7fffff 	.word	0xff7fffff
 800f49c:	200000c4 	.word	0x200000c4
 800f4a0:	000f4240 	.word	0x000f4240

0800f4a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f4a4:	22ff      	movs	r2, #255	; 0xff
 800f4a6:	2303      	movs	r3, #3
 800f4a8:	b530      	push	{r4, r5, lr}
 800f4aa:	0014      	movs	r4, r2
 800f4ac:	b2c5      	uxtb	r5, r0
 800f4ae:	402b      	ands	r3, r5
 800f4b0:	00db      	lsls	r3, r3, #3
 800f4b2:	409c      	lsls	r4, r3
 800f4b4:	0189      	lsls	r1, r1, #6
 800f4b6:	400a      	ands	r2, r1
 800f4b8:	43e4      	mvns	r4, r4
 800f4ba:	409a      	lsls	r2, r3
  if((int32_t)(IRQn) < 0) {
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	db0b      	blt.n	800f4d8 <HAL_NVIC_SetPriority+0x34>
 800f4c0:	4b0c      	ldr	r3, [pc, #48]	; (800f4f4 <HAL_NVIC_SetPriority+0x50>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f4c2:	0880      	lsrs	r0, r0, #2
 800f4c4:	469c      	mov	ip, r3
 800f4c6:	23c0      	movs	r3, #192	; 0xc0
 800f4c8:	0080      	lsls	r0, r0, #2
 800f4ca:	4460      	add	r0, ip
 800f4cc:	009b      	lsls	r3, r3, #2
 800f4ce:	58c1      	ldr	r1, [r0, r3]
 800f4d0:	400c      	ands	r4, r1
 800f4d2:	4322      	orrs	r2, r4
 800f4d4:	50c2      	str	r2, [r0, r3]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800f4d6:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f4d8:	230f      	movs	r3, #15
 800f4da:	4907      	ldr	r1, [pc, #28]	; (800f4f8 <HAL_NVIC_SetPriority+0x54>)
 800f4dc:	402b      	ands	r3, r5
 800f4de:	468c      	mov	ip, r1
 800f4e0:	3b08      	subs	r3, #8
 800f4e2:	089b      	lsrs	r3, r3, #2
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	4463      	add	r3, ip
 800f4e8:	69d9      	ldr	r1, [r3, #28]
 800f4ea:	400c      	ands	r4, r1
 800f4ec:	4322      	orrs	r2, r4
 800f4ee:	61da      	str	r2, [r3, #28]
 800f4f0:	e7f1      	b.n	800f4d6 <HAL_NVIC_SetPriority+0x32>
 800f4f2:	46c0      	nop			; (mov r8, r8)
 800f4f4:	e000e100 	.word	0xe000e100
 800f4f8:	e000ed00 	.word	0xe000ed00

0800f4fc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f4fc:	231f      	movs	r3, #31
 800f4fe:	4018      	ands	r0, r3
 800f500:	3b1e      	subs	r3, #30
 800f502:	4083      	lsls	r3, r0
 800f504:	4a01      	ldr	r2, [pc, #4]	; (800f50c <HAL_NVIC_EnableIRQ+0x10>)
 800f506:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f508:	4770      	bx	lr
 800f50a:	46c0      	nop			; (mov r8, r8)
 800f50c:	e000e100 	.word	0xe000e100

0800f510 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f510:	231f      	movs	r3, #31
 800f512:	4018      	ands	r0, r3
 800f514:	3b1e      	subs	r3, #30
 800f516:	4083      	lsls	r3, r0
 800f518:	2280      	movs	r2, #128	; 0x80
 800f51a:	4901      	ldr	r1, [pc, #4]	; (800f520 <HAL_NVIC_DisableIRQ+0x10>)
 800f51c:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800f51e:	4770      	bx	lr
 800f520:	e000e100 	.word	0xe000e100

0800f524 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800f524:	4a0a      	ldr	r2, [pc, #40]	; (800f550 <HAL_SYSTICK_Config+0x2c>)
 800f526:	1e43      	subs	r3, r0, #1
 800f528:	2001      	movs	r0, #1
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d80e      	bhi.n	800f54c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f52e:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f530:	4a08      	ldr	r2, [pc, #32]	; (800f554 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f532:	4809      	ldr	r0, [pc, #36]	; (800f558 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f534:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f536:	6a03      	ldr	r3, [r0, #32]
 800f538:	0609      	lsls	r1, r1, #24
 800f53a:	021b      	lsls	r3, r3, #8
 800f53c:	0a1b      	lsrs	r3, r3, #8
 800f53e:	430b      	orrs	r3, r1
 800f540:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f542:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f544:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f546:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f548:	3307      	adds	r3, #7
 800f54a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800f54c:	4770      	bx	lr
 800f54e:	46c0      	nop			; (mov r8, r8)
 800f550:	00ffffff 	.word	0x00ffffff
 800f554:	e000e010 	.word	0xe000e010
 800f558:	e000ed00 	.word	0xe000ed00

0800f55c <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800f55c:	4a05      	ldr	r2, [pc, #20]	; (800f574 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 800f55e:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800f560:	2804      	cmp	r0, #4
 800f562:	d003      	beq.n	800f56c <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800f564:	2104      	movs	r1, #4
 800f566:	438b      	bics	r3, r1
 800f568:	6013      	str	r3, [r2, #0]
  }
}
 800f56a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800f56c:	4318      	orrs	r0, r3
 800f56e:	6010      	str	r0, [r2, #0]
 800f570:	e7fb      	b.n	800f56a <HAL_SYSTICK_CLKSourceConfig+0xe>
 800f572:	46c0      	nop			; (mov r8, r8)
 800f574:	e000e010 	.word	0xe000e010

0800f578 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800f578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f57a:	468c      	mov	ip, r1
 800f57c:	6806      	ldr	r6, [r0, #0]
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800f57e:	0891      	lsrs	r1, r2, #2
 800f580:	d010      	beq.n	800f5a4 <CRC_Handle_8+0x2c>
 800f582:	4664      	mov	r4, ip
 800f584:	008f      	lsls	r7, r1, #2
 800f586:	4467      	add	r7, ip
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800f588:	7823      	ldrb	r3, [r4, #0]
 800f58a:	7865      	ldrb	r5, [r4, #1]
 800f58c:	061b      	lsls	r3, r3, #24
 800f58e:	042d      	lsls	r5, r5, #16
 800f590:	432b      	orrs	r3, r5
 800f592:	78e5      	ldrb	r5, [r4, #3]
 800f594:	432b      	orrs	r3, r5
 800f596:	78a5      	ldrb	r5, [r4, #2]
 800f598:	3404      	adds	r4, #4
 800f59a:	022d      	lsls	r5, r5, #8
 800f59c:	432b      	orrs	r3, r5
 800f59e:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800f5a0:	42a7      	cmp	r7, r4
 800f5a2:	d1f1      	bne.n	800f588 <CRC_Handle_8+0x10>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800f5a4:	2303      	movs	r3, #3
 800f5a6:	401a      	ands	r2, r3
 800f5a8:	d00b      	beq.n	800f5c2 <CRC_Handle_8+0x4a>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800f5aa:	0089      	lsls	r1, r1, #2
 800f5ac:	4663      	mov	r3, ip
     if  (BufferLength%4 == 1)
 800f5ae:	2a01      	cmp	r2, #1
 800f5b0:	d013      	beq.n	800f5da <CRC_Handle_8+0x62>
     }
     if  (BufferLength%4 == 2)
 800f5b2:	2a02      	cmp	r2, #2
 800f5b4:	d107      	bne.n	800f5c6 <CRC_Handle_8+0x4e>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800f5b6:	5c5a      	ldrb	r2, [r3, r1]
 800f5b8:	4461      	add	r1, ip
 800f5ba:	784b      	ldrb	r3, [r1, #1]
 800f5bc:	0212      	lsls	r2, r2, #8
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800f5c2:	6830      	ldr	r0, [r6, #0]
}
 800f5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800f5c6:	5c5a      	ldrb	r2, [r3, r1]
 800f5c8:	4461      	add	r1, ip
 800f5ca:	784b      	ldrb	r3, [r1, #1]
 800f5cc:	0212      	lsls	r2, r2, #8
 800f5ce:	4313      	orrs	r3, r2
 800f5d0:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800f5d2:	788b      	ldrb	r3, [r1, #2]
 800f5d4:	7033      	strb	r3, [r6, #0]
 800f5d6:	6806      	ldr	r6, [r0, #0]
 800f5d8:	e7f3      	b.n	800f5c2 <CRC_Handle_8+0x4a>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800f5da:	5ccb      	ldrb	r3, [r1, r3]
 800f5dc:	7033      	strb	r3, [r6, #0]
 800f5de:	6806      	ldr	r6, [r0, #0]
 800f5e0:	e7ef      	b.n	800f5c2 <CRC_Handle_8+0x4a>
 800f5e2:	46c0      	nop			; (mov r8, r8)

0800f5e4 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800f5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800f5e6:	0857      	lsrs	r7, r2, #1
 800f5e8:	6805      	ldr	r5, [r0, #0]
 800f5ea:	d00a      	beq.n	800f602 <CRC_Handle_16+0x1e>
 800f5ec:	0008      	movs	r0, r1
 800f5ee:	00be      	lsls	r6, r7, #2
 800f5f0:	1876      	adds	r6, r6, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800f5f2:	8803      	ldrh	r3, [r0, #0]
 800f5f4:	8844      	ldrh	r4, [r0, #2]
 800f5f6:	041b      	lsls	r3, r3, #16
 800f5f8:	4323      	orrs	r3, r4
 800f5fa:	3004      	adds	r0, #4
 800f5fc:	602b      	str	r3, [r5, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800f5fe:	4286      	cmp	r6, r0
 800f600:	d1f7      	bne.n	800f5f2 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800f602:	07d3      	lsls	r3, r2, #31
 800f604:	d502      	bpl.n	800f60c <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800f606:	00bf      	lsls	r7, r7, #2
 800f608:	5a7b      	ldrh	r3, [r7, r1]
 800f60a:	802b      	strh	r3, [r5, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800f60c:	6828      	ldr	r0, [r5, #0]
}
 800f60e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f610 <HAL_CRC_Init>:
{
 800f610:	b510      	push	{r4, lr}
 800f612:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800f614:	d01f      	beq.n	800f656 <HAL_CRC_Init+0x46>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800f616:	7f43      	ldrb	r3, [r0, #29]
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d01d      	beq.n	800f65a <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f61e:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f620:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f622:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f624:	f000 f8ae 	bl	800f784 <HAL_CRCEx_Init>
 800f628:	2800      	cmp	r0, #0
 800f62a:	d114      	bne.n	800f656 <HAL_CRC_Init+0x46>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800f62c:	7963      	ldrb	r3, [r4, #5]
 800f62e:	6822      	ldr	r2, [r4, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d01d      	beq.n	800f670 <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800f634:	6923      	ldr	r3, [r4, #16]
 800f636:	6113      	str	r3, [r2, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800f638:	2160      	movs	r1, #96	; 0x60
 800f63a:	6893      	ldr	r3, [r2, #8]
 800f63c:	438b      	bics	r3, r1
 800f63e:	6961      	ldr	r1, [r4, #20]
 800f640:	430b      	orrs	r3, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800f642:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800f644:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800f646:	6893      	ldr	r3, [r2, #8]
 800f648:	438b      	bics	r3, r1
 800f64a:	69a1      	ldr	r1, [r4, #24]
 800f64c:	430b      	orrs	r3, r1
 800f64e:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800f650:	2301      	movs	r3, #1
 800f652:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800f654:	e000      	b.n	800f658 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800f656:	2001      	movs	r0, #1
}
 800f658:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800f65a:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800f65c:	f7fb fa28 	bl	800aab0 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f660:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f662:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f664:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f666:	f000 f88d 	bl	800f784 <HAL_CRCEx_Init>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d0de      	beq.n	800f62c <HAL_CRC_Init+0x1c>
 800f66e:	e7f2      	b.n	800f656 <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800f670:	3b01      	subs	r3, #1
 800f672:	6113      	str	r3, [r2, #16]
 800f674:	e7e0      	b.n	800f638 <HAL_CRC_Init+0x28>
 800f676:	46c0      	nop			; (mov r8, r8)

0800f678 <HAL_CRC_Accumulate>:
{
 800f678:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 800f67a:	7f03      	ldrb	r3, [r0, #28]
{
 800f67c:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d021      	beq.n	800f6c6 <HAL_CRC_Accumulate+0x4e>
 800f682:	2301      	movs	r3, #1
 800f684:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f686:	3301      	adds	r3, #1
 800f688:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800f68a:	6a03      	ldr	r3, [r0, #32]
 800f68c:	2b02      	cmp	r3, #2
 800f68e:	d017      	beq.n	800f6c0 <HAL_CRC_Accumulate+0x48>
 800f690:	2b03      	cmp	r3, #3
 800f692:	d00a      	beq.n	800f6aa <HAL_CRC_Accumulate+0x32>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800f694:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800f696:	2b01      	cmp	r3, #1
 800f698:	d102      	bne.n	800f6a0 <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800f69a:	0020      	movs	r0, r4
 800f69c:	f7ff ff6c 	bl	800f578 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY; 
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	7723      	strb	r3, [r4, #28]
}
 800f6a8:	bd10      	pop	{r4, pc}
 800f6aa:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800f6ac:	2a00      	cmp	r2, #0
 800f6ae:	d005      	beq.n	800f6bc <HAL_CRC_Accumulate+0x44>
 800f6b0:	0092      	lsls	r2, r2, #2
 800f6b2:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800f6b4:	c908      	ldmia	r1!, {r3}
 800f6b6:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800f6b8:	428a      	cmp	r2, r1
 800f6ba:	d1fb      	bne.n	800f6b4 <HAL_CRC_Accumulate+0x3c>
      temp = hcrc->Instance->DR;
 800f6bc:	6800      	ldr	r0, [r0, #0]
      break;
 800f6be:	e7ef      	b.n	800f6a0 <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800f6c0:	f7ff ff90 	bl	800f5e4 <CRC_Handle_16>
      break;
 800f6c4:	e7ec      	b.n	800f6a0 <HAL_CRC_Accumulate+0x28>
  __HAL_LOCK(hcrc); 
 800f6c6:	2002      	movs	r0, #2
 800f6c8:	e7ee      	b.n	800f6a8 <HAL_CRC_Accumulate+0x30>
 800f6ca:	46c0      	nop			; (mov r8, r8)

0800f6cc <HAL_CRC_Calculate>:
{
 800f6cc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 800f6ce:	7f03      	ldrb	r3, [r0, #28]
{
 800f6d0:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	d026      	beq.n	800f724 <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f6d6:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 800f6d8:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f6da:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800f6dc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 800f6de:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 800f6e0:	6898      	ldr	r0, [r3, #8]
 800f6e2:	4328      	orrs	r0, r5
 800f6e4:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 800f6e6:	6a20      	ldr	r0, [r4, #32]
 800f6e8:	2802      	cmp	r0, #2
 800f6ea:	d017      	beq.n	800f71c <HAL_CRC_Calculate+0x50>
 800f6ec:	2803      	cmp	r0, #3
 800f6ee:	d007      	beq.n	800f700 <HAL_CRC_Calculate+0x34>
 800f6f0:	2801      	cmp	r0, #1
 800f6f2:	d00f      	beq.n	800f714 <HAL_CRC_Calculate+0x48>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800f6f4:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	7723      	strb	r3, [r4, #28]
}
 800f6fe:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800f700:	2a00      	cmp	r2, #0
 800f702:	d005      	beq.n	800f710 <HAL_CRC_Calculate+0x44>
 800f704:	0092      	lsls	r2, r2, #2
 800f706:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800f708:	c901      	ldmia	r1!, {r0}
 800f70a:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 800f70c:	4291      	cmp	r1, r2
 800f70e:	d1fb      	bne.n	800f708 <HAL_CRC_Calculate+0x3c>
      temp = hcrc->Instance->DR;
 800f710:	6818      	ldr	r0, [r3, #0]
      break;
 800f712:	e7f0      	b.n	800f6f6 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800f714:	0020      	movs	r0, r4
 800f716:	f7ff ff2f 	bl	800f578 <CRC_Handle_8>
      break;
 800f71a:	e7ec      	b.n	800f6f6 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800f71c:	0020      	movs	r0, r4
 800f71e:	f7ff ff61 	bl	800f5e4 <CRC_Handle_16>
      break;
 800f722:	e7e8      	b.n	800f6f6 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800f724:	2002      	movs	r0, #2
 800f726:	e7ea      	b.n	800f6fe <HAL_CRC_Calculate+0x32>

0800f728 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800f728:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800f72a:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800f72c:	2501      	movs	r5, #1
 800f72e:	e001      	b.n	800f734 <HAL_CRCEx_Polynomial_Set+0xc>
 800f730:	3b01      	subs	r3, #1
 800f732:	d312      	bcc.n	800f75a <HAL_CRCEx_Polynomial_Set+0x32>
 800f734:	002c      	movs	r4, r5
 800f736:	409c      	lsls	r4, r3
 800f738:	4221      	tst	r1, r4
 800f73a:	d0f9      	beq.n	800f730 <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 800f73c:	2a10      	cmp	r2, #16
 800f73e:	d01c      	beq.n	800f77a <HAL_CRCEx_Polynomial_Set+0x52>
 800f740:	2a18      	cmp	r2, #24
 800f742:	d012      	beq.n	800f76a <HAL_CRCEx_Polynomial_Set+0x42>
 800f744:	2a08      	cmp	r2, #8
 800f746:	d014      	beq.n	800f772 <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800f748:	6800      	ldr	r0, [r0, #0]
 800f74a:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800f74c:	2118      	movs	r1, #24
 800f74e:	6883      	ldr	r3, [r0, #8]
 800f750:	438b      	bics	r3, r1
 800f752:	431a      	orrs	r2, r3
 800f754:	6082      	str	r2, [r0, #8]
 800f756:	2000      	movs	r0, #0
  
  /* Return function status */
  return HAL_OK;
}
 800f758:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 800f75a:	2a10      	cmp	r2, #16
 800f75c:	d003      	beq.n	800f766 <HAL_CRCEx_Polynomial_Set+0x3e>
 800f75e:	2a18      	cmp	r2, #24
 800f760:	d001      	beq.n	800f766 <HAL_CRCEx_Polynomial_Set+0x3e>
 800f762:	2a08      	cmp	r2, #8
 800f764:	d1f0      	bne.n	800f748 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f766:	2001      	movs	r0, #1
 800f768:	e7f6      	b.n	800f758 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 800f76a:	2b06      	cmp	r3, #6
 800f76c:	d9ec      	bls.n	800f748 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f76e:	2001      	movs	r0, #1
 800f770:	e7f2      	b.n	800f758 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 800f772:	2b0f      	cmp	r3, #15
 800f774:	d9e8      	bls.n	800f748 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f776:	2001      	movs	r0, #1
 800f778:	e7ee      	b.n	800f758 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 800f77a:	2b07      	cmp	r3, #7
 800f77c:	d9e4      	bls.n	800f748 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f77e:	2001      	movs	r0, #1
 800f780:	e7ea      	b.n	800f758 <HAL_CRCEx_Polynomial_Set+0x30>
 800f782:	46c0      	nop			; (mov r8, r8)

0800f784 <HAL_CRCEx_Init>:
{
 800f784:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800f786:	7903      	ldrb	r3, [r0, #4]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d108      	bne.n	800f79e <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800f78c:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800f78e:	6803      	ldr	r3, [r0, #0]
   return HAL_OK;
 800f790:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800f792:	4a07      	ldr	r2, [pc, #28]	; (800f7b0 <HAL_CRCEx_Init+0x2c>)
 800f794:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800f796:	689a      	ldr	r2, [r3, #8]
 800f798:	438a      	bics	r2, r1
 800f79a:	609a      	str	r2, [r3, #8]
}
 800f79c:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800f79e:	68c2      	ldr	r2, [r0, #12]
 800f7a0:	6881      	ldr	r1, [r0, #8]
 800f7a2:	f7ff ffc1 	bl	800f728 <HAL_CRCEx_Polynomial_Set>
 800f7a6:	1e43      	subs	r3, r0, #1
 800f7a8:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800f7aa:	b2c0      	uxtb	r0, r0
 800f7ac:	e7f6      	b.n	800f79c <HAL_CRCEx_Init+0x18>
 800f7ae:	46c0      	nop			; (mov r8, r8)
 800f7b0:	04c11db7 	.word	0x04c11db7

0800f7b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800f7b4:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d023      	beq.n	800f802 <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800f7ba:	2321      	movs	r3, #33	; 0x21
 800f7bc:	5cc3      	ldrb	r3, [r0, r3]
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d01b      	beq.n	800f7fc <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f7c4:	2121      	movs	r1, #33	; 0x21
 800f7c6:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f7c8:	6804      	ldr	r4, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800f7ca:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 800f7cc:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f7ce:	4a0e      	ldr	r2, [pc, #56]	; (800f808 <HAL_DMA_Init+0x54>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f7d0:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f7d2:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800f7d4:	6843      	ldr	r3, [r0, #4]
 800f7d6:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f7d8:	68c5      	ldr	r5, [r0, #12]
 800f7da:	432b      	orrs	r3, r5
 800f7dc:	6905      	ldr	r5, [r0, #16]
 800f7de:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f7e0:	6945      	ldr	r5, [r0, #20]
 800f7e2:	432b      	orrs	r3, r5
 800f7e4:	6985      	ldr	r5, [r0, #24]
 800f7e6:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800f7e8:	69c5      	ldr	r5, [r0, #28]
 800f7ea:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800f7ec:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800f7ee:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800f7f8:	2000      	movs	r0, #0
}  
 800f7fa:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 800f7fc:	2220      	movs	r2, #32
 800f7fe:	5483      	strb	r3, [r0, r2]
 800f800:	e7e0      	b.n	800f7c4 <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 800f802:	2001      	movs	r0, #1
 800f804:	e7f9      	b.n	800f7fa <HAL_DMA_Init+0x46>
 800f806:	46c0      	nop			; (mov r8, r8)
 800f808:	ffffc00f 	.word	0xffffc00f

0800f80c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f80c:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800f80e:	2420      	movs	r4, #32
 800f810:	5d05      	ldrb	r5, [r0, r4]
 800f812:	2d01      	cmp	r5, #1
 800f814:	d023      	beq.n	800f85e <HAL_DMA_Start_IT+0x52>
 800f816:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800f818:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 800f81a:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 800f81c:	3401      	adds	r4, #1
 800f81e:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f820:	6804      	ldr	r4, [r0, #0]
 800f822:	6825      	ldr	r5, [r4, #0]
 800f824:	43b5      	bics	r5, r6
 800f826:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f828:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f82a:	6843      	ldr	r3, [r0, #4]
 800f82c:	2b10      	cmp	r3, #16
 800f82e:	d013      	beq.n	800f858 <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800f830:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800f832:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800f834:	2202      	movs	r2, #2
  return HAL_OK;    
 800f836:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800f838:	6823      	ldr	r3, [r4, #0]
 800f83a:	4313      	orrs	r3, r2
 800f83c:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	3202      	adds	r2, #2
 800f842:	4313      	orrs	r3, r2
 800f844:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800f846:	6823      	ldr	r3, [r4, #0]
 800f848:	3204      	adds	r2, #4
 800f84a:	4313      	orrs	r3, r2
 800f84c:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 800f84e:	6823      	ldr	r3, [r4, #0]
 800f850:	3a07      	subs	r2, #7
 800f852:	4313      	orrs	r3, r2
 800f854:	6023      	str	r3, [r4, #0]
} 
 800f856:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800f858:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800f85a:	60e1      	str	r1, [r4, #12]
 800f85c:	e7ea      	b.n	800f834 <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 800f85e:	2002      	movs	r0, #2
 800f860:	e7f9      	b.n	800f856 <HAL_DMA_Start_IT+0x4a>
 800f862:	46c0      	nop			; (mov r8, r8)

0800f864 <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 800f864:	2101      	movs	r1, #1
 800f866:	6802      	ldr	r2, [r0, #0]
{
 800f868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 800f86a:	6813      	ldr	r3, [r2, #0]
{
 800f86c:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800f86e:	438b      	bics	r3, r1
 800f870:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800f872:	f7ff fad9 	bl	800ee28 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f876:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 800f878:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f87a:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f87c:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f87e:	e004      	b.n	800f88a <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f880:	f7ff fad2 	bl	800ee28 <HAL_GetTick>
 800f884:	1bc0      	subs	r0, r0, r7
 800f886:	42b0      	cmp	r0, r6
 800f888:	d809      	bhi.n	800f89e <HAL_DMA_Abort+0x3a>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f88a:	6823      	ldr	r3, [r4, #0]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	402b      	ands	r3, r5
 800f890:	d1f6      	bne.n	800f880 <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 800f892:	2221      	movs	r2, #33	; 0x21
  return HAL_OK; 
 800f894:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 800f896:	54a5      	strb	r5, [r4, r2]
  __HAL_UNLOCK(hdma);
 800f898:	3a01      	subs	r2, #1
 800f89a:	54a3      	strb	r3, [r4, r2]
}
 800f89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800f89e:	2220      	movs	r2, #32
 800f8a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f8a2:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800f8a4:	4313      	orrs	r3, r2
 800f8a6:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f8a8:	2321      	movs	r3, #33	; 0x21
 800f8aa:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 800f8ac:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800f8ae:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 800f8b0:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 800f8b2:	e7f3      	b.n	800f89c <HAL_DMA_Abort+0x38>

0800f8b4 <HAL_DMA_IRQHandler>:
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f8b4:	6803      	ldr	r3, [r0, #0]
 800f8b6:	4aa2      	ldr	r2, [pc, #648]	; (800fb40 <HAL_DMA_IRQHandler+0x28c>)
{        
 800f8b8:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f8ba:	0019      	movs	r1, r3
{        
 800f8bc:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d937      	bls.n	800f932 <HAL_DMA_IRQHandler+0x7e>
 800f8c2:	48a0      	ldr	r0, [pc, #640]	; (800fb44 <HAL_DMA_IRQHandler+0x290>)
 800f8c4:	4da0      	ldr	r5, [pc, #640]	; (800fb48 <HAL_DMA_IRQHandler+0x294>)
 800f8c6:	6806      	ldr	r6, [r0, #0]
 800f8c8:	42ab      	cmp	r3, r5
 800f8ca:	d100      	bne.n	800f8ce <HAL_DMA_IRQHandler+0x1a>
 800f8cc:	e0ed      	b.n	800faaa <HAL_DMA_IRQHandler+0x1f6>
 800f8ce:	4d9f      	ldr	r5, [pc, #636]	; (800fb4c <HAL_DMA_IRQHandler+0x298>)
 800f8d0:	42ab      	cmp	r3, r5
 800f8d2:	d100      	bne.n	800f8d6 <HAL_DMA_IRQHandler+0x22>
 800f8d4:	e334      	b.n	800ff40 <HAL_DMA_IRQHandler+0x68c>
 800f8d6:	4d9e      	ldr	r5, [pc, #632]	; (800fb50 <HAL_DMA_IRQHandler+0x29c>)
 800f8d8:	42ab      	cmp	r3, r5
 800f8da:	d100      	bne.n	800f8de <HAL_DMA_IRQHandler+0x2a>
 800f8dc:	e129      	b.n	800fb32 <HAL_DMA_IRQHandler+0x27e>
 800f8de:	4d9d      	ldr	r5, [pc, #628]	; (800fb54 <HAL_DMA_IRQHandler+0x2a0>)
 800f8e0:	42ab      	cmp	r3, r5
 800f8e2:	d100      	bne.n	800f8e6 <HAL_DMA_IRQHandler+0x32>
 800f8e4:	e34b      	b.n	800ff7e <HAL_DMA_IRQHandler+0x6ca>
 800f8e6:	4d9c      	ldr	r5, [pc, #624]	; (800fb58 <HAL_DMA_IRQHandler+0x2a4>)
 800f8e8:	42ab      	cmp	r3, r5
 800f8ea:	d100      	bne.n	800f8ee <HAL_DMA_IRQHandler+0x3a>
 800f8ec:	e38b      	b.n	8010006 <HAL_DMA_IRQHandler+0x752>
 800f8ee:	4d9b      	ldr	r5, [pc, #620]	; (800fb5c <HAL_DMA_IRQHandler+0x2a8>)
 800f8f0:	42ab      	cmp	r3, r5
 800f8f2:	d100      	bne.n	800f8f6 <HAL_DMA_IRQHandler+0x42>
 800f8f4:	e3cf      	b.n	8010096 <HAL_DMA_IRQHandler+0x7e2>
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d100      	bne.n	800f8fc <HAL_DMA_IRQHandler+0x48>
 800f8fa:	e35e      	b.n	800ffba <HAL_DMA_IRQHandler+0x706>
 800f8fc:	4a98      	ldr	r2, [pc, #608]	; (800fb60 <HAL_DMA_IRQHandler+0x2ac>)
 800f8fe:	4293      	cmp	r3, r2
 800f900:	d101      	bne.n	800f906 <HAL_DMA_IRQHandler+0x52>
 800f902:	f000 fbe8 	bl	80100d6 <HAL_DMA_IRQHandler+0x822>
 800f906:	4a97      	ldr	r2, [pc, #604]	; (800fb64 <HAL_DMA_IRQHandler+0x2b0>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d101      	bne.n	800f910 <HAL_DMA_IRQHandler+0x5c>
 800f90c:	f000 fc04 	bl	8010118 <HAL_DMA_IRQHandler+0x864>
 800f910:	4a95      	ldr	r2, [pc, #596]	; (800fb68 <HAL_DMA_IRQHandler+0x2b4>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d101      	bne.n	800f91a <HAL_DMA_IRQHandler+0x66>
 800f916:	f000 fc21 	bl	801015c <HAL_DMA_IRQHandler+0x8a8>
 800f91a:	4a94      	ldr	r2, [pc, #592]	; (800fb6c <HAL_DMA_IRQHandler+0x2b8>)
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d101      	bne.n	800f924 <HAL_DMA_IRQHandler+0x70>
 800f920:	f000 fc37 	bl	8010192 <HAL_DMA_IRQHandler+0x8de>
 800f924:	0332      	lsls	r2, r6, #12
 800f926:	d43c      	bmi.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f928:	4a86      	ldr	r2, [pc, #536]	; (800fb44 <HAL_DMA_IRQHandler+0x290>)
 800f92a:	6810      	ldr	r0, [r2, #0]
 800f92c:	2280      	movs	r2, #128	; 0x80
 800f92e:	02d2      	lsls	r2, r2, #11
 800f930:	e0c0      	b.n	800fab4 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f932:	488f      	ldr	r0, [pc, #572]	; (800fb70 <HAL_DMA_IRQHandler+0x2bc>)
 800f934:	4d84      	ldr	r5, [pc, #528]	; (800fb48 <HAL_DMA_IRQHandler+0x294>)
 800f936:	6806      	ldr	r6, [r0, #0]
 800f938:	42ab      	cmp	r3, r5
 800f93a:	d02e      	beq.n	800f99a <HAL_DMA_IRQHandler+0xe6>
 800f93c:	4d83      	ldr	r5, [pc, #524]	; (800fb4c <HAL_DMA_IRQHandler+0x298>)
 800f93e:	42ab      	cmp	r3, r5
 800f940:	d100      	bne.n	800f944 <HAL_DMA_IRQHandler+0x90>
 800f942:	e2f6      	b.n	800ff32 <HAL_DMA_IRQHandler+0x67e>
 800f944:	4d82      	ldr	r5, [pc, #520]	; (800fb50 <HAL_DMA_IRQHandler+0x29c>)
 800f946:	42ab      	cmp	r3, r5
 800f948:	d100      	bne.n	800f94c <HAL_DMA_IRQHandler+0x98>
 800f94a:	e0ea      	b.n	800fb22 <HAL_DMA_IRQHandler+0x26e>
 800f94c:	4d81      	ldr	r5, [pc, #516]	; (800fb54 <HAL_DMA_IRQHandler+0x2a0>)
 800f94e:	42ab      	cmp	r3, r5
 800f950:	d100      	bne.n	800f954 <HAL_DMA_IRQHandler+0xa0>
 800f952:	e30c      	b.n	800ff6e <HAL_DMA_IRQHandler+0x6ba>
 800f954:	4d80      	ldr	r5, [pc, #512]	; (800fb58 <HAL_DMA_IRQHandler+0x2a4>)
 800f956:	42ab      	cmp	r3, r5
 800f958:	d100      	bne.n	800f95c <HAL_DMA_IRQHandler+0xa8>
 800f95a:	e35b      	b.n	8010014 <HAL_DMA_IRQHandler+0x760>
 800f95c:	4d7f      	ldr	r5, [pc, #508]	; (800fb5c <HAL_DMA_IRQHandler+0x2a8>)
 800f95e:	42ab      	cmp	r3, r5
 800f960:	d100      	bne.n	800f964 <HAL_DMA_IRQHandler+0xb0>
 800f962:	e390      	b.n	8010086 <HAL_DMA_IRQHandler+0x7d2>
 800f964:	4293      	cmp	r3, r2
 800f966:	d100      	bne.n	800f96a <HAL_DMA_IRQHandler+0xb6>
 800f968:	e31f      	b.n	800ffaa <HAL_DMA_IRQHandler+0x6f6>
 800f96a:	4a7d      	ldr	r2, [pc, #500]	; (800fb60 <HAL_DMA_IRQHandler+0x2ac>)
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d100      	bne.n	800f972 <HAL_DMA_IRQHandler+0xbe>
 800f970:	e3aa      	b.n	80100c8 <HAL_DMA_IRQHandler+0x814>
 800f972:	4a7c      	ldr	r2, [pc, #496]	; (800fb64 <HAL_DMA_IRQHandler+0x2b0>)
 800f974:	4293      	cmp	r3, r2
 800f976:	d100      	bne.n	800f97a <HAL_DMA_IRQHandler+0xc6>
 800f978:	e3c7      	b.n	801010a <HAL_DMA_IRQHandler+0x856>
 800f97a:	4a7b      	ldr	r2, [pc, #492]	; (800fb68 <HAL_DMA_IRQHandler+0x2b4>)
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d101      	bne.n	800f984 <HAL_DMA_IRQHandler+0xd0>
 800f980:	f000 fbe4 	bl	801014c <HAL_DMA_IRQHandler+0x898>
 800f984:	4a79      	ldr	r2, [pc, #484]	; (800fb6c <HAL_DMA_IRQHandler+0x2b8>)
 800f986:	4293      	cmp	r3, r2
 800f988:	d100      	bne.n	800f98c <HAL_DMA_IRQHandler+0xd8>
 800f98a:	e2e8      	b.n	800ff5e <HAL_DMA_IRQHandler+0x6aa>
 800f98c:	0332      	lsls	r2, r6, #12
 800f98e:	d408      	bmi.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f990:	4a77      	ldr	r2, [pc, #476]	; (800fb70 <HAL_DMA_IRQHandler+0x2bc>)
 800f992:	6810      	ldr	r0, [r2, #0]
 800f994:	2280      	movs	r2, #128	; 0x80
 800f996:	02d2      	lsls	r2, r2, #11
 800f998:	e15f      	b.n	800fc5a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f99a:	0732      	lsls	r2, r6, #28
 800f99c:	d401      	bmi.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
 800f99e:	f000 fc0a 	bl	80101b6 <HAL_DMA_IRQHandler+0x902>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f9a2:	2208      	movs	r2, #8
 800f9a4:	6818      	ldr	r0, [r3, #0]
 800f9a6:	4202      	tst	r2, r0
 800f9a8:	d100      	bne.n	800f9ac <HAL_DMA_IRQHandler+0xf8>
 800f9aa:	e1f4      	b.n	800fd96 <HAL_DMA_IRQHandler+0x4e2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800f9ac:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f9ae:	4d66      	ldr	r5, [pc, #408]	; (800fb48 <HAL_DMA_IRQHandler+0x294>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800f9b0:	4390      	bics	r0, r2
 800f9b2:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f9b4:	4862      	ldr	r0, [pc, #392]	; (800fb40 <HAL_DMA_IRQHandler+0x28c>)
 800f9b6:	4283      	cmp	r3, r0
 800f9b8:	d800      	bhi.n	800f9bc <HAL_DMA_IRQHandler+0x108>
 800f9ba:	e1a9      	b.n	800fd10 <HAL_DMA_IRQHandler+0x45c>
 800f9bc:	42ab      	cmp	r3, r5
 800f9be:	d100      	bne.n	800f9c2 <HAL_DMA_IRQHandler+0x10e>
 800f9c0:	e310      	b.n	800ffe4 <HAL_DMA_IRQHandler+0x730>
 800f9c2:	4a62      	ldr	r2, [pc, #392]	; (800fb4c <HAL_DMA_IRQHandler+0x298>)
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	d100      	bne.n	800f9ca <HAL_DMA_IRQHandler+0x116>
 800f9c8:	e337      	b.n	801003a <HAL_DMA_IRQHandler+0x786>
 800f9ca:	4a61      	ldr	r2, [pc, #388]	; (800fb50 <HAL_DMA_IRQHandler+0x29c>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d100      	bne.n	800f9d2 <HAL_DMA_IRQHandler+0x11e>
 800f9d0:	e2df      	b.n	800ff92 <HAL_DMA_IRQHandler+0x6de>
 800f9d2:	4a60      	ldr	r2, [pc, #384]	; (800fb54 <HAL_DMA_IRQHandler+0x2a0>)
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d100      	bne.n	800f9da <HAL_DMA_IRQHandler+0x126>
 800f9d8:	e370      	b.n	80100bc <HAL_DMA_IRQHandler+0x808>
 800f9da:	4a5f      	ldr	r2, [pc, #380]	; (800fb58 <HAL_DMA_IRQHandler+0x2a4>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d100      	bne.n	800f9e2 <HAL_DMA_IRQHandler+0x12e>
 800f9e0:	e38a      	b.n	80100f8 <HAL_DMA_IRQHandler+0x844>
 800f9e2:	4a5e      	ldr	r2, [pc, #376]	; (800fb5c <HAL_DMA_IRQHandler+0x2a8>)
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d100      	bne.n	800f9ea <HAL_DMA_IRQHandler+0x136>
 800f9e8:	e3a4      	b.n	8010134 <HAL_DMA_IRQHandler+0x880>
 800f9ea:	4283      	cmp	r3, r0
 800f9ec:	d100      	bne.n	800f9f0 <HAL_DMA_IRQHandler+0x13c>
 800f9ee:	e3cd      	b.n	801018c <HAL_DMA_IRQHandler+0x8d8>
 800f9f0:	4a5b      	ldr	r2, [pc, #364]	; (800fb60 <HAL_DMA_IRQHandler+0x2ac>)
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d100      	bne.n	800f9f8 <HAL_DMA_IRQHandler+0x144>
 800f9f6:	e3d8      	b.n	80101aa <HAL_DMA_IRQHandler+0x8f6>
 800f9f8:	4a5a      	ldr	r2, [pc, #360]	; (800fb64 <HAL_DMA_IRQHandler+0x2b0>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d100      	bne.n	800fa00 <HAL_DMA_IRQHandler+0x14c>
 800f9fe:	e3d8      	b.n	80101b2 <HAL_DMA_IRQHandler+0x8fe>
 800fa00:	4a59      	ldr	r2, [pc, #356]	; (800fb68 <HAL_DMA_IRQHandler+0x2b4>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d100      	bne.n	800fa08 <HAL_DMA_IRQHandler+0x154>
 800fa06:	e2c4      	b.n	800ff92 <HAL_DMA_IRQHandler+0x6de>
 800fa08:	4a5a      	ldr	r2, [pc, #360]	; (800fb74 <HAL_DMA_IRQHandler+0x2c0>)
 800fa0a:	189a      	adds	r2, r3, r2
 800fa0c:	4250      	negs	r0, r2
 800fa0e:	4142      	adcs	r2, r0
 800fa10:	4859      	ldr	r0, [pc, #356]	; (800fb78 <HAL_DMA_IRQHandler+0x2c4>)
 800fa12:	4252      	negs	r2, r2
 800fa14:	4002      	ands	r2, r0
 800fa16:	2080      	movs	r0, #128	; 0x80
 800fa18:	0300      	lsls	r0, r0, #12
 800fa1a:	4684      	mov	ip, r0
 800fa1c:	4462      	add	r2, ip
 800fa1e:	4849      	ldr	r0, [pc, #292]	; (800fb44 <HAL_DMA_IRQHandler+0x290>)
 800fa20:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fa22:	2001      	movs	r0, #1
 800fa24:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fa26:	4302      	orrs	r2, r0
 800fa28:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fa2a:	2221      	movs	r2, #33	; 0x21
 800fa2c:	3003      	adds	r0, #3
 800fa2e:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fa30:	2000      	movs	r0, #0
 800fa32:	3a01      	subs	r2, #1
 800fa34:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fa36:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fa38:	2a00      	cmp	r2, #0
 800fa3a:	d000      	beq.n	800fa3e <HAL_DMA_IRQHandler+0x18a>
 800fa3c:	e1a7      	b.n	800fd8e <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fa3e:	4a41      	ldr	r2, [pc, #260]	; (800fb44 <HAL_DMA_IRQHandler+0x290>)
 800fa40:	4d41      	ldr	r5, [pc, #260]	; (800fb48 <HAL_DMA_IRQHandler+0x294>)
 800fa42:	6810      	ldr	r0, [r2, #0]
 800fa44:	2204      	movs	r2, #4
 800fa46:	42ab      	cmp	r3, r5
 800fa48:	d034      	beq.n	800fab4 <HAL_DMA_IRQHandler+0x200>
 800fa4a:	4d40      	ldr	r5, [pc, #256]	; (800fb4c <HAL_DMA_IRQHandler+0x298>)
 800fa4c:	2240      	movs	r2, #64	; 0x40
 800fa4e:	42ab      	cmp	r3, r5
 800fa50:	d030      	beq.n	800fab4 <HAL_DMA_IRQHandler+0x200>
 800fa52:	4a3f      	ldr	r2, [pc, #252]	; (800fb50 <HAL_DMA_IRQHandler+0x29c>)
 800fa54:	4293      	cmp	r3, r2
 800fa56:	d100      	bne.n	800fa5a <HAL_DMA_IRQHandler+0x1a6>
 800fa58:	e3b1      	b.n	80101be <HAL_DMA_IRQHandler+0x90a>
 800fa5a:	4a3e      	ldr	r2, [pc, #248]	; (800fb54 <HAL_DMA_IRQHandler+0x2a0>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d100      	bne.n	800fa62 <HAL_DMA_IRQHandler+0x1ae>
 800fa60:	e39e      	b.n	80101a0 <HAL_DMA_IRQHandler+0x8ec>
 800fa62:	4a3d      	ldr	r2, [pc, #244]	; (800fb58 <HAL_DMA_IRQHandler+0x2a4>)
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d100      	bne.n	800fa6a <HAL_DMA_IRQHandler+0x1b6>
 800fa68:	e760      	b.n	800f92c <HAL_DMA_IRQHandler+0x78>
 800fa6a:	4a3c      	ldr	r2, [pc, #240]	; (800fb5c <HAL_DMA_IRQHandler+0x2a8>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d100      	bne.n	800fa72 <HAL_DMA_IRQHandler+0x1be>
 800fa70:	e315      	b.n	801009e <HAL_DMA_IRQHandler+0x7ea>
 800fa72:	4a33      	ldr	r2, [pc, #204]	; (800fb40 <HAL_DMA_IRQHandler+0x28c>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d100      	bne.n	800fa7a <HAL_DMA_IRQHandler+0x1c6>
 800fa78:	e2a3      	b.n	800ffc2 <HAL_DMA_IRQHandler+0x70e>
 800fa7a:	4d39      	ldr	r5, [pc, #228]	; (800fb60 <HAL_DMA_IRQHandler+0x2ac>)
 800fa7c:	2204      	movs	r2, #4
 800fa7e:	42ab      	cmp	r3, r5
 800fa80:	d018      	beq.n	800fab4 <HAL_DMA_IRQHandler+0x200>
 800fa82:	4d38      	ldr	r5, [pc, #224]	; (800fb64 <HAL_DMA_IRQHandler+0x2b0>)
 800fa84:	323c      	adds	r2, #60	; 0x3c
 800fa86:	42ab      	cmp	r3, r5
 800fa88:	d014      	beq.n	800fab4 <HAL_DMA_IRQHandler+0x200>
 800fa8a:	4a37      	ldr	r2, [pc, #220]	; (800fb68 <HAL_DMA_IRQHandler+0x2b4>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d100      	bne.n	800fa92 <HAL_DMA_IRQHandler+0x1de>
 800fa90:	e395      	b.n	80101be <HAL_DMA_IRQHandler+0x90a>
 800fa92:	4a38      	ldr	r2, [pc, #224]	; (800fb74 <HAL_DMA_IRQHandler+0x2c0>)
 800fa94:	189a      	adds	r2, r3, r2
 800fa96:	4255      	negs	r5, r2
 800fa98:	416a      	adcs	r2, r5
 800fa9a:	4d38      	ldr	r5, [pc, #224]	; (800fb7c <HAL_DMA_IRQHandler+0x2c8>)
 800fa9c:	4252      	negs	r2, r2
 800fa9e:	402a      	ands	r2, r5
 800faa0:	2580      	movs	r5, #128	; 0x80
 800faa2:	02ed      	lsls	r5, r5, #11
 800faa4:	46ac      	mov	ip, r5
 800faa6:	4462      	add	r2, ip
 800faa8:	e004      	b.n	800fab4 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800faaa:	0732      	lsls	r2, r6, #28
 800faac:	d500      	bpl.n	800fab0 <HAL_DMA_IRQHandler+0x1fc>
 800faae:	e778      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fab0:	2204      	movs	r2, #4
 800fab2:	6800      	ldr	r0, [r0, #0]
 800fab4:	4210      	tst	r0, r2
 800fab6:	d000      	beq.n	800faba <HAL_DMA_IRQHandler+0x206>
 800fab8:	e0d1      	b.n	800fc5e <HAL_DMA_IRQHandler+0x3aa>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800faba:	4a22      	ldr	r2, [pc, #136]	; (800fb44 <HAL_DMA_IRQHandler+0x290>)
 800fabc:	6810      	ldr	r0, [r2, #0]
 800fabe:	4a22      	ldr	r2, [pc, #136]	; (800fb48 <HAL_DMA_IRQHandler+0x294>)
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d100      	bne.n	800fac6 <HAL_DMA_IRQHandler+0x212>
 800fac4:	e122      	b.n	800fd0c <HAL_DMA_IRQHandler+0x458>
 800fac6:	4a21      	ldr	r2, [pc, #132]	; (800fb4c <HAL_DMA_IRQHandler+0x298>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	d05b      	beq.n	800fb84 <HAL_DMA_IRQHandler+0x2d0>
 800facc:	4a20      	ldr	r2, [pc, #128]	; (800fb50 <HAL_DMA_IRQHandler+0x29c>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d100      	bne.n	800fad4 <HAL_DMA_IRQHandler+0x220>
 800fad2:	e19a      	b.n	800fe0a <HAL_DMA_IRQHandler+0x556>
 800fad4:	4a1f      	ldr	r2, [pc, #124]	; (800fb54 <HAL_DMA_IRQHandler+0x2a0>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d100      	bne.n	800fadc <HAL_DMA_IRQHandler+0x228>
 800fada:	e237      	b.n	800ff4c <HAL_DMA_IRQHandler+0x698>
 800fadc:	4a1e      	ldr	r2, [pc, #120]	; (800fb58 <HAL_DMA_IRQHandler+0x2a4>)
 800fade:	4293      	cmp	r3, r2
 800fae0:	d100      	bne.n	800fae4 <HAL_DMA_IRQHandler+0x230>
 800fae2:	e239      	b.n	800ff58 <HAL_DMA_IRQHandler+0x6a4>
 800fae4:	4a1d      	ldr	r2, [pc, #116]	; (800fb5c <HAL_DMA_IRQHandler+0x2a8>)
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d100      	bne.n	800faec <HAL_DMA_IRQHandler+0x238>
 800faea:	e24f      	b.n	800ff8c <HAL_DMA_IRQHandler+0x6d8>
 800faec:	4a14      	ldr	r2, [pc, #80]	; (800fb40 <HAL_DMA_IRQHandler+0x28c>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d100      	bne.n	800faf4 <HAL_DMA_IRQHandler+0x240>
 800faf2:	e297      	b.n	8010024 <HAL_DMA_IRQHandler+0x770>
 800faf4:	4a1a      	ldr	r2, [pc, #104]	; (800fb60 <HAL_DMA_IRQHandler+0x2ac>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d100      	bne.n	800fafc <HAL_DMA_IRQHandler+0x248>
 800fafa:	e107      	b.n	800fd0c <HAL_DMA_IRQHandler+0x458>
 800fafc:	4a19      	ldr	r2, [pc, #100]	; (800fb64 <HAL_DMA_IRQHandler+0x2b0>)
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d040      	beq.n	800fb84 <HAL_DMA_IRQHandler+0x2d0>
 800fb02:	4a19      	ldr	r2, [pc, #100]	; (800fb68 <HAL_DMA_IRQHandler+0x2b4>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d100      	bne.n	800fb0a <HAL_DMA_IRQHandler+0x256>
 800fb08:	e17f      	b.n	800fe0a <HAL_DMA_IRQHandler+0x556>
 800fb0a:	4a1a      	ldr	r2, [pc, #104]	; (800fb74 <HAL_DMA_IRQHandler+0x2c0>)
 800fb0c:	1899      	adds	r1, r3, r2
 800fb0e:	424a      	negs	r2, r1
 800fb10:	4151      	adcs	r1, r2
 800fb12:	4a1b      	ldr	r2, [pc, #108]	; (800fb80 <HAL_DMA_IRQHandler+0x2cc>)
 800fb14:	4249      	negs	r1, r1
 800fb16:	400a      	ands	r2, r1
 800fb18:	2180      	movs	r1, #128	; 0x80
 800fb1a:	0289      	lsls	r1, r1, #10
 800fb1c:	468c      	mov	ip, r1
 800fb1e:	4462      	add	r2, ip
 800fb20:	e031      	b.n	800fb86 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fb22:	0532      	lsls	r2, r6, #20
 800fb24:	d500      	bpl.n	800fb28 <HAL_DMA_IRQHandler+0x274>
 800fb26:	e73c      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fb28:	2280      	movs	r2, #128	; 0x80
 800fb2a:	6800      	ldr	r0, [r0, #0]
 800fb2c:	0019      	movs	r1, r3
 800fb2e:	00d2      	lsls	r2, r2, #3
 800fb30:	e093      	b.n	800fc5a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fb32:	0532      	lsls	r2, r6, #20
 800fb34:	d500      	bpl.n	800fb38 <HAL_DMA_IRQHandler+0x284>
 800fb36:	e734      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fb38:	2280      	movs	r2, #128	; 0x80
 800fb3a:	6800      	ldr	r0, [r0, #0]
 800fb3c:	00d2      	lsls	r2, r2, #3
 800fb3e:	e7b9      	b.n	800fab4 <HAL_DMA_IRQHandler+0x200>
 800fb40:	40020080 	.word	0x40020080
 800fb44:	40020400 	.word	0x40020400
 800fb48:	40020008 	.word	0x40020008
 800fb4c:	4002001c 	.word	0x4002001c
 800fb50:	40020030 	.word	0x40020030
 800fb54:	40020044 	.word	0x40020044
 800fb58:	40020058 	.word	0x40020058
 800fb5c:	4002006c 	.word	0x4002006c
 800fb60:	40020408 	.word	0x40020408
 800fb64:	4002041c 	.word	0x4002041c
 800fb68:	40020430 	.word	0x40020430
 800fb6c:	40020444 	.word	0x40020444
 800fb70:	40020000 	.word	0x40020000
 800fb74:	bffdfbbc 	.word	0xbffdfbbc
 800fb78:	fff88000 	.word	0xfff88000
 800fb7c:	fffc4000 	.word	0xfffc4000
 800fb80:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fb84:	2220      	movs	r2, #32
 800fb86:	4002      	ands	r2, r0
 800fb88:	1e51      	subs	r1, r2, #1
 800fb8a:	418a      	sbcs	r2, r1
 800fb8c:	b2d2      	uxtb	r2, r2
 800fb8e:	2a00      	cmp	r2, #0
 800fb90:	d050      	beq.n	800fc34 <HAL_DMA_IRQHandler+0x380>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800fb92:	2202      	movs	r2, #2
 800fb94:	6819      	ldr	r1, [r3, #0]
 800fb96:	420a      	tst	r2, r1
 800fb98:	d04c      	beq.n	800fc34 <HAL_DMA_IRQHandler+0x380>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800fb9a:	6819      	ldr	r1, [r3, #0]
 800fb9c:	0689      	lsls	r1, r1, #26
 800fb9e:	d402      	bmi.n	800fba6 <HAL_DMA_IRQHandler+0x2f2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800fba0:	6819      	ldr	r1, [r3, #0]
 800fba2:	4391      	bics	r1, r2
 800fba4:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fba6:	4ab5      	ldr	r2, [pc, #724]	; (800fe7c <HAL_DMA_IRQHandler+0x5c8>)
 800fba8:	49b5      	ldr	r1, [pc, #724]	; (800fe80 <HAL_DMA_IRQHandler+0x5cc>)
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d800      	bhi.n	800fbb0 <HAL_DMA_IRQHandler+0x2fc>
 800fbae:	e12f      	b.n	800fe10 <HAL_DMA_IRQHandler+0x55c>
 800fbb0:	428b      	cmp	r3, r1
 800fbb2:	d100      	bne.n	800fbb6 <HAL_DMA_IRQHandler+0x302>
 800fbb4:	e20e      	b.n	800ffd4 <HAL_DMA_IRQHandler+0x720>
 800fbb6:	49b3      	ldr	r1, [pc, #716]	; (800fe84 <HAL_DMA_IRQHandler+0x5d0>)
 800fbb8:	428b      	cmp	r3, r1
 800fbba:	d100      	bne.n	800fbbe <HAL_DMA_IRQHandler+0x30a>
 800fbbc:	e237      	b.n	801002e <HAL_DMA_IRQHandler+0x77a>
 800fbbe:	49b2      	ldr	r1, [pc, #712]	; (800fe88 <HAL_DMA_IRQHandler+0x5d4>)
 800fbc0:	428b      	cmp	r3, r1
 800fbc2:	d100      	bne.n	800fbc6 <HAL_DMA_IRQHandler+0x312>
 800fbc4:	e271      	b.n	80100aa <HAL_DMA_IRQHandler+0x7f6>
 800fbc6:	49b1      	ldr	r1, [pc, #708]	; (800fe8c <HAL_DMA_IRQHandler+0x5d8>)
 800fbc8:	428b      	cmp	r3, r1
 800fbca:	d100      	bne.n	800fbce <HAL_DMA_IRQHandler+0x31a>
 800fbcc:	e1fc      	b.n	800ffc8 <HAL_DMA_IRQHandler+0x714>
 800fbce:	49b0      	ldr	r1, [pc, #704]	; (800fe90 <HAL_DMA_IRQHandler+0x5dc>)
 800fbd0:	428b      	cmp	r3, r1
 800fbd2:	d100      	bne.n	800fbd6 <HAL_DMA_IRQHandler+0x322>
 800fbd4:	e28a      	b.n	80100ec <HAL_DMA_IRQHandler+0x838>
 800fbd6:	49af      	ldr	r1, [pc, #700]	; (800fe94 <HAL_DMA_IRQHandler+0x5e0>)
 800fbd8:	428b      	cmp	r3, r1
 800fbda:	d100      	bne.n	800fbde <HAL_DMA_IRQHandler+0x32a>
 800fbdc:	e2a7      	b.n	801012e <HAL_DMA_IRQHandler+0x87a>
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d100      	bne.n	800fbe4 <HAL_DMA_IRQHandler+0x330>
 800fbe2:	e2c4      	b.n	801016e <HAL_DMA_IRQHandler+0x8ba>
 800fbe4:	4aac      	ldr	r2, [pc, #688]	; (800fe98 <HAL_DMA_IRQHandler+0x5e4>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d100      	bne.n	800fbec <HAL_DMA_IRQHandler+0x338>
 800fbea:	e1f3      	b.n	800ffd4 <HAL_DMA_IRQHandler+0x720>
 800fbec:	4aab      	ldr	r2, [pc, #684]	; (800fe9c <HAL_DMA_IRQHandler+0x5e8>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d100      	bne.n	800fbf4 <HAL_DMA_IRQHandler+0x340>
 800fbf2:	e21c      	b.n	801002e <HAL_DMA_IRQHandler+0x77a>
 800fbf4:	4aaa      	ldr	r2, [pc, #680]	; (800fea0 <HAL_DMA_IRQHandler+0x5ec>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d100      	bne.n	800fbfc <HAL_DMA_IRQHandler+0x348>
 800fbfa:	e256      	b.n	80100aa <HAL_DMA_IRQHandler+0x7f6>
 800fbfc:	4aa9      	ldr	r2, [pc, #676]	; (800fea4 <HAL_DMA_IRQHandler+0x5f0>)
 800fbfe:	4694      	mov	ip, r2
 800fc00:	4463      	add	r3, ip
 800fc02:	1e5a      	subs	r2, r3, #1
 800fc04:	4193      	sbcs	r3, r2
 800fc06:	22f0      	movs	r2, #240	; 0xf0
 800fc08:	425b      	negs	r3, r3
 800fc0a:	0252      	lsls	r2, r2, #9
 800fc0c:	4013      	ands	r3, r2
 800fc0e:	2280      	movs	r2, #128	; 0x80
 800fc10:	0192      	lsls	r2, r2, #6
 800fc12:	4694      	mov	ip, r2
 800fc14:	4463      	add	r3, ip
 800fc16:	4aa4      	ldr	r2, [pc, #656]	; (800fea8 <HAL_DMA_IRQHandler+0x5f4>)
 800fc18:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800fc1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 800fc1c:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800fc1e:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 800fc20:	2321      	movs	r3, #33	; 0x21
 800fc22:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 800fc24:	2200      	movs	r2, #0
 800fc26:	3b01      	subs	r3, #1
 800fc28:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fc2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d001      	beq.n	800fc34 <HAL_DMA_IRQHandler+0x380>
        hdma->XferCpltCallback(hdma);
 800fc30:	0020      	movs	r0, r4
 800fc32:	4798      	blx	r3
}  
 800fc34:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fc36:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fc38:	489c      	ldr	r0, [pc, #624]	; (800feac <HAL_DMA_IRQHandler+0x5f8>)
 800fc3a:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fc3c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fc3e:	432a      	orrs	r2, r5
 800fc40:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fc42:	2221      	movs	r2, #33	; 0x21
 800fc44:	3503      	adds	r5, #3
 800fc46:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fc48:	2500      	movs	r5, #0
 800fc4a:	3a01      	subs	r2, #1
 800fc4c:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fc4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fc50:	2a00      	cmp	r2, #0
 800fc52:	d000      	beq.n	800fc56 <HAL_DMA_IRQHandler+0x3a2>
 800fc54:	e09b      	b.n	800fd8e <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fc56:	6800      	ldr	r0, [r0, #0]
 800fc58:	2204      	movs	r2, #4
 800fc5a:	4210      	tst	r0, r2
 800fc5c:	d050      	beq.n	800fd00 <HAL_DMA_IRQHandler+0x44c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800fc5e:	2204      	movs	r2, #4
 800fc60:	6818      	ldr	r0, [r3, #0]
 800fc62:	4202      	tst	r2, r0
 800fc64:	d048      	beq.n	800fcf8 <HAL_DMA_IRQHandler+0x444>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800fc66:	6818      	ldr	r0, [r3, #0]
 800fc68:	0680      	lsls	r0, r0, #26
 800fc6a:	d402      	bmi.n	800fc72 <HAL_DMA_IRQHandler+0x3be>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fc6c:	6818      	ldr	r0, [r3, #0]
 800fc6e:	4390      	bics	r0, r2
 800fc70:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fc72:	4a82      	ldr	r2, [pc, #520]	; (800fe7c <HAL_DMA_IRQHandler+0x5c8>)
 800fc74:	4291      	cmp	r1, r2
 800fc76:	d800      	bhi.n	800fc7a <HAL_DMA_IRQHandler+0x3c6>
 800fc78:	e11e      	b.n	800feb8 <HAL_DMA_IRQHandler+0x604>
 800fc7a:	4981      	ldr	r1, [pc, #516]	; (800fe80 <HAL_DMA_IRQHandler+0x5cc>)
 800fc7c:	428b      	cmp	r3, r1
 800fc7e:	d100      	bne.n	800fc82 <HAL_DMA_IRQHandler+0x3ce>
 800fc80:	e1ac      	b.n	800ffdc <HAL_DMA_IRQHandler+0x728>
 800fc82:	4980      	ldr	r1, [pc, #512]	; (800fe84 <HAL_DMA_IRQHandler+0x5d0>)
 800fc84:	428b      	cmp	r3, r1
 800fc86:	d100      	bne.n	800fc8a <HAL_DMA_IRQHandler+0x3d6>
 800fc88:	e1d5      	b.n	8010036 <HAL_DMA_IRQHandler+0x782>
 800fc8a:	497f      	ldr	r1, [pc, #508]	; (800fe88 <HAL_DMA_IRQHandler+0x5d4>)
 800fc8c:	428b      	cmp	r3, r1
 800fc8e:	d100      	bne.n	800fc92 <HAL_DMA_IRQHandler+0x3de>
 800fc90:	e188      	b.n	800ffa4 <HAL_DMA_IRQHandler+0x6f0>
 800fc92:	497e      	ldr	r1, [pc, #504]	; (800fe8c <HAL_DMA_IRQHandler+0x5d8>)
 800fc94:	428b      	cmp	r3, r1
 800fc96:	d100      	bne.n	800fc9a <HAL_DMA_IRQHandler+0x3e6>
 800fc98:	e20a      	b.n	80100b0 <HAL_DMA_IRQHandler+0x7fc>
 800fc9a:	497d      	ldr	r1, [pc, #500]	; (800fe90 <HAL_DMA_IRQHandler+0x5dc>)
 800fc9c:	428b      	cmp	r3, r1
 800fc9e:	d100      	bne.n	800fca2 <HAL_DMA_IRQHandler+0x3ee>
 800fca0:	e22d      	b.n	80100fe <HAL_DMA_IRQHandler+0x84a>
 800fca2:	497c      	ldr	r1, [pc, #496]	; (800fe94 <HAL_DMA_IRQHandler+0x5e0>)
 800fca4:	428b      	cmp	r3, r1
 800fca6:	d100      	bne.n	800fcaa <HAL_DMA_IRQHandler+0x3f6>
 800fca8:	e247      	b.n	801013a <HAL_DMA_IRQHandler+0x886>
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d100      	bne.n	800fcb0 <HAL_DMA_IRQHandler+0x3fc>
 800fcae:	e264      	b.n	801017a <HAL_DMA_IRQHandler+0x8c6>
 800fcb0:	4a79      	ldr	r2, [pc, #484]	; (800fe98 <HAL_DMA_IRQHandler+0x5e4>)
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d100      	bne.n	800fcb8 <HAL_DMA_IRQHandler+0x404>
 800fcb6:	e191      	b.n	800ffdc <HAL_DMA_IRQHandler+0x728>
 800fcb8:	4a78      	ldr	r2, [pc, #480]	; (800fe9c <HAL_DMA_IRQHandler+0x5e8>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d100      	bne.n	800fcc0 <HAL_DMA_IRQHandler+0x40c>
 800fcbe:	e1ba      	b.n	8010036 <HAL_DMA_IRQHandler+0x782>
 800fcc0:	4a77      	ldr	r2, [pc, #476]	; (800fea0 <HAL_DMA_IRQHandler+0x5ec>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d100      	bne.n	800fcc8 <HAL_DMA_IRQHandler+0x414>
 800fcc6:	e16d      	b.n	800ffa4 <HAL_DMA_IRQHandler+0x6f0>
 800fcc8:	4a76      	ldr	r2, [pc, #472]	; (800fea4 <HAL_DMA_IRQHandler+0x5f0>)
 800fcca:	189a      	adds	r2, r3, r2
 800fccc:	1e51      	subs	r1, r2, #1
 800fcce:	418a      	sbcs	r2, r1
 800fcd0:	21f0      	movs	r1, #240	; 0xf0
 800fcd2:	4252      	negs	r2, r2
 800fcd4:	0289      	lsls	r1, r1, #10
 800fcd6:	400a      	ands	r2, r1
 800fcd8:	2180      	movs	r1, #128	; 0x80
 800fcda:	01c9      	lsls	r1, r1, #7
 800fcdc:	468c      	mov	ip, r1
 800fcde:	4462      	add	r2, ip
 800fce0:	4971      	ldr	r1, [pc, #452]	; (800fea8 <HAL_DMA_IRQHandler+0x5f4>)
 800fce2:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800fce4:	2221      	movs	r2, #33	; 0x21
 800fce6:	2111      	movs	r1, #17
 800fce8:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fcea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fcec:	2a00      	cmp	r2, #0
 800fcee:	d100      	bne.n	800fcf2 <HAL_DMA_IRQHandler+0x43e>
 800fcf0:	e6e3      	b.n	800faba <HAL_DMA_IRQHandler+0x206>
        hdma->XferHalfCpltCallback(hdma);
 800fcf2:	0020      	movs	r0, r4
 800fcf4:	4790      	blx	r2
 800fcf6:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fcf8:	4a60      	ldr	r2, [pc, #384]	; (800fe7c <HAL_DMA_IRQHandler+0x5c8>)
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d900      	bls.n	800fd00 <HAL_DMA_IRQHandler+0x44c>
 800fcfe:	e6dc      	b.n	800faba <HAL_DMA_IRQHandler+0x206>
 800fd00:	4a6a      	ldr	r2, [pc, #424]	; (800feac <HAL_DMA_IRQHandler+0x5f8>)
 800fd02:	6810      	ldr	r0, [r2, #0]
 800fd04:	4a5e      	ldr	r2, [pc, #376]	; (800fe80 <HAL_DMA_IRQHandler+0x5cc>)
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d000      	beq.n	800fd0c <HAL_DMA_IRQHandler+0x458>
 800fd0a:	e6dc      	b.n	800fac6 <HAL_DMA_IRQHandler+0x212>
 800fd0c:	2202      	movs	r2, #2
 800fd0e:	e73a      	b.n	800fb86 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fd10:	42ab      	cmp	r3, r5
 800fd12:	d090      	beq.n	800fc36 <HAL_DMA_IRQHandler+0x382>
 800fd14:	4a5b      	ldr	r2, [pc, #364]	; (800fe84 <HAL_DMA_IRQHandler+0x5d0>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d100      	bne.n	800fd1c <HAL_DMA_IRQHandler+0x468>
 800fd1a:	e1a1      	b.n	8010060 <HAL_DMA_IRQHandler+0x7ac>
 800fd1c:	4a5a      	ldr	r2, [pc, #360]	; (800fe88 <HAL_DMA_IRQHandler+0x5d4>)
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	d100      	bne.n	800fd24 <HAL_DMA_IRQHandler+0x470>
 800fd22:	e13c      	b.n	800ff9e <HAL_DMA_IRQHandler+0x6ea>
 800fd24:	4a59      	ldr	r2, [pc, #356]	; (800fe8c <HAL_DMA_IRQHandler+0x5d8>)
 800fd26:	4293      	cmp	r3, r2
 800fd28:	d100      	bne.n	800fd2c <HAL_DMA_IRQHandler+0x478>
 800fd2a:	e1ca      	b.n	80100c2 <HAL_DMA_IRQHandler+0x80e>
 800fd2c:	4a58      	ldr	r2, [pc, #352]	; (800fe90 <HAL_DMA_IRQHandler+0x5dc>)
 800fd2e:	4293      	cmp	r3, r2
 800fd30:	d100      	bne.n	800fd34 <HAL_DMA_IRQHandler+0x480>
 800fd32:	e1de      	b.n	80100f2 <HAL_DMA_IRQHandler+0x83e>
 800fd34:	4a57      	ldr	r2, [pc, #348]	; (800fe94 <HAL_DMA_IRQHandler+0x5e0>)
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d100      	bne.n	800fd3c <HAL_DMA_IRQHandler+0x488>
 800fd3a:	e201      	b.n	8010140 <HAL_DMA_IRQHandler+0x88c>
 800fd3c:	4283      	cmp	r3, r0
 800fd3e:	d100      	bne.n	800fd42 <HAL_DMA_IRQHandler+0x48e>
 800fd40:	e21e      	b.n	8010180 <HAL_DMA_IRQHandler+0x8cc>
 800fd42:	4a55      	ldr	r2, [pc, #340]	; (800fe98 <HAL_DMA_IRQHandler+0x5e4>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d100      	bne.n	800fd4a <HAL_DMA_IRQHandler+0x496>
 800fd48:	e22d      	b.n	80101a6 <HAL_DMA_IRQHandler+0x8f2>
 800fd4a:	4a54      	ldr	r2, [pc, #336]	; (800fe9c <HAL_DMA_IRQHandler+0x5e8>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d100      	bne.n	800fd52 <HAL_DMA_IRQHandler+0x49e>
 800fd50:	e22d      	b.n	80101ae <HAL_DMA_IRQHandler+0x8fa>
 800fd52:	4a53      	ldr	r2, [pc, #332]	; (800fea0 <HAL_DMA_IRQHandler+0x5ec>)
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d100      	bne.n	800fd5a <HAL_DMA_IRQHandler+0x4a6>
 800fd58:	e121      	b.n	800ff9e <HAL_DMA_IRQHandler+0x6ea>
 800fd5a:	4a52      	ldr	r2, [pc, #328]	; (800fea4 <HAL_DMA_IRQHandler+0x5f0>)
 800fd5c:	189a      	adds	r2, r3, r2
 800fd5e:	4250      	negs	r0, r2
 800fd60:	4142      	adcs	r2, r0
 800fd62:	4853      	ldr	r0, [pc, #332]	; (800feb0 <HAL_DMA_IRQHandler+0x5fc>)
 800fd64:	4252      	negs	r2, r2
 800fd66:	4002      	ands	r2, r0
 800fd68:	2080      	movs	r0, #128	; 0x80
 800fd6a:	0300      	lsls	r0, r0, #12
 800fd6c:	4684      	mov	ip, r0
 800fd6e:	4462      	add	r2, ip
 800fd70:	484e      	ldr	r0, [pc, #312]	; (800feac <HAL_DMA_IRQHandler+0x5f8>)
 800fd72:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fd74:	2001      	movs	r0, #1
 800fd76:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fd78:	4302      	orrs	r2, r0
 800fd7a:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fd7c:	2221      	movs	r2, #33	; 0x21
 800fd7e:	3003      	adds	r0, #3
 800fd80:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fd82:	2000      	movs	r0, #0
 800fd84:	3a01      	subs	r2, #1
 800fd86:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fd88:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fd8a:	2a00      	cmp	r2, #0
 800fd8c:	d007      	beq.n	800fd9e <HAL_DMA_IRQHandler+0x4ea>
        hdma->XferErrorCallback(hdma);
 800fd8e:	0020      	movs	r0, r4
 800fd90:	4790      	blx	r2
 800fd92:	6823      	ldr	r3, [r4, #0]
 800fd94:	0019      	movs	r1, r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fd96:	4a39      	ldr	r2, [pc, #228]	; (800fe7c <HAL_DMA_IRQHandler+0x5c8>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d900      	bls.n	800fd9e <HAL_DMA_IRQHandler+0x4ea>
 800fd9c:	e64f      	b.n	800fa3e <HAL_DMA_IRQHandler+0x18a>
 800fd9e:	4a43      	ldr	r2, [pc, #268]	; (800feac <HAL_DMA_IRQHandler+0x5f8>)
 800fda0:	6810      	ldr	r0, [r2, #0]
 800fda2:	4a37      	ldr	r2, [pc, #220]	; (800fe80 <HAL_DMA_IRQHandler+0x5cc>)
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d100      	bne.n	800fdaa <HAL_DMA_IRQHandler+0x4f6>
 800fda8:	e756      	b.n	800fc58 <HAL_DMA_IRQHandler+0x3a4>
 800fdaa:	4a36      	ldr	r2, [pc, #216]	; (800fe84 <HAL_DMA_IRQHandler+0x5d0>)
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d100      	bne.n	800fdb2 <HAL_DMA_IRQHandler+0x4fe>
 800fdb0:	e0c4      	b.n	800ff3c <HAL_DMA_IRQHandler+0x688>
 800fdb2:	4a35      	ldr	r2, [pc, #212]	; (800fe88 <HAL_DMA_IRQHandler+0x5d4>)
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	d100      	bne.n	800fdba <HAL_DMA_IRQHandler+0x506>
 800fdb8:	e0cb      	b.n	800ff52 <HAL_DMA_IRQHandler+0x69e>
 800fdba:	4a34      	ldr	r2, [pc, #208]	; (800fe8c <HAL_DMA_IRQHandler+0x5d8>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d100      	bne.n	800fdc2 <HAL_DMA_IRQHandler+0x50e>
 800fdc0:	e0d2      	b.n	800ff68 <HAL_DMA_IRQHandler+0x6b4>
 800fdc2:	4a33      	ldr	r2, [pc, #204]	; (800fe90 <HAL_DMA_IRQHandler+0x5dc>)
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d100      	bne.n	800fdca <HAL_DMA_IRQHandler+0x516>
 800fdc8:	e5e4      	b.n	800f994 <HAL_DMA_IRQHandler+0xe0>
 800fdca:	4a32      	ldr	r2, [pc, #200]	; (800fe94 <HAL_DMA_IRQHandler+0x5e0>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d100      	bne.n	800fdd2 <HAL_DMA_IRQHandler+0x51e>
 800fdd0:	e15e      	b.n	8010090 <HAL_DMA_IRQHandler+0x7dc>
 800fdd2:	4a2a      	ldr	r2, [pc, #168]	; (800fe7c <HAL_DMA_IRQHandler+0x5c8>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d100      	bne.n	800fdda <HAL_DMA_IRQHandler+0x526>
 800fdd8:	e0ec      	b.n	800ffb4 <HAL_DMA_IRQHandler+0x700>
 800fdda:	4a2f      	ldr	r2, [pc, #188]	; (800fe98 <HAL_DMA_IRQHandler+0x5e4>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d100      	bne.n	800fde2 <HAL_DMA_IRQHandler+0x52e>
 800fde0:	e73a      	b.n	800fc58 <HAL_DMA_IRQHandler+0x3a4>
 800fde2:	4a2e      	ldr	r2, [pc, #184]	; (800fe9c <HAL_DMA_IRQHandler+0x5e8>)
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d100      	bne.n	800fdea <HAL_DMA_IRQHandler+0x536>
 800fde8:	e0a8      	b.n	800ff3c <HAL_DMA_IRQHandler+0x688>
 800fdea:	4a2d      	ldr	r2, [pc, #180]	; (800fea0 <HAL_DMA_IRQHandler+0x5ec>)
 800fdec:	4293      	cmp	r3, r2
 800fdee:	d100      	bne.n	800fdf2 <HAL_DMA_IRQHandler+0x53e>
 800fdf0:	e0af      	b.n	800ff52 <HAL_DMA_IRQHandler+0x69e>
 800fdf2:	4a2c      	ldr	r2, [pc, #176]	; (800fea4 <HAL_DMA_IRQHandler+0x5f0>)
 800fdf4:	189a      	adds	r2, r3, r2
 800fdf6:	4255      	negs	r5, r2
 800fdf8:	416a      	adcs	r2, r5
 800fdfa:	4d2e      	ldr	r5, [pc, #184]	; (800feb4 <HAL_DMA_IRQHandler+0x600>)
 800fdfc:	4252      	negs	r2, r2
 800fdfe:	402a      	ands	r2, r5
 800fe00:	2580      	movs	r5, #128	; 0x80
 800fe02:	02ed      	lsls	r5, r5, #11
 800fe04:	46ac      	mov	ip, r5
 800fe06:	4462      	add	r2, ip
 800fe08:	e727      	b.n	800fc5a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fe0a:	2280      	movs	r2, #128	; 0x80
 800fe0c:	0092      	lsls	r2, r2, #2
 800fe0e:	e6ba      	b.n	800fb86 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fe10:	428b      	cmp	r3, r1
 800fe12:	d100      	bne.n	800fe16 <HAL_DMA_IRQHandler+0x562>
 800fe14:	e0e0      	b.n	800ffd8 <HAL_DMA_IRQHandler+0x724>
 800fe16:	491b      	ldr	r1, [pc, #108]	; (800fe84 <HAL_DMA_IRQHandler+0x5d0>)
 800fe18:	428b      	cmp	r3, r1
 800fe1a:	d100      	bne.n	800fe1e <HAL_DMA_IRQHandler+0x56a>
 800fe1c:	e105      	b.n	801002a <HAL_DMA_IRQHandler+0x776>
 800fe1e:	491a      	ldr	r1, [pc, #104]	; (800fe88 <HAL_DMA_IRQHandler+0x5d4>)
 800fe20:	428b      	cmp	r3, r1
 800fe22:	d100      	bne.n	800fe26 <HAL_DMA_IRQHandler+0x572>
 800fe24:	e13e      	b.n	80100a4 <HAL_DMA_IRQHandler+0x7f0>
 800fe26:	4919      	ldr	r1, [pc, #100]	; (800fe8c <HAL_DMA_IRQHandler+0x5d8>)
 800fe28:	428b      	cmp	r3, r1
 800fe2a:	d100      	bne.n	800fe2e <HAL_DMA_IRQHandler+0x57a>
 800fe2c:	e0cf      	b.n	800ffce <HAL_DMA_IRQHandler+0x71a>
 800fe2e:	4918      	ldr	r1, [pc, #96]	; (800fe90 <HAL_DMA_IRQHandler+0x5dc>)
 800fe30:	428b      	cmp	r3, r1
 800fe32:	d100      	bne.n	800fe36 <HAL_DMA_IRQHandler+0x582>
 800fe34:	e157      	b.n	80100e6 <HAL_DMA_IRQHandler+0x832>
 800fe36:	4917      	ldr	r1, [pc, #92]	; (800fe94 <HAL_DMA_IRQHandler+0x5e0>)
 800fe38:	428b      	cmp	r3, r1
 800fe3a:	d100      	bne.n	800fe3e <HAL_DMA_IRQHandler+0x58a>
 800fe3c:	e174      	b.n	8010128 <HAL_DMA_IRQHandler+0x874>
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d100      	bne.n	800fe44 <HAL_DMA_IRQHandler+0x590>
 800fe42:	e197      	b.n	8010174 <HAL_DMA_IRQHandler+0x8c0>
 800fe44:	4a14      	ldr	r2, [pc, #80]	; (800fe98 <HAL_DMA_IRQHandler+0x5e4>)
 800fe46:	4293      	cmp	r3, r2
 800fe48:	d100      	bne.n	800fe4c <HAL_DMA_IRQHandler+0x598>
 800fe4a:	e0c5      	b.n	800ffd8 <HAL_DMA_IRQHandler+0x724>
 800fe4c:	4a13      	ldr	r2, [pc, #76]	; (800fe9c <HAL_DMA_IRQHandler+0x5e8>)
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	d100      	bne.n	800fe54 <HAL_DMA_IRQHandler+0x5a0>
 800fe52:	e0ea      	b.n	801002a <HAL_DMA_IRQHandler+0x776>
 800fe54:	4a12      	ldr	r2, [pc, #72]	; (800fea0 <HAL_DMA_IRQHandler+0x5ec>)
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d100      	bne.n	800fe5c <HAL_DMA_IRQHandler+0x5a8>
 800fe5a:	e123      	b.n	80100a4 <HAL_DMA_IRQHandler+0x7f0>
 800fe5c:	4a11      	ldr	r2, [pc, #68]	; (800fea4 <HAL_DMA_IRQHandler+0x5f0>)
 800fe5e:	4694      	mov	ip, r2
 800fe60:	4463      	add	r3, ip
 800fe62:	1e5a      	subs	r2, r3, #1
 800fe64:	4193      	sbcs	r3, r2
 800fe66:	22f0      	movs	r2, #240	; 0xf0
 800fe68:	425b      	negs	r3, r3
 800fe6a:	0252      	lsls	r2, r2, #9
 800fe6c:	4013      	ands	r3, r2
 800fe6e:	2280      	movs	r2, #128	; 0x80
 800fe70:	0192      	lsls	r2, r2, #6
 800fe72:	4694      	mov	ip, r2
 800fe74:	4463      	add	r3, ip
 800fe76:	4a0d      	ldr	r2, [pc, #52]	; (800feac <HAL_DMA_IRQHandler+0x5f8>)
 800fe78:	6053      	str	r3, [r2, #4]
 800fe7a:	e6ce      	b.n	800fc1a <HAL_DMA_IRQHandler+0x366>
 800fe7c:	40020080 	.word	0x40020080
 800fe80:	40020008 	.word	0x40020008
 800fe84:	4002001c 	.word	0x4002001c
 800fe88:	40020030 	.word	0x40020030
 800fe8c:	40020044 	.word	0x40020044
 800fe90:	40020058 	.word	0x40020058
 800fe94:	4002006c 	.word	0x4002006c
 800fe98:	40020408 	.word	0x40020408
 800fe9c:	4002041c 	.word	0x4002041c
 800fea0:	40020430 	.word	0x40020430
 800fea4:	bffdfbbc 	.word	0xbffdfbbc
 800fea8:	40020400 	.word	0x40020400
 800feac:	40020000 	.word	0x40020000
 800feb0:	fff88000 	.word	0xfff88000
 800feb4:	fffc4000 	.word	0xfffc4000
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800feb8:	49c2      	ldr	r1, [pc, #776]	; (80101c4 <HAL_DMA_IRQHandler+0x910>)
 800feba:	428b      	cmp	r3, r1
 800febc:	d100      	bne.n	800fec0 <HAL_DMA_IRQHandler+0x60c>
 800febe:	e08f      	b.n	800ffe0 <HAL_DMA_IRQHandler+0x72c>
 800fec0:	49c1      	ldr	r1, [pc, #772]	; (80101c8 <HAL_DMA_IRQHandler+0x914>)
 800fec2:	428b      	cmp	r3, r1
 800fec4:	d100      	bne.n	800fec8 <HAL_DMA_IRQHandler+0x614>
 800fec6:	e0b4      	b.n	8010032 <HAL_DMA_IRQHandler+0x77e>
 800fec8:	49c0      	ldr	r1, [pc, #768]	; (80101cc <HAL_DMA_IRQHandler+0x918>)
 800feca:	428b      	cmp	r3, r1
 800fecc:	d064      	beq.n	800ff98 <HAL_DMA_IRQHandler+0x6e4>
 800fece:	49c0      	ldr	r1, [pc, #768]	; (80101d0 <HAL_DMA_IRQHandler+0x91c>)
 800fed0:	428b      	cmp	r3, r1
 800fed2:	d100      	bne.n	800fed6 <HAL_DMA_IRQHandler+0x622>
 800fed4:	e0ef      	b.n	80100b6 <HAL_DMA_IRQHandler+0x802>
 800fed6:	49bf      	ldr	r1, [pc, #764]	; (80101d4 <HAL_DMA_IRQHandler+0x920>)
 800fed8:	428b      	cmp	r3, r1
 800feda:	d100      	bne.n	800fede <HAL_DMA_IRQHandler+0x62a>
 800fedc:	e112      	b.n	8010104 <HAL_DMA_IRQHandler+0x850>
 800fede:	49be      	ldr	r1, [pc, #760]	; (80101d8 <HAL_DMA_IRQHandler+0x924>)
 800fee0:	428b      	cmp	r3, r1
 800fee2:	d100      	bne.n	800fee6 <HAL_DMA_IRQHandler+0x632>
 800fee4:	e12f      	b.n	8010146 <HAL_DMA_IRQHandler+0x892>
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d100      	bne.n	800feec <HAL_DMA_IRQHandler+0x638>
 800feea:	e14c      	b.n	8010186 <HAL_DMA_IRQHandler+0x8d2>
 800feec:	4abb      	ldr	r2, [pc, #748]	; (80101dc <HAL_DMA_IRQHandler+0x928>)
 800feee:	4293      	cmp	r3, r2
 800fef0:	d076      	beq.n	800ffe0 <HAL_DMA_IRQHandler+0x72c>
 800fef2:	4abb      	ldr	r2, [pc, #748]	; (80101e0 <HAL_DMA_IRQHandler+0x92c>)
 800fef4:	4293      	cmp	r3, r2
 800fef6:	d100      	bne.n	800fefa <HAL_DMA_IRQHandler+0x646>
 800fef8:	e09b      	b.n	8010032 <HAL_DMA_IRQHandler+0x77e>
 800fefa:	4aba      	ldr	r2, [pc, #744]	; (80101e4 <HAL_DMA_IRQHandler+0x930>)
 800fefc:	4293      	cmp	r3, r2
 800fefe:	d04b      	beq.n	800ff98 <HAL_DMA_IRQHandler+0x6e4>
 800ff00:	4ab9      	ldr	r2, [pc, #740]	; (80101e8 <HAL_DMA_IRQHandler+0x934>)
 800ff02:	189a      	adds	r2, r3, r2
 800ff04:	1e51      	subs	r1, r2, #1
 800ff06:	418a      	sbcs	r2, r1
 800ff08:	21f0      	movs	r1, #240	; 0xf0
 800ff0a:	4252      	negs	r2, r2
 800ff0c:	0289      	lsls	r1, r1, #10
 800ff0e:	400a      	ands	r2, r1
 800ff10:	2180      	movs	r1, #128	; 0x80
 800ff12:	01c9      	lsls	r1, r1, #7
 800ff14:	468c      	mov	ip, r1
 800ff16:	4462      	add	r2, ip
 800ff18:	49b4      	ldr	r1, [pc, #720]	; (80101ec <HAL_DMA_IRQHandler+0x938>)
 800ff1a:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800ff1c:	2221      	movs	r2, #33	; 0x21
 800ff1e:	2111      	movs	r1, #17
 800ff20:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800ff22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ff24:	2a00      	cmp	r2, #0
 800ff26:	d100      	bne.n	800ff2a <HAL_DMA_IRQHandler+0x676>
 800ff28:	e6ea      	b.n	800fd00 <HAL_DMA_IRQHandler+0x44c>
        hdma->XferHalfCpltCallback(hdma);
 800ff2a:	0020      	movs	r0, r4
 800ff2c:	4790      	blx	r2
 800ff2e:	6823      	ldr	r3, [r4, #0]
 800ff30:	e6e2      	b.n	800fcf8 <HAL_DMA_IRQHandler+0x444>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff32:	0632      	lsls	r2, r6, #24
 800ff34:	d500      	bpl.n	800ff38 <HAL_DMA_IRQHandler+0x684>
 800ff36:	e534      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff38:	0019      	movs	r1, r3
 800ff3a:	6800      	ldr	r0, [r0, #0]
 800ff3c:	2240      	movs	r2, #64	; 0x40
 800ff3e:	e68c      	b.n	800fc5a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff40:	0632      	lsls	r2, r6, #24
 800ff42:	d500      	bpl.n	800ff46 <HAL_DMA_IRQHandler+0x692>
 800ff44:	e52d      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff46:	6800      	ldr	r0, [r0, #0]
 800ff48:	2240      	movs	r2, #64	; 0x40
 800ff4a:	e5b3      	b.n	800fab4 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800ff4c:	2280      	movs	r2, #128	; 0x80
 800ff4e:	0192      	lsls	r2, r2, #6
 800ff50:	e619      	b.n	800fb86 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff52:	2280      	movs	r2, #128	; 0x80
 800ff54:	00d2      	lsls	r2, r2, #3
 800ff56:	e680      	b.n	800fc5a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800ff58:	2280      	movs	r2, #128	; 0x80
 800ff5a:	0292      	lsls	r2, r2, #10
 800ff5c:	e613      	b.n	800fb86 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff5e:	0432      	lsls	r2, r6, #16
 800ff60:	d500      	bpl.n	800ff64 <HAL_DMA_IRQHandler+0x6b0>
 800ff62:	e51e      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff64:	4aa1      	ldr	r2, [pc, #644]	; (80101ec <HAL_DMA_IRQHandler+0x938>)
 800ff66:	6810      	ldr	r0, [r2, #0]
 800ff68:	2280      	movs	r2, #128	; 0x80
 800ff6a:	01d2      	lsls	r2, r2, #7
 800ff6c:	e675      	b.n	800fc5a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff6e:	0432      	lsls	r2, r6, #16
 800ff70:	d500      	bpl.n	800ff74 <HAL_DMA_IRQHandler+0x6c0>
 800ff72:	e516      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff74:	2280      	movs	r2, #128	; 0x80
 800ff76:	6800      	ldr	r0, [r0, #0]
 800ff78:	0019      	movs	r1, r3
 800ff7a:	01d2      	lsls	r2, r2, #7
 800ff7c:	e66d      	b.n	800fc5a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff7e:	0432      	lsls	r2, r6, #16
 800ff80:	d500      	bpl.n	800ff84 <HAL_DMA_IRQHandler+0x6d0>
 800ff82:	e50e      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff84:	2280      	movs	r2, #128	; 0x80
 800ff86:	6800      	ldr	r0, [r0, #0]
 800ff88:	01d2      	lsls	r2, r2, #7
 800ff8a:	e593      	b.n	800fab4 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800ff8c:	2280      	movs	r2, #128	; 0x80
 800ff8e:	0392      	lsls	r2, r2, #14
 800ff90:	e5f9      	b.n	800fb86 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ff92:	2280      	movs	r2, #128	; 0x80
 800ff94:	0112      	lsls	r2, r2, #4
 800ff96:	e542      	b.n	800fa1e <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ff98:	2280      	movs	r2, #128	; 0x80
 800ff9a:	00d2      	lsls	r2, r2, #3
 800ff9c:	e7bc      	b.n	800ff18 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ff9e:	2280      	movs	r2, #128	; 0x80
 800ffa0:	0112      	lsls	r2, r2, #4
 800ffa2:	e6e5      	b.n	800fd70 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ffa4:	2280      	movs	r2, #128	; 0x80
 800ffa6:	00d2      	lsls	r2, r2, #3
 800ffa8:	e69a      	b.n	800fce0 <HAL_DMA_IRQHandler+0x42c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ffaa:	0132      	lsls	r2, r6, #4
 800ffac:	d500      	bpl.n	800ffb0 <HAL_DMA_IRQHandler+0x6fc>
 800ffae:	e4f8      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ffb0:	0019      	movs	r1, r3
 800ffb2:	6800      	ldr	r0, [r0, #0]
 800ffb4:	2280      	movs	r2, #128	; 0x80
 800ffb6:	04d2      	lsls	r2, r2, #19
 800ffb8:	e64f      	b.n	800fc5a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ffba:	0132      	lsls	r2, r6, #4
 800ffbc:	d500      	bpl.n	800ffc0 <HAL_DMA_IRQHandler+0x70c>
 800ffbe:	e4f0      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ffc0:	6800      	ldr	r0, [r0, #0]
 800ffc2:	2280      	movs	r2, #128	; 0x80
 800ffc4:	04d2      	lsls	r2, r2, #19
 800ffc6:	e575      	b.n	800fab4 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ffc8:	2380      	movs	r3, #128	; 0x80
 800ffca:	019b      	lsls	r3, r3, #6
 800ffcc:	e623      	b.n	800fc16 <HAL_DMA_IRQHandler+0x362>
 800ffce:	2380      	movs	r3, #128	; 0x80
 800ffd0:	019b      	lsls	r3, r3, #6
 800ffd2:	e750      	b.n	800fe76 <HAL_DMA_IRQHandler+0x5c2>
 800ffd4:	2302      	movs	r3, #2
 800ffd6:	e61e      	b.n	800fc16 <HAL_DMA_IRQHandler+0x362>
 800ffd8:	2302      	movs	r3, #2
 800ffda:	e74c      	b.n	800fe76 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ffdc:	2204      	movs	r2, #4
 800ffde:	e67f      	b.n	800fce0 <HAL_DMA_IRQHandler+0x42c>
 800ffe0:	2204      	movs	r2, #4
 800ffe2:	e799      	b.n	800ff18 <HAL_DMA_IRQHandler+0x664>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800ffe4:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ffe6:	4882      	ldr	r0, [pc, #520]	; (80101f0 <HAL_DMA_IRQHandler+0x93c>)
 800ffe8:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800ffea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ffec:	432a      	orrs	r2, r5
 800ffee:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fff0:	2221      	movs	r2, #33	; 0x21
 800fff2:	3503      	adds	r5, #3
 800fff4:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fff6:	2500      	movs	r5, #0
 800fff8:	3a01      	subs	r2, #1
 800fffa:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fffc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fffe:	2a00      	cmp	r2, #0
 8010000:	d000      	beq.n	8010004 <HAL_DMA_IRQHandler+0x750>
 8010002:	e6c4      	b.n	800fd8e <HAL_DMA_IRQHandler+0x4da>
 8010004:	e554      	b.n	800fab0 <HAL_DMA_IRQHandler+0x1fc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010006:	0332      	lsls	r2, r6, #12
 8010008:	d500      	bpl.n	801000c <HAL_DMA_IRQHandler+0x758>
 801000a:	e4ca      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801000c:	2280      	movs	r2, #128	; 0x80
 801000e:	6800      	ldr	r0, [r0, #0]
 8010010:	02d2      	lsls	r2, r2, #11
 8010012:	e54f      	b.n	800fab4 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010014:	0332      	lsls	r2, r6, #12
 8010016:	d500      	bpl.n	801001a <HAL_DMA_IRQHandler+0x766>
 8010018:	e4c3      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801001a:	2280      	movs	r2, #128	; 0x80
 801001c:	6800      	ldr	r0, [r0, #0]
 801001e:	0019      	movs	r1, r3
 8010020:	02d2      	lsls	r2, r2, #11
 8010022:	e61a      	b.n	800fc5a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010024:	2280      	movs	r2, #128	; 0x80
 8010026:	0492      	lsls	r2, r2, #18
 8010028:	e5ad      	b.n	800fb86 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801002a:	2320      	movs	r3, #32
 801002c:	e723      	b.n	800fe76 <HAL_DMA_IRQHandler+0x5c2>
 801002e:	2320      	movs	r3, #32
 8010030:	e5f1      	b.n	800fc16 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010032:	2240      	movs	r2, #64	; 0x40
 8010034:	e770      	b.n	800ff18 <HAL_DMA_IRQHandler+0x664>
 8010036:	2240      	movs	r2, #64	; 0x40
 8010038:	e652      	b.n	800fce0 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801003a:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801003c:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801003e:	486c      	ldr	r0, [pc, #432]	; (80101f0 <HAL_DMA_IRQHandler+0x93c>)
 8010040:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010042:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010044:	432a      	orrs	r2, r5
 8010046:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010048:	2221      	movs	r2, #33	; 0x21
 801004a:	3503      	adds	r5, #3
 801004c:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801004e:	2500      	movs	r5, #0
 8010050:	3a01      	subs	r2, #1
 8010052:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010054:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010056:	2a00      	cmp	r2, #0
 8010058:	d000      	beq.n	801005c <HAL_DMA_IRQHandler+0x7a8>
 801005a:	e698      	b.n	800fd8e <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801005c:	6800      	ldr	r0, [r0, #0]
 801005e:	e4f4      	b.n	800fa4a <HAL_DMA_IRQHandler+0x196>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010060:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010062:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010064:	4861      	ldr	r0, [pc, #388]	; (80101ec <HAL_DMA_IRQHandler+0x938>)
 8010066:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010068:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801006a:	432a      	orrs	r2, r5
 801006c:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801006e:	2221      	movs	r2, #33	; 0x21
 8010070:	3503      	adds	r5, #3
 8010072:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010074:	2500      	movs	r5, #0
 8010076:	3a01      	subs	r2, #1
 8010078:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801007a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801007c:	2a00      	cmp	r2, #0
 801007e:	d000      	beq.n	8010082 <HAL_DMA_IRQHandler+0x7ce>
 8010080:	e685      	b.n	800fd8e <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010082:	6800      	ldr	r0, [r0, #0]
 8010084:	e691      	b.n	800fdaa <HAL_DMA_IRQHandler+0x4f6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010086:	0232      	lsls	r2, r6, #8
 8010088:	d500      	bpl.n	801008c <HAL_DMA_IRQHandler+0x7d8>
 801008a:	e48a      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801008c:	0019      	movs	r1, r3
 801008e:	6800      	ldr	r0, [r0, #0]
 8010090:	2280      	movs	r2, #128	; 0x80
 8010092:	03d2      	lsls	r2, r2, #15
 8010094:	e5e1      	b.n	800fc5a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010096:	0232      	lsls	r2, r6, #8
 8010098:	d500      	bpl.n	801009c <HAL_DMA_IRQHandler+0x7e8>
 801009a:	e482      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801009c:	6800      	ldr	r0, [r0, #0]
 801009e:	2280      	movs	r2, #128	; 0x80
 80100a0:	03d2      	lsls	r2, r2, #15
 80100a2:	e507      	b.n	800fab4 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80100a4:	2380      	movs	r3, #128	; 0x80
 80100a6:	009b      	lsls	r3, r3, #2
 80100a8:	e6e5      	b.n	800fe76 <HAL_DMA_IRQHandler+0x5c2>
 80100aa:	2380      	movs	r3, #128	; 0x80
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	e5b2      	b.n	800fc16 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80100b0:	2280      	movs	r2, #128	; 0x80
 80100b2:	01d2      	lsls	r2, r2, #7
 80100b4:	e614      	b.n	800fce0 <HAL_DMA_IRQHandler+0x42c>
 80100b6:	2280      	movs	r2, #128	; 0x80
 80100b8:	01d2      	lsls	r2, r2, #7
 80100ba:	e72d      	b.n	800ff18 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80100bc:	2280      	movs	r2, #128	; 0x80
 80100be:	0212      	lsls	r2, r2, #8
 80100c0:	e4ad      	b.n	800fa1e <HAL_DMA_IRQHandler+0x16a>
 80100c2:	2280      	movs	r2, #128	; 0x80
 80100c4:	0212      	lsls	r2, r2, #8
 80100c6:	e653      	b.n	800fd70 <HAL_DMA_IRQHandler+0x4bc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80100c8:	0732      	lsls	r2, r6, #28
 80100ca:	d500      	bpl.n	80100ce <HAL_DMA_IRQHandler+0x81a>
 80100cc:	e469      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80100ce:	4a47      	ldr	r2, [pc, #284]	; (80101ec <HAL_DMA_IRQHandler+0x938>)
 80100d0:	6810      	ldr	r0, [r2, #0]
 80100d2:	2204      	movs	r2, #4
 80100d4:	e5c1      	b.n	800fc5a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80100d6:	0732      	lsls	r2, r6, #28
 80100d8:	d500      	bpl.n	80100dc <HAL_DMA_IRQHandler+0x828>
 80100da:	e462      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80100dc:	4a44      	ldr	r2, [pc, #272]	; (80101f0 <HAL_DMA_IRQHandler+0x93c>)
 80100de:	493f      	ldr	r1, [pc, #252]	; (80101dc <HAL_DMA_IRQHandler+0x928>)
 80100e0:	6810      	ldr	r0, [r2, #0]
 80100e2:	2204      	movs	r2, #4
 80100e4:	e4e6      	b.n	800fab4 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80100e6:	2380      	movs	r3, #128	; 0x80
 80100e8:	029b      	lsls	r3, r3, #10
 80100ea:	e6c4      	b.n	800fe76 <HAL_DMA_IRQHandler+0x5c2>
 80100ec:	2380      	movs	r3, #128	; 0x80
 80100ee:	029b      	lsls	r3, r3, #10
 80100f0:	e591      	b.n	800fc16 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80100f2:	2280      	movs	r2, #128	; 0x80
 80100f4:	0312      	lsls	r2, r2, #12
 80100f6:	e63b      	b.n	800fd70 <HAL_DMA_IRQHandler+0x4bc>
 80100f8:	2280      	movs	r2, #128	; 0x80
 80100fa:	0312      	lsls	r2, r2, #12
 80100fc:	e48f      	b.n	800fa1e <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80100fe:	2280      	movs	r2, #128	; 0x80
 8010100:	02d2      	lsls	r2, r2, #11
 8010102:	e5ed      	b.n	800fce0 <HAL_DMA_IRQHandler+0x42c>
 8010104:	2280      	movs	r2, #128	; 0x80
 8010106:	02d2      	lsls	r2, r2, #11
 8010108:	e706      	b.n	800ff18 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801010a:	0632      	lsls	r2, r6, #24
 801010c:	d500      	bpl.n	8010110 <HAL_DMA_IRQHandler+0x85c>
 801010e:	e448      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010110:	4a36      	ldr	r2, [pc, #216]	; (80101ec <HAL_DMA_IRQHandler+0x938>)
 8010112:	6810      	ldr	r0, [r2, #0]
 8010114:	2240      	movs	r2, #64	; 0x40
 8010116:	e5a0      	b.n	800fc5a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010118:	0632      	lsls	r2, r6, #24
 801011a:	d500      	bpl.n	801011e <HAL_DMA_IRQHandler+0x86a>
 801011c:	e441      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801011e:	4a34      	ldr	r2, [pc, #208]	; (80101f0 <HAL_DMA_IRQHandler+0x93c>)
 8010120:	492f      	ldr	r1, [pc, #188]	; (80101e0 <HAL_DMA_IRQHandler+0x92c>)
 8010122:	6810      	ldr	r0, [r2, #0]
 8010124:	2240      	movs	r2, #64	; 0x40
 8010126:	e4c5      	b.n	800fab4 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010128:	2380      	movs	r3, #128	; 0x80
 801012a:	039b      	lsls	r3, r3, #14
 801012c:	e6a3      	b.n	800fe76 <HAL_DMA_IRQHandler+0x5c2>
 801012e:	2380      	movs	r3, #128	; 0x80
 8010130:	039b      	lsls	r3, r3, #14
 8010132:	e570      	b.n	800fc16 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010134:	2280      	movs	r2, #128	; 0x80
 8010136:	0412      	lsls	r2, r2, #16
 8010138:	e471      	b.n	800fa1e <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801013a:	2280      	movs	r2, #128	; 0x80
 801013c:	03d2      	lsls	r2, r2, #15
 801013e:	e5cf      	b.n	800fce0 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010140:	2280      	movs	r2, #128	; 0x80
 8010142:	0412      	lsls	r2, r2, #16
 8010144:	e614      	b.n	800fd70 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010146:	2280      	movs	r2, #128	; 0x80
 8010148:	03d2      	lsls	r2, r2, #15
 801014a:	e6e5      	b.n	800ff18 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801014c:	0532      	lsls	r2, r6, #20
 801014e:	d500      	bpl.n	8010152 <HAL_DMA_IRQHandler+0x89e>
 8010150:	e427      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010152:	4a26      	ldr	r2, [pc, #152]	; (80101ec <HAL_DMA_IRQHandler+0x938>)
 8010154:	6810      	ldr	r0, [r2, #0]
 8010156:	2280      	movs	r2, #128	; 0x80
 8010158:	00d2      	lsls	r2, r2, #3
 801015a:	e57e      	b.n	800fc5a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801015c:	0532      	lsls	r2, r6, #20
 801015e:	d500      	bpl.n	8010162 <HAL_DMA_IRQHandler+0x8ae>
 8010160:	e41f      	b.n	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010162:	4a23      	ldr	r2, [pc, #140]	; (80101f0 <HAL_DMA_IRQHandler+0x93c>)
 8010164:	0019      	movs	r1, r3
 8010166:	6810      	ldr	r0, [r2, #0]
 8010168:	2280      	movs	r2, #128	; 0x80
 801016a:	00d2      	lsls	r2, r2, #3
 801016c:	e4a2      	b.n	800fab4 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801016e:	2380      	movs	r3, #128	; 0x80
 8010170:	049b      	lsls	r3, r3, #18
 8010172:	e550      	b.n	800fc16 <HAL_DMA_IRQHandler+0x362>
 8010174:	2380      	movs	r3, #128	; 0x80
 8010176:	049b      	lsls	r3, r3, #18
 8010178:	e67d      	b.n	800fe76 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801017a:	2280      	movs	r2, #128	; 0x80
 801017c:	04d2      	lsls	r2, r2, #19
 801017e:	e5af      	b.n	800fce0 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010180:	2280      	movs	r2, #128	; 0x80
 8010182:	0512      	lsls	r2, r2, #20
 8010184:	e5f4      	b.n	800fd70 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010186:	2280      	movs	r2, #128	; 0x80
 8010188:	04d2      	lsls	r2, r2, #19
 801018a:	e6c5      	b.n	800ff18 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801018c:	2280      	movs	r2, #128	; 0x80
 801018e:	0512      	lsls	r2, r2, #20
 8010190:	e445      	b.n	800fa1e <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010192:	0432      	lsls	r2, r6, #16
 8010194:	d501      	bpl.n	801019a <HAL_DMA_IRQHandler+0x8e6>
 8010196:	f7ff fc04 	bl	800f9a2 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801019a:	0019      	movs	r1, r3
 801019c:	4a14      	ldr	r2, [pc, #80]	; (80101f0 <HAL_DMA_IRQHandler+0x93c>)
 801019e:	6810      	ldr	r0, [r2, #0]
 80101a0:	2280      	movs	r2, #128	; 0x80
 80101a2:	01d2      	lsls	r2, r2, #7
 80101a4:	e486      	b.n	800fab4 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80101a6:	2208      	movs	r2, #8
 80101a8:	e5e2      	b.n	800fd70 <HAL_DMA_IRQHandler+0x4bc>
 80101aa:	2208      	movs	r2, #8
 80101ac:	e437      	b.n	800fa1e <HAL_DMA_IRQHandler+0x16a>
 80101ae:	2280      	movs	r2, #128	; 0x80
 80101b0:	e5de      	b.n	800fd70 <HAL_DMA_IRQHandler+0x4bc>
 80101b2:	2280      	movs	r2, #128	; 0x80
 80101b4:	e433      	b.n	800fa1e <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80101b6:	6800      	ldr	r0, [r0, #0]
 80101b8:	0019      	movs	r1, r3
 80101ba:	2204      	movs	r2, #4
 80101bc:	e54d      	b.n	800fc5a <HAL_DMA_IRQHandler+0x3a6>
 80101be:	2280      	movs	r2, #128	; 0x80
 80101c0:	00d2      	lsls	r2, r2, #3
 80101c2:	e477      	b.n	800fab4 <HAL_DMA_IRQHandler+0x200>
 80101c4:	40020008 	.word	0x40020008
 80101c8:	4002001c 	.word	0x4002001c
 80101cc:	40020030 	.word	0x40020030
 80101d0:	40020044 	.word	0x40020044
 80101d4:	40020058 	.word	0x40020058
 80101d8:	4002006c 	.word	0x4002006c
 80101dc:	40020408 	.word	0x40020408
 80101e0:	4002041c 	.word	0x4002041c
 80101e4:	40020430 	.word	0x40020430
 80101e8:	bffdfbbc 	.word	0xbffdfbbc
 80101ec:	40020000 	.word	0x40020000
 80101f0:	40020400 	.word	0x40020400

080101f4 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80101f4:	4b05      	ldr	r3, [pc, #20]	; (801020c <HAL_FLASH_Unlock+0x18>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
  }
  else
  {
    return HAL_ERROR;
 80101f6:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80101f8:	691a      	ldr	r2, [r3, #16]
 80101fa:	0612      	lsls	r2, r2, #24
 80101fc:	d504      	bpl.n	8010208 <HAL_FLASH_Unlock+0x14>
  }

  return HAL_OK; 
 80101fe:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010200:	4a03      	ldr	r2, [pc, #12]	; (8010210 <HAL_FLASH_Unlock+0x1c>)
 8010202:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010204:	4a03      	ldr	r2, [pc, #12]	; (8010214 <HAL_FLASH_Unlock+0x20>)
 8010206:	605a      	str	r2, [r3, #4]
}
 8010208:	4770      	bx	lr
 801020a:	46c0      	nop			; (mov r8, r8)
 801020c:	40022000 	.word	0x40022000
 8010210:	45670123 	.word	0x45670123
 8010214:	cdef89ab 	.word	0xcdef89ab

08010218 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010218:	2180      	movs	r1, #128	; 0x80
 801021a:	4a03      	ldr	r2, [pc, #12]	; (8010228 <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 801021c:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801021e:	6913      	ldr	r3, [r2, #16]
 8010220:	430b      	orrs	r3, r1
 8010222:	6113      	str	r3, [r2, #16]
}
 8010224:	4770      	bx	lr
 8010226:	46c0      	nop			; (mov r8, r8)
 8010228:	40022000 	.word	0x40022000

0801022c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801022c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801022e:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8010230:	f7fe fdfa 	bl	800ee28 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010234:	4c1d      	ldr	r4, [pc, #116]	; (80102ac <FLASH_WaitForLastOperation+0x80>)
  uint32_t tickstart = HAL_GetTick();
 8010236:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010238:	2601      	movs	r6, #1
 801023a:	e001      	b.n	8010240 <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 801023c:	1c6b      	adds	r3, r5, #1
 801023e:	d11d      	bne.n	801027c <FLASH_WaitForLastOperation+0x50>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010240:	68e3      	ldr	r3, [r4, #12]
 8010242:	421e      	tst	r6, r3
 8010244:	d1fa      	bne.n	801023c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010246:	2320      	movs	r3, #32
 8010248:	68e2      	ldr	r2, [r4, #12]
 801024a:	4213      	tst	r3, r2
 801024c:	d000      	beq.n	8010250 <FLASH_WaitForLastOperation+0x24>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801024e:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010250:	4b16      	ldr	r3, [pc, #88]	; (80102ac <FLASH_WaitForLastOperation+0x80>)
 8010252:	68da      	ldr	r2, [r3, #12]
 8010254:	06d2      	lsls	r2, r2, #27
 8010256:	d51a      	bpl.n	801028e <FLASH_WaitForLastOperation+0x62>
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010258:	4b14      	ldr	r3, [pc, #80]	; (80102ac <FLASH_WaitForLastOperation+0x80>)
 801025a:	68db      	ldr	r3, [r3, #12]
 801025c:	06db      	lsls	r3, r3, #27
 801025e:	d504      	bpl.n	801026a <FLASH_WaitForLastOperation+0x3e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010260:	2102      	movs	r1, #2
 8010262:	4a13      	ldr	r2, [pc, #76]	; (80102b0 <FLASH_WaitForLastOperation+0x84>)
 8010264:	69d3      	ldr	r3, [r2, #28]
 8010266:	430b      	orrs	r3, r1
 8010268:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801026a:	4b10      	ldr	r3, [pc, #64]	; (80102ac <FLASH_WaitForLastOperation+0x80>)
 801026c:	68db      	ldr	r3, [r3, #12]
 801026e:	075b      	lsls	r3, r3, #29
 8010270:	d416      	bmi.n	80102a0 <FLASH_WaitForLastOperation+0x74>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010272:	2214      	movs	r2, #20
    return HAL_ERROR;
 8010274:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010276:	4b0d      	ldr	r3, [pc, #52]	; (80102ac <FLASH_WaitForLastOperation+0x80>)
 8010278:	60da      	str	r2, [r3, #12]
}
 801027a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801027c:	2d00      	cmp	r5, #0
 801027e:	d004      	beq.n	801028a <FLASH_WaitForLastOperation+0x5e>
 8010280:	f7fe fdd2 	bl	800ee28 <HAL_GetTick>
 8010284:	1bc0      	subs	r0, r0, r7
 8010286:	42a8      	cmp	r0, r5
 8010288:	d9da      	bls.n	8010240 <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 801028a:	2003      	movs	r0, #3
 801028c:	e7f5      	b.n	801027a <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801028e:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8010290:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010292:	075b      	lsls	r3, r3, #29
 8010294:	d5f1      	bpl.n	801027a <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010296:	4b05      	ldr	r3, [pc, #20]	; (80102ac <FLASH_WaitForLastOperation+0x80>)
 8010298:	68db      	ldr	r3, [r3, #12]
 801029a:	06db      	lsls	r3, r3, #27
 801029c:	d5e5      	bpl.n	801026a <FLASH_WaitForLastOperation+0x3e>
 801029e:	e7df      	b.n	8010260 <FLASH_WaitForLastOperation+0x34>
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80102a0:	2101      	movs	r1, #1
 80102a2:	4a03      	ldr	r2, [pc, #12]	; (80102b0 <FLASH_WaitForLastOperation+0x84>)
 80102a4:	69d3      	ldr	r3, [r2, #28]
 80102a6:	430b      	orrs	r3, r1
 80102a8:	61d3      	str	r3, [r2, #28]
 80102aa:	e7e2      	b.n	8010272 <FLASH_WaitForLastOperation+0x46>
 80102ac:	40022000 	.word	0x40022000
 80102b0:	20006da8 	.word	0x20006da8

080102b4 <HAL_FLASH_Program>:
{
 80102b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102b6:	464e      	mov	r6, r9
 80102b8:	4657      	mov	r7, sl
 80102ba:	46de      	mov	lr, fp
 80102bc:	4645      	mov	r5, r8
 80102be:	b5e0      	push	{r5, r6, r7, lr}
 80102c0:	469a      	mov	sl, r3
 80102c2:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 80102c4:	4b2a      	ldr	r3, [pc, #168]	; (8010370 <HAL_FLASH_Program+0xbc>)
{
 80102c6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 80102c8:	4699      	mov	r9, r3
 80102ca:	7e1b      	ldrb	r3, [r3, #24]
{
 80102cc:	0004      	movs	r4, r0
 80102ce:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d048      	beq.n	8010366 <HAL_FLASH_Program+0xb2>
 80102d4:	2501      	movs	r5, #1
 80102d6:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80102d8:	4826      	ldr	r0, [pc, #152]	; (8010374 <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 80102da:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80102dc:	f7ff ffa6 	bl	801022c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80102e0:	2800      	cmp	r0, #0
 80102e2:	d136      	bne.n	8010352 <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80102e4:	2c01      	cmp	r4, #1
 80102e6:	d040      	beq.n	801036a <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 80102e8:	3c02      	subs	r4, #2
 80102ea:	4263      	negs	r3, r4
 80102ec:	415c      	adcs	r4, r3
 80102ee:	2304      	movs	r3, #4
 80102f0:	4264      	negs	r4, r4
 80102f2:	43ac      	bics	r4, r5
 80102f4:	46a0      	mov	r8, r4
 80102f6:	469c      	mov	ip, r3
 80102f8:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80102fa:	2300      	movs	r3, #0
      nbiterations = 4;
 80102fc:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80102fe:	469b      	mov	fp, r3
 8010300:	e018      	b.n	8010334 <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010302:	4653      	mov	r3, sl
 8010304:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010306:	464a      	mov	r2, r9
 8010308:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801030a:	2701      	movs	r7, #1
 801030c:	4c1a      	ldr	r4, [pc, #104]	; (8010378 <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801030e:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010310:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010312:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010314:	433a      	orrs	r2, r7
 8010316:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010318:	4816      	ldr	r0, [pc, #88]	; (8010374 <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 801031a:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801031c:	f7ff ff86 	bl	801022c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8010320:	6923      	ldr	r3, [r4, #16]
 8010322:	43bb      	bics	r3, r7
 8010324:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010326:	2800      	cmp	r0, #0
 8010328:	d113      	bne.n	8010352 <HAL_FLASH_Program+0x9e>
 801032a:	3501      	adds	r5, #1
    for (index = 0; index < nbiterations; index++)
 801032c:	b2eb      	uxtb	r3, r5
 801032e:	3602      	adds	r6, #2
 8010330:	4598      	cmp	r8, r3
 8010332:	d90e      	bls.n	8010352 <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010334:	2220      	movs	r2, #32
 8010336:	012b      	lsls	r3, r5, #4
 8010338:	4252      	negs	r2, r2
 801033a:	189a      	adds	r2, r3, r2
 801033c:	d5e1      	bpl.n	8010302 <HAL_FLASH_Program+0x4e>
 801033e:	2220      	movs	r2, #32
 8010340:	4651      	mov	r1, sl
 8010342:	1ad2      	subs	r2, r2, r3
 8010344:	4091      	lsls	r1, r2
 8010346:	000a      	movs	r2, r1
 8010348:	9901      	ldr	r1, [sp, #4]
 801034a:	40d9      	lsrs	r1, r3
 801034c:	000b      	movs	r3, r1
 801034e:	4313      	orrs	r3, r2
 8010350:	e7d9      	b.n	8010306 <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 8010352:	2300      	movs	r3, #0
 8010354:	464a      	mov	r2, r9
 8010356:	7613      	strb	r3, [r2, #24]
}
 8010358:	b003      	add	sp, #12
 801035a:	bc3c      	pop	{r2, r3, r4, r5}
 801035c:	4690      	mov	r8, r2
 801035e:	4699      	mov	r9, r3
 8010360:	46a2      	mov	sl, r4
 8010362:	46ab      	mov	fp, r5
 8010364:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8010366:	2002      	movs	r0, #2
 8010368:	e7f6      	b.n	8010358 <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 801036a:	2301      	movs	r3, #1
 801036c:	4698      	mov	r8, r3
 801036e:	e7c4      	b.n	80102fa <HAL_FLASH_Program+0x46>
 8010370:	20006da8 	.word	0x20006da8
 8010374:	0000c350 	.word	0x0000c350
 8010378:	40022000 	.word	0x40022000

0801037c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801037c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801037e:	464f      	mov	r7, r9
 8010380:	4646      	mov	r6, r8
 8010382:	46d6      	mov	lr, sl
 8010384:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010386:	4f30      	ldr	r7, [pc, #192]	; (8010448 <HAL_FLASHEx_Erase+0xcc>)
{
 8010388:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 801038a:	7e3b      	ldrb	r3, [r7, #24]
{
 801038c:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 801038e:	2b01      	cmp	r3, #1
 8010390:	d057      	beq.n	8010442 <HAL_FLASHEx_Erase+0xc6>
 8010392:	2301      	movs	r3, #1
 8010394:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010396:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010398:	482c      	ldr	r0, [pc, #176]	; (801044c <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801039a:	2b01      	cmp	r3, #1
 801039c:	d034      	beq.n	8010408 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801039e:	f7ff ff45 	bl	801022c <FLASH_WaitForLastOperation>
 80103a2:	2800      	cmp	r0, #0
 80103a4:	d134      	bne.n	8010410 <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 80103a6:	2301      	movs	r3, #1
 80103a8:	464a      	mov	r2, r9
 80103aa:	425b      	negs	r3, r3
 80103ac:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80103ae:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 80103b0:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80103b2:	02db      	lsls	r3, r3, #11
 80103b4:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 80103b6:	429d      	cmp	r5, r3
 80103b8:	d22a      	bcs.n	8010410 <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80103ba:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80103bc:	4c24      	ldr	r4, [pc, #144]	; (8010450 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80103be:	4698      	mov	r8, r3
 80103c0:	e00a      	b.n	80103d8 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 80103c2:	2380      	movs	r3, #128	; 0x80
 80103c4:	011b      	lsls	r3, r3, #4
 80103c6:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80103c8:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 80103ca:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80103cc:	4694      	mov	ip, r2
 80103ce:	68b3      	ldr	r3, [r6, #8]
 80103d0:	02db      	lsls	r3, r3, #11
 80103d2:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 80103d4:	42ab      	cmp	r3, r5
 80103d6:	d91c      	bls.n	8010412 <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80103d8:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80103da:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80103dc:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80103de:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80103e0:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80103e2:	481a      	ldr	r0, [pc, #104]	; (801044c <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80103e4:	4313      	orrs	r3, r2
 80103e6:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80103e8:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80103ea:	6923      	ldr	r3, [r4, #16]
 80103ec:	323e      	adds	r2, #62	; 0x3e
 80103ee:	4313      	orrs	r3, r2
 80103f0:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80103f2:	f7ff ff1b 	bl	801022c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80103f6:	4652      	mov	r2, sl
 80103f8:	6923      	ldr	r3, [r4, #16]
 80103fa:	4393      	bics	r3, r2
 80103fc:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80103fe:	2800      	cmp	r0, #0
 8010400:	d0df      	beq.n	80103c2 <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 8010402:	464b      	mov	r3, r9
 8010404:	601d      	str	r5, [r3, #0]
            break;
 8010406:	e004      	b.n	8010412 <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010408:	f7ff ff10 	bl	801022c <FLASH_WaitForLastOperation>
 801040c:	2800      	cmp	r0, #0
 801040e:	d007      	beq.n	8010420 <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010410:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8010412:	2300      	movs	r3, #0
 8010414:	763b      	strb	r3, [r7, #24]
}
 8010416:	bc1c      	pop	{r2, r3, r4}
 8010418:	4690      	mov	r8, r2
 801041a:	4699      	mov	r9, r3
 801041c:	46a2      	mov	sl, r4
 801041e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010420:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010422:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010424:	4c0a      	ldr	r4, [pc, #40]	; (8010450 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010426:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010428:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801042a:	4808      	ldr	r0, [pc, #32]	; (801044c <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 801042c:	432b      	orrs	r3, r5
 801042e:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010430:	6923      	ldr	r3, [r4, #16]
 8010432:	4313      	orrs	r3, r2
 8010434:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010436:	f7ff fef9 	bl	801022c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 801043a:	6923      	ldr	r3, [r4, #16]
 801043c:	43ab      	bics	r3, r5
 801043e:	6123      	str	r3, [r4, #16]
 8010440:	e7e7      	b.n	8010412 <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 8010442:	2002      	movs	r0, #2
 8010444:	e7e7      	b.n	8010416 <HAL_FLASHEx_Erase+0x9a>
 8010446:	46c0      	nop			; (mov r8, r8)
 8010448:	20006da8 	.word	0x20006da8
 801044c:	0000c350 	.word	0x0000c350
 8010450:	40022000 	.word	0x40022000

08010454 <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010454:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010456:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010458:	4b05      	ldr	r3, [pc, #20]	; (8010470 <FLASH_PageErase+0x1c>)
 801045a:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801045c:	4b05      	ldr	r3, [pc, #20]	; (8010474 <FLASH_PageErase+0x20>)
 801045e:	691a      	ldr	r2, [r3, #16]
 8010460:	430a      	orrs	r2, r1
 8010462:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010464:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010466:	691a      	ldr	r2, [r3, #16]
 8010468:	313e      	adds	r1, #62	; 0x3e
 801046a:	430a      	orrs	r2, r1
 801046c:	611a      	str	r2, [r3, #16]
}
 801046e:	4770      	bx	lr
 8010470:	20006da8 	.word	0x20006da8
 8010474:	40022000 	.word	0x40022000

08010478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8010478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801047a:	464e      	mov	r6, r9
 801047c:	46de      	mov	lr, fp
 801047e:	4657      	mov	r7, sl
 8010480:	4645      	mov	r5, r8
 8010482:	b5e0      	push	{r5, r6, r7, lr}
 8010484:	4689      	mov	r9, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8010486:	6809      	ldr	r1, [r1, #0]
{ 
 8010488:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 801048a:	2900      	cmp	r1, #0
 801048c:	d100      	bne.n	8010490 <HAL_GPIO_Init+0x18>
 801048e:	e080      	b.n	8010592 <HAL_GPIO_Init+0x11a>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010490:	4b70      	ldr	r3, [pc, #448]	; (8010654 <HAL_GPIO_Init+0x1dc>)
  uint32_t position = 0x00;
 8010492:	2400      	movs	r4, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010494:	469b      	mov	fp, r3
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010496:	4b70      	ldr	r3, [pc, #448]	; (8010658 <HAL_GPIO_Init+0x1e0>)
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010498:	2601      	movs	r6, #1
        temp = EXTI->IMR;
 801049a:	4698      	mov	r8, r3
 801049c:	468a      	mov	sl, r1
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 801049e:	0033      	movs	r3, r6
 80104a0:	4652      	mov	r2, sl
 80104a2:	40a3      	lsls	r3, r4
 80104a4:	4013      	ands	r3, r2
 80104a6:	9300      	str	r3, [sp, #0]
    if(iocurrent)
 80104a8:	d06f      	beq.n	801058a <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80104aa:	464b      	mov	r3, r9
 80104ac:	6859      	ldr	r1, [r3, #4]
 80104ae:	2310      	movs	r3, #16
 80104b0:	000f      	movs	r7, r1
 80104b2:	439f      	bics	r7, r3
 80104b4:	003b      	movs	r3, r7
 80104b6:	9701      	str	r7, [sp, #4]
 80104b8:	2f02      	cmp	r7, #2
 80104ba:	d100      	bne.n	80104be <HAL_GPIO_Init+0x46>
 80104bc:	e070      	b.n	80105a0 <HAL_GPIO_Init+0x128>
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80104be:	2203      	movs	r2, #3
 80104c0:	0065      	lsls	r5, r4, #1
 80104c2:	40aa      	lsls	r2, r5
 80104c4:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 80104c6:	6803      	ldr	r3, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80104c8:	4013      	ands	r3, r2
 80104ca:	001f      	movs	r7, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80104cc:	2303      	movs	r3, #3
 80104ce:	400b      	ands	r3, r1
 80104d0:	40ab      	lsls	r3, r5
 80104d2:	469c      	mov	ip, r3
 80104d4:	003b      	movs	r3, r7
 80104d6:	4667      	mov	r7, ip
 80104d8:	433b      	orrs	r3, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80104da:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 80104dc:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80104de:	3f01      	subs	r7, #1
 80104e0:	2f01      	cmp	r7, #1
 80104e2:	d800      	bhi.n	80104e6 <HAL_GPIO_Init+0x6e>
 80104e4:	e079      	b.n	80105da <HAL_GPIO_Init+0x162>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80104e6:	464b      	mov	r3, r9
      temp = GPIOx->PUPDR;
 80104e8:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80104ea:	403a      	ands	r2, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80104ec:	689f      	ldr	r7, [r3, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80104ee:	2380      	movs	r3, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80104f0:	40af      	lsls	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80104f2:	055b      	lsls	r3, r3, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80104f4:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 80104f6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80104f8:	4219      	tst	r1, r3
 80104fa:	d046      	beq.n	801058a <HAL_GPIO_Init+0x112>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80104fc:	465b      	mov	r3, fp
 80104fe:	699a      	ldr	r2, [r3, #24]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010500:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010502:	4332      	orrs	r2, r6
 8010504:	619a      	str	r2, [r3, #24]
 8010506:	699a      	ldr	r2, [r3, #24]
 8010508:	4b54      	ldr	r3, [pc, #336]	; (801065c <HAL_GPIO_Init+0x1e4>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801050a:	4027      	ands	r7, r4
 801050c:	469c      	mov	ip, r3
 801050e:	230f      	movs	r3, #15
 8010510:	00bf      	lsls	r7, r7, #2
 8010512:	40bb      	lsls	r3, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010514:	4032      	ands	r2, r6
 8010516:	9203      	str	r2, [sp, #12]
 8010518:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 801051a:	08a2      	lsrs	r2, r4, #2
 801051c:	0092      	lsls	r2, r2, #2
 801051e:	4462      	add	r2, ip
 8010520:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010522:	439d      	bics	r5, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010524:	2390      	movs	r3, #144	; 0x90
 8010526:	05db      	lsls	r3, r3, #23
 8010528:	4298      	cmp	r0, r3
 801052a:	d012      	beq.n	8010552 <HAL_GPIO_Init+0xda>
 801052c:	4b4c      	ldr	r3, [pc, #304]	; (8010660 <HAL_GPIO_Init+0x1e8>)
 801052e:	4298      	cmp	r0, r3
 8010530:	d100      	bne.n	8010534 <HAL_GPIO_Init+0xbc>
 8010532:	e083      	b.n	801063c <HAL_GPIO_Init+0x1c4>
 8010534:	4b4b      	ldr	r3, [pc, #300]	; (8010664 <HAL_GPIO_Init+0x1ec>)
 8010536:	4298      	cmp	r0, r3
 8010538:	d100      	bne.n	801053c <HAL_GPIO_Init+0xc4>
 801053a:	e07b      	b.n	8010634 <HAL_GPIO_Init+0x1bc>
 801053c:	4b4a      	ldr	r3, [pc, #296]	; (8010668 <HAL_GPIO_Init+0x1f0>)
 801053e:	4298      	cmp	r0, r3
 8010540:	d100      	bne.n	8010544 <HAL_GPIO_Init+0xcc>
 8010542:	e07f      	b.n	8010644 <HAL_GPIO_Init+0x1cc>
 8010544:	4b49      	ldr	r3, [pc, #292]	; (801066c <HAL_GPIO_Init+0x1f4>)
 8010546:	4298      	cmp	r0, r3
 8010548:	d100      	bne.n	801054c <HAL_GPIO_Init+0xd4>
 801054a:	e07f      	b.n	801064c <HAL_GPIO_Init+0x1d4>
 801054c:	2305      	movs	r3, #5
 801054e:	40bb      	lsls	r3, r7
 8010550:	431d      	orrs	r5, r3
        temp = EXTI->IMR;
 8010552:	4643      	mov	r3, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 8010554:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8010556:	681a      	ldr	r2, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010558:	9b00      	ldr	r3, [sp, #0]
 801055a:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801055c:	03cb      	lsls	r3, r1, #15
 801055e:	d451      	bmi.n	8010604 <HAL_GPIO_Init+0x18c>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8010560:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010562:	402a      	ands	r2, r5
        EXTI->IMR = temp;
 8010564:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8010566:	685a      	ldr	r2, [r3, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010568:	038b      	lsls	r3, r1, #14
 801056a:	d452      	bmi.n	8010612 <HAL_GPIO_Init+0x19a>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 801056c:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 801056e:	402a      	ands	r2, r5
        EXTI->EMR = temp;
 8010570:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010572:	689a      	ldr	r2, [r3, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010574:	02cb      	lsls	r3, r1, #11
 8010576:	d453      	bmi.n	8010620 <HAL_GPIO_Init+0x1a8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8010578:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 801057a:	402a      	ands	r2, r5
        EXTI->RTSR = temp;
 801057c:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 801057e:	68da      	ldr	r2, [r3, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010580:	028b      	lsls	r3, r1, #10
 8010582:	d454      	bmi.n	801062e <HAL_GPIO_Init+0x1b6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010584:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8010586:	4643      	mov	r3, r8
 8010588:	60da      	str	r2, [r3, #12]
  while ((GPIO_Init->Pin) >> position)
 801058a:	4653      	mov	r3, sl
      }
    }
    
    position++;
 801058c:	3401      	adds	r4, #1
  while ((GPIO_Init->Pin) >> position)
 801058e:	40e3      	lsrs	r3, r4
 8010590:	d185      	bne.n	801049e <HAL_GPIO_Init+0x26>
  } 
}
 8010592:	b005      	add	sp, #20
 8010594:	bc3c      	pop	{r2, r3, r4, r5}
 8010596:	4690      	mov	r8, r2
 8010598:	4699      	mov	r9, r3
 801059a:	46a2      	mov	sl, r4
 801059c:	46ab      	mov	fp, r5
 801059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 80105a0:	2507      	movs	r5, #7
 80105a2:	4025      	ands	r5, r4
 80105a4:	00ad      	lsls	r5, r5, #2
 80105a6:	330d      	adds	r3, #13
 80105a8:	40ab      	lsls	r3, r5
        temp = GPIOx->AFR[position >> 3];
 80105aa:	08e2      	lsrs	r2, r4, #3
 80105ac:	0092      	lsls	r2, r2, #2
 80105ae:	1882      	adds	r2, r0, r2
 80105b0:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 80105b2:	439f      	bics	r7, r3
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 80105b4:	464b      	mov	r3, r9
 80105b6:	691b      	ldr	r3, [r3, #16]
 80105b8:	40ab      	lsls	r3, r5
 80105ba:	001d      	movs	r5, r3
 80105bc:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 80105be:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80105c0:	2203      	movs	r2, #3
 80105c2:	0065      	lsls	r5, r4, #1
 80105c4:	40aa      	lsls	r2, r5
 80105c6:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 80105c8:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80105ca:	4017      	ands	r7, r2
 80105cc:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80105ce:	2703      	movs	r7, #3
 80105d0:	400f      	ands	r7, r1
 80105d2:	40af      	lsls	r7, r5
 80105d4:	4663      	mov	r3, ip
 80105d6:	431f      	orrs	r7, r3
      GPIOx->MODER = temp;
 80105d8:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80105da:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80105dc:	464b      	mov	r3, r9
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80105de:	4017      	ands	r7, r2
 80105e0:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80105e2:	68df      	ldr	r7, [r3, #12]
 80105e4:	4663      	mov	r3, ip
 80105e6:	40af      	lsls	r7, r5
 80105e8:	431f      	orrs	r7, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80105ea:	0033      	movs	r3, r6
 80105ec:	40a3      	lsls	r3, r4
        GPIOx->OSPEEDR = temp;
 80105ee:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80105f0:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80105f2:	439f      	bics	r7, r3
 80105f4:	46bc      	mov	ip, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80105f6:	090f      	lsrs	r7, r1, #4
 80105f8:	4037      	ands	r7, r6
 80105fa:	40a7      	lsls	r7, r4
 80105fc:	4663      	mov	r3, ip
 80105fe:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8010600:	6047      	str	r7, [r0, #4]
 8010602:	e770      	b.n	80104e6 <HAL_GPIO_Init+0x6e>
          SET_BIT(temp, iocurrent); 
 8010604:	9b00      	ldr	r3, [sp, #0]
 8010606:	431a      	orrs	r2, r3
        EXTI->IMR = temp;
 8010608:	4643      	mov	r3, r8
 801060a:	601a      	str	r2, [r3, #0]
        temp = EXTI->EMR;
 801060c:	685a      	ldr	r2, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801060e:	038b      	lsls	r3, r1, #14
 8010610:	d5ac      	bpl.n	801056c <HAL_GPIO_Init+0xf4>
          SET_BIT(temp, iocurrent); 
 8010612:	9b00      	ldr	r3, [sp, #0]
 8010614:	431a      	orrs	r2, r3
        EXTI->EMR = temp;
 8010616:	4643      	mov	r3, r8
 8010618:	605a      	str	r2, [r3, #4]
        temp = EXTI->RTSR;
 801061a:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801061c:	02cb      	lsls	r3, r1, #11
 801061e:	d5ab      	bpl.n	8010578 <HAL_GPIO_Init+0x100>
          SET_BIT(temp, iocurrent); 
 8010620:	9b00      	ldr	r3, [sp, #0]
 8010622:	431a      	orrs	r2, r3
        EXTI->RTSR = temp;
 8010624:	4643      	mov	r3, r8
 8010626:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 8010628:	68da      	ldr	r2, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801062a:	028b      	lsls	r3, r1, #10
 801062c:	d5aa      	bpl.n	8010584 <HAL_GPIO_Init+0x10c>
          SET_BIT(temp, iocurrent); 
 801062e:	9b00      	ldr	r3, [sp, #0]
 8010630:	431a      	orrs	r2, r3
 8010632:	e7a8      	b.n	8010586 <HAL_GPIO_Init+0x10e>
 8010634:	2302      	movs	r3, #2
 8010636:	40bb      	lsls	r3, r7
 8010638:	431d      	orrs	r5, r3
 801063a:	e78a      	b.n	8010552 <HAL_GPIO_Init+0xda>
 801063c:	0033      	movs	r3, r6
 801063e:	40bb      	lsls	r3, r7
 8010640:	431d      	orrs	r5, r3
 8010642:	e786      	b.n	8010552 <HAL_GPIO_Init+0xda>
 8010644:	2303      	movs	r3, #3
 8010646:	40bb      	lsls	r3, r7
 8010648:	431d      	orrs	r5, r3
 801064a:	e782      	b.n	8010552 <HAL_GPIO_Init+0xda>
 801064c:	2304      	movs	r3, #4
 801064e:	40bb      	lsls	r3, r7
 8010650:	431d      	orrs	r5, r3
 8010652:	e77e      	b.n	8010552 <HAL_GPIO_Init+0xda>
 8010654:	40021000 	.word	0x40021000
 8010658:	40010400 	.word	0x40010400
 801065c:	40010000 	.word	0x40010000
 8010660:	48000400 	.word	0x48000400
 8010664:	48000800 	.word	0x48000800
 8010668:	48000c00 	.word	0x48000c00
 801066c:	48001000 	.word	0x48001000

08010670 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010672:	46de      	mov	lr, fp
 8010674:	4657      	mov	r7, sl
 8010676:	464e      	mov	r6, r9
 8010678:	4645      	mov	r5, r8
 801067a:	b5e0      	push	{r5, r6, r7, lr}
 801067c:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 801067e:	2900      	cmp	r1, #0
 8010680:	d055      	beq.n	801072e <HAL_GPIO_DeInit+0xbe>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8010682:	2201      	movs	r2, #1
 8010684:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010686:	3202      	adds	r2, #2
 8010688:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801068a:	320c      	adds	r2, #12
  uint32_t position = 0x00;
 801068c:	2300      	movs	r3, #0
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801068e:	4691      	mov	r9, r2
    iocurrent = (GPIO_Pin) & (1 << position);
 8010690:	4666      	mov	r6, ip
 8010692:	000d      	movs	r5, r1
 8010694:	409e      	lsls	r6, r3
 8010696:	4035      	ands	r5, r6
    if (iocurrent)
 8010698:	d045      	beq.n	8010726 <HAL_GPIO_DeInit+0xb6>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 801069a:	4647      	mov	r7, r8
 801069c:	005c      	lsls	r4, r3, #1
 801069e:	40a7      	lsls	r7, r4
 80106a0:	43fc      	mvns	r4, r7
 80106a2:	6802      	ldr	r2, [r0, #0]
 80106a4:	4022      	ands	r2, r4
 80106a6:	6002      	str	r2, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80106a8:	08da      	lsrs	r2, r3, #3
 80106aa:	0092      	lsls	r2, r2, #2
 80106ac:	1887      	adds	r7, r0, r2
 80106ae:	9701      	str	r7, [sp, #4]
 80106b0:	6a3f      	ldr	r7, [r7, #32]
 80106b2:	46ba      	mov	sl, r7
 80106b4:	2707      	movs	r7, #7
 80106b6:	401f      	ands	r7, r3
 80106b8:	00bf      	lsls	r7, r7, #2
 80106ba:	46bb      	mov	fp, r7
 80106bc:	464f      	mov	r7, r9
 80106be:	465a      	mov	r2, fp
 80106c0:	4097      	lsls	r7, r2
 80106c2:	46bb      	mov	fp, r7
 80106c4:	4657      	mov	r7, sl
 80106c6:	465a      	mov	r2, fp
 80106c8:	4397      	bics	r7, r2
 80106ca:	003a      	movs	r2, r7
 80106cc:	9f01      	ldr	r7, [sp, #4]
 80106ce:	623a      	str	r2, [r7, #32]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80106d0:	6882      	ldr	r2, [r0, #8]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80106d2:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80106d4:	4022      	ands	r2, r4
 80106d6:	6082      	str	r2, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80106d8:	6842      	ldr	r2, [r0, #4]
 80106da:	43b2      	bics	r2, r6
 80106dc:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80106de:	68c2      	ldr	r2, [r0, #12]
 80106e0:	4014      	ands	r4, r2
 80106e2:	60c4      	str	r4, [r0, #12]
 80106e4:	4c2b      	ldr	r4, [pc, #172]	; (8010794 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2];
 80106e6:	089a      	lsrs	r2, r3, #2
 80106e8:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80106ea:	4644      	mov	r4, r8
 80106ec:	401c      	ands	r4, r3
 80106ee:	00a4      	lsls	r4, r4, #2
 80106f0:	40a7      	lsls	r7, r4
 80106f2:	0092      	lsls	r2, r2, #2
 80106f4:	4452      	add	r2, sl
      tmp = SYSCFG->EXTICR[position >> 2];
 80106f6:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80106f8:	46ba      	mov	sl, r7
 80106fa:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80106fc:	2790      	movs	r7, #144	; 0x90
 80106fe:	05ff      	lsls	r7, r7, #23
 8010700:	42b8      	cmp	r0, r7
 8010702:	d01b      	beq.n	801073c <HAL_GPIO_DeInit+0xcc>
 8010704:	4f24      	ldr	r7, [pc, #144]	; (8010798 <HAL_GPIO_DeInit+0x128>)
 8010706:	42b8      	cmp	r0, r7
 8010708:	d033      	beq.n	8010772 <HAL_GPIO_DeInit+0x102>
 801070a:	4f24      	ldr	r7, [pc, #144]	; (801079c <HAL_GPIO_DeInit+0x12c>)
 801070c:	42b8      	cmp	r0, r7
 801070e:	d038      	beq.n	8010782 <HAL_GPIO_DeInit+0x112>
 8010710:	4f23      	ldr	r7, [pc, #140]	; (80107a0 <HAL_GPIO_DeInit+0x130>)
 8010712:	42b8      	cmp	r0, r7
 8010714:	d039      	beq.n	801078a <HAL_GPIO_DeInit+0x11a>
 8010716:	4f23      	ldr	r7, [pc, #140]	; (80107a4 <HAL_GPIO_DeInit+0x134>)
 8010718:	42b8      	cmp	r0, r7
 801071a:	d02e      	beq.n	801077a <HAL_GPIO_DeInit+0x10a>
 801071c:	2705      	movs	r7, #5
 801071e:	40a7      	lsls	r7, r4
 8010720:	003c      	movs	r4, r7
 8010722:	42a6      	cmp	r6, r4
 8010724:	d00d      	beq.n	8010742 <HAL_GPIO_DeInit+0xd2>
  while (GPIO_Pin >> position)
 8010726:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8010728:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 801072a:	40da      	lsrs	r2, r3
 801072c:	d1b0      	bne.n	8010690 <HAL_GPIO_DeInit+0x20>
  }
}
 801072e:	b003      	add	sp, #12
 8010730:	bc3c      	pop	{r2, r3, r4, r5}
 8010732:	4690      	mov	r8, r2
 8010734:	4699      	mov	r9, r3
 8010736:	46a2      	mov	sl, r4
 8010738:	46ab      	mov	fp, r5
 801073a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801073c:	2400      	movs	r4, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 801073e:	42a6      	cmp	r6, r4
 8010740:	d1f1      	bne.n	8010726 <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010742:	4656      	mov	r6, sl
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010744:	43ed      	mvns	r5, r5
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010746:	6894      	ldr	r4, [r2, #8]
    position++;
 8010748:	3301      	adds	r3, #1
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 801074a:	43b4      	bics	r4, r6
 801074c:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 801074e:	4c16      	ldr	r4, [pc, #88]	; (80107a8 <HAL_GPIO_DeInit+0x138>)
 8010750:	6822      	ldr	r2, [r4, #0]
 8010752:	402a      	ands	r2, r5
 8010754:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8010756:	6862      	ldr	r2, [r4, #4]
 8010758:	402a      	ands	r2, r5
 801075a:	6062      	str	r2, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 801075c:	68a2      	ldr	r2, [r4, #8]
 801075e:	402a      	ands	r2, r5
 8010760:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010762:	68e2      	ldr	r2, [r4, #12]
 8010764:	4015      	ands	r5, r2
  while (GPIO_Pin >> position)
 8010766:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010768:	60e5      	str	r5, [r4, #12]
  while (GPIO_Pin >> position)
 801076a:	40da      	lsrs	r2, r3
 801076c:	d000      	beq.n	8010770 <HAL_GPIO_DeInit+0x100>
 801076e:	e78f      	b.n	8010690 <HAL_GPIO_DeInit+0x20>
 8010770:	e7dd      	b.n	801072e <HAL_GPIO_DeInit+0xbe>
 8010772:	4667      	mov	r7, ip
 8010774:	40a7      	lsls	r7, r4
 8010776:	003c      	movs	r4, r7
 8010778:	e7e1      	b.n	801073e <HAL_GPIO_DeInit+0xce>
 801077a:	2704      	movs	r7, #4
 801077c:	40a7      	lsls	r7, r4
 801077e:	003c      	movs	r4, r7
 8010780:	e7dd      	b.n	801073e <HAL_GPIO_DeInit+0xce>
 8010782:	2702      	movs	r7, #2
 8010784:	40a7      	lsls	r7, r4
 8010786:	003c      	movs	r4, r7
 8010788:	e7d9      	b.n	801073e <HAL_GPIO_DeInit+0xce>
 801078a:	4647      	mov	r7, r8
 801078c:	40a7      	lsls	r7, r4
 801078e:	003c      	movs	r4, r7
 8010790:	e7d5      	b.n	801073e <HAL_GPIO_DeInit+0xce>
 8010792:	46c0      	nop			; (mov r8, r8)
 8010794:	40010000 	.word	0x40010000
 8010798:	48000400 	.word	0x48000400
 801079c:	48000800 	.word	0x48000800
 80107a0:	48000c00 	.word	0x48000c00
 80107a4:	48001000 	.word	0x48001000
 80107a8:	40010400 	.word	0x40010400

080107ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80107ac:	6900      	ldr	r0, [r0, #16]
 80107ae:	4008      	ands	r0, r1
 80107b0:	1e41      	subs	r1, r0, #1
 80107b2:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80107b4:	b2c0      	uxtb	r0, r0
  }
 80107b6:	4770      	bx	lr

080107b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80107b8:	2a00      	cmp	r2, #0
 80107ba:	d101      	bne.n	80107c0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80107bc:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80107be:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80107c0:	6181      	str	r1, [r0, #24]
 80107c2:	e7fc      	b.n	80107be <HAL_GPIO_WritePin+0x6>

080107c4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80107c4:	6943      	ldr	r3, [r0, #20]
 80107c6:	4059      	eors	r1, r3
 80107c8:	6141      	str	r1, [r0, #20]
}
 80107ca:	4770      	bx	lr

080107cc <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 80107cc:	4770      	bx	lr
 80107ce:	46c0      	nop			; (mov r8, r8)

080107d0 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80107d0:	2380      	movs	r3, #128	; 0x80
 80107d2:	4a03      	ldr	r2, [pc, #12]	; (80107e0 <HAL_PWR_EnableBkUpAccess+0x10>)
 80107d4:	005b      	lsls	r3, r3, #1
 80107d6:	6811      	ldr	r1, [r2, #0]
 80107d8:	430b      	orrs	r3, r1
 80107da:	6013      	str	r3, [r2, #0]
}
 80107dc:	4770      	bx	lr
 80107de:	46c0      	nop			; (mov r8, r8)
 80107e0:	40007000 	.word	0x40007000

080107e4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80107e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107e6:	46c6      	mov	lr, r8
 80107e8:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80107ea:	6803      	ldr	r3, [r0, #0]
{
 80107ec:	b082      	sub	sp, #8
 80107ee:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80107f0:	07da      	lsls	r2, r3, #31
 80107f2:	d54b      	bpl.n	801088c <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80107f4:	210c      	movs	r1, #12
 80107f6:	48c4      	ldr	r0, [pc, #784]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
 80107f8:	6842      	ldr	r2, [r0, #4]
 80107fa:	400a      	ands	r2, r1
 80107fc:	2a04      	cmp	r2, #4
 80107fe:	d100      	bne.n	8010802 <HAL_RCC_OscConfig+0x1e>
 8010800:	e153      	b.n	8010aaa <HAL_RCC_OscConfig+0x2c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8010802:	6842      	ldr	r2, [r0, #4]
 8010804:	4011      	ands	r1, r2
 8010806:	2908      	cmp	r1, #8
 8010808:	d108      	bne.n	801081c <HAL_RCC_OscConfig+0x38>
 801080a:	21c0      	movs	r1, #192	; 0xc0
 801080c:	6842      	ldr	r2, [r0, #4]
 801080e:	0249      	lsls	r1, r1, #9
 8010810:	400a      	ands	r2, r1
 8010812:	2180      	movs	r1, #128	; 0x80
 8010814:	0249      	lsls	r1, r1, #9
 8010816:	428a      	cmp	r2, r1
 8010818:	d100      	bne.n	801081c <HAL_RCC_OscConfig+0x38>
 801081a:	e146      	b.n	8010aaa <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 801081c:	4dba      	ldr	r5, [pc, #744]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
 801081e:	4abb      	ldr	r2, [pc, #748]	; (8010b0c <HAL_RCC_OscConfig+0x328>)
 8010820:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010822:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010824:	4013      	ands	r3, r2
 8010826:	602b      	str	r3, [r5, #0]
 8010828:	682b      	ldr	r3, [r5, #0]
 801082a:	4ab9      	ldr	r2, [pc, #740]	; (8010b10 <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801082c:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 801082e:	4013      	ands	r3, r2
 8010830:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8010832:	f7fe faf9 	bl	800ee28 <HAL_GetTick>
 8010836:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010838:	e005      	b.n	8010846 <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801083a:	f7fe faf5 	bl	800ee28 <HAL_GetTick>
 801083e:	1bc0      	subs	r0, r0, r7
 8010840:	2864      	cmp	r0, #100	; 0x64
 8010842:	d900      	bls.n	8010846 <HAL_RCC_OscConfig+0x62>
 8010844:	e13b      	b.n	8010abe <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010846:	682b      	ldr	r3, [r5, #0]
 8010848:	4233      	tst	r3, r6
 801084a:	d1f6      	bne.n	801083a <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801084c:	6863      	ldr	r3, [r4, #4]
 801084e:	2b01      	cmp	r3, #1
 8010850:	d100      	bne.n	8010854 <HAL_RCC_OscConfig+0x70>
 8010852:	e196      	b.n	8010b82 <HAL_RCC_OscConfig+0x39e>
 8010854:	2b00      	cmp	r3, #0
 8010856:	d000      	beq.n	801085a <HAL_RCC_OscConfig+0x76>
 8010858:	e1bc      	b.n	8010bd4 <HAL_RCC_OscConfig+0x3f0>
 801085a:	682b      	ldr	r3, [r5, #0]
 801085c:	4aab      	ldr	r2, [pc, #684]	; (8010b0c <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801085e:	4eaa      	ldr	r6, [pc, #680]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010860:	4013      	ands	r3, r2
 8010862:	602b      	str	r3, [r5, #0]
 8010864:	682b      	ldr	r3, [r5, #0]
 8010866:	4aaa      	ldr	r2, [pc, #680]	; (8010b10 <HAL_RCC_OscConfig+0x32c>)
 8010868:	4013      	ands	r3, r2
 801086a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801086c:	f7fe fadc 	bl	800ee28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010870:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8010872:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010874:	02ad      	lsls	r5, r5, #10
 8010876:	e005      	b.n	8010884 <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010878:	f7fe fad6 	bl	800ee28 <HAL_GetTick>
 801087c:	1bc0      	subs	r0, r0, r7
 801087e:	2864      	cmp	r0, #100	; 0x64
 8010880:	d900      	bls.n	8010884 <HAL_RCC_OscConfig+0xa0>
 8010882:	e11c      	b.n	8010abe <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010884:	6833      	ldr	r3, [r6, #0]
 8010886:	422b      	tst	r3, r5
 8010888:	d1f6      	bne.n	8010878 <HAL_RCC_OscConfig+0x94>
 801088a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801088c:	079a      	lsls	r2, r3, #30
 801088e:	d529      	bpl.n	80108e4 <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8010890:	220c      	movs	r2, #12
 8010892:	499d      	ldr	r1, [pc, #628]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
 8010894:	6848      	ldr	r0, [r1, #4]
 8010896:	4202      	tst	r2, r0
 8010898:	d100      	bne.n	801089c <HAL_RCC_OscConfig+0xb8>
 801089a:	e0fd      	b.n	8010a98 <HAL_RCC_OscConfig+0x2b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801089c:	6848      	ldr	r0, [r1, #4]
 801089e:	4002      	ands	r2, r0
 80108a0:	2a08      	cmp	r2, #8
 80108a2:	d100      	bne.n	80108a6 <HAL_RCC_OscConfig+0xc2>
 80108a4:	e0ef      	b.n	8010a86 <HAL_RCC_OscConfig+0x2a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80108a6:	68e3      	ldr	r3, [r4, #12]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d100      	bne.n	80108ae <HAL_RCC_OscConfig+0xca>
 80108ac:	e138      	b.n	8010b20 <HAL_RCC_OscConfig+0x33c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80108ae:	2201      	movs	r2, #1
 80108b0:	4f95      	ldr	r7, [pc, #596]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80108b2:	2502      	movs	r5, #2
        __HAL_RCC_HSI_ENABLE();
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	4313      	orrs	r3, r2
 80108b8:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80108ba:	f7fe fab5 	bl	800ee28 <HAL_GetTick>
 80108be:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80108c0:	e005      	b.n	80108ce <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80108c2:	f7fe fab1 	bl	800ee28 <HAL_GetTick>
 80108c6:	1b80      	subs	r0, r0, r6
 80108c8:	2864      	cmp	r0, #100	; 0x64
 80108ca:	d900      	bls.n	80108ce <HAL_RCC_OscConfig+0xea>
 80108cc:	e0f7      	b.n	8010abe <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	421d      	tst	r5, r3
 80108d2:	d0f6      	beq.n	80108c2 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80108d4:	21f8      	movs	r1, #248	; 0xf8
 80108d6:	683a      	ldr	r2, [r7, #0]
 80108d8:	6923      	ldr	r3, [r4, #16]
 80108da:	438a      	bics	r2, r1
 80108dc:	00db      	lsls	r3, r3, #3
 80108de:	4313      	orrs	r3, r2
 80108e0:	603b      	str	r3, [r7, #0]
 80108e2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80108e4:	071a      	lsls	r2, r3, #28
 80108e6:	d45d      	bmi.n	80109a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80108e8:	075a      	lsls	r2, r3, #29
 80108ea:	d474      	bmi.n	80109d6 <HAL_RCC_OscConfig+0x1f2>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80108ec:	06da      	lsls	r2, r3, #27
 80108ee:	d512      	bpl.n	8010916 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80108f0:	6962      	ldr	r2, [r4, #20]
 80108f2:	2a01      	cmp	r2, #1
 80108f4:	d100      	bne.n	80108f8 <HAL_RCC_OscConfig+0x114>
 80108f6:	e18c      	b.n	8010c12 <HAL_RCC_OscConfig+0x42e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80108f8:	3205      	adds	r2, #5
 80108fa:	d000      	beq.n	80108fe <HAL_RCC_OscConfig+0x11a>
 80108fc:	e124      	b.n	8010b48 <HAL_RCC_OscConfig+0x364>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80108fe:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010900:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8010902:	4981      	ldr	r1, [pc, #516]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
 8010904:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8010906:	4382      	bics	r2, r0
 8010908:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801090a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 801090c:	69a2      	ldr	r2, [r4, #24]
 801090e:	43a8      	bics	r0, r5
 8010910:	00d2      	lsls	r2, r2, #3
 8010912:	4302      	orrs	r2, r0
 8010914:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010916:	069b      	lsls	r3, r3, #26
 8010918:	d522      	bpl.n	8010960 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801091a:	220c      	movs	r2, #12
 801091c:	497a      	ldr	r1, [pc, #488]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
 801091e:	684b      	ldr	r3, [r1, #4]
 8010920:	4013      	ands	r3, r2
 8010922:	2b0c      	cmp	r3, #12
 8010924:	d100      	bne.n	8010928 <HAL_RCC_OscConfig+0x144>
 8010926:	e14a      	b.n	8010bbe <HAL_RCC_OscConfig+0x3da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010928:	684b      	ldr	r3, [r1, #4]
 801092a:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801092c:	2a08      	cmp	r2, #8
 801092e:	d100      	bne.n	8010932 <HAL_RCC_OscConfig+0x14e>
 8010930:	e13e      	b.n	8010bb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010932:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8010934:	4d74      	ldr	r5, [pc, #464]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010936:	2b00      	cmp	r3, #0
 8010938:	d100      	bne.n	801093c <HAL_RCC_OscConfig+0x158>
 801093a:	e156      	b.n	8010bea <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 801093c:	2680      	movs	r6, #128	; 0x80
 801093e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010940:	0276      	lsls	r6, r6, #9
 8010942:	4333      	orrs	r3, r6
 8010944:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010946:	f7fe fa6f 	bl	800ee28 <HAL_GetTick>
 801094a:	0007      	movs	r7, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801094c:	e005      	b.n	801095a <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801094e:	f7fe fa6b 	bl	800ee28 <HAL_GetTick>
 8010952:	1bc0      	subs	r0, r0, r7
 8010954:	2864      	cmp	r0, #100	; 0x64
 8010956:	d900      	bls.n	801095a <HAL_RCC_OscConfig+0x176>
 8010958:	e0b1      	b.n	8010abe <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801095a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801095c:	4233      	tst	r3, r6
 801095e:	d0f6      	beq.n	801094e <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010962:	2b00      	cmp	r3, #0
 8010964:	d01c      	beq.n	80109a0 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010966:	220c      	movs	r2, #12
 8010968:	4d67      	ldr	r5, [pc, #412]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
 801096a:	6869      	ldr	r1, [r5, #4]
 801096c:	400a      	ands	r2, r1
 801096e:	2a08      	cmp	r2, #8
 8010970:	d100      	bne.n	8010974 <HAL_RCC_OscConfig+0x190>
 8010972:	e098      	b.n	8010aa6 <HAL_RCC_OscConfig+0x2c2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010974:	2b02      	cmp	r3, #2
 8010976:	d100      	bne.n	801097a <HAL_RCC_OscConfig+0x196>
 8010978:	e16a      	b.n	8010c50 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801097a:	682b      	ldr	r3, [r5, #0]
 801097c:	4a65      	ldr	r2, [pc, #404]	; (8010b14 <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801097e:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8010980:	4013      	ands	r3, r2
 8010982:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010984:	f7fe fa50 	bl	800ee28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010988:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 801098a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801098c:	e005      	b.n	801099a <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801098e:	f7fe fa4b 	bl	800ee28 <HAL_GetTick>
 8010992:	1b80      	subs	r0, r0, r6
 8010994:	2864      	cmp	r0, #100	; 0x64
 8010996:	d900      	bls.n	801099a <HAL_RCC_OscConfig+0x1b6>
 8010998:	e091      	b.n	8010abe <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801099a:	682b      	ldr	r3, [r5, #0]
 801099c:	4223      	tst	r3, r4
 801099e:	d1f6      	bne.n	801098e <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80109a0:	2000      	movs	r0, #0
 80109a2:	e08d      	b.n	8010ac0 <HAL_RCC_OscConfig+0x2dc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80109a4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 80109a6:	4d58      	ldr	r5, [pc, #352]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d100      	bne.n	80109ae <HAL_RCC_OscConfig+0x1ca>
 80109ac:	e08c      	b.n	8010ac8 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 80109ae:	2201      	movs	r2, #1
 80109b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80109b2:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80109b4:	4313      	orrs	r3, r2
 80109b6:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80109b8:	f7fe fa36 	bl	800ee28 <HAL_GetTick>
 80109bc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80109be:	e004      	b.n	80109ca <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80109c0:	f7fe fa32 	bl	800ee28 <HAL_GetTick>
 80109c4:	1bc0      	subs	r0, r0, r7
 80109c6:	2864      	cmp	r0, #100	; 0x64
 80109c8:	d879      	bhi.n	8010abe <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80109ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80109cc:	421e      	tst	r6, r3
 80109ce:	d0f7      	beq.n	80109c0 <HAL_RCC_OscConfig+0x1dc>
 80109d0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80109d2:	075a      	lsls	r2, r3, #29
 80109d4:	d58a      	bpl.n	80108ec <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 80109d6:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80109d8:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80109da:	4a4b      	ldr	r2, [pc, #300]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
 80109dc:	0540      	lsls	r0, r0, #21
 80109de:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80109e0:	4d4d      	ldr	r5, [pc, #308]	; (8010b18 <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80109e2:	4301      	orrs	r1, r0
 80109e4:	61d1      	str	r1, [r2, #28]
 80109e6:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80109e8:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80109ea:	4003      	ands	r3, r0
 80109ec:	9301      	str	r3, [sp, #4]
 80109ee:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80109f0:	682b      	ldr	r3, [r5, #0]
 80109f2:	4333      	orrs	r3, r6
 80109f4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80109f6:	f7fe fa17 	bl	800ee28 <HAL_GetTick>
 80109fa:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80109fc:	e004      	b.n	8010a08 <HAL_RCC_OscConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80109fe:	f7fe fa13 	bl	800ee28 <HAL_GetTick>
 8010a02:	1bc0      	subs	r0, r0, r7
 8010a04:	2864      	cmp	r0, #100	; 0x64
 8010a06:	d85a      	bhi.n	8010abe <HAL_RCC_OscConfig+0x2da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8010a08:	682b      	ldr	r3, [r5, #0]
 8010a0a:	4233      	tst	r3, r6
 8010a0c:	d0f7      	beq.n	80109fe <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8010a0e:	2201      	movs	r2, #1
 8010a10:	4d3d      	ldr	r5, [pc, #244]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010a12:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8010a14:	6a2b      	ldr	r3, [r5, #32]
 8010a16:	4393      	bics	r3, r2
 8010a18:	622b      	str	r3, [r5, #32]
 8010a1a:	6a2b      	ldr	r3, [r5, #32]
 8010a1c:	3203      	adds	r2, #3
 8010a1e:	4393      	bics	r3, r2
 8010a20:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 8010a22:	f7fe fa01 	bl	800ee28 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010a26:	4b3d      	ldr	r3, [pc, #244]	; (8010b1c <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 8010a28:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010a2a:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010a2c:	e004      	b.n	8010a38 <HAL_RCC_OscConfig+0x254>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010a2e:	f7fe f9fb 	bl	800ee28 <HAL_GetTick>
 8010a32:	1bc0      	subs	r0, r0, r7
 8010a34:	4540      	cmp	r0, r8
 8010a36:	d842      	bhi.n	8010abe <HAL_RCC_OscConfig+0x2da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010a38:	6a2b      	ldr	r3, [r5, #32]
 8010a3a:	421e      	tst	r6, r3
 8010a3c:	d1f7      	bne.n	8010a2e <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010a3e:	68a3      	ldr	r3, [r4, #8]
 8010a40:	2b01      	cmp	r3, #1
 8010a42:	d100      	bne.n	8010a46 <HAL_RCC_OscConfig+0x262>
 8010a44:	e157      	b.n	8010cf6 <HAL_RCC_OscConfig+0x512>
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d100      	bne.n	8010a4c <HAL_RCC_OscConfig+0x268>
 8010a4a:	e139      	b.n	8010cc0 <HAL_RCC_OscConfig+0x4dc>
 8010a4c:	2b05      	cmp	r3, #5
 8010a4e:	d100      	bne.n	8010a52 <HAL_RCC_OscConfig+0x26e>
 8010a50:	e155      	b.n	8010cfe <HAL_RCC_OscConfig+0x51a>
 8010a52:	2201      	movs	r2, #1
 8010a54:	6a2b      	ldr	r3, [r5, #32]
 8010a56:	4393      	bics	r3, r2
 8010a58:	622b      	str	r3, [r5, #32]
 8010a5a:	6a2b      	ldr	r3, [r5, #32]
 8010a5c:	3203      	adds	r2, #3
 8010a5e:	4393      	bics	r3, r2
 8010a60:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8010a62:	f7fe f9e1 	bl	800ee28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010a66:	4e28      	ldr	r6, [pc, #160]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
      tickstart = HAL_GetTick();
 8010a68:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010a6a:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010a6c:	4f2b      	ldr	r7, [pc, #172]	; (8010b1c <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010a6e:	e005      	b.n	8010a7c <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010a70:	f7fe f9da 	bl	800ee28 <HAL_GetTick>
 8010a74:	4643      	mov	r3, r8
 8010a76:	1ac0      	subs	r0, r0, r3
 8010a78:	42b8      	cmp	r0, r7
 8010a7a:	d820      	bhi.n	8010abe <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010a7c:	6a33      	ldr	r3, [r6, #32]
 8010a7e:	421d      	tst	r5, r3
 8010a80:	d0f6      	beq.n	8010a70 <HAL_RCC_OscConfig+0x28c>
 8010a82:	6823      	ldr	r3, [r4, #0]
 8010a84:	e732      	b.n	80108ec <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8010a86:	684a      	ldr	r2, [r1, #4]
 8010a88:	21c0      	movs	r1, #192	; 0xc0
 8010a8a:	0249      	lsls	r1, r1, #9
 8010a8c:	400a      	ands	r2, r1
 8010a8e:	2180      	movs	r1, #128	; 0x80
 8010a90:	0209      	lsls	r1, r1, #8
 8010a92:	428a      	cmp	r2, r1
 8010a94:	d000      	beq.n	8010a98 <HAL_RCC_OscConfig+0x2b4>
 8010a96:	e706      	b.n	80108a6 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010a98:	4a1b      	ldr	r2, [pc, #108]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
 8010a9a:	6812      	ldr	r2, [r2, #0]
 8010a9c:	0792      	lsls	r2, r2, #30
 8010a9e:	d526      	bpl.n	8010aee <HAL_RCC_OscConfig+0x30a>
 8010aa0:	68e2      	ldr	r2, [r4, #12]
 8010aa2:	2a01      	cmp	r2, #1
 8010aa4:	d023      	beq.n	8010aee <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8010aa6:	2001      	movs	r0, #1
 8010aa8:	e00a      	b.n	8010ac0 <HAL_RCC_OscConfig+0x2dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010aaa:	4a17      	ldr	r2, [pc, #92]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
 8010aac:	6812      	ldr	r2, [r2, #0]
 8010aae:	0392      	lsls	r2, r2, #14
 8010ab0:	d400      	bmi.n	8010ab4 <HAL_RCC_OscConfig+0x2d0>
 8010ab2:	e6eb      	b.n	801088c <HAL_RCC_OscConfig+0xa8>
 8010ab4:	6862      	ldr	r2, [r4, #4]
 8010ab6:	2a00      	cmp	r2, #0
 8010ab8:	d000      	beq.n	8010abc <HAL_RCC_OscConfig+0x2d8>
 8010aba:	e6e7      	b.n	801088c <HAL_RCC_OscConfig+0xa8>
 8010abc:	e7f3      	b.n	8010aa6 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8010abe:	2003      	movs	r0, #3
}
 8010ac0:	b002      	add	sp, #8
 8010ac2:	bc04      	pop	{r2}
 8010ac4:	4690      	mov	r8, r2
 8010ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8010ac8:	2201      	movs	r2, #1
 8010aca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010acc:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8010ace:	4393      	bics	r3, r2
 8010ad0:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8010ad2:	f7fe f9a9 	bl	800ee28 <HAL_GetTick>
 8010ad6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010ad8:	e004      	b.n	8010ae4 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010ada:	f7fe f9a5 	bl	800ee28 <HAL_GetTick>
 8010ade:	1bc0      	subs	r0, r0, r7
 8010ae0:	2864      	cmp	r0, #100	; 0x64
 8010ae2:	d8ec      	bhi.n	8010abe <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010ae4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010ae6:	421e      	tst	r6, r3
 8010ae8:	d1f7      	bne.n	8010ada <HAL_RCC_OscConfig+0x2f6>
 8010aea:	6823      	ldr	r3, [r4, #0]
 8010aec:	e771      	b.n	80109d2 <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010aee:	25f8      	movs	r5, #248	; 0xf8
 8010af0:	4805      	ldr	r0, [pc, #20]	; (8010b08 <HAL_RCC_OscConfig+0x324>)
 8010af2:	6922      	ldr	r2, [r4, #16]
 8010af4:	6801      	ldr	r1, [r0, #0]
 8010af6:	00d2      	lsls	r2, r2, #3
 8010af8:	43a9      	bics	r1, r5
 8010afa:	430a      	orrs	r2, r1
 8010afc:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010afe:	071a      	lsls	r2, r3, #28
 8010b00:	d400      	bmi.n	8010b04 <HAL_RCC_OscConfig+0x320>
 8010b02:	e6f1      	b.n	80108e8 <HAL_RCC_OscConfig+0x104>
 8010b04:	e74e      	b.n	80109a4 <HAL_RCC_OscConfig+0x1c0>
 8010b06:	46c0      	nop			; (mov r8, r8)
 8010b08:	40021000 	.word	0x40021000
 8010b0c:	fffeffff 	.word	0xfffeffff
 8010b10:	fffbffff 	.word	0xfffbffff
 8010b14:	feffffff 	.word	0xfeffffff
 8010b18:	40007000 	.word	0x40007000
 8010b1c:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 8010b20:	2201      	movs	r2, #1
 8010b22:	4d7b      	ldr	r5, [pc, #492]	; (8010d10 <HAL_RCC_OscConfig+0x52c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010b24:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8010b26:	682b      	ldr	r3, [r5, #0]
 8010b28:	4393      	bics	r3, r2
 8010b2a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010b2c:	f7fe f97c 	bl	800ee28 <HAL_GetTick>
 8010b30:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010b32:	e004      	b.n	8010b3e <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010b34:	f7fe f978 	bl	800ee28 <HAL_GetTick>
 8010b38:	1bc0      	subs	r0, r0, r7
 8010b3a:	2864      	cmp	r0, #100	; 0x64
 8010b3c:	d8bf      	bhi.n	8010abe <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010b3e:	682b      	ldr	r3, [r5, #0]
 8010b40:	421e      	tst	r6, r3
 8010b42:	d1f7      	bne.n	8010b34 <HAL_RCC_OscConfig+0x350>
 8010b44:	6823      	ldr	r3, [r4, #0]
 8010b46:	e6cd      	b.n	80108e4 <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 8010b48:	2204      	movs	r2, #4
 8010b4a:	4d71      	ldr	r5, [pc, #452]	; (8010d10 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8010b4c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8010b4e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010b50:	4313      	orrs	r3, r2
 8010b52:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8010b54:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010b56:	3a03      	subs	r2, #3
 8010b58:	4393      	bics	r3, r2
 8010b5a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8010b5c:	f7fe f964 	bl	800ee28 <HAL_GetTick>
 8010b60:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8010b62:	e004      	b.n	8010b6e <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8010b64:	f7fe f960 	bl	800ee28 <HAL_GetTick>
 8010b68:	1bc0      	subs	r0, r0, r7
 8010b6a:	2864      	cmp	r0, #100	; 0x64
 8010b6c:	d8a7      	bhi.n	8010abe <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8010b6e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010b70:	421e      	tst	r6, r3
 8010b72:	d1f7      	bne.n	8010b64 <HAL_RCC_OscConfig+0x380>
 8010b74:	6823      	ldr	r3, [r4, #0]
 8010b76:	e6ce      	b.n	8010916 <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010b78:	2380      	movs	r3, #128	; 0x80
 8010b7a:	682a      	ldr	r2, [r5, #0]
 8010b7c:	02db      	lsls	r3, r3, #11
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	602b      	str	r3, [r5, #0]
 8010b82:	2380      	movs	r3, #128	; 0x80
 8010b84:	682a      	ldr	r2, [r5, #0]
 8010b86:	025b      	lsls	r3, r3, #9
 8010b88:	4313      	orrs	r3, r2
 8010b8a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010b8c:	f7fe f94c 	bl	800ee28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010b90:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8010b92:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010b94:	4e5e      	ldr	r6, [pc, #376]	; (8010d10 <HAL_RCC_OscConfig+0x52c>)
 8010b96:	02ad      	lsls	r5, r5, #10
 8010b98:	e005      	b.n	8010ba6 <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010b9a:	f7fe f945 	bl	800ee28 <HAL_GetTick>
 8010b9e:	1bc0      	subs	r0, r0, r7
 8010ba0:	2864      	cmp	r0, #100	; 0x64
 8010ba2:	d900      	bls.n	8010ba6 <HAL_RCC_OscConfig+0x3c2>
 8010ba4:	e78b      	b.n	8010abe <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010ba6:	6833      	ldr	r3, [r6, #0]
 8010ba8:	422b      	tst	r3, r5
 8010baa:	d0f6      	beq.n	8010b9a <HAL_RCC_OscConfig+0x3b6>
 8010bac:	6823      	ldr	r3, [r4, #0]
 8010bae:	e66d      	b.n	801088c <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010bb0:	22c0      	movs	r2, #192	; 0xc0
 8010bb2:	684b      	ldr	r3, [r1, #4]
 8010bb4:	0252      	lsls	r2, r2, #9
 8010bb6:	4013      	ands	r3, r2
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d000      	beq.n	8010bbe <HAL_RCC_OscConfig+0x3da>
 8010bbc:	e6b9      	b.n	8010932 <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8010bbe:	4b54      	ldr	r3, [pc, #336]	; (8010d10 <HAL_RCC_OscConfig+0x52c>)
 8010bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bc2:	03db      	lsls	r3, r3, #15
 8010bc4:	d400      	bmi.n	8010bc8 <HAL_RCC_OscConfig+0x3e4>
 8010bc6:	e6cb      	b.n	8010960 <HAL_RCC_OscConfig+0x17c>
 8010bc8:	69e3      	ldr	r3, [r4, #28]
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d100      	bne.n	8010bd0 <HAL_RCC_OscConfig+0x3ec>
 8010bce:	e6c7      	b.n	8010960 <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 8010bd0:	2001      	movs	r0, #1
 8010bd2:	e775      	b.n	8010ac0 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010bd4:	2b05      	cmp	r3, #5
 8010bd6:	d0cf      	beq.n	8010b78 <HAL_RCC_OscConfig+0x394>
 8010bd8:	682b      	ldr	r3, [r5, #0]
 8010bda:	4a4e      	ldr	r2, [pc, #312]	; (8010d14 <HAL_RCC_OscConfig+0x530>)
 8010bdc:	4013      	ands	r3, r2
 8010bde:	602b      	str	r3, [r5, #0]
 8010be0:	682b      	ldr	r3, [r5, #0]
 8010be2:	4a4d      	ldr	r2, [pc, #308]	; (8010d18 <HAL_RCC_OscConfig+0x534>)
 8010be4:	4013      	ands	r3, r2
 8010be6:	602b      	str	r3, [r5, #0]
 8010be8:	e7d0      	b.n	8010b8c <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI48_DISABLE();
 8010bea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010bec:	4a49      	ldr	r2, [pc, #292]	; (8010d14 <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010bee:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8010bf0:	4013      	ands	r3, r2
 8010bf2:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8010bf4:	f7fe f918 	bl	800ee28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010bf8:	0276      	lsls	r6, r6, #9
        tickstart = HAL_GetTick();
 8010bfa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010bfc:	e005      	b.n	8010c0a <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010bfe:	f7fe f913 	bl	800ee28 <HAL_GetTick>
 8010c02:	1bc0      	subs	r0, r0, r7
 8010c04:	2864      	cmp	r0, #100	; 0x64
 8010c06:	d900      	bls.n	8010c0a <HAL_RCC_OscConfig+0x426>
 8010c08:	e759      	b.n	8010abe <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010c0a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010c0c:	4233      	tst	r3, r6
 8010c0e:	d1f6      	bne.n	8010bfe <HAL_RCC_OscConfig+0x41a>
 8010c10:	e6a6      	b.n	8010960 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8010c12:	2104      	movs	r1, #4
 8010c14:	4d3e      	ldr	r5, [pc, #248]	; (8010d10 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8010c16:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8010c18:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010c1a:	430b      	orrs	r3, r1
 8010c1c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8010c1e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010c20:	431a      	orrs	r2, r3
 8010c22:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8010c24:	f7fe f900 	bl	800ee28 <HAL_GetTick>
 8010c28:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8010c2a:	e005      	b.n	8010c38 <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8010c2c:	f7fe f8fc 	bl	800ee28 <HAL_GetTick>
 8010c30:	1bc0      	subs	r0, r0, r7
 8010c32:	2864      	cmp	r0, #100	; 0x64
 8010c34:	d900      	bls.n	8010c38 <HAL_RCC_OscConfig+0x454>
 8010c36:	e742      	b.n	8010abe <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8010c38:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010c3a:	421e      	tst	r6, r3
 8010c3c:	d0f6      	beq.n	8010c2c <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010c3e:	21f8      	movs	r1, #248	; 0xf8
 8010c40:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8010c42:	69a3      	ldr	r3, [r4, #24]
 8010c44:	438a      	bics	r2, r1
 8010c46:	00db      	lsls	r3, r3, #3
 8010c48:	4313      	orrs	r3, r2
 8010c4a:	636b      	str	r3, [r5, #52]	; 0x34
 8010c4c:	6823      	ldr	r3, [r4, #0]
 8010c4e:	e662      	b.n	8010916 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 8010c50:	682b      	ldr	r3, [r5, #0]
 8010c52:	4a32      	ldr	r2, [pc, #200]	; (8010d1c <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010c54:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8010c56:	4013      	ands	r3, r2
 8010c58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010c5a:	f7fe f8e5 	bl	800ee28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010c5e:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8010c60:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010c62:	e005      	b.n	8010c70 <HAL_RCC_OscConfig+0x48c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010c64:	f7fe f8e0 	bl	800ee28 <HAL_GetTick>
 8010c68:	1bc0      	subs	r0, r0, r7
 8010c6a:	2864      	cmp	r0, #100	; 0x64
 8010c6c:	d900      	bls.n	8010c70 <HAL_RCC_OscConfig+0x48c>
 8010c6e:	e726      	b.n	8010abe <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010c70:	682b      	ldr	r3, [r5, #0]
 8010c72:	4233      	tst	r3, r6
 8010c74:	d1f6      	bne.n	8010c64 <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010c76:	220f      	movs	r2, #15
 8010c78:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010c7a:	4393      	bics	r3, r2
 8010c7c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010c7e:	4313      	orrs	r3, r2
 8010c80:	62eb      	str	r3, [r5, #44]	; 0x2c
 8010c82:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010c84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010c86:	686a      	ldr	r2, [r5, #4]
 8010c88:	430b      	orrs	r3, r1
 8010c8a:	4925      	ldr	r1, [pc, #148]	; (8010d20 <HAL_RCC_OscConfig+0x53c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010c8c:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010c8e:	400a      	ands	r2, r1
 8010c90:	4313      	orrs	r3, r2
 8010c92:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8010c94:	2380      	movs	r3, #128	; 0x80
 8010c96:	682a      	ldr	r2, [r5, #0]
 8010c98:	045b      	lsls	r3, r3, #17
 8010c9a:	4313      	orrs	r3, r2
 8010c9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010c9e:	f7fe f8c3 	bl	800ee28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010ca2:	4d1b      	ldr	r5, [pc, #108]	; (8010d10 <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 8010ca4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010ca6:	04a4      	lsls	r4, r4, #18
 8010ca8:	e005      	b.n	8010cb6 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010caa:	f7fe f8bd 	bl	800ee28 <HAL_GetTick>
 8010cae:	1b80      	subs	r0, r0, r6
 8010cb0:	2864      	cmp	r0, #100	; 0x64
 8010cb2:	d900      	bls.n	8010cb6 <HAL_RCC_OscConfig+0x4d2>
 8010cb4:	e703      	b.n	8010abe <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010cb6:	682b      	ldr	r3, [r5, #0]
 8010cb8:	4223      	tst	r3, r4
 8010cba:	d0f6      	beq.n	8010caa <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 8010cbc:	2000      	movs	r0, #0
 8010cbe:	e6ff      	b.n	8010ac0 <HAL_RCC_OscConfig+0x2dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010cc0:	2201      	movs	r2, #1
 8010cc2:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010cc4:	4e12      	ldr	r6, [pc, #72]	; (8010d10 <HAL_RCC_OscConfig+0x52c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010cc6:	4393      	bics	r3, r2
 8010cc8:	622b      	str	r3, [r5, #32]
 8010cca:	6a2b      	ldr	r3, [r5, #32]
 8010ccc:	3203      	adds	r2, #3
 8010cce:	4393      	bics	r3, r2
 8010cd0:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8010cd2:	f7fe f8a9 	bl	800ee28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010cd6:	2502      	movs	r5, #2
      tickstart = HAL_GetTick();
 8010cd8:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010cda:	4f12      	ldr	r7, [pc, #72]	; (8010d24 <HAL_RCC_OscConfig+0x540>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010cdc:	e006      	b.n	8010cec <HAL_RCC_OscConfig+0x508>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010cde:	f7fe f8a3 	bl	800ee28 <HAL_GetTick>
 8010ce2:	4643      	mov	r3, r8
 8010ce4:	1ac0      	subs	r0, r0, r3
 8010ce6:	42b8      	cmp	r0, r7
 8010ce8:	d900      	bls.n	8010cec <HAL_RCC_OscConfig+0x508>
 8010cea:	e6e8      	b.n	8010abe <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010cec:	6a33      	ldr	r3, [r6, #32]
 8010cee:	421d      	tst	r5, r3
 8010cf0:	d1f5      	bne.n	8010cde <HAL_RCC_OscConfig+0x4fa>
 8010cf2:	6823      	ldr	r3, [r4, #0]
 8010cf4:	e5fa      	b.n	80108ec <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010cf6:	6a2a      	ldr	r2, [r5, #32]
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	622b      	str	r3, [r5, #32]
 8010cfc:	e6b1      	b.n	8010a62 <HAL_RCC_OscConfig+0x27e>
 8010cfe:	2204      	movs	r2, #4
 8010d00:	6a2b      	ldr	r3, [r5, #32]
 8010d02:	4313      	orrs	r3, r2
 8010d04:	622b      	str	r3, [r5, #32]
 8010d06:	6a2b      	ldr	r3, [r5, #32]
 8010d08:	3a03      	subs	r2, #3
 8010d0a:	4313      	orrs	r3, r2
 8010d0c:	622b      	str	r3, [r5, #32]
 8010d0e:	e6a8      	b.n	8010a62 <HAL_RCC_OscConfig+0x27e>
 8010d10:	40021000 	.word	0x40021000
 8010d14:	fffeffff 	.word	0xfffeffff
 8010d18:	fffbffff 	.word	0xfffbffff
 8010d1c:	feffffff 	.word	0xfeffffff
 8010d20:	ffc27fff 	.word	0xffc27fff
 8010d24:	00001388 	.word	0x00001388

08010d28 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d2a:	46ce      	mov	lr, r9
 8010d2c:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010d2e:	2301      	movs	r3, #1
{
 8010d30:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010d32:	4985      	ldr	r1, [pc, #532]	; (8010f48 <HAL_RCC_ClockConfig+0x220>)
{
 8010d34:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010d36:	680a      	ldr	r2, [r1, #0]
{
 8010d38:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010d3a:	401a      	ands	r2, r3
 8010d3c:	42a2      	cmp	r2, r4
 8010d3e:	d20c      	bcs.n	8010d5a <HAL_RCC_ClockConfig+0x32>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010d40:	680a      	ldr	r2, [r1, #0]
 8010d42:	439a      	bics	r2, r3
 8010d44:	4322      	orrs	r2, r4
 8010d46:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010d48:	680a      	ldr	r2, [r1, #0]
 8010d4a:	4013      	ands	r3, r2
 8010d4c:	42a3      	cmp	r3, r4
 8010d4e:	d054      	beq.n	8010dfa <HAL_RCC_ClockConfig+0xd2>
    {
      return HAL_ERROR;
 8010d50:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8010d52:	bc0c      	pop	{r2, r3}
 8010d54:	4690      	mov	r8, r2
 8010d56:	4699      	mov	r9, r3
 8010d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010d5a:	6803      	ldr	r3, [r0, #0]
 8010d5c:	079a      	lsls	r2, r3, #30
 8010d5e:	d506      	bpl.n	8010d6e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010d60:	20f0      	movs	r0, #240	; 0xf0
 8010d62:	497a      	ldr	r1, [pc, #488]	; (8010f4c <HAL_RCC_ClockConfig+0x224>)
 8010d64:	684a      	ldr	r2, [r1, #4]
 8010d66:	4382      	bics	r2, r0
 8010d68:	68a8      	ldr	r0, [r5, #8]
 8010d6a:	4302      	orrs	r2, r0
 8010d6c:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010d6e:	07db      	lsls	r3, r3, #31
 8010d70:	d52a      	bpl.n	8010dc8 <HAL_RCC_ClockConfig+0xa0>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010d72:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010d74:	4a75      	ldr	r2, [pc, #468]	; (8010f4c <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010d76:	2b01      	cmp	r3, #1
 8010d78:	d073      	beq.n	8010e62 <HAL_RCC_ClockConfig+0x13a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010d7a:	2b02      	cmp	r3, #2
 8010d7c:	d075      	beq.n	8010e6a <HAL_RCC_ClockConfig+0x142>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010d7e:	2b03      	cmp	r3, #3
 8010d80:	d100      	bne.n	8010d84 <HAL_RCC_ClockConfig+0x5c>
 8010d82:	e09c      	b.n	8010ebe <HAL_RCC_ClockConfig+0x196>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010d84:	6812      	ldr	r2, [r2, #0]
 8010d86:	0792      	lsls	r2, r2, #30
 8010d88:	d5e2      	bpl.n	8010d50 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010d8a:	2103      	movs	r1, #3
 8010d8c:	4e6f      	ldr	r6, [pc, #444]	; (8010f4c <HAL_RCC_ClockConfig+0x224>)
 8010d8e:	6872      	ldr	r2, [r6, #4]
 8010d90:	438a      	bics	r2, r1
 8010d92:	4313      	orrs	r3, r2
 8010d94:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 8010d96:	f7fe f847 	bl	800ee28 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010d9a:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8010d9c:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010d9e:	2b01      	cmp	r3, #1
 8010da0:	d07d      	beq.n	8010e9e <HAL_RCC_ClockConfig+0x176>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010da2:	2b02      	cmp	r3, #2
 8010da4:	d100      	bne.n	8010da8 <HAL_RCC_ClockConfig+0x80>
 8010da6:	e093      	b.n	8010ed0 <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010da8:	2b03      	cmp	r3, #3
 8010daa:	d066      	beq.n	8010e7a <HAL_RCC_ClockConfig+0x152>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010dac:	230c      	movs	r3, #12
 8010dae:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010db0:	4b67      	ldr	r3, [pc, #412]	; (8010f50 <HAL_RCC_ClockConfig+0x228>)
 8010db2:	4699      	mov	r9, r3
 8010db4:	e004      	b.n	8010dc0 <HAL_RCC_ClockConfig+0x98>
 8010db6:	f7fe f837 	bl	800ee28 <HAL_GetTick>
 8010dba:	1bc0      	subs	r0, r0, r7
 8010dbc:	4548      	cmp	r0, r9
 8010dbe:	d86c      	bhi.n	8010e9a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010dc0:	4642      	mov	r2, r8
 8010dc2:	6873      	ldr	r3, [r6, #4]
 8010dc4:	421a      	tst	r2, r3
 8010dc6:	d1f6      	bne.n	8010db6 <HAL_RCC_ClockConfig+0x8e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010dc8:	2201      	movs	r2, #1
 8010dca:	495f      	ldr	r1, [pc, #380]	; (8010f48 <HAL_RCC_ClockConfig+0x220>)
 8010dcc:	680b      	ldr	r3, [r1, #0]
 8010dce:	4393      	bics	r3, r2
 8010dd0:	4323      	orrs	r3, r4
 8010dd2:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010dd4:	680b      	ldr	r3, [r1, #0]
 8010dd6:	401a      	ands	r2, r3
 8010dd8:	42a2      	cmp	r2, r4
 8010dda:	d1b9      	bne.n	8010d50 <HAL_RCC_ClockConfig+0x28>
 8010ddc:	682b      	ldr	r3, [r5, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010dde:	075b      	lsls	r3, r3, #29
 8010de0:	d506      	bpl.n	8010df0 <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8010de2:	4a5a      	ldr	r2, [pc, #360]	; (8010f4c <HAL_RCC_ClockConfig+0x224>)
 8010de4:	495b      	ldr	r1, [pc, #364]	; (8010f54 <HAL_RCC_ClockConfig+0x22c>)
 8010de6:	6853      	ldr	r3, [r2, #4]
 8010de8:	400b      	ands	r3, r1
 8010dea:	68e9      	ldr	r1, [r5, #12]
 8010dec:	430b      	orrs	r3, r1
 8010dee:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8010df0:	2000      	movs	r0, #0
 8010df2:	f7fd ffef 	bl	800edd4 <HAL_InitTick>
  return HAL_OK;
 8010df6:	2000      	movs	r0, #0
 8010df8:	e7ab      	b.n	8010d52 <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010dfa:	6803      	ldr	r3, [r0, #0]
 8010dfc:	079a      	lsls	r2, r3, #30
 8010dfe:	d506      	bpl.n	8010e0e <HAL_RCC_ClockConfig+0xe6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010e00:	20f0      	movs	r0, #240	; 0xf0
 8010e02:	4952      	ldr	r1, [pc, #328]	; (8010f4c <HAL_RCC_ClockConfig+0x224>)
 8010e04:	684a      	ldr	r2, [r1, #4]
 8010e06:	4382      	bics	r2, r0
 8010e08:	68a8      	ldr	r0, [r5, #8]
 8010e0a:	4302      	orrs	r2, r0
 8010e0c:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010e0e:	07da      	lsls	r2, r3, #31
 8010e10:	d5e5      	bpl.n	8010dde <HAL_RCC_ClockConfig+0xb6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010e12:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010e14:	4a4d      	ldr	r2, [pc, #308]	; (8010f4c <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010e16:	2b01      	cmp	r3, #1
 8010e18:	d056      	beq.n	8010ec8 <HAL_RCC_ClockConfig+0x1a0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010e1a:	2b02      	cmp	r3, #2
 8010e1c:	d029      	beq.n	8010e72 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010e1e:	2b03      	cmp	r3, #3
 8010e20:	d073      	beq.n	8010f0a <HAL_RCC_ClockConfig+0x1e2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010e22:	6812      	ldr	r2, [r2, #0]
 8010e24:	0792      	lsls	r2, r2, #30
 8010e26:	d593      	bpl.n	8010d50 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010e28:	2103      	movs	r1, #3
 8010e2a:	4c48      	ldr	r4, [pc, #288]	; (8010f4c <HAL_RCC_ClockConfig+0x224>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010e2c:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010e2e:	6862      	ldr	r2, [r4, #4]
 8010e30:	438a      	bics	r2, r1
 8010e32:	4313      	orrs	r3, r2
 8010e34:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8010e36:	f7fd fff7 	bl	800ee28 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010e3a:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8010e3c:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010e3e:	2b01      	cmp	r3, #1
 8010e40:	d056      	beq.n	8010ef0 <HAL_RCC_ClockConfig+0x1c8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010e42:	2b02      	cmp	r3, #2
 8010e44:	d065      	beq.n	8010f12 <HAL_RCC_ClockConfig+0x1ea>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010e46:	2b03      	cmp	r3, #3
 8010e48:	d070      	beq.n	8010f2c <HAL_RCC_ClockConfig+0x204>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010e4a:	4b41      	ldr	r3, [pc, #260]	; (8010f50 <HAL_RCC_ClockConfig+0x228>)
 8010e4c:	4698      	mov	r8, r3
 8010e4e:	e004      	b.n	8010e5a <HAL_RCC_ClockConfig+0x132>
 8010e50:	f7fd ffea 	bl	800ee28 <HAL_GetTick>
 8010e54:	1b80      	subs	r0, r0, r6
 8010e56:	4540      	cmp	r0, r8
 8010e58:	d81f      	bhi.n	8010e9a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010e5a:	6863      	ldr	r3, [r4, #4]
 8010e5c:	421f      	tst	r7, r3
 8010e5e:	d1f7      	bne.n	8010e50 <HAL_RCC_ClockConfig+0x128>
 8010e60:	e7bc      	b.n	8010ddc <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010e62:	6812      	ldr	r2, [r2, #0]
 8010e64:	0392      	lsls	r2, r2, #14
 8010e66:	d490      	bmi.n	8010d8a <HAL_RCC_ClockConfig+0x62>
 8010e68:	e772      	b.n	8010d50 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010e6a:	6812      	ldr	r2, [r2, #0]
 8010e6c:	0192      	lsls	r2, r2, #6
 8010e6e:	d48c      	bmi.n	8010d8a <HAL_RCC_ClockConfig+0x62>
 8010e70:	e76e      	b.n	8010d50 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010e72:	6812      	ldr	r2, [r2, #0]
 8010e74:	0192      	lsls	r2, r2, #6
 8010e76:	d4d7      	bmi.n	8010e28 <HAL_RCC_ClockConfig+0x100>
 8010e78:	e76a      	b.n	8010d50 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010e7a:	3309      	adds	r3, #9
 8010e7c:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010e7e:	4b34      	ldr	r3, [pc, #208]	; (8010f50 <HAL_RCC_ClockConfig+0x228>)
 8010e80:	4699      	mov	r9, r3
 8010e82:	e004      	b.n	8010e8e <HAL_RCC_ClockConfig+0x166>
 8010e84:	f7fd ffd0 	bl	800ee28 <HAL_GetTick>
 8010e88:	1bc0      	subs	r0, r0, r7
 8010e8a:	4548      	cmp	r0, r9
 8010e8c:	d805      	bhi.n	8010e9a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010e8e:	4642      	mov	r2, r8
 8010e90:	6873      	ldr	r3, [r6, #4]
 8010e92:	4013      	ands	r3, r2
 8010e94:	2b0c      	cmp	r3, #12
 8010e96:	d1f5      	bne.n	8010e84 <HAL_RCC_ClockConfig+0x15c>
 8010e98:	e796      	b.n	8010dc8 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8010e9a:	2003      	movs	r0, #3
 8010e9c:	e759      	b.n	8010d52 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010e9e:	330b      	adds	r3, #11
 8010ea0:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010ea2:	4b2b      	ldr	r3, [pc, #172]	; (8010f50 <HAL_RCC_ClockConfig+0x228>)
 8010ea4:	4699      	mov	r9, r3
 8010ea6:	e004      	b.n	8010eb2 <HAL_RCC_ClockConfig+0x18a>
 8010ea8:	f7fd ffbe 	bl	800ee28 <HAL_GetTick>
 8010eac:	1bc0      	subs	r0, r0, r7
 8010eae:	4548      	cmp	r0, r9
 8010eb0:	d8f3      	bhi.n	8010e9a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010eb2:	4642      	mov	r2, r8
 8010eb4:	6873      	ldr	r3, [r6, #4]
 8010eb6:	4013      	ands	r3, r2
 8010eb8:	2b04      	cmp	r3, #4
 8010eba:	d1f5      	bne.n	8010ea8 <HAL_RCC_ClockConfig+0x180>
 8010ebc:	e784      	b.n	8010dc8 <HAL_RCC_ClockConfig+0xa0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010ebe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010ec0:	03d2      	lsls	r2, r2, #15
 8010ec2:	d500      	bpl.n	8010ec6 <HAL_RCC_ClockConfig+0x19e>
 8010ec4:	e761      	b.n	8010d8a <HAL_RCC_ClockConfig+0x62>
 8010ec6:	e743      	b.n	8010d50 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010ec8:	6812      	ldr	r2, [r2, #0]
 8010eca:	0392      	lsls	r2, r2, #14
 8010ecc:	d4ac      	bmi.n	8010e28 <HAL_RCC_ClockConfig+0x100>
 8010ece:	e73f      	b.n	8010d50 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010ed0:	330a      	adds	r3, #10
 8010ed2:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010ed4:	4b1e      	ldr	r3, [pc, #120]	; (8010f50 <HAL_RCC_ClockConfig+0x228>)
 8010ed6:	4699      	mov	r9, r3
 8010ed8:	e004      	b.n	8010ee4 <HAL_RCC_ClockConfig+0x1bc>
 8010eda:	f7fd ffa5 	bl	800ee28 <HAL_GetTick>
 8010ede:	1bc0      	subs	r0, r0, r7
 8010ee0:	4548      	cmp	r0, r9
 8010ee2:	d8da      	bhi.n	8010e9a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010ee4:	4642      	mov	r2, r8
 8010ee6:	6873      	ldr	r3, [r6, #4]
 8010ee8:	4013      	ands	r3, r2
 8010eea:	2b08      	cmp	r3, #8
 8010eec:	d1f5      	bne.n	8010eda <HAL_RCC_ClockConfig+0x1b2>
 8010eee:	e76b      	b.n	8010dc8 <HAL_RCC_ClockConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010ef0:	4b17      	ldr	r3, [pc, #92]	; (8010f50 <HAL_RCC_ClockConfig+0x228>)
 8010ef2:	4698      	mov	r8, r3
 8010ef4:	e004      	b.n	8010f00 <HAL_RCC_ClockConfig+0x1d8>
 8010ef6:	f7fd ff97 	bl	800ee28 <HAL_GetTick>
 8010efa:	1b80      	subs	r0, r0, r6
 8010efc:	4540      	cmp	r0, r8
 8010efe:	d8cc      	bhi.n	8010e9a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010f00:	6863      	ldr	r3, [r4, #4]
 8010f02:	403b      	ands	r3, r7
 8010f04:	2b04      	cmp	r3, #4
 8010f06:	d1f6      	bne.n	8010ef6 <HAL_RCC_ClockConfig+0x1ce>
 8010f08:	e768      	b.n	8010ddc <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010f0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010f0c:	03d2      	lsls	r2, r2, #15
 8010f0e:	d48b      	bmi.n	8010e28 <HAL_RCC_ClockConfig+0x100>
 8010f10:	e71e      	b.n	8010d50 <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010f12:	4b0f      	ldr	r3, [pc, #60]	; (8010f50 <HAL_RCC_ClockConfig+0x228>)
 8010f14:	4698      	mov	r8, r3
 8010f16:	e004      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1fa>
 8010f18:	f7fd ff86 	bl	800ee28 <HAL_GetTick>
 8010f1c:	1b80      	subs	r0, r0, r6
 8010f1e:	4540      	cmp	r0, r8
 8010f20:	d8bb      	bhi.n	8010e9a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010f22:	6863      	ldr	r3, [r4, #4]
 8010f24:	403b      	ands	r3, r7
 8010f26:	2b08      	cmp	r3, #8
 8010f28:	d1f6      	bne.n	8010f18 <HAL_RCC_ClockConfig+0x1f0>
 8010f2a:	e757      	b.n	8010ddc <HAL_RCC_ClockConfig+0xb4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010f2c:	4b08      	ldr	r3, [pc, #32]	; (8010f50 <HAL_RCC_ClockConfig+0x228>)
 8010f2e:	4698      	mov	r8, r3
 8010f30:	e004      	b.n	8010f3c <HAL_RCC_ClockConfig+0x214>
 8010f32:	f7fd ff79 	bl	800ee28 <HAL_GetTick>
 8010f36:	1b80      	subs	r0, r0, r6
 8010f38:	4540      	cmp	r0, r8
 8010f3a:	d8ae      	bhi.n	8010e9a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010f3c:	6863      	ldr	r3, [r4, #4]
 8010f3e:	403b      	ands	r3, r7
 8010f40:	2b0c      	cmp	r3, #12
 8010f42:	d1f6      	bne.n	8010f32 <HAL_RCC_ClockConfig+0x20a>
 8010f44:	e74a      	b.n	8010ddc <HAL_RCC_ClockConfig+0xb4>
 8010f46:	46c0      	nop			; (mov r8, r8)
 8010f48:	40022000 	.word	0x40022000
 8010f4c:	40021000 	.word	0x40021000
 8010f50:	00001388 	.word	0x00001388
 8010f54:	fffff8ff 	.word	0xfffff8ff

08010f58 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010f58:	b570      	push	{r4, r5, r6, lr}
 8010f5a:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8010f5c:	4669      	mov	r1, sp
 8010f5e:	4b1c      	ldr	r3, [pc, #112]	; (8010fd0 <HAL_RCC_GetSysClockFreq+0x78>)
 8010f60:	000a      	movs	r2, r1
 8010f62:	0018      	movs	r0, r3
 8010f64:	c870      	ldmia	r0!, {r4, r5, r6}
 8010f66:	c270      	stmia	r2!, {r4, r5, r6}
 8010f68:	6800      	ldr	r0, [r0, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010f6a:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8010f6c:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010f6e:	aa04      	add	r2, sp, #16
 8010f70:	0010      	movs	r0, r2
 8010f72:	cb70      	ldmia	r3!, {r4, r5, r6}
 8010f74:	c070      	stmia	r0!, {r4, r5, r6}
 8010f76:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8010f78:	4d16      	ldr	r5, [pc, #88]	; (8010fd4 <HAL_RCC_GetSysClockFreq+0x7c>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010f7a:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010f7c:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8010f7e:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8010f80:	4018      	ands	r0, r3
 8010f82:	2808      	cmp	r0, #8
 8010f84:	d00a      	beq.n	8010f9c <HAL_RCC_GetSysClockFreq+0x44>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8010f86:	380c      	subs	r0, #12
 8010f88:	4243      	negs	r3, r0
 8010f8a:	4158      	adcs	r0, r3
 8010f8c:	4b12      	ldr	r3, [pc, #72]	; (8010fd8 <HAL_RCC_GetSysClockFreq+0x80>)
 8010f8e:	4240      	negs	r0, r0
 8010f90:	4018      	ands	r0, r3
 8010f92:	4b12      	ldr	r3, [pc, #72]	; (8010fdc <HAL_RCC_GetSysClockFreq+0x84>)
 8010f94:	469c      	mov	ip, r3
 8010f96:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8010f98:	b008      	add	sp, #32
 8010f9a:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8010f9c:	200f      	movs	r0, #15
 8010f9e:	0c9c      	lsrs	r4, r3, #18
 8010fa0:	4004      	ands	r4, r0
 8010fa2:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8010fa4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8010fa6:	4008      	ands	r0, r1
 8010fa8:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8010faa:	22c0      	movs	r2, #192	; 0xc0
 8010fac:	2080      	movs	r0, #128	; 0x80
 8010fae:	0252      	lsls	r2, r2, #9
 8010fb0:	4013      	ands	r3, r2
 8010fb2:	0240      	lsls	r0, r0, #9
 8010fb4:	4283      	cmp	r3, r0
 8010fb6:	d001      	beq.n	8010fbc <HAL_RCC_GetSysClockFreq+0x64>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d004      	beq.n	8010fc6 <HAL_RCC_GetSysClockFreq+0x6e>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8010fbc:	4807      	ldr	r0, [pc, #28]	; (8010fdc <HAL_RCC_GetSysClockFreq+0x84>)
 8010fbe:	f7ef f8c7 	bl	8000150 <__udivsi3>
 8010fc2:	4360      	muls	r0, r4
 8010fc4:	e7e8      	b.n	8010f98 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8010fc6:	4806      	ldr	r0, [pc, #24]	; (8010fe0 <HAL_RCC_GetSysClockFreq+0x88>)
 8010fc8:	f7ef f8c2 	bl	8000150 <__udivsi3>
 8010fcc:	4360      	muls	r0, r4
 8010fce:	e7e3      	b.n	8010f98 <HAL_RCC_GetSysClockFreq+0x40>
 8010fd0:	080173a8 	.word	0x080173a8
 8010fd4:	40021000 	.word	0x40021000
 8010fd8:	02625a00 	.word	0x02625a00
 8010fdc:	007a1200 	.word	0x007a1200
 8010fe0:	02dc6c00 	.word	0x02dc6c00

08010fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010fe4:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8010fe6:	f7ff ffb7 	bl	8010f58 <HAL_RCC_GetSysClockFreq>
 8010fea:	4b05      	ldr	r3, [pc, #20]	; (8011000 <HAL_RCC_GetHCLKFreq+0x1c>)
 8010fec:	4a05      	ldr	r2, [pc, #20]	; (8011004 <HAL_RCC_GetHCLKFreq+0x20>)
 8010fee:	685b      	ldr	r3, [r3, #4]
 8010ff0:	3220      	adds	r2, #32
 8010ff2:	061b      	lsls	r3, r3, #24
 8010ff4:	0f1b      	lsrs	r3, r3, #28
 8010ff6:	5cd3      	ldrb	r3, [r2, r3]
 8010ff8:	40d8      	lsrs	r0, r3
 8010ffa:	4b03      	ldr	r3, [pc, #12]	; (8011008 <HAL_RCC_GetHCLKFreq+0x24>)
 8010ffc:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8010ffe:	bd10      	pop	{r4, pc}
 8011000:	40021000 	.word	0x40021000
 8011004:	080173a8 	.word	0x080173a8
 8011008:	200000c4 	.word	0x200000c4

0801100c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801100c:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 801100e:	f7ff ffa3 	bl	8010f58 <HAL_RCC_GetSysClockFreq>
 8011012:	4908      	ldr	r1, [pc, #32]	; (8011034 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011014:	4a08      	ldr	r2, [pc, #32]	; (8011038 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8011016:	684b      	ldr	r3, [r1, #4]
 8011018:	3220      	adds	r2, #32
 801101a:	061b      	lsls	r3, r3, #24
 801101c:	0f1b      	lsrs	r3, r3, #28
 801101e:	5cd3      	ldrb	r3, [r2, r3]
 8011020:	40d8      	lsrs	r0, r3
 8011022:	4b06      	ldr	r3, [pc, #24]	; (801103c <HAL_RCC_GetPCLK1Freq+0x30>)
 8011024:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8011026:	684b      	ldr	r3, [r1, #4]
 8011028:	055b      	lsls	r3, r3, #21
 801102a:	0f5b      	lsrs	r3, r3, #29
 801102c:	5cd3      	ldrb	r3, [r2, r3]
 801102e:	40d8      	lsrs	r0, r3
}    
 8011030:	bd10      	pop	{r4, pc}
 8011032:	46c0      	nop			; (mov r8, r8)
 8011034:	40021000 	.word	0x40021000
 8011038:	080173a8 	.word	0x080173a8
 801103c:	200000c4 	.word	0x200000c4

08011040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011042:	46c6      	mov	lr, r8
 8011044:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011046:	6803      	ldr	r3, [r0, #0]
{
 8011048:	b082      	sub	sp, #8
 801104a:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801104c:	03da      	lsls	r2, r3, #15
 801104e:	d507      	bpl.n	8011060 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011050:	493e      	ldr	r1, [pc, #248]	; (801114c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011052:	6840      	ldr	r0, [r0, #4]
 8011054:	6a0a      	ldr	r2, [r1, #32]
 8011056:	4042      	eors	r2, r0
 8011058:	20c0      	movs	r0, #192	; 0xc0
 801105a:	0080      	lsls	r0, r0, #2
 801105c:	4202      	tst	r2, r0
 801105e:	d131      	bne.n	80110c4 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011060:	07da      	lsls	r2, r3, #31
 8011062:	d506      	bpl.n	8011072 <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011064:	2003      	movs	r0, #3
 8011066:	4939      	ldr	r1, [pc, #228]	; (801114c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011068:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 801106a:	4382      	bics	r2, r0
 801106c:	68a0      	ldr	r0, [r4, #8]
 801106e:	4302      	orrs	r2, r0
 8011070:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011072:	079a      	lsls	r2, r3, #30
 8011074:	d506      	bpl.n	8011084 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011076:	4935      	ldr	r1, [pc, #212]	; (801114c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011078:	4835      	ldr	r0, [pc, #212]	; (8011150 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 801107a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 801107c:	4002      	ands	r2, r0
 801107e:	68e0      	ldr	r0, [r4, #12]
 8011080:	4302      	orrs	r2, r0
 8011082:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011084:	035a      	lsls	r2, r3, #13
 8011086:	d506      	bpl.n	8011096 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011088:	4930      	ldr	r1, [pc, #192]	; (801114c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801108a:	4832      	ldr	r0, [pc, #200]	; (8011154 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801108c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 801108e:	4002      	ands	r2, r0
 8011090:	6920      	ldr	r0, [r4, #16]
 8011092:	4302      	orrs	r2, r0
 8011094:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011096:	069a      	lsls	r2, r3, #26
 8011098:	d506      	bpl.n	80110a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801109a:	2010      	movs	r0, #16
 801109c:	492b      	ldr	r1, [pc, #172]	; (801114c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801109e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80110a0:	4382      	bics	r2, r0
 80110a2:	6960      	ldr	r0, [r4, #20]
 80110a4:	4302      	orrs	r2, r0
 80110a6:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80110a8:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80110aa:	055b      	lsls	r3, r3, #21
 80110ac:	d506      	bpl.n	80110bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80110ae:	2140      	movs	r1, #64	; 0x40
 80110b0:	4a26      	ldr	r2, [pc, #152]	; (801114c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80110b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80110b4:	438b      	bics	r3, r1
 80110b6:	69a1      	ldr	r1, [r4, #24]
 80110b8:	430b      	orrs	r3, r1
 80110ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80110bc:	b002      	add	sp, #8
 80110be:	bc04      	pop	{r2}
 80110c0:	4690      	mov	r8, r2
 80110c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80110c4:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80110c6:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 80110c8:	69ca      	ldr	r2, [r1, #28]
 80110ca:	0540      	lsls	r0, r0, #21
 80110cc:	4302      	orrs	r2, r0
 80110ce:	61ca      	str	r2, [r1, #28]
 80110d0:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80110d2:	4d21      	ldr	r5, [pc, #132]	; (8011158 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80110d4:	4003      	ands	r3, r0
 80110d6:	9301      	str	r3, [sp, #4]
 80110d8:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80110da:	682b      	ldr	r3, [r5, #0]
 80110dc:	0076      	lsls	r6, r6, #1
 80110de:	4333      	orrs	r3, r6
 80110e0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80110e2:	f7fd fea1 	bl	800ee28 <HAL_GetTick>
 80110e6:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80110e8:	e004      	b.n	80110f4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80110ea:	f7fd fe9d 	bl	800ee28 <HAL_GetTick>
 80110ee:	1bc0      	subs	r0, r0, r7
 80110f0:	2864      	cmp	r0, #100	; 0x64
 80110f2:	d829      	bhi.n	8011148 <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80110f4:	682b      	ldr	r3, [r5, #0]
 80110f6:	4233      	tst	r3, r6
 80110f8:	d0f7      	beq.n	80110ea <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 80110fa:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80110fc:	4d13      	ldr	r5, [pc, #76]	; (801114c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 80110fe:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011100:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8011102:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011104:	4b15      	ldr	r3, [pc, #84]	; (801115c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8011106:	4302      	orrs	r2, r0
 8011108:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801110a:	6a2a      	ldr	r2, [r5, #32]
 801110c:	4814      	ldr	r0, [pc, #80]	; (8011160 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801110e:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011110:	4002      	ands	r2, r0
 8011112:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 8011114:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8011116:	078b      	lsls	r3, r1, #30
 8011118:	d408      	bmi.n	801112c <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 801111a:	4a0c      	ldr	r2, [pc, #48]	; (801114c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801111c:	490f      	ldr	r1, [pc, #60]	; (801115c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 801111e:	6a13      	ldr	r3, [r2, #32]
 8011120:	400b      	ands	r3, r1
 8011122:	6861      	ldr	r1, [r4, #4]
 8011124:	430b      	orrs	r3, r1
 8011126:	6213      	str	r3, [r2, #32]
 8011128:	6823      	ldr	r3, [r4, #0]
 801112a:	e799      	b.n	8011060 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 801112c:	f7fd fe7c 	bl	800ee28 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011130:	4b0c      	ldr	r3, [pc, #48]	; (8011164 <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 8011132:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011134:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011136:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011138:	6a2b      	ldr	r3, [r5, #32]
 801113a:	421e      	tst	r6, r3
 801113c:	d1ed      	bne.n	801111a <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801113e:	f7fd fe73 	bl	800ee28 <HAL_GetTick>
 8011142:	1bc0      	subs	r0, r0, r7
 8011144:	4540      	cmp	r0, r8
 8011146:	d9f7      	bls.n	8011138 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8011148:	2003      	movs	r0, #3
 801114a:	e7b7      	b.n	80110bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801114c:	40021000 	.word	0x40021000
 8011150:	fffcffff 	.word	0xfffcffff
 8011154:	fff3ffff 	.word	0xfff3ffff
 8011158:	40007000 	.word	0x40007000
 801115c:	fffffcff 	.word	0xfffffcff
 8011160:	fffeffff 	.word	0xfffeffff
 8011164:	00001388 	.word	0x00001388

08011168 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8011168:	4770      	bx	lr
 801116a:	46c0      	nop			; (mov r8, r8)

0801116c <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801116c:	6803      	ldr	r3, [r0, #0]
{
 801116e:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011170:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011172:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011174:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011176:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8011178:	681c      	ldr	r4, [r3, #0]
 801117a:	4b13      	ldr	r3, [pc, #76]	; (80111c8 <HAL_RTC_GetTime+0x5c>)
 801117c:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801117e:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011180:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011182:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011184:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011186:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011188:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801118a:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 801118c:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801118e:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011190:	720e      	strb	r6, [r1, #8]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011192:	2a00      	cmp	r2, #0
 8011194:	d115      	bne.n	80111c2 <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8011196:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011198:	0900      	lsrs	r0, r0, #4
 801119a:	0082      	lsls	r2, r0, #2
 801119c:	1810      	adds	r0, r2, r0
 801119e:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80111a0:	4035      	ands	r5, r6
 80111a2:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80111a4:	0918      	lsrs	r0, r3, #4
 80111a6:	0082      	lsls	r2, r0, #2
 80111a8:	1812      	adds	r2, r2, r0
 80111aa:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80111ac:	4033      	ands	r3, r6
 80111ae:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80111b0:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80111b2:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80111b4:	0093      	lsls	r3, r2, #2
 80111b6:	189b      	adds	r3, r3, r2
 80111b8:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80111ba:	4034      	ands	r4, r6
 80111bc:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80111be:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80111c0:	708c      	strb	r4, [r1, #2]
}
 80111c2:	2000      	movs	r0, #0
 80111c4:	bd70      	pop	{r4, r5, r6, pc}
 80111c6:	46c0      	nop			; (mov r8, r8)
 80111c8:	007f7f7f 	.word	0x007f7f7f

080111cc <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80111cc:	6803      	ldr	r3, [r0, #0]
 80111ce:	4815      	ldr	r0, [pc, #84]	; (8011224 <HAL_RTC_GetDate+0x58>)
 80111d0:	685b      	ldr	r3, [r3, #4]
{
 80111d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80111d4:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80111d6:	201f      	movs	r0, #31
 80111d8:	0a1c      	lsrs	r4, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80111da:	0c1f      	lsrs	r7, r3, #16
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80111dc:	b2dd      	uxtb	r5, r3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80111de:	b2e4      	uxtb	r4, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80111e0:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80111e2:	4020      	ands	r0, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80111e4:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80111e6:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80111e8:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80111ea:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80111ec:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80111ee:	2a00      	cmp	r2, #0
 80111f0:	d115      	bne.n	801121e <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 80111f2:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80111f4:	093b      	lsrs	r3, r7, #4
 80111f6:	009a      	lsls	r2, r3, #2
 80111f8:	18d2      	adds	r2, r2, r3
 80111fa:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80111fc:	4037      	ands	r7, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80111fe:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8011200:	19d2      	adds	r2, r2, r7
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011202:	0098      	lsls	r0, r3, #2
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011204:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011206:	092a      	lsrs	r2, r5, #4
 8011208:	18c0      	adds	r0, r0, r3
 801120a:	0093      	lsls	r3, r2, #2
 801120c:	189b      	adds	r3, r3, r2
 801120e:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011210:	4034      	ands	r4, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011212:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011214:	4035      	ands	r5, r6
 8011216:	1904      	adds	r4, r0, r4
 8011218:	195b      	adds	r3, r3, r5
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801121a:	704c      	strb	r4, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 801121c:	708b      	strb	r3, [r1, #2]
}
 801121e:	2000      	movs	r0, #0
 8011220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011222:	46c0      	nop			; (mov r8, r8)
 8011224:	00ffff3f 	.word	0x00ffff3f

08011228 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011228:	21a0      	movs	r1, #160	; 0xa0
 801122a:	6802      	ldr	r2, [r0, #0]
{
 801122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801122e:	68d3      	ldr	r3, [r2, #12]
{
 8011230:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011232:	438b      	bics	r3, r1
 8011234:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 8011236:	f7fd fdf7 	bl	800ee28 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801123a:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 801123c:	0007      	movs	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801123e:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011240:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011242:	e004      	b.n	801124e <HAL_RTC_WaitForSynchro+0x26>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011244:	f7fd fdf0 	bl	800ee28 <HAL_GetTick>
 8011248:	1bc0      	subs	r0, r0, r7
 801124a:	42b0      	cmp	r0, r6
 801124c:	d805      	bhi.n	801125a <HAL_RTC_WaitForSynchro+0x32>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801124e:	6823      	ldr	r3, [r4, #0]
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	421d      	tst	r5, r3
 8011254:	d0f6      	beq.n	8011244 <HAL_RTC_WaitForSynchro+0x1c>
  return HAL_OK;
 8011256:	2000      	movs	r0, #0
}
 8011258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 801125a:	2003      	movs	r0, #3
 801125c:	e7fc      	b.n	8011258 <HAL_RTC_WaitForSynchro+0x30>
 801125e:	46c0      	nop			; (mov r8, r8)

08011260 <RTC_EnterInitMode>:
{
 8011260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011262:	6803      	ldr	r3, [r0, #0]
{
 8011264:	0004      	movs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011266:	68da      	ldr	r2, [r3, #12]
 8011268:	0652      	lsls	r2, r2, #25
 801126a:	d501      	bpl.n	8011270 <RTC_EnterInitMode+0x10>
  return HAL_OK;  
 801126c:	2000      	movs	r0, #0
}
 801126e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011270:	2201      	movs	r2, #1
 8011272:	4252      	negs	r2, r2
 8011274:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8011276:	f7fd fdd7 	bl	800ee28 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801127a:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 801127c:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801127e:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011280:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011282:	e004      	b.n	801128e <RTC_EnterInitMode+0x2e>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011284:	f7fd fdd0 	bl	800ee28 <HAL_GetTick>
 8011288:	1bc0      	subs	r0, r0, r7
 801128a:	42b0      	cmp	r0, r6
 801128c:	d804      	bhi.n	8011298 <RTC_EnterInitMode+0x38>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801128e:	6823      	ldr	r3, [r4, #0]
 8011290:	68db      	ldr	r3, [r3, #12]
 8011292:	421d      	tst	r5, r3
 8011294:	d0f6      	beq.n	8011284 <RTC_EnterInitMode+0x24>
 8011296:	e7e9      	b.n	801126c <RTC_EnterInitMode+0xc>
        return HAL_TIMEOUT;
 8011298:	2003      	movs	r0, #3
 801129a:	e7e8      	b.n	801126e <RTC_EnterInitMode+0xe>

0801129c <HAL_RTC_Init>:
{
 801129c:	b570      	push	{r4, r5, r6, lr}
 801129e:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 80112a0:	d03e      	beq.n	8011320 <HAL_RTC_Init+0x84>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80112a2:	7f43      	ldrb	r3, [r0, #29]
 80112a4:	b2db      	uxtb	r3, r3
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d036      	beq.n	8011318 <HAL_RTC_Init+0x7c>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80112aa:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80112ac:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80112ae:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80112b0:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80112b2:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80112b4:	625a      	str	r2, [r3, #36]	; 0x24
 80112b6:	3a77      	subs	r2, #119	; 0x77
 80112b8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80112ba:	f7ff ffd1 	bl	8011260 <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80112be:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80112c0:	2800      	cmp	r0, #0
 80112c2:	d123      	bne.n	801130c <HAL_RTC_Init+0x70>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80112c4:	689a      	ldr	r2, [r3, #8]
 80112c6:	4917      	ldr	r1, [pc, #92]	; (8011324 <HAL_RTC_Init+0x88>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80112c8:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80112ca:	400a      	ands	r2, r1
 80112cc:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80112ce:	6862      	ldr	r2, [r4, #4]
 80112d0:	6899      	ldr	r1, [r3, #8]
 80112d2:	432a      	orrs	r2, r5
 80112d4:	6965      	ldr	r5, [r4, #20]
 80112d6:	432a      	orrs	r2, r5
 80112d8:	430a      	orrs	r2, r1
 80112da:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80112dc:	68e2      	ldr	r2, [r4, #12]
 80112de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80112e0:	68a2      	ldr	r2, [r4, #8]
 80112e2:	6919      	ldr	r1, [r3, #16]
 80112e4:	0412      	lsls	r2, r2, #16
 80112e6:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80112e8:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80112ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80112ec:	68da      	ldr	r2, [r3, #12]
 80112ee:	438a      	bics	r2, r1
 80112f0:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80112f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80112f4:	490c      	ldr	r1, [pc, #48]	; (8011328 <HAL_RTC_Init+0x8c>)
 80112f6:	400a      	ands	r2, r1
 80112f8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80112fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80112fc:	69a1      	ldr	r1, [r4, #24]
 80112fe:	430a      	orrs	r2, r1
 8011300:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011302:	22ff      	movs	r2, #255	; 0xff
 8011304:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011306:	2301      	movs	r3, #1
 8011308:	7763      	strb	r3, [r4, #29]
}
 801130a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801130c:	22ff      	movs	r2, #255	; 0xff
 801130e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011310:	2304      	movs	r3, #4
    return HAL_ERROR;
 8011312:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011314:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8011316:	e7f8      	b.n	801130a <HAL_RTC_Init+0x6e>
    hrtc->Lock = HAL_UNLOCKED;
 8011318:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 801131a:	f7ff ff25 	bl	8011168 <HAL_RTC_MspInit>
 801131e:	e7c4      	b.n	80112aa <HAL_RTC_Init+0xe>
     return HAL_ERROR;
 8011320:	2001      	movs	r0, #1
 8011322:	e7f2      	b.n	801130a <HAL_RTC_Init+0x6e>
 8011324:	ff8fffbf 	.word	0xff8fffbf
 8011328:	fffbffff 	.word	0xfffbffff

0801132c <HAL_RTC_SetTime>:
{
 801132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 801132e:	7f03      	ldrb	r3, [r0, #28]
{
 8011330:	0004      	movs	r4, r0
 8011332:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8011334:	2b01      	cmp	r3, #1
 8011336:	d100      	bne.n	801133a <HAL_RTC_SetTime+0xe>
 8011338:	e074      	b.n	8011424 <HAL_RTC_SetTime+0xf8>
 801133a:	2301      	movs	r3, #1
 801133c:	6806      	ldr	r6, [r0, #0]
 801133e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011340:	3301      	adds	r3, #1
 8011342:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011344:	68b3      	ldr	r3, [r6, #8]
 8011346:	2740      	movs	r7, #64	; 0x40
  if(Format == RTC_FORMAT_BIN)
 8011348:	2a00      	cmp	r2, #0
 801134a:	d031      	beq.n	80113b0 <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801134c:	403b      	ands	r3, r7
 801134e:	d065      	beq.n	801141c <HAL_RTC_SetTime+0xf0>
 8011350:	7a0b      	ldrb	r3, [r1, #8]
 8011352:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011354:	782f      	ldrb	r7, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011356:	7869      	ldrb	r1, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011358:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 801135a:	0209      	lsls	r1, r1, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801135c:	430f      	orrs	r7, r1
              ((uint32_t)sTime->Seconds) | \
 801135e:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011360:	430f      	orrs	r7, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011362:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011364:	23ca      	movs	r3, #202	; 0xca
 8011366:	6273      	str	r3, [r6, #36]	; 0x24
 8011368:	3b77      	subs	r3, #119	; 0x77
 801136a:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801136c:	0020      	movs	r0, r4
 801136e:	f7ff ff77 	bl	8011260 <RTC_EnterInitMode>
 8011372:	1e06      	subs	r6, r0, #0
 8011374:	d149      	bne.n	801140a <HAL_RTC_SetTime+0xde>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011376:	4935      	ldr	r1, [pc, #212]	; (801144c <HAL_RTC_SetTime+0x120>)
 8011378:	6822      	ldr	r2, [r4, #0]
 801137a:	4039      	ands	r1, r7
 801137c:	6011      	str	r1, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 801137e:	6893      	ldr	r3, [r2, #8]
 8011380:	4933      	ldr	r1, [pc, #204]	; (8011450 <HAL_RTC_SetTime+0x124>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011382:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011384:	400b      	ands	r3, r1
 8011386:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011388:	68eb      	ldr	r3, [r5, #12]
 801138a:	6891      	ldr	r1, [r2, #8]
 801138c:	4303      	orrs	r3, r0
 801138e:	430b      	orrs	r3, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011390:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011392:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011394:	68d3      	ldr	r3, [r2, #12]
 8011396:	438b      	bics	r3, r1
 8011398:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 801139a:	6893      	ldr	r3, [r2, #8]
 801139c:	069b      	lsls	r3, r3, #26
 801139e:	d543      	bpl.n	8011428 <HAL_RTC_SetTime+0xfc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80113a0:	23ff      	movs	r3, #255	; 0xff
 80113a2:	6253      	str	r3, [r2, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80113a4:	3bfe      	subs	r3, #254	; 0xfe
 80113a6:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 80113a8:	2300      	movs	r3, #0
 80113aa:	7723      	strb	r3, [r4, #28]
}
 80113ac:	0030      	movs	r0, r6
 80113ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80113b0:	401f      	ands	r7, r3
 80113b2:	d035      	beq.n	8011420 <HAL_RTC_SetTime+0xf4>
 80113b4:	7a0f      	ldrb	r7, [r1, #8]
 80113b6:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80113b8:	7828      	ldrb	r0, [r5, #0]
  uint32_t bcdhigh = 0;
 80113ba:	2300      	movs	r3, #0
  while(Value >= 10)
 80113bc:	2809      	cmp	r0, #9
 80113be:	d906      	bls.n	80113ce <HAL_RTC_SetTime+0xa2>
    Value -= 10;
 80113c0:	380a      	subs	r0, #10
 80113c2:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 80113c4:	3301      	adds	r3, #1
  while(Value >= 10)
 80113c6:	2809      	cmp	r0, #9
 80113c8:	d8fa      	bhi.n	80113c0 <HAL_RTC_SetTime+0x94>
 80113ca:	011b      	lsls	r3, r3, #4
 80113cc:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80113ce:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80113d0:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80113d2:	0400      	lsls	r0, r0, #16
  uint32_t bcdhigh = 0;
 80113d4:	2100      	movs	r1, #0
  while(Value >= 10)
 80113d6:	2b09      	cmp	r3, #9
 80113d8:	d906      	bls.n	80113e8 <HAL_RTC_SetTime+0xbc>
    Value -= 10;
 80113da:	3b0a      	subs	r3, #10
 80113dc:	b2db      	uxtb	r3, r3
    bcdhigh++;
 80113de:	3101      	adds	r1, #1
  while(Value >= 10)
 80113e0:	2b09      	cmp	r3, #9
 80113e2:	d8fa      	bhi.n	80113da <HAL_RTC_SetTime+0xae>
 80113e4:	0109      	lsls	r1, r1, #4
 80113e6:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80113e8:	430b      	orrs	r3, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80113ea:	78a9      	ldrb	r1, [r5, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80113ec:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 80113ee:	2909      	cmp	r1, #9
 80113f0:	d929      	bls.n	8011446 <HAL_RTC_SetTime+0x11a>
    Value -= 10;
 80113f2:	390a      	subs	r1, #10
 80113f4:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 80113f6:	3201      	adds	r2, #1
  while(Value >= 10)
 80113f8:	2909      	cmp	r1, #9
 80113fa:	d8fa      	bhi.n	80113f2 <HAL_RTC_SetTime+0xc6>
 80113fc:	0112      	lsls	r2, r2, #4
 80113fe:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011400:	4307      	orrs	r7, r0
 8011402:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011404:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011406:	430f      	orrs	r7, r1
 8011408:	e7ac      	b.n	8011364 <HAL_RTC_SetTime+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801140a:	22ff      	movs	r2, #255	; 0xff
 801140c:	6823      	ldr	r3, [r4, #0]
    return HAL_ERROR;
 801140e:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011410:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011412:	2304      	movs	r3, #4
 8011414:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011416:	2300      	movs	r3, #0
 8011418:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 801141a:	e7c7      	b.n	80113ac <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00;
 801141c:	720b      	strb	r3, [r1, #8]
 801141e:	e799      	b.n	8011354 <HAL_RTC_SetTime+0x28>
      sTime->TimeFormat = 0x00;
 8011420:	720f      	strb	r7, [r1, #8]
 8011422:	e7c9      	b.n	80113b8 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 8011424:	2602      	movs	r6, #2
 8011426:	e7c1      	b.n	80113ac <HAL_RTC_SetTime+0x80>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011428:	0020      	movs	r0, r4
 801142a:	f7ff fefd 	bl	8011228 <HAL_RTC_WaitForSynchro>
 801142e:	2800      	cmp	r0, #0
 8011430:	d101      	bne.n	8011436 <HAL_RTC_SetTime+0x10a>
 8011432:	6822      	ldr	r2, [r4, #0]
 8011434:	e7b4      	b.n	80113a0 <HAL_RTC_SetTime+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011436:	22ff      	movs	r2, #255	; 0xff
 8011438:	6823      	ldr	r3, [r4, #0]
 801143a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801143c:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 801143e:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011440:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8011442:	2601      	movs	r6, #1
 8011444:	e7b2      	b.n	80113ac <HAL_RTC_SetTime+0x80>
  while(Value >= 10)
 8011446:	2200      	movs	r2, #0
 8011448:	e7da      	b.n	8011400 <HAL_RTC_SetTime+0xd4>
 801144a:	46c0      	nop			; (mov r8, r8)
 801144c:	007f7f7f 	.word	0x007f7f7f
 8011450:	fffbffff 	.word	0xfffbffff

08011454 <HAL_RTC_SetDate>:
{
 8011454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8011456:	7f03      	ldrb	r3, [r0, #28]
{
 8011458:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 801145a:	2b01      	cmp	r3, #1
 801145c:	d062      	beq.n	8011524 <HAL_RTC_SetDate+0xd0>
 801145e:	2301      	movs	r3, #1
 8011460:	780f      	ldrb	r7, [r1, #0]
 8011462:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8011464:	3301      	adds	r3, #1
 8011466:	7743      	strb	r3, [r0, #29]
 8011468:	7848      	ldrb	r0, [r1, #1]
 801146a:	788e      	ldrb	r6, [r1, #2]
 801146c:	78cb      	ldrb	r3, [r1, #3]
 801146e:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011470:	2a00      	cmp	r2, #0
 8011472:	d022      	beq.n	80114ba <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011474:	041b      	lsls	r3, r3, #16
 8011476:	433b      	orrs	r3, r7
 8011478:	001c      	movs	r4, r3
                  (((uint32_t)sDate->Month) << 8) | \
 801147a:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801147c:	4334      	orrs	r4, r6
 801147e:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011480:	22ca      	movs	r2, #202	; 0xca
 8011482:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011484:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011486:	625a      	str	r2, [r3, #36]	; 0x24
 8011488:	3a77      	subs	r2, #119	; 0x77
 801148a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801148c:	f7ff fee8 	bl	8011260 <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011490:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011492:	1e06      	subs	r6, r0, #0
 8011494:	d13e      	bne.n	8011514 <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011496:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011498:	4a2b      	ldr	r2, [pc, #172]	; (8011548 <HAL_RTC_SetDate+0xf4>)
 801149a:	4014      	ands	r4, r2
 801149c:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801149e:	68da      	ldr	r2, [r3, #12]
 80114a0:	438a      	bics	r2, r1
 80114a2:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80114a4:	689a      	ldr	r2, [r3, #8]
 80114a6:	0692      	lsls	r2, r2, #26
 80114a8:	d53e      	bpl.n	8011528 <HAL_RTC_SetDate+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80114aa:	22ff      	movs	r2, #255	; 0xff
 80114ac:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80114ae:	2301      	movs	r3, #1
 80114b0:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 80114b2:	2300      	movs	r3, #0
 80114b4:	772b      	strb	r3, [r5, #28]
}
 80114b6:	0030      	movs	r0, r6
 80114b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80114ba:	2410      	movs	r4, #16
 80114bc:	4204      	tst	r4, r0
 80114be:	d003      	beq.n	80114c8 <HAL_RTC_SetDate+0x74>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 80114c0:	43a0      	bics	r0, r4
 80114c2:	300a      	adds	r0, #10
 80114c4:	b2c0      	uxtb	r0, r0
 80114c6:	7048      	strb	r0, [r1, #1]
  uint32_t bcdhigh = 0;
 80114c8:	2100      	movs	r1, #0
  while(Value >= 10)
 80114ca:	2b09      	cmp	r3, #9
 80114cc:	d906      	bls.n	80114dc <HAL_RTC_SetDate+0x88>
    Value -= 10;
 80114ce:	3b0a      	subs	r3, #10
 80114d0:	b2db      	uxtb	r3, r3
    bcdhigh++;
 80114d2:	3101      	adds	r1, #1
  while(Value >= 10)
 80114d4:	2b09      	cmp	r3, #9
 80114d6:	d8fa      	bhi.n	80114ce <HAL_RTC_SetDate+0x7a>
 80114d8:	0109      	lsls	r1, r1, #4
 80114da:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80114dc:	430b      	orrs	r3, r1
 80114de:	041b      	lsls	r3, r3, #16
  uint32_t bcdhigh = 0;
 80114e0:	2100      	movs	r1, #0
  while(Value >= 10)
 80114e2:	2809      	cmp	r0, #9
 80114e4:	d906      	bls.n	80114f4 <HAL_RTC_SetDate+0xa0>
    Value -= 10;
 80114e6:	380a      	subs	r0, #10
 80114e8:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 80114ea:	3101      	adds	r1, #1
  while(Value >= 10)
 80114ec:	2809      	cmp	r0, #9
 80114ee:	d8fa      	bhi.n	80114e6 <HAL_RTC_SetDate+0x92>
 80114f0:	0109      	lsls	r1, r1, #4
 80114f2:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80114f4:	4308      	orrs	r0, r1
 80114f6:	0200      	lsls	r0, r0, #8
  while(Value >= 10)
 80114f8:	2e09      	cmp	r6, #9
 80114fa:	d922      	bls.n	8011542 <HAL_RTC_SetDate+0xee>
    Value -= 10;
 80114fc:	3e0a      	subs	r6, #10
 80114fe:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 8011500:	3201      	adds	r2, #1
  while(Value >= 10)
 8011502:	2e09      	cmp	r6, #9
 8011504:	d8fa      	bhi.n	80114fc <HAL_RTC_SetDate+0xa8>
 8011506:	0112      	lsls	r2, r2, #4
 8011508:	b2d4      	uxtb	r4, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801150a:	433b      	orrs	r3, r7
 801150c:	4303      	orrs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801150e:	4334      	orrs	r4, r6
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011510:	431c      	orrs	r4, r3
 8011512:	e7b5      	b.n	8011480 <HAL_RTC_SetDate+0x2c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011514:	22ff      	movs	r2, #255	; 0xff
 8011516:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011518:	2304      	movs	r3, #4
 801151a:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 801151c:	2300      	movs	r3, #0
    return HAL_ERROR;
 801151e:	2601      	movs	r6, #1
    __HAL_UNLOCK(hrtc);
 8011520:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 8011522:	e7c8      	b.n	80114b6 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011524:	2602      	movs	r6, #2
 8011526:	e7c6      	b.n	80114b6 <HAL_RTC_SetDate+0x62>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011528:	0028      	movs	r0, r5
 801152a:	f7ff fe7d 	bl	8011228 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801152e:	682b      	ldr	r3, [r5, #0]
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011530:	2800      	cmp	r0, #0
 8011532:	d0ba      	beq.n	80114aa <HAL_RTC_SetDate+0x56>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011534:	22ff      	movs	r2, #255	; 0xff
 8011536:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011538:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 801153a:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 801153c:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 801153e:	2601      	movs	r6, #1
 8011540:	e7b9      	b.n	80114b6 <HAL_RTC_SetDate+0x62>
  while(Value >= 10)
 8011542:	2400      	movs	r4, #0
 8011544:	e7e1      	b.n	801150a <HAL_RTC_SetDate+0xb6>
 8011546:	46c0      	nop			; (mov r8, r8)
 8011548:	00ffff3f 	.word	0x00ffff3f

0801154c <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 801154c:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 801154e:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011550:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011552:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011554:	600a      	str	r2, [r1, #0]
}
 8011556:	4770      	bx	lr

08011558 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011558:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 801155a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 801155c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 801155e:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8011560:	6808      	ldr	r0, [r1, #0]
}
 8011562:	4770      	bx	lr

08011564 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011564:	4770      	bx	lr
 8011566:	46c0      	nop			; (mov r8, r8)

08011568 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8011568:	2239      	movs	r2, #57	; 0x39
 801156a:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801156c:	2101      	movs	r1, #1
{
 801156e:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 8011570:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011572:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8011574:	6823      	ldr	r3, [r4, #0]
 8011576:	430b      	orrs	r3, r1
 8011578:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 801157a:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 801157c:	2000      	movs	r0, #0
 801157e:	bd10      	pop	{r4, pc}

08011580 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011580:	4a22      	ldr	r2, [pc, #136]	; (801160c <TIM_Base_SetConfig+0x8c>)
{
 8011582:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 8011584:	6803      	ldr	r3, [r0, #0]
 8011586:	688d      	ldr	r5, [r1, #8]
 8011588:	680c      	ldr	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801158a:	4290      	cmp	r0, r2
 801158c:	d02c      	beq.n	80115e8 <TIM_Base_SetConfig+0x68>
 801158e:	2280      	movs	r2, #128	; 0x80
 8011590:	05d2      	lsls	r2, r2, #23
 8011592:	4290      	cmp	r0, r2
 8011594:	d012      	beq.n	80115bc <TIM_Base_SetConfig+0x3c>
 8011596:	4a1e      	ldr	r2, [pc, #120]	; (8011610 <TIM_Base_SetConfig+0x90>)
 8011598:	4290      	cmp	r0, r2
 801159a:	d00f      	beq.n	80115bc <TIM_Base_SetConfig+0x3c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801159c:	4a1d      	ldr	r2, [pc, #116]	; (8011614 <TIM_Base_SetConfig+0x94>)
 801159e:	4290      	cmp	r0, r2
 80115a0:	d02e      	beq.n	8011600 <TIM_Base_SetConfig+0x80>
 80115a2:	4a1d      	ldr	r2, [pc, #116]	; (8011618 <TIM_Base_SetConfig+0x98>)
 80115a4:	4290      	cmp	r0, r2
 80115a6:	d023      	beq.n	80115f0 <TIM_Base_SetConfig+0x70>
 80115a8:	4a1c      	ldr	r2, [pc, #112]	; (801161c <TIM_Base_SetConfig+0x9c>)
 80115aa:	4290      	cmp	r0, r2
 80115ac:	d020      	beq.n	80115f0 <TIM_Base_SetConfig+0x70>
 80115ae:	4a1c      	ldr	r2, [pc, #112]	; (8011620 <TIM_Base_SetConfig+0xa0>)
 80115b0:	4290      	cmp	r0, r2
 80115b2:	d01d      	beq.n	80115f0 <TIM_Base_SetConfig+0x70>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80115b4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80115b6:	62c5      	str	r5, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80115b8:	6284      	str	r4, [r0, #40]	; 0x28
 80115ba:	e012      	b.n	80115e2 <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80115bc:	2270      	movs	r2, #112	; 0x70
 80115be:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80115c0:	684a      	ldr	r2, [r1, #4]
 80115c2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80115c4:	4a17      	ldr	r2, [pc, #92]	; (8011624 <TIM_Base_SetConfig+0xa4>)
 80115c6:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80115c8:	68ca      	ldr	r2, [r1, #12]
 80115ca:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80115cc:	6003      	str	r3, [r0, #0]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80115ce:	4b13      	ldr	r3, [pc, #76]	; (801161c <TIM_Base_SetConfig+0x9c>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 80115d0:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80115d2:	6284      	str	r4, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80115d4:	4298      	cmp	r0, r3
 80115d6:	d002      	beq.n	80115de <TIM_Base_SetConfig+0x5e>
 80115d8:	4b11      	ldr	r3, [pc, #68]	; (8011620 <TIM_Base_SetConfig+0xa0>)
 80115da:	4298      	cmp	r0, r3
 80115dc:	d101      	bne.n	80115e2 <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80115de:	690b      	ldr	r3, [r1, #16]
 80115e0:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80115e2:	2301      	movs	r3, #1
 80115e4:	6143      	str	r3, [r0, #20]
}
 80115e6:	bd30      	pop	{r4, r5, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80115e8:	2270      	movs	r2, #112	; 0x70
 80115ea:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80115ec:	684a      	ldr	r2, [r1, #4]
 80115ee:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80115f0:	4a0c      	ldr	r2, [pc, #48]	; (8011624 <TIM_Base_SetConfig+0xa4>)
 80115f2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80115f4:	68ca      	ldr	r2, [r1, #12]
 80115f6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80115f8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80115fa:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80115fc:	6284      	str	r4, [r0, #40]	; 0x28
 80115fe:	e7ee      	b.n	80115de <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011600:	4a08      	ldr	r2, [pc, #32]	; (8011624 <TIM_Base_SetConfig+0xa4>)
 8011602:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011604:	68ca      	ldr	r2, [r1, #12]
 8011606:	4313      	orrs	r3, r2
 8011608:	e7d4      	b.n	80115b4 <TIM_Base_SetConfig+0x34>
 801160a:	46c0      	nop			; (mov r8, r8)
 801160c:	40012c00 	.word	0x40012c00
 8011610:	40000400 	.word	0x40000400
 8011614:	40002000 	.word	0x40002000
 8011618:	40014000 	.word	0x40014000
 801161c:	40014400 	.word	0x40014400
 8011620:	40014800 	.word	0x40014800
 8011624:	fffffcff 	.word	0xfffffcff

08011628 <HAL_TIM_Base_Init>:
{
 8011628:	b570      	push	{r4, r5, r6, lr}
 801162a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 801162c:	d014      	beq.n	8011658 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801162e:	2339      	movs	r3, #57	; 0x39
 8011630:	5cc3      	ldrb	r3, [r0, r3]
 8011632:	b2db      	uxtb	r3, r3
 8011634:	2b00      	cmp	r3, #0
 8011636:	d00a      	beq.n	801164e <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8011638:	2302      	movs	r3, #2
 801163a:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801163c:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 801163e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011640:	1d21      	adds	r1, r4, #4
 8011642:	f7ff ff9d 	bl	8011580 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011646:	2301      	movs	r3, #1
  return HAL_OK;
 8011648:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 801164a:	5563      	strb	r3, [r4, r5]
}
 801164c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 801164e:	2238      	movs	r2, #56	; 0x38
 8011650:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 8011652:	f7ff ff87 	bl	8011564 <HAL_TIM_Base_MspInit>
 8011656:	e7ef      	b.n	8011638 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8011658:	2001      	movs	r0, #1
 801165a:	e7f7      	b.n	801164c <HAL_TIM_Base_Init+0x24>

0801165c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 801165c:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 801165e:	2438      	movs	r4, #56	; 0x38
 8011660:	5d03      	ldrb	r3, [r0, r4]
 8011662:	2b01      	cmp	r3, #1
 8011664:	d019      	beq.n	801169a <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 8011666:	2539      	movs	r5, #57	; 0x39
 8011668:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801166a:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 801166c:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801166e:	6803      	ldr	r3, [r0, #0]
 8011670:	685a      	ldr	r2, [r3, #4]
 8011672:	43b2      	bics	r2, r6
 8011674:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011676:	685a      	ldr	r2, [r3, #4]
 8011678:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 801167a:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 801167c:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801167e:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011680:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011682:	689a      	ldr	r2, [r3, #8]
 8011684:	43b2      	bics	r2, r6
 8011686:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011688:	689a      	ldr	r2, [r3, #8]
 801168a:	430a      	orrs	r2, r1
 801168c:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 801168e:	2301      	movs	r3, #1
 8011690:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 8011692:	2300      	movs	r3, #0
 8011694:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 8011696:	2000      	movs	r0, #0
}
 8011698:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 801169a:	2002      	movs	r0, #2
 801169c:	e7fc      	b.n	8011698 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 801169e:	46c0      	nop			; (mov r8, r8)

080116a0 <HAL_UART_MspDeInit>:
 80116a0:	4770      	bx	lr
 80116a2:	46c0      	nop			; (mov r8, r8)

080116a4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80116a4:	b570      	push	{r4, r5, r6, lr}
 80116a6:	0004      	movs	r4, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80116a8:	2001      	movs	r0, #1
  if(huart == NULL)
 80116aa:	2c00      	cmp	r4, #0
 80116ac:	d012      	beq.n	80116d4 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 80116ae:	2669      	movs	r6, #105	; 0x69
 80116b0:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0;
 80116b2:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 80116b4:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 80116b6:	6823      	ldr	r3, [r4, #0]
 80116b8:	681a      	ldr	r2, [r3, #0]
 80116ba:	4382      	bics	r2, r0
 80116bc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0;
  huart->Instance->CR3 = 0x0;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80116be:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0;
 80116c0:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 80116c2:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 80116c4:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80116c6:	f7ff ffeb 	bl	80116a0 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80116ca:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 80116cc:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116ce:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 80116d0:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 80116d2:	54e5      	strb	r5, [r4, r3]
}
 80116d4:	bd70      	pop	{r4, r5, r6, pc}
 80116d6:	46c0      	nop			; (mov r8, r8)

080116d8 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80116d8:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80116da:	2069      	movs	r0, #105	; 0x69
{
 80116dc:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80116de:	5c1c      	ldrb	r4, [r3, r0]
 80116e0:	2c01      	cmp	r4, #1
 80116e2:	d003      	beq.n	80116ec <HAL_UART_Transmit_IT+0x14>
 80116e4:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80116e6:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80116e8:	2c22      	cmp	r4, #34	; 0x22
 80116ea:	d122      	bne.n	8011732 <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 80116ec:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80116ee:	2900      	cmp	r1, #0
 80116f0:	d01f      	beq.n	8011732 <HAL_UART_Transmit_IT+0x5a>
 80116f2:	2a00      	cmp	r2, #0
 80116f4:	d01d      	beq.n	8011732 <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 80116f6:	2468      	movs	r4, #104	; 0x68
 80116f8:	5d1d      	ldrb	r5, [r3, r4]
 80116fa:	2d01      	cmp	r5, #1
 80116fc:	d01d      	beq.n	801173a <HAL_UART_Transmit_IT+0x62>
 80116fe:	5518      	strb	r0, [r3, r4]
    huart->pTxBuffPtr = pData;
 8011700:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011702:	2150      	movs	r1, #80	; 0x50
 8011704:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011706:	3102      	adds	r1, #2
 8011708:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801170a:	2200      	movs	r2, #0
 801170c:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801170e:	3269      	adds	r2, #105	; 0x69
 8011710:	5c99      	ldrb	r1, [r3, r2]
 8011712:	2922      	cmp	r1, #34	; 0x22
 8011714:	d00e      	beq.n	8011734 <HAL_UART_Transmit_IT+0x5c>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011716:	2112      	movs	r1, #18
 8011718:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801171a:	2001      	movs	r0, #1
 801171c:	681a      	ldr	r2, [r3, #0]
 801171e:	6891      	ldr	r1, [r2, #8]
 8011720:	4301      	orrs	r1, r0
 8011722:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8011724:	2000      	movs	r0, #0
 8011726:	2168      	movs	r1, #104	; 0x68
 8011728:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801172a:	6813      	ldr	r3, [r2, #0]
 801172c:	3118      	adds	r1, #24
 801172e:	430b      	orrs	r3, r1
 8011730:	6013      	str	r3, [r2, #0]
  }
}
 8011732:	bd30      	pop	{r4, r5, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011734:	3110      	adds	r1, #16
 8011736:	5499      	strb	r1, [r3, r2]
 8011738:	e7ef      	b.n	801171a <HAL_UART_Transmit_IT+0x42>
    return HAL_BUSY;
 801173a:	2002      	movs	r0, #2
 801173c:	e7f9      	b.n	8011732 <HAL_UART_Transmit_IT+0x5a>
 801173e:	46c0      	nop			; (mov r8, r8)

08011740 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011740:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011742:	2069      	movs	r0, #105	; 0x69
{
 8011744:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011746:	5c1c      	ldrb	r4, [r3, r0]
 8011748:	2c01      	cmp	r4, #1
 801174a:	d003      	beq.n	8011754 <HAL_UART_Receive_IT+0x14>
 801174c:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801174e:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011750:	2c12      	cmp	r4, #18
 8011752:	d134      	bne.n	80117be <HAL_UART_Receive_IT+0x7e>
      return HAL_ERROR;
 8011754:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011756:	2900      	cmp	r1, #0
 8011758:	d031      	beq.n	80117be <HAL_UART_Receive_IT+0x7e>
 801175a:	2a00      	cmp	r2, #0
 801175c:	d02f      	beq.n	80117be <HAL_UART_Receive_IT+0x7e>
    __HAL_LOCK(huart);
 801175e:	2468      	movs	r4, #104	; 0x68
 8011760:	5d1d      	ldrb	r5, [r3, r4]
 8011762:	2d01      	cmp	r5, #1
 8011764:	d041      	beq.n	80117ea <HAL_UART_Receive_IT+0xaa>
 8011766:	5518      	strb	r0, [r3, r4]
    huart->pRxBuffPtr = pData;
 8011768:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 801176a:	2158      	movs	r1, #88	; 0x58
 801176c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 801176e:	3102      	adds	r1, #2
 8011770:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 8011772:	2180      	movs	r1, #128	; 0x80
 8011774:	689a      	ldr	r2, [r3, #8]
 8011776:	0149      	lsls	r1, r1, #5
 8011778:	428a      	cmp	r2, r1
 801177a:	d021      	beq.n	80117c0 <HAL_UART_Receive_IT+0x80>
 801177c:	2a00      	cmp	r2, #0
 801177e:	d129      	bne.n	80117d4 <HAL_UART_Receive_IT+0x94>
 8011780:	691a      	ldr	r2, [r3, #16]
 8011782:	2a00      	cmp	r2, #0
 8011784:	d133      	bne.n	80117ee <HAL_UART_Receive_IT+0xae>
 8011786:	225c      	movs	r2, #92	; 0x5c
 8011788:	21ff      	movs	r1, #255	; 0xff
 801178a:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801178c:	2200      	movs	r2, #0
 801178e:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011790:	3269      	adds	r2, #105	; 0x69
 8011792:	5c99      	ldrb	r1, [r3, r2]
 8011794:	2912      	cmp	r1, #18
 8011796:	d01a      	beq.n	80117ce <HAL_UART_Receive_IT+0x8e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011798:	2122      	movs	r1, #34	; 0x22
 801179a:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801179c:	2180      	movs	r1, #128	; 0x80
 801179e:	681a      	ldr	r2, [r3, #0]
 80117a0:	0049      	lsls	r1, r1, #1
 80117a2:	6810      	ldr	r0, [r2, #0]
 80117a4:	4301      	orrs	r1, r0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80117a6:	2001      	movs	r0, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80117a8:	6011      	str	r1, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80117aa:	6891      	ldr	r1, [r2, #8]
 80117ac:	4301      	orrs	r1, r0
 80117ae:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 80117b0:	2000      	movs	r0, #0
 80117b2:	2168      	movs	r1, #104	; 0x68
 80117b4:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80117b6:	6813      	ldr	r3, [r2, #0]
 80117b8:	3948      	subs	r1, #72	; 0x48
 80117ba:	430b      	orrs	r3, r1
 80117bc:	6013      	str	r3, [r2, #0]
  }
}
 80117be:	bd30      	pop	{r4, r5, pc}
    UART_MASK_COMPUTATION(huart);
 80117c0:	691a      	ldr	r2, [r3, #16]
 80117c2:	2a00      	cmp	r2, #0
 80117c4:	d1df      	bne.n	8011786 <HAL_UART_Receive_IT+0x46>
 80117c6:	490c      	ldr	r1, [pc, #48]	; (80117f8 <HAL_UART_Receive_IT+0xb8>)
 80117c8:	325c      	adds	r2, #92	; 0x5c
 80117ca:	5299      	strh	r1, [r3, r2]
 80117cc:	e7de      	b.n	801178c <HAL_UART_Receive_IT+0x4c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80117ce:	3120      	adds	r1, #32
 80117d0:	5499      	strb	r1, [r3, r2]
 80117d2:	e7e3      	b.n	801179c <HAL_UART_Receive_IT+0x5c>
    UART_MASK_COMPUTATION(huart);
 80117d4:	2180      	movs	r1, #128	; 0x80
 80117d6:	0549      	lsls	r1, r1, #21
 80117d8:	428a      	cmp	r2, r1
 80117da:	d1d7      	bne.n	801178c <HAL_UART_Receive_IT+0x4c>
 80117dc:	691a      	ldr	r2, [r3, #16]
 80117de:	2a00      	cmp	r2, #0
 80117e0:	d005      	beq.n	80117ee <HAL_UART_Receive_IT+0xae>
 80117e2:	225c      	movs	r2, #92	; 0x5c
 80117e4:	213f      	movs	r1, #63	; 0x3f
 80117e6:	5299      	strh	r1, [r3, r2]
 80117e8:	e7d0      	b.n	801178c <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 80117ea:	2002      	movs	r0, #2
 80117ec:	e7e7      	b.n	80117be <HAL_UART_Receive_IT+0x7e>
    UART_MASK_COMPUTATION(huart);
 80117ee:	225c      	movs	r2, #92	; 0x5c
 80117f0:	217f      	movs	r1, #127	; 0x7f
 80117f2:	5299      	strh	r1, [r3, r2]
 80117f4:	e7ca      	b.n	801178c <HAL_UART_Receive_IT+0x4c>
 80117f6:	46c0      	nop			; (mov r8, r8)
 80117f8:	000001ff 	.word	0x000001ff

080117fc <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80117fc:	b570      	push	{r4, r5, r6, lr}
 80117fe:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011800:	2069      	movs	r0, #105	; 0x69
 8011802:	5c25      	ldrb	r5, [r4, r0]
 8011804:	2d01      	cmp	r5, #1
 8011806:	d003      	beq.n	8011810 <HAL_UART_Receive_DMA+0x14>
 8011808:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801180a:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801180c:	2b12      	cmp	r3, #18
 801180e:	d12b      	bne.n	8011868 <HAL_UART_Receive_DMA+0x6c>
      return HAL_ERROR;
 8011810:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011812:	2900      	cmp	r1, #0
 8011814:	d028      	beq.n	8011868 <HAL_UART_Receive_DMA+0x6c>
 8011816:	2a00      	cmp	r2, #0
 8011818:	d026      	beq.n	8011868 <HAL_UART_Receive_DMA+0x6c>
    __HAL_LOCK(huart);
 801181a:	2368      	movs	r3, #104	; 0x68
 801181c:	5ce5      	ldrb	r5, [r4, r3]
 801181e:	2d01      	cmp	r5, #1
 8011820:	d026      	beq.n	8011870 <HAL_UART_Receive_DMA+0x74>
 8011822:	54e0      	strb	r0, [r4, r3]
    huart->RxXferSize = Size;
 8011824:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 8011826:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8011828:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801182a:	2300      	movs	r3, #0
 801182c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801182e:	3369      	adds	r3, #105	; 0x69
 8011830:	5ce0      	ldrb	r0, [r4, r3]
 8011832:	2812      	cmp	r0, #18
 8011834:	d019      	beq.n	801186a <HAL_UART_Receive_DMA+0x6e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011836:	2022      	movs	r0, #34	; 0x22
 8011838:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801183a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801183c:	4b0d      	ldr	r3, [pc, #52]	; (8011874 <HAL_UART_Receive_DMA+0x78>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801183e:	6825      	ldr	r5, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011840:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011842:	4b0d      	ldr	r3, [pc, #52]	; (8011878 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8011844:	3524      	adds	r5, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011846:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011848:	4b0c      	ldr	r3, [pc, #48]	; (801187c <HAL_UART_Receive_DMA+0x80>)
 801184a:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801184c:	0013      	movs	r3, r2
 801184e:	000a      	movs	r2, r1
 8011850:	0029      	movs	r1, r5
 8011852:	f7fd ffdb 	bl	800f80c <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8011856:	2140      	movs	r1, #64	; 0x40
 8011858:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 801185a:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 801185c:	6893      	ldr	r3, [r2, #8]
 801185e:	430b      	orrs	r3, r1
 8011860:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8011862:	2368      	movs	r3, #104	; 0x68
 8011864:	2200      	movs	r2, #0
 8011866:	54e2      	strb	r2, [r4, r3]
  }
}
 8011868:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801186a:	3020      	adds	r0, #32
 801186c:	54e0      	strb	r0, [r4, r3]
 801186e:	e7e4      	b.n	801183a <HAL_UART_Receive_DMA+0x3e>
    return HAL_BUSY;
 8011870:	2002      	movs	r0, #2
 8011872:	e7f9      	b.n	8011868 <HAL_UART_Receive_DMA+0x6c>
 8011874:	08011881 	.word	0x08011881
 8011878:	080118bd 	.word	0x080118bd
 801187c:	080118c9 	.word	0x080118c9

08011880 <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011880:	6803      	ldr	r3, [r0, #0]
{
 8011882:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011884:	6819      	ldr	r1, [r3, #0]
 8011886:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011888:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801188a:	400b      	ands	r3, r1
 801188c:	d10c      	bne.n	80118a8 <UART_DMAReceiveCplt+0x28>
  {
    huart->RxXferCount = 0;
 801188e:	215a      	movs	r1, #90	; 0x5a

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8011890:	2040      	movs	r0, #64	; 0x40
    huart->RxXferCount = 0;
 8011892:	5253      	strh	r3, [r2, r1]
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8011894:	6811      	ldr	r1, [r2, #0]
 8011896:	688b      	ldr	r3, [r1, #8]
 8011898:	4383      	bics	r3, r0
 801189a:	608b      	str	r3, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801189c:	2369      	movs	r3, #105	; 0x69
 801189e:	5cd1      	ldrb	r1, [r2, r3]
 80118a0:	2932      	cmp	r1, #50	; 0x32
 80118a2:	d005      	beq.n	80118b0 <UART_DMAReceiveCplt+0x30>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 80118a4:	2101      	movs	r1, #1
 80118a6:	54d1      	strb	r1, [r2, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 80118a8:	0010      	movs	r0, r2
 80118aa:	f7fa fe05 	bl	800c4b8 <HAL_UART_RxCpltCallback>
}
 80118ae:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 80118b0:	3920      	subs	r1, #32
 80118b2:	54d1      	strb	r1, [r2, r3]
 80118b4:	e7f8      	b.n	80118a8 <UART_DMAReceiveCplt+0x28>
 80118b6:	46c0      	nop			; (mov r8, r8)

080118b8 <HAL_UART_RxHalfCpltCallback>:
 80118b8:	4770      	bx	lr
 80118ba:	46c0      	nop			; (mov r8, r8)

080118bc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80118bc:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 80118be:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80118c0:	f7ff fffa 	bl	80118b8 <HAL_UART_RxHalfCpltCallback>
}
 80118c4:	bd10      	pop	{r4, pc}
 80118c6:	46c0      	nop			; (mov r8, r8)

080118c8 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 80118c8:	2300      	movs	r3, #0
 80118ca:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80118cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80118ce:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 80118d0:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 80118d2:	3a08      	subs	r2, #8
 80118d4:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 80118d6:	3369      	adds	r3, #105	; 0x69
 80118d8:	3a51      	subs	r2, #81	; 0x51
 80118da:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80118dc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80118de:	320f      	adds	r2, #15
 80118e0:	4313      	orrs	r3, r2
 80118e2:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80118e4:	f7fa fdc4 	bl	800c470 <HAL_UART_ErrorCallback>
}
 80118e8:	bd10      	pop	{r4, pc}
 80118ea:	46c0      	nop			; (mov r8, r8)

080118ec <UART_SetConfig>:
{
 80118ec:	b570      	push	{r4, r5, r6, lr}
 80118ee:	0005      	movs	r5, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80118f0:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80118f2:	69c1      	ldr	r1, [r0, #28]
 80118f4:	6883      	ldr	r3, [r0, #8]
 80118f6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80118f8:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80118fa:	4303      	orrs	r3, r0
 80118fc:	6968      	ldr	r0, [r5, #20]
 80118fe:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8011900:	4861      	ldr	r0, [pc, #388]	; (8011a88 <UART_SetConfig+0x19c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011902:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8011904:	4002      	ands	r2, r0
 8011906:	4313      	orrs	r3, r2
 8011908:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801190a:	6863      	ldr	r3, [r4, #4]
 801190c:	4a5f      	ldr	r2, [pc, #380]	; (8011a8c <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 801190e:	6a28      	ldr	r0, [r5, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011910:	4013      	ands	r3, r2
 8011912:	68ea      	ldr	r2, [r5, #12]
 8011914:	4313      	orrs	r3, r2
 8011916:	6063      	str	r3, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8011918:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801191a:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 801191c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801191e:	485c      	ldr	r0, [pc, #368]	; (8011a90 <UART_SetConfig+0x1a4>)
 8011920:	4002      	ands	r2, r0
 8011922:	4313      	orrs	r3, r2
 8011924:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011926:	4b5b      	ldr	r3, [pc, #364]	; (8011a94 <UART_SetConfig+0x1a8>)
 8011928:	429c      	cmp	r4, r3
 801192a:	d044      	beq.n	80119b6 <UART_SetConfig+0xca>
 801192c:	4b5a      	ldr	r3, [pc, #360]	; (8011a98 <UART_SetConfig+0x1ac>)
 801192e:	429c      	cmp	r4, r3
 8011930:	d018      	beq.n	8011964 <UART_SetConfig+0x78>
 8011932:	4b5a      	ldr	r3, [pc, #360]	; (8011a9c <UART_SetConfig+0x1b0>)
 8011934:	429c      	cmp	r4, r3
 8011936:	d100      	bne.n	801193a <UART_SetConfig+0x4e>
 8011938:	e085      	b.n	8011a46 <UART_SetConfig+0x15a>
 801193a:	4b59      	ldr	r3, [pc, #356]	; (8011aa0 <UART_SetConfig+0x1b4>)
 801193c:	429c      	cmp	r4, r3
 801193e:	d031      	beq.n	80119a4 <UART_SetConfig+0xb8>
 8011940:	4b58      	ldr	r3, [pc, #352]	; (8011aa4 <UART_SetConfig+0x1b8>)
 8011942:	429c      	cmp	r4, r3
 8011944:	d02e      	beq.n	80119a4 <UART_SetConfig+0xb8>
 8011946:	4b58      	ldr	r3, [pc, #352]	; (8011aa8 <UART_SetConfig+0x1bc>)
 8011948:	429c      	cmp	r4, r3
 801194a:	d02b      	beq.n	80119a4 <UART_SetConfig+0xb8>
 801194c:	4b57      	ldr	r3, [pc, #348]	; (8011aac <UART_SetConfig+0x1c0>)
 801194e:	429c      	cmp	r4, r3
 8011950:	d028      	beq.n	80119a4 <UART_SetConfig+0xb8>
 8011952:	4b57      	ldr	r3, [pc, #348]	; (8011ab0 <UART_SetConfig+0x1c4>)
 8011954:	429c      	cmp	r4, r3
 8011956:	d025      	beq.n	80119a4 <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011958:	2380      	movs	r3, #128	; 0x80
 801195a:	021b      	lsls	r3, r3, #8
 801195c:	4299      	cmp	r1, r3
 801195e:	d050      	beq.n	8011a02 <UART_SetConfig+0x116>
        ret = HAL_ERROR;
 8011960:	2001      	movs	r0, #1
 8011962:	e01c      	b.n	801199e <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011964:	20c0      	movs	r0, #192	; 0xc0
 8011966:	2280      	movs	r2, #128	; 0x80
 8011968:	4b52      	ldr	r3, [pc, #328]	; (8011ab4 <UART_SetConfig+0x1c8>)
 801196a:	0280      	lsls	r0, r0, #10
 801196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801196e:	0252      	lsls	r2, r2, #9
 8011970:	4003      	ands	r3, r0
 8011972:	4293      	cmp	r3, r2
 8011974:	d049      	beq.n	8011a0a <UART_SetConfig+0x11e>
 8011976:	d913      	bls.n	80119a0 <UART_SetConfig+0xb4>
 8011978:	2280      	movs	r2, #128	; 0x80
 801197a:	0292      	lsls	r2, r2, #10
 801197c:	4293      	cmp	r3, r2
 801197e:	d100      	bne.n	8011982 <UART_SetConfig+0x96>
 8011980:	e070      	b.n	8011a64 <UART_SetConfig+0x178>
 8011982:	4283      	cmp	r3, r0
 8011984:	d1e8      	bne.n	8011958 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011986:	2380      	movs	r3, #128	; 0x80
 8011988:	021b      	lsls	r3, r3, #8
 801198a:	4299      	cmp	r1, r3
 801198c:	d056      	beq.n	8011a3c <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 801198e:	6869      	ldr	r1, [r5, #4]
 8011990:	4849      	ldr	r0, [pc, #292]	; (8011ab8 <UART_SetConfig+0x1cc>)
 8011992:	f7ee fbdd 	bl	8000150 <__udivsi3>
 8011996:	0400      	lsls	r0, r0, #16
 8011998:	0c00      	lsrs	r0, r0, #16
 801199a:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801199c:	2000      	movs	r0, #0
}
 801199e:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d1d9      	bne.n	8011958 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80119a4:	2380      	movs	r3, #128	; 0x80
 80119a6:	021b      	lsls	r3, r3, #8
 80119a8:	4299      	cmp	r1, r3
 80119aa:	d060      	beq.n	8011a6e <UART_SetConfig+0x182>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80119ac:	f7ff fb2e 	bl	801100c <HAL_RCC_GetPCLK1Freq>
 80119b0:	682c      	ldr	r4, [r5, #0]
 80119b2:	6869      	ldr	r1, [r5, #4]
 80119b4:	e7ed      	b.n	8011992 <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80119b6:	4b3f      	ldr	r3, [pc, #252]	; (8011ab4 <UART_SetConfig+0x1c8>)
 80119b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119ba:	2303      	movs	r3, #3
 80119bc:	4013      	ands	r3, r2
 80119be:	4a3f      	ldr	r2, [pc, #252]	; (8011abc <UART_SetConfig+0x1d0>)
 80119c0:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80119c2:	2280      	movs	r2, #128	; 0x80
 80119c4:	0212      	lsls	r2, r2, #8
 80119c6:	4291      	cmp	r1, r2
 80119c8:	d00e      	beq.n	80119e8 <UART_SetConfig+0xfc>
    switch (clocksource)
 80119ca:	2b02      	cmp	r3, #2
 80119cc:	d0df      	beq.n	801198e <UART_SetConfig+0xa2>
 80119ce:	d956      	bls.n	8011a7e <UART_SetConfig+0x192>
 80119d0:	2b04      	cmp	r3, #4
 80119d2:	d01e      	beq.n	8011a12 <UART_SetConfig+0x126>
 80119d4:	2b08      	cmp	r3, #8
 80119d6:	d1c3      	bne.n	8011960 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80119d8:	2080      	movs	r0, #128	; 0x80
 80119da:	6869      	ldr	r1, [r5, #4]
 80119dc:	0200      	lsls	r0, r0, #8
 80119de:	f7ee fbb7 	bl	8000150 <__udivsi3>
 80119e2:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80119e4:	2000      	movs	r0, #0
        break;
 80119e6:	e7da      	b.n	801199e <UART_SetConfig+0xb2>
    switch (clocksource)
 80119e8:	2b02      	cmp	r3, #2
 80119ea:	d027      	beq.n	8011a3c <UART_SetConfig+0x150>
 80119ec:	d907      	bls.n	80119fe <UART_SetConfig+0x112>
 80119ee:	2b04      	cmp	r3, #4
 80119f0:	d014      	beq.n	8011a1c <UART_SetConfig+0x130>
 80119f2:	2b08      	cmp	r3, #8
 80119f4:	d105      	bne.n	8011a02 <UART_SetConfig+0x116>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80119f6:	2080      	movs	r0, #128	; 0x80
 80119f8:	6869      	ldr	r1, [r5, #4]
 80119fa:	0240      	lsls	r0, r0, #9
 80119fc:	e020      	b.n	8011a40 <UART_SetConfig+0x154>
    switch (clocksource)
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d035      	beq.n	8011a6e <UART_SetConfig+0x182>
 8011a02:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 8011a04:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8011a06:	60e3      	str	r3, [r4, #12]
 8011a08:	e7c9      	b.n	801199e <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011a0a:	2380      	movs	r3, #128	; 0x80
 8011a0c:	021b      	lsls	r3, r3, #8
 8011a0e:	4299      	cmp	r1, r3
 8011a10:	d004      	beq.n	8011a1c <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8011a12:	f7ff faa1 	bl	8010f58 <HAL_RCC_GetSysClockFreq>
 8011a16:	682c      	ldr	r4, [r5, #0]
 8011a18:	6869      	ldr	r1, [r5, #4]
 8011a1a:	e7ba      	b.n	8011992 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8011a1c:	f7ff fa9c 	bl	8010f58 <HAL_RCC_GetSysClockFreq>
 8011a20:	6869      	ldr	r1, [r5, #4]
 8011a22:	0040      	lsls	r0, r0, #1
 8011a24:	f7ee fb94 	bl	8000150 <__udivsi3>
 8011a28:	682c      	ldr	r4, [r5, #0]
 8011a2a:	220f      	movs	r2, #15
 8011a2c:	0703      	lsls	r3, r0, #28
 8011a2e:	0f5b      	lsrs	r3, r3, #29
 8011a30:	4390      	bics	r0, r2
 8011a32:	4303      	orrs	r3, r0
 8011a34:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8011a36:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8011a38:	60e3      	str	r3, [r4, #12]
 8011a3a:	e7b0      	b.n	801199e <UART_SetConfig+0xb2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8011a3c:	6869      	ldr	r1, [r5, #4]
 8011a3e:	4820      	ldr	r0, [pc, #128]	; (8011ac0 <UART_SetConfig+0x1d4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8011a40:	f7ee fb86 	bl	8000150 <__udivsi3>
 8011a44:	e7f1      	b.n	8011a2a <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011a46:	20c0      	movs	r0, #192	; 0xc0
 8011a48:	2280      	movs	r2, #128	; 0x80
 8011a4a:	4b1a      	ldr	r3, [pc, #104]	; (8011ab4 <UART_SetConfig+0x1c8>)
 8011a4c:	0300      	lsls	r0, r0, #12
 8011a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a50:	02d2      	lsls	r2, r2, #11
 8011a52:	4003      	ands	r3, r0
 8011a54:	4293      	cmp	r3, r2
 8011a56:	d0d8      	beq.n	8011a0a <UART_SetConfig+0x11e>
 8011a58:	d9a2      	bls.n	80119a0 <UART_SetConfig+0xb4>
 8011a5a:	2280      	movs	r2, #128	; 0x80
 8011a5c:	0312      	lsls	r2, r2, #12
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	d000      	beq.n	8011a64 <UART_SetConfig+0x178>
 8011a62:	e78e      	b.n	8011982 <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011a64:	2380      	movs	r3, #128	; 0x80
 8011a66:	021b      	lsls	r3, r3, #8
 8011a68:	4299      	cmp	r1, r3
 8011a6a:	d1b5      	bne.n	80119d8 <UART_SetConfig+0xec>
 8011a6c:	e7c3      	b.n	80119f6 <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8011a6e:	f7ff facd 	bl	801100c <HAL_RCC_GetPCLK1Freq>
 8011a72:	6869      	ldr	r1, [r5, #4]
 8011a74:	0040      	lsls	r0, r0, #1
 8011a76:	f7ee fb6b 	bl	8000150 <__udivsi3>
 8011a7a:	682c      	ldr	r4, [r5, #0]
 8011a7c:	e7d5      	b.n	8011a2a <UART_SetConfig+0x13e>
    switch (clocksource)
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d094      	beq.n	80119ac <UART_SetConfig+0xc0>
        ret = HAL_ERROR;
 8011a82:	2001      	movs	r0, #1
 8011a84:	e78b      	b.n	801199e <UART_SetConfig+0xb2>
 8011a86:	46c0      	nop			; (mov r8, r8)
 8011a88:	efff69f3 	.word	0xefff69f3
 8011a8c:	ffffcfff 	.word	0xffffcfff
 8011a90:	fffff4ff 	.word	0xfffff4ff
 8011a94:	40013800 	.word	0x40013800
 8011a98:	40004400 	.word	0x40004400
 8011a9c:	40004800 	.word	0x40004800
 8011aa0:	40004c00 	.word	0x40004c00
 8011aa4:	40005000 	.word	0x40005000
 8011aa8:	40011400 	.word	0x40011400
 8011aac:	40011800 	.word	0x40011800
 8011ab0:	40011c00 	.word	0x40011c00
 8011ab4:	40021000 	.word	0x40021000
 8011ab8:	007a1200 	.word	0x007a1200
 8011abc:	080173d8 	.word	0x080173d8
 8011ac0:	00f42400 	.word	0x00f42400

08011ac4 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011ac4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8011ac6:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011ac8:	07da      	lsls	r2, r3, #31
 8011aca:	d506      	bpl.n	8011ada <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011acc:	6801      	ldr	r1, [r0, #0]
 8011ace:	4c28      	ldr	r4, [pc, #160]	; (8011b70 <UART_AdvFeatureConfig+0xac>)
 8011ad0:	684a      	ldr	r2, [r1, #4]
 8011ad2:	4022      	ands	r2, r4
 8011ad4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011ad6:	4322      	orrs	r2, r4
 8011ad8:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011ada:	079a      	lsls	r2, r3, #30
 8011adc:	d506      	bpl.n	8011aec <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011ade:	6801      	ldr	r1, [r0, #0]
 8011ae0:	4c24      	ldr	r4, [pc, #144]	; (8011b74 <UART_AdvFeatureConfig+0xb0>)
 8011ae2:	684a      	ldr	r2, [r1, #4]
 8011ae4:	4022      	ands	r2, r4
 8011ae6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8011ae8:	4322      	orrs	r2, r4
 8011aea:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011aec:	075a      	lsls	r2, r3, #29
 8011aee:	d506      	bpl.n	8011afe <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011af0:	6801      	ldr	r1, [r0, #0]
 8011af2:	4c21      	ldr	r4, [pc, #132]	; (8011b78 <UART_AdvFeatureConfig+0xb4>)
 8011af4:	684a      	ldr	r2, [r1, #4]
 8011af6:	4022      	ands	r2, r4
 8011af8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8011afa:	4322      	orrs	r2, r4
 8011afc:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011afe:	071a      	lsls	r2, r3, #28
 8011b00:	d506      	bpl.n	8011b10 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011b02:	6801      	ldr	r1, [r0, #0]
 8011b04:	4c1d      	ldr	r4, [pc, #116]	; (8011b7c <UART_AdvFeatureConfig+0xb8>)
 8011b06:	684a      	ldr	r2, [r1, #4]
 8011b08:	4022      	ands	r2, r4
 8011b0a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8011b0c:	4322      	orrs	r2, r4
 8011b0e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011b10:	06da      	lsls	r2, r3, #27
 8011b12:	d506      	bpl.n	8011b22 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011b14:	6801      	ldr	r1, [r0, #0]
 8011b16:	4c1a      	ldr	r4, [pc, #104]	; (8011b80 <UART_AdvFeatureConfig+0xbc>)
 8011b18:	688a      	ldr	r2, [r1, #8]
 8011b1a:	4022      	ands	r2, r4
 8011b1c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8011b1e:	4322      	orrs	r2, r4
 8011b20:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011b22:	069a      	lsls	r2, r3, #26
 8011b24:	d506      	bpl.n	8011b34 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011b26:	6801      	ldr	r1, [r0, #0]
 8011b28:	4c16      	ldr	r4, [pc, #88]	; (8011b84 <UART_AdvFeatureConfig+0xc0>)
 8011b2a:	688a      	ldr	r2, [r1, #8]
 8011b2c:	4022      	ands	r2, r4
 8011b2e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8011b30:	4322      	orrs	r2, r4
 8011b32:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011b34:	065a      	lsls	r2, r3, #25
 8011b36:	d50a      	bpl.n	8011b4e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011b38:	6801      	ldr	r1, [r0, #0]
 8011b3a:	4d13      	ldr	r5, [pc, #76]	; (8011b88 <UART_AdvFeatureConfig+0xc4>)
 8011b3c:	684a      	ldr	r2, [r1, #4]
 8011b3e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8011b40:	402a      	ands	r2, r5
 8011b42:	4322      	orrs	r2, r4
 8011b44:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011b46:	2280      	movs	r2, #128	; 0x80
 8011b48:	0352      	lsls	r2, r2, #13
 8011b4a:	4294      	cmp	r4, r2
 8011b4c:	d009      	beq.n	8011b62 <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011b4e:	061b      	lsls	r3, r3, #24
 8011b50:	d506      	bpl.n	8011b60 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011b52:	6802      	ldr	r2, [r0, #0]
 8011b54:	490d      	ldr	r1, [pc, #52]	; (8011b8c <UART_AdvFeatureConfig+0xc8>)
 8011b56:	6853      	ldr	r3, [r2, #4]
 8011b58:	400b      	ands	r3, r1
 8011b5a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8011b5c:	430b      	orrs	r3, r1
 8011b5e:	6053      	str	r3, [r2, #4]
}
 8011b60:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011b62:	684a      	ldr	r2, [r1, #4]
 8011b64:	4c0a      	ldr	r4, [pc, #40]	; (8011b90 <UART_AdvFeatureConfig+0xcc>)
 8011b66:	4022      	ands	r2, r4
 8011b68:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8011b6a:	4322      	orrs	r2, r4
 8011b6c:	604a      	str	r2, [r1, #4]
 8011b6e:	e7ee      	b.n	8011b4e <UART_AdvFeatureConfig+0x8a>
 8011b70:	fffdffff 	.word	0xfffdffff
 8011b74:	fffeffff 	.word	0xfffeffff
 8011b78:	fffbffff 	.word	0xfffbffff
 8011b7c:	ffff7fff 	.word	0xffff7fff
 8011b80:	ffffefff 	.word	0xffffefff
 8011b84:	ffffdfff 	.word	0xffffdfff
 8011b88:	ffefffff 	.word	0xffefffff
 8011b8c:	fff7ffff 	.word	0xfff7ffff
 8011b90:	ff9fffff 	.word	0xff9fffff

08011b94 <UART_WaitOnFlagUntilTimeout>:
{
 8011b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b96:	46c6      	mov	lr, r8
 8011b98:	4690      	mov	r8, r2
 8011b9a:	b500      	push	{lr}
 8011b9c:	001d      	movs	r5, r3
 8011b9e:	0006      	movs	r6, r0
 8011ba0:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 8011ba2:	f7fd f941 	bl	800ee28 <HAL_GetTick>
  if(Status == RESET)
 8011ba6:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 8011ba8:	0007      	movs	r7, r0
  if(Status == RESET)
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d112      	bne.n	8011bd4 <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8011bae:	6832      	ldr	r2, [r6, #0]
 8011bb0:	e001      	b.n	8011bb6 <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 8011bb2:	1c6b      	adds	r3, r5, #1
 8011bb4:	d117      	bne.n	8011be6 <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8011bb6:	69d3      	ldr	r3, [r2, #28]
 8011bb8:	4023      	ands	r3, r4
 8011bba:	42a3      	cmp	r3, r4
 8011bbc:	d1f9      	bne.n	8011bb2 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8011bbe:	2000      	movs	r0, #0
}
 8011bc0:	bc04      	pop	{r2}
 8011bc2:	4690      	mov	r8, r2
 8011bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011bc6:	2d00      	cmp	r5, #0
 8011bc8:	d015      	beq.n	8011bf6 <UART_WaitOnFlagUntilTimeout+0x62>
 8011bca:	f7fd f92d 	bl	800ee28 <HAL_GetTick>
 8011bce:	1bc0      	subs	r0, r0, r7
 8011bd0:	42a8      	cmp	r0, r5
 8011bd2:	d80f      	bhi.n	8011bf4 <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8011bd4:	6832      	ldr	r2, [r6, #0]
 8011bd6:	e001      	b.n	8011bdc <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 8011bd8:	1c6b      	adds	r3, r5, #1
 8011bda:	d1f4      	bne.n	8011bc6 <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8011bdc:	69d3      	ldr	r3, [r2, #28]
 8011bde:	4023      	ands	r3, r4
 8011be0:	42a3      	cmp	r3, r4
 8011be2:	d0f9      	beq.n	8011bd8 <UART_WaitOnFlagUntilTimeout+0x44>
 8011be4:	e7eb      	b.n	8011bbe <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011be6:	2d00      	cmp	r5, #0
 8011be8:	d005      	beq.n	8011bf6 <UART_WaitOnFlagUntilTimeout+0x62>
 8011bea:	f7fd f91d 	bl	800ee28 <HAL_GetTick>
 8011bee:	1bc0      	subs	r0, r0, r7
 8011bf0:	42a8      	cmp	r0, r5
 8011bf2:	d9dc      	bls.n	8011bae <UART_WaitOnFlagUntilTimeout+0x1a>
 8011bf4:	6832      	ldr	r2, [r6, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011bf6:	2180      	movs	r1, #128	; 0x80
 8011bf8:	6813      	ldr	r3, [r2, #0]
          return HAL_TIMEOUT;
 8011bfa:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011bfc:	438b      	bics	r3, r1
 8011bfe:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011c00:	6813      	ldr	r3, [r2, #0]
 8011c02:	3960      	subs	r1, #96	; 0x60
 8011c04:	438b      	bics	r3, r1
 8011c06:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011c08:	6813      	ldr	r3, [r2, #0]
 8011c0a:	4907      	ldr	r1, [pc, #28]	; (8011c28 <UART_WaitOnFlagUntilTimeout+0x94>)
 8011c0c:	400b      	ands	r3, r1
 8011c0e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011c10:	6893      	ldr	r3, [r2, #8]
 8011c12:	3103      	adds	r1, #3
 8011c14:	31ff      	adds	r1, #255	; 0xff
 8011c16:	438b      	bics	r3, r1
 8011c18:	6093      	str	r3, [r2, #8]
          huart->State = HAL_UART_STATE_READY;
 8011c1a:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 8011c1c:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 8011c1e:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 8011c20:	3b01      	subs	r3, #1
 8011c22:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8011c24:	e7cc      	b.n	8011bc0 <UART_WaitOnFlagUntilTimeout+0x2c>
 8011c26:	46c0      	nop			; (mov r8, r8)
 8011c28:	fffffeff 	.word	0xfffffeff

08011c2c <HAL_UART_Transmit>:
{
 8011c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c2e:	46c6      	mov	lr, r8
 8011c30:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011c32:	2369      	movs	r3, #105	; 0x69
{
 8011c34:	b500      	push	{lr}
 8011c36:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011c38:	5cc1      	ldrb	r1, [r0, r3]
{
 8011c3a:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011c3c:	2901      	cmp	r1, #1
 8011c3e:	d003      	beq.n	8011c48 <HAL_UART_Transmit+0x1c>
 8011c40:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8011c42:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011c44:	2b22      	cmp	r3, #34	; 0x22
 8011c46:	d147      	bne.n	8011cd8 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8011c48:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011c4a:	2d00      	cmp	r5, #0
 8011c4c:	d044      	beq.n	8011cd8 <HAL_UART_Transmit+0xac>
 8011c4e:	2a00      	cmp	r2, #0
 8011c50:	d042      	beq.n	8011cd8 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8011c52:	2368      	movs	r3, #104	; 0x68
 8011c54:	5ce1      	ldrb	r1, [r4, r3]
 8011c56:	2901      	cmp	r1, #1
 8011c58:	d046      	beq.n	8011ce8 <HAL_UART_Transmit+0xbc>
 8011c5a:	54e0      	strb	r0, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011c60:	3369      	adds	r3, #105	; 0x69
 8011c62:	5ce1      	ldrb	r1, [r4, r3]
 8011c64:	2922      	cmp	r1, #34	; 0x22
 8011c66:	d03a      	beq.n	8011cde <HAL_UART_Transmit+0xb2>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011c68:	2112      	movs	r1, #18
 8011c6a:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8011c6c:	2350      	movs	r3, #80	; 0x50
 8011c6e:	52e2      	strh	r2, [r4, r3]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c70:	2380      	movs	r3, #128	; 0x80
 8011c72:	015b      	lsls	r3, r3, #5
      huart->TxXferCount--;
 8011c74:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c76:	4698      	mov	r8, r3
 8011c78:	e005      	b.n	8011c86 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8011c7a:	782a      	ldrb	r2, [r5, #0]
 8011c7c:	3501      	adds	r5, #1
 8011c7e:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8011c80:	5ba2      	ldrh	r2, [r4, r6]
 8011c82:	2a00      	cmp	r2, #0
 8011c84:	d018      	beq.n	8011cb8 <HAL_UART_Transmit+0x8c>
      huart->TxXferCount--;
 8011c86:	3a01      	subs	r2, #1
 8011c88:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8011c8a:	003b      	movs	r3, r7
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	2180      	movs	r1, #128	; 0x80
 8011c90:	0020      	movs	r0, r4
 8011c92:	f7ff ff7f 	bl	8011b94 <UART_WaitOnFlagUntilTimeout>
 8011c96:	2800      	cmp	r0, #0
 8011c98:	d124      	bne.n	8011ce4 <HAL_UART_Transmit+0xb8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c9a:	68a2      	ldr	r2, [r4, #8]
 8011c9c:	6823      	ldr	r3, [r4, #0]
 8011c9e:	4542      	cmp	r2, r8
 8011ca0:	d1eb      	bne.n	8011c7a <HAL_UART_Transmit+0x4e>
 8011ca2:	6922      	ldr	r2, [r4, #16]
 8011ca4:	2a00      	cmp	r2, #0
 8011ca6:	d1e8      	bne.n	8011c7a <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011ca8:	882a      	ldrh	r2, [r5, #0]
        pData += 2;
 8011caa:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011cac:	05d2      	lsls	r2, r2, #23
 8011cae:	0dd2      	lsrs	r2, r2, #23
 8011cb0:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8011cb2:	5ba2      	ldrh	r2, [r4, r6]
 8011cb4:	2a00      	cmp	r2, #0
 8011cb6:	d1e6      	bne.n	8011c86 <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8011cb8:	003b      	movs	r3, r7
 8011cba:	2140      	movs	r1, #64	; 0x40
 8011cbc:	0020      	movs	r0, r4
 8011cbe:	f7ff ff69 	bl	8011b94 <UART_WaitOnFlagUntilTimeout>
 8011cc2:	2800      	cmp	r0, #0
 8011cc4:	d10e      	bne.n	8011ce4 <HAL_UART_Transmit+0xb8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011cc6:	2369      	movs	r3, #105	; 0x69
 8011cc8:	5ce2      	ldrb	r2, [r4, r3]
 8011cca:	2a32      	cmp	r2, #50	; 0x32
 8011ccc:	d00e      	beq.n	8011cec <HAL_UART_Transmit+0xc0>
      huart->State = HAL_UART_STATE_READY;
 8011cce:	2201      	movs	r2, #1
 8011cd0:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8011cd2:	2368      	movs	r3, #104	; 0x68
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	54e2      	strb	r2, [r4, r3]
}
 8011cd8:	bc04      	pop	{r2}
 8011cda:	4690      	mov	r8, r2
 8011cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011cde:	3110      	adds	r1, #16
 8011ce0:	54e1      	strb	r1, [r4, r3]
 8011ce2:	e7c3      	b.n	8011c6c <HAL_UART_Transmit+0x40>
        return HAL_TIMEOUT;
 8011ce4:	2003      	movs	r0, #3
 8011ce6:	e7f7      	b.n	8011cd8 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 8011ce8:	2002      	movs	r0, #2
 8011cea:	e7f5      	b.n	8011cd8 <HAL_UART_Transmit+0xac>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011cec:	3a10      	subs	r2, #16
 8011cee:	54e2      	strb	r2, [r4, r3]
 8011cf0:	e7ef      	b.n	8011cd2 <HAL_UART_Transmit+0xa6>
 8011cf2:	46c0      	nop			; (mov r8, r8)

08011cf4 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cf4:	2300      	movs	r3, #0
{
 8011cf6:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011cf8:	4a1a      	ldr	r2, [pc, #104]	; (8011d64 <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cfa:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011cfc:	6803      	ldr	r3, [r0, #0]
{
 8011cfe:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011d00:	4293      	cmp	r3, r2
 8011d02:	d00d      	beq.n	8011d20 <UART_CheckIdleState+0x2c>
 8011d04:	4a18      	ldr	r2, [pc, #96]	; (8011d68 <UART_CheckIdleState+0x74>)
 8011d06:	4293      	cmp	r3, r2
 8011d08:	d00a      	beq.n	8011d20 <UART_CheckIdleState+0x2c>
 8011d0a:	4a18      	ldr	r2, [pc, #96]	; (8011d6c <UART_CheckIdleState+0x78>)
 8011d0c:	4293      	cmp	r3, r2
 8011d0e:	d007      	beq.n	8011d20 <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 8011d10:	2369      	movs	r3, #105	; 0x69
 8011d12:	2201      	movs	r2, #1
 8011d14:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8011d16:	2200      	movs	r2, #0
  return HAL_OK;
 8011d18:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8011d1a:	3b01      	subs	r3, #1
 8011d1c:	54e2      	strb	r2, [r4, r3]
}
 8011d1e:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011d20:	681a      	ldr	r2, [r3, #0]
 8011d22:	0712      	lsls	r2, r2, #28
 8011d24:	d40e      	bmi.n	8011d44 <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	075b      	lsls	r3, r3, #29
 8011d2a:	d5f1      	bpl.n	8011d10 <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8011d2c:	23fa      	movs	r3, #250	; 0xfa
 8011d2e:	2180      	movs	r1, #128	; 0x80
 8011d30:	009b      	lsls	r3, r3, #2
 8011d32:	2200      	movs	r2, #0
 8011d34:	03c9      	lsls	r1, r1, #15
 8011d36:	0020      	movs	r0, r4
 8011d38:	f7ff ff2c 	bl	8011b94 <UART_WaitOnFlagUntilTimeout>
 8011d3c:	2800      	cmp	r0, #0
 8011d3e:	d0e7      	beq.n	8011d10 <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 8011d40:	2003      	movs	r0, #3
 8011d42:	e7ec      	b.n	8011d1e <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8011d44:	23fa      	movs	r3, #250	; 0xfa
 8011d46:	2180      	movs	r1, #128	; 0x80
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	0389      	lsls	r1, r1, #14
 8011d4e:	0020      	movs	r0, r4
 8011d50:	f7ff ff20 	bl	8011b94 <UART_WaitOnFlagUntilTimeout>
 8011d54:	2800      	cmp	r0, #0
 8011d56:	d1f3      	bne.n	8011d40 <UART_CheckIdleState+0x4c>
 8011d58:	6823      	ldr	r3, [r4, #0]
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	075b      	lsls	r3, r3, #29
 8011d5e:	d5d7      	bpl.n	8011d10 <UART_CheckIdleState+0x1c>
 8011d60:	e7e4      	b.n	8011d2c <UART_CheckIdleState+0x38>
 8011d62:	46c0      	nop			; (mov r8, r8)
 8011d64:	40013800 	.word	0x40013800
 8011d68:	40004400 	.word	0x40004400
 8011d6c:	40004800 	.word	0x40004800

08011d70 <HAL_UART_Init>:
{
 8011d70:	b510      	push	{r4, lr}
 8011d72:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8011d74:	d02a      	beq.n	8011dcc <HAL_UART_Init+0x5c>
  if(huart->State == HAL_UART_STATE_RESET)
 8011d76:	2369      	movs	r3, #105	; 0x69
 8011d78:	5cc3      	ldrb	r3, [r0, r3]
 8011d7a:	b2db      	uxtb	r3, r3
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d020      	beq.n	8011dc2 <HAL_UART_Init+0x52>
  huart->State = HAL_UART_STATE_BUSY;
 8011d80:	2369      	movs	r3, #105	; 0x69
 8011d82:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 8011d84:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 8011d86:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8011d88:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011d8a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8011d8c:	6813      	ldr	r3, [r2, #0]
 8011d8e:	438b      	bics	r3, r1
 8011d90:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011d92:	f7ff fdab 	bl	80118ec <UART_SetConfig>
 8011d96:	2801      	cmp	r0, #1
 8011d98:	d018      	beq.n	8011dcc <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011d9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d117      	bne.n	8011dd0 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8011da0:	6823      	ldr	r3, [r4, #0]
 8011da2:	490d      	ldr	r1, [pc, #52]	; (8011dd8 <HAL_UART_Init+0x68>)
 8011da4:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8011da6:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8011da8:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8011daa:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8011dac:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8011dae:	689a      	ldr	r2, [r3, #8]
 8011db0:	438a      	bics	r2, r1
 8011db2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8011db4:	681a      	ldr	r2, [r3, #0]
 8011db6:	3929      	subs	r1, #41	; 0x29
 8011db8:	430a      	orrs	r2, r1
 8011dba:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8011dbc:	f7ff ff9a 	bl	8011cf4 <UART_CheckIdleState>
}
 8011dc0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8011dc2:	2268      	movs	r2, #104	; 0x68
 8011dc4:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8011dc6:	f7fa ff01 	bl	800cbcc <HAL_UART_MspInit>
 8011dca:	e7d9      	b.n	8011d80 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8011dcc:	2001      	movs	r0, #1
 8011dce:	e7f7      	b.n	8011dc0 <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 8011dd0:	0020      	movs	r0, r4
 8011dd2:	f7ff fe77 	bl	8011ac4 <UART_AdvFeatureConfig>
 8011dd6:	e7e3      	b.n	8011da0 <HAL_UART_Init+0x30>
 8011dd8:	ffffb7ff 	.word	0xffffb7ff

08011ddc <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011ddc:	2269      	movs	r2, #105	; 0x69
{
 8011dde:	b530      	push	{r4, r5, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011de0:	5c81      	ldrb	r1, [r0, r2]
{
 8011de2:	0003      	movs	r3, r0
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011de4:	2912      	cmp	r1, #18
 8011de6:	d003      	beq.n	8011df0 <UART_Transmit_IT+0x14>
 8011de8:	5c82      	ldrb	r2, [r0, r2]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8011dea:	2002      	movs	r0, #2
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011dec:	2a32      	cmp	r2, #50	; 0x32
 8011dee:	d112      	bne.n	8011e16 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8011df0:	2252      	movs	r2, #82	; 0x52
 8011df2:	5a9a      	ldrh	r2, [r3, r2]
 8011df4:	6819      	ldr	r1, [r3, #0]
 8011df6:	2a00      	cmp	r2, #0
 8011df8:	d00e      	beq.n	8011e18 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011dfa:	2480      	movs	r4, #128	; 0x80
 8011dfc:	689d      	ldr	r5, [r3, #8]
 8011dfe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011e00:	0164      	lsls	r4, r4, #5
 8011e02:	42a5      	cmp	r5, r4
 8011e04:	d012      	beq.n	8011e2c <UART_Transmit_IT+0x50>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8011e06:	1c44      	adds	r4, r0, #1
 8011e08:	64dc      	str	r4, [r3, #76]	; 0x4c
 8011e0a:	7800      	ldrb	r0, [r0, #0]
 8011e0c:	8508      	strh	r0, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8011e0e:	2152      	movs	r1, #82	; 0x52
      return HAL_OK;
 8011e10:	2000      	movs	r0, #0
      huart->TxXferCount--;
 8011e12:	3a01      	subs	r2, #1
 8011e14:	525a      	strh	r2, [r3, r1]
  }
}
 8011e16:	bd30      	pop	{r4, r5, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011e18:	680b      	ldr	r3, [r1, #0]
 8011e1a:	3280      	adds	r2, #128	; 0x80
 8011e1c:	4393      	bics	r3, r2
 8011e1e:	600b      	str	r3, [r1, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011e20:	680b      	ldr	r3, [r1, #0]
 8011e22:	3a40      	subs	r2, #64	; 0x40
 8011e24:	4313      	orrs	r3, r2
 8011e26:	600b      	str	r3, [r1, #0]
      return HAL_OK;
 8011e28:	2000      	movs	r0, #0
 8011e2a:	e7f4      	b.n	8011e16 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e2c:	691c      	ldr	r4, [r3, #16]
 8011e2e:	2c00      	cmp	r4, #0
 8011e30:	d1e9      	bne.n	8011e06 <UART_Transmit_IT+0x2a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011e32:	8804      	ldrh	r4, [r0, #0]
        huart->pTxBuffPtr += 2;
 8011e34:	3002      	adds	r0, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011e36:	05e4      	lsls	r4, r4, #23
 8011e38:	0de4      	lsrs	r4, r4, #23
 8011e3a:	850c      	strh	r4, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8011e3c:	64d8      	str	r0, [r3, #76]	; 0x4c
 8011e3e:	e7e6      	b.n	8011e0e <UART_Transmit_IT+0x32>

08011e40 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011e40:	2140      	movs	r1, #64	; 0x40
 8011e42:	6803      	ldr	r3, [r0, #0]
{
 8011e44:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	438a      	bics	r2, r1
 8011e4a:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011e4c:	2269      	movs	r2, #105	; 0x69
 8011e4e:	5c81      	ldrb	r1, [r0, r2]
 8011e50:	2932      	cmp	r1, #50	; 0x32
 8011e52:	d008      	beq.n	8011e66 <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011e54:	2401      	movs	r4, #1
 8011e56:	6899      	ldr	r1, [r3, #8]
 8011e58:	43a1      	bics	r1, r4
 8011e5a:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 8011e5c:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 8011e5e:	f7fa faef 	bl	800c440 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8011e62:	2000      	movs	r0, #0
 8011e64:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8011e66:	2322      	movs	r3, #34	; 0x22
 8011e68:	5483      	strb	r3, [r0, r2]
 8011e6a:	e7f8      	b.n	8011e5e <UART_EndTransmit_IT+0x1e>

08011e6c <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011e6c:	2369      	movs	r3, #105	; 0x69
{
 8011e6e:	b570      	push	{r4, r5, r6, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011e70:	5cc2      	ldrb	r2, [r0, r3]
 8011e72:	2a22      	cmp	r2, #34	; 0x22
 8011e74:	d003      	beq.n	8011e7e <UART_Receive_IT+0x12>
 8011e76:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011e78:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011e7a:	2b32      	cmp	r3, #50	; 0x32
 8011e7c:	d12b      	bne.n	8011ed6 <UART_Receive_IT+0x6a>
  uint16_t uhMask = huart->Mask;
 8011e7e:	235c      	movs	r3, #92	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e80:	2180      	movs	r1, #128	; 0x80
 8011e82:	6885      	ldr	r5, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8011e84:	5ac3      	ldrh	r3, [r0, r3]
 8011e86:	6804      	ldr	r4, [r0, #0]
 8011e88:	6d42      	ldr	r2, [r0, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e8a:	0149      	lsls	r1, r1, #5
 8011e8c:	428d      	cmp	r5, r1
 8011e8e:	d024      	beq.n	8011eda <UART_Receive_IT+0x6e>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8011e90:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8011e92:	1c54      	adds	r4, r2, #1
 8011e94:	400b      	ands	r3, r1
 8011e96:	6544      	str	r4, [r0, #84]	; 0x54
 8011e98:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8011e9a:	225a      	movs	r2, #90	; 0x5a
 8011e9c:	5a83      	ldrh	r3, [r0, r2]
 8011e9e:	3b01      	subs	r3, #1
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8011ea4:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d115      	bne.n	8011ed6 <UART_Receive_IT+0x6a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011eaa:	2120      	movs	r1, #32
 8011eac:	6803      	ldr	r3, [r0, #0]
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	438a      	bics	r2, r1
 8011eb2:	601a      	str	r2, [r3, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011eb4:	2269      	movs	r2, #105	; 0x69
 8011eb6:	5c81      	ldrb	r1, [r0, r2]
 8011eb8:	2932      	cmp	r1, #50	; 0x32
 8011eba:	d017      	beq.n	8011eec <UART_Receive_IT+0x80>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011ebc:	6819      	ldr	r1, [r3, #0]
 8011ebe:	4c0d      	ldr	r4, [pc, #52]	; (8011ef4 <UART_Receive_IT+0x88>)
 8011ec0:	4021      	ands	r1, r4
 8011ec2:	6019      	str	r1, [r3, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011ec4:	6899      	ldr	r1, [r3, #8]
 8011ec6:	3403      	adds	r4, #3
 8011ec8:	34ff      	adds	r4, #255	; 0xff
 8011eca:	43a1      	bics	r1, r4
 8011ecc:	6099      	str	r1, [r3, #8]
        huart->State = HAL_UART_STATE_READY;
 8011ece:	5484      	strb	r4, [r0, r2]
      HAL_UART_RxCpltCallback(huart);
 8011ed0:	f7fa faf2 	bl	800c4b8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8011ed4:	2200      	movs	r2, #0
  }
}
 8011ed6:	0010      	movs	r0, r2
 8011ed8:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011eda:	6901      	ldr	r1, [r0, #16]
 8011edc:	2900      	cmp	r1, #0
 8011ede:	d1d7      	bne.n	8011e90 <UART_Receive_IT+0x24>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8011ee0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8011ee2:	400b      	ands	r3, r1
 8011ee4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8011ee6:	3202      	adds	r2, #2
 8011ee8:	6542      	str	r2, [r0, #84]	; 0x54
 8011eea:	e7d6      	b.n	8011e9a <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8011eec:	2312      	movs	r3, #18
 8011eee:	5483      	strb	r3, [r0, r2]
 8011ef0:	e7ee      	b.n	8011ed0 <UART_Receive_IT+0x64>
 8011ef2:	46c0      	nop			; (mov r8, r8)
 8011ef4:	fffffeff 	.word	0xfffffeff

08011ef8 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8011ef8:	4770      	bx	lr
 8011efa:	46c0      	nop			; (mov r8, r8)

08011efc <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011efc:	2201      	movs	r2, #1
 8011efe:	6803      	ldr	r3, [r0, #0]
{
 8011f00:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011f02:	69d9      	ldr	r1, [r3, #28]
{
 8011f04:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011f06:	420a      	tst	r2, r1
 8011f08:	d002      	beq.n	8011f10 <HAL_UART_IRQHandler+0x14>
 8011f0a:	6819      	ldr	r1, [r3, #0]
 8011f0c:	05c9      	lsls	r1, r1, #23
 8011f0e:	d456      	bmi.n	8011fbe <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011f10:	2202      	movs	r2, #2
 8011f12:	69d9      	ldr	r1, [r3, #28]
 8011f14:	420a      	tst	r2, r1
 8011f16:	d003      	beq.n	8011f20 <HAL_UART_IRQHandler+0x24>
 8011f18:	2101      	movs	r1, #1
 8011f1a:	6898      	ldr	r0, [r3, #8]
 8011f1c:	4201      	tst	r1, r0
 8011f1e:	d146      	bne.n	8011fae <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011f20:	2204      	movs	r2, #4
 8011f22:	69d9      	ldr	r1, [r3, #28]
 8011f24:	420a      	tst	r2, r1
 8011f26:	d003      	beq.n	8011f30 <HAL_UART_IRQHandler+0x34>
 8011f28:	2101      	movs	r1, #1
 8011f2a:	6898      	ldr	r0, [r3, #8]
 8011f2c:	4201      	tst	r1, r0
 8011f2e:	d136      	bne.n	8011f9e <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011f30:	2208      	movs	r2, #8
 8011f32:	69d9      	ldr	r1, [r3, #28]
 8011f34:	420a      	tst	r2, r1
 8011f36:	d003      	beq.n	8011f40 <HAL_UART_IRQHandler+0x44>
 8011f38:	2101      	movs	r1, #1
 8011f3a:	6898      	ldr	r0, [r3, #8]
 8011f3c:	4201      	tst	r1, r0
 8011f3e:	d120      	bne.n	8011f82 <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011f40:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011f42:	2a00      	cmp	r2, #0
 8011f44:	d126      	bne.n	8011f94 <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8011f46:	2280      	movs	r2, #128	; 0x80
 8011f48:	69d9      	ldr	r1, [r3, #28]
 8011f4a:	0352      	lsls	r2, r2, #13
 8011f4c:	4211      	tst	r1, r2
 8011f4e:	d002      	beq.n	8011f56 <HAL_UART_IRQHandler+0x5a>
 8011f50:	6899      	ldr	r1, [r3, #8]
 8011f52:	0249      	lsls	r1, r1, #9
 8011f54:	d43e      	bmi.n	8011fd4 <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8011f56:	2220      	movs	r2, #32
 8011f58:	69d9      	ldr	r1, [r3, #28]
 8011f5a:	420a      	tst	r2, r1
 8011f5c:	d002      	beq.n	8011f64 <HAL_UART_IRQHandler+0x68>
 8011f5e:	6819      	ldr	r1, [r3, #0]
 8011f60:	420a      	tst	r2, r1
 8011f62:	d140      	bne.n	8011fe6 <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8011f64:	2280      	movs	r2, #128	; 0x80
 8011f66:	69d9      	ldr	r1, [r3, #28]
 8011f68:	420a      	tst	r2, r1
 8011f6a:	d002      	beq.n	8011f72 <HAL_UART_IRQHandler+0x76>
 8011f6c:	6819      	ldr	r1, [r3, #0]
 8011f6e:	420a      	tst	r2, r1
 8011f70:	d142      	bne.n	8011ff8 <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8011f72:	2240      	movs	r2, #64	; 0x40
 8011f74:	69d9      	ldr	r1, [r3, #28]
 8011f76:	420a      	tst	r2, r1
 8011f78:	d002      	beq.n	8011f80 <HAL_UART_IRQHandler+0x84>
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	421a      	tst	r2, r3
 8011f7e:	d125      	bne.n	8011fcc <HAL_UART_IRQHandler+0xd0>
}
 8011f80:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8011f82:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011f84:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011f86:	4302      	orrs	r2, r0
 8011f88:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011f8a:	2269      	movs	r2, #105	; 0x69
 8011f8c:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011f8e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011f90:	2a00      	cmp	r2, #0
 8011f92:	d0d8      	beq.n	8011f46 <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 8011f94:	0020      	movs	r0, r4
 8011f96:	f7fa fa6b 	bl	800c470 <HAL_UART_ErrorCallback>
 8011f9a:	6823      	ldr	r3, [r4, #0]
 8011f9c:	e7d3      	b.n	8011f46 <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011f9e:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8011fa0:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011fa2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011fa4:	4302      	orrs	r2, r0
 8011fa6:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011fa8:	2269      	movs	r2, #105	; 0x69
 8011faa:	54a1      	strb	r1, [r4, r2]
 8011fac:	e7c0      	b.n	8011f30 <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011fae:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8011fb0:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011fb2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011fb4:	4302      	orrs	r2, r0
 8011fb6:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011fb8:	2269      	movs	r2, #105	; 0x69
 8011fba:	54a1      	strb	r1, [r4, r2]
 8011fbc:	e7b0      	b.n	8011f20 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8011fbe:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011fc0:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8011fc2:	4311      	orrs	r1, r2
 8011fc4:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011fc6:	2169      	movs	r1, #105	; 0x69
 8011fc8:	5442      	strb	r2, [r0, r1]
 8011fca:	e7a1      	b.n	8011f10 <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 8011fcc:	0020      	movs	r0, r4
 8011fce:	f7ff ff37 	bl	8011e40 <UART_EndTransmit_IT>
}
 8011fd2:	e7d5      	b.n	8011f80 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8011fd4:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8011fd6:	2369      	movs	r3, #105	; 0x69
 8011fd8:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 8011fda:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 8011fdc:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8011fde:	f7ff ff8b 	bl	8011ef8 <HAL_UARTEx_WakeupCallback>
 8011fe2:	6823      	ldr	r3, [r4, #0]
 8011fe4:	e7b7      	b.n	8011f56 <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 8011fe6:	0020      	movs	r0, r4
 8011fe8:	f7ff ff40 	bl	8011e6c <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011fec:	2108      	movs	r1, #8
 8011fee:	6823      	ldr	r3, [r4, #0]
 8011ff0:	699a      	ldr	r2, [r3, #24]
 8011ff2:	430a      	orrs	r2, r1
 8011ff4:	619a      	str	r2, [r3, #24]
 8011ff6:	e7b5      	b.n	8011f64 <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 8011ff8:	0020      	movs	r0, r4
 8011ffa:	f7ff feef 	bl	8011ddc <UART_Transmit_IT>
 8011ffe:	6823      	ldr	r3, [r4, #0]
 8012000:	e7b7      	b.n	8011f72 <HAL_UART_IRQHandler+0x76>
 8012002:	46c0      	nop			; (mov r8, r8)

08012004 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8012004:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8012006:	f7f1 fc9d 	bl	8003944 <Module_Init>
 801200a:	e7fe      	b.n	801200a <main+0x6>

0801200c <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 801200c:	e7fe      	b.n	801200c <UserTask>
 801200e:	46c0      	nop			; (mov r8, r8)

08012010 <atof>:
 8012010:	b510      	push	{r4, lr}
 8012012:	2100      	movs	r1, #0
 8012014:	f001 fb74 	bl	8013700 <strtod>
 8012018:	bd10      	pop	{r4, pc}

0801201a <atoi>:
 801201a:	b510      	push	{r4, lr}
 801201c:	220a      	movs	r2, #10
 801201e:	2100      	movs	r1, #0
 8012020:	f001 fc3a 	bl	8013898 <strtol>
 8012024:	bd10      	pop	{r4, pc}

08012026 <atol>:
 8012026:	b510      	push	{r4, lr}
 8012028:	220a      	movs	r2, #10
 801202a:	2100      	movs	r1, #0
 801202c:	f001 fc34 	bl	8013898 <strtol>
 8012030:	bd10      	pop	{r4, pc}
	...

08012034 <calloc>:
 8012034:	b510      	push	{r4, lr}
 8012036:	4b03      	ldr	r3, [pc, #12]	; (8012044 <calloc+0x10>)
 8012038:	000a      	movs	r2, r1
 801203a:	0001      	movs	r1, r0
 801203c:	6818      	ldr	r0, [r3, #0]
 801203e:	f000 f803 	bl	8012048 <_calloc_r>
 8012042:	bd10      	pop	{r4, pc}
 8012044:	200000dc 	.word	0x200000dc

08012048 <_calloc_r>:
 8012048:	b510      	push	{r4, lr}
 801204a:	4351      	muls	r1, r2
 801204c:	f000 f872 	bl	8012134 <_malloc_r>
 8012050:	1e04      	subs	r4, r0, #0
 8012052:	d01a      	beq.n	801208a <_calloc_r+0x42>
 8012054:	0003      	movs	r3, r0
 8012056:	3b08      	subs	r3, #8
 8012058:	685a      	ldr	r2, [r3, #4]
 801205a:	2303      	movs	r3, #3
 801205c:	439a      	bics	r2, r3
 801205e:	3a04      	subs	r2, #4
 8012060:	2a24      	cmp	r2, #36	; 0x24
 8012062:	d819      	bhi.n	8012098 <_calloc_r+0x50>
 8012064:	0003      	movs	r3, r0
 8012066:	2a13      	cmp	r2, #19
 8012068:	d90b      	bls.n	8012082 <_calloc_r+0x3a>
 801206a:	2100      	movs	r1, #0
 801206c:	3308      	adds	r3, #8
 801206e:	6001      	str	r1, [r0, #0]
 8012070:	6041      	str	r1, [r0, #4]
 8012072:	2a1b      	cmp	r2, #27
 8012074:	d905      	bls.n	8012082 <_calloc_r+0x3a>
 8012076:	6081      	str	r1, [r0, #8]
 8012078:	60c1      	str	r1, [r0, #12]
 801207a:	2a24      	cmp	r2, #36	; 0x24
 801207c:	d007      	beq.n	801208e <_calloc_r+0x46>
 801207e:	0003      	movs	r3, r0
 8012080:	3310      	adds	r3, #16
 8012082:	2200      	movs	r2, #0
 8012084:	601a      	str	r2, [r3, #0]
 8012086:	605a      	str	r2, [r3, #4]
 8012088:	609a      	str	r2, [r3, #8]
 801208a:	0020      	movs	r0, r4
 801208c:	bd10      	pop	{r4, pc}
 801208e:	0003      	movs	r3, r0
 8012090:	6101      	str	r1, [r0, #16]
 8012092:	3318      	adds	r3, #24
 8012094:	6141      	str	r1, [r0, #20]
 8012096:	e7f4      	b.n	8012082 <_calloc_r+0x3a>
 8012098:	2100      	movs	r1, #0
 801209a:	f000 fa8d 	bl	80125b8 <memset>
 801209e:	e7f4      	b.n	801208a <_calloc_r+0x42>

080120a0 <__libc_init_array>:
 80120a0:	b570      	push	{r4, r5, r6, lr}
 80120a2:	2600      	movs	r6, #0
 80120a4:	4d0c      	ldr	r5, [pc, #48]	; (80120d8 <__libc_init_array+0x38>)
 80120a6:	4c0d      	ldr	r4, [pc, #52]	; (80120dc <__libc_init_array+0x3c>)
 80120a8:	1b64      	subs	r4, r4, r5
 80120aa:	10a4      	asrs	r4, r4, #2
 80120ac:	42a6      	cmp	r6, r4
 80120ae:	d109      	bne.n	80120c4 <__libc_init_array+0x24>
 80120b0:	2600      	movs	r6, #0
 80120b2:	f004 fe41 	bl	8016d38 <_init>
 80120b6:	4d0a      	ldr	r5, [pc, #40]	; (80120e0 <__libc_init_array+0x40>)
 80120b8:	4c0a      	ldr	r4, [pc, #40]	; (80120e4 <__libc_init_array+0x44>)
 80120ba:	1b64      	subs	r4, r4, r5
 80120bc:	10a4      	asrs	r4, r4, #2
 80120be:	42a6      	cmp	r6, r4
 80120c0:	d105      	bne.n	80120ce <__libc_init_array+0x2e>
 80120c2:	bd70      	pop	{r4, r5, r6, pc}
 80120c4:	00b3      	lsls	r3, r6, #2
 80120c6:	58eb      	ldr	r3, [r5, r3]
 80120c8:	4798      	blx	r3
 80120ca:	3601      	adds	r6, #1
 80120cc:	e7ee      	b.n	80120ac <__libc_init_array+0xc>
 80120ce:	00b3      	lsls	r3, r6, #2
 80120d0:	58eb      	ldr	r3, [r5, r3]
 80120d2:	4798      	blx	r3
 80120d4:	3601      	adds	r6, #1
 80120d6:	e7f2      	b.n	80120be <__libc_init_array+0x1e>
 80120d8:	0801a144 	.word	0x0801a144
 80120dc:	0801a144 	.word	0x0801a144
 80120e0:	0801a144 	.word	0x0801a144
 80120e4:	0801a14c 	.word	0x0801a14c

080120e8 <__locale_ctype_ptr_l>:
 80120e8:	30ec      	adds	r0, #236	; 0xec
 80120ea:	6800      	ldr	r0, [r0, #0]
 80120ec:	4770      	bx	lr
	...

080120f0 <__locale_ctype_ptr>:
 80120f0:	4b04      	ldr	r3, [pc, #16]	; (8012104 <__locale_ctype_ptr+0x14>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d100      	bne.n	80120fc <__locale_ctype_ptr+0xc>
 80120fa:	4b03      	ldr	r3, [pc, #12]	; (8012108 <__locale_ctype_ptr+0x18>)
 80120fc:	33ec      	adds	r3, #236	; 0xec
 80120fe:	6818      	ldr	r0, [r3, #0]
 8012100:	4770      	bx	lr
 8012102:	46c0      	nop			; (mov r8, r8)
 8012104:	200000dc 	.word	0x200000dc
 8012108:	20000508 	.word	0x20000508

0801210c <malloc>:
 801210c:	b510      	push	{r4, lr}
 801210e:	4b03      	ldr	r3, [pc, #12]	; (801211c <malloc+0x10>)
 8012110:	0001      	movs	r1, r0
 8012112:	6818      	ldr	r0, [r3, #0]
 8012114:	f000 f80e 	bl	8012134 <_malloc_r>
 8012118:	bd10      	pop	{r4, pc}
 801211a:	46c0      	nop			; (mov r8, r8)
 801211c:	200000dc 	.word	0x200000dc

08012120 <free>:
 8012120:	b510      	push	{r4, lr}
 8012122:	4b03      	ldr	r3, [pc, #12]	; (8012130 <free+0x10>)
 8012124:	0001      	movs	r1, r0
 8012126:	6818      	ldr	r0, [r3, #0]
 8012128:	f003 fd10 	bl	8015b4c <_free_r>
 801212c:	bd10      	pop	{r4, pc}
 801212e:	46c0      	nop			; (mov r8, r8)
 8012130:	200000dc 	.word	0x200000dc

08012134 <_malloc_r>:
 8012134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012136:	000d      	movs	r5, r1
 8012138:	b085      	sub	sp, #20
 801213a:	350b      	adds	r5, #11
 801213c:	9001      	str	r0, [sp, #4]
 801213e:	2d16      	cmp	r5, #22
 8012140:	d908      	bls.n	8012154 <_malloc_r+0x20>
 8012142:	2307      	movs	r3, #7
 8012144:	439d      	bics	r5, r3
 8012146:	d506      	bpl.n	8012156 <_malloc_r+0x22>
 8012148:	230c      	movs	r3, #12
 801214a:	9a01      	ldr	r2, [sp, #4]
 801214c:	6013      	str	r3, [r2, #0]
 801214e:	2000      	movs	r0, #0
 8012150:	b005      	add	sp, #20
 8012152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012154:	2510      	movs	r5, #16
 8012156:	428d      	cmp	r5, r1
 8012158:	d3f6      	bcc.n	8012148 <_malloc_r+0x14>
 801215a:	9801      	ldr	r0, [sp, #4]
 801215c:	f000 fa34 	bl	80125c8 <__malloc_lock>
 8012160:	23f8      	movs	r3, #248	; 0xf8
 8012162:	33ff      	adds	r3, #255	; 0xff
 8012164:	4ac4      	ldr	r2, [pc, #784]	; (8012478 <_malloc_r+0x344>)
 8012166:	429d      	cmp	r5, r3
 8012168:	d820      	bhi.n	80121ac <_malloc_r+0x78>
 801216a:	0029      	movs	r1, r5
 801216c:	3108      	adds	r1, #8
 801216e:	1851      	adds	r1, r2, r1
 8012170:	0008      	movs	r0, r1
 8012172:	684c      	ldr	r4, [r1, #4]
 8012174:	3808      	subs	r0, #8
 8012176:	08eb      	lsrs	r3, r5, #3
 8012178:	4284      	cmp	r4, r0
 801217a:	d104      	bne.n	8012186 <_malloc_r+0x52>
 801217c:	68cc      	ldr	r4, [r1, #12]
 801217e:	3302      	adds	r3, #2
 8012180:	469c      	mov	ip, r3
 8012182:	42a1      	cmp	r1, r4
 8012184:	d02a      	beq.n	80121dc <_malloc_r+0xa8>
 8012186:	2303      	movs	r3, #3
 8012188:	6862      	ldr	r2, [r4, #4]
 801218a:	68a1      	ldr	r1, [r4, #8]
 801218c:	439a      	bics	r2, r3
 801218e:	0013      	movs	r3, r2
 8012190:	68e2      	ldr	r2, [r4, #12]
 8012192:	18e3      	adds	r3, r4, r3
 8012194:	60ca      	str	r2, [r1, #12]
 8012196:	6091      	str	r1, [r2, #8]
 8012198:	2201      	movs	r2, #1
 801219a:	6859      	ldr	r1, [r3, #4]
 801219c:	430a      	orrs	r2, r1
 801219e:	605a      	str	r2, [r3, #4]
 80121a0:	9801      	ldr	r0, [sp, #4]
 80121a2:	f000 fa19 	bl	80125d8 <__malloc_unlock>
 80121a6:	0020      	movs	r0, r4
 80121a8:	3008      	adds	r0, #8
 80121aa:	e7d1      	b.n	8012150 <_malloc_r+0x1c>
 80121ac:	0a69      	lsrs	r1, r5, #9
 80121ae:	233f      	movs	r3, #63	; 0x3f
 80121b0:	2900      	cmp	r1, #0
 80121b2:	d003      	beq.n	80121bc <_malloc_r+0x88>
 80121b4:	2904      	cmp	r1, #4
 80121b6:	d828      	bhi.n	801220a <_malloc_r+0xd6>
 80121b8:	09ab      	lsrs	r3, r5, #6
 80121ba:	3338      	adds	r3, #56	; 0x38
 80121bc:	2103      	movs	r1, #3
 80121be:	468c      	mov	ip, r1
 80121c0:	00d8      	lsls	r0, r3, #3
 80121c2:	1880      	adds	r0, r0, r2
 80121c4:	68c4      	ldr	r4, [r0, #12]
 80121c6:	4284      	cmp	r4, r0
 80121c8:	d006      	beq.n	80121d8 <_malloc_r+0xa4>
 80121ca:	4666      	mov	r6, ip
 80121cc:	6861      	ldr	r1, [r4, #4]
 80121ce:	43b1      	bics	r1, r6
 80121d0:	1b4f      	subs	r7, r1, r5
 80121d2:	2f0f      	cmp	r7, #15
 80121d4:	dd31      	ble.n	801223a <_malloc_r+0x106>
 80121d6:	3b01      	subs	r3, #1
 80121d8:	3301      	adds	r3, #1
 80121da:	469c      	mov	ip, r3
 80121dc:	6914      	ldr	r4, [r2, #16]
 80121de:	49a7      	ldr	r1, [pc, #668]	; (801247c <_malloc_r+0x348>)
 80121e0:	428c      	cmp	r4, r1
 80121e2:	d055      	beq.n	8012290 <_malloc_r+0x15c>
 80121e4:	2303      	movs	r3, #3
 80121e6:	6860      	ldr	r0, [r4, #4]
 80121e8:	4398      	bics	r0, r3
 80121ea:	0003      	movs	r3, r0
 80121ec:	1b46      	subs	r6, r0, r5
 80121ee:	2e0f      	cmp	r6, #15
 80121f0:	dd31      	ble.n	8012256 <_malloc_r+0x122>
 80121f2:	2701      	movs	r7, #1
 80121f4:	1960      	adds	r0, r4, r5
 80121f6:	433d      	orrs	r5, r7
 80121f8:	4337      	orrs	r7, r6
 80121fa:	6065      	str	r5, [r4, #4]
 80121fc:	6150      	str	r0, [r2, #20]
 80121fe:	6110      	str	r0, [r2, #16]
 8012200:	60c1      	str	r1, [r0, #12]
 8012202:	6081      	str	r1, [r0, #8]
 8012204:	6047      	str	r7, [r0, #4]
 8012206:	50e6      	str	r6, [r4, r3]
 8012208:	e7ca      	b.n	80121a0 <_malloc_r+0x6c>
 801220a:	2914      	cmp	r1, #20
 801220c:	d802      	bhi.n	8012214 <_malloc_r+0xe0>
 801220e:	000b      	movs	r3, r1
 8012210:	335b      	adds	r3, #91	; 0x5b
 8012212:	e7d3      	b.n	80121bc <_malloc_r+0x88>
 8012214:	2954      	cmp	r1, #84	; 0x54
 8012216:	d802      	bhi.n	801221e <_malloc_r+0xea>
 8012218:	0b2b      	lsrs	r3, r5, #12
 801221a:	336e      	adds	r3, #110	; 0x6e
 801221c:	e7ce      	b.n	80121bc <_malloc_r+0x88>
 801221e:	23aa      	movs	r3, #170	; 0xaa
 8012220:	005b      	lsls	r3, r3, #1
 8012222:	4299      	cmp	r1, r3
 8012224:	d802      	bhi.n	801222c <_malloc_r+0xf8>
 8012226:	0beb      	lsrs	r3, r5, #15
 8012228:	3377      	adds	r3, #119	; 0x77
 801222a:	e7c7      	b.n	80121bc <_malloc_r+0x88>
 801222c:	4894      	ldr	r0, [pc, #592]	; (8012480 <_malloc_r+0x34c>)
 801222e:	237e      	movs	r3, #126	; 0x7e
 8012230:	4281      	cmp	r1, r0
 8012232:	d8c3      	bhi.n	80121bc <_malloc_r+0x88>
 8012234:	0cab      	lsrs	r3, r5, #18
 8012236:	337c      	adds	r3, #124	; 0x7c
 8012238:	e7c0      	b.n	80121bc <_malloc_r+0x88>
 801223a:	68e6      	ldr	r6, [r4, #12]
 801223c:	2f00      	cmp	r7, #0
 801223e:	db08      	blt.n	8012252 <_malloc_r+0x11e>
 8012240:	68a3      	ldr	r3, [r4, #8]
 8012242:	1861      	adds	r1, r4, r1
 8012244:	60de      	str	r6, [r3, #12]
 8012246:	60b3      	str	r3, [r6, #8]
 8012248:	2301      	movs	r3, #1
 801224a:	684a      	ldr	r2, [r1, #4]
 801224c:	4313      	orrs	r3, r2
 801224e:	604b      	str	r3, [r1, #4]
 8012250:	e7a6      	b.n	80121a0 <_malloc_r+0x6c>
 8012252:	0034      	movs	r4, r6
 8012254:	e7b7      	b.n	80121c6 <_malloc_r+0x92>
 8012256:	6151      	str	r1, [r2, #20]
 8012258:	6111      	str	r1, [r2, #16]
 801225a:	2e00      	cmp	r6, #0
 801225c:	db05      	blt.n	801226a <_malloc_r+0x136>
 801225e:	2101      	movs	r1, #1
 8012260:	1823      	adds	r3, r4, r0
 8012262:	685a      	ldr	r2, [r3, #4]
 8012264:	4311      	orrs	r1, r2
 8012266:	6059      	str	r1, [r3, #4]
 8012268:	e79a      	b.n	80121a0 <_malloc_r+0x6c>
 801226a:	4986      	ldr	r1, [pc, #536]	; (8012484 <_malloc_r+0x350>)
 801226c:	6857      	ldr	r7, [r2, #4]
 801226e:	4288      	cmp	r0, r1
 8012270:	d900      	bls.n	8012274 <_malloc_r+0x140>
 8012272:	e090      	b.n	8012396 <_malloc_r+0x262>
 8012274:	08c3      	lsrs	r3, r0, #3
 8012276:	39ff      	subs	r1, #255	; 0xff
 8012278:	1098      	asrs	r0, r3, #2
 801227a:	39ff      	subs	r1, #255	; 0xff
 801227c:	4081      	lsls	r1, r0
 801227e:	00db      	lsls	r3, r3, #3
 8012280:	4339      	orrs	r1, r7
 8012282:	6051      	str	r1, [r2, #4]
 8012284:	189a      	adds	r2, r3, r2
 8012286:	6893      	ldr	r3, [r2, #8]
 8012288:	60e2      	str	r2, [r4, #12]
 801228a:	60a3      	str	r3, [r4, #8]
 801228c:	6094      	str	r4, [r2, #8]
 801228e:	60dc      	str	r4, [r3, #12]
 8012290:	4663      	mov	r3, ip
 8012292:	2201      	movs	r2, #1
 8012294:	4978      	ldr	r1, [pc, #480]	; (8012478 <_malloc_r+0x344>)
 8012296:	109b      	asrs	r3, r3, #2
 8012298:	6848      	ldr	r0, [r1, #4]
 801229a:	409a      	lsls	r2, r3
 801229c:	4290      	cmp	r0, r2
 801229e:	d32d      	bcc.n	80122fc <_malloc_r+0x1c8>
 80122a0:	4202      	tst	r2, r0
 80122a2:	d109      	bne.n	80122b8 <_malloc_r+0x184>
 80122a4:	2303      	movs	r3, #3
 80122a6:	4664      	mov	r4, ip
 80122a8:	439c      	bics	r4, r3
 80122aa:	0023      	movs	r3, r4
 80122ac:	3304      	adds	r3, #4
 80122ae:	469c      	mov	ip, r3
 80122b0:	0052      	lsls	r2, r2, #1
 80122b2:	4202      	tst	r2, r0
 80122b4:	d100      	bne.n	80122b8 <_malloc_r+0x184>
 80122b6:	e0a4      	b.n	8012402 <_malloc_r+0x2ce>
 80122b8:	4663      	mov	r3, ip
 80122ba:	00db      	lsls	r3, r3, #3
 80122bc:	18cb      	adds	r3, r1, r3
 80122be:	9303      	str	r3, [sp, #12]
 80122c0:	001f      	movs	r7, r3
 80122c2:	4663      	mov	r3, ip
 80122c4:	9302      	str	r3, [sp, #8]
 80122c6:	68fc      	ldr	r4, [r7, #12]
 80122c8:	42bc      	cmp	r4, r7
 80122ca:	d000      	beq.n	80122ce <_malloc_r+0x19a>
 80122cc:	e09c      	b.n	8012408 <_malloc_r+0x2d4>
 80122ce:	2003      	movs	r0, #3
 80122d0:	9b02      	ldr	r3, [sp, #8]
 80122d2:	3708      	adds	r7, #8
 80122d4:	3301      	adds	r3, #1
 80122d6:	9302      	str	r3, [sp, #8]
 80122d8:	4203      	tst	r3, r0
 80122da:	d1f4      	bne.n	80122c6 <_malloc_r+0x192>
 80122dc:	4663      	mov	r3, ip
 80122de:	2003      	movs	r0, #3
 80122e0:	4203      	tst	r3, r0
 80122e2:	d000      	beq.n	80122e6 <_malloc_r+0x1b2>
 80122e4:	e0b3      	b.n	801244e <_malloc_r+0x31a>
 80122e6:	684b      	ldr	r3, [r1, #4]
 80122e8:	4393      	bics	r3, r2
 80122ea:	604b      	str	r3, [r1, #4]
 80122ec:	4b62      	ldr	r3, [pc, #392]	; (8012478 <_malloc_r+0x344>)
 80122ee:	0052      	lsls	r2, r2, #1
 80122f0:	685b      	ldr	r3, [r3, #4]
 80122f2:	4293      	cmp	r3, r2
 80122f4:	d302      	bcc.n	80122fc <_malloc_r+0x1c8>
 80122f6:	2a00      	cmp	r2, #0
 80122f8:	d000      	beq.n	80122fc <_malloc_r+0x1c8>
 80122fa:	e0b9      	b.n	8012470 <_malloc_r+0x33c>
 80122fc:	2303      	movs	r3, #3
 80122fe:	688f      	ldr	r7, [r1, #8]
 8012300:	687a      	ldr	r2, [r7, #4]
 8012302:	439a      	bics	r2, r3
 8012304:	9202      	str	r2, [sp, #8]
 8012306:	42aa      	cmp	r2, r5
 8012308:	d303      	bcc.n	8012312 <_malloc_r+0x1de>
 801230a:	1b52      	subs	r2, r2, r5
 801230c:	2a0f      	cmp	r2, #15
 801230e:	dd00      	ble.n	8012312 <_malloc_r+0x1de>
 8012310:	e116      	b.n	8012540 <_malloc_r+0x40c>
 8012312:	4b5d      	ldr	r3, [pc, #372]	; (8012488 <_malloc_r+0x354>)
 8012314:	2008      	movs	r0, #8
 8012316:	681e      	ldr	r6, [r3, #0]
 8012318:	f002 fd26 	bl	8014d68 <sysconf>
 801231c:	4b5b      	ldr	r3, [pc, #364]	; (801248c <_malloc_r+0x358>)
 801231e:	3610      	adds	r6, #16
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	1976      	adds	r6, r6, r5
 8012324:	9003      	str	r0, [sp, #12]
 8012326:	3301      	adds	r3, #1
 8012328:	d003      	beq.n	8012332 <_malloc_r+0x1fe>
 801232a:	3e01      	subs	r6, #1
 801232c:	1836      	adds	r6, r6, r0
 801232e:	4243      	negs	r3, r0
 8012330:	401e      	ands	r6, r3
 8012332:	0031      	movs	r1, r6
 8012334:	9801      	ldr	r0, [sp, #4]
 8012336:	f000 fb27 	bl	8012988 <_sbrk_r>
 801233a:	0004      	movs	r4, r0
 801233c:	1c43      	adds	r3, r0, #1
 801233e:	d100      	bne.n	8012342 <_malloc_r+0x20e>
 8012340:	e0d6      	b.n	80124f0 <_malloc_r+0x3bc>
 8012342:	9b02      	ldr	r3, [sp, #8]
 8012344:	18fb      	adds	r3, r7, r3
 8012346:	4283      	cmp	r3, r0
 8012348:	d903      	bls.n	8012352 <_malloc_r+0x21e>
 801234a:	4a4b      	ldr	r2, [pc, #300]	; (8012478 <_malloc_r+0x344>)
 801234c:	4297      	cmp	r7, r2
 801234e:	d000      	beq.n	8012352 <_malloc_r+0x21e>
 8012350:	e0ce      	b.n	80124f0 <_malloc_r+0x3bc>
 8012352:	494f      	ldr	r1, [pc, #316]	; (8012490 <_malloc_r+0x35c>)
 8012354:	680a      	ldr	r2, [r1, #0]
 8012356:	18b2      	adds	r2, r6, r2
 8012358:	600a      	str	r2, [r1, #0]
 801235a:	9903      	ldr	r1, [sp, #12]
 801235c:	4694      	mov	ip, r2
 801235e:	1e48      	subs	r0, r1, #1
 8012360:	42a3      	cmp	r3, r4
 8012362:	d000      	beq.n	8012366 <_malloc_r+0x232>
 8012364:	e09a      	b.n	801249c <_malloc_r+0x368>
 8012366:	4203      	tst	r3, r0
 8012368:	d000      	beq.n	801236c <_malloc_r+0x238>
 801236a:	e097      	b.n	801249c <_malloc_r+0x368>
 801236c:	9a02      	ldr	r2, [sp, #8]
 801236e:	4b42      	ldr	r3, [pc, #264]	; (8012478 <_malloc_r+0x344>)
 8012370:	1992      	adds	r2, r2, r6
 8012372:	2601      	movs	r6, #1
 8012374:	689b      	ldr	r3, [r3, #8]
 8012376:	4316      	orrs	r6, r2
 8012378:	605e      	str	r6, [r3, #4]
 801237a:	4b45      	ldr	r3, [pc, #276]	; (8012490 <_malloc_r+0x35c>)
 801237c:	4a45      	ldr	r2, [pc, #276]	; (8012494 <_malloc_r+0x360>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	6811      	ldr	r1, [r2, #0]
 8012382:	428b      	cmp	r3, r1
 8012384:	d900      	bls.n	8012388 <_malloc_r+0x254>
 8012386:	6013      	str	r3, [r2, #0]
 8012388:	4a43      	ldr	r2, [pc, #268]	; (8012498 <_malloc_r+0x364>)
 801238a:	6811      	ldr	r1, [r2, #0]
 801238c:	428b      	cmp	r3, r1
 801238e:	d800      	bhi.n	8012392 <_malloc_r+0x25e>
 8012390:	e0ae      	b.n	80124f0 <_malloc_r+0x3bc>
 8012392:	6013      	str	r3, [r2, #0]
 8012394:	e0ac      	b.n	80124f0 <_malloc_r+0x3bc>
 8012396:	0a40      	lsrs	r0, r0, #9
 8012398:	2804      	cmp	r0, #4
 801239a:	d810      	bhi.n	80123be <_malloc_r+0x28a>
 801239c:	0999      	lsrs	r1, r3, #6
 801239e:	3138      	adds	r1, #56	; 0x38
 80123a0:	00ce      	lsls	r6, r1, #3
 80123a2:	18b6      	adds	r6, r6, r2
 80123a4:	68b0      	ldr	r0, [r6, #8]
 80123a6:	4286      	cmp	r6, r0
 80123a8:	d124      	bne.n	80123f4 <_malloc_r+0x2c0>
 80123aa:	2301      	movs	r3, #1
 80123ac:	1089      	asrs	r1, r1, #2
 80123ae:	408b      	lsls	r3, r1
 80123b0:	433b      	orrs	r3, r7
 80123b2:	6053      	str	r3, [r2, #4]
 80123b4:	60e6      	str	r6, [r4, #12]
 80123b6:	60a0      	str	r0, [r4, #8]
 80123b8:	60b4      	str	r4, [r6, #8]
 80123ba:	60c4      	str	r4, [r0, #12]
 80123bc:	e768      	b.n	8012290 <_malloc_r+0x15c>
 80123be:	2814      	cmp	r0, #20
 80123c0:	d802      	bhi.n	80123c8 <_malloc_r+0x294>
 80123c2:	0001      	movs	r1, r0
 80123c4:	315b      	adds	r1, #91	; 0x5b
 80123c6:	e7eb      	b.n	80123a0 <_malloc_r+0x26c>
 80123c8:	2854      	cmp	r0, #84	; 0x54
 80123ca:	d802      	bhi.n	80123d2 <_malloc_r+0x29e>
 80123cc:	0b19      	lsrs	r1, r3, #12
 80123ce:	316e      	adds	r1, #110	; 0x6e
 80123d0:	e7e6      	b.n	80123a0 <_malloc_r+0x26c>
 80123d2:	21aa      	movs	r1, #170	; 0xaa
 80123d4:	0049      	lsls	r1, r1, #1
 80123d6:	4288      	cmp	r0, r1
 80123d8:	d802      	bhi.n	80123e0 <_malloc_r+0x2ac>
 80123da:	0bd9      	lsrs	r1, r3, #15
 80123dc:	3177      	adds	r1, #119	; 0x77
 80123de:	e7df      	b.n	80123a0 <_malloc_r+0x26c>
 80123e0:	4e27      	ldr	r6, [pc, #156]	; (8012480 <_malloc_r+0x34c>)
 80123e2:	217e      	movs	r1, #126	; 0x7e
 80123e4:	42b0      	cmp	r0, r6
 80123e6:	d8db      	bhi.n	80123a0 <_malloc_r+0x26c>
 80123e8:	0c99      	lsrs	r1, r3, #18
 80123ea:	317c      	adds	r1, #124	; 0x7c
 80123ec:	e7d8      	b.n	80123a0 <_malloc_r+0x26c>
 80123ee:	6880      	ldr	r0, [r0, #8]
 80123f0:	4286      	cmp	r6, r0
 80123f2:	d004      	beq.n	80123fe <_malloc_r+0x2ca>
 80123f4:	2103      	movs	r1, #3
 80123f6:	6842      	ldr	r2, [r0, #4]
 80123f8:	438a      	bics	r2, r1
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d8f7      	bhi.n	80123ee <_malloc_r+0x2ba>
 80123fe:	68c6      	ldr	r6, [r0, #12]
 8012400:	e7d8      	b.n	80123b4 <_malloc_r+0x280>
 8012402:	2304      	movs	r3, #4
 8012404:	449c      	add	ip, r3
 8012406:	e753      	b.n	80122b0 <_malloc_r+0x17c>
 8012408:	2003      	movs	r0, #3
 801240a:	6863      	ldr	r3, [r4, #4]
 801240c:	4383      	bics	r3, r0
 801240e:	1b5e      	subs	r6, r3, r5
 8012410:	68e0      	ldr	r0, [r4, #12]
 8012412:	2e0f      	cmp	r6, #15
 8012414:	dd0e      	ble.n	8012434 <_malloc_r+0x300>
 8012416:	2701      	movs	r7, #1
 8012418:	1962      	adds	r2, r4, r5
 801241a:	433d      	orrs	r5, r7
 801241c:	6065      	str	r5, [r4, #4]
 801241e:	68a5      	ldr	r5, [r4, #8]
 8012420:	4337      	orrs	r7, r6
 8012422:	60e8      	str	r0, [r5, #12]
 8012424:	6085      	str	r5, [r0, #8]
 8012426:	614a      	str	r2, [r1, #20]
 8012428:	610a      	str	r2, [r1, #16]
 801242a:	4914      	ldr	r1, [pc, #80]	; (801247c <_malloc_r+0x348>)
 801242c:	6057      	str	r7, [r2, #4]
 801242e:	60d1      	str	r1, [r2, #12]
 8012430:	6091      	str	r1, [r2, #8]
 8012432:	e6e8      	b.n	8012206 <_malloc_r+0xd2>
 8012434:	2e00      	cmp	r6, #0
 8012436:	db08      	blt.n	801244a <_malloc_r+0x316>
 8012438:	2201      	movs	r2, #1
 801243a:	18e3      	adds	r3, r4, r3
 801243c:	6859      	ldr	r1, [r3, #4]
 801243e:	430a      	orrs	r2, r1
 8012440:	605a      	str	r2, [r3, #4]
 8012442:	68a3      	ldr	r3, [r4, #8]
 8012444:	60d8      	str	r0, [r3, #12]
 8012446:	6083      	str	r3, [r0, #8]
 8012448:	e6aa      	b.n	80121a0 <_malloc_r+0x6c>
 801244a:	0004      	movs	r4, r0
 801244c:	e73c      	b.n	80122c8 <_malloc_r+0x194>
 801244e:	2301      	movs	r3, #1
 8012450:	425b      	negs	r3, r3
 8012452:	449c      	add	ip, r3
 8012454:	9b03      	ldr	r3, [sp, #12]
 8012456:	6818      	ldr	r0, [r3, #0]
 8012458:	3b08      	subs	r3, #8
 801245a:	9003      	str	r0, [sp, #12]
 801245c:	4298      	cmp	r0, r3
 801245e:	d100      	bne.n	8012462 <_malloc_r+0x32e>
 8012460:	e73c      	b.n	80122dc <_malloc_r+0x1a8>
 8012462:	e743      	b.n	80122ec <_malloc_r+0x1b8>
 8012464:	2004      	movs	r0, #4
 8012466:	0052      	lsls	r2, r2, #1
 8012468:	4484      	add	ip, r0
 801246a:	421a      	tst	r2, r3
 801246c:	d0fa      	beq.n	8012464 <_malloc_r+0x330>
 801246e:	e723      	b.n	80122b8 <_malloc_r+0x184>
 8012470:	9802      	ldr	r0, [sp, #8]
 8012472:	4684      	mov	ip, r0
 8012474:	e7f9      	b.n	801246a <_malloc_r+0x336>
 8012476:	46c0      	nop			; (mov r8, r8)
 8012478:	20000674 	.word	0x20000674
 801247c:	2000067c 	.word	0x2000067c
 8012480:	00000554 	.word	0x00000554
 8012484:	000001ff 	.word	0x000001ff
 8012488:	200067e8 	.word	0x200067e8
 801248c:	20000a7c 	.word	0x20000a7c
 8012490:	200067b8 	.word	0x200067b8
 8012494:	200067e0 	.word	0x200067e0
 8012498:	200067e4 	.word	0x200067e4
 801249c:	492e      	ldr	r1, [pc, #184]	; (8012558 <_malloc_r+0x424>)
 801249e:	680a      	ldr	r2, [r1, #0]
 80124a0:	3201      	adds	r2, #1
 80124a2:	d133      	bne.n	801250c <_malloc_r+0x3d8>
 80124a4:	600c      	str	r4, [r1, #0]
 80124a6:	2307      	movs	r3, #7
 80124a8:	4023      	ands	r3, r4
 80124aa:	d002      	beq.n	80124b2 <_malloc_r+0x37e>
 80124ac:	2208      	movs	r2, #8
 80124ae:	1ad3      	subs	r3, r2, r3
 80124b0:	18e4      	adds	r4, r4, r3
 80124b2:	9a03      	ldr	r2, [sp, #12]
 80124b4:	19a6      	adds	r6, r4, r6
 80124b6:	18d3      	adds	r3, r2, r3
 80124b8:	4006      	ands	r6, r0
 80124ba:	1b9e      	subs	r6, r3, r6
 80124bc:	0031      	movs	r1, r6
 80124be:	9801      	ldr	r0, [sp, #4]
 80124c0:	f000 fa62 	bl	8012988 <_sbrk_r>
 80124c4:	1c43      	adds	r3, r0, #1
 80124c6:	d101      	bne.n	80124cc <_malloc_r+0x398>
 80124c8:	0020      	movs	r0, r4
 80124ca:	2600      	movs	r6, #0
 80124cc:	4a23      	ldr	r2, [pc, #140]	; (801255c <_malloc_r+0x428>)
 80124ce:	1b00      	subs	r0, r0, r4
 80124d0:	6813      	ldr	r3, [r2, #0]
 80124d2:	199b      	adds	r3, r3, r6
 80124d4:	6013      	str	r3, [r2, #0]
 80124d6:	2301      	movs	r3, #1
 80124d8:	4a21      	ldr	r2, [pc, #132]	; (8012560 <_malloc_r+0x42c>)
 80124da:	1986      	adds	r6, r0, r6
 80124dc:	431e      	orrs	r6, r3
 80124de:	6094      	str	r4, [r2, #8]
 80124e0:	6066      	str	r6, [r4, #4]
 80124e2:	4297      	cmp	r7, r2
 80124e4:	d100      	bne.n	80124e8 <_malloc_r+0x3b4>
 80124e6:	e748      	b.n	801237a <_malloc_r+0x246>
 80124e8:	9a02      	ldr	r2, [sp, #8]
 80124ea:	2a0f      	cmp	r2, #15
 80124ec:	d813      	bhi.n	8012516 <_malloc_r+0x3e2>
 80124ee:	6063      	str	r3, [r4, #4]
 80124f0:	2203      	movs	r2, #3
 80124f2:	4b1b      	ldr	r3, [pc, #108]	; (8012560 <_malloc_r+0x42c>)
 80124f4:	689b      	ldr	r3, [r3, #8]
 80124f6:	685b      	ldr	r3, [r3, #4]
 80124f8:	4393      	bics	r3, r2
 80124fa:	1b5a      	subs	r2, r3, r5
 80124fc:	42ab      	cmp	r3, r5
 80124fe:	d301      	bcc.n	8012504 <_malloc_r+0x3d0>
 8012500:	2a0f      	cmp	r2, #15
 8012502:	dc1d      	bgt.n	8012540 <_malloc_r+0x40c>
 8012504:	9801      	ldr	r0, [sp, #4]
 8012506:	f000 f867 	bl	80125d8 <__malloc_unlock>
 801250a:	e620      	b.n	801214e <_malloc_r+0x1a>
 801250c:	1ae3      	subs	r3, r4, r3
 801250e:	4a13      	ldr	r2, [pc, #76]	; (801255c <_malloc_r+0x428>)
 8012510:	4463      	add	r3, ip
 8012512:	6013      	str	r3, [r2, #0]
 8012514:	e7c7      	b.n	80124a6 <_malloc_r+0x372>
 8012516:	2207      	movs	r2, #7
 8012518:	9e02      	ldr	r6, [sp, #8]
 801251a:	3e0c      	subs	r6, #12
 801251c:	4396      	bics	r6, r2
 801251e:	687a      	ldr	r2, [r7, #4]
 8012520:	4013      	ands	r3, r2
 8012522:	2205      	movs	r2, #5
 8012524:	4333      	orrs	r3, r6
 8012526:	607b      	str	r3, [r7, #4]
 8012528:	19bb      	adds	r3, r7, r6
 801252a:	605a      	str	r2, [r3, #4]
 801252c:	609a      	str	r2, [r3, #8]
 801252e:	2e0f      	cmp	r6, #15
 8012530:	d800      	bhi.n	8012534 <_malloc_r+0x400>
 8012532:	e722      	b.n	801237a <_malloc_r+0x246>
 8012534:	0039      	movs	r1, r7
 8012536:	9801      	ldr	r0, [sp, #4]
 8012538:	3108      	adds	r1, #8
 801253a:	f003 fb07 	bl	8015b4c <_free_r>
 801253e:	e71c      	b.n	801237a <_malloc_r+0x246>
 8012540:	2301      	movs	r3, #1
 8012542:	0018      	movs	r0, r3
 8012544:	4906      	ldr	r1, [pc, #24]	; (8012560 <_malloc_r+0x42c>)
 8012546:	4328      	orrs	r0, r5
 8012548:	688c      	ldr	r4, [r1, #8]
 801254a:	4313      	orrs	r3, r2
 801254c:	1965      	adds	r5, r4, r5
 801254e:	6060      	str	r0, [r4, #4]
 8012550:	608d      	str	r5, [r1, #8]
 8012552:	606b      	str	r3, [r5, #4]
 8012554:	e624      	b.n	80121a0 <_malloc_r+0x6c>
 8012556:	46c0      	nop			; (mov r8, r8)
 8012558:	20000a7c 	.word	0x20000a7c
 801255c:	200067b8 	.word	0x200067b8
 8012560:	20000674 	.word	0x20000674

08012564 <__ascii_mbtowc>:
 8012564:	b082      	sub	sp, #8
 8012566:	2900      	cmp	r1, #0
 8012568:	d100      	bne.n	801256c <__ascii_mbtowc+0x8>
 801256a:	a901      	add	r1, sp, #4
 801256c:	1e10      	subs	r0, r2, #0
 801256e:	d006      	beq.n	801257e <__ascii_mbtowc+0x1a>
 8012570:	2b00      	cmp	r3, #0
 8012572:	d006      	beq.n	8012582 <__ascii_mbtowc+0x1e>
 8012574:	7813      	ldrb	r3, [r2, #0]
 8012576:	600b      	str	r3, [r1, #0]
 8012578:	7810      	ldrb	r0, [r2, #0]
 801257a:	1e43      	subs	r3, r0, #1
 801257c:	4198      	sbcs	r0, r3
 801257e:	b002      	add	sp, #8
 8012580:	4770      	bx	lr
 8012582:	2002      	movs	r0, #2
 8012584:	4240      	negs	r0, r0
 8012586:	e7fa      	b.n	801257e <__ascii_mbtowc+0x1a>

08012588 <memcmp>:
 8012588:	b530      	push	{r4, r5, lr}
 801258a:	2400      	movs	r4, #0
 801258c:	42a2      	cmp	r2, r4
 801258e:	d101      	bne.n	8012594 <memcmp+0xc>
 8012590:	2000      	movs	r0, #0
 8012592:	e005      	b.n	80125a0 <memcmp+0x18>
 8012594:	5d03      	ldrb	r3, [r0, r4]
 8012596:	1c65      	adds	r5, r4, #1
 8012598:	5d0c      	ldrb	r4, [r1, r4]
 801259a:	42a3      	cmp	r3, r4
 801259c:	d001      	beq.n	80125a2 <memcmp+0x1a>
 801259e:	1b18      	subs	r0, r3, r4
 80125a0:	bd30      	pop	{r4, r5, pc}
 80125a2:	002c      	movs	r4, r5
 80125a4:	e7f2      	b.n	801258c <memcmp+0x4>

080125a6 <memcpy>:
 80125a6:	2300      	movs	r3, #0
 80125a8:	b510      	push	{r4, lr}
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d100      	bne.n	80125b0 <memcpy+0xa>
 80125ae:	bd10      	pop	{r4, pc}
 80125b0:	5ccc      	ldrb	r4, [r1, r3]
 80125b2:	54c4      	strb	r4, [r0, r3]
 80125b4:	3301      	adds	r3, #1
 80125b6:	e7f8      	b.n	80125aa <memcpy+0x4>

080125b8 <memset>:
 80125b8:	0003      	movs	r3, r0
 80125ba:	1812      	adds	r2, r2, r0
 80125bc:	4293      	cmp	r3, r2
 80125be:	d100      	bne.n	80125c2 <memset+0xa>
 80125c0:	4770      	bx	lr
 80125c2:	7019      	strb	r1, [r3, #0]
 80125c4:	3301      	adds	r3, #1
 80125c6:	e7f9      	b.n	80125bc <memset+0x4>

080125c8 <__malloc_lock>:
 80125c8:	b510      	push	{r4, lr}
 80125ca:	4802      	ldr	r0, [pc, #8]	; (80125d4 <__malloc_lock+0xc>)
 80125cc:	f003 feb2 	bl	8016334 <__retarget_lock_acquire_recursive>
 80125d0:	bd10      	pop	{r4, pc}
 80125d2:	46c0      	nop			; (mov r8, r8)
 80125d4:	20006dcc 	.word	0x20006dcc

080125d8 <__malloc_unlock>:
 80125d8:	b510      	push	{r4, lr}
 80125da:	4802      	ldr	r0, [pc, #8]	; (80125e4 <__malloc_unlock+0xc>)
 80125dc:	f003 feab 	bl	8016336 <__retarget_lock_release_recursive>
 80125e0:	bd10      	pop	{r4, pc}
 80125e2:	46c0      	nop			; (mov r8, r8)
 80125e4:	20006dcc 	.word	0x20006dcc

080125e8 <rand>:
 80125e8:	4b09      	ldr	r3, [pc, #36]	; (8012610 <rand+0x28>)
 80125ea:	b510      	push	{r4, lr}
 80125ec:	681c      	ldr	r4, [r3, #0]
 80125ee:	4a09      	ldr	r2, [pc, #36]	; (8012614 <rand+0x2c>)
 80125f0:	34a8      	adds	r4, #168	; 0xa8
 80125f2:	6820      	ldr	r0, [r4, #0]
 80125f4:	6861      	ldr	r1, [r4, #4]
 80125f6:	4b08      	ldr	r3, [pc, #32]	; (8012618 <rand+0x30>)
 80125f8:	f7ed ffb8 	bl	800056c <__aeabi_lmul>
 80125fc:	2201      	movs	r2, #1
 80125fe:	2300      	movs	r3, #0
 8012600:	1880      	adds	r0, r0, r2
 8012602:	4159      	adcs	r1, r3
 8012604:	6020      	str	r0, [r4, #0]
 8012606:	6061      	str	r1, [r4, #4]
 8012608:	0048      	lsls	r0, r1, #1
 801260a:	0840      	lsrs	r0, r0, #1
 801260c:	bd10      	pop	{r4, pc}
 801260e:	46c0      	nop			; (mov r8, r8)
 8012610:	200000dc 	.word	0x200000dc
 8012614:	4c957f2d 	.word	0x4c957f2d
 8012618:	5851f42d 	.word	0x5851f42d

0801261c <realloc>:
 801261c:	b510      	push	{r4, lr}
 801261e:	4b03      	ldr	r3, [pc, #12]	; (801262c <realloc+0x10>)
 8012620:	000a      	movs	r2, r1
 8012622:	0001      	movs	r1, r0
 8012624:	6818      	ldr	r0, [r3, #0]
 8012626:	f000 f803 	bl	8012630 <_realloc_r>
 801262a:	bd10      	pop	{r4, pc}
 801262c:	200000dc 	.word	0x200000dc

08012630 <_realloc_r>:
 8012630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012632:	b087      	sub	sp, #28
 8012634:	9003      	str	r0, [sp, #12]
 8012636:	1e0c      	subs	r4, r1, #0
 8012638:	9205      	str	r2, [sp, #20]
 801263a:	d106      	bne.n	801264a <_realloc_r+0x1a>
 801263c:	0011      	movs	r1, r2
 801263e:	f7ff fd79 	bl	8012134 <_malloc_r>
 8012642:	0007      	movs	r7, r0
 8012644:	0038      	movs	r0, r7
 8012646:	b007      	add	sp, #28
 8012648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801264a:	9803      	ldr	r0, [sp, #12]
 801264c:	f7ff ffbc 	bl	80125c8 <__malloc_lock>
 8012650:	0023      	movs	r3, r4
 8012652:	3b08      	subs	r3, #8
 8012654:	685f      	ldr	r7, [r3, #4]
 8012656:	9302      	str	r3, [sp, #8]
 8012658:	003a      	movs	r2, r7
 801265a:	2303      	movs	r3, #3
 801265c:	9e05      	ldr	r6, [sp, #20]
 801265e:	439a      	bics	r2, r3
 8012660:	360b      	adds	r6, #11
 8012662:	9204      	str	r2, [sp, #16]
 8012664:	2e16      	cmp	r6, #22
 8012666:	d908      	bls.n	801267a <_realloc_r+0x4a>
 8012668:	3304      	adds	r3, #4
 801266a:	439e      	bics	r6, r3
 801266c:	9601      	str	r6, [sp, #4]
 801266e:	d506      	bpl.n	801267e <_realloc_r+0x4e>
 8012670:	230c      	movs	r3, #12
 8012672:	9a03      	ldr	r2, [sp, #12]
 8012674:	2700      	movs	r7, #0
 8012676:	6013      	str	r3, [r2, #0]
 8012678:	e7e4      	b.n	8012644 <_realloc_r+0x14>
 801267a:	2310      	movs	r3, #16
 801267c:	9301      	str	r3, [sp, #4]
 801267e:	9b01      	ldr	r3, [sp, #4]
 8012680:	9a05      	ldr	r2, [sp, #20]
 8012682:	4293      	cmp	r3, r2
 8012684:	d3f4      	bcc.n	8012670 <_realloc_r+0x40>
 8012686:	9b01      	ldr	r3, [sp, #4]
 8012688:	9a04      	ldr	r2, [sp, #16]
 801268a:	4293      	cmp	r3, r2
 801268c:	dc00      	bgt.n	8012690 <_realloc_r+0x60>
 801268e:	e16f      	b.n	8012970 <_realloc_r+0x340>
 8012690:	9b02      	ldr	r3, [sp, #8]
 8012692:	48bc      	ldr	r0, [pc, #752]	; (8012984 <_realloc_r+0x354>)
 8012694:	189b      	adds	r3, r3, r2
 8012696:	6882      	ldr	r2, [r0, #8]
 8012698:	4694      	mov	ip, r2
 801269a:	685a      	ldr	r2, [r3, #4]
 801269c:	459c      	cmp	ip, r3
 801269e:	d006      	beq.n	80126ae <_realloc_r+0x7e>
 80126a0:	2501      	movs	r5, #1
 80126a2:	0011      	movs	r1, r2
 80126a4:	43a9      	bics	r1, r5
 80126a6:	1859      	adds	r1, r3, r1
 80126a8:	6849      	ldr	r1, [r1, #4]
 80126aa:	4229      	tst	r1, r5
 80126ac:	d146      	bne.n	801273c <_realloc_r+0x10c>
 80126ae:	2103      	movs	r1, #3
 80126b0:	438a      	bics	r2, r1
 80126b2:	9904      	ldr	r1, [sp, #16]
 80126b4:	188e      	adds	r6, r1, r2
 80126b6:	9901      	ldr	r1, [sp, #4]
 80126b8:	459c      	cmp	ip, r3
 80126ba:	d117      	bne.n	80126ec <_realloc_r+0xbc>
 80126bc:	3110      	adds	r1, #16
 80126be:	42b1      	cmp	r1, r6
 80126c0:	dc3e      	bgt.n	8012740 <_realloc_r+0x110>
 80126c2:	9901      	ldr	r1, [sp, #4]
 80126c4:	9b02      	ldr	r3, [sp, #8]
 80126c6:	468c      	mov	ip, r1
 80126c8:	4463      	add	r3, ip
 80126ca:	6083      	str	r3, [r0, #8]
 80126cc:	001a      	movs	r2, r3
 80126ce:	1a73      	subs	r3, r6, r1
 80126d0:	2601      	movs	r6, #1
 80126d2:	4333      	orrs	r3, r6
 80126d4:	6053      	str	r3, [r2, #4]
 80126d6:	0023      	movs	r3, r4
 80126d8:	3b08      	subs	r3, #8
 80126da:	685a      	ldr	r2, [r3, #4]
 80126dc:	9803      	ldr	r0, [sp, #12]
 80126de:	4016      	ands	r6, r2
 80126e0:	430e      	orrs	r6, r1
 80126e2:	605e      	str	r6, [r3, #4]
 80126e4:	f7ff ff78 	bl	80125d8 <__malloc_unlock>
 80126e8:	0027      	movs	r7, r4
 80126ea:	e7ab      	b.n	8012644 <_realloc_r+0x14>
 80126ec:	42b1      	cmp	r1, r6
 80126ee:	dc27      	bgt.n	8012740 <_realloc_r+0x110>
 80126f0:	68da      	ldr	r2, [r3, #12]
 80126f2:	689b      	ldr	r3, [r3, #8]
 80126f4:	60da      	str	r2, [r3, #12]
 80126f6:	6093      	str	r3, [r2, #8]
 80126f8:	9b01      	ldr	r3, [sp, #4]
 80126fa:	9a02      	ldr	r2, [sp, #8]
 80126fc:	1af4      	subs	r4, r6, r3
 80126fe:	9b02      	ldr	r3, [sp, #8]
 8012700:	1992      	adds	r2, r2, r6
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	9304      	str	r3, [sp, #16]
 8012706:	2301      	movs	r3, #1
 8012708:	9804      	ldr	r0, [sp, #16]
 801270a:	4018      	ands	r0, r3
 801270c:	2c0f      	cmp	r4, #15
 801270e:	d800      	bhi.n	8012712 <_realloc_r+0xe2>
 8012710:	e130      	b.n	8012974 <_realloc_r+0x344>
 8012712:	9d01      	ldr	r5, [sp, #4]
 8012714:	9902      	ldr	r1, [sp, #8]
 8012716:	4328      	orrs	r0, r5
 8012718:	1949      	adds	r1, r1, r5
 801271a:	9d02      	ldr	r5, [sp, #8]
 801271c:	431c      	orrs	r4, r3
 801271e:	6068      	str	r0, [r5, #4]
 8012720:	604c      	str	r4, [r1, #4]
 8012722:	6850      	ldr	r0, [r2, #4]
 8012724:	3108      	adds	r1, #8
 8012726:	4303      	orrs	r3, r0
 8012728:	6053      	str	r3, [r2, #4]
 801272a:	9803      	ldr	r0, [sp, #12]
 801272c:	f003 fa0e 	bl	8015b4c <_free_r>
 8012730:	9803      	ldr	r0, [sp, #12]
 8012732:	f7ff ff51 	bl	80125d8 <__malloc_unlock>
 8012736:	9f02      	ldr	r7, [sp, #8]
 8012738:	3708      	adds	r7, #8
 801273a:	e783      	b.n	8012644 <_realloc_r+0x14>
 801273c:	2200      	movs	r2, #0
 801273e:	0013      	movs	r3, r2
 8012740:	07f9      	lsls	r1, r7, #31
 8012742:	d500      	bpl.n	8012746 <_realloc_r+0x116>
 8012744:	e0c6      	b.n	80128d4 <_realloc_r+0x2a4>
 8012746:	0021      	movs	r1, r4
 8012748:	3908      	subs	r1, #8
 801274a:	680d      	ldr	r5, [r1, #0]
 801274c:	9902      	ldr	r1, [sp, #8]
 801274e:	1b4d      	subs	r5, r1, r5
 8012750:	2103      	movs	r1, #3
 8012752:	686f      	ldr	r7, [r5, #4]
 8012754:	438f      	bics	r7, r1
 8012756:	9904      	ldr	r1, [sp, #16]
 8012758:	187f      	adds	r7, r7, r1
 801275a:	2b00      	cmp	r3, #0
 801275c:	d100      	bne.n	8012760 <_realloc_r+0x130>
 801275e:	e084      	b.n	801286a <_realloc_r+0x23a>
 8012760:	19d6      	adds	r6, r2, r7
 8012762:	459c      	cmp	ip, r3
 8012764:	d148      	bne.n	80127f8 <_realloc_r+0x1c8>
 8012766:	9b01      	ldr	r3, [sp, #4]
 8012768:	3310      	adds	r3, #16
 801276a:	42b3      	cmp	r3, r6
 801276c:	dc7d      	bgt.n	801286a <_realloc_r+0x23a>
 801276e:	68aa      	ldr	r2, [r5, #8]
 8012770:	68eb      	ldr	r3, [r5, #12]
 8012772:	002f      	movs	r7, r5
 8012774:	60d3      	str	r3, [r2, #12]
 8012776:	609a      	str	r2, [r3, #8]
 8012778:	000a      	movs	r2, r1
 801277a:	3a04      	subs	r2, #4
 801277c:	3708      	adds	r7, #8
 801277e:	2a24      	cmp	r2, #36	; 0x24
 8012780:	d835      	bhi.n	80127ee <_realloc_r+0x1be>
 8012782:	003b      	movs	r3, r7
 8012784:	2a13      	cmp	r2, #19
 8012786:	d908      	bls.n	801279a <_realloc_r+0x16a>
 8012788:	6823      	ldr	r3, [r4, #0]
 801278a:	60ab      	str	r3, [r5, #8]
 801278c:	6863      	ldr	r3, [r4, #4]
 801278e:	60eb      	str	r3, [r5, #12]
 8012790:	2a1b      	cmp	r2, #27
 8012792:	d81a      	bhi.n	80127ca <_realloc_r+0x19a>
 8012794:	002b      	movs	r3, r5
 8012796:	3408      	adds	r4, #8
 8012798:	3310      	adds	r3, #16
 801279a:	6822      	ldr	r2, [r4, #0]
 801279c:	601a      	str	r2, [r3, #0]
 801279e:	6862      	ldr	r2, [r4, #4]
 80127a0:	605a      	str	r2, [r3, #4]
 80127a2:	68a2      	ldr	r2, [r4, #8]
 80127a4:	609a      	str	r2, [r3, #8]
 80127a6:	9b01      	ldr	r3, [sp, #4]
 80127a8:	18ea      	adds	r2, r5, r3
 80127aa:	4b76      	ldr	r3, [pc, #472]	; (8012984 <_realloc_r+0x354>)
 80127ac:	609a      	str	r2, [r3, #8]
 80127ae:	9b01      	ldr	r3, [sp, #4]
 80127b0:	1af3      	subs	r3, r6, r3
 80127b2:	2601      	movs	r6, #1
 80127b4:	4333      	orrs	r3, r6
 80127b6:	6053      	str	r3, [r2, #4]
 80127b8:	686b      	ldr	r3, [r5, #4]
 80127ba:	401e      	ands	r6, r3
 80127bc:	9b01      	ldr	r3, [sp, #4]
 80127be:	431e      	orrs	r6, r3
 80127c0:	606e      	str	r6, [r5, #4]
 80127c2:	9803      	ldr	r0, [sp, #12]
 80127c4:	f7ff ff08 	bl	80125d8 <__malloc_unlock>
 80127c8:	e73c      	b.n	8012644 <_realloc_r+0x14>
 80127ca:	68a3      	ldr	r3, [r4, #8]
 80127cc:	612b      	str	r3, [r5, #16]
 80127ce:	68e3      	ldr	r3, [r4, #12]
 80127d0:	616b      	str	r3, [r5, #20]
 80127d2:	2a24      	cmp	r2, #36	; 0x24
 80127d4:	d003      	beq.n	80127de <_realloc_r+0x1ae>
 80127d6:	002b      	movs	r3, r5
 80127d8:	3410      	adds	r4, #16
 80127da:	3318      	adds	r3, #24
 80127dc:	e7dd      	b.n	801279a <_realloc_r+0x16a>
 80127de:	6923      	ldr	r3, [r4, #16]
 80127e0:	61ab      	str	r3, [r5, #24]
 80127e2:	002b      	movs	r3, r5
 80127e4:	6962      	ldr	r2, [r4, #20]
 80127e6:	3320      	adds	r3, #32
 80127e8:	61ea      	str	r2, [r5, #28]
 80127ea:	3418      	adds	r4, #24
 80127ec:	e7d5      	b.n	801279a <_realloc_r+0x16a>
 80127ee:	0021      	movs	r1, r4
 80127f0:	0038      	movs	r0, r7
 80127f2:	f003 fdac 	bl	801634e <memmove>
 80127f6:	e7d6      	b.n	80127a6 <_realloc_r+0x176>
 80127f8:	9a01      	ldr	r2, [sp, #4]
 80127fa:	42b2      	cmp	r2, r6
 80127fc:	dc35      	bgt.n	801286a <_realloc_r+0x23a>
 80127fe:	0028      	movs	r0, r5
 8012800:	68da      	ldr	r2, [r3, #12]
 8012802:	689b      	ldr	r3, [r3, #8]
 8012804:	3008      	adds	r0, #8
 8012806:	60da      	str	r2, [r3, #12]
 8012808:	6093      	str	r3, [r2, #8]
 801280a:	68aa      	ldr	r2, [r5, #8]
 801280c:	68eb      	ldr	r3, [r5, #12]
 801280e:	60d3      	str	r3, [r2, #12]
 8012810:	609a      	str	r2, [r3, #8]
 8012812:	9a04      	ldr	r2, [sp, #16]
 8012814:	3a04      	subs	r2, #4
 8012816:	2a24      	cmp	r2, #36	; 0x24
 8012818:	d823      	bhi.n	8012862 <_realloc_r+0x232>
 801281a:	2a13      	cmp	r2, #19
 801281c:	d907      	bls.n	801282e <_realloc_r+0x1fe>
 801281e:	6823      	ldr	r3, [r4, #0]
 8012820:	60ab      	str	r3, [r5, #8]
 8012822:	6863      	ldr	r3, [r4, #4]
 8012824:	60eb      	str	r3, [r5, #12]
 8012826:	2a1b      	cmp	r2, #27
 8012828:	d809      	bhi.n	801283e <_realloc_r+0x20e>
 801282a:	3408      	adds	r4, #8
 801282c:	3008      	adds	r0, #8
 801282e:	6823      	ldr	r3, [r4, #0]
 8012830:	6003      	str	r3, [r0, #0]
 8012832:	6863      	ldr	r3, [r4, #4]
 8012834:	6043      	str	r3, [r0, #4]
 8012836:	68a3      	ldr	r3, [r4, #8]
 8012838:	6083      	str	r3, [r0, #8]
 801283a:	9502      	str	r5, [sp, #8]
 801283c:	e75c      	b.n	80126f8 <_realloc_r+0xc8>
 801283e:	68a3      	ldr	r3, [r4, #8]
 8012840:	612b      	str	r3, [r5, #16]
 8012842:	68e3      	ldr	r3, [r4, #12]
 8012844:	616b      	str	r3, [r5, #20]
 8012846:	2a24      	cmp	r2, #36	; 0x24
 8012848:	d003      	beq.n	8012852 <_realloc_r+0x222>
 801284a:	0028      	movs	r0, r5
 801284c:	3410      	adds	r4, #16
 801284e:	3018      	adds	r0, #24
 8012850:	e7ed      	b.n	801282e <_realloc_r+0x1fe>
 8012852:	0028      	movs	r0, r5
 8012854:	6923      	ldr	r3, [r4, #16]
 8012856:	3020      	adds	r0, #32
 8012858:	61ab      	str	r3, [r5, #24]
 801285a:	6963      	ldr	r3, [r4, #20]
 801285c:	3418      	adds	r4, #24
 801285e:	61eb      	str	r3, [r5, #28]
 8012860:	e7e5      	b.n	801282e <_realloc_r+0x1fe>
 8012862:	0021      	movs	r1, r4
 8012864:	f003 fd73 	bl	801634e <memmove>
 8012868:	e7e7      	b.n	801283a <_realloc_r+0x20a>
 801286a:	9b01      	ldr	r3, [sp, #4]
 801286c:	42bb      	cmp	r3, r7
 801286e:	dc31      	bgt.n	80128d4 <_realloc_r+0x2a4>
 8012870:	0028      	movs	r0, r5
 8012872:	68aa      	ldr	r2, [r5, #8]
 8012874:	68eb      	ldr	r3, [r5, #12]
 8012876:	3008      	adds	r0, #8
 8012878:	60d3      	str	r3, [r2, #12]
 801287a:	609a      	str	r2, [r3, #8]
 801287c:	9a04      	ldr	r2, [sp, #16]
 801287e:	3a04      	subs	r2, #4
 8012880:	2a24      	cmp	r2, #36	; 0x24
 8012882:	d823      	bhi.n	80128cc <_realloc_r+0x29c>
 8012884:	2a13      	cmp	r2, #19
 8012886:	d907      	bls.n	8012898 <_realloc_r+0x268>
 8012888:	6823      	ldr	r3, [r4, #0]
 801288a:	60ab      	str	r3, [r5, #8]
 801288c:	6863      	ldr	r3, [r4, #4]
 801288e:	60eb      	str	r3, [r5, #12]
 8012890:	2a1b      	cmp	r2, #27
 8012892:	d809      	bhi.n	80128a8 <_realloc_r+0x278>
 8012894:	3408      	adds	r4, #8
 8012896:	3008      	adds	r0, #8
 8012898:	6823      	ldr	r3, [r4, #0]
 801289a:	6003      	str	r3, [r0, #0]
 801289c:	6863      	ldr	r3, [r4, #4]
 801289e:	6043      	str	r3, [r0, #4]
 80128a0:	68a3      	ldr	r3, [r4, #8]
 80128a2:	6083      	str	r3, [r0, #8]
 80128a4:	003e      	movs	r6, r7
 80128a6:	e7c8      	b.n	801283a <_realloc_r+0x20a>
 80128a8:	68a3      	ldr	r3, [r4, #8]
 80128aa:	612b      	str	r3, [r5, #16]
 80128ac:	68e3      	ldr	r3, [r4, #12]
 80128ae:	616b      	str	r3, [r5, #20]
 80128b0:	2a24      	cmp	r2, #36	; 0x24
 80128b2:	d003      	beq.n	80128bc <_realloc_r+0x28c>
 80128b4:	0028      	movs	r0, r5
 80128b6:	3410      	adds	r4, #16
 80128b8:	3018      	adds	r0, #24
 80128ba:	e7ed      	b.n	8012898 <_realloc_r+0x268>
 80128bc:	0028      	movs	r0, r5
 80128be:	6923      	ldr	r3, [r4, #16]
 80128c0:	3020      	adds	r0, #32
 80128c2:	61ab      	str	r3, [r5, #24]
 80128c4:	6963      	ldr	r3, [r4, #20]
 80128c6:	3418      	adds	r4, #24
 80128c8:	61eb      	str	r3, [r5, #28]
 80128ca:	e7e5      	b.n	8012898 <_realloc_r+0x268>
 80128cc:	0021      	movs	r1, r4
 80128ce:	f003 fd3e 	bl	801634e <memmove>
 80128d2:	e7e7      	b.n	80128a4 <_realloc_r+0x274>
 80128d4:	9905      	ldr	r1, [sp, #20]
 80128d6:	9803      	ldr	r0, [sp, #12]
 80128d8:	f7ff fc2c 	bl	8012134 <_malloc_r>
 80128dc:	1e07      	subs	r7, r0, #0
 80128de:	d100      	bne.n	80128e2 <_realloc_r+0x2b2>
 80128e0:	e76f      	b.n	80127c2 <_realloc_r+0x192>
 80128e2:	0023      	movs	r3, r4
 80128e4:	2201      	movs	r2, #1
 80128e6:	3b08      	subs	r3, #8
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	4393      	bics	r3, r2
 80128ec:	9a02      	ldr	r2, [sp, #8]
 80128ee:	18d3      	adds	r3, r2, r3
 80128f0:	0002      	movs	r2, r0
 80128f2:	3a08      	subs	r2, #8
 80128f4:	4293      	cmp	r3, r2
 80128f6:	d105      	bne.n	8012904 <_realloc_r+0x2d4>
 80128f8:	685e      	ldr	r6, [r3, #4]
 80128fa:	2303      	movs	r3, #3
 80128fc:	439e      	bics	r6, r3
 80128fe:	9b04      	ldr	r3, [sp, #16]
 8012900:	18f6      	adds	r6, r6, r3
 8012902:	e6f9      	b.n	80126f8 <_realloc_r+0xc8>
 8012904:	9a04      	ldr	r2, [sp, #16]
 8012906:	3a04      	subs	r2, #4
 8012908:	2a24      	cmp	r2, #36	; 0x24
 801290a:	d82d      	bhi.n	8012968 <_realloc_r+0x338>
 801290c:	2a13      	cmp	r2, #19
 801290e:	d928      	bls.n	8012962 <_realloc_r+0x332>
 8012910:	6823      	ldr	r3, [r4, #0]
 8012912:	6003      	str	r3, [r0, #0]
 8012914:	6863      	ldr	r3, [r4, #4]
 8012916:	6043      	str	r3, [r0, #4]
 8012918:	2a1b      	cmp	r2, #27
 801291a:	d80e      	bhi.n	801293a <_realloc_r+0x30a>
 801291c:	0022      	movs	r2, r4
 801291e:	0003      	movs	r3, r0
 8012920:	3208      	adds	r2, #8
 8012922:	3308      	adds	r3, #8
 8012924:	6811      	ldr	r1, [r2, #0]
 8012926:	6019      	str	r1, [r3, #0]
 8012928:	6851      	ldr	r1, [r2, #4]
 801292a:	6059      	str	r1, [r3, #4]
 801292c:	6892      	ldr	r2, [r2, #8]
 801292e:	609a      	str	r2, [r3, #8]
 8012930:	0021      	movs	r1, r4
 8012932:	9803      	ldr	r0, [sp, #12]
 8012934:	f003 f90a 	bl	8015b4c <_free_r>
 8012938:	e743      	b.n	80127c2 <_realloc_r+0x192>
 801293a:	68a3      	ldr	r3, [r4, #8]
 801293c:	6083      	str	r3, [r0, #8]
 801293e:	68e3      	ldr	r3, [r4, #12]
 8012940:	60c3      	str	r3, [r0, #12]
 8012942:	2a24      	cmp	r2, #36	; 0x24
 8012944:	d004      	beq.n	8012950 <_realloc_r+0x320>
 8012946:	0022      	movs	r2, r4
 8012948:	0003      	movs	r3, r0
 801294a:	3210      	adds	r2, #16
 801294c:	3310      	adds	r3, #16
 801294e:	e7e9      	b.n	8012924 <_realloc_r+0x2f4>
 8012950:	6923      	ldr	r3, [r4, #16]
 8012952:	0022      	movs	r2, r4
 8012954:	6103      	str	r3, [r0, #16]
 8012956:	0003      	movs	r3, r0
 8012958:	6961      	ldr	r1, [r4, #20]
 801295a:	3218      	adds	r2, #24
 801295c:	3318      	adds	r3, #24
 801295e:	6141      	str	r1, [r0, #20]
 8012960:	e7e0      	b.n	8012924 <_realloc_r+0x2f4>
 8012962:	0003      	movs	r3, r0
 8012964:	0022      	movs	r2, r4
 8012966:	e7dd      	b.n	8012924 <_realloc_r+0x2f4>
 8012968:	0021      	movs	r1, r4
 801296a:	f003 fcf0 	bl	801634e <memmove>
 801296e:	e7df      	b.n	8012930 <_realloc_r+0x300>
 8012970:	9e04      	ldr	r6, [sp, #16]
 8012972:	e6c1      	b.n	80126f8 <_realloc_r+0xc8>
 8012974:	9902      	ldr	r1, [sp, #8]
 8012976:	4306      	orrs	r6, r0
 8012978:	604e      	str	r6, [r1, #4]
 801297a:	6851      	ldr	r1, [r2, #4]
 801297c:	430b      	orrs	r3, r1
 801297e:	6053      	str	r3, [r2, #4]
 8012980:	e6d6      	b.n	8012730 <_realloc_r+0x100>
 8012982:	46c0      	nop			; (mov r8, r8)
 8012984:	20000674 	.word	0x20000674

08012988 <_sbrk_r>:
 8012988:	2300      	movs	r3, #0
 801298a:	b570      	push	{r4, r5, r6, lr}
 801298c:	4c06      	ldr	r4, [pc, #24]	; (80129a8 <_sbrk_r+0x20>)
 801298e:	0005      	movs	r5, r0
 8012990:	0008      	movs	r0, r1
 8012992:	6023      	str	r3, [r4, #0]
 8012994:	f004 f9c0 	bl	8016d18 <_sbrk>
 8012998:	1c43      	adds	r3, r0, #1
 801299a:	d103      	bne.n	80129a4 <_sbrk_r+0x1c>
 801299c:	6823      	ldr	r3, [r4, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d000      	beq.n	80129a4 <_sbrk_r+0x1c>
 80129a2:	602b      	str	r3, [r5, #0]
 80129a4:	bd70      	pop	{r4, r5, r6, pc}
 80129a6:	46c0      	nop			; (mov r8, r8)
 80129a8:	20006dd4 	.word	0x20006dd4

080129ac <sprintf>:
 80129ac:	b40e      	push	{r1, r2, r3}
 80129ae:	b500      	push	{lr}
 80129b0:	490b      	ldr	r1, [pc, #44]	; (80129e0 <sprintf+0x34>)
 80129b2:	b09c      	sub	sp, #112	; 0x70
 80129b4:	ab1d      	add	r3, sp, #116	; 0x74
 80129b6:	9002      	str	r0, [sp, #8]
 80129b8:	9006      	str	r0, [sp, #24]
 80129ba:	9107      	str	r1, [sp, #28]
 80129bc:	9104      	str	r1, [sp, #16]
 80129be:	4809      	ldr	r0, [pc, #36]	; (80129e4 <sprintf+0x38>)
 80129c0:	4909      	ldr	r1, [pc, #36]	; (80129e8 <sprintf+0x3c>)
 80129c2:	cb04      	ldmia	r3!, {r2}
 80129c4:	9105      	str	r1, [sp, #20]
 80129c6:	6800      	ldr	r0, [r0, #0]
 80129c8:	a902      	add	r1, sp, #8
 80129ca:	9301      	str	r3, [sp, #4]
 80129cc:	f000 ff78 	bl	80138c0 <_svfprintf_r>
 80129d0:	2300      	movs	r3, #0
 80129d2:	9a02      	ldr	r2, [sp, #8]
 80129d4:	7013      	strb	r3, [r2, #0]
 80129d6:	b01c      	add	sp, #112	; 0x70
 80129d8:	bc08      	pop	{r3}
 80129da:	b003      	add	sp, #12
 80129dc:	4718      	bx	r3
 80129de:	46c0      	nop			; (mov r8, r8)
 80129e0:	7fffffff 	.word	0x7fffffff
 80129e4:	200000dc 	.word	0x200000dc
 80129e8:	ffff0208 	.word	0xffff0208

080129ec <strcat>:
 80129ec:	0002      	movs	r2, r0
 80129ee:	b510      	push	{r4, lr}
 80129f0:	7813      	ldrb	r3, [r2, #0]
 80129f2:	1c54      	adds	r4, r2, #1
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d105      	bne.n	8012a04 <strcat+0x18>
 80129f8:	5ccc      	ldrb	r4, [r1, r3]
 80129fa:	54d4      	strb	r4, [r2, r3]
 80129fc:	3301      	adds	r3, #1
 80129fe:	2c00      	cmp	r4, #0
 8012a00:	d1fa      	bne.n	80129f8 <strcat+0xc>
 8012a02:	bd10      	pop	{r4, pc}
 8012a04:	0022      	movs	r2, r4
 8012a06:	e7f3      	b.n	80129f0 <strcat+0x4>

08012a08 <strchr>:
 8012a08:	b2c9      	uxtb	r1, r1
 8012a0a:	7803      	ldrb	r3, [r0, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d004      	beq.n	8012a1a <strchr+0x12>
 8012a10:	428b      	cmp	r3, r1
 8012a12:	d100      	bne.n	8012a16 <strchr+0xe>
 8012a14:	4770      	bx	lr
 8012a16:	3001      	adds	r0, #1
 8012a18:	e7f7      	b.n	8012a0a <strchr+0x2>
 8012a1a:	424b      	negs	r3, r1
 8012a1c:	4159      	adcs	r1, r3
 8012a1e:	4249      	negs	r1, r1
 8012a20:	4008      	ands	r0, r1
 8012a22:	e7f7      	b.n	8012a14 <strchr+0xc>

08012a24 <strcpy>:
 8012a24:	0003      	movs	r3, r0
 8012a26:	780a      	ldrb	r2, [r1, #0]
 8012a28:	3101      	adds	r1, #1
 8012a2a:	701a      	strb	r2, [r3, #0]
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	2a00      	cmp	r2, #0
 8012a30:	d1f9      	bne.n	8012a26 <strcpy+0x2>
 8012a32:	4770      	bx	lr

08012a34 <strncmp>:
 8012a34:	2300      	movs	r3, #0
 8012a36:	b530      	push	{r4, r5, lr}
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d00a      	beq.n	8012a52 <strncmp+0x1e>
 8012a3c:	3a01      	subs	r2, #1
 8012a3e:	5cc4      	ldrb	r4, [r0, r3]
 8012a40:	5ccd      	ldrb	r5, [r1, r3]
 8012a42:	42ac      	cmp	r4, r5
 8012a44:	d104      	bne.n	8012a50 <strncmp+0x1c>
 8012a46:	4293      	cmp	r3, r2
 8012a48:	d002      	beq.n	8012a50 <strncmp+0x1c>
 8012a4a:	3301      	adds	r3, #1
 8012a4c:	2c00      	cmp	r4, #0
 8012a4e:	d1f6      	bne.n	8012a3e <strncmp+0xa>
 8012a50:	1b63      	subs	r3, r4, r5
 8012a52:	0018      	movs	r0, r3
 8012a54:	bd30      	pop	{r4, r5, pc}

08012a56 <strncpy>:
 8012a56:	b530      	push	{r4, r5, lr}
 8012a58:	0005      	movs	r5, r0
 8012a5a:	2a00      	cmp	r2, #0
 8012a5c:	d100      	bne.n	8012a60 <strncpy+0xa>
 8012a5e:	bd30      	pop	{r4, r5, pc}
 8012a60:	780c      	ldrb	r4, [r1, #0]
 8012a62:	3a01      	subs	r2, #1
 8012a64:	1c6b      	adds	r3, r5, #1
 8012a66:	702c      	strb	r4, [r5, #0]
 8012a68:	3101      	adds	r1, #1
 8012a6a:	2c00      	cmp	r4, #0
 8012a6c:	d105      	bne.n	8012a7a <strncpy+0x24>
 8012a6e:	189a      	adds	r2, r3, r2
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d0f4      	beq.n	8012a5e <strncpy+0x8>
 8012a74:	701c      	strb	r4, [r3, #0]
 8012a76:	3301      	adds	r3, #1
 8012a78:	e7fa      	b.n	8012a70 <strncpy+0x1a>
 8012a7a:	001d      	movs	r5, r3
 8012a7c:	e7ed      	b.n	8012a5a <strncpy+0x4>
	...

08012a80 <sulp>:
 8012a80:	b570      	push	{r4, r5, r6, lr}
 8012a82:	0016      	movs	r6, r2
 8012a84:	000d      	movs	r5, r1
 8012a86:	f003 ff17 	bl	80168b8 <__ulp>
 8012a8a:	2e00      	cmp	r6, #0
 8012a8c:	d00d      	beq.n	8012aaa <sulp+0x2a>
 8012a8e:	236b      	movs	r3, #107	; 0x6b
 8012a90:	006a      	lsls	r2, r5, #1
 8012a92:	0d52      	lsrs	r2, r2, #21
 8012a94:	1a9b      	subs	r3, r3, r2
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	dd07      	ble.n	8012aaa <sulp+0x2a>
 8012a9a:	2400      	movs	r4, #0
 8012a9c:	4a03      	ldr	r2, [pc, #12]	; (8012aac <sulp+0x2c>)
 8012a9e:	051b      	lsls	r3, r3, #20
 8012aa0:	189d      	adds	r5, r3, r2
 8012aa2:	002b      	movs	r3, r5
 8012aa4:	0022      	movs	r2, r4
 8012aa6:	f7ef f9c5 	bl	8001e34 <__aeabi_dmul>
 8012aaa:	bd70      	pop	{r4, r5, r6, pc}
 8012aac:	3ff00000 	.word	0x3ff00000

08012ab0 <_strtod_l>:
 8012ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ab2:	b0a7      	sub	sp, #156	; 0x9c
 8012ab4:	9307      	str	r3, [sp, #28]
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	9004      	str	r0, [sp, #16]
 8012aba:	9807      	ldr	r0, [sp, #28]
 8012abc:	9322      	str	r3, [sp, #136]	; 0x88
 8012abe:	9106      	str	r1, [sp, #24]
 8012ac0:	921d      	str	r2, [sp, #116]	; 0x74
 8012ac2:	f003 fc28 	bl	8016316 <__localeconv_l>
 8012ac6:	0005      	movs	r5, r0
 8012ac8:	6800      	ldr	r0, [r0, #0]
 8012aca:	f7ed fb25 	bl	8000118 <strlen>
 8012ace:	2600      	movs	r6, #0
 8012ad0:	2700      	movs	r7, #0
 8012ad2:	9b06      	ldr	r3, [sp, #24]
 8012ad4:	9005      	str	r0, [sp, #20]
 8012ad6:	9321      	str	r3, [sp, #132]	; 0x84
 8012ad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ada:	781a      	ldrb	r2, [r3, #0]
 8012adc:	2a0d      	cmp	r2, #13
 8012ade:	d839      	bhi.n	8012b54 <_strtod_l+0xa4>
 8012ae0:	2a09      	cmp	r2, #9
 8012ae2:	d23d      	bcs.n	8012b60 <_strtod_l+0xb0>
 8012ae4:	2a00      	cmp	r2, #0
 8012ae6:	d044      	beq.n	8012b72 <_strtod_l+0xc2>
 8012ae8:	2300      	movs	r3, #0
 8012aea:	9313      	str	r3, [sp, #76]	; 0x4c
 8012aec:	2200      	movs	r2, #0
 8012aee:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012af0:	920c      	str	r2, [sp, #48]	; 0x30
 8012af2:	7823      	ldrb	r3, [r4, #0]
 8012af4:	2b30      	cmp	r3, #48	; 0x30
 8012af6:	d000      	beq.n	8012afa <_strtod_l+0x4a>
 8012af8:	e07e      	b.n	8012bf8 <_strtod_l+0x148>
 8012afa:	7863      	ldrb	r3, [r4, #1]
 8012afc:	2b58      	cmp	r3, #88	; 0x58
 8012afe:	d002      	beq.n	8012b06 <_strtod_l+0x56>
 8012b00:	2b78      	cmp	r3, #120	; 0x78
 8012b02:	d000      	beq.n	8012b06 <_strtod_l+0x56>
 8012b04:	e06e      	b.n	8012be4 <_strtod_l+0x134>
 8012b06:	9b07      	ldr	r3, [sp, #28]
 8012b08:	4a96      	ldr	r2, [pc, #600]	; (8012d64 <_strtod_l+0x2b4>)
 8012b0a:	9302      	str	r3, [sp, #8]
 8012b0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012b0e:	a921      	add	r1, sp, #132	; 0x84
 8012b10:	9301      	str	r3, [sp, #4]
 8012b12:	ab22      	add	r3, sp, #136	; 0x88
 8012b14:	9300      	str	r3, [sp, #0]
 8012b16:	9804      	ldr	r0, [sp, #16]
 8012b18:	ab23      	add	r3, sp, #140	; 0x8c
 8012b1a:	f003 f914 	bl	8015d46 <__gethex>
 8012b1e:	2507      	movs	r5, #7
 8012b20:	9005      	str	r0, [sp, #20]
 8012b22:	4005      	ands	r5, r0
 8012b24:	d005      	beq.n	8012b32 <_strtod_l+0x82>
 8012b26:	2d06      	cmp	r5, #6
 8012b28:	d12f      	bne.n	8012b8a <_strtod_l+0xda>
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	3401      	adds	r4, #1
 8012b2e:	9421      	str	r4, [sp, #132]	; 0x84
 8012b30:	9313      	str	r3, [sp, #76]	; 0x4c
 8012b32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d002      	beq.n	8012b3e <_strtod_l+0x8e>
 8012b38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b3a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012b3c:	601a      	str	r2, [r3, #0]
 8012b3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d01d      	beq.n	8012b80 <_strtod_l+0xd0>
 8012b44:	2380      	movs	r3, #128	; 0x80
 8012b46:	0032      	movs	r2, r6
 8012b48:	061b      	lsls	r3, r3, #24
 8012b4a:	18fb      	adds	r3, r7, r3
 8012b4c:	0010      	movs	r0, r2
 8012b4e:	0019      	movs	r1, r3
 8012b50:	b027      	add	sp, #156	; 0x9c
 8012b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b54:	2a2b      	cmp	r2, #43	; 0x2b
 8012b56:	d016      	beq.n	8012b86 <_strtod_l+0xd6>
 8012b58:	2a2d      	cmp	r2, #45	; 0x2d
 8012b5a:	d003      	beq.n	8012b64 <_strtod_l+0xb4>
 8012b5c:	2a20      	cmp	r2, #32
 8012b5e:	d1c3      	bne.n	8012ae8 <_strtod_l+0x38>
 8012b60:	3301      	adds	r3, #1
 8012b62:	e7b8      	b.n	8012ad6 <_strtod_l+0x26>
 8012b64:	2201      	movs	r2, #1
 8012b66:	9213      	str	r2, [sp, #76]	; 0x4c
 8012b68:	1c5a      	adds	r2, r3, #1
 8012b6a:	9221      	str	r2, [sp, #132]	; 0x84
 8012b6c:	785b      	ldrb	r3, [r3, #1]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d1bc      	bne.n	8012aec <_strtod_l+0x3c>
 8012b72:	9b06      	ldr	r3, [sp, #24]
 8012b74:	9321      	str	r3, [sp, #132]	; 0x84
 8012b76:	2300      	movs	r3, #0
 8012b78:	9313      	str	r3, [sp, #76]	; 0x4c
 8012b7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d1db      	bne.n	8012b38 <_strtod_l+0x88>
 8012b80:	0032      	movs	r2, r6
 8012b82:	003b      	movs	r3, r7
 8012b84:	e7e2      	b.n	8012b4c <_strtod_l+0x9c>
 8012b86:	2200      	movs	r2, #0
 8012b88:	e7ed      	b.n	8012b66 <_strtod_l+0xb6>
 8012b8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012b8c:	2a00      	cmp	r2, #0
 8012b8e:	d007      	beq.n	8012ba0 <_strtod_l+0xf0>
 8012b90:	2135      	movs	r1, #53	; 0x35
 8012b92:	a824      	add	r0, sp, #144	; 0x90
 8012b94:	f003 ff7d 	bl	8016a92 <__copybits>
 8012b98:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012b9a:	9804      	ldr	r0, [sp, #16]
 8012b9c:	f003 fc12 	bl	80163c4 <_Bfree>
 8012ba0:	1e68      	subs	r0, r5, #1
 8012ba2:	2804      	cmp	r0, #4
 8012ba4:	d806      	bhi.n	8012bb4 <_strtod_l+0x104>
 8012ba6:	f7ed fabf 	bl	8000128 <__gnu_thumb1_case_uqi>
 8012baa:	030c      	.short	0x030c
 8012bac:	1917      	.short	0x1917
 8012bae:	0c          	.byte	0x0c
 8012baf:	00          	.byte	0x00
 8012bb0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012bb2:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8012bb4:	9b05      	ldr	r3, [sp, #20]
 8012bb6:	071b      	lsls	r3, r3, #28
 8012bb8:	d5bb      	bpl.n	8012b32 <_strtod_l+0x82>
 8012bba:	2380      	movs	r3, #128	; 0x80
 8012bbc:	061b      	lsls	r3, r3, #24
 8012bbe:	431f      	orrs	r7, r3
 8012bc0:	e7b7      	b.n	8012b32 <_strtod_l+0x82>
 8012bc2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012bc4:	4a68      	ldr	r2, [pc, #416]	; (8012d68 <_strtod_l+0x2b8>)
 8012bc6:	4969      	ldr	r1, [pc, #420]	; (8012d6c <_strtod_l+0x2bc>)
 8012bc8:	401a      	ands	r2, r3
 8012bca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012bcc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012bce:	185b      	adds	r3, r3, r1
 8012bd0:	051b      	lsls	r3, r3, #20
 8012bd2:	431a      	orrs	r2, r3
 8012bd4:	0017      	movs	r7, r2
 8012bd6:	e7ed      	b.n	8012bb4 <_strtod_l+0x104>
 8012bd8:	4f65      	ldr	r7, [pc, #404]	; (8012d70 <_strtod_l+0x2c0>)
 8012bda:	e7eb      	b.n	8012bb4 <_strtod_l+0x104>
 8012bdc:	2601      	movs	r6, #1
 8012bde:	4f65      	ldr	r7, [pc, #404]	; (8012d74 <_strtod_l+0x2c4>)
 8012be0:	4276      	negs	r6, r6
 8012be2:	e7e7      	b.n	8012bb4 <_strtod_l+0x104>
 8012be4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012be6:	1c5a      	adds	r2, r3, #1
 8012be8:	9221      	str	r2, [sp, #132]	; 0x84
 8012bea:	785b      	ldrb	r3, [r3, #1]
 8012bec:	2b30      	cmp	r3, #48	; 0x30
 8012bee:	d0f9      	beq.n	8012be4 <_strtod_l+0x134>
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d09e      	beq.n	8012b32 <_strtod_l+0x82>
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	930c      	str	r3, [sp, #48]	; 0x30
 8012bf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012bfa:	220a      	movs	r2, #10
 8012bfc:	9312      	str	r3, [sp, #72]	; 0x48
 8012bfe:	2300      	movs	r3, #0
 8012c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c02:	9308      	str	r3, [sp, #32]
 8012c04:	930a      	str	r3, [sp, #40]	; 0x28
 8012c06:	9821      	ldr	r0, [sp, #132]	; 0x84
 8012c08:	7804      	ldrb	r4, [r0, #0]
 8012c0a:	0023      	movs	r3, r4
 8012c0c:	3b30      	subs	r3, #48	; 0x30
 8012c0e:	b2d9      	uxtb	r1, r3
 8012c10:	2909      	cmp	r1, #9
 8012c12:	d934      	bls.n	8012c7e <_strtod_l+0x1ce>
 8012c14:	9a05      	ldr	r2, [sp, #20]
 8012c16:	6829      	ldr	r1, [r5, #0]
 8012c18:	f7ff ff0c 	bl	8012a34 <strncmp>
 8012c1c:	2800      	cmp	r0, #0
 8012c1e:	d040      	beq.n	8012ca2 <_strtod_l+0x1f2>
 8012c20:	2000      	movs	r0, #0
 8012c22:	0023      	movs	r3, r4
 8012c24:	4684      	mov	ip, r0
 8012c26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c28:	9007      	str	r0, [sp, #28]
 8012c2a:	9205      	str	r2, [sp, #20]
 8012c2c:	2220      	movs	r2, #32
 8012c2e:	0019      	movs	r1, r3
 8012c30:	4391      	bics	r1, r2
 8012c32:	000a      	movs	r2, r1
 8012c34:	2100      	movs	r1, #0
 8012c36:	2a45      	cmp	r2, #69	; 0x45
 8012c38:	d000      	beq.n	8012c3c <_strtod_l+0x18c>
 8012c3a:	e0bf      	b.n	8012dbc <_strtod_l+0x30c>
 8012c3c:	9b05      	ldr	r3, [sp, #20]
 8012c3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c40:	4303      	orrs	r3, r0
 8012c42:	4313      	orrs	r3, r2
 8012c44:	428b      	cmp	r3, r1
 8012c46:	d094      	beq.n	8012b72 <_strtod_l+0xc2>
 8012c48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c4a:	9306      	str	r3, [sp, #24]
 8012c4c:	3301      	adds	r3, #1
 8012c4e:	9321      	str	r3, [sp, #132]	; 0x84
 8012c50:	9b06      	ldr	r3, [sp, #24]
 8012c52:	785b      	ldrb	r3, [r3, #1]
 8012c54:	2b2b      	cmp	r3, #43	; 0x2b
 8012c56:	d100      	bne.n	8012c5a <_strtod_l+0x1aa>
 8012c58:	e082      	b.n	8012d60 <_strtod_l+0x2b0>
 8012c5a:	000c      	movs	r4, r1
 8012c5c:	2b2d      	cmp	r3, #45	; 0x2d
 8012c5e:	d105      	bne.n	8012c6c <_strtod_l+0x1bc>
 8012c60:	2401      	movs	r4, #1
 8012c62:	9b06      	ldr	r3, [sp, #24]
 8012c64:	3302      	adds	r3, #2
 8012c66:	9321      	str	r3, [sp, #132]	; 0x84
 8012c68:	9b06      	ldr	r3, [sp, #24]
 8012c6a:	789b      	ldrb	r3, [r3, #2]
 8012c6c:	001a      	movs	r2, r3
 8012c6e:	3a30      	subs	r2, #48	; 0x30
 8012c70:	2a09      	cmp	r2, #9
 8012c72:	d800      	bhi.n	8012c76 <_strtod_l+0x1c6>
 8012c74:	e084      	b.n	8012d80 <_strtod_l+0x2d0>
 8012c76:	9a06      	ldr	r2, [sp, #24]
 8012c78:	2100      	movs	r1, #0
 8012c7a:	9221      	str	r2, [sp, #132]	; 0x84
 8012c7c:	e09e      	b.n	8012dbc <_strtod_l+0x30c>
 8012c7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012c80:	2908      	cmp	r1, #8
 8012c82:	dc09      	bgt.n	8012c98 <_strtod_l+0x1e8>
 8012c84:	9908      	ldr	r1, [sp, #32]
 8012c86:	4351      	muls	r1, r2
 8012c88:	18cb      	adds	r3, r1, r3
 8012c8a:	9308      	str	r3, [sp, #32]
 8012c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c8e:	3001      	adds	r0, #1
 8012c90:	3301      	adds	r3, #1
 8012c92:	930a      	str	r3, [sp, #40]	; 0x28
 8012c94:	9021      	str	r0, [sp, #132]	; 0x84
 8012c96:	e7b6      	b.n	8012c06 <_strtod_l+0x156>
 8012c98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012c9a:	4351      	muls	r1, r2
 8012c9c:	18cb      	adds	r3, r1, r3
 8012c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ca0:	e7f4      	b.n	8012c8c <_strtod_l+0x1dc>
 8012ca2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012ca4:	9b05      	ldr	r3, [sp, #20]
 8012ca6:	4694      	mov	ip, r2
 8012ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012caa:	4463      	add	r3, ip
 8012cac:	9321      	str	r3, [sp, #132]	; 0x84
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	2a00      	cmp	r2, #0
 8012cb2:	d036      	beq.n	8012d22 <_strtod_l+0x272>
 8012cb4:	4684      	mov	ip, r0
 8012cb6:	9205      	str	r2, [sp, #20]
 8012cb8:	001a      	movs	r2, r3
 8012cba:	3a30      	subs	r2, #48	; 0x30
 8012cbc:	2a09      	cmp	r2, #9
 8012cbe:	d912      	bls.n	8012ce6 <_strtod_l+0x236>
 8012cc0:	2201      	movs	r2, #1
 8012cc2:	9207      	str	r2, [sp, #28]
 8012cc4:	e7b2      	b.n	8012c2c <_strtod_l+0x17c>
 8012cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012cc8:	3001      	adds	r0, #1
 8012cca:	1c5a      	adds	r2, r3, #1
 8012ccc:	9221      	str	r2, [sp, #132]	; 0x84
 8012cce:	785b      	ldrb	r3, [r3, #1]
 8012cd0:	2b30      	cmp	r3, #48	; 0x30
 8012cd2:	d0f8      	beq.n	8012cc6 <_strtod_l+0x216>
 8012cd4:	001a      	movs	r2, r3
 8012cd6:	3a31      	subs	r2, #49	; 0x31
 8012cd8:	2a08      	cmp	r2, #8
 8012cda:	d83c      	bhi.n	8012d56 <_strtod_l+0x2a6>
 8012cdc:	4684      	mov	ip, r0
 8012cde:	2000      	movs	r0, #0
 8012ce0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012ce2:	9005      	str	r0, [sp, #20]
 8012ce4:	9212      	str	r2, [sp, #72]	; 0x48
 8012ce6:	3b30      	subs	r3, #48	; 0x30
 8012ce8:	1c42      	adds	r2, r0, #1
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d013      	beq.n	8012d16 <_strtod_l+0x266>
 8012cee:	210a      	movs	r1, #10
 8012cf0:	4494      	add	ip, r2
 8012cf2:	9a05      	ldr	r2, [sp, #20]
 8012cf4:	1885      	adds	r5, r0, r2
 8012cf6:	42aa      	cmp	r2, r5
 8012cf8:	d115      	bne.n	8012d26 <_strtod_l+0x276>
 8012cfa:	9905      	ldr	r1, [sp, #20]
 8012cfc:	9a05      	ldr	r2, [sp, #20]
 8012cfe:	3101      	adds	r1, #1
 8012d00:	1809      	adds	r1, r1, r0
 8012d02:	1812      	adds	r2, r2, r0
 8012d04:	9105      	str	r1, [sp, #20]
 8012d06:	2a08      	cmp	r2, #8
 8012d08:	dc1b      	bgt.n	8012d42 <_strtod_l+0x292>
 8012d0a:	220a      	movs	r2, #10
 8012d0c:	9908      	ldr	r1, [sp, #32]
 8012d0e:	434a      	muls	r2, r1
 8012d10:	189b      	adds	r3, r3, r2
 8012d12:	2200      	movs	r2, #0
 8012d14:	9308      	str	r3, [sp, #32]
 8012d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d18:	0010      	movs	r0, r2
 8012d1a:	1c59      	adds	r1, r3, #1
 8012d1c:	9121      	str	r1, [sp, #132]	; 0x84
 8012d1e:	785b      	ldrb	r3, [r3, #1]
 8012d20:	e7ca      	b.n	8012cb8 <_strtod_l+0x208>
 8012d22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012d24:	e7d4      	b.n	8012cd0 <_strtod_l+0x220>
 8012d26:	1c54      	adds	r4, r2, #1
 8012d28:	2a08      	cmp	r2, #8
 8012d2a:	dc04      	bgt.n	8012d36 <_strtod_l+0x286>
 8012d2c:	9a08      	ldr	r2, [sp, #32]
 8012d2e:	434a      	muls	r2, r1
 8012d30:	9208      	str	r2, [sp, #32]
 8012d32:	0022      	movs	r2, r4
 8012d34:	e7df      	b.n	8012cf6 <_strtod_l+0x246>
 8012d36:	2c10      	cmp	r4, #16
 8012d38:	dcfb      	bgt.n	8012d32 <_strtod_l+0x282>
 8012d3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d3c:	434a      	muls	r2, r1
 8012d3e:	920b      	str	r2, [sp, #44]	; 0x2c
 8012d40:	e7f7      	b.n	8012d32 <_strtod_l+0x282>
 8012d42:	9905      	ldr	r1, [sp, #20]
 8012d44:	2200      	movs	r2, #0
 8012d46:	2910      	cmp	r1, #16
 8012d48:	dce5      	bgt.n	8012d16 <_strtod_l+0x266>
 8012d4a:	210a      	movs	r1, #10
 8012d4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012d4e:	4341      	muls	r1, r0
 8012d50:	185b      	adds	r3, r3, r1
 8012d52:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d54:	e7df      	b.n	8012d16 <_strtod_l+0x266>
 8012d56:	2200      	movs	r2, #0
 8012d58:	4694      	mov	ip, r2
 8012d5a:	9205      	str	r2, [sp, #20]
 8012d5c:	3201      	adds	r2, #1
 8012d5e:	e7b0      	b.n	8012cc2 <_strtod_l+0x212>
 8012d60:	000c      	movs	r4, r1
 8012d62:	e77e      	b.n	8012c62 <_strtod_l+0x1b2>
 8012d64:	08019e84 	.word	0x08019e84
 8012d68:	ffefffff 	.word	0xffefffff
 8012d6c:	00000433 	.word	0x00000433
 8012d70:	7ff00000 	.word	0x7ff00000
 8012d74:	7fffffff 	.word	0x7fffffff
 8012d78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d7a:	1c5a      	adds	r2, r3, #1
 8012d7c:	9221      	str	r2, [sp, #132]	; 0x84
 8012d7e:	785b      	ldrb	r3, [r3, #1]
 8012d80:	2b30      	cmp	r3, #48	; 0x30
 8012d82:	d0f9      	beq.n	8012d78 <_strtod_l+0x2c8>
 8012d84:	001a      	movs	r2, r3
 8012d86:	3a31      	subs	r2, #49	; 0x31
 8012d88:	2100      	movs	r1, #0
 8012d8a:	2a08      	cmp	r2, #8
 8012d8c:	d816      	bhi.n	8012dbc <_strtod_l+0x30c>
 8012d8e:	3b30      	subs	r3, #48	; 0x30
 8012d90:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8012d92:	930e      	str	r3, [sp, #56]	; 0x38
 8012d94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d96:	1c59      	adds	r1, r3, #1
 8012d98:	9121      	str	r1, [sp, #132]	; 0x84
 8012d9a:	785b      	ldrb	r3, [r3, #1]
 8012d9c:	001a      	movs	r2, r3
 8012d9e:	3a30      	subs	r2, #48	; 0x30
 8012da0:	2a09      	cmp	r2, #9
 8012da2:	d932      	bls.n	8012e0a <_strtod_l+0x35a>
 8012da4:	1b4a      	subs	r2, r1, r5
 8012da6:	4dad      	ldr	r5, [pc, #692]	; (801305c <_strtod_l+0x5ac>)
 8012da8:	0029      	movs	r1, r5
 8012daa:	2a08      	cmp	r2, #8
 8012dac:	dc03      	bgt.n	8012db6 <_strtod_l+0x306>
 8012dae:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012db0:	42a9      	cmp	r1, r5
 8012db2:	dd00      	ble.n	8012db6 <_strtod_l+0x306>
 8012db4:	0029      	movs	r1, r5
 8012db6:	2c00      	cmp	r4, #0
 8012db8:	d000      	beq.n	8012dbc <_strtod_l+0x30c>
 8012dba:	4249      	negs	r1, r1
 8012dbc:	9a05      	ldr	r2, [sp, #20]
 8012dbe:	2a00      	cmp	r2, #0
 8012dc0:	d149      	bne.n	8012e56 <_strtod_l+0x3a6>
 8012dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012dc4:	4310      	orrs	r0, r2
 8012dc6:	d000      	beq.n	8012dca <_strtod_l+0x31a>
 8012dc8:	e6b3      	b.n	8012b32 <_strtod_l+0x82>
 8012dca:	9a07      	ldr	r2, [sp, #28]
 8012dcc:	2a00      	cmp	r2, #0
 8012dce:	d000      	beq.n	8012dd2 <_strtod_l+0x322>
 8012dd0:	e6cf      	b.n	8012b72 <_strtod_l+0xc2>
 8012dd2:	2b4e      	cmp	r3, #78	; 0x4e
 8012dd4:	d025      	beq.n	8012e22 <_strtod_l+0x372>
 8012dd6:	dc1f      	bgt.n	8012e18 <_strtod_l+0x368>
 8012dd8:	2b49      	cmp	r3, #73	; 0x49
 8012dda:	d000      	beq.n	8012dde <_strtod_l+0x32e>
 8012ddc:	e6c9      	b.n	8012b72 <_strtod_l+0xc2>
 8012dde:	49a0      	ldr	r1, [pc, #640]	; (8013060 <_strtod_l+0x5b0>)
 8012de0:	a821      	add	r0, sp, #132	; 0x84
 8012de2:	f003 f9ed 	bl	80161c0 <__match>
 8012de6:	2800      	cmp	r0, #0
 8012de8:	d100      	bne.n	8012dec <_strtod_l+0x33c>
 8012dea:	e6c2      	b.n	8012b72 <_strtod_l+0xc2>
 8012dec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012dee:	499d      	ldr	r1, [pc, #628]	; (8013064 <_strtod_l+0x5b4>)
 8012df0:	3b01      	subs	r3, #1
 8012df2:	a821      	add	r0, sp, #132	; 0x84
 8012df4:	9321      	str	r3, [sp, #132]	; 0x84
 8012df6:	f003 f9e3 	bl	80161c0 <__match>
 8012dfa:	2800      	cmp	r0, #0
 8012dfc:	d102      	bne.n	8012e04 <_strtod_l+0x354>
 8012dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e00:	3301      	adds	r3, #1
 8012e02:	9321      	str	r3, [sp, #132]	; 0x84
 8012e04:	4f98      	ldr	r7, [pc, #608]	; (8013068 <_strtod_l+0x5b8>)
 8012e06:	2600      	movs	r6, #0
 8012e08:	e693      	b.n	8012b32 <_strtod_l+0x82>
 8012e0a:	220a      	movs	r2, #10
 8012e0c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012e0e:	434a      	muls	r2, r1
 8012e10:	18d2      	adds	r2, r2, r3
 8012e12:	3a30      	subs	r2, #48	; 0x30
 8012e14:	920e      	str	r2, [sp, #56]	; 0x38
 8012e16:	e7bd      	b.n	8012d94 <_strtod_l+0x2e4>
 8012e18:	2b69      	cmp	r3, #105	; 0x69
 8012e1a:	d0e0      	beq.n	8012dde <_strtod_l+0x32e>
 8012e1c:	2b6e      	cmp	r3, #110	; 0x6e
 8012e1e:	d000      	beq.n	8012e22 <_strtod_l+0x372>
 8012e20:	e6a7      	b.n	8012b72 <_strtod_l+0xc2>
 8012e22:	4992      	ldr	r1, [pc, #584]	; (801306c <_strtod_l+0x5bc>)
 8012e24:	a821      	add	r0, sp, #132	; 0x84
 8012e26:	f003 f9cb 	bl	80161c0 <__match>
 8012e2a:	2800      	cmp	r0, #0
 8012e2c:	d100      	bne.n	8012e30 <_strtod_l+0x380>
 8012e2e:	e6a0      	b.n	8012b72 <_strtod_l+0xc2>
 8012e30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e32:	781b      	ldrb	r3, [r3, #0]
 8012e34:	2b28      	cmp	r3, #40	; 0x28
 8012e36:	d10c      	bne.n	8012e52 <_strtod_l+0x3a2>
 8012e38:	aa24      	add	r2, sp, #144	; 0x90
 8012e3a:	498d      	ldr	r1, [pc, #564]	; (8013070 <_strtod_l+0x5c0>)
 8012e3c:	a821      	add	r0, sp, #132	; 0x84
 8012e3e:	f003 f9d3 	bl	80161e8 <__hexnan>
 8012e42:	2805      	cmp	r0, #5
 8012e44:	d105      	bne.n	8012e52 <_strtod_l+0x3a2>
 8012e46:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012e48:	4a87      	ldr	r2, [pc, #540]	; (8013068 <_strtod_l+0x5b8>)
 8012e4a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012e4c:	431a      	orrs	r2, r3
 8012e4e:	0017      	movs	r7, r2
 8012e50:	e66f      	b.n	8012b32 <_strtod_l+0x82>
 8012e52:	4f88      	ldr	r7, [pc, #544]	; (8013074 <_strtod_l+0x5c4>)
 8012e54:	e7d7      	b.n	8012e06 <_strtod_l+0x356>
 8012e56:	4663      	mov	r3, ip
 8012e58:	1acb      	subs	r3, r1, r3
 8012e5a:	9307      	str	r3, [sp, #28]
 8012e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d101      	bne.n	8012e66 <_strtod_l+0x3b6>
 8012e62:	9b05      	ldr	r3, [sp, #20]
 8012e64:	930a      	str	r3, [sp, #40]	; 0x28
 8012e66:	9c05      	ldr	r4, [sp, #20]
 8012e68:	2c10      	cmp	r4, #16
 8012e6a:	dd00      	ble.n	8012e6e <_strtod_l+0x3be>
 8012e6c:	2410      	movs	r4, #16
 8012e6e:	9808      	ldr	r0, [sp, #32]
 8012e70:	f7ef fe26 	bl	8002ac0 <__aeabi_ui2d>
 8012e74:	9b05      	ldr	r3, [sp, #20]
 8012e76:	0006      	movs	r6, r0
 8012e78:	000f      	movs	r7, r1
 8012e7a:	2b09      	cmp	r3, #9
 8012e7c:	dc15      	bgt.n	8012eaa <_strtod_l+0x3fa>
 8012e7e:	9b07      	ldr	r3, [sp, #28]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d100      	bne.n	8012e86 <_strtod_l+0x3d6>
 8012e84:	e655      	b.n	8012b32 <_strtod_l+0x82>
 8012e86:	9b07      	ldr	r3, [sp, #28]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	dc00      	bgt.n	8012e8e <_strtod_l+0x3de>
 8012e8c:	e07d      	b.n	8012f8a <_strtod_l+0x4da>
 8012e8e:	2b16      	cmp	r3, #22
 8012e90:	dc62      	bgt.n	8012f58 <_strtod_l+0x4a8>
 8012e92:	00dc      	lsls	r4, r3, #3
 8012e94:	4b78      	ldr	r3, [pc, #480]	; (8013078 <_strtod_l+0x5c8>)
 8012e96:	0032      	movs	r2, r6
 8012e98:	1919      	adds	r1, r3, r4
 8012e9a:	003b      	movs	r3, r7
 8012e9c:	6808      	ldr	r0, [r1, #0]
 8012e9e:	6849      	ldr	r1, [r1, #4]
 8012ea0:	f7ee ffc8 	bl	8001e34 <__aeabi_dmul>
 8012ea4:	0006      	movs	r6, r0
 8012ea6:	000f      	movs	r7, r1
 8012ea8:	e643      	b.n	8012b32 <_strtod_l+0x82>
 8012eaa:	0022      	movs	r2, r4
 8012eac:	4b72      	ldr	r3, [pc, #456]	; (8013078 <_strtod_l+0x5c8>)
 8012eae:	3a09      	subs	r2, #9
 8012eb0:	00d2      	lsls	r2, r2, #3
 8012eb2:	189b      	adds	r3, r3, r2
 8012eb4:	681a      	ldr	r2, [r3, #0]
 8012eb6:	685b      	ldr	r3, [r3, #4]
 8012eb8:	f7ee ffbc 	bl	8001e34 <__aeabi_dmul>
 8012ebc:	0006      	movs	r6, r0
 8012ebe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012ec0:	000f      	movs	r7, r1
 8012ec2:	f7ef fdfd 	bl	8002ac0 <__aeabi_ui2d>
 8012ec6:	000b      	movs	r3, r1
 8012ec8:	0002      	movs	r2, r0
 8012eca:	0039      	movs	r1, r7
 8012ecc:	0030      	movs	r0, r6
 8012ece:	f7ee f88b 	bl	8000fe8 <__aeabi_dadd>
 8012ed2:	9b05      	ldr	r3, [sp, #20]
 8012ed4:	0006      	movs	r6, r0
 8012ed6:	000f      	movs	r7, r1
 8012ed8:	2b0f      	cmp	r3, #15
 8012eda:	ddd0      	ble.n	8012e7e <_strtod_l+0x3ce>
 8012edc:	9b05      	ldr	r3, [sp, #20]
 8012ede:	1b1c      	subs	r4, r3, r4
 8012ee0:	9b07      	ldr	r3, [sp, #28]
 8012ee2:	18e4      	adds	r4, r4, r3
 8012ee4:	2c00      	cmp	r4, #0
 8012ee6:	dc00      	bgt.n	8012eea <_strtod_l+0x43a>
 8012ee8:	e094      	b.n	8013014 <_strtod_l+0x564>
 8012eea:	230f      	movs	r3, #15
 8012eec:	4023      	ands	r3, r4
 8012eee:	d00a      	beq.n	8012f06 <_strtod_l+0x456>
 8012ef0:	4961      	ldr	r1, [pc, #388]	; (8013078 <_strtod_l+0x5c8>)
 8012ef2:	00db      	lsls	r3, r3, #3
 8012ef4:	18c9      	adds	r1, r1, r3
 8012ef6:	0032      	movs	r2, r6
 8012ef8:	6808      	ldr	r0, [r1, #0]
 8012efa:	6849      	ldr	r1, [r1, #4]
 8012efc:	003b      	movs	r3, r7
 8012efe:	f7ee ff99 	bl	8001e34 <__aeabi_dmul>
 8012f02:	0006      	movs	r6, r0
 8012f04:	000f      	movs	r7, r1
 8012f06:	230f      	movs	r3, #15
 8012f08:	439c      	bics	r4, r3
 8012f0a:	d06e      	beq.n	8012fea <_strtod_l+0x53a>
 8012f0c:	3326      	adds	r3, #38	; 0x26
 8012f0e:	33ff      	adds	r3, #255	; 0xff
 8012f10:	429c      	cmp	r4, r3
 8012f12:	dd48      	ble.n	8012fa6 <_strtod_l+0x4f6>
 8012f14:	2400      	movs	r4, #0
 8012f16:	9405      	str	r4, [sp, #20]
 8012f18:	940b      	str	r4, [sp, #44]	; 0x2c
 8012f1a:	940a      	str	r4, [sp, #40]	; 0x28
 8012f1c:	2322      	movs	r3, #34	; 0x22
 8012f1e:	2600      	movs	r6, #0
 8012f20:	9a04      	ldr	r2, [sp, #16]
 8012f22:	4f51      	ldr	r7, [pc, #324]	; (8013068 <_strtod_l+0x5b8>)
 8012f24:	6013      	str	r3, [r2, #0]
 8012f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f28:	42b3      	cmp	r3, r6
 8012f2a:	d100      	bne.n	8012f2e <_strtod_l+0x47e>
 8012f2c:	e601      	b.n	8012b32 <_strtod_l+0x82>
 8012f2e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012f30:	9804      	ldr	r0, [sp, #16]
 8012f32:	f003 fa47 	bl	80163c4 <_Bfree>
 8012f36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012f38:	9804      	ldr	r0, [sp, #16]
 8012f3a:	f003 fa43 	bl	80163c4 <_Bfree>
 8012f3e:	9905      	ldr	r1, [sp, #20]
 8012f40:	9804      	ldr	r0, [sp, #16]
 8012f42:	f003 fa3f 	bl	80163c4 <_Bfree>
 8012f46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012f48:	9804      	ldr	r0, [sp, #16]
 8012f4a:	f003 fa3b 	bl	80163c4 <_Bfree>
 8012f4e:	0021      	movs	r1, r4
 8012f50:	9804      	ldr	r0, [sp, #16]
 8012f52:	f003 fa37 	bl	80163c4 <_Bfree>
 8012f56:	e5ec      	b.n	8012b32 <_strtod_l+0x82>
 8012f58:	2325      	movs	r3, #37	; 0x25
 8012f5a:	9a05      	ldr	r2, [sp, #20]
 8012f5c:	1a9b      	subs	r3, r3, r2
 8012f5e:	9a07      	ldr	r2, [sp, #28]
 8012f60:	4293      	cmp	r3, r2
 8012f62:	dbbb      	blt.n	8012edc <_strtod_l+0x42c>
 8012f64:	230f      	movs	r3, #15
 8012f66:	9a05      	ldr	r2, [sp, #20]
 8012f68:	4c43      	ldr	r4, [pc, #268]	; (8013078 <_strtod_l+0x5c8>)
 8012f6a:	1a9d      	subs	r5, r3, r2
 8012f6c:	00e9      	lsls	r1, r5, #3
 8012f6e:	1861      	adds	r1, r4, r1
 8012f70:	0032      	movs	r2, r6
 8012f72:	6808      	ldr	r0, [r1, #0]
 8012f74:	6849      	ldr	r1, [r1, #4]
 8012f76:	003b      	movs	r3, r7
 8012f78:	f7ee ff5c 	bl	8001e34 <__aeabi_dmul>
 8012f7c:	9b07      	ldr	r3, [sp, #28]
 8012f7e:	1b5e      	subs	r6, r3, r5
 8012f80:	00f6      	lsls	r6, r6, #3
 8012f82:	19a6      	adds	r6, r4, r6
 8012f84:	6832      	ldr	r2, [r6, #0]
 8012f86:	6873      	ldr	r3, [r6, #4]
 8012f88:	e78a      	b.n	8012ea0 <_strtod_l+0x3f0>
 8012f8a:	9b07      	ldr	r3, [sp, #28]
 8012f8c:	3316      	adds	r3, #22
 8012f8e:	dba5      	blt.n	8012edc <_strtod_l+0x42c>
 8012f90:	9b07      	ldr	r3, [sp, #28]
 8012f92:	0030      	movs	r0, r6
 8012f94:	00da      	lsls	r2, r3, #3
 8012f96:	4b38      	ldr	r3, [pc, #224]	; (8013078 <_strtod_l+0x5c8>)
 8012f98:	0039      	movs	r1, r7
 8012f9a:	1a9b      	subs	r3, r3, r2
 8012f9c:	681a      	ldr	r2, [r3, #0]
 8012f9e:	685b      	ldr	r3, [r3, #4]
 8012fa0:	f7ee fb3e 	bl	8001620 <__aeabi_ddiv>
 8012fa4:	e77e      	b.n	8012ea4 <_strtod_l+0x3f4>
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	0030      	movs	r0, r6
 8012faa:	0039      	movs	r1, r7
 8012fac:	001d      	movs	r5, r3
 8012fae:	1124      	asrs	r4, r4, #4
 8012fb0:	2c01      	cmp	r4, #1
 8012fb2:	dc1d      	bgt.n	8012ff0 <_strtod_l+0x540>
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d001      	beq.n	8012fbc <_strtod_l+0x50c>
 8012fb8:	0006      	movs	r6, r0
 8012fba:	000f      	movs	r7, r1
 8012fbc:	4b2f      	ldr	r3, [pc, #188]	; (801307c <_strtod_l+0x5cc>)
 8012fbe:	00ed      	lsls	r5, r5, #3
 8012fc0:	18ff      	adds	r7, r7, r3
 8012fc2:	4b2f      	ldr	r3, [pc, #188]	; (8013080 <_strtod_l+0x5d0>)
 8012fc4:	0032      	movs	r2, r6
 8012fc6:	195d      	adds	r5, r3, r5
 8012fc8:	6828      	ldr	r0, [r5, #0]
 8012fca:	6869      	ldr	r1, [r5, #4]
 8012fcc:	003b      	movs	r3, r7
 8012fce:	f7ee ff31 	bl	8001e34 <__aeabi_dmul>
 8012fd2:	4b25      	ldr	r3, [pc, #148]	; (8013068 <_strtod_l+0x5b8>)
 8012fd4:	4a2b      	ldr	r2, [pc, #172]	; (8013084 <_strtod_l+0x5d4>)
 8012fd6:	0006      	movs	r6, r0
 8012fd8:	400b      	ands	r3, r1
 8012fda:	4293      	cmp	r3, r2
 8012fdc:	d89a      	bhi.n	8012f14 <_strtod_l+0x464>
 8012fde:	4a2a      	ldr	r2, [pc, #168]	; (8013088 <_strtod_l+0x5d8>)
 8012fe0:	4293      	cmp	r3, r2
 8012fe2:	d913      	bls.n	801300c <_strtod_l+0x55c>
 8012fe4:	2601      	movs	r6, #1
 8012fe6:	4f29      	ldr	r7, [pc, #164]	; (801308c <_strtod_l+0x5dc>)
 8012fe8:	4276      	negs	r6, r6
 8012fea:	2300      	movs	r3, #0
 8012fec:	9306      	str	r3, [sp, #24]
 8012fee:	e07b      	b.n	80130e8 <_strtod_l+0x638>
 8012ff0:	2201      	movs	r2, #1
 8012ff2:	4214      	tst	r4, r2
 8012ff4:	d007      	beq.n	8013006 <_strtod_l+0x556>
 8012ff6:	4a22      	ldr	r2, [pc, #136]	; (8013080 <_strtod_l+0x5d0>)
 8012ff8:	00eb      	lsls	r3, r5, #3
 8012ffa:	189b      	adds	r3, r3, r2
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	685b      	ldr	r3, [r3, #4]
 8013000:	f7ee ff18 	bl	8001e34 <__aeabi_dmul>
 8013004:	2301      	movs	r3, #1
 8013006:	3501      	adds	r5, #1
 8013008:	1064      	asrs	r4, r4, #1
 801300a:	e7d1      	b.n	8012fb0 <_strtod_l+0x500>
 801300c:	23d4      	movs	r3, #212	; 0xd4
 801300e:	049b      	lsls	r3, r3, #18
 8013010:	18cf      	adds	r7, r1, r3
 8013012:	e7ea      	b.n	8012fea <_strtod_l+0x53a>
 8013014:	2c00      	cmp	r4, #0
 8013016:	d0e8      	beq.n	8012fea <_strtod_l+0x53a>
 8013018:	230f      	movs	r3, #15
 801301a:	4264      	negs	r4, r4
 801301c:	4023      	ands	r3, r4
 801301e:	d00a      	beq.n	8013036 <_strtod_l+0x586>
 8013020:	4a15      	ldr	r2, [pc, #84]	; (8013078 <_strtod_l+0x5c8>)
 8013022:	00db      	lsls	r3, r3, #3
 8013024:	18d3      	adds	r3, r2, r3
 8013026:	0030      	movs	r0, r6
 8013028:	681a      	ldr	r2, [r3, #0]
 801302a:	685b      	ldr	r3, [r3, #4]
 801302c:	0039      	movs	r1, r7
 801302e:	f7ee faf7 	bl	8001620 <__aeabi_ddiv>
 8013032:	0006      	movs	r6, r0
 8013034:	000f      	movs	r7, r1
 8013036:	1124      	asrs	r4, r4, #4
 8013038:	d0d7      	beq.n	8012fea <_strtod_l+0x53a>
 801303a:	2c1f      	cmp	r4, #31
 801303c:	dd28      	ble.n	8013090 <_strtod_l+0x5e0>
 801303e:	2400      	movs	r4, #0
 8013040:	9405      	str	r4, [sp, #20]
 8013042:	940b      	str	r4, [sp, #44]	; 0x2c
 8013044:	940a      	str	r4, [sp, #40]	; 0x28
 8013046:	2322      	movs	r3, #34	; 0x22
 8013048:	9a04      	ldr	r2, [sp, #16]
 801304a:	2600      	movs	r6, #0
 801304c:	6013      	str	r3, [r2, #0]
 801304e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013050:	2700      	movs	r7, #0
 8013052:	2b00      	cmp	r3, #0
 8013054:	d000      	beq.n	8013058 <_strtod_l+0x5a8>
 8013056:	e76a      	b.n	8012f2e <_strtod_l+0x47e>
 8013058:	e56b      	b.n	8012b32 <_strtod_l+0x82>
 801305a:	46c0      	nop			; (mov r8, r8)
 801305c:	00004e1f 	.word	0x00004e1f
 8013060:	08019edd 	.word	0x08019edd
 8013064:	0801a030 	.word	0x0801a030
 8013068:	7ff00000 	.word	0x7ff00000
 801306c:	08019ee5 	.word	0x08019ee5
 8013070:	08019e98 	.word	0x08019e98
 8013074:	fff80000 	.word	0xfff80000
 8013078:	0801a068 	.word	0x0801a068
 801307c:	fcb00000 	.word	0xfcb00000
 8013080:	0801a040 	.word	0x0801a040
 8013084:	7ca00000 	.word	0x7ca00000
 8013088:	7c900000 	.word	0x7c900000
 801308c:	7fefffff 	.word	0x7fefffff
 8013090:	2310      	movs	r3, #16
 8013092:	4023      	ands	r3, r4
 8013094:	9306      	str	r3, [sp, #24]
 8013096:	d001      	beq.n	801309c <_strtod_l+0x5ec>
 8013098:	236a      	movs	r3, #106	; 0x6a
 801309a:	9306      	str	r3, [sp, #24]
 801309c:	2300      	movs	r3, #0
 801309e:	0030      	movs	r0, r6
 80130a0:	0039      	movs	r1, r7
 80130a2:	001d      	movs	r5, r3
 80130a4:	2c00      	cmp	r4, #0
 80130a6:	dd00      	ble.n	80130aa <_strtod_l+0x5fa>
 80130a8:	e10e      	b.n	80132c8 <_strtod_l+0x818>
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d001      	beq.n	80130b2 <_strtod_l+0x602>
 80130ae:	0006      	movs	r6, r0
 80130b0:	000f      	movs	r7, r1
 80130b2:	9b06      	ldr	r3, [sp, #24]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d00f      	beq.n	80130d8 <_strtod_l+0x628>
 80130b8:	236b      	movs	r3, #107	; 0x6b
 80130ba:	0079      	lsls	r1, r7, #1
 80130bc:	0d49      	lsrs	r1, r1, #21
 80130be:	003a      	movs	r2, r7
 80130c0:	1a5b      	subs	r3, r3, r1
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	dd08      	ble.n	80130d8 <_strtod_l+0x628>
 80130c6:	2b1f      	cmp	r3, #31
 80130c8:	dc00      	bgt.n	80130cc <_strtod_l+0x61c>
 80130ca:	e112      	b.n	80132f2 <_strtod_l+0x842>
 80130cc:	2600      	movs	r6, #0
 80130ce:	2b34      	cmp	r3, #52	; 0x34
 80130d0:	dc00      	bgt.n	80130d4 <_strtod_l+0x624>
 80130d2:	e107      	b.n	80132e4 <_strtod_l+0x834>
 80130d4:	27dc      	movs	r7, #220	; 0xdc
 80130d6:	04bf      	lsls	r7, r7, #18
 80130d8:	2200      	movs	r2, #0
 80130da:	2300      	movs	r3, #0
 80130dc:	0030      	movs	r0, r6
 80130de:	0039      	movs	r1, r7
 80130e0:	f7ed f9bc 	bl	800045c <__aeabi_dcmpeq>
 80130e4:	2800      	cmp	r0, #0
 80130e6:	d1aa      	bne.n	801303e <_strtod_l+0x58e>
 80130e8:	9b08      	ldr	r3, [sp, #32]
 80130ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130ec:	9300      	str	r3, [sp, #0]
 80130ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 80130f0:	9b05      	ldr	r3, [sp, #20]
 80130f2:	9804      	ldr	r0, [sp, #16]
 80130f4:	f003 f9ae 	bl	8016454 <__s2b>
 80130f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80130fa:	2800      	cmp	r0, #0
 80130fc:	d100      	bne.n	8013100 <_strtod_l+0x650>
 80130fe:	e709      	b.n	8012f14 <_strtod_l+0x464>
 8013100:	9b07      	ldr	r3, [sp, #28]
 8013102:	9a07      	ldr	r2, [sp, #28]
 8013104:	17db      	asrs	r3, r3, #31
 8013106:	4252      	negs	r2, r2
 8013108:	4013      	ands	r3, r2
 801310a:	9315      	str	r3, [sp, #84]	; 0x54
 801310c:	9b07      	ldr	r3, [sp, #28]
 801310e:	2400      	movs	r4, #0
 8013110:	43db      	mvns	r3, r3
 8013112:	9a07      	ldr	r2, [sp, #28]
 8013114:	17db      	asrs	r3, r3, #31
 8013116:	401a      	ands	r2, r3
 8013118:	921c      	str	r2, [sp, #112]	; 0x70
 801311a:	9405      	str	r4, [sp, #20]
 801311c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801311e:	9804      	ldr	r0, [sp, #16]
 8013120:	6859      	ldr	r1, [r3, #4]
 8013122:	f003 f927 	bl	8016374 <_Balloc>
 8013126:	900a      	str	r0, [sp, #40]	; 0x28
 8013128:	2800      	cmp	r0, #0
 801312a:	d100      	bne.n	801312e <_strtod_l+0x67e>
 801312c:	e6f6      	b.n	8012f1c <_strtod_l+0x46c>
 801312e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013130:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013132:	691b      	ldr	r3, [r3, #16]
 8013134:	310c      	adds	r1, #12
 8013136:	1c9a      	adds	r2, r3, #2
 8013138:	0092      	lsls	r2, r2, #2
 801313a:	300c      	adds	r0, #12
 801313c:	9308      	str	r3, [sp, #32]
 801313e:	f7ff fa32 	bl	80125a6 <memcpy>
 8013142:	ab24      	add	r3, sp, #144	; 0x90
 8013144:	9301      	str	r3, [sp, #4]
 8013146:	ab23      	add	r3, sp, #140	; 0x8c
 8013148:	9300      	str	r3, [sp, #0]
 801314a:	0032      	movs	r2, r6
 801314c:	003b      	movs	r3, r7
 801314e:	9804      	ldr	r0, [sp, #16]
 8013150:	960e      	str	r6, [sp, #56]	; 0x38
 8013152:	970f      	str	r7, [sp, #60]	; 0x3c
 8013154:	f003 fc22 	bl	801699c <__d2b>
 8013158:	9022      	str	r0, [sp, #136]	; 0x88
 801315a:	2800      	cmp	r0, #0
 801315c:	d100      	bne.n	8013160 <_strtod_l+0x6b0>
 801315e:	e6dd      	b.n	8012f1c <_strtod_l+0x46c>
 8013160:	2101      	movs	r1, #1
 8013162:	9804      	ldr	r0, [sp, #16]
 8013164:	f003 f9fd 	bl	8016562 <__i2b>
 8013168:	9005      	str	r0, [sp, #20]
 801316a:	2800      	cmp	r0, #0
 801316c:	d100      	bne.n	8013170 <_strtod_l+0x6c0>
 801316e:	e6d5      	b.n	8012f1c <_strtod_l+0x46c>
 8013170:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013172:	2b00      	cmp	r3, #0
 8013174:	da00      	bge.n	8013178 <_strtod_l+0x6c8>
 8013176:	e0c1      	b.n	80132fc <_strtod_l+0x84c>
 8013178:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801317a:	189d      	adds	r5, r3, r2
 801317c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801317e:	4694      	mov	ip, r2
 8013180:	9906      	ldr	r1, [sp, #24]
 8013182:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013184:	1a5b      	subs	r3, r3, r1
 8013186:	2136      	movs	r1, #54	; 0x36
 8013188:	189b      	adds	r3, r3, r2
 801318a:	1a8a      	subs	r2, r1, r2
 801318c:	49b2      	ldr	r1, [pc, #712]	; (8013458 <_strtod_l+0x9a8>)
 801318e:	3b01      	subs	r3, #1
 8013190:	2001      	movs	r0, #1
 8013192:	428b      	cmp	r3, r1
 8013194:	db00      	blt.n	8013198 <_strtod_l+0x6e8>
 8013196:	e0bd      	b.n	8013314 <_strtod_l+0x864>
 8013198:	1ac9      	subs	r1, r1, r3
 801319a:	1a52      	subs	r2, r2, r1
 801319c:	291f      	cmp	r1, #31
 801319e:	dd00      	ble.n	80131a2 <_strtod_l+0x6f2>
 80131a0:	e0b1      	b.n	8013306 <_strtod_l+0x856>
 80131a2:	4088      	lsls	r0, r1
 80131a4:	2300      	movs	r3, #0
 80131a6:	9014      	str	r0, [sp, #80]	; 0x50
 80131a8:	9310      	str	r3, [sp, #64]	; 0x40
 80131aa:	18ab      	adds	r3, r5, r2
 80131ac:	9308      	str	r3, [sp, #32]
 80131ae:	0013      	movs	r3, r2
 80131b0:	9a06      	ldr	r2, [sp, #24]
 80131b2:	4463      	add	r3, ip
 80131b4:	18d3      	adds	r3, r2, r3
 80131b6:	9a08      	ldr	r2, [sp, #32]
 80131b8:	930c      	str	r3, [sp, #48]	; 0x30
 80131ba:	002b      	movs	r3, r5
 80131bc:	4295      	cmp	r5, r2
 80131be:	dd00      	ble.n	80131c2 <_strtod_l+0x712>
 80131c0:	0013      	movs	r3, r2
 80131c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80131c4:	4293      	cmp	r3, r2
 80131c6:	dd00      	ble.n	80131ca <_strtod_l+0x71a>
 80131c8:	0013      	movs	r3, r2
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	dd06      	ble.n	80131dc <_strtod_l+0x72c>
 80131ce:	9a08      	ldr	r2, [sp, #32]
 80131d0:	1aed      	subs	r5, r5, r3
 80131d2:	1ad2      	subs	r2, r2, r3
 80131d4:	9208      	str	r2, [sp, #32]
 80131d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80131d8:	1ad2      	subs	r2, r2, r3
 80131da:	920c      	str	r2, [sp, #48]	; 0x30
 80131dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d017      	beq.n	8013212 <_strtod_l+0x762>
 80131e2:	001a      	movs	r2, r3
 80131e4:	9905      	ldr	r1, [sp, #20]
 80131e6:	9804      	ldr	r0, [sp, #16]
 80131e8:	f003 fa54 	bl	8016694 <__pow5mult>
 80131ec:	9005      	str	r0, [sp, #20]
 80131ee:	2800      	cmp	r0, #0
 80131f0:	d100      	bne.n	80131f4 <_strtod_l+0x744>
 80131f2:	e693      	b.n	8012f1c <_strtod_l+0x46c>
 80131f4:	0001      	movs	r1, r0
 80131f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80131f8:	9804      	ldr	r0, [sp, #16]
 80131fa:	f003 f9bb 	bl	8016574 <__multiply>
 80131fe:	9012      	str	r0, [sp, #72]	; 0x48
 8013200:	2800      	cmp	r0, #0
 8013202:	d100      	bne.n	8013206 <_strtod_l+0x756>
 8013204:	e68a      	b.n	8012f1c <_strtod_l+0x46c>
 8013206:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013208:	9804      	ldr	r0, [sp, #16]
 801320a:	f003 f8db 	bl	80163c4 <_Bfree>
 801320e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013210:	9322      	str	r3, [sp, #136]	; 0x88
 8013212:	9b08      	ldr	r3, [sp, #32]
 8013214:	2b00      	cmp	r3, #0
 8013216:	dd00      	ble.n	801321a <_strtod_l+0x76a>
 8013218:	e07f      	b.n	801331a <_strtod_l+0x86a>
 801321a:	9b07      	ldr	r3, [sp, #28]
 801321c:	2b00      	cmp	r3, #0
 801321e:	dd08      	ble.n	8013232 <_strtod_l+0x782>
 8013220:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013222:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013224:	9804      	ldr	r0, [sp, #16]
 8013226:	f003 fa35 	bl	8016694 <__pow5mult>
 801322a:	900a      	str	r0, [sp, #40]	; 0x28
 801322c:	2800      	cmp	r0, #0
 801322e:	d100      	bne.n	8013232 <_strtod_l+0x782>
 8013230:	e674      	b.n	8012f1c <_strtod_l+0x46c>
 8013232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013234:	2b00      	cmp	r3, #0
 8013236:	dd08      	ble.n	801324a <_strtod_l+0x79a>
 8013238:	001a      	movs	r2, r3
 801323a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801323c:	9804      	ldr	r0, [sp, #16]
 801323e:	f003 fa6b 	bl	8016718 <__lshift>
 8013242:	900a      	str	r0, [sp, #40]	; 0x28
 8013244:	2800      	cmp	r0, #0
 8013246:	d100      	bne.n	801324a <_strtod_l+0x79a>
 8013248:	e668      	b.n	8012f1c <_strtod_l+0x46c>
 801324a:	2d00      	cmp	r5, #0
 801324c:	dd08      	ble.n	8013260 <_strtod_l+0x7b0>
 801324e:	002a      	movs	r2, r5
 8013250:	9905      	ldr	r1, [sp, #20]
 8013252:	9804      	ldr	r0, [sp, #16]
 8013254:	f003 fa60 	bl	8016718 <__lshift>
 8013258:	9005      	str	r0, [sp, #20]
 801325a:	2800      	cmp	r0, #0
 801325c:	d100      	bne.n	8013260 <_strtod_l+0x7b0>
 801325e:	e65d      	b.n	8012f1c <_strtod_l+0x46c>
 8013260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013262:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013264:	9804      	ldr	r0, [sp, #16]
 8013266:	f003 fac3 	bl	80167f0 <__mdiff>
 801326a:	1e04      	subs	r4, r0, #0
 801326c:	d100      	bne.n	8013270 <_strtod_l+0x7c0>
 801326e:	e655      	b.n	8012f1c <_strtod_l+0x46c>
 8013270:	2500      	movs	r5, #0
 8013272:	68c3      	ldr	r3, [r0, #12]
 8013274:	9905      	ldr	r1, [sp, #20]
 8013276:	60c5      	str	r5, [r0, #12]
 8013278:	9312      	str	r3, [sp, #72]	; 0x48
 801327a:	f003 fa9f 	bl	80167bc <__mcmp>
 801327e:	42a8      	cmp	r0, r5
 8013280:	da55      	bge.n	801332e <_strtod_l+0x87e>
 8013282:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013284:	42ab      	cmp	r3, r5
 8013286:	d11b      	bne.n	80132c0 <_strtod_l+0x810>
 8013288:	42ae      	cmp	r6, r5
 801328a:	d119      	bne.n	80132c0 <_strtod_l+0x810>
 801328c:	033b      	lsls	r3, r7, #12
 801328e:	42ab      	cmp	r3, r5
 8013290:	d116      	bne.n	80132c0 <_strtod_l+0x810>
 8013292:	22d6      	movs	r2, #214	; 0xd6
 8013294:	4b71      	ldr	r3, [pc, #452]	; (801345c <_strtod_l+0x9ac>)
 8013296:	04d2      	lsls	r2, r2, #19
 8013298:	403b      	ands	r3, r7
 801329a:	4293      	cmp	r3, r2
 801329c:	d910      	bls.n	80132c0 <_strtod_l+0x810>
 801329e:	6963      	ldr	r3, [r4, #20]
 80132a0:	42ab      	cmp	r3, r5
 80132a2:	d102      	bne.n	80132aa <_strtod_l+0x7fa>
 80132a4:	6923      	ldr	r3, [r4, #16]
 80132a6:	2b01      	cmp	r3, #1
 80132a8:	dd0a      	ble.n	80132c0 <_strtod_l+0x810>
 80132aa:	0021      	movs	r1, r4
 80132ac:	2201      	movs	r2, #1
 80132ae:	9804      	ldr	r0, [sp, #16]
 80132b0:	f003 fa32 	bl	8016718 <__lshift>
 80132b4:	9905      	ldr	r1, [sp, #20]
 80132b6:	0004      	movs	r4, r0
 80132b8:	f003 fa80 	bl	80167bc <__mcmp>
 80132bc:	2800      	cmp	r0, #0
 80132be:	dc6b      	bgt.n	8013398 <_strtod_l+0x8e8>
 80132c0:	9b06      	ldr	r3, [sp, #24]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d178      	bne.n	80133b8 <_strtod_l+0x908>
 80132c6:	e632      	b.n	8012f2e <_strtod_l+0x47e>
 80132c8:	2201      	movs	r2, #1
 80132ca:	4214      	tst	r4, r2
 80132cc:	d007      	beq.n	80132de <_strtod_l+0x82e>
 80132ce:	4a64      	ldr	r2, [pc, #400]	; (8013460 <_strtod_l+0x9b0>)
 80132d0:	00eb      	lsls	r3, r5, #3
 80132d2:	18d3      	adds	r3, r2, r3
 80132d4:	681a      	ldr	r2, [r3, #0]
 80132d6:	685b      	ldr	r3, [r3, #4]
 80132d8:	f7ee fdac 	bl	8001e34 <__aeabi_dmul>
 80132dc:	2301      	movs	r3, #1
 80132de:	3501      	adds	r5, #1
 80132e0:	1064      	asrs	r4, r4, #1
 80132e2:	e6df      	b.n	80130a4 <_strtod_l+0x5f4>
 80132e4:	2101      	movs	r1, #1
 80132e6:	3b20      	subs	r3, #32
 80132e8:	4249      	negs	r1, r1
 80132ea:	4099      	lsls	r1, r3
 80132ec:	400a      	ands	r2, r1
 80132ee:	0017      	movs	r7, r2
 80132f0:	e6f2      	b.n	80130d8 <_strtod_l+0x628>
 80132f2:	2201      	movs	r2, #1
 80132f4:	4252      	negs	r2, r2
 80132f6:	409a      	lsls	r2, r3
 80132f8:	4016      	ands	r6, r2
 80132fa:	e6ed      	b.n	80130d8 <_strtod_l+0x628>
 80132fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80132fe:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013300:	1ad2      	subs	r2, r2, r3
 8013302:	4694      	mov	ip, r2
 8013304:	e73c      	b.n	8013180 <_strtod_l+0x6d0>
 8013306:	4957      	ldr	r1, [pc, #348]	; (8013464 <_strtod_l+0x9b4>)
 8013308:	1acb      	subs	r3, r1, r3
 801330a:	0001      	movs	r1, r0
 801330c:	4099      	lsls	r1, r3
 801330e:	9110      	str	r1, [sp, #64]	; 0x40
 8013310:	9014      	str	r0, [sp, #80]	; 0x50
 8013312:	e74a      	b.n	80131aa <_strtod_l+0x6fa>
 8013314:	2300      	movs	r3, #0
 8013316:	9310      	str	r3, [sp, #64]	; 0x40
 8013318:	e7fa      	b.n	8013310 <_strtod_l+0x860>
 801331a:	9a08      	ldr	r2, [sp, #32]
 801331c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801331e:	9804      	ldr	r0, [sp, #16]
 8013320:	f003 f9fa 	bl	8016718 <__lshift>
 8013324:	9022      	str	r0, [sp, #136]	; 0x88
 8013326:	2800      	cmp	r0, #0
 8013328:	d000      	beq.n	801332c <_strtod_l+0x87c>
 801332a:	e776      	b.n	801321a <_strtod_l+0x76a>
 801332c:	e5f6      	b.n	8012f1c <_strtod_l+0x46c>
 801332e:	970c      	str	r7, [sp, #48]	; 0x30
 8013330:	2800      	cmp	r0, #0
 8013332:	d000      	beq.n	8013336 <_strtod_l+0x886>
 8013334:	e0a0      	b.n	8013478 <_strtod_l+0x9c8>
 8013336:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013338:	033b      	lsls	r3, r7, #12
 801333a:	0b1b      	lsrs	r3, r3, #12
 801333c:	2a00      	cmp	r2, #0
 801333e:	d027      	beq.n	8013390 <_strtod_l+0x8e0>
 8013340:	4a49      	ldr	r2, [pc, #292]	; (8013468 <_strtod_l+0x9b8>)
 8013342:	4293      	cmp	r3, r2
 8013344:	d157      	bne.n	80133f6 <_strtod_l+0x946>
 8013346:	2201      	movs	r2, #1
 8013348:	9b06      	ldr	r3, [sp, #24]
 801334a:	4252      	negs	r2, r2
 801334c:	0031      	movs	r1, r6
 801334e:	0010      	movs	r0, r2
 8013350:	2b00      	cmp	r3, #0
 8013352:	d00b      	beq.n	801336c <_strtod_l+0x8bc>
 8013354:	25d4      	movs	r5, #212	; 0xd4
 8013356:	4b41      	ldr	r3, [pc, #260]	; (801345c <_strtod_l+0x9ac>)
 8013358:	04ed      	lsls	r5, r5, #19
 801335a:	403b      	ands	r3, r7
 801335c:	0010      	movs	r0, r2
 801335e:	42ab      	cmp	r3, r5
 8013360:	d804      	bhi.n	801336c <_strtod_l+0x8bc>
 8013362:	306c      	adds	r0, #108	; 0x6c
 8013364:	0d1b      	lsrs	r3, r3, #20
 8013366:	1ac3      	subs	r3, r0, r3
 8013368:	409a      	lsls	r2, r3
 801336a:	0010      	movs	r0, r2
 801336c:	4281      	cmp	r1, r0
 801336e:	d142      	bne.n	80133f6 <_strtod_l+0x946>
 8013370:	4b3e      	ldr	r3, [pc, #248]	; (801346c <_strtod_l+0x9bc>)
 8013372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013374:	429a      	cmp	r2, r3
 8013376:	d102      	bne.n	801337e <_strtod_l+0x8ce>
 8013378:	1c4b      	adds	r3, r1, #1
 801337a:	d100      	bne.n	801337e <_strtod_l+0x8ce>
 801337c:	e5ce      	b.n	8012f1c <_strtod_l+0x46c>
 801337e:	4b37      	ldr	r3, [pc, #220]	; (801345c <_strtod_l+0x9ac>)
 8013380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013382:	2600      	movs	r6, #0
 8013384:	401a      	ands	r2, r3
 8013386:	0013      	movs	r3, r2
 8013388:	2280      	movs	r2, #128	; 0x80
 801338a:	0352      	lsls	r2, r2, #13
 801338c:	189f      	adds	r7, r3, r2
 801338e:	e797      	b.n	80132c0 <_strtod_l+0x810>
 8013390:	2b00      	cmp	r3, #0
 8013392:	d130      	bne.n	80133f6 <_strtod_l+0x946>
 8013394:	2e00      	cmp	r6, #0
 8013396:	d12e      	bne.n	80133f6 <_strtod_l+0x946>
 8013398:	9906      	ldr	r1, [sp, #24]
 801339a:	003b      	movs	r3, r7
 801339c:	4a2f      	ldr	r2, [pc, #188]	; (801345c <_strtod_l+0x9ac>)
 801339e:	2900      	cmp	r1, #0
 80133a0:	d020      	beq.n	80133e4 <_strtod_l+0x934>
 80133a2:	0011      	movs	r1, r2
 80133a4:	20d6      	movs	r0, #214	; 0xd6
 80133a6:	4039      	ands	r1, r7
 80133a8:	04c0      	lsls	r0, r0, #19
 80133aa:	4281      	cmp	r1, r0
 80133ac:	dc1a      	bgt.n	80133e4 <_strtod_l+0x934>
 80133ae:	23dc      	movs	r3, #220	; 0xdc
 80133b0:	049b      	lsls	r3, r3, #18
 80133b2:	4299      	cmp	r1, r3
 80133b4:	dc00      	bgt.n	80133b8 <_strtod_l+0x908>
 80133b6:	e646      	b.n	8013046 <_strtod_l+0x596>
 80133b8:	4b2d      	ldr	r3, [pc, #180]	; (8013470 <_strtod_l+0x9c0>)
 80133ba:	0030      	movs	r0, r6
 80133bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80133be:	2300      	movs	r3, #0
 80133c0:	931a      	str	r3, [sp, #104]	; 0x68
 80133c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80133c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80133c6:	0039      	movs	r1, r7
 80133c8:	f7ee fd34 	bl	8001e34 <__aeabi_dmul>
 80133cc:	0006      	movs	r6, r0
 80133ce:	000f      	movs	r7, r1
 80133d0:	1e0b      	subs	r3, r1, #0
 80133d2:	d000      	beq.n	80133d6 <_strtod_l+0x926>
 80133d4:	e5ab      	b.n	8012f2e <_strtod_l+0x47e>
 80133d6:	2800      	cmp	r0, #0
 80133d8:	d000      	beq.n	80133dc <_strtod_l+0x92c>
 80133da:	e5a8      	b.n	8012f2e <_strtod_l+0x47e>
 80133dc:	9a04      	ldr	r2, [sp, #16]
 80133de:	3322      	adds	r3, #34	; 0x22
 80133e0:	6013      	str	r3, [r2, #0]
 80133e2:	e5a4      	b.n	8012f2e <_strtod_l+0x47e>
 80133e4:	2601      	movs	r6, #1
 80133e6:	4013      	ands	r3, r2
 80133e8:	4a22      	ldr	r2, [pc, #136]	; (8013474 <_strtod_l+0x9c4>)
 80133ea:	4276      	negs	r6, r6
 80133ec:	189b      	adds	r3, r3, r2
 80133ee:	4a1e      	ldr	r2, [pc, #120]	; (8013468 <_strtod_l+0x9b8>)
 80133f0:	431a      	orrs	r2, r3
 80133f2:	0017      	movs	r7, r2
 80133f4:	e764      	b.n	80132c0 <_strtod_l+0x810>
 80133f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d015      	beq.n	8013428 <_strtod_l+0x978>
 80133fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80133fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013400:	4213      	tst	r3, r2
 8013402:	d100      	bne.n	8013406 <_strtod_l+0x956>
 8013404:	e75c      	b.n	80132c0 <_strtod_l+0x810>
 8013406:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013408:	9a06      	ldr	r2, [sp, #24]
 801340a:	0030      	movs	r0, r6
 801340c:	0039      	movs	r1, r7
 801340e:	2b00      	cmp	r3, #0
 8013410:	d00f      	beq.n	8013432 <_strtod_l+0x982>
 8013412:	f7ff fb35 	bl	8012a80 <sulp>
 8013416:	0002      	movs	r2, r0
 8013418:	000b      	movs	r3, r1
 801341a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801341c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801341e:	f7ed fde3 	bl	8000fe8 <__aeabi_dadd>
 8013422:	0006      	movs	r6, r0
 8013424:	000f      	movs	r7, r1
 8013426:	e74b      	b.n	80132c0 <_strtod_l+0x810>
 8013428:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801342a:	4233      	tst	r3, r6
 801342c:	d100      	bne.n	8013430 <_strtod_l+0x980>
 801342e:	e747      	b.n	80132c0 <_strtod_l+0x810>
 8013430:	e7e9      	b.n	8013406 <_strtod_l+0x956>
 8013432:	f7ff fb25 	bl	8012a80 <sulp>
 8013436:	0002      	movs	r2, r0
 8013438:	000b      	movs	r3, r1
 801343a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801343c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801343e:	f7ee ff6b 	bl	8002318 <__aeabi_dsub>
 8013442:	2200      	movs	r2, #0
 8013444:	2300      	movs	r3, #0
 8013446:	0006      	movs	r6, r0
 8013448:	000f      	movs	r7, r1
 801344a:	f7ed f807 	bl	800045c <__aeabi_dcmpeq>
 801344e:	2800      	cmp	r0, #0
 8013450:	d000      	beq.n	8013454 <_strtod_l+0x9a4>
 8013452:	e5f8      	b.n	8013046 <_strtod_l+0x596>
 8013454:	e734      	b.n	80132c0 <_strtod_l+0x810>
 8013456:	46c0      	nop			; (mov r8, r8)
 8013458:	fffffc02 	.word	0xfffffc02
 801345c:	7ff00000 	.word	0x7ff00000
 8013460:	08019eb0 	.word	0x08019eb0
 8013464:	fffffbe2 	.word	0xfffffbe2
 8013468:	000fffff 	.word	0x000fffff
 801346c:	7fefffff 	.word	0x7fefffff
 8013470:	39500000 	.word	0x39500000
 8013474:	fff00000 	.word	0xfff00000
 8013478:	9905      	ldr	r1, [sp, #20]
 801347a:	0020      	movs	r0, r4
 801347c:	f003 fae2 	bl	8016a44 <__ratio>
 8013480:	2380      	movs	r3, #128	; 0x80
 8013482:	2200      	movs	r2, #0
 8013484:	05db      	lsls	r3, r3, #23
 8013486:	9008      	str	r0, [sp, #32]
 8013488:	9109      	str	r1, [sp, #36]	; 0x24
 801348a:	f7ec fff7 	bl	800047c <__aeabi_dcmple>
 801348e:	2800      	cmp	r0, #0
 8013490:	d100      	bne.n	8013494 <_strtod_l+0x9e4>
 8013492:	e07f      	b.n	8013594 <_strtod_l+0xae4>
 8013494:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013496:	2b00      	cmp	r3, #0
 8013498:	d04b      	beq.n	8013532 <_strtod_l+0xa82>
 801349a:	2200      	movs	r2, #0
 801349c:	4b8a      	ldr	r3, [pc, #552]	; (80136c8 <_strtod_l+0xc18>)
 801349e:	9210      	str	r2, [sp, #64]	; 0x40
 80134a0:	9311      	str	r3, [sp, #68]	; 0x44
 80134a2:	4b89      	ldr	r3, [pc, #548]	; (80136c8 <_strtod_l+0xc18>)
 80134a4:	9308      	str	r3, [sp, #32]
 80134a6:	4a89      	ldr	r2, [pc, #548]	; (80136cc <_strtod_l+0xc1c>)
 80134a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134aa:	4013      	ands	r3, r2
 80134ac:	9314      	str	r3, [sp, #80]	; 0x50
 80134ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80134b0:	4b87      	ldr	r3, [pc, #540]	; (80136d0 <_strtod_l+0xc20>)
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d000      	beq.n	80134b8 <_strtod_l+0xa08>
 80134b6:	e0ba      	b.n	801362e <_strtod_l+0xb7e>
 80134b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80134ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80134bc:	921a      	str	r2, [sp, #104]	; 0x68
 80134be:	931b      	str	r3, [sp, #108]	; 0x6c
 80134c0:	4a84      	ldr	r2, [pc, #528]	; (80136d4 <_strtod_l+0xc24>)
 80134c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134c4:	4694      	mov	ip, r2
 80134c6:	4463      	add	r3, ip
 80134c8:	001f      	movs	r7, r3
 80134ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80134cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80134ce:	0030      	movs	r0, r6
 80134d0:	0039      	movs	r1, r7
 80134d2:	920c      	str	r2, [sp, #48]	; 0x30
 80134d4:	930d      	str	r3, [sp, #52]	; 0x34
 80134d6:	f003 f9ef 	bl	80168b8 <__ulp>
 80134da:	0002      	movs	r2, r0
 80134dc:	000b      	movs	r3, r1
 80134de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80134e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80134e2:	f7ee fca7 	bl	8001e34 <__aeabi_dmul>
 80134e6:	0032      	movs	r2, r6
 80134e8:	003b      	movs	r3, r7
 80134ea:	f7ed fd7d 	bl	8000fe8 <__aeabi_dadd>
 80134ee:	4a77      	ldr	r2, [pc, #476]	; (80136cc <_strtod_l+0xc1c>)
 80134f0:	4b79      	ldr	r3, [pc, #484]	; (80136d8 <_strtod_l+0xc28>)
 80134f2:	0006      	movs	r6, r0
 80134f4:	400a      	ands	r2, r1
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d964      	bls.n	80135c4 <_strtod_l+0xb14>
 80134fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80134fc:	4a77      	ldr	r2, [pc, #476]	; (80136dc <_strtod_l+0xc2c>)
 80134fe:	4293      	cmp	r3, r2
 8013500:	d103      	bne.n	801350a <_strtod_l+0xa5a>
 8013502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013504:	3301      	adds	r3, #1
 8013506:	d100      	bne.n	801350a <_strtod_l+0xa5a>
 8013508:	e508      	b.n	8012f1c <_strtod_l+0x46c>
 801350a:	2601      	movs	r6, #1
 801350c:	4f73      	ldr	r7, [pc, #460]	; (80136dc <_strtod_l+0xc2c>)
 801350e:	4276      	negs	r6, r6
 8013510:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013512:	9804      	ldr	r0, [sp, #16]
 8013514:	f002 ff56 	bl	80163c4 <_Bfree>
 8013518:	990a      	ldr	r1, [sp, #40]	; 0x28
 801351a:	9804      	ldr	r0, [sp, #16]
 801351c:	f002 ff52 	bl	80163c4 <_Bfree>
 8013520:	9905      	ldr	r1, [sp, #20]
 8013522:	9804      	ldr	r0, [sp, #16]
 8013524:	f002 ff4e 	bl	80163c4 <_Bfree>
 8013528:	0021      	movs	r1, r4
 801352a:	9804      	ldr	r0, [sp, #16]
 801352c:	f002 ff4a 	bl	80163c4 <_Bfree>
 8013530:	e5f4      	b.n	801311c <_strtod_l+0x66c>
 8013532:	2e00      	cmp	r6, #0
 8013534:	d11e      	bne.n	8013574 <_strtod_l+0xac4>
 8013536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013538:	031b      	lsls	r3, r3, #12
 801353a:	d121      	bne.n	8013580 <_strtod_l+0xad0>
 801353c:	9808      	ldr	r0, [sp, #32]
 801353e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013540:	2200      	movs	r2, #0
 8013542:	4b61      	ldr	r3, [pc, #388]	; (80136c8 <_strtod_l+0xc18>)
 8013544:	f7ec ff90 	bl	8000468 <__aeabi_dcmplt>
 8013548:	2800      	cmp	r0, #0
 801354a:	d11f      	bne.n	801358c <_strtod_l+0xadc>
 801354c:	9808      	ldr	r0, [sp, #32]
 801354e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013550:	2200      	movs	r2, #0
 8013552:	4b63      	ldr	r3, [pc, #396]	; (80136e0 <_strtod_l+0xc30>)
 8013554:	f7ee fc6e 	bl	8001e34 <__aeabi_dmul>
 8013558:	0005      	movs	r5, r0
 801355a:	9108      	str	r1, [sp, #32]
 801355c:	2280      	movs	r2, #128	; 0x80
 801355e:	0612      	lsls	r2, r2, #24
 8013560:	4694      	mov	ip, r2
 8013562:	9b08      	ldr	r3, [sp, #32]
 8013564:	951e      	str	r5, [sp, #120]	; 0x78
 8013566:	4463      	add	r3, ip
 8013568:	931f      	str	r3, [sp, #124]	; 0x7c
 801356a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801356c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801356e:	9210      	str	r2, [sp, #64]	; 0x40
 8013570:	9311      	str	r3, [sp, #68]	; 0x44
 8013572:	e798      	b.n	80134a6 <_strtod_l+0x9f6>
 8013574:	2e01      	cmp	r6, #1
 8013576:	d103      	bne.n	8013580 <_strtod_l+0xad0>
 8013578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801357a:	2b00      	cmp	r3, #0
 801357c:	d100      	bne.n	8013580 <_strtod_l+0xad0>
 801357e:	e562      	b.n	8013046 <_strtod_l+0x596>
 8013580:	2200      	movs	r2, #0
 8013582:	4b58      	ldr	r3, [pc, #352]	; (80136e4 <_strtod_l+0xc34>)
 8013584:	2500      	movs	r5, #0
 8013586:	9210      	str	r2, [sp, #64]	; 0x40
 8013588:	9311      	str	r3, [sp, #68]	; 0x44
 801358a:	e78a      	b.n	80134a2 <_strtod_l+0x9f2>
 801358c:	4b54      	ldr	r3, [pc, #336]	; (80136e0 <_strtod_l+0xc30>)
 801358e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013590:	9308      	str	r3, [sp, #32]
 8013592:	e7e3      	b.n	801355c <_strtod_l+0xaac>
 8013594:	4b52      	ldr	r3, [pc, #328]	; (80136e0 <_strtod_l+0xc30>)
 8013596:	9808      	ldr	r0, [sp, #32]
 8013598:	9909      	ldr	r1, [sp, #36]	; 0x24
 801359a:	2200      	movs	r2, #0
 801359c:	f7ee fc4a 	bl	8001e34 <__aeabi_dmul>
 80135a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80135a2:	0005      	movs	r5, r0
 80135a4:	9108      	str	r1, [sp, #32]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d107      	bne.n	80135ba <_strtod_l+0xb0a>
 80135aa:	2380      	movs	r3, #128	; 0x80
 80135ac:	061b      	lsls	r3, r3, #24
 80135ae:	18cb      	adds	r3, r1, r3
 80135b0:	9016      	str	r0, [sp, #88]	; 0x58
 80135b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80135b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80135b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80135b8:	e7d9      	b.n	801356e <_strtod_l+0xabe>
 80135ba:	0002      	movs	r2, r0
 80135bc:	9b08      	ldr	r3, [sp, #32]
 80135be:	9216      	str	r2, [sp, #88]	; 0x58
 80135c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80135c2:	e7f7      	b.n	80135b4 <_strtod_l+0xb04>
 80135c4:	23d4      	movs	r3, #212	; 0xd4
 80135c6:	049b      	lsls	r3, r3, #18
 80135c8:	18cf      	adds	r7, r1, r3
 80135ca:	9b06      	ldr	r3, [sp, #24]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d19f      	bne.n	8013510 <_strtod_l+0xa60>
 80135d0:	4b3e      	ldr	r3, [pc, #248]	; (80136cc <_strtod_l+0xc1c>)
 80135d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80135d4:	970c      	str	r7, [sp, #48]	; 0x30
 80135d6:	403b      	ands	r3, r7
 80135d8:	429a      	cmp	r2, r3
 80135da:	d199      	bne.n	8013510 <_strtod_l+0xa60>
 80135dc:	9908      	ldr	r1, [sp, #32]
 80135de:	0028      	movs	r0, r5
 80135e0:	f7ef f9fe 	bl	80029e0 <__aeabi_d2iz>
 80135e4:	f7ef fa32 	bl	8002a4c <__aeabi_i2d>
 80135e8:	000b      	movs	r3, r1
 80135ea:	0002      	movs	r2, r0
 80135ec:	9908      	ldr	r1, [sp, #32]
 80135ee:	0028      	movs	r0, r5
 80135f0:	f7ee fe92 	bl	8002318 <__aeabi_dsub>
 80135f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80135f6:	9008      	str	r0, [sp, #32]
 80135f8:	9109      	str	r1, [sp, #36]	; 0x24
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d104      	bne.n	8013608 <_strtod_l+0xb58>
 80135fe:	2e00      	cmp	r6, #0
 8013600:	d102      	bne.n	8013608 <_strtod_l+0xb58>
 8013602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013604:	031b      	lsls	r3, r3, #12
 8013606:	d058      	beq.n	80136ba <_strtod_l+0xc0a>
 8013608:	9808      	ldr	r0, [sp, #32]
 801360a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801360c:	4a36      	ldr	r2, [pc, #216]	; (80136e8 <_strtod_l+0xc38>)
 801360e:	4b37      	ldr	r3, [pc, #220]	; (80136ec <_strtod_l+0xc3c>)
 8013610:	f7ec ff2a 	bl	8000468 <__aeabi_dcmplt>
 8013614:	2800      	cmp	r0, #0
 8013616:	d000      	beq.n	801361a <_strtod_l+0xb6a>
 8013618:	e489      	b.n	8012f2e <_strtod_l+0x47e>
 801361a:	9808      	ldr	r0, [sp, #32]
 801361c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801361e:	4a34      	ldr	r2, [pc, #208]	; (80136f0 <_strtod_l+0xc40>)
 8013620:	4b2f      	ldr	r3, [pc, #188]	; (80136e0 <_strtod_l+0xc30>)
 8013622:	f7ec ff35 	bl	8000490 <__aeabi_dcmpgt>
 8013626:	2800      	cmp	r0, #0
 8013628:	d100      	bne.n	801362c <_strtod_l+0xb7c>
 801362a:	e771      	b.n	8013510 <_strtod_l+0xa60>
 801362c:	e47f      	b.n	8012f2e <_strtod_l+0x47e>
 801362e:	9b06      	ldr	r3, [sp, #24]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d02a      	beq.n	801368a <_strtod_l+0xbda>
 8013634:	23d4      	movs	r3, #212	; 0xd4
 8013636:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013638:	04db      	lsls	r3, r3, #19
 801363a:	429a      	cmp	r2, r3
 801363c:	d825      	bhi.n	801368a <_strtod_l+0xbda>
 801363e:	4a2d      	ldr	r2, [pc, #180]	; (80136f4 <_strtod_l+0xc44>)
 8013640:	4b2d      	ldr	r3, [pc, #180]	; (80136f8 <_strtod_l+0xc48>)
 8013642:	0028      	movs	r0, r5
 8013644:	9908      	ldr	r1, [sp, #32]
 8013646:	f7ec ff19 	bl	800047c <__aeabi_dcmple>
 801364a:	2800      	cmp	r0, #0
 801364c:	d016      	beq.n	801367c <_strtod_l+0xbcc>
 801364e:	0028      	movs	r0, r5
 8013650:	9908      	ldr	r1, [sp, #32]
 8013652:	f7ec ffcd 	bl	80005f0 <__aeabi_d2uiz>
 8013656:	2800      	cmp	r0, #0
 8013658:	d100      	bne.n	801365c <_strtod_l+0xbac>
 801365a:	3001      	adds	r0, #1
 801365c:	f7ef fa30 	bl	8002ac0 <__aeabi_ui2d>
 8013660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013662:	0005      	movs	r5, r0
 8013664:	9108      	str	r1, [sp, #32]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d122      	bne.n	80136b0 <_strtod_l+0xc00>
 801366a:	2380      	movs	r3, #128	; 0x80
 801366c:	061b      	lsls	r3, r3, #24
 801366e:	18cb      	adds	r3, r1, r3
 8013670:	9018      	str	r0, [sp, #96]	; 0x60
 8013672:	9319      	str	r3, [sp, #100]	; 0x64
 8013674:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013676:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013678:	9210      	str	r2, [sp, #64]	; 0x40
 801367a:	9311      	str	r3, [sp, #68]	; 0x44
 801367c:	22d6      	movs	r2, #214	; 0xd6
 801367e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013680:	04d2      	lsls	r2, r2, #19
 8013682:	189b      	adds	r3, r3, r2
 8013684:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013686:	1a9b      	subs	r3, r3, r2
 8013688:	9311      	str	r3, [sp, #68]	; 0x44
 801368a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801368c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801368e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013690:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013692:	f003 f911 	bl	80168b8 <__ulp>
 8013696:	0002      	movs	r2, r0
 8013698:	000b      	movs	r3, r1
 801369a:	0030      	movs	r0, r6
 801369c:	0039      	movs	r1, r7
 801369e:	f7ee fbc9 	bl	8001e34 <__aeabi_dmul>
 80136a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80136a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136a6:	f7ed fc9f 	bl	8000fe8 <__aeabi_dadd>
 80136aa:	0006      	movs	r6, r0
 80136ac:	000f      	movs	r7, r1
 80136ae:	e78c      	b.n	80135ca <_strtod_l+0xb1a>
 80136b0:	0002      	movs	r2, r0
 80136b2:	9b08      	ldr	r3, [sp, #32]
 80136b4:	9218      	str	r2, [sp, #96]	; 0x60
 80136b6:	9319      	str	r3, [sp, #100]	; 0x64
 80136b8:	e7dc      	b.n	8013674 <_strtod_l+0xbc4>
 80136ba:	4a0b      	ldr	r2, [pc, #44]	; (80136e8 <_strtod_l+0xc38>)
 80136bc:	4b0f      	ldr	r3, [pc, #60]	; (80136fc <_strtod_l+0xc4c>)
 80136be:	9808      	ldr	r0, [sp, #32]
 80136c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80136c2:	f7ec fed1 	bl	8000468 <__aeabi_dcmplt>
 80136c6:	e7ae      	b.n	8013626 <_strtod_l+0xb76>
 80136c8:	3ff00000 	.word	0x3ff00000
 80136cc:	7ff00000 	.word	0x7ff00000
 80136d0:	7fe00000 	.word	0x7fe00000
 80136d4:	fcb00000 	.word	0xfcb00000
 80136d8:	7c9fffff 	.word	0x7c9fffff
 80136dc:	7fefffff 	.word	0x7fefffff
 80136e0:	3fe00000 	.word	0x3fe00000
 80136e4:	bff00000 	.word	0xbff00000
 80136e8:	94a03595 	.word	0x94a03595
 80136ec:	3fdfffff 	.word	0x3fdfffff
 80136f0:	35afe535 	.word	0x35afe535
 80136f4:	ffc00000 	.word	0xffc00000
 80136f8:	41dfffff 	.word	0x41dfffff
 80136fc:	3fcfffff 	.word	0x3fcfffff

08013700 <strtod>:
 8013700:	4b06      	ldr	r3, [pc, #24]	; (801371c <strtod+0x1c>)
 8013702:	b510      	push	{r4, lr}
 8013704:	0004      	movs	r4, r0
 8013706:	6818      	ldr	r0, [r3, #0]
 8013708:	000a      	movs	r2, r1
 801370a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801370c:	2b00      	cmp	r3, #0
 801370e:	d100      	bne.n	8013712 <strtod+0x12>
 8013710:	4b03      	ldr	r3, [pc, #12]	; (8013720 <strtod+0x20>)
 8013712:	0021      	movs	r1, r4
 8013714:	f7ff f9cc 	bl	8012ab0 <_strtod_l>
 8013718:	bd10      	pop	{r4, pc}
 801371a:	46c0      	nop			; (mov r8, r8)
 801371c:	200000dc 	.word	0x200000dc
 8013720:	20000508 	.word	0x20000508

08013724 <strtok>:
 8013724:	4b03      	ldr	r3, [pc, #12]	; (8013734 <strtok+0x10>)
 8013726:	b510      	push	{r4, lr}
 8013728:	681a      	ldr	r2, [r3, #0]
 801372a:	2301      	movs	r3, #1
 801372c:	325c      	adds	r2, #92	; 0x5c
 801372e:	f000 f803 	bl	8013738 <__strtok_r>
 8013732:	bd10      	pop	{r4, pc}
 8013734:	200000dc 	.word	0x200000dc

08013738 <__strtok_r>:
 8013738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801373a:	2800      	cmp	r0, #0
 801373c:	d104      	bne.n	8013748 <__strtok_r+0x10>
 801373e:	6810      	ldr	r0, [r2, #0]
 8013740:	2800      	cmp	r0, #0
 8013742:	d101      	bne.n	8013748 <__strtok_r+0x10>
 8013744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013746:	0020      	movs	r0, r4
 8013748:	000e      	movs	r6, r1
 801374a:	7805      	ldrb	r5, [r0, #0]
 801374c:	1c44      	adds	r4, r0, #1
 801374e:	7837      	ldrb	r7, [r6, #0]
 8013750:	2f00      	cmp	r7, #0
 8013752:	d104      	bne.n	801375e <__strtok_r+0x26>
 8013754:	2d00      	cmp	r5, #0
 8013756:	d110      	bne.n	801377a <__strtok_r+0x42>
 8013758:	6015      	str	r5, [r2, #0]
 801375a:	0028      	movs	r0, r5
 801375c:	e7f2      	b.n	8013744 <__strtok_r+0xc>
 801375e:	3601      	adds	r6, #1
 8013760:	42bd      	cmp	r5, r7
 8013762:	d1f4      	bne.n	801374e <__strtok_r+0x16>
 8013764:	2b00      	cmp	r3, #0
 8013766:	d1ee      	bne.n	8013746 <__strtok_r+0xe>
 8013768:	6014      	str	r4, [r2, #0]
 801376a:	7003      	strb	r3, [r0, #0]
 801376c:	e7ea      	b.n	8013744 <__strtok_r+0xc>
 801376e:	0033      	movs	r3, r6
 8013770:	e00d      	b.n	801378e <__strtok_r+0x56>
 8013772:	3501      	adds	r5, #1
 8013774:	2f00      	cmp	r7, #0
 8013776:	d103      	bne.n	8013780 <__strtok_r+0x48>
 8013778:	001c      	movs	r4, r3
 801377a:	000d      	movs	r5, r1
 801377c:	7826      	ldrb	r6, [r4, #0]
 801377e:	1c63      	adds	r3, r4, #1
 8013780:	782f      	ldrb	r7, [r5, #0]
 8013782:	42be      	cmp	r6, r7
 8013784:	d1f5      	bne.n	8013772 <__strtok_r+0x3a>
 8013786:	2e00      	cmp	r6, #0
 8013788:	d0f1      	beq.n	801376e <__strtok_r+0x36>
 801378a:	2100      	movs	r1, #0
 801378c:	7021      	strb	r1, [r4, #0]
 801378e:	6013      	str	r3, [r2, #0]
 8013790:	e7d8      	b.n	8013744 <__strtok_r+0xc>
	...

08013794 <_strtol_l.isra.0>:
 8013794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013796:	001f      	movs	r7, r3
 8013798:	000e      	movs	r6, r1
 801379a:	b087      	sub	sp, #28
 801379c:	9005      	str	r0, [sp, #20]
 801379e:	9101      	str	r1, [sp, #4]
 80137a0:	9202      	str	r2, [sp, #8]
 80137a2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80137a4:	7834      	ldrb	r4, [r6, #0]
 80137a6:	f7fe fc9f 	bl	80120e8 <__locale_ctype_ptr_l>
 80137aa:	2208      	movs	r2, #8
 80137ac:	1900      	adds	r0, r0, r4
 80137ae:	7843      	ldrb	r3, [r0, #1]
 80137b0:	1c75      	adds	r5, r6, #1
 80137b2:	4013      	ands	r3, r2
 80137b4:	d136      	bne.n	8013824 <_strtol_l.isra.0+0x90>
 80137b6:	2c2d      	cmp	r4, #45	; 0x2d
 80137b8:	d136      	bne.n	8013828 <_strtol_l.isra.0+0x94>
 80137ba:	1cb5      	adds	r5, r6, #2
 80137bc:	7874      	ldrb	r4, [r6, #1]
 80137be:	2601      	movs	r6, #1
 80137c0:	2f00      	cmp	r7, #0
 80137c2:	d062      	beq.n	801388a <_strtol_l.isra.0+0xf6>
 80137c4:	2f10      	cmp	r7, #16
 80137c6:	d109      	bne.n	80137dc <_strtol_l.isra.0+0x48>
 80137c8:	2c30      	cmp	r4, #48	; 0x30
 80137ca:	d107      	bne.n	80137dc <_strtol_l.isra.0+0x48>
 80137cc:	2220      	movs	r2, #32
 80137ce:	782b      	ldrb	r3, [r5, #0]
 80137d0:	4393      	bics	r3, r2
 80137d2:	2b58      	cmp	r3, #88	; 0x58
 80137d4:	d154      	bne.n	8013880 <_strtol_l.isra.0+0xec>
 80137d6:	2710      	movs	r7, #16
 80137d8:	786c      	ldrb	r4, [r5, #1]
 80137da:	3502      	adds	r5, #2
 80137dc:	4b2d      	ldr	r3, [pc, #180]	; (8013894 <_strtol_l.isra.0+0x100>)
 80137de:	0039      	movs	r1, r7
 80137e0:	18f3      	adds	r3, r6, r3
 80137e2:	0018      	movs	r0, r3
 80137e4:	9303      	str	r3, [sp, #12]
 80137e6:	f7ec fd39 	bl	800025c <__aeabi_uidivmod>
 80137ea:	9104      	str	r1, [sp, #16]
 80137ec:	2101      	movs	r1, #1
 80137ee:	2300      	movs	r3, #0
 80137f0:	4249      	negs	r1, r1
 80137f2:	0002      	movs	r2, r0
 80137f4:	468c      	mov	ip, r1
 80137f6:	0018      	movs	r0, r3
 80137f8:	0021      	movs	r1, r4
 80137fa:	3930      	subs	r1, #48	; 0x30
 80137fc:	2909      	cmp	r1, #9
 80137fe:	d81a      	bhi.n	8013836 <_strtol_l.isra.0+0xa2>
 8013800:	000c      	movs	r4, r1
 8013802:	42a7      	cmp	r7, r4
 8013804:	dd23      	ble.n	801384e <_strtol_l.isra.0+0xba>
 8013806:	1c59      	adds	r1, r3, #1
 8013808:	d009      	beq.n	801381e <_strtol_l.isra.0+0x8a>
 801380a:	4663      	mov	r3, ip
 801380c:	4282      	cmp	r2, r0
 801380e:	d306      	bcc.n	801381e <_strtol_l.isra.0+0x8a>
 8013810:	d102      	bne.n	8013818 <_strtol_l.isra.0+0x84>
 8013812:	9904      	ldr	r1, [sp, #16]
 8013814:	42a1      	cmp	r1, r4
 8013816:	db02      	blt.n	801381e <_strtol_l.isra.0+0x8a>
 8013818:	2301      	movs	r3, #1
 801381a:	4378      	muls	r0, r7
 801381c:	1820      	adds	r0, r4, r0
 801381e:	782c      	ldrb	r4, [r5, #0]
 8013820:	3501      	adds	r5, #1
 8013822:	e7e9      	b.n	80137f8 <_strtol_l.isra.0+0x64>
 8013824:	002e      	movs	r6, r5
 8013826:	e7bc      	b.n	80137a2 <_strtol_l.isra.0+0xe>
 8013828:	2c2b      	cmp	r4, #43	; 0x2b
 801382a:	d001      	beq.n	8013830 <_strtol_l.isra.0+0x9c>
 801382c:	001e      	movs	r6, r3
 801382e:	e7c7      	b.n	80137c0 <_strtol_l.isra.0+0x2c>
 8013830:	1cb5      	adds	r5, r6, #2
 8013832:	7874      	ldrb	r4, [r6, #1]
 8013834:	e7fa      	b.n	801382c <_strtol_l.isra.0+0x98>
 8013836:	0021      	movs	r1, r4
 8013838:	3941      	subs	r1, #65	; 0x41
 801383a:	2919      	cmp	r1, #25
 801383c:	d801      	bhi.n	8013842 <_strtol_l.isra.0+0xae>
 801383e:	3c37      	subs	r4, #55	; 0x37
 8013840:	e7df      	b.n	8013802 <_strtol_l.isra.0+0x6e>
 8013842:	0021      	movs	r1, r4
 8013844:	3961      	subs	r1, #97	; 0x61
 8013846:	2919      	cmp	r1, #25
 8013848:	d801      	bhi.n	801384e <_strtol_l.isra.0+0xba>
 801384a:	3c57      	subs	r4, #87	; 0x57
 801384c:	e7d9      	b.n	8013802 <_strtol_l.isra.0+0x6e>
 801384e:	1c5a      	adds	r2, r3, #1
 8013850:	d108      	bne.n	8013864 <_strtol_l.isra.0+0xd0>
 8013852:	9a05      	ldr	r2, [sp, #20]
 8013854:	3323      	adds	r3, #35	; 0x23
 8013856:	6013      	str	r3, [r2, #0]
 8013858:	9b02      	ldr	r3, [sp, #8]
 801385a:	9803      	ldr	r0, [sp, #12]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d109      	bne.n	8013874 <_strtol_l.isra.0+0xe0>
 8013860:	b007      	add	sp, #28
 8013862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013864:	2e00      	cmp	r6, #0
 8013866:	d000      	beq.n	801386a <_strtol_l.isra.0+0xd6>
 8013868:	4240      	negs	r0, r0
 801386a:	9a02      	ldr	r2, [sp, #8]
 801386c:	2a00      	cmp	r2, #0
 801386e:	d0f7      	beq.n	8013860 <_strtol_l.isra.0+0xcc>
 8013870:	2b00      	cmp	r3, #0
 8013872:	d001      	beq.n	8013878 <_strtol_l.isra.0+0xe4>
 8013874:	1e6b      	subs	r3, r5, #1
 8013876:	9301      	str	r3, [sp, #4]
 8013878:	9b02      	ldr	r3, [sp, #8]
 801387a:	9a01      	ldr	r2, [sp, #4]
 801387c:	601a      	str	r2, [r3, #0]
 801387e:	e7ef      	b.n	8013860 <_strtol_l.isra.0+0xcc>
 8013880:	2430      	movs	r4, #48	; 0x30
 8013882:	2f00      	cmp	r7, #0
 8013884:	d1aa      	bne.n	80137dc <_strtol_l.isra.0+0x48>
 8013886:	2708      	movs	r7, #8
 8013888:	e7a8      	b.n	80137dc <_strtol_l.isra.0+0x48>
 801388a:	2c30      	cmp	r4, #48	; 0x30
 801388c:	d09e      	beq.n	80137cc <_strtol_l.isra.0+0x38>
 801388e:	270a      	movs	r7, #10
 8013890:	e7a4      	b.n	80137dc <_strtol_l.isra.0+0x48>
 8013892:	46c0      	nop			; (mov r8, r8)
 8013894:	7fffffff 	.word	0x7fffffff

08013898 <strtol>:
 8013898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801389a:	0013      	movs	r3, r2
 801389c:	4a06      	ldr	r2, [pc, #24]	; (80138b8 <strtol+0x20>)
 801389e:	0005      	movs	r5, r0
 80138a0:	6810      	ldr	r0, [r2, #0]
 80138a2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80138a4:	2c00      	cmp	r4, #0
 80138a6:	d100      	bne.n	80138aa <strtol+0x12>
 80138a8:	4c04      	ldr	r4, [pc, #16]	; (80138bc <strtol+0x24>)
 80138aa:	000a      	movs	r2, r1
 80138ac:	9400      	str	r4, [sp, #0]
 80138ae:	0029      	movs	r1, r5
 80138b0:	f7ff ff70 	bl	8013794 <_strtol_l.isra.0>
 80138b4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80138b6:	46c0      	nop			; (mov r8, r8)
 80138b8:	200000dc 	.word	0x200000dc
 80138bc:	20000508 	.word	0x20000508

080138c0 <_svfprintf_r>:
 80138c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138c2:	b0d9      	sub	sp, #356	; 0x164
 80138c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80138c6:	9209      	str	r2, [sp, #36]	; 0x24
 80138c8:	001c      	movs	r4, r3
 80138ca:	900a      	str	r0, [sp, #40]	; 0x28
 80138cc:	f002 fd26 	bl	801631c <_localeconv_r>
 80138d0:	6803      	ldr	r3, [r0, #0]
 80138d2:	0018      	movs	r0, r3
 80138d4:	931c      	str	r3, [sp, #112]	; 0x70
 80138d6:	f7ec fc1f 	bl	8000118 <strlen>
 80138da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138dc:	9014      	str	r0, [sp, #80]	; 0x50
 80138de:	899b      	ldrh	r3, [r3, #12]
 80138e0:	061b      	lsls	r3, r3, #24
 80138e2:	d518      	bpl.n	8013916 <_svfprintf_r+0x56>
 80138e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138e6:	691b      	ldr	r3, [r3, #16]
 80138e8:	9308      	str	r3, [sp, #32]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d113      	bne.n	8013916 <_svfprintf_r+0x56>
 80138ee:	2140      	movs	r1, #64	; 0x40
 80138f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80138f2:	f7fe fc1f 	bl	8012134 <_malloc_r>
 80138f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138f8:	6018      	str	r0, [r3, #0]
 80138fa:	6118      	str	r0, [r3, #16]
 80138fc:	2800      	cmp	r0, #0
 80138fe:	d107      	bne.n	8013910 <_svfprintf_r+0x50>
 8013900:	230c      	movs	r3, #12
 8013902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013904:	6013      	str	r3, [r2, #0]
 8013906:	3b0d      	subs	r3, #13
 8013908:	9315      	str	r3, [sp, #84]	; 0x54
 801390a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801390c:	b059      	add	sp, #356	; 0x164
 801390e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013910:	2340      	movs	r3, #64	; 0x40
 8013912:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013914:	6153      	str	r3, [r2, #20]
 8013916:	2600      	movs	r6, #0
 8013918:	af2f      	add	r7, sp, #188	; 0xbc
 801391a:	972c      	str	r7, [sp, #176]	; 0xb0
 801391c:	962e      	str	r6, [sp, #184]	; 0xb8
 801391e:	962d      	str	r6, [sp, #180]	; 0xb4
 8013920:	960d      	str	r6, [sp, #52]	; 0x34
 8013922:	961a      	str	r6, [sp, #104]	; 0x68
 8013924:	9619      	str	r6, [sp, #100]	; 0x64
 8013926:	961e      	str	r6, [sp, #120]	; 0x78
 8013928:	961d      	str	r6, [sp, #116]	; 0x74
 801392a:	9613      	str	r6, [sp, #76]	; 0x4c
 801392c:	961b      	str	r6, [sp, #108]	; 0x6c
 801392e:	961f      	str	r6, [sp, #124]	; 0x7c
 8013930:	9615      	str	r6, [sp, #84]	; 0x54
 8013932:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013934:	782b      	ldrb	r3, [r5, #0]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d002      	beq.n	8013940 <_svfprintf_r+0x80>
 801393a:	2b25      	cmp	r3, #37	; 0x25
 801393c:	d000      	beq.n	8013940 <_svfprintf_r+0x80>
 801393e:	e095      	b.n	8013a6c <_svfprintf_r+0x1ac>
 8013940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013942:	1aee      	subs	r6, r5, r3
 8013944:	d017      	beq.n	8013976 <_svfprintf_r+0xb6>
 8013946:	603b      	str	r3, [r7, #0]
 8013948:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801394a:	607e      	str	r6, [r7, #4]
 801394c:	199b      	adds	r3, r3, r6
 801394e:	932e      	str	r3, [sp, #184]	; 0xb8
 8013950:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013952:	3708      	adds	r7, #8
 8013954:	9308      	str	r3, [sp, #32]
 8013956:	3301      	adds	r3, #1
 8013958:	932d      	str	r3, [sp, #180]	; 0xb4
 801395a:	2b07      	cmp	r3, #7
 801395c:	dd08      	ble.n	8013970 <_svfprintf_r+0xb0>
 801395e:	aa2c      	add	r2, sp, #176	; 0xb0
 8013960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013962:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013964:	f003 f900 	bl	8016b68 <__ssprint_r>
 8013968:	2800      	cmp	r0, #0
 801396a:	d000      	beq.n	801396e <_svfprintf_r+0xae>
 801396c:	e2d9      	b.n	8013f22 <_svfprintf_r+0x662>
 801396e:	af2f      	add	r7, sp, #188	; 0xbc
 8013970:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013972:	199b      	adds	r3, r3, r6
 8013974:	9315      	str	r3, [sp, #84]	; 0x54
 8013976:	782b      	ldrb	r3, [r5, #0]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d101      	bne.n	8013980 <_svfprintf_r+0xc0>
 801397c:	f001 f9e5 	bl	8014d4a <_svfprintf_r+0x148a>
 8013980:	1c6b      	adds	r3, r5, #1
 8013982:	221b      	movs	r2, #27
 8013984:	9311      	str	r3, [sp, #68]	; 0x44
 8013986:	2300      	movs	r3, #0
 8013988:	a91e      	add	r1, sp, #120	; 0x78
 801398a:	1852      	adds	r2, r2, r1
 801398c:	7013      	strb	r3, [r2, #0]
 801398e:	2201      	movs	r2, #1
 8013990:	001e      	movs	r6, r3
 8013992:	2520      	movs	r5, #32
 8013994:	4252      	negs	r2, r2
 8013996:	9208      	str	r2, [sp, #32]
 8013998:	9316      	str	r3, [sp, #88]	; 0x58
 801399a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801399c:	781b      	ldrb	r3, [r3, #0]
 801399e:	930e      	str	r3, [sp, #56]	; 0x38
 80139a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80139a2:	3301      	adds	r3, #1
 80139a4:	9311      	str	r3, [sp, #68]	; 0x44
 80139a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80139a8:	3820      	subs	r0, #32
 80139aa:	285a      	cmp	r0, #90	; 0x5a
 80139ac:	d901      	bls.n	80139b2 <_svfprintf_r+0xf2>
 80139ae:	f000 fe3d 	bl	801462c <_svfprintf_r+0xd6c>
 80139b2:	f7ec fbc3 	bl	800013c <__gnu_thumb1_case_shi>
 80139b6:	009e      	.short	0x009e
 80139b8:	063b063b 	.word	0x063b063b
 80139bc:	063b00a7 	.word	0x063b00a7
 80139c0:	063b063b 	.word	0x063b063b
 80139c4:	063b0080 	.word	0x063b0080
 80139c8:	00a9063b 	.word	0x00a9063b
 80139cc:	063b00b3 	.word	0x063b00b3
 80139d0:	00b900b1 	.word	0x00b900b1
 80139d4:	00dd063b 	.word	0x00dd063b
 80139d8:	00df00df 	.word	0x00df00df
 80139dc:	00df00df 	.word	0x00df00df
 80139e0:	00df00df 	.word	0x00df00df
 80139e4:	00df00df 	.word	0x00df00df
 80139e8:	063b00df 	.word	0x063b00df
 80139ec:	063b063b 	.word	0x063b063b
 80139f0:	063b063b 	.word	0x063b063b
 80139f4:	063b063b 	.word	0x063b063b
 80139f8:	063b0240 	.word	0x063b0240
 80139fc:	01fd010a 	.word	0x01fd010a
 8013a00:	02400240 	.word	0x02400240
 8013a04:	063b0240 	.word	0x063b0240
 8013a08:	063b063b 	.word	0x063b063b
 8013a0c:	00f1063b 	.word	0x00f1063b
 8013a10:	063b063b 	.word	0x063b063b
 8013a14:	063b04e2 	.word	0x063b04e2
 8013a18:	063b063b 	.word	0x063b063b
 8013a1c:	063b0537 	.word	0x063b0537
 8013a20:	063b0557 	.word	0x063b0557
 8013a24:	005d063b 	.word	0x005d063b
 8013a28:	063b063b 	.word	0x063b063b
 8013a2c:	063b063b 	.word	0x063b063b
 8013a30:	063b063b 	.word	0x063b063b
 8013a34:	063b063b 	.word	0x063b063b
 8013a38:	063b0240 	.word	0x063b0240
 8013a3c:	01ff010a 	.word	0x01ff010a
 8013a40:	02400240 	.word	0x02400240
 8013a44:	00f30240 	.word	0x00f30240
 8013a48:	010601ff 	.word	0x010601ff
 8013a4c:	00ff063b 	.word	0x00ff063b
 8013a50:	04c5063b 	.word	0x04c5063b
 8013a54:	052704e4 	.word	0x052704e4
 8013a58:	063b0106 	.word	0x063b0106
 8013a5c:	fff20537 	.word	0xfff20537
 8013a60:	063b0559 	.word	0x063b0559
 8013a64:	0582063b 	.word	0x0582063b
 8013a68:	fff2063b 	.word	0xfff2063b
 8013a6c:	3501      	adds	r5, #1
 8013a6e:	e761      	b.n	8013934 <_svfprintf_r+0x74>
 8013a70:	4bcb      	ldr	r3, [pc, #812]	; (8013da0 <_svfprintf_r+0x4e0>)
 8013a72:	2220      	movs	r2, #32
 8013a74:	931e      	str	r3, [sp, #120]	; 0x78
 8013a76:	4032      	ands	r2, r6
 8013a78:	d101      	bne.n	8013a7e <_svfprintf_r+0x1be>
 8013a7a:	f000 fd21 	bl	80144c0 <_svfprintf_r+0xc00>
 8013a7e:	2307      	movs	r3, #7
 8013a80:	3407      	adds	r4, #7
 8013a82:	439c      	bics	r4, r3
 8013a84:	0023      	movs	r3, r4
 8013a86:	3308      	adds	r3, #8
 8013a88:	9312      	str	r3, [sp, #72]	; 0x48
 8013a8a:	6823      	ldr	r3, [r4, #0]
 8013a8c:	6864      	ldr	r4, [r4, #4]
 8013a8e:	9306      	str	r3, [sp, #24]
 8013a90:	9407      	str	r4, [sp, #28]
 8013a92:	07f3      	lsls	r3, r6, #31
 8013a94:	d50a      	bpl.n	8013aac <_svfprintf_r+0x1ec>
 8013a96:	9b06      	ldr	r3, [sp, #24]
 8013a98:	9a07      	ldr	r2, [sp, #28]
 8013a9a:	4313      	orrs	r3, r2
 8013a9c:	d006      	beq.n	8013aac <_svfprintf_r+0x1ec>
 8013a9e:	2230      	movs	r2, #48	; 0x30
 8013aa0:	ab25      	add	r3, sp, #148	; 0x94
 8013aa2:	701a      	strb	r2, [r3, #0]
 8013aa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013aa6:	705a      	strb	r2, [r3, #1]
 8013aa8:	2302      	movs	r3, #2
 8013aaa:	431e      	orrs	r6, r3
 8013aac:	4bbd      	ldr	r3, [pc, #756]	; (8013da4 <_svfprintf_r+0x4e4>)
 8013aae:	401e      	ands	r6, r3
 8013ab0:	2302      	movs	r3, #2
 8013ab2:	f000 fc74 	bl	801439e <_svfprintf_r+0xade>
 8013ab6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013ab8:	f002 fc30 	bl	801631c <_localeconv_r>
 8013abc:	6843      	ldr	r3, [r0, #4]
 8013abe:	0018      	movs	r0, r3
 8013ac0:	931f      	str	r3, [sp, #124]	; 0x7c
 8013ac2:	f7ec fb29 	bl	8000118 <strlen>
 8013ac6:	901b      	str	r0, [sp, #108]	; 0x6c
 8013ac8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013aca:	f002 fc27 	bl	801631c <_localeconv_r>
 8013ace:	6883      	ldr	r3, [r0, #8]
 8013ad0:	9313      	str	r3, [sp, #76]	; 0x4c
 8013ad2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d100      	bne.n	8013ada <_svfprintf_r+0x21a>
 8013ad8:	e75f      	b.n	801399a <_svfprintf_r+0xda>
 8013ada:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d100      	bne.n	8013ae2 <_svfprintf_r+0x222>
 8013ae0:	e75b      	b.n	801399a <_svfprintf_r+0xda>
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d100      	bne.n	8013aea <_svfprintf_r+0x22a>
 8013ae8:	e757      	b.n	801399a <_svfprintf_r+0xda>
 8013aea:	2380      	movs	r3, #128	; 0x80
 8013aec:	00db      	lsls	r3, r3, #3
 8013aee:	431e      	orrs	r6, r3
 8013af0:	e753      	b.n	801399a <_svfprintf_r+0xda>
 8013af2:	231b      	movs	r3, #27
 8013af4:	aa1e      	add	r2, sp, #120	; 0x78
 8013af6:	189b      	adds	r3, r3, r2
 8013af8:	781a      	ldrb	r2, [r3, #0]
 8013afa:	2a00      	cmp	r2, #0
 8013afc:	d000      	beq.n	8013b00 <_svfprintf_r+0x240>
 8013afe:	e74c      	b.n	801399a <_svfprintf_r+0xda>
 8013b00:	701d      	strb	r5, [r3, #0]
 8013b02:	e74a      	b.n	801399a <_svfprintf_r+0xda>
 8013b04:	2301      	movs	r3, #1
 8013b06:	e7f2      	b.n	8013aee <_svfprintf_r+0x22e>
 8013b08:	6823      	ldr	r3, [r4, #0]
 8013b0a:	3404      	adds	r4, #4
 8013b0c:	9316      	str	r3, [sp, #88]	; 0x58
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	db00      	blt.n	8013b14 <_svfprintf_r+0x254>
 8013b12:	e742      	b.n	801399a <_svfprintf_r+0xda>
 8013b14:	425b      	negs	r3, r3
 8013b16:	9316      	str	r3, [sp, #88]	; 0x58
 8013b18:	2304      	movs	r3, #4
 8013b1a:	e7e8      	b.n	8013aee <_svfprintf_r+0x22e>
 8013b1c:	231b      	movs	r3, #27
 8013b1e:	aa1e      	add	r2, sp, #120	; 0x78
 8013b20:	189b      	adds	r3, r3, r2
 8013b22:	222b      	movs	r2, #43	; 0x2b
 8013b24:	701a      	strb	r2, [r3, #0]
 8013b26:	e738      	b.n	801399a <_svfprintf_r+0xda>
 8013b28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013b2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b2c:	7812      	ldrb	r2, [r2, #0]
 8013b2e:	3301      	adds	r3, #1
 8013b30:	920e      	str	r2, [sp, #56]	; 0x38
 8013b32:	2a2a      	cmp	r2, #42	; 0x2a
 8013b34:	d008      	beq.n	8013b48 <_svfprintf_r+0x288>
 8013b36:	2200      	movs	r2, #0
 8013b38:	9208      	str	r2, [sp, #32]
 8013b3a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013b3c:	001a      	movs	r2, r3
 8013b3e:	3930      	subs	r1, #48	; 0x30
 8013b40:	2909      	cmp	r1, #9
 8013b42:	d90c      	bls.n	8013b5e <_svfprintf_r+0x29e>
 8013b44:	9211      	str	r2, [sp, #68]	; 0x44
 8013b46:	e72e      	b.n	80139a6 <_svfprintf_r+0xe6>
 8013b48:	6821      	ldr	r1, [r4, #0]
 8013b4a:	1d22      	adds	r2, r4, #4
 8013b4c:	9108      	str	r1, [sp, #32]
 8013b4e:	2900      	cmp	r1, #0
 8013b50:	da02      	bge.n	8013b58 <_svfprintf_r+0x298>
 8013b52:	2101      	movs	r1, #1
 8013b54:	4249      	negs	r1, r1
 8013b56:	9108      	str	r1, [sp, #32]
 8013b58:	0014      	movs	r4, r2
 8013b5a:	9311      	str	r3, [sp, #68]	; 0x44
 8013b5c:	e71d      	b.n	801399a <_svfprintf_r+0xda>
 8013b5e:	200a      	movs	r0, #10
 8013b60:	9a08      	ldr	r2, [sp, #32]
 8013b62:	4342      	muls	r2, r0
 8013b64:	1852      	adds	r2, r2, r1
 8013b66:	9208      	str	r2, [sp, #32]
 8013b68:	781a      	ldrb	r2, [r3, #0]
 8013b6a:	3301      	adds	r3, #1
 8013b6c:	920e      	str	r2, [sp, #56]	; 0x38
 8013b6e:	e7e4      	b.n	8013b3a <_svfprintf_r+0x27a>
 8013b70:	2380      	movs	r3, #128	; 0x80
 8013b72:	e7bc      	b.n	8013aee <_svfprintf_r+0x22e>
 8013b74:	2300      	movs	r3, #0
 8013b76:	9316      	str	r3, [sp, #88]	; 0x58
 8013b78:	220a      	movs	r2, #10
 8013b7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013b7c:	4353      	muls	r3, r2
 8013b7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013b80:	3a30      	subs	r2, #48	; 0x30
 8013b82:	18d3      	adds	r3, r2, r3
 8013b84:	9316      	str	r3, [sp, #88]	; 0x58
 8013b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b88:	1c5a      	adds	r2, r3, #1
 8013b8a:	781b      	ldrb	r3, [r3, #0]
 8013b8c:	9211      	str	r2, [sp, #68]	; 0x44
 8013b8e:	930e      	str	r3, [sp, #56]	; 0x38
 8013b90:	3b30      	subs	r3, #48	; 0x30
 8013b92:	2b09      	cmp	r3, #9
 8013b94:	d9f0      	bls.n	8013b78 <_svfprintf_r+0x2b8>
 8013b96:	e7d5      	b.n	8013b44 <_svfprintf_r+0x284>
 8013b98:	2308      	movs	r3, #8
 8013b9a:	e7a8      	b.n	8013aee <_svfprintf_r+0x22e>
 8013b9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	2b68      	cmp	r3, #104	; 0x68
 8013ba2:	d105      	bne.n	8013bb0 <_svfprintf_r+0x2f0>
 8013ba4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	9311      	str	r3, [sp, #68]	; 0x44
 8013baa:	2380      	movs	r3, #128	; 0x80
 8013bac:	009b      	lsls	r3, r3, #2
 8013bae:	e79e      	b.n	8013aee <_svfprintf_r+0x22e>
 8013bb0:	2340      	movs	r3, #64	; 0x40
 8013bb2:	e79c      	b.n	8013aee <_svfprintf_r+0x22e>
 8013bb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	2b6c      	cmp	r3, #108	; 0x6c
 8013bba:	d104      	bne.n	8013bc6 <_svfprintf_r+0x306>
 8013bbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	9311      	str	r3, [sp, #68]	; 0x44
 8013bc2:	432e      	orrs	r6, r5
 8013bc4:	e6e9      	b.n	801399a <_svfprintf_r+0xda>
 8013bc6:	2310      	movs	r3, #16
 8013bc8:	e791      	b.n	8013aee <_svfprintf_r+0x22e>
 8013bca:	1d23      	adds	r3, r4, #4
 8013bcc:	6822      	ldr	r2, [r4, #0]
 8013bce:	9312      	str	r3, [sp, #72]	; 0x48
 8013bd0:	ab3f      	add	r3, sp, #252	; 0xfc
 8013bd2:	701a      	strb	r2, [r3, #0]
 8013bd4:	221b      	movs	r2, #27
 8013bd6:	2000      	movs	r0, #0
 8013bd8:	a91e      	add	r1, sp, #120	; 0x78
 8013bda:	1852      	adds	r2, r2, r1
 8013bdc:	7010      	strb	r0, [r2, #0]
 8013bde:	2201      	movs	r2, #1
 8013be0:	0005      	movs	r5, r0
 8013be2:	900c      	str	r0, [sp, #48]	; 0x30
 8013be4:	9208      	str	r2, [sp, #32]
 8013be6:	9017      	str	r0, [sp, #92]	; 0x5c
 8013be8:	9010      	str	r0, [sp, #64]	; 0x40
 8013bea:	900f      	str	r0, [sp, #60]	; 0x3c
 8013bec:	9309      	str	r3, [sp, #36]	; 0x24
 8013bee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013bf0:	9a08      	ldr	r2, [sp, #32]
 8013bf2:	9318      	str	r3, [sp, #96]	; 0x60
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	da00      	bge.n	8013bfa <_svfprintf_r+0x33a>
 8013bf8:	9218      	str	r2, [sp, #96]	; 0x60
 8013bfa:	231b      	movs	r3, #27
 8013bfc:	aa1e      	add	r2, sp, #120	; 0x78
 8013bfe:	189b      	adds	r3, r3, r2
 8013c00:	781b      	ldrb	r3, [r3, #0]
 8013c02:	1e5a      	subs	r2, r3, #1
 8013c04:	4193      	sbcs	r3, r2
 8013c06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013c08:	18d3      	adds	r3, r2, r3
 8013c0a:	9318      	str	r3, [sp, #96]	; 0x60
 8013c0c:	2302      	movs	r3, #2
 8013c0e:	4033      	ands	r3, r6
 8013c10:	9320      	str	r3, [sp, #128]	; 0x80
 8013c12:	d002      	beq.n	8013c1a <_svfprintf_r+0x35a>
 8013c14:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013c16:	3302      	adds	r3, #2
 8013c18:	9318      	str	r3, [sp, #96]	; 0x60
 8013c1a:	2384      	movs	r3, #132	; 0x84
 8013c1c:	4033      	ands	r3, r6
 8013c1e:	9321      	str	r3, [sp, #132]	; 0x84
 8013c20:	d121      	bne.n	8013c66 <_svfprintf_r+0x3a6>
 8013c22:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013c24:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013c26:	1a9c      	subs	r4, r3, r2
 8013c28:	2c00      	cmp	r4, #0
 8013c2a:	dd1c      	ble.n	8013c66 <_svfprintf_r+0x3a6>
 8013c2c:	0039      	movs	r1, r7
 8013c2e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013c30:	485d      	ldr	r0, [pc, #372]	; (8013da8 <_svfprintf_r+0x4e8>)
 8013c32:	9322      	str	r3, [sp, #136]	; 0x88
 8013c34:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013c36:	3301      	adds	r3, #1
 8013c38:	3108      	adds	r1, #8
 8013c3a:	6038      	str	r0, [r7, #0]
 8013c3c:	2c10      	cmp	r4, #16
 8013c3e:	dd01      	ble.n	8013c44 <_svfprintf_r+0x384>
 8013c40:	f000 fd08 	bl	8014654 <_svfprintf_r+0xd94>
 8013c44:	607c      	str	r4, [r7, #4]
 8013c46:	18a4      	adds	r4, r4, r2
 8013c48:	942e      	str	r4, [sp, #184]	; 0xb8
 8013c4a:	932d      	str	r3, [sp, #180]	; 0xb4
 8013c4c:	000f      	movs	r7, r1
 8013c4e:	2b07      	cmp	r3, #7
 8013c50:	dd09      	ble.n	8013c66 <_svfprintf_r+0x3a6>
 8013c52:	aa2c      	add	r2, sp, #176	; 0xb0
 8013c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013c58:	f002 ff86 	bl	8016b68 <__ssprint_r>
 8013c5c:	2800      	cmp	r0, #0
 8013c5e:	d001      	beq.n	8013c64 <_svfprintf_r+0x3a4>
 8013c60:	f001 f852 	bl	8014d08 <_svfprintf_r+0x1448>
 8013c64:	af2f      	add	r7, sp, #188	; 0xbc
 8013c66:	231b      	movs	r3, #27
 8013c68:	aa1e      	add	r2, sp, #120	; 0x78
 8013c6a:	189b      	adds	r3, r3, r2
 8013c6c:	781a      	ldrb	r2, [r3, #0]
 8013c6e:	2a00      	cmp	r2, #0
 8013c70:	d017      	beq.n	8013ca2 <_svfprintf_r+0x3e2>
 8013c72:	603b      	str	r3, [r7, #0]
 8013c74:	2301      	movs	r3, #1
 8013c76:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013c78:	607b      	str	r3, [r7, #4]
 8013c7a:	0013      	movs	r3, r2
 8013c7c:	3301      	adds	r3, #1
 8013c7e:	932e      	str	r3, [sp, #184]	; 0xb8
 8013c80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013c82:	3708      	adds	r7, #8
 8013c84:	9322      	str	r3, [sp, #136]	; 0x88
 8013c86:	3301      	adds	r3, #1
 8013c88:	932d      	str	r3, [sp, #180]	; 0xb4
 8013c8a:	2b07      	cmp	r3, #7
 8013c8c:	dd09      	ble.n	8013ca2 <_svfprintf_r+0x3e2>
 8013c8e:	aa2c      	add	r2, sp, #176	; 0xb0
 8013c90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013c94:	f002 ff68 	bl	8016b68 <__ssprint_r>
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	d001      	beq.n	8013ca0 <_svfprintf_r+0x3e0>
 8013c9c:	f001 f834 	bl	8014d08 <_svfprintf_r+0x1448>
 8013ca0:	af2f      	add	r7, sp, #188	; 0xbc
 8013ca2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d019      	beq.n	8013cdc <_svfprintf_r+0x41c>
 8013ca8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013caa:	9320      	str	r3, [sp, #128]	; 0x80
 8013cac:	ab25      	add	r3, sp, #148	; 0x94
 8013cae:	603b      	str	r3, [r7, #0]
 8013cb0:	2302      	movs	r3, #2
 8013cb2:	607b      	str	r3, [r7, #4]
 8013cb4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013cb6:	3708      	adds	r7, #8
 8013cb8:	3302      	adds	r3, #2
 8013cba:	932e      	str	r3, [sp, #184]	; 0xb8
 8013cbc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013cbe:	9320      	str	r3, [sp, #128]	; 0x80
 8013cc0:	3301      	adds	r3, #1
 8013cc2:	932d      	str	r3, [sp, #180]	; 0xb4
 8013cc4:	2b07      	cmp	r3, #7
 8013cc6:	dd09      	ble.n	8013cdc <_svfprintf_r+0x41c>
 8013cc8:	aa2c      	add	r2, sp, #176	; 0xb0
 8013cca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013ccc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013cce:	f002 ff4b 	bl	8016b68 <__ssprint_r>
 8013cd2:	2800      	cmp	r0, #0
 8013cd4:	d001      	beq.n	8013cda <_svfprintf_r+0x41a>
 8013cd6:	f001 f817 	bl	8014d08 <_svfprintf_r+0x1448>
 8013cda:	af2f      	add	r7, sp, #188	; 0xbc
 8013cdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013cde:	2b80      	cmp	r3, #128	; 0x80
 8013ce0:	d121      	bne.n	8013d26 <_svfprintf_r+0x466>
 8013ce2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013ce4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013ce6:	1a9c      	subs	r4, r3, r2
 8013ce8:	2c00      	cmp	r4, #0
 8013cea:	dd1c      	ble.n	8013d26 <_svfprintf_r+0x466>
 8013cec:	0039      	movs	r1, r7
 8013cee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013cf0:	482e      	ldr	r0, [pc, #184]	; (8013dac <_svfprintf_r+0x4ec>)
 8013cf2:	9320      	str	r3, [sp, #128]	; 0x80
 8013cf4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013cf6:	3301      	adds	r3, #1
 8013cf8:	3108      	adds	r1, #8
 8013cfa:	6038      	str	r0, [r7, #0]
 8013cfc:	2c10      	cmp	r4, #16
 8013cfe:	dd01      	ble.n	8013d04 <_svfprintf_r+0x444>
 8013d00:	f000 fcbc 	bl	801467c <_svfprintf_r+0xdbc>
 8013d04:	607c      	str	r4, [r7, #4]
 8013d06:	18a4      	adds	r4, r4, r2
 8013d08:	942e      	str	r4, [sp, #184]	; 0xb8
 8013d0a:	932d      	str	r3, [sp, #180]	; 0xb4
 8013d0c:	000f      	movs	r7, r1
 8013d0e:	2b07      	cmp	r3, #7
 8013d10:	dd09      	ble.n	8013d26 <_svfprintf_r+0x466>
 8013d12:	aa2c      	add	r2, sp, #176	; 0xb0
 8013d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013d18:	f002 ff26 	bl	8016b68 <__ssprint_r>
 8013d1c:	2800      	cmp	r0, #0
 8013d1e:	d001      	beq.n	8013d24 <_svfprintf_r+0x464>
 8013d20:	f000 fff2 	bl	8014d08 <_svfprintf_r+0x1448>
 8013d24:	af2f      	add	r7, sp, #188	; 0xbc
 8013d26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d28:	9a08      	ldr	r2, [sp, #32]
 8013d2a:	1a9c      	subs	r4, r3, r2
 8013d2c:	2c00      	cmp	r4, #0
 8013d2e:	dd1c      	ble.n	8013d6a <_svfprintf_r+0x4aa>
 8013d30:	0039      	movs	r1, r7
 8013d32:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013d34:	481d      	ldr	r0, [pc, #116]	; (8013dac <_svfprintf_r+0x4ec>)
 8013d36:	9317      	str	r3, [sp, #92]	; 0x5c
 8013d38:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013d3a:	3301      	adds	r3, #1
 8013d3c:	3108      	adds	r1, #8
 8013d3e:	6038      	str	r0, [r7, #0]
 8013d40:	2c10      	cmp	r4, #16
 8013d42:	dd01      	ble.n	8013d48 <_svfprintf_r+0x488>
 8013d44:	f000 fcb4 	bl	80146b0 <_svfprintf_r+0xdf0>
 8013d48:	18a2      	adds	r2, r4, r2
 8013d4a:	607c      	str	r4, [r7, #4]
 8013d4c:	922e      	str	r2, [sp, #184]	; 0xb8
 8013d4e:	932d      	str	r3, [sp, #180]	; 0xb4
 8013d50:	000f      	movs	r7, r1
 8013d52:	2b07      	cmp	r3, #7
 8013d54:	dd09      	ble.n	8013d6a <_svfprintf_r+0x4aa>
 8013d56:	aa2c      	add	r2, sp, #176	; 0xb0
 8013d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d5a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013d5c:	f002 ff04 	bl	8016b68 <__ssprint_r>
 8013d60:	2800      	cmp	r0, #0
 8013d62:	d001      	beq.n	8013d68 <_svfprintf_r+0x4a8>
 8013d64:	f000 ffd0 	bl	8014d08 <_svfprintf_r+0x1448>
 8013d68:	af2f      	add	r7, sp, #188	; 0xbc
 8013d6a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013d6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8013d6e:	05f3      	lsls	r3, r6, #23
 8013d70:	d501      	bpl.n	8013d76 <_svfprintf_r+0x4b6>
 8013d72:	f000 fcb1 	bl	80146d8 <_svfprintf_r+0xe18>
 8013d76:	9a08      	ldr	r2, [sp, #32]
 8013d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d7a:	4694      	mov	ip, r2
 8013d7c:	603b      	str	r3, [r7, #0]
 8013d7e:	9b08      	ldr	r3, [sp, #32]
 8013d80:	607b      	str	r3, [r7, #4]
 8013d82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d84:	4463      	add	r3, ip
 8013d86:	932e      	str	r3, [sp, #184]	; 0xb8
 8013d88:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013d8a:	9308      	str	r3, [sp, #32]
 8013d8c:	3301      	adds	r3, #1
 8013d8e:	932d      	str	r3, [sp, #180]	; 0xb4
 8013d90:	2b07      	cmp	r3, #7
 8013d92:	dd01      	ble.n	8013d98 <_svfprintf_r+0x4d8>
 8013d94:	f000 fd94 	bl	80148c0 <_svfprintf_r+0x1000>
 8013d98:	3708      	adds	r7, #8
 8013d9a:	f000 fce4 	bl	8014766 <_svfprintf_r+0xea6>
 8013d9e:	46c0      	nop			; (mov r8, r8)
 8013da0:	08019ef9 	.word	0x08019ef9
 8013da4:	fffffbff 	.word	0xfffffbff
 8013da8:	08019f0c 	.word	0x08019f0c
 8013dac:	08019f1c 	.word	0x08019f1c
 8013db0:	2310      	movs	r3, #16
 8013db2:	431e      	orrs	r6, r3
 8013db4:	06b3      	lsls	r3, r6, #26
 8013db6:	d52c      	bpl.n	8013e12 <_svfprintf_r+0x552>
 8013db8:	2307      	movs	r3, #7
 8013dba:	3407      	adds	r4, #7
 8013dbc:	439c      	bics	r4, r3
 8013dbe:	0023      	movs	r3, r4
 8013dc0:	3308      	adds	r3, #8
 8013dc2:	9312      	str	r3, [sp, #72]	; 0x48
 8013dc4:	6823      	ldr	r3, [r4, #0]
 8013dc6:	6864      	ldr	r4, [r4, #4]
 8013dc8:	9306      	str	r3, [sp, #24]
 8013dca:	9407      	str	r4, [sp, #28]
 8013dcc:	9b07      	ldr	r3, [sp, #28]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	da0b      	bge.n	8013dea <_svfprintf_r+0x52a>
 8013dd2:	9906      	ldr	r1, [sp, #24]
 8013dd4:	9a07      	ldr	r2, [sp, #28]
 8013dd6:	2400      	movs	r4, #0
 8013dd8:	424b      	negs	r3, r1
 8013dda:	4194      	sbcs	r4, r2
 8013ddc:	9306      	str	r3, [sp, #24]
 8013dde:	9407      	str	r4, [sp, #28]
 8013de0:	231b      	movs	r3, #27
 8013de2:	aa1e      	add	r2, sp, #120	; 0x78
 8013de4:	189b      	adds	r3, r3, r2
 8013de6:	222d      	movs	r2, #45	; 0x2d
 8013de8:	701a      	strb	r2, [r3, #0]
 8013dea:	9b08      	ldr	r3, [sp, #32]
 8013dec:	3301      	adds	r3, #1
 8013dee:	d000      	beq.n	8013df2 <_svfprintf_r+0x532>
 8013df0:	e382      	b.n	80144f8 <_svfprintf_r+0xc38>
 8013df2:	9b07      	ldr	r3, [sp, #28]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d000      	beq.n	8013dfa <_svfprintf_r+0x53a>
 8013df8:	e3b0      	b.n	801455c <_svfprintf_r+0xc9c>
 8013dfa:	9b06      	ldr	r3, [sp, #24]
 8013dfc:	2b09      	cmp	r3, #9
 8013dfe:	d900      	bls.n	8013e02 <_svfprintf_r+0x542>
 8013e00:	e3ac      	b.n	801455c <_svfprintf_r+0xc9c>
 8013e02:	23e7      	movs	r3, #231	; 0xe7
 8013e04:	aa1e      	add	r2, sp, #120	; 0x78
 8013e06:	189b      	adds	r3, r3, r2
 8013e08:	9a06      	ldr	r2, [sp, #24]
 8013e0a:	3230      	adds	r2, #48	; 0x30
 8013e0c:	701a      	strb	r2, [r3, #0]
 8013e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8013e10:	e395      	b.n	801453e <_svfprintf_r+0xc7e>
 8013e12:	1d23      	adds	r3, r4, #4
 8013e14:	9312      	str	r3, [sp, #72]	; 0x48
 8013e16:	06f3      	lsls	r3, r6, #27
 8013e18:	d504      	bpl.n	8013e24 <_svfprintf_r+0x564>
 8013e1a:	6823      	ldr	r3, [r4, #0]
 8013e1c:	9306      	str	r3, [sp, #24]
 8013e1e:	17db      	asrs	r3, r3, #31
 8013e20:	9307      	str	r3, [sp, #28]
 8013e22:	e7d3      	b.n	8013dcc <_svfprintf_r+0x50c>
 8013e24:	6823      	ldr	r3, [r4, #0]
 8013e26:	0672      	lsls	r2, r6, #25
 8013e28:	d501      	bpl.n	8013e2e <_svfprintf_r+0x56e>
 8013e2a:	b21b      	sxth	r3, r3
 8013e2c:	e7f6      	b.n	8013e1c <_svfprintf_r+0x55c>
 8013e2e:	05b2      	lsls	r2, r6, #22
 8013e30:	d5f4      	bpl.n	8013e1c <_svfprintf_r+0x55c>
 8013e32:	b25b      	sxtb	r3, r3
 8013e34:	e7f2      	b.n	8013e1c <_svfprintf_r+0x55c>
 8013e36:	2307      	movs	r3, #7
 8013e38:	3407      	adds	r4, #7
 8013e3a:	439c      	bics	r4, r3
 8013e3c:	0023      	movs	r3, r4
 8013e3e:	2201      	movs	r2, #1
 8013e40:	3308      	adds	r3, #8
 8013e42:	9312      	str	r3, [sp, #72]	; 0x48
 8013e44:	6823      	ldr	r3, [r4, #0]
 8013e46:	4252      	negs	r2, r2
 8013e48:	931a      	str	r3, [sp, #104]	; 0x68
 8013e4a:	6863      	ldr	r3, [r4, #4]
 8013e4c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013e4e:	005c      	lsls	r4, r3, #1
 8013e50:	0864      	lsrs	r4, r4, #1
 8013e52:	9319      	str	r3, [sp, #100]	; 0x64
 8013e54:	0028      	movs	r0, r5
 8013e56:	4bcf      	ldr	r3, [pc, #828]	; (8014194 <_svfprintf_r+0x8d4>)
 8013e58:	0021      	movs	r1, r4
 8013e5a:	f7ee fda5 	bl	80029a8 <__aeabi_dcmpun>
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	d125      	bne.n	8013eae <_svfprintf_r+0x5ee>
 8013e62:	2201      	movs	r2, #1
 8013e64:	4bcb      	ldr	r3, [pc, #812]	; (8014194 <_svfprintf_r+0x8d4>)
 8013e66:	4252      	negs	r2, r2
 8013e68:	0028      	movs	r0, r5
 8013e6a:	0021      	movs	r1, r4
 8013e6c:	f7ec fb06 	bl	800047c <__aeabi_dcmple>
 8013e70:	2800      	cmp	r0, #0
 8013e72:	d11c      	bne.n	8013eae <_svfprintf_r+0x5ee>
 8013e74:	2200      	movs	r2, #0
 8013e76:	2300      	movs	r3, #0
 8013e78:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013e7a:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013e7c:	f7ec faf4 	bl	8000468 <__aeabi_dcmplt>
 8013e80:	2800      	cmp	r0, #0
 8013e82:	d004      	beq.n	8013e8e <_svfprintf_r+0x5ce>
 8013e84:	231b      	movs	r3, #27
 8013e86:	aa1e      	add	r2, sp, #120	; 0x78
 8013e88:	189b      	adds	r3, r3, r2
 8013e8a:	222d      	movs	r2, #45	; 0x2d
 8013e8c:	701a      	strb	r2, [r3, #0]
 8013e8e:	4bc2      	ldr	r3, [pc, #776]	; (8014198 <_svfprintf_r+0x8d8>)
 8013e90:	9309      	str	r3, [sp, #36]	; 0x24
 8013e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e94:	2b47      	cmp	r3, #71	; 0x47
 8013e96:	dc01      	bgt.n	8013e9c <_svfprintf_r+0x5dc>
 8013e98:	4bc0      	ldr	r3, [pc, #768]	; (801419c <_svfprintf_r+0x8dc>)
 8013e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8013e9c:	2380      	movs	r3, #128	; 0x80
 8013e9e:	439e      	bics	r6, r3
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	930c      	str	r3, [sp, #48]	; 0x30
 8013ea4:	3303      	adds	r3, #3
 8013ea6:	9308      	str	r3, [sp, #32]
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	9317      	str	r3, [sp, #92]	; 0x5c
 8013eac:	e34f      	b.n	801454e <_svfprintf_r+0xc8e>
 8013eae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013eb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013eb2:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013eb4:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013eb6:	f7ee fd77 	bl	80029a8 <__aeabi_dcmpun>
 8013eba:	2800      	cmp	r0, #0
 8013ebc:	d00e      	beq.n	8013edc <_svfprintf_r+0x61c>
 8013ebe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	da04      	bge.n	8013ece <_svfprintf_r+0x60e>
 8013ec4:	231b      	movs	r3, #27
 8013ec6:	aa1e      	add	r2, sp, #120	; 0x78
 8013ec8:	189b      	adds	r3, r3, r2
 8013eca:	222d      	movs	r2, #45	; 0x2d
 8013ecc:	701a      	strb	r2, [r3, #0]
 8013ece:	4bb4      	ldr	r3, [pc, #720]	; (80141a0 <_svfprintf_r+0x8e0>)
 8013ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ed4:	2b47      	cmp	r3, #71	; 0x47
 8013ed6:	dce1      	bgt.n	8013e9c <_svfprintf_r+0x5dc>
 8013ed8:	4bb2      	ldr	r3, [pc, #712]	; (80141a4 <_svfprintf_r+0x8e4>)
 8013eda:	e7de      	b.n	8013e9a <_svfprintf_r+0x5da>
 8013edc:	2320      	movs	r3, #32
 8013ede:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ee0:	439a      	bics	r2, r3
 8013ee2:	920f      	str	r2, [sp, #60]	; 0x3c
 8013ee4:	2a41      	cmp	r2, #65	; 0x41
 8013ee6:	d124      	bne.n	8013f32 <_svfprintf_r+0x672>
 8013ee8:	2230      	movs	r2, #48	; 0x30
 8013eea:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013eec:	ab25      	add	r3, sp, #148	; 0x94
 8013eee:	701a      	strb	r2, [r3, #0]
 8013ef0:	3228      	adds	r2, #40	; 0x28
 8013ef2:	2961      	cmp	r1, #97	; 0x61
 8013ef4:	d100      	bne.n	8013ef8 <_svfprintf_r+0x638>
 8013ef6:	3220      	adds	r2, #32
 8013ef8:	705a      	strb	r2, [r3, #1]
 8013efa:	2302      	movs	r3, #2
 8013efc:	431e      	orrs	r6, r3
 8013efe:	9b08      	ldr	r3, [sp, #32]
 8013f00:	2b63      	cmp	r3, #99	; 0x63
 8013f02:	dc00      	bgt.n	8013f06 <_svfprintf_r+0x646>
 8013f04:	e09e      	b.n	8014044 <_svfprintf_r+0x784>
 8013f06:	1c59      	adds	r1, r3, #1
 8013f08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f0a:	f7fe f913 	bl	8012134 <_malloc_r>
 8013f0e:	9009      	str	r0, [sp, #36]	; 0x24
 8013f10:	2800      	cmp	r0, #0
 8013f12:	d000      	beq.n	8013f16 <_svfprintf_r+0x656>
 8013f14:	e09b      	b.n	801404e <_svfprintf_r+0x78e>
 8013f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f18:	899a      	ldrh	r2, [r3, #12]
 8013f1a:	2340      	movs	r3, #64	; 0x40
 8013f1c:	4313      	orrs	r3, r2
 8013f1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f20:	8193      	strh	r3, [r2, #12]
 8013f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f24:	899b      	ldrh	r3, [r3, #12]
 8013f26:	065b      	lsls	r3, r3, #25
 8013f28:	d400      	bmi.n	8013f2c <_svfprintf_r+0x66c>
 8013f2a:	e4ee      	b.n	801390a <_svfprintf_r+0x4a>
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	425b      	negs	r3, r3
 8013f30:	e4ea      	b.n	8013908 <_svfprintf_r+0x48>
 8013f32:	9b08      	ldr	r3, [sp, #32]
 8013f34:	900c      	str	r0, [sp, #48]	; 0x30
 8013f36:	3301      	adds	r3, #1
 8013f38:	d100      	bne.n	8013f3c <_svfprintf_r+0x67c>
 8013f3a:	e08b      	b.n	8014054 <_svfprintf_r+0x794>
 8013f3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f3e:	2b47      	cmp	r3, #71	; 0x47
 8013f40:	d103      	bne.n	8013f4a <_svfprintf_r+0x68a>
 8013f42:	9b08      	ldr	r3, [sp, #32]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d100      	bne.n	8013f4a <_svfprintf_r+0x68a>
 8013f48:	e087      	b.n	801405a <_svfprintf_r+0x79a>
 8013f4a:	2380      	movs	r3, #128	; 0x80
 8013f4c:	005b      	lsls	r3, r3, #1
 8013f4e:	4333      	orrs	r3, r6
 8013f50:	9320      	str	r3, [sp, #128]	; 0x80
 8013f52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013f54:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	db00      	blt.n	8013f5c <_svfprintf_r+0x69c>
 8013f5a:	e082      	b.n	8014062 <_svfprintf_r+0x7a2>
 8013f5c:	2280      	movs	r2, #128	; 0x80
 8013f5e:	0612      	lsls	r2, r2, #24
 8013f60:	4694      	mov	ip, r2
 8013f62:	4463      	add	r3, ip
 8013f64:	930d      	str	r3, [sp, #52]	; 0x34
 8013f66:	232d      	movs	r3, #45	; 0x2d
 8013f68:	9322      	str	r3, [sp, #136]	; 0x88
 8013f6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f6c:	2b41      	cmp	r3, #65	; 0x41
 8013f6e:	d000      	beq.n	8013f72 <_svfprintf_r+0x6b2>
 8013f70:	e105      	b.n	801417e <_svfprintf_r+0x8be>
 8013f72:	aa26      	add	r2, sp, #152	; 0x98
 8013f74:	0020      	movs	r0, r4
 8013f76:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013f78:	f002 fdc4 	bl	8016b04 <frexp>
 8013f7c:	23ff      	movs	r3, #255	; 0xff
 8013f7e:	2200      	movs	r2, #0
 8013f80:	059b      	lsls	r3, r3, #22
 8013f82:	f7ed ff57 	bl	8001e34 <__aeabi_dmul>
 8013f86:	2200      	movs	r2, #0
 8013f88:	2300      	movs	r3, #0
 8013f8a:	0004      	movs	r4, r0
 8013f8c:	000d      	movs	r5, r1
 8013f8e:	f7ec fa65 	bl	800045c <__aeabi_dcmpeq>
 8013f92:	2800      	cmp	r0, #0
 8013f94:	d001      	beq.n	8013f9a <_svfprintf_r+0x6da>
 8013f96:	2301      	movs	r3, #1
 8013f98:	9326      	str	r3, [sp, #152]	; 0x98
 8013f9a:	4b83      	ldr	r3, [pc, #524]	; (80141a8 <_svfprintf_r+0x8e8>)
 8013f9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8013f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fa0:	2b61      	cmp	r3, #97	; 0x61
 8013fa2:	d101      	bne.n	8013fa8 <_svfprintf_r+0x6e8>
 8013fa4:	4b81      	ldr	r3, [pc, #516]	; (80141ac <_svfprintf_r+0x8ec>)
 8013fa6:	9317      	str	r3, [sp, #92]	; 0x5c
 8013fa8:	9b08      	ldr	r3, [sp, #32]
 8013faa:	3b01      	subs	r3, #1
 8013fac:	9310      	str	r3, [sp, #64]	; 0x40
 8013fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fb0:	9318      	str	r3, [sp, #96]	; 0x60
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	4b7e      	ldr	r3, [pc, #504]	; (80141b0 <_svfprintf_r+0x8f0>)
 8013fb6:	0020      	movs	r0, r4
 8013fb8:	0029      	movs	r1, r5
 8013fba:	f7ed ff3b 	bl	8001e34 <__aeabi_dmul>
 8013fbe:	000d      	movs	r5, r1
 8013fc0:	0004      	movs	r4, r0
 8013fc2:	f7ee fd0d 	bl	80029e0 <__aeabi_d2iz>
 8013fc6:	9021      	str	r0, [sp, #132]	; 0x84
 8013fc8:	f7ee fd40 	bl	8002a4c <__aeabi_i2d>
 8013fcc:	0002      	movs	r2, r0
 8013fce:	000b      	movs	r3, r1
 8013fd0:	0020      	movs	r0, r4
 8013fd2:	0029      	movs	r1, r5
 8013fd4:	f7ee f9a0 	bl	8002318 <__aeabi_dsub>
 8013fd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013fda:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013fdc:	3301      	adds	r3, #1
 8013fde:	930d      	str	r3, [sp, #52]	; 0x34
 8013fe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013fe2:	0004      	movs	r4, r0
 8013fe4:	5c9b      	ldrb	r3, [r3, r2]
 8013fe6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013fe8:	000d      	movs	r5, r1
 8013fea:	7013      	strb	r3, [r2, #0]
 8013fec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013fee:	9323      	str	r3, [sp, #140]	; 0x8c
 8013ff0:	3301      	adds	r3, #1
 8013ff2:	d00a      	beq.n	801400a <_svfprintf_r+0x74a>
 8013ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	3b01      	subs	r3, #1
 8013ffa:	9310      	str	r3, [sp, #64]	; 0x40
 8013ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ffe:	9318      	str	r3, [sp, #96]	; 0x60
 8014000:	2300      	movs	r3, #0
 8014002:	f7ec fa2b 	bl	800045c <__aeabi_dcmpeq>
 8014006:	2800      	cmp	r0, #0
 8014008:	d0d3      	beq.n	8013fb2 <_svfprintf_r+0x6f2>
 801400a:	2200      	movs	r2, #0
 801400c:	4b69      	ldr	r3, [pc, #420]	; (80141b4 <_svfprintf_r+0x8f4>)
 801400e:	0020      	movs	r0, r4
 8014010:	0029      	movs	r1, r5
 8014012:	f7ec fa3d 	bl	8000490 <__aeabi_dcmpgt>
 8014016:	2800      	cmp	r0, #0
 8014018:	d126      	bne.n	8014068 <_svfprintf_r+0x7a8>
 801401a:	2200      	movs	r2, #0
 801401c:	4b65      	ldr	r3, [pc, #404]	; (80141b4 <_svfprintf_r+0x8f4>)
 801401e:	0020      	movs	r0, r4
 8014020:	0029      	movs	r1, r5
 8014022:	f7ec fa1b 	bl	800045c <__aeabi_dcmpeq>
 8014026:	2800      	cmp	r0, #0
 8014028:	d002      	beq.n	8014030 <_svfprintf_r+0x770>
 801402a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801402c:	07db      	lsls	r3, r3, #31
 801402e:	d41b      	bmi.n	8014068 <_svfprintf_r+0x7a8>
 8014030:	2130      	movs	r1, #48	; 0x30
 8014032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014034:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014036:	1898      	adds	r0, r3, r2
 8014038:	930d      	str	r3, [sp, #52]	; 0x34
 801403a:	1ac2      	subs	r2, r0, r3
 801403c:	d426      	bmi.n	801408c <_svfprintf_r+0x7cc>
 801403e:	7019      	strb	r1, [r3, #0]
 8014040:	3301      	adds	r3, #1
 8014042:	e7f9      	b.n	8014038 <_svfprintf_r+0x778>
 8014044:	2300      	movs	r3, #0
 8014046:	930c      	str	r3, [sp, #48]	; 0x30
 8014048:	ab3f      	add	r3, sp, #252	; 0xfc
 801404a:	9309      	str	r3, [sp, #36]	; 0x24
 801404c:	e77d      	b.n	8013f4a <_svfprintf_r+0x68a>
 801404e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014050:	930c      	str	r3, [sp, #48]	; 0x30
 8014052:	e77a      	b.n	8013f4a <_svfprintf_r+0x68a>
 8014054:	2306      	movs	r3, #6
 8014056:	9308      	str	r3, [sp, #32]
 8014058:	e777      	b.n	8013f4a <_svfprintf_r+0x68a>
 801405a:	9b08      	ldr	r3, [sp, #32]
 801405c:	930c      	str	r3, [sp, #48]	; 0x30
 801405e:	2301      	movs	r3, #1
 8014060:	e7f9      	b.n	8014056 <_svfprintf_r+0x796>
 8014062:	930d      	str	r3, [sp, #52]	; 0x34
 8014064:	2300      	movs	r3, #0
 8014066:	e77f      	b.n	8013f68 <_svfprintf_r+0x6a8>
 8014068:	2030      	movs	r0, #48	; 0x30
 801406a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801406c:	932a      	str	r3, [sp, #168]	; 0xa8
 801406e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014070:	7bda      	ldrb	r2, [r3, #15]
 8014072:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014074:	3b01      	subs	r3, #1
 8014076:	932a      	str	r3, [sp, #168]	; 0xa8
 8014078:	7819      	ldrb	r1, [r3, #0]
 801407a:	4291      	cmp	r1, r2
 801407c:	d07d      	beq.n	801417a <_svfprintf_r+0x8ba>
 801407e:	1c4a      	adds	r2, r1, #1
 8014080:	b2d2      	uxtb	r2, r2
 8014082:	2939      	cmp	r1, #57	; 0x39
 8014084:	d101      	bne.n	801408a <_svfprintf_r+0x7ca>
 8014086:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014088:	7a92      	ldrb	r2, [r2, #10]
 801408a:	701a      	strb	r2, [r3, #0]
 801408c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801408e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014090:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8014092:	1a9b      	subs	r3, r3, r2
 8014094:	930d      	str	r3, [sp, #52]	; 0x34
 8014096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014098:	2b47      	cmp	r3, #71	; 0x47
 801409a:	d000      	beq.n	801409e <_svfprintf_r+0x7de>
 801409c:	e0d2      	b.n	8014244 <_svfprintf_r+0x984>
 801409e:	1ceb      	adds	r3, r5, #3
 80140a0:	db03      	blt.n	80140aa <_svfprintf_r+0x7ea>
 80140a2:	9b08      	ldr	r3, [sp, #32]
 80140a4:	42ab      	cmp	r3, r5
 80140a6:	db00      	blt.n	80140aa <_svfprintf_r+0x7ea>
 80140a8:	e0fd      	b.n	80142a6 <_svfprintf_r+0x9e6>
 80140aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140ac:	3b02      	subs	r3, #2
 80140ae:	930e      	str	r3, [sp, #56]	; 0x38
 80140b0:	2238      	movs	r2, #56	; 0x38
 80140b2:	466b      	mov	r3, sp
 80140b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80140b6:	189b      	adds	r3, r3, r2
 80140b8:	3a18      	subs	r2, #24
 80140ba:	4391      	bics	r1, r2
 80140bc:	1e6c      	subs	r4, r5, #1
 80140be:	000a      	movs	r2, r1
 80140c0:	9426      	str	r4, [sp, #152]	; 0x98
 80140c2:	781b      	ldrb	r3, [r3, #0]
 80140c4:	2100      	movs	r1, #0
 80140c6:	2a41      	cmp	r2, #65	; 0x41
 80140c8:	d102      	bne.n	80140d0 <_svfprintf_r+0x810>
 80140ca:	330f      	adds	r3, #15
 80140cc:	b2db      	uxtb	r3, r3
 80140ce:	3101      	adds	r1, #1
 80140d0:	aa28      	add	r2, sp, #160	; 0xa0
 80140d2:	7013      	strb	r3, [r2, #0]
 80140d4:	232b      	movs	r3, #43	; 0x2b
 80140d6:	2c00      	cmp	r4, #0
 80140d8:	da02      	bge.n	80140e0 <_svfprintf_r+0x820>
 80140da:	2401      	movs	r4, #1
 80140dc:	232d      	movs	r3, #45	; 0x2d
 80140de:	1b64      	subs	r4, r4, r5
 80140e0:	7053      	strb	r3, [r2, #1]
 80140e2:	2c09      	cmp	r4, #9
 80140e4:	dc00      	bgt.n	80140e8 <_svfprintf_r+0x828>
 80140e6:	e0c7      	b.n	8014278 <_svfprintf_r+0x9b8>
 80140e8:	2537      	movs	r5, #55	; 0x37
 80140ea:	ab1e      	add	r3, sp, #120	; 0x78
 80140ec:	18ed      	adds	r5, r5, r3
 80140ee:	1e6b      	subs	r3, r5, #1
 80140f0:	0020      	movs	r0, r4
 80140f2:	210a      	movs	r1, #10
 80140f4:	9308      	str	r3, [sp, #32]
 80140f6:	f7ec f99b 	bl	8000430 <__aeabi_idivmod>
 80140fa:	1e6b      	subs	r3, r5, #1
 80140fc:	3130      	adds	r1, #48	; 0x30
 80140fe:	7019      	strb	r1, [r3, #0]
 8014100:	0020      	movs	r0, r4
 8014102:	210a      	movs	r1, #10
 8014104:	f7ec f8ae 	bl	8000264 <__divsi3>
 8014108:	0004      	movs	r4, r0
 801410a:	2809      	cmp	r0, #9
 801410c:	dd00      	ble.n	8014110 <_svfprintf_r+0x850>
 801410e:	e0ac      	b.n	801426a <_svfprintf_r+0x9aa>
 8014110:	232a      	movs	r3, #42	; 0x2a
 8014112:	2137      	movs	r1, #55	; 0x37
 8014114:	aa1e      	add	r2, sp, #120	; 0x78
 8014116:	3d02      	subs	r5, #2
 8014118:	3430      	adds	r4, #48	; 0x30
 801411a:	702c      	strb	r4, [r5, #0]
 801411c:	189b      	adds	r3, r3, r2
 801411e:	1889      	adds	r1, r1, r2
 8014120:	001a      	movs	r2, r3
 8014122:	428d      	cmp	r5, r1
 8014124:	d200      	bcs.n	8014128 <_svfprintf_r+0x868>
 8014126:	e0a2      	b.n	801426e <_svfprintf_r+0x9ae>
 8014128:	ab28      	add	r3, sp, #160	; 0xa0
 801412a:	1ad3      	subs	r3, r2, r3
 801412c:	931d      	str	r3, [sp, #116]	; 0x74
 801412e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014132:	4694      	mov	ip, r2
 8014134:	4463      	add	r3, ip
 8014136:	9308      	str	r3, [sp, #32]
 8014138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801413a:	2b01      	cmp	r3, #1
 801413c:	dc01      	bgt.n	8014142 <_svfprintf_r+0x882>
 801413e:	07f3      	lsls	r3, r6, #31
 8014140:	d504      	bpl.n	801414c <_svfprintf_r+0x88c>
 8014142:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014144:	9b08      	ldr	r3, [sp, #32]
 8014146:	4694      	mov	ip, r2
 8014148:	4463      	add	r3, ip
 801414a:	9308      	str	r3, [sp, #32]
 801414c:	2280      	movs	r2, #128	; 0x80
 801414e:	4b1a      	ldr	r3, [pc, #104]	; (80141b8 <_svfprintf_r+0x8f8>)
 8014150:	0052      	lsls	r2, r2, #1
 8014152:	4033      	ands	r3, r6
 8014154:	431a      	orrs	r2, r3
 8014156:	2300      	movs	r3, #0
 8014158:	001d      	movs	r5, r3
 801415a:	9220      	str	r2, [sp, #128]	; 0x80
 801415c:	9310      	str	r3, [sp, #64]	; 0x40
 801415e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014160:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014162:	2b00      	cmp	r3, #0
 8014164:	d100      	bne.n	8014168 <_svfprintf_r+0x8a8>
 8014166:	e270      	b.n	801464a <_svfprintf_r+0xd8a>
 8014168:	231b      	movs	r3, #27
 801416a:	aa1e      	add	r2, sp, #120	; 0x78
 801416c:	189b      	adds	r3, r3, r2
 801416e:	222d      	movs	r2, #45	; 0x2d
 8014170:	701a      	strb	r2, [r3, #0]
 8014172:	2300      	movs	r3, #0
 8014174:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014176:	9317      	str	r3, [sp, #92]	; 0x5c
 8014178:	e539      	b.n	8013bee <_svfprintf_r+0x32e>
 801417a:	7018      	strb	r0, [r3, #0]
 801417c:	e779      	b.n	8014072 <_svfprintf_r+0x7b2>
 801417e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014180:	2b46      	cmp	r3, #70	; 0x46
 8014182:	d01b      	beq.n	80141bc <_svfprintf_r+0x8fc>
 8014184:	9d08      	ldr	r5, [sp, #32]
 8014186:	2b45      	cmp	r3, #69	; 0x45
 8014188:	d101      	bne.n	801418e <_svfprintf_r+0x8ce>
 801418a:	9b08      	ldr	r3, [sp, #32]
 801418c:	1c5d      	adds	r5, r3, #1
 801418e:	2302      	movs	r3, #2
 8014190:	e016      	b.n	80141c0 <_svfprintf_r+0x900>
 8014192:	46c0      	nop			; (mov r8, r8)
 8014194:	7fefffff 	.word	0x7fefffff
 8014198:	08019edc 	.word	0x08019edc
 801419c:	08019ed8 	.word	0x08019ed8
 80141a0:	08019ee4 	.word	0x08019ee4
 80141a4:	08019ee0 	.word	0x08019ee0
 80141a8:	08019ef9 	.word	0x08019ef9
 80141ac:	08019ee8 	.word	0x08019ee8
 80141b0:	40300000 	.word	0x40300000
 80141b4:	3fe00000 	.word	0x3fe00000
 80141b8:	fffffbff 	.word	0xfffffbff
 80141bc:	2303      	movs	r3, #3
 80141be:	9d08      	ldr	r5, [sp, #32]
 80141c0:	aa2a      	add	r2, sp, #168	; 0xa8
 80141c2:	9204      	str	r2, [sp, #16]
 80141c4:	aa27      	add	r2, sp, #156	; 0x9c
 80141c6:	9203      	str	r2, [sp, #12]
 80141c8:	aa26      	add	r2, sp, #152	; 0x98
 80141ca:	9202      	str	r2, [sp, #8]
 80141cc:	9300      	str	r3, [sp, #0]
 80141ce:	9501      	str	r5, [sp, #4]
 80141d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141d2:	0022      	movs	r2, r4
 80141d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80141d6:	f000 fe79 	bl	8014ecc <_dtoa_r>
 80141da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141dc:	9009      	str	r0, [sp, #36]	; 0x24
 80141de:	2b47      	cmp	r3, #71	; 0x47
 80141e0:	d101      	bne.n	80141e6 <_svfprintf_r+0x926>
 80141e2:	07f3      	lsls	r3, r6, #31
 80141e4:	d524      	bpl.n	8014230 <_svfprintf_r+0x970>
 80141e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141e8:	195b      	adds	r3, r3, r5
 80141ea:	9310      	str	r3, [sp, #64]	; 0x40
 80141ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141ee:	2b46      	cmp	r3, #70	; 0x46
 80141f0:	d113      	bne.n	801421a <_svfprintf_r+0x95a>
 80141f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141f4:	781b      	ldrb	r3, [r3, #0]
 80141f6:	2b30      	cmp	r3, #48	; 0x30
 80141f8:	d10a      	bne.n	8014210 <_svfprintf_r+0x950>
 80141fa:	2200      	movs	r2, #0
 80141fc:	2300      	movs	r3, #0
 80141fe:	0020      	movs	r0, r4
 8014200:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014202:	f7ec f92b 	bl	800045c <__aeabi_dcmpeq>
 8014206:	2800      	cmp	r0, #0
 8014208:	d102      	bne.n	8014210 <_svfprintf_r+0x950>
 801420a:	2301      	movs	r3, #1
 801420c:	1b5d      	subs	r5, r3, r5
 801420e:	9526      	str	r5, [sp, #152]	; 0x98
 8014210:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014212:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014214:	4694      	mov	ip, r2
 8014216:	4463      	add	r3, ip
 8014218:	9310      	str	r3, [sp, #64]	; 0x40
 801421a:	2200      	movs	r2, #0
 801421c:	2300      	movs	r3, #0
 801421e:	0020      	movs	r0, r4
 8014220:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014222:	f7ec f91b 	bl	800045c <__aeabi_dcmpeq>
 8014226:	2230      	movs	r2, #48	; 0x30
 8014228:	2800      	cmp	r0, #0
 801422a:	d006      	beq.n	801423a <_svfprintf_r+0x97a>
 801422c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801422e:	932a      	str	r3, [sp, #168]	; 0xa8
 8014230:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014232:	e72c      	b.n	801408e <_svfprintf_r+0x7ce>
 8014234:	1c59      	adds	r1, r3, #1
 8014236:	912a      	str	r1, [sp, #168]	; 0xa8
 8014238:	701a      	strb	r2, [r3, #0]
 801423a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801423c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801423e:	4299      	cmp	r1, r3
 8014240:	d8f8      	bhi.n	8014234 <_svfprintf_r+0x974>
 8014242:	e7f5      	b.n	8014230 <_svfprintf_r+0x970>
 8014244:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014246:	2b46      	cmp	r3, #70	; 0x46
 8014248:	d000      	beq.n	801424c <_svfprintf_r+0x98c>
 801424a:	e731      	b.n	80140b0 <_svfprintf_r+0x7f0>
 801424c:	9b08      	ldr	r3, [sp, #32]
 801424e:	2d00      	cmp	r5, #0
 8014250:	dd21      	ble.n	8014296 <_svfprintf_r+0x9d6>
 8014252:	2b00      	cmp	r3, #0
 8014254:	d101      	bne.n	801425a <_svfprintf_r+0x99a>
 8014256:	07f3      	lsls	r3, r6, #31
 8014258:	d54a      	bpl.n	80142f0 <_svfprintf_r+0xa30>
 801425a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801425c:	18eb      	adds	r3, r5, r3
 801425e:	9a08      	ldr	r2, [sp, #32]
 8014260:	18d3      	adds	r3, r2, r3
 8014262:	9308      	str	r3, [sp, #32]
 8014264:	2366      	movs	r3, #102	; 0x66
 8014266:	930e      	str	r3, [sp, #56]	; 0x38
 8014268:	e034      	b.n	80142d4 <_svfprintf_r+0xa14>
 801426a:	9d08      	ldr	r5, [sp, #32]
 801426c:	e73f      	b.n	80140ee <_svfprintf_r+0x82e>
 801426e:	782a      	ldrb	r2, [r5, #0]
 8014270:	3501      	adds	r5, #1
 8014272:	701a      	strb	r2, [r3, #0]
 8014274:	3301      	adds	r3, #1
 8014276:	e753      	b.n	8014120 <_svfprintf_r+0x860>
 8014278:	232a      	movs	r3, #42	; 0x2a
 801427a:	aa1e      	add	r2, sp, #120	; 0x78
 801427c:	189b      	adds	r3, r3, r2
 801427e:	2900      	cmp	r1, #0
 8014280:	d105      	bne.n	801428e <_svfprintf_r+0x9ce>
 8014282:	2230      	movs	r2, #48	; 0x30
 8014284:	ab28      	add	r3, sp, #160	; 0xa0
 8014286:	709a      	strb	r2, [r3, #2]
 8014288:	232b      	movs	r3, #43	; 0x2b
 801428a:	aa1e      	add	r2, sp, #120	; 0x78
 801428c:	189b      	adds	r3, r3, r2
 801428e:	3430      	adds	r4, #48	; 0x30
 8014290:	1c5a      	adds	r2, r3, #1
 8014292:	701c      	strb	r4, [r3, #0]
 8014294:	e748      	b.n	8014128 <_svfprintf_r+0x868>
 8014296:	2b00      	cmp	r3, #0
 8014298:	d102      	bne.n	80142a0 <_svfprintf_r+0x9e0>
 801429a:	3301      	adds	r3, #1
 801429c:	421e      	tst	r6, r3
 801429e:	d029      	beq.n	80142f4 <_svfprintf_r+0xa34>
 80142a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80142a2:	3301      	adds	r3, #1
 80142a4:	e7db      	b.n	801425e <_svfprintf_r+0x99e>
 80142a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142a8:	42ab      	cmp	r3, r5
 80142aa:	dc06      	bgt.n	80142ba <_svfprintf_r+0x9fa>
 80142ac:	07f3      	lsls	r3, r6, #31
 80142ae:	d524      	bpl.n	80142fa <_svfprintf_r+0xa3a>
 80142b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80142b2:	18eb      	adds	r3, r5, r3
 80142b4:	9308      	str	r3, [sp, #32]
 80142b6:	2367      	movs	r3, #103	; 0x67
 80142b8:	e7d5      	b.n	8014266 <_svfprintf_r+0x9a6>
 80142ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80142bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142be:	4694      	mov	ip, r2
 80142c0:	4463      	add	r3, ip
 80142c2:	9308      	str	r3, [sp, #32]
 80142c4:	2367      	movs	r3, #103	; 0x67
 80142c6:	930e      	str	r3, [sp, #56]	; 0x38
 80142c8:	2d00      	cmp	r5, #0
 80142ca:	dc03      	bgt.n	80142d4 <_svfprintf_r+0xa14>
 80142cc:	9b08      	ldr	r3, [sp, #32]
 80142ce:	1b5b      	subs	r3, r3, r5
 80142d0:	3301      	adds	r3, #1
 80142d2:	9308      	str	r3, [sp, #32]
 80142d4:	2380      	movs	r3, #128	; 0x80
 80142d6:	00db      	lsls	r3, r3, #3
 80142d8:	401e      	ands	r6, r3
 80142da:	2300      	movs	r3, #0
 80142dc:	960f      	str	r6, [sp, #60]	; 0x3c
 80142de:	9310      	str	r3, [sp, #64]	; 0x40
 80142e0:	2e00      	cmp	r6, #0
 80142e2:	d100      	bne.n	80142e6 <_svfprintf_r+0xa26>
 80142e4:	e73c      	b.n	8014160 <_svfprintf_r+0x8a0>
 80142e6:	2d00      	cmp	r5, #0
 80142e8:	dc27      	bgt.n	801433a <_svfprintf_r+0xa7a>
 80142ea:	2300      	movs	r3, #0
 80142ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80142ee:	e737      	b.n	8014160 <_svfprintf_r+0x8a0>
 80142f0:	9508      	str	r5, [sp, #32]
 80142f2:	e7b7      	b.n	8014264 <_svfprintf_r+0x9a4>
 80142f4:	2266      	movs	r2, #102	; 0x66
 80142f6:	920e      	str	r2, [sp, #56]	; 0x38
 80142f8:	e7eb      	b.n	80142d2 <_svfprintf_r+0xa12>
 80142fa:	9508      	str	r5, [sp, #32]
 80142fc:	e7db      	b.n	80142b6 <_svfprintf_r+0x9f6>
 80142fe:	42ab      	cmp	r3, r5
 8014300:	da0e      	bge.n	8014320 <_svfprintf_r+0xa60>
 8014302:	1aed      	subs	r5, r5, r3
 8014304:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014306:	785b      	ldrb	r3, [r3, #1]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d012      	beq.n	8014332 <_svfprintf_r+0xa72>
 801430c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801430e:	3301      	adds	r3, #1
 8014310:	930f      	str	r3, [sp, #60]	; 0x3c
 8014312:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014314:	3301      	adds	r3, #1
 8014316:	9313      	str	r3, [sp, #76]	; 0x4c
 8014318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	2bff      	cmp	r3, #255	; 0xff
 801431e:	d1ee      	bne.n	80142fe <_svfprintf_r+0xa3e>
 8014320:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014324:	189b      	adds	r3, r3, r2
 8014326:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014328:	4353      	muls	r3, r2
 801432a:	9a08      	ldr	r2, [sp, #32]
 801432c:	189b      	adds	r3, r3, r2
 801432e:	9308      	str	r3, [sp, #32]
 8014330:	e716      	b.n	8014160 <_svfprintf_r+0x8a0>
 8014332:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014334:	3301      	adds	r3, #1
 8014336:	9310      	str	r3, [sp, #64]	; 0x40
 8014338:	e7ee      	b.n	8014318 <_svfprintf_r+0xa58>
 801433a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801433c:	930f      	str	r3, [sp, #60]	; 0x3c
 801433e:	e7eb      	b.n	8014318 <_svfprintf_r+0xa58>
 8014340:	0022      	movs	r2, r4
 8014342:	ca08      	ldmia	r2!, {r3}
 8014344:	9212      	str	r2, [sp, #72]	; 0x48
 8014346:	06b2      	lsls	r2, r6, #26
 8014348:	d508      	bpl.n	801435c <_svfprintf_r+0xa9c>
 801434a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801434c:	601a      	str	r2, [r3, #0]
 801434e:	17d2      	asrs	r2, r2, #31
 8014350:	605a      	str	r2, [r3, #4]
 8014352:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014354:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014356:	9309      	str	r3, [sp, #36]	; 0x24
 8014358:	f7ff faeb 	bl	8013932 <_svfprintf_r+0x72>
 801435c:	06f2      	lsls	r2, r6, #27
 801435e:	d502      	bpl.n	8014366 <_svfprintf_r+0xaa6>
 8014360:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014362:	601a      	str	r2, [r3, #0]
 8014364:	e7f5      	b.n	8014352 <_svfprintf_r+0xa92>
 8014366:	0672      	lsls	r2, r6, #25
 8014368:	d502      	bpl.n	8014370 <_svfprintf_r+0xab0>
 801436a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801436c:	801a      	strh	r2, [r3, #0]
 801436e:	e7f0      	b.n	8014352 <_svfprintf_r+0xa92>
 8014370:	05b2      	lsls	r2, r6, #22
 8014372:	d5f5      	bpl.n	8014360 <_svfprintf_r+0xaa0>
 8014374:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014376:	701a      	strb	r2, [r3, #0]
 8014378:	e7eb      	b.n	8014352 <_svfprintf_r+0xa92>
 801437a:	2310      	movs	r3, #16
 801437c:	431e      	orrs	r6, r3
 801437e:	2220      	movs	r2, #32
 8014380:	4032      	ands	r2, r6
 8014382:	d025      	beq.n	80143d0 <_svfprintf_r+0xb10>
 8014384:	2307      	movs	r3, #7
 8014386:	3407      	adds	r4, #7
 8014388:	439c      	bics	r4, r3
 801438a:	0023      	movs	r3, r4
 801438c:	3308      	adds	r3, #8
 801438e:	9312      	str	r3, [sp, #72]	; 0x48
 8014390:	6823      	ldr	r3, [r4, #0]
 8014392:	6864      	ldr	r4, [r4, #4]
 8014394:	9306      	str	r3, [sp, #24]
 8014396:	9407      	str	r4, [sp, #28]
 8014398:	4bc2      	ldr	r3, [pc, #776]	; (80146a4 <_svfprintf_r+0xde4>)
 801439a:	401e      	ands	r6, r3
 801439c:	2300      	movs	r3, #0
 801439e:	221b      	movs	r2, #27
 80143a0:	a91e      	add	r1, sp, #120	; 0x78
 80143a2:	1852      	adds	r2, r2, r1
 80143a4:	2100      	movs	r1, #0
 80143a6:	7011      	strb	r1, [r2, #0]
 80143a8:	9a08      	ldr	r2, [sp, #32]
 80143aa:	3201      	adds	r2, #1
 80143ac:	d100      	bne.n	80143b0 <_svfprintf_r+0xaf0>
 80143ae:	e0a6      	b.n	80144fe <_svfprintf_r+0xc3e>
 80143b0:	0032      	movs	r2, r6
 80143b2:	2180      	movs	r1, #128	; 0x80
 80143b4:	9807      	ldr	r0, [sp, #28]
 80143b6:	438e      	bics	r6, r1
 80143b8:	9906      	ldr	r1, [sp, #24]
 80143ba:	4301      	orrs	r1, r0
 80143bc:	d000      	beq.n	80143c0 <_svfprintf_r+0xb00>
 80143be:	e09e      	b.n	80144fe <_svfprintf_r+0xc3e>
 80143c0:	9908      	ldr	r1, [sp, #32]
 80143c2:	2900      	cmp	r1, #0
 80143c4:	d100      	bne.n	80143c8 <_svfprintf_r+0xb08>
 80143c6:	e125      	b.n	8014614 <_svfprintf_r+0xd54>
 80143c8:	2b01      	cmp	r3, #1
 80143ca:	d000      	beq.n	80143ce <_svfprintf_r+0xb0e>
 80143cc:	e09a      	b.n	8014504 <_svfprintf_r+0xc44>
 80143ce:	e518      	b.n	8013e02 <_svfprintf_r+0x542>
 80143d0:	1d23      	adds	r3, r4, #4
 80143d2:	9312      	str	r3, [sp, #72]	; 0x48
 80143d4:	2310      	movs	r3, #16
 80143d6:	4033      	ands	r3, r6
 80143d8:	d003      	beq.n	80143e2 <_svfprintf_r+0xb22>
 80143da:	6823      	ldr	r3, [r4, #0]
 80143dc:	9306      	str	r3, [sp, #24]
 80143de:	9207      	str	r2, [sp, #28]
 80143e0:	e7da      	b.n	8014398 <_svfprintf_r+0xad8>
 80143e2:	2240      	movs	r2, #64	; 0x40
 80143e4:	4032      	ands	r2, r6
 80143e6:	d004      	beq.n	80143f2 <_svfprintf_r+0xb32>
 80143e8:	6822      	ldr	r2, [r4, #0]
 80143ea:	b292      	uxth	r2, r2
 80143ec:	9206      	str	r2, [sp, #24]
 80143ee:	9307      	str	r3, [sp, #28]
 80143f0:	e7d2      	b.n	8014398 <_svfprintf_r+0xad8>
 80143f2:	2380      	movs	r3, #128	; 0x80
 80143f4:	009b      	lsls	r3, r3, #2
 80143f6:	4033      	ands	r3, r6
 80143f8:	d002      	beq.n	8014400 <_svfprintf_r+0xb40>
 80143fa:	6823      	ldr	r3, [r4, #0]
 80143fc:	b2db      	uxtb	r3, r3
 80143fe:	e7ed      	b.n	80143dc <_svfprintf_r+0xb1c>
 8014400:	6822      	ldr	r2, [r4, #0]
 8014402:	e7f3      	b.n	80143ec <_svfprintf_r+0xb2c>
 8014404:	1d23      	adds	r3, r4, #4
 8014406:	49a8      	ldr	r1, [pc, #672]	; (80146a8 <_svfprintf_r+0xde8>)
 8014408:	aa25      	add	r2, sp, #148	; 0x94
 801440a:	9312      	str	r3, [sp, #72]	; 0x48
 801440c:	6823      	ldr	r3, [r4, #0]
 801440e:	8011      	strh	r1, [r2, #0]
 8014410:	4aa6      	ldr	r2, [pc, #664]	; (80146ac <_svfprintf_r+0xdec>)
 8014412:	9306      	str	r3, [sp, #24]
 8014414:	2300      	movs	r3, #0
 8014416:	921e      	str	r2, [sp, #120]	; 0x78
 8014418:	2278      	movs	r2, #120	; 0x78
 801441a:	9307      	str	r3, [sp, #28]
 801441c:	3302      	adds	r3, #2
 801441e:	431e      	orrs	r6, r3
 8014420:	920e      	str	r2, [sp, #56]	; 0x38
 8014422:	e7bc      	b.n	801439e <_svfprintf_r+0xade>
 8014424:	1d23      	adds	r3, r4, #4
 8014426:	9312      	str	r3, [sp, #72]	; 0x48
 8014428:	6823      	ldr	r3, [r4, #0]
 801442a:	2400      	movs	r4, #0
 801442c:	9309      	str	r3, [sp, #36]	; 0x24
 801442e:	231b      	movs	r3, #27
 8014430:	aa1e      	add	r2, sp, #120	; 0x78
 8014432:	189b      	adds	r3, r3, r2
 8014434:	701c      	strb	r4, [r3, #0]
 8014436:	9b08      	ldr	r3, [sp, #32]
 8014438:	3301      	adds	r3, #1
 801443a:	d00e      	beq.n	801445a <_svfprintf_r+0xb9a>
 801443c:	9a08      	ldr	r2, [sp, #32]
 801443e:	0021      	movs	r1, r4
 8014440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014442:	f001 ff79 	bl	8016338 <memchr>
 8014446:	900c      	str	r0, [sp, #48]	; 0x30
 8014448:	42a0      	cmp	r0, r4
 801444a:	d100      	bne.n	801444e <_svfprintf_r+0xb8e>
 801444c:	e100      	b.n	8014650 <_svfprintf_r+0xd90>
 801444e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014450:	1a83      	subs	r3, r0, r2
 8014452:	9308      	str	r3, [sp, #32]
 8014454:	940c      	str	r4, [sp, #48]	; 0x30
 8014456:	0023      	movs	r3, r4
 8014458:	e527      	b.n	8013eaa <_svfprintf_r+0x5ea>
 801445a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801445c:	f7eb fe5c 	bl	8000118 <strlen>
 8014460:	9008      	str	r0, [sp, #32]
 8014462:	e7f7      	b.n	8014454 <_svfprintf_r+0xb94>
 8014464:	2310      	movs	r3, #16
 8014466:	431e      	orrs	r6, r3
 8014468:	2220      	movs	r2, #32
 801446a:	4032      	ands	r2, r6
 801446c:	d00b      	beq.n	8014486 <_svfprintf_r+0xbc6>
 801446e:	2307      	movs	r3, #7
 8014470:	3407      	adds	r4, #7
 8014472:	439c      	bics	r4, r3
 8014474:	0023      	movs	r3, r4
 8014476:	3308      	adds	r3, #8
 8014478:	9312      	str	r3, [sp, #72]	; 0x48
 801447a:	6823      	ldr	r3, [r4, #0]
 801447c:	6864      	ldr	r4, [r4, #4]
 801447e:	9306      	str	r3, [sp, #24]
 8014480:	9407      	str	r4, [sp, #28]
 8014482:	2301      	movs	r3, #1
 8014484:	e78b      	b.n	801439e <_svfprintf_r+0xade>
 8014486:	1d23      	adds	r3, r4, #4
 8014488:	9312      	str	r3, [sp, #72]	; 0x48
 801448a:	2310      	movs	r3, #16
 801448c:	4033      	ands	r3, r6
 801448e:	d003      	beq.n	8014498 <_svfprintf_r+0xbd8>
 8014490:	6823      	ldr	r3, [r4, #0]
 8014492:	9306      	str	r3, [sp, #24]
 8014494:	9207      	str	r2, [sp, #28]
 8014496:	e7f4      	b.n	8014482 <_svfprintf_r+0xbc2>
 8014498:	2240      	movs	r2, #64	; 0x40
 801449a:	4032      	ands	r2, r6
 801449c:	d004      	beq.n	80144a8 <_svfprintf_r+0xbe8>
 801449e:	6822      	ldr	r2, [r4, #0]
 80144a0:	b292      	uxth	r2, r2
 80144a2:	9206      	str	r2, [sp, #24]
 80144a4:	9307      	str	r3, [sp, #28]
 80144a6:	e7ec      	b.n	8014482 <_svfprintf_r+0xbc2>
 80144a8:	2380      	movs	r3, #128	; 0x80
 80144aa:	009b      	lsls	r3, r3, #2
 80144ac:	4033      	ands	r3, r6
 80144ae:	d002      	beq.n	80144b6 <_svfprintf_r+0xbf6>
 80144b0:	6823      	ldr	r3, [r4, #0]
 80144b2:	b2db      	uxtb	r3, r3
 80144b4:	e7ed      	b.n	8014492 <_svfprintf_r+0xbd2>
 80144b6:	6822      	ldr	r2, [r4, #0]
 80144b8:	e7f3      	b.n	80144a2 <_svfprintf_r+0xbe2>
 80144ba:	4b7c      	ldr	r3, [pc, #496]	; (80146ac <_svfprintf_r+0xdec>)
 80144bc:	f7ff fad9 	bl	8013a72 <_svfprintf_r+0x1b2>
 80144c0:	1d23      	adds	r3, r4, #4
 80144c2:	9312      	str	r3, [sp, #72]	; 0x48
 80144c4:	2310      	movs	r3, #16
 80144c6:	4033      	ands	r3, r6
 80144c8:	d004      	beq.n	80144d4 <_svfprintf_r+0xc14>
 80144ca:	6823      	ldr	r3, [r4, #0]
 80144cc:	9306      	str	r3, [sp, #24]
 80144ce:	9207      	str	r2, [sp, #28]
 80144d0:	f7ff fadf 	bl	8013a92 <_svfprintf_r+0x1d2>
 80144d4:	2240      	movs	r2, #64	; 0x40
 80144d6:	4032      	ands	r2, r6
 80144d8:	d005      	beq.n	80144e6 <_svfprintf_r+0xc26>
 80144da:	6822      	ldr	r2, [r4, #0]
 80144dc:	b292      	uxth	r2, r2
 80144de:	9206      	str	r2, [sp, #24]
 80144e0:	9307      	str	r3, [sp, #28]
 80144e2:	f7ff fad6 	bl	8013a92 <_svfprintf_r+0x1d2>
 80144e6:	2380      	movs	r3, #128	; 0x80
 80144e8:	009b      	lsls	r3, r3, #2
 80144ea:	4033      	ands	r3, r6
 80144ec:	d002      	beq.n	80144f4 <_svfprintf_r+0xc34>
 80144ee:	6823      	ldr	r3, [r4, #0]
 80144f0:	b2db      	uxtb	r3, r3
 80144f2:	e7eb      	b.n	80144cc <_svfprintf_r+0xc0c>
 80144f4:	6822      	ldr	r2, [r4, #0]
 80144f6:	e7f2      	b.n	80144de <_svfprintf_r+0xc1e>
 80144f8:	0032      	movs	r2, r6
 80144fa:	2301      	movs	r3, #1
 80144fc:	e759      	b.n	80143b2 <_svfprintf_r+0xaf2>
 80144fe:	2b01      	cmp	r3, #1
 8014500:	d100      	bne.n	8014504 <_svfprintf_r+0xc44>
 8014502:	e476      	b.n	8013df2 <_svfprintf_r+0x532>
 8014504:	2b02      	cmp	r3, #2
 8014506:	d06b      	beq.n	80145e0 <_svfprintf_r+0xd20>
 8014508:	2507      	movs	r5, #7
 801450a:	ab58      	add	r3, sp, #352	; 0x160
 801450c:	1e5a      	subs	r2, r3, #1
 801450e:	9209      	str	r2, [sp, #36]	; 0x24
 8014510:	9a06      	ldr	r2, [sp, #24]
 8014512:	1e59      	subs	r1, r3, #1
 8014514:	402a      	ands	r2, r5
 8014516:	3230      	adds	r2, #48	; 0x30
 8014518:	700a      	strb	r2, [r1, #0]
 801451a:	9907      	ldr	r1, [sp, #28]
 801451c:	074c      	lsls	r4, r1, #29
 801451e:	9906      	ldr	r1, [sp, #24]
 8014520:	08c8      	lsrs	r0, r1, #3
 8014522:	9907      	ldr	r1, [sp, #28]
 8014524:	4304      	orrs	r4, r0
 8014526:	08c9      	lsrs	r1, r1, #3
 8014528:	9107      	str	r1, [sp, #28]
 801452a:	0021      	movs	r1, r4
 801452c:	9807      	ldr	r0, [sp, #28]
 801452e:	9406      	str	r4, [sp, #24]
 8014530:	4301      	orrs	r1, r0
 8014532:	d111      	bne.n	8014558 <_svfprintf_r+0xc98>
 8014534:	07f1      	lsls	r1, r6, #31
 8014536:	d502      	bpl.n	801453e <_svfprintf_r+0xc7e>
 8014538:	3b02      	subs	r3, #2
 801453a:	2a30      	cmp	r2, #48	; 0x30
 801453c:	d173      	bne.n	8014626 <_svfprintf_r+0xd66>
 801453e:	9b08      	ldr	r3, [sp, #32]
 8014540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014542:	9317      	str	r3, [sp, #92]	; 0x5c
 8014544:	ab58      	add	r3, sp, #352	; 0x160
 8014546:	1a9b      	subs	r3, r3, r2
 8014548:	9308      	str	r3, [sp, #32]
 801454a:	2300      	movs	r3, #0
 801454c:	930c      	str	r3, [sp, #48]	; 0x30
 801454e:	9310      	str	r3, [sp, #64]	; 0x40
 8014550:	930f      	str	r3, [sp, #60]	; 0x3c
 8014552:	001d      	movs	r5, r3
 8014554:	f7ff fb4b 	bl	8013bee <_svfprintf_r+0x32e>
 8014558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801455a:	e7d7      	b.n	801450c <_svfprintf_r+0xc4c>
 801455c:	2480      	movs	r4, #128	; 0x80
 801455e:	2300      	movs	r3, #0
 8014560:	00e4      	lsls	r4, r4, #3
 8014562:	930d      	str	r3, [sp, #52]	; 0x34
 8014564:	4034      	ands	r4, r6
 8014566:	ab58      	add	r3, sp, #352	; 0x160
 8014568:	3b01      	subs	r3, #1
 801456a:	9309      	str	r3, [sp, #36]	; 0x24
 801456c:	220a      	movs	r2, #10
 801456e:	9806      	ldr	r0, [sp, #24]
 8014570:	9907      	ldr	r1, [sp, #28]
 8014572:	2300      	movs	r3, #0
 8014574:	f7eb ffda 	bl	800052c <__aeabi_uldivmod>
 8014578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801457a:	3230      	adds	r2, #48	; 0x30
 801457c:	701a      	strb	r2, [r3, #0]
 801457e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014580:	3301      	adds	r3, #1
 8014582:	930d      	str	r3, [sp, #52]	; 0x34
 8014584:	2c00      	cmp	r4, #0
 8014586:	d01d      	beq.n	80145c4 <_svfprintf_r+0xd04>
 8014588:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801458a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	429a      	cmp	r2, r3
 8014590:	d118      	bne.n	80145c4 <_svfprintf_r+0xd04>
 8014592:	2aff      	cmp	r2, #255	; 0xff
 8014594:	d016      	beq.n	80145c4 <_svfprintf_r+0xd04>
 8014596:	9b07      	ldr	r3, [sp, #28]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d102      	bne.n	80145a2 <_svfprintf_r+0xce2>
 801459c:	9b06      	ldr	r3, [sp, #24]
 801459e:	2b09      	cmp	r3, #9
 80145a0:	d910      	bls.n	80145c4 <_svfprintf_r+0xd04>
 80145a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80145a6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80145a8:	1a9b      	subs	r3, r3, r2
 80145aa:	0018      	movs	r0, r3
 80145ac:	9309      	str	r3, [sp, #36]	; 0x24
 80145ae:	f7fe fa52 	bl	8012a56 <strncpy>
 80145b2:	2200      	movs	r2, #0
 80145b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80145b6:	920d      	str	r2, [sp, #52]	; 0x34
 80145b8:	785b      	ldrb	r3, [r3, #1]
 80145ba:	1e5a      	subs	r2, r3, #1
 80145bc:	4193      	sbcs	r3, r2
 80145be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80145c0:	18d3      	adds	r3, r2, r3
 80145c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80145c4:	220a      	movs	r2, #10
 80145c6:	9806      	ldr	r0, [sp, #24]
 80145c8:	9907      	ldr	r1, [sp, #28]
 80145ca:	2300      	movs	r3, #0
 80145cc:	f7eb ffae 	bl	800052c <__aeabi_uldivmod>
 80145d0:	9006      	str	r0, [sp, #24]
 80145d2:	9107      	str	r1, [sp, #28]
 80145d4:	9b06      	ldr	r3, [sp, #24]
 80145d6:	9a07      	ldr	r2, [sp, #28]
 80145d8:	4313      	orrs	r3, r2
 80145da:	d0b0      	beq.n	801453e <_svfprintf_r+0xc7e>
 80145dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145de:	e7c3      	b.n	8014568 <_svfprintf_r+0xca8>
 80145e0:	200f      	movs	r0, #15
 80145e2:	ab58      	add	r3, sp, #352	; 0x160
 80145e4:	9309      	str	r3, [sp, #36]	; 0x24
 80145e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80145ea:	3b01      	subs	r3, #1
 80145ec:	9309      	str	r3, [sp, #36]	; 0x24
 80145ee:	9b06      	ldr	r3, [sp, #24]
 80145f0:	4003      	ands	r3, r0
 80145f2:	5cd3      	ldrb	r3, [r2, r3]
 80145f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80145f6:	7013      	strb	r3, [r2, #0]
 80145f8:	9b07      	ldr	r3, [sp, #28]
 80145fa:	0719      	lsls	r1, r3, #28
 80145fc:	9b06      	ldr	r3, [sp, #24]
 80145fe:	091a      	lsrs	r2, r3, #4
 8014600:	9b07      	ldr	r3, [sp, #28]
 8014602:	4311      	orrs	r1, r2
 8014604:	091b      	lsrs	r3, r3, #4
 8014606:	9307      	str	r3, [sp, #28]
 8014608:	000b      	movs	r3, r1
 801460a:	9a07      	ldr	r2, [sp, #28]
 801460c:	9106      	str	r1, [sp, #24]
 801460e:	4313      	orrs	r3, r2
 8014610:	d1e9      	bne.n	80145e6 <_svfprintf_r+0xd26>
 8014612:	e794      	b.n	801453e <_svfprintf_r+0xc7e>
 8014614:	a958      	add	r1, sp, #352	; 0x160
 8014616:	9109      	str	r1, [sp, #36]	; 0x24
 8014618:	2b00      	cmp	r3, #0
 801461a:	d190      	bne.n	801453e <_svfprintf_r+0xc7e>
 801461c:	07d3      	lsls	r3, r2, #31
 801461e:	d58e      	bpl.n	801453e <_svfprintf_r+0xc7e>
 8014620:	23e7      	movs	r3, #231	; 0xe7
 8014622:	aa1e      	add	r2, sp, #120	; 0x78
 8014624:	189b      	adds	r3, r3, r2
 8014626:	2230      	movs	r2, #48	; 0x30
 8014628:	f7ff fbf0 	bl	8013e0c <_svfprintf_r+0x54c>
 801462c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801462e:	2b00      	cmp	r3, #0
 8014630:	d100      	bne.n	8014634 <_svfprintf_r+0xd74>
 8014632:	e38a      	b.n	8014d4a <_svfprintf_r+0x148a>
 8014634:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014636:	ab3f      	add	r3, sp, #252	; 0xfc
 8014638:	701a      	strb	r2, [r3, #0]
 801463a:	221b      	movs	r2, #27
 801463c:	2000      	movs	r0, #0
 801463e:	a91e      	add	r1, sp, #120	; 0x78
 8014640:	1852      	adds	r2, r2, r1
 8014642:	7010      	strb	r0, [r2, #0]
 8014644:	9412      	str	r4, [sp, #72]	; 0x48
 8014646:	f7ff faca 	bl	8013bde <_svfprintf_r+0x31e>
 801464a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801464c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801464e:	e592      	b.n	8014176 <_svfprintf_r+0x8b6>
 8014650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014652:	e42a      	b.n	8013eaa <_svfprintf_r+0x5ea>
 8014654:	2010      	movs	r0, #16
 8014656:	1812      	adds	r2, r2, r0
 8014658:	6078      	str	r0, [r7, #4]
 801465a:	922e      	str	r2, [sp, #184]	; 0xb8
 801465c:	932d      	str	r3, [sp, #180]	; 0xb4
 801465e:	2b07      	cmp	r3, #7
 8014660:	dd08      	ble.n	8014674 <_svfprintf_r+0xdb4>
 8014662:	aa2c      	add	r2, sp, #176	; 0xb0
 8014664:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014666:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014668:	f002 fa7e 	bl	8016b68 <__ssprint_r>
 801466c:	2800      	cmp	r0, #0
 801466e:	d000      	beq.n	8014672 <_svfprintf_r+0xdb2>
 8014670:	e34a      	b.n	8014d08 <_svfprintf_r+0x1448>
 8014672:	a92f      	add	r1, sp, #188	; 0xbc
 8014674:	3c10      	subs	r4, #16
 8014676:	000f      	movs	r7, r1
 8014678:	f7ff fad8 	bl	8013c2c <_svfprintf_r+0x36c>
 801467c:	2010      	movs	r0, #16
 801467e:	1812      	adds	r2, r2, r0
 8014680:	6078      	str	r0, [r7, #4]
 8014682:	922e      	str	r2, [sp, #184]	; 0xb8
 8014684:	932d      	str	r3, [sp, #180]	; 0xb4
 8014686:	2b07      	cmp	r3, #7
 8014688:	dd08      	ble.n	801469c <_svfprintf_r+0xddc>
 801468a:	aa2c      	add	r2, sp, #176	; 0xb0
 801468c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801468e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014690:	f002 fa6a 	bl	8016b68 <__ssprint_r>
 8014694:	2800      	cmp	r0, #0
 8014696:	d000      	beq.n	801469a <_svfprintf_r+0xdda>
 8014698:	e336      	b.n	8014d08 <_svfprintf_r+0x1448>
 801469a:	a92f      	add	r1, sp, #188	; 0xbc
 801469c:	3c10      	subs	r4, #16
 801469e:	000f      	movs	r7, r1
 80146a0:	f7ff fb24 	bl	8013cec <_svfprintf_r+0x42c>
 80146a4:	fffffbff 	.word	0xfffffbff
 80146a8:	00007830 	.word	0x00007830
 80146ac:	08019ee8 	.word	0x08019ee8
 80146b0:	2010      	movs	r0, #16
 80146b2:	1812      	adds	r2, r2, r0
 80146b4:	6078      	str	r0, [r7, #4]
 80146b6:	922e      	str	r2, [sp, #184]	; 0xb8
 80146b8:	932d      	str	r3, [sp, #180]	; 0xb4
 80146ba:	2b07      	cmp	r3, #7
 80146bc:	dd08      	ble.n	80146d0 <_svfprintf_r+0xe10>
 80146be:	aa2c      	add	r2, sp, #176	; 0xb0
 80146c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80146c4:	f002 fa50 	bl	8016b68 <__ssprint_r>
 80146c8:	2800      	cmp	r0, #0
 80146ca:	d000      	beq.n	80146ce <_svfprintf_r+0xe0e>
 80146cc:	e31c      	b.n	8014d08 <_svfprintf_r+0x1448>
 80146ce:	a92f      	add	r1, sp, #188	; 0xbc
 80146d0:	3c10      	subs	r4, #16
 80146d2:	000f      	movs	r7, r1
 80146d4:	f7ff fb2c 	bl	8013d30 <_svfprintf_r+0x470>
 80146d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146da:	2b65      	cmp	r3, #101	; 0x65
 80146dc:	dc00      	bgt.n	80146e0 <_svfprintf_r+0xe20>
 80146de:	e259      	b.n	8014b94 <_svfprintf_r+0x12d4>
 80146e0:	2200      	movs	r2, #0
 80146e2:	2300      	movs	r3, #0
 80146e4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80146e6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80146e8:	f7eb feb8 	bl	800045c <__aeabi_dcmpeq>
 80146ec:	2800      	cmp	r0, #0
 80146ee:	d07c      	beq.n	80147ea <_svfprintf_r+0xf2a>
 80146f0:	4b81      	ldr	r3, [pc, #516]	; (80148f8 <_svfprintf_r+0x1038>)
 80146f2:	603b      	str	r3, [r7, #0]
 80146f4:	2301      	movs	r3, #1
 80146f6:	607b      	str	r3, [r7, #4]
 80146f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80146fa:	3708      	adds	r7, #8
 80146fc:	3301      	adds	r3, #1
 80146fe:	932e      	str	r3, [sp, #184]	; 0xb8
 8014700:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014702:	9308      	str	r3, [sp, #32]
 8014704:	3301      	adds	r3, #1
 8014706:	932d      	str	r3, [sp, #180]	; 0xb4
 8014708:	2b07      	cmp	r3, #7
 801470a:	dd08      	ble.n	801471e <_svfprintf_r+0xe5e>
 801470c:	aa2c      	add	r2, sp, #176	; 0xb0
 801470e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014710:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014712:	f002 fa29 	bl	8016b68 <__ssprint_r>
 8014716:	2800      	cmp	r0, #0
 8014718:	d000      	beq.n	801471c <_svfprintf_r+0xe5c>
 801471a:	e2f5      	b.n	8014d08 <_svfprintf_r+0x1448>
 801471c:	af2f      	add	r7, sp, #188	; 0xbc
 801471e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014720:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014722:	4293      	cmp	r3, r2
 8014724:	db01      	blt.n	801472a <_svfprintf_r+0xe6a>
 8014726:	07f3      	lsls	r3, r6, #31
 8014728:	d51d      	bpl.n	8014766 <_svfprintf_r+0xea6>
 801472a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801472c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801472e:	4694      	mov	ip, r2
 8014730:	603b      	str	r3, [r7, #0]
 8014732:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014734:	607b      	str	r3, [r7, #4]
 8014736:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014738:	3708      	adds	r7, #8
 801473a:	4463      	add	r3, ip
 801473c:	932e      	str	r3, [sp, #184]	; 0xb8
 801473e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014740:	9308      	str	r3, [sp, #32]
 8014742:	3301      	adds	r3, #1
 8014744:	932d      	str	r3, [sp, #180]	; 0xb4
 8014746:	2b07      	cmp	r3, #7
 8014748:	dd08      	ble.n	801475c <_svfprintf_r+0xe9c>
 801474a:	aa2c      	add	r2, sp, #176	; 0xb0
 801474c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801474e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014750:	f002 fa0a 	bl	8016b68 <__ssprint_r>
 8014754:	2800      	cmp	r0, #0
 8014756:	d000      	beq.n	801475a <_svfprintf_r+0xe9a>
 8014758:	e2d6      	b.n	8014d08 <_svfprintf_r+0x1448>
 801475a:	af2f      	add	r7, sp, #188	; 0xbc
 801475c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801475e:	2510      	movs	r5, #16
 8014760:	1e5c      	subs	r4, r3, #1
 8014762:	2c00      	cmp	r4, #0
 8014764:	dc2f      	bgt.n	80147c6 <_svfprintf_r+0xf06>
 8014766:	0773      	lsls	r3, r6, #29
 8014768:	d500      	bpl.n	801476c <_svfprintf_r+0xeac>
 801476a:	e2af      	b.n	8014ccc <_svfprintf_r+0x140c>
 801476c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801476e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014770:	4293      	cmp	r3, r2
 8014772:	da00      	bge.n	8014776 <_svfprintf_r+0xeb6>
 8014774:	0013      	movs	r3, r2
 8014776:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014778:	18d3      	adds	r3, r2, r3
 801477a:	9315      	str	r3, [sp, #84]	; 0x54
 801477c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801477e:	9308      	str	r3, [sp, #32]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d007      	beq.n	8014794 <_svfprintf_r+0xed4>
 8014784:	aa2c      	add	r2, sp, #176	; 0xb0
 8014786:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014788:	980a      	ldr	r0, [sp, #40]	; 0x28
 801478a:	f002 f9ed 	bl	8016b68 <__ssprint_r>
 801478e:	2800      	cmp	r0, #0
 8014790:	d000      	beq.n	8014794 <_svfprintf_r+0xed4>
 8014792:	e2b9      	b.n	8014d08 <_svfprintf_r+0x1448>
 8014794:	2300      	movs	r3, #0
 8014796:	932d      	str	r3, [sp, #180]	; 0xb4
 8014798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801479a:	2b00      	cmp	r3, #0
 801479c:	d000      	beq.n	80147a0 <_svfprintf_r+0xee0>
 801479e:	e2cf      	b.n	8014d40 <_svfprintf_r+0x1480>
 80147a0:	af2f      	add	r7, sp, #188	; 0xbc
 80147a2:	e5d6      	b.n	8014352 <_svfprintf_r+0xa92>
 80147a4:	3210      	adds	r2, #16
 80147a6:	607d      	str	r5, [r7, #4]
 80147a8:	922e      	str	r2, [sp, #184]	; 0xb8
 80147aa:	932d      	str	r3, [sp, #180]	; 0xb4
 80147ac:	2b07      	cmp	r3, #7
 80147ae:	dd08      	ble.n	80147c2 <_svfprintf_r+0xf02>
 80147b0:	aa2c      	add	r2, sp, #176	; 0xb0
 80147b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80147b6:	f002 f9d7 	bl	8016b68 <__ssprint_r>
 80147ba:	2800      	cmp	r0, #0
 80147bc:	d000      	beq.n	80147c0 <_svfprintf_r+0xf00>
 80147be:	e2a3      	b.n	8014d08 <_svfprintf_r+0x1448>
 80147c0:	a92f      	add	r1, sp, #188	; 0xbc
 80147c2:	000f      	movs	r7, r1
 80147c4:	3c10      	subs	r4, #16
 80147c6:	0039      	movs	r1, r7
 80147c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80147ca:	484c      	ldr	r0, [pc, #304]	; (80148fc <_svfprintf_r+0x103c>)
 80147cc:	9308      	str	r3, [sp, #32]
 80147ce:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80147d0:	3301      	adds	r3, #1
 80147d2:	3108      	adds	r1, #8
 80147d4:	6038      	str	r0, [r7, #0]
 80147d6:	2c10      	cmp	r4, #16
 80147d8:	dce4      	bgt.n	80147a4 <_svfprintf_r+0xee4>
 80147da:	607c      	str	r4, [r7, #4]
 80147dc:	18a4      	adds	r4, r4, r2
 80147de:	942e      	str	r4, [sp, #184]	; 0xb8
 80147e0:	932d      	str	r3, [sp, #180]	; 0xb4
 80147e2:	000f      	movs	r7, r1
 80147e4:	2b07      	cmp	r3, #7
 80147e6:	ddbe      	ble.n	8014766 <_svfprintf_r+0xea6>
 80147e8:	e06a      	b.n	80148c0 <_svfprintf_r+0x1000>
 80147ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	dd00      	ble.n	80147f2 <_svfprintf_r+0xf32>
 80147f0:	e086      	b.n	8014900 <_svfprintf_r+0x1040>
 80147f2:	4b41      	ldr	r3, [pc, #260]	; (80148f8 <_svfprintf_r+0x1038>)
 80147f4:	603b      	str	r3, [r7, #0]
 80147f6:	2301      	movs	r3, #1
 80147f8:	607b      	str	r3, [r7, #4]
 80147fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80147fc:	3708      	adds	r7, #8
 80147fe:	3301      	adds	r3, #1
 8014800:	932e      	str	r3, [sp, #184]	; 0xb8
 8014802:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014804:	9308      	str	r3, [sp, #32]
 8014806:	3301      	adds	r3, #1
 8014808:	932d      	str	r3, [sp, #180]	; 0xb4
 801480a:	2b07      	cmp	r3, #7
 801480c:	dd08      	ble.n	8014820 <_svfprintf_r+0xf60>
 801480e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014810:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014812:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014814:	f002 f9a8 	bl	8016b68 <__ssprint_r>
 8014818:	2800      	cmp	r0, #0
 801481a:	d000      	beq.n	801481e <_svfprintf_r+0xf5e>
 801481c:	e274      	b.n	8014d08 <_svfprintf_r+0x1448>
 801481e:	af2f      	add	r7, sp, #188	; 0xbc
 8014820:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014822:	2b00      	cmp	r3, #0
 8014824:	d104      	bne.n	8014830 <_svfprintf_r+0xf70>
 8014826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014828:	2b00      	cmp	r3, #0
 801482a:	d101      	bne.n	8014830 <_svfprintf_r+0xf70>
 801482c:	07f3      	lsls	r3, r6, #31
 801482e:	d59a      	bpl.n	8014766 <_svfprintf_r+0xea6>
 8014830:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014832:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014834:	4694      	mov	ip, r2
 8014836:	603b      	str	r3, [r7, #0]
 8014838:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801483a:	607b      	str	r3, [r7, #4]
 801483c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801483e:	3708      	adds	r7, #8
 8014840:	4463      	add	r3, ip
 8014842:	932e      	str	r3, [sp, #184]	; 0xb8
 8014844:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014846:	9308      	str	r3, [sp, #32]
 8014848:	3301      	adds	r3, #1
 801484a:	932d      	str	r3, [sp, #180]	; 0xb4
 801484c:	2b07      	cmp	r3, #7
 801484e:	dd08      	ble.n	8014862 <_svfprintf_r+0xfa2>
 8014850:	aa2c      	add	r2, sp, #176	; 0xb0
 8014852:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014854:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014856:	f002 f987 	bl	8016b68 <__ssprint_r>
 801485a:	2800      	cmp	r0, #0
 801485c:	d000      	beq.n	8014860 <_svfprintf_r+0xfa0>
 801485e:	e253      	b.n	8014d08 <_svfprintf_r+0x1448>
 8014860:	af2f      	add	r7, sp, #188	; 0xbc
 8014862:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8014864:	2c00      	cmp	r4, #0
 8014866:	da1a      	bge.n	801489e <_svfprintf_r+0xfde>
 8014868:	0039      	movs	r1, r7
 801486a:	2510      	movs	r5, #16
 801486c:	4264      	negs	r4, r4
 801486e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014870:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8014872:	9308      	str	r3, [sp, #32]
 8014874:	1c5a      	adds	r2, r3, #1
 8014876:	4b21      	ldr	r3, [pc, #132]	; (80148fc <_svfprintf_r+0x103c>)
 8014878:	3708      	adds	r7, #8
 801487a:	600b      	str	r3, [r1, #0]
 801487c:	2c10      	cmp	r4, #16
 801487e:	dc29      	bgt.n	80148d4 <_svfprintf_r+0x1014>
 8014880:	604c      	str	r4, [r1, #4]
 8014882:	1824      	adds	r4, r4, r0
 8014884:	942e      	str	r4, [sp, #184]	; 0xb8
 8014886:	922d      	str	r2, [sp, #180]	; 0xb4
 8014888:	2a07      	cmp	r2, #7
 801488a:	dd08      	ble.n	801489e <_svfprintf_r+0xfde>
 801488c:	aa2c      	add	r2, sp, #176	; 0xb0
 801488e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014890:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014892:	f002 f969 	bl	8016b68 <__ssprint_r>
 8014896:	2800      	cmp	r0, #0
 8014898:	d000      	beq.n	801489c <_svfprintf_r+0xfdc>
 801489a:	e235      	b.n	8014d08 <_svfprintf_r+0x1448>
 801489c:	af2f      	add	r7, sp, #188	; 0xbc
 801489e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80148a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148a2:	468c      	mov	ip, r1
 80148a4:	603b      	str	r3, [r7, #0]
 80148a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148a8:	607b      	str	r3, [r7, #4]
 80148aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80148ac:	4463      	add	r3, ip
 80148ae:	932e      	str	r3, [sp, #184]	; 0xb8
 80148b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80148b2:	1c5a      	adds	r2, r3, #1
 80148b4:	9308      	str	r3, [sp, #32]
 80148b6:	922d      	str	r2, [sp, #180]	; 0xb4
 80148b8:	2a07      	cmp	r2, #7
 80148ba:	dc01      	bgt.n	80148c0 <_svfprintf_r+0x1000>
 80148bc:	f7ff fa6c 	bl	8013d98 <_svfprintf_r+0x4d8>
 80148c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80148c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80148c6:	f002 f94f 	bl	8016b68 <__ssprint_r>
 80148ca:	2800      	cmp	r0, #0
 80148cc:	d000      	beq.n	80148d0 <_svfprintf_r+0x1010>
 80148ce:	e21b      	b.n	8014d08 <_svfprintf_r+0x1448>
 80148d0:	af2f      	add	r7, sp, #188	; 0xbc
 80148d2:	e748      	b.n	8014766 <_svfprintf_r+0xea6>
 80148d4:	3010      	adds	r0, #16
 80148d6:	604d      	str	r5, [r1, #4]
 80148d8:	902e      	str	r0, [sp, #184]	; 0xb8
 80148da:	922d      	str	r2, [sp, #180]	; 0xb4
 80148dc:	2a07      	cmp	r2, #7
 80148de:	dd08      	ble.n	80148f2 <_svfprintf_r+0x1032>
 80148e0:	aa2c      	add	r2, sp, #176	; 0xb0
 80148e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80148e6:	f002 f93f 	bl	8016b68 <__ssprint_r>
 80148ea:	2800      	cmp	r0, #0
 80148ec:	d000      	beq.n	80148f0 <_svfprintf_r+0x1030>
 80148ee:	e20b      	b.n	8014d08 <_svfprintf_r+0x1448>
 80148f0:	af2f      	add	r7, sp, #188	; 0xbc
 80148f2:	3c10      	subs	r4, #16
 80148f4:	0039      	movs	r1, r7
 80148f6:	e7ba      	b.n	801486e <_svfprintf_r+0xfae>
 80148f8:	08019f0a 	.word	0x08019f0a
 80148fc:	08019f1c 	.word	0x08019f1c
 8014900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014902:	002c      	movs	r4, r5
 8014904:	429d      	cmp	r5, r3
 8014906:	dd00      	ble.n	801490a <_svfprintf_r+0x104a>
 8014908:	001c      	movs	r4, r3
 801490a:	2c00      	cmp	r4, #0
 801490c:	dd15      	ble.n	801493a <_svfprintf_r+0x107a>
 801490e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014910:	607c      	str	r4, [r7, #4]
 8014912:	603b      	str	r3, [r7, #0]
 8014914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014916:	3708      	adds	r7, #8
 8014918:	18e3      	adds	r3, r4, r3
 801491a:	932e      	str	r3, [sp, #184]	; 0xb8
 801491c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801491e:	9308      	str	r3, [sp, #32]
 8014920:	3301      	adds	r3, #1
 8014922:	932d      	str	r3, [sp, #180]	; 0xb4
 8014924:	2b07      	cmp	r3, #7
 8014926:	dd08      	ble.n	801493a <_svfprintf_r+0x107a>
 8014928:	aa2c      	add	r2, sp, #176	; 0xb0
 801492a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801492c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801492e:	f002 f91b 	bl	8016b68 <__ssprint_r>
 8014932:	2800      	cmp	r0, #0
 8014934:	d000      	beq.n	8014938 <_svfprintf_r+0x1078>
 8014936:	e1e7      	b.n	8014d08 <_svfprintf_r+0x1448>
 8014938:	af2f      	add	r7, sp, #188	; 0xbc
 801493a:	43e3      	mvns	r3, r4
 801493c:	17db      	asrs	r3, r3, #31
 801493e:	401c      	ands	r4, r3
 8014940:	1b2c      	subs	r4, r5, r4
 8014942:	2c00      	cmp	r4, #0
 8014944:	dd1a      	ble.n	801497c <_svfprintf_r+0x10bc>
 8014946:	0039      	movs	r1, r7
 8014948:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801494a:	48d4      	ldr	r0, [pc, #848]	; (8014c9c <_svfprintf_r+0x13dc>)
 801494c:	9308      	str	r3, [sp, #32]
 801494e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014950:	3301      	adds	r3, #1
 8014952:	3108      	adds	r1, #8
 8014954:	6038      	str	r0, [r7, #0]
 8014956:	2c10      	cmp	r4, #16
 8014958:	dd00      	ble.n	801495c <_svfprintf_r+0x109c>
 801495a:	e089      	b.n	8014a70 <_svfprintf_r+0x11b0>
 801495c:	607c      	str	r4, [r7, #4]
 801495e:	18a4      	adds	r4, r4, r2
 8014960:	942e      	str	r4, [sp, #184]	; 0xb8
 8014962:	932d      	str	r3, [sp, #180]	; 0xb4
 8014964:	000f      	movs	r7, r1
 8014966:	2b07      	cmp	r3, #7
 8014968:	dd08      	ble.n	801497c <_svfprintf_r+0x10bc>
 801496a:	aa2c      	add	r2, sp, #176	; 0xb0
 801496c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801496e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014970:	f002 f8fa 	bl	8016b68 <__ssprint_r>
 8014974:	2800      	cmp	r0, #0
 8014976:	d000      	beq.n	801497a <_svfprintf_r+0x10ba>
 8014978:	e1c6      	b.n	8014d08 <_svfprintf_r+0x1448>
 801497a:	af2f      	add	r7, sp, #188	; 0xbc
 801497c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801497e:	195d      	adds	r5, r3, r5
 8014980:	0573      	lsls	r3, r6, #21
 8014982:	d50d      	bpl.n	80149a0 <_svfprintf_r+0x10e0>
 8014984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014986:	2b00      	cmp	r3, #0
 8014988:	d000      	beq.n	801498c <_svfprintf_r+0x10cc>
 801498a:	e084      	b.n	8014a96 <_svfprintf_r+0x11d6>
 801498c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801498e:	2b00      	cmp	r3, #0
 8014990:	d000      	beq.n	8014994 <_svfprintf_r+0x10d4>
 8014992:	e083      	b.n	8014a9c <_svfprintf_r+0x11dc>
 8014994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014998:	189b      	adds	r3, r3, r2
 801499a:	429d      	cmp	r5, r3
 801499c:	d900      	bls.n	80149a0 <_svfprintf_r+0x10e0>
 801499e:	001d      	movs	r5, r3
 80149a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80149a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80149a4:	4293      	cmp	r3, r2
 80149a6:	db01      	blt.n	80149ac <_svfprintf_r+0x10ec>
 80149a8:	07f3      	lsls	r3, r6, #31
 80149aa:	d518      	bpl.n	80149de <_svfprintf_r+0x111e>
 80149ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80149ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80149b0:	4694      	mov	ip, r2
 80149b2:	603b      	str	r3, [r7, #0]
 80149b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80149b6:	607b      	str	r3, [r7, #4]
 80149b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80149ba:	3708      	adds	r7, #8
 80149bc:	4463      	add	r3, ip
 80149be:	932e      	str	r3, [sp, #184]	; 0xb8
 80149c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80149c2:	9308      	str	r3, [sp, #32]
 80149c4:	3301      	adds	r3, #1
 80149c6:	932d      	str	r3, [sp, #180]	; 0xb4
 80149c8:	2b07      	cmp	r3, #7
 80149ca:	dd08      	ble.n	80149de <_svfprintf_r+0x111e>
 80149cc:	aa2c      	add	r2, sp, #176	; 0xb0
 80149ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80149d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80149d2:	f002 f8c9 	bl	8016b68 <__ssprint_r>
 80149d6:	2800      	cmp	r0, #0
 80149d8:	d000      	beq.n	80149dc <_svfprintf_r+0x111c>
 80149da:	e195      	b.n	8014d08 <_svfprintf_r+0x1448>
 80149dc:	af2f      	add	r7, sp, #188	; 0xbc
 80149de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80149e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149e2:	4694      	mov	ip, r2
 80149e4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80149e6:	4463      	add	r3, ip
 80149e8:	1b5b      	subs	r3, r3, r5
 80149ea:	1a54      	subs	r4, r2, r1
 80149ec:	429c      	cmp	r4, r3
 80149ee:	dd00      	ble.n	80149f2 <_svfprintf_r+0x1132>
 80149f0:	001c      	movs	r4, r3
 80149f2:	2c00      	cmp	r4, #0
 80149f4:	dd14      	ble.n	8014a20 <_svfprintf_r+0x1160>
 80149f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80149f8:	603d      	str	r5, [r7, #0]
 80149fa:	18e3      	adds	r3, r4, r3
 80149fc:	932e      	str	r3, [sp, #184]	; 0xb8
 80149fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014a00:	607c      	str	r4, [r7, #4]
 8014a02:	9308      	str	r3, [sp, #32]
 8014a04:	3301      	adds	r3, #1
 8014a06:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a08:	3708      	adds	r7, #8
 8014a0a:	2b07      	cmp	r3, #7
 8014a0c:	dd08      	ble.n	8014a20 <_svfprintf_r+0x1160>
 8014a0e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a14:	f002 f8a8 	bl	8016b68 <__ssprint_r>
 8014a18:	2800      	cmp	r0, #0
 8014a1a:	d000      	beq.n	8014a1e <_svfprintf_r+0x115e>
 8014a1c:	e174      	b.n	8014d08 <_svfprintf_r+0x1448>
 8014a1e:	af2f      	add	r7, sp, #188	; 0xbc
 8014a20:	43e3      	mvns	r3, r4
 8014a22:	17db      	asrs	r3, r3, #31
 8014a24:	401c      	ands	r4, r3
 8014a26:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014a28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a2a:	2510      	movs	r5, #16
 8014a2c:	1a9b      	subs	r3, r3, r2
 8014a2e:	1b1c      	subs	r4, r3, r4
 8014a30:	2c00      	cmp	r4, #0
 8014a32:	dc00      	bgt.n	8014a36 <_svfprintf_r+0x1176>
 8014a34:	e697      	b.n	8014766 <_svfprintf_r+0xea6>
 8014a36:	0039      	movs	r1, r7
 8014a38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014a3a:	4898      	ldr	r0, [pc, #608]	; (8014c9c <_svfprintf_r+0x13dc>)
 8014a3c:	9308      	str	r3, [sp, #32]
 8014a3e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014a40:	3301      	adds	r3, #1
 8014a42:	3108      	adds	r1, #8
 8014a44:	6038      	str	r0, [r7, #0]
 8014a46:	2c10      	cmp	r4, #16
 8014a48:	dc00      	bgt.n	8014a4c <_svfprintf_r+0x118c>
 8014a4a:	e6c6      	b.n	80147da <_svfprintf_r+0xf1a>
 8014a4c:	3210      	adds	r2, #16
 8014a4e:	607d      	str	r5, [r7, #4]
 8014a50:	922e      	str	r2, [sp, #184]	; 0xb8
 8014a52:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a54:	2b07      	cmp	r3, #7
 8014a56:	dd08      	ble.n	8014a6a <_svfprintf_r+0x11aa>
 8014a58:	aa2c      	add	r2, sp, #176	; 0xb0
 8014a5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a5e:	f002 f883 	bl	8016b68 <__ssprint_r>
 8014a62:	2800      	cmp	r0, #0
 8014a64:	d000      	beq.n	8014a68 <_svfprintf_r+0x11a8>
 8014a66:	e14f      	b.n	8014d08 <_svfprintf_r+0x1448>
 8014a68:	a92f      	add	r1, sp, #188	; 0xbc
 8014a6a:	3c10      	subs	r4, #16
 8014a6c:	000f      	movs	r7, r1
 8014a6e:	e7e2      	b.n	8014a36 <_svfprintf_r+0x1176>
 8014a70:	2010      	movs	r0, #16
 8014a72:	1812      	adds	r2, r2, r0
 8014a74:	6078      	str	r0, [r7, #4]
 8014a76:	922e      	str	r2, [sp, #184]	; 0xb8
 8014a78:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a7a:	2b07      	cmp	r3, #7
 8014a7c:	dd08      	ble.n	8014a90 <_svfprintf_r+0x11d0>
 8014a7e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014a80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a84:	f002 f870 	bl	8016b68 <__ssprint_r>
 8014a88:	2800      	cmp	r0, #0
 8014a8a:	d000      	beq.n	8014a8e <_svfprintf_r+0x11ce>
 8014a8c:	e13c      	b.n	8014d08 <_svfprintf_r+0x1448>
 8014a8e:	a92f      	add	r1, sp, #188	; 0xbc
 8014a90:	3c10      	subs	r4, #16
 8014a92:	000f      	movs	r7, r1
 8014a94:	e757      	b.n	8014946 <_svfprintf_r+0x1086>
 8014a96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d061      	beq.n	8014b60 <_svfprintf_r+0x12a0>
 8014a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a9e:	3b01      	subs	r3, #1
 8014aa0:	9310      	str	r3, [sp, #64]	; 0x40
 8014aa2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014aa4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014aa6:	4694      	mov	ip, r2
 8014aa8:	603b      	str	r3, [r7, #0]
 8014aaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014aac:	607b      	str	r3, [r7, #4]
 8014aae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014ab0:	3708      	adds	r7, #8
 8014ab2:	4463      	add	r3, ip
 8014ab4:	932e      	str	r3, [sp, #184]	; 0xb8
 8014ab6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014ab8:	9308      	str	r3, [sp, #32]
 8014aba:	3301      	adds	r3, #1
 8014abc:	932d      	str	r3, [sp, #180]	; 0xb4
 8014abe:	2b07      	cmp	r3, #7
 8014ac0:	dd08      	ble.n	8014ad4 <_svfprintf_r+0x1214>
 8014ac2:	aa2c      	add	r2, sp, #176	; 0xb0
 8014ac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ac6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ac8:	f002 f84e 	bl	8016b68 <__ssprint_r>
 8014acc:	2800      	cmp	r0, #0
 8014ace:	d000      	beq.n	8014ad2 <_svfprintf_r+0x1212>
 8014ad0:	e11a      	b.n	8014d08 <_svfprintf_r+0x1448>
 8014ad2:	af2f      	add	r7, sp, #188	; 0xbc
 8014ad4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ad8:	189b      	adds	r3, r3, r2
 8014ada:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014adc:	1b5b      	subs	r3, r3, r5
 8014ade:	7814      	ldrb	r4, [r2, #0]
 8014ae0:	429c      	cmp	r4, r3
 8014ae2:	dd00      	ble.n	8014ae6 <_svfprintf_r+0x1226>
 8014ae4:	001c      	movs	r4, r3
 8014ae6:	2c00      	cmp	r4, #0
 8014ae8:	dd14      	ble.n	8014b14 <_svfprintf_r+0x1254>
 8014aea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014aec:	603d      	str	r5, [r7, #0]
 8014aee:	18e3      	adds	r3, r4, r3
 8014af0:	932e      	str	r3, [sp, #184]	; 0xb8
 8014af2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014af4:	607c      	str	r4, [r7, #4]
 8014af6:	9308      	str	r3, [sp, #32]
 8014af8:	3301      	adds	r3, #1
 8014afa:	932d      	str	r3, [sp, #180]	; 0xb4
 8014afc:	3708      	adds	r7, #8
 8014afe:	2b07      	cmp	r3, #7
 8014b00:	dd08      	ble.n	8014b14 <_svfprintf_r+0x1254>
 8014b02:	aa2c      	add	r2, sp, #176	; 0xb0
 8014b04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014b06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014b08:	f002 f82e 	bl	8016b68 <__ssprint_r>
 8014b0c:	2800      	cmp	r0, #0
 8014b0e:	d000      	beq.n	8014b12 <_svfprintf_r+0x1252>
 8014b10:	e0fa      	b.n	8014d08 <_svfprintf_r+0x1448>
 8014b12:	af2f      	add	r7, sp, #188	; 0xbc
 8014b14:	43e3      	mvns	r3, r4
 8014b16:	17db      	asrs	r3, r3, #31
 8014b18:	401c      	ands	r4, r3
 8014b1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	1b1c      	subs	r4, r3, r4
 8014b20:	2c00      	cmp	r4, #0
 8014b22:	dd19      	ble.n	8014b58 <_svfprintf_r+0x1298>
 8014b24:	0039      	movs	r1, r7
 8014b26:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014b28:	485c      	ldr	r0, [pc, #368]	; (8014c9c <_svfprintf_r+0x13dc>)
 8014b2a:	9308      	str	r3, [sp, #32]
 8014b2c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014b2e:	3301      	adds	r3, #1
 8014b30:	3108      	adds	r1, #8
 8014b32:	6038      	str	r0, [r7, #0]
 8014b34:	2c10      	cmp	r4, #16
 8014b36:	dc1a      	bgt.n	8014b6e <_svfprintf_r+0x12ae>
 8014b38:	607c      	str	r4, [r7, #4]
 8014b3a:	18a4      	adds	r4, r4, r2
 8014b3c:	942e      	str	r4, [sp, #184]	; 0xb8
 8014b3e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014b40:	000f      	movs	r7, r1
 8014b42:	2b07      	cmp	r3, #7
 8014b44:	dd08      	ble.n	8014b58 <_svfprintf_r+0x1298>
 8014b46:	aa2c      	add	r2, sp, #176	; 0xb0
 8014b48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014b4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014b4c:	f002 f80c 	bl	8016b68 <__ssprint_r>
 8014b50:	2800      	cmp	r0, #0
 8014b52:	d000      	beq.n	8014b56 <_svfprintf_r+0x1296>
 8014b54:	e0d8      	b.n	8014d08 <_svfprintf_r+0x1448>
 8014b56:	af2f      	add	r7, sp, #188	; 0xbc
 8014b58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	18ed      	adds	r5, r5, r3
 8014b5e:	e711      	b.n	8014984 <_svfprintf_r+0x10c4>
 8014b60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b62:	3b01      	subs	r3, #1
 8014b64:	9313      	str	r3, [sp, #76]	; 0x4c
 8014b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b68:	3b01      	subs	r3, #1
 8014b6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b6c:	e799      	b.n	8014aa2 <_svfprintf_r+0x11e2>
 8014b6e:	2010      	movs	r0, #16
 8014b70:	1812      	adds	r2, r2, r0
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	922e      	str	r2, [sp, #184]	; 0xb8
 8014b76:	932d      	str	r3, [sp, #180]	; 0xb4
 8014b78:	2b07      	cmp	r3, #7
 8014b7a:	dd08      	ble.n	8014b8e <_svfprintf_r+0x12ce>
 8014b7c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014b7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014b80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014b82:	f001 fff1 	bl	8016b68 <__ssprint_r>
 8014b86:	2800      	cmp	r0, #0
 8014b88:	d000      	beq.n	8014b8c <_svfprintf_r+0x12cc>
 8014b8a:	e0bd      	b.n	8014d08 <_svfprintf_r+0x1448>
 8014b8c:	a92f      	add	r1, sp, #188	; 0xbc
 8014b8e:	3c10      	subs	r4, #16
 8014b90:	000f      	movs	r7, r1
 8014b92:	e7c7      	b.n	8014b24 <_svfprintf_r+0x1264>
 8014b94:	003c      	movs	r4, r7
 8014b96:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014b98:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8014b9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014b9c:	9308      	str	r3, [sp, #32]
 8014b9e:	3101      	adds	r1, #1
 8014ba0:	3301      	adds	r3, #1
 8014ba2:	3408      	adds	r4, #8
 8014ba4:	2a01      	cmp	r2, #1
 8014ba6:	dc03      	bgt.n	8014bb0 <_svfprintf_r+0x12f0>
 8014ba8:	2201      	movs	r2, #1
 8014baa:	4216      	tst	r6, r2
 8014bac:	d100      	bne.n	8014bb0 <_svfprintf_r+0x12f0>
 8014bae:	e088      	b.n	8014cc2 <_svfprintf_r+0x1402>
 8014bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014bb2:	912e      	str	r1, [sp, #184]	; 0xb8
 8014bb4:	603a      	str	r2, [r7, #0]
 8014bb6:	2201      	movs	r2, #1
 8014bb8:	932d      	str	r3, [sp, #180]	; 0xb4
 8014bba:	607a      	str	r2, [r7, #4]
 8014bbc:	2b07      	cmp	r3, #7
 8014bbe:	dd08      	ble.n	8014bd2 <_svfprintf_r+0x1312>
 8014bc0:	aa2c      	add	r2, sp, #176	; 0xb0
 8014bc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014bc4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014bc6:	f001 ffcf 	bl	8016b68 <__ssprint_r>
 8014bca:	2800      	cmp	r0, #0
 8014bcc:	d000      	beq.n	8014bd0 <_svfprintf_r+0x1310>
 8014bce:	e09b      	b.n	8014d08 <_svfprintf_r+0x1448>
 8014bd0:	ac2f      	add	r4, sp, #188	; 0xbc
 8014bd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014bd4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014bd6:	4694      	mov	ip, r2
 8014bd8:	6023      	str	r3, [r4, #0]
 8014bda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014bdc:	6063      	str	r3, [r4, #4]
 8014bde:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014be0:	3408      	adds	r4, #8
 8014be2:	4463      	add	r3, ip
 8014be4:	932e      	str	r3, [sp, #184]	; 0xb8
 8014be6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014be8:	9308      	str	r3, [sp, #32]
 8014bea:	3301      	adds	r3, #1
 8014bec:	932d      	str	r3, [sp, #180]	; 0xb4
 8014bee:	2b07      	cmp	r3, #7
 8014bf0:	dd08      	ble.n	8014c04 <_svfprintf_r+0x1344>
 8014bf2:	aa2c      	add	r2, sp, #176	; 0xb0
 8014bf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014bf6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014bf8:	f001 ffb6 	bl	8016b68 <__ssprint_r>
 8014bfc:	2800      	cmp	r0, #0
 8014bfe:	d000      	beq.n	8014c02 <_svfprintf_r+0x1342>
 8014c00:	e082      	b.n	8014d08 <_svfprintf_r+0x1448>
 8014c02:	ac2f      	add	r4, sp, #188	; 0xbc
 8014c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c06:	2200      	movs	r2, #0
 8014c08:	1e5d      	subs	r5, r3, #1
 8014c0a:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014c10:	f7eb fc24 	bl	800045c <__aeabi_dcmpeq>
 8014c14:	2800      	cmp	r0, #0
 8014c16:	d12c      	bne.n	8014c72 <_svfprintf_r+0x13b2>
 8014c18:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014c1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014c1c:	9308      	str	r3, [sp, #32]
 8014c1e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014c20:	6065      	str	r5, [r4, #4]
 8014c22:	1c5a      	adds	r2, r3, #1
 8014c24:	930e      	str	r3, [sp, #56]	; 0x38
 8014c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c28:	922d      	str	r2, [sp, #180]	; 0xb4
 8014c2a:	3301      	adds	r3, #1
 8014c2c:	6023      	str	r3, [r4, #0]
 8014c2e:	9b08      	ldr	r3, [sp, #32]
 8014c30:	3408      	adds	r4, #8
 8014c32:	3b01      	subs	r3, #1
 8014c34:	185b      	adds	r3, r3, r1
 8014c36:	932e      	str	r3, [sp, #184]	; 0xb8
 8014c38:	2a07      	cmp	r2, #7
 8014c3a:	dd07      	ble.n	8014c4c <_svfprintf_r+0x138c>
 8014c3c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014c3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014c40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014c42:	f001 ff91 	bl	8016b68 <__ssprint_r>
 8014c46:	2800      	cmp	r0, #0
 8014c48:	d15e      	bne.n	8014d08 <_svfprintf_r+0x1448>
 8014c4a:	ac2f      	add	r4, sp, #188	; 0xbc
 8014c4c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014c4e:	ab28      	add	r3, sp, #160	; 0xa0
 8014c50:	4694      	mov	ip, r2
 8014c52:	6023      	str	r3, [r4, #0]
 8014c54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014c56:	6063      	str	r3, [r4, #4]
 8014c58:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014c5a:	4463      	add	r3, ip
 8014c5c:	932e      	str	r3, [sp, #184]	; 0xb8
 8014c5e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014c60:	9308      	str	r3, [sp, #32]
 8014c62:	3301      	adds	r3, #1
 8014c64:	932d      	str	r3, [sp, #180]	; 0xb4
 8014c66:	2b07      	cmp	r3, #7
 8014c68:	dd00      	ble.n	8014c6c <_svfprintf_r+0x13ac>
 8014c6a:	e629      	b.n	80148c0 <_svfprintf_r+0x1000>
 8014c6c:	3408      	adds	r4, #8
 8014c6e:	0027      	movs	r7, r4
 8014c70:	e579      	b.n	8014766 <_svfprintf_r+0xea6>
 8014c72:	2710      	movs	r7, #16
 8014c74:	2d00      	cmp	r5, #0
 8014c76:	dde9      	ble.n	8014c4c <_svfprintf_r+0x138c>
 8014c78:	0021      	movs	r1, r4
 8014c7a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014c7c:	4807      	ldr	r0, [pc, #28]	; (8014c9c <_svfprintf_r+0x13dc>)
 8014c7e:	9308      	str	r3, [sp, #32]
 8014c80:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014c82:	3301      	adds	r3, #1
 8014c84:	3108      	adds	r1, #8
 8014c86:	6020      	str	r0, [r4, #0]
 8014c88:	2d10      	cmp	r5, #16
 8014c8a:	dc09      	bgt.n	8014ca0 <_svfprintf_r+0x13e0>
 8014c8c:	6065      	str	r5, [r4, #4]
 8014c8e:	000c      	movs	r4, r1
 8014c90:	18ad      	adds	r5, r5, r2
 8014c92:	952e      	str	r5, [sp, #184]	; 0xb8
 8014c94:	932d      	str	r3, [sp, #180]	; 0xb4
 8014c96:	2b07      	cmp	r3, #7
 8014c98:	ddd8      	ble.n	8014c4c <_svfprintf_r+0x138c>
 8014c9a:	e7cf      	b.n	8014c3c <_svfprintf_r+0x137c>
 8014c9c:	08019f1c 	.word	0x08019f1c
 8014ca0:	3210      	adds	r2, #16
 8014ca2:	6067      	str	r7, [r4, #4]
 8014ca4:	922e      	str	r2, [sp, #184]	; 0xb8
 8014ca6:	932d      	str	r3, [sp, #180]	; 0xb4
 8014ca8:	2b07      	cmp	r3, #7
 8014caa:	dd07      	ble.n	8014cbc <_svfprintf_r+0x13fc>
 8014cac:	aa2c      	add	r2, sp, #176	; 0xb0
 8014cae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014cb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014cb2:	f001 ff59 	bl	8016b68 <__ssprint_r>
 8014cb6:	2800      	cmp	r0, #0
 8014cb8:	d126      	bne.n	8014d08 <_svfprintf_r+0x1448>
 8014cba:	a92f      	add	r1, sp, #188	; 0xbc
 8014cbc:	3d10      	subs	r5, #16
 8014cbe:	000c      	movs	r4, r1
 8014cc0:	e7da      	b.n	8014c78 <_svfprintf_r+0x13b8>
 8014cc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cc4:	912e      	str	r1, [sp, #184]	; 0xb8
 8014cc6:	c705      	stmia	r7!, {r0, r2}
 8014cc8:	932d      	str	r3, [sp, #180]	; 0xb4
 8014cca:	e7e4      	b.n	8014c96 <_svfprintf_r+0x13d6>
 8014ccc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014cce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014cd0:	2510      	movs	r5, #16
 8014cd2:	1a9c      	subs	r4, r3, r2
 8014cd4:	2c00      	cmp	r4, #0
 8014cd6:	dc00      	bgt.n	8014cda <_svfprintf_r+0x141a>
 8014cd8:	e548      	b.n	801476c <_svfprintf_r+0xeac>
 8014cda:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014cdc:	4921      	ldr	r1, [pc, #132]	; (8014d64 <_svfprintf_r+0x14a4>)
 8014cde:	9308      	str	r3, [sp, #32]
 8014ce0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014ce2:	3301      	adds	r3, #1
 8014ce4:	6039      	str	r1, [r7, #0]
 8014ce6:	2c10      	cmp	r4, #16
 8014ce8:	dc19      	bgt.n	8014d1e <_svfprintf_r+0x145e>
 8014cea:	607c      	str	r4, [r7, #4]
 8014cec:	18a4      	adds	r4, r4, r2
 8014cee:	942e      	str	r4, [sp, #184]	; 0xb8
 8014cf0:	932d      	str	r3, [sp, #180]	; 0xb4
 8014cf2:	2b07      	cmp	r3, #7
 8014cf4:	dc00      	bgt.n	8014cf8 <_svfprintf_r+0x1438>
 8014cf6:	e539      	b.n	801476c <_svfprintf_r+0xeac>
 8014cf8:	aa2c      	add	r2, sp, #176	; 0xb0
 8014cfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014cfc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014cfe:	f001 ff33 	bl	8016b68 <__ssprint_r>
 8014d02:	2800      	cmp	r0, #0
 8014d04:	d100      	bne.n	8014d08 <_svfprintf_r+0x1448>
 8014d06:	e531      	b.n	801476c <_svfprintf_r+0xeac>
 8014d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d101      	bne.n	8014d12 <_svfprintf_r+0x1452>
 8014d0e:	f7ff f908 	bl	8013f22 <_svfprintf_r+0x662>
 8014d12:	0019      	movs	r1, r3
 8014d14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d16:	f000 ff19 	bl	8015b4c <_free_r>
 8014d1a:	f7ff f902 	bl	8013f22 <_svfprintf_r+0x662>
 8014d1e:	3210      	adds	r2, #16
 8014d20:	607d      	str	r5, [r7, #4]
 8014d22:	922e      	str	r2, [sp, #184]	; 0xb8
 8014d24:	932d      	str	r3, [sp, #180]	; 0xb4
 8014d26:	3708      	adds	r7, #8
 8014d28:	2b07      	cmp	r3, #7
 8014d2a:	dd07      	ble.n	8014d3c <_svfprintf_r+0x147c>
 8014d2c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014d2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d32:	f001 ff19 	bl	8016b68 <__ssprint_r>
 8014d36:	2800      	cmp	r0, #0
 8014d38:	d1e6      	bne.n	8014d08 <_svfprintf_r+0x1448>
 8014d3a:	af2f      	add	r7, sp, #188	; 0xbc
 8014d3c:	3c10      	subs	r4, #16
 8014d3e:	e7cc      	b.n	8014cda <_svfprintf_r+0x141a>
 8014d40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014d42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d44:	f000 ff02 	bl	8015b4c <_free_r>
 8014d48:	e52a      	b.n	80147a0 <_svfprintf_r+0xee0>
 8014d4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014d4c:	9306      	str	r3, [sp, #24]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d101      	bne.n	8014d56 <_svfprintf_r+0x1496>
 8014d52:	f7ff f8e6 	bl	8013f22 <_svfprintf_r+0x662>
 8014d56:	aa2c      	add	r2, sp, #176	; 0xb0
 8014d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d5a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d5c:	f001 ff04 	bl	8016b68 <__ssprint_r>
 8014d60:	f7ff f8df 	bl	8013f22 <_svfprintf_r+0x662>
 8014d64:	08019f0c 	.word	0x08019f0c

08014d68 <sysconf>:
 8014d68:	2380      	movs	r3, #128	; 0x80
 8014d6a:	b510      	push	{r4, lr}
 8014d6c:	015b      	lsls	r3, r3, #5
 8014d6e:	2808      	cmp	r0, #8
 8014d70:	d004      	beq.n	8014d7c <sysconf+0x14>
 8014d72:	f000 fe7d 	bl	8015a70 <__errno>
 8014d76:	2316      	movs	r3, #22
 8014d78:	6003      	str	r3, [r0, #0]
 8014d7a:	3b17      	subs	r3, #23
 8014d7c:	0018      	movs	r0, r3
 8014d7e:	bd10      	pop	{r4, pc}

08014d80 <__ascii_wctomb>:
 8014d80:	1e0b      	subs	r3, r1, #0
 8014d82:	d004      	beq.n	8014d8e <__ascii_wctomb+0xe>
 8014d84:	2aff      	cmp	r2, #255	; 0xff
 8014d86:	d904      	bls.n	8014d92 <__ascii_wctomb+0x12>
 8014d88:	238a      	movs	r3, #138	; 0x8a
 8014d8a:	6003      	str	r3, [r0, #0]
 8014d8c:	3b8b      	subs	r3, #139	; 0x8b
 8014d8e:	0018      	movs	r0, r3
 8014d90:	4770      	bx	lr
 8014d92:	700a      	strb	r2, [r1, #0]
 8014d94:	2301      	movs	r3, #1
 8014d96:	e7fa      	b.n	8014d8e <__ascii_wctomb+0xe>

08014d98 <register_fini>:
 8014d98:	4b03      	ldr	r3, [pc, #12]	; (8014da8 <register_fini+0x10>)
 8014d9a:	b510      	push	{r4, lr}
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d002      	beq.n	8014da6 <register_fini+0xe>
 8014da0:	4802      	ldr	r0, [pc, #8]	; (8014dac <register_fini+0x14>)
 8014da2:	f000 f805 	bl	8014db0 <atexit>
 8014da6:	bd10      	pop	{r4, pc}
 8014da8:	00000000 	.word	0x00000000
 8014dac:	08015a7d 	.word	0x08015a7d

08014db0 <atexit>:
 8014db0:	2300      	movs	r3, #0
 8014db2:	b510      	push	{r4, lr}
 8014db4:	0001      	movs	r1, r0
 8014db6:	001a      	movs	r2, r3
 8014db8:	0018      	movs	r0, r3
 8014dba:	f001 ff53 	bl	8016c64 <__register_exitproc>
 8014dbe:	bd10      	pop	{r4, pc}

08014dc0 <quorem>:
 8014dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dc2:	6903      	ldr	r3, [r0, #16]
 8014dc4:	690c      	ldr	r4, [r1, #16]
 8014dc6:	b089      	sub	sp, #36	; 0x24
 8014dc8:	0007      	movs	r7, r0
 8014dca:	9105      	str	r1, [sp, #20]
 8014dcc:	2600      	movs	r6, #0
 8014dce:	42a3      	cmp	r3, r4
 8014dd0:	db65      	blt.n	8014e9e <quorem+0xde>
 8014dd2:	000b      	movs	r3, r1
 8014dd4:	3c01      	subs	r4, #1
 8014dd6:	3314      	adds	r3, #20
 8014dd8:	00a5      	lsls	r5, r4, #2
 8014dda:	9303      	str	r3, [sp, #12]
 8014ddc:	195b      	adds	r3, r3, r5
 8014dde:	9304      	str	r3, [sp, #16]
 8014de0:	0003      	movs	r3, r0
 8014de2:	3314      	adds	r3, #20
 8014de4:	9302      	str	r3, [sp, #8]
 8014de6:	195d      	adds	r5, r3, r5
 8014de8:	9b04      	ldr	r3, [sp, #16]
 8014dea:	6828      	ldr	r0, [r5, #0]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	1c59      	adds	r1, r3, #1
 8014df0:	9301      	str	r3, [sp, #4]
 8014df2:	f7eb f9ad 	bl	8000150 <__udivsi3>
 8014df6:	9001      	str	r0, [sp, #4]
 8014df8:	42b0      	cmp	r0, r6
 8014dfa:	d029      	beq.n	8014e50 <quorem+0x90>
 8014dfc:	9b03      	ldr	r3, [sp, #12]
 8014dfe:	9802      	ldr	r0, [sp, #8]
 8014e00:	469c      	mov	ip, r3
 8014e02:	9606      	str	r6, [sp, #24]
 8014e04:	4662      	mov	r2, ip
 8014e06:	ca08      	ldmia	r2!, {r3}
 8014e08:	4694      	mov	ip, r2
 8014e0a:	9a01      	ldr	r2, [sp, #4]
 8014e0c:	b299      	uxth	r1, r3
 8014e0e:	4351      	muls	r1, r2
 8014e10:	0c1b      	lsrs	r3, r3, #16
 8014e12:	4353      	muls	r3, r2
 8014e14:	1989      	adds	r1, r1, r6
 8014e16:	0c0a      	lsrs	r2, r1, #16
 8014e18:	189b      	adds	r3, r3, r2
 8014e1a:	9307      	str	r3, [sp, #28]
 8014e1c:	0c1e      	lsrs	r6, r3, #16
 8014e1e:	6803      	ldr	r3, [r0, #0]
 8014e20:	b289      	uxth	r1, r1
 8014e22:	b29a      	uxth	r2, r3
 8014e24:	9b06      	ldr	r3, [sp, #24]
 8014e26:	18d2      	adds	r2, r2, r3
 8014e28:	6803      	ldr	r3, [r0, #0]
 8014e2a:	1a52      	subs	r2, r2, r1
 8014e2c:	0c19      	lsrs	r1, r3, #16
 8014e2e:	466b      	mov	r3, sp
 8014e30:	8b9b      	ldrh	r3, [r3, #28]
 8014e32:	1acb      	subs	r3, r1, r3
 8014e34:	1411      	asrs	r1, r2, #16
 8014e36:	185b      	adds	r3, r3, r1
 8014e38:	1419      	asrs	r1, r3, #16
 8014e3a:	b292      	uxth	r2, r2
 8014e3c:	041b      	lsls	r3, r3, #16
 8014e3e:	431a      	orrs	r2, r3
 8014e40:	9b04      	ldr	r3, [sp, #16]
 8014e42:	9106      	str	r1, [sp, #24]
 8014e44:	c004      	stmia	r0!, {r2}
 8014e46:	4563      	cmp	r3, ip
 8014e48:	d2dc      	bcs.n	8014e04 <quorem+0x44>
 8014e4a:	682b      	ldr	r3, [r5, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d02d      	beq.n	8014eac <quorem+0xec>
 8014e50:	9905      	ldr	r1, [sp, #20]
 8014e52:	0038      	movs	r0, r7
 8014e54:	f001 fcb2 	bl	80167bc <__mcmp>
 8014e58:	2800      	cmp	r0, #0
 8014e5a:	db1f      	blt.n	8014e9c <quorem+0xdc>
 8014e5c:	2500      	movs	r5, #0
 8014e5e:	9b01      	ldr	r3, [sp, #4]
 8014e60:	9802      	ldr	r0, [sp, #8]
 8014e62:	3301      	adds	r3, #1
 8014e64:	9903      	ldr	r1, [sp, #12]
 8014e66:	9301      	str	r3, [sp, #4]
 8014e68:	6802      	ldr	r2, [r0, #0]
 8014e6a:	c908      	ldmia	r1!, {r3}
 8014e6c:	b292      	uxth	r2, r2
 8014e6e:	1955      	adds	r5, r2, r5
 8014e70:	b29a      	uxth	r2, r3
 8014e72:	1aaa      	subs	r2, r5, r2
 8014e74:	6805      	ldr	r5, [r0, #0]
 8014e76:	0c1b      	lsrs	r3, r3, #16
 8014e78:	0c2d      	lsrs	r5, r5, #16
 8014e7a:	1aeb      	subs	r3, r5, r3
 8014e7c:	1415      	asrs	r5, r2, #16
 8014e7e:	195b      	adds	r3, r3, r5
 8014e80:	141d      	asrs	r5, r3, #16
 8014e82:	b292      	uxth	r2, r2
 8014e84:	041b      	lsls	r3, r3, #16
 8014e86:	4313      	orrs	r3, r2
 8014e88:	c008      	stmia	r0!, {r3}
 8014e8a:	9b04      	ldr	r3, [sp, #16]
 8014e8c:	428b      	cmp	r3, r1
 8014e8e:	d2eb      	bcs.n	8014e68 <quorem+0xa8>
 8014e90:	9a02      	ldr	r2, [sp, #8]
 8014e92:	00a3      	lsls	r3, r4, #2
 8014e94:	18d3      	adds	r3, r2, r3
 8014e96:	681a      	ldr	r2, [r3, #0]
 8014e98:	2a00      	cmp	r2, #0
 8014e9a:	d011      	beq.n	8014ec0 <quorem+0x100>
 8014e9c:	9e01      	ldr	r6, [sp, #4]
 8014e9e:	0030      	movs	r0, r6
 8014ea0:	b009      	add	sp, #36	; 0x24
 8014ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ea4:	682b      	ldr	r3, [r5, #0]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d104      	bne.n	8014eb4 <quorem+0xf4>
 8014eaa:	3c01      	subs	r4, #1
 8014eac:	9b02      	ldr	r3, [sp, #8]
 8014eae:	3d04      	subs	r5, #4
 8014eb0:	42ab      	cmp	r3, r5
 8014eb2:	d3f7      	bcc.n	8014ea4 <quorem+0xe4>
 8014eb4:	613c      	str	r4, [r7, #16]
 8014eb6:	e7cb      	b.n	8014e50 <quorem+0x90>
 8014eb8:	681a      	ldr	r2, [r3, #0]
 8014eba:	2a00      	cmp	r2, #0
 8014ebc:	d104      	bne.n	8014ec8 <quorem+0x108>
 8014ebe:	3c01      	subs	r4, #1
 8014ec0:	9a02      	ldr	r2, [sp, #8]
 8014ec2:	3b04      	subs	r3, #4
 8014ec4:	429a      	cmp	r2, r3
 8014ec6:	d3f7      	bcc.n	8014eb8 <quorem+0xf8>
 8014ec8:	613c      	str	r4, [r7, #16]
 8014eca:	e7e7      	b.n	8014e9c <quorem+0xdc>

08014ecc <_dtoa_r>:
 8014ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ece:	0014      	movs	r4, r2
 8014ed0:	001d      	movs	r5, r3
 8014ed2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8014ed4:	b09b      	sub	sp, #108	; 0x6c
 8014ed6:	9002      	str	r0, [sp, #8]
 8014ed8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8014eda:	9406      	str	r4, [sp, #24]
 8014edc:	9507      	str	r5, [sp, #28]
 8014ede:	2900      	cmp	r1, #0
 8014ee0:	d009      	beq.n	8014ef6 <_dtoa_r+0x2a>
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014ee6:	4093      	lsls	r3, r2
 8014ee8:	604a      	str	r2, [r1, #4]
 8014eea:	608b      	str	r3, [r1, #8]
 8014eec:	f001 fa6a 	bl	80163c4 <_Bfree>
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	9a02      	ldr	r2, [sp, #8]
 8014ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8014ef6:	2d00      	cmp	r5, #0
 8014ef8:	da20      	bge.n	8014f3c <_dtoa_r+0x70>
 8014efa:	2301      	movs	r3, #1
 8014efc:	6033      	str	r3, [r6, #0]
 8014efe:	006b      	lsls	r3, r5, #1
 8014f00:	085b      	lsrs	r3, r3, #1
 8014f02:	9307      	str	r3, [sp, #28]
 8014f04:	9c07      	ldr	r4, [sp, #28]
 8014f06:	4bb2      	ldr	r3, [pc, #712]	; (80151d0 <_dtoa_r+0x304>)
 8014f08:	0022      	movs	r2, r4
 8014f0a:	9317      	str	r3, [sp, #92]	; 0x5c
 8014f0c:	401a      	ands	r2, r3
 8014f0e:	429a      	cmp	r2, r3
 8014f10:	d117      	bne.n	8014f42 <_dtoa_r+0x76>
 8014f12:	4bb0      	ldr	r3, [pc, #704]	; (80151d4 <_dtoa_r+0x308>)
 8014f14:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014f16:	6013      	str	r3, [r2, #0]
 8014f18:	9b06      	ldr	r3, [sp, #24]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d103      	bne.n	8014f26 <_dtoa_r+0x5a>
 8014f1e:	0324      	lsls	r4, r4, #12
 8014f20:	d101      	bne.n	8014f26 <_dtoa_r+0x5a>
 8014f22:	f000 fd89 	bl	8015a38 <_dtoa_r+0xb6c>
 8014f26:	4bac      	ldr	r3, [pc, #688]	; (80151d8 <_dtoa_r+0x30c>)
 8014f28:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014f2a:	9308      	str	r3, [sp, #32]
 8014f2c:	2a00      	cmp	r2, #0
 8014f2e:	d002      	beq.n	8014f36 <_dtoa_r+0x6a>
 8014f30:	4baa      	ldr	r3, [pc, #680]	; (80151dc <_dtoa_r+0x310>)
 8014f32:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014f34:	6013      	str	r3, [r2, #0]
 8014f36:	9808      	ldr	r0, [sp, #32]
 8014f38:	b01b      	add	sp, #108	; 0x6c
 8014f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	6033      	str	r3, [r6, #0]
 8014f40:	e7e0      	b.n	8014f04 <_dtoa_r+0x38>
 8014f42:	9e06      	ldr	r6, [sp, #24]
 8014f44:	9f07      	ldr	r7, [sp, #28]
 8014f46:	2200      	movs	r2, #0
 8014f48:	2300      	movs	r3, #0
 8014f4a:	0030      	movs	r0, r6
 8014f4c:	0039      	movs	r1, r7
 8014f4e:	f7eb fa85 	bl	800045c <__aeabi_dcmpeq>
 8014f52:	1e05      	subs	r5, r0, #0
 8014f54:	d00b      	beq.n	8014f6e <_dtoa_r+0xa2>
 8014f56:	2301      	movs	r3, #1
 8014f58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014f5a:	6013      	str	r3, [r2, #0]
 8014f5c:	4ba0      	ldr	r3, [pc, #640]	; (80151e0 <_dtoa_r+0x314>)
 8014f5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014f60:	9308      	str	r3, [sp, #32]
 8014f62:	2a00      	cmp	r2, #0
 8014f64:	d0e7      	beq.n	8014f36 <_dtoa_r+0x6a>
 8014f66:	4a9f      	ldr	r2, [pc, #636]	; (80151e4 <_dtoa_r+0x318>)
 8014f68:	9924      	ldr	r1, [sp, #144]	; 0x90
 8014f6a:	600a      	str	r2, [r1, #0]
 8014f6c:	e7e3      	b.n	8014f36 <_dtoa_r+0x6a>
 8014f6e:	ab18      	add	r3, sp, #96	; 0x60
 8014f70:	9301      	str	r3, [sp, #4]
 8014f72:	ab19      	add	r3, sp, #100	; 0x64
 8014f74:	9300      	str	r3, [sp, #0]
 8014f76:	0032      	movs	r2, r6
 8014f78:	003b      	movs	r3, r7
 8014f7a:	9802      	ldr	r0, [sp, #8]
 8014f7c:	f001 fd0e 	bl	801699c <__d2b>
 8014f80:	0063      	lsls	r3, r4, #1
 8014f82:	9003      	str	r0, [sp, #12]
 8014f84:	0d5b      	lsrs	r3, r3, #21
 8014f86:	d074      	beq.n	8015072 <_dtoa_r+0x1a6>
 8014f88:	033a      	lsls	r2, r7, #12
 8014f8a:	4c97      	ldr	r4, [pc, #604]	; (80151e8 <_dtoa_r+0x31c>)
 8014f8c:	0b12      	lsrs	r2, r2, #12
 8014f8e:	4314      	orrs	r4, r2
 8014f90:	0021      	movs	r1, r4
 8014f92:	4a96      	ldr	r2, [pc, #600]	; (80151ec <_dtoa_r+0x320>)
 8014f94:	0030      	movs	r0, r6
 8014f96:	9516      	str	r5, [sp, #88]	; 0x58
 8014f98:	189e      	adds	r6, r3, r2
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	4b94      	ldr	r3, [pc, #592]	; (80151f0 <_dtoa_r+0x324>)
 8014f9e:	f7ed f9bb 	bl	8002318 <__aeabi_dsub>
 8014fa2:	4a94      	ldr	r2, [pc, #592]	; (80151f4 <_dtoa_r+0x328>)
 8014fa4:	4b94      	ldr	r3, [pc, #592]	; (80151f8 <_dtoa_r+0x32c>)
 8014fa6:	f7ec ff45 	bl	8001e34 <__aeabi_dmul>
 8014faa:	4a94      	ldr	r2, [pc, #592]	; (80151fc <_dtoa_r+0x330>)
 8014fac:	4b94      	ldr	r3, [pc, #592]	; (8015200 <_dtoa_r+0x334>)
 8014fae:	f7ec f81b 	bl	8000fe8 <__aeabi_dadd>
 8014fb2:	0004      	movs	r4, r0
 8014fb4:	0030      	movs	r0, r6
 8014fb6:	000d      	movs	r5, r1
 8014fb8:	f7ed fd48 	bl	8002a4c <__aeabi_i2d>
 8014fbc:	4a91      	ldr	r2, [pc, #580]	; (8015204 <_dtoa_r+0x338>)
 8014fbe:	4b92      	ldr	r3, [pc, #584]	; (8015208 <_dtoa_r+0x33c>)
 8014fc0:	f7ec ff38 	bl	8001e34 <__aeabi_dmul>
 8014fc4:	0002      	movs	r2, r0
 8014fc6:	000b      	movs	r3, r1
 8014fc8:	0020      	movs	r0, r4
 8014fca:	0029      	movs	r1, r5
 8014fcc:	f7ec f80c 	bl	8000fe8 <__aeabi_dadd>
 8014fd0:	0004      	movs	r4, r0
 8014fd2:	000d      	movs	r5, r1
 8014fd4:	f7ed fd04 	bl	80029e0 <__aeabi_d2iz>
 8014fd8:	2200      	movs	r2, #0
 8014fda:	0007      	movs	r7, r0
 8014fdc:	2300      	movs	r3, #0
 8014fde:	0020      	movs	r0, r4
 8014fe0:	0029      	movs	r1, r5
 8014fe2:	f7eb fa41 	bl	8000468 <__aeabi_dcmplt>
 8014fe6:	2800      	cmp	r0, #0
 8014fe8:	d009      	beq.n	8014ffe <_dtoa_r+0x132>
 8014fea:	0038      	movs	r0, r7
 8014fec:	f7ed fd2e 	bl	8002a4c <__aeabi_i2d>
 8014ff0:	002b      	movs	r3, r5
 8014ff2:	0022      	movs	r2, r4
 8014ff4:	f7eb fa32 	bl	800045c <__aeabi_dcmpeq>
 8014ff8:	4243      	negs	r3, r0
 8014ffa:	4158      	adcs	r0, r3
 8014ffc:	1a3f      	subs	r7, r7, r0
 8014ffe:	2301      	movs	r3, #1
 8015000:	9314      	str	r3, [sp, #80]	; 0x50
 8015002:	2f16      	cmp	r7, #22
 8015004:	d80d      	bhi.n	8015022 <_dtoa_r+0x156>
 8015006:	4981      	ldr	r1, [pc, #516]	; (801520c <_dtoa_r+0x340>)
 8015008:	00fb      	lsls	r3, r7, #3
 801500a:	18c9      	adds	r1, r1, r3
 801500c:	6808      	ldr	r0, [r1, #0]
 801500e:	6849      	ldr	r1, [r1, #4]
 8015010:	9a06      	ldr	r2, [sp, #24]
 8015012:	9b07      	ldr	r3, [sp, #28]
 8015014:	f7eb fa3c 	bl	8000490 <__aeabi_dcmpgt>
 8015018:	2800      	cmp	r0, #0
 801501a:	d046      	beq.n	80150aa <_dtoa_r+0x1de>
 801501c:	2300      	movs	r3, #0
 801501e:	3f01      	subs	r7, #1
 8015020:	9314      	str	r3, [sp, #80]	; 0x50
 8015022:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015024:	1b9e      	subs	r6, r3, r6
 8015026:	2300      	movs	r3, #0
 8015028:	930a      	str	r3, [sp, #40]	; 0x28
 801502a:	0033      	movs	r3, r6
 801502c:	3b01      	subs	r3, #1
 801502e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015030:	d504      	bpl.n	801503c <_dtoa_r+0x170>
 8015032:	2301      	movs	r3, #1
 8015034:	1b9b      	subs	r3, r3, r6
 8015036:	930a      	str	r3, [sp, #40]	; 0x28
 8015038:	2300      	movs	r3, #0
 801503a:	930b      	str	r3, [sp, #44]	; 0x2c
 801503c:	2f00      	cmp	r7, #0
 801503e:	db36      	blt.n	80150ae <_dtoa_r+0x1e2>
 8015040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015042:	9711      	str	r7, [sp, #68]	; 0x44
 8015044:	19db      	adds	r3, r3, r7
 8015046:	930b      	str	r3, [sp, #44]	; 0x2c
 8015048:	2300      	movs	r3, #0
 801504a:	9304      	str	r3, [sp, #16]
 801504c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801504e:	2401      	movs	r4, #1
 8015050:	2b09      	cmp	r3, #9
 8015052:	d900      	bls.n	8015056 <_dtoa_r+0x18a>
 8015054:	e082      	b.n	801515c <_dtoa_r+0x290>
 8015056:	2b05      	cmp	r3, #5
 8015058:	dd02      	ble.n	8015060 <_dtoa_r+0x194>
 801505a:	2400      	movs	r4, #0
 801505c:	3b04      	subs	r3, #4
 801505e:	9320      	str	r3, [sp, #128]	; 0x80
 8015060:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015062:	1e98      	subs	r0, r3, #2
 8015064:	2803      	cmp	r0, #3
 8015066:	d900      	bls.n	801506a <_dtoa_r+0x19e>
 8015068:	e082      	b.n	8015170 <_dtoa_r+0x2a4>
 801506a:	f7eb f85d 	bl	8000128 <__gnu_thumb1_case_uqi>
 801506e:	7573      	.short	0x7573
 8015070:	6828      	.short	0x6828
 8015072:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015074:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015076:	189e      	adds	r6, r3, r2
 8015078:	4b65      	ldr	r3, [pc, #404]	; (8015210 <_dtoa_r+0x344>)
 801507a:	18f2      	adds	r2, r6, r3
 801507c:	2a20      	cmp	r2, #32
 801507e:	dd0f      	ble.n	80150a0 <_dtoa_r+0x1d4>
 8015080:	2340      	movs	r3, #64	; 0x40
 8015082:	1a9b      	subs	r3, r3, r2
 8015084:	409c      	lsls	r4, r3
 8015086:	4b63      	ldr	r3, [pc, #396]	; (8015214 <_dtoa_r+0x348>)
 8015088:	9806      	ldr	r0, [sp, #24]
 801508a:	18f3      	adds	r3, r6, r3
 801508c:	40d8      	lsrs	r0, r3
 801508e:	4320      	orrs	r0, r4
 8015090:	f7ed fd16 	bl	8002ac0 <__aeabi_ui2d>
 8015094:	2301      	movs	r3, #1
 8015096:	4c60      	ldr	r4, [pc, #384]	; (8015218 <_dtoa_r+0x34c>)
 8015098:	3e01      	subs	r6, #1
 801509a:	1909      	adds	r1, r1, r4
 801509c:	9316      	str	r3, [sp, #88]	; 0x58
 801509e:	e77c      	b.n	8014f9a <_dtoa_r+0xce>
 80150a0:	2320      	movs	r3, #32
 80150a2:	9806      	ldr	r0, [sp, #24]
 80150a4:	1a9b      	subs	r3, r3, r2
 80150a6:	4098      	lsls	r0, r3
 80150a8:	e7f2      	b.n	8015090 <_dtoa_r+0x1c4>
 80150aa:	9014      	str	r0, [sp, #80]	; 0x50
 80150ac:	e7b9      	b.n	8015022 <_dtoa_r+0x156>
 80150ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150b0:	1bdb      	subs	r3, r3, r7
 80150b2:	930a      	str	r3, [sp, #40]	; 0x28
 80150b4:	427b      	negs	r3, r7
 80150b6:	9304      	str	r3, [sp, #16]
 80150b8:	2300      	movs	r3, #0
 80150ba:	9311      	str	r3, [sp, #68]	; 0x44
 80150bc:	e7c6      	b.n	801504c <_dtoa_r+0x180>
 80150be:	2301      	movs	r3, #1
 80150c0:	930d      	str	r3, [sp, #52]	; 0x34
 80150c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	dd57      	ble.n	8015178 <_dtoa_r+0x2ac>
 80150c8:	930c      	str	r3, [sp, #48]	; 0x30
 80150ca:	9309      	str	r3, [sp, #36]	; 0x24
 80150cc:	2200      	movs	r2, #0
 80150ce:	9902      	ldr	r1, [sp, #8]
 80150d0:	644a      	str	r2, [r1, #68]	; 0x44
 80150d2:	3204      	adds	r2, #4
 80150d4:	0010      	movs	r0, r2
 80150d6:	9902      	ldr	r1, [sp, #8]
 80150d8:	3014      	adds	r0, #20
 80150da:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80150dc:	4298      	cmp	r0, r3
 80150de:	d950      	bls.n	8015182 <_dtoa_r+0x2b6>
 80150e0:	9802      	ldr	r0, [sp, #8]
 80150e2:	f001 f947 	bl	8016374 <_Balloc>
 80150e6:	9b02      	ldr	r3, [sp, #8]
 80150e8:	9008      	str	r0, [sp, #32]
 80150ea:	6418      	str	r0, [r3, #64]	; 0x40
 80150ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150ee:	2b0e      	cmp	r3, #14
 80150f0:	d900      	bls.n	80150f4 <_dtoa_r+0x228>
 80150f2:	e10c      	b.n	801530e <_dtoa_r+0x442>
 80150f4:	2c00      	cmp	r4, #0
 80150f6:	d100      	bne.n	80150fa <_dtoa_r+0x22e>
 80150f8:	e109      	b.n	801530e <_dtoa_r+0x442>
 80150fa:	9b06      	ldr	r3, [sp, #24]
 80150fc:	9c07      	ldr	r4, [sp, #28]
 80150fe:	9312      	str	r3, [sp, #72]	; 0x48
 8015100:	9413      	str	r4, [sp, #76]	; 0x4c
 8015102:	2f00      	cmp	r7, #0
 8015104:	dc00      	bgt.n	8015108 <_dtoa_r+0x23c>
 8015106:	e08b      	b.n	8015220 <_dtoa_r+0x354>
 8015108:	210f      	movs	r1, #15
 801510a:	003a      	movs	r2, r7
 801510c:	4b3f      	ldr	r3, [pc, #252]	; (801520c <_dtoa_r+0x340>)
 801510e:	400a      	ands	r2, r1
 8015110:	00d2      	lsls	r2, r2, #3
 8015112:	189b      	adds	r3, r3, r2
 8015114:	681d      	ldr	r5, [r3, #0]
 8015116:	685e      	ldr	r6, [r3, #4]
 8015118:	2302      	movs	r3, #2
 801511a:	113c      	asrs	r4, r7, #4
 801511c:	930e      	str	r3, [sp, #56]	; 0x38
 801511e:	06e3      	lsls	r3, r4, #27
 8015120:	d50b      	bpl.n	801513a <_dtoa_r+0x26e>
 8015122:	4b3e      	ldr	r3, [pc, #248]	; (801521c <_dtoa_r+0x350>)
 8015124:	400c      	ands	r4, r1
 8015126:	6a1a      	ldr	r2, [r3, #32]
 8015128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801512a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801512c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801512e:	f7ec fa77 	bl	8001620 <__aeabi_ddiv>
 8015132:	2303      	movs	r3, #3
 8015134:	9006      	str	r0, [sp, #24]
 8015136:	9107      	str	r1, [sp, #28]
 8015138:	930e      	str	r3, [sp, #56]	; 0x38
 801513a:	2300      	movs	r3, #0
 801513c:	e03b      	b.n	80151b6 <_dtoa_r+0x2ea>
 801513e:	2301      	movs	r3, #1
 8015140:	930d      	str	r3, [sp, #52]	; 0x34
 8015142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015144:	18fb      	adds	r3, r7, r3
 8015146:	930c      	str	r3, [sp, #48]	; 0x30
 8015148:	3301      	adds	r3, #1
 801514a:	9309      	str	r3, [sp, #36]	; 0x24
 801514c:	2b00      	cmp	r3, #0
 801514e:	dcbd      	bgt.n	80150cc <_dtoa_r+0x200>
 8015150:	2301      	movs	r3, #1
 8015152:	e7bb      	b.n	80150cc <_dtoa_r+0x200>
 8015154:	2300      	movs	r3, #0
 8015156:	e7b3      	b.n	80150c0 <_dtoa_r+0x1f4>
 8015158:	2300      	movs	r3, #0
 801515a:	e7f1      	b.n	8015140 <_dtoa_r+0x274>
 801515c:	2300      	movs	r3, #0
 801515e:	940d      	str	r4, [sp, #52]	; 0x34
 8015160:	9320      	str	r3, [sp, #128]	; 0x80
 8015162:	3b01      	subs	r3, #1
 8015164:	2200      	movs	r2, #0
 8015166:	930c      	str	r3, [sp, #48]	; 0x30
 8015168:	9309      	str	r3, [sp, #36]	; 0x24
 801516a:	3313      	adds	r3, #19
 801516c:	9221      	str	r2, [sp, #132]	; 0x84
 801516e:	e7ad      	b.n	80150cc <_dtoa_r+0x200>
 8015170:	2301      	movs	r3, #1
 8015172:	930d      	str	r3, [sp, #52]	; 0x34
 8015174:	3b02      	subs	r3, #2
 8015176:	e7f5      	b.n	8015164 <_dtoa_r+0x298>
 8015178:	2301      	movs	r3, #1
 801517a:	930c      	str	r3, [sp, #48]	; 0x30
 801517c:	9309      	str	r3, [sp, #36]	; 0x24
 801517e:	001a      	movs	r2, r3
 8015180:	e7f4      	b.n	801516c <_dtoa_r+0x2a0>
 8015182:	9802      	ldr	r0, [sp, #8]
 8015184:	3101      	adds	r1, #1
 8015186:	6441      	str	r1, [r0, #68]	; 0x44
 8015188:	0052      	lsls	r2, r2, #1
 801518a:	e7a3      	b.n	80150d4 <_dtoa_r+0x208>
 801518c:	2301      	movs	r3, #1
 801518e:	421c      	tst	r4, r3
 8015190:	d00e      	beq.n	80151b0 <_dtoa_r+0x2e4>
 8015192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015194:	4a21      	ldr	r2, [pc, #132]	; (801521c <_dtoa_r+0x350>)
 8015196:	3301      	adds	r3, #1
 8015198:	930e      	str	r3, [sp, #56]	; 0x38
 801519a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801519c:	0028      	movs	r0, r5
 801519e:	00db      	lsls	r3, r3, #3
 80151a0:	189b      	adds	r3, r3, r2
 80151a2:	0031      	movs	r1, r6
 80151a4:	681a      	ldr	r2, [r3, #0]
 80151a6:	685b      	ldr	r3, [r3, #4]
 80151a8:	f7ec fe44 	bl	8001e34 <__aeabi_dmul>
 80151ac:	0005      	movs	r5, r0
 80151ae:	000e      	movs	r6, r1
 80151b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80151b2:	1064      	asrs	r4, r4, #1
 80151b4:	3301      	adds	r3, #1
 80151b6:	9310      	str	r3, [sp, #64]	; 0x40
 80151b8:	2c00      	cmp	r4, #0
 80151ba:	d1e7      	bne.n	801518c <_dtoa_r+0x2c0>
 80151bc:	9806      	ldr	r0, [sp, #24]
 80151be:	9907      	ldr	r1, [sp, #28]
 80151c0:	002a      	movs	r2, r5
 80151c2:	0033      	movs	r3, r6
 80151c4:	f7ec fa2c 	bl	8001620 <__aeabi_ddiv>
 80151c8:	9006      	str	r0, [sp, #24]
 80151ca:	9107      	str	r1, [sp, #28]
 80151cc:	e043      	b.n	8015256 <_dtoa_r+0x38a>
 80151ce:	46c0      	nop			; (mov r8, r8)
 80151d0:	7ff00000 	.word	0x7ff00000
 80151d4:	0000270f 	.word	0x0000270f
 80151d8:	0801a036 	.word	0x0801a036
 80151dc:	0801a039 	.word	0x0801a039
 80151e0:	08019f0a 	.word	0x08019f0a
 80151e4:	08019f0b 	.word	0x08019f0b
 80151e8:	3ff00000 	.word	0x3ff00000
 80151ec:	fffffc01 	.word	0xfffffc01
 80151f0:	3ff80000 	.word	0x3ff80000
 80151f4:	636f4361 	.word	0x636f4361
 80151f8:	3fd287a7 	.word	0x3fd287a7
 80151fc:	8b60c8b3 	.word	0x8b60c8b3
 8015200:	3fc68a28 	.word	0x3fc68a28
 8015204:	509f79fb 	.word	0x509f79fb
 8015208:	3fd34413 	.word	0x3fd34413
 801520c:	0801a068 	.word	0x0801a068
 8015210:	00000432 	.word	0x00000432
 8015214:	00000412 	.word	0x00000412
 8015218:	fe100000 	.word	0xfe100000
 801521c:	0801a040 	.word	0x0801a040
 8015220:	2302      	movs	r3, #2
 8015222:	930e      	str	r3, [sp, #56]	; 0x38
 8015224:	2f00      	cmp	r7, #0
 8015226:	d016      	beq.n	8015256 <_dtoa_r+0x38a>
 8015228:	9812      	ldr	r0, [sp, #72]	; 0x48
 801522a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801522c:	427c      	negs	r4, r7
 801522e:	330d      	adds	r3, #13
 8015230:	4023      	ands	r3, r4
 8015232:	4acf      	ldr	r2, [pc, #828]	; (8015570 <_dtoa_r+0x6a4>)
 8015234:	00db      	lsls	r3, r3, #3
 8015236:	18d3      	adds	r3, r2, r3
 8015238:	681a      	ldr	r2, [r3, #0]
 801523a:	685b      	ldr	r3, [r3, #4]
 801523c:	f7ec fdfa 	bl	8001e34 <__aeabi_dmul>
 8015240:	2300      	movs	r3, #0
 8015242:	2601      	movs	r6, #1
 8015244:	001d      	movs	r5, r3
 8015246:	9006      	str	r0, [sp, #24]
 8015248:	9107      	str	r1, [sp, #28]
 801524a:	1124      	asrs	r4, r4, #4
 801524c:	2c00      	cmp	r4, #0
 801524e:	d000      	beq.n	8015252 <_dtoa_r+0x386>
 8015250:	e08c      	b.n	801536c <_dtoa_r+0x4a0>
 8015252:	2b00      	cmp	r3, #0
 8015254:	d1b8      	bne.n	80151c8 <_dtoa_r+0x2fc>
 8015256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015258:	2b00      	cmp	r3, #0
 801525a:	d100      	bne.n	801525e <_dtoa_r+0x392>
 801525c:	e096      	b.n	801538c <_dtoa_r+0x4c0>
 801525e:	9c06      	ldr	r4, [sp, #24]
 8015260:	9d07      	ldr	r5, [sp, #28]
 8015262:	2200      	movs	r2, #0
 8015264:	4bc3      	ldr	r3, [pc, #780]	; (8015574 <_dtoa_r+0x6a8>)
 8015266:	0020      	movs	r0, r4
 8015268:	0029      	movs	r1, r5
 801526a:	f7eb f8fd 	bl	8000468 <__aeabi_dcmplt>
 801526e:	2800      	cmp	r0, #0
 8015270:	d100      	bne.n	8015274 <_dtoa_r+0x3a8>
 8015272:	e08b      	b.n	801538c <_dtoa_r+0x4c0>
 8015274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015276:	2b00      	cmp	r3, #0
 8015278:	d100      	bne.n	801527c <_dtoa_r+0x3b0>
 801527a:	e087      	b.n	801538c <_dtoa_r+0x4c0>
 801527c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801527e:	2b00      	cmp	r3, #0
 8015280:	dd41      	ble.n	8015306 <_dtoa_r+0x43a>
 8015282:	4bbd      	ldr	r3, [pc, #756]	; (8015578 <_dtoa_r+0x6ac>)
 8015284:	2200      	movs	r2, #0
 8015286:	0020      	movs	r0, r4
 8015288:	0029      	movs	r1, r5
 801528a:	f7ec fdd3 	bl	8001e34 <__aeabi_dmul>
 801528e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015290:	9006      	str	r0, [sp, #24]
 8015292:	9107      	str	r1, [sp, #28]
 8015294:	3301      	adds	r3, #1
 8015296:	930e      	str	r3, [sp, #56]	; 0x38
 8015298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801529a:	1e7e      	subs	r6, r7, #1
 801529c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801529e:	9310      	str	r3, [sp, #64]	; 0x40
 80152a0:	f7ed fbd4 	bl	8002a4c <__aeabi_i2d>
 80152a4:	9a06      	ldr	r2, [sp, #24]
 80152a6:	9b07      	ldr	r3, [sp, #28]
 80152a8:	f7ec fdc4 	bl	8001e34 <__aeabi_dmul>
 80152ac:	2200      	movs	r2, #0
 80152ae:	4bb3      	ldr	r3, [pc, #716]	; (801557c <_dtoa_r+0x6b0>)
 80152b0:	f7eb fe9a 	bl	8000fe8 <__aeabi_dadd>
 80152b4:	4ab2      	ldr	r2, [pc, #712]	; (8015580 <_dtoa_r+0x6b4>)
 80152b6:	900e      	str	r0, [sp, #56]	; 0x38
 80152b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80152ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80152bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80152be:	4694      	mov	ip, r2
 80152c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152c2:	4463      	add	r3, ip
 80152c4:	9315      	str	r3, [sp, #84]	; 0x54
 80152c6:	001d      	movs	r5, r3
 80152c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d161      	bne.n	8015392 <_dtoa_r+0x4c6>
 80152ce:	9806      	ldr	r0, [sp, #24]
 80152d0:	9907      	ldr	r1, [sp, #28]
 80152d2:	2200      	movs	r2, #0
 80152d4:	4bab      	ldr	r3, [pc, #684]	; (8015584 <_dtoa_r+0x6b8>)
 80152d6:	f7ed f81f 	bl	8002318 <__aeabi_dsub>
 80152da:	0022      	movs	r2, r4
 80152dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152de:	9006      	str	r0, [sp, #24]
 80152e0:	9107      	str	r1, [sp, #28]
 80152e2:	f7eb f8d5 	bl	8000490 <__aeabi_dcmpgt>
 80152e6:	2800      	cmp	r0, #0
 80152e8:	d000      	beq.n	80152ec <_dtoa_r+0x420>
 80152ea:	e2aa      	b.n	8015842 <_dtoa_r+0x976>
 80152ec:	48a6      	ldr	r0, [pc, #664]	; (8015588 <_dtoa_r+0x6bc>)
 80152ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80152f0:	4684      	mov	ip, r0
 80152f2:	4461      	add	r1, ip
 80152f4:	000b      	movs	r3, r1
 80152f6:	9806      	ldr	r0, [sp, #24]
 80152f8:	9907      	ldr	r1, [sp, #28]
 80152fa:	0022      	movs	r2, r4
 80152fc:	f7eb f8b4 	bl	8000468 <__aeabi_dcmplt>
 8015300:	2800      	cmp	r0, #0
 8015302:	d000      	beq.n	8015306 <_dtoa_r+0x43a>
 8015304:	e297      	b.n	8015836 <_dtoa_r+0x96a>
 8015306:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015308:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801530a:	9306      	str	r3, [sp, #24]
 801530c:	9407      	str	r4, [sp, #28]
 801530e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015310:	2b00      	cmp	r3, #0
 8015312:	da00      	bge.n	8015316 <_dtoa_r+0x44a>
 8015314:	e15e      	b.n	80155d4 <_dtoa_r+0x708>
 8015316:	2f0e      	cmp	r7, #14
 8015318:	dd00      	ble.n	801531c <_dtoa_r+0x450>
 801531a:	e15b      	b.n	80155d4 <_dtoa_r+0x708>
 801531c:	4b94      	ldr	r3, [pc, #592]	; (8015570 <_dtoa_r+0x6a4>)
 801531e:	00fa      	lsls	r2, r7, #3
 8015320:	189b      	adds	r3, r3, r2
 8015322:	685c      	ldr	r4, [r3, #4]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	9304      	str	r3, [sp, #16]
 8015328:	9405      	str	r4, [sp, #20]
 801532a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801532c:	2b00      	cmp	r3, #0
 801532e:	db00      	blt.n	8015332 <_dtoa_r+0x466>
 8015330:	e0da      	b.n	80154e8 <_dtoa_r+0x61c>
 8015332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015334:	2b00      	cmp	r3, #0
 8015336:	dd00      	ble.n	801533a <_dtoa_r+0x46e>
 8015338:	e0d6      	b.n	80154e8 <_dtoa_r+0x61c>
 801533a:	d000      	beq.n	801533e <_dtoa_r+0x472>
 801533c:	e27f      	b.n	801583e <_dtoa_r+0x972>
 801533e:	9804      	ldr	r0, [sp, #16]
 8015340:	9905      	ldr	r1, [sp, #20]
 8015342:	2200      	movs	r2, #0
 8015344:	4b8f      	ldr	r3, [pc, #572]	; (8015584 <_dtoa_r+0x6b8>)
 8015346:	f7ec fd75 	bl	8001e34 <__aeabi_dmul>
 801534a:	9a06      	ldr	r2, [sp, #24]
 801534c:	9b07      	ldr	r3, [sp, #28]
 801534e:	f7eb f8a9 	bl	80004a4 <__aeabi_dcmpge>
 8015352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015354:	9304      	str	r3, [sp, #16]
 8015356:	001e      	movs	r6, r3
 8015358:	2800      	cmp	r0, #0
 801535a:	d000      	beq.n	801535e <_dtoa_r+0x492>
 801535c:	e251      	b.n	8015802 <_dtoa_r+0x936>
 801535e:	9b08      	ldr	r3, [sp, #32]
 8015360:	9a08      	ldr	r2, [sp, #32]
 8015362:	1c5d      	adds	r5, r3, #1
 8015364:	2331      	movs	r3, #49	; 0x31
 8015366:	3701      	adds	r7, #1
 8015368:	7013      	strb	r3, [r2, #0]
 801536a:	e24d      	b.n	8015808 <_dtoa_r+0x93c>
 801536c:	4234      	tst	r4, r6
 801536e:	d00a      	beq.n	8015386 <_dtoa_r+0x4ba>
 8015370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015372:	4a86      	ldr	r2, [pc, #536]	; (801558c <_dtoa_r+0x6c0>)
 8015374:	3301      	adds	r3, #1
 8015376:	930e      	str	r3, [sp, #56]	; 0x38
 8015378:	00eb      	lsls	r3, r5, #3
 801537a:	189b      	adds	r3, r3, r2
 801537c:	681a      	ldr	r2, [r3, #0]
 801537e:	685b      	ldr	r3, [r3, #4]
 8015380:	f7ec fd58 	bl	8001e34 <__aeabi_dmul>
 8015384:	0033      	movs	r3, r6
 8015386:	1064      	asrs	r4, r4, #1
 8015388:	3501      	adds	r5, #1
 801538a:	e75f      	b.n	801524c <_dtoa_r+0x380>
 801538c:	003e      	movs	r6, r7
 801538e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015390:	e784      	b.n	801529c <_dtoa_r+0x3d0>
 8015392:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015394:	1e5a      	subs	r2, r3, #1
 8015396:	4b76      	ldr	r3, [pc, #472]	; (8015570 <_dtoa_r+0x6a4>)
 8015398:	00d2      	lsls	r2, r2, #3
 801539a:	189b      	adds	r3, r3, r2
 801539c:	6818      	ldr	r0, [r3, #0]
 801539e:	6859      	ldr	r1, [r3, #4]
 80153a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d04b      	beq.n	801543e <_dtoa_r+0x572>
 80153a6:	0002      	movs	r2, r0
 80153a8:	000b      	movs	r3, r1
 80153aa:	2000      	movs	r0, #0
 80153ac:	4978      	ldr	r1, [pc, #480]	; (8015590 <_dtoa_r+0x6c4>)
 80153ae:	f7ec f937 	bl	8001620 <__aeabi_ddiv>
 80153b2:	002b      	movs	r3, r5
 80153b4:	0022      	movs	r2, r4
 80153b6:	f7ec ffaf 	bl	8002318 <__aeabi_dsub>
 80153ba:	9b08      	ldr	r3, [sp, #32]
 80153bc:	900e      	str	r0, [sp, #56]	; 0x38
 80153be:	910f      	str	r1, [sp, #60]	; 0x3c
 80153c0:	9315      	str	r3, [sp, #84]	; 0x54
 80153c2:	9806      	ldr	r0, [sp, #24]
 80153c4:	9907      	ldr	r1, [sp, #28]
 80153c6:	f7ed fb0b 	bl	80029e0 <__aeabi_d2iz>
 80153ca:	0004      	movs	r4, r0
 80153cc:	f7ed fb3e 	bl	8002a4c <__aeabi_i2d>
 80153d0:	0002      	movs	r2, r0
 80153d2:	000b      	movs	r3, r1
 80153d4:	9806      	ldr	r0, [sp, #24]
 80153d6:	9907      	ldr	r1, [sp, #28]
 80153d8:	f7ec ff9e 	bl	8002318 <__aeabi_dsub>
 80153dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153de:	3430      	adds	r4, #48	; 0x30
 80153e0:	1c5d      	adds	r5, r3, #1
 80153e2:	701c      	strb	r4, [r3, #0]
 80153e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80153e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153e8:	9006      	str	r0, [sp, #24]
 80153ea:	9107      	str	r1, [sp, #28]
 80153ec:	f7eb f83c 	bl	8000468 <__aeabi_dcmplt>
 80153f0:	2800      	cmp	r0, #0
 80153f2:	d16c      	bne.n	80154ce <_dtoa_r+0x602>
 80153f4:	9a06      	ldr	r2, [sp, #24]
 80153f6:	9b07      	ldr	r3, [sp, #28]
 80153f8:	2000      	movs	r0, #0
 80153fa:	495e      	ldr	r1, [pc, #376]	; (8015574 <_dtoa_r+0x6a8>)
 80153fc:	f7ec ff8c 	bl	8002318 <__aeabi_dsub>
 8015400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015404:	f7eb f830 	bl	8000468 <__aeabi_dcmplt>
 8015408:	2800      	cmp	r0, #0
 801540a:	d000      	beq.n	801540e <_dtoa_r+0x542>
 801540c:	e0c3      	b.n	8015596 <_dtoa_r+0x6ca>
 801540e:	9b08      	ldr	r3, [sp, #32]
 8015410:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015412:	1aeb      	subs	r3, r5, r3
 8015414:	429a      	cmp	r2, r3
 8015416:	dc00      	bgt.n	801541a <_dtoa_r+0x54e>
 8015418:	e775      	b.n	8015306 <_dtoa_r+0x43a>
 801541a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801541c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801541e:	2200      	movs	r2, #0
 8015420:	4b55      	ldr	r3, [pc, #340]	; (8015578 <_dtoa_r+0x6ac>)
 8015422:	f7ec fd07 	bl	8001e34 <__aeabi_dmul>
 8015426:	2200      	movs	r2, #0
 8015428:	900e      	str	r0, [sp, #56]	; 0x38
 801542a:	910f      	str	r1, [sp, #60]	; 0x3c
 801542c:	9806      	ldr	r0, [sp, #24]
 801542e:	9907      	ldr	r1, [sp, #28]
 8015430:	4b51      	ldr	r3, [pc, #324]	; (8015578 <_dtoa_r+0x6ac>)
 8015432:	f7ec fcff 	bl	8001e34 <__aeabi_dmul>
 8015436:	9515      	str	r5, [sp, #84]	; 0x54
 8015438:	9006      	str	r0, [sp, #24]
 801543a:	9107      	str	r1, [sp, #28]
 801543c:	e7c1      	b.n	80153c2 <_dtoa_r+0x4f6>
 801543e:	0022      	movs	r2, r4
 8015440:	002b      	movs	r3, r5
 8015442:	f7ec fcf7 	bl	8001e34 <__aeabi_dmul>
 8015446:	9c08      	ldr	r4, [sp, #32]
 8015448:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801544a:	0023      	movs	r3, r4
 801544c:	4694      	mov	ip, r2
 801544e:	900e      	str	r0, [sp, #56]	; 0x38
 8015450:	910f      	str	r1, [sp, #60]	; 0x3c
 8015452:	4463      	add	r3, ip
 8015454:	9315      	str	r3, [sp, #84]	; 0x54
 8015456:	9806      	ldr	r0, [sp, #24]
 8015458:	9907      	ldr	r1, [sp, #28]
 801545a:	f7ed fac1 	bl	80029e0 <__aeabi_d2iz>
 801545e:	0005      	movs	r5, r0
 8015460:	f7ed faf4 	bl	8002a4c <__aeabi_i2d>
 8015464:	000b      	movs	r3, r1
 8015466:	0002      	movs	r2, r0
 8015468:	9806      	ldr	r0, [sp, #24]
 801546a:	9907      	ldr	r1, [sp, #28]
 801546c:	f7ec ff54 	bl	8002318 <__aeabi_dsub>
 8015470:	3530      	adds	r5, #48	; 0x30
 8015472:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015474:	7025      	strb	r5, [r4, #0]
 8015476:	3401      	adds	r4, #1
 8015478:	9006      	str	r0, [sp, #24]
 801547a:	9107      	str	r1, [sp, #28]
 801547c:	42a3      	cmp	r3, r4
 801547e:	d12a      	bne.n	80154d6 <_dtoa_r+0x60a>
 8015480:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015482:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015484:	9a08      	ldr	r2, [sp, #32]
 8015486:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015488:	4694      	mov	ip, r2
 801548a:	4463      	add	r3, ip
 801548c:	2200      	movs	r2, #0
 801548e:	001d      	movs	r5, r3
 8015490:	4b3f      	ldr	r3, [pc, #252]	; (8015590 <_dtoa_r+0x6c4>)
 8015492:	f7eb fda9 	bl	8000fe8 <__aeabi_dadd>
 8015496:	0002      	movs	r2, r0
 8015498:	000b      	movs	r3, r1
 801549a:	9806      	ldr	r0, [sp, #24]
 801549c:	9907      	ldr	r1, [sp, #28]
 801549e:	f7ea fff7 	bl	8000490 <__aeabi_dcmpgt>
 80154a2:	2800      	cmp	r0, #0
 80154a4:	d000      	beq.n	80154a8 <_dtoa_r+0x5dc>
 80154a6:	e076      	b.n	8015596 <_dtoa_r+0x6ca>
 80154a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80154aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154ac:	2000      	movs	r0, #0
 80154ae:	4938      	ldr	r1, [pc, #224]	; (8015590 <_dtoa_r+0x6c4>)
 80154b0:	f7ec ff32 	bl	8002318 <__aeabi_dsub>
 80154b4:	0002      	movs	r2, r0
 80154b6:	000b      	movs	r3, r1
 80154b8:	9806      	ldr	r0, [sp, #24]
 80154ba:	9907      	ldr	r1, [sp, #28]
 80154bc:	f7ea ffd4 	bl	8000468 <__aeabi_dcmplt>
 80154c0:	2800      	cmp	r0, #0
 80154c2:	d100      	bne.n	80154c6 <_dtoa_r+0x5fa>
 80154c4:	e71f      	b.n	8015306 <_dtoa_r+0x43a>
 80154c6:	1e6b      	subs	r3, r5, #1
 80154c8:	781a      	ldrb	r2, [r3, #0]
 80154ca:	2a30      	cmp	r2, #48	; 0x30
 80154cc:	d001      	beq.n	80154d2 <_dtoa_r+0x606>
 80154ce:	0037      	movs	r7, r6
 80154d0:	e03f      	b.n	8015552 <_dtoa_r+0x686>
 80154d2:	001d      	movs	r5, r3
 80154d4:	e7f7      	b.n	80154c6 <_dtoa_r+0x5fa>
 80154d6:	9806      	ldr	r0, [sp, #24]
 80154d8:	9907      	ldr	r1, [sp, #28]
 80154da:	2200      	movs	r2, #0
 80154dc:	4b26      	ldr	r3, [pc, #152]	; (8015578 <_dtoa_r+0x6ac>)
 80154de:	f7ec fca9 	bl	8001e34 <__aeabi_dmul>
 80154e2:	9006      	str	r0, [sp, #24]
 80154e4:	9107      	str	r1, [sp, #28]
 80154e6:	e7b6      	b.n	8015456 <_dtoa_r+0x58a>
 80154e8:	9e08      	ldr	r6, [sp, #32]
 80154ea:	9a04      	ldr	r2, [sp, #16]
 80154ec:	9b05      	ldr	r3, [sp, #20]
 80154ee:	9806      	ldr	r0, [sp, #24]
 80154f0:	9907      	ldr	r1, [sp, #28]
 80154f2:	f7ec f895 	bl	8001620 <__aeabi_ddiv>
 80154f6:	f7ed fa73 	bl	80029e0 <__aeabi_d2iz>
 80154fa:	0004      	movs	r4, r0
 80154fc:	f7ed faa6 	bl	8002a4c <__aeabi_i2d>
 8015500:	9a04      	ldr	r2, [sp, #16]
 8015502:	9b05      	ldr	r3, [sp, #20]
 8015504:	f7ec fc96 	bl	8001e34 <__aeabi_dmul>
 8015508:	0002      	movs	r2, r0
 801550a:	000b      	movs	r3, r1
 801550c:	9806      	ldr	r0, [sp, #24]
 801550e:	9907      	ldr	r1, [sp, #28]
 8015510:	f7ec ff02 	bl	8002318 <__aeabi_dsub>
 8015514:	0023      	movs	r3, r4
 8015516:	3330      	adds	r3, #48	; 0x30
 8015518:	7033      	strb	r3, [r6, #0]
 801551a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801551c:	9b08      	ldr	r3, [sp, #32]
 801551e:	1c75      	adds	r5, r6, #1
 8015520:	1aeb      	subs	r3, r5, r3
 8015522:	429a      	cmp	r2, r3
 8015524:	d148      	bne.n	80155b8 <_dtoa_r+0x6ec>
 8015526:	0002      	movs	r2, r0
 8015528:	000b      	movs	r3, r1
 801552a:	f7eb fd5d 	bl	8000fe8 <__aeabi_dadd>
 801552e:	9a04      	ldr	r2, [sp, #16]
 8015530:	9b05      	ldr	r3, [sp, #20]
 8015532:	9006      	str	r0, [sp, #24]
 8015534:	9107      	str	r1, [sp, #28]
 8015536:	f7ea ffab 	bl	8000490 <__aeabi_dcmpgt>
 801553a:	2800      	cmp	r0, #0
 801553c:	d12a      	bne.n	8015594 <_dtoa_r+0x6c8>
 801553e:	9a04      	ldr	r2, [sp, #16]
 8015540:	9b05      	ldr	r3, [sp, #20]
 8015542:	9806      	ldr	r0, [sp, #24]
 8015544:	9907      	ldr	r1, [sp, #28]
 8015546:	f7ea ff89 	bl	800045c <__aeabi_dcmpeq>
 801554a:	2800      	cmp	r0, #0
 801554c:	d001      	beq.n	8015552 <_dtoa_r+0x686>
 801554e:	07e3      	lsls	r3, r4, #31
 8015550:	d420      	bmi.n	8015594 <_dtoa_r+0x6c8>
 8015552:	9903      	ldr	r1, [sp, #12]
 8015554:	9802      	ldr	r0, [sp, #8]
 8015556:	f000 ff35 	bl	80163c4 <_Bfree>
 801555a:	2300      	movs	r3, #0
 801555c:	702b      	strb	r3, [r5, #0]
 801555e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015560:	3701      	adds	r7, #1
 8015562:	601f      	str	r7, [r3, #0]
 8015564:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015566:	2b00      	cmp	r3, #0
 8015568:	d100      	bne.n	801556c <_dtoa_r+0x6a0>
 801556a:	e4e4      	b.n	8014f36 <_dtoa_r+0x6a>
 801556c:	601d      	str	r5, [r3, #0]
 801556e:	e4e2      	b.n	8014f36 <_dtoa_r+0x6a>
 8015570:	0801a068 	.word	0x0801a068
 8015574:	3ff00000 	.word	0x3ff00000
 8015578:	40240000 	.word	0x40240000
 801557c:	401c0000 	.word	0x401c0000
 8015580:	fcc00000 	.word	0xfcc00000
 8015584:	40140000 	.word	0x40140000
 8015588:	7cc00000 	.word	0x7cc00000
 801558c:	0801a040 	.word	0x0801a040
 8015590:	3fe00000 	.word	0x3fe00000
 8015594:	003e      	movs	r6, r7
 8015596:	1e6b      	subs	r3, r5, #1
 8015598:	781a      	ldrb	r2, [r3, #0]
 801559a:	2a39      	cmp	r2, #57	; 0x39
 801559c:	d106      	bne.n	80155ac <_dtoa_r+0x6e0>
 801559e:	9a08      	ldr	r2, [sp, #32]
 80155a0:	429a      	cmp	r2, r3
 80155a2:	d107      	bne.n	80155b4 <_dtoa_r+0x6e8>
 80155a4:	2330      	movs	r3, #48	; 0x30
 80155a6:	7013      	strb	r3, [r2, #0]
 80155a8:	0013      	movs	r3, r2
 80155aa:	3601      	adds	r6, #1
 80155ac:	781a      	ldrb	r2, [r3, #0]
 80155ae:	3201      	adds	r2, #1
 80155b0:	701a      	strb	r2, [r3, #0]
 80155b2:	e78c      	b.n	80154ce <_dtoa_r+0x602>
 80155b4:	001d      	movs	r5, r3
 80155b6:	e7ee      	b.n	8015596 <_dtoa_r+0x6ca>
 80155b8:	2200      	movs	r2, #0
 80155ba:	4ba4      	ldr	r3, [pc, #656]	; (801584c <_dtoa_r+0x980>)
 80155bc:	f7ec fc3a 	bl	8001e34 <__aeabi_dmul>
 80155c0:	2200      	movs	r2, #0
 80155c2:	2300      	movs	r3, #0
 80155c4:	9006      	str	r0, [sp, #24]
 80155c6:	9107      	str	r1, [sp, #28]
 80155c8:	002e      	movs	r6, r5
 80155ca:	f7ea ff47 	bl	800045c <__aeabi_dcmpeq>
 80155ce:	2800      	cmp	r0, #0
 80155d0:	d08b      	beq.n	80154ea <_dtoa_r+0x61e>
 80155d2:	e7be      	b.n	8015552 <_dtoa_r+0x686>
 80155d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155d6:	2a00      	cmp	r2, #0
 80155d8:	d100      	bne.n	80155dc <_dtoa_r+0x710>
 80155da:	e0da      	b.n	8015792 <_dtoa_r+0x8c6>
 80155dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80155de:	2a01      	cmp	r2, #1
 80155e0:	dd00      	ble.n	80155e4 <_dtoa_r+0x718>
 80155e2:	e0bd      	b.n	8015760 <_dtoa_r+0x894>
 80155e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80155e6:	2a00      	cmp	r2, #0
 80155e8:	d100      	bne.n	80155ec <_dtoa_r+0x720>
 80155ea:	e0b5      	b.n	8015758 <_dtoa_r+0x88c>
 80155ec:	4a98      	ldr	r2, [pc, #608]	; (8015850 <_dtoa_r+0x984>)
 80155ee:	189b      	adds	r3, r3, r2
 80155f0:	9d04      	ldr	r5, [sp, #16]
 80155f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80155f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80155f6:	2101      	movs	r1, #1
 80155f8:	18d2      	adds	r2, r2, r3
 80155fa:	920a      	str	r2, [sp, #40]	; 0x28
 80155fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80155fe:	9802      	ldr	r0, [sp, #8]
 8015600:	18d3      	adds	r3, r2, r3
 8015602:	930b      	str	r3, [sp, #44]	; 0x2c
 8015604:	f000 ffad 	bl	8016562 <__i2b>
 8015608:	0006      	movs	r6, r0
 801560a:	2c00      	cmp	r4, #0
 801560c:	dd0e      	ble.n	801562c <_dtoa_r+0x760>
 801560e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015610:	2b00      	cmp	r3, #0
 8015612:	dd0b      	ble.n	801562c <_dtoa_r+0x760>
 8015614:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015616:	0023      	movs	r3, r4
 8015618:	4294      	cmp	r4, r2
 801561a:	dd00      	ble.n	801561e <_dtoa_r+0x752>
 801561c:	0013      	movs	r3, r2
 801561e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015620:	1ae4      	subs	r4, r4, r3
 8015622:	1ad2      	subs	r2, r2, r3
 8015624:	920a      	str	r2, [sp, #40]	; 0x28
 8015626:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015628:	1ad3      	subs	r3, r2, r3
 801562a:	930b      	str	r3, [sp, #44]	; 0x2c
 801562c:	9b04      	ldr	r3, [sp, #16]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d01f      	beq.n	8015672 <_dtoa_r+0x7a6>
 8015632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015634:	2b00      	cmp	r3, #0
 8015636:	d100      	bne.n	801563a <_dtoa_r+0x76e>
 8015638:	e0af      	b.n	801579a <_dtoa_r+0x8ce>
 801563a:	2d00      	cmp	r5, #0
 801563c:	d011      	beq.n	8015662 <_dtoa_r+0x796>
 801563e:	0031      	movs	r1, r6
 8015640:	002a      	movs	r2, r5
 8015642:	9802      	ldr	r0, [sp, #8]
 8015644:	f001 f826 	bl	8016694 <__pow5mult>
 8015648:	9a03      	ldr	r2, [sp, #12]
 801564a:	0001      	movs	r1, r0
 801564c:	0006      	movs	r6, r0
 801564e:	9802      	ldr	r0, [sp, #8]
 8015650:	f000 ff90 	bl	8016574 <__multiply>
 8015654:	9903      	ldr	r1, [sp, #12]
 8015656:	9010      	str	r0, [sp, #64]	; 0x40
 8015658:	9802      	ldr	r0, [sp, #8]
 801565a:	f000 feb3 	bl	80163c4 <_Bfree>
 801565e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015660:	9303      	str	r3, [sp, #12]
 8015662:	9b04      	ldr	r3, [sp, #16]
 8015664:	1b5a      	subs	r2, r3, r5
 8015666:	d004      	beq.n	8015672 <_dtoa_r+0x7a6>
 8015668:	9903      	ldr	r1, [sp, #12]
 801566a:	9802      	ldr	r0, [sp, #8]
 801566c:	f001 f812 	bl	8016694 <__pow5mult>
 8015670:	9003      	str	r0, [sp, #12]
 8015672:	2101      	movs	r1, #1
 8015674:	9802      	ldr	r0, [sp, #8]
 8015676:	f000 ff74 	bl	8016562 <__i2b>
 801567a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801567c:	9004      	str	r0, [sp, #16]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d100      	bne.n	8015684 <_dtoa_r+0x7b8>
 8015682:	e1e3      	b.n	8015a4c <_dtoa_r+0xb80>
 8015684:	001a      	movs	r2, r3
 8015686:	0001      	movs	r1, r0
 8015688:	9802      	ldr	r0, [sp, #8]
 801568a:	f001 f803 	bl	8016694 <__pow5mult>
 801568e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015690:	9004      	str	r0, [sp, #16]
 8015692:	2b01      	cmp	r3, #1
 8015694:	dd00      	ble.n	8015698 <_dtoa_r+0x7cc>
 8015696:	e082      	b.n	801579e <_dtoa_r+0x8d2>
 8015698:	2500      	movs	r5, #0
 801569a:	9b06      	ldr	r3, [sp, #24]
 801569c:	42ab      	cmp	r3, r5
 801569e:	d10e      	bne.n	80156be <_dtoa_r+0x7f2>
 80156a0:	9b07      	ldr	r3, [sp, #28]
 80156a2:	031b      	lsls	r3, r3, #12
 80156a4:	42ab      	cmp	r3, r5
 80156a6:	d10a      	bne.n	80156be <_dtoa_r+0x7f2>
 80156a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80156aa:	9a07      	ldr	r2, [sp, #28]
 80156ac:	4213      	tst	r3, r2
 80156ae:	d006      	beq.n	80156be <_dtoa_r+0x7f2>
 80156b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156b2:	3501      	adds	r5, #1
 80156b4:	3301      	adds	r3, #1
 80156b6:	930a      	str	r3, [sp, #40]	; 0x28
 80156b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156ba:	3301      	adds	r3, #1
 80156bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80156be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80156c0:	2001      	movs	r0, #1
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d16c      	bne.n	80157a0 <_dtoa_r+0x8d4>
 80156c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156c8:	1818      	adds	r0, r3, r0
 80156ca:	231f      	movs	r3, #31
 80156cc:	4018      	ands	r0, r3
 80156ce:	d07e      	beq.n	80157ce <_dtoa_r+0x902>
 80156d0:	3301      	adds	r3, #1
 80156d2:	1a1b      	subs	r3, r3, r0
 80156d4:	2b04      	cmp	r3, #4
 80156d6:	dd70      	ble.n	80157ba <_dtoa_r+0x8ee>
 80156d8:	231c      	movs	r3, #28
 80156da:	1a18      	subs	r0, r3, r0
 80156dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156de:	1824      	adds	r4, r4, r0
 80156e0:	181b      	adds	r3, r3, r0
 80156e2:	930a      	str	r3, [sp, #40]	; 0x28
 80156e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156e6:	181b      	adds	r3, r3, r0
 80156e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80156ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	dd05      	ble.n	80156fc <_dtoa_r+0x830>
 80156f0:	001a      	movs	r2, r3
 80156f2:	9903      	ldr	r1, [sp, #12]
 80156f4:	9802      	ldr	r0, [sp, #8]
 80156f6:	f001 f80f 	bl	8016718 <__lshift>
 80156fa:	9003      	str	r0, [sp, #12]
 80156fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156fe:	2b00      	cmp	r3, #0
 8015700:	dd05      	ble.n	801570e <_dtoa_r+0x842>
 8015702:	001a      	movs	r2, r3
 8015704:	9904      	ldr	r1, [sp, #16]
 8015706:	9802      	ldr	r0, [sp, #8]
 8015708:	f001 f806 	bl	8016718 <__lshift>
 801570c:	9004      	str	r0, [sp, #16]
 801570e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015710:	2b00      	cmp	r3, #0
 8015712:	d05e      	beq.n	80157d2 <_dtoa_r+0x906>
 8015714:	9904      	ldr	r1, [sp, #16]
 8015716:	9803      	ldr	r0, [sp, #12]
 8015718:	f001 f850 	bl	80167bc <__mcmp>
 801571c:	2800      	cmp	r0, #0
 801571e:	da58      	bge.n	80157d2 <_dtoa_r+0x906>
 8015720:	2300      	movs	r3, #0
 8015722:	220a      	movs	r2, #10
 8015724:	9903      	ldr	r1, [sp, #12]
 8015726:	9802      	ldr	r0, [sp, #8]
 8015728:	f000 fe56 	bl	80163d8 <__multadd>
 801572c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801572e:	3f01      	subs	r7, #1
 8015730:	9003      	str	r0, [sp, #12]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d100      	bne.n	8015738 <_dtoa_r+0x86c>
 8015736:	e190      	b.n	8015a5a <_dtoa_r+0xb8e>
 8015738:	2300      	movs	r3, #0
 801573a:	0031      	movs	r1, r6
 801573c:	220a      	movs	r2, #10
 801573e:	9802      	ldr	r0, [sp, #8]
 8015740:	f000 fe4a 	bl	80163d8 <__multadd>
 8015744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015746:	0006      	movs	r6, r0
 8015748:	2b00      	cmp	r3, #0
 801574a:	dd00      	ble.n	801574e <_dtoa_r+0x882>
 801574c:	e088      	b.n	8015860 <_dtoa_r+0x994>
 801574e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015750:	2b02      	cmp	r3, #2
 8015752:	dc00      	bgt.n	8015756 <_dtoa_r+0x88a>
 8015754:	e084      	b.n	8015860 <_dtoa_r+0x994>
 8015756:	e044      	b.n	80157e2 <_dtoa_r+0x916>
 8015758:	2336      	movs	r3, #54	; 0x36
 801575a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801575c:	1a9b      	subs	r3, r3, r2
 801575e:	e747      	b.n	80155f0 <_dtoa_r+0x724>
 8015760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015762:	1e5d      	subs	r5, r3, #1
 8015764:	9b04      	ldr	r3, [sp, #16]
 8015766:	42ab      	cmp	r3, r5
 8015768:	db08      	blt.n	801577c <_dtoa_r+0x8b0>
 801576a:	1b5d      	subs	r5, r3, r5
 801576c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801576e:	2b00      	cmp	r3, #0
 8015770:	da0c      	bge.n	801578c <_dtoa_r+0x8c0>
 8015772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015776:	1a9c      	subs	r4, r3, r2
 8015778:	2300      	movs	r3, #0
 801577a:	e73b      	b.n	80155f4 <_dtoa_r+0x728>
 801577c:	9b04      	ldr	r3, [sp, #16]
 801577e:	9504      	str	r5, [sp, #16]
 8015780:	1aea      	subs	r2, r5, r3
 8015782:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015784:	2500      	movs	r5, #0
 8015786:	189b      	adds	r3, r3, r2
 8015788:	9311      	str	r3, [sp, #68]	; 0x44
 801578a:	e7ef      	b.n	801576c <_dtoa_r+0x8a0>
 801578c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801578e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015790:	e730      	b.n	80155f4 <_dtoa_r+0x728>
 8015792:	9d04      	ldr	r5, [sp, #16]
 8015794:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015796:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015798:	e737      	b.n	801560a <_dtoa_r+0x73e>
 801579a:	9a04      	ldr	r2, [sp, #16]
 801579c:	e764      	b.n	8015668 <_dtoa_r+0x79c>
 801579e:	2500      	movs	r5, #0
 80157a0:	9b04      	ldr	r3, [sp, #16]
 80157a2:	9a04      	ldr	r2, [sp, #16]
 80157a4:	691b      	ldr	r3, [r3, #16]
 80157a6:	9310      	str	r3, [sp, #64]	; 0x40
 80157a8:	3303      	adds	r3, #3
 80157aa:	009b      	lsls	r3, r3, #2
 80157ac:	18d3      	adds	r3, r2, r3
 80157ae:	6858      	ldr	r0, [r3, #4]
 80157b0:	f000 fe8e 	bl	80164d0 <__hi0bits>
 80157b4:	2320      	movs	r3, #32
 80157b6:	1a18      	subs	r0, r3, r0
 80157b8:	e785      	b.n	80156c6 <_dtoa_r+0x7fa>
 80157ba:	2b04      	cmp	r3, #4
 80157bc:	d095      	beq.n	80156ea <_dtoa_r+0x81e>
 80157be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157c0:	331c      	adds	r3, #28
 80157c2:	18d2      	adds	r2, r2, r3
 80157c4:	920a      	str	r2, [sp, #40]	; 0x28
 80157c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80157c8:	18e4      	adds	r4, r4, r3
 80157ca:	18d3      	adds	r3, r2, r3
 80157cc:	e78c      	b.n	80156e8 <_dtoa_r+0x81c>
 80157ce:	0003      	movs	r3, r0
 80157d0:	e7f5      	b.n	80157be <_dtoa_r+0x8f2>
 80157d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	dc3d      	bgt.n	8015854 <_dtoa_r+0x988>
 80157d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157da:	2b02      	cmp	r3, #2
 80157dc:	dd3a      	ble.n	8015854 <_dtoa_r+0x988>
 80157de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157e0:	930c      	str	r3, [sp, #48]	; 0x30
 80157e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d10c      	bne.n	8015802 <_dtoa_r+0x936>
 80157e8:	9904      	ldr	r1, [sp, #16]
 80157ea:	2205      	movs	r2, #5
 80157ec:	9802      	ldr	r0, [sp, #8]
 80157ee:	f000 fdf3 	bl	80163d8 <__multadd>
 80157f2:	9004      	str	r0, [sp, #16]
 80157f4:	0001      	movs	r1, r0
 80157f6:	9803      	ldr	r0, [sp, #12]
 80157f8:	f000 ffe0 	bl	80167bc <__mcmp>
 80157fc:	2800      	cmp	r0, #0
 80157fe:	dd00      	ble.n	8015802 <_dtoa_r+0x936>
 8015800:	e5ad      	b.n	801535e <_dtoa_r+0x492>
 8015802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015804:	9d08      	ldr	r5, [sp, #32]
 8015806:	43df      	mvns	r7, r3
 8015808:	2300      	movs	r3, #0
 801580a:	9309      	str	r3, [sp, #36]	; 0x24
 801580c:	9904      	ldr	r1, [sp, #16]
 801580e:	9802      	ldr	r0, [sp, #8]
 8015810:	f000 fdd8 	bl	80163c4 <_Bfree>
 8015814:	2e00      	cmp	r6, #0
 8015816:	d100      	bne.n	801581a <_dtoa_r+0x94e>
 8015818:	e69b      	b.n	8015552 <_dtoa_r+0x686>
 801581a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801581c:	2b00      	cmp	r3, #0
 801581e:	d005      	beq.n	801582c <_dtoa_r+0x960>
 8015820:	42b3      	cmp	r3, r6
 8015822:	d003      	beq.n	801582c <_dtoa_r+0x960>
 8015824:	0019      	movs	r1, r3
 8015826:	9802      	ldr	r0, [sp, #8]
 8015828:	f000 fdcc 	bl	80163c4 <_Bfree>
 801582c:	0031      	movs	r1, r6
 801582e:	9802      	ldr	r0, [sp, #8]
 8015830:	f000 fdc8 	bl	80163c4 <_Bfree>
 8015834:	e68d      	b.n	8015552 <_dtoa_r+0x686>
 8015836:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015838:	9304      	str	r3, [sp, #16]
 801583a:	001e      	movs	r6, r3
 801583c:	e7e1      	b.n	8015802 <_dtoa_r+0x936>
 801583e:	2300      	movs	r3, #0
 8015840:	e7fa      	b.n	8015838 <_dtoa_r+0x96c>
 8015842:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015844:	0037      	movs	r7, r6
 8015846:	9304      	str	r3, [sp, #16]
 8015848:	001e      	movs	r6, r3
 801584a:	e588      	b.n	801535e <_dtoa_r+0x492>
 801584c:	40240000 	.word	0x40240000
 8015850:	00000433 	.word	0x00000433
 8015854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015856:	2b00      	cmp	r3, #0
 8015858:	d100      	bne.n	801585c <_dtoa_r+0x990>
 801585a:	e0b2      	b.n	80159c2 <_dtoa_r+0xaf6>
 801585c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801585e:	930c      	str	r3, [sp, #48]	; 0x30
 8015860:	2c00      	cmp	r4, #0
 8015862:	dd05      	ble.n	8015870 <_dtoa_r+0x9a4>
 8015864:	0031      	movs	r1, r6
 8015866:	0022      	movs	r2, r4
 8015868:	9802      	ldr	r0, [sp, #8]
 801586a:	f000 ff55 	bl	8016718 <__lshift>
 801586e:	0006      	movs	r6, r0
 8015870:	0030      	movs	r0, r6
 8015872:	2d00      	cmp	r5, #0
 8015874:	d011      	beq.n	801589a <_dtoa_r+0x9ce>
 8015876:	6871      	ldr	r1, [r6, #4]
 8015878:	9802      	ldr	r0, [sp, #8]
 801587a:	f000 fd7b 	bl	8016374 <_Balloc>
 801587e:	0031      	movs	r1, r6
 8015880:	0004      	movs	r4, r0
 8015882:	6933      	ldr	r3, [r6, #16]
 8015884:	310c      	adds	r1, #12
 8015886:	1c9a      	adds	r2, r3, #2
 8015888:	0092      	lsls	r2, r2, #2
 801588a:	300c      	adds	r0, #12
 801588c:	f7fc fe8b 	bl	80125a6 <memcpy>
 8015890:	2201      	movs	r2, #1
 8015892:	0021      	movs	r1, r4
 8015894:	9802      	ldr	r0, [sp, #8]
 8015896:	f000 ff3f 	bl	8016718 <__lshift>
 801589a:	9609      	str	r6, [sp, #36]	; 0x24
 801589c:	0006      	movs	r6, r0
 801589e:	9b08      	ldr	r3, [sp, #32]
 80158a0:	930a      	str	r3, [sp, #40]	; 0x28
 80158a2:	9904      	ldr	r1, [sp, #16]
 80158a4:	9803      	ldr	r0, [sp, #12]
 80158a6:	f7ff fa8b 	bl	8014dc0 <quorem>
 80158aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80158ac:	900d      	str	r0, [sp, #52]	; 0x34
 80158ae:	0004      	movs	r4, r0
 80158b0:	9803      	ldr	r0, [sp, #12]
 80158b2:	f000 ff83 	bl	80167bc <__mcmp>
 80158b6:	0032      	movs	r2, r6
 80158b8:	9010      	str	r0, [sp, #64]	; 0x40
 80158ba:	9904      	ldr	r1, [sp, #16]
 80158bc:	9802      	ldr	r0, [sp, #8]
 80158be:	f000 ff97 	bl	80167f0 <__mdiff>
 80158c2:	2301      	movs	r3, #1
 80158c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80158c6:	68c3      	ldr	r3, [r0, #12]
 80158c8:	3430      	adds	r4, #48	; 0x30
 80158ca:	0005      	movs	r5, r0
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d104      	bne.n	80158da <_dtoa_r+0xa0e>
 80158d0:	0001      	movs	r1, r0
 80158d2:	9803      	ldr	r0, [sp, #12]
 80158d4:	f000 ff72 	bl	80167bc <__mcmp>
 80158d8:	900b      	str	r0, [sp, #44]	; 0x2c
 80158da:	0029      	movs	r1, r5
 80158dc:	9802      	ldr	r0, [sp, #8]
 80158de:	f000 fd71 	bl	80163c4 <_Bfree>
 80158e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80158e6:	4313      	orrs	r3, r2
 80158e8:	d10e      	bne.n	8015908 <_dtoa_r+0xa3c>
 80158ea:	9a06      	ldr	r2, [sp, #24]
 80158ec:	3301      	adds	r3, #1
 80158ee:	4213      	tst	r3, r2
 80158f0:	d10a      	bne.n	8015908 <_dtoa_r+0xa3c>
 80158f2:	2c39      	cmp	r4, #57	; 0x39
 80158f4:	d026      	beq.n	8015944 <_dtoa_r+0xa78>
 80158f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	dd01      	ble.n	8015900 <_dtoa_r+0xa34>
 80158fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80158fe:	3431      	adds	r4, #49	; 0x31
 8015900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015902:	1c5d      	adds	r5, r3, #1
 8015904:	701c      	strb	r4, [r3, #0]
 8015906:	e781      	b.n	801580c <_dtoa_r+0x940>
 8015908:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801590a:	2b00      	cmp	r3, #0
 801590c:	db07      	blt.n	801591e <_dtoa_r+0xa52>
 801590e:	001d      	movs	r5, r3
 8015910:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015912:	431d      	orrs	r5, r3
 8015914:	d122      	bne.n	801595c <_dtoa_r+0xa90>
 8015916:	2301      	movs	r3, #1
 8015918:	9a06      	ldr	r2, [sp, #24]
 801591a:	4213      	tst	r3, r2
 801591c:	d11e      	bne.n	801595c <_dtoa_r+0xa90>
 801591e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015920:	2b00      	cmp	r3, #0
 8015922:	dded      	ble.n	8015900 <_dtoa_r+0xa34>
 8015924:	9903      	ldr	r1, [sp, #12]
 8015926:	2201      	movs	r2, #1
 8015928:	9802      	ldr	r0, [sp, #8]
 801592a:	f000 fef5 	bl	8016718 <__lshift>
 801592e:	9904      	ldr	r1, [sp, #16]
 8015930:	9003      	str	r0, [sp, #12]
 8015932:	f000 ff43 	bl	80167bc <__mcmp>
 8015936:	2800      	cmp	r0, #0
 8015938:	dc02      	bgt.n	8015940 <_dtoa_r+0xa74>
 801593a:	d1e1      	bne.n	8015900 <_dtoa_r+0xa34>
 801593c:	07e3      	lsls	r3, r4, #31
 801593e:	d5df      	bpl.n	8015900 <_dtoa_r+0xa34>
 8015940:	2c39      	cmp	r4, #57	; 0x39
 8015942:	d1db      	bne.n	80158fc <_dtoa_r+0xa30>
 8015944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015946:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015948:	1c5d      	adds	r5, r3, #1
 801594a:	2339      	movs	r3, #57	; 0x39
 801594c:	7013      	strb	r3, [r2, #0]
 801594e:	1e6b      	subs	r3, r5, #1
 8015950:	781a      	ldrb	r2, [r3, #0]
 8015952:	2a39      	cmp	r2, #57	; 0x39
 8015954:	d067      	beq.n	8015a26 <_dtoa_r+0xb5a>
 8015956:	3201      	adds	r2, #1
 8015958:	701a      	strb	r2, [r3, #0]
 801595a:	e757      	b.n	801580c <_dtoa_r+0x940>
 801595c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801595e:	1c5d      	adds	r5, r3, #1
 8015960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015962:	2b00      	cmp	r3, #0
 8015964:	dd04      	ble.n	8015970 <_dtoa_r+0xaa4>
 8015966:	2c39      	cmp	r4, #57	; 0x39
 8015968:	d0ec      	beq.n	8015944 <_dtoa_r+0xa78>
 801596a:	3401      	adds	r4, #1
 801596c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801596e:	e7c9      	b.n	8015904 <_dtoa_r+0xa38>
 8015970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015974:	701c      	strb	r4, [r3, #0]
 8015976:	9b08      	ldr	r3, [sp, #32]
 8015978:	1aeb      	subs	r3, r5, r3
 801597a:	4293      	cmp	r3, r2
 801597c:	d03e      	beq.n	80159fc <_dtoa_r+0xb30>
 801597e:	2300      	movs	r3, #0
 8015980:	220a      	movs	r2, #10
 8015982:	9903      	ldr	r1, [sp, #12]
 8015984:	9802      	ldr	r0, [sp, #8]
 8015986:	f000 fd27 	bl	80163d8 <__multadd>
 801598a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801598c:	9003      	str	r0, [sp, #12]
 801598e:	42b3      	cmp	r3, r6
 8015990:	d109      	bne.n	80159a6 <_dtoa_r+0xada>
 8015992:	2300      	movs	r3, #0
 8015994:	220a      	movs	r2, #10
 8015996:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015998:	9802      	ldr	r0, [sp, #8]
 801599a:	f000 fd1d 	bl	80163d8 <__multadd>
 801599e:	9009      	str	r0, [sp, #36]	; 0x24
 80159a0:	0006      	movs	r6, r0
 80159a2:	950a      	str	r5, [sp, #40]	; 0x28
 80159a4:	e77d      	b.n	80158a2 <_dtoa_r+0x9d6>
 80159a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80159a8:	2300      	movs	r3, #0
 80159aa:	220a      	movs	r2, #10
 80159ac:	9802      	ldr	r0, [sp, #8]
 80159ae:	f000 fd13 	bl	80163d8 <__multadd>
 80159b2:	2300      	movs	r3, #0
 80159b4:	9009      	str	r0, [sp, #36]	; 0x24
 80159b6:	220a      	movs	r2, #10
 80159b8:	0031      	movs	r1, r6
 80159ba:	9802      	ldr	r0, [sp, #8]
 80159bc:	f000 fd0c 	bl	80163d8 <__multadd>
 80159c0:	e7ee      	b.n	80159a0 <_dtoa_r+0xad4>
 80159c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159c4:	930c      	str	r3, [sp, #48]	; 0x30
 80159c6:	9b08      	ldr	r3, [sp, #32]
 80159c8:	9306      	str	r3, [sp, #24]
 80159ca:	9904      	ldr	r1, [sp, #16]
 80159cc:	9803      	ldr	r0, [sp, #12]
 80159ce:	f7ff f9f7 	bl	8014dc0 <quorem>
 80159d2:	9b06      	ldr	r3, [sp, #24]
 80159d4:	3030      	adds	r0, #48	; 0x30
 80159d6:	1c5d      	adds	r5, r3, #1
 80159d8:	7018      	strb	r0, [r3, #0]
 80159da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80159dc:	9b08      	ldr	r3, [sp, #32]
 80159de:	0004      	movs	r4, r0
 80159e0:	1aeb      	subs	r3, r5, r3
 80159e2:	429a      	cmp	r2, r3
 80159e4:	dd08      	ble.n	80159f8 <_dtoa_r+0xb2c>
 80159e6:	2300      	movs	r3, #0
 80159e8:	220a      	movs	r2, #10
 80159ea:	9903      	ldr	r1, [sp, #12]
 80159ec:	9802      	ldr	r0, [sp, #8]
 80159ee:	f000 fcf3 	bl	80163d8 <__multadd>
 80159f2:	9506      	str	r5, [sp, #24]
 80159f4:	9003      	str	r0, [sp, #12]
 80159f6:	e7e8      	b.n	80159ca <_dtoa_r+0xafe>
 80159f8:	2300      	movs	r3, #0
 80159fa:	9309      	str	r3, [sp, #36]	; 0x24
 80159fc:	9903      	ldr	r1, [sp, #12]
 80159fe:	2201      	movs	r2, #1
 8015a00:	9802      	ldr	r0, [sp, #8]
 8015a02:	f000 fe89 	bl	8016718 <__lshift>
 8015a06:	9904      	ldr	r1, [sp, #16]
 8015a08:	9003      	str	r0, [sp, #12]
 8015a0a:	f000 fed7 	bl	80167bc <__mcmp>
 8015a0e:	2800      	cmp	r0, #0
 8015a10:	dc9d      	bgt.n	801594e <_dtoa_r+0xa82>
 8015a12:	d101      	bne.n	8015a18 <_dtoa_r+0xb4c>
 8015a14:	07e3      	lsls	r3, r4, #31
 8015a16:	d49a      	bmi.n	801594e <_dtoa_r+0xa82>
 8015a18:	1e6b      	subs	r3, r5, #1
 8015a1a:	781a      	ldrb	r2, [r3, #0]
 8015a1c:	2a30      	cmp	r2, #48	; 0x30
 8015a1e:	d000      	beq.n	8015a22 <_dtoa_r+0xb56>
 8015a20:	e6f4      	b.n	801580c <_dtoa_r+0x940>
 8015a22:	001d      	movs	r5, r3
 8015a24:	e7f8      	b.n	8015a18 <_dtoa_r+0xb4c>
 8015a26:	9a08      	ldr	r2, [sp, #32]
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d103      	bne.n	8015a34 <_dtoa_r+0xb68>
 8015a2c:	2331      	movs	r3, #49	; 0x31
 8015a2e:	3701      	adds	r7, #1
 8015a30:	7013      	strb	r3, [r2, #0]
 8015a32:	e6eb      	b.n	801580c <_dtoa_r+0x940>
 8015a34:	001d      	movs	r5, r3
 8015a36:	e78a      	b.n	801594e <_dtoa_r+0xa82>
 8015a38:	4b0b      	ldr	r3, [pc, #44]	; (8015a68 <_dtoa_r+0xb9c>)
 8015a3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015a3c:	9308      	str	r3, [sp, #32]
 8015a3e:	4b0b      	ldr	r3, [pc, #44]	; (8015a6c <_dtoa_r+0xba0>)
 8015a40:	2a00      	cmp	r2, #0
 8015a42:	d001      	beq.n	8015a48 <_dtoa_r+0xb7c>
 8015a44:	f7ff fa75 	bl	8014f32 <_dtoa_r+0x66>
 8015a48:	f7ff fa75 	bl	8014f36 <_dtoa_r+0x6a>
 8015a4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a4e:	2b01      	cmp	r3, #1
 8015a50:	dc00      	bgt.n	8015a54 <_dtoa_r+0xb88>
 8015a52:	e621      	b.n	8015698 <_dtoa_r+0x7cc>
 8015a54:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015a56:	2001      	movs	r0, #1
 8015a58:	e635      	b.n	80156c6 <_dtoa_r+0x7fa>
 8015a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	dcb2      	bgt.n	80159c6 <_dtoa_r+0xafa>
 8015a60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a62:	2b02      	cmp	r3, #2
 8015a64:	ddaf      	ble.n	80159c6 <_dtoa_r+0xafa>
 8015a66:	e6bc      	b.n	80157e2 <_dtoa_r+0x916>
 8015a68:	0801a02d 	.word	0x0801a02d
 8015a6c:	0801a035 	.word	0x0801a035

08015a70 <__errno>:
 8015a70:	4b01      	ldr	r3, [pc, #4]	; (8015a78 <__errno+0x8>)
 8015a72:	6818      	ldr	r0, [r3, #0]
 8015a74:	4770      	bx	lr
 8015a76:	46c0      	nop			; (mov r8, r8)
 8015a78:	200000dc 	.word	0x200000dc

08015a7c <__libc_fini_array>:
 8015a7c:	b570      	push	{r4, r5, r6, lr}
 8015a7e:	4d07      	ldr	r5, [pc, #28]	; (8015a9c <__libc_fini_array+0x20>)
 8015a80:	4c07      	ldr	r4, [pc, #28]	; (8015aa0 <__libc_fini_array+0x24>)
 8015a82:	1b64      	subs	r4, r4, r5
 8015a84:	10a4      	asrs	r4, r4, #2
 8015a86:	2c00      	cmp	r4, #0
 8015a88:	d102      	bne.n	8015a90 <__libc_fini_array+0x14>
 8015a8a:	f001 f95b 	bl	8016d44 <_fini>
 8015a8e:	bd70      	pop	{r4, r5, r6, pc}
 8015a90:	3c01      	subs	r4, #1
 8015a92:	00a3      	lsls	r3, r4, #2
 8015a94:	58eb      	ldr	r3, [r5, r3]
 8015a96:	4798      	blx	r3
 8015a98:	e7f5      	b.n	8015a86 <__libc_fini_array+0xa>
 8015a9a:	46c0      	nop			; (mov r8, r8)
 8015a9c:	0801a14c 	.word	0x0801a14c
 8015aa0:	0801a150 	.word	0x0801a150

08015aa4 <_malloc_trim_r>:
 8015aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015aa6:	0005      	movs	r5, r0
 8015aa8:	2008      	movs	r0, #8
 8015aaa:	000c      	movs	r4, r1
 8015aac:	f7ff f95c 	bl	8014d68 <sysconf>
 8015ab0:	0007      	movs	r7, r0
 8015ab2:	0028      	movs	r0, r5
 8015ab4:	f7fc fd88 	bl	80125c8 <__malloc_lock>
 8015ab8:	2203      	movs	r2, #3
 8015aba:	4e21      	ldr	r6, [pc, #132]	; (8015b40 <_malloc_trim_r+0x9c>)
 8015abc:	0039      	movs	r1, r7
 8015abe:	68b3      	ldr	r3, [r6, #8]
 8015ac0:	685b      	ldr	r3, [r3, #4]
 8015ac2:	4393      	bics	r3, r2
 8015ac4:	1b18      	subs	r0, r3, r4
 8015ac6:	3811      	subs	r0, #17
 8015ac8:	19c0      	adds	r0, r0, r7
 8015aca:	9301      	str	r3, [sp, #4]
 8015acc:	f7ea fb40 	bl	8000150 <__udivsi3>
 8015ad0:	1e44      	subs	r4, r0, #1
 8015ad2:	437c      	muls	r4, r7
 8015ad4:	42a7      	cmp	r7, r4
 8015ad6:	dd04      	ble.n	8015ae2 <_malloc_trim_r+0x3e>
 8015ad8:	0028      	movs	r0, r5
 8015ada:	f7fc fd7d 	bl	80125d8 <__malloc_unlock>
 8015ade:	2000      	movs	r0, #0
 8015ae0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015ae2:	2100      	movs	r1, #0
 8015ae4:	0028      	movs	r0, r5
 8015ae6:	f7fc ff4f 	bl	8012988 <_sbrk_r>
 8015aea:	68b3      	ldr	r3, [r6, #8]
 8015aec:	9a01      	ldr	r2, [sp, #4]
 8015aee:	189b      	adds	r3, r3, r2
 8015af0:	4298      	cmp	r0, r3
 8015af2:	d1f1      	bne.n	8015ad8 <_malloc_trim_r+0x34>
 8015af4:	4261      	negs	r1, r4
 8015af6:	0028      	movs	r0, r5
 8015af8:	f7fc ff46 	bl	8012988 <_sbrk_r>
 8015afc:	1c43      	adds	r3, r0, #1
 8015afe:	d110      	bne.n	8015b22 <_malloc_trim_r+0x7e>
 8015b00:	2100      	movs	r1, #0
 8015b02:	0028      	movs	r0, r5
 8015b04:	f7fc ff40 	bl	8012988 <_sbrk_r>
 8015b08:	68b2      	ldr	r2, [r6, #8]
 8015b0a:	1a81      	subs	r1, r0, r2
 8015b0c:	290f      	cmp	r1, #15
 8015b0e:	dde3      	ble.n	8015ad8 <_malloc_trim_r+0x34>
 8015b10:	4b0c      	ldr	r3, [pc, #48]	; (8015b44 <_malloc_trim_r+0xa0>)
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	1ac0      	subs	r0, r0, r3
 8015b16:	4b0c      	ldr	r3, [pc, #48]	; (8015b48 <_malloc_trim_r+0xa4>)
 8015b18:	6018      	str	r0, [r3, #0]
 8015b1a:	2301      	movs	r3, #1
 8015b1c:	430b      	orrs	r3, r1
 8015b1e:	6053      	str	r3, [r2, #4]
 8015b20:	e7da      	b.n	8015ad8 <_malloc_trim_r+0x34>
 8015b22:	68b2      	ldr	r2, [r6, #8]
 8015b24:	2601      	movs	r6, #1
 8015b26:	9b01      	ldr	r3, [sp, #4]
 8015b28:	0028      	movs	r0, r5
 8015b2a:	1b1b      	subs	r3, r3, r4
 8015b2c:	4333      	orrs	r3, r6
 8015b2e:	6053      	str	r3, [r2, #4]
 8015b30:	4b05      	ldr	r3, [pc, #20]	; (8015b48 <_malloc_trim_r+0xa4>)
 8015b32:	681a      	ldr	r2, [r3, #0]
 8015b34:	1b14      	subs	r4, r2, r4
 8015b36:	601c      	str	r4, [r3, #0]
 8015b38:	f7fc fd4e 	bl	80125d8 <__malloc_unlock>
 8015b3c:	0030      	movs	r0, r6
 8015b3e:	e7cf      	b.n	8015ae0 <_malloc_trim_r+0x3c>
 8015b40:	20000674 	.word	0x20000674
 8015b44:	20000a7c 	.word	0x20000a7c
 8015b48:	200067b8 	.word	0x200067b8

08015b4c <_free_r>:
 8015b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015b4e:	1e0d      	subs	r5, r1, #0
 8015b50:	9001      	str	r0, [sp, #4]
 8015b52:	d02d      	beq.n	8015bb0 <_free_r+0x64>
 8015b54:	f7fc fd38 	bl	80125c8 <__malloc_lock>
 8015b58:	2301      	movs	r3, #1
 8015b5a:	0029      	movs	r1, r5
 8015b5c:	469c      	mov	ip, r3
 8015b5e:	3908      	subs	r1, #8
 8015b60:	684f      	ldr	r7, [r1, #4]
 8015b62:	4662      	mov	r2, ip
 8015b64:	003b      	movs	r3, r7
 8015b66:	4666      	mov	r6, ip
 8015b68:	4393      	bics	r3, r2
 8015b6a:	18c8      	adds	r0, r1, r3
 8015b6c:	6845      	ldr	r5, [r0, #4]
 8015b6e:	3202      	adds	r2, #2
 8015b70:	4395      	bics	r5, r2
 8015b72:	4a4a      	ldr	r2, [pc, #296]	; (8015c9c <_free_r+0x150>)
 8015b74:	4037      	ands	r7, r6
 8015b76:	6896      	ldr	r6, [r2, #8]
 8015b78:	4286      	cmp	r6, r0
 8015b7a:	d11a      	bne.n	8015bb2 <_free_r+0x66>
 8015b7c:	195b      	adds	r3, r3, r5
 8015b7e:	2f00      	cmp	r7, #0
 8015b80:	d106      	bne.n	8015b90 <_free_r+0x44>
 8015b82:	6808      	ldr	r0, [r1, #0]
 8015b84:	1a09      	subs	r1, r1, r0
 8015b86:	688d      	ldr	r5, [r1, #8]
 8015b88:	181b      	adds	r3, r3, r0
 8015b8a:	68c8      	ldr	r0, [r1, #12]
 8015b8c:	60e8      	str	r0, [r5, #12]
 8015b8e:	6085      	str	r5, [r0, #8]
 8015b90:	2001      	movs	r0, #1
 8015b92:	4318      	orrs	r0, r3
 8015b94:	6048      	str	r0, [r1, #4]
 8015b96:	6091      	str	r1, [r2, #8]
 8015b98:	4a41      	ldr	r2, [pc, #260]	; (8015ca0 <_free_r+0x154>)
 8015b9a:	6812      	ldr	r2, [r2, #0]
 8015b9c:	429a      	cmp	r2, r3
 8015b9e:	d804      	bhi.n	8015baa <_free_r+0x5e>
 8015ba0:	4b40      	ldr	r3, [pc, #256]	; (8015ca4 <_free_r+0x158>)
 8015ba2:	9801      	ldr	r0, [sp, #4]
 8015ba4:	6819      	ldr	r1, [r3, #0]
 8015ba6:	f7ff ff7d 	bl	8015aa4 <_malloc_trim_r>
 8015baa:	9801      	ldr	r0, [sp, #4]
 8015bac:	f7fc fd14 	bl	80125d8 <__malloc_unlock>
 8015bb0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8015bb2:	2600      	movs	r6, #0
 8015bb4:	6045      	str	r5, [r0, #4]
 8015bb6:	42b7      	cmp	r7, r6
 8015bb8:	d109      	bne.n	8015bce <_free_r+0x82>
 8015bba:	680f      	ldr	r7, [r1, #0]
 8015bbc:	4c3a      	ldr	r4, [pc, #232]	; (8015ca8 <_free_r+0x15c>)
 8015bbe:	1bc9      	subs	r1, r1, r7
 8015bc0:	19db      	adds	r3, r3, r7
 8015bc2:	688f      	ldr	r7, [r1, #8]
 8015bc4:	42a7      	cmp	r7, r4
 8015bc6:	d02b      	beq.n	8015c20 <_free_r+0xd4>
 8015bc8:	68cc      	ldr	r4, [r1, #12]
 8015bca:	60fc      	str	r4, [r7, #12]
 8015bcc:	60a7      	str	r7, [r4, #8]
 8015bce:	1947      	adds	r7, r0, r5
 8015bd0:	687c      	ldr	r4, [r7, #4]
 8015bd2:	2701      	movs	r7, #1
 8015bd4:	423c      	tst	r4, r7
 8015bd6:	d10b      	bne.n	8015bf0 <_free_r+0xa4>
 8015bd8:	195b      	adds	r3, r3, r5
 8015bda:	6885      	ldr	r5, [r0, #8]
 8015bdc:	2e00      	cmp	r6, #0
 8015bde:	d121      	bne.n	8015c24 <_free_r+0xd8>
 8015be0:	4c31      	ldr	r4, [pc, #196]	; (8015ca8 <_free_r+0x15c>)
 8015be2:	42a5      	cmp	r5, r4
 8015be4:	d11e      	bne.n	8015c24 <_free_r+0xd8>
 8015be6:	003e      	movs	r6, r7
 8015be8:	6151      	str	r1, [r2, #20]
 8015bea:	6111      	str	r1, [r2, #16]
 8015bec:	60cd      	str	r5, [r1, #12]
 8015bee:	608d      	str	r5, [r1, #8]
 8015bf0:	2001      	movs	r0, #1
 8015bf2:	0005      	movs	r5, r0
 8015bf4:	431d      	orrs	r5, r3
 8015bf6:	604d      	str	r5, [r1, #4]
 8015bf8:	50cb      	str	r3, [r1, r3]
 8015bfa:	2e00      	cmp	r6, #0
 8015bfc:	d1d5      	bne.n	8015baa <_free_r+0x5e>
 8015bfe:	4d2b      	ldr	r5, [pc, #172]	; (8015cac <_free_r+0x160>)
 8015c00:	42ab      	cmp	r3, r5
 8015c02:	d813      	bhi.n	8015c2c <_free_r+0xe0>
 8015c04:	08db      	lsrs	r3, r3, #3
 8015c06:	109d      	asrs	r5, r3, #2
 8015c08:	40a8      	lsls	r0, r5
 8015c0a:	6854      	ldr	r4, [r2, #4]
 8015c0c:	00db      	lsls	r3, r3, #3
 8015c0e:	4320      	orrs	r0, r4
 8015c10:	6050      	str	r0, [r2, #4]
 8015c12:	189a      	adds	r2, r3, r2
 8015c14:	6893      	ldr	r3, [r2, #8]
 8015c16:	60ca      	str	r2, [r1, #12]
 8015c18:	608b      	str	r3, [r1, #8]
 8015c1a:	6091      	str	r1, [r2, #8]
 8015c1c:	60d9      	str	r1, [r3, #12]
 8015c1e:	e7c4      	b.n	8015baa <_free_r+0x5e>
 8015c20:	4666      	mov	r6, ip
 8015c22:	e7d4      	b.n	8015bce <_free_r+0x82>
 8015c24:	68c0      	ldr	r0, [r0, #12]
 8015c26:	60e8      	str	r0, [r5, #12]
 8015c28:	6085      	str	r5, [r0, #8]
 8015c2a:	e7e1      	b.n	8015bf0 <_free_r+0xa4>
 8015c2c:	0a5d      	lsrs	r5, r3, #9
 8015c2e:	2d04      	cmp	r5, #4
 8015c30:	d812      	bhi.n	8015c58 <_free_r+0x10c>
 8015c32:	0998      	lsrs	r0, r3, #6
 8015c34:	3038      	adds	r0, #56	; 0x38
 8015c36:	00c6      	lsls	r6, r0, #3
 8015c38:	18b6      	adds	r6, r6, r2
 8015c3a:	68b5      	ldr	r5, [r6, #8]
 8015c3c:	2703      	movs	r7, #3
 8015c3e:	42ae      	cmp	r6, r5
 8015c40:	d125      	bne.n	8015c8e <_free_r+0x142>
 8015c42:	2301      	movs	r3, #1
 8015c44:	1080      	asrs	r0, r0, #2
 8015c46:	4083      	lsls	r3, r0
 8015c48:	6850      	ldr	r0, [r2, #4]
 8015c4a:	4303      	orrs	r3, r0
 8015c4c:	6053      	str	r3, [r2, #4]
 8015c4e:	60ce      	str	r6, [r1, #12]
 8015c50:	608d      	str	r5, [r1, #8]
 8015c52:	60b1      	str	r1, [r6, #8]
 8015c54:	60e9      	str	r1, [r5, #12]
 8015c56:	e7a8      	b.n	8015baa <_free_r+0x5e>
 8015c58:	2d14      	cmp	r5, #20
 8015c5a:	d802      	bhi.n	8015c62 <_free_r+0x116>
 8015c5c:	0028      	movs	r0, r5
 8015c5e:	305b      	adds	r0, #91	; 0x5b
 8015c60:	e7e9      	b.n	8015c36 <_free_r+0xea>
 8015c62:	2d54      	cmp	r5, #84	; 0x54
 8015c64:	d802      	bhi.n	8015c6c <_free_r+0x120>
 8015c66:	0b18      	lsrs	r0, r3, #12
 8015c68:	306e      	adds	r0, #110	; 0x6e
 8015c6a:	e7e4      	b.n	8015c36 <_free_r+0xea>
 8015c6c:	20aa      	movs	r0, #170	; 0xaa
 8015c6e:	0040      	lsls	r0, r0, #1
 8015c70:	4285      	cmp	r5, r0
 8015c72:	d802      	bhi.n	8015c7a <_free_r+0x12e>
 8015c74:	0bd8      	lsrs	r0, r3, #15
 8015c76:	3077      	adds	r0, #119	; 0x77
 8015c78:	e7dd      	b.n	8015c36 <_free_r+0xea>
 8015c7a:	4e0d      	ldr	r6, [pc, #52]	; (8015cb0 <_free_r+0x164>)
 8015c7c:	207e      	movs	r0, #126	; 0x7e
 8015c7e:	42b5      	cmp	r5, r6
 8015c80:	d8d9      	bhi.n	8015c36 <_free_r+0xea>
 8015c82:	0c98      	lsrs	r0, r3, #18
 8015c84:	307c      	adds	r0, #124	; 0x7c
 8015c86:	e7d6      	b.n	8015c36 <_free_r+0xea>
 8015c88:	68ad      	ldr	r5, [r5, #8]
 8015c8a:	42ae      	cmp	r6, r5
 8015c8c:	d003      	beq.n	8015c96 <_free_r+0x14a>
 8015c8e:	686a      	ldr	r2, [r5, #4]
 8015c90:	43ba      	bics	r2, r7
 8015c92:	429a      	cmp	r2, r3
 8015c94:	d8f8      	bhi.n	8015c88 <_free_r+0x13c>
 8015c96:	68ee      	ldr	r6, [r5, #12]
 8015c98:	e7d9      	b.n	8015c4e <_free_r+0x102>
 8015c9a:	46c0      	nop			; (mov r8, r8)
 8015c9c:	20000674 	.word	0x20000674
 8015ca0:	20000a80 	.word	0x20000a80
 8015ca4:	200067e8 	.word	0x200067e8
 8015ca8:	2000067c 	.word	0x2000067c
 8015cac:	000001ff 	.word	0x000001ff
 8015cb0:	00000554 	.word	0x00000554

08015cb4 <rshift>:
 8015cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cb6:	0004      	movs	r4, r0
 8015cb8:	6905      	ldr	r5, [r0, #16]
 8015cba:	3414      	adds	r4, #20
 8015cbc:	114b      	asrs	r3, r1, #5
 8015cbe:	0026      	movs	r6, r4
 8015cc0:	429d      	cmp	r5, r3
 8015cc2:	dd14      	ble.n	8015cee <rshift+0x3a>
 8015cc4:	221f      	movs	r2, #31
 8015cc6:	00ad      	lsls	r5, r5, #2
 8015cc8:	009b      	lsls	r3, r3, #2
 8015cca:	4011      	ands	r1, r2
 8015ccc:	1965      	adds	r5, r4, r5
 8015cce:	18e3      	adds	r3, r4, r3
 8015cd0:	0022      	movs	r2, r4
 8015cd2:	2900      	cmp	r1, #0
 8015cd4:	d01e      	beq.n	8015d14 <rshift+0x60>
 8015cd6:	cb04      	ldmia	r3!, {r2}
 8015cd8:	2720      	movs	r7, #32
 8015cda:	40ca      	lsrs	r2, r1
 8015cdc:	46a4      	mov	ip, r4
 8015cde:	1a7f      	subs	r7, r7, r1
 8015ce0:	4666      	mov	r6, ip
 8015ce2:	429d      	cmp	r5, r3
 8015ce4:	d80b      	bhi.n	8015cfe <rshift+0x4a>
 8015ce6:	6032      	str	r2, [r6, #0]
 8015ce8:	2a00      	cmp	r2, #0
 8015cea:	d000      	beq.n	8015cee <rshift+0x3a>
 8015cec:	3604      	adds	r6, #4
 8015cee:	1b33      	subs	r3, r6, r4
 8015cf0:	109b      	asrs	r3, r3, #2
 8015cf2:	6103      	str	r3, [r0, #16]
 8015cf4:	42a6      	cmp	r6, r4
 8015cf6:	d101      	bne.n	8015cfc <rshift+0x48>
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	6143      	str	r3, [r0, #20]
 8015cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cfe:	681e      	ldr	r6, [r3, #0]
 8015d00:	40be      	lsls	r6, r7
 8015d02:	4332      	orrs	r2, r6
 8015d04:	4666      	mov	r6, ip
 8015d06:	c604      	stmia	r6!, {r2}
 8015d08:	cb04      	ldmia	r3!, {r2}
 8015d0a:	46b4      	mov	ip, r6
 8015d0c:	40ca      	lsrs	r2, r1
 8015d0e:	e7e7      	b.n	8015ce0 <rshift+0x2c>
 8015d10:	cb02      	ldmia	r3!, {r1}
 8015d12:	c202      	stmia	r2!, {r1}
 8015d14:	0016      	movs	r6, r2
 8015d16:	429d      	cmp	r5, r3
 8015d18:	d8fa      	bhi.n	8015d10 <rshift+0x5c>
 8015d1a:	e7e8      	b.n	8015cee <rshift+0x3a>

08015d1c <__hexdig_fun>:
 8015d1c:	0003      	movs	r3, r0
 8015d1e:	3b30      	subs	r3, #48	; 0x30
 8015d20:	2b09      	cmp	r3, #9
 8015d22:	d803      	bhi.n	8015d2c <__hexdig_fun+0x10>
 8015d24:	3820      	subs	r0, #32
 8015d26:	b2c3      	uxtb	r3, r0
 8015d28:	0018      	movs	r0, r3
 8015d2a:	4770      	bx	lr
 8015d2c:	0003      	movs	r3, r0
 8015d2e:	3b61      	subs	r3, #97	; 0x61
 8015d30:	2b05      	cmp	r3, #5
 8015d32:	d801      	bhi.n	8015d38 <__hexdig_fun+0x1c>
 8015d34:	3847      	subs	r0, #71	; 0x47
 8015d36:	e7f6      	b.n	8015d26 <__hexdig_fun+0xa>
 8015d38:	0002      	movs	r2, r0
 8015d3a:	3a41      	subs	r2, #65	; 0x41
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	2a05      	cmp	r2, #5
 8015d40:	d8f2      	bhi.n	8015d28 <__hexdig_fun+0xc>
 8015d42:	3827      	subs	r0, #39	; 0x27
 8015d44:	e7ef      	b.n	8015d26 <__hexdig_fun+0xa>

08015d46 <__gethex>:
 8015d46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d48:	b08d      	sub	sp, #52	; 0x34
 8015d4a:	9005      	str	r0, [sp, #20]
 8015d4c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015d4e:	9109      	str	r1, [sp, #36]	; 0x24
 8015d50:	9202      	str	r2, [sp, #8]
 8015d52:	930a      	str	r3, [sp, #40]	; 0x28
 8015d54:	f000 fadf 	bl	8016316 <__localeconv_l>
 8015d58:	6803      	ldr	r3, [r0, #0]
 8015d5a:	0018      	movs	r0, r3
 8015d5c:	9307      	str	r3, [sp, #28]
 8015d5e:	f7ea f9db 	bl	8000118 <strlen>
 8015d62:	2202      	movs	r2, #2
 8015d64:	9b07      	ldr	r3, [sp, #28]
 8015d66:	4252      	negs	r2, r2
 8015d68:	181b      	adds	r3, r3, r0
 8015d6a:	3b01      	subs	r3, #1
 8015d6c:	781b      	ldrb	r3, [r3, #0]
 8015d6e:	9004      	str	r0, [sp, #16]
 8015d70:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d74:	6819      	ldr	r1, [r3, #0]
 8015d76:	1c8b      	adds	r3, r1, #2
 8015d78:	1a52      	subs	r2, r2, r1
 8015d7a:	18d1      	adds	r1, r2, r3
 8015d7c:	9301      	str	r3, [sp, #4]
 8015d7e:	9108      	str	r1, [sp, #32]
 8015d80:	9901      	ldr	r1, [sp, #4]
 8015d82:	3301      	adds	r3, #1
 8015d84:	7808      	ldrb	r0, [r1, #0]
 8015d86:	2830      	cmp	r0, #48	; 0x30
 8015d88:	d0f7      	beq.n	8015d7a <__gethex+0x34>
 8015d8a:	f7ff ffc7 	bl	8015d1c <__hexdig_fun>
 8015d8e:	1e07      	subs	r7, r0, #0
 8015d90:	d000      	beq.n	8015d94 <__gethex+0x4e>
 8015d92:	e06f      	b.n	8015e74 <__gethex+0x12e>
 8015d94:	9a04      	ldr	r2, [sp, #16]
 8015d96:	9907      	ldr	r1, [sp, #28]
 8015d98:	9801      	ldr	r0, [sp, #4]
 8015d9a:	f7fc fe4b 	bl	8012a34 <strncmp>
 8015d9e:	2800      	cmp	r0, #0
 8015da0:	d000      	beq.n	8015da4 <__gethex+0x5e>
 8015da2:	e06d      	b.n	8015e80 <__gethex+0x13a>
 8015da4:	9b01      	ldr	r3, [sp, #4]
 8015da6:	9a04      	ldr	r2, [sp, #16]
 8015da8:	189c      	adds	r4, r3, r2
 8015daa:	7820      	ldrb	r0, [r4, #0]
 8015dac:	f7ff ffb6 	bl	8015d1c <__hexdig_fun>
 8015db0:	2800      	cmp	r0, #0
 8015db2:	d069      	beq.n	8015e88 <__gethex+0x142>
 8015db4:	9401      	str	r4, [sp, #4]
 8015db6:	9b01      	ldr	r3, [sp, #4]
 8015db8:	7818      	ldrb	r0, [r3, #0]
 8015dba:	2830      	cmp	r0, #48	; 0x30
 8015dbc:	d009      	beq.n	8015dd2 <__gethex+0x8c>
 8015dbe:	f7ff ffad 	bl	8015d1c <__hexdig_fun>
 8015dc2:	4243      	negs	r3, r0
 8015dc4:	4143      	adcs	r3, r0
 8015dc6:	9303      	str	r3, [sp, #12]
 8015dc8:	2301      	movs	r3, #1
 8015dca:	0026      	movs	r6, r4
 8015dcc:	9308      	str	r3, [sp, #32]
 8015dce:	9c01      	ldr	r4, [sp, #4]
 8015dd0:	e004      	b.n	8015ddc <__gethex+0x96>
 8015dd2:	9b01      	ldr	r3, [sp, #4]
 8015dd4:	3301      	adds	r3, #1
 8015dd6:	9301      	str	r3, [sp, #4]
 8015dd8:	e7ed      	b.n	8015db6 <__gethex+0x70>
 8015dda:	3401      	adds	r4, #1
 8015ddc:	7820      	ldrb	r0, [r4, #0]
 8015dde:	f7ff ff9d 	bl	8015d1c <__hexdig_fun>
 8015de2:	2800      	cmp	r0, #0
 8015de4:	d1f9      	bne.n	8015dda <__gethex+0x94>
 8015de6:	9a04      	ldr	r2, [sp, #16]
 8015de8:	9907      	ldr	r1, [sp, #28]
 8015dea:	0020      	movs	r0, r4
 8015dec:	f7fc fe22 	bl	8012a34 <strncmp>
 8015df0:	2800      	cmp	r0, #0
 8015df2:	d109      	bne.n	8015e08 <__gethex+0xc2>
 8015df4:	2e00      	cmp	r6, #0
 8015df6:	d10a      	bne.n	8015e0e <__gethex+0xc8>
 8015df8:	9b04      	ldr	r3, [sp, #16]
 8015dfa:	18e4      	adds	r4, r4, r3
 8015dfc:	0026      	movs	r6, r4
 8015dfe:	7820      	ldrb	r0, [r4, #0]
 8015e00:	f7ff ff8c 	bl	8015d1c <__hexdig_fun>
 8015e04:	2800      	cmp	r0, #0
 8015e06:	d139      	bne.n	8015e7c <__gethex+0x136>
 8015e08:	2700      	movs	r7, #0
 8015e0a:	42be      	cmp	r6, r7
 8015e0c:	d001      	beq.n	8015e12 <__gethex+0xcc>
 8015e0e:	1b37      	subs	r7, r6, r4
 8015e10:	00bf      	lsls	r7, r7, #2
 8015e12:	7823      	ldrb	r3, [r4, #0]
 8015e14:	2b50      	cmp	r3, #80	; 0x50
 8015e16:	d001      	beq.n	8015e1c <__gethex+0xd6>
 8015e18:	2b70      	cmp	r3, #112	; 0x70
 8015e1a:	d142      	bne.n	8015ea2 <__gethex+0x15c>
 8015e1c:	7863      	ldrb	r3, [r4, #1]
 8015e1e:	2b2b      	cmp	r3, #43	; 0x2b
 8015e20:	d034      	beq.n	8015e8c <__gethex+0x146>
 8015e22:	2b2d      	cmp	r3, #45	; 0x2d
 8015e24:	d036      	beq.n	8015e94 <__gethex+0x14e>
 8015e26:	2300      	movs	r3, #0
 8015e28:	1c66      	adds	r6, r4, #1
 8015e2a:	9306      	str	r3, [sp, #24]
 8015e2c:	7830      	ldrb	r0, [r6, #0]
 8015e2e:	f7ff ff75 	bl	8015d1c <__hexdig_fun>
 8015e32:	1e43      	subs	r3, r0, #1
 8015e34:	b2db      	uxtb	r3, r3
 8015e36:	2b18      	cmp	r3, #24
 8015e38:	d833      	bhi.n	8015ea2 <__gethex+0x15c>
 8015e3a:	3810      	subs	r0, #16
 8015e3c:	0005      	movs	r5, r0
 8015e3e:	3601      	adds	r6, #1
 8015e40:	7830      	ldrb	r0, [r6, #0]
 8015e42:	f7ff ff6b 	bl	8015d1c <__hexdig_fun>
 8015e46:	1e43      	subs	r3, r0, #1
 8015e48:	b2db      	uxtb	r3, r3
 8015e4a:	2b18      	cmp	r3, #24
 8015e4c:	d924      	bls.n	8015e98 <__gethex+0x152>
 8015e4e:	9b06      	ldr	r3, [sp, #24]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d000      	beq.n	8015e56 <__gethex+0x110>
 8015e54:	426d      	negs	r5, r5
 8015e56:	197f      	adds	r7, r7, r5
 8015e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e5a:	601e      	str	r6, [r3, #0]
 8015e5c:	9b03      	ldr	r3, [sp, #12]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d021      	beq.n	8015ea6 <__gethex+0x160>
 8015e62:	9b08      	ldr	r3, [sp, #32]
 8015e64:	2606      	movs	r6, #6
 8015e66:	425a      	negs	r2, r3
 8015e68:	4153      	adcs	r3, r2
 8015e6a:	425b      	negs	r3, r3
 8015e6c:	401e      	ands	r6, r3
 8015e6e:	0030      	movs	r0, r6
 8015e70:	b00d      	add	sp, #52	; 0x34
 8015e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e74:	2300      	movs	r3, #0
 8015e76:	9303      	str	r3, [sp, #12]
 8015e78:	001e      	movs	r6, r3
 8015e7a:	e7a8      	b.n	8015dce <__gethex+0x88>
 8015e7c:	3401      	adds	r4, #1
 8015e7e:	e7be      	b.n	8015dfe <__gethex+0xb8>
 8015e80:	9c01      	ldr	r4, [sp, #4]
 8015e82:	2301      	movs	r3, #1
 8015e84:	9303      	str	r3, [sp, #12]
 8015e86:	e7c4      	b.n	8015e12 <__gethex+0xcc>
 8015e88:	0007      	movs	r7, r0
 8015e8a:	e7fa      	b.n	8015e82 <__gethex+0x13c>
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	9306      	str	r3, [sp, #24]
 8015e90:	1ca6      	adds	r6, r4, #2
 8015e92:	e7cb      	b.n	8015e2c <__gethex+0xe6>
 8015e94:	2301      	movs	r3, #1
 8015e96:	e7fa      	b.n	8015e8e <__gethex+0x148>
 8015e98:	230a      	movs	r3, #10
 8015e9a:	435d      	muls	r5, r3
 8015e9c:	182d      	adds	r5, r5, r0
 8015e9e:	3d10      	subs	r5, #16
 8015ea0:	e7cd      	b.n	8015e3e <__gethex+0xf8>
 8015ea2:	0026      	movs	r6, r4
 8015ea4:	e7d8      	b.n	8015e58 <__gethex+0x112>
 8015ea6:	9b01      	ldr	r3, [sp, #4]
 8015ea8:	9903      	ldr	r1, [sp, #12]
 8015eaa:	1ae3      	subs	r3, r4, r3
 8015eac:	3b01      	subs	r3, #1
 8015eae:	2b07      	cmp	r3, #7
 8015eb0:	dc47      	bgt.n	8015f42 <__gethex+0x1fc>
 8015eb2:	9805      	ldr	r0, [sp, #20]
 8015eb4:	f000 fa5e 	bl	8016374 <_Balloc>
 8015eb8:	0003      	movs	r3, r0
 8015eba:	3314      	adds	r3, #20
 8015ebc:	9303      	str	r3, [sp, #12]
 8015ebe:	9308      	str	r3, [sp, #32]
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	0005      	movs	r5, r0
 8015ec4:	001e      	movs	r6, r3
 8015ec6:	9306      	str	r3, [sp, #24]
 8015ec8:	9b01      	ldr	r3, [sp, #4]
 8015eca:	42a3      	cmp	r3, r4
 8015ecc:	d33c      	bcc.n	8015f48 <__gethex+0x202>
 8015ece:	9c08      	ldr	r4, [sp, #32]
 8015ed0:	9b03      	ldr	r3, [sp, #12]
 8015ed2:	c440      	stmia	r4!, {r6}
 8015ed4:	1ae4      	subs	r4, r4, r3
 8015ed6:	10a4      	asrs	r4, r4, #2
 8015ed8:	612c      	str	r4, [r5, #16]
 8015eda:	0030      	movs	r0, r6
 8015edc:	f000 faf8 	bl	80164d0 <__hi0bits>
 8015ee0:	9b02      	ldr	r3, [sp, #8]
 8015ee2:	0164      	lsls	r4, r4, #5
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	1a26      	subs	r6, r4, r0
 8015ee8:	9301      	str	r3, [sp, #4]
 8015eea:	429e      	cmp	r6, r3
 8015eec:	dd5f      	ble.n	8015fae <__gethex+0x268>
 8015eee:	1af6      	subs	r6, r6, r3
 8015ef0:	0031      	movs	r1, r6
 8015ef2:	0028      	movs	r0, r5
 8015ef4:	f000 fde3 	bl	8016abe <__any_on>
 8015ef8:	1e04      	subs	r4, r0, #0
 8015efa:	d00f      	beq.n	8015f1c <__gethex+0x1d6>
 8015efc:	2401      	movs	r4, #1
 8015efe:	211f      	movs	r1, #31
 8015f00:	0020      	movs	r0, r4
 8015f02:	1e73      	subs	r3, r6, #1
 8015f04:	4019      	ands	r1, r3
 8015f06:	4088      	lsls	r0, r1
 8015f08:	0001      	movs	r1, r0
 8015f0a:	115a      	asrs	r2, r3, #5
 8015f0c:	9803      	ldr	r0, [sp, #12]
 8015f0e:	0092      	lsls	r2, r2, #2
 8015f10:	5812      	ldr	r2, [r2, r0]
 8015f12:	420a      	tst	r2, r1
 8015f14:	d002      	beq.n	8015f1c <__gethex+0x1d6>
 8015f16:	42a3      	cmp	r3, r4
 8015f18:	dc41      	bgt.n	8015f9e <__gethex+0x258>
 8015f1a:	2402      	movs	r4, #2
 8015f1c:	0031      	movs	r1, r6
 8015f1e:	0028      	movs	r0, r5
 8015f20:	f7ff fec8 	bl	8015cb4 <rshift>
 8015f24:	19bf      	adds	r7, r7, r6
 8015f26:	9b02      	ldr	r3, [sp, #8]
 8015f28:	689b      	ldr	r3, [r3, #8]
 8015f2a:	9304      	str	r3, [sp, #16]
 8015f2c:	42bb      	cmp	r3, r7
 8015f2e:	da4e      	bge.n	8015fce <__gethex+0x288>
 8015f30:	0029      	movs	r1, r5
 8015f32:	9805      	ldr	r0, [sp, #20]
 8015f34:	f000 fa46 	bl	80163c4 <_Bfree>
 8015f38:	2300      	movs	r3, #0
 8015f3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015f3c:	26a3      	movs	r6, #163	; 0xa3
 8015f3e:	6013      	str	r3, [r2, #0]
 8015f40:	e795      	b.n	8015e6e <__gethex+0x128>
 8015f42:	3101      	adds	r1, #1
 8015f44:	105b      	asrs	r3, r3, #1
 8015f46:	e7b2      	b.n	8015eae <__gethex+0x168>
 8015f48:	1e63      	subs	r3, r4, #1
 8015f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8015f4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015f4e:	781b      	ldrb	r3, [r3, #0]
 8015f50:	4293      	cmp	r3, r2
 8015f52:	d015      	beq.n	8015f80 <__gethex+0x23a>
 8015f54:	9b06      	ldr	r3, [sp, #24]
 8015f56:	2b20      	cmp	r3, #32
 8015f58:	d105      	bne.n	8015f66 <__gethex+0x220>
 8015f5a:	9b08      	ldr	r3, [sp, #32]
 8015f5c:	601e      	str	r6, [r3, #0]
 8015f5e:	2600      	movs	r6, #0
 8015f60:	3304      	adds	r3, #4
 8015f62:	9308      	str	r3, [sp, #32]
 8015f64:	9606      	str	r6, [sp, #24]
 8015f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f68:	7818      	ldrb	r0, [r3, #0]
 8015f6a:	f7ff fed7 	bl	8015d1c <__hexdig_fun>
 8015f6e:	230f      	movs	r3, #15
 8015f70:	4018      	ands	r0, r3
 8015f72:	9b06      	ldr	r3, [sp, #24]
 8015f74:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015f76:	4098      	lsls	r0, r3
 8015f78:	3304      	adds	r3, #4
 8015f7a:	4306      	orrs	r6, r0
 8015f7c:	9306      	str	r3, [sp, #24]
 8015f7e:	e7a3      	b.n	8015ec8 <__gethex+0x182>
 8015f80:	2301      	movs	r3, #1
 8015f82:	9a04      	ldr	r2, [sp, #16]
 8015f84:	1a9c      	subs	r4, r3, r2
 8015f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f88:	191c      	adds	r4, r3, r4
 8015f8a:	9b01      	ldr	r3, [sp, #4]
 8015f8c:	429c      	cmp	r4, r3
 8015f8e:	d3e1      	bcc.n	8015f54 <__gethex+0x20e>
 8015f90:	9907      	ldr	r1, [sp, #28]
 8015f92:	0020      	movs	r0, r4
 8015f94:	f7fc fd4e 	bl	8012a34 <strncmp>
 8015f98:	2800      	cmp	r0, #0
 8015f9a:	d1db      	bne.n	8015f54 <__gethex+0x20e>
 8015f9c:	e794      	b.n	8015ec8 <__gethex+0x182>
 8015f9e:	1eb1      	subs	r1, r6, #2
 8015fa0:	0028      	movs	r0, r5
 8015fa2:	f000 fd8c 	bl	8016abe <__any_on>
 8015fa6:	2800      	cmp	r0, #0
 8015fa8:	d0b7      	beq.n	8015f1a <__gethex+0x1d4>
 8015faa:	2403      	movs	r4, #3
 8015fac:	e7b6      	b.n	8015f1c <__gethex+0x1d6>
 8015fae:	9b01      	ldr	r3, [sp, #4]
 8015fb0:	2400      	movs	r4, #0
 8015fb2:	429e      	cmp	r6, r3
 8015fb4:	dab7      	bge.n	8015f26 <__gethex+0x1e0>
 8015fb6:	1b9e      	subs	r6, r3, r6
 8015fb8:	0029      	movs	r1, r5
 8015fba:	0032      	movs	r2, r6
 8015fbc:	9805      	ldr	r0, [sp, #20]
 8015fbe:	f000 fbab 	bl	8016718 <__lshift>
 8015fc2:	0003      	movs	r3, r0
 8015fc4:	3314      	adds	r3, #20
 8015fc6:	0005      	movs	r5, r0
 8015fc8:	1bbf      	subs	r7, r7, r6
 8015fca:	9303      	str	r3, [sp, #12]
 8015fcc:	e7ab      	b.n	8015f26 <__gethex+0x1e0>
 8015fce:	9b02      	ldr	r3, [sp, #8]
 8015fd0:	685e      	ldr	r6, [r3, #4]
 8015fd2:	42be      	cmp	r6, r7
 8015fd4:	dd6b      	ble.n	80160ae <__gethex+0x368>
 8015fd6:	9b01      	ldr	r3, [sp, #4]
 8015fd8:	1bf6      	subs	r6, r6, r7
 8015fda:	42b3      	cmp	r3, r6
 8015fdc:	dc32      	bgt.n	8016044 <__gethex+0x2fe>
 8015fde:	9b02      	ldr	r3, [sp, #8]
 8015fe0:	68db      	ldr	r3, [r3, #12]
 8015fe2:	2b02      	cmp	r3, #2
 8015fe4:	d026      	beq.n	8016034 <__gethex+0x2ee>
 8015fe6:	2b03      	cmp	r3, #3
 8015fe8:	d028      	beq.n	801603c <__gethex+0x2f6>
 8015fea:	2b01      	cmp	r3, #1
 8015fec:	d119      	bne.n	8016022 <__gethex+0x2dc>
 8015fee:	9b01      	ldr	r3, [sp, #4]
 8015ff0:	42b3      	cmp	r3, r6
 8015ff2:	d116      	bne.n	8016022 <__gethex+0x2dc>
 8015ff4:	2b01      	cmp	r3, #1
 8015ff6:	dc0d      	bgt.n	8016014 <__gethex+0x2ce>
 8015ff8:	9b02      	ldr	r3, [sp, #8]
 8015ffa:	2662      	movs	r6, #98	; 0x62
 8015ffc:	685b      	ldr	r3, [r3, #4]
 8015ffe:	9301      	str	r3, [sp, #4]
 8016000:	9a01      	ldr	r2, [sp, #4]
 8016002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016004:	601a      	str	r2, [r3, #0]
 8016006:	2301      	movs	r3, #1
 8016008:	9a03      	ldr	r2, [sp, #12]
 801600a:	612b      	str	r3, [r5, #16]
 801600c:	6013      	str	r3, [r2, #0]
 801600e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016010:	601d      	str	r5, [r3, #0]
 8016012:	e72c      	b.n	8015e6e <__gethex+0x128>
 8016014:	9901      	ldr	r1, [sp, #4]
 8016016:	0028      	movs	r0, r5
 8016018:	3901      	subs	r1, #1
 801601a:	f000 fd50 	bl	8016abe <__any_on>
 801601e:	2800      	cmp	r0, #0
 8016020:	d1ea      	bne.n	8015ff8 <__gethex+0x2b2>
 8016022:	0029      	movs	r1, r5
 8016024:	9805      	ldr	r0, [sp, #20]
 8016026:	f000 f9cd 	bl	80163c4 <_Bfree>
 801602a:	2300      	movs	r3, #0
 801602c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801602e:	2650      	movs	r6, #80	; 0x50
 8016030:	6013      	str	r3, [r2, #0]
 8016032:	e71c      	b.n	8015e6e <__gethex+0x128>
 8016034:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016036:	2b00      	cmp	r3, #0
 8016038:	d0de      	beq.n	8015ff8 <__gethex+0x2b2>
 801603a:	e7f2      	b.n	8016022 <__gethex+0x2dc>
 801603c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801603e:	2b00      	cmp	r3, #0
 8016040:	d1da      	bne.n	8015ff8 <__gethex+0x2b2>
 8016042:	e7ee      	b.n	8016022 <__gethex+0x2dc>
 8016044:	1e77      	subs	r7, r6, #1
 8016046:	2c00      	cmp	r4, #0
 8016048:	d12f      	bne.n	80160aa <__gethex+0x364>
 801604a:	2f00      	cmp	r7, #0
 801604c:	d004      	beq.n	8016058 <__gethex+0x312>
 801604e:	0039      	movs	r1, r7
 8016050:	0028      	movs	r0, r5
 8016052:	f000 fd34 	bl	8016abe <__any_on>
 8016056:	0004      	movs	r4, r0
 8016058:	231f      	movs	r3, #31
 801605a:	117a      	asrs	r2, r7, #5
 801605c:	401f      	ands	r7, r3
 801605e:	3b1e      	subs	r3, #30
 8016060:	40bb      	lsls	r3, r7
 8016062:	9903      	ldr	r1, [sp, #12]
 8016064:	0092      	lsls	r2, r2, #2
 8016066:	5852      	ldr	r2, [r2, r1]
 8016068:	421a      	tst	r2, r3
 801606a:	d001      	beq.n	8016070 <__gethex+0x32a>
 801606c:	2302      	movs	r3, #2
 801606e:	431c      	orrs	r4, r3
 8016070:	9b01      	ldr	r3, [sp, #4]
 8016072:	0031      	movs	r1, r6
 8016074:	1b9b      	subs	r3, r3, r6
 8016076:	2602      	movs	r6, #2
 8016078:	0028      	movs	r0, r5
 801607a:	9301      	str	r3, [sp, #4]
 801607c:	f7ff fe1a 	bl	8015cb4 <rshift>
 8016080:	9b02      	ldr	r3, [sp, #8]
 8016082:	685f      	ldr	r7, [r3, #4]
 8016084:	2c00      	cmp	r4, #0
 8016086:	d040      	beq.n	801610a <__gethex+0x3c4>
 8016088:	9b02      	ldr	r3, [sp, #8]
 801608a:	68db      	ldr	r3, [r3, #12]
 801608c:	2b02      	cmp	r3, #2
 801608e:	d010      	beq.n	80160b2 <__gethex+0x36c>
 8016090:	2b03      	cmp	r3, #3
 8016092:	d012      	beq.n	80160ba <__gethex+0x374>
 8016094:	2b01      	cmp	r3, #1
 8016096:	d106      	bne.n	80160a6 <__gethex+0x360>
 8016098:	07a2      	lsls	r2, r4, #30
 801609a:	d504      	bpl.n	80160a6 <__gethex+0x360>
 801609c:	9a03      	ldr	r2, [sp, #12]
 801609e:	6812      	ldr	r2, [r2, #0]
 80160a0:	4314      	orrs	r4, r2
 80160a2:	421c      	tst	r4, r3
 80160a4:	d10c      	bne.n	80160c0 <__gethex+0x37a>
 80160a6:	2310      	movs	r3, #16
 80160a8:	e02e      	b.n	8016108 <__gethex+0x3c2>
 80160aa:	2401      	movs	r4, #1
 80160ac:	e7d4      	b.n	8016058 <__gethex+0x312>
 80160ae:	2601      	movs	r6, #1
 80160b0:	e7e8      	b.n	8016084 <__gethex+0x33e>
 80160b2:	2301      	movs	r3, #1
 80160b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80160b6:	1a9b      	subs	r3, r3, r2
 80160b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80160ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d0f2      	beq.n	80160a6 <__gethex+0x360>
 80160c0:	692c      	ldr	r4, [r5, #16]
 80160c2:	00a3      	lsls	r3, r4, #2
 80160c4:	9304      	str	r3, [sp, #16]
 80160c6:	002b      	movs	r3, r5
 80160c8:	00a2      	lsls	r2, r4, #2
 80160ca:	3314      	adds	r3, #20
 80160cc:	1899      	adds	r1, r3, r2
 80160ce:	2200      	movs	r2, #0
 80160d0:	4694      	mov	ip, r2
 80160d2:	681a      	ldr	r2, [r3, #0]
 80160d4:	1c50      	adds	r0, r2, #1
 80160d6:	d01d      	beq.n	8016114 <__gethex+0x3ce>
 80160d8:	3201      	adds	r2, #1
 80160da:	601a      	str	r2, [r3, #0]
 80160dc:	002b      	movs	r3, r5
 80160de:	3314      	adds	r3, #20
 80160e0:	2e02      	cmp	r6, #2
 80160e2:	d13a      	bne.n	801615a <__gethex+0x414>
 80160e4:	9a02      	ldr	r2, [sp, #8]
 80160e6:	9901      	ldr	r1, [sp, #4]
 80160e8:	6812      	ldr	r2, [r2, #0]
 80160ea:	3a01      	subs	r2, #1
 80160ec:	428a      	cmp	r2, r1
 80160ee:	d10a      	bne.n	8016106 <__gethex+0x3c0>
 80160f0:	114a      	asrs	r2, r1, #5
 80160f2:	211f      	movs	r1, #31
 80160f4:	9801      	ldr	r0, [sp, #4]
 80160f6:	0092      	lsls	r2, r2, #2
 80160f8:	4001      	ands	r1, r0
 80160fa:	2001      	movs	r0, #1
 80160fc:	0004      	movs	r4, r0
 80160fe:	408c      	lsls	r4, r1
 8016100:	58d3      	ldr	r3, [r2, r3]
 8016102:	4223      	tst	r3, r4
 8016104:	d148      	bne.n	8016198 <__gethex+0x452>
 8016106:	2320      	movs	r3, #32
 8016108:	431e      	orrs	r6, r3
 801610a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801610c:	601d      	str	r5, [r3, #0]
 801610e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016110:	601f      	str	r7, [r3, #0]
 8016112:	e6ac      	b.n	8015e6e <__gethex+0x128>
 8016114:	4662      	mov	r2, ip
 8016116:	c304      	stmia	r3!, {r2}
 8016118:	4299      	cmp	r1, r3
 801611a:	d8da      	bhi.n	80160d2 <__gethex+0x38c>
 801611c:	68ab      	ldr	r3, [r5, #8]
 801611e:	429c      	cmp	r4, r3
 8016120:	db12      	blt.n	8016148 <__gethex+0x402>
 8016122:	686b      	ldr	r3, [r5, #4]
 8016124:	9805      	ldr	r0, [sp, #20]
 8016126:	1c59      	adds	r1, r3, #1
 8016128:	f000 f924 	bl	8016374 <_Balloc>
 801612c:	0029      	movs	r1, r5
 801612e:	692b      	ldr	r3, [r5, #16]
 8016130:	9003      	str	r0, [sp, #12]
 8016132:	1c9a      	adds	r2, r3, #2
 8016134:	0092      	lsls	r2, r2, #2
 8016136:	310c      	adds	r1, #12
 8016138:	300c      	adds	r0, #12
 801613a:	f7fc fa34 	bl	80125a6 <memcpy>
 801613e:	0029      	movs	r1, r5
 8016140:	9805      	ldr	r0, [sp, #20]
 8016142:	f000 f93f 	bl	80163c4 <_Bfree>
 8016146:	9d03      	ldr	r5, [sp, #12]
 8016148:	692b      	ldr	r3, [r5, #16]
 801614a:	1c5a      	adds	r2, r3, #1
 801614c:	612a      	str	r2, [r5, #16]
 801614e:	2201      	movs	r2, #1
 8016150:	3304      	adds	r3, #4
 8016152:	009b      	lsls	r3, r3, #2
 8016154:	18eb      	adds	r3, r5, r3
 8016156:	605a      	str	r2, [r3, #4]
 8016158:	e7c0      	b.n	80160dc <__gethex+0x396>
 801615a:	692a      	ldr	r2, [r5, #16]
 801615c:	42a2      	cmp	r2, r4
 801615e:	dd0a      	ble.n	8016176 <__gethex+0x430>
 8016160:	2101      	movs	r1, #1
 8016162:	0028      	movs	r0, r5
 8016164:	f7ff fda6 	bl	8015cb4 <rshift>
 8016168:	9b02      	ldr	r3, [sp, #8]
 801616a:	3701      	adds	r7, #1
 801616c:	689b      	ldr	r3, [r3, #8]
 801616e:	2601      	movs	r6, #1
 8016170:	42bb      	cmp	r3, r7
 8016172:	dac8      	bge.n	8016106 <__gethex+0x3c0>
 8016174:	e6dc      	b.n	8015f30 <__gethex+0x1ea>
 8016176:	241f      	movs	r4, #31
 8016178:	9a01      	ldr	r2, [sp, #4]
 801617a:	2601      	movs	r6, #1
 801617c:	4022      	ands	r2, r4
 801617e:	1e14      	subs	r4, r2, #0
 8016180:	d0c1      	beq.n	8016106 <__gethex+0x3c0>
 8016182:	9a04      	ldr	r2, [sp, #16]
 8016184:	189b      	adds	r3, r3, r2
 8016186:	3b04      	subs	r3, #4
 8016188:	6818      	ldr	r0, [r3, #0]
 801618a:	f000 f9a1 	bl	80164d0 <__hi0bits>
 801618e:	2120      	movs	r1, #32
 8016190:	1b0c      	subs	r4, r1, r4
 8016192:	42a0      	cmp	r0, r4
 8016194:	dbe4      	blt.n	8016160 <__gethex+0x41a>
 8016196:	e7b6      	b.n	8016106 <__gethex+0x3c0>
 8016198:	0006      	movs	r6, r0
 801619a:	e7b4      	b.n	8016106 <__gethex+0x3c0>

0801619c <L_shift>:
 801619c:	2308      	movs	r3, #8
 801619e:	b570      	push	{r4, r5, r6, lr}
 80161a0:	2520      	movs	r5, #32
 80161a2:	1a9a      	subs	r2, r3, r2
 80161a4:	0092      	lsls	r2, r2, #2
 80161a6:	1aad      	subs	r5, r5, r2
 80161a8:	6843      	ldr	r3, [r0, #4]
 80161aa:	6806      	ldr	r6, [r0, #0]
 80161ac:	001c      	movs	r4, r3
 80161ae:	40ac      	lsls	r4, r5
 80161b0:	40d3      	lsrs	r3, r2
 80161b2:	4334      	orrs	r4, r6
 80161b4:	6004      	str	r4, [r0, #0]
 80161b6:	6043      	str	r3, [r0, #4]
 80161b8:	3004      	adds	r0, #4
 80161ba:	4288      	cmp	r0, r1
 80161bc:	d3f4      	bcc.n	80161a8 <L_shift+0xc>
 80161be:	bd70      	pop	{r4, r5, r6, pc}

080161c0 <__match>:
 80161c0:	b530      	push	{r4, r5, lr}
 80161c2:	6803      	ldr	r3, [r0, #0]
 80161c4:	780c      	ldrb	r4, [r1, #0]
 80161c6:	3301      	adds	r3, #1
 80161c8:	2c00      	cmp	r4, #0
 80161ca:	d102      	bne.n	80161d2 <__match+0x12>
 80161cc:	6003      	str	r3, [r0, #0]
 80161ce:	2001      	movs	r0, #1
 80161d0:	bd30      	pop	{r4, r5, pc}
 80161d2:	781a      	ldrb	r2, [r3, #0]
 80161d4:	0015      	movs	r5, r2
 80161d6:	3d41      	subs	r5, #65	; 0x41
 80161d8:	2d19      	cmp	r5, #25
 80161da:	d800      	bhi.n	80161de <__match+0x1e>
 80161dc:	3220      	adds	r2, #32
 80161de:	3101      	adds	r1, #1
 80161e0:	42a2      	cmp	r2, r4
 80161e2:	d0ef      	beq.n	80161c4 <__match+0x4>
 80161e4:	2000      	movs	r0, #0
 80161e6:	e7f3      	b.n	80161d0 <__match+0x10>

080161e8 <__hexnan>:
 80161e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161ea:	b08b      	sub	sp, #44	; 0x2c
 80161ec:	9201      	str	r2, [sp, #4]
 80161ee:	680a      	ldr	r2, [r1, #0]
 80161f0:	9901      	ldr	r1, [sp, #4]
 80161f2:	1153      	asrs	r3, r2, #5
 80161f4:	009b      	lsls	r3, r3, #2
 80161f6:	18cb      	adds	r3, r1, r3
 80161f8:	9304      	str	r3, [sp, #16]
 80161fa:	231f      	movs	r3, #31
 80161fc:	401a      	ands	r2, r3
 80161fe:	9008      	str	r0, [sp, #32]
 8016200:	9206      	str	r2, [sp, #24]
 8016202:	d002      	beq.n	801620a <__hexnan+0x22>
 8016204:	9b04      	ldr	r3, [sp, #16]
 8016206:	3304      	adds	r3, #4
 8016208:	9304      	str	r3, [sp, #16]
 801620a:	9b04      	ldr	r3, [sp, #16]
 801620c:	2500      	movs	r5, #0
 801620e:	1f1e      	subs	r6, r3, #4
 8016210:	0037      	movs	r7, r6
 8016212:	0034      	movs	r4, r6
 8016214:	9b08      	ldr	r3, [sp, #32]
 8016216:	6035      	str	r5, [r6, #0]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	9507      	str	r5, [sp, #28]
 801621c:	9305      	str	r3, [sp, #20]
 801621e:	9502      	str	r5, [sp, #8]
 8016220:	9b05      	ldr	r3, [sp, #20]
 8016222:	3301      	adds	r3, #1
 8016224:	9309      	str	r3, [sp, #36]	; 0x24
 8016226:	9b05      	ldr	r3, [sp, #20]
 8016228:	785b      	ldrb	r3, [r3, #1]
 801622a:	9303      	str	r3, [sp, #12]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d028      	beq.n	8016282 <__hexnan+0x9a>
 8016230:	9803      	ldr	r0, [sp, #12]
 8016232:	f7ff fd73 	bl	8015d1c <__hexdig_fun>
 8016236:	2800      	cmp	r0, #0
 8016238:	d145      	bne.n	80162c6 <__hexnan+0xde>
 801623a:	9b03      	ldr	r3, [sp, #12]
 801623c:	2b20      	cmp	r3, #32
 801623e:	d819      	bhi.n	8016274 <__hexnan+0x8c>
 8016240:	9b02      	ldr	r3, [sp, #8]
 8016242:	9a07      	ldr	r2, [sp, #28]
 8016244:	4293      	cmp	r3, r2
 8016246:	dd12      	ble.n	801626e <__hexnan+0x86>
 8016248:	42bc      	cmp	r4, r7
 801624a:	d206      	bcs.n	801625a <__hexnan+0x72>
 801624c:	2d07      	cmp	r5, #7
 801624e:	dc04      	bgt.n	801625a <__hexnan+0x72>
 8016250:	002a      	movs	r2, r5
 8016252:	0039      	movs	r1, r7
 8016254:	0020      	movs	r0, r4
 8016256:	f7ff ffa1 	bl	801619c <L_shift>
 801625a:	9b01      	ldr	r3, [sp, #4]
 801625c:	2508      	movs	r5, #8
 801625e:	429c      	cmp	r4, r3
 8016260:	d905      	bls.n	801626e <__hexnan+0x86>
 8016262:	1f27      	subs	r7, r4, #4
 8016264:	2500      	movs	r5, #0
 8016266:	003c      	movs	r4, r7
 8016268:	9b02      	ldr	r3, [sp, #8]
 801626a:	603d      	str	r5, [r7, #0]
 801626c:	9307      	str	r3, [sp, #28]
 801626e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016270:	9305      	str	r3, [sp, #20]
 8016272:	e7d5      	b.n	8016220 <__hexnan+0x38>
 8016274:	9b03      	ldr	r3, [sp, #12]
 8016276:	2b29      	cmp	r3, #41	; 0x29
 8016278:	d14a      	bne.n	8016310 <__hexnan+0x128>
 801627a:	9b05      	ldr	r3, [sp, #20]
 801627c:	9a08      	ldr	r2, [sp, #32]
 801627e:	3302      	adds	r3, #2
 8016280:	6013      	str	r3, [r2, #0]
 8016282:	9b02      	ldr	r3, [sp, #8]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d043      	beq.n	8016310 <__hexnan+0x128>
 8016288:	42bc      	cmp	r4, r7
 801628a:	d206      	bcs.n	801629a <__hexnan+0xb2>
 801628c:	2d07      	cmp	r5, #7
 801628e:	dc04      	bgt.n	801629a <__hexnan+0xb2>
 8016290:	002a      	movs	r2, r5
 8016292:	0039      	movs	r1, r7
 8016294:	0020      	movs	r0, r4
 8016296:	f7ff ff81 	bl	801619c <L_shift>
 801629a:	9b01      	ldr	r3, [sp, #4]
 801629c:	429c      	cmp	r4, r3
 801629e:	d926      	bls.n	80162ee <__hexnan+0x106>
 80162a0:	cc04      	ldmia	r4!, {r2}
 80162a2:	601a      	str	r2, [r3, #0]
 80162a4:	3304      	adds	r3, #4
 80162a6:	42a6      	cmp	r6, r4
 80162a8:	d2fa      	bcs.n	80162a0 <__hexnan+0xb8>
 80162aa:	2200      	movs	r2, #0
 80162ac:	c304      	stmia	r3!, {r2}
 80162ae:	429e      	cmp	r6, r3
 80162b0:	d2fc      	bcs.n	80162ac <__hexnan+0xc4>
 80162b2:	6833      	ldr	r3, [r6, #0]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d104      	bne.n	80162c2 <__hexnan+0xda>
 80162b8:	9b01      	ldr	r3, [sp, #4]
 80162ba:	429e      	cmp	r6, r3
 80162bc:	d126      	bne.n	801630c <__hexnan+0x124>
 80162be:	2301      	movs	r3, #1
 80162c0:	6033      	str	r3, [r6, #0]
 80162c2:	2005      	movs	r0, #5
 80162c4:	e025      	b.n	8016312 <__hexnan+0x12a>
 80162c6:	9b02      	ldr	r3, [sp, #8]
 80162c8:	3501      	adds	r5, #1
 80162ca:	3301      	adds	r3, #1
 80162cc:	9302      	str	r3, [sp, #8]
 80162ce:	2d08      	cmp	r5, #8
 80162d0:	dd06      	ble.n	80162e0 <__hexnan+0xf8>
 80162d2:	9b01      	ldr	r3, [sp, #4]
 80162d4:	429c      	cmp	r4, r3
 80162d6:	d9ca      	bls.n	801626e <__hexnan+0x86>
 80162d8:	2300      	movs	r3, #0
 80162da:	2501      	movs	r5, #1
 80162dc:	3c04      	subs	r4, #4
 80162de:	6023      	str	r3, [r4, #0]
 80162e0:	220f      	movs	r2, #15
 80162e2:	6823      	ldr	r3, [r4, #0]
 80162e4:	4010      	ands	r0, r2
 80162e6:	011b      	lsls	r3, r3, #4
 80162e8:	4318      	orrs	r0, r3
 80162ea:	6020      	str	r0, [r4, #0]
 80162ec:	e7bf      	b.n	801626e <__hexnan+0x86>
 80162ee:	9b06      	ldr	r3, [sp, #24]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d0de      	beq.n	80162b2 <__hexnan+0xca>
 80162f4:	2120      	movs	r1, #32
 80162f6:	9a06      	ldr	r2, [sp, #24]
 80162f8:	9b04      	ldr	r3, [sp, #16]
 80162fa:	1a89      	subs	r1, r1, r2
 80162fc:	2201      	movs	r2, #1
 80162fe:	4252      	negs	r2, r2
 8016300:	40ca      	lsrs	r2, r1
 8016302:	3b04      	subs	r3, #4
 8016304:	6819      	ldr	r1, [r3, #0]
 8016306:	400a      	ands	r2, r1
 8016308:	601a      	str	r2, [r3, #0]
 801630a:	e7d2      	b.n	80162b2 <__hexnan+0xca>
 801630c:	3e04      	subs	r6, #4
 801630e:	e7d0      	b.n	80162b2 <__hexnan+0xca>
 8016310:	2004      	movs	r0, #4
 8016312:	b00b      	add	sp, #44	; 0x2c
 8016314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016316 <__localeconv_l>:
 8016316:	30f0      	adds	r0, #240	; 0xf0
 8016318:	4770      	bx	lr
	...

0801631c <_localeconv_r>:
 801631c:	4b03      	ldr	r3, [pc, #12]	; (801632c <_localeconv_r+0x10>)
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016322:	2800      	cmp	r0, #0
 8016324:	d100      	bne.n	8016328 <_localeconv_r+0xc>
 8016326:	4802      	ldr	r0, [pc, #8]	; (8016330 <_localeconv_r+0x14>)
 8016328:	30f0      	adds	r0, #240	; 0xf0
 801632a:	4770      	bx	lr
 801632c:	200000dc 	.word	0x200000dc
 8016330:	20000508 	.word	0x20000508

08016334 <__retarget_lock_acquire_recursive>:
 8016334:	4770      	bx	lr

08016336 <__retarget_lock_release_recursive>:
 8016336:	4770      	bx	lr

08016338 <memchr>:
 8016338:	b2c9      	uxtb	r1, r1
 801633a:	1882      	adds	r2, r0, r2
 801633c:	4290      	cmp	r0, r2
 801633e:	d101      	bne.n	8016344 <memchr+0xc>
 8016340:	2000      	movs	r0, #0
 8016342:	4770      	bx	lr
 8016344:	7803      	ldrb	r3, [r0, #0]
 8016346:	428b      	cmp	r3, r1
 8016348:	d0fb      	beq.n	8016342 <memchr+0xa>
 801634a:	3001      	adds	r0, #1
 801634c:	e7f6      	b.n	801633c <memchr+0x4>

0801634e <memmove>:
 801634e:	b510      	push	{r4, lr}
 8016350:	4288      	cmp	r0, r1
 8016352:	d902      	bls.n	801635a <memmove+0xc>
 8016354:	188b      	adds	r3, r1, r2
 8016356:	4298      	cmp	r0, r3
 8016358:	d303      	bcc.n	8016362 <memmove+0x14>
 801635a:	2300      	movs	r3, #0
 801635c:	e007      	b.n	801636e <memmove+0x20>
 801635e:	5c8b      	ldrb	r3, [r1, r2]
 8016360:	5483      	strb	r3, [r0, r2]
 8016362:	3a01      	subs	r2, #1
 8016364:	d2fb      	bcs.n	801635e <memmove+0x10>
 8016366:	bd10      	pop	{r4, pc}
 8016368:	5ccc      	ldrb	r4, [r1, r3]
 801636a:	54c4      	strb	r4, [r0, r3]
 801636c:	3301      	adds	r3, #1
 801636e:	429a      	cmp	r2, r3
 8016370:	d1fa      	bne.n	8016368 <memmove+0x1a>
 8016372:	e7f8      	b.n	8016366 <memmove+0x18>

08016374 <_Balloc>:
 8016374:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016376:	b570      	push	{r4, r5, r6, lr}
 8016378:	0004      	movs	r4, r0
 801637a:	000d      	movs	r5, r1
 801637c:	2b00      	cmp	r3, #0
 801637e:	d012      	beq.n	80163a6 <_Balloc+0x32>
 8016380:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016382:	00ab      	lsls	r3, r5, #2
 8016384:	18d3      	adds	r3, r2, r3
 8016386:	6818      	ldr	r0, [r3, #0]
 8016388:	2800      	cmp	r0, #0
 801638a:	d115      	bne.n	80163b8 <_Balloc+0x44>
 801638c:	2101      	movs	r1, #1
 801638e:	000e      	movs	r6, r1
 8016390:	40ae      	lsls	r6, r5
 8016392:	1d72      	adds	r2, r6, #5
 8016394:	0092      	lsls	r2, r2, #2
 8016396:	0020      	movs	r0, r4
 8016398:	f7fb fe56 	bl	8012048 <_calloc_r>
 801639c:	2800      	cmp	r0, #0
 801639e:	d009      	beq.n	80163b4 <_Balloc+0x40>
 80163a0:	6045      	str	r5, [r0, #4]
 80163a2:	6086      	str	r6, [r0, #8]
 80163a4:	e00a      	b.n	80163bc <_Balloc+0x48>
 80163a6:	2221      	movs	r2, #33	; 0x21
 80163a8:	2104      	movs	r1, #4
 80163aa:	f7fb fe4d 	bl	8012048 <_calloc_r>
 80163ae:	64e0      	str	r0, [r4, #76]	; 0x4c
 80163b0:	2800      	cmp	r0, #0
 80163b2:	d1e5      	bne.n	8016380 <_Balloc+0xc>
 80163b4:	2000      	movs	r0, #0
 80163b6:	bd70      	pop	{r4, r5, r6, pc}
 80163b8:	6802      	ldr	r2, [r0, #0]
 80163ba:	601a      	str	r2, [r3, #0]
 80163bc:	2300      	movs	r3, #0
 80163be:	6103      	str	r3, [r0, #16]
 80163c0:	60c3      	str	r3, [r0, #12]
 80163c2:	e7f8      	b.n	80163b6 <_Balloc+0x42>

080163c4 <_Bfree>:
 80163c4:	2900      	cmp	r1, #0
 80163c6:	d006      	beq.n	80163d6 <_Bfree+0x12>
 80163c8:	684b      	ldr	r3, [r1, #4]
 80163ca:	009a      	lsls	r2, r3, #2
 80163cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80163ce:	189b      	adds	r3, r3, r2
 80163d0:	681a      	ldr	r2, [r3, #0]
 80163d2:	600a      	str	r2, [r1, #0]
 80163d4:	6019      	str	r1, [r3, #0]
 80163d6:	4770      	bx	lr

080163d8 <__multadd>:
 80163d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80163da:	001e      	movs	r6, r3
 80163dc:	2314      	movs	r3, #20
 80163de:	469c      	mov	ip, r3
 80163e0:	0007      	movs	r7, r0
 80163e2:	000c      	movs	r4, r1
 80163e4:	2000      	movs	r0, #0
 80163e6:	690d      	ldr	r5, [r1, #16]
 80163e8:	448c      	add	ip, r1
 80163ea:	4663      	mov	r3, ip
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	3001      	adds	r0, #1
 80163f0:	b299      	uxth	r1, r3
 80163f2:	4663      	mov	r3, ip
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	4351      	muls	r1, r2
 80163f8:	0c1b      	lsrs	r3, r3, #16
 80163fa:	4353      	muls	r3, r2
 80163fc:	1989      	adds	r1, r1, r6
 80163fe:	0c0e      	lsrs	r6, r1, #16
 8016400:	199b      	adds	r3, r3, r6
 8016402:	b289      	uxth	r1, r1
 8016404:	0c1e      	lsrs	r6, r3, #16
 8016406:	041b      	lsls	r3, r3, #16
 8016408:	185b      	adds	r3, r3, r1
 801640a:	4661      	mov	r1, ip
 801640c:	c108      	stmia	r1!, {r3}
 801640e:	468c      	mov	ip, r1
 8016410:	4285      	cmp	r5, r0
 8016412:	dcea      	bgt.n	80163ea <__multadd+0x12>
 8016414:	2e00      	cmp	r6, #0
 8016416:	d01b      	beq.n	8016450 <__multadd+0x78>
 8016418:	68a3      	ldr	r3, [r4, #8]
 801641a:	42ab      	cmp	r3, r5
 801641c:	dc12      	bgt.n	8016444 <__multadd+0x6c>
 801641e:	6863      	ldr	r3, [r4, #4]
 8016420:	0038      	movs	r0, r7
 8016422:	1c59      	adds	r1, r3, #1
 8016424:	f7ff ffa6 	bl	8016374 <_Balloc>
 8016428:	0021      	movs	r1, r4
 801642a:	6923      	ldr	r3, [r4, #16]
 801642c:	9001      	str	r0, [sp, #4]
 801642e:	1c9a      	adds	r2, r3, #2
 8016430:	0092      	lsls	r2, r2, #2
 8016432:	310c      	adds	r1, #12
 8016434:	300c      	adds	r0, #12
 8016436:	f7fc f8b6 	bl	80125a6 <memcpy>
 801643a:	0021      	movs	r1, r4
 801643c:	0038      	movs	r0, r7
 801643e:	f7ff ffc1 	bl	80163c4 <_Bfree>
 8016442:	9c01      	ldr	r4, [sp, #4]
 8016444:	1d2b      	adds	r3, r5, #4
 8016446:	009b      	lsls	r3, r3, #2
 8016448:	18e3      	adds	r3, r4, r3
 801644a:	3501      	adds	r5, #1
 801644c:	605e      	str	r6, [r3, #4]
 801644e:	6125      	str	r5, [r4, #16]
 8016450:	0020      	movs	r0, r4
 8016452:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016454 <__s2b>:
 8016454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016456:	0006      	movs	r6, r0
 8016458:	0018      	movs	r0, r3
 801645a:	000c      	movs	r4, r1
 801645c:	3008      	adds	r0, #8
 801645e:	2109      	movs	r1, #9
 8016460:	9301      	str	r3, [sp, #4]
 8016462:	0015      	movs	r5, r2
 8016464:	f7e9 fefe 	bl	8000264 <__divsi3>
 8016468:	2301      	movs	r3, #1
 801646a:	2100      	movs	r1, #0
 801646c:	4283      	cmp	r3, r0
 801646e:	db1f      	blt.n	80164b0 <__s2b+0x5c>
 8016470:	0030      	movs	r0, r6
 8016472:	f7ff ff7f 	bl	8016374 <_Balloc>
 8016476:	9b08      	ldr	r3, [sp, #32]
 8016478:	6143      	str	r3, [r0, #20]
 801647a:	2301      	movs	r3, #1
 801647c:	6103      	str	r3, [r0, #16]
 801647e:	2d09      	cmp	r5, #9
 8016480:	dd19      	ble.n	80164b6 <__s2b+0x62>
 8016482:	0023      	movs	r3, r4
 8016484:	3309      	adds	r3, #9
 8016486:	001f      	movs	r7, r3
 8016488:	9300      	str	r3, [sp, #0]
 801648a:	1964      	adds	r4, r4, r5
 801648c:	783b      	ldrb	r3, [r7, #0]
 801648e:	0001      	movs	r1, r0
 8016490:	3b30      	subs	r3, #48	; 0x30
 8016492:	220a      	movs	r2, #10
 8016494:	0030      	movs	r0, r6
 8016496:	3701      	adds	r7, #1
 8016498:	f7ff ff9e 	bl	80163d8 <__multadd>
 801649c:	42a7      	cmp	r7, r4
 801649e:	d1f5      	bne.n	801648c <__s2b+0x38>
 80164a0:	9b00      	ldr	r3, [sp, #0]
 80164a2:	195c      	adds	r4, r3, r5
 80164a4:	3c08      	subs	r4, #8
 80164a6:	002f      	movs	r7, r5
 80164a8:	9b01      	ldr	r3, [sp, #4]
 80164aa:	429f      	cmp	r7, r3
 80164ac:	db06      	blt.n	80164bc <__s2b+0x68>
 80164ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80164b0:	005b      	lsls	r3, r3, #1
 80164b2:	3101      	adds	r1, #1
 80164b4:	e7da      	b.n	801646c <__s2b+0x18>
 80164b6:	340a      	adds	r4, #10
 80164b8:	2509      	movs	r5, #9
 80164ba:	e7f4      	b.n	80164a6 <__s2b+0x52>
 80164bc:	1b63      	subs	r3, r4, r5
 80164be:	5ddb      	ldrb	r3, [r3, r7]
 80164c0:	0001      	movs	r1, r0
 80164c2:	3b30      	subs	r3, #48	; 0x30
 80164c4:	220a      	movs	r2, #10
 80164c6:	0030      	movs	r0, r6
 80164c8:	f7ff ff86 	bl	80163d8 <__multadd>
 80164cc:	3701      	adds	r7, #1
 80164ce:	e7eb      	b.n	80164a8 <__s2b+0x54>

080164d0 <__hi0bits>:
 80164d0:	0003      	movs	r3, r0
 80164d2:	0c02      	lsrs	r2, r0, #16
 80164d4:	2000      	movs	r0, #0
 80164d6:	4282      	cmp	r2, r0
 80164d8:	d101      	bne.n	80164de <__hi0bits+0xe>
 80164da:	041b      	lsls	r3, r3, #16
 80164dc:	3010      	adds	r0, #16
 80164de:	0e1a      	lsrs	r2, r3, #24
 80164e0:	d101      	bne.n	80164e6 <__hi0bits+0x16>
 80164e2:	3008      	adds	r0, #8
 80164e4:	021b      	lsls	r3, r3, #8
 80164e6:	0f1a      	lsrs	r2, r3, #28
 80164e8:	d101      	bne.n	80164ee <__hi0bits+0x1e>
 80164ea:	3004      	adds	r0, #4
 80164ec:	011b      	lsls	r3, r3, #4
 80164ee:	0f9a      	lsrs	r2, r3, #30
 80164f0:	d101      	bne.n	80164f6 <__hi0bits+0x26>
 80164f2:	3002      	adds	r0, #2
 80164f4:	009b      	lsls	r3, r3, #2
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	db03      	blt.n	8016502 <__hi0bits+0x32>
 80164fa:	3001      	adds	r0, #1
 80164fc:	005b      	lsls	r3, r3, #1
 80164fe:	d400      	bmi.n	8016502 <__hi0bits+0x32>
 8016500:	2020      	movs	r0, #32
 8016502:	4770      	bx	lr

08016504 <__lo0bits>:
 8016504:	2207      	movs	r2, #7
 8016506:	6803      	ldr	r3, [r0, #0]
 8016508:	b510      	push	{r4, lr}
 801650a:	0001      	movs	r1, r0
 801650c:	401a      	ands	r2, r3
 801650e:	d00d      	beq.n	801652c <__lo0bits+0x28>
 8016510:	2401      	movs	r4, #1
 8016512:	2000      	movs	r0, #0
 8016514:	4223      	tst	r3, r4
 8016516:	d105      	bne.n	8016524 <__lo0bits+0x20>
 8016518:	3002      	adds	r0, #2
 801651a:	4203      	tst	r3, r0
 801651c:	d003      	beq.n	8016526 <__lo0bits+0x22>
 801651e:	40e3      	lsrs	r3, r4
 8016520:	0020      	movs	r0, r4
 8016522:	600b      	str	r3, [r1, #0]
 8016524:	bd10      	pop	{r4, pc}
 8016526:	089b      	lsrs	r3, r3, #2
 8016528:	600b      	str	r3, [r1, #0]
 801652a:	e7fb      	b.n	8016524 <__lo0bits+0x20>
 801652c:	b29c      	uxth	r4, r3
 801652e:	0010      	movs	r0, r2
 8016530:	2c00      	cmp	r4, #0
 8016532:	d101      	bne.n	8016538 <__lo0bits+0x34>
 8016534:	2010      	movs	r0, #16
 8016536:	0c1b      	lsrs	r3, r3, #16
 8016538:	b2da      	uxtb	r2, r3
 801653a:	2a00      	cmp	r2, #0
 801653c:	d101      	bne.n	8016542 <__lo0bits+0x3e>
 801653e:	3008      	adds	r0, #8
 8016540:	0a1b      	lsrs	r3, r3, #8
 8016542:	071a      	lsls	r2, r3, #28
 8016544:	d101      	bne.n	801654a <__lo0bits+0x46>
 8016546:	3004      	adds	r0, #4
 8016548:	091b      	lsrs	r3, r3, #4
 801654a:	079a      	lsls	r2, r3, #30
 801654c:	d101      	bne.n	8016552 <__lo0bits+0x4e>
 801654e:	3002      	adds	r0, #2
 8016550:	089b      	lsrs	r3, r3, #2
 8016552:	07da      	lsls	r2, r3, #31
 8016554:	d4e8      	bmi.n	8016528 <__lo0bits+0x24>
 8016556:	085b      	lsrs	r3, r3, #1
 8016558:	d001      	beq.n	801655e <__lo0bits+0x5a>
 801655a:	3001      	adds	r0, #1
 801655c:	e7e4      	b.n	8016528 <__lo0bits+0x24>
 801655e:	2020      	movs	r0, #32
 8016560:	e7e0      	b.n	8016524 <__lo0bits+0x20>

08016562 <__i2b>:
 8016562:	b510      	push	{r4, lr}
 8016564:	000c      	movs	r4, r1
 8016566:	2101      	movs	r1, #1
 8016568:	f7ff ff04 	bl	8016374 <_Balloc>
 801656c:	2301      	movs	r3, #1
 801656e:	6144      	str	r4, [r0, #20]
 8016570:	6103      	str	r3, [r0, #16]
 8016572:	bd10      	pop	{r4, pc}

08016574 <__multiply>:
 8016574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016576:	690b      	ldr	r3, [r1, #16]
 8016578:	0014      	movs	r4, r2
 801657a:	6912      	ldr	r2, [r2, #16]
 801657c:	b089      	sub	sp, #36	; 0x24
 801657e:	000d      	movs	r5, r1
 8016580:	4293      	cmp	r3, r2
 8016582:	da01      	bge.n	8016588 <__multiply+0x14>
 8016584:	0025      	movs	r5, r4
 8016586:	000c      	movs	r4, r1
 8016588:	692f      	ldr	r7, [r5, #16]
 801658a:	6926      	ldr	r6, [r4, #16]
 801658c:	6869      	ldr	r1, [r5, #4]
 801658e:	19bb      	adds	r3, r7, r6
 8016590:	9302      	str	r3, [sp, #8]
 8016592:	68ab      	ldr	r3, [r5, #8]
 8016594:	19ba      	adds	r2, r7, r6
 8016596:	4293      	cmp	r3, r2
 8016598:	da00      	bge.n	801659c <__multiply+0x28>
 801659a:	3101      	adds	r1, #1
 801659c:	f7ff feea 	bl	8016374 <_Balloc>
 80165a0:	0002      	movs	r2, r0
 80165a2:	19bb      	adds	r3, r7, r6
 80165a4:	3214      	adds	r2, #20
 80165a6:	009b      	lsls	r3, r3, #2
 80165a8:	18d3      	adds	r3, r2, r3
 80165aa:	469c      	mov	ip, r3
 80165ac:	2100      	movs	r1, #0
 80165ae:	0013      	movs	r3, r2
 80165b0:	9004      	str	r0, [sp, #16]
 80165b2:	4563      	cmp	r3, ip
 80165b4:	d31d      	bcc.n	80165f2 <__multiply+0x7e>
 80165b6:	3514      	adds	r5, #20
 80165b8:	00bf      	lsls	r7, r7, #2
 80165ba:	19eb      	adds	r3, r5, r7
 80165bc:	3414      	adds	r4, #20
 80165be:	00b6      	lsls	r6, r6, #2
 80165c0:	9305      	str	r3, [sp, #20]
 80165c2:	19a3      	adds	r3, r4, r6
 80165c4:	9503      	str	r5, [sp, #12]
 80165c6:	9401      	str	r4, [sp, #4]
 80165c8:	9307      	str	r3, [sp, #28]
 80165ca:	9b07      	ldr	r3, [sp, #28]
 80165cc:	9901      	ldr	r1, [sp, #4]
 80165ce:	4299      	cmp	r1, r3
 80165d0:	d311      	bcc.n	80165f6 <__multiply+0x82>
 80165d2:	9b02      	ldr	r3, [sp, #8]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	dd06      	ble.n	80165e6 <__multiply+0x72>
 80165d8:	2304      	movs	r3, #4
 80165da:	425b      	negs	r3, r3
 80165dc:	449c      	add	ip, r3
 80165de:	4663      	mov	r3, ip
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d051      	beq.n	801668a <__multiply+0x116>
 80165e6:	9b04      	ldr	r3, [sp, #16]
 80165e8:	9a02      	ldr	r2, [sp, #8]
 80165ea:	0018      	movs	r0, r3
 80165ec:	611a      	str	r2, [r3, #16]
 80165ee:	b009      	add	sp, #36	; 0x24
 80165f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165f2:	c302      	stmia	r3!, {r1}
 80165f4:	e7dd      	b.n	80165b2 <__multiply+0x3e>
 80165f6:	9b01      	ldr	r3, [sp, #4]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	b298      	uxth	r0, r3
 80165fc:	2800      	cmp	r0, #0
 80165fe:	d01c      	beq.n	801663a <__multiply+0xc6>
 8016600:	0015      	movs	r5, r2
 8016602:	2600      	movs	r6, #0
 8016604:	9f03      	ldr	r7, [sp, #12]
 8016606:	cf02      	ldmia	r7!, {r1}
 8016608:	682c      	ldr	r4, [r5, #0]
 801660a:	b28b      	uxth	r3, r1
 801660c:	4343      	muls	r3, r0
 801660e:	0c09      	lsrs	r1, r1, #16
 8016610:	4341      	muls	r1, r0
 8016612:	b2a4      	uxth	r4, r4
 8016614:	191b      	adds	r3, r3, r4
 8016616:	199b      	adds	r3, r3, r6
 8016618:	000e      	movs	r6, r1
 801661a:	6829      	ldr	r1, [r5, #0]
 801661c:	9506      	str	r5, [sp, #24]
 801661e:	0c09      	lsrs	r1, r1, #16
 8016620:	1871      	adds	r1, r6, r1
 8016622:	0c1e      	lsrs	r6, r3, #16
 8016624:	1989      	adds	r1, r1, r6
 8016626:	0c0e      	lsrs	r6, r1, #16
 8016628:	b29b      	uxth	r3, r3
 801662a:	0409      	lsls	r1, r1, #16
 801662c:	430b      	orrs	r3, r1
 801662e:	c508      	stmia	r5!, {r3}
 8016630:	9b05      	ldr	r3, [sp, #20]
 8016632:	42bb      	cmp	r3, r7
 8016634:	d8e7      	bhi.n	8016606 <__multiply+0x92>
 8016636:	9b06      	ldr	r3, [sp, #24]
 8016638:	605e      	str	r6, [r3, #4]
 801663a:	9b01      	ldr	r3, [sp, #4]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	0c1d      	lsrs	r5, r3, #16
 8016640:	d01e      	beq.n	8016680 <__multiply+0x10c>
 8016642:	0010      	movs	r0, r2
 8016644:	2700      	movs	r7, #0
 8016646:	6813      	ldr	r3, [r2, #0]
 8016648:	9e03      	ldr	r6, [sp, #12]
 801664a:	6831      	ldr	r1, [r6, #0]
 801664c:	6804      	ldr	r4, [r0, #0]
 801664e:	b289      	uxth	r1, r1
 8016650:	4369      	muls	r1, r5
 8016652:	0c24      	lsrs	r4, r4, #16
 8016654:	1909      	adds	r1, r1, r4
 8016656:	19c9      	adds	r1, r1, r7
 8016658:	040f      	lsls	r7, r1, #16
 801665a:	b29b      	uxth	r3, r3
 801665c:	433b      	orrs	r3, r7
 801665e:	6003      	str	r3, [r0, #0]
 8016660:	ce80      	ldmia	r6!, {r7}
 8016662:	6843      	ldr	r3, [r0, #4]
 8016664:	0c3f      	lsrs	r7, r7, #16
 8016666:	436f      	muls	r7, r5
 8016668:	b29b      	uxth	r3, r3
 801666a:	18fb      	adds	r3, r7, r3
 801666c:	0c09      	lsrs	r1, r1, #16
 801666e:	185b      	adds	r3, r3, r1
 8016670:	9905      	ldr	r1, [sp, #20]
 8016672:	9006      	str	r0, [sp, #24]
 8016674:	0c1f      	lsrs	r7, r3, #16
 8016676:	3004      	adds	r0, #4
 8016678:	42b1      	cmp	r1, r6
 801667a:	d8e6      	bhi.n	801664a <__multiply+0xd6>
 801667c:	9906      	ldr	r1, [sp, #24]
 801667e:	604b      	str	r3, [r1, #4]
 8016680:	9b01      	ldr	r3, [sp, #4]
 8016682:	3204      	adds	r2, #4
 8016684:	3304      	adds	r3, #4
 8016686:	9301      	str	r3, [sp, #4]
 8016688:	e79f      	b.n	80165ca <__multiply+0x56>
 801668a:	9b02      	ldr	r3, [sp, #8]
 801668c:	3b01      	subs	r3, #1
 801668e:	9302      	str	r3, [sp, #8]
 8016690:	e79f      	b.n	80165d2 <__multiply+0x5e>
	...

08016694 <__pow5mult>:
 8016694:	2303      	movs	r3, #3
 8016696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016698:	4013      	ands	r3, r2
 801669a:	0006      	movs	r6, r0
 801669c:	000f      	movs	r7, r1
 801669e:	0015      	movs	r5, r2
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d008      	beq.n	80166b6 <__pow5mult+0x22>
 80166a4:	491a      	ldr	r1, [pc, #104]	; (8016710 <__pow5mult+0x7c>)
 80166a6:	3b01      	subs	r3, #1
 80166a8:	009a      	lsls	r2, r3, #2
 80166aa:	5852      	ldr	r2, [r2, r1]
 80166ac:	2300      	movs	r3, #0
 80166ae:	0039      	movs	r1, r7
 80166b0:	f7ff fe92 	bl	80163d8 <__multadd>
 80166b4:	0007      	movs	r7, r0
 80166b6:	10ad      	asrs	r5, r5, #2
 80166b8:	d027      	beq.n	801670a <__pow5mult+0x76>
 80166ba:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80166bc:	2c00      	cmp	r4, #0
 80166be:	d107      	bne.n	80166d0 <__pow5mult+0x3c>
 80166c0:	4914      	ldr	r1, [pc, #80]	; (8016714 <__pow5mult+0x80>)
 80166c2:	0030      	movs	r0, r6
 80166c4:	f7ff ff4d 	bl	8016562 <__i2b>
 80166c8:	2300      	movs	r3, #0
 80166ca:	0004      	movs	r4, r0
 80166cc:	64b0      	str	r0, [r6, #72]	; 0x48
 80166ce:	6003      	str	r3, [r0, #0]
 80166d0:	2301      	movs	r3, #1
 80166d2:	421d      	tst	r5, r3
 80166d4:	d00a      	beq.n	80166ec <__pow5mult+0x58>
 80166d6:	0039      	movs	r1, r7
 80166d8:	0022      	movs	r2, r4
 80166da:	0030      	movs	r0, r6
 80166dc:	f7ff ff4a 	bl	8016574 <__multiply>
 80166e0:	0039      	movs	r1, r7
 80166e2:	9001      	str	r0, [sp, #4]
 80166e4:	0030      	movs	r0, r6
 80166e6:	f7ff fe6d 	bl	80163c4 <_Bfree>
 80166ea:	9f01      	ldr	r7, [sp, #4]
 80166ec:	106d      	asrs	r5, r5, #1
 80166ee:	d00c      	beq.n	801670a <__pow5mult+0x76>
 80166f0:	6820      	ldr	r0, [r4, #0]
 80166f2:	2800      	cmp	r0, #0
 80166f4:	d107      	bne.n	8016706 <__pow5mult+0x72>
 80166f6:	0022      	movs	r2, r4
 80166f8:	0021      	movs	r1, r4
 80166fa:	0030      	movs	r0, r6
 80166fc:	f7ff ff3a 	bl	8016574 <__multiply>
 8016700:	2300      	movs	r3, #0
 8016702:	6020      	str	r0, [r4, #0]
 8016704:	6003      	str	r3, [r0, #0]
 8016706:	0004      	movs	r4, r0
 8016708:	e7e2      	b.n	80166d0 <__pow5mult+0x3c>
 801670a:	0038      	movs	r0, r7
 801670c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801670e:	46c0      	nop			; (mov r8, r8)
 8016710:	0801a130 	.word	0x0801a130
 8016714:	00000271 	.word	0x00000271

08016718 <__lshift>:
 8016718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801671a:	000d      	movs	r5, r1
 801671c:	0017      	movs	r7, r2
 801671e:	692b      	ldr	r3, [r5, #16]
 8016720:	1154      	asrs	r4, r2, #5
 8016722:	b085      	sub	sp, #20
 8016724:	18e3      	adds	r3, r4, r3
 8016726:	9301      	str	r3, [sp, #4]
 8016728:	3301      	adds	r3, #1
 801672a:	9300      	str	r3, [sp, #0]
 801672c:	6849      	ldr	r1, [r1, #4]
 801672e:	68ab      	ldr	r3, [r5, #8]
 8016730:	9002      	str	r0, [sp, #8]
 8016732:	9a00      	ldr	r2, [sp, #0]
 8016734:	4293      	cmp	r3, r2
 8016736:	db35      	blt.n	80167a4 <__lshift+0x8c>
 8016738:	9802      	ldr	r0, [sp, #8]
 801673a:	f7ff fe1b 	bl	8016374 <_Balloc>
 801673e:	2300      	movs	r3, #0
 8016740:	0002      	movs	r2, r0
 8016742:	0006      	movs	r6, r0
 8016744:	0019      	movs	r1, r3
 8016746:	3214      	adds	r2, #20
 8016748:	42a3      	cmp	r3, r4
 801674a:	db2e      	blt.n	80167aa <__lshift+0x92>
 801674c:	43e3      	mvns	r3, r4
 801674e:	17db      	asrs	r3, r3, #31
 8016750:	401c      	ands	r4, r3
 8016752:	002b      	movs	r3, r5
 8016754:	00a4      	lsls	r4, r4, #2
 8016756:	1914      	adds	r4, r2, r4
 8016758:	692a      	ldr	r2, [r5, #16]
 801675a:	3314      	adds	r3, #20
 801675c:	0092      	lsls	r2, r2, #2
 801675e:	189a      	adds	r2, r3, r2
 8016760:	4694      	mov	ip, r2
 8016762:	221f      	movs	r2, #31
 8016764:	4017      	ands	r7, r2
 8016766:	d024      	beq.n	80167b2 <__lshift+0x9a>
 8016768:	3201      	adds	r2, #1
 801676a:	1bd2      	subs	r2, r2, r7
 801676c:	9203      	str	r2, [sp, #12]
 801676e:	2200      	movs	r2, #0
 8016770:	6819      	ldr	r1, [r3, #0]
 8016772:	0020      	movs	r0, r4
 8016774:	40b9      	lsls	r1, r7
 8016776:	430a      	orrs	r2, r1
 8016778:	c404      	stmia	r4!, {r2}
 801677a:	cb04      	ldmia	r3!, {r2}
 801677c:	9903      	ldr	r1, [sp, #12]
 801677e:	40ca      	lsrs	r2, r1
 8016780:	459c      	cmp	ip, r3
 8016782:	d8f5      	bhi.n	8016770 <__lshift+0x58>
 8016784:	6042      	str	r2, [r0, #4]
 8016786:	2a00      	cmp	r2, #0
 8016788:	d002      	beq.n	8016790 <__lshift+0x78>
 801678a:	9b01      	ldr	r3, [sp, #4]
 801678c:	3302      	adds	r3, #2
 801678e:	9300      	str	r3, [sp, #0]
 8016790:	9b00      	ldr	r3, [sp, #0]
 8016792:	9802      	ldr	r0, [sp, #8]
 8016794:	3b01      	subs	r3, #1
 8016796:	6133      	str	r3, [r6, #16]
 8016798:	0029      	movs	r1, r5
 801679a:	f7ff fe13 	bl	80163c4 <_Bfree>
 801679e:	0030      	movs	r0, r6
 80167a0:	b005      	add	sp, #20
 80167a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167a4:	3101      	adds	r1, #1
 80167a6:	005b      	lsls	r3, r3, #1
 80167a8:	e7c3      	b.n	8016732 <__lshift+0x1a>
 80167aa:	0098      	lsls	r0, r3, #2
 80167ac:	5011      	str	r1, [r2, r0]
 80167ae:	3301      	adds	r3, #1
 80167b0:	e7ca      	b.n	8016748 <__lshift+0x30>
 80167b2:	cb04      	ldmia	r3!, {r2}
 80167b4:	c404      	stmia	r4!, {r2}
 80167b6:	459c      	cmp	ip, r3
 80167b8:	d8fb      	bhi.n	80167b2 <__lshift+0x9a>
 80167ba:	e7e9      	b.n	8016790 <__lshift+0x78>

080167bc <__mcmp>:
 80167bc:	690a      	ldr	r2, [r1, #16]
 80167be:	6903      	ldr	r3, [r0, #16]
 80167c0:	b530      	push	{r4, r5, lr}
 80167c2:	1a9b      	subs	r3, r3, r2
 80167c4:	d10d      	bne.n	80167e2 <__mcmp+0x26>
 80167c6:	0092      	lsls	r2, r2, #2
 80167c8:	3014      	adds	r0, #20
 80167ca:	3114      	adds	r1, #20
 80167cc:	1884      	adds	r4, r0, r2
 80167ce:	1889      	adds	r1, r1, r2
 80167d0:	3c04      	subs	r4, #4
 80167d2:	3904      	subs	r1, #4
 80167d4:	6825      	ldr	r5, [r4, #0]
 80167d6:	680a      	ldr	r2, [r1, #0]
 80167d8:	4295      	cmp	r5, r2
 80167da:	d004      	beq.n	80167e6 <__mcmp+0x2a>
 80167dc:	2301      	movs	r3, #1
 80167de:	4295      	cmp	r5, r2
 80167e0:	d304      	bcc.n	80167ec <__mcmp+0x30>
 80167e2:	0018      	movs	r0, r3
 80167e4:	bd30      	pop	{r4, r5, pc}
 80167e6:	42a0      	cmp	r0, r4
 80167e8:	d3f2      	bcc.n	80167d0 <__mcmp+0x14>
 80167ea:	e7fa      	b.n	80167e2 <__mcmp+0x26>
 80167ec:	425b      	negs	r3, r3
 80167ee:	e7f8      	b.n	80167e2 <__mcmp+0x26>

080167f0 <__mdiff>:
 80167f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167f2:	000d      	movs	r5, r1
 80167f4:	b085      	sub	sp, #20
 80167f6:	0007      	movs	r7, r0
 80167f8:	0011      	movs	r1, r2
 80167fa:	0028      	movs	r0, r5
 80167fc:	0014      	movs	r4, r2
 80167fe:	f7ff ffdd 	bl	80167bc <__mcmp>
 8016802:	1e06      	subs	r6, r0, #0
 8016804:	d108      	bne.n	8016818 <__mdiff+0x28>
 8016806:	0001      	movs	r1, r0
 8016808:	0038      	movs	r0, r7
 801680a:	f7ff fdb3 	bl	8016374 <_Balloc>
 801680e:	2301      	movs	r3, #1
 8016810:	6146      	str	r6, [r0, #20]
 8016812:	6103      	str	r3, [r0, #16]
 8016814:	b005      	add	sp, #20
 8016816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016818:	2301      	movs	r3, #1
 801681a:	9301      	str	r3, [sp, #4]
 801681c:	2800      	cmp	r0, #0
 801681e:	db04      	blt.n	801682a <__mdiff+0x3a>
 8016820:	0023      	movs	r3, r4
 8016822:	002c      	movs	r4, r5
 8016824:	001d      	movs	r5, r3
 8016826:	2300      	movs	r3, #0
 8016828:	9301      	str	r3, [sp, #4]
 801682a:	6861      	ldr	r1, [r4, #4]
 801682c:	0038      	movs	r0, r7
 801682e:	f7ff fda1 	bl	8016374 <_Balloc>
 8016832:	002f      	movs	r7, r5
 8016834:	2200      	movs	r2, #0
 8016836:	9b01      	ldr	r3, [sp, #4]
 8016838:	6926      	ldr	r6, [r4, #16]
 801683a:	60c3      	str	r3, [r0, #12]
 801683c:	3414      	adds	r4, #20
 801683e:	00b3      	lsls	r3, r6, #2
 8016840:	18e3      	adds	r3, r4, r3
 8016842:	9302      	str	r3, [sp, #8]
 8016844:	692b      	ldr	r3, [r5, #16]
 8016846:	3714      	adds	r7, #20
 8016848:	009b      	lsls	r3, r3, #2
 801684a:	18fb      	adds	r3, r7, r3
 801684c:	9303      	str	r3, [sp, #12]
 801684e:	0003      	movs	r3, r0
 8016850:	4694      	mov	ip, r2
 8016852:	3314      	adds	r3, #20
 8016854:	cc20      	ldmia	r4!, {r5}
 8016856:	cf04      	ldmia	r7!, {r2}
 8016858:	9201      	str	r2, [sp, #4]
 801685a:	b2aa      	uxth	r2, r5
 801685c:	4494      	add	ip, r2
 801685e:	466a      	mov	r2, sp
 8016860:	4661      	mov	r1, ip
 8016862:	8892      	ldrh	r2, [r2, #4]
 8016864:	0c2d      	lsrs	r5, r5, #16
 8016866:	1a8a      	subs	r2, r1, r2
 8016868:	9901      	ldr	r1, [sp, #4]
 801686a:	0c09      	lsrs	r1, r1, #16
 801686c:	1a69      	subs	r1, r5, r1
 801686e:	1415      	asrs	r5, r2, #16
 8016870:	1949      	adds	r1, r1, r5
 8016872:	140d      	asrs	r5, r1, #16
 8016874:	b292      	uxth	r2, r2
 8016876:	0409      	lsls	r1, r1, #16
 8016878:	430a      	orrs	r2, r1
 801687a:	601a      	str	r2, [r3, #0]
 801687c:	9a03      	ldr	r2, [sp, #12]
 801687e:	46ac      	mov	ip, r5
 8016880:	3304      	adds	r3, #4
 8016882:	42ba      	cmp	r2, r7
 8016884:	d8e6      	bhi.n	8016854 <__mdiff+0x64>
 8016886:	9902      	ldr	r1, [sp, #8]
 8016888:	001a      	movs	r2, r3
 801688a:	428c      	cmp	r4, r1
 801688c:	d305      	bcc.n	801689a <__mdiff+0xaa>
 801688e:	3a04      	subs	r2, #4
 8016890:	6813      	ldr	r3, [r2, #0]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d00e      	beq.n	80168b4 <__mdiff+0xc4>
 8016896:	6106      	str	r6, [r0, #16]
 8016898:	e7bc      	b.n	8016814 <__mdiff+0x24>
 801689a:	cc04      	ldmia	r4!, {r2}
 801689c:	b291      	uxth	r1, r2
 801689e:	4461      	add	r1, ip
 80168a0:	140d      	asrs	r5, r1, #16
 80168a2:	0c12      	lsrs	r2, r2, #16
 80168a4:	1952      	adds	r2, r2, r5
 80168a6:	1415      	asrs	r5, r2, #16
 80168a8:	b289      	uxth	r1, r1
 80168aa:	0412      	lsls	r2, r2, #16
 80168ac:	430a      	orrs	r2, r1
 80168ae:	46ac      	mov	ip, r5
 80168b0:	c304      	stmia	r3!, {r2}
 80168b2:	e7e8      	b.n	8016886 <__mdiff+0x96>
 80168b4:	3e01      	subs	r6, #1
 80168b6:	e7ea      	b.n	801688e <__mdiff+0x9e>

080168b8 <__ulp>:
 80168b8:	000b      	movs	r3, r1
 80168ba:	4910      	ldr	r1, [pc, #64]	; (80168fc <__ulp+0x44>)
 80168bc:	b510      	push	{r4, lr}
 80168be:	4019      	ands	r1, r3
 80168c0:	4b0f      	ldr	r3, [pc, #60]	; (8016900 <__ulp+0x48>)
 80168c2:	18c9      	adds	r1, r1, r3
 80168c4:	2900      	cmp	r1, #0
 80168c6:	dd04      	ble.n	80168d2 <__ulp+0x1a>
 80168c8:	2200      	movs	r2, #0
 80168ca:	000b      	movs	r3, r1
 80168cc:	0010      	movs	r0, r2
 80168ce:	0019      	movs	r1, r3
 80168d0:	bd10      	pop	{r4, pc}
 80168d2:	4249      	negs	r1, r1
 80168d4:	1509      	asrs	r1, r1, #20
 80168d6:	2200      	movs	r2, #0
 80168d8:	2300      	movs	r3, #0
 80168da:	2913      	cmp	r1, #19
 80168dc:	dc04      	bgt.n	80168e8 <__ulp+0x30>
 80168de:	2080      	movs	r0, #128	; 0x80
 80168e0:	0300      	lsls	r0, r0, #12
 80168e2:	4108      	asrs	r0, r1
 80168e4:	0003      	movs	r3, r0
 80168e6:	e7f1      	b.n	80168cc <__ulp+0x14>
 80168e8:	3914      	subs	r1, #20
 80168ea:	2001      	movs	r0, #1
 80168ec:	291e      	cmp	r1, #30
 80168ee:	dc02      	bgt.n	80168f6 <__ulp+0x3e>
 80168f0:	241f      	movs	r4, #31
 80168f2:	1a61      	subs	r1, r4, r1
 80168f4:	4088      	lsls	r0, r1
 80168f6:	0002      	movs	r2, r0
 80168f8:	e7e8      	b.n	80168cc <__ulp+0x14>
 80168fa:	46c0      	nop			; (mov r8, r8)
 80168fc:	7ff00000 	.word	0x7ff00000
 8016900:	fcc00000 	.word	0xfcc00000

08016904 <__b2d>:
 8016904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016906:	0006      	movs	r6, r0
 8016908:	6903      	ldr	r3, [r0, #16]
 801690a:	3614      	adds	r6, #20
 801690c:	009b      	lsls	r3, r3, #2
 801690e:	18f3      	adds	r3, r6, r3
 8016910:	1f1d      	subs	r5, r3, #4
 8016912:	682c      	ldr	r4, [r5, #0]
 8016914:	000f      	movs	r7, r1
 8016916:	0020      	movs	r0, r4
 8016918:	9301      	str	r3, [sp, #4]
 801691a:	f7ff fdd9 	bl	80164d0 <__hi0bits>
 801691e:	2320      	movs	r3, #32
 8016920:	1a1b      	subs	r3, r3, r0
 8016922:	603b      	str	r3, [r7, #0]
 8016924:	491c      	ldr	r1, [pc, #112]	; (8016998 <__b2d+0x94>)
 8016926:	280a      	cmp	r0, #10
 8016928:	dc16      	bgt.n	8016958 <__b2d+0x54>
 801692a:	230b      	movs	r3, #11
 801692c:	0027      	movs	r7, r4
 801692e:	1a1b      	subs	r3, r3, r0
 8016930:	40df      	lsrs	r7, r3
 8016932:	4339      	orrs	r1, r7
 8016934:	469c      	mov	ip, r3
 8016936:	000b      	movs	r3, r1
 8016938:	2100      	movs	r1, #0
 801693a:	42ae      	cmp	r6, r5
 801693c:	d202      	bcs.n	8016944 <__b2d+0x40>
 801693e:	9901      	ldr	r1, [sp, #4]
 8016940:	3908      	subs	r1, #8
 8016942:	6809      	ldr	r1, [r1, #0]
 8016944:	3015      	adds	r0, #21
 8016946:	4084      	lsls	r4, r0
 8016948:	4660      	mov	r0, ip
 801694a:	40c1      	lsrs	r1, r0
 801694c:	430c      	orrs	r4, r1
 801694e:	0022      	movs	r2, r4
 8016950:	0010      	movs	r0, r2
 8016952:	0019      	movs	r1, r3
 8016954:	b003      	add	sp, #12
 8016956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016958:	2700      	movs	r7, #0
 801695a:	42ae      	cmp	r6, r5
 801695c:	d202      	bcs.n	8016964 <__b2d+0x60>
 801695e:	9d01      	ldr	r5, [sp, #4]
 8016960:	3d08      	subs	r5, #8
 8016962:	682f      	ldr	r7, [r5, #0]
 8016964:	380b      	subs	r0, #11
 8016966:	4684      	mov	ip, r0
 8016968:	1e03      	subs	r3, r0, #0
 801696a:	d012      	beq.n	8016992 <__b2d+0x8e>
 801696c:	409c      	lsls	r4, r3
 801696e:	2020      	movs	r0, #32
 8016970:	4321      	orrs	r1, r4
 8016972:	003c      	movs	r4, r7
 8016974:	1ac0      	subs	r0, r0, r3
 8016976:	40c4      	lsrs	r4, r0
 8016978:	4321      	orrs	r1, r4
 801697a:	000b      	movs	r3, r1
 801697c:	2100      	movs	r1, #0
 801697e:	42b5      	cmp	r5, r6
 8016980:	d901      	bls.n	8016986 <__b2d+0x82>
 8016982:	3d04      	subs	r5, #4
 8016984:	6829      	ldr	r1, [r5, #0]
 8016986:	4664      	mov	r4, ip
 8016988:	40c1      	lsrs	r1, r0
 801698a:	40a7      	lsls	r7, r4
 801698c:	430f      	orrs	r7, r1
 801698e:	003a      	movs	r2, r7
 8016990:	e7de      	b.n	8016950 <__b2d+0x4c>
 8016992:	4321      	orrs	r1, r4
 8016994:	000b      	movs	r3, r1
 8016996:	e7fa      	b.n	801698e <__b2d+0x8a>
 8016998:	3ff00000 	.word	0x3ff00000

0801699c <__d2b>:
 801699c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801699e:	001d      	movs	r5, r3
 80169a0:	2101      	movs	r1, #1
 80169a2:	0014      	movs	r4, r2
 80169a4:	9f08      	ldr	r7, [sp, #32]
 80169a6:	f7ff fce5 	bl	8016374 <_Balloc>
 80169aa:	032b      	lsls	r3, r5, #12
 80169ac:	006d      	lsls	r5, r5, #1
 80169ae:	0006      	movs	r6, r0
 80169b0:	0b1b      	lsrs	r3, r3, #12
 80169b2:	0d6d      	lsrs	r5, r5, #21
 80169b4:	d124      	bne.n	8016a00 <__d2b+0x64>
 80169b6:	9301      	str	r3, [sp, #4]
 80169b8:	2c00      	cmp	r4, #0
 80169ba:	d027      	beq.n	8016a0c <__d2b+0x70>
 80169bc:	4668      	mov	r0, sp
 80169be:	9400      	str	r4, [sp, #0]
 80169c0:	f7ff fda0 	bl	8016504 <__lo0bits>
 80169c4:	9c00      	ldr	r4, [sp, #0]
 80169c6:	2800      	cmp	r0, #0
 80169c8:	d01e      	beq.n	8016a08 <__d2b+0x6c>
 80169ca:	9b01      	ldr	r3, [sp, #4]
 80169cc:	2120      	movs	r1, #32
 80169ce:	001a      	movs	r2, r3
 80169d0:	1a09      	subs	r1, r1, r0
 80169d2:	408a      	lsls	r2, r1
 80169d4:	40c3      	lsrs	r3, r0
 80169d6:	4322      	orrs	r2, r4
 80169d8:	6172      	str	r2, [r6, #20]
 80169da:	9301      	str	r3, [sp, #4]
 80169dc:	9c01      	ldr	r4, [sp, #4]
 80169de:	61b4      	str	r4, [r6, #24]
 80169e0:	1e63      	subs	r3, r4, #1
 80169e2:	419c      	sbcs	r4, r3
 80169e4:	3401      	adds	r4, #1
 80169e6:	6134      	str	r4, [r6, #16]
 80169e8:	2d00      	cmp	r5, #0
 80169ea:	d018      	beq.n	8016a1e <__d2b+0x82>
 80169ec:	4b12      	ldr	r3, [pc, #72]	; (8016a38 <__d2b+0x9c>)
 80169ee:	18ed      	adds	r5, r5, r3
 80169f0:	2335      	movs	r3, #53	; 0x35
 80169f2:	182d      	adds	r5, r5, r0
 80169f4:	603d      	str	r5, [r7, #0]
 80169f6:	1a18      	subs	r0, r3, r0
 80169f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169fa:	6018      	str	r0, [r3, #0]
 80169fc:	0030      	movs	r0, r6
 80169fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016a00:	2280      	movs	r2, #128	; 0x80
 8016a02:	0352      	lsls	r2, r2, #13
 8016a04:	4313      	orrs	r3, r2
 8016a06:	e7d6      	b.n	80169b6 <__d2b+0x1a>
 8016a08:	6174      	str	r4, [r6, #20]
 8016a0a:	e7e7      	b.n	80169dc <__d2b+0x40>
 8016a0c:	a801      	add	r0, sp, #4
 8016a0e:	f7ff fd79 	bl	8016504 <__lo0bits>
 8016a12:	2401      	movs	r4, #1
 8016a14:	9b01      	ldr	r3, [sp, #4]
 8016a16:	6134      	str	r4, [r6, #16]
 8016a18:	6173      	str	r3, [r6, #20]
 8016a1a:	3020      	adds	r0, #32
 8016a1c:	e7e4      	b.n	80169e8 <__d2b+0x4c>
 8016a1e:	4b07      	ldr	r3, [pc, #28]	; (8016a3c <__d2b+0xa0>)
 8016a20:	18c0      	adds	r0, r0, r3
 8016a22:	4b07      	ldr	r3, [pc, #28]	; (8016a40 <__d2b+0xa4>)
 8016a24:	6038      	str	r0, [r7, #0]
 8016a26:	18e3      	adds	r3, r4, r3
 8016a28:	009b      	lsls	r3, r3, #2
 8016a2a:	18f3      	adds	r3, r6, r3
 8016a2c:	6958      	ldr	r0, [r3, #20]
 8016a2e:	f7ff fd4f 	bl	80164d0 <__hi0bits>
 8016a32:	0164      	lsls	r4, r4, #5
 8016a34:	1a20      	subs	r0, r4, r0
 8016a36:	e7df      	b.n	80169f8 <__d2b+0x5c>
 8016a38:	fffffbcd 	.word	0xfffffbcd
 8016a3c:	fffffbce 	.word	0xfffffbce
 8016a40:	3fffffff 	.word	0x3fffffff

08016a44 <__ratio>:
 8016a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a46:	b085      	sub	sp, #20
 8016a48:	000f      	movs	r7, r1
 8016a4a:	a902      	add	r1, sp, #8
 8016a4c:	0006      	movs	r6, r0
 8016a4e:	f7ff ff59 	bl	8016904 <__b2d>
 8016a52:	0004      	movs	r4, r0
 8016a54:	000d      	movs	r5, r1
 8016a56:	0038      	movs	r0, r7
 8016a58:	a903      	add	r1, sp, #12
 8016a5a:	9400      	str	r4, [sp, #0]
 8016a5c:	9501      	str	r5, [sp, #4]
 8016a5e:	f7ff ff51 	bl	8016904 <__b2d>
 8016a62:	6936      	ldr	r6, [r6, #16]
 8016a64:	693f      	ldr	r7, [r7, #16]
 8016a66:	0002      	movs	r2, r0
 8016a68:	1bf7      	subs	r7, r6, r7
 8016a6a:	017e      	lsls	r6, r7, #5
 8016a6c:	46b4      	mov	ip, r6
 8016a6e:	9f03      	ldr	r7, [sp, #12]
 8016a70:	9e02      	ldr	r6, [sp, #8]
 8016a72:	000b      	movs	r3, r1
 8016a74:	1bf6      	subs	r6, r6, r7
 8016a76:	4466      	add	r6, ip
 8016a78:	0537      	lsls	r7, r6, #20
 8016a7a:	2e00      	cmp	r6, #0
 8016a7c:	dd07      	ble.n	8016a8e <__ratio+0x4a>
 8016a7e:	1979      	adds	r1, r7, r5
 8016a80:	9101      	str	r1, [sp, #4]
 8016a82:	9800      	ldr	r0, [sp, #0]
 8016a84:	9901      	ldr	r1, [sp, #4]
 8016a86:	f7ea fdcb 	bl	8001620 <__aeabi_ddiv>
 8016a8a:	b005      	add	sp, #20
 8016a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a8e:	1bcb      	subs	r3, r1, r7
 8016a90:	e7f7      	b.n	8016a82 <__ratio+0x3e>

08016a92 <__copybits>:
 8016a92:	0013      	movs	r3, r2
 8016a94:	3901      	subs	r1, #1
 8016a96:	b510      	push	{r4, lr}
 8016a98:	1149      	asrs	r1, r1, #5
 8016a9a:	6912      	ldr	r2, [r2, #16]
 8016a9c:	3101      	adds	r1, #1
 8016a9e:	0089      	lsls	r1, r1, #2
 8016aa0:	3314      	adds	r3, #20
 8016aa2:	0092      	lsls	r2, r2, #2
 8016aa4:	1841      	adds	r1, r0, r1
 8016aa6:	189a      	adds	r2, r3, r2
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	d803      	bhi.n	8016ab4 <__copybits+0x22>
 8016aac:	2300      	movs	r3, #0
 8016aae:	4281      	cmp	r1, r0
 8016ab0:	d803      	bhi.n	8016aba <__copybits+0x28>
 8016ab2:	bd10      	pop	{r4, pc}
 8016ab4:	cb10      	ldmia	r3!, {r4}
 8016ab6:	c010      	stmia	r0!, {r4}
 8016ab8:	e7f6      	b.n	8016aa8 <__copybits+0x16>
 8016aba:	c008      	stmia	r0!, {r3}
 8016abc:	e7f7      	b.n	8016aae <__copybits+0x1c>

08016abe <__any_on>:
 8016abe:	0002      	movs	r2, r0
 8016ac0:	6900      	ldr	r0, [r0, #16]
 8016ac2:	b510      	push	{r4, lr}
 8016ac4:	3214      	adds	r2, #20
 8016ac6:	114b      	asrs	r3, r1, #5
 8016ac8:	4298      	cmp	r0, r3
 8016aca:	db12      	blt.n	8016af2 <__any_on+0x34>
 8016acc:	dd0b      	ble.n	8016ae6 <__any_on+0x28>
 8016ace:	201f      	movs	r0, #31
 8016ad0:	4001      	ands	r1, r0
 8016ad2:	d008      	beq.n	8016ae6 <__any_on+0x28>
 8016ad4:	0098      	lsls	r0, r3, #2
 8016ad6:	5884      	ldr	r4, [r0, r2]
 8016ad8:	0020      	movs	r0, r4
 8016ada:	40c8      	lsrs	r0, r1
 8016adc:	4088      	lsls	r0, r1
 8016ade:	0001      	movs	r1, r0
 8016ae0:	2001      	movs	r0, #1
 8016ae2:	428c      	cmp	r4, r1
 8016ae4:	d104      	bne.n	8016af0 <__any_on+0x32>
 8016ae6:	009b      	lsls	r3, r3, #2
 8016ae8:	18d3      	adds	r3, r2, r3
 8016aea:	4293      	cmp	r3, r2
 8016aec:	d803      	bhi.n	8016af6 <__any_on+0x38>
 8016aee:	2000      	movs	r0, #0
 8016af0:	bd10      	pop	{r4, pc}
 8016af2:	0003      	movs	r3, r0
 8016af4:	e7f7      	b.n	8016ae6 <__any_on+0x28>
 8016af6:	3b04      	subs	r3, #4
 8016af8:	6819      	ldr	r1, [r3, #0]
 8016afa:	2900      	cmp	r1, #0
 8016afc:	d0f5      	beq.n	8016aea <__any_on+0x2c>
 8016afe:	2001      	movs	r0, #1
 8016b00:	e7f6      	b.n	8016af0 <__any_on+0x32>
	...

08016b04 <frexp>:
 8016b04:	b570      	push	{r4, r5, r6, lr}
 8016b06:	0014      	movs	r4, r2
 8016b08:	2500      	movs	r5, #0
 8016b0a:	6025      	str	r5, [r4, #0]
 8016b0c:	4d10      	ldr	r5, [pc, #64]	; (8016b50 <frexp+0x4c>)
 8016b0e:	004b      	lsls	r3, r1, #1
 8016b10:	000a      	movs	r2, r1
 8016b12:	085b      	lsrs	r3, r3, #1
 8016b14:	42ab      	cmp	r3, r5
 8016b16:	dc1a      	bgt.n	8016b4e <frexp+0x4a>
 8016b18:	001d      	movs	r5, r3
 8016b1a:	4305      	orrs	r5, r0
 8016b1c:	d017      	beq.n	8016b4e <frexp+0x4a>
 8016b1e:	4d0d      	ldr	r5, [pc, #52]	; (8016b54 <frexp+0x50>)
 8016b20:	42ab      	cmp	r3, r5
 8016b22:	dc09      	bgt.n	8016b38 <frexp+0x34>
 8016b24:	2200      	movs	r2, #0
 8016b26:	4b0c      	ldr	r3, [pc, #48]	; (8016b58 <frexp+0x54>)
 8016b28:	f7eb f984 	bl	8001e34 <__aeabi_dmul>
 8016b2c:	2536      	movs	r5, #54	; 0x36
 8016b2e:	000a      	movs	r2, r1
 8016b30:	004b      	lsls	r3, r1, #1
 8016b32:	426d      	negs	r5, r5
 8016b34:	085b      	lsrs	r3, r3, #1
 8016b36:	6025      	str	r5, [r4, #0]
 8016b38:	4d08      	ldr	r5, [pc, #32]	; (8016b5c <frexp+0x58>)
 8016b3a:	151b      	asrs	r3, r3, #20
 8016b3c:	195b      	adds	r3, r3, r5
 8016b3e:	6825      	ldr	r5, [r4, #0]
 8016b40:	18eb      	adds	r3, r5, r3
 8016b42:	6023      	str	r3, [r4, #0]
 8016b44:	4b06      	ldr	r3, [pc, #24]	; (8016b60 <frexp+0x5c>)
 8016b46:	401a      	ands	r2, r3
 8016b48:	4b06      	ldr	r3, [pc, #24]	; (8016b64 <frexp+0x60>)
 8016b4a:	4313      	orrs	r3, r2
 8016b4c:	0019      	movs	r1, r3
 8016b4e:	bd70      	pop	{r4, r5, r6, pc}
 8016b50:	7fefffff 	.word	0x7fefffff
 8016b54:	000fffff 	.word	0x000fffff
 8016b58:	43500000 	.word	0x43500000
 8016b5c:	fffffc02 	.word	0xfffffc02
 8016b60:	800fffff 	.word	0x800fffff
 8016b64:	3fe00000 	.word	0x3fe00000

08016b68 <__ssprint_r>:
 8016b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b6a:	6893      	ldr	r3, [r2, #8]
 8016b6c:	b087      	sub	sp, #28
 8016b6e:	9002      	str	r0, [sp, #8]
 8016b70:	000c      	movs	r4, r1
 8016b72:	0016      	movs	r6, r2
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d063      	beq.n	8016c40 <__ssprint_r+0xd8>
 8016b78:	6813      	ldr	r3, [r2, #0]
 8016b7a:	9303      	str	r3, [sp, #12]
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	001f      	movs	r7, r3
 8016b80:	9305      	str	r3, [sp, #20]
 8016b82:	2f00      	cmp	r7, #0
 8016b84:	d02e      	beq.n	8016be4 <__ssprint_r+0x7c>
 8016b86:	68a5      	ldr	r5, [r4, #8]
 8016b88:	42af      	cmp	r7, r5
 8016b8a:	d347      	bcc.n	8016c1c <__ssprint_r+0xb4>
 8016b8c:	2390      	movs	r3, #144	; 0x90
 8016b8e:	89a2      	ldrh	r2, [r4, #12]
 8016b90:	00db      	lsls	r3, r3, #3
 8016b92:	421a      	tst	r2, r3
 8016b94:	d042      	beq.n	8016c1c <__ssprint_r+0xb4>
 8016b96:	2003      	movs	r0, #3
 8016b98:	6921      	ldr	r1, [r4, #16]
 8016b9a:	6823      	ldr	r3, [r4, #0]
 8016b9c:	1a5b      	subs	r3, r3, r1
 8016b9e:	9304      	str	r3, [sp, #16]
 8016ba0:	6963      	ldr	r3, [r4, #20]
 8016ba2:	4343      	muls	r3, r0
 8016ba4:	0fd8      	lsrs	r0, r3, #31
 8016ba6:	18c3      	adds	r3, r0, r3
 8016ba8:	105b      	asrs	r3, r3, #1
 8016baa:	9301      	str	r3, [sp, #4]
 8016bac:	9b04      	ldr	r3, [sp, #16]
 8016bae:	9801      	ldr	r0, [sp, #4]
 8016bb0:	3301      	adds	r3, #1
 8016bb2:	19db      	adds	r3, r3, r7
 8016bb4:	4283      	cmp	r3, r0
 8016bb6:	d900      	bls.n	8016bba <__ssprint_r+0x52>
 8016bb8:	9301      	str	r3, [sp, #4]
 8016bba:	0553      	lsls	r3, r2, #21
 8016bbc:	d544      	bpl.n	8016c48 <__ssprint_r+0xe0>
 8016bbe:	9901      	ldr	r1, [sp, #4]
 8016bc0:	9802      	ldr	r0, [sp, #8]
 8016bc2:	f7fb fab7 	bl	8012134 <_malloc_r>
 8016bc6:	1e05      	subs	r5, r0, #0
 8016bc8:	d114      	bne.n	8016bf4 <__ssprint_r+0x8c>
 8016bca:	230c      	movs	r3, #12
 8016bcc:	9a02      	ldr	r2, [sp, #8]
 8016bce:	2001      	movs	r0, #1
 8016bd0:	6013      	str	r3, [r2, #0]
 8016bd2:	2340      	movs	r3, #64	; 0x40
 8016bd4:	89a2      	ldrh	r2, [r4, #12]
 8016bd6:	4240      	negs	r0, r0
 8016bd8:	4313      	orrs	r3, r2
 8016bda:	81a3      	strh	r3, [r4, #12]
 8016bdc:	2300      	movs	r3, #0
 8016bde:	60b3      	str	r3, [r6, #8]
 8016be0:	6073      	str	r3, [r6, #4]
 8016be2:	e02f      	b.n	8016c44 <__ssprint_r+0xdc>
 8016be4:	9b03      	ldr	r3, [sp, #12]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	9305      	str	r3, [sp, #20]
 8016bea:	9b03      	ldr	r3, [sp, #12]
 8016bec:	685f      	ldr	r7, [r3, #4]
 8016bee:	3308      	adds	r3, #8
 8016bf0:	9303      	str	r3, [sp, #12]
 8016bf2:	e7c6      	b.n	8016b82 <__ssprint_r+0x1a>
 8016bf4:	9a04      	ldr	r2, [sp, #16]
 8016bf6:	6921      	ldr	r1, [r4, #16]
 8016bf8:	f7fb fcd5 	bl	80125a6 <memcpy>
 8016bfc:	89a3      	ldrh	r3, [r4, #12]
 8016bfe:	4a18      	ldr	r2, [pc, #96]	; (8016c60 <__ssprint_r+0xf8>)
 8016c00:	401a      	ands	r2, r3
 8016c02:	2380      	movs	r3, #128	; 0x80
 8016c04:	4313      	orrs	r3, r2
 8016c06:	81a3      	strh	r3, [r4, #12]
 8016c08:	9b04      	ldr	r3, [sp, #16]
 8016c0a:	6125      	str	r5, [r4, #16]
 8016c0c:	18ed      	adds	r5, r5, r3
 8016c0e:	6025      	str	r5, [r4, #0]
 8016c10:	003d      	movs	r5, r7
 8016c12:	9b01      	ldr	r3, [sp, #4]
 8016c14:	9a04      	ldr	r2, [sp, #16]
 8016c16:	6163      	str	r3, [r4, #20]
 8016c18:	1a9b      	subs	r3, r3, r2
 8016c1a:	60a3      	str	r3, [r4, #8]
 8016c1c:	42bd      	cmp	r5, r7
 8016c1e:	d900      	bls.n	8016c22 <__ssprint_r+0xba>
 8016c20:	003d      	movs	r5, r7
 8016c22:	002a      	movs	r2, r5
 8016c24:	9905      	ldr	r1, [sp, #20]
 8016c26:	6820      	ldr	r0, [r4, #0]
 8016c28:	f7ff fb91 	bl	801634e <memmove>
 8016c2c:	68a3      	ldr	r3, [r4, #8]
 8016c2e:	1b5b      	subs	r3, r3, r5
 8016c30:	60a3      	str	r3, [r4, #8]
 8016c32:	6823      	ldr	r3, [r4, #0]
 8016c34:	195d      	adds	r5, r3, r5
 8016c36:	68b3      	ldr	r3, [r6, #8]
 8016c38:	6025      	str	r5, [r4, #0]
 8016c3a:	1bdb      	subs	r3, r3, r7
 8016c3c:	60b3      	str	r3, [r6, #8]
 8016c3e:	d1d1      	bne.n	8016be4 <__ssprint_r+0x7c>
 8016c40:	2000      	movs	r0, #0
 8016c42:	6070      	str	r0, [r6, #4]
 8016c44:	b007      	add	sp, #28
 8016c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c48:	9a01      	ldr	r2, [sp, #4]
 8016c4a:	9802      	ldr	r0, [sp, #8]
 8016c4c:	f7fb fcf0 	bl	8012630 <_realloc_r>
 8016c50:	1e05      	subs	r5, r0, #0
 8016c52:	d1d9      	bne.n	8016c08 <__ssprint_r+0xa0>
 8016c54:	6921      	ldr	r1, [r4, #16]
 8016c56:	9802      	ldr	r0, [sp, #8]
 8016c58:	f7fe ff78 	bl	8015b4c <_free_r>
 8016c5c:	e7b5      	b.n	8016bca <__ssprint_r+0x62>
 8016c5e:	46c0      	nop			; (mov r8, r8)
 8016c60:	fffffb7f 	.word	0xfffffb7f

08016c64 <__register_exitproc>:
 8016c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c66:	4d29      	ldr	r5, [pc, #164]	; (8016d0c <__register_exitproc+0xa8>)
 8016c68:	0006      	movs	r6, r0
 8016c6a:	6828      	ldr	r0, [r5, #0]
 8016c6c:	9301      	str	r3, [sp, #4]
 8016c6e:	9100      	str	r1, [sp, #0]
 8016c70:	0017      	movs	r7, r2
 8016c72:	f7ff fb5f 	bl	8016334 <__retarget_lock_acquire_recursive>
 8016c76:	4b26      	ldr	r3, [pc, #152]	; (8016d10 <__register_exitproc+0xac>)
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	001c      	movs	r4, r3
 8016c7c:	34fc      	adds	r4, #252	; 0xfc
 8016c7e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8016c80:	2800      	cmp	r0, #0
 8016c82:	d103      	bne.n	8016c8c <__register_exitproc+0x28>
 8016c84:	334d      	adds	r3, #77	; 0x4d
 8016c86:	33ff      	adds	r3, #255	; 0xff
 8016c88:	0018      	movs	r0, r3
 8016c8a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016c8c:	6843      	ldr	r3, [r0, #4]
 8016c8e:	2b1f      	cmp	r3, #31
 8016c90:	dd18      	ble.n	8016cc4 <__register_exitproc+0x60>
 8016c92:	4b20      	ldr	r3, [pc, #128]	; (8016d14 <__register_exitproc+0xb0>)
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d105      	bne.n	8016ca4 <__register_exitproc+0x40>
 8016c98:	6828      	ldr	r0, [r5, #0]
 8016c9a:	f7ff fb4c 	bl	8016336 <__retarget_lock_release_recursive>
 8016c9e:	2001      	movs	r0, #1
 8016ca0:	4240      	negs	r0, r0
 8016ca2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016ca4:	20c8      	movs	r0, #200	; 0xc8
 8016ca6:	0040      	lsls	r0, r0, #1
 8016ca8:	f7fb fa30 	bl	801210c <malloc>
 8016cac:	2800      	cmp	r0, #0
 8016cae:	d0f3      	beq.n	8016c98 <__register_exitproc+0x34>
 8016cb0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	6002      	str	r2, [r0, #0]
 8016cb6:	22c4      	movs	r2, #196	; 0xc4
 8016cb8:	0052      	lsls	r2, r2, #1
 8016cba:	6043      	str	r3, [r0, #4]
 8016cbc:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016cbe:	5083      	str	r3, [r0, r2]
 8016cc0:	3204      	adds	r2, #4
 8016cc2:	5083      	str	r3, [r0, r2]
 8016cc4:	6843      	ldr	r3, [r0, #4]
 8016cc6:	2e00      	cmp	r6, #0
 8016cc8:	d014      	beq.n	8016cf4 <__register_exitproc+0x90>
 8016cca:	009a      	lsls	r2, r3, #2
 8016ccc:	1882      	adds	r2, r0, r2
 8016cce:	0011      	movs	r1, r2
 8016cd0:	3188      	adds	r1, #136	; 0x88
 8016cd2:	600f      	str	r7, [r1, #0]
 8016cd4:	2101      	movs	r1, #1
 8016cd6:	0004      	movs	r4, r0
 8016cd8:	4099      	lsls	r1, r3
 8016cda:	3485      	adds	r4, #133	; 0x85
 8016cdc:	34ff      	adds	r4, #255	; 0xff
 8016cde:	6865      	ldr	r5, [r4, #4]
 8016ce0:	32fc      	adds	r2, #252	; 0xfc
 8016ce2:	430d      	orrs	r5, r1
 8016ce4:	6065      	str	r5, [r4, #4]
 8016ce6:	9d01      	ldr	r5, [sp, #4]
 8016ce8:	60d5      	str	r5, [r2, #12]
 8016cea:	2e02      	cmp	r6, #2
 8016cec:	d102      	bne.n	8016cf4 <__register_exitproc+0x90>
 8016cee:	68a2      	ldr	r2, [r4, #8]
 8016cf0:	4311      	orrs	r1, r2
 8016cf2:	60a1      	str	r1, [r4, #8]
 8016cf4:	1c5a      	adds	r2, r3, #1
 8016cf6:	6042      	str	r2, [r0, #4]
 8016cf8:	3302      	adds	r3, #2
 8016cfa:	9a00      	ldr	r2, [sp, #0]
 8016cfc:	009b      	lsls	r3, r3, #2
 8016cfe:	501a      	str	r2, [r3, r0]
 8016d00:	4b02      	ldr	r3, [pc, #8]	; (8016d0c <__register_exitproc+0xa8>)
 8016d02:	6818      	ldr	r0, [r3, #0]
 8016d04:	f7ff fb17 	bl	8016336 <__retarget_lock_release_recursive>
 8016d08:	2000      	movs	r0, #0
 8016d0a:	e7ca      	b.n	8016ca2 <__register_exitproc+0x3e>
 8016d0c:	20000a84 	.word	0x20000a84
 8016d10:	08019e74 	.word	0x08019e74
 8016d14:	0801210d 	.word	0x0801210d

08016d18 <_sbrk>:
 8016d18:	4b05      	ldr	r3, [pc, #20]	; (8016d30 <_sbrk+0x18>)
 8016d1a:	0002      	movs	r2, r0
 8016d1c:	6819      	ldr	r1, [r3, #0]
 8016d1e:	2900      	cmp	r1, #0
 8016d20:	d101      	bne.n	8016d26 <_sbrk+0xe>
 8016d22:	4904      	ldr	r1, [pc, #16]	; (8016d34 <_sbrk+0x1c>)
 8016d24:	6019      	str	r1, [r3, #0]
 8016d26:	6818      	ldr	r0, [r3, #0]
 8016d28:	1882      	adds	r2, r0, r2
 8016d2a:	601a      	str	r2, [r3, #0]
 8016d2c:	4770      	bx	lr
 8016d2e:	46c0      	nop			; (mov r8, r8)
 8016d30:	200067ec 	.word	0x200067ec
 8016d34:	20006dd8 	.word	0x20006dd8

08016d38 <_init>:
 8016d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d3a:	46c0      	nop			; (mov r8, r8)
 8016d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d3e:	bc08      	pop	{r3}
 8016d40:	469e      	mov	lr, r3
 8016d42:	4770      	bx	lr

08016d44 <_fini>:
 8016d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d46:	46c0      	nop			; (mov r8, r8)
 8016d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d4a:	bc08      	pop	{r3}
 8016d4c:	469e      	mov	lr, r3
 8016d4e:	4770      	bx	lr
