
H0FRxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000191f4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a24  080192b0  080192b0  000292b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ccd4  0801ccd4  00030a68  2**0
                  CONTENTS
  4 .ARM          00000008  0801ccd4  0801ccd4  0002ccd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ccdc  0801ccdc  00030a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801ccdc  0801ccdc  0002ccdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cce4  0801cce4  0002cce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a68  20000000  0801cce8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000066a8  20000a68  0801d750  00030a68  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007110  0801d750  00037110  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a68  2**0
                  CONTENTS, READONLY
 12 .debug_info   00057fe4  00000000  00000000  00030a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008eb5  00000000  00000000  00088a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001aa1b  00000000  00000000  00091929  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001d50  00000000  00000000  000ac348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002098  00000000  00000000  000ae098  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001732b  00000000  00000000  000b0130  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000aadb  00000000  00000000  000c745b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1f36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063fc  00000000  00000000  000d1fb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a68 	.word	0x20000a68
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08019298 	.word	0x08019298

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a6c 	.word	0x20000a6c
 8000100:	08019298 	.word	0x08019298

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fdbf 	bl	8001fd0 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fd17 	bl	8001e90 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fdb1 	bl	8001fd0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fda7 	bl	8001fd0 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd39 	bl	8001f08 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fd2f 	bl	8001f08 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fb21 	bl	8000b08 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 faa3 	bl	8000a1c <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb13 	bl	8000b08 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb09 	bl	8000b08 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fab1 	bl	8000a6c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 faa7 	bl	8000a6c <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f88a 	bl	8000674 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fddf 	bl	8001194 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fc15 	bl	8000e0c <__aeabi_fsub>
 80005e2:	f000 fdd7 	bl	8001194 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 fb21 	bl	8002c4c <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 ffb6 	bl	8002584 <__aeabi_dsub>
 8000618:	f002 fb18 	bl	8002c4c <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__aeabi_ul2f>:
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <__aeabi_ul2f+0x40>)
 800062e:	b5d0      	push	{r4, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	4299      	cmp	r1, r3
 8000634:	d906      	bls.n	8000644 <__aeabi_ul2f+0x18>
 8000636:	0543      	lsls	r3, r0, #21
 8000638:	d004      	beq.n	8000644 <__aeabi_ul2f+0x18>
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	0ac4      	lsrs	r4, r0, #11
 800063e:	02e4      	lsls	r4, r4, #11
 8000640:	011b      	lsls	r3, r3, #4
 8000642:	431c      	orrs	r4, r3
 8000644:	0008      	movs	r0, r1
 8000646:	f002 fb71 	bl	8002d2c <__aeabi_ui2d>
 800064a:	2200      	movs	r2, #0
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <__aeabi_ul2f+0x44>)
 800064e:	f001 fd27 	bl	80020a0 <__aeabi_dmul>
 8000652:	0006      	movs	r6, r0
 8000654:	000f      	movs	r7, r1
 8000656:	0020      	movs	r0, r4
 8000658:	f002 fb68 	bl	8002d2c <__aeabi_ui2d>
 800065c:	0032      	movs	r2, r6
 800065e:	003b      	movs	r3, r7
 8000660:	f000 fdf8 	bl	8001254 <__aeabi_dadd>
 8000664:	f002 fbe6 	bl	8002e34 <__aeabi_d2f>
 8000668:	bdd0      	pop	{r4, r6, r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	001fffff 	.word	0x001fffff
 8000670:	41f00000 	.word	0x41f00000

08000674 <__udivmoddi4>:
 8000674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000676:	464f      	mov	r7, r9
 8000678:	4646      	mov	r6, r8
 800067a:	46d6      	mov	lr, sl
 800067c:	b5c0      	push	{r6, r7, lr}
 800067e:	0004      	movs	r4, r0
 8000680:	b082      	sub	sp, #8
 8000682:	000d      	movs	r5, r1
 8000684:	4691      	mov	r9, r2
 8000686:	4698      	mov	r8, r3
 8000688:	428b      	cmp	r3, r1
 800068a:	d82f      	bhi.n	80006ec <__udivmoddi4+0x78>
 800068c:	d02c      	beq.n	80006e8 <__udivmoddi4+0x74>
 800068e:	4641      	mov	r1, r8
 8000690:	4648      	mov	r0, r9
 8000692:	f002 fc71 	bl	8002f78 <__clzdi2>
 8000696:	0029      	movs	r1, r5
 8000698:	0006      	movs	r6, r0
 800069a:	0020      	movs	r0, r4
 800069c:	f002 fc6c 	bl	8002f78 <__clzdi2>
 80006a0:	1a33      	subs	r3, r6, r0
 80006a2:	469c      	mov	ip, r3
 80006a4:	3b20      	subs	r3, #32
 80006a6:	469a      	mov	sl, r3
 80006a8:	d500      	bpl.n	80006ac <__udivmoddi4+0x38>
 80006aa:	e076      	b.n	800079a <__udivmoddi4+0x126>
 80006ac:	464b      	mov	r3, r9
 80006ae:	4652      	mov	r2, sl
 80006b0:	4093      	lsls	r3, r2
 80006b2:	001f      	movs	r7, r3
 80006b4:	464b      	mov	r3, r9
 80006b6:	4662      	mov	r2, ip
 80006b8:	4093      	lsls	r3, r2
 80006ba:	001e      	movs	r6, r3
 80006bc:	42af      	cmp	r7, r5
 80006be:	d828      	bhi.n	8000712 <__udivmoddi4+0x9e>
 80006c0:	d025      	beq.n	800070e <__udivmoddi4+0x9a>
 80006c2:	4653      	mov	r3, sl
 80006c4:	1ba4      	subs	r4, r4, r6
 80006c6:	41bd      	sbcs	r5, r7
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	da00      	bge.n	80006ce <__udivmoddi4+0x5a>
 80006cc:	e07b      	b.n	80007c6 <__udivmoddi4+0x152>
 80006ce:	2200      	movs	r2, #0
 80006d0:	2300      	movs	r3, #0
 80006d2:	9200      	str	r2, [sp, #0]
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	2301      	movs	r3, #1
 80006d8:	4652      	mov	r2, sl
 80006da:	4093      	lsls	r3, r2
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2301      	movs	r3, #1
 80006e0:	4662      	mov	r2, ip
 80006e2:	4093      	lsls	r3, r2
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	e018      	b.n	800071a <__udivmoddi4+0xa6>
 80006e8:	4282      	cmp	r2, r0
 80006ea:	d9d0      	bls.n	800068e <__udivmoddi4+0x1a>
 80006ec:	2200      	movs	r2, #0
 80006ee:	2300      	movs	r3, #0
 80006f0:	9200      	str	r2, [sp, #0]
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <__udivmoddi4+0x8a>
 80006fa:	601c      	str	r4, [r3, #0]
 80006fc:	605d      	str	r5, [r3, #4]
 80006fe:	9800      	ldr	r0, [sp, #0]
 8000700:	9901      	ldr	r1, [sp, #4]
 8000702:	b002      	add	sp, #8
 8000704:	bc1c      	pop	{r2, r3, r4}
 8000706:	4690      	mov	r8, r2
 8000708:	4699      	mov	r9, r3
 800070a:	46a2      	mov	sl, r4
 800070c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800070e:	42a3      	cmp	r3, r4
 8000710:	d9d7      	bls.n	80006c2 <__udivmoddi4+0x4e>
 8000712:	2200      	movs	r2, #0
 8000714:	2300      	movs	r3, #0
 8000716:	9200      	str	r2, [sp, #0]
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	4663      	mov	r3, ip
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0e9      	beq.n	80006f4 <__udivmoddi4+0x80>
 8000720:	07fb      	lsls	r3, r7, #31
 8000722:	4698      	mov	r8, r3
 8000724:	4641      	mov	r1, r8
 8000726:	0872      	lsrs	r2, r6, #1
 8000728:	430a      	orrs	r2, r1
 800072a:	087b      	lsrs	r3, r7, #1
 800072c:	4666      	mov	r6, ip
 800072e:	e00e      	b.n	800074e <__udivmoddi4+0xda>
 8000730:	42ab      	cmp	r3, r5
 8000732:	d101      	bne.n	8000738 <__udivmoddi4+0xc4>
 8000734:	42a2      	cmp	r2, r4
 8000736:	d80c      	bhi.n	8000752 <__udivmoddi4+0xde>
 8000738:	1aa4      	subs	r4, r4, r2
 800073a:	419d      	sbcs	r5, r3
 800073c:	2001      	movs	r0, #1
 800073e:	1924      	adds	r4, r4, r4
 8000740:	416d      	adcs	r5, r5
 8000742:	2100      	movs	r1, #0
 8000744:	3e01      	subs	r6, #1
 8000746:	1824      	adds	r4, r4, r0
 8000748:	414d      	adcs	r5, r1
 800074a:	2e00      	cmp	r6, #0
 800074c:	d006      	beq.n	800075c <__udivmoddi4+0xe8>
 800074e:	42ab      	cmp	r3, r5
 8000750:	d9ee      	bls.n	8000730 <__udivmoddi4+0xbc>
 8000752:	3e01      	subs	r6, #1
 8000754:	1924      	adds	r4, r4, r4
 8000756:	416d      	adcs	r5, r5
 8000758:	2e00      	cmp	r6, #0
 800075a:	d1f8      	bne.n	800074e <__udivmoddi4+0xda>
 800075c:	9800      	ldr	r0, [sp, #0]
 800075e:	9901      	ldr	r1, [sp, #4]
 8000760:	4653      	mov	r3, sl
 8000762:	1900      	adds	r0, r0, r4
 8000764:	4169      	adcs	r1, r5
 8000766:	2b00      	cmp	r3, #0
 8000768:	db23      	blt.n	80007b2 <__udivmoddi4+0x13e>
 800076a:	002b      	movs	r3, r5
 800076c:	4652      	mov	r2, sl
 800076e:	40d3      	lsrs	r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4664      	mov	r4, ip
 8000774:	40e2      	lsrs	r2, r4
 8000776:	001c      	movs	r4, r3
 8000778:	4653      	mov	r3, sl
 800077a:	0015      	movs	r5, r2
 800077c:	2b00      	cmp	r3, #0
 800077e:	db2d      	blt.n	80007dc <__udivmoddi4+0x168>
 8000780:	0026      	movs	r6, r4
 8000782:	4657      	mov	r7, sl
 8000784:	40be      	lsls	r6, r7
 8000786:	0033      	movs	r3, r6
 8000788:	0026      	movs	r6, r4
 800078a:	4667      	mov	r7, ip
 800078c:	40be      	lsls	r6, r7
 800078e:	0032      	movs	r2, r6
 8000790:	1a80      	subs	r0, r0, r2
 8000792:	4199      	sbcs	r1, r3
 8000794:	9000      	str	r0, [sp, #0]
 8000796:	9101      	str	r1, [sp, #4]
 8000798:	e7ac      	b.n	80006f4 <__udivmoddi4+0x80>
 800079a:	4662      	mov	r2, ip
 800079c:	2320      	movs	r3, #32
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	464a      	mov	r2, r9
 80007a2:	40da      	lsrs	r2, r3
 80007a4:	4661      	mov	r1, ip
 80007a6:	0013      	movs	r3, r2
 80007a8:	4642      	mov	r2, r8
 80007aa:	408a      	lsls	r2, r1
 80007ac:	0017      	movs	r7, r2
 80007ae:	431f      	orrs	r7, r3
 80007b0:	e780      	b.n	80006b4 <__udivmoddi4+0x40>
 80007b2:	4662      	mov	r2, ip
 80007b4:	2320      	movs	r3, #32
 80007b6:	1a9b      	subs	r3, r3, r2
 80007b8:	002a      	movs	r2, r5
 80007ba:	4666      	mov	r6, ip
 80007bc:	409a      	lsls	r2, r3
 80007be:	0023      	movs	r3, r4
 80007c0:	40f3      	lsrs	r3, r6
 80007c2:	4313      	orrs	r3, r2
 80007c4:	e7d4      	b.n	8000770 <__udivmoddi4+0xfc>
 80007c6:	4662      	mov	r2, ip
 80007c8:	2320      	movs	r3, #32
 80007ca:	2100      	movs	r1, #0
 80007cc:	1a9b      	subs	r3, r3, r2
 80007ce:	2200      	movs	r2, #0
 80007d0:	9100      	str	r1, [sp, #0]
 80007d2:	9201      	str	r2, [sp, #4]
 80007d4:	2201      	movs	r2, #1
 80007d6:	40da      	lsrs	r2, r3
 80007d8:	9201      	str	r2, [sp, #4]
 80007da:	e780      	b.n	80006de <__udivmoddi4+0x6a>
 80007dc:	2320      	movs	r3, #32
 80007de:	4662      	mov	r2, ip
 80007e0:	0026      	movs	r6, r4
 80007e2:	1a9b      	subs	r3, r3, r2
 80007e4:	40de      	lsrs	r6, r3
 80007e6:	002f      	movs	r7, r5
 80007e8:	46b0      	mov	r8, r6
 80007ea:	4666      	mov	r6, ip
 80007ec:	40b7      	lsls	r7, r6
 80007ee:	4646      	mov	r6, r8
 80007f0:	003b      	movs	r3, r7
 80007f2:	4333      	orrs	r3, r6
 80007f4:	e7c8      	b.n	8000788 <__udivmoddi4+0x114>
 80007f6:	46c0      	nop			; (mov r8, r8)

080007f8 <__aeabi_fdiv>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	4657      	mov	r7, sl
 80007fc:	464e      	mov	r6, r9
 80007fe:	4645      	mov	r5, r8
 8000800:	46de      	mov	lr, fp
 8000802:	0244      	lsls	r4, r0, #9
 8000804:	b5e0      	push	{r5, r6, r7, lr}
 8000806:	0046      	lsls	r6, r0, #1
 8000808:	4688      	mov	r8, r1
 800080a:	0a64      	lsrs	r4, r4, #9
 800080c:	0e36      	lsrs	r6, r6, #24
 800080e:	0fc7      	lsrs	r7, r0, #31
 8000810:	2e00      	cmp	r6, #0
 8000812:	d063      	beq.n	80008dc <__aeabi_fdiv+0xe4>
 8000814:	2eff      	cmp	r6, #255	; 0xff
 8000816:	d024      	beq.n	8000862 <__aeabi_fdiv+0x6a>
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	00e4      	lsls	r4, r4, #3
 800081c:	04db      	lsls	r3, r3, #19
 800081e:	431c      	orrs	r4, r3
 8000820:	2300      	movs	r3, #0
 8000822:	4699      	mov	r9, r3
 8000824:	469b      	mov	fp, r3
 8000826:	3e7f      	subs	r6, #127	; 0x7f
 8000828:	4643      	mov	r3, r8
 800082a:	4642      	mov	r2, r8
 800082c:	025d      	lsls	r5, r3, #9
 800082e:	0fd2      	lsrs	r2, r2, #31
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	0a6d      	lsrs	r5, r5, #9
 8000834:	0e1b      	lsrs	r3, r3, #24
 8000836:	4690      	mov	r8, r2
 8000838:	4692      	mov	sl, r2
 800083a:	d065      	beq.n	8000908 <__aeabi_fdiv+0x110>
 800083c:	2bff      	cmp	r3, #255	; 0xff
 800083e:	d055      	beq.n	80008ec <__aeabi_fdiv+0xf4>
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	2100      	movs	r1, #0
 8000844:	00ed      	lsls	r5, r5, #3
 8000846:	04d2      	lsls	r2, r2, #19
 8000848:	3b7f      	subs	r3, #127	; 0x7f
 800084a:	4315      	orrs	r5, r2
 800084c:	1af6      	subs	r6, r6, r3
 800084e:	4643      	mov	r3, r8
 8000850:	464a      	mov	r2, r9
 8000852:	407b      	eors	r3, r7
 8000854:	2a0f      	cmp	r2, #15
 8000856:	d900      	bls.n	800085a <__aeabi_fdiv+0x62>
 8000858:	e08d      	b.n	8000976 <__aeabi_fdiv+0x17e>
 800085a:	486d      	ldr	r0, [pc, #436]	; (8000a10 <__aeabi_fdiv+0x218>)
 800085c:	0092      	lsls	r2, r2, #2
 800085e:	5882      	ldr	r2, [r0, r2]
 8000860:	4697      	mov	pc, r2
 8000862:	2c00      	cmp	r4, #0
 8000864:	d154      	bne.n	8000910 <__aeabi_fdiv+0x118>
 8000866:	2308      	movs	r3, #8
 8000868:	4699      	mov	r9, r3
 800086a:	3b06      	subs	r3, #6
 800086c:	26ff      	movs	r6, #255	; 0xff
 800086e:	469b      	mov	fp, r3
 8000870:	e7da      	b.n	8000828 <__aeabi_fdiv+0x30>
 8000872:	2500      	movs	r5, #0
 8000874:	4653      	mov	r3, sl
 8000876:	2902      	cmp	r1, #2
 8000878:	d01b      	beq.n	80008b2 <__aeabi_fdiv+0xba>
 800087a:	2903      	cmp	r1, #3
 800087c:	d100      	bne.n	8000880 <__aeabi_fdiv+0x88>
 800087e:	e0bf      	b.n	8000a00 <__aeabi_fdiv+0x208>
 8000880:	2901      	cmp	r1, #1
 8000882:	d028      	beq.n	80008d6 <__aeabi_fdiv+0xde>
 8000884:	0030      	movs	r0, r6
 8000886:	307f      	adds	r0, #127	; 0x7f
 8000888:	2800      	cmp	r0, #0
 800088a:	dd20      	ble.n	80008ce <__aeabi_fdiv+0xd6>
 800088c:	076a      	lsls	r2, r5, #29
 800088e:	d004      	beq.n	800089a <__aeabi_fdiv+0xa2>
 8000890:	220f      	movs	r2, #15
 8000892:	402a      	ands	r2, r5
 8000894:	2a04      	cmp	r2, #4
 8000896:	d000      	beq.n	800089a <__aeabi_fdiv+0xa2>
 8000898:	3504      	adds	r5, #4
 800089a:	012a      	lsls	r2, r5, #4
 800089c:	d503      	bpl.n	80008a6 <__aeabi_fdiv+0xae>
 800089e:	0030      	movs	r0, r6
 80008a0:	4a5c      	ldr	r2, [pc, #368]	; (8000a14 <__aeabi_fdiv+0x21c>)
 80008a2:	3080      	adds	r0, #128	; 0x80
 80008a4:	4015      	ands	r5, r2
 80008a6:	28fe      	cmp	r0, #254	; 0xfe
 80008a8:	dc03      	bgt.n	80008b2 <__aeabi_fdiv+0xba>
 80008aa:	01ac      	lsls	r4, r5, #6
 80008ac:	0a64      	lsrs	r4, r4, #9
 80008ae:	b2c2      	uxtb	r2, r0
 80008b0:	e001      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	2400      	movs	r4, #0
 80008b6:	0264      	lsls	r4, r4, #9
 80008b8:	05d2      	lsls	r2, r2, #23
 80008ba:	0a60      	lsrs	r0, r4, #9
 80008bc:	07db      	lsls	r3, r3, #31
 80008be:	4310      	orrs	r0, r2
 80008c0:	4318      	orrs	r0, r3
 80008c2:	bc3c      	pop	{r2, r3, r4, r5}
 80008c4:	4690      	mov	r8, r2
 80008c6:	4699      	mov	r9, r3
 80008c8:	46a2      	mov	sl, r4
 80008ca:	46ab      	mov	fp, r5
 80008cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ce:	2201      	movs	r2, #1
 80008d0:	1a10      	subs	r0, r2, r0
 80008d2:	281b      	cmp	r0, #27
 80008d4:	dd7c      	ble.n	80009d0 <__aeabi_fdiv+0x1d8>
 80008d6:	2200      	movs	r2, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	e7ec      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d11d      	bne.n	800091c <__aeabi_fdiv+0x124>
 80008e0:	2304      	movs	r3, #4
 80008e2:	4699      	mov	r9, r3
 80008e4:	3b03      	subs	r3, #3
 80008e6:	2600      	movs	r6, #0
 80008e8:	469b      	mov	fp, r3
 80008ea:	e79d      	b.n	8000828 <__aeabi_fdiv+0x30>
 80008ec:	3eff      	subs	r6, #255	; 0xff
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d120      	bne.n	8000934 <__aeabi_fdiv+0x13c>
 80008f2:	2102      	movs	r1, #2
 80008f4:	4643      	mov	r3, r8
 80008f6:	464a      	mov	r2, r9
 80008f8:	407b      	eors	r3, r7
 80008fa:	430a      	orrs	r2, r1
 80008fc:	2a0f      	cmp	r2, #15
 80008fe:	d8d8      	bhi.n	80008b2 <__aeabi_fdiv+0xba>
 8000900:	4845      	ldr	r0, [pc, #276]	; (8000a18 <__aeabi_fdiv+0x220>)
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	5882      	ldr	r2, [r0, r2]
 8000906:	4697      	mov	pc, r2
 8000908:	2d00      	cmp	r5, #0
 800090a:	d119      	bne.n	8000940 <__aeabi_fdiv+0x148>
 800090c:	2101      	movs	r1, #1
 800090e:	e7f1      	b.n	80008f4 <__aeabi_fdiv+0xfc>
 8000910:	230c      	movs	r3, #12
 8000912:	4699      	mov	r9, r3
 8000914:	3b09      	subs	r3, #9
 8000916:	26ff      	movs	r6, #255	; 0xff
 8000918:	469b      	mov	fp, r3
 800091a:	e785      	b.n	8000828 <__aeabi_fdiv+0x30>
 800091c:	0020      	movs	r0, r4
 800091e:	f002 fb0d 	bl	8002f3c <__clzsi2>
 8000922:	2676      	movs	r6, #118	; 0x76
 8000924:	1f43      	subs	r3, r0, #5
 8000926:	409c      	lsls	r4, r3
 8000928:	2300      	movs	r3, #0
 800092a:	4276      	negs	r6, r6
 800092c:	1a36      	subs	r6, r6, r0
 800092e:	4699      	mov	r9, r3
 8000930:	469b      	mov	fp, r3
 8000932:	e779      	b.n	8000828 <__aeabi_fdiv+0x30>
 8000934:	464a      	mov	r2, r9
 8000936:	2303      	movs	r3, #3
 8000938:	431a      	orrs	r2, r3
 800093a:	4691      	mov	r9, r2
 800093c:	2103      	movs	r1, #3
 800093e:	e786      	b.n	800084e <__aeabi_fdiv+0x56>
 8000940:	0028      	movs	r0, r5
 8000942:	f002 fafb 	bl	8002f3c <__clzsi2>
 8000946:	1f43      	subs	r3, r0, #5
 8000948:	1836      	adds	r6, r6, r0
 800094a:	409d      	lsls	r5, r3
 800094c:	3676      	adds	r6, #118	; 0x76
 800094e:	2100      	movs	r1, #0
 8000950:	e77d      	b.n	800084e <__aeabi_fdiv+0x56>
 8000952:	2480      	movs	r4, #128	; 0x80
 8000954:	2300      	movs	r3, #0
 8000956:	03e4      	lsls	r4, r4, #15
 8000958:	22ff      	movs	r2, #255	; 0xff
 800095a:	e7ac      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 800095c:	2500      	movs	r5, #0
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	03db      	lsls	r3, r3, #15
 8000962:	421c      	tst	r4, r3
 8000964:	d028      	beq.n	80009b8 <__aeabi_fdiv+0x1c0>
 8000966:	421d      	tst	r5, r3
 8000968:	d126      	bne.n	80009b8 <__aeabi_fdiv+0x1c0>
 800096a:	432b      	orrs	r3, r5
 800096c:	025c      	lsls	r4, r3, #9
 800096e:	0a64      	lsrs	r4, r4, #9
 8000970:	4643      	mov	r3, r8
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	e79f      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 8000976:	0162      	lsls	r2, r4, #5
 8000978:	016c      	lsls	r4, r5, #5
 800097a:	42a2      	cmp	r2, r4
 800097c:	d224      	bcs.n	80009c8 <__aeabi_fdiv+0x1d0>
 800097e:	211b      	movs	r1, #27
 8000980:	2500      	movs	r5, #0
 8000982:	3e01      	subs	r6, #1
 8000984:	2701      	movs	r7, #1
 8000986:	0010      	movs	r0, r2
 8000988:	006d      	lsls	r5, r5, #1
 800098a:	0052      	lsls	r2, r2, #1
 800098c:	2800      	cmp	r0, #0
 800098e:	db01      	blt.n	8000994 <__aeabi_fdiv+0x19c>
 8000990:	4294      	cmp	r4, r2
 8000992:	d801      	bhi.n	8000998 <__aeabi_fdiv+0x1a0>
 8000994:	1b12      	subs	r2, r2, r4
 8000996:	433d      	orrs	r5, r7
 8000998:	3901      	subs	r1, #1
 800099a:	2900      	cmp	r1, #0
 800099c:	d1f3      	bne.n	8000986 <__aeabi_fdiv+0x18e>
 800099e:	0014      	movs	r4, r2
 80009a0:	1e62      	subs	r2, r4, #1
 80009a2:	4194      	sbcs	r4, r2
 80009a4:	4325      	orrs	r5, r4
 80009a6:	e76d      	b.n	8000884 <__aeabi_fdiv+0x8c>
 80009a8:	46ba      	mov	sl, r7
 80009aa:	4659      	mov	r1, fp
 80009ac:	0025      	movs	r5, r4
 80009ae:	4653      	mov	r3, sl
 80009b0:	2902      	cmp	r1, #2
 80009b2:	d000      	beq.n	80009b6 <__aeabi_fdiv+0x1be>
 80009b4:	e761      	b.n	800087a <__aeabi_fdiv+0x82>
 80009b6:	e77c      	b.n	80008b2 <__aeabi_fdiv+0xba>
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	03db      	lsls	r3, r3, #15
 80009bc:	431c      	orrs	r4, r3
 80009be:	0264      	lsls	r4, r4, #9
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	003b      	movs	r3, r7
 80009c4:	22ff      	movs	r2, #255	; 0xff
 80009c6:	e776      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80009c8:	1b12      	subs	r2, r2, r4
 80009ca:	211a      	movs	r1, #26
 80009cc:	2501      	movs	r5, #1
 80009ce:	e7d9      	b.n	8000984 <__aeabi_fdiv+0x18c>
 80009d0:	369e      	adds	r6, #158	; 0x9e
 80009d2:	002a      	movs	r2, r5
 80009d4:	40b5      	lsls	r5, r6
 80009d6:	002c      	movs	r4, r5
 80009d8:	40c2      	lsrs	r2, r0
 80009da:	1e65      	subs	r5, r4, #1
 80009dc:	41ac      	sbcs	r4, r5
 80009de:	4314      	orrs	r4, r2
 80009e0:	0762      	lsls	r2, r4, #29
 80009e2:	d004      	beq.n	80009ee <__aeabi_fdiv+0x1f6>
 80009e4:	220f      	movs	r2, #15
 80009e6:	4022      	ands	r2, r4
 80009e8:	2a04      	cmp	r2, #4
 80009ea:	d000      	beq.n	80009ee <__aeabi_fdiv+0x1f6>
 80009ec:	3404      	adds	r4, #4
 80009ee:	0162      	lsls	r2, r4, #5
 80009f0:	d403      	bmi.n	80009fa <__aeabi_fdiv+0x202>
 80009f2:	01a4      	lsls	r4, r4, #6
 80009f4:	0a64      	lsrs	r4, r4, #9
 80009f6:	2200      	movs	r2, #0
 80009f8:	e75d      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80009fa:	2201      	movs	r2, #1
 80009fc:	2400      	movs	r4, #0
 80009fe:	e75a      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 8000a00:	2480      	movs	r4, #128	; 0x80
 8000a02:	03e4      	lsls	r4, r4, #15
 8000a04:	432c      	orrs	r4, r5
 8000a06:	0264      	lsls	r4, r4, #9
 8000a08:	0a64      	lsrs	r4, r4, #9
 8000a0a:	22ff      	movs	r2, #255	; 0xff
 8000a0c:	e753      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	080192e4 	.word	0x080192e4
 8000a14:	f7ffffff 	.word	0xf7ffffff
 8000a18:	08019324 	.word	0x08019324

08000a1c <__eqsf2>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	0042      	lsls	r2, r0, #1
 8000a20:	024e      	lsls	r6, r1, #9
 8000a22:	004c      	lsls	r4, r1, #1
 8000a24:	0245      	lsls	r5, r0, #9
 8000a26:	0a6d      	lsrs	r5, r5, #9
 8000a28:	0e12      	lsrs	r2, r2, #24
 8000a2a:	0fc3      	lsrs	r3, r0, #31
 8000a2c:	0a76      	lsrs	r6, r6, #9
 8000a2e:	0e24      	lsrs	r4, r4, #24
 8000a30:	0fc9      	lsrs	r1, r1, #31
 8000a32:	2aff      	cmp	r2, #255	; 0xff
 8000a34:	d00f      	beq.n	8000a56 <__eqsf2+0x3a>
 8000a36:	2cff      	cmp	r4, #255	; 0xff
 8000a38:	d011      	beq.n	8000a5e <__eqsf2+0x42>
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	42a2      	cmp	r2, r4
 8000a3e:	d000      	beq.n	8000a42 <__eqsf2+0x26>
 8000a40:	bd70      	pop	{r4, r5, r6, pc}
 8000a42:	42b5      	cmp	r5, r6
 8000a44:	d1fc      	bne.n	8000a40 <__eqsf2+0x24>
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d00d      	beq.n	8000a66 <__eqsf2+0x4a>
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	d1f8      	bne.n	8000a40 <__eqsf2+0x24>
 8000a4e:	0028      	movs	r0, r5
 8000a50:	1e45      	subs	r5, r0, #1
 8000a52:	41a8      	sbcs	r0, r5
 8000a54:	e7f4      	b.n	8000a40 <__eqsf2+0x24>
 8000a56:	2001      	movs	r0, #1
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d1f1      	bne.n	8000a40 <__eqsf2+0x24>
 8000a5c:	e7eb      	b.n	8000a36 <__eqsf2+0x1a>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2e00      	cmp	r6, #0
 8000a62:	d1ed      	bne.n	8000a40 <__eqsf2+0x24>
 8000a64:	e7e9      	b.n	8000a3a <__eqsf2+0x1e>
 8000a66:	2000      	movs	r0, #0
 8000a68:	e7ea      	b.n	8000a40 <__eqsf2+0x24>
 8000a6a:	46c0      	nop			; (mov r8, r8)

08000a6c <__gesf2>:
 8000a6c:	b570      	push	{r4, r5, r6, lr}
 8000a6e:	004a      	lsls	r2, r1, #1
 8000a70:	024e      	lsls	r6, r1, #9
 8000a72:	0245      	lsls	r5, r0, #9
 8000a74:	0044      	lsls	r4, r0, #1
 8000a76:	0a6d      	lsrs	r5, r5, #9
 8000a78:	0e24      	lsrs	r4, r4, #24
 8000a7a:	0fc3      	lsrs	r3, r0, #31
 8000a7c:	0a76      	lsrs	r6, r6, #9
 8000a7e:	0e12      	lsrs	r2, r2, #24
 8000a80:	0fc9      	lsrs	r1, r1, #31
 8000a82:	2cff      	cmp	r4, #255	; 0xff
 8000a84:	d015      	beq.n	8000ab2 <__gesf2+0x46>
 8000a86:	2aff      	cmp	r2, #255	; 0xff
 8000a88:	d00e      	beq.n	8000aa8 <__gesf2+0x3c>
 8000a8a:	2c00      	cmp	r4, #0
 8000a8c:	d115      	bne.n	8000aba <__gesf2+0x4e>
 8000a8e:	2a00      	cmp	r2, #0
 8000a90:	d101      	bne.n	8000a96 <__gesf2+0x2a>
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d01c      	beq.n	8000ad0 <__gesf2+0x64>
 8000a96:	2d00      	cmp	r5, #0
 8000a98:	d014      	beq.n	8000ac4 <__gesf2+0x58>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d027      	beq.n	8000aee <__gesf2+0x82>
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	4018      	ands	r0, r3
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d0ee      	beq.n	8000a8a <__gesf2+0x1e>
 8000aac:	2002      	movs	r0, #2
 8000aae:	4240      	negs	r0, r0
 8000ab0:	e7f9      	b.n	8000aa6 <__gesf2+0x3a>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d1fa      	bne.n	8000aac <__gesf2+0x40>
 8000ab6:	2aff      	cmp	r2, #255	; 0xff
 8000ab8:	d00e      	beq.n	8000ad8 <__gesf2+0x6c>
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d10e      	bne.n	8000adc <__gesf2+0x70>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0ed      	beq.n	8000a9e <__gesf2+0x32>
 8000ac2:	e00b      	b.n	8000adc <__gesf2+0x70>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	3901      	subs	r1, #1
 8000ac8:	4399      	bics	r1, r3
 8000aca:	0008      	movs	r0, r1
 8000acc:	3001      	adds	r0, #1
 8000ace:	e7ea      	b.n	8000aa6 <__gesf2+0x3a>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d0e7      	beq.n	8000aa6 <__gesf2+0x3a>
 8000ad6:	e7e2      	b.n	8000a9e <__gesf2+0x32>
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d1e7      	bne.n	8000aac <__gesf2+0x40>
 8000adc:	428b      	cmp	r3, r1
 8000ade:	d1de      	bne.n	8000a9e <__gesf2+0x32>
 8000ae0:	4294      	cmp	r4, r2
 8000ae2:	dd05      	ble.n	8000af0 <__gesf2+0x84>
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	1e58      	subs	r0, r3, #1
 8000ae8:	4008      	ands	r0, r1
 8000aea:	3801      	subs	r0, #1
 8000aec:	e7db      	b.n	8000aa6 <__gesf2+0x3a>
 8000aee:	2400      	movs	r4, #0
 8000af0:	42a2      	cmp	r2, r4
 8000af2:	dc04      	bgt.n	8000afe <__gesf2+0x92>
 8000af4:	42b5      	cmp	r5, r6
 8000af6:	d8d2      	bhi.n	8000a9e <__gesf2+0x32>
 8000af8:	2000      	movs	r0, #0
 8000afa:	42b5      	cmp	r5, r6
 8000afc:	d2d3      	bcs.n	8000aa6 <__gesf2+0x3a>
 8000afe:	1e58      	subs	r0, r3, #1
 8000b00:	2301      	movs	r3, #1
 8000b02:	4398      	bics	r0, r3
 8000b04:	3001      	adds	r0, #1
 8000b06:	e7ce      	b.n	8000aa6 <__gesf2+0x3a>

08000b08 <__lesf2>:
 8000b08:	b530      	push	{r4, r5, lr}
 8000b0a:	0042      	lsls	r2, r0, #1
 8000b0c:	0244      	lsls	r4, r0, #9
 8000b0e:	024d      	lsls	r5, r1, #9
 8000b10:	0fc3      	lsrs	r3, r0, #31
 8000b12:	0048      	lsls	r0, r1, #1
 8000b14:	0a64      	lsrs	r4, r4, #9
 8000b16:	0e12      	lsrs	r2, r2, #24
 8000b18:	0a6d      	lsrs	r5, r5, #9
 8000b1a:	0e00      	lsrs	r0, r0, #24
 8000b1c:	0fc9      	lsrs	r1, r1, #31
 8000b1e:	2aff      	cmp	r2, #255	; 0xff
 8000b20:	d012      	beq.n	8000b48 <__lesf2+0x40>
 8000b22:	28ff      	cmp	r0, #255	; 0xff
 8000b24:	d00c      	beq.n	8000b40 <__lesf2+0x38>
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d112      	bne.n	8000b50 <__lesf2+0x48>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d119      	bne.n	8000b62 <__lesf2+0x5a>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d117      	bne.n	8000b62 <__lesf2+0x5a>
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d02b      	beq.n	8000b8e <__lesf2+0x86>
 8000b36:	2002      	movs	r0, #2
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4018      	ands	r0, r3
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	e026      	b.n	8000b8e <__lesf2+0x86>
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d0f0      	beq.n	8000b26 <__lesf2+0x1e>
 8000b44:	2002      	movs	r0, #2
 8000b46:	e022      	b.n	8000b8e <__lesf2+0x86>
 8000b48:	2c00      	cmp	r4, #0
 8000b4a:	d1fb      	bne.n	8000b44 <__lesf2+0x3c>
 8000b4c:	28ff      	cmp	r0, #255	; 0xff
 8000b4e:	d01f      	beq.n	8000b90 <__lesf2+0x88>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d11f      	bne.n	8000b94 <__lesf2+0x8c>
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d11d      	bne.n	8000b94 <__lesf2+0x8c>
 8000b58:	2002      	movs	r0, #2
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	4018      	ands	r0, r3
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e015      	b.n	8000b8e <__lesf2+0x86>
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d00e      	beq.n	8000b84 <__lesf2+0x7c>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d1e5      	bne.n	8000b36 <__lesf2+0x2e>
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4290      	cmp	r0, r2
 8000b6e:	dc04      	bgt.n	8000b7a <__lesf2+0x72>
 8000b70:	42ac      	cmp	r4, r5
 8000b72:	d8e0      	bhi.n	8000b36 <__lesf2+0x2e>
 8000b74:	2000      	movs	r0, #0
 8000b76:	42ac      	cmp	r4, r5
 8000b78:	d209      	bcs.n	8000b8e <__lesf2+0x86>
 8000b7a:	1e58      	subs	r0, r3, #1
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	4398      	bics	r0, r3
 8000b80:	3001      	adds	r0, #1
 8000b82:	e004      	b.n	8000b8e <__lesf2+0x86>
 8000b84:	2301      	movs	r3, #1
 8000b86:	3901      	subs	r1, #1
 8000b88:	4399      	bics	r1, r3
 8000b8a:	0008      	movs	r0, r1
 8000b8c:	3001      	adds	r0, #1
 8000b8e:	bd30      	pop	{r4, r5, pc}
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d1d7      	bne.n	8000b44 <__lesf2+0x3c>
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d1ce      	bne.n	8000b36 <__lesf2+0x2e>
 8000b98:	4282      	cmp	r2, r0
 8000b9a:	dde7      	ble.n	8000b6c <__lesf2+0x64>
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	1e58      	subs	r0, r3, #1
 8000ba0:	4008      	ands	r0, r1
 8000ba2:	3801      	subs	r0, #1
 8000ba4:	e7f3      	b.n	8000b8e <__lesf2+0x86>
 8000ba6:	46c0      	nop			; (mov r8, r8)

08000ba8 <__aeabi_fmul>:
 8000ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000baa:	464e      	mov	r6, r9
 8000bac:	4657      	mov	r7, sl
 8000bae:	4645      	mov	r5, r8
 8000bb0:	46de      	mov	lr, fp
 8000bb2:	b5e0      	push	{r5, r6, r7, lr}
 8000bb4:	0243      	lsls	r3, r0, #9
 8000bb6:	0a5b      	lsrs	r3, r3, #9
 8000bb8:	0045      	lsls	r5, r0, #1
 8000bba:	b083      	sub	sp, #12
 8000bbc:	1c0f      	adds	r7, r1, #0
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	0e2d      	lsrs	r5, r5, #24
 8000bc2:	0fc6      	lsrs	r6, r0, #31
 8000bc4:	2d00      	cmp	r5, #0
 8000bc6:	d057      	beq.n	8000c78 <__aeabi_fmul+0xd0>
 8000bc8:	2dff      	cmp	r5, #255	; 0xff
 8000bca:	d024      	beq.n	8000c16 <__aeabi_fmul+0x6e>
 8000bcc:	2080      	movs	r0, #128	; 0x80
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	04c0      	lsls	r0, r0, #19
 8000bd2:	4318      	orrs	r0, r3
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	4681      	mov	r9, r0
 8000bd8:	469a      	mov	sl, r3
 8000bda:	469b      	mov	fp, r3
 8000bdc:	3d7f      	subs	r5, #127	; 0x7f
 8000bde:	027c      	lsls	r4, r7, #9
 8000be0:	007a      	lsls	r2, r7, #1
 8000be2:	0ffb      	lsrs	r3, r7, #31
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e12      	lsrs	r2, r2, #24
 8000be8:	4698      	mov	r8, r3
 8000bea:	d023      	beq.n	8000c34 <__aeabi_fmul+0x8c>
 8000bec:	2aff      	cmp	r2, #255	; 0xff
 8000bee:	d04b      	beq.n	8000c88 <__aeabi_fmul+0xe0>
 8000bf0:	00e3      	lsls	r3, r4, #3
 8000bf2:	2480      	movs	r4, #128	; 0x80
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	04e4      	lsls	r4, r4, #19
 8000bf8:	3a7f      	subs	r2, #127	; 0x7f
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	18ad      	adds	r5, r5, r2
 8000bfe:	1c6b      	adds	r3, r5, #1
 8000c00:	4647      	mov	r7, r8
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	4653      	mov	r3, sl
 8000c06:	4077      	eors	r7, r6
 8000c08:	003a      	movs	r2, r7
 8000c0a:	2b0f      	cmp	r3, #15
 8000c0c:	d848      	bhi.n	8000ca0 <__aeabi_fmul+0xf8>
 8000c0e:	497d      	ldr	r1, [pc, #500]	; (8000e04 <__aeabi_fmul+0x25c>)
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	58cb      	ldr	r3, [r1, r3]
 8000c14:	469f      	mov	pc, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_fmul+0x74>
 8000c1a:	e085      	b.n	8000d28 <__aeabi_fmul+0x180>
 8000c1c:	3308      	adds	r3, #8
 8000c1e:	469a      	mov	sl, r3
 8000c20:	3b06      	subs	r3, #6
 8000c22:	469b      	mov	fp, r3
 8000c24:	027c      	lsls	r4, r7, #9
 8000c26:	007a      	lsls	r2, r7, #1
 8000c28:	0ffb      	lsrs	r3, r7, #31
 8000c2a:	25ff      	movs	r5, #255	; 0xff
 8000c2c:	0a64      	lsrs	r4, r4, #9
 8000c2e:	0e12      	lsrs	r2, r2, #24
 8000c30:	4698      	mov	r8, r3
 8000c32:	d1db      	bne.n	8000bec <__aeabi_fmul+0x44>
 8000c34:	2c00      	cmp	r4, #0
 8000c36:	d000      	beq.n	8000c3a <__aeabi_fmul+0x92>
 8000c38:	e090      	b.n	8000d5c <__aeabi_fmul+0x1b4>
 8000c3a:	4652      	mov	r2, sl
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	4692      	mov	sl, r2
 8000c42:	2001      	movs	r0, #1
 8000c44:	e7db      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000c46:	464c      	mov	r4, r9
 8000c48:	4658      	mov	r0, fp
 8000c4a:	0017      	movs	r7, r2
 8000c4c:	2802      	cmp	r0, #2
 8000c4e:	d024      	beq.n	8000c9a <__aeabi_fmul+0xf2>
 8000c50:	2803      	cmp	r0, #3
 8000c52:	d100      	bne.n	8000c56 <__aeabi_fmul+0xae>
 8000c54:	e0cf      	b.n	8000df6 <__aeabi_fmul+0x24e>
 8000c56:	2200      	movs	r2, #0
 8000c58:	2300      	movs	r3, #0
 8000c5a:	2801      	cmp	r0, #1
 8000c5c:	d14d      	bne.n	8000cfa <__aeabi_fmul+0x152>
 8000c5e:	0258      	lsls	r0, r3, #9
 8000c60:	05d2      	lsls	r2, r2, #23
 8000c62:	0a40      	lsrs	r0, r0, #9
 8000c64:	07ff      	lsls	r7, r7, #31
 8000c66:	4310      	orrs	r0, r2
 8000c68:	4338      	orrs	r0, r7
 8000c6a:	b003      	add	sp, #12
 8000c6c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c6e:	4690      	mov	r8, r2
 8000c70:	4699      	mov	r9, r3
 8000c72:	46a2      	mov	sl, r4
 8000c74:	46ab      	mov	fp, r5
 8000c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d15b      	bne.n	8000d34 <__aeabi_fmul+0x18c>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	469a      	mov	sl, r3
 8000c80:	3b03      	subs	r3, #3
 8000c82:	2500      	movs	r5, #0
 8000c84:	469b      	mov	fp, r3
 8000c86:	e7aa      	b.n	8000bde <__aeabi_fmul+0x36>
 8000c88:	35ff      	adds	r5, #255	; 0xff
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d160      	bne.n	8000d50 <__aeabi_fmul+0x1a8>
 8000c8e:	4652      	mov	r2, sl
 8000c90:	2302      	movs	r3, #2
 8000c92:	431a      	orrs	r2, r3
 8000c94:	4692      	mov	sl, r2
 8000c96:	2002      	movs	r0, #2
 8000c98:	e7b1      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000c9a:	22ff      	movs	r2, #255	; 0xff
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e7de      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	0c1b      	lsrs	r3, r3, #16
 8000ca4:	469c      	mov	ip, r3
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	0426      	lsls	r6, r4, #16
 8000caa:	0c36      	lsrs	r6, r6, #16
 8000cac:	0418      	lsls	r0, r3, #16
 8000cae:	4661      	mov	r1, ip
 8000cb0:	0033      	movs	r3, r6
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	4664      	mov	r4, ip
 8000cb6:	0c00      	lsrs	r0, r0, #16
 8000cb8:	4343      	muls	r3, r0
 8000cba:	434e      	muls	r6, r1
 8000cbc:	4350      	muls	r0, r2
 8000cbe:	4354      	muls	r4, r2
 8000cc0:	1980      	adds	r0, r0, r6
 8000cc2:	0c1a      	lsrs	r2, r3, #16
 8000cc4:	1812      	adds	r2, r2, r0
 8000cc6:	4296      	cmp	r6, r2
 8000cc8:	d903      	bls.n	8000cd2 <__aeabi_fmul+0x12a>
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	0249      	lsls	r1, r1, #9
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4464      	add	r4, ip
 8000cd2:	041b      	lsls	r3, r3, #16
 8000cd4:	0c1b      	lsrs	r3, r3, #16
 8000cd6:	0410      	lsls	r0, r2, #16
 8000cd8:	18c0      	adds	r0, r0, r3
 8000cda:	0183      	lsls	r3, r0, #6
 8000cdc:	1e5e      	subs	r6, r3, #1
 8000cde:	41b3      	sbcs	r3, r6
 8000ce0:	0e80      	lsrs	r0, r0, #26
 8000ce2:	4318      	orrs	r0, r3
 8000ce4:	0c13      	lsrs	r3, r2, #16
 8000ce6:	191b      	adds	r3, r3, r4
 8000ce8:	019b      	lsls	r3, r3, #6
 8000cea:	4303      	orrs	r3, r0
 8000cec:	001c      	movs	r4, r3
 8000cee:	0123      	lsls	r3, r4, #4
 8000cf0:	d579      	bpl.n	8000de6 <__aeabi_fmul+0x23e>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	0862      	lsrs	r2, r4, #1
 8000cf6:	401c      	ands	r4, r3
 8000cf8:	4314      	orrs	r4, r2
 8000cfa:	9a01      	ldr	r2, [sp, #4]
 8000cfc:	327f      	adds	r2, #127	; 0x7f
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	dd4d      	ble.n	8000d9e <__aeabi_fmul+0x1f6>
 8000d02:	0763      	lsls	r3, r4, #29
 8000d04:	d004      	beq.n	8000d10 <__aeabi_fmul+0x168>
 8000d06:	230f      	movs	r3, #15
 8000d08:	4023      	ands	r3, r4
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_fmul+0x168>
 8000d0e:	3404      	adds	r4, #4
 8000d10:	0123      	lsls	r3, r4, #4
 8000d12:	d503      	bpl.n	8000d1c <__aeabi_fmul+0x174>
 8000d14:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <__aeabi_fmul+0x260>)
 8000d16:	9a01      	ldr	r2, [sp, #4]
 8000d18:	401c      	ands	r4, r3
 8000d1a:	3280      	adds	r2, #128	; 0x80
 8000d1c:	2afe      	cmp	r2, #254	; 0xfe
 8000d1e:	dcbc      	bgt.n	8000c9a <__aeabi_fmul+0xf2>
 8000d20:	01a3      	lsls	r3, r4, #6
 8000d22:	0a5b      	lsrs	r3, r3, #9
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	e79a      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000d28:	230c      	movs	r3, #12
 8000d2a:	469a      	mov	sl, r3
 8000d2c:	3b09      	subs	r3, #9
 8000d2e:	25ff      	movs	r5, #255	; 0xff
 8000d30:	469b      	mov	fp, r3
 8000d32:	e754      	b.n	8000bde <__aeabi_fmul+0x36>
 8000d34:	0018      	movs	r0, r3
 8000d36:	f002 f901 	bl	8002f3c <__clzsi2>
 8000d3a:	464a      	mov	r2, r9
 8000d3c:	1f43      	subs	r3, r0, #5
 8000d3e:	2576      	movs	r5, #118	; 0x76
 8000d40:	409a      	lsls	r2, r3
 8000d42:	2300      	movs	r3, #0
 8000d44:	426d      	negs	r5, r5
 8000d46:	4691      	mov	r9, r2
 8000d48:	1a2d      	subs	r5, r5, r0
 8000d4a:	469a      	mov	sl, r3
 8000d4c:	469b      	mov	fp, r3
 8000d4e:	e746      	b.n	8000bde <__aeabi_fmul+0x36>
 8000d50:	4652      	mov	r2, sl
 8000d52:	2303      	movs	r3, #3
 8000d54:	431a      	orrs	r2, r3
 8000d56:	4692      	mov	sl, r2
 8000d58:	2003      	movs	r0, #3
 8000d5a:	e750      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000d5c:	0020      	movs	r0, r4
 8000d5e:	f002 f8ed 	bl	8002f3c <__clzsi2>
 8000d62:	1f43      	subs	r3, r0, #5
 8000d64:	1a2d      	subs	r5, r5, r0
 8000d66:	409c      	lsls	r4, r3
 8000d68:	3d76      	subs	r5, #118	; 0x76
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	e747      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	2700      	movs	r7, #0
 8000d72:	03db      	lsls	r3, r3, #15
 8000d74:	22ff      	movs	r2, #255	; 0xff
 8000d76:	e772      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000d78:	4642      	mov	r2, r8
 8000d7a:	e766      	b.n	8000c4a <__aeabi_fmul+0xa2>
 8000d7c:	464c      	mov	r4, r9
 8000d7e:	0032      	movs	r2, r6
 8000d80:	4658      	mov	r0, fp
 8000d82:	e762      	b.n	8000c4a <__aeabi_fmul+0xa2>
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	464a      	mov	r2, r9
 8000d88:	03db      	lsls	r3, r3, #15
 8000d8a:	421a      	tst	r2, r3
 8000d8c:	d022      	beq.n	8000dd4 <__aeabi_fmul+0x22c>
 8000d8e:	421c      	tst	r4, r3
 8000d90:	d120      	bne.n	8000dd4 <__aeabi_fmul+0x22c>
 8000d92:	4323      	orrs	r3, r4
 8000d94:	025b      	lsls	r3, r3, #9
 8000d96:	0a5b      	lsrs	r3, r3, #9
 8000d98:	4647      	mov	r7, r8
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	e75f      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	1a9a      	subs	r2, r3, r2
 8000da2:	2a1b      	cmp	r2, #27
 8000da4:	dc21      	bgt.n	8000dea <__aeabi_fmul+0x242>
 8000da6:	0023      	movs	r3, r4
 8000da8:	9901      	ldr	r1, [sp, #4]
 8000daa:	40d3      	lsrs	r3, r2
 8000dac:	319e      	adds	r1, #158	; 0x9e
 8000dae:	408c      	lsls	r4, r1
 8000db0:	001a      	movs	r2, r3
 8000db2:	0023      	movs	r3, r4
 8000db4:	1e5c      	subs	r4, r3, #1
 8000db6:	41a3      	sbcs	r3, r4
 8000db8:	4313      	orrs	r3, r2
 8000dba:	075a      	lsls	r2, r3, #29
 8000dbc:	d004      	beq.n	8000dc8 <__aeabi_fmul+0x220>
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	2a04      	cmp	r2, #4
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_fmul+0x220>
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	015a      	lsls	r2, r3, #5
 8000dca:	d411      	bmi.n	8000df0 <__aeabi_fmul+0x248>
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	0a5b      	lsrs	r3, r3, #9
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e744      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	464a      	mov	r2, r9
 8000dd8:	03db      	lsls	r3, r3, #15
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	025b      	lsls	r3, r3, #9
 8000dde:	0a5b      	lsrs	r3, r3, #9
 8000de0:	0037      	movs	r7, r6
 8000de2:	22ff      	movs	r2, #255	; 0xff
 8000de4:	e73b      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000de6:	9501      	str	r5, [sp, #4]
 8000de8:	e787      	b.n	8000cfa <__aeabi_fmul+0x152>
 8000dea:	2200      	movs	r2, #0
 8000dec:	2300      	movs	r3, #0
 8000dee:	e736      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000df0:	2201      	movs	r2, #1
 8000df2:	2300      	movs	r3, #0
 8000df4:	e733      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	03db      	lsls	r3, r3, #15
 8000dfa:	4323      	orrs	r3, r4
 8000dfc:	025b      	lsls	r3, r3, #9
 8000dfe:	0a5b      	lsrs	r3, r3, #9
 8000e00:	22ff      	movs	r2, #255	; 0xff
 8000e02:	e72c      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000e04:	08019364 	.word	0x08019364
 8000e08:	f7ffffff 	.word	0xf7ffffff

08000e0c <__aeabi_fsub>:
 8000e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0e:	4647      	mov	r7, r8
 8000e10:	46ce      	mov	lr, r9
 8000e12:	0044      	lsls	r4, r0, #1
 8000e14:	0fc2      	lsrs	r2, r0, #31
 8000e16:	b580      	push	{r7, lr}
 8000e18:	0247      	lsls	r7, r0, #9
 8000e1a:	0248      	lsls	r0, r1, #9
 8000e1c:	0a40      	lsrs	r0, r0, #9
 8000e1e:	4684      	mov	ip, r0
 8000e20:	4666      	mov	r6, ip
 8000e22:	0048      	lsls	r0, r1, #1
 8000e24:	0a7f      	lsrs	r7, r7, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	00f6      	lsls	r6, r6, #3
 8000e2a:	0025      	movs	r5, r4
 8000e2c:	4690      	mov	r8, r2
 8000e2e:	00fb      	lsls	r3, r7, #3
 8000e30:	0e00      	lsrs	r0, r0, #24
 8000e32:	0fc9      	lsrs	r1, r1, #31
 8000e34:	46b1      	mov	r9, r6
 8000e36:	28ff      	cmp	r0, #255	; 0xff
 8000e38:	d100      	bne.n	8000e3c <__aeabi_fsub+0x30>
 8000e3a:	e085      	b.n	8000f48 <__aeabi_fsub+0x13c>
 8000e3c:	2601      	movs	r6, #1
 8000e3e:	4071      	eors	r1, r6
 8000e40:	1a26      	subs	r6, r4, r0
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d057      	beq.n	8000ef6 <__aeabi_fsub+0xea>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	dd43      	ble.n	8000ed2 <__aeabi_fsub+0xc6>
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_fsub+0x44>
 8000e4e:	e07f      	b.n	8000f50 <__aeabi_fsub+0x144>
 8000e50:	4649      	mov	r1, r9
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d100      	bne.n	8000e58 <__aeabi_fsub+0x4c>
 8000e56:	e0aa      	b.n	8000fae <__aeabi_fsub+0x1a2>
 8000e58:	3e01      	subs	r6, #1
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_fsub+0x54>
 8000e5e:	e0f7      	b.n	8001050 <__aeabi_fsub+0x244>
 8000e60:	1a5b      	subs	r3, r3, r1
 8000e62:	015a      	lsls	r2, r3, #5
 8000e64:	d400      	bmi.n	8000e68 <__aeabi_fsub+0x5c>
 8000e66:	e08b      	b.n	8000f80 <__aeabi_fsub+0x174>
 8000e68:	019b      	lsls	r3, r3, #6
 8000e6a:	099c      	lsrs	r4, r3, #6
 8000e6c:	0020      	movs	r0, r4
 8000e6e:	f002 f865 	bl	8002f3c <__clzsi2>
 8000e72:	3805      	subs	r0, #5
 8000e74:	4084      	lsls	r4, r0
 8000e76:	4285      	cmp	r5, r0
 8000e78:	dd00      	ble.n	8000e7c <__aeabi_fsub+0x70>
 8000e7a:	e0d3      	b.n	8001024 <__aeabi_fsub+0x218>
 8000e7c:	1b45      	subs	r5, r0, r5
 8000e7e:	0023      	movs	r3, r4
 8000e80:	2020      	movs	r0, #32
 8000e82:	3501      	adds	r5, #1
 8000e84:	40eb      	lsrs	r3, r5
 8000e86:	1b45      	subs	r5, r0, r5
 8000e88:	40ac      	lsls	r4, r5
 8000e8a:	1e62      	subs	r2, r4, #1
 8000e8c:	4194      	sbcs	r4, r2
 8000e8e:	4323      	orrs	r3, r4
 8000e90:	2407      	movs	r4, #7
 8000e92:	2500      	movs	r5, #0
 8000e94:	401c      	ands	r4, r3
 8000e96:	2201      	movs	r2, #1
 8000e98:	4641      	mov	r1, r8
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	2c00      	cmp	r4, #0
 8000e9e:	d004      	beq.n	8000eaa <__aeabi_fsub+0x9e>
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	4019      	ands	r1, r3
 8000ea4:	2904      	cmp	r1, #4
 8000ea6:	d000      	beq.n	8000eaa <__aeabi_fsub+0x9e>
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	0159      	lsls	r1, r3, #5
 8000eac:	d400      	bmi.n	8000eb0 <__aeabi_fsub+0xa4>
 8000eae:	e080      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8000eb0:	3501      	adds	r5, #1
 8000eb2:	b2ec      	uxtb	r4, r5
 8000eb4:	2dff      	cmp	r5, #255	; 0xff
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fsub+0xae>
 8000eb8:	e0a3      	b.n	8001002 <__aeabi_fsub+0x1f6>
 8000eba:	24ff      	movs	r4, #255	; 0xff
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	025b      	lsls	r3, r3, #9
 8000ec0:	05e4      	lsls	r4, r4, #23
 8000ec2:	0a58      	lsrs	r0, r3, #9
 8000ec4:	07d2      	lsls	r2, r2, #31
 8000ec6:	4320      	orrs	r0, r4
 8000ec8:	4310      	orrs	r0, r2
 8000eca:	bc0c      	pop	{r2, r3}
 8000ecc:	4690      	mov	r8, r2
 8000ece:	4699      	mov	r9, r3
 8000ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d174      	bne.n	8000fc0 <__aeabi_fsub+0x1b4>
 8000ed6:	1c60      	adds	r0, r4, #1
 8000ed8:	b2c0      	uxtb	r0, r0
 8000eda:	2801      	cmp	r0, #1
 8000edc:	dc00      	bgt.n	8000ee0 <__aeabi_fsub+0xd4>
 8000ede:	e0a7      	b.n	8001030 <__aeabi_fsub+0x224>
 8000ee0:	464a      	mov	r2, r9
 8000ee2:	1a9c      	subs	r4, r3, r2
 8000ee4:	0162      	lsls	r2, r4, #5
 8000ee6:	d500      	bpl.n	8000eea <__aeabi_fsub+0xde>
 8000ee8:	e0b6      	b.n	8001058 <__aeabi_fsub+0x24c>
 8000eea:	2c00      	cmp	r4, #0
 8000eec:	d1be      	bne.n	8000e6c <__aeabi_fsub+0x60>
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2400      	movs	r4, #0
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e7e3      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	dc00      	bgt.n	8000efc <__aeabi_fsub+0xf0>
 8000efa:	e085      	b.n	8001008 <__aeabi_fsub+0x1fc>
 8000efc:	2800      	cmp	r0, #0
 8000efe:	d046      	beq.n	8000f8e <__aeabi_fsub+0x182>
 8000f00:	2cff      	cmp	r4, #255	; 0xff
 8000f02:	d049      	beq.n	8000f98 <__aeabi_fsub+0x18c>
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	4648      	mov	r0, r9
 8000f08:	04d2      	lsls	r2, r2, #19
 8000f0a:	4310      	orrs	r0, r2
 8000f0c:	4681      	mov	r9, r0
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2e1b      	cmp	r6, #27
 8000f12:	dc09      	bgt.n	8000f28 <__aeabi_fsub+0x11c>
 8000f14:	2020      	movs	r0, #32
 8000f16:	464c      	mov	r4, r9
 8000f18:	1b80      	subs	r0, r0, r6
 8000f1a:	4084      	lsls	r4, r0
 8000f1c:	464a      	mov	r2, r9
 8000f1e:	0020      	movs	r0, r4
 8000f20:	40f2      	lsrs	r2, r6
 8000f22:	1e44      	subs	r4, r0, #1
 8000f24:	41a0      	sbcs	r0, r4
 8000f26:	4302      	orrs	r2, r0
 8000f28:	189b      	adds	r3, r3, r2
 8000f2a:	015a      	lsls	r2, r3, #5
 8000f2c:	d528      	bpl.n	8000f80 <__aeabi_fsub+0x174>
 8000f2e:	3501      	adds	r5, #1
 8000f30:	2dff      	cmp	r5, #255	; 0xff
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x12a>
 8000f34:	e0a8      	b.n	8001088 <__aeabi_fsub+0x27c>
 8000f36:	2201      	movs	r2, #1
 8000f38:	2407      	movs	r4, #7
 8000f3a:	4994      	ldr	r1, [pc, #592]	; (800118c <__aeabi_fsub+0x380>)
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	085b      	lsrs	r3, r3, #1
 8000f40:	400b      	ands	r3, r1
 8000f42:	4313      	orrs	r3, r2
 8000f44:	401c      	ands	r4, r3
 8000f46:	e7a6      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d000      	beq.n	8000f4e <__aeabi_fsub+0x142>
 8000f4c:	e778      	b.n	8000e40 <__aeabi_fsub+0x34>
 8000f4e:	e775      	b.n	8000e3c <__aeabi_fsub+0x30>
 8000f50:	2cff      	cmp	r4, #255	; 0xff
 8000f52:	d054      	beq.n	8000ffe <__aeabi_fsub+0x1f2>
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	4649      	mov	r1, r9
 8000f58:	04d2      	lsls	r2, r2, #19
 8000f5a:	4311      	orrs	r1, r2
 8000f5c:	4689      	mov	r9, r1
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2e1b      	cmp	r6, #27
 8000f62:	dc09      	bgt.n	8000f78 <__aeabi_fsub+0x16c>
 8000f64:	2120      	movs	r1, #32
 8000f66:	4648      	mov	r0, r9
 8000f68:	1b89      	subs	r1, r1, r6
 8000f6a:	4088      	lsls	r0, r1
 8000f6c:	464a      	mov	r2, r9
 8000f6e:	0001      	movs	r1, r0
 8000f70:	40f2      	lsrs	r2, r6
 8000f72:	1e48      	subs	r0, r1, #1
 8000f74:	4181      	sbcs	r1, r0
 8000f76:	430a      	orrs	r2, r1
 8000f78:	1a9b      	subs	r3, r3, r2
 8000f7a:	015a      	lsls	r2, r3, #5
 8000f7c:	d500      	bpl.n	8000f80 <__aeabi_fsub+0x174>
 8000f7e:	e773      	b.n	8000e68 <__aeabi_fsub+0x5c>
 8000f80:	2201      	movs	r2, #1
 8000f82:	4641      	mov	r1, r8
 8000f84:	400a      	ands	r2, r1
 8000f86:	0759      	lsls	r1, r3, #29
 8000f88:	d000      	beq.n	8000f8c <__aeabi_fsub+0x180>
 8000f8a:	e789      	b.n	8000ea0 <__aeabi_fsub+0x94>
 8000f8c:	e011      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8000f8e:	4648      	mov	r0, r9
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d158      	bne.n	8001046 <__aeabi_fsub+0x23a>
 8000f94:	2cff      	cmp	r4, #255	; 0xff
 8000f96:	d10c      	bne.n	8000fb2 <__aeabi_fsub+0x1a6>
 8000f98:	08db      	lsrs	r3, r3, #3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_fsub+0x194>
 8000f9e:	e78c      	b.n	8000eba <__aeabi_fsub+0xae>
 8000fa0:	2080      	movs	r0, #128	; 0x80
 8000fa2:	03c0      	lsls	r0, r0, #15
 8000fa4:	4303      	orrs	r3, r0
 8000fa6:	025b      	lsls	r3, r3, #9
 8000fa8:	0a5b      	lsrs	r3, r3, #9
 8000faa:	24ff      	movs	r4, #255	; 0xff
 8000fac:	e787      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8000fae:	2cff      	cmp	r4, #255	; 0xff
 8000fb0:	d025      	beq.n	8000ffe <__aeabi_fsub+0x1f2>
 8000fb2:	08db      	lsrs	r3, r3, #3
 8000fb4:	2dff      	cmp	r5, #255	; 0xff
 8000fb6:	d0f0      	beq.n	8000f9a <__aeabi_fsub+0x18e>
 8000fb8:	025b      	lsls	r3, r3, #9
 8000fba:	0a5b      	lsrs	r3, r3, #9
 8000fbc:	b2ec      	uxtb	r4, r5
 8000fbe:	e77e      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	d04d      	beq.n	8001060 <__aeabi_fsub+0x254>
 8000fc4:	28ff      	cmp	r0, #255	; 0xff
 8000fc6:	d018      	beq.n	8000ffa <__aeabi_fsub+0x1ee>
 8000fc8:	2480      	movs	r4, #128	; 0x80
 8000fca:	04e4      	lsls	r4, r4, #19
 8000fcc:	4272      	negs	r2, r6
 8000fce:	4323      	orrs	r3, r4
 8000fd0:	2a1b      	cmp	r2, #27
 8000fd2:	dd00      	ble.n	8000fd6 <__aeabi_fsub+0x1ca>
 8000fd4:	e0c4      	b.n	8001160 <__aeabi_fsub+0x354>
 8000fd6:	001c      	movs	r4, r3
 8000fd8:	2520      	movs	r5, #32
 8000fda:	40d4      	lsrs	r4, r2
 8000fdc:	1aaa      	subs	r2, r5, r2
 8000fde:	4093      	lsls	r3, r2
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	4193      	sbcs	r3, r2
 8000fe4:	4323      	orrs	r3, r4
 8000fe6:	464a      	mov	r2, r9
 8000fe8:	0005      	movs	r5, r0
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	4688      	mov	r8, r1
 8000fee:	e738      	b.n	8000e62 <__aeabi_fsub+0x56>
 8000ff0:	1c72      	adds	r2, r6, #1
 8000ff2:	d0f8      	beq.n	8000fe6 <__aeabi_fsub+0x1da>
 8000ff4:	43f2      	mvns	r2, r6
 8000ff6:	28ff      	cmp	r0, #255	; 0xff
 8000ff8:	d1ea      	bne.n	8000fd0 <__aeabi_fsub+0x1c4>
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	464b      	mov	r3, r9
 8000ffe:	25ff      	movs	r5, #255	; 0xff
 8001000:	e7d7      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001002:	019b      	lsls	r3, r3, #6
 8001004:	0a5b      	lsrs	r3, r3, #9
 8001006:	e75a      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8001008:	2e00      	cmp	r6, #0
 800100a:	d141      	bne.n	8001090 <__aeabi_fsub+0x284>
 800100c:	1c65      	adds	r5, r4, #1
 800100e:	b2e9      	uxtb	r1, r5
 8001010:	2901      	cmp	r1, #1
 8001012:	dd45      	ble.n	80010a0 <__aeabi_fsub+0x294>
 8001014:	2dff      	cmp	r5, #255	; 0xff
 8001016:	d100      	bne.n	800101a <__aeabi_fsub+0x20e>
 8001018:	e74f      	b.n	8000eba <__aeabi_fsub+0xae>
 800101a:	2407      	movs	r4, #7
 800101c:	444b      	add	r3, r9
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	401c      	ands	r4, r3
 8001022:	e738      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8001024:	2207      	movs	r2, #7
 8001026:	4b5a      	ldr	r3, [pc, #360]	; (8001190 <__aeabi_fsub+0x384>)
 8001028:	1a2d      	subs	r5, r5, r0
 800102a:	4023      	ands	r3, r4
 800102c:	4014      	ands	r4, r2
 800102e:	e732      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8001030:	2c00      	cmp	r4, #0
 8001032:	d11d      	bne.n	8001070 <__aeabi_fsub+0x264>
 8001034:	2b00      	cmp	r3, #0
 8001036:	d17a      	bne.n	800112e <__aeabi_fsub+0x322>
 8001038:	464b      	mov	r3, r9
 800103a:	2b00      	cmp	r3, #0
 800103c:	d100      	bne.n	8001040 <__aeabi_fsub+0x234>
 800103e:	e091      	b.n	8001164 <__aeabi_fsub+0x358>
 8001040:	000a      	movs	r2, r1
 8001042:	2500      	movs	r5, #0
 8001044:	e7b5      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001046:	3e01      	subs	r6, #1
 8001048:	2e00      	cmp	r6, #0
 800104a:	d119      	bne.n	8001080 <__aeabi_fsub+0x274>
 800104c:	444b      	add	r3, r9
 800104e:	e76c      	b.n	8000f2a <__aeabi_fsub+0x11e>
 8001050:	2cff      	cmp	r4, #255	; 0xff
 8001052:	d184      	bne.n	8000f5e <__aeabi_fsub+0x152>
 8001054:	25ff      	movs	r5, #255	; 0xff
 8001056:	e7ac      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001058:	464a      	mov	r2, r9
 800105a:	4688      	mov	r8, r1
 800105c:	1ad4      	subs	r4, r2, r3
 800105e:	e705      	b.n	8000e6c <__aeabi_fsub+0x60>
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1c5      	bne.n	8000ff0 <__aeabi_fsub+0x1e4>
 8001064:	000a      	movs	r2, r1
 8001066:	28ff      	cmp	r0, #255	; 0xff
 8001068:	d0c8      	beq.n	8000ffc <__aeabi_fsub+0x1f0>
 800106a:	0005      	movs	r5, r0
 800106c:	464b      	mov	r3, r9
 800106e:	e7a0      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001070:	2b00      	cmp	r3, #0
 8001072:	d149      	bne.n	8001108 <__aeabi_fsub+0x2fc>
 8001074:	464b      	mov	r3, r9
 8001076:	2b00      	cmp	r3, #0
 8001078:	d077      	beq.n	800116a <__aeabi_fsub+0x35e>
 800107a:	000a      	movs	r2, r1
 800107c:	25ff      	movs	r5, #255	; 0xff
 800107e:	e798      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001080:	2cff      	cmp	r4, #255	; 0xff
 8001082:	d000      	beq.n	8001086 <__aeabi_fsub+0x27a>
 8001084:	e743      	b.n	8000f0e <__aeabi_fsub+0x102>
 8001086:	e787      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001088:	000a      	movs	r2, r1
 800108a:	24ff      	movs	r4, #255	; 0xff
 800108c:	2300      	movs	r3, #0
 800108e:	e716      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8001090:	2c00      	cmp	r4, #0
 8001092:	d115      	bne.n	80010c0 <__aeabi_fsub+0x2b4>
 8001094:	2b00      	cmp	r3, #0
 8001096:	d157      	bne.n	8001148 <__aeabi_fsub+0x33c>
 8001098:	28ff      	cmp	r0, #255	; 0xff
 800109a:	d1e6      	bne.n	800106a <__aeabi_fsub+0x25e>
 800109c:	464b      	mov	r3, r9
 800109e:	e77b      	b.n	8000f98 <__aeabi_fsub+0x18c>
 80010a0:	2c00      	cmp	r4, #0
 80010a2:	d120      	bne.n	80010e6 <__aeabi_fsub+0x2da>
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d057      	beq.n	8001158 <__aeabi_fsub+0x34c>
 80010a8:	4649      	mov	r1, r9
 80010aa:	2900      	cmp	r1, #0
 80010ac:	d053      	beq.n	8001156 <__aeabi_fsub+0x34a>
 80010ae:	444b      	add	r3, r9
 80010b0:	015a      	lsls	r2, r3, #5
 80010b2:	d568      	bpl.n	8001186 <__aeabi_fsub+0x37a>
 80010b4:	2407      	movs	r4, #7
 80010b6:	4a36      	ldr	r2, [pc, #216]	; (8001190 <__aeabi_fsub+0x384>)
 80010b8:	401c      	ands	r4, r3
 80010ba:	2501      	movs	r5, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	e6ea      	b.n	8000e96 <__aeabi_fsub+0x8a>
 80010c0:	28ff      	cmp	r0, #255	; 0xff
 80010c2:	d0eb      	beq.n	800109c <__aeabi_fsub+0x290>
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	04d2      	lsls	r2, r2, #19
 80010c8:	4276      	negs	r6, r6
 80010ca:	4313      	orrs	r3, r2
 80010cc:	2e1b      	cmp	r6, #27
 80010ce:	dc53      	bgt.n	8001178 <__aeabi_fsub+0x36c>
 80010d0:	2520      	movs	r5, #32
 80010d2:	1bad      	subs	r5, r5, r6
 80010d4:	001a      	movs	r2, r3
 80010d6:	40ab      	lsls	r3, r5
 80010d8:	40f2      	lsrs	r2, r6
 80010da:	1e5c      	subs	r4, r3, #1
 80010dc:	41a3      	sbcs	r3, r4
 80010de:	4313      	orrs	r3, r2
 80010e0:	444b      	add	r3, r9
 80010e2:	0005      	movs	r5, r0
 80010e4:	e721      	b.n	8000f2a <__aeabi_fsub+0x11e>
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0d8      	beq.n	800109c <__aeabi_fsub+0x290>
 80010ea:	4649      	mov	r1, r9
 80010ec:	2900      	cmp	r1, #0
 80010ee:	d100      	bne.n	80010f2 <__aeabi_fsub+0x2e6>
 80010f0:	e752      	b.n	8000f98 <__aeabi_fsub+0x18c>
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	03c9      	lsls	r1, r1, #15
 80010f6:	420f      	tst	r7, r1
 80010f8:	d100      	bne.n	80010fc <__aeabi_fsub+0x2f0>
 80010fa:	e74d      	b.n	8000f98 <__aeabi_fsub+0x18c>
 80010fc:	4660      	mov	r0, ip
 80010fe:	4208      	tst	r0, r1
 8001100:	d000      	beq.n	8001104 <__aeabi_fsub+0x2f8>
 8001102:	e749      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001104:	464b      	mov	r3, r9
 8001106:	e747      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001108:	4648      	mov	r0, r9
 800110a:	25ff      	movs	r5, #255	; 0xff
 800110c:	2800      	cmp	r0, #0
 800110e:	d100      	bne.n	8001112 <__aeabi_fsub+0x306>
 8001110:	e74f      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	03d2      	lsls	r2, r2, #15
 8001116:	4217      	tst	r7, r2
 8001118:	d004      	beq.n	8001124 <__aeabi_fsub+0x318>
 800111a:	4660      	mov	r0, ip
 800111c:	4210      	tst	r0, r2
 800111e:	d101      	bne.n	8001124 <__aeabi_fsub+0x318>
 8001120:	464b      	mov	r3, r9
 8001122:	4688      	mov	r8, r1
 8001124:	2201      	movs	r2, #1
 8001126:	4641      	mov	r1, r8
 8001128:	25ff      	movs	r5, #255	; 0xff
 800112a:	400a      	ands	r2, r1
 800112c:	e741      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 800112e:	4648      	mov	r0, r9
 8001130:	2800      	cmp	r0, #0
 8001132:	d01f      	beq.n	8001174 <__aeabi_fsub+0x368>
 8001134:	1a1a      	subs	r2, r3, r0
 8001136:	0150      	lsls	r0, r2, #5
 8001138:	d520      	bpl.n	800117c <__aeabi_fsub+0x370>
 800113a:	464a      	mov	r2, r9
 800113c:	2407      	movs	r4, #7
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	401c      	ands	r4, r3
 8001142:	4688      	mov	r8, r1
 8001144:	2500      	movs	r5, #0
 8001146:	e6a6      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8001148:	1c74      	adds	r4, r6, #1
 800114a:	d0c9      	beq.n	80010e0 <__aeabi_fsub+0x2d4>
 800114c:	43f6      	mvns	r6, r6
 800114e:	28ff      	cmp	r0, #255	; 0xff
 8001150:	d1bc      	bne.n	80010cc <__aeabi_fsub+0x2c0>
 8001152:	464b      	mov	r3, r9
 8001154:	e720      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001156:	4699      	mov	r9, r3
 8001158:	464b      	mov	r3, r9
 800115a:	2500      	movs	r5, #0
 800115c:	08db      	lsrs	r3, r3, #3
 800115e:	e72b      	b.n	8000fb8 <__aeabi_fsub+0x1ac>
 8001160:	2301      	movs	r3, #1
 8001162:	e740      	b.n	8000fe6 <__aeabi_fsub+0x1da>
 8001164:	2200      	movs	r2, #0
 8001166:	2300      	movs	r3, #0
 8001168:	e6a9      	b.n	8000ebe <__aeabi_fsub+0xb2>
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	2200      	movs	r2, #0
 800116e:	03db      	lsls	r3, r3, #15
 8001170:	24ff      	movs	r4, #255	; 0xff
 8001172:	e6a4      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8001174:	2500      	movs	r5, #0
 8001176:	e71c      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001178:	2301      	movs	r3, #1
 800117a:	e7b1      	b.n	80010e0 <__aeabi_fsub+0x2d4>
 800117c:	2a00      	cmp	r2, #0
 800117e:	d0f1      	beq.n	8001164 <__aeabi_fsub+0x358>
 8001180:	0013      	movs	r3, r2
 8001182:	2500      	movs	r5, #0
 8001184:	e6fc      	b.n	8000f80 <__aeabi_fsub+0x174>
 8001186:	2500      	movs	r5, #0
 8001188:	e6fa      	b.n	8000f80 <__aeabi_fsub+0x174>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	7dffffff 	.word	0x7dffffff
 8001190:	fbffffff 	.word	0xfbffffff

08001194 <__aeabi_f2iz>:
 8001194:	0241      	lsls	r1, r0, #9
 8001196:	0042      	lsls	r2, r0, #1
 8001198:	0fc3      	lsrs	r3, r0, #31
 800119a:	0a49      	lsrs	r1, r1, #9
 800119c:	0e12      	lsrs	r2, r2, #24
 800119e:	2000      	movs	r0, #0
 80011a0:	2a7e      	cmp	r2, #126	; 0x7e
 80011a2:	d90d      	bls.n	80011c0 <__aeabi_f2iz+0x2c>
 80011a4:	2a9d      	cmp	r2, #157	; 0x9d
 80011a6:	d80c      	bhi.n	80011c2 <__aeabi_f2iz+0x2e>
 80011a8:	2080      	movs	r0, #128	; 0x80
 80011aa:	0400      	lsls	r0, r0, #16
 80011ac:	4301      	orrs	r1, r0
 80011ae:	2a95      	cmp	r2, #149	; 0x95
 80011b0:	dc0a      	bgt.n	80011c8 <__aeabi_f2iz+0x34>
 80011b2:	2096      	movs	r0, #150	; 0x96
 80011b4:	1a82      	subs	r2, r0, r2
 80011b6:	40d1      	lsrs	r1, r2
 80011b8:	4248      	negs	r0, r1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d100      	bne.n	80011c0 <__aeabi_f2iz+0x2c>
 80011be:	0008      	movs	r0, r1
 80011c0:	4770      	bx	lr
 80011c2:	4a03      	ldr	r2, [pc, #12]	; (80011d0 <__aeabi_f2iz+0x3c>)
 80011c4:	1898      	adds	r0, r3, r2
 80011c6:	e7fb      	b.n	80011c0 <__aeabi_f2iz+0x2c>
 80011c8:	3a96      	subs	r2, #150	; 0x96
 80011ca:	4091      	lsls	r1, r2
 80011cc:	e7f4      	b.n	80011b8 <__aeabi_f2iz+0x24>
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	7fffffff 	.word	0x7fffffff

080011d4 <__aeabi_ui2f>:
 80011d4:	b570      	push	{r4, r5, r6, lr}
 80011d6:	1e04      	subs	r4, r0, #0
 80011d8:	d034      	beq.n	8001244 <__aeabi_ui2f+0x70>
 80011da:	f001 feaf 	bl	8002f3c <__clzsi2>
 80011de:	229e      	movs	r2, #158	; 0x9e
 80011e0:	1a12      	subs	r2, r2, r0
 80011e2:	2a96      	cmp	r2, #150	; 0x96
 80011e4:	dc07      	bgt.n	80011f6 <__aeabi_ui2f+0x22>
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	2808      	cmp	r0, #8
 80011ea:	dd2e      	ble.n	800124a <__aeabi_ui2f+0x76>
 80011ec:	3808      	subs	r0, #8
 80011ee:	4084      	lsls	r4, r0
 80011f0:	0260      	lsls	r0, r4, #9
 80011f2:	0a40      	lsrs	r0, r0, #9
 80011f4:	e021      	b.n	800123a <__aeabi_ui2f+0x66>
 80011f6:	2a99      	cmp	r2, #153	; 0x99
 80011f8:	dd09      	ble.n	800120e <__aeabi_ui2f+0x3a>
 80011fa:	0003      	movs	r3, r0
 80011fc:	0021      	movs	r1, r4
 80011fe:	331b      	adds	r3, #27
 8001200:	4099      	lsls	r1, r3
 8001202:	1e4b      	subs	r3, r1, #1
 8001204:	4199      	sbcs	r1, r3
 8001206:	2305      	movs	r3, #5
 8001208:	1a1b      	subs	r3, r3, r0
 800120a:	40dc      	lsrs	r4, r3
 800120c:	430c      	orrs	r4, r1
 800120e:	2805      	cmp	r0, #5
 8001210:	dd01      	ble.n	8001216 <__aeabi_ui2f+0x42>
 8001212:	1f43      	subs	r3, r0, #5
 8001214:	409c      	lsls	r4, r3
 8001216:	0023      	movs	r3, r4
 8001218:	490d      	ldr	r1, [pc, #52]	; (8001250 <__aeabi_ui2f+0x7c>)
 800121a:	400b      	ands	r3, r1
 800121c:	0765      	lsls	r5, r4, #29
 800121e:	d009      	beq.n	8001234 <__aeabi_ui2f+0x60>
 8001220:	250f      	movs	r5, #15
 8001222:	402c      	ands	r4, r5
 8001224:	2c04      	cmp	r4, #4
 8001226:	d005      	beq.n	8001234 <__aeabi_ui2f+0x60>
 8001228:	3304      	adds	r3, #4
 800122a:	015c      	lsls	r4, r3, #5
 800122c:	d502      	bpl.n	8001234 <__aeabi_ui2f+0x60>
 800122e:	229f      	movs	r2, #159	; 0x9f
 8001230:	400b      	ands	r3, r1
 8001232:	1a12      	subs	r2, r2, r0
 8001234:	019b      	lsls	r3, r3, #6
 8001236:	0a58      	lsrs	r0, r3, #9
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	0240      	lsls	r0, r0, #9
 800123c:	05d2      	lsls	r2, r2, #23
 800123e:	0a40      	lsrs	r0, r0, #9
 8001240:	4310      	orrs	r0, r2
 8001242:	bd70      	pop	{r4, r5, r6, pc}
 8001244:	2200      	movs	r2, #0
 8001246:	2000      	movs	r0, #0
 8001248:	e7f7      	b.n	800123a <__aeabi_ui2f+0x66>
 800124a:	0260      	lsls	r0, r4, #9
 800124c:	0a40      	lsrs	r0, r0, #9
 800124e:	e7f4      	b.n	800123a <__aeabi_ui2f+0x66>
 8001250:	fbffffff 	.word	0xfbffffff

08001254 <__aeabi_dadd>:
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	464f      	mov	r7, r9
 8001258:	4646      	mov	r6, r8
 800125a:	46d6      	mov	lr, sl
 800125c:	000c      	movs	r4, r1
 800125e:	0309      	lsls	r1, r1, #12
 8001260:	b5c0      	push	{r6, r7, lr}
 8001262:	0a49      	lsrs	r1, r1, #9
 8001264:	0f47      	lsrs	r7, r0, #29
 8001266:	005e      	lsls	r6, r3, #1
 8001268:	4339      	orrs	r1, r7
 800126a:	031f      	lsls	r7, r3, #12
 800126c:	0fdb      	lsrs	r3, r3, #31
 800126e:	469c      	mov	ip, r3
 8001270:	0065      	lsls	r5, r4, #1
 8001272:	0a7b      	lsrs	r3, r7, #9
 8001274:	0f57      	lsrs	r7, r2, #29
 8001276:	431f      	orrs	r7, r3
 8001278:	0d6d      	lsrs	r5, r5, #21
 800127a:	0fe4      	lsrs	r4, r4, #31
 800127c:	0d76      	lsrs	r6, r6, #21
 800127e:	46a1      	mov	r9, r4
 8001280:	00c0      	lsls	r0, r0, #3
 8001282:	46b8      	mov	r8, r7
 8001284:	00d2      	lsls	r2, r2, #3
 8001286:	1bab      	subs	r3, r5, r6
 8001288:	4564      	cmp	r4, ip
 800128a:	d07b      	beq.n	8001384 <__aeabi_dadd+0x130>
 800128c:	2b00      	cmp	r3, #0
 800128e:	dd5f      	ble.n	8001350 <__aeabi_dadd+0xfc>
 8001290:	2e00      	cmp	r6, #0
 8001292:	d000      	beq.n	8001296 <__aeabi_dadd+0x42>
 8001294:	e0a4      	b.n	80013e0 <__aeabi_dadd+0x18c>
 8001296:	003e      	movs	r6, r7
 8001298:	4316      	orrs	r6, r2
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0x4a>
 800129c:	e112      	b.n	80014c4 <__aeabi_dadd+0x270>
 800129e:	1e5e      	subs	r6, r3, #1
 80012a0:	2e00      	cmp	r6, #0
 80012a2:	d000      	beq.n	80012a6 <__aeabi_dadd+0x52>
 80012a4:	e19e      	b.n	80015e4 <__aeabi_dadd+0x390>
 80012a6:	1a87      	subs	r7, r0, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	42b8      	cmp	r0, r7
 80012ac:	4180      	sbcs	r0, r0
 80012ae:	2501      	movs	r5, #1
 80012b0:	1ac9      	subs	r1, r1, r3
 80012b2:	4240      	negs	r0, r0
 80012b4:	1a09      	subs	r1, r1, r0
 80012b6:	020b      	lsls	r3, r1, #8
 80012b8:	d400      	bmi.n	80012bc <__aeabi_dadd+0x68>
 80012ba:	e131      	b.n	8001520 <__aeabi_dadd+0x2cc>
 80012bc:	0249      	lsls	r1, r1, #9
 80012be:	0a4e      	lsrs	r6, r1, #9
 80012c0:	2e00      	cmp	r6, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dadd+0x72>
 80012c4:	e16e      	b.n	80015a4 <__aeabi_dadd+0x350>
 80012c6:	0030      	movs	r0, r6
 80012c8:	f001 fe38 	bl	8002f3c <__clzsi2>
 80012cc:	0003      	movs	r3, r0
 80012ce:	3b08      	subs	r3, #8
 80012d0:	2b1f      	cmp	r3, #31
 80012d2:	dd00      	ble.n	80012d6 <__aeabi_dadd+0x82>
 80012d4:	e161      	b.n	800159a <__aeabi_dadd+0x346>
 80012d6:	2220      	movs	r2, #32
 80012d8:	0039      	movs	r1, r7
 80012da:	1ad2      	subs	r2, r2, r3
 80012dc:	409e      	lsls	r6, r3
 80012de:	40d1      	lsrs	r1, r2
 80012e0:	409f      	lsls	r7, r3
 80012e2:	430e      	orrs	r6, r1
 80012e4:	429d      	cmp	r5, r3
 80012e6:	dd00      	ble.n	80012ea <__aeabi_dadd+0x96>
 80012e8:	e151      	b.n	800158e <__aeabi_dadd+0x33a>
 80012ea:	1b5d      	subs	r5, r3, r5
 80012ec:	1c6b      	adds	r3, r5, #1
 80012ee:	2b1f      	cmp	r3, #31
 80012f0:	dd00      	ble.n	80012f4 <__aeabi_dadd+0xa0>
 80012f2:	e17c      	b.n	80015ee <__aeabi_dadd+0x39a>
 80012f4:	2120      	movs	r1, #32
 80012f6:	1ac9      	subs	r1, r1, r3
 80012f8:	003d      	movs	r5, r7
 80012fa:	0030      	movs	r0, r6
 80012fc:	408f      	lsls	r7, r1
 80012fe:	4088      	lsls	r0, r1
 8001300:	40dd      	lsrs	r5, r3
 8001302:	1e79      	subs	r1, r7, #1
 8001304:	418f      	sbcs	r7, r1
 8001306:	0031      	movs	r1, r6
 8001308:	2207      	movs	r2, #7
 800130a:	4328      	orrs	r0, r5
 800130c:	40d9      	lsrs	r1, r3
 800130e:	2500      	movs	r5, #0
 8001310:	4307      	orrs	r7, r0
 8001312:	403a      	ands	r2, r7
 8001314:	2a00      	cmp	r2, #0
 8001316:	d009      	beq.n	800132c <__aeabi_dadd+0xd8>
 8001318:	230f      	movs	r3, #15
 800131a:	403b      	ands	r3, r7
 800131c:	2b04      	cmp	r3, #4
 800131e:	d005      	beq.n	800132c <__aeabi_dadd+0xd8>
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	42bb      	cmp	r3, r7
 8001324:	41bf      	sbcs	r7, r7
 8001326:	427f      	negs	r7, r7
 8001328:	19c9      	adds	r1, r1, r7
 800132a:	001f      	movs	r7, r3
 800132c:	020b      	lsls	r3, r1, #8
 800132e:	d400      	bmi.n	8001332 <__aeabi_dadd+0xde>
 8001330:	e226      	b.n	8001780 <__aeabi_dadd+0x52c>
 8001332:	1c6a      	adds	r2, r5, #1
 8001334:	4bc6      	ldr	r3, [pc, #792]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001336:	0555      	lsls	r5, r2, #21
 8001338:	0d6d      	lsrs	r5, r5, #21
 800133a:	429a      	cmp	r2, r3
 800133c:	d100      	bne.n	8001340 <__aeabi_dadd+0xec>
 800133e:	e106      	b.n	800154e <__aeabi_dadd+0x2fa>
 8001340:	4ac4      	ldr	r2, [pc, #784]	; (8001654 <__aeabi_dadd+0x400>)
 8001342:	08ff      	lsrs	r7, r7, #3
 8001344:	400a      	ands	r2, r1
 8001346:	0753      	lsls	r3, r2, #29
 8001348:	0252      	lsls	r2, r2, #9
 800134a:	433b      	orrs	r3, r7
 800134c:	0b12      	lsrs	r2, r2, #12
 800134e:	e08e      	b.n	800146e <__aeabi_dadd+0x21a>
 8001350:	2b00      	cmp	r3, #0
 8001352:	d000      	beq.n	8001356 <__aeabi_dadd+0x102>
 8001354:	e0b8      	b.n	80014c8 <__aeabi_dadd+0x274>
 8001356:	1c6b      	adds	r3, r5, #1
 8001358:	055b      	lsls	r3, r3, #21
 800135a:	0d5b      	lsrs	r3, r3, #21
 800135c:	2b01      	cmp	r3, #1
 800135e:	dc00      	bgt.n	8001362 <__aeabi_dadd+0x10e>
 8001360:	e130      	b.n	80015c4 <__aeabi_dadd+0x370>
 8001362:	1a87      	subs	r7, r0, r2
 8001364:	4643      	mov	r3, r8
 8001366:	42b8      	cmp	r0, r7
 8001368:	41b6      	sbcs	r6, r6
 800136a:	1acb      	subs	r3, r1, r3
 800136c:	4276      	negs	r6, r6
 800136e:	1b9e      	subs	r6, r3, r6
 8001370:	0233      	lsls	r3, r6, #8
 8001372:	d500      	bpl.n	8001376 <__aeabi_dadd+0x122>
 8001374:	e14c      	b.n	8001610 <__aeabi_dadd+0x3bc>
 8001376:	003b      	movs	r3, r7
 8001378:	4333      	orrs	r3, r6
 800137a:	d1a1      	bne.n	80012c0 <__aeabi_dadd+0x6c>
 800137c:	2200      	movs	r2, #0
 800137e:	2400      	movs	r4, #0
 8001380:	2500      	movs	r5, #0
 8001382:	e070      	b.n	8001466 <__aeabi_dadd+0x212>
 8001384:	2b00      	cmp	r3, #0
 8001386:	dc00      	bgt.n	800138a <__aeabi_dadd+0x136>
 8001388:	e0e5      	b.n	8001556 <__aeabi_dadd+0x302>
 800138a:	2e00      	cmp	r6, #0
 800138c:	d100      	bne.n	8001390 <__aeabi_dadd+0x13c>
 800138e:	e083      	b.n	8001498 <__aeabi_dadd+0x244>
 8001390:	4eaf      	ldr	r6, [pc, #700]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001392:	42b5      	cmp	r5, r6
 8001394:	d060      	beq.n	8001458 <__aeabi_dadd+0x204>
 8001396:	2680      	movs	r6, #128	; 0x80
 8001398:	0436      	lsls	r6, r6, #16
 800139a:	4337      	orrs	r7, r6
 800139c:	46b8      	mov	r8, r7
 800139e:	2b38      	cmp	r3, #56	; 0x38
 80013a0:	dc00      	bgt.n	80013a4 <__aeabi_dadd+0x150>
 80013a2:	e13e      	b.n	8001622 <__aeabi_dadd+0x3ce>
 80013a4:	4643      	mov	r3, r8
 80013a6:	4313      	orrs	r3, r2
 80013a8:	001f      	movs	r7, r3
 80013aa:	1e7a      	subs	r2, r7, #1
 80013ac:	4197      	sbcs	r7, r2
 80013ae:	183f      	adds	r7, r7, r0
 80013b0:	4287      	cmp	r7, r0
 80013b2:	4180      	sbcs	r0, r0
 80013b4:	4240      	negs	r0, r0
 80013b6:	1809      	adds	r1, r1, r0
 80013b8:	020b      	lsls	r3, r1, #8
 80013ba:	d400      	bmi.n	80013be <__aeabi_dadd+0x16a>
 80013bc:	e0b0      	b.n	8001520 <__aeabi_dadd+0x2cc>
 80013be:	4ba4      	ldr	r3, [pc, #656]	; (8001650 <__aeabi_dadd+0x3fc>)
 80013c0:	3501      	adds	r5, #1
 80013c2:	429d      	cmp	r5, r3
 80013c4:	d100      	bne.n	80013c8 <__aeabi_dadd+0x174>
 80013c6:	e0c3      	b.n	8001550 <__aeabi_dadd+0x2fc>
 80013c8:	4aa2      	ldr	r2, [pc, #648]	; (8001654 <__aeabi_dadd+0x400>)
 80013ca:	087b      	lsrs	r3, r7, #1
 80013cc:	400a      	ands	r2, r1
 80013ce:	2101      	movs	r1, #1
 80013d0:	400f      	ands	r7, r1
 80013d2:	431f      	orrs	r7, r3
 80013d4:	0851      	lsrs	r1, r2, #1
 80013d6:	07d3      	lsls	r3, r2, #31
 80013d8:	2207      	movs	r2, #7
 80013da:	431f      	orrs	r7, r3
 80013dc:	403a      	ands	r2, r7
 80013de:	e799      	b.n	8001314 <__aeabi_dadd+0xc0>
 80013e0:	4e9b      	ldr	r6, [pc, #620]	; (8001650 <__aeabi_dadd+0x3fc>)
 80013e2:	42b5      	cmp	r5, r6
 80013e4:	d038      	beq.n	8001458 <__aeabi_dadd+0x204>
 80013e6:	2680      	movs	r6, #128	; 0x80
 80013e8:	0436      	lsls	r6, r6, #16
 80013ea:	4337      	orrs	r7, r6
 80013ec:	46b8      	mov	r8, r7
 80013ee:	2b38      	cmp	r3, #56	; 0x38
 80013f0:	dd00      	ble.n	80013f4 <__aeabi_dadd+0x1a0>
 80013f2:	e0dc      	b.n	80015ae <__aeabi_dadd+0x35a>
 80013f4:	2b1f      	cmp	r3, #31
 80013f6:	dc00      	bgt.n	80013fa <__aeabi_dadd+0x1a6>
 80013f8:	e130      	b.n	800165c <__aeabi_dadd+0x408>
 80013fa:	001e      	movs	r6, r3
 80013fc:	4647      	mov	r7, r8
 80013fe:	3e20      	subs	r6, #32
 8001400:	40f7      	lsrs	r7, r6
 8001402:	46bc      	mov	ip, r7
 8001404:	2b20      	cmp	r3, #32
 8001406:	d004      	beq.n	8001412 <__aeabi_dadd+0x1be>
 8001408:	2640      	movs	r6, #64	; 0x40
 800140a:	1af3      	subs	r3, r6, r3
 800140c:	4646      	mov	r6, r8
 800140e:	409e      	lsls	r6, r3
 8001410:	4332      	orrs	r2, r6
 8001412:	0017      	movs	r7, r2
 8001414:	4663      	mov	r3, ip
 8001416:	1e7a      	subs	r2, r7, #1
 8001418:	4197      	sbcs	r7, r2
 800141a:	431f      	orrs	r7, r3
 800141c:	e0cc      	b.n	80015b8 <__aeabi_dadd+0x364>
 800141e:	2b00      	cmp	r3, #0
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x1d0>
 8001422:	e204      	b.n	800182e <__aeabi_dadd+0x5da>
 8001424:	4643      	mov	r3, r8
 8001426:	4313      	orrs	r3, r2
 8001428:	d100      	bne.n	800142c <__aeabi_dadd+0x1d8>
 800142a:	e159      	b.n	80016e0 <__aeabi_dadd+0x48c>
 800142c:	074b      	lsls	r3, r1, #29
 800142e:	08c0      	lsrs	r0, r0, #3
 8001430:	4318      	orrs	r0, r3
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	08c9      	lsrs	r1, r1, #3
 8001436:	031b      	lsls	r3, r3, #12
 8001438:	4219      	tst	r1, r3
 800143a:	d008      	beq.n	800144e <__aeabi_dadd+0x1fa>
 800143c:	4645      	mov	r5, r8
 800143e:	08ed      	lsrs	r5, r5, #3
 8001440:	421d      	tst	r5, r3
 8001442:	d104      	bne.n	800144e <__aeabi_dadd+0x1fa>
 8001444:	4643      	mov	r3, r8
 8001446:	08d0      	lsrs	r0, r2, #3
 8001448:	0759      	lsls	r1, r3, #29
 800144a:	4308      	orrs	r0, r1
 800144c:	0029      	movs	r1, r5
 800144e:	0f42      	lsrs	r2, r0, #29
 8001450:	00c9      	lsls	r1, r1, #3
 8001452:	4d7f      	ldr	r5, [pc, #508]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001454:	4311      	orrs	r1, r2
 8001456:	00c0      	lsls	r0, r0, #3
 8001458:	074b      	lsls	r3, r1, #29
 800145a:	08ca      	lsrs	r2, r1, #3
 800145c:	497c      	ldr	r1, [pc, #496]	; (8001650 <__aeabi_dadd+0x3fc>)
 800145e:	08c0      	lsrs	r0, r0, #3
 8001460:	4303      	orrs	r3, r0
 8001462:	428d      	cmp	r5, r1
 8001464:	d068      	beq.n	8001538 <__aeabi_dadd+0x2e4>
 8001466:	0312      	lsls	r2, r2, #12
 8001468:	056d      	lsls	r5, r5, #21
 800146a:	0b12      	lsrs	r2, r2, #12
 800146c:	0d6d      	lsrs	r5, r5, #21
 800146e:	2100      	movs	r1, #0
 8001470:	0312      	lsls	r2, r2, #12
 8001472:	0018      	movs	r0, r3
 8001474:	0b13      	lsrs	r3, r2, #12
 8001476:	0d0a      	lsrs	r2, r1, #20
 8001478:	0512      	lsls	r2, r2, #20
 800147a:	431a      	orrs	r2, r3
 800147c:	4b76      	ldr	r3, [pc, #472]	; (8001658 <__aeabi_dadd+0x404>)
 800147e:	052d      	lsls	r5, r5, #20
 8001480:	4013      	ands	r3, r2
 8001482:	432b      	orrs	r3, r5
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	07e4      	lsls	r4, r4, #31
 8001488:	085b      	lsrs	r3, r3, #1
 800148a:	4323      	orrs	r3, r4
 800148c:	0019      	movs	r1, r3
 800148e:	bc1c      	pop	{r2, r3, r4}
 8001490:	4690      	mov	r8, r2
 8001492:	4699      	mov	r9, r3
 8001494:	46a2      	mov	sl, r4
 8001496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001498:	003e      	movs	r6, r7
 800149a:	4316      	orrs	r6, r2
 800149c:	d012      	beq.n	80014c4 <__aeabi_dadd+0x270>
 800149e:	1e5e      	subs	r6, r3, #1
 80014a0:	2e00      	cmp	r6, #0
 80014a2:	d000      	beq.n	80014a6 <__aeabi_dadd+0x252>
 80014a4:	e100      	b.n	80016a8 <__aeabi_dadd+0x454>
 80014a6:	1887      	adds	r7, r0, r2
 80014a8:	4287      	cmp	r7, r0
 80014aa:	4180      	sbcs	r0, r0
 80014ac:	4441      	add	r1, r8
 80014ae:	4240      	negs	r0, r0
 80014b0:	1809      	adds	r1, r1, r0
 80014b2:	2501      	movs	r5, #1
 80014b4:	020b      	lsls	r3, r1, #8
 80014b6:	d533      	bpl.n	8001520 <__aeabi_dadd+0x2cc>
 80014b8:	2502      	movs	r5, #2
 80014ba:	e785      	b.n	80013c8 <__aeabi_dadd+0x174>
 80014bc:	4664      	mov	r4, ip
 80014be:	0033      	movs	r3, r6
 80014c0:	4641      	mov	r1, r8
 80014c2:	0010      	movs	r0, r2
 80014c4:	001d      	movs	r5, r3
 80014c6:	e7c7      	b.n	8001458 <__aeabi_dadd+0x204>
 80014c8:	2d00      	cmp	r5, #0
 80014ca:	d000      	beq.n	80014ce <__aeabi_dadd+0x27a>
 80014cc:	e0da      	b.n	8001684 <__aeabi_dadd+0x430>
 80014ce:	000c      	movs	r4, r1
 80014d0:	4304      	orrs	r4, r0
 80014d2:	d0f3      	beq.n	80014bc <__aeabi_dadd+0x268>
 80014d4:	1c5c      	adds	r4, r3, #1
 80014d6:	d100      	bne.n	80014da <__aeabi_dadd+0x286>
 80014d8:	e19f      	b.n	800181a <__aeabi_dadd+0x5c6>
 80014da:	4c5d      	ldr	r4, [pc, #372]	; (8001650 <__aeabi_dadd+0x3fc>)
 80014dc:	42a6      	cmp	r6, r4
 80014de:	d100      	bne.n	80014e2 <__aeabi_dadd+0x28e>
 80014e0:	e12f      	b.n	8001742 <__aeabi_dadd+0x4ee>
 80014e2:	43db      	mvns	r3, r3
 80014e4:	2b38      	cmp	r3, #56	; 0x38
 80014e6:	dd00      	ble.n	80014ea <__aeabi_dadd+0x296>
 80014e8:	e166      	b.n	80017b8 <__aeabi_dadd+0x564>
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	dd00      	ble.n	80014f0 <__aeabi_dadd+0x29c>
 80014ee:	e183      	b.n	80017f8 <__aeabi_dadd+0x5a4>
 80014f0:	2420      	movs	r4, #32
 80014f2:	0005      	movs	r5, r0
 80014f4:	1ae4      	subs	r4, r4, r3
 80014f6:	000f      	movs	r7, r1
 80014f8:	40dd      	lsrs	r5, r3
 80014fa:	40d9      	lsrs	r1, r3
 80014fc:	40a0      	lsls	r0, r4
 80014fe:	4643      	mov	r3, r8
 8001500:	40a7      	lsls	r7, r4
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	1e44      	subs	r4, r0, #1
 8001506:	41a0      	sbcs	r0, r4
 8001508:	4698      	mov	r8, r3
 800150a:	432f      	orrs	r7, r5
 800150c:	4338      	orrs	r0, r7
 800150e:	1a17      	subs	r7, r2, r0
 8001510:	42ba      	cmp	r2, r7
 8001512:	4192      	sbcs	r2, r2
 8001514:	4643      	mov	r3, r8
 8001516:	4252      	negs	r2, r2
 8001518:	1a99      	subs	r1, r3, r2
 800151a:	4664      	mov	r4, ip
 800151c:	0035      	movs	r5, r6
 800151e:	e6ca      	b.n	80012b6 <__aeabi_dadd+0x62>
 8001520:	2207      	movs	r2, #7
 8001522:	403a      	ands	r2, r7
 8001524:	2a00      	cmp	r2, #0
 8001526:	d000      	beq.n	800152a <__aeabi_dadd+0x2d6>
 8001528:	e6f6      	b.n	8001318 <__aeabi_dadd+0xc4>
 800152a:	074b      	lsls	r3, r1, #29
 800152c:	08ca      	lsrs	r2, r1, #3
 800152e:	4948      	ldr	r1, [pc, #288]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001530:	08ff      	lsrs	r7, r7, #3
 8001532:	433b      	orrs	r3, r7
 8001534:	428d      	cmp	r5, r1
 8001536:	d196      	bne.n	8001466 <__aeabi_dadd+0x212>
 8001538:	0019      	movs	r1, r3
 800153a:	4311      	orrs	r1, r2
 800153c:	d100      	bne.n	8001540 <__aeabi_dadd+0x2ec>
 800153e:	e19e      	b.n	800187e <__aeabi_dadd+0x62a>
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	0309      	lsls	r1, r1, #12
 8001544:	430a      	orrs	r2, r1
 8001546:	0312      	lsls	r2, r2, #12
 8001548:	0b12      	lsrs	r2, r2, #12
 800154a:	4d41      	ldr	r5, [pc, #260]	; (8001650 <__aeabi_dadd+0x3fc>)
 800154c:	e78f      	b.n	800146e <__aeabi_dadd+0x21a>
 800154e:	0015      	movs	r5, r2
 8001550:	2200      	movs	r2, #0
 8001552:	2300      	movs	r3, #0
 8001554:	e78b      	b.n	800146e <__aeabi_dadd+0x21a>
 8001556:	2b00      	cmp	r3, #0
 8001558:	d000      	beq.n	800155c <__aeabi_dadd+0x308>
 800155a:	e0c7      	b.n	80016ec <__aeabi_dadd+0x498>
 800155c:	1c6b      	adds	r3, r5, #1
 800155e:	055f      	lsls	r7, r3, #21
 8001560:	0d7f      	lsrs	r7, r7, #21
 8001562:	2f01      	cmp	r7, #1
 8001564:	dc00      	bgt.n	8001568 <__aeabi_dadd+0x314>
 8001566:	e0f1      	b.n	800174c <__aeabi_dadd+0x4f8>
 8001568:	4d39      	ldr	r5, [pc, #228]	; (8001650 <__aeabi_dadd+0x3fc>)
 800156a:	42ab      	cmp	r3, r5
 800156c:	d100      	bne.n	8001570 <__aeabi_dadd+0x31c>
 800156e:	e0b9      	b.n	80016e4 <__aeabi_dadd+0x490>
 8001570:	1885      	adds	r5, r0, r2
 8001572:	000a      	movs	r2, r1
 8001574:	4285      	cmp	r5, r0
 8001576:	4189      	sbcs	r1, r1
 8001578:	4442      	add	r2, r8
 800157a:	4249      	negs	r1, r1
 800157c:	1851      	adds	r1, r2, r1
 800157e:	2207      	movs	r2, #7
 8001580:	07cf      	lsls	r7, r1, #31
 8001582:	086d      	lsrs	r5, r5, #1
 8001584:	432f      	orrs	r7, r5
 8001586:	0849      	lsrs	r1, r1, #1
 8001588:	403a      	ands	r2, r7
 800158a:	001d      	movs	r5, r3
 800158c:	e6c2      	b.n	8001314 <__aeabi_dadd+0xc0>
 800158e:	2207      	movs	r2, #7
 8001590:	4930      	ldr	r1, [pc, #192]	; (8001654 <__aeabi_dadd+0x400>)
 8001592:	1aed      	subs	r5, r5, r3
 8001594:	4031      	ands	r1, r6
 8001596:	403a      	ands	r2, r7
 8001598:	e6bc      	b.n	8001314 <__aeabi_dadd+0xc0>
 800159a:	003e      	movs	r6, r7
 800159c:	3828      	subs	r0, #40	; 0x28
 800159e:	4086      	lsls	r6, r0
 80015a0:	2700      	movs	r7, #0
 80015a2:	e69f      	b.n	80012e4 <__aeabi_dadd+0x90>
 80015a4:	0038      	movs	r0, r7
 80015a6:	f001 fcc9 	bl	8002f3c <__clzsi2>
 80015aa:	3020      	adds	r0, #32
 80015ac:	e68e      	b.n	80012cc <__aeabi_dadd+0x78>
 80015ae:	4643      	mov	r3, r8
 80015b0:	4313      	orrs	r3, r2
 80015b2:	001f      	movs	r7, r3
 80015b4:	1e7a      	subs	r2, r7, #1
 80015b6:	4197      	sbcs	r7, r2
 80015b8:	1bc7      	subs	r7, r0, r7
 80015ba:	42b8      	cmp	r0, r7
 80015bc:	4180      	sbcs	r0, r0
 80015be:	4240      	negs	r0, r0
 80015c0:	1a09      	subs	r1, r1, r0
 80015c2:	e678      	b.n	80012b6 <__aeabi_dadd+0x62>
 80015c4:	000e      	movs	r6, r1
 80015c6:	003b      	movs	r3, r7
 80015c8:	4306      	orrs	r6, r0
 80015ca:	4313      	orrs	r3, r2
 80015cc:	2d00      	cmp	r5, #0
 80015ce:	d161      	bne.n	8001694 <__aeabi_dadd+0x440>
 80015d0:	2e00      	cmp	r6, #0
 80015d2:	d000      	beq.n	80015d6 <__aeabi_dadd+0x382>
 80015d4:	e0f4      	b.n	80017c0 <__aeabi_dadd+0x56c>
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x388>
 80015da:	e11b      	b.n	8001814 <__aeabi_dadd+0x5c0>
 80015dc:	4664      	mov	r4, ip
 80015de:	0039      	movs	r1, r7
 80015e0:	0010      	movs	r0, r2
 80015e2:	e739      	b.n	8001458 <__aeabi_dadd+0x204>
 80015e4:	4f1a      	ldr	r7, [pc, #104]	; (8001650 <__aeabi_dadd+0x3fc>)
 80015e6:	42bb      	cmp	r3, r7
 80015e8:	d07a      	beq.n	80016e0 <__aeabi_dadd+0x48c>
 80015ea:	0033      	movs	r3, r6
 80015ec:	e6ff      	b.n	80013ee <__aeabi_dadd+0x19a>
 80015ee:	0030      	movs	r0, r6
 80015f0:	3d1f      	subs	r5, #31
 80015f2:	40e8      	lsrs	r0, r5
 80015f4:	2b20      	cmp	r3, #32
 80015f6:	d003      	beq.n	8001600 <__aeabi_dadd+0x3ac>
 80015f8:	2140      	movs	r1, #64	; 0x40
 80015fa:	1acb      	subs	r3, r1, r3
 80015fc:	409e      	lsls	r6, r3
 80015fe:	4337      	orrs	r7, r6
 8001600:	1e7b      	subs	r3, r7, #1
 8001602:	419f      	sbcs	r7, r3
 8001604:	2207      	movs	r2, #7
 8001606:	4307      	orrs	r7, r0
 8001608:	403a      	ands	r2, r7
 800160a:	2100      	movs	r1, #0
 800160c:	2500      	movs	r5, #0
 800160e:	e789      	b.n	8001524 <__aeabi_dadd+0x2d0>
 8001610:	1a17      	subs	r7, r2, r0
 8001612:	4643      	mov	r3, r8
 8001614:	42ba      	cmp	r2, r7
 8001616:	41b6      	sbcs	r6, r6
 8001618:	1a59      	subs	r1, r3, r1
 800161a:	4276      	negs	r6, r6
 800161c:	1b8e      	subs	r6, r1, r6
 800161e:	4664      	mov	r4, ip
 8001620:	e64e      	b.n	80012c0 <__aeabi_dadd+0x6c>
 8001622:	2b1f      	cmp	r3, #31
 8001624:	dd00      	ble.n	8001628 <__aeabi_dadd+0x3d4>
 8001626:	e0ad      	b.n	8001784 <__aeabi_dadd+0x530>
 8001628:	2620      	movs	r6, #32
 800162a:	4647      	mov	r7, r8
 800162c:	1af6      	subs	r6, r6, r3
 800162e:	40b7      	lsls	r7, r6
 8001630:	46b9      	mov	r9, r7
 8001632:	0017      	movs	r7, r2
 8001634:	46b2      	mov	sl, r6
 8001636:	40df      	lsrs	r7, r3
 8001638:	464e      	mov	r6, r9
 800163a:	433e      	orrs	r6, r7
 800163c:	0037      	movs	r7, r6
 800163e:	4656      	mov	r6, sl
 8001640:	40b2      	lsls	r2, r6
 8001642:	1e56      	subs	r6, r2, #1
 8001644:	41b2      	sbcs	r2, r6
 8001646:	4317      	orrs	r7, r2
 8001648:	4642      	mov	r2, r8
 800164a:	40da      	lsrs	r2, r3
 800164c:	1889      	adds	r1, r1, r2
 800164e:	e6ae      	b.n	80013ae <__aeabi_dadd+0x15a>
 8001650:	000007ff 	.word	0x000007ff
 8001654:	ff7fffff 	.word	0xff7fffff
 8001658:	800fffff 	.word	0x800fffff
 800165c:	2620      	movs	r6, #32
 800165e:	4647      	mov	r7, r8
 8001660:	1af6      	subs	r6, r6, r3
 8001662:	40b7      	lsls	r7, r6
 8001664:	46b9      	mov	r9, r7
 8001666:	0017      	movs	r7, r2
 8001668:	46b2      	mov	sl, r6
 800166a:	40df      	lsrs	r7, r3
 800166c:	464e      	mov	r6, r9
 800166e:	433e      	orrs	r6, r7
 8001670:	0037      	movs	r7, r6
 8001672:	4656      	mov	r6, sl
 8001674:	40b2      	lsls	r2, r6
 8001676:	1e56      	subs	r6, r2, #1
 8001678:	41b2      	sbcs	r2, r6
 800167a:	4317      	orrs	r7, r2
 800167c:	4642      	mov	r2, r8
 800167e:	40da      	lsrs	r2, r3
 8001680:	1a89      	subs	r1, r1, r2
 8001682:	e799      	b.n	80015b8 <__aeabi_dadd+0x364>
 8001684:	4c7f      	ldr	r4, [pc, #508]	; (8001884 <__aeabi_dadd+0x630>)
 8001686:	42a6      	cmp	r6, r4
 8001688:	d05b      	beq.n	8001742 <__aeabi_dadd+0x4ee>
 800168a:	2480      	movs	r4, #128	; 0x80
 800168c:	0424      	lsls	r4, r4, #16
 800168e:	425b      	negs	r3, r3
 8001690:	4321      	orrs	r1, r4
 8001692:	e727      	b.n	80014e4 <__aeabi_dadd+0x290>
 8001694:	2e00      	cmp	r6, #0
 8001696:	d10c      	bne.n	80016b2 <__aeabi_dadd+0x45e>
 8001698:	2b00      	cmp	r3, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0x44a>
 800169c:	e0cb      	b.n	8001836 <__aeabi_dadd+0x5e2>
 800169e:	4664      	mov	r4, ip
 80016a0:	0039      	movs	r1, r7
 80016a2:	0010      	movs	r0, r2
 80016a4:	4d77      	ldr	r5, [pc, #476]	; (8001884 <__aeabi_dadd+0x630>)
 80016a6:	e6d7      	b.n	8001458 <__aeabi_dadd+0x204>
 80016a8:	4f76      	ldr	r7, [pc, #472]	; (8001884 <__aeabi_dadd+0x630>)
 80016aa:	42bb      	cmp	r3, r7
 80016ac:	d018      	beq.n	80016e0 <__aeabi_dadd+0x48c>
 80016ae:	0033      	movs	r3, r6
 80016b0:	e675      	b.n	800139e <__aeabi_dadd+0x14a>
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d014      	beq.n	80016e0 <__aeabi_dadd+0x48c>
 80016b6:	074b      	lsls	r3, r1, #29
 80016b8:	08c0      	lsrs	r0, r0, #3
 80016ba:	4318      	orrs	r0, r3
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	08c9      	lsrs	r1, r1, #3
 80016c0:	031b      	lsls	r3, r3, #12
 80016c2:	4219      	tst	r1, r3
 80016c4:	d007      	beq.n	80016d6 <__aeabi_dadd+0x482>
 80016c6:	08fc      	lsrs	r4, r7, #3
 80016c8:	421c      	tst	r4, r3
 80016ca:	d104      	bne.n	80016d6 <__aeabi_dadd+0x482>
 80016cc:	0779      	lsls	r1, r7, #29
 80016ce:	08d0      	lsrs	r0, r2, #3
 80016d0:	4308      	orrs	r0, r1
 80016d2:	46e1      	mov	r9, ip
 80016d4:	0021      	movs	r1, r4
 80016d6:	464c      	mov	r4, r9
 80016d8:	0f42      	lsrs	r2, r0, #29
 80016da:	00c9      	lsls	r1, r1, #3
 80016dc:	4311      	orrs	r1, r2
 80016de:	00c0      	lsls	r0, r0, #3
 80016e0:	4d68      	ldr	r5, [pc, #416]	; (8001884 <__aeabi_dadd+0x630>)
 80016e2:	e6b9      	b.n	8001458 <__aeabi_dadd+0x204>
 80016e4:	001d      	movs	r5, r3
 80016e6:	2200      	movs	r2, #0
 80016e8:	2300      	movs	r3, #0
 80016ea:	e6c0      	b.n	800146e <__aeabi_dadd+0x21a>
 80016ec:	2d00      	cmp	r5, #0
 80016ee:	d15b      	bne.n	80017a8 <__aeabi_dadd+0x554>
 80016f0:	000d      	movs	r5, r1
 80016f2:	4305      	orrs	r5, r0
 80016f4:	d100      	bne.n	80016f8 <__aeabi_dadd+0x4a4>
 80016f6:	e6e2      	b.n	80014be <__aeabi_dadd+0x26a>
 80016f8:	1c5d      	adds	r5, r3, #1
 80016fa:	d100      	bne.n	80016fe <__aeabi_dadd+0x4aa>
 80016fc:	e0b0      	b.n	8001860 <__aeabi_dadd+0x60c>
 80016fe:	4d61      	ldr	r5, [pc, #388]	; (8001884 <__aeabi_dadd+0x630>)
 8001700:	42ae      	cmp	r6, r5
 8001702:	d01f      	beq.n	8001744 <__aeabi_dadd+0x4f0>
 8001704:	43db      	mvns	r3, r3
 8001706:	2b38      	cmp	r3, #56	; 0x38
 8001708:	dc71      	bgt.n	80017ee <__aeabi_dadd+0x59a>
 800170a:	2b1f      	cmp	r3, #31
 800170c:	dd00      	ble.n	8001710 <__aeabi_dadd+0x4bc>
 800170e:	e096      	b.n	800183e <__aeabi_dadd+0x5ea>
 8001710:	2520      	movs	r5, #32
 8001712:	000f      	movs	r7, r1
 8001714:	1aed      	subs	r5, r5, r3
 8001716:	40af      	lsls	r7, r5
 8001718:	46b9      	mov	r9, r7
 800171a:	0007      	movs	r7, r0
 800171c:	46aa      	mov	sl, r5
 800171e:	40df      	lsrs	r7, r3
 8001720:	464d      	mov	r5, r9
 8001722:	433d      	orrs	r5, r7
 8001724:	002f      	movs	r7, r5
 8001726:	4655      	mov	r5, sl
 8001728:	40a8      	lsls	r0, r5
 800172a:	40d9      	lsrs	r1, r3
 800172c:	1e45      	subs	r5, r0, #1
 800172e:	41a8      	sbcs	r0, r5
 8001730:	4488      	add	r8, r1
 8001732:	4307      	orrs	r7, r0
 8001734:	18bf      	adds	r7, r7, r2
 8001736:	4297      	cmp	r7, r2
 8001738:	4192      	sbcs	r2, r2
 800173a:	4251      	negs	r1, r2
 800173c:	4441      	add	r1, r8
 800173e:	0035      	movs	r5, r6
 8001740:	e63a      	b.n	80013b8 <__aeabi_dadd+0x164>
 8001742:	4664      	mov	r4, ip
 8001744:	0035      	movs	r5, r6
 8001746:	4641      	mov	r1, r8
 8001748:	0010      	movs	r0, r2
 800174a:	e685      	b.n	8001458 <__aeabi_dadd+0x204>
 800174c:	000b      	movs	r3, r1
 800174e:	4303      	orrs	r3, r0
 8001750:	2d00      	cmp	r5, #0
 8001752:	d000      	beq.n	8001756 <__aeabi_dadd+0x502>
 8001754:	e663      	b.n	800141e <__aeabi_dadd+0x1ca>
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f5      	beq.n	8001746 <__aeabi_dadd+0x4f2>
 800175a:	4643      	mov	r3, r8
 800175c:	4313      	orrs	r3, r2
 800175e:	d100      	bne.n	8001762 <__aeabi_dadd+0x50e>
 8001760:	e67a      	b.n	8001458 <__aeabi_dadd+0x204>
 8001762:	1887      	adds	r7, r0, r2
 8001764:	4287      	cmp	r7, r0
 8001766:	4180      	sbcs	r0, r0
 8001768:	2207      	movs	r2, #7
 800176a:	4441      	add	r1, r8
 800176c:	4240      	negs	r0, r0
 800176e:	1809      	adds	r1, r1, r0
 8001770:	403a      	ands	r2, r7
 8001772:	020b      	lsls	r3, r1, #8
 8001774:	d400      	bmi.n	8001778 <__aeabi_dadd+0x524>
 8001776:	e6d5      	b.n	8001524 <__aeabi_dadd+0x2d0>
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <__aeabi_dadd+0x634>)
 800177a:	3501      	adds	r5, #1
 800177c:	4019      	ands	r1, r3
 800177e:	e5c9      	b.n	8001314 <__aeabi_dadd+0xc0>
 8001780:	0038      	movs	r0, r7
 8001782:	e669      	b.n	8001458 <__aeabi_dadd+0x204>
 8001784:	001e      	movs	r6, r3
 8001786:	4647      	mov	r7, r8
 8001788:	3e20      	subs	r6, #32
 800178a:	40f7      	lsrs	r7, r6
 800178c:	46bc      	mov	ip, r7
 800178e:	2b20      	cmp	r3, #32
 8001790:	d004      	beq.n	800179c <__aeabi_dadd+0x548>
 8001792:	2640      	movs	r6, #64	; 0x40
 8001794:	1af3      	subs	r3, r6, r3
 8001796:	4646      	mov	r6, r8
 8001798:	409e      	lsls	r6, r3
 800179a:	4332      	orrs	r2, r6
 800179c:	0017      	movs	r7, r2
 800179e:	4663      	mov	r3, ip
 80017a0:	1e7a      	subs	r2, r7, #1
 80017a2:	4197      	sbcs	r7, r2
 80017a4:	431f      	orrs	r7, r3
 80017a6:	e602      	b.n	80013ae <__aeabi_dadd+0x15a>
 80017a8:	4d36      	ldr	r5, [pc, #216]	; (8001884 <__aeabi_dadd+0x630>)
 80017aa:	42ae      	cmp	r6, r5
 80017ac:	d0ca      	beq.n	8001744 <__aeabi_dadd+0x4f0>
 80017ae:	2580      	movs	r5, #128	; 0x80
 80017b0:	042d      	lsls	r5, r5, #16
 80017b2:	425b      	negs	r3, r3
 80017b4:	4329      	orrs	r1, r5
 80017b6:	e7a6      	b.n	8001706 <__aeabi_dadd+0x4b2>
 80017b8:	4308      	orrs	r0, r1
 80017ba:	1e41      	subs	r1, r0, #1
 80017bc:	4188      	sbcs	r0, r1
 80017be:	e6a6      	b.n	800150e <__aeabi_dadd+0x2ba>
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d100      	bne.n	80017c6 <__aeabi_dadd+0x572>
 80017c4:	e648      	b.n	8001458 <__aeabi_dadd+0x204>
 80017c6:	1a87      	subs	r7, r0, r2
 80017c8:	4643      	mov	r3, r8
 80017ca:	42b8      	cmp	r0, r7
 80017cc:	41b6      	sbcs	r6, r6
 80017ce:	1acb      	subs	r3, r1, r3
 80017d0:	4276      	negs	r6, r6
 80017d2:	1b9e      	subs	r6, r3, r6
 80017d4:	0233      	lsls	r3, r6, #8
 80017d6:	d54b      	bpl.n	8001870 <__aeabi_dadd+0x61c>
 80017d8:	1a17      	subs	r7, r2, r0
 80017da:	4643      	mov	r3, r8
 80017dc:	42ba      	cmp	r2, r7
 80017de:	4192      	sbcs	r2, r2
 80017e0:	1a59      	subs	r1, r3, r1
 80017e2:	4252      	negs	r2, r2
 80017e4:	1a89      	subs	r1, r1, r2
 80017e6:	2207      	movs	r2, #7
 80017e8:	4664      	mov	r4, ip
 80017ea:	403a      	ands	r2, r7
 80017ec:	e592      	b.n	8001314 <__aeabi_dadd+0xc0>
 80017ee:	4301      	orrs	r1, r0
 80017f0:	000f      	movs	r7, r1
 80017f2:	1e79      	subs	r1, r7, #1
 80017f4:	418f      	sbcs	r7, r1
 80017f6:	e79d      	b.n	8001734 <__aeabi_dadd+0x4e0>
 80017f8:	001c      	movs	r4, r3
 80017fa:	000f      	movs	r7, r1
 80017fc:	3c20      	subs	r4, #32
 80017fe:	40e7      	lsrs	r7, r4
 8001800:	2b20      	cmp	r3, #32
 8001802:	d003      	beq.n	800180c <__aeabi_dadd+0x5b8>
 8001804:	2440      	movs	r4, #64	; 0x40
 8001806:	1ae3      	subs	r3, r4, r3
 8001808:	4099      	lsls	r1, r3
 800180a:	4308      	orrs	r0, r1
 800180c:	1e41      	subs	r1, r0, #1
 800180e:	4188      	sbcs	r0, r1
 8001810:	4338      	orrs	r0, r7
 8001812:	e67c      	b.n	800150e <__aeabi_dadd+0x2ba>
 8001814:	2200      	movs	r2, #0
 8001816:	2400      	movs	r4, #0
 8001818:	e625      	b.n	8001466 <__aeabi_dadd+0x212>
 800181a:	1a17      	subs	r7, r2, r0
 800181c:	4643      	mov	r3, r8
 800181e:	42ba      	cmp	r2, r7
 8001820:	4192      	sbcs	r2, r2
 8001822:	1a59      	subs	r1, r3, r1
 8001824:	4252      	negs	r2, r2
 8001826:	1a89      	subs	r1, r1, r2
 8001828:	4664      	mov	r4, ip
 800182a:	0035      	movs	r5, r6
 800182c:	e543      	b.n	80012b6 <__aeabi_dadd+0x62>
 800182e:	4641      	mov	r1, r8
 8001830:	0010      	movs	r0, r2
 8001832:	4d14      	ldr	r5, [pc, #80]	; (8001884 <__aeabi_dadd+0x630>)
 8001834:	e610      	b.n	8001458 <__aeabi_dadd+0x204>
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	2400      	movs	r4, #0
 800183a:	0312      	lsls	r2, r2, #12
 800183c:	e680      	b.n	8001540 <__aeabi_dadd+0x2ec>
 800183e:	001d      	movs	r5, r3
 8001840:	000f      	movs	r7, r1
 8001842:	3d20      	subs	r5, #32
 8001844:	40ef      	lsrs	r7, r5
 8001846:	46bc      	mov	ip, r7
 8001848:	2b20      	cmp	r3, #32
 800184a:	d003      	beq.n	8001854 <__aeabi_dadd+0x600>
 800184c:	2540      	movs	r5, #64	; 0x40
 800184e:	1aeb      	subs	r3, r5, r3
 8001850:	4099      	lsls	r1, r3
 8001852:	4308      	orrs	r0, r1
 8001854:	0007      	movs	r7, r0
 8001856:	4663      	mov	r3, ip
 8001858:	1e78      	subs	r0, r7, #1
 800185a:	4187      	sbcs	r7, r0
 800185c:	431f      	orrs	r7, r3
 800185e:	e769      	b.n	8001734 <__aeabi_dadd+0x4e0>
 8001860:	1887      	adds	r7, r0, r2
 8001862:	4297      	cmp	r7, r2
 8001864:	419b      	sbcs	r3, r3
 8001866:	4441      	add	r1, r8
 8001868:	425b      	negs	r3, r3
 800186a:	18c9      	adds	r1, r1, r3
 800186c:	0035      	movs	r5, r6
 800186e:	e5a3      	b.n	80013b8 <__aeabi_dadd+0x164>
 8001870:	003b      	movs	r3, r7
 8001872:	4333      	orrs	r3, r6
 8001874:	d0ce      	beq.n	8001814 <__aeabi_dadd+0x5c0>
 8001876:	2207      	movs	r2, #7
 8001878:	0031      	movs	r1, r6
 800187a:	403a      	ands	r2, r7
 800187c:	e652      	b.n	8001524 <__aeabi_dadd+0x2d0>
 800187e:	2300      	movs	r3, #0
 8001880:	001a      	movs	r2, r3
 8001882:	e5f4      	b.n	800146e <__aeabi_dadd+0x21a>
 8001884:	000007ff 	.word	0x000007ff
 8001888:	ff7fffff 	.word	0xff7fffff

0800188c <__aeabi_ddiv>:
 800188c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188e:	4657      	mov	r7, sl
 8001890:	46de      	mov	lr, fp
 8001892:	464e      	mov	r6, r9
 8001894:	4645      	mov	r5, r8
 8001896:	b5e0      	push	{r5, r6, r7, lr}
 8001898:	4683      	mov	fp, r0
 800189a:	0007      	movs	r7, r0
 800189c:	030e      	lsls	r6, r1, #12
 800189e:	0048      	lsls	r0, r1, #1
 80018a0:	b085      	sub	sp, #20
 80018a2:	4692      	mov	sl, r2
 80018a4:	001c      	movs	r4, r3
 80018a6:	0b36      	lsrs	r6, r6, #12
 80018a8:	0d40      	lsrs	r0, r0, #21
 80018aa:	0fcd      	lsrs	r5, r1, #31
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d100      	bne.n	80018b2 <__aeabi_ddiv+0x26>
 80018b0:	e09d      	b.n	80019ee <__aeabi_ddiv+0x162>
 80018b2:	4b95      	ldr	r3, [pc, #596]	; (8001b08 <__aeabi_ddiv+0x27c>)
 80018b4:	4298      	cmp	r0, r3
 80018b6:	d039      	beq.n	800192c <__aeabi_ddiv+0xa0>
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	00f6      	lsls	r6, r6, #3
 80018bc:	041b      	lsls	r3, r3, #16
 80018be:	431e      	orrs	r6, r3
 80018c0:	4a92      	ldr	r2, [pc, #584]	; (8001b0c <__aeabi_ddiv+0x280>)
 80018c2:	0f7b      	lsrs	r3, r7, #29
 80018c4:	4333      	orrs	r3, r6
 80018c6:	4699      	mov	r9, r3
 80018c8:	4694      	mov	ip, r2
 80018ca:	0003      	movs	r3, r0
 80018cc:	4463      	add	r3, ip
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	2600      	movs	r6, #0
 80018d4:	00ff      	lsls	r7, r7, #3
 80018d6:	9302      	str	r3, [sp, #8]
 80018d8:	0323      	lsls	r3, r4, #12
 80018da:	0b1b      	lsrs	r3, r3, #12
 80018dc:	4698      	mov	r8, r3
 80018de:	0063      	lsls	r3, r4, #1
 80018e0:	0fe4      	lsrs	r4, r4, #31
 80018e2:	4652      	mov	r2, sl
 80018e4:	0d5b      	lsrs	r3, r3, #21
 80018e6:	9401      	str	r4, [sp, #4]
 80018e8:	d100      	bne.n	80018ec <__aeabi_ddiv+0x60>
 80018ea:	e0b3      	b.n	8001a54 <__aeabi_ddiv+0x1c8>
 80018ec:	4986      	ldr	r1, [pc, #536]	; (8001b08 <__aeabi_ddiv+0x27c>)
 80018ee:	428b      	cmp	r3, r1
 80018f0:	d100      	bne.n	80018f4 <__aeabi_ddiv+0x68>
 80018f2:	e09e      	b.n	8001a32 <__aeabi_ddiv+0x1a6>
 80018f4:	4642      	mov	r2, r8
 80018f6:	00d1      	lsls	r1, r2, #3
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	0412      	lsls	r2, r2, #16
 80018fc:	430a      	orrs	r2, r1
 80018fe:	4651      	mov	r1, sl
 8001900:	0f49      	lsrs	r1, r1, #29
 8001902:	4311      	orrs	r1, r2
 8001904:	468b      	mov	fp, r1
 8001906:	4981      	ldr	r1, [pc, #516]	; (8001b0c <__aeabi_ddiv+0x280>)
 8001908:	4652      	mov	r2, sl
 800190a:	468c      	mov	ip, r1
 800190c:	9900      	ldr	r1, [sp, #0]
 800190e:	4463      	add	r3, ip
 8001910:	1acb      	subs	r3, r1, r3
 8001912:	2100      	movs	r1, #0
 8001914:	00d2      	lsls	r2, r2, #3
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	002b      	movs	r3, r5
 800191a:	4063      	eors	r3, r4
 800191c:	469a      	mov	sl, r3
 800191e:	2e0f      	cmp	r6, #15
 8001920:	d900      	bls.n	8001924 <__aeabi_ddiv+0x98>
 8001922:	e105      	b.n	8001b30 <__aeabi_ddiv+0x2a4>
 8001924:	4b7a      	ldr	r3, [pc, #488]	; (8001b10 <__aeabi_ddiv+0x284>)
 8001926:	00b6      	lsls	r6, r6, #2
 8001928:	599b      	ldr	r3, [r3, r6]
 800192a:	469f      	mov	pc, r3
 800192c:	465b      	mov	r3, fp
 800192e:	4333      	orrs	r3, r6
 8001930:	4699      	mov	r9, r3
 8001932:	d000      	beq.n	8001936 <__aeabi_ddiv+0xaa>
 8001934:	e0b8      	b.n	8001aa8 <__aeabi_ddiv+0x21c>
 8001936:	2302      	movs	r3, #2
 8001938:	2608      	movs	r6, #8
 800193a:	2700      	movs	r7, #0
 800193c:	9000      	str	r0, [sp, #0]
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	e7ca      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001942:	46cb      	mov	fp, r9
 8001944:	003a      	movs	r2, r7
 8001946:	9902      	ldr	r1, [sp, #8]
 8001948:	9501      	str	r5, [sp, #4]
 800194a:	9b01      	ldr	r3, [sp, #4]
 800194c:	469a      	mov	sl, r3
 800194e:	2902      	cmp	r1, #2
 8001950:	d027      	beq.n	80019a2 <__aeabi_ddiv+0x116>
 8001952:	2903      	cmp	r1, #3
 8001954:	d100      	bne.n	8001958 <__aeabi_ddiv+0xcc>
 8001956:	e280      	b.n	8001e5a <__aeabi_ddiv+0x5ce>
 8001958:	2901      	cmp	r1, #1
 800195a:	d044      	beq.n	80019e6 <__aeabi_ddiv+0x15a>
 800195c:	496d      	ldr	r1, [pc, #436]	; (8001b14 <__aeabi_ddiv+0x288>)
 800195e:	9b00      	ldr	r3, [sp, #0]
 8001960:	468c      	mov	ip, r1
 8001962:	4463      	add	r3, ip
 8001964:	001c      	movs	r4, r3
 8001966:	2c00      	cmp	r4, #0
 8001968:	dd38      	ble.n	80019dc <__aeabi_ddiv+0x150>
 800196a:	0753      	lsls	r3, r2, #29
 800196c:	d000      	beq.n	8001970 <__aeabi_ddiv+0xe4>
 800196e:	e213      	b.n	8001d98 <__aeabi_ddiv+0x50c>
 8001970:	08d2      	lsrs	r2, r2, #3
 8001972:	465b      	mov	r3, fp
 8001974:	01db      	lsls	r3, r3, #7
 8001976:	d509      	bpl.n	800198c <__aeabi_ddiv+0x100>
 8001978:	4659      	mov	r1, fp
 800197a:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <__aeabi_ddiv+0x28c>)
 800197c:	4019      	ands	r1, r3
 800197e:	468b      	mov	fp, r1
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	00c9      	lsls	r1, r1, #3
 8001984:	468c      	mov	ip, r1
 8001986:	9b00      	ldr	r3, [sp, #0]
 8001988:	4463      	add	r3, ip
 800198a:	001c      	movs	r4, r3
 800198c:	4b63      	ldr	r3, [pc, #396]	; (8001b1c <__aeabi_ddiv+0x290>)
 800198e:	429c      	cmp	r4, r3
 8001990:	dc07      	bgt.n	80019a2 <__aeabi_ddiv+0x116>
 8001992:	465b      	mov	r3, fp
 8001994:	0564      	lsls	r4, r4, #21
 8001996:	075f      	lsls	r7, r3, #29
 8001998:	025b      	lsls	r3, r3, #9
 800199a:	4317      	orrs	r7, r2
 800199c:	0b1b      	lsrs	r3, r3, #12
 800199e:	0d62      	lsrs	r2, r4, #21
 80019a0:	e002      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 80019a2:	2300      	movs	r3, #0
 80019a4:	2700      	movs	r7, #0
 80019a6:	4a58      	ldr	r2, [pc, #352]	; (8001b08 <__aeabi_ddiv+0x27c>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	031b      	lsls	r3, r3, #12
 80019ac:	0b1c      	lsrs	r4, r3, #12
 80019ae:	0d0b      	lsrs	r3, r1, #20
 80019b0:	051b      	lsls	r3, r3, #20
 80019b2:	4323      	orrs	r3, r4
 80019b4:	0514      	lsls	r4, r2, #20
 80019b6:	4a5a      	ldr	r2, [pc, #360]	; (8001b20 <__aeabi_ddiv+0x294>)
 80019b8:	0038      	movs	r0, r7
 80019ba:	4013      	ands	r3, r2
 80019bc:	431c      	orrs	r4, r3
 80019be:	4653      	mov	r3, sl
 80019c0:	0064      	lsls	r4, r4, #1
 80019c2:	07db      	lsls	r3, r3, #31
 80019c4:	0864      	lsrs	r4, r4, #1
 80019c6:	431c      	orrs	r4, r3
 80019c8:	0021      	movs	r1, r4
 80019ca:	b005      	add	sp, #20
 80019cc:	bc3c      	pop	{r2, r3, r4, r5}
 80019ce:	4690      	mov	r8, r2
 80019d0:	4699      	mov	r9, r3
 80019d2:	46a2      	mov	sl, r4
 80019d4:	46ab      	mov	fp, r5
 80019d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d8:	2201      	movs	r2, #1
 80019da:	4252      	negs	r2, r2
 80019dc:	2301      	movs	r3, #1
 80019de:	1b1b      	subs	r3, r3, r4
 80019e0:	2b38      	cmp	r3, #56	; 0x38
 80019e2:	dc00      	bgt.n	80019e6 <__aeabi_ddiv+0x15a>
 80019e4:	e1ad      	b.n	8001d42 <__aeabi_ddiv+0x4b6>
 80019e6:	2200      	movs	r2, #0
 80019e8:	2300      	movs	r3, #0
 80019ea:	2700      	movs	r7, #0
 80019ec:	e7dc      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 80019ee:	465b      	mov	r3, fp
 80019f0:	4333      	orrs	r3, r6
 80019f2:	4699      	mov	r9, r3
 80019f4:	d05e      	beq.n	8001ab4 <__aeabi_ddiv+0x228>
 80019f6:	2e00      	cmp	r6, #0
 80019f8:	d100      	bne.n	80019fc <__aeabi_ddiv+0x170>
 80019fa:	e18a      	b.n	8001d12 <__aeabi_ddiv+0x486>
 80019fc:	0030      	movs	r0, r6
 80019fe:	f001 fa9d 	bl	8002f3c <__clzsi2>
 8001a02:	0003      	movs	r3, r0
 8001a04:	3b0b      	subs	r3, #11
 8001a06:	2b1c      	cmp	r3, #28
 8001a08:	dd00      	ble.n	8001a0c <__aeabi_ddiv+0x180>
 8001a0a:	e17b      	b.n	8001d04 <__aeabi_ddiv+0x478>
 8001a0c:	221d      	movs	r2, #29
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	465a      	mov	r2, fp
 8001a12:	0001      	movs	r1, r0
 8001a14:	40da      	lsrs	r2, r3
 8001a16:	3908      	subs	r1, #8
 8001a18:	408e      	lsls	r6, r1
 8001a1a:	0013      	movs	r3, r2
 8001a1c:	465f      	mov	r7, fp
 8001a1e:	4333      	orrs	r3, r6
 8001a20:	4699      	mov	r9, r3
 8001a22:	408f      	lsls	r7, r1
 8001a24:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <__aeabi_ddiv+0x298>)
 8001a26:	2600      	movs	r6, #0
 8001a28:	1a1b      	subs	r3, r3, r0
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	e752      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001a32:	4641      	mov	r1, r8
 8001a34:	4653      	mov	r3, sl
 8001a36:	430b      	orrs	r3, r1
 8001a38:	493b      	ldr	r1, [pc, #236]	; (8001b28 <__aeabi_ddiv+0x29c>)
 8001a3a:	469b      	mov	fp, r3
 8001a3c:	468c      	mov	ip, r1
 8001a3e:	9b00      	ldr	r3, [sp, #0]
 8001a40:	4463      	add	r3, ip
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	465b      	mov	r3, fp
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d13b      	bne.n	8001ac2 <__aeabi_ddiv+0x236>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	431e      	orrs	r6, r3
 8001a50:	2102      	movs	r1, #2
 8001a52:	e761      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001a54:	4643      	mov	r3, r8
 8001a56:	4313      	orrs	r3, r2
 8001a58:	469b      	mov	fp, r3
 8001a5a:	d037      	beq.n	8001acc <__aeabi_ddiv+0x240>
 8001a5c:	4643      	mov	r3, r8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d100      	bne.n	8001a64 <__aeabi_ddiv+0x1d8>
 8001a62:	e162      	b.n	8001d2a <__aeabi_ddiv+0x49e>
 8001a64:	4640      	mov	r0, r8
 8001a66:	f001 fa69 	bl	8002f3c <__clzsi2>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	3b0b      	subs	r3, #11
 8001a6e:	2b1c      	cmp	r3, #28
 8001a70:	dd00      	ble.n	8001a74 <__aeabi_ddiv+0x1e8>
 8001a72:	e153      	b.n	8001d1c <__aeabi_ddiv+0x490>
 8001a74:	0002      	movs	r2, r0
 8001a76:	4641      	mov	r1, r8
 8001a78:	3a08      	subs	r2, #8
 8001a7a:	4091      	lsls	r1, r2
 8001a7c:	4688      	mov	r8, r1
 8001a7e:	211d      	movs	r1, #29
 8001a80:	1acb      	subs	r3, r1, r3
 8001a82:	4651      	mov	r1, sl
 8001a84:	40d9      	lsrs	r1, r3
 8001a86:	000b      	movs	r3, r1
 8001a88:	4641      	mov	r1, r8
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	469b      	mov	fp, r3
 8001a8e:	4653      	mov	r3, sl
 8001a90:	4093      	lsls	r3, r2
 8001a92:	001a      	movs	r2, r3
 8001a94:	9b00      	ldr	r3, [sp, #0]
 8001a96:	4925      	ldr	r1, [pc, #148]	; (8001b2c <__aeabi_ddiv+0x2a0>)
 8001a98:	469c      	mov	ip, r3
 8001a9a:	4460      	add	r0, ip
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	468c      	mov	ip, r1
 8001aa0:	4463      	add	r3, ip
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	e737      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	46b1      	mov	r9, r6
 8001aac:	9000      	str	r0, [sp, #0]
 8001aae:	260c      	movs	r6, #12
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	e711      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	2604      	movs	r6, #4
 8001abc:	2700      	movs	r7, #0
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	e70a      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	46c3      	mov	fp, r8
 8001ac6:	431e      	orrs	r6, r3
 8001ac8:	2103      	movs	r1, #3
 8001aca:	e725      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001acc:	3301      	adds	r3, #1
 8001ace:	431e      	orrs	r6, r3
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	e720      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	469a      	mov	sl, r3
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	2700      	movs	r7, #0
 8001ade:	031b      	lsls	r3, r3, #12
 8001ae0:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <__aeabi_ddiv+0x27c>)
 8001ae2:	e761      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	4649      	mov	r1, r9
 8001ae8:	031b      	lsls	r3, r3, #12
 8001aea:	4219      	tst	r1, r3
 8001aec:	d100      	bne.n	8001af0 <__aeabi_ddiv+0x264>
 8001aee:	e0e2      	b.n	8001cb6 <__aeabi_ddiv+0x42a>
 8001af0:	4659      	mov	r1, fp
 8001af2:	4219      	tst	r1, r3
 8001af4:	d000      	beq.n	8001af8 <__aeabi_ddiv+0x26c>
 8001af6:	e0de      	b.n	8001cb6 <__aeabi_ddiv+0x42a>
 8001af8:	430b      	orrs	r3, r1
 8001afa:	031b      	lsls	r3, r3, #12
 8001afc:	0017      	movs	r7, r2
 8001afe:	0b1b      	lsrs	r3, r3, #12
 8001b00:	46a2      	mov	sl, r4
 8001b02:	4a01      	ldr	r2, [pc, #4]	; (8001b08 <__aeabi_ddiv+0x27c>)
 8001b04:	e750      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	000007ff 	.word	0x000007ff
 8001b0c:	fffffc01 	.word	0xfffffc01
 8001b10:	080193a4 	.word	0x080193a4
 8001b14:	000003ff 	.word	0x000003ff
 8001b18:	feffffff 	.word	0xfeffffff
 8001b1c:	000007fe 	.word	0x000007fe
 8001b20:	800fffff 	.word	0x800fffff
 8001b24:	fffffc0d 	.word	0xfffffc0d
 8001b28:	fffff801 	.word	0xfffff801
 8001b2c:	000003f3 	.word	0x000003f3
 8001b30:	45d9      	cmp	r9, fp
 8001b32:	d900      	bls.n	8001b36 <__aeabi_ddiv+0x2aa>
 8001b34:	e0cb      	b.n	8001cce <__aeabi_ddiv+0x442>
 8001b36:	d100      	bne.n	8001b3a <__aeabi_ddiv+0x2ae>
 8001b38:	e0c6      	b.n	8001cc8 <__aeabi_ddiv+0x43c>
 8001b3a:	003c      	movs	r4, r7
 8001b3c:	4648      	mov	r0, r9
 8001b3e:	2700      	movs	r7, #0
 8001b40:	9b00      	ldr	r3, [sp, #0]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	465b      	mov	r3, fp
 8001b48:	0e16      	lsrs	r6, r2, #24
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	431e      	orrs	r6, r3
 8001b4e:	0213      	lsls	r3, r2, #8
 8001b50:	4698      	mov	r8, r3
 8001b52:	0433      	lsls	r3, r6, #16
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	4699      	mov	r9, r3
 8001b58:	0c31      	lsrs	r1, r6, #16
 8001b5a:	9101      	str	r1, [sp, #4]
 8001b5c:	f7fe fb7e 	bl	800025c <__aeabi_uidivmod>
 8001b60:	464a      	mov	r2, r9
 8001b62:	4342      	muls	r2, r0
 8001b64:	040b      	lsls	r3, r1, #16
 8001b66:	0c21      	lsrs	r1, r4, #16
 8001b68:	0005      	movs	r5, r0
 8001b6a:	4319      	orrs	r1, r3
 8001b6c:	428a      	cmp	r2, r1
 8001b6e:	d907      	bls.n	8001b80 <__aeabi_ddiv+0x2f4>
 8001b70:	1989      	adds	r1, r1, r6
 8001b72:	3d01      	subs	r5, #1
 8001b74:	428e      	cmp	r6, r1
 8001b76:	d803      	bhi.n	8001b80 <__aeabi_ddiv+0x2f4>
 8001b78:	428a      	cmp	r2, r1
 8001b7a:	d901      	bls.n	8001b80 <__aeabi_ddiv+0x2f4>
 8001b7c:	1e85      	subs	r5, r0, #2
 8001b7e:	1989      	adds	r1, r1, r6
 8001b80:	1a88      	subs	r0, r1, r2
 8001b82:	9901      	ldr	r1, [sp, #4]
 8001b84:	f7fe fb6a 	bl	800025c <__aeabi_uidivmod>
 8001b88:	0409      	lsls	r1, r1, #16
 8001b8a:	468c      	mov	ip, r1
 8001b8c:	464a      	mov	r2, r9
 8001b8e:	0421      	lsls	r1, r4, #16
 8001b90:	4664      	mov	r4, ip
 8001b92:	4342      	muls	r2, r0
 8001b94:	0c09      	lsrs	r1, r1, #16
 8001b96:	0003      	movs	r3, r0
 8001b98:	4321      	orrs	r1, r4
 8001b9a:	428a      	cmp	r2, r1
 8001b9c:	d904      	bls.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001b9e:	1989      	adds	r1, r1, r6
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	428e      	cmp	r6, r1
 8001ba4:	d800      	bhi.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001ba6:	e0f1      	b.n	8001d8c <__aeabi_ddiv+0x500>
 8001ba8:	042d      	lsls	r5, r5, #16
 8001baa:	431d      	orrs	r5, r3
 8001bac:	46ab      	mov	fp, r5
 8001bae:	4643      	mov	r3, r8
 8001bb0:	1a89      	subs	r1, r1, r2
 8001bb2:	4642      	mov	r2, r8
 8001bb4:	0c28      	lsrs	r0, r5, #16
 8001bb6:	0412      	lsls	r2, r2, #16
 8001bb8:	0c1d      	lsrs	r5, r3, #16
 8001bba:	465b      	mov	r3, fp
 8001bbc:	0c14      	lsrs	r4, r2, #16
 8001bbe:	0022      	movs	r2, r4
 8001bc0:	041b      	lsls	r3, r3, #16
 8001bc2:	0c1b      	lsrs	r3, r3, #16
 8001bc4:	435a      	muls	r2, r3
 8001bc6:	9403      	str	r4, [sp, #12]
 8001bc8:	436b      	muls	r3, r5
 8001bca:	4344      	muls	r4, r0
 8001bcc:	9502      	str	r5, [sp, #8]
 8001bce:	4368      	muls	r0, r5
 8001bd0:	191b      	adds	r3, r3, r4
 8001bd2:	0c15      	lsrs	r5, r2, #16
 8001bd4:	18eb      	adds	r3, r5, r3
 8001bd6:	429c      	cmp	r4, r3
 8001bd8:	d903      	bls.n	8001be2 <__aeabi_ddiv+0x356>
 8001bda:	2480      	movs	r4, #128	; 0x80
 8001bdc:	0264      	lsls	r4, r4, #9
 8001bde:	46a4      	mov	ip, r4
 8001be0:	4460      	add	r0, ip
 8001be2:	0c1c      	lsrs	r4, r3, #16
 8001be4:	0415      	lsls	r5, r2, #16
 8001be6:	041b      	lsls	r3, r3, #16
 8001be8:	0c2d      	lsrs	r5, r5, #16
 8001bea:	1820      	adds	r0, r4, r0
 8001bec:	195d      	adds	r5, r3, r5
 8001bee:	4281      	cmp	r1, r0
 8001bf0:	d377      	bcc.n	8001ce2 <__aeabi_ddiv+0x456>
 8001bf2:	d073      	beq.n	8001cdc <__aeabi_ddiv+0x450>
 8001bf4:	1a0c      	subs	r4, r1, r0
 8001bf6:	4aa2      	ldr	r2, [pc, #648]	; (8001e80 <__aeabi_ddiv+0x5f4>)
 8001bf8:	1b7d      	subs	r5, r7, r5
 8001bfa:	42af      	cmp	r7, r5
 8001bfc:	41bf      	sbcs	r7, r7
 8001bfe:	4694      	mov	ip, r2
 8001c00:	9b00      	ldr	r3, [sp, #0]
 8001c02:	427f      	negs	r7, r7
 8001c04:	4463      	add	r3, ip
 8001c06:	1be0      	subs	r0, r4, r7
 8001c08:	001c      	movs	r4, r3
 8001c0a:	4286      	cmp	r6, r0
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_ddiv+0x384>
 8001c0e:	e0db      	b.n	8001dc8 <__aeabi_ddiv+0x53c>
 8001c10:	9901      	ldr	r1, [sp, #4]
 8001c12:	f7fe fb23 	bl	800025c <__aeabi_uidivmod>
 8001c16:	464a      	mov	r2, r9
 8001c18:	4342      	muls	r2, r0
 8001c1a:	040b      	lsls	r3, r1, #16
 8001c1c:	0c29      	lsrs	r1, r5, #16
 8001c1e:	0007      	movs	r7, r0
 8001c20:	4319      	orrs	r1, r3
 8001c22:	428a      	cmp	r2, r1
 8001c24:	d907      	bls.n	8001c36 <__aeabi_ddiv+0x3aa>
 8001c26:	1989      	adds	r1, r1, r6
 8001c28:	3f01      	subs	r7, #1
 8001c2a:	428e      	cmp	r6, r1
 8001c2c:	d803      	bhi.n	8001c36 <__aeabi_ddiv+0x3aa>
 8001c2e:	428a      	cmp	r2, r1
 8001c30:	d901      	bls.n	8001c36 <__aeabi_ddiv+0x3aa>
 8001c32:	1e87      	subs	r7, r0, #2
 8001c34:	1989      	adds	r1, r1, r6
 8001c36:	1a88      	subs	r0, r1, r2
 8001c38:	9901      	ldr	r1, [sp, #4]
 8001c3a:	f7fe fb0f 	bl	800025c <__aeabi_uidivmod>
 8001c3e:	0409      	lsls	r1, r1, #16
 8001c40:	464a      	mov	r2, r9
 8001c42:	4689      	mov	r9, r1
 8001c44:	0429      	lsls	r1, r5, #16
 8001c46:	464d      	mov	r5, r9
 8001c48:	4342      	muls	r2, r0
 8001c4a:	0c09      	lsrs	r1, r1, #16
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	4329      	orrs	r1, r5
 8001c50:	428a      	cmp	r2, r1
 8001c52:	d907      	bls.n	8001c64 <__aeabi_ddiv+0x3d8>
 8001c54:	1989      	adds	r1, r1, r6
 8001c56:	3b01      	subs	r3, #1
 8001c58:	428e      	cmp	r6, r1
 8001c5a:	d803      	bhi.n	8001c64 <__aeabi_ddiv+0x3d8>
 8001c5c:	428a      	cmp	r2, r1
 8001c5e:	d901      	bls.n	8001c64 <__aeabi_ddiv+0x3d8>
 8001c60:	1e83      	subs	r3, r0, #2
 8001c62:	1989      	adds	r1, r1, r6
 8001c64:	043f      	lsls	r7, r7, #16
 8001c66:	1a89      	subs	r1, r1, r2
 8001c68:	003a      	movs	r2, r7
 8001c6a:	9f03      	ldr	r7, [sp, #12]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	0038      	movs	r0, r7
 8001c70:	0413      	lsls	r3, r2, #16
 8001c72:	0c1b      	lsrs	r3, r3, #16
 8001c74:	4358      	muls	r0, r3
 8001c76:	4681      	mov	r9, r0
 8001c78:	9802      	ldr	r0, [sp, #8]
 8001c7a:	0c15      	lsrs	r5, r2, #16
 8001c7c:	436f      	muls	r7, r5
 8001c7e:	4343      	muls	r3, r0
 8001c80:	4345      	muls	r5, r0
 8001c82:	4648      	mov	r0, r9
 8001c84:	0c00      	lsrs	r0, r0, #16
 8001c86:	4684      	mov	ip, r0
 8001c88:	19db      	adds	r3, r3, r7
 8001c8a:	4463      	add	r3, ip
 8001c8c:	429f      	cmp	r7, r3
 8001c8e:	d903      	bls.n	8001c98 <__aeabi_ddiv+0x40c>
 8001c90:	2080      	movs	r0, #128	; 0x80
 8001c92:	0240      	lsls	r0, r0, #9
 8001c94:	4684      	mov	ip, r0
 8001c96:	4465      	add	r5, ip
 8001c98:	4648      	mov	r0, r9
 8001c9a:	0c1f      	lsrs	r7, r3, #16
 8001c9c:	0400      	lsls	r0, r0, #16
 8001c9e:	041b      	lsls	r3, r3, #16
 8001ca0:	0c00      	lsrs	r0, r0, #16
 8001ca2:	197d      	adds	r5, r7, r5
 8001ca4:	1818      	adds	r0, r3, r0
 8001ca6:	42a9      	cmp	r1, r5
 8001ca8:	d200      	bcs.n	8001cac <__aeabi_ddiv+0x420>
 8001caa:	e084      	b.n	8001db6 <__aeabi_ddiv+0x52a>
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_ddiv+0x424>
 8001cae:	e07f      	b.n	8001db0 <__aeabi_ddiv+0x524>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	e657      	b.n	8001966 <__aeabi_ddiv+0xda>
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	464a      	mov	r2, r9
 8001cba:	031b      	lsls	r3, r3, #12
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	031b      	lsls	r3, r3, #12
 8001cc0:	0b1b      	lsrs	r3, r3, #12
 8001cc2:	46aa      	mov	sl, r5
 8001cc4:	4a6f      	ldr	r2, [pc, #444]	; (8001e84 <__aeabi_ddiv+0x5f8>)
 8001cc6:	e66f      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001cc8:	42ba      	cmp	r2, r7
 8001cca:	d900      	bls.n	8001cce <__aeabi_ddiv+0x442>
 8001ccc:	e735      	b.n	8001b3a <__aeabi_ddiv+0x2ae>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	07dc      	lsls	r4, r3, #31
 8001cd2:	0858      	lsrs	r0, r3, #1
 8001cd4:	087b      	lsrs	r3, r7, #1
 8001cd6:	431c      	orrs	r4, r3
 8001cd8:	07ff      	lsls	r7, r7, #31
 8001cda:	e734      	b.n	8001b46 <__aeabi_ddiv+0x2ba>
 8001cdc:	2400      	movs	r4, #0
 8001cde:	42af      	cmp	r7, r5
 8001ce0:	d289      	bcs.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001ce2:	4447      	add	r7, r8
 8001ce4:	4547      	cmp	r7, r8
 8001ce6:	41a4      	sbcs	r4, r4
 8001ce8:	465b      	mov	r3, fp
 8001cea:	4264      	negs	r4, r4
 8001cec:	19a4      	adds	r4, r4, r6
 8001cee:	1864      	adds	r4, r4, r1
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	42a6      	cmp	r6, r4
 8001cf4:	d21e      	bcs.n	8001d34 <__aeabi_ddiv+0x4a8>
 8001cf6:	42a0      	cmp	r0, r4
 8001cf8:	d86d      	bhi.n	8001dd6 <__aeabi_ddiv+0x54a>
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_ddiv+0x472>
 8001cfc:	e0b6      	b.n	8001e6c <__aeabi_ddiv+0x5e0>
 8001cfe:	1a24      	subs	r4, r4, r0
 8001d00:	469b      	mov	fp, r3
 8001d02:	e778      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001d04:	0003      	movs	r3, r0
 8001d06:	465a      	mov	r2, fp
 8001d08:	3b28      	subs	r3, #40	; 0x28
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	2700      	movs	r7, #0
 8001d0e:	4691      	mov	r9, r2
 8001d10:	e688      	b.n	8001a24 <__aeabi_ddiv+0x198>
 8001d12:	4658      	mov	r0, fp
 8001d14:	f001 f912 	bl	8002f3c <__clzsi2>
 8001d18:	3020      	adds	r0, #32
 8001d1a:	e672      	b.n	8001a02 <__aeabi_ddiv+0x176>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	4652      	mov	r2, sl
 8001d20:	3b28      	subs	r3, #40	; 0x28
 8001d22:	409a      	lsls	r2, r3
 8001d24:	4693      	mov	fp, r2
 8001d26:	2200      	movs	r2, #0
 8001d28:	e6b4      	b.n	8001a94 <__aeabi_ddiv+0x208>
 8001d2a:	4650      	mov	r0, sl
 8001d2c:	f001 f906 	bl	8002f3c <__clzsi2>
 8001d30:	3020      	adds	r0, #32
 8001d32:	e69a      	b.n	8001a6a <__aeabi_ddiv+0x1de>
 8001d34:	42a6      	cmp	r6, r4
 8001d36:	d1e2      	bne.n	8001cfe <__aeabi_ddiv+0x472>
 8001d38:	45b8      	cmp	r8, r7
 8001d3a:	d9dc      	bls.n	8001cf6 <__aeabi_ddiv+0x46a>
 8001d3c:	1a34      	subs	r4, r6, r0
 8001d3e:	469b      	mov	fp, r3
 8001d40:	e759      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001d42:	2b1f      	cmp	r3, #31
 8001d44:	dc65      	bgt.n	8001e12 <__aeabi_ddiv+0x586>
 8001d46:	4c50      	ldr	r4, [pc, #320]	; (8001e88 <__aeabi_ddiv+0x5fc>)
 8001d48:	9900      	ldr	r1, [sp, #0]
 8001d4a:	46a4      	mov	ip, r4
 8001d4c:	465c      	mov	r4, fp
 8001d4e:	4461      	add	r1, ip
 8001d50:	0008      	movs	r0, r1
 8001d52:	408c      	lsls	r4, r1
 8001d54:	0011      	movs	r1, r2
 8001d56:	4082      	lsls	r2, r0
 8001d58:	40d9      	lsrs	r1, r3
 8001d5a:	1e50      	subs	r0, r2, #1
 8001d5c:	4182      	sbcs	r2, r0
 8001d5e:	430c      	orrs	r4, r1
 8001d60:	4314      	orrs	r4, r2
 8001d62:	465a      	mov	r2, fp
 8001d64:	40da      	lsrs	r2, r3
 8001d66:	0013      	movs	r3, r2
 8001d68:	0762      	lsls	r2, r4, #29
 8001d6a:	d009      	beq.n	8001d80 <__aeabi_ddiv+0x4f4>
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	4022      	ands	r2, r4
 8001d70:	2a04      	cmp	r2, #4
 8001d72:	d005      	beq.n	8001d80 <__aeabi_ddiv+0x4f4>
 8001d74:	0022      	movs	r2, r4
 8001d76:	1d14      	adds	r4, r2, #4
 8001d78:	4294      	cmp	r4, r2
 8001d7a:	4189      	sbcs	r1, r1
 8001d7c:	4249      	negs	r1, r1
 8001d7e:	185b      	adds	r3, r3, r1
 8001d80:	021a      	lsls	r2, r3, #8
 8001d82:	d562      	bpl.n	8001e4a <__aeabi_ddiv+0x5be>
 8001d84:	2201      	movs	r2, #1
 8001d86:	2300      	movs	r3, #0
 8001d88:	2700      	movs	r7, #0
 8001d8a:	e60d      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001d8c:	428a      	cmp	r2, r1
 8001d8e:	d800      	bhi.n	8001d92 <__aeabi_ddiv+0x506>
 8001d90:	e70a      	b.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001d92:	1e83      	subs	r3, r0, #2
 8001d94:	1989      	adds	r1, r1, r6
 8001d96:	e707      	b.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001d98:	230f      	movs	r3, #15
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0x516>
 8001da0:	e5e6      	b.n	8001970 <__aeabi_ddiv+0xe4>
 8001da2:	1d17      	adds	r7, r2, #4
 8001da4:	4297      	cmp	r7, r2
 8001da6:	4192      	sbcs	r2, r2
 8001da8:	4253      	negs	r3, r2
 8001daa:	449b      	add	fp, r3
 8001dac:	08fa      	lsrs	r2, r7, #3
 8001dae:	e5e0      	b.n	8001972 <__aeabi_ddiv+0xe6>
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d100      	bne.n	8001db6 <__aeabi_ddiv+0x52a>
 8001db4:	e5d7      	b.n	8001966 <__aeabi_ddiv+0xda>
 8001db6:	1871      	adds	r1, r6, r1
 8001db8:	1e53      	subs	r3, r2, #1
 8001dba:	42b1      	cmp	r1, r6
 8001dbc:	d327      	bcc.n	8001e0e <__aeabi_ddiv+0x582>
 8001dbe:	42a9      	cmp	r1, r5
 8001dc0:	d315      	bcc.n	8001dee <__aeabi_ddiv+0x562>
 8001dc2:	d058      	beq.n	8001e76 <__aeabi_ddiv+0x5ea>
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	e773      	b.n	8001cb0 <__aeabi_ddiv+0x424>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dc00      	bgt.n	8001dce <__aeabi_ddiv+0x542>
 8001dcc:	e604      	b.n	80019d8 <__aeabi_ddiv+0x14c>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	449b      	add	fp, r3
 8001dd4:	e5cd      	b.n	8001972 <__aeabi_ddiv+0xe6>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	4447      	add	r7, r8
 8001dda:	4547      	cmp	r7, r8
 8001ddc:	4189      	sbcs	r1, r1
 8001dde:	425b      	negs	r3, r3
 8001de0:	469c      	mov	ip, r3
 8001de2:	4249      	negs	r1, r1
 8001de4:	1989      	adds	r1, r1, r6
 8001de6:	190c      	adds	r4, r1, r4
 8001de8:	44e3      	add	fp, ip
 8001dea:	1a24      	subs	r4, r4, r0
 8001dec:	e703      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001dee:	4643      	mov	r3, r8
 8001df0:	005f      	lsls	r7, r3, #1
 8001df2:	4547      	cmp	r7, r8
 8001df4:	419b      	sbcs	r3, r3
 8001df6:	46b8      	mov	r8, r7
 8001df8:	425b      	negs	r3, r3
 8001dfa:	199e      	adds	r6, r3, r6
 8001dfc:	3a02      	subs	r2, #2
 8001dfe:	1989      	adds	r1, r1, r6
 8001e00:	42a9      	cmp	r1, r5
 8001e02:	d000      	beq.n	8001e06 <__aeabi_ddiv+0x57a>
 8001e04:	e754      	b.n	8001cb0 <__aeabi_ddiv+0x424>
 8001e06:	4540      	cmp	r0, r8
 8001e08:	d000      	beq.n	8001e0c <__aeabi_ddiv+0x580>
 8001e0a:	e751      	b.n	8001cb0 <__aeabi_ddiv+0x424>
 8001e0c:	e5ab      	b.n	8001966 <__aeabi_ddiv+0xda>
 8001e0e:	001a      	movs	r2, r3
 8001e10:	e7f6      	b.n	8001e00 <__aeabi_ddiv+0x574>
 8001e12:	211f      	movs	r1, #31
 8001e14:	465f      	mov	r7, fp
 8001e16:	4249      	negs	r1, r1
 8001e18:	1b0c      	subs	r4, r1, r4
 8001e1a:	40e7      	lsrs	r7, r4
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d007      	beq.n	8001e30 <__aeabi_ddiv+0x5a4>
 8001e20:	491a      	ldr	r1, [pc, #104]	; (8001e8c <__aeabi_ddiv+0x600>)
 8001e22:	9b00      	ldr	r3, [sp, #0]
 8001e24:	468c      	mov	ip, r1
 8001e26:	4463      	add	r3, ip
 8001e28:	0018      	movs	r0, r3
 8001e2a:	465b      	mov	r3, fp
 8001e2c:	4083      	lsls	r3, r0
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	1e50      	subs	r0, r2, #1
 8001e32:	4182      	sbcs	r2, r0
 8001e34:	433a      	orrs	r2, r7
 8001e36:	2707      	movs	r7, #7
 8001e38:	2300      	movs	r3, #0
 8001e3a:	4017      	ands	r7, r2
 8001e3c:	d009      	beq.n	8001e52 <__aeabi_ddiv+0x5c6>
 8001e3e:	210f      	movs	r1, #15
 8001e40:	2300      	movs	r3, #0
 8001e42:	4011      	ands	r1, r2
 8001e44:	0014      	movs	r4, r2
 8001e46:	2904      	cmp	r1, #4
 8001e48:	d195      	bne.n	8001d76 <__aeabi_ddiv+0x4ea>
 8001e4a:	0022      	movs	r2, r4
 8001e4c:	075f      	lsls	r7, r3, #29
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	0b1b      	lsrs	r3, r3, #12
 8001e52:	08d2      	lsrs	r2, r2, #3
 8001e54:	4317      	orrs	r7, r2
 8001e56:	2200      	movs	r2, #0
 8001e58:	e5a6      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	4659      	mov	r1, fp
 8001e5e:	031b      	lsls	r3, r3, #12
 8001e60:	430b      	orrs	r3, r1
 8001e62:	031b      	lsls	r3, r3, #12
 8001e64:	0017      	movs	r7, r2
 8001e66:	0b1b      	lsrs	r3, r3, #12
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <__aeabi_ddiv+0x5f8>)
 8001e6a:	e59d      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001e6c:	42bd      	cmp	r5, r7
 8001e6e:	d8b2      	bhi.n	8001dd6 <__aeabi_ddiv+0x54a>
 8001e70:	469b      	mov	fp, r3
 8001e72:	2400      	movs	r4, #0
 8001e74:	e6bf      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001e76:	4580      	cmp	r8, r0
 8001e78:	d3b9      	bcc.n	8001dee <__aeabi_ddiv+0x562>
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	e7c3      	b.n	8001e06 <__aeabi_ddiv+0x57a>
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	000003ff 	.word	0x000003ff
 8001e84:	000007ff 	.word	0x000007ff
 8001e88:	0000041e 	.word	0x0000041e
 8001e8c:	0000043e 	.word	0x0000043e

08001e90 <__eqdf2>:
 8001e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e92:	464f      	mov	r7, r9
 8001e94:	4646      	mov	r6, r8
 8001e96:	46d6      	mov	lr, sl
 8001e98:	4684      	mov	ip, r0
 8001e9a:	b5c0      	push	{r6, r7, lr}
 8001e9c:	4680      	mov	r8, r0
 8001e9e:	4e19      	ldr	r6, [pc, #100]	; (8001f04 <__eqdf2+0x74>)
 8001ea0:	0318      	lsls	r0, r3, #12
 8001ea2:	030f      	lsls	r7, r1, #12
 8001ea4:	004d      	lsls	r5, r1, #1
 8001ea6:	0b00      	lsrs	r0, r0, #12
 8001ea8:	005c      	lsls	r4, r3, #1
 8001eaa:	4682      	mov	sl, r0
 8001eac:	0b3f      	lsrs	r7, r7, #12
 8001eae:	0d6d      	lsrs	r5, r5, #21
 8001eb0:	0fc9      	lsrs	r1, r1, #31
 8001eb2:	4691      	mov	r9, r2
 8001eb4:	0d64      	lsrs	r4, r4, #21
 8001eb6:	0fdb      	lsrs	r3, r3, #31
 8001eb8:	2001      	movs	r0, #1
 8001eba:	42b5      	cmp	r5, r6
 8001ebc:	d00a      	beq.n	8001ed4 <__eqdf2+0x44>
 8001ebe:	42b4      	cmp	r4, r6
 8001ec0:	d003      	beq.n	8001eca <__eqdf2+0x3a>
 8001ec2:	42a5      	cmp	r5, r4
 8001ec4:	d101      	bne.n	8001eca <__eqdf2+0x3a>
 8001ec6:	4557      	cmp	r7, sl
 8001ec8:	d00c      	beq.n	8001ee4 <__eqdf2+0x54>
 8001eca:	bc1c      	pop	{r2, r3, r4}
 8001ecc:	4690      	mov	r8, r2
 8001ece:	4699      	mov	r9, r3
 8001ed0:	46a2      	mov	sl, r4
 8001ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed4:	4666      	mov	r6, ip
 8001ed6:	433e      	orrs	r6, r7
 8001ed8:	d1f7      	bne.n	8001eca <__eqdf2+0x3a>
 8001eda:	42ac      	cmp	r4, r5
 8001edc:	d1f5      	bne.n	8001eca <__eqdf2+0x3a>
 8001ede:	4654      	mov	r4, sl
 8001ee0:	4314      	orrs	r4, r2
 8001ee2:	d1f2      	bne.n	8001eca <__eqdf2+0x3a>
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	45c8      	cmp	r8, r9
 8001ee8:	d1ef      	bne.n	8001eca <__eqdf2+0x3a>
 8001eea:	4299      	cmp	r1, r3
 8001eec:	d007      	beq.n	8001efe <__eqdf2+0x6e>
 8001eee:	2d00      	cmp	r5, #0
 8001ef0:	d1eb      	bne.n	8001eca <__eqdf2+0x3a>
 8001ef2:	4663      	mov	r3, ip
 8001ef4:	431f      	orrs	r7, r3
 8001ef6:	0038      	movs	r0, r7
 8001ef8:	1e47      	subs	r7, r0, #1
 8001efa:	41b8      	sbcs	r0, r7
 8001efc:	e7e5      	b.n	8001eca <__eqdf2+0x3a>
 8001efe:	2000      	movs	r0, #0
 8001f00:	e7e3      	b.n	8001eca <__eqdf2+0x3a>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	000007ff 	.word	0x000007ff

08001f08 <__gedf2>:
 8001f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0a:	464f      	mov	r7, r9
 8001f0c:	4646      	mov	r6, r8
 8001f0e:	46d6      	mov	lr, sl
 8001f10:	004d      	lsls	r5, r1, #1
 8001f12:	b5c0      	push	{r6, r7, lr}
 8001f14:	030e      	lsls	r6, r1, #12
 8001f16:	0fc9      	lsrs	r1, r1, #31
 8001f18:	468a      	mov	sl, r1
 8001f1a:	492c      	ldr	r1, [pc, #176]	; (8001fcc <__gedf2+0xc4>)
 8001f1c:	031f      	lsls	r7, r3, #12
 8001f1e:	005c      	lsls	r4, r3, #1
 8001f20:	4680      	mov	r8, r0
 8001f22:	0b36      	lsrs	r6, r6, #12
 8001f24:	0d6d      	lsrs	r5, r5, #21
 8001f26:	4691      	mov	r9, r2
 8001f28:	0b3f      	lsrs	r7, r7, #12
 8001f2a:	0d64      	lsrs	r4, r4, #21
 8001f2c:	0fdb      	lsrs	r3, r3, #31
 8001f2e:	428d      	cmp	r5, r1
 8001f30:	d01e      	beq.n	8001f70 <__gedf2+0x68>
 8001f32:	428c      	cmp	r4, r1
 8001f34:	d016      	beq.n	8001f64 <__gedf2+0x5c>
 8001f36:	2d00      	cmp	r5, #0
 8001f38:	d11e      	bne.n	8001f78 <__gedf2+0x70>
 8001f3a:	4330      	orrs	r0, r6
 8001f3c:	4684      	mov	ip, r0
 8001f3e:	2c00      	cmp	r4, #0
 8001f40:	d101      	bne.n	8001f46 <__gedf2+0x3e>
 8001f42:	433a      	orrs	r2, r7
 8001f44:	d023      	beq.n	8001f8e <__gedf2+0x86>
 8001f46:	4662      	mov	r2, ip
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	d01a      	beq.n	8001f82 <__gedf2+0x7a>
 8001f4c:	459a      	cmp	sl, r3
 8001f4e:	d029      	beq.n	8001fa4 <__gedf2+0x9c>
 8001f50:	4651      	mov	r1, sl
 8001f52:	2002      	movs	r0, #2
 8001f54:	3901      	subs	r1, #1
 8001f56:	4008      	ands	r0, r1
 8001f58:	3801      	subs	r0, #1
 8001f5a:	bc1c      	pop	{r2, r3, r4}
 8001f5c:	4690      	mov	r8, r2
 8001f5e:	4699      	mov	r9, r3
 8001f60:	46a2      	mov	sl, r4
 8001f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f64:	0039      	movs	r1, r7
 8001f66:	4311      	orrs	r1, r2
 8001f68:	d0e5      	beq.n	8001f36 <__gedf2+0x2e>
 8001f6a:	2002      	movs	r0, #2
 8001f6c:	4240      	negs	r0, r0
 8001f6e:	e7f4      	b.n	8001f5a <__gedf2+0x52>
 8001f70:	4330      	orrs	r0, r6
 8001f72:	d1fa      	bne.n	8001f6a <__gedf2+0x62>
 8001f74:	42ac      	cmp	r4, r5
 8001f76:	d00f      	beq.n	8001f98 <__gedf2+0x90>
 8001f78:	2c00      	cmp	r4, #0
 8001f7a:	d10f      	bne.n	8001f9c <__gedf2+0x94>
 8001f7c:	433a      	orrs	r2, r7
 8001f7e:	d0e7      	beq.n	8001f50 <__gedf2+0x48>
 8001f80:	e00c      	b.n	8001f9c <__gedf2+0x94>
 8001f82:	2201      	movs	r2, #1
 8001f84:	3b01      	subs	r3, #1
 8001f86:	4393      	bics	r3, r2
 8001f88:	0018      	movs	r0, r3
 8001f8a:	3001      	adds	r0, #1
 8001f8c:	e7e5      	b.n	8001f5a <__gedf2+0x52>
 8001f8e:	4663      	mov	r3, ip
 8001f90:	2000      	movs	r0, #0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0e1      	beq.n	8001f5a <__gedf2+0x52>
 8001f96:	e7db      	b.n	8001f50 <__gedf2+0x48>
 8001f98:	433a      	orrs	r2, r7
 8001f9a:	d1e6      	bne.n	8001f6a <__gedf2+0x62>
 8001f9c:	459a      	cmp	sl, r3
 8001f9e:	d1d7      	bne.n	8001f50 <__gedf2+0x48>
 8001fa0:	42a5      	cmp	r5, r4
 8001fa2:	dcd5      	bgt.n	8001f50 <__gedf2+0x48>
 8001fa4:	42a5      	cmp	r5, r4
 8001fa6:	db05      	blt.n	8001fb4 <__gedf2+0xac>
 8001fa8:	42be      	cmp	r6, r7
 8001faa:	d8d1      	bhi.n	8001f50 <__gedf2+0x48>
 8001fac:	d008      	beq.n	8001fc0 <__gedf2+0xb8>
 8001fae:	2000      	movs	r0, #0
 8001fb0:	42be      	cmp	r6, r7
 8001fb2:	d2d2      	bcs.n	8001f5a <__gedf2+0x52>
 8001fb4:	4650      	mov	r0, sl
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	3801      	subs	r0, #1
 8001fba:	4398      	bics	r0, r3
 8001fbc:	3001      	adds	r0, #1
 8001fbe:	e7cc      	b.n	8001f5a <__gedf2+0x52>
 8001fc0:	45c8      	cmp	r8, r9
 8001fc2:	d8c5      	bhi.n	8001f50 <__gedf2+0x48>
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	45c8      	cmp	r8, r9
 8001fc8:	d3f4      	bcc.n	8001fb4 <__gedf2+0xac>
 8001fca:	e7c6      	b.n	8001f5a <__gedf2+0x52>
 8001fcc:	000007ff 	.word	0x000007ff

08001fd0 <__ledf2>:
 8001fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd2:	464f      	mov	r7, r9
 8001fd4:	4646      	mov	r6, r8
 8001fd6:	46d6      	mov	lr, sl
 8001fd8:	004d      	lsls	r5, r1, #1
 8001fda:	b5c0      	push	{r6, r7, lr}
 8001fdc:	030e      	lsls	r6, r1, #12
 8001fde:	0fc9      	lsrs	r1, r1, #31
 8001fe0:	468a      	mov	sl, r1
 8001fe2:	492e      	ldr	r1, [pc, #184]	; (800209c <__ledf2+0xcc>)
 8001fe4:	031f      	lsls	r7, r3, #12
 8001fe6:	005c      	lsls	r4, r3, #1
 8001fe8:	4680      	mov	r8, r0
 8001fea:	0b36      	lsrs	r6, r6, #12
 8001fec:	0d6d      	lsrs	r5, r5, #21
 8001fee:	4691      	mov	r9, r2
 8001ff0:	0b3f      	lsrs	r7, r7, #12
 8001ff2:	0d64      	lsrs	r4, r4, #21
 8001ff4:	0fdb      	lsrs	r3, r3, #31
 8001ff6:	428d      	cmp	r5, r1
 8001ff8:	d018      	beq.n	800202c <__ledf2+0x5c>
 8001ffa:	428c      	cmp	r4, r1
 8001ffc:	d011      	beq.n	8002022 <__ledf2+0x52>
 8001ffe:	2d00      	cmp	r5, #0
 8002000:	d118      	bne.n	8002034 <__ledf2+0x64>
 8002002:	4330      	orrs	r0, r6
 8002004:	4684      	mov	ip, r0
 8002006:	2c00      	cmp	r4, #0
 8002008:	d11e      	bne.n	8002048 <__ledf2+0x78>
 800200a:	433a      	orrs	r2, r7
 800200c:	d11c      	bne.n	8002048 <__ledf2+0x78>
 800200e:	4663      	mov	r3, ip
 8002010:	2000      	movs	r0, #0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d030      	beq.n	8002078 <__ledf2+0xa8>
 8002016:	4651      	mov	r1, sl
 8002018:	2002      	movs	r0, #2
 800201a:	3901      	subs	r1, #1
 800201c:	4008      	ands	r0, r1
 800201e:	3801      	subs	r0, #1
 8002020:	e02a      	b.n	8002078 <__ledf2+0xa8>
 8002022:	0039      	movs	r1, r7
 8002024:	4311      	orrs	r1, r2
 8002026:	d0ea      	beq.n	8001ffe <__ledf2+0x2e>
 8002028:	2002      	movs	r0, #2
 800202a:	e025      	b.n	8002078 <__ledf2+0xa8>
 800202c:	4330      	orrs	r0, r6
 800202e:	d1fb      	bne.n	8002028 <__ledf2+0x58>
 8002030:	42ac      	cmp	r4, r5
 8002032:	d026      	beq.n	8002082 <__ledf2+0xb2>
 8002034:	2c00      	cmp	r4, #0
 8002036:	d126      	bne.n	8002086 <__ledf2+0xb6>
 8002038:	433a      	orrs	r2, r7
 800203a:	d124      	bne.n	8002086 <__ledf2+0xb6>
 800203c:	4651      	mov	r1, sl
 800203e:	2002      	movs	r0, #2
 8002040:	3901      	subs	r1, #1
 8002042:	4008      	ands	r0, r1
 8002044:	3801      	subs	r0, #1
 8002046:	e017      	b.n	8002078 <__ledf2+0xa8>
 8002048:	4662      	mov	r2, ip
 800204a:	2a00      	cmp	r2, #0
 800204c:	d00f      	beq.n	800206e <__ledf2+0x9e>
 800204e:	459a      	cmp	sl, r3
 8002050:	d1e1      	bne.n	8002016 <__ledf2+0x46>
 8002052:	42a5      	cmp	r5, r4
 8002054:	db05      	blt.n	8002062 <__ledf2+0x92>
 8002056:	42be      	cmp	r6, r7
 8002058:	d8dd      	bhi.n	8002016 <__ledf2+0x46>
 800205a:	d019      	beq.n	8002090 <__ledf2+0xc0>
 800205c:	2000      	movs	r0, #0
 800205e:	42be      	cmp	r6, r7
 8002060:	d20a      	bcs.n	8002078 <__ledf2+0xa8>
 8002062:	4650      	mov	r0, sl
 8002064:	2301      	movs	r3, #1
 8002066:	3801      	subs	r0, #1
 8002068:	4398      	bics	r0, r3
 800206a:	3001      	adds	r0, #1
 800206c:	e004      	b.n	8002078 <__ledf2+0xa8>
 800206e:	2201      	movs	r2, #1
 8002070:	3b01      	subs	r3, #1
 8002072:	4393      	bics	r3, r2
 8002074:	0018      	movs	r0, r3
 8002076:	3001      	adds	r0, #1
 8002078:	bc1c      	pop	{r2, r3, r4}
 800207a:	4690      	mov	r8, r2
 800207c:	4699      	mov	r9, r3
 800207e:	46a2      	mov	sl, r4
 8002080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002082:	433a      	orrs	r2, r7
 8002084:	d1d0      	bne.n	8002028 <__ledf2+0x58>
 8002086:	459a      	cmp	sl, r3
 8002088:	d1c5      	bne.n	8002016 <__ledf2+0x46>
 800208a:	42a5      	cmp	r5, r4
 800208c:	dcc3      	bgt.n	8002016 <__ledf2+0x46>
 800208e:	e7e0      	b.n	8002052 <__ledf2+0x82>
 8002090:	45c8      	cmp	r8, r9
 8002092:	d8c0      	bhi.n	8002016 <__ledf2+0x46>
 8002094:	2000      	movs	r0, #0
 8002096:	45c8      	cmp	r8, r9
 8002098:	d3e3      	bcc.n	8002062 <__ledf2+0x92>
 800209a:	e7ed      	b.n	8002078 <__ledf2+0xa8>
 800209c:	000007ff 	.word	0x000007ff

080020a0 <__aeabi_dmul>:
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	4657      	mov	r7, sl
 80020a4:	46de      	mov	lr, fp
 80020a6:	464e      	mov	r6, r9
 80020a8:	4645      	mov	r5, r8
 80020aa:	b5e0      	push	{r5, r6, r7, lr}
 80020ac:	4683      	mov	fp, r0
 80020ae:	0006      	movs	r6, r0
 80020b0:	030f      	lsls	r7, r1, #12
 80020b2:	0048      	lsls	r0, r1, #1
 80020b4:	b087      	sub	sp, #28
 80020b6:	4692      	mov	sl, r2
 80020b8:	001d      	movs	r5, r3
 80020ba:	0b3f      	lsrs	r7, r7, #12
 80020bc:	0d40      	lsrs	r0, r0, #21
 80020be:	0fcc      	lsrs	r4, r1, #31
 80020c0:	2800      	cmp	r0, #0
 80020c2:	d100      	bne.n	80020c6 <__aeabi_dmul+0x26>
 80020c4:	e06f      	b.n	80021a6 <__aeabi_dmul+0x106>
 80020c6:	4bde      	ldr	r3, [pc, #888]	; (8002440 <__aeabi_dmul+0x3a0>)
 80020c8:	4298      	cmp	r0, r3
 80020ca:	d038      	beq.n	800213e <__aeabi_dmul+0x9e>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	00ff      	lsls	r7, r7, #3
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	431f      	orrs	r7, r3
 80020d4:	0f73      	lsrs	r3, r6, #29
 80020d6:	433b      	orrs	r3, r7
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	4bda      	ldr	r3, [pc, #872]	; (8002444 <__aeabi_dmul+0x3a4>)
 80020dc:	2700      	movs	r7, #0
 80020de:	4699      	mov	r9, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	469b      	mov	fp, r3
 80020e4:	00f6      	lsls	r6, r6, #3
 80020e6:	4481      	add	r9, r0
 80020e8:	032b      	lsls	r3, r5, #12
 80020ea:	0069      	lsls	r1, r5, #1
 80020ec:	0b1b      	lsrs	r3, r3, #12
 80020ee:	4652      	mov	r2, sl
 80020f0:	4698      	mov	r8, r3
 80020f2:	0d49      	lsrs	r1, r1, #21
 80020f4:	0fed      	lsrs	r5, r5, #31
 80020f6:	2900      	cmp	r1, #0
 80020f8:	d100      	bne.n	80020fc <__aeabi_dmul+0x5c>
 80020fa:	e085      	b.n	8002208 <__aeabi_dmul+0x168>
 80020fc:	4bd0      	ldr	r3, [pc, #832]	; (8002440 <__aeabi_dmul+0x3a0>)
 80020fe:	4299      	cmp	r1, r3
 8002100:	d100      	bne.n	8002104 <__aeabi_dmul+0x64>
 8002102:	e073      	b.n	80021ec <__aeabi_dmul+0x14c>
 8002104:	4643      	mov	r3, r8
 8002106:	00da      	lsls	r2, r3, #3
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	041b      	lsls	r3, r3, #16
 800210c:	4313      	orrs	r3, r2
 800210e:	4652      	mov	r2, sl
 8002110:	48cc      	ldr	r0, [pc, #816]	; (8002444 <__aeabi_dmul+0x3a4>)
 8002112:	0f52      	lsrs	r2, r2, #29
 8002114:	4684      	mov	ip, r0
 8002116:	4313      	orrs	r3, r2
 8002118:	4652      	mov	r2, sl
 800211a:	2000      	movs	r0, #0
 800211c:	4461      	add	r1, ip
 800211e:	00d2      	lsls	r2, r2, #3
 8002120:	4489      	add	r9, r1
 8002122:	0021      	movs	r1, r4
 8002124:	4069      	eors	r1, r5
 8002126:	9100      	str	r1, [sp, #0]
 8002128:	468c      	mov	ip, r1
 800212a:	2101      	movs	r1, #1
 800212c:	4449      	add	r1, r9
 800212e:	468a      	mov	sl, r1
 8002130:	2f0f      	cmp	r7, #15
 8002132:	d900      	bls.n	8002136 <__aeabi_dmul+0x96>
 8002134:	e090      	b.n	8002258 <__aeabi_dmul+0x1b8>
 8002136:	49c4      	ldr	r1, [pc, #784]	; (8002448 <__aeabi_dmul+0x3a8>)
 8002138:	00bf      	lsls	r7, r7, #2
 800213a:	59cf      	ldr	r7, [r1, r7]
 800213c:	46bf      	mov	pc, r7
 800213e:	465b      	mov	r3, fp
 8002140:	433b      	orrs	r3, r7
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	d000      	beq.n	8002148 <__aeabi_dmul+0xa8>
 8002146:	e16a      	b.n	800241e <__aeabi_dmul+0x37e>
 8002148:	2302      	movs	r3, #2
 800214a:	2708      	movs	r7, #8
 800214c:	2600      	movs	r6, #0
 800214e:	4681      	mov	r9, r0
 8002150:	469b      	mov	fp, r3
 8002152:	e7c9      	b.n	80020e8 <__aeabi_dmul+0x48>
 8002154:	0032      	movs	r2, r6
 8002156:	4658      	mov	r0, fp
 8002158:	9b01      	ldr	r3, [sp, #4]
 800215a:	4661      	mov	r1, ip
 800215c:	9100      	str	r1, [sp, #0]
 800215e:	2802      	cmp	r0, #2
 8002160:	d100      	bne.n	8002164 <__aeabi_dmul+0xc4>
 8002162:	e075      	b.n	8002250 <__aeabi_dmul+0x1b0>
 8002164:	2803      	cmp	r0, #3
 8002166:	d100      	bne.n	800216a <__aeabi_dmul+0xca>
 8002168:	e1fe      	b.n	8002568 <__aeabi_dmul+0x4c8>
 800216a:	2801      	cmp	r0, #1
 800216c:	d000      	beq.n	8002170 <__aeabi_dmul+0xd0>
 800216e:	e12c      	b.n	80023ca <__aeabi_dmul+0x32a>
 8002170:	2300      	movs	r3, #0
 8002172:	2700      	movs	r7, #0
 8002174:	2600      	movs	r6, #0
 8002176:	2500      	movs	r5, #0
 8002178:	033f      	lsls	r7, r7, #12
 800217a:	0d2a      	lsrs	r2, r5, #20
 800217c:	0b3f      	lsrs	r7, r7, #12
 800217e:	48b3      	ldr	r0, [pc, #716]	; (800244c <__aeabi_dmul+0x3ac>)
 8002180:	0512      	lsls	r2, r2, #20
 8002182:	433a      	orrs	r2, r7
 8002184:	4002      	ands	r2, r0
 8002186:	051b      	lsls	r3, r3, #20
 8002188:	4313      	orrs	r3, r2
 800218a:	9a00      	ldr	r2, [sp, #0]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	07d1      	lsls	r1, r2, #31
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	430b      	orrs	r3, r1
 8002194:	0030      	movs	r0, r6
 8002196:	0019      	movs	r1, r3
 8002198:	b007      	add	sp, #28
 800219a:	bc3c      	pop	{r2, r3, r4, r5}
 800219c:	4690      	mov	r8, r2
 800219e:	4699      	mov	r9, r3
 80021a0:	46a2      	mov	sl, r4
 80021a2:	46ab      	mov	fp, r5
 80021a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a6:	465b      	mov	r3, fp
 80021a8:	433b      	orrs	r3, r7
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dmul+0x110>
 80021ae:	e12f      	b.n	8002410 <__aeabi_dmul+0x370>
 80021b0:	2f00      	cmp	r7, #0
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dmul+0x116>
 80021b4:	e1a5      	b.n	8002502 <__aeabi_dmul+0x462>
 80021b6:	0038      	movs	r0, r7
 80021b8:	f000 fec0 	bl	8002f3c <__clzsi2>
 80021bc:	0003      	movs	r3, r0
 80021be:	3b0b      	subs	r3, #11
 80021c0:	2b1c      	cmp	r3, #28
 80021c2:	dd00      	ble.n	80021c6 <__aeabi_dmul+0x126>
 80021c4:	e196      	b.n	80024f4 <__aeabi_dmul+0x454>
 80021c6:	221d      	movs	r2, #29
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	465a      	mov	r2, fp
 80021cc:	0001      	movs	r1, r0
 80021ce:	40da      	lsrs	r2, r3
 80021d0:	465e      	mov	r6, fp
 80021d2:	3908      	subs	r1, #8
 80021d4:	408f      	lsls	r7, r1
 80021d6:	0013      	movs	r3, r2
 80021d8:	408e      	lsls	r6, r1
 80021da:	433b      	orrs	r3, r7
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	4b9c      	ldr	r3, [pc, #624]	; (8002450 <__aeabi_dmul+0x3b0>)
 80021e0:	2700      	movs	r7, #0
 80021e2:	1a1b      	subs	r3, r3, r0
 80021e4:	4699      	mov	r9, r3
 80021e6:	2300      	movs	r3, #0
 80021e8:	469b      	mov	fp, r3
 80021ea:	e77d      	b.n	80020e8 <__aeabi_dmul+0x48>
 80021ec:	4641      	mov	r1, r8
 80021ee:	4653      	mov	r3, sl
 80021f0:	430b      	orrs	r3, r1
 80021f2:	4993      	ldr	r1, [pc, #588]	; (8002440 <__aeabi_dmul+0x3a0>)
 80021f4:	468c      	mov	ip, r1
 80021f6:	44e1      	add	r9, ip
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d000      	beq.n	80021fe <__aeabi_dmul+0x15e>
 80021fc:	e11a      	b.n	8002434 <__aeabi_dmul+0x394>
 80021fe:	2202      	movs	r2, #2
 8002200:	2002      	movs	r0, #2
 8002202:	4317      	orrs	r7, r2
 8002204:	2200      	movs	r2, #0
 8002206:	e78c      	b.n	8002122 <__aeabi_dmul+0x82>
 8002208:	4313      	orrs	r3, r2
 800220a:	d100      	bne.n	800220e <__aeabi_dmul+0x16e>
 800220c:	e10d      	b.n	800242a <__aeabi_dmul+0x38a>
 800220e:	4643      	mov	r3, r8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d100      	bne.n	8002216 <__aeabi_dmul+0x176>
 8002214:	e181      	b.n	800251a <__aeabi_dmul+0x47a>
 8002216:	4640      	mov	r0, r8
 8002218:	f000 fe90 	bl	8002f3c <__clzsi2>
 800221c:	0002      	movs	r2, r0
 800221e:	3a0b      	subs	r2, #11
 8002220:	2a1c      	cmp	r2, #28
 8002222:	dd00      	ble.n	8002226 <__aeabi_dmul+0x186>
 8002224:	e172      	b.n	800250c <__aeabi_dmul+0x46c>
 8002226:	0001      	movs	r1, r0
 8002228:	4643      	mov	r3, r8
 800222a:	3908      	subs	r1, #8
 800222c:	408b      	lsls	r3, r1
 800222e:	4698      	mov	r8, r3
 8002230:	231d      	movs	r3, #29
 8002232:	1a9a      	subs	r2, r3, r2
 8002234:	4653      	mov	r3, sl
 8002236:	40d3      	lsrs	r3, r2
 8002238:	001a      	movs	r2, r3
 800223a:	4643      	mov	r3, r8
 800223c:	4313      	orrs	r3, r2
 800223e:	4652      	mov	r2, sl
 8002240:	408a      	lsls	r2, r1
 8002242:	4649      	mov	r1, r9
 8002244:	1a08      	subs	r0, r1, r0
 8002246:	4982      	ldr	r1, [pc, #520]	; (8002450 <__aeabi_dmul+0x3b0>)
 8002248:	4689      	mov	r9, r1
 800224a:	4481      	add	r9, r0
 800224c:	2000      	movs	r0, #0
 800224e:	e768      	b.n	8002122 <__aeabi_dmul+0x82>
 8002250:	4b7b      	ldr	r3, [pc, #492]	; (8002440 <__aeabi_dmul+0x3a0>)
 8002252:	2700      	movs	r7, #0
 8002254:	2600      	movs	r6, #0
 8002256:	e78e      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002258:	0c14      	lsrs	r4, r2, #16
 800225a:	0412      	lsls	r2, r2, #16
 800225c:	0c12      	lsrs	r2, r2, #16
 800225e:	0011      	movs	r1, r2
 8002260:	0c37      	lsrs	r7, r6, #16
 8002262:	0436      	lsls	r6, r6, #16
 8002264:	0c35      	lsrs	r5, r6, #16
 8002266:	4379      	muls	r1, r7
 8002268:	0028      	movs	r0, r5
 800226a:	468c      	mov	ip, r1
 800226c:	002e      	movs	r6, r5
 800226e:	4360      	muls	r0, r4
 8002270:	4460      	add	r0, ip
 8002272:	4683      	mov	fp, r0
 8002274:	4356      	muls	r6, r2
 8002276:	0021      	movs	r1, r4
 8002278:	0c30      	lsrs	r0, r6, #16
 800227a:	4680      	mov	r8, r0
 800227c:	4658      	mov	r0, fp
 800227e:	4379      	muls	r1, r7
 8002280:	4440      	add	r0, r8
 8002282:	9102      	str	r1, [sp, #8]
 8002284:	4584      	cmp	ip, r0
 8002286:	d906      	bls.n	8002296 <__aeabi_dmul+0x1f6>
 8002288:	4688      	mov	r8, r1
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	0249      	lsls	r1, r1, #9
 800228e:	468c      	mov	ip, r1
 8002290:	44e0      	add	r8, ip
 8002292:	4641      	mov	r1, r8
 8002294:	9102      	str	r1, [sp, #8]
 8002296:	0436      	lsls	r6, r6, #16
 8002298:	0c01      	lsrs	r1, r0, #16
 800229a:	0c36      	lsrs	r6, r6, #16
 800229c:	0400      	lsls	r0, r0, #16
 800229e:	468b      	mov	fp, r1
 80022a0:	1981      	adds	r1, r0, r6
 80022a2:	0c1e      	lsrs	r6, r3, #16
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	9103      	str	r1, [sp, #12]
 80022aa:	0019      	movs	r1, r3
 80022ac:	4379      	muls	r1, r7
 80022ae:	468c      	mov	ip, r1
 80022b0:	0028      	movs	r0, r5
 80022b2:	4375      	muls	r5, r6
 80022b4:	4465      	add	r5, ip
 80022b6:	46a8      	mov	r8, r5
 80022b8:	4358      	muls	r0, r3
 80022ba:	0c05      	lsrs	r5, r0, #16
 80022bc:	4445      	add	r5, r8
 80022be:	4377      	muls	r7, r6
 80022c0:	42a9      	cmp	r1, r5
 80022c2:	d903      	bls.n	80022cc <__aeabi_dmul+0x22c>
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	0249      	lsls	r1, r1, #9
 80022c8:	468c      	mov	ip, r1
 80022ca:	4467      	add	r7, ip
 80022cc:	0c29      	lsrs	r1, r5, #16
 80022ce:	468c      	mov	ip, r1
 80022d0:	0039      	movs	r1, r7
 80022d2:	0400      	lsls	r0, r0, #16
 80022d4:	0c00      	lsrs	r0, r0, #16
 80022d6:	042d      	lsls	r5, r5, #16
 80022d8:	182d      	adds	r5, r5, r0
 80022da:	4461      	add	r1, ip
 80022dc:	44ab      	add	fp, r5
 80022de:	9105      	str	r1, [sp, #20]
 80022e0:	4659      	mov	r1, fp
 80022e2:	9104      	str	r1, [sp, #16]
 80022e4:	9901      	ldr	r1, [sp, #4]
 80022e6:	040f      	lsls	r7, r1, #16
 80022e8:	0c3f      	lsrs	r7, r7, #16
 80022ea:	0c08      	lsrs	r0, r1, #16
 80022ec:	0039      	movs	r1, r7
 80022ee:	4351      	muls	r1, r2
 80022f0:	4342      	muls	r2, r0
 80022f2:	4690      	mov	r8, r2
 80022f4:	0002      	movs	r2, r0
 80022f6:	468c      	mov	ip, r1
 80022f8:	0c09      	lsrs	r1, r1, #16
 80022fa:	468b      	mov	fp, r1
 80022fc:	4362      	muls	r2, r4
 80022fe:	437c      	muls	r4, r7
 8002300:	4444      	add	r4, r8
 8002302:	445c      	add	r4, fp
 8002304:	45a0      	cmp	r8, r4
 8002306:	d903      	bls.n	8002310 <__aeabi_dmul+0x270>
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0249      	lsls	r1, r1, #9
 800230c:	4688      	mov	r8, r1
 800230e:	4442      	add	r2, r8
 8002310:	0c21      	lsrs	r1, r4, #16
 8002312:	4688      	mov	r8, r1
 8002314:	4661      	mov	r1, ip
 8002316:	0409      	lsls	r1, r1, #16
 8002318:	0c09      	lsrs	r1, r1, #16
 800231a:	468c      	mov	ip, r1
 800231c:	0039      	movs	r1, r7
 800231e:	4359      	muls	r1, r3
 8002320:	4343      	muls	r3, r0
 8002322:	4370      	muls	r0, r6
 8002324:	437e      	muls	r6, r7
 8002326:	0c0f      	lsrs	r7, r1, #16
 8002328:	18f6      	adds	r6, r6, r3
 800232a:	0424      	lsls	r4, r4, #16
 800232c:	19be      	adds	r6, r7, r6
 800232e:	4464      	add	r4, ip
 8002330:	4442      	add	r2, r8
 8002332:	468c      	mov	ip, r1
 8002334:	42b3      	cmp	r3, r6
 8002336:	d903      	bls.n	8002340 <__aeabi_dmul+0x2a0>
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	025b      	lsls	r3, r3, #9
 800233c:	4698      	mov	r8, r3
 800233e:	4440      	add	r0, r8
 8002340:	9b02      	ldr	r3, [sp, #8]
 8002342:	4661      	mov	r1, ip
 8002344:	4698      	mov	r8, r3
 8002346:	9b04      	ldr	r3, [sp, #16]
 8002348:	0437      	lsls	r7, r6, #16
 800234a:	4443      	add	r3, r8
 800234c:	469b      	mov	fp, r3
 800234e:	45ab      	cmp	fp, r5
 8002350:	41ad      	sbcs	r5, r5
 8002352:	426b      	negs	r3, r5
 8002354:	040d      	lsls	r5, r1, #16
 8002356:	9905      	ldr	r1, [sp, #20]
 8002358:	0c2d      	lsrs	r5, r5, #16
 800235a:	468c      	mov	ip, r1
 800235c:	197f      	adds	r7, r7, r5
 800235e:	4467      	add	r7, ip
 8002360:	18fd      	adds	r5, r7, r3
 8002362:	46a8      	mov	r8, r5
 8002364:	465d      	mov	r5, fp
 8002366:	192d      	adds	r5, r5, r4
 8002368:	42a5      	cmp	r5, r4
 800236a:	41a4      	sbcs	r4, r4
 800236c:	4693      	mov	fp, r2
 800236e:	4264      	negs	r4, r4
 8002370:	46a4      	mov	ip, r4
 8002372:	44c3      	add	fp, r8
 8002374:	44dc      	add	ip, fp
 8002376:	428f      	cmp	r7, r1
 8002378:	41bf      	sbcs	r7, r7
 800237a:	4598      	cmp	r8, r3
 800237c:	419b      	sbcs	r3, r3
 800237e:	4593      	cmp	fp, r2
 8002380:	4192      	sbcs	r2, r2
 8002382:	45a4      	cmp	ip, r4
 8002384:	41a4      	sbcs	r4, r4
 8002386:	425b      	negs	r3, r3
 8002388:	427f      	negs	r7, r7
 800238a:	431f      	orrs	r7, r3
 800238c:	0c36      	lsrs	r6, r6, #16
 800238e:	4252      	negs	r2, r2
 8002390:	4264      	negs	r4, r4
 8002392:	19bf      	adds	r7, r7, r6
 8002394:	4322      	orrs	r2, r4
 8002396:	18bf      	adds	r7, r7, r2
 8002398:	4662      	mov	r2, ip
 800239a:	1838      	adds	r0, r7, r0
 800239c:	0243      	lsls	r3, r0, #9
 800239e:	0dd2      	lsrs	r2, r2, #23
 80023a0:	9903      	ldr	r1, [sp, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	026a      	lsls	r2, r5, #9
 80023a6:	430a      	orrs	r2, r1
 80023a8:	1e50      	subs	r0, r2, #1
 80023aa:	4182      	sbcs	r2, r0
 80023ac:	4661      	mov	r1, ip
 80023ae:	0ded      	lsrs	r5, r5, #23
 80023b0:	432a      	orrs	r2, r5
 80023b2:	024e      	lsls	r6, r1, #9
 80023b4:	4332      	orrs	r2, r6
 80023b6:	01d9      	lsls	r1, r3, #7
 80023b8:	d400      	bmi.n	80023bc <__aeabi_dmul+0x31c>
 80023ba:	e0b3      	b.n	8002524 <__aeabi_dmul+0x484>
 80023bc:	2601      	movs	r6, #1
 80023be:	0850      	lsrs	r0, r2, #1
 80023c0:	4032      	ands	r2, r6
 80023c2:	4302      	orrs	r2, r0
 80023c4:	07de      	lsls	r6, r3, #31
 80023c6:	4332      	orrs	r2, r6
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	4c22      	ldr	r4, [pc, #136]	; (8002454 <__aeabi_dmul+0x3b4>)
 80023cc:	4454      	add	r4, sl
 80023ce:	2c00      	cmp	r4, #0
 80023d0:	dd62      	ble.n	8002498 <__aeabi_dmul+0x3f8>
 80023d2:	0751      	lsls	r1, r2, #29
 80023d4:	d009      	beq.n	80023ea <__aeabi_dmul+0x34a>
 80023d6:	200f      	movs	r0, #15
 80023d8:	4010      	ands	r0, r2
 80023da:	2804      	cmp	r0, #4
 80023dc:	d005      	beq.n	80023ea <__aeabi_dmul+0x34a>
 80023de:	1d10      	adds	r0, r2, #4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	4192      	sbcs	r2, r2
 80023e4:	4252      	negs	r2, r2
 80023e6:	189b      	adds	r3, r3, r2
 80023e8:	0002      	movs	r2, r0
 80023ea:	01d9      	lsls	r1, r3, #7
 80023ec:	d504      	bpl.n	80023f8 <__aeabi_dmul+0x358>
 80023ee:	2480      	movs	r4, #128	; 0x80
 80023f0:	4819      	ldr	r0, [pc, #100]	; (8002458 <__aeabi_dmul+0x3b8>)
 80023f2:	00e4      	lsls	r4, r4, #3
 80023f4:	4003      	ands	r3, r0
 80023f6:	4454      	add	r4, sl
 80023f8:	4818      	ldr	r0, [pc, #96]	; (800245c <__aeabi_dmul+0x3bc>)
 80023fa:	4284      	cmp	r4, r0
 80023fc:	dd00      	ble.n	8002400 <__aeabi_dmul+0x360>
 80023fe:	e727      	b.n	8002250 <__aeabi_dmul+0x1b0>
 8002400:	075e      	lsls	r6, r3, #29
 8002402:	025b      	lsls	r3, r3, #9
 8002404:	08d2      	lsrs	r2, r2, #3
 8002406:	0b1f      	lsrs	r7, r3, #12
 8002408:	0563      	lsls	r3, r4, #21
 800240a:	4316      	orrs	r6, r2
 800240c:	0d5b      	lsrs	r3, r3, #21
 800240e:	e6b2      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002410:	2300      	movs	r3, #0
 8002412:	4699      	mov	r9, r3
 8002414:	3301      	adds	r3, #1
 8002416:	2704      	movs	r7, #4
 8002418:	2600      	movs	r6, #0
 800241a:	469b      	mov	fp, r3
 800241c:	e664      	b.n	80020e8 <__aeabi_dmul+0x48>
 800241e:	2303      	movs	r3, #3
 8002420:	9701      	str	r7, [sp, #4]
 8002422:	4681      	mov	r9, r0
 8002424:	270c      	movs	r7, #12
 8002426:	469b      	mov	fp, r3
 8002428:	e65e      	b.n	80020e8 <__aeabi_dmul+0x48>
 800242a:	2201      	movs	r2, #1
 800242c:	2001      	movs	r0, #1
 800242e:	4317      	orrs	r7, r2
 8002430:	2200      	movs	r2, #0
 8002432:	e676      	b.n	8002122 <__aeabi_dmul+0x82>
 8002434:	2303      	movs	r3, #3
 8002436:	2003      	movs	r0, #3
 8002438:	431f      	orrs	r7, r3
 800243a:	4643      	mov	r3, r8
 800243c:	e671      	b.n	8002122 <__aeabi_dmul+0x82>
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	000007ff 	.word	0x000007ff
 8002444:	fffffc01 	.word	0xfffffc01
 8002448:	080193e4 	.word	0x080193e4
 800244c:	800fffff 	.word	0x800fffff
 8002450:	fffffc0d 	.word	0xfffffc0d
 8002454:	000003ff 	.word	0x000003ff
 8002458:	feffffff 	.word	0xfeffffff
 800245c:	000007fe 	.word	0x000007fe
 8002460:	2300      	movs	r3, #0
 8002462:	2780      	movs	r7, #128	; 0x80
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	033f      	lsls	r7, r7, #12
 8002468:	2600      	movs	r6, #0
 800246a:	4b43      	ldr	r3, [pc, #268]	; (8002578 <__aeabi_dmul+0x4d8>)
 800246c:	e683      	b.n	8002176 <__aeabi_dmul+0xd6>
 800246e:	9b01      	ldr	r3, [sp, #4]
 8002470:	0032      	movs	r2, r6
 8002472:	46a4      	mov	ip, r4
 8002474:	4658      	mov	r0, fp
 8002476:	e670      	b.n	800215a <__aeabi_dmul+0xba>
 8002478:	46ac      	mov	ip, r5
 800247a:	e66e      	b.n	800215a <__aeabi_dmul+0xba>
 800247c:	2780      	movs	r7, #128	; 0x80
 800247e:	9901      	ldr	r1, [sp, #4]
 8002480:	033f      	lsls	r7, r7, #12
 8002482:	4239      	tst	r1, r7
 8002484:	d02d      	beq.n	80024e2 <__aeabi_dmul+0x442>
 8002486:	423b      	tst	r3, r7
 8002488:	d12b      	bne.n	80024e2 <__aeabi_dmul+0x442>
 800248a:	431f      	orrs	r7, r3
 800248c:	033f      	lsls	r7, r7, #12
 800248e:	0b3f      	lsrs	r7, r7, #12
 8002490:	9500      	str	r5, [sp, #0]
 8002492:	0016      	movs	r6, r2
 8002494:	4b38      	ldr	r3, [pc, #224]	; (8002578 <__aeabi_dmul+0x4d8>)
 8002496:	e66e      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002498:	2501      	movs	r5, #1
 800249a:	1b2d      	subs	r5, r5, r4
 800249c:	2d38      	cmp	r5, #56	; 0x38
 800249e:	dd00      	ble.n	80024a2 <__aeabi_dmul+0x402>
 80024a0:	e666      	b.n	8002170 <__aeabi_dmul+0xd0>
 80024a2:	2d1f      	cmp	r5, #31
 80024a4:	dc40      	bgt.n	8002528 <__aeabi_dmul+0x488>
 80024a6:	4835      	ldr	r0, [pc, #212]	; (800257c <__aeabi_dmul+0x4dc>)
 80024a8:	001c      	movs	r4, r3
 80024aa:	4450      	add	r0, sl
 80024ac:	0016      	movs	r6, r2
 80024ae:	4082      	lsls	r2, r0
 80024b0:	4084      	lsls	r4, r0
 80024b2:	40ee      	lsrs	r6, r5
 80024b4:	1e50      	subs	r0, r2, #1
 80024b6:	4182      	sbcs	r2, r0
 80024b8:	4334      	orrs	r4, r6
 80024ba:	4314      	orrs	r4, r2
 80024bc:	40eb      	lsrs	r3, r5
 80024be:	0762      	lsls	r2, r4, #29
 80024c0:	d009      	beq.n	80024d6 <__aeabi_dmul+0x436>
 80024c2:	220f      	movs	r2, #15
 80024c4:	4022      	ands	r2, r4
 80024c6:	2a04      	cmp	r2, #4
 80024c8:	d005      	beq.n	80024d6 <__aeabi_dmul+0x436>
 80024ca:	0022      	movs	r2, r4
 80024cc:	1d14      	adds	r4, r2, #4
 80024ce:	4294      	cmp	r4, r2
 80024d0:	4180      	sbcs	r0, r0
 80024d2:	4240      	negs	r0, r0
 80024d4:	181b      	adds	r3, r3, r0
 80024d6:	021a      	lsls	r2, r3, #8
 80024d8:	d53e      	bpl.n	8002558 <__aeabi_dmul+0x4b8>
 80024da:	2301      	movs	r3, #1
 80024dc:	2700      	movs	r7, #0
 80024de:	2600      	movs	r6, #0
 80024e0:	e649      	b.n	8002176 <__aeabi_dmul+0xd6>
 80024e2:	2780      	movs	r7, #128	; 0x80
 80024e4:	9b01      	ldr	r3, [sp, #4]
 80024e6:	033f      	lsls	r7, r7, #12
 80024e8:	431f      	orrs	r7, r3
 80024ea:	033f      	lsls	r7, r7, #12
 80024ec:	0b3f      	lsrs	r7, r7, #12
 80024ee:	9400      	str	r4, [sp, #0]
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <__aeabi_dmul+0x4d8>)
 80024f2:	e640      	b.n	8002176 <__aeabi_dmul+0xd6>
 80024f4:	0003      	movs	r3, r0
 80024f6:	465a      	mov	r2, fp
 80024f8:	3b28      	subs	r3, #40	; 0x28
 80024fa:	409a      	lsls	r2, r3
 80024fc:	2600      	movs	r6, #0
 80024fe:	9201      	str	r2, [sp, #4]
 8002500:	e66d      	b.n	80021de <__aeabi_dmul+0x13e>
 8002502:	4658      	mov	r0, fp
 8002504:	f000 fd1a 	bl	8002f3c <__clzsi2>
 8002508:	3020      	adds	r0, #32
 800250a:	e657      	b.n	80021bc <__aeabi_dmul+0x11c>
 800250c:	0003      	movs	r3, r0
 800250e:	4652      	mov	r2, sl
 8002510:	3b28      	subs	r3, #40	; 0x28
 8002512:	409a      	lsls	r2, r3
 8002514:	0013      	movs	r3, r2
 8002516:	2200      	movs	r2, #0
 8002518:	e693      	b.n	8002242 <__aeabi_dmul+0x1a2>
 800251a:	4650      	mov	r0, sl
 800251c:	f000 fd0e 	bl	8002f3c <__clzsi2>
 8002520:	3020      	adds	r0, #32
 8002522:	e67b      	b.n	800221c <__aeabi_dmul+0x17c>
 8002524:	46ca      	mov	sl, r9
 8002526:	e750      	b.n	80023ca <__aeabi_dmul+0x32a>
 8002528:	201f      	movs	r0, #31
 800252a:	001e      	movs	r6, r3
 800252c:	4240      	negs	r0, r0
 800252e:	1b04      	subs	r4, r0, r4
 8002530:	40e6      	lsrs	r6, r4
 8002532:	2d20      	cmp	r5, #32
 8002534:	d003      	beq.n	800253e <__aeabi_dmul+0x49e>
 8002536:	4c12      	ldr	r4, [pc, #72]	; (8002580 <__aeabi_dmul+0x4e0>)
 8002538:	4454      	add	r4, sl
 800253a:	40a3      	lsls	r3, r4
 800253c:	431a      	orrs	r2, r3
 800253e:	1e50      	subs	r0, r2, #1
 8002540:	4182      	sbcs	r2, r0
 8002542:	4332      	orrs	r2, r6
 8002544:	2607      	movs	r6, #7
 8002546:	2700      	movs	r7, #0
 8002548:	4016      	ands	r6, r2
 800254a:	d009      	beq.n	8002560 <__aeabi_dmul+0x4c0>
 800254c:	200f      	movs	r0, #15
 800254e:	2300      	movs	r3, #0
 8002550:	4010      	ands	r0, r2
 8002552:	0014      	movs	r4, r2
 8002554:	2804      	cmp	r0, #4
 8002556:	d1b9      	bne.n	80024cc <__aeabi_dmul+0x42c>
 8002558:	0022      	movs	r2, r4
 800255a:	075e      	lsls	r6, r3, #29
 800255c:	025b      	lsls	r3, r3, #9
 800255e:	0b1f      	lsrs	r7, r3, #12
 8002560:	08d2      	lsrs	r2, r2, #3
 8002562:	4316      	orrs	r6, r2
 8002564:	2300      	movs	r3, #0
 8002566:	e606      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002568:	2780      	movs	r7, #128	; 0x80
 800256a:	033f      	lsls	r7, r7, #12
 800256c:	431f      	orrs	r7, r3
 800256e:	033f      	lsls	r7, r7, #12
 8002570:	0b3f      	lsrs	r7, r7, #12
 8002572:	0016      	movs	r6, r2
 8002574:	4b00      	ldr	r3, [pc, #0]	; (8002578 <__aeabi_dmul+0x4d8>)
 8002576:	e5fe      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002578:	000007ff 	.word	0x000007ff
 800257c:	0000041e 	.word	0x0000041e
 8002580:	0000043e 	.word	0x0000043e

08002584 <__aeabi_dsub>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	4657      	mov	r7, sl
 8002588:	464e      	mov	r6, r9
 800258a:	4645      	mov	r5, r8
 800258c:	46de      	mov	lr, fp
 800258e:	000c      	movs	r4, r1
 8002590:	0309      	lsls	r1, r1, #12
 8002592:	b5e0      	push	{r5, r6, r7, lr}
 8002594:	0a49      	lsrs	r1, r1, #9
 8002596:	0f46      	lsrs	r6, r0, #29
 8002598:	005f      	lsls	r7, r3, #1
 800259a:	4331      	orrs	r1, r6
 800259c:	031e      	lsls	r6, r3, #12
 800259e:	0fdb      	lsrs	r3, r3, #31
 80025a0:	0a76      	lsrs	r6, r6, #9
 80025a2:	469b      	mov	fp, r3
 80025a4:	0f53      	lsrs	r3, r2, #29
 80025a6:	4333      	orrs	r3, r6
 80025a8:	4ec8      	ldr	r6, [pc, #800]	; (80028cc <__aeabi_dsub+0x348>)
 80025aa:	0065      	lsls	r5, r4, #1
 80025ac:	00c0      	lsls	r0, r0, #3
 80025ae:	0fe4      	lsrs	r4, r4, #31
 80025b0:	00d2      	lsls	r2, r2, #3
 80025b2:	0d6d      	lsrs	r5, r5, #21
 80025b4:	46a2      	mov	sl, r4
 80025b6:	4681      	mov	r9, r0
 80025b8:	0d7f      	lsrs	r7, r7, #21
 80025ba:	469c      	mov	ip, r3
 80025bc:	4690      	mov	r8, r2
 80025be:	42b7      	cmp	r7, r6
 80025c0:	d100      	bne.n	80025c4 <__aeabi_dsub+0x40>
 80025c2:	e0b9      	b.n	8002738 <__aeabi_dsub+0x1b4>
 80025c4:	465b      	mov	r3, fp
 80025c6:	2601      	movs	r6, #1
 80025c8:	4073      	eors	r3, r6
 80025ca:	469b      	mov	fp, r3
 80025cc:	1bee      	subs	r6, r5, r7
 80025ce:	45a3      	cmp	fp, r4
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x50>
 80025d2:	e083      	b.n	80026dc <__aeabi_dsub+0x158>
 80025d4:	2e00      	cmp	r6, #0
 80025d6:	dd63      	ble.n	80026a0 <__aeabi_dsub+0x11c>
 80025d8:	2f00      	cmp	r7, #0
 80025da:	d000      	beq.n	80025de <__aeabi_dsub+0x5a>
 80025dc:	e0b1      	b.n	8002742 <__aeabi_dsub+0x1be>
 80025de:	4663      	mov	r3, ip
 80025e0:	4313      	orrs	r3, r2
 80025e2:	d100      	bne.n	80025e6 <__aeabi_dsub+0x62>
 80025e4:	e123      	b.n	800282e <__aeabi_dsub+0x2aa>
 80025e6:	1e73      	subs	r3, r6, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d000      	beq.n	80025ee <__aeabi_dsub+0x6a>
 80025ec:	e1ba      	b.n	8002964 <__aeabi_dsub+0x3e0>
 80025ee:	1a86      	subs	r6, r0, r2
 80025f0:	4663      	mov	r3, ip
 80025f2:	42b0      	cmp	r0, r6
 80025f4:	4180      	sbcs	r0, r0
 80025f6:	2501      	movs	r5, #1
 80025f8:	1ac9      	subs	r1, r1, r3
 80025fa:	4240      	negs	r0, r0
 80025fc:	1a09      	subs	r1, r1, r0
 80025fe:	020b      	lsls	r3, r1, #8
 8002600:	d400      	bmi.n	8002604 <__aeabi_dsub+0x80>
 8002602:	e147      	b.n	8002894 <__aeabi_dsub+0x310>
 8002604:	0249      	lsls	r1, r1, #9
 8002606:	0a4b      	lsrs	r3, r1, #9
 8002608:	4698      	mov	r8, r3
 800260a:	4643      	mov	r3, r8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d100      	bne.n	8002612 <__aeabi_dsub+0x8e>
 8002610:	e189      	b.n	8002926 <__aeabi_dsub+0x3a2>
 8002612:	4640      	mov	r0, r8
 8002614:	f000 fc92 	bl	8002f3c <__clzsi2>
 8002618:	0003      	movs	r3, r0
 800261a:	3b08      	subs	r3, #8
 800261c:	2b1f      	cmp	r3, #31
 800261e:	dd00      	ble.n	8002622 <__aeabi_dsub+0x9e>
 8002620:	e17c      	b.n	800291c <__aeabi_dsub+0x398>
 8002622:	2220      	movs	r2, #32
 8002624:	0030      	movs	r0, r6
 8002626:	1ad2      	subs	r2, r2, r3
 8002628:	4641      	mov	r1, r8
 800262a:	40d0      	lsrs	r0, r2
 800262c:	4099      	lsls	r1, r3
 800262e:	0002      	movs	r2, r0
 8002630:	409e      	lsls	r6, r3
 8002632:	430a      	orrs	r2, r1
 8002634:	429d      	cmp	r5, r3
 8002636:	dd00      	ble.n	800263a <__aeabi_dsub+0xb6>
 8002638:	e16a      	b.n	8002910 <__aeabi_dsub+0x38c>
 800263a:	1b5d      	subs	r5, r3, r5
 800263c:	1c6b      	adds	r3, r5, #1
 800263e:	2b1f      	cmp	r3, #31
 8002640:	dd00      	ble.n	8002644 <__aeabi_dsub+0xc0>
 8002642:	e194      	b.n	800296e <__aeabi_dsub+0x3ea>
 8002644:	2120      	movs	r1, #32
 8002646:	0010      	movs	r0, r2
 8002648:	0035      	movs	r5, r6
 800264a:	1ac9      	subs	r1, r1, r3
 800264c:	408e      	lsls	r6, r1
 800264e:	40da      	lsrs	r2, r3
 8002650:	4088      	lsls	r0, r1
 8002652:	40dd      	lsrs	r5, r3
 8002654:	1e71      	subs	r1, r6, #1
 8002656:	418e      	sbcs	r6, r1
 8002658:	0011      	movs	r1, r2
 800265a:	2207      	movs	r2, #7
 800265c:	4328      	orrs	r0, r5
 800265e:	2500      	movs	r5, #0
 8002660:	4306      	orrs	r6, r0
 8002662:	4032      	ands	r2, r6
 8002664:	2a00      	cmp	r2, #0
 8002666:	d009      	beq.n	800267c <__aeabi_dsub+0xf8>
 8002668:	230f      	movs	r3, #15
 800266a:	4033      	ands	r3, r6
 800266c:	2b04      	cmp	r3, #4
 800266e:	d005      	beq.n	800267c <__aeabi_dsub+0xf8>
 8002670:	1d33      	adds	r3, r6, #4
 8002672:	42b3      	cmp	r3, r6
 8002674:	41b6      	sbcs	r6, r6
 8002676:	4276      	negs	r6, r6
 8002678:	1989      	adds	r1, r1, r6
 800267a:	001e      	movs	r6, r3
 800267c:	020b      	lsls	r3, r1, #8
 800267e:	d400      	bmi.n	8002682 <__aeabi_dsub+0xfe>
 8002680:	e23d      	b.n	8002afe <__aeabi_dsub+0x57a>
 8002682:	1c6a      	adds	r2, r5, #1
 8002684:	4b91      	ldr	r3, [pc, #580]	; (80028cc <__aeabi_dsub+0x348>)
 8002686:	0555      	lsls	r5, r2, #21
 8002688:	0d6d      	lsrs	r5, r5, #21
 800268a:	429a      	cmp	r2, r3
 800268c:	d100      	bne.n	8002690 <__aeabi_dsub+0x10c>
 800268e:	e119      	b.n	80028c4 <__aeabi_dsub+0x340>
 8002690:	4a8f      	ldr	r2, [pc, #572]	; (80028d0 <__aeabi_dsub+0x34c>)
 8002692:	08f6      	lsrs	r6, r6, #3
 8002694:	400a      	ands	r2, r1
 8002696:	0757      	lsls	r7, r2, #29
 8002698:	0252      	lsls	r2, r2, #9
 800269a:	4337      	orrs	r7, r6
 800269c:	0b12      	lsrs	r2, r2, #12
 800269e:	e09b      	b.n	80027d8 <__aeabi_dsub+0x254>
 80026a0:	2e00      	cmp	r6, #0
 80026a2:	d000      	beq.n	80026a6 <__aeabi_dsub+0x122>
 80026a4:	e0c5      	b.n	8002832 <__aeabi_dsub+0x2ae>
 80026a6:	1c6e      	adds	r6, r5, #1
 80026a8:	0576      	lsls	r6, r6, #21
 80026aa:	0d76      	lsrs	r6, r6, #21
 80026ac:	2e01      	cmp	r6, #1
 80026ae:	dc00      	bgt.n	80026b2 <__aeabi_dsub+0x12e>
 80026b0:	e148      	b.n	8002944 <__aeabi_dsub+0x3c0>
 80026b2:	4667      	mov	r7, ip
 80026b4:	1a86      	subs	r6, r0, r2
 80026b6:	1bcb      	subs	r3, r1, r7
 80026b8:	42b0      	cmp	r0, r6
 80026ba:	41bf      	sbcs	r7, r7
 80026bc:	427f      	negs	r7, r7
 80026be:	46b8      	mov	r8, r7
 80026c0:	001f      	movs	r7, r3
 80026c2:	4643      	mov	r3, r8
 80026c4:	1aff      	subs	r7, r7, r3
 80026c6:	003b      	movs	r3, r7
 80026c8:	46b8      	mov	r8, r7
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	d500      	bpl.n	80026d0 <__aeabi_dsub+0x14c>
 80026ce:	e15f      	b.n	8002990 <__aeabi_dsub+0x40c>
 80026d0:	4337      	orrs	r7, r6
 80026d2:	d19a      	bne.n	800260a <__aeabi_dsub+0x86>
 80026d4:	2200      	movs	r2, #0
 80026d6:	2400      	movs	r4, #0
 80026d8:	2500      	movs	r5, #0
 80026da:	e079      	b.n	80027d0 <__aeabi_dsub+0x24c>
 80026dc:	2e00      	cmp	r6, #0
 80026de:	dc00      	bgt.n	80026e2 <__aeabi_dsub+0x15e>
 80026e0:	e0fa      	b.n	80028d8 <__aeabi_dsub+0x354>
 80026e2:	2f00      	cmp	r7, #0
 80026e4:	d100      	bne.n	80026e8 <__aeabi_dsub+0x164>
 80026e6:	e08d      	b.n	8002804 <__aeabi_dsub+0x280>
 80026e8:	4b78      	ldr	r3, [pc, #480]	; (80028cc <__aeabi_dsub+0x348>)
 80026ea:	429d      	cmp	r5, r3
 80026ec:	d067      	beq.n	80027be <__aeabi_dsub+0x23a>
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	4667      	mov	r7, ip
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	431f      	orrs	r7, r3
 80026f6:	46bc      	mov	ip, r7
 80026f8:	2e38      	cmp	r6, #56	; 0x38
 80026fa:	dc00      	bgt.n	80026fe <__aeabi_dsub+0x17a>
 80026fc:	e152      	b.n	80029a4 <__aeabi_dsub+0x420>
 80026fe:	4663      	mov	r3, ip
 8002700:	4313      	orrs	r3, r2
 8002702:	1e5a      	subs	r2, r3, #1
 8002704:	4193      	sbcs	r3, r2
 8002706:	181e      	adds	r6, r3, r0
 8002708:	4286      	cmp	r6, r0
 800270a:	4180      	sbcs	r0, r0
 800270c:	4240      	negs	r0, r0
 800270e:	1809      	adds	r1, r1, r0
 8002710:	020b      	lsls	r3, r1, #8
 8002712:	d400      	bmi.n	8002716 <__aeabi_dsub+0x192>
 8002714:	e0be      	b.n	8002894 <__aeabi_dsub+0x310>
 8002716:	4b6d      	ldr	r3, [pc, #436]	; (80028cc <__aeabi_dsub+0x348>)
 8002718:	3501      	adds	r5, #1
 800271a:	429d      	cmp	r5, r3
 800271c:	d100      	bne.n	8002720 <__aeabi_dsub+0x19c>
 800271e:	e0d2      	b.n	80028c6 <__aeabi_dsub+0x342>
 8002720:	4a6b      	ldr	r2, [pc, #428]	; (80028d0 <__aeabi_dsub+0x34c>)
 8002722:	0873      	lsrs	r3, r6, #1
 8002724:	400a      	ands	r2, r1
 8002726:	2101      	movs	r1, #1
 8002728:	400e      	ands	r6, r1
 800272a:	431e      	orrs	r6, r3
 800272c:	0851      	lsrs	r1, r2, #1
 800272e:	07d3      	lsls	r3, r2, #31
 8002730:	2207      	movs	r2, #7
 8002732:	431e      	orrs	r6, r3
 8002734:	4032      	ands	r2, r6
 8002736:	e795      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002738:	001e      	movs	r6, r3
 800273a:	4316      	orrs	r6, r2
 800273c:	d000      	beq.n	8002740 <__aeabi_dsub+0x1bc>
 800273e:	e745      	b.n	80025cc <__aeabi_dsub+0x48>
 8002740:	e740      	b.n	80025c4 <__aeabi_dsub+0x40>
 8002742:	4b62      	ldr	r3, [pc, #392]	; (80028cc <__aeabi_dsub+0x348>)
 8002744:	429d      	cmp	r5, r3
 8002746:	d03a      	beq.n	80027be <__aeabi_dsub+0x23a>
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	4667      	mov	r7, ip
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	431f      	orrs	r7, r3
 8002750:	46bc      	mov	ip, r7
 8002752:	2e38      	cmp	r6, #56	; 0x38
 8002754:	dd00      	ble.n	8002758 <__aeabi_dsub+0x1d4>
 8002756:	e0eb      	b.n	8002930 <__aeabi_dsub+0x3ac>
 8002758:	2e1f      	cmp	r6, #31
 800275a:	dc00      	bgt.n	800275e <__aeabi_dsub+0x1da>
 800275c:	e13a      	b.n	80029d4 <__aeabi_dsub+0x450>
 800275e:	0033      	movs	r3, r6
 8002760:	4667      	mov	r7, ip
 8002762:	3b20      	subs	r3, #32
 8002764:	40df      	lsrs	r7, r3
 8002766:	003b      	movs	r3, r7
 8002768:	2e20      	cmp	r6, #32
 800276a:	d005      	beq.n	8002778 <__aeabi_dsub+0x1f4>
 800276c:	2740      	movs	r7, #64	; 0x40
 800276e:	1bbf      	subs	r7, r7, r6
 8002770:	4666      	mov	r6, ip
 8002772:	40be      	lsls	r6, r7
 8002774:	4332      	orrs	r2, r6
 8002776:	4690      	mov	r8, r2
 8002778:	4646      	mov	r6, r8
 800277a:	1e72      	subs	r2, r6, #1
 800277c:	4196      	sbcs	r6, r2
 800277e:	4333      	orrs	r3, r6
 8002780:	e0da      	b.n	8002938 <__aeabi_dsub+0x3b4>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d100      	bne.n	8002788 <__aeabi_dsub+0x204>
 8002786:	e214      	b.n	8002bb2 <__aeabi_dsub+0x62e>
 8002788:	4663      	mov	r3, ip
 800278a:	4313      	orrs	r3, r2
 800278c:	d100      	bne.n	8002790 <__aeabi_dsub+0x20c>
 800278e:	e168      	b.n	8002a62 <__aeabi_dsub+0x4de>
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	074e      	lsls	r6, r1, #29
 8002794:	08c0      	lsrs	r0, r0, #3
 8002796:	08c9      	lsrs	r1, r1, #3
 8002798:	031b      	lsls	r3, r3, #12
 800279a:	4306      	orrs	r6, r0
 800279c:	4219      	tst	r1, r3
 800279e:	d008      	beq.n	80027b2 <__aeabi_dsub+0x22e>
 80027a0:	4660      	mov	r0, ip
 80027a2:	08c0      	lsrs	r0, r0, #3
 80027a4:	4218      	tst	r0, r3
 80027a6:	d104      	bne.n	80027b2 <__aeabi_dsub+0x22e>
 80027a8:	4663      	mov	r3, ip
 80027aa:	0001      	movs	r1, r0
 80027ac:	08d2      	lsrs	r2, r2, #3
 80027ae:	075e      	lsls	r6, r3, #29
 80027b0:	4316      	orrs	r6, r2
 80027b2:	00f3      	lsls	r3, r6, #3
 80027b4:	4699      	mov	r9, r3
 80027b6:	00c9      	lsls	r1, r1, #3
 80027b8:	0f72      	lsrs	r2, r6, #29
 80027ba:	4d44      	ldr	r5, [pc, #272]	; (80028cc <__aeabi_dsub+0x348>)
 80027bc:	4311      	orrs	r1, r2
 80027be:	464b      	mov	r3, r9
 80027c0:	08de      	lsrs	r6, r3, #3
 80027c2:	4b42      	ldr	r3, [pc, #264]	; (80028cc <__aeabi_dsub+0x348>)
 80027c4:	074f      	lsls	r7, r1, #29
 80027c6:	4337      	orrs	r7, r6
 80027c8:	08ca      	lsrs	r2, r1, #3
 80027ca:	429d      	cmp	r5, r3
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x24c>
 80027ce:	e06e      	b.n	80028ae <__aeabi_dsub+0x32a>
 80027d0:	0312      	lsls	r2, r2, #12
 80027d2:	056d      	lsls	r5, r5, #21
 80027d4:	0b12      	lsrs	r2, r2, #12
 80027d6:	0d6d      	lsrs	r5, r5, #21
 80027d8:	2100      	movs	r1, #0
 80027da:	0312      	lsls	r2, r2, #12
 80027dc:	0b13      	lsrs	r3, r2, #12
 80027de:	0d0a      	lsrs	r2, r1, #20
 80027e0:	0512      	lsls	r2, r2, #20
 80027e2:	431a      	orrs	r2, r3
 80027e4:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <__aeabi_dsub+0x350>)
 80027e6:	052d      	lsls	r5, r5, #20
 80027e8:	4013      	ands	r3, r2
 80027ea:	432b      	orrs	r3, r5
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	07e4      	lsls	r4, r4, #31
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	4323      	orrs	r3, r4
 80027f4:	0038      	movs	r0, r7
 80027f6:	0019      	movs	r1, r3
 80027f8:	bc3c      	pop	{r2, r3, r4, r5}
 80027fa:	4690      	mov	r8, r2
 80027fc:	4699      	mov	r9, r3
 80027fe:	46a2      	mov	sl, r4
 8002800:	46ab      	mov	fp, r5
 8002802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002804:	4663      	mov	r3, ip
 8002806:	4313      	orrs	r3, r2
 8002808:	d011      	beq.n	800282e <__aeabi_dsub+0x2aa>
 800280a:	1e73      	subs	r3, r6, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d000      	beq.n	8002812 <__aeabi_dsub+0x28e>
 8002810:	e107      	b.n	8002a22 <__aeabi_dsub+0x49e>
 8002812:	1886      	adds	r6, r0, r2
 8002814:	4286      	cmp	r6, r0
 8002816:	4180      	sbcs	r0, r0
 8002818:	4461      	add	r1, ip
 800281a:	4240      	negs	r0, r0
 800281c:	1809      	adds	r1, r1, r0
 800281e:	2501      	movs	r5, #1
 8002820:	020b      	lsls	r3, r1, #8
 8002822:	d537      	bpl.n	8002894 <__aeabi_dsub+0x310>
 8002824:	2502      	movs	r5, #2
 8002826:	e77b      	b.n	8002720 <__aeabi_dsub+0x19c>
 8002828:	003e      	movs	r6, r7
 800282a:	4661      	mov	r1, ip
 800282c:	4691      	mov	r9, r2
 800282e:	0035      	movs	r5, r6
 8002830:	e7c5      	b.n	80027be <__aeabi_dsub+0x23a>
 8002832:	465c      	mov	r4, fp
 8002834:	2d00      	cmp	r5, #0
 8002836:	d000      	beq.n	800283a <__aeabi_dsub+0x2b6>
 8002838:	e0e1      	b.n	80029fe <__aeabi_dsub+0x47a>
 800283a:	000b      	movs	r3, r1
 800283c:	4303      	orrs	r3, r0
 800283e:	d0f3      	beq.n	8002828 <__aeabi_dsub+0x2a4>
 8002840:	1c73      	adds	r3, r6, #1
 8002842:	d100      	bne.n	8002846 <__aeabi_dsub+0x2c2>
 8002844:	e1ac      	b.n	8002ba0 <__aeabi_dsub+0x61c>
 8002846:	4b21      	ldr	r3, [pc, #132]	; (80028cc <__aeabi_dsub+0x348>)
 8002848:	429f      	cmp	r7, r3
 800284a:	d100      	bne.n	800284e <__aeabi_dsub+0x2ca>
 800284c:	e13a      	b.n	8002ac4 <__aeabi_dsub+0x540>
 800284e:	43f3      	mvns	r3, r6
 8002850:	2b38      	cmp	r3, #56	; 0x38
 8002852:	dd00      	ble.n	8002856 <__aeabi_dsub+0x2d2>
 8002854:	e16f      	b.n	8002b36 <__aeabi_dsub+0x5b2>
 8002856:	2b1f      	cmp	r3, #31
 8002858:	dd00      	ble.n	800285c <__aeabi_dsub+0x2d8>
 800285a:	e18c      	b.n	8002b76 <__aeabi_dsub+0x5f2>
 800285c:	2520      	movs	r5, #32
 800285e:	000e      	movs	r6, r1
 8002860:	1aed      	subs	r5, r5, r3
 8002862:	40ae      	lsls	r6, r5
 8002864:	46b0      	mov	r8, r6
 8002866:	0006      	movs	r6, r0
 8002868:	46aa      	mov	sl, r5
 800286a:	40de      	lsrs	r6, r3
 800286c:	4645      	mov	r5, r8
 800286e:	4335      	orrs	r5, r6
 8002870:	002e      	movs	r6, r5
 8002872:	4655      	mov	r5, sl
 8002874:	40d9      	lsrs	r1, r3
 8002876:	40a8      	lsls	r0, r5
 8002878:	4663      	mov	r3, ip
 800287a:	1e45      	subs	r5, r0, #1
 800287c:	41a8      	sbcs	r0, r5
 800287e:	1a5b      	subs	r3, r3, r1
 8002880:	469c      	mov	ip, r3
 8002882:	4330      	orrs	r0, r6
 8002884:	1a16      	subs	r6, r2, r0
 8002886:	42b2      	cmp	r2, r6
 8002888:	4192      	sbcs	r2, r2
 800288a:	4663      	mov	r3, ip
 800288c:	4252      	negs	r2, r2
 800288e:	1a99      	subs	r1, r3, r2
 8002890:	003d      	movs	r5, r7
 8002892:	e6b4      	b.n	80025fe <__aeabi_dsub+0x7a>
 8002894:	2207      	movs	r2, #7
 8002896:	4032      	ands	r2, r6
 8002898:	2a00      	cmp	r2, #0
 800289a:	d000      	beq.n	800289e <__aeabi_dsub+0x31a>
 800289c:	e6e4      	b.n	8002668 <__aeabi_dsub+0xe4>
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <__aeabi_dsub+0x348>)
 80028a0:	08f6      	lsrs	r6, r6, #3
 80028a2:	074f      	lsls	r7, r1, #29
 80028a4:	4337      	orrs	r7, r6
 80028a6:	08ca      	lsrs	r2, r1, #3
 80028a8:	429d      	cmp	r5, r3
 80028aa:	d000      	beq.n	80028ae <__aeabi_dsub+0x32a>
 80028ac:	e790      	b.n	80027d0 <__aeabi_dsub+0x24c>
 80028ae:	003b      	movs	r3, r7
 80028b0:	4313      	orrs	r3, r2
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dsub+0x332>
 80028b4:	e1a6      	b.n	8002c04 <__aeabi_dsub+0x680>
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	031b      	lsls	r3, r3, #12
 80028ba:	431a      	orrs	r2, r3
 80028bc:	0312      	lsls	r2, r2, #12
 80028be:	0b12      	lsrs	r2, r2, #12
 80028c0:	4d02      	ldr	r5, [pc, #8]	; (80028cc <__aeabi_dsub+0x348>)
 80028c2:	e789      	b.n	80027d8 <__aeabi_dsub+0x254>
 80028c4:	0015      	movs	r5, r2
 80028c6:	2200      	movs	r2, #0
 80028c8:	2700      	movs	r7, #0
 80028ca:	e785      	b.n	80027d8 <__aeabi_dsub+0x254>
 80028cc:	000007ff 	.word	0x000007ff
 80028d0:	ff7fffff 	.word	0xff7fffff
 80028d4:	800fffff 	.word	0x800fffff
 80028d8:	2e00      	cmp	r6, #0
 80028da:	d000      	beq.n	80028de <__aeabi_dsub+0x35a>
 80028dc:	e0c7      	b.n	8002a6e <__aeabi_dsub+0x4ea>
 80028de:	1c6b      	adds	r3, r5, #1
 80028e0:	055e      	lsls	r6, r3, #21
 80028e2:	0d76      	lsrs	r6, r6, #21
 80028e4:	2e01      	cmp	r6, #1
 80028e6:	dc00      	bgt.n	80028ea <__aeabi_dsub+0x366>
 80028e8:	e0f0      	b.n	8002acc <__aeabi_dsub+0x548>
 80028ea:	4dc8      	ldr	r5, [pc, #800]	; (8002c0c <__aeabi_dsub+0x688>)
 80028ec:	42ab      	cmp	r3, r5
 80028ee:	d100      	bne.n	80028f2 <__aeabi_dsub+0x36e>
 80028f0:	e0b9      	b.n	8002a66 <__aeabi_dsub+0x4e2>
 80028f2:	1885      	adds	r5, r0, r2
 80028f4:	000a      	movs	r2, r1
 80028f6:	4285      	cmp	r5, r0
 80028f8:	4189      	sbcs	r1, r1
 80028fa:	4462      	add	r2, ip
 80028fc:	4249      	negs	r1, r1
 80028fe:	1851      	adds	r1, r2, r1
 8002900:	2207      	movs	r2, #7
 8002902:	07ce      	lsls	r6, r1, #31
 8002904:	086d      	lsrs	r5, r5, #1
 8002906:	432e      	orrs	r6, r5
 8002908:	0849      	lsrs	r1, r1, #1
 800290a:	4032      	ands	r2, r6
 800290c:	001d      	movs	r5, r3
 800290e:	e6a9      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002910:	49bf      	ldr	r1, [pc, #764]	; (8002c10 <__aeabi_dsub+0x68c>)
 8002912:	1aed      	subs	r5, r5, r3
 8002914:	4011      	ands	r1, r2
 8002916:	2207      	movs	r2, #7
 8002918:	4032      	ands	r2, r6
 800291a:	e6a3      	b.n	8002664 <__aeabi_dsub+0xe0>
 800291c:	0032      	movs	r2, r6
 800291e:	3828      	subs	r0, #40	; 0x28
 8002920:	4082      	lsls	r2, r0
 8002922:	2600      	movs	r6, #0
 8002924:	e686      	b.n	8002634 <__aeabi_dsub+0xb0>
 8002926:	0030      	movs	r0, r6
 8002928:	f000 fb08 	bl	8002f3c <__clzsi2>
 800292c:	3020      	adds	r0, #32
 800292e:	e673      	b.n	8002618 <__aeabi_dsub+0x94>
 8002930:	4663      	mov	r3, ip
 8002932:	4313      	orrs	r3, r2
 8002934:	1e5a      	subs	r2, r3, #1
 8002936:	4193      	sbcs	r3, r2
 8002938:	1ac6      	subs	r6, r0, r3
 800293a:	42b0      	cmp	r0, r6
 800293c:	4180      	sbcs	r0, r0
 800293e:	4240      	negs	r0, r0
 8002940:	1a09      	subs	r1, r1, r0
 8002942:	e65c      	b.n	80025fe <__aeabi_dsub+0x7a>
 8002944:	000e      	movs	r6, r1
 8002946:	4667      	mov	r7, ip
 8002948:	4306      	orrs	r6, r0
 800294a:	4317      	orrs	r7, r2
 800294c:	2d00      	cmp	r5, #0
 800294e:	d15e      	bne.n	8002a0e <__aeabi_dsub+0x48a>
 8002950:	2e00      	cmp	r6, #0
 8002952:	d000      	beq.n	8002956 <__aeabi_dsub+0x3d2>
 8002954:	e0f3      	b.n	8002b3e <__aeabi_dsub+0x5ba>
 8002956:	2f00      	cmp	r7, #0
 8002958:	d100      	bne.n	800295c <__aeabi_dsub+0x3d8>
 800295a:	e11e      	b.n	8002b9a <__aeabi_dsub+0x616>
 800295c:	465c      	mov	r4, fp
 800295e:	4661      	mov	r1, ip
 8002960:	4691      	mov	r9, r2
 8002962:	e72c      	b.n	80027be <__aeabi_dsub+0x23a>
 8002964:	4fa9      	ldr	r7, [pc, #676]	; (8002c0c <__aeabi_dsub+0x688>)
 8002966:	42be      	cmp	r6, r7
 8002968:	d07b      	beq.n	8002a62 <__aeabi_dsub+0x4de>
 800296a:	001e      	movs	r6, r3
 800296c:	e6f1      	b.n	8002752 <__aeabi_dsub+0x1ce>
 800296e:	0010      	movs	r0, r2
 8002970:	3d1f      	subs	r5, #31
 8002972:	40e8      	lsrs	r0, r5
 8002974:	2b20      	cmp	r3, #32
 8002976:	d003      	beq.n	8002980 <__aeabi_dsub+0x3fc>
 8002978:	2140      	movs	r1, #64	; 0x40
 800297a:	1acb      	subs	r3, r1, r3
 800297c:	409a      	lsls	r2, r3
 800297e:	4316      	orrs	r6, r2
 8002980:	1e73      	subs	r3, r6, #1
 8002982:	419e      	sbcs	r6, r3
 8002984:	2207      	movs	r2, #7
 8002986:	4306      	orrs	r6, r0
 8002988:	4032      	ands	r2, r6
 800298a:	2100      	movs	r1, #0
 800298c:	2500      	movs	r5, #0
 800298e:	e783      	b.n	8002898 <__aeabi_dsub+0x314>
 8002990:	1a16      	subs	r6, r2, r0
 8002992:	4663      	mov	r3, ip
 8002994:	42b2      	cmp	r2, r6
 8002996:	4180      	sbcs	r0, r0
 8002998:	1a59      	subs	r1, r3, r1
 800299a:	4240      	negs	r0, r0
 800299c:	1a0b      	subs	r3, r1, r0
 800299e:	4698      	mov	r8, r3
 80029a0:	465c      	mov	r4, fp
 80029a2:	e632      	b.n	800260a <__aeabi_dsub+0x86>
 80029a4:	2e1f      	cmp	r6, #31
 80029a6:	dd00      	ble.n	80029aa <__aeabi_dsub+0x426>
 80029a8:	e0ab      	b.n	8002b02 <__aeabi_dsub+0x57e>
 80029aa:	2720      	movs	r7, #32
 80029ac:	1bbb      	subs	r3, r7, r6
 80029ae:	469a      	mov	sl, r3
 80029b0:	4663      	mov	r3, ip
 80029b2:	4657      	mov	r7, sl
 80029b4:	40bb      	lsls	r3, r7
 80029b6:	4699      	mov	r9, r3
 80029b8:	0013      	movs	r3, r2
 80029ba:	464f      	mov	r7, r9
 80029bc:	40f3      	lsrs	r3, r6
 80029be:	431f      	orrs	r7, r3
 80029c0:	003b      	movs	r3, r7
 80029c2:	4657      	mov	r7, sl
 80029c4:	40ba      	lsls	r2, r7
 80029c6:	1e57      	subs	r7, r2, #1
 80029c8:	41ba      	sbcs	r2, r7
 80029ca:	4313      	orrs	r3, r2
 80029cc:	4662      	mov	r2, ip
 80029ce:	40f2      	lsrs	r2, r6
 80029d0:	1889      	adds	r1, r1, r2
 80029d2:	e698      	b.n	8002706 <__aeabi_dsub+0x182>
 80029d4:	2720      	movs	r7, #32
 80029d6:	1bbb      	subs	r3, r7, r6
 80029d8:	469a      	mov	sl, r3
 80029da:	4663      	mov	r3, ip
 80029dc:	4657      	mov	r7, sl
 80029de:	40bb      	lsls	r3, r7
 80029e0:	4699      	mov	r9, r3
 80029e2:	0013      	movs	r3, r2
 80029e4:	464f      	mov	r7, r9
 80029e6:	40f3      	lsrs	r3, r6
 80029e8:	431f      	orrs	r7, r3
 80029ea:	003b      	movs	r3, r7
 80029ec:	4657      	mov	r7, sl
 80029ee:	40ba      	lsls	r2, r7
 80029f0:	1e57      	subs	r7, r2, #1
 80029f2:	41ba      	sbcs	r2, r7
 80029f4:	4313      	orrs	r3, r2
 80029f6:	4662      	mov	r2, ip
 80029f8:	40f2      	lsrs	r2, r6
 80029fa:	1a89      	subs	r1, r1, r2
 80029fc:	e79c      	b.n	8002938 <__aeabi_dsub+0x3b4>
 80029fe:	4b83      	ldr	r3, [pc, #524]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a00:	429f      	cmp	r7, r3
 8002a02:	d05f      	beq.n	8002ac4 <__aeabi_dsub+0x540>
 8002a04:	2580      	movs	r5, #128	; 0x80
 8002a06:	042d      	lsls	r5, r5, #16
 8002a08:	4273      	negs	r3, r6
 8002a0a:	4329      	orrs	r1, r5
 8002a0c:	e720      	b.n	8002850 <__aeabi_dsub+0x2cc>
 8002a0e:	2e00      	cmp	r6, #0
 8002a10:	d10c      	bne.n	8002a2c <__aeabi_dsub+0x4a8>
 8002a12:	2f00      	cmp	r7, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_dsub+0x494>
 8002a16:	e0d0      	b.n	8002bba <__aeabi_dsub+0x636>
 8002a18:	465c      	mov	r4, fp
 8002a1a:	4661      	mov	r1, ip
 8002a1c:	4691      	mov	r9, r2
 8002a1e:	4d7b      	ldr	r5, [pc, #492]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a20:	e6cd      	b.n	80027be <__aeabi_dsub+0x23a>
 8002a22:	4f7a      	ldr	r7, [pc, #488]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a24:	42be      	cmp	r6, r7
 8002a26:	d01c      	beq.n	8002a62 <__aeabi_dsub+0x4de>
 8002a28:	001e      	movs	r6, r3
 8002a2a:	e665      	b.n	80026f8 <__aeabi_dsub+0x174>
 8002a2c:	2f00      	cmp	r7, #0
 8002a2e:	d018      	beq.n	8002a62 <__aeabi_dsub+0x4de>
 8002a30:	08c0      	lsrs	r0, r0, #3
 8002a32:	074e      	lsls	r6, r1, #29
 8002a34:	4306      	orrs	r6, r0
 8002a36:	2080      	movs	r0, #128	; 0x80
 8002a38:	08c9      	lsrs	r1, r1, #3
 8002a3a:	0300      	lsls	r0, r0, #12
 8002a3c:	4201      	tst	r1, r0
 8002a3e:	d008      	beq.n	8002a52 <__aeabi_dsub+0x4ce>
 8002a40:	4663      	mov	r3, ip
 8002a42:	08dc      	lsrs	r4, r3, #3
 8002a44:	4204      	tst	r4, r0
 8002a46:	d104      	bne.n	8002a52 <__aeabi_dsub+0x4ce>
 8002a48:	0021      	movs	r1, r4
 8002a4a:	46da      	mov	sl, fp
 8002a4c:	08d2      	lsrs	r2, r2, #3
 8002a4e:	075e      	lsls	r6, r3, #29
 8002a50:	4316      	orrs	r6, r2
 8002a52:	00f3      	lsls	r3, r6, #3
 8002a54:	4699      	mov	r9, r3
 8002a56:	2401      	movs	r4, #1
 8002a58:	4653      	mov	r3, sl
 8002a5a:	00c9      	lsls	r1, r1, #3
 8002a5c:	0f72      	lsrs	r2, r6, #29
 8002a5e:	4311      	orrs	r1, r2
 8002a60:	401c      	ands	r4, r3
 8002a62:	4d6a      	ldr	r5, [pc, #424]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a64:	e6ab      	b.n	80027be <__aeabi_dsub+0x23a>
 8002a66:	001d      	movs	r5, r3
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2700      	movs	r7, #0
 8002a6c:	e6b4      	b.n	80027d8 <__aeabi_dsub+0x254>
 8002a6e:	2d00      	cmp	r5, #0
 8002a70:	d159      	bne.n	8002b26 <__aeabi_dsub+0x5a2>
 8002a72:	000b      	movs	r3, r1
 8002a74:	4303      	orrs	r3, r0
 8002a76:	d100      	bne.n	8002a7a <__aeabi_dsub+0x4f6>
 8002a78:	e6d6      	b.n	8002828 <__aeabi_dsub+0x2a4>
 8002a7a:	1c73      	adds	r3, r6, #1
 8002a7c:	d100      	bne.n	8002a80 <__aeabi_dsub+0x4fc>
 8002a7e:	e0b2      	b.n	8002be6 <__aeabi_dsub+0x662>
 8002a80:	4b62      	ldr	r3, [pc, #392]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a82:	429f      	cmp	r7, r3
 8002a84:	d01e      	beq.n	8002ac4 <__aeabi_dsub+0x540>
 8002a86:	43f3      	mvns	r3, r6
 8002a88:	2b38      	cmp	r3, #56	; 0x38
 8002a8a:	dc6f      	bgt.n	8002b6c <__aeabi_dsub+0x5e8>
 8002a8c:	2b1f      	cmp	r3, #31
 8002a8e:	dd00      	ble.n	8002a92 <__aeabi_dsub+0x50e>
 8002a90:	e097      	b.n	8002bc2 <__aeabi_dsub+0x63e>
 8002a92:	2520      	movs	r5, #32
 8002a94:	000e      	movs	r6, r1
 8002a96:	1aed      	subs	r5, r5, r3
 8002a98:	40ae      	lsls	r6, r5
 8002a9a:	46b0      	mov	r8, r6
 8002a9c:	0006      	movs	r6, r0
 8002a9e:	46aa      	mov	sl, r5
 8002aa0:	40de      	lsrs	r6, r3
 8002aa2:	4645      	mov	r5, r8
 8002aa4:	4335      	orrs	r5, r6
 8002aa6:	002e      	movs	r6, r5
 8002aa8:	4655      	mov	r5, sl
 8002aaa:	40a8      	lsls	r0, r5
 8002aac:	40d9      	lsrs	r1, r3
 8002aae:	1e45      	subs	r5, r0, #1
 8002ab0:	41a8      	sbcs	r0, r5
 8002ab2:	448c      	add	ip, r1
 8002ab4:	4306      	orrs	r6, r0
 8002ab6:	18b6      	adds	r6, r6, r2
 8002ab8:	4296      	cmp	r6, r2
 8002aba:	4192      	sbcs	r2, r2
 8002abc:	4251      	negs	r1, r2
 8002abe:	4461      	add	r1, ip
 8002ac0:	003d      	movs	r5, r7
 8002ac2:	e625      	b.n	8002710 <__aeabi_dsub+0x18c>
 8002ac4:	003d      	movs	r5, r7
 8002ac6:	4661      	mov	r1, ip
 8002ac8:	4691      	mov	r9, r2
 8002aca:	e678      	b.n	80027be <__aeabi_dsub+0x23a>
 8002acc:	000b      	movs	r3, r1
 8002ace:	4303      	orrs	r3, r0
 8002ad0:	2d00      	cmp	r5, #0
 8002ad2:	d000      	beq.n	8002ad6 <__aeabi_dsub+0x552>
 8002ad4:	e655      	b.n	8002782 <__aeabi_dsub+0x1fe>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f5      	beq.n	8002ac6 <__aeabi_dsub+0x542>
 8002ada:	4663      	mov	r3, ip
 8002adc:	4313      	orrs	r3, r2
 8002ade:	d100      	bne.n	8002ae2 <__aeabi_dsub+0x55e>
 8002ae0:	e66d      	b.n	80027be <__aeabi_dsub+0x23a>
 8002ae2:	1886      	adds	r6, r0, r2
 8002ae4:	4286      	cmp	r6, r0
 8002ae6:	4180      	sbcs	r0, r0
 8002ae8:	4461      	add	r1, ip
 8002aea:	4240      	negs	r0, r0
 8002aec:	1809      	adds	r1, r1, r0
 8002aee:	2200      	movs	r2, #0
 8002af0:	020b      	lsls	r3, r1, #8
 8002af2:	d400      	bmi.n	8002af6 <__aeabi_dsub+0x572>
 8002af4:	e6d0      	b.n	8002898 <__aeabi_dsub+0x314>
 8002af6:	4b46      	ldr	r3, [pc, #280]	; (8002c10 <__aeabi_dsub+0x68c>)
 8002af8:	3501      	adds	r5, #1
 8002afa:	4019      	ands	r1, r3
 8002afc:	e5b2      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002afe:	46b1      	mov	r9, r6
 8002b00:	e65d      	b.n	80027be <__aeabi_dsub+0x23a>
 8002b02:	0033      	movs	r3, r6
 8002b04:	4667      	mov	r7, ip
 8002b06:	3b20      	subs	r3, #32
 8002b08:	40df      	lsrs	r7, r3
 8002b0a:	003b      	movs	r3, r7
 8002b0c:	2e20      	cmp	r6, #32
 8002b0e:	d005      	beq.n	8002b1c <__aeabi_dsub+0x598>
 8002b10:	2740      	movs	r7, #64	; 0x40
 8002b12:	1bbf      	subs	r7, r7, r6
 8002b14:	4666      	mov	r6, ip
 8002b16:	40be      	lsls	r6, r7
 8002b18:	4332      	orrs	r2, r6
 8002b1a:	4690      	mov	r8, r2
 8002b1c:	4646      	mov	r6, r8
 8002b1e:	1e72      	subs	r2, r6, #1
 8002b20:	4196      	sbcs	r6, r2
 8002b22:	4333      	orrs	r3, r6
 8002b24:	e5ef      	b.n	8002706 <__aeabi_dsub+0x182>
 8002b26:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <__aeabi_dsub+0x688>)
 8002b28:	429f      	cmp	r7, r3
 8002b2a:	d0cb      	beq.n	8002ac4 <__aeabi_dsub+0x540>
 8002b2c:	2580      	movs	r5, #128	; 0x80
 8002b2e:	042d      	lsls	r5, r5, #16
 8002b30:	4273      	negs	r3, r6
 8002b32:	4329      	orrs	r1, r5
 8002b34:	e7a8      	b.n	8002a88 <__aeabi_dsub+0x504>
 8002b36:	4308      	orrs	r0, r1
 8002b38:	1e41      	subs	r1, r0, #1
 8002b3a:	4188      	sbcs	r0, r1
 8002b3c:	e6a2      	b.n	8002884 <__aeabi_dsub+0x300>
 8002b3e:	2f00      	cmp	r7, #0
 8002b40:	d100      	bne.n	8002b44 <__aeabi_dsub+0x5c0>
 8002b42:	e63c      	b.n	80027be <__aeabi_dsub+0x23a>
 8002b44:	4663      	mov	r3, ip
 8002b46:	1a86      	subs	r6, r0, r2
 8002b48:	1acf      	subs	r7, r1, r3
 8002b4a:	42b0      	cmp	r0, r6
 8002b4c:	419b      	sbcs	r3, r3
 8002b4e:	425b      	negs	r3, r3
 8002b50:	1afb      	subs	r3, r7, r3
 8002b52:	4698      	mov	r8, r3
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	d54e      	bpl.n	8002bf6 <__aeabi_dsub+0x672>
 8002b58:	1a16      	subs	r6, r2, r0
 8002b5a:	4663      	mov	r3, ip
 8002b5c:	42b2      	cmp	r2, r6
 8002b5e:	4192      	sbcs	r2, r2
 8002b60:	1a59      	subs	r1, r3, r1
 8002b62:	4252      	negs	r2, r2
 8002b64:	1a89      	subs	r1, r1, r2
 8002b66:	465c      	mov	r4, fp
 8002b68:	2200      	movs	r2, #0
 8002b6a:	e57b      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002b6c:	4301      	orrs	r1, r0
 8002b6e:	000e      	movs	r6, r1
 8002b70:	1e71      	subs	r1, r6, #1
 8002b72:	418e      	sbcs	r6, r1
 8002b74:	e79f      	b.n	8002ab6 <__aeabi_dsub+0x532>
 8002b76:	001d      	movs	r5, r3
 8002b78:	000e      	movs	r6, r1
 8002b7a:	3d20      	subs	r5, #32
 8002b7c:	40ee      	lsrs	r6, r5
 8002b7e:	46b0      	mov	r8, r6
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d004      	beq.n	8002b8e <__aeabi_dsub+0x60a>
 8002b84:	2540      	movs	r5, #64	; 0x40
 8002b86:	1aeb      	subs	r3, r5, r3
 8002b88:	4099      	lsls	r1, r3
 8002b8a:	4308      	orrs	r0, r1
 8002b8c:	4681      	mov	r9, r0
 8002b8e:	4648      	mov	r0, r9
 8002b90:	4643      	mov	r3, r8
 8002b92:	1e41      	subs	r1, r0, #1
 8002b94:	4188      	sbcs	r0, r1
 8002b96:	4318      	orrs	r0, r3
 8002b98:	e674      	b.n	8002884 <__aeabi_dsub+0x300>
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2400      	movs	r4, #0
 8002b9e:	e617      	b.n	80027d0 <__aeabi_dsub+0x24c>
 8002ba0:	1a16      	subs	r6, r2, r0
 8002ba2:	4663      	mov	r3, ip
 8002ba4:	42b2      	cmp	r2, r6
 8002ba6:	4192      	sbcs	r2, r2
 8002ba8:	1a59      	subs	r1, r3, r1
 8002baa:	4252      	negs	r2, r2
 8002bac:	1a89      	subs	r1, r1, r2
 8002bae:	003d      	movs	r5, r7
 8002bb0:	e525      	b.n	80025fe <__aeabi_dsub+0x7a>
 8002bb2:	4661      	mov	r1, ip
 8002bb4:	4691      	mov	r9, r2
 8002bb6:	4d15      	ldr	r5, [pc, #84]	; (8002c0c <__aeabi_dsub+0x688>)
 8002bb8:	e601      	b.n	80027be <__aeabi_dsub+0x23a>
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	0312      	lsls	r2, r2, #12
 8002bc0:	e679      	b.n	80028b6 <__aeabi_dsub+0x332>
 8002bc2:	001d      	movs	r5, r3
 8002bc4:	000e      	movs	r6, r1
 8002bc6:	3d20      	subs	r5, #32
 8002bc8:	40ee      	lsrs	r6, r5
 8002bca:	46b0      	mov	r8, r6
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d004      	beq.n	8002bda <__aeabi_dsub+0x656>
 8002bd0:	2540      	movs	r5, #64	; 0x40
 8002bd2:	1aeb      	subs	r3, r5, r3
 8002bd4:	4099      	lsls	r1, r3
 8002bd6:	4308      	orrs	r0, r1
 8002bd8:	4681      	mov	r9, r0
 8002bda:	464e      	mov	r6, r9
 8002bdc:	4643      	mov	r3, r8
 8002bde:	1e71      	subs	r1, r6, #1
 8002be0:	418e      	sbcs	r6, r1
 8002be2:	431e      	orrs	r6, r3
 8002be4:	e767      	b.n	8002ab6 <__aeabi_dsub+0x532>
 8002be6:	1886      	adds	r6, r0, r2
 8002be8:	4296      	cmp	r6, r2
 8002bea:	419b      	sbcs	r3, r3
 8002bec:	4461      	add	r1, ip
 8002bee:	425b      	negs	r3, r3
 8002bf0:	18c9      	adds	r1, r1, r3
 8002bf2:	003d      	movs	r5, r7
 8002bf4:	e58c      	b.n	8002710 <__aeabi_dsub+0x18c>
 8002bf6:	4647      	mov	r7, r8
 8002bf8:	4337      	orrs	r7, r6
 8002bfa:	d0ce      	beq.n	8002b9a <__aeabi_dsub+0x616>
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	4641      	mov	r1, r8
 8002c00:	4032      	ands	r2, r6
 8002c02:	e649      	b.n	8002898 <__aeabi_dsub+0x314>
 8002c04:	2700      	movs	r7, #0
 8002c06:	003a      	movs	r2, r7
 8002c08:	e5e6      	b.n	80027d8 <__aeabi_dsub+0x254>
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	000007ff 	.word	0x000007ff
 8002c10:	ff7fffff 	.word	0xff7fffff

08002c14 <__aeabi_dcmpun>:
 8002c14:	b570      	push	{r4, r5, r6, lr}
 8002c16:	4e0c      	ldr	r6, [pc, #48]	; (8002c48 <__aeabi_dcmpun+0x34>)
 8002c18:	030d      	lsls	r5, r1, #12
 8002c1a:	031c      	lsls	r4, r3, #12
 8002c1c:	0049      	lsls	r1, r1, #1
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	0b2d      	lsrs	r5, r5, #12
 8002c22:	0d49      	lsrs	r1, r1, #21
 8002c24:	0b24      	lsrs	r4, r4, #12
 8002c26:	0d5b      	lsrs	r3, r3, #21
 8002c28:	42b1      	cmp	r1, r6
 8002c2a:	d008      	beq.n	8002c3e <__aeabi_dcmpun+0x2a>
 8002c2c:	4906      	ldr	r1, [pc, #24]	; (8002c48 <__aeabi_dcmpun+0x34>)
 8002c2e:	2000      	movs	r0, #0
 8002c30:	428b      	cmp	r3, r1
 8002c32:	d103      	bne.n	8002c3c <__aeabi_dcmpun+0x28>
 8002c34:	4314      	orrs	r4, r2
 8002c36:	0020      	movs	r0, r4
 8002c38:	1e44      	subs	r4, r0, #1
 8002c3a:	41a0      	sbcs	r0, r4
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
 8002c3e:	4305      	orrs	r5, r0
 8002c40:	2001      	movs	r0, #1
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	d1fa      	bne.n	8002c3c <__aeabi_dcmpun+0x28>
 8002c46:	e7f1      	b.n	8002c2c <__aeabi_dcmpun+0x18>
 8002c48:	000007ff 	.word	0x000007ff

08002c4c <__aeabi_d2iz>:
 8002c4c:	b530      	push	{r4, r5, lr}
 8002c4e:	4d14      	ldr	r5, [pc, #80]	; (8002ca0 <__aeabi_d2iz+0x54>)
 8002c50:	030a      	lsls	r2, r1, #12
 8002c52:	004b      	lsls	r3, r1, #1
 8002c54:	0b12      	lsrs	r2, r2, #12
 8002c56:	0d5b      	lsrs	r3, r3, #21
 8002c58:	0fc9      	lsrs	r1, r1, #31
 8002c5a:	2400      	movs	r4, #0
 8002c5c:	42ab      	cmp	r3, r5
 8002c5e:	dd11      	ble.n	8002c84 <__aeabi_d2iz+0x38>
 8002c60:	4c10      	ldr	r4, [pc, #64]	; (8002ca4 <__aeabi_d2iz+0x58>)
 8002c62:	42a3      	cmp	r3, r4
 8002c64:	dc10      	bgt.n	8002c88 <__aeabi_d2iz+0x3c>
 8002c66:	2480      	movs	r4, #128	; 0x80
 8002c68:	0364      	lsls	r4, r4, #13
 8002c6a:	4322      	orrs	r2, r4
 8002c6c:	4c0e      	ldr	r4, [pc, #56]	; (8002ca8 <__aeabi_d2iz+0x5c>)
 8002c6e:	1ae4      	subs	r4, r4, r3
 8002c70:	2c1f      	cmp	r4, #31
 8002c72:	dd0c      	ble.n	8002c8e <__aeabi_d2iz+0x42>
 8002c74:	480d      	ldr	r0, [pc, #52]	; (8002cac <__aeabi_d2iz+0x60>)
 8002c76:	1ac3      	subs	r3, r0, r3
 8002c78:	40da      	lsrs	r2, r3
 8002c7a:	0013      	movs	r3, r2
 8002c7c:	425c      	negs	r4, r3
 8002c7e:	2900      	cmp	r1, #0
 8002c80:	d100      	bne.n	8002c84 <__aeabi_d2iz+0x38>
 8002c82:	001c      	movs	r4, r3
 8002c84:	0020      	movs	r0, r4
 8002c86:	bd30      	pop	{r4, r5, pc}
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <__aeabi_d2iz+0x64>)
 8002c8a:	18cc      	adds	r4, r1, r3
 8002c8c:	e7fa      	b.n	8002c84 <__aeabi_d2iz+0x38>
 8002c8e:	4d09      	ldr	r5, [pc, #36]	; (8002cb4 <__aeabi_d2iz+0x68>)
 8002c90:	40e0      	lsrs	r0, r4
 8002c92:	46ac      	mov	ip, r5
 8002c94:	4463      	add	r3, ip
 8002c96:	409a      	lsls	r2, r3
 8002c98:	0013      	movs	r3, r2
 8002c9a:	4303      	orrs	r3, r0
 8002c9c:	e7ee      	b.n	8002c7c <__aeabi_d2iz+0x30>
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	000003fe 	.word	0x000003fe
 8002ca4:	0000041d 	.word	0x0000041d
 8002ca8:	00000433 	.word	0x00000433
 8002cac:	00000413 	.word	0x00000413
 8002cb0:	7fffffff 	.word	0x7fffffff
 8002cb4:	fffffbed 	.word	0xfffffbed

08002cb8 <__aeabi_i2d>:
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d02d      	beq.n	8002d1a <__aeabi_i2d+0x62>
 8002cbe:	17c3      	asrs	r3, r0, #31
 8002cc0:	18c5      	adds	r5, r0, r3
 8002cc2:	405d      	eors	r5, r3
 8002cc4:	0fc4      	lsrs	r4, r0, #31
 8002cc6:	0028      	movs	r0, r5
 8002cc8:	f000 f938 	bl	8002f3c <__clzsi2>
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <__aeabi_i2d+0x6c>)
 8002cce:	1a1b      	subs	r3, r3, r0
 8002cd0:	055b      	lsls	r3, r3, #21
 8002cd2:	0d5b      	lsrs	r3, r3, #21
 8002cd4:	280a      	cmp	r0, #10
 8002cd6:	dd15      	ble.n	8002d04 <__aeabi_i2d+0x4c>
 8002cd8:	380b      	subs	r0, #11
 8002cda:	4085      	lsls	r5, r0
 8002cdc:	2200      	movs	r2, #0
 8002cde:	032d      	lsls	r5, r5, #12
 8002ce0:	0b2d      	lsrs	r5, r5, #12
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	0010      	movs	r0, r2
 8002ce6:	032d      	lsls	r5, r5, #12
 8002ce8:	0d0a      	lsrs	r2, r1, #20
 8002cea:	0b2d      	lsrs	r5, r5, #12
 8002cec:	0512      	lsls	r2, r2, #20
 8002cee:	432a      	orrs	r2, r5
 8002cf0:	4d0d      	ldr	r5, [pc, #52]	; (8002d28 <__aeabi_i2d+0x70>)
 8002cf2:	051b      	lsls	r3, r3, #20
 8002cf4:	402a      	ands	r2, r5
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	07e4      	lsls	r4, r4, #31
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	4323      	orrs	r3, r4
 8002d00:	0019      	movs	r1, r3
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
 8002d04:	0002      	movs	r2, r0
 8002d06:	0029      	movs	r1, r5
 8002d08:	3215      	adds	r2, #21
 8002d0a:	4091      	lsls	r1, r2
 8002d0c:	000a      	movs	r2, r1
 8002d0e:	210b      	movs	r1, #11
 8002d10:	1a08      	subs	r0, r1, r0
 8002d12:	40c5      	lsrs	r5, r0
 8002d14:	032d      	lsls	r5, r5, #12
 8002d16:	0b2d      	lsrs	r5, r5, #12
 8002d18:	e7e3      	b.n	8002ce2 <__aeabi_i2d+0x2a>
 8002d1a:	2400      	movs	r4, #0
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2500      	movs	r5, #0
 8002d20:	2200      	movs	r2, #0
 8002d22:	e7de      	b.n	8002ce2 <__aeabi_i2d+0x2a>
 8002d24:	0000041e 	.word	0x0000041e
 8002d28:	800fffff 	.word	0x800fffff

08002d2c <__aeabi_ui2d>:
 8002d2c:	b510      	push	{r4, lr}
 8002d2e:	1e04      	subs	r4, r0, #0
 8002d30:	d025      	beq.n	8002d7e <__aeabi_ui2d+0x52>
 8002d32:	f000 f903 	bl	8002f3c <__clzsi2>
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <__aeabi_ui2d+0x5c>)
 8002d38:	1a1b      	subs	r3, r3, r0
 8002d3a:	055b      	lsls	r3, r3, #21
 8002d3c:	0d5b      	lsrs	r3, r3, #21
 8002d3e:	280a      	cmp	r0, #10
 8002d40:	dd12      	ble.n	8002d68 <__aeabi_ui2d+0x3c>
 8002d42:	380b      	subs	r0, #11
 8002d44:	4084      	lsls	r4, r0
 8002d46:	2200      	movs	r2, #0
 8002d48:	0324      	lsls	r4, r4, #12
 8002d4a:	0b24      	lsrs	r4, r4, #12
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	0010      	movs	r0, r2
 8002d50:	0324      	lsls	r4, r4, #12
 8002d52:	0d0a      	lsrs	r2, r1, #20
 8002d54:	0b24      	lsrs	r4, r4, #12
 8002d56:	0512      	lsls	r2, r2, #20
 8002d58:	4322      	orrs	r2, r4
 8002d5a:	4c0c      	ldr	r4, [pc, #48]	; (8002d8c <__aeabi_ui2d+0x60>)
 8002d5c:	051b      	lsls	r3, r3, #20
 8002d5e:	4022      	ands	r2, r4
 8002d60:	4313      	orrs	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	0859      	lsrs	r1, r3, #1
 8002d66:	bd10      	pop	{r4, pc}
 8002d68:	0002      	movs	r2, r0
 8002d6a:	0021      	movs	r1, r4
 8002d6c:	3215      	adds	r2, #21
 8002d6e:	4091      	lsls	r1, r2
 8002d70:	000a      	movs	r2, r1
 8002d72:	210b      	movs	r1, #11
 8002d74:	1a08      	subs	r0, r1, r0
 8002d76:	40c4      	lsrs	r4, r0
 8002d78:	0324      	lsls	r4, r4, #12
 8002d7a:	0b24      	lsrs	r4, r4, #12
 8002d7c:	e7e6      	b.n	8002d4c <__aeabi_ui2d+0x20>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2400      	movs	r4, #0
 8002d82:	2200      	movs	r2, #0
 8002d84:	e7e2      	b.n	8002d4c <__aeabi_ui2d+0x20>
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	0000041e 	.word	0x0000041e
 8002d8c:	800fffff 	.word	0x800fffff

08002d90 <__aeabi_f2d>:
 8002d90:	0041      	lsls	r1, r0, #1
 8002d92:	0e09      	lsrs	r1, r1, #24
 8002d94:	1c4b      	adds	r3, r1, #1
 8002d96:	b570      	push	{r4, r5, r6, lr}
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	0246      	lsls	r6, r0, #9
 8002d9c:	0a75      	lsrs	r5, r6, #9
 8002d9e:	0fc4      	lsrs	r4, r0, #31
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	dd14      	ble.n	8002dce <__aeabi_f2d+0x3e>
 8002da4:	23e0      	movs	r3, #224	; 0xe0
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	076d      	lsls	r5, r5, #29
 8002daa:	0b36      	lsrs	r6, r6, #12
 8002dac:	18cb      	adds	r3, r1, r3
 8002dae:	2100      	movs	r1, #0
 8002db0:	0d0a      	lsrs	r2, r1, #20
 8002db2:	0028      	movs	r0, r5
 8002db4:	0512      	lsls	r2, r2, #20
 8002db6:	4d1c      	ldr	r5, [pc, #112]	; (8002e28 <__aeabi_f2d+0x98>)
 8002db8:	4332      	orrs	r2, r6
 8002dba:	055b      	lsls	r3, r3, #21
 8002dbc:	402a      	ands	r2, r5
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	07e4      	lsls	r4, r4, #31
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	4323      	orrs	r3, r4
 8002dca:	0019      	movs	r1, r3
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
 8002dce:	2900      	cmp	r1, #0
 8002dd0:	d114      	bne.n	8002dfc <__aeabi_f2d+0x6c>
 8002dd2:	2d00      	cmp	r5, #0
 8002dd4:	d01e      	beq.n	8002e14 <__aeabi_f2d+0x84>
 8002dd6:	0028      	movs	r0, r5
 8002dd8:	f000 f8b0 	bl	8002f3c <__clzsi2>
 8002ddc:	280a      	cmp	r0, #10
 8002dde:	dc1c      	bgt.n	8002e1a <__aeabi_f2d+0x8a>
 8002de0:	230b      	movs	r3, #11
 8002de2:	002a      	movs	r2, r5
 8002de4:	1a1b      	subs	r3, r3, r0
 8002de6:	40da      	lsrs	r2, r3
 8002de8:	0003      	movs	r3, r0
 8002dea:	3315      	adds	r3, #21
 8002dec:	409d      	lsls	r5, r3
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <__aeabi_f2d+0x9c>)
 8002df0:	0312      	lsls	r2, r2, #12
 8002df2:	1a1b      	subs	r3, r3, r0
 8002df4:	055b      	lsls	r3, r3, #21
 8002df6:	0b16      	lsrs	r6, r2, #12
 8002df8:	0d5b      	lsrs	r3, r3, #21
 8002dfa:	e7d8      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002dfc:	2d00      	cmp	r5, #0
 8002dfe:	d006      	beq.n	8002e0e <__aeabi_f2d+0x7e>
 8002e00:	0b32      	lsrs	r2, r6, #12
 8002e02:	2680      	movs	r6, #128	; 0x80
 8002e04:	0336      	lsls	r6, r6, #12
 8002e06:	076d      	lsls	r5, r5, #29
 8002e08:	4316      	orrs	r6, r2
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <__aeabi_f2d+0xa0>)
 8002e0c:	e7cf      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <__aeabi_f2d+0xa0>)
 8002e10:	2600      	movs	r6, #0
 8002e12:	e7cc      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002e14:	2300      	movs	r3, #0
 8002e16:	2600      	movs	r6, #0
 8002e18:	e7c9      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002e1a:	0003      	movs	r3, r0
 8002e1c:	002a      	movs	r2, r5
 8002e1e:	3b0b      	subs	r3, #11
 8002e20:	409a      	lsls	r2, r3
 8002e22:	2500      	movs	r5, #0
 8002e24:	e7e3      	b.n	8002dee <__aeabi_f2d+0x5e>
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	800fffff 	.word	0x800fffff
 8002e2c:	00000389 	.word	0x00000389
 8002e30:	000007ff 	.word	0x000007ff

08002e34 <__aeabi_d2f>:
 8002e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e36:	004c      	lsls	r4, r1, #1
 8002e38:	0d64      	lsrs	r4, r4, #21
 8002e3a:	030b      	lsls	r3, r1, #12
 8002e3c:	1c62      	adds	r2, r4, #1
 8002e3e:	0a5b      	lsrs	r3, r3, #9
 8002e40:	0f46      	lsrs	r6, r0, #29
 8002e42:	0552      	lsls	r2, r2, #21
 8002e44:	0fc9      	lsrs	r1, r1, #31
 8002e46:	431e      	orrs	r6, r3
 8002e48:	00c5      	lsls	r5, r0, #3
 8002e4a:	0d52      	lsrs	r2, r2, #21
 8002e4c:	2a01      	cmp	r2, #1
 8002e4e:	dd29      	ble.n	8002ea4 <__aeabi_d2f+0x70>
 8002e50:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <__aeabi_d2f+0xfc>)
 8002e52:	18e7      	adds	r7, r4, r3
 8002e54:	2ffe      	cmp	r7, #254	; 0xfe
 8002e56:	dc1c      	bgt.n	8002e92 <__aeabi_d2f+0x5e>
 8002e58:	2f00      	cmp	r7, #0
 8002e5a:	dd3b      	ble.n	8002ed4 <__aeabi_d2f+0xa0>
 8002e5c:	0180      	lsls	r0, r0, #6
 8002e5e:	1e43      	subs	r3, r0, #1
 8002e60:	4198      	sbcs	r0, r3
 8002e62:	2207      	movs	r2, #7
 8002e64:	00f3      	lsls	r3, r6, #3
 8002e66:	0f6d      	lsrs	r5, r5, #29
 8002e68:	4303      	orrs	r3, r0
 8002e6a:	432b      	orrs	r3, r5
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	2a00      	cmp	r2, #0
 8002e70:	d004      	beq.n	8002e7c <__aeabi_d2f+0x48>
 8002e72:	220f      	movs	r2, #15
 8002e74:	401a      	ands	r2, r3
 8002e76:	2a04      	cmp	r2, #4
 8002e78:	d000      	beq.n	8002e7c <__aeabi_d2f+0x48>
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	04d2      	lsls	r2, r2, #19
 8002e80:	401a      	ands	r2, r3
 8002e82:	d024      	beq.n	8002ece <__aeabi_d2f+0x9a>
 8002e84:	3701      	adds	r7, #1
 8002e86:	b2fa      	uxtb	r2, r7
 8002e88:	2fff      	cmp	r7, #255	; 0xff
 8002e8a:	d002      	beq.n	8002e92 <__aeabi_d2f+0x5e>
 8002e8c:	019b      	lsls	r3, r3, #6
 8002e8e:	0a58      	lsrs	r0, r3, #9
 8002e90:	e001      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002e92:	22ff      	movs	r2, #255	; 0xff
 8002e94:	2000      	movs	r0, #0
 8002e96:	0240      	lsls	r0, r0, #9
 8002e98:	05d2      	lsls	r2, r2, #23
 8002e9a:	0a40      	lsrs	r0, r0, #9
 8002e9c:	07c9      	lsls	r1, r1, #31
 8002e9e:	4310      	orrs	r0, r2
 8002ea0:	4308      	orrs	r0, r1
 8002ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea4:	4335      	orrs	r5, r6
 8002ea6:	2c00      	cmp	r4, #0
 8002ea8:	d104      	bne.n	8002eb4 <__aeabi_d2f+0x80>
 8002eaa:	2d00      	cmp	r5, #0
 8002eac:	d10a      	bne.n	8002ec4 <__aeabi_d2f+0x90>
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e7f0      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002eb4:	2d00      	cmp	r5, #0
 8002eb6:	d0ec      	beq.n	8002e92 <__aeabi_d2f+0x5e>
 8002eb8:	2080      	movs	r0, #128	; 0x80
 8002eba:	03c0      	lsls	r0, r0, #15
 8002ebc:	4330      	orrs	r0, r6
 8002ebe:	22ff      	movs	r2, #255	; 0xff
 8002ec0:	e7e9      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002ec2:	2400      	movs	r4, #0
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	025b      	lsls	r3, r3, #9
 8002ec8:	0a58      	lsrs	r0, r3, #9
 8002eca:	b2e2      	uxtb	r2, r4
 8002ecc:	e7e3      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002ece:	08db      	lsrs	r3, r3, #3
 8002ed0:	003c      	movs	r4, r7
 8002ed2:	e7f8      	b.n	8002ec6 <__aeabi_d2f+0x92>
 8002ed4:	003b      	movs	r3, r7
 8002ed6:	3317      	adds	r3, #23
 8002ed8:	dbf3      	blt.n	8002ec2 <__aeabi_d2f+0x8e>
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	4333      	orrs	r3, r6
 8002ee0:	261e      	movs	r6, #30
 8002ee2:	1bf6      	subs	r6, r6, r7
 8002ee4:	2e1f      	cmp	r6, #31
 8002ee6:	dd14      	ble.n	8002f12 <__aeabi_d2f+0xde>
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4252      	negs	r2, r2
 8002eec:	1bd7      	subs	r7, r2, r7
 8002eee:	001a      	movs	r2, r3
 8002ef0:	40fa      	lsrs	r2, r7
 8002ef2:	0017      	movs	r7, r2
 8002ef4:	2e20      	cmp	r6, #32
 8002ef6:	d004      	beq.n	8002f02 <__aeabi_d2f+0xce>
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <__aeabi_d2f+0x100>)
 8002efa:	4694      	mov	ip, r2
 8002efc:	4464      	add	r4, ip
 8002efe:	40a3      	lsls	r3, r4
 8002f00:	431d      	orrs	r5, r3
 8002f02:	002b      	movs	r3, r5
 8002f04:	1e5d      	subs	r5, r3, #1
 8002f06:	41ab      	sbcs	r3, r5
 8002f08:	2207      	movs	r2, #7
 8002f0a:	433b      	orrs	r3, r7
 8002f0c:	401a      	ands	r2, r3
 8002f0e:	2700      	movs	r7, #0
 8002f10:	e7ad      	b.n	8002e6e <__aeabi_d2f+0x3a>
 8002f12:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <__aeabi_d2f+0x104>)
 8002f14:	0028      	movs	r0, r5
 8002f16:	18a2      	adds	r2, r4, r2
 8002f18:	4095      	lsls	r5, r2
 8002f1a:	4093      	lsls	r3, r2
 8002f1c:	1e6c      	subs	r4, r5, #1
 8002f1e:	41a5      	sbcs	r5, r4
 8002f20:	40f0      	lsrs	r0, r6
 8002f22:	2207      	movs	r2, #7
 8002f24:	432b      	orrs	r3, r5
 8002f26:	4303      	orrs	r3, r0
 8002f28:	401a      	ands	r2, r3
 8002f2a:	2700      	movs	r7, #0
 8002f2c:	e79f      	b.n	8002e6e <__aeabi_d2f+0x3a>
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	fffffc80 	.word	0xfffffc80
 8002f34:	fffffca2 	.word	0xfffffca2
 8002f38:	fffffc82 	.word	0xfffffc82

08002f3c <__clzsi2>:
 8002f3c:	211c      	movs	r1, #28
 8002f3e:	2301      	movs	r3, #1
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	4298      	cmp	r0, r3
 8002f44:	d301      	bcc.n	8002f4a <__clzsi2+0xe>
 8002f46:	0c00      	lsrs	r0, r0, #16
 8002f48:	3910      	subs	r1, #16
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	4298      	cmp	r0, r3
 8002f4e:	d301      	bcc.n	8002f54 <__clzsi2+0x18>
 8002f50:	0a00      	lsrs	r0, r0, #8
 8002f52:	3908      	subs	r1, #8
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	4298      	cmp	r0, r3
 8002f58:	d301      	bcc.n	8002f5e <__clzsi2+0x22>
 8002f5a:	0900      	lsrs	r0, r0, #4
 8002f5c:	3904      	subs	r1, #4
 8002f5e:	a202      	add	r2, pc, #8	; (adr r2, 8002f68 <__clzsi2+0x2c>)
 8002f60:	5c10      	ldrb	r0, [r2, r0]
 8002f62:	1840      	adds	r0, r0, r1
 8002f64:	4770      	bx	lr
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	02020304 	.word	0x02020304
 8002f6c:	01010101 	.word	0x01010101
	...

08002f78 <__clzdi2>:
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	d103      	bne.n	8002f86 <__clzdi2+0xe>
 8002f7e:	f7ff ffdd 	bl	8002f3c <__clzsi2>
 8002f82:	3020      	adds	r0, #32
 8002f84:	e002      	b.n	8002f8c <__clzdi2+0x14>
 8002f86:	1c08      	adds	r0, r1, #0
 8002f88:	f7ff ffd8 	bl	8002f3c <__clzsi2>
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)

08002f90 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f92:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002f94:	4b23      	ldr	r3, [pc, #140]	; (8003024 <LoadROtopology+0x94>)
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002f9a:	4a23      	ldr	r2, [pc, #140]	; (8003028 <LoadROtopology+0x98>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d033      	beq.n	8003008 <LoadROtopology+0x78>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002fa0:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 8002fa2:	d039      	beq.n	8003018 <LoadROtopology+0x88>
		N =(uint8_t )(temp >> 8);
 8002fa4:	4921      	ldr	r1, [pc, #132]	; (800302c <LoadROtopology+0x9c>)
 8002fa6:	700a      	strb	r2, [r1, #0]
			N =1;
		myID =(uint8_t )temp;
 8002fa8:	4a21      	ldr	r2, [pc, #132]	; (8003030 <LoadROtopology+0xa0>)
 8002faa:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002fac:	4b1f      	ldr	r3, [pc, #124]	; (800302c <LoadROtopology+0x9c>)
 8002fae:	781e      	ldrb	r6, [r3, #0]
 8002fb0:	2e00      	cmp	r6, #0
 8002fb2:	d035      	beq.n	8003020 <LoadROtopology+0x90>
 8002fb4:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002fb6:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002fb8:	466b      	mov	r3, sp
 8002fba:	1dd9      	adds	r1, r3, #7
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	469c      	mov	ip, r3
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002fc0:	4d1c      	ldr	r5, [pc, #112]	; (8003034 <LoadROtopology+0xa4>)
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002fc2:	4663      	mov	r3, ip
 8002fc4:	700b      	strb	r3, [r1, #0]
 8002fc6:	780b      	ldrb	r3, [r1, #0]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b0a      	cmp	r3, #10
 8002fcc:	d815      	bhi.n	8002ffa <LoadROtopology+0x6a>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002fce:	1e63      	subs	r3, r4, #1
 8002fd0:	0098      	lsls	r0, r3, #2
 8002fd2:	18c0      	adds	r0, r0, r3
 8002fd4:	0040      	lsls	r0, r0, #1
 8002fd6:	18c0      	adds	r0, r0, r3
 8002fd8:	4b12      	ldr	r3, [pc, #72]	; (8003024 <LoadROtopology+0x94>)
 8002fda:	18d7      	adds	r7, r2, r3
 8002fdc:	780b      	ldrb	r3, [r1, #0]
 8002fde:	883f      	ldrh	r7, [r7, #0]
 8002fe0:	181b      	adds	r3, r3, r0
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	52ef      	strh	r7, [r5, r3]
				add +=2;
 8002fe6:	3202      	adds	r2, #2
 8002fe8:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002fea:	780b      	ldrb	r3, [r1, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	700b      	strb	r3, [r1, #0]
 8002ff2:	780b      	ldrb	r3, [r1, #0]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b0a      	cmp	r3, #10
 8002ff8:	d9ee      	bls.n	8002fd8 <LoadROtopology+0x48>
		for(uint8_t i =1; i <= N; i++){
 8002ffa:	3401      	adds	r4, #1
 8002ffc:	b2e4      	uxtb	r4, r4
 8002ffe:	42b4      	cmp	r4, r6
 8003000:	d9df      	bls.n	8002fc2 <LoadROtopology+0x32>
			}
		}
	}
	
	return result;
 8003002:	2000      	movs	r0, #0
}
 8003004:	b003      	add	sp, #12
 8003006:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N =1;
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <LoadROtopology+0x9c>)
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
		myID =0;
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <LoadROtopology+0xa0>)
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8003014:	20fa      	movs	r0, #250	; 0xfa
 8003016:	e7f5      	b.n	8003004 <LoadROtopology+0x74>
			N =1;
 8003018:	4a04      	ldr	r2, [pc, #16]	; (800302c <LoadROtopology+0x9c>)
 800301a:	2101      	movs	r1, #1
 800301c:	7011      	strb	r1, [r2, #0]
 800301e:	e7c3      	b.n	8002fa8 <LoadROtopology+0x18>
	return result;
 8003020:	2000      	movs	r0, #0
 8003022:	e7ef      	b.n	8003004 <LoadROtopology+0x74>
 8003024:	0801d800 	.word	0x0801d800
 8003028:	0000ffff 	.word	0x0000ffff
 800302c:	20000024 	.word	0x20000024
 8003030:	20001052 	.word	0x20001052
 8003034:	20000a8c 	.word	0x20000a8c

08003038 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8003038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800303a:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <LoadEEportsDir+0x40>)
 800303c:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 800303e:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8003040:	2b00      	cmp	r3, #0
 8003042:	d017      	beq.n	8003074 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8003044:	490d      	ldr	r1, [pc, #52]	; (800307c <LoadEEportsDir+0x44>)
 8003046:	2002      	movs	r0, #2
 8003048:	f004 fcf2 	bl	8007a30 <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 800304c:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800304e:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8003050:	4f09      	ldr	r7, [pc, #36]	; (8003078 <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8003052:	4e0a      	ldr	r6, [pc, #40]	; (800307c <LoadEEportsDir+0x44>)
	for(uint8_t i =1; i <= N; i++){
 8003054:	3401      	adds	r4, #1
 8003056:	b2e4      	uxtb	r4, r4
 8003058:	783b      	ldrb	r3, [r7, #0]
 800305a:	42a3      	cmp	r3, r4
 800305c:	d30a      	bcc.n	8003074 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 800305e:	1e61      	subs	r1, r4, #1
 8003060:	0049      	lsls	r1, r1, #1
 8003062:	1989      	adds	r1, r1, r6
 8003064:	1c60      	adds	r0, r4, #1
 8003066:	f004 fce3 	bl	8007a30 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800306a:	1ca3      	adds	r3, r4, #2
 800306c:	2b1b      	cmp	r3, #27
 800306e:	ddf1      	ble.n	8003054 <LoadEEportsDir+0x1c>
			result =BOS_ERR_EEPROM;
 8003070:	250a      	movs	r5, #10
 8003072:	e7ef      	b.n	8003054 <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 8003074:	0028      	movs	r0, r5
 8003076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003078:	20000024 	.word	0x20000024
 800307c:	20007068 	.word	0x20007068

08003080 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003082:	46de      	mov	lr, fp
 8003084:	4657      	mov	r7, sl
 8003086:	464e      	mov	r6, r9
 8003088:	4645      	mov	r5, r8
 800308a:	b5e0      	push	{r5, r6, r7, lr}
 800308c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 800308e:	466b      	mov	r3, sp
 8003090:	2200      	movs	r2, #0
 8003092:	80da      	strh	r2, [r3, #6]
 8003094:	241c      	movs	r4, #28
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003096:	2700      	movs	r7, #0
 8003098:	4b18      	ldr	r3, [pc, #96]	; (80030fc <LoadEEalias+0x7c>)
 800309a:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 800309c:	469b      	mov	fp, r3
 800309e:	e00c      	b.n	80030ba <LoadEEalias+0x3a>
 80030a0:	464b      	mov	r3, r9
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	444b      	add	r3, r9
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	445b      	add	r3, fp
 80030aa:	2200      	movs	r2, #0
 80030ac:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80030ae:	3701      	adds	r7, #1
 80030b0:	b2ff      	uxtb	r7, r7
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <LoadEEalias+0x80>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	42bb      	cmp	r3, r7
 80030b8:	d317      	bcc.n	80030ea <LoadEEalias+0x6a>
 80030ba:	00bd      	lsls	r5, r7, #2
 80030bc:	19ed      	adds	r5, r5, r7
 80030be:	006d      	lsls	r5, r5, #1
 80030c0:	4455      	add	r5, sl
 80030c2:	1d63      	adds	r3, r4, #5
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 80030c8:	466b      	mov	r3, sp
 80030ca:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t )temp;
 80030cc:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 80030ce:	0031      	movs	r1, r6
 80030d0:	0020      	movs	r0, r4
 80030d2:	f004 fcad 	bl	8007a30 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 80030d6:	8833      	ldrh	r3, [r6, #0]
 80030d8:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	702b      	strb	r3, [r5, #0]
 80030de:	3401      	adds	r4, #1
 80030e0:	b2a4      	uxth	r4, r4
 80030e2:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80030e4:	45a0      	cmp	r8, r4
 80030e6:	d1f2      	bne.n	80030ce <LoadEEalias+0x4e>
 80030e8:	e7da      	b.n	80030a0 <LoadEEalias+0x20>
	}
	
	return result;
}
 80030ea:	2000      	movs	r0, #0
 80030ec:	b003      	add	sp, #12
 80030ee:	bc3c      	pop	{r2, r3, r4, r5}
 80030f0:	4690      	mov	r8, r2
 80030f2:	4699      	mov	r9, r3
 80030f4:	46a2      	mov	sl, r4
 80030f6:	46ab      	mov	fp, r5
 80030f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	20000f44 	.word	0x20000f44
 8003100:	20000024 	.word	0x20000024

08003104 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8003104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003106:	46d6      	mov	lr, sl
 8003108:	464f      	mov	r7, r9
 800310a:	4646      	mov	r6, r8
 800310c:	b5c0      	push	{r6, r7, lr}
 800310e:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003110:	466b      	mov	r3, sp
 8003112:	2200      	movs	r2, #0
 8003114:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <LoadEEgroup+0x9c>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01d      	beq.n	800315a <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 800311e:	2500      	movs	r5, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8003120:	4e20      	ldr	r6, [pc, #128]	; (80031a4 <LoadEEgroup+0xa0>)
	for(i =0; i < N; i++)			// N modules
 8003122:	4c1f      	ldr	r4, [pc, #124]	; (80031a0 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8003124:	b2e9      	uxtb	r1, r5
 8003126:	0049      	lsls	r1, r1, #1
 8003128:	1871      	adds	r1, r6, r1
 800312a:	0028      	movs	r0, r5
 800312c:	30cb      	adds	r0, #203	; 0xcb
 800312e:	b280      	uxth	r0, r0
 8003130:	f004 fc7e 	bl	8007a30 <EE_ReadVariable>
		add++;
 8003134:	3501      	adds	r5, #1
 8003136:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8003138:	7822      	ldrb	r2, [r4, #0]
 800313a:	b2eb      	uxtb	r3, r5
 800313c:	429a      	cmp	r2, r3
 800313e:	d8f1      	bhi.n	8003124 <LoadEEgroup+0x20>
 8003140:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <LoadEEgroup+0xa4>)
 8003142:	4699      	mov	r9, r3
 8003144:	002c      	movs	r4, r5
 8003146:	3499      	adds	r4, #153	; 0x99
 8003148:	b2a4      	uxth	r4, r4
 800314a:	35cb      	adds	r5, #203	; 0xcb
 800314c:	b2ab      	uxth	r3, r5
 800314e:	4698      	mov	r8, r3
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8003150:	466b      	mov	r3, sp
 8003152:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8003154:	2300      	movs	r3, #0
 8003156:	469a      	mov	sl, r3
 8003158:	e009      	b.n	800316e <LoadEEgroup+0x6a>
	uint16_t add =0, temp =0;
 800315a:	2500      	movs	r5, #0
 800315c:	e7f0      	b.n	8003140 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 800315e:	464b      	mov	r3, r9
 8003160:	4652      	mov	r2, sl
 8003162:	725a      	strb	r2, [r3, #9]
 8003164:	230a      	movs	r3, #10
 8003166:	469c      	mov	ip, r3
 8003168:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 800316a:	4544      	cmp	r4, r8
 800316c:	d010      	beq.n	8003190 <LoadEEgroup+0x8c>
 800316e:	1d67      	adds	r7, r4, #5
 8003170:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 8003172:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8003174:	0031      	movs	r1, r6
 8003176:	0020      	movs	r0, r4
 8003178:	f004 fc5a 	bl	8007a30 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 800317c:	8833      	ldrh	r3, [r6, #0]
 800317e:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	702b      	strb	r3, [r5, #0]
 8003184:	3401      	adds	r4, #1
 8003186:	b2a4      	uxth	r4, r4
 8003188:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800318a:	42bc      	cmp	r4, r7
 800318c:	d1f2      	bne.n	8003174 <LoadEEgroup+0x70>
 800318e:	e7e6      	b.n	800315e <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8003190:	2000      	movs	r0, #0
 8003192:	b002      	add	sp, #8
 8003194:	bc1c      	pop	{r2, r3, r4}
 8003196:	4690      	mov	r8, r2
 8003198:	4699      	mov	r9, r3
 800319a:	46a2      	mov	sl, r4
 800319c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	20000024 	.word	0x20000024
 80031a4:	20000e9c 	.word	0x20000e9c
 80031a8:	20000e38 	.word	0x20000e38

080031ac <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80031b0:	210e      	movs	r1, #14
 80031b2:	4469      	add	r1, sp
 80031b4:	2300      	movs	r3, #0
 80031b6:	800b      	strh	r3, [r1, #0]
 80031b8:	aa03      	add	r2, sp, #12
 80031ba:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 80031bc:	20e4      	movs	r0, #228	; 0xe4
 80031be:	f004 fc37 	bl	8007a30 <EE_ReadVariable>
	uint8_t direction =0;
 80031c2:	2600      	movs	r6, #0
	if(!status1){
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d102      	bne.n	80031ce <LoadEEstreams+0x22>
		direction =(uint8_t )temp1;
 80031c8:	230e      	movs	r3, #14
 80031ca:	446b      	add	r3, sp
 80031cc:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80031ce:	210e      	movs	r1, #14
 80031d0:	4469      	add	r1, sp
 80031d2:	20e5      	movs	r0, #229	; 0xe5
 80031d4:	f004 fc2c 	bl	8007a30 <EE_ReadVariable>
 80031d8:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80031da:	a903      	add	r1, sp, #12
 80031dc:	20e6      	movs	r0, #230	; 0xe6
 80031de:	f004 fc27 	bl	8007a30 <EE_ReadVariable>
	if(!status1 && !status2){
 80031e2:	4304      	orrs	r4, r0
 80031e4:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 80031e6:	2500      	movs	r5, #0
	if(!status1 && !status2){
 80031e8:	2c00      	cmp	r4, #0
 80031ea:	d106      	bne.n	80031fa <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 80031ec:	230e      	movs	r3, #14
 80031ee:	446b      	add	r3, sp
 80031f0:	881d      	ldrh	r5, [r3, #0]
 80031f2:	042d      	lsls	r5, r5, #16
 80031f4:	ab03      	add	r3, sp, #12
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 80031fa:	210e      	movs	r1, #14
 80031fc:	4469      	add	r1, sp
 80031fe:	20e7      	movs	r0, #231	; 0xe7
 8003200:	f004 fc16 	bl	8007a30 <EE_ReadVariable>
 8003204:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8003206:	a903      	add	r1, sp, #12
 8003208:	20e8      	movs	r0, #232	; 0xe8
 800320a:	f004 fc11 	bl	8007a30 <EE_ReadVariable>
	if(!status1 && !status2){
 800320e:	4320      	orrs	r0, r4
 8003210:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 8003212:	2400      	movs	r4, #0
	if(!status1 && !status2){
 8003214:	2800      	cmp	r0, #0
 8003216:	d106      	bne.n	8003226 <LoadEEstreams+0x7a>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8003218:	230e      	movs	r3, #14
 800321a:	446b      	add	r3, sp
 800321c:	881c      	ldrh	r4, [r3, #0]
 800321e:	0424      	lsls	r4, r4, #16
 8003220:	ab03      	add	r3, sp, #12
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8003226:	210e      	movs	r1, #14
 8003228:	4469      	add	r1, sp
 800322a:	20e9      	movs	r0, #233	; 0xe9
 800322c:	f004 fc00 	bl	8007a30 <EE_ReadVariable>
	if(!status1){
 8003230:	2800      	cmp	r0, #0
 8003232:	d107      	bne.n	8003244 <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 8003234:	230e      	movs	r3, #14
 8003236:	446b      	add	r3, sp
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	0a19      	lsrs	r1, r3, #8
 800323c:	4a28      	ldr	r2, [pc, #160]	; (80032e0 <LoadEEstreams+0x134>)
 800323e:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8003240:	4a28      	ldr	r2, [pc, #160]	; (80032e4 <LoadEEstreams+0x138>)
 8003242:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8003244:	210e      	movs	r1, #14
 8003246:	4469      	add	r1, sp
 8003248:	20ea      	movs	r0, #234	; 0xea
 800324a:	f004 fbf1 	bl	8007a30 <EE_ReadVariable>
	if(!status1){
 800324e:	2800      	cmp	r0, #0
 8003250:	d107      	bne.n	8003262 <LoadEEstreams+0xb6>
		src2 =(uint8_t )(temp1 >> 8);
 8003252:	230e      	movs	r3, #14
 8003254:	446b      	add	r3, sp
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	0a19      	lsrs	r1, r3, #8
 800325a:	4a23      	ldr	r2, [pc, #140]	; (80032e8 <LoadEEstreams+0x13c>)
 800325c:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 800325e:	4a23      	ldr	r2, [pc, #140]	; (80032ec <LoadEEstreams+0x140>)
 8003260:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8003262:	210e      	movs	r1, #14
 8003264:	4469      	add	r1, sp
 8003266:	20eb      	movs	r0, #235	; 0xeb
 8003268:	f004 fbe2 	bl	8007a30 <EE_ReadVariable>
	if(!status1){
 800326c:	2800      	cmp	r0, #0
 800326e:	d107      	bne.n	8003280 <LoadEEstreams+0xd4>
		src3 =(uint8_t )(temp1 >> 8);
 8003270:	230e      	movs	r3, #14
 8003272:	446b      	add	r3, sp
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	0a19      	lsrs	r1, r3, #8
 8003278:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <LoadEEstreams+0x144>)
 800327a:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 800327c:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <LoadEEstreams+0x148>)
 800327e:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003280:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <LoadEEstreams+0x134>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <LoadEEstreams+0xe4>
 8003288:	4a16      	ldr	r2, [pc, #88]	; (80032e4 <LoadEEstreams+0x138>)
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	2a00      	cmp	r2, #0
 800328e:	d112      	bne.n	80032b6 <LoadEEstreams+0x10a>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003290:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <LoadEEstreams+0x13c>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <LoadEEstreams+0xf4>
 8003298:	4a14      	ldr	r2, [pc, #80]	; (80032ec <LoadEEstreams+0x140>)
 800329a:	7812      	ldrb	r2, [r2, #0]
 800329c:	2a00      	cmp	r2, #0
 800329e:	d111      	bne.n	80032c4 <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <LoadEEstreams+0x144>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <LoadEEstreams+0x104>
 80032a8:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <LoadEEstreams+0x148>)
 80032aa:	7812      	ldrb	r2, [r2, #0]
 80032ac:	2a00      	cmp	r2, #0
 80032ae:	d110      	bne.n	80032d2 <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 80032b0:	2000      	movs	r0, #0
 80032b2:	b004      	add	sp, #16
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 80032b6:	9200      	str	r2, [sp, #0]
 80032b8:	0022      	movs	r2, r4
 80032ba:	0029      	movs	r1, r5
 80032bc:	0030      	movs	r0, r6
 80032be:	f005 fff7 	bl	80092b0 <SetupDMAStreams>
 80032c2:	e7e5      	b.n	8003290 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 80032c4:	9200      	str	r2, [sp, #0]
 80032c6:	0022      	movs	r2, r4
 80032c8:	0029      	movs	r1, r5
 80032ca:	0030      	movs	r0, r6
 80032cc:	f005 fff0 	bl	80092b0 <SetupDMAStreams>
 80032d0:	e7e6      	b.n	80032a0 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 80032d2:	9200      	str	r2, [sp, #0]
 80032d4:	0022      	movs	r2, r4
 80032d6:	0029      	movs	r1, r5
 80032d8:	0030      	movs	r0, r6
 80032da:	f005 ffe9 	bl	80092b0 <SetupDMAStreams>
 80032de:	e7e7      	b.n	80032b0 <LoadEEstreams+0x104>
 80032e0:	20001122 	.word	0x20001122
 80032e4:	20000e35 	.word	0x20000e35
 80032e8:	20001123 	.word	0x20001123
 80032ec:	20000e36 	.word	0x20000e36
 80032f0:	20001124 	.word	0x20001124
 80032f4:	20000e37 	.word	0x20000e37

080032f8 <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 80032f8:	b510      	push	{r4, lr}
 80032fa:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80032fc:	208a      	movs	r0, #138	; 0x8a
 80032fe:	466b      	mov	r3, sp
 8003300:	1d99      	adds	r1, r3, #6
 8003302:	0040      	lsls	r0, r0, #1
 8003304:	f004 fb94 	bl	8007a30 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003308:	2800      	cmp	r0, #0
 800330a:	d000      	beq.n	800330e <LoadEEparams+0x16>
 800330c:	e075      	b.n	80033fa <LoadEEparams+0x102>
		BOSMessaging.response =(uint8_t )temp1;
 800330e:	466b      	mov	r3, sp
 8003310:	3306      	adds	r3, #6
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	4a55      	ldr	r2, [pc, #340]	; (800346c <LoadEEparams+0x174>)
 8003316:	7013      	strb	r3, [r2, #0]
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 8003318:	0a1b      	lsrs	r3, r3, #8
 800331a:	7053      	strb	r3, [r2, #1]
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800331c:	208e      	movs	r0, #142	; 0x8e
 800331e:	466b      	mov	r3, sp
 8003320:	1d99      	adds	r1, r3, #6
 8003322:	0040      	lsls	r0, r0, #1
 8003324:	f004 fb84 	bl	8007a30 <EE_ReadVariable>

	if(!status1){
 8003328:	2800      	cmp	r0, #0
 800332a:	d000      	beq.n	800332e <LoadEEparams+0x36>
 800332c:	e06c      	b.n	8003408 <LoadEEparams+0x110>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 800332e:	466b      	mov	r3, sp
 8003330:	3306      	adds	r3, #6
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	4a4d      	ldr	r2, [pc, #308]	; (800346c <LoadEEparams+0x174>)
 8003336:	0bd9      	lsrs	r1, r3, #15
 8003338:	7111      	strb	r1, [r2, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	80d3      	strh	r3, [r2, #6]
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800333e:	2016      	movs	r0, #22
 8003340:	466b      	mov	r3, sp
 8003342:	1d99      	adds	r1, r3, #6
 8003344:	30ff      	adds	r0, #255	; 0xff
 8003346:	f004 fb73 	bl	8007a30 <EE_ReadVariable>
	if(!status1)
 800334a:	2800      	cmp	r0, #0
 800334c:	d163      	bne.n	8003416 <LoadEEparams+0x11e>
		BOS.buttons.debounce =temp1;
 800334e:	466b      	mov	r3, sp
 8003350:	88da      	ldrh	r2, [r3, #6]
 8003352:	4b47      	ldr	r3, [pc, #284]	; (8003470 <LoadEEparams+0x178>)
 8003354:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003356:	208b      	movs	r0, #139	; 0x8b
 8003358:	466b      	mov	r3, sp
 800335a:	1d99      	adds	r1, r3, #6
 800335c:	0040      	lsls	r0, r0, #1
 800335e:	f004 fb67 	bl	8007a30 <EE_ReadVariable>
	if(!status1)
 8003362:	2800      	cmp	r0, #0
 8003364:	d15c      	bne.n	8003420 <LoadEEparams+0x128>
		BOS.buttons.singleClickTime =temp1;
 8003366:	466b      	mov	r3, sp
 8003368:	88da      	ldrh	r2, [r3, #6]
 800336a:	4b41      	ldr	r3, [pc, #260]	; (8003470 <LoadEEparams+0x178>)
 800336c:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800336e:	2018      	movs	r0, #24
 8003370:	466b      	mov	r3, sp
 8003372:	1d99      	adds	r1, r3, #6
 8003374:	30ff      	adds	r0, #255	; 0xff
 8003376:	f004 fb5b 	bl	8007a30 <EE_ReadVariable>
	if(!status1){
 800337a:	2800      	cmp	r0, #0
 800337c:	d155      	bne.n	800342a <LoadEEparams+0x132>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 800337e:	466b      	mov	r3, sp
 8003380:	3306      	adds	r3, #6
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	4a3a      	ldr	r2, [pc, #232]	; (8003470 <LoadEEparams+0x178>)
 8003386:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 800338c:	208c      	movs	r0, #140	; 0x8c
 800338e:	466b      	mov	r3, sp
 8003390:	1d99      	adds	r1, r3, #6
 8003392:	0040      	lsls	r0, r0, #1
 8003394:	f004 fb4c 	bl	8007a30 <EE_ReadVariable>
 8003398:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800339a:	201a      	movs	r0, #26
 800339c:	a901      	add	r1, sp, #4
 800339e:	30ff      	adds	r0, #255	; 0xff
 80033a0:	f004 fb46 	bl	8007a30 <EE_ReadVariable>
	if(!status1 && !status2){
 80033a4:	4304      	orrs	r4, r0
 80033a6:	b2a4      	uxth	r4, r4
 80033a8:	2c00      	cmp	r4, #0
 80033aa:	d145      	bne.n	8003438 <LoadEEparams+0x140>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 80033ac:	ab01      	add	r3, sp, #4
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	041b      	lsls	r3, r3, #16
 80033b2:	466a      	mov	r2, sp
 80033b4:	3206      	adds	r2, #6
 80033b6:	8812      	ldrh	r2, [r2, #0]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	4a2d      	ldr	r2, [pc, #180]	; (8003470 <LoadEEparams+0x178>)
 80033bc:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 80033be:	208d      	movs	r0, #141	; 0x8d
 80033c0:	466b      	mov	r3, sp
 80033c2:	1d99      	adds	r1, r3, #6
 80033c4:	0040      	lsls	r0, r0, #1
 80033c6:	f004 fb33 	bl	8007a30 <EE_ReadVariable>
	if(!status1){
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d142      	bne.n	8003454 <LoadEEparams+0x15c>
		BOS.daylightsaving =(int8_t )temp1;
 80033ce:	466b      	mov	r3, sp
 80033d0:	3306      	adds	r3, #6
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	4a26      	ldr	r2, [pc, #152]	; (8003470 <LoadEEparams+0x178>)
 80033d6:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80033dc:	201c      	movs	r0, #28
 80033de:	466b      	mov	r3, sp
 80033e0:	1d99      	adds	r1, r3, #6
 80033e2:	30ff      	adds	r0, #255	; 0xff
 80033e4:	f004 fb24 	bl	8007a30 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d039      	beq.n	8003460 <LoadEEparams+0x168>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 80033ec:	4b21      	ldr	r3, [pc, #132]	; (8003474 <LoadEEparams+0x17c>)
 80033ee:	7e9a      	ldrb	r2, [r3, #26]
 80033f0:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <LoadEEparams+0x178>)
 80033f2:	769a      	strb	r2, [r3, #26]
	}
	
	return result;
}
 80033f4:	2000      	movs	r0, #0
 80033f6:	b002      	add	sp, #8
 80033f8:	bd10      	pop	{r4, pc}
		BOSMessaging.response =BOSMessging_default.response;
 80033fa:	4b1c      	ldr	r3, [pc, #112]	; (800346c <LoadEEparams+0x174>)
 80033fc:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <LoadEEparams+0x180>)
 80033fe:	7811      	ldrb	r1, [r2, #0]
 8003400:	7019      	strb	r1, [r3, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003402:	7852      	ldrb	r2, [r2, #1]
 8003404:	705a      	strb	r2, [r3, #1]
 8003406:	e789      	b.n	800331c <LoadEEparams+0x24>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003408:	4b18      	ldr	r3, [pc, #96]	; (800346c <LoadEEparams+0x174>)
 800340a:	4a1b      	ldr	r2, [pc, #108]	; (8003478 <LoadEEparams+0x180>)
 800340c:	7911      	ldrb	r1, [r2, #4]
 800340e:	7119      	strb	r1, [r3, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 8003410:	88d2      	ldrh	r2, [r2, #6]
 8003412:	80da      	strh	r2, [r3, #6]
 8003414:	e793      	b.n	800333e <LoadEEparams+0x46>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 8003416:	4b17      	ldr	r3, [pc, #92]	; (8003474 <LoadEEparams+0x17c>)
 8003418:	881a      	ldrh	r2, [r3, #0]
 800341a:	4b15      	ldr	r3, [pc, #84]	; (8003470 <LoadEEparams+0x178>)
 800341c:	801a      	strh	r2, [r3, #0]
 800341e:	e79a      	b.n	8003356 <LoadEEparams+0x5e>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003420:	4b14      	ldr	r3, [pc, #80]	; (8003474 <LoadEEparams+0x17c>)
 8003422:	885a      	ldrh	r2, [r3, #2]
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <LoadEEparams+0x178>)
 8003426:	805a      	strh	r2, [r3, #2]
 8003428:	e7a1      	b.n	800336e <LoadEEparams+0x76>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 800342a:	4b11      	ldr	r3, [pc, #68]	; (8003470 <LoadEEparams+0x178>)
 800342c:	4a11      	ldr	r2, [pc, #68]	; (8003474 <LoadEEparams+0x17c>)
 800342e:	7911      	ldrb	r1, [r2, #4]
 8003430:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8003432:	7952      	ldrb	r2, [r2, #5]
 8003434:	715a      	strb	r2, [r3, #5]
 8003436:	e7a9      	b.n	800338c <LoadEEparams+0x94>
	else if(CLI_LOW_Baudrate_Flag)
 8003438:	4b10      	ldr	r3, [pc, #64]	; (800347c <LoadEEparams+0x184>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d004      	beq.n	800344a <LoadEEparams+0x152>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <LoadEEparams+0x178>)
 8003442:	22e1      	movs	r2, #225	; 0xe1
 8003444:	0252      	lsls	r2, r2, #9
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	e7b9      	b.n	80033be <LoadEEparams+0xc6>
		BOS.clibaudrate =BOS_default.clibaudrate;
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <LoadEEparams+0x17c>)
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	4b08      	ldr	r3, [pc, #32]	; (8003470 <LoadEEparams+0x178>)
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	e7b4      	b.n	80033be <LoadEEparams+0xc6>
		BOS.hourformat =24;
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <LoadEEparams+0x178>)
 8003456:	2218      	movs	r2, #24
 8003458:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 800345a:	2200      	movs	r2, #0
 800345c:	731a      	strb	r2, [r3, #12]
 800345e:	e7bd      	b.n	80033dc <LoadEEparams+0xe4>
		BOS.disableCLI =(uint8_t )temp1;
 8003460:	466b      	mov	r3, sp
 8003462:	88da      	ldrh	r2, [r3, #6]
 8003464:	4b02      	ldr	r3, [pc, #8]	; (8003470 <LoadEEparams+0x178>)
 8003466:	769a      	strb	r2, [r3, #26]
 8003468:	e7c4      	b.n	80033f4 <LoadEEparams+0xfc>
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	20006b74 	.word	0x20006b74
 8003470:	20006bf4 	.word	0x20006bf4
 8003474:	20000008 	.word	0x20000008
 8003478:	20000000 	.word	0x20000000
 800347c:	20000a87 	.word	0x20000a87

08003480 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003482:	46ce      	mov	lr, r9
 8003484:	4647      	mov	r7, r8
 8003486:	b580      	push	{r7, lr}
 8003488:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 800348a:	231e      	movs	r3, #30
 800348c:	446b      	add	r3, sp
 800348e:	2200      	movs	r2, #0
 8003490:	801a      	strh	r2, [r3, #0]
 8003492:	2501      	movs	r5, #1
 8003494:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003496:	001e      	movs	r6, r3
 8003498:	230f      	movs	r3, #15
 800349a:	4698      	mov	r8, r3
 800349c:	e004      	b.n	80034a8 <LoadEEbuttons+0x28>
 800349e:	3404      	adds	r4, #4
 80034a0:	b2a4      	uxth	r4, r4
 80034a2:	3501      	adds	r5, #1
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80034a4:	2d07      	cmp	r5, #7
 80034a6:	d058      	beq.n	800355a <LoadEEbuttons+0xda>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 80034a8:	0031      	movs	r1, r6
 80034aa:	0020      	movs	r0, r4
 80034ac:	f004 fac0 	bl	8007a30 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 80034b0:	2800      	cmp	r0, #0
 80034b2:	d1f4      	bne.n	800349e <LoadEEbuttons+0x1e>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 80034b4:	8831      	ldrh	r1, [r6, #0]
 80034b6:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 80034b8:	091a      	lsrs	r2, r3, #4
 80034ba:	42aa      	cmp	r2, r5
 80034bc:	d1ef      	bne.n	800349e <LoadEEbuttons+0x1e>
 80034be:	4640      	mov	r0, r8
 80034c0:	4003      	ands	r3, r0
 80034c2:	d0ec      	beq.n	800349e <LoadEEbuttons+0x1e>
			{
				button[i + 1].type =temp8 & 0x0F;
 80034c4:	00d0      	lsls	r0, r2, #3
 80034c6:	1882      	adds	r2, r0, r2
 80034c8:	4827      	ldr	r0, [pc, #156]	; (8003568 <LoadEEbuttons+0xe8>)
 80034ca:	4681      	mov	r9, r0
 80034cc:	4491      	add	r9, r2
 80034ce:	464a      	mov	r2, r9
 80034d0:	7053      	strb	r3, [r2, #1]
				button[i + 1].events =(uint8_t )temp16;
 80034d2:	7211      	strb	r1, [r2, #8]
 80034d4:	00af      	lsls	r7, r5, #2
 80034d6:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 80034d8:	0038      	movs	r0, r7
 80034da:	30e9      	adds	r0, #233	; 0xe9
 80034dc:	b280      	uxth	r0, r0
 80034de:	0031      	movs	r1, r6
 80034e0:	f004 faa6 	bl	8007a30 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80034e4:	8833      	ldrh	r3, [r6, #0]
 80034e6:	0a1a      	lsrs	r2, r3, #8
 80034e8:	4649      	mov	r1, r9
 80034ea:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80034ec:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80034ee:	0038      	movs	r0, r7
 80034f0:	30ea      	adds	r0, #234	; 0xea
 80034f2:	b280      	uxth	r0, r0
 80034f4:	0031      	movs	r1, r6
 80034f6:	f004 fa9b 	bl	8007a30 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80034fa:	8833      	ldrh	r3, [r6, #0]
 80034fc:	0a1a      	lsrs	r2, r3, #8
 80034fe:	4649      	mov	r1, r9
 8003500:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 8003502:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003504:	37eb      	adds	r7, #235	; 0xeb
 8003506:	b2b8      	uxth	r0, r7
 8003508:	0031      	movs	r1, r6
 800350a:	f004 fa91 	bl	8007a30 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 800350e:	8833      	ldrh	r3, [r6, #0]
 8003510:	0a1a      	lsrs	r2, r3, #8
 8003512:	4649      	mov	r1, r9
 8003514:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 8003516:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 8003518:	b2ef      	uxtb	r7, r5
 800351a:	7848      	ldrb	r0, [r1, #1]
 800351c:	0039      	movs	r1, r7
 800351e:	f004 ff83 	bl	8008428 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003522:	464b      	mov	r3, r9
 8003524:	7a19      	ldrb	r1, [r3, #8]
 8003526:	789b      	ldrb	r3, [r3, #2]
 8003528:	104a      	asrs	r2, r1, #1
 800352a:	2001      	movs	r0, #1
 800352c:	4002      	ands	r2, r0
 800352e:	4001      	ands	r1, r0
 8003530:	2000      	movs	r0, #0
 8003532:	9005      	str	r0, [sp, #20]
 8003534:	4648      	mov	r0, r9
 8003536:	79c0      	ldrb	r0, [r0, #7]
 8003538:	9004      	str	r0, [sp, #16]
 800353a:	4648      	mov	r0, r9
 800353c:	7980      	ldrb	r0, [r0, #6]
 800353e:	9003      	str	r0, [sp, #12]
 8003540:	4648      	mov	r0, r9
 8003542:	7940      	ldrb	r0, [r0, #5]
 8003544:	9002      	str	r0, [sp, #8]
 8003546:	4648      	mov	r0, r9
 8003548:	7900      	ldrb	r0, [r0, #4]
 800354a:	9001      	str	r0, [sp, #4]
 800354c:	4648      	mov	r0, r9
 800354e:	78c0      	ldrb	r0, [r0, #3]
 8003550:	9000      	str	r0, [sp, #0]
 8003552:	0038      	movs	r0, r7
 8003554:	f005 f880 	bl	8008658 <SetButtonEvents>
 8003558:	e7a1      	b.n	800349e <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 800355a:	2000      	movs	r0, #0
 800355c:	b009      	add	sp, #36	; 0x24
 800355e:	bc0c      	pop	{r2, r3}
 8003560:	4690      	mov	r8, r2
 8003562:	4699      	mov	r9, r3
 8003564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	20001724 	.word	0x20001724

0800356c <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 800356c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356e:	46de      	mov	lr, fp
 8003570:	4657      	mov	r7, sl
 8003572:	464e      	mov	r6, r9
 8003574:	b5c0      	push	{r6, r7, lr}
 8003576:	b082      	sub	sp, #8
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003578:	2032      	movs	r0, #50	; 0x32
 800357a:	f011 f84b 	bl	8014614 <malloc>
 800357e:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 8003580:	d100      	bne.n	8003584 <LoadROsnippets+0x18>
 8003582:	e071      	b.n	8003668 <LoadROsnippets+0xfc>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 8003584:	4b39      	ldr	r3, [pc, #228]	; (800366c <LoadROsnippets+0x100>)
 8003586:	781b      	ldrb	r3, [r3, #0]
		return BOS_ERROR;
 8003588:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 800358a:	2bfe      	cmp	r3, #254	; 0xfe
 800358c:	d166      	bne.n	800365c <LoadROsnippets+0xf0>
 800358e:	4e38      	ldr	r6, [pc, #224]	; (8003670 <LoadROsnippets+0x104>)
 8003590:	3b9a      	subs	r3, #154	; 0x9a
 8003592:	469b      	mov	fp, r3
 8003594:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 8003596:	4d35      	ldr	r5, [pc, #212]	; (800366c <LoadROsnippets+0x100>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003598:	1c7b      	adds	r3, r7, #1
 800359a:	9301      	str	r3, [sp, #4]
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 800359c:	4b35      	ldr	r3, [pc, #212]	; (8003674 <LoadROsnippets+0x108>)
 800359e:	4699      	mov	r9, r3
 80035a0:	e023      	b.n	80035ea <LoadROsnippets+0x7e>
		i =0;
 80035a2:	2400      	movs	r4, #0
		if(snipBuffer[i - 1] != 0)
 80035a4:	193b      	adds	r3, r7, r4
 80035a6:	3b01      	subs	r3, #1
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <LoadROsnippets+0x46>
			++i;	// String termination char was not recorded, then add one
 80035ae:	3401      	adds	r4, #1
 80035b0:	b2e4      	uxtb	r4, r4
		snippets[s].cmd =(char* )malloc(i);
 80035b2:	0020      	movs	r0, r4
 80035b4:	f011 f82e 	bl	8014614 <malloc>
 80035b8:	4653      	mov	r3, sl
 80035ba:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 80035bc:	2800      	cmp	r0, #0
 80035be:	d03f      	beq.n	8003640 <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd,snipBuffer,i);
 80035c0:	0022      	movs	r2, r4
 80035c2:	0039      	movs	r1, r7
 80035c4:	f011 fa73 	bl	8014aae <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80035c8:	464b      	mov	r3, r9
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	464a      	mov	r2, r9
 80035d0:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 80035d2:	0022      	movs	r2, r4
 80035d4:	2100      	movs	r1, #0
 80035d6:	0038      	movs	r0, r7
 80035d8:	f011 fa72 	bl	8014ac0 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 80035dc:	9b00      	ldr	r3, [sp, #0]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2bfe      	cmp	r3, #254	; 0xfe
 80035e2:	d137      	bne.n	8003654 <LoadROsnippets+0xe8>
 80035e4:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80035e6:	455e      	cmp	r6, fp
 80035e8:	d034      	beq.n	8003654 <LoadROsnippets+0xe8>
 80035ea:	0028      	movs	r0, r5
 80035ec:	3014      	adds	r0, #20
BOS_Status LoadROsnippets(void){
 80035ee:	002b      	movs	r3, r5
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 80035f0:	1b79      	subs	r1, r7, r5
 80035f2:	781a      	ldrb	r2, [r3, #0]
 80035f4:	54ca      	strb	r2, [r1, r3]
 80035f6:	3301      	adds	r3, #1
		for(i =0; i < sizeof(snippet_t); i++)
 80035f8:	4283      	cmp	r3, r0
 80035fa:	d1fa      	bne.n	80035f2 <LoadROsnippets+0x86>
 80035fc:	3514      	adds	r5, #20
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80035fe:	46b2      	mov	sl, r6
 8003600:	2214      	movs	r2, #20
 8003602:	9901      	ldr	r1, [sp, #4]
 8003604:	0030      	movs	r0, r6
 8003606:	f011 fa52 	bl	8014aae <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 800360a:	2214      	movs	r2, #20
 800360c:	2100      	movs	r1, #0
 800360e:	0038      	movs	r0, r7
 8003610:	f011 fa56 	bl	8014ac0 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003614:	9500      	str	r5, [sp, #0]
 8003616:	782a      	ldrb	r2, [r5, #0]
 8003618:	1c93      	adds	r3, r2, #2
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d9c0      	bls.n	80035a2 <LoadROsnippets+0x36>
 8003620:	0039      	movs	r1, r7
		i =0;
 8003622:	2400      	movs	r4, #0
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003624:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 8003626:	3501      	adds	r5, #1
			++i;
 8003628:	3401      	adds	r4, #1
 800362a:	b2e4      	uxtb	r4, r4
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800362c:	9500      	str	r5, [sp, #0]
 800362e:	782a      	ldrb	r2, [r5, #0]
 8003630:	1c93      	adds	r3, r2, #2
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d9b5      	bls.n	80035a4 <LoadROsnippets+0x38>
 8003638:	3101      	adds	r1, #1
 800363a:	2c32      	cmp	r4, #50	; 0x32
 800363c:	d1f2      	bne.n	8003624 <LoadROsnippets+0xb8>
 800363e:	e7b1      	b.n	80035a4 <LoadROsnippets+0x38>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003640:	2214      	movs	r2, #20
 8003642:	2100      	movs	r1, #0
 8003644:	4650      	mov	r0, sl
 8003646:	f011 fa3b 	bl	8014ac0 <memset>
			free(snipBuffer);
 800364a:	0038      	movs	r0, r7
 800364c:	f010 ffec 	bl	8014628 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003650:	200e      	movs	r0, #14
 8003652:	e003      	b.n	800365c <LoadROsnippets+0xf0>
			break;
	}
	
	free(snipBuffer);
 8003654:	0038      	movs	r0, r7
 8003656:	f010 ffe7 	bl	8014628 <free>
	return BOS_OK;
 800365a:	2000      	movs	r0, #0
}
 800365c:	b002      	add	sp, #8
 800365e:	bc1c      	pop	{r2, r3, r4}
 8003660:	4691      	mov	r9, r2
 8003662:	469a      	mov	sl, r3
 8003664:	46a3      	mov	fp, r4
 8003666:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 8003668:	20fb      	movs	r0, #251	; 0xfb
 800366a:	e7f7      	b.n	800365c <LoadROsnippets+0xf0>
 800366c:	0801dc00 	.word	0x0801dc00
 8003670:	20006c10 	.word	0x20006c10
 8003674:	200011f7 	.word	0x200011f7

08003678 <LoadEEvars>:
void LoadEEvars(void){
 8003678:	b510      	push	{r4, lr}
	LoadROtopology();
 800367a:	f7ff fc89 	bl	8002f90 <LoadROtopology>
	LoadEEportsDir();
 800367e:	f7ff fcdb 	bl	8003038 <LoadEEportsDir>
	LoadEEalias();
 8003682:	f7ff fcfd 	bl	8003080 <LoadEEalias>
	LoadEEgroup();
 8003686:	f7ff fd3d 	bl	8003104 <LoadEEgroup>
	LoadEEstreams();
 800368a:	f7ff fd8f 	bl	80031ac <LoadEEstreams>
	LoadEEparams();
 800368e:	f7ff fe33 	bl	80032f8 <LoadEEparams>
	LoadEEbuttons();
 8003692:	f7ff fef5 	bl	8003480 <LoadEEbuttons>
	LoadROsnippets();
 8003696:	f7ff ff69 	bl	800356c <LoadROsnippets>
}
 800369a:	bd10      	pop	{r4, pc}

0800369c <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 800369c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800369e:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <SaveEEportsDir+0x4c>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01a      	beq.n	80036de <SaveEEportsDir+0x42>
 80036a8:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 80036ae:	4e0f      	ldr	r6, [pc, #60]	; (80036ec <SaveEEportsDir+0x50>)
	for(uint8_t i =1; i <= N; i++){
 80036b0:	4f0d      	ldr	r7, [pc, #52]	; (80036e8 <SaveEEportsDir+0x4c>)
 80036b2:	e008      	b.n	80036c6 <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80036b4:	1c60      	adds	r0, r4, #1
 80036b6:	f004 f9eb 	bl	8007a90 <EE_WriteVariable>
 80036ba:	e00a      	b.n	80036d2 <SaveEEportsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 80036bc:	3401      	adds	r4, #1
 80036be:	b2e4      	uxtb	r4, r4
 80036c0:	783b      	ldrb	r3, [r7, #0]
 80036c2:	42a3      	cmp	r3, r4
 80036c4:	d30d      	bcc.n	80036e2 <SaveEEportsDir+0x46>
		if(arrayPortsDir[i - 1])
 80036c6:	0025      	movs	r5, r4
 80036c8:	1e63      	subs	r3, r4, #1
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	5b99      	ldrh	r1, [r3, r6]
 80036ce:	2900      	cmp	r1, #0
 80036d0:	d1f0      	bne.n	80036b4 <SaveEEportsDir+0x18>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80036d2:	3502      	adds	r5, #2
 80036d4:	2d1b      	cmp	r5, #27
 80036d6:	ddf1      	ble.n	80036bc <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 80036d8:	230a      	movs	r3, #10
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	e7ee      	b.n	80036bc <SaveEEportsDir+0x20>
	BOS_Status result =BOS_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 80036e2:	9801      	ldr	r0, [sp, #4]
 80036e4:	b003      	add	sp, #12
 80036e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e8:	20000024 	.word	0x20000024
 80036ec:	20007068 	.word	0x20007068

080036f0 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 80036f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f2:	46d6      	mov	lr, sl
 80036f4:	464f      	mov	r7, r9
 80036f6:	4646      	mov	r6, r8
 80036f8:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80036fa:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	4698      	mov	r8, r3
	    {
		if(moduleAlias[i][0]){
 8003700:	4b1a      	ldr	r3, [pc, #104]	; (800376c <SaveEEalias+0x7c>)
 8003702:	469a      	mov	sl, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003704:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <SaveEEalias+0x80>)
 8003706:	4699      	mov	r9, r3
 8003708:	e005      	b.n	8003716 <SaveEEalias+0x26>
 800370a:	3601      	adds	r6, #1
 800370c:	b2f6      	uxtb	r6, r6
 800370e:	464b      	mov	r3, r9
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	42b3      	cmp	r3, r6
 8003714:	d324      	bcc.n	8003760 <SaveEEalias+0x70>
		if(moduleAlias[i][0]){
 8003716:	00b3      	lsls	r3, r6, #2
 8003718:	199b      	adds	r3, r3, r6
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4652      	mov	r2, sl
 800371e:	5c9b      	ldrb	r3, [r3, r2]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f2      	beq.n	800370a <SaveEEalias+0x1a>
 8003724:	00b5      	lsls	r5, r6, #2
 8003726:	19ad      	adds	r5, r5, r6
 8003728:	006d      	lsls	r5, r5, #1
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <SaveEEalias+0x7c>)
 800372c:	469c      	mov	ip, r3
 800372e:	4465      	add	r5, ip
 8003730:	4644      	mov	r4, r8
 8003732:	341c      	adds	r4, #28
 8003734:	b2a4      	uxth	r4, r4
 8003736:	4647      	mov	r7, r8
 8003738:	3721      	adds	r7, #33	; 0x21
 800373a:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 800373c:	782b      	ldrb	r3, [r5, #0]
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	7869      	ldrb	r1, [r5, #1]
 8003742:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 8003744:	b289      	uxth	r1, r1
 8003746:	0020      	movs	r0, r4
 8003748:	f004 f9a2 	bl	8007a90 <EE_WriteVariable>
 800374c:	3502      	adds	r5, #2
 800374e:	3401      	adds	r4, #1
 8003750:	b2a4      	uxth	r4, r4
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003752:	42bc      	cmp	r4, r7
 8003754:	d1f2      	bne.n	800373c <SaveEEalias+0x4c>
 8003756:	4643      	mov	r3, r8
 8003758:	3305      	adds	r3, #5
 800375a:	b29b      	uxth	r3, r3
 800375c:	4698      	mov	r8, r3
 800375e:	e7d4      	b.n	800370a <SaveEEalias+0x1a>
			}
		}
	}
	
	return result;
}
 8003760:	2000      	movs	r0, #0
 8003762:	bc1c      	pop	{r2, r3, r4}
 8003764:	4690      	mov	r8, r2
 8003766:	4699      	mov	r9, r3
 8003768:	46a2      	mov	sl, r4
 800376a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376c:	20000f44 	.word	0x20000f44
 8003770:	20000024 	.word	0x20000024

08003774 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	46de      	mov	lr, fp
 8003778:	4657      	mov	r7, sl
 800377a:	464e      	mov	r6, r9
 800377c:	4645      	mov	r5, r8
 800377e:	b5e0      	push	{r5, r6, r7, lr}
 8003780:	000f      	movs	r7, r1
 8003782:	0016      	movs	r6, r2
 8003784:	4699      	mov	r9, r3
 8003786:	ab0a      	add	r3, sp, #40	; 0x28
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	469b      	mov	fp, r3
 800378c:	ab0b      	add	r3, sp, #44	; 0x2c
 800378e:	781d      	ldrb	r5, [r3, #0]
 8003790:	ab0c      	add	r3, sp, #48	; 0x30
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	469a      	mov	sl, r3
 8003796:	ab0d      	add	r3, sp, #52	; 0x34
 8003798:	781c      	ldrb	r4, [r3, #0]
 800379a:	ab0e      	add	r3, sp, #56	; 0x38
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 80037a0:	b281      	uxth	r1, r0
 80037a2:	20e4      	movs	r0, #228	; 0xe4
 80037a4:	f004 f974 	bl	8007a90 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 80037a8:	0a39      	lsrs	r1, r7, #8
 80037aa:	b289      	uxth	r1, r1
 80037ac:	20e5      	movs	r0, #229	; 0xe5
 80037ae:	f004 f96f 	bl	8007a90 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 80037b2:	b2b9      	uxth	r1, r7
 80037b4:	20e6      	movs	r0, #230	; 0xe6
 80037b6:	f004 f96b 	bl	8007a90 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 80037ba:	0a31      	lsrs	r1, r6, #8
 80037bc:	b289      	uxth	r1, r1
 80037be:	20e7      	movs	r0, #231	; 0xe7
 80037c0:	f004 f966 	bl	8007a90 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037c4:	b2b1      	uxth	r1, r6
 80037c6:	20e8      	movs	r0, #232	; 0xe8
 80037c8:	f004 f962 	bl	8007a90 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037cc:	464b      	mov	r3, r9
 80037ce:	0219      	lsls	r1, r3, #8
 80037d0:	4459      	add	r1, fp
 80037d2:	b289      	uxth	r1, r1
 80037d4:	20e9      	movs	r0, #233	; 0xe9
 80037d6:	f004 f95b 	bl	8007a90 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80037da:	022d      	lsls	r5, r5, #8
 80037dc:	4455      	add	r5, sl
 80037de:	b2a9      	uxth	r1, r5
 80037e0:	20ea      	movs	r0, #234	; 0xea
 80037e2:	f004 f955 	bl	8007a90 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80037e6:	0224      	lsls	r4, r4, #8
 80037e8:	4444      	add	r4, r8
 80037ea:	b2a1      	uxth	r1, r4
 80037ec:	20eb      	movs	r0, #235	; 0xeb
 80037ee:	f004 f94f 	bl	8007a90 <EE_WriteVariable>
	
	return result;
}
 80037f2:	2000      	movs	r0, #0
 80037f4:	bc3c      	pop	{r2, r3, r4, r5}
 80037f6:	4690      	mov	r8, r2
 80037f8:	4699      	mov	r9, r3
 80037fa:	46a2      	mov	sl, r4
 80037fc:	46ab      	mov	fp, r5
 80037fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003800 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 8003800:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003802:	4c1f      	ldr	r4, [pc, #124]	; (8003880 <SaveEEparams+0x80>)
 8003804:	7863      	ldrb	r3, [r4, #1]
 8003806:	015b      	lsls	r3, r3, #5
 8003808:	7821      	ldrb	r1, [r4, #0]
 800380a:	4319      	orrs	r1, r3
 800380c:	208a      	movs	r0, #138	; 0x8a
 800380e:	0040      	lsls	r0, r0, #1
 8003810:	f004 f93e 	bl	8007a90 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 8003814:	7921      	ldrb	r1, [r4, #4]
 8003816:	03c9      	lsls	r1, r1, #15
 8003818:	88e3      	ldrh	r3, [r4, #6]
 800381a:	4319      	orrs	r1, r3
 800381c:	b289      	uxth	r1, r1
 800381e:	208e      	movs	r0, #142	; 0x8e
 8003820:	0040      	lsls	r0, r0, #1
 8003822:	f004 f935 	bl	8007a90 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003826:	4c17      	ldr	r4, [pc, #92]	; (8003884 <SaveEEparams+0x84>)
 8003828:	8821      	ldrh	r1, [r4, #0]
 800382a:	2016      	movs	r0, #22
 800382c:	30ff      	adds	r0, #255	; 0xff
 800382e:	f004 f92f 	bl	8007a90 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 8003832:	8861      	ldrh	r1, [r4, #2]
 8003834:	208b      	movs	r0, #139	; 0x8b
 8003836:	0040      	lsls	r0, r0, #1
 8003838:	f004 f92a 	bl	8007a90 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 800383c:	7963      	ldrb	r3, [r4, #5]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	7b21      	ldrb	r1, [r4, #12]
 8003842:	4319      	orrs	r1, r3
 8003844:	2018      	movs	r0, #24
 8003846:	30ff      	adds	r0, #255	; 0xff
 8003848:	f004 f922 	bl	8007a90 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 800384c:	8921      	ldrh	r1, [r4, #8]
 800384e:	208c      	movs	r0, #140	; 0x8c
 8003850:	0040      	lsls	r0, r0, #1
 8003852:	f004 f91d 	bl	8007a90 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8003856:	8961      	ldrh	r1, [r4, #10]
 8003858:	201a      	movs	r0, #26
 800385a:	30ff      	adds	r0, #255	; 0xff
 800385c:	f004 f918 	bl	8007a90 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003860:	7b63      	ldrb	r3, [r4, #13]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	7921      	ldrb	r1, [r4, #4]
 8003866:	4319      	orrs	r1, r3
 8003868:	208d      	movs	r0, #141	; 0x8d
 800386a:	0040      	lsls	r0, r0, #1
 800386c:	f004 f910 	bl	8007a90 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003870:	7ea1      	ldrb	r1, [r4, #26]
 8003872:	201c      	movs	r0, #28
 8003874:	30ff      	adds	r0, #255	; 0xff
 8003876:	f004 f90b 	bl	8007a90 <EE_WriteVariable>
	
	return result;
}
 800387a:	2000      	movs	r0, #0
 800387c:	bd10      	pop	{r4, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	20006b74 	.word	0x20006b74
 8003884:	20006bf4 	.word	0x20006bf4

08003888 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 8003888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388a:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 800388c:	2234      	movs	r2, #52	; 0x34
 800388e:	2100      	movs	r1, #0
 8003890:	4813      	ldr	r0, [pc, #76]	; (80038e0 <ClearEEportsDir+0x58>)
 8003892:	f011 f915 	bl	8014ac0 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 8003896:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <ClearEEportsDir+0x5c>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d01a      	beq.n	80038d4 <ClearEEportsDir+0x4c>
 800389e:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 80038a4:	4e0e      	ldr	r6, [pc, #56]	; (80038e0 <ClearEEportsDir+0x58>)
	for(uint8_t i =1; i <= N; i++){
 80038a6:	4f0f      	ldr	r7, [pc, #60]	; (80038e4 <ClearEEportsDir+0x5c>)
 80038a8:	e008      	b.n	80038bc <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80038aa:	1c60      	adds	r0, r4, #1
 80038ac:	f004 f8f0 	bl	8007a90 <EE_WriteVariable>
 80038b0:	e00a      	b.n	80038c8 <ClearEEportsDir+0x40>
	for(uint8_t i =1; i <= N; i++){
 80038b2:	3401      	adds	r4, #1
 80038b4:	b2e4      	uxtb	r4, r4
 80038b6:	783b      	ldrb	r3, [r7, #0]
 80038b8:	42a3      	cmp	r3, r4
 80038ba:	d30d      	bcc.n	80038d8 <ClearEEportsDir+0x50>
		if(arrayPortsDir[i - 1])
 80038bc:	0025      	movs	r5, r4
 80038be:	1e63      	subs	r3, r4, #1
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	5b99      	ldrh	r1, [r3, r6]
 80038c4:	2900      	cmp	r1, #0
 80038c6:	d1f0      	bne.n	80038aa <ClearEEportsDir+0x22>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80038c8:	3502      	adds	r5, #2
 80038ca:	2d1b      	cmp	r5, #27
 80038cc:	ddf1      	ble.n	80038b2 <ClearEEportsDir+0x2a>
			result =BOS_ERR_EEPROM;
 80038ce:	230a      	movs	r3, #10
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	e7ee      	b.n	80038b2 <ClearEEportsDir+0x2a>
	BOS_Status result =BOS_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 80038d8:	9801      	ldr	r0, [sp, #4]
 80038da:	b003      	add	sp, #12
 80038dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	20007068 	.word	0x20007068
 80038e4:	20000024 	.word	0x20000024

080038e8 <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 80038e8:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <EE_FormatForFactoryReset+0x1c>)
 80038ec:	4a06      	ldr	r2, [pc, #24]	; (8003908 <EE_FormatForFactoryReset+0x20>)
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d006      	beq.n	8003902 <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 80038f4:	f004 f974 	bl	8007be0 <EE_Format>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d102      	bne.n	8003902 <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 80038fc:	4b02      	ldr	r3, [pc, #8]	; (8003908 <EE_FormatForFactoryReset+0x20>)
 80038fe:	4a01      	ldr	r2, [pc, #4]	; (8003904 <EE_FormatForFactoryReset+0x1c>)
 8003900:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8003902:	bd10      	pop	{r4, pc}
 8003904:	beefdead 	.word	0xbeefdead
 8003908:	20007ff0 	.word	0x20007ff0

0800390c <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003910:	2512      	movs	r5, #18
 8003912:	446d      	add	r5, sp
 8003914:	ab04      	add	r3, sp, #16
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	ab07      	add	r3, sp, #28
 800391a:	002a      	movs	r2, r5
 800391c:	a908      	add	r1, sp, #32
 800391e:	2001      	movs	r0, #1
 8003920:	f00a f9ee 	bl	800dd00 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003924:	ac03      	add	r4, sp, #12
 8003926:	9400      	str	r4, [sp, #0]
 8003928:	ab05      	add	r3, sp, #20
 800392a:	220e      	movs	r2, #14
 800392c:	446a      	add	r2, sp
 800392e:	a906      	add	r1, sp, #24
 8003930:	2002      	movs	r0, #2
 8003932:	f00a f9e5 	bl	800dd00 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003936:	2301      	movs	r3, #1
 8003938:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393a:	2600      	movs	r6, #0
 800393c:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 800393e:	882b      	ldrh	r3, [r5, #0]
 8003940:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003942:	a909      	add	r1, sp, #36	; 0x24
 8003944:	9808      	ldr	r0, [sp, #32]
 8003946:	f00e fbed 	bl	8012124 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800394a:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800394c:	2302      	movs	r3, #2
 800394e:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003950:	8823      	ldrh	r3, [r4, #0]
 8003952:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003954:	a909      	add	r1, sp, #36	; 0x24
 8003956:	9805      	ldr	r0, [sp, #20]
 8003958:	f00e fbe4 	bl	8012124 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800395c:	8829      	ldrh	r1, [r5, #0]
 800395e:	2200      	movs	r2, #0
 8003960:	9808      	ldr	r0, [sp, #32]
 8003962:	f00e fd53 	bl	801240c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 8003966:	2005      	movs	r0, #5
 8003968:	f00a fd5c 	bl	800e424 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 800396c:	8821      	ldrh	r1, [r4, #0]
 800396e:	9805      	ldr	r0, [sp, #20]
 8003970:	f00e fd46 	bl	8012400 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8003974:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003976:	2800      	cmp	r0, #0
 8003978:	d002      	beq.n	8003980 <IsLowerCLIbaud+0x74>
}
 800397a:	0018      	movs	r0, r3
 800397c:	b00e      	add	sp, #56	; 0x38
 800397e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003980:	3312      	adds	r3, #18
 8003982:	446b      	add	r3, sp
 8003984:	8819      	ldrh	r1, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	9808      	ldr	r0, [sp, #32]
 800398a:	f00e fd3f 	bl	801240c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800398e:	2005      	movs	r0, #5
 8003990:	f00a fd48 	bl	800e424 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8003994:	ab03      	add	r3, sp, #12
 8003996:	8819      	ldrh	r1, [r3, #0]
 8003998:	9805      	ldr	r0, [sp, #20]
 800399a:	f00e fd31 	bl	8012400 <HAL_GPIO_ReadPin>
 800399e:	3801      	subs	r0, #1
 80039a0:	4243      	negs	r3, r0
 80039a2:	4143      	adcs	r3, r0
			return 1;
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e7e8      	b.n	800397a <IsLowerCLIbaud+0x6e>

080039a8 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 80039a8:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 80039aa:	f00a fed1 	bl	800e750 <GetUart>
 80039ae:	0004      	movs	r4, r0
	
	huart->Init.BaudRate =57600;
 80039b0:	23e1      	movs	r3, #225	; 0xe1
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 80039bc:	2380      	movs	r3, #128	; 0x80
 80039be:	015b      	lsls	r3, r3, #5
 80039c0:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 80039c2:	f010 fc85 	bl	80142d0 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 80039c6:	6822      	ldr	r2, [r4, #0]
 80039c8:	6813      	ldr	r3, [r2, #0]
 80039ca:	2120      	movs	r1, #32
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6013      	str	r3, [r2, #0]
}
 80039d0:	bd10      	pop	{r4, pc}
	...

080039d4 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 80039d4:	b510      	push	{r4, lr}
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 80039d6:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <IsModuleParameter+0x14>)
 80039d8:	6899      	ldr	r1, [r3, #8]
 80039da:	f7fc fb93 	bl	8000104 <strcmp>
 80039de:	4243      	negs	r3, r0
 80039e0:	4158      	adcs	r0, r3
 80039e2:	b2c0      	uxtb	r0, r0
			return i + 1;
	}
	return 0;
}
 80039e4:	bd10      	pop	{r4, pc}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	20000090 	.word	0x20000090

080039ec <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 80039f0:	491b      	ldr	r1, [pc, #108]	; (8003a60 <IsMathOperator+0x74>)
 80039f2:	f7fc fb87 	bl	8000104 <strcmp>
 80039f6:	0006      	movs	r6, r0
 80039f8:	2506      	movs	r5, #6
 80039fa:	2e00      	cmp	r6, #0
 80039fc:	d023      	beq.n	8003a46 <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 80039fe:	4919      	ldr	r1, [pc, #100]	; (8003a64 <IsMathOperator+0x78>)
 8003a00:	0020      	movs	r0, r4
 8003a02:	f7fc fb7f 	bl	8000104 <strcmp>
 8003a06:	2800      	cmp	r0, #0
 8003a08:	d01f      	beq.n	8003a4a <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003a0a:	4917      	ldr	r1, [pc, #92]	; (8003a68 <IsMathOperator+0x7c>)
 8003a0c:	0020      	movs	r0, r4
 8003a0e:	f7fc fb79 	bl	8000104 <strcmp>
 8003a12:	2800      	cmp	r0, #0
 8003a14:	d01b      	beq.n	8003a4e <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003a16:	4915      	ldr	r1, [pc, #84]	; (8003a6c <IsMathOperator+0x80>)
 8003a18:	0020      	movs	r0, r4
 8003a1a:	f7fc fb73 	bl	8000104 <strcmp>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d017      	beq.n	8003a52 <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003a22:	4913      	ldr	r1, [pc, #76]	; (8003a70 <IsMathOperator+0x84>)
 8003a24:	0020      	movs	r0, r4
 8003a26:	f7fc fb6d 	bl	8000104 <strcmp>
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d013      	beq.n	8003a56 <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003a2e:	4911      	ldr	r1, [pc, #68]	; (8003a74 <IsMathOperator+0x88>)
 8003a30:	0020      	movs	r0, r4
 8003a32:	f7fc fb67 	bl	8000104 <strcmp>
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d00f      	beq.n	8003a5a <IsMathOperator+0x6e>
 8003a3a:	3d01      	subs	r5, #1
 8003a3c:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003a3e:	2d00      	cmp	r5, #0
 8003a40:	d1db      	bne.n	80039fa <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
	}
	return 0;
 8003a42:	2000      	movs	r0, #0
}
 8003a44:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8003a46:	2001      	movs	r0, #1
 8003a48:	e7fc      	b.n	8003a44 <IsMathOperator+0x58>
			return MATH_GREATER;
 8003a4a:	2002      	movs	r0, #2
 8003a4c:	e7fa      	b.n	8003a44 <IsMathOperator+0x58>
			return MATH_SMALLER;
 8003a4e:	2003      	movs	r0, #3
 8003a50:	e7f8      	b.n	8003a44 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 8003a52:	2004      	movs	r0, #4
 8003a54:	e7f6      	b.n	8003a44 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 8003a56:	2005      	movs	r0, #5
 8003a58:	e7f4      	b.n	8003a44 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8003a5a:	2006      	movs	r0, #6
 8003a5c:	e7f2      	b.n	8003a44 <IsMathOperator+0x58>
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	08019690 	.word	0x08019690
 8003a64:	08019694 	.word	0x08019694
 8003a68:	08019698 	.word	0x08019698
 8003a6c:	0801969c 	.word	0x0801969c
 8003a70:	080196a0 	.word	0x080196a0
 8003a74:	080196a4 	.word	0x080196a4

08003a78 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	0007      	movs	r7, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a7e:	2401      	movs	r4, #1
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003a80:	4d0d      	ldr	r5, [pc, #52]	; (8003ab8 <ExploreNeighbors+0x40>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003a82:	2603      	movs	r6, #3
		if(port != ignore){
 8003a84:	42a7      	cmp	r7, r4
 8003a86:	d00f      	beq.n	8003aa8 <ExploreNeighbors+0x30>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003a88:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <ExploreNeighbors+0x44>)
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	0a1a      	lsrs	r2, r3, #8
 8003a8e:	702a      	strb	r2, [r5, #0]
			messageParams[1] =(uint8_t )myPN;
 8003a90:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
 8003a92:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003a94:	9600      	str	r6, [sp, #0]
 8003a96:	230a      	movs	r3, #10
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	0020      	movs	r0, r4
 8003a9e:	f005 fd1f 	bl	80094e0 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003aa2:	200a      	movs	r0, #10
 8003aa4:	f00a ff9f 	bl	800e9e6 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003aa8:	3401      	adds	r4, #1
 8003aaa:	b2e4      	uxtb	r4, r4
 8003aac:	2c06      	cmp	r4, #6
 8003aae:	d1e9      	bne.n	8003a84 <ExploreNeighbors+0xc>
		}
	}
	
	return result;
}
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	b003      	add	sp, #12
 8003ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	20000f14 	.word	0x20000f14
 8003abc:	20000058 	.word	0x20000058

08003ac0 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac2:	46de      	mov	lr, fp
 8003ac4:	4657      	mov	r7, sl
 8003ac6:	464e      	mov	r6, r9
 8003ac8:	4645      	mov	r5, r8
 8003aca:	b5e0      	push	{r5, r6, r7, lr}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003ad0:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <FindBroadcastRoutes+0x130>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	469c      	mov	ip, r3
 8003ad6:	3307      	adds	r3, #7
 8003ad8:	08db      	lsrs	r3, r3, #3
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	466a      	mov	r2, sp
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	469d      	mov	sp, r3
 8003ae2:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003ae4:	4663      	mov	r3, ip
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <FindBroadcastRoutes+0x46>
 8003aea:	0023      	movs	r3, r4
 8003aec:	4a41      	ldr	r2, [pc, #260]	; (8003bf4 <FindBroadcastRoutes+0x134>)
 8003aee:	4661      	mov	r1, ip
 8003af0:	1e4d      	subs	r5, r1, #1
 8003af2:	b2ed      	uxtb	r5, r5
 8003af4:	3501      	adds	r5, #1
 8003af6:	192d      	adds	r5, r5, r4
		modules[m] =0;
 8003af8:	2100      	movs	r1, #0
 8003afa:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] =0;
 8003afc:	8011      	strh	r1, [r2, #0]
 8003afe:	3301      	adds	r3, #1
 8003b00:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 8003b02:	42ab      	cmp	r3, r5
 8003b04:	d1f9      	bne.n	8003afa <FindBroadcastRoutes+0x3a>
	}
	modules[src - 1] =++level;					// Tag the source
 8003b06:	3801      	subs	r0, #1
 8003b08:	2301      	movs	r3, #1
 8003b0a:	5423      	strb	r3, [r4, r0]
 8003b0c:	2216      	movs	r2, #22
 8003b0e:	4342      	muls	r2, r0
 8003b10:	3202      	adds	r2, #2
 8003b12:	4b39      	ldr	r3, [pc, #228]	; (8003bf8 <FindBroadcastRoutes+0x138>)
 8003b14:	18d2      	adds	r2, r2, r3
 8003b16:	2100      	movs	r1, #0

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003b18:	4d36      	ldr	r5, [pc, #216]	; (8003bf4 <FindBroadcastRoutes+0x134>)
 8003b1a:	0040      	lsls	r0, r0, #1
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003b20:	46a3      	mov	fp, r4
 8003b22:	e003      	b.n	8003b2c <FindBroadcastRoutes+0x6c>
 8003b24:	3101      	adds	r1, #1
 8003b26:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 8003b28:	2906      	cmp	r1, #6
 8003b2a:	d011      	beq.n	8003b50 <FindBroadcastRoutes+0x90>
		if(array[src - 1][p]){
 8003b2c:	8813      	ldrh	r3, [r2, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f8      	beq.n	8003b24 <FindBroadcastRoutes+0x64>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003b32:	5b46      	ldrh	r6, [r0, r5]
 8003b34:	46b1      	mov	r9, r6
 8003b36:	4646      	mov	r6, r8
 8003b38:	408e      	lsls	r6, r1
 8003b3a:	46b2      	mov	sl, r6
 8003b3c:	464e      	mov	r6, r9
 8003b3e:	4654      	mov	r4, sl
 8003b40:	4326      	orrs	r6, r4
 8003b42:	5346      	strh	r6, [r0, r5]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003b44:	08db      	lsrs	r3, r3, #3
 8003b46:	445b      	add	r3, fp
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	2402      	movs	r4, #2
 8003b4c:	701c      	strb	r4, [r3, #0]
 8003b4e:	e7e9      	b.n	8003b24 <FindBroadcastRoutes+0x64>
 8003b50:	465c      	mov	r4, fp
	++level;												// Move one level
 8003b52:	2602      	movs	r6, #2
 8003b54:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <FindBroadcastRoutes+0x138>)
 8003b56:	3302      	adds	r3, #2
 8003b58:	607b      	str	r3, [r7, #4]
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	469b      	mov	fp, r3
 8003b5e:	46b0      	mov	r8, r6
 8003b60:	0026      	movs	r6, r4
		++level;											// Move one level
 8003b62:	4643      	mov	r3, r8
 8003b64:	3301      	adds	r3, #1
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	4698      	mov	r8, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003b6a:	4663      	mov	r3, ip
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d035      	beq.n	8003bdc <FindBroadcastRoutes+0x11c>
 8003b70:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003b76:	3b01      	subs	r3, #1
 8003b78:	4443      	add	r3, r8
 8003b7a:	4699      	mov	r9, r3
 8003b7c:	e01e      	b.n	8003bbc <FindBroadcastRoutes+0xfc>
 8003b7e:	3001      	adds	r0, #1
 8003b80:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003b82:	2806      	cmp	r0, #6
 8003b84:	d015      	beq.n	8003bb2 <FindBroadcastRoutes+0xf2>
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003b86:	880b      	ldrh	r3, [r1, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f8      	beq.n	8003b7e <FindBroadcastRoutes+0xbe>
 8003b8c:	08db      	lsrs	r3, r3, #3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	5cf5      	ldrb	r5, [r6, r3]
 8003b92:	2d00      	cmp	r5, #0
 8003b94:	d1f3      	bne.n	8003b7e <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003b96:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <FindBroadcastRoutes+0x134>)
 8003b98:	5aa5      	ldrh	r5, [r4, r2]
 8003b9a:	465a      	mov	r2, fp
 8003b9c:	4082      	lsls	r2, r0
 8003b9e:	4315      	orrs	r5, r2
 8003ba0:	4a14      	ldr	r2, [pc, #80]	; (8003bf4 <FindBroadcastRoutes+0x134>)
 8003ba2:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003ba4:	4642      	mov	r2, r8
 8003ba6:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	3301      	adds	r3, #1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	e7e5      	b.n	8003b7e <FindBroadcastRoutes+0xbe>
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003bb6:	b2d3      	uxtb	r3, r2
 8003bb8:	4563      	cmp	r3, ip
 8003bba:	d20c      	bcs.n	8003bd6 <FindBroadcastRoutes+0x116>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003bbc:	5cb3      	ldrb	r3, [r6, r2]
 8003bbe:	454b      	cmp	r3, r9
 8003bc0:	d1f8      	bne.n	8003bb4 <FindBroadcastRoutes+0xf4>
 8003bc2:	2116      	movs	r1, #22
 8003bc4:	4351      	muls	r1, r2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	469a      	mov	sl, r3
 8003bca:	4451      	add	r1, sl
 8003bcc:	0053      	lsls	r3, r2, #1
 8003bce:	2000      	movs	r0, #0
 8003bd0:	60ba      	str	r2, [r7, #8]
 8003bd2:	001c      	movs	r4, r3
 8003bd4:	e7d7      	b.n	8003b86 <FindBroadcastRoutes+0xc6>
					}
				}
			}
		}
	} while(untaged);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1c2      	bne.n	8003b62 <FindBroadcastRoutes+0xa2>
	
	return result;
}
 8003bdc:	2000      	movs	r0, #0
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b005      	add	sp, #20
 8003be2:	bc3c      	pop	{r2, r3, r4, r5}
 8003be4:	4690      	mov	r8, r2
 8003be6:	4699      	mov	r9, r3
 8003be8:	46a2      	mov	sl, r4
 8003bea:	46ab      	mov	fp, r5
 8003bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	20000024 	.word	0x20000024
 8003bf4:	20000ccc 	.word	0x20000ccc
 8003bf8:	20000a8c 	.word	0x20000a8c

08003bfc <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 8003bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 8003bfe:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 8003c00:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])						// Not visited yet
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d100      	bne.n	8003c08 <minArr+0xc>
		smallest =arr[0];
 8003c06:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <minArr+0x38>)
 8003c0a:	781d      	ldrb	r5, [r3, #0]
 8003c0c:	2d00      	cmp	r5, #0
 8003c0e:	dd0e      	ble.n	8003c2e <minArr+0x32>
 8003c10:	2300      	movs	r3, #0
 8003c12:	2700      	movs	r7, #0
 8003c14:	e002      	b.n	8003c1c <minArr+0x20>
 8003c16:	3301      	adds	r3, #1
 8003c18:	42ab      	cmp	r3, r5
 8003c1a:	da09      	bge.n	8003c30 <minArr+0x34>
		if((arr[i] < smallest) && !Q[i]){
 8003c1c:	5cc2      	ldrb	r2, [r0, r3]
 8003c1e:	42a2      	cmp	r2, r4
 8003c20:	d2f9      	bcs.n	8003c16 <minArr+0x1a>
 8003c22:	5cce      	ldrb	r6, [r1, r3]
 8003c24:	2e00      	cmp	r6, #0
 8003c26:	d1f6      	bne.n	8003c16 <minArr+0x1a>
			smallest =arr[i];
			index =i;
 8003c28:	b2df      	uxtb	r7, r3
			smallest =arr[i];
 8003c2a:	0014      	movs	r4, r2
 8003c2c:	e7f3      	b.n	8003c16 <minArr+0x1a>
	for(int i =0; i < N; i++){
 8003c2e:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 8003c30:	0038      	movs	r0, r7
 8003c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c34:	20000024 	.word	0x20000024

08003c38 <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003c38:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <QnotEmpty+0x20>)
 8003c3a:	7819      	ldrb	r1, [r3, #0]
 8003c3c:	2900      	cmp	r1, #0
 8003c3e:	d008      	beq.n	8003c52 <QnotEmpty+0x1a>
 8003c40:	0003      	movs	r3, r0
 8003c42:	1841      	adds	r1, r0, r1
	char temp =1;
 8003c44:	2001      	movs	r0, #1
		temp &=Q[i];
 8003c46:	781a      	ldrb	r2, [r3, #0]
 8003c48:	4010      	ands	r0, r2
 8003c4a:	3301      	adds	r3, #1
	for(int i =0; i < N; i++){
 8003c4c:	428b      	cmp	r3, r1
 8003c4e:	d1fa      	bne.n	8003c46 <QnotEmpty+0xe>
	}
	
	return temp;
}
 8003c50:	4770      	bx	lr
	char temp =1;
 8003c52:	2001      	movs	r0, #1
 8003c54:	e7fc      	b.n	8003c50 <QnotEmpty+0x18>
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	20000024 	.word	0x20000024

08003c5c <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5e:	46de      	mov	lr, fp
 8003c60:	4657      	mov	r7, sl
 8003c62:	464e      	mov	r6, r9
 8003c64:	4645      	mov	r5, r8
 8003c66:	b5e0      	push	{r5, r6, r7, lr}
 8003c68:	b08f      	sub	sp, #60	; 0x3c
 8003c6a:	0005      	movs	r5, r0
 8003c6c:	468a      	mov	sl, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003c6e:	2232      	movs	r2, #50	; 0x32
 8003c70:	2100      	movs	r1, #0
 8003c72:	a801      	add	r0, sp, #4
 8003c74:	f010 ff24 	bl	8014ac0 <memset>
	memset(route,0,sizeof(route));
 8003c78:	221a      	movs	r2, #26
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	485a      	ldr	r0, [pc, #360]	; (8003de8 <FindRoute+0x18c>)
 8003c7e:	f010 ff1f 	bl	8014ac0 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003c82:	0029      	movs	r1, r5
 8003c84:	1e68      	subs	r0, r5, #1
 8003c86:	2300      	movs	r3, #0
 8003c88:	4a58      	ldr	r2, [pc, #352]	; (8003dec <FindRoute+0x190>)
 8003c8a:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003c8c:	4a58      	ldr	r2, [pc, #352]	; (8003df0 <FindRoute+0x194>)
 8003c8e:	5413      	strb	r3, [r2, r0]
 8003c90:	2516      	movs	r5, #22
 8003c92:	4345      	muls	r5, r0
 8003c94:	3502      	adds	r5, #2
 8003c96:	4b57      	ldr	r3, [pc, #348]	; (8003df4 <FindRoute+0x198>)
 8003c98:	18ed      	adds	r5, r5, r3
 8003c9a:	002a      	movs	r2, r5
	for(int col =1; col <= 6; col++){
 8003c9c:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003c9e:	4653      	mov	r3, sl
 8003ca0:	b29c      	uxth	r4, r3
 8003ca2:	e003      	b.n	8003cac <FindRoute+0x50>
	for(int col =1; col <= 6; col++){
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	3202      	adds	r2, #2
 8003ca8:	2807      	cmp	r0, #7
 8003caa:	d00f      	beq.n	8003ccc <FindRoute+0x70>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003cac:	8813      	ldrh	r3, [r2, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f8      	beq.n	8003ca4 <FindRoute+0x48>
 8003cb2:	08db      	lsrs	r3, r3, #3
 8003cb4:	42a3      	cmp	r3, r4
 8003cb6:	d1f5      	bne.n	8003ca4 <FindRoute+0x48>
			routeDist[desID - 1] =1;
 8003cb8:	4b4c      	ldr	r3, [pc, #304]	; (8003dec <FindRoute+0x190>)
 8003cba:	4453      	add	r3, sl
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 8003cc2:	4b49      	ldr	r3, [pc, #292]	; (8003de8 <FindRoute+0x18c>)
 8003cc4:	4652      	mov	r2, sl
 8003cc6:	701a      	strb	r2, [r3, #0]
			return col;
 8003cc8:	b2c0      	uxtb	r0, r0
 8003cca:	e085      	b.n	8003dd8 <FindRoute+0x17c>
	for(int i =1; i <= N; i++){
 8003ccc:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <FindRoute+0x19c>)
 8003cce:	781e      	ldrb	r6, [r3, #0]
 8003cd0:	2e00      	cmp	r6, #0
 8003cd2:	dd11      	ble.n	8003cf8 <FindRoute+0x9c>
 8003cd4:	2301      	movs	r3, #1
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003cd6:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003cd8:	4f45      	ldr	r7, [pc, #276]	; (8003df0 <FindRoute+0x194>)
 8003cda:	2000      	movs	r0, #0
 8003cdc:	46ac      	mov	ip, r5
 8003cde:	e002      	b.n	8003ce6 <FindRoute+0x8a>
	for(int i =1; i <= N; i++){
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	42b3      	cmp	r3, r6
 8003ce4:	dc07      	bgt.n	8003cf6 <FindRoute+0x9a>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003ce6:	4299      	cmp	r1, r3
 8003ce8:	d0fa      	beq.n	8003ce0 <FindRoute+0x84>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003cea:	1e5a      	subs	r2, r3, #1
 8003cec:	4d3f      	ldr	r5, [pc, #252]	; (8003dec <FindRoute+0x190>)
 8003cee:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003cf0:	18ba      	adds	r2, r7, r2
 8003cf2:	7010      	strb	r0, [r2, #0]
 8003cf4:	e7f4      	b.n	8003ce0 <FindRoute+0x84>
 8003cf6:	4665      	mov	r5, ip
	uint8_t u =0;
 8003cf8:	2400      	movs	r4, #0
 8003cfa:	4b3e      	ldr	r3, [pc, #248]	; (8003df4 <FindRoute+0x198>)
 8003cfc:	4698      	mov	r8, r3
 8003cfe:	230e      	movs	r3, #14
 8003d00:	4443      	add	r3, r8
 8003d02:	4656      	mov	r6, sl
 8003d04:	469b      	mov	fp, r3
 8003d06:	46a9      	mov	r9, r5
 8003d08:	e01d      	b.n	8003d46 <FindRoute+0xea>
 8003d0a:	464d      	mov	r5, r9
 8003d0c:	46b2      	mov	sl, r6
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003d0e:	0034      	movs	r4, r6
 8003d10:	e034      	b.n	8003d7c <FindRoute+0x120>
 8003d12:	3102      	adds	r1, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003d14:	4281      	cmp	r1, r0
 8003d16:	d015      	beq.n	8003d44 <FindRoute+0xe8>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003d18:	880b      	ldrh	r3, [r1, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f9      	beq.n	8003d12 <FindRoute+0xb6>
				v =(array[u - 1][n] >> 3);
 8003d1e:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	5cd7      	ldrb	r7, [r2, r3]
 8003d26:	2f00      	cmp	r7, #0
 8003d28:	d1f3      	bne.n	8003d12 <FindRoute+0xb6>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003d2a:	4f30      	ldr	r7, [pc, #192]	; (8003dec <FindRoute+0x190>)
 8003d2c:	5d7f      	ldrb	r7, [r7, r5]
 8003d2e:	3701      	adds	r7, #1
 8003d30:	b2ff      	uxtb	r7, r7
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003d32:	4e2e      	ldr	r6, [pc, #184]	; (8003dec <FindRoute+0x190>)
 8003d34:	5cf6      	ldrb	r6, [r6, r3]
 8003d36:	42be      	cmp	r6, r7
 8003d38:	d9eb      	bls.n	8003d12 <FindRoute+0xb6>
						routeDist[v - 1] =alt;
 8003d3a:	4e2c      	ldr	r6, [pc, #176]	; (8003dec <FindRoute+0x190>)
 8003d3c:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] =u;
 8003d3e:	4e2c      	ldr	r6, [pc, #176]	; (8003df0 <FindRoute+0x194>)
 8003d40:	54f4      	strb	r4, [r6, r3]
 8003d42:	e7e6      	b.n	8003d12 <FindRoute+0xb6>
 8003d44:	4656      	mov	r6, sl
	while(!QnotEmpty(Q)){
 8003d46:	a801      	add	r0, sp, #4
 8003d48:	f7ff ff76 	bl	8003c38 <QnotEmpty>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d113      	bne.n	8003d78 <FindRoute+0x11c>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003d50:	a901      	add	r1, sp, #4
 8003d52:	4826      	ldr	r0, [pc, #152]	; (8003dec <FindRoute+0x190>)
 8003d54:	f7ff ff52 	bl	8003bfc <minArr>
 8003d58:	3001      	adds	r0, #1
 8003d5a:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003d5c:	42b4      	cmp	r4, r6
 8003d5e:	d0d4      	beq.n	8003d0a <FindRoute+0xae>
			Q[u - 1] =1;									// Remove u from Q
 8003d60:	1e65      	subs	r5, r4, #1
 8003d62:	ab01      	add	r3, sp, #4
 8003d64:	2201      	movs	r2, #1
 8003d66:	555a      	strb	r2, [r3, r5]
 8003d68:	2016      	movs	r0, #22
 8003d6a:	4368      	muls	r0, r5
 8003d6c:	1c81      	adds	r1, r0, #2
 8003d6e:	4441      	add	r1, r8
 8003d70:	4458      	add	r0, fp
				if(!Q[v - 1])								// v is still in Q
 8003d72:	001a      	movs	r2, r3
 8003d74:	46b2      	mov	sl, r6
 8003d76:	e7cf      	b.n	8003d18 <FindRoute+0xbc>
 8003d78:	464d      	mov	r5, r9
 8003d7a:	46b2      	mov	sl, r6
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003d7c:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <FindRoute+0x194>)
 8003d7e:	191b      	adds	r3, r3, r4
 8003d80:	3b01      	subs	r3, #1
 8003d82:	781a      	ldrb	r2, [r3, #0]
 8003d84:	2300      	movs	r3, #0
 8003d86:	2a00      	cmp	r2, #0
 8003d88:	d00e      	beq.n	8003da8 <FindRoute+0x14c>
		route[j++] =u;          			// Push the vertex onto the stack
 8003d8a:	4917      	ldr	r1, [pc, #92]	; (8003de8 <FindRoute+0x18c>)
 8003d8c:	468c      	mov	ip, r1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003d8e:	4e18      	ldr	r6, [pc, #96]	; (8003df0 <FindRoute+0x194>)
 8003d90:	e000      	b.n	8003d94 <FindRoute+0x138>
 8003d92:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003d94:	1c58      	adds	r0, r3, #1
 8003d96:	4661      	mov	r1, ip
 8003d98:	54cc      	strb	r4, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003d9a:	18b3      	adds	r3, r6, r2
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	7819      	ldrb	r1, [r3, #0]
 8003da0:	0014      	movs	r4, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003da2:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003da4:	2900      	cmp	r1, #0
 8003da6:	d1f4      	bne.n	8003d92 <FindRoute+0x136>
	for(int col =1; col <= 6; col++){
 8003da8:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003daa:	490f      	ldr	r1, [pc, #60]	; (8003de8 <FindRoute+0x18c>)
 8003dac:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <FindRoute+0x190>)
 8003dae:	4453      	add	r3, sl
 8003db0:	001f      	movs	r7, r3
 8003db2:	3f01      	subs	r7, #1
 8003db4:	e003      	b.n	8003dbe <FindRoute+0x162>
	for(int col =1; col <= 6; col++){
 8003db6:	3001      	adds	r0, #1
 8003db8:	3502      	adds	r5, #2
 8003dba:	2807      	cmp	r0, #7
 8003dbc:	d00b      	beq.n	8003dd6 <FindRoute+0x17a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003dbe:	882b      	ldrh	r3, [r5, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f8      	beq.n	8003db6 <FindRoute+0x15a>
 8003dc4:	783a      	ldrb	r2, [r7, #0]
 8003dc6:	188a      	adds	r2, r1, r2
 8003dc8:	3a01      	subs	r2, #1
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	08db      	lsrs	r3, r3, #3
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d1f1      	bne.n	8003db6 <FindRoute+0x15a>
			return col;
 8003dd2:	b2c0      	uxtb	r0, r0
 8003dd4:	e000      	b.n	8003dd8 <FindRoute+0x17c>
	return 0;
 8003dd6:	2000      	movs	r0, #0
}
 8003dd8:	b00f      	add	sp, #60	; 0x3c
 8003dda:	bc3c      	pop	{r2, r3, r4, r5}
 8003ddc:	4690      	mov	r8, r2
 8003dde:	4699      	mov	r9, r3
 8003de0:	46a2      	mov	sl, r4
 8003de2:	46ab      	mov	fp, r5
 8003de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	20006cf8 	.word	0x20006cf8
 8003dec:	200010ec 	.word	0x200010ec
 8003df0:	20001108 	.word	0x20001108
 8003df4:	20000a8c 	.word	0x20000a8c
 8003df8:	20000024 	.word	0x20000024

08003dfc <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	0007      	movs	r7, r0
 8003e02:	000e      	movs	r6, r1
 8003e04:	9205      	str	r2, [sp, #20]
 8003e06:	001d      	movs	r5, r3
	myOutport =FindRoute(myID,dst);
 8003e08:	4b37      	ldr	r3, [pc, #220]	; (8003ee8 <remoteBootloaderUpdate+0xec>)
 8003e0a:	7818      	ldrb	r0, [r3, #0]
 8003e0c:	f7ff ff26 	bl	8003c5c <FindRoute>
 8003e10:	9004      	str	r0, [sp, #16]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003e12:	2d00      	cmp	r5, #0
 8003e14:	d020      	beq.n	8003e58 <remoteBootloaderUpdate+0x5c>
 8003e16:	4b34      	ldr	r3, [pc, #208]	; (8003ee8 <remoteBootloaderUpdate+0xec>)
 8003e18:	781c      	ldrb	r4, [r3, #0]
 8003e1a:	42b4      	cmp	r4, r6
 8003e1c:	d05f      	beq.n	8003ede <remoteBootloaderUpdate+0xe2>
	if(src == myID){
 8003e1e:	42bc      	cmp	r4, r7
 8003e20:	d034      	beq.n	8003e8c <remoteBootloaderUpdate+0x90>
	uint8_t myOutport =0, lastModule =0;
 8003e22:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003e24:	9805      	ldr	r0, [sp, #20]
 8003e26:	f7ff fdbf 	bl	80039a8 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003e2a:	9804      	ldr	r0, [sp, #16]
 8003e2c:	f7ff fdbc 	bl	80039a8 <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 8003e30:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <remoteBootloaderUpdate+0xec>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	42a3      	cmp	r3, r4
 8003e36:	d046      	beq.n	8003ec6 <remoteBootloaderUpdate+0xca>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8003e38:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <remoteBootloaderUpdate+0xec>)
 8003e3a:	7819      	ldrb	r1, [r3, #0]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9303      	str	r3, [sp, #12]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	9302      	str	r3, [sp, #8]
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	3303      	adds	r3, #3
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	000b      	movs	r3, r1
 8003e4c:	9a04      	ldr	r2, [sp, #16]
 8003e4e:	9805      	ldr	r0, [sp, #20]
 8003e50:	f005 fdf2 	bl	8009a38 <StartScastDMAStream>
}
 8003e54:	b007      	add	sp, #28
 8003e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(NumberOfHops(dst)== 1)
 8003e58:	4b24      	ldr	r3, [pc, #144]	; (8003eec <remoteBootloaderUpdate+0xf0>)
 8003e5a:	199b      	adds	r3, r3, r6
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	781a      	ldrb	r2, [r3, #0]
 8003e60:	2a01      	cmp	r2, #1
 8003e62:	d010      	beq.n	8003e86 <remoteBootloaderUpdate+0x8a>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003e64:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <remoteBootloaderUpdate+0xf4>)
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	781c      	ldrb	r4, [r3, #0]
	if(src == myID){
 8003e6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <remoteBootloaderUpdate+0xec>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	42bb      	cmp	r3, r7
 8003e72:	d1d7      	bne.n	8003e24 <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003e74:	f00a fecc 	bl	800ec10 <FreeRTOS_CLIGetOutputBuffer>
 8003e78:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8003e7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <remoteBootloaderUpdate+0xf8>)
 8003e7c:	6819      	ldr	r1, [r3, #0]
 8003e7e:	0032      	movs	r2, r6
 8003e80:	f011 f818 	bl	8014eb4 <sprintf>
 8003e84:	e00d      	b.n	8003ea2 <remoteBootloaderUpdate+0xa6>
		lastModule = myID;
 8003e86:	4b18      	ldr	r3, [pc, #96]	; (8003ee8 <remoteBootloaderUpdate+0xec>)
 8003e88:	781c      	ldrb	r4, [r3, #0]
 8003e8a:	e7ef      	b.n	8003e6c <remoteBootloaderUpdate+0x70>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003e8c:	f00a fec0 	bl	800ec10 <FreeRTOS_CLIGetOutputBuffer>
 8003e90:	0007      	movs	r7, r0
	uint8_t myOutport =0, lastModule =0;
 8003e92:	2400      	movs	r4, #0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8003e94:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <remoteBootloaderUpdate+0xfc>)
 8003e96:	6819      	ldr	r1, [r3, #0]
 8003e98:	002b      	movs	r3, r5
 8003e9a:	0032      	movs	r2, r6
 8003e9c:	0038      	movs	r0, r7
 8003e9e:	f011 f809 	bl	8014eb4 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003ea2:	4b16      	ldr	r3, [pc, #88]	; (8003efc <remoteBootloaderUpdate+0x100>)
 8003ea4:	6819      	ldr	r1, [r3, #0]
 8003ea6:	0038      	movs	r0, r7
 8003ea8:	f011 f824 	bl	8014ef4 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8003eac:	0038      	movs	r0, r7
 8003eae:	f7fc f933 	bl	8000118 <strlen>
 8003eb2:	b282      	uxth	r2, r0
 8003eb4:	2332      	movs	r3, #50	; 0x32
 8003eb6:	0039      	movs	r1, r7
 8003eb8:	9805      	ldr	r0, [sp, #20]
 8003eba:	f00a fc8f 	bl	800e7dc <writePxITMutex>
		Delay_ms(100);
 8003ebe:	2064      	movs	r0, #100	; 0x64
 8003ec0:	f00c fdc8 	bl	8010a54 <HAL_Delay>
 8003ec4:	e7ae      	b.n	8003e24 <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport),REVERSED);
 8003ec6:	9804      	ldr	r0, [sp, #16]
 8003ec8:	f00a fc42 	bl	800e750 <GetUart>
 8003ecc:	2101      	movs	r1, #1
 8003ece:	f00a fcd5 	bl	800e87c <SwapUartPins>
 8003ed2:	e7b1      	b.n	8003e38 <remoteBootloaderUpdate+0x3c>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003ed4:	f00a fe9c 	bl	800ec10 <FreeRTOS_CLIGetOutputBuffer>
 8003ed8:	0007      	movs	r7, r0
		myOutport =outport;
 8003eda:	9504      	str	r5, [sp, #16]
 8003edc:	e7da      	b.n	8003e94 <remoteBootloaderUpdate+0x98>
	if(src == myID){
 8003ede:	42bc      	cmp	r4, r7
 8003ee0:	d0f8      	beq.n	8003ed4 <remoteBootloaderUpdate+0xd8>
		myOutport =outport;
 8003ee2:	9504      	str	r5, [sp, #16]
 8003ee4:	e79e      	b.n	8003e24 <remoteBootloaderUpdate+0x28>
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	20001052 	.word	0x20001052
 8003eec:	200010ec 	.word	0x200010ec
 8003ef0:	20006cf8 	.word	0x20006cf8
 8003ef4:	20000080 	.word	0x20000080
 8003ef8:	20000084 	.word	0x20000084
 8003efc:	20000088 	.word	0x20000088

08003f00 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f02:	46d6      	mov	lr, sl
 8003f04:	464f      	mov	r7, r9
 8003f06:	4646      	mov	r6, r8
 8003f08:	b5c0      	push	{r6, r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	0005      	movs	r5, r0
 8003f0e:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003f10:	4c56      	ldr	r4, [pc, #344]	; (800406c <DisplayTopology+0x16c>)
 8003f12:	4b57      	ldr	r3, [pc, #348]	; (8004070 <DisplayTopology+0x170>)
 8003f14:	0022      	movs	r2, r4
 8003f16:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f18:	c243      	stmia	r2!, {r0, r1, r6}
 8003f1a:	6819      	ldr	r1, [r3, #0]
 8003f1c:	6011      	str	r1, [r2, #0]
 8003f1e:	889b      	ldrh	r3, [r3, #4]
 8003f20:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f22:	0020      	movs	r0, r4
 8003f24:	f7fc f8f8 	bl	8000118 <strlen>
 8003f28:	b282      	uxth	r2, r0
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	425b      	negs	r3, r3
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	3333      	adds	r3, #51	; 0x33
 8003f32:	0021      	movs	r1, r4
 8003f34:	0028      	movs	r0, r5
 8003f36:	f00a fc29 	bl	800e78c <writePxMutex>
 8003f3a:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003f3c:	4f4d      	ldr	r7, [pc, #308]	; (8004074 <DisplayTopology+0x174>)
 8003f3e:	4d4b      	ldr	r5, [pc, #300]	; (800406c <DisplayTopology+0x16c>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f40:	2601      	movs	r6, #1
 8003f42:	4276      	negs	r6, r6
		sprintf(pcUserMessage,"P%d\t",i);
 8003f44:	0022      	movs	r2, r4
 8003f46:	0039      	movs	r1, r7
 8003f48:	0028      	movs	r0, r5
 8003f4a:	f010 ffb3 	bl	8014eb4 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f4e:	0028      	movs	r0, r5
 8003f50:	f7fc f8e2 	bl	8000118 <strlen>
 8003f54:	b282      	uxth	r2, r0
 8003f56:	9600      	str	r6, [sp, #0]
 8003f58:	2332      	movs	r3, #50	; 0x32
 8003f5a:	0029      	movs	r1, r5
 8003f5c:	9803      	ldr	r0, [sp, #12]
 8003f5e:	f00a fc15 	bl	800e78c <writePxMutex>
 8003f62:	3401      	adds	r4, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003f64:	2c06      	cmp	r4, #6
 8003f66:	d1ed      	bne.n	8003f44 <DisplayTopology+0x44>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003f68:	2301      	movs	r3, #1
 8003f6a:	425b      	negs	r3, r3
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	3333      	adds	r3, #51	; 0x33
 8003f70:	2203      	movs	r2, #3
 8003f72:	4941      	ldr	r1, [pc, #260]	; (8004078 <DisplayTopology+0x178>)
 8003f74:	9803      	ldr	r0, [sp, #12]
 8003f76:	f00a fc09 	bl	800e78c <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003f7a:	4b40      	ldr	r3, [pc, #256]	; (800407c <DisplayTopology+0x17c>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d065      	beq.n	800404e <DisplayTopology+0x14e>
 8003f82:	2600      	movs	r6, #0
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f84:	2701      	movs	r7, #1
 8003f86:	427f      	negs	r7, r7
		HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003f88:	4b3d      	ldr	r3, [pc, #244]	; (8004080 <DisplayTopology+0x180>)
 8003f8a:	4699      	mov	r9, r3
 8003f8c:	230c      	movs	r3, #12
 8003f8e:	444b      	add	r3, r9
 8003f90:	469a      	mov	sl, r3
 8003f92:	e02a      	b.n	8003fea <DisplayTopology+0xea>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003f94:	2307      	movs	r3, #7
 8003f96:	4013      	ands	r3, r2
 8003f98:	08d2      	lsrs	r2, r2, #3
 8003f9a:	493a      	ldr	r1, [pc, #232]	; (8004084 <DisplayTopology+0x184>)
 8003f9c:	4833      	ldr	r0, [pc, #204]	; (800406c <DisplayTopology+0x16c>)
 8003f9e:	f010 ff89 	bl	8014eb4 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003fa2:	4d32      	ldr	r5, [pc, #200]	; (800406c <DisplayTopology+0x16c>)
 8003fa4:	0028      	movs	r0, r5
 8003fa6:	f7fc f8b7 	bl	8000118 <strlen>
 8003faa:	b282      	uxth	r2, r0
 8003fac:	9700      	str	r7, [sp, #0]
 8003fae:	2332      	movs	r3, #50	; 0x32
 8003fb0:	0029      	movs	r1, r5
 8003fb2:	9803      	ldr	r0, [sp, #12]
 8003fb4:	f00a fbea 	bl	800e78c <writePxMutex>
 8003fb8:	3402      	adds	r4, #2
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003fba:	42b4      	cmp	r4, r6
 8003fbc:	d007      	beq.n	8003fce <DisplayTopology+0xce>
			if(!array[row][col])
 8003fbe:	8822      	ldrh	r2, [r4, #0]
 8003fc0:	2a00      	cmp	r2, #0
 8003fc2:	d1e7      	bne.n	8003f94 <DisplayTopology+0x94>
				sprintf(pcUserMessage,"%d\t",0);
 8003fc4:	4930      	ldr	r1, [pc, #192]	; (8004088 <DisplayTopology+0x188>)
 8003fc6:	4829      	ldr	r0, [pc, #164]	; (800406c <DisplayTopology+0x16c>)
 8003fc8:	f010 ff74 	bl	8014eb4 <sprintf>
 8003fcc:	e7e9      	b.n	8003fa2 <DisplayTopology+0xa2>
 8003fce:	4646      	mov	r6, r8
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003fd0:	9700      	str	r7, [sp, #0]
 8003fd2:	2332      	movs	r3, #50	; 0x32
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	492d      	ldr	r1, [pc, #180]	; (800408c <DisplayTopology+0x18c>)
 8003fd8:	9803      	ldr	r0, [sp, #12]
 8003fda:	f00a fbd7 	bl	800e78c <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003fde:	3601      	adds	r6, #1
 8003fe0:	b2f6      	uxtb	r6, r6
 8003fe2:	4b26      	ldr	r3, [pc, #152]	; (800407c <DisplayTopology+0x17c>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	42b3      	cmp	r3, r6
 8003fe8:	d931      	bls.n	800404e <DisplayTopology+0x14e>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003fea:	1c72      	adds	r2, r6, #1
 8003fec:	4c1f      	ldr	r4, [pc, #124]	; (800406c <DisplayTopology+0x16c>)
 8003fee:	4928      	ldr	r1, [pc, #160]	; (8004090 <DisplayTopology+0x190>)
 8003ff0:	0020      	movs	r0, r4
 8003ff2:	f010 ff5f 	bl	8014eb4 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ff6:	0020      	movs	r0, r4
 8003ff8:	f7fc f88e 	bl	8000118 <strlen>
 8003ffc:	b282      	uxth	r2, r0
 8003ffe:	9700      	str	r7, [sp, #0]
 8004000:	2332      	movs	r3, #50	; 0x32
 8004002:	0021      	movs	r1, r4
 8004004:	9803      	ldr	r0, [sp, #12]
 8004006:	f00a fbc1 	bl	800e78c <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 800400a:	2516      	movs	r5, #22
 800400c:	4375      	muls	r5, r6
 800400e:	464b      	mov	r3, r9
 8004010:	5aeb      	ldrh	r3, [r5, r3]
 8004012:	0059      	lsls	r1, r3, #1
 8004014:	18c9      	adds	r1, r1, r3
 8004016:	0049      	lsls	r1, r1, #1
 8004018:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <DisplayTopology+0x194>)
 800401a:	18c9      	adds	r1, r1, r3
 800401c:	2205      	movs	r2, #5
 800401e:	0020      	movs	r0, r4
 8004020:	f010 ff9d 	bl	8014f5e <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8004024:	9700      	str	r7, [sp, #0]
 8004026:	2332      	movs	r3, #50	; 0x32
 8004028:	2205      	movs	r2, #5
 800402a:	0021      	movs	r1, r4
 800402c:	9c03      	ldr	r4, [sp, #12]
 800402e:	0020      	movs	r0, r4
 8004030:	f00a fbac 	bl	800e78c <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8004034:	9700      	str	r7, [sp, #0]
 8004036:	2332      	movs	r3, #50	; 0x32
 8004038:	2201      	movs	r2, #1
 800403a:	4917      	ldr	r1, [pc, #92]	; (8004098 <DisplayTopology+0x198>)
 800403c:	0020      	movs	r0, r4
 800403e:	f00a fba5 	bl	800e78c <writePxMutex>
 8004042:	1cac      	adds	r4, r5, #2
 8004044:	444c      	add	r4, r9
 8004046:	4455      	add	r5, sl
				sprintf(pcUserMessage,"%d\t",0);
 8004048:	46b0      	mov	r8, r6
 800404a:	002e      	movs	r6, r5
 800404c:	e7b7      	b.n	8003fbe <DisplayTopology+0xbe>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 800404e:	2301      	movs	r3, #1
 8004050:	425b      	negs	r3, r3
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	3333      	adds	r3, #51	; 0x33
 8004056:	2201      	movs	r2, #1
 8004058:	4910      	ldr	r1, [pc, #64]	; (800409c <DisplayTopology+0x19c>)
 800405a:	9803      	ldr	r0, [sp, #12]
 800405c:	f00a fb96 	bl	800e78c <writePxMutex>
}
 8004060:	b004      	add	sp, #16
 8004062:	bc1c      	pop	{r2, r3, r4}
 8004064:	4690      	mov	r8, r2
 8004066:	4699      	mov	r9, r3
 8004068:	46a2      	mov	sl, r4
 800406a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800406c:	2000107c 	.word	0x2000107c
 8004070:	08019654 	.word	0x08019654
 8004074:	08019668 	.word	0x08019668
 8004078:	0801aae8 	.word	0x0801aae8
 800407c:	20000024 	.word	0x20000024
 8004080:	20000a8c 	.word	0x20000a8c
 8004084:	08019680 	.word	0x08019680
 8004088:	0801967c 	.word	0x0801967c
 800408c:	080194fc 	.word	0x080194fc
 8004090:	08019670 	.word	0x08019670
 8004094:	080196bc 	.word	0x080196bc
 8004098:	08019664 	.word	0x08019664
 800409c:	0801c5f0 	.word	0x0801c5f0

080040a0 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 80040a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a2:	46c6      	mov	lr, r8
 80040a4:	b500      	push	{lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	0005      	movs	r5, r0
 80040aa:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 80040ac:	4c30      	ldr	r4, [pc, #192]	; (8004170 <DisplayPortsDir+0xd0>)
 80040ae:	4b31      	ldr	r3, [pc, #196]	; (8004174 <DisplayPortsDir+0xd4>)
 80040b0:	0022      	movs	r2, r4
 80040b2:	cb43      	ldmia	r3!, {r0, r1, r6}
 80040b4:	c243      	stmia	r2!, {r0, r1, r6}
 80040b6:	cb43      	ldmia	r3!, {r0, r1, r6}
 80040b8:	c243      	stmia	r2!, {r0, r1, r6}
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80040be:	0020      	movs	r0, r4
 80040c0:	f7fc f82a 	bl	8000118 <strlen>
 80040c4:	b282      	uxth	r2, r0
 80040c6:	2301      	movs	r3, #1
 80040c8:	425b      	negs	r3, r3
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	3333      	adds	r3, #51	; 0x33
 80040ce:	0021      	movs	r1, r4
 80040d0:	0028      	movs	r0, r5
 80040d2:	f00a fb5b 	bl	800e78c <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 80040d6:	4b28      	ldr	r3, [pc, #160]	; (8004178 <DisplayPortsDir+0xd8>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2201      	movs	r2, #1
 80040dc:	4690      	mov	r8, r2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d02c      	beq.n	800413c <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040e2:	4e26      	ldr	r6, [pc, #152]	; (800417c <DisplayPortsDir+0xdc>)
 80040e4:	e025      	b.n	8004132 <DisplayPortsDir+0x92>
 80040e6:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 80040e8:	2c0a      	cmp	r4, #10
 80040ea:	d01a      	beq.n	8004122 <DisplayPortsDir+0x82>
 80040ec:	1c5c      	adds	r4, r3, #1
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040ee:	5ba9      	ldrh	r1, [r5, r6]
 80040f0:	2280      	movs	r2, #128	; 0x80
 80040f2:	0212      	lsls	r2, r2, #8
 80040f4:	411a      	asrs	r2, r3
 80040f6:	420a      	tst	r2, r1
 80040f8:	d0f5      	beq.n	80040e6 <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80040fa:	4f1d      	ldr	r7, [pc, #116]	; (8004170 <DisplayPortsDir+0xd0>)
 80040fc:	0023      	movs	r3, r4
 80040fe:	4642      	mov	r2, r8
 8004100:	491f      	ldr	r1, [pc, #124]	; (8004180 <DisplayPortsDir+0xe0>)
 8004102:	0038      	movs	r0, r7
 8004104:	f010 fed6 	bl	8014eb4 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8004108:	0038      	movs	r0, r7
 800410a:	f7fc f805 	bl	8000118 <strlen>
 800410e:	b282      	uxth	r2, r0
 8004110:	2301      	movs	r3, #1
 8004112:	425b      	negs	r3, r3
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	3333      	adds	r3, #51	; 0x33
 8004118:	0039      	movs	r1, r7
 800411a:	9803      	ldr	r0, [sp, #12]
 800411c:	f00a fb36 	bl	800e78c <writePxMutex>
 8004120:	e7e1      	b.n	80040e6 <DisplayPortsDir+0x46>
	for(uint8_t i =1; i <= N; i++){
 8004122:	4643      	mov	r3, r8
 8004124:	3301      	adds	r3, #1
 8004126:	b2db      	uxtb	r3, r3
 8004128:	4698      	mov	r8, r3
 800412a:	4b13      	ldr	r3, [pc, #76]	; (8004178 <DisplayPortsDir+0xd8>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	4543      	cmp	r3, r8
 8004130:	d304      	bcc.n	800413c <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 8004132:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004134:	4642      	mov	r2, r8
 8004136:	1e55      	subs	r5, r2, #1
 8004138:	006d      	lsls	r5, r5, #1
 800413a:	e7d7      	b.n	80040ec <DisplayPortsDir+0x4c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 800413c:	4c0c      	ldr	r4, [pc, #48]	; (8004170 <DisplayPortsDir+0xd0>)
 800413e:	4b11      	ldr	r3, [pc, #68]	; (8004184 <DisplayPortsDir+0xe4>)
 8004140:	0022      	movs	r2, r4
 8004142:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004144:	c223      	stmia	r2!, {r0, r1, r5}
 8004146:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004148:	c223      	stmia	r2!, {r0, r1, r5}
 800414a:	cb03      	ldmia	r3!, {r0, r1}
 800414c:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 800414e:	0020      	movs	r0, r4
 8004150:	f7fb ffe2 	bl	8000118 <strlen>
 8004154:	b282      	uxth	r2, r0
 8004156:	2301      	movs	r3, #1
 8004158:	425b      	negs	r3, r3
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	3333      	adds	r3, #51	; 0x33
 800415e:	0021      	movs	r1, r4
 8004160:	9803      	ldr	r0, [sp, #12]
 8004162:	f00a fb13 	bl	800e78c <writePxMutex>
	HAL_MAX_DELAY);
}
 8004166:	b004      	add	sp, #16
 8004168:	bc04      	pop	{r2}
 800416a:	4690      	mov	r8, r2
 800416c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	2000107c 	.word	0x2000107c
 8004174:	08019604 	.word	0x08019604
 8004178:	20000024 	.word	0x20000024
 800417c:	20007068 	.word	0x20007068
 8004180:	08019620 	.word	0x08019620
 8004184:	08019634 	.word	0x08019634

08004188 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8004188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800418a:	46d6      	mov	lr, sl
 800418c:	b500      	push	{lr}
 800418e:	b084      	sub	sp, #16
 8004190:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004192:	f00a fd3d 	bl	800ec10 <FreeRTOS_CLIGetOutputBuffer>
 8004196:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 8004198:	2300      	movs	r3, #0
 800419a:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 800419c:	4b8d      	ldr	r3, [pc, #564]	; (80043d4 <DisplayModuleStatus+0x24c>)
 800419e:	781a      	ldrb	r2, [r3, #0]
 80041a0:	4d8d      	ldr	r5, [pc, #564]	; (80043d8 <DisplayModuleStatus+0x250>)
 80041a2:	498e      	ldr	r1, [pc, #568]	; (80043dc <DisplayModuleStatus+0x254>)
 80041a4:	0028      	movs	r0, r5
 80041a6:	f010 fe85 	bl	8014eb4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041aa:	0029      	movs	r1, r5
 80041ac:	0020      	movs	r0, r4
 80041ae:	f010 fea1 	bl	8014ef4 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 80041b2:	4b8b      	ldr	r3, [pc, #556]	; (80043e0 <DisplayModuleStatus+0x258>)
 80041b4:	781a      	ldrb	r2, [r3, #0]
 80041b6:	498b      	ldr	r1, [pc, #556]	; (80043e4 <DisplayModuleStatus+0x25c>)
 80041b8:	0028      	movs	r0, r5
 80041ba:	f010 fe7b 	bl	8014eb4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041be:	0029      	movs	r1, r5
 80041c0:	0020      	movs	r0, r4
 80041c2:	f010 fe97 	bl	8014ef4 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 80041c6:	2305      	movs	r3, #5
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	3b03      	subs	r3, #3
 80041cc:	2200      	movs	r2, #0
 80041ce:	4986      	ldr	r1, [pc, #536]	; (80043e8 <DisplayModuleStatus+0x260>)
 80041d0:	0028      	movs	r0, r5
 80041d2:	f010 fe6f 	bl	8014eb4 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 80041d6:	0029      	movs	r1, r5
 80041d8:	0020      	movs	r0, r4
 80041da:	f010 fe8b 	bl	8014ef4 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 80041de:	4a83      	ldr	r2, [pc, #524]	; (80043ec <DisplayModuleStatus+0x264>)
 80041e0:	4983      	ldr	r1, [pc, #524]	; (80043f0 <DisplayModuleStatus+0x268>)
 80041e2:	0028      	movs	r0, r5
 80041e4:	f010 fe66 	bl	8014eb4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041e8:	0029      	movs	r1, r5
 80041ea:	0020      	movs	r0, r4
 80041ec:	f010 fe82 	bl	8014ef4 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 80041f0:	4a80      	ldr	r2, [pc, #512]	; (80043f4 <DisplayModuleStatus+0x26c>)
 80041f2:	4981      	ldr	r1, [pc, #516]	; (80043f8 <DisplayModuleStatus+0x270>)
 80041f4:	0028      	movs	r0, r5
 80041f6:	f010 fe5d 	bl	8014eb4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041fa:	0029      	movs	r1, r5
 80041fc:	0020      	movs	r0, r4
 80041fe:	f010 fe79 	bl	8014ef4 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004202:	4b7e      	ldr	r3, [pc, #504]	; (80043fc <DisplayModuleStatus+0x274>)
 8004204:	002a      	movs	r2, r5
 8004206:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004208:	c243      	stmia	r2!, {r0, r1, r6}
 800420a:	6819      	ldr	r1, [r3, #0]
 800420c:	6011      	str	r1, [r2, #0]
 800420e:	8899      	ldrh	r1, [r3, #4]
 8004210:	8091      	strh	r1, [r2, #4]
 8004212:	799b      	ldrb	r3, [r3, #6]
 8004214:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8004216:	0029      	movs	r1, r5
 8004218:	0020      	movs	r0, r4
 800421a:	f010 fe6b 	bl	8014ef4 <strcat>
 800421e:	2601      	movs	r6, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
 8004220:	4d6d      	ldr	r5, [pc, #436]	; (80043d8 <DisplayModuleStatus+0x250>)
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8004222:	4b77      	ldr	r3, [pc, #476]	; (8004400 <DisplayModuleStatus+0x278>)
 8004224:	469a      	mov	sl, r3
 8004226:	e00e      	b.n	8004246 <DisplayModuleStatus+0xbe>
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8004228:	4b6b      	ldr	r3, [pc, #428]	; (80043d8 <DisplayModuleStatus+0x250>)
 800422a:	4a76      	ldr	r2, [pc, #472]	; (8004404 <DisplayModuleStatus+0x27c>)
 800422c:	6811      	ldr	r1, [r2, #0]
 800422e:	6019      	str	r1, [r3, #0]
 8004230:	8891      	ldrh	r1, [r2, #4]
 8004232:	8099      	strh	r1, [r3, #4]
 8004234:	7992      	ldrb	r2, [r2, #6]
 8004236:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8004238:	4967      	ldr	r1, [pc, #412]	; (80043d8 <DisplayModuleStatus+0x250>)
 800423a:	0020      	movs	r0, r4
 800423c:	f010 fe5a 	bl	8014ef4 <strcat>
 8004240:	3601      	adds	r6, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004242:	2e06      	cmp	r6, #6
 8004244:	d039      	beq.n	80042ba <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage,"P%d: ",i);
 8004246:	0032      	movs	r2, r6
 8004248:	496f      	ldr	r1, [pc, #444]	; (8004408 <DisplayModuleStatus+0x280>)
 800424a:	0028      	movs	r0, r5
 800424c:	f010 fe32 	bl	8014eb4 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004250:	0029      	movs	r1, r5
 8004252:	0020      	movs	r0, r4
 8004254:	f010 fe4e 	bl	8014ef4 <strcat>
		switch(portStatus[i]){
 8004258:	4653      	mov	r3, sl
 800425a:	5cf3      	ldrb	r3, [r6, r3]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d8eb      	bhi.n	8004238 <DisplayModuleStatus+0xb0>
 8004260:	4653      	mov	r3, sl
 8004262:	5cf3      	ldrb	r3, [r6, r3]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4a69      	ldr	r2, [pc, #420]	; (800440c <DisplayModuleStatus+0x284>)
 8004268:	58d3      	ldr	r3, [r2, r3]
 800426a:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 800426c:	495a      	ldr	r1, [pc, #360]	; (80043d8 <DisplayModuleStatus+0x250>)
 800426e:	4b68      	ldr	r3, [pc, #416]	; (8004410 <DisplayModuleStatus+0x288>)
 8004270:	000a      	movs	r2, r1
 8004272:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004274:	c283      	stmia	r2!, {r0, r1, r7}
 8004276:	cb03      	ldmia	r3!, {r0, r1}
 8004278:	c203      	stmia	r2!, {r0, r1}
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	7013      	strb	r3, [r2, #0]
				break;
 800427e:	e7db      	b.n	8004238 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Streaming\n\r");
 8004280:	4a55      	ldr	r2, [pc, #340]	; (80043d8 <DisplayModuleStatus+0x250>)
 8004282:	4b64      	ldr	r3, [pc, #400]	; (8004414 <DisplayModuleStatus+0x28c>)
 8004284:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004286:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 8004288:	e7d6      	b.n	8004238 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 800428a:	4953      	ldr	r1, [pc, #332]	; (80043d8 <DisplayModuleStatus+0x250>)
 800428c:	4b62      	ldr	r3, [pc, #392]	; (8004418 <DisplayModuleStatus+0x290>)
 800428e:	000a      	movs	r2, r1
 8004290:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004292:	c283      	stmia	r2!, {r0, r1, r7}
 8004294:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004296:	c283      	stmia	r2!, {r0, r1, r7}
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	8013      	strh	r3, [r2, #0]
				break;
 800429c:	e7cc      	b.n	8004238 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 800429e:	494e      	ldr	r1, [pc, #312]	; (80043d8 <DisplayModuleStatus+0x250>)
 80042a0:	4b5e      	ldr	r3, [pc, #376]	; (800441c <DisplayModuleStatus+0x294>)
 80042a2:	000a      	movs	r2, r1
 80042a4:	cb83      	ldmia	r3!, {r0, r1, r7}
 80042a6:	c283      	stmia	r2!, {r0, r1, r7}
 80042a8:	cb83      	ldmia	r3!, {r0, r1, r7}
 80042aa:	c283      	stmia	r2!, {r0, r1, r7}
 80042ac:	6819      	ldr	r1, [r3, #0]
 80042ae:	6011      	str	r1, [r2, #0]
 80042b0:	8899      	ldrh	r1, [r3, #4]
 80042b2:	8091      	strh	r1, [r2, #4]
 80042b4:	799b      	ldrb	r3, [r3, #6]
 80042b6:	7193      	strb	r3, [r2, #6]
				break;
 80042b8:	e7be      	b.n	8004238 <DisplayModuleStatus+0xb0>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 80042ba:	4947      	ldr	r1, [pc, #284]	; (80043d8 <DisplayModuleStatus+0x250>)
 80042bc:	4b58      	ldr	r3, [pc, #352]	; (8004420 <DisplayModuleStatus+0x298>)
 80042be:	000a      	movs	r2, r1
 80042c0:	cb61      	ldmia	r3!, {r0, r5, r6}
 80042c2:	c261      	stmia	r2!, {r0, r5, r6}
 80042c4:	cb61      	ldmia	r3!, {r0, r5, r6}
 80042c6:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 80042c8:	0020      	movs	r0, r4
 80042ca:	f010 fe13 	bl	8014ef4 <strcat>
 80042ce:	4e55      	ldr	r6, [pc, #340]	; (8004424 <DisplayModuleStatus+0x29c>)
 80042d0:	2701      	movs	r7, #1
 80042d2:	e00d      	b.n	80042f0 <DisplayModuleStatus+0x168>
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80042d4:	4d40      	ldr	r5, [pc, #256]	; (80043d8 <DisplayModuleStatus+0x250>)
 80042d6:	003a      	movs	r2, r7
 80042d8:	4953      	ldr	r1, [pc, #332]	; (8004428 <DisplayModuleStatus+0x2a0>)
 80042da:	0028      	movs	r0, r5
 80042dc:	f010 fdea 	bl	8014eb4 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80042e0:	0029      	movs	r1, r5
 80042e2:	0020      	movs	r0, r4
 80042e4:	f010 fe06 	bl	8014ef4 <strcat>
 80042e8:	3701      	adds	r7, #1
 80042ea:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80042ec:	2f07      	cmp	r7, #7
 80042ee:	d018      	beq.n	8004322 <DisplayModuleStatus+0x19a>
		if(streamDMA[i - 1].Instance == 0){
 80042f0:	6833      	ldr	r3, [r6, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0ee      	beq.n	80042d4 <DisplayModuleStatus+0x14c>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 80042f6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80042f8:	f007 fd8e 	bl	800be18 <GetPort>
 80042fc:	0005      	movs	r5, r0
 80042fe:	00bb      	lsls	r3, r7, #2
 8004300:	3b04      	subs	r3, #4
 8004302:	4a4a      	ldr	r2, [pc, #296]	; (800442c <DisplayModuleStatus+0x2a4>)
 8004304:	58d0      	ldr	r0, [r2, r3]
 8004306:	f007 fd87 	bl	800be18 <GetPort>
 800430a:	9000      	str	r0, [sp, #0]
 800430c:	002b      	movs	r3, r5
 800430e:	003a      	movs	r2, r7
 8004310:	4947      	ldr	r1, [pc, #284]	; (8004430 <DisplayModuleStatus+0x2a8>)
 8004312:	4831      	ldr	r0, [pc, #196]	; (80043d8 <DisplayModuleStatus+0x250>)
 8004314:	f010 fdce 	bl	8014eb4 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004318:	492f      	ldr	r1, [pc, #188]	; (80043d8 <DisplayModuleStatus+0x250>)
 800431a:	0020      	movs	r0, r4
 800431c:	f010 fdea 	bl	8014ef4 <strcat>
 8004320:	e7e2      	b.n	80042e8 <DisplayModuleStatus+0x160>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004322:	0020      	movs	r0, r4
 8004324:	f7fb fef8 	bl	8000118 <strlen>
 8004328:	1820      	adds	r0, r4, r0
 800432a:	2203      	movs	r2, #3
 800432c:	4941      	ldr	r1, [pc, #260]	; (8004434 <DisplayModuleStatus+0x2ac>)
 800432e:	f010 fbbe 	bl	8014aae <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004332:	0020      	movs	r0, r4
 8004334:	f7fb fef0 	bl	8000118 <strlen>
 8004338:	1820      	adds	r0, r4, r0
 800433a:	221d      	movs	r2, #29
 800433c:	493e      	ldr	r1, [pc, #248]	; (8004438 <DisplayModuleStatus+0x2b0>)
 800433e:	f010 fbb6 	bl	8014aae <memcpy>
	temp =strlen((char* )pcOutputString);
 8004342:	0020      	movs	r0, r4
 8004344:	f7fb fee8 	bl	8000118 <strlen>
 8004348:	4682      	mov	sl, r0
 800434a:	2200      	movs	r2, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800434c:	4e3b      	ldr	r6, [pc, #236]	; (800443c <DisplayModuleStatus+0x2b4>)
 800434e:	4f21      	ldr	r7, [pc, #132]	; (80043d4 <DisplayModuleStatus+0x24c>)
 8004350:	e002      	b.n	8004358 <DisplayModuleStatus+0x1d0>
 8004352:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004354:	2d05      	cmp	r5, #5
 8004356:	d013      	beq.n	8004380 <DisplayModuleStatus+0x1f8>
 8004358:	1c55      	adds	r5, r2, #1
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800435a:	783b      	ldrb	r3, [r7, #0]
 800435c:	3b01      	subs	r3, #1
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	5b99      	ldrh	r1, [r3, r6]
 8004362:	2380      	movs	r3, #128	; 0x80
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	4113      	asrs	r3, r2
 8004368:	420b      	tst	r3, r1
 800436a:	d0f2      	beq.n	8004352 <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage,"P%d ",p);
 800436c:	002a      	movs	r2, r5
 800436e:	4934      	ldr	r1, [pc, #208]	; (8004440 <DisplayModuleStatus+0x2b8>)
 8004370:	4819      	ldr	r0, [pc, #100]	; (80043d8 <DisplayModuleStatus+0x250>)
 8004372:	f010 fd9f 	bl	8014eb4 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004376:	4918      	ldr	r1, [pc, #96]	; (80043d8 <DisplayModuleStatus+0x250>)
 8004378:	0020      	movs	r0, r4
 800437a:	f010 fdbb 	bl	8014ef4 <strcat>
 800437e:	e7e8      	b.n	8004352 <DisplayModuleStatus+0x1ca>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 8004380:	0020      	movs	r0, r4
 8004382:	f7fb fec9 	bl	8000118 <strlen>
 8004386:	4653      	mov	r3, sl
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	0c1b      	lsrs	r3, r3, #16
 800438c:	4298      	cmp	r0, r3
 800438e:	d00e      	beq.n	80043ae <DisplayModuleStatus+0x226>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8004390:	0020      	movs	r0, r4
 8004392:	f7fb fec1 	bl	8000118 <strlen>
 8004396:	1820      	adds	r0, r4, r0
 8004398:	2203      	movs	r2, #3
 800439a:	4926      	ldr	r1, [pc, #152]	; (8004434 <DisplayModuleStatus+0x2ac>)
 800439c:	f010 fb87 	bl	8014aae <memcpy>
	
	/* Display output */
	if(port)
 80043a0:	9b03      	ldr	r3, [sp, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d109      	bne.n	80043ba <DisplayModuleStatus+0x232>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 80043a6:	b004      	add	sp, #16
 80043a8:	bc04      	pop	{r2}
 80043aa:	4692      	mov	sl, r2
 80043ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 80043ae:	1820      	adds	r0, r4, r0
 80043b0:	2205      	movs	r2, #5
 80043b2:	4924      	ldr	r1, [pc, #144]	; (8004444 <DisplayModuleStatus+0x2bc>)
 80043b4:	f010 fb7b 	bl	8014aae <memcpy>
 80043b8:	e7ea      	b.n	8004390 <DisplayModuleStatus+0x208>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80043ba:	0020      	movs	r0, r4
 80043bc:	f7fb feac 	bl	8000118 <strlen>
 80043c0:	b282      	uxth	r2, r0
 80043c2:	2301      	movs	r3, #1
 80043c4:	425b      	negs	r3, r3
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	3333      	adds	r3, #51	; 0x33
 80043ca:	0021      	movs	r1, r4
 80043cc:	9803      	ldr	r0, [sp, #12]
 80043ce:	f00a f9dd 	bl	800e78c <writePxMutex>
}
 80043d2:	e7e8      	b.n	80043a6 <DisplayModuleStatus+0x21e>
 80043d4:	20001052 	.word	0x20001052
 80043d8:	2000107c 	.word	0x2000107c
 80043dc:	08019448 	.word	0x08019448
 80043e0:	20000a88 	.word	0x20000a88
 80043e4:	08019464 	.word	0x08019464
 80043e8:	08019480 	.word	0x08019480
 80043ec:	080194a0 	.word	0x080194a0
 80043f0:	080194ac 	.word	0x080194ac
 80043f4:	080194c4 	.word	0x080194c4
 80043f8:	080194d0 	.word	0x080194d0
 80043fc:	080194ec 	.word	0x080194ec
 8004400:	200010cc 	.word	0x200010cc
 8004404:	08019508 	.word	0x08019508
 8004408:	08019500 	.word	0x08019500
 800440c:	08019424 	.word	0x08019424
 8004410:	08019510 	.word	0x08019510
 8004414:	08019528 	.word	0x08019528
 8004418:	08019534 	.word	0x08019534
 800441c:	08019550 	.word	0x08019550
 8004420:	08019570 	.word	0x08019570
 8004424:	20001bbc 	.word	0x20001bbc
 8004428:	08019588 	.word	0x08019588
 800442c:	200016bc 	.word	0x200016bc
 8004430:	080195a4 	.word	0x080195a4
 8004434:	080194fc 	.word	0x080194fc
 8004438:	080195d4 	.word	0x080195d4
 800443c:	20007068 	.word	0x20007068
 8004440:	080195f4 	.word	0x080195f4
 8004444:	080195fc 	.word	0x080195fc

08004448 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444a:	46c6      	mov	lr, r8
 800444c:	b500      	push	{lr}
 800444e:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004450:	4929      	ldr	r1, [pc, #164]	; (80044f8 <GetID+0xb0>)
 8004452:	f7fb fe57 	bl	8000104 <strcmp>
 8004456:	2800      	cmp	r0, #0
 8004458:	d010      	beq.n	800447c <GetID+0x34>
		return myID;
	else if(!strcmp(string,"all"))
 800445a:	4928      	ldr	r1, [pc, #160]	; (80044fc <GetID+0xb4>)
 800445c:	0028      	movs	r0, r5
 800445e:	f7fb fe51 	bl	8000104 <strcmp>
 8004462:	2800      	cmp	r0, #0
 8004464:	d045      	beq.n	80044f2 <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 8004466:	782b      	ldrb	r3, [r5, #0]
 8004468:	4698      	mov	r8, r3
 800446a:	2b23      	cmp	r3, #35	; 0x23
 800446c:	d00b      	beq.n	8004486 <GetID+0x3e>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <GetID+0xb8>)
 8004470:	781f      	ldrb	r7, [r3, #0]
 8004472:	2f00      	cmp	r7, #0
 8004474:	d02a      	beq.n	80044cc <GetID+0x84>
 8004476:	4e23      	ldr	r6, [pc, #140]	; (8004504 <GetID+0xbc>)
 8004478:	2400      	movs	r4, #0
 800447a:	e01c      	b.n	80044b6 <GetID+0x6e>
		return myID;
 800447c:	4b22      	ldr	r3, [pc, #136]	; (8004508 <GetID+0xc0>)
 800447e:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8004480:	bc04      	pop	{r2}
 8004482:	4690      	mov	r8, r2
 8004484:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 8004486:	1c68      	adds	r0, r5, #1
 8004488:	f010 f887 	bl	801459a <atol>
 800448c:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <GetID+0x52>
 8004492:	4a1b      	ldr	r2, [pc, #108]	; (8004500 <GetID+0xb8>)
 8004494:	7812      	ldrb	r2, [r2, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d206      	bcs.n	80044a8 <GetID+0x60>
		else if(id == myID)
 800449a:	4a1b      	ldr	r2, [pc, #108]	; (8004508 <GetID+0xc0>)
 800449c:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 800449e:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d1ed      	bne.n	8004480 <GetID+0x38>
			return myID;
 80044a4:	b210      	sxth	r0, r2
 80044a6:	e7eb      	b.n	8004480 <GetID+0x38>
			return id;
 80044a8:	b218      	sxth	r0, r3
 80044aa:	e7e9      	b.n	8004480 <GetID+0x38>
		for(i =0; i < N; i++){
 80044ac:	3401      	adds	r4, #1
 80044ae:	b2e4      	uxtb	r4, r4
 80044b0:	360a      	adds	r6, #10
 80044b2:	42bc      	cmp	r4, r7
 80044b4:	d00a      	beq.n	80044cc <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 80044b6:	0031      	movs	r1, r6
 80044b8:	0028      	movs	r0, r5
 80044ba:	f7fb fe23 	bl	8000104 <strcmp>
 80044be:	2800      	cmp	r0, #0
 80044c0:	d1f4      	bne.n	80044ac <GetID+0x64>
 80044c2:	4643      	mov	r3, r8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f1      	beq.n	80044ac <GetID+0x64>
				return (i);
 80044c8:	b220      	sxth	r0, r4
 80044ca:	e7d9      	b.n	8004480 <GetID+0x38>
 80044cc:	4f0f      	ldr	r7, [pc, #60]	; (800450c <GetID+0xc4>)
		for(i =0; i < N; i++){
 80044ce:	2600      	movs	r6, #0
			if(!strcmp(string,groupAlias[i]))
 80044d0:	0039      	movs	r1, r7
 80044d2:	0028      	movs	r0, r5
 80044d4:	f7fb fe16 	bl	8000104 <strcmp>
 80044d8:	2800      	cmp	r0, #0
 80044da:	d005      	beq.n	80044e8 <GetID+0xa0>
 80044dc:	3601      	adds	r6, #1
 80044de:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 80044e0:	2e0a      	cmp	r6, #10
 80044e2:	d1f5      	bne.n	80044d0 <GetID+0x88>
		return BOS_ERR_WrongName;
 80044e4:	2064      	movs	r0, #100	; 0x64
 80044e6:	e7cb      	b.n	8004480 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 80044e8:	0234      	lsls	r4, r6, #8
 80044ea:	20fe      	movs	r0, #254	; 0xfe
 80044ec:	4320      	orrs	r0, r4
 80044ee:	b200      	sxth	r0, r0
 80044f0:	e7c6      	b.n	8004480 <GetID+0x38>
		return BOS_BROADCAST;
 80044f2:	20ff      	movs	r0, #255	; 0xff
 80044f4:	e7c4      	b.n	8004480 <GetID+0x38>
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	08019688 	.word	0x08019688
 80044fc:	0801968c 	.word	0x0801968c
 8004500:	20000024 	.word	0x20000024
 8004504:	20000f44 	.word	0x20000f44
 8004508:	20001052 	.word	0x20001052
 800450c:	20000e38 	.word	0x20000e38

08004510 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004512:	b083      	sub	sp, #12
 8004514:	9001      	str	r0, [sp, #4]
 8004516:	000d      	movs	r5, r1
 8004518:	4c2a      	ldr	r4, [pc, #168]	; (80045c4 <NameModule+0xb4>)
 800451a:	0027      	movs	r7, r4
 800451c:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 800451e:	0021      	movs	r1, r4
 8004520:	0028      	movs	r0, r5
 8004522:	f7fb fdef 	bl	8000104 <strcmp>
 8004526:	2800      	cmp	r0, #0
 8004528:	d043      	beq.n	80045b2 <NameModule+0xa2>
 800452a:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 800452c:	42bc      	cmp	r4, r7
 800452e:	d1f6      	bne.n	800451e <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <NameModule+0xb8>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d90f      	bls.n	8004558 <NameModule+0x48>
 8004538:	4c24      	ldr	r4, [pc, #144]	; (80045cc <NameModule+0xbc>)
 800453a:	009f      	lsls	r7, r3, #2
 800453c:	18ff      	adds	r7, r7, r3
 800453e:	007f      	lsls	r7, r7, #1
 8004540:	0023      	movs	r3, r4
 8004542:	3b0a      	subs	r3, #10
 8004544:	18ff      	adds	r7, r7, r3
		if(!strcmp(alias,moduleAlias[i]))
 8004546:	0021      	movs	r1, r4
 8004548:	0028      	movs	r0, r5
 800454a:	f7fb fddb 	bl	8000104 <strcmp>
 800454e:	2800      	cmp	r0, #0
 8004550:	d031      	beq.n	80045b6 <NameModule+0xa6>
 8004552:	340a      	adds	r4, #10
	for(i =1; i < N; i++){
 8004554:	42bc      	cmp	r4, r7
 8004556:	d1f6      	bne.n	8004546 <NameModule+0x36>
 8004558:	4c1d      	ldr	r4, [pc, #116]	; (80045d0 <NameModule+0xc0>)
 800455a:	0027      	movs	r7, r4
 800455c:	3764      	adds	r7, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!strcmp(alias,groupAlias[i]))
 800455e:	0021      	movs	r1, r4
 8004560:	0028      	movs	r0, r5
 8004562:	f7fb fdcf 	bl	8000104 <strcmp>
 8004566:	2800      	cmp	r0, #0
 8004568:	d028      	beq.n	80045bc <NameModule+0xac>
 800456a:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 800456c:	42bc      	cmp	r4, r7
 800456e:	d1f6      	bne.n	800455e <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004570:	4c18      	ldr	r4, [pc, #96]	; (80045d4 <NameModule+0xc4>)
 8004572:	4b19      	ldr	r3, [pc, #100]	; (80045d8 <NameModule+0xc8>)
 8004574:	601c      	str	r4, [r3, #0]
 8004576:	001e      	movs	r6, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800457c:	0038      	movs	r0, r7
 800457e:	f7fb fdcb 	bl	8000118 <strlen>
 8004582:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004584:	0039      	movs	r1, r7
 8004586:	0028      	movs	r0, r5
 8004588:	f010 fcd8 	bl	8014f3c <strncmp>
 800458c:	2800      	cmp	r0, #0
 800458e:	d017      	beq.n	80045c0 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004590:	6864      	ldr	r4, [r4, #4]
 8004592:	6034      	str	r4, [r6, #0]
 8004594:	2c00      	cmp	r4, #0
 8004596:	d1ef      	bne.n	8004578 <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 8004598:	9b01      	ldr	r3, [sp, #4]
 800459a:	0098      	lsls	r0, r3, #2
 800459c:	469c      	mov	ip, r3
 800459e:	4460      	add	r0, ip
 80045a0:	0040      	lsls	r0, r0, #1
 80045a2:	4e0e      	ldr	r6, [pc, #56]	; (80045dc <NameModule+0xcc>)
 80045a4:	1980      	adds	r0, r0, r6
 80045a6:	0029      	movs	r1, r5
 80045a8:	f010 fcc0 	bl	8014f2c <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 80045ac:	f7ff f8a0 	bl	80036f0 <SaveEEalias>
	
	return result;
 80045b0:	e002      	b.n	80045b8 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 80045b2:	2006      	movs	r0, #6
 80045b4:	e000      	b.n	80045b8 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 80045b6:	2007      	movs	r0, #7
}
 80045b8:	b003      	add	sp, #12
 80045ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 80045bc:	2007      	movs	r0, #7
 80045be:	e7fb      	b.n	80045b8 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 80045c0:	2008      	movs	r0, #8
 80045c2:	e7f9      	b.n	80045b8 <NameModule+0xa8>
 80045c4:	08019438 	.word	0x08019438
 80045c8:	20000024 	.word	0x20000024
 80045cc:	20000f4e 	.word	0x20000f4e
 80045d0:	20000e38 	.word	0x20000e38
 80045d4:	200000a8 	.word	0x200000a8
 80045d8:	200010d4 	.word	0x200010d4
 80045dc:	20000f44 	.word	0x20000f44

080045e0 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 80045e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045e2:	46c6      	mov	lr, r8
 80045e4:	b500      	push	{lr}
 80045e6:	0007      	movs	r7, r0
 80045e8:	000e      	movs	r6, r1
 80045ea:	4d3a      	ldr	r5, [pc, #232]	; (80046d4 <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80045ec:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80045ee:	0029      	movs	r1, r5
 80045f0:	0030      	movs	r0, r6
 80045f2:	f7fb fd87 	bl	8000104 <strcmp>
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d050      	beq.n	800469c <AddModuleToGroup+0xbc>
	for(i =0; i < MaxNumOfGroups; i++){
 80045fa:	3401      	adds	r4, #1
 80045fc:	350a      	adds	r5, #10
 80045fe:	2c0a      	cmp	r4, #10
 8004600:	d1f5      	bne.n	80045ee <AddModuleToGroup+0xe>
 8004602:	4c35      	ldr	r4, [pc, #212]	; (80046d8 <AddModuleToGroup+0xf8>)
 8004604:	0025      	movs	r5, r4
 8004606:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004608:	0021      	movs	r1, r4
 800460a:	0030      	movs	r0, r6
 800460c:	f7fb fd7a 	bl	8000104 <strcmp>
 8004610:	2800      	cmp	r0, #0
 8004612:	d058      	beq.n	80046c6 <AddModuleToGroup+0xe6>
 8004614:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 8004616:	42ac      	cmp	r4, r5
 8004618:	d1f6      	bne.n	8004608 <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 800461a:	4b30      	ldr	r3, [pc, #192]	; (80046dc <AddModuleToGroup+0xfc>)
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d90f      	bls.n	8004642 <AddModuleToGroup+0x62>
 8004622:	4c2f      	ldr	r4, [pc, #188]	; (80046e0 <AddModuleToGroup+0x100>)
 8004624:	009d      	lsls	r5, r3, #2
 8004626:	18ed      	adds	r5, r5, r3
 8004628:	006d      	lsls	r5, r5, #1
 800462a:	0023      	movs	r3, r4
 800462c:	3b0a      	subs	r3, #10
 800462e:	18ed      	adds	r5, r5, r3
		if(!strcmp(group,moduleAlias[j]))
 8004630:	0021      	movs	r1, r4
 8004632:	0030      	movs	r0, r6
 8004634:	f7fb fd66 	bl	8000104 <strcmp>
 8004638:	2800      	cmp	r0, #0
 800463a:	d046      	beq.n	80046ca <AddModuleToGroup+0xea>
 800463c:	340a      	adds	r4, #10
	for(j =1; j < N; j++){
 800463e:	42ac      	cmp	r4, r5
 8004640:	d1f6      	bne.n	8004630 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004642:	4c28      	ldr	r4, [pc, #160]	; (80046e4 <AddModuleToGroup+0x104>)
 8004644:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <AddModuleToGroup+0x108>)
 8004646:	601c      	str	r4, [r3, #0]
 8004648:	4698      	mov	r8, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800464e:	0028      	movs	r0, r5
 8004650:	f7fb fd62 	bl	8000118 <strlen>
 8004654:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004656:	0029      	movs	r1, r5
 8004658:	0030      	movs	r0, r6
 800465a:	f010 fc6f 	bl	8014f3c <strncmp>
 800465e:	2800      	cmp	r0, #0
 8004660:	d035      	beq.n	80046ce <AddModuleToGroup+0xee>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004662:	6864      	ldr	r4, [r4, #4]
 8004664:	4643      	mov	r3, r8
 8004666:	601c      	str	r4, [r3, #0]
 8004668:	2c00      	cmp	r4, #0
 800466a:	d1ee      	bne.n	800464a <AddModuleToGroup+0x6a>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!groupAlias[i][0]){
 800466c:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <AddModuleToGroup+0xf4>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01e      	beq.n	80046b2 <AddModuleToGroup+0xd2>
 8004674:	4b17      	ldr	r3, [pc, #92]	; (80046d4 <AddModuleToGroup+0xf4>)
 8004676:	330a      	adds	r3, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004678:	3401      	adds	r4, #1
		if(!groupAlias[i][0]){
 800467a:	781a      	ldrb	r2, [r3, #0]
 800467c:	2a00      	cmp	r2, #0
 800467e:	d019      	beq.n	80046b4 <AddModuleToGroup+0xd4>
	for(i =0; i < MaxNumOfGroups; i++){
 8004680:	3401      	adds	r4, #1
 8004682:	330a      	adds	r3, #10
 8004684:	2c0a      	cmp	r4, #10
 8004686:	d1f8      	bne.n	800467a <AddModuleToGroup+0x9a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |=(0x0001 << i);
 8004688:	3f01      	subs	r7, #1
 800468a:	4918      	ldr	r1, [pc, #96]	; (80046ec <AddModuleToGroup+0x10c>)
 800468c:	007f      	lsls	r7, r7, #1
 800468e:	2201      	movs	r2, #1
 8004690:	40a2      	lsls	r2, r4
 8004692:	5a7b      	ldrh	r3, [r7, r1]
 8004694:	4313      	orrs	r3, r2
 8004696:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 8004698:	2000      	movs	r0, #0
 800469a:	e007      	b.n	80046ac <AddModuleToGroup+0xcc>
			groupModules[module - 1] |=(0x0001 << i);
 800469c:	3f01      	subs	r7, #1
 800469e:	4913      	ldr	r1, [pc, #76]	; (80046ec <AddModuleToGroup+0x10c>)
 80046a0:	007f      	lsls	r7, r7, #1
 80046a2:	2201      	movs	r2, #1
 80046a4:	40a2      	lsls	r2, r4
 80046a6:	5a7b      	ldrh	r3, [r7, r1]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	527b      	strh	r3, [r7, r1]
}
 80046ac:	bc04      	pop	{r2}
 80046ae:	4690      	mov	r8, r2
 80046b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i =0; i < MaxNumOfGroups; i++){
 80046b2:	2400      	movs	r4, #0
			strcpy(groupAlias[i],group);
 80046b4:	00a0      	lsls	r0, r4, #2
 80046b6:	1900      	adds	r0, r0, r4
 80046b8:	0040      	lsls	r0, r0, #1
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <AddModuleToGroup+0xf4>)
 80046bc:	1818      	adds	r0, r3, r0
 80046be:	0031      	movs	r1, r6
 80046c0:	f010 fc34 	bl	8014f2c <strcpy>
			break;
 80046c4:	e7e0      	b.n	8004688 <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 80046c6:	2006      	movs	r0, #6
 80046c8:	e7f0      	b.n	80046ac <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 80046ca:	2007      	movs	r0, #7
 80046cc:	e7ee      	b.n	80046ac <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 80046ce:	2008      	movs	r0, #8
 80046d0:	e7ec      	b.n	80046ac <AddModuleToGroup+0xcc>
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	20000e38 	.word	0x20000e38
 80046d8:	08019438 	.word	0x08019438
 80046dc:	20000024 	.word	0x20000024
 80046e0:	20000f4e 	.word	0x20000f4e
 80046e4:	200000a8 	.word	0x200000a8
 80046e8:	200010d8 	.word	0x200010d8
 80046ec:	20000e9c 	.word	0x20000e9c

080046f0 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 80046f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046f2:	46ce      	mov	lr, r9
 80046f4:	4647      	mov	r7, r8
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 80046fa:	4b24      	ldr	r3, [pc, #144]	; (800478c <ReadPortsDir+0x9c>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d03c      	beq.n	800477c <ReadPortsDir+0x8c>
 8004702:	2501      	movs	r5, #1
	BOS_Status result =BOS_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	9301      	str	r3, [sp, #4]
		if(i != myID){
 8004708:	4b21      	ldr	r3, [pc, #132]	; (8004790 <ReadPortsDir+0xa0>)
 800470a:	4699      	mov	r9, r3
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 800470c:	4b21      	ldr	r3, [pc, #132]	; (8004794 <ReadPortsDir+0xa4>)
 800470e:	4698      	mov	r8, r3
 8004710:	e021      	b.n	8004756 <ReadPortsDir+0x66>
 8004712:	2600      	movs	r6, #0
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004714:	2401      	movs	r4, #1
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 8004716:	2780      	movs	r7, #128	; 0x80
 8004718:	023f      	lsls	r7, r7, #8
 800471a:	e004      	b.n	8004726 <ReadPortsDir+0x36>
			for(uint8_t p =1; p <= NumOfPorts; p++){
 800471c:	3401      	adds	r4, #1
 800471e:	b2e4      	uxtb	r4, r4
 8004720:	3601      	adds	r6, #1
 8004722:	2c06      	cmp	r4, #6
 8004724:	d011      	beq.n	800474a <ReadPortsDir+0x5a>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 8004726:	0020      	movs	r0, r4
 8004728:	f00a f812 	bl	800e750 <GetUart>
 800472c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800472e:	42bb      	cmp	r3, r7
 8004730:	d1f4      	bne.n	800471c <ReadPortsDir+0x2c>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 8004732:	4b17      	ldr	r3, [pc, #92]	; (8004790 <ReadPortsDir+0xa0>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	3b01      	subs	r3, #1
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	4642      	mov	r2, r8
 800473c:	5a9a      	ldrh	r2, [r3, r2]
 800473e:	0039      	movs	r1, r7
 8004740:	4131      	asrs	r1, r6
 8004742:	430a      	orrs	r2, r1
 8004744:	4641      	mov	r1, r8
 8004746:	525a      	strh	r2, [r3, r1]
 8004748:	e7e8      	b.n	800471c <ReadPortsDir+0x2c>
	for(uint8_t i =1; i <= N; i++){
 800474a:	3501      	adds	r5, #1
 800474c:	b2ed      	uxtb	r5, r5
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <ReadPortsDir+0x9c>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	42ab      	cmp	r3, r5
 8004754:	d314      	bcc.n	8004780 <ReadPortsDir+0x90>
		if(i != myID){
 8004756:	464b      	mov	r3, r9
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	42ab      	cmp	r3, r5
 800475c:	d0d9      	beq.n	8004712 <ReadPortsDir+0x22>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 800475e:	2200      	movs	r2, #0
 8004760:	2113      	movs	r1, #19
 8004762:	0028      	movs	r0, r5
 8004764:	f005 f942 	bl	80099ec <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8004768:	2032      	movs	r0, #50	; 0x32
 800476a:	f009 fe5b 	bl	800e424 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 800476e:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <ReadPortsDir+0xa8>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0e9      	beq.n	800474a <ReadPortsDir+0x5a>
				result =BOS_ERR_NoResponse;
 8004776:	2302      	movs	r3, #2
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	e7e6      	b.n	800474a <ReadPortsDir+0x5a>
	BOS_Status result =BOS_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	9301      	str	r3, [sp, #4]
			}
		}
	}
	
	return result;
}
 8004780:	9801      	ldr	r0, [sp, #4]
 8004782:	b003      	add	sp, #12
 8004784:	bc0c      	pop	{r2, r3}
 8004786:	4690      	mov	r8, r2
 8004788:	4699      	mov	r9, r3
 800478a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800478c:	20000024 	.word	0x20000024
 8004790:	20001052 	.word	0x20001052
 8004794:	20007068 	.word	0x20007068
 8004798:	200010e8 	.word	0x200010e8

0800479c <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 800479c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800479e:	46c6      	mov	lr, r8
 80047a0:	b500      	push	{lr}
 80047a2:	2500      	movs	r5, #0
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80047a4:	2401      	movs	r4, #1
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 80047a6:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <UpdateMyPortsDir+0x54>)
 80047a8:	4698      	mov	r8, r3
 80047aa:	4f12      	ldr	r7, [pc, #72]	; (80047f4 <UpdateMyPortsDir+0x58>)
 80047ac:	2680      	movs	r6, #128	; 0x80
 80047ae:	0236      	lsls	r6, r6, #8
 80047b0:	e00a      	b.n	80047c8 <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 80047b2:	0020      	movs	r0, r4
 80047b4:	f009 ffcc 	bl	800e750 <GetUart>
 80047b8:	2101      	movs	r1, #1
 80047ba:	f00a f85f 	bl	800e87c <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80047be:	3401      	adds	r4, #1
 80047c0:	b2e4      	uxtb	r4, r4
 80047c2:	3501      	adds	r5, #1
 80047c4:	2c06      	cmp	r4, #6
 80047c6:	d00f      	beq.n	80047e8 <UpdateMyPortsDir+0x4c>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 80047c8:	783b      	ldrb	r3, [r7, #0]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	4642      	mov	r2, r8
 80047d0:	5a9b      	ldrh	r3, [r3, r2]
 80047d2:	0032      	movs	r2, r6
 80047d4:	412a      	asrs	r2, r5
 80047d6:	421a      	tst	r2, r3
 80047d8:	d1eb      	bne.n	80047b2 <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p),NORMAL);
 80047da:	0020      	movs	r0, r4
 80047dc:	f009 ffb8 	bl	800e750 <GetUart>
 80047e0:	2100      	movs	r1, #0
 80047e2:	f00a f84b 	bl	800e87c <SwapUartPins>
 80047e6:	e7ea      	b.n	80047be <UpdateMyPortsDir+0x22>
		}
	}
	
	return result;
}
 80047e8:	2000      	movs	r0, #0
 80047ea:	bc04      	pop	{r2}
 80047ec:	4690      	mov	r8, r2
 80047ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047f0:	20007068 	.word	0x20007068
 80047f4:	20001052 	.word	0x20001052

080047f8 <BOS_Init>:
void BOS_Init(void){
 80047f8:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 80047fa:	f009 fccb 	bl	800e194 <RTC_Init>
	GetTimeDate();
 80047fe:	f009 fd69 	bl	800e2d4 <GetTimeDate>
	EE_Init();
 8004802:	f003 fa51 	bl	8007ca8 <EE_Init>
	GPIO_Init();
 8004806:	f009 fa33 	bl	800dc70 <GPIO_Init>
	DMA_Init();
 800480a:	f008 f9c5 	bl	800cb98 <DMA_Init>
	TIM_USEC_Init();
 800480e:	f009 fd95 	bl	800e33c <TIM_USEC_Init>
	CRC_Init();
 8004812:	f009 f9d9 	bl	800dbc8 <CRC_Init>
	TIM_MSEC_Init();
 8004816:	f009 fdc3 	bl	800e3a0 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 800481a:	f009 facd 	bl	800ddb8 <IsFactoryReset>
 800481e:	2800      	cmp	r0, #0
 8004820:	d11a      	bne.n	8004858 <BOS_Init+0x60>
	if(IsLowerCLIbaud()){
 8004822:	f7ff f873 	bl	800390c <IsLowerCLIbaud>
 8004826:	2800      	cmp	r0, #0
 8004828:	d021      	beq.n	800486e <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag =1;
 800482a:	4b36      	ldr	r3, [pc, #216]	; (8004904 <BOS_Init+0x10c>)
 800482c:	2201      	movs	r2, #1
 800482e:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004830:	2032      	movs	r0, #50	; 0x32
 8004832:	f009 fdf7 	bl	800e424 <StartMilliDelay>
		Module_Peripheral_Init();
 8004836:	f007 fa8d 	bl	800bd54 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800483a:	4b33      	ldr	r3, [pc, #204]	; (8004908 <BOS_Init+0x110>)
 800483c:	22e1      	movs	r2, #225	; 0xe1
 800483e:	0252      	lsls	r2, r2, #9
 8004840:	609a      	str	r2, [r3, #8]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004842:	2401      	movs	r4, #1
			UpdateBaudrate(port,BOS.clibaudrate);
 8004844:	001d      	movs	r5, r3
 8004846:	68a9      	ldr	r1, [r5, #8]
 8004848:	0020      	movs	r0, r4
 800484a:	f00a f80d 	bl	800e868 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800484e:	3401      	adds	r4, #1
 8004850:	b2e4      	uxtb	r4, r4
 8004852:	2c06      	cmp	r4, #6
 8004854:	d1f7      	bne.n	8004846 <BOS_Init+0x4e>
 8004856:	e00f      	b.n	8004878 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 8004858:	f7ff f846 	bl	80038e8 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800485c:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004860:	4b2a      	ldr	r3, [pc, #168]	; (800490c <BOS_Init+0x114>)
 8004862:	4a2b      	ldr	r2, [pc, #172]	; (8004910 <BOS_Init+0x118>)
 8004864:	60da      	str	r2, [r3, #12]
 8004866:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	e7fd      	b.n	800486a <BOS_Init+0x72>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 800486e:	2032      	movs	r0, #50	; 0x32
 8004870:	f009 fdd8 	bl	800e424 <StartMilliDelay>
		Module_Peripheral_Init();
 8004874:	f007 fa6e 	bl	800bd54 <Module_Peripheral_Init>
	LoadEEvars();
 8004878:	f7fe fefe 	bl	8003678 <LoadEEvars>
	UpdateMyPortsDir();
 800487c:	f7ff ff8e 	bl	800479c <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8004880:	f008 fdec 	bl	800d45c <SetupMessagingRxDMAs>
	if(myID == 0) /* Native module */
 8004884:	4b23      	ldr	r3, [pc, #140]	; (8004914 <BOS_Init+0x11c>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d027      	beq.n	80048dc <BOS_Init+0xe4>
		IND_ON();
 800488c:	2580      	movs	r5, #128	; 0x80
 800488e:	012d      	lsls	r5, r5, #4
 8004890:	2490      	movs	r4, #144	; 0x90
 8004892:	05e4      	lsls	r4, r4, #23
 8004894:	2201      	movs	r2, #1
 8004896:	0029      	movs	r1, r5
 8004898:	0020      	movs	r0, r4
 800489a:	f00d fdb7 	bl	801240c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 800489e:	20fa      	movs	r0, #250	; 0xfa
 80048a0:	0040      	lsls	r0, r0, #1
 80048a2:	f009 fdbf 	bl	800e424 <StartMilliDelay>
		IND_OFF();
 80048a6:	2200      	movs	r2, #0
 80048a8:	0029      	movs	r1, r5
 80048aa:	0020      	movs	r0, r4
 80048ac:	f00d fdae 	bl	801240c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80048b0:	2064      	movs	r0, #100	; 0x64
 80048b2:	f009 fdb7 	bl	800e424 <StartMilliDelay>
		IND_ON();
 80048b6:	2201      	movs	r2, #1
 80048b8:	0029      	movs	r1, r5
 80048ba:	0020      	movs	r0, r4
 80048bc:	f00d fda6 	bl	801240c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80048c0:	2064      	movs	r0, #100	; 0x64
 80048c2:	f009 fdaf 	bl	800e424 <StartMilliDelay>
		IND_OFF();
 80048c6:	2200      	movs	r2, #0
 80048c8:	0029      	movs	r1, r5
 80048ca:	0020      	movs	r0, r4
 80048cc:	f00d fd9e 	bl	801240c <HAL_GPIO_WritePin>
	ResetUartORE();
 80048d0:	f003 f826 	bl	8007920 <ResetUartORE>
	BOS_initialized =1;
 80048d4:	4b10      	ldr	r3, [pc, #64]	; (8004918 <BOS_Init+0x120>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
}
 80048da:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 80048dc:	2580      	movs	r5, #128	; 0x80
 80048de:	012d      	lsls	r5, r5, #4
 80048e0:	2490      	movs	r4, #144	; 0x90
 80048e2:	05e4      	lsls	r4, r4, #23
 80048e4:	2201      	movs	r2, #1
 80048e6:	0029      	movs	r1, r5
 80048e8:	0020      	movs	r0, r4
 80048ea:	f00d fd8f 	bl	801240c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 80048ee:	20fa      	movs	r0, #250	; 0xfa
 80048f0:	0040      	lsls	r0, r0, #1
 80048f2:	f009 fd97 	bl	800e424 <StartMilliDelay>
 80048f6:	2200      	movs	r2, #0
 80048f8:	0029      	movs	r1, r5
 80048fa:	0020      	movs	r0, r4
 80048fc:	f00d fd86 	bl	801240c <HAL_GPIO_WritePin>
 8004900:	e7e6      	b.n	80048d0 <BOS_Init+0xd8>
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	20000a87 	.word	0x20000a87
 8004908:	20006bf4 	.word	0x20006bf4
 800490c:	e000ed00 	.word	0xe000ed00
 8004910:	05fa0004 	.word	0x05fa0004
 8004914:	20001052 	.word	0x20001052
 8004918:	20000a86 	.word	0x20000a86

0800491c <Module_Init>:
void Module_Init(void){
 800491c:	b510      	push	{r4, lr}
	HAL_Init();
 800491e:	f00c f87b 	bl	8010a18 <HAL_Init>
	SystemClock_Config();
 8004922:	f007 f8a1 	bl	800ba68 <SystemClock_Config>
	BOS_Init();
 8004926:	f7ff ff67 	bl	80047f8 <BOS_Init>
	MX_FREERTOS_Init();
 800492a:	f003 fbe7 	bl	80080fc <MX_FREERTOS_Init>
	osKernelStart();
 800492e:	f00a f855 	bl	800e9dc <osKernelStart>
}
 8004932:	bd10      	pop	{r4, pc}

08004934 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004934:	b510      	push	{r4, lr}
 8004936:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004938:	201e      	movs	r0, #30
 800493a:	f00f fe6b 	bl	8014614 <malloc>
 800493e:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 8004940:	221e      	movs	r2, #30
 8004942:	2100      	movs	r1, #0
 8004944:	f010 f8bc 	bl	8014ac0 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004948:	4908      	ldr	r1, [pc, #32]	; (800496c <GetDateString+0x38>)
 800494a:	7d8b      	ldrb	r3, [r1, #22]
 800494c:	7d0a      	ldrb	r2, [r1, #20]
 800494e:	3a01      	subs	r2, #1
 8004950:	0092      	lsls	r2, r2, #2
 8004952:	4807      	ldr	r0, [pc, #28]	; (8004970 <GetDateString+0x3c>)
 8004954:	5812      	ldr	r2, [r2, r0]
 8004956:	8b08      	ldrh	r0, [r1, #24]
 8004958:	9001      	str	r0, [sp, #4]
 800495a:	7d49      	ldrb	r1, [r1, #21]
 800495c:	9100      	str	r1, [sp, #0]
 800495e:	4905      	ldr	r1, [pc, #20]	; (8004974 <GetDateString+0x40>)
 8004960:	0020      	movs	r0, r4
 8004962:	f010 faa7 	bl	8014eb4 <sprintf>
	return buffer;
}
 8004966:	0020      	movs	r0, r4
 8004968:	b002      	add	sp, #8
 800496a:	bd10      	pop	{r4, pc}
 800496c:	20006bf4 	.word	0x20006bf4
 8004970:	0801999c 	.word	0x0801999c
 8004974:	080196a8 	.word	0x080196a8

08004978 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004978:	b500      	push	{lr}
 800497a:	b085      	sub	sp, #20
 800497c:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800497e:	4b07      	ldr	r3, [pc, #28]	; (800499c <Bridge+0x24>)
 8004980:	7819      	ldrb	r1, [r3, #0]
 8004982:	2301      	movs	r3, #1
 8004984:	9303      	str	r3, [sp, #12]
 8004986:	3b02      	subs	r3, #2
 8004988:	9302      	str	r3, [sp, #8]
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	3303      	adds	r3, #3
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	000b      	movs	r3, r1
 8004992:	f005 f851 	bl	8009a38 <StartScastDMAStream>
}
 8004996:	b005      	add	sp, #20
 8004998:	bd00      	pop	{pc}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	20001052 	.word	0x20001052

080049a0 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 80049a0:	b530      	push	{r4, r5, lr}
 80049a2:	b087      	sub	sp, #28
 80049a4:	0004      	movs	r4, r0
 80049a6:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 80049a8:	2300      	movs	r3, #0
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	9303      	str	r3, [sp, #12]
 80049ae:	9302      	str	r3, [sp, #8]
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	2200      	movs	r2, #0
 80049b6:	2100      	movs	r1, #0
 80049b8:	2000      	movs	r0, #0
 80049ba:	f7fe fedb 	bl	8003774 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80049be:	1e62      	subs	r2, r4, #1
 80049c0:	00d3      	lsls	r3, r2, #3
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <Unbridge+0x78>)
 80049c8:	589b      	ldr	r3, [r3, r2]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d015      	beq.n	80049fa <Unbridge+0x5a>
 80049ce:	1e6a      	subs	r2, r5, #1
 80049d0:	00d3      	lsls	r3, r2, #3
 80049d2:	1a9b      	subs	r3, r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4a10      	ldr	r2, [pc, #64]	; (8004a18 <Unbridge+0x78>)
 80049d8:	589b      	ldr	r3, [r3, r2]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d104      	bne.n	80049e8 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
 80049de:	0020      	movs	r0, r4
 80049e0:	f002 ff12 	bl	8007808 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80049e4:	2000      	movs	r0, #0
 80049e6:	e006      	b.n	80049f6 <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 80049e8:	0020      	movs	r0, r4
 80049ea:	f002 ff0d 	bl	8007808 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80049ee:	0028      	movs	r0, r5
 80049f0:	f002 ff0a 	bl	8007808 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80049f4:	2000      	movs	r0, #0
		return BOS_OK;
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80049f6:	b007      	add	sp, #28
 80049f8:	bd30      	pop	{r4, r5, pc}
	else if(streamDMA[port2 - 1].Instance != 0){
 80049fa:	1e6a      	subs	r2, r5, #1
 80049fc:	00d3      	lsls	r3, r2, #3
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4a05      	ldr	r2, [pc, #20]	; (8004a18 <Unbridge+0x78>)
 8004a04:	589b      	ldr	r3, [r3, r2]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d004      	beq.n	8004a14 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 8004a0a:	0028      	movs	r0, r5
 8004a0c:	f002 fefc 	bl	8007808 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004a10:	2000      	movs	r0, #0
 8004a12:	e7f0      	b.n	80049f6 <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 8004a14:	2068      	movs	r0, #104	; 0x68
 8004a16:	e7ee      	b.n	80049f6 <Unbridge+0x56>
 8004a18:	20001bbc 	.word	0x20001bbc

08004a1c <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 8004a20:	7804      	ldrb	r4, [r0, #0]
 8004a22:	2c00      	cmp	r4, #0
 8004a24:	d010      	beq.n	8004a48 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 8004a26:	2603      	movs	r6, #3
 8004a28:	e004      	b.n	8004a34 <StringToLowerCase+0x18>
 8004a2a:	702a      	strb	r2, [r5, #0]
 8004a2c:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 8004a2e:	782c      	ldrb	r4, [r5, #0]
 8004a30:	2c00      	cmp	r4, #0
 8004a32:	d009      	beq.n	8004a48 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 8004a34:	f00f fde0 	bl	80145f8 <__locale_ctype_ptr>
 8004a38:	1900      	adds	r0, r0, r4
 8004a3a:	7843      	ldrb	r3, [r0, #1]
 8004a3c:	4033      	ands	r3, r6
 8004a3e:	0022      	movs	r2, r4
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d1f2      	bne.n	8004a2a <StringToLowerCase+0xe>
 8004a44:	3220      	adds	r2, #32
 8004a46:	e7f0      	b.n	8004a2a <StringToLowerCase+0xe>
	}
}
 8004a48:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a4c <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a4e:	46c6      	mov	lr, r8
 8004a50:	b500      	push	{lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004a56:	4bdc      	ldr	r3, [pc, #880]	; (8004dc8 <ParseSnippetCondition+0x37c>)
 8004a58:	781c      	ldrb	r4, [r3, #0]
 8004a5a:	2c05      	cmp	r4, #5
 8004a5c:	d100      	bne.n	8004a60 <ParseSnippetCondition+0x14>
 8004a5e:	e210      	b.n	8004e82 <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004a60:	49da      	ldr	r1, [pc, #872]	; (8004dcc <ParseSnippetCondition+0x380>)
 8004a62:	00a3      	lsls	r3, r4, #2
 8004a64:	191a      	adds	r2, r3, r4
 8004a66:	0092      	lsls	r2, r2, #2
 8004a68:	2000      	movs	r0, #0
 8004a6a:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 8004a6c:	191a      	adds	r2, r3, r4
 8004a6e:	0092      	lsls	r2, r2, #2
 8004a70:	188a      	adds	r2, r1, r2
 8004a72:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004a74:	1918      	adds	r0, r3, r4
 8004a76:	0080      	lsls	r0, r0, #2
 8004a78:	3002      	adds	r0, #2
 8004a7a:	1840      	adds	r0, r0, r1
 8004a7c:	2204      	movs	r2, #4
 8004a7e:	2100      	movs	r1, #0
 8004a80:	f010 f81e 	bl	8014ac0 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004a84:	782b      	ldrb	r3, [r5, #0]
 8004a86:	2b62      	cmp	r3, #98	; 0x62
 8004a88:	d102      	bne.n	8004a90 <ParseSnippetCondition+0x44>
 8004a8a:	78ab      	ldrb	r3, [r5, #2]
 8004a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8004a8e:	d032      	beq.n	8004af6 <ParseSnippetCondition+0xaa>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004a90:	4ecf      	ldr	r6, [pc, #828]	; (8004dd0 <ParseSnippetCondition+0x384>)
 8004a92:	0029      	movs	r1, r5
 8004a94:	0030      	movs	r0, r6
 8004a96:	f010 fa49 	bl	8014f2c <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004a9a:	4cce      	ldr	r4, [pc, #824]	; (8004dd4 <ParseSnippetCondition+0x388>)
 8004a9c:	0021      	movs	r1, r4
 8004a9e:	0030      	movs	r0, r6
 8004aa0:	f011 f8c4 	bl	8015c2c <strtok>
 8004aa4:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 8004aa6:	0021      	movs	r1, r4
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	f011 f8bf 	bl	8015c2c <strtok>
 8004aae:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 8004ab0:	0021      	movs	r1, r4
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f011 f8ba 	bl	8015c2c <strtok>
 8004ab8:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004aba:	2d00      	cmp	r5, #0
 8004abc:	d100      	bne.n	8004ac0 <ParseSnippetCondition+0x74>
 8004abe:	e1e5      	b.n	8004e8c <ParseSnippetCondition+0x440>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004ac0:	0028      	movs	r0, r5
 8004ac2:	f7fe ff87 	bl	80039d4 <IsModuleParameter>
 8004ac6:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004ac8:	d100      	bne.n	8004acc <ParseSnippetCondition+0x80>
 8004aca:	e18f      	b.n	8004dec <ParseSnippetCondition+0x3a0>
 8004acc:	2e00      	cmp	r6, #0
 8004ace:	d000      	beq.n	8004ad2 <ParseSnippetCondition+0x86>
 8004ad0:	e18e      	b.n	8004df0 <ParseSnippetCondition+0x3a4>
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
			}
			else{
				return BOS_ERR_WrongParam;
 8004ad2:	2067      	movs	r0, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004ad4:	2c00      	cmp	r4, #0
 8004ad6:	d000      	beq.n	8004ada <ParseSnippetCondition+0x8e>
 8004ad8:	e1d4      	b.n	8004e84 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004ada:	4cbb      	ldr	r4, [pc, #748]	; (8004dc8 <ParseSnippetCondition+0x37c>)
 8004adc:	7823      	ldrb	r3, [r4, #0]
 8004ade:	49bb      	ldr	r1, [pc, #748]	; (8004dcc <ParseSnippetCondition+0x380>)
 8004ae0:	009a      	lsls	r2, r3, #2
 8004ae2:	18d0      	adds	r0, r2, r3
 8004ae4:	0080      	lsls	r0, r0, #2
 8004ae6:	3602      	adds	r6, #2
 8004ae8:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004aea:	180a      	adds	r2, r1, r0
 8004aec:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004aee:	3301      	adds	r3, #1
 8004af0:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 8004af2:	2000      	movs	r0, #0
 8004af4:	e1c6      	b.n	8004e84 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004af6:	786e      	ldrb	r6, [r5, #1]
 8004af8:	3e30      	subs	r6, #48	; 0x30
 8004afa:	b2f6      	uxtb	r6, r6
	BOS_Status status =BOS_OK;
 8004afc:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004afe:	2e05      	cmp	r6, #5
 8004b00:	d900      	bls.n	8004b04 <ParseSnippetCondition+0xb8>
 8004b02:	e1bf      	b.n	8004e84 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004b04:	4ab1      	ldr	r2, [pc, #708]	; (8004dcc <ParseSnippetCondition+0x380>)
 8004b06:	00a3      	lsls	r3, r4, #2
 8004b08:	1919      	adds	r1, r3, r4
 8004b0a:	0089      	lsls	r1, r1, #2
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 8004b10:	1853      	adds	r3, r2, r1
 8004b12:	2200      	movs	r2, #0
 8004b14:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004b16:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004b18:	1cef      	adds	r7, r5, #3
 8004b1a:	3207      	adds	r2, #7
 8004b1c:	49ae      	ldr	r1, [pc, #696]	; (8004dd8 <ParseSnippetCondition+0x38c>)
 8004b1e:	0038      	movs	r0, r7
 8004b20:	f010 fa0c 	bl	8014f3c <strncmp>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d121      	bne.n	8004b6c <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004b28:	00a3      	lsls	r3, r4, #2
 8004b2a:	191c      	adds	r4, r3, r4
 8004b2c:	00a4      	lsls	r4, r4, #2
 8004b2e:	4ba7      	ldr	r3, [pc, #668]	; (8004dcc <ParseSnippetCondition+0x380>)
 8004b30:	191c      	adds	r4, r3, r4
 8004b32:	2305      	movs	r3, #5
 8004b34:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004b36:	00f2      	lsls	r2, r6, #3
 8004b38:	1992      	adds	r2, r2, r6
 8004b3a:	4ba8      	ldr	r3, [pc, #672]	; (8004ddc <ParseSnippetCondition+0x390>)
 8004b3c:	189b      	adds	r3, r3, r2
 8004b3e:	7a1b      	ldrb	r3, [r3, #8]
 8004b40:	07db      	lsls	r3, r3, #31
 8004b42:	d504      	bpl.n	8004b4e <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004b44:	4aa0      	ldr	r2, [pc, #640]	; (8004dc8 <ParseSnippetCondition+0x37c>)
 8004b46:	7813      	ldrb	r3, [r2, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	7013      	strb	r3, [r2, #0]
 8004b4c:	e19a      	b.n	8004e84 <ParseSnippetCondition+0x438>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004b4e:	2301      	movs	r3, #1
 8004b50:	9305      	str	r3, [sp, #20]
 8004b52:	2300      	movs	r3, #0
 8004b54:	9304      	str	r3, [sp, #16]
 8004b56:	9303      	str	r3, [sp, #12]
 8004b58:	9302      	str	r3, [sp, #8]
 8004b5a:	9301      	str	r3, [sp, #4]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2101      	movs	r1, #1
 8004b62:	0030      	movs	r0, r6
 8004b64:	f003 fd78 	bl	8008658 <SetButtonEvents>
				status =BOS_OK;
 8004b68:	2000      	movs	r0, #0
 8004b6a:	e7eb      	b.n	8004b44 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004b6c:	220e      	movs	r2, #14
 8004b6e:	499c      	ldr	r1, [pc, #624]	; (8004de0 <ParseSnippetCondition+0x394>)
 8004b70:	0038      	movs	r0, r7
 8004b72:	f010 f9e3 	bl	8014f3c <strncmp>
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d11c      	bne.n	8004bb4 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004b7a:	00a3      	lsls	r3, r4, #2
 8004b7c:	191c      	adds	r4, r3, r4
 8004b7e:	00a4      	lsls	r4, r4, #2
 8004b80:	4b92      	ldr	r3, [pc, #584]	; (8004dcc <ParseSnippetCondition+0x380>)
 8004b82:	191c      	adds	r4, r3, r4
 8004b84:	2306      	movs	r3, #6
 8004b86:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004b88:	00f2      	lsls	r2, r6, #3
 8004b8a:	1992      	adds	r2, r2, r6
 8004b8c:	4b93      	ldr	r3, [pc, #588]	; (8004ddc <ParseSnippetCondition+0x390>)
 8004b8e:	189b      	adds	r3, r3, r2
 8004b90:	7a1b      	ldrb	r3, [r3, #8]
 8004b92:	079b      	lsls	r3, r3, #30
 8004b94:	d4d6      	bmi.n	8004b44 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004b96:	2301      	movs	r3, #1
 8004b98:	9305      	str	r3, [sp, #20]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	9304      	str	r3, [sp, #16]
 8004b9e:	9303      	str	r3, [sp, #12]
 8004ba0:	9302      	str	r3, [sp, #8]
 8004ba2:	9301      	str	r3, [sp, #4]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	2100      	movs	r1, #0
 8004baa:	0030      	movs	r0, r6
 8004bac:	f003 fd54 	bl	8008658 <SetButtonEvents>
				status =BOS_OK;
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	e7c7      	b.n	8004b44 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004bb4:	220c      	movs	r2, #12
 8004bb6:	498b      	ldr	r1, [pc, #556]	; (8004de4 <ParseSnippetCondition+0x398>)
 8004bb8:	0038      	movs	r0, r7
 8004bba:	f010 f9bf 	bl	8014f3c <strncmp>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	d17a      	bne.n	8004cb8 <ParseSnippetCondition+0x26c>
				if(!button[port].pressedX1Sec){
 8004bc2:	00f2      	lsls	r2, r6, #3
 8004bc4:	1992      	adds	r2, r2, r6
 8004bc6:	4b85      	ldr	r3, [pc, #532]	; (8004ddc <ParseSnippetCondition+0x390>)
 8004bc8:	189b      	adds	r3, r3, r2
 8004bca:	789b      	ldrb	r3, [r3, #2]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d030      	beq.n	8004c32 <ParseSnippetCondition+0x1e6>
				else if(!button[port].pressedX2Sec){
 8004bd0:	00f2      	lsls	r2, r6, #3
 8004bd2:	1992      	adds	r2, r2, r6
 8004bd4:	4b81      	ldr	r3, [pc, #516]	; (8004ddc <ParseSnippetCondition+0x390>)
 8004bd6:	189b      	adds	r3, r3, r2
 8004bd8:	78db      	ldrb	r3, [r3, #3]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d04a      	beq.n	8004c74 <ParseSnippetCondition+0x228>
				else if(!button[port].pressedX3Sec){
 8004bde:	00f2      	lsls	r2, r6, #3
 8004be0:	1992      	adds	r2, r2, r6
 8004be2:	4b7e      	ldr	r3, [pc, #504]	; (8004ddc <ParseSnippetCondition+0x390>)
 8004be4:	189b      	adds	r3, r3, r2
 8004be6:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004be8:	200c      	movs	r0, #12
				else if(!button[port].pressedX3Sec){
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1aa      	bne.n	8004b44 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004bee:	4f77      	ldr	r7, [pc, #476]	; (8004dcc <ParseSnippetCondition+0x380>)
 8004bf0:	00a3      	lsls	r3, r4, #2
 8004bf2:	191b      	adds	r3, r3, r4
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	18fb      	adds	r3, r7, r3
 8004bf8:	220b      	movs	r2, #11
 8004bfa:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bfc:	0028      	movs	r0, r5
 8004bfe:	300f      	adds	r0, #15
 8004c00:	f00f fcc5 	bl	801458e <atoi>
 8004c04:	b2c0      	uxtb	r0, r0
 8004c06:	4b70      	ldr	r3, [pc, #448]	; (8004dc8 <ParseSnippetCondition+0x37c>)
 8004c08:	781a      	ldrb	r2, [r3, #0]
 8004c0a:	0093      	lsls	r3, r2, #2
 8004c0c:	189b      	adds	r3, r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	18ff      	adds	r7, r7, r3
 8004c12:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004c14:	2301      	movs	r3, #1
 8004c16:	9305      	str	r3, [sp, #20]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	9304      	str	r3, [sp, #16]
 8004c1c:	9303      	str	r3, [sp, #12]
 8004c1e:	9302      	str	r3, [sp, #8]
 8004c20:	9001      	str	r0, [sp, #4]
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	2200      	movs	r2, #0
 8004c26:	2100      	movs	r1, #0
 8004c28:	0030      	movs	r0, r6
 8004c2a:	f003 fd15 	bl	8008658 <SetButtonEvents>
					status =BOS_OK;
 8004c2e:	2000      	movs	r0, #0
 8004c30:	e788      	b.n	8004b44 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004c32:	4f66      	ldr	r7, [pc, #408]	; (8004dcc <ParseSnippetCondition+0x380>)
 8004c34:	00a3      	lsls	r3, r4, #2
 8004c36:	191b      	adds	r3, r3, r4
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	2209      	movs	r2, #9
 8004c3e:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004c40:	0028      	movs	r0, r5
 8004c42:	300f      	adds	r0, #15
 8004c44:	f00f fca3 	bl	801458e <atoi>
 8004c48:	b2c3      	uxtb	r3, r0
 8004c4a:	4a5f      	ldr	r2, [pc, #380]	; (8004dc8 <ParseSnippetCondition+0x37c>)
 8004c4c:	7811      	ldrb	r1, [r2, #0]
 8004c4e:	008a      	lsls	r2, r1, #2
 8004c50:	1852      	adds	r2, r2, r1
 8004c52:	0092      	lsls	r2, r2, #2
 8004c54:	18bf      	adds	r7, r7, r2
 8004c56:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c58:	2201      	movs	r2, #1
 8004c5a:	9205      	str	r2, [sp, #20]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	9204      	str	r2, [sp, #16]
 8004c60:	9203      	str	r2, [sp, #12]
 8004c62:	9202      	str	r2, [sp, #8]
 8004c64:	9201      	str	r2, [sp, #4]
 8004c66:	9200      	str	r2, [sp, #0]
 8004c68:	2100      	movs	r1, #0
 8004c6a:	0030      	movs	r0, r6
 8004c6c:	f003 fcf4 	bl	8008658 <SetButtonEvents>
					status =BOS_OK;
 8004c70:	2000      	movs	r0, #0
 8004c72:	e767      	b.n	8004b44 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004c74:	4f55      	ldr	r7, [pc, #340]	; (8004dcc <ParseSnippetCondition+0x380>)
 8004c76:	00a3      	lsls	r3, r4, #2
 8004c78:	191b      	adds	r3, r3, r4
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	220a      	movs	r2, #10
 8004c80:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004c82:	0028      	movs	r0, r5
 8004c84:	300f      	adds	r0, #15
 8004c86:	f00f fc82 	bl	801458e <atoi>
 8004c8a:	b2c0      	uxtb	r0, r0
 8004c8c:	4b4e      	ldr	r3, [pc, #312]	; (8004dc8 <ParseSnippetCondition+0x37c>)
 8004c8e:	781a      	ldrb	r2, [r3, #0]
 8004c90:	0093      	lsls	r3, r2, #2
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	18ff      	adds	r7, r7, r3
 8004c98:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	9305      	str	r3, [sp, #20]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	9304      	str	r3, [sp, #16]
 8004ca2:	9303      	str	r3, [sp, #12]
 8004ca4:	9302      	str	r3, [sp, #8]
 8004ca6:	9301      	str	r3, [sp, #4]
 8004ca8:	9000      	str	r0, [sp, #0]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2100      	movs	r1, #0
 8004cae:	0030      	movs	r0, r6
 8004cb0:	f003 fcd2 	bl	8008658 <SetButtonEvents>
					status =BOS_OK;
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	e745      	b.n	8004b44 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004cb8:	220d      	movs	r2, #13
 8004cba:	494b      	ldr	r1, [pc, #300]	; (8004de8 <ParseSnippetCondition+0x39c>)
 8004cbc:	0038      	movs	r0, r7
 8004cbe:	f010 f93d 	bl	8014f3c <strncmp>
 8004cc2:	0003      	movs	r3, r0
	BOS_Status status =BOS_OK;
 8004cc4:	2000      	movs	r0, #0
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d000      	beq.n	8004ccc <ParseSnippetCondition+0x280>
 8004cca:	e73b      	b.n	8004b44 <ParseSnippetCondition+0xf8>
				if(!button[port].releasedY1Sec){
 8004ccc:	00f2      	lsls	r2, r6, #3
 8004cce:	1992      	adds	r2, r2, r6
 8004cd0:	4b42      	ldr	r3, [pc, #264]	; (8004ddc <ParseSnippetCondition+0x390>)
 8004cd2:	189b      	adds	r3, r3, r2
 8004cd4:	795b      	ldrb	r3, [r3, #5]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d031      	beq.n	8004d3e <ParseSnippetCondition+0x2f2>
				else if(!button[port].releasedY2Sec){
 8004cda:	00f2      	lsls	r2, r6, #3
 8004cdc:	1992      	adds	r2, r2, r6
 8004cde:	4b3f      	ldr	r3, [pc, #252]	; (8004ddc <ParseSnippetCondition+0x390>)
 8004ce0:	189b      	adds	r3, r3, r2
 8004ce2:	799b      	ldrb	r3, [r3, #6]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d04c      	beq.n	8004d82 <ParseSnippetCondition+0x336>
				else if(!button[port].releasedY3Sec){
 8004ce8:	00f2      	lsls	r2, r6, #3
 8004cea:	1992      	adds	r2, r2, r6
 8004cec:	4b3b      	ldr	r3, [pc, #236]	; (8004ddc <ParseSnippetCondition+0x390>)
 8004cee:	189b      	adds	r3, r3, r2
 8004cf0:	79db      	ldrb	r3, [r3, #7]
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004cf2:	200d      	movs	r0, #13
				else if(!button[port].releasedY3Sec){
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d000      	beq.n	8004cfa <ParseSnippetCondition+0x2ae>
 8004cf8:	e724      	b.n	8004b44 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004cfa:	4f34      	ldr	r7, [pc, #208]	; (8004dcc <ParseSnippetCondition+0x380>)
 8004cfc:	3314      	adds	r3, #20
 8004cfe:	4698      	mov	r8, r3
 8004d00:	435c      	muls	r4, r3
 8004d02:	193c      	adds	r4, r7, r4
 8004d04:	3b06      	subs	r3, #6
 8004d06:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d08:	0028      	movs	r0, r5
 8004d0a:	3010      	adds	r0, #16
 8004d0c:	f00f fc3f 	bl	801458e <atoi>
 8004d10:	b2c0      	uxtb	r0, r0
 8004d12:	4b2d      	ldr	r3, [pc, #180]	; (8004dc8 <ParseSnippetCondition+0x37c>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	4642      	mov	r2, r8
 8004d18:	4353      	muls	r3, r2
 8004d1a:	18ff      	adds	r7, r7, r3
 8004d1c:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004d1e:	2301      	movs	r3, #1
 8004d20:	9305      	str	r3, [sp, #20]
 8004d22:	9004      	str	r0, [sp, #16]
 8004d24:	2400      	movs	r4, #0
 8004d26:	9403      	str	r4, [sp, #12]
 8004d28:	9402      	str	r4, [sp, #8]
 8004d2a:	9401      	str	r4, [sp, #4]
 8004d2c:	9400      	str	r4, [sp, #0]
 8004d2e:	0023      	movs	r3, r4
 8004d30:	0022      	movs	r2, r4
 8004d32:	0021      	movs	r1, r4
 8004d34:	0030      	movs	r0, r6
 8004d36:	f003 fc8f 	bl	8008658 <SetButtonEvents>
					status =BOS_OK;
 8004d3a:	0020      	movs	r0, r4
 8004d3c:	e702      	b.n	8004b44 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004d3e:	4f23      	ldr	r7, [pc, #140]	; (8004dcc <ParseSnippetCondition+0x380>)
 8004d40:	00a3      	lsls	r3, r4, #2
 8004d42:	191b      	adds	r3, r3, r4
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	220c      	movs	r2, #12
 8004d4a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d4c:	0028      	movs	r0, r5
 8004d4e:	3010      	adds	r0, #16
 8004d50:	f00f fc1d 	bl	801458e <atoi>
 8004d54:	b2c0      	uxtb	r0, r0
 8004d56:	4b1c      	ldr	r3, [pc, #112]	; (8004dc8 <ParseSnippetCondition+0x37c>)
 8004d58:	781a      	ldrb	r2, [r3, #0]
 8004d5a:	0093      	lsls	r3, r2, #2
 8004d5c:	189b      	adds	r3, r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	18ff      	adds	r7, r7, r3
 8004d62:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004d64:	2301      	movs	r3, #1
 8004d66:	9305      	str	r3, [sp, #20]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	9304      	str	r3, [sp, #16]
 8004d6c:	9303      	str	r3, [sp, #12]
 8004d6e:	9002      	str	r0, [sp, #8]
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	2200      	movs	r2, #0
 8004d76:	2100      	movs	r1, #0
 8004d78:	0030      	movs	r0, r6
 8004d7a:	f003 fc6d 	bl	8008658 <SetButtonEvents>
					status =BOS_OK;
 8004d7e:	2000      	movs	r0, #0
 8004d80:	e6e0      	b.n	8004b44 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004d82:	4f12      	ldr	r7, [pc, #72]	; (8004dcc <ParseSnippetCondition+0x380>)
 8004d84:	00a3      	lsls	r3, r4, #2
 8004d86:	191b      	adds	r3, r3, r4
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	220d      	movs	r2, #13
 8004d8e:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d90:	0028      	movs	r0, r5
 8004d92:	3010      	adds	r0, #16
 8004d94:	f00f fbfb 	bl	801458e <atoi>
 8004d98:	b2c0      	uxtb	r0, r0
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <ParseSnippetCondition+0x37c>)
 8004d9c:	781a      	ldrb	r2, [r3, #0]
 8004d9e:	0093      	lsls	r3, r2, #2
 8004da0:	189b      	adds	r3, r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	18ff      	adds	r7, r7, r3
 8004da6:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004da8:	2301      	movs	r3, #1
 8004daa:	9305      	str	r3, [sp, #20]
 8004dac:	2300      	movs	r3, #0
 8004dae:	9304      	str	r3, [sp, #16]
 8004db0:	9003      	str	r0, [sp, #12]
 8004db2:	9302      	str	r3, [sp, #8]
 8004db4:	9301      	str	r3, [sp, #4]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	2200      	movs	r2, #0
 8004dba:	2100      	movs	r1, #0
 8004dbc:	0030      	movs	r0, r6
 8004dbe:	f003 fc4b 	bl	8008658 <SetButtonEvents>
					status =BOS_OK;
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	e6be      	b.n	8004b44 <ParseSnippetCondition+0xf8>
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	200011f7 	.word	0x200011f7
 8004dcc:	20006c10 	.word	0x20006c10
 8004dd0:	2000115c 	.word	0x2000115c
 8004dd4:	08019504 	.word	0x08019504
 8004dd8:	0801ab1c 	.word	0x0801ab1c
 8004ddc:	20001724 	.word	0x20001724
 8004de0:	08019ba0 	.word	0x08019ba0
 8004de4:	08019bb0 	.word	0x08019bb0
 8004de8:	08019bc0 	.word	0x08019bc0
			else if(secondPart != NULL && thirdPart != NULL){
 8004dec:	2e00      	cmp	r6, #0
 8004dee:	d04f      	beq.n	8004e90 <ParseSnippetCondition+0x444>
 8004df0:	2c00      	cmp	r4, #0
 8004df2:	d04f      	beq.n	8004e94 <ParseSnippetCondition+0x448>
				modPar2 =IsModuleParameter(thirdPart);
 8004df4:	0020      	movs	r0, r4
 8004df6:	f7fe fded 	bl	80039d4 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d024      	beq.n	8004e48 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004dfe:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <ParseSnippetCondition+0x450>)
 8004e00:	781c      	ldrb	r4, [r3, #0]
 8004e02:	4a27      	ldr	r2, [pc, #156]	; (8004ea0 <ParseSnippetCondition+0x454>)
 8004e04:	00a3      	lsls	r3, r4, #2
 8004e06:	1919      	adds	r1, r3, r4
 8004e08:	0089      	lsls	r1, r1, #2
 8004e0a:	2704      	movs	r7, #4
 8004e0c:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004e0e:	1919      	adds	r1, r3, r4
 8004e10:	0089      	lsls	r1, r1, #2
 8004e12:	1851      	adds	r1, r2, r1
 8004e14:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004e16:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004e18:	4d20      	ldr	r5, [pc, #128]	; (8004e9c <ParseSnippetCondition+0x450>)
 8004e1a:	782c      	ldrb	r4, [r5, #0]
 8004e1c:	0030      	movs	r0, r6
 8004e1e:	f7fe fde5 	bl	80039ec <IsMathOperator>
 8004e22:	491f      	ldr	r1, [pc, #124]	; (8004ea0 <ParseSnippetCondition+0x454>)
 8004e24:	00a3      	lsls	r3, r4, #2
 8004e26:	191b      	adds	r3, r3, r4
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	18cb      	adds	r3, r1, r3
 8004e2c:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004e2e:	782a      	ldrb	r2, [r5, #0]
 8004e30:	0093      	lsls	r3, r2, #2
 8004e32:	189b      	adds	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	18cb      	adds	r3, r1, r3
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d02c      	beq.n	8004e98 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004e3e:	3201      	adds	r2, #1
 8004e40:	4b16      	ldr	r3, [pc, #88]	; (8004e9c <ParseSnippetCondition+0x450>)
 8004e42:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 8004e44:	2000      	movs	r0, #0
 8004e46:	e01d      	b.n	8004e84 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004e48:	4b14      	ldr	r3, [pc, #80]	; (8004e9c <ParseSnippetCondition+0x450>)
 8004e4a:	4698      	mov	r8, r3
 8004e4c:	781a      	ldrb	r2, [r3, #0]
 8004e4e:	4f14      	ldr	r7, [pc, #80]	; (8004ea0 <ParseSnippetCondition+0x454>)
 8004e50:	0093      	lsls	r3, r2, #2
 8004e52:	1899      	adds	r1, r3, r2
 8004e54:	0089      	lsls	r1, r1, #2
 8004e56:	2003      	movs	r0, #3
 8004e58:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004e5a:	187b      	adds	r3, r7, r1
 8004e5c:	70dd      	strb	r5, [r3, #3]
					float constant =atof(thirdPart);
 8004e5e:	0020      	movs	r0, r4
 8004e60:	f00f fb90 	bl	8014584 <atof>
 8004e64:	f7fd ffe6 	bl	8002e34 <__aeabi_d2f>
 8004e68:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004e6a:	4643      	mov	r3, r8
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	0098      	lsls	r0, r3, #2
 8004e70:	18c0      	adds	r0, r0, r3
 8004e72:	0080      	lsls	r0, r0, #2
 8004e74:	3006      	adds	r0, #6
 8004e76:	19c0      	adds	r0, r0, r7
 8004e78:	2204      	movs	r2, #4
 8004e7a:	a907      	add	r1, sp, #28
 8004e7c:	f00f fe17 	bl	8014aae <memcpy>
 8004e80:	e7ca      	b.n	8004e18 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8004e82:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004e84:	b008      	add	sp, #32
 8004e86:	bc04      	pop	{r2}
 8004e88:	4690      	mov	r8, r2
 8004e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004e8c:	2067      	movs	r0, #103	; 0x67
 8004e8e:	e7f9      	b.n	8004e84 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004e90:	2067      	movs	r0, #103	; 0x67
 8004e92:	e7f7      	b.n	8004e84 <ParseSnippetCondition+0x438>
 8004e94:	2067      	movs	r0, #103	; 0x67
 8004e96:	e7f5      	b.n	8004e84 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004e98:	2067      	movs	r0, #103	; 0x67
 8004e9a:	e7f3      	b.n	8004e84 <ParseSnippetCondition+0x438>
 8004e9c:	200011f7 	.word	0x200011f7
 8004ea0:	20006c10 	.word	0x20006c10

08004ea4 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	000c      	movs	r4, r1
	switch(code){
 8004ea8:	2802      	cmp	r0, #2
 8004eaa:	d017      	beq.n	8004edc <AddSnippet+0x38>
 8004eac:	2803      	cmp	r0, #3
 8004eae:	d003      	beq.n	8004eb8 <AddSnippet+0x14>
 8004eb0:	2801      	cmp	r0, #1
 8004eb2:	d00f      	beq.n	8004ed4 <AddSnippet+0x30>
	return BOS_OK;
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	e00c      	b.n	8004ed2 <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 8004eb8:	4b35      	ldr	r3, [pc, #212]	; (8004f90 <AddSnippet+0xec>)
 8004eba:	781a      	ldrb	r2, [r3, #0]
 8004ebc:	3a01      	subs	r2, #1
 8004ebe:	0093      	lsls	r3, r2, #2
 8004ec0:	189b      	adds	r3, r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4a33      	ldr	r2, [pc, #204]	; (8004f94 <AddSnippet+0xf0>)
 8004ec6:	18d3      	adds	r3, r2, r3
 8004ec8:	2201      	movs	r2, #1
 8004eca:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004ecc:	f006 fe24 	bl	800bb18 <SaveToRO>
	return BOS_OK;
 8004ed0:	2000      	movs	r0, #0
}
 8004ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004ed4:	0008      	movs	r0, r1
 8004ed6:	f7ff fdb9 	bl	8004a4c <ParseSnippetCondition>
 8004eda:	e7fa      	b.n	8004ed2 <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004edc:	4b2c      	ldr	r3, [pc, #176]	; (8004f90 <AddSnippet+0xec>)
 8004ede:	781d      	ldrb	r5, [r3, #0]
 8004ee0:	3d01      	subs	r5, #1
 8004ee2:	00ab      	lsls	r3, r5, #2
 8004ee4:	195b      	adds	r3, r3, r5
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4a2a      	ldr	r2, [pc, #168]	; (8004f94 <AddSnippet+0xf0>)
 8004eea:	18d3      	adds	r3, r2, r3
 8004eec:	68de      	ldr	r6, [r3, #12]
 8004eee:	2e00      	cmp	r6, #0
 8004ef0:	d03d      	beq.n	8004f6e <AddSnippet+0xca>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004ef2:	0030      	movs	r0, r6
 8004ef4:	f7fb f910 	bl	8000118 <strlen>
 8004ef8:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004efa:	0020      	movs	r0, r4
 8004efc:	f7fb f90c 	bl	8000118 <strlen>
 8004f00:	1839      	adds	r1, r7, r0
 8004f02:	3102      	adds	r1, #2
 8004f04:	0030      	movs	r0, r6
 8004f06:	f00f fe0d 	bl	8014b24 <realloc>
 8004f0a:	4e22      	ldr	r6, [pc, #136]	; (8004f94 <AddSnippet+0xf0>)
 8004f0c:	00ab      	lsls	r3, r5, #2
 8004f0e:	195d      	adds	r5, r3, r5
 8004f10:	00ad      	lsls	r5, r5, #2
 8004f12:	1975      	adds	r5, r6, r5
 8004f14:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004f16:	4d1e      	ldr	r5, [pc, #120]	; (8004f90 <AddSnippet+0xec>)
 8004f18:	782a      	ldrb	r2, [r5, #0]
 8004f1a:	3a01      	subs	r2, #1
 8004f1c:	0093      	lsls	r3, r2, #2
 8004f1e:	189b      	adds	r3, r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	18f3      	adds	r3, r6, r3
 8004f24:	1c7a      	adds	r2, r7, #1
 8004f26:	68d8      	ldr	r0, [r3, #12]
 8004f28:	1880      	adds	r0, r0, r2
 8004f2a:	0021      	movs	r1, r4
 8004f2c:	f00f fffe 	bl	8014f2c <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004f30:	782a      	ldrb	r2, [r5, #0]
 8004f32:	3a01      	subs	r2, #1
 8004f34:	0093      	lsls	r3, r2, #2
 8004f36:	189b      	adds	r3, r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	18f6      	adds	r6, r6, r3
 8004f3c:	68f3      	ldr	r3, [r6, #12]
 8004f3e:	2213      	movs	r2, #19
 8004f40:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004f42:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <AddSnippet+0xec>)
 8004f44:	781a      	ldrb	r2, [r3, #0]
 8004f46:	3a01      	subs	r2, #1
 8004f48:	0093      	lsls	r3, r2, #2
 8004f4a:	189b      	adds	r3, r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4911      	ldr	r1, [pc, #68]	; (8004f94 <AddSnippet+0xf0>)
 8004f50:	18cb      	adds	r3, r1, r3
 8004f52:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004f54:	2000      	movs	r0, #0
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1bb      	bne.n	8004ed2 <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004f5a:	0090      	lsls	r0, r2, #2
 8004f5c:	1880      	adds	r0, r0, r2
 8004f5e:	0080      	lsls	r0, r0, #2
 8004f60:	1840      	adds	r0, r0, r1
 8004f62:	2214      	movs	r2, #20
 8004f64:	2100      	movs	r1, #0
 8004f66:	f00f fdab 	bl	8014ac0 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004f6a:	200e      	movs	r0, #14
 8004f6c:	e7b1      	b.n	8004ed2 <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004f6e:	0008      	movs	r0, r1
 8004f70:	f7fb f8d2 	bl	8000118 <strlen>
 8004f74:	3001      	adds	r0, #1
 8004f76:	f00f fb4d 	bl	8014614 <malloc>
 8004f7a:	00ab      	lsls	r3, r5, #2
 8004f7c:	195d      	adds	r5, r3, r5
 8004f7e:	00ad      	lsls	r5, r5, #2
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <AddSnippet+0xf0>)
 8004f82:	195d      	adds	r5, r3, r5
 8004f84:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004f86:	0021      	movs	r1, r4
 8004f88:	f00f ffd0 	bl	8014f2c <strcpy>
 8004f8c:	e7d9      	b.n	8004f42 <AddSnippet+0x9e>
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	200011f7 	.word	0x200011f7
 8004f94:	20006c10 	.word	0x20006c10

08004f98 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f9a:	46de      	mov	lr, fp
 8004f9c:	4657      	mov	r7, sl
 8004f9e:	464e      	mov	r6, r9
 8004fa0:	4645      	mov	r5, r8
 8004fa2:	b5e0      	push	{r5, r6, r7, lr}
 8004fa4:	b08b      	sub	sp, #44	; 0x2c
 8004fa6:	9004      	str	r0, [sp, #16]
 8004fa8:	4688      	mov	r8, r1
 8004faa:	9203      	str	r2, [sp, #12]
 8004fac:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004fae:	2209      	movs	r2, #9
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	a807      	add	r0, sp, #28
 8004fb4:	f00f fd84 	bl	8014ac0 <memset>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004fb8:	4fd5      	ldr	r7, [pc, #852]	; (8005310 <CLI_CommandParser+0x378>)
				if(id == myID){
 8004fba:	002e      	movs	r6, r5
 8004fbc:	e034      	b.n	8005028 <CLI_CommandParser+0x90>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004fbe:	2252      	movs	r2, #82	; 0x52
 8004fc0:	49d4      	ldr	r1, [pc, #848]	; (8005314 <CLI_CommandParser+0x37c>)
 8004fc2:	0020      	movs	r0, r4
 8004fc4:	f00f fd73 	bl	8014aae <memcpy>
				recordSnippet =0;
 8004fc8:	4bd1      	ldr	r3, [pc, #836]	; (8005310 <CLI_CommandParser+0x378>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	e044      	b.n	800505a <CLI_CommandParser+0xc2>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004fd0:	2206      	movs	r2, #6
 8004fd2:	49d1      	ldr	r1, [pc, #836]	; (8005318 <CLI_CommandParser+0x380>)
 8004fd4:	9803      	ldr	r0, [sp, #12]
 8004fd6:	f00f ffb1 	bl	8014f3c <strncmp>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d053      	beq.n	8005086 <CLI_CommandParser+0xee>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004fde:	2d02      	cmp	r5, #2
 8004fe0:	d05e      	beq.n	80050a0 <CLI_CommandParser+0x108>
			loc =strchr((char* )cInputString,'.');
 8004fe2:	212e      	movs	r1, #46	; 0x2e
 8004fe4:	9803      	ldr	r0, [sp, #12]
 8004fe6:	f00f ff93 	bl	8014f10 <strchr>
 8004fea:	1e05      	subs	r5, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004fec:	d006      	beq.n	8004ffc <CLI_CommandParser+0x64>
 8004fee:	3803      	subs	r0, #3
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	49ca      	ldr	r1, [pc, #808]	; (800531c <CLI_CommandParser+0x384>)
 8004ff4:	f00f ffa2 	bl	8014f3c <strncmp>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d160      	bne.n	80050be <CLI_CommandParser+0x126>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004ffc:	2299      	movs	r2, #153	; 0x99
 8004ffe:	0092      	lsls	r2, r2, #2
 8005000:	0021      	movs	r1, r4
 8005002:	9803      	ldr	r0, [sp, #12]
 8005004:	f009 fd86 	bl	800eb14 <FreeRTOS_CLIProcessCommand>
 8005008:	0006      	movs	r6, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 800500a:	7823      	ldrb	r3, [r4, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d000      	beq.n	8005012 <CLI_CommandParser+0x7a>
 8005010:	e16f      	b.n	80052f2 <CLI_CommandParser+0x35a>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005012:	0020      	movs	r0, r4
 8005014:	f7fb f880 	bl	8000118 <strlen>
 8005018:	0002      	movs	r2, r0
 800501a:	2100      	movs	r1, #0
 800501c:	0020      	movs	r0, r4
 800501e:	f00f fd4f 	bl	8014ac0 <memset>
	} while(xReturned != pdFALSE);
 8005022:	2e00      	cmp	r6, #0
 8005024:	d100      	bne.n	8005028 <CLI_CommandParser+0x90>
 8005026:	e1ab      	b.n	8005380 <CLI_CommandParser+0x3e8>
		StringToLowerCase((char* )cInputString);
 8005028:	9803      	ldr	r0, [sp, #12]
 800502a:	f7ff fcf7 	bl	8004a1c <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 800502e:	783d      	ldrb	r5, [r7, #0]
 8005030:	2d00      	cmp	r5, #0
 8005032:	d1cd      	bne.n	8004fd0 <CLI_CommandParser+0x38>
 8005034:	2203      	movs	r2, #3
 8005036:	49ba      	ldr	r1, [pc, #744]	; (8005320 <CLI_CommandParser+0x388>)
 8005038:	9803      	ldr	r0, [sp, #12]
 800503a:	f00f ff7f 	bl	8014f3c <strncmp>
 800503e:	2800      	cmp	r0, #0
 8005040:	d1cf      	bne.n	8004fe2 <CLI_CommandParser+0x4a>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8005042:	9b03      	ldr	r3, [sp, #12]
 8005044:	1cd9      	adds	r1, r3, #3
 8005046:	3001      	adds	r0, #1
 8005048:	f7ff ff2c 	bl	8004ea4 <AddSnippet>
 800504c:	2800      	cmp	r0, #0
 800504e:	d1b6      	bne.n	8004fbe <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8005050:	4baf      	ldr	r3, [pc, #700]	; (8005310 <CLI_CommandParser+0x378>)
 8005052:	2202      	movs	r2, #2
 8005054:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8005056:	230d      	movs	r3, #13
 8005058:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 800505a:	7823      	ldrb	r3, [r4, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d100      	bne.n	8005062 <CLI_CommandParser+0xca>
 8005060:	e186      	b.n	8005370 <CLI_CommandParser+0x3d8>
 8005062:	4643      	mov	r3, r8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d100      	bne.n	800506a <CLI_CommandParser+0xd2>
 8005068:	e19d      	b.n	80053a6 <CLI_CommandParser+0x40e>
 800506a:	2600      	movs	r6, #0
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800506c:	0020      	movs	r0, r4
 800506e:	f7fb f853 	bl	8000118 <strlen>
 8005072:	b282      	uxth	r2, r0
 8005074:	2301      	movs	r3, #1
 8005076:	425b      	negs	r3, r3
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	3333      	adds	r3, #51	; 0x33
 800507c:	0021      	movs	r1, r4
 800507e:	9804      	ldr	r0, [sp, #16]
 8005080:	f009 fb84 	bl	800e78c <writePxMutex>
 8005084:	e7c5      	b.n	8005012 <CLI_CommandParser+0x7a>
			recordSnippet =0;
 8005086:	4ba2      	ldr	r3, [pc, #648]	; (8005310 <CLI_CommandParser+0x378>)
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 800508c:	49a5      	ldr	r1, [pc, #660]	; (8005324 <CLI_CommandParser+0x38c>)
 800508e:	3003      	adds	r0, #3
 8005090:	f7ff ff08 	bl	8004ea4 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8005094:	2241      	movs	r2, #65	; 0x41
 8005096:	49a4      	ldr	r1, [pc, #656]	; (8005328 <CLI_CommandParser+0x390>)
 8005098:	0020      	movs	r0, r4
 800509a:	f00f fd08 	bl	8014aae <memcpy>
			xReturned = pdFALSE;
 800509e:	e7dc      	b.n	800505a <CLI_CommandParser+0xc2>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 80050a0:	9903      	ldr	r1, [sp, #12]
 80050a2:	2002      	movs	r0, #2
 80050a4:	f7ff fefe 	bl	8004ea4 <AddSnippet>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	d102      	bne.n	80050b2 <CLI_CommandParser+0x11a>
				pcOutputString[0] ='\r';
 80050ac:	230d      	movs	r3, #13
 80050ae:	7023      	strb	r3, [r4, #0]
 80050b0:	e7d3      	b.n	800505a <CLI_CommandParser+0xc2>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80050b2:	2252      	movs	r2, #82	; 0x52
 80050b4:	4997      	ldr	r1, [pc, #604]	; (8005314 <CLI_CommandParser+0x37c>)
 80050b6:	0020      	movs	r0, r4
 80050b8:	f00f fcf9 	bl	8014aae <memcpy>
 80050bc:	e7cd      	b.n	800505a <CLI_CommandParser+0xc2>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 80050be:	f00f fa9b 	bl	80145f8 <__locale_ctype_ptr>
 80050c2:	786b      	ldrb	r3, [r5, #1]
 80050c4:	18c0      	adds	r0, r0, r3
 80050c6:	7843      	ldrb	r3, [r0, #1]
 80050c8:	075b      	lsls	r3, r3, #29
 80050ca:	d497      	bmi.n	8004ffc <CLI_CommandParser+0x64>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 80050cc:	9903      	ldr	r1, [sp, #12]
 80050ce:	1a6a      	subs	r2, r5, r1
 80050d0:	a807      	add	r0, sp, #28
 80050d2:	f00f ff44 	bl	8014f5e <strncpy>
				id =GetID(idString);
 80050d6:	a807      	add	r0, sp, #28
 80050d8:	f7ff f9b6 	bl	8004448 <GetID>
 80050dc:	9005      	str	r0, [sp, #20]
				if(id == myID){
 80050de:	4a93      	ldr	r2, [pc, #588]	; (800532c <CLI_CommandParser+0x394>)
 80050e0:	7812      	ldrb	r2, [r2, #0]
 80050e2:	4693      	mov	fp, r2
 80050e4:	4290      	cmp	r0, r2
 80050e6:	d03d      	beq.n	8005164 <CLI_CommandParser+0x1cc>
				else if(id == BOS_ERR_WrongName){
 80050e8:	2864      	cmp	r0, #100	; 0x64
 80050ea:	d043      	beq.n	8005174 <CLI_CommandParser+0x1dc>
				else if(id == BOS_ERR_WrongID){
 80050ec:	2866      	cmp	r0, #102	; 0x66
 80050ee:	d047      	beq.n	8005180 <CLI_CommandParser+0x1e8>
				else if(id == BOS_BROADCAST){
 80050f0:	28ff      	cmp	r0, #255	; 0xff
 80050f2:	d04b      	beq.n	800518c <CLI_CommandParser+0x1f4>
				else if((uint8_t )id == BOS_MULTICAST){
 80050f4:	466b      	mov	r3, sp
 80050f6:	7d1b      	ldrb	r3, [r3, #20]
 80050f8:	469a      	mov	sl, r3
 80050fa:	2bfe      	cmp	r3, #254	; 0xfe
 80050fc:	d078      	beq.n	80051f0 <CLI_CommandParser+0x258>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 80050fe:	3501      	adds	r5, #1
 8005100:	2206      	movs	r2, #6
 8005102:	498b      	ldr	r1, [pc, #556]	; (8005330 <CLI_CommandParser+0x398>)
 8005104:	0028      	movs	r0, r5
 8005106:	f00f ff19 	bl	8014f3c <strncmp>
 800510a:	2800      	cmp	r0, #0
 800510c:	d000      	beq.n	8005110 <CLI_CommandParser+0x178>
 800510e:	e0b4      	b.n	800527a <CLI_CommandParser+0x2e2>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005110:	4b88      	ldr	r3, [pc, #544]	; (8005334 <CLI_CommandParser+0x39c>)
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8005116:	2119      	movs	r1, #25
 8005118:	4650      	mov	r0, sl
 800511a:	f004 fc67 	bl	80099ec <SendMessageToModule>
						osDelay(100);
 800511e:	2064      	movs	r0, #100	; 0x64
 8005120:	f009 fc61 	bl	800e9e6 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8005124:	4b84      	ldr	r3, [pc, #528]	; (8005338 <CLI_CommandParser+0x3a0>)
 8005126:	781a      	ldrb	r2, [r3, #0]
 8005128:	4b80      	ldr	r3, [pc, #512]	; (800532c <CLI_CommandParser+0x394>)
 800512a:	7818      	ldrb	r0, [r3, #0]
 800512c:	2300      	movs	r3, #0
 800512e:	4651      	mov	r1, sl
 8005130:	f7fe fe64 	bl	8003dfc <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8005134:	4b7f      	ldr	r3, [pc, #508]	; (8005334 <CLI_CommandParser+0x39c>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b60      	cmp	r3, #96	; 0x60
 800513a:	d18e      	bne.n	800505a <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 800513c:	21fa      	movs	r1, #250	; 0xfa
 800513e:	0089      	lsls	r1, r1, #2
 8005140:	2001      	movs	r0, #1
 8005142:	f00b f823 	bl	801018c <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8005146:	4b7d      	ldr	r3, [pc, #500]	; (800533c <CLI_CommandParser+0x3a4>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d085      	beq.n	800505a <CLI_CommandParser+0xc2>
							++timedoutMsg;
 800514e:	4a7c      	ldr	r2, [pc, #496]	; (8005340 <CLI_CommandParser+0x3a8>)
 8005150:	8813      	ldrh	r3, [r2, #0]
 8005152:	3301      	adds	r3, #1
 8005154:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8005156:	9b05      	ldr	r3, [sp, #20]
 8005158:	0022      	movs	r2, r4
 800515a:	497a      	ldr	r1, [pc, #488]	; (8005344 <CLI_CommandParser+0x3ac>)
 800515c:	0020      	movs	r0, r4
 800515e:	f00f fea9 	bl	8014eb4 <sprintf>
 8005162:	e77a      	b.n	800505a <CLI_CommandParser+0xc2>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005164:	2299      	movs	r2, #153	; 0x99
 8005166:	1c68      	adds	r0, r5, #1
 8005168:	0092      	lsls	r2, r2, #2
 800516a:	0021      	movs	r1, r4
 800516c:	f009 fcd2 	bl	800eb14 <FreeRTOS_CLIProcessCommand>
 8005170:	0006      	movs	r6, r0
 8005172:	e74a      	b.n	800500a <CLI_CommandParser+0x72>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8005174:	2227      	movs	r2, #39	; 0x27
 8005176:	4974      	ldr	r1, [pc, #464]	; (8005348 <CLI_CommandParser+0x3b0>)
 8005178:	0020      	movs	r0, r4
 800517a:	f00f fc98 	bl	8014aae <memcpy>
 800517e:	e76c      	b.n	800505a <CLI_CommandParser+0xc2>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8005180:	2225      	movs	r2, #37	; 0x25
 8005182:	4972      	ldr	r1, [pc, #456]	; (800534c <CLI_CommandParser+0x3b4>)
 8005184:	0020      	movs	r0, r4
 8005186:	f00f fc92 	bl	8014aae <memcpy>
 800518a:	e766      	b.n	800505a <CLI_CommandParser+0xc2>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800518c:	221a      	movs	r2, #26
 800518e:	2100      	movs	r1, #0
 8005190:	486f      	ldr	r0, [pc, #444]	; (8005350 <CLI_CommandParser+0x3b8>)
 8005192:	f00f fc95 	bl	8014ac0 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005196:	3501      	adds	r5, #1
 8005198:	9803      	ldr	r0, [sp, #12]
 800519a:	f7fa ffbd 	bl	8000118 <strlen>
 800519e:	0006      	movs	r6, r0
 80051a0:	ab07      	add	r3, sp, #28
 80051a2:	0018      	movs	r0, r3
 80051a4:	f7fa ffb8 	bl	8000118 <strlen>
 80051a8:	1e72      	subs	r2, r6, #1
 80051aa:	1a12      	subs	r2, r2, r0
 80051ac:	0029      	movs	r1, r5
 80051ae:	4869      	ldr	r0, [pc, #420]	; (8005354 <CLI_CommandParser+0x3bc>)
 80051b0:	f00f fed5 	bl	8014f5e <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 80051b4:	9803      	ldr	r0, [sp, #12]
 80051b6:	f7fa ffaf 	bl	8000118 <strlen>
 80051ba:	0006      	movs	r6, r0
 80051bc:	a807      	add	r0, sp, #28
 80051be:	f7fa ffab 	bl	8000118 <strlen>
 80051c2:	1a33      	subs	r3, r6, r0
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2217      	movs	r2, #23
 80051c8:	21ff      	movs	r1, #255	; 0xff
 80051ca:	4658      	mov	r0, fp
 80051cc:	f004 fbe6 	bl	800999c <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80051d0:	2299      	movs	r2, #153	; 0x99
 80051d2:	0092      	lsls	r2, r2, #2
 80051d4:	0021      	movs	r1, r4
 80051d6:	0028      	movs	r0, r5
 80051d8:	f009 fc9c 	bl	800eb14 <FreeRTOS_CLIProcessCommand>
 80051dc:	0006      	movs	r6, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 80051de:	0020      	movs	r0, r4
 80051e0:	f7fa ff9a 	bl	8000118 <strlen>
 80051e4:	1820      	adds	r0, r4, r0
 80051e6:	221d      	movs	r2, #29
 80051e8:	495b      	ldr	r1, [pc, #364]	; (8005358 <CLI_CommandParser+0x3c0>)
 80051ea:	f00f fc60 	bl	8014aae <memcpy>
 80051ee:	e70c      	b.n	800500a <CLI_CommandParser+0x72>
					group =id >> 8;
 80051f0:	9b05      	ldr	r3, [sp, #20]
 80051f2:	121b      	asrs	r3, r3, #8
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	469a      	mov	sl, r3
 80051f8:	4b58      	ldr	r3, [pc, #352]	; (800535c <CLI_CommandParser+0x3c4>)
 80051fa:	4699      	mov	r9, r3
 80051fc:	4652      	mov	r2, sl
 80051fe:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005200:	221a      	movs	r2, #26
 8005202:	2100      	movs	r1, #0
 8005204:	4852      	ldr	r0, [pc, #328]	; (8005350 <CLI_CommandParser+0x3b8>)
 8005206:	f00f fc5b 	bl	8014ac0 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 800520a:	1c6b      	adds	r3, r5, #1
 800520c:	9305      	str	r3, [sp, #20]
 800520e:	9803      	ldr	r0, [sp, #12]
 8005210:	f7fa ff82 	bl	8000118 <strlen>
 8005214:	0005      	movs	r5, r0
 8005216:	aa07      	add	r2, sp, #28
 8005218:	0010      	movs	r0, r2
 800521a:	f7fa ff7d 	bl	8000118 <strlen>
 800521e:	3d01      	subs	r5, #1
 8005220:	1a2a      	subs	r2, r5, r0
 8005222:	9905      	ldr	r1, [sp, #20]
 8005224:	484b      	ldr	r0, [pc, #300]	; (8005354 <CLI_CommandParser+0x3bc>)
 8005226:	f00f fe9a 	bl	8014f5e <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 800522a:	9803      	ldr	r0, [sp, #12]
 800522c:	f7fa ff74 	bl	8000118 <strlen>
 8005230:	0005      	movs	r5, r0
 8005232:	a807      	add	r0, sp, #28
 8005234:	f7fa ff70 	bl	8000118 <strlen>
 8005238:	1a2b      	subs	r3, r5, r0
 800523a:	b29b      	uxth	r3, r3
 800523c:	2217      	movs	r2, #23
 800523e:	4651      	mov	r1, sl
 8005240:	4658      	mov	r0, fp
 8005242:	f004 fbab 	bl	800999c <BroadcastMessage>
					if(InGroup(myID,group))
 8005246:	4b39      	ldr	r3, [pc, #228]	; (800532c <CLI_CommandParser+0x394>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	3b01      	subs	r3, #1
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	4a44      	ldr	r2, [pc, #272]	; (8005360 <CLI_CommandParser+0x3c8>)
 8005250:	5a9b      	ldrh	r3, [r3, r2]
 8005252:	464a      	mov	r2, r9
 8005254:	7812      	ldrb	r2, [r2, #0]
 8005256:	4113      	asrs	r3, r2
 8005258:	07db      	lsls	r3, r3, #31
 800525a:	d406      	bmi.n	800526a <CLI_CommandParser+0x2d2>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 800525c:	ab07      	add	r3, sp, #28
 800525e:	0022      	movs	r2, r4
 8005260:	4940      	ldr	r1, [pc, #256]	; (8005364 <CLI_CommandParser+0x3cc>)
 8005262:	0020      	movs	r0, r4
 8005264:	f00f fe26 	bl	8014eb4 <sprintf>
 8005268:	e6cf      	b.n	800500a <CLI_CommandParser+0x72>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800526a:	2299      	movs	r2, #153	; 0x99
 800526c:	0092      	lsls	r2, r2, #2
 800526e:	0021      	movs	r1, r4
 8005270:	9805      	ldr	r0, [sp, #20]
 8005272:	f009 fc4f 	bl	800eb14 <FreeRTOS_CLIProcessCommand>
 8005276:	0006      	movs	r6, r0
 8005278:	e7f0      	b.n	800525c <CLI_CommandParser+0x2c4>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 800527a:	9803      	ldr	r0, [sp, #12]
 800527c:	f7fa ff4c 	bl	8000118 <strlen>
 8005280:	0006      	movs	r6, r0
 8005282:	ab07      	add	r3, sp, #28
 8005284:	0018      	movs	r0, r3
 8005286:	f7fa ff47 	bl	8000118 <strlen>
 800528a:	1e72      	subs	r2, r6, #1
 800528c:	1a12      	subs	r2, r2, r0
 800528e:	0029      	movs	r1, r5
 8005290:	4830      	ldr	r0, [pc, #192]	; (8005354 <CLI_CommandParser+0x3bc>)
 8005292:	f00f fe64 	bl	8014f5e <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8005296:	9803      	ldr	r0, [sp, #12]
 8005298:	f7fa ff3e 	bl	8000118 <strlen>
 800529c:	0005      	movs	r5, r0
 800529e:	a807      	add	r0, sp, #28
 80052a0:	f7fa ff3a 	bl	8000118 <strlen>
 80052a4:	3d01      	subs	r5, #1
 80052a6:	1a2a      	subs	r2, r5, r0
 80052a8:	b292      	uxth	r2, r2
 80052aa:	2117      	movs	r1, #23
 80052ac:	4650      	mov	r0, sl
 80052ae:	f004 fb9d 	bl	80099ec <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 80052b2:	9a05      	ldr	r2, [sp, #20]
 80052b4:	492c      	ldr	r1, [pc, #176]	; (8005368 <CLI_CommandParser+0x3d0>)
 80052b6:	0020      	movs	r0, r4
 80052b8:	f00f fdfc 	bl	8014eb4 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 80052bc:	7823      	ldrb	r3, [r4, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <CLI_CommandParser+0x330>
 80052c2:	4643      	mov	r3, r8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d108      	bne.n	80052da <CLI_CommandParser+0x342>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80052c8:	0020      	movs	r0, r4
 80052ca:	f7fa ff25 	bl	8000118 <strlen>
 80052ce:	0002      	movs	r2, r0
 80052d0:	2100      	movs	r1, #0
 80052d2:	0020      	movs	r0, r4
 80052d4:	f00f fbf4 	bl	8014ac0 <memset>
 80052d8:	e72c      	b.n	8005134 <CLI_CommandParser+0x19c>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 80052da:	0020      	movs	r0, r4
 80052dc:	f7fa ff1c 	bl	8000118 <strlen>
 80052e0:	b282      	uxth	r2, r0
 80052e2:	2301      	movs	r3, #1
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	3331      	adds	r3, #49	; 0x31
 80052e8:	0021      	movs	r1, r4
 80052ea:	9804      	ldr	r0, [sp, #16]
 80052ec:	f009 fa4e 	bl	800e78c <writePxMutex>
 80052f0:	e7ea      	b.n	80052c8 <CLI_CommandParser+0x330>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80052f2:	4643      	mov	r3, r8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d100      	bne.n	80052fa <CLI_CommandParser+0x362>
 80052f8:	e68b      	b.n	8005012 <CLI_CommandParser+0x7a>
 80052fa:	e6b7      	b.n	800506c <CLI_CommandParser+0xd4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 80052fc:	2301      	movs	r3, #1
 80052fe:	425b      	negs	r3, r3
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	3333      	adds	r3, #51	; 0x33
 8005304:	2238      	movs	r2, #56	; 0x38
 8005306:	4919      	ldr	r1, [pc, #100]	; (800536c <CLI_CommandParser+0x3d4>)
 8005308:	9804      	ldr	r0, [sp, #16]
 800530a:	f009 fa3f 	bl	800e78c <writePxMutex>
}
 800530e:	e043      	b.n	8005398 <CLI_CommandParser+0x400>
 8005310:	20001224 	.word	0x20001224
 8005314:	080199d8 	.word	0x080199d8
 8005318:	08019a2c 	.word	0x08019a2c
 800531c:	08019a78 	.word	0x08019a78
 8005320:	080199d4 	.word	0x080199d4
 8005324:	0801966c 	.word	0x0801966c
 8005328:	08019a34 	.word	0x08019a34
 800532c:	20001052 	.word	0x20001052
 8005330:	08019b18 	.word	0x08019b18
 8005334:	20006b74 	.word	0x20006b74
 8005338:	20000a88 	.word	0x20000a88
 800533c:	200010e8 	.word	0x200010e8
 8005340:	2000199e 	.word	0x2000199e
 8005344:	08019b44 	.word	0x08019b44
 8005348:	08019a7c 	.word	0x08019a7c
 800534c:	08019aa4 	.word	0x08019aa4
 8005350:	20000d00 	.word	0x20000d00
 8005354:	20000f14 	.word	0x20000f14
 8005358:	08019acc 	.word	0x08019acc
 800535c:	200011f6 	.word	0x200011f6
 8005360:	20000e9c 	.word	0x20000e9c
 8005364:	08019aec 	.word	0x08019aec
 8005368:	08019b20 	.word	0x08019b20
 800536c:	08019b64 	.word	0x08019b64
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005370:	0020      	movs	r0, r4
 8005372:	f7fa fed1 	bl	8000118 <strlen>
 8005376:	0002      	movs	r2, r0
 8005378:	2100      	movs	r1, #0
 800537a:	0020      	movs	r0, r4
 800537c:	f00f fba0 	bl	8014ac0 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8005380:	2209      	movs	r2, #9
 8005382:	2100      	movs	r1, #0
 8005384:	a807      	add	r0, sp, #28
 8005386:	f00f fb9b 	bl	8014ac0 <memset>
	if(!recordSnippet && enableOutput)
 800538a:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <CLI_CommandParser+0x420>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d102      	bne.n	8005398 <CLI_CommandParser+0x400>
 8005392:	4643      	mov	r3, r8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1b1      	bne.n	80052fc <CLI_CommandParser+0x364>
}
 8005398:	b00b      	add	sp, #44	; 0x2c
 800539a:	bc3c      	pop	{r2, r3, r4, r5}
 800539c:	4690      	mov	r8, r2
 800539e:	4699      	mov	r9, r3
 80053a0:	46a2      	mov	sl, r4
 80053a2:	46ab      	mov	fp, r5
 80053a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80053a6:	0020      	movs	r0, r4
 80053a8:	f7fa feb6 	bl	8000118 <strlen>
 80053ac:	0002      	movs	r2, r0
 80053ae:	2100      	movs	r1, #0
 80053b0:	0020      	movs	r0, r4
 80053b2:	f00f fb85 	bl	8014ac0 <memset>
 80053b6:	e7e3      	b.n	8005380 <CLI_CommandParser+0x3e8>
 80053b8:	20001224 	.word	0x20001224

080053bc <prvCLITask>:
void prvCLITask(void *pvParameters){
 80053bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053be:	46ce      	mov	lr, r9
 80053c0:	4647      	mov	r7, r8
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b089      	sub	sp, #36	; 0x24
	char cRxedChar ='\0';
 80053c6:	230f      	movs	r3, #15
 80053c8:	aa04      	add	r2, sp, #16
 80053ca:	4694      	mov	ip, r2
 80053cc:	4463      	add	r3, ip
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80053d2:	2101      	movs	r1, #1
 80053d4:	4249      	negs	r1, r1
 80053d6:	2001      	movs	r0, #1
 80053d8:	f00a fed8 	bl	801018c <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80053dc:	f009 fc18 	bl	800ec10 <FreeRTOS_CLIGetOutputBuffer>
 80053e0:	9005      	str	r0, [sp, #20]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 80053e2:	23e1      	movs	r3, #225	; 0xe1
 80053e4:	031b      	lsls	r3, r3, #12
 80053e6:	4a5c      	ldr	r2, [pc, #368]	; (8005558 <prvCLITask+0x19c>)
 80053e8:	6892      	ldr	r2, [r2, #8]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d00f      	beq.n	800540e <prvCLITask+0x52>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80053ee:	2401      	movs	r4, #1
			if(port != PcPort)
 80053f0:	4e5a      	ldr	r6, [pc, #360]	; (800555c <prvCLITask+0x1a0>)
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 80053f2:	001d      	movs	r5, r3
 80053f4:	e003      	b.n	80053fe <prvCLITask+0x42>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80053f6:	3401      	adds	r4, #1
 80053f8:	b2e4      	uxtb	r4, r4
 80053fa:	2c06      	cmp	r4, #6
 80053fc:	d007      	beq.n	800540e <prvCLITask+0x52>
			if(port != PcPort)
 80053fe:	7833      	ldrb	r3, [r6, #0]
 8005400:	42a3      	cmp	r3, r4
 8005402:	d0f8      	beq.n	80053f6 <prvCLITask+0x3a>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005404:	0029      	movs	r1, r5
 8005406:	0020      	movs	r0, r4
 8005408:	f009 fa2e 	bl	800e868 <UpdateBaudrate>
 800540c:	e7f3      	b.n	80053f6 <prvCLITask+0x3a>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 800540e:	4b54      	ldr	r3, [pc, #336]	; (8005560 <prvCLITask+0x1a4>)
 8005410:	881a      	ldrh	r2, [r3, #0]
 8005412:	0053      	lsls	r3, r2, #1
 8005414:	189b      	adds	r3, r3, r2
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	4a52      	ldr	r2, [pc, #328]	; (8005564 <prvCLITask+0x1a8>)
 800541a:	189b      	adds	r3, r3, r2
 800541c:	4a52      	ldr	r2, [pc, #328]	; (8005568 <prvCLITask+0x1ac>)
 800541e:	7812      	ldrb	r2, [r2, #0]
 8005420:	4c52      	ldr	r4, [pc, #328]	; (800556c <prvCLITask+0x1b0>)
 8005422:	4d4e      	ldr	r5, [pc, #312]	; (800555c <prvCLITask+0x1a0>)
 8005424:	7829      	ldrb	r1, [r5, #0]
 8005426:	9100      	str	r1, [sp, #0]
 8005428:	4951      	ldr	r1, [pc, #324]	; (8005570 <prvCLITask+0x1b4>)
 800542a:	0020      	movs	r0, r4
 800542c:	f00f fd42 	bl	8014eb4 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8005430:	22a4      	movs	r2, #164	; 0xa4
 8005432:	7828      	ldrb	r0, [r5, #0]
 8005434:	230a      	movs	r3, #10
 8005436:	0092      	lsls	r2, r2, #2
 8005438:	494e      	ldr	r1, [pc, #312]	; (8005574 <prvCLITask+0x1b8>)
 800543a:	f009 f9cf 	bl	800e7dc <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 800543e:	0020      	movs	r0, r4
 8005440:	f7fa fe6a 	bl	8000118 <strlen>
 8005444:	b282      	uxth	r2, r0
 8005446:	7828      	ldrb	r0, [r5, #0]
 8005448:	230a      	movs	r3, #10
 800544a:	0021      	movs	r1, r4
 800544c:	f009 f9c6 	bl	800e7dc <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8005450:	2700      	movs	r7, #0
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005452:	4b42      	ldr	r3, [pc, #264]	; (800555c <prvCLITask+0x1a0>)
 8005454:	4699      	mov	r9, r3
 8005456:	4b48      	ldr	r3, [pc, #288]	; (8005578 <prvCLITask+0x1bc>)
 8005458:	4698      	mov	r8, r3
				chr =UARTRxBufIndex[PcPort - 1] =0;
 800545a:	001e      	movs	r6, r3
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800545c:	2301      	movs	r3, #1
 800545e:	9304      	str	r3, [sp, #16]
 8005460:	e055      	b.n	800550e <prvCLITask+0x152>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 8005462:	240f      	movs	r4, #15
 8005464:	a904      	add	r1, sp, #16
 8005466:	468c      	mov	ip, r1
 8005468:	4464      	add	r4, ip
 800546a:	7022      	strb	r2, [r4, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 800546c:	006a      	lsls	r2, r5, #1
 800546e:	1952      	adds	r2, r2, r5
 8005470:	0192      	lsls	r2, r2, #6
 8005472:	4c42      	ldr	r4, [pc, #264]	; (800557c <prvCLITask+0x1c0>)
 8005474:	18a2      	adds	r2, r4, r2
 8005476:	2400      	movs	r4, #0
 8005478:	9903      	ldr	r1, [sp, #12]
 800547a:	5454      	strb	r4, [r2, r1]
				UARTRxBufIndex[PcPort - 1] =chr;
 800547c:	4a3e      	ldr	r2, [pc, #248]	; (8005578 <prvCLITask+0x1bc>)
 800547e:	5553      	strb	r3, [r2, r5]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 8005480:	250f      	movs	r5, #15
 8005482:	ab04      	add	r3, sp, #16
 8005484:	469c      	mov	ip, r3
 8005486:	4465      	add	r5, ip
 8005488:	230a      	movs	r3, #10
 800548a:	2201      	movs	r2, #1
 800548c:	0029      	movs	r1, r5
 800548e:	f009 f9a5 	bl	800e7dc <writePxITMutex>
		if(cRxedChar == '\r'){
 8005492:	782b      	ldrb	r3, [r5, #0]
 8005494:	2b0d      	cmp	r3, #13
 8005496:	d01d      	beq.n	80054d4 <prvCLITask+0x118>
			if(cRxedChar == '\n'){
 8005498:	2b0a      	cmp	r3, #10
 800549a:	d036      	beq.n	800550a <prvCLITask+0x14e>
			else if(cRxedChar == '\b' || cRxedChar == 127 ){
 800549c:	2b08      	cmp	r3, #8
 800549e:	d052      	beq.n	8005546 <prvCLITask+0x18a>
 80054a0:	2b7f      	cmp	r3, #127	; 0x7f
 80054a2:	d050      	beq.n	8005546 <prvCLITask+0x18a>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80054a4:	001a      	movs	r2, r3
 80054a6:	3a20      	subs	r2, #32
 80054a8:	2a5e      	cmp	r2, #94	; 0x5e
 80054aa:	d82e      	bhi.n	800550a <prvCLITask+0x14e>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 80054ac:	2f31      	cmp	r7, #49	; 0x31
 80054ae:	dc2c      	bgt.n	800550a <prvCLITask+0x14e>
						cInputString[cInputIndex] =cRxedChar;
 80054b0:	4a33      	ldr	r2, [pc, #204]	; (8005580 <prvCLITask+0x1c4>)
 80054b2:	55d3      	strb	r3, [r2, r7]
						cInputIndex++;
 80054b4:	3701      	adds	r7, #1
 80054b6:	b27f      	sxtb	r7, r7
 80054b8:	e027      	b.n	800550a <prvCLITask+0x14e>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80054ba:	5571      	strb	r1, [r6, r5]
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80054bc:	9b04      	ldr	r3, [sp, #16]
			if(UARTRxBuf[PcPort - 1][chr]){
 80054be:	9303      	str	r3, [sp, #12]
 80054c0:	5ce2      	ldrb	r2, [r4, r3]
 80054c2:	2a00      	cmp	r2, #0
 80054c4:	d1cd      	bne.n	8005462 <prvCLITask+0xa6>
			if(chr == MSG_RX_BUF_SIZE - 1){
 80054c6:	2bbf      	cmp	r3, #191	; 0xbf
 80054c8:	d0f7      	beq.n	80054ba <prvCLITask+0xfe>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80054ca:	3301      	adds	r3, #1
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2bbf      	cmp	r3, #191	; 0xbf
 80054d0:	d9f5      	bls.n	80054be <prvCLITask+0x102>
 80054d2:	e7d5      	b.n	8005480 <prvCLITask+0xc4>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 80054d4:	4b21      	ldr	r3, [pc, #132]	; (800555c <prvCLITask+0x1a0>)
 80054d6:	7818      	ldrb	r0, [r3, #0]
 80054d8:	230a      	movs	r3, #10
 80054da:	2202      	movs	r2, #2
 80054dc:	4929      	ldr	r1, [pc, #164]	; (8005584 <prvCLITask+0x1c8>)
 80054de:	f009 f97d 	bl	800e7dc <writePxITMutex>
			if(cInputIndex == 0){
 80054e2:	2f00      	cmp	r7, #0
 80054e4:	d02a      	beq.n	800553c <prvCLITask+0x180>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 80054e6:	4f26      	ldr	r7, [pc, #152]	; (8005580 <prvCLITask+0x1c4>)
 80054e8:	4b1c      	ldr	r3, [pc, #112]	; (800555c <prvCLITask+0x1a0>)
 80054ea:	7818      	ldrb	r0, [r3, #0]
 80054ec:	9b05      	ldr	r3, [sp, #20]
 80054ee:	003a      	movs	r2, r7
 80054f0:	2101      	movs	r1, #1
 80054f2:	f7ff fd51 	bl	8004f98 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 80054f6:	0039      	movs	r1, r7
 80054f8:	4823      	ldr	r0, [pc, #140]	; (8005588 <prvCLITask+0x1cc>)
 80054fa:	f00f fd17 	bl	8014f2c <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 80054fe:	2232      	movs	r2, #50	; 0x32
 8005500:	2100      	movs	r1, #0
 8005502:	0038      	movs	r0, r7
 8005504:	f00f fadc 	bl	8014ac0 <memset>
			cInputIndex =0;
 8005508:	2700      	movs	r7, #0
		taskYIELD();
 800550a:	f00b f925 	bl	8010758 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800550e:	464b      	mov	r3, r9
 8005510:	7818      	ldrb	r0, [r3, #0]
 8005512:	1e45      	subs	r5, r0, #1
 8005514:	4643      	mov	r3, r8
 8005516:	5d59      	ldrb	r1, [r3, r5]
 8005518:	b28b      	uxth	r3, r1
 800551a:	2bbf      	cmp	r3, #191	; 0xbf
 800551c:	d8b0      	bhi.n	8005480 <prvCLITask+0xc4>
			if(UARTRxBuf[PcPort - 1][chr]){
 800551e:	9103      	str	r1, [sp, #12]
 8005520:	006a      	lsls	r2, r5, #1
 8005522:	1952      	adds	r2, r2, r5
 8005524:	0192      	lsls	r2, r2, #6
 8005526:	4c15      	ldr	r4, [pc, #84]	; (800557c <prvCLITask+0x1c0>)
 8005528:	18a2      	adds	r2, r4, r2
 800552a:	5c52      	ldrb	r2, [r2, r1]
 800552c:	2a00      	cmp	r2, #0
 800552e:	d198      	bne.n	8005462 <prvCLITask+0xa6>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 8005530:	2100      	movs	r1, #0
			if(UARTRxBuf[PcPort - 1][chr]){
 8005532:	006a      	lsls	r2, r5, #1
 8005534:	1952      	adds	r2, r2, r5
 8005536:	0192      	lsls	r2, r2, #6
 8005538:	18a4      	adds	r4, r4, r2
 800553a:	e7c4      	b.n	80054c6 <prvCLITask+0x10a>
				strcpy((char* )cInputString,(char* )cLastInputString);
 800553c:	4912      	ldr	r1, [pc, #72]	; (8005588 <prvCLITask+0x1cc>)
 800553e:	4810      	ldr	r0, [pc, #64]	; (8005580 <prvCLITask+0x1c4>)
 8005540:	f00f fcf4 	bl	8014f2c <strcpy>
 8005544:	e7cf      	b.n	80054e6 <prvCLITask+0x12a>
				if(cInputIndex > 0){
 8005546:	2f00      	cmp	r7, #0
 8005548:	dddf      	ble.n	800550a <prvCLITask+0x14e>
					cInputIndex--;
 800554a:	3f01      	subs	r7, #1
 800554c:	b27f      	sxtb	r7, r7
					cInputString[cInputIndex] ='\0';
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <prvCLITask+0x1c4>)
 8005550:	2200      	movs	r2, #0
 8005552:	55da      	strb	r2, [r3, r7]
 8005554:	e7d9      	b.n	800550a <prvCLITask+0x14e>
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	20006bf4 	.word	0x20006bf4
 800555c:	20000a88 	.word	0x20000a88
 8005560:	20000058 	.word	0x20000058
 8005564:	080196bc 	.word	0x080196bc
 8005568:	20001052 	.word	0x20001052
 800556c:	200011f8 	.word	0x200011f8
 8005570:	08019bd0 	.word	0x08019bd0
 8005574:	08019bfc 	.word	0x08019bfc
 8005578:	20001668 	.word	0x20001668
 800557c:	200012a8 	.word	0x200012a8
 8005580:	20001128 	.word	0x20001128
 8005584:	0801b4b8 	.word	0x0801b4b8
 8005588:	200011c4 	.word	0x200011c4

0800558c <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005590:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <ParseSnippetCommand+0x78>)
 8005592:	781a      	ldrb	r2, [r3, #0]
 8005594:	3a01      	subs	r2, #1
 8005596:	0093      	lsls	r3, r2, #2
 8005598:	189b      	adds	r3, r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4a1a      	ldr	r2, [pc, #104]	; (8005608 <ParseSnippetCommand+0x7c>)
 800559e:	18d3      	adds	r3, r2, r3
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d02c      	beq.n	8005600 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 80055a6:	4b19      	ldr	r3, [pc, #100]	; (800560c <ParseSnippetCommand+0x80>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d014      	beq.n	80055d8 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 80055ae:	4b17      	ldr	r3, [pc, #92]	; (800560c <ParseSnippetCommand+0x80>)
 80055b0:	681d      	ldr	r5, [r3, #0]
 80055b2:	782b      	ldrb	r3, [r5, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d012      	beq.n	80055de <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 80055b8:	2113      	movs	r1, #19
 80055ba:	0028      	movs	r0, r5
 80055bc:	f00f fca8 	bl	8014f10 <strchr>
 80055c0:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 80055c2:	d011      	beq.n	80055e8 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 80055c4:	1b42      	subs	r2, r0, r5
 80055c6:	0029      	movs	r1, r5
 80055c8:	0020      	movs	r0, r4
 80055ca:	f00f fcc8 	bl	8014f5e <strncpy>
		ptrStart =ptrEnd + 1;
 80055ce:	3601      	adds	r6, #1
 80055d0:	4b0e      	ldr	r3, [pc, #56]	; (800560c <ParseSnippetCommand+0x80>)
 80055d2:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 80055d4:	2001      	movs	r0, #1
 80055d6:	e006      	b.n	80055e6 <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 80055d8:	4b0c      	ldr	r3, [pc, #48]	; (800560c <ParseSnippetCommand+0x80>)
 80055da:	6018      	str	r0, [r3, #0]
 80055dc:	e7e7      	b.n	80055ae <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 80055de:	4b0b      	ldr	r3, [pc, #44]	; (800560c <ParseSnippetCommand+0x80>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
		return false;
 80055e4:	2000      	movs	r0, #0
}
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 80055e8:	0029      	movs	r1, r5
 80055ea:	0020      	movs	r0, r4
 80055ec:	f00f fc9e 	bl	8014f2c <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 80055f0:	0020      	movs	r0, r4
 80055f2:	f7fa fd91 	bl	8000118 <strlen>
 80055f6:	182d      	adds	r5, r5, r0
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <ParseSnippetCommand+0x80>)
 80055fa:	601d      	str	r5, [r3, #0]
	return true;
 80055fc:	2001      	movs	r0, #1
 80055fe:	e7f2      	b.n	80055e6 <ParseSnippetCommand+0x5a>
		return false;
 8005600:	2000      	movs	r0, #0
 8005602:	e7f0      	b.n	80055e6 <ParseSnippetCommand+0x5a>
 8005604:	200011f7 	.word	0x200011f7
 8005608:	20006c10 	.word	0x20006c10
 800560c:	20001220 	.word	0x20001220

08005610 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 8005610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005612:	b083      	sub	sp, #12
 8005614:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005616:	0083      	lsls	r3, r0, #2
 8005618:	181b      	adds	r3, r3, r0
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4a3f      	ldr	r2, [pc, #252]	; (800571c <CheckSnippetCondition+0x10c>)
 800561e:	5c9b      	ldrb	r3, [r3, r2]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d003      	beq.n	800562c <CheckSnippetCondition+0x1c>
 8005624:	2b03      	cmp	r3, #3
 8005626:	d015      	beq.n	8005654 <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 8005628:	2000      	movs	r0, #0
 800562a:	e011      	b.n	8005650 <CheckSnippetCondition+0x40>
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 800562c:	493b      	ldr	r1, [pc, #236]	; (800571c <CheckSnippetCondition+0x10c>)
 800562e:	0083      	lsls	r3, r0, #2
 8005630:	181a      	adds	r2, r3, r0
 8005632:	0092      	lsls	r2, r2, #2
 8005634:	188a      	adds	r2, r1, r2
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8005636:	7890      	ldrb	r0, [r2, #2]
 8005638:	00c2      	lsls	r2, r0, #3
 800563a:	1812      	adds	r2, r2, r0
 800563c:	191b      	adds	r3, r3, r4
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	18cb      	adds	r3, r1, r3
 8005642:	4937      	ldr	r1, [pc, #220]	; (8005720 <CheckSnippetCondition+0x110>)
 8005644:	5c50      	ldrb	r0, [r2, r1]
 8005646:	78db      	ldrb	r3, [r3, #3]
 8005648:	1ac0      	subs	r0, r0, r3
 800564a:	4243      	negs	r3, r0
 800564c:	4158      	adcs	r0, r3
 800564e:	b2c0      	uxtb	r0, r0
}
 8005650:	b003      	add	sp, #12
 8005652:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005654:	4e31      	ldr	r6, [pc, #196]	; (800571c <CheckSnippetCondition+0x10c>)
 8005656:	0085      	lsls	r5, r0, #2
 8005658:	182b      	adds	r3, r5, r0
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	18f3      	adds	r3, r6, r3
 800565e:	78da      	ldrb	r2, [r3, #3]
 8005660:	3a01      	subs	r2, #1
 8005662:	0053      	lsls	r3, r2, #1
 8005664:	189b      	adds	r3, r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4a2e      	ldr	r2, [pc, #184]	; (8005724 <CheckSnippetCondition+0x114>)
 800566a:	589b      	ldr	r3, [r3, r2]
 800566c:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800566e:	1829      	adds	r1, r5, r0
 8005670:	0089      	lsls	r1, r1, #2
 8005672:	3106      	adds	r1, #6
 8005674:	1989      	adds	r1, r1, r6
 8005676:	2204      	movs	r2, #4
 8005678:	a801      	add	r0, sp, #4
 800567a:	f00f fa18 	bl	8014aae <memcpy>
			switch(snippets[index].cond.mathOperator){
 800567e:	192d      	adds	r5, r5, r4
 8005680:	00ad      	lsls	r5, r5, #2
 8005682:	1975      	adds	r5, r6, r5
 8005684:	786b      	ldrb	r3, [r5, #1]
 8005686:	2b06      	cmp	r3, #6
 8005688:	d83f      	bhi.n	800570a <CheckSnippetCondition+0xfa>
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4a26      	ldr	r2, [pc, #152]	; (8005728 <CheckSnippetCondition+0x118>)
 800568e:	58d3      	ldr	r3, [r2, r3]
 8005690:	469f      	mov	pc, r3
					if(flt1 == flt2)
 8005692:	1c39      	adds	r1, r7, #0
 8005694:	9801      	ldr	r0, [sp, #4]
 8005696:	f7fa ff1b 	bl	80004d0 <__aeabi_fcmpeq>
 800569a:	1e43      	subs	r3, r0, #1
 800569c:	4198      	sbcs	r0, r3
 800569e:	e7d7      	b.n	8005650 <CheckSnippetCondition+0x40>
					if(flt1 > flt2)
 80056a0:	1c39      	adds	r1, r7, #0
 80056a2:	9801      	ldr	r0, [sp, #4]
 80056a4:	f7fa ff1a 	bl	80004dc <__aeabi_fcmplt>
 80056a8:	1e43      	subs	r3, r0, #1
 80056aa:	4198      	sbcs	r0, r3
 80056ac:	e7d0      	b.n	8005650 <CheckSnippetCondition+0x40>
					if(flt1 < flt2 && flt1 != 0.0f)
 80056ae:	1c39      	adds	r1, r7, #0
 80056b0:	9801      	ldr	r0, [sp, #4]
 80056b2:	f7fa ff27 	bl	8000504 <__aeabi_fcmpgt>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d029      	beq.n	800570e <CheckSnippetCondition+0xfe>
 80056ba:	2100      	movs	r1, #0
 80056bc:	1c38      	adds	r0, r7, #0
 80056be:	f7fa ff07 	bl	80004d0 <__aeabi_fcmpeq>
 80056c2:	4243      	negs	r3, r0
 80056c4:	4158      	adcs	r0, r3
 80056c6:	e7c3      	b.n	8005650 <CheckSnippetCondition+0x40>
					if(flt1 >= flt2)
 80056c8:	1c39      	adds	r1, r7, #0
 80056ca:	9801      	ldr	r0, [sp, #4]
 80056cc:	f7fa ff10 	bl	80004f0 <__aeabi_fcmple>
 80056d0:	1e43      	subs	r3, r0, #1
 80056d2:	4198      	sbcs	r0, r3
 80056d4:	e7bc      	b.n	8005650 <CheckSnippetCondition+0x40>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80056d6:	1c39      	adds	r1, r7, #0
 80056d8:	9801      	ldr	r0, [sp, #4]
 80056da:	f7fa ff1d 	bl	8000518 <__aeabi_fcmpge>
 80056de:	2800      	cmp	r0, #0
 80056e0:	d017      	beq.n	8005712 <CheckSnippetCondition+0x102>
 80056e2:	2100      	movs	r1, #0
 80056e4:	1c38      	adds	r0, r7, #0
 80056e6:	f7fa fef3 	bl	80004d0 <__aeabi_fcmpeq>
 80056ea:	4243      	negs	r3, r0
 80056ec:	4158      	adcs	r0, r3
 80056ee:	e7af      	b.n	8005650 <CheckSnippetCondition+0x40>
					if(flt1 != flt2 && flt1 != 0.0f)
 80056f0:	1c39      	adds	r1, r7, #0
 80056f2:	9801      	ldr	r0, [sp, #4]
 80056f4:	f7fa feec 	bl	80004d0 <__aeabi_fcmpeq>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d10c      	bne.n	8005716 <CheckSnippetCondition+0x106>
 80056fc:	2100      	movs	r1, #0
 80056fe:	1c38      	adds	r0, r7, #0
 8005700:	f7fa fee6 	bl	80004d0 <__aeabi_fcmpeq>
 8005704:	4243      	negs	r3, r0
 8005706:	4158      	adcs	r0, r3
 8005708:	e7a2      	b.n	8005650 <CheckSnippetCondition+0x40>
	return false;
 800570a:	2000      	movs	r0, #0
 800570c:	e7a0      	b.n	8005650 <CheckSnippetCondition+0x40>
 800570e:	2000      	movs	r0, #0
 8005710:	e79e      	b.n	8005650 <CheckSnippetCondition+0x40>
 8005712:	2000      	movs	r0, #0
 8005714:	e79c      	b.n	8005650 <CheckSnippetCondition+0x40>
 8005716:	2000      	movs	r0, #0
 8005718:	e79a      	b.n	8005650 <CheckSnippetCondition+0x40>
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	20006c10 	.word	0x20006c10
 8005720:	20001724 	.word	0x20001724
 8005724:	20000090 	.word	0x20000090
 8005728:	080199b8 	.word	0x080199b8

0800572c <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 800572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800572e:	f009 fa6f 	bl	800ec10 <FreeRTOS_CLIGetOutputBuffer>
 8005732:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005734:	4b1c      	ldr	r3, [pc, #112]	; (80057a8 <ExecuteSnippet+0x7c>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d032      	beq.n	80057a2 <ExecuteSnippet+0x76>
 800573c:	2400      	movs	r4, #0
		if(snippets[s].state)								// Check for activated Snippets
 800573e:	4f1b      	ldr	r7, [pc, #108]	; (80057ac <ExecuteSnippet+0x80>)
 8005740:	e01a      	b.n	8005778 <ExecuteSnippet+0x4c>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005742:	4b1b      	ldr	r3, [pc, #108]	; (80057b0 <ExecuteSnippet+0x84>)
 8005744:	7818      	ldrb	r0, [r3, #0]
 8005746:	002b      	movs	r3, r5
 8005748:	4a1a      	ldr	r2, [pc, #104]	; (80057b4 <ExecuteSnippet+0x88>)
 800574a:	2100      	movs	r1, #0
 800574c:	f7ff fc24 	bl	8004f98 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005750:	0028      	movs	r0, r5
 8005752:	f7fa fce1 	bl	8000118 <strlen>
 8005756:	0002      	movs	r2, r0
 8005758:	2100      	movs	r1, #0
 800575a:	0028      	movs	r0, r5
 800575c:	f00f f9b0 	bl	8014ac0 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005760:	4914      	ldr	r1, [pc, #80]	; (80057b4 <ExecuteSnippet+0x88>)
 8005762:	68f0      	ldr	r0, [r6, #12]
 8005764:	f7ff ff12 	bl	800558c <ParseSnippetCommand>
 8005768:	2800      	cmp	r0, #0
 800576a:	d1ea      	bne.n	8005742 <ExecuteSnippet+0x16>
	for(s =0; s < numOfRecordedSnippets; s++){
 800576c:	3401      	adds	r4, #1
 800576e:	b2a4      	uxth	r4, r4
 8005770:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <ExecuteSnippet+0x7c>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	42a3      	cmp	r3, r4
 8005776:	d914      	bls.n	80057a2 <ExecuteSnippet+0x76>
		if(snippets[s].state)								// Check for activated Snippets
 8005778:	00a3      	lsls	r3, r4, #2
 800577a:	191b      	adds	r3, r3, r4
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	18fb      	adds	r3, r7, r3
 8005780:	7c1b      	ldrb	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0f2      	beq.n	800576c <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 8005786:	b2e0      	uxtb	r0, r4
 8005788:	f7ff ff42 	bl	8005610 <CheckSnippetCondition>
 800578c:	2800      	cmp	r0, #0
 800578e:	d0ed      	beq.n	800576c <ExecuteSnippet+0x40>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005790:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <ExecuteSnippet+0x8c>)
 8005792:	2220      	movs	r2, #32
 8005794:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005796:	00a3      	lsls	r3, r4, #2
 8005798:	191e      	adds	r6, r3, r4
 800579a:	00b6      	lsls	r6, r6, #2
 800579c:	4b03      	ldr	r3, [pc, #12]	; (80057ac <ExecuteSnippet+0x80>)
 800579e:	199e      	adds	r6, r3, r6
 80057a0:	e7de      	b.n	8005760 <ExecuteSnippet+0x34>
			}
		}
	}
	
	return result;
}
 80057a2:	2000      	movs	r0, #0
 80057a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	200011f7 	.word	0x200011f7
 80057ac:	20006c10 	.word	0x20006c10
 80057b0:	20000a88 	.word	0x20000a88
 80057b4:	20001190 	.word	0x20001190
 80057b8:	20006b74 	.word	0x20006b74

080057bc <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 80057bc:	2000      	movs	r0, #0
 80057be:	4770      	bx	lr

080057c0 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	0004      	movs	r4, r0
 80057c6:	0015      	movs	r5, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 80057cc:	9300      	str	r3, [sp, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d101      	bne.n	80057d6 <setBaudrateCommand+0x16>
 80057d2:	b672      	cpsid	i
 80057d4:	e7fe      	b.n	80057d4 <setBaudrateCommand+0x14>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057d6:	aa01      	add	r2, sp, #4
 80057d8:	2101      	movs	r1, #1
 80057da:	0028      	movs	r0, r5
 80057dc:	f009 fa1c 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80057e0:	2300      	movs	r3, #0
 80057e2:	56c3      	ldrsb	r3, [r0, r3]
 80057e4:	2b70      	cmp	r3, #112	; 0x70
 80057e6:	d00c      	beq.n	8005802 <setBaudrateCommand+0x42>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80057e8:	466a      	mov	r2, sp
 80057ea:	2102      	movs	r1, #2
 80057ec:	0028      	movs	r0, r5
 80057ee:	f009 fa13 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80057f2:	f00e fed2 	bl	801459a <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80057f6:	2213      	movs	r2, #19
 80057f8:	490f      	ldr	r1, [pc, #60]	; (8005838 <setBaudrateCommand+0x78>)
 80057fa:	0020      	movs	r0, r4
 80057fc:	f00f f957 	bl	8014aae <memcpy>
		UpdateBaudrate(port,baudrate);
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8005800:	e016      	b.n	8005830 <setBaudrateCommand+0x70>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005802:	3001      	adds	r0, #1
 8005804:	f00e fec9 	bl	801459a <atol>
 8005808:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800580a:	466a      	mov	r2, sp
 800580c:	2102      	movs	r1, #2
 800580e:	0028      	movs	r0, r5
 8005810:	f009 fa02 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005814:	f00e fec1 	bl	801459a <atol>
 8005818:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 800581a:	b2f0      	uxtb	r0, r6
 800581c:	0029      	movs	r1, r5
 800581e:	f009 f823 	bl	800e868 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 8005822:	23ff      	movs	r3, #255	; 0xff
 8005824:	4033      	ands	r3, r6
 8005826:	002a      	movs	r2, r5
 8005828:	4904      	ldr	r1, [pc, #16]	; (800583c <setBaudrateCommand+0x7c>)
 800582a:	0020      	movs	r0, r4
 800582c:	f00f fb42 	bl	8014eb4 <sprintf>
}
 8005830:	2000      	movs	r0, #0
 8005832:	b002      	add	sp, #8
 8005834:	bd70      	pop	{r4, r5, r6, pc}
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	0801a888 	.word	0x0801a888
 800583c:	0801a860 	.word	0x0801a860

08005840 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005840:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005842:	2800      	cmp	r0, #0
 8005844:	d101      	bne.n	800584a <flashsizeCommand+0xa>
 8005846:	b672      	cpsid	i
 8005848:	e7fe      	b.n	8005848 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 800584a:	4b03      	ldr	r3, [pc, #12]	; (8005858 <flashsizeCommand+0x18>)
 800584c:	881a      	ldrh	r2, [r3, #0]
 800584e:	4903      	ldr	r1, [pc, #12]	; (800585c <flashsizeCommand+0x1c>)
 8005850:	f00f fb30 	bl	8014eb4 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005854:	2000      	movs	r0, #0
 8005856:	bd10      	pop	{r4, pc}
 8005858:	1ffff7cc 	.word	0x1ffff7cc
 800585c:	0801a254 	.word	0x0801a254

08005860 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005860:	b510      	push	{r4, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	0004      	movs	r4, r0
 8005866:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8005868:	2300      	movs	r3, #0
 800586a:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 800586c:	2300      	movs	r3, #0
 800586e:	9300      	str	r3, [sp, #0]
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005870:	2c00      	cmp	r4, #0
 8005872:	d101      	bne.n	8005878 <GetReadPrecentageCommand+0x18>
 8005874:	b672      	cpsid	i
 8005876:	e7fe      	b.n	8005876 <GetReadPrecentageCommand+0x16>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005878:	aa01      	add	r2, sp, #4
 800587a:	2101      	movs	r1, #1
 800587c:	f009 f9cc 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005880:	7803      	ldrb	r3, [r0, #0]
 8005882:	3b32      	subs	r3, #50	; 0x32
 8005884:	2b01      	cmp	r3, #1
 8005886:	d907      	bls.n	8005898 <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005888:	2215      	movs	r2, #21
 800588a:	490b      	ldr	r1, [pc, #44]	; (80058b8 <GetReadPrecentageCommand+0x58>)
 800588c:	0020      	movs	r0, r4
 800588e:	f00f f90e 	bl	8014aae <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 8005892:	2000      	movs	r0, #0
 8005894:	b002      	add	sp, #8
 8005896:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005898:	f00e fe7f 	bl	801459a <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 800589c:	b2c0      	uxtb	r0, r0
 800589e:	4669      	mov	r1, sp
 80058a0:	f003 f976 	bl	8008b90 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 80058a4:	9800      	ldr	r0, [sp, #0]
 80058a6:	f7fd fa73 	bl	8002d90 <__aeabi_f2d>
 80058aa:	0002      	movs	r2, r0
 80058ac:	000b      	movs	r3, r1
 80058ae:	4903      	ldr	r1, [pc, #12]	; (80058bc <GetReadPrecentageCommand+0x5c>)
 80058b0:	0020      	movs	r0, r4
 80058b2:	f00f faff 	bl	8014eb4 <sprintf>
 80058b6:	e7ec      	b.n	8005892 <GetReadPrecentageCommand+0x32>
 80058b8:	08019f50 	.word	0x08019f50
 80058bc:	08019f2c 	.word	0x08019f2c

080058c0 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058c0:	b510      	push	{r4, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d101      	bne.n	80058d4 <ReadVrefCommand+0x14>
 80058d0:	b672      	cpsid	i
 80058d2:	e7fe      	b.n	80058d2 <ReadVrefCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80058d4:	4669      	mov	r1, sp
 80058d6:	a801      	add	r0, sp, #4
 80058d8:	f003 f89c 	bl	8008a14 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80058dc:	a901      	add	r1, sp, #4
 80058de:	0020      	movs	r0, r4
 80058e0:	f00f fb24 	bl	8014f2c <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80058e4:	9800      	ldr	r0, [sp, #0]
 80058e6:	f7fd fa53 	bl	8002d90 <__aeabi_f2d>
 80058ea:	0002      	movs	r2, r0
 80058ec:	000b      	movs	r3, r1
 80058ee:	4903      	ldr	r1, [pc, #12]	; (80058fc <ReadVrefCommand+0x3c>)
 80058f0:	0020      	movs	r0, r4
 80058f2:	f00f fadf 	bl	8014eb4 <sprintf>
}
 80058f6:	2000      	movs	r0, #0
 80058f8:	b002      	add	sp, #8
 80058fa:	bd10      	pop	{r4, pc}
 80058fc:	08019f9c 	.word	0x08019f9c

08005900 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005900:	b510      	push	{r4, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005906:	2300      	movs	r3, #0
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800590c:	2800      	cmp	r0, #0
 800590e:	d101      	bne.n	8005914 <ReadTempCommand+0x14>
 8005910:	b672      	cpsid	i
 8005912:	e7fe      	b.n	8005912 <ReadTempCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005914:	4669      	mov	r1, sp
 8005916:	a801      	add	r0, sp, #4
 8005918:	f003 f87c 	bl	8008a14 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800591c:	a901      	add	r1, sp, #4
 800591e:	0020      	movs	r0, r4
 8005920:	f00f fb04 	bl	8014f2c <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005924:	9801      	ldr	r0, [sp, #4]
 8005926:	f7fd fa33 	bl	8002d90 <__aeabi_f2d>
 800592a:	0002      	movs	r2, r0
 800592c:	000b      	movs	r3, r1
 800592e:	4903      	ldr	r1, [pc, #12]	; (800593c <ReadTempCommand+0x3c>)
 8005930:	0020      	movs	r0, r4
 8005932:	f00f fabf 	bl	8014eb4 <sprintf>
}
 8005936:	2000      	movs	r0, #0
 8005938:	b002      	add	sp, #8
 800593a:	bd10      	pop	{r4, pc}
 800593c:	08019f68 	.word	0x08019f68

08005940 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	0004      	movs	r4, r0
 8005946:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005948:	2300      	movs	r3, #0
 800594a:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 800594c:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 800594e:	2300      	movs	r3, #0
 8005950:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005952:	2800      	cmp	r0, #0
 8005954:	d101      	bne.n	800595a <ADCReadCommand+0x1a>
 8005956:	b672      	cpsid	i
 8005958:	e7fe      	b.n	8005958 <ADCReadCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800595a:	aa03      	add	r2, sp, #12
 800595c:	2101      	movs	r1, #1
 800595e:	0030      	movs	r0, r6
 8005960:	f009 f95a 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8005964:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005966:	aa02      	add	r2, sp, #8
 8005968:	2102      	movs	r1, #2
 800596a:	0030      	movs	r0, r6
 800596c:	f009 f954 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8005970:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005972:	782b      	ldrb	r3, [r5, #0]
 8005974:	3b32      	subs	r3, #50	; 0x32
 8005976:	2b01      	cmp	r3, #1
 8005978:	d907      	bls.n	800598a <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 800597a:	2215      	movs	r2, #21
 800597c:	4919      	ldr	r1, [pc, #100]	; (80059e4 <ADCReadCommand+0xa4>)
 800597e:	0020      	movs	r0, r4
 8005980:	f00f f895 	bl	8014aae <memcpy>
}
 8005984:	2000      	movs	r0, #0
 8005986:	b004      	add	sp, #16
 8005988:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800598a:	0028      	movs	r0, r5
 800598c:	f00e fe05 	bl	801459a <atol>
 8005990:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005992:	4915      	ldr	r1, [pc, #84]	; (80059e8 <ADCReadCommand+0xa8>)
 8005994:	0030      	movs	r0, r6
 8005996:	f7fa fbb5 	bl	8000104 <strcmp>
 800599a:	2800      	cmp	r0, #0
 800599c:	d005      	beq.n	80059aa <ADCReadCommand+0x6a>
 800599e:	4913      	ldr	r1, [pc, #76]	; (80059ec <ADCReadCommand+0xac>)
 80059a0:	0030      	movs	r0, r6
 80059a2:	f7fa fbaf 	bl	8000104 <strcmp>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d116      	bne.n	80059d8 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 80059aa:	4e0f      	ldr	r6, [pc, #60]	; (80059e8 <ADCReadCommand+0xa8>)
 80059ac:	0031      	movs	r1, r6
 80059ae:	0028      	movs	r0, r5
 80059b0:	f003 f9b8 	bl	8008d24 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 80059b4:	aa01      	add	r2, sp, #4
 80059b6:	0031      	movs	r1, r6
 80059b8:	0028      	movs	r0, r5
 80059ba:	f003 f9e5 	bl	8008d88 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 80059be:	a901      	add	r1, sp, #4
 80059c0:	0020      	movs	r0, r4
 80059c2:	f00f fab3 	bl	8014f2c <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 80059c6:	9801      	ldr	r0, [sp, #4]
 80059c8:	f7fa fdfa 	bl	80005c0 <__aeabi_f2uiz>
 80059cc:	b282      	uxth	r2, r0
 80059ce:	4908      	ldr	r1, [pc, #32]	; (80059f0 <ADCReadCommand+0xb0>)
 80059d0:	0020      	movs	r0, r4
 80059d2:	f00f fa6f 	bl	8014eb4 <sprintf>
 80059d6:	e7d5      	b.n	8005984 <ADCReadCommand+0x44>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059d8:	2212      	movs	r2, #18
 80059da:	4906      	ldr	r1, [pc, #24]	; (80059f4 <ADCReadCommand+0xb4>)
 80059dc:	0020      	movs	r0, r4
 80059de:	f00f f866 	bl	8014aae <memcpy>
 80059e2:	e7cf      	b.n	8005984 <ADCReadCommand+0x44>
 80059e4:	08019f50 	.word	0x08019f50
 80059e8:	08019edc 	.word	0x08019edc
 80059ec:	08019ee0 	.word	0x08019ee0
 80059f0:	08019ee8 	.word	0x08019ee8
 80059f4:	08019ef8 	.word	0x08019ef8

080059f8 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fa:	46d6      	mov	lr, sl
 80059fc:	4647      	mov	r7, r8
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b085      	sub	sp, #20
 8005a02:	0004      	movs	r4, r0
 8005a04:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005a06:	2300      	movs	r3, #0
 8005a08:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 8005a0a:	4b64      	ldr	r3, [pc, #400]	; (8005b9c <testportCommand+0x1a4>)
 8005a0c:	781a      	ldrb	r2, [r3, #0]
 8005a0e:	ab02      	add	r3, sp, #8
 8005a10:	701a      	strb	r2, [r3, #0]
	configASSERT(pcWriteBuffer);
 8005a12:	2c00      	cmp	r4, #0
 8005a14:	d101      	bne.n	8005a1a <testportCommand+0x22>
 8005a16:	b672      	cpsid	i
 8005a18:	e7fe      	b.n	8005a18 <testportCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a1a:	aa03      	add	r2, sp, #12
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	f009 f8fb 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8005a22:	0005      	movs	r5, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005a24:	495e      	ldr	r1, [pc, #376]	; (8005ba0 <testportCommand+0x1a8>)
 8005a26:	f7fa fb6d 	bl	8000104 <strcmp>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d000      	beq.n	8005a30 <testportCommand+0x38>
 8005a2e:	e07b      	b.n	8005b28 <testportCommand+0x130>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005a30:	4b5c      	ldr	r3, [pc, #368]	; (8005ba4 <testportCommand+0x1ac>)
 8005a32:	781a      	ldrb	r2, [r3, #0]
 8005a34:	4b5c      	ldr	r3, [pc, #368]	; (8005ba8 <testportCommand+0x1b0>)
 8005a36:	189b      	adds	r3, r3, r2
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	781e      	ldrb	r6, [r3, #0]
 8005a3c:	2501      	movs	r5, #1
			if(PcPort != ports){
 8005a3e:	4b59      	ldr	r3, [pc, #356]	; (8005ba4 <testportCommand+0x1ac>)
 8005a40:	4698      	mov	r8, r3
 8005a42:	b2eb      	uxtb	r3, r5
 8005a44:	469a      	mov	sl, r3
 8005a46:	4643      	mov	r3, r8
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	4553      	cmp	r3, sl
 8005a4c:	d108      	bne.n	8005a60 <testportCommand+0x68>
 8005a4e:	3501      	adds	r5, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 8005a50:	2d06      	cmp	r5, #6
 8005a52:	d1f6      	bne.n	8005a42 <testportCommand+0x4a>
}
 8005a54:	2000      	movs	r0, #0
 8005a56:	b005      	add	sp, #20
 8005a58:	bc0c      	pop	{r2, r3}
 8005a5a:	4690      	mov	r8, r2
 8005a5c:	469a      	mov	sl, r3
 8005a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				WriteVaule[0] =rand();
 8005a60:	f00f f846 	bl	8014af0 <rand>
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005a68:	2364      	movs	r3, #100	; 0x64
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	3b5a      	subs	r3, #90	; 0x5a
 8005a6e:	2201      	movs	r2, #1
 8005a70:	0039      	movs	r1, r7
 8005a72:	4650      	mov	r0, sl
 8005a74:	f008 fe8a 	bl	800e78c <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005a78:	4650      	mov	r0, sl
 8005a7a:	f008 fe69 	bl	800e750 <GetUart>
 8005a7e:	6803      	ldr	r3, [r0, #0]
 8005a80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005a82:	783a      	ldrb	r2, [r7, #0]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d03c      	beq.n	8005b04 <testportCommand+0x10c>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005a8a:	002a      	movs	r2, r5
 8005a8c:	4947      	ldr	r1, [pc, #284]	; (8005bac <testportCommand+0x1b4>)
 8005a8e:	0020      	movs	r0, r4
 8005a90:	f00f fa10 	bl	8014eb4 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005a94:	0020      	movs	r0, r4
 8005a96:	f7fa fb3f 	bl	8000118 <strlen>
 8005a9a:	b282      	uxth	r2, r0
 8005a9c:	4b41      	ldr	r3, [pc, #260]	; (8005ba4 <testportCommand+0x1ac>)
 8005a9e:	7818      	ldrb	r0, [r3, #0]
 8005aa0:	2364      	movs	r3, #100	; 0x64
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	3b5a      	subs	r3, #90	; 0x5a
 8005aa6:	0021      	movs	r1, r4
 8005aa8:	f008 fe70 	bl	800e78c <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005aac:	2254      	movs	r2, #84	; 0x54
 8005aae:	4940      	ldr	r1, [pc, #256]	; (8005bb0 <testportCommand+0x1b8>)
 8005ab0:	0020      	movs	r0, r4
 8005ab2:	f00e fffc 	bl	8014aae <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005ab6:	0020      	movs	r0, r4
 8005ab8:	f7fa fb2e 	bl	8000118 <strlen>
 8005abc:	b282      	uxth	r2, r0
 8005abe:	4b39      	ldr	r3, [pc, #228]	; (8005ba4 <testportCommand+0x1ac>)
 8005ac0:	7818      	ldrb	r0, [r3, #0]
 8005ac2:	2364      	movs	r3, #100	; 0x64
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	3b5a      	subs	r3, #90	; 0x5a
 8005ac8:	0021      	movs	r1, r4
 8005aca:	f008 fe5f 	bl	800e78c <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005ace:	3601      	adds	r6, #1
 8005ad0:	4b34      	ldr	r3, [pc, #208]	; (8005ba4 <testportCommand+0x1ac>)
 8005ad2:	781a      	ldrb	r2, [r3, #0]
 8005ad4:	3a01      	subs	r2, #1
 8005ad6:	0053      	lsls	r3, r2, #1
 8005ad8:	189b      	adds	r3, r3, r2
 8005ada:	019b      	lsls	r3, r3, #6
 8005adc:	4a35      	ldr	r2, [pc, #212]	; (8005bb4 <testportCommand+0x1bc>)
 8005ade:	18d3      	adds	r3, r2, r3
 8005ae0:	5d9b      	ldrb	r3, [r3, r6]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1b3      	bne.n	8005a4e <testportCommand+0x56>
 8005ae6:	4692      	mov	sl, r2
 8005ae8:	4f2e      	ldr	r7, [pc, #184]	; (8005ba4 <testportCommand+0x1ac>)
					Delay_ms(1);
 8005aea:	2001      	movs	r0, #1
 8005aec:	f00a ffb2 	bl	8010a54 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005af0:	783a      	ldrb	r2, [r7, #0]
 8005af2:	3a01      	subs	r2, #1
 8005af4:	0053      	lsls	r3, r2, #1
 8005af6:	189b      	adds	r3, r3, r2
 8005af8:	019b      	lsls	r3, r3, #6
 8005afa:	4453      	add	r3, sl
 8005afc:	5d9b      	ldrb	r3, [r3, r6]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0f3      	beq.n	8005aea <testportCommand+0xf2>
 8005b02:	e7a4      	b.n	8005a4e <testportCommand+0x56>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005b04:	002a      	movs	r2, r5
 8005b06:	492c      	ldr	r1, [pc, #176]	; (8005bb8 <testportCommand+0x1c0>)
 8005b08:	0020      	movs	r0, r4
 8005b0a:	f00f f9d3 	bl	8014eb4 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005b0e:	0020      	movs	r0, r4
 8005b10:	f7fa fb02 	bl	8000118 <strlen>
 8005b14:	b282      	uxth	r2, r0
 8005b16:	4b23      	ldr	r3, [pc, #140]	; (8005ba4 <testportCommand+0x1ac>)
 8005b18:	7818      	ldrb	r0, [r3, #0]
 8005b1a:	2364      	movs	r3, #100	; 0x64
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	3b5a      	subs	r3, #90	; 0x5a
 8005b20:	0021      	movs	r1, r4
 8005b22:	f008 fe33 	bl	800e78c <writePxMutex>
 8005b26:	e7c1      	b.n	8005aac <testportCommand+0xb4>
	else if(pcParameterString1[0] == 'p'){
 8005b28:	2300      	movs	r3, #0
 8005b2a:	56eb      	ldrsb	r3, [r5, r3]
 8005b2c:	2b70      	cmp	r3, #112	; 0x70
 8005b2e:	d005      	beq.n	8005b3c <testportCommand+0x144>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b30:	220f      	movs	r2, #15
 8005b32:	4922      	ldr	r1, [pc, #136]	; (8005bbc <testportCommand+0x1c4>)
 8005b34:	0020      	movs	r0, r4
 8005b36:	f00e ffba 	bl	8014aae <memcpy>
 8005b3a:	e78b      	b.n	8005a54 <testportCommand+0x5c>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005b3c:	1c68      	adds	r0, r5, #1
 8005b3e:	f00e fd2c 	bl	801459a <atol>
 8005b42:	0005      	movs	r5, r0
 8005b44:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005b46:	1e7b      	subs	r3, r7, #1
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d820      	bhi.n	8005b8e <testportCommand+0x196>
				WriteVaule[0] =rand();
 8005b4c:	f00e ffd0 	bl	8014af0 <rand>
 8005b50:	ae02      	add	r6, sp, #8
 8005b52:	7030      	strb	r0, [r6, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005b54:	2364      	movs	r3, #100	; 0x64
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	3b32      	subs	r3, #50	; 0x32
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	0031      	movs	r1, r6
 8005b5e:	0038      	movs	r0, r7
 8005b60:	f008 fe14 	bl	800e78c <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005b64:	0038      	movs	r0, r7
 8005b66:	f008 fdf3 	bl	800e750 <GetUart>
 8005b6a:	6803      	ldr	r3, [r0, #0]
 8005b6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 8005b6e:	7832      	ldrb	r2, [r6, #0]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d105      	bne.n	8005b82 <testportCommand+0x18a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005b76:	b2ea      	uxtb	r2, r5
 8005b78:	490f      	ldr	r1, [pc, #60]	; (8005bb8 <testportCommand+0x1c0>)
 8005b7a:	0020      	movs	r0, r4
 8005b7c:	f00f f99a 	bl	8014eb4 <sprintf>
 8005b80:	e768      	b.n	8005a54 <testportCommand+0x5c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005b82:	b2ea      	uxtb	r2, r5
 8005b84:	4909      	ldr	r1, [pc, #36]	; (8005bac <testportCommand+0x1b4>)
 8005b86:	0020      	movs	r0, r4
 8005b88:	f00f f994 	bl	8014eb4 <sprintf>
 8005b8c:	e762      	b.n	8005a54 <testportCommand+0x5c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005b8e:	221b      	movs	r2, #27
 8005b90:	490b      	ldr	r1, [pc, #44]	; (8005bc0 <testportCommand+0x1c8>)
 8005b92:	0020      	movs	r0, r4
 8005b94:	f00e ff8b 	bl	8014aae <memcpy>
	return pdFALSE;
 8005b98:	e75c      	b.n	8005a54 <testportCommand+0x5c>
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	080192b0 	.word	0x080192b0
 8005ba0:	0801968c 	.word	0x0801968c
 8005ba4:	20000a88 	.word	0x20000a88
 8005ba8:	20001668 	.word	0x20001668
 8005bac:	0801bb64 	.word	0x0801bb64
 8005bb0:	0801bb78 	.word	0x0801bb78
 8005bb4:	200012a8 	.word	0x200012a8
 8005bb8:	0801bb48 	.word	0x0801bb48
 8005bbc:	0801bbcc 	.word	0x0801bbcc
 8005bc0:	0801bbdc 	.word	0x0801bbdc

08005bc4 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	0004      	movs	r4, r0
 8005bca:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d101      	bne.n	8005bda <unbridgeCommand+0x16>
 8005bd6:	b672      	cpsid	i
 8005bd8:	e7fe      	b.n	8005bd8 <unbridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bda:	aa01      	add	r2, sp, #4
 8005bdc:	2101      	movs	r1, #1
 8005bde:	0028      	movs	r0, r5
 8005be0:	f009 f81a 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005be4:	2300      	movs	r3, #0
 8005be6:	56c3      	ldrsb	r3, [r0, r3]
 8005be8:	2b70      	cmp	r3, #112	; 0x70
 8005bea:	d00e      	beq.n	8005c0a <unbridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005bec:	466a      	mov	r2, sp
 8005bee:	2102      	movs	r1, #2
 8005bf0:	0028      	movs	r0, r5
 8005bf2:	f009 f811 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	56c3      	ldrsb	r3, [r0, r3]
 8005bfa:	2b70      	cmp	r3, #112	; 0x70
 8005bfc:	d01e      	beq.n	8005c3c <unbridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005bfe:	220f      	movs	r2, #15
 8005c00:	491a      	ldr	r1, [pc, #104]	; (8005c6c <unbridgeCommand+0xa8>)
 8005c02:	0020      	movs	r0, r4
 8005c04:	f00e ff53 	bl	8014aae <memcpy>
 8005c08:	e015      	b.n	8005c36 <unbridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f00e fcc5 	bl	801459a <atol>
 8005c10:	0006      	movs	r6, r0
 8005c12:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005c14:	466a      	mov	r2, sp
 8005c16:	2102      	movs	r1, #2
 8005c18:	0028      	movs	r0, r5
 8005c1a:	f008 fffd 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005c1e:	2300      	movs	r3, #0
 8005c20:	56c3      	ldrsb	r3, [r0, r3]
 8005c22:	2b70      	cmp	r3, #112	; 0x70
 8005c24:	d00e      	beq.n	8005c44 <unbridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 8005c26:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005c28:	2867      	cmp	r0, #103	; 0x67
 8005c2a:	d0e8      	beq.n	8005bfe <unbridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005c2c:	2219      	movs	r2, #25
 8005c2e:	4910      	ldr	r1, [pc, #64]	; (8005c70 <unbridgeCommand+0xac>)
 8005c30:	0020      	movs	r0, r4
 8005c32:	f00e ff3c 	bl	8014aae <memcpy>
}
 8005c36:	2000      	movs	r0, #0
 8005c38:	b003      	add	sp, #12
 8005c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	f00e fcac 	bl	801459a <atol>
 8005c42:	e7dc      	b.n	8005bfe <unbridgeCommand+0x3a>
 8005c44:	3001      	adds	r0, #1
 8005c46:	f00e fca8 	bl	801459a <atol>
 8005c4a:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 8005c4c:	b2c1      	uxtb	r1, r0
 8005c4e:	0038      	movs	r0, r7
 8005c50:	f7fe fea6 	bl	80049a0 <Unbridge>
	if(result == BOS_OK)
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d1e7      	bne.n	8005c28 <unbridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005c58:	22ff      	movs	r2, #255	; 0xff
 8005c5a:	002b      	movs	r3, r5
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	4032      	ands	r2, r6
 8005c60:	4904      	ldr	r1, [pc, #16]	; (8005c74 <unbridgeCommand+0xb0>)
 8005c62:	0020      	movs	r0, r4
 8005c64:	f00f f926 	bl	8014eb4 <sprintf>
 8005c68:	e7e5      	b.n	8005c36 <unbridgeCommand+0x72>
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	0801bbcc 	.word	0x0801bbcc
 8005c70:	0801bc94 	.word	0x0801bc94
 8005c74:	0801bc74 	.word	0x0801bc74

08005c78 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	0004      	movs	r4, r0
 8005c7e:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	9301      	str	r3, [sp, #4]
 8005c84:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d101      	bne.n	8005c8e <bridgeCommand+0x16>
 8005c8a:	b672      	cpsid	i
 8005c8c:	e7fe      	b.n	8005c8c <bridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c8e:	aa01      	add	r2, sp, #4
 8005c90:	2101      	movs	r1, #1
 8005c92:	0028      	movs	r0, r5
 8005c94:	f008 ffc0 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005c98:	2300      	movs	r3, #0
 8005c9a:	56c3      	ldrsb	r3, [r0, r3]
 8005c9c:	2b70      	cmp	r3, #112	; 0x70
 8005c9e:	d00e      	beq.n	8005cbe <bridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005ca0:	466a      	mov	r2, sp
 8005ca2:	2102      	movs	r1, #2
 8005ca4:	0028      	movs	r0, r5
 8005ca6:	f008 ffb7 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005caa:	2300      	movs	r3, #0
 8005cac:	56c3      	ldrsb	r3, [r0, r3]
 8005cae:	2b70      	cmp	r3, #112	; 0x70
 8005cb0:	d01e      	beq.n	8005cf0 <bridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005cb2:	220f      	movs	r2, #15
 8005cb4:	491a      	ldr	r1, [pc, #104]	; (8005d20 <bridgeCommand+0xa8>)
 8005cb6:	0020      	movs	r0, r4
 8005cb8:	f00e fef9 	bl	8014aae <memcpy>
 8005cbc:	e015      	b.n	8005cea <bridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	f00e fc6b 	bl	801459a <atol>
 8005cc4:	0006      	movs	r6, r0
 8005cc6:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005cc8:	466a      	mov	r2, sp
 8005cca:	2102      	movs	r1, #2
 8005ccc:	0028      	movs	r0, r5
 8005cce:	f008 ffa3 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	56c3      	ldrsb	r3, [r0, r3]
 8005cd6:	2b70      	cmp	r3, #112	; 0x70
 8005cd8:	d00e      	beq.n	8005cf8 <bridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 8005cda:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005cdc:	2867      	cmp	r0, #103	; 0x67
 8005cde:	d0e8      	beq.n	8005cb2 <bridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005ce0:	2217      	movs	r2, #23
 8005ce2:	4910      	ldr	r1, [pc, #64]	; (8005d24 <bridgeCommand+0xac>)
 8005ce4:	0020      	movs	r0, r4
 8005ce6:	f00e fee2 	bl	8014aae <memcpy>
}
 8005cea:	2000      	movs	r0, #0
 8005cec:	b003      	add	sp, #12
 8005cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	f00e fc52 	bl	801459a <atol>
 8005cf6:	e7dc      	b.n	8005cb2 <bridgeCommand+0x3a>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	f00e fc4e 	bl	801459a <atol>
 8005cfe:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 8005d00:	b2c1      	uxtb	r1, r0
 8005d02:	0038      	movs	r0, r7
 8005d04:	f7fe fe38 	bl	8004978 <Bridge>
	if(result == BOS_OK)
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d1e7      	bne.n	8005cdc <bridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005d0c:	22ff      	movs	r2, #255	; 0xff
 8005d0e:	002b      	movs	r3, r5
 8005d10:	4013      	ands	r3, r2
 8005d12:	4032      	ands	r2, r6
 8005d14:	4904      	ldr	r1, [pc, #16]	; (8005d28 <bridgeCommand+0xb0>)
 8005d16:	0020      	movs	r0, r4
 8005d18:	f00f f8cc 	bl	8014eb4 <sprintf>
 8005d1c:	e7e5      	b.n	8005cea <bridgeCommand+0x72>
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	0801bbcc 	.word	0x0801bbcc
 8005d24:	0801a0f0 	.word	0x0801a0f0
 8005d28:	0801a0cc 	.word	0x0801a0cc

08005d2c <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	0005      	movs	r5, r0
 8005d32:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005d38:	2d00      	cmp	r5, #0
 8005d3a:	d101      	bne.n	8005d40 <delSnipCommand+0x14>
 8005d3c:	b672      	cpsid	i
 8005d3e:	e7fe      	b.n	8005d3e <delSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d40:	aa03      	add	r2, sp, #12
 8005d42:	2101      	movs	r1, #1
 8005d44:	f008 ff68 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005d48:	f00e fc21 	bl	801458e <atoi>
 8005d4c:	9001      	str	r0, [sp, #4]
 8005d4e:	b2c6      	uxtb	r6, r0
	if(!index || index > numOfRecordedSnippets)
 8005d50:	2e00      	cmp	r6, #0
 8005d52:	d003      	beq.n	8005d5c <delSnipCommand+0x30>
 8005d54:	4b27      	ldr	r3, [pc, #156]	; (8005df4 <delSnipCommand+0xc8>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	42b3      	cmp	r3, r6
 8005d5a:	d207      	bcs.n	8005d6c <delSnipCommand+0x40>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005d5c:	2223      	movs	r2, #35	; 0x23
 8005d5e:	4926      	ldr	r1, [pc, #152]	; (8005df8 <delSnipCommand+0xcc>)
 8005d60:	0028      	movs	r0, r5
 8005d62:	f00e fea4 	bl	8014aae <memcpy>
}
 8005d66:	2000      	movs	r0, #0
 8005d68:	b005      	add	sp, #20
 8005d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005d6c:	466b      	mov	r3, sp
 8005d6e:	791a      	ldrb	r2, [r3, #4]
 8005d70:	3a01      	subs	r2, #1
 8005d72:	4822      	ldr	r0, [pc, #136]	; (8005dfc <delSnipCommand+0xd0>)
 8005d74:	2314      	movs	r3, #20
 8005d76:	4353      	muls	r3, r2
 8005d78:	2700      	movs	r7, #0
 8005d7a:	541f      	strb	r7, [r3, r0]
		snippets[index - 1].cond.mathOperator =0;
 8005d7c:	18c4      	adds	r4, r0, r3
 8005d7e:	7067      	strb	r7, [r4, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005d80:	3302      	adds	r3, #2
 8005d82:	1818      	adds	r0, r3, r0
 8005d84:	2204      	movs	r2, #4
 8005d86:	0039      	movs	r1, r7
 8005d88:	f00e fe9a 	bl	8014ac0 <memset>
		snippets[index - 1].state = false;
 8005d8c:	7427      	strb	r7, [r4, #16]
		free(snippets[index - 1].cmd);
 8005d8e:	68e0      	ldr	r0, [r4, #12]
 8005d90:	f00e fc4a 	bl	8014628 <free>
		snippets[index - 1].cmd = NULL;
 8005d94:	60e7      	str	r7, [r4, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005d96:	4b17      	ldr	r3, [pc, #92]	; (8005df4 <delSnipCommand+0xc8>)
 8005d98:	781f      	ldrb	r7, [r3, #0]
 8005d9a:	42be      	cmp	r6, r7
 8005d9c:	d213      	bcs.n	8005dc6 <delSnipCommand+0x9a>
 8005d9e:	466b      	mov	r3, sp
 8005da0:	7919      	ldrb	r1, [r3, #4]
 8005da2:	2214      	movs	r2, #20
 8005da4:	0014      	movs	r4, r2
 8005da6:	434c      	muls	r4, r1
 8005da8:	4814      	ldr	r0, [pc, #80]	; (8005dfc <delSnipCommand+0xd0>)
 8005daa:	1824      	adds	r4, r4, r0
 8005dac:	1e7b      	subs	r3, r7, #1
 8005dae:	1b9b      	subs	r3, r3, r6
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	185b      	adds	r3, r3, r1
 8005db4:	4353      	muls	r3, r2
 8005db6:	1880      	adds	r0, r0, r2
 8005db8:	181e      	adds	r6, r3, r0
			if(snippets[s].cond.conditionType){
 8005dba:	7823      	ldrb	r3, [r4, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10d      	bne.n	8005ddc <delSnipCommand+0xb0>
 8005dc0:	3414      	adds	r4, #20
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005dc2:	42b4      	cmp	r4, r6
 8005dc4:	d1f9      	bne.n	8005dba <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 8005dc6:	1e7b      	subs	r3, r7, #1
 8005dc8:	4a0a      	ldr	r2, [pc, #40]	; (8005df4 <delSnipCommand+0xc8>)
 8005dca:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005dcc:	f005 fea4 	bl	800bb18 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005dd0:	2236      	movs	r2, #54	; 0x36
 8005dd2:	490b      	ldr	r1, [pc, #44]	; (8005e00 <delSnipCommand+0xd4>)
 8005dd4:	0028      	movs	r0, r5
 8005dd6:	f00e fe6a 	bl	8014aae <memcpy>
 8005dda:	e7c4      	b.n	8005d66 <delSnipCommand+0x3a>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005ddc:	2214      	movs	r2, #20
 8005dde:	0021      	movs	r1, r4
 8005de0:	0020      	movs	r0, r4
 8005de2:	3814      	subs	r0, #20
 8005de4:	f00e fe63 	bl	8014aae <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005de8:	2214      	movs	r2, #20
 8005dea:	2100      	movs	r1, #0
 8005dec:	0020      	movs	r0, r4
 8005dee:	f00e fe67 	bl	8014ac0 <memset>
 8005df2:	e7e5      	b.n	8005dc0 <delSnipCommand+0x94>
 8005df4:	200011f7 	.word	0x200011f7
 8005df8:	0801a210 	.word	0x0801a210
 8005dfc:	20006c10 	.word	0x20006c10
 8005e00:	0801a1d8 	.word	0x0801a1d8

08005e04 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e04:	b510      	push	{r4, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	0004      	movs	r4, r0
 8005e0a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005e10:	2c00      	cmp	r4, #0
 8005e12:	d101      	bne.n	8005e18 <pauseSnipCommand+0x14>
 8005e14:	b672      	cpsid	i
 8005e16:	e7fe      	b.n	8005e16 <pauseSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e18:	aa01      	add	r2, sp, #4
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	f008 fefc 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005e20:	f00e fbb5 	bl	801458e <atoi>
 8005e24:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <pauseSnipCommand+0x2e>
 8005e2a:	4a0e      	ldr	r2, [pc, #56]	; (8005e64 <pauseSnipCommand+0x60>)
 8005e2c:	7812      	ldrb	r2, [r2, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d207      	bcs.n	8005e42 <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005e32:	2223      	movs	r2, #35	; 0x23
 8005e34:	490c      	ldr	r1, [pc, #48]	; (8005e68 <pauseSnipCommand+0x64>)
 8005e36:	0020      	movs	r0, r4
 8005e38:	f00e fe39 	bl	8014aae <memcpy>
}
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	b002      	add	sp, #8
 8005e40:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005e42:	b2c0      	uxtb	r0, r0
 8005e44:	3801      	subs	r0, #1
 8005e46:	2314      	movs	r3, #20
 8005e48:	4343      	muls	r3, r0
 8005e4a:	4808      	ldr	r0, [pc, #32]	; (8005e6c <pauseSnipCommand+0x68>)
 8005e4c:	18c0      	adds	r0, r0, r3
 8005e4e:	2300      	movs	r3, #0
 8005e50:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005e52:	f005 fe61 	bl	800bb18 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005e56:	2235      	movs	r2, #53	; 0x35
 8005e58:	4905      	ldr	r1, [pc, #20]	; (8005e70 <pauseSnipCommand+0x6c>)
 8005e5a:	0020      	movs	r0, r4
 8005e5c:	f00e fe27 	bl	8014aae <memcpy>
 8005e60:	e7ec      	b.n	8005e3c <pauseSnipCommand+0x38>
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	200011f7 	.word	0x200011f7
 8005e68:	0801a210 	.word	0x0801a210
 8005e6c:	20006c10 	.word	0x20006c10
 8005e70:	0801a620 	.word	0x0801a620

08005e74 <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e74:	b510      	push	{r4, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	0004      	movs	r4, r0
 8005e7a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005e80:	2c00      	cmp	r4, #0
 8005e82:	d101      	bne.n	8005e88 <actSnipCommand+0x14>
 8005e84:	b672      	cpsid	i
 8005e86:	e7fe      	b.n	8005e86 <actSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e88:	aa01      	add	r2, sp, #4
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	f008 fec4 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005e90:	f00e fb7d 	bl	801458e <atoi>
 8005e94:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <actSnipCommand+0x2e>
 8005e9a:	4a0e      	ldr	r2, [pc, #56]	; (8005ed4 <actSnipCommand+0x60>)
 8005e9c:	7812      	ldrb	r2, [r2, #0]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d207      	bcs.n	8005eb2 <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005ea2:	2223      	movs	r2, #35	; 0x23
 8005ea4:	490c      	ldr	r1, [pc, #48]	; (8005ed8 <actSnipCommand+0x64>)
 8005ea6:	0020      	movs	r0, r4
 8005ea8:	f00e fe01 	bl	8014aae <memcpy>
}
 8005eac:	2000      	movs	r0, #0
 8005eae:	b002      	add	sp, #8
 8005eb0:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005eb2:	b2c0      	uxtb	r0, r0
 8005eb4:	3801      	subs	r0, #1
 8005eb6:	2314      	movs	r3, #20
 8005eb8:	4343      	muls	r3, r0
 8005eba:	4808      	ldr	r0, [pc, #32]	; (8005edc <actSnipCommand+0x68>)
 8005ebc:	18c0      	adds	r0, r0, r3
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005ec2:	f005 fe29 	bl	800bb18 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005ec6:	2238      	movs	r2, #56	; 0x38
 8005ec8:	4905      	ldr	r1, [pc, #20]	; (8005ee0 <actSnipCommand+0x6c>)
 8005eca:	0020      	movs	r0, r4
 8005ecc:	f00e fdef 	bl	8014aae <memcpy>
 8005ed0:	e7ec      	b.n	8005eac <actSnipCommand+0x38>
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	200011f7 	.word	0x200011f7
 8005ed8:	0801a210 	.word	0x0801a210
 8005edc:	20006c10 	.word	0x20006c10
 8005ee0:	08019fd4 	.word	0x08019fd4

08005ee4 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee6:	46d6      	mov	lr, sl
 8005ee8:	464f      	mov	r7, r9
 8005eea:	4646      	mov	r6, r8
 8005eec:	b5c0      	push	{r6, r7, lr}
 8005eee:	b08a      	sub	sp, #40	; 0x28
 8005ef0:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005ef2:	aa06      	add	r2, sp, #24
 8005ef4:	4b7a      	ldr	r3, [pc, #488]	; (80060e0 <snipCommand+0x1fc>)
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005efa:	c223      	stmia	r2!, {r0, r1, r5}
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005f00:	2c00      	cmp	r4, #0
 8005f02:	d101      	bne.n	8005f08 <snipCommand+0x24>
 8005f04:	b672      	cpsid	i
 8005f06:	e7fe      	b.n	8005f06 <snipCommand+0x22>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005f08:	4b76      	ldr	r3, [pc, #472]	; (80060e4 <snipCommand+0x200>)
 8005f0a:	7818      	ldrb	r0, [r3, #0]
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	425b      	negs	r3, r3
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	3333      	adds	r3, #51	; 0x33
 8005f14:	2237      	movs	r2, #55	; 0x37
 8005f16:	4974      	ldr	r1, [pc, #464]	; (80060e8 <snipCommand+0x204>)
 8005f18:	f008 fc38 	bl	800e78c <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005f1c:	4b73      	ldr	r3, [pc, #460]	; (80060ec <snipCommand+0x208>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d100      	bne.n	8005f26 <snipCommand+0x42>
 8005f24:	e0d0      	b.n	80060c8 <snipCommand+0x1e4>
 8005f26:	2500      	movs	r5, #0
		if(snippets[s].cond.conditionType)
 8005f28:	4b71      	ldr	r3, [pc, #452]	; (80060f0 <snipCommand+0x20c>)
 8005f2a:	4698      	mov	r8, r3
 8005f2c:	e0ba      	b.n	80060a4 <snipCommand+0x1c0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005f2e:	4b70      	ldr	r3, [pc, #448]	; (80060f0 <snipCommand+0x20c>)
 8005f30:	4699      	mov	r9, r3
 8005f32:	00ab      	lsls	r3, r5, #2
 8005f34:	469a      	mov	sl, r3
 8005f36:	195b      	adds	r3, r3, r5
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	444b      	add	r3, r9
 8005f3c:	7c1a      	ldrb	r2, [r3, #16]
 8005f3e:	00d3      	lsls	r3, r2, #3
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	aa06      	add	r2, sp, #24
 8005f44:	4694      	mov	ip, r2
 8005f46:	4463      	add	r3, ip
 8005f48:	003a      	movs	r2, r7
 8005f4a:	496a      	ldr	r1, [pc, #424]	; (80060f4 <snipCommand+0x210>)
 8005f4c:	0020      	movs	r0, r4
 8005f4e:	f00e ffb1 	bl	8014eb4 <sprintf>
		switch(snippets[s].cond.conditionType){
 8005f52:	4653      	mov	r3, sl
 8005f54:	195b      	adds	r3, r3, r5
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	464a      	mov	r2, r9
 8005f5a:	5c9b      	ldrb	r3, [r3, r2]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d02d      	beq.n	8005fbc <snipCommand+0xd8>
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d000      	beq.n	8005f66 <snipCommand+0x82>
 8005f64:	e0a9      	b.n	80060ba <snipCommand+0x1d6>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005f66:	00a9      	lsls	r1, r5, #2
 8005f68:	1949      	adds	r1, r1, r5
 8005f6a:	0089      	lsls	r1, r1, #2
 8005f6c:	3106      	adds	r1, #6
 8005f6e:	4b60      	ldr	r3, [pc, #384]	; (80060f0 <snipCommand+0x20c>)
 8005f70:	4699      	mov	r9, r3
 8005f72:	4449      	add	r1, r9
 8005f74:	2204      	movs	r2, #4
 8005f76:	a805      	add	r0, sp, #20
 8005f78:	f00e fd99 	bl	8014aae <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005f7c:	00ad      	lsls	r5, r5, #2
 8005f7e:	19ad      	adds	r5, r5, r6
 8005f80:	00ad      	lsls	r5, r5, #2
 8005f82:	444d      	add	r5, r9
 8005f84:	78ea      	ldrb	r2, [r5, #3]
 8005f86:	3a01      	subs	r2, #1
 8005f88:	0053      	lsls	r3, r2, #1
 8005f8a:	189b      	adds	r3, r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4a5a      	ldr	r2, [pc, #360]	; (80060f8 <snipCommand+0x214>)
 8005f90:	18d3      	adds	r3, r2, r3
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	4699      	mov	r9, r3
 8005f96:	9805      	ldr	r0, [sp, #20]
 8005f98:	f7fc fefa 	bl	8002d90 <__aeabi_f2d>
 8005f9c:	9002      	str	r0, [sp, #8]
 8005f9e:	9103      	str	r1, [sp, #12]
 8005fa0:	786b      	ldrb	r3, [r5, #1]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	005a      	lsls	r2, r3, #1
 8005fa6:	18d2      	adds	r2, r2, r3
 8005fa8:	4b54      	ldr	r3, [pc, #336]	; (80060fc <snipCommand+0x218>)
 8005faa:	189b      	adds	r3, r3, r2
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	464b      	mov	r3, r9
 8005fb0:	0022      	movs	r2, r4
 8005fb2:	4953      	ldr	r1, [pc, #332]	; (8006100 <snipCommand+0x21c>)
 8005fb4:	0020      	movs	r0, r4
 8005fb6:	f00e ff7d 	bl	8014eb4 <sprintf>
				break;
 8005fba:	e07e      	b.n	80060ba <snipCommand+0x1d6>
				switch(snippets[s].cond.buffer1[1]){
 8005fbc:	00ab      	lsls	r3, r5, #2
 8005fbe:	195b      	adds	r3, r3, r5
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4a4b      	ldr	r2, [pc, #300]	; (80060f0 <snipCommand+0x20c>)
 8005fc4:	18d3      	adds	r3, r2, r3
 8005fc6:	78db      	ldrb	r3, [r3, #3]
 8005fc8:	3b05      	subs	r3, #5
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	2a09      	cmp	r2, #9
 8005fce:	d874      	bhi.n	80060ba <snipCommand+0x1d6>
 8005fd0:	0093      	lsls	r3, r2, #2
 8005fd2:	4a4c      	ldr	r2, [pc, #304]	; (8006104 <snipCommand+0x220>)
 8005fd4:	58d3      	ldr	r3, [r2, r3]
 8005fd6:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005fd8:	2314      	movs	r3, #20
 8005fda:	436b      	muls	r3, r5
 8005fdc:	4a44      	ldr	r2, [pc, #272]	; (80060f0 <snipCommand+0x20c>)
 8005fde:	18d2      	adds	r2, r2, r3
 8005fe0:	7893      	ldrb	r3, [r2, #2]
 8005fe2:	68d2      	ldr	r2, [r2, #12]
 8005fe4:	9200      	str	r2, [sp, #0]
 8005fe6:	0022      	movs	r2, r4
 8005fe8:	4947      	ldr	r1, [pc, #284]	; (8006108 <snipCommand+0x224>)
 8005fea:	0020      	movs	r0, r4
 8005fec:	f00e ff62 	bl	8014eb4 <sprintf>
						break;
 8005ff0:	e063      	b.n	80060ba <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005ff2:	2314      	movs	r3, #20
 8005ff4:	436b      	muls	r3, r5
 8005ff6:	4a3e      	ldr	r2, [pc, #248]	; (80060f0 <snipCommand+0x20c>)
 8005ff8:	18d2      	adds	r2, r2, r3
 8005ffa:	7893      	ldrb	r3, [r2, #2]
 8005ffc:	68d2      	ldr	r2, [r2, #12]
 8005ffe:	9200      	str	r2, [sp, #0]
 8006000:	0022      	movs	r2, r4
 8006002:	4942      	ldr	r1, [pc, #264]	; (800610c <snipCommand+0x228>)
 8006004:	0020      	movs	r0, r4
 8006006:	f00e ff55 	bl	8014eb4 <sprintf>
						break;
 800600a:	e056      	b.n	80060ba <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 800600c:	2314      	movs	r3, #20
 800600e:	436b      	muls	r3, r5
 8006010:	4a37      	ldr	r2, [pc, #220]	; (80060f0 <snipCommand+0x20c>)
 8006012:	18d2      	adds	r2, r2, r3
 8006014:	7893      	ldrb	r3, [r2, #2]
 8006016:	68d1      	ldr	r1, [r2, #12]
 8006018:	9101      	str	r1, [sp, #4]
 800601a:	7912      	ldrb	r2, [r2, #4]
 800601c:	9200      	str	r2, [sp, #0]
 800601e:	0022      	movs	r2, r4
 8006020:	493b      	ldr	r1, [pc, #236]	; (8006110 <snipCommand+0x22c>)
 8006022:	0020      	movs	r0, r4
 8006024:	f00e ff46 	bl	8014eb4 <sprintf>
						break;
 8006028:	e047      	b.n	80060ba <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 800602a:	2314      	movs	r3, #20
 800602c:	436b      	muls	r3, r5
 800602e:	4a30      	ldr	r2, [pc, #192]	; (80060f0 <snipCommand+0x20c>)
 8006030:	18d2      	adds	r2, r2, r3
 8006032:	7893      	ldrb	r3, [r2, #2]
 8006034:	68d1      	ldr	r1, [r2, #12]
 8006036:	9101      	str	r1, [sp, #4]
 8006038:	7912      	ldrb	r2, [r2, #4]
 800603a:	9200      	str	r2, [sp, #0]
 800603c:	0022      	movs	r2, r4
 800603e:	4935      	ldr	r1, [pc, #212]	; (8006114 <snipCommand+0x230>)
 8006040:	0020      	movs	r0, r4
 8006042:	f00e ff37 	bl	8014eb4 <sprintf>
						break;
 8006046:	e038      	b.n	80060ba <snipCommand+0x1d6>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8006048:	4b33      	ldr	r3, [pc, #204]	; (8006118 <snipCommand+0x234>)
 800604a:	0022      	movs	r2, r4
 800604c:	4933      	ldr	r1, [pc, #204]	; (800611c <snipCommand+0x238>)
 800604e:	0020      	movs	r0, r4
 8006050:	f00e ff30 	bl	8014eb4 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8006054:	4830      	ldr	r0, [pc, #192]	; (8006118 <snipCommand+0x234>)
 8006056:	f7fa f85f 	bl	8000118 <strlen>
 800605a:	0002      	movs	r2, r0
 800605c:	2100      	movs	r1, #0
 800605e:	482e      	ldr	r0, [pc, #184]	; (8006118 <snipCommand+0x234>)
 8006060:	f00e fd2e 	bl	8014ac0 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8006064:	0029      	movs	r1, r5
 8006066:	68f0      	ldr	r0, [r6, #12]
 8006068:	f7ff fa90 	bl	800558c <ParseSnippetCommand>
 800606c:	2800      	cmp	r0, #0
 800606e:	d1eb      	bne.n	8006048 <snipCommand+0x164>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8006070:	0020      	movs	r0, r4
 8006072:	f7fa f851 	bl	8000118 <strlen>
 8006076:	1820      	adds	r0, r4, r0
 8006078:	220c      	movs	r2, #12
 800607a:	4929      	ldr	r1, [pc, #164]	; (8006120 <snipCommand+0x23c>)
 800607c:	f00e fd17 	bl	8014aae <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006080:	0020      	movs	r0, r4
 8006082:	f7fa f849 	bl	8000118 <strlen>
 8006086:	b282      	uxth	r2, r0
 8006088:	4b16      	ldr	r3, [pc, #88]	; (80060e4 <snipCommand+0x200>)
 800608a:	7818      	ldrb	r0, [r3, #0]
 800608c:	2301      	movs	r3, #1
 800608e:	425b      	negs	r3, r3
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	3333      	adds	r3, #51	; 0x33
 8006094:	0021      	movs	r1, r4
 8006096:	f008 fb79 	bl	800e78c <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 800609a:	003d      	movs	r5, r7
 800609c:	4b13      	ldr	r3, [pc, #76]	; (80060ec <snipCommand+0x208>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	42bb      	cmp	r3, r7
 80060a2:	d911      	bls.n	80060c8 <snipCommand+0x1e4>
 80060a4:	1c6f      	adds	r7, r5, #1
 80060a6:	b2ff      	uxtb	r7, r7
		if(snippets[s].cond.conditionType)
 80060a8:	002e      	movs	r6, r5
 80060aa:	00ab      	lsls	r3, r5, #2
 80060ac:	195b      	adds	r3, r3, r5
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4642      	mov	r2, r8
 80060b2:	5c9b      	ldrb	r3, [r3, r2]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d000      	beq.n	80060ba <snipCommand+0x1d6>
 80060b8:	e739      	b.n	8005f2e <snipCommand+0x4a>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 80060ba:	4d17      	ldr	r5, [pc, #92]	; (8006118 <snipCommand+0x234>)
 80060bc:	00b3      	lsls	r3, r6, #2
 80060be:	199b      	adds	r3, r3, r6
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4e0b      	ldr	r6, [pc, #44]	; (80060f0 <snipCommand+0x20c>)
 80060c4:	18f6      	adds	r6, r6, r3
 80060c6:	e7cd      	b.n	8006064 <snipCommand+0x180>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 80060c8:	22b5      	movs	r2, #181	; 0xb5
 80060ca:	4916      	ldr	r1, [pc, #88]	; (8006124 <snipCommand+0x240>)
 80060cc:	0020      	movs	r0, r4
 80060ce:	f00e fcee 	bl	8014aae <memcpy>
}
 80060d2:	2000      	movs	r0, #0
 80060d4:	b00a      	add	sp, #40	; 0x28
 80060d6:	bc1c      	pop	{r2, r3, r4}
 80060d8:	4690      	mov	r8, r2
 80060da:	4699      	mov	r9, r3
 80060dc:	46a2      	mov	sl, r4
 80060de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060e0:	080192b0 	.word	0x080192b0
 80060e4:	20000a88 	.word	0x20000a88
 80060e8:	0801aab4 	.word	0x0801aab4
 80060ec:	200011f7 	.word	0x200011f7
 80060f0:	20006c10 	.word	0x20006c10
 80060f4:	0801aaec 	.word	0x0801aaec
 80060f8:	20000090 	.word	0x20000090
 80060fc:	0801a5e4 	.word	0x0801a5e4
 8006100:	0801ab58 	.word	0x0801ab58
 8006104:	08019e90 	.word	0x08019e90
 8006108:	0801aaf8 	.word	0x0801aaf8
 800610c:	0801ab0c 	.word	0x0801ab0c
 8006110:	0801ab24 	.word	0x0801ab24
 8006114:	0801ab3c 	.word	0x0801ab3c
 8006118:	20001228 	.word	0x20001228
 800611c:	0801ab68 	.word	0x0801ab68
 8006120:	0801ab70 	.word	0x0801ab70
 8006124:	0801ab7c 	.word	0x0801ab7c

08006128 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006128:	b510      	push	{r4, lr}
 800612a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800612c:	d101      	bne.n	8006132 <idcodeCommand+0xa>
 800612e:	b672      	cpsid	i
 8006130:	e7fe      	b.n	8006130 <idcodeCommand+0x8>
	dev =HAL_GetDEVID();
 8006132:	f00a fca3 	bl	8010a7c <HAL_GetDEVID>
	switch(dev){
 8006136:	0403      	lsls	r3, r0, #16
 8006138:	0c1b      	lsrs	r3, r3, #16
 800613a:	4a1b      	ldr	r2, [pc, #108]	; (80061a8 <idcodeCommand+0x80>)
 800613c:	4694      	mov	ip, r2
 800613e:	4463      	add	r3, ip
 8006140:	2b08      	cmp	r3, #8
 8006142:	d82a      	bhi.n	800619a <idcodeCommand+0x72>
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4a19      	ldr	r2, [pc, #100]	; (80061ac <idcodeCommand+0x84>)
 8006148:	58d3      	ldr	r3, [r2, r3]
 800614a:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 800614c:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <idcodeCommand+0x88>)
 800614e:	4919      	ldr	r1, [pc, #100]	; (80061b4 <idcodeCommand+0x8c>)
 8006150:	0020      	movs	r0, r4
 8006152:	f00e feaf 	bl	8014eb4 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8006156:	f00a fc8b 	bl	8010a70 <HAL_GetREVID>
 800615a:	0b03      	lsrs	r3, r0, #12
 800615c:	0022      	movs	r2, r4
 800615e:	4916      	ldr	r1, [pc, #88]	; (80061b8 <idcodeCommand+0x90>)
 8006160:	0020      	movs	r0, r4
 8006162:	f00e fea7 	bl	8014eb4 <sprintf>
}
 8006166:	2000      	movs	r0, #0
 8006168:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 800616a:	4a14      	ldr	r2, [pc, #80]	; (80061bc <idcodeCommand+0x94>)
 800616c:	4911      	ldr	r1, [pc, #68]	; (80061b4 <idcodeCommand+0x8c>)
 800616e:	0020      	movs	r0, r4
 8006170:	f00e fea0 	bl	8014eb4 <sprintf>
			break;
 8006174:	e7ef      	b.n	8006156 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8006176:	4a12      	ldr	r2, [pc, #72]	; (80061c0 <idcodeCommand+0x98>)
 8006178:	490e      	ldr	r1, [pc, #56]	; (80061b4 <idcodeCommand+0x8c>)
 800617a:	0020      	movs	r0, r4
 800617c:	f00e fe9a 	bl	8014eb4 <sprintf>
			break;
 8006180:	e7e9      	b.n	8006156 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8006182:	4a10      	ldr	r2, [pc, #64]	; (80061c4 <idcodeCommand+0x9c>)
 8006184:	490b      	ldr	r1, [pc, #44]	; (80061b4 <idcodeCommand+0x8c>)
 8006186:	0020      	movs	r0, r4
 8006188:	f00e fe94 	bl	8014eb4 <sprintf>
			break;
 800618c:	e7e3      	b.n	8006156 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 800618e:	4a0e      	ldr	r2, [pc, #56]	; (80061c8 <idcodeCommand+0xa0>)
 8006190:	4908      	ldr	r1, [pc, #32]	; (80061b4 <idcodeCommand+0x8c>)
 8006192:	0020      	movs	r0, r4
 8006194:	f00e fe8e 	bl	8014eb4 <sprintf>
			break;
 8006198:	e7dd      	b.n	8006156 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 800619a:	4a0c      	ldr	r2, [pc, #48]	; (80061cc <idcodeCommand+0xa4>)
 800619c:	4905      	ldr	r1, [pc, #20]	; (80061b4 <idcodeCommand+0x8c>)
 800619e:	0020      	movs	r0, r4
 80061a0:	f00e fe88 	bl	8014eb4 <sprintf>
			break;
 80061a4:	e7d7      	b.n	8006156 <idcodeCommand+0x2e>
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	fffffbc0 	.word	0xfffffbc0
 80061ac:	08019eb8 	.word	0x08019eb8
 80061b0:	0801a4e0 	.word	0x0801a4e0
 80061b4:	0801a4ec 	.word	0x0801a4ec
 80061b8:	0801a538 	.word	0x0801a538
 80061bc:	0801a500 	.word	0x0801a500
 80061c0:	0801a50c 	.word	0x0801a50c
 80061c4:	0801a518 	.word	0x0801a518
 80061c8:	0801a524 	.word	0x0801a524
 80061cc:	0801a530 	.word	0x0801a530

080061d0 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061d0:	b570      	push	{r4, r5, r6, lr}
 80061d2:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80061d4:	d101      	bne.n	80061da <uuidCommand+0xa>
 80061d6:	b672      	cpsid	i
 80061d8:	e7fe      	b.n	80061d8 <uuidCommand+0x8>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 80061da:	220e      	movs	r2, #14
 80061dc:	4911      	ldr	r1, [pc, #68]	; (8006224 <uuidCommand+0x54>)
 80061de:	f00e fc66 	bl	8014aae <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 80061e2:	4b11      	ldr	r3, [pc, #68]	; (8006228 <uuidCommand+0x58>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4d11      	ldr	r5, [pc, #68]	; (800622c <uuidCommand+0x5c>)
 80061e8:	0022      	movs	r2, r4
 80061ea:	0029      	movs	r1, r5
 80061ec:	0020      	movs	r0, r4
 80061ee:	f00e fe61 	bl	8014eb4 <sprintf>
 80061f2:	4b0f      	ldr	r3, [pc, #60]	; (8006230 <uuidCommand+0x60>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	0022      	movs	r2, r4
 80061f8:	0029      	movs	r1, r5
 80061fa:	0020      	movs	r0, r4
 80061fc:	f00e fe5a 	bl	8014eb4 <sprintf>
 8006200:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <uuidCommand+0x64>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	0022      	movs	r2, r4
 8006206:	0029      	movs	r1, r5
 8006208:	0020      	movs	r0, r4
 800620a:	f00e fe53 	bl	8014eb4 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 800620e:	0020      	movs	r0, r4
 8006210:	f7f9 ff82 	bl	8000118 <strlen>
 8006214:	1820      	adds	r0, r4, r0
 8006216:	2203      	movs	r2, #3
 8006218:	4907      	ldr	r1, [pc, #28]	; (8006238 <uuidCommand+0x68>)
 800621a:	f00e fc48 	bl	8014aae <memcpy>
}
 800621e:	2000      	movs	r0, #0
 8006220:	bd70      	pop	{r4, r5, r6, pc}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	0801bcc0 	.word	0x0801bcc0
 8006228:	1ffff7ac 	.word	0x1ffff7ac
 800622c:	0801bcd0 	.word	0x0801bcd0
 8006230:	1ffff7b0 	.word	0x1ffff7b0
 8006234:	1ffff7b4 	.word	0x1ffff7b4
 8006238:	0801b4b8 	.word	0x0801b4b8

0800623c <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800623c:	b510      	push	{r4, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006242:	d101      	bne.n	8006248 <timeCommand+0xc>
 8006244:	b672      	cpsid	i
 8006246:	e7fe      	b.n	8006246 <timeCommand+0xa>
	GetTimeDate();
 8006248:	f008 f844 	bl	800e2d4 <GetTimeDate>
	if(BOS.hourformat == 24)
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <timeCommand+0x80>)
 800624e:	7b5b      	ldrb	r3, [r3, #13]
 8006250:	2b18      	cmp	r3, #24
 8006252:	d004      	beq.n	800625e <timeCommand+0x22>
	else if(BOS.hourformat == 12){
 8006254:	2b0c      	cmp	r3, #12
 8006256:	d00e      	beq.n	8006276 <timeCommand+0x3a>
}
 8006258:	2000      	movs	r0, #0
 800625a:	b004      	add	sp, #16
 800625c:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 800625e:	4917      	ldr	r1, [pc, #92]	; (80062bc <timeCommand+0x80>)
 8006260:	7c4b      	ldrb	r3, [r1, #17]
 8006262:	7c8a      	ldrb	r2, [r1, #18]
 8006264:	89c8      	ldrh	r0, [r1, #14]
 8006266:	9001      	str	r0, [sp, #4]
 8006268:	7c09      	ldrb	r1, [r1, #16]
 800626a:	9100      	str	r1, [sp, #0]
 800626c:	4914      	ldr	r1, [pc, #80]	; (80062c0 <timeCommand+0x84>)
 800626e:	0020      	movs	r0, r4
 8006270:	f00e fe20 	bl	8014eb4 <sprintf>
 8006274:	e7f0      	b.n	8006258 <timeCommand+0x1c>
		if(BOS.time.ampm == RTC_AM)
 8006276:	4b11      	ldr	r3, [pc, #68]	; (80062bc <timeCommand+0x80>)
 8006278:	7cdb      	ldrb	r3, [r3, #19]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d10d      	bne.n	800629a <timeCommand+0x5e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 800627e:	490f      	ldr	r1, [pc, #60]	; (80062bc <timeCommand+0x80>)
 8006280:	7c4b      	ldrb	r3, [r1, #17]
 8006282:	7c8a      	ldrb	r2, [r1, #18]
 8006284:	480f      	ldr	r0, [pc, #60]	; (80062c4 <timeCommand+0x88>)
 8006286:	9002      	str	r0, [sp, #8]
 8006288:	89c8      	ldrh	r0, [r1, #14]
 800628a:	9001      	str	r0, [sp, #4]
 800628c:	7c09      	ldrb	r1, [r1, #16]
 800628e:	9100      	str	r1, [sp, #0]
 8006290:	490d      	ldr	r1, [pc, #52]	; (80062c8 <timeCommand+0x8c>)
 8006292:	0020      	movs	r0, r4
 8006294:	f00e fe0e 	bl	8014eb4 <sprintf>
 8006298:	e7de      	b.n	8006258 <timeCommand+0x1c>
		else if(BOS.time.ampm == RTC_PM)
 800629a:	2b02      	cmp	r3, #2
 800629c:	d1dc      	bne.n	8006258 <timeCommand+0x1c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800629e:	4907      	ldr	r1, [pc, #28]	; (80062bc <timeCommand+0x80>)
 80062a0:	7c4b      	ldrb	r3, [r1, #17]
 80062a2:	7c8a      	ldrb	r2, [r1, #18]
 80062a4:	4809      	ldr	r0, [pc, #36]	; (80062cc <timeCommand+0x90>)
 80062a6:	9002      	str	r0, [sp, #8]
 80062a8:	89c8      	ldrh	r0, [r1, #14]
 80062aa:	9001      	str	r0, [sp, #4]
 80062ac:	7c09      	ldrb	r1, [r1, #16]
 80062ae:	9100      	str	r1, [sp, #0]
 80062b0:	4905      	ldr	r1, [pc, #20]	; (80062c8 <timeCommand+0x8c>)
 80062b2:	0020      	movs	r0, r4
 80062b4:	f00e fdfe 	bl	8014eb4 <sprintf>
 80062b8:	e7ce      	b.n	8006258 <timeCommand+0x1c>
 80062ba:	46c0      	nop			; (mov r8, r8)
 80062bc:	20006bf4 	.word	0x20006bf4
 80062c0:	0801bc08 	.word	0x0801bc08
 80062c4:	0801bc5c 	.word	0x0801bc5c
 80062c8:	0801bc30 	.word	0x0801bc30
 80062cc:	0801bc60 	.word	0x0801bc60

080062d0 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062d0:	b510      	push	{r4, lr}
 80062d2:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80062d4:	d101      	bne.n	80062da <dateCommand+0xa>
 80062d6:	b672      	cpsid	i
 80062d8:	e7fe      	b.n	80062d8 <dateCommand+0x8>
	GetTimeDate();
 80062da:	f007 fffb 	bl	800e2d4 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 80062de:	f7fe fb29 	bl	8004934 <GetDateString>
 80062e2:	0002      	movs	r2, r0
 80062e4:	4902      	ldr	r1, [pc, #8]	; (80062f0 <dateCommand+0x20>)
 80062e6:	0020      	movs	r0, r4
 80062e8:	f00e fde4 	bl	8014eb4 <sprintf>
}
 80062ec:	2000      	movs	r0, #0
 80062ee:	bd10      	pop	{r4, pc}
 80062f0:	0801a118 	.word	0x0801a118

080062f4 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062f6:	46c6      	mov	lr, r8
 80062f8:	b500      	push	{lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	0004      	movs	r4, r0
 80062fe:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006300:	2300      	movs	r3, #0
 8006302:	9301      	str	r3, [sp, #4]
 8006304:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8006306:	2800      	cmp	r0, #0
 8006308:	d101      	bne.n	800630e <getCommand+0x1a>
 800630a:	b672      	cpsid	i
 800630c:	e7fe      	b.n	800630c <getCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800630e:	aa01      	add	r2, sp, #4
 8006310:	2101      	movs	r1, #1
 8006312:	0030      	movs	r0, r6
 8006314:	f008 fc80 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8006318:	0005      	movs	r5, r0
 800631a:	4b74      	ldr	r3, [pc, #464]	; (80064ec <getCommand+0x1f8>)
 800631c:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 800631e:	2204      	movs	r2, #4
 8006320:	4973      	ldr	r1, [pc, #460]	; (80064f0 <getCommand+0x1fc>)
 8006322:	f00e fe0b 	bl	8014f3c <strncmp>
 8006326:	2800      	cmp	r0, #0
 8006328:	d000      	beq.n	800632c <getCommand+0x38>
 800632a:	e090      	b.n	800644e <getCommand+0x15a>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800632c:	1d2f      	adds	r7, r5, #4
 800632e:	9b01      	ldr	r3, [sp, #4]
 8006330:	1f1e      	subs	r6, r3, #4
 8006332:	0032      	movs	r2, r6
 8006334:	496f      	ldr	r1, [pc, #444]	; (80064f4 <getCommand+0x200>)
 8006336:	0038      	movs	r0, r7
 8006338:	f00e fe00 	bl	8014f3c <strncmp>
 800633c:	2800      	cmp	r0, #0
 800633e:	d11e      	bne.n	800637e <getCommand+0x8a>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8006340:	4b6d      	ldr	r3, [pc, #436]	; (80064f8 <getCommand+0x204>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b60      	cmp	r3, #96	; 0x60
 8006346:	d109      	bne.n	800635c <getCommand+0x68>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006348:	4a6c      	ldr	r2, [pc, #432]	; (80064fc <getCommand+0x208>)
 800634a:	496d      	ldr	r1, [pc, #436]	; (8006500 <getCommand+0x20c>)
 800634c:	0020      	movs	r0, r4
 800634e:	f00e fdb1 	bl	8014eb4 <sprintf>
}
 8006352:	2000      	movs	r0, #0
 8006354:	b002      	add	sp, #8
 8006356:	bc04      	pop	{r2}
 8006358:	4690      	mov	r8, r2
 800635a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 800635c:	2b20      	cmp	r3, #32
 800635e:	d105      	bne.n	800636c <getCommand+0x78>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8006360:	4a68      	ldr	r2, [pc, #416]	; (8006504 <getCommand+0x210>)
 8006362:	4967      	ldr	r1, [pc, #412]	; (8006500 <getCommand+0x20c>)
 8006364:	0020      	movs	r0, r4
 8006366:	f00e fda5 	bl	8014eb4 <sprintf>
 800636a:	e7f2      	b.n	8006352 <getCommand+0x5e>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 800636c:	2b00      	cmp	r3, #0
 800636e:	d000      	beq.n	8006372 <getCommand+0x7e>
 8006370:	e0b6      	b.n	80064e0 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8006372:	4a65      	ldr	r2, [pc, #404]	; (8006508 <getCommand+0x214>)
 8006374:	4962      	ldr	r1, [pc, #392]	; (8006500 <getCommand+0x20c>)
 8006376:	0020      	movs	r0, r4
 8006378:	f00e fd9c 	bl	8014eb4 <sprintf>
 800637c:	e7e9      	b.n	8006352 <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800637e:	0032      	movs	r2, r6
 8006380:	4962      	ldr	r1, [pc, #392]	; (800650c <getCommand+0x218>)
 8006382:	0038      	movs	r0, r7
 8006384:	f00e fdda 	bl	8014f3c <strncmp>
 8006388:	2800      	cmp	r0, #0
 800638a:	d11a      	bne.n	80063c2 <getCommand+0xce>
			if(BOSMessaging.trace == TRACE_BOTH)
 800638c:	4b5a      	ldr	r3, [pc, #360]	; (80064f8 <getCommand+0x204>)
 800638e:	785b      	ldrb	r3, [r3, #1]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d105      	bne.n	80063a0 <getCommand+0xac>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006394:	4a59      	ldr	r2, [pc, #356]	; (80064fc <getCommand+0x208>)
 8006396:	495a      	ldr	r1, [pc, #360]	; (8006500 <getCommand+0x20c>)
 8006398:	0020      	movs	r0, r4
 800639a:	f00e fd8b 	bl	8014eb4 <sprintf>
 800639e:	e7d8      	b.n	8006352 <getCommand+0x5e>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d105      	bne.n	80063b0 <getCommand+0xbc>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80063a4:	4a57      	ldr	r2, [pc, #348]	; (8006504 <getCommand+0x210>)
 80063a6:	4956      	ldr	r1, [pc, #344]	; (8006500 <getCommand+0x20c>)
 80063a8:	0020      	movs	r0, r4
 80063aa:	f00e fd83 	bl	8014eb4 <sprintf>
 80063ae:	e7d0      	b.n	8006352 <getCommand+0x5e>
			else if(BOSMessaging.trace == TRACE_NONE)
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d000      	beq.n	80063b6 <getCommand+0xc2>
 80063b4:	e094      	b.n	80064e0 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80063b6:	4a54      	ldr	r2, [pc, #336]	; (8006508 <getCommand+0x214>)
 80063b8:	4951      	ldr	r1, [pc, #324]	; (8006500 <getCommand+0x20c>)
 80063ba:	0020      	movs	r0, r4
 80063bc:	f00e fd7a 	bl	8014eb4 <sprintf>
 80063c0:	e7c7      	b.n	8006352 <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80063c2:	0032      	movs	r2, r6
 80063c4:	4952      	ldr	r1, [pc, #328]	; (8006510 <getCommand+0x21c>)
 80063c6:	0038      	movs	r0, r7
 80063c8:	f00e fdb8 	bl	8014f3c <strncmp>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d106      	bne.n	80063de <getCommand+0xea>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 80063d0:	4b50      	ldr	r3, [pc, #320]	; (8006514 <getCommand+0x220>)
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	4950      	ldr	r1, [pc, #320]	; (8006518 <getCommand+0x224>)
 80063d6:	0020      	movs	r0, r4
 80063d8:	f00e fd6c 	bl	8014eb4 <sprintf>
 80063dc:	e7b9      	b.n	8006352 <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80063de:	0032      	movs	r2, r6
 80063e0:	494e      	ldr	r1, [pc, #312]	; (800651c <getCommand+0x228>)
 80063e2:	0038      	movs	r0, r7
 80063e4:	f00e fdaa 	bl	8014f3c <strncmp>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d106      	bne.n	80063fa <getCommand+0x106>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 80063ec:	4b49      	ldr	r3, [pc, #292]	; (8006514 <getCommand+0x220>)
 80063ee:	881a      	ldrh	r2, [r3, #0]
 80063f0:	4949      	ldr	r1, [pc, #292]	; (8006518 <getCommand+0x224>)
 80063f2:	0020      	movs	r0, r4
 80063f4:	f00e fd5e 	bl	8014eb4 <sprintf>
 80063f8:	e7ab      	b.n	8006352 <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80063fa:	0032      	movs	r2, r6
 80063fc:	4948      	ldr	r1, [pc, #288]	; (8006520 <getCommand+0x22c>)
 80063fe:	0038      	movs	r0, r7
 8006400:	f00e fd9c 	bl	8014f3c <strncmp>
 8006404:	2800      	cmp	r0, #0
 8006406:	d106      	bne.n	8006416 <getCommand+0x122>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006408:	4b42      	ldr	r3, [pc, #264]	; (8006514 <getCommand+0x220>)
 800640a:	885a      	ldrh	r2, [r3, #2]
 800640c:	4942      	ldr	r1, [pc, #264]	; (8006518 <getCommand+0x224>)
 800640e:	0020      	movs	r0, r4
 8006410:	f00e fd50 	bl	8014eb4 <sprintf>
 8006414:	e79d      	b.n	8006352 <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006416:	0032      	movs	r2, r6
 8006418:	4942      	ldr	r1, [pc, #264]	; (8006524 <getCommand+0x230>)
 800641a:	0038      	movs	r0, r7
 800641c:	f00e fd8e 	bl	8014f3c <strncmp>
 8006420:	2800      	cmp	r0, #0
 8006422:	d106      	bne.n	8006432 <getCommand+0x13e>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8006424:	4b3b      	ldr	r3, [pc, #236]	; (8006514 <getCommand+0x220>)
 8006426:	791a      	ldrb	r2, [r3, #4]
 8006428:	493b      	ldr	r1, [pc, #236]	; (8006518 <getCommand+0x224>)
 800642a:	0020      	movs	r0, r4
 800642c:	f00e fd42 	bl	8014eb4 <sprintf>
 8006430:	e78f      	b.n	8006352 <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006432:	0032      	movs	r2, r6
 8006434:	493c      	ldr	r1, [pc, #240]	; (8006528 <getCommand+0x234>)
 8006436:	0038      	movs	r0, r7
 8006438:	f00e fd80 	bl	8014f3c <strncmp>
 800643c:	2800      	cmp	r0, #0
 800643e:	d10d      	bne.n	800645c <getCommand+0x168>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8006440:	4b34      	ldr	r3, [pc, #208]	; (8006514 <getCommand+0x220>)
 8006442:	795a      	ldrb	r2, [r3, #5]
 8006444:	4934      	ldr	r1, [pc, #208]	; (8006518 <getCommand+0x224>)
 8006446:	0020      	movs	r0, r4
 8006448:	f00e fd34 	bl	8014eb4 <sprintf>
 800644c:	e781      	b.n	8006352 <getCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 800644e:	2205      	movs	r2, #5
 8006450:	4936      	ldr	r1, [pc, #216]	; (800652c <getCommand+0x238>)
 8006452:	0028      	movs	r0, r5
 8006454:	f00e fd72 	bl	8014f3c <strncmp>
 8006458:	2800      	cmp	r0, #0
 800645a:	d005      	beq.n	8006468 <getCommand+0x174>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800645c:	2213      	movs	r2, #19
 800645e:	4934      	ldr	r1, [pc, #208]	; (8006530 <getCommand+0x23c>)
 8006460:	0020      	movs	r0, r4
 8006462:	f00e fb24 	bl	8014aae <memcpy>
 8006466:	e774      	b.n	8006352 <getCommand+0x5e>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006468:	466a      	mov	r2, sp
 800646a:	2102      	movs	r1, #2
 800646c:	0030      	movs	r0, r6
 800646e:	f008 fbd3 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8006472:	0005      	movs	r5, r0
 8006474:	4f2f      	ldr	r7, [pc, #188]	; (8006534 <getCommand+0x240>)
		for(i =0; i < MaxNumOfGroups; i++){
 8006476:	2600      	movs	r6, #0
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8006478:	0039      	movs	r1, r7
 800647a:	0028      	movs	r0, r5
 800647c:	f7f9 fe42 	bl	8000104 <strcmp>
 8006480:	2800      	cmp	r0, #0
 8006482:	d011      	beq.n	80064a8 <getCommand+0x1b4>
		for(i =0; i < MaxNumOfGroups; i++){
 8006484:	3601      	adds	r6, #1
 8006486:	b2f6      	uxtb	r6, r6
 8006488:	370a      	adds	r7, #10
 800648a:	2e0a      	cmp	r6, #10
 800648c:	d1f4      	bne.n	8006478 <getCommand+0x184>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 800648e:	002a      	movs	r2, r5
 8006490:	4929      	ldr	r1, [pc, #164]	; (8006538 <getCommand+0x244>)
 8006492:	0020      	movs	r0, r4
 8006494:	f00e fd0e 	bl	8014eb4 <sprintf>
			return pdFALSE;
 8006498:	e75b      	b.n	8006352 <getCommand+0x5e>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 800649a:	002b      	movs	r3, r5
 800649c:	0022      	movs	r2, r4
 800649e:	4927      	ldr	r1, [pc, #156]	; (800653c <getCommand+0x248>)
 80064a0:	0020      	movs	r0, r4
 80064a2:	f00e fd07 	bl	8014eb4 <sprintf>
 80064a6:	e015      	b.n	80064d4 <getCommand+0x1e0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 80064a8:	002a      	movs	r2, r5
 80064aa:	4925      	ldr	r1, [pc, #148]	; (8006540 <getCommand+0x24c>)
 80064ac:	0020      	movs	r0, r4
 80064ae:	f00e fd01 	bl	8014eb4 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 80064b2:	4b24      	ldr	r3, [pc, #144]	; (8006544 <getCommand+0x250>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d100      	bne.n	80064bc <getCommand+0x1c8>
 80064ba:	e74a      	b.n	8006352 <getCommand+0x5e>
 80064bc:	2501      	movs	r5, #1
 80064be:	002b      	movs	r3, r5
 80064c0:	40b3      	lsls	r3, r6
 80064c2:	4698      	mov	r8, r3
				if(InGroup(j,i)){
 80064c4:	4f20      	ldr	r7, [pc, #128]	; (8006548 <getCommand+0x254>)
			for(j =1; j <= N; j++)						// N modules
 80064c6:	4e1f      	ldr	r6, [pc, #124]	; (8006544 <getCommand+0x250>)
				if(InGroup(j,i)){
 80064c8:	1e6b      	subs	r3, r5, #1
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	5bdb      	ldrh	r3, [r3, r7]
 80064ce:	4642      	mov	r2, r8
 80064d0:	421a      	tst	r2, r3
 80064d2:	d1e2      	bne.n	800649a <getCommand+0x1a6>
			for(j =1; j <= N; j++)						// N modules
 80064d4:	3501      	adds	r5, #1
 80064d6:	b2ed      	uxtb	r5, r5
 80064d8:	7833      	ldrb	r3, [r6, #0]
 80064da:	42ab      	cmp	r3, r5
 80064dc:	d2f4      	bcs.n	80064c8 <getCommand+0x1d4>
 80064de:	e738      	b.n	8006352 <getCommand+0x5e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 80064e0:	002a      	movs	r2, r5
 80064e2:	491a      	ldr	r1, [pc, #104]	; (800654c <getCommand+0x258>)
 80064e4:	0020      	movs	r0, r4
 80064e6:	f00e fce5 	bl	8014eb4 <sprintf>
 80064ea:	e732      	b.n	8006352 <getCommand+0x5e>
 80064ec:	2000126c 	.word	0x2000126c
 80064f0:	0801a284 	.word	0x0801a284
 80064f4:	0801a28c 	.word	0x0801a28c
 80064f8:	20006b74 	.word	0x20006b74
 80064fc:	0801968c 	.word	0x0801968c
 8006500:	080194e4 	.word	0x080194e4
 8006504:	0801a298 	.word	0x0801a298
 8006508:	0801a29c 	.word	0x0801a29c
 800650c:	0801a2a4 	.word	0x0801a2a4
 8006510:	0801a2ac 	.word	0x0801a2ac
 8006514:	20006bf4 	.word	0x20006bf4
 8006518:	08019b3c 	.word	0x08019b3c
 800651c:	0801a2b8 	.word	0x0801a2b8
 8006520:	0801a2c4 	.word	0x0801a2c4
 8006524:	0801a2d4 	.word	0x0801a2d4
 8006528:	0801a2e8 	.word	0x0801a2e8
 800652c:	0801a2fc 	.word	0x0801a2fc
 8006530:	0801a30c 	.word	0x0801a30c
 8006534:	20000e38 	.word	0x20000e38
 8006538:	0801a320 	.word	0x0801a320
 800653c:	0801a304 	.word	0x0801a304
 8006540:	0801a33c 	.word	0x0801a33c
 8006544:	20000024 	.word	0x20000024
 8006548:	20000e9c 	.word	0x20000e9c
 800654c:	0801a350 	.word	0x0801a350

08006550 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	0004      	movs	r4, r0
 8006556:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006558:	2300      	movs	r3, #0
 800655a:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 800655c:	2c00      	cmp	r4, #0
 800655e:	d101      	bne.n	8006564 <defaultCommand+0x14>
 8006560:	b672      	cpsid	i
 8006562:	e7fe      	b.n	8006562 <defaultCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006564:	aa01      	add	r2, sp, #4
 8006566:	2101      	movs	r1, #1
 8006568:	f008 fb56 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 800656c:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 800656e:	9e01      	ldr	r6, [sp, #4]
 8006570:	0032      	movs	r2, r6
 8006572:	491e      	ldr	r1, [pc, #120]	; (80065ec <defaultCommand+0x9c>)
 8006574:	f00e fce2 	bl	8014f3c <strncmp>
 8006578:	2800      	cmp	r0, #0
 800657a:	d01e      	beq.n	80065ba <defaultCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 800657c:	0032      	movs	r2, r6
 800657e:	491c      	ldr	r1, [pc, #112]	; (80065f0 <defaultCommand+0xa0>)
 8006580:	0028      	movs	r0, r5
 8006582:	f00e fcdb 	bl	8014f3c <strncmp>
 8006586:	2800      	cmp	r0, #0
 8006588:	d12a      	bne.n	80065e0 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 800658a:	2200      	movs	r2, #0
 800658c:	2116      	movs	r1, #22
 800658e:	20ff      	movs	r0, #255	; 0xff
 8006590:	f003 fa2c 	bl	80099ec <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006594:	4b17      	ldr	r3, [pc, #92]	; (80065f4 <defaultCommand+0xa4>)
 8006596:	2202      	movs	r2, #2
 8006598:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 800659a:	2064      	movs	r0, #100	; 0x64
 800659c:	f008 fa23 	bl	800e9e6 <osDelay>
		ClearEEportsDir();
 80065a0:	f7fd f972 	bl	8003888 <ClearEEportsDir>
		ClearROtopology();
 80065a4:	f005 fbc0 	bl	800bd28 <ClearROtopology>
		osDelay(100);
 80065a8:	2064      	movs	r0, #100	; 0x64
 80065aa:	f008 fa1c 	bl	800e9e6 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 80065ae:	2240      	movs	r2, #64	; 0x40
 80065b0:	4911      	ldr	r1, [pc, #68]	; (80065f8 <defaultCommand+0xa8>)
 80065b2:	0020      	movs	r0, r4
 80065b4:	f00e fa7b 	bl	8014aae <memcpy>
 80065b8:	e00f      	b.n	80065da <defaultCommand+0x8a>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 80065ba:	4910      	ldr	r1, [pc, #64]	; (80065fc <defaultCommand+0xac>)
 80065bc:	4b10      	ldr	r3, [pc, #64]	; (8006600 <defaultCommand+0xb0>)
 80065be:	000a      	movs	r2, r1
 80065c0:	cb23      	ldmia	r3!, {r0, r1, r5}
 80065c2:	c223      	stmia	r2!, {r0, r1, r5}
 80065c4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80065c6:	c223      	stmia	r2!, {r0, r1, r5}
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 80065cc:	f7fd f918 	bl	8003800 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 80065d0:	2227      	movs	r2, #39	; 0x27
 80065d2:	490c      	ldr	r1, [pc, #48]	; (8006604 <defaultCommand+0xb4>)
 80065d4:	0020      	movs	r0, r4
 80065d6:	f00e fa6a 	bl	8014aae <memcpy>
}
 80065da:	2000      	movs	r0, #0
 80065dc:	b002      	add	sp, #8
 80065de:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80065e0:	220f      	movs	r2, #15
 80065e2:	4909      	ldr	r1, [pc, #36]	; (8006608 <defaultCommand+0xb8>)
 80065e4:	0020      	movs	r0, r4
 80065e6:	f00e fa62 	bl	8014aae <memcpy>
 80065ea:	e7f6      	b.n	80065da <defaultCommand+0x8a>
 80065ec:	0801a140 	.word	0x0801a140
 80065f0:	0801a170 	.word	0x0801a170
 80065f4:	20000ed0 	.word	0x20000ed0
 80065f8:	0801a188 	.word	0x0801a188
 80065fc:	20006bf4 	.word	0x20006bf4
 8006600:	20000008 	.word	0x20000008
 8006604:	0801a148 	.word	0x0801a148
 8006608:	0801a178 	.word	0x0801a178

0800660c <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800660c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800660e:	46ce      	mov	lr, r9
 8006610:	4647      	mov	r7, r8
 8006612:	b580      	push	{r7, lr}
 8006614:	b08d      	sub	sp, #52	; 0x34
 8006616:	0005      	movs	r5, r0
 8006618:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 800661a:	2300      	movs	r3, #0
 800661c:	930b      	str	r3, [sp, #44]	; 0x2c
 800661e:	930a      	str	r3, [sp, #40]	; 0x28
 8006620:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 8006622:	9308      	str	r3, [sp, #32]
 8006624:	9307      	str	r3, [sp, #28]
	configASSERT(pcWriteBuffer);
 8006626:	2800      	cmp	r0, #0
 8006628:	d101      	bne.n	800662e <setCommand+0x22>
 800662a:	b672      	cpsid	i
 800662c:	e7fe      	b.n	800662c <setCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800662e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006630:	2101      	movs	r1, #1
 8006632:	0020      	movs	r0, r4
 8006634:	f008 faf0 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8006638:	0006      	movs	r6, r0
 800663a:	4bb3      	ldr	r3, [pc, #716]	; (8006908 <setCommand+0x2fc>)
 800663c:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 800663e:	2204      	movs	r2, #4
 8006640:	49b2      	ldr	r1, [pc, #712]	; (800690c <setCommand+0x300>)
 8006642:	f00e fc7b 	bl	8014f3c <strncmp>
 8006646:	2800      	cmp	r0, #0
 8006648:	d015      	beq.n	8006676 <setCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 800664a:	2204      	movs	r2, #4
 800664c:	49b0      	ldr	r1, [pc, #704]	; (8006910 <setCommand+0x304>)
 800664e:	0030      	movs	r0, r6
 8006650:	f00e fc74 	bl	8014f3c <strncmp>
 8006654:	2800      	cmp	r0, #0
 8006656:	d100      	bne.n	800665a <setCommand+0x4e>
 8006658:	e182      	b.n	8006960 <setCommand+0x354>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 800665a:	2204      	movs	r2, #4
 800665c:	49ad      	ldr	r1, [pc, #692]	; (8006914 <setCommand+0x308>)
 800665e:	0030      	movs	r0, r6
 8006660:	f00e fc6c 	bl	8014f3c <strncmp>
 8006664:	2800      	cmp	r0, #0
 8006666:	d100      	bne.n	800666a <setCommand+0x5e>
 8006668:	e1e8      	b.n	8006a3c <setCommand+0x430>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800666a:	2213      	movs	r2, #19
 800666c:	49aa      	ldr	r1, [pc, #680]	; (8006918 <setCommand+0x30c>)
 800666e:	0028      	movs	r0, r5
 8006670:	f00e fa1d 	bl	8014aae <memcpy>
 8006674:	e1d9      	b.n	8006a2a <setCommand+0x41e>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006676:	aa0a      	add	r2, sp, #40	; 0x28
 8006678:	2102      	movs	r1, #2
 800667a:	0020      	movs	r0, r4
 800667c:	f008 facc 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8006680:	0004      	movs	r4, r0
 8006682:	4ba6      	ldr	r3, [pc, #664]	; (800691c <setCommand+0x310>)
 8006684:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006686:	4ba0      	ldr	r3, [pc, #640]	; (8006908 <setCommand+0x2fc>)
 8006688:	681e      	ldr	r6, [r3, #0]
 800668a:	3604      	adds	r6, #4
 800668c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800668e:	1f1f      	subs	r7, r3, #4
 8006690:	003a      	movs	r2, r7
 8006692:	49a3      	ldr	r1, [pc, #652]	; (8006920 <setCommand+0x314>)
 8006694:	0030      	movs	r0, r6
 8006696:	f00e fc51 	bl	8014f3c <strncmp>
 800669a:	2800      	cmp	r0, #0
 800669c:	d153      	bne.n	8006746 <setCommand+0x13a>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 800669e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80066a0:	0032      	movs	r2, r6
 80066a2:	49a0      	ldr	r1, [pc, #640]	; (8006924 <setCommand+0x318>)
 80066a4:	0020      	movs	r0, r4
 80066a6:	f00e fc49 	bl	8014f3c <strncmp>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d115      	bne.n	80066da <setCommand+0xce>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 80066ae:	4b9e      	ldr	r3, [pc, #632]	; (8006928 <setCommand+0x31c>)
 80066b0:	2160      	movs	r1, #96	; 0x60
 80066b2:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	4319      	orrs	r1, r3
 80066ba:	308a      	adds	r0, #138	; 0x8a
 80066bc:	0040      	lsls	r0, r0, #1
 80066be:	f001 f9e7 	bl	8007a90 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80066c2:	4b91      	ldr	r3, [pc, #580]	; (8006908 <setCommand+0x2fc>)
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	2300      	movs	r3, #0
 80066c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066ca:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80066cc:	4b93      	ldr	r3, [pc, #588]	; (800691c <setCommand+0x310>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4996      	ldr	r1, [pc, #600]	; (800692c <setCommand+0x320>)
 80066d2:	0028      	movs	r0, r5
 80066d4:	f00e fbee 	bl	8014eb4 <sprintf>
	return pdFALSE;
 80066d8:	e1a7      	b.n	8006a2a <setCommand+0x41e>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80066da:	0032      	movs	r2, r6
 80066dc:	4994      	ldr	r1, [pc, #592]	; (8006930 <setCommand+0x324>)
 80066de:	0020      	movs	r0, r4
 80066e0:	f00e fc2c 	bl	8014f3c <strncmp>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d10a      	bne.n	80066fe <setCommand+0xf2>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 80066e8:	4b8f      	ldr	r3, [pc, #572]	; (8006928 <setCommand+0x31c>)
 80066ea:	2120      	movs	r1, #32
 80066ec:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066ee:	785b      	ldrb	r3, [r3, #1]
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	4319      	orrs	r1, r3
 80066f4:	308a      	adds	r0, #138	; 0x8a
 80066f6:	0040      	lsls	r0, r0, #1
 80066f8:	f001 f9ca 	bl	8007a90 <EE_WriteVariable>
 80066fc:	e7e1      	b.n	80066c2 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 80066fe:	0032      	movs	r2, r6
 8006700:	498c      	ldr	r1, [pc, #560]	; (8006934 <setCommand+0x328>)
 8006702:	0020      	movs	r0, r4
 8006704:	f00e fc1a 	bl	8014f3c <strncmp>
 8006708:	2800      	cmp	r0, #0
 800670a:	d10a      	bne.n	8006722 <setCommand+0x116>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 800670c:	4b86      	ldr	r3, [pc, #536]	; (8006928 <setCommand+0x31c>)
 800670e:	2140      	movs	r1, #64	; 0x40
 8006710:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	4319      	orrs	r1, r3
 8006718:	308a      	adds	r0, #138	; 0x8a
 800671a:	0040      	lsls	r0, r0, #1
 800671c:	f001 f9b8 	bl	8007a90 <EE_WriteVariable>
 8006720:	e7cf      	b.n	80066c2 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006722:	0032      	movs	r2, r6
 8006724:	4984      	ldr	r1, [pc, #528]	; (8006938 <setCommand+0x32c>)
 8006726:	0020      	movs	r0, r4
 8006728:	f00e fc08 	bl	8014f3c <strncmp>
 800672c:	2800      	cmp	r0, #0
 800672e:	d000      	beq.n	8006732 <setCommand+0x126>
 8006730:	e2a9      	b.n	8006c86 <setCommand+0x67a>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006732:	4b7d      	ldr	r3, [pc, #500]	; (8006928 <setCommand+0x31c>)
 8006734:	2200      	movs	r2, #0
 8006736:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006738:	7859      	ldrb	r1, [r3, #1]
 800673a:	0209      	lsls	r1, r1, #8
 800673c:	308a      	adds	r0, #138	; 0x8a
 800673e:	0040      	lsls	r0, r0, #1
 8006740:	f001 f9a6 	bl	8007a90 <EE_WriteVariable>
 8006744:	e7bd      	b.n	80066c2 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006746:	003a      	movs	r2, r7
 8006748:	497c      	ldr	r1, [pc, #496]	; (800693c <setCommand+0x330>)
 800674a:	0030      	movs	r0, r6
 800674c:	f00e fbf6 	bl	8014f3c <strncmp>
 8006750:	2800      	cmp	r0, #0
 8006752:	d14a      	bne.n	80067ea <setCommand+0x1de>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006754:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006756:	0032      	movs	r2, r6
 8006758:	4972      	ldr	r1, [pc, #456]	; (8006924 <setCommand+0x318>)
 800675a:	0020      	movs	r0, r4
 800675c:	f00e fbee 	bl	8014f3c <strncmp>
 8006760:	2800      	cmp	r0, #0
 8006762:	d10b      	bne.n	800677c <setCommand+0x170>
				BOSMessaging.trace =TRACE_BOTH;
 8006764:	4b70      	ldr	r3, [pc, #448]	; (8006928 <setCommand+0x31c>)
 8006766:	2203      	movs	r2, #3
 8006768:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	21c0      	movs	r1, #192	; 0xc0
 800676e:	0089      	lsls	r1, r1, #2
 8006770:	4319      	orrs	r1, r3
 8006772:	308a      	adds	r0, #138	; 0x8a
 8006774:	0040      	lsls	r0, r0, #1
 8006776:	f001 f98b 	bl	8007a90 <EE_WriteVariable>
 800677a:	e7a2      	b.n	80066c2 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800677c:	0032      	movs	r2, r6
 800677e:	496c      	ldr	r1, [pc, #432]	; (8006930 <setCommand+0x324>)
 8006780:	0020      	movs	r0, r4
 8006782:	f00e fbdb 	bl	8014f3c <strncmp>
 8006786:	2800      	cmp	r0, #0
 8006788:	d10b      	bne.n	80067a2 <setCommand+0x196>
				BOSMessaging.trace =TRACE_MESSAGE;
 800678a:	4b67      	ldr	r3, [pc, #412]	; (8006928 <setCommand+0x31c>)
 800678c:	2201      	movs	r2, #1
 800678e:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2180      	movs	r1, #128	; 0x80
 8006794:	0049      	lsls	r1, r1, #1
 8006796:	4319      	orrs	r1, r3
 8006798:	308a      	adds	r0, #138	; 0x8a
 800679a:	4090      	lsls	r0, r2
 800679c:	f001 f978 	bl	8007a90 <EE_WriteVariable>
 80067a0:	e78f      	b.n	80066c2 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80067a2:	0032      	movs	r2, r6
 80067a4:	495e      	ldr	r1, [pc, #376]	; (8006920 <setCommand+0x314>)
 80067a6:	0020      	movs	r0, r4
 80067a8:	f00e fbc8 	bl	8014f3c <strncmp>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d10b      	bne.n	80067c8 <setCommand+0x1bc>
				BOSMessaging.trace =TRACE_RESPONSE;
 80067b0:	4b5d      	ldr	r3, [pc, #372]	; (8006928 <setCommand+0x31c>)
 80067b2:	2202      	movs	r2, #2
 80067b4:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2180      	movs	r1, #128	; 0x80
 80067ba:	0089      	lsls	r1, r1, #2
 80067bc:	4319      	orrs	r1, r3
 80067be:	308a      	adds	r0, #138	; 0x8a
 80067c0:	0040      	lsls	r0, r0, #1
 80067c2:	f001 f965 	bl	8007a90 <EE_WriteVariable>
 80067c6:	e77c      	b.n	80066c2 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80067c8:	0032      	movs	r2, r6
 80067ca:	495b      	ldr	r1, [pc, #364]	; (8006938 <setCommand+0x32c>)
 80067cc:	0020      	movs	r0, r4
 80067ce:	f00e fbb5 	bl	8014f3c <strncmp>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	d000      	beq.n	80067d8 <setCommand+0x1cc>
 80067d6:	e256      	b.n	8006c86 <setCommand+0x67a>
				BOSMessaging.trace =TRACE_NONE;
 80067d8:	4b53      	ldr	r3, [pc, #332]	; (8006928 <setCommand+0x31c>)
 80067da:	2200      	movs	r2, #0
 80067dc:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80067de:	7819      	ldrb	r1, [r3, #0]
 80067e0:	308a      	adds	r0, #138	; 0x8a
 80067e2:	0040      	lsls	r0, r0, #1
 80067e4:	f001 f954 	bl	8007a90 <EE_WriteVariable>
 80067e8:	e76b      	b.n	80066c2 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80067ea:	003a      	movs	r2, r7
 80067ec:	4954      	ldr	r1, [pc, #336]	; (8006940 <setCommand+0x334>)
 80067ee:	0030      	movs	r0, r6
 80067f0:	f00e fba4 	bl	8014f3c <strncmp>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d128      	bne.n	800684a <setCommand+0x23e>
			temp2 =atoi((const char* )pcParameterString2);
 80067f8:	0020      	movs	r0, r4
 80067fa:	f00d fec8 	bl	801458e <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 80067fe:	23e1      	movs	r3, #225	; 0xe1
 8006800:	031b      	lsls	r3, r3, #12
 8006802:	4298      	cmp	r0, r3
 8006804:	d900      	bls.n	8006808 <setCommand+0x1fc>
 8006806:	e23e      	b.n	8006c86 <setCommand+0x67a>
				BOS.clibaudrate =temp2;
 8006808:	4c4e      	ldr	r4, [pc, #312]	; (8006944 <setCommand+0x338>)
 800680a:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 800680c:	b281      	uxth	r1, r0
 800680e:	208c      	movs	r0, #140	; 0x8c
 8006810:	0040      	lsls	r0, r0, #1
 8006812:	f001 f93d 	bl	8007a90 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006816:	68a1      	ldr	r1, [r4, #8]
 8006818:	0c09      	lsrs	r1, r1, #16
 800681a:	201a      	movs	r0, #26
 800681c:	30ff      	adds	r0, #255	; 0xff
 800681e:	f001 f937 	bl	8007a90 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006822:	4b39      	ldr	r3, [pc, #228]	; (8006908 <setCommand+0x2fc>)
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	2300      	movs	r3, #0
 8006828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800682a:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800682c:	4b3b      	ldr	r3, [pc, #236]	; (800691c <setCommand+0x310>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	493e      	ldr	r1, [pc, #248]	; (800692c <setCommand+0x320>)
 8006832:	0028      	movs	r0, r5
 8006834:	f00e fb3e 	bl	8014eb4 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006838:	4943      	ldr	r1, [pc, #268]	; (8006948 <setCommand+0x33c>)
 800683a:	0028      	movs	r0, r5
 800683c:	f00e fb5a 	bl	8014ef4 <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006840:	4942      	ldr	r1, [pc, #264]	; (800694c <setCommand+0x340>)
 8006842:	0028      	movs	r0, r5
 8006844:	f00e fb56 	bl	8014ef4 <strcat>
 8006848:	e0ef      	b.n	8006a2a <setCommand+0x41e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800684a:	003a      	movs	r2, r7
 800684c:	4940      	ldr	r1, [pc, #256]	; (8006950 <setCommand+0x344>)
 800684e:	0030      	movs	r0, r6
 8006850:	f00e fb74 	bl	8014f3c <strncmp>
 8006854:	2800      	cmp	r0, #0
 8006856:	d10d      	bne.n	8006874 <setCommand+0x268>
			temp16 =atoi((const char* )pcParameterString2);
 8006858:	0020      	movs	r0, r4
 800685a:	f00d fe98 	bl	801458e <atoi>
 800685e:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006860:	2900      	cmp	r1, #0
 8006862:	d100      	bne.n	8006866 <setCommand+0x25a>
 8006864:	e20f      	b.n	8006c86 <setCommand+0x67a>
				BOS.buttons.debounce =temp16;
 8006866:	4b37      	ldr	r3, [pc, #220]	; (8006944 <setCommand+0x338>)
 8006868:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 800686a:	2016      	movs	r0, #22
 800686c:	30ff      	adds	r0, #255	; 0xff
 800686e:	f001 f90f 	bl	8007a90 <EE_WriteVariable>
 8006872:	e726      	b.n	80066c2 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006874:	003a      	movs	r2, r7
 8006876:	4937      	ldr	r1, [pc, #220]	; (8006954 <setCommand+0x348>)
 8006878:	0030      	movs	r0, r6
 800687a:	f00e fb5f 	bl	8014f3c <strncmp>
 800687e:	2800      	cmp	r0, #0
 8006880:	d10d      	bne.n	800689e <setCommand+0x292>
			temp16 =atoi((const char* )pcParameterString2);
 8006882:	0020      	movs	r0, r4
 8006884:	f00d fe83 	bl	801458e <atoi>
 8006888:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 800688a:	2900      	cmp	r1, #0
 800688c:	d100      	bne.n	8006890 <setCommand+0x284>
 800688e:	e1fa      	b.n	8006c86 <setCommand+0x67a>
				BOS.buttons.singleClickTime =temp16;
 8006890:	4b2c      	ldr	r3, [pc, #176]	; (8006944 <setCommand+0x338>)
 8006892:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006894:	208b      	movs	r0, #139	; 0x8b
 8006896:	0040      	lsls	r0, r0, #1
 8006898:	f001 f8fa 	bl	8007a90 <EE_WriteVariable>
 800689c:	e711      	b.n	80066c2 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 800689e:	003a      	movs	r2, r7
 80068a0:	492d      	ldr	r1, [pc, #180]	; (8006958 <setCommand+0x34c>)
 80068a2:	0030      	movs	r0, r6
 80068a4:	f00e fb4a 	bl	8014f3c <strncmp>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d112      	bne.n	80068d2 <setCommand+0x2c6>
			temp16 =atoi((const char* )pcParameterString2);
 80068ac:	0020      	movs	r0, r4
 80068ae:	f00d fe6e 	bl	801458e <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80068b2:	1e43      	subs	r3, r0, #1
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2bfe      	cmp	r3, #254	; 0xfe
 80068b8:	d900      	bls.n	80068bc <setCommand+0x2b0>
 80068ba:	e1e4      	b.n	8006c86 <setCommand+0x67a>
				BOS.buttons.minInterClickTime =temp16;
 80068bc:	b2c0      	uxtb	r0, r0
 80068be:	4b21      	ldr	r3, [pc, #132]	; (8006944 <setCommand+0x338>)
 80068c0:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80068c2:	7959      	ldrb	r1, [r3, #5]
 80068c4:	0209      	lsls	r1, r1, #8
 80068c6:	4301      	orrs	r1, r0
 80068c8:	2018      	movs	r0, #24
 80068ca:	30ff      	adds	r0, #255	; 0xff
 80068cc:	f001 f8e0 	bl	8007a90 <EE_WriteVariable>
 80068d0:	e6f7      	b.n	80066c2 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80068d2:	003a      	movs	r2, r7
 80068d4:	4921      	ldr	r1, [pc, #132]	; (800695c <setCommand+0x350>)
 80068d6:	0030      	movs	r0, r6
 80068d8:	f00e fb30 	bl	8014f3c <strncmp>
 80068dc:	2800      	cmp	r0, #0
 80068de:	d000      	beq.n	80068e2 <setCommand+0x2d6>
 80068e0:	e6c3      	b.n	800666a <setCommand+0x5e>
			temp16 =atoi((const char* )pcParameterString2);
 80068e2:	0020      	movs	r0, r4
 80068e4:	f00d fe53 	bl	801458e <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80068e8:	1e43      	subs	r3, r0, #1
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2bfe      	cmp	r3, #254	; 0xfe
 80068ee:	d900      	bls.n	80068f2 <setCommand+0x2e6>
 80068f0:	e1c9      	b.n	8006c86 <setCommand+0x67a>
				BOS.buttons.maxInterClickTime =temp16;
 80068f2:	4b14      	ldr	r3, [pc, #80]	; (8006944 <setCommand+0x338>)
 80068f4:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80068f6:	0200      	lsls	r0, r0, #8
 80068f8:	7919      	ldrb	r1, [r3, #4]
 80068fa:	4301      	orrs	r1, r0
 80068fc:	b289      	uxth	r1, r1
 80068fe:	2018      	movs	r0, #24
 8006900:	30ff      	adds	r0, #255	; 0xff
 8006902:	f001 f8c5 	bl	8007a90 <EE_WriteVariable>
 8006906:	e6dc      	b.n	80066c2 <setCommand+0xb6>
 8006908:	20001268 	.word	0x20001268
 800690c:	0801a284 	.word	0x0801a284
 8006910:	0801a9b0 	.word	0x0801a9b0
 8006914:	0801a9bc 	.word	0x0801a9bc
 8006918:	0801a30c 	.word	0x0801a30c
 800691c:	20001274 	.word	0x20001274
 8006920:	0801a28c 	.word	0x0801a28c
 8006924:	0801968c 	.word	0x0801968c
 8006928:	20006b74 	.word	0x20006b74
 800692c:	0801a8b8 	.word	0x0801a8b8
 8006930:	0801a8ac 	.word	0x0801a8ac
 8006934:	0801a8b4 	.word	0x0801a8b4
 8006938:	0801a29c 	.word	0x0801a29c
 800693c:	0801a2a4 	.word	0x0801a2a4
 8006940:	0801a2ac 	.word	0x0801a2ac
 8006944:	20006bf4 	.word	0x20006bf4
 8006948:	0801a8cc 	.word	0x0801a8cc
 800694c:	0801a8fc 	.word	0x0801a8fc
 8006950:	0801a2b8 	.word	0x0801a2b8
 8006954:	0801a2c4 	.word	0x0801a2c4
 8006958:	0801a2d4 	.word	0x0801a2d4
 800695c:	0801a2e8 	.word	0x0801a2e8
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006960:	aa0a      	add	r2, sp, #40	; 0x28
 8006962:	2102      	movs	r1, #2
 8006964:	0020      	movs	r0, r4
 8006966:	f008 f957 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 800696a:	4bca      	ldr	r3, [pc, #808]	; (8006c94 <setCommand+0x688>)
 800696c:	4699      	mov	r9, r3
 800696e:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006970:	aa09      	add	r2, sp, #36	; 0x24
 8006972:	2103      	movs	r1, #3
 8006974:	0020      	movs	r0, r4
 8006976:	f008 f94f 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 800697a:	4fc7      	ldr	r7, [pc, #796]	; (8006c98 <setCommand+0x68c>)
 800697c:	6038      	str	r0, [r7, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800697e:	aa08      	add	r2, sp, #32
 8006980:	2104      	movs	r1, #4
 8006982:	0020      	movs	r0, r4
 8006984:	f008 f948 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8006988:	4ec4      	ldr	r6, [pc, #784]	; (8006c9c <setCommand+0x690>)
 800698a:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800698c:	aa07      	add	r2, sp, #28
 800698e:	2105      	movs	r1, #5
 8006990:	0020      	movs	r0, r4
 8006992:	f008 f941 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8006996:	4cc2      	ldr	r4, [pc, #776]	; (8006ca0 <setCommand+0x694>)
 8006998:	6020      	str	r0, [r4, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 800699a:	464b      	mov	r3, r9
 800699c:	6818      	ldr	r0, [r3, #0]
 800699e:	f00d fdf6 	bl	801458e <atoi>
 80069a2:	b2c3      	uxtb	r3, r0
 80069a4:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80069a6:	6838      	ldr	r0, [r7, #0]
 80069a8:	f00d fdf1 	bl	801458e <atoi>
 80069ac:	b2c7      	uxtb	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80069ae:	6830      	ldr	r0, [r6, #0]
 80069b0:	f00d fded 	bl	801458e <atoi>
 80069b4:	b2c6      	uxtb	r6, r0
		if(pcParameterString5 != NULL){
 80069b6:	6824      	ldr	r4, [r4, #0]
 80069b8:	2c00      	cmp	r4, #0
 80069ba:	d010      	beq.n	80069de <setCommand+0x3d2>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 80069bc:	2202      	movs	r2, #2
 80069be:	49b9      	ldr	r1, [pc, #740]	; (8006ca4 <setCommand+0x698>)
 80069c0:	0020      	movs	r0, r4
 80069c2:	f00e fabb 	bl	8014f3c <strncmp>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d035      	beq.n	8006a36 <setCommand+0x42a>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 80069ca:	2202      	movs	r2, #2
 80069cc:	49b6      	ldr	r1, [pc, #728]	; (8006ca8 <setCommand+0x69c>)
 80069ce:	0020      	movs	r0, r4
 80069d0:	f00e fab4 	bl	8014f3c <strncmp>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d000      	beq.n	80069da <setCommand+0x3ce>
 80069d8:	e155      	b.n	8006c86 <setCommand+0x67a>
				temp84 =RTC_PM;
 80069da:	2302      	movs	r3, #2
 80069dc:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80069de:	464b      	mov	r3, r9
 80069e0:	2b17      	cmp	r3, #23
 80069e2:	d900      	bls.n	80069e6 <setCommand+0x3da>
 80069e4:	e14f      	b.n	8006c86 <setCommand+0x67a>
 80069e6:	2f3b      	cmp	r7, #59	; 0x3b
 80069e8:	d900      	bls.n	80069ec <setCommand+0x3e0>
 80069ea:	e14c      	b.n	8006c86 <setCommand+0x67a>
 80069ec:	2e3b      	cmp	r6, #59	; 0x3b
 80069ee:	d900      	bls.n	80069f2 <setCommand+0x3e6>
 80069f0:	e149      	b.n	8006c86 <setCommand+0x67a>
				GetTimeDate();
 80069f2:	f007 fc6f 	bl	800e2d4 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 80069f6:	4cad      	ldr	r4, [pc, #692]	; (8006cac <setCommand+0x6a0>)
 80069f8:	7d23      	ldrb	r3, [r4, #20]
 80069fa:	8b22      	ldrh	r2, [r4, #24]
 80069fc:	7d61      	ldrb	r1, [r4, #21]
 80069fe:	7da0      	ldrb	r0, [r4, #22]
 8006a00:	7b24      	ldrb	r4, [r4, #12]
 8006a02:	b264      	sxtb	r4, r4
 8006a04:	9404      	str	r4, [sp, #16]
 8006a06:	4644      	mov	r4, r8
 8006a08:	9403      	str	r4, [sp, #12]
 8006a0a:	464c      	mov	r4, r9
 8006a0c:	9402      	str	r4, [sp, #8]
 8006a0e:	9701      	str	r7, [sp, #4]
 8006a10:	9600      	str	r6, [sp, #0]
 8006a12:	f007 fc05 	bl	800e220 <BOS_CalendarConfig>
 8006a16:	0006      	movs	r6, r0
	if(result == BOS_OK){
 8006a18:	2e00      	cmp	r6, #0
 8006a1a:	d100      	bne.n	8006a1e <setCommand+0x412>
 8006a1c:	e651      	b.n	80066c2 <setCommand+0xb6>
	else if(result == BOS_ERR_WrongParam)
 8006a1e:	2e67      	cmp	r6, #103	; 0x67
 8006a20:	d100      	bne.n	8006a24 <setCommand+0x418>
 8006a22:	e622      	b.n	800666a <setCommand+0x5e>
	else if(result == BOS_ERR_WrongValue)
 8006a24:	2e68      	cmp	r6, #104	; 0x68
 8006a26:	d100      	bne.n	8006a2a <setCommand+0x41e>
 8006a28:	e12d      	b.n	8006c86 <setCommand+0x67a>
}
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	b00d      	add	sp, #52	; 0x34
 8006a2e:	bc0c      	pop	{r2, r3}
 8006a30:	4690      	mov	r8, r2
 8006a32:	4699      	mov	r9, r3
 8006a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 =RTC_AM;
 8006a36:	2301      	movs	r3, #1
 8006a38:	4698      	mov	r8, r3
 8006a3a:	e7d0      	b.n	80069de <setCommand+0x3d2>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006a3c:	aa0a      	add	r2, sp, #40	; 0x28
 8006a3e:	2102      	movs	r1, #2
 8006a40:	0020      	movs	r0, r4
 8006a42:	f008 f8e9 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8006a46:	4e93      	ldr	r6, [pc, #588]	; (8006c94 <setCommand+0x688>)
 8006a48:	6030      	str	r0, [r6, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006a4a:	aa09      	add	r2, sp, #36	; 0x24
 8006a4c:	2103      	movs	r1, #3
 8006a4e:	0020      	movs	r0, r4
 8006a50:	f008 f8e2 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8006a54:	4b90      	ldr	r3, [pc, #576]	; (8006c98 <setCommand+0x68c>)
 8006a56:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006a58:	aa08      	add	r2, sp, #32
 8006a5a:	2104      	movs	r1, #4
 8006a5c:	0020      	movs	r0, r4
 8006a5e:	f008 f8db 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8006a62:	4b8e      	ldr	r3, [pc, #568]	; (8006c9c <setCommand+0x690>)
 8006a64:	4698      	mov	r8, r3
 8006a66:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a68:	aa07      	add	r2, sp, #28
 8006a6a:	2105      	movs	r1, #5
 8006a6c:	0020      	movs	r0, r4
 8006a6e:	f008 f8d3 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8006a72:	4c8b      	ldr	r4, [pc, #556]	; (8006ca0 <setCommand+0x694>)
 8006a74:	6020      	str	r0, [r4, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006a76:	4643      	mov	r3, r8
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	f00d fd88 	bl	801458e <atoi>
 8006a7e:	b2c3      	uxtb	r3, r0
 8006a80:	4698      	mov	r8, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006a82:	6820      	ldr	r0, [r4, #0]
 8006a84:	f00d fd83 	bl	801458e <atoi>
 8006a88:	b283      	uxth	r3, r0
 8006a8a:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006a8c:	6834      	ldr	r4, [r6, #0]
 8006a8e:	2206      	movs	r2, #6
 8006a90:	4987      	ldr	r1, [pc, #540]	; (8006cb0 <setCommand+0x6a4>)
 8006a92:	0020      	movs	r0, r4
 8006a94:	f00e fa52 	bl	8014f3c <strncmp>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d100      	bne.n	8006a9e <setCommand+0x492>
 8006a9c:	e195      	b.n	8006dca <setCommand+0x7be>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006a9e:	2207      	movs	r2, #7
 8006aa0:	4984      	ldr	r1, [pc, #528]	; (8006cb4 <setCommand+0x6a8>)
 8006aa2:	0020      	movs	r0, r4
 8006aa4:	f00e fa4a 	bl	8014f3c <strncmp>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d100      	bne.n	8006aae <setCommand+0x4a2>
 8006aac:	e19b      	b.n	8006de6 <setCommand+0x7da>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006aae:	2209      	movs	r2, #9
 8006ab0:	4981      	ldr	r1, [pc, #516]	; (8006cb8 <setCommand+0x6ac>)
 8006ab2:	0020      	movs	r0, r4
 8006ab4:	f00e fa42 	bl	8014f3c <strncmp>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d100      	bne.n	8006abe <setCommand+0x4b2>
 8006abc:	e195      	b.n	8006dea <setCommand+0x7de>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006abe:	2208      	movs	r2, #8
 8006ac0:	497e      	ldr	r1, [pc, #504]	; (8006cbc <setCommand+0x6b0>)
 8006ac2:	0020      	movs	r0, r4
 8006ac4:	f00e fa3a 	bl	8014f3c <strncmp>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d100      	bne.n	8006ace <setCommand+0x4c2>
 8006acc:	e18f      	b.n	8006dee <setCommand+0x7e2>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006ace:	2206      	movs	r2, #6
 8006ad0:	497b      	ldr	r1, [pc, #492]	; (8006cc0 <setCommand+0x6b4>)
 8006ad2:	0020      	movs	r0, r4
 8006ad4:	f00e fa32 	bl	8014f3c <strncmp>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d100      	bne.n	8006ade <setCommand+0x4d2>
 8006adc:	e189      	b.n	8006df2 <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006ade:	2208      	movs	r2, #8
 8006ae0:	4978      	ldr	r1, [pc, #480]	; (8006cc4 <setCommand+0x6b8>)
 8006ae2:	0020      	movs	r0, r4
 8006ae4:	f00e fa2a 	bl	8014f3c <strncmp>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d100      	bne.n	8006aee <setCommand+0x4e2>
 8006aec:	e183      	b.n	8006df6 <setCommand+0x7ea>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006aee:	2206      	movs	r2, #6
 8006af0:	4975      	ldr	r1, [pc, #468]	; (8006cc8 <setCommand+0x6bc>)
 8006af2:	0020      	movs	r0, r4
 8006af4:	f00e fa22 	bl	8014f3c <strncmp>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d100      	bne.n	8006afe <setCommand+0x4f2>
 8006afc:	e17d      	b.n	8006dfa <setCommand+0x7ee>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006afe:	4b66      	ldr	r3, [pc, #408]	; (8006c98 <setCommand+0x68c>)
 8006b00:	681c      	ldr	r4, [r3, #0]
 8006b02:	2207      	movs	r2, #7
 8006b04:	4971      	ldr	r1, [pc, #452]	; (8006ccc <setCommand+0x6c0>)
 8006b06:	0020      	movs	r0, r4
 8006b08:	f00e fa18 	bl	8014f3c <strncmp>
			result =BOS_ERR_WrongValue;
 8006b0c:	2668      	movs	r6, #104	; 0x68
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d101      	bne.n	8006b16 <setCommand+0x50a>
			result =BOS_ERR_WrongValue;
 8006b12:	2668      	movs	r6, #104	; 0x68
 8006b14:	e783      	b.n	8006a1e <setCommand+0x412>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006b16:	2202      	movs	r2, #2
 8006b18:	496d      	ldr	r1, [pc, #436]	; (8006cd0 <setCommand+0x6c4>)
 8006b1a:	0020      	movs	r0, r4
 8006b1c:	f00e fa0e 	bl	8014f3c <strncmp>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d100      	bne.n	8006b26 <setCommand+0x51a>
 8006b24:	e104      	b.n	8006d30 <setCommand+0x724>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006b26:	2208      	movs	r2, #8
 8006b28:	496a      	ldr	r1, [pc, #424]	; (8006cd4 <setCommand+0x6c8>)
 8006b2a:	0020      	movs	r0, r4
 8006b2c:	f00e fa06 	bl	8014f3c <strncmp>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d100      	bne.n	8006b36 <setCommand+0x52a>
 8006b34:	e11f      	b.n	8006d76 <setCommand+0x76a>
 8006b36:	2202      	movs	r2, #2
 8006b38:	4967      	ldr	r1, [pc, #412]	; (8006cd8 <setCommand+0x6cc>)
 8006b3a:	0020      	movs	r0, r4
 8006b3c:	f00e f9fe 	bl	8014f3c <strncmp>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d100      	bne.n	8006b46 <setCommand+0x53a>
 8006b44:	e119      	b.n	8006d7a <setCommand+0x76e>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006b46:	2205      	movs	r2, #5
 8006b48:	4964      	ldr	r1, [pc, #400]	; (8006cdc <setCommand+0x6d0>)
 8006b4a:	0020      	movs	r0, r4
 8006b4c:	f00e f9f6 	bl	8014f3c <strncmp>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d100      	bne.n	8006b56 <setCommand+0x54a>
 8006b54:	e113      	b.n	8006d7e <setCommand+0x772>
 8006b56:	2202      	movs	r2, #2
 8006b58:	4961      	ldr	r1, [pc, #388]	; (8006ce0 <setCommand+0x6d4>)
 8006b5a:	0020      	movs	r0, r4
 8006b5c:	f00e f9ee 	bl	8014f3c <strncmp>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d100      	bne.n	8006b66 <setCommand+0x55a>
 8006b64:	e10d      	b.n	8006d82 <setCommand+0x776>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006b66:	2205      	movs	r2, #5
 8006b68:	495e      	ldr	r1, [pc, #376]	; (8006ce4 <setCommand+0x6d8>)
 8006b6a:	0020      	movs	r0, r4
 8006b6c:	f00e f9e6 	bl	8014f3c <strncmp>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d100      	bne.n	8006b76 <setCommand+0x56a>
 8006b74:	e107      	b.n	8006d86 <setCommand+0x77a>
 8006b76:	2202      	movs	r2, #2
 8006b78:	495b      	ldr	r1, [pc, #364]	; (8006ce8 <setCommand+0x6dc>)
 8006b7a:	0020      	movs	r0, r4
 8006b7c:	f00e f9de 	bl	8014f3c <strncmp>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d100      	bne.n	8006b86 <setCommand+0x57a>
 8006b84:	e101      	b.n	8006d8a <setCommand+0x77e>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006b86:	2203      	movs	r2, #3
 8006b88:	4958      	ldr	r1, [pc, #352]	; (8006cec <setCommand+0x6e0>)
 8006b8a:	0020      	movs	r0, r4
 8006b8c:	f00e f9d6 	bl	8014f3c <strncmp>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d100      	bne.n	8006b96 <setCommand+0x58a>
 8006b94:	e0fb      	b.n	8006d8e <setCommand+0x782>
 8006b96:	2202      	movs	r2, #2
 8006b98:	4955      	ldr	r1, [pc, #340]	; (8006cf0 <setCommand+0x6e4>)
 8006b9a:	0020      	movs	r0, r4
 8006b9c:	f00e f9ce 	bl	8014f3c <strncmp>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d100      	bne.n	8006ba6 <setCommand+0x59a>
 8006ba4:	e0f5      	b.n	8006d92 <setCommand+0x786>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	4952      	ldr	r1, [pc, #328]	; (8006cf4 <setCommand+0x6e8>)
 8006baa:	0020      	movs	r0, r4
 8006bac:	f00e f9c6 	bl	8014f3c <strncmp>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d100      	bne.n	8006bb6 <setCommand+0x5aa>
 8006bb4:	e0ef      	b.n	8006d96 <setCommand+0x78a>
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	494f      	ldr	r1, [pc, #316]	; (8006cf8 <setCommand+0x6ec>)
 8006bba:	0020      	movs	r0, r4
 8006bbc:	f00e f9be 	bl	8014f3c <strncmp>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d100      	bne.n	8006bc6 <setCommand+0x5ba>
 8006bc4:	e0e9      	b.n	8006d9a <setCommand+0x78e>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006bc6:	2204      	movs	r2, #4
 8006bc8:	494c      	ldr	r1, [pc, #304]	; (8006cfc <setCommand+0x6f0>)
 8006bca:	0020      	movs	r0, r4
 8006bcc:	f00e f9b6 	bl	8014f3c <strncmp>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d100      	bne.n	8006bd6 <setCommand+0x5ca>
 8006bd4:	e0e3      	b.n	8006d9e <setCommand+0x792>
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	4949      	ldr	r1, [pc, #292]	; (8006d00 <setCommand+0x6f4>)
 8006bda:	0020      	movs	r0, r4
 8006bdc:	f00e f9ae 	bl	8014f3c <strncmp>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d100      	bne.n	8006be6 <setCommand+0x5da>
 8006be4:	e0dd      	b.n	8006da2 <setCommand+0x796>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006be6:	2205      	movs	r2, #5
 8006be8:	4946      	ldr	r1, [pc, #280]	; (8006d04 <setCommand+0x6f8>)
 8006bea:	0020      	movs	r0, r4
 8006bec:	f00e f9a6 	bl	8014f3c <strncmp>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d100      	bne.n	8006bf6 <setCommand+0x5ea>
 8006bf4:	e0d7      	b.n	8006da6 <setCommand+0x79a>
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	4943      	ldr	r1, [pc, #268]	; (8006d08 <setCommand+0x6fc>)
 8006bfa:	0020      	movs	r0, r4
 8006bfc:	f00e f99e 	bl	8014f3c <strncmp>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d100      	bne.n	8006c06 <setCommand+0x5fa>
 8006c04:	e0d1      	b.n	8006daa <setCommand+0x79e>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006c06:	2209      	movs	r2, #9
 8006c08:	4940      	ldr	r1, [pc, #256]	; (8006d0c <setCommand+0x700>)
 8006c0a:	0020      	movs	r0, r4
 8006c0c:	f00e f996 	bl	8014f3c <strncmp>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d100      	bne.n	8006c16 <setCommand+0x60a>
 8006c14:	e0cb      	b.n	8006dae <setCommand+0x7a2>
 8006c16:	2202      	movs	r2, #2
 8006c18:	493d      	ldr	r1, [pc, #244]	; (8006d10 <setCommand+0x704>)
 8006c1a:	0020      	movs	r0, r4
 8006c1c:	f00e f98e 	bl	8014f3c <strncmp>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d100      	bne.n	8006c26 <setCommand+0x61a>
 8006c24:	e0c5      	b.n	8006db2 <setCommand+0x7a6>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006c26:	2207      	movs	r2, #7
 8006c28:	493a      	ldr	r1, [pc, #232]	; (8006d14 <setCommand+0x708>)
 8006c2a:	0020      	movs	r0, r4
 8006c2c:	f00e f986 	bl	8014f3c <strncmp>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	d100      	bne.n	8006c36 <setCommand+0x62a>
 8006c34:	e0bf      	b.n	8006db6 <setCommand+0x7aa>
 8006c36:	2202      	movs	r2, #2
 8006c38:	4937      	ldr	r1, [pc, #220]	; (8006d18 <setCommand+0x70c>)
 8006c3a:	0020      	movs	r0, r4
 8006c3c:	f00e f97e 	bl	8014f3c <strncmp>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d100      	bne.n	8006c46 <setCommand+0x63a>
 8006c44:	e0b9      	b.n	8006dba <setCommand+0x7ae>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006c46:	2208      	movs	r2, #8
 8006c48:	4934      	ldr	r1, [pc, #208]	; (8006d1c <setCommand+0x710>)
 8006c4a:	0020      	movs	r0, r4
 8006c4c:	f00e f976 	bl	8014f3c <strncmp>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d100      	bne.n	8006c56 <setCommand+0x64a>
 8006c54:	e0b3      	b.n	8006dbe <setCommand+0x7b2>
 8006c56:	2202      	movs	r2, #2
 8006c58:	4931      	ldr	r1, [pc, #196]	; (8006d20 <setCommand+0x714>)
 8006c5a:	0020      	movs	r0, r4
 8006c5c:	f00e f96e 	bl	8014f3c <strncmp>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d100      	bne.n	8006c66 <setCommand+0x65a>
 8006c64:	e0ad      	b.n	8006dc2 <setCommand+0x7b6>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006c66:	2208      	movs	r2, #8
 8006c68:	492e      	ldr	r1, [pc, #184]	; (8006d24 <setCommand+0x718>)
 8006c6a:	0020      	movs	r0, r4
 8006c6c:	f00e f966 	bl	8014f3c <strncmp>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d100      	bne.n	8006c76 <setCommand+0x66a>
 8006c74:	e0a7      	b.n	8006dc6 <setCommand+0x7ba>
 8006c76:	2202      	movs	r2, #2
 8006c78:	492b      	ldr	r1, [pc, #172]	; (8006d28 <setCommand+0x71c>)
 8006c7a:	0020      	movs	r0, r4
 8006c7c:	f00e f95e 	bl	8014f3c <strncmp>
			temp82 =DECEMBER;
 8006c80:	240c      	movs	r4, #12
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d055      	beq.n	8006d32 <setCommand+0x726>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006c86:	220f      	movs	r2, #15
 8006c88:	4928      	ldr	r1, [pc, #160]	; (8006d2c <setCommand+0x720>)
 8006c8a:	0028      	movs	r0, r5
 8006c8c:	f00d ff0f 	bl	8014aae <memcpy>
 8006c90:	e6cb      	b.n	8006a2a <setCommand+0x41e>
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	20001274 	.word	0x20001274
 8006c98:	2000127c 	.word	0x2000127c
 8006c9c:	20001280 	.word	0x20001280
 8006ca0:	20001284 	.word	0x20001284
 8006ca4:	0801c444 	.word	0x0801c444
 8006ca8:	0801a9b8 	.word	0x0801a9b8
 8006cac:	20006bf4 	.word	0x20006bf4
 8006cb0:	0801a9c4 	.word	0x0801a9c4
 8006cb4:	0801a9cc 	.word	0x0801a9cc
 8006cb8:	0801a9d4 	.word	0x0801a9d4
 8006cbc:	0801a9e0 	.word	0x0801a9e0
 8006cc0:	0801a9ec 	.word	0x0801a9ec
 8006cc4:	0801a9f4 	.word	0x0801a9f4
 8006cc8:	0801aa00 	.word	0x0801aa00
 8006ccc:	0801aa9c 	.word	0x0801aa9c
 8006cd0:	0801aa08 	.word	0x0801aa08
 8006cd4:	0801aa0c 	.word	0x0801aa0c
 8006cd8:	0801aa18 	.word	0x0801aa18
 8006cdc:	0801aa1c 	.word	0x0801aa1c
 8006ce0:	0801aa24 	.word	0x0801aa24
 8006ce4:	0801aa28 	.word	0x0801aa28
 8006ce8:	0801aa30 	.word	0x0801aa30
 8006cec:	0801aa34 	.word	0x0801aa34
 8006cf0:	0801aa38 	.word	0x0801aa38
 8006cf4:	0801aa3c 	.word	0x0801aa3c
 8006cf8:	0801aa44 	.word	0x0801aa44
 8006cfc:	0801aa48 	.word	0x0801aa48
 8006d00:	0801aa50 	.word	0x0801aa50
 8006d04:	0801aa54 	.word	0x0801aa54
 8006d08:	0801aa5c 	.word	0x0801aa5c
 8006d0c:	0801aa60 	.word	0x0801aa60
 8006d10:	0801aa6c 	.word	0x0801aa6c
 8006d14:	0801aa70 	.word	0x0801aa70
 8006d18:	0801aa78 	.word	0x0801aa78
 8006d1c:	0801aa7c 	.word	0x0801aa7c
 8006d20:	0801aa88 	.word	0x0801aa88
 8006d24:	0801aa8c 	.word	0x0801aa8c
 8006d28:	0801aa98 	.word	0x0801aa98
 8006d2c:	0801a178 	.word	0x0801a178
			temp82 =JANUARY;
 8006d30:	2401      	movs	r4, #1
		if(result == BOS_OK){
 8006d32:	2e00      	cmp	r6, #0
 8006d34:	d000      	beq.n	8006d38 <setCommand+0x72c>
 8006d36:	e672      	b.n	8006a1e <setCommand+0x412>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006d38:	4643      	mov	r3, r8
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	2b1e      	cmp	r3, #30
 8006d3e:	d8a2      	bhi.n	8006c86 <setCommand+0x67a>
 8006d40:	4b2f      	ldr	r3, [pc, #188]	; (8006e00 <setCommand+0x7f4>)
 8006d42:	444b      	add	r3, r9
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b64      	cmp	r3, #100	; 0x64
 8006d48:	d89d      	bhi.n	8006c86 <setCommand+0x67a>
				GetTimeDate();
 8006d4a:	f007 fac3 	bl	800e2d4 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006d4e:	4b2d      	ldr	r3, [pc, #180]	; (8006e04 <setCommand+0x7f8>)
 8006d50:	220c      	movs	r2, #12
 8006d52:	569a      	ldrsb	r2, [r3, r2]
 8006d54:	9204      	str	r2, [sp, #16]
 8006d56:	7cda      	ldrb	r2, [r3, #19]
 8006d58:	9203      	str	r2, [sp, #12]
 8006d5a:	7c9a      	ldrb	r2, [r3, #18]
 8006d5c:	9202      	str	r2, [sp, #8]
 8006d5e:	7c5a      	ldrb	r2, [r3, #17]
 8006d60:	9201      	str	r2, [sp, #4]
 8006d62:	7c1b      	ldrb	r3, [r3, #16]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	003b      	movs	r3, r7
 8006d68:	464a      	mov	r2, r9
 8006d6a:	4641      	mov	r1, r8
 8006d6c:	0020      	movs	r0, r4
 8006d6e:	f007 fa57 	bl	800e220 <BOS_CalendarConfig>
 8006d72:	0006      	movs	r6, r0
 8006d74:	e650      	b.n	8006a18 <setCommand+0x40c>
			temp82 =FEBRUARY;
 8006d76:	2402      	movs	r4, #2
 8006d78:	e7db      	b.n	8006d32 <setCommand+0x726>
 8006d7a:	2402      	movs	r4, #2
 8006d7c:	e7d9      	b.n	8006d32 <setCommand+0x726>
			temp82 =MARCH;
 8006d7e:	2403      	movs	r4, #3
 8006d80:	e7d7      	b.n	8006d32 <setCommand+0x726>
 8006d82:	2403      	movs	r4, #3
 8006d84:	e7d5      	b.n	8006d32 <setCommand+0x726>
			temp82 =APRIL;
 8006d86:	2404      	movs	r4, #4
 8006d88:	e7d3      	b.n	8006d32 <setCommand+0x726>
 8006d8a:	2404      	movs	r4, #4
 8006d8c:	e7d1      	b.n	8006d32 <setCommand+0x726>
			temp82 =MAY;
 8006d8e:	2405      	movs	r4, #5
 8006d90:	e7cf      	b.n	8006d32 <setCommand+0x726>
 8006d92:	2405      	movs	r4, #5
 8006d94:	e7cd      	b.n	8006d32 <setCommand+0x726>
			temp82 =JUNE;
 8006d96:	2406      	movs	r4, #6
 8006d98:	e7cb      	b.n	8006d32 <setCommand+0x726>
 8006d9a:	2406      	movs	r4, #6
 8006d9c:	e7c9      	b.n	8006d32 <setCommand+0x726>
			temp82 =JULY;
 8006d9e:	2407      	movs	r4, #7
 8006da0:	e7c7      	b.n	8006d32 <setCommand+0x726>
 8006da2:	2407      	movs	r4, #7
 8006da4:	e7c5      	b.n	8006d32 <setCommand+0x726>
			temp82 =AUGUST;
 8006da6:	2408      	movs	r4, #8
 8006da8:	e7c3      	b.n	8006d32 <setCommand+0x726>
 8006daa:	2408      	movs	r4, #8
 8006dac:	e7c1      	b.n	8006d32 <setCommand+0x726>
			temp82 =SEPTEMBER;
 8006dae:	2409      	movs	r4, #9
 8006db0:	e7bf      	b.n	8006d32 <setCommand+0x726>
 8006db2:	2409      	movs	r4, #9
 8006db4:	e7bd      	b.n	8006d32 <setCommand+0x726>
			temp82 =OCTOBER;
 8006db6:	240a      	movs	r4, #10
 8006db8:	e7bb      	b.n	8006d32 <setCommand+0x726>
 8006dba:	240a      	movs	r4, #10
 8006dbc:	e7b9      	b.n	8006d32 <setCommand+0x726>
			temp82 =NOVEMBER;
 8006dbe:	240b      	movs	r4, #11
 8006dc0:	e7b7      	b.n	8006d32 <setCommand+0x726>
 8006dc2:	240b      	movs	r4, #11
 8006dc4:	e7b5      	b.n	8006d32 <setCommand+0x726>
			temp82 =DECEMBER;
 8006dc6:	240c      	movs	r4, #12
 8006dc8:	e7b3      	b.n	8006d32 <setCommand+0x726>
			temp81 =MONDAY;
 8006dca:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <setCommand+0x7fc>)
 8006dce:	681c      	ldr	r4, [r3, #0]
 8006dd0:	2207      	movs	r2, #7
 8006dd2:	490e      	ldr	r1, [pc, #56]	; (8006e0c <setCommand+0x800>)
 8006dd4:	0020      	movs	r0, r4
 8006dd6:	f00e f8b1 	bl	8014f3c <strncmp>
 8006dda:	2600      	movs	r6, #0
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d000      	beq.n	8006de2 <setCommand+0x7d6>
 8006de0:	e699      	b.n	8006b16 <setCommand+0x50a>
			temp82 =JANUARY;
 8006de2:	2401      	movs	r4, #1
 8006de4:	e7a8      	b.n	8006d38 <setCommand+0x72c>
			temp81 =TUESDAY;
 8006de6:	2702      	movs	r7, #2
 8006de8:	e7f0      	b.n	8006dcc <setCommand+0x7c0>
			temp81 =WEDNESDAY;
 8006dea:	2703      	movs	r7, #3
 8006dec:	e7ee      	b.n	8006dcc <setCommand+0x7c0>
			temp81 =THURSDAY;
 8006dee:	2704      	movs	r7, #4
 8006df0:	e7ec      	b.n	8006dcc <setCommand+0x7c0>
			temp81 =FRIDAY;
 8006df2:	2705      	movs	r7, #5
 8006df4:	e7ea      	b.n	8006dcc <setCommand+0x7c0>
			temp81 =SATURDAY;
 8006df6:	2706      	movs	r7, #6
 8006df8:	e7e8      	b.n	8006dcc <setCommand+0x7c0>
			temp81 =SUNDAY;
 8006dfa:	2707      	movs	r7, #7
 8006dfc:	e7e6      	b.n	8006dcc <setCommand+0x7c0>
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	fffff830 	.word	0xfffff830
 8006e04:	20006bf4 	.word	0x20006bf4
 8006e08:	2000127c 	.word	0x2000127c
 8006e0c:	0801aa9c 	.word	0x0801aa9c

08006e10 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e10:	b530      	push	{r4, r5, lr}
 8006e12:	b083      	sub	sp, #12
 8006e14:	0005      	movs	r5, r0
 8006e16:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006e1c:	2d00      	cmp	r5, #0
 8006e1e:	d101      	bne.n	8006e24 <removebuttonCommand+0x14>
 8006e20:	b672      	cpsid	i
 8006e22:	e7fe      	b.n	8006e22 <removebuttonCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e24:	aa01      	add	r2, sp, #4
 8006e26:	2101      	movs	r1, #1
 8006e28:	f007 fef6 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006e30:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006e32:	2b70      	cmp	r3, #112	; 0x70
 8006e34:	d007      	beq.n	8006e46 <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 8006e36:	0020      	movs	r0, r4
 8006e38:	f001 fb88 	bl	800854c <RemovePortButton>
	if(result == BOS_OK){
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d007      	beq.n	8006e50 <removebuttonCommand+0x40>
}
 8006e40:	2000      	movs	r0, #0
 8006e42:	b003      	add	sp, #12
 8006e44:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006e46:	3001      	adds	r0, #1
 8006e48:	f00d fba7 	bl	801459a <atol>
 8006e4c:	b2c4      	uxtb	r4, r0
 8006e4e:	e7f2      	b.n	8006e36 <removebuttonCommand+0x26>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006e50:	0023      	movs	r3, r4
 8006e52:	0022      	movs	r2, r4
 8006e54:	4902      	ldr	r1, [pc, #8]	; (8006e60 <removebuttonCommand+0x50>)
 8006e56:	0028      	movs	r0, r5
 8006e58:	f00e f82c 	bl	8014eb4 <sprintf>
 8006e5c:	e7f0      	b.n	8006e40 <removebuttonCommand+0x30>
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	0801a75c 	.word	0x0801a75c

08006e64 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e66:	b087      	sub	sp, #28
 8006e68:	0006      	movs	r6, r0
 8006e6a:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9305      	str	r3, [sp, #20]
 8006e70:	9304      	str	r3, [sp, #16]
	configASSERT(pcWriteBuffer);
 8006e72:	2800      	cmp	r0, #0
 8006e74:	d101      	bne.n	8006e7a <addbuttonCommand+0x16>
 8006e76:	b672      	cpsid	i
 8006e78:	e7fe      	b.n	8006e78 <addbuttonCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e7a:	aa05      	add	r2, sp, #20
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	9803      	ldr	r0, [sp, #12]
 8006e80:	f007 feca 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8006e84:	0004      	movs	r4, r0
 8006e86:	4b23      	ldr	r3, [pc, #140]	; (8006f14 <addbuttonCommand+0xb0>)
 8006e88:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006e8a:	9d05      	ldr	r5, [sp, #20]
 8006e8c:	002a      	movs	r2, r5
 8006e8e:	4922      	ldr	r1, [pc, #136]	; (8006f18 <addbuttonCommand+0xb4>)
 8006e90:	f00e f854 	bl	8014f3c <strncmp>
		type =MOMENTARY_NO;
 8006e94:	2701      	movs	r7, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d017      	beq.n	8006eca <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006e9a:	002a      	movs	r2, r5
 8006e9c:	491f      	ldr	r1, [pc, #124]	; (8006f1c <addbuttonCommand+0xb8>)
 8006e9e:	0020      	movs	r0, r4
 8006ea0:	f00e f84c 	bl	8014f3c <strncmp>
		type =MOMENTARY_NC;
 8006ea4:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d00f      	beq.n	8006eca <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006eaa:	002a      	movs	r2, r5
 8006eac:	491c      	ldr	r1, [pc, #112]	; (8006f20 <addbuttonCommand+0xbc>)
 8006eae:	0020      	movs	r0, r4
 8006eb0:	f00e f844 	bl	8014f3c <strncmp>
		type =ONOFF_NO;
 8006eb4:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d007      	beq.n	8006eca <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006eba:	002a      	movs	r2, r5
 8006ebc:	4919      	ldr	r1, [pc, #100]	; (8006f24 <addbuttonCommand+0xc0>)
 8006ebe:	0020      	movs	r0, r4
 8006ec0:	f00e f83c 	bl	8014f3c <strncmp>
		type =ONOFF_NC;
 8006ec4:	4243      	negs	r3, r0
 8006ec6:	4158      	adcs	r0, r3
 8006ec8:	0087      	lsls	r7, r0, #2
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006eca:	aa04      	add	r2, sp, #16
 8006ecc:	2102      	movs	r1, #2
 8006ece:	9803      	ldr	r0, [sp, #12]
 8006ed0:	f007 fea2 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006ed8:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006eda:	2b70      	cmp	r3, #112	; 0x70
 8006edc:	d008      	beq.n	8006ef0 <addbuttonCommand+0x8c>
	result =AddPortButton(type,port);
 8006ede:	0021      	movs	r1, r4
 8006ee0:	0038      	movs	r0, r7
 8006ee2:	f001 faa1 	bl	8008428 <AddPortButton>
	if(result == BOS_OK){
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d007      	beq.n	8006efa <addbuttonCommand+0x96>
}
 8006eea:	2000      	movs	r0, #0
 8006eec:	b007      	add	sp, #28
 8006eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	f00d fb52 	bl	801459a <atol>
 8006ef6:	b2c4      	uxtb	r4, r0
 8006ef8:	e7f1      	b.n	8006ede <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006efa:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <addbuttonCommand+0xb0>)
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	2300      	movs	r3, #0
 8006f00:	9905      	ldr	r1, [sp, #20]
 8006f02:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006f04:	9400      	str	r4, [sp, #0]
 8006f06:	0023      	movs	r3, r4
 8006f08:	4907      	ldr	r1, [pc, #28]	; (8006f28 <addbuttonCommand+0xc4>)
 8006f0a:	0030      	movs	r0, r6
 8006f0c:	f00d ffd2 	bl	8014eb4 <sprintf>
 8006f10:	e7eb      	b.n	8006eea <addbuttonCommand+0x86>
 8006f12:	46c0      	nop			; (mov r8, r8)
 8006f14:	20001264 	.word	0x20001264
 8006f18:	0801a01c 	.word	0x0801a01c
 8006f1c:	0801a02c 	.word	0x0801a02c
 8006f20:	0801a03c 	.word	0x0801a03c
 8006f24:	0801a048 	.word	0x0801a048
 8006f28:	0801a054 	.word	0x0801a054

08006f2c <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f2e:	46de      	mov	lr, fp
 8006f30:	4657      	mov	r7, sl
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b09b      	sub	sp, #108	; 0x6c
 8006f36:	0005      	movs	r5, r0
 8006f38:	9009      	str	r0, [sp, #36]	; 0x24
 8006f3a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	9319      	str	r3, [sp, #100]	; 0x64
 8006f40:	9318      	str	r3, [sp, #96]	; 0x60
 8006f42:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006f44:	9316      	str	r3, [sp, #88]	; 0x58
 8006f46:	9315      	str	r3, [sp, #84]	; 0x54
 8006f48:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 =0;
 8006f4a:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006f4c:	220a      	movs	r2, #10
 8006f4e:	2100      	movs	r1, #0
 8006f50:	a810      	add	r0, sp, #64	; 0x40
 8006f52:	f00d fdb5 	bl	8014ac0 <memset>
 8006f56:	220a      	movs	r2, #10
 8006f58:	2100      	movs	r1, #0
 8006f5a:	a80d      	add	r0, sp, #52	; 0x34
 8006f5c:	f00d fdb0 	bl	8014ac0 <memset>
 8006f60:	220a      	movs	r2, #10
 8006f62:	2100      	movs	r1, #0
 8006f64:	a80a      	add	r0, sp, #40	; 0x28
 8006f66:	f00d fdab 	bl	8014ac0 <memset>
	configASSERT(pcWriteBuffer);
 8006f6a:	2d00      	cmp	r5, #0
 8006f6c:	d101      	bne.n	8006f72 <scastCommand+0x46>
 8006f6e:	b672      	cpsid	i
 8006f70:	e7fe      	b.n	8006f70 <scastCommand+0x44>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006f72:	aa19      	add	r2, sp, #100	; 0x64
 8006f74:	2101      	movs	r1, #1
 8006f76:	0020      	movs	r0, r4
 8006f78:	f007 fe4e 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006f80:	2200      	movs	r2, #0
 8006f82:	9208      	str	r2, [sp, #32]
	if(pcParameterString1[0] == 'P'){
 8006f84:	2b50      	cmp	r3, #80	; 0x50
 8006f86:	d100      	bne.n	8006f8a <scastCommand+0x5e>
 8006f88:	e06d      	b.n	8007066 <scastCommand+0x13a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006f8a:	aa18      	add	r2, sp, #96	; 0x60
 8006f8c:	2102      	movs	r1, #2
 8006f8e:	0020      	movs	r0, r4
 8006f90:	f007 fe42 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8006f94:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006f96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f98:	a810      	add	r0, sp, #64	; 0x40
 8006f9a:	f00d ffe0 	bl	8014f5e <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006f9e:	a810      	add	r0, sp, #64	; 0x40
 8006fa0:	f7fd fa52 	bl	8004448 <GetID>
 8006fa4:	b2c3      	uxtb	r3, r0
 8006fa6:	469a      	mov	sl, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006fa8:	aa17      	add	r2, sp, #92	; 0x5c
 8006faa:	2103      	movs	r1, #3
 8006fac:	0020      	movs	r0, r4
 8006fae:	f007 fe33 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006fb6:	2700      	movs	r7, #0
	if(pcParameterString3[0] == 'p'){
 8006fb8:	2b70      	cmp	r3, #112	; 0x70
 8006fba:	d05a      	beq.n	8007072 <scastCommand+0x146>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006fbc:	aa16      	add	r2, sp, #88	; 0x58
 8006fbe:	2104      	movs	r1, #4
 8006fc0:	0020      	movs	r0, r4
 8006fc2:	f007 fe29 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8006fc6:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006fc8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006fca:	a80d      	add	r0, sp, #52	; 0x34
 8006fcc:	f00d ffc7 	bl	8014f5e <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006fd0:	a80d      	add	r0, sp, #52	; 0x34
 8006fd2:	f7fd fa39 	bl	8004448 <GetID>
 8006fd6:	b2c3      	uxtb	r3, r0
 8006fd8:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006fda:	aa15      	add	r2, sp, #84	; 0x54
 8006fdc:	2105      	movs	r1, #5
 8006fde:	0020      	movs	r0, r4
 8006fe0:	f007 fe1a 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006fe4:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006fe6:	0032      	movs	r2, r6
 8006fe8:	492b      	ldr	r1, [pc, #172]	; (8007098 <scastCommand+0x16c>)
 8006fea:	9007      	str	r0, [sp, #28]
 8006fec:	f00d ffa6 	bl	8014f3c <strncmp>
		direction =FORWARD;
 8006ff0:	2500      	movs	r5, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d00f      	beq.n	8007016 <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006ff6:	0032      	movs	r2, r6
 8006ff8:	4928      	ldr	r1, [pc, #160]	; (800709c <scastCommand+0x170>)
 8006ffa:	9807      	ldr	r0, [sp, #28]
 8006ffc:	f00d ff9e 	bl	8014f3c <strncmp>
		direction =BACKWARD;
 8007000:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8007002:	2800      	cmp	r0, #0
 8007004:	d007      	beq.n	8007016 <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8007006:	0032      	movs	r2, r6
 8007008:	4925      	ldr	r1, [pc, #148]	; (80070a0 <scastCommand+0x174>)
 800700a:	9807      	ldr	r0, [sp, #28]
 800700c:	f00d ff96 	bl	8014f3c <strncmp>
		direction =BIDIRECTIONAL;
 8007010:	4243      	negs	r3, r0
 8007012:	4158      	adcs	r0, r3
 8007014:	0045      	lsls	r5, r0, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8007016:	0032      	movs	r2, r6
 8007018:	9907      	ldr	r1, [sp, #28]
 800701a:	a80a      	add	r0, sp, #40	; 0x28
 800701c:	f00d ff9f 	bl	8014f5e <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8007020:	aa14      	add	r2, sp, #80	; 0x50
 8007022:	2106      	movs	r1, #6
 8007024:	0020      	movs	r0, r4
 8007026:	f007 fdf7 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 800702a:	f00d fab6 	bl	801459a <atol>
 800702e:	0006      	movs	r6, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8007030:	aa13      	add	r2, sp, #76	; 0x4c
 8007032:	2107      	movs	r1, #7
 8007034:	0020      	movs	r0, r4
 8007036:	f007 fdef 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 800703a:	f00d faae 	bl	801459a <atol>
 800703e:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8007040:	2300      	movs	r3, #0
 8007042:	9303      	str	r3, [sp, #12]
 8007044:	9002      	str	r0, [sp, #8]
 8007046:	9601      	str	r6, [sp, #4]
 8007048:	9500      	str	r5, [sp, #0]
 800704a:	465b      	mov	r3, fp
 800704c:	003a      	movs	r2, r7
 800704e:	4651      	mov	r1, sl
 8007050:	9808      	ldr	r0, [sp, #32]
 8007052:	f002 fcf1 	bl	8009a38 <StartScastDMAStream>
	if(result == BOS_OK){
 8007056:	2800      	cmp	r0, #0
 8007058:	d010      	beq.n	800707c <scastCommand+0x150>
}
 800705a:	2000      	movs	r0, #0
 800705c:	b01b      	add	sp, #108	; 0x6c
 800705e:	bc0c      	pop	{r2, r3}
 8007060:	4692      	mov	sl, r2
 8007062:	469b      	mov	fp, r3
 8007064:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8007066:	3001      	adds	r0, #1
 8007068:	f00d fa97 	bl	801459a <atol>
 800706c:	b2c3      	uxtb	r3, r0
 800706e:	9308      	str	r3, [sp, #32]
 8007070:	e78b      	b.n	8006f8a <scastCommand+0x5e>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007072:	3001      	adds	r0, #1
 8007074:	f00d fa91 	bl	801459a <atol>
 8007078:	b2c7      	uxtb	r7, r0
 800707a:	e79f      	b.n	8006fbc <scastCommand+0x90>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 800707c:	9404      	str	r4, [sp, #16]
 800707e:	9603      	str	r6, [sp, #12]
 8007080:	ab0d      	add	r3, sp, #52	; 0x34
 8007082:	9302      	str	r3, [sp, #8]
 8007084:	9701      	str	r7, [sp, #4]
 8007086:	ab10      	add	r3, sp, #64	; 0x40
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	9b08      	ldr	r3, [sp, #32]
 800708c:	aa0a      	add	r2, sp, #40	; 0x28
 800708e:	4905      	ldr	r1, [pc, #20]	; (80070a4 <scastCommand+0x178>)
 8007090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007092:	f00d ff0f 	bl	8014eb4 <sprintf>
 8007096:	e7e0      	b.n	800705a <scastCommand+0x12e>
 8007098:	0801a7a4 	.word	0x0801a7a4
 800709c:	0801a7ac 	.word	0x0801a7ac
 80070a0:	0801a7b8 	.word	0x0801a7b8
 80070a4:	0801a7c8 	.word	0x0801a7c8

080070a8 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070aa:	b083      	sub	sp, #12
 80070ac:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80070ae:	d039      	beq.n	8007124 <infoCommand+0x7c>
	if(N > 1)
 80070b0:	4b26      	ldr	r3, [pc, #152]	; (800714c <infoCommand+0xa4>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 80070b4:	2500      	movs	r5, #0
	if(N > 1)
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d902      	bls.n	80070c0 <infoCommand+0x18>
		result =ReadPortsDir();
 80070ba:	f7fd fb19 	bl	80046f0 <ReadPortsDir>
 80070be:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 80070c0:	4b22      	ldr	r3, [pc, #136]	; (800714c <infoCommand+0xa4>)
 80070c2:	781a      	ldrb	r2, [r3, #0]
 80070c4:	4922      	ldr	r1, [pc, #136]	; (8007150 <infoCommand+0xa8>)
 80070c6:	0020      	movs	r0, r4
 80070c8:	f00d fef4 	bl	8014eb4 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 80070cc:	0020      	movs	r0, r4
 80070ce:	f7f9 f823 	bl	8000118 <strlen>
 80070d2:	b282      	uxth	r2, r0
 80070d4:	4e1f      	ldr	r6, [pc, #124]	; (8007154 <infoCommand+0xac>)
 80070d6:	7830      	ldrb	r0, [r6, #0]
 80070d8:	2701      	movs	r7, #1
 80070da:	427f      	negs	r7, r7
 80070dc:	9700      	str	r7, [sp, #0]
 80070de:	2332      	movs	r3, #50	; 0x32
 80070e0:	0021      	movs	r1, r4
 80070e2:	f007 fb53 	bl	800e78c <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 80070e6:	2213      	movs	r2, #19
 80070e8:	491b      	ldr	r1, [pc, #108]	; (8007158 <infoCommand+0xb0>)
 80070ea:	0020      	movs	r0, r4
 80070ec:	f00d fcdf 	bl	8014aae <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 80070f0:	0020      	movs	r0, r4
 80070f2:	f7f9 f811 	bl	8000118 <strlen>
 80070f6:	b282      	uxth	r2, r0
 80070f8:	7830      	ldrb	r0, [r6, #0]
 80070fa:	9700      	str	r7, [sp, #0]
 80070fc:	2332      	movs	r3, #50	; 0x32
 80070fe:	0021      	movs	r1, r4
 8007100:	f007 fb44 	bl	800e78c <writePxMutex>
	DisplayTopology(PcPort);
 8007104:	7830      	ldrb	r0, [r6, #0]
 8007106:	f7fc fefb 	bl	8003f00 <DisplayTopology>
	DisplayPortsDir(PcPort);
 800710a:	7830      	ldrb	r0, [r6, #0]
 800710c:	f7fc ffc8 	bl	80040a0 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8007110:	2d02      	cmp	r5, #2
 8007112:	d009      	beq.n	8007128 <infoCommand+0x80>
	sprintf((char* )pcWriteBuffer," ");
 8007114:	2202      	movs	r2, #2
 8007116:	4911      	ldr	r1, [pc, #68]	; (800715c <infoCommand+0xb4>)
 8007118:	0020      	movs	r0, r4
 800711a:	f00d fcc8 	bl	8014aae <memcpy>
}
 800711e:	2000      	movs	r0, #0
 8007120:	b003      	add	sp, #12
 8007122:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8007124:	b672      	cpsid	i
 8007126:	e7fe      	b.n	8007126 <infoCommand+0x7e>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8007128:	2244      	movs	r2, #68	; 0x44
 800712a:	490d      	ldr	r1, [pc, #52]	; (8007160 <infoCommand+0xb8>)
 800712c:	0020      	movs	r0, r4
 800712e:	f00d fcbe 	bl	8014aae <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8007132:	0020      	movs	r0, r4
 8007134:	f7f8 fff0 	bl	8000118 <strlen>
 8007138:	b282      	uxth	r2, r0
 800713a:	4b06      	ldr	r3, [pc, #24]	; (8007154 <infoCommand+0xac>)
 800713c:	7818      	ldrb	r0, [r3, #0]
 800713e:	003b      	movs	r3, r7
 8007140:	9700      	str	r7, [sp, #0]
 8007142:	3333      	adds	r3, #51	; 0x33
 8007144:	0021      	movs	r1, r4
 8007146:	f007 fb21 	bl	800e78c <writePxMutex>
 800714a:	e7e3      	b.n	8007114 <infoCommand+0x6c>
 800714c:	20000024 	.word	0x20000024
 8007150:	0801a560 	.word	0x0801a560
 8007154:	20000a88 	.word	0x20000a88
 8007158:	0801a57c 	.word	0x0801a57c
 800715c:	08019504 	.word	0x08019504
 8007160:	0801a590 	.word	0x0801a590

08007164 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007164:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8007166:	2800      	cmp	r0, #0
 8007168:	d101      	bne.n	800716e <statusCommand+0xa>
 800716a:	b672      	cpsid	i
 800716c:	e7fe      	b.n	800716c <statusCommand+0x8>
	DisplayModuleStatus(0);
 800716e:	2000      	movs	r0, #0
 8007170:	f7fd f80a 	bl	8004188 <DisplayModuleStatus>
}
 8007174:	2000      	movs	r0, #0
 8007176:	bd10      	pop	{r4, pc}

08007178 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800717a:	46ce      	mov	lr, r9
 800717c:	b500      	push	{lr}
 800717e:	b090      	sub	sp, #64	; 0x40
 8007180:	0004      	movs	r4, r0
 8007182:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8007184:	2227      	movs	r2, #39	; 0x27
 8007186:	2100      	movs	r1, #0
 8007188:	a806      	add	r0, sp, #24
 800718a:	f00d fc99 	bl	8014ac0 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 800718e:	220a      	movs	r2, #10
 8007190:	2100      	movs	r1, #0
 8007192:	a803      	add	r0, sp, #12
 8007194:	f00d fc94 	bl	8014ac0 <memset>
	configASSERT(pcWriteBuffer);
 8007198:	2c00      	cmp	r4, #0
 800719a:	d101      	bne.n	80071a0 <groupCommand+0x28>
 800719c:	b672      	cpsid	i
 800719e:	e7fe      	b.n	800719e <groupCommand+0x26>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80071a0:	4d54      	ldr	r5, [pc, #336]	; (80072f4 <groupCommand+0x17c>)
 80071a2:	002a      	movs	r2, r5
 80071a4:	2101      	movs	r1, #1
 80071a6:	9801      	ldr	r0, [sp, #4]
 80071a8:	f007 fd36 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 80071ac:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 80071ae:	682a      	ldr	r2, [r5, #0]
 80071b0:	a803      	add	r0, sp, #12
 80071b2:	f00d fed4 	bl	8014f5e <strncpy>
 80071b6:	4d50      	ldr	r5, [pc, #320]	; (80072f8 <groupCommand+0x180>)
 80071b8:	002f      	movs	r7, r5
 80071ba:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 80071bc:	0029      	movs	r1, r5
 80071be:	a803      	add	r0, sp, #12
 80071c0:	f7f8 ffa0 	bl	8000104 <strcmp>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d016      	beq.n	80071f6 <groupCommand+0x7e>
 80071c8:	350a      	adds	r5, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 80071ca:	42bd      	cmp	r5, r7
 80071cc:	d1f6      	bne.n	80071bc <groupCommand+0x44>
	type =1;
 80071ce:	2701      	movs	r7, #1
	count =2;
 80071d0:	4b4a      	ldr	r3, [pc, #296]	; (80072fc <groupCommand+0x184>)
 80071d2:	2202      	movs	r2, #2
 80071d4:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 80071d6:	3208      	adds	r2, #8
 80071d8:	4949      	ldr	r1, [pc, #292]	; (8007300 <groupCommand+0x188>)
 80071da:	0020      	movs	r0, r4
 80071dc:	f00d fc67 	bl	8014aae <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 80071e0:	4a48      	ldr	r2, [pc, #288]	; (8007304 <groupCommand+0x18c>)
 80071e2:	2102      	movs	r1, #2
 80071e4:	9801      	ldr	r0, [sp, #4]
 80071e6:	f007 fd17 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 80071ea:	4b47      	ldr	r3, [pc, #284]	; (8007308 <groupCommand+0x190>)
 80071ec:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d061      	beq.n	80072b6 <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 80071f2:	4e44      	ldr	r6, [pc, #272]	; (8007304 <groupCommand+0x18c>)
 80071f4:	e011      	b.n	800721a <groupCommand+0xa2>
			type =0;
 80071f6:	2700      	movs	r7, #0
 80071f8:	e7ea      	b.n	80071d0 <groupCommand+0x58>
		strcat((char* )pcWriteBuffer,module);
 80071fa:	a906      	add	r1, sp, #24
 80071fc:	0020      	movs	r0, r4
 80071fe:	f00d fe79 	bl	8014ef4 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8007202:	1c69      	adds	r1, r5, #1
 8007204:	b249      	sxtb	r1, r1
 8007206:	4b3d      	ldr	r3, [pc, #244]	; (80072fc <groupCommand+0x184>)
 8007208:	7019      	strb	r1, [r3, #0]
 800720a:	4a3e      	ldr	r2, [pc, #248]	; (8007304 <groupCommand+0x18c>)
 800720c:	9801      	ldr	r0, [sp, #4]
 800720e:	f007 fd03 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8007212:	4b3d      	ldr	r3, [pc, #244]	; (8007308 <groupCommand+0x190>)
 8007214:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8007216:	2800      	cmp	r0, #0
 8007218:	d04d      	beq.n	80072b6 <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 800721a:	6833      	ldr	r3, [r6, #0]
 800721c:	4699      	mov	r9, r3
 800721e:	ad06      	add	r5, sp, #24
 8007220:	001a      	movs	r2, r3
 8007222:	0001      	movs	r1, r0
 8007224:	0028      	movs	r0, r5
 8007226:	f00d fe9a 	bl	8014f5e <strncpy>
		module[xParameterStringLength] ='\0';
 800722a:	2300      	movs	r3, #0
 800722c:	464a      	mov	r2, r9
 800722e:	54ab      	strb	r3, [r5, r2]
		modID =GetID(module);
 8007230:	0028      	movs	r0, r5
 8007232:	f7fd f909 	bl	8004448 <GetID>
		if(modID < 0)
 8007236:	2800      	cmp	r0, #0
 8007238:	db37      	blt.n	80072aa <groupCommand+0x132>
		result =AddModuleToGroup(modID,alias);
 800723a:	b2c0      	uxtb	r0, r0
 800723c:	a903      	add	r1, sp, #12
 800723e:	f7fd f9cf 	bl	80045e0 <AddModuleToGroup>
		if(result != BOS_OK)
 8007242:	2800      	cmp	r0, #0
 8007244:	d146      	bne.n	80072d4 <groupCommand+0x15c>
		if(count > 2)
 8007246:	4b2d      	ldr	r3, [pc, #180]	; (80072fc <groupCommand+0x184>)
 8007248:	2500      	movs	r5, #0
 800724a:	575d      	ldrsb	r5, [r3, r5]
 800724c:	2d02      	cmp	r5, #2
 800724e:	ddd4      	ble.n	80071fa <groupCommand+0x82>
			strcat((char* )pcWriteBuffer,", ");
 8007250:	0020      	movs	r0, r4
 8007252:	f7f8 ff61 	bl	8000118 <strlen>
 8007256:	1820      	adds	r0, r4, r0
 8007258:	2203      	movs	r2, #3
 800725a:	492c      	ldr	r1, [pc, #176]	; (800730c <groupCommand+0x194>)
 800725c:	f00d fc27 	bl	8014aae <memcpy>
 8007260:	e7cb      	b.n	80071fa <groupCommand+0x82>
	else if(result == BOS_OK && type){
 8007262:	2f00      	cmp	r7, #0
 8007264:	d009      	beq.n	800727a <groupCommand+0x102>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8007266:	aa03      	add	r2, sp, #12
 8007268:	4929      	ldr	r1, [pc, #164]	; (8007310 <groupCommand+0x198>)
 800726a:	a806      	add	r0, sp, #24
 800726c:	f00d fe22 	bl	8014eb4 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8007270:	a906      	add	r1, sp, #24
 8007272:	0020      	movs	r0, r4
 8007274:	f00d fe3e 	bl	8014ef4 <strcat>
 8007278:	e027      	b.n	80072ca <groupCommand+0x152>
		sprintf(module,(char* )pcMessageOKexist,alias);
 800727a:	aa03      	add	r2, sp, #12
 800727c:	4925      	ldr	r1, [pc, #148]	; (8007314 <groupCommand+0x19c>)
 800727e:	a806      	add	r0, sp, #24
 8007280:	f00d fe18 	bl	8014eb4 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8007284:	a906      	add	r1, sp, #24
 8007286:	0020      	movs	r0, r4
 8007288:	f00d fe34 	bl	8014ef4 <strcat>
 800728c:	e01d      	b.n	80072ca <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 800728e:	aa03      	add	r2, sp, #12
 8007290:	4921      	ldr	r1, [pc, #132]	; (8007318 <groupCommand+0x1a0>)
 8007292:	0020      	movs	r0, r4
 8007294:	f00d fe0e 	bl	8014eb4 <sprintf>
 8007298:	e017      	b.n	80072ca <groupCommand+0x152>
	else if(result == BOS_ERR_ExistingCmd)
 800729a:	2808      	cmp	r0, #8
 800729c:	d115      	bne.n	80072ca <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 800729e:	aa03      	add	r2, sp, #12
 80072a0:	491e      	ldr	r1, [pc, #120]	; (800731c <groupCommand+0x1a4>)
 80072a2:	0020      	movs	r0, r4
 80072a4:	f00d fe06 	bl	8014eb4 <sprintf>
 80072a8:	e00f      	b.n	80072ca <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 80072aa:	aa06      	add	r2, sp, #24
 80072ac:	491c      	ldr	r1, [pc, #112]	; (8007320 <groupCommand+0x1a8>)
 80072ae:	0020      	movs	r0, r4
 80072b0:	f00d fe00 	bl	8014eb4 <sprintf>
	return pdFALSE;
 80072b4:	e009      	b.n	80072ca <groupCommand+0x152>
	else if(count == 2)
 80072b6:	4b11      	ldr	r3, [pc, #68]	; (80072fc <groupCommand+0x184>)
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	b25b      	sxtb	r3, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d1d0      	bne.n	8007262 <groupCommand+0xea>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 80072c0:	aa03      	add	r2, sp, #12
 80072c2:	4918      	ldr	r1, [pc, #96]	; (8007324 <groupCommand+0x1ac>)
 80072c4:	0020      	movs	r0, r4
 80072c6:	f00d fdf5 	bl	8014eb4 <sprintf>
}
 80072ca:	2000      	movs	r0, #0
 80072cc:	b010      	add	sp, #64	; 0x40
 80072ce:	bc04      	pop	{r2}
 80072d0:	4691      	mov	r9, r2
 80072d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 80072d4:	4b09      	ldr	r3, [pc, #36]	; (80072fc <groupCommand+0x184>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	b25b      	sxtb	r3, r3
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d0f0      	beq.n	80072c0 <groupCommand+0x148>
	else if(result == BOS_ERR_Keyword)
 80072de:	2806      	cmp	r0, #6
 80072e0:	d0d5      	beq.n	800728e <groupCommand+0x116>
	else if(result == BOS_ERR_ExistingAlias)
 80072e2:	2807      	cmp	r0, #7
 80072e4:	d1d9      	bne.n	800729a <groupCommand+0x122>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 80072e6:	aa03      	add	r2, sp, #12
 80072e8:	490f      	ldr	r1, [pc, #60]	; (8007328 <groupCommand+0x1b0>)
 80072ea:	0020      	movs	r0, r4
 80072ec:	f00d fde2 	bl	8014eb4 <sprintf>
 80072f0:	e7eb      	b.n	80072ca <groupCommand+0x152>
 80072f2:	46c0      	nop			; (mov r8, r8)
 80072f4:	20001294 	.word	0x20001294
 80072f8:	20000e38 	.word	0x20000e38
 80072fc:	2000125a 	.word	0x2000125a
 8007300:	0801a380 	.word	0x0801a380
 8007304:	20001288 	.word	0x20001288
 8007308:	2000125c 	.word	0x2000125c
 800730c:	0801a38c 	.word	0x0801a38c
 8007310:	0801a3bc 	.word	0x0801a3bc
 8007314:	0801a3d8 	.word	0x0801a3d8
 8007318:	0801a3f8 	.word	0x0801a3f8
 800731c:	0801a46c 	.word	0x0801a46c
 8007320:	0801a4ac 	.word	0x0801a4ac
 8007324:	0801a390 	.word	0x0801a390
 8007328:	0801a438 	.word	0x0801a438

0800732c <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	0004      	movs	r4, r0
 8007330:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8007332:	2c00      	cmp	r4, #0
 8007334:	d101      	bne.n	800733a <nameCommand+0xe>
 8007336:	b672      	cpsid	i
 8007338:	e7fe      	b.n	8007338 <nameCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800733a:	4d1c      	ldr	r5, [pc, #112]	; (80073ac <nameCommand+0x80>)
 800733c:	002a      	movs	r2, r5
 800733e:	2101      	movs	r1, #1
 8007340:	f007 fc6a 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 8007344:	0001      	movs	r1, r0
 8007346:	4b1a      	ldr	r3, [pc, #104]	; (80073b0 <nameCommand+0x84>)
 8007348:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 800734a:	682b      	ldr	r3, [r5, #0]
 800734c:	2b09      	cmp	r3, #9
 800734e:	dd01      	ble.n	8007354 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8007350:	2300      	movs	r3, #0
 8007352:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8007354:	4b17      	ldr	r3, [pc, #92]	; (80073b4 <nameCommand+0x88>)
 8007356:	7818      	ldrb	r0, [r3, #0]
 8007358:	f7fd f8da 	bl	8004510 <NameModule>
	if(result == BOS_OK)
 800735c:	2800      	cmp	r0, #0
 800735e:	d007      	beq.n	8007370 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 8007360:	2806      	cmp	r0, #6
 8007362:	d00e      	beq.n	8007382 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8007364:	2807      	cmp	r0, #7
 8007366:	d013      	beq.n	8007390 <nameCommand+0x64>
	else if(result == BOS_ERR_ExistingCmd)
 8007368:	2808      	cmp	r0, #8
 800736a:	d018      	beq.n	800739e <nameCommand+0x72>
}
 800736c:	2000      	movs	r0, #0
 800736e:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007370:	4b10      	ldr	r3, [pc, #64]	; (80073b4 <nameCommand+0x88>)
 8007372:	781a      	ldrb	r2, [r3, #0]
 8007374:	4b0e      	ldr	r3, [pc, #56]	; (80073b0 <nameCommand+0x84>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	490f      	ldr	r1, [pc, #60]	; (80073b8 <nameCommand+0x8c>)
 800737a:	0020      	movs	r0, r4
 800737c:	f00d fd9a 	bl	8014eb4 <sprintf>
 8007380:	e7f4      	b.n	800736c <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8007382:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <nameCommand+0x84>)
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	490d      	ldr	r1, [pc, #52]	; (80073bc <nameCommand+0x90>)
 8007388:	0020      	movs	r0, r4
 800738a:	f00d fd93 	bl	8014eb4 <sprintf>
 800738e:	e7ed      	b.n	800736c <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007390:	4b07      	ldr	r3, [pc, #28]	; (80073b0 <nameCommand+0x84>)
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	490a      	ldr	r1, [pc, #40]	; (80073c0 <nameCommand+0x94>)
 8007396:	0020      	movs	r0, r4
 8007398:	f00d fd8c 	bl	8014eb4 <sprintf>
 800739c:	e7e6      	b.n	800736c <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 800739e:	4b04      	ldr	r3, [pc, #16]	; (80073b0 <nameCommand+0x84>)
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	4908      	ldr	r1, [pc, #32]	; (80073c4 <nameCommand+0x98>)
 80073a4:	0020      	movs	r0, r4
 80073a6:	f00d fd85 	bl	8014eb4 <sprintf>
 80073aa:	e7df      	b.n	800736c <nameCommand+0x40>
 80073ac:	20001290 	.word	0x20001290
 80073b0:	20001260 	.word	0x20001260
 80073b4:	20001052 	.word	0x20001052
 80073b8:	0801a5f8 	.word	0x0801a5f8
 80073bc:	0801a3f8 	.word	0x0801a3f8
 80073c0:	0801a438 	.word	0x0801a438
 80073c4:	0801a46c 	.word	0x0801a46c

080073c8 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80073c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ca:	b085      	sub	sp, #20
 80073cc:	1e04      	subs	r4, r0, #0
 80073ce:	9203      	str	r2, [sp, #12]
	configASSERT(pcWriteBuffer);
 80073d0:	d101      	bne.n	80073d6 <bootloaderUpdateCommand+0xe>
 80073d2:	b672      	cpsid	i
 80073d4:	e7fe      	b.n	80073d4 <bootloaderUpdateCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80073d6:	4a4b      	ldr	r2, [pc, #300]	; (8007504 <bootloaderUpdateCommand+0x13c>)
 80073d8:	2101      	movs	r1, #1
 80073da:	9803      	ldr	r0, [sp, #12]
 80073dc:	f007 fc1c 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d040      	beq.n	8007466 <bootloaderUpdateCommand+0x9e>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 80073e4:	4b47      	ldr	r3, [pc, #284]	; (8007504 <bootloaderUpdateCommand+0x13c>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	4947      	ldr	r1, [pc, #284]	; (8007508 <bootloaderUpdateCommand+0x140>)
 80073ea:	f00d fda7 	bl	8014f3c <strncmp>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d000      	beq.n	80073f4 <bootloaderUpdateCommand+0x2c>
 80073f2:	e080      	b.n	80074f6 <bootloaderUpdateCommand+0x12e>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80073f4:	4a45      	ldr	r2, [pc, #276]	; (800750c <bootloaderUpdateCommand+0x144>)
 80073f6:	2102      	movs	r1, #2
 80073f8:	9803      	ldr	r0, [sp, #12]
 80073fa:	f007 fc0d 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 80073fe:	4f44      	ldr	r7, [pc, #272]	; (8007510 <bootloaderUpdateCommand+0x148>)
 8007400:	6038      	str	r0, [r7, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007402:	4a44      	ldr	r2, [pc, #272]	; (8007514 <bootloaderUpdateCommand+0x14c>)
 8007404:	2103      	movs	r1, #3
 8007406:	9803      	ldr	r0, [sp, #12]
 8007408:	f007 fc06 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 800740c:	4b42      	ldr	r3, [pc, #264]	; (8007518 <bootloaderUpdateCommand+0x150>)
 800740e:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 8007410:	6838      	ldr	r0, [r7, #0]
 8007412:	2300      	movs	r3, #0
 8007414:	56c3      	ldrsb	r3, [r0, r3]
				result =BOS_ERR_WrongValue;
 8007416:	2768      	movs	r7, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8007418:	2b23      	cmp	r3, #35	; 0x23
 800741a:	d04e      	beq.n	80074ba <bootloaderUpdateCommand+0xf2>
			if(pcParameterString3[0] == 'p'){
 800741c:	4b3e      	ldr	r3, [pc, #248]	; (8007518 <bootloaderUpdateCommand+0x150>)
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	2300      	movs	r3, #0
 8007422:	56c3      	ldrsb	r3, [r0, r3]
 8007424:	2b70      	cmp	r3, #112	; 0x70
 8007426:	d04e      	beq.n	80074c6 <bootloaderUpdateCommand+0xfe>
				result =BOS_ERR_WrongValue;
 8007428:	2768      	movs	r7, #104	; 0x68
			if(module != myID){
 800742a:	4b3c      	ldr	r3, [pc, #240]	; (800751c <bootloaderUpdateCommand+0x154>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	42b3      	cmp	r3, r6
 8007430:	d04e      	beq.n	80074d0 <bootloaderUpdateCommand+0x108>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8007432:	4b3b      	ldr	r3, [pc, #236]	; (8007520 <bootloaderUpdateCommand+0x158>)
 8007434:	2200      	movs	r2, #0
 8007436:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 8007438:	4b3a      	ldr	r3, [pc, #232]	; (8007524 <bootloaderUpdateCommand+0x15c>)
 800743a:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 800743c:	3201      	adds	r2, #1
 800743e:	211a      	movs	r1, #26
 8007440:	0030      	movs	r0, r6
 8007442:	f002 fad3 	bl	80099ec <SendMessageToModule>
				osDelay(100);
 8007446:	2064      	movs	r0, #100	; 0x64
 8007448:	f007 facd 	bl	800e9e6 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 800744c:	4b36      	ldr	r3, [pc, #216]	; (8007528 <bootloaderUpdateCommand+0x160>)
 800744e:	781a      	ldrb	r2, [r3, #0]
 8007450:	4b32      	ldr	r3, [pc, #200]	; (800751c <bootloaderUpdateCommand+0x154>)
 8007452:	7818      	ldrb	r0, [r3, #0]
 8007454:	002b      	movs	r3, r5
 8007456:	0031      	movs	r1, r6
 8007458:	f7fc fcd0 	bl	8003dfc <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 800745c:	2f68      	cmp	r7, #104	; 0x68
 800745e:	d04a      	beq.n	80074f6 <bootloaderUpdateCommand+0x12e>
}
 8007460:	2000      	movs	r0, #0
 8007462:	b005      	add	sp, #20
 8007464:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8007466:	4b2d      	ldr	r3, [pc, #180]	; (800751c <bootloaderUpdateCommand+0x154>)
 8007468:	781a      	ldrb	r2, [r3, #0]
 800746a:	4930      	ldr	r1, [pc, #192]	; (800752c <bootloaderUpdateCommand+0x164>)
 800746c:	0020      	movs	r0, r4
 800746e:	f00d fd21 	bl	8014eb4 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007472:	4b2f      	ldr	r3, [pc, #188]	; (8007530 <bootloaderUpdateCommand+0x168>)
 8007474:	6819      	ldr	r1, [r3, #0]
 8007476:	0020      	movs	r0, r4
 8007478:	f00d fd3c 	bl	8014ef4 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800747c:	0020      	movs	r0, r4
 800747e:	f7f8 fe4b 	bl	8000118 <strlen>
 8007482:	b282      	uxth	r2, r0
 8007484:	4b28      	ldr	r3, [pc, #160]	; (8007528 <bootloaderUpdateCommand+0x160>)
 8007486:	7818      	ldrb	r0, [r3, #0]
 8007488:	2301      	movs	r3, #1
 800748a:	425b      	negs	r3, r3
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	3333      	adds	r3, #51	; 0x33
 8007490:	0021      	movs	r1, r4
 8007492:	f007 f97b 	bl	800e78c <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8007496:	4b27      	ldr	r3, [pc, #156]	; (8007534 <bootloaderUpdateCommand+0x16c>)
 8007498:	4a27      	ldr	r2, [pc, #156]	; (8007538 <bootloaderUpdateCommand+0x170>)
 800749a:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 800749c:	4b27      	ldr	r3, [pc, #156]	; (800753c <bootloaderUpdateCommand+0x174>)
 800749e:	2201      	movs	r2, #1
 80074a0:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 80074a2:	200a      	movs	r0, #10
 80074a4:	f007 fa9f 	bl	800e9e6 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	4b24      	ldr	r3, [pc, #144]	; (8007540 <bootloaderUpdateCommand+0x178>)
 80074ae:	4a25      	ldr	r2, [pc, #148]	; (8007544 <bootloaderUpdateCommand+0x17c>)
 80074b0:	60da      	str	r2, [r3, #12]
 80074b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	e7fd      	b.n	80074b6 <bootloaderUpdateCommand+0xee>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 80074ba:	3001      	adds	r0, #1
 80074bc:	f00d f86d 	bl	801459a <atol>
 80074c0:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 80074c2:	2700      	movs	r7, #0
 80074c4:	e7aa      	b.n	800741c <bootloaderUpdateCommand+0x54>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 80074c6:	3001      	adds	r0, #1
 80074c8:	f00d f867 	bl	801459a <atol>
 80074cc:	b2c5      	uxtb	r5, r0
 80074ce:	e7ac      	b.n	800742a <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 80074d0:	2100      	movs	r1, #0
 80074d2:	9100      	str	r1, [sp, #0]
 80074d4:	2319      	movs	r3, #25
 80074d6:	000a      	movs	r2, r1
 80074d8:	0028      	movs	r0, r5
 80074da:	f002 f801 	bl	80094e0 <SendMessageFromPort>
				osDelay(100);
 80074de:	2064      	movs	r0, #100	; 0x64
 80074e0:	f007 fa81 	bl	800e9e6 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 80074e4:	4b0d      	ldr	r3, [pc, #52]	; (800751c <bootloaderUpdateCommand+0x154>)
 80074e6:	7818      	ldrb	r0, [r3, #0]
 80074e8:	4b0f      	ldr	r3, [pc, #60]	; (8007528 <bootloaderUpdateCommand+0x160>)
 80074ea:	781a      	ldrb	r2, [r3, #0]
 80074ec:	002b      	movs	r3, r5
 80074ee:	0001      	movs	r1, r0
 80074f0:	f7fc fc84 	bl	8003dfc <remoteBootloaderUpdate>
 80074f4:	e7b2      	b.n	800745c <bootloaderUpdateCommand+0x94>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80074f6:	220f      	movs	r2, #15
 80074f8:	4913      	ldr	r1, [pc, #76]	; (8007548 <bootloaderUpdateCommand+0x180>)
 80074fa:	0020      	movs	r0, r4
 80074fc:	f00d fad7 	bl	8014aae <memcpy>
 8007500:	e7ae      	b.n	8007460 <bootloaderUpdateCommand+0x98>
 8007502:	46c0      	nop			; (mov r8, r8)
 8007504:	2000128c 	.word	0x2000128c
 8007508:	0801a0b8 	.word	0x0801a0b8
 800750c:	20001298 	.word	0x20001298
 8007510:	20001270 	.word	0x20001270
 8007514:	2000129c 	.word	0x2000129c
 8007518:	20001278 	.word	0x20001278
 800751c:	20001052 	.word	0x20001052
 8007520:	20006b74 	.word	0x20006b74
 8007524:	20000f14 	.word	0x20000f14
 8007528:	20000a88 	.word	0x20000a88
 800752c:	0801a098 	.word	0x0801a098
 8007530:	2000007c 	.word	0x2000007c
 8007534:	20007ff0 	.word	0x20007ff0
 8007538:	deadbeef 	.word	0xdeadbeef
 800753c:	20000ed0 	.word	0x20000ed0
 8007540:	e000ed00 	.word	0xe000ed00
 8007544:	05fa0004 	.word	0x05fa0004
 8007548:	0801a178 	.word	0x0801a178

0800754c <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800754c:	b570      	push	{r4, r5, r6, lr}
	configASSERT(pcWriteBuffer);
 800754e:	2800      	cmp	r0, #0
 8007550:	d01e      	beq.n	8007590 <pingCommand+0x44>
	if(!moduleAlias[myID][0])
 8007552:	4b15      	ldr	r3, [pc, #84]	; (80075a8 <pingCommand+0x5c>)
 8007554:	781a      	ldrb	r2, [r3, #0]
 8007556:	0093      	lsls	r3, r2, #2
 8007558:	189b      	adds	r3, r3, r2
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	4913      	ldr	r1, [pc, #76]	; (80075ac <pingCommand+0x60>)
 800755e:	5c5b      	ldrb	r3, [r3, r1]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d117      	bne.n	8007594 <pingCommand+0x48>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8007564:	4912      	ldr	r1, [pc, #72]	; (80075b0 <pingCommand+0x64>)
 8007566:	f00d fca5 	bl	8014eb4 <sprintf>
	RTOS_IND_blink(200);
 800756a:	2580      	movs	r5, #128	; 0x80
 800756c:	012d      	lsls	r5, r5, #4
 800756e:	2490      	movs	r4, #144	; 0x90
 8007570:	05e4      	lsls	r4, r4, #23
 8007572:	2201      	movs	r2, #1
 8007574:	0029      	movs	r1, r5
 8007576:	0020      	movs	r0, r4
 8007578:	f00a ff48 	bl	801240c <HAL_GPIO_WritePin>
 800757c:	20c8      	movs	r0, #200	; 0xc8
 800757e:	f007 fa32 	bl	800e9e6 <osDelay>
 8007582:	2200      	movs	r2, #0
 8007584:	0029      	movs	r1, r5
 8007586:	0020      	movs	r0, r4
 8007588:	f00a ff40 	bl	801240c <HAL_GPIO_WritePin>
}
 800758c:	2000      	movs	r0, #0
 800758e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8007590:	b672      	cpsid	i
 8007592:	e7fe      	b.n	8007592 <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8007594:	0093      	lsls	r3, r2, #2
 8007596:	189b      	adds	r3, r3, r2
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	4904      	ldr	r1, [pc, #16]	; (80075ac <pingCommand+0x60>)
 800759c:	185b      	adds	r3, r3, r1
 800759e:	4905      	ldr	r1, [pc, #20]	; (80075b4 <pingCommand+0x68>)
 80075a0:	f00d fc88 	bl	8014eb4 <sprintf>
 80075a4:	e7e1      	b.n	800756a <pingCommand+0x1e>
 80075a6:	46c0      	nop			; (mov r8, r8)
 80075a8:	20001052 	.word	0x20001052
 80075ac:	20000f44 	.word	0x20000f44
 80075b0:	0801a668 	.word	0x0801a668
 80075b4:	0801a67c 	.word	0x0801a67c

080075b8 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80075b8:	b510      	push	{r4, lr}
 80075ba:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80075bc:	d101      	bne.n	80075c2 <prvRunTimeStatsCommand+0xa>
 80075be:	b672      	cpsid	i
 80075c0:	e7fe      	b.n	80075c0 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 80075c2:	2241      	movs	r2, #65	; 0x41
 80075c4:	4904      	ldr	r1, [pc, #16]	; (80075d8 <prvRunTimeStatsCommand+0x20>)
 80075c6:	f00d fa72 	bl	8014aae <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 80075ca:	0020      	movs	r0, r4
 80075cc:	3040      	adds	r0, #64	; 0x40
 80075ce:	f008 fd77 	bl	80100c0 <vTaskGetRunTimeStats>
}
 80075d2:	2000      	movs	r0, #0
 80075d4:	bd10      	pop	{r4, pc}
 80075d6:	46c0      	nop			; (mov r8, r8)
 80075d8:	0801a6a8 	.word	0x0801a6a8

080075dc <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80075dc:	b510      	push	{r4, lr}
 80075de:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80075e0:	d101      	bne.n	80075e6 <prvTaskStatsCommand+0xa>
 80075e2:	b672      	cpsid	i
 80075e4:	e7fe      	b.n	80075e4 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 80075e6:	2250      	movs	r2, #80	; 0x50
 80075e8:	4904      	ldr	r1, [pc, #16]	; (80075fc <prvTaskStatsCommand+0x20>)
 80075ea:	f00d fa60 	bl	8014aae <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 80075ee:	0020      	movs	r0, r4
 80075f0:	304f      	adds	r0, #79	; 0x4f
 80075f2:	f008 fd05 	bl	8010000 <vTaskList>
}
 80075f6:	2000      	movs	r0, #0
 80075f8:	bd10      	pop	{r4, pc}
 80075fa:	46c0      	nop			; (mov r8, r8)
 80075fc:	0801a6fc 	.word	0x0801a6fc

08007600 <resetCommand>:
	configASSERT(pcWriteBuffer);
 8007600:	2800      	cmp	r0, #0
 8007602:	d101      	bne.n	8007608 <resetCommand+0x8>
 8007604:	b672      	cpsid	i
 8007606:	e7fe      	b.n	8007606 <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	4b03      	ldr	r3, [pc, #12]	; (800761c <resetCommand+0x1c>)
 800760e:	4a04      	ldr	r2, [pc, #16]	; (8007620 <resetCommand+0x20>)
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007616:	46c0      	nop			; (mov r8, r8)
 8007618:	e7fd      	b.n	8007616 <resetCommand+0x16>
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	e000ed00 	.word	0xe000ed00
 8007620:	05fa0004 	.word	0x05fa0004

08007624 <RegisterUserCLICommands>:
}
 8007624:	4770      	bx	lr
	...

08007628 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007628:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 800762a:	4835      	ldr	r0, [pc, #212]	; (8007700 <vRegisterCLICommands+0xd8>)
 800762c:	f007 fa56 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007630:	4834      	ldr	r0, [pc, #208]	; (8007704 <vRegisterCLICommands+0xdc>)
 8007632:	f007 fa53 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8007636:	4834      	ldr	r0, [pc, #208]	; (8007708 <vRegisterCLICommands+0xe0>)
 8007638:	f007 fa50 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 800763c:	4833      	ldr	r0, [pc, #204]	; (800770c <vRegisterCLICommands+0xe4>)
 800763e:	f007 fa4d 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007642:	4833      	ldr	r0, [pc, #204]	; (8007710 <vRegisterCLICommands+0xe8>)
 8007644:	f007 fa4a 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8007648:	4832      	ldr	r0, [pc, #200]	; (8007714 <vRegisterCLICommands+0xec>)
 800764a:	f007 fa47 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 800764e:	4832      	ldr	r0, [pc, #200]	; (8007718 <vRegisterCLICommands+0xf0>)
 8007650:	f007 fa44 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8007654:	4831      	ldr	r0, [pc, #196]	; (800771c <vRegisterCLICommands+0xf4>)
 8007656:	f007 fa41 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 800765a:	4831      	ldr	r0, [pc, #196]	; (8007720 <vRegisterCLICommands+0xf8>)
 800765c:	f007 fa3e 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007660:	4830      	ldr	r0, [pc, #192]	; (8007724 <vRegisterCLICommands+0xfc>)
 8007662:	f007 fa3b 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8007666:	4830      	ldr	r0, [pc, #192]	; (8007728 <vRegisterCLICommands+0x100>)
 8007668:	f007 fa38 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 800766c:	482f      	ldr	r0, [pc, #188]	; (800772c <vRegisterCLICommands+0x104>)
 800766e:	f007 fa35 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007672:	482f      	ldr	r0, [pc, #188]	; (8007730 <vRegisterCLICommands+0x108>)
 8007674:	f007 fa32 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8007678:	482e      	ldr	r0, [pc, #184]	; (8007734 <vRegisterCLICommands+0x10c>)
 800767a:	f007 fa2f 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 800767e:	482e      	ldr	r0, [pc, #184]	; (8007738 <vRegisterCLICommands+0x110>)
 8007680:	f007 fa2c 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007684:	482d      	ldr	r0, [pc, #180]	; (800773c <vRegisterCLICommands+0x114>)
 8007686:	f007 fa29 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800768a:	482d      	ldr	r0, [pc, #180]	; (8007740 <vRegisterCLICommands+0x118>)
 800768c:	f007 fa26 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007690:	482c      	ldr	r0, [pc, #176]	; (8007744 <vRegisterCLICommands+0x11c>)
 8007692:	f007 fa23 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8007696:	482c      	ldr	r0, [pc, #176]	; (8007748 <vRegisterCLICommands+0x120>)
 8007698:	f007 fa20 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 800769c:	482b      	ldr	r0, [pc, #172]	; (800774c <vRegisterCLICommands+0x124>)
 800769e:	f007 fa1d 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 80076a2:	482b      	ldr	r0, [pc, #172]	; (8007750 <vRegisterCLICommands+0x128>)
 80076a4:	f007 fa1a 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 80076a8:	482a      	ldr	r0, [pc, #168]	; (8007754 <vRegisterCLICommands+0x12c>)
 80076aa:	f007 fa17 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 80076ae:	482a      	ldr	r0, [pc, #168]	; (8007758 <vRegisterCLICommands+0x130>)
 80076b0:	f007 fa14 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 80076b4:	4829      	ldr	r0, [pc, #164]	; (800775c <vRegisterCLICommands+0x134>)
 80076b6:	f007 fa11 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 80076ba:	4829      	ldr	r0, [pc, #164]	; (8007760 <vRegisterCLICommands+0x138>)
 80076bc:	f007 fa0e 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 80076c0:	4828      	ldr	r0, [pc, #160]	; (8007764 <vRegisterCLICommands+0x13c>)
 80076c2:	f007 fa0b 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 80076c6:	4828      	ldr	r0, [pc, #160]	; (8007768 <vRegisterCLICommands+0x140>)
 80076c8:	f007 fa08 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 80076cc:	4827      	ldr	r0, [pc, #156]	; (800776c <vRegisterCLICommands+0x144>)
 80076ce:	f007 fa05 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 80076d2:	4827      	ldr	r0, [pc, #156]	; (8007770 <vRegisterCLICommands+0x148>)
 80076d4:	f007 fa02 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 80076d8:	4826      	ldr	r0, [pc, #152]	; (8007774 <vRegisterCLICommands+0x14c>)
 80076da:	f007 f9ff 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80076de:	4826      	ldr	r0, [pc, #152]	; (8007778 <vRegisterCLICommands+0x150>)
 80076e0:	f007 f9fc 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80076e4:	4825      	ldr	r0, [pc, #148]	; (800777c <vRegisterCLICommands+0x154>)
 80076e6:	f007 f9f9 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80076ea:	4825      	ldr	r0, [pc, #148]	; (8007780 <vRegisterCLICommands+0x158>)
 80076ec:	f007 f9f6 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80076f0:	4b24      	ldr	r3, [pc, #144]	; (8007784 <vRegisterCLICommands+0x15c>)
 80076f2:	2223      	movs	r2, #35	; 0x23
 80076f4:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80076f6:	f004 fb65 	bl	800bdc4 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80076fa:	f7ff ff93 	bl	8007624 <RegisterUserCLICommands>
}
 80076fe:	bd10      	pop	{r4, pc}
 8007700:	0801a74c 	.word	0x0801a74c
 8007704:	0801a6ec 	.word	0x0801a6ec
 8007708:	0801a698 	.word	0x0801a698
 800770c:	0801a0bc 	.word	0x0801a0bc
 8007710:	0801a244 	.word	0x0801a244
 8007714:	0801a794 	.word	0x0801a794
 8007718:	0801a610 	.word	0x0801a610
 800771c:	0801a4d0 	.word	0x0801a4d0
 8007720:	0801ac44 	.word	0x0801ac44
 8007724:	0801a5d4 	.word	0x0801a5d4
 8007728:	0801a850 	.word	0x0801a850
 800772c:	0801a088 	.word	0x0801a088
 8007730:	0801a784 	.word	0x0801a784
 8007734:	0801aaa4 	.word	0x0801aaa4
 8007738:	0801a370 	.word	0x0801a370
 800773c:	0801a1c8 	.word	0x0801a1c8
 8007740:	0801bc64 	.word	0x0801bc64
 8007744:	0801a130 	.word	0x0801a130
 8007748:	0801a89c 	.word	0x0801a89c
 800774c:	0801bcd8 	.word	0x0801bcd8
 8007750:	0801a550 	.word	0x0801a550
 8007754:	0801a274 	.word	0x0801a274
 8007758:	0801ac34 	.word	0x0801ac34
 800775c:	0801a00c 	.word	0x0801a00c
 8007760:	0801a658 	.word	0x0801a658
 8007764:	0801a234 	.word	0x0801a234
 8007768:	0801a108 	.word	0x0801a108
 800776c:	0801bcb0 	.word	0x0801bcb0
 8007770:	0801bbf8 	.word	0x0801bbf8
 8007774:	08019f0c 	.word	0x08019f0c
 8007778:	08019f8c 	.word	0x08019f8c
 800777c:	08019fc4 	.word	0x08019fc4
 8007780:	08019f1c 	.word	0x08019f1c
 8007784:	20006b70 	.word	0x20006b70

08007788 <StopMsgDMA>:
/* External functions --------------------------------------------------------*/
extern void DMA_STREAM_Setup(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num);

/* --- Stop a messaging DMA --- 
 */
void StopMsgDMA(uint8_t port){
 8007788:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800778a:	1e45      	subs	r5, r0, #1
 800778c:	00ec      	lsls	r4, r5, #3
 800778e:	1b60      	subs	r0, r4, r5
 8007790:	00c0      	lsls	r0, r0, #3
 8007792:	4e05      	ldr	r6, [pc, #20]	; (80077a8 <StopMsgDMA+0x20>)
 8007794:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8007796:	f009 fef8 	bl	801158a <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800779a:	1b64      	subs	r4, r4, r5
 800779c:	00e4      	lsls	r4, r4, #3
 800779e:	59a3      	ldr	r3, [r4, r6]
 80077a0:	2200      	movs	r2, #0
 80077a2:	605a      	str	r2, [r3, #4]
}
 80077a4:	bd70      	pop	{r4, r5, r6, pc}
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	200019c4 	.word	0x200019c4

080077ac <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 80077ac:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 80077ae:	1e44      	subs	r4, r0, #1
 80077b0:	00e5      	lsls	r5, r4, #3
 80077b2:	1b28      	subs	r0, r5, r4
 80077b4:	00c0      	lsls	r0, r0, #3
 80077b6:	4e07      	ldr	r6, [pc, #28]	; (80077d4 <StopStreamDMA+0x28>)
 80077b8:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 80077ba:	f009 fee6 	bl	801158a <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80077be:	1b2d      	subs	r5, r5, r4
 80077c0:	00ed      	lsls	r5, r5, #3
 80077c2:	59aa      	ldr	r2, [r5, r6]
 80077c4:	2300      	movs	r3, #0
 80077c6:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 80077c8:	00a4      	lsls	r4, r4, #2
 80077ca:	4a03      	ldr	r2, [pc, #12]	; (80077d8 <StopStreamDMA+0x2c>)
 80077cc:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] =0;
 80077ce:	4a03      	ldr	r2, [pc, #12]	; (80077dc <StopStreamDMA+0x30>)
 80077d0:	50a3      	str	r3, [r4, r2]
	
}
 80077d2:	bd70      	pop	{r4, r5, r6, pc}
 80077d4:	20001bbc 	.word	0x20001bbc
 80077d8:	200016a8 	.word	0x200016a8
 80077dc:	200016d0 	.word	0x200016d0

080077e0 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 80077e0:	b510      	push	{r4, lr}
 80077e2:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 80077e4:	f7ff ffd0 	bl	8007788 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 80077e8:	3c01      	subs	r4, #1
 80077ea:	00e0      	lsls	r0, r4, #3
 80077ec:	1b02      	subs	r2, r0, r4
 80077ee:	00d2      	lsls	r2, r2, #3
 80077f0:	4903      	ldr	r1, [pc, #12]	; (8007800 <SwitchMsgDMAToStream+0x20>)
 80077f2:	5851      	ldr	r1, [r2, r1]
 80077f4:	4b03      	ldr	r3, [pc, #12]	; (8007804 <SwitchMsgDMAToStream+0x24>)
 80077f6:	18d0      	adds	r0, r2, r3
 80077f8:	f005 fa22 	bl	800cc40 <DMA_STREAM_CH_Init>
}
 80077fc:	bd10      	pop	{r4, pc}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	200019c4 	.word	0x200019c4
 8007804:	20001bbc 	.word	0x20001bbc

08007808 <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 8007808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800780a:	b083      	sub	sp, #12
 800780c:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 800780e:	f7ff ffcd 	bl	80077ac <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007812:	9401      	str	r4, [sp, #4]
 8007814:	3c01      	subs	r4, #1
 8007816:	00e7      	lsls	r7, r4, #3
 8007818:	1b3d      	subs	r5, r7, r4
 800781a:	00ed      	lsls	r5, r5, #3
 800781c:	4b0f      	ldr	r3, [pc, #60]	; (800785c <SwitchStreamDMAToMsg+0x54>)
 800781e:	18ed      	adds	r5, r5, r3
 8007820:	4e0f      	ldr	r6, [pc, #60]	; (8007860 <SwitchStreamDMAToMsg+0x58>)
 8007822:	1b3b      	subs	r3, r7, r4
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	5999      	ldr	r1, [r3, r6]
 8007828:	0028      	movs	r0, r5
 800782a:	f005 f993 	bl	800cb54 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 800782e:	1b3b      	subs	r3, r7, r4
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	18f3      	adds	r3, r6, r3
 8007834:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007836:	f004 faef 	bl	800be18 <GetPort>
 800783a:	2300      	movs	r3, #0
 800783c:	4a09      	ldr	r2, [pc, #36]	; (8007864 <SwitchStreamDMAToMsg+0x5c>)
 800783e:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance =0;
 8007840:	1b3f      	subs	r7, r7, r4
 8007842:	00ff      	lsls	r7, r7, #3
 8007844:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port - 1] =0;
 8007846:	00a4      	lsls	r4, r4, #2
 8007848:	4a07      	ldr	r2, [pc, #28]	; (8007868 <SwitchStreamDMAToMsg+0x60>)
 800784a:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 800784c:	9801      	ldr	r0, [sp, #4]
 800784e:	f006 ff7f 	bl	800e750 <GetUart>
 8007852:	0029      	movs	r1, r5
 8007854:	f005 fde8 	bl	800d428 <DMA_MSG_RX_Setup>
	
}
 8007858:	b003      	add	sp, #12
 800785a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800785c:	200019c4 	.word	0x200019c4
 8007860:	20001bbc 	.word	0x20001bbc
 8007864:	200010cc 	.word	0x200010cc
 8007868:	200016bc 	.word	0x200016bc

0800786c <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 800786c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786e:	0005      	movs	r5, r0
 8007870:	000e      	movs	r6, r1
 8007872:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007874:	f004 fad0 	bl	800be18 <GetPort>
 8007878:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800787a:	4b0d      	ldr	r3, [pc, #52]	; (80078b0 <StartDMAstream+0x44>)
 800787c:	5c1b      	ldrb	r3, [r3, r0]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d902      	bls.n	8007888 <StartDMAstream+0x1c>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007882:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007884:	2b03      	cmp	r3, #3
 8007886:	d112      	bne.n	80078ae <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 8007888:	0020      	movs	r0, r4
 800788a:	f7ff ffa9 	bl	80077e0 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 800788e:	1e63      	subs	r3, r4, #1
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4a08      	ldr	r2, [pc, #32]	; (80078b4 <StartDMAstream+0x48>)
 8007894:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 8007896:	4a06      	ldr	r2, [pc, #24]	; (80078b0 <StartDMAstream+0x44>)
 8007898:	2102      	movs	r1, #2
 800789a:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 800789c:	4a06      	ldr	r2, [pc, #24]	; (80078b8 <StartDMAstream+0x4c>)
 800789e:	2100      	movs	r1, #0
 80078a0:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80078a2:	003a      	movs	r2, r7
 80078a4:	0031      	movs	r1, r6
 80078a6:	0028      	movs	r0, r5
 80078a8:	f005 fe1e 	bl	800d4e8 <DMA_STREAM_Setup>
	
	return BOS_OK;
 80078ac:	2000      	movs	r0, #0
}
 80078ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078b0:	200010cc 	.word	0x200010cc
 80078b4:	200016bc 	.word	0x200016bc
 80078b8:	200016a8 	.word	0x200016a8

080078bc <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 80078c0:	4b12      	ldr	r3, [pc, #72]	; (800790c <DMA_IRQHandler+0x50>)
 80078c2:	5c1b      	ldrb	r3, [r3, r0]
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d008      	beq.n	80078da <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 80078c8:	3c01      	subs	r4, #1
 80078ca:	00e0      	lsls	r0, r4, #3
 80078cc:	1b00      	subs	r0, r0, r4
 80078ce:	00c0      	lsls	r0, r0, #3
 80078d0:	4c0f      	ldr	r4, [pc, #60]	; (8007910 <DMA_IRQHandler+0x54>)
 80078d2:	1900      	adds	r0, r0, r4
 80078d4:	f009 fe82 	bl	80115dc <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 80078d8:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80078da:	1e45      	subs	r5, r0, #1
 80078dc:	00e8      	lsls	r0, r5, #3
 80078de:	1b40      	subs	r0, r0, r5
 80078e0:	00c0      	lsls	r0, r0, #3
 80078e2:	4b0c      	ldr	r3, [pc, #48]	; (8007914 <DMA_IRQHandler+0x58>)
 80078e4:	18c0      	adds	r0, r0, r3
 80078e6:	f009 fe79 	bl	80115dc <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 80078ea:	00aa      	lsls	r2, r5, #2
 80078ec:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <DMA_IRQHandler+0x5c>)
 80078ee:	58d2      	ldr	r2, [r2, r3]
 80078f0:	2a00      	cmp	r2, #0
 80078f2:	d006      	beq.n	8007902 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 80078f4:	4909      	ldr	r1, [pc, #36]	; (800791c <DMA_IRQHandler+0x60>)
 80078f6:	00ad      	lsls	r5, r5, #2
 80078f8:	586b      	ldr	r3, [r5, r1]
 80078fa:	3301      	adds	r3, #1
 80078fc:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 80078fe:	429a      	cmp	r2, r3
 8007900:	d8ea      	bhi.n	80078d8 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007902:	0020      	movs	r0, r4
 8007904:	f7ff ff52 	bl	80077ac <StopStreamDMA>
}
 8007908:	e7e6      	b.n	80078d8 <DMA_IRQHandler+0x1c>
 800790a:	46c0      	nop			; (mov r8, r8)
 800790c:	200010cc 	.word	0x200010cc
 8007910:	200019c4 	.word	0x200019c4
 8007914:	20001bbc 	.word	0x20001bbc
 8007918:	200016d0 	.word	0x200016d0
 800791c:	200016a8 	.word	0x200016a8

08007920 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007920:	4b08      	ldr	r3, [pc, #32]	; (8007944 <ResetUartORE+0x24>)
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	2308      	movs	r3, #8
 8007926:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007928:	4a07      	ldr	r2, [pc, #28]	; (8007948 <ResetUartORE+0x28>)
 800792a:	6812      	ldr	r2, [r2, #0]
 800792c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800792e:	4a07      	ldr	r2, [pc, #28]	; (800794c <ResetUartORE+0x2c>)
 8007930:	6812      	ldr	r2, [r2, #0]
 8007932:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007934:	4a06      	ldr	r2, [pc, #24]	; (8007950 <ResetUartORE+0x30>)
 8007936:	6812      	ldr	r2, [r2, #0]
 8007938:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800793a:	4a06      	ldr	r2, [pc, #24]	; (8007954 <ResetUartORE+0x34>)
 800793c:	6812      	ldr	r2, [r2, #0]
 800793e:	6213      	str	r3, [r2, #32]
#endif
}
 8007940:	4770      	bx	lr
 8007942:	46c0      	nop			; (mov r8, r8)
 8007944:	20006e40 	.word	0x20006e40
 8007948:	20006f38 	.word	0x20006f38
 800794c:	20006d18 	.word	0x20006d18
 8007950:	20006dd0 	.word	0x20006dd0
 8007954:	20006ec0 	.word	0x20006ec0

08007958 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	0006      	movs	r6, r0
 800795c:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800795e:	f00a faad 	bl	8011ebc <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007962:	4b2b      	ldr	r3, [pc, #172]	; (8007a10 <EE_VerifyPageFullWriteVariable+0xb8>)
 8007964:	881a      	ldrh	r2, [r3, #0]
 8007966:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007968:	4b2a      	ldr	r3, [pc, #168]	; (8007a14 <EE_VerifyPageFullWriteVariable+0xbc>)
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800796e:	2b00      	cmp	r3, #0
 8007970:	d104      	bne.n	800797c <EE_VerifyPageFullWriteVariable+0x24>
				if(PageStatusA == RECEIVE_DATA){
 8007972:	4929      	ldr	r1, [pc, #164]	; (8007a18 <EE_VerifyPageFullWriteVariable+0xc0>)
 8007974:	428a      	cmp	r2, r1
 8007976:	d007      	beq.n	8007988 <EE_VerifyPageFullWriteVariable+0x30>
					return PAGEB; /* PageB valid */
 8007978:	3302      	adds	r3, #2
 800797a:	e005      	b.n	8007988 <EE_VerifyPageFullWriteVariable+0x30>
			else if(PageStatusA == VALID_PAGE){
 800797c:	2a00      	cmp	r2, #0
 800797e:	d143      	bne.n	8007a08 <EE_VerifyPageFullWriteVariable+0xb0>
				if(PageStatusB == RECEIVE_DATA){
 8007980:	4925      	ldr	r1, [pc, #148]	; (8007a18 <EE_VerifyPageFullWriteVariable+0xc0>)
 8007982:	428b      	cmp	r3, r1
 8007984:	d042      	beq.n	8007a0c <EE_VerifyPageFullWriteVariable+0xb4>
					return PAGEA; /* PageA valid */
 8007986:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE){
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 8007988:	4a24      	ldr	r2, [pc, #144]	; (8007a1c <EE_VerifyPageFullWriteVariable+0xc4>)
 800798a:	189c      	adds	r4, r3, r2
 800798c:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800798e:	02db      	lsls	r3, r3, #11
 8007990:	4a23      	ldr	r2, [pc, #140]	; (8007a20 <EE_VerifyPageFullWriteVariable+0xc8>)
 8007992:	4694      	mov	ip, r2
 8007994:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 8007996:	6822      	ldr	r2, [r4, #0]
 8007998:	3201      	adds	r2, #1
 800799a:	d005      	beq.n	80079a8 <EE_VerifyPageFullWriteVariable+0x50>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800799c:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800799e:	429c      	cmp	r4, r3
 80079a0:	d22e      	bcs.n	8007a00 <EE_VerifyPageFullWriteVariable+0xa8>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 80079a2:	6822      	ldr	r2, [r4, #0]
 80079a4:	3201      	adds	r2, #1
 80079a6:	d1f9      	bne.n	800799c <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 80079a8:	002a      	movs	r2, r5
 80079aa:	2300      	movs	r3, #0
 80079ac:	0021      	movs	r1, r4
 80079ae:	2001      	movs	r0, #1
 80079b0:	f00a face 	bl	8011f50 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079b4:	481b      	ldr	r0, [pc, #108]	; (8007a24 <EE_VerifyPageFullWriteVariable+0xcc>)
 80079b6:	f00a fa9d 	bl	8011ef4 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d003      	beq.n	80079c6 <EE_VerifyPageFullWriteVariable+0x6e>
				return pFlash.ErrorCode;
 80079be:	4b1a      	ldr	r3, [pc, #104]	; (8007a28 <EE_VerifyPageFullWriteVariable+0xd0>)
 80079c0:	69d8      	ldr	r0, [r3, #28]
 80079c2:	b280      	uxth	r0, r0
 80079c4:	e01f      	b.n	8007a06 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80079c6:	4a19      	ldr	r2, [pc, #100]	; (8007a2c <EE_VerifyPageFullWriteVariable+0xd4>)
 80079c8:	6913      	ldr	r3, [r2, #16]
 80079ca:	2101      	movs	r1, #1
 80079cc:	438b      	bics	r3, r1
 80079ce:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 80079d0:	1ca1      	adds	r1, r4, #2
 80079d2:	0032      	movs	r2, r6
 80079d4:	2300      	movs	r3, #0
 80079d6:	2001      	movs	r0, #1
 80079d8:	f00a faba 	bl	8011f50 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079dc:	4811      	ldr	r0, [pc, #68]	; (8007a24 <EE_VerifyPageFullWriteVariable+0xcc>)
 80079de:	f00a fa89 	bl	8011ef4 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d003      	beq.n	80079ee <EE_VerifyPageFullWriteVariable+0x96>
				return pFlash.ErrorCode;
 80079e6:	4b10      	ldr	r3, [pc, #64]	; (8007a28 <EE_VerifyPageFullWriteVariable+0xd0>)
 80079e8:	69d8      	ldr	r0, [r3, #28]
 80079ea:	b280      	uxth	r0, r0
 80079ec:	e00b      	b.n	8007a06 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80079ee:	4a0f      	ldr	r2, [pc, #60]	; (8007a2c <EE_VerifyPageFullWriteVariable+0xd4>)
 80079f0:	6913      	ldr	r3, [r2, #16]
 80079f2:	2101      	movs	r1, #1
 80079f4:	438b      	bics	r3, r1
 80079f6:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 80079f8:	4b0b      	ldr	r3, [pc, #44]	; (8007a28 <EE_VerifyPageFullWriteVariable+0xd0>)
 80079fa:	69d8      	ldr	r0, [r3, #28]
 80079fc:	b280      	uxth	r0, r0
 80079fe:	e002      	b.n	8007a06 <EE_VerifyPageFullWriteVariable+0xae>
		}
	}
	
	HAL_FLASH_Lock();
 8007a00:	f00a fa6e 	bl	8011ee0 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 8007a04:	2080      	movs	r0, #128	; 0x80
}
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
		return NO_VALID_PAGE;
 8007a08:	20ab      	movs	r0, #171	; 0xab
 8007a0a:	e7fc      	b.n	8007a06 <EE_VerifyPageFullWriteVariable+0xae>
					return PAGEB; /* PageB valid */
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	e7bb      	b.n	8007988 <EE_VerifyPageFullWriteVariable+0x30>
 8007a10:	0801e000 	.word	0x0801e000
 8007a14:	0801f000 	.word	0x0801f000
 8007a18:	0000eeee 	.word	0x0000eeee
 8007a1c:	0001003c 	.word	0x0001003c
 8007a20:	0801effe 	.word	0x0801effe
 8007a24:	0000c350 	.word	0x0000c350
 8007a28:	200070e0 	.word	0x200070e0
 8007a2c:	40022000 	.word	0x40022000

08007a30 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 8007a30:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a32:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <EE_ReadVariable+0x50>)
 8007a34:	881c      	ldrh	r4, [r3, #0]
 8007a36:	b2a4      	uxth	r4, r4
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a38:	4b12      	ldr	r3, [pc, #72]	; (8007a84 <EE_ReadVariable+0x54>)
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 8007a3e:	2c00      	cmp	r4, #0
 8007a40:	d006      	beq.n	8007a50 <EE_ReadVariable+0x20>
			else if(PageStatusB == VALID_PAGE){
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <EE_ReadVariable+0x1e>
		return NO_VALID_PAGE;
 8007a46:	20ab      	movs	r0, #171	; 0xab
 8007a48:	e019      	b.n	8007a7e <EE_ReadVariable+0x4e>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 8007a4a:	2001      	movs	r0, #1
 8007a4c:	e017      	b.n	8007a7e <EE_ReadVariable+0x4e>
				return PAGEB; /* PageB valid */
 8007a4e:	2402      	movs	r4, #2
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 8007a50:	02e3      	lsls	r3, r4, #11
 8007a52:	4a0d      	ldr	r2, [pc, #52]	; (8007a88 <EE_ReadVariable+0x58>)
 8007a54:	4694      	mov	ip, r2
 8007a56:	4463      	add	r3, ip
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 8007a58:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)){
 8007a5a:	4a0c      	ldr	r2, [pc, #48]	; (8007a8c <EE_ReadVariable+0x5c>)
 8007a5c:	4694      	mov	ip, r2
 8007a5e:	4464      	add	r4, ip
		AddressValue =(*(__IO uint16_t* )Address);
 8007a60:	881a      	ldrh	r2, [r3, #0]
 8007a62:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 8007a64:	4290      	cmp	r0, r2
 8007a66:	d006      	beq.n	8007a76 <EE_ReadVariable+0x46>
			Address =Address - 4;
 8007a68:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 8007a6a:	42a3      	cmp	r3, r4
 8007a6c:	d9ed      	bls.n	8007a4a <EE_ReadVariable+0x1a>
		AddressValue =(*(__IO uint16_t* )Address);
 8007a6e:	881a      	ldrh	r2, [r3, #0]
 8007a70:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 8007a72:	4282      	cmp	r2, r0
 8007a74:	d1f8      	bne.n	8007a68 <EE_ReadVariable+0x38>
			*Data =(*(__IO uint16_t* )(Address - 2));
 8007a76:	3b02      	subs	r3, #2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 8007a7c:	2000      	movs	r0, #0
}
 8007a7e:	bd10      	pop	{r4, pc}
 8007a80:	0801e000 	.word	0x0801e000
 8007a84:	0801f000 	.word	0x0801f000
 8007a88:	0801effe 	.word	0x0801effe
 8007a8c:	0801e002 	.word	0x0801e002

08007a90 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a92:	46de      	mov	lr, fp
 8007a94:	4647      	mov	r7, r8
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	0005      	movs	r5, r0
 8007a9c:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 8007a9e:	f00a fa0d 	bl	8011ebc <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007aa2:	0031      	movs	r1, r6
 8007aa4:	0028      	movs	r0, r5
 8007aa6:	f7ff ff57 	bl	8007958 <EE_VerifyPageFullWriteVariable>
 8007aaa:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 8007aac:	2880      	cmp	r0, #128	; 0x80
 8007aae:	d007      	beq.n	8007ac0 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 8007ab0:	f00a fa16 	bl	8011ee0 <HAL_FLASH_Lock>
}
 8007ab4:	0020      	movs	r0, r4
 8007ab6:	b003      	add	sp, #12
 8007ab8:	bc0c      	pop	{r2, r3}
 8007aba:	4690      	mov	r8, r2
 8007abc:	469b      	mov	fp, r3
 8007abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 8007ac0:	f00a f9fc 	bl	8011ebc <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007ac4:	4b3e      	ldr	r3, [pc, #248]	; (8007bc0 <EE_WriteVariable+0x130>)
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007aca:	4a3e      	ldr	r2, [pc, #248]	; (8007bc4 <EE_WriteVariable+0x134>)
 8007acc:	8812      	ldrh	r2, [r2, #0]
 8007ace:	b292      	uxth	r2, r2
			if(PageStatusA == VALID_PAGE){
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d007      	beq.n	8007ae4 <EE_WriteVariable+0x54>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 8007ad4:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 8007ad6:	2a00      	cmp	r2, #0
 8007ad8:	d1ea      	bne.n	8007ab0 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 8007ada:	4b3a      	ldr	r3, [pc, #232]	; (8007bc4 <EE_WriteVariable+0x134>)
 8007adc:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007ade:	4b38      	ldr	r3, [pc, #224]	; (8007bc0 <EE_WriteVariable+0x130>)
 8007ae0:	9301      	str	r3, [sp, #4]
 8007ae2:	e003      	b.n	8007aec <EE_WriteVariable+0x5c>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007ae4:	4b36      	ldr	r3, [pc, #216]	; (8007bc0 <EE_WriteVariable+0x130>)
 8007ae6:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007ae8:	4b36      	ldr	r3, [pc, #216]	; (8007bc4 <EE_WriteVariable+0x134>)
 8007aea:	9301      	str	r3, [sp, #4]
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 8007aec:	4a36      	ldr	r2, [pc, #216]	; (8007bc8 <EE_WriteVariable+0x138>)
 8007aee:	2300      	movs	r3, #0
 8007af0:	9901      	ldr	r1, [sp, #4]
 8007af2:	2001      	movs	r0, #1
 8007af4:	f00a fa2c 	bl	8011f50 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007af8:	4834      	ldr	r0, [pc, #208]	; (8007bcc <EE_WriteVariable+0x13c>)
 8007afa:	f00a f9fb 	bl	8011ef4 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d003      	beq.n	8007b0a <EE_WriteVariable+0x7a>
		return pFlash.ErrorCode;
 8007b02:	4b33      	ldr	r3, [pc, #204]	; (8007bd0 <EE_WriteVariable+0x140>)
 8007b04:	69dc      	ldr	r4, [r3, #28]
 8007b06:	b2a4      	uxth	r4, r4
 8007b08:	e7d2      	b.n	8007ab0 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b0a:	4a32      	ldr	r2, [pc, #200]	; (8007bd4 <EE_WriteVariable+0x144>)
 8007b0c:	6913      	ldr	r3, [r2, #16]
 8007b0e:	2101      	movs	r1, #1
 8007b10:	438b      	bics	r3, r1
 8007b12:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007b14:	0031      	movs	r1, r6
 8007b16:	0028      	movs	r0, r5
 8007b18:	f7ff ff1e 	bl	8007958 <EE_VerifyPageFullWriteVariable>
 8007b1c:	1e04      	subs	r4, r0, #0
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 8007b1e:	d1c7      	bne.n	8007ab0 <EE_WriteVariable+0x20>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007b20:	2701      	movs	r7, #1
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b22:	4b2d      	ldr	r3, [pc, #180]	; (8007bd8 <EE_WriteVariable+0x148>)
 8007b24:	4698      	mov	r8, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007b26:	4e2d      	ldr	r6, [pc, #180]	; (8007bdc <EE_WriteVariable+0x14c>)
 8007b28:	e003      	b.n	8007b32 <EE_WriteVariable+0xa2>
 8007b2a:	3701      	adds	r7, #1
 8007b2c:	b2bf      	uxth	r7, r7
 8007b2e:	42b7      	cmp	r7, r6
 8007b30:	d00f      	beq.n	8007b52 <EE_WriteVariable+0xc2>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 8007b32:	42bd      	cmp	r5, r7
 8007b34:	d0f9      	beq.n	8007b2a <EE_WriteVariable+0x9a>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b36:	4928      	ldr	r1, [pc, #160]	; (8007bd8 <EE_WriteVariable+0x148>)
 8007b38:	0038      	movs	r0, r7
 8007b3a:	f7ff ff79 	bl	8007a30 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 8007b3e:	2801      	cmp	r0, #1
 8007b40:	d0f3      	beq.n	8007b2a <EE_WriteVariable+0x9a>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b42:	4643      	mov	r3, r8
 8007b44:	8819      	ldrh	r1, [r3, #0]
 8007b46:	0038      	movs	r0, r7
 8007b48:	f7ff ff06 	bl	8007958 <EE_VerifyPageFullWriteVariable>
 8007b4c:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 8007b4e:	d0ec      	beq.n	8007b2a <EE_WriteVariable+0x9a>
 8007b50:	e7ae      	b.n	8007ab0 <EE_WriteVariable+0x20>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 8007b52:	4658      	mov	r0, fp
 8007b54:	f00a fa74 	bl	8012040 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b58:	481c      	ldr	r0, [pc, #112]	; (8007bcc <EE_WriteVariable+0x13c>)
 8007b5a:	f00a f9cb 	bl	8011ef4 <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d003      	beq.n	8007b6a <EE_WriteVariable+0xda>
		return pFlash.ErrorCode;
 8007b62:	4b1b      	ldr	r3, [pc, #108]	; (8007bd0 <EE_WriteVariable+0x140>)
 8007b64:	69dc      	ldr	r4, [r3, #28]
 8007b66:	b2a4      	uxth	r4, r4
 8007b68:	e7a2      	b.n	8007ab0 <EE_WriteVariable+0x20>
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007b6a:	2080      	movs	r0, #128	; 0x80
 8007b6c:	0100      	lsls	r0, r0, #4
 8007b6e:	4458      	add	r0, fp
 8007b70:	f00a fa66 	bl	8012040 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b74:	4815      	ldr	r0, [pc, #84]	; (8007bcc <EE_WriteVariable+0x13c>)
 8007b76:	f00a f9bd 	bl	8011ef4 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d003      	beq.n	8007b86 <EE_WriteVariable+0xf6>
			return pFlash.ErrorCode;
 8007b7e:	4b14      	ldr	r3, [pc, #80]	; (8007bd0 <EE_WriteVariable+0x140>)
 8007b80:	69dc      	ldr	r4, [r3, #28]
 8007b82:	b2a4      	uxth	r4, r4
 8007b84:	e794      	b.n	8007ab0 <EE_WriteVariable+0x20>
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007b86:	4a13      	ldr	r2, [pc, #76]	; (8007bd4 <EE_WriteVariable+0x144>)
 8007b88:	6913      	ldr	r3, [r2, #16]
 8007b8a:	2102      	movs	r1, #2
 8007b8c:	438b      	bics	r3, r1
 8007b8e:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007b90:	2200      	movs	r2, #0
 8007b92:	2300      	movs	r3, #0
 8007b94:	9901      	ldr	r1, [sp, #4]
 8007b96:	2001      	movs	r0, #1
 8007b98:	f00a f9da 	bl	8011f50 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b9c:	480b      	ldr	r0, [pc, #44]	; (8007bcc <EE_WriteVariable+0x13c>)
 8007b9e:	f00a f9a9 	bl	8011ef4 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d003      	beq.n	8007bae <EE_WriteVariable+0x11e>
		return pFlash.ErrorCode;
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <EE_WriteVariable+0x140>)
 8007ba8:	69dc      	ldr	r4, [r3, #28]
 8007baa:	b2a4      	uxth	r4, r4
 8007bac:	e780      	b.n	8007ab0 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bae:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <EE_WriteVariable+0x144>)
 8007bb0:	6913      	ldr	r3, [r2, #16]
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	438b      	bics	r3, r1
 8007bb6:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 8007bb8:	f00a f992 	bl	8011ee0 <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 8007bbc:	2400      	movs	r4, #0
 8007bbe:	e777      	b.n	8007ab0 <EE_WriteVariable+0x20>
 8007bc0:	0801e000 	.word	0x0801e000
 8007bc4:	0801f000 	.word	0x0801f000
 8007bc8:	0000eeee 	.word	0x0000eeee
 8007bcc:	0000c350 	.word	0x0000c350
 8007bd0:	200070e0 	.word	0x200070e0
 8007bd4:	40022000 	.word	0x40022000
 8007bd8:	200016e4 	.word	0x200016e4
 8007bdc:	00000401 	.word	0x00000401

08007be0 <EE_Format>:
uint16_t EE_Format(void){
 8007be0:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007be2:	f00a f96b 	bl	8011ebc <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007be6:	4829      	ldr	r0, [pc, #164]	; (8007c8c <EE_Format+0xac>)
 8007be8:	f00a fa2a 	bl	8012040 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bec:	4828      	ldr	r0, [pc, #160]	; (8007c90 <EE_Format+0xb0>)
 8007bee:	f00a f981 	bl	8011ef4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d003      	beq.n	8007bfe <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007bf6:	4b27      	ldr	r3, [pc, #156]	; (8007c94 <EE_Format+0xb4>)
 8007bf8:	69d8      	ldr	r0, [r3, #28]
 8007bfa:	b280      	uxth	r0, r0
}
 8007bfc:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007bfe:	4826      	ldr	r0, [pc, #152]	; (8007c98 <EE_Format+0xb8>)
 8007c00:	f00a fa1e 	bl	8012040 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c04:	4822      	ldr	r0, [pc, #136]	; (8007c90 <EE_Format+0xb0>)
 8007c06:	f00a f975 	bl	8011ef4 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d003      	beq.n	8007c16 <EE_Format+0x36>
			return pFlash.ErrorCode;
 8007c0e:	4b21      	ldr	r3, [pc, #132]	; (8007c94 <EE_Format+0xb4>)
 8007c10:	69d8      	ldr	r0, [r3, #28]
 8007c12:	b280      	uxth	r0, r0
 8007c14:	e7f2      	b.n	8007bfc <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c16:	4a21      	ldr	r2, [pc, #132]	; (8007c9c <EE_Format+0xbc>)
 8007c18:	6913      	ldr	r3, [r2, #16]
 8007c1a:	2102      	movs	r1, #2
 8007c1c:	438b      	bics	r3, r1
 8007c1e:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c20:	2200      	movs	r2, #0
 8007c22:	2300      	movs	r3, #0
 8007c24:	4919      	ldr	r1, [pc, #100]	; (8007c8c <EE_Format+0xac>)
 8007c26:	2001      	movs	r0, #1
 8007c28:	f00a f992 	bl	8011f50 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c2c:	4818      	ldr	r0, [pc, #96]	; (8007c90 <EE_Format+0xb0>)
 8007c2e:	f00a f961 	bl	8011ef4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d003      	beq.n	8007c3e <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007c36:	4b17      	ldr	r3, [pc, #92]	; (8007c94 <EE_Format+0xb4>)
 8007c38:	69d8      	ldr	r0, [r3, #28]
 8007c3a:	b280      	uxth	r0, r0
 8007c3c:	e7de      	b.n	8007bfc <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c3e:	4a17      	ldr	r2, [pc, #92]	; (8007c9c <EE_Format+0xbc>)
 8007c40:	6913      	ldr	r3, [r2, #16]
 8007c42:	2101      	movs	r1, #1
 8007c44:	438b      	bics	r3, r1
 8007c46:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c48:	4815      	ldr	r0, [pc, #84]	; (8007ca0 <EE_Format+0xc0>)
 8007c4a:	f00a f9f9 	bl	8012040 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c4e:	4810      	ldr	r0, [pc, #64]	; (8007c90 <EE_Format+0xb0>)
 8007c50:	f00a f950 	bl	8011ef4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d003      	beq.n	8007c60 <EE_Format+0x80>
		return pFlash.ErrorCode;
 8007c58:	4b0e      	ldr	r3, [pc, #56]	; (8007c94 <EE_Format+0xb4>)
 8007c5a:	69d8      	ldr	r0, [r3, #28]
 8007c5c:	b280      	uxth	r0, r0
 8007c5e:	e7cd      	b.n	8007bfc <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c60:	4810      	ldr	r0, [pc, #64]	; (8007ca4 <EE_Format+0xc4>)
 8007c62:	f00a f9ed 	bl	8012040 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c66:	480a      	ldr	r0, [pc, #40]	; (8007c90 <EE_Format+0xb0>)
 8007c68:	f00a f944 	bl	8011ef4 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d003      	beq.n	8007c78 <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007c70:	4b08      	ldr	r3, [pc, #32]	; (8007c94 <EE_Format+0xb4>)
 8007c72:	69d8      	ldr	r0, [r3, #28]
 8007c74:	b280      	uxth	r0, r0
 8007c76:	e7c1      	b.n	8007bfc <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c78:	4a08      	ldr	r2, [pc, #32]	; (8007c9c <EE_Format+0xbc>)
 8007c7a:	6913      	ldr	r3, [r2, #16]
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	438b      	bics	r3, r1
 8007c80:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007c82:	f00a f92d 	bl	8011ee0 <HAL_FLASH_Lock>
	return FlashStatus;
 8007c86:	2000      	movs	r0, #0
 8007c88:	e7b8      	b.n	8007bfc <EE_Format+0x1c>
 8007c8a:	46c0      	nop			; (mov r8, r8)
 8007c8c:	0801e000 	.word	0x0801e000
 8007c90:	0000c350 	.word	0x0000c350
 8007c94:	200070e0 	.word	0x200070e0
 8007c98:	0801e800 	.word	0x0801e800
 8007c9c:	40022000 	.word	0x40022000
 8007ca0:	0801f000 	.word	0x0801f000
 8007ca4:	0801f800 	.word	0x0801f800

08007ca8 <EE_Init>:
uint16_t EE_Init(void){
 8007ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007caa:	46c6      	mov	lr, r8
 8007cac:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 8007cae:	f00a f905 	bl	8011ebc <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007cb2:	4bbe      	ldr	r3, [pc, #760]	; (8007fac <EE_Init+0x304>)
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007cb8:	4abd      	ldr	r2, [pc, #756]	; (8007fb0 <EE_Init+0x308>)
 8007cba:	8812      	ldrh	r2, [r2, #0]
 8007cbc:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007cbe:	49bd      	ldr	r1, [pc, #756]	; (8007fb4 <EE_Init+0x30c>)
 8007cc0:	428b      	cmp	r3, r1
 8007cc2:	d100      	bne.n	8007cc6 <EE_Init+0x1e>
 8007cc4:	e074      	b.n	8007db0 <EE_Init+0x108>
 8007cc6:	49bc      	ldr	r1, [pc, #752]	; (8007fb8 <EE_Init+0x310>)
 8007cc8:	428b      	cmp	r3, r1
 8007cca:	d011      	beq.n	8007cf0 <EE_Init+0x48>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d100      	bne.n	8007cd2 <EE_Init+0x2a>
 8007cd0:	e109      	b.n	8007ee6 <EE_Init+0x23e>
			FlashStatus =EE_Format();
 8007cd2:	f7ff ff85 	bl	8007be0 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cd6:	48b9      	ldr	r0, [pc, #740]	; (8007fbc <EE_Init+0x314>)
 8007cd8:	f00a f90c 	bl	8011ef4 <FLASH_WaitForLastOperation>
 8007cdc:	b286      	uxth	r6, r0
			if(FlashStatus != HAL_OK){
 8007cde:	2e00      	cmp	r6, #0
 8007ce0:	d102      	bne.n	8007ce8 <EE_Init+0x40>
	HAL_FLASH_Lock();
 8007ce2:	f00a f8fd 	bl	8011ee0 <HAL_FLASH_Lock>
	return HAL_OK;
 8007ce6:	2600      	movs	r6, #0
}
 8007ce8:	0030      	movs	r0, r6
 8007cea:	bc04      	pop	{r2}
 8007cec:	4690      	mov	r8, r2
 8007cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007cf0:	2a00      	cmp	r2, #0
 8007cf2:	d00d      	beq.n	8007d10 <EE_Init+0x68>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007cf4:	4baf      	ldr	r3, [pc, #700]	; (8007fb4 <EE_Init+0x30c>)
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d028      	beq.n	8007d4c <EE_Init+0xa4>
				FlashStatus =EE_Format();
 8007cfa:	f7ff ff71 	bl	8007be0 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cfe:	48af      	ldr	r0, [pc, #700]	; (8007fbc <EE_Init+0x314>)
 8007d00:	f00a f8f8 	bl	8011ef4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d0ec      	beq.n	8007ce2 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007d08:	4bad      	ldr	r3, [pc, #692]	; (8007fc0 <EE_Init+0x318>)
 8007d0a:	69de      	ldr	r6, [r3, #28]
 8007d0c:	b2b6      	uxth	r6, r6
 8007d0e:	e7eb      	b.n	8007ce8 <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007d10:	48a6      	ldr	r0, [pc, #664]	; (8007fac <EE_Init+0x304>)
 8007d12:	f00a f995 	bl	8012040 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d16:	48a9      	ldr	r0, [pc, #676]	; (8007fbc <EE_Init+0x314>)
 8007d18:	f00a f8ec 	bl	8011ef4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d003      	beq.n	8007d28 <EE_Init+0x80>
					return pFlash.ErrorCode;
 8007d20:	4ba7      	ldr	r3, [pc, #668]	; (8007fc0 <EE_Init+0x318>)
 8007d22:	69de      	ldr	r6, [r3, #28]
 8007d24:	b2b6      	uxth	r6, r6
 8007d26:	e7df      	b.n	8007ce8 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007d28:	48a6      	ldr	r0, [pc, #664]	; (8007fc4 <EE_Init+0x31c>)
 8007d2a:	f00a f989 	bl	8012040 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d2e:	48a3      	ldr	r0, [pc, #652]	; (8007fbc <EE_Init+0x314>)
 8007d30:	f00a f8e0 	bl	8011ef4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007d34:	2800      	cmp	r0, #0
 8007d36:	d105      	bne.n	8007d44 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007d38:	4aa3      	ldr	r2, [pc, #652]	; (8007fc8 <EE_Init+0x320>)
 8007d3a:	6913      	ldr	r3, [r2, #16]
 8007d3c:	2102      	movs	r1, #2
 8007d3e:	438b      	bics	r3, r1
 8007d40:	6113      	str	r3, [r2, #16]
 8007d42:	e7ce      	b.n	8007ce2 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007d44:	4b9e      	ldr	r3, [pc, #632]	; (8007fc0 <EE_Init+0x318>)
 8007d46:	69de      	ldr	r6, [r3, #28]
 8007d48:	b2b6      	uxth	r6, r6
 8007d4a:	e7cd      	b.n	8007ce8 <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007d4c:	4897      	ldr	r0, [pc, #604]	; (8007fac <EE_Init+0x304>)
 8007d4e:	f00a f977 	bl	8012040 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d52:	489a      	ldr	r0, [pc, #616]	; (8007fbc <EE_Init+0x314>)
 8007d54:	f00a f8ce 	bl	8011ef4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d003      	beq.n	8007d64 <EE_Init+0xbc>
					return pFlash.ErrorCode;
 8007d5c:	4b98      	ldr	r3, [pc, #608]	; (8007fc0 <EE_Init+0x318>)
 8007d5e:	69de      	ldr	r6, [r3, #28]
 8007d60:	b2b6      	uxth	r6, r6
 8007d62:	e7c1      	b.n	8007ce8 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007d64:	4897      	ldr	r0, [pc, #604]	; (8007fc4 <EE_Init+0x31c>)
 8007d66:	f00a f96b 	bl	8012040 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d6a:	4894      	ldr	r0, [pc, #592]	; (8007fbc <EE_Init+0x314>)
 8007d6c:	f00a f8c2 	bl	8011ef4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d003      	beq.n	8007d7c <EE_Init+0xd4>
						return pFlash.ErrorCode;
 8007d74:	4b92      	ldr	r3, [pc, #584]	; (8007fc0 <EE_Init+0x318>)
 8007d76:	69de      	ldr	r6, [r3, #28]
 8007d78:	b2b6      	uxth	r6, r6
 8007d7a:	e7b5      	b.n	8007ce8 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007d7c:	4a92      	ldr	r2, [pc, #584]	; (8007fc8 <EE_Init+0x320>)
 8007d7e:	6913      	ldr	r3, [r2, #16]
 8007d80:	2102      	movs	r1, #2
 8007d82:	438b      	bics	r3, r1
 8007d84:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007d86:	2200      	movs	r2, #0
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4989      	ldr	r1, [pc, #548]	; (8007fb0 <EE_Init+0x308>)
 8007d8c:	2001      	movs	r0, #1
 8007d8e:	f00a f8df 	bl	8011f50 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d92:	488a      	ldr	r0, [pc, #552]	; (8007fbc <EE_Init+0x314>)
 8007d94:	f00a f8ae 	bl	8011ef4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d105      	bne.n	8007da8 <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007d9c:	4a8a      	ldr	r2, [pc, #552]	; (8007fc8 <EE_Init+0x320>)
 8007d9e:	6913      	ldr	r3, [r2, #16]
 8007da0:	2101      	movs	r1, #1
 8007da2:	438b      	bics	r3, r1
 8007da4:	6113      	str	r3, [r2, #16]
 8007da6:	e79c      	b.n	8007ce2 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007da8:	4b85      	ldr	r3, [pc, #532]	; (8007fc0 <EE_Init+0x318>)
 8007daa:	69de      	ldr	r6, [r3, #28]
 8007dac:	b2b6      	uxth	r6, r6
 8007dae:	e79b      	b.n	8007ce8 <EE_Init+0x40>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007db0:	2a00      	cmp	r2, #0
 8007db2:	d157      	bne.n	8007e64 <EE_Init+0x1bc>
 8007db4:	2401      	movs	r4, #1
	int16_t x =-1;
 8007db6:	2701      	movs	r7, #1
 8007db8:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007dba:	4d84      	ldr	r5, [pc, #528]	; (8007fcc <EE_Init+0x324>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007dbc:	4b84      	ldr	r3, [pc, #528]	; (8007fd0 <EE_Init+0x328>)
 8007dbe:	4698      	mov	r8, r3
 8007dc0:	e005      	b.n	8007dce <EE_Init+0x126>
						x =VarIdx;
 8007dc2:	b227      	sxth	r7, r4
 8007dc4:	e008      	b.n	8007dd8 <EE_Init+0x130>
 8007dc6:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007dc8:	4b82      	ldr	r3, [pc, #520]	; (8007fd4 <EE_Init+0x32c>)
 8007dca:	429c      	cmp	r4, r3
 8007dcc:	d018      	beq.n	8007e00 <EE_Init+0x158>
 8007dce:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007dd0:	882b      	ldrh	r3, [r5, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	42b3      	cmp	r3, r6
 8007dd6:	d0f4      	beq.n	8007dc2 <EE_Init+0x11a>
					if(VarIdx != x){
 8007dd8:	42bc      	cmp	r4, r7
 8007dda:	d0f4      	beq.n	8007dc6 <EE_Init+0x11e>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007ddc:	497c      	ldr	r1, [pc, #496]	; (8007fd0 <EE_Init+0x328>)
 8007dde:	0030      	movs	r0, r6
 8007de0:	f7ff fe26 	bl	8007a30 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007de4:	2801      	cmp	r0, #1
 8007de6:	d0ee      	beq.n	8007dc6 <EE_Init+0x11e>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007de8:	4643      	mov	r3, r8
 8007dea:	8819      	ldrh	r1, [r3, #0]
 8007dec:	0030      	movs	r0, r6
 8007dee:	f7ff fdb3 	bl	8007958 <EE_VerifyPageFullWriteVariable>
 8007df2:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007df4:	4871      	ldr	r0, [pc, #452]	; (8007fbc <EE_Init+0x314>)
 8007df6:	f00a f87d 	bl	8011ef4 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d0e3      	beq.n	8007dc6 <EE_Init+0x11e>
 8007dfe:	e773      	b.n	8007ce8 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007e00:	2200      	movs	r2, #0
 8007e02:	2300      	movs	r3, #0
 8007e04:	4969      	ldr	r1, [pc, #420]	; (8007fac <EE_Init+0x304>)
 8007e06:	2001      	movs	r0, #1
 8007e08:	f00a f8a2 	bl	8011f50 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e0c:	486b      	ldr	r0, [pc, #428]	; (8007fbc <EE_Init+0x314>)
 8007e0e:	f00a f871 	bl	8011ef4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d003      	beq.n	8007e1e <EE_Init+0x176>
					return pFlash.ErrorCode;
 8007e16:	4b6a      	ldr	r3, [pc, #424]	; (8007fc0 <EE_Init+0x318>)
 8007e18:	69de      	ldr	r6, [r3, #28]
 8007e1a:	b2b6      	uxth	r6, r6
 8007e1c:	e764      	b.n	8007ce8 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007e1e:	4a6a      	ldr	r2, [pc, #424]	; (8007fc8 <EE_Init+0x320>)
 8007e20:	6913      	ldr	r3, [r2, #16]
 8007e22:	2101      	movs	r1, #1
 8007e24:	438b      	bics	r3, r1
 8007e26:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007e28:	4861      	ldr	r0, [pc, #388]	; (8007fb0 <EE_Init+0x308>)
 8007e2a:	f00a f909 	bl	8012040 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e2e:	4863      	ldr	r0, [pc, #396]	; (8007fbc <EE_Init+0x314>)
 8007e30:	f00a f860 	bl	8011ef4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d003      	beq.n	8007e40 <EE_Init+0x198>
					return pFlash.ErrorCode;
 8007e38:	4b61      	ldr	r3, [pc, #388]	; (8007fc0 <EE_Init+0x318>)
 8007e3a:	69de      	ldr	r6, [r3, #28]
 8007e3c:	b2b6      	uxth	r6, r6
 8007e3e:	e753      	b.n	8007ce8 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007e40:	4865      	ldr	r0, [pc, #404]	; (8007fd8 <EE_Init+0x330>)
 8007e42:	f00a f8fd 	bl	8012040 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e46:	485d      	ldr	r0, [pc, #372]	; (8007fbc <EE_Init+0x314>)
 8007e48:	f00a f854 	bl	8011ef4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d105      	bne.n	8007e5c <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007e50:	4a5d      	ldr	r2, [pc, #372]	; (8007fc8 <EE_Init+0x320>)
 8007e52:	6913      	ldr	r3, [r2, #16]
 8007e54:	2102      	movs	r1, #2
 8007e56:	438b      	bics	r3, r1
 8007e58:	6113      	str	r3, [r2, #16]
 8007e5a:	e742      	b.n	8007ce2 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007e5c:	4b58      	ldr	r3, [pc, #352]	; (8007fc0 <EE_Init+0x318>)
 8007e5e:	69de      	ldr	r6, [r3, #28]
 8007e60:	b2b6      	uxth	r6, r6
 8007e62:	e741      	b.n	8007ce8 <EE_Init+0x40>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007e64:	4b54      	ldr	r3, [pc, #336]	; (8007fb8 <EE_Init+0x310>)
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d00b      	beq.n	8007e82 <EE_Init+0x1da>
				FlashStatus =EE_Format();
 8007e6a:	f7ff feb9 	bl	8007be0 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e6e:	4853      	ldr	r0, [pc, #332]	; (8007fbc <EE_Init+0x314>)
 8007e70:	f00a f840 	bl	8011ef4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d100      	bne.n	8007e7a <EE_Init+0x1d2>
 8007e78:	e733      	b.n	8007ce2 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007e7a:	4b51      	ldr	r3, [pc, #324]	; (8007fc0 <EE_Init+0x318>)
 8007e7c:	69de      	ldr	r6, [r3, #28]
 8007e7e:	b2b6      	uxth	r6, r6
 8007e80:	e732      	b.n	8007ce8 <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007e82:	484b      	ldr	r0, [pc, #300]	; (8007fb0 <EE_Init+0x308>)
 8007e84:	f00a f8dc 	bl	8012040 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e88:	484c      	ldr	r0, [pc, #304]	; (8007fbc <EE_Init+0x314>)
 8007e8a:	f00a f833 	bl	8011ef4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d003      	beq.n	8007e9a <EE_Init+0x1f2>
					return pFlash.ErrorCode;
 8007e92:	4b4b      	ldr	r3, [pc, #300]	; (8007fc0 <EE_Init+0x318>)
 8007e94:	69de      	ldr	r6, [r3, #28]
 8007e96:	b2b6      	uxth	r6, r6
 8007e98:	e726      	b.n	8007ce8 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007e9a:	484f      	ldr	r0, [pc, #316]	; (8007fd8 <EE_Init+0x330>)
 8007e9c:	f00a f8d0 	bl	8012040 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ea0:	4846      	ldr	r0, [pc, #280]	; (8007fbc <EE_Init+0x314>)
 8007ea2:	f00a f827 	bl	8011ef4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d003      	beq.n	8007eb2 <EE_Init+0x20a>
						return pFlash.ErrorCode;
 8007eaa:	4b45      	ldr	r3, [pc, #276]	; (8007fc0 <EE_Init+0x318>)
 8007eac:	69de      	ldr	r6, [r3, #28]
 8007eae:	b2b6      	uxth	r6, r6
 8007eb0:	e71a      	b.n	8007ce8 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007eb2:	4a45      	ldr	r2, [pc, #276]	; (8007fc8 <EE_Init+0x320>)
 8007eb4:	6913      	ldr	r3, [r2, #16]
 8007eb6:	2102      	movs	r1, #2
 8007eb8:	438b      	bics	r3, r1
 8007eba:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	493a      	ldr	r1, [pc, #232]	; (8007fac <EE_Init+0x304>)
 8007ec2:	2001      	movs	r0, #1
 8007ec4:	f00a f844 	bl	8011f50 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ec8:	483c      	ldr	r0, [pc, #240]	; (8007fbc <EE_Init+0x314>)
 8007eca:	f00a f813 	bl	8011ef4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d003      	beq.n	8007eda <EE_Init+0x232>
					return pFlash.ErrorCode;
 8007ed2:	4b3b      	ldr	r3, [pc, #236]	; (8007fc0 <EE_Init+0x318>)
 8007ed4:	69de      	ldr	r6, [r3, #28]
 8007ed6:	b2b6      	uxth	r6, r6
 8007ed8:	e706      	b.n	8007ce8 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007eda:	4a3b      	ldr	r2, [pc, #236]	; (8007fc8 <EE_Init+0x320>)
 8007edc:	6913      	ldr	r3, [r2, #16]
 8007ede:	2101      	movs	r1, #1
 8007ee0:	438b      	bics	r3, r1
 8007ee2:	6113      	str	r3, [r2, #16]
 8007ee4:	e6fd      	b.n	8007ce2 <EE_Init+0x3a>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007ee6:	2a00      	cmp	r2, #0
 8007ee8:	d009      	beq.n	8007efe <EE_Init+0x256>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007eea:	4b33      	ldr	r3, [pc, #204]	; (8007fb8 <EE_Init+0x310>)
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d010      	beq.n	8007f12 <EE_Init+0x26a>
 8007ef0:	2401      	movs	r4, #1
	int16_t x =-1;
 8007ef2:	2701      	movs	r7, #1
 8007ef4:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007ef6:	4d39      	ldr	r5, [pc, #228]	; (8007fdc <EE_Init+0x334>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007ef8:	4b35      	ldr	r3, [pc, #212]	; (8007fd0 <EE_Init+0x328>)
 8007efa:	4698      	mov	r8, r3
 8007efc:	e02d      	b.n	8007f5a <EE_Init+0x2b2>
				FlashStatus =EE_Format();
 8007efe:	f7ff fe6f 	bl	8007be0 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f02:	482e      	ldr	r0, [pc, #184]	; (8007fbc <EE_Init+0x314>)
 8007f04:	f009 fff6 	bl	8011ef4 <FLASH_WaitForLastOperation>
 8007f08:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK){
 8007f0a:	2e00      	cmp	r6, #0
 8007f0c:	d100      	bne.n	8007f10 <EE_Init+0x268>
 8007f0e:	e6e8      	b.n	8007ce2 <EE_Init+0x3a>
 8007f10:	e6ea      	b.n	8007ce8 <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007f12:	4827      	ldr	r0, [pc, #156]	; (8007fb0 <EE_Init+0x308>)
 8007f14:	f00a f894 	bl	8012040 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f18:	4828      	ldr	r0, [pc, #160]	; (8007fbc <EE_Init+0x314>)
 8007f1a:	f009 ffeb 	bl	8011ef4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d003      	beq.n	8007f2a <EE_Init+0x282>
					return pFlash.ErrorCode;
 8007f22:	4b27      	ldr	r3, [pc, #156]	; (8007fc0 <EE_Init+0x318>)
 8007f24:	69de      	ldr	r6, [r3, #28]
 8007f26:	b2b6      	uxth	r6, r6
 8007f28:	e6de      	b.n	8007ce8 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007f2a:	482b      	ldr	r0, [pc, #172]	; (8007fd8 <EE_Init+0x330>)
 8007f2c:	f00a f888 	bl	8012040 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f30:	4822      	ldr	r0, [pc, #136]	; (8007fbc <EE_Init+0x314>)
 8007f32:	f009 ffdf 	bl	8011ef4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d105      	bne.n	8007f46 <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007f3a:	4a23      	ldr	r2, [pc, #140]	; (8007fc8 <EE_Init+0x320>)
 8007f3c:	6913      	ldr	r3, [r2, #16]
 8007f3e:	2102      	movs	r1, #2
 8007f40:	438b      	bics	r3, r1
 8007f42:	6113      	str	r3, [r2, #16]
 8007f44:	e6cd      	b.n	8007ce2 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007f46:	4b1e      	ldr	r3, [pc, #120]	; (8007fc0 <EE_Init+0x318>)
 8007f48:	69de      	ldr	r6, [r3, #28]
 8007f4a:	b2b6      	uxth	r6, r6
 8007f4c:	e6cc      	b.n	8007ce8 <EE_Init+0x40>
						x =VarIdx;
 8007f4e:	b227      	sxth	r7, r4
 8007f50:	e008      	b.n	8007f64 <EE_Init+0x2bc>
 8007f52:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007f54:	4b1f      	ldr	r3, [pc, #124]	; (8007fd4 <EE_Init+0x32c>)
 8007f56:	429c      	cmp	r4, r3
 8007f58:	d018      	beq.n	8007f8c <EE_Init+0x2e4>
 8007f5a:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007f5c:	882b      	ldrh	r3, [r5, #0]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	42b3      	cmp	r3, r6
 8007f62:	d0f4      	beq.n	8007f4e <EE_Init+0x2a6>
					if(VarIdx != x){
 8007f64:	42bc      	cmp	r4, r7
 8007f66:	d0f4      	beq.n	8007f52 <EE_Init+0x2aa>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007f68:	4919      	ldr	r1, [pc, #100]	; (8007fd0 <EE_Init+0x328>)
 8007f6a:	0030      	movs	r0, r6
 8007f6c:	f7ff fd60 	bl	8007a30 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007f70:	2801      	cmp	r0, #1
 8007f72:	d0ee      	beq.n	8007f52 <EE_Init+0x2aa>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007f74:	4643      	mov	r3, r8
 8007f76:	8819      	ldrh	r1, [r3, #0]
 8007f78:	0030      	movs	r0, r6
 8007f7a:	f7ff fced 	bl	8007958 <EE_VerifyPageFullWriteVariable>
 8007f7e:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f80:	480e      	ldr	r0, [pc, #56]	; (8007fbc <EE_Init+0x314>)
 8007f82:	f009 ffb7 	bl	8011ef4 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d0e3      	beq.n	8007f52 <EE_Init+0x2aa>
 8007f8a:	e6ad      	b.n	8007ce8 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4907      	ldr	r1, [pc, #28]	; (8007fb0 <EE_Init+0x308>)
 8007f92:	2001      	movs	r0, #1
 8007f94:	f009 ffdc 	bl	8011f50 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f98:	4808      	ldr	r0, [pc, #32]	; (8007fbc <EE_Init+0x314>)
 8007f9a:	f009 ffab 	bl	8011ef4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d01e      	beq.n	8007fe0 <EE_Init+0x338>
					return pFlash.ErrorCode;
 8007fa2:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <EE_Init+0x318>)
 8007fa4:	69de      	ldr	r6, [r3, #28]
 8007fa6:	b2b6      	uxth	r6, r6
 8007fa8:	e69e      	b.n	8007ce8 <EE_Init+0x40>
 8007faa:	46c0      	nop			; (mov r8, r8)
 8007fac:	0801e000 	.word	0x0801e000
 8007fb0:	0801f000 	.word	0x0801f000
 8007fb4:	0000eeee 	.word	0x0000eeee
 8007fb8:	0000ffff 	.word	0x0000ffff
 8007fbc:	0000c350 	.word	0x0000c350
 8007fc0:	200070e0 	.word	0x200070e0
 8007fc4:	0801e800 	.word	0x0801e800
 8007fc8:	40022000 	.word	0x40022000
 8007fcc:	0801e006 	.word	0x0801e006
 8007fd0:	200016e4 	.word	0x200016e4
 8007fd4:	00000401 	.word	0x00000401
 8007fd8:	0801f800 	.word	0x0801f800
 8007fdc:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007fe0:	4a11      	ldr	r2, [pc, #68]	; (8008028 <EE_Init+0x380>)
 8007fe2:	6913      	ldr	r3, [r2, #16]
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	438b      	bics	r3, r1
 8007fe8:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007fea:	4810      	ldr	r0, [pc, #64]	; (800802c <EE_Init+0x384>)
 8007fec:	f00a f828 	bl	8012040 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ff0:	480f      	ldr	r0, [pc, #60]	; (8008030 <EE_Init+0x388>)
 8007ff2:	f009 ff7f 	bl	8011ef4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d003      	beq.n	8008002 <EE_Init+0x35a>
					return pFlash.ErrorCode;
 8007ffa:	4b0e      	ldr	r3, [pc, #56]	; (8008034 <EE_Init+0x38c>)
 8007ffc:	69de      	ldr	r6, [r3, #28]
 8007ffe:	b2b6      	uxth	r6, r6
 8008000:	e672      	b.n	8007ce8 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8008002:	480d      	ldr	r0, [pc, #52]	; (8008038 <EE_Init+0x390>)
 8008004:	f00a f81c 	bl	8012040 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008008:	4809      	ldr	r0, [pc, #36]	; (8008030 <EE_Init+0x388>)
 800800a:	f009 ff73 	bl	8011ef4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800800e:	2800      	cmp	r0, #0
 8008010:	d105      	bne.n	800801e <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8008012:	4a05      	ldr	r2, [pc, #20]	; (8008028 <EE_Init+0x380>)
 8008014:	6913      	ldr	r3, [r2, #16]
 8008016:	2102      	movs	r1, #2
 8008018:	438b      	bics	r3, r1
 800801a:	6113      	str	r3, [r2, #16]
 800801c:	e661      	b.n	8007ce2 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800801e:	4b05      	ldr	r3, [pc, #20]	; (8008034 <EE_Init+0x38c>)
 8008020:	69de      	ldr	r6, [r3, #28]
 8008022:	b2b6      	uxth	r6, r6
 8008024:	e660      	b.n	8007ce8 <EE_Init+0x40>
 8008026:	46c0      	nop			; (mov r8, r8)
 8008028:	40022000 	.word	0x40022000
 800802c:	0801e000 	.word	0x0801e000
 8008030:	0000c350 	.word	0x0000c350
 8008034:	200070e0 	.word	0x200070e0
 8008038:	0801e800 	.word	0x0801e800

0800803c <StartDefaultTask>:
}

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void *argument){
 800803c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800803e:	46c6      	mov	lr, r8
 8008040:	b500      	push	{lr}
	
	/* Infinite loop */
	for(;;){
		/* Switch indicator LED according to mode */
		switch(indMode){
 8008042:	4c2b      	ldr	r4, [pc, #172]	; (80080f0 <StartDefaultTask+0xb4>)
				indMode =IND_OFF;
				break;
				
			case IND_TOPOLOGY:
				RTOS_IND_blink(100);
				indMode =IND_OFF;
 8008044:	46a0      	mov	r8, r4
				break;
				
			case IND_SHORT_BLINK:
				RTOS_IND_blink(30);
				indMode =IND_OFF;
 8008046:	0027      	movs	r7, r4
 8008048:	e020      	b.n	800808c <StartDefaultTask+0x50>
				RTOS_IND_blink(200);
 800804a:	2680      	movs	r6, #128	; 0x80
 800804c:	0136      	lsls	r6, r6, #4
 800804e:	2590      	movs	r5, #144	; 0x90
 8008050:	05ed      	lsls	r5, r5, #23
 8008052:	2201      	movs	r2, #1
 8008054:	0031      	movs	r1, r6
 8008056:	0028      	movs	r0, r5
 8008058:	f00a f9d8 	bl	801240c <HAL_GPIO_WritePin>
 800805c:	20c8      	movs	r0, #200	; 0xc8
 800805e:	f006 fcc2 	bl	800e9e6 <osDelay>
 8008062:	2200      	movs	r2, #0
 8008064:	0031      	movs	r1, r6
 8008066:	0028      	movs	r0, r5
 8008068:	f00a f9d0 	bl	801240c <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 800806c:	4b20      	ldr	r3, [pc, #128]	; (80080f0 <StartDefaultTask+0xb4>)
 800806e:	2200      	movs	r2, #0
 8008070:	701a      	strb	r2, [r3, #0]
				break;
				
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8008072:	f000 feef 	bl	8008e54 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8008076:	f7fd fb59 	bl	800572c <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)
 800807a:	4b1e      	ldr	r3, [pc, #120]	; (80080f4 <StartDefaultTask+0xb8>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d102      	bne.n	8008088 <StartDefaultTask+0x4c>
			delayButtonStateReset = false;
 8008082:	4b1d      	ldr	r3, [pc, #116]	; (80080f8 <StartDefaultTask+0xbc>)
 8008084:	2200      	movs	r2, #0
 8008086:	701a      	strb	r2, [r3, #0]
		
		taskYIELD();
 8008088:	f008 fb66 	bl	8010758 <vPortYield>
		switch(indMode){
 800808c:	7823      	ldrb	r3, [r4, #0]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d004      	beq.n	800809c <StartDefaultTask+0x60>
 8008092:	2b03      	cmp	r3, #3
 8008094:	d017      	beq.n	80080c6 <StartDefaultTask+0x8a>
 8008096:	2b01      	cmp	r3, #1
 8008098:	d1eb      	bne.n	8008072 <StartDefaultTask+0x36>
 800809a:	e7d6      	b.n	800804a <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 800809c:	2680      	movs	r6, #128	; 0x80
 800809e:	0136      	lsls	r6, r6, #4
 80080a0:	2590      	movs	r5, #144	; 0x90
 80080a2:	05ed      	lsls	r5, r5, #23
 80080a4:	2201      	movs	r2, #1
 80080a6:	0031      	movs	r1, r6
 80080a8:	0028      	movs	r0, r5
 80080aa:	f00a f9af 	bl	801240c <HAL_GPIO_WritePin>
 80080ae:	2064      	movs	r0, #100	; 0x64
 80080b0:	f006 fc99 	bl	800e9e6 <osDelay>
 80080b4:	2200      	movs	r2, #0
 80080b6:	0031      	movs	r1, r6
 80080b8:	0028      	movs	r0, r5
 80080ba:	f00a f9a7 	bl	801240c <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80080be:	2300      	movs	r3, #0
 80080c0:	4642      	mov	r2, r8
 80080c2:	7013      	strb	r3, [r2, #0]
				break;
 80080c4:	e7d5      	b.n	8008072 <StartDefaultTask+0x36>
				RTOS_IND_blink(30);
 80080c6:	2680      	movs	r6, #128	; 0x80
 80080c8:	0136      	lsls	r6, r6, #4
 80080ca:	2590      	movs	r5, #144	; 0x90
 80080cc:	05ed      	lsls	r5, r5, #23
 80080ce:	2201      	movs	r2, #1
 80080d0:	0031      	movs	r1, r6
 80080d2:	0028      	movs	r0, r5
 80080d4:	f00a f99a 	bl	801240c <HAL_GPIO_WritePin>
 80080d8:	201e      	movs	r0, #30
 80080da:	f006 fc84 	bl	800e9e6 <osDelay>
 80080de:	2200      	movs	r2, #0
 80080e0:	0031      	movs	r1, r6
 80080e2:	0028      	movs	r0, r5
 80080e4:	f00a f992 	bl	801240c <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80080e8:	2300      	movs	r3, #0
 80080ea:	703b      	strb	r3, [r7, #0]
				break;
 80080ec:	e7c1      	b.n	8008072 <StartDefaultTask+0x36>
 80080ee:	46c0      	nop			; (mov r8, r8)
 80080f0:	20000ed0 	.word	0x20000ed0
 80080f4:	20001767 	.word	0x20001767
 80080f8:	20001766 	.word	0x20001766

080080fc <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void){
 80080fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080fe:	b08f      	sub	sp, #60	; 0x3c
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8008100:	25a0      	movs	r5, #160	; 0xa0
 8008102:	006d      	lsls	r5, r5, #1
 8008104:	2400      	movs	r4, #0
 8008106:	9403      	str	r4, [sp, #12]
 8008108:	9402      	str	r4, [sp, #8]
 800810a:	4b53      	ldr	r3, [pc, #332]	; (8008258 <MX_FREERTOS_Init+0x15c>)
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	2603      	movs	r6, #3
 8008110:	9600      	str	r6, [sp, #0]
 8008112:	2300      	movs	r3, #0
 8008114:	002a      	movs	r2, r5
 8008116:	4951      	ldr	r1, [pc, #324]	; (800825c <MX_FREERTOS_Init+0x160>)
 8008118:	4851      	ldr	r0, [pc, #324]	; (8008260 <MX_FREERTOS_Init+0x164>)
 800811a:	f007 fa5f 	bl	800f5dc <xTaskGenericCreate>
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 800811e:	9403      	str	r4, [sp, #12]
 8008120:	9402      	str	r4, [sp, #8]
 8008122:	4b50      	ldr	r3, [pc, #320]	; (8008264 <MX_FREERTOS_Init+0x168>)
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	9600      	str	r6, [sp, #0]
 8008128:	2300      	movs	r3, #0
 800812a:	002a      	movs	r2, r5
 800812c:	494e      	ldr	r1, [pc, #312]	; (8008268 <MX_FREERTOS_Init+0x16c>)
 800812e:	484f      	ldr	r0, [pc, #316]	; (800826c <MX_FREERTOS_Init+0x170>)
 8008130:	f007 fa54 	bl	800f5dc <xTaskGenericCreate>
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8008134:	9403      	str	r4, [sp, #12]
 8008136:	9402      	str	r4, [sp, #8]
 8008138:	4b4d      	ldr	r3, [pc, #308]	; (8008270 <MX_FREERTOS_Init+0x174>)
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	9600      	str	r6, [sp, #0]
 800813e:	2300      	movs	r3, #0
 8008140:	002a      	movs	r2, r5
 8008142:	494c      	ldr	r1, [pc, #304]	; (8008274 <MX_FREERTOS_Init+0x178>)
 8008144:	484c      	ldr	r0, [pc, #304]	; (8008278 <MX_FREERTOS_Init+0x17c>)
 8008146:	f007 fa49 	bl	800f5dc <xTaskGenericCreate>
	vRegisterCLICommands();
 800814a:	f7ff fa6d 	bl	8007628 <vRegisterCLICommands>
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 800814e:	9403      	str	r4, [sp, #12]
 8008150:	9402      	str	r4, [sp, #8]
 8008152:	4b4a      	ldr	r3, [pc, #296]	; (800827c <MX_FREERTOS_Init+0x180>)
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	9600      	str	r6, [sp, #0]
 8008158:	2300      	movs	r3, #0
 800815a:	002a      	movs	r2, r5
 800815c:	4948      	ldr	r1, [pc, #288]	; (8008280 <MX_FREERTOS_Init+0x184>)
 800815e:	4849      	ldr	r0, [pc, #292]	; (8008284 <MX_FREERTOS_Init+0x188>)
 8008160:	f007 fa3c 	bl	800f5dc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8008164:	4e48      	ldr	r6, [pc, #288]	; (8008288 <MX_FREERTOS_Init+0x18c>)
 8008166:	9403      	str	r4, [sp, #12]
 8008168:	9402      	str	r4, [sp, #8]
 800816a:	4b48      	ldr	r3, [pc, #288]	; (800828c <MX_FREERTOS_Init+0x190>)
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	2704      	movs	r7, #4
 8008170:	9700      	str	r7, [sp, #0]
 8008172:	2301      	movs	r3, #1
 8008174:	002a      	movs	r2, r5
 8008176:	4946      	ldr	r1, [pc, #280]	; (8008290 <MX_FREERTOS_Init+0x194>)
 8008178:	0030      	movs	r0, r6
 800817a:	f007 fa2f 	bl	800f5dc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 800817e:	9403      	str	r4, [sp, #12]
 8008180:	9402      	str	r4, [sp, #8]
 8008182:	4b44      	ldr	r3, [pc, #272]	; (8008294 <MX_FREERTOS_Init+0x198>)
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	9700      	str	r7, [sp, #0]
 8008188:	2302      	movs	r3, #2
 800818a:	002a      	movs	r2, r5
 800818c:	4942      	ldr	r1, [pc, #264]	; (8008298 <MX_FREERTOS_Init+0x19c>)
 800818e:	0030      	movs	r0, r6
 8008190:	f007 fa24 	bl	800f5dc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8008194:	9403      	str	r4, [sp, #12]
 8008196:	9402      	str	r4, [sp, #8]
 8008198:	4b40      	ldr	r3, [pc, #256]	; (800829c <MX_FREERTOS_Init+0x1a0>)
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	9700      	str	r7, [sp, #0]
 800819e:	2303      	movs	r3, #3
 80081a0:	002a      	movs	r2, r5
 80081a2:	493f      	ldr	r1, [pc, #252]	; (80082a0 <MX_FREERTOS_Init+0x1a4>)
 80081a4:	0030      	movs	r0, r6
 80081a6:	f007 fa19 	bl	800f5dc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 80081aa:	9403      	str	r4, [sp, #12]
 80081ac:	9402      	str	r4, [sp, #8]
 80081ae:	4b3d      	ldr	r3, [pc, #244]	; (80082a4 <MX_FREERTOS_Init+0x1a8>)
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	9700      	str	r7, [sp, #0]
 80081b4:	2304      	movs	r3, #4
 80081b6:	002a      	movs	r2, r5
 80081b8:	493b      	ldr	r1, [pc, #236]	; (80082a8 <MX_FREERTOS_Init+0x1ac>)
 80081ba:	0030      	movs	r0, r6
 80081bc:	f007 fa0e 	bl	800f5dc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80081c0:	9403      	str	r4, [sp, #12]
 80081c2:	9402      	str	r4, [sp, #8]
 80081c4:	4b39      	ldr	r3, [pc, #228]	; (80082ac <MX_FREERTOS_Init+0x1b0>)
 80081c6:	9301      	str	r3, [sp, #4]
 80081c8:	9700      	str	r7, [sp, #0]
 80081ca:	2305      	movs	r3, #5
 80081cc:	002a      	movs	r2, r5
 80081ce:	4938      	ldr	r1, [pc, #224]	; (80082b0 <MX_FREERTOS_Init+0x1b4>)
 80081d0:	0030      	movs	r0, r6
 80081d2:	f007 fa03 	bl	800f5dc <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1);
 80081d6:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80081d8:	2101      	movs	r1, #1
 80081da:	a80d      	add	r0, sp, #52	; 0x34
 80081dc:	f006 fc0b 	bl	800e9f6 <osSemaphoreCreate>
 80081e0:	4e34      	ldr	r6, [pc, #208]	; (80082b4 <MX_FREERTOS_Init+0x1b8>)
 80081e2:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 80081e4:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80081e6:	2101      	movs	r1, #1
 80081e8:	a80c      	add	r0, sp, #48	; 0x30
 80081ea:	f006 fc04 	bl	800e9f6 <osSemaphoreCreate>
 80081ee:	4d32      	ldr	r5, [pc, #200]	; (80082b8 <MX_FREERTOS_Init+0x1bc>)
 80081f0:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3);
 80081f2:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80081f4:	2101      	movs	r1, #1
 80081f6:	a80b      	add	r0, sp, #44	; 0x2c
 80081f8:	f006 fbfd 	bl	800e9f6 <osSemaphoreCreate>
 80081fc:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 80081fe:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8008200:	2101      	movs	r1, #1
 8008202:	a80a      	add	r0, sp, #40	; 0x28
 8008204:	f006 fbf7 	bl	800e9f6 <osSemaphoreCreate>
 8008208:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5);
 800820a:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800820c:	2101      	movs	r1, #1
 800820e:	a809      	add	r0, sp, #36	; 0x24
 8008210:	f006 fbf1 	bl	800e9f6 <osSemaphoreCreate>
 8008214:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8008216:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8008218:	2101      	movs	r1, #1
 800821a:	a808      	add	r0, sp, #32
 800821c:	f006 fbeb 	bl	800e9f6 <osSemaphoreCreate>
 8008220:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7);
 8008222:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8008224:	2101      	movs	r1, #1
 8008226:	a807      	add	r0, sp, #28
 8008228:	f006 fbe5 	bl	800e9f6 <osSemaphoreCreate>
 800822c:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 800822e:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8008230:	2101      	movs	r1, #1
 8008232:	a806      	add	r0, sp, #24
 8008234:	f006 fbdf 	bl	800e9f6 <osSemaphoreCreate>
 8008238:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9);
 800823a:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800823c:	2101      	movs	r1, #1
 800823e:	a805      	add	r0, sp, #20
 8008240:	f006 fbd9 	bl	800e9f6 <osSemaphoreCreate>
 8008244:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 8008246:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8008248:	2101      	movs	r1, #1
 800824a:	a804      	add	r0, sp, #16
 800824c:	f006 fbd3 	bl	800e9f6 <osSemaphoreCreate>
 8008250:	6168      	str	r0, [r5, #20]
}
 8008252:	b00f      	add	sp, #60	; 0x3c
 8008254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008256:	46c0      	nop			; (mov r8, r8)
 8008258:	20001704 	.word	0x20001704
 800825c:	0801bce8 	.word	0x0801bce8
 8008260:	0800803d 	.word	0x0800803d
 8008264:	200016e8 	.word	0x200016e8
 8008268:	0801bcf4 	.word	0x0801bcf4
 800826c:	08009bd5 	.word	0x08009bd5
 8008270:	20001700 	.word	0x20001700
 8008274:	0801bd00 	.word	0x0801bd00
 8008278:	08014583 	.word	0x08014583
 800827c:	2000170c 	.word	0x2000170c
 8008280:	0801bd0c 	.word	0x0801bd0c
 8008284:	080053bd 	.word	0x080053bd
 8008288:	0800a021 	.word	0x0800a021
 800828c:	200016ec 	.word	0x200016ec
 8008290:	0801bd14 	.word	0x0801bd14
 8008294:	200016f0 	.word	0x200016f0
 8008298:	0801bd20 	.word	0x0801bd20
 800829c:	200016f4 	.word	0x200016f4
 80082a0:	0801bd2c 	.word	0x0801bd2c
 80082a4:	200016f8 	.word	0x200016f8
 80082a8:	0801bd38 	.word	0x0801bd38
 80082ac:	200016fc 	.word	0x200016fc
 80082b0:	0801bd44 	.word	0x0801bd44
 80082b4:	20006c90 	.word	0x20006c90
 80082b8:	20006c74 	.word	0x20006c74

080082bc <vMainConfigureTimerForRunTimeStats>:
	
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats(void){
 80082bc:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80082be:	4b04      	ldr	r3, [pc, #16]	; (80082d0 <vMainConfigureTimerForRunTimeStats+0x14>)
 80082c0:	6818      	ldr	r0, [r3, #0]
 80082c2:	4904      	ldr	r1, [pc, #16]	; (80082d4 <vMainConfigureTimerForRunTimeStats+0x18>)
 80082c4:	f7f7 ff44 	bl	8000150 <__udivsi3>
 80082c8:	4b03      	ldr	r3, [pc, #12]	; (80082d8 <vMainConfigureTimerForRunTimeStats+0x1c>)
 80082ca:	6018      	str	r0, [r3, #0]
}
 80082cc:	bd10      	pop	{r4, pc}
 80082ce:	46c0      	nop			; (mov r8, r8)
 80082d0:	200000a0 	.word	0x200000a0
 80082d4:	00002710 	.word	0x00002710
 80082d8:	20001708 	.word	0x20001708

080082dc <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 80082dc:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80082de:	4b0f      	ldr	r3, [pc, #60]	; (800831c <ulMainGetRunTimeCounterValue+0x40>)
 80082e0:	6818      	ldr	r0, [r3, #0]
 80082e2:	21fa      	movs	r1, #250	; 0xfa
 80082e4:	0089      	lsls	r1, r1, #2
 80082e6:	f7f7 ff33 	bl	8000150 <__udivsi3>
 80082ea:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80082ec:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <ulMainGetRunTimeCounterValue+0x44>)
 80082ee:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 80082f0:	f007 fb06 	bl	800f900 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 80082f4:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <ulMainGetRunTimeCounterValue+0x48>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	015b      	lsls	r3, r3, #5
 80082fa:	d50d      	bpl.n	8008318 <ulMainGetRunTimeCounterValue+0x3c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 80082fc:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80082fe:	4b08      	ldr	r3, [pc, #32]	; (8008320 <ulMainGetRunTimeCounterValue+0x44>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	1aed      	subs	r5, r5, r3
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8008304:	0084      	lsls	r4, r0, #2
 8008306:	1824      	adds	r4, r4, r0
 8008308:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 800830a:	4b07      	ldr	r3, [pc, #28]	; (8008328 <ulMainGetRunTimeCounterValue+0x4c>)
 800830c:	6819      	ldr	r1, [r3, #0]
 800830e:	0028      	movs	r0, r5
 8008310:	f7f7 ff1e 	bl	8000150 <__udivsi3>
 8008314:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8008316:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008318:	1b2d      	subs	r5, r5, r4
 800831a:	e7f3      	b.n	8008304 <ulMainGetRunTimeCounterValue+0x28>
 800831c:	200000a0 	.word	0x200000a0
 8008320:	e000e018 	.word	0xe000e018
 8008324:	e000ed04 	.word	0xe000ed04
 8008328:	20001708 	.word	0x20001708

0800832c <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port){
}
 800832c:	4770      	bx	lr
	...

08008330 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port){
 8008330:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 8008332:	00c2      	lsls	r2, r0, #3
 8008334:	1812      	adds	r2, r2, r0
 8008336:	4b1b      	ldr	r3, [pc, #108]	; (80083a4 <CheckForTimedButtonPress+0x74>)
 8008338:	189b      	adds	r3, r3, r2
 800833a:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *=1000;
	t2 *=1000;
	t3 *=1000;
	
	if(pressCounter[port] == t1){
 800833c:	0082      	lsls	r2, r0, #2
 800833e:	4b1a      	ldr	r3, [pc, #104]	; (80083a8 <CheckForTimedButtonPress+0x78>)
 8008340:	58d1      	ldr	r1, [r2, r3]
	t1 *=1000;
 8008342:	0163      	lsls	r3, r4, #5
 8008344:	1b1b      	subs	r3, r3, r4
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	191b      	adds	r3, r3, r4
 800834a:	00db      	lsls	r3, r3, #3
	if(pressCounter[port] == t1){
 800834c:	4299      	cmp	r1, r3
 800834e:	d01c      	beq.n	800838a <CheckForTimedButtonPress+0x5a>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 8008350:	00c2      	lsls	r2, r0, #3
 8008352:	1812      	adds	r2, r2, r0
 8008354:	4b13      	ldr	r3, [pc, #76]	; (80083a4 <CheckForTimedButtonPress+0x74>)
 8008356:	189b      	adds	r3, r3, r2
 8008358:	78dc      	ldrb	r4, [r3, #3]
	t2 *=1000;
 800835a:	0163      	lsls	r3, r4, #5
 800835c:	1b1b      	subs	r3, r3, r4
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	191b      	adds	r3, r3, r4
 8008362:	00db      	lsls	r3, r3, #3
		button[port].state =PRESSED_FOR_X1_SEC;
	}
	else if(pressCounter[port] == t2){
 8008364:	4299      	cmp	r1, r3
 8008366:	d017      	beq.n	8008398 <CheckForTimedButtonPress+0x68>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 8008368:	00c2      	lsls	r2, r0, #3
 800836a:	1812      	adds	r2, r2, r0
 800836c:	4b0d      	ldr	r3, [pc, #52]	; (80083a4 <CheckForTimedButtonPress+0x74>)
 800836e:	189b      	adds	r3, r3, r2
 8008370:	791c      	ldrb	r4, [r3, #4]
	t3 *=1000;
 8008372:	0163      	lsls	r3, r4, #5
 8008374:	1b1b      	subs	r3, r3, r4
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	191b      	adds	r3, r3, r4
 800837a:	00db      	lsls	r3, r3, #3
		button[port].state =PRESSED_FOR_X2_SEC;
	}
	else if(pressCounter[port] == t3){
 800837c:	4299      	cmp	r1, r3
 800837e:	d109      	bne.n	8008394 <CheckForTimedButtonPress+0x64>
		button[port].state =PRESSED_FOR_X2_SEC;
 8008380:	0010      	movs	r0, r2
 8008382:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <CheckForTimedButtonPress+0x74>)
 8008384:	220a      	movs	r2, #10
 8008386:	54c2      	strb	r2, [r0, r3]
 8008388:	e004      	b.n	8008394 <CheckForTimedButtonPress+0x64>
		button[port].state =PRESSED_FOR_X1_SEC;
 800838a:	00c3      	lsls	r3, r0, #3
 800838c:	1818      	adds	r0, r3, r0
 800838e:	4b05      	ldr	r3, [pc, #20]	; (80083a4 <CheckForTimedButtonPress+0x74>)
 8008390:	2209      	movs	r2, #9
 8008392:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 8008394:	2000      	movs	r0, #0
 8008396:	bd10      	pop	{r4, pc}
		button[port].state =PRESSED_FOR_X2_SEC;
 8008398:	0010      	movs	r0, r2
 800839a:	4b02      	ldr	r3, [pc, #8]	; (80083a4 <CheckForTimedButtonPress+0x74>)
 800839c:	220a      	movs	r2, #10
 800839e:	54c2      	strb	r2, [r0, r3]
 80083a0:	e7f8      	b.n	8008394 <CheckForTimedButtonPress+0x64>
 80083a2:	46c0      	nop			; (mov r8, r8)
 80083a4:	20001724 	.word	0x20001724
 80083a8:	2000176c 	.word	0x2000176c

080083ac <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port){
 80083ac:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 80083ae:	00c2      	lsls	r2, r0, #3
 80083b0:	1812      	adds	r2, r2, r0
 80083b2:	4b1b      	ldr	r3, [pc, #108]	; (8008420 <CheckForTimedButtonRelease+0x74>)
 80083b4:	189b      	adds	r3, r3, r2
 80083b6:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *=1000;
	t2 *=1000;
	t3 *=1000;
	
	if(releaseCounter[port] == t1){
 80083b8:	0082      	lsls	r2, r0, #2
 80083ba:	4b1a      	ldr	r3, [pc, #104]	; (8008424 <CheckForTimedButtonRelease+0x78>)
 80083bc:	58d1      	ldr	r1, [r2, r3]
	t1 *=1000;
 80083be:	0163      	lsls	r3, r4, #5
 80083c0:	1b1b      	subs	r3, r3, r4
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	191b      	adds	r3, r3, r4
 80083c6:	00db      	lsls	r3, r3, #3
	if(releaseCounter[port] == t1){
 80083c8:	4299      	cmp	r1, r3
 80083ca:	d01c      	beq.n	8008406 <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 80083cc:	00c2      	lsls	r2, r0, #3
 80083ce:	1812      	adds	r2, r2, r0
 80083d0:	4b13      	ldr	r3, [pc, #76]	; (8008420 <CheckForTimedButtonRelease+0x74>)
 80083d2:	189b      	adds	r3, r3, r2
 80083d4:	799c      	ldrb	r4, [r3, #6]
	t2 *=1000;
 80083d6:	0163      	lsls	r3, r4, #5
 80083d8:	1b1b      	subs	r3, r3, r4
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	191b      	adds	r3, r3, r4
 80083de:	00db      	lsls	r3, r3, #3
		button[port].state =RELEASED_FOR_Y1_SEC;
	}
	else if(releaseCounter[port] == t2){
 80083e0:	4299      	cmp	r1, r3
 80083e2:	d017      	beq.n	8008414 <CheckForTimedButtonRelease+0x68>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 80083e4:	00c2      	lsls	r2, r0, #3
 80083e6:	1812      	adds	r2, r2, r0
 80083e8:	4b0d      	ldr	r3, [pc, #52]	; (8008420 <CheckForTimedButtonRelease+0x74>)
 80083ea:	189b      	adds	r3, r3, r2
 80083ec:	79dc      	ldrb	r4, [r3, #7]
	t3 *=1000;
 80083ee:	0163      	lsls	r3, r4, #5
 80083f0:	1b1b      	subs	r3, r3, r4
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	191b      	adds	r3, r3, r4
 80083f6:	00db      	lsls	r3, r3, #3
		button[port].state =RELEASED_FOR_Y2_SEC;
	}
	else if(releaseCounter[port] == t3){
 80083f8:	4299      	cmp	r1, r3
 80083fa:	d109      	bne.n	8008410 <CheckForTimedButtonRelease+0x64>
		button[port].state =RELEASED_FOR_Y2_SEC;
 80083fc:	0010      	movs	r0, r2
 80083fe:	4b08      	ldr	r3, [pc, #32]	; (8008420 <CheckForTimedButtonRelease+0x74>)
 8008400:	220d      	movs	r2, #13
 8008402:	54c2      	strb	r2, [r0, r3]
 8008404:	e004      	b.n	8008410 <CheckForTimedButtonRelease+0x64>
		button[port].state =RELEASED_FOR_Y1_SEC;
 8008406:	00c3      	lsls	r3, r0, #3
 8008408:	1818      	adds	r0, r3, r0
 800840a:	4b05      	ldr	r3, [pc, #20]	; (8008420 <CheckForTimedButtonRelease+0x74>)
 800840c:	220c      	movs	r2, #12
 800840e:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 8008410:	2000      	movs	r0, #0
 8008412:	bd10      	pop	{r4, pc}
		button[port].state =RELEASED_FOR_Y2_SEC;
 8008414:	0010      	movs	r0, r2
 8008416:	4b02      	ldr	r3, [pc, #8]	; (8008420 <CheckForTimedButtonRelease+0x74>)
 8008418:	220d      	movs	r2, #13
 800841a:	54c2      	strb	r2, [r0, r3]
 800841c:	e7f8      	b.n	8008410 <CheckForTimedButtonRelease+0x64>
 800841e:	46c0      	nop			; (mov r8, r8)
 8008420:	20001724 	.word	0x20001724
 8008424:	20001784 	.word	0x20001784

08008428 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 8008428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800842a:	b08d      	sub	sp, #52	; 0x34
 800842c:	0006      	movs	r6, r0
 800842e:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 =0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if(BOS_initialized){
 8008430:	4b41      	ldr	r3, [pc, #260]	; (8008538 <AddPortButton+0x110>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d157      	bne.n	80084e8 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] =PORTBUTTON;
 8008438:	4b40      	ldr	r3, [pc, #256]	; (800853c <AddPortButton+0x114>)
 800843a:	2204      	movs	r2, #4
 800843c:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if(BOS_initialized){
 800843e:	4b3e      	ldr	r3, [pc, #248]	; (8008538 <AddPortButton+0x110>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d15a      	bne.n	80084fc <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 8008446:	2512      	movs	r5, #18
 8008448:	446d      	add	r5, sp
 800844a:	af04      	add	r7, sp, #16
 800844c:	9700      	str	r7, [sp, #0]
 800844e:	ab05      	add	r3, sp, #20
 8008450:	002a      	movs	r2, r5
 8008452:	a906      	add	r1, sp, #24
 8008454:	0020      	movs	r0, r4
 8008456:	f005 fc53 	bl	800dd00 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin =TX_Pin;
 800845a:	882b      	ldrh	r3, [r5, #0]
 800845c:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800845e:	2301      	movs	r3, #1
 8008460:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008462:	2500      	movs	r5, #0
 8008464:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008466:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 8008468:	a907      	add	r1, sp, #28
 800846a:	9806      	ldr	r0, [sp, #24]
 800846c:	f009 fe5a 	bl	8012124 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin =RX_Pin;
 8008470:	883b      	ldrh	r3, [r7, #0]
 8008472:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008474:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008476:	2302      	movs	r3, #2
 8008478:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 800847a:	a907      	add	r1, sp, #28
 800847c:	9805      	ldr	r0, [sp, #20]
 800847e:	f009 fe51 	bl	8012124 <HAL_GPIO_Init>
	
	/* 4. Update button struct */
	button[port].type =buttonType;
 8008482:	00e2      	lsls	r2, r4, #3
 8008484:	1912      	adds	r2, r2, r4
 8008486:	4b2e      	ldr	r3, [pc, #184]	; (8008540 <AddPortButton+0x118>)
 8008488:	189b      	adds	r3, r3, r2
 800848a:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 800848c:	0025      	movs	r5, r4
 800848e:	353a      	adds	r5, #58	; 0x3a
 8008490:	00ad      	lsls	r5, r5, #2
 8008492:	210e      	movs	r1, #14
 8008494:	4469      	add	r1, sp
 8008496:	0028      	movs	r0, r5
 8008498:	f7ff faca 	bl	8007a30 <EE_ReadVariable>
	if(!res)											// This variable exists
 800849c:	2800      	cmp	r0, #0
 800849e:	d133      	bne.n	8008508 <AddPortButton+0xe0>
	{
		temp8 =(uint8_t )(temp16 >> 8);
 80084a0:	230e      	movs	r3, #14
 80084a2:	446b      	add	r3, sp
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	0a1b      	lsrs	r3, r3, #8
		if(((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))											// This is same port and same type, do not update
 80084a8:	091a      	lsrs	r2, r3, #4
 80084aa:	42a2      	cmp	r2, r4
 80084ac:	d103      	bne.n	80084b6 <AddPortButton+0x8e>
 80084ae:	220f      	movs	r2, #15
 80084b0:	4013      	ands	r3, r2
 80084b2:	42b3      	cmp	r3, r6
 80084b4:	d015      	beq.n	80084e2 <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 80084b6:	0324      	lsls	r4, r4, #12
 80084b8:	0231      	lsls	r1, r6, #8
 80084ba:	4321      	orrs	r1, r4
 80084bc:	b289      	uxth	r1, r1
 80084be:	230e      	movs	r3, #14
 80084c0:	446b      	add	r3, sp
 80084c2:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 80084c4:	0028      	movs	r0, r5
 80084c6:	f7ff fae3 	bl	8007a90 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80084ca:	1c68      	adds	r0, r5, #1
 80084cc:	2100      	movs	r1, #0
 80084ce:	f7ff fadf 	bl	8007a90 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80084d2:	1ca8      	adds	r0, r5, #2
 80084d4:	2100      	movs	r1, #0
 80084d6:	f7ff fadb 	bl	8007a90 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80084da:	1ce8      	adds	r0, r5, #3
 80084dc:	2100      	movs	r1, #0
 80084de:	f7ff fad7 	bl	8007a90 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	return result;
}
 80084e2:	2000      	movs	r0, #0
 80084e4:	b00d      	add	sp, #52	; 0x34
 80084e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 80084e8:	008d      	lsls	r5, r1, #2
 80084ea:	4b16      	ldr	r3, [pc, #88]	; (8008544 <AddPortButton+0x11c>)
 80084ec:	58e8      	ldr	r0, [r5, r3]
 80084ee:	f006 fac5 	bl	800ea7c <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 80084f2:	4b15      	ldr	r3, [pc, #84]	; (8008548 <AddPortButton+0x120>)
 80084f4:	58e8      	ldr	r0, [r5, r3]
 80084f6:	f006 fac1 	bl	800ea7c <osSemaphoreRelease>
 80084fa:	e79d      	b.n	8008438 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 80084fc:	0020      	movs	r0, r4
 80084fe:	f006 f927 	bl	800e750 <GetUart>
 8008502:	f00b fa8c 	bl	8013a1e <HAL_UART_DeInit>
 8008506:	e79e      	b.n	8008446 <AddPortButton+0x1e>
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 8008508:	0324      	lsls	r4, r4, #12
 800850a:	0231      	lsls	r1, r6, #8
 800850c:	4321      	orrs	r1, r4
 800850e:	b289      	uxth	r1, r1
 8008510:	230e      	movs	r3, #14
 8008512:	446b      	add	r3, sp
 8008514:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008516:	0028      	movs	r0, r5
 8008518:	f7ff faba 	bl	8007a90 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 800851c:	1c68      	adds	r0, r5, #1
 800851e:	2100      	movs	r1, #0
 8008520:	f7ff fab6 	bl	8007a90 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 8008524:	1ca8      	adds	r0, r5, #2
 8008526:	2100      	movs	r1, #0
 8008528:	f7ff fab2 	bl	8007a90 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 800852c:	1ce8      	adds	r0, r5, #3
 800852e:	2100      	movs	r1, #0
 8008530:	f7ff faae 	bl	8007a90 <EE_WriteVariable>
 8008534:	e7d5      	b.n	80084e2 <AddPortButton+0xba>
 8008536:	46c0      	nop			; (mov r8, r8)
 8008538:	20000a86 	.word	0x20000a86
 800853c:	200010cc 	.word	0x200010cc
 8008540:	20001724 	.word	0x20001724
 8008544:	20006c90 	.word	0x20006c90
 8008548:	20006c74 	.word	0x20006c74

0800854c <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port){
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type =NONE;
 8008552:	4836      	ldr	r0, [pc, #216]	; (800862c <RemovePortButton+0xe0>)
 8008554:	00e9      	lsls	r1, r5, #3
 8008556:	1949      	adds	r1, r1, r5
 8008558:	1842      	adds	r2, r0, r1
 800855a:	2300      	movs	r3, #0
 800855c:	7053      	strb	r3, [r2, #1]
	button[port].state =NONE;
 800855e:	540b      	strb	r3, [r1, r0]
	button[port].events =0;
 8008560:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec =0;
 8008562:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec =0;
 8008564:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec =0;
 8008566:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec =0;
 8008568:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec =0;
 800856a:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec =0;
 800856c:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 800856e:	002c      	movs	r4, r5
 8008570:	343a      	adds	r4, #58	; 0x3a
 8008572:	00a4      	lsls	r4, r4, #2
 8008574:	466b      	mov	r3, sp
 8008576:	1d99      	adds	r1, r3, #6
 8008578:	0020      	movs	r0, r4
 800857a:	f7ff fa59 	bl	8007a30 <EE_ReadVariable>
	if(!res)						// This variable exists, reset all to zeros
 800857e:	2800      	cmp	r0, #0
 8008580:	d02b      	beq.n	80085da <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart =GetUart(port);
 8008582:	0028      	movs	r0, r5
 8008584:	f006 f8e4 	bl	800e750 <GetUart>
 8008588:	0006      	movs	r6, r0
	
	if(huart->Instance == USART1){
 800858a:	6803      	ldr	r3, [r0, #0]
 800858c:	4a28      	ldr	r2, [pc, #160]	; (8008630 <RemovePortButton+0xe4>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d034      	beq.n	80085fc <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	}
	else if(huart->Instance == USART2){
 8008592:	4a28      	ldr	r2, [pc, #160]	; (8008634 <RemovePortButton+0xe8>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d035      	beq.n	8008604 <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	}
	else if(huart->Instance == USART3){
 8008598:	4a27      	ldr	r2, [pc, #156]	; (8008638 <RemovePortButton+0xec>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d036      	beq.n	800860c <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	}
	else if(huart->Instance == USART4){
 800859e:	4a27      	ldr	r2, [pc, #156]	; (800863c <RemovePortButton+0xf0>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d03f      	beq.n	8008624 <RemovePortButton+0xd8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	}
	else if(huart->Instance == USART5){
 80085a4:	4a26      	ldr	r2, [pc, #152]	; (8008640 <RemovePortButton+0xf4>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d034      	beq.n	8008614 <RemovePortButton+0xc8>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	}
	else if(huart->Instance == USART6){
 80085aa:	4a26      	ldr	r2, [pc, #152]	; (8008644 <RemovePortButton+0xf8>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d035      	beq.n	800861c <RemovePortButton+0xd0>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	}
	else if(huart->Instance == USART7){
 80085b0:	4a25      	ldr	r2, [pc, #148]	; (8008648 <RemovePortButton+0xfc>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d038      	beq.n	8008628 <RemovePortButton+0xdc>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	}
	else if(huart->Instance == USART8){
 80085b6:	4a25      	ldr	r2, [pc, #148]	; (800864c <RemovePortButton+0x100>)
 80085b8:	4694      	mov	ip, r2
 80085ba:	4463      	add	r3, ip
 80085bc:	1e5c      	subs	r4, r3, #1
 80085be:	41a3      	sbcs	r3, r4
 80085c0:	425c      	negs	r4, r3
 80085c2:	b2e4      	uxtb	r4, r4
	}
	else
		result =BOS_ERROR;
	
	/* 4. Start scanning this port */
	portStatus[port] =FREE;
 80085c4:	4b22      	ldr	r3, [pc, #136]	; (8008650 <RemovePortButton+0x104>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 80085ca:	3201      	adds	r2, #1
 80085cc:	4921      	ldr	r1, [pc, #132]	; (8008654 <RemovePortButton+0x108>)
 80085ce:	0030      	movs	r0, r6
 80085d0:	f00b fa7e 	bl	8013ad0 <HAL_UART_Receive_IT>
	
	return result;
}
 80085d4:	0020      	movs	r0, r4
 80085d6:	b002      	add	sp, #8
 80085d8:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),0);
 80085da:	2100      	movs	r1, #0
 80085dc:	0020      	movs	r0, r4
 80085de:	f7ff fa57 	bl	8007a90 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80085e2:	1c60      	adds	r0, r4, #1
 80085e4:	2100      	movs	r1, #0
 80085e6:	f7ff fa53 	bl	8007a90 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80085ea:	1ca0      	adds	r0, r4, #2
 80085ec:	2100      	movs	r1, #0
 80085ee:	f7ff fa4f 	bl	8007a90 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80085f2:	1ce0      	adds	r0, r4, #3
 80085f4:	2100      	movs	r1, #0
 80085f6:	f7ff fa4b 	bl	8007a90 <EE_WriteVariable>
 80085fa:	e7c2      	b.n	8008582 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 80085fc:	f005 ff24 	bl	800e448 <MX_USART1_UART_Init>
	BOS_Status result =BOS_OK;
 8008600:	2400      	movs	r4, #0
 8008602:	e7df      	b.n	80085c4 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008604:	f005 ff38 	bl	800e478 <MX_USART2_UART_Init>
	BOS_Status result =BOS_OK;
 8008608:	2400      	movs	r4, #0
 800860a:	e7db      	b.n	80085c4 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800860c:	f005 ff4c 	bl	800e4a8 <MX_USART3_UART_Init>
	BOS_Status result =BOS_OK;
 8008610:	2400      	movs	r4, #0
 8008612:	e7d7      	b.n	80085c4 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 8008614:	f005 ff60 	bl	800e4d8 <MX_USART5_UART_Init>
	BOS_Status result =BOS_OK;
 8008618:	2400      	movs	r4, #0
 800861a:	e7d3      	b.n	80085c4 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800861c:	f005 ff74 	bl	800e508 <MX_USART6_UART_Init>
	BOS_Status result =BOS_OK;
 8008620:	2400      	movs	r4, #0
 8008622:	e7cf      	b.n	80085c4 <RemovePortButton+0x78>
 8008624:	2400      	movs	r4, #0
 8008626:	e7cd      	b.n	80085c4 <RemovePortButton+0x78>
 8008628:	2400      	movs	r4, #0
 800862a:	e7cb      	b.n	80085c4 <RemovePortButton+0x78>
 800862c:	20001724 	.word	0x20001724
 8008630:	40013800 	.word	0x40013800
 8008634:	40004400 	.word	0x40004400
 8008638:	40004800 	.word	0x40004800
 800863c:	40004c00 	.word	0x40004c00
 8008640:	40005000 	.word	0x40005000
 8008644:	40011400 	.word	0x40011400
 8008648:	40011800 	.word	0x40011800
 800864c:	bffee400 	.word	0xbffee400
 8008650:	200010cc 	.word	0x200010cc
 8008654:	20000e34 	.word	0x20000e34

08008658 <SetButtonEvents>:
 dbl_clicked: Double click event (1: Enable, 0: Disable)
 pressed_x1sec, pressed_x1sec, pressed_x1sec: Press time for events X1, X2 and X3 in seconds. Use 0 to disable the event.
 released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event.
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 8008658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800865a:	46de      	mov	lr, fp
 800865c:	4657      	mov	r7, sl
 800865e:	464e      	mov	r6, r9
 8008660:	4645      	mov	r5, r8
 8008662:	b5e0      	push	{r5, r6, r7, lr}
 8008664:	b085      	sub	sp, #20
 8008666:	0007      	movs	r7, r0
 8008668:	001e      	movs	r6, r3
 800866a:	ab0e      	add	r3, sp, #56	; 0x38
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	4698      	mov	r8, r3
 8008670:	ab0f      	add	r3, sp, #60	; 0x3c
 8008672:	781d      	ldrb	r5, [r3, #0]
 8008674:	ab10      	add	r3, sp, #64	; 0x40
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	469b      	mov	fp, r3
 800867a:	ab11      	add	r3, sp, #68	; 0x44
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	469a      	mov	sl, r3
 8008680:	ab12      	add	r3, sp, #72	; 0x48
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	4699      	mov	r9, r3
 8008686:	ab13      	add	r3, sp, #76	; 0x4c
 8008688:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;
	
	if(button[port].type == NONE)
 800868a:	00fc      	lsls	r4, r7, #3
 800868c:	19e4      	adds	r4, r4, r7
 800868e:	4b9e      	ldr	r3, [pc, #632]	; (8008908 <SetButtonEvents+0x2b0>)
 8008690:	191b      	adds	r3, r3, r4
 8008692:	785b      	ldrb	r3, [r3, #1]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d04c      	beq.n	8008732 <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec =pressed_x1sec;
 8008698:	00fc      	lsls	r4, r7, #3
 800869a:	19e4      	adds	r4, r4, r7
 800869c:	4b9a      	ldr	r3, [pc, #616]	; (8008908 <SetButtonEvents+0x2b0>)
 800869e:	191b      	adds	r3, r3, r4
 80086a0:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec =pressed_x2sec;
 80086a2:	4644      	mov	r4, r8
 80086a4:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec =pressed_x3sec;
 80086a6:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec =released_y1sec;
 80086a8:	465c      	mov	r4, fp
 80086aa:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec =released_y2sec;
 80086ac:	4654      	mov	r4, sl
 80086ae:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec =released_y3sec;
 80086b0:	464c      	mov	r4, r9
 80086b2:	71dc      	strb	r4, [r3, #7]
	
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)){
 80086b4:	2801      	cmp	r0, #1
 80086b6:	d003      	beq.n	80086c0 <SetButtonEvents+0x68>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d113      	bne.n	80086e4 <SetButtonEvents+0x8c>
 80086bc:	2900      	cmp	r1, #0
 80086be:	d042      	beq.n	8008746 <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 80086c0:	00f9      	lsls	r1, r7, #3
 80086c2:	19c9      	adds	r1, r1, r7
 80086c4:	4b90      	ldr	r3, [pc, #576]	; (8008908 <SetButtonEvents+0x2b0>)
 80086c6:	185b      	adds	r3, r3, r1
 80086c8:	7a19      	ldrb	r1, [r3, #8]
 80086ca:	2401      	movs	r4, #1
 80086cc:	4321      	orrs	r1, r4
 80086ce:	7219      	strb	r1, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked){
		button[port].events &=~BUTTON_EVENT_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 80086d0:	2801      	cmp	r0, #1
 80086d2:	d10c      	bne.n	80086ee <SetButtonEvents+0x96>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 80086d4:	00fa      	lsls	r2, r7, #3
 80086d6:	19d2      	adds	r2, r2, r7
 80086d8:	4b8b      	ldr	r3, [pc, #556]	; (8008908 <SetButtonEvents+0x2b0>)
 80086da:	189b      	adds	r3, r3, r2
 80086dc:	7a1a      	ldrb	r2, [r3, #8]
 80086de:	2102      	movs	r1, #2
 80086e0:	430a      	orrs	r2, r1
 80086e2:	721a      	strb	r2, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked){
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 80086e4:	2801      	cmp	r0, #1
 80086e6:	d042      	beq.n	800876e <SetButtonEvents+0x116>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d152      	bne.n	8008792 <SetButtonEvents+0x13a>
 80086ec:	e03d      	b.n	800876a <SetButtonEvents+0x112>
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d031      	beq.n	8008756 <SetButtonEvents+0xfe>
 80086f2:	e044      	b.n	800877e <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d059      	beq.n	80087ac <SetButtonEvents+0x154>
 80086f8:	e06d      	b.n	80087d6 <SetButtonEvents+0x17e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d100      	bne.n	8008700 <SetButtonEvents+0xa8>
 80086fe:	e082      	b.n	8008806 <SetButtonEvents+0x1ae>
 8008700:	e097      	b.n	8008832 <SetButtonEvents+0x1da>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 8008702:	2800      	cmp	r0, #0
 8008704:	d100      	bne.n	8008708 <SetButtonEvents+0xb0>
 8008706:	e0f2      	b.n	80088ee <SetButtonEvents+0x296>
 8008708:	e09f      	b.n	800884a <SetButtonEvents+0x1f2>
	if(!res)											// This variable exists
	{
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 800870a:	0a19      	lsrs	r1, r3, #8
 800870c:	0209      	lsls	r1, r1, #8
 800870e:	4311      	orrs	r1, r2
 8008710:	ab02      	add	r3, sp, #8
 8008712:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008714:	0020      	movs	r0, r4
 8008716:	f7ff f9bb 	bl	8007a90 <EE_WriteVariable>
 800871a:	e0ad      	b.n	8008878 <SetButtonEvents+0x220>
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
 800871c:	0019      	movs	r1, r3
 800871e:	9801      	ldr	r0, [sp, #4]
 8008720:	f7ff f9b6 	bl	8007a90 <EE_WriteVariable>
 8008724:	e0b7      	b.n	8008896 <SetButtonEvents+0x23e>
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
 8008726:	4653      	mov	r3, sl
 8008728:	4319      	orrs	r1, r3
 800872a:	0030      	movs	r0, r6
 800872c:	f7ff f9b0 	bl	8007a90 <EE_WriteVariable>
 8008730:	e0c0      	b.n	80088b4 <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008732:	200b      	movs	r0, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	return result;
}
 8008734:	b005      	add	sp, #20
 8008736:	bc3c      	pop	{r2, r3, r4, r5}
 8008738:	4690      	mov	r8, r2
 800873a:	4699      	mov	r9, r3
 800873c:	46a2      	mov	sl, r4
 800873e:	46ab      	mov	fp, r5
 8008740:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008742:	200b      	movs	r0, #11
 8008744:	e7f6      	b.n	8008734 <SetButtonEvents+0xdc>
		button[port].events &=~BUTTON_EVENT_CLICKED;
 8008746:	00f9      	lsls	r1, r7, #3
 8008748:	19c9      	adds	r1, r1, r7
 800874a:	4b6f      	ldr	r3, [pc, #444]	; (8008908 <SetButtonEvents+0x2b0>)
 800874c:	185b      	adds	r3, r3, r1
 800874e:	7a19      	ldrb	r1, [r3, #8]
 8008750:	2401      	movs	r4, #1
 8008752:	43a1      	bics	r1, r4
 8008754:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008756:	2a00      	cmp	r2, #0
 8008758:	d1bc      	bne.n	80086d4 <SetButtonEvents+0x7c>
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
 800875a:	00fa      	lsls	r2, r7, #3
 800875c:	19d2      	adds	r2, r2, r7
 800875e:	4b6a      	ldr	r3, [pc, #424]	; (8008908 <SetButtonEvents+0x2b0>)
 8008760:	189b      	adds	r3, r3, r2
 8008762:	7a1a      	ldrb	r2, [r3, #8]
 8008764:	2102      	movs	r1, #2
 8008766:	438a      	bics	r2, r1
 8008768:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 800876a:	2e00      	cmp	r6, #0
 800876c:	d016      	beq.n	800879c <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800876e:	00fa      	lsls	r2, r7, #3
 8008770:	19d2      	adds	r2, r2, r7
 8008772:	4b65      	ldr	r3, [pc, #404]	; (8008908 <SetButtonEvents+0x2b0>)
 8008774:	189b      	adds	r3, r3, r2
 8008776:	7a1a      	ldrb	r2, [r3, #8]
 8008778:	2104      	movs	r1, #4
 800877a:	430a      	orrs	r2, r1
 800877c:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 800877e:	2801      	cmp	r0, #1
 8008780:	d1b8      	bne.n	80086f4 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008782:	00fa      	lsls	r2, r7, #3
 8008784:	19d2      	adds	r2, r2, r7
 8008786:	4b60      	ldr	r3, [pc, #384]	; (8008908 <SetButtonEvents+0x2b0>)
 8008788:	189b      	adds	r3, r3, r2
 800878a:	7a1a      	ldrb	r2, [r3, #8]
 800878c:	2108      	movs	r1, #8
 800878e:	430a      	orrs	r2, r1
 8008790:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 8008792:	2801      	cmp	r0, #1
 8008794:	d017      	beq.n	80087c6 <SetButtonEvents+0x16e>
 8008796:	2800      	cmp	r0, #0
 8008798:	d128      	bne.n	80087ec <SetButtonEvents+0x194>
 800879a:	e012      	b.n	80087c2 <SetButtonEvents+0x16a>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800879c:	00fa      	lsls	r2, r7, #3
 800879e:	19d2      	adds	r2, r2, r7
 80087a0:	4b59      	ldr	r3, [pc, #356]	; (8008908 <SetButtonEvents+0x2b0>)
 80087a2:	189b      	adds	r3, r3, r2
 80087a4:	7a1a      	ldrb	r2, [r3, #8]
 80087a6:	2104      	movs	r1, #4
 80087a8:	438a      	bics	r2, r1
 80087aa:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 80087ac:	4643      	mov	r3, r8
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1e7      	bne.n	8008782 <SetButtonEvents+0x12a>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80087b2:	00fa      	lsls	r2, r7, #3
 80087b4:	19d2      	adds	r2, r2, r7
 80087b6:	4b54      	ldr	r3, [pc, #336]	; (8008908 <SetButtonEvents+0x2b0>)
 80087b8:	189b      	adds	r3, r3, r2
 80087ba:	7a1a      	ldrb	r2, [r3, #8]
 80087bc:	2108      	movs	r1, #8
 80087be:	438a      	bics	r2, r1
 80087c0:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 80087c2:	2d00      	cmp	r5, #0
 80087c4:	d017      	beq.n	80087f6 <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80087c6:	00fa      	lsls	r2, r7, #3
 80087c8:	19d2      	adds	r2, r2, r7
 80087ca:	4b4f      	ldr	r3, [pc, #316]	; (8008908 <SetButtonEvents+0x2b0>)
 80087cc:	189b      	adds	r3, r3, r2
 80087ce:	7a1a      	ldrb	r2, [r3, #8]
 80087d0:	2110      	movs	r1, #16
 80087d2:	430a      	orrs	r2, r1
 80087d4:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 80087d6:	2801      	cmp	r0, #1
 80087d8:	d000      	beq.n	80087dc <SetButtonEvents+0x184>
 80087da:	e78e      	b.n	80086fa <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80087dc:	00fa      	lsls	r2, r7, #3
 80087de:	19d2      	adds	r2, r2, r7
 80087e0:	4b49      	ldr	r3, [pc, #292]	; (8008908 <SetButtonEvents+0x2b0>)
 80087e2:	189b      	adds	r3, r3, r2
 80087e4:	7a1a      	ldrb	r2, [r3, #8]
 80087e6:	2120      	movs	r1, #32
 80087e8:	430a      	orrs	r2, r1
 80087ea:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 80087ec:	2801      	cmp	r0, #1
 80087ee:	d018      	beq.n	8008822 <SetButtonEvents+0x1ca>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d12a      	bne.n	800884a <SetButtonEvents+0x1f2>
 80087f4:	e012      	b.n	800881c <SetButtonEvents+0x1c4>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80087f6:	00fa      	lsls	r2, r7, #3
 80087f8:	19d2      	adds	r2, r2, r7
 80087fa:	4b43      	ldr	r3, [pc, #268]	; (8008908 <SetButtonEvents+0x2b0>)
 80087fc:	189b      	adds	r3, r3, r2
 80087fe:	7a1a      	ldrb	r2, [r3, #8]
 8008800:	2110      	movs	r1, #16
 8008802:	438a      	bics	r2, r1
 8008804:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 8008806:	465b      	mov	r3, fp
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e7      	bne.n	80087dc <SetButtonEvents+0x184>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800880c:	00fa      	lsls	r2, r7, #3
 800880e:	19d2      	adds	r2, r2, r7
 8008810:	4b3d      	ldr	r3, [pc, #244]	; (8008908 <SetButtonEvents+0x2b0>)
 8008812:	189b      	adds	r3, r3, r2
 8008814:	7a1a      	ldrb	r2, [r3, #8]
 8008816:	2120      	movs	r1, #32
 8008818:	438a      	bics	r2, r1
 800881a:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 800881c:	4653      	mov	r3, sl
 800881e:	2b00      	cmp	r3, #0
 8008820:	d05d      	beq.n	80088de <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008822:	00fa      	lsls	r2, r7, #3
 8008824:	19d2      	adds	r2, r2, r7
 8008826:	4b38      	ldr	r3, [pc, #224]	; (8008908 <SetButtonEvents+0x2b0>)
 8008828:	189b      	adds	r3, r3, r2
 800882a:	7a1a      	ldrb	r2, [r3, #8]
 800882c:	2140      	movs	r1, #64	; 0x40
 800882e:	430a      	orrs	r2, r1
 8008830:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 8008832:	2801      	cmp	r0, #1
 8008834:	d000      	beq.n	8008838 <SetButtonEvents+0x1e0>
 8008836:	e764      	b.n	8008702 <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008838:	00fa      	lsls	r2, r7, #3
 800883a:	19d2      	adds	r2, r2, r7
 800883c:	4b32      	ldr	r3, [pc, #200]	; (8008908 <SetButtonEvents+0x2b0>)
 800883e:	189b      	adds	r3, r3, r2
 8008840:	7a19      	ldrb	r1, [r3, #8]
 8008842:	2280      	movs	r2, #128	; 0x80
 8008844:	4252      	negs	r2, r2
 8008846:	430a      	orrs	r2, r1
 8008848:	721a      	strb	r2, [r3, #8]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 800884a:	003c      	movs	r4, r7
 800884c:	343a      	adds	r4, #58	; 0x3a
 800884e:	00a4      	lsls	r4, r4, #2
 8008850:	ab02      	add	r3, sp, #8
 8008852:	1d99      	adds	r1, r3, #6
 8008854:	0020      	movs	r0, r4
 8008856:	f7ff f8eb 	bl	8007a30 <EE_ReadVariable>
	if(!res)											// This variable exists
 800885a:	2800      	cmp	r0, #0
 800885c:	d000      	beq.n	8008860 <SetButtonEvents+0x208>
 800885e:	e770      	b.n	8008742 <SetButtonEvents+0xea>
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
 8008860:	ab02      	add	r3, sp, #8
 8008862:	3306      	adds	r3, #6
 8008864:	881b      	ldrh	r3, [r3, #0]
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 8008866:	00fa      	lsls	r2, r7, #3
 8008868:	19d2      	adds	r2, r2, r7
 800886a:	4f27      	ldr	r7, [pc, #156]	; (8008908 <SetButtonEvents+0x2b0>)
 800886c:	18bf      	adds	r7, r7, r2
 800886e:	7a3a      	ldrb	r2, [r7, #8]
 8008870:	b2d9      	uxtb	r1, r3
 8008872:	4291      	cmp	r1, r2
 8008874:	d000      	beq.n	8008878 <SetButtonEvents+0x220>
 8008876:	e748      	b.n	800870a <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
 8008878:	1c63      	adds	r3, r4, #1
 800887a:	aa02      	add	r2, sp, #8
 800887c:	1d97      	adds	r7, r2, #6
 800887e:	0039      	movs	r1, r7
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	0018      	movs	r0, r3
 8008884:	f7ff f8d4 	bl	8007a30 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
 8008888:	0236      	lsls	r6, r6, #8
 800888a:	883a      	ldrh	r2, [r7, #0]
 800888c:	465b      	mov	r3, fp
 800888e:	4333      	orrs	r3, r6
 8008890:	429a      	cmp	r2, r3
 8008892:	d000      	beq.n	8008896 <SetButtonEvents+0x23e>
 8008894:	e742      	b.n	800871c <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
 8008896:	1ca6      	adds	r6, r4, #2
 8008898:	ab02      	add	r3, sp, #8
 800889a:	1d9f      	adds	r7, r3, #6
 800889c:	0039      	movs	r1, r7
 800889e:	0030      	movs	r0, r6
 80088a0:	f7ff f8c6 	bl	8007a30 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
 80088a4:	4643      	mov	r3, r8
 80088a6:	0219      	lsls	r1, r3, #8
 80088a8:	883a      	ldrh	r2, [r7, #0]
 80088aa:	4653      	mov	r3, sl
 80088ac:	430b      	orrs	r3, r1
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d000      	beq.n	80088b4 <SetButtonEvents+0x25c>
 80088b2:	e738      	b.n	8008726 <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,&temp16);
 80088b4:	3403      	adds	r4, #3
 80088b6:	ab02      	add	r3, sp, #8
 80088b8:	1d9e      	adds	r6, r3, #6
 80088ba:	0031      	movs	r1, r6
 80088bc:	0020      	movs	r0, r4
 80088be:	f7ff f8b7 	bl	8007a30 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 80088c2:	022d      	lsls	r5, r5, #8
 80088c4:	8832      	ldrh	r2, [r6, #0]
 80088c6:	464b      	mov	r3, r9
 80088c8:	432b      	orrs	r3, r5
	return result;
 80088ca:	2000      	movs	r0, #0
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d100      	bne.n	80088d2 <SetButtonEvents+0x27a>
 80088d0:	e730      	b.n	8008734 <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec);
 80088d2:	0019      	movs	r1, r3
 80088d4:	0020      	movs	r0, r4
 80088d6:	f7ff f8db 	bl	8007a90 <EE_WriteVariable>
	return result;
 80088da:	2000      	movs	r0, #0
 80088dc:	e72a      	b.n	8008734 <SetButtonEvents+0xdc>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80088de:	00fa      	lsls	r2, r7, #3
 80088e0:	19d2      	adds	r2, r2, r7
 80088e2:	4b09      	ldr	r3, [pc, #36]	; (8008908 <SetButtonEvents+0x2b0>)
 80088e4:	189b      	adds	r3, r3, r2
 80088e6:	7a1a      	ldrb	r2, [r3, #8]
 80088e8:	2140      	movs	r1, #64	; 0x40
 80088ea:	438a      	bics	r2, r1
 80088ec:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 80088ee:	464b      	mov	r3, r9
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1a1      	bne.n	8008838 <SetButtonEvents+0x1e0>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 80088f4:	00fa      	lsls	r2, r7, #3
 80088f6:	19d2      	adds	r2, r2, r7
 80088f8:	4b03      	ldr	r3, [pc, #12]	; (8008908 <SetButtonEvents+0x2b0>)
 80088fa:	189b      	adds	r3, r3, r2
 80088fc:	7a19      	ldrb	r1, [r3, #8]
 80088fe:	227f      	movs	r2, #127	; 0x7f
 8008900:	400a      	ands	r2, r1
 8008902:	721a      	strb	r2, [r3, #8]
 8008904:	e7a1      	b.n	800884a <SetButtonEvents+0x1f2>
 8008906:	46c0      	nop			; (mov r8, r8)
 8008908:	20001724 	.word	0x20001724

0800890c <ADC_Channels_Config>:
		Error_Handler();
	}
	ADC_flag =1;
}

void ADC_Channels_Config(ADC_HandleTypeDef *adcHandle){
 800890c:	b510      	push	{r4, lr}
 800890e:	b088      	sub	sp, #32
 8008910:	0004      	movs	r4, r0
	
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 8008912:	2214      	movs	r2, #20
 8008914:	2100      	movs	r1, #0
 8008916:	a803      	add	r0, sp, #12
 8008918:	f00c f8d2 	bl	8014ac0 <memset>
	if(adcHandle->Instance == ADC1){
 800891c:	4b11      	ldr	r3, [pc, #68]	; (8008964 <ADC_Channels_Config+0x58>)
 800891e:	6822      	ldr	r2, [r4, #0]
 8008920:	429a      	cmp	r2, r3
 8008922:	d001      	beq.n	8008928 <ADC_Channels_Config+0x1c>
		
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 8008924:	b008      	add	sp, #32
 8008926:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 8008928:	4b0f      	ldr	r3, [pc, #60]	; (8008968 <ADC_Channels_Config+0x5c>)
 800892a:	6999      	ldr	r1, [r3, #24]
 800892c:	2080      	movs	r0, #128	; 0x80
 800892e:	0080      	lsls	r0, r0, #2
 8008930:	4301      	orrs	r1, r0
 8008932:	6199      	str	r1, [r3, #24]
 8008934:	699a      	ldr	r2, [r3, #24]
 8008936:	4002      	ands	r2, r0
 8008938:	9201      	str	r2, [sp, #4]
 800893a:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800893c:	695a      	ldr	r2, [r3, #20]
 800893e:	2180      	movs	r1, #128	; 0x80
 8008940:	0289      	lsls	r1, r1, #10
 8008942:	430a      	orrs	r2, r1
 8008944:	615a      	str	r2, [r3, #20]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	400b      	ands	r3, r1
 800894a:	9302      	str	r3, [sp, #8]
 800894c:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800894e:	233c      	movs	r3, #60	; 0x3c
 8008950:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008952:	3b39      	subs	r3, #57	; 0x39
 8008954:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008956:	3871      	subs	r0, #113	; 0x71
 8008958:	38ff      	subs	r0, #255	; 0xff
 800895a:	a903      	add	r1, sp, #12
 800895c:	05c0      	lsls	r0, r0, #23
 800895e:	f009 fbe1 	bl	8012124 <HAL_GPIO_Init>
}
 8008962:	e7df      	b.n	8008924 <ADC_Channels_Config+0x18>
 8008964:	40012400 	.word	0x40012400
 8008968:	40021000 	.word	0x40021000

0800896c <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart,char *side){
	
	if(huart->Instance == USART2 && side == "top")
 800896c:	6803      	ldr	r3, [r0, #0]
 800896e:	4a0d      	ldr	r2, [pc, #52]	; (80089a4 <Get_channel+0x38>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d003      	beq.n	800897c <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if(huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if(huart->Instance == USART6 && side == "top")
 8008974:	4a0c      	ldr	r2, [pc, #48]	; (80089a8 <Get_channel+0x3c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d008      	beq.n	800898c <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if(huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 800897a:	4770      	bx	lr
	if(huart->Instance == USART2 && side == "top")
 800897c:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <Get_channel+0x40>)
 800897e:	4299      	cmp	r1, r3
 8008980:	d00c      	beq.n	800899c <Get_channel+0x30>
	else if(huart->Instance == USART2 && side == "bottom")
 8008982:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <Get_channel+0x44>)
 8008984:	4299      	cmp	r1, r3
 8008986:	d1f8      	bne.n	800897a <Get_channel+0xe>
		return ADC_CHANNEL_3;
 8008988:	2003      	movs	r0, #3
 800898a:	e7f6      	b.n	800897a <Get_channel+0xe>
	else if(huart->Instance == USART6 && side == "top")
 800898c:	4b07      	ldr	r3, [pc, #28]	; (80089ac <Get_channel+0x40>)
 800898e:	4299      	cmp	r1, r3
 8008990:	d006      	beq.n	80089a0 <Get_channel+0x34>
	else if(huart->Instance == USART6 && side == "bottom")
 8008992:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <Get_channel+0x44>)
 8008994:	4299      	cmp	r1, r3
 8008996:	d1f0      	bne.n	800897a <Get_channel+0xe>
		return ADC_CHANNEL_5;
 8008998:	2005      	movs	r0, #5
 800899a:	e7ee      	b.n	800897a <Get_channel+0xe>
		return ADC_CHANNEL_2;
 800899c:	2002      	movs	r0, #2
 800899e:	e7ec      	b.n	800897a <Get_channel+0xe>
		return ADC_CHANNEL_4;
 80089a0:	2004      	movs	r0, #4
 80089a2:	e7ea      	b.n	800897a <Get_channel+0xe>
 80089a4:	40004400 	.word	0x40004400
 80089a8:	40011400 	.word	0x40011400
 80089ac:	08019edc 	.word	0x08019edc
 80089b0:	08019ee0 	.word	0x08019ee0

080089b4 <Error_Handler>:

void Error_Handler(void){
 80089b4:	b510      	push	{r4, lr}
	
	HAL_Delay(100);
 80089b6:	2064      	movs	r0, #100	; 0x64
 80089b8:	f008 f84c 	bl	8010a54 <HAL_Delay>
	
}
 80089bc:	bd10      	pop	{r4, pc}
	...

080089c0 <MX_ADC_Init>:
void MX_ADC_Init(void){
 80089c0:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 80089c2:	4811      	ldr	r0, [pc, #68]	; (8008a08 <MX_ADC_Init+0x48>)
 80089c4:	4b11      	ldr	r3, [pc, #68]	; (8008a0c <MX_ADC_Init+0x4c>)
 80089c6:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80089c8:	2380      	movs	r3, #128	; 0x80
 80089ca:	061b      	lsls	r3, r3, #24
 80089cc:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80089ce:	2300      	movs	r3, #0
 80089d0:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80089d2:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80089d4:	2201      	movs	r2, #1
 80089d6:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80089d8:	2104      	movs	r1, #4
 80089da:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait =DISABLE;
 80089dc:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
 80089de:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode =ENABLE;
 80089e0:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode =DISABLE;
 80089e2:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80089e4:	21c2      	movs	r1, #194	; 0xc2
 80089e6:	31ff      	adds	r1, #255	; 0xff
 80089e8:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80089ea:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests =DISABLE;
 80089ec:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80089ee:	6342      	str	r2, [r0, #52]	; 0x34
	if(HAL_ADC_Init(&hadc) != HAL_OK){
 80089f0:	f008 f90a 	bl	8010c08 <HAL_ADC_Init>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d103      	bne.n	8008a00 <MX_ADC_Init+0x40>
	ADC_flag =1;
 80089f8:	4b05      	ldr	r3, [pc, #20]	; (8008a10 <MX_ADC_Init+0x50>)
 80089fa:	2201      	movs	r2, #1
 80089fc:	701a      	strb	r2, [r3, #0]
}
 80089fe:	bd10      	pop	{r4, pc}
		Error_Handler();
 8008a00:	f7ff ffd8 	bl	80089b4 <Error_Handler>
 8008a04:	e7f8      	b.n	80089f8 <MX_ADC_Init+0x38>
 8008a06:	46c0      	nop			; (mov r8, r8)
 8008a08:	20006cac 	.word	0x20006cac
 8008a0c:	40012400 	.word	0x40012400
 8008a10:	20001710 	.word	0x20001710

08008a14 <ReadTempAndVref>:
void ReadTempAndVref(float *temp,float *Vref){
 8008a14:	b570      	push	{r4, r5, r6, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	0005      	movs	r5, r0
 8008a1a:	000e      	movs	r6, r1
	if(0 == ADC_flag)
 8008a1c:	4b4d      	ldr	r3, [pc, #308]	; (8008b54 <ReadTempAndVref+0x140>)
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d100      	bne.n	8008a26 <ReadTempAndVref+0x12>
 8008a24:	e087      	b.n	8008b36 <ReadTempAndVref+0x122>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008a26:	494c      	ldr	r1, [pc, #304]	; (8008b58 <ReadTempAndVref+0x144>)
 8008a28:	2310      	movs	r3, #16
 8008a2a:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008a2c:	2380      	movs	r3, #128	; 0x80
 8008a2e:	015b      	lsls	r3, r3, #5
 8008a30:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008a32:	2301      	movs	r3, #1
 8008a34:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008a36:	4849      	ldr	r0, [pc, #292]	; (8008b5c <ReadTempAndVref+0x148>)
 8008a38:	f008 fab8 	bl	8010fac <HAL_ADC_ConfigChannel>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d000      	beq.n	8008a42 <ReadTempAndVref+0x2e>
 8008a40:	e07c      	b.n	8008b3c <ReadTempAndVref+0x128>
	HAL_ADC_Start(&hadc);
 8008a42:	4c46      	ldr	r4, [pc, #280]	; (8008b5c <ReadTempAndVref+0x148>)
 8008a44:	0020      	movs	r0, r4
 8008a46:	f008 f987 	bl	8010d58 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 8008a4a:	2164      	movs	r1, #100	; 0x64
 8008a4c:	0020      	movs	r0, r4
 8008a4e:	f008 f9d5 	bl	8010dfc <HAL_ADC_PollForConversion>
	ADC_value_temp =HAL_ADC_GetValue(&hadc);
 8008a52:	0020      	movs	r0, r4
 8008a54:	f008 fa32 	bl	8010ebc <HAL_ADC_GetValue>
 8008a58:	4b41      	ldr	r3, [pc, #260]	; (8008b60 <ReadTempAndVref+0x14c>)
 8008a5a:	8018      	strh	r0, [r3, #0]
	*temp =((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 8008a5c:	0400      	lsls	r0, r0, #16
 8008a5e:	0c00      	lsrs	r0, r0, #16
 8008a60:	f7fa f92a 	bl	8002cb8 <__aeabi_i2d>
 8008a64:	4a3f      	ldr	r2, [pc, #252]	; (8008b64 <ReadTempAndVref+0x150>)
 8008a66:	4b40      	ldr	r3, [pc, #256]	; (8008b68 <ReadTempAndVref+0x154>)
 8008a68:	f7f9 fb1a 	bl	80020a0 <__aeabi_dmul>
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4b3f      	ldr	r3, [pc, #252]	; (8008b6c <ReadTempAndVref+0x158>)
 8008a70:	f7f8 ff0c 	bl	800188c <__aeabi_ddiv>
 8008a74:	4a3e      	ldr	r2, [pc, #248]	; (8008b70 <ReadTempAndVref+0x15c>)
 8008a76:	4b3f      	ldr	r3, [pc, #252]	; (8008b74 <ReadTempAndVref+0x160>)
 8008a78:	f7f9 fd84 	bl	8002584 <__aeabi_dsub>
 8008a7c:	4a3e      	ldr	r2, [pc, #248]	; (8008b78 <ReadTempAndVref+0x164>)
 8008a7e:	4b3f      	ldr	r3, [pc, #252]	; (8008b7c <ReadTempAndVref+0x168>)
 8008a80:	f7f8 ff04 	bl	800188c <__aeabi_ddiv>
 8008a84:	2200      	movs	r2, #0
 8008a86:	4b3e      	ldr	r3, [pc, #248]	; (8008b80 <ReadTempAndVref+0x16c>)
 8008a88:	f7f8 fbe4 	bl	8001254 <__aeabi_dadd>
 8008a8c:	f7fa f9d2 	bl	8002e34 <__aeabi_d2f>
 8008a90:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 8008a92:	0020      	movs	r0, r4
 8008a94:	f008 f990 	bl	8010db8 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008a98:	492f      	ldr	r1, [pc, #188]	; (8008b58 <ReadTempAndVref+0x144>)
 8008a9a:	2310      	movs	r3, #16
 8008a9c:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008a9e:	4b39      	ldr	r3, [pc, #228]	; (8008b84 <ReadTempAndVref+0x170>)
 8008aa0:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008aa6:	0020      	movs	r0, r4
 8008aa8:	f008 fa80 	bl	8010fac <HAL_ADC_ConfigChannel>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d148      	bne.n	8008b42 <ReadTempAndVref+0x12e>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008ab0:	4929      	ldr	r1, [pc, #164]	; (8008b58 <ReadTempAndVref+0x144>)
 8008ab2:	2311      	movs	r3, #17
 8008ab4:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008ab6:	2380      	movs	r3, #128	; 0x80
 8008ab8:	015b      	lsls	r3, r3, #5
 8008aba:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008abc:	2305      	movs	r3, #5
 8008abe:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008ac0:	4826      	ldr	r0, [pc, #152]	; (8008b5c <ReadTempAndVref+0x148>)
 8008ac2:	f008 fa73 	bl	8010fac <HAL_ADC_ConfigChannel>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d13e      	bne.n	8008b48 <ReadTempAndVref+0x134>
	HAL_ADC_Start(&hadc);
 8008aca:	4d24      	ldr	r5, [pc, #144]	; (8008b5c <ReadTempAndVref+0x148>)
 8008acc:	0028      	movs	r0, r5
 8008ace:	f008 f943 	bl	8010d58 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 8008ad2:	2164      	movs	r1, #100	; 0x64
 8008ad4:	0028      	movs	r0, r5
 8008ad6:	f008 f991 	bl	8010dfc <HAL_ADC_PollForConversion>
	ADC_value_Vref =HAL_ADC_GetValue(&hadc);
 8008ada:	0028      	movs	r0, r5
 8008adc:	f008 f9ee 	bl	8010ebc <HAL_ADC_GetValue>
 8008ae0:	0004      	movs	r4, r0
 8008ae2:	4b29      	ldr	r3, [pc, #164]	; (8008b88 <ReadTempAndVref+0x174>)
 8008ae4:	8018      	strh	r0, [r3, #0]
	*Vref =3.3 * (*Vref_Cal) / ADC_value_Vref;
 8008ae6:	4b29      	ldr	r3, [pc, #164]	; (8008b8c <ReadTempAndVref+0x178>)
 8008ae8:	8818      	ldrh	r0, [r3, #0]
 8008aea:	f7fa f8e5 	bl	8002cb8 <__aeabi_i2d>
 8008aee:	4a1d      	ldr	r2, [pc, #116]	; (8008b64 <ReadTempAndVref+0x150>)
 8008af0:	4b1d      	ldr	r3, [pc, #116]	; (8008b68 <ReadTempAndVref+0x154>)
 8008af2:	f7f9 fad5 	bl	80020a0 <__aeabi_dmul>
 8008af6:	9000      	str	r0, [sp, #0]
 8008af8:	9101      	str	r1, [sp, #4]
 8008afa:	0420      	lsls	r0, r4, #16
 8008afc:	0c00      	lsrs	r0, r0, #16
 8008afe:	f7fa f8db 	bl	8002cb8 <__aeabi_i2d>
 8008b02:	0002      	movs	r2, r0
 8008b04:	000b      	movs	r3, r1
 8008b06:	9800      	ldr	r0, [sp, #0]
 8008b08:	9901      	ldr	r1, [sp, #4]
 8008b0a:	f7f8 febf 	bl	800188c <__aeabi_ddiv>
 8008b0e:	f7fa f991 	bl	8002e34 <__aeabi_d2f>
 8008b12:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 8008b14:	0028      	movs	r0, r5
 8008b16:	f008 f94f 	bl	8010db8 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008b1a:	490f      	ldr	r1, [pc, #60]	; (8008b58 <ReadTempAndVref+0x144>)
 8008b1c:	2311      	movs	r3, #17
 8008b1e:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008b20:	4b18      	ldr	r3, [pc, #96]	; (8008b84 <ReadTempAndVref+0x170>)
 8008b22:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008b24:	2301      	movs	r3, #1
 8008b26:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b28:	0028      	movs	r0, r5
 8008b2a:	f008 fa3f 	bl	8010fac <HAL_ADC_ConfigChannel>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d10d      	bne.n	8008b4e <ReadTempAndVref+0x13a>
}
 8008b32:	b002      	add	sp, #8
 8008b34:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 8008b36:	f7ff ff43 	bl	80089c0 <MX_ADC_Init>
 8008b3a:	e774      	b.n	8008a26 <ReadTempAndVref+0x12>
		Error_Handler();
 8008b3c:	f7ff ff3a 	bl	80089b4 <Error_Handler>
 8008b40:	e77f      	b.n	8008a42 <ReadTempAndVref+0x2e>
		Error_Handler();
 8008b42:	f7ff ff37 	bl	80089b4 <Error_Handler>
 8008b46:	e7b3      	b.n	8008ab0 <ReadTempAndVref+0x9c>
		Error_Handler();
 8008b48:	f7ff ff34 	bl	80089b4 <Error_Handler>
 8008b4c:	e7bd      	b.n	8008aca <ReadTempAndVref+0xb6>
		Error_Handler();
 8008b4e:	f7ff ff31 	bl	80089b4 <Error_Handler>
}
 8008b52:	e7ee      	b.n	8008b32 <ReadTempAndVref+0x11e>
 8008b54:	20001710 	.word	0x20001710
 8008b58:	2000179c 	.word	0x2000179c
 8008b5c:	20006cac 	.word	0x20006cac
 8008b60:	20001714 	.word	0x20001714
 8008b64:	66666666 	.word	0x66666666
 8008b68:	400a6666 	.word	0x400a6666
 8008b6c:	40affe00 	.word	0x40affe00
 8008b70:	28f5c28f 	.word	0x28f5c28f
 8008b74:	3ff68f5c 	.word	0x3ff68f5c
 8008b78:	33333333 	.word	0x33333333
 8008b7c:	40113333 	.word	0x40113333
 8008b80:	40390000 	.word	0x40390000
 8008b84:	00001001 	.word	0x00001001
 8008b88:	20001712 	.word	0x20001712
 8008b8c:	1ffff7ba 	.word	0x1ffff7ba

08008b90 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port,float *precentageValue){
 8008b90:	b570      	push	{r4, r5, r6, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	0004      	movs	r4, r0
 8008b96:	000d      	movs	r5, r1
	if(port == 2 || port == 3){
 8008b98:	1e83      	subs	r3, r0, #2
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d901      	bls.n	8008ba2 <GetReadPrecentage+0x12>
}
 8008b9e:	b006      	add	sp, #24
 8008ba0:	bd70      	pop	{r4, r5, r6, pc}
		if(0 == ADC_flag){
 8008ba2:	4b3e      	ldr	r3, [pc, #248]	; (8008c9c <GetReadPrecentage+0x10c>)
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d055      	beq.n	8008c56 <GetReadPrecentage+0xc6>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8008baa:	2090      	movs	r0, #144	; 0x90
 8008bac:	2201      	movs	r2, #1
 8008bae:	2110      	movs	r1, #16
 8008bb0:	05c0      	lsls	r0, r0, #23
 8008bb2:	f009 fc2b 	bl	801240c <HAL_GPIO_WritePin>
		Channel =Get_channel(GetUart(port),"bottom");
 8008bb6:	0020      	movs	r0, r4
 8008bb8:	f005 fdca 	bl	800e750 <GetUart>
 8008bbc:	4938      	ldr	r1, [pc, #224]	; (8008ca0 <GetReadPrecentage+0x110>)
 8008bbe:	f7ff fed5 	bl	800896c <Get_channel>
 8008bc2:	4b38      	ldr	r3, [pc, #224]	; (8008ca4 <GetReadPrecentage+0x114>)
 8008bc4:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 8008bc6:	4938      	ldr	r1, [pc, #224]	; (8008ca8 <GetReadPrecentage+0x118>)
 8008bc8:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008bca:	2380      	movs	r3, #128	; 0x80
 8008bcc:	015b      	lsls	r3, r3, #5
 8008bce:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008bd4:	4835      	ldr	r0, [pc, #212]	; (8008cac <GetReadPrecentage+0x11c>)
 8008bd6:	f008 f9e9 	bl	8010fac <HAL_ADC_ConfigChannel>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d15b      	bne.n	8008c96 <GetReadPrecentage+0x106>
		HAL_ADC_Start(&hadc);
 8008bde:	4c33      	ldr	r4, [pc, #204]	; (8008cac <GetReadPrecentage+0x11c>)
 8008be0:	0020      	movs	r0, r4
 8008be2:	f008 f8b9 	bl	8010d58 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008be6:	2164      	movs	r1, #100	; 0x64
 8008be8:	0020      	movs	r0, r4
 8008bea:	f008 f907 	bl	8010dfc <HAL_ADC_PollForConversion>
		percentage =HAL_ADC_GetValue(&hadc);
 8008bee:	0020      	movs	r0, r4
 8008bf0:	f008 f964 	bl	8010ebc <HAL_ADC_GetValue>
 8008bf4:	f7f8 faee 	bl	80011d4 <__aeabi_ui2f>
		percentage =3.3 * percentage / 4095;
 8008bf8:	f7fa f8ca 	bl	8002d90 <__aeabi_f2d>
 8008bfc:	4a2c      	ldr	r2, [pc, #176]	; (8008cb0 <GetReadPrecentage+0x120>)
 8008bfe:	4b2d      	ldr	r3, [pc, #180]	; (8008cb4 <GetReadPrecentage+0x124>)
 8008c00:	f7f9 fa4e 	bl	80020a0 <__aeabi_dmul>
 8008c04:	2200      	movs	r2, #0
 8008c06:	4b2c      	ldr	r3, [pc, #176]	; (8008cb8 <GetReadPrecentage+0x128>)
 8008c08:	f7f8 fe40 	bl	800188c <__aeabi_ddiv>
 8008c0c:	f7fa f912 	bl	8002e34 <__aeabi_d2f>
 8008c10:	4b2a      	ldr	r3, [pc, #168]	; (8008cbc <GetReadPrecentage+0x12c>)
 8008c12:	6018      	str	r0, [r3, #0]
		current =(100 * percentage) / 3.3;
 8008c14:	492a      	ldr	r1, [pc, #168]	; (8008cc0 <GetReadPrecentage+0x130>)
 8008c16:	f7f7 ffc7 	bl	8000ba8 <__aeabi_fmul>
 8008c1a:	f7fa f8b9 	bl	8002d90 <__aeabi_f2d>
 8008c1e:	4a24      	ldr	r2, [pc, #144]	; (8008cb0 <GetReadPrecentage+0x120>)
 8008c20:	4b24      	ldr	r3, [pc, #144]	; (8008cb4 <GetReadPrecentage+0x124>)
 8008c22:	f7f8 fe33 	bl	800188c <__aeabi_ddiv>
 8008c26:	f7fa f905 	bl	8002e34 <__aeabi_d2f>
 8008c2a:	4b26      	ldr	r3, [pc, #152]	; (8008cc4 <GetReadPrecentage+0x134>)
 8008c2c:	6018      	str	r0, [r3, #0]
		*precentageValue =current;
 8008c2e:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 8008c30:	0020      	movs	r0, r4
 8008c32:	f008 f8c1 	bl	8010db8 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008c36:	491c      	ldr	r1, [pc, #112]	; (8008ca8 <GetReadPrecentage+0x118>)
 8008c38:	4b1a      	ldr	r3, [pc, #104]	; (8008ca4 <GetReadPrecentage+0x114>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008c3e:	4b22      	ldr	r3, [pc, #136]	; (8008cc8 <GetReadPrecentage+0x138>)
 8008c40:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c42:	2301      	movs	r3, #1
 8008c44:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008c46:	0020      	movs	r0, r4
 8008c48:	f008 f9b0 	bl	8010fac <HAL_ADC_ConfigChannel>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d0a6      	beq.n	8008b9e <GetReadPrecentage+0xe>
			Error_Handler();
 8008c50:	f7ff feb0 	bl	80089b4 <Error_Handler>
 8008c54:	e7a3      	b.n	8008b9e <GetReadPrecentage+0xe>
			MX_ADC_Init();
 8008c56:	f7ff feb3 	bl	80089c0 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 8008c5a:	0020      	movs	r0, r4
 8008c5c:	f005 fd78 	bl	800e750 <GetUart>
 8008c60:	f00a fedd 	bl	8013a1e <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA,GPIO_PIN_4);
 8008c64:	2690      	movs	r6, #144	; 0x90
 8008c66:	05f6      	lsls	r6, r6, #23
 8008c68:	2110      	movs	r1, #16
 8008c6a:	0030      	movs	r0, r6
 8008c6c:	f009 fb3a 	bl	80122e4 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 8008c70:	480e      	ldr	r0, [pc, #56]	; (8008cac <GetReadPrecentage+0x11c>)
 8008c72:	f008 fa3f 	bl	80110f4 <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008c76:	2310      	movs	r3, #16
 8008c78:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c7a:	3b0f      	subs	r3, #15
 8008c7c:	9302      	str	r3, [sp, #8]
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008c7e:	3302      	adds	r3, #2
 8008c80:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008c82:	a901      	add	r1, sp, #4
 8008c84:	0030      	movs	r0, r6
 8008c86:	f009 fa4d 	bl	8012124 <HAL_GPIO_Init>
			portStatus[port - 1] =CUSTOM;
 8008c8a:	4b10      	ldr	r3, [pc, #64]	; (8008ccc <GetReadPrecentage+0x13c>)
 8008c8c:	191b      	adds	r3, r3, r4
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	2206      	movs	r2, #6
 8008c92:	701a      	strb	r2, [r3, #0]
 8008c94:	e789      	b.n	8008baa <GetReadPrecentage+0x1a>
			Error_Handler();
 8008c96:	f7ff fe8d 	bl	80089b4 <Error_Handler>
 8008c9a:	e7a0      	b.n	8008bde <GetReadPrecentage+0x4e>
 8008c9c:	20001710 	.word	0x20001710
 8008ca0:	08019ee0 	.word	0x08019ee0
 8008ca4:	20001720 	.word	0x20001720
 8008ca8:	2000179c 	.word	0x2000179c
 8008cac:	20006cac 	.word	0x20006cac
 8008cb0:	66666666 	.word	0x66666666
 8008cb4:	400a6666 	.word	0x400a6666
 8008cb8:	40affe00 	.word	0x40affe00
 8008cbc:	20001768 	.word	0x20001768
 8008cc0:	42c80000 	.word	0x42c80000
 8008cc4:	2000175c 	.word	0x2000175c
 8008cc8:	00001001 	.word	0x00001001
 8008ccc:	200010cc 	.word	0x200010cc

08008cd0 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port,char *side){
	
	if(Port == 2 && side == "top")
 8008cd0:	2802      	cmp	r0, #2
 8008cd2:	d004      	beq.n	8008cde <Get_Rank+0xe>
		Rank_t =0;
	else if(Port == 2 && side == "bottom")
		Rank_t =1;
	else if(Port == 3 && side == "top")
 8008cd4:	2803      	cmp	r0, #3
 8008cd6:	d010      	beq.n	8008cfa <Get_Rank+0x2a>
		Rank_t =2;
	else if(Port == 3 && side == "bottom")
		Rank_t =3;
	return Rank_t;
 8008cd8:	4b0f      	ldr	r3, [pc, #60]	; (8008d18 <Get_Rank+0x48>)
 8008cda:	7818      	ldrb	r0, [r3, #0]
}
 8008cdc:	4770      	bx	lr
	if(Port == 2 && side == "top")
 8008cde:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <Get_Rank+0x4c>)
 8008ce0:	4299      	cmp	r1, r3
 8008ce2:	d006      	beq.n	8008cf2 <Get_Rank+0x22>
	else if(Port == 2 && side == "bottom")
 8008ce4:	4b0e      	ldr	r3, [pc, #56]	; (8008d20 <Get_Rank+0x50>)
 8008ce6:	4299      	cmp	r1, r3
 8008ce8:	d1f6      	bne.n	8008cd8 <Get_Rank+0x8>
		Rank_t =1;
 8008cea:	4b0b      	ldr	r3, [pc, #44]	; (8008d18 <Get_Rank+0x48>)
 8008cec:	2201      	movs	r2, #1
 8008cee:	701a      	strb	r2, [r3, #0]
 8008cf0:	e7f2      	b.n	8008cd8 <Get_Rank+0x8>
		Rank_t =0;
 8008cf2:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <Get_Rank+0x48>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	701a      	strb	r2, [r3, #0]
 8008cf8:	e7ee      	b.n	8008cd8 <Get_Rank+0x8>
	else if(Port == 3 && side == "top")
 8008cfa:	4b08      	ldr	r3, [pc, #32]	; (8008d1c <Get_Rank+0x4c>)
 8008cfc:	4299      	cmp	r1, r3
 8008cfe:	d006      	beq.n	8008d0e <Get_Rank+0x3e>
	else if(Port == 3 && side == "bottom")
 8008d00:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <Get_Rank+0x50>)
 8008d02:	4299      	cmp	r1, r3
 8008d04:	d1e8      	bne.n	8008cd8 <Get_Rank+0x8>
		Rank_t =3;
 8008d06:	4b04      	ldr	r3, [pc, #16]	; (8008d18 <Get_Rank+0x48>)
 8008d08:	2203      	movs	r2, #3
 8008d0a:	701a      	strb	r2, [r3, #0]
 8008d0c:	e7e4      	b.n	8008cd8 <Get_Rank+0x8>
		Rank_t =2;
 8008d0e:	4b02      	ldr	r3, [pc, #8]	; (8008d18 <Get_Rank+0x48>)
 8008d10:	2202      	movs	r2, #2
 8008d12:	701a      	strb	r2, [r3, #0]
 8008d14:	e7e0      	b.n	8008cd8 <Get_Rank+0x8>
 8008d16:	46c0      	nop			; (mov r8, r8)
 8008d18:	20001721 	.word	0x20001721
 8008d1c:	08019edc 	.word	0x08019edc
 8008d20:	08019ee0 	.word	0x08019ee0

08008d24 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port,char *side){
 8008d24:	b570      	push	{r4, r5, r6, lr}
 8008d26:	0004      	movs	r4, r0
 8008d28:	000d      	movs	r5, r1
	if(ADC_port == 2 || ADC_port == 3){
 8008d2a:	1e83      	subs	r3, r0, #2
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d900      	bls.n	8008d32 <ADCSelectChannel+0xe>
}
 8008d30:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008d32:	f005 fd0d 	bl	800e750 <GetUart>
 8008d36:	f00a fe72 	bl	8013a1e <HAL_UART_DeInit>
		portStatus[ADC_port - 1] =CUSTOM;
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	; (8008d74 <ADCSelectChannel+0x50>)
 8008d3c:	191b      	adds	r3, r3, r4
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	2206      	movs	r2, #6
 8008d42:	701a      	strb	r2, [r3, #0]
		ADC_Channels_Config(&hadc);
 8008d44:	480c      	ldr	r0, [pc, #48]	; (8008d78 <ADCSelectChannel+0x54>)
 8008d46:	f7ff fde1 	bl	800890c <ADC_Channels_Config>
		Channel =Get_channel(GetUart(ADC_port),side);
 8008d4a:	0020      	movs	r0, r4
 8008d4c:	f005 fd00 	bl	800e750 <GetUart>
 8008d50:	0029      	movs	r1, r5
 8008d52:	f7ff fe0b 	bl	800896c <Get_channel>
 8008d56:	4b09      	ldr	r3, [pc, #36]	; (8008d7c <ADCSelectChannel+0x58>)
 8008d58:	7018      	strb	r0, [r3, #0]
		Rank_t =Get_Rank(ADC_port,side);
 8008d5a:	0029      	movs	r1, r5
 8008d5c:	0020      	movs	r0, r4
 8008d5e:	f7ff ffb7 	bl	8008cd0 <Get_Rank>
 8008d62:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <ADCSelectChannel+0x5c>)
 8008d64:	7018      	strb	r0, [r3, #0]
		if(ADC_flag == 0)
 8008d66:	4b07      	ldr	r3, [pc, #28]	; (8008d84 <ADCSelectChannel+0x60>)
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e0      	bne.n	8008d30 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 8008d6e:	f7ff fe27 	bl	80089c0 <MX_ADC_Init>
}
 8008d72:	e7dd      	b.n	8008d30 <ADCSelectChannel+0xc>
 8008d74:	200010cc 	.word	0x200010cc
 8008d78:	20006cac 	.word	0x20006cac
 8008d7c:	20001720 	.word	0x20001720
 8008d80:	20001721 	.word	0x20001721
 8008d84:	20001710 	.word	0x20001710

08008d88 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8a:	0005      	movs	r5, r0
 8008d8c:	000e      	movs	r6, r1
 8008d8e:	0014      	movs	r4, r2
	if(ADC_flag == 1){
 8008d90:	4b26      	ldr	r3, [pc, #152]	; (8008e2c <ReadADCChannel+0xa4>)
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d008      	beq.n	8008daa <ReadADCChannel+0x22>
	*ADC_Value =(float )ADCchannelvalue[Rank_t];
 8008d98:	4b25      	ldr	r3, [pc, #148]	; (8008e30 <ReadADCChannel+0xa8>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	4a25      	ldr	r2, [pc, #148]	; (8008e34 <ReadADCChannel+0xac>)
 8008da0:	5a98      	ldrh	r0, [r3, r2]
 8008da2:	f7f8 fa17 	bl	80011d4 <__aeabi_ui2f>
 8008da6:	6020      	str	r0, [r4, #0]
}
 8008da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel =Get_channel(GetUart(Port),side);
 8008daa:	f005 fcd1 	bl	800e750 <GetUart>
 8008dae:	0031      	movs	r1, r6
 8008db0:	f7ff fddc 	bl	800896c <Get_channel>
 8008db4:	4f20      	ldr	r7, [pc, #128]	; (8008e38 <ReadADCChannel+0xb0>)
 8008db6:	7038      	strb	r0, [r7, #0]
		Rank_t =Get_Rank(Port,side);
 8008db8:	0031      	movs	r1, r6
 8008dba:	0028      	movs	r0, r5
 8008dbc:	f7ff ff88 	bl	8008cd0 <Get_Rank>
 8008dc0:	4b1b      	ldr	r3, [pc, #108]	; (8008e30 <ReadADCChannel+0xa8>)
 8008dc2:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 8008dc4:	491d      	ldr	r1, [pc, #116]	; (8008e3c <ReadADCChannel+0xb4>)
 8008dc6:	783b      	ldrb	r3, [r7, #0]
 8008dc8:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008dca:	2380      	movs	r3, #128	; 0x80
 8008dcc:	015b      	lsls	r3, r3, #5
 8008dce:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008dd4:	481a      	ldr	r0, [pc, #104]	; (8008e40 <ReadADCChannel+0xb8>)
 8008dd6:	f008 f8e9 	bl	8010fac <HAL_ADC_ConfigChannel>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d122      	bne.n	8008e24 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 8008dde:	4d18      	ldr	r5, [pc, #96]	; (8008e40 <ReadADCChannel+0xb8>)
 8008de0:	0028      	movs	r0, r5
 8008de2:	f007 ffb9 	bl	8010d58 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008de6:	2164      	movs	r1, #100	; 0x64
 8008de8:	0028      	movs	r0, r5
 8008dea:	f008 f807 	bl	8010dfc <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] =HAL_ADC_GetValue(&hadc);
 8008dee:	0028      	movs	r0, r5
 8008df0:	f008 f864 	bl	8010ebc <HAL_ADC_GetValue>
 8008df4:	4b0e      	ldr	r3, [pc, #56]	; (8008e30 <ReadADCChannel+0xa8>)
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	4a0e      	ldr	r2, [pc, #56]	; (8008e34 <ReadADCChannel+0xac>)
 8008dfc:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 8008dfe:	0028      	movs	r0, r5
 8008e00:	f007 ffda 	bl	8010db8 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008e04:	490d      	ldr	r1, [pc, #52]	; (8008e3c <ReadADCChannel+0xb4>)
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <ReadADCChannel+0xb0>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008e0c:	4b0d      	ldr	r3, [pc, #52]	; (8008e44 <ReadADCChannel+0xbc>)
 8008e0e:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008e10:	2303      	movs	r3, #3
 8008e12:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008e14:	0028      	movs	r0, r5
 8008e16:	f008 f8c9 	bl	8010fac <HAL_ADC_ConfigChannel>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d0bc      	beq.n	8008d98 <ReadADCChannel+0x10>
			Error_Handler();
 8008e1e:	f7ff fdc9 	bl	80089b4 <Error_Handler>
 8008e22:	e7b9      	b.n	8008d98 <ReadADCChannel+0x10>
			Error_Handler();
 8008e24:	f7ff fdc6 	bl	80089b4 <Error_Handler>
 8008e28:	e7d9      	b.n	8008dde <ReadADCChannel+0x56>
 8008e2a:	46c0      	nop			; (mov r8, r8)
 8008e2c:	20001710 	.word	0x20001710
 8008e30:	20001721 	.word	0x20001721
 8008e34:	20001718 	.word	0x20001718
 8008e38:	20001720 	.word	0x20001720
 8008e3c:	2000179c 	.word	0x2000179c
 8008e40:	20006cac 	.word	0x20006cac
 8008e44:	00001001 	.word	0x00001001

08008e48 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port){
}
 8008e48:	4770      	bx	lr

08008e4a <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port){
}
 8008e4a:	4770      	bx	lr

08008e4c <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port){
}
 8008e4c:	4770      	bx	lr

08008e4e <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port,uint8_t eventType){
}
 8008e4e:	4770      	bx	lr

08008e50 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port,uint8_t eventType){
}
 8008e50:	4770      	bx	lr
	...

08008e54 <CheckAttachedButtons>:
void CheckAttachedButtons(void){
 8008e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e56:	46de      	mov	lr, fp
 8008e58:	4657      	mov	r7, sl
 8008e5a:	464e      	mov	r6, r9
 8008e5c:	4645      	mov	r5, r8
 8008e5e:	b5e0      	push	{r5, r6, r7, lr}
 8008e60:	b089      	sub	sp, #36	; 0x24
 8008e62:	4dbd      	ldr	r5, [pc, #756]	; (8009158 <CheckAttachedButtons+0x304>)
 8008e64:	2404      	movs	r4, #4
 8008e66:	2601      	movs	r6, #1
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	469b      	mov	fp, r3
 8008e6c:	4699      	mov	r9, r3
 8008e6e:	e111      	b.n	8009094 <CheckAttachedButtons+0x240>
				HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_SET);
 8008e70:	230e      	movs	r3, #14
 8008e72:	aa02      	add	r2, sp, #8
 8008e74:	4694      	mov	ip, r2
 8008e76:	4463      	add	r3, ip
 8008e78:	8819      	ldrh	r1, [r3, #0]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	9807      	ldr	r0, [sp, #28]
 8008e7e:	f009 fac5 	bl	801240c <HAL_GPIO_WritePin>
				Delay_us(10);
 8008e82:	200a      	movs	r0, #10
 8008e84:	f005 fabc 	bl	800e400 <StartMicroDelay>
				connected =HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin);
 8008e88:	ab05      	add	r3, sp, #20
 8008e8a:	8819      	ldrh	r1, [r3, #0]
 8008e8c:	9806      	ldr	r0, [sp, #24]
 8008e8e:	f009 fab7 	bl	8012400 <HAL_GPIO_ReadPin>
 8008e92:	4681      	mov	r9, r0
 8008e94:	e126      	b.n	80090e4 <CheckAttachedButtons+0x290>
			switch(button[i].type){
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d105      	bne.n	8008ea6 <CheckAttachedButtons+0x52>
					if(connected == GPIO_PIN_SET)
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d046      	beq.n	8008f2e <CheckAttachedButtons+0xda>
					else if(connected == GPIO_PIN_RESET)
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d100      	bne.n	8008ea6 <CheckAttachedButtons+0x52>
 8008ea4:	e1c6      	b.n	8009234 <CheckAttachedButtons+0x3e0>
			if(state == CLOSED || state == ON){
 8008ea6:	465b      	mov	r3, fp
 8008ea8:	2b04      	cmp	r3, #4
 8008eaa:	d001      	beq.n	8008eb0 <CheckAttachedButtons+0x5c>
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d107      	bne.n	8008ec0 <CheckAttachedButtons+0x6c>
				if(pressCounter[i] < 0xFFFF)
 8008eb0:	4baa      	ldr	r3, [pc, #680]	; (800915c <CheckAttachedButtons+0x308>)
 8008eb2:	58e3      	ldr	r3, [r4, r3]
 8008eb4:	4aaa      	ldr	r2, [pc, #680]	; (8009160 <CheckAttachedButtons+0x30c>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d842      	bhi.n	8008f40 <CheckAttachedButtons+0xec>
					++pressCounter[i];			// Advance the debounce counter
 8008eba:	3301      	adds	r3, #1
 8008ebc:	4aa7      	ldr	r2, [pc, #668]	; (800915c <CheckAttachedButtons+0x308>)
 8008ebe:	50a3      	str	r3, [r4, r2]
			if(state == OPEN || state == OFF){
 8008ec0:	23fd      	movs	r3, #253	; 0xfd
 8008ec2:	465a      	mov	r2, fp
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d100      	bne.n	8008ecc <CheckAttachedButtons+0x78>
 8008eca:	e1b7      	b.n	800923c <CheckAttachedButtons+0x3e8>
			if(pressCounter[i] < BOS.buttons.debounce){
 8008ecc:	4ba3      	ldr	r3, [pc, #652]	; (800915c <CheckAttachedButtons+0x308>)
 8008ece:	58e3      	ldr	r3, [r4, r3]
 8008ed0:	4aa4      	ldr	r2, [pc, #656]	; (8009164 <CheckAttachedButtons+0x310>)
 8008ed2:	8812      	ldrh	r2, [r2, #0]
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d36f      	bcc.n	8008fb8 <CheckAttachedButtons+0x164>
				if(pressCounter[i] == BOS.buttons.debounce){
 8008ed8:	d045      	beq.n	8008f66 <CheckAttachedButtons+0x112>
				if(releaseCounter[i] > BOS.buttons.debounce)			// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8008eda:	4ba3      	ldr	r3, [pc, #652]	; (8009168 <CheckAttachedButtons+0x314>)
 8008edc:	58e3      	ldr	r3, [r4, r3]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d202      	bcs.n	8008ee8 <CheckAttachedButtons+0x94>
					releaseCounter[i] =0;
 8008ee2:	4ba1      	ldr	r3, [pc, #644]	; (8009168 <CheckAttachedButtons+0x314>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	50e2      	str	r2, [r4, r3]
				if(pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500){
 8008ee8:	4b9c      	ldr	r3, [pc, #624]	; (800915c <CheckAttachedButtons+0x308>)
 8008eea:	58e3      	ldr	r3, [r4, r3]
 8008eec:	4a9d      	ldr	r2, [pc, #628]	; (8009164 <CheckAttachedButtons+0x310>)
 8008eee:	8852      	ldrh	r2, [r2, #2]
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d952      	bls.n	8008f9a <CheckAttachedButtons+0x146>
 8008ef4:	22f4      	movs	r2, #244	; 0xf4
 8008ef6:	32ff      	adds	r2, #255	; 0xff
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d84e      	bhi.n	8008f9a <CheckAttachedButtons+0x146>
					if(clicked == 0)
 8008efc:	4b9b      	ldr	r3, [pc, #620]	; (800916c <CheckAttachedButtons+0x318>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d137      	bne.n	8008f74 <CheckAttachedButtons+0x120>
						clicked =1;		// Record a possible single click
 8008f04:	4b99      	ldr	r3, [pc, #612]	; (800916c <CheckAttachedButtons+0x318>)
 8008f06:	3af3      	subs	r2, #243	; 0xf3
 8008f08:	3aff      	subs	r2, #255	; 0xff
 8008f0a:	701a      	strb	r2, [r3, #0]
 8008f0c:	e054      	b.n	8008fb8 <CheckAttachedButtons+0x164>
					if(connected == GPIO_PIN_SET)
 8008f0e:	464b      	mov	r3, r9
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d00f      	beq.n	8008f34 <CheckAttachedButtons+0xe0>
					else if(connected == GPIO_PIN_RESET)
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1c6      	bne.n	8008ea6 <CheckAttachedButtons+0x52>
						state =OPEN;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	469b      	mov	fp, r3
 8008f1c:	e18e      	b.n	800923c <CheckAttachedButtons+0x3e8>
					if(connected == GPIO_PIN_SET)
 8008f1e:	464b      	mov	r3, r9
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d00a      	beq.n	8008f3a <CheckAttachedButtons+0xe6>
					else if(connected == GPIO_PIN_RESET)
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1be      	bne.n	8008ea6 <CheckAttachedButtons+0x52>
						state =OFF;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	469b      	mov	fp, r3
 8008f2c:	e186      	b.n	800923c <CheckAttachedButtons+0x3e8>
						state =CLOSED;
 8008f2e:	2304      	movs	r3, #4
 8008f30:	469b      	mov	fp, r3
 8008f32:	e7bd      	b.n	8008eb0 <CheckAttachedButtons+0x5c>
						state =CLOSED;
 8008f34:	2304      	movs	r3, #4
 8008f36:	469b      	mov	fp, r3
 8008f38:	e7ba      	b.n	8008eb0 <CheckAttachedButtons+0x5c>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	469b      	mov	fp, r3
 8008f3e:	e7b7      	b.n	8008eb0 <CheckAttachedButtons+0x5c>
					pressCounter[i] =0;			// Reset debounce counter
 8008f40:	4b86      	ldr	r3, [pc, #536]	; (800915c <CheckAttachedButtons+0x308>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	50e2      	str	r2, [r4, r3]
 8008f46:	e7bb      	b.n	8008ec0 <CheckAttachedButtons+0x6c>
					releaseCounter[i] =0;		// Reset debounce counter
 8008f48:	4b87      	ldr	r3, [pc, #540]	; (8009168 <CheckAttachedButtons+0x314>)
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	50e2      	str	r2, [r4, r3]
 8008f4e:	e17e      	b.n	800924e <CheckAttachedButtons+0x3fa>
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008f50:	4b87      	ldr	r3, [pc, #540]	; (8009170 <CheckAttachedButtons+0x31c>)
 8008f52:	5cf3      	ldrb	r3, [r6, r3]
 8008f54:	4a83      	ldr	r2, [pc, #524]	; (8009164 <CheckAttachedButtons+0x310>)
 8008f56:	7952      	ldrb	r2, [r2, #5]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d200      	bcs.n	8008f5e <CheckAttachedButtons+0x10a>
 8008f5c:	e183      	b.n	8009266 <CheckAttachedButtons+0x412>
					++dblCounter[i];
 8008f5e:	3301      	adds	r3, #1
 8008f60:	4a83      	ldr	r2, [pc, #524]	; (8009170 <CheckAttachedButtons+0x31c>)
 8008f62:	54b3      	strb	r3, [r6, r2]
 8008f64:	e7b2      	b.n	8008ecc <CheckAttachedButtons+0x78>
					button[i].state =PRESSED;			// Record a PRESSED event. This event is always reset on next tick.
 8008f66:	2107      	movs	r1, #7
 8008f68:	4640      	mov	r0, r8
 8008f6a:	7241      	strb	r1, [r0, #9]
					++pressCounter[i];
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	497b      	ldr	r1, [pc, #492]	; (800915c <CheckAttachedButtons+0x308>)
 8008f70:	5063      	str	r3, [r4, r1]
 8008f72:	e7b2      	b.n	8008eda <CheckAttachedButtons+0x86>
					else if(clicked == 2){
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d11f      	bne.n	8008fb8 <CheckAttachedButtons+0x164>
						if(dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime){
 8008f78:	4b7d      	ldr	r3, [pc, #500]	; (8009170 <CheckAttachedButtons+0x31c>)
 8008f7a:	5cf3      	ldrb	r3, [r6, r3]
 8008f7c:	4a79      	ldr	r2, [pc, #484]	; (8009164 <CheckAttachedButtons+0x310>)
 8008f7e:	7912      	ldrb	r2, [r2, #4]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d219      	bcs.n	8008fb8 <CheckAttachedButtons+0x164>
 8008f84:	4a77      	ldr	r2, [pc, #476]	; (8009164 <CheckAttachedButtons+0x310>)
 8008f86:	7952      	ldrb	r2, [r2, #5]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d915      	bls.n	8008fb8 <CheckAttachedButtons+0x164>
							clicked =3;	// Record a possible double click
 8008f8c:	4b77      	ldr	r3, [pc, #476]	; (800916c <CheckAttachedButtons+0x318>)
 8008f8e:	2203      	movs	r2, #3
 8008f90:	701a      	strb	r2, [r3, #0]
							dblCounter[i] =0;	// Reset the inter-click counter
 8008f92:	4b77      	ldr	r3, [pc, #476]	; (8009170 <CheckAttachedButtons+0x31c>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	54f2      	strb	r2, [r6, r3]
 8008f98:	e00e      	b.n	8008fb8 <CheckAttachedButtons+0x164>
				else if(pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF){
 8008f9a:	3bf5      	subs	r3, #245	; 0xf5
 8008f9c:	3bff      	subs	r3, #255	; 0xff
 8008f9e:	4a75      	ldr	r2, [pc, #468]	; (8009174 <CheckAttachedButtons+0x320>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d809      	bhi.n	8008fb8 <CheckAttachedButtons+0x164>
					if(clicked)
 8008fa4:	4b71      	ldr	r3, [pc, #452]	; (800916c <CheckAttachedButtons+0x318>)
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <CheckAttachedButtons+0x15e>
						clicked =0;						// Cannot be a click
 8008fac:	4b6f      	ldr	r3, [pc, #444]	; (800916c <CheckAttachedButtons+0x318>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8008fb2:	9803      	ldr	r0, [sp, #12]
 8008fb4:	f7ff f9bc 	bl	8008330 <CheckForTimedButtonPress>
			if(releaseCounter[i] < BOS.buttons.debounce){
 8008fb8:	4b6b      	ldr	r3, [pc, #428]	; (8009168 <CheckAttachedButtons+0x314>)
 8008fba:	58e3      	ldr	r3, [r4, r3]
 8008fbc:	4a69      	ldr	r2, [pc, #420]	; (8009164 <CheckAttachedButtons+0x310>)
 8008fbe:	8812      	ldrh	r2, [r2, #0]
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d34d      	bcc.n	8009060 <CheckAttachedButtons+0x20c>
				if(releaseCounter[i] == BOS.buttons.debounce){
 8008fc4:	d02b      	beq.n	800901e <CheckAttachedButtons+0x1ca>
				if(pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008fc6:	4b65      	ldr	r3, [pc, #404]	; (800915c <CheckAttachedButtons+0x308>)
 8008fc8:	58e3      	ldr	r3, [r4, r3]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d202      	bcs.n	8008fd4 <CheckAttachedButtons+0x180>
					pressCounter[i] =0;
 8008fce:	4b63      	ldr	r3, [pc, #396]	; (800915c <CheckAttachedButtons+0x308>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	50e2      	str	r2, [r4, r3]
				if(releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500){
 8008fd4:	4b64      	ldr	r3, [pc, #400]	; (8009168 <CheckAttachedButtons+0x314>)
 8008fd6:	58e3      	ldr	r3, [r4, r3]
 8008fd8:	4a62      	ldr	r2, [pc, #392]	; (8009164 <CheckAttachedButtons+0x310>)
 8008fda:	8852      	ldrh	r2, [r2, #2]
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d93a      	bls.n	8009056 <CheckAttachedButtons+0x202>
 8008fe0:	22f4      	movs	r2, #244	; 0xf4
 8008fe2:	32ff      	adds	r2, #255	; 0xff
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d836      	bhi.n	8009056 <CheckAttachedButtons+0x202>
					if(clicked == 1){
 8008fe8:	4b60      	ldr	r3, [pc, #384]	; (800916c <CheckAttachedButtons+0x318>)
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d01d      	beq.n	800902c <CheckAttachedButtons+0x1d8>
					else if(clicked == 3){
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d135      	bne.n	8009060 <CheckAttachedButtons+0x20c>
						button[i].state =DBL_CLICKED;			// Record a double button click event
 8008ff4:	3303      	adds	r3, #3
 8008ff6:	4642      	mov	r2, r8
 8008ff8:	7253      	strb	r3, [r2, #9]
						clicked =0;			// Prepare for a single click
 8008ffa:	4b5c      	ldr	r3, [pc, #368]	; (800916c <CheckAttachedButtons+0x318>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	701a      	strb	r2, [r3, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)){
 8009000:	4b5d      	ldr	r3, [pc, #372]	; (8009178 <CheckAttachedButtons+0x324>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d13f      	bne.n	8009088 <CheckAttachedButtons+0x234>
 8009008:	4643      	mov	r3, r8
 800900a:	7c5b      	ldrb	r3, [r3, #17]
 800900c:	079b      	lsls	r3, r3, #30
 800900e:	d53b      	bpl.n	8009088 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8009010:	4b59      	ldr	r3, [pc, #356]	; (8009178 <CheckAttachedButtons+0x324>)
 8009012:	2201      	movs	r2, #1
 8009014:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 8009016:	9803      	ldr	r0, [sp, #12]
 8009018:	f7ff ff18 	bl	8008e4c <buttonDblClickedCallback>
 800901c:	e034      	b.n	8009088 <CheckAttachedButtons+0x234>
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800901e:	2108      	movs	r1, #8
 8009020:	4640      	mov	r0, r8
 8009022:	7241      	strb	r1, [r0, #9]
					++releaseCounter[i];
 8009024:	3301      	adds	r3, #1
 8009026:	4950      	ldr	r1, [pc, #320]	; (8009168 <CheckAttachedButtons+0x314>)
 8009028:	5063      	str	r3, [r4, r1]
 800902a:	e7cc      	b.n	8008fc6 <CheckAttachedButtons+0x172>
						button[i].state =CLICKED;	// Record a single button click event
 800902c:	3304      	adds	r3, #4
 800902e:	4642      	mov	r2, r8
 8009030:	7253      	strb	r3, [r2, #9]
						clicked =2;			// Prepare for a double click
 8009032:	4b4e      	ldr	r3, [pc, #312]	; (800916c <CheckAttachedButtons+0x318>)
 8009034:	2202      	movs	r2, #2
 8009036:	701a      	strb	r2, [r3, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)){
 8009038:	4b4f      	ldr	r3, [pc, #316]	; (8009178 <CheckAttachedButtons+0x324>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d123      	bne.n	8009088 <CheckAttachedButtons+0x234>
 8009040:	4643      	mov	r3, r8
 8009042:	7c5b      	ldrb	r3, [r3, #17]
 8009044:	07db      	lsls	r3, r3, #31
 8009046:	d51f      	bpl.n	8009088 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8009048:	4b4b      	ldr	r3, [pc, #300]	; (8009178 <CheckAttachedButtons+0x324>)
 800904a:	2201      	movs	r2, #1
 800904c:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 800904e:	9803      	ldr	r0, [sp, #12]
 8009050:	f7ff fefb 	bl	8008e4a <buttonClickedCallback>
 8009054:	e018      	b.n	8009088 <CheckAttachedButtons+0x234>
				else if(releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF){
 8009056:	3bf5      	subs	r3, #245	; 0xf5
 8009058:	3bff      	subs	r3, #255	; 0xff
 800905a:	4a46      	ldr	r2, [pc, #280]	; (8009174 <CheckAttachedButtons+0x320>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d909      	bls.n	8009074 <CheckAttachedButtons+0x220>
			switch(button[i].state){
 8009060:	4643      	mov	r3, r8
 8009062:	7a5b      	ldrb	r3, [r3, #9]
 8009064:	3b05      	subs	r3, #5
 8009066:	b2da      	uxtb	r2, r3
 8009068:	2a09      	cmp	r2, #9
 800906a:	d80d      	bhi.n	8009088 <CheckAttachedButtons+0x234>
 800906c:	0093      	lsls	r3, r2, #2
 800906e:	4a43      	ldr	r2, [pc, #268]	; (800917c <CheckAttachedButtons+0x328>)
 8009070:	58d3      	ldr	r3, [r2, r3]
 8009072:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8009074:	9803      	ldr	r0, [sp, #12]
 8009076:	f7ff f999 	bl	80083ac <CheckForTimedButtonRelease>
 800907a:	e7f1      	b.n	8009060 <CheckAttachedButtons+0x20c>
					buttonPressedCallback(i);
 800907c:	9803      	ldr	r0, [sp, #12]
 800907e:	f7ff f955 	bl	800832c <buttonPressedCallback>
					button[i].state =NONE;
 8009082:	2300      	movs	r3, #0
 8009084:	4642      	mov	r2, r8
 8009086:	7253      	strb	r3, [r2, #9]
 8009088:	3601      	adds	r6, #1
 800908a:	3509      	adds	r5, #9
 800908c:	3404      	adds	r4, #4
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800908e:	2c18      	cmp	r4, #24
 8009090:	d100      	bne.n	8009094 <CheckAttachedButtons+0x240>
 8009092:	e0ee      	b.n	8009272 <CheckAttachedButtons+0x41e>
 8009094:	b2f3      	uxtb	r3, r6
 8009096:	9303      	str	r3, [sp, #12]
 8009098:	46a8      	mov	r8, r5
		if(button[i].type)			// Only check defined butons
 800909a:	7aab      	ldrb	r3, [r5, #10]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d0f3      	beq.n	8009088 <CheckAttachedButtons+0x234>
			if(delayButtonStateReset == false)
 80090a0:	4b35      	ldr	r3, [pc, #212]	; (8009178 <CheckAttachedButtons+0x324>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d100      	bne.n	80090aa <CheckAttachedButtons+0x256>
				button[i].state =NONE;
 80090a8:	726b      	strb	r3, [r5, #9]
			GetPortGPIOs(i,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 80090aa:	230e      	movs	r3, #14
 80090ac:	aa02      	add	r2, sp, #8
 80090ae:	4694      	mov	ip, r2
 80090b0:	4463      	add	r3, ip
 80090b2:	469a      	mov	sl, r3
 80090b4:	af05      	add	r7, sp, #20
 80090b6:	9700      	str	r7, [sp, #0]
 80090b8:	ab06      	add	r3, sp, #24
 80090ba:	4652      	mov	r2, sl
 80090bc:	a907      	add	r1, sp, #28
 80090be:	9803      	ldr	r0, [sp, #12]
 80090c0:	f004 fe1e 	bl	800dd00 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 80090c4:	4653      	mov	r3, sl
 80090c6:	8819      	ldrh	r1, [r3, #0]
 80090c8:	2200      	movs	r2, #0
 80090ca:	9807      	ldr	r0, [sp, #28]
 80090cc:	f009 f99e 	bl	801240c <HAL_GPIO_WritePin>
			Delay_us(10);
 80090d0:	200a      	movs	r0, #10
 80090d2:	f005 f995 	bl	800e400 <StartMicroDelay>
			if(HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin) == GPIO_PIN_RESET){
 80090d6:	8839      	ldrh	r1, [r7, #0]
 80090d8:	9806      	ldr	r0, [sp, #24]
 80090da:	f009 f991 	bl	8012400 <HAL_GPIO_ReadPin>
 80090de:	2800      	cmp	r0, #0
 80090e0:	d100      	bne.n	80090e4 <CheckAttachedButtons+0x290>
 80090e2:	e6c5      	b.n	8008e70 <CheckAttachedButtons+0x1c>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 80090e4:	230e      	movs	r3, #14
 80090e6:	aa02      	add	r2, sp, #8
 80090e8:	4694      	mov	ip, r2
 80090ea:	4463      	add	r3, ip
 80090ec:	8819      	ldrh	r1, [r3, #0]
 80090ee:	2200      	movs	r2, #0
 80090f0:	9807      	ldr	r0, [sp, #28]
 80090f2:	f009 f98b 	bl	801240c <HAL_GPIO_WritePin>
			switch(button[i].type){
 80090f6:	4643      	mov	r3, r8
 80090f8:	7a9b      	ldrb	r3, [r3, #10]
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d100      	bne.n	8009100 <CheckAttachedButtons+0x2ac>
 80090fe:	e706      	b.n	8008f0e <CheckAttachedButtons+0xba>
 8009100:	b2da      	uxtb	r2, r3
 8009102:	2a02      	cmp	r2, #2
 8009104:	d800      	bhi.n	8009108 <CheckAttachedButtons+0x2b4>
 8009106:	e6c6      	b.n	8008e96 <CheckAttachedButtons+0x42>
 8009108:	2b03      	cmp	r3, #3
 800910a:	d100      	bne.n	800910e <CheckAttachedButtons+0x2ba>
 800910c:	e707      	b.n	8008f1e <CheckAttachedButtons+0xca>
 800910e:	2b04      	cmp	r3, #4
 8009110:	d000      	beq.n	8009114 <CheckAttachedButtons+0x2c0>
 8009112:	e6c8      	b.n	8008ea6 <CheckAttachedButtons+0x52>
					if(connected == GPIO_PIN_SET)
 8009114:	464b      	mov	r3, r9
 8009116:	2b01      	cmp	r3, #1
 8009118:	d100      	bne.n	800911c <CheckAttachedButtons+0x2c8>
 800911a:	e08e      	b.n	800923a <CheckAttachedButtons+0x3e6>
					else if(connected == GPIO_PIN_RESET)
 800911c:	2b00      	cmp	r3, #0
 800911e:	d000      	beq.n	8009122 <CheckAttachedButtons+0x2ce>
 8009120:	e6c1      	b.n	8008ea6 <CheckAttachedButtons+0x52>
 8009122:	2302      	movs	r3, #2
 8009124:	469b      	mov	fp, r3
 8009126:	e6c3      	b.n	8008eb0 <CheckAttachedButtons+0x5c>
					buttonReleasedCallback(i);
 8009128:	9803      	ldr	r0, [sp, #12]
 800912a:	f7ff fe8d 	bl	8008e48 <buttonReleasedCallback>
					button[i].state =NONE;
 800912e:	2300      	movs	r3, #0
 8009130:	4642      	mov	r2, r8
 8009132:	7253      	strb	r3, [r2, #9]
					break;
 8009134:	e7a8      	b.n	8009088 <CheckAttachedButtons+0x234>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)){
 8009136:	4b10      	ldr	r3, [pc, #64]	; (8009178 <CheckAttachedButtons+0x324>)
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1a4      	bne.n	8009088 <CheckAttachedButtons+0x234>
 800913e:	4643      	mov	r3, r8
 8009140:	7c5b      	ldrb	r3, [r3, #17]
 8009142:	075b      	lsls	r3, r3, #29
 8009144:	d5a0      	bpl.n	8009088 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8009146:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <CheckAttachedButtons+0x324>)
 8009148:	2201      	movs	r2, #1
 800914a:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 800914c:	2101      	movs	r1, #1
 800914e:	9803      	ldr	r0, [sp, #12]
 8009150:	f7ff fe7d 	bl	8008e4e <buttonPressedForXCallback>
 8009154:	e798      	b.n	8009088 <CheckAttachedButtons+0x234>
 8009156:	46c0      	nop			; (mov r8, r8)
 8009158:	20001724 	.word	0x20001724
 800915c:	2000176c 	.word	0x2000176c
 8009160:	0000fffe 	.word	0x0000fffe
 8009164:	20006bf4 	.word	0x20006bf4
 8009168:	20001784 	.word	0x20001784
 800916c:	2000175a 	.word	0x2000175a
 8009170:	20001760 	.word	0x20001760
 8009174:	0000fe0a 	.word	0x0000fe0a
 8009178:	20001766 	.word	0x20001766
 800917c:	0801bd50 	.word	0x0801bd50
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)){
 8009180:	4b3f      	ldr	r3, [pc, #252]	; (8009280 <CheckAttachedButtons+0x42c>)
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d000      	beq.n	800918a <CheckAttachedButtons+0x336>
 8009188:	e77e      	b.n	8009088 <CheckAttachedButtons+0x234>
 800918a:	4643      	mov	r3, r8
 800918c:	7c5b      	ldrb	r3, [r3, #17]
 800918e:	071b      	lsls	r3, r3, #28
 8009190:	d400      	bmi.n	8009194 <CheckAttachedButtons+0x340>
 8009192:	e779      	b.n	8009088 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8009194:	4b3a      	ldr	r3, [pc, #232]	; (8009280 <CheckAttachedButtons+0x42c>)
 8009196:	2201      	movs	r2, #1
 8009198:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 800919a:	2102      	movs	r1, #2
 800919c:	9803      	ldr	r0, [sp, #12]
 800919e:	f7ff fe56 	bl	8008e4e <buttonPressedForXCallback>
 80091a2:	e771      	b.n	8009088 <CheckAttachedButtons+0x234>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)){
 80091a4:	4b36      	ldr	r3, [pc, #216]	; (8009280 <CheckAttachedButtons+0x42c>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d000      	beq.n	80091ae <CheckAttachedButtons+0x35a>
 80091ac:	e76c      	b.n	8009088 <CheckAttachedButtons+0x234>
 80091ae:	4643      	mov	r3, r8
 80091b0:	7c5b      	ldrb	r3, [r3, #17]
 80091b2:	06db      	lsls	r3, r3, #27
 80091b4:	d400      	bmi.n	80091b8 <CheckAttachedButtons+0x364>
 80091b6:	e767      	b.n	8009088 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 80091b8:	4b31      	ldr	r3, [pc, #196]	; (8009280 <CheckAttachedButtons+0x42c>)
 80091ba:	2201      	movs	r2, #1
 80091bc:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 80091be:	2103      	movs	r1, #3
 80091c0:	9803      	ldr	r0, [sp, #12]
 80091c2:	f7ff fe44 	bl	8008e4e <buttonPressedForXCallback>
 80091c6:	e75f      	b.n	8009088 <CheckAttachedButtons+0x234>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)){
 80091c8:	4b2d      	ldr	r3, [pc, #180]	; (8009280 <CheckAttachedButtons+0x42c>)
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d000      	beq.n	80091d2 <CheckAttachedButtons+0x37e>
 80091d0:	e75a      	b.n	8009088 <CheckAttachedButtons+0x234>
 80091d2:	4643      	mov	r3, r8
 80091d4:	7c5b      	ldrb	r3, [r3, #17]
 80091d6:	069b      	lsls	r3, r3, #26
 80091d8:	d400      	bmi.n	80091dc <CheckAttachedButtons+0x388>
 80091da:	e755      	b.n	8009088 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 80091dc:	4b28      	ldr	r3, [pc, #160]	; (8009280 <CheckAttachedButtons+0x42c>)
 80091de:	2201      	movs	r2, #1
 80091e0:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 80091e2:	2101      	movs	r1, #1
 80091e4:	9803      	ldr	r0, [sp, #12]
 80091e6:	f7ff fe33 	bl	8008e50 <buttonReleasedForYCallback>
 80091ea:	e74d      	b.n	8009088 <CheckAttachedButtons+0x234>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)){
 80091ec:	4b24      	ldr	r3, [pc, #144]	; (8009280 <CheckAttachedButtons+0x42c>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d000      	beq.n	80091f6 <CheckAttachedButtons+0x3a2>
 80091f4:	e748      	b.n	8009088 <CheckAttachedButtons+0x234>
 80091f6:	4643      	mov	r3, r8
 80091f8:	7c5b      	ldrb	r3, [r3, #17]
 80091fa:	065b      	lsls	r3, r3, #25
 80091fc:	d400      	bmi.n	8009200 <CheckAttachedButtons+0x3ac>
 80091fe:	e743      	b.n	8009088 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8009200:	4b1f      	ldr	r3, [pc, #124]	; (8009280 <CheckAttachedButtons+0x42c>)
 8009202:	2201      	movs	r2, #1
 8009204:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 8009206:	2102      	movs	r1, #2
 8009208:	9803      	ldr	r0, [sp, #12]
 800920a:	f7ff fe21 	bl	8008e50 <buttonReleasedForYCallback>
 800920e:	e73b      	b.n	8009088 <CheckAttachedButtons+0x234>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)){
 8009210:	4b1b      	ldr	r3, [pc, #108]	; (8009280 <CheckAttachedButtons+0x42c>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d000      	beq.n	800921a <CheckAttachedButtons+0x3c6>
 8009218:	e736      	b.n	8009088 <CheckAttachedButtons+0x234>
 800921a:	4643      	mov	r3, r8
 800921c:	7c5b      	ldrb	r3, [r3, #17]
 800921e:	2b7f      	cmp	r3, #127	; 0x7f
 8009220:	d800      	bhi.n	8009224 <CheckAttachedButtons+0x3d0>
 8009222:	e731      	b.n	8009088 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8009224:	4b16      	ldr	r3, [pc, #88]	; (8009280 <CheckAttachedButtons+0x42c>)
 8009226:	2201      	movs	r2, #1
 8009228:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 800922a:	2103      	movs	r1, #3
 800922c:	9803      	ldr	r0, [sp, #12]
 800922e:	f7ff fe0f 	bl	8008e50 <buttonReleasedForYCallback>
 8009232:	e729      	b.n	8009088 <CheckAttachedButtons+0x234>
						state =OPEN;
 8009234:	2303      	movs	r3, #3
 8009236:	469b      	mov	fp, r3
 8009238:	e000      	b.n	800923c <CheckAttachedButtons+0x3e8>
						state =OFF;
 800923a:	46cb      	mov	fp, r9
				if(releaseCounter[i] < 0xFFFF)
 800923c:	4b11      	ldr	r3, [pc, #68]	; (8009284 <CheckAttachedButtons+0x430>)
 800923e:	58e3      	ldr	r3, [r4, r3]
 8009240:	4a11      	ldr	r2, [pc, #68]	; (8009288 <CheckAttachedButtons+0x434>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d900      	bls.n	8009248 <CheckAttachedButtons+0x3f4>
 8009246:	e67f      	b.n	8008f48 <CheckAttachedButtons+0xf4>
					++releaseCounter[i];		// Advance the debounce counter
 8009248:	3301      	adds	r3, #1
 800924a:	4a0e      	ldr	r2, [pc, #56]	; (8009284 <CheckAttachedButtons+0x430>)
 800924c:	50a3      	str	r3, [r4, r2]
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 800924e:	4b0f      	ldr	r3, [pc, #60]	; (800928c <CheckAttachedButtons+0x438>)
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	2b02      	cmp	r3, #2
 8009254:	d100      	bne.n	8009258 <CheckAttachedButtons+0x404>
 8009256:	e67b      	b.n	8008f50 <CheckAttachedButtons+0xfc>
				else if(dblCounter[i] > BOS.buttons.maxInterClickTime){
 8009258:	4b0d      	ldr	r3, [pc, #52]	; (8009290 <CheckAttachedButtons+0x43c>)
 800925a:	5cf2      	ldrb	r2, [r6, r3]
 800925c:	4b0d      	ldr	r3, [pc, #52]	; (8009294 <CheckAttachedButtons+0x440>)
 800925e:	795b      	ldrb	r3, [r3, #5]
 8009260:	429a      	cmp	r2, r3
 8009262:	d800      	bhi.n	8009266 <CheckAttachedButtons+0x412>
 8009264:	e632      	b.n	8008ecc <CheckAttachedButtons+0x78>
					clicked =0;
 8009266:	2300      	movs	r3, #0
 8009268:	4a08      	ldr	r2, [pc, #32]	; (800928c <CheckAttachedButtons+0x438>)
 800926a:	7013      	strb	r3, [r2, #0]
					dblCounter[i] =0;			// Reset the inter-click counter
 800926c:	4a08      	ldr	r2, [pc, #32]	; (8009290 <CheckAttachedButtons+0x43c>)
 800926e:	54b3      	strb	r3, [r6, r2]
 8009270:	e62c      	b.n	8008ecc <CheckAttachedButtons+0x78>
}
 8009272:	b009      	add	sp, #36	; 0x24
 8009274:	bc3c      	pop	{r2, r3, r4, r5}
 8009276:	4690      	mov	r8, r2
 8009278:	4699      	mov	r9, r3
 800927a:	46a2      	mov	sl, r4
 800927c:	46ab      	mov	fp, r5
 800927e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009280:	20001766 	.word	0x20001766
 8009284:	20001784 	.word	0x20001784
 8009288:	0000fffe 	.word	0x0000fffe
 800928c:	2000175a 	.word	0x2000175a
 8009290:	20001760 	.word	0x20001760
 8009294:	20006bf4 	.word	0x20006bf4

08009298 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8009298:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 800929a:	f007 f9fa 	bl	8010692 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 800929e:	b2c4      	uxtb	r4, r0
 80092a0:	0020      	movs	r0, r4
 80092a2:	f7fe fa83 	bl	80077ac <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 80092a6:	0020      	movs	r0, r4
 80092a8:	f7fe faae 	bl	8007808 <SwitchStreamDMAToMsg>
}
 80092ac:	bd10      	pop	{r4, pc}
	...

080092b0 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 80092b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092b2:	b085      	sub	sp, #20
 80092b4:	000d      	movs	r5, r1
 80092b6:	0014      	movs	r4, r2
 80092b8:	220f      	movs	r2, #15
 80092ba:	446a      	add	r2, sp
 80092bc:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 80092be:	aa0a      	add	r2, sp, #40	; 0x28
 80092c0:	7812      	ldrb	r2, [r2, #0]
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d058      	beq.n	8009378 <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d100      	bne.n	80092cc <SetupDMAStreams+0x1c>
 80092ca:	e0be      	b.n	800944a <SetupDMAStreams+0x19a>
 80092cc:	2a00      	cmp	r2, #0
 80092ce:	d100      	bne.n	80092d2 <SetupDMAStreams+0x22>
 80092d0:	e0bf      	b.n	8009452 <SetupDMAStreams+0x1a2>
	if(direction == FORWARD){
 80092d2:	2800      	cmp	r0, #0
 80092d4:	d055      	beq.n	8009382 <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD){
 80092d6:	2801      	cmp	r0, #1
 80092d8:	d100      	bne.n	80092dc <SetupDMAStreams+0x2c>
 80092da:	e08b      	b.n	80093f4 <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 80092dc:	2267      	movs	r2, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 80092de:	2802      	cmp	r0, #2
 80092e0:	d000      	beq.n	80092e4 <SetupDMAStreams+0x34>
 80092e2:	e0b3      	b.n	800944c <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80092e4:	0018      	movs	r0, r3
 80092e6:	f005 fa33 	bl	800e750 <GetUart>
 80092ea:	0006      	movs	r6, r0
 80092ec:	ab0a      	add	r3, sp, #40	; 0x28
 80092ee:	7818      	ldrb	r0, [r3, #0]
 80092f0:	f005 fa2e 	bl	800e750 <GetUart>
 80092f4:	0001      	movs	r1, r0
 80092f6:	2201      	movs	r2, #1
 80092f8:	0030      	movs	r0, r6
 80092fa:	f7fe fab7 	bl	800786c <StartDMAstream>
 80092fe:	0002      	movs	r2, r0
 8009300:	2817      	cmp	r0, #23
 8009302:	d100      	bne.n	8009306 <SetupDMAStreams+0x56>
 8009304:	e0a2      	b.n	800944c <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009306:	0160      	lsls	r0, r4, #5
 8009308:	1b00      	subs	r0, r0, r4
 800930a:	0080      	lsls	r0, r0, #2
 800930c:	1900      	adds	r0, r0, r4
 800930e:	00c0      	lsls	r0, r0, #3
 8009310:	21fa      	movs	r1, #250	; 0xfa
 8009312:	0089      	lsls	r1, r1, #2
 8009314:	f7f6 ff1c 	bl	8000150 <__udivsi3>
 8009318:	0004      	movs	r4, r0
 800931a:	260f      	movs	r6, #15
 800931c:	446e      	add	r6, sp
 800931e:	4b4e      	ldr	r3, [pc, #312]	; (8009458 <SetupDMAStreams+0x1a8>)
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	0033      	movs	r3, r6
 8009324:	2200      	movs	r2, #0
 8009326:	0001      	movs	r1, r0
 8009328:	484c      	ldr	r0, [pc, #304]	; (800945c <SetupDMAStreams+0x1ac>)
 800932a:	f007 f84b 	bl	80103c4 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 800932e:	7833      	ldrb	r3, [r6, #0]
 8009330:	3b01      	subs	r3, #1
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4a4a      	ldr	r2, [pc, #296]	; (8009460 <SetupDMAStreams+0x1b0>)
 8009336:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009338:	ab0a      	add	r3, sp, #40	; 0x28
 800933a:	7818      	ldrb	r0, [r3, #0]
 800933c:	f005 fa08 	bl	800e750 <GetUart>
 8009340:	0007      	movs	r7, r0
 8009342:	7830      	ldrb	r0, [r6, #0]
 8009344:	f005 fa04 	bl	800e750 <GetUart>
 8009348:	0001      	movs	r1, r0
 800934a:	2201      	movs	r2, #1
 800934c:	0038      	movs	r0, r7
 800934e:	f7fe fa8d 	bl	800786c <StartDMAstream>
 8009352:	0002      	movs	r2, r0
 8009354:	2817      	cmp	r0, #23
 8009356:	d079      	beq.n	800944c <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009358:	4b3f      	ldr	r3, [pc, #252]	; (8009458 <SetupDMAStreams+0x1a8>)
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	ab0a      	add	r3, sp, #40	; 0x28
 800935e:	2200      	movs	r2, #0
 8009360:	0021      	movs	r1, r4
 8009362:	483e      	ldr	r0, [pc, #248]	; (800945c <SetupDMAStreams+0x1ac>)
 8009364:	f007 f82e 	bl	80103c4 <xTimerCreate>
 8009368:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 800936a:	ab0a      	add	r3, sp, #40	; 0x28
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	3b01      	subs	r3, #1
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4a3b      	ldr	r2, [pc, #236]	; (8009460 <SetupDMAStreams+0x1b0>)
 8009374:	509d      	str	r5, [r3, r2]
 8009376:	e02d      	b.n	80093d4 <SetupDMAStreams+0x124>
		portStatus[src] =STREAM;
 8009378:	4a3a      	ldr	r2, [pc, #232]	; (8009464 <SetupDMAStreams+0x1b4>)
 800937a:	2102      	movs	r1, #2
 800937c:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 800937e:	2267      	movs	r2, #103	; 0x67
 8009380:	e064      	b.n	800944c <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009382:	0018      	movs	r0, r3
 8009384:	f005 f9e4 	bl	800e750 <GetUart>
 8009388:	0006      	movs	r6, r0
 800938a:	ab0a      	add	r3, sp, #40	; 0x28
 800938c:	7818      	ldrb	r0, [r3, #0]
 800938e:	f005 f9df 	bl	800e750 <GetUart>
 8009392:	0001      	movs	r1, r0
 8009394:	2201      	movs	r2, #1
 8009396:	0030      	movs	r0, r6
 8009398:	f7fe fa68 	bl	800786c <StartDMAstream>
 800939c:	0002      	movs	r2, r0
 800939e:	2817      	cmp	r0, #23
 80093a0:	d054      	beq.n	800944c <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80093a2:	260f      	movs	r6, #15
 80093a4:	446e      	add	r6, sp
 80093a6:	0160      	lsls	r0, r4, #5
 80093a8:	1b00      	subs	r0, r0, r4
 80093aa:	0080      	lsls	r0, r0, #2
 80093ac:	1900      	adds	r0, r0, r4
 80093ae:	00c0      	lsls	r0, r0, #3
 80093b0:	21fa      	movs	r1, #250	; 0xfa
 80093b2:	0089      	lsls	r1, r1, #2
 80093b4:	f7f6 fecc 	bl	8000150 <__udivsi3>
 80093b8:	0001      	movs	r1, r0
 80093ba:	4b27      	ldr	r3, [pc, #156]	; (8009458 <SetupDMAStreams+0x1a8>)
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	0033      	movs	r3, r6
 80093c0:	2200      	movs	r2, #0
 80093c2:	4826      	ldr	r0, [pc, #152]	; (800945c <SetupDMAStreams+0x1ac>)
 80093c4:	f006 fffe 	bl	80103c4 <xTimerCreate>
 80093c8:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 80093ca:	7833      	ldrb	r3, [r6, #0]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4a23      	ldr	r2, [pc, #140]	; (8009460 <SetupDMAStreams+0x1b0>)
 80093d2:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 80093d4:	2200      	movs	r2, #0
	if(xTimerStream != NULL)
 80093d6:	2c00      	cmp	r4, #0
 80093d8:	d038      	beq.n	800944c <SetupDMAStreams+0x19c>
		xTimerStart(xTimerStream,portMAX_DELAY);
 80093da:	f006 fa8b 	bl	800f8f4 <xTaskGetTickCount>
 80093de:	0002      	movs	r2, r0
 80093e0:	2301      	movs	r3, #1
 80093e2:	425b      	negs	r3, r3
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	2300      	movs	r3, #0
 80093e8:	2101      	movs	r1, #1
 80093ea:	0020      	movs	r0, r4
 80093ec:	f007 f80a 	bl	8010404 <xTimerGenericCommand>
	return BOS_OK;
 80093f0:	2200      	movs	r2, #0
 80093f2:	e02b      	b.n	800944c <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80093f4:	0010      	movs	r0, r2
 80093f6:	f005 f9ab 	bl	800e750 <GetUart>
 80093fa:	0006      	movs	r6, r0
 80093fc:	230f      	movs	r3, #15
 80093fe:	446b      	add	r3, sp
 8009400:	7818      	ldrb	r0, [r3, #0]
 8009402:	f005 f9a5 	bl	800e750 <GetUart>
 8009406:	0001      	movs	r1, r0
 8009408:	2201      	movs	r2, #1
 800940a:	0030      	movs	r0, r6
 800940c:	f7fe fa2e 	bl	800786c <StartDMAstream>
 8009410:	0002      	movs	r2, r0
 8009412:	2817      	cmp	r0, #23
 8009414:	d01a      	beq.n	800944c <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009416:	0160      	lsls	r0, r4, #5
 8009418:	1b00      	subs	r0, r0, r4
 800941a:	0080      	lsls	r0, r0, #2
 800941c:	1900      	adds	r0, r0, r4
 800941e:	00c0      	lsls	r0, r0, #3
 8009420:	21fa      	movs	r1, #250	; 0xfa
 8009422:	0089      	lsls	r1, r1, #2
 8009424:	f7f6 fe94 	bl	8000150 <__udivsi3>
 8009428:	0001      	movs	r1, r0
 800942a:	4b0b      	ldr	r3, [pc, #44]	; (8009458 <SetupDMAStreams+0x1a8>)
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	ab0a      	add	r3, sp, #40	; 0x28
 8009430:	2200      	movs	r2, #0
 8009432:	480a      	ldr	r0, [pc, #40]	; (800945c <SetupDMAStreams+0x1ac>)
 8009434:	f006 ffc6 	bl	80103c4 <xTimerCreate>
 8009438:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 800943a:	230f      	movs	r3, #15
 800943c:	446b      	add	r3, sp
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	3b01      	subs	r3, #1
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4a06      	ldr	r2, [pc, #24]	; (8009460 <SetupDMAStreams+0x1b0>)
 8009446:	509d      	str	r5, [r3, r2]
 8009448:	e7c4      	b.n	80093d4 <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 800944a:	2267      	movs	r2, #103	; 0x67
}
 800944c:	0010      	movs	r0, r2
 800944e:	b005      	add	sp, #20
 8009450:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 8009452:	2267      	movs	r2, #103	; 0x67
 8009454:	e7fa      	b.n	800944c <SetupDMAStreams+0x19c>
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	08009299 	.word	0x08009299
 800945c:	0801bd90 	.word	0x0801bd90
 8009460:	200016d0 	.word	0x200016d0
 8009464:	200010cc 	.word	0x200010cc

08009468 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8009468:	b510      	push	{r4, lr}
	switch(port){
 800946a:	2805      	cmp	r0, #5
 800946c:	d80a      	bhi.n	8009484 <NotifyMessagingTask+0x1c>
 800946e:	0080      	lsls	r0, r0, #2
 8009470:	4b15      	ldr	r3, [pc, #84]	; (80094c8 <NotifyMessagingTask+0x60>)
 8009472:	581b      	ldr	r3, [r3, r0]
 8009474:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 8009476:	4b15      	ldr	r3, [pc, #84]	; (80094cc <NotifyMessagingTask+0x64>)
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	2300      	movs	r3, #0
 800947c:	2202      	movs	r2, #2
 800947e:	2100      	movs	r1, #0
 8009480:	f006 fed0 	bl	8010224 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8009484:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 8009486:	4b12      	ldr	r3, [pc, #72]	; (80094d0 <NotifyMessagingTask+0x68>)
 8009488:	6818      	ldr	r0, [r3, #0]
 800948a:	2300      	movs	r3, #0
 800948c:	2202      	movs	r2, #2
 800948e:	2100      	movs	r1, #0
 8009490:	f006 fec8 	bl	8010224 <xTaskGenericNotify>
			break;
 8009494:	e7f6      	b.n	8009484 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 8009496:	4b0f      	ldr	r3, [pc, #60]	; (80094d4 <NotifyMessagingTask+0x6c>)
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	2300      	movs	r3, #0
 800949c:	2202      	movs	r2, #2
 800949e:	2100      	movs	r1, #0
 80094a0:	f006 fec0 	bl	8010224 <xTaskGenericNotify>
			break;
 80094a4:	e7ee      	b.n	8009484 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 80094a6:	4b0c      	ldr	r3, [pc, #48]	; (80094d8 <NotifyMessagingTask+0x70>)
 80094a8:	6818      	ldr	r0, [r3, #0]
 80094aa:	2300      	movs	r3, #0
 80094ac:	2202      	movs	r2, #2
 80094ae:	2100      	movs	r1, #0
 80094b0:	f006 feb8 	bl	8010224 <xTaskGenericNotify>
			break;
 80094b4:	e7e6      	b.n	8009484 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 80094b6:	4b09      	ldr	r3, [pc, #36]	; (80094dc <NotifyMessagingTask+0x74>)
 80094b8:	6818      	ldr	r0, [r3, #0]
 80094ba:	2300      	movs	r3, #0
 80094bc:	2202      	movs	r2, #2
 80094be:	2100      	movs	r1, #0
 80094c0:	f006 feb0 	bl	8010224 <xTaskGenericNotify>
}
 80094c4:	e7de      	b.n	8009484 <NotifyMessagingTask+0x1c>
 80094c6:	46c0      	nop			; (mov r8, r8)
 80094c8:	0801bd78 	.word	0x0801bd78
 80094cc:	200016ec 	.word	0x200016ec
 80094d0:	200016f0 	.word	0x200016f0
 80094d4:	200016f4 	.word	0x200016f4
 80094d8:	200016f8 	.word	0x200016f8
 80094dc:	200016fc 	.word	0x200016fc

080094e0 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80094e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094e2:	46de      	mov	lr, fp
 80094e4:	4657      	mov	r7, sl
 80094e6:	464e      	mov	r6, r9
 80094e8:	4645      	mov	r5, r8
 80094ea:	b5e0      	push	{r5, r6, r7, lr}
 80094ec:	b087      	sub	sp, #28
 80094ee:	0005      	movs	r5, r0
 80094f0:	9103      	str	r1, [sp, #12]
 80094f2:	0014      	movs	r4, r2
 80094f4:	4699      	mov	r9, r3
 80094f6:	ab10      	add	r3, sp, #64	; 0x40
 80094f8:	881e      	ldrh	r6, [r3, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 80094fa:	0003      	movs	r3, r0
 80094fc:	4313      	orrs	r3, r2
 80094fe:	d100      	bne.n	8009502 <SendMessageFromPort+0x22>
 8009500:	e1e8      	b.n	80098d4 <SendMessageFromPort+0x3f4>
 8009502:	2800      	cmp	r0, #0
 8009504:	d14d      	bne.n	80095a2 <SendMessageFromPort+0xc2>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8009506:	1c93      	adds	r3, r2, #2
 8009508:	b2db      	uxtb	r3, r3
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 800950a:	2067      	movs	r0, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 800950c:	2b01      	cmp	r3, #1
 800950e:	d900      	bls.n	8009512 <SendMessageFromPort+0x32>
 8009510:	e162      	b.n	80097d8 <SendMessageFromPort+0x2f8>
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 8009512:	2000      	movs	r0, #0
 8009514:	f006 f956 	bl	800f7c4 <uxTaskPriorityGet>
 8009518:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 800951a:	2105      	movs	r1, #5
 800951c:	2000      	movs	r0, #0
 800951e:	f006 f961 	bl	800f7e4 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 8009522:	4bc4      	ldr	r3, [pc, #784]	; (8009834 <SendMessageFromPort+0x354>)
 8009524:	2248      	movs	r2, #72	; 0x48
 8009526:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8009528:	3212      	adds	r2, #18
 800952a:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800952c:	9b03      	ldr	r3, [sp, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d000      	beq.n	8009534 <SendMessageFromPort+0x54>
 8009532:	e1e8      	b.n	8009906 <SendMessageFromPort+0x426>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 8009534:	1e73      	subs	r3, r6, #1
 8009536:	4ac0      	ldr	r2, [pc, #768]	; (8009838 <SendMessageFromPort+0x358>)
 8009538:	5cd7      	ldrb	r7, [r2, r3]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 800953a:	4ec0      	ldr	r6, [pc, #768]	; (800983c <SendMessageFromPort+0x35c>)
 800953c:	00d9      	lsls	r1, r3, #3
 800953e:	1ac9      	subs	r1, r1, r3
 8009540:	00c9      	lsls	r1, r1, #3
 8009542:	4bbf      	ldr	r3, [pc, #764]	; (8009840 <SendMessageFromPort+0x360>)
 8009544:	18c9      	adds	r1, r1, r3
 8009546:	003a      	movs	r2, r7
 8009548:	0030      	movs	r0, r6
 800954a:	f00b fab0 	bl	8014aae <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 800954e:	3e03      	subs	r6, #3
 8009550:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 8009552:	1cfb      	adds	r3, r7, #3
 8009554:	4698      	mov	r8, r3
 8009556:	001a      	movs	r2, r3
 8009558:	0031      	movs	r1, r6
 800955a:	48ba      	ldr	r0, [pc, #744]	; (8009844 <SendMessageFromPort+0x364>)
 800955c:	f00b faa7 	bl	8014aae <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009560:	b2bf      	uxth	r7, r7
 8009562:	1cf9      	adds	r1, r7, #3
 8009564:	48b7      	ldr	r0, [pc, #732]	; (8009844 <SendMessageFromPort+0x364>)
 8009566:	f004 fb51 	bl	800dc0c <CalculateCRC8>
 800956a:	4643      	mov	r3, r8
 800956c:	54f0      	strb	r0, [r6, r3]
	/* end of crc calculation function addition */

	memset(crcBuffer,0,sizeof(crcBuffer));
 800956e:	2238      	movs	r2, #56	; 0x38
 8009570:	2100      	movs	r1, #0
 8009572:	48b4      	ldr	r0, [pc, #720]	; (8009844 <SendMessageFromPort+0x364>)
 8009574:	f00b faa4 	bl	8014ac0 <memset>
	
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009578:	3402      	adds	r4, #2
 800957a:	b2e4      	uxtb	r4, r4
 800957c:	2c01      	cmp	r4, #1
 800957e:	d800      	bhi.n	8009582 <SendMessageFromPort+0xa2>
 8009580:	e14e      	b.n	8009820 <SendMessageFromPort+0x340>
		/* Transmit the message - single-cast */

		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8009582:	464b      	mov	r3, r9
 8009584:	3b2c      	subs	r3, #44	; 0x2c
 8009586:	b29b      	uxth	r3, r3
 8009588:	2b01      	cmp	r3, #1
 800958a:	d800      	bhi.n	800958e <SendMessageFromPort+0xae>
 800958c:	e110      	b.n	80097b0 <SendMessageFromPort+0x2d0>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
		}
		else{

			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 800958e:	4bae      	ldr	r3, [pc, #696]	; (8009848 <SendMessageFromPort+0x368>)
 8009590:	88db      	ldrh	r3, [r3, #6]
 8009592:	2600      	movs	r6, #0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d100      	bne.n	800959a <SendMessageFromPort+0xba>
 8009598:	e111      	b.n	80097be <SendMessageFromPort+0x2de>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 800959a:	3704      	adds	r7, #4
 800959c:	b2bf      	uxth	r7, r7
				osDelay(200);
				if(ACK_FLAG == true)
 800959e:	4cab      	ldr	r4, [pc, #684]	; (800984c <SendMessageFromPort+0x36c>)
 80095a0:	e12d      	b.n	80097fe <SendMessageFromPort+0x31e>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 80095a2:	9b03      	ldr	r3, [sp, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d002      	beq.n	80095ae <SendMessageFromPort+0xce>
 80095a8:	2a00      	cmp	r2, #0
 80095aa:	d100      	bne.n	80095ae <SendMessageFromPort+0xce>
 80095ac:	e194      	b.n	80098d8 <SendMessageFromPort+0x3f8>
	TaskPriority =uxTaskPriorityGet( NULL);
 80095ae:	2000      	movs	r0, #0
 80095b0:	f006 f908 	bl	800f7c4 <uxTaskPriorityGet>
 80095b4:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80095b6:	2105      	movs	r1, #5
 80095b8:	2000      	movs	r0, #0
 80095ba:	f006 f913 	bl	800f7e4 <vTaskPrioritySet>
	message[0] ='H';
 80095be:	4b9d      	ldr	r3, [pc, #628]	; (8009834 <SendMessageFromPort+0x354>)
 80095c0:	2248      	movs	r2, #72	; 0x48
 80095c2:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 80095c4:	3212      	adds	r2, #18
 80095c6:	705a      	strb	r2, [r3, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80095c8:	464b      	mov	r3, r9
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0b2      	beq.n	8009534 <SendMessageFromPort+0x54>
		if(src == 0)
 80095ce:	9b03      	ldr	r3, [sp, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d102      	bne.n	80095da <SendMessageFromPort+0xfa>
			src =myID;
 80095d4:	4b9e      	ldr	r3, [pc, #632]	; (8009850 <SendMessageFromPort+0x370>)
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	9303      	str	r3, [sp, #12]
		message[2] =length;
 80095da:	4a96      	ldr	r2, [pc, #600]	; (8009834 <SendMessageFromPort+0x354>)
 80095dc:	2300      	movs	r3, #0
 80095de:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 80095e0:	70d4      	strb	r4, [r2, #3]
		message[4] =src;
 80095e2:	9b03      	ldr	r3, [sp, #12]
 80095e4:	7113      	strb	r3, [r2, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 80095e6:	4998      	ldr	r1, [pc, #608]	; (8009848 <SendMessageFromPort+0x368>)
 80095e8:	790b      	ldrb	r3, [r1, #4]
 80095ea:	011b      	lsls	r3, r3, #4
 80095ec:	7848      	ldrb	r0, [r1, #1]
 80095ee:	0080      	lsls	r0, r0, #2
 80095f0:	4303      	orrs	r3, r0
 80095f2:	7809      	ldrb	r1, [r1, #0]
 80095f4:	430b      	orrs	r3, r1
		if(code > 0xFF)
 80095f6:	21ff      	movs	r1, #255	; 0xff
 80095f8:	4549      	cmp	r1, r9
 80095fa:	4189      	sbcs	r1, r1
 80095fc:	4249      	negs	r1, r1
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 80095fe:	0049      	lsls	r1, r1, #1
 8009600:	430b      	orrs	r3, r1
 8009602:	b2db      	uxtb	r3, r3
 8009604:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 8009606:	4649      	mov	r1, r9
 8009608:	7191      	strb	r1, [r2, #6]
 800960a:	2200      	movs	r2, #0
 800960c:	4693      	mov	fp, r2
		if(extendCode == true){
 800960e:	29ff      	cmp	r1, #255	; 0xff
 8009610:	d904      	bls.n	800961c <SendMessageFromPort+0x13c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8009612:	0a0a      	lsrs	r2, r1, #8
 8009614:	4987      	ldr	r1, [pc, #540]	; (8009834 <SendMessageFromPort+0x354>)
 8009616:	71ca      	strb	r2, [r1, #7]
			++shift;
 8009618:	2201      	movs	r2, #1
 800961a:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 800961c:	2e2e      	cmp	r6, #46	; 0x2e
 800961e:	d932      	bls.n	8009686 <SendMessageFromPort+0x1a6>
			message[5] |=0x80;
 8009620:	2280      	movs	r2, #128	; 0x80
 8009622:	4252      	negs	r2, r2
 8009624:	4313      	orrs	r3, r2
 8009626:	4a83      	ldr	r2, [pc, #524]	; (8009834 <SendMessageFromPort+0x354>)
 8009628:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 800962a:	4b8a      	ldr	r3, [pc, #552]	; (8009854 <SendMessageFromPort+0x374>)
 800962c:	801e      	strh	r6, [r3, #0]
	uint8_t length =0, shift =0;
 800962e:	2300      	movs	r3, #0
 8009630:	469a      	mov	sl, r3
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8009632:	262e      	movs	r6, #46	; 0x2e
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009634:	465b      	mov	r3, fp
 8009636:	1ddf      	adds	r7, r3, #7
 8009638:	003b      	movs	r3, r7
 800963a:	4694      	mov	ip, r2
 800963c:	4463      	add	r3, ip
 800963e:	9305      	str	r3, [sp, #20]
			while(totalNumberOfParams != 0){
 8009640:	4b84      	ldr	r3, [pc, #528]	; (8009854 <SendMessageFromPort+0x374>)
 8009642:	881f      	ldrh	r7, [r3, #0]
 8009644:	2f00      	cmp	r7, #0
 8009646:	d02d      	beq.n	80096a4 <SendMessageFromPort+0x1c4>
				if((totalNumberOfParams / numberOfParams) >= 1){
 8009648:	0031      	movs	r1, r6
 800964a:	0038      	movs	r0, r7
 800964c:	f7f6 fd80 	bl	8000150 <__udivsi3>
 8009650:	b280      	uxth	r0, r0
 8009652:	2800      	cmp	r0, #0
 8009654:	d141      	bne.n	80096da <SendMessageFromPort+0x1fa>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8009656:	4b77      	ldr	r3, [pc, #476]	; (8009834 <SendMessageFromPort+0x354>)
 8009658:	795a      	ldrb	r2, [r3, #5]
 800965a:	237f      	movs	r3, #127	; 0x7f
 800965c:	4013      	ands	r3, r2
 800965e:	4a75      	ldr	r2, [pc, #468]	; (8009834 <SendMessageFromPort+0x354>)
 8009660:	7153      	strb	r3, [r2, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009662:	4e7d      	ldr	r6, [pc, #500]	; (8009858 <SendMessageFromPort+0x378>)
 8009664:	8831      	ldrh	r1, [r6, #0]
 8009666:	4b7d      	ldr	r3, [pc, #500]	; (800985c <SendMessageFromPort+0x37c>)
 8009668:	18c9      	adds	r1, r1, r3
 800966a:	003a      	movs	r2, r7
 800966c:	9805      	ldr	r0, [sp, #20]
 800966e:	f00b fa1e 	bl	8014aae <memcpy>
					ptrShift =0;
 8009672:	2300      	movs	r3, #0
 8009674:	8033      	strh	r3, [r6, #0]
					totalNumberOfParams =0;
 8009676:	4a77      	ldr	r2, [pc, #476]	; (8009854 <SendMessageFromPort+0x374>)
 8009678:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 800967a:	1d3b      	adds	r3, r7, #4
 800967c:	445b      	add	r3, fp
 800967e:	b2db      	uxtb	r3, r3
 8009680:	469a      	mov	sl, r3
					numberOfParams =totalNumberOfParams;
 8009682:	003e      	movs	r6, r7
 8009684:	e7dc      	b.n	8009640 <SendMessageFromPort+0x160>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009686:	465b      	mov	r3, fp
 8009688:	3307      	adds	r3, #7
 800968a:	486a      	ldr	r0, [pc, #424]	; (8009834 <SendMessageFromPort+0x354>)
 800968c:	1818      	adds	r0, r3, r0
 800968e:	4b72      	ldr	r3, [pc, #456]	; (8009858 <SendMessageFromPort+0x378>)
 8009690:	8819      	ldrh	r1, [r3, #0]
 8009692:	4b72      	ldr	r3, [pc, #456]	; (800985c <SendMessageFromPort+0x37c>)
 8009694:	18c9      	adds	r1, r1, r3
 8009696:	0032      	movs	r2, r6
 8009698:	f00b fa09 	bl	8014aae <memcpy>
			length =numberOfParams + shift + 4;
 800969c:	1d31      	adds	r1, r6, #4
 800969e:	4459      	add	r1, fp
 80096a0:	b2cb      	uxtb	r3, r1
 80096a2:	469a      	mov	sl, r3
		if(AddBcastPayload == true){
 80096a4:	4b6e      	ldr	r3, [pc, #440]	; (8009860 <SendMessageFromPort+0x380>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d058      	beq.n	800975e <SendMessageFromPort+0x27e>
			if(dstGroupID < BOS_BROADCAST){
 80096ac:	4b6d      	ldr	r3, [pc, #436]	; (8009864 <SendMessageFromPort+0x384>)
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	2bff      	cmp	r3, #255	; 0xff
 80096b2:	d100      	bne.n	80096b6 <SendMessageFromPort+0x1d6>
 80096b4:	e114      	b.n	80098e0 <SendMessageFromPort+0x400>
				for(uint16_t i =1; i <= N; i++)						// N modules
 80096b6:	4a6c      	ldr	r2, [pc, #432]	; (8009868 <SendMessageFromPort+0x388>)
 80096b8:	7817      	ldrb	r7, [r2, #0]
 80096ba:	2f00      	cmp	r7, #0
 80096bc:	d076      	beq.n	80097ac <SendMessageFromPort+0x2cc>
 80096be:	2201      	movs	r2, #1
 80096c0:	409a      	lsls	r2, r3
 80096c2:	4690      	mov	r8, r2
 80096c4:	4869      	ldr	r0, [pc, #420]	; (800986c <SendMessageFromPort+0x38c>)
 80096c6:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 80096c8:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80096ca:	495a      	ldr	r1, [pc, #360]	; (8009834 <SendMessageFromPort+0x354>)
 80096cc:	468c      	mov	ip, r1
 80096ce:	44b4      	add	ip, r6
 80096d0:	9505      	str	r5, [sp, #20]
 80096d2:	4645      	mov	r5, r8
 80096d4:	46a0      	mov	r8, r4
 80096d6:	465c      	mov	r4, fp
 80096d8:	e017      	b.n	800970a <SendMessageFromPort+0x22a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 80096da:	9600      	str	r6, [sp, #0]
 80096dc:	464b      	mov	r3, r9
 80096de:	0022      	movs	r2, r4
 80096e0:	9903      	ldr	r1, [sp, #12]
 80096e2:	0028      	movs	r0, r5
 80096e4:	f7ff fefc 	bl	80094e0 <SendMessageFromPort>
					osDelay(10);
 80096e8:	200a      	movs	r0, #10
 80096ea:	f005 f97c 	bl	800e9e6 <osDelay>
					totalNumberOfParams -=numberOfParams;
 80096ee:	4a59      	ldr	r2, [pc, #356]	; (8009854 <SendMessageFromPort+0x374>)
 80096f0:	8813      	ldrh	r3, [r2, #0]
 80096f2:	1b9b      	subs	r3, r3, r6
 80096f4:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 80096f6:	4a58      	ldr	r2, [pc, #352]	; (8009858 <SendMessageFromPort+0x378>)
 80096f8:	8813      	ldrh	r3, [r2, #0]
 80096fa:	18f3      	adds	r3, r6, r3
 80096fc:	8013      	strh	r3, [r2, #0]
 80096fe:	e79f      	b.n	8009640 <SendMessageFromPort+0x160>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009700:	3301      	adds	r3, #1
 8009702:	b29b      	uxth	r3, r3
 8009704:	3002      	adds	r0, #2
 8009706:	42bb      	cmp	r3, r7
 8009708:	d80e      	bhi.n	8009728 <SendMessageFromPort+0x248>
					if(InGroup(i,dstGroupID)){
 800970a:	8801      	ldrh	r1, [r0, #0]
 800970c:	420d      	tst	r5, r1
 800970e:	d0f7      	beq.n	8009700 <SendMessageFromPort+0x220>
						++groupMembers;							// Add this member
 8009710:	3201      	adds	r2, #1
 8009712:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8009714:	18b1      	adds	r1, r6, r2
 8009716:	3101      	adds	r1, #1
 8009718:	292d      	cmp	r1, #45	; 0x2d
 800971a:	dd00      	ble.n	800971e <SendMessageFromPort+0x23e>
 800971c:	e0de      	b.n	80098dc <SendMessageFromPort+0x3fc>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 800971e:	4661      	mov	r1, ip
 8009720:	1889      	adds	r1, r1, r2
 8009722:	1909      	adds	r1, r1, r4
 8009724:	718b      	strb	r3, [r1, #6]
 8009726:	e7eb      	b.n	8009700 <SendMessageFromPort+0x220>
 8009728:	46a3      	mov	fp, r4
 800972a:	9d05      	ldr	r5, [sp, #20]
 800972c:	4644      	mov	r4, r8
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 800972e:	465b      	mov	r3, fp
 8009730:	3307      	adds	r3, #7
 8009732:	199b      	adds	r3, r3, r6
 8009734:	189b      	adds	r3, r3, r2
 8009736:	493f      	ldr	r1, [pc, #252]	; (8009834 <SendMessageFromPort+0x354>)
 8009738:	54ca      	strb	r2, [r1, r3]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 800973a:	18b1      	adds	r1, r6, r2
 800973c:	3102      	adds	r1, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 800973e:	2069      	movs	r0, #105	; 0x69
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8009740:	292d      	cmp	r1, #45	; 0x2d
 8009742:	dc49      	bgt.n	80097d8 <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8009744:	484a      	ldr	r0, [pc, #296]	; (8009870 <SendMessageFromPort+0x390>)
 8009746:	7801      	ldrb	r1, [r0, #0]
 8009748:	3101      	adds	r1, #1
 800974a:	b2c9      	uxtb	r1, r1
 800974c:	7001      	strb	r1, [r0, #0]
 800974e:	4839      	ldr	r0, [pc, #228]	; (8009834 <SendMessageFromPort+0x354>)
 8009750:	18c3      	adds	r3, r0, r3
 8009752:	7059      	strb	r1, [r3, #1]
 8009754:	4651      	mov	r1, sl
 8009756:	3102      	adds	r1, #2
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8009758:	188a      	adds	r2, r1, r2
 800975a:	b2d3      	uxtb	r3, r2
 800975c:	469a      	mov	sl, r3
	message[2] =length;
 800975e:	4b35      	ldr	r3, [pc, #212]	; (8009834 <SendMessageFromPort+0x354>)
 8009760:	4698      	mov	r8, r3
 8009762:	4652      	mov	r2, sl
 8009764:	709a      	strb	r2, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8009766:	1cd6      	adds	r6, r2, #3
 8009768:	0032      	movs	r2, r6
 800976a:	4641      	mov	r1, r8
 800976c:	4835      	ldr	r0, [pc, #212]	; (8009844 <SendMessageFromPort+0x364>)
 800976e:	f00b f99e 	bl	8014aae <memcpy>
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009772:	4653      	mov	r3, sl
 8009774:	b29f      	uxth	r7, r3
 8009776:	0031      	movs	r1, r6
 8009778:	4832      	ldr	r0, [pc, #200]	; (8009844 <SendMessageFromPort+0x364>)
 800977a:	f004 fa47 	bl	800dc0c <CalculateCRC8>
 800977e:	4643      	mov	r3, r8
 8009780:	5598      	strb	r0, [r3, r6]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8009782:	2238      	movs	r2, #56	; 0x38
 8009784:	2100      	movs	r1, #0
 8009786:	482f      	ldr	r0, [pc, #188]	; (8009844 <SendMessageFromPort+0x364>)
 8009788:	f00b f99a 	bl	8014ac0 <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 800978c:	3402      	adds	r4, #2
 800978e:	b2e4      	uxtb	r4, r4
 8009790:	2c01      	cmp	r4, #1
 8009792:	d900      	bls.n	8009796 <SendMessageFromPort+0x2b6>
 8009794:	e6f5      	b.n	8009582 <SendMessageFromPort+0xa2>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
			src =message[4];
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8009796:	9803      	ldr	r0, [sp, #12]
 8009798:	f7fa f992 	bl	8003ac0 <FindBroadcastRoutes>
 800979c:	2600      	movs	r6, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800979e:	2401      	movs	r4, #1
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 80097a0:	4b34      	ldr	r3, [pc, #208]	; (8009874 <SendMessageFromPort+0x394>)
 80097a2:	4699      	mov	r9, r3
 80097a4:	4b2a      	ldr	r3, [pc, #168]	; (8009850 <SendMessageFromPort+0x370>)
 80097a6:	4698      	mov	r8, r3
				/* Transmit the message from this port */
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 80097a8:	9503      	str	r5, [sp, #12]
 80097aa:	e074      	b.n	8009896 <SendMessageFromPort+0x3b6>
			uint8_t groupMembers =0;
 80097ac:	2200      	movs	r2, #0
 80097ae:	e7be      	b.n	800972e <SendMessageFromPort+0x24e>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
 80097b0:	1d3a      	adds	r2, r7, #4
 80097b2:	b292      	uxth	r2, r2
 80097b4:	2332      	movs	r3, #50	; 0x32
 80097b6:	491f      	ldr	r1, [pc, #124]	; (8009834 <SendMessageFromPort+0x354>)
 80097b8:	0028      	movs	r0, r5
 80097ba:	f005 f831 	bl	800e820 <writePxDMAMutex>
		ACK_FLAG =false; rejected_FLAG=false;
 80097be:	2300      	movs	r3, #0
 80097c0:	4a22      	ldr	r2, [pc, #136]	; (800984c <SendMessageFromPort+0x36c>)
 80097c2:	7013      	strb	r3, [r2, #0]
 80097c4:	4a2c      	ldr	r2, [pc, #176]	; (8009878 <SendMessageFromPort+0x398>)
 80097c6:	7013      	strb	r3, [r2, #0]
			Delay_us(10);
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 80097c8:	9904      	ldr	r1, [sp, #16]
 80097ca:	2000      	movs	r0, #0
 80097cc:	f006 f80a 	bl	800f7e4 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 80097d0:	4b2a      	ldr	r3, [pc, #168]	; (800987c <SendMessageFromPort+0x39c>)
 80097d2:	2202      	movs	r2, #2
 80097d4:	701a      	strb	r2, [r3, #0]
	
	return result;
 80097d6:	2000      	movs	r0, #0
}
 80097d8:	b007      	add	sp, #28
 80097da:	bc3c      	pop	{r2, r3, r4, r5}
 80097dc:	4690      	mov	r8, r2
 80097de:	4699      	mov	r9, r3
 80097e0:	46a2      	mov	sl, r4
 80097e2:	46ab      	mov	fp, r5
 80097e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 80097e6:	2332      	movs	r3, #50	; 0x32
 80097e8:	003a      	movs	r2, r7
 80097ea:	4912      	ldr	r1, [pc, #72]	; (8009834 <SendMessageFromPort+0x354>)
 80097ec:	0028      	movs	r0, r5
 80097ee:	f005 f817 	bl	800e820 <writePxDMAMutex>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 80097f2:	3601      	adds	r6, #1
 80097f4:	b2f6      	uxtb	r6, r6
 80097f6:	4b14      	ldr	r3, [pc, #80]	; (8009848 <SendMessageFromPort+0x368>)
 80097f8:	88db      	ldrh	r3, [r3, #6]
 80097fa:	42b3      	cmp	r3, r6
 80097fc:	d9df      	bls.n	80097be <SendMessageFromPort+0x2de>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 80097fe:	2332      	movs	r3, #50	; 0x32
 8009800:	003a      	movs	r2, r7
 8009802:	490c      	ldr	r1, [pc, #48]	; (8009834 <SendMessageFromPort+0x354>)
 8009804:	0028      	movs	r0, r5
 8009806:	f005 f80b 	bl	800e820 <writePxDMAMutex>
				osDelay(200);
 800980a:	20c8      	movs	r0, #200	; 0xc8
 800980c:	f005 f8eb 	bl	800e9e6 <osDelay>
				if(ACK_FLAG == true)
 8009810:	7823      	ldrb	r3, [r4, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1d3      	bne.n	80097be <SendMessageFromPort+0x2de>
				if(rejected_FLAG == true)
 8009816:	4b18      	ldr	r3, [pc, #96]	; (8009878 <SendMessageFromPort+0x398>)
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d0e9      	beq.n	80097f2 <SendMessageFromPort+0x312>
 800981e:	e7e2      	b.n	80097e6 <SendMessageFromPort+0x306>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8009820:	464b      	mov	r3, r9
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1b7      	bne.n	8009796 <SendMessageFromPort+0x2b6>
 8009826:	9b03      	ldr	r3, [sp, #12]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1b4      	bne.n	8009796 <SendMessageFromPort+0x2b6>
			src =message[4];
 800982c:	4b01      	ldr	r3, [pc, #4]	; (8009834 <SendMessageFromPort+0x354>)
 800982e:	791b      	ldrb	r3, [r3, #4]
 8009830:	9303      	str	r3, [sp, #12]
 8009832:	e7b0      	b.n	8009796 <SendMessageFromPort+0x2b6>
 8009834:	20000ed4 	.word	0x20000ed4
 8009838:	20000f0c 	.word	0x20000f0c
 800983c:	20000ed7 	.word	0x20000ed7
 8009840:	20000d1c 	.word	0x20000d1c
 8009844:	20001670 	.word	0x20001670
 8009848:	20006b74 	.word	0x20006b74
 800984c:	20000a84 	.word	0x20000a84
 8009850:	20001052 	.word	0x20001052
 8009854:	200017aa 	.word	0x200017aa
 8009858:	200017a8 	.word	0x200017a8
 800985c:	20000f14 	.word	0x20000f14
 8009860:	20000a85 	.word	0x20000a85
 8009864:	20000025 	.word	0x20000025
 8009868:	20000024 	.word	0x20000024
 800986c:	20000e9c 	.word	0x20000e9c
 8009870:	20000cc8 	.word	0x20000cc8
 8009874:	20000ccc 	.word	0x20000ccc
 8009878:	200010dc 	.word	0x200010dc
 800987c:	200010e8 	.word	0x200010e8
			rejected_FLAG=false;
 8009880:	4b23      	ldr	r3, [pc, #140]	; (8009910 <SendMessageFromPort+0x430>)
 8009882:	2200      	movs	r2, #0
 8009884:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
 8009886:	200a      	movs	r0, #10
 8009888:	f004 fdba 	bl	800e400 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800988c:	3401      	adds	r4, #1
 800988e:	b2e4      	uxtb	r4, r4
 8009890:	3601      	adds	r6, #1
 8009892:	2c06      	cmp	r4, #6
 8009894:	d098      	beq.n	80097c8 <SendMessageFromPort+0x2e8>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009896:	4643      	mov	r3, r8
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	3b01      	subs	r3, #1
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	464a      	mov	r2, r9
 80098a0:	5a9b      	ldrh	r3, [r3, r2]
 80098a2:	4133      	asrs	r3, r6
 80098a4:	07db      	lsls	r3, r3, #31
 80098a6:	d5eb      	bpl.n	8009880 <SendMessageFromPort+0x3a0>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 80098a8:	1d3d      	adds	r5, r7, #4
 80098aa:	b2ad      	uxth	r5, r5
 80098ac:	2332      	movs	r3, #50	; 0x32
 80098ae:	002a      	movs	r2, r5
 80098b0:	4918      	ldr	r1, [pc, #96]	; (8009914 <SendMessageFromPort+0x434>)
 80098b2:	0020      	movs	r0, r4
 80098b4:	f004 ffb4 	bl	800e820 <writePxDMAMutex>
				osDelay(200);
 80098b8:	20c8      	movs	r0, #200	; 0xc8
 80098ba:	f005 f894 	bl	800e9e6 <osDelay>
				if(rejected_FLAG == true)
 80098be:	4b14      	ldr	r3, [pc, #80]	; (8009910 <SendMessageFromPort+0x430>)
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d0dc      	beq.n	8009880 <SendMessageFromPort+0x3a0>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 80098c6:	2332      	movs	r3, #50	; 0x32
 80098c8:	002a      	movs	r2, r5
 80098ca:	4912      	ldr	r1, [pc, #72]	; (8009914 <SendMessageFromPort+0x434>)
 80098cc:	9803      	ldr	r0, [sp, #12]
 80098ce:	f004 ffa7 	bl	800e820 <writePxDMAMutex>
 80098d2:	e7d5      	b.n	8009880 <SendMessageFromPort+0x3a0>
		return BOS_ERR_WrongParam;
 80098d4:	2067      	movs	r0, #103	; 0x67
 80098d6:	e77f      	b.n	80097d8 <SendMessageFromPort+0x2f8>
 80098d8:	2067      	movs	r0, #103	; 0x67
 80098da:	e77d      	b.n	80097d8 <SendMessageFromPort+0x2f8>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80098dc:	2069      	movs	r0, #105	; 0x69
 80098de:	e77b      	b.n	80097d8 <SendMessageFromPort+0x2f8>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80098e0:	1c73      	adds	r3, r6, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80098e2:	2069      	movs	r0, #105	; 0x69
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80098e4:	2b2d      	cmp	r3, #45	; 0x2d
 80098e6:	dd00      	ble.n	80098ea <SendMessageFromPort+0x40a>
 80098e8:	e776      	b.n	80097d8 <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams] =++bcastID;
 80098ea:	4a0b      	ldr	r2, [pc, #44]	; (8009918 <SendMessageFromPort+0x438>)
 80098ec:	7813      	ldrb	r3, [r2, #0]
 80098ee:	3301      	adds	r3, #1
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	7013      	strb	r3, [r2, #0]
 80098f4:	4a07      	ldr	r2, [pc, #28]	; (8009914 <SendMessageFromPort+0x434>)
 80098f6:	1992      	adds	r2, r2, r6
 80098f8:	445a      	add	r2, fp
 80098fa:	71d3      	strb	r3, [r2, #7]
				length +=1;		// + bcastID
 80098fc:	4651      	mov	r1, sl
 80098fe:	3101      	adds	r1, #1
 8009900:	b2cb      	uxtb	r3, r1
 8009902:	469a      	mov	sl, r3
 8009904:	e72b      	b.n	800975e <SendMessageFromPort+0x27e>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009906:	464b      	mov	r3, r9
 8009908:	2b00      	cmp	r3, #0
 800990a:	d100      	bne.n	800990e <SendMessageFromPort+0x42e>
 800990c:	e612      	b.n	8009534 <SendMessageFromPort+0x54>
 800990e:	e664      	b.n	80095da <SendMessageFromPort+0xfa>
 8009910:	200010dc 	.word	0x200010dc
 8009914:	20000ed4 	.word	0x20000ed4
 8009918:	20000cc8 	.word	0x20000cc8

0800991c <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 800991c:	b530      	push	{r4, r5, lr}
 800991e:	b083      	sub	sp, #12
 8009920:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8009922:	4b0b      	ldr	r3, [pc, #44]	; (8009950 <ForwardReceivedMessage+0x34>)
 8009924:	2200      	movs	r2, #0
 8009926:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009928:	1e42      	subs	r2, r0, #1
 800992a:	00d3      	lsls	r3, r2, #3
 800992c:	1a9b      	subs	r3, r3, r2
 800992e:	00db      	lsls	r3, r3, #3
 8009930:	4a08      	ldr	r2, [pc, #32]	; (8009954 <ForwardReceivedMessage+0x38>)
 8009932:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 8009934:	4b08      	ldr	r3, [pc, #32]	; (8009958 <ForwardReceivedMessage+0x3c>)
 8009936:	7818      	ldrb	r0, [r3, #0]
 8009938:	0021      	movs	r1, r4
 800993a:	f7fa f98f 	bl	8003c5c <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 800993e:	9500      	str	r5, [sp, #0]
 8009940:	2300      	movs	r3, #0
 8009942:	0022      	movs	r2, r4
 8009944:	2100      	movs	r1, #0
 8009946:	f7ff fdcb 	bl	80094e0 <SendMessageFromPort>
}
 800994a:	2000      	movs	r0, #0
 800994c:	b003      	add	sp, #12
 800994e:	bd30      	pop	{r4, r5, pc}
 8009950:	20000a85 	.word	0x20000a85
 8009954:	20000d1c 	.word	0x20000d1c
 8009958:	20001052 	.word	0x20001052

0800995c <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 800995c:	b500      	push	{lr}
 800995e:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009960:	4b0c      	ldr	r3, [pc, #48]	; (8009994 <BroadcastReceivedMessage+0x38>)
 8009962:	2200      	movs	r2, #0
 8009964:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8009966:	4b0c      	ldr	r3, [pc, #48]	; (8009998 <BroadcastReceivedMessage+0x3c>)
 8009968:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 800996a:	28ff      	cmp	r0, #255	; 0xff
 800996c:	d009      	beq.n	8009982 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 800996e:	9100      	str	r1, [sp, #0]
 8009970:	2300      	movs	r3, #0
 8009972:	22fe      	movs	r2, #254	; 0xfe
 8009974:	2100      	movs	r1, #0
 8009976:	2000      	movs	r0, #0
 8009978:	f7ff fdb2 	bl	80094e0 <SendMessageFromPort>
}
 800997c:	2000      	movs	r0, #0
 800997e:	b003      	add	sp, #12
 8009980:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 8009982:	9100      	str	r1, [sp, #0]
 8009984:	2300      	movs	r3, #0
 8009986:	32ff      	adds	r2, #255	; 0xff
 8009988:	2100      	movs	r1, #0
 800998a:	2000      	movs	r0, #0
 800998c:	f7ff fda8 	bl	80094e0 <SendMessageFromPort>
 8009990:	e7f4      	b.n	800997c <BroadcastReceivedMessage+0x20>
 8009992:	46c0      	nop			; (mov r8, r8)
 8009994:	20000a85 	.word	0x20000a85
 8009998:	20000025 	.word	0x20000025

0800999c <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 800999c:	b530      	push	{r4, r5, lr}
 800999e:	b083      	sub	sp, #12
 80099a0:	001c      	movs	r4, r3
	AddBcastPayload = true;
 80099a2:	4b0f      	ldr	r3, [pc, #60]	; (80099e0 <BroadcastMessage+0x44>)
 80099a4:	2501      	movs	r5, #1
 80099a6:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 80099a8:	4b0e      	ldr	r3, [pc, #56]	; (80099e4 <BroadcastMessage+0x48>)
 80099aa:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 80099ac:	29ff      	cmp	r1, #255	; 0xff
 80099ae:	d00e      	beq.n	80099ce <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 80099b0:	9400      	str	r4, [sp, #0]
 80099b2:	0013      	movs	r3, r2
 80099b4:	22fe      	movs	r2, #254	; 0xfe
 80099b6:	0001      	movs	r1, r0
 80099b8:	2000      	movs	r0, #0
 80099ba:	f7ff fd91 	bl	80094e0 <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 80099be:	0022      	movs	r2, r4
 80099c0:	2100      	movs	r1, #0
 80099c2:	4809      	ldr	r0, [pc, #36]	; (80099e8 <BroadcastMessage+0x4c>)
 80099c4:	f00b f87c 	bl	8014ac0 <memset>
}
 80099c8:	2000      	movs	r0, #0
 80099ca:	b003      	add	sp, #12
 80099cc:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 80099ce:	9400      	str	r4, [sp, #0]
 80099d0:	0013      	movs	r3, r2
 80099d2:	22ff      	movs	r2, #255	; 0xff
 80099d4:	0001      	movs	r1, r0
 80099d6:	2000      	movs	r0, #0
 80099d8:	f7ff fd82 	bl	80094e0 <SendMessageFromPort>
 80099dc:	e7ef      	b.n	80099be <BroadcastMessage+0x22>
 80099de:	46c0      	nop			; (mov r8, r8)
 80099e0:	20000a85 	.word	0x20000a85
 80099e4:	20000025 	.word	0x20000025
 80099e8:	20000f14 	.word	0x20000f14

080099ec <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80099ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ee:	b083      	sub	sp, #12
 80099f0:	0004      	movs	r4, r0
 80099f2:	000e      	movs	r6, r1
 80099f4:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 80099f6:	28ff      	cmp	r0, #255	; 0xff
 80099f8:	d012      	beq.n	8009a20 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 80099fa:	4f0d      	ldr	r7, [pc, #52]	; (8009a30 <SendMessageToModule+0x44>)
 80099fc:	7838      	ldrb	r0, [r7, #0]
 80099fe:	0021      	movs	r1, r4
 8009a00:	f7fa f92c 	bl	8003c5c <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8009a04:	7839      	ldrb	r1, [r7, #0]
 8009a06:	9500      	str	r5, [sp, #0]
 8009a08:	0033      	movs	r3, r6
 8009a0a:	0022      	movs	r2, r4
 8009a0c:	f7ff fd68 	bl	80094e0 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8009a10:	002a      	movs	r2, r5
 8009a12:	2100      	movs	r1, #0
 8009a14:	4807      	ldr	r0, [pc, #28]	; (8009a34 <SendMessageToModule+0x48>)
 8009a16:	f00b f853 	bl	8014ac0 <memset>
}
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	b003      	add	sp, #12
 8009a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8009a20:	4b03      	ldr	r3, [pc, #12]	; (8009a30 <SendMessageToModule+0x44>)
 8009a22:	7818      	ldrb	r0, [r3, #0]
 8009a24:	0013      	movs	r3, r2
 8009a26:	000a      	movs	r2, r1
 8009a28:	21ff      	movs	r1, #255	; 0xff
 8009a2a:	f7ff ffb7 	bl	800999c <BroadcastMessage>
 8009a2e:	e7f4      	b.n	8009a1a <SendMessageToModule+0x2e>
 8009a30:	20001052 	.word	0x20001052
 8009a34:	20000f14 	.word	0x20000f14

08009a38 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a3a:	46de      	mov	lr, fp
 8009a3c:	4657      	mov	r7, sl
 8009a3e:	464e      	mov	r6, r9
 8009a40:	4645      	mov	r5, r8
 8009a42:	b5e0      	push	{r5, r6, r7, lr}
 8009a44:	b091      	sub	sp, #68	; 0x44
 8009a46:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a48:	000c      	movs	r4, r1
 8009a4a:	9106      	str	r1, [sp, #24]
 8009a4c:	0015      	movs	r5, r2
 8009a4e:	920e      	str	r2, [sp, #56]	; 0x38
 8009a50:	001e      	movs	r6, r3
 8009a52:	ab1a      	add	r3, sp, #104	; 0x68
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	4698      	mov	r8, r3
 8009a58:	ab1d      	add	r3, sp, #116	; 0x74
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009a5e:	4b5a      	ldr	r3, [pc, #360]	; (8009bc8 <StartScastDMAStream+0x190>)
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	428b      	cmp	r3, r1
 8009a64:	d11d      	bne.n	8009aa2 <StartScastDMAStream+0x6a>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009a66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a68:	0e1b      	lsrs	r3, r3, #24
 8009a6a:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t )(count >> 16);
 8009a6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a6e:	0c1b      	lsrs	r3, r3, #16
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t )(count >> 8);
 8009a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a76:	0a1b      	lsrs	r3, r3, #8
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009a7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009a7e:	0e1b      	lsrs	r3, r3, #24
 8009a80:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009a82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009a84:	0c1b      	lsrs	r3, r3, #16
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009a8a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009a8c:	0a1b      	lsrs	r3, r3, #8
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	469b      	mov	fp, r3
 8009a92:	4d4e      	ldr	r5, [pc, #312]	; (8009bcc <StartScastDMAStream+0x194>)
 8009a94:	231a      	movs	r3, #26
 8009a96:	4699      	mov	r9, r3
 8009a98:	44a9      	add	r9, r5
				temp2 =dstP;
 8009a9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a9c:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009a9e:	4c4c      	ldr	r4, [pc, #304]	; (8009bd0 <StartScastDMAStream+0x198>)
 8009aa0:	e05c      	b.n	8009b5c <StartScastDMAStream+0x124>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009aa2:	4b4b      	ldr	r3, [pc, #300]	; (8009bd0 <StartScastDMAStream+0x198>)
 8009aa4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009aa6:	0e12      	lsrs	r2, r2, #24
 8009aa8:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8009aaa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009aac:	0c12      	lsrs	r2, r2, #16
 8009aae:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8009ab0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009ab2:	0a12      	lsrs	r2, r2, #8
 8009ab4:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8009ab6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009ab8:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009aba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009abc:	0e12      	lsrs	r2, r2, #24
 8009abe:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009ac0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009ac2:	0c12      	lsrs	r2, r2, #16
 8009ac4:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009ac6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009ac8:	0a12      	lsrs	r2, r2, #8
 8009aca:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8009acc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009ace:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8009ad0:	4642      	mov	r2, r8
 8009ad2:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8009ad4:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 8009ad6:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 8009ad8:	72dd      	strb	r5, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8009ada:	4652      	mov	r2, sl
 8009adc:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009ade:	220d      	movs	r2, #13
 8009ae0:	211c      	movs	r1, #28
 8009ae2:	0020      	movs	r0, r4
 8009ae4:	f7ff ff82 	bl	80099ec <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8009ae8:	2000      	movs	r0, #0
 8009aea:	b011      	add	sp, #68	; 0x44
 8009aec:	bc3c      	pop	{r2, r3, r4, r5}
 8009aee:	4690      	mov	r8, r2
 8009af0:	4699      	mov	r9, r3
 8009af2:	46a2      	mov	sl, r4
 8009af4:	46ab      	mov	fp, r5
 8009af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 8009af8:	9906      	ldr	r1, [sp, #24]
 8009afa:	f7fa f8af 	bl	8003c5c <FindRoute>
 8009afe:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 8009b00:	0031      	movs	r1, r6
 8009b02:	9806      	ldr	r0, [sp, #24]
 8009b04:	f7fa f8aa 	bl	8003c5c <FindRoute>
			if(route[i] == dstM){
 8009b08:	7878      	ldrb	r0, [r7, #1]
				temp2 =dstP;
 8009b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM){
 8009b0c:	42b0      	cmp	r0, r6
 8009b0e:	d134      	bne.n	8009b7a <StartScastDMAStream+0x142>
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009b10:	9a08      	ldr	r2, [sp, #32]
 8009b12:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8009b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b16:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8009b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b1a:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8009b1c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009b1e:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009b20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b22:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009b24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b26:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009b28:	465a      	mov	r2, fp
 8009b2a:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009b2c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009b2e:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009b30:	4642      	mov	r2, r8
 8009b32:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8009b34:	9a07      	ldr	r2, [sp, #28]
 8009b36:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 8009b38:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8009b3a:	4653      	mov	r3, sl
 8009b3c:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 8009b3e:	0031      	movs	r1, r6
 8009b40:	9806      	ldr	r0, [sp, #24]
 8009b42:	f7fa f88b 	bl	8003c5c <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8009b46:	7878      	ldrb	r0, [r7, #1]
 8009b48:	220c      	movs	r2, #12
 8009b4a:	211b      	movs	r1, #27
 8009b4c:	f7ff ff4e 	bl	80099ec <SendMessageToModule>
			osDelay(10);
 8009b50:	200a      	movs	r0, #10
 8009b52:	f004 ff48 	bl	800e9e6 <osDelay>
 8009b56:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8009b58:	454d      	cmp	r5, r9
 8009b5a:	d013      	beq.n	8009b84 <StartScastDMAStream+0x14c>
		FindRoute(srcM,dstM);
 8009b5c:	0031      	movs	r1, r6
 8009b5e:	9806      	ldr	r0, [sp, #24]
 8009b60:	f7fa f87c 	bl	8003c5c <FindRoute>
 8009b64:	002f      	movs	r7, r5
		if(route[i]){
 8009b66:	7868      	ldrb	r0, [r5, #1]
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d0f4      	beq.n	8009b56 <StartScastDMAStream+0x11e>
			if(route[i + 1]){
 8009b6c:	78a9      	ldrb	r1, [r5, #2]
 8009b6e:	2900      	cmp	r1, #0
 8009b70:	d0c2      	beq.n	8009af8 <StartScastDMAStream+0xc0>
				temp1 =FindRoute(route[i],route[i + 1]);
 8009b72:	f7fa f873 	bl	8003c5c <FindRoute>
 8009b76:	9007      	str	r0, [sp, #28]
 8009b78:	e7c2      	b.n	8009b00 <StartScastDMAStream+0xc8>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009b7a:	7839      	ldrb	r1, [r7, #0]
 8009b7c:	f7fa f86e 	bl	8003c5c <FindRoute>
 8009b80:	0003      	movs	r3, r0
 8009b82:	e7c5      	b.n	8009b10 <StartScastDMAStream+0xd8>
	if(srcM == dstM)
 8009b84:	9806      	ldr	r0, [sp, #24]
 8009b86:	42b0      	cmp	r0, r6
 8009b88:	d118      	bne.n	8009bbc <StartScastDMAStream+0x184>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b90:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009b92:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009b94:	4640      	mov	r0, r8
 8009b96:	f7ff fb8b 	bl	80092b0 <SetupDMAStreams>
	if(stored){
 8009b9a:	4653      	mov	r3, sl
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d0a3      	beq.n	8009ae8 <StartScastDMAStream+0xb0>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	9304      	str	r3, [sp, #16]
 8009ba4:	9303      	str	r3, [sp, #12]
 8009ba6:	9302      	str	r3, [sp, #8]
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bb0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009bb2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009bb4:	4640      	mov	r0, r8
 8009bb6:	f7f9 fddd 	bl	8003774 <SaveEEstreams>
 8009bba:	e795      	b.n	8009ae8 <StartScastDMAStream+0xb0>
		port =FindRoute(srcM,dstM);
 8009bbc:	0031      	movs	r1, r6
 8009bbe:	f7fa f84d 	bl	8003c5c <FindRoute>
 8009bc2:	900e      	str	r0, [sp, #56]	; 0x38
 8009bc4:	e7e1      	b.n	8009b8a <StartScastDMAStream+0x152>
 8009bc6:	46c0      	nop			; (mov r8, r8)
 8009bc8:	20001052 	.word	0x20001052
 8009bcc:	20006cf7 	.word	0x20006cf7
 8009bd0:	20000f14 	.word	0x20000f14

08009bd4 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8009bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bd6:	46de      	mov	lr, fp
 8009bd8:	4657      	mov	r7, sl
 8009bda:	464e      	mov	r6, r9
 8009bdc:	4645      	mov	r5, r8
 8009bde:	b5e0      	push	{r5, r6, r7, lr}
 8009be0:	b085      	sub	sp, #20
						/* A.5.1. Copy the packet to message buffer */
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
						}
						else{ // Message wraps around
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009be2:	4bd2      	ldr	r3, [pc, #840]	; (8009f2c <BackEndTask+0x358>)
 8009be4:	3b70      	subs	r3, #112	; 0x70
 8009be6:	9302      	str	r3, [sp, #8]
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009be8:	4bd0      	ldr	r3, [pc, #832]	; (8009f2c <BackEndTask+0x358>)
 8009bea:	3b70      	subs	r3, #112	; 0x70
 8009bec:	9303      	str	r3, [sp, #12]
 8009bee:	e201      	b.n	8009ff4 <BackEndTask+0x420>
 8009bf0:	1eab      	subs	r3, r5, #2
 8009bf2:	4699      	mov	r9, r3
 8009bf4:	4bce      	ldr	r3, [pc, #824]	; (8009f30 <BackEndTask+0x35c>)
 8009bf6:	444b      	add	r3, r9
 8009bf8:	469a      	mov	sl, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009bfa:	7819      	ldrb	r1, [r3, #0]
 8009bfc:	29bf      	cmp	r1, #191	; 0xbf
 8009bfe:	dc17      	bgt.n	8009c30 <BackEndTask+0x5c>
							if(BOS.disableCLI == false){
 8009c00:	4bcc      	ldr	r3, [pc, #816]	; (8009f34 <BackEndTask+0x360>)
 8009c02:	7e9e      	ldrb	r6, [r3, #26]
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009c04:	000b      	movs	r3, r1
							if(BOS.disableCLI == false){
 8009c06:	2000      	movs	r0, #0
 8009c08:	e004      	b.n	8009c14 <BackEndTask+0x40>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009c0a:	2bbf      	cmp	r3, #191	; 0xbf
 8009c0c:	d02c      	beq.n	8009c68 <BackEndTask+0x94>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009c0e:	3301      	adds	r3, #1
 8009c10:	2bc0      	cmp	r3, #192	; 0xc0
 8009c12:	d00a      	beq.n	8009c2a <BackEndTask+0x56>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009c14:	2bbe      	cmp	r3, #190	; 0xbe
 8009c16:	dcf8      	bgt.n	8009c0a <BackEndTask+0x36>
 8009c18:	5ce2      	ldrb	r2, [r4, r3]
 8009c1a:	2a48      	cmp	r2, #72	; 0x48
 8009c1c:	d1f5      	bne.n	8009c0a <BackEndTask+0x36>
 8009c1e:	18e2      	adds	r2, r4, r3
 8009c20:	7852      	ldrb	r2, [r2, #1]
 8009c22:	2a5a      	cmp	r2, #90	; 0x5a
 8009c24:	d1f1      	bne.n	8009c0a <BackEndTask+0x36>
						packetStart =i;
 8009c26:	4ac4      	ldr	r2, [pc, #784]	; (8009f38 <BackEndTask+0x364>)
 8009c28:	6013      	str	r3, [r2, #0]
				if(emptyBuffer){
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d000      	beq.n	8009c30 <BackEndTask+0x5c>
 8009c2e:	e1c1      	b.n	8009fb4 <BackEndTask+0x3e0>
				totalnumberofrecevedmesg++;
 8009c30:	4ac2      	ldr	r2, [pc, #776]	; (8009f3c <BackEndTask+0x368>)
 8009c32:	6813      	ldr	r3, [r2, #0]
 8009c34:	3301      	adds	r3, #1
 8009c36:	6013      	str	r3, [r2, #0]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009c38:	4bbf      	ldr	r3, [pc, #764]	; (8009f38 <BackEndTask+0x364>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2bbd      	cmp	r3, #189	; 0xbd
 8009c3e:	d054      	beq.n	8009cea <BackEndTask+0x116>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009c40:	2bbe      	cmp	r3, #190	; 0xbe
 8009c42:	d100      	bne.n	8009c46 <BackEndTask+0x72>
 8009c44:	e0bb      	b.n	8009dbe <BackEndTask+0x1ea>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009c46:	2bbf      	cmp	r3, #191	; 0xbf
 8009c48:	d100      	bne.n	8009c4c <BackEndTask+0x78>
 8009c4a:	e0bf      	b.n	8009dcc <BackEndTask+0x1f8>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009c4c:	464a      	mov	r2, r9
 8009c4e:	0052      	lsls	r2, r2, #1
 8009c50:	444a      	add	r2, r9
 8009c52:	0191      	lsls	r1, r2, #6
 8009c54:	4aba      	ldr	r2, [pc, #744]	; (8009f40 <BackEndTask+0x36c>)
 8009c56:	1852      	adds	r2, r2, r1
 8009c58:	18d2      	adds	r2, r2, r3
 8009c5a:	7891      	ldrb	r1, [r2, #2]
 8009c5c:	4ab9      	ldr	r2, [pc, #740]	; (8009f44 <BackEndTask+0x370>)
 8009c5e:	6011      	str	r1, [r2, #0]
					parseStart =packetStart + 3;
 8009c60:	3303      	adds	r3, #3
 8009c62:	4ab9      	ldr	r2, [pc, #740]	; (8009f48 <BackEndTask+0x374>)
 8009c64:	6013      	str	r3, [r2, #0]
 8009c66:	e048      	b.n	8009cfa <BackEndTask+0x126>
 8009c68:	46a4      	mov	ip, r4
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009c6a:	0023      	movs	r3, r4
 8009c6c:	33bf      	adds	r3, #191	; 0xbf
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	2b48      	cmp	r3, #72	; 0x48
 8009c72:	d004      	beq.n	8009c7e <BackEndTask+0xaa>
							if(BOS.disableCLI == false){
 8009c74:	2e00      	cmp	r6, #0
 8009c76:	d000      	beq.n	8009c7a <BackEndTask+0xa6>
 8009c78:	e19c      	b.n	8009fb4 <BackEndTask+0x3e0>
 8009c7a:	4660      	mov	r0, ip
 8009c7c:	e00c      	b.n	8009c98 <BackEndTask+0xc4>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009c7e:	7823      	ldrb	r3, [r4, #0]
 8009c80:	2b5a      	cmp	r3, #90	; 0x5a
 8009c82:	d1f7      	bne.n	8009c74 <BackEndTask+0xa0>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8009c84:	4bac      	ldr	r3, [pc, #688]	; (8009f38 <BackEndTask+0x364>)
 8009c86:	22bf      	movs	r2, #191	; 0xbf
 8009c88:	601a      	str	r2, [r3, #0]
						break;
 8009c8a:	e7ce      	b.n	8009c2a <BackEndTask+0x56>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009c8c:	29bf      	cmp	r1, #191	; 0xbf
 8009c8e:	d027      	beq.n	8009ce0 <BackEndTask+0x10c>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009c90:	3101      	adds	r1, #1
 8009c92:	29c0      	cmp	r1, #192	; 0xc0
 8009c94:	d100      	bne.n	8009c98 <BackEndTask+0xc4>
 8009c96:	e18d      	b.n	8009fb4 <BackEndTask+0x3e0>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009c98:	5c43      	ldrb	r3, [r0, r1]
 8009c9a:	2b0d      	cmp	r3, #13
 8009c9c:	d1f8      	bne.n	8009c90 <BackEndTask+0xbc>
 8009c9e:	29be      	cmp	r1, #190	; 0xbe
 8009ca0:	dcf4      	bgt.n	8009c8c <BackEndTask+0xb8>
 8009ca2:	1842      	adds	r2, r0, r1
 8009ca4:	7853      	ldrb	r3, [r2, #1]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1f0      	bne.n	8009c8c <BackEndTask+0xb8>
										UARTRxBuf[port - 1][j] =0;
 8009caa:	464b      	mov	r3, r9
 8009cac:	005b      	lsls	r3, r3, #1
 8009cae:	444b      	add	r3, r9
 8009cb0:	019b      	lsls	r3, r3, #6
 8009cb2:	4aa3      	ldr	r2, [pc, #652]	; (8009f40 <BackEndTask+0x36c>)
 8009cb4:	18d3      	adds	r3, r2, r3
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009cba:	3101      	adds	r1, #1
 8009cbc:	4653      	mov	r3, sl
 8009cbe:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8009cc0:	4ba2      	ldr	r3, [pc, #648]	; (8009f4c <BackEndTask+0x378>)
 8009cc2:	7819      	ldrb	r1, [r3, #0]
 8009cc4:	48a2      	ldr	r0, [pc, #648]	; (8009f50 <BackEndTask+0x37c>)
 8009cc6:	5442      	strb	r2, [r0, r1]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009cc8:	3203      	adds	r2, #3
 8009cca:	4641      	mov	r1, r8
 8009ccc:	700a      	strb	r2, [r1, #0]
										PcPort =port;
 8009cce:	701f      	strb	r7, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009cd0:	4ba0      	ldr	r3, [pc, #640]	; (8009f54 <BackEndTask+0x380>)
 8009cd2:	6818      	ldr	r0, [r3, #0]
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	3a01      	subs	r2, #1
 8009cd8:	2100      	movs	r1, #0
 8009cda:	f006 faa3 	bl	8010224 <xTaskGenericNotify>
										break;
 8009cde:	e169      	b.n	8009fb4 <BackEndTask+0x3e0>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009ce0:	7803      	ldrb	r3, [r0, #0]
							emptyBuffer = true;
 8009ce2:	2001      	movs	r0, #1
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1a0      	bne.n	8009c2a <BackEndTask+0x56>
 8009ce8:	e7df      	b.n	8009caa <BackEndTask+0xd6>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009cea:	0023      	movs	r3, r4
 8009cec:	33bf      	adds	r3, #191	; 0xbf
 8009cee:	781a      	ldrb	r2, [r3, #0]
 8009cf0:	4b94      	ldr	r3, [pc, #592]	; (8009f44 <BackEndTask+0x370>)
 8009cf2:	601a      	str	r2, [r3, #0]
					parseStart =0;
 8009cf4:	4b94      	ldr	r3, [pc, #592]	; (8009f48 <BackEndTask+0x374>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	601a      	str	r2, [r3, #0]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009cfa:	4b92      	ldr	r3, [pc, #584]	; (8009f44 <BackEndTask+0x370>)
 8009cfc:	681e      	ldr	r6, [r3, #0]
 8009cfe:	3603      	adds	r6, #3
 8009d00:	4b8d      	ldr	r3, [pc, #564]	; (8009f38 <BackEndTask+0x364>)
 8009d02:	6819      	ldr	r1, [r3, #0]
 8009d04:	1873      	adds	r3, r6, r1
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8009d06:	2bbf      	cmp	r3, #191	; 0xbf
 8009d08:	dc00      	bgt.n	8009d0c <BackEndTask+0x138>
 8009d0a:	e179      	b.n	800a000 <BackEndTask+0x42c>
					packetEnd -= MSG_RX_BUF_SIZE;
 8009d0c:	3bc0      	subs	r3, #192	; 0xc0
 8009d0e:	4a92      	ldr	r2, [pc, #584]	; (8009f58 <BackEndTask+0x384>)
 8009d10:	6013      	str	r3, [r2, #0]
				if(packetStart != packetEnd) // Non-empty packet
 8009d12:	4b91      	ldr	r3, [pc, #580]	; (8009f58 <BackEndTask+0x384>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4299      	cmp	r1, r3
 8009d18:	d100      	bne.n	8009d1c <BackEndTask+0x148>
 8009d1a:	e129      	b.n	8009f70 <BackEndTask+0x39c>
					if(packetStart < packetEnd){
 8009d1c:	da5d      	bge.n	8009dda <BackEndTask+0x206>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8009d1e:	006b      	lsls	r3, r5, #1
 8009d20:	195b      	adds	r3, r3, r5
 8009d22:	019b      	lsls	r3, r3, #6
 8009d24:	3b81      	subs	r3, #129	; 0x81
 8009d26:	3bff      	subs	r3, #255	; 0xff
 8009d28:	1859      	adds	r1, r3, r1
 8009d2a:	4b85      	ldr	r3, [pc, #532]	; (8009f40 <BackEndTask+0x36c>)
 8009d2c:	18c9      	adds	r1, r1, r3
 8009d2e:	0032      	movs	r2, r6
 8009d30:	488a      	ldr	r0, [pc, #552]	; (8009f5c <BackEndTask+0x388>)
 8009d32:	f00a febc 	bl	8014aae <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009d36:	4b83      	ldr	r3, [pc, #524]	; (8009f44 <BackEndTask+0x370>)
 8009d38:	6819      	ldr	r1, [r3, #0]
 8009d3a:	3103      	adds	r1, #3
 8009d3c:	b289      	uxth	r1, r1
 8009d3e:	4e87      	ldr	r6, [pc, #540]	; (8009f5c <BackEndTask+0x388>)
 8009d40:	0030      	movs	r0, r6
 8009d42:	f003 ff63 	bl	800dc0c <CalculateCRC8>
 8009d46:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009d48:	2238      	movs	r2, #56	; 0x38
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	0030      	movs	r0, r6
 8009d4e:	f00a feb7 	bl	8014ac0 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009d52:	4b81      	ldr	r3, [pc, #516]	; (8009f58 <BackEndTask+0x384>)
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	464b      	mov	r3, r9
 8009d58:	005b      	lsls	r3, r3, #1
 8009d5a:	444b      	add	r3, r9
 8009d5c:	019b      	lsls	r3, r3, #6
 8009d5e:	4978      	ldr	r1, [pc, #480]	; (8009f40 <BackEndTask+0x36c>)
 8009d60:	18cb      	adds	r3, r1, r3
 8009d62:	5c9b      	ldrb	r3, [r3, r2]
 8009d64:	9901      	ldr	r1, [sp, #4]
 8009d66:	428b      	cmp	r3, r1
 8009d68:	d04f      	beq.n	8009e0a <BackEndTask+0x236>
				}

				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if(packetStart < packetEnd){
 8009d6a:	4b73      	ldr	r3, [pc, #460]	; (8009f38 <BackEndTask+0x364>)
 8009d6c:	6819      	ldr	r1, [r3, #0]
 8009d6e:	428a      	cmp	r2, r1
 8009d70:	dc00      	bgt.n	8009d74 <BackEndTask+0x1a0>
 8009d72:	e0fd      	b.n	8009f70 <BackEndTask+0x39c>
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009d74:	4b73      	ldr	r3, [pc, #460]	; (8009f44 <BackEndTask+0x370>)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	3204      	adds	r2, #4
 8009d7a:	0068      	lsls	r0, r5, #1
 8009d7c:	1940      	adds	r0, r0, r5
 8009d7e:	0180      	lsls	r0, r0, #6
 8009d80:	3881      	subs	r0, #129	; 0x81
 8009d82:	38ff      	subs	r0, #255	; 0xff
 8009d84:	1841      	adds	r1, r0, r1
 8009d86:	486e      	ldr	r0, [pc, #440]	; (8009f40 <BackEndTask+0x36c>)
 8009d88:	1808      	adds	r0, r1, r0
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	f00a fe98 	bl	8014ac0 <memset>
					MSG_RX_BUF_SIZE - packetStart);
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
				}

				/* A.6.2 Advance buffer index */
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009d90:	4b71      	ldr	r3, [pc, #452]	; (8009f58 <BackEndTask+0x384>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2bbf      	cmp	r3, #191	; 0xbf
 8009d96:	d100      	bne.n	8009d9a <BackEndTask+0x1c6>
 8009d98:	e101      	b.n	8009f9e <BackEndTask+0x3ca>
					UARTRxBufIndex[port - 1] =0;
				else{
					UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	4652      	mov	r2, sl
 8009d9e:	7013      	strb	r3, [r2, #0]
				}
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
 8009da0:	00eb      	lsls	r3, r5, #3
 8009da2:	1b5b      	subs	r3, r3, r5
 8009da4:	00db      	lsls	r3, r3, #3
 8009da6:	3b6f      	subs	r3, #111	; 0x6f
 8009da8:	4a60      	ldr	r2, [pc, #384]	; (8009f2c <BackEndTask+0x358>)
 8009daa:	5cd0      	ldrb	r0, [r2, r3]
 8009dac:	2200      	movs	r2, #0
 8009dae:	212d      	movs	r1, #45	; 0x2d
 8009db0:	f7ff fe1c 	bl	80099ec <SendMessageToModule>
				++rejectedMsg;
 8009db4:	4a6a      	ldr	r2, [pc, #424]	; (8009f60 <BackEndTask+0x38c>)
 8009db6:	8813      	ldrh	r3, [r2, #0]
 8009db8:	3301      	adds	r3, #1
 8009dba:	8013      	strh	r3, [r2, #0]
 8009dbc:	e107      	b.n	8009fce <BackEndTask+0x3fa>
					packetLength =UARTRxBuf[port - 1][0];
 8009dbe:	7822      	ldrb	r2, [r4, #0]
 8009dc0:	4b60      	ldr	r3, [pc, #384]	; (8009f44 <BackEndTask+0x370>)
 8009dc2:	601a      	str	r2, [r3, #0]
					parseStart =1;
 8009dc4:	4b60      	ldr	r3, [pc, #384]	; (8009f48 <BackEndTask+0x374>)
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	601a      	str	r2, [r3, #0]
 8009dca:	e796      	b.n	8009cfa <BackEndTask+0x126>
					packetLength =UARTRxBuf[port - 1][1];
 8009dcc:	7862      	ldrb	r2, [r4, #1]
 8009dce:	4b5d      	ldr	r3, [pc, #372]	; (8009f44 <BackEndTask+0x370>)
 8009dd0:	601a      	str	r2, [r3, #0]
					parseStart =2;
 8009dd2:	4b5d      	ldr	r3, [pc, #372]	; (8009f48 <BackEndTask+0x374>)
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	601a      	str	r2, [r3, #0]
 8009dd8:	e78f      	b.n	8009cfa <BackEndTask+0x126>
						MSG_RX_BUF_SIZE - packetStart);
 8009dda:	22c0      	movs	r2, #192	; 0xc0
 8009ddc:	1a52      	subs	r2, r2, r1
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009dde:	006b      	lsls	r3, r5, #1
 8009de0:	195b      	adds	r3, r3, r5
 8009de2:	019b      	lsls	r3, r3, #6
 8009de4:	3b81      	subs	r3, #129	; 0x81
 8009de6:	3bff      	subs	r3, #255	; 0xff
 8009de8:	1859      	adds	r1, r3, r1
 8009dea:	4b55      	ldr	r3, [pc, #340]	; (8009f40 <BackEndTask+0x36c>)
 8009dec:	18c9      	adds	r1, r1, r3
 8009dee:	9201      	str	r2, [sp, #4]
 8009df0:	485a      	ldr	r0, [pc, #360]	; (8009f5c <BackEndTask+0x388>)
 8009df2:	f00a fe5c 	bl	8014aae <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009df6:	4959      	ldr	r1, [pc, #356]	; (8009f5c <BackEndTask+0x388>)
 8009df8:	9b01      	ldr	r3, [sp, #4]
 8009dfa:	469c      	mov	ip, r3
 8009dfc:	4461      	add	r1, ip
 8009dfe:	0008      	movs	r0, r1
 8009e00:	1af2      	subs	r2, r6, r3
 8009e02:	0021      	movs	r1, r4
 8009e04:	f00a fe53 	bl	8014aae <memcpy>
 8009e08:	e795      	b.n	8009d36 <BackEndTask+0x162>
						portStatus[port] =MSG;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	4642      	mov	r2, r8
 8009e0e:	7013      	strb	r3, [r2, #0]
						messageLength[port - 1] =packetLength;
 8009e10:	4b4c      	ldr	r3, [pc, #304]	; (8009f44 <BackEndTask+0x370>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4698      	mov	r8, r3
 8009e16:	1eab      	subs	r3, r5, #2
 8009e18:	4a52      	ldr	r2, [pc, #328]	; (8009f64 <BackEndTask+0x390>)
 8009e1a:	4641      	mov	r1, r8
 8009e1c:	54d1      	strb	r1, [r2, r3]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009e1e:	4b4a      	ldr	r3, [pc, #296]	; (8009f48 <BackEndTask+0x374>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	22bf      	movs	r2, #191	; 0xbf
 8009e24:	1ad2      	subs	r2, r2, r3
 8009e26:	4590      	cmp	r8, r2
 8009e28:	dc41      	bgt.n	8009eae <BackEndTask+0x2da>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009e2a:	00e8      	lsls	r0, r5, #3
 8009e2c:	1b40      	subs	r0, r0, r5
 8009e2e:	00c0      	lsls	r0, r0, #3
 8009e30:	9a03      	ldr	r2, [sp, #12]
 8009e32:	4694      	mov	ip, r2
 8009e34:	4460      	add	r0, ip
 8009e36:	0069      	lsls	r1, r5, #1
 8009e38:	1949      	adds	r1, r1, r5
 8009e3a:	0189      	lsls	r1, r1, #6
 8009e3c:	3981      	subs	r1, #129	; 0x81
 8009e3e:	39ff      	subs	r1, #255	; 0xff
 8009e40:	18c9      	adds	r1, r1, r3
 8009e42:	4b3f      	ldr	r3, [pc, #252]	; (8009f40 <BackEndTask+0x36c>)
 8009e44:	18c9      	adds	r1, r1, r3
 8009e46:	4642      	mov	r2, r8
 8009e48:	f00a fe31 	bl	8014aae <memcpy>
						if(packetStart < packetEnd){
 8009e4c:	4b3a      	ldr	r3, [pc, #232]	; (8009f38 <BackEndTask+0x364>)
 8009e4e:	6819      	ldr	r1, [r3, #0]
 8009e50:	4b41      	ldr	r3, [pc, #260]	; (8009f58 <BackEndTask+0x384>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4299      	cmp	r1, r3
 8009e56:	da4a      	bge.n	8009eee <BackEndTask+0x31a>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009e58:	4b3a      	ldr	r3, [pc, #232]	; (8009f44 <BackEndTask+0x370>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	3204      	adds	r2, #4
 8009e5e:	0068      	lsls	r0, r5, #1
 8009e60:	1940      	adds	r0, r0, r5
 8009e62:	0180      	lsls	r0, r0, #6
 8009e64:	3881      	subs	r0, #129	; 0x81
 8009e66:	38ff      	subs	r0, #255	; 0xff
 8009e68:	1840      	adds	r0, r0, r1
 8009e6a:	4b35      	ldr	r3, [pc, #212]	; (8009f40 <BackEndTask+0x36c>)
 8009e6c:	18c0      	adds	r0, r0, r3
 8009e6e:	2100      	movs	r1, #0
 8009e70:	f00a fe26 	bl	8014ac0 <memset>
						if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009e74:	4b38      	ldr	r3, [pc, #224]	; (8009f58 <BackEndTask+0x384>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2bbf      	cmp	r3, #191	; 0xbf
 8009e7a:	d04f      	beq.n	8009f1c <BackEndTask+0x348>
							UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	4652      	mov	r2, sl
 8009e80:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009e82:	4a39      	ldr	r2, [pc, #228]	; (8009f68 <BackEndTask+0x394>)
 8009e84:	8813      	ldrh	r3, [r2, #0]
 8009e86:	3301      	adds	r3, #1
 8009e88:	8013      	strh	r3, [r2, #0]
						if(cMessage[port - 1][0] == myID || cMessage[port - 1][0] == BOS_BROADCAST || cMessage[port - 1][0] == BOS_MULTICAST)
 8009e8a:	00eb      	lsls	r3, r5, #3
 8009e8c:	1b5b      	subs	r3, r3, r5
 8009e8e:	00db      	lsls	r3, r3, #3
 8009e90:	3b70      	subs	r3, #112	; 0x70
 8009e92:	4a26      	ldr	r2, [pc, #152]	; (8009f2c <BackEndTask+0x358>)
 8009e94:	5cd3      	ldrb	r3, [r2, r3]
 8009e96:	4a35      	ldr	r2, [pc, #212]	; (8009f6c <BackEndTask+0x398>)
 8009e98:	7812      	ldrb	r2, [r2, #0]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d003      	beq.n	8009ea6 <BackEndTask+0x2d2>
 8009e9e:	3302      	adds	r3, #2
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d83e      	bhi.n	8009f24 <BackEndTask+0x350>
							NotifyMessagingTask(port);
 8009ea6:	0038      	movs	r0, r7
 8009ea8:	f7ff fade 	bl	8009468 <NotifyMessagingTask>
 8009eac:	e082      	b.n	8009fb4 <BackEndTask+0x3e0>
 8009eae:	00ee      	lsls	r6, r5, #3
 8009eb0:	1b76      	subs	r6, r6, r5
 8009eb2:	00f6      	lsls	r6, r6, #3
							MSG_RX_BUF_SIZE - parseStart);
 8009eb4:	22c0      	movs	r2, #192	; 0xc0
 8009eb6:	1ad2      	subs	r2, r2, r3
 8009eb8:	4691      	mov	r9, r2
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009eba:	9a02      	ldr	r2, [sp, #8]
 8009ebc:	1990      	adds	r0, r2, r6
 8009ebe:	0069      	lsls	r1, r5, #1
 8009ec0:	1949      	adds	r1, r1, r5
 8009ec2:	0189      	lsls	r1, r1, #6
 8009ec4:	3981      	subs	r1, #129	; 0x81
 8009ec6:	39ff      	subs	r1, #255	; 0xff
 8009ec8:	18c9      	adds	r1, r1, r3
 8009eca:	4b1d      	ldr	r3, [pc, #116]	; (8009f40 <BackEndTask+0x36c>)
 8009ecc:	18c9      	adds	r1, r1, r3
 8009ece:	464a      	mov	r2, r9
 8009ed0:	f00a fded 	bl	8014aae <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8009ed4:	0030      	movs	r0, r6
 8009ed6:	3870      	subs	r0, #112	; 0x70
 8009ed8:	4448      	add	r0, r9
 8009eda:	4b14      	ldr	r3, [pc, #80]	; (8009f2c <BackEndTask+0x358>)
 8009edc:	469c      	mov	ip, r3
 8009ede:	4460      	add	r0, ip
 8009ee0:	4643      	mov	r3, r8
 8009ee2:	464a      	mov	r2, r9
 8009ee4:	1a9a      	subs	r2, r3, r2
 8009ee6:	0021      	movs	r1, r4
 8009ee8:	f00a fde1 	bl	8014aae <memcpy>
 8009eec:	e7ae      	b.n	8009e4c <BackEndTask+0x278>
							MSG_RX_BUF_SIZE - packetStart);
 8009eee:	26c0      	movs	r6, #192	; 0xc0
 8009ef0:	1a76      	subs	r6, r6, r1
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009ef2:	0068      	lsls	r0, r5, #1
 8009ef4:	1940      	adds	r0, r0, r5
 8009ef6:	0180      	lsls	r0, r0, #6
 8009ef8:	3881      	subs	r0, #129	; 0x81
 8009efa:	38ff      	subs	r0, #255	; 0xff
 8009efc:	1840      	adds	r0, r0, r1
 8009efe:	4b10      	ldr	r3, [pc, #64]	; (8009f40 <BackEndTask+0x36c>)
 8009f00:	18c0      	adds	r0, r0, r3
 8009f02:	0032      	movs	r2, r6
 8009f04:	2100      	movs	r1, #0
 8009f06:	f00a fddb 	bl	8014ac0 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009f0a:	4b0e      	ldr	r3, [pc, #56]	; (8009f44 <BackEndTask+0x370>)
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	3204      	adds	r2, #4
 8009f10:	1b92      	subs	r2, r2, r6
 8009f12:	2100      	movs	r1, #0
 8009f14:	0020      	movs	r0, r4
 8009f16:	f00a fdd3 	bl	8014ac0 <memset>
 8009f1a:	e7ab      	b.n	8009e74 <BackEndTask+0x2a0>
							UARTRxBufIndex[port - 1] =0;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4652      	mov	r2, sl
 8009f20:	7013      	strb	r3, [r2, #0]
 8009f22:	e7ae      	b.n	8009e82 <BackEndTask+0x2ae>
							ForwardReceivedMessage(port);
 8009f24:	0038      	movs	r0, r7
 8009f26:	f7ff fcf9 	bl	800991c <ForwardReceivedMessage>
 8009f2a:	e043      	b.n	8009fb4 <BackEndTask+0x3e0>
 8009f2c:	20000d1c 	.word	0x20000d1c
 8009f30:	20001668 	.word	0x20001668
 8009f34:	20006bf4 	.word	0x20006bf4
 8009f38:	20001944 	.word	0x20001944
 8009f3c:	200019a0 	.word	0x200019a0
 8009f40:	200012a8 	.word	0x200012a8
 8009f44:	20001940 	.word	0x20001940
 8009f48:	20001948 	.word	0x20001948
 8009f4c:	20000a88 	.word	0x20000a88
 8009f50:	200010cc 	.word	0x200010cc
 8009f54:	2000170c 	.word	0x2000170c
 8009f58:	2000193c 	.word	0x2000193c
 8009f5c:	20001670 	.word	0x20001670
 8009f60:	2000199c 	.word	0x2000199c
 8009f64:	20000f0c 	.word	0x20000f0c
 8009f68:	200017e4 	.word	0x200017e4
 8009f6c:	20001052 	.word	0x20001052
					MSG_RX_BUF_SIZE - packetStart);
 8009f70:	26c0      	movs	r6, #192	; 0xc0
 8009f72:	1a76      	subs	r6, r6, r1
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009f74:	0068      	lsls	r0, r5, #1
 8009f76:	1940      	adds	r0, r0, r5
 8009f78:	0180      	lsls	r0, r0, #6
 8009f7a:	3881      	subs	r0, #129	; 0x81
 8009f7c:	38ff      	subs	r0, #255	; 0xff
 8009f7e:	1841      	adds	r1, r0, r1
 8009f80:	4821      	ldr	r0, [pc, #132]	; (800a008 <BackEndTask+0x434>)
 8009f82:	1808      	adds	r0, r1, r0
 8009f84:	0032      	movs	r2, r6
 8009f86:	2100      	movs	r1, #0
 8009f88:	f00a fd9a 	bl	8014ac0 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009f8c:	4b1f      	ldr	r3, [pc, #124]	; (800a00c <BackEndTask+0x438>)
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	3204      	adds	r2, #4
 8009f92:	1b92      	subs	r2, r2, r6
 8009f94:	2100      	movs	r1, #0
 8009f96:	0020      	movs	r0, r4
 8009f98:	f00a fd92 	bl	8014ac0 <memset>
 8009f9c:	e6f8      	b.n	8009d90 <BackEndTask+0x1bc>
					UARTRxBufIndex[port - 1] =0;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	4652      	mov	r2, sl
 8009fa2:	7013      	strb	r3, [r2, #0]
 8009fa4:	e6fc      	b.n	8009da0 <BackEndTask+0x1cc>
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8009fa6:	0038      	movs	r0, r7
 8009fa8:	f004 fbd2 	bl	800e750 <GetUart>
 8009fac:	22c0      	movs	r2, #192	; 0xc0
 8009fae:	0021      	movs	r1, r4
 8009fb0:	f009 fe4e 	bl	8013c50 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8009fb4:	3701      	adds	r7, #1
 8009fb6:	b2ff      	uxtb	r7, r7
 8009fb8:	3501      	adds	r5, #1
 8009fba:	34c0      	adds	r4, #192	; 0xc0
 8009fbc:	2f06      	cmp	r7, #6
 8009fbe:	d017      	beq.n	8009ff0 <BackEndTask+0x41c>
 8009fc0:	1e6b      	subs	r3, r5, #1
 8009fc2:	445b      	add	r3, fp
 8009fc4:	4698      	mov	r8, r3
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d800      	bhi.n	8009fce <BackEndTask+0x3fa>
 8009fcc:	e610      	b.n	8009bf0 <BackEndTask+0x1c>
 8009fce:	1eab      	subs	r3, r5, #2
 8009fd0:	4a0f      	ldr	r2, [pc, #60]	; (800a010 <BackEndTask+0x43c>)
 8009fd2:	4694      	mov	ip, r2
 8009fd4:	4463      	add	r3, ip
			if(MsgDMAStopped[port - 1] == true){
 8009fd6:	781a      	ldrb	r2, [r3, #0]
 8009fd8:	2a00      	cmp	r2, #0
 8009fda:	d0eb      	beq.n	8009fb4 <BackEndTask+0x3e0>
				MsgDMAStopped[port - 1] = false;
 8009fdc:	2200      	movs	r2, #0
 8009fde:	701a      	strb	r2, [r3, #0]
				if(portStatus[port] == OVERRUN)
 8009fe0:	4643      	mov	r3, r8
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	2b05      	cmp	r3, #5
 8009fe6:	d1de      	bne.n	8009fa6 <BackEndTask+0x3d2>
					portStatus[port] =FREE;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4642      	mov	r2, r8
 8009fec:	7013      	strb	r3, [r2, #0]
 8009fee:	e7da      	b.n	8009fa6 <BackEndTask+0x3d2>
			}
		}

		taskYIELD();
 8009ff0:	f006 fbb2 	bl	8010758 <vPortYield>
 8009ff4:	4c04      	ldr	r4, [pc, #16]	; (800a008 <BackEndTask+0x434>)
void BackEndTask(void *argument){
 8009ff6:	2502      	movs	r5, #2
		for(port =1; port <= NumOfPorts; port++){
 8009ff8:	2701      	movs	r7, #1
 8009ffa:	4b06      	ldr	r3, [pc, #24]	; (800a014 <BackEndTask+0x440>)
 8009ffc:	469b      	mov	fp, r3
 8009ffe:	e7df      	b.n	8009fc0 <BackEndTask+0x3ec>
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 800a000:	4a05      	ldr	r2, [pc, #20]	; (800a018 <BackEndTask+0x444>)
 800a002:	6013      	str	r3, [r2, #0]
 800a004:	e685      	b.n	8009d12 <BackEndTask+0x13e>
 800a006:	46c0      	nop			; (mov r8, r8)
 800a008:	200012a8 	.word	0x200012a8
 800a00c:	20001940 	.word	0x20001940
 800a010:	200012a0 	.word	0x200012a0
 800a014:	200010cc 	.word	0x200010cc
 800a018:	2000193c 	.word	0x2000193c

0800a01c <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 800a01c:	2001      	movs	r0, #1
 800a01e:	4770      	bx	lr

0800a020 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 800a020:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a022:	46de      	mov	lr, fp
 800a024:	4657      	mov	r7, sl
 800a026:	464e      	mov	r6, r9
 800a028:	4645      	mov	r5, r8
 800a02a:	b5e0      	push	{r5, r6, r7, lr}
 800a02c:	b097      	sub	sp, #92	; 0x5c
	port =(int8_t )(unsigned )argument;
 800a02e:	b2c3      	uxtb	r3, r0
 800a030:	9308      	str	r3, [sp, #32]
 800a032:	23ff      	movs	r3, #255	; 0xff
 800a034:	4003      	ands	r3, r0
 800a036:	4698      	mov	r8, r3
		if(messageLength[port - 1]){
 800a038:	1e5d      	subs	r5, r3, #1
 800a03a:	00eb      	lsls	r3, r5, #3
 800a03c:	1b5b      	subs	r3, r3, r5
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	0019      	movs	r1, r3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a042:	4ae3      	ldr	r2, [pc, #908]	; (800a3d0 <PxMessagingTask+0x3b0>)
 800a044:	18d3      	adds	r3, r2, r3
 800a046:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status =HAL_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result =BOS_OK;
 800a04c:	4699      	mov	r9, r3
			if(cMessage[port - 1][2] >> 7){
 800a04e:	000e      	movs	r6, r1
 800a050:	1853      	adds	r3, r2, r1
 800a052:	3302      	adds	r3, #2
 800a054:	9309      	str	r3, [sp, #36]	; 0x24
 800a056:	468a      	mov	sl, r1
 800a058:	e062      	b.n	800a120 <PxMessagingTask+0x100>
				longMessage =1;
 800a05a:	4ade      	ldr	r2, [pc, #888]	; (800a3d4 <PxMessagingTask+0x3b4>)
 800a05c:	2101      	movs	r1, #1
 800a05e:	7011      	strb	r1, [r2, #0]
 800a060:	e06f      	b.n	800a142 <PxMessagingTask+0x122>
				code =cMessage[port - 1][3 + shift];
 800a062:	4bdb      	ldr	r3, [pc, #876]	; (800a3d0 <PxMessagingTask+0x3b0>)
 800a064:	199b      	adds	r3, r3, r6
 800a066:	1818      	adds	r0, r3, r0
 800a068:	78c7      	ldrb	r7, [r0, #3]
 800a06a:	e08e      	b.n	800a18a <PxMessagingTask+0x16a>
				BOSMessaging.Acknowledgment =false;
 800a06c:	4bda      	ldr	r3, [pc, #872]	; (800a3d8 <PxMessagingTask+0x3b8>)
 800a06e:	2200      	movs	r2, #0
 800a070:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800a072:	212c      	movs	r1, #44	; 0x2c
 800a074:	9804      	ldr	r0, [sp, #16]
 800a076:	f7ff fcb9 	bl	80099ec <SendMessageToModule>
 800a07a:	e089      	b.n	800a190 <PxMessagingTask+0x170>
					Delay_ms(100);
 800a07c:	2064      	movs	r0, #100	; 0x64
 800a07e:	f006 fce9 	bl	8010a54 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800a082:	2300      	movs	r3, #0
 800a084:	9a08      	ldr	r2, [sp, #32]
 800a086:	4659      	mov	r1, fp
 800a088:	9804      	ldr	r0, [sp, #16]
 800a08a:	f7f9 feb7 	bl	8003dfc <remoteBootloaderUpdate>
 800a08e:	e02e      	b.n	800a0ee <PxMessagingTask+0xce>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a090:	4bd2      	ldr	r3, [pc, #840]	; (800a3dc <PxMessagingTask+0x3bc>)
 800a092:	5d5a      	ldrb	r2, [r3, r5]
 800a094:	4bce      	ldr	r3, [pc, #824]	; (800a3d0 <PxMessagingTask+0x3b0>)
 800a096:	199b      	adds	r3, r3, r6
 800a098:	189b      	adds	r3, r3, r2
 800a09a:	3b01      	subs	r3, #1
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	4ad0      	ldr	r2, [pc, #832]	; (800a3e0 <PxMessagingTask+0x3c0>)
 800a0a0:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800a0a2:	2103      	movs	r1, #3
 800a0a4:	4689      	mov	r9, r1
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d01e      	beq.n	800a0e8 <PxMessagingTask+0xc8>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a0aa:	4acd      	ldr	r2, [pc, #820]	; (800a3e0 <PxMessagingTask+0x3c0>)
 800a0ac:	7013      	strb	r3, [r2, #0]
 800a0ae:	4acd      	ldr	r2, [pc, #820]	; (800a3e4 <PxMessagingTask+0x3c4>)
 800a0b0:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a0b2:	9908      	ldr	r1, [sp, #32]
 800a0b4:	20ff      	movs	r0, #255	; 0xff
 800a0b6:	f7ff fc51 	bl	800995c <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a0ba:	4bc8      	ldr	r3, [pc, #800]	; (800a3dc <PxMessagingTask+0x3bc>)
 800a0bc:	5d5a      	ldrb	r2, [r3, r5]
 800a0be:	4bc4      	ldr	r3, [pc, #784]	; (800a3d0 <PxMessagingTask+0x3b0>)
 800a0c0:	199b      	adds	r3, r3, r6
 800a0c2:	189b      	adds	r3, r3, r2
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	701a      	strb	r2, [r3, #0]
				shift +=4;
 800a0ca:	9c06      	ldr	r4, [sp, #24]
 800a0cc:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800a0ce:	4bc3      	ldr	r3, [pc, #780]	; (800a3dc <PxMessagingTask+0x3bc>)
 800a0d0:	5d59      	ldrb	r1, [r3, r5]
 800a0d2:	1b0a      	subs	r2, r1, r4
 800a0d4:	b2d3      	uxtb	r3, r2
 800a0d6:	9306      	str	r3, [sp, #24]
					switch(code){
 800a0d8:	2f2d      	cmp	r7, #45	; 0x2d
 800a0da:	d901      	bls.n	800a0e0 <PxMessagingTask+0xc0>
 800a0dc:	f001 fab9 	bl	800b652 <PxMessagingTask+0x1632>
 800a0e0:	00bb      	lsls	r3, r7, #2
 800a0e2:	4ac1      	ldr	r2, [pc, #772]	; (800a3e8 <PxMessagingTask+0x3c8>)
 800a0e4:	58d3      	ldr	r3, [r2, r3]
 800a0e6:	469f      	mov	pc, r3
				if(result == BOS_OK){
 800a0e8:	464b      	mov	r3, r9
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0ed      	beq.n	800a0ca <PxMessagingTask+0xaa>
		if(result == BOS_ERR_UnknownMessage){
 800a0ee:	464b      	mov	r3, r9
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d101      	bne.n	800a0f8 <PxMessagingTask+0xd8>
 800a0f4:	f001 facf 	bl	800b696 <PxMessagingTask+0x1676>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a0f8:	4cb8      	ldr	r4, [pc, #736]	; (800a3dc <PxMessagingTask+0x3bc>)
 800a0fa:	5d62      	ldrb	r2, [r4, r5]
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	9807      	ldr	r0, [sp, #28]
 800a100:	f00a fcde 	bl	8014ac0 <memset>
		messageLength[port - 1] =0;
 800a104:	2300      	movs	r3, #0
 800a106:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a108:	4bb8      	ldr	r3, [pc, #736]	; (800a3ec <PxMessagingTask+0x3cc>)
 800a10a:	4642      	mov	r2, r8
 800a10c:	5c9b      	ldrb	r3, [r3, r2]
 800a10e:	3b02      	subs	r3, #2
 800a110:	2b02      	cmp	r3, #2
 800a112:	d903      	bls.n	800a11c <PxMessagingTask+0xfc>
			portStatus[port] =FREE;
 800a114:	4bb5      	ldr	r3, [pc, #724]	; (800a3ec <PxMessagingTask+0x3cc>)
 800a116:	2200      	movs	r2, #0
 800a118:	4641      	mov	r1, r8
 800a11a:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 800a11c:	f006 fb1c 	bl	8010758 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a120:	2101      	movs	r1, #1
 800a122:	4249      	negs	r1, r1
 800a124:	2001      	movs	r0, #1
 800a126:	f006 f831 	bl	801018c <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 800a12a:	4bac      	ldr	r3, [pc, #688]	; (800a3dc <PxMessagingTask+0x3bc>)
 800a12c:	5d5b      	ldrb	r3, [r3, r5]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d0dd      	beq.n	800a0ee <PxMessagingTask+0xce>
			if(cMessage[port - 1][2] >> 7){
 800a132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	b25a      	sxtb	r2, r3
 800a138:	2a00      	cmp	r2, #0
 800a13a:	db8e      	blt.n	800a05a <PxMessagingTask+0x3a>
				longMessage =0;
 800a13c:	4aa5      	ldr	r2, [pc, #660]	; (800a3d4 <PxMessagingTask+0x3b4>)
 800a13e:	2100      	movs	r1, #0
 800a140:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 800a142:	4aa3      	ldr	r2, [pc, #652]	; (800a3d0 <PxMessagingTask+0x3b0>)
 800a144:	5cb1      	ldrb	r1, [r6, r2]
 800a146:	468b      	mov	fp, r1
			src =cMessage[port - 1][1];
 800a148:	1992      	adds	r2, r2, r6
 800a14a:	7852      	ldrb	r2, [r2, #1]
 800a14c:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 800a14e:	2201      	movs	r2, #1
 800a150:	0010      	movs	r0, r2
 800a152:	4018      	ands	r0, r3
			shift =0;
 800a154:	9006      	str	r0, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a156:	49a0      	ldr	r1, [pc, #640]	; (800a3d8 <PxMessagingTask+0x3b8>)
 800a158:	071c      	lsls	r4, r3, #28
 800a15a:	0fa4      	lsrs	r4, r4, #30
 800a15c:	704c      	strb	r4, [r1, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 800a15e:	091c      	lsrs	r4, r3, #4
 800a160:	4022      	ands	r2, r4
 800a162:	0014      	movs	r4, r2
 800a164:	1e67      	subs	r7, r4, #1
 800a166:	41bc      	sbcs	r4, r7
 800a168:	70cc      	strb	r4, [r1, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 800a16a:	2460      	movs	r4, #96	; 0x60
 800a16c:	401c      	ands	r4, r3
 800a16e:	700c      	strb	r4, [r1, #0]
			if(extendCode == true){
 800a170:	079b      	lsls	r3, r3, #30
 800a172:	d400      	bmi.n	800a176 <PxMessagingTask+0x156>
 800a174:	e775      	b.n	800a062 <PxMessagingTask+0x42>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a176:	4b96      	ldr	r3, [pc, #600]	; (800a3d0 <PxMessagingTask+0x3b0>)
 800a178:	199b      	adds	r3, r3, r6
 800a17a:	181b      	adds	r3, r3, r0
 800a17c:	7919      	ldrb	r1, [r3, #4]
 800a17e:	0209      	lsls	r1, r1, #8
 800a180:	78df      	ldrb	r7, [r3, #3]
 800a182:	187f      	adds	r7, r7, r1
 800a184:	b2bf      	uxth	r7, r7
				++shift;
 800a186:	1c43      	adds	r3, r0, #1
 800a188:	9306      	str	r3, [sp, #24]
			if(true == BOSMessaging.received_Acknowledgment){
 800a18a:	2a00      	cmp	r2, #0
 800a18c:	d000      	beq.n	800a190 <PxMessagingTask+0x170>
 800a18e:	e76d      	b.n	800a06c <PxMessagingTask+0x4c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a190:	465b      	mov	r3, fp
 800a192:	3b01      	subs	r3, #1
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2bfc      	cmp	r3, #252	; 0xfc
 800a198:	d901      	bls.n	800a19e <PxMessagingTask+0x17e>
 800a19a:	f001 fabd 	bl	800b718 <PxMessagingTask+0x16f8>
 800a19e:	4b94      	ldr	r3, [pc, #592]	; (800a3f0 <PxMessagingTask+0x3d0>)
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	455b      	cmp	r3, fp
 800a1a4:	d101      	bne.n	800a1aa <PxMessagingTask+0x18a>
 800a1a6:	f001 fab7 	bl	800b718 <PxMessagingTask+0x16f8>
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d101      	bne.n	800a1b2 <PxMessagingTask+0x192>
 800a1ae:	f001 faad 	bl	800b70c <PxMessagingTask+0x16ec>
				ForwardReceivedMessage(port);
 800a1b2:	9808      	ldr	r0, [sp, #32]
 800a1b4:	f7ff fbb2 	bl	800991c <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 800a1b8:	4b87      	ldr	r3, [pc, #540]	; (800a3d8 <PxMessagingTask+0x3b8>)
 800a1ba:	785b      	ldrb	r3, [r3, #1]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <PxMessagingTask+0x1a6>
					indMode =IND_SHORT_BLINK;
 800a1c0:	4b8c      	ldr	r3, [pc, #560]	; (800a3f4 <PxMessagingTask+0x3d4>)
 800a1c2:	2203      	movs	r2, #3
 800a1c4:	701a      	strb	r2, [r3, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 800a1c6:	2f19      	cmp	r7, #25
 800a1c8:	d100      	bne.n	800a1cc <PxMessagingTask+0x1ac>
 800a1ca:	e757      	b.n	800a07c <PxMessagingTask+0x5c>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800a1cc:	2f1a      	cmp	r7, #26
 800a1ce:	d18e      	bne.n	800a0ee <PxMessagingTask+0xce>
					Delay_ms(100);
 800a1d0:	2064      	movs	r0, #100	; 0x64
 800a1d2:	f006 fc3f 	bl	8010a54 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800a1d6:	4b7e      	ldr	r3, [pc, #504]	; (800a3d0 <PxMessagingTask+0x3b0>)
 800a1d8:	199b      	adds	r3, r3, r6
 800a1da:	9a06      	ldr	r2, [sp, #24]
 800a1dc:	5c9b      	ldrb	r3, [r3, r2]
 800a1de:	9a08      	ldr	r2, [sp, #32]
 800a1e0:	4659      	mov	r1, fp
 800a1e2:	9804      	ldr	r0, [sp, #16]
 800a1e4:	f7f9 fe0a 	bl	8003dfc <remoteBootloaderUpdate>
 800a1e8:	e781      	b.n	800a0ee <PxMessagingTask+0xce>
							for(p =0; p < numOfParams; p++){
 800a1ea:	9b06      	ldr	r3, [sp, #24]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01f      	beq.n	800a230 <PxMessagingTask+0x210>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a1f0:	9b04      	ldr	r3, [sp, #16]
 800a1f2:	1e58      	subs	r0, r3, #1
 800a1f4:	0042      	lsls	r2, r0, #1
 800a1f6:	4b80      	ldr	r3, [pc, #512]	; (800a3f8 <PxMessagingTask+0x3d8>)
 800a1f8:	5ad3      	ldrh	r3, [r2, r3]
 800a1fa:	4652      	mov	r2, sl
 800a1fc:	1911      	adds	r1, r2, r4
 800a1fe:	4a74      	ldr	r2, [pc, #464]	; (800a3d0 <PxMessagingTask+0x3b0>)
 800a200:	1889      	adds	r1, r1, r2
 800a202:	3201      	adds	r2, #1
 800a204:	4452      	add	r2, sl
 800a206:	1914      	adds	r4, r2, r4
 800a208:	9a06      	ldr	r2, [sp, #24]
 800a20a:	3a01      	subs	r2, #1
 800a20c:	b2d2      	uxtb	r2, r2
 800a20e:	18a4      	adds	r4, r4, r2
 800a210:	2780      	movs	r7, #128	; 0x80
 800a212:	023f      	lsls	r7, r7, #8
 800a214:	4684      	mov	ip, r0
 800a216:	780a      	ldrb	r2, [r1, #0]
 800a218:	3a01      	subs	r2, #1
 800a21a:	0038      	movs	r0, r7
 800a21c:	4110      	asrs	r0, r2
 800a21e:	4303      	orrs	r3, r0
 800a220:	b29b      	uxth	r3, r3
 800a222:	3101      	adds	r1, #1
							for(p =0; p < numOfParams; p++){
 800a224:	42a1      	cmp	r1, r4
 800a226:	d1f6      	bne.n	800a216 <PxMessagingTask+0x1f6>
 800a228:	4660      	mov	r0, ip
 800a22a:	0040      	lsls	r0, r0, #1
 800a22c:	4a72      	ldr	r2, [pc, #456]	; (800a3f8 <PxMessagingTask+0x3d8>)
 800a22e:	5283      	strh	r3, [r0, r2]
							responseStatus =BOS_OK;
 800a230:	4b72      	ldr	r3, [pc, #456]	; (800a3fc <PxMessagingTask+0x3dc>)
 800a232:	2200      	movs	r2, #0
 800a234:	701a      	strb	r2, [r3, #0]
							break;
 800a236:	2300      	movs	r3, #0
 800a238:	4699      	mov	r9, r3
 800a23a:	e75d      	b.n	800a0f8 <PxMessagingTask+0xd8>
							indMode =IND_PING;
 800a23c:	4b6d      	ldr	r3, [pc, #436]	; (800a3f4 <PxMessagingTask+0x3d4>)
 800a23e:	2201      	movs	r2, #1
 800a240:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a242:	200a      	movs	r0, #10
 800a244:	f004 fbcf 	bl	800e9e6 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 800a248:	4b63      	ldr	r3, [pc, #396]	; (800a3d8 <PxMessagingTask+0x3b8>)
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	2240      	movs	r2, #64	; 0x40
 800a24e:	4393      	bics	r3, r2
 800a250:	2200      	movs	r2, #0
 800a252:	4691      	mov	r9, r2
 800a254:	2b20      	cmp	r3, #32
 800a256:	d000      	beq.n	800a25a <PxMessagingTask+0x23a>
 800a258:	e74e      	b.n	800a0f8 <PxMessagingTask+0xd8>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800a25a:	2102      	movs	r1, #2
 800a25c:	9804      	ldr	r0, [sp, #16]
 800a25e:	f7ff fbc5 	bl	80099ec <SendMessageToModule>
 800a262:	e749      	b.n	800a0f8 <PxMessagingTask+0xd8>
							if(!moduleAlias[myID][0])
 800a264:	4b62      	ldr	r3, [pc, #392]	; (800a3f0 <PxMessagingTask+0x3d0>)
 800a266:	781a      	ldrb	r2, [r3, #0]
 800a268:	0093      	lsls	r3, r2, #2
 800a26a:	189b      	adds	r3, r3, r2
 800a26c:	005b      	lsls	r3, r3, #1
 800a26e:	4a64      	ldr	r2, [pc, #400]	; (800a400 <PxMessagingTask+0x3e0>)
 800a270:	5c9b      	ldrb	r3, [r3, r2]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d118      	bne.n	800a2a8 <PxMessagingTask+0x288>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800a276:	9a04      	ldr	r2, [sp, #16]
 800a278:	4962      	ldr	r1, [pc, #392]	; (800a404 <PxMessagingTask+0x3e4>)
 800a27a:	4863      	ldr	r0, [pc, #396]	; (800a408 <PxMessagingTask+0x3e8>)
 800a27c:	f00a fe1a 	bl	8014eb4 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800a280:	4c61      	ldr	r4, [pc, #388]	; (800a408 <PxMessagingTask+0x3e8>)
 800a282:	0020      	movs	r0, r4
 800a284:	f7f5 ff48 	bl	8000118 <strlen>
 800a288:	b282      	uxth	r2, r0
 800a28a:	4b60      	ldr	r3, [pc, #384]	; (800a40c <PxMessagingTask+0x3ec>)
 800a28c:	7818      	ldrb	r0, [r3, #0]
 800a28e:	2301      	movs	r3, #1
 800a290:	425b      	negs	r3, r3
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	3333      	adds	r3, #51	; 0x33
 800a296:	0021      	movs	r1, r4
 800a298:	f004 fa78 	bl	800e78c <writePxMutex>
							responseStatus =BOS_OK;
 800a29c:	4b57      	ldr	r3, [pc, #348]	; (800a3fc <PxMessagingTask+0x3dc>)
 800a29e:	2200      	movs	r2, #0
 800a2a0:	701a      	strb	r2, [r3, #0]
							break;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	4699      	mov	r9, r3
 800a2a6:	e727      	b.n	800a0f8 <PxMessagingTask+0xd8>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800a2a8:	230a      	movs	r3, #10
 800a2aa:	9904      	ldr	r1, [sp, #16]
 800a2ac:	434b      	muls	r3, r1
 800a2ae:	4a54      	ldr	r2, [pc, #336]	; (800a400 <PxMessagingTask+0x3e0>)
 800a2b0:	189b      	adds	r3, r3, r2
 800a2b2:	000a      	movs	r2, r1
 800a2b4:	4956      	ldr	r1, [pc, #344]	; (800a410 <PxMessagingTask+0x3f0>)
 800a2b6:	4854      	ldr	r0, [pc, #336]	; (800a408 <PxMessagingTask+0x3e8>)
 800a2b8:	f00a fdfc 	bl	8014eb4 <sprintf>
 800a2bc:	e7e0      	b.n	800a280 <PxMessagingTask+0x260>
							IND_ON();
 800a2be:	2180      	movs	r1, #128	; 0x80
 800a2c0:	2090      	movs	r0, #144	; 0x90
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	0109      	lsls	r1, r1, #4
 800a2c6:	05c0      	lsls	r0, r0, #23
 800a2c8:	f008 f8a0 	bl	801240c <HAL_GPIO_WritePin>
							break;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	4699      	mov	r9, r3
 800a2d0:	e712      	b.n	800a0f8 <PxMessagingTask+0xd8>
							IND_OFF();
 800a2d2:	2180      	movs	r1, #128	; 0x80
 800a2d4:	2090      	movs	r0, #144	; 0x90
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	0109      	lsls	r1, r1, #4
 800a2da:	05c0      	lsls	r0, r0, #23
 800a2dc:	f008 f896 	bl	801240c <HAL_GPIO_WritePin>
							break;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	4699      	mov	r9, r3
 800a2e4:	e708      	b.n	800a0f8 <PxMessagingTask+0xd8>
							IND_toggle();
 800a2e6:	2180      	movs	r1, #128	; 0x80
 800a2e8:	2090      	movs	r0, #144	; 0x90
 800a2ea:	0109      	lsls	r1, r1, #4
 800a2ec:	05c0      	lsls	r0, r0, #23
 800a2ee:	f008 f893 	bl	8012418 <HAL_GPIO_TogglePin>
							break;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4699      	mov	r9, r3
 800a2f6:	e6ff      	b.n	800a0f8 <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a2f8:	4f46      	ldr	r7, [pc, #280]	; (800a414 <PxMessagingTask+0x3f4>)
 800a2fa:	00ab      	lsls	r3, r5, #2
 800a2fc:	4a34      	ldr	r2, [pc, #208]	; (800a3d0 <PxMessagingTask+0x3b0>)
 800a2fe:	1992      	adds	r2, r2, r6
 800a300:	1910      	adds	r0, r2, r4
 800a302:	7881      	ldrb	r1, [r0, #2]
 800a304:	468c      	mov	ip, r1
 800a306:	9904      	ldr	r1, [sp, #16]
 800a308:	0209      	lsls	r1, r1, #8
 800a30a:	4461      	add	r1, ip
 800a30c:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a30e:	18fb      	adds	r3, r7, r3
 800a310:	5d11      	ldrb	r1, [r2, r4]
 800a312:	0209      	lsls	r1, r1, #8
 800a314:	7842      	ldrb	r2, [r0, #1]
 800a316:	1852      	adds	r2, r2, r1
 800a318:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 800a31a:	4b3f      	ldr	r3, [pc, #252]	; (800a418 <PxMessagingTask+0x3f8>)
 800a31c:	881b      	ldrh	r3, [r3, #0]
 800a31e:	4a3f      	ldr	r2, [pc, #252]	; (800a41c <PxMessagingTask+0x3fc>)
 800a320:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800a322:	0a1b      	lsrs	r3, r3, #8
 800a324:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800a326:	9c08      	ldr	r4, [sp, #32]
 800a328:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800a32a:	2002      	movs	r0, #2
 800a32c:	f004 fb5b 	bl	800e9e6 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a330:	2303      	movs	r3, #3
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	3308      	adds	r3, #8
 800a336:	2200      	movs	r2, #0
 800a338:	2100      	movs	r1, #0
 800a33a:	0020      	movs	r0, r4
 800a33c:	f7ff f8d0 	bl	80094e0 <SendMessageFromPort>
							break;
 800a340:	2300      	movs	r3, #0
 800a342:	4699      	mov	r9, r3
 800a344:	e6d8      	b.n	800a0f8 <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a346:	4f33      	ldr	r7, [pc, #204]	; (800a414 <PxMessagingTask+0x3f4>)
 800a348:	00ab      	lsls	r3, r5, #2
 800a34a:	4a21      	ldr	r2, [pc, #132]	; (800a3d0 <PxMessagingTask+0x3b0>)
 800a34c:	1992      	adds	r2, r2, r6
 800a34e:	1910      	adds	r0, r2, r4
 800a350:	7881      	ldrb	r1, [r0, #2]
 800a352:	468c      	mov	ip, r1
 800a354:	9904      	ldr	r1, [sp, #16]
 800a356:	0209      	lsls	r1, r1, #8
 800a358:	4461      	add	r1, ip
 800a35a:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a35c:	18fb      	adds	r3, r7, r3
 800a35e:	5d11      	ldrb	r1, [r2, r4]
 800a360:	0209      	lsls	r1, r1, #8
 800a362:	7842      	ldrb	r2, [r0, #1]
 800a364:	1852      	adds	r2, r2, r1
 800a366:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 800a368:	4b24      	ldr	r3, [pc, #144]	; (800a3fc <PxMessagingTask+0x3dc>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	701a      	strb	r2, [r3, #0]
							break;
 800a36e:	2300      	movs	r3, #0
 800a370:	4699      	mov	r9, r3
 800a372:	e6c1      	b.n	800a0f8 <PxMessagingTask+0xd8>
							ExploreNeighbors(port);
 800a374:	9808      	ldr	r0, [sp, #32]
 800a376:	f7f9 fb7f 	bl	8003a78 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800a37a:	4b1e      	ldr	r3, [pc, #120]	; (800a3f4 <PxMessagingTask+0x3d4>)
 800a37c:	2202      	movs	r2, #2
 800a37e:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a380:	200a      	movs	r0, #10
 800a382:	f004 fb30 	bl	800e9e6 <osDelay>
 800a386:	4f23      	ldr	r7, [pc, #140]	; (800a414 <PxMessagingTask+0x3f4>)
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a388:	2401      	movs	r4, #1
							temp =0;
 800a38a:	2300      	movs	r3, #0
 800a38c:	9305      	str	r3, [sp, #20]
 800a38e:	e004      	b.n	800a39a <PxMessagingTask+0x37a>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a390:	3401      	adds	r4, #1
 800a392:	b2e4      	uxtb	r4, r4
 800a394:	3704      	adds	r7, #4
 800a396:	2c06      	cmp	r4, #6
 800a398:	d011      	beq.n	800a3be <PxMessagingTask+0x39e>
								if(neighbors[p - 1][0]){
 800a39a:	883b      	ldrh	r3, [r7, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d0f7      	beq.n	800a390 <PxMessagingTask+0x370>
									messageParams[temp] =p;
 800a3a0:	4a1e      	ldr	r2, [pc, #120]	; (800a41c <PxMessagingTask+0x3fc>)
 800a3a2:	9b05      	ldr	r3, [sp, #20]
 800a3a4:	54d4      	strb	r4, [r2, r3]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a3a6:	1c58      	adds	r0, r3, #1
 800a3a8:	4694      	mov	ip, r2
 800a3aa:	4460      	add	r0, ip
 800a3ac:	2204      	movs	r2, #4
 800a3ae:	0039      	movs	r1, r7
 800a3b0:	f00a fb7d 	bl	8014aae <memcpy>
									temp +=5;
 800a3b4:	9b05      	ldr	r3, [sp, #20]
 800a3b6:	3305      	adds	r3, #5
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	9305      	str	r3, [sp, #20]
 800a3bc:	e7e8      	b.n	800a390 <PxMessagingTask+0x370>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800a3be:	466b      	mov	r3, sp
 800a3c0:	8a9a      	ldrh	r2, [r3, #20]
 800a3c2:	210d      	movs	r1, #13
 800a3c4:	9804      	ldr	r0, [sp, #16]
 800a3c6:	f7ff fb11 	bl	80099ec <SendMessageToModule>
							break;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	4699      	mov	r9, r3
 800a3ce:	e693      	b.n	800a0f8 <PxMessagingTask+0xd8>
 800a3d0:	20000d1c 	.word	0x20000d1c
 800a3d4:	20000ed1 	.word	0x20000ed1
 800a3d8:	20006b74 	.word	0x20006b74
 800a3dc:	20000f0c 	.word	0x20000f0c
 800a3e0:	200017e6 	.word	0x200017e6
 800a3e4:	20000cc8 	.word	0x20000cc8
 800a3e8:	0801bd9c 	.word	0x0801bd9c
 800a3ec:	200010cc 	.word	0x200010cc
 800a3f0:	20001052 	.word	0x20001052
 800a3f4:	20000ed0 	.word	0x20000ed0
 800a3f8:	20007068 	.word	0x20007068
 800a3fc:	200010e8 	.word	0x200010e8
 800a400:	20000f44 	.word	0x20000f44
 800a404:	0801a668 	.word	0x0801a668
 800a408:	2000194c 	.word	0x2000194c
 800a40c:	20000a88 	.word	0x20000a88
 800a410:	0801a67c 	.word	0x0801a67c
 800a414:	20001054 	.word	0x20001054
 800a418:	20000058 	.word	0x20000058
 800a41c:	20000f14 	.word	0x20000f14
							temp =numOfParams / 5;
 800a420:	2105      	movs	r1, #5
 800a422:	9806      	ldr	r0, [sp, #24]
 800a424:	f7f5 fe94 	bl	8000150 <__udivsi3>
 800a428:	b2c2      	uxtb	r2, r0
 800a42a:	9205      	str	r2, [sp, #20]
							for(uint8_t k =0; k < temp; k++){
 800a42c:	2a00      	cmp	r2, #0
 800a42e:	d018      	beq.n	800a462 <PxMessagingTask+0x442>
 800a430:	4653      	mov	r3, sl
 800a432:	191f      	adds	r7, r3, r4
 800a434:	4bdb      	ldr	r3, [pc, #876]	; (800a7a4 <PxMessagingTask+0x784>)
 800a436:	18ff      	adds	r7, r7, r3
 800a438:	3305      	adds	r3, #5
 800a43a:	4453      	add	r3, sl
 800a43c:	191c      	adds	r4, r3, r4
 800a43e:	1e53      	subs	r3, r2, #1
 800a440:	b2db      	uxtb	r3, r3
 800a442:	009a      	lsls	r2, r3, #2
 800a444:	18d3      	adds	r3, r2, r3
 800a446:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a448:	4bd7      	ldr	r3, [pc, #860]	; (800a7a8 <PxMessagingTask+0x788>)
 800a44a:	4699      	mov	r9, r3
 800a44c:	7838      	ldrb	r0, [r7, #0]
 800a44e:	3801      	subs	r0, #1
 800a450:	0080      	lsls	r0, r0, #2
 800a452:	4448      	add	r0, r9
 800a454:	1c79      	adds	r1, r7, #1
 800a456:	2204      	movs	r2, #4
 800a458:	f00a fb29 	bl	8014aae <memcpy>
 800a45c:	3705      	adds	r7, #5
							for(uint8_t k =0; k < temp; k++){
 800a45e:	42bc      	cmp	r4, r7
 800a460:	d1f4      	bne.n	800a44c <PxMessagingTask+0x42c>
							responseStatus =BOS_OK;
 800a462:	4bd2      	ldr	r3, [pc, #840]	; (800a7ac <PxMessagingTask+0x78c>)
 800a464:	2200      	movs	r2, #0
 800a466:	701a      	strb	r2, [r3, #0]
							break;
 800a468:	2300      	movs	r3, #0
 800a46a:	4699      	mov	r9, r3
 800a46c:	e644      	b.n	800a0f8 <PxMessagingTask+0xd8>
 800a46e:	4653      	mov	r3, sl
 800a470:	18e3      	adds	r3, r4, r3
 800a472:	4acc      	ldr	r2, [pc, #816]	; (800a7a4 <PxMessagingTask+0x784>)
 800a474:	4699      	mov	r9, r3
 800a476:	4491      	add	r9, r2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a478:	2701      	movs	r7, #1
								if(p != port)
 800a47a:	9b08      	ldr	r3, [sp, #32]
 800a47c:	42bb      	cmp	r3, r7
 800a47e:	d006      	beq.n	800a48e <PxMessagingTask+0x46e>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a480:	0038      	movs	r0, r7
 800a482:	f004 f965 	bl	800e750 <GetUart>
 800a486:	464b      	mov	r3, r9
 800a488:	7819      	ldrb	r1, [r3, #0]
 800a48a:	f004 f9f7 	bl	800e87c <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a48e:	3701      	adds	r7, #1
 800a490:	b2ff      	uxtb	r7, r7
 800a492:	2301      	movs	r3, #1
 800a494:	469c      	mov	ip, r3
 800a496:	44e1      	add	r9, ip
 800a498:	2f06      	cmp	r7, #6
 800a49a:	d1ee      	bne.n	800a47a <PxMessagingTask+0x45a>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a49c:	9808      	ldr	r0, [sp, #32]
 800a49e:	f004 f957 	bl	800e750 <GetUart>
 800a4a2:	4bc0      	ldr	r3, [pc, #768]	; (800a7a4 <PxMessagingTask+0x784>)
 800a4a4:	199b      	adds	r3, r3, r6
 800a4a6:	191c      	adds	r4, r3, r4
 800a4a8:	7aa1      	ldrb	r1, [r4, #10]
 800a4aa:	f004 f9e7 	bl	800e87c <SwapUartPins>
							break;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	4699      	mov	r9, r3
 800a4b2:	e621      	b.n	800a0f8 <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a4b4:	0020      	movs	r0, r4
 800a4b6:	4bbb      	ldr	r3, [pc, #748]	; (800a7a4 <PxMessagingTask+0x784>)
 800a4b8:	199b      	adds	r3, r3, r6
 800a4ba:	5d1b      	ldrb	r3, [r3, r4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10a      	bne.n	800a4d6 <PxMessagingTask+0x4b6>
								myID =cMessage[port - 1][1 + shift];
 800a4c0:	2238      	movs	r2, #56	; 0x38
 800a4c2:	436a      	muls	r2, r5
 800a4c4:	4bb7      	ldr	r3, [pc, #732]	; (800a7a4 <PxMessagingTask+0x784>)
 800a4c6:	189b      	adds	r3, r3, r2
 800a4c8:	191c      	adds	r4, r3, r4
 800a4ca:	7862      	ldrb	r2, [r4, #1]
 800a4cc:	4bb8      	ldr	r3, [pc, #736]	; (800a7b0 <PxMessagingTask+0x790>)
 800a4ce:	701a      	strb	r2, [r3, #0]
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	4699      	mov	r9, r3
 800a4d4:	e610      	b.n	800a0f8 <PxMessagingTask+0xd8>
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	4691      	mov	r9, r2
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d000      	beq.n	800a4e0 <PxMessagingTask+0x4c0>
 800a4de:	e60b      	b.n	800a0f8 <PxMessagingTask+0xd8>
								messageParams[0] =0; /* change own ID */
 800a4e0:	49b4      	ldr	r1, [pc, #720]	; (800a7b4 <PxMessagingTask+0x794>)
 800a4e2:	700a      	strb	r2, [r1, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800a4e4:	3238      	adds	r2, #56	; 0x38
 800a4e6:	436a      	muls	r2, r5
 800a4e8:	4bae      	ldr	r3, [pc, #696]	; (800a7a4 <PxMessagingTask+0x784>)
 800a4ea:	189b      	adds	r3, r3, r2
 800a4ec:	181b      	adds	r3, r3, r0
 800a4ee:	785a      	ldrb	r2, [r3, #1]
 800a4f0:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800a4f2:	7898      	ldrb	r0, [r3, #2]
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	330d      	adds	r3, #13
 800a4fa:	464a      	mov	r2, r9
 800a4fc:	4649      	mov	r1, r9
 800a4fe:	f7fe ffef 	bl	80094e0 <SendMessageFromPort>
 800a502:	e5f9      	b.n	800a0f8 <PxMessagingTask+0xd8>
							if(longMessage){
 800a504:	4bac      	ldr	r3, [pc, #688]	; (800a7b8 <PxMessagingTask+0x798>)
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d012      	beq.n	800a532 <PxMessagingTask+0x512>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a50c:	4bab      	ldr	r3, [pc, #684]	; (800a7bc <PxMessagingTask+0x79c>)
 800a50e:	4699      	mov	r9, r3
 800a510:	881f      	ldrh	r7, [r3, #0]
 800a512:	48ab      	ldr	r0, [pc, #684]	; (800a7c0 <PxMessagingTask+0x7a0>)
 800a514:	1838      	adds	r0, r7, r0
 800a516:	4454      	add	r4, sl
 800a518:	49a2      	ldr	r1, [pc, #648]	; (800a7a4 <PxMessagingTask+0x784>)
 800a51a:	1861      	adds	r1, r4, r1
 800a51c:	9c06      	ldr	r4, [sp, #24]
 800a51e:	0022      	movs	r2, r4
 800a520:	f00a fac5 	bl	8014aae <memcpy>
								longMessageLastPtr +=numOfParams;
 800a524:	46a4      	mov	ip, r4
 800a526:	4467      	add	r7, ip
 800a528:	464b      	mov	r3, r9
 800a52a:	801f      	strh	r7, [r3, #0]
 800a52c:	2300      	movs	r3, #0
 800a52e:	4699      	mov	r9, r3
 800a530:	e5e2      	b.n	800a0f8 <PxMessagingTask+0xd8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a532:	4ba2      	ldr	r3, [pc, #648]	; (800a7bc <PxMessagingTask+0x79c>)
 800a534:	469b      	mov	fp, r3
 800a536:	881f      	ldrh	r7, [r3, #0]
 800a538:	4ba1      	ldr	r3, [pc, #644]	; (800a7c0 <PxMessagingTask+0x7a0>)
 800a53a:	4699      	mov	r9, r3
 800a53c:	18f8      	adds	r0, r7, r3
 800a53e:	4454      	add	r4, sl
 800a540:	4998      	ldr	r1, [pc, #608]	; (800a7a4 <PxMessagingTask+0x784>)
 800a542:	1861      	adds	r1, r4, r1
 800a544:	9c06      	ldr	r4, [sp, #24]
 800a546:	0022      	movs	r2, r4
 800a548:	f00a fab1 	bl	8014aae <memcpy>
								longMessageLastPtr +=numOfParams;
 800a54c:	193c      	adds	r4, r7, r4
 800a54e:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a550:	2116      	movs	r1, #22
 800a552:	0020      	movs	r0, r4
 800a554:	f7f5 fdfc 	bl	8000150 <__udivsi3>
 800a558:	4b9a      	ldr	r3, [pc, #616]	; (800a7c4 <PxMessagingTask+0x7a4>)
 800a55a:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800a55c:	0022      	movs	r2, r4
 800a55e:	4649      	mov	r1, r9
 800a560:	4899      	ldr	r0, [pc, #612]	; (800a7c8 <PxMessagingTask+0x7a8>)
 800a562:	f00a faa4 	bl	8014aae <memcpy>
								longMessageLastPtr =0;
 800a566:	2400      	movs	r4, #0
 800a568:	465b      	mov	r3, fp
 800a56a:	801c      	strh	r4, [r3, #0]
 800a56c:	46a1      	mov	r9, r4
 800a56e:	e5c3      	b.n	800a0f8 <PxMessagingTask+0xd8>
							for(p =1; p <= NumOfPorts; p++){
 800a570:	2401      	movs	r4, #1
							temp =0;
 800a572:	2300      	movs	r3, #0
 800a574:	9305      	str	r3, [sp, #20]
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a576:	2780      	movs	r7, #128	; 0x80
 800a578:	023f      	lsls	r7, r7, #8
 800a57a:	e003      	b.n	800a584 <PxMessagingTask+0x564>
							for(p =1; p <= NumOfPorts; p++){
 800a57c:	3401      	adds	r4, #1
 800a57e:	b2e4      	uxtb	r4, r4
 800a580:	2c06      	cmp	r4, #6
 800a582:	d00c      	beq.n	800a59e <PxMessagingTask+0x57e>
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a584:	0020      	movs	r0, r4
 800a586:	f004 f8e3 	bl	800e750 <GetUart>
 800a58a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a58c:	42bb      	cmp	r3, r7
 800a58e:	d1f5      	bne.n	800a57c <PxMessagingTask+0x55c>
									messageParams[temp++] =p;
 800a590:	9a05      	ldr	r2, [sp, #20]
 800a592:	1c53      	adds	r3, r2, #1
 800a594:	4987      	ldr	r1, [pc, #540]	; (800a7b4 <PxMessagingTask+0x794>)
 800a596:	548c      	strb	r4, [r1, r2]
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	9305      	str	r3, [sp, #20]
 800a59c:	e7ee      	b.n	800a57c <PxMessagingTask+0x55c>
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a59e:	466b      	mov	r3, sp
 800a5a0:	8a9a      	ldrh	r2, [r3, #20]
 800a5a2:	2114      	movs	r1, #20
 800a5a4:	9804      	ldr	r0, [sp, #16]
 800a5a6:	f7ff fa21 	bl	80099ec <SendMessageToModule>
							break;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	4699      	mov	r9, r3
 800a5ae:	e5a3      	b.n	800a0f8 <PxMessagingTask+0xd8>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a5b0:	4b7c      	ldr	r3, [pc, #496]	; (800a7a4 <PxMessagingTask+0x784>)
 800a5b2:	199b      	adds	r3, r3, r6
 800a5b4:	5d1a      	ldrb	r2, [r3, r4]
 800a5b6:	0612      	lsls	r2, r2, #24
 800a5b8:	191b      	adds	r3, r3, r4
 800a5ba:	78d9      	ldrb	r1, [r3, #3]
 800a5bc:	1852      	adds	r2, r2, r1
 800a5be:	7859      	ldrb	r1, [r3, #1]
 800a5c0:	0409      	lsls	r1, r1, #16
 800a5c2:	1852      	adds	r2, r2, r1
 800a5c4:	7899      	ldrb	r1, [r3, #2]
 800a5c6:	0209      	lsls	r1, r1, #8
 800a5c8:	1852      	adds	r2, r2, r1
 800a5ca:	920b      	str	r2, [sp, #44]	; 0x2c
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a5cc:	791b      	ldrb	r3, [r3, #4]
 800a5ce:	2bff      	cmp	r3, #255	; 0xff
 800a5d0:	d01c      	beq.n	800a60c <PxMessagingTask+0x5ec>
								for(p =0; p < numOfParams; p++){
 800a5d2:	9b06      	ldr	r3, [sp, #24]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d016      	beq.n	800a606 <PxMessagingTask+0x5e6>
 800a5d8:	4653      	mov	r3, sl
 800a5da:	1d1f      	adds	r7, r3, #4
 800a5dc:	193f      	adds	r7, r7, r4
 800a5de:	4b71      	ldr	r3, [pc, #452]	; (800a7a4 <PxMessagingTask+0x784>)
 800a5e0:	18ff      	adds	r7, r7, r3
 800a5e2:	3305      	adds	r3, #5
 800a5e4:	4453      	add	r3, sl
 800a5e6:	191c      	adds	r4, r3, r4
 800a5e8:	9b06      	ldr	r3, [sp, #24]
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	18e4      	adds	r4, r4, r3
									temp =cMessage[port - 1][4 + shift + p];
 800a5f0:	783b      	ldrb	r3, [r7, #0]
 800a5f2:	9305      	str	r3, [sp, #20]
									if(temp > 0 && temp <= NumOfPorts){
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	2b04      	cmp	r3, #4
 800a5f8:	d915      	bls.n	800a626 <PxMessagingTask+0x606>
 800a5fa:	3701      	adds	r7, #1
								for(p =0; p < numOfParams; p++){
 800a5fc:	42a7      	cmp	r7, r4
 800a5fe:	d1f7      	bne.n	800a5f0 <PxMessagingTask+0x5d0>
 800a600:	2300      	movs	r3, #0
 800a602:	4699      	mov	r9, r3
 800a604:	e578      	b.n	800a0f8 <PxMessagingTask+0xd8>
							temp =temp32 =0;
 800a606:	9305      	str	r3, [sp, #20]
								for(p =0; p < numOfParams; p++){
 800a608:	4699      	mov	r9, r3
 800a60a:	e575      	b.n	800a0f8 <PxMessagingTask+0xd8>
								for(p =1; p <= NumOfPorts; p++){
 800a60c:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 800a60e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a610:	0020      	movs	r0, r4
 800a612:	f004 f929 	bl	800e868 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800a616:	3401      	adds	r4, #1
 800a618:	b2e4      	uxtb	r4, r4
 800a61a:	2c06      	cmp	r4, #6
 800a61c:	d1f7      	bne.n	800a60e <PxMessagingTask+0x5ee>
							temp =temp32 =0;
 800a61e:	2300      	movs	r3, #0
 800a620:	9305      	str	r3, [sp, #20]
 800a622:	4699      	mov	r9, r3
 800a624:	e568      	b.n	800a0f8 <PxMessagingTask+0xd8>
										UpdateBaudrate(temp,temp32);
 800a626:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a628:	9805      	ldr	r0, [sp, #20]
 800a62a:	f004 f91d 	bl	800e868 <UpdateBaudrate>
 800a62e:	e7e4      	b.n	800a5fa <PxMessagingTask+0x5da>
							SaveToRO();
 800a630:	f001 fa72 	bl	800bb18 <SaveToRO>
							SaveEEportsDir();
 800a634:	f7f9 f832 	bl	800369c <SaveEEportsDir>
							indMode =IND_PING;
 800a638:	4b64      	ldr	r3, [pc, #400]	; (800a7cc <PxMessagingTask+0x7ac>)
 800a63a:	2201      	movs	r2, #1
 800a63c:	701a      	strb	r2, [r3, #0]
							break;
 800a63e:	2300      	movs	r3, #0
 800a640:	4699      	mov	r9, r3
 800a642:	e559      	b.n	800a0f8 <PxMessagingTask+0xd8>
							ClearEEportsDir();
 800a644:	f7f9 f920 	bl	8003888 <ClearEEportsDir>
							ClearROtopology();
 800a648:	f001 fb6e 	bl	800bd28 <ClearROtopology>
							osDelay(100);
 800a64c:	2064      	movs	r0, #100	; 0x64
 800a64e:	f004 f9ca 	bl	800e9e6 <osDelay>
							indMode =IND_TOPOLOGY;
 800a652:	4b5e      	ldr	r3, [pc, #376]	; (800a7cc <PxMessagingTask+0x7ac>)
 800a654:	2202      	movs	r2, #2
 800a656:	701a      	strb	r2, [r3, #0]
							break;
 800a658:	2300      	movs	r3, #0
 800a65a:	4699      	mov	r9, r3
 800a65c:	e54c      	b.n	800a0f8 <PxMessagingTask+0xd8>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a65e:	f004 fad7 	bl	800ec10 <FreeRTOS_CLIGetOutputBuffer>
 800a662:	900b      	str	r0, [sp, #44]	; 0x2c
							if(dst == BOS_BROADCAST)
 800a664:	465b      	mov	r3, fp
 800a666:	2bff      	cmp	r3, #255	; 0xff
 800a668:	d028      	beq.n	800a6bc <PxMessagingTask+0x69c>
							else if(dst == BOS_MULTICAST)
 800a66a:	2bfe      	cmp	r3, #254	; 0xfe
 800a66c:	d02f      	beq.n	800a6ce <PxMessagingTask+0x6ae>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a66e:	4454      	add	r4, sl
 800a670:	494c      	ldr	r1, [pc, #304]	; (800a7a4 <PxMessagingTask+0x784>)
 800a672:	1861      	adds	r1, r4, r1
 800a674:	9a06      	ldr	r2, [sp, #24]
 800a676:	4856      	ldr	r0, [pc, #344]	; (800a7d0 <PxMessagingTask+0x7b0>)
 800a678:	f00a fa19 	bl	8014aae <memcpy>
								temp =PcPort;
 800a67c:	4c55      	ldr	r4, [pc, #340]	; (800a7d4 <PxMessagingTask+0x7b4>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a67e:	4b54      	ldr	r3, [pc, #336]	; (800a7d0 <PxMessagingTask+0x7b0>)
 800a680:	469b      	mov	fp, r3
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800a682:	4b55      	ldr	r3, [pc, #340]	; (800a7d8 <PxMessagingTask+0x7b8>)
 800a684:	4699      	mov	r9, r3
								temp =PcPort;
 800a686:	7823      	ldrb	r3, [r4, #0]
 800a688:	9305      	str	r3, [sp, #20]
								PcPort =port;
 800a68a:	9a08      	ldr	r2, [sp, #32]
 800a68c:	7022      	strb	r2, [r4, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a68e:	2299      	movs	r2, #153	; 0x99
 800a690:	0092      	lsls	r2, r2, #2
 800a692:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a694:	4658      	mov	r0, fp
 800a696:	f004 fa3d 	bl	800eb14 <FreeRTOS_CLIProcessCommand>
 800a69a:	0007      	movs	r7, r0
								PcPort =temp;
 800a69c:	9b05      	ldr	r3, [sp, #20]
 800a69e:	7023      	strb	r3, [r4, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800a6a0:	464b      	mov	r3, r9
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	2b60      	cmp	r3, #96	; 0x60
 800a6a6:	d01d      	beq.n	800a6e4 <PxMessagingTask+0x6c4>
							} while(xReturned != pdFALSE);
 800a6a8:	2f00      	cmp	r7, #0
 800a6aa:	d1ec      	bne.n	800a686 <PxMessagingTask+0x666>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a6ac:	2232      	movs	r2, #50	; 0x32
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	4847      	ldr	r0, [pc, #284]	; (800a7d0 <PxMessagingTask+0x7b0>)
 800a6b2:	f00a fa05 	bl	8014ac0 <memset>
							break;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	4699      	mov	r9, r3
 800a6ba:	e51d      	b.n	800a0f8 <PxMessagingTask+0xd8>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800a6bc:	9a06      	ldr	r2, [sp, #24]
 800a6be:	3a01      	subs	r2, #1
 800a6c0:	4454      	add	r4, sl
 800a6c2:	4938      	ldr	r1, [pc, #224]	; (800a7a4 <PxMessagingTask+0x784>)
 800a6c4:	1861      	adds	r1, r4, r1
 800a6c6:	4842      	ldr	r0, [pc, #264]	; (800a7d0 <PxMessagingTask+0x7b0>)
 800a6c8:	f00a f9f1 	bl	8014aae <memcpy>
 800a6cc:	e7d6      	b.n	800a67c <PxMessagingTask+0x65c>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a6ce:	9b06      	ldr	r3, [sp, #24]
 800a6d0:	9a05      	ldr	r2, [sp, #20]
 800a6d2:	1a9a      	subs	r2, r3, r2
 800a6d4:	3a02      	subs	r2, #2
 800a6d6:	4454      	add	r4, sl
 800a6d8:	4932      	ldr	r1, [pc, #200]	; (800a7a4 <PxMessagingTask+0x784>)
 800a6da:	1861      	adds	r1, r4, r1
 800a6dc:	483c      	ldr	r0, [pc, #240]	; (800a7d0 <PxMessagingTask+0x7b0>)
 800a6de:	f00a f9e6 	bl	8014aae <memcpy>
 800a6e2:	e7cb      	b.n	800a67c <PxMessagingTask+0x65c>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a6e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a6e6:	f7f5 fd17 	bl	8000118 <strlen>
 800a6ea:	0002      	movs	r2, r0
 800a6ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6ee:	4831      	ldr	r0, [pc, #196]	; (800a7b4 <PxMessagingTask+0x794>)
 800a6f0:	f00a f9dd 	bl	8014aae <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a6f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a6f6:	f7f5 fd0f 	bl	8000118 <strlen>
 800a6fa:	b282      	uxth	r2, r0
 800a6fc:	2118      	movs	r1, #24
 800a6fe:	9804      	ldr	r0, [sp, #16]
 800a700:	f7ff f974 	bl	80099ec <SendMessageToModule>
									osDelay(10);
 800a704:	200a      	movs	r0, #10
 800a706:	f004 f96e 	bl	800e9e6 <osDelay>
 800a70a:	e7cd      	b.n	800a6a8 <PxMessagingTask+0x688>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a70c:	f004 fa80 	bl	800ec10 <FreeRTOS_CLIGetOutputBuffer>
 800a710:	0007      	movs	r7, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a712:	f7f5 fd01 	bl	8000118 <strlen>
 800a716:	0002      	movs	r2, r0
 800a718:	2100      	movs	r1, #0
 800a71a:	0038      	movs	r0, r7
 800a71c:	f00a f9d0 	bl	8014ac0 <memset>
							if(longMessage){
 800a720:	4b25      	ldr	r3, [pc, #148]	; (800a7b8 <PxMessagingTask+0x798>)
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d013      	beq.n	800a750 <PxMessagingTask+0x730>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a728:	4b24      	ldr	r3, [pc, #144]	; (800a7bc <PxMessagingTask+0x79c>)
 800a72a:	4699      	mov	r9, r3
 800a72c:	8818      	ldrh	r0, [r3, #0]
 800a72e:	1838      	adds	r0, r7, r0
 800a730:	4454      	add	r4, sl
 800a732:	491c      	ldr	r1, [pc, #112]	; (800a7a4 <PxMessagingTask+0x784>)
 800a734:	1861      	adds	r1, r4, r1
 800a736:	9c06      	ldr	r4, [sp, #24]
 800a738:	0022      	movs	r2, r4
 800a73a:	f00a f9b8 	bl	8014aae <memcpy>
								longMessageLastPtr +=numOfParams;
 800a73e:	464b      	mov	r3, r9
 800a740:	881a      	ldrh	r2, [r3, #0]
 800a742:	46a4      	mov	ip, r4
 800a744:	4462      	add	r2, ip
 800a746:	464b      	mov	r3, r9
 800a748:	801a      	strh	r2, [r3, #0]
 800a74a:	2300      	movs	r3, #0
 800a74c:	4699      	mov	r9, r3
 800a74e:	e4d3      	b.n	800a0f8 <PxMessagingTask+0xd8>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a750:	4b1a      	ldr	r3, [pc, #104]	; (800a7bc <PxMessagingTask+0x79c>)
 800a752:	4699      	mov	r9, r3
 800a754:	8818      	ldrh	r0, [r3, #0]
 800a756:	1838      	adds	r0, r7, r0
 800a758:	4454      	add	r4, sl
 800a75a:	4912      	ldr	r1, [pc, #72]	; (800a7a4 <PxMessagingTask+0x784>)
 800a75c:	1861      	adds	r1, r4, r1
 800a75e:	9a06      	ldr	r2, [sp, #24]
 800a760:	f00a f9a5 	bl	8014aae <memcpy>
								longMessageLastPtr =0;
 800a764:	2400      	movs	r4, #0
 800a766:	464b      	mov	r3, r9
 800a768:	801c      	strh	r4, [r3, #0]
								responseStatus =BOS_OK;
 800a76a:	4b10      	ldr	r3, [pc, #64]	; (800a7ac <PxMessagingTask+0x78c>)
 800a76c:	701c      	strb	r4, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800a76e:	0023      	movs	r3, r4
 800a770:	0022      	movs	r2, r4
 800a772:	0021      	movs	r1, r4
 800a774:	4819      	ldr	r0, [pc, #100]	; (800a7dc <PxMessagingTask+0x7bc>)
 800a776:	6800      	ldr	r0, [r0, #0]
 800a778:	f005 fd54 	bl	8010224 <xTaskGenericNotify>
 800a77c:	46a1      	mov	r9, r4
 800a77e:	e4bb      	b.n	800a0f8 <PxMessagingTask+0xd8>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a780:	4b17      	ldr	r3, [pc, #92]	; (800a7e0 <PxMessagingTask+0x7c0>)
 800a782:	4a18      	ldr	r2, [pc, #96]	; (800a7e4 <PxMessagingTask+0x7c4>)
 800a784:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a786:	4b11      	ldr	r3, [pc, #68]	; (800a7cc <PxMessagingTask+0x7ac>)
 800a788:	2201      	movs	r2, #1
 800a78a:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a78c:	200a      	movs	r0, #10
 800a78e:	f004 f92a 	bl	800e9e6 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	4b14      	ldr	r3, [pc, #80]	; (800a7e8 <PxMessagingTask+0x7c8>)
 800a798:	4a14      	ldr	r2, [pc, #80]	; (800a7ec <PxMessagingTask+0x7cc>)
 800a79a:	60da      	str	r2, [r3, #12]
 800a79c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a7a0:	46c0      	nop			; (mov r8, r8)
 800a7a2:	e7fd      	b.n	800a7a0 <PxMessagingTask+0x780>
 800a7a4:	20000d1c 	.word	0x20000d1c
 800a7a8:	20001068 	.word	0x20001068
 800a7ac:	200010e8 	.word	0x200010e8
 800a7b0:	20001052 	.word	0x20001052
 800a7b4:	20000f14 	.word	0x20000f14
 800a7b8:	20000ed1 	.word	0x20000ed1
 800a7bc:	20000ed2 	.word	0x20000ed2
 800a7c0:	2000181c 	.word	0x2000181c
 800a7c4:	20000024 	.word	0x20000024
 800a7c8:	20000a8c 	.word	0x20000a8c
 800a7cc:	20000ed0 	.word	0x20000ed0
 800a7d0:	200017e8 	.word	0x200017e8
 800a7d4:	20000a88 	.word	0x20000a88
 800a7d8:	20006b74 	.word	0x20006b74
 800a7dc:	2000170c 	.word	0x2000170c
 800a7e0:	20007ff0 	.word	0x20007ff0
 800a7e4:	deadbeef 	.word	0xdeadbeef
 800a7e8:	e000ed00 	.word	0xe000ed00
 800a7ec:	05fa0004 	.word	0x05fa0004
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a7f0:	4fec      	ldr	r7, [pc, #944]	; (800aba4 <PxMessagingTask+0xb84>)
 800a7f2:	19bf      	adds	r7, r7, r6
 800a7f4:	5d38      	ldrb	r0, [r7, r4]
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	3319      	adds	r3, #25
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2100      	movs	r1, #0
 800a800:	f7fe fe6e 	bl	80094e0 <SendMessageFromPort>
							osDelay(100);
 800a804:	2064      	movs	r0, #100	; 0x64
 800a806:	f004 f8ee 	bl	800e9e6 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a80a:	5d3b      	ldrb	r3, [r7, r4]
 800a80c:	4ae6      	ldr	r2, [pc, #920]	; (800aba8 <PxMessagingTask+0xb88>)
 800a80e:	7811      	ldrb	r1, [r2, #0]
 800a810:	9a08      	ldr	r2, [sp, #32]
 800a812:	9804      	ldr	r0, [sp, #16]
 800a814:	f7f9 faf2 	bl	8003dfc <remoteBootloaderUpdate>
							break;
 800a818:	2300      	movs	r3, #0
 800a81a:	4699      	mov	r9, r3
 800a81c:	e46c      	b.n	800a0f8 <PxMessagingTask+0xd8>
							temp =cMessage[port - 1][11 + shift];
 800a81e:	46a3      	mov	fp, r4
 800a820:	230b      	movs	r3, #11
 800a822:	4699      	mov	r9, r3
 800a824:	44a1      	add	r9, r4
 800a826:	4bdf      	ldr	r3, [pc, #892]	; (800aba4 <PxMessagingTask+0xb84>)
 800a828:	199b      	adds	r3, r3, r6
 800a82a:	464a      	mov	r2, r9
 800a82c:	5c9b      	ldrb	r3, [r3, r2]
 800a82e:	930b      	str	r3, [sp, #44]	; 0x2c
							if(numOfParams == 15)
 800a830:	9b06      	ldr	r3, [sp, #24]
 800a832:	2b0f      	cmp	r3, #15
 800a834:	d100      	bne.n	800a838 <PxMessagingTask+0x818>
 800a836:	e088      	b.n	800a94a <PxMessagingTask+0x92a>
							if(numOfParams == 17)
 800a838:	9b06      	ldr	r3, [sp, #24]
 800a83a:	2b11      	cmp	r3, #17
 800a83c:	d100      	bne.n	800a840 <PxMessagingTask+0x820>
 800a83e:	e08c      	b.n	800a95a <PxMessagingTask+0x93a>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a840:	465b      	mov	r3, fp
 800a842:	1c59      	adds	r1, r3, #1
 800a844:	910c      	str	r1, [sp, #48]	; 0x30
 800a846:	1c98      	adds	r0, r3, #2
 800a848:	900d      	str	r0, [sp, #52]	; 0x34
 800a84a:	1cda      	adds	r2, r3, #3
 800a84c:	920e      	str	r2, [sp, #56]	; 0x38
 800a84e:	4bd5      	ldr	r3, [pc, #852]	; (800aba4 <PxMessagingTask+0xb84>)
 800a850:	199b      	adds	r3, r3, r6
 800a852:	465c      	mov	r4, fp
 800a854:	5d1c      	ldrb	r4, [r3, r4]
 800a856:	0624      	lsls	r4, r4, #24
 800a858:	5c9a      	ldrb	r2, [r3, r2]
 800a85a:	18a4      	adds	r4, r4, r2
 800a85c:	5c5a      	ldrb	r2, [r3, r1]
 800a85e:	0412      	lsls	r2, r2, #16
 800a860:	18a4      	adds	r4, r4, r2
 800a862:	5c1a      	ldrb	r2, [r3, r0]
 800a864:	0212      	lsls	r2, r2, #8
 800a866:	18a4      	adds	r4, r4, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a868:	465a      	mov	r2, fp
 800a86a:	3204      	adds	r2, #4
 800a86c:	920f      	str	r2, [sp, #60]	; 0x3c
 800a86e:	4659      	mov	r1, fp
 800a870:	3105      	adds	r1, #5
 800a872:	9110      	str	r1, [sp, #64]	; 0x40
 800a874:	4658      	mov	r0, fp
 800a876:	3006      	adds	r0, #6
 800a878:	9011      	str	r0, [sp, #68]	; 0x44
 800a87a:	465f      	mov	r7, fp
 800a87c:	3707      	adds	r7, #7
 800a87e:	9705      	str	r7, [sp, #20]
 800a880:	5c9f      	ldrb	r7, [r3, r2]
 800a882:	063f      	lsls	r7, r7, #24
 800a884:	5c5a      	ldrb	r2, [r3, r1]
 800a886:	0412      	lsls	r2, r2, #16
 800a888:	18bf      	adds	r7, r7, r2
 800a88a:	9a05      	ldr	r2, [sp, #20]
 800a88c:	5c9a      	ldrb	r2, [r3, r2]
 800a88e:	18bf      	adds	r7, r7, r2
 800a890:	5c1b      	ldrb	r3, [r3, r0]
 800a892:	021b      	lsls	r3, r3, #8
 800a894:	18ff      	adds	r7, r7, r3
							if(temp == false){
 800a896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d166      	bne.n	800a96a <PxMessagingTask+0x94a>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800a89c:	4bc1      	ldr	r3, [pc, #772]	; (800aba4 <PxMessagingTask+0xb84>)
 800a89e:	199b      	adds	r3, r3, r6
 800a8a0:	445b      	add	r3, fp
 800a8a2:	7a5b      	ldrb	r3, [r3, #9]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d012      	beq.n	800a8ce <PxMessagingTask+0x8ae>
 800a8a8:	2138      	movs	r1, #56	; 0x38
 800a8aa:	4369      	muls	r1, r5
 800a8ac:	4abd      	ldr	r2, [pc, #756]	; (800aba4 <PxMessagingTask+0xb84>)
 800a8ae:	1852      	adds	r2, r2, r1
 800a8b0:	445a      	add	r2, fp
 800a8b2:	7a91      	ldrb	r1, [r2, #10]
 800a8b4:	2900      	cmp	r1, #0
 800a8b6:	d00a      	beq.n	800a8ce <PxMessagingTask+0x8ae>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800a8b8:	2038      	movs	r0, #56	; 0x38
 800a8ba:	4368      	muls	r0, r5
 800a8bc:	4ab9      	ldr	r2, [pc, #740]	; (800aba4 <PxMessagingTask+0xb84>)
 800a8be:	1812      	adds	r2, r2, r0
 800a8c0:	445a      	add	r2, fp
 800a8c2:	7a10      	ldrb	r0, [r2, #8]
 800a8c4:	9100      	str	r1, [sp, #0]
 800a8c6:	003a      	movs	r2, r7
 800a8c8:	0021      	movs	r1, r4
 800a8ca:	f7fe fcf1 	bl	80092b0 <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800a8ce:	4bb5      	ldr	r3, [pc, #724]	; (800aba4 <PxMessagingTask+0xb84>)
 800a8d0:	199b      	adds	r3, r3, r6
 800a8d2:	464a      	mov	r2, r9
 800a8d4:	5c9b      	ldrb	r3, [r3, r2]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d012      	beq.n	800a900 <PxMessagingTask+0x8e0>
 800a8da:	2138      	movs	r1, #56	; 0x38
 800a8dc:	4369      	muls	r1, r5
 800a8de:	4ab1      	ldr	r2, [pc, #708]	; (800aba4 <PxMessagingTask+0xb84>)
 800a8e0:	1852      	adds	r2, r2, r1
 800a8e2:	445a      	add	r2, fp
 800a8e4:	7b11      	ldrb	r1, [r2, #12]
 800a8e6:	2900      	cmp	r1, #0
 800a8e8:	d00a      	beq.n	800a900 <PxMessagingTask+0x8e0>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800a8ea:	2038      	movs	r0, #56	; 0x38
 800a8ec:	4368      	muls	r0, r5
 800a8ee:	4aad      	ldr	r2, [pc, #692]	; (800aba4 <PxMessagingTask+0xb84>)
 800a8f0:	1812      	adds	r2, r2, r0
 800a8f2:	445a      	add	r2, fp
 800a8f4:	7a10      	ldrb	r0, [r2, #8]
 800a8f6:	9100      	str	r1, [sp, #0]
 800a8f8:	003a      	movs	r2, r7
 800a8fa:	0021      	movs	r1, r4
 800a8fc:	f7fe fcd8 	bl	80092b0 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800a900:	4ba8      	ldr	r3, [pc, #672]	; (800aba4 <PxMessagingTask+0xb84>)
 800a902:	199b      	adds	r3, r3, r6
 800a904:	445b      	add	r3, fp
 800a906:	7b5b      	ldrb	r3, [r3, #13]
 800a908:	9305      	str	r3, [sp, #20]
 800a90a:	2200      	movs	r2, #0
 800a90c:	4691      	mov	r9, r2
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <PxMessagingTask+0x8f6>
 800a912:	f7ff fbf1 	bl	800a0f8 <PxMessagingTask+0xd8>
 800a916:	3238      	adds	r2, #56	; 0x38
 800a918:	436a      	muls	r2, r5
 800a91a:	4ba2      	ldr	r3, [pc, #648]	; (800aba4 <PxMessagingTask+0xb84>)
 800a91c:	189b      	adds	r3, r3, r2
 800a91e:	445b      	add	r3, fp
 800a920:	7b9a      	ldrb	r2, [r3, #14]
 800a922:	454a      	cmp	r2, r9
 800a924:	d101      	bne.n	800a92a <PxMessagingTask+0x90a>
 800a926:	f000 fec3 	bl	800b6b0 <PxMessagingTask+0x1690>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800a92a:	2138      	movs	r1, #56	; 0x38
 800a92c:	4369      	muls	r1, r5
 800a92e:	4b9d      	ldr	r3, [pc, #628]	; (800aba4 <PxMessagingTask+0xb84>)
 800a930:	185b      	adds	r3, r3, r1
 800a932:	445b      	add	r3, fp
 800a934:	7a18      	ldrb	r0, [r3, #8]
 800a936:	9200      	str	r2, [sp, #0]
 800a938:	9b05      	ldr	r3, [sp, #20]
 800a93a:	003a      	movs	r2, r7
 800a93c:	0021      	movs	r1, r4
 800a93e:	f7fe fcb7 	bl	80092b0 <SetupDMAStreams>
 800a942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a944:	9305      	str	r3, [sp, #20]
 800a946:	f7ff fbd7 	bl	800a0f8 <PxMessagingTask+0xd8>
								temp =cMessage[port - 1][13 + shift];
 800a94a:	2238      	movs	r2, #56	; 0x38
 800a94c:	436a      	muls	r2, r5
 800a94e:	4b95      	ldr	r3, [pc, #596]	; (800aba4 <PxMessagingTask+0xb84>)
 800a950:	189b      	adds	r3, r3, r2
 800a952:	191c      	adds	r4, r3, r4
 800a954:	7b63      	ldrb	r3, [r4, #13]
 800a956:	930b      	str	r3, [sp, #44]	; 0x2c
 800a958:	e772      	b.n	800a840 <PxMessagingTask+0x820>
								temp =cMessage[port - 1][15 + shift];
 800a95a:	2238      	movs	r2, #56	; 0x38
 800a95c:	436a      	muls	r2, r5
 800a95e:	4b91      	ldr	r3, [pc, #580]	; (800aba4 <PxMessagingTask+0xb84>)
 800a960:	189b      	adds	r3, r3, r2
 800a962:	445b      	add	r3, fp
 800a964:	7bdb      	ldrb	r3, [r3, #15]
 800a966:	930b      	str	r3, [sp, #44]	; 0x2c
 800a968:	e76a      	b.n	800a840 <PxMessagingTask+0x820>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800a96a:	2338      	movs	r3, #56	; 0x38
 800a96c:	436b      	muls	r3, r5
 800a96e:	4c8d      	ldr	r4, [pc, #564]	; (800aba4 <PxMessagingTask+0xb84>)
 800a970:	18e4      	adds	r4, r4, r3
 800a972:	465b      	mov	r3, fp
 800a974:	18e6      	adds	r6, r4, r3
 800a976:	7a31      	ldrb	r1, [r6, #8]
 800a978:	20e4      	movs	r0, #228	; 0xe4
 800a97a:	f7fd f889 	bl	8007a90 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800a97e:	465b      	mov	r3, fp
 800a980:	5ce3      	ldrb	r3, [r4, r3]
 800a982:	021b      	lsls	r3, r3, #8
 800a984:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a986:	5ca1      	ldrb	r1, [r4, r2]
 800a988:	18c9      	adds	r1, r1, r3
 800a98a:	b289      	uxth	r1, r1
 800a98c:	20e5      	movs	r0, #229	; 0xe5
 800a98e:	f7fd f87f 	bl	8007a90 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800a992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a994:	5ce3      	ldrb	r3, [r4, r3]
 800a996:	021b      	lsls	r3, r3, #8
 800a998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a99a:	5ca1      	ldrb	r1, [r4, r2]
 800a99c:	18c9      	adds	r1, r1, r3
 800a99e:	b289      	uxth	r1, r1
 800a9a0:	20e6      	movs	r0, #230	; 0xe6
 800a9a2:	f7fd f875 	bl	8007a90 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800a9a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9a8:	5ce3      	ldrb	r3, [r4, r3]
 800a9aa:	021b      	lsls	r3, r3, #8
 800a9ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9ae:	5ca1      	ldrb	r1, [r4, r2]
 800a9b0:	18c9      	adds	r1, r1, r3
 800a9b2:	b289      	uxth	r1, r1
 800a9b4:	20e7      	movs	r0, #231	; 0xe7
 800a9b6:	f7fd f86b 	bl	8007a90 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800a9ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9bc:	5ce3      	ldrb	r3, [r4, r3]
 800a9be:	021b      	lsls	r3, r3, #8
 800a9c0:	9a05      	ldr	r2, [sp, #20]
 800a9c2:	5ca1      	ldrb	r1, [r4, r2]
 800a9c4:	18c9      	adds	r1, r1, r3
 800a9c6:	b289      	uxth	r1, r1
 800a9c8:	20e8      	movs	r0, #232	; 0xe8
 800a9ca:	f7fd f861 	bl	8007a90 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800a9ce:	7a73      	ldrb	r3, [r6, #9]
 800a9d0:	021b      	lsls	r3, r3, #8
 800a9d2:	7ab1      	ldrb	r1, [r6, #10]
 800a9d4:	18c9      	adds	r1, r1, r3
 800a9d6:	b289      	uxth	r1, r1
 800a9d8:	20e9      	movs	r0, #233	; 0xe9
 800a9da:	f7fd f859 	bl	8007a90 <EE_WriteVariable>
								if(numOfParams == 19)
 800a9de:	9b06      	ldr	r3, [sp, #24]
 800a9e0:	2b13      	cmp	r3, #19
 800a9e2:	d116      	bne.n	800aa12 <PxMessagingTask+0x9f2>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800a9e4:	3325      	adds	r3, #37	; 0x25
 800a9e6:	436b      	muls	r3, r5
 800a9e8:	4d6e      	ldr	r5, [pc, #440]	; (800aba4 <PxMessagingTask+0xb84>)
 800a9ea:	18ed      	adds	r5, r5, r3
 800a9ec:	464b      	mov	r3, r9
 800a9ee:	5ceb      	ldrb	r3, [r5, r3]
 800a9f0:	021b      	lsls	r3, r3, #8
 800a9f2:	445d      	add	r5, fp
 800a9f4:	7b29      	ldrb	r1, [r5, #12]
 800a9f6:	18c9      	adds	r1, r1, r3
 800a9f8:	b289      	uxth	r1, r1
 800a9fa:	20ea      	movs	r0, #234	; 0xea
 800a9fc:	f7fd f848 	bl	8007a90 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	4b69      	ldr	r3, [pc, #420]	; (800abac <PxMessagingTask+0xb8c>)
 800aa06:	4a6a      	ldr	r2, [pc, #424]	; (800abb0 <PxMessagingTask+0xb90>)
 800aa08:	60da      	str	r2, [r3, #12]
 800aa0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800aa0e:	46c0      	nop			; (mov r8, r8)
 800aa10:	e7fd      	b.n	800aa0e <PxMessagingTask+0x9ee>
								if(numOfParams == 21)
 800aa12:	9b06      	ldr	r3, [sp, #24]
 800aa14:	2b15      	cmp	r3, #21
 800aa16:	d1f3      	bne.n	800aa00 <PxMessagingTask+0x9e0>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800aa18:	3323      	adds	r3, #35	; 0x23
 800aa1a:	435d      	muls	r5, r3
 800aa1c:	4b61      	ldr	r3, [pc, #388]	; (800aba4 <PxMessagingTask+0xb84>)
 800aa1e:	195b      	adds	r3, r3, r5
 800aa20:	445b      	add	r3, fp
 800aa22:	7b5a      	ldrb	r2, [r3, #13]
 800aa24:	0212      	lsls	r2, r2, #8
 800aa26:	7b99      	ldrb	r1, [r3, #14]
 800aa28:	1889      	adds	r1, r1, r2
 800aa2a:	b289      	uxth	r1, r1
 800aa2c:	20eb      	movs	r0, #235	; 0xeb
 800aa2e:	f7fd f82f 	bl	8007a90 <EE_WriteVariable>
 800aa32:	e7e5      	b.n	800aa00 <PxMessagingTask+0x9e0>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800aa34:	4f5b      	ldr	r7, [pc, #364]	; (800aba4 <PxMessagingTask+0xb84>)
 800aa36:	19bf      	adds	r7, r7, r6
 800aa38:	1939      	adds	r1, r7, r4
 800aa3a:	7a8b      	ldrb	r3, [r1, #10]
 800aa3c:	9306      	str	r3, [sp, #24]
 800aa3e:	7aca      	ldrb	r2, [r1, #11]
 800aa40:	4859      	ldr	r0, [pc, #356]	; (800aba8 <PxMessagingTask+0xb88>)
 800aa42:	7803      	ldrb	r3, [r0, #0]
 800aa44:	4699      	mov	r9, r3
 800aa46:	7a4b      	ldrb	r3, [r1, #9]
 800aa48:	469b      	mov	fp, r3
 800aa4a:	7b08      	ldrb	r0, [r1, #12]
 800aa4c:	0003      	movs	r3, r0
 800aa4e:	1e58      	subs	r0, r3, #1
 800aa50:	4183      	sbcs	r3, r0
 800aa52:	9303      	str	r3, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800aa54:	7908      	ldrb	r0, [r1, #4]
 800aa56:	0603      	lsls	r3, r0, #24
 800aa58:	469c      	mov	ip, r3
 800aa5a:	7948      	ldrb	r0, [r1, #5]
 800aa5c:	0400      	lsls	r0, r0, #16
 800aa5e:	4460      	add	r0, ip
 800aa60:	79cb      	ldrb	r3, [r1, #7]
 800aa62:	469c      	mov	ip, r3
 800aa64:	4460      	add	r0, ip
 800aa66:	798b      	ldrb	r3, [r1, #6]
 800aa68:	021b      	lsls	r3, r3, #8
 800aa6a:	469c      	mov	ip, r3
 800aa6c:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800aa6e:	9002      	str	r0, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800aa70:	5d38      	ldrb	r0, [r7, r4]
 800aa72:	0600      	lsls	r0, r0, #24
 800aa74:	78cc      	ldrb	r4, [r1, #3]
 800aa76:	1900      	adds	r0, r0, r4
 800aa78:	784c      	ldrb	r4, [r1, #1]
 800aa7a:	0424      	lsls	r4, r4, #16
 800aa7c:	1900      	adds	r0, r0, r4
 800aa7e:	788c      	ldrb	r4, [r1, #2]
 800aa80:	0224      	lsls	r4, r4, #8
 800aa82:	1900      	adds	r0, r0, r4
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800aa84:	9001      	str	r0, [sp, #4]
 800aa86:	7a09      	ldrb	r1, [r1, #8]
 800aa88:	9100      	str	r1, [sp, #0]
 800aa8a:	9b06      	ldr	r3, [sp, #24]
 800aa8c:	4649      	mov	r1, r9
 800aa8e:	4658      	mov	r0, fp
 800aa90:	f7fe ffd2 	bl	8009a38 <StartScastDMAStream>
							break;
 800aa94:	2300      	movs	r3, #0
 800aa96:	4699      	mov	r9, r3
 800aa98:	f7ff fb2e 	bl	800a0f8 <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800aa9c:	0023      	movs	r3, r4
 800aa9e:	4a41      	ldr	r2, [pc, #260]	; (800aba4 <PxMessagingTask+0xb84>)
 800aaa0:	1992      	adds	r2, r2, r6
 800aaa2:	5d12      	ldrb	r2, [r2, r4]
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	d000      	beq.n	800aaaa <PxMessagingTask+0xa8a>
 800aaa8:	e09a      	b.n	800abe0 <PxMessagingTask+0xbc0>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800aaaa:	3238      	adds	r2, #56	; 0x38
 800aaac:	436a      	muls	r2, r5
 800aaae:	4b3d      	ldr	r3, [pc, #244]	; (800aba4 <PxMessagingTask+0xb84>)
 800aab0:	189b      	adds	r3, r3, r2
 800aab2:	191c      	adds	r4, r3, r4
 800aab4:	78a3      	ldrb	r3, [r4, #2]
 800aab6:	061b      	lsls	r3, r3, #24
 800aab8:	78e2      	ldrb	r2, [r4, #3]
 800aaba:	0412      	lsls	r2, r2, #16
 800aabc:	189b      	adds	r3, r3, r2
 800aabe:	7962      	ldrb	r2, [r4, #5]
 800aac0:	189b      	adds	r3, r3, r2
 800aac2:	7922      	ldrb	r2, [r4, #4]
 800aac4:	0212      	lsls	r2, r2, #8
 800aac6:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800aac8:	7862      	ldrb	r2, [r4, #1]
 800aaca:	3a01      	subs	r2, #1
 800aacc:	b2d1      	uxtb	r1, r2
 800aace:	2907      	cmp	r1, #7
 800aad0:	d901      	bls.n	800aad6 <PxMessagingTask+0xab6>
 800aad2:	f000 fdd4 	bl	800b67e <PxMessagingTask+0x165e>
 800aad6:	b2d2      	uxtb	r2, r2
 800aad8:	0092      	lsls	r2, r2, #2
 800aada:	4936      	ldr	r1, [pc, #216]	; (800abb4 <PxMessagingTask+0xb94>)
 800aadc:	588a      	ldr	r2, [r1, r2]
 800aade:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800aae0:	781a      	ldrb	r2, [r3, #0]
 800aae2:	4b35      	ldr	r3, [pc, #212]	; (800abb8 <PxMessagingTask+0xb98>)
 800aae4:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800aae6:	2201      	movs	r2, #1
 800aae8:	211f      	movs	r1, #31
 800aaea:	9804      	ldr	r0, [sp, #16]
 800aaec:	f7fe ff7e 	bl	80099ec <SendMessageToModule>
										break;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4699      	mov	r9, r3
 800aaf4:	f7ff fb00 	bl	800a0f8 <PxMessagingTask+0xd8>
										messageParams[0] =*(__IO int8_t* )temp32;
 800aaf8:	781a      	ldrb	r2, [r3, #0]
 800aafa:	4b2f      	ldr	r3, [pc, #188]	; (800abb8 <PxMessagingTask+0xb98>)
 800aafc:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800aafe:	2201      	movs	r2, #1
 800ab00:	211f      	movs	r1, #31
 800ab02:	9804      	ldr	r0, [sp, #16]
 800ab04:	f7fe ff72 	bl	80099ec <SendMessageToModule>
										break;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	4699      	mov	r9, r3
 800ab0c:	f7ff faf4 	bl	800a0f8 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ab10:	8819      	ldrh	r1, [r3, #0]
 800ab12:	4a29      	ldr	r2, [pc, #164]	; (800abb8 <PxMessagingTask+0xb98>)
 800ab14:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ab16:	881b      	ldrh	r3, [r3, #0]
 800ab18:	0a1b      	lsrs	r3, r3, #8
 800ab1a:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800ab1c:	2202      	movs	r2, #2
 800ab1e:	211f      	movs	r1, #31
 800ab20:	9804      	ldr	r0, [sp, #16]
 800ab22:	f7fe ff63 	bl	80099ec <SendMessageToModule>
										break;
 800ab26:	2300      	movs	r3, #0
 800ab28:	4699      	mov	r9, r3
 800ab2a:	f7ff fae5 	bl	800a0f8 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ab2e:	8819      	ldrh	r1, [r3, #0]
 800ab30:	4a21      	ldr	r2, [pc, #132]	; (800abb8 <PxMessagingTask+0xb98>)
 800ab32:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ab34:	881b      	ldrh	r3, [r3, #0]
 800ab36:	b21b      	sxth	r3, r3
 800ab38:	121b      	asrs	r3, r3, #8
 800ab3a:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800ab3c:	2202      	movs	r2, #2
 800ab3e:	211f      	movs	r1, #31
 800ab40:	9804      	ldr	r0, [sp, #16]
 800ab42:	f7fe ff53 	bl	80099ec <SendMessageToModule>
										break;
 800ab46:	2300      	movs	r3, #0
 800ab48:	4699      	mov	r9, r3
 800ab4a:	f7ff fad5 	bl	800a0f8 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800ab4e:	6819      	ldr	r1, [r3, #0]
 800ab50:	4a19      	ldr	r2, [pc, #100]	; (800abb8 <PxMessagingTask+0xb98>)
 800ab52:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800ab54:	6819      	ldr	r1, [r3, #0]
 800ab56:	0a09      	lsrs	r1, r1, #8
 800ab58:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800ab5a:	6819      	ldr	r1, [r3, #0]
 800ab5c:	0c09      	lsrs	r1, r1, #16
 800ab5e:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	0e1b      	lsrs	r3, r3, #24
 800ab64:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ab66:	2204      	movs	r2, #4
 800ab68:	211f      	movs	r1, #31
 800ab6a:	9804      	ldr	r0, [sp, #16]
 800ab6c:	f7fe ff3e 	bl	80099ec <SendMessageToModule>
										break;
 800ab70:	2300      	movs	r3, #0
 800ab72:	4699      	mov	r9, r3
 800ab74:	f7ff fac0 	bl	800a0f8 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800ab78:	6819      	ldr	r1, [r3, #0]
 800ab7a:	4a0f      	ldr	r2, [pc, #60]	; (800abb8 <PxMessagingTask+0xb98>)
 800ab7c:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800ab7e:	6819      	ldr	r1, [r3, #0]
 800ab80:	1209      	asrs	r1, r1, #8
 800ab82:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800ab84:	6819      	ldr	r1, [r3, #0]
 800ab86:	1409      	asrs	r1, r1, #16
 800ab88:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	161b      	asrs	r3, r3, #24
 800ab8e:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ab90:	2204      	movs	r2, #4
 800ab92:	211f      	movs	r1, #31
 800ab94:	9804      	ldr	r0, [sp, #16]
 800ab96:	f7fe ff29 	bl	80099ec <SendMessageToModule>
										break;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	4699      	mov	r9, r3
 800ab9e:	f7ff faab 	bl	800a0f8 <PxMessagingTask+0xd8>
 800aba2:	46c0      	nop			; (mov r8, r8)
 800aba4:	20000d1c 	.word	0x20000d1c
 800aba8:	20001052 	.word	0x20001052
 800abac:	e000ed00 	.word	0xe000ed00
 800abb0:	05fa0004 	.word	0x05fa0004
 800abb4:	0801be54 	.word	0x0801be54
 800abb8:	20000f14 	.word	0x20000f14
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800abbc:	7819      	ldrb	r1, [r3, #0]
 800abbe:	4aef      	ldr	r2, [pc, #956]	; (800af7c <PxMessagingTask+0xf5c>)
 800abc0:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800abc2:	7859      	ldrb	r1, [r3, #1]
 800abc4:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800abc6:	7899      	ldrb	r1, [r3, #2]
 800abc8:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800abca:	78db      	ldrb	r3, [r3, #3]
 800abcc:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800abce:	2208      	movs	r2, #8
 800abd0:	211f      	movs	r1, #31
 800abd2:	9804      	ldr	r0, [sp, #16]
 800abd4:	f7fe ff0a 	bl	80099ec <SendMessageToModule>
										break; // You cannot bitwise floats
 800abd8:	2300      	movs	r3, #0
 800abda:	4699      	mov	r9, r3
 800abdc:	f7ff fa8c 	bl	800a0f8 <PxMessagingTask+0xd8>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800abe0:	2a02      	cmp	r2, #2
 800abe2:	d000      	beq.n	800abe6 <PxMessagingTask+0xbc6>
 800abe4:	e09f      	b.n	800ad26 <PxMessagingTask+0xd06>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800abe6:	48e6      	ldr	r0, [pc, #920]	; (800af80 <PxMessagingTask+0xf60>)
 800abe8:	3236      	adds	r2, #54	; 0x36
 800abea:	436a      	muls	r2, r5
 800abec:	1882      	adds	r2, r0, r2
 800abee:	1851      	adds	r1, r2, r1
 800abf0:	3901      	subs	r1, #1
 800abf2:	2200      	movs	r2, #0
 800abf4:	700a      	strb	r2, [r1, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800abf6:	3301      	adds	r3, #1
 800abf8:	4453      	add	r3, sl
 800abfa:	1818      	adds	r0, r3, r0
 800abfc:	f7f8 feea 	bl	80039d4 <IsModuleParameter>
 800ac00:	9005      	str	r0, [sp, #20]
								if(temp == 0){ // Parameter does not exist
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d108      	bne.n	800ac18 <PxMessagingTask+0xbf8>
									SendMessageToModule(src,
 800ac06:	2201      	movs	r2, #1
 800ac08:	211f      	movs	r1, #31
 800ac0a:	9804      	ldr	r0, [sp, #16]
 800ac0c:	f7fe feee 	bl	80099ec <SendMessageToModule>
 800ac10:	2300      	movs	r3, #0
 800ac12:	4699      	mov	r9, r3
 800ac14:	f7ff fa70 	bl	800a0f8 <PxMessagingTask+0xd8>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800ac18:	3801      	subs	r0, #1
 800ac1a:	4ada      	ldr	r2, [pc, #872]	; (800af84 <PxMessagingTask+0xf64>)
 800ac1c:	210c      	movs	r1, #12
 800ac1e:	4341      	muls	r1, r0
 800ac20:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800ac22:	1852      	adds	r2, r2, r1
 800ac24:	7912      	ldrb	r2, [r2, #4]
 800ac26:	49d5      	ldr	r1, [pc, #852]	; (800af7c <PxMessagingTask+0xf5c>)
 800ac28:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800ac2a:	3a01      	subs	r2, #1
 800ac2c:	b2d1      	uxtb	r1, r2
 800ac2e:	2907      	cmp	r1, #7
 800ac30:	d901      	bls.n	800ac36 <PxMessagingTask+0xc16>
 800ac32:	f000 fd28 	bl	800b686 <PxMessagingTask+0x1666>
 800ac36:	b2d2      	uxtb	r2, r2
 800ac38:	0092      	lsls	r2, r2, #2
 800ac3a:	49d3      	ldr	r1, [pc, #844]	; (800af88 <PxMessagingTask+0xf68>)
 800ac3c:	588a      	ldr	r2, [r1, r2]
 800ac3e:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800ac40:	781a      	ldrb	r2, [r3, #0]
 800ac42:	4bce      	ldr	r3, [pc, #824]	; (800af7c <PxMessagingTask+0xf5c>)
 800ac44:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ac46:	2202      	movs	r2, #2
 800ac48:	211f      	movs	r1, #31
 800ac4a:	9804      	ldr	r0, [sp, #16]
 800ac4c:	f7fe fece 	bl	80099ec <SendMessageToModule>
											break;
 800ac50:	2300      	movs	r3, #0
 800ac52:	4699      	mov	r9, r3
 800ac54:	f7ff fa50 	bl	800a0f8 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 800ac58:	781a      	ldrb	r2, [r3, #0]
 800ac5a:	4bc8      	ldr	r3, [pc, #800]	; (800af7c <PxMessagingTask+0xf5c>)
 800ac5c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ac5e:	2202      	movs	r2, #2
 800ac60:	211f      	movs	r1, #31
 800ac62:	9804      	ldr	r0, [sp, #16]
 800ac64:	f7fe fec2 	bl	80099ec <SendMessageToModule>
											break;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	4699      	mov	r9, r3
 800ac6c:	f7ff fa44 	bl	800a0f8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ac70:	8819      	ldrh	r1, [r3, #0]
 800ac72:	4ac2      	ldr	r2, [pc, #776]	; (800af7c <PxMessagingTask+0xf5c>)
 800ac74:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ac76:	881b      	ldrh	r3, [r3, #0]
 800ac78:	0a1b      	lsrs	r3, r3, #8
 800ac7a:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ac7c:	2203      	movs	r2, #3
 800ac7e:	211f      	movs	r1, #31
 800ac80:	9804      	ldr	r0, [sp, #16]
 800ac82:	f7fe feb3 	bl	80099ec <SendMessageToModule>
											break;
 800ac86:	2300      	movs	r3, #0
 800ac88:	4699      	mov	r9, r3
 800ac8a:	f7ff fa35 	bl	800a0f8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ac8e:	8819      	ldrh	r1, [r3, #0]
 800ac90:	4aba      	ldr	r2, [pc, #744]	; (800af7c <PxMessagingTask+0xf5c>)
 800ac92:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ac94:	881b      	ldrh	r3, [r3, #0]
 800ac96:	b21b      	sxth	r3, r3
 800ac98:	121b      	asrs	r3, r3, #8
 800ac9a:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ac9c:	2203      	movs	r2, #3
 800ac9e:	211f      	movs	r1, #31
 800aca0:	9804      	ldr	r0, [sp, #16]
 800aca2:	f7fe fea3 	bl	80099ec <SendMessageToModule>
											break;
 800aca6:	2300      	movs	r3, #0
 800aca8:	4699      	mov	r9, r3
 800acaa:	f7ff fa25 	bl	800a0f8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800acae:	6819      	ldr	r1, [r3, #0]
 800acb0:	4ab2      	ldr	r2, [pc, #712]	; (800af7c <PxMessagingTask+0xf5c>)
 800acb2:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800acb4:	6819      	ldr	r1, [r3, #0]
 800acb6:	0a09      	lsrs	r1, r1, #8
 800acb8:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800acba:	6819      	ldr	r1, [r3, #0]
 800acbc:	0c09      	lsrs	r1, r1, #16
 800acbe:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	0e1b      	lsrs	r3, r3, #24
 800acc4:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800acc6:	2205      	movs	r2, #5
 800acc8:	211f      	movs	r1, #31
 800acca:	9804      	ldr	r0, [sp, #16]
 800accc:	f7fe fe8e 	bl	80099ec <SendMessageToModule>
											break;
 800acd0:	2300      	movs	r3, #0
 800acd2:	4699      	mov	r9, r3
 800acd4:	f7ff fa10 	bl	800a0f8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800acd8:	6819      	ldr	r1, [r3, #0]
 800acda:	4aa8      	ldr	r2, [pc, #672]	; (800af7c <PxMessagingTask+0xf5c>)
 800acdc:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800acde:	6819      	ldr	r1, [r3, #0]
 800ace0:	1209      	asrs	r1, r1, #8
 800ace2:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800ace4:	6819      	ldr	r1, [r3, #0]
 800ace6:	1409      	asrs	r1, r1, #16
 800ace8:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	161b      	asrs	r3, r3, #24
 800acee:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800acf0:	2205      	movs	r2, #5
 800acf2:	211f      	movs	r1, #31
 800acf4:	9804      	ldr	r0, [sp, #16]
 800acf6:	f7fe fe79 	bl	80099ec <SendMessageToModule>
											break;
 800acfa:	2300      	movs	r3, #0
 800acfc:	4699      	mov	r9, r3
 800acfe:	f7ff f9fb 	bl	800a0f8 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800ad02:	7819      	ldrb	r1, [r3, #0]
 800ad04:	4a9d      	ldr	r2, [pc, #628]	; (800af7c <PxMessagingTask+0xf5c>)
 800ad06:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800ad08:	7859      	ldrb	r1, [r3, #1]
 800ad0a:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800ad0c:	7899      	ldrb	r1, [r3, #2]
 800ad0e:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800ad10:	78db      	ldrb	r3, [r3, #3]
 800ad12:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800ad14:	2209      	movs	r2, #9
 800ad16:	211f      	movs	r1, #31
 800ad18:	9804      	ldr	r0, [sp, #16]
 800ad1a:	f7fe fe67 	bl	80099ec <SendMessageToModule>
											break;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	4699      	mov	r9, r3
 800ad22:	f7ff f9e9 	bl	800a0f8 <PxMessagingTask+0xd8>
								}
 800ad26:	2300      	movs	r3, #0
 800ad28:	4699      	mov	r9, r3
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800ad2a:	2a02      	cmp	r2, #2
 800ad2c:	d801      	bhi.n	800ad32 <PxMessagingTask+0xd12>
 800ad2e:	f7ff f9e3 	bl	800a0f8 <PxMessagingTask+0xd8>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800ad32:	3a04      	subs	r2, #4
 800ad34:	0092      	lsls	r2, r2, #2
 800ad36:	4b95      	ldr	r3, [pc, #596]	; (800af8c <PxMessagingTask+0xf6c>)
 800ad38:	58d1      	ldr	r1, [r2, r3]
 800ad3a:	220f      	movs	r2, #15
 800ad3c:	400a      	ands	r2, r1
 800ad3e:	4b8f      	ldr	r3, [pc, #572]	; (800af7c <PxMessagingTask+0xf5c>)
 800ad40:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800ad42:	454a      	cmp	r2, r9
 800ad44:	d106      	bne.n	800ad54 <PxMessagingTask+0xd34>
									SendMessageToModule(src,
 800ad46:	2201      	movs	r2, #1
 800ad48:	211f      	movs	r1, #31
 800ad4a:	9804      	ldr	r0, [sp, #16]
 800ad4c:	f7fe fe4e 	bl	80099ec <SendMessageToModule>
 800ad50:	f7ff f9d2 	bl	800a0f8 <PxMessagingTask+0xd8>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800ad54:	0c09      	lsrs	r1, r1, #16
 800ad56:	2380      	movs	r3, #128	; 0x80
 800ad58:	059b      	lsls	r3, r3, #22
 800ad5a:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 800ad5c:	3a01      	subs	r2, #1
 800ad5e:	b2d0      	uxtb	r0, r2
 800ad60:	2807      	cmp	r0, #7
 800ad62:	d901      	bls.n	800ad68 <PxMessagingTask+0xd48>
 800ad64:	f000 fc93 	bl	800b68e <PxMessagingTask+0x166e>
 800ad68:	b2d2      	uxtb	r2, r2
 800ad6a:	0092      	lsls	r2, r2, #2
 800ad6c:	4888      	ldr	r0, [pc, #544]	; (800af90 <PxMessagingTask+0xf70>)
 800ad6e:	5882      	ldr	r2, [r0, r2]
 800ad70:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800ad72:	781a      	ldrb	r2, [r3, #0]
 800ad74:	4b81      	ldr	r3, [pc, #516]	; (800af7c <PxMessagingTask+0xf5c>)
 800ad76:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ad78:	2202      	movs	r2, #2
 800ad7a:	211f      	movs	r1, #31
 800ad7c:	9804      	ldr	r0, [sp, #16]
 800ad7e:	f7fe fe35 	bl	80099ec <SendMessageToModule>
											break;
 800ad82:	2300      	movs	r3, #0
 800ad84:	4699      	mov	r9, r3
 800ad86:	f7ff f9b7 	bl	800a0f8 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 800ad8a:	781a      	ldrb	r2, [r3, #0]
 800ad8c:	4b7b      	ldr	r3, [pc, #492]	; (800af7c <PxMessagingTask+0xf5c>)
 800ad8e:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ad90:	2202      	movs	r2, #2
 800ad92:	211f      	movs	r1, #31
 800ad94:	9804      	ldr	r0, [sp, #16]
 800ad96:	f7fe fe29 	bl	80099ec <SendMessageToModule>
											break;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4699      	mov	r9, r3
 800ad9e:	f7ff f9ab 	bl	800a0f8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ada2:	8819      	ldrh	r1, [r3, #0]
 800ada4:	4a75      	ldr	r2, [pc, #468]	; (800af7c <PxMessagingTask+0xf5c>)
 800ada6:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	0a1b      	lsrs	r3, r3, #8
 800adac:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800adae:	2203      	movs	r2, #3
 800adb0:	211f      	movs	r1, #31
 800adb2:	9804      	ldr	r0, [sp, #16]
 800adb4:	f7fe fe1a 	bl	80099ec <SendMessageToModule>
											break;
 800adb8:	2300      	movs	r3, #0
 800adba:	4699      	mov	r9, r3
 800adbc:	f7ff f99c 	bl	800a0f8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800adc0:	8819      	ldrh	r1, [r3, #0]
 800adc2:	4a6e      	ldr	r2, [pc, #440]	; (800af7c <PxMessagingTask+0xf5c>)
 800adc4:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800adc6:	881b      	ldrh	r3, [r3, #0]
 800adc8:	b21b      	sxth	r3, r3
 800adca:	121b      	asrs	r3, r3, #8
 800adcc:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800adce:	2203      	movs	r2, #3
 800add0:	211f      	movs	r1, #31
 800add2:	9804      	ldr	r0, [sp, #16]
 800add4:	f7fe fe0a 	bl	80099ec <SendMessageToModule>
											break;
 800add8:	2300      	movs	r3, #0
 800adda:	4699      	mov	r9, r3
 800addc:	f7ff f98c 	bl	800a0f8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800ade0:	6819      	ldr	r1, [r3, #0]
 800ade2:	4a66      	ldr	r2, [pc, #408]	; (800af7c <PxMessagingTask+0xf5c>)
 800ade4:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800ade6:	6819      	ldr	r1, [r3, #0]
 800ade8:	0a09      	lsrs	r1, r1, #8
 800adea:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800adec:	6819      	ldr	r1, [r3, #0]
 800adee:	0c09      	lsrs	r1, r1, #16
 800adf0:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	0e1b      	lsrs	r3, r3, #24
 800adf6:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800adf8:	2205      	movs	r2, #5
 800adfa:	211f      	movs	r1, #31
 800adfc:	9804      	ldr	r0, [sp, #16]
 800adfe:	f7fe fdf5 	bl	80099ec <SendMessageToModule>
											break;
 800ae02:	2300      	movs	r3, #0
 800ae04:	4699      	mov	r9, r3
 800ae06:	f7ff f977 	bl	800a0f8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800ae0a:	6819      	ldr	r1, [r3, #0]
 800ae0c:	4a5b      	ldr	r2, [pc, #364]	; (800af7c <PxMessagingTask+0xf5c>)
 800ae0e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800ae10:	6819      	ldr	r1, [r3, #0]
 800ae12:	1209      	asrs	r1, r1, #8
 800ae14:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800ae16:	6819      	ldr	r1, [r3, #0]
 800ae18:	1409      	asrs	r1, r1, #16
 800ae1a:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	161b      	asrs	r3, r3, #24
 800ae20:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800ae22:	2205      	movs	r2, #5
 800ae24:	211f      	movs	r1, #31
 800ae26:	9804      	ldr	r0, [sp, #16]
 800ae28:	f7fe fde0 	bl	80099ec <SendMessageToModule>
											break;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	4699      	mov	r9, r3
 800ae30:	f7ff f962 	bl	800a0f8 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800ae34:	781a      	ldrb	r2, [r3, #0]
 800ae36:	4b51      	ldr	r3, [pc, #324]	; (800af7c <PxMessagingTask+0xf5c>)
 800ae38:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800ae3a:	4a56      	ldr	r2, [pc, #344]	; (800af94 <PxMessagingTask+0xf74>)
 800ae3c:	188a      	adds	r2, r1, r2
 800ae3e:	7812      	ldrb	r2, [r2, #0]
 800ae40:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800ae42:	4a55      	ldr	r2, [pc, #340]	; (800af98 <PxMessagingTask+0xf78>)
 800ae44:	188a      	adds	r2, r1, r2
 800ae46:	7812      	ldrb	r2, [r2, #0]
 800ae48:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800ae4a:	4a54      	ldr	r2, [pc, #336]	; (800af9c <PxMessagingTask+0xf7c>)
 800ae4c:	4694      	mov	ip, r2
 800ae4e:	4461      	add	r1, ip
 800ae50:	780a      	ldrb	r2, [r1, #0]
 800ae52:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 800ae54:	2209      	movs	r2, #9
 800ae56:	211f      	movs	r1, #31
 800ae58:	9804      	ldr	r0, [sp, #16]
 800ae5a:	f7fe fdc7 	bl	80099ec <SendMessageToModule>
											break;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	4699      	mov	r9, r3
 800ae62:	f7ff f949 	bl	800a0f8 <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800ae66:	4b4e      	ldr	r3, [pc, #312]	; (800afa0 <PxMessagingTask+0xf80>)
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	2002      	movs	r0, #2
 800ae6e:	4240      	negs	r0, r0
 800ae70:	17c1      	asrs	r1, r0, #31
 800ae72:	1812      	adds	r2, r2, r0
 800ae74:	414b      	adcs	r3, r1
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00c      	beq.n	800ae94 <PxMessagingTask+0xe74>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800ae7a:	4b4a      	ldr	r3, [pc, #296]	; (800afa4 <PxMessagingTask+0xf84>)
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	2b10      	cmp	r3, #16
 800ae80:	d101      	bne.n	800ae86 <PxMessagingTask+0xe66>
 800ae82:	f000 fc1a 	bl	800b6ba <PxMessagingTask+0x169a>
								responseStatus =BOS_OK;
 800ae86:	4b47      	ldr	r3, [pc, #284]	; (800afa4 <PxMessagingTask+0xf84>)
 800ae88:	2200      	movs	r2, #0
 800ae8a:	701a      	strb	r2, [r3, #0]
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	4699      	mov	r9, r3
 800ae90:	f7ff f932 	bl	800a0f8 <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <PxMessagingTask+0xe7c>
 800ae98:	2a01      	cmp	r2, #1
 800ae9a:	d8ee      	bhi.n	800ae7a <PxMessagingTask+0xe5a>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800ae9c:	2138      	movs	r1, #56	; 0x38
 800ae9e:	4369      	muls	r1, r5
 800aea0:	4a37      	ldr	r2, [pc, #220]	; (800af80 <PxMessagingTask+0xf60>)
 800aea2:	1852      	adds	r2, r2, r1
 800aea4:	5d12      	ldrb	r2, [r2, r4]
 800aea6:	4940      	ldr	r1, [pc, #256]	; (800afa8 <PxMessagingTask+0xf88>)
 800aea8:	700a      	strb	r2, [r1, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800aeaa:	2a08      	cmp	r2, #8
 800aeac:	d8e5      	bhi.n	800ae7a <PxMessagingTask+0xe5a>
 800aeae:	0092      	lsls	r2, r2, #2
 800aeb0:	493e      	ldr	r1, [pc, #248]	; (800afac <PxMessagingTask+0xf8c>)
 800aeb2:	588a      	ldr	r2, [r1, r2]
 800aeb4:	4697      	mov	pc, r2
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800aeb6:	4b3b      	ldr	r3, [pc, #236]	; (800afa4 <PxMessagingTask+0xf84>)
 800aeb8:	2210      	movs	r2, #16
 800aeba:	701a      	strb	r2, [r3, #0]
 800aebc:	2300      	movs	r3, #0
 800aebe:	4699      	mov	r9, r3
 800aec0:	f7ff f91a 	bl	800a0f8 <PxMessagingTask+0xd8>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800aec4:	4a36      	ldr	r2, [pc, #216]	; (800afa0 <PxMessagingTask+0xf80>)
 800aec6:	2038      	movs	r0, #56	; 0x38
 800aec8:	4368      	muls	r0, r5
 800aeca:	492d      	ldr	r1, [pc, #180]	; (800af80 <PxMessagingTask+0xf60>)
 800aecc:	1809      	adds	r1, r1, r0
 800aece:	1909      	adds	r1, r1, r4
 800aed0:	784b      	ldrb	r3, [r1, #1]
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	2300      	movs	r3, #0
 800aed6:	6053      	str	r3, [r2, #4]
										break;
 800aed8:	e7cf      	b.n	800ae7a <PxMessagingTask+0xe5a>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800aeda:	4a31      	ldr	r2, [pc, #196]	; (800afa0 <PxMessagingTask+0xf80>)
 800aedc:	2038      	movs	r0, #56	; 0x38
 800aede:	4368      	muls	r0, r5
 800aee0:	4927      	ldr	r1, [pc, #156]	; (800af80 <PxMessagingTask+0xf60>)
 800aee2:	1809      	adds	r1, r1, r0
 800aee4:	1909      	adds	r1, r1, r4
 800aee6:	2301      	movs	r3, #1
 800aee8:	56cb      	ldrsb	r3, [r1, r3]
 800aeea:	6013      	str	r3, [r2, #0]
 800aeec:	17db      	asrs	r3, r3, #31
 800aeee:	6053      	str	r3, [r2, #4]
										break;
 800aef0:	e7c3      	b.n	800ae7a <PxMessagingTask+0xe5a>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 800aef2:	4a2b      	ldr	r2, [pc, #172]	; (800afa0 <PxMessagingTask+0xf80>)
 800aef4:	2038      	movs	r0, #56	; 0x38
 800aef6:	4368      	muls	r0, r5
 800aef8:	4921      	ldr	r1, [pc, #132]	; (800af80 <PxMessagingTask+0xf60>)
 800aefa:	1809      	adds	r1, r1, r0
 800aefc:	1909      	adds	r1, r1, r4
 800aefe:	788b      	ldrb	r3, [r1, #2]
 800af00:	021b      	lsls	r3, r3, #8
 800af02:	7849      	ldrb	r1, [r1, #1]
 800af04:	185b      	adds	r3, r3, r1
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	17db      	asrs	r3, r3, #31
 800af0a:	6053      	str	r3, [r2, #4]
										break;
 800af0c:	e7b5      	b.n	800ae7a <PxMessagingTask+0xe5a>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800af0e:	4a24      	ldr	r2, [pc, #144]	; (800afa0 <PxMessagingTask+0xf80>)
 800af10:	2038      	movs	r0, #56	; 0x38
 800af12:	4368      	muls	r0, r5
 800af14:	491a      	ldr	r1, [pc, #104]	; (800af80 <PxMessagingTask+0xf60>)
 800af16:	1809      	adds	r1, r1, r0
 800af18:	1909      	adds	r1, r1, r4
 800af1a:	788b      	ldrb	r3, [r1, #2]
 800af1c:	021b      	lsls	r3, r3, #8
 800af1e:	7849      	ldrb	r1, [r1, #1]
 800af20:	185b      	adds	r3, r3, r1
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	17db      	asrs	r3, r3, #31
 800af26:	6053      	str	r3, [r2, #4]
										break;
 800af28:	e7a7      	b.n	800ae7a <PxMessagingTask+0xe5a>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800af2a:	4a1d      	ldr	r2, [pc, #116]	; (800afa0 <PxMessagingTask+0xf80>)
 800af2c:	2038      	movs	r0, #56	; 0x38
 800af2e:	4368      	muls	r0, r5
 800af30:	4913      	ldr	r1, [pc, #76]	; (800af80 <PxMessagingTask+0xf60>)
 800af32:	1809      	adds	r1, r1, r0
 800af34:	1909      	adds	r1, r1, r4
 800af36:	788b      	ldrb	r3, [r1, #2]
 800af38:	021b      	lsls	r3, r3, #8
 800af3a:	78c8      	ldrb	r0, [r1, #3]
 800af3c:	0400      	lsls	r0, r0, #16
 800af3e:	181b      	adds	r3, r3, r0
 800af40:	7848      	ldrb	r0, [r1, #1]
 800af42:	181b      	adds	r3, r3, r0
 800af44:	7909      	ldrb	r1, [r1, #4]
 800af46:	0609      	lsls	r1, r1, #24
 800af48:	185b      	adds	r3, r3, r1
 800af4a:	6013      	str	r3, [r2, #0]
 800af4c:	2300      	movs	r3, #0
 800af4e:	6053      	str	r3, [r2, #4]
										break;
 800af50:	e793      	b.n	800ae7a <PxMessagingTask+0xe5a>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800af52:	4a13      	ldr	r2, [pc, #76]	; (800afa0 <PxMessagingTask+0xf80>)
 800af54:	2038      	movs	r0, #56	; 0x38
 800af56:	4368      	muls	r0, r5
 800af58:	4909      	ldr	r1, [pc, #36]	; (800af80 <PxMessagingTask+0xf60>)
 800af5a:	1809      	adds	r1, r1, r0
 800af5c:	1909      	adds	r1, r1, r4
 800af5e:	788b      	ldrb	r3, [r1, #2]
 800af60:	021b      	lsls	r3, r3, #8
 800af62:	7848      	ldrb	r0, [r1, #1]
 800af64:	181b      	adds	r3, r3, r0
 800af66:	78c8      	ldrb	r0, [r1, #3]
 800af68:	0400      	lsls	r0, r0, #16
 800af6a:	181b      	adds	r3, r3, r0
 800af6c:	7909      	ldrb	r1, [r1, #4]
 800af6e:	0609      	lsls	r1, r1, #24
 800af70:	185b      	adds	r3, r3, r1
 800af72:	6013      	str	r3, [r2, #0]
 800af74:	17db      	asrs	r3, r3, #31
 800af76:	6053      	str	r3, [r2, #4]
										break;
 800af78:	e77f      	b.n	800ae7a <PxMessagingTask+0xe5a>
 800af7a:	46c0      	nop			; (mov r8, r8)
 800af7c:	20000f14 	.word	0x20000f14
 800af80:	20000d1c 	.word	0x20000d1c
 800af84:	20000090 	.word	0x20000090
 800af88:	0801be74 	.word	0x0801be74
 800af8c:	20006b7c 	.word	0x20006b7c
 800af90:	0801be94 	.word	0x0801be94
 800af94:	20000001 	.word	0x20000001
 800af98:	20000002 	.word	0x20000002
 800af9c:	20000003 	.word	0x20000003
 800afa0:	200010e0 	.word	0x200010e0
 800afa4:	200010e8 	.word	0x200010e8
 800afa8:	20000078 	.word	0x20000078
 800afac:	0801beb4 	.word	0x0801beb4
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800afb0:	4ad7      	ldr	r2, [pc, #860]	; (800b310 <PxMessagingTask+0x12f0>)
 800afb2:	2038      	movs	r0, #56	; 0x38
 800afb4:	4368      	muls	r0, r5
 800afb6:	49d7      	ldr	r1, [pc, #860]	; (800b314 <PxMessagingTask+0x12f4>)
 800afb8:	1809      	adds	r1, r1, r0
 800afba:	1909      	adds	r1, r1, r4
 800afbc:	788b      	ldrb	r3, [r1, #2]
 800afbe:	021b      	lsls	r3, r3, #8
 800afc0:	78c8      	ldrb	r0, [r1, #3]
 800afc2:	0400      	lsls	r0, r0, #16
 800afc4:	181b      	adds	r3, r3, r0
 800afc6:	7848      	ldrb	r0, [r1, #1]
 800afc8:	181b      	adds	r3, r3, r0
 800afca:	7909      	ldrb	r1, [r1, #4]
 800afcc:	0609      	lsls	r1, r1, #24
 800afce:	185b      	adds	r3, r3, r1
 800afd0:	6013      	str	r3, [r2, #0]
 800afd2:	2300      	movs	r3, #0
 800afd4:	6053      	str	r3, [r2, #4]
										break;
 800afd6:	e750      	b.n	800ae7a <PxMessagingTask+0xe5a>
							responseStatus =BOS_OK; // Initialize response
 800afd8:	4bcf      	ldr	r3, [pc, #828]	; (800b318 <PxMessagingTask+0x12f8>)
 800afda:	2200      	movs	r2, #0
 800afdc:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800afde:	46a1      	mov	r9, r4
 800afe0:	4bcc      	ldr	r3, [pc, #816]	; (800b314 <PxMessagingTask+0x12f4>)
 800afe2:	199b      	adds	r3, r3, r6
 800afe4:	5d1b      	ldrb	r3, [r3, r4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d100      	bne.n	800afec <PxMessagingTask+0xfcc>
 800afea:	e10b      	b.n	800b204 <PxMessagingTask+0x11e4>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800afec:	2b1e      	cmp	r3, #30
 800afee:	d900      	bls.n	800aff2 <PxMessagingTask+0xfd2>
 800aff0:	e104      	b.n	800b1fc <PxMessagingTask+0x11dc>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800aff2:	1e5c      	subs	r4, r3, #1
 800aff4:	00a2      	lsls	r2, r4, #2
 800aff6:	4bc9      	ldr	r3, [pc, #804]	; (800b31c <PxMessagingTask+0x12fc>)
 800aff8:	58d1      	ldr	r1, [r2, r3]
 800affa:	0c0b      	lsrs	r3, r1, #16
 800affc:	2280      	movs	r2, #128	; 0x80
 800affe:	0592      	lsls	r2, r2, #22
 800b000:	4694      	mov	ip, r2
 800b002:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800b004:	464a      	mov	r2, r9
 800b006:	1c57      	adds	r7, r2, #1
 800b008:	2038      	movs	r0, #56	; 0x38
 800b00a:	4368      	muls	r0, r5
 800b00c:	4ac1      	ldr	r2, [pc, #772]	; (800b314 <PxMessagingTask+0x12f4>)
 800b00e:	1812      	adds	r2, r2, r0
 800b010:	5dd2      	ldrb	r2, [r2, r7]
 800b012:	4693      	mov	fp, r2
 800b014:	3a01      	subs	r2, #1
 800b016:	b2d0      	uxtb	r0, r2
 800b018:	2807      	cmp	r0, #7
 800b01a:	d81b      	bhi.n	800b054 <PxMessagingTask+0x1034>
 800b01c:	b2d2      	uxtb	r2, r2
 800b01e:	0092      	lsls	r2, r2, #2
 800b020:	48bf      	ldr	r0, [pc, #764]	; (800b320 <PxMessagingTask+0x1300>)
 800b022:	5882      	ldr	r2, [r0, r2]
 800b024:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b026:	070a      	lsls	r2, r1, #28
 800b028:	d109      	bne.n	800b03e <PxMessagingTask+0x101e>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800b02a:	2001      	movs	r0, #1
 800b02c:	f009 faf2 	bl	8014614 <malloc>
 800b030:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b032:	d00c      	beq.n	800b04e <PxMessagingTask+0x102e>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b034:	00a4      	lsls	r4, r4, #2
 800b036:	0400      	lsls	r0, r0, #16
 800b038:	4458      	add	r0, fp
 800b03a:	4ab8      	ldr	r2, [pc, #736]	; (800b31c <PxMessagingTask+0x12fc>)
 800b03c:	50a0      	str	r0, [r4, r2]
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800b03e:	2138      	movs	r1, #56	; 0x38
 800b040:	4369      	muls	r1, r5
 800b042:	4ab4      	ldr	r2, [pc, #720]	; (800b314 <PxMessagingTask+0x12f4>)
 800b044:	1852      	adds	r2, r2, r1
 800b046:	444a      	add	r2, r9
 800b048:	7892      	ldrb	r2, [r2, #2]
 800b04a:	701a      	strb	r2, [r3, #0]
 800b04c:	e002      	b.n	800b054 <PxMessagingTask+0x1034>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b04e:	4bb2      	ldr	r3, [pc, #712]	; (800b318 <PxMessagingTask+0x12f8>)
 800b050:	2212      	movs	r2, #18
 800b052:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b054:	2338      	movs	r3, #56	; 0x38
 800b056:	436b      	muls	r3, r5
 800b058:	4aae      	ldr	r2, [pc, #696]	; (800b314 <PxMessagingTask+0x12f4>)
 800b05a:	18d2      	adds	r2, r2, r3
 800b05c:	464b      	mov	r3, r9
 800b05e:	5cd3      	ldrb	r3, [r2, r3]
 800b060:	3b01      	subs	r3, #1
 800b062:	0098      	lsls	r0, r3, #2
 800b064:	49ad      	ldr	r1, [pc, #692]	; (800b31c <PxMessagingTask+0x12fc>)
 800b066:	5841      	ldr	r1, [r0, r1]
 800b068:	5dd2      	ldrb	r2, [r2, r7]
 800b06a:	200f      	movs	r0, #15
 800b06c:	4008      	ands	r0, r1
 800b06e:	4290      	cmp	r0, r2
 800b070:	d009      	beq.n	800b086 <PxMessagingTask+0x1066>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	48ab      	ldr	r0, [pc, #684]	; (800b324 <PxMessagingTask+0x1304>)
 800b076:	4684      	mov	ip, r0
 800b078:	4462      	add	r2, ip
 800b07a:	400a      	ands	r2, r1
 800b07c:	49a7      	ldr	r1, [pc, #668]	; (800b31c <PxMessagingTask+0x12fc>)
 800b07e:	505a      	str	r2, [r3, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800b080:	4ba5      	ldr	r3, [pc, #660]	; (800b318 <PxMessagingTask+0x12f8>)
 800b082:	2214      	movs	r2, #20
 800b084:	701a      	strb	r2, [r3, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800b086:	4ba8      	ldr	r3, [pc, #672]	; (800b328 <PxMessagingTask+0x1308>)
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	2240      	movs	r2, #64	; 0x40
 800b08c:	4393      	bics	r3, r2
 800b08e:	2200      	movs	r2, #0
 800b090:	4691      	mov	r9, r2
 800b092:	2b20      	cmp	r3, #32
 800b094:	d001      	beq.n	800b09a <PxMessagingTask+0x107a>
 800b096:	f7ff f82f 	bl	800a0f8 <PxMessagingTask+0xd8>
								messageParams[0] =responseStatus;
 800b09a:	4b9f      	ldr	r3, [pc, #636]	; (800b318 <PxMessagingTask+0x12f8>)
 800b09c:	781a      	ldrb	r2, [r3, #0]
 800b09e:	4ba3      	ldr	r3, [pc, #652]	; (800b32c <PxMessagingTask+0x130c>)
 800b0a0:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	2121      	movs	r1, #33	; 0x21
 800b0a6:	9804      	ldr	r0, [sp, #16]
 800b0a8:	f7fe fca0 	bl	80099ec <SendMessageToModule>
 800b0ac:	f7ff f824 	bl	800a0f8 <PxMessagingTask+0xd8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b0b0:	070a      	lsls	r2, r1, #28
 800b0b2:	d10a      	bne.n	800b0ca <PxMessagingTask+0x10aa>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800b0b4:	2001      	movs	r0, #1
 800b0b6:	f009 faad 	bl	8014614 <malloc>
 800b0ba:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b0bc:	d100      	bne.n	800b0c0 <PxMessagingTask+0x10a0>
 800b0be:	e37b      	b.n	800b7b8 <PxMessagingTask+0x1798>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b0c0:	00a4      	lsls	r4, r4, #2
 800b0c2:	0400      	lsls	r0, r0, #16
 800b0c4:	3002      	adds	r0, #2
 800b0c6:	4a95      	ldr	r2, [pc, #596]	; (800b31c <PxMessagingTask+0x12fc>)
 800b0c8:	50a0      	str	r0, [r4, r2]
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800b0ca:	2138      	movs	r1, #56	; 0x38
 800b0cc:	4369      	muls	r1, r5
 800b0ce:	4a91      	ldr	r2, [pc, #580]	; (800b314 <PxMessagingTask+0x12f4>)
 800b0d0:	1852      	adds	r2, r2, r1
 800b0d2:	444a      	add	r2, r9
 800b0d4:	7892      	ldrb	r2, [r2, #2]
 800b0d6:	b252      	sxtb	r2, r2
 800b0d8:	701a      	strb	r2, [r3, #0]
 800b0da:	e7bb      	b.n	800b054 <PxMessagingTask+0x1034>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b0dc:	070a      	lsls	r2, r1, #28
 800b0de:	d10a      	bne.n	800b0f6 <PxMessagingTask+0x10d6>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800b0e0:	2002      	movs	r0, #2
 800b0e2:	f009 fa97 	bl	8014614 <malloc>
 800b0e6:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b0e8:	d100      	bne.n	800b0ec <PxMessagingTask+0x10cc>
 800b0ea:	e365      	b.n	800b7b8 <PxMessagingTask+0x1798>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b0ec:	00a4      	lsls	r4, r4, #2
 800b0ee:	0400      	lsls	r0, r0, #16
 800b0f0:	3003      	adds	r0, #3
 800b0f2:	4a8a      	ldr	r2, [pc, #552]	; (800b31c <PxMessagingTask+0x12fc>)
 800b0f4:	50a0      	str	r0, [r4, r2]
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800b0f6:	2138      	movs	r1, #56	; 0x38
 800b0f8:	4369      	muls	r1, r5
 800b0fa:	4a86      	ldr	r2, [pc, #536]	; (800b314 <PxMessagingTask+0x12f4>)
 800b0fc:	1852      	adds	r2, r2, r1
 800b0fe:	444a      	add	r2, r9
 800b100:	78d1      	ldrb	r1, [r2, #3]
 800b102:	0209      	lsls	r1, r1, #8
 800b104:	7892      	ldrb	r2, [r2, #2]
 800b106:	1852      	adds	r2, r2, r1
 800b108:	b292      	uxth	r2, r2
 800b10a:	801a      	strh	r2, [r3, #0]
 800b10c:	e7a2      	b.n	800b054 <PxMessagingTask+0x1034>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b10e:	070a      	lsls	r2, r1, #28
 800b110:	d10a      	bne.n	800b128 <PxMessagingTask+0x1108>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800b112:	2002      	movs	r0, #2
 800b114:	f009 fa7e 	bl	8014614 <malloc>
 800b118:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b11a:	d100      	bne.n	800b11e <PxMessagingTask+0x10fe>
 800b11c:	e34c      	b.n	800b7b8 <PxMessagingTask+0x1798>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b11e:	00a4      	lsls	r4, r4, #2
 800b120:	0400      	lsls	r0, r0, #16
 800b122:	3004      	adds	r0, #4
 800b124:	4a7d      	ldr	r2, [pc, #500]	; (800b31c <PxMessagingTask+0x12fc>)
 800b126:	50a0      	str	r0, [r4, r2]
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800b128:	2138      	movs	r1, #56	; 0x38
 800b12a:	4369      	muls	r1, r5
 800b12c:	4a79      	ldr	r2, [pc, #484]	; (800b314 <PxMessagingTask+0x12f4>)
 800b12e:	1852      	adds	r2, r2, r1
 800b130:	444a      	add	r2, r9
 800b132:	78d1      	ldrb	r1, [r2, #3]
 800b134:	0209      	lsls	r1, r1, #8
 800b136:	7892      	ldrb	r2, [r2, #2]
 800b138:	1852      	adds	r2, r2, r1
 800b13a:	b212      	sxth	r2, r2
 800b13c:	801a      	strh	r2, [r3, #0]
 800b13e:	e789      	b.n	800b054 <PxMessagingTask+0x1034>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b140:	070a      	lsls	r2, r1, #28
 800b142:	d10a      	bne.n	800b15a <PxMessagingTask+0x113a>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800b144:	2004      	movs	r0, #4
 800b146:	f009 fa65 	bl	8014614 <malloc>
 800b14a:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b14c:	d100      	bne.n	800b150 <PxMessagingTask+0x1130>
 800b14e:	e333      	b.n	800b7b8 <PxMessagingTask+0x1798>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b150:	00a4      	lsls	r4, r4, #2
 800b152:	0400      	lsls	r0, r0, #16
 800b154:	3005      	adds	r0, #5
 800b156:	4a71      	ldr	r2, [pc, #452]	; (800b31c <PxMessagingTask+0x12fc>)
 800b158:	50a0      	str	r0, [r4, r2]
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b15a:	2238      	movs	r2, #56	; 0x38
 800b15c:	436a      	muls	r2, r5
 800b15e:	496d      	ldr	r1, [pc, #436]	; (800b314 <PxMessagingTask+0x12f4>)
 800b160:	1889      	adds	r1, r1, r2
 800b162:	4449      	add	r1, r9
 800b164:	78ca      	ldrb	r2, [r1, #3]
 800b166:	0212      	lsls	r2, r2, #8
 800b168:	7908      	ldrb	r0, [r1, #4]
 800b16a:	0400      	lsls	r0, r0, #16
 800b16c:	1812      	adds	r2, r2, r0
 800b16e:	7888      	ldrb	r0, [r1, #2]
 800b170:	1812      	adds	r2, r2, r0
 800b172:	7949      	ldrb	r1, [r1, #5]
 800b174:	0609      	lsls	r1, r1, #24
 800b176:	1852      	adds	r2, r2, r1
 800b178:	601a      	str	r2, [r3, #0]
 800b17a:	e76b      	b.n	800b054 <PxMessagingTask+0x1034>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b17c:	070a      	lsls	r2, r1, #28
 800b17e:	d10a      	bne.n	800b196 <PxMessagingTask+0x1176>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800b180:	2004      	movs	r0, #4
 800b182:	f009 fa47 	bl	8014614 <malloc>
 800b186:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b188:	d100      	bne.n	800b18c <PxMessagingTask+0x116c>
 800b18a:	e315      	b.n	800b7b8 <PxMessagingTask+0x1798>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b18c:	00a4      	lsls	r4, r4, #2
 800b18e:	0400      	lsls	r0, r0, #16
 800b190:	3006      	adds	r0, #6
 800b192:	4a62      	ldr	r2, [pc, #392]	; (800b31c <PxMessagingTask+0x12fc>)
 800b194:	50a0      	str	r0, [r4, r2]
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800b196:	2238      	movs	r2, #56	; 0x38
 800b198:	436a      	muls	r2, r5
 800b19a:	495e      	ldr	r1, [pc, #376]	; (800b314 <PxMessagingTask+0x12f4>)
 800b19c:	1889      	adds	r1, r1, r2
 800b19e:	4449      	add	r1, r9
 800b1a0:	78ca      	ldrb	r2, [r1, #3]
 800b1a2:	0212      	lsls	r2, r2, #8
 800b1a4:	7888      	ldrb	r0, [r1, #2]
 800b1a6:	1812      	adds	r2, r2, r0
 800b1a8:	7908      	ldrb	r0, [r1, #4]
 800b1aa:	0400      	lsls	r0, r0, #16
 800b1ac:	1812      	adds	r2, r2, r0
 800b1ae:	7949      	ldrb	r1, [r1, #5]
 800b1b0:	0609      	lsls	r1, r1, #24
 800b1b2:	1852      	adds	r2, r2, r1
 800b1b4:	601a      	str	r2, [r3, #0]
 800b1b6:	e74d      	b.n	800b054 <PxMessagingTask+0x1034>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b1b8:	070a      	lsls	r2, r1, #28
 800b1ba:	d10a      	bne.n	800b1d2 <PxMessagingTask+0x11b2>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800b1bc:	2004      	movs	r0, #4
 800b1be:	f009 fa29 	bl	8014614 <malloc>
 800b1c2:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b1c4:	d100      	bne.n	800b1c8 <PxMessagingTask+0x11a8>
 800b1c6:	e2f7      	b.n	800b7b8 <PxMessagingTask+0x1798>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b1c8:	00a4      	lsls	r4, r4, #2
 800b1ca:	0400      	lsls	r0, r0, #16
 800b1cc:	3007      	adds	r0, #7
 800b1ce:	4a53      	ldr	r2, [pc, #332]	; (800b31c <PxMessagingTask+0x12fc>)
 800b1d0:	50a0      	str	r0, [r4, r2]
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b1d2:	2238      	movs	r2, #56	; 0x38
 800b1d4:	436a      	muls	r2, r5
 800b1d6:	494f      	ldr	r1, [pc, #316]	; (800b314 <PxMessagingTask+0x12f4>)
 800b1d8:	1889      	adds	r1, r1, r2
 800b1da:	4449      	add	r1, r9
 800b1dc:	78ca      	ldrb	r2, [r1, #3]
 800b1de:	0212      	lsls	r2, r2, #8
 800b1e0:	7908      	ldrb	r0, [r1, #4]
 800b1e2:	0400      	lsls	r0, r0, #16
 800b1e4:	1812      	adds	r2, r2, r0
 800b1e6:	7888      	ldrb	r0, [r1, #2]
 800b1e8:	1812      	adds	r2, r2, r0
 800b1ea:	7949      	ldrb	r1, [r1, #5]
 800b1ec:	0609      	lsls	r1, r1, #24
 800b1ee:	1852      	adds	r2, r2, r1
 800b1f0:	4947      	ldr	r1, [pc, #284]	; (800b310 <PxMessagingTask+0x12f0>)
 800b1f2:	600a      	str	r2, [r1, #0]
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800b1f8:	601a      	str	r2, [r3, #0]
 800b1fa:	e72b      	b.n	800b054 <PxMessagingTask+0x1034>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800b1fc:	4b46      	ldr	r3, [pc, #280]	; (800b318 <PxMessagingTask+0x12f8>)
 800b1fe:	2213      	movs	r2, #19
 800b200:	701a      	strb	r2, [r3, #0]
 800b202:	e740      	b.n	800b086 <PxMessagingTask+0x1066>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800b204:	2238      	movs	r2, #56	; 0x38
 800b206:	436a      	muls	r2, r5
 800b208:	4b42      	ldr	r3, [pc, #264]	; (800b314 <PxMessagingTask+0x12f4>)
 800b20a:	189b      	adds	r3, r3, r2
 800b20c:	191b      	adds	r3, r3, r4
 800b20e:	789c      	ldrb	r4, [r3, #2]
 800b210:	0624      	lsls	r4, r4, #24
 800b212:	78da      	ldrb	r2, [r3, #3]
 800b214:	0412      	lsls	r2, r2, #16
 800b216:	18a4      	adds	r4, r4, r2
 800b218:	795a      	ldrb	r2, [r3, #5]
 800b21a:	18a4      	adds	r4, r4, r2
 800b21c:	791b      	ldrb	r3, [r3, #4]
 800b21e:	021b      	lsls	r3, r3, #8
 800b220:	18e4      	adds	r4, r4, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800b222:	23e0      	movs	r3, #224	; 0xe0
 800b224:	061b      	lsls	r3, r3, #24
 800b226:	18e2      	adds	r2, r4, r3
 800b228:	4b41      	ldr	r3, [pc, #260]	; (800b330 <PxMessagingTask+0x1310>)
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d900      	bls.n	800b230 <PxMessagingTask+0x1210>
 800b22e:	e083      	b.n	800b338 <PxMessagingTask+0x1318>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800b230:	2238      	movs	r2, #56	; 0x38
 800b232:	436a      	muls	r2, r5
 800b234:	4b37      	ldr	r3, [pc, #220]	; (800b314 <PxMessagingTask+0x12f4>)
 800b236:	189b      	adds	r3, r3, r2
 800b238:	444b      	add	r3, r9
 800b23a:	785b      	ldrb	r3, [r3, #1]
 800b23c:	3b01      	subs	r3, #1
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	2a07      	cmp	r2, #7
 800b242:	d900      	bls.n	800b246 <PxMessagingTask+0x1226>
 800b244:	e71f      	b.n	800b086 <PxMessagingTask+0x1066>
 800b246:	b2db      	uxtb	r3, r3
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	4a3a      	ldr	r2, [pc, #232]	; (800b334 <PxMessagingTask+0x1314>)
 800b24c:	58d3      	ldr	r3, [r2, r3]
 800b24e:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800b250:	2238      	movs	r2, #56	; 0x38
 800b252:	436a      	muls	r2, r5
 800b254:	4b2f      	ldr	r3, [pc, #188]	; (800b314 <PxMessagingTask+0x12f4>)
 800b256:	189b      	adds	r3, r3, r2
 800b258:	444b      	add	r3, r9
 800b25a:	799b      	ldrb	r3, [r3, #6]
 800b25c:	7023      	strb	r3, [r4, #0]
											break;
 800b25e:	e712      	b.n	800b086 <PxMessagingTask+0x1066>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800b260:	2238      	movs	r2, #56	; 0x38
 800b262:	436a      	muls	r2, r5
 800b264:	4b2b      	ldr	r3, [pc, #172]	; (800b314 <PxMessagingTask+0x12f4>)
 800b266:	189b      	adds	r3, r3, r2
 800b268:	444b      	add	r3, r9
 800b26a:	799b      	ldrb	r3, [r3, #6]
 800b26c:	b25b      	sxtb	r3, r3
 800b26e:	7023      	strb	r3, [r4, #0]
											break;
 800b270:	e709      	b.n	800b086 <PxMessagingTask+0x1066>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b272:	2238      	movs	r2, #56	; 0x38
 800b274:	436a      	muls	r2, r5
 800b276:	4b27      	ldr	r3, [pc, #156]	; (800b314 <PxMessagingTask+0x12f4>)
 800b278:	189b      	adds	r3, r3, r2
 800b27a:	444b      	add	r3, r9
 800b27c:	79da      	ldrb	r2, [r3, #7]
 800b27e:	0212      	lsls	r2, r2, #8
 800b280:	799b      	ldrb	r3, [r3, #6]
 800b282:	189b      	adds	r3, r3, r2
 800b284:	b29b      	uxth	r3, r3
 800b286:	8023      	strh	r3, [r4, #0]
											break;
 800b288:	e6fd      	b.n	800b086 <PxMessagingTask+0x1066>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800b28a:	2238      	movs	r2, #56	; 0x38
 800b28c:	436a      	muls	r2, r5
 800b28e:	4b21      	ldr	r3, [pc, #132]	; (800b314 <PxMessagingTask+0x12f4>)
 800b290:	189b      	adds	r3, r3, r2
 800b292:	444b      	add	r3, r9
 800b294:	79da      	ldrb	r2, [r3, #7]
 800b296:	0212      	lsls	r2, r2, #8
 800b298:	799b      	ldrb	r3, [r3, #6]
 800b29a:	189b      	adds	r3, r3, r2
 800b29c:	b21b      	sxth	r3, r3
 800b29e:	8023      	strh	r3, [r4, #0]
											break;
 800b2a0:	e6f1      	b.n	800b086 <PxMessagingTask+0x1066>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b2a2:	2338      	movs	r3, #56	; 0x38
 800b2a4:	436b      	muls	r3, r5
 800b2a6:	4a1b      	ldr	r2, [pc, #108]	; (800b314 <PxMessagingTask+0x12f4>)
 800b2a8:	18d2      	adds	r2, r2, r3
 800b2aa:	444a      	add	r2, r9
 800b2ac:	79d3      	ldrb	r3, [r2, #7]
 800b2ae:	021b      	lsls	r3, r3, #8
 800b2b0:	7a11      	ldrb	r1, [r2, #8]
 800b2b2:	0409      	lsls	r1, r1, #16
 800b2b4:	185b      	adds	r3, r3, r1
 800b2b6:	7991      	ldrb	r1, [r2, #6]
 800b2b8:	185b      	adds	r3, r3, r1
 800b2ba:	7a52      	ldrb	r2, [r2, #9]
 800b2bc:	0612      	lsls	r2, r2, #24
 800b2be:	189b      	adds	r3, r3, r2
 800b2c0:	6023      	str	r3, [r4, #0]
											break;
 800b2c2:	e6e0      	b.n	800b086 <PxMessagingTask+0x1066>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800b2c4:	2338      	movs	r3, #56	; 0x38
 800b2c6:	436b      	muls	r3, r5
 800b2c8:	4a12      	ldr	r2, [pc, #72]	; (800b314 <PxMessagingTask+0x12f4>)
 800b2ca:	18d2      	adds	r2, r2, r3
 800b2cc:	444a      	add	r2, r9
 800b2ce:	79d3      	ldrb	r3, [r2, #7]
 800b2d0:	021b      	lsls	r3, r3, #8
 800b2d2:	7991      	ldrb	r1, [r2, #6]
 800b2d4:	185b      	adds	r3, r3, r1
 800b2d6:	7a11      	ldrb	r1, [r2, #8]
 800b2d8:	0409      	lsls	r1, r1, #16
 800b2da:	185b      	adds	r3, r3, r1
 800b2dc:	7a52      	ldrb	r2, [r2, #9]
 800b2de:	0612      	lsls	r2, r2, #24
 800b2e0:	189b      	adds	r3, r3, r2
 800b2e2:	6023      	str	r3, [r4, #0]
											break;
 800b2e4:	e6cf      	b.n	800b086 <PxMessagingTask+0x1066>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b2e6:	2338      	movs	r3, #56	; 0x38
 800b2e8:	436b      	muls	r3, r5
 800b2ea:	4a0a      	ldr	r2, [pc, #40]	; (800b314 <PxMessagingTask+0x12f4>)
 800b2ec:	18d2      	adds	r2, r2, r3
 800b2ee:	444a      	add	r2, r9
 800b2f0:	79d3      	ldrb	r3, [r2, #7]
 800b2f2:	021b      	lsls	r3, r3, #8
 800b2f4:	7a11      	ldrb	r1, [r2, #8]
 800b2f6:	0409      	lsls	r1, r1, #16
 800b2f8:	185b      	adds	r3, r3, r1
 800b2fa:	7991      	ldrb	r1, [r2, #6]
 800b2fc:	185b      	adds	r3, r3, r1
 800b2fe:	7a52      	ldrb	r2, [r2, #9]
 800b300:	0612      	lsls	r2, r2, #24
 800b302:	189b      	adds	r3, r3, r2
 800b304:	4a02      	ldr	r2, [pc, #8]	; (800b310 <PxMessagingTask+0x12f0>)
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	2100      	movs	r1, #0
 800b30a:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800b30c:	6023      	str	r3, [r4, #0]
											break;
 800b30e:	e6ba      	b.n	800b086 <PxMessagingTask+0x1066>
 800b310:	200010e0 	.word	0x200010e0
 800b314:	20000d1c 	.word	0x20000d1c
 800b318:	200010e8 	.word	0x200010e8
 800b31c:	20006b7c 	.word	0x20006b7c
 800b320:	0801bed8 	.word	0x0801bed8
 800b324:	0000fff0 	.word	0x0000fff0
 800b328:	20006b74 	.word	0x20006b74
 800b32c:	20000f14 	.word	0x20000f14
 800b330:	00007fff 	.word	0x00007fff
 800b334:	0801bef8 	.word	0x0801bef8
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800b338:	4ae2      	ldr	r2, [pc, #904]	; (800b6c4 <PxMessagingTask+0x16a4>)
 800b33a:	23f8      	movs	r3, #248	; 0xf8
 800b33c:	061b      	lsls	r3, r3, #24
 800b33e:	18e3      	adds	r3, r4, r3
 800b340:	4293      	cmp	r3, r2
 800b342:	d900      	bls.n	800b346 <PxMessagingTask+0x1326>
 800b344:	e0a6      	b.n	800b494 <PxMessagingTask+0x1474>
									HAL_FLASH_Unlock();
 800b346:	f006 fdb9 	bl	8011ebc <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800b34a:	2f22      	cmp	r7, #34	; 0x22
 800b34c:	d111      	bne.n	800b372 <PxMessagingTask+0x1352>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b34e:	2300      	movs	r3, #0
 800b350:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress =temp32;
 800b352:	9414      	str	r4, [sp, #80]	; 0x50
										erase.NbPages =1;
 800b354:	3301      	adds	r3, #1
 800b356:	9315      	str	r3, [sp, #84]	; 0x54
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b358:	a912      	add	r1, sp, #72	; 0x48
 800b35a:	a813      	add	r0, sp, #76	; 0x4c
 800b35c:	f006 fe82 	bl	8012064 <HAL_FLASHEx_Erase>
 800b360:	900a      	str	r0, [sp, #40]	; 0x28
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b362:	2800      	cmp	r0, #0
 800b364:	d102      	bne.n	800b36c <PxMessagingTask+0x134c>
 800b366:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b368:	3301      	adds	r3, #1
 800b36a:	d002      	beq.n	800b372 <PxMessagingTask+0x1352>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b36c:	4bd6      	ldr	r3, [pc, #856]	; (800b6c8 <PxMessagingTask+0x16a8>)
 800b36e:	2216      	movs	r2, #22
 800b370:	701a      	strb	r2, [r3, #0]
									if(responseStatus == BOS_OK){
 800b372:	4bd5      	ldr	r3, [pc, #852]	; (800b6c8 <PxMessagingTask+0x16a8>)
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d116      	bne.n	800b3a8 <PxMessagingTask+0x1388>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800b37a:	2238      	movs	r2, #56	; 0x38
 800b37c:	436a      	muls	r2, r5
 800b37e:	4bd3      	ldr	r3, [pc, #844]	; (800b6cc <PxMessagingTask+0x16ac>)
 800b380:	189b      	adds	r3, r3, r2
 800b382:	444b      	add	r3, r9
 800b384:	785b      	ldrb	r3, [r3, #1]
 800b386:	3b01      	subs	r3, #1
 800b388:	b2da      	uxtb	r2, r3
 800b38a:	2a07      	cmp	r2, #7
 800b38c:	d80c      	bhi.n	800b3a8 <PxMessagingTask+0x1388>
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4acf      	ldr	r2, [pc, #828]	; (800b6d0 <PxMessagingTask+0x16b0>)
 800b394:	58d3      	ldr	r3, [r2, r3]
 800b396:	469f      	mov	pc, r3
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b398:	8823      	ldrh	r3, [r4, #0]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	4acd      	ldr	r2, [pc, #820]	; (800b6d4 <PxMessagingTask+0x16b4>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d00c      	beq.n	800b3bc <PxMessagingTask+0x139c>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b3a2:	4bc9      	ldr	r3, [pc, #804]	; (800b6c8 <PxMessagingTask+0x16a8>)
 800b3a4:	2216      	movs	r2, #22
 800b3a6:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800b3a8:	f006 fd9a 	bl	8011ee0 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800b3ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d100      	bne.n	800b3b4 <PxMessagingTask+0x1394>
 800b3b2:	e668      	b.n	800b086 <PxMessagingTask+0x1066>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b3b4:	4bc4      	ldr	r3, [pc, #784]	; (800b6c8 <PxMessagingTask+0x16a8>)
 800b3b6:	2216      	movs	r2, #22
 800b3b8:	701a      	strb	r2, [r3, #0]
 800b3ba:	e664      	b.n	800b086 <PxMessagingTask+0x1066>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800b3bc:	2238      	movs	r2, #56	; 0x38
 800b3be:	436a      	muls	r2, r5
 800b3c0:	4bc2      	ldr	r3, [pc, #776]	; (800b6cc <PxMessagingTask+0x16ac>)
 800b3c2:	189b      	adds	r3, r3, r2
 800b3c4:	444b      	add	r3, r9
 800b3c6:	799a      	ldrb	r2, [r3, #6]
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	49c3      	ldr	r1, [pc, #780]	; (800b6d8 <PxMessagingTask+0x16b8>)
 800b3cc:	600a      	str	r2, [r1, #0]
 800b3ce:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b3d0:	0021      	movs	r1, r4
 800b3d2:	2001      	movs	r0, #1
 800b3d4:	f006 fdbc 	bl	8011f50 <HAL_FLASH_Program>
 800b3d8:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b3da:	e7e5      	b.n	800b3a8 <PxMessagingTask+0x1388>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b3dc:	8823      	ldrh	r3, [r4, #0]
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	4abc      	ldr	r2, [pc, #752]	; (800b6d4 <PxMessagingTask+0x16b4>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d003      	beq.n	800b3ee <PxMessagingTask+0x13ce>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b3e6:	4bb8      	ldr	r3, [pc, #736]	; (800b6c8 <PxMessagingTask+0x16a8>)
 800b3e8:	2216      	movs	r2, #22
 800b3ea:	701a      	strb	r2, [r3, #0]
													break;
 800b3ec:	e7dc      	b.n	800b3a8 <PxMessagingTask+0x1388>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b3ee:	2238      	movs	r2, #56	; 0x38
 800b3f0:	436a      	muls	r2, r5
 800b3f2:	4bb6      	ldr	r3, [pc, #728]	; (800b6cc <PxMessagingTask+0x16ac>)
 800b3f4:	189b      	adds	r3, r3, r2
 800b3f6:	444b      	add	r3, r9
 800b3f8:	79da      	ldrb	r2, [r3, #7]
 800b3fa:	0212      	lsls	r2, r2, #8
 800b3fc:	799b      	ldrb	r3, [r3, #6]
 800b3fe:	18d2      	adds	r2, r2, r3
 800b400:	17d3      	asrs	r3, r2, #31
 800b402:	49b5      	ldr	r1, [pc, #724]	; (800b6d8 <PxMessagingTask+0x16b8>)
 800b404:	600a      	str	r2, [r1, #0]
 800b406:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b408:	0021      	movs	r1, r4
 800b40a:	2001      	movs	r0, #1
 800b40c:	f006 fda0 	bl	8011f50 <HAL_FLASH_Program>
 800b410:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b412:	e7c9      	b.n	800b3a8 <PxMessagingTask+0x1388>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	3301      	adds	r3, #1
 800b418:	d003      	beq.n	800b422 <PxMessagingTask+0x1402>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b41a:	4bab      	ldr	r3, [pc, #684]	; (800b6c8 <PxMessagingTask+0x16a8>)
 800b41c:	2216      	movs	r2, #22
 800b41e:	701a      	strb	r2, [r3, #0]
													break;
 800b420:	e7c2      	b.n	800b3a8 <PxMessagingTask+0x1388>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b422:	2238      	movs	r2, #56	; 0x38
 800b424:	436a      	muls	r2, r5
 800b426:	4ba9      	ldr	r3, [pc, #676]	; (800b6cc <PxMessagingTask+0x16ac>)
 800b428:	189b      	adds	r3, r3, r2
 800b42a:	444b      	add	r3, r9
 800b42c:	79da      	ldrb	r2, [r3, #7]
 800b42e:	0212      	lsls	r2, r2, #8
 800b430:	7a19      	ldrb	r1, [r3, #8]
 800b432:	0409      	lsls	r1, r1, #16
 800b434:	1852      	adds	r2, r2, r1
 800b436:	7999      	ldrb	r1, [r3, #6]
 800b438:	1852      	adds	r2, r2, r1
 800b43a:	7a5b      	ldrb	r3, [r3, #9]
 800b43c:	061b      	lsls	r3, r3, #24
 800b43e:	18d2      	adds	r2, r2, r3
 800b440:	2300      	movs	r3, #0
 800b442:	49a5      	ldr	r1, [pc, #660]	; (800b6d8 <PxMessagingTask+0x16b8>)
 800b444:	600a      	str	r2, [r1, #0]
 800b446:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b448:	0021      	movs	r1, r4
 800b44a:	2002      	movs	r0, #2
 800b44c:	f006 fd80 	bl	8011f50 <HAL_FLASH_Program>
 800b450:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b452:	e7a9      	b.n	800b3a8 <PxMessagingTask+0x1388>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	3301      	adds	r3, #1
 800b458:	d003      	beq.n	800b462 <PxMessagingTask+0x1442>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b45a:	4b9b      	ldr	r3, [pc, #620]	; (800b6c8 <PxMessagingTask+0x16a8>)
 800b45c:	2216      	movs	r2, #22
 800b45e:	701a      	strb	r2, [r3, #0]
													break;
 800b460:	e7a2      	b.n	800b3a8 <PxMessagingTask+0x1388>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b462:	2238      	movs	r2, #56	; 0x38
 800b464:	436a      	muls	r2, r5
 800b466:	4b99      	ldr	r3, [pc, #612]	; (800b6cc <PxMessagingTask+0x16ac>)
 800b468:	189b      	adds	r3, r3, r2
 800b46a:	444b      	add	r3, r9
 800b46c:	79da      	ldrb	r2, [r3, #7]
 800b46e:	0212      	lsls	r2, r2, #8
 800b470:	7a19      	ldrb	r1, [r3, #8]
 800b472:	0409      	lsls	r1, r1, #16
 800b474:	1852      	adds	r2, r2, r1
 800b476:	7999      	ldrb	r1, [r3, #6]
 800b478:	1852      	adds	r2, r2, r1
 800b47a:	7a5b      	ldrb	r3, [r3, #9]
 800b47c:	061b      	lsls	r3, r3, #24
 800b47e:	18d2      	adds	r2, r2, r3
 800b480:	2300      	movs	r3, #0
 800b482:	4995      	ldr	r1, [pc, #596]	; (800b6d8 <PxMessagingTask+0x16b8>)
 800b484:	600a      	str	r2, [r1, #0]
 800b486:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b488:	0021      	movs	r1, r4
 800b48a:	2003      	movs	r0, #3
 800b48c:	f006 fd60 	bl	8011f50 <HAL_FLASH_Program>
 800b490:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b492:	e789      	b.n	800b3a8 <PxMessagingTask+0x1388>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800b494:	4b8c      	ldr	r3, [pc, #560]	; (800b6c8 <PxMessagingTask+0x16a8>)
 800b496:	2215      	movs	r2, #21
 800b498:	701a      	strb	r2, [r3, #0]
 800b49a:	e5f4      	b.n	800b086 <PxMessagingTask+0x1066>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800b49c:	4b8b      	ldr	r3, [pc, #556]	; (800b6cc <PxMessagingTask+0x16ac>)
 800b49e:	199b      	adds	r3, r3, r6
 800b4a0:	5d1a      	ldrb	r2, [r3, r4]
 800b4a2:	4b89      	ldr	r3, [pc, #548]	; (800b6c8 <PxMessagingTask+0x16a8>)
 800b4a4:	701a      	strb	r2, [r3, #0]
							break;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	4699      	mov	r9, r3
 800b4aa:	f7fe fe25 	bl	800a0f8 <PxMessagingTask+0xd8>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800b4ae:	9a06      	ldr	r2, [sp, #24]
 800b4b0:	3a01      	subs	r2, #1
 800b4b2:	b292      	uxth	r2, r2
 800b4b4:	1c61      	adds	r1, r4, #1
 800b4b6:	4451      	add	r1, sl
 800b4b8:	4b84      	ldr	r3, [pc, #528]	; (800b6cc <PxMessagingTask+0x16ac>)
 800b4ba:	18c9      	adds	r1, r1, r3
 800b4bc:	199b      	adds	r3, r3, r6
 800b4be:	5d18      	ldrb	r0, [r3, r4]
 800b4c0:	230a      	movs	r3, #10
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	f003 f962 	bl	800e78c <writePxMutex>
							break;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	4699      	mov	r9, r3
 800b4cc:	f7fe fe14 	bl	800a0f8 <PxMessagingTask+0xd8>
							switch(cMessage[port - 1][0 + shift]){
 800b4d0:	0027      	movs	r7, r4
 800b4d2:	4b7e      	ldr	r3, [pc, #504]	; (800b6cc <PxMessagingTask+0x16ac>)
 800b4d4:	199b      	adds	r3, r3, r6
 800b4d6:	5d18      	ldrb	r0, [r3, r4]
 800b4d8:	282b      	cmp	r0, #43	; 0x2b
 800b4da:	d900      	bls.n	800b4de <PxMessagingTask+0x14be>
 800b4dc:	e09e      	b.n	800b61c <PxMessagingTask+0x15fc>
 800b4de:	0083      	lsls	r3, r0, #2
 800b4e0:	4a7e      	ldr	r2, [pc, #504]	; (800b6dc <PxMessagingTask+0x16bc>)
 800b4e2:	58d3      	ldr	r3, [r2, r3]
 800b4e4:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b4e6:	2238      	movs	r2, #56	; 0x38
 800b4e8:	436a      	muls	r2, r5
 800b4ea:	4b78      	ldr	r3, [pc, #480]	; (800b6cc <PxMessagingTask+0x16ac>)
 800b4ec:	189b      	adds	r3, r3, r2
 800b4ee:	191f      	adds	r7, r3, r4
 800b4f0:	78bb      	ldrb	r3, [r7, #2]
 800b4f2:	021b      	lsls	r3, r3, #8
 800b4f4:	78fa      	ldrb	r2, [r7, #3]
 800b4f6:	0412      	lsls	r2, r2, #16
 800b4f8:	189b      	adds	r3, r3, r2
 800b4fa:	787a      	ldrb	r2, [r7, #1]
 800b4fc:	189b      	adds	r3, r3, r2
 800b4fe:	793a      	ldrb	r2, [r7, #4]
 800b500:	0612      	lsls	r2, r2, #24
 800b502:	189b      	adds	r3, r3, r2
 800b504:	4a76      	ldr	r2, [pc, #472]	; (800b6e0 <PxMessagingTask+0x16c0>)
 800b506:	6013      	str	r3, [r2, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b508:	79bb      	ldrb	r3, [r7, #6]
 800b50a:	021b      	lsls	r3, r3, #8
 800b50c:	79f9      	ldrb	r1, [r7, #7]
 800b50e:	0409      	lsls	r1, r1, #16
 800b510:	185b      	adds	r3, r3, r1
 800b512:	7979      	ldrb	r1, [r7, #5]
 800b514:	185b      	adds	r3, r3, r1
 800b516:	7a39      	ldrb	r1, [r7, #8]
 800b518:	0609      	lsls	r1, r1, #24
 800b51a:	185b      	adds	r3, r3, r1
 800b51c:	6053      	str	r3, [r2, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b51e:	7abb      	ldrb	r3, [r7, #10]
 800b520:	021b      	lsls	r3, r3, #8
 800b522:	7af9      	ldrb	r1, [r7, #11]
 800b524:	0409      	lsls	r1, r1, #16
 800b526:	185b      	adds	r3, r3, r1
 800b528:	7a79      	ldrb	r1, [r7, #9]
 800b52a:	185b      	adds	r3, r3, r1
 800b52c:	7b39      	ldrb	r1, [r7, #12]
 800b52e:	0609      	lsls	r1, r1, #24
 800b530:	185b      	adds	r3, r3, r1
 800b532:	6093      	str	r3, [r2, #8]
									break;
 800b534:	e072      	b.n	800b61c <PxMessagingTask+0x15fc>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b536:	2238      	movs	r2, #56	; 0x38
 800b538:	436a      	muls	r2, r5
 800b53a:	4b64      	ldr	r3, [pc, #400]	; (800b6cc <PxMessagingTask+0x16ac>)
 800b53c:	189b      	adds	r3, r3, r2
 800b53e:	191f      	adds	r7, r3, r4
 800b540:	78bb      	ldrb	r3, [r7, #2]
 800b542:	021b      	lsls	r3, r3, #8
 800b544:	78fa      	ldrb	r2, [r7, #3]
 800b546:	0412      	lsls	r2, r2, #16
 800b548:	189b      	adds	r3, r3, r2
 800b54a:	787a      	ldrb	r2, [r7, #1]
 800b54c:	189b      	adds	r3, r3, r2
 800b54e:	793a      	ldrb	r2, [r7, #4]
 800b550:	0612      	lsls	r2, r2, #24
 800b552:	189b      	adds	r3, r3, r2
 800b554:	4a62      	ldr	r2, [pc, #392]	; (800b6e0 <PxMessagingTask+0x16c0>)
 800b556:	60d3      	str	r3, [r2, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b558:	79bb      	ldrb	r3, [r7, #6]
 800b55a:	021b      	lsls	r3, r3, #8
 800b55c:	79f9      	ldrb	r1, [r7, #7]
 800b55e:	0409      	lsls	r1, r1, #16
 800b560:	185b      	adds	r3, r3, r1
 800b562:	7979      	ldrb	r1, [r7, #5]
 800b564:	185b      	adds	r3, r3, r1
 800b566:	7a39      	ldrb	r1, [r7, #8]
 800b568:	0609      	lsls	r1, r1, #24
 800b56a:	185b      	adds	r3, r3, r1
 800b56c:	6113      	str	r3, [r2, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b56e:	7abb      	ldrb	r3, [r7, #10]
 800b570:	021b      	lsls	r3, r3, #8
 800b572:	7af9      	ldrb	r1, [r7, #11]
 800b574:	0409      	lsls	r1, r1, #16
 800b576:	185b      	adds	r3, r3, r1
 800b578:	7a79      	ldrb	r1, [r7, #9]
 800b57a:	185b      	adds	r3, r3, r1
 800b57c:	7b39      	ldrb	r1, [r7, #12]
 800b57e:	0609      	lsls	r1, r1, #24
 800b580:	185b      	adds	r3, r3, r1
 800b582:	6153      	str	r3, [r2, #20]
									break;
 800b584:	e04a      	b.n	800b61c <PxMessagingTask+0x15fc>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b586:	2338      	movs	r3, #56	; 0x38
 800b588:	436b      	muls	r3, r5
 800b58a:	4a50      	ldr	r2, [pc, #320]	; (800b6cc <PxMessagingTask+0x16ac>)
 800b58c:	18d2      	adds	r2, r2, r3
 800b58e:	1912      	adds	r2, r2, r4
 800b590:	7893      	ldrb	r3, [r2, #2]
 800b592:	021b      	lsls	r3, r3, #8
 800b594:	78d1      	ldrb	r1, [r2, #3]
 800b596:	0409      	lsls	r1, r1, #16
 800b598:	185b      	adds	r3, r3, r1
 800b59a:	7851      	ldrb	r1, [r2, #1]
 800b59c:	185b      	adds	r3, r3, r1
 800b59e:	7912      	ldrb	r2, [r2, #4]
 800b5a0:	0612      	lsls	r2, r2, #24
 800b5a2:	189b      	adds	r3, r3, r2
 800b5a4:	4a4e      	ldr	r2, [pc, #312]	; (800b6e0 <PxMessagingTask+0x16c0>)
 800b5a6:	6193      	str	r3, [r2, #24]
									ADCPort =cMessage[port - 1][shift];
 800b5a8:	4b4e      	ldr	r3, [pc, #312]	; (800b6e4 <PxMessagingTask+0x16c4>)
 800b5aa:	8018      	strh	r0, [r3, #0]
									ADCSide =cMessage[port - 1][shift + 1];
 800b5ac:	2238      	movs	r2, #56	; 0x38
 800b5ae:	436a      	muls	r2, r5
 800b5b0:	4b46      	ldr	r3, [pc, #280]	; (800b6cc <PxMessagingTask+0x16ac>)
 800b5b2:	189b      	adds	r3, r3, r2
 800b5b4:	19db      	adds	r3, r3, r7
 800b5b6:	785b      	ldrb	r3, [r3, #1]
 800b5b8:	4a4b      	ldr	r2, [pc, #300]	; (800b6e8 <PxMessagingTask+0x16c8>)
 800b5ba:	8013      	strh	r3, [r2, #0]
									if(0 == ADCSide){
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d134      	bne.n	800b62a <PxMessagingTask+0x160a>
										ADCSelectChannel(ADCPort,"top");
 800b5c0:	4c4a      	ldr	r4, [pc, #296]	; (800b6ec <PxMessagingTask+0x16cc>)
 800b5c2:	0021      	movs	r1, r4
 800b5c4:	f7fd fbae 	bl	8008d24 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800b5c8:	4b46      	ldr	r3, [pc, #280]	; (800b6e4 <PxMessagingTask+0x16c4>)
 800b5ca:	7818      	ldrb	r0, [r3, #0]
 800b5cc:	4a48      	ldr	r2, [pc, #288]	; (800b6f0 <PxMessagingTask+0x16d0>)
 800b5ce:	0021      	movs	r1, r4
 800b5d0:	f7fd fbda 	bl	8008d88 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800b5d4:	4947      	ldr	r1, [pc, #284]	; (800b6f4 <PxMessagingTask+0x16d4>)
 800b5d6:	4848      	ldr	r0, [pc, #288]	; (800b6f8 <PxMessagingTask+0x16d8>)
 800b5d8:	f7fd fa1c 	bl	8008a14 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800b5dc:	4c3b      	ldr	r4, [pc, #236]	; (800b6cc <PxMessagingTask+0x16ac>)
 800b5de:	19a4      	adds	r4, r4, r6
 800b5e0:	5de0      	ldrb	r0, [r4, r7]
 800b5e2:	4b40      	ldr	r3, [pc, #256]	; (800b6e4 <PxMessagingTask+0x16c4>)
 800b5e4:	8018      	strh	r0, [r3, #0]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800b5e6:	4945      	ldr	r1, [pc, #276]	; (800b6fc <PxMessagingTask+0x16dc>)
 800b5e8:	f7fd fad2 	bl	8008b90 <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b5ec:	19e7      	adds	r7, r4, r7
 800b5ee:	79bb      	ldrb	r3, [r7, #6]
 800b5f0:	021b      	lsls	r3, r3, #8
 800b5f2:	79fa      	ldrb	r2, [r7, #7]
 800b5f4:	0412      	lsls	r2, r2, #16
 800b5f6:	189b      	adds	r3, r3, r2
 800b5f8:	797a      	ldrb	r2, [r7, #5]
 800b5fa:	189b      	adds	r3, r3, r2
 800b5fc:	7a3a      	ldrb	r2, [r7, #8]
 800b5fe:	0612      	lsls	r2, r2, #24
 800b600:	189b      	adds	r3, r3, r2
 800b602:	4a37      	ldr	r2, [pc, #220]	; (800b6e0 <PxMessagingTask+0x16c0>)
 800b604:	61d3      	str	r3, [r2, #28]
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b606:	7abb      	ldrb	r3, [r7, #10]
 800b608:	021b      	lsls	r3, r3, #8
 800b60a:	7af9      	ldrb	r1, [r7, #11]
 800b60c:	0409      	lsls	r1, r1, #16
 800b60e:	185b      	adds	r3, r3, r1
 800b610:	7a79      	ldrb	r1, [r7, #9]
 800b612:	185b      	adds	r3, r3, r1
 800b614:	7b39      	ldrb	r1, [r7, #12]
 800b616:	0609      	lsls	r1, r1, #24
 800b618:	185b      	adds	r3, r3, r1
 800b61a:	6213      	str	r3, [r2, #32]
							ACK_FLAG =1;
 800b61c:	4b38      	ldr	r3, [pc, #224]	; (800b700 <PxMessagingTask+0x16e0>)
 800b61e:	2201      	movs	r2, #1
 800b620:	701a      	strb	r2, [r3, #0]
							break;
 800b622:	2300      	movs	r3, #0
 800b624:	4699      	mov	r9, r3
 800b626:	f7fe fd67 	bl	800a0f8 <PxMessagingTask+0xd8>
									else if(1 == ADCSide){
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d1d2      	bne.n	800b5d4 <PxMessagingTask+0x15b4>
										ADCSelectChannel(ADCPort,"bottom");
 800b62e:	4c35      	ldr	r4, [pc, #212]	; (800b704 <PxMessagingTask+0x16e4>)
 800b630:	0021      	movs	r1, r4
 800b632:	f7fd fb77 	bl	8008d24 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800b636:	4b2b      	ldr	r3, [pc, #172]	; (800b6e4 <PxMessagingTask+0x16c4>)
 800b638:	7818      	ldrb	r0, [r3, #0]
 800b63a:	4a2d      	ldr	r2, [pc, #180]	; (800b6f0 <PxMessagingTask+0x16d0>)
 800b63c:	0021      	movs	r1, r4
 800b63e:	f7fd fba3 	bl	8008d88 <ReadADCChannel>
 800b642:	e7c7      	b.n	800b5d4 <PxMessagingTask+0x15b4>
							rejected_FLAG =1;
 800b644:	4b30      	ldr	r3, [pc, #192]	; (800b708 <PxMessagingTask+0x16e8>)
 800b646:	2201      	movs	r2, #1
 800b648:	701a      	strb	r2, [r3, #0]
							break;
 800b64a:	2300      	movs	r3, #0
 800b64c:	4699      	mov	r9, r3
 800b64e:	f7fe fd53 	bl	800a0f8 <PxMessagingTask+0xd8>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800b652:	9400      	str	r4, [sp, #0]
 800b654:	465b      	mov	r3, fp
 800b656:	9a04      	ldr	r2, [sp, #16]
 800b658:	9908      	ldr	r1, [sp, #32]
 800b65a:	0038      	movs	r0, r7
 800b65c:	f7fe fcde 	bl	800a01c <User_MessagingParser>
 800b660:	4681      	mov	r9, r0
							if(result == BOS_ERR_UnknownMessage){
 800b662:	2801      	cmp	r0, #1
 800b664:	d001      	beq.n	800b66a <PxMessagingTask+0x164a>
 800b666:	f7fe fd47 	bl	800a0f8 <PxMessagingTask+0xd8>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800b66a:	9400      	str	r4, [sp, #0]
 800b66c:	465b      	mov	r3, fp
 800b66e:	9a04      	ldr	r2, [sp, #16]
 800b670:	9908      	ldr	r1, [sp, #32]
 800b672:	0038      	movs	r0, r7
 800b674:	f001 f99e 	bl	800c9b4 <Module_MessagingTask>
 800b678:	4681      	mov	r9, r0
 800b67a:	f7fe fd38 	bl	800a0ee <PxMessagingTask+0xce>
								switch(cMessage[port - 1][1 + shift]) // requested format
 800b67e:	2300      	movs	r3, #0
 800b680:	4699      	mov	r9, r3
 800b682:	f7fe fd34 	bl	800a0ee <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 800b686:	2300      	movs	r3, #0
 800b688:	4699      	mov	r9, r3
 800b68a:	f7fe fd30 	bl	800a0ee <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 800b68e:	2300      	movs	r3, #0
 800b690:	4699      	mov	r9, r3
 800b692:	f7fe fd2c 	bl	800a0ee <PxMessagingTask+0xce>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800b696:	2200      	movs	r2, #0
 800b698:	2100      	movs	r1, #0
 800b69a:	9804      	ldr	r0, [sp, #16]
 800b69c:	f7fe f9a6 	bl	80099ec <SendMessageToModule>
			result =BOS_OK;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4699      	mov	r9, r3
 800b6a4:	f7fe fd28 	bl	800a0f8 <PxMessagingTask+0xd8>
					switch(code){
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	4699      	mov	r9, r3
 800b6ac:	f7fe fd24 	bl	800a0f8 <PxMessagingTask+0xd8>
 800b6b0:	9205      	str	r2, [sp, #20]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	4699      	mov	r9, r3
 800b6b6:	f7fe fd1f 	bl	800a0f8 <PxMessagingTask+0xd8>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	4699      	mov	r9, r3
 800b6be:	f7fe fd1b 	bl	800a0f8 <PxMessagingTask+0xd8>
 800b6c2:	46c0      	nop			; (mov r8, r8)
 800b6c4:	0001ffff 	.word	0x0001ffff
 800b6c8:	200010e8 	.word	0x200010e8
 800b6cc:	20000d1c 	.word	0x20000d1c
 800b6d0:	0801bf18 	.word	0x0801bf18
 800b6d4:	0000ffff 	.word	0x0000ffff
 800b6d8:	200010e0 	.word	0x200010e0
 800b6dc:	0801bf38 	.word	0x0801bf38
 800b6e0:	200017c0 	.word	0x200017c0
 800b6e4:	200017b0 	.word	0x200017b0
 800b6e8:	200017b2 	.word	0x200017b2
 800b6ec:	08019edc 	.word	0x08019edc
 800b6f0:	200017b4 	.word	0x200017b4
 800b6f4:	200017bc 	.word	0x200017bc
 800b6f8:	200017b8 	.word	0x200017b8
 800b6fc:	200017ac 	.word	0x200017ac
 800b700:	20000a84 	.word	0x20000a84
 800b704:	08019ee0 	.word	0x08019ee0
 800b708:	200010dc 	.word	0x200010dc
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800b70c:	455b      	cmp	r3, fp
 800b70e:	d003      	beq.n	800b718 <PxMessagingTask+0x16f8>
 800b710:	2f10      	cmp	r7, #16
 800b712:	d001      	beq.n	800b718 <PxMessagingTask+0x16f8>
 800b714:	f7fe fd4d 	bl	800a1b2 <PxMessagingTask+0x192>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b718:	465b      	mov	r3, fp
 800b71a:	2bff      	cmp	r3, #255	; 0xff
 800b71c:	d101      	bne.n	800b722 <PxMessagingTask+0x1702>
 800b71e:	f7fe fcb7 	bl	800a090 <PxMessagingTask+0x70>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b722:	2bfe      	cmp	r3, #254	; 0xfe
 800b724:	d001      	beq.n	800b72a <PxMessagingTask+0x170a>
 800b726:	f7fe fcdf 	bl	800a0e8 <PxMessagingTask+0xc8>
 800b72a:	4b2b      	ldr	r3, [pc, #172]	; (800b7d8 <PxMessagingTask+0x17b8>)
 800b72c:	5d5a      	ldrb	r2, [r3, r5]
 800b72e:	4b2b      	ldr	r3, [pc, #172]	; (800b7dc <PxMessagingTask+0x17bc>)
 800b730:	199b      	adds	r3, r3, r6
 800b732:	189b      	adds	r3, r3, r2
 800b734:	3b01      	subs	r3, #1
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	4a29      	ldr	r2, [pc, #164]	; (800b7e0 <PxMessagingTask+0x17c0>)
 800b73a:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800b73c:	2103      	movs	r1, #3
 800b73e:	4689      	mov	r9, r1
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b740:	429a      	cmp	r2, r3
 800b742:	d101      	bne.n	800b748 <PxMessagingTask+0x1728>
 800b744:	f7fe fcd3 	bl	800a0ee <PxMessagingTask+0xce>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800b748:	4a25      	ldr	r2, [pc, #148]	; (800b7e0 <PxMessagingTask+0x17c0>)
 800b74a:	7013      	strb	r3, [r2, #0]
 800b74c:	4a25      	ldr	r2, [pc, #148]	; (800b7e4 <PxMessagingTask+0x17c4>)
 800b74e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800b750:	9908      	ldr	r1, [sp, #32]
 800b752:	20fe      	movs	r0, #254	; 0xfe
 800b754:	f7fe f902 	bl	800995c <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800b758:	4b1f      	ldr	r3, [pc, #124]	; (800b7d8 <PxMessagingTask+0x17b8>)
 800b75a:	5d59      	ldrb	r1, [r3, r5]
 800b75c:	4b1f      	ldr	r3, [pc, #124]	; (800b7dc <PxMessagingTask+0x17bc>)
 800b75e:	199b      	adds	r3, r3, r6
 800b760:	185a      	adds	r2, r3, r1
 800b762:	3a01      	subs	r2, #1
 800b764:	2000      	movs	r0, #0
 800b766:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800b768:	1e8a      	subs	r2, r1, #2
 800b76a:	5c9c      	ldrb	r4, [r3, r2]
 800b76c:	9405      	str	r4, [sp, #20]
					for(i =0; i < temp; i++){
 800b76e:	2c00      	cmp	r4, #0
 800b770:	d02e      	beq.n	800b7d0 <PxMessagingTask+0x17b0>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b772:	1b13      	subs	r3, r2, r4
 800b774:	469c      	mov	ip, r3
 800b776:	4b1c      	ldr	r3, [pc, #112]	; (800b7e8 <PxMessagingTask+0x17c8>)
 800b778:	7818      	ldrb	r0, [r3, #0]
 800b77a:	4b18      	ldr	r3, [pc, #96]	; (800b7dc <PxMessagingTask+0x17bc>)
 800b77c:	199b      	adds	r3, r3, r6
 800b77e:	4662      	mov	r2, ip
 800b780:	5c9b      	ldrb	r3, [r3, r2]
 800b782:	4283      	cmp	r3, r0
 800b784:	d011      	beq.n	800b7aa <PxMessagingTask+0x178a>
 800b786:	4653      	mov	r3, sl
 800b788:	3301      	adds	r3, #1
 800b78a:	4463      	add	r3, ip
 800b78c:	4a13      	ldr	r2, [pc, #76]	; (800b7dc <PxMessagingTask+0x17bc>)
 800b78e:	189b      	adds	r3, r3, r2
 800b790:	3201      	adds	r2, #1
 800b792:	4452      	add	r2, sl
 800b794:	3c01      	subs	r4, #1
 800b796:	b2e4      	uxtb	r4, r4
 800b798:	1912      	adds	r2, r2, r4
 800b79a:	4462      	add	r2, ip
					for(i =0; i < temp; i++){
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d017      	beq.n	800b7d0 <PxMessagingTask+0x17b0>
 800b7a0:	3301      	adds	r3, #1
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b7a2:	1e5c      	subs	r4, r3, #1
 800b7a4:	7824      	ldrb	r4, [r4, #0]
 800b7a6:	4284      	cmp	r4, r0
 800b7a8:	d1f8      	bne.n	800b79c <PxMessagingTask+0x177c>
				shift +=4;
 800b7aa:	9c06      	ldr	r4, [sp, #24]
 800b7ac:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800b7ae:	1b0a      	subs	r2, r1, r4
 800b7b0:	b2d3      	uxtb	r3, r2
 800b7b2:	9306      	str	r3, [sp, #24]
 800b7b4:	f7fe fc90 	bl	800a0d8 <PxMessagingTask+0xb8>
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b7b8:	2338      	movs	r3, #56	; 0x38
 800b7ba:	436b      	muls	r3, r5
 800b7bc:	4a07      	ldr	r2, [pc, #28]	; (800b7dc <PxMessagingTask+0x17bc>)
 800b7be:	18d2      	adds	r2, r2, r3
 800b7c0:	464b      	mov	r3, r9
 800b7c2:	5cd3      	ldrb	r3, [r2, r3]
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	0098      	lsls	r0, r3, #2
 800b7c8:	4908      	ldr	r1, [pc, #32]	; (800b7ec <PxMessagingTask+0x17cc>)
 800b7ca:	5841      	ldr	r1, [r0, r1]
 800b7cc:	5dd2      	ldrb	r2, [r2, r7]
 800b7ce:	e450      	b.n	800b072 <PxMessagingTask+0x1052>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b7d0:	2366      	movs	r3, #102	; 0x66
 800b7d2:	4699      	mov	r9, r3
 800b7d4:	f7fe fc90 	bl	800a0f8 <PxMessagingTask+0xd8>
 800b7d8:	20000f0c 	.word	0x20000f0c
 800b7dc:	20000d1c 	.word	0x20000d1c
 800b7e0:	200017e6 	.word	0x200017e6
 800b7e4:	20000cc8 	.word	0x20000cc8
 800b7e8:	20001052 	.word	0x20001052
 800b7ec:	20006b7c 	.word	0x20006b7c

0800b7f0 <CheckForEnterKey>:
	return (state);
}
/*-----------------------------------------------------------*/

/* --- Check for CLI stop key --- */
static void CheckForEnterKey(void) {
 800b7f0:	b510      	push	{r4, lr}
 800b7f2:	b082      	sub	sp, #8
	stopB = 0;
 800b7f4:	4b18      	ldr	r3, [pc, #96]	; (800b858 <CheckForEnterKey+0x68>)
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	701a      	strb	r2, [r3, #0]
	// Look for ENTER key to stop the stream
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800b7fa:	4b18      	ldr	r3, [pc, #96]	; (800b85c <CheckForEnterKey+0x6c>)
 800b7fc:	781c      	ldrb	r4, [r3, #0]
 800b7fe:	3c01      	subs	r4, #1
 800b800:	0063      	lsls	r3, r4, #1
 800b802:	191b      	adds	r3, r3, r4
 800b804:	019b      	lsls	r3, r3, #6
 800b806:	4a16      	ldr	r2, [pc, #88]	; (800b860 <CheckForEnterKey+0x70>)
 800b808:	5c9b      	ldrb	r3, [r3, r2]
 800b80a:	2b0d      	cmp	r3, #13
 800b80c:	d00c      	beq.n	800b828 <CheckForEnterKey+0x38>
 800b80e:	0061      	lsls	r1, r4, #1
 800b810:	1909      	adds	r1, r1, r4
 800b812:	0189      	lsls	r1, r1, #6
 800b814:	1889      	adds	r1, r1, r2
 800b816:	2301      	movs	r3, #1
 800b818:	0018      	movs	r0, r3
 800b81a:	5cca      	ldrb	r2, [r1, r3]
 800b81c:	2a0d      	cmp	r2, #13
 800b81e:	d004      	beq.n	800b82a <CheckForEnterKey+0x3a>
 800b820:	3301      	adds	r3, #1
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
 800b822:	2bc0      	cmp	r3, #192	; 0xc0
 800b824:	d1f8      	bne.n	800b818 <CheckForEnterKey+0x28>
 800b826:	e014      	b.n	800b852 <CheckForEnterKey+0x62>
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800b828:	2000      	movs	r0, #0
			UARTRxBuf[PcPort - 1][chr] = 0;
 800b82a:	0063      	lsls	r3, r4, #1
 800b82c:	191c      	adds	r4, r3, r4
 800b82e:	01a4      	lsls	r4, r4, #6
 800b830:	4b0b      	ldr	r3, [pc, #44]	; (800b860 <CheckForEnterKey+0x70>)
 800b832:	191c      	adds	r4, r3, r4
 800b834:	2300      	movs	r3, #0
 800b836:	5423      	strb	r3, [r4, r0]
			mosfetMode = REQ_STOP;		// Stop the streaming task
 800b838:	4a0a      	ldr	r2, [pc, #40]	; (800b864 <CheckForEnterKey+0x74>)
 800b83a:	210e      	movs	r1, #14
 800b83c:	7011      	strb	r1, [r2, #0]
			xTimerStop(xTimerSwitch, 0); // Stop any running timeout timer
 800b83e:	4a0a      	ldr	r2, [pc, #40]	; (800b868 <CheckForEnterKey+0x78>)
 800b840:	6810      	ldr	r0, [r2, #0]
 800b842:	9300      	str	r3, [sp, #0]
 800b844:	2200      	movs	r2, #0
 800b846:	390b      	subs	r1, #11
 800b848:	f004 fddc 	bl	8010404 <xTimerGenericCommand>
			stopB = 1;
 800b84c:	4b02      	ldr	r3, [pc, #8]	; (800b858 <CheckForEnterKey+0x68>)
 800b84e:	2201      	movs	r2, #1
 800b850:	701a      	strb	r2, [r3, #0]
			break;
		}
	}
}
 800b852:	b002      	add	sp, #8
 800b854:	bd10      	pop	{r4, pc}
 800b856:	46c0      	nop			; (mov r8, r8)
 800b858:	200019b9 	.word	0x200019b9
 800b85c:	20000a88 	.word	0x20000a88
 800b860:	200012a8 	.word	0x200012a8
 800b864:	20006f34 	.word	0x20006f34
 800b868:	200019c0 	.word	0x200019c0

0800b86c <SendMeasurementResult>:
		uint8_t port, float *Buffer) {
 800b86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b86e:	b085      	sub	sp, #20
 800b870:	1c0f      	adds	r7, r1, #0
 800b872:	0015      	movs	r5, r2
 800b874:	001e      	movs	r6, r3
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800b876:	f003 f9cb 	bl	800ec10 <FreeRTOS_CLIGetOutputBuffer>
 800b87a:	0004      	movs	r4, r0
	message = value;
 800b87c:	9703      	str	r7, [sp, #12]
	switch (mosfetMode) {
 800b87e:	4b4a      	ldr	r3, [pc, #296]	; (800b9a8 <SendMeasurementResult+0x13c>)
 800b880:	781a      	ldrb	r2, [r3, #0]
 800b882:	2a0c      	cmp	r2, #12
 800b884:	d81c      	bhi.n	800b8c0 <SendMeasurementResult+0x54>
 800b886:	0093      	lsls	r3, r2, #2
 800b888:	4a48      	ldr	r2, [pc, #288]	; (800b9ac <SendMeasurementResult+0x140>)
 800b88a:	58d3      	ldr	r3, [r2, r3]
 800b88c:	469f      	mov	pc, r3
			sprintf((char*) pcOutputString, (char*) pcCurrentMsg, message);
 800b88e:	1c38      	adds	r0, r7, #0
 800b890:	f7f7 fa7e 	bl	8002d90 <__aeabi_f2d>
 800b894:	0002      	movs	r2, r0
 800b896:	000b      	movs	r3, r1
 800b898:	4945      	ldr	r1, [pc, #276]	; (800b9b0 <SendMeasurementResult+0x144>)
 800b89a:	0020      	movs	r0, r4
 800b89c:	f009 fb0a 	bl	8014eb4 <sprintf>
					strlen((char*) pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800b8a0:	0020      	movs	r0, r4
 800b8a2:	f7f4 fc39 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800b8a6:	23fa      	movs	r3, #250	; 0xfa
 800b8a8:	b282      	uxth	r2, r0
 800b8aa:	4942      	ldr	r1, [pc, #264]	; (800b9b4 <SendMeasurementResult+0x148>)
 800b8ac:	7808      	ldrb	r0, [r1, #0]
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	4249      	negs	r1, r1
 800b8b2:	9100      	str	r1, [sp, #0]
 800b8b4:	005b      	lsls	r3, r3, #1
 800b8b6:	0021      	movs	r1, r4
 800b8b8:	f002 ff68 	bl	800e78c <writePxMutex>
			CheckForEnterKey();
 800b8bc:	f7ff ff98 	bl	800b7f0 <CheckForEnterKey>
}
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	b005      	add	sp, #20
 800b8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char*) pcOutputString, (char*) pcCurrentVerboseMsg, message);
 800b8c6:	1c38      	adds	r0, r7, #0
 800b8c8:	f7f7 fa62 	bl	8002d90 <__aeabi_f2d>
 800b8cc:	0002      	movs	r2, r0
 800b8ce:	000b      	movs	r3, r1
 800b8d0:	4939      	ldr	r1, [pc, #228]	; (800b9b8 <SendMeasurementResult+0x14c>)
 800b8d2:	0020      	movs	r0, r4
 800b8d4:	f009 faee 	bl	8014eb4 <sprintf>
					strlen((char*) pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800b8d8:	0020      	movs	r0, r4
 800b8da:	f7f4 fc1d 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800b8de:	23fa      	movs	r3, #250	; 0xfa
 800b8e0:	b282      	uxth	r2, r0
 800b8e2:	4934      	ldr	r1, [pc, #208]	; (800b9b4 <SendMeasurementResult+0x148>)
 800b8e4:	7808      	ldrb	r0, [r1, #0]
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	4249      	negs	r1, r1
 800b8ea:	9100      	str	r1, [sp, #0]
 800b8ec:	005b      	lsls	r3, r3, #1
 800b8ee:	0021      	movs	r1, r4
 800b8f0:	f002 ff4c 	bl	800e78c <writePxMutex>
			CheckForEnterKey();
 800b8f4:	f7ff ff7c 	bl	800b7f0 <CheckForEnterKey>
			break;
 800b8f8:	e7e2      	b.n	800b8c0 <SendMeasurementResult+0x54>
			if (module == myID) {
 800b8fa:	4b30      	ldr	r3, [pc, #192]	; (800b9bc <SendMeasurementResult+0x150>)
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	42ab      	cmp	r3, r5
 800b900:	d010      	beq.n	800b924 <SendMeasurementResult+0xb8>
				messageParams[0] = port;
 800b902:	4b2f      	ldr	r3, [pc, #188]	; (800b9c0 <SendMeasurementResult+0x154>)
 800b904:	701e      	strb	r6, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&message) + 3);
 800b906:	aa03      	add	r2, sp, #12
 800b908:	78d1      	ldrb	r1, [r2, #3]
 800b90a:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&message) + 2);
 800b90c:	7891      	ldrb	r1, [r2, #2]
 800b90e:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&message) + 1);
 800b910:	7851      	ldrb	r1, [r2, #1]
 800b912:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&message) + 0);
 800b914:	7812      	ldrb	r2, [r2, #0]
 800b916:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(module, CODE_PORT_FORWARD,
 800b918:	2205      	movs	r2, #5
 800b91a:	2123      	movs	r1, #35	; 0x23
 800b91c:	0028      	movs	r0, r5
 800b91e:	f7fe f865 	bl	80099ec <SendMessageToModule>
 800b922:	e7cd      	b.n	800b8c0 <SendMeasurementResult+0x54>
				temp[0] = *((__IO uint8_t*) (&message) + 3);
 800b924:	ab03      	add	r3, sp, #12
 800b926:	78da      	ldrb	r2, [r3, #3]
 800b928:	4926      	ldr	r1, [pc, #152]	; (800b9c4 <SendMeasurementResult+0x158>)
 800b92a:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&message) + 2);
 800b92c:	789a      	ldrb	r2, [r3, #2]
 800b92e:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&message) + 1);
 800b930:	785a      	ldrb	r2, [r3, #1]
 800b932:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&message) + 0);
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	70cb      	strb	r3, [r1, #3]
				writePxMutex(port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800b938:	230a      	movs	r3, #10
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	2204      	movs	r2, #4
 800b93e:	0030      	movs	r0, r6
 800b940:	f002 ff24 	bl	800e78c <writePxMutex>
 800b944:	e7bc      	b.n	800b8c0 <SendMeasurementResult+0x54>
			memcpy(Buffer, &message, sizeof(float));
 800b946:	2204      	movs	r2, #4
 800b948:	a903      	add	r1, sp, #12
 800b94a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b94c:	f009 f8af 	bl	8014aae <memcpy>
			break;
 800b950:	e7b6      	b.n	800b8c0 <SendMeasurementResult+0x54>
			strcpy((char*) pcOutputString, (char*) pcOutTimeout);
 800b952:	220a      	movs	r2, #10
 800b954:	491c      	ldr	r1, [pc, #112]	; (800b9c8 <SendMeasurementResult+0x15c>)
 800b956:	f009 f8aa 	bl	8014aae <memcpy>
				strlen((char*) pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800b95a:	0020      	movs	r0, r4
 800b95c:	f7f4 fbdc 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800b960:	23fa      	movs	r3, #250	; 0xfa
 800b962:	b282      	uxth	r2, r0
 800b964:	4913      	ldr	r1, [pc, #76]	; (800b9b4 <SendMeasurementResult+0x148>)
 800b966:	7808      	ldrb	r0, [r1, #0]
 800b968:	2101      	movs	r1, #1
 800b96a:	4249      	negs	r1, r1
 800b96c:	9100      	str	r1, [sp, #0]
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	0021      	movs	r1, r4
 800b972:	f002 ff0b 	bl	800e78c <writePxMutex>
			CheckForEnterKey();
 800b976:	f7ff ff3b 	bl	800b7f0 <CheckForEnterKey>
			break;
 800b97a:	e7a1      	b.n	800b8c0 <SendMeasurementResult+0x54>
			sprintf((char*) pcOutputString, (char*) pcCurrentVerboseMsg, 0);
 800b97c:	2200      	movs	r2, #0
 800b97e:	490e      	ldr	r1, [pc, #56]	; (800b9b8 <SendMeasurementResult+0x14c>)
 800b980:	f009 fa98 	bl	8014eb4 <sprintf>
				strlen((char*) pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800b984:	0020      	movs	r0, r4
 800b986:	f7f4 fbc7 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800b98a:	23fa      	movs	r3, #250	; 0xfa
 800b98c:	b282      	uxth	r2, r0
 800b98e:	4909      	ldr	r1, [pc, #36]	; (800b9b4 <SendMeasurementResult+0x148>)
 800b990:	7808      	ldrb	r0, [r1, #0]
 800b992:	2101      	movs	r1, #1
 800b994:	4249      	negs	r1, r1
 800b996:	9100      	str	r1, [sp, #0]
 800b998:	005b      	lsls	r3, r3, #1
 800b99a:	0021      	movs	r1, r4
 800b99c:	f002 fef6 	bl	800e78c <writePxMutex>
			CheckForEnterKey();
 800b9a0:	f7ff ff26 	bl	800b7f0 <CheckForEnterKey>
			break;
 800b9a4:	e78c      	b.n	800b8c0 <SendMeasurementResult+0x54>
 800b9a6:	46c0      	nop			; (mov r8, r8)
 800b9a8:	20006f34 	.word	0x20006f34
 800b9ac:	0801bfe8 	.word	0x0801bfe8
 800b9b0:	0801c0d0 	.word	0x0801c0d0
 800b9b4:	20000a88 	.word	0x20000a88
 800b9b8:	0801c0e0 	.word	0x0801c0e0
 800b9bc:	20001052 	.word	0x20001052
 800b9c0:	20000f14 	.word	0x20000f14
 800b9c4:	200019bc 	.word	0x200019bc
 800b9c8:	0801c0e8 	.word	0x0801c0e8

0800b9cc <ledModeCommand>:
}

/*-----------------------------------------------------------*/

portBASE_TYPE ledModeCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800b9cc:	b530      	push	{r4, r5, lr}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	0005      	movs	r5, r0
 800b9d2:	0010      	movs	r0, r2
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	9301      	str	r3, [sp, #4]

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800b9d8:	2d00      	cmp	r5, #0
 800b9da:	d101      	bne.n	800b9e0 <ledModeCommand+0x14>
 800b9dc:	b672      	cpsid	i
 800b9de:	e7fe      	b.n	800b9de <ledModeCommand+0x12>

	/* Obtain the 1st parameter string. */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800b9e0:	aa01      	add	r2, sp, #4
 800b9e2:	2101      	movs	r1, #1
 800b9e4:	f003 f918 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 800b9e8:	0004      	movs	r4, r0
	1, /* Return the first parameter. */
	&xParameterStringLength1 /* Store the parameter string length. */
	);
	if (!strcmp((char*) pcParameterString1, "on")
 800b9ea:	4918      	ldr	r1, [pc, #96]	; (800ba4c <ledModeCommand+0x80>)
 800b9ec:	f7f4 fb8a 	bl	8000104 <strcmp>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	d005      	beq.n	800ba00 <ledModeCommand+0x34>
			|| !strcmp((char*) pcParameterString1, "ON"))
 800b9f4:	4916      	ldr	r1, [pc, #88]	; (800ba50 <ledModeCommand+0x84>)
 800b9f6:	0020      	movs	r0, r4
 800b9f8:	f7f4 fb84 	bl	8000104 <strcmp>
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	d10a      	bne.n	800ba16 <ledModeCommand+0x4a>
		SwitchindMode = 1;
 800ba00:	4b14      	ldr	r3, [pc, #80]	; (800ba54 <ledModeCommand+0x88>)
 800ba02:	2201      	movs	r2, #1
 800ba04:	701a      	strb	r2, [r3, #0]
			|| !strcmp((char*) pcParameterString1, "OFF"))
		SwitchindMode = 0;

	/* Respond to the command */
	if (SwitchindMode) {
		strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 800ba06:	222e      	movs	r2, #46	; 0x2e
 800ba08:	4913      	ldr	r1, [pc, #76]	; (800ba58 <ledModeCommand+0x8c>)
 800ba0a:	0028      	movs	r0, r5
 800ba0c:	f009 f84f 	bl	8014aae <memcpy>
	}

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800ba10:	2000      	movs	r0, #0
 800ba12:	b003      	add	sp, #12
 800ba14:	bd30      	pop	{r4, r5, pc}
	else if (!strcmp((char*) pcParameterString1, "off")
 800ba16:	4911      	ldr	r1, [pc, #68]	; (800ba5c <ledModeCommand+0x90>)
 800ba18:	0020      	movs	r0, r4
 800ba1a:	f7f4 fb73 	bl	8000104 <strcmp>
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d005      	beq.n	800ba2e <ledModeCommand+0x62>
			|| !strcmp((char*) pcParameterString1, "OFF"))
 800ba22:	490f      	ldr	r1, [pc, #60]	; (800ba60 <ledModeCommand+0x94>)
 800ba24:	0020      	movs	r0, r4
 800ba26:	f7f4 fb6d 	bl	8000104 <strcmp>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d108      	bne.n	800ba40 <ledModeCommand+0x74>
		SwitchindMode = 0;
 800ba2e:	4b09      	ldr	r3, [pc, #36]	; (800ba54 <ledModeCommand+0x88>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 800ba34:	222f      	movs	r2, #47	; 0x2f
 800ba36:	490b      	ldr	r1, [pc, #44]	; (800ba64 <ledModeCommand+0x98>)
 800ba38:	0028      	movs	r0, r5
 800ba3a:	f009 f838 	bl	8014aae <memcpy>
 800ba3e:	e7e7      	b.n	800ba10 <ledModeCommand+0x44>
	if (SwitchindMode) {
 800ba40:	4b04      	ldr	r3, [pc, #16]	; (800ba54 <ledModeCommand+0x88>)
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d0f5      	beq.n	800ba34 <ledModeCommand+0x68>
 800ba48:	e7dd      	b.n	800ba06 <ledModeCommand+0x3a>
 800ba4a:	46c0      	nop			; (mov r8, r8)
 800ba4c:	0801b2d8 	.word	0x0801b2d8
 800ba50:	0801c100 	.word	0x0801c100
 800ba54:	200019b1 	.word	0x200019b1
 800ba58:	0801c10c 	.word	0x0801c10c
 800ba5c:	0801c104 	.word	0x0801c104
 800ba60:	0801c108 	.word	0x0801c108
 800ba64:	0801c13c 	.word	0x0801c13c

0800ba68 <SystemClock_Config>:
void SystemClock_Config(void) {
 800ba68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba6a:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ba6c:	2401      	movs	r4, #1
 800ba6e:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ba70:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ba72:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800ba74:	2310      	movs	r3, #16
 800ba76:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ba78:	2702      	movs	r7, #2
 800ba7a:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ba7c:	2680      	movs	r6, #128	; 0x80
 800ba7e:	0276      	lsls	r6, r6, #9
 800ba80:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800ba82:	2380      	movs	r3, #128	; 0x80
 800ba84:	035b      	lsls	r3, r3, #13
 800ba86:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800ba88:	2500      	movs	r5, #0
 800ba8a:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800ba8c:	a80d      	add	r0, sp, #52	; 0x34
 800ba8e:	f006 fcd3 	bl	8012438 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800ba92:	2307      	movs	r3, #7
 800ba94:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ba96:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ba98:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800ba9a:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	a809      	add	r0, sp, #36	; 0x24
 800baa0:	f006 ff8c 	bl	80129bc <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800baa4:	4b1a      	ldr	r3, [pc, #104]	; (800bb10 <SystemClock_Config+0xa8>)
 800baa6:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800baa8:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800baaa:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800baac:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800baae:	a802      	add	r0, sp, #8
 800bab0:	f007 f932 	bl	8012d18 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800bab4:	4d17      	ldr	r5, [pc, #92]	; (800bb14 <SystemClock_Config+0xac>)
 800bab6:	69ea      	ldr	r2, [r5, #28]
 800bab8:	2180      	movs	r1, #128	; 0x80
 800baba:	0549      	lsls	r1, r1, #21
 800babc:	430a      	orrs	r2, r1
 800babe:	61ea      	str	r2, [r5, #28]
 800bac0:	69eb      	ldr	r3, [r5, #28]
 800bac2:	400b      	ands	r3, r1
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800bac8:	f006 fcac 	bl	8012424 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800bacc:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800bace:	23c0      	movs	r3, #192	; 0xc0
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800bad4:	a802      	add	r0, sp, #8
 800bad6:	f007 f91f 	bl	8012d18 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800bada:	f007 f8f9 	bl	8012cd0 <HAL_RCC_GetHCLKFreq>
 800bade:	21fa      	movs	r1, #250	; 0xfa
 800bae0:	0089      	lsls	r1, r1, #2
 800bae2:	f7f4 fb35 	bl	8000150 <__udivsi3>
 800bae6:	f005 fb9b 	bl	8011220 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800baea:	2004      	movs	r0, #4
 800baec:	f005 fbb4 	bl	8011258 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE()
 800baf0:	69ab      	ldr	r3, [r5, #24]
 800baf2:	4323      	orrs	r3, r4
 800baf4:	61ab      	str	r3, [r5, #24]
 800baf6:	69ab      	ldr	r3, [r5, #24]
 800baf8:	401c      	ands	r4, r3
 800bafa:	9401      	str	r4, [sp, #4]
 800bafc:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800bafe:	2001      	movs	r0, #1
 800bb00:	2200      	movs	r2, #0
 800bb02:	2100      	movs	r1, #0
 800bb04:	4240      	negs	r0, r0
 800bb06:	f005 fb43 	bl	8011190 <HAL_NVIC_SetPriority>
}
 800bb0a:	b01b      	add	sp, #108	; 0x6c
 800bb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb0e:	46c0      	nop			; (mov r8, r8)
 800bb10:	00040003 	.word	0x00040003
 800bb14:	40021000 	.word	0x40021000

0800bb18 <SaveToRO>:
uint8_t SaveToRO(void) {
 800bb18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb1a:	46de      	mov	lr, fp
 800bb1c:	4657      	mov	r7, sl
 800bb1e:	464e      	mov	r6, r9
 800bb20:	4645      	mov	r5, r8
 800bb22:	b5e0      	push	{r5, r6, r7, lr}
 800bb24:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 800bb26:	2215      	movs	r2, #21
 800bb28:	2100      	movs	r1, #0
 800bb2a:	a802      	add	r0, sp, #8
 800bb2c:	f008 ffc8 	bl	8014ac0 <memset>
	HAL_FLASH_Unlock();
 800bb30:	f006 f9c4 	bl	8011ebc <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800bb34:	4872      	ldr	r0, [pc, #456]	; (800bd00 <SaveToRO+0x1e8>)
 800bb36:	f006 fa83 	bl	8012040 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 800bb3a:	4872      	ldr	r0, [pc, #456]	; (800bd04 <SaveToRO+0x1ec>)
 800bb3c:	f006 f9da 	bl	8011ef4 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK) {
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d112      	bne.n	800bb6a <SaveToRO+0x52>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800bb44:	4a70      	ldr	r2, [pc, #448]	; (800bd08 <SaveToRO+0x1f0>)
 800bb46:	6913      	ldr	r3, [r2, #16]
 800bb48:	2102      	movs	r1, #2
 800bb4a:	438b      	bics	r3, r1
 800bb4c:	6113      	str	r3, [r2, #16]
	if (myID) {
 800bb4e:	4b6f      	ldr	r3, [pc, #444]	; (800bd0c <SaveToRO+0x1f4>)
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d113      	bne.n	800bb7e <SaveToRO+0x66>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800bb56:	4b6e      	ldr	r3, [pc, #440]	; (800bd10 <SaveToRO+0x1f8>)
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d100      	bne.n	800bb60 <SaveToRO+0x48>
 800bb5e:	e0ca      	b.n	800bcf6 <SaveToRO+0x1de>
 800bb60:	2500      	movs	r5, #0
 800bb62:	4c6c      	ldr	r4, [pc, #432]	; (800bd14 <SaveToRO+0x1fc>)
		if (snippets[s].cond.conditionType) {
 800bb64:	4b6c      	ldr	r3, [pc, #432]	; (800bd18 <SaveToRO+0x200>)
 800bb66:	4698      	mov	r8, r3
 800bb68:	e06e      	b.n	800bc48 <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800bb6a:	4b6c      	ldr	r3, [pc, #432]	; (800bd1c <SaveToRO+0x204>)
 800bb6c:	69d8      	ldr	r0, [r3, #28]
 800bb6e:	b2c0      	uxtb	r0, r0
}
 800bb70:	b009      	add	sp, #36	; 0x24
 800bb72:	bc3c      	pop	{r2, r3, r4, r5}
 800bb74:	4690      	mov	r8, r2
 800bb76:	4699      	mov	r9, r3
 800bb78:	46a2      	mov	sl, r4
 800bb7a:	46ab      	mov	fp, r5
 800bb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 800bb7e:	4a68      	ldr	r2, [pc, #416]	; (800bd20 <SaveToRO+0x208>)
 800bb80:	7812      	ldrb	r2, [r2, #0]
 800bb82:	0212      	lsls	r2, r2, #8
 800bb84:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800bb86:	b292      	uxth	r2, r2
 800bb88:	2300      	movs	r3, #0
 800bb8a:	495d      	ldr	r1, [pc, #372]	; (800bd00 <SaveToRO+0x1e8>)
 800bb8c:	2001      	movs	r0, #1
 800bb8e:	f006 f9df 	bl	8011f50 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 800bb92:	485c      	ldr	r0, [pc, #368]	; (800bd04 <SaveToRO+0x1ec>)
 800bb94:	f006 f9ae 	bl	8011ef4 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d111      	bne.n	800bbc0 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bb9c:	4a5a      	ldr	r2, [pc, #360]	; (800bd08 <SaveToRO+0x1f0>)
 800bb9e:	6913      	ldr	r3, [r2, #16]
 800bba0:	2101      	movs	r1, #1
 800bba2:	438b      	bics	r3, r1
 800bba4:	6113      	str	r3, [r2, #16]
		for (uint8_t i = 1; i <= N; i++) {
 800bba6:	4b5e      	ldr	r3, [pc, #376]	; (800bd20 <SaveToRO+0x208>)
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800bbae:	2502      	movs	r5, #2
		for (uint8_t i = 1; i <= N; i++) {
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d0d0      	beq.n	800bb56 <SaveToRO+0x3e>
 800bbb4:	2316      	movs	r3, #22
 800bbb6:	469b      	mov	fp, r3
 800bbb8:	4b5a      	ldr	r3, [pc, #360]	; (800bd24 <SaveToRO+0x20c>)
 800bbba:	469a      	mov	sl, r3
				if (array[i - 1][0]) {
 800bbbc:	4698      	mov	r8, r3
 800bbbe:	e02a      	b.n	800bc16 <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800bbc0:	4b56      	ldr	r3, [pc, #344]	; (800bd1c <SaveToRO+0x204>)
 800bbc2:	69d8      	ldr	r0, [r3, #28]
 800bbc4:	b2c0      	uxtb	r0, r0
 800bbc6:	e7d3      	b.n	800bb70 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800bbc8:	4b54      	ldr	r3, [pc, #336]	; (800bd1c <SaveToRO+0x204>)
 800bbca:	69d8      	ldr	r0, [r3, #28]
 800bbcc:	b2c0      	uxtb	r0, r0
 800bbce:	e7cf      	b.n	800bb70 <SaveToRO+0x58>
 800bbd0:	3402      	adds	r4, #2
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800bbd2:	42b4      	cmp	r4, r6
 800bbd4:	d017      	beq.n	800bc06 <SaveToRO+0xee>
				if (array[i - 1][0]) {
 800bbd6:	4643      	mov	r3, r8
 800bbd8:	5afb      	ldrh	r3, [r7, r3]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d0f8      	beq.n	800bbd0 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800bbde:	8822      	ldrh	r2, [r4, #0]
 800bbe0:	4b47      	ldr	r3, [pc, #284]	; (800bd00 <SaveToRO+0x1e8>)
 800bbe2:	18e9      	adds	r1, r5, r3
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	2001      	movs	r0, #1
 800bbe8:	f006 f9b2 	bl	8011f50 <HAL_FLASH_Program>
					add += 2;
 800bbec:	3502      	adds	r5, #2
 800bbee:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation(
 800bbf0:	4844      	ldr	r0, [pc, #272]	; (800bd04 <SaveToRO+0x1ec>)
 800bbf2:	f006 f97f 	bl	8011ef4 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	d1e6      	bne.n	800bbc8 <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bbfa:	4a43      	ldr	r2, [pc, #268]	; (800bd08 <SaveToRO+0x1f0>)
 800bbfc:	6913      	ldr	r3, [r2, #16]
 800bbfe:	2101      	movs	r1, #1
 800bc00:	438b      	bics	r3, r1
 800bc02:	6113      	str	r3, [r2, #16]
 800bc04:	e7e4      	b.n	800bbd0 <SaveToRO+0xb8>
		for (uint8_t i = 1; i <= N; i++) {
 800bc06:	464b      	mov	r3, r9
 800bc08:	3301      	adds	r3, #1
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	4699      	mov	r9, r3
 800bc0e:	4b44      	ldr	r3, [pc, #272]	; (800bd20 <SaveToRO+0x208>)
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	454b      	cmp	r3, r9
 800bc14:	d39f      	bcc.n	800bb56 <SaveToRO+0x3e>
 800bc16:	465e      	mov	r6, fp
 800bc18:	464b      	mov	r3, r9
 800bc1a:	435e      	muls	r6, r3
 800bc1c:	0034      	movs	r4, r6
 800bc1e:	3c16      	subs	r4, #22
 800bc20:	4454      	add	r4, sl
 800bc22:	4456      	add	r6, sl
				if (array[i - 1][0]) {
 800bc24:	1e5f      	subs	r7, r3, #1
 800bc26:	465b      	mov	r3, fp
 800bc28:	435f      	muls	r7, r3
 800bc2a:	e7d4      	b.n	800bbd6 <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800bc2c:	4b3b      	ldr	r3, [pc, #236]	; (800bd1c <SaveToRO+0x204>)
 800bc2e:	69d8      	ldr	r0, [r3, #28]
 800bc30:	b2c0      	uxtb	r0, r0
 800bc32:	e79d      	b.n	800bb70 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800bc34:	4b39      	ldr	r3, [pc, #228]	; (800bd1c <SaveToRO+0x204>)
 800bc36:	69d8      	ldr	r0, [r3, #28]
 800bc38:	b2c0      	uxtb	r0, r0
 800bc3a:	e799      	b.n	800bb70 <SaveToRO+0x58>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800bc3c:	3501      	adds	r5, #1
 800bc3e:	b2ed      	uxtb	r5, r5
 800bc40:	4b33      	ldr	r3, [pc, #204]	; (800bd10 <SaveToRO+0x1f8>)
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	42ab      	cmp	r3, r5
 800bc46:	d956      	bls.n	800bcf6 <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) {
 800bc48:	9501      	str	r5, [sp, #4]
 800bc4a:	00ab      	lsls	r3, r5, #2
 800bc4c:	195b      	adds	r3, r3, r5
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4642      	mov	r2, r8
 800bc52:	5c9b      	ldrb	r3, [r3, r2]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d0f1      	beq.n	800bc3c <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800bc58:	23fe      	movs	r3, #254	; 0xfe
 800bc5a:	aa02      	add	r2, sp, #8
 800bc5c:	7013      	strb	r3, [r2, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 800bc5e:	00a9      	lsls	r1, r5, #2
 800bc60:	1949      	adds	r1, r1, r5
 800bc62:	0089      	lsls	r1, r1, #2
 800bc64:	4b2c      	ldr	r3, [pc, #176]	; (800bd18 <SaveToRO+0x200>)
 800bc66:	469c      	mov	ip, r3
 800bc68:	4461      	add	r1, ip
 800bc6a:	2214      	movs	r2, #20
 800bc6c:	ab02      	add	r3, sp, #8
 800bc6e:	1c58      	adds	r0, r3, #1
 800bc70:	f008 ff1d 	bl	8014aae <memcpy>
 800bc74:	2314      	movs	r3, #20
 800bc76:	469b      	mov	fp, r3
 800bc78:	44a3      	add	fp, r4
						*(uint16_t*) &snipBuffer[j * 2]);
 800bc7a:	ae02      	add	r6, sp, #8
 800bc7c:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bc7e:	4f22      	ldr	r7, [pc, #136]	; (800bd08 <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800bc80:	5b32      	ldrh	r2, [r6, r4]
 800bc82:	2300      	movs	r3, #0
 800bc84:	0021      	movs	r1, r4
 800bc86:	2001      	movs	r0, #1
 800bc88:	f006 f962 	bl	8011f50 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800bc8c:	481d      	ldr	r0, [pc, #116]	; (800bd04 <SaveToRO+0x1ec>)
 800bc8e:	f006 f931 	bl	8011ef4 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d1ca      	bne.n	800bc2c <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	4393      	bics	r3, r2
 800bc9c:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800bc9e:	3402      	adds	r4, #2
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800bca0:	455c      	cmp	r4, fp
 800bca2:	d1ed      	bne.n	800bc80 <SaveToRO+0x168>
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800bca4:	2700      	movs	r7, #0
 800bca6:	9a01      	ldr	r2, [sp, #4]
 800bca8:	0093      	lsls	r3, r2, #2
 800bcaa:	189e      	adds	r6, r3, r2
 800bcac:	00b6      	lsls	r6, r6, #2
 800bcae:	4b1a      	ldr	r3, [pc, #104]	; (800bd18 <SaveToRO+0x200>)
 800bcb0:	469a      	mov	sl, r3
 800bcb2:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bcb4:	4b14      	ldr	r3, [pc, #80]	; (800bd08 <SaveToRO+0x1f0>)
 800bcb6:	469b      	mov	fp, r3
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800bcb8:	4653      	mov	r3, sl
 800bcba:	68de      	ldr	r6, [r3, #12]
 800bcbc:	0030      	movs	r0, r6
 800bcbe:	f7f4 fa2b 	bl	8000118 <strlen>
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	0840      	lsrs	r0, r0, #1
 800bcc6:	4287      	cmp	r7, r0
 800bcc8:	d2b8      	bcs.n	800bc3c <SaveToRO+0x124>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 800bcca:	007b      	lsls	r3, r7, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800bccc:	5af2      	ldrh	r2, [r6, r3]
 800bcce:	2300      	movs	r3, #0
 800bcd0:	0021      	movs	r1, r4
 800bcd2:	2001      	movs	r0, #1
 800bcd4:	f006 f93c 	bl	8011f50 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800bcd8:	480a      	ldr	r0, [pc, #40]	; (800bd04 <SaveToRO+0x1ec>)
 800bcda:	f006 f90b 	bl	8011ef4 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d1a8      	bne.n	800bc34 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bce2:	465b      	mov	r3, fp
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	2201      	movs	r2, #1
 800bce8:	4393      	bics	r3, r2
 800bcea:	465a      	mov	r2, fp
 800bcec:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800bcee:	3402      	adds	r4, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800bcf0:	3701      	adds	r7, #1
 800bcf2:	b2ff      	uxtb	r7, r7
 800bcf4:	e7e0      	b.n	800bcb8 <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800bcf6:	f006 f8f3 	bl	8011ee0 <HAL_FLASH_Lock>
	return result;
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	e738      	b.n	800bb70 <SaveToRO+0x58>
 800bcfe:	46c0      	nop			; (mov r8, r8)
 800bd00:	0801d800 	.word	0x0801d800
 800bd04:	0000c350 	.word	0x0000c350
 800bd08:	40022000 	.word	0x40022000
 800bd0c:	20001052 	.word	0x20001052
 800bd10:	200011f7 	.word	0x200011f7
 800bd14:	0801dc00 	.word	0x0801dc00
 800bd18:	20006c10 	.word	0x20006c10
 800bd1c:	200070e0 	.word	0x200070e0
 800bd20:	20000024 	.word	0x20000024
 800bd24:	20000a8c 	.word	0x20000a8c

0800bd28 <ClearROtopology>:
uint8_t ClearROtopology(void) {
 800bd28:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800bd2a:	228f      	movs	r2, #143	; 0x8f
 800bd2c:	0092      	lsls	r2, r2, #2
 800bd2e:	2100      	movs	r1, #0
 800bd30:	4805      	ldr	r0, [pc, #20]	; (800bd48 <ClearROtopology+0x20>)
 800bd32:	f008 fec5 	bl	8014ac0 <memset>
	N = 1;
 800bd36:	4b05      	ldr	r3, [pc, #20]	; (800bd4c <ClearROtopology+0x24>)
 800bd38:	2201      	movs	r2, #1
 800bd3a:	701a      	strb	r2, [r3, #0]
	myID = 0;
 800bd3c:	4b04      	ldr	r3, [pc, #16]	; (800bd50 <ClearROtopology+0x28>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800bd42:	f7ff fee9 	bl	800bb18 <SaveToRO>
}
 800bd46:	bd10      	pop	{r4, pc}
 800bd48:	20000a8c 	.word	0x20000a8c
 800bd4c:	20000024 	.word	0x20000024
 800bd50:	20001052 	.word	0x20001052

0800bd54 <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 800bd54:	b500      	push	{lr}
 800bd56:	b085      	sub	sp, #20
	MX_USART1_UART_Init();
 800bd58:	f002 fb76 	bl	800e448 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800bd5c:	f002 fb8c 	bl	800e478 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800bd60:	f002 fba2 	bl	800e4a8 <MX_USART3_UART_Init>
	MX_USART5_UART_Init();
 800bd64:	f002 fbb8 	bl	800e4d8 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800bd68:	f002 fbce 	bl	800e508 <MX_USART6_UART_Init>
	MX_ADC_Init();
 800bd6c:	f7fc fe28 	bl	80089c0 <MX_ADC_Init>
	xTaskCreate(MosfetTask,(const char* ) "MosfetTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&MosfetHandle);
 800bd70:	22a0      	movs	r2, #160	; 0xa0
 800bd72:	2300      	movs	r3, #0
 800bd74:	9303      	str	r3, [sp, #12]
 800bd76:	9302      	str	r3, [sp, #8]
 800bd78:	4b0c      	ldr	r3, [pc, #48]	; (800bdac <Module_Peripheral_Init+0x58>)
 800bd7a:	9301      	str	r3, [sp, #4]
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	2300      	movs	r3, #0
 800bd82:	0052      	lsls	r2, r2, #1
 800bd84:	490a      	ldr	r1, [pc, #40]	; (800bdb0 <Module_Peripheral_Init+0x5c>)
 800bd86:	480b      	ldr	r0, [pc, #44]	; (800bdb4 <Module_Peripheral_Init+0x60>)
 800bd88:	f003 fc28 	bl	800f5dc <xTaskGenericCreate>
	xTimerSwitch =xTimerCreate("SwitchTimer",pdMS_TO_TICKS(1000),pdFALSE,(void* )1,SwitchTimerCallback);
 800bd8c:	21fa      	movs	r1, #250	; 0xfa
 800bd8e:	4b0a      	ldr	r3, [pc, #40]	; (800bdb8 <Module_Peripheral_Init+0x64>)
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	2301      	movs	r3, #1
 800bd94:	2200      	movs	r2, #0
 800bd96:	0089      	lsls	r1, r1, #2
 800bd98:	4808      	ldr	r0, [pc, #32]	; (800bdbc <Module_Peripheral_Init+0x68>)
 800bd9a:	f004 fb13 	bl	80103c4 <xTimerCreate>
 800bd9e:	4b08      	ldr	r3, [pc, #32]	; (800bdc0 <Module_Peripheral_Init+0x6c>)
 800bda0:	6018      	str	r0, [r3, #0]
	Switch_Init();
 800bda2:	f001 ff9b 	bl	800dcdc <Switch_Init>
}
 800bda6:	b005      	add	sp, #20
 800bda8:	bd00      	pop	{pc}
 800bdaa:	46c0      	nop			; (mov r8, r8)
 800bdac:	200019ac 	.word	0x200019ac
 800bdb0:	0801c064 	.word	0x0801c064
 800bdb4:	0800c851 	.word	0x0800c851
 800bdb8:	0800c1b5 	.word	0x0800c1b5
 800bdbc:	0801c070 	.word	0x0801c070
 800bdc0:	200019c0 	.word	0x200019c0

0800bdc4 <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 800bdc4:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&onCommandDefinition);
 800bdc6:	480c      	ldr	r0, [pc, #48]	; (800bdf8 <RegisterModuleCLICommands+0x34>)
 800bdc8:	f002 fe88 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&offCommandDefinition);
 800bdcc:	480b      	ldr	r0, [pc, #44]	; (800bdfc <RegisterModuleCLICommands+0x38>)
 800bdce:	f002 fe85 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&toggleCommandDefinition);
 800bdd2:	480b      	ldr	r0, [pc, #44]	; (800be00 <RegisterModuleCLICommands+0x3c>)
 800bdd4:	f002 fe82 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ledModeCommandDefinition);
 800bdd8:	480a      	ldr	r0, [pc, #40]	; (800be04 <RegisterModuleCLICommands+0x40>)
 800bdda:	f002 fe7f 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pwmCommandDefinition);
 800bdde:	480a      	ldr	r0, [pc, #40]	; (800be08 <RegisterModuleCLICommands+0x44>)
 800bde0:	f002 fe7c 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&mosfetSampleCommandDefinition);
 800bde4:	4809      	ldr	r0, [pc, #36]	; (800be0c <RegisterModuleCLICommands+0x48>)
 800bde6:	f002 fe79 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&mosfetStreamCommandDefinition);
 800bdea:	4809      	ldr	r0, [pc, #36]	; (800be10 <RegisterModuleCLICommands+0x4c>)
 800bdec:	f002 fe76 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&mosfetStopCommandDefinition);
 800bdf0:	4808      	ldr	r0, [pc, #32]	; (800be14 <RegisterModuleCLICommands+0x50>)
 800bdf2:	f002 fe73 	bl	800eadc <FreeRTOS_CLIRegisterCommand>
}
 800bdf6:	bd10      	pop	{r4, pc}
 800bdf8:	0801c368 	.word	0x0801c368
 800bdfc:	0801c2e4 	.word	0x0801c2e4
 800be00:	0801c814 	.word	0x0801c814
 800be04:	0801c16c 	.word	0x0801c16c
 800be08:	0801c3f8 	.word	0x0801c3f8
 800be0c:	0801c190 	.word	0x0801c190
 800be10:	0801c2b0 	.word	0x0801c2b0
 800be14:	0801c1a0 	.word	0x0801c1a0

0800be18 <GetPort>:
	if (huart->Instance == USART5)
 800be18:	6800      	ldr	r0, [r0, #0]
 800be1a:	4b0e      	ldr	r3, [pc, #56]	; (800be54 <GetPort+0x3c>)
 800be1c:	4298      	cmp	r0, r3
 800be1e:	d011      	beq.n	800be44 <GetPort+0x2c>
	else if (huart->Instance == USART2)
 800be20:	4b0d      	ldr	r3, [pc, #52]	; (800be58 <GetPort+0x40>)
 800be22:	4298      	cmp	r0, r3
 800be24:	d010      	beq.n	800be48 <GetPort+0x30>
	else if (huart->Instance == USART6)
 800be26:	4b0d      	ldr	r3, [pc, #52]	; (800be5c <GetPort+0x44>)
 800be28:	4298      	cmp	r0, r3
 800be2a:	d00f      	beq.n	800be4c <GetPort+0x34>
	else if (huart->Instance == USART3)
 800be2c:	4b0c      	ldr	r3, [pc, #48]	; (800be60 <GetPort+0x48>)
 800be2e:	4298      	cmp	r0, r3
 800be30:	d00e      	beq.n	800be50 <GetPort+0x38>
	return 0;
 800be32:	4b0c      	ldr	r3, [pc, #48]	; (800be64 <GetPort+0x4c>)
 800be34:	469c      	mov	ip, r3
 800be36:	4460      	add	r0, ip
 800be38:	4243      	negs	r3, r0
 800be3a:	4158      	adcs	r0, r3
 800be3c:	4240      	negs	r0, r0
 800be3e:	2305      	movs	r3, #5
 800be40:	4018      	ands	r0, r3
}
 800be42:	4770      	bx	lr
		return P1;
 800be44:	2001      	movs	r0, #1
 800be46:	e7fc      	b.n	800be42 <GetPort+0x2a>
		return P2;
 800be48:	2002      	movs	r0, #2
 800be4a:	e7fa      	b.n	800be42 <GetPort+0x2a>
		return P3;
 800be4c:	2003      	movs	r0, #3
 800be4e:	e7f8      	b.n	800be42 <GetPort+0x2a>
		return P4;
 800be50:	2004      	movs	r0, #4
 800be52:	e7f6      	b.n	800be42 <GetPort+0x2a>
 800be54:	40005000 	.word	0x40005000
 800be58:	40004400 	.word	0x40004400
 800be5c:	40011400 	.word	0x40011400
 800be60:	40004800 	.word	0x40004800
 800be64:	bffec800 	.word	0xbffec800

0800be68 <TIM3_Init>:
void TIM3_Init(void) {
 800be68:	b530      	push	{r4, r5, lr}
 800be6a:	b095      	sub	sp, #84	; 0x54
	__TIM3_CLK_ENABLE()
 800be6c:	4a24      	ldr	r2, [pc, #144]	; (800bf00 <TIM3_Init+0x98>)
 800be6e:	69d1      	ldr	r1, [r2, #28]
 800be70:	2302      	movs	r3, #2
 800be72:	4319      	orrs	r1, r3
 800be74:	61d1      	str	r1, [r2, #28]
 800be76:	69d2      	ldr	r2, [r2, #28]
 800be78:	401a      	ands	r2, r3
 800be7a:	9201      	str	r2, [sp, #4]
 800be7c:	9a01      	ldr	r2, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be7e:	9310      	str	r3, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be80:	2500      	movs	r5, #0
 800be82:	9511      	str	r5, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800be84:	3301      	adds	r3, #1
 800be86:	9312      	str	r3, [sp, #72]	; 0x48
	GPIO_InitStruct.Pin = _Switch_PIN;
 800be88:	3b02      	subs	r3, #2
 800be8a:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800be8c:	9313      	str	r3, [sp, #76]	; 0x4c
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800be8e:	a90f      	add	r1, sp, #60	; 0x3c
 800be90:	481c      	ldr	r0, [pc, #112]	; (800bf04 <TIM3_Init+0x9c>)
 800be92:	f006 f947 	bl	8012124 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800be96:	2200      	movs	r2, #0
 800be98:	2100      	movs	r1, #0
 800be9a:	2010      	movs	r0, #16
 800be9c:	f005 f978 	bl	8011190 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800bea0:	2010      	movs	r0, #16
 800bea2:	f005 f9a9 	bl	80111f8 <HAL_NVIC_EnableIRQ>
	htim3.Instance = TIM3;
 800bea6:	4c18      	ldr	r4, [pc, #96]	; (800bf08 <TIM3_Init+0xa0>)
 800bea8:	4b18      	ldr	r3, [pc, #96]	; (800bf0c <TIM3_Init+0xa4>)
 800beaa:	6023      	str	r3, [r4, #0]
	htim3.Init.Prescaler = (uint32_t) (HAL_RCC_GetSysClockFreq()
 800beac:	f006 fec0 	bl	8012c30 <HAL_RCC_GetSysClockFreq>
 800beb0:	4917      	ldr	r1, [pc, #92]	; (800bf10 <TIM3_Init+0xa8>)
 800beb2:	f7f4 f94d 	bl	8000150 <__udivsi3>
			/ PWM_TIMER_CLOCK) - 1;
 800beb6:	3801      	subs	r0, #1
	htim3.Init.Prescaler = (uint32_t) (HAL_RCC_GetSysClockFreq()
 800beb8:	6060      	str	r0, [r4, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800beba:	60a5      	str	r5, [r4, #8]
	htim3.Init.Period = 0;
 800bebc:	60e5      	str	r5, [r4, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bebe:	6125      	str	r5, [r4, #16]
	HAL_TIM_Base_Init(&htim3);
 800bec0:	0020      	movs	r0, r4
 800bec2:	f007 fc27 	bl	8013714 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bec6:	2380      	movs	r3, #128	; 0x80
 800bec8:	015b      	lsls	r3, r3, #5
 800beca:	930b      	str	r3, [sp, #44]	; 0x2c
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800becc:	a90b      	add	r1, sp, #44	; 0x2c
 800bece:	0020      	movs	r0, r4
 800bed0:	f007 faca 	bl	8013468 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim3);
 800bed4:	0020      	movs	r0, r4
 800bed6:	f007 fc37 	bl	8013748 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800beda:	9509      	str	r5, [sp, #36]	; 0x24
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bedc:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800bede:	a909      	add	r1, sp, #36	; 0x24
 800bee0:	0020      	movs	r0, r4
 800bee2:	f007 fd75 	bl	80139d0 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bee6:	2360      	movs	r3, #96	; 0x60
 800bee8:	9302      	str	r3, [sp, #8]
	sConfigOC.Pulse = 0;
 800beea:	9503      	str	r5, [sp, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800beec:	9504      	str	r5, [sp, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800beee:	9506      	str	r5, [sp, #24]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _Switch_TIM_CH);
 800bef0:	2208      	movs	r2, #8
 800bef2:	a902      	add	r1, sp, #8
 800bef4:	0020      	movs	r0, r4
 800bef6:	f007 fc81 	bl	80137fc <HAL_TIM_PWM_ConfigChannel>
}
 800befa:	b015      	add	sp, #84	; 0x54
 800befc:	bd30      	pop	{r4, r5, pc}
 800befe:	46c0      	nop			; (mov r8, r8)
 800bf00:	40021000 	.word	0x40021000
 800bf04:	48000400 	.word	0x48000400
 800bf08:	20006d94 	.word	0x20006d94
 800bf0c:	40000400 	.word	0x40000400
 800bf10:	00f42400 	.word	0x00f42400

0800bf14 <TIM3_DeInit>:
void TIM3_DeInit(void) {
 800bf14:	b510      	push	{r4, lr}
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800bf16:	2010      	movs	r0, #16
 800bf18:	f005 f978 	bl	801120c <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_DeInit(&htim3);
 800bf1c:	4c06      	ldr	r4, [pc, #24]	; (800bf38 <TIM3_DeInit+0x24>)
 800bf1e:	0020      	movs	r0, r4
 800bf20:	f007 fa54 	bl	80133cc <HAL_TIM_Base_DeInit>
	HAL_TIM_PWM_DeInit(&htim3);
 800bf24:	0020      	movs	r0, r4
 800bf26:	f007 fa7f 	bl	8013428 <HAL_TIM_PWM_DeInit>
	__TIM3_CLK_DISABLE();
 800bf2a:	4a04      	ldr	r2, [pc, #16]	; (800bf3c <TIM3_DeInit+0x28>)
 800bf2c:	69d3      	ldr	r3, [r2, #28]
 800bf2e:	2102      	movs	r1, #2
 800bf30:	438b      	bics	r3, r1
 800bf32:	61d3      	str	r3, [r2, #28]
}
 800bf34:	bd10      	pop	{r4, pc}
 800bf36:	46c0      	nop			; (mov r8, r8)
 800bf38:	20006d94 	.word	0x20006d94
 800bf3c:	40021000 	.word	0x40021000

0800bf40 <Set_Switch_PWM>:
Module_Status Set_Switch_PWM(uint32_t freq, float dutycycle) {
 800bf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf42:	1c0f      	adds	r7, r1, #0
	uint32_t ARR = PWM_TIMER_CLOCK / freq;
 800bf44:	0001      	movs	r1, r0
 800bf46:	4813      	ldr	r0, [pc, #76]	; (800bf94 <Set_Switch_PWM+0x54>)
 800bf48:	f7f4 f902 	bl	8000150 <__udivsi3>
 800bf4c:	0006      	movs	r6, r0
	if (Switch_state != STATE_PWM)
 800bf4e:	4b12      	ldr	r3, [pc, #72]	; (800bf98 <Set_Switch_PWM+0x58>)
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	d11b      	bne.n	800bf8e <Set_Switch_PWM+0x4e>
	htim3.Instance->ARR = ARR - 1;
 800bf56:	4c11      	ldr	r4, [pc, #68]	; (800bf9c <Set_Switch_PWM+0x5c>)
 800bf58:	6825      	ldr	r5, [r4, #0]
 800bf5a:	1e73      	subs	r3, r6, #1
 800bf5c:	62eb      	str	r3, [r5, #44]	; 0x2c
	htim3.Instance->CCR3 = ((float) dutycycle / 100.0f) * ARR;
 800bf5e:	4910      	ldr	r1, [pc, #64]	; (800bfa0 <Set_Switch_PWM+0x60>)
 800bf60:	1c38      	adds	r0, r7, #0
 800bf62:	f7f4 fc49 	bl	80007f8 <__aeabi_fdiv>
 800bf66:	1c07      	adds	r7, r0, #0
 800bf68:	0030      	movs	r0, r6
 800bf6a:	f7f5 f933 	bl	80011d4 <__aeabi_ui2f>
 800bf6e:	1c01      	adds	r1, r0, #0
 800bf70:	1c38      	adds	r0, r7, #0
 800bf72:	f7f4 fe19 	bl	8000ba8 <__aeabi_fmul>
 800bf76:	f7f4 fb23 	bl	80005c0 <__aeabi_f2uiz>
 800bf7a:	63e8      	str	r0, [r5, #60]	; 0x3c
	if (HAL_TIM_PWM_Start(&htim3, _Switch_TIM_CH) != HAL_OK)
 800bf7c:	2108      	movs	r1, #8
 800bf7e:	0020      	movs	r0, r4
 800bf80:	f007 fcbe 	bl	8013900 <HAL_TIM_PWM_Start>
 800bf84:	1e43      	subs	r3, r0, #1
 800bf86:	4198      	sbcs	r0, r3
 800bf88:	4240      	negs	r0, r0
 800bf8a:	b2c0      	uxtb	r0, r0
}
 800bf8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		TIM3_Init();
 800bf8e:	f7ff ff6b 	bl	800be68 <TIM3_Init>
 800bf92:	e7e0      	b.n	800bf56 <Set_Switch_PWM+0x16>
 800bf94:	00f42400 	.word	0x00f42400
 800bf98:	200019b0 	.word	0x200019b0
 800bf9c:	20006d94 	.word	0x20006d94
 800bfa0:	42c80000 	.word	0x42c80000

0800bfa4 <Switch_on>:
Module_Status Switch_on(uint32_t timeout) {
 800bfa4:	b510      	push	{r4, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	0004      	movs	r4, r0
	if (Switch_state == STATE_PWM) {
 800bfaa:	4b25      	ldr	r3, [pc, #148]	; (800c040 <Switch_on+0x9c>)
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d02a      	beq.n	800c008 <Switch_on+0x64>
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	2101      	movs	r1, #1
 800bfb6:	4823      	ldr	r0, [pc, #140]	; (800c044 <Switch_on+0xa0>)
 800bfb8:	f006 fa28 	bl	801240c <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800bfbc:	4b22      	ldr	r3, [pc, #136]	; (800c048 <Switch_on+0xa4>)
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d12a      	bne.n	800c01a <Switch_on+0x76>
	if (timeout != portMAX_DELAY) {
 800bfc4:	1c63      	adds	r3, r4, #1
 800bfc6:	d017      	beq.n	800bff8 <Switch_on+0x54>
		if (xTimerIsTimerActive(xTimerSwitch))
 800bfc8:	4b20      	ldr	r3, [pc, #128]	; (800c04c <Switch_on+0xa8>)
 800bfca:	6818      	ldr	r0, [r3, #0]
 800bfcc:	f004 fb56 	bl	801067c <xTimerIsTimerActive>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d12a      	bne.n	800c02a <Switch_on+0x86>
		xTimerChangePeriod(xTimerSwitch, pdMS_TO_TICKS(timeout), 100);
 800bfd4:	0160      	lsls	r0, r4, #5
 800bfd6:	1b00      	subs	r0, r0, r4
 800bfd8:	0080      	lsls	r0, r0, #2
 800bfda:	1900      	adds	r0, r0, r4
 800bfdc:	00c0      	lsls	r0, r0, #3
 800bfde:	21fa      	movs	r1, #250	; 0xfa
 800bfe0:	0089      	lsls	r1, r1, #2
 800bfe2:	f7f4 f8b5 	bl	8000150 <__udivsi3>
 800bfe6:	0002      	movs	r2, r0
 800bfe8:	4b18      	ldr	r3, [pc, #96]	; (800c04c <Switch_on+0xa8>)
 800bfea:	6818      	ldr	r0, [r3, #0]
 800bfec:	2364      	movs	r3, #100	; 0x64
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	2300      	movs	r3, #0
 800bff2:	2104      	movs	r1, #4
 800bff4:	f004 fa06 	bl	8010404 <xTimerGenericCommand>
	Switch_state = STATE_ON;
 800bff8:	2301      	movs	r3, #1
 800bffa:	4a11      	ldr	r2, [pc, #68]	; (800c040 <Switch_on+0x9c>)
 800bffc:	7013      	strb	r3, [r2, #0]
	Switch_Oldstate = Switch_state;
 800bffe:	4a14      	ldr	r2, [pc, #80]	; (800c050 <Switch_on+0xac>)
 800c000:	7013      	strb	r3, [r2, #0]
}
 800c002:	2000      	movs	r0, #0
 800c004:	b002      	add	sp, #8
 800c006:	bd10      	pop	{r4, pc}
		HAL_TIM_PWM_Stop(&htim3, _Switch_TIM_CH);
 800c008:	2108      	movs	r1, #8
 800c00a:	4812      	ldr	r0, [pc, #72]	; (800c054 <Switch_on+0xb0>)
 800c00c:	f007 fca0 	bl	8013950 <HAL_TIM_PWM_Stop>
		TIM3_DeInit();
 800c010:	f7ff ff80 	bl	800bf14 <TIM3_DeInit>
		Switch_Init();
 800c014:	f001 fe62 	bl	800dcdc <Switch_Init>
 800c018:	e7cb      	b.n	800bfb2 <Switch_on+0xe>
		IND_ON();
 800c01a:	2180      	movs	r1, #128	; 0x80
 800c01c:	2090      	movs	r0, #144	; 0x90
 800c01e:	2201      	movs	r2, #1
 800c020:	0109      	lsls	r1, r1, #4
 800c022:	05c0      	lsls	r0, r0, #23
 800c024:	f006 f9f2 	bl	801240c <HAL_GPIO_WritePin>
 800c028:	e7cc      	b.n	800bfc4 <Switch_on+0x20>
			xTimerStop(xTimerSwitch, 100);
 800c02a:	4b08      	ldr	r3, [pc, #32]	; (800c04c <Switch_on+0xa8>)
 800c02c:	6818      	ldr	r0, [r3, #0]
 800c02e:	2364      	movs	r3, #100	; 0x64
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	2300      	movs	r3, #0
 800c034:	2200      	movs	r2, #0
 800c036:	2103      	movs	r1, #3
 800c038:	f004 f9e4 	bl	8010404 <xTimerGenericCommand>
 800c03c:	e7ca      	b.n	800bfd4 <Switch_on+0x30>
 800c03e:	46c0      	nop			; (mov r8, r8)
 800c040:	200019b0 	.word	0x200019b0
 800c044:	48000400 	.word	0x48000400
 800c048:	200019b1 	.word	0x200019b1
 800c04c:	200019c0 	.word	0x200019c0
 800c050:	2000008c 	.word	0x2000008c
 800c054:	20006d94 	.word	0x20006d94

0800c058 <Current_Calculation>:
static float Current_Calculation(void) {
 800c058:	b570      	push	{r4, r5, r6, lr}
	Switch_on(3000);
 800c05a:	4810      	ldr	r0, [pc, #64]	; (800c09c <Current_Calculation+0x44>)
 800c05c:	f7ff ffa2 	bl	800bfa4 <Switch_on>
	Delay_ms(1000);
 800c060:	20fa      	movs	r0, #250	; 0xfa
 800c062:	0080      	lsls	r0, r0, #2
 800c064:	f004 fcf6 	bl	8010a54 <HAL_Delay>
	HAL_ADC_Start(&hadc);
 800c068:	4c0d      	ldr	r4, [pc, #52]	; (800c0a0 <Current_Calculation+0x48>)
 800c06a:	0020      	movs	r0, r4
 800c06c:	f004 fe74 	bl	8010d58 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);
 800c070:	210a      	movs	r1, #10
 800c072:	0020      	movs	r0, r4
 800c074:	f004 fec2 	bl	8010dfc <HAL_ADC_PollForConversion>
	rawValues = HAL_ADC_GetValue(&hadc);
 800c078:	0020      	movs	r0, r4
 800c07a:	f004 ff1f 	bl	8010ebc <HAL_ADC_GetValue>
 800c07e:	4d09      	ldr	r5, [pc, #36]	; (800c0a4 <Current_Calculation+0x4c>)
 800c080:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 800c082:	0020      	movs	r0, r4
 800c084:	f004 fe98 	bl	8010db8 <HAL_ADC_Stop>
	return (rawValues * ADC_CONVERSION);
 800c088:	6828      	ldr	r0, [r5, #0]
 800c08a:	f7f6 fe4f 	bl	8002d2c <__aeabi_ui2d>
 800c08e:	4a06      	ldr	r2, [pc, #24]	; (800c0a8 <Current_Calculation+0x50>)
 800c090:	4b06      	ldr	r3, [pc, #24]	; (800c0ac <Current_Calculation+0x54>)
 800c092:	f7f6 f805 	bl	80020a0 <__aeabi_dmul>
 800c096:	f7f6 fecd 	bl	8002e34 <__aeabi_d2f>
}
 800c09a:	bd70      	pop	{r4, r5, r6, pc}
 800c09c:	00000bb8 	.word	0x00000bb8
 800c0a0:	20006cac 	.word	0x20006cac
 800c0a4:	20006d14 	.word	0x20006d14
 800c0a8:	a5119ce0 	.word	0xa5119ce0
 800c0ac:	3f77c1bd 	.word	0x3f77c1bd

0800c0b0 <mosfetSampleCommand>:
#endif
/*-----------------------------------------------------------*/

#ifdef H0FR7
static portBASE_TYPE mosfetSampleCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	1e04      	subs	r4, r0, #0

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800c0b4:	d101      	bne.n	800c0ba <mosfetSampleCommand+0xa>
 800c0b6:	b672      	cpsid	i
 800c0b8:	e7fe      	b.n	800c0b8 <mosfetSampleCommand+0x8>

	/* Obtain the value. */
	Current = Current_Calculation();
 800c0ba:	f7ff ffcd 	bl	800c058 <Current_Calculation>

	/* Respond to the command */
	sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, Current);
 800c0be:	f7f6 fe67 	bl	8002d90 <__aeabi_f2d>
 800c0c2:	0002      	movs	r2, r0
 800c0c4:	000b      	movs	r3, r1
 800c0c6:	4903      	ldr	r1, [pc, #12]	; (800c0d4 <mosfetSampleCommand+0x24>)
 800c0c8:	0020      	movs	r0, r4
 800c0ca:	f008 fef3 	bl	8014eb4 <sprintf>

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	bd10      	pop	{r4, pc}
 800c0d2:	46c0      	nop			; (mov r8, r8)
 800c0d4:	0801c17c 	.word	0x0801c17c

0800c0d8 <onCommand>:
		const int8_t *pcCommandString) {
 800c0d8:	b530      	push	{r4, r5, lr}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	0004      	movs	r4, r0
 800c0de:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 800c0e4:	2c00      	cmp	r4, #0
 800c0e6:	d101      	bne.n	800c0ec <onCommand+0x14>
 800c0e8:	b672      	cpsid	i
 800c0ea:	e7fe      	b.n	800c0ea <onCommand+0x12>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800c0ec:	aa01      	add	r2, sp, #4
 800c0ee:	2101      	movs	r1, #1
 800c0f0:	f002 fd92 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 800c0f4:	0005      	movs	r5, r0
	if (!strcmp((char*) pcParameterString1, "inf")
 800c0f6:	4915      	ldr	r1, [pc, #84]	; (800c14c <onCommand+0x74>)
 800c0f8:	f7f4 f804 	bl	8000104 <strcmp>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d005      	beq.n	800c10c <onCommand+0x34>
			|| !strcmp((char*) pcParameterString1, "INF"))
 800c100:	4913      	ldr	r1, [pc, #76]	; (800c150 <onCommand+0x78>)
 800c102:	0028      	movs	r0, r5
 800c104:	f7f3 fffe 	bl	8000104 <strcmp>
 800c108:	2800      	cmp	r0, #0
 800c10a:	d108      	bne.n	800c11e <onCommand+0x46>
	result = Switch_on(timeout);
 800c10c:	2001      	movs	r0, #1
 800c10e:	4240      	negs	r0, r0
 800c110:	f7ff ff48 	bl	800bfa4 <Switch_on>
	if (result == H0FRx_OK) {
 800c114:	2800      	cmp	r0, #0
 800c116:	d012      	beq.n	800c13e <onCommand+0x66>
}
 800c118:	2000      	movs	r0, #0
 800c11a:	b003      	add	sp, #12
 800c11c:	bd30      	pop	{r4, r5, pc}
		timeout = (uint32_t) atol((char*) pcParameterString1);
 800c11e:	0028      	movs	r0, r5
 800c120:	f008 fa3b 	bl	801459a <atol>
 800c124:	0005      	movs	r5, r0
	result = Switch_on(timeout);
 800c126:	f7ff ff3d 	bl	800bfa4 <Switch_on>
	if (result == H0FRx_OK) {
 800c12a:	2800      	cmp	r0, #0
 800c12c:	d1f4      	bne.n	800c118 <onCommand+0x40>
		if (timeout != portMAX_DELAY) {
 800c12e:	1c6b      	adds	r3, r5, #1
 800c130:	d005      	beq.n	800c13e <onCommand+0x66>
			sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, timeout);
 800c132:	002a      	movs	r2, r5
 800c134:	4907      	ldr	r1, [pc, #28]	; (800c154 <onCommand+0x7c>)
 800c136:	0020      	movs	r0, r4
 800c138:	f008 febc 	bl	8014eb4 <sprintf>
 800c13c:	e7ec      	b.n	800c118 <onCommand+0x40>
			strcpy((char*) pcWriteBuffer, (char*) pcOKMessageInf);
 800c13e:	2232      	movs	r2, #50	; 0x32
 800c140:	4905      	ldr	r1, [pc, #20]	; (800c158 <onCommand+0x80>)
 800c142:	0020      	movs	r0, r4
 800c144:	f008 fcb3 	bl	8014aae <memcpy>
 800c148:	e7e6      	b.n	800c118 <onCommand+0x40>
 800c14a:	46c0      	nop			; (mov r8, r8)
 800c14c:	0801c2f4 	.word	0x0801c2f4
 800c150:	0801c2f8 	.word	0x0801c2f8
 800c154:	0801c2fc 	.word	0x0801c2fc
 800c158:	0801c334 	.word	0x0801c334

0800c15c <Switch_off>:
Module_Status Switch_off(void) {
 800c15c:	b510      	push	{r4, lr}
	if (Switch_state == STATE_PWM) {
 800c15e:	4b11      	ldr	r3, [pc, #68]	; (800c1a4 <Switch_off+0x48>)
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	2b02      	cmp	r3, #2
 800c164:	d00d      	beq.n	800c182 <Switch_off+0x26>
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_RESET);
 800c166:	2200      	movs	r2, #0
 800c168:	2101      	movs	r1, #1
 800c16a:	480f      	ldr	r0, [pc, #60]	; (800c1a8 <Switch_off+0x4c>)
 800c16c:	f006 f94e 	bl	801240c <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800c170:	4b0e      	ldr	r3, [pc, #56]	; (800c1ac <Switch_off+0x50>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10d      	bne.n	800c194 <Switch_off+0x38>
	Switch_state = STATE_OFF;
 800c178:	4b0a      	ldr	r3, [pc, #40]	; (800c1a4 <Switch_off+0x48>)
 800c17a:	2200      	movs	r2, #0
 800c17c:	701a      	strb	r2, [r3, #0]
}
 800c17e:	2000      	movs	r0, #0
 800c180:	bd10      	pop	{r4, pc}
		HAL_TIM_PWM_Stop(&htim3, _Switch_TIM_CH);
 800c182:	2108      	movs	r1, #8
 800c184:	480a      	ldr	r0, [pc, #40]	; (800c1b0 <Switch_off+0x54>)
 800c186:	f007 fbe3 	bl	8013950 <HAL_TIM_PWM_Stop>
		TIM3_DeInit();
 800c18a:	f7ff fec3 	bl	800bf14 <TIM3_DeInit>
		Switch_Init();
 800c18e:	f001 fda5 	bl	800dcdc <Switch_Init>
 800c192:	e7e8      	b.n	800c166 <Switch_off+0xa>
		IND_OFF();
 800c194:	2180      	movs	r1, #128	; 0x80
 800c196:	2090      	movs	r0, #144	; 0x90
 800c198:	2200      	movs	r2, #0
 800c19a:	0109      	lsls	r1, r1, #4
 800c19c:	05c0      	lsls	r0, r0, #23
 800c19e:	f006 f935 	bl	801240c <HAL_GPIO_WritePin>
 800c1a2:	e7e9      	b.n	800c178 <Switch_off+0x1c>
 800c1a4:	200019b0 	.word	0x200019b0
 800c1a8:	48000400 	.word	0x48000400
 800c1ac:	200019b1 	.word	0x200019b1
 800c1b0:	20006d94 	.word	0x20006d94

0800c1b4 <SwitchTimerCallback>:
void SwitchTimerCallback(TimerHandle_t xTimerSwitch) {
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	0004      	movs	r4, r0
	Switch_off();
 800c1b8:	f7ff ffd0 	bl	800c15c <Switch_off>
	HAL_ADC_Stop(&hadc);
 800c1bc:	4807      	ldr	r0, [pc, #28]	; (800c1dc <SwitchTimerCallback+0x28>)
 800c1be:	f004 fdfb 	bl	8010db8 <HAL_ADC_Stop>
	tid = (uint32_t) pvTimerGetTimerID(xTimerSwitch);
 800c1c2:	0020      	movs	r0, r4
 800c1c4:	f004 fa65 	bl	8010692 <pvTimerGetTimerID>
	if (TIMERID_TIMEOUT_MEASUREMENT == tid) {
 800c1c8:	28ff      	cmp	r0, #255	; 0xff
 800c1ca:	d000      	beq.n	800c1ce <SwitchTimerCallback+0x1a>
}
 800c1cc:	bd10      	pop	{r4, pc}
		startMeasurement = STOP_MEASUREMENT;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	4a03      	ldr	r2, [pc, #12]	; (800c1e0 <SwitchTimerCallback+0x2c>)
 800c1d2:	7013      	strb	r3, [r2, #0]
		mosfetMode = REQ_IDLE;		// Stop the streaming task
 800c1d4:	4a03      	ldr	r2, [pc, #12]	; (800c1e4 <SwitchTimerCallback+0x30>)
 800c1d6:	7013      	strb	r3, [r2, #0]
}
 800c1d8:	e7f8      	b.n	800c1cc <SwitchTimerCallback+0x18>
 800c1da:	46c0      	nop			; (mov r8, r8)
 800c1dc:	20006cac 	.word	0x20006cac
 800c1e0:	200019b8 	.word	0x200019b8
 800c1e4:	20006f34 	.word	0x20006f34

0800c1e8 <offCommand>:
		const int8_t *pcCommandString) {
 800c1e8:	b510      	push	{r4, lr}
 800c1ea:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800c1ec:	d101      	bne.n	800c1f2 <offCommand+0xa>
 800c1ee:	b672      	cpsid	i
 800c1f0:	e7fe      	b.n	800c1f0 <offCommand+0x8>
	result = Switch_off();
 800c1f2:	f7ff ffb3 	bl	800c15c <Switch_off>
	if (result == H0FRx_OK) {
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d001      	beq.n	800c1fe <offCommand+0x16>
}
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	bd10      	pop	{r4, pc}
		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800c1fe:	2223      	movs	r2, #35	; 0x23
 800c200:	4902      	ldr	r1, [pc, #8]	; (800c20c <offCommand+0x24>)
 800c202:	0020      	movs	r0, r4
 800c204:	f008 fc53 	bl	8014aae <memcpy>
 800c208:	e7f7      	b.n	800c1fa <offCommand+0x12>
 800c20a:	46c0      	nop			; (mov r8, r8)
 800c20c:	0801c2c0 	.word	0x0801c2c0

0800c210 <Switch_PWM>:
Module_Status Switch_PWM(float dutyCycle) {
 800c210:	b570      	push	{r4, r5, r6, lr}
 800c212:	1c05      	adds	r5, r0, #0
	if (dutyCycle < 0 || dutyCycle > 100)
 800c214:	2100      	movs	r1, #0
 800c216:	f7f4 f961 	bl	80004dc <__aeabi_fcmplt>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d11f      	bne.n	800c25e <Switch_PWM+0x4e>
 800c21e:	4911      	ldr	r1, [pc, #68]	; (800c264 <Switch_PWM+0x54>)
 800c220:	1c28      	adds	r0, r5, #0
 800c222:	f7f4 f96f 	bl	8000504 <__aeabi_fcmpgt>
		return H0FRx_ERR_Wrong_Value;
 800c226:	2402      	movs	r4, #2
	if (dutyCycle < 0 || dutyCycle > 100)
 800c228:	2800      	cmp	r0, #0
 800c22a:	d119      	bne.n	800c260 <Switch_PWM+0x50>
	result = Set_Switch_PWM(Switch_PWM_DEF_FREQ, dutyCycle);
 800c22c:	1c29      	adds	r1, r5, #0
 800c22e:	480e      	ldr	r0, [pc, #56]	; (800c268 <Switch_PWM+0x58>)
 800c230:	f7ff fe86 	bl	800bf40 <Set_Switch_PWM>
 800c234:	1e04      	subs	r4, r0, #0
	if (result == H0FRx_OK) {
 800c236:	d113      	bne.n	800c260 <Switch_PWM+0x50>
		Switch_OldDC = dutyCycle;
 800c238:	4b0c      	ldr	r3, [pc, #48]	; (800c26c <Switch_PWM+0x5c>)
 800c23a:	601d      	str	r5, [r3, #0]
		Switch_state = STATE_PWM;
 800c23c:	2302      	movs	r3, #2
 800c23e:	4a0c      	ldr	r2, [pc, #48]	; (800c270 <Switch_PWM+0x60>)
 800c240:	7013      	strb	r3, [r2, #0]
		Switch_Oldstate = Switch_state;
 800c242:	4a0c      	ldr	r2, [pc, #48]	; (800c274 <Switch_PWM+0x64>)
 800c244:	7013      	strb	r3, [r2, #0]
		if (SwitchindMode)
 800c246:	4b0c      	ldr	r3, [pc, #48]	; (800c278 <Switch_PWM+0x68>)
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d008      	beq.n	800c260 <Switch_PWM+0x50>
			IND_ON();
 800c24e:	2180      	movs	r1, #128	; 0x80
 800c250:	2090      	movs	r0, #144	; 0x90
 800c252:	2201      	movs	r2, #1
 800c254:	0109      	lsls	r1, r1, #4
 800c256:	05c0      	lsls	r0, r0, #23
 800c258:	f006 f8d8 	bl	801240c <HAL_GPIO_WritePin>
 800c25c:	e000      	b.n	800c260 <Switch_PWM+0x50>
		return H0FRx_ERR_Wrong_Value;
 800c25e:	2402      	movs	r4, #2
}
 800c260:	0020      	movs	r0, r4
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	42c80000 	.word	0x42c80000
 800c268:	00005dc0 	.word	0x00005dc0
 800c26c:	20006d8c 	.word	0x20006d8c
 800c270:	200019b0 	.word	0x200019b0
 800c274:	2000008c 	.word	0x2000008c
 800c278:	200019b1 	.word	0x200019b1

0800c27c <Switch_toggle>:
Module_Status Switch_toggle(void) {
 800c27c:	b510      	push	{r4, lr}
	if (Switch_state) {
 800c27e:	4b0c      	ldr	r3, [pc, #48]	; (800c2b0 <Switch_toggle+0x34>)
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d107      	bne.n	800c296 <Switch_toggle+0x1a>
		if (Switch_Oldstate == STATE_ON)
 800c286:	4b0b      	ldr	r3, [pc, #44]	; (800c2b4 <Switch_toggle+0x38>)
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d006      	beq.n	800c29c <Switch_toggle+0x20>
	Module_Status result = H0FRx_OK;
 800c28e:	2000      	movs	r0, #0
		else if (Switch_Oldstate == STATE_PWM)
 800c290:	2b02      	cmp	r3, #2
 800c292:	d008      	beq.n	800c2a6 <Switch_toggle+0x2a>
}
 800c294:	bd10      	pop	{r4, pc}
		result = Switch_off();
 800c296:	f7ff ff61 	bl	800c15c <Switch_off>
 800c29a:	e7fb      	b.n	800c294 <Switch_toggle+0x18>
			result = Switch_on(portMAX_DELAY);
 800c29c:	2001      	movs	r0, #1
 800c29e:	4240      	negs	r0, r0
 800c2a0:	f7ff fe80 	bl	800bfa4 <Switch_on>
 800c2a4:	e7f6      	b.n	800c294 <Switch_toggle+0x18>
			result = Switch_PWM(Switch_OldDC);
 800c2a6:	4b04      	ldr	r3, [pc, #16]	; (800c2b8 <Switch_toggle+0x3c>)
 800c2a8:	6818      	ldr	r0, [r3, #0]
 800c2aa:	f7ff ffb1 	bl	800c210 <Switch_PWM>
 800c2ae:	e7f1      	b.n	800c294 <Switch_toggle+0x18>
 800c2b0:	200019b0 	.word	0x200019b0
 800c2b4:	2000008c 	.word	0x2000008c
 800c2b8:	20006d8c 	.word	0x20006d8c

0800c2bc <toggleCommand>:
		const int8_t *pcCommandString) {
 800c2bc:	b510      	push	{r4, lr}
 800c2be:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800c2c0:	d101      	bne.n	800c2c6 <toggleCommand+0xa>
 800c2c2:	b672      	cpsid	i
 800c2c4:	e7fe      	b.n	800c2c4 <toggleCommand+0x8>
	result = Switch_toggle();
 800c2c6:	f7ff ffd9 	bl	800c27c <Switch_toggle>
	if (result == H0FRx_OK) {
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	d10e      	bne.n	800c2ec <toggleCommand+0x30>
		if (Switch_state) {
 800c2ce:	4b08      	ldr	r3, [pc, #32]	; (800c2f0 <toggleCommand+0x34>)
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d105      	bne.n	800c2e2 <toggleCommand+0x26>
			strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 800c2d6:	2223      	movs	r2, #35	; 0x23
 800c2d8:	4906      	ldr	r1, [pc, #24]	; (800c2f4 <toggleCommand+0x38>)
 800c2da:	0020      	movs	r0, r4
 800c2dc:	f008 fbe7 	bl	8014aae <memcpy>
 800c2e0:	e004      	b.n	800c2ec <toggleCommand+0x30>
			strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 800c2e2:	2222      	movs	r2, #34	; 0x22
 800c2e4:	4904      	ldr	r1, [pc, #16]	; (800c2f8 <toggleCommand+0x3c>)
 800c2e6:	0020      	movs	r0, r4
 800c2e8:	f008 fbe1 	bl	8014aae <memcpy>
}
 800c2ec:	2000      	movs	r0, #0
 800c2ee:	bd10      	pop	{r4, pc}
 800c2f0:	200019b0 	.word	0x200019b0
 800c2f4:	0801c2c0 	.word	0x0801c2c0
 800c2f8:	0801c7f0 	.word	0x0801c7f0

0800c2fc <pwmCommand>:
		const int8_t *pcCommandString) {
 800c2fc:	b530      	push	{r4, r5, lr}
 800c2fe:	b083      	sub	sp, #12
 800c300:	0005      	movs	r5, r0
 800c302:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800c304:	2300      	movs	r3, #0
 800c306:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 800c308:	2d00      	cmp	r5, #0
 800c30a:	d101      	bne.n	800c310 <pwmCommand+0x14>
 800c30c:	b672      	cpsid	i
 800c30e:	e7fe      	b.n	800c30e <pwmCommand+0x12>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800c310:	aa01      	add	r2, sp, #4
 800c312:	2101      	movs	r1, #1
 800c314:	f002 fc80 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	dutycycle = (float) atof((char*) pcParameterString1);
 800c318:	f008 f934 	bl	8014584 <atof>
 800c31c:	f7f6 fd8a 	bl	8002e34 <__aeabi_d2f>
 800c320:	1c04      	adds	r4, r0, #0
	if (dutycycle < 0.0f || dutycycle > 100.0f)
 800c322:	2100      	movs	r1, #0
 800c324:	f7f4 f8da 	bl	80004dc <__aeabi_fcmplt>
 800c328:	2800      	cmp	r0, #0
 800c32a:	d105      	bne.n	800c338 <pwmCommand+0x3c>
 800c32c:	490f      	ldr	r1, [pc, #60]	; (800c36c <pwmCommand+0x70>)
 800c32e:	1c20      	adds	r0, r4, #0
 800c330:	f7f4 f8e8 	bl	8000504 <__aeabi_fcmpgt>
 800c334:	2800      	cmp	r0, #0
 800c336:	d005      	beq.n	800c344 <pwmCommand+0x48>
		strcpy((char*) pcWriteBuffer, (char*) pcWrongValue);
 800c338:	2237      	movs	r2, #55	; 0x37
 800c33a:	490d      	ldr	r1, [pc, #52]	; (800c370 <pwmCommand+0x74>)
 800c33c:	0028      	movs	r0, r5
 800c33e:	f008 fbb6 	bl	8014aae <memcpy>
 800c342:	e00d      	b.n	800c360 <pwmCommand+0x64>
		result = Switch_PWM(dutycycle);
 800c344:	1c20      	adds	r0, r4, #0
 800c346:	f7ff ff63 	bl	800c210 <Switch_PWM>
	if (result == H0FRx_OK) {
 800c34a:	2800      	cmp	r0, #0
 800c34c:	d10b      	bne.n	800c366 <pwmCommand+0x6a>
		sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, dutycycle);
 800c34e:	1c20      	adds	r0, r4, #0
 800c350:	f7f6 fd1e 	bl	8002d90 <__aeabi_f2d>
 800c354:	0002      	movs	r2, r0
 800c356:	000b      	movs	r3, r1
 800c358:	4906      	ldr	r1, [pc, #24]	; (800c374 <pwmCommand+0x78>)
 800c35a:	0028      	movs	r0, r5
 800c35c:	f008 fdaa 	bl	8014eb4 <sprintf>
}
 800c360:	2000      	movs	r0, #0
 800c362:	b003      	add	sp, #12
 800c364:	bd30      	pop	{r4, r5, pc}
	} else if (result == H0FRx_ERR_Wrong_Value) {
 800c366:	2802      	cmp	r0, #2
 800c368:	d1fa      	bne.n	800c360 <pwmCommand+0x64>
 800c36a:	e7e5      	b.n	800c338 <pwmCommand+0x3c>
 800c36c:	42c80000 	.word	0x42c80000
 800c370:	0801c3c0 	.word	0x0801c3c0
 800c374:	0801c378 	.word	0x0801c378

0800c378 <Sample_Mosfet>:
float Sample_Mosfet(void) {
 800c378:	b510      	push	{r4, lr}
	mosfetMode = REQ_SAMPLE;
 800c37a:	4b08      	ldr	r3, [pc, #32]	; (800c39c <Sample_Mosfet+0x24>)
 800c37c:	220f      	movs	r2, #15
 800c37e:	701a      	strb	r2, [r3, #0]
	startMeasurement = START_MEASUREMENT;
 800c380:	4b07      	ldr	r3, [pc, #28]	; (800c3a0 <Sample_Mosfet+0x28>)
 800c382:	3a0e      	subs	r2, #14
 800c384:	701a      	strb	r2, [r3, #0]
	if (mosfetState == REQ_TIMEOUT) {
 800c386:	4b07      	ldr	r3, [pc, #28]	; (800c3a4 <Sample_Mosfet+0x2c>)
 800c388:	781b      	ldrb	r3, [r3, #0]
		return 0;
 800c38a:	2000      	movs	r0, #0
	if (mosfetState == REQ_TIMEOUT) {
 800c38c:	2b09      	cmp	r3, #9
 800c38e:	d004      	beq.n	800c39a <Sample_Mosfet+0x22>
		temp = Current_Calculation();
 800c390:	f7ff fe62 	bl	800c058 <Current_Calculation>
		mosfetState = REQ_IDLE;
 800c394:	4b03      	ldr	r3, [pc, #12]	; (800c3a4 <Sample_Mosfet+0x2c>)
 800c396:	2200      	movs	r2, #0
 800c398:	701a      	strb	r2, [r3, #0]
}
 800c39a:	bd10      	pop	{r4, pc}
 800c39c:	20006f34 	.word	0x20006f34
 800c3a0:	200019b8 	.word	0x200019b8
 800c3a4:	20006d90 	.word	0x20006d90

0800c3a8 <Stream_To_Port>:
		uint32_t Timeout) {
 800c3a8:	b510      	push	{r4, lr}
 800c3aa:	b082      	sub	sp, #8
	mosfetPort = Port;
 800c3ac:	4c18      	ldr	r4, [pc, #96]	; (800c410 <Stream_To_Port+0x68>)
 800c3ae:	7020      	strb	r0, [r4, #0]
	mosfetModule = Module;
 800c3b0:	4818      	ldr	r0, [pc, #96]	; (800c414 <Stream_To_Port+0x6c>)
 800c3b2:	7001      	strb	r1, [r0, #0]
	mosfetPeriod = Period;
 800c3b4:	4918      	ldr	r1, [pc, #96]	; (800c418 <Stream_To_Port+0x70>)
 800c3b6:	600a      	str	r2, [r1, #0]
	mosfetTimeout = Timeout;
 800c3b8:	4a18      	ldr	r2, [pc, #96]	; (800c41c <Stream_To_Port+0x74>)
 800c3ba:	6013      	str	r3, [r2, #0]
	mosfetMode = REQ_STREAM_PORT;
 800c3bc:	4a18      	ldr	r2, [pc, #96]	; (800c420 <Stream_To_Port+0x78>)
 800c3be:	2107      	movs	r1, #7
 800c3c0:	7011      	strb	r1, [r2, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800c3c2:	1e5a      	subs	r2, r3, #1
 800c3c4:	3203      	adds	r2, #3
 800c3c6:	d902      	bls.n	800c3ce <Stream_To_Port+0x26>
}
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	b002      	add	sp, #8
 800c3cc:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 800c3ce:	0158      	lsls	r0, r3, #5
 800c3d0:	1ac0      	subs	r0, r0, r3
 800c3d2:	0080      	lsls	r0, r0, #2
 800c3d4:	18c0      	adds	r0, r0, r3
 800c3d6:	00c0      	lsls	r0, r0, #3
		xTimerSwitch = xTimerCreate("mosfetTimer",
 800c3d8:	21fa      	movs	r1, #250	; 0xfa
 800c3da:	0089      	lsls	r1, r1, #2
 800c3dc:	f7f3 feb8 	bl	8000150 <__udivsi3>
 800c3e0:	0001      	movs	r1, r0
 800c3e2:	4b10      	ldr	r3, [pc, #64]	; (800c424 <Stream_To_Port+0x7c>)
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	23ff      	movs	r3, #255	; 0xff
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	480f      	ldr	r0, [pc, #60]	; (800c428 <Stream_To_Port+0x80>)
 800c3ec:	f003 ffea 	bl	80103c4 <xTimerCreate>
 800c3f0:	0004      	movs	r4, r0
 800c3f2:	4b0e      	ldr	r3, [pc, #56]	; (800c42c <Stream_To_Port+0x84>)
 800c3f4:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimerSwitch, portMAX_DELAY);
 800c3f6:	f003 fa7d 	bl	800f8f4 <xTaskGetTickCount>
 800c3fa:	0002      	movs	r2, r0
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	425b      	negs	r3, r3
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	2300      	movs	r3, #0
 800c404:	2101      	movs	r1, #1
 800c406:	0020      	movs	r0, r4
 800c408:	f003 fffc 	bl	8010404 <xTimerGenericCommand>
 800c40c:	e7dc      	b.n	800c3c8 <Stream_To_Port+0x20>
 800c40e:	46c0      	nop			; (mov r8, r8)
 800c410:	20006eb8 	.word	0x20006eb8
 800c414:	20006d88 	.word	0x20006d88
 800c418:	20006eb4 	.word	0x20006eb4
 800c41c:	20006fa8 	.word	0x20006fa8
 800c420:	20006f34 	.word	0x20006f34
 800c424:	0800c1b5 	.word	0x0800c1b5
 800c428:	0801c0f4 	.word	0x0801c0f4
 800c42c:	200019c0 	.word	0x200019c0

0800c430 <Stream_To_CLI>:
float Stream_To_CLI(uint32_t Period, uint32_t Timeout) {
 800c430:	b510      	push	{r4, lr}
 800c432:	b082      	sub	sp, #8
	mosfetPeriod = Period;
 800c434:	4b19      	ldr	r3, [pc, #100]	; (800c49c <Stream_To_CLI+0x6c>)
 800c436:	6018      	str	r0, [r3, #0]
	mosfetTimeout = Timeout;
 800c438:	4b19      	ldr	r3, [pc, #100]	; (800c4a0 <Stream_To_CLI+0x70>)
 800c43a:	6019      	str	r1, [r3, #0]
	mosfetMode = REQ_STREAM_PORT_CLI;
 800c43c:	4b19      	ldr	r3, [pc, #100]	; (800c4a4 <Stream_To_CLI+0x74>)
 800c43e:	2205      	movs	r2, #5
 800c440:	701a      	strb	r2, [r3, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800c442:	1e4b      	subs	r3, r1, #1
 800c444:	3303      	adds	r3, #3
 800c446:	d909      	bls.n	800c45c <Stream_To_CLI+0x2c>
	if (mosfetTimeout > 0) {
 800c448:	4b15      	ldr	r3, [pc, #84]	; (800c4a0 <Stream_To_CLI+0x70>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d002      	beq.n	800c456 <Stream_To_CLI+0x26>
		startMeasurement = START_MEASUREMENT;
 800c450:	4b15      	ldr	r3, [pc, #84]	; (800c4a8 <Stream_To_CLI+0x78>)
 800c452:	2201      	movs	r2, #1
 800c454:	701a      	strb	r2, [r3, #0]
}
 800c456:	2000      	movs	r0, #0
 800c458:	b002      	add	sp, #8
 800c45a:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 800c45c:	0148      	lsls	r0, r1, #5
 800c45e:	1a40      	subs	r0, r0, r1
 800c460:	0080      	lsls	r0, r0, #2
 800c462:	1840      	adds	r0, r0, r1
 800c464:	00c0      	lsls	r0, r0, #3
		xTimerSwitch = xTimerCreate("mosfetTimer",
 800c466:	21fa      	movs	r1, #250	; 0xfa
 800c468:	0089      	lsls	r1, r1, #2
 800c46a:	f7f3 fe71 	bl	8000150 <__udivsi3>
 800c46e:	0001      	movs	r1, r0
 800c470:	4b0e      	ldr	r3, [pc, #56]	; (800c4ac <Stream_To_CLI+0x7c>)
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	23ff      	movs	r3, #255	; 0xff
 800c476:	2200      	movs	r2, #0
 800c478:	480d      	ldr	r0, [pc, #52]	; (800c4b0 <Stream_To_CLI+0x80>)
 800c47a:	f003 ffa3 	bl	80103c4 <xTimerCreate>
 800c47e:	0004      	movs	r4, r0
 800c480:	4b0c      	ldr	r3, [pc, #48]	; (800c4b4 <Stream_To_CLI+0x84>)
 800c482:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimerSwitch, portMAX_DELAY);
 800c484:	f003 fa36 	bl	800f8f4 <xTaskGetTickCount>
 800c488:	0002      	movs	r2, r0
 800c48a:	2301      	movs	r3, #1
 800c48c:	425b      	negs	r3, r3
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	2300      	movs	r3, #0
 800c492:	2101      	movs	r1, #1
 800c494:	0020      	movs	r0, r4
 800c496:	f003 ffb5 	bl	8010404 <xTimerGenericCommand>
 800c49a:	e7d5      	b.n	800c448 <Stream_To_CLI+0x18>
 800c49c:	20006eb4 	.word	0x20006eb4
 800c4a0:	20006fa8 	.word	0x20006fa8
 800c4a4:	20006f34 	.word	0x20006f34
 800c4a8:	200019b8 	.word	0x200019b8
 800c4ac:	0800c1b5 	.word	0x0800c1b5
 800c4b0:	0801c0f4 	.word	0x0801c0f4
 800c4b4:	200019c0 	.word	0x200019c0

0800c4b8 <Stream_To_CLI_V>:
float Stream_To_CLI_V(uint32_t Period, uint32_t Timeout) {
 800c4b8:	b510      	push	{r4, lr}
 800c4ba:	b082      	sub	sp, #8
	mosfetPeriod = Period;
 800c4bc:	4b19      	ldr	r3, [pc, #100]	; (800c524 <Stream_To_CLI_V+0x6c>)
 800c4be:	6018      	str	r0, [r3, #0]
	mosfetTimeout = Timeout;
 800c4c0:	4b19      	ldr	r3, [pc, #100]	; (800c528 <Stream_To_CLI_V+0x70>)
 800c4c2:	6019      	str	r1, [r3, #0]
	mosfetMode = REQ_STREAM_VERBOSE_PORT_CLI;
 800c4c4:	4b19      	ldr	r3, [pc, #100]	; (800c52c <Stream_To_CLI_V+0x74>)
 800c4c6:	2206      	movs	r2, #6
 800c4c8:	701a      	strb	r2, [r3, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF)) {
 800c4ca:	1e4b      	subs	r3, r1, #1
 800c4cc:	3303      	adds	r3, #3
 800c4ce:	d909      	bls.n	800c4e4 <Stream_To_CLI_V+0x2c>
	if (mosfetTimeout > 0) {
 800c4d0:	4b15      	ldr	r3, [pc, #84]	; (800c528 <Stream_To_CLI_V+0x70>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d002      	beq.n	800c4de <Stream_To_CLI_V+0x26>
		startMeasurement = START_MEASUREMENT;
 800c4d8:	4b15      	ldr	r3, [pc, #84]	; (800c530 <Stream_To_CLI_V+0x78>)
 800c4da:	2201      	movs	r2, #1
 800c4dc:	701a      	strb	r2, [r3, #0]
}
 800c4de:	2000      	movs	r0, #0
 800c4e0:	b002      	add	sp, #8
 800c4e2:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(mosfetTimeout), pdFALSE,
 800c4e4:	0148      	lsls	r0, r1, #5
 800c4e6:	1a40      	subs	r0, r0, r1
 800c4e8:	0080      	lsls	r0, r0, #2
 800c4ea:	1840      	adds	r0, r0, r1
 800c4ec:	00c0      	lsls	r0, r0, #3
		xTimerSwitch = xTimerCreate("mosfetTimer",
 800c4ee:	21fa      	movs	r1, #250	; 0xfa
 800c4f0:	0089      	lsls	r1, r1, #2
 800c4f2:	f7f3 fe2d 	bl	8000150 <__udivsi3>
 800c4f6:	0001      	movs	r1, r0
 800c4f8:	4b0e      	ldr	r3, [pc, #56]	; (800c534 <Stream_To_CLI_V+0x7c>)
 800c4fa:	9300      	str	r3, [sp, #0]
 800c4fc:	23ff      	movs	r3, #255	; 0xff
 800c4fe:	2200      	movs	r2, #0
 800c500:	480d      	ldr	r0, [pc, #52]	; (800c538 <Stream_To_CLI_V+0x80>)
 800c502:	f003 ff5f 	bl	80103c4 <xTimerCreate>
 800c506:	0004      	movs	r4, r0
 800c508:	4b0c      	ldr	r3, [pc, #48]	; (800c53c <Stream_To_CLI_V+0x84>)
 800c50a:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimerSwitch, portMAX_DELAY);
 800c50c:	f003 f9f2 	bl	800f8f4 <xTaskGetTickCount>
 800c510:	0002      	movs	r2, r0
 800c512:	2301      	movs	r3, #1
 800c514:	425b      	negs	r3, r3
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	2300      	movs	r3, #0
 800c51a:	2101      	movs	r1, #1
 800c51c:	0020      	movs	r0, r4
 800c51e:	f003 ff71 	bl	8010404 <xTimerGenericCommand>
 800c522:	e7d5      	b.n	800c4d0 <Stream_To_CLI_V+0x18>
 800c524:	20006eb4 	.word	0x20006eb4
 800c528:	20006fa8 	.word	0x20006fa8
 800c52c:	20006f34 	.word	0x20006f34
 800c530:	200019b8 	.word	0x200019b8
 800c534:	0800c1b5 	.word	0x0800c1b5
 800c538:	0801c0f4 	.word	0x0801c0f4
 800c53c:	200019c0 	.word	0x200019c0

0800c540 <Stream_To_Buffer>:
{
 800c540:	b510      	push	{r4, lr}
 800c542:	b082      	sub	sp, #8
	mosfetPeriod=Period;
 800c544:	4b17      	ldr	r3, [pc, #92]	; (800c5a4 <Stream_To_Buffer+0x64>)
 800c546:	6019      	str	r1, [r3, #0]
	mosfetTimeout=Timeout;
 800c548:	4b17      	ldr	r3, [pc, #92]	; (800c5a8 <Stream_To_Buffer+0x68>)
 800c54a:	601a      	str	r2, [r3, #0]
	ptrBuffer=Buffer;
 800c54c:	4b17      	ldr	r3, [pc, #92]	; (800c5ac <Stream_To_Buffer+0x6c>)
 800c54e:	6018      	str	r0, [r3, #0]
	mosfetMode=REQ_STREAM_BUFFER;
 800c550:	4b17      	ldr	r3, [pc, #92]	; (800c5b0 <Stream_To_Buffer+0x70>)
 800c552:	2108      	movs	r1, #8
 800c554:	7019      	strb	r1, [r3, #0]
	if ((mosfetTimeout > 0) && (mosfetTimeout < 0xFFFFFFFF))
 800c556:	1e53      	subs	r3, r2, #1
 800c558:	3303      	adds	r3, #3
 800c55a:	d902      	bls.n	800c562 <Stream_To_Buffer+0x22>
}
 800c55c:	2000      	movs	r0, #0
 800c55e:	b002      	add	sp, #8
 800c560:	bd10      	pop	{r4, pc}
		xTimerSwitch = xTimerCreate( "mosfetTimer", pdMS_TO_TICKS(mosfetTimeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, SwitchTimerCallback );
 800c562:	0150      	lsls	r0, r2, #5
 800c564:	1a80      	subs	r0, r0, r2
 800c566:	0080      	lsls	r0, r0, #2
 800c568:	1880      	adds	r0, r0, r2
 800c56a:	00c0      	lsls	r0, r0, #3
 800c56c:	21fa      	movs	r1, #250	; 0xfa
 800c56e:	0089      	lsls	r1, r1, #2
 800c570:	f7f3 fdee 	bl	8000150 <__udivsi3>
 800c574:	0001      	movs	r1, r0
 800c576:	4b0f      	ldr	r3, [pc, #60]	; (800c5b4 <Stream_To_Buffer+0x74>)
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	23ff      	movs	r3, #255	; 0xff
 800c57c:	2200      	movs	r2, #0
 800c57e:	480e      	ldr	r0, [pc, #56]	; (800c5b8 <Stream_To_Buffer+0x78>)
 800c580:	f003 ff20 	bl	80103c4 <xTimerCreate>
 800c584:	0004      	movs	r4, r0
 800c586:	4b0d      	ldr	r3, [pc, #52]	; (800c5bc <Stream_To_Buffer+0x7c>)
 800c588:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimerSwitch, portMAX_DELAY );
 800c58a:	f003 f9b3 	bl	800f8f4 <xTaskGetTickCount>
 800c58e:	0002      	movs	r2, r0
 800c590:	2301      	movs	r3, #1
 800c592:	425b      	negs	r3, r3
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	2300      	movs	r3, #0
 800c598:	2101      	movs	r1, #1
 800c59a:	0020      	movs	r0, r4
 800c59c:	f003 ff32 	bl	8010404 <xTimerGenericCommand>
 800c5a0:	e7dc      	b.n	800c55c <Stream_To_Buffer+0x1c>
 800c5a2:	46c0      	nop			; (mov r8, r8)
 800c5a4:	20006eb4 	.word	0x20006eb4
 800c5a8:	20006fa8 	.word	0x20006fa8
 800c5ac:	2000009c 	.word	0x2000009c
 800c5b0:	20006f34 	.word	0x20006f34
 800c5b4:	0800c1b5 	.word	0x0800c1b5
 800c5b8:	0801c0f4 	.word	0x0801c0f4
 800c5bc:	200019c0 	.word	0x200019c0

0800c5c0 <Stop_Mosfet>:
Module_Status Stop_Mosfet(void) {
 800c5c0:	b500      	push	{lr}
 800c5c2:	b083      	sub	sp, #12
	mosfetMode = REQ_IDLE;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	4a09      	ldr	r2, [pc, #36]	; (800c5ec <Stop_Mosfet+0x2c>)
 800c5c8:	7013      	strb	r3, [r2, #0]
	startMeasurement = STOP_MEASUREMENT;
 800c5ca:	4a09      	ldr	r2, [pc, #36]	; (800c5f0 <Stop_Mosfet+0x30>)
 800c5cc:	7013      	strb	r3, [r2, #0]
	xTimerStop(xTimerSwitch, 0);
 800c5ce:	4a09      	ldr	r2, [pc, #36]	; (800c5f4 <Stop_Mosfet+0x34>)
 800c5d0:	6810      	ldr	r0, [r2, #0]
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	2103      	movs	r1, #3
 800c5d8:	f003 ff14 	bl	8010404 <xTimerGenericCommand>
	Switch_off();
 800c5dc:	f7ff fdbe 	bl	800c15c <Switch_off>
	HAL_ADC_Stop(&hadc);
 800c5e0:	4805      	ldr	r0, [pc, #20]	; (800c5f8 <Stop_Mosfet+0x38>)
 800c5e2:	f004 fbe9 	bl	8010db8 <HAL_ADC_Stop>
}
 800c5e6:	2000      	movs	r0, #0
 800c5e8:	b003      	add	sp, #12
 800c5ea:	bd00      	pop	{pc}
 800c5ec:	20006f34 	.word	0x20006f34
 800c5f0:	200019b8 	.word	0x200019b8
 800c5f4:	200019c0 	.word	0x200019c0
 800c5f8:	20006cac 	.word	0x20006cac

0800c5fc <mosfetStreamCommand>:
/*-----------------------------------------------------------*/

static portBASE_TYPE mosfetStreamCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800c5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5fe:	b089      	sub	sp, #36	; 0x24
 800c600:	0004      	movs	r4, r0
 800c602:	9202      	str	r2, [sp, #8]

	int8_t *pcParameterString1; /* period */
	int8_t *pcParameterString2; /* timeout */
	int8_t *pcParameterString3; /* port or buffer */
	int8_t *pcParameterString4; /* module */
	portBASE_TYPE xParameterStringLength1 = 0;
 800c604:	2300      	movs	r3, #0
 800c606:	9307      	str	r3, [sp, #28]
	portBASE_TYPE xParameterStringLength2 = 0;
 800c608:	9306      	str	r3, [sp, #24]
	portBASE_TYPE xParameterStringLength3 = 0;
 800c60a:	9305      	str	r3, [sp, #20]
	portBASE_TYPE xParameterStringLength4 = 0;
 800c60c:	9304      	str	r3, [sp, #16]

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800c60e:	2800      	cmp	r0, #0
 800c610:	d101      	bne.n	800c616 <mosfetStreamCommand+0x1a>
 800c612:	b672      	cpsid	i
 800c614:	e7fe      	b.n	800c614 <mosfetStreamCommand+0x18>

	/* Obtain the 1st parameter string: period */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800c616:	aa07      	add	r2, sp, #28
 800c618:	2101      	movs	r1, #1
 800c61a:	9f02      	ldr	r7, [sp, #8]
 800c61c:	0038      	movs	r0, r7
 800c61e:	f002 fafb 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 800c622:	0006      	movs	r6, r0
			&xParameterStringLength1);
	/* Obtain the 2nd parameter string: timeout */
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,
 800c624:	aa06      	add	r2, sp, #24
 800c626:	2102      	movs	r1, #2
 800c628:	0038      	movs	r0, r7
 800c62a:	f002 faf5 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 800c62e:	0005      	movs	r5, r0
			&xParameterStringLength2);
	/* Obtain the 3rd parameter string: port */
	pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3,
 800c630:	aa05      	add	r2, sp, #20
 800c632:	2103      	movs	r1, #3
 800c634:	9702      	str	r7, [sp, #8]
 800c636:	0038      	movs	r0, r7
 800c638:	f002 faee 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 800c63c:	0007      	movs	r7, r0
			&xParameterStringLength3);
	/* Obtain the 4th parameter string: module */
	pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 4,
 800c63e:	aa04      	add	r2, sp, #16
 800c640:	2104      	movs	r1, #4
 800c642:	9802      	ldr	r0, [sp, #8]
 800c644:	f002 fae8 	bl	800ec18 <FreeRTOS_CLIGetParameter>
 800c648:	9003      	str	r0, [sp, #12]
			&xParameterStringLength4);

	if (NULL != pcParameterString1) {
 800c64a:	2e00      	cmp	r6, #0
 800c64c:	d037      	beq.n	800c6be <mosfetStreamCommand+0xc2>
		Period = atoi((char*) pcParameterString1);
 800c64e:	0030      	movs	r0, r6
 800c650:	f007 ff9d 	bl	801458e <atoi>
 800c654:	9002      	str	r0, [sp, #8]
	Module_Status result = H0FRx_OK;
 800c656:	2600      	movs	r6, #0
	} else {
		result = H0FRx_ERR_WrongParams;
	}
	if (NULL != pcParameterString2) {
 800c658:	2d00      	cmp	r5, #0
 800c65a:	d039      	beq.n	800c6d0 <mosfetStreamCommand+0xd4>
		if (!strncmp((const char*) pcParameterString2, "inf", 3)) {
 800c65c:	2203      	movs	r2, #3
 800c65e:	4963      	ldr	r1, [pc, #396]	; (800c7ec <mosfetStreamCommand+0x1f0>)
 800c660:	0028      	movs	r0, r5
 800c662:	f008 fc6b 	bl	8014f3c <strncmp>
 800c666:	2800      	cmp	r0, #0
 800c668:	d12d      	bne.n	800c6c6 <mosfetStreamCommand+0xca>
			Timeout = portMAX_DELAY;
 800c66a:	2501      	movs	r5, #1
 800c66c:	426d      	negs	r5, r5
	} else {
		result = H0FRx_ERR_WrongParams;
	}

	/* streaming data to internal buffer (module parameter) */
		if (NULL != pcParameterString3 && !strncmp((const char *)pcParameterString3, "buffer", 6))
 800c66e:	2f00      	cmp	r7, #0
 800c670:	d03e      	beq.n	800c6f0 <mosfetStreamCommand+0xf4>
 800c672:	2206      	movs	r2, #6
 800c674:	495e      	ldr	r1, [pc, #376]	; (800c7f0 <mosfetStreamCommand+0x1f4>)
 800c676:	0038      	movs	r0, r7
 800c678:	f008 fc60 	bl	8014f3c <strncmp>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	d02a      	beq.n	800c6d6 <mosfetStreamCommand+0xda>

			// Return right away here as we don't want to block the CLI
			return pdFALSE;
		}
	/* streaming data to port */
	else if (NULL != pcParameterString3 && NULL != pcParameterString4
 800c680:	9b03      	ldr	r3, [sp, #12]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d057      	beq.n	800c736 <mosfetStreamCommand+0x13a>
			&& pcParameterString3[0] == 'p') {
 800c686:	2300      	movs	r3, #0
 800c688:	56fb      	ldrsb	r3, [r7, r3]
 800c68a:	2b70      	cmp	r3, #112	; 0x70
 800c68c:	d153      	bne.n	800c736 <mosfetStreamCommand+0x13a>
		Port = (uint8_t) atol((char*) pcParameterString3 + 1);
 800c68e:	1c78      	adds	r0, r7, #1
 800c690:	f007 ff83 	bl	801459a <atol>
 800c694:	0006      	movs	r6, r0
		Module = atoi((char*) pcParameterString4);
 800c696:	9803      	ldr	r0, [sp, #12]
 800c698:	f007 ff79 	bl	801458e <atoi>
 800c69c:	27ff      	movs	r7, #255	; 0xff
 800c69e:	403e      	ands	r6, r7
 800c6a0:	4007      	ands	r7, r0
		sprintf((char*) pcWriteBuffer, (char*) pcMessageModule, Port, Module);
 800c6a2:	003b      	movs	r3, r7
 800c6a4:	0032      	movs	r2, r6
 800c6a6:	4953      	ldr	r1, [pc, #332]	; (800c7f4 <mosfetStreamCommand+0x1f8>)
 800c6a8:	0020      	movs	r0, r4
 800c6aa:	f008 fc03 	bl	8014eb4 <sprintf>
		Stream_To_Port(Period, Timeout, Port, Module);
 800c6ae:	b2e9      	uxtb	r1, r5
 800c6b0:	466b      	mov	r3, sp
 800c6b2:	7a18      	ldrb	r0, [r3, #8]
 800c6b4:	003b      	movs	r3, r7
 800c6b6:	0032      	movs	r2, r6
 800c6b8:	f7ff fe76 	bl	800c3a8 <Stream_To_Port>
		// Return right away here as we don't want to block the CLI
		return pdFALSE;
 800c6bc:	e015      	b.n	800c6ea <mosfetStreamCommand+0xee>
		result = H0FRx_ERR_WrongParams;
 800c6be:	2604      	movs	r6, #4
	uint32_t Period = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	9302      	str	r3, [sp, #8]
 800c6c4:	e7c8      	b.n	800c658 <mosfetStreamCommand+0x5c>
			Timeout = atoi((char*) pcParameterString2);
 800c6c6:	0028      	movs	r0, r5
 800c6c8:	f007 ff61 	bl	801458e <atoi>
 800c6cc:	0005      	movs	r5, r0
 800c6ce:	e7ce      	b.n	800c66e <mosfetStreamCommand+0x72>
		result = H0FRx_ERR_WrongParams;
 800c6d0:	2604      	movs	r6, #4
	uint32_t Timeout = 0;
 800c6d2:	2500      	movs	r5, #0
 800c6d4:	e7cb      	b.n	800c66e <mosfetStreamCommand+0x72>
			strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageBuffer);
 800c6d6:	225f      	movs	r2, #95	; 0x5f
 800c6d8:	4947      	ldr	r1, [pc, #284]	; (800c7f8 <mosfetStreamCommand+0x1fc>)
 800c6da:	0020      	movs	r0, r4
 800c6dc:	f008 f9e7 	bl	8014aae <memcpy>
			Stream_To_Buffer(&mosfetBuffer, Period, Timeout);
 800c6e0:	002a      	movs	r2, r5
 800c6e2:	9902      	ldr	r1, [sp, #8]
 800c6e4:	4845      	ldr	r0, [pc, #276]	; (800c7fc <mosfetStreamCommand+0x200>)
 800c6e6:	f7ff ff2b 	bl	800c540 <Stream_To_Buffer>
			memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
		}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	b009      	add	sp, #36	; 0x24
 800c6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
				strcpy((char*) pcWriteBuffer, (char*) pcMessageCLI);
 800c6f0:	2225      	movs	r2, #37	; 0x25
 800c6f2:	4943      	ldr	r1, [pc, #268]	; (800c800 <mosfetStreamCommand+0x204>)
 800c6f4:	0020      	movs	r0, r4
 800c6f6:	f008 f9da 	bl	8014aae <memcpy>
						strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c6fa:	0020      	movs	r0, r4
 800c6fc:	f7f3 fd0c 	bl	8000118 <strlen>
				writePxMutex(PcPort, (char*) pcWriteBuffer,
 800c700:	b282      	uxth	r2, r0
 800c702:	4b40      	ldr	r3, [pc, #256]	; (800c804 <mosfetStreamCommand+0x208>)
 800c704:	7818      	ldrb	r0, [r3, #0]
 800c706:	2301      	movs	r3, #1
 800c708:	425b      	negs	r3, r3
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	3333      	adds	r3, #51	; 0x33
 800c70e:	0021      	movs	r1, r4
 800c710:	f002 f83c 	bl	800e78c <writePxMutex>
				Stream_To_CLI(Period, Timeout);
 800c714:	0029      	movs	r1, r5
 800c716:	9802      	ldr	r0, [sp, #8]
 800c718:	f7ff fe8a 	bl	800c430 <Stream_To_CLI>
				while (startMeasurement != STOP_MEASUREMENT) {
 800c71c:	4b3a      	ldr	r3, [pc, #232]	; (800c808 <mosfetStreamCommand+0x20c>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d005      	beq.n	800c730 <mosfetStreamCommand+0x134>
 800c724:	4d38      	ldr	r5, [pc, #224]	; (800c808 <mosfetStreamCommand+0x20c>)
					taskYIELD();
 800c726:	f004 f817 	bl	8010758 <vPortYield>
				while (startMeasurement != STOP_MEASUREMENT) {
 800c72a:	782b      	ldrb	r3, [r5, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1fa      	bne.n	800c726 <mosfetStreamCommand+0x12a>
	if (H0FRx_ERR_WrongParams == result) {
 800c730:	2e04      	cmp	r6, #4
 800c732:	d10c      	bne.n	800c74e <mosfetStreamCommand+0x152>
 800c734:	e006      	b.n	800c744 <mosfetStreamCommand+0x148>
					&& !strncmp((const char*) pcParameterString3, "-v", 2)) {
 800c736:	2202      	movs	r2, #2
 800c738:	4934      	ldr	r1, [pc, #208]	; (800c80c <mosfetStreamCommand+0x210>)
 800c73a:	0038      	movs	r0, r7
 800c73c:	f008 fbfe 	bl	8014f3c <strncmp>
 800c740:	2800      	cmp	r0, #0
 800c742:	d013      	beq.n	800c76c <mosfetStreamCommand+0x170>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
 800c744:	2212      	movs	r2, #18
 800c746:	4932      	ldr	r1, [pc, #200]	; (800c810 <mosfetStreamCommand+0x214>)
 800c748:	0020      	movs	r0, r4
 800c74a:	f008 f9b0 	bl	8014aae <memcpy>
	Stop_Mosfet();
 800c74e:	f7ff ff37 	bl	800c5c0 <Stop_Mosfet>
		if (stopB) {
 800c752:	4b30      	ldr	r3, [pc, #192]	; (800c814 <mosfetStreamCommand+0x218>)
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d129      	bne.n	800c7ae <mosfetStreamCommand+0x1b2>
			memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800c75a:	0020      	movs	r0, r4
 800c75c:	f7f3 fcdc 	bl	8000118 <strlen>
 800c760:	0002      	movs	r2, r0
 800c762:	2100      	movs	r1, #0
 800c764:	0020      	movs	r0, r4
 800c766:	f008 f9ab 	bl	8014ac0 <memset>
 800c76a:	e7be      	b.n	800c6ea <mosfetStreamCommand+0xee>
				strcpy((char*) pcWriteBuffer, (char*) pcMessageCLI);
 800c76c:	2225      	movs	r2, #37	; 0x25
 800c76e:	4924      	ldr	r1, [pc, #144]	; (800c800 <mosfetStreamCommand+0x204>)
 800c770:	0020      	movs	r0, r4
 800c772:	f008 f99c 	bl	8014aae <memcpy>
						strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c776:	0020      	movs	r0, r4
 800c778:	f7f3 fcce 	bl	8000118 <strlen>
				writePxMutex(PcPort, (char*) pcWriteBuffer,
 800c77c:	b282      	uxth	r2, r0
 800c77e:	4b21      	ldr	r3, [pc, #132]	; (800c804 <mosfetStreamCommand+0x208>)
 800c780:	7818      	ldrb	r0, [r3, #0]
 800c782:	2301      	movs	r3, #1
 800c784:	425b      	negs	r3, r3
 800c786:	9300      	str	r3, [sp, #0]
 800c788:	3333      	adds	r3, #51	; 0x33
 800c78a:	0021      	movs	r1, r4
 800c78c:	f001 fffe 	bl	800e78c <writePxMutex>
				Stream_To_CLI_V(Period, Timeout);
 800c790:	0029      	movs	r1, r5
 800c792:	9802      	ldr	r0, [sp, #8]
 800c794:	f7ff fe90 	bl	800c4b8 <Stream_To_CLI_V>
				while (startMeasurement != STOP_MEASUREMENT) {taskYIELD();}
 800c798:	4b1b      	ldr	r3, [pc, #108]	; (800c808 <mosfetStreamCommand+0x20c>)
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d0c7      	beq.n	800c730 <mosfetStreamCommand+0x134>
 800c7a0:	4d19      	ldr	r5, [pc, #100]	; (800c808 <mosfetStreamCommand+0x20c>)
 800c7a2:	f003 ffd9 	bl	8010758 <vPortYield>
 800c7a6:	782b      	ldrb	r3, [r5, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1fa      	bne.n	800c7a2 <mosfetStreamCommand+0x1a6>
 800c7ac:	e7c0      	b.n	800c730 <mosfetStreamCommand+0x134>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageStopMsg);
 800c7ae:	2221      	movs	r2, #33	; 0x21
 800c7b0:	4919      	ldr	r1, [pc, #100]	; (800c818 <mosfetStreamCommand+0x21c>)
 800c7b2:	0020      	movs	r0, r4
 800c7b4:	f008 f97b 	bl	8014aae <memcpy>
					strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c7b8:	0020      	movs	r0, r4
 800c7ba:	f7f3 fcad 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcWriteBuffer,
 800c7be:	b282      	uxth	r2, r0
 800c7c0:	4b10      	ldr	r3, [pc, #64]	; (800c804 <mosfetStreamCommand+0x208>)
 800c7c2:	7818      	ldrb	r0, [r3, #0]
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	425b      	negs	r3, r3
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	3333      	adds	r3, #51	; 0x33
 800c7cc:	0021      	movs	r1, r4
 800c7ce:	f001 ffdd 	bl	800e78c <writePxMutex>
			memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800c7d2:	0020      	movs	r0, r4
 800c7d4:	f7f3 fca0 	bl	8000118 <strlen>
 800c7d8:	0002      	movs	r2, r0
 800c7da:	2100      	movs	r1, #0
 800c7dc:	0020      	movs	r0, r4
 800c7de:	f008 f96f 	bl	8014ac0 <memset>
			stopB = 0;
 800c7e2:	4b0c      	ldr	r3, [pc, #48]	; (800c814 <mosfetStreamCommand+0x218>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	701a      	strb	r2, [r3, #0]
 800c7e8:	e77f      	b.n	800c6ea <mosfetStreamCommand+0xee>
 800c7ea:	46c0      	nop			; (mov r8, r8)
 800c7ec:	0801c2f4 	.word	0x0801c2f4
 800c7f0:	0801c1b0 	.word	0x0801c1b0
 800c7f4:	0801c218 	.word	0x0801c218
 800c7f8:	0801c1b8 	.word	0x0801c1b8
 800c7fc:	200019b4 	.word	0x200019b4
 800c800:	0801c24c 	.word	0x0801c24c
 800c804:	20000a88 	.word	0x20000a88
 800c808:	200019b8 	.word	0x200019b8
 800c80c:	0801c274 	.word	0x0801c274
 800c810:	0801c278 	.word	0x0801c278
 800c814:	200019b9 	.word	0x200019b9
 800c818:	0801c28c 	.word	0x0801c28c

0800c81c <MosfetStopCommand>:
/*-----------------------------------------------------------*/

static portBASE_TYPE MosfetStopCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800c81c:	b510      	push	{r4, lr}
 800c81e:	1e04      	subs	r4, r0, #0
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) pcCommandString;
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800c820:	d101      	bne.n	800c826 <MosfetStopCommand+0xa>
 800c822:	b672      	cpsid	i
 800c824:	e7fe      	b.n	800c824 <MosfetStopCommand+0x8>

	result = Stop_Mosfet();
 800c826:	f7ff fecb 	bl	800c5c0 <Stop_Mosfet>

	if (H0FRx_OK == result) {
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d005      	beq.n	800c83a <MosfetStopCommand+0x1e>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
	} else {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
 800c82e:	222d      	movs	r2, #45	; 0x2d
 800c830:	4905      	ldr	r1, [pc, #20]	; (800c848 <MosfetStopCommand+0x2c>)
 800c832:	0020      	movs	r0, r4
 800c834:	f008 f93b 	bl	8014aae <memcpy>
 800c838:	e004      	b.n	800c844 <MosfetStopCommand+0x28>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
 800c83a:	2221      	movs	r2, #33	; 0x21
 800c83c:	4903      	ldr	r1, [pc, #12]	; (800c84c <MosfetStopCommand+0x30>)
 800c83e:	0020      	movs	r0, r4
 800c840:	f008 f935 	bl	8014aae <memcpy>
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800c844:	2000      	movs	r0, #0
 800c846:	bd10      	pop	{r4, pc}
 800c848:	0801c0a0 	.word	0x0801c0a0
 800c84c:	0801c07c 	.word	0x0801c07c

0800c850 <MosfetTask>:
static void MosfetTask(void *argument) {
 800c850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c852:	46d6      	mov	lr, sl
 800c854:	464f      	mov	r7, r9
 800c856:	4646      	mov	r6, r8
 800c858:	b5c0      	push	{r6, r7, lr}
 800c85a:	b082      	sub	sp, #8
		switch (mosfetMode) {
 800c85c:	4e4d      	ldr	r6, [pc, #308]	; (800c994 <MosfetTask+0x144>)
					mosfetMode = REQ_STOP;
 800c85e:	46b0      	mov	r8, r6
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c860:	4d4d      	ldr	r5, [pc, #308]	; (800c998 <MosfetTask+0x148>)
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c862:	002c      	movs	r4, r5
 800c864:	e089      	b.n	800c97a <MosfetTask+0x12a>
					t0 = HAL_GetTick();
 800c866:	f004 f8ef 	bl	8010a48 <HAL_GetTick>
 800c86a:	4681      	mov	r9, r0
					Current = Current_Calculation();
 800c86c:	f7ff fbf4 	bl	800c058 <Current_Calculation>
 800c870:	1c01      	adds	r1, r0, #0
 800c872:	4b4a      	ldr	r3, [pc, #296]	; (800c99c <MosfetTask+0x14c>)
 800c874:	6018      	str	r0, [r3, #0]
					SendMeasurementResult(mosfetMode, Current, 0, 0, NULL);
 800c876:	4b47      	ldr	r3, [pc, #284]	; (800c994 <MosfetTask+0x144>)
 800c878:	7818      	ldrb	r0, [r3, #0]
 800c87a:	2300      	movs	r3, #0
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	2200      	movs	r2, #0
 800c880:	f7fe fff4 	bl	800b86c <SendMeasurementResult>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c884:	4f46      	ldr	r7, [pc, #280]	; (800c9a0 <MosfetTask+0x150>)
 800c886:	4b44      	ldr	r3, [pc, #272]	; (800c998 <MosfetTask+0x148>)
 800c888:	469a      	mov	sl, r3
 800c88a:	e001      	b.n	800c890 <MosfetTask+0x40>
						taskYIELD();
 800c88c:	f003 ff64 	bl	8010758 <vPortYield>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c890:	f004 f8da 	bl	8010a48 <HAL_GetTick>
 800c894:	464b      	mov	r3, r9
 800c896:	1ac0      	subs	r0, r0, r3
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	3b01      	subs	r3, #1
 800c89c:	4298      	cmp	r0, r3
 800c89e:	d26a      	bcs.n	800c976 <MosfetTask+0x126>
 800c8a0:	4653      	mov	r3, sl
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d0f1      	beq.n	800c88c <MosfetTask+0x3c>
 800c8a8:	e065      	b.n	800c976 <MosfetTask+0x126>
					t0 = HAL_GetTick();
 800c8aa:	f004 f8cd 	bl	8010a48 <HAL_GetTick>
 800c8ae:	4681      	mov	r9, r0
					Current = Current_Calculation();
 800c8b0:	f7ff fbd2 	bl	800c058 <Current_Calculation>
 800c8b4:	1c01      	adds	r1, r0, #0
 800c8b6:	4b39      	ldr	r3, [pc, #228]	; (800c99c <MosfetTask+0x14c>)
 800c8b8:	6018      	str	r0, [r3, #0]
					SendMeasurementResult(mosfetMode, Current, 0, 0, NULL);
 800c8ba:	4b36      	ldr	r3, [pc, #216]	; (800c994 <MosfetTask+0x144>)
 800c8bc:	7818      	ldrb	r0, [r3, #0]
 800c8be:	2300      	movs	r3, #0
 800c8c0:	9300      	str	r3, [sp, #0]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f7fe ffd2 	bl	800b86c <SendMeasurementResult>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c8c8:	4f35      	ldr	r7, [pc, #212]	; (800c9a0 <MosfetTask+0x150>)
 800c8ca:	4b33      	ldr	r3, [pc, #204]	; (800c998 <MosfetTask+0x148>)
 800c8cc:	469a      	mov	sl, r3
 800c8ce:	e001      	b.n	800c8d4 <MosfetTask+0x84>
						taskYIELD();
 800c8d0:	f003 ff42 	bl	8010758 <vPortYield>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c8d4:	f004 f8b8 	bl	8010a48 <HAL_GetTick>
 800c8d8:	464b      	mov	r3, r9
 800c8da:	1ac0      	subs	r0, r0, r3
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	3b01      	subs	r3, #1
 800c8e0:	4298      	cmp	r0, r3
 800c8e2:	d248      	bcs.n	800c976 <MosfetTask+0x126>
 800c8e4:	4653      	mov	r3, sl
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d0f1      	beq.n	800c8d0 <MosfetTask+0x80>
 800c8ec:	e043      	b.n	800c976 <MosfetTask+0x126>
					t0 = HAL_GetTick();
 800c8ee:	f004 f8ab 	bl	8010a48 <HAL_GetTick>
 800c8f2:	4681      	mov	r9, r0
					Current = Current_Calculation();
 800c8f4:	f7ff fbb0 	bl	800c058 <Current_Calculation>
 800c8f8:	1c01      	adds	r1, r0, #0
 800c8fa:	4b28      	ldr	r3, [pc, #160]	; (800c99c <MosfetTask+0x14c>)
 800c8fc:	6018      	str	r0, [r3, #0]
					SendMeasurementResult(mosfetMode, Current, 0, PcPort, NULL);
 800c8fe:	4b29      	ldr	r3, [pc, #164]	; (800c9a4 <MosfetTask+0x154>)
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	4a24      	ldr	r2, [pc, #144]	; (800c994 <MosfetTask+0x144>)
 800c904:	7810      	ldrb	r0, [r2, #0]
 800c906:	2200      	movs	r2, #0
 800c908:	9200      	str	r2, [sp, #0]
 800c90a:	f7fe ffaf 	bl	800b86c <SendMeasurementResult>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c90e:	4f24      	ldr	r7, [pc, #144]	; (800c9a0 <MosfetTask+0x150>)
 800c910:	e001      	b.n	800c916 <MosfetTask+0xc6>
						taskYIELD();
 800c912:	f003 ff21 	bl	8010758 <vPortYield>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c916:	f004 f897 	bl	8010a48 <HAL_GetTick>
 800c91a:	464b      	mov	r3, r9
 800c91c:	1ac0      	subs	r0, r0, r3
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	3b01      	subs	r3, #1
 800c922:	4298      	cmp	r0, r3
 800c924:	d227      	bcs.n	800c976 <MosfetTask+0x126>
 800c926:	7823      	ldrb	r3, [r4, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d0f2      	beq.n	800c912 <MosfetTask+0xc2>
 800c92c:	e023      	b.n	800c976 <MosfetTask+0x126>
					t0 = HAL_GetTick();
 800c92e:	f004 f88b 	bl	8010a48 <HAL_GetTick>
 800c932:	4681      	mov	r9, r0
					Current = Current_Calculation();
 800c934:	f7ff fb90 	bl	800c058 <Current_Calculation>
 800c938:	1c01      	adds	r1, r0, #0
 800c93a:	4b18      	ldr	r3, [pc, #96]	; (800c99c <MosfetTask+0x14c>)
 800c93c:	6018      	str	r0, [r3, #0]
					SendMeasurementResult(mosfetMode, Current, mosfetModule,
 800c93e:	4b1a      	ldr	r3, [pc, #104]	; (800c9a8 <MosfetTask+0x158>)
 800c940:	781a      	ldrb	r2, [r3, #0]
 800c942:	4b14      	ldr	r3, [pc, #80]	; (800c994 <MosfetTask+0x144>)
 800c944:	7818      	ldrb	r0, [r3, #0]
 800c946:	4b19      	ldr	r3, [pc, #100]	; (800c9ac <MosfetTask+0x15c>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	9300      	str	r3, [sp, #0]
 800c94c:	2300      	movs	r3, #0
 800c94e:	f7fe ff8d 	bl	800b86c <SendMeasurementResult>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c952:	4f13      	ldr	r7, [pc, #76]	; (800c9a0 <MosfetTask+0x150>)
 800c954:	e001      	b.n	800c95a <MosfetTask+0x10a>
						taskYIELD();
 800c956:	f003 feff 	bl	8010758 <vPortYield>
					while (HAL_GetTick() - t0 < (mosfetPeriod - 1) && !stopB) {
 800c95a:	f004 f875 	bl	8010a48 <HAL_GetTick>
 800c95e:	464b      	mov	r3, r9
 800c960:	1ac0      	subs	r0, r0, r3
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	3b01      	subs	r3, #1
 800c966:	4298      	cmp	r0, r3
 800c968:	d205      	bcs.n	800c976 <MosfetTask+0x126>
 800c96a:	782b      	ldrb	r3, [r5, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d0f2      	beq.n	800c956 <MosfetTask+0x106>
 800c970:	e001      	b.n	800c976 <MosfetTask+0x126>
					Stop_Mosfet();
 800c972:	f7ff fe25 	bl	800c5c0 <Stop_Mosfet>
				taskYIELD();
 800c976:	f003 feef 	bl	8010758 <vPortYield>
		switch (mosfetMode) {
 800c97a:	7833      	ldrb	r3, [r6, #0]
 800c97c:	3b05      	subs	r3, #5
 800c97e:	b2da      	uxtb	r2, r3
 800c980:	2a09      	cmp	r2, #9
 800c982:	d803      	bhi.n	800c98c <MosfetTask+0x13c>
 800c984:	0093      	lsls	r3, r2, #2
 800c986:	4a0a      	ldr	r2, [pc, #40]	; (800c9b0 <MosfetTask+0x160>)
 800c988:	58d3      	ldr	r3, [r2, r3]
 800c98a:	469f      	mov	pc, r3
					mosfetMode = REQ_STOP;
 800c98c:	230e      	movs	r3, #14
 800c98e:	4642      	mov	r2, r8
 800c990:	7013      	strb	r3, [r2, #0]
					break;
 800c992:	e7f0      	b.n	800c976 <MosfetTask+0x126>
 800c994:	20006f34 	.word	0x20006f34
 800c998:	200019b9 	.word	0x200019b9
 800c99c:	200019a4 	.word	0x200019a4
 800c9a0:	20006eb4 	.word	0x20006eb4
 800c9a4:	20000a88 	.word	0x20000a88
 800c9a8:	20006d88 	.word	0x20006d88
 800c9ac:	2000009c 	.word	0x2000009c
 800c9b0:	0801c01c 	.word	0x0801c01c

0800c9b4 <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800c9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9b6:	46ce      	mov	lr, r9
 800c9b8:	4647      	mov	r7, r8
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b083      	sub	sp, #12
 800c9be:	000c      	movs	r4, r1
 800c9c0:	001d      	movs	r5, r3
 800c9c2:	ab0a      	add	r3, sp, #40	; 0x28
 800c9c4:	781b      	ldrb	r3, [r3, #0]
	switch (code) {
 800c9c6:	4a4d      	ldr	r2, [pc, #308]	; (800cafc <Module_MessagingTask+0x148>)
 800c9c8:	4694      	mov	ip, r2
 800c9ca:	4460      	add	r0, ip
 800c9cc:	b282      	uxth	r2, r0
 800c9ce:	2a07      	cmp	r2, #7
 800c9d0:	d900      	bls.n	800c9d4 <Module_MessagingTask+0x20>
 800c9d2:	e090      	b.n	800caf6 <Module_MessagingTask+0x142>
 800c9d4:	0090      	lsls	r0, r2, #2
 800c9d6:	4a4a      	ldr	r2, [pc, #296]	; (800cb00 <Module_MessagingTask+0x14c>)
 800c9d8:	5812      	ldr	r2, [r2, r0]
 800c9da:	4697      	mov	pc, r2
		temp32 = ((uint32_t) cMessage[port - 1][shift] << 24)+ ((uint32_t) cMessage[port - 1][1 + shift] << 16)+ ((uint32_t) cMessage[port - 1][2 + shift] << 8)+ cMessage[port - 1][3 + shift];
 800c9dc:	3c01      	subs	r4, #1
 800c9de:	4a49      	ldr	r2, [pc, #292]	; (800cb04 <Module_MessagingTask+0x150>)
 800c9e0:	00e1      	lsls	r1, r4, #3
 800c9e2:	1b0d      	subs	r5, r1, r4
 800c9e4:	00ed      	lsls	r5, r5, #3
 800c9e6:	1955      	adds	r5, r2, r5
 800c9e8:	18ee      	adds	r6, r5, r3
 800c9ea:	7870      	ldrb	r0, [r6, #1]
 800c9ec:	0400      	lsls	r0, r0, #16
 800c9ee:	5ced      	ldrb	r5, [r5, r3]
 800c9f0:	062d      	lsls	r5, r5, #24
 800c9f2:	1940      	adds	r0, r0, r5
 800c9f4:	78f5      	ldrb	r5, [r6, #3]
 800c9f6:	1940      	adds	r0, r0, r5
 800c9f8:	78b3      	ldrb	r3, [r6, #2]
 800c9fa:	021b      	lsls	r3, r3, #8
 800c9fc:	18c0      	adds	r0, r0, r3
 800c9fe:	4b42      	ldr	r3, [pc, #264]	; (800cb08 <Module_MessagingTask+0x154>)
 800ca00:	6018      	str	r0, [r3, #0]
		Switch_on(temp32);
 800ca02:	f7ff facf 	bl	800bfa4 <Switch_on>
	Module_Status result = H0FRx_OK;
 800ca06:	2000      	movs	r0, #0
}
 800ca08:	b003      	add	sp, #12
 800ca0a:	bc0c      	pop	{r2, r3}
 800ca0c:	4690      	mov	r8, r2
 800ca0e:	4699      	mov	r9, r3
 800ca10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Switch_off();
 800ca12:	f7ff fba3 	bl	800c15c <Switch_off>
	Module_Status result = H0FRx_OK;
 800ca16:	2000      	movs	r0, #0
		break;
 800ca18:	e7f6      	b.n	800ca08 <Module_MessagingTask+0x54>
			Switch_toggle();
 800ca1a:	f7ff fc2f 	bl	800c27c <Switch_toggle>
	Module_Status result = H0FRx_OK;
 800ca1e:	2000      	movs	r0, #0
			break;
 800ca20:	e7f2      	b.n	800ca08 <Module_MessagingTask+0x54>
		tempFloat = (float) (((uint64_t) cMessage[port - 1][shift] << 24)+ ((uint64_t) cMessage[port - 1][1 + shift] << 16)+ ((uint64_t) cMessage[port - 1][2 + shift] << 8)+ ((uint64_t) cMessage[port - 1][3 + shift]));
 800ca22:	3c01      	subs	r4, #1
 800ca24:	4a37      	ldr	r2, [pc, #220]	; (800cb04 <Module_MessagingTask+0x150>)
 800ca26:	4691      	mov	r9, r2
 800ca28:	00e5      	lsls	r5, r4, #3
 800ca2a:	1b29      	subs	r1, r5, r4
 800ca2c:	00c9      	lsls	r1, r1, #3
 800ca2e:	4449      	add	r1, r9
 800ca30:	18c8      	adds	r0, r1, r3
 800ca32:	4684      	mov	ip, r0
 800ca34:	7840      	ldrb	r0, [r0, #1]
 800ca36:	2700      	movs	r7, #0
 800ca38:	0406      	lsls	r6, r0, #16
 800ca3a:	5cc9      	ldrb	r1, [r1, r3]
 800ca3c:	4688      	mov	r8, r1
 800ca3e:	2100      	movs	r1, #0
 800ca40:	4642      	mov	r2, r8
 800ca42:	0610      	lsls	r0, r2, #24
 800ca44:	1836      	adds	r6, r6, r0
 800ca46:	414f      	adcs	r7, r1
 800ca48:	4662      	mov	r2, ip
 800ca4a:	78d0      	ldrb	r0, [r2, #3]
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	1980      	adds	r0, r0, r6
 800ca50:	4179      	adcs	r1, r7
 800ca52:	4663      	mov	r3, ip
 800ca54:	789b      	ldrb	r3, [r3, #2]
 800ca56:	2700      	movs	r7, #0
 800ca58:	021e      	lsls	r6, r3, #8
 800ca5a:	1980      	adds	r0, r0, r6
 800ca5c:	4179      	adcs	r1, r7
 800ca5e:	f7f3 fde5 	bl	800062c <__aeabi_ul2f>
 800ca62:	4b2a      	ldr	r3, [pc, #168]	; (800cb0c <Module_MessagingTask+0x158>)
 800ca64:	6018      	str	r0, [r3, #0]
		Switch_PWM(tempFloat);
 800ca66:	f7ff fbd3 	bl	800c210 <Switch_PWM>
	Module_Status result = H0FRx_OK;
 800ca6a:	2000      	movs	r0, #0
		break;
 800ca6c:	e7cc      	b.n	800ca08 <Module_MessagingTask+0x54>
		Sample_Mosfet();
 800ca6e:	f7ff fc83 	bl	800c378 <Sample_Mosfet>
		SendMeasurementResult(REQ_SAMPLE, Current, dst, port, NULL);
 800ca72:	4b27      	ldr	r3, [pc, #156]	; (800cb10 <Module_MessagingTask+0x15c>)
 800ca74:	6819      	ldr	r1, [r3, #0]
 800ca76:	2300      	movs	r3, #0
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	0023      	movs	r3, r4
 800ca7c:	002a      	movs	r2, r5
 800ca7e:	200f      	movs	r0, #15
 800ca80:	f7fe fef4 	bl	800b86c <SendMeasurementResult>
	Module_Status result = H0FRx_OK;
 800ca84:	2000      	movs	r0, #0
		break;
 800ca86:	e7bf      	b.n	800ca08 <Module_MessagingTask+0x54>
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24)+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ cMessage[port - 1][shift];
 800ca88:	3901      	subs	r1, #1
		timeout = ((uint32_t) cMessage[port - 1][7 + shift] << 24)+ ((uint32_t) cMessage[port - 1][6 + shift] << 16)+ ((uint32_t) cMessage[port - 1][5 + shift] << 8)+ cMessage[port - 1][4 + shift];
 800ca8a:	00ca      	lsls	r2, r1, #3
 800ca8c:	1a52      	subs	r2, r2, r1
 800ca8e:	00d2      	lsls	r2, r2, #3
 800ca90:	491c      	ldr	r1, [pc, #112]	; (800cb04 <Module_MessagingTask+0x150>)
 800ca92:	188a      	adds	r2, r1, r2
 800ca94:	18d1      	adds	r1, r2, r3
		Stream_To_Port(period, timeout, port, dst);
 800ca96:	7909      	ldrb	r1, [r1, #4]
 800ca98:	5cd0      	ldrb	r0, [r2, r3]
 800ca9a:	002b      	movs	r3, r5
 800ca9c:	0022      	movs	r2, r4
 800ca9e:	f7ff fc83 	bl	800c3a8 <Stream_To_Port>
	Module_Status result = H0FRx_OK;
 800caa2:	2000      	movs	r0, #0
		break;
 800caa4:	e7b0      	b.n	800ca08 <Module_MessagingTask+0x54>
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24)	+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ cMessage[port - 1][shift];
 800caa6:	3c01      	subs	r4, #1
		timeout = ((uint32_t) cMessage[port - 1][7 + shift] << 24)+ ((uint32_t) cMessage[port - 1][6 + shift] << 16)+ ((uint32_t) cMessage[port - 1][5 + shift] << 8)+ cMessage[port - 1][4 + shift];
 800caa8:	4816      	ldr	r0, [pc, #88]	; (800cb04 <Module_MessagingTask+0x150>)
 800caaa:	00e5      	lsls	r5, r4, #3
 800caac:	1b2e      	subs	r6, r5, r4
 800caae:	00f6      	lsls	r6, r6, #3
 800cab0:	1986      	adds	r6, r0, r6
 800cab2:	18f7      	adds	r7, r6, r3
 800cab4:	79fa      	ldrb	r2, [r7, #7]
 800cab6:	0612      	lsls	r2, r2, #24
 800cab8:	79b9      	ldrb	r1, [r7, #6]
 800caba:	0409      	lsls	r1, r1, #16
 800cabc:	1852      	adds	r2, r2, r1
 800cabe:	7939      	ldrb	r1, [r7, #4]
 800cac0:	1852      	adds	r2, r2, r1
 800cac2:	7979      	ldrb	r1, [r7, #5]
 800cac4:	0209      	lsls	r1, r1, #8
 800cac6:	1852      	adds	r2, r2, r1
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24)	+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ cMessage[port - 1][shift];
 800cac8:	78f9      	ldrb	r1, [r7, #3]
 800caca:	0609      	lsls	r1, r1, #24
 800cacc:	78bf      	ldrb	r7, [r7, #2]
 800cace:	043f      	lsls	r7, r7, #16
 800cad0:	19c9      	adds	r1, r1, r7
 800cad2:	5cf6      	ldrb	r6, [r6, r3]
 800cad4:	1989      	adds	r1, r1, r6
 800cad6:	1b2d      	subs	r5, r5, r4
 800cad8:	00ed      	lsls	r5, r5, #3
 800cada:	1940      	adds	r0, r0, r5
 800cadc:	18c3      	adds	r3, r0, r3
 800cade:	785b      	ldrb	r3, [r3, #1]
 800cae0:	021b      	lsls	r3, r3, #8
 800cae2:	18c9      	adds	r1, r1, r3
		Stream_To_Buffer(&mosfetBuffer, period, timeout);
 800cae4:	480b      	ldr	r0, [pc, #44]	; (800cb14 <Module_MessagingTask+0x160>)
 800cae6:	f7ff fd2b 	bl	800c540 <Stream_To_Buffer>
	Module_Status result = H0FRx_OK;
 800caea:	2000      	movs	r0, #0
		break;
 800caec:	e78c      	b.n	800ca08 <Module_MessagingTask+0x54>
		Stop_Mosfet();
 800caee:	f7ff fd67 	bl	800c5c0 <Stop_Mosfet>
	Module_Status result = H0FRx_OK;
 800caf2:	2000      	movs	r0, #0
		break;
 800caf4:	e788      	b.n	800ca08 <Module_MessagingTask+0x54>
		result = H0FRx_ERR_UnknownMessage;
 800caf6:	2001      	movs	r0, #1
 800caf8:	e786      	b.n	800ca08 <Module_MessagingTask+0x54>
 800cafa:	46c0      	nop			; (mov r8, r8)
 800cafc:	fffffd12 	.word	0xfffffd12
 800cb00:	0801c044 	.word	0x0801c044
 800cb04:	20000d1c 	.word	0x20000d1c
 800cb08:	20006ebc 	.word	0x20006ebc
 800cb0c:	20006eb0 	.word	0x20006eb0
 800cb10:	200019a4 	.word	0x200019a4
 800cb14:	200019b4 	.word	0x200019b4

0800cb18 <HAL_ADC_MspInit>:
ADC_HandleTypeDef hadc;


/* ADC init function */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800cb18:	b570      	push	{r4, r5, r6, lr}
 800cb1a:	b088      	sub	sp, #32
 800cb1c:	0006      	movs	r6, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 800cb1e:	2400      	movs	r4, #0
 800cb20:	9405      	str	r4, [sp, #20]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb22:	2214      	movs	r2, #20
 800cb24:	2100      	movs	r1, #0
 800cb26:	4668      	mov	r0, sp
 800cb28:	f007 ffca 	bl	8014ac0 <memset>
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800cb2c:	2380      	movs	r3, #128	; 0x80
 800cb2e:	015b      	lsls	r3, r3, #5
 800cb30:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800cb32:	2503      	movs	r5, #3
 800cb34:	9507      	str	r5, [sp, #28]
  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800cb36:	a905      	add	r1, sp, #20
 800cb38:	0030      	movs	r0, r6
 800cb3a:	f004 fa37 	bl	8010fac <HAL_ADC_ConfigChannel>

  /**ADC GPIO Configuration
  PA0     ------> ADC_IN0
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cb42:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb44:	9402      	str	r4, [sp, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb46:	2090      	movs	r0, #144	; 0x90
 800cb48:	4669      	mov	r1, sp
 800cb4a:	05c0      	lsls	r0, r0, #23
 800cb4c:	f005 faea 	bl	8012124 <HAL_GPIO_Init>

}
 800cb50:	b008      	add	sp, #32
 800cb52:	bd70      	pop	{r4, r5, r6, pc}

0800cb54 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800cb54:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800cb56:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800cb5c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800cb5e:	2280      	movs	r2, #128	; 0x80
 800cb60:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cb62:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cb64:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800cb66:	3320      	adds	r3, #32
 800cb68:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800cb6a:	2380      	movs	r3, #128	; 0x80
 800cb6c:	019b      	lsls	r3, r3, #6
 800cb6e:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800cb70:	f004 fcac 	bl	80114cc <HAL_DMA_Init>
}
 800cb74:	bd10      	pop	{r4, pc}

0800cb76 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800cb76:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800cb78:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cb7a:	2310      	movs	r3, #16
 800cb7c:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800cb82:	2280      	movs	r2, #128	; 0x80
 800cb84:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cb86:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cb88:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800cb8a:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800cb8c:	2380      	movs	r3, #128	; 0x80
 800cb8e:	019b      	lsls	r3, r3, #6
 800cb90:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800cb92:	f004 fc9b 	bl	80114cc <HAL_DMA_Init>
}
 800cb96:	bd10      	pop	{r4, pc}

0800cb98 <DMA_Init>:
{
 800cb98:	b510      	push	{r4, lr}
 800cb9a:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800cb9c:	4b1d      	ldr	r3, [pc, #116]	; (800cc14 <DMA_Init+0x7c>)
 800cb9e:	6959      	ldr	r1, [r3, #20]
 800cba0:	2201      	movs	r2, #1
 800cba2:	4311      	orrs	r1, r2
 800cba4:	6159      	str	r1, [r3, #20]
 800cba6:	6959      	ldr	r1, [r3, #20]
 800cba8:	400a      	ands	r2, r1
 800cbaa:	9200      	str	r2, [sp, #0]
 800cbac:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800cbae:	6959      	ldr	r1, [r3, #20]
 800cbb0:	2202      	movs	r2, #2
 800cbb2:	4311      	orrs	r1, r2
 800cbb4:	6159      	str	r1, [r3, #20]
 800cbb6:	695b      	ldr	r3, [r3, #20]
 800cbb8:	401a      	ands	r2, r3
 800cbba:	9201      	str	r2, [sp, #4]
 800cbbc:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800cbbe:	4c16      	ldr	r4, [pc, #88]	; (800cc18 <DMA_Init+0x80>)
 800cbc0:	4916      	ldr	r1, [pc, #88]	; (800cc1c <DMA_Init+0x84>)
 800cbc2:	0020      	movs	r0, r4
 800cbc4:	f7ff ffc6 	bl	800cb54 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800cbc8:	0020      	movs	r0, r4
 800cbca:	3038      	adds	r0, #56	; 0x38
 800cbcc:	4914      	ldr	r1, [pc, #80]	; (800cc20 <DMA_Init+0x88>)
 800cbce:	f7ff ffc1 	bl	800cb54 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800cbd2:	0020      	movs	r0, r4
 800cbd4:	3070      	adds	r0, #112	; 0x70
 800cbd6:	4913      	ldr	r1, [pc, #76]	; (800cc24 <DMA_Init+0x8c>)
 800cbd8:	f7ff ffbc 	bl	800cb54 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800cbdc:	0020      	movs	r0, r4
 800cbde:	30a8      	adds	r0, #168	; 0xa8
 800cbe0:	4911      	ldr	r1, [pc, #68]	; (800cc28 <DMA_Init+0x90>)
 800cbe2:	f7ff ffb7 	bl	800cb54 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800cbe6:	0020      	movs	r0, r4
 800cbe8:	30e0      	adds	r0, #224	; 0xe0
 800cbea:	4910      	ldr	r1, [pc, #64]	; (800cc2c <DMA_Init+0x94>)
 800cbec:	f7ff ffb2 	bl	800cb54 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800cbf0:	4c0f      	ldr	r4, [pc, #60]	; (800cc30 <DMA_Init+0x98>)
 800cbf2:	4910      	ldr	r1, [pc, #64]	; (800cc34 <DMA_Init+0x9c>)
 800cbf4:	0020      	movs	r0, r4
 800cbf6:	f7ff ffbe 	bl	800cb76 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800cbfa:	0020      	movs	r0, r4
 800cbfc:	3038      	adds	r0, #56	; 0x38
 800cbfe:	490e      	ldr	r1, [pc, #56]	; (800cc38 <DMA_Init+0xa0>)
 800cc00:	f7ff ffb9 	bl	800cb76 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800cc04:	0020      	movs	r0, r4
 800cc06:	3070      	adds	r0, #112	; 0x70
 800cc08:	490c      	ldr	r1, [pc, #48]	; (800cc3c <DMA_Init+0xa4>)
 800cc0a:	f7ff ffb4 	bl	800cb76 <DMA_MSG_TX_CH_Init>
}
 800cc0e:	b002      	add	sp, #8
 800cc10:	bd10      	pop	{r4, pc}
 800cc12:	46c0      	nop			; (mov r8, r8)
 800cc14:	40021000 	.word	0x40021000
 800cc18:	200019c4 	.word	0x200019c4
 800cc1c:	40020008 	.word	0x40020008
 800cc20:	40020030 	.word	0x40020030
 800cc24:	40020058 	.word	0x40020058
 800cc28:	4002006c 	.word	0x4002006c
 800cc2c:	4002041c 	.word	0x4002041c
 800cc30:	20001b14 	.word	0x20001b14
 800cc34:	4002001c 	.word	0x4002001c
 800cc38:	40020044 	.word	0x40020044
 800cc3c:	40020080 	.word	0x40020080

0800cc40 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800cc40:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800cc42:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cc44:	2300      	movs	r3, #0
 800cc46:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800cc48:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800cc4a:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cc4c:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cc4e:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800cc50:	3320      	adds	r3, #32
 800cc52:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800cc54:	2380      	movs	r3, #128	; 0x80
 800cc56:	015b      	lsls	r3, r3, #5
 800cc58:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800cc5a:	f004 fc37 	bl	80114cc <HAL_DMA_Init>
}
 800cc5e:	bd10      	pop	{r4, pc}

0800cc60 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800cc60:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800cc62:	6803      	ldr	r3, [r0, #0]
 800cc64:	4a20      	ldr	r2, [pc, #128]	; (800cce8 <SetupDMAInterrupts+0x88>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d020      	beq.n	800ccac <SetupDMAInterrupts+0x4c>
 800cc6a:	d827      	bhi.n	800ccbc <SetupDMAInterrupts+0x5c>
 800cc6c:	4a1f      	ldr	r2, [pc, #124]	; (800ccec <SetupDMAInterrupts+0x8c>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d00e      	beq.n	800cc90 <SetupDMAInterrupts+0x30>
 800cc72:	d815      	bhi.n	800cca0 <SetupDMAInterrupts+0x40>
 800cc74:	4a1e      	ldr	r2, [pc, #120]	; (800ccf0 <SetupDMAInterrupts+0x90>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d107      	bne.n	800cc8a <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	2009      	movs	r0, #9
 800cc7e:	f004 fa87 	bl	8011190 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800cc82:	2009      	movs	r0, #9
 800cc84:	f004 fab8 	bl	80111f8 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800cc88:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800cc8a:	4a1a      	ldr	r2, [pc, #104]	; (800ccf4 <SetupDMAInterrupts+0x94>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d1fb      	bne.n	800cc88 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800cc90:	2200      	movs	r2, #0
 800cc92:	200a      	movs	r0, #10
 800cc94:	f004 fa7c 	bl	8011190 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800cc98:	200a      	movs	r0, #10
 800cc9a:	f004 faad 	bl	80111f8 <HAL_NVIC_EnableIRQ>
			break;
 800cc9e:	e7f3      	b.n	800cc88 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800cca0:	4a15      	ldr	r2, [pc, #84]	; (800ccf8 <SetupDMAInterrupts+0x98>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d002      	beq.n	800ccac <SetupDMAInterrupts+0x4c>
 800cca6:	4a15      	ldr	r2, [pc, #84]	; (800ccfc <SetupDMAInterrupts+0x9c>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d1ed      	bne.n	800cc88 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800ccac:	2200      	movs	r2, #0
 800ccae:	200b      	movs	r0, #11
 800ccb0:	f004 fa6e 	bl	8011190 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ccb4:	200b      	movs	r0, #11
 800ccb6:	f004 fa9f 	bl	80111f8 <HAL_NVIC_EnableIRQ>
}
 800ccba:	e7e5      	b.n	800cc88 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800ccbc:	4a10      	ldr	r2, [pc, #64]	; (800cd00 <SetupDMAInterrupts+0xa0>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d0e6      	beq.n	800cc90 <SetupDMAInterrupts+0x30>
 800ccc2:	d909      	bls.n	800ccd8 <SetupDMAInterrupts+0x78>
 800ccc4:	4a0f      	ldr	r2, [pc, #60]	; (800cd04 <SetupDMAInterrupts+0xa4>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d0f0      	beq.n	800ccac <SetupDMAInterrupts+0x4c>
 800ccca:	4a0f      	ldr	r2, [pc, #60]	; (800cd08 <SetupDMAInterrupts+0xa8>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d0ed      	beq.n	800ccac <SetupDMAInterrupts+0x4c>
 800ccd0:	4a0e      	ldr	r2, [pc, #56]	; (800cd0c <SetupDMAInterrupts+0xac>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d1d8      	bne.n	800cc88 <SetupDMAInterrupts+0x28>
 800ccd6:	e7e9      	b.n	800ccac <SetupDMAInterrupts+0x4c>
 800ccd8:	4a0d      	ldr	r2, [pc, #52]	; (800cd10 <SetupDMAInterrupts+0xb0>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d0e6      	beq.n	800ccac <SetupDMAInterrupts+0x4c>
 800ccde:	4a0d      	ldr	r2, [pc, #52]	; (800cd14 <SetupDMAInterrupts+0xb4>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d0d5      	beq.n	800cc90 <SetupDMAInterrupts+0x30>
 800cce4:	e7d0      	b.n	800cc88 <SetupDMAInterrupts+0x28>
 800cce6:	46c0      	nop			; (mov r8, r8)
 800cce8:	4002006c 	.word	0x4002006c
 800ccec:	40020030 	.word	0x40020030
 800ccf0:	40020008 	.word	0x40020008
 800ccf4:	4002001c 	.word	0x4002001c
 800ccf8:	40020044 	.word	0x40020044
 800ccfc:	40020058 	.word	0x40020058
 800cd00:	4002041c 	.word	0x4002041c
 800cd04:	40020444 	.word	0x40020444
 800cd08:	40020458 	.word	0x40020458
 800cd0c:	40020430 	.word	0x40020430
 800cd10:	40020080 	.word	0x40020080
 800cd14:	40020408 	.word	0x40020408

0800cd18 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800cd18:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800cd1a:	6803      	ldr	r3, [r0, #0]
 800cd1c:	4a1a      	ldr	r2, [pc, #104]	; (800cd88 <UnSetupDMAInterrupts+0x70>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d018      	beq.n	800cd54 <UnSetupDMAInterrupts+0x3c>
 800cd22:	d81b      	bhi.n	800cd5c <UnSetupDMAInterrupts+0x44>
 800cd24:	4a19      	ldr	r2, [pc, #100]	; (800cd8c <UnSetupDMAInterrupts+0x74>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d00a      	beq.n	800cd40 <UnSetupDMAInterrupts+0x28>
 800cd2a:	d80d      	bhi.n	800cd48 <UnSetupDMAInterrupts+0x30>
 800cd2c:	4a18      	ldr	r2, [pc, #96]	; (800cd90 <UnSetupDMAInterrupts+0x78>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d103      	bne.n	800cd3a <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800cd32:	2009      	movs	r0, #9
 800cd34:	f004 fa6a 	bl	801120c <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800cd38:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800cd3a:	4a16      	ldr	r2, [pc, #88]	; (800cd94 <UnSetupDMAInterrupts+0x7c>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d1fb      	bne.n	800cd38 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800cd40:	200a      	movs	r0, #10
 800cd42:	f004 fa63 	bl	801120c <HAL_NVIC_DisableIRQ>
			break;
 800cd46:	e7f7      	b.n	800cd38 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800cd48:	4a13      	ldr	r2, [pc, #76]	; (800cd98 <UnSetupDMAInterrupts+0x80>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d002      	beq.n	800cd54 <UnSetupDMAInterrupts+0x3c>
 800cd4e:	4a13      	ldr	r2, [pc, #76]	; (800cd9c <UnSetupDMAInterrupts+0x84>)
 800cd50:	4293      	cmp	r3, r2
 800cd52:	d1f1      	bne.n	800cd38 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800cd54:	200b      	movs	r0, #11
 800cd56:	f004 fa59 	bl	801120c <HAL_NVIC_DisableIRQ>
}
 800cd5a:	e7ed      	b.n	800cd38 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800cd5c:	4a10      	ldr	r2, [pc, #64]	; (800cda0 <UnSetupDMAInterrupts+0x88>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d0ee      	beq.n	800cd40 <UnSetupDMAInterrupts+0x28>
 800cd62:	d909      	bls.n	800cd78 <UnSetupDMAInterrupts+0x60>
 800cd64:	4a0f      	ldr	r2, [pc, #60]	; (800cda4 <UnSetupDMAInterrupts+0x8c>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d0f4      	beq.n	800cd54 <UnSetupDMAInterrupts+0x3c>
 800cd6a:	4a0f      	ldr	r2, [pc, #60]	; (800cda8 <UnSetupDMAInterrupts+0x90>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d0f1      	beq.n	800cd54 <UnSetupDMAInterrupts+0x3c>
 800cd70:	4a0e      	ldr	r2, [pc, #56]	; (800cdac <UnSetupDMAInterrupts+0x94>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d1e0      	bne.n	800cd38 <UnSetupDMAInterrupts+0x20>
 800cd76:	e7ed      	b.n	800cd54 <UnSetupDMAInterrupts+0x3c>
 800cd78:	4a0d      	ldr	r2, [pc, #52]	; (800cdb0 <UnSetupDMAInterrupts+0x98>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d0ea      	beq.n	800cd54 <UnSetupDMAInterrupts+0x3c>
 800cd7e:	4a0d      	ldr	r2, [pc, #52]	; (800cdb4 <UnSetupDMAInterrupts+0x9c>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d0dd      	beq.n	800cd40 <UnSetupDMAInterrupts+0x28>
 800cd84:	e7d8      	b.n	800cd38 <UnSetupDMAInterrupts+0x20>
 800cd86:	46c0      	nop			; (mov r8, r8)
 800cd88:	4002006c 	.word	0x4002006c
 800cd8c:	40020030 	.word	0x40020030
 800cd90:	40020008 	.word	0x40020008
 800cd94:	4002001c 	.word	0x4002001c
 800cd98:	40020044 	.word	0x40020044
 800cd9c:	40020058 	.word	0x40020058
 800cda0:	4002041c 	.word	0x4002041c
 800cda4:	40020444 	.word	0x40020444
 800cda8:	40020458 	.word	0x40020458
 800cdac:	40020430 	.word	0x40020430
 800cdb0:	40020080 	.word	0x40020080
 800cdb4:	40020408 	.word	0x40020408

0800cdb8 <DMA_MSG_TX_UnSetup>:
{	
 800cdb8:	b510      	push	{r4, lr}
 800cdba:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800cdbc:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800cdbe:	f7ff ffab 	bl	800cd18 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800cdc2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800cdc8:	6623      	str	r3, [r4, #96]	; 0x60
}
 800cdca:	bd10      	pop	{r4, pc}

0800cdcc <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800cdcc:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800cdce:	6803      	ldr	r3, [r0, #0]
 800cdd0:	4abd      	ldr	r2, [pc, #756]	; (800d0c8 <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d02f      	beq.n	800ce36 <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800cdd6:	4abd      	ldr	r2, [pc, #756]	; (800d0cc <RemapAndLinkDMAtoUARTRx+0x300>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d100      	bne.n	800cdde <RemapAndLinkDMAtoUARTRx+0x12>
 800cddc:	e087      	b.n	800ceee <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800cdde:	4abc      	ldr	r2, [pc, #752]	; (800d0d0 <RemapAndLinkDMAtoUARTRx+0x304>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d100      	bne.n	800cde6 <RemapAndLinkDMAtoUARTRx+0x1a>
 800cde4:	e0dc      	b.n	800cfa0 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800cde6:	4abb      	ldr	r2, [pc, #748]	; (800d0d4 <RemapAndLinkDMAtoUARTRx+0x308>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d000      	beq.n	800cdee <RemapAndLinkDMAtoUARTRx+0x22>
 800cdec:	e18a      	b.n	800d104 <RemapAndLinkDMAtoUARTRx+0x338>
 800cdee:	680b      	ldr	r3, [r1, #0]
 800cdf0:	4ab9      	ldr	r2, [pc, #740]	; (800d0d8 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d100      	bne.n	800cdf8 <RemapAndLinkDMAtoUARTRx+0x2c>
 800cdf6:	e12d      	b.n	800d054 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800cdf8:	4ab8      	ldr	r2, [pc, #736]	; (800d0dc <RemapAndLinkDMAtoUARTRx+0x310>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d100      	bne.n	800ce00 <RemapAndLinkDMAtoUARTRx+0x34>
 800cdfe:	e134      	b.n	800d06a <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800ce00:	4ab7      	ldr	r2, [pc, #732]	; (800d0e0 <RemapAndLinkDMAtoUARTRx+0x314>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d100      	bne.n	800ce08 <RemapAndLinkDMAtoUARTRx+0x3c>
 800ce06:	e13c      	b.n	800d082 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800ce08:	4ab6      	ldr	r2, [pc, #728]	; (800d0e4 <RemapAndLinkDMAtoUARTRx+0x318>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d100      	bne.n	800ce10 <RemapAndLinkDMAtoUARTRx+0x44>
 800ce0e:	e144      	b.n	800d09a <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800ce10:	4ab5      	ldr	r2, [pc, #724]	; (800d0e8 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d100      	bne.n	800ce18 <RemapAndLinkDMAtoUARTRx+0x4c>
 800ce16:	e14c      	b.n	800d0b2 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800ce18:	4ab4      	ldr	r2, [pc, #720]	; (800d0ec <RemapAndLinkDMAtoUARTRx+0x320>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d11e      	bne.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800ce1e:	4ab4      	ldr	r2, [pc, #720]	; (800d0f0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ce20:	23a8      	movs	r3, #168	; 0xa8
 800ce22:	58d4      	ldr	r4, [r2, r3]
 800ce24:	4db3      	ldr	r5, [pc, #716]	; (800d0f4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ce26:	402c      	ands	r4, r5
 800ce28:	50d4      	str	r4, [r2, r3]
 800ce2a:	58d5      	ldr	r5, [r2, r3]
 800ce2c:	24b0      	movs	r4, #176	; 0xb0
 800ce2e:	0124      	lsls	r4, r4, #4
 800ce30:	432c      	orrs	r4, r5
 800ce32:	50d4      	str	r4, [r2, r3]
 800ce34:	e012      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800ce36:	680b      	ldr	r3, [r1, #0]
 800ce38:	4aa7      	ldr	r2, [pc, #668]	; (800d0d8 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d011      	beq.n	800ce62 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800ce3e:	4aa7      	ldr	r2, [pc, #668]	; (800d0dc <RemapAndLinkDMAtoUARTRx+0x310>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d019      	beq.n	800ce78 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800ce44:	4aa6      	ldr	r2, [pc, #664]	; (800d0e0 <RemapAndLinkDMAtoUARTRx+0x314>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d022      	beq.n	800ce90 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800ce4a:	4aa6      	ldr	r2, [pc, #664]	; (800d0e4 <RemapAndLinkDMAtoUARTRx+0x318>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d02b      	beq.n	800cea8 <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800ce50:	4aa5      	ldr	r2, [pc, #660]	; (800d0e8 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d034      	beq.n	800cec0 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800ce56:	4aa5      	ldr	r2, [pc, #660]	; (800d0ec <RemapAndLinkDMAtoUARTRx+0x320>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d03c      	beq.n	800ced6 <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800ce5c:	6641      	str	r1, [r0, #100]	; 0x64
 800ce5e:	6248      	str	r0, [r1, #36]	; 0x24
}
 800ce60:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800ce62:	4aa5      	ldr	r2, [pc, #660]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ce64:	23a8      	movs	r3, #168	; 0xa8
 800ce66:	58d4      	ldr	r4, [r2, r3]
 800ce68:	250f      	movs	r5, #15
 800ce6a:	43ac      	bics	r4, r5
 800ce6c:	50d4      	str	r4, [r2, r3]
 800ce6e:	58d4      	ldr	r4, [r2, r3]
 800ce70:	3d07      	subs	r5, #7
 800ce72:	432c      	orrs	r4, r5
 800ce74:	50d4      	str	r4, [r2, r3]
 800ce76:	e7f1      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800ce78:	4a9f      	ldr	r2, [pc, #636]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ce7a:	23a8      	movs	r3, #168	; 0xa8
 800ce7c:	58d4      	ldr	r4, [r2, r3]
 800ce7e:	4d9d      	ldr	r5, [pc, #628]	; (800d0f4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ce80:	402c      	ands	r4, r5
 800ce82:	50d4      	str	r4, [r2, r3]
 800ce84:	58d5      	ldr	r5, [r2, r3]
 800ce86:	2480      	movs	r4, #128	; 0x80
 800ce88:	0124      	lsls	r4, r4, #4
 800ce8a:	432c      	orrs	r4, r5
 800ce8c:	50d4      	str	r4, [r2, r3]
 800ce8e:	e7e5      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800ce90:	4a99      	ldr	r2, [pc, #612]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ce92:	23a8      	movs	r3, #168	; 0xa8
 800ce94:	58d4      	ldr	r4, [r2, r3]
 800ce96:	4d99      	ldr	r5, [pc, #612]	; (800d0fc <RemapAndLinkDMAtoUARTRx+0x330>)
 800ce98:	402c      	ands	r4, r5
 800ce9a:	50d4      	str	r4, [r2, r3]
 800ce9c:	58d5      	ldr	r5, [r2, r3]
 800ce9e:	2480      	movs	r4, #128	; 0x80
 800cea0:	0324      	lsls	r4, r4, #12
 800cea2:	432c      	orrs	r4, r5
 800cea4:	50d4      	str	r4, [r2, r3]
 800cea6:	e7d9      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800cea8:	4a93      	ldr	r2, [pc, #588]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ceaa:	23a8      	movs	r3, #168	; 0xa8
 800ceac:	58d4      	ldr	r4, [r2, r3]
 800ceae:	4d94      	ldr	r5, [pc, #592]	; (800d100 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ceb0:	402c      	ands	r4, r5
 800ceb2:	50d4      	str	r4, [r2, r3]
 800ceb4:	58d5      	ldr	r5, [r2, r3]
 800ceb6:	2480      	movs	r4, #128	; 0x80
 800ceb8:	0424      	lsls	r4, r4, #16
 800ceba:	432c      	orrs	r4, r5
 800cebc:	50d4      	str	r4, [r2, r3]
 800cebe:	e7cd      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800cec0:	4a8b      	ldr	r2, [pc, #556]	; (800d0f0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cec2:	23a8      	movs	r3, #168	; 0xa8
 800cec4:	58d4      	ldr	r4, [r2, r3]
 800cec6:	25f0      	movs	r5, #240	; 0xf0
 800cec8:	43ac      	bics	r4, r5
 800ceca:	50d4      	str	r4, [r2, r3]
 800cecc:	58d4      	ldr	r4, [r2, r3]
 800cece:	3d70      	subs	r5, #112	; 0x70
 800ced0:	432c      	orrs	r4, r5
 800ced2:	50d4      	str	r4, [r2, r3]
 800ced4:	e7c2      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800ced6:	4a86      	ldr	r2, [pc, #536]	; (800d0f0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ced8:	23a8      	movs	r3, #168	; 0xa8
 800ceda:	58d4      	ldr	r4, [r2, r3]
 800cedc:	4d85      	ldr	r5, [pc, #532]	; (800d0f4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cede:	402c      	ands	r4, r5
 800cee0:	50d4      	str	r4, [r2, r3]
 800cee2:	58d5      	ldr	r5, [r2, r3]
 800cee4:	2480      	movs	r4, #128	; 0x80
 800cee6:	0124      	lsls	r4, r4, #4
 800cee8:	432c      	orrs	r4, r5
 800ceea:	50d4      	str	r4, [r2, r3]
 800ceec:	e7b6      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ceee:	680b      	ldr	r3, [r1, #0]
 800cef0:	4a79      	ldr	r2, [pc, #484]	; (800d0d8 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d01a      	beq.n	800cf2c <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800cef6:	4a79      	ldr	r2, [pc, #484]	; (800d0dc <RemapAndLinkDMAtoUARTRx+0x310>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d022      	beq.n	800cf42 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800cefc:	4a78      	ldr	r2, [pc, #480]	; (800d0e0 <RemapAndLinkDMAtoUARTRx+0x314>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d02b      	beq.n	800cf5a <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800cf02:	4a78      	ldr	r2, [pc, #480]	; (800d0e4 <RemapAndLinkDMAtoUARTRx+0x318>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d034      	beq.n	800cf72 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800cf08:	4a77      	ldr	r2, [pc, #476]	; (800d0e8 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d03d      	beq.n	800cf8a <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800cf0e:	4a77      	ldr	r2, [pc, #476]	; (800d0ec <RemapAndLinkDMAtoUARTRx+0x320>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d1a3      	bne.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800cf14:	4a76      	ldr	r2, [pc, #472]	; (800d0f0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cf16:	23a8      	movs	r3, #168	; 0xa8
 800cf18:	58d4      	ldr	r4, [r2, r3]
 800cf1a:	4d76      	ldr	r5, [pc, #472]	; (800d0f4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cf1c:	402c      	ands	r4, r5
 800cf1e:	50d4      	str	r4, [r2, r3]
 800cf20:	58d5      	ldr	r5, [r2, r3]
 800cf22:	2490      	movs	r4, #144	; 0x90
 800cf24:	0124      	lsls	r4, r4, #4
 800cf26:	432c      	orrs	r4, r5
 800cf28:	50d4      	str	r4, [r2, r3]
 800cf2a:	e797      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800cf2c:	4a72      	ldr	r2, [pc, #456]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf2e:	23a8      	movs	r3, #168	; 0xa8
 800cf30:	58d4      	ldr	r4, [r2, r3]
 800cf32:	250f      	movs	r5, #15
 800cf34:	43ac      	bics	r4, r5
 800cf36:	50d4      	str	r4, [r2, r3]
 800cf38:	58d4      	ldr	r4, [r2, r3]
 800cf3a:	3d06      	subs	r5, #6
 800cf3c:	432c      	orrs	r4, r5
 800cf3e:	50d4      	str	r4, [r2, r3]
 800cf40:	e78c      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800cf42:	4a6d      	ldr	r2, [pc, #436]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf44:	23a8      	movs	r3, #168	; 0xa8
 800cf46:	58d4      	ldr	r4, [r2, r3]
 800cf48:	4d6a      	ldr	r5, [pc, #424]	; (800d0f4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cf4a:	402c      	ands	r4, r5
 800cf4c:	50d4      	str	r4, [r2, r3]
 800cf4e:	58d5      	ldr	r5, [r2, r3]
 800cf50:	2490      	movs	r4, #144	; 0x90
 800cf52:	0124      	lsls	r4, r4, #4
 800cf54:	432c      	orrs	r4, r5
 800cf56:	50d4      	str	r4, [r2, r3]
 800cf58:	e780      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800cf5a:	4a67      	ldr	r2, [pc, #412]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf5c:	23a8      	movs	r3, #168	; 0xa8
 800cf5e:	58d4      	ldr	r4, [r2, r3]
 800cf60:	4d66      	ldr	r5, [pc, #408]	; (800d0fc <RemapAndLinkDMAtoUARTRx+0x330>)
 800cf62:	402c      	ands	r4, r5
 800cf64:	50d4      	str	r4, [r2, r3]
 800cf66:	58d5      	ldr	r5, [r2, r3]
 800cf68:	2490      	movs	r4, #144	; 0x90
 800cf6a:	0324      	lsls	r4, r4, #12
 800cf6c:	432c      	orrs	r4, r5
 800cf6e:	50d4      	str	r4, [r2, r3]
 800cf70:	e774      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800cf72:	4a61      	ldr	r2, [pc, #388]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf74:	23a8      	movs	r3, #168	; 0xa8
 800cf76:	58d4      	ldr	r4, [r2, r3]
 800cf78:	4d61      	ldr	r5, [pc, #388]	; (800d100 <RemapAndLinkDMAtoUARTRx+0x334>)
 800cf7a:	402c      	ands	r4, r5
 800cf7c:	50d4      	str	r4, [r2, r3]
 800cf7e:	58d5      	ldr	r5, [r2, r3]
 800cf80:	2490      	movs	r4, #144	; 0x90
 800cf82:	0424      	lsls	r4, r4, #16
 800cf84:	432c      	orrs	r4, r5
 800cf86:	50d4      	str	r4, [r2, r3]
 800cf88:	e768      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800cf8a:	4a59      	ldr	r2, [pc, #356]	; (800d0f0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cf8c:	23a8      	movs	r3, #168	; 0xa8
 800cf8e:	58d4      	ldr	r4, [r2, r3]
 800cf90:	25f0      	movs	r5, #240	; 0xf0
 800cf92:	43ac      	bics	r4, r5
 800cf94:	50d4      	str	r4, [r2, r3]
 800cf96:	58d4      	ldr	r4, [r2, r3]
 800cf98:	3d60      	subs	r5, #96	; 0x60
 800cf9a:	432c      	orrs	r4, r5
 800cf9c:	50d4      	str	r4, [r2, r3]
 800cf9e:	e75d      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800cfa0:	680b      	ldr	r3, [r1, #0]
 800cfa2:	4a4d      	ldr	r2, [pc, #308]	; (800d0d8 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d01b      	beq.n	800cfe0 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800cfa8:	4a4c      	ldr	r2, [pc, #304]	; (800d0dc <RemapAndLinkDMAtoUARTRx+0x310>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d023      	beq.n	800cff6 <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800cfae:	4a4c      	ldr	r2, [pc, #304]	; (800d0e0 <RemapAndLinkDMAtoUARTRx+0x314>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d02c      	beq.n	800d00e <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800cfb4:	4a4b      	ldr	r2, [pc, #300]	; (800d0e4 <RemapAndLinkDMAtoUARTRx+0x318>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d035      	beq.n	800d026 <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800cfba:	4a4b      	ldr	r2, [pc, #300]	; (800d0e8 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d03e      	beq.n	800d03e <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800cfc0:	4a4a      	ldr	r2, [pc, #296]	; (800d0ec <RemapAndLinkDMAtoUARTRx+0x320>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d000      	beq.n	800cfc8 <RemapAndLinkDMAtoUARTRx+0x1fc>
 800cfc6:	e749      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800cfc8:	4a49      	ldr	r2, [pc, #292]	; (800d0f0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cfca:	23a8      	movs	r3, #168	; 0xa8
 800cfcc:	58d4      	ldr	r4, [r2, r3]
 800cfce:	4d49      	ldr	r5, [pc, #292]	; (800d0f4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cfd0:	402c      	ands	r4, r5
 800cfd2:	50d4      	str	r4, [r2, r3]
 800cfd4:	58d5      	ldr	r5, [r2, r3]
 800cfd6:	24a0      	movs	r4, #160	; 0xa0
 800cfd8:	0124      	lsls	r4, r4, #4
 800cfda:	432c      	orrs	r4, r5
 800cfdc:	50d4      	str	r4, [r2, r3]
 800cfde:	e73d      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800cfe0:	4a45      	ldr	r2, [pc, #276]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cfe2:	23a8      	movs	r3, #168	; 0xa8
 800cfe4:	58d4      	ldr	r4, [r2, r3]
 800cfe6:	250f      	movs	r5, #15
 800cfe8:	43ac      	bics	r4, r5
 800cfea:	50d4      	str	r4, [r2, r3]
 800cfec:	58d4      	ldr	r4, [r2, r3]
 800cfee:	3d05      	subs	r5, #5
 800cff0:	432c      	orrs	r4, r5
 800cff2:	50d4      	str	r4, [r2, r3]
 800cff4:	e732      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800cff6:	4a40      	ldr	r2, [pc, #256]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cff8:	23a8      	movs	r3, #168	; 0xa8
 800cffa:	58d4      	ldr	r4, [r2, r3]
 800cffc:	4d3d      	ldr	r5, [pc, #244]	; (800d0f4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cffe:	402c      	ands	r4, r5
 800d000:	50d4      	str	r4, [r2, r3]
 800d002:	58d5      	ldr	r5, [r2, r3]
 800d004:	24a0      	movs	r4, #160	; 0xa0
 800d006:	0124      	lsls	r4, r4, #4
 800d008:	432c      	orrs	r4, r5
 800d00a:	50d4      	str	r4, [r2, r3]
 800d00c:	e726      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800d00e:	4a3a      	ldr	r2, [pc, #232]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800d010:	23a8      	movs	r3, #168	; 0xa8
 800d012:	58d4      	ldr	r4, [r2, r3]
 800d014:	4d39      	ldr	r5, [pc, #228]	; (800d0fc <RemapAndLinkDMAtoUARTRx+0x330>)
 800d016:	402c      	ands	r4, r5
 800d018:	50d4      	str	r4, [r2, r3]
 800d01a:	58d5      	ldr	r5, [r2, r3]
 800d01c:	24a0      	movs	r4, #160	; 0xa0
 800d01e:	0324      	lsls	r4, r4, #12
 800d020:	432c      	orrs	r4, r5
 800d022:	50d4      	str	r4, [r2, r3]
 800d024:	e71a      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800d026:	4a34      	ldr	r2, [pc, #208]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800d028:	23a8      	movs	r3, #168	; 0xa8
 800d02a:	58d4      	ldr	r4, [r2, r3]
 800d02c:	4d34      	ldr	r5, [pc, #208]	; (800d100 <RemapAndLinkDMAtoUARTRx+0x334>)
 800d02e:	402c      	ands	r4, r5
 800d030:	50d4      	str	r4, [r2, r3]
 800d032:	58d5      	ldr	r5, [r2, r3]
 800d034:	24a0      	movs	r4, #160	; 0xa0
 800d036:	0424      	lsls	r4, r4, #16
 800d038:	432c      	orrs	r4, r5
 800d03a:	50d4      	str	r4, [r2, r3]
 800d03c:	e70e      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800d03e:	4a2c      	ldr	r2, [pc, #176]	; (800d0f0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800d040:	23a8      	movs	r3, #168	; 0xa8
 800d042:	58d4      	ldr	r4, [r2, r3]
 800d044:	25f0      	movs	r5, #240	; 0xf0
 800d046:	43ac      	bics	r4, r5
 800d048:	50d4      	str	r4, [r2, r3]
 800d04a:	58d4      	ldr	r4, [r2, r3]
 800d04c:	3d50      	subs	r5, #80	; 0x50
 800d04e:	432c      	orrs	r4, r5
 800d050:	50d4      	str	r4, [r2, r3]
 800d052:	e703      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800d054:	4a28      	ldr	r2, [pc, #160]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800d056:	23a8      	movs	r3, #168	; 0xa8
 800d058:	58d4      	ldr	r4, [r2, r3]
 800d05a:	250f      	movs	r5, #15
 800d05c:	43ac      	bics	r4, r5
 800d05e:	50d4      	str	r4, [r2, r3]
 800d060:	58d4      	ldr	r4, [r2, r3]
 800d062:	3d04      	subs	r5, #4
 800d064:	432c      	orrs	r4, r5
 800d066:	50d4      	str	r4, [r2, r3]
 800d068:	e6f8      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800d06a:	4a23      	ldr	r2, [pc, #140]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800d06c:	23a8      	movs	r3, #168	; 0xa8
 800d06e:	58d4      	ldr	r4, [r2, r3]
 800d070:	4d20      	ldr	r5, [pc, #128]	; (800d0f4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800d072:	402c      	ands	r4, r5
 800d074:	50d4      	str	r4, [r2, r3]
 800d076:	58d5      	ldr	r5, [r2, r3]
 800d078:	24b0      	movs	r4, #176	; 0xb0
 800d07a:	0124      	lsls	r4, r4, #4
 800d07c:	432c      	orrs	r4, r5
 800d07e:	50d4      	str	r4, [r2, r3]
 800d080:	e6ec      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800d082:	4a1d      	ldr	r2, [pc, #116]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800d084:	23a8      	movs	r3, #168	; 0xa8
 800d086:	58d4      	ldr	r4, [r2, r3]
 800d088:	4d1c      	ldr	r5, [pc, #112]	; (800d0fc <RemapAndLinkDMAtoUARTRx+0x330>)
 800d08a:	402c      	ands	r4, r5
 800d08c:	50d4      	str	r4, [r2, r3]
 800d08e:	58d5      	ldr	r5, [r2, r3]
 800d090:	24b0      	movs	r4, #176	; 0xb0
 800d092:	0324      	lsls	r4, r4, #12
 800d094:	432c      	orrs	r4, r5
 800d096:	50d4      	str	r4, [r2, r3]
 800d098:	e6e0      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800d09a:	4a17      	ldr	r2, [pc, #92]	; (800d0f8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800d09c:	23a8      	movs	r3, #168	; 0xa8
 800d09e:	58d4      	ldr	r4, [r2, r3]
 800d0a0:	4d17      	ldr	r5, [pc, #92]	; (800d100 <RemapAndLinkDMAtoUARTRx+0x334>)
 800d0a2:	402c      	ands	r4, r5
 800d0a4:	50d4      	str	r4, [r2, r3]
 800d0a6:	58d5      	ldr	r5, [r2, r3]
 800d0a8:	24b0      	movs	r4, #176	; 0xb0
 800d0aa:	0424      	lsls	r4, r4, #16
 800d0ac:	432c      	orrs	r4, r5
 800d0ae:	50d4      	str	r4, [r2, r3]
 800d0b0:	e6d4      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800d0b2:	4a0f      	ldr	r2, [pc, #60]	; (800d0f0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800d0b4:	23a8      	movs	r3, #168	; 0xa8
 800d0b6:	58d4      	ldr	r4, [r2, r3]
 800d0b8:	25f0      	movs	r5, #240	; 0xf0
 800d0ba:	43ac      	bics	r4, r5
 800d0bc:	50d4      	str	r4, [r2, r3]
 800d0be:	58d4      	ldr	r4, [r2, r3]
 800d0c0:	3d40      	subs	r5, #64	; 0x40
 800d0c2:	432c      	orrs	r4, r5
 800d0c4:	50d4      	str	r4, [r2, r3]
 800d0c6:	e6c9      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
 800d0c8:	40013800 	.word	0x40013800
 800d0cc:	40004400 	.word	0x40004400
 800d0d0:	40004800 	.word	0x40004800
 800d0d4:	40004c00 	.word	0x40004c00
 800d0d8:	40020008 	.word	0x40020008
 800d0dc:	40020030 	.word	0x40020030
 800d0e0:	40020058 	.word	0x40020058
 800d0e4:	4002006c 	.word	0x4002006c
 800d0e8:	4002041c 	.word	0x4002041c
 800d0ec:	40020430 	.word	0x40020430
 800d0f0:	40020400 	.word	0x40020400
 800d0f4:	fffff0ff 	.word	0xfffff0ff
 800d0f8:	40020000 	.word	0x40020000
 800d0fc:	fff0ffff 	.word	0xfff0ffff
 800d100:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800d104:	4ab9      	ldr	r2, [pc, #740]	; (800d3ec <RemapAndLinkDMAtoUARTRx+0x620>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d159      	bne.n	800d1be <RemapAndLinkDMAtoUARTRx+0x3f2>
 800d10a:	680b      	ldr	r3, [r1, #0]
 800d10c:	4ab8      	ldr	r2, [pc, #736]	; (800d3f0 <RemapAndLinkDMAtoUARTRx+0x624>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d01b      	beq.n	800d14a <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800d112:	4ab8      	ldr	r2, [pc, #736]	; (800d3f4 <RemapAndLinkDMAtoUARTRx+0x628>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d023      	beq.n	800d160 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800d118:	4ab7      	ldr	r2, [pc, #732]	; (800d3f8 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d02c      	beq.n	800d178 <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800d11e:	4ab7      	ldr	r2, [pc, #732]	; (800d3fc <RemapAndLinkDMAtoUARTRx+0x630>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d035      	beq.n	800d190 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800d124:	4ab6      	ldr	r2, [pc, #728]	; (800d400 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d03e      	beq.n	800d1a8 <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800d12a:	4ab6      	ldr	r2, [pc, #728]	; (800d404 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d000      	beq.n	800d132 <RemapAndLinkDMAtoUARTRx+0x366>
 800d130:	e694      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800d132:	4ab5      	ldr	r2, [pc, #724]	; (800d408 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d134:	23a8      	movs	r3, #168	; 0xa8
 800d136:	58d4      	ldr	r4, [r2, r3]
 800d138:	4db4      	ldr	r5, [pc, #720]	; (800d40c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d13a:	402c      	ands	r4, r5
 800d13c:	50d4      	str	r4, [r2, r3]
 800d13e:	58d5      	ldr	r5, [r2, r3]
 800d140:	24c0      	movs	r4, #192	; 0xc0
 800d142:	0124      	lsls	r4, r4, #4
 800d144:	432c      	orrs	r4, r5
 800d146:	50d4      	str	r4, [r2, r3]
 800d148:	e688      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800d14a:	4ab1      	ldr	r2, [pc, #708]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d14c:	23a8      	movs	r3, #168	; 0xa8
 800d14e:	58d4      	ldr	r4, [r2, r3]
 800d150:	250f      	movs	r5, #15
 800d152:	43ac      	bics	r4, r5
 800d154:	50d4      	str	r4, [r2, r3]
 800d156:	58d4      	ldr	r4, [r2, r3]
 800d158:	3d03      	subs	r5, #3
 800d15a:	432c      	orrs	r4, r5
 800d15c:	50d4      	str	r4, [r2, r3]
 800d15e:	e67d      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800d160:	4aab      	ldr	r2, [pc, #684]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d162:	23a8      	movs	r3, #168	; 0xa8
 800d164:	58d4      	ldr	r4, [r2, r3]
 800d166:	4da9      	ldr	r5, [pc, #676]	; (800d40c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d168:	402c      	ands	r4, r5
 800d16a:	50d4      	str	r4, [r2, r3]
 800d16c:	58d5      	ldr	r5, [r2, r3]
 800d16e:	24c0      	movs	r4, #192	; 0xc0
 800d170:	0124      	lsls	r4, r4, #4
 800d172:	432c      	orrs	r4, r5
 800d174:	50d4      	str	r4, [r2, r3]
 800d176:	e671      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800d178:	4aa5      	ldr	r2, [pc, #660]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d17a:	23a8      	movs	r3, #168	; 0xa8
 800d17c:	58d4      	ldr	r4, [r2, r3]
 800d17e:	4da5      	ldr	r5, [pc, #660]	; (800d414 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d180:	402c      	ands	r4, r5
 800d182:	50d4      	str	r4, [r2, r3]
 800d184:	58d5      	ldr	r5, [r2, r3]
 800d186:	24c0      	movs	r4, #192	; 0xc0
 800d188:	0324      	lsls	r4, r4, #12
 800d18a:	432c      	orrs	r4, r5
 800d18c:	50d4      	str	r4, [r2, r3]
 800d18e:	e665      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800d190:	4a9f      	ldr	r2, [pc, #636]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d192:	23a8      	movs	r3, #168	; 0xa8
 800d194:	58d4      	ldr	r4, [r2, r3]
 800d196:	4da0      	ldr	r5, [pc, #640]	; (800d418 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d198:	402c      	ands	r4, r5
 800d19a:	50d4      	str	r4, [r2, r3]
 800d19c:	58d5      	ldr	r5, [r2, r3]
 800d19e:	24c0      	movs	r4, #192	; 0xc0
 800d1a0:	0424      	lsls	r4, r4, #16
 800d1a2:	432c      	orrs	r4, r5
 800d1a4:	50d4      	str	r4, [r2, r3]
 800d1a6:	e659      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800d1a8:	4a97      	ldr	r2, [pc, #604]	; (800d408 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d1aa:	23a8      	movs	r3, #168	; 0xa8
 800d1ac:	58d4      	ldr	r4, [r2, r3]
 800d1ae:	25f0      	movs	r5, #240	; 0xf0
 800d1b0:	43ac      	bics	r4, r5
 800d1b2:	50d4      	str	r4, [r2, r3]
 800d1b4:	58d4      	ldr	r4, [r2, r3]
 800d1b6:	3d30      	subs	r5, #48	; 0x30
 800d1b8:	432c      	orrs	r4, r5
 800d1ba:	50d4      	str	r4, [r2, r3]
 800d1bc:	e64e      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800d1be:	4a97      	ldr	r2, [pc, #604]	; (800d41c <RemapAndLinkDMAtoUARTRx+0x650>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d159      	bne.n	800d278 <RemapAndLinkDMAtoUARTRx+0x4ac>
 800d1c4:	680b      	ldr	r3, [r1, #0]
 800d1c6:	4a8a      	ldr	r2, [pc, #552]	; (800d3f0 <RemapAndLinkDMAtoUARTRx+0x624>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d01b      	beq.n	800d204 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800d1cc:	4a89      	ldr	r2, [pc, #548]	; (800d3f4 <RemapAndLinkDMAtoUARTRx+0x628>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d023      	beq.n	800d21a <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800d1d2:	4a89      	ldr	r2, [pc, #548]	; (800d3f8 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d02c      	beq.n	800d232 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800d1d8:	4a88      	ldr	r2, [pc, #544]	; (800d3fc <RemapAndLinkDMAtoUARTRx+0x630>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d035      	beq.n	800d24a <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800d1de:	4a88      	ldr	r2, [pc, #544]	; (800d400 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d03e      	beq.n	800d262 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800d1e4:	4a87      	ldr	r2, [pc, #540]	; (800d404 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d000      	beq.n	800d1ec <RemapAndLinkDMAtoUARTRx+0x420>
 800d1ea:	e637      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800d1ec:	4a86      	ldr	r2, [pc, #536]	; (800d408 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d1ee:	23a8      	movs	r3, #168	; 0xa8
 800d1f0:	58d4      	ldr	r4, [r2, r3]
 800d1f2:	4d86      	ldr	r5, [pc, #536]	; (800d40c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d1f4:	402c      	ands	r4, r5
 800d1f6:	50d4      	str	r4, [r2, r3]
 800d1f8:	58d5      	ldr	r5, [r2, r3]
 800d1fa:	24d0      	movs	r4, #208	; 0xd0
 800d1fc:	0124      	lsls	r4, r4, #4
 800d1fe:	432c      	orrs	r4, r5
 800d200:	50d4      	str	r4, [r2, r3]
 800d202:	e62b      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800d204:	4a82      	ldr	r2, [pc, #520]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d206:	23a8      	movs	r3, #168	; 0xa8
 800d208:	58d4      	ldr	r4, [r2, r3]
 800d20a:	250f      	movs	r5, #15
 800d20c:	43ac      	bics	r4, r5
 800d20e:	50d4      	str	r4, [r2, r3]
 800d210:	58d4      	ldr	r4, [r2, r3]
 800d212:	3d02      	subs	r5, #2
 800d214:	432c      	orrs	r4, r5
 800d216:	50d4      	str	r4, [r2, r3]
 800d218:	e620      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800d21a:	4a7d      	ldr	r2, [pc, #500]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d21c:	23a8      	movs	r3, #168	; 0xa8
 800d21e:	58d4      	ldr	r4, [r2, r3]
 800d220:	4d7a      	ldr	r5, [pc, #488]	; (800d40c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d222:	402c      	ands	r4, r5
 800d224:	50d4      	str	r4, [r2, r3]
 800d226:	58d5      	ldr	r5, [r2, r3]
 800d228:	24d0      	movs	r4, #208	; 0xd0
 800d22a:	0124      	lsls	r4, r4, #4
 800d22c:	432c      	orrs	r4, r5
 800d22e:	50d4      	str	r4, [r2, r3]
 800d230:	e614      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800d232:	4a77      	ldr	r2, [pc, #476]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d234:	23a8      	movs	r3, #168	; 0xa8
 800d236:	58d4      	ldr	r4, [r2, r3]
 800d238:	4d76      	ldr	r5, [pc, #472]	; (800d414 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d23a:	402c      	ands	r4, r5
 800d23c:	50d4      	str	r4, [r2, r3]
 800d23e:	58d5      	ldr	r5, [r2, r3]
 800d240:	24d0      	movs	r4, #208	; 0xd0
 800d242:	0324      	lsls	r4, r4, #12
 800d244:	432c      	orrs	r4, r5
 800d246:	50d4      	str	r4, [r2, r3]
 800d248:	e608      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800d24a:	4a71      	ldr	r2, [pc, #452]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d24c:	23a8      	movs	r3, #168	; 0xa8
 800d24e:	58d4      	ldr	r4, [r2, r3]
 800d250:	4d71      	ldr	r5, [pc, #452]	; (800d418 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d252:	402c      	ands	r4, r5
 800d254:	50d4      	str	r4, [r2, r3]
 800d256:	58d5      	ldr	r5, [r2, r3]
 800d258:	24d0      	movs	r4, #208	; 0xd0
 800d25a:	0424      	lsls	r4, r4, #16
 800d25c:	432c      	orrs	r4, r5
 800d25e:	50d4      	str	r4, [r2, r3]
 800d260:	e5fc      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800d262:	4a69      	ldr	r2, [pc, #420]	; (800d408 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d264:	23a8      	movs	r3, #168	; 0xa8
 800d266:	58d4      	ldr	r4, [r2, r3]
 800d268:	25f0      	movs	r5, #240	; 0xf0
 800d26a:	43ac      	bics	r4, r5
 800d26c:	50d4      	str	r4, [r2, r3]
 800d26e:	58d4      	ldr	r4, [r2, r3]
 800d270:	3d20      	subs	r5, #32
 800d272:	432c      	orrs	r4, r5
 800d274:	50d4      	str	r4, [r2, r3]
 800d276:	e5f1      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800d278:	4a69      	ldr	r2, [pc, #420]	; (800d420 <RemapAndLinkDMAtoUARTRx+0x654>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d159      	bne.n	800d332 <RemapAndLinkDMAtoUARTRx+0x566>
 800d27e:	680b      	ldr	r3, [r1, #0]
 800d280:	4a5b      	ldr	r2, [pc, #364]	; (800d3f0 <RemapAndLinkDMAtoUARTRx+0x624>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d01b      	beq.n	800d2be <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800d286:	4a5b      	ldr	r2, [pc, #364]	; (800d3f4 <RemapAndLinkDMAtoUARTRx+0x628>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d023      	beq.n	800d2d4 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800d28c:	4a5a      	ldr	r2, [pc, #360]	; (800d3f8 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d02c      	beq.n	800d2ec <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800d292:	4a5a      	ldr	r2, [pc, #360]	; (800d3fc <RemapAndLinkDMAtoUARTRx+0x630>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d035      	beq.n	800d304 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800d298:	4a59      	ldr	r2, [pc, #356]	; (800d400 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d03e      	beq.n	800d31c <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800d29e:	4a59      	ldr	r2, [pc, #356]	; (800d404 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d000      	beq.n	800d2a6 <RemapAndLinkDMAtoUARTRx+0x4da>
 800d2a4:	e5da      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800d2a6:	4a58      	ldr	r2, [pc, #352]	; (800d408 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d2a8:	23a8      	movs	r3, #168	; 0xa8
 800d2aa:	58d4      	ldr	r4, [r2, r3]
 800d2ac:	4d57      	ldr	r5, [pc, #348]	; (800d40c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d2ae:	402c      	ands	r4, r5
 800d2b0:	50d4      	str	r4, [r2, r3]
 800d2b2:	58d5      	ldr	r5, [r2, r3]
 800d2b4:	24e0      	movs	r4, #224	; 0xe0
 800d2b6:	0124      	lsls	r4, r4, #4
 800d2b8:	432c      	orrs	r4, r5
 800d2ba:	50d4      	str	r4, [r2, r3]
 800d2bc:	e5ce      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800d2be:	4a54      	ldr	r2, [pc, #336]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d2c0:	23a8      	movs	r3, #168	; 0xa8
 800d2c2:	58d4      	ldr	r4, [r2, r3]
 800d2c4:	250f      	movs	r5, #15
 800d2c6:	43ac      	bics	r4, r5
 800d2c8:	50d4      	str	r4, [r2, r3]
 800d2ca:	58d4      	ldr	r4, [r2, r3]
 800d2cc:	3d01      	subs	r5, #1
 800d2ce:	432c      	orrs	r4, r5
 800d2d0:	50d4      	str	r4, [r2, r3]
 800d2d2:	e5c3      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800d2d4:	4a4e      	ldr	r2, [pc, #312]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d2d6:	23a8      	movs	r3, #168	; 0xa8
 800d2d8:	58d4      	ldr	r4, [r2, r3]
 800d2da:	4d4c      	ldr	r5, [pc, #304]	; (800d40c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d2dc:	402c      	ands	r4, r5
 800d2de:	50d4      	str	r4, [r2, r3]
 800d2e0:	58d5      	ldr	r5, [r2, r3]
 800d2e2:	24e0      	movs	r4, #224	; 0xe0
 800d2e4:	0124      	lsls	r4, r4, #4
 800d2e6:	432c      	orrs	r4, r5
 800d2e8:	50d4      	str	r4, [r2, r3]
 800d2ea:	e5b7      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800d2ec:	4a48      	ldr	r2, [pc, #288]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d2ee:	23a8      	movs	r3, #168	; 0xa8
 800d2f0:	58d4      	ldr	r4, [r2, r3]
 800d2f2:	4d48      	ldr	r5, [pc, #288]	; (800d414 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d2f4:	402c      	ands	r4, r5
 800d2f6:	50d4      	str	r4, [r2, r3]
 800d2f8:	58d5      	ldr	r5, [r2, r3]
 800d2fa:	24e0      	movs	r4, #224	; 0xe0
 800d2fc:	0324      	lsls	r4, r4, #12
 800d2fe:	432c      	orrs	r4, r5
 800d300:	50d4      	str	r4, [r2, r3]
 800d302:	e5ab      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800d304:	4a42      	ldr	r2, [pc, #264]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d306:	23a8      	movs	r3, #168	; 0xa8
 800d308:	58d4      	ldr	r4, [r2, r3]
 800d30a:	4d43      	ldr	r5, [pc, #268]	; (800d418 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d30c:	402c      	ands	r4, r5
 800d30e:	50d4      	str	r4, [r2, r3]
 800d310:	58d5      	ldr	r5, [r2, r3]
 800d312:	24e0      	movs	r4, #224	; 0xe0
 800d314:	0424      	lsls	r4, r4, #16
 800d316:	432c      	orrs	r4, r5
 800d318:	50d4      	str	r4, [r2, r3]
 800d31a:	e59f      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800d31c:	4a3a      	ldr	r2, [pc, #232]	; (800d408 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d31e:	23a8      	movs	r3, #168	; 0xa8
 800d320:	58d4      	ldr	r4, [r2, r3]
 800d322:	25f0      	movs	r5, #240	; 0xf0
 800d324:	43ac      	bics	r4, r5
 800d326:	50d4      	str	r4, [r2, r3]
 800d328:	58d4      	ldr	r4, [r2, r3]
 800d32a:	3d10      	subs	r5, #16
 800d32c:	432c      	orrs	r4, r5
 800d32e:	50d4      	str	r4, [r2, r3]
 800d330:	e594      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800d332:	4a3c      	ldr	r2, [pc, #240]	; (800d424 <RemapAndLinkDMAtoUARTRx+0x658>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d000      	beq.n	800d33a <RemapAndLinkDMAtoUARTRx+0x56e>
 800d338:	e590      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
 800d33a:	680b      	ldr	r3, [r1, #0]
 800d33c:	4a2c      	ldr	r2, [pc, #176]	; (800d3f0 <RemapAndLinkDMAtoUARTRx+0x624>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d01b      	beq.n	800d37a <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800d342:	4a2c      	ldr	r2, [pc, #176]	; (800d3f4 <RemapAndLinkDMAtoUARTRx+0x628>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d022      	beq.n	800d38e <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800d348:	4a2b      	ldr	r2, [pc, #172]	; (800d3f8 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d02b      	beq.n	800d3a6 <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800d34e:	4a2b      	ldr	r2, [pc, #172]	; (800d3fc <RemapAndLinkDMAtoUARTRx+0x630>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d034      	beq.n	800d3be <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800d354:	4a2a      	ldr	r2, [pc, #168]	; (800d400 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d03d      	beq.n	800d3d6 <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800d35a:	4a2a      	ldr	r2, [pc, #168]	; (800d404 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d000      	beq.n	800d362 <RemapAndLinkDMAtoUARTRx+0x596>
 800d360:	e57c      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800d362:	4a29      	ldr	r2, [pc, #164]	; (800d408 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d364:	23a8      	movs	r3, #168	; 0xa8
 800d366:	58d4      	ldr	r4, [r2, r3]
 800d368:	4d28      	ldr	r5, [pc, #160]	; (800d40c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d36a:	402c      	ands	r4, r5
 800d36c:	50d4      	str	r4, [r2, r3]
 800d36e:	58d5      	ldr	r5, [r2, r3]
 800d370:	24f0      	movs	r4, #240	; 0xf0
 800d372:	0124      	lsls	r4, r4, #4
 800d374:	432c      	orrs	r4, r5
 800d376:	50d4      	str	r4, [r2, r3]
 800d378:	e570      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800d37a:	4a25      	ldr	r2, [pc, #148]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d37c:	23a8      	movs	r3, #168	; 0xa8
 800d37e:	58d5      	ldr	r5, [r2, r3]
 800d380:	260f      	movs	r6, #15
 800d382:	43b5      	bics	r5, r6
 800d384:	50d5      	str	r5, [r2, r3]
 800d386:	58d4      	ldr	r4, [r2, r3]
 800d388:	4334      	orrs	r4, r6
 800d38a:	50d4      	str	r4, [r2, r3]
 800d38c:	e566      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800d38e:	4a20      	ldr	r2, [pc, #128]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d390:	23a8      	movs	r3, #168	; 0xa8
 800d392:	58d4      	ldr	r4, [r2, r3]
 800d394:	4d1d      	ldr	r5, [pc, #116]	; (800d40c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d396:	402c      	ands	r4, r5
 800d398:	50d4      	str	r4, [r2, r3]
 800d39a:	58d5      	ldr	r5, [r2, r3]
 800d39c:	24f0      	movs	r4, #240	; 0xf0
 800d39e:	0124      	lsls	r4, r4, #4
 800d3a0:	432c      	orrs	r4, r5
 800d3a2:	50d4      	str	r4, [r2, r3]
 800d3a4:	e55a      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800d3a6:	4a1a      	ldr	r2, [pc, #104]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d3a8:	23a8      	movs	r3, #168	; 0xa8
 800d3aa:	58d4      	ldr	r4, [r2, r3]
 800d3ac:	4d19      	ldr	r5, [pc, #100]	; (800d414 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d3ae:	402c      	ands	r4, r5
 800d3b0:	50d4      	str	r4, [r2, r3]
 800d3b2:	58d5      	ldr	r5, [r2, r3]
 800d3b4:	24f0      	movs	r4, #240	; 0xf0
 800d3b6:	0324      	lsls	r4, r4, #12
 800d3b8:	432c      	orrs	r4, r5
 800d3ba:	50d4      	str	r4, [r2, r3]
 800d3bc:	e54e      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800d3be:	4a14      	ldr	r2, [pc, #80]	; (800d410 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d3c0:	23a8      	movs	r3, #168	; 0xa8
 800d3c2:	58d4      	ldr	r4, [r2, r3]
 800d3c4:	4d14      	ldr	r5, [pc, #80]	; (800d418 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d3c6:	402c      	ands	r4, r5
 800d3c8:	50d4      	str	r4, [r2, r3]
 800d3ca:	58d5      	ldr	r5, [r2, r3]
 800d3cc:	24f0      	movs	r4, #240	; 0xf0
 800d3ce:	0424      	lsls	r4, r4, #16
 800d3d0:	432c      	orrs	r4, r5
 800d3d2:	50d4      	str	r4, [r2, r3]
 800d3d4:	e542      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800d3d6:	4a0c      	ldr	r2, [pc, #48]	; (800d408 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d3d8:	23a8      	movs	r3, #168	; 0xa8
 800d3da:	58d5      	ldr	r5, [r2, r3]
 800d3dc:	26f0      	movs	r6, #240	; 0xf0
 800d3de:	43b5      	bics	r5, r6
 800d3e0:	50d5      	str	r5, [r2, r3]
 800d3e2:	58d4      	ldr	r4, [r2, r3]
 800d3e4:	4334      	orrs	r4, r6
 800d3e6:	50d4      	str	r4, [r2, r3]
 800d3e8:	e538      	b.n	800ce5c <RemapAndLinkDMAtoUARTRx+0x90>
 800d3ea:	46c0      	nop			; (mov r8, r8)
 800d3ec:	40005000 	.word	0x40005000
 800d3f0:	40020008 	.word	0x40020008
 800d3f4:	40020030 	.word	0x40020030
 800d3f8:	40020058 	.word	0x40020058
 800d3fc:	4002006c 	.word	0x4002006c
 800d400:	4002041c 	.word	0x4002041c
 800d404:	40020430 	.word	0x40020430
 800d408:	40020400 	.word	0x40020400
 800d40c:	fffff0ff 	.word	0xfffff0ff
 800d410:	40020000 	.word	0x40020000
 800d414:	fff0ffff 	.word	0xfff0ffff
 800d418:	ff0fffff 	.word	0xff0fffff
 800d41c:	40011400 	.word	0x40011400
 800d420:	40011800 	.word	0x40011800
 800d424:	40011c00 	.word	0x40011c00

0800d428 <DMA_MSG_RX_Setup>:
{	
 800d428:	b570      	push	{r4, r5, r6, lr}
 800d42a:	0004      	movs	r4, r0
 800d42c:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800d42e:	f7ff fccd 	bl	800cdcc <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d432:	2100      	movs	r1, #0
 800d434:	0028      	movs	r0, r5
 800d436:	f7ff fc13 	bl	800cc60 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800d43a:	0020      	movs	r0, r4
 800d43c:	f7fe fcec 	bl	800be18 <GetPort>
 800d440:	3801      	subs	r0, #1
 800d442:	0041      	lsls	r1, r0, #1
 800d444:	1809      	adds	r1, r1, r0
 800d446:	0189      	lsls	r1, r1, #6
 800d448:	4803      	ldr	r0, [pc, #12]	; (800d458 <DMA_MSG_RX_Setup+0x30>)
 800d44a:	1809      	adds	r1, r1, r0
 800d44c:	22c0      	movs	r2, #192	; 0xc0
 800d44e:	0020      	movs	r0, r4
 800d450:	f006 fbfe 	bl	8013c50 <HAL_UART_Receive_DMA>
}
 800d454:	bd70      	pop	{r4, r5, r6, pc}
 800d456:	46c0      	nop			; (mov r8, r8)
 800d458:	200012a8 	.word	0x200012a8

0800d45c <SetupMessagingRxDMAs>:
{	
 800d45c:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800d45e:	4b17      	ldr	r3, [pc, #92]	; (800d4bc <SetupMessagingRxDMAs+0x60>)
 800d460:	785b      	ldrb	r3, [r3, #1]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d010      	beq.n	800d488 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800d466:	4b15      	ldr	r3, [pc, #84]	; (800d4bc <SetupMessagingRxDMAs+0x60>)
 800d468:	789b      	ldrb	r3, [r3, #2]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d011      	beq.n	800d492 <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800d46e:	4b13      	ldr	r3, [pc, #76]	; (800d4bc <SetupMessagingRxDMAs+0x60>)
 800d470:	78db      	ldrb	r3, [r3, #3]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d012      	beq.n	800d49c <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800d476:	4b11      	ldr	r3, [pc, #68]	; (800d4bc <SetupMessagingRxDMAs+0x60>)
 800d478:	791b      	ldrb	r3, [r3, #4]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d013      	beq.n	800d4a6 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800d47e:	4b0f      	ldr	r3, [pc, #60]	; (800d4bc <SetupMessagingRxDMAs+0x60>)
 800d480:	795b      	ldrb	r3, [r3, #5]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d014      	beq.n	800d4b0 <SetupMessagingRxDMAs+0x54>
}
 800d486:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800d488:	490d      	ldr	r1, [pc, #52]	; (800d4c0 <SetupMessagingRxDMAs+0x64>)
 800d48a:	480e      	ldr	r0, [pc, #56]	; (800d4c4 <SetupMessagingRxDMAs+0x68>)
 800d48c:	f7ff ffcc 	bl	800d428 <DMA_MSG_RX_Setup>
 800d490:	e7e9      	b.n	800d466 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800d492:	490d      	ldr	r1, [pc, #52]	; (800d4c8 <SetupMessagingRxDMAs+0x6c>)
 800d494:	480d      	ldr	r0, [pc, #52]	; (800d4cc <SetupMessagingRxDMAs+0x70>)
 800d496:	f7ff ffc7 	bl	800d428 <DMA_MSG_RX_Setup>
 800d49a:	e7e8      	b.n	800d46e <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800d49c:	490c      	ldr	r1, [pc, #48]	; (800d4d0 <SetupMessagingRxDMAs+0x74>)
 800d49e:	480d      	ldr	r0, [pc, #52]	; (800d4d4 <SetupMessagingRxDMAs+0x78>)
 800d4a0:	f7ff ffc2 	bl	800d428 <DMA_MSG_RX_Setup>
 800d4a4:	e7e7      	b.n	800d476 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800d4a6:	490c      	ldr	r1, [pc, #48]	; (800d4d8 <SetupMessagingRxDMAs+0x7c>)
 800d4a8:	480c      	ldr	r0, [pc, #48]	; (800d4dc <SetupMessagingRxDMAs+0x80>)
 800d4aa:	f7ff ffbd 	bl	800d428 <DMA_MSG_RX_Setup>
 800d4ae:	e7e6      	b.n	800d47e <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800d4b0:	490b      	ldr	r1, [pc, #44]	; (800d4e0 <SetupMessagingRxDMAs+0x84>)
 800d4b2:	480c      	ldr	r0, [pc, #48]	; (800d4e4 <SetupMessagingRxDMAs+0x88>)
 800d4b4:	f7ff ffb8 	bl	800d428 <DMA_MSG_RX_Setup>
}
 800d4b8:	e7e5      	b.n	800d486 <SetupMessagingRxDMAs+0x2a>
 800d4ba:	46c0      	nop			; (mov r8, r8)
 800d4bc:	200010cc 	.word	0x200010cc
 800d4c0:	200019c4 	.word	0x200019c4
 800d4c4:	20006dd0 	.word	0x20006dd0
 800d4c8:	200019fc 	.word	0x200019fc
 800d4cc:	20006f38 	.word	0x20006f38
 800d4d0:	20001a34 	.word	0x20001a34
 800d4d4:	20006ec0 	.word	0x20006ec0
 800d4d8:	20001a6c 	.word	0x20001a6c
 800d4dc:	20006d18 	.word	0x20006d18
 800d4e0:	20001aa4 	.word	0x20001aa4
 800d4e4:	20006e40 	.word	0x20006e40

0800d4e8 <DMA_STREAM_Setup>:
{	
 800d4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ea:	0005      	movs	r5, r0
 800d4ec:	000f      	movs	r7, r1
 800d4ee:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800d4f0:	f7fe fc92 	bl	800be18 <GetPort>
	hDMA = &streamDMA[port-1];
 800d4f4:	3801      	subs	r0, #1
 800d4f6:	00c4      	lsls	r4, r0, #3
 800d4f8:	1a24      	subs	r4, r4, r0
 800d4fa:	00e4      	lsls	r4, r4, #3
 800d4fc:	4809      	ldr	r0, [pc, #36]	; (800d524 <DMA_STREAM_Setup+0x3c>)
 800d4fe:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800d500:	0021      	movs	r1, r4
 800d502:	0028      	movs	r0, r5
 800d504:	f7ff fc62 	bl	800cdcc <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800d508:	2101      	movs	r1, #1
 800d50a:	0020      	movs	r0, r4
 800d50c:	f7ff fba8 	bl	800cc60 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800d510:	2369      	movs	r3, #105	; 0x69
 800d512:	2201      	movs	r2, #1
 800d514:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800d516:	6839      	ldr	r1, [r7, #0]
 800d518:	3128      	adds	r1, #40	; 0x28
 800d51a:	0032      	movs	r2, r6
 800d51c:	0028      	movs	r0, r5
 800d51e:	f006 fb97 	bl	8013c50 <HAL_UART_Receive_DMA>
}
 800d522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d524:	20001bbc 	.word	0x20001bbc

0800d528 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800d528:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d52a:	6803      	ldr	r3, [r0, #0]
 800d52c:	4abd      	ldr	r2, [pc, #756]	; (800d824 <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d02f      	beq.n	800d592 <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d532:	4abd      	ldr	r2, [pc, #756]	; (800d828 <RemapAndLinkDMAtoUARTTx+0x300>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d100      	bne.n	800d53a <RemapAndLinkDMAtoUARTTx+0x12>
 800d538:	e087      	b.n	800d64a <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d53a:	4abc      	ldr	r2, [pc, #752]	; (800d82c <RemapAndLinkDMAtoUARTTx+0x304>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d100      	bne.n	800d542 <RemapAndLinkDMAtoUARTTx+0x1a>
 800d540:	e0dc      	b.n	800d6fc <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800d542:	4abb      	ldr	r2, [pc, #748]	; (800d830 <RemapAndLinkDMAtoUARTTx+0x308>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d000      	beq.n	800d54a <RemapAndLinkDMAtoUARTTx+0x22>
 800d548:	e18a      	b.n	800d860 <RemapAndLinkDMAtoUARTTx+0x338>
 800d54a:	680b      	ldr	r3, [r1, #0]
 800d54c:	4ab9      	ldr	r2, [pc, #740]	; (800d834 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d100      	bne.n	800d554 <RemapAndLinkDMAtoUARTTx+0x2c>
 800d552:	e12d      	b.n	800d7b0 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800d554:	4ab8      	ldr	r2, [pc, #736]	; (800d838 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d100      	bne.n	800d55c <RemapAndLinkDMAtoUARTTx+0x34>
 800d55a:	e134      	b.n	800d7c6 <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800d55c:	4ab7      	ldr	r2, [pc, #732]	; (800d83c <RemapAndLinkDMAtoUARTTx+0x314>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d100      	bne.n	800d564 <RemapAndLinkDMAtoUARTTx+0x3c>
 800d562:	e13c      	b.n	800d7de <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800d564:	4ab6      	ldr	r2, [pc, #728]	; (800d840 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d100      	bne.n	800d56c <RemapAndLinkDMAtoUARTTx+0x44>
 800d56a:	e144      	b.n	800d7f6 <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800d56c:	4ab5      	ldr	r2, [pc, #724]	; (800d844 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d100      	bne.n	800d574 <RemapAndLinkDMAtoUARTTx+0x4c>
 800d572:	e14b      	b.n	800d80c <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800d574:	4ab4      	ldr	r2, [pc, #720]	; (800d848 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d11e      	bne.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800d57a:	4ab4      	ldr	r2, [pc, #720]	; (800d84c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d57c:	23a8      	movs	r3, #168	; 0xa8
 800d57e:	58d4      	ldr	r4, [r2, r3]
 800d580:	4db3      	ldr	r5, [pc, #716]	; (800d850 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d582:	402c      	ands	r4, r5
 800d584:	50d4      	str	r4, [r2, r3]
 800d586:	58d5      	ldr	r5, [r2, r3]
 800d588:	24b0      	movs	r4, #176	; 0xb0
 800d58a:	0324      	lsls	r4, r4, #12
 800d58c:	432c      	orrs	r4, r5
 800d58e:	50d4      	str	r4, [r2, r3]
 800d590:	e012      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d592:	680b      	ldr	r3, [r1, #0]
 800d594:	4aa7      	ldr	r2, [pc, #668]	; (800d834 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d011      	beq.n	800d5be <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800d59a:	4aa7      	ldr	r2, [pc, #668]	; (800d838 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d019      	beq.n	800d5d4 <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800d5a0:	4aa6      	ldr	r2, [pc, #664]	; (800d83c <RemapAndLinkDMAtoUARTTx+0x314>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d022      	beq.n	800d5ec <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800d5a6:	4aa6      	ldr	r2, [pc, #664]	; (800d840 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d02b      	beq.n	800d604 <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800d5ac:	4aa5      	ldr	r2, [pc, #660]	; (800d844 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d033      	beq.n	800d61a <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800d5b2:	4aa5      	ldr	r2, [pc, #660]	; (800d848 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d03c      	beq.n	800d632 <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800d5b8:	6601      	str	r1, [r0, #96]	; 0x60
 800d5ba:	6248      	str	r0, [r1, #36]	; 0x24
}
 800d5bc:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800d5be:	4aa5      	ldr	r2, [pc, #660]	; (800d854 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d5c0:	23a8      	movs	r3, #168	; 0xa8
 800d5c2:	58d4      	ldr	r4, [r2, r3]
 800d5c4:	25f0      	movs	r5, #240	; 0xf0
 800d5c6:	43ac      	bics	r4, r5
 800d5c8:	50d4      	str	r4, [r2, r3]
 800d5ca:	58d4      	ldr	r4, [r2, r3]
 800d5cc:	3d70      	subs	r5, #112	; 0x70
 800d5ce:	432c      	orrs	r4, r5
 800d5d0:	50d4      	str	r4, [r2, r3]
 800d5d2:	e7f1      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800d5d4:	4a9f      	ldr	r2, [pc, #636]	; (800d854 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d5d6:	23a8      	movs	r3, #168	; 0xa8
 800d5d8:	58d4      	ldr	r4, [r2, r3]
 800d5da:	4d9f      	ldr	r5, [pc, #636]	; (800d858 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d5dc:	402c      	ands	r4, r5
 800d5de:	50d4      	str	r4, [r2, r3]
 800d5e0:	58d5      	ldr	r5, [r2, r3]
 800d5e2:	2480      	movs	r4, #128	; 0x80
 800d5e4:	0224      	lsls	r4, r4, #8
 800d5e6:	432c      	orrs	r4, r5
 800d5e8:	50d4      	str	r4, [r2, r3]
 800d5ea:	e7e5      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800d5ec:	4a99      	ldr	r2, [pc, #612]	; (800d854 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d5ee:	23a8      	movs	r3, #168	; 0xa8
 800d5f0:	58d4      	ldr	r4, [r2, r3]
 800d5f2:	4d9a      	ldr	r5, [pc, #616]	; (800d85c <RemapAndLinkDMAtoUARTTx+0x334>)
 800d5f4:	402c      	ands	r4, r5
 800d5f6:	50d4      	str	r4, [r2, r3]
 800d5f8:	58d5      	ldr	r5, [r2, r3]
 800d5fa:	2480      	movs	r4, #128	; 0x80
 800d5fc:	0524      	lsls	r4, r4, #20
 800d5fe:	432c      	orrs	r4, r5
 800d600:	50d4      	str	r4, [r2, r3]
 800d602:	e7d9      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800d604:	4a91      	ldr	r2, [pc, #580]	; (800d84c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d606:	23a8      	movs	r3, #168	; 0xa8
 800d608:	58d4      	ldr	r4, [r2, r3]
 800d60a:	250f      	movs	r5, #15
 800d60c:	43ac      	bics	r4, r5
 800d60e:	50d4      	str	r4, [r2, r3]
 800d610:	58d4      	ldr	r4, [r2, r3]
 800d612:	3d07      	subs	r5, #7
 800d614:	432c      	orrs	r4, r5
 800d616:	50d4      	str	r4, [r2, r3]
 800d618:	e7ce      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800d61a:	4a8c      	ldr	r2, [pc, #560]	; (800d84c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d61c:	23a8      	movs	r3, #168	; 0xa8
 800d61e:	58d4      	ldr	r4, [r2, r3]
 800d620:	4d8d      	ldr	r5, [pc, #564]	; (800d858 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d622:	402c      	ands	r4, r5
 800d624:	50d4      	str	r4, [r2, r3]
 800d626:	58d5      	ldr	r5, [r2, r3]
 800d628:	2480      	movs	r4, #128	; 0x80
 800d62a:	0224      	lsls	r4, r4, #8
 800d62c:	432c      	orrs	r4, r5
 800d62e:	50d4      	str	r4, [r2, r3]
 800d630:	e7c2      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800d632:	4a86      	ldr	r2, [pc, #536]	; (800d84c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d634:	23a8      	movs	r3, #168	; 0xa8
 800d636:	58d4      	ldr	r4, [r2, r3]
 800d638:	4d85      	ldr	r5, [pc, #532]	; (800d850 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d63a:	402c      	ands	r4, r5
 800d63c:	50d4      	str	r4, [r2, r3]
 800d63e:	58d5      	ldr	r5, [r2, r3]
 800d640:	2480      	movs	r4, #128	; 0x80
 800d642:	0324      	lsls	r4, r4, #12
 800d644:	432c      	orrs	r4, r5
 800d646:	50d4      	str	r4, [r2, r3]
 800d648:	e7b6      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d64a:	680b      	ldr	r3, [r1, #0]
 800d64c:	4a79      	ldr	r2, [pc, #484]	; (800d834 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d01a      	beq.n	800d688 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800d652:	4a79      	ldr	r2, [pc, #484]	; (800d838 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d654:	4293      	cmp	r3, r2
 800d656:	d022      	beq.n	800d69e <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800d658:	4a78      	ldr	r2, [pc, #480]	; (800d83c <RemapAndLinkDMAtoUARTTx+0x314>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d02b      	beq.n	800d6b6 <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800d65e:	4a78      	ldr	r2, [pc, #480]	; (800d840 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d034      	beq.n	800d6ce <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800d664:	4a77      	ldr	r2, [pc, #476]	; (800d844 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d03c      	beq.n	800d6e4 <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800d66a:	4a77      	ldr	r2, [pc, #476]	; (800d848 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d1a3      	bne.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800d670:	4a76      	ldr	r2, [pc, #472]	; (800d84c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d672:	23a8      	movs	r3, #168	; 0xa8
 800d674:	58d4      	ldr	r4, [r2, r3]
 800d676:	4d76      	ldr	r5, [pc, #472]	; (800d850 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d678:	402c      	ands	r4, r5
 800d67a:	50d4      	str	r4, [r2, r3]
 800d67c:	58d5      	ldr	r5, [r2, r3]
 800d67e:	2490      	movs	r4, #144	; 0x90
 800d680:	0324      	lsls	r4, r4, #12
 800d682:	432c      	orrs	r4, r5
 800d684:	50d4      	str	r4, [r2, r3]
 800d686:	e797      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800d688:	4a72      	ldr	r2, [pc, #456]	; (800d854 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d68a:	23a8      	movs	r3, #168	; 0xa8
 800d68c:	58d4      	ldr	r4, [r2, r3]
 800d68e:	25f0      	movs	r5, #240	; 0xf0
 800d690:	43ac      	bics	r4, r5
 800d692:	50d4      	str	r4, [r2, r3]
 800d694:	58d4      	ldr	r4, [r2, r3]
 800d696:	3d60      	subs	r5, #96	; 0x60
 800d698:	432c      	orrs	r4, r5
 800d69a:	50d4      	str	r4, [r2, r3]
 800d69c:	e78c      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800d69e:	4a6d      	ldr	r2, [pc, #436]	; (800d854 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d6a0:	23a8      	movs	r3, #168	; 0xa8
 800d6a2:	58d4      	ldr	r4, [r2, r3]
 800d6a4:	4d6c      	ldr	r5, [pc, #432]	; (800d858 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d6a6:	402c      	ands	r4, r5
 800d6a8:	50d4      	str	r4, [r2, r3]
 800d6aa:	58d5      	ldr	r5, [r2, r3]
 800d6ac:	2490      	movs	r4, #144	; 0x90
 800d6ae:	0224      	lsls	r4, r4, #8
 800d6b0:	432c      	orrs	r4, r5
 800d6b2:	50d4      	str	r4, [r2, r3]
 800d6b4:	e780      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800d6b6:	4a67      	ldr	r2, [pc, #412]	; (800d854 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d6b8:	23a8      	movs	r3, #168	; 0xa8
 800d6ba:	58d4      	ldr	r4, [r2, r3]
 800d6bc:	4d67      	ldr	r5, [pc, #412]	; (800d85c <RemapAndLinkDMAtoUARTTx+0x334>)
 800d6be:	402c      	ands	r4, r5
 800d6c0:	50d4      	str	r4, [r2, r3]
 800d6c2:	58d5      	ldr	r5, [r2, r3]
 800d6c4:	2490      	movs	r4, #144	; 0x90
 800d6c6:	0524      	lsls	r4, r4, #20
 800d6c8:	432c      	orrs	r4, r5
 800d6ca:	50d4      	str	r4, [r2, r3]
 800d6cc:	e774      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800d6ce:	4a5f      	ldr	r2, [pc, #380]	; (800d84c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d6d0:	23a8      	movs	r3, #168	; 0xa8
 800d6d2:	58d4      	ldr	r4, [r2, r3]
 800d6d4:	250f      	movs	r5, #15
 800d6d6:	43ac      	bics	r4, r5
 800d6d8:	50d4      	str	r4, [r2, r3]
 800d6da:	58d4      	ldr	r4, [r2, r3]
 800d6dc:	3d06      	subs	r5, #6
 800d6de:	432c      	orrs	r4, r5
 800d6e0:	50d4      	str	r4, [r2, r3]
 800d6e2:	e769      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800d6e4:	4a59      	ldr	r2, [pc, #356]	; (800d84c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d6e6:	23a8      	movs	r3, #168	; 0xa8
 800d6e8:	58d4      	ldr	r4, [r2, r3]
 800d6ea:	4d5b      	ldr	r5, [pc, #364]	; (800d858 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d6ec:	402c      	ands	r4, r5
 800d6ee:	50d4      	str	r4, [r2, r3]
 800d6f0:	58d5      	ldr	r5, [r2, r3]
 800d6f2:	2490      	movs	r4, #144	; 0x90
 800d6f4:	0224      	lsls	r4, r4, #8
 800d6f6:	432c      	orrs	r4, r5
 800d6f8:	50d4      	str	r4, [r2, r3]
 800d6fa:	e75d      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d6fc:	680b      	ldr	r3, [r1, #0]
 800d6fe:	4a4d      	ldr	r2, [pc, #308]	; (800d834 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d01b      	beq.n	800d73c <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800d704:	4a4c      	ldr	r2, [pc, #304]	; (800d838 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d023      	beq.n	800d752 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800d70a:	4a4c      	ldr	r2, [pc, #304]	; (800d83c <RemapAndLinkDMAtoUARTTx+0x314>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d02c      	beq.n	800d76a <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800d710:	4a4b      	ldr	r2, [pc, #300]	; (800d840 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d035      	beq.n	800d782 <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800d716:	4a4b      	ldr	r2, [pc, #300]	; (800d844 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d03d      	beq.n	800d798 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800d71c:	4a4a      	ldr	r2, [pc, #296]	; (800d848 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d000      	beq.n	800d724 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800d722:	e749      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800d724:	4a49      	ldr	r2, [pc, #292]	; (800d84c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d726:	23a8      	movs	r3, #168	; 0xa8
 800d728:	58d4      	ldr	r4, [r2, r3]
 800d72a:	4d49      	ldr	r5, [pc, #292]	; (800d850 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d72c:	402c      	ands	r4, r5
 800d72e:	50d4      	str	r4, [r2, r3]
 800d730:	58d5      	ldr	r5, [r2, r3]
 800d732:	24a0      	movs	r4, #160	; 0xa0
 800d734:	0324      	lsls	r4, r4, #12
 800d736:	432c      	orrs	r4, r5
 800d738:	50d4      	str	r4, [r2, r3]
 800d73a:	e73d      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800d73c:	4a45      	ldr	r2, [pc, #276]	; (800d854 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d73e:	23a8      	movs	r3, #168	; 0xa8
 800d740:	58d4      	ldr	r4, [r2, r3]
 800d742:	25f0      	movs	r5, #240	; 0xf0
 800d744:	43ac      	bics	r4, r5
 800d746:	50d4      	str	r4, [r2, r3]
 800d748:	58d4      	ldr	r4, [r2, r3]
 800d74a:	3d50      	subs	r5, #80	; 0x50
 800d74c:	432c      	orrs	r4, r5
 800d74e:	50d4      	str	r4, [r2, r3]
 800d750:	e732      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800d752:	4a40      	ldr	r2, [pc, #256]	; (800d854 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d754:	23a8      	movs	r3, #168	; 0xa8
 800d756:	58d4      	ldr	r4, [r2, r3]
 800d758:	4d3f      	ldr	r5, [pc, #252]	; (800d858 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d75a:	402c      	ands	r4, r5
 800d75c:	50d4      	str	r4, [r2, r3]
 800d75e:	58d5      	ldr	r5, [r2, r3]
 800d760:	24a0      	movs	r4, #160	; 0xa0
 800d762:	0224      	lsls	r4, r4, #8
 800d764:	432c      	orrs	r4, r5
 800d766:	50d4      	str	r4, [r2, r3]
 800d768:	e726      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800d76a:	4a3a      	ldr	r2, [pc, #232]	; (800d854 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d76c:	23a8      	movs	r3, #168	; 0xa8
 800d76e:	58d4      	ldr	r4, [r2, r3]
 800d770:	4d3a      	ldr	r5, [pc, #232]	; (800d85c <RemapAndLinkDMAtoUARTTx+0x334>)
 800d772:	402c      	ands	r4, r5
 800d774:	50d4      	str	r4, [r2, r3]
 800d776:	58d5      	ldr	r5, [r2, r3]
 800d778:	24a0      	movs	r4, #160	; 0xa0
 800d77a:	0524      	lsls	r4, r4, #20
 800d77c:	432c      	orrs	r4, r5
 800d77e:	50d4      	str	r4, [r2, r3]
 800d780:	e71a      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800d782:	4a32      	ldr	r2, [pc, #200]	; (800d84c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d784:	23a8      	movs	r3, #168	; 0xa8
 800d786:	58d4      	ldr	r4, [r2, r3]
 800d788:	250f      	movs	r5, #15
 800d78a:	43ac      	bics	r4, r5
 800d78c:	50d4      	str	r4, [r2, r3]
 800d78e:	58d4      	ldr	r4, [r2, r3]
 800d790:	3d05      	subs	r5, #5
 800d792:	432c      	orrs	r4, r5
 800d794:	50d4      	str	r4, [r2, r3]
 800d796:	e70f      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800d798:	4a2c      	ldr	r2, [pc, #176]	; (800d84c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d79a:	23a8      	movs	r3, #168	; 0xa8
 800d79c:	58d4      	ldr	r4, [r2, r3]
 800d79e:	4d2e      	ldr	r5, [pc, #184]	; (800d858 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d7a0:	402c      	ands	r4, r5
 800d7a2:	50d4      	str	r4, [r2, r3]
 800d7a4:	58d5      	ldr	r5, [r2, r3]
 800d7a6:	24a0      	movs	r4, #160	; 0xa0
 800d7a8:	0224      	lsls	r4, r4, #8
 800d7aa:	432c      	orrs	r4, r5
 800d7ac:	50d4      	str	r4, [r2, r3]
 800d7ae:	e703      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800d7b0:	4a28      	ldr	r2, [pc, #160]	; (800d854 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d7b2:	23a8      	movs	r3, #168	; 0xa8
 800d7b4:	58d4      	ldr	r4, [r2, r3]
 800d7b6:	25f0      	movs	r5, #240	; 0xf0
 800d7b8:	43ac      	bics	r4, r5
 800d7ba:	50d4      	str	r4, [r2, r3]
 800d7bc:	58d4      	ldr	r4, [r2, r3]
 800d7be:	3d40      	subs	r5, #64	; 0x40
 800d7c0:	432c      	orrs	r4, r5
 800d7c2:	50d4      	str	r4, [r2, r3]
 800d7c4:	e6f8      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800d7c6:	4a23      	ldr	r2, [pc, #140]	; (800d854 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d7c8:	23a8      	movs	r3, #168	; 0xa8
 800d7ca:	58d4      	ldr	r4, [r2, r3]
 800d7cc:	4d22      	ldr	r5, [pc, #136]	; (800d858 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d7ce:	402c      	ands	r4, r5
 800d7d0:	50d4      	str	r4, [r2, r3]
 800d7d2:	58d5      	ldr	r5, [r2, r3]
 800d7d4:	24b0      	movs	r4, #176	; 0xb0
 800d7d6:	0224      	lsls	r4, r4, #8
 800d7d8:	432c      	orrs	r4, r5
 800d7da:	50d4      	str	r4, [r2, r3]
 800d7dc:	e6ec      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800d7de:	4a1d      	ldr	r2, [pc, #116]	; (800d854 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d7e0:	23a8      	movs	r3, #168	; 0xa8
 800d7e2:	58d4      	ldr	r4, [r2, r3]
 800d7e4:	4d1d      	ldr	r5, [pc, #116]	; (800d85c <RemapAndLinkDMAtoUARTTx+0x334>)
 800d7e6:	402c      	ands	r4, r5
 800d7e8:	50d4      	str	r4, [r2, r3]
 800d7ea:	58d5      	ldr	r5, [r2, r3]
 800d7ec:	24b0      	movs	r4, #176	; 0xb0
 800d7ee:	0524      	lsls	r4, r4, #20
 800d7f0:	432c      	orrs	r4, r5
 800d7f2:	50d4      	str	r4, [r2, r3]
 800d7f4:	e6e0      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800d7f6:	4a15      	ldr	r2, [pc, #84]	; (800d84c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d7f8:	23a8      	movs	r3, #168	; 0xa8
 800d7fa:	58d4      	ldr	r4, [r2, r3]
 800d7fc:	250f      	movs	r5, #15
 800d7fe:	43ac      	bics	r4, r5
 800d800:	50d4      	str	r4, [r2, r3]
 800d802:	58d4      	ldr	r4, [r2, r3]
 800d804:	3d04      	subs	r5, #4
 800d806:	432c      	orrs	r4, r5
 800d808:	50d4      	str	r4, [r2, r3]
 800d80a:	e6d5      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800d80c:	4a0f      	ldr	r2, [pc, #60]	; (800d84c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d80e:	23a8      	movs	r3, #168	; 0xa8
 800d810:	58d4      	ldr	r4, [r2, r3]
 800d812:	4d11      	ldr	r5, [pc, #68]	; (800d858 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d814:	402c      	ands	r4, r5
 800d816:	50d4      	str	r4, [r2, r3]
 800d818:	58d5      	ldr	r5, [r2, r3]
 800d81a:	24b0      	movs	r4, #176	; 0xb0
 800d81c:	0224      	lsls	r4, r4, #8
 800d81e:	432c      	orrs	r4, r5
 800d820:	50d4      	str	r4, [r2, r3]
 800d822:	e6c9      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
 800d824:	40013800 	.word	0x40013800
 800d828:	40004400 	.word	0x40004400
 800d82c:	40004800 	.word	0x40004800
 800d830:	40004c00 	.word	0x40004c00
 800d834:	4002001c 	.word	0x4002001c
 800d838:	40020044 	.word	0x40020044
 800d83c:	40020080 	.word	0x40020080
 800d840:	40020408 	.word	0x40020408
 800d844:	40020444 	.word	0x40020444
 800d848:	40020458 	.word	0x40020458
 800d84c:	40020400 	.word	0x40020400
 800d850:	fff0ffff 	.word	0xfff0ffff
 800d854:	40020000 	.word	0x40020000
 800d858:	ffff0fff 	.word	0xffff0fff
 800d85c:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800d860:	4ab9      	ldr	r2, [pc, #740]	; (800db48 <RemapAndLinkDMAtoUARTTx+0x620>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d159      	bne.n	800d91a <RemapAndLinkDMAtoUARTTx+0x3f2>
 800d866:	680b      	ldr	r3, [r1, #0]
 800d868:	4ab8      	ldr	r2, [pc, #736]	; (800db4c <RemapAndLinkDMAtoUARTTx+0x624>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d01b      	beq.n	800d8a6 <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800d86e:	4ab8      	ldr	r2, [pc, #736]	; (800db50 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d023      	beq.n	800d8bc <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800d874:	4ab7      	ldr	r2, [pc, #732]	; (800db54 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d02c      	beq.n	800d8d4 <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800d87a:	4ab7      	ldr	r2, [pc, #732]	; (800db58 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d035      	beq.n	800d8ec <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800d880:	4ab6      	ldr	r2, [pc, #728]	; (800db5c <RemapAndLinkDMAtoUARTTx+0x634>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d03d      	beq.n	800d902 <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800d886:	4ab6      	ldr	r2, [pc, #728]	; (800db60 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d000      	beq.n	800d88e <RemapAndLinkDMAtoUARTTx+0x366>
 800d88c:	e694      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800d88e:	4ab5      	ldr	r2, [pc, #724]	; (800db64 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d890:	23a8      	movs	r3, #168	; 0xa8
 800d892:	58d4      	ldr	r4, [r2, r3]
 800d894:	4db4      	ldr	r5, [pc, #720]	; (800db68 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d896:	402c      	ands	r4, r5
 800d898:	50d4      	str	r4, [r2, r3]
 800d89a:	58d5      	ldr	r5, [r2, r3]
 800d89c:	24c0      	movs	r4, #192	; 0xc0
 800d89e:	0324      	lsls	r4, r4, #12
 800d8a0:	432c      	orrs	r4, r5
 800d8a2:	50d4      	str	r4, [r2, r3]
 800d8a4:	e688      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800d8a6:	4ab1      	ldr	r2, [pc, #708]	; (800db6c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d8a8:	23a8      	movs	r3, #168	; 0xa8
 800d8aa:	58d4      	ldr	r4, [r2, r3]
 800d8ac:	25f0      	movs	r5, #240	; 0xf0
 800d8ae:	43ac      	bics	r4, r5
 800d8b0:	50d4      	str	r4, [r2, r3]
 800d8b2:	58d4      	ldr	r4, [r2, r3]
 800d8b4:	3d30      	subs	r5, #48	; 0x30
 800d8b6:	432c      	orrs	r4, r5
 800d8b8:	50d4      	str	r4, [r2, r3]
 800d8ba:	e67d      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800d8bc:	4aab      	ldr	r2, [pc, #684]	; (800db6c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d8be:	23a8      	movs	r3, #168	; 0xa8
 800d8c0:	58d4      	ldr	r4, [r2, r3]
 800d8c2:	4dab      	ldr	r5, [pc, #684]	; (800db70 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d8c4:	402c      	ands	r4, r5
 800d8c6:	50d4      	str	r4, [r2, r3]
 800d8c8:	58d5      	ldr	r5, [r2, r3]
 800d8ca:	24c0      	movs	r4, #192	; 0xc0
 800d8cc:	0224      	lsls	r4, r4, #8
 800d8ce:	432c      	orrs	r4, r5
 800d8d0:	50d4      	str	r4, [r2, r3]
 800d8d2:	e671      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800d8d4:	4aa5      	ldr	r2, [pc, #660]	; (800db6c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d8d6:	23a8      	movs	r3, #168	; 0xa8
 800d8d8:	58d4      	ldr	r4, [r2, r3]
 800d8da:	4da6      	ldr	r5, [pc, #664]	; (800db74 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d8dc:	402c      	ands	r4, r5
 800d8de:	50d4      	str	r4, [r2, r3]
 800d8e0:	58d5      	ldr	r5, [r2, r3]
 800d8e2:	24c0      	movs	r4, #192	; 0xc0
 800d8e4:	0524      	lsls	r4, r4, #20
 800d8e6:	432c      	orrs	r4, r5
 800d8e8:	50d4      	str	r4, [r2, r3]
 800d8ea:	e665      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800d8ec:	4a9d      	ldr	r2, [pc, #628]	; (800db64 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d8ee:	23a8      	movs	r3, #168	; 0xa8
 800d8f0:	58d4      	ldr	r4, [r2, r3]
 800d8f2:	250f      	movs	r5, #15
 800d8f4:	43ac      	bics	r4, r5
 800d8f6:	50d4      	str	r4, [r2, r3]
 800d8f8:	58d4      	ldr	r4, [r2, r3]
 800d8fa:	3d03      	subs	r5, #3
 800d8fc:	432c      	orrs	r4, r5
 800d8fe:	50d4      	str	r4, [r2, r3]
 800d900:	e65a      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800d902:	4a98      	ldr	r2, [pc, #608]	; (800db64 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d904:	23a8      	movs	r3, #168	; 0xa8
 800d906:	58d4      	ldr	r4, [r2, r3]
 800d908:	4d99      	ldr	r5, [pc, #612]	; (800db70 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d90a:	402c      	ands	r4, r5
 800d90c:	50d4      	str	r4, [r2, r3]
 800d90e:	58d5      	ldr	r5, [r2, r3]
 800d910:	24c0      	movs	r4, #192	; 0xc0
 800d912:	0224      	lsls	r4, r4, #8
 800d914:	432c      	orrs	r4, r5
 800d916:	50d4      	str	r4, [r2, r3]
 800d918:	e64e      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d91a:	4a97      	ldr	r2, [pc, #604]	; (800db78 <RemapAndLinkDMAtoUARTTx+0x650>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d159      	bne.n	800d9d4 <RemapAndLinkDMAtoUARTTx+0x4ac>
 800d920:	680b      	ldr	r3, [r1, #0]
 800d922:	4a8a      	ldr	r2, [pc, #552]	; (800db4c <RemapAndLinkDMAtoUARTTx+0x624>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d01b      	beq.n	800d960 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800d928:	4a89      	ldr	r2, [pc, #548]	; (800db50 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d023      	beq.n	800d976 <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800d92e:	4a89      	ldr	r2, [pc, #548]	; (800db54 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d02c      	beq.n	800d98e <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800d934:	4a88      	ldr	r2, [pc, #544]	; (800db58 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d035      	beq.n	800d9a6 <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800d93a:	4a88      	ldr	r2, [pc, #544]	; (800db5c <RemapAndLinkDMAtoUARTTx+0x634>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d03d      	beq.n	800d9bc <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d940:	4a87      	ldr	r2, [pc, #540]	; (800db60 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d000      	beq.n	800d948 <RemapAndLinkDMAtoUARTTx+0x420>
 800d946:	e637      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800d948:	4a86      	ldr	r2, [pc, #536]	; (800db64 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d94a:	23a8      	movs	r3, #168	; 0xa8
 800d94c:	58d4      	ldr	r4, [r2, r3]
 800d94e:	4d86      	ldr	r5, [pc, #536]	; (800db68 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d950:	402c      	ands	r4, r5
 800d952:	50d4      	str	r4, [r2, r3]
 800d954:	58d5      	ldr	r5, [r2, r3]
 800d956:	24d0      	movs	r4, #208	; 0xd0
 800d958:	0324      	lsls	r4, r4, #12
 800d95a:	432c      	orrs	r4, r5
 800d95c:	50d4      	str	r4, [r2, r3]
 800d95e:	e62b      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800d960:	4a82      	ldr	r2, [pc, #520]	; (800db6c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d962:	23a8      	movs	r3, #168	; 0xa8
 800d964:	58d4      	ldr	r4, [r2, r3]
 800d966:	25f0      	movs	r5, #240	; 0xf0
 800d968:	43ac      	bics	r4, r5
 800d96a:	50d4      	str	r4, [r2, r3]
 800d96c:	58d4      	ldr	r4, [r2, r3]
 800d96e:	3d20      	subs	r5, #32
 800d970:	432c      	orrs	r4, r5
 800d972:	50d4      	str	r4, [r2, r3]
 800d974:	e620      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800d976:	4a7d      	ldr	r2, [pc, #500]	; (800db6c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d978:	23a8      	movs	r3, #168	; 0xa8
 800d97a:	58d4      	ldr	r4, [r2, r3]
 800d97c:	4d7c      	ldr	r5, [pc, #496]	; (800db70 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d97e:	402c      	ands	r4, r5
 800d980:	50d4      	str	r4, [r2, r3]
 800d982:	58d5      	ldr	r5, [r2, r3]
 800d984:	24d0      	movs	r4, #208	; 0xd0
 800d986:	0224      	lsls	r4, r4, #8
 800d988:	432c      	orrs	r4, r5
 800d98a:	50d4      	str	r4, [r2, r3]
 800d98c:	e614      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800d98e:	4a77      	ldr	r2, [pc, #476]	; (800db6c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d990:	23a8      	movs	r3, #168	; 0xa8
 800d992:	58d4      	ldr	r4, [r2, r3]
 800d994:	4d77      	ldr	r5, [pc, #476]	; (800db74 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d996:	402c      	ands	r4, r5
 800d998:	50d4      	str	r4, [r2, r3]
 800d99a:	58d5      	ldr	r5, [r2, r3]
 800d99c:	24d0      	movs	r4, #208	; 0xd0
 800d99e:	0524      	lsls	r4, r4, #20
 800d9a0:	432c      	orrs	r4, r5
 800d9a2:	50d4      	str	r4, [r2, r3]
 800d9a4:	e608      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800d9a6:	4a6f      	ldr	r2, [pc, #444]	; (800db64 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d9a8:	23a8      	movs	r3, #168	; 0xa8
 800d9aa:	58d4      	ldr	r4, [r2, r3]
 800d9ac:	250f      	movs	r5, #15
 800d9ae:	43ac      	bics	r4, r5
 800d9b0:	50d4      	str	r4, [r2, r3]
 800d9b2:	58d4      	ldr	r4, [r2, r3]
 800d9b4:	3d02      	subs	r5, #2
 800d9b6:	432c      	orrs	r4, r5
 800d9b8:	50d4      	str	r4, [r2, r3]
 800d9ba:	e5fd      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d9bc:	4a69      	ldr	r2, [pc, #420]	; (800db64 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d9be:	23a8      	movs	r3, #168	; 0xa8
 800d9c0:	58d4      	ldr	r4, [r2, r3]
 800d9c2:	4d6b      	ldr	r5, [pc, #428]	; (800db70 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d9c4:	402c      	ands	r4, r5
 800d9c6:	50d4      	str	r4, [r2, r3]
 800d9c8:	58d5      	ldr	r5, [r2, r3]
 800d9ca:	24d0      	movs	r4, #208	; 0xd0
 800d9cc:	0224      	lsls	r4, r4, #8
 800d9ce:	432c      	orrs	r4, r5
 800d9d0:	50d4      	str	r4, [r2, r3]
 800d9d2:	e5f1      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d9d4:	4a69      	ldr	r2, [pc, #420]	; (800db7c <RemapAndLinkDMAtoUARTTx+0x654>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d159      	bne.n	800da8e <RemapAndLinkDMAtoUARTTx+0x566>
 800d9da:	680b      	ldr	r3, [r1, #0]
 800d9dc:	4a5b      	ldr	r2, [pc, #364]	; (800db4c <RemapAndLinkDMAtoUARTTx+0x624>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d01b      	beq.n	800da1a <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800d9e2:	4a5b      	ldr	r2, [pc, #364]	; (800db50 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d023      	beq.n	800da30 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800d9e8:	4a5a      	ldr	r2, [pc, #360]	; (800db54 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d02c      	beq.n	800da48 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800d9ee:	4a5a      	ldr	r2, [pc, #360]	; (800db58 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d035      	beq.n	800da60 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800d9f4:	4a59      	ldr	r2, [pc, #356]	; (800db5c <RemapAndLinkDMAtoUARTTx+0x634>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d03d      	beq.n	800da76 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800d9fa:	4a59      	ldr	r2, [pc, #356]	; (800db60 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d000      	beq.n	800da02 <RemapAndLinkDMAtoUARTTx+0x4da>
 800da00:	e5da      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800da02:	4a58      	ldr	r2, [pc, #352]	; (800db64 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800da04:	23a8      	movs	r3, #168	; 0xa8
 800da06:	58d4      	ldr	r4, [r2, r3]
 800da08:	4d57      	ldr	r5, [pc, #348]	; (800db68 <RemapAndLinkDMAtoUARTTx+0x640>)
 800da0a:	402c      	ands	r4, r5
 800da0c:	50d4      	str	r4, [r2, r3]
 800da0e:	58d5      	ldr	r5, [r2, r3]
 800da10:	24e0      	movs	r4, #224	; 0xe0
 800da12:	0324      	lsls	r4, r4, #12
 800da14:	432c      	orrs	r4, r5
 800da16:	50d4      	str	r4, [r2, r3]
 800da18:	e5ce      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800da1a:	4a54      	ldr	r2, [pc, #336]	; (800db6c <RemapAndLinkDMAtoUARTTx+0x644>)
 800da1c:	23a8      	movs	r3, #168	; 0xa8
 800da1e:	58d4      	ldr	r4, [r2, r3]
 800da20:	25f0      	movs	r5, #240	; 0xf0
 800da22:	43ac      	bics	r4, r5
 800da24:	50d4      	str	r4, [r2, r3]
 800da26:	58d4      	ldr	r4, [r2, r3]
 800da28:	3d10      	subs	r5, #16
 800da2a:	432c      	orrs	r4, r5
 800da2c:	50d4      	str	r4, [r2, r3]
 800da2e:	e5c3      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800da30:	4a4e      	ldr	r2, [pc, #312]	; (800db6c <RemapAndLinkDMAtoUARTTx+0x644>)
 800da32:	23a8      	movs	r3, #168	; 0xa8
 800da34:	58d4      	ldr	r4, [r2, r3]
 800da36:	4d4e      	ldr	r5, [pc, #312]	; (800db70 <RemapAndLinkDMAtoUARTTx+0x648>)
 800da38:	402c      	ands	r4, r5
 800da3a:	50d4      	str	r4, [r2, r3]
 800da3c:	58d5      	ldr	r5, [r2, r3]
 800da3e:	24e0      	movs	r4, #224	; 0xe0
 800da40:	0224      	lsls	r4, r4, #8
 800da42:	432c      	orrs	r4, r5
 800da44:	50d4      	str	r4, [r2, r3]
 800da46:	e5b7      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800da48:	4a48      	ldr	r2, [pc, #288]	; (800db6c <RemapAndLinkDMAtoUARTTx+0x644>)
 800da4a:	23a8      	movs	r3, #168	; 0xa8
 800da4c:	58d4      	ldr	r4, [r2, r3]
 800da4e:	4d49      	ldr	r5, [pc, #292]	; (800db74 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800da50:	402c      	ands	r4, r5
 800da52:	50d4      	str	r4, [r2, r3]
 800da54:	58d5      	ldr	r5, [r2, r3]
 800da56:	24e0      	movs	r4, #224	; 0xe0
 800da58:	0524      	lsls	r4, r4, #20
 800da5a:	432c      	orrs	r4, r5
 800da5c:	50d4      	str	r4, [r2, r3]
 800da5e:	e5ab      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800da60:	4a40      	ldr	r2, [pc, #256]	; (800db64 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800da62:	23a8      	movs	r3, #168	; 0xa8
 800da64:	58d4      	ldr	r4, [r2, r3]
 800da66:	250f      	movs	r5, #15
 800da68:	43ac      	bics	r4, r5
 800da6a:	50d4      	str	r4, [r2, r3]
 800da6c:	58d4      	ldr	r4, [r2, r3]
 800da6e:	3d01      	subs	r5, #1
 800da70:	432c      	orrs	r4, r5
 800da72:	50d4      	str	r4, [r2, r3]
 800da74:	e5a0      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800da76:	4a3b      	ldr	r2, [pc, #236]	; (800db64 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800da78:	23a8      	movs	r3, #168	; 0xa8
 800da7a:	58d4      	ldr	r4, [r2, r3]
 800da7c:	4d3c      	ldr	r5, [pc, #240]	; (800db70 <RemapAndLinkDMAtoUARTTx+0x648>)
 800da7e:	402c      	ands	r4, r5
 800da80:	50d4      	str	r4, [r2, r3]
 800da82:	58d5      	ldr	r5, [r2, r3]
 800da84:	24e0      	movs	r4, #224	; 0xe0
 800da86:	0224      	lsls	r4, r4, #8
 800da88:	432c      	orrs	r4, r5
 800da8a:	50d4      	str	r4, [r2, r3]
 800da8c:	e594      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800da8e:	4a3c      	ldr	r2, [pc, #240]	; (800db80 <RemapAndLinkDMAtoUARTTx+0x658>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d000      	beq.n	800da96 <RemapAndLinkDMAtoUARTTx+0x56e>
 800da94:	e590      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
 800da96:	680b      	ldr	r3, [r1, #0]
 800da98:	4a2c      	ldr	r2, [pc, #176]	; (800db4c <RemapAndLinkDMAtoUARTTx+0x624>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d01b      	beq.n	800dad6 <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800da9e:	4a2c      	ldr	r2, [pc, #176]	; (800db50 <RemapAndLinkDMAtoUARTTx+0x628>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d022      	beq.n	800daea <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800daa4:	4a2b      	ldr	r2, [pc, #172]	; (800db54 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d02b      	beq.n	800db02 <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800daaa:	4a2b      	ldr	r2, [pc, #172]	; (800db58 <RemapAndLinkDMAtoUARTTx+0x630>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d034      	beq.n	800db1a <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800dab0:	4a2a      	ldr	r2, [pc, #168]	; (800db5c <RemapAndLinkDMAtoUARTTx+0x634>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d03b      	beq.n	800db2e <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800dab6:	4a2a      	ldr	r2, [pc, #168]	; (800db60 <RemapAndLinkDMAtoUARTTx+0x638>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d000      	beq.n	800dabe <RemapAndLinkDMAtoUARTTx+0x596>
 800dabc:	e57c      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800dabe:	4a29      	ldr	r2, [pc, #164]	; (800db64 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800dac0:	23a8      	movs	r3, #168	; 0xa8
 800dac2:	58d4      	ldr	r4, [r2, r3]
 800dac4:	4d28      	ldr	r5, [pc, #160]	; (800db68 <RemapAndLinkDMAtoUARTTx+0x640>)
 800dac6:	402c      	ands	r4, r5
 800dac8:	50d4      	str	r4, [r2, r3]
 800daca:	58d5      	ldr	r5, [r2, r3]
 800dacc:	24f0      	movs	r4, #240	; 0xf0
 800dace:	0324      	lsls	r4, r4, #12
 800dad0:	432c      	orrs	r4, r5
 800dad2:	50d4      	str	r4, [r2, r3]
 800dad4:	e570      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800dad6:	4a25      	ldr	r2, [pc, #148]	; (800db6c <RemapAndLinkDMAtoUARTTx+0x644>)
 800dad8:	23a8      	movs	r3, #168	; 0xa8
 800dada:	58d5      	ldr	r5, [r2, r3]
 800dadc:	26f0      	movs	r6, #240	; 0xf0
 800dade:	43b5      	bics	r5, r6
 800dae0:	50d5      	str	r5, [r2, r3]
 800dae2:	58d4      	ldr	r4, [r2, r3]
 800dae4:	4334      	orrs	r4, r6
 800dae6:	50d4      	str	r4, [r2, r3]
 800dae8:	e566      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800daea:	4a20      	ldr	r2, [pc, #128]	; (800db6c <RemapAndLinkDMAtoUARTTx+0x644>)
 800daec:	23a8      	movs	r3, #168	; 0xa8
 800daee:	58d4      	ldr	r4, [r2, r3]
 800daf0:	4d1f      	ldr	r5, [pc, #124]	; (800db70 <RemapAndLinkDMAtoUARTTx+0x648>)
 800daf2:	402c      	ands	r4, r5
 800daf4:	50d4      	str	r4, [r2, r3]
 800daf6:	58d5      	ldr	r5, [r2, r3]
 800daf8:	24f0      	movs	r4, #240	; 0xf0
 800dafa:	0224      	lsls	r4, r4, #8
 800dafc:	432c      	orrs	r4, r5
 800dafe:	50d4      	str	r4, [r2, r3]
 800db00:	e55a      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800db02:	4a1a      	ldr	r2, [pc, #104]	; (800db6c <RemapAndLinkDMAtoUARTTx+0x644>)
 800db04:	23a8      	movs	r3, #168	; 0xa8
 800db06:	58d4      	ldr	r4, [r2, r3]
 800db08:	4d1a      	ldr	r5, [pc, #104]	; (800db74 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800db0a:	402c      	ands	r4, r5
 800db0c:	50d4      	str	r4, [r2, r3]
 800db0e:	58d5      	ldr	r5, [r2, r3]
 800db10:	24f0      	movs	r4, #240	; 0xf0
 800db12:	0524      	lsls	r4, r4, #20
 800db14:	432c      	orrs	r4, r5
 800db16:	50d4      	str	r4, [r2, r3]
 800db18:	e54e      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800db1a:	4a12      	ldr	r2, [pc, #72]	; (800db64 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800db1c:	23a8      	movs	r3, #168	; 0xa8
 800db1e:	58d5      	ldr	r5, [r2, r3]
 800db20:	260f      	movs	r6, #15
 800db22:	43b5      	bics	r5, r6
 800db24:	50d5      	str	r5, [r2, r3]
 800db26:	58d4      	ldr	r4, [r2, r3]
 800db28:	4334      	orrs	r4, r6
 800db2a:	50d4      	str	r4, [r2, r3]
 800db2c:	e544      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800db2e:	4a0d      	ldr	r2, [pc, #52]	; (800db64 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800db30:	23a8      	movs	r3, #168	; 0xa8
 800db32:	58d4      	ldr	r4, [r2, r3]
 800db34:	4d0e      	ldr	r5, [pc, #56]	; (800db70 <RemapAndLinkDMAtoUARTTx+0x648>)
 800db36:	402c      	ands	r4, r5
 800db38:	50d4      	str	r4, [r2, r3]
 800db3a:	58d5      	ldr	r5, [r2, r3]
 800db3c:	24f0      	movs	r4, #240	; 0xf0
 800db3e:	0224      	lsls	r4, r4, #8
 800db40:	432c      	orrs	r4, r5
 800db42:	50d4      	str	r4, [r2, r3]
 800db44:	e538      	b.n	800d5b8 <RemapAndLinkDMAtoUARTTx+0x90>
 800db46:	46c0      	nop			; (mov r8, r8)
 800db48:	40005000 	.word	0x40005000
 800db4c:	4002001c 	.word	0x4002001c
 800db50:	40020044 	.word	0x40020044
 800db54:	40020080 	.word	0x40020080
 800db58:	40020408 	.word	0x40020408
 800db5c:	40020444 	.word	0x40020444
 800db60:	40020458 	.word	0x40020458
 800db64:	40020400 	.word	0x40020400
 800db68:	fff0ffff 	.word	0xfff0ffff
 800db6c:	40020000 	.word	0x40020000
 800db70:	ffff0fff 	.word	0xffff0fff
 800db74:	f0ffffff 	.word	0xf0ffffff
 800db78:	40011400 	.word	0x40011400
 800db7c:	40011800 	.word	0x40011800
 800db80:	40011c00 	.word	0x40011c00

0800db84 <DMA_MSG_TX_Setup>:
{	
 800db84:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800db86:	4b0d      	ldr	r3, [pc, #52]	; (800dbbc <DMA_MSG_TX_Setup+0x38>)
 800db88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d012      	beq.n	800dbb4 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800db8e:	4b0b      	ldr	r3, [pc, #44]	; (800dbbc <DMA_MSG_TX_Setup+0x38>)
 800db90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db92:	2b00      	cmp	r3, #0
 800db94:	d010      	beq.n	800dbb8 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800db96:	4a09      	ldr	r2, [pc, #36]	; (800dbbc <DMA_MSG_TX_Setup+0x38>)
 800db98:	2394      	movs	r3, #148	; 0x94
 800db9a:	58d3      	ldr	r3, [r2, r3]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d007      	beq.n	800dbb0 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800dba0:	0021      	movs	r1, r4
 800dba2:	f7ff fcc1 	bl	800d528 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800dba6:	2100      	movs	r1, #0
 800dba8:	0020      	movs	r0, r4
 800dbaa:	f7ff f859 	bl	800cc60 <SetupDMAInterrupts>
}
 800dbae:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800dbb0:	4c03      	ldr	r4, [pc, #12]	; (800dbc0 <DMA_MSG_TX_Setup+0x3c>)
 800dbb2:	e7f5      	b.n	800dba0 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800dbb4:	4c01      	ldr	r4, [pc, #4]	; (800dbbc <DMA_MSG_TX_Setup+0x38>)
 800dbb6:	e7f3      	b.n	800dba0 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800dbb8:	4c02      	ldr	r4, [pc, #8]	; (800dbc4 <DMA_MSG_TX_Setup+0x40>)
 800dbba:	e7f1      	b.n	800dba0 <DMA_MSG_TX_Setup+0x1c>
 800dbbc:	20001b14 	.word	0x20001b14
 800dbc0:	20001b84 	.word	0x20001b84
 800dbc4:	20001b4c 	.word	0x20001b4c

0800dbc8 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800dbc8:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800dbca:	4807      	ldr	r0, [pc, #28]	; (800dbe8 <CRC_Init+0x20>)
 800dbcc:	4b07      	ldr	r3, [pc, #28]	; (800dbec <CRC_Init+0x24>)
 800dbce:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800dbd0:	2310      	movs	r3, #16
 800dbd2:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800dbd8:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800dbda:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800dbdc:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800dbde:	3303      	adds	r3, #3
 800dbe0:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800dbe2:	f003 fb9f 	bl	8011324 <HAL_CRC_Init>
}
 800dbe6:	bd10      	pop	{r4, pc}
 800dbe8:	20006fac 	.word	0x20006fac
 800dbec:	40023000 	.word	0x40023000

0800dbf0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800dbf0:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800dbf2:	4a05      	ldr	r2, [pc, #20]	; (800dc08 <HAL_CRC_MspInit+0x18>)
 800dbf4:	6951      	ldr	r1, [r2, #20]
 800dbf6:	2340      	movs	r3, #64	; 0x40
 800dbf8:	4319      	orrs	r1, r3
 800dbfa:	6151      	str	r1, [r2, #20]
 800dbfc:	6952      	ldr	r2, [r2, #20]
 800dbfe:	4013      	ands	r3, r2
 800dc00:	9301      	str	r3, [sp, #4]
 800dc02:	9b01      	ldr	r3, [sp, #4]
}
 800dc04:	b002      	add	sp, #8
 800dc06:	4770      	bx	lr
 800dc08:	40021000 	.word	0x40021000

0800dc0c <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800dc0c:	b570      	push	{r4, r5, r6, lr}
 800dc0e:	0004      	movs	r4, r0
 800dc10:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d015      	beq.n	800dc42 <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800dc16:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800dc18:	2900      	cmp	r1, #0
 800dc1a:	d100      	bne.n	800dc1e <CalculateCRC8+0x12>
}
 800dc1c:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800dc1e:	088e      	lsrs	r6, r1, #2
 800dc20:	0032      	movs	r2, r6
 800dc22:	0021      	movs	r1, r4
 800dc24:	4808      	ldr	r0, [pc, #32]	; (800dc48 <CalculateCRC8+0x3c>)
 800dc26:	f003 fbda 	bl	80113de <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800dc2a:	07ab      	lsls	r3, r5, #30
 800dc2c:	d101      	bne.n	800dc32 <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800dc2e:	b2c0      	uxtb	r0, r0
 800dc30:	e7f4      	b.n	800dc1c <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800dc32:	0131      	lsls	r1, r6, #4
 800dc34:	1861      	adds	r1, r4, r1
 800dc36:	2201      	movs	r2, #1
 800dc38:	4803      	ldr	r0, [pc, #12]	; (800dc48 <CalculateCRC8+0x3c>)
 800dc3a:	f003 fba4 	bl	8011386 <HAL_CRC_Accumulate>
 800dc3e:	b2c0      	uxtb	r0, r0
 800dc40:	e7ec      	b.n	800dc1c <CalculateCRC8+0x10>
	return 0;
 800dc42:	2000      	movs	r0, #0
 800dc44:	e7ea      	b.n	800dc1c <CalculateCRC8+0x10>
 800dc46:	46c0      	nop			; (mov r8, r8)
 800dc48:	20006fac 	.word	0x20006fac

0800dc4c <IND_LED_Init>:
}

/* --- Configure indicator LED --- 
*/
void IND_LED_Init(void)
{
 800dc4c:	b500      	push	{lr}
 800dc4e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800dc50:	2380      	movs	r3, #128	; 0x80
 800dc52:	011b      	lsls	r3, r3, #4
 800dc54:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dc56:	2301      	movs	r3, #1
 800dc58:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dc5e:	3303      	adds	r3, #3
 800dc60:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800dc62:	2090      	movs	r0, #144	; 0x90
 800dc64:	a901      	add	r1, sp, #4
 800dc66:	05c0      	lsls	r0, r0, #23
 800dc68:	f004 fa5c 	bl	8012124 <HAL_GPIO_Init>
}
 800dc6c:	b007      	add	sp, #28
 800dc6e:	bd00      	pop	{pc}

0800dc70 <GPIO_Init>:
{
 800dc70:	b500      	push	{lr}
 800dc72:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800dc74:	4b18      	ldr	r3, [pc, #96]	; (800dcd8 <GPIO_Init+0x68>)
 800dc76:	6959      	ldr	r1, [r3, #20]
 800dc78:	2080      	movs	r0, #128	; 0x80
 800dc7a:	0300      	lsls	r0, r0, #12
 800dc7c:	4301      	orrs	r1, r0
 800dc7e:	6159      	str	r1, [r3, #20]
 800dc80:	695a      	ldr	r2, [r3, #20]
 800dc82:	4002      	ands	r2, r0
 800dc84:	9201      	str	r2, [sp, #4]
 800dc86:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800dc88:	6959      	ldr	r1, [r3, #20]
 800dc8a:	2080      	movs	r0, #128	; 0x80
 800dc8c:	0280      	lsls	r0, r0, #10
 800dc8e:	4301      	orrs	r1, r0
 800dc90:	6159      	str	r1, [r3, #20]
 800dc92:	695a      	ldr	r2, [r3, #20]
 800dc94:	4002      	ands	r2, r0
 800dc96:	9202      	str	r2, [sp, #8]
 800dc98:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800dc9a:	6959      	ldr	r1, [r3, #20]
 800dc9c:	2080      	movs	r0, #128	; 0x80
 800dc9e:	0340      	lsls	r0, r0, #13
 800dca0:	4301      	orrs	r1, r0
 800dca2:	6159      	str	r1, [r3, #20]
 800dca4:	695a      	ldr	r2, [r3, #20]
 800dca6:	4002      	ands	r2, r0
 800dca8:	9203      	str	r2, [sp, #12]
 800dcaa:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800dcac:	6959      	ldr	r1, [r3, #20]
 800dcae:	2080      	movs	r0, #128	; 0x80
 800dcb0:	02c0      	lsls	r0, r0, #11
 800dcb2:	4301      	orrs	r1, r0
 800dcb4:	6159      	str	r1, [r3, #20]
 800dcb6:	695a      	ldr	r2, [r3, #20]
 800dcb8:	4002      	ands	r2, r0
 800dcba:	9204      	str	r2, [sp, #16]
 800dcbc:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800dcbe:	695a      	ldr	r2, [r3, #20]
 800dcc0:	2180      	movs	r1, #128	; 0x80
 800dcc2:	03c9      	lsls	r1, r1, #15
 800dcc4:	430a      	orrs	r2, r1
 800dcc6:	615a      	str	r2, [r3, #20]
 800dcc8:	695b      	ldr	r3, [r3, #20]
 800dcca:	400b      	ands	r3, r1
 800dccc:	9305      	str	r3, [sp, #20]
 800dcce:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800dcd0:	f7ff ffbc 	bl	800dc4c <IND_LED_Init>
}
 800dcd4:	b007      	add	sp, #28
 800dcd6:	bd00      	pop	{pc}
 800dcd8:	40021000 	.word	0x40021000

0800dcdc <Switch_Init>:

/* --- Configure Switch GPIO ---
*/
void Switch_Init(void)
{
 800dcdc:	b500      	push	{lr}
 800dcde:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _Switch_PIN;
 800dce0:	2301      	movs	r3, #1
 800dce2:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dce4:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dce6:	2300      	movs	r3, #0
 800dce8:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dcea:	3303      	adds	r3, #3
 800dcec:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800dcee:	a901      	add	r1, sp, #4
 800dcf0:	4802      	ldr	r0, [pc, #8]	; (800dcfc <Switch_Init+0x20>)
 800dcf2:	f004 fa17 	bl	8012124 <HAL_GPIO_Init>
}
 800dcf6:	b007      	add	sp, #28
 800dcf8:	bd00      	pop	{pc}
 800dcfa:	46c0      	nop			; (mov r8, r8)
 800dcfc:	48000400 	.word	0x48000400

0800dd00 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800dd00:	b570      	push	{r4, r5, r6, lr}
 800dd02:	000e      	movs	r6, r1
 800dd04:	0015      	movs	r5, r2
 800dd06:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800dd08:	f000 fd22 	bl	800e750 <GetUart>
	
	if (huart == &huart1) 
 800dd0c:	4b24      	ldr	r3, [pc, #144]	; (800dda0 <GetPortGPIOs+0xa0>)
 800dd0e:	4298      	cmp	r0, r3
 800dd10:	d017      	beq.n	800dd42 <GetPortGPIOs+0x42>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800dd12:	4b24      	ldr	r3, [pc, #144]	; (800dda4 <GetPortGPIOs+0xa4>)
 800dd14:	4298      	cmp	r0, r3
 800dd16:	d022      	beq.n	800dd5e <GetPortGPIOs+0x5e>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800dd18:	4b23      	ldr	r3, [pc, #140]	; (800dda8 <GetPortGPIOs+0xa8>)
 800dd1a:	4298      	cmp	r0, r3
 800dd1c:	d02a      	beq.n	800dd74 <GetPortGPIOs+0x74>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800dd1e:	4b23      	ldr	r3, [pc, #140]	; (800ddac <GetPortGPIOs+0xac>)
 800dd20:	4298      	cmp	r0, r3
 800dd22:	d033      	beq.n	800dd8c <GetPortGPIOs+0x8c>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800dd24:	4a22      	ldr	r2, [pc, #136]	; (800ddb0 <GetPortGPIOs+0xb0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800dd26:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800dd28:	4290      	cmp	r0, r2
 800dd2a:	d116      	bne.n	800dd5a <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800dd2c:	2390      	movs	r3, #144	; 0x90
 800dd2e:	05db      	lsls	r3, r3, #23
 800dd30:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800dd32:	2210      	movs	r2, #16
 800dd34:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800dd36:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800dd38:	2320      	movs	r3, #32
 800dd3a:	9a04      	ldr	r2, [sp, #16]
 800dd3c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	e00b      	b.n	800dd5a <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800dd42:	2390      	movs	r3, #144	; 0x90
 800dd44:	05db      	lsls	r3, r3, #23
 800dd46:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800dd48:	2280      	movs	r2, #128	; 0x80
 800dd4a:	0092      	lsls	r2, r2, #2
 800dd4c:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800dd4e:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800dd50:	2380      	movs	r3, #128	; 0x80
 800dd52:	00db      	lsls	r3, r3, #3
 800dd54:	9a04      	ldr	r2, [sp, #16]
 800dd56:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dd58:	2300      	movs	r3, #0
	
	return result;	
}
 800dd5a:	0018      	movs	r0, r3
 800dd5c:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800dd5e:	2390      	movs	r3, #144	; 0x90
 800dd60:	05db      	lsls	r3, r3, #23
 800dd62:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800dd64:	2204      	movs	r2, #4
 800dd66:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800dd68:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800dd6a:	2308      	movs	r3, #8
 800dd6c:	9a04      	ldr	r2, [sp, #16]
 800dd6e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dd70:	2300      	movs	r3, #0
 800dd72:	e7f2      	b.n	800dd5a <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800dd74:	4b0f      	ldr	r3, [pc, #60]	; (800ddb4 <GetPortGPIOs+0xb4>)
 800dd76:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800dd78:	2280      	movs	r2, #128	; 0x80
 800dd7a:	00d2      	lsls	r2, r2, #3
 800dd7c:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800dd7e:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800dd80:	2380      	movs	r3, #128	; 0x80
 800dd82:	011b      	lsls	r3, r3, #4
 800dd84:	9a04      	ldr	r2, [sp, #16]
 800dd86:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	e7e6      	b.n	800dd5a <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800dd8c:	4b09      	ldr	r3, [pc, #36]	; (800ddb4 <GetPortGPIOs+0xb4>)
 800dd8e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800dd90:	2208      	movs	r2, #8
 800dd92:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800dd94:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800dd96:	2310      	movs	r3, #16
 800dd98:	9a04      	ldr	r2, [sp, #16]
 800dd9a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	e7dc      	b.n	800dd5a <GetPortGPIOs+0x5a>
 800dda0:	20006e40 	.word	0x20006e40
 800dda4:	20006f38 	.word	0x20006f38
 800dda8:	20006d18 	.word	0x20006d18
 800ddac:	20006dd0 	.word	0x20006dd0
 800ddb0:	20006ec0 	.word	0x20006ec0
 800ddb4:	48000400 	.word	0x48000400

0800ddb8 <IsFactoryReset>:
{
 800ddb8:	b570      	push	{r4, r5, r6, lr}
 800ddba:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800ddbc:	4b39      	ldr	r3, [pc, #228]	; (800dea4 <IsFactoryReset+0xec>)
 800ddbe:	6959      	ldr	r1, [r3, #20]
 800ddc0:	2080      	movs	r0, #128	; 0x80
 800ddc2:	0280      	lsls	r0, r0, #10
 800ddc4:	4301      	orrs	r1, r0
 800ddc6:	6159      	str	r1, [r3, #20]
 800ddc8:	695a      	ldr	r2, [r3, #20]
 800ddca:	4002      	ands	r2, r0
 800ddcc:	9203      	str	r2, [sp, #12]
 800ddce:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800ddd0:	6959      	ldr	r1, [r3, #20]
 800ddd2:	2080      	movs	r0, #128	; 0x80
 800ddd4:	02c0      	lsls	r0, r0, #11
 800ddd6:	4301      	orrs	r1, r0
 800ddd8:	6159      	str	r1, [r3, #20]
 800ddda:	695a      	ldr	r2, [r3, #20]
 800dddc:	4002      	ands	r2, r0
 800ddde:	9204      	str	r2, [sp, #16]
 800dde0:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800dde2:	6959      	ldr	r1, [r3, #20]
 800dde4:	2080      	movs	r0, #128	; 0x80
 800dde6:	0300      	lsls	r0, r0, #12
 800dde8:	4301      	orrs	r1, r0
 800ddea:	6159      	str	r1, [r3, #20]
 800ddec:	695a      	ldr	r2, [r3, #20]
 800ddee:	4002      	ands	r2, r0
 800ddf0:	9205      	str	r2, [sp, #20]
 800ddf2:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800ddf4:	695a      	ldr	r2, [r3, #20]
 800ddf6:	2180      	movs	r1, #128	; 0x80
 800ddf8:	0349      	lsls	r1, r1, #13
 800ddfa:	430a      	orrs	r2, r1
 800ddfc:	615a      	str	r2, [r3, #20]
 800ddfe:	695b      	ldr	r3, [r3, #20]
 800de00:	400b      	ands	r3, r1
 800de02:	9306      	str	r3, [sp, #24]
 800de04:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800de06:	2522      	movs	r5, #34	; 0x22
 800de08:	446d      	add	r5, sp
 800de0a:	ab08      	add	r3, sp, #32
 800de0c:	9300      	str	r3, [sp, #0]
 800de0e:	ab0b      	add	r3, sp, #44	; 0x2c
 800de10:	002a      	movs	r2, r5
 800de12:	a90c      	add	r1, sp, #48	; 0x30
 800de14:	2001      	movs	r0, #1
 800de16:	f7ff ff73 	bl	800dd00 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800de1a:	ac07      	add	r4, sp, #28
 800de1c:	9400      	str	r4, [sp, #0]
 800de1e:	ab09      	add	r3, sp, #36	; 0x24
 800de20:	221e      	movs	r2, #30
 800de22:	446a      	add	r2, sp
 800de24:	a90a      	add	r1, sp, #40	; 0x28
 800de26:	2005      	movs	r0, #5
 800de28:	f7ff ff6a 	bl	800dd00 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800de2c:	2301      	movs	r3, #1
 800de2e:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de30:	2600      	movs	r6, #0
 800de32:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800de34:	882b      	ldrh	r3, [r5, #0]
 800de36:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800de38:	a90d      	add	r1, sp, #52	; 0x34
 800de3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800de3c:	f004 f972 	bl	8012124 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800de40:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800de42:	2302      	movs	r3, #2
 800de44:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800de46:	8823      	ldrh	r3, [r4, #0]
 800de48:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800de4a:	a90d      	add	r1, sp, #52	; 0x34
 800de4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de4e:	f004 f969 	bl	8012124 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800de52:	8829      	ldrh	r1, [r5, #0]
 800de54:	2200      	movs	r2, #0
 800de56:	980c      	ldr	r0, [sp, #48]	; 0x30
 800de58:	f004 fad8 	bl	801240c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800de5c:	2005      	movs	r0, #5
 800de5e:	f000 fae1 	bl	800e424 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800de62:	8821      	ldrh	r1, [r4, #0]
 800de64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de66:	f004 facb 	bl	8012400 <HAL_GPIO_ReadPin>
 800de6a:	2800      	cmp	r0, #0
 800de6c:	d006      	beq.n	800de7c <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800de6e:	4b0e      	ldr	r3, [pc, #56]	; (800dea8 <IsFactoryReset+0xf0>)
 800de70:	2201      	movs	r2, #1
 800de72:	4252      	negs	r2, r2
 800de74:	601a      	str	r2, [r3, #0]
	return 0;
 800de76:	2000      	movs	r0, #0
}
 800de78:	b012      	add	sp, #72	; 0x48
 800de7a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800de7c:	2322      	movs	r3, #34	; 0x22
 800de7e:	446b      	add	r3, sp
 800de80:	8819      	ldrh	r1, [r3, #0]
 800de82:	2201      	movs	r2, #1
 800de84:	980c      	ldr	r0, [sp, #48]	; 0x30
 800de86:	f004 fac1 	bl	801240c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800de8a:	2005      	movs	r0, #5
 800de8c:	f000 faca 	bl	800e424 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800de90:	ab07      	add	r3, sp, #28
 800de92:	8819      	ldrh	r1, [r3, #0]
 800de94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de96:	f004 fab3 	bl	8012400 <HAL_GPIO_ReadPin>
 800de9a:	2801      	cmp	r0, #1
 800de9c:	d1e7      	bne.n	800de6e <IsFactoryReset+0xb6>
			return 1;
 800de9e:	2001      	movs	r0, #1
 800dea0:	e7ea      	b.n	800de78 <IsFactoryReset+0xc0>
 800dea2:	46c0      	nop			; (mov r8, r8)
 800dea4:	40021000 	.word	0x40021000
 800dea8:	20007ff0 	.word	0x20007ff0

0800deac <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800deac:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800deae:	f002 fdc3 	bl	8010a38 <HAL_IncTick>
  osSystickHandler();  
 800deb2:	f000 fe0b 	bl	800eacc <osSystickHandler>

}
 800deb6:	bd10      	pop	{r4, pc}

0800deb8 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800deb8:	e7fe      	b.n	800deb8 <HardFault_Handler>
	...

0800debc <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800debc:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800debe:	4802      	ldr	r0, [pc, #8]	; (800dec8 <USART1_IRQHandler+0xc>)
 800dec0:	f006 fadd 	bl	801447e <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800dec4:	bd10      	pop	{r4, pc}
 800dec6:	46c0      	nop			; (mov r8, r8)
 800dec8:	20006e40 	.word	0x20006e40

0800decc <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800decc:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800dece:	4802      	ldr	r0, [pc, #8]	; (800ded8 <USART2_IRQHandler+0xc>)
 800ded0:	f006 fad5 	bl	801447e <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ded4:	bd10      	pop	{r4, pc}
 800ded6:	46c0      	nop			; (mov r8, r8)
 800ded8:	20006f38 	.word	0x20006f38

0800dedc <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800dedc:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800dede:	4805      	ldr	r0, [pc, #20]	; (800def4 <USART3_8_IRQHandler+0x18>)
 800dee0:	f006 facd 	bl	801447e <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800dee4:	4804      	ldr	r0, [pc, #16]	; (800def8 <USART3_8_IRQHandler+0x1c>)
 800dee6:	f006 faca 	bl	801447e <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800deea:	4804      	ldr	r0, [pc, #16]	; (800defc <USART3_8_IRQHandler+0x20>)
 800deec:	f006 fac7 	bl	801447e <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800def0:	bd10      	pop	{r4, pc}
 800def2:	46c0      	nop			; (mov r8, r8)
 800def4:	20006d18 	.word	0x20006d18
 800def8:	20006dd0 	.word	0x20006dd0
 800defc:	20006ec0 	.word	0x20006ec0

0800df00 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800df00:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800df02:	4b0c      	ldr	r3, [pc, #48]	; (800df34 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	06db      	lsls	r3, r3, #27
 800df08:	d408      	bmi.n	800df1c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800df0a:	4b0b      	ldr	r3, [pc, #44]	; (800df38 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	05db      	lsls	r3, r3, #23
 800df10:	d408      	bmi.n	800df24 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800df12:	4b09      	ldr	r3, [pc, #36]	; (800df38 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	06db      	lsls	r3, r3, #27
 800df18:	d408      	bmi.n	800df2c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800df1a:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800df1c:	2005      	movs	r0, #5
 800df1e:	f7f9 fccd 	bl	80078bc <DMA_IRQHandler>
 800df22:	e7fa      	b.n	800df1a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800df24:	2002      	movs	r0, #2
 800df26:	f7f9 fcc9 	bl	80078bc <DMA_IRQHandler>
 800df2a:	e7f6      	b.n	800df1a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800df2c:	4803      	ldr	r0, [pc, #12]	; (800df3c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800df2e:	f003 fb55 	bl	80115dc <HAL_DMA_IRQHandler>
}
 800df32:	e7f2      	b.n	800df1a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800df34:	40020400 	.word	0x40020400
 800df38:	40020000 	.word	0x40020000
 800df3c:	20001b14 	.word	0x20001b14

0800df40 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800df40:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800df42:	4b14      	ldr	r3, [pc, #80]	; (800df94 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	03db      	lsls	r3, r3, #15
 800df48:	d413      	bmi.n	800df72 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800df4a:	4b12      	ldr	r3, [pc, #72]	; (800df94 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	02db      	lsls	r3, r3, #11
 800df50:	d413      	bmi.n	800df7a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800df52:	4b11      	ldr	r3, [pc, #68]	; (800df98 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	05db      	lsls	r3, r3, #23
 800df58:	d413      	bmi.n	800df82 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800df5a:	4b0e      	ldr	r3, [pc, #56]	; (800df94 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	04db      	lsls	r3, r3, #19
 800df60:	d413      	bmi.n	800df8a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800df62:	4b0c      	ldr	r3, [pc, #48]	; (800df94 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	01db      	lsls	r3, r3, #7
 800df68:	d506      	bpl.n	800df78 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800df6a:	480c      	ldr	r0, [pc, #48]	; (800df9c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800df6c:	f003 fb36 	bl	80115dc <HAL_DMA_IRQHandler>
	}
}
 800df70:	e002      	b.n	800df78 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800df72:	2003      	movs	r0, #3
 800df74:	f7f9 fca2 	bl	80078bc <DMA_IRQHandler>
}
 800df78:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800df7a:	2004      	movs	r0, #4
 800df7c:	f7f9 fc9e 	bl	80078bc <DMA_IRQHandler>
 800df80:	e7fa      	b.n	800df78 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800df82:	2006      	movs	r0, #6
 800df84:	f7f9 fc9a 	bl	80078bc <DMA_IRQHandler>
 800df88:	e7f6      	b.n	800df78 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800df8a:	4805      	ldr	r0, [pc, #20]	; (800dfa0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800df8c:	f003 fb26 	bl	80115dc <HAL_DMA_IRQHandler>
 800df90:	e7f2      	b.n	800df78 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800df92:	46c0      	nop			; (mov r8, r8)
 800df94:	40020000 	.word	0x40020000
 800df98:	40020400 	.word	0x40020400
 800df9c:	20001b84 	.word	0x20001b84
 800dfa0:	20001b4c 	.word	0x20001b4c

0800dfa4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800dfa4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800dfa6:	4802      	ldr	r0, [pc, #8]	; (800dfb0 <ADC1_COMP_IRQHandler+0xc>)
 800dfa8:	f002 ff92 	bl	8010ed0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800dfac:	bd10      	pop	{r4, pc}
 800dfae:	46c0      	nop			; (mov r8, r8)
 800dfb0:	20006cac 	.word	0x20006cac

0800dfb4 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dfb4:	b510      	push	{r4, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800dfbe:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d001      	beq.n	800dfc8 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800dfc4:	f7fe fef8 	bl	800cdb8 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800dfc8:	0020      	movs	r0, r4
 800dfca:	f7fd ff25 	bl	800be18 <GetPort>
 800dfce:	0080      	lsls	r0, r0, #2
 800dfd0:	4b03      	ldr	r3, [pc, #12]	; (800dfe0 <HAL_UART_TxCpltCallback+0x2c>)
 800dfd2:	58c0      	ldr	r0, [r0, r3]
 800dfd4:	a901      	add	r1, sp, #4
 800dfd6:	f001 f8fd 	bl	800f1d4 <xQueueGiveFromISR>
}
 800dfda:	b002      	add	sp, #8
 800dfdc:	bd10      	pop	{r4, pc}
 800dfde:	46c0      	nop			; (mov r8, r8)
 800dfe0:	20006c74 	.word	0x20006c74

0800dfe4 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dfe4:	b510      	push	{r4, lr}
 800dfe6:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800dfe8:	2369      	movs	r3, #105	; 0x69
 800dfea:	2201      	movs	r2, #1
 800dfec:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800dfee:	f7fd ff13 	bl	800be18 <GetPort>
	if (portStatus[port] == STREAM) {
 800dff2:	4b0c      	ldr	r3, [pc, #48]	; (800e024 <HAL_UART_ErrorCallback+0x40>)
 800dff4:	5c1b      	ldrb	r3, [r3, r0]
 800dff6:	2b02      	cmp	r3, #2
 800dff8:	d005      	beq.n	800e006 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800dffa:	4b0b      	ldr	r3, [pc, #44]	; (800e028 <HAL_UART_ErrorCallback+0x44>)
 800dffc:	1818      	adds	r0, r3, r0
 800dffe:	3801      	subs	r0, #1
 800e000:	2301      	movs	r3, #1
 800e002:	7003      	strb	r3, [r0, #0]
	}	
}
 800e004:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800e006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	685a      	ldr	r2, [r3, #4]
 800e00c:	b292      	uxth	r2, r2
 800e00e:	3801      	subs	r0, #1
 800e010:	0080      	lsls	r0, r0, #2
 800e012:	4b06      	ldr	r3, [pc, #24]	; (800e02c <HAL_UART_ErrorCallback+0x48>)
 800e014:	58c3      	ldr	r3, [r0, r3]
 800e016:	6819      	ldr	r1, [r3, #0]
 800e018:	3128      	adds	r1, #40	; 0x28
 800e01a:	0020      	movs	r0, r4
 800e01c:	f005 fe18 	bl	8013c50 <HAL_UART_Receive_DMA>
 800e020:	e7f0      	b.n	800e004 <HAL_UART_ErrorCallback+0x20>
 800e022:	46c0      	nop			; (mov r8, r8)
 800e024:	200010cc 	.word	0x200010cc
 800e028:	200012a0 	.word	0x200012a0
 800e02c:	200016bc 	.word	0x200016bc

0800e030 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e030:	b510      	push	{r4, lr}
 800e032:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800e034:	f7fd fef0 	bl	800be18 <GetPort>
 800e038:	4b13      	ldr	r3, [pc, #76]	; (800e088 <HAL_UART_RxCpltCallback+0x58>)
 800e03a:	5c1b      	ldrb	r3, [r3, r0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d006      	beq.n	800e04e <HAL_UART_RxCpltCallback+0x1e>
 800e040:	0020      	movs	r0, r4
 800e042:	f7fd fee9 	bl	800be18 <GetPort>
 800e046:	4b10      	ldr	r3, [pc, #64]	; (800e088 <HAL_UART_RxCpltCallback+0x58>)
 800e048:	5c1b      	ldrb	r3, [r3, r0]
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d11a      	bne.n	800e084 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOSMessaging.overrun = GetPort(huart);
 800e04e:	0020      	movs	r0, r4
 800e050:	f7fd fee2 	bl	800be18 <GetPort>
 800e054:	4b0d      	ldr	r3, [pc, #52]	; (800e08c <HAL_UART_RxCpltCallback+0x5c>)
 800e056:	7098      	strb	r0, [r3, #2]
		portStatus[GetPort(huart)] = OVERRUN;
 800e058:	0020      	movs	r0, r4
 800e05a:	f7fd fedd 	bl	800be18 <GetPort>
 800e05e:	4b0a      	ldr	r3, [pc, #40]	; (800e088 <HAL_UART_RxCpltCallback+0x58>)
 800e060:	2205      	movs	r2, #5
 800e062:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800e064:	0020      	movs	r0, r4
 800e066:	f7fd fed7 	bl	800be18 <GetPort>
 800e06a:	4b09      	ldr	r3, [pc, #36]	; (800e090 <HAL_UART_RxCpltCallback+0x60>)
 800e06c:	1818      	adds	r0, r3, r0
 800e06e:	3801      	subs	r0, #1
 800e070:	2300      	movs	r3, #0
 800e072:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800e074:	0020      	movs	r0, r4
 800e076:	f7fd fecf 	bl	800be18 <GetPort>
 800e07a:	4b06      	ldr	r3, [pc, #24]	; (800e094 <HAL_UART_RxCpltCallback+0x64>)
 800e07c:	1818      	adds	r0, r3, r0
 800e07e:	3801      	subs	r0, #1
 800e080:	2301      	movs	r3, #1
 800e082:	7003      	strb	r3, [r0, #0]
	}
}
 800e084:	bd10      	pop	{r4, pc}
 800e086:	46c0      	nop			; (mov r8, r8)
 800e088:	200010cc 	.word	0x200010cc
 800e08c:	20006b74 	.word	0x20006b74
 800e090:	20001668 	.word	0x20001668
 800e094:	200012a0 	.word	0x200012a0

0800e098 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800e098:	b672      	cpsid	i
 800e09a:	e7fe      	b.n	800e09a <vApplicationStackOverflowHook+0x2>

0800e09c <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800e09c:	b672      	cpsid	i
 800e09e:	e7fe      	b.n	800e09e <vApplicationMallocFailedHook+0x2>

0800e0a0 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800e0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0a2:	46ce      	mov	lr, r9
 800e0a4:	b500      	push	{lr}
 800e0a6:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800e0a8:	ac05      	add	r4, sp, #20
 800e0aa:	4b34      	ldr	r3, [pc, #208]	; (800e17c <RTC_CalendarConfig+0xdc>)
 800e0ac:	0022      	movs	r2, r4
 800e0ae:	cb43      	ldmia	r3!, {r0, r1, r6}
 800e0b0:	c243      	stmia	r2!, {r0, r1, r6}
 800e0b2:	aa02      	add	r2, sp, #8
 800e0b4:	4b32      	ldr	r3, [pc, #200]	; (800e180 <RTC_CalendarConfig+0xe0>)
 800e0b6:	cb03      	ldmia	r3!, {r0, r1}
 800e0b8:	c203      	stmia	r2!, {r0, r1}
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800e0be:	2015      	movs	r0, #21
 800e0c0:	ab02      	add	r3, sp, #8
 800e0c2:	469c      	mov	ip, r3
 800e0c4:	4460      	add	r0, ip
 800e0c6:	f006 fa62 	bl	801458e <atoi>
 800e0ca:	b2c3      	uxtb	r3, r0
 800e0cc:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800e0ce:	2600      	movs	r6, #0
 800e0d0:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800e0d2:	a806      	add	r0, sp, #24
 800e0d4:	f006 fa5b 	bl	801458e <atoi>
 800e0d8:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800e0da:	70e6      	strb	r6, [r4, #3]
 800e0dc:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800e0de:	4e29      	ldr	r6, [pc, #164]	; (800e184 <RTC_CalendarConfig+0xe4>)
 800e0e0:	e002      	b.n	800e0e8 <RTC_CalendarConfig+0x48>
 800e0e2:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800e0e4:	2c0d      	cmp	r4, #13
 800e0e6:	d009      	beq.n	800e0fc <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800e0e8:	00a3      	lsls	r3, r4, #2
 800e0ea:	3b04      	subs	r3, #4
 800e0ec:	58f1      	ldr	r1, [r6, r3]
 800e0ee:	a805      	add	r0, sp, #20
 800e0f0:	f7f2 f808 	bl	8000104 <strcmp>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	d1f4      	bne.n	800e0e2 <RTC_CalendarConfig+0x42>
			month = i + 1;
 800e0f8:	b2e5      	uxtb	r5, r4
 800e0fa:	e7f2      	b.n	800e0e2 <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800e0fc:	ab02      	add	r3, sp, #8
 800e0fe:	1d98      	adds	r0, r3, #6
 800e100:	f006 fa45 	bl	801458e <atoi>
 800e104:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800e106:	ac05      	add	r4, sp, #20
 800e108:	2600      	movs	r6, #0
 800e10a:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800e10c:	ab02      	add	r3, sp, #8
 800e10e:	1cd8      	adds	r0, r3, #3
 800e110:	f006 fa3d 	bl	801458e <atoi>
 800e114:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800e116:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800e118:	a802      	add	r0, sp, #8
 800e11a:	f006 fa38 	bl	801458e <atoi>
 800e11e:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800e120:	a90d      	add	r1, sp, #52	; 0x34
 800e122:	464b      	mov	r3, r9
 800e124:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800e126:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800e128:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800e12a:	2301      	movs	r3, #1
 800e12c:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e12e:	2200      	movs	r2, #0
 800e130:	4815      	ldr	r0, [pc, #84]	; (800e188 <RTC_CalendarConfig+0xe8>)
 800e132:	f004 ffad 	bl	8013090 <HAL_RTC_SetDate>
		return BOS_ERROR;
 800e136:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e138:	2800      	cmp	r0, #0
 800e13a:	d119      	bne.n	800e170 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800e13c:	a908      	add	r1, sp, #32
 800e13e:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800e140:	9b01      	ldr	r3, [sp, #4]
 800e142:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800e144:	9b00      	ldr	r3, [sp, #0]
 800e146:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800e148:	2300      	movs	r3, #0
 800e14a:	720b      	strb	r3, [r1, #8]
 800e14c:	4a0f      	ldr	r2, [pc, #60]	; (800e18c <RTC_CalendarConfig+0xec>)
 800e14e:	3018      	adds	r0, #24
 800e150:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e152:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800e154:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e156:	2200      	movs	r2, #0
 800e158:	480b      	ldr	r0, [pc, #44]	; (800e188 <RTC_CalendarConfig+0xe8>)
 800e15a:	f004 ff13 	bl	8012f84 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800e15e:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e160:	2800      	cmp	r0, #0
 800e162:	d105      	bne.n	800e170 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800e164:	4a0a      	ldr	r2, [pc, #40]	; (800e190 <RTC_CalendarConfig+0xf0>)
 800e166:	2101      	movs	r1, #1
 800e168:	4807      	ldr	r0, [pc, #28]	; (800e188 <RTC_CalendarConfig+0xe8>)
 800e16a:	f005 f855 	bl	8013218 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800e16e:	2300      	movs	r3, #0
}
 800e170:	0018      	movs	r0, r3
 800e172:	b00e      	add	sp, #56	; 0x38
 800e174:	bc04      	pop	{r2}
 800e176:	4691      	mov	r9, r2
 800e178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e17a:	46c0      	nop			; (mov r8, r8)
 800e17c:	080194a0 	.word	0x080194a0
 800e180:	0801c824 	.word	0x0801c824
 800e184:	20000028 	.word	0x20000028
 800e188:	20006fd0 	.word	0x20006fd0
 800e18c:	20006bf4 	.word	0x20006bf4
 800e190:	000032f2 	.word	0x000032f2

0800e194 <RTC_Init>:
{
 800e194:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800e196:	4a1c      	ldr	r2, [pc, #112]	; (800e208 <RTC_Init+0x74>)
 800e198:	6a11      	ldr	r1, [r2, #32]
 800e19a:	2380      	movs	r3, #128	; 0x80
 800e19c:	021b      	lsls	r3, r3, #8
 800e19e:	430b      	orrs	r3, r1
 800e1a0:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800e1a2:	481a      	ldr	r0, [pc, #104]	; (800e20c <RTC_Init+0x78>)
 800e1a4:	4b1a      	ldr	r3, [pc, #104]	; (800e210 <RTC_Init+0x7c>)
 800e1a6:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800e1ac:	227c      	movs	r2, #124	; 0x7c
 800e1ae:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800e1b0:	4a18      	ldr	r2, [pc, #96]	; (800e214 <RTC_Init+0x80>)
 800e1b2:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e1b4:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e1b6:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e1b8:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800e1ba:	f004 fe85 	bl	8012ec8 <HAL_RTC_Init>
 800e1be:	23ff      	movs	r3, #255	; 0xff
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d11e      	bne.n	800e202 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800e1c4:	2101      	movs	r1, #1
 800e1c6:	4811      	ldr	r0, [pc, #68]	; (800e20c <RTC_Init+0x78>)
 800e1c8:	f005 f82c 	bl	8013224 <HAL_RTCEx_BKUPRead>
 800e1cc:	4b12      	ldr	r3, [pc, #72]	; (800e218 <RTC_Init+0x84>)
 800e1ce:	4298      	cmp	r0, r3
 800e1d0:	d10e      	bne.n	800e1f0 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800e1d2:	4b0d      	ldr	r3, [pc, #52]	; (800e208 <RTC_Init+0x74>)
 800e1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d6:	011b      	lsls	r3, r3, #4
 800e1d8:	d502      	bpl.n	800e1e0 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800e1da:	4b10      	ldr	r3, [pc, #64]	; (800e21c <RTC_Init+0x88>)
 800e1dc:	2200      	movs	r2, #0
 800e1de:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800e1e0:	4b09      	ldr	r3, [pc, #36]	; (800e208 <RTC_Init+0x74>)
 800e1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e4:	015b      	lsls	r3, r3, #5
 800e1e6:	d505      	bpl.n	800e1f4 <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800e1e8:	4b0c      	ldr	r3, [pc, #48]	; (800e21c <RTC_Init+0x88>)
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	701a      	strb	r2, [r3, #0]
 800e1ee:	e001      	b.n	800e1f4 <RTC_Init+0x60>
    RTC_CalendarConfig();
 800e1f0:	f7ff ff56 	bl	800e0a0 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800e1f4:	4a04      	ldr	r2, [pc, #16]	; (800e208 <RTC_Init+0x74>)
 800e1f6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800e1f8:	2380      	movs	r3, #128	; 0x80
 800e1fa:	045b      	lsls	r3, r3, #17
 800e1fc:	430b      	orrs	r3, r1
 800e1fe:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800e200:	2300      	movs	r3, #0
}
 800e202:	0018      	movs	r0, r3
 800e204:	bd10      	pop	{r4, pc}
 800e206:	46c0      	nop			; (mov r8, r8)
 800e208:	40021000 	.word	0x40021000
 800e20c:	20006fd0 	.word	0x20006fd0
 800e210:	40002800 	.word	0x40002800
 800e214:	000007cf 	.word	0x000007cf
 800e218:	000032f2 	.word	0x000032f2
 800e21c:	20001d0c 	.word	0x20001d0c

0800e220 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800e220:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e222:	46c6      	mov	lr, r8
 800e224:	b500      	push	{lr}
 800e226:	b086      	sub	sp, #24
 800e228:	ac0c      	add	r4, sp, #48	; 0x30
 800e22a:	7827      	ldrb	r7, [r4, #0]
 800e22c:	ac0d      	add	r4, sp, #52	; 0x34
 800e22e:	7824      	ldrb	r4, [r4, #0]
 800e230:	46a0      	mov	r8, r4
 800e232:	ac0e      	add	r4, sp, #56	; 0x38
 800e234:	7825      	ldrb	r5, [r4, #0]
 800e236:	ac0f      	add	r4, sp, #60	; 0x3c
 800e238:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800e23a:	ac05      	add	r4, sp, #20
 800e23c:	3230      	adds	r2, #48	; 0x30
 800e23e:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800e240:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800e242:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800e244:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e246:	2200      	movs	r2, #0
 800e248:	0021      	movs	r1, r4
 800e24a:	481f      	ldr	r0, [pc, #124]	; (800e2c8 <BOS_CalendarConfig+0xa8>)
 800e24c:	f004 ff20 	bl	8013090 <HAL_RTC_SetDate>
 800e250:	2800      	cmp	r0, #0
 800e252:	d136      	bne.n	800e2c2 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800e254:	466b      	mov	r3, sp
 800e256:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800e258:	4642      	mov	r2, r8
 800e25a:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800e25c:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800e25e:	2300      	movs	r3, #0
 800e260:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800e262:	2e01      	cmp	r6, #1
 800e264:	d020      	beq.n	800e2a8 <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800e266:	2e02      	cmp	r6, #2
 800e268:	d024      	beq.n	800e2b4 <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800e26a:	4b18      	ldr	r3, [pc, #96]	; (800e2cc <BOS_CalendarConfig+0xac>)
 800e26c:	2218      	movs	r2, #24
 800e26e:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e270:	2200      	movs	r2, #0
 800e272:	4669      	mov	r1, sp
 800e274:	4814      	ldr	r0, [pc, #80]	; (800e2c8 <BOS_CalendarConfig+0xa8>)
 800e276:	f004 fe85 	bl	8012f84 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800e27a:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e27c:	2800      	cmp	r0, #0
 800e27e:	d10e      	bne.n	800e29e <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800e280:	4a12      	ldr	r2, [pc, #72]	; (800e2cc <BOS_CalendarConfig+0xac>)
 800e282:	7b53      	ldrb	r3, [r2, #13]
 800e284:	021b      	lsls	r3, r3, #8
 800e286:	7911      	ldrb	r1, [r2, #4]
 800e288:	4319      	orrs	r1, r3
 800e28a:	308d      	adds	r0, #141	; 0x8d
 800e28c:	0040      	lsls	r0, r0, #1
 800e28e:	f7f9 fbff 	bl	8007a90 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800e292:	4a0f      	ldr	r2, [pc, #60]	; (800e2d0 <BOS_CalendarConfig+0xb0>)
 800e294:	2101      	movs	r1, #1
 800e296:	480c      	ldr	r0, [pc, #48]	; (800e2c8 <BOS_CalendarConfig+0xa8>)
 800e298:	f004 ffbe 	bl	8013218 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800e29c:	2300      	movs	r3, #0
}
 800e29e:	0018      	movs	r0, r3
 800e2a0:	b006      	add	sp, #24
 800e2a2:	bc04      	pop	{r2}
 800e2a4:	4690      	mov	r8, r2
 800e2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800e2a8:	466a      	mov	r2, sp
 800e2aa:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800e2ac:	4b07      	ldr	r3, [pc, #28]	; (800e2cc <BOS_CalendarConfig+0xac>)
 800e2ae:	220c      	movs	r2, #12
 800e2b0:	735a      	strb	r2, [r3, #13]
 800e2b2:	e7dd      	b.n	800e270 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800e2b4:	2340      	movs	r3, #64	; 0x40
 800e2b6:	466a      	mov	r2, sp
 800e2b8:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800e2ba:	4b04      	ldr	r3, [pc, #16]	; (800e2cc <BOS_CalendarConfig+0xac>)
 800e2bc:	220c      	movs	r2, #12
 800e2be:	735a      	strb	r2, [r3, #13]
 800e2c0:	e7d6      	b.n	800e270 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800e2c2:	23ff      	movs	r3, #255	; 0xff
 800e2c4:	e7eb      	b.n	800e29e <BOS_CalendarConfig+0x7e>
 800e2c6:	46c0      	nop			; (mov r8, r8)
 800e2c8:	20006fd0 	.word	0x20006fd0
 800e2cc:	20006bf4 	.word	0x20006bf4
 800e2d0:	000032f2 	.word	0x000032f2

0800e2d4 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800e2d4:	b530      	push	{r4, r5, lr}
 800e2d6:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800e2d8:	4d16      	ldr	r5, [pc, #88]	; (800e334 <GetTimeDate+0x60>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	a902      	add	r1, sp, #8
 800e2de:	0028      	movs	r0, r5
 800e2e0:	f004 ff52 	bl	8013188 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800e2e4:	ac07      	add	r4, sp, #28
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	0021      	movs	r1, r4
 800e2ea:	0028      	movs	r0, r5
 800e2ec:	f004 ff72 	bl	80131d4 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800e2f0:	4b11      	ldr	r3, [pc, #68]	; (800e338 <GetTimeDate+0x64>)
 800e2f2:	aa02      	add	r2, sp, #8
 800e2f4:	7a12      	ldrb	r2, [r2, #8]
 800e2f6:	09d2      	lsrs	r2, r2, #7
 800e2f8:	3201      	adds	r2, #1
 800e2fa:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800e2fc:	9a03      	ldr	r2, [sp, #12]
 800e2fe:	9201      	str	r2, [sp, #4]
 800e300:	0852      	lsrs	r2, r2, #1
 800e302:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800e304:	aa02      	add	r2, sp, #8
 800e306:	7892      	ldrb	r2, [r2, #2]
 800e308:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800e30a:	aa02      	add	r2, sp, #8
 800e30c:	7852      	ldrb	r2, [r2, #1]
 800e30e:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800e310:	aa02      	add	r2, sp, #8
 800e312:	7812      	ldrb	r2, [r2, #0]
 800e314:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800e316:	78a2      	ldrb	r2, [r4, #2]
 800e318:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800e31a:	7862      	ldrb	r2, [r4, #1]
 800e31c:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800e31e:	7822      	ldrb	r2, [r4, #0]
 800e320:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800e322:	78e2      	ldrb	r2, [r4, #3]
 800e324:	21fa      	movs	r1, #250	; 0xfa
 800e326:	00c9      	lsls	r1, r1, #3
 800e328:	468c      	mov	ip, r1
 800e32a:	4462      	add	r2, ip
 800e32c:	831a      	strh	r2, [r3, #24]
}
 800e32e:	b009      	add	sp, #36	; 0x24
 800e330:	bd30      	pop	{r4, r5, pc}
 800e332:	46c0      	nop			; (mov r8, r8)
 800e334:	20006fd0 	.word	0x20006fd0
 800e338:	20006bf4 	.word	0x20006bf4

0800e33c <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800e33c:	b530      	push	{r4, r5, lr}
 800e33e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800e340:	4a12      	ldr	r2, [pc, #72]	; (800e38c <TIM_USEC_Init+0x50>)
 800e342:	69d1      	ldr	r1, [r2, #28]
 800e344:	2080      	movs	r0, #128	; 0x80
 800e346:	0040      	lsls	r0, r0, #1
 800e348:	4301      	orrs	r1, r0
 800e34a:	61d1      	str	r1, [r2, #28]
 800e34c:	69d3      	ldr	r3, [r2, #28]
 800e34e:	4003      	ands	r3, r0
 800e350:	9301      	str	r3, [sp, #4]
 800e352:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800e354:	4c0e      	ldr	r4, [pc, #56]	; (800e390 <TIM_USEC_Init+0x54>)
 800e356:	4b0f      	ldr	r3, [pc, #60]	; (800e394 <TIM_USEC_Init+0x58>)
 800e358:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800e35a:	f004 fccd 	bl	8012cf8 <HAL_RCC_GetPCLK1Freq>
 800e35e:	490e      	ldr	r1, [pc, #56]	; (800e398 <TIM_USEC_Init+0x5c>)
 800e360:	f7f1 fef6 	bl	8000150 <__udivsi3>
 800e364:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e366:	2500      	movs	r5, #0
 800e368:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800e36a:	4b0c      	ldr	r3, [pc, #48]	; (800e39c <TIM_USEC_Init+0x60>)
 800e36c:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800e36e:	0020      	movs	r0, r4
 800e370:	f005 f9d0 	bl	8013714 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e374:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e376:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800e378:	a902      	add	r1, sp, #8
 800e37a:	0020      	movs	r0, r4
 800e37c:	f005 fb28 	bl	80139d0 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800e380:	0020      	movs	r0, r4
 800e382:	f005 f843 	bl	801340c <HAL_TIM_Base_Start>
}
 800e386:	b005      	add	sp, #20
 800e388:	bd30      	pop	{r4, r5, pc}
 800e38a:	46c0      	nop			; (mov r8, r8)
 800e38c:	40021000 	.word	0x40021000
 800e390:	2000702c 	.word	0x2000702c
 800e394:	40002000 	.word	0x40002000
 800e398:	000f4240 	.word	0x000f4240
 800e39c:	0000ffff 	.word	0x0000ffff

0800e3a0 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800e3a0:	b530      	push	{r4, r5, lr}
 800e3a2:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800e3a4:	4a12      	ldr	r2, [pc, #72]	; (800e3f0 <TIM_MSEC_Init+0x50>)
 800e3a6:	6991      	ldr	r1, [r2, #24]
 800e3a8:	2080      	movs	r0, #128	; 0x80
 800e3aa:	0240      	lsls	r0, r0, #9
 800e3ac:	4301      	orrs	r1, r0
 800e3ae:	6191      	str	r1, [r2, #24]
 800e3b0:	6993      	ldr	r3, [r2, #24]
 800e3b2:	4003      	ands	r3, r0
 800e3b4:	9301      	str	r3, [sp, #4]
 800e3b6:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800e3b8:	4c0e      	ldr	r4, [pc, #56]	; (800e3f4 <TIM_MSEC_Init+0x54>)
 800e3ba:	4b0f      	ldr	r3, [pc, #60]	; (800e3f8 <TIM_MSEC_Init+0x58>)
 800e3bc:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800e3be:	f004 fc9b 	bl	8012cf8 <HAL_RCC_GetPCLK1Freq>
 800e3c2:	21fa      	movs	r1, #250	; 0xfa
 800e3c4:	0089      	lsls	r1, r1, #2
 800e3c6:	f7f1 fec3 	bl	8000150 <__udivsi3>
 800e3ca:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e3cc:	2500      	movs	r5, #0
 800e3ce:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800e3d0:	4b0a      	ldr	r3, [pc, #40]	; (800e3fc <TIM_MSEC_Init+0x5c>)
 800e3d2:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800e3d4:	0020      	movs	r0, r4
 800e3d6:	f005 f99d 	bl	8013714 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e3da:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e3dc:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800e3de:	a902      	add	r1, sp, #8
 800e3e0:	0020      	movs	r0, r4
 800e3e2:	f005 faf5 	bl	80139d0 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800e3e6:	0020      	movs	r0, r4
 800e3e8:	f005 f810 	bl	801340c <HAL_TIM_Base_Start>
}
 800e3ec:	b005      	add	sp, #20
 800e3ee:	bd30      	pop	{r4, r5, pc}
 800e3f0:	40021000 	.word	0x40021000
 800e3f4:	20006ff0 	.word	0x20006ff0
 800e3f8:	40014000 	.word	0x40014000
 800e3fc:	0000ffff 	.word	0x0000ffff

0800e400 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800e400:	b510      	push	{r4, lr}
 800e402:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800e404:	f002 f9b4 	bl	8010770 <vPortEnterCritical>
	
	if (Delay)
 800e408:	2c00      	cmp	r4, #0
 800e40a:	d006      	beq.n	800e41a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800e40c:	4b04      	ldr	r3, [pc, #16]	; (800e420 <StartMicroDelay+0x20>)
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800e412:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e414:	1a5b      	subs	r3, r3, r1
 800e416:	42a3      	cmp	r3, r4
 800e418:	d9fb      	bls.n	800e412 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800e41a:	f002 f9b5 	bl	8010788 <vPortExitCritical>
}
 800e41e:	bd10      	pop	{r4, pc}
 800e420:	2000702c 	.word	0x2000702c

0800e424 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800e424:	b510      	push	{r4, lr}
 800e426:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800e428:	f002 f9a2 	bl	8010770 <vPortEnterCritical>
	
	if (Delay)
 800e42c:	2c00      	cmp	r4, #0
 800e42e:	d006      	beq.n	800e43e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800e430:	4b04      	ldr	r3, [pc, #16]	; (800e444 <StartMilliDelay+0x20>)
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800e436:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e438:	1a5b      	subs	r3, r3, r1
 800e43a:	42a3      	cmp	r3, r4
 800e43c:	d9fb      	bls.n	800e436 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800e43e:	f002 f9a3 	bl	8010788 <vPortExitCritical>
}
 800e442:	bd10      	pop	{r4, pc}
 800e444:	20006ff0 	.word	0x20006ff0

0800e448 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800e448:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800e44a:	4809      	ldr	r0, [pc, #36]	; (800e470 <MX_USART1_UART_Init+0x28>)
 800e44c:	4b09      	ldr	r3, [pc, #36]	; (800e474 <MX_USART1_UART_Init+0x2c>)
 800e44e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e450:	23e1      	movs	r3, #225	; 0xe1
 800e452:	031b      	lsls	r3, r3, #12
 800e454:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e456:	2300      	movs	r3, #0
 800e458:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e45a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e45c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e45e:	220c      	movs	r2, #12
 800e460:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e462:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e464:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e466:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e468:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800e46a:	f005 ff31 	bl	80142d0 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800e46e:	bd10      	pop	{r4, pc}
 800e470:	20006e40 	.word	0x20006e40
 800e474:	40013800 	.word	0x40013800

0800e478 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800e478:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800e47a:	4809      	ldr	r0, [pc, #36]	; (800e4a0 <MX_USART2_UART_Init+0x28>)
 800e47c:	4b09      	ldr	r3, [pc, #36]	; (800e4a4 <MX_USART2_UART_Init+0x2c>)
 800e47e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e480:	23e1      	movs	r3, #225	; 0xe1
 800e482:	031b      	lsls	r3, r3, #12
 800e484:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e486:	2300      	movs	r3, #0
 800e488:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800e48a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800e48c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800e48e:	220c      	movs	r2, #12
 800e490:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e492:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e494:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e496:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e498:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800e49a:	f005 ff19 	bl	80142d0 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800e49e:	bd10      	pop	{r4, pc}
 800e4a0:	20006f38 	.word	0x20006f38
 800e4a4:	40004400 	.word	0x40004400

0800e4a8 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800e4a8:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800e4aa:	4809      	ldr	r0, [pc, #36]	; (800e4d0 <MX_USART3_UART_Init+0x28>)
 800e4ac:	4b09      	ldr	r3, [pc, #36]	; (800e4d4 <MX_USART3_UART_Init+0x2c>)
 800e4ae:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e4b0:	23e1      	movs	r3, #225	; 0xe1
 800e4b2:	031b      	lsls	r3, r3, #12
 800e4b4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e4ba:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e4bc:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e4be:	220c      	movs	r2, #12
 800e4c0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e4c2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e4c4:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e4c6:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e4c8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800e4ca:	f005 ff01 	bl	80142d0 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800e4ce:	bd10      	pop	{r4, pc}
 800e4d0:	20006d18 	.word	0x20006d18
 800e4d4:	40004800 	.word	0x40004800

0800e4d8 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800e4d8:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800e4da:	4809      	ldr	r0, [pc, #36]	; (800e500 <MX_USART5_UART_Init+0x28>)
 800e4dc:	4b09      	ldr	r3, [pc, #36]	; (800e504 <MX_USART5_UART_Init+0x2c>)
 800e4de:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e4e0:	23e1      	movs	r3, #225	; 0xe1
 800e4e2:	031b      	lsls	r3, r3, #12
 800e4e4:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800e4ea:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800e4ec:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800e4ee:	220c      	movs	r2, #12
 800e4f0:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e4f2:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800e4f4:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e4f6:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e4f8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800e4fa:	f005 fee9 	bl	80142d0 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800e4fe:	bd10      	pop	{r4, pc}
 800e500:	20006dd0 	.word	0x20006dd0
 800e504:	40005000 	.word	0x40005000

0800e508 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800e508:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800e50a:	4809      	ldr	r0, [pc, #36]	; (800e530 <MX_USART6_UART_Init+0x28>)
 800e50c:	4b09      	ldr	r3, [pc, #36]	; (800e534 <MX_USART6_UART_Init+0x2c>)
 800e50e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e510:	23e1      	movs	r3, #225	; 0xe1
 800e512:	031b      	lsls	r3, r3, #12
 800e514:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800e516:	2300      	movs	r3, #0
 800e518:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800e51a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800e51c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800e51e:	220c      	movs	r2, #12
 800e520:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e522:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800e524:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e526:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e528:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800e52a:	f005 fed1 	bl	80142d0 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800e52e:	bd10      	pop	{r4, pc}
 800e530:	20006ec0 	.word	0x20006ec0
 800e534:	40011400 	.word	0x40011400

0800e538 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e53a:	46ce      	mov	lr, r9
 800e53c:	b500      	push	{lr}
 800e53e:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800e540:	6803      	ldr	r3, [r0, #0]
 800e542:	4a7b      	ldr	r2, [pc, #492]	; (800e730 <HAL_UART_MspInit+0x1f8>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d014      	beq.n	800e572 <HAL_UART_MspInit+0x3a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800e548:	4a7a      	ldr	r2, [pc, #488]	; (800e734 <HAL_UART_MspInit+0x1fc>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d03f      	beq.n	800e5ce <HAL_UART_MspInit+0x96>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800e54e:	4a7a      	ldr	r2, [pc, #488]	; (800e738 <HAL_UART_MspInit+0x200>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d068      	beq.n	800e626 <HAL_UART_MspInit+0xee>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800e554:	4a79      	ldr	r2, [pc, #484]	; (800e73c <HAL_UART_MspInit+0x204>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d007      	beq.n	800e56a <HAL_UART_MspInit+0x32>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800e55a:	4a79      	ldr	r2, [pc, #484]	; (800e740 <HAL_UART_MspInit+0x208>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d100      	bne.n	800e562 <HAL_UART_MspInit+0x2a>
 800e560:	e08e      	b.n	800e680 <HAL_UART_MspInit+0x148>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800e562:	4a78      	ldr	r2, [pc, #480]	; (800e744 <HAL_UART_MspInit+0x20c>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d100      	bne.n	800e56a <HAL_UART_MspInit+0x32>
 800e568:	e0b5      	b.n	800e6d6 <HAL_UART_MspInit+0x19e>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800e56a:	b00a      	add	sp, #40	; 0x28
 800e56c:	bc04      	pop	{r2}
 800e56e:	4691      	mov	r9, r2
 800e570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800e572:	4a75      	ldr	r2, [pc, #468]	; (800e748 <HAL_UART_MspInit+0x210>)
 800e574:	6991      	ldr	r1, [r2, #24]
 800e576:	2080      	movs	r0, #128	; 0x80
 800e578:	01c0      	lsls	r0, r0, #7
 800e57a:	4301      	orrs	r1, r0
 800e57c:	6191      	str	r1, [r2, #24]
 800e57e:	6993      	ldr	r3, [r2, #24]
 800e580:	4003      	ands	r3, r0
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800e586:	2380      	movs	r3, #128	; 0x80
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e58c:	2702      	movs	r7, #2
 800e58e:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e590:	2401      	movs	r4, #1
 800e592:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e594:	2603      	movs	r6, #3
 800e596:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800e598:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800e59a:	2590      	movs	r5, #144	; 0x90
 800e59c:	05ed      	lsls	r5, r5, #23
 800e59e:	a905      	add	r1, sp, #20
 800e5a0:	0028      	movs	r0, r5
 800e5a2:	f003 fdbf 	bl	8012124 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800e5a6:	2380      	movs	r3, #128	; 0x80
 800e5a8:	00db      	lsls	r3, r3, #3
 800e5aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5ac:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e5ae:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e5b0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800e5b2:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800e5b4:	a905      	add	r1, sp, #20
 800e5b6:	0028      	movs	r0, r5
 800e5b8:	f003 fdb4 	bl	8012124 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800e5bc:	2200      	movs	r2, #0
 800e5be:	2101      	movs	r1, #1
 800e5c0:	201b      	movs	r0, #27
 800e5c2:	f002 fde5 	bl	8011190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e5c6:	201b      	movs	r0, #27
 800e5c8:	f002 fe16 	bl	80111f8 <HAL_NVIC_EnableIRQ>
 800e5cc:	e7cd      	b.n	800e56a <HAL_UART_MspInit+0x32>
    __USART2_CLK_ENABLE();
 800e5ce:	4a5e      	ldr	r2, [pc, #376]	; (800e748 <HAL_UART_MspInit+0x210>)
 800e5d0:	69d1      	ldr	r1, [r2, #28]
 800e5d2:	2080      	movs	r0, #128	; 0x80
 800e5d4:	0280      	lsls	r0, r0, #10
 800e5d6:	4301      	orrs	r1, r0
 800e5d8:	61d1      	str	r1, [r2, #28]
 800e5da:	69d3      	ldr	r3, [r2, #28]
 800e5dc:	4003      	ands	r3, r0
 800e5de:	9301      	str	r3, [sp, #4]
 800e5e0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800e5e2:	2304      	movs	r3, #4
 800e5e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5e6:	2702      	movs	r7, #2
 800e5e8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e5ea:	2401      	movs	r4, #1
 800e5ec:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e5ee:	2603      	movs	r6, #3
 800e5f0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800e5f2:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800e5f4:	2590      	movs	r5, #144	; 0x90
 800e5f6:	05ed      	lsls	r5, r5, #23
 800e5f8:	a905      	add	r1, sp, #20
 800e5fa:	0028      	movs	r0, r5
 800e5fc:	f003 fd92 	bl	8012124 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800e600:	2308      	movs	r3, #8
 800e602:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e604:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e606:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e608:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800e60a:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800e60c:	a905      	add	r1, sp, #20
 800e60e:	0028      	movs	r0, r5
 800e610:	f003 fd88 	bl	8012124 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800e614:	2200      	movs	r2, #0
 800e616:	2101      	movs	r1, #1
 800e618:	201c      	movs	r0, #28
 800e61a:	f002 fdb9 	bl	8011190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e61e:	201c      	movs	r0, #28
 800e620:	f002 fdea 	bl	80111f8 <HAL_NVIC_EnableIRQ>
 800e624:	e7a1      	b.n	800e56a <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800e626:	4a48      	ldr	r2, [pc, #288]	; (800e748 <HAL_UART_MspInit+0x210>)
 800e628:	69d1      	ldr	r1, [r2, #28]
 800e62a:	2080      	movs	r0, #128	; 0x80
 800e62c:	02c0      	lsls	r0, r0, #11
 800e62e:	4301      	orrs	r1, r0
 800e630:	61d1      	str	r1, [r2, #28]
 800e632:	69d3      	ldr	r3, [r2, #28]
 800e634:	4003      	ands	r3, r0
 800e636:	9302      	str	r3, [sp, #8]
 800e638:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800e63a:	2380      	movs	r3, #128	; 0x80
 800e63c:	00db      	lsls	r3, r3, #3
 800e63e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e640:	2402      	movs	r4, #2
 800e642:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e644:	2701      	movs	r7, #1
 800e646:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e648:	2603      	movs	r6, #3
 800e64a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800e64c:	2504      	movs	r5, #4
 800e64e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800e650:	a905      	add	r1, sp, #20
 800e652:	483e      	ldr	r0, [pc, #248]	; (800e74c <HAL_UART_MspInit+0x214>)
 800e654:	f003 fd66 	bl	8012124 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800e658:	2380      	movs	r3, #128	; 0x80
 800e65a:	011b      	lsls	r3, r3, #4
 800e65c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e65e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e660:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e662:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;
 800e664:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800e666:	a905      	add	r1, sp, #20
 800e668:	4838      	ldr	r0, [pc, #224]	; (800e74c <HAL_UART_MspInit+0x214>)
 800e66a:	f003 fd5b 	bl	8012124 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e66e:	2200      	movs	r2, #0
 800e670:	2101      	movs	r1, #1
 800e672:	201d      	movs	r0, #29
 800e674:	f002 fd8c 	bl	8011190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e678:	201d      	movs	r0, #29
 800e67a:	f002 fdbd 	bl	80111f8 <HAL_NVIC_EnableIRQ>
 800e67e:	e774      	b.n	800e56a <HAL_UART_MspInit+0x32>
    __USART5_CLK_ENABLE();
 800e680:	4a31      	ldr	r2, [pc, #196]	; (800e748 <HAL_UART_MspInit+0x210>)
 800e682:	69d1      	ldr	r1, [r2, #28]
 800e684:	2080      	movs	r0, #128	; 0x80
 800e686:	0340      	lsls	r0, r0, #13
 800e688:	4301      	orrs	r1, r0
 800e68a:	61d1      	str	r1, [r2, #28]
 800e68c:	69d3      	ldr	r3, [r2, #28]
 800e68e:	4003      	ands	r3, r0
 800e690:	9303      	str	r3, [sp, #12]
 800e692:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800e694:	2308      	movs	r3, #8
 800e696:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e698:	2402      	movs	r4, #2
 800e69a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e69c:	2701      	movs	r7, #1
 800e69e:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e6a0:	2603      	movs	r6, #3
 800e6a2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800e6a4:	2504      	movs	r5, #4
 800e6a6:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800e6a8:	a905      	add	r1, sp, #20
 800e6aa:	4828      	ldr	r0, [pc, #160]	; (800e74c <HAL_UART_MspInit+0x214>)
 800e6ac:	f003 fd3a 	bl	8012124 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800e6b0:	2310      	movs	r3, #16
 800e6b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6b4:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e6b6:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e6b8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800e6ba:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800e6bc:	a905      	add	r1, sp, #20
 800e6be:	4823      	ldr	r0, [pc, #140]	; (800e74c <HAL_UART_MspInit+0x214>)
 800e6c0:	f003 fd30 	bl	8012124 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	2101      	movs	r1, #1
 800e6c8:	201d      	movs	r0, #29
 800e6ca:	f002 fd61 	bl	8011190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e6ce:	201d      	movs	r0, #29
 800e6d0:	f002 fd92 	bl	80111f8 <HAL_NVIC_EnableIRQ>
 800e6d4:	e749      	b.n	800e56a <HAL_UART_MspInit+0x32>
    __USART6_CLK_ENABLE();
 800e6d6:	4b1c      	ldr	r3, [pc, #112]	; (800e748 <HAL_UART_MspInit+0x210>)
 800e6d8:	699a      	ldr	r2, [r3, #24]
 800e6da:	2420      	movs	r4, #32
 800e6dc:	4322      	orrs	r2, r4
 800e6de:	619a      	str	r2, [r3, #24]
 800e6e0:	699b      	ldr	r3, [r3, #24]
 800e6e2:	4023      	ands	r3, r4
 800e6e4:	9304      	str	r3, [sp, #16]
 800e6e6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800e6e8:	2310      	movs	r3, #16
 800e6ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6ec:	3b0e      	subs	r3, #14
 800e6ee:	4699      	mov	r9, r3
 800e6f0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e6f2:	2501      	movs	r5, #1
 800e6f4:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e6f6:	2703      	movs	r7, #3
 800e6f8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800e6fa:	2605      	movs	r6, #5
 800e6fc:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800e6fe:	a905      	add	r1, sp, #20
 800e700:	2090      	movs	r0, #144	; 0x90
 800e702:	05c0      	lsls	r0, r0, #23
 800e704:	f003 fd0e 	bl	8012124 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800e708:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e70a:	464b      	mov	r3, r9
 800e70c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e70e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e710:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800e712:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800e714:	a905      	add	r1, sp, #20
 800e716:	2090      	movs	r0, #144	; 0x90
 800e718:	05c0      	lsls	r0, r0, #23
 800e71a:	f003 fd03 	bl	8012124 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e71e:	2200      	movs	r2, #0
 800e720:	2101      	movs	r1, #1
 800e722:	201d      	movs	r0, #29
 800e724:	f002 fd34 	bl	8011190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e728:	201d      	movs	r0, #29
 800e72a:	f002 fd65 	bl	80111f8 <HAL_NVIC_EnableIRQ>
}
 800e72e:	e71c      	b.n	800e56a <HAL_UART_MspInit+0x32>
 800e730:	40013800 	.word	0x40013800
 800e734:	40004400 	.word	0x40004400
 800e738:	40004800 	.word	0x40004800
 800e73c:	40004c00 	.word	0x40004c00
 800e740:	40005000 	.word	0x40005000
 800e744:	40011400 	.word	0x40011400
 800e748:	40021000 	.word	0x40021000
 800e74c:	48000400 	.word	0x48000400

0800e750 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800e750:	2805      	cmp	r0, #5
 800e752:	d80b      	bhi.n	800e76c <GetUart+0x1c>
 800e754:	0080      	lsls	r0, r0, #2
 800e756:	4b07      	ldr	r3, [pc, #28]	; (800e774 <GetUart+0x24>)
 800e758:	581b      	ldr	r3, [r3, r0]
 800e75a:	469f      	mov	pc, r3
		case P1 : 
			return P1uart;	
	#endif
	#ifdef _P2
		case P2 :
			return P2uart;
 800e75c:	4806      	ldr	r0, [pc, #24]	; (800e778 <GetUart+0x28>)
 800e75e:	e008      	b.n	800e772 <GetUart+0x22>
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800e760:	4806      	ldr	r0, [pc, #24]	; (800e77c <GetUart+0x2c>)
 800e762:	e006      	b.n	800e772 <GetUart+0x22>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800e764:	4806      	ldr	r0, [pc, #24]	; (800e780 <GetUart+0x30>)
 800e766:	e004      	b.n	800e772 <GetUart+0x22>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800e768:	4806      	ldr	r0, [pc, #24]	; (800e784 <GetUart+0x34>)
 800e76a:	e002      	b.n	800e772 <GetUart+0x22>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800e76c:	2000      	movs	r0, #0
 800e76e:	e000      	b.n	800e772 <GetUart+0x22>
			return P1uart;	
 800e770:	4805      	ldr	r0, [pc, #20]	; (800e788 <GetUart+0x38>)
	}		
}
 800e772:	4770      	bx	lr
 800e774:	0801c830 	.word	0x0801c830
 800e778:	20006f38 	.word	0x20006f38
 800e77c:	20006ec0 	.word	0x20006ec0
 800e780:	20006d18 	.word	0x20006d18
 800e784:	20006e40 	.word	0x20006e40
 800e788:	20006dd0 	.word	0x20006dd0

0800e78c <writePxMutex>:
{
 800e78c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e78e:	b083      	sub	sp, #12
 800e790:	0005      	movs	r5, r0
 800e792:	9100      	str	r1, [sp, #0]
 800e794:	0017      	movs	r7, r2
 800e796:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800e798:	f7ff ffda 	bl	800e750 <GetUart>
 800e79c:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800e79e:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	d016      	beq.n	800e7d2 <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e7a4:	00ab      	lsls	r3, r5, #2
 800e7a6:	4a0c      	ldr	r2, [pc, #48]	; (800e7d8 <writePxMutex+0x4c>)
 800e7a8:	5898      	ldr	r0, [r3, r2]
 800e7aa:	9901      	ldr	r1, [sp, #4]
 800e7ac:	f000 f93a 	bl	800ea24 <osSemaphoreWait>
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	d10e      	bne.n	800e7d2 <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800e7b4:	9b08      	ldr	r3, [sp, #32]
 800e7b6:	003a      	movs	r2, r7
 800e7b8:	9900      	ldr	r1, [sp, #0]
 800e7ba:	0020      	movs	r0, r4
 800e7bc:	f005 fce2 	bl	8014184 <HAL_UART_Transmit>
 800e7c0:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800e7c2:	d001      	beq.n	800e7c8 <writePxMutex+0x3c>
 800e7c4:	2803      	cmp	r0, #3
 800e7c6:	d1f5      	bne.n	800e7b4 <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800e7c8:	00ad      	lsls	r5, r5, #2
 800e7ca:	4b03      	ldr	r3, [pc, #12]	; (800e7d8 <writePxMutex+0x4c>)
 800e7cc:	58e8      	ldr	r0, [r5, r3]
 800e7ce:	f000 f955 	bl	800ea7c <osSemaphoreRelease>
}
 800e7d2:	0030      	movs	r0, r6
 800e7d4:	b003      	add	sp, #12
 800e7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7d8:	20006c74 	.word	0x20006c74

0800e7dc <writePxITMutex>:
{
 800e7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	0004      	movs	r4, r0
 800e7e2:	9101      	str	r1, [sp, #4]
 800e7e4:	0017      	movs	r7, r2
 800e7e6:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800e7e8:	f7ff ffb2 	bl	800e750 <GetUart>
 800e7ec:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e7ee:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	d008      	beq.n	800e806 <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e7f4:	00a4      	lsls	r4, r4, #2
 800e7f6:	4b09      	ldr	r3, [pc, #36]	; (800e81c <writePxITMutex+0x40>)
 800e7f8:	58e0      	ldr	r0, [r4, r3]
 800e7fa:	0029      	movs	r1, r5
 800e7fc:	f000 f912 	bl	800ea24 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e800:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e802:	2800      	cmp	r0, #0
 800e804:	d002      	beq.n	800e80c <writePxITMutex+0x30>
}
 800e806:	0018      	movs	r0, r3
 800e808:	b003      	add	sp, #12
 800e80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800e80c:	003a      	movs	r2, r7
 800e80e:	9901      	ldr	r1, [sp, #4]
 800e810:	0030      	movs	r0, r6
 800e812:	f005 f921 	bl	8013a58 <HAL_UART_Transmit_IT>
 800e816:	0003      	movs	r3, r0
 800e818:	e7f5      	b.n	800e806 <writePxITMutex+0x2a>
 800e81a:	46c0      	nop			; (mov r8, r8)
 800e81c:	20006c74 	.word	0x20006c74

0800e820 <writePxDMAMutex>:
{
 800e820:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e822:	b083      	sub	sp, #12
 800e824:	0004      	movs	r4, r0
 800e826:	000f      	movs	r7, r1
 800e828:	9201      	str	r2, [sp, #4]
 800e82a:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800e82c:	f7ff ff90 	bl	800e750 <GetUart>
 800e830:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e832:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800e834:	2800      	cmp	r0, #0
 800e836:	d008      	beq.n	800e84a <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e838:	00a4      	lsls	r4, r4, #2
 800e83a:	4b0a      	ldr	r3, [pc, #40]	; (800e864 <writePxDMAMutex+0x44>)
 800e83c:	58e0      	ldr	r0, [r4, r3]
 800e83e:	0031      	movs	r1, r6
 800e840:	f000 f8f0 	bl	800ea24 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e844:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e846:	2800      	cmp	r0, #0
 800e848:	d002      	beq.n	800e850 <writePxDMAMutex+0x30>
}
 800e84a:	0018      	movs	r0, r3
 800e84c:	b003      	add	sp, #12
 800e84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800e850:	0028      	movs	r0, r5
 800e852:	f7ff f997 	bl	800db84 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800e856:	9a01      	ldr	r2, [sp, #4]
 800e858:	0039      	movs	r1, r7
 800e85a:	0028      	movs	r0, r5
 800e85c:	f005 f9a8 	bl	8013bb0 <HAL_UART_Transmit_DMA>
 800e860:	0003      	movs	r3, r0
 800e862:	e7f2      	b.n	800e84a <writePxDMAMutex+0x2a>
 800e864:	20006c74 	.word	0x20006c74

0800e868 <UpdateBaudrate>:
{
 800e868:	b510      	push	{r4, lr}
 800e86a:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800e86c:	f7ff ff70 	bl	800e750 <GetUart>
	huart->Init.BaudRate = baudrate;
 800e870:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800e872:	f005 fd2d 	bl	80142d0 <HAL_UART_Init>
}
 800e876:	2000      	movs	r0, #0
 800e878:	bd10      	pop	{r4, pc}
	...

0800e87c <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800e87c:	b570      	push	{r4, r5, r6, lr}
 800e87e:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800e880:	d003      	beq.n	800e88a <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800e882:	2901      	cmp	r1, #1
 800e884:	d002      	beq.n	800e88c <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800e886:	2900      	cmp	r1, #0
 800e888:	d016      	beq.n	800e8b8 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800e88a:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e88c:	f7fd fac4 	bl	800be18 <GetPort>
 800e890:	4b14      	ldr	r3, [pc, #80]	; (800e8e4 <SwapUartPins+0x68>)
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	3b01      	subs	r3, #1
 800e896:	4d14      	ldr	r5, [pc, #80]	; (800e8e8 <SwapUartPins+0x6c>)
 800e898:	005b      	lsls	r3, r3, #1
 800e89a:	3801      	subs	r0, #1
 800e89c:	2180      	movs	r1, #128	; 0x80
 800e89e:	0209      	lsls	r1, r1, #8
 800e8a0:	000a      	movs	r2, r1
 800e8a2:	4102      	asrs	r2, r0
 800e8a4:	5b58      	ldrh	r0, [r3, r5]
 800e8a6:	4302      	orrs	r2, r0
 800e8a8:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e8aa:	2308      	movs	r3, #8
 800e8ac:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e8ae:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800e8b0:	0020      	movs	r0, r4
 800e8b2:	f005 fd0d 	bl	80142d0 <HAL_UART_Init>
 800e8b6:	e7e8      	b.n	800e88a <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e8b8:	f7fd faae 	bl	800be18 <GetPort>
 800e8bc:	4b09      	ldr	r3, [pc, #36]	; (800e8e4 <SwapUartPins+0x68>)
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	3b01      	subs	r3, #1
 800e8c2:	4d09      	ldr	r5, [pc, #36]	; (800e8e8 <SwapUartPins+0x6c>)
 800e8c4:	005b      	lsls	r3, r3, #1
 800e8c6:	3801      	subs	r0, #1
 800e8c8:	2180      	movs	r1, #128	; 0x80
 800e8ca:	0209      	lsls	r1, r1, #8
 800e8cc:	4101      	asrs	r1, r0
 800e8ce:	5b5a      	ldrh	r2, [r3, r5]
 800e8d0:	438a      	bics	r2, r1
 800e8d2:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e8d4:	2308      	movs	r3, #8
 800e8d6:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800e8dc:	0020      	movs	r0, r4
 800e8de:	f005 fcf7 	bl	80142d0 <HAL_UART_Init>
}
 800e8e2:	e7d2      	b.n	800e88a <SwapUartPins+0xe>
 800e8e4:	20001052 	.word	0x20001052
 800e8e8:	20007068 	.word	0x20007068

0800e8ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e8ec:	4816      	ldr	r0, [pc, #88]	; (800e948 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e8ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e8f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e8f2:	e003      	b.n	800e8fc <LoopCopyDataInit>

0800e8f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e8f4:	4b15      	ldr	r3, [pc, #84]	; (800e94c <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e8f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e8f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e8fa:	3104      	adds	r1, #4

0800e8fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e8fc:	4814      	ldr	r0, [pc, #80]	; (800e950 <LoopForever+0xc>)
  ldr r3, =_edata
 800e8fe:	4b15      	ldr	r3, [pc, #84]	; (800e954 <LoopForever+0x10>)
  adds r2, r0, r1
 800e900:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e902:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e904:	d3f6      	bcc.n	800e8f4 <CopyDataInit>
  ldr r2, =_sbss
 800e906:	4a14      	ldr	r2, [pc, #80]	; (800e958 <LoopForever+0x14>)
  b LoopFillZerobss
 800e908:	e002      	b.n	800e910 <LoopFillZerobss>

0800e90a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e90a:	2300      	movs	r3, #0
  str  r3, [r2]
 800e90c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e90e:	3204      	adds	r2, #4

0800e910 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e910:	4b12      	ldr	r3, [pc, #72]	; (800e95c <LoopForever+0x18>)
  cmp r2, r3
 800e912:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e914:	d3f9      	bcc.n	800e90a <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e916:	4812      	ldr	r0, [pc, #72]	; (800e960 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e918:	4912      	ldr	r1, [pc, #72]	; (800e964 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e91a:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e91c:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e91e:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e920:	d005      	beq.n	800e92e <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e922:	f000 f82b 	bl	800e97c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e926:	f005 fe3f 	bl	80145a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e92a:	f005 fe26 	bl	801457a <main>

0800e92e <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e92e:	480e      	ldr	r0, [pc, #56]	; (800e968 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e930:	490e      	ldr	r1, [pc, #56]	; (800e96c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e932:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e934:	480e      	ldr	r0, [pc, #56]	; (800e970 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e936:	490d      	ldr	r1, [pc, #52]	; (800e96c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e938:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e93a:	480e      	ldr	r0, [pc, #56]	; (800e974 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e93c:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e93e:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e940:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e942:	4700      	bx	r0

0800e944 <LoopForever>:


LoopForever:
    b LoopForever
 800e944:	e7fe      	b.n	800e944 <LoopForever>
 800e946:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e948:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e94c:	0801cce8 	.word	0x0801cce8
  ldr r0, =_sdata
 800e950:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800e954:	20000a68 	.word	0x20000a68
  ldr r2, =_sbss
 800e958:	20000a68 	.word	0x20000a68
  ldr r3, = _ebss
 800e95c:	20007110 	.word	0x20007110
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e960:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e964:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e968:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e96c:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e970:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e974:	1fffd800 	.word	0x1fffd800

0800e978 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e978:	e7fe      	b.n	800e978 <CEC_CAN_IRQHandler>
	...

0800e97c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e97c:	4b11      	ldr	r3, [pc, #68]	; (800e9c4 <SystemInit+0x48>)
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	2101      	movs	r1, #1
 800e982:	430a      	orrs	r2, r1
 800e984:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e986:	685a      	ldr	r2, [r3, #4]
 800e988:	480f      	ldr	r0, [pc, #60]	; (800e9c8 <SystemInit+0x4c>)
 800e98a:	4002      	ands	r2, r0
 800e98c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	480e      	ldr	r0, [pc, #56]	; (800e9cc <SystemInit+0x50>)
 800e992:	4002      	ands	r2, r0
 800e994:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	480d      	ldr	r0, [pc, #52]	; (800e9d0 <SystemInit+0x54>)
 800e99a:	4002      	ands	r2, r0
 800e99c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e99e:	685a      	ldr	r2, [r3, #4]
 800e9a0:	480c      	ldr	r0, [pc, #48]	; (800e9d4 <SystemInit+0x58>)
 800e9a2:	4002      	ands	r2, r0
 800e9a4:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9a8:	200f      	movs	r0, #15
 800e9aa:	4382      	bics	r2, r0
 800e9ac:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e9ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9b0:	4809      	ldr	r0, [pc, #36]	; (800e9d8 <SystemInit+0x5c>)
 800e9b2:	4002      	ands	r2, r0
 800e9b4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e9b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9b8:	438a      	bics	r2, r1
 800e9ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e9bc:	2200      	movs	r2, #0
 800e9be:	609a      	str	r2, [r3, #8]

}
 800e9c0:	4770      	bx	lr
 800e9c2:	46c0      	nop			; (mov r8, r8)
 800e9c4:	40021000 	.word	0x40021000
 800e9c8:	08ffb80c 	.word	0x08ffb80c
 800e9cc:	fef6ffff 	.word	0xfef6ffff
 800e9d0:	fffbffff 	.word	0xfffbffff
 800e9d4:	ffc0ffff 	.word	0xffc0ffff
 800e9d8:	fff0feac 	.word	0xfff0feac

0800e9dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e9dc:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e9de:	f000 ff55 	bl	800f88c <vTaskStartScheduler>
  
  return osOK;
}
 800e9e2:	2000      	movs	r0, #0
 800e9e4:	bd10      	pop	{r4, pc}

0800e9e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e9e6:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d100      	bne.n	800e9ee <osDelay+0x8>
 800e9ec:	3001      	adds	r0, #1
 800e9ee:	f001 f889 	bl	800fb04 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e9f2:	2000      	movs	r0, #0
 800e9f4:	bd10      	pop	{r4, pc}

0800e9f6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e9f6:	b510      	push	{r4, lr}
 800e9f8:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e9fa:	2901      	cmp	r1, #1
 800e9fc:	d005      	beq.n	800ea0a <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e9fe:	2100      	movs	r1, #0
 800ea00:	f000 faf6 	bl	800eff0 <xQueueCreateCountingSemaphore>
 800ea04:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800ea06:	0020      	movs	r0, r4
 800ea08:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800ea0a:	2203      	movs	r2, #3
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	f000 fac8 	bl	800efa2 <xQueueGenericCreate>
 800ea12:	1e04      	subs	r4, r0, #0
 800ea14:	d0f7      	beq.n	800ea06 <osSemaphoreCreate+0x10>
 800ea16:	2300      	movs	r3, #0
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	f000 fafc 	bl	800f018 <xQueueGenericSend>
 800ea20:	e7f1      	b.n	800ea06 <osSemaphoreCreate+0x10>
	...

0800ea24 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ea24:	b500      	push	{lr}
 800ea26:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ea28:	2300      	movs	r3, #0
 800ea2a:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	d021      	beq.n	800ea74 <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea30:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d010      	beq.n	800ea5a <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ea38:	aa01      	add	r2, sp, #4
 800ea3a:	2100      	movs	r1, #0
 800ea3c:	f000 fcae 	bl	800f39c <xQueueReceiveFromISR>
 800ea40:	0003      	movs	r3, r0
      return osErrorOS;
 800ea42:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d113      	bne.n	800ea70 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800ea48:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800ea4a:	9b01      	ldr	r3, [sp, #4]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d00f      	beq.n	800ea70 <osSemaphoreWait+0x4c>
 800ea50:	4b09      	ldr	r3, [pc, #36]	; (800ea78 <osSemaphoreWait+0x54>)
 800ea52:	2280      	movs	r2, #128	; 0x80
 800ea54:	0552      	lsls	r2, r2, #21
 800ea56:	601a      	str	r2, [r3, #0]
 800ea58:	e00a      	b.n	800ea70 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	000a      	movs	r2, r1
 800ea5e:	2100      	movs	r1, #0
 800ea60:	f000 fbf3 	bl	800f24a <xQueueGenericReceive>
  return osOK;
 800ea64:	3801      	subs	r0, #1
 800ea66:	1e43      	subs	r3, r0, #1
 800ea68:	4198      	sbcs	r0, r3
 800ea6a:	4240      	negs	r0, r0
 800ea6c:	23ff      	movs	r3, #255	; 0xff
 800ea6e:	4018      	ands	r0, r3
}
 800ea70:	b003      	add	sp, #12
 800ea72:	bd00      	pop	{pc}
    return osErrorParameter;
 800ea74:	2080      	movs	r0, #128	; 0x80
 800ea76:	e7fb      	b.n	800ea70 <osSemaphoreWait+0x4c>
 800ea78:	e000ed04 	.word	0xe000ed04

0800ea7c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ea7c:	b500      	push	{lr}
 800ea7e:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800ea80:	2300      	movs	r3, #0
 800ea82:	9301      	str	r3, [sp, #4]
 800ea84:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00f      	beq.n	800eaac <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ea8c:	a901      	add	r1, sp, #4
 800ea8e:	f000 fba1 	bl	800f1d4 <xQueueGiveFromISR>
 800ea92:	0003      	movs	r3, r0
      return osErrorOS;
 800ea94:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ea96:	2b01      	cmp	r3, #1
 800ea98:	d114      	bne.n	800eac4 <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800ea9a:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ea9c:	9b01      	ldr	r3, [sp, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d010      	beq.n	800eac4 <osSemaphoreRelease+0x48>
 800eaa2:	4b09      	ldr	r3, [pc, #36]	; (800eac8 <osSemaphoreRelease+0x4c>)
 800eaa4:	2280      	movs	r2, #128	; 0x80
 800eaa6:	0552      	lsls	r2, r2, #21
 800eaa8:	601a      	str	r2, [r3, #0]
 800eaaa:	e00b      	b.n	800eac4 <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800eaac:	2300      	movs	r3, #0
 800eaae:	2200      	movs	r2, #0
 800eab0:	2100      	movs	r1, #0
 800eab2:	f000 fab1 	bl	800f018 <xQueueGenericSend>
      result = osErrorOS;
 800eab6:	3801      	subs	r0, #1
 800eab8:	4243      	negs	r3, r0
 800eaba:	4158      	adcs	r0, r3
 800eabc:	4240      	negs	r0, r0
 800eabe:	23fe      	movs	r3, #254	; 0xfe
 800eac0:	4398      	bics	r0, r3
 800eac2:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800eac4:	b003      	add	sp, #12
 800eac6:	bd00      	pop	{pc}
 800eac8:	e000ed04 	.word	0xe000ed04

0800eacc <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800eacc:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800eace:	f001 fa0f 	bl	800fef0 <xTaskGetSchedulerState>
 800ead2:	2801      	cmp	r0, #1
 800ead4:	d001      	beq.n	800eada <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800ead6:	f001 fe91 	bl	80107fc <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800eada:	bd10      	pop	{r4, pc}

0800eadc <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800eadc:	b570      	push	{r4, r5, r6, lr}
 800eade:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800eae0:	d101      	bne.n	800eae6 <FreeRTOS_CLIRegisterCommand+0xa>
 800eae2:	b672      	cpsid	i
 800eae4:	e7fe      	b.n	800eae4 <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800eae6:	2008      	movs	r0, #8
 800eae8:	f001 fec4 	bl	8010874 <pvPortMalloc>
 800eaec:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800eaee:	d101      	bne.n	800eaf4 <FreeRTOS_CLIRegisterCommand+0x18>
 800eaf0:	b672      	cpsid	i
 800eaf2:	e7fe      	b.n	800eaf2 <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800eaf4:	f001 fe3c 	bl	8010770 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800eaf8:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800eafa:	2300      	movs	r3, #0
 800eafc:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800eafe:	4b04      	ldr	r3, [pc, #16]	; (800eb10 <FreeRTOS_CLIRegisterCommand+0x34>)
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800eb04:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800eb06:	f001 fe3f 	bl	8010788 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800eb0a:	2001      	movs	r0, #1
 800eb0c:	bd70      	pop	{r4, r5, r6, pc}
 800eb0e:	46c0      	nop			; (mov r8, r8)
 800eb10:	200000a4 	.word	0x200000a4

0800eb14 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800eb14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb16:	46d6      	mov	lr, sl
 800eb18:	b500      	push	{lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	9001      	str	r0, [sp, #4]
 800eb1e:	9102      	str	r1, [sp, #8]
 800eb20:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800eb22:	4b37      	ldr	r3, [pc, #220]	; (800ec00 <FreeRTOS_CLIProcessCommand+0xec>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d00e      	beq.n	800eb48 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	689b      	ldr	r3, [r3, #8]
 800eb2e:	9a01      	ldr	r2, [sp, #4]
 800eb30:	9903      	ldr	r1, [sp, #12]
 800eb32:	9802      	ldr	r0, [sp, #8]
 800eb34:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d102      	bne.n	800eb40 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800eb3a:	4b31      	ldr	r3, [pc, #196]	; (800ec00 <FreeRTOS_CLIProcessCommand+0xec>)
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800eb40:	b004      	add	sp, #16
 800eb42:	bc04      	pop	{r2}
 800eb44:	4692      	mov	sl, r2
 800eb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800eb48:	4d2e      	ldr	r5, [pc, #184]	; (800ec04 <FreeRTOS_CLIProcessCommand+0xf0>)
 800eb4a:	4a2d      	ldr	r2, [pc, #180]	; (800ec00 <FreeRTOS_CLIProcessCommand+0xec>)
 800eb4c:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800eb4e:	3320      	adds	r3, #32
 800eb50:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800eb52:	0017      	movs	r7, r2
 800eb54:	e00a      	b.n	800eb6c <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800eb56:	0002      	movs	r2, r0
 800eb58:	0021      	movs	r1, r4
 800eb5a:	9801      	ldr	r0, [sp, #4]
 800eb5c:	f006 f9ee 	bl	8014f3c <strncmp>
 800eb60:	2800      	cmp	r0, #0
 800eb62:	d00e      	beq.n	800eb82 <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800eb64:	686d      	ldr	r5, [r5, #4]
 800eb66:	603d      	str	r5, [r7, #0]
 800eb68:	2d00      	cmp	r5, #0
 800eb6a:	d012      	beq.n	800eb92 <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800eb6c:	682e      	ldr	r6, [r5, #0]
 800eb6e:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800eb70:	0020      	movs	r0, r4
 800eb72:	f7f1 fad1 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800eb76:	9b01      	ldr	r3, [sp, #4]
 800eb78:	5c1b      	ldrb	r3, [r3, r0]
 800eb7a:	4652      	mov	r2, sl
 800eb7c:	4393      	bics	r3, r2
 800eb7e:	d1f1      	bne.n	800eb64 <FreeRTOS_CLIProcessCommand+0x50>
 800eb80:	e7e9      	b.n	800eb56 <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800eb82:	200c      	movs	r0, #12
 800eb84:	5630      	ldrsb	r0, [r6, r0]
 800eb86:	2800      	cmp	r0, #0
 800eb88:	da0a      	bge.n	800eba0 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800eb8a:	4b1d      	ldr	r3, [pc, #116]	; (800ec00 <FreeRTOS_CLIProcessCommand+0xec>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d1cb      	bne.n	800eb2a <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800eb92:	9a03      	ldr	r2, [sp, #12]
 800eb94:	491c      	ldr	r1, [pc, #112]	; (800ec08 <FreeRTOS_CLIProcessCommand+0xf4>)
 800eb96:	9802      	ldr	r0, [sp, #8]
 800eb98:	f006 f9e1 	bl	8014f5e <strncpy>
		xReturn = pdFALSE;
 800eb9c:	2000      	movs	r0, #0
	return xReturn;
 800eb9e:	e7cf      	b.n	800eb40 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800eba0:	9a01      	ldr	r2, [sp, #4]
 800eba2:	2300      	movs	r3, #0
 800eba4:	56d3      	ldrsb	r3, [r2, r3]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d027      	beq.n	800ebfa <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800ebaa:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800ebac:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800ebae:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800ebb0:	2501      	movs	r5, #1
 800ebb2:	e009      	b.n	800ebc8 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800ebb4:	2901      	cmp	r1, #1
 800ebb6:	d002      	beq.n	800ebbe <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800ebb8:	3401      	adds	r4, #1
 800ebba:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800ebbc:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800ebbe:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	56d3      	ldrsb	r3, [r2, r3]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d003      	beq.n	800ebd0 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800ebc8:	2b20      	cmp	r3, #32
 800ebca:	d0f3      	beq.n	800ebb4 <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800ebcc:	0031      	movs	r1, r6
 800ebce:	e7f6      	b.n	800ebbe <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800ebd0:	2901      	cmp	r1, #1
 800ebd2:	d00f      	beq.n	800ebf4 <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ebd4:	4b0a      	ldr	r3, [pc, #40]	; (800ec00 <FreeRTOS_CLIProcessCommand+0xec>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d0da      	beq.n	800eb92 <FreeRTOS_CLIProcessCommand+0x7e>
 800ebdc:	42a0      	cmp	r0, r4
 800ebde:	d0a4      	beq.n	800eb2a <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ebe0:	9a03      	ldr	r2, [sp, #12]
 800ebe2:	490a      	ldr	r1, [pc, #40]	; (800ec0c <FreeRTOS_CLIProcessCommand+0xf8>)
 800ebe4:	9802      	ldr	r0, [sp, #8]
 800ebe6:	f006 f9ba 	bl	8014f5e <strncpy>
		pxCommand = NULL;
 800ebea:	4b05      	ldr	r3, [pc, #20]	; (800ec00 <FreeRTOS_CLIProcessCommand+0xec>)
 800ebec:	2200      	movs	r2, #0
 800ebee:	601a      	str	r2, [r3, #0]
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	e7a5      	b.n	800eb40 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800ebf4:	3c01      	subs	r4, #1
 800ebf6:	b264      	sxtb	r4, r4
 800ebf8:	e7ec      	b.n	800ebd4 <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800ebfa:	2400      	movs	r4, #0
 800ebfc:	e7ea      	b.n	800ebd4 <FreeRTOS_CLIProcessCommand+0xc0>
 800ebfe:	46c0      	nop			; (mov r8, r8)
 800ec00:	20001f78 	.word	0x20001f78
 800ec04:	200000a8 	.word	0x200000a8
 800ec08:	0801c8a0 	.word	0x0801c8a0
 800ec0c:	0801c848 	.word	0x0801c848

0800ec10 <FreeRTOS_CLIGetOutputBuffer>:
}
 800ec10:	4800      	ldr	r0, [pc, #0]	; (800ec14 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800ec12:	4770      	bx	lr
 800ec14:	20001d10 	.word	0x20001d10

0800ec18 <FreeRTOS_CLIGetParameter>:
{
 800ec18:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800ec1e:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800ec20:	2900      	cmp	r1, #0
 800ec22:	d10b      	bne.n	800ec3c <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800ec24:	2000      	movs	r0, #0
 800ec26:	e02a      	b.n	800ec7e <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800ec28:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	56c3      	ldrsb	r3, [r0, r3]
 800ec2e:	2b20      	cmp	r3, #32
 800ec30:	d0fa      	beq.n	800ec28 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d022      	beq.n	800ec7c <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800ec36:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800ec38:	42a1      	cmp	r1, r4
 800ec3a:	d00d      	beq.n	800ec58 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	56c3      	ldrsb	r3, [r0, r3]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d01f      	beq.n	800ec84 <FreeRTOS_CLIGetParameter+0x6c>
 800ec44:	2b20      	cmp	r3, #32
 800ec46:	d0ef      	beq.n	800ec28 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800ec48:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	56c3      	ldrsb	r3, [r0, r3]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d018      	beq.n	800ec84 <FreeRTOS_CLIGetParameter+0x6c>
 800ec52:	2b20      	cmp	r3, #32
 800ec54:	d1f8      	bne.n	800ec48 <FreeRTOS_CLIGetParameter+0x30>
 800ec56:	e7e7      	b.n	800ec28 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ec58:	7803      	ldrb	r3, [r0, #0]
 800ec5a:	2120      	movs	r1, #32
 800ec5c:	438b      	bics	r3, r1
 800ec5e:	d00f      	beq.n	800ec80 <FreeRTOS_CLIGetParameter+0x68>
 800ec60:	0004      	movs	r4, r0
 800ec62:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800ec64:	6813      	ldr	r3, [r2, #0]
 800ec66:	3301      	adds	r3, #1
 800ec68:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800ec6a:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ec6c:	7821      	ldrb	r1, [r4, #0]
 800ec6e:	43a9      	bics	r1, r5
 800ec70:	d1f8      	bne.n	800ec64 <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800ec72:	1e5a      	subs	r2, r3, #1
 800ec74:	4193      	sbcs	r3, r2
 800ec76:	425b      	negs	r3, r3
 800ec78:	4018      	ands	r0, r3
 800ec7a:	e000      	b.n	800ec7e <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800ec7c:	2000      	movs	r0, #0
}
 800ec7e:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800ec80:	2000      	movs	r0, #0
 800ec82:	e7fc      	b.n	800ec7e <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800ec84:	2300      	movs	r3, #0
 800ec86:	56c3      	ldrsb	r3, [r0, r3]
 800ec88:	e7d3      	b.n	800ec32 <FreeRTOS_CLIGetParameter+0x1a>
	...

0800ec8c <prvHelpCommand>:
{
 800ec8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	0004      	movs	r4, r0
 800ec92:	000d      	movs	r5, r1
 800ec94:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800ec9a:	aa01      	add	r2, sp, #4
 800ec9c:	2101      	movs	r1, #1
 800ec9e:	f7ff ffbb 	bl	800ec18 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800eca2:	2800      	cmp	r0, #0
 800eca4:	d027      	beq.n	800ecf6 <prvHelpCommand+0x6a>
 800eca6:	2206      	movs	r2, #6
 800eca8:	4930      	ldr	r1, [pc, #192]	; (800ed6c <prvHelpCommand+0xe0>)
 800ecaa:	f006 f947 	bl	8014f3c <strncmp>
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	d149      	bne.n	800ed46 <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800ecb2:	4b2f      	ldr	r3, [pc, #188]	; (800ed70 <prvHelpCommand+0xe4>)
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	2b07      	cmp	r3, #7
 800ecb8:	d012      	beq.n	800ece0 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800ecba:	1c5f      	adds	r7, r3, #1
 800ecbc:	b2ff      	uxtb	r7, r7
 800ecbe:	4a2c      	ldr	r2, [pc, #176]	; (800ed70 <prvHelpCommand+0xe4>)
 800ecc0:	7017      	strb	r7, [r2, #0]
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	4a2b      	ldr	r2, [pc, #172]	; (800ed74 <prvHelpCommand+0xe8>)
 800ecc6:	5899      	ldr	r1, [r3, r2]
 800ecc8:	002a      	movs	r2, r5
 800ecca:	0020      	movs	r0, r4
 800eccc:	f006 f947 	bl	8014f5e <strncpy>
			xReturn = pdTRUE;
 800ecd0:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800ecd2:	2f07      	cmp	r7, #7
 800ecd4:	d137      	bne.n	800ed46 <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800ecd6:	4b26      	ldr	r3, [pc, #152]	; (800ed70 <prvHelpCommand+0xe4>)
 800ecd8:	2200      	movs	r2, #0
 800ecda:	701a      	strb	r2, [r3, #0]
 800ecdc:	2600      	movs	r6, #0
 800ecde:	e032      	b.n	800ed46 <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800ece0:	4b23      	ldr	r3, [pc, #140]	; (800ed70 <prvHelpCommand+0xe4>)
 800ece2:	2201      	movs	r2, #1
 800ece4:	701a      	strb	r2, [r3, #0]
 800ece6:	4b23      	ldr	r3, [pc, #140]	; (800ed74 <prvHelpCommand+0xe8>)
 800ece8:	6819      	ldr	r1, [r3, #0]
 800ecea:	002a      	movs	r2, r5
 800ecec:	0020      	movs	r0, r4
 800ecee:	f006 f936 	bl	8014f5e <strncpy>
			xReturn = pdTRUE;
 800ecf2:	2601      	movs	r6, #1
 800ecf4:	e027      	b.n	800ed46 <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800ecf6:	4b20      	ldr	r3, [pc, #128]	; (800ed78 <prvHelpCommand+0xec>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d026      	beq.n	800ed4c <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800ecfe:	4b1f      	ldr	r3, [pc, #124]	; (800ed7c <prvHelpCommand+0xf0>)
 800ed00:	781a      	ldrb	r2, [r3, #0]
 800ed02:	4b1f      	ldr	r3, [pc, #124]	; (800ed80 <prvHelpCommand+0xf4>)
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d927      	bls.n	800ed5a <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800ed0a:	002a      	movs	r2, r5
 800ed0c:	3a08      	subs	r2, #8
 800ed0e:	4b1a      	ldr	r3, [pc, #104]	; (800ed78 <prvHelpCommand+0xec>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	6859      	ldr	r1, [r3, #4]
 800ed16:	0020      	movs	r0, r4
 800ed18:	3008      	adds	r0, #8
 800ed1a:	f006 f920 	bl	8014f5e <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800ed1e:	1c60      	adds	r0, r4, #1
 800ed20:	4918      	ldr	r1, [pc, #96]	; (800ed84 <prvHelpCommand+0xf8>)
 800ed22:	f006 f903 	bl	8014f2c <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800ed26:	2328      	movs	r3, #40	; 0x28
 800ed28:	7023      	strb	r3, [r4, #0]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	71a3      	strb	r3, [r4, #6]
 800ed2e:	3b09      	subs	r3, #9
 800ed30:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800ed32:	4b11      	ldr	r3, [pc, #68]	; (800ed78 <prvHelpCommand+0xec>)
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	6856      	ldr	r6, [r2, #4]
 800ed38:	601e      	str	r6, [r3, #0]
		counter++;
 800ed3a:	4a10      	ldr	r2, [pc, #64]	; (800ed7c <prvHelpCommand+0xf0>)
 800ed3c:	7813      	ldrb	r3, [r2, #0]
 800ed3e:	3301      	adds	r3, #1
 800ed40:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800ed42:	1e73      	subs	r3, r6, #1
 800ed44:	419e      	sbcs	r6, r3
}
 800ed46:	0030      	movs	r0, r6
 800ed48:	b003      	add	sp, #12
 800ed4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800ed4c:	4b0a      	ldr	r3, [pc, #40]	; (800ed78 <prvHelpCommand+0xec>)
 800ed4e:	4a0e      	ldr	r2, [pc, #56]	; (800ed88 <prvHelpCommand+0xfc>)
 800ed50:	601a      	str	r2, [r3, #0]
			counter = 1;
 800ed52:	4b0a      	ldr	r3, [pc, #40]	; (800ed7c <prvHelpCommand+0xf0>)
 800ed54:	2201      	movs	r2, #1
 800ed56:	701a      	strb	r2, [r3, #0]
 800ed58:	e7d1      	b.n	800ecfe <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800ed5a:	4b07      	ldr	r3, [pc, #28]	; (800ed78 <prvHelpCommand+0xec>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	6859      	ldr	r1, [r3, #4]
 800ed62:	002a      	movs	r2, r5
 800ed64:	0020      	movs	r0, r4
 800ed66:	f006 f8fa 	bl	8014f5e <strncpy>
 800ed6a:	e7e2      	b.n	800ed32 <prvHelpCommand+0xa6>
 800ed6c:	0801a140 	.word	0x0801a140
 800ed70:	20001f80 	.word	0x20001f80
 800ed74:	2000005c 	.word	0x2000005c
 800ed78:	20001f7c 	.word	0x20001f7c
 800ed7c:	20001f74 	.word	0x20001f74
 800ed80:	20006b70 	.word	0x20006b70
 800ed84:	08019716 	.word	0x08019716
 800ed88:	200000a8 	.word	0x200000a8

0800ed8c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed8c:	0003      	movs	r3, r0
 800ed8e:	3308      	adds	r3, #8
 800ed90:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ed92:	2201      	movs	r2, #1
 800ed94:	4252      	negs	r2, r2
 800ed96:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed98:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed9a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eda0:	4770      	bx	lr

0800eda2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800eda2:	2300      	movs	r3, #0
 800eda4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eda6:	4770      	bx	lr

0800eda8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800eda8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800edaa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800edac:	689a      	ldr	r2, [r3, #8]
 800edae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800edb0:	689a      	ldr	r2, [r3, #8]
 800edb2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800edb4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800edb6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800edb8:	6803      	ldr	r3, [r0, #0]
 800edba:	3301      	adds	r3, #1
 800edbc:	6003      	str	r3, [r0, #0]
}
 800edbe:	4770      	bx	lr

0800edc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800edc0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800edc2:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800edc4:	0002      	movs	r2, r0
 800edc6:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800edc8:	1c63      	adds	r3, r4, #1
 800edca:	d102      	bne.n	800edd2 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800edcc:	6902      	ldr	r2, [r0, #16]
 800edce:	e004      	b.n	800edda <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800edd0:	001a      	movs	r2, r3
 800edd2:	6853      	ldr	r3, [r2, #4]
 800edd4:	681d      	ldr	r5, [r3, #0]
 800edd6:	42a5      	cmp	r5, r4
 800edd8:	d9fa      	bls.n	800edd0 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800edda:	6853      	ldr	r3, [r2, #4]
 800eddc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800edde:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ede0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ede2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ede4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ede6:	6803      	ldr	r3, [r0, #0]
 800ede8:	3301      	adds	r3, #1
 800edea:	6003      	str	r3, [r0, #0]
}
 800edec:	bd30      	pop	{r4, r5, pc}

0800edee <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800edee:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800edf0:	6842      	ldr	r2, [r0, #4]
 800edf2:	6881      	ldr	r1, [r0, #8]
 800edf4:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800edf6:	6882      	ldr	r2, [r0, #8]
 800edf8:	6841      	ldr	r1, [r0, #4]
 800edfa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800edfc:	685a      	ldr	r2, [r3, #4]
 800edfe:	4282      	cmp	r2, r0
 800ee00:	d005      	beq.n	800ee0e <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ee02:	2200      	movs	r2, #0
 800ee04:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ee06:	681a      	ldr	r2, [r3, #0]
 800ee08:	1e50      	subs	r0, r2, #1
 800ee0a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800ee0c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ee0e:	6882      	ldr	r2, [r0, #8]
 800ee10:	605a      	str	r2, [r3, #4]
 800ee12:	e7f6      	b.n	800ee02 <uxListRemove+0x14>

0800ee14 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ee14:	b570      	push	{r4, r5, r6, lr}
 800ee16:	0004      	movs	r4, r0
 800ee18:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ee1a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ee1c:	2a00      	cmp	r2, #0
 800ee1e:	d10d      	bne.n	800ee3c <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800ee20:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee22:	6823      	ldr	r3, [r4, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d003      	beq.n	800ee30 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800ee28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800ee2e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ee30:	6860      	ldr	r0, [r4, #4]
 800ee32:	f001 f8ab 	bl	800ff8c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800ee36:	2300      	movs	r3, #0
 800ee38:	6063      	str	r3, [r4, #4]
 800ee3a:	e7f5      	b.n	800ee28 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800ee3c:	2d00      	cmp	r5, #0
 800ee3e:	d10e      	bne.n	800ee5e <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ee40:	6880      	ldr	r0, [r0, #8]
 800ee42:	f005 fe34 	bl	8014aae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ee46:	68a3      	ldr	r3, [r4, #8]
 800ee48:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ee4a:	4694      	mov	ip, r2
 800ee4c:	4463      	add	r3, ip
 800ee4e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800ee50:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee52:	6862      	ldr	r2, [r4, #4]
 800ee54:	4293      	cmp	r3, r2
 800ee56:	d3e7      	bcc.n	800ee28 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee58:	6823      	ldr	r3, [r4, #0]
 800ee5a:	60a3      	str	r3, [r4, #8]
 800ee5c:	e7e4      	b.n	800ee28 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee5e:	68c0      	ldr	r0, [r0, #12]
 800ee60:	f005 fe25 	bl	8014aae <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ee64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee66:	425a      	negs	r2, r3
 800ee68:	68e3      	ldr	r3, [r4, #12]
 800ee6a:	189b      	adds	r3, r3, r2
 800ee6c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee6e:	6821      	ldr	r1, [r4, #0]
 800ee70:	428b      	cmp	r3, r1
 800ee72:	d203      	bcs.n	800ee7c <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ee74:	6863      	ldr	r3, [r4, #4]
 800ee76:	469c      	mov	ip, r3
 800ee78:	4462      	add	r2, ip
 800ee7a:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800ee7c:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800ee7e:	2d02      	cmp	r5, #2
 800ee80:	d1d2      	bne.n	800ee28 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d0cf      	beq.n	800ee28 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800ee88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee8a:	3b01      	subs	r3, #1
 800ee8c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ee8e:	e7cb      	b.n	800ee28 <prvCopyDataToQueue+0x14>

0800ee90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ee90:	b510      	push	{r4, lr}
 800ee92:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ee94:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ee96:	2a00      	cmp	r2, #0
 800ee98:	d00b      	beq.n	800eeb2 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ee9a:	68c3      	ldr	r3, [r0, #12]
 800ee9c:	189b      	adds	r3, r3, r2
 800ee9e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eea0:	6841      	ldr	r1, [r0, #4]
 800eea2:	428b      	cmp	r3, r1
 800eea4:	d301      	bcc.n	800eeaa <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800eea6:	6803      	ldr	r3, [r0, #0]
 800eea8:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800eeaa:	68c1      	ldr	r1, [r0, #12]
 800eeac:	0020      	movs	r0, r4
 800eeae:	f005 fdfe 	bl	8014aae <memcpy>
	}
}
 800eeb2:	bd10      	pop	{r4, pc}

0800eeb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eeb4:	b570      	push	{r4, r5, r6, lr}
 800eeb6:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eeb8:	f001 fc5a 	bl	8010770 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800eebc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	dd04      	ble.n	800eecc <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eec2:	0025      	movs	r5, r4
 800eec4:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d11f      	bne.n	800ef0c <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800eecc:	2301      	movs	r3, #1
 800eece:	425b      	negs	r3, r3
 800eed0:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800eed2:	f001 fc59 	bl	8010788 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eed6:	f001 fc4b 	bl	8010770 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800eeda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eedc:	2b00      	cmp	r3, #0
 800eede:	dd04      	ble.n	800eeea <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eee0:	0025      	movs	r5, r4
 800eee2:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eee4:	6923      	ldr	r3, [r4, #16]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d121      	bne.n	800ef2e <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800eeea:	2301      	movs	r3, #1
 800eeec:	425b      	negs	r3, r3
 800eeee:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800eef0:	f001 fc4a 	bl	8010788 <vPortExitCritical>
}
 800eef4:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800eef6:	f000 fff5 	bl	800fee4 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800eefa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eefc:	3b01      	subs	r3, #1
 800eefe:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ef00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	dde2      	ble.n	800eecc <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d0df      	beq.n	800eecc <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef0c:	0028      	movs	r0, r5
 800ef0e:	f000 ff67 	bl	800fde0 <xTaskRemoveFromEventList>
 800ef12:	2800      	cmp	r0, #0
 800ef14:	d0f1      	beq.n	800eefa <prvUnlockQueue+0x46>
 800ef16:	e7ee      	b.n	800eef6 <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800ef18:	f000 ffe4 	bl	800fee4 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800ef1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef1e:	3b01      	subs	r3, #1
 800ef20:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ef22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	dde0      	ble.n	800eeea <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef28:	6923      	ldr	r3, [r4, #16]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d0dd      	beq.n	800eeea <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef2e:	0028      	movs	r0, r5
 800ef30:	f000 ff56 	bl	800fde0 <xTaskRemoveFromEventList>
 800ef34:	2800      	cmp	r0, #0
 800ef36:	d0f1      	beq.n	800ef1c <prvUnlockQueue+0x68>
 800ef38:	e7ee      	b.n	800ef18 <prvUnlockQueue+0x64>

0800ef3a <xQueueGenericReset>:
{
 800ef3a:	b570      	push	{r4, r5, r6, lr}
 800ef3c:	0004      	movs	r4, r0
 800ef3e:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800ef40:	2800      	cmp	r0, #0
 800ef42:	d101      	bne.n	800ef48 <xQueueGenericReset+0xe>
 800ef44:	b672      	cpsid	i
 800ef46:	e7fe      	b.n	800ef46 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800ef48:	f001 fc12 	bl	8010770 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ef4c:	6822      	ldr	r2, [r4, #0]
 800ef4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ef50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ef52:	434b      	muls	r3, r1
 800ef54:	18d0      	adds	r0, r2, r3
 800ef56:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ef58:	2000      	movs	r0, #0
 800ef5a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ef5c:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ef5e:	1a5b      	subs	r3, r3, r1
 800ef60:	18d3      	adds	r3, r2, r3
 800ef62:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800ef64:	2301      	movs	r3, #1
 800ef66:	425b      	negs	r3, r3
 800ef68:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800ef6a:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800ef6c:	2d00      	cmp	r5, #0
 800ef6e:	d10f      	bne.n	800ef90 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef70:	6923      	ldr	r3, [r4, #16]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d103      	bne.n	800ef7e <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800ef76:	f001 fc07 	bl	8010788 <vPortExitCritical>
}
 800ef7a:	2001      	movs	r0, #1
 800ef7c:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800ef7e:	0020      	movs	r0, r4
 800ef80:	3010      	adds	r0, #16
 800ef82:	f000 ff2d 	bl	800fde0 <xTaskRemoveFromEventList>
 800ef86:	2801      	cmp	r0, #1
 800ef88:	d1f5      	bne.n	800ef76 <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800ef8a:	f001 fbe5 	bl	8010758 <vPortYield>
 800ef8e:	e7f2      	b.n	800ef76 <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ef90:	0020      	movs	r0, r4
 800ef92:	3010      	adds	r0, #16
 800ef94:	f7ff fefa 	bl	800ed8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ef98:	0020      	movs	r0, r4
 800ef9a:	3024      	adds	r0, #36	; 0x24
 800ef9c:	f7ff fef6 	bl	800ed8c <vListInitialise>
 800efa0:	e7e9      	b.n	800ef76 <xQueueGenericReset+0x3c>

0800efa2 <xQueueGenericCreate>:
{
 800efa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa4:	0005      	movs	r5, r0
 800efa6:	000e      	movs	r6, r1
 800efa8:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800efaa:	2800      	cmp	r0, #0
 800efac:	d101      	bne.n	800efb2 <xQueueGenericCreate+0x10>
 800efae:	b672      	cpsid	i
 800efb0:	e7fe      	b.n	800efb0 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800efb2:	2900      	cmp	r1, #0
 800efb4:	d00c      	beq.n	800efd0 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efb6:	0008      	movs	r0, r1
 800efb8:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800efba:	3055      	adds	r0, #85	; 0x55
 800efbc:	f001 fc5a 	bl	8010874 <pvPortMalloc>
 800efc0:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800efc2:	d101      	bne.n	800efc8 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800efc4:	b672      	cpsid	i
 800efc6:	e7fe      	b.n	800efc6 <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800efc8:	0003      	movs	r3, r0
 800efca:	3354      	adds	r3, #84	; 0x54
 800efcc:	6003      	str	r3, [r0, #0]
 800efce:	e005      	b.n	800efdc <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800efd0:	2054      	movs	r0, #84	; 0x54
 800efd2:	f001 fc4f 	bl	8010874 <pvPortMalloc>
 800efd6:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800efd8:	d0f4      	beq.n	800efc4 <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800efda:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800efdc:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800efde:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800efe0:	2101      	movs	r1, #1
 800efe2:	0020      	movs	r0, r4
 800efe4:	f7ff ffa9 	bl	800ef3a <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800efe8:	2350      	movs	r3, #80	; 0x50
 800efea:	54e7      	strb	r7, [r4, r3]
}
 800efec:	0020      	movs	r0, r4
 800efee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eff0 <xQueueCreateCountingSemaphore>:
	{
 800eff0:	b510      	push	{r4, lr}
 800eff2:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d101      	bne.n	800effc <xQueueCreateCountingSemaphore+0xc>
 800eff8:	b672      	cpsid	i
 800effa:	e7fe      	b.n	800effa <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800effc:	4288      	cmp	r0, r1
 800effe:	d201      	bcs.n	800f004 <xQueueCreateCountingSemaphore+0x14>
 800f000:	b672      	cpsid	i
 800f002:	e7fe      	b.n	800f002 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f004:	2202      	movs	r2, #2
 800f006:	2100      	movs	r1, #0
 800f008:	f7ff ffcb 	bl	800efa2 <xQueueGenericCreate>
		if( xHandle != NULL )
 800f00c:	2800      	cmp	r0, #0
 800f00e:	d001      	beq.n	800f014 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f010:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800f012:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800f014:	b672      	cpsid	i
 800f016:	e7fe      	b.n	800f016 <xQueueCreateCountingSemaphore+0x26>

0800f018 <xQueueGenericSend>:
{
 800f018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f01a:	46ce      	mov	lr, r9
 800f01c:	b500      	push	{lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	0004      	movs	r4, r0
 800f022:	9100      	str	r1, [sp, #0]
 800f024:	9201      	str	r2, [sp, #4]
 800f026:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800f028:	2800      	cmp	r0, #0
 800f02a:	d007      	beq.n	800f03c <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f02c:	9b00      	ldr	r3, [sp, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d106      	bne.n	800f040 <xQueueGenericSend+0x28>
 800f032:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f034:	2b00      	cmp	r3, #0
 800f036:	d003      	beq.n	800f040 <xQueueGenericSend+0x28>
 800f038:	b672      	cpsid	i
 800f03a:	e7fe      	b.n	800f03a <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800f03c:	b672      	cpsid	i
 800f03e:	e7fe      	b.n	800f03e <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f040:	2d02      	cmp	r5, #2
 800f042:	d104      	bne.n	800f04e <xQueueGenericSend+0x36>
 800f044:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f046:	2b01      	cmp	r3, #1
 800f048:	d001      	beq.n	800f04e <xQueueGenericSend+0x36>
 800f04a:	b672      	cpsid	i
 800f04c:	e7fe      	b.n	800f04c <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f04e:	f000 ff4f 	bl	800fef0 <xTaskGetSchedulerState>
 800f052:	2800      	cmp	r0, #0
 800f054:	d104      	bne.n	800f060 <xQueueGenericSend+0x48>
 800f056:	9b01      	ldr	r3, [sp, #4]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d004      	beq.n	800f066 <xQueueGenericSend+0x4e>
 800f05c:	b672      	cpsid	i
 800f05e:	e7fe      	b.n	800f05e <xQueueGenericSend+0x46>
 800f060:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800f062:	2700      	movs	r7, #0
 800f064:	e02f      	b.n	800f0c6 <xQueueGenericSend+0xae>
 800f066:	2600      	movs	r6, #0
 800f068:	e7fb      	b.n	800f062 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f06a:	002a      	movs	r2, r5
 800f06c:	9900      	ldr	r1, [sp, #0]
 800f06e:	0020      	movs	r0, r4
 800f070:	f7ff fed0 	bl	800ee14 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f076:	2b00      	cmp	r3, #0
 800f078:	d104      	bne.n	800f084 <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800f07a:	2800      	cmp	r0, #0
 800f07c:	d00a      	beq.n	800f094 <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800f07e:	f001 fb6b 	bl	8010758 <vPortYield>
 800f082:	e007      	b.n	800f094 <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800f084:	0020      	movs	r0, r4
 800f086:	3024      	adds	r0, #36	; 0x24
 800f088:	f000 feaa 	bl	800fde0 <xTaskRemoveFromEventList>
 800f08c:	2801      	cmp	r0, #1
 800f08e:	d101      	bne.n	800f094 <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800f090:	f001 fb62 	bl	8010758 <vPortYield>
				taskEXIT_CRITICAL();
 800f094:	f001 fb78 	bl	8010788 <vPortExitCritical>
				return pdPASS;
 800f098:	2001      	movs	r0, #1
}
 800f09a:	b004      	add	sp, #16
 800f09c:	bc04      	pop	{r2}
 800f09e:	4691      	mov	r9, r2
 800f0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800f0a2:	f001 fb71 	bl	8010788 <vPortExitCritical>
					return errQUEUE_FULL;
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	e7f7      	b.n	800f09a <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800f0aa:	a802      	add	r0, sp, #8
 800f0ac:	f000 fed8 	bl	800fe60 <vTaskSetTimeOutState>
 800f0b0:	e016      	b.n	800f0e0 <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800f0b2:	6467      	str	r7, [r4, #68]	; 0x44
 800f0b4:	e01d      	b.n	800f0f2 <xQueueGenericSend+0xda>
 800f0b6:	64a7      	str	r7, [r4, #72]	; 0x48
 800f0b8:	e01e      	b.n	800f0f8 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800f0ba:	0020      	movs	r0, r4
 800f0bc:	f7ff fefa 	bl	800eeb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0c0:	f000 fcb0 	bl	800fa24 <xTaskResumeAll>
 800f0c4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800f0c6:	f001 fb53 	bl	8010770 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f0cc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d3cb      	bcc.n	800f06a <xQueueGenericSend+0x52>
 800f0d2:	2d02      	cmp	r5, #2
 800f0d4:	d0c9      	beq.n	800f06a <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0d6:	9b01      	ldr	r3, [sp, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d0e2      	beq.n	800f0a2 <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800f0dc:	2e00      	cmp	r6, #0
 800f0de:	d0e4      	beq.n	800f0aa <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800f0e0:	f001 fb52 	bl	8010788 <vPortExitCritical>
		vTaskSuspendAll();
 800f0e4:	f000 fbfe 	bl	800f8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f0e8:	f001 fb42 	bl	8010770 <vPortEnterCritical>
 800f0ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	d0df      	beq.n	800f0b2 <xQueueGenericSend+0x9a>
 800f0f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	d0de      	beq.n	800f0b6 <xQueueGenericSend+0x9e>
 800f0f8:	f001 fb46 	bl	8010788 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f0fc:	a901      	add	r1, sp, #4
 800f0fe:	a802      	add	r0, sp, #8
 800f100:	f000 febe 	bl	800fe80 <xTaskCheckForTimeOut>
 800f104:	2800      	cmp	r0, #0
 800f106:	d117      	bne.n	800f138 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f108:	f001 fb32 	bl	8010770 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f10c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f10e:	4699      	mov	r9, r3
 800f110:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800f112:	f001 fb39 	bl	8010788 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f116:	45b1      	cmp	r9, r6
 800f118:	d1cf      	bne.n	800f0ba <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f11a:	0020      	movs	r0, r4
 800f11c:	3010      	adds	r0, #16
 800f11e:	9901      	ldr	r1, [sp, #4]
 800f120:	f000 fe20 	bl	800fd64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f124:	0020      	movs	r0, r4
 800f126:	f7ff fec5 	bl	800eeb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f12a:	f000 fc7b 	bl	800fa24 <xTaskResumeAll>
 800f12e:	2800      	cmp	r0, #0
 800f130:	d1c8      	bne.n	800f0c4 <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800f132:	f001 fb11 	bl	8010758 <vPortYield>
 800f136:	e7c5      	b.n	800f0c4 <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800f138:	0020      	movs	r0, r4
 800f13a:	f7ff febb 	bl	800eeb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f13e:	f000 fc71 	bl	800fa24 <xTaskResumeAll>
			return errQUEUE_FULL;
 800f142:	2000      	movs	r0, #0
 800f144:	e7a9      	b.n	800f09a <xQueueGenericSend+0x82>

0800f146 <xQueueGenericSendFromISR>:
{
 800f146:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f148:	b083      	sub	sp, #12
 800f14a:	0004      	movs	r4, r0
 800f14c:	000d      	movs	r5, r1
 800f14e:	0016      	movs	r6, r2
 800f150:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800f152:	2800      	cmp	r0, #0
 800f154:	d006      	beq.n	800f164 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f156:	2900      	cmp	r1, #0
 800f158:	d106      	bne.n	800f168 <xQueueGenericSendFromISR+0x22>
 800f15a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d003      	beq.n	800f168 <xQueueGenericSendFromISR+0x22>
 800f160:	b672      	cpsid	i
 800f162:	e7fe      	b.n	800f162 <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800f164:	b672      	cpsid	i
 800f166:	e7fe      	b.n	800f166 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f168:	2f02      	cmp	r7, #2
 800f16a:	d12a      	bne.n	800f1c2 <xQueueGenericSendFromISR+0x7c>
 800f16c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f16e:	2b01      	cmp	r3, #1
 800f170:	d011      	beq.n	800f196 <xQueueGenericSendFromISR+0x50>
 800f172:	b672      	cpsid	i
 800f174:	e7fe      	b.n	800f174 <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800f176:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d01b      	beq.n	800f1b6 <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f17e:	0020      	movs	r0, r4
 800f180:	3024      	adds	r0, #36	; 0x24
 800f182:	f000 fe2d 	bl	800fde0 <xTaskRemoveFromEventList>
 800f186:	2800      	cmp	r0, #0
 800f188:	d015      	beq.n	800f1b6 <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800f18a:	2e00      	cmp	r6, #0
 800f18c:	d001      	beq.n	800f192 <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f18e:	6035      	str	r5, [r6, #0]
 800f190:	e011      	b.n	800f1b6 <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800f192:	2501      	movs	r5, #1
 800f194:	e00f      	b.n	800f1b6 <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f196:	f001 fb07 	bl	80107a8 <ulSetInterruptMaskFromISR>
 800f19a:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f19c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f19e:	003a      	movs	r2, r7
 800f1a0:	0029      	movs	r1, r5
 800f1a2:	0020      	movs	r0, r4
 800f1a4:	f7ff fe36 	bl	800ee14 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f1a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	d0e3      	beq.n	800f176 <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800f1ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f1b4:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f1b6:	9801      	ldr	r0, [sp, #4]
 800f1b8:	f001 fafb 	bl	80107b2 <vClearInterruptMaskFromISR>
}
 800f1bc:	0028      	movs	r0, r5
 800f1be:	b003      	add	sp, #12
 800f1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f1c2:	f001 faf1 	bl	80107a8 <ulSetInterruptMaskFromISR>
 800f1c6:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f1c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f1ca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d3e6      	bcc.n	800f19e <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800f1d0:	2500      	movs	r5, #0
 800f1d2:	e7f0      	b.n	800f1b6 <xQueueGenericSendFromISR+0x70>

0800f1d4 <xQueueGiveFromISR>:
{
 800f1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d6:	0004      	movs	r4, r0
 800f1d8:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800f1da:	2800      	cmp	r0, #0
 800f1dc:	d004      	beq.n	800f1e8 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800f1de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d003      	beq.n	800f1ec <xQueueGiveFromISR+0x18>
 800f1e4:	b672      	cpsid	i
 800f1e6:	e7fe      	b.n	800f1e6 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800f1e8:	b672      	cpsid	i
 800f1ea:	e7fe      	b.n	800f1ea <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f1ec:	6803      	ldr	r3, [r0, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d01f      	beq.n	800f232 <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f1f2:	f001 fad9 	bl	80107a8 <ulSetInterruptMaskFromISR>
 800f1f6:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f1f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800f1fa:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f1fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d212      	bcs.n	800f228 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800f202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f204:	3301      	adds	r3, #1
 800f206:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f208:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f20a:	3301      	adds	r3, #1
 800f20c:	d116      	bne.n	800f23c <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800f20e:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f212:	2b00      	cmp	r3, #0
 800f214:	d008      	beq.n	800f228 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f216:	0020      	movs	r0, r4
 800f218:	3024      	adds	r0, #36	; 0x24
 800f21a:	f000 fde1 	bl	800fde0 <xTaskRemoveFromEventList>
 800f21e:	2800      	cmp	r0, #0
 800f220:	d002      	beq.n	800f228 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800f222:	2f00      	cmp	r7, #0
 800f224:	d00f      	beq.n	800f246 <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f226:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f228:	0030      	movs	r0, r6
 800f22a:	f001 fac2 	bl	80107b2 <vClearInterruptMaskFromISR>
}
 800f22e:	0028      	movs	r0, r5
 800f230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f232:	6843      	ldr	r3, [r0, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d0dc      	beq.n	800f1f2 <xQueueGiveFromISR+0x1e>
 800f238:	b672      	cpsid	i
 800f23a:	e7fe      	b.n	800f23a <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800f23c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f23e:	3301      	adds	r3, #1
 800f240:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f242:	2501      	movs	r5, #1
 800f244:	e7f0      	b.n	800f228 <xQueueGiveFromISR+0x54>
 800f246:	2501      	movs	r5, #1
 800f248:	e7ee      	b.n	800f228 <xQueueGiveFromISR+0x54>

0800f24a <xQueueGenericReceive>:
{
 800f24a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f24c:	46c6      	mov	lr, r8
 800f24e:	b500      	push	{lr}
 800f250:	b084      	sub	sp, #16
 800f252:	0004      	movs	r4, r0
 800f254:	000e      	movs	r6, r1
 800f256:	9201      	str	r2, [sp, #4]
 800f258:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800f25a:	2800      	cmp	r0, #0
 800f25c:	d006      	beq.n	800f26c <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f25e:	2900      	cmp	r1, #0
 800f260:	d106      	bne.n	800f270 <xQueueGenericReceive+0x26>
 800f262:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f264:	2b00      	cmp	r3, #0
 800f266:	d003      	beq.n	800f270 <xQueueGenericReceive+0x26>
 800f268:	b672      	cpsid	i
 800f26a:	e7fe      	b.n	800f26a <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800f26c:	b672      	cpsid	i
 800f26e:	e7fe      	b.n	800f26e <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f270:	f000 fe3e 	bl	800fef0 <xTaskGetSchedulerState>
 800f274:	2800      	cmp	r0, #0
 800f276:	d104      	bne.n	800f282 <xQueueGenericReceive+0x38>
 800f278:	9b01      	ldr	r3, [sp, #4]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d004      	beq.n	800f288 <xQueueGenericReceive+0x3e>
 800f27e:	b672      	cpsid	i
 800f280:	e7fe      	b.n	800f280 <xQueueGenericReceive+0x36>
 800f282:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800f284:	2700      	movs	r7, #0
 800f286:	e04b      	b.n	800f320 <xQueueGenericReceive+0xd6>
 800f288:	2500      	movs	r5, #0
 800f28a:	e7fb      	b.n	800f284 <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800f28c:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f28e:	0031      	movs	r1, r6
 800f290:	0020      	movs	r0, r4
 800f292:	f7ff fdfd 	bl	800ee90 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800f296:	4643      	mov	r3, r8
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d11a      	bne.n	800f2d2 <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800f29c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f29e:	3b01      	subs	r3, #1
 800f2a0:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f2a2:	6823      	ldr	r3, [r4, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d102      	bne.n	800f2ae <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f2a8:	f000 ff62 	bl	8010170 <pvTaskIncrementMutexHeldCount>
 800f2ac:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2ae:	6923      	ldr	r3, [r4, #16]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d007      	beq.n	800f2c4 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f2b4:	0020      	movs	r0, r4
 800f2b6:	3010      	adds	r0, #16
 800f2b8:	f000 fd92 	bl	800fde0 <xTaskRemoveFromEventList>
 800f2bc:	2801      	cmp	r0, #1
 800f2be:	d101      	bne.n	800f2c4 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800f2c0:	f001 fa4a 	bl	8010758 <vPortYield>
				taskEXIT_CRITICAL();
 800f2c4:	f001 fa60 	bl	8010788 <vPortExitCritical>
				return pdPASS;
 800f2c8:	2001      	movs	r0, #1
}
 800f2ca:	b004      	add	sp, #16
 800f2cc:	bc04      	pop	{r2}
 800f2ce:	4690      	mov	r8, r2
 800f2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800f2d2:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d0f4      	beq.n	800f2c4 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f2da:	0020      	movs	r0, r4
 800f2dc:	3024      	adds	r0, #36	; 0x24
 800f2de:	f000 fd7f 	bl	800fde0 <xTaskRemoveFromEventList>
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	d0ee      	beq.n	800f2c4 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800f2e6:	f001 fa37 	bl	8010758 <vPortYield>
 800f2ea:	e7eb      	b.n	800f2c4 <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800f2ec:	f001 fa4c 	bl	8010788 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f2f0:	2000      	movs	r0, #0
 800f2f2:	e7ea      	b.n	800f2ca <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800f2f4:	a802      	add	r0, sp, #8
 800f2f6:	f000 fdb3 	bl	800fe60 <vTaskSetTimeOutState>
 800f2fa:	e01b      	b.n	800f334 <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800f2fc:	6467      	str	r7, [r4, #68]	; 0x44
 800f2fe:	e022      	b.n	800f346 <xQueueGenericReceive+0xfc>
 800f300:	64a7      	str	r7, [r4, #72]	; 0x48
 800f302:	e023      	b.n	800f34c <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800f304:	f001 fa34 	bl	8010770 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f308:	6860      	ldr	r0, [r4, #4]
 800f30a:	f000 fe01 	bl	800ff10 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800f30e:	f001 fa3b 	bl	8010788 <vPortExitCritical>
 800f312:	e02d      	b.n	800f370 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800f314:	0020      	movs	r0, r4
 800f316:	f7ff fdcd 	bl	800eeb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f31a:	f000 fb83 	bl	800fa24 <xTaskResumeAll>
 800f31e:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800f320:	f001 fa26 	bl	8010770 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f324:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f326:	2b00      	cmp	r3, #0
 800f328:	d1b0      	bne.n	800f28c <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f32a:	9b01      	ldr	r3, [sp, #4]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d0dd      	beq.n	800f2ec <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800f330:	2d00      	cmp	r5, #0
 800f332:	d0df      	beq.n	800f2f4 <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800f334:	f001 fa28 	bl	8010788 <vPortExitCritical>
		vTaskSuspendAll();
 800f338:	f000 fad4 	bl	800f8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f33c:	f001 fa18 	bl	8010770 <vPortEnterCritical>
 800f340:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f342:	3301      	adds	r3, #1
 800f344:	d0da      	beq.n	800f2fc <xQueueGenericReceive+0xb2>
 800f346:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f348:	3301      	adds	r3, #1
 800f34a:	d0d9      	beq.n	800f300 <xQueueGenericReceive+0xb6>
 800f34c:	f001 fa1c 	bl	8010788 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f350:	a901      	add	r1, sp, #4
 800f352:	a802      	add	r0, sp, #8
 800f354:	f000 fd94 	bl	800fe80 <xTaskCheckForTimeOut>
 800f358:	2800      	cmp	r0, #0
 800f35a:	d118      	bne.n	800f38e <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800f35c:	f001 fa08 	bl	8010770 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f360:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800f362:	f001 fa11 	bl	8010788 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f366:	2d00      	cmp	r5, #0
 800f368:	d1d4      	bne.n	800f314 <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f36a:	6823      	ldr	r3, [r4, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d0c9      	beq.n	800f304 <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f370:	0020      	movs	r0, r4
 800f372:	3024      	adds	r0, #36	; 0x24
 800f374:	9901      	ldr	r1, [sp, #4]
 800f376:	f000 fcf5 	bl	800fd64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f37a:	0020      	movs	r0, r4
 800f37c:	f7ff fd9a 	bl	800eeb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f380:	f000 fb50 	bl	800fa24 <xTaskResumeAll>
 800f384:	2800      	cmp	r0, #0
 800f386:	d1ca      	bne.n	800f31e <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800f388:	f001 f9e6 	bl	8010758 <vPortYield>
 800f38c:	e7c7      	b.n	800f31e <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800f38e:	0020      	movs	r0, r4
 800f390:	f7ff fd90 	bl	800eeb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f394:	f000 fb46 	bl	800fa24 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800f398:	2000      	movs	r0, #0
 800f39a:	e796      	b.n	800f2ca <xQueueGenericReceive+0x80>

0800f39c <xQueueReceiveFromISR>:
{
 800f39c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	0004      	movs	r4, r0
 800f3a2:	000f      	movs	r7, r1
 800f3a4:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	d006      	beq.n	800f3b8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3aa:	2900      	cmp	r1, #0
 800f3ac:	d106      	bne.n	800f3bc <xQueueReceiveFromISR+0x20>
 800f3ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d003      	beq.n	800f3bc <xQueueReceiveFromISR+0x20>
 800f3b4:	b672      	cpsid	i
 800f3b6:	e7fe      	b.n	800f3b6 <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800f3b8:	b672      	cpsid	i
 800f3ba:	e7fe      	b.n	800f3ba <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f3bc:	f001 f9f4 	bl	80107a8 <ulSetInterruptMaskFromISR>
 800f3c0:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800f3c4:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d01b      	beq.n	800f402 <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f3ca:	0039      	movs	r1, r7
 800f3cc:	0020      	movs	r0, r4
 800f3ce:	f7ff fd5f 	bl	800ee90 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800f3d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f3d4:	3b01      	subs	r3, #1
 800f3d6:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800f3d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f3da:	3301      	adds	r3, #1
 800f3dc:	d004      	beq.n	800f3e8 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800f3de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800f3e4:	2501      	movs	r5, #1
 800f3e6:	e00c      	b.n	800f402 <xQueueReceiveFromISR+0x66>
 800f3e8:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3ea:	6923      	ldr	r3, [r4, #16]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d008      	beq.n	800f402 <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3f0:	0020      	movs	r0, r4
 800f3f2:	3010      	adds	r0, #16
 800f3f4:	f000 fcf4 	bl	800fde0 <xTaskRemoveFromEventList>
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	d002      	beq.n	800f402 <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800f3fc:	2e00      	cmp	r6, #0
 800f3fe:	d006      	beq.n	800f40e <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f400:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f402:	9801      	ldr	r0, [sp, #4]
 800f404:	f001 f9d5 	bl	80107b2 <vClearInterruptMaskFromISR>
}
 800f408:	0028      	movs	r0, r5
 800f40a:	b003      	add	sp, #12
 800f40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800f40e:	2501      	movs	r5, #1
 800f410:	e7f7      	b.n	800f402 <xQueueReceiveFromISR+0x66>
	...

0800f414 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f414:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f416:	4b0a      	ldr	r3, [pc, #40]	; (800f440 <vQueueAddToRegistry+0x2c>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d009      	beq.n	800f432 <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f41e:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f420:	4c07      	ldr	r4, [pc, #28]	; (800f440 <vQueueAddToRegistry+0x2c>)
 800f422:	00da      	lsls	r2, r3, #3
 800f424:	58a2      	ldr	r2, [r4, r2]
 800f426:	2a00      	cmp	r2, #0
 800f428:	d004      	beq.n	800f434 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f42a:	3301      	adds	r3, #1
 800f42c:	2b08      	cmp	r3, #8
 800f42e:	d1f8      	bne.n	800f422 <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f430:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f432:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f434:	4a02      	ldr	r2, [pc, #8]	; (800f440 <vQueueAddToRegistry+0x2c>)
 800f436:	00db      	lsls	r3, r3, #3
 800f438:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f43a:	18d3      	adds	r3, r2, r3
 800f43c:	6058      	str	r0, [r3, #4]
				break;
 800f43e:	e7f7      	b.n	800f430 <vQueueAddToRegistry+0x1c>
 800f440:	2000709c 	.word	0x2000709c

0800f444 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800f444:	b570      	push	{r4, r5, r6, lr}
 800f446:	0004      	movs	r4, r0
 800f448:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f44a:	f001 f991 	bl	8010770 <vPortEnterCritical>
 800f44e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f450:	3301      	adds	r3, #1
 800f452:	d00b      	beq.n	800f46c <vQueueWaitForMessageRestricted+0x28>
 800f454:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f456:	3301      	adds	r3, #1
 800f458:	d00b      	beq.n	800f472 <vQueueWaitForMessageRestricted+0x2e>
 800f45a:	f001 f995 	bl	8010788 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f45e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f460:	2b00      	cmp	r3, #0
 800f462:	d009      	beq.n	800f478 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f464:	0020      	movs	r0, r4
 800f466:	f7ff fd25 	bl	800eeb4 <prvUnlockQueue>
	}
 800f46a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800f46c:	2300      	movs	r3, #0
 800f46e:	6463      	str	r3, [r4, #68]	; 0x44
 800f470:	e7f0      	b.n	800f454 <vQueueWaitForMessageRestricted+0x10>
 800f472:	2300      	movs	r3, #0
 800f474:	64a3      	str	r3, [r4, #72]	; 0x48
 800f476:	e7f0      	b.n	800f45a <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f478:	0020      	movs	r0, r4
 800f47a:	3024      	adds	r0, #36	; 0x24
 800f47c:	0029      	movs	r1, r5
 800f47e:	f000 fc95 	bl	800fdac <vTaskPlaceOnEventListRestricted>
 800f482:	e7ef      	b.n	800f464 <vQueueWaitForMessageRestricted+0x20>

0800f484 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800f484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f486:	46d6      	mov	lr, sl
 800f488:	464f      	mov	r7, r9
 800f48a:	4646      	mov	r6, r8
 800f48c:	b5c0      	push	{r6, r7, lr}
 800f48e:	0006      	movs	r6, r0
 800f490:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f492:	6808      	ldr	r0, [r1, #0]
 800f494:	2800      	cmp	r0, #0
 800f496:	d044      	beq.n	800f522 <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f498:	684b      	ldr	r3, [r1, #4]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	604b      	str	r3, [r1, #4]
 800f49e:	2208      	movs	r2, #8
 800f4a0:	4690      	mov	r8, r2
 800f4a2:	4488      	add	r8, r1
 800f4a4:	4543      	cmp	r3, r8
 800f4a6:	d006      	beq.n	800f4b6 <prvListTaskWithinSingleList+0x32>
 800f4a8:	684b      	ldr	r3, [r1, #4]
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800f4ae:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f4b0:	2302      	movs	r3, #2
 800f4b2:	469a      	mov	sl, r3
 800f4b4:	e018      	b.n	800f4e8 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f4b6:	68cb      	ldr	r3, [r1, #12]
 800f4b8:	604b      	str	r3, [r1, #4]
 800f4ba:	e7f5      	b.n	800f4a8 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f4bc:	68cb      	ldr	r3, [r1, #12]
 800f4be:	604b      	str	r3, [r1, #4]
 800f4c0:	e017      	b.n	800f4f2 <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800f4c2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f4c4:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800f4c6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800f4c8:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800f4ca:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f4cc:	783b      	ldrb	r3, [r7, #0]
 800f4ce:	2ba5      	cmp	r3, #165	; 0xa5
 800f4d0:	d125      	bne.n	800f51e <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800f4d2:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800f4d4:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f4d6:	5cfc      	ldrb	r4, [r7, r3]
 800f4d8:	2ca5      	cmp	r4, #165	; 0xa5
 800f4da:	d0fb      	beq.n	800f4d4 <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f4dc:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800f4de:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800f4e0:	3001      	adds	r0, #1
 800f4e2:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800f4e4:	45a9      	cmp	r9, r5
 800f4e6:	d01c      	beq.n	800f522 <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f4e8:	684b      	ldr	r3, [r1, #4]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	604b      	str	r3, [r1, #4]
 800f4ee:	4598      	cmp	r8, r3
 800f4f0:	d0e4      	beq.n	800f4bc <prvListTaskWithinSingleList+0x38>
 800f4f2:	684b      	ldr	r3, [r1, #4]
 800f4f4:	68dd      	ldr	r5, [r3, #12]
 800f4f6:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800f4f8:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800f4fa:	002b      	movs	r3, r5
 800f4fc:	3334      	adds	r3, #52	; 0x34
 800f4fe:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800f500:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800f502:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800f504:	4663      	mov	r3, ip
 800f506:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800f508:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f50a:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800f50c:	4663      	mov	r3, ip
 800f50e:	2b03      	cmp	r3, #3
 800f510:	d1d7      	bne.n	800f4c2 <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800f512:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f514:	2b00      	cmp	r3, #0
 800f516:	d0d4      	beq.n	800f4c2 <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f518:	4653      	mov	r3, sl
 800f51a:	7333      	strb	r3, [r6, #12]
 800f51c:	e7d1      	b.n	800f4c2 <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800f51e:	2300      	movs	r3, #0
 800f520:	e7dc      	b.n	800f4dc <prvListTaskWithinSingleList+0x58>
	}
 800f522:	bc1c      	pop	{r2, r3, r4}
 800f524:	4690      	mov	r8, r2
 800f526:	4699      	mov	r9, r3
 800f528:	46a2      	mov	sl, r4
 800f52a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f52c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f52c:	4b08      	ldr	r3, [pc, #32]	; (800f550 <prvResetNextTaskUnblockTime+0x24>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d007      	beq.n	800f546 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f536:	4b06      	ldr	r3, [pc, #24]	; (800f550 <prvResetNextTaskUnblockTime+0x24>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800f53c:	68db      	ldr	r3, [r3, #12]
 800f53e:	685a      	ldr	r2, [r3, #4]
 800f540:	4b04      	ldr	r3, [pc, #16]	; (800f554 <prvResetNextTaskUnblockTime+0x28>)
 800f542:	601a      	str	r2, [r3, #0]
	}
}
 800f544:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800f546:	4b03      	ldr	r3, [pc, #12]	; (800f554 <prvResetNextTaskUnblockTime+0x28>)
 800f548:	2201      	movs	r2, #1
 800f54a:	4252      	negs	r2, r2
 800f54c:	601a      	str	r2, [r3, #0]
 800f54e:	e7f9      	b.n	800f544 <prvResetNextTaskUnblockTime+0x18>
 800f550:	20001f88 	.word	0x20001f88
 800f554:	200000b0 	.word	0x200000b0

0800f558 <prvAddCurrentTaskToDelayedList>:
{
 800f558:	b510      	push	{r4, lr}
 800f55a:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800f55c:	4b0e      	ldr	r3, [pc, #56]	; (800f598 <prvAddCurrentTaskToDelayedList+0x40>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800f562:	4b0e      	ldr	r3, [pc, #56]	; (800f59c <prvAddCurrentTaskToDelayedList+0x44>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	4283      	cmp	r3, r0
 800f568:	d80d      	bhi.n	800f586 <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f56a:	4b0d      	ldr	r3, [pc, #52]	; (800f5a0 <prvAddCurrentTaskToDelayedList+0x48>)
 800f56c:	6818      	ldr	r0, [r3, #0]
 800f56e:	4b0a      	ldr	r3, [pc, #40]	; (800f598 <prvAddCurrentTaskToDelayedList+0x40>)
 800f570:	6819      	ldr	r1, [r3, #0]
 800f572:	3104      	adds	r1, #4
 800f574:	f7ff fc24 	bl	800edc0 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800f578:	4b0a      	ldr	r3, [pc, #40]	; (800f5a4 <prvAddCurrentTaskToDelayedList+0x4c>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	42a3      	cmp	r3, r4
 800f57e:	d909      	bls.n	800f594 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800f580:	4b08      	ldr	r3, [pc, #32]	; (800f5a4 <prvAddCurrentTaskToDelayedList+0x4c>)
 800f582:	601c      	str	r4, [r3, #0]
}
 800f584:	e006      	b.n	800f594 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f586:	4b08      	ldr	r3, [pc, #32]	; (800f5a8 <prvAddCurrentTaskToDelayedList+0x50>)
 800f588:	6818      	ldr	r0, [r3, #0]
 800f58a:	4b03      	ldr	r3, [pc, #12]	; (800f598 <prvAddCurrentTaskToDelayedList+0x40>)
 800f58c:	6819      	ldr	r1, [r3, #0]
 800f58e:	3104      	adds	r1, #4
 800f590:	f7ff fc16 	bl	800edc0 <vListInsert>
}
 800f594:	bd10      	pop	{r4, pc}
 800f596:	46c0      	nop			; (mov r8, r8)
 800f598:	20001f84 	.word	0x20001f84
 800f59c:	200020a4 	.word	0x200020a4
 800f5a0:	20001f88 	.word	0x20001f88
 800f5a4:	200000b0 	.word	0x200000b0
 800f5a8:	20001f8c 	.word	0x20001f8c

0800f5ac <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800f5ac:	b510      	push	{r4, lr}
 800f5ae:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800f5b0:	f005 fcbc 	bl	8014f2c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f5b4:	0020      	movs	r0, r4
 800f5b6:	f7f0 fdaf 	bl	8000118 <strlen>
 800f5ba:	0003      	movs	r3, r0
 800f5bc:	280b      	cmp	r0, #11
 800f5be:	dc08      	bgt.n	800f5d2 <prvWriteNameToBuffer+0x26>
 800f5c0:	1820      	adds	r0, r4, r0
 800f5c2:	0022      	movs	r2, r4
 800f5c4:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800f5c6:	2320      	movs	r3, #32
 800f5c8:	7003      	strb	r3, [r0, #0]
 800f5ca:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f5cc:	4290      	cmp	r0, r2
 800f5ce:	d1fb      	bne.n	800f5c8 <prvWriteNameToBuffer+0x1c>
 800f5d0:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800f5d2:	18e0      	adds	r0, r4, r3
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800f5d8:	bd10      	pop	{r4, pc}
	...

0800f5dc <xTaskGenericCreate>:
{
 800f5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5de:	46d6      	mov	lr, sl
 800f5e0:	4647      	mov	r7, r8
 800f5e2:	b580      	push	{r7, lr}
 800f5e4:	b085      	sub	sp, #20
 800f5e6:	9002      	str	r0, [sp, #8]
 800f5e8:	000d      	movs	r5, r1
 800f5ea:	0016      	movs	r6, r2
 800f5ec:	9303      	str	r3, [sp, #12]
 800f5ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	d101      	bne.n	800f5f8 <xTaskGenericCreate+0x1c>
 800f5f4:	b672      	cpsid	i
 800f5f6:	e7fe      	b.n	800f5f6 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800f5f8:	2f06      	cmp	r7, #6
 800f5fa:	d901      	bls.n	800f600 <xTaskGenericCreate+0x24>
 800f5fc:	b672      	cpsid	i
 800f5fe:	e7fe      	b.n	800f5fe <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f602:	2b00      	cmp	r3, #0
 800f604:	d106      	bne.n	800f614 <xTaskGenericCreate+0x38>
 800f606:	0090      	lsls	r0, r2, #2
 800f608:	f001 f934 	bl	8010874 <pvPortMalloc>
 800f60c:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800f60e:	2800      	cmp	r0, #0
 800f610:	d100      	bne.n	800f614 <xTaskGenericCreate+0x38>
 800f612:	e0b7      	b.n	800f784 <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800f614:	2060      	movs	r0, #96	; 0x60
 800f616:	f001 f92d 	bl	8010874 <pvPortMalloc>
 800f61a:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800f61c:	d100      	bne.n	800f620 <xTaskGenericCreate+0x44>
 800f61e:	e08b      	b.n	800f738 <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800f620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f622:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800f624:	00b2      	lsls	r2, r6, #2
 800f626:	21a5      	movs	r1, #165	; 0xa5
 800f628:	0018      	movs	r0, r3
 800f62a:	f005 fa49 	bl	8014ac0 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800f62e:	4b57      	ldr	r3, [pc, #348]	; (800f78c <xTaskGenericCreate+0x1b0>)
 800f630:	18f3      	adds	r3, r6, r3
 800f632:	009b      	lsls	r3, r3, #2
 800f634:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f636:	4694      	mov	ip, r2
 800f638:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f63a:	2207      	movs	r2, #7
 800f63c:	4393      	bics	r3, r2
 800f63e:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f640:	782a      	ldrb	r2, [r5, #0]
 800f642:	2334      	movs	r3, #52	; 0x34
 800f644:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800f646:	782b      	ldrb	r3, [r5, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d000      	beq.n	800f64e <xTaskGenericCreate+0x72>
 800f64c:	e07e      	b.n	800f74c <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f64e:	2500      	movs	r5, #0
 800f650:	2340      	movs	r3, #64	; 0x40
 800f652:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800f654:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800f656:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800f658:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800f65a:	1d23      	adds	r3, r4, #4
 800f65c:	9301      	str	r3, [sp, #4]
 800f65e:	0018      	movs	r0, r3
 800f660:	f7ff fb9f 	bl	800eda2 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800f664:	0020      	movs	r0, r4
 800f666:	3018      	adds	r0, #24
 800f668:	f7ff fb9b 	bl	800eda2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800f66c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f66e:	2307      	movs	r3, #7
 800f670:	1bdb      	subs	r3, r3, r7
 800f672:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800f674:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800f676:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800f678:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800f67a:	235c      	movs	r3, #92	; 0x5c
 800f67c:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f67e:	9a03      	ldr	r2, [sp, #12]
 800f680:	9902      	ldr	r1, [sp, #8]
 800f682:	4650      	mov	r0, sl
 800f684:	f001 f82c 	bl	80106e0 <pxPortInitialiseStack>
 800f688:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800f68a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f68c:	42ab      	cmp	r3, r5
 800f68e:	d000      	beq.n	800f692 <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f690:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800f692:	f001 f86d 	bl	8010770 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800f696:	4a3e      	ldr	r2, [pc, #248]	; (800f790 <xTaskGenericCreate+0x1b4>)
 800f698:	6813      	ldr	r3, [r2, #0]
 800f69a:	3301      	adds	r3, #1
 800f69c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800f69e:	4b3d      	ldr	r3, [pc, #244]	; (800f794 <xTaskGenericCreate+0x1b8>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d162      	bne.n	800f76c <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800f6a6:	4b3b      	ldr	r3, [pc, #236]	; (800f794 <xTaskGenericCreate+0x1b8>)
 800f6a8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f6aa:	6813      	ldr	r3, [r2, #0]
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d120      	bne.n	800f6f2 <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6b0:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f6b2:	3313      	adds	r3, #19
 800f6b4:	4698      	mov	r8, r3
 800f6b6:	4e38      	ldr	r6, [pc, #224]	; (800f798 <xTaskGenericCreate+0x1bc>)
 800f6b8:	4640      	mov	r0, r8
 800f6ba:	4368      	muls	r0, r5
 800f6bc:	1980      	adds	r0, r0, r6
 800f6be:	f7ff fb65 	bl	800ed8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6c2:	3501      	adds	r5, #1
 800f6c4:	2d07      	cmp	r5, #7
 800f6c6:	d1f7      	bne.n	800f6b8 <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800f6c8:	4e34      	ldr	r6, [pc, #208]	; (800f79c <xTaskGenericCreate+0x1c0>)
 800f6ca:	0030      	movs	r0, r6
 800f6cc:	f7ff fb5e 	bl	800ed8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f6d0:	4d33      	ldr	r5, [pc, #204]	; (800f7a0 <xTaskGenericCreate+0x1c4>)
 800f6d2:	0028      	movs	r0, r5
 800f6d4:	f7ff fb5a 	bl	800ed8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f6d8:	4832      	ldr	r0, [pc, #200]	; (800f7a4 <xTaskGenericCreate+0x1c8>)
 800f6da:	f7ff fb57 	bl	800ed8c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f6de:	4832      	ldr	r0, [pc, #200]	; (800f7a8 <xTaskGenericCreate+0x1cc>)
 800f6e0:	f7ff fb54 	bl	800ed8c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f6e4:	4831      	ldr	r0, [pc, #196]	; (800f7ac <xTaskGenericCreate+0x1d0>)
 800f6e6:	f7ff fb51 	bl	800ed8c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f6ea:	4b31      	ldr	r3, [pc, #196]	; (800f7b0 <xTaskGenericCreate+0x1d4>)
 800f6ec:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f6ee:	4b31      	ldr	r3, [pc, #196]	; (800f7b4 <xTaskGenericCreate+0x1d8>)
 800f6f0:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800f6f2:	4a31      	ldr	r2, [pc, #196]	; (800f7b8 <xTaskGenericCreate+0x1dc>)
 800f6f4:	6813      	ldr	r3, [r2, #0]
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f6fa:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800f6fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f6fe:	4a2f      	ldr	r2, [pc, #188]	; (800f7bc <xTaskGenericCreate+0x1e0>)
 800f700:	6812      	ldr	r2, [r2, #0]
 800f702:	4293      	cmp	r3, r2
 800f704:	d901      	bls.n	800f70a <xTaskGenericCreate+0x12e>
 800f706:	4a2d      	ldr	r2, [pc, #180]	; (800f7bc <xTaskGenericCreate+0x1e0>)
 800f708:	6013      	str	r3, [r2, #0]
 800f70a:	2014      	movs	r0, #20
 800f70c:	4358      	muls	r0, r3
 800f70e:	4b22      	ldr	r3, [pc, #136]	; (800f798 <xTaskGenericCreate+0x1bc>)
 800f710:	18c0      	adds	r0, r0, r3
 800f712:	9901      	ldr	r1, [sp, #4]
 800f714:	f7ff fb48 	bl	800eda8 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800f718:	f001 f836 	bl	8010788 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800f71c:	4b28      	ldr	r3, [pc, #160]	; (800f7c0 <xTaskGenericCreate+0x1e4>)
 800f71e:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800f720:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800f722:	2b00      	cmp	r3, #0
 800f724:	d00d      	beq.n	800f742 <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800f726:	4b1b      	ldr	r3, [pc, #108]	; (800f794 <xTaskGenericCreate+0x1b8>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f72c:	42bb      	cmp	r3, r7
 800f72e:	d208      	bcs.n	800f742 <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800f730:	f001 f812 	bl	8010758 <vPortYield>
			xReturn = pdPASS;
 800f734:	2001      	movs	r0, #1
 800f736:	e004      	b.n	800f742 <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800f738:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f73a:	f001 f931 	bl	80109a0 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f73e:	2001      	movs	r0, #1
 800f740:	4240      	negs	r0, r0
}
 800f742:	b005      	add	sp, #20
 800f744:	bc0c      	pop	{r2, r3}
 800f746:	4690      	mov	r8, r2
 800f748:	469a      	mov	sl, r3
 800f74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f74c:	1c6b      	adds	r3, r5, #1
 800f74e:	0022      	movs	r2, r4
 800f750:	3235      	adds	r2, #53	; 0x35
 800f752:	0021      	movs	r1, r4
 800f754:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f756:	7818      	ldrb	r0, [r3, #0]
 800f758:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800f75a:	7818      	ldrb	r0, [r3, #0]
 800f75c:	2800      	cmp	r0, #0
 800f75e:	d100      	bne.n	800f762 <xTaskGenericCreate+0x186>
 800f760:	e775      	b.n	800f64e <xTaskGenericCreate+0x72>
 800f762:	3301      	adds	r3, #1
 800f764:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f766:	4291      	cmp	r1, r2
 800f768:	d1f5      	bne.n	800f756 <xTaskGenericCreate+0x17a>
 800f76a:	e770      	b.n	800f64e <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800f76c:	4b14      	ldr	r3, [pc, #80]	; (800f7c0 <xTaskGenericCreate+0x1e4>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d1be      	bne.n	800f6f2 <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800f774:	4b07      	ldr	r3, [pc, #28]	; (800f794 <xTaskGenericCreate+0x1b8>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f77a:	42bb      	cmp	r3, r7
 800f77c:	d8b9      	bhi.n	800f6f2 <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800f77e:	4b05      	ldr	r3, [pc, #20]	; (800f794 <xTaskGenericCreate+0x1b8>)
 800f780:	601c      	str	r4, [r3, #0]
 800f782:	e7b6      	b.n	800f6f2 <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f784:	2001      	movs	r0, #1
 800f786:	4240      	negs	r0, r0
 800f788:	e7db      	b.n	800f742 <xTaskGenericCreate+0x166>
 800f78a:	46c0      	nop			; (mov r8, r8)
 800f78c:	3fffffff 	.word	0x3fffffff
 800f790:	20002020 	.word	0x20002020
 800f794:	20001f84 	.word	0x20001f84
 800f798:	20001f90 	.word	0x20001f90
 800f79c:	20002038 	.word	0x20002038
 800f7a0:	2000204c 	.word	0x2000204c
 800f7a4:	20002064 	.word	0x20002064
 800f7a8:	20002090 	.word	0x20002090
 800f7ac:	2000207c 	.word	0x2000207c
 800f7b0:	20001f88 	.word	0x20001f88
 800f7b4:	20001f8c 	.word	0x20001f8c
 800f7b8:	2000202c 	.word	0x2000202c
 800f7bc:	20002034 	.word	0x20002034
 800f7c0:	20002078 	.word	0x20002078

0800f7c4 <uxTaskPriorityGet>:
	{
 800f7c4:	b510      	push	{r4, lr}
 800f7c6:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f7c8:	f000 ffd2 	bl	8010770 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f7cc:	2c00      	cmp	r4, #0
 800f7ce:	d004      	beq.n	800f7da <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f7d0:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f7d2:	f000 ffd9 	bl	8010788 <vPortExitCritical>
	}
 800f7d6:	0020      	movs	r0, r4
 800f7d8:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f7da:	4b01      	ldr	r3, [pc, #4]	; (800f7e0 <uxTaskPriorityGet+0x1c>)
 800f7dc:	681c      	ldr	r4, [r3, #0]
 800f7de:	e7f7      	b.n	800f7d0 <uxTaskPriorityGet+0xc>
 800f7e0:	20001f84 	.word	0x20001f84

0800f7e4 <vTaskPrioritySet>:
	{
 800f7e4:	b570      	push	{r4, r5, r6, lr}
 800f7e6:	0004      	movs	r4, r0
 800f7e8:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800f7ea:	2906      	cmp	r1, #6
 800f7ec:	d901      	bls.n	800f7f2 <vTaskPrioritySet+0xe>
 800f7ee:	b672      	cpsid	i
 800f7f0:	e7fe      	b.n	800f7f0 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800f7f2:	f000 ffbd 	bl	8010770 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f7f6:	2c00      	cmp	r4, #0
 800f7f8:	d101      	bne.n	800f7fe <vTaskPrioritySet+0x1a>
 800f7fa:	4b21      	ldr	r3, [pc, #132]	; (800f880 <vTaskPrioritySet+0x9c>)
 800f7fc:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f7fe:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f800:	4295      	cmp	r5, r2
 800f802:	d032      	beq.n	800f86a <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800f804:	d934      	bls.n	800f870 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800f806:	4b1e      	ldr	r3, [pc, #120]	; (800f880 <vTaskPrioritySet+0x9c>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	42a3      	cmp	r3, r4
 800f80c:	d036      	beq.n	800f87c <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f80e:	4b1c      	ldr	r3, [pc, #112]	; (800f880 <vTaskPrioritySet+0x9c>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f814:	2600      	movs	r6, #0
 800f816:	429d      	cmp	r5, r3
 800f818:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f81a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f81c:	428a      	cmp	r2, r1
 800f81e:	d100      	bne.n	800f822 <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800f820:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800f822:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f824:	69a3      	ldr	r3, [r4, #24]
 800f826:	2b00      	cmp	r3, #0
 800f828:	db02      	blt.n	800f830 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f82a:	2207      	movs	r2, #7
 800f82c:	1b55      	subs	r5, r2, r5
 800f82e:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f830:	2314      	movs	r3, #20
 800f832:	434b      	muls	r3, r1
 800f834:	4a13      	ldr	r2, [pc, #76]	; (800f884 <vTaskPrioritySet+0xa0>)
 800f836:	189b      	adds	r3, r3, r2
 800f838:	6962      	ldr	r2, [r4, #20]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d111      	bne.n	800f862 <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f83e:	1d25      	adds	r5, r4, #4
 800f840:	0028      	movs	r0, r5
 800f842:	f7ff fad4 	bl	800edee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f846:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f848:	4a0f      	ldr	r2, [pc, #60]	; (800f888 <vTaskPrioritySet+0xa4>)
 800f84a:	6812      	ldr	r2, [r2, #0]
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d901      	bls.n	800f854 <vTaskPrioritySet+0x70>
 800f850:	4a0d      	ldr	r2, [pc, #52]	; (800f888 <vTaskPrioritySet+0xa4>)
 800f852:	6013      	str	r3, [r2, #0]
 800f854:	2014      	movs	r0, #20
 800f856:	4358      	muls	r0, r3
 800f858:	4b0a      	ldr	r3, [pc, #40]	; (800f884 <vTaskPrioritySet+0xa0>)
 800f85a:	18c0      	adds	r0, r0, r3
 800f85c:	0029      	movs	r1, r5
 800f85e:	f7ff faa3 	bl	800eda8 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800f862:	2e01      	cmp	r6, #1
 800f864:	d101      	bne.n	800f86a <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800f866:	f000 ff77 	bl	8010758 <vPortYield>
		taskEXIT_CRITICAL();
 800f86a:	f000 ff8d 	bl	8010788 <vPortExitCritical>
	}
 800f86e:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800f870:	4b03      	ldr	r3, [pc, #12]	; (800f880 <vTaskPrioritySet+0x9c>)
 800f872:	681e      	ldr	r6, [r3, #0]
 800f874:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f876:	4273      	negs	r3, r6
 800f878:	415e      	adcs	r6, r3
 800f87a:	e7ce      	b.n	800f81a <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800f87c:	2600      	movs	r6, #0
 800f87e:	e7cc      	b.n	800f81a <vTaskPrioritySet+0x36>
 800f880:	20001f84 	.word	0x20001f84
 800f884:	20001f90 	.word	0x20001f90
 800f888:	20002034 	.word	0x20002034

0800f88c <vTaskStartScheduler>:
{
 800f88c:	b500      	push	{lr}
 800f88e:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f890:	2300      	movs	r3, #0
 800f892:	9303      	str	r3, [sp, #12]
 800f894:	9302      	str	r3, [sp, #8]
 800f896:	9301      	str	r3, [sp, #4]
 800f898:	9300      	str	r3, [sp, #0]
 800f89a:	22a0      	movs	r2, #160	; 0xa0
 800f89c:	490d      	ldr	r1, [pc, #52]	; (800f8d4 <vTaskStartScheduler+0x48>)
 800f89e:	480e      	ldr	r0, [pc, #56]	; (800f8d8 <vTaskStartScheduler+0x4c>)
 800f8a0:	f7ff fe9c 	bl	800f5dc <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f8a4:	2801      	cmp	r0, #1
 800f8a6:	d003      	beq.n	800f8b0 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	d110      	bne.n	800f8ce <vTaskStartScheduler+0x42>
 800f8ac:	b672      	cpsid	i
 800f8ae:	e7fe      	b.n	800f8ae <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800f8b0:	f000 fd68 	bl	8010384 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f8b4:	2801      	cmp	r0, #1
 800f8b6:	d1f7      	bne.n	800f8a8 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f8b8:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f8ba:	4b08      	ldr	r3, [pc, #32]	; (800f8dc <vTaskStartScheduler+0x50>)
 800f8bc:	2201      	movs	r2, #1
 800f8be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f8c0:	4b07      	ldr	r3, [pc, #28]	; (800f8e0 <vTaskStartScheduler+0x54>)
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f8c6:	f7f8 fcf9 	bl	80082bc <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f8ca:	f000 ff1b 	bl	8010704 <xPortStartScheduler>
}
 800f8ce:	b005      	add	sp, #20
 800f8d0:	bd00      	pop	{pc}
 800f8d2:	46c0      	nop			; (mov r8, r8)
 800f8d4:	0801c9c0 	.word	0x0801c9c0
 800f8d8:	0800fb4d 	.word	0x0800fb4d
 800f8dc:	20002078 	.word	0x20002078
 800f8e0:	200020a4 	.word	0x200020a4

0800f8e4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f8e4:	4a02      	ldr	r2, [pc, #8]	; (800f8f0 <vTaskSuspendAll+0xc>)
 800f8e6:	6813      	ldr	r3, [r2, #0]
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	6013      	str	r3, [r2, #0]
}
 800f8ec:	4770      	bx	lr
 800f8ee:	46c0      	nop			; (mov r8, r8)
 800f8f0:	20002028 	.word	0x20002028

0800f8f4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f8f4:	4b01      	ldr	r3, [pc, #4]	; (800f8fc <xTaskGetTickCount+0x8>)
 800f8f6:	6818      	ldr	r0, [r3, #0]
}
 800f8f8:	4770      	bx	lr
 800f8fa:	46c0      	nop			; (mov r8, r8)
 800f8fc:	200020a4 	.word	0x200020a4

0800f900 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800f900:	4b01      	ldr	r3, [pc, #4]	; (800f908 <xTaskGetTickCountFromISR+0x8>)
 800f902:	6818      	ldr	r0, [r3, #0]
}
 800f904:	4770      	bx	lr
 800f906:	46c0      	nop			; (mov r8, r8)
 800f908:	200020a4 	.word	0x200020a4

0800f90c <xTaskIncrementTick>:
{
 800f90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f90e:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f910:	4b39      	ldr	r3, [pc, #228]	; (800f9f8 <xTaskIncrementTick+0xec>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d161      	bne.n	800f9dc <xTaskIncrementTick+0xd0>
		++xTickCount;
 800f918:	4b38      	ldr	r3, [pc, #224]	; (800f9fc <xTaskIncrementTick+0xf0>)
 800f91a:	681a      	ldr	r2, [r3, #0]
 800f91c:	3201      	adds	r2, #1
 800f91e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800f920:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800f922:	2e00      	cmp	r6, #0
 800f924:	d112      	bne.n	800f94c <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800f926:	4b36      	ldr	r3, [pc, #216]	; (800fa00 <xTaskIncrementTick+0xf4>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d001      	beq.n	800f934 <xTaskIncrementTick+0x28>
 800f930:	b672      	cpsid	i
 800f932:	e7fe      	b.n	800f932 <xTaskIncrementTick+0x26>
 800f934:	4a32      	ldr	r2, [pc, #200]	; (800fa00 <xTaskIncrementTick+0xf4>)
 800f936:	6811      	ldr	r1, [r2, #0]
 800f938:	4b32      	ldr	r3, [pc, #200]	; (800fa04 <xTaskIncrementTick+0xf8>)
 800f93a:	6818      	ldr	r0, [r3, #0]
 800f93c:	6010      	str	r0, [r2, #0]
 800f93e:	6019      	str	r1, [r3, #0]
 800f940:	4a31      	ldr	r2, [pc, #196]	; (800fa08 <xTaskIncrementTick+0xfc>)
 800f942:	6813      	ldr	r3, [r2, #0]
 800f944:	3301      	adds	r3, #1
 800f946:	6013      	str	r3, [r2, #0]
 800f948:	f7ff fdf0 	bl	800f52c <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f94c:	4b2f      	ldr	r3, [pc, #188]	; (800fa0c <xTaskIncrementTick+0x100>)
 800f94e:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f950:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f952:	42b3      	cmp	r3, r6
 800f954:	d833      	bhi.n	800f9be <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800f956:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f958:	4d29      	ldr	r5, [pc, #164]	; (800fa00 <xTaskIncrementTick+0xf4>)
 800f95a:	682b      	ldr	r3, [r5, #0]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d029      	beq.n	800f9b6 <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f962:	4b27      	ldr	r3, [pc, #156]	; (800fa00 <xTaskIncrementTick+0xf4>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	68db      	ldr	r3, [r3, #12]
 800f968:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f96a:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800f96c:	429e      	cmp	r6, r3
 800f96e:	d332      	bcc.n	800f9d6 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f970:	1d23      	adds	r3, r4, #4
 800f972:	9301      	str	r3, [sp, #4]
 800f974:	0018      	movs	r0, r3
 800f976:	f7ff fa3a 	bl	800edee <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f97a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d003      	beq.n	800f988 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f980:	0020      	movs	r0, r4
 800f982:	3018      	adds	r0, #24
 800f984:	f7ff fa33 	bl	800edee <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f988:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f98a:	4a21      	ldr	r2, [pc, #132]	; (800fa10 <xTaskIncrementTick+0x104>)
 800f98c:	6812      	ldr	r2, [r2, #0]
 800f98e:	4293      	cmp	r3, r2
 800f990:	d901      	bls.n	800f996 <xTaskIncrementTick+0x8a>
 800f992:	4a1f      	ldr	r2, [pc, #124]	; (800fa10 <xTaskIncrementTick+0x104>)
 800f994:	6013      	str	r3, [r2, #0]
 800f996:	0098      	lsls	r0, r3, #2
 800f998:	18c0      	adds	r0, r0, r3
 800f99a:	0080      	lsls	r0, r0, #2
 800f99c:	4b1d      	ldr	r3, [pc, #116]	; (800fa14 <xTaskIncrementTick+0x108>)
 800f99e:	18c0      	adds	r0, r0, r3
 800f9a0:	9901      	ldr	r1, [sp, #4]
 800f9a2:	f7ff fa01 	bl	800eda8 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f9a6:	4b1c      	ldr	r3, [pc, #112]	; (800fa18 <xTaskIncrementTick+0x10c>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d3d3      	bcc.n	800f95a <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800f9b2:	2701      	movs	r7, #1
 800f9b4:	e7d1      	b.n	800f95a <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800f9b6:	4b15      	ldr	r3, [pc, #84]	; (800fa0c <xTaskIncrementTick+0x100>)
 800f9b8:	2201      	movs	r2, #1
 800f9ba:	4252      	negs	r2, r2
 800f9bc:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f9be:	4b16      	ldr	r3, [pc, #88]	; (800fa18 <xTaskIncrementTick+0x10c>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9c4:	0093      	lsls	r3, r2, #2
 800f9c6:	189b      	adds	r3, r3, r2
 800f9c8:	009b      	lsls	r3, r3, #2
 800f9ca:	4a12      	ldr	r2, [pc, #72]	; (800fa14 <xTaskIncrementTick+0x108>)
 800f9cc:	589b      	ldr	r3, [r3, r2]
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d909      	bls.n	800f9e6 <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800f9d2:	2701      	movs	r7, #1
 800f9d4:	e007      	b.n	800f9e6 <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800f9d6:	4a0d      	ldr	r2, [pc, #52]	; (800fa0c <xTaskIncrementTick+0x100>)
 800f9d8:	6013      	str	r3, [r2, #0]
							break;
 800f9da:	e7f0      	b.n	800f9be <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800f9dc:	4a0f      	ldr	r2, [pc, #60]	; (800fa1c <xTaskIncrementTick+0x110>)
 800f9de:	6813      	ldr	r3, [r2, #0]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f9e4:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800f9e6:	4b0e      	ldr	r3, [pc, #56]	; (800fa20 <xTaskIncrementTick+0x114>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d000      	beq.n	800f9f0 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800f9ee:	2701      	movs	r7, #1
}
 800f9f0:	0038      	movs	r0, r7
 800f9f2:	b003      	add	sp, #12
 800f9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9f6:	46c0      	nop			; (mov r8, r8)
 800f9f8:	20002028 	.word	0x20002028
 800f9fc:	200020a4 	.word	0x200020a4
 800fa00:	20001f88 	.word	0x20001f88
 800fa04:	20001f8c 	.word	0x20001f8c
 800fa08:	20002060 	.word	0x20002060
 800fa0c:	200000b0 	.word	0x200000b0
 800fa10:	20002034 	.word	0x20002034
 800fa14:	20001f90 	.word	0x20001f90
 800fa18:	20001f84 	.word	0x20001f84
 800fa1c:	20002024 	.word	0x20002024
 800fa20:	200020a8 	.word	0x200020a8

0800fa24 <xTaskResumeAll>:
{
 800fa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800fa26:	4b2f      	ldr	r3, [pc, #188]	; (800fae4 <xTaskResumeAll+0xc0>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d101      	bne.n	800fa32 <xTaskResumeAll+0xe>
 800fa2e:	b672      	cpsid	i
 800fa30:	e7fe      	b.n	800fa30 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800fa32:	f000 fe9d 	bl	8010770 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800fa36:	4b2b      	ldr	r3, [pc, #172]	; (800fae4 <xTaskResumeAll+0xc0>)
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	3a01      	subs	r2, #1
 800fa3c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa3e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800fa40:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa42:	42a3      	cmp	r3, r4
 800fa44:	d105      	bne.n	800fa52 <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fa46:	4b28      	ldr	r3, [pc, #160]	; (800fae8 <xTaskResumeAll+0xc4>)
 800fa48:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800fa4a:	4d28      	ldr	r5, [pc, #160]	; (800faec <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fa4c:	42a3      	cmp	r3, r4
 800fa4e:	d12a      	bne.n	800faa6 <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800fa50:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800fa52:	f000 fe99 	bl	8010788 <vPortExitCritical>
}
 800fa56:	0020      	movs	r0, r4
 800fa58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800fa5a:	0098      	lsls	r0, r3, #2
 800fa5c:	18c0      	adds	r0, r0, r3
 800fa5e:	0080      	lsls	r0, r0, #2
 800fa60:	4b23      	ldr	r3, [pc, #140]	; (800faf0 <xTaskResumeAll+0xcc>)
 800fa62:	18c0      	adds	r0, r0, r3
 800fa64:	0021      	movs	r1, r4
 800fa66:	f7ff f99f 	bl	800eda8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa6a:	4b22      	ldr	r3, [pc, #136]	; (800faf4 <xTaskResumeAll+0xd0>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d214      	bcs.n	800faa0 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa76:	6833      	ldr	r3, [r6, #0]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d016      	beq.n	800faaa <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800fa7c:	68eb      	ldr	r3, [r5, #12]
 800fa7e:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa80:	0038      	movs	r0, r7
 800fa82:	3018      	adds	r0, #24
 800fa84:	f7ff f9b3 	bl	800edee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fa88:	1d3c      	adds	r4, r7, #4
 800fa8a:	0020      	movs	r0, r4
 800fa8c:	f7ff f9af 	bl	800edee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa92:	4a19      	ldr	r2, [pc, #100]	; (800faf8 <xTaskResumeAll+0xd4>)
 800fa94:	6812      	ldr	r2, [r2, #0]
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d9df      	bls.n	800fa5a <xTaskResumeAll+0x36>
 800fa9a:	4a17      	ldr	r2, [pc, #92]	; (800faf8 <xTaskResumeAll+0xd4>)
 800fa9c:	6013      	str	r3, [r2, #0]
 800fa9e:	e7dc      	b.n	800fa5a <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800faa0:	4b16      	ldr	r3, [pc, #88]	; (800fafc <xTaskResumeAll+0xd8>)
 800faa2:	2201      	movs	r2, #1
 800faa4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800faa6:	4e11      	ldr	r6, [pc, #68]	; (800faec <xTaskResumeAll+0xc8>)
 800faa8:	e7e5      	b.n	800fa76 <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800faaa:	4b15      	ldr	r3, [pc, #84]	; (800fb00 <xTaskResumeAll+0xdc>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d005      	beq.n	800fabe <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800fab2:	4e13      	ldr	r6, [pc, #76]	; (800fb00 <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800fab4:	4c11      	ldr	r4, [pc, #68]	; (800fafc <xTaskResumeAll+0xd8>)
 800fab6:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800fab8:	6833      	ldr	r3, [r6, #0]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d108      	bne.n	800fad0 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800fabe:	4b0f      	ldr	r3, [pc, #60]	; (800fafc <xTaskResumeAll+0xd8>)
 800fac0:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800fac2:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d1c4      	bne.n	800fa52 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800fac8:	f000 fe46 	bl	8010758 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800facc:	3401      	adds	r4, #1
 800face:	e7c0      	b.n	800fa52 <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800fad0:	f7ff ff1c 	bl	800f90c <xTaskIncrementTick>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	d000      	beq.n	800fada <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800fad8:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800fada:	4a09      	ldr	r2, [pc, #36]	; (800fb00 <xTaskResumeAll+0xdc>)
 800fadc:	6813      	ldr	r3, [r2, #0]
 800fade:	3b01      	subs	r3, #1
 800fae0:	6013      	str	r3, [r2, #0]
 800fae2:	e7e9      	b.n	800fab8 <xTaskResumeAll+0x94>
 800fae4:	20002028 	.word	0x20002028
 800fae8:	20002020 	.word	0x20002020
 800faec:	20002064 	.word	0x20002064
 800faf0:	20001f90 	.word	0x20001f90
 800faf4:	20001f84 	.word	0x20001f84
 800faf8:	20002034 	.word	0x20002034
 800fafc:	200020a8 	.word	0x200020a8
 800fb00:	20002024 	.word	0x20002024

0800fb04 <vTaskDelay>:
	{
 800fb04:	b570      	push	{r4, r5, r6, lr}
 800fb06:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fb08:	d016      	beq.n	800fb38 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800fb0a:	4b0d      	ldr	r3, [pc, #52]	; (800fb40 <vTaskDelay+0x3c>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d001      	beq.n	800fb16 <vTaskDelay+0x12>
 800fb12:	b672      	cpsid	i
 800fb14:	e7fe      	b.n	800fb14 <vTaskDelay+0x10>
			vTaskSuspendAll();
 800fb16:	f7ff fee5 	bl	800f8e4 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800fb1a:	4b0a      	ldr	r3, [pc, #40]	; (800fb44 <vTaskDelay+0x40>)
 800fb1c:	681c      	ldr	r4, [r3, #0]
 800fb1e:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fb20:	4b09      	ldr	r3, [pc, #36]	; (800fb48 <vTaskDelay+0x44>)
 800fb22:	6818      	ldr	r0, [r3, #0]
 800fb24:	3004      	adds	r0, #4
 800fb26:	f7ff f962 	bl	800edee <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fb2a:	0020      	movs	r0, r4
 800fb2c:	f7ff fd14 	bl	800f558 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800fb30:	f7ff ff78 	bl	800fa24 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800fb34:	2800      	cmp	r0, #0
 800fb36:	d101      	bne.n	800fb3c <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800fb38:	f000 fe0e 	bl	8010758 <vPortYield>
	}
 800fb3c:	bd70      	pop	{r4, r5, r6, pc}
 800fb3e:	46c0      	nop			; (mov r8, r8)
 800fb40:	20002028 	.word	0x20002028
 800fb44:	200020a4 	.word	0x200020a4
 800fb48:	20001f84 	.word	0x20001f84

0800fb4c <prvIdleTask>:
{
 800fb4c:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800fb4e:	4d16      	ldr	r5, [pc, #88]	; (800fba8 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800fb50:	4e16      	ldr	r6, [pc, #88]	; (800fbac <prvIdleTask+0x60>)
 800fb52:	e003      	b.n	800fb5c <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fb54:	4b16      	ldr	r3, [pc, #88]	; (800fbb0 <prvIdleTask+0x64>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d822      	bhi.n	800fba2 <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800fb5c:	682b      	ldr	r3, [r5, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d0f8      	beq.n	800fb54 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800fb62:	f7ff febf 	bl	800f8e4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800fb66:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800fb68:	f7ff ff5c 	bl	800fa24 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800fb6c:	2c00      	cmp	r4, #0
 800fb6e:	d0f5      	beq.n	800fb5c <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800fb70:	f000 fdfe 	bl	8010770 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800fb74:	4b0d      	ldr	r3, [pc, #52]	; (800fbac <prvIdleTask+0x60>)
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fb7a:	1d20      	adds	r0, r4, #4
 800fb7c:	f7ff f937 	bl	800edee <uxListRemove>
					--uxCurrentNumberOfTasks;
 800fb80:	4a0c      	ldr	r2, [pc, #48]	; (800fbb4 <prvIdleTask+0x68>)
 800fb82:	6813      	ldr	r3, [r2, #0]
 800fb84:	3b01      	subs	r3, #1
 800fb86:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800fb88:	4a07      	ldr	r2, [pc, #28]	; (800fba8 <prvIdleTask+0x5c>)
 800fb8a:	6813      	ldr	r3, [r2, #0]
 800fb8c:	3b01      	subs	r3, #1
 800fb8e:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800fb90:	f000 fdfa 	bl	8010788 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800fb94:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fb96:	f000 ff03 	bl	80109a0 <vPortFree>
		vPortFree( pxTCB );
 800fb9a:	0020      	movs	r0, r4
 800fb9c:	f000 ff00 	bl	80109a0 <vPortFree>
 800fba0:	e7dc      	b.n	800fb5c <prvIdleTask+0x10>
				taskYIELD();
 800fba2:	f000 fdd9 	bl	8010758 <vPortYield>
 800fba6:	e7d9      	b.n	800fb5c <prvIdleTask+0x10>
 800fba8:	20002030 	.word	0x20002030
 800fbac:	20002090 	.word	0x20002090
 800fbb0:	20001f90 	.word	0x20001f90
 800fbb4:	20002020 	.word	0x20002020

0800fbb8 <uxTaskGetSystemState>:
	{
 800fbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbba:	46c6      	mov	lr, r8
 800fbbc:	b500      	push	{lr}
 800fbbe:	0006      	movs	r6, r0
 800fbc0:	000d      	movs	r5, r1
 800fbc2:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800fbc4:	f7ff fe8e 	bl	800f8e4 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800fbc8:	4b1e      	ldr	r3, [pc, #120]	; (800fc44 <uxTaskGetSystemState+0x8c>)
 800fbca:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800fbcc:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800fbce:	42ab      	cmp	r3, r5
 800fbd0:	d831      	bhi.n	800fc36 <uxTaskGetSystemState+0x7e>
 800fbd2:	4d1d      	ldr	r5, [pc, #116]	; (800fc48 <uxTaskGetSystemState+0x90>)
 800fbd4:	002f      	movs	r7, r5
 800fbd6:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800fbd8:	0160      	lsls	r0, r4, #5
 800fbda:	1830      	adds	r0, r6, r0
 800fbdc:	2201      	movs	r2, #1
 800fbde:	0029      	movs	r1, r5
 800fbe0:	f7ff fc50 	bl	800f484 <prvListTaskWithinSingleList>
 800fbe4:	1824      	adds	r4, r4, r0
 800fbe6:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbe8:	42bd      	cmp	r5, r7
 800fbea:	d1f5      	bne.n	800fbd8 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800fbec:	4b17      	ldr	r3, [pc, #92]	; (800fc4c <uxTaskGetSystemState+0x94>)
 800fbee:	6819      	ldr	r1, [r3, #0]
 800fbf0:	0160      	lsls	r0, r4, #5
 800fbf2:	1830      	adds	r0, r6, r0
 800fbf4:	2202      	movs	r2, #2
 800fbf6:	f7ff fc45 	bl	800f484 <prvListTaskWithinSingleList>
 800fbfa:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800fbfc:	4b14      	ldr	r3, [pc, #80]	; (800fc50 <uxTaskGetSystemState+0x98>)
 800fbfe:	6819      	ldr	r1, [r3, #0]
 800fc00:	0160      	lsls	r0, r4, #5
 800fc02:	1830      	adds	r0, r6, r0
 800fc04:	2202      	movs	r2, #2
 800fc06:	f7ff fc3d 	bl	800f484 <prvListTaskWithinSingleList>
 800fc0a:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800fc0c:	0160      	lsls	r0, r4, #5
 800fc0e:	1830      	adds	r0, r6, r0
 800fc10:	2204      	movs	r2, #4
 800fc12:	4910      	ldr	r1, [pc, #64]	; (800fc54 <uxTaskGetSystemState+0x9c>)
 800fc14:	f7ff fc36 	bl	800f484 <prvListTaskWithinSingleList>
 800fc18:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800fc1a:	0160      	lsls	r0, r4, #5
 800fc1c:	1830      	adds	r0, r6, r0
 800fc1e:	2203      	movs	r2, #3
 800fc20:	490d      	ldr	r1, [pc, #52]	; (800fc58 <uxTaskGetSystemState+0xa0>)
 800fc22:	f7ff fc2f 	bl	800f484 <prvListTaskWithinSingleList>
 800fc26:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800fc28:	4643      	mov	r3, r8
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d003      	beq.n	800fc36 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fc2e:	f7f8 fb55 	bl	80082dc <ulMainGetRunTimeCounterValue>
 800fc32:	4643      	mov	r3, r8
 800fc34:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800fc36:	f7ff fef5 	bl	800fa24 <xTaskResumeAll>
	}
 800fc3a:	0020      	movs	r0, r4
 800fc3c:	bc04      	pop	{r2}
 800fc3e:	4690      	mov	r8, r2
 800fc40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc42:	46c0      	nop			; (mov r8, r8)
 800fc44:	20002020 	.word	0x20002020
 800fc48:	20002008 	.word	0x20002008
 800fc4c:	20001f88 	.word	0x20001f88
 800fc50:	20001f8c 	.word	0x20001f8c
 800fc54:	20002090 	.word	0x20002090
 800fc58:	2000207c 	.word	0x2000207c

0800fc5c <vTaskSwitchContext>:
{
 800fc5c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fc5e:	4b3a      	ldr	r3, [pc, #232]	; (800fd48 <vTaskSwitchContext+0xec>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d003      	beq.n	800fc6e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800fc66:	4b39      	ldr	r3, [pc, #228]	; (800fd4c <vTaskSwitchContext+0xf0>)
 800fc68:	2201      	movs	r2, #1
 800fc6a:	601a      	str	r2, [r3, #0]
}
 800fc6c:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800fc6e:	4b37      	ldr	r3, [pc, #220]	; (800fd4c <vTaskSwitchContext+0xf0>)
 800fc70:	2200      	movs	r2, #0
 800fc72:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fc74:	f7f8 fb32 	bl	80082dc <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fc78:	4b35      	ldr	r3, [pc, #212]	; (800fd50 <vTaskSwitchContext+0xf4>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	4298      	cmp	r0, r3
 800fc7e:	d905      	bls.n	800fc8c <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fc80:	4a34      	ldr	r2, [pc, #208]	; (800fd54 <vTaskSwitchContext+0xf8>)
 800fc82:	6812      	ldr	r2, [r2, #0]
 800fc84:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fc86:	1acb      	subs	r3, r1, r3
 800fc88:	181b      	adds	r3, r3, r0
 800fc8a:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800fc8c:	4b30      	ldr	r3, [pc, #192]	; (800fd50 <vTaskSwitchContext+0xf4>)
 800fc8e:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800fc90:	4b30      	ldr	r3, [pc, #192]	; (800fd54 <vTaskSwitchContext+0xf8>)
 800fc92:	681a      	ldr	r2, [r3, #0]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	6812      	ldr	r2, [r2, #0]
 800fc98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d805      	bhi.n	800fcaa <vTaskSwitchContext+0x4e>
 800fc9e:	4b2d      	ldr	r3, [pc, #180]	; (800fd54 <vTaskSwitchContext+0xf8>)
 800fca0:	6818      	ldr	r0, [r3, #0]
 800fca2:	6819      	ldr	r1, [r3, #0]
 800fca4:	3134      	adds	r1, #52	; 0x34
 800fca6:	f7fe f9f7 	bl	800e098 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fcaa:	4b2a      	ldr	r3, [pc, #168]	; (800fd54 <vTaskSwitchContext+0xf8>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fcb0:	2214      	movs	r2, #20
 800fcb2:	4929      	ldr	r1, [pc, #164]	; (800fd58 <vTaskSwitchContext+0xfc>)
 800fcb4:	f004 feec 	bl	8014a90 <memcmp>
 800fcb8:	2800      	cmp	r0, #0
 800fcba:	d005      	beq.n	800fcc8 <vTaskSwitchContext+0x6c>
 800fcbc:	4b25      	ldr	r3, [pc, #148]	; (800fd54 <vTaskSwitchContext+0xf8>)
 800fcbe:	6818      	ldr	r0, [r3, #0]
 800fcc0:	6819      	ldr	r1, [r3, #0]
 800fcc2:	3134      	adds	r1, #52	; 0x34
 800fcc4:	f7fe f9e8 	bl	800e098 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fcc8:	4b24      	ldr	r3, [pc, #144]	; (800fd5c <vTaskSwitchContext+0x100>)
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	0093      	lsls	r3, r2, #2
 800fcce:	189b      	adds	r3, r3, r2
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4a23      	ldr	r2, [pc, #140]	; (800fd60 <vTaskSwitchContext+0x104>)
 800fcd4:	589b      	ldr	r3, [r3, r2]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d115      	bne.n	800fd06 <vTaskSwitchContext+0xaa>
 800fcda:	4b20      	ldr	r3, [pc, #128]	; (800fd5c <vTaskSwitchContext+0x100>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d00f      	beq.n	800fd02 <vTaskSwitchContext+0xa6>
 800fce2:	4a1e      	ldr	r2, [pc, #120]	; (800fd5c <vTaskSwitchContext+0x100>)
 800fce4:	4c1e      	ldr	r4, [pc, #120]	; (800fd60 <vTaskSwitchContext+0x104>)
 800fce6:	0010      	movs	r0, r2
 800fce8:	6813      	ldr	r3, [r2, #0]
 800fcea:	3b01      	subs	r3, #1
 800fcec:	6013      	str	r3, [r2, #0]
 800fcee:	6811      	ldr	r1, [r2, #0]
 800fcf0:	008b      	lsls	r3, r1, #2
 800fcf2:	185b      	adds	r3, r3, r1
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	591b      	ldr	r3, [r3, r4]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d104      	bne.n	800fd06 <vTaskSwitchContext+0xaa>
 800fcfc:	6803      	ldr	r3, [r0, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d1f2      	bne.n	800fce8 <vTaskSwitchContext+0x8c>
 800fd02:	b672      	cpsid	i
 800fd04:	e7fe      	b.n	800fd04 <vTaskSwitchContext+0xa8>
 800fd06:	4b15      	ldr	r3, [pc, #84]	; (800fd5c <vTaskSwitchContext+0x100>)
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	4c15      	ldr	r4, [pc, #84]	; (800fd60 <vTaskSwitchContext+0x104>)
 800fd0c:	0093      	lsls	r3, r2, #2
 800fd0e:	1899      	adds	r1, r3, r2
 800fd10:	0089      	lsls	r1, r1, #2
 800fd12:	1861      	adds	r1, r4, r1
 800fd14:	6848      	ldr	r0, [r1, #4]
 800fd16:	6840      	ldr	r0, [r0, #4]
 800fd18:	6048      	str	r0, [r1, #4]
 800fd1a:	189b      	adds	r3, r3, r2
 800fd1c:	009b      	lsls	r3, r3, #2
 800fd1e:	3308      	adds	r3, #8
 800fd20:	191b      	adds	r3, r3, r4
 800fd22:	4298      	cmp	r0, r3
 800fd24:	d009      	beq.n	800fd3a <vTaskSwitchContext+0xde>
 800fd26:	0093      	lsls	r3, r2, #2
 800fd28:	189a      	adds	r2, r3, r2
 800fd2a:	0092      	lsls	r2, r2, #2
 800fd2c:	4b0c      	ldr	r3, [pc, #48]	; (800fd60 <vTaskSwitchContext+0x104>)
 800fd2e:	189a      	adds	r2, r3, r2
 800fd30:	6853      	ldr	r3, [r2, #4]
 800fd32:	68da      	ldr	r2, [r3, #12]
 800fd34:	4b07      	ldr	r3, [pc, #28]	; (800fd54 <vTaskSwitchContext+0xf8>)
 800fd36:	601a      	str	r2, [r3, #0]
}
 800fd38:	e798      	b.n	800fc6c <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fd3a:	6840      	ldr	r0, [r0, #4]
 800fd3c:	2114      	movs	r1, #20
 800fd3e:	4351      	muls	r1, r2
 800fd40:	1863      	adds	r3, r4, r1
 800fd42:	6058      	str	r0, [r3, #4]
 800fd44:	e7ef      	b.n	800fd26 <vTaskSwitchContext+0xca>
 800fd46:	46c0      	nop			; (mov r8, r8)
 800fd48:	20002028 	.word	0x20002028
 800fd4c:	200020a8 	.word	0x200020a8
 800fd50:	2000201c 	.word	0x2000201c
 800fd54:	20001f84 	.word	0x20001f84
 800fd58:	0801c984 	.word	0x0801c984
 800fd5c:	20002034 	.word	0x20002034
 800fd60:	20001f90 	.word	0x20001f90

0800fd64 <vTaskPlaceOnEventList>:
{
 800fd64:	b570      	push	{r4, r5, r6, lr}
 800fd66:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	d101      	bne.n	800fd70 <vTaskPlaceOnEventList+0xc>
 800fd6c:	b672      	cpsid	i
 800fd6e:	e7fe      	b.n	800fd6e <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd70:	4d0b      	ldr	r5, [pc, #44]	; (800fda0 <vTaskPlaceOnEventList+0x3c>)
 800fd72:	6829      	ldr	r1, [r5, #0]
 800fd74:	3118      	adds	r1, #24
 800fd76:	f7ff f823 	bl	800edc0 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fd7a:	6828      	ldr	r0, [r5, #0]
 800fd7c:	3004      	adds	r0, #4
 800fd7e:	f7ff f836 	bl	800edee <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800fd82:	1c63      	adds	r3, r4, #1
 800fd84:	d005      	beq.n	800fd92 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800fd86:	4b07      	ldr	r3, [pc, #28]	; (800fda4 <vTaskPlaceOnEventList+0x40>)
 800fd88:	6818      	ldr	r0, [r3, #0]
 800fd8a:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fd8c:	f7ff fbe4 	bl	800f558 <prvAddCurrentTaskToDelayedList>
}
 800fd90:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fd92:	4b03      	ldr	r3, [pc, #12]	; (800fda0 <vTaskPlaceOnEventList+0x3c>)
 800fd94:	6819      	ldr	r1, [r3, #0]
 800fd96:	3104      	adds	r1, #4
 800fd98:	4803      	ldr	r0, [pc, #12]	; (800fda8 <vTaskPlaceOnEventList+0x44>)
 800fd9a:	f7ff f805 	bl	800eda8 <vListInsertEnd>
 800fd9e:	e7f7      	b.n	800fd90 <vTaskPlaceOnEventList+0x2c>
 800fda0:	20001f84 	.word	0x20001f84
 800fda4:	200020a4 	.word	0x200020a4
 800fda8:	2000207c 	.word	0x2000207c

0800fdac <vTaskPlaceOnEventListRestricted>:
	{
 800fdac:	b570      	push	{r4, r5, r6, lr}
 800fdae:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800fdb0:	2800      	cmp	r0, #0
 800fdb2:	d101      	bne.n	800fdb8 <vTaskPlaceOnEventListRestricted+0xc>
 800fdb4:	b672      	cpsid	i
 800fdb6:	e7fe      	b.n	800fdb6 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fdb8:	4c07      	ldr	r4, [pc, #28]	; (800fdd8 <vTaskPlaceOnEventListRestricted+0x2c>)
 800fdba:	6821      	ldr	r1, [r4, #0]
 800fdbc:	3118      	adds	r1, #24
 800fdbe:	f7fe fff3 	bl	800eda8 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fdc2:	6820      	ldr	r0, [r4, #0]
 800fdc4:	3004      	adds	r0, #4
 800fdc6:	f7ff f812 	bl	800edee <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800fdca:	4b04      	ldr	r3, [pc, #16]	; (800fddc <vTaskPlaceOnEventListRestricted+0x30>)
 800fdcc:	6818      	ldr	r0, [r3, #0]
 800fdce:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fdd0:	f7ff fbc2 	bl	800f558 <prvAddCurrentTaskToDelayedList>
	}
 800fdd4:	bd70      	pop	{r4, r5, r6, pc}
 800fdd6:	46c0      	nop			; (mov r8, r8)
 800fdd8:	20001f84 	.word	0x20001f84
 800fddc:	200020a4 	.word	0x200020a4

0800fde0 <xTaskRemoveFromEventList>:
{
 800fde0:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800fde2:	68c3      	ldr	r3, [r0, #12]
 800fde4:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800fde6:	2d00      	cmp	r5, #0
 800fde8:	d101      	bne.n	800fdee <xTaskRemoveFromEventList+0xe>
 800fdea:	b672      	cpsid	i
 800fdec:	e7fe      	b.n	800fdec <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fdee:	002c      	movs	r4, r5
 800fdf0:	3418      	adds	r4, #24
 800fdf2:	0020      	movs	r0, r4
 800fdf4:	f7fe fffb 	bl	800edee <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdf8:	4b13      	ldr	r3, [pc, #76]	; (800fe48 <xTaskRemoveFromEventList+0x68>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d11e      	bne.n	800fe3e <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800fe00:	1d2c      	adds	r4, r5, #4
 800fe02:	0020      	movs	r0, r4
 800fe04:	f7fe fff3 	bl	800edee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fe08:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fe0a:	4a10      	ldr	r2, [pc, #64]	; (800fe4c <xTaskRemoveFromEventList+0x6c>)
 800fe0c:	6812      	ldr	r2, [r2, #0]
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d901      	bls.n	800fe16 <xTaskRemoveFromEventList+0x36>
 800fe12:	4a0e      	ldr	r2, [pc, #56]	; (800fe4c <xTaskRemoveFromEventList+0x6c>)
 800fe14:	6013      	str	r3, [r2, #0]
 800fe16:	0098      	lsls	r0, r3, #2
 800fe18:	18c0      	adds	r0, r0, r3
 800fe1a:	0080      	lsls	r0, r0, #2
 800fe1c:	4b0c      	ldr	r3, [pc, #48]	; (800fe50 <xTaskRemoveFromEventList+0x70>)
 800fe1e:	18c0      	adds	r0, r0, r3
 800fe20:	0021      	movs	r1, r4
 800fe22:	f7fe ffc1 	bl	800eda8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fe26:	4b0b      	ldr	r3, [pc, #44]	; (800fe54 <xTaskRemoveFromEventList+0x74>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800fe2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800fe2e:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d903      	bls.n	800fe3c <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800fe34:	4b08      	ldr	r3, [pc, #32]	; (800fe58 <xTaskRemoveFromEventList+0x78>)
 800fe36:	2201      	movs	r2, #1
 800fe38:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800fe3a:	3001      	adds	r0, #1
}
 800fe3c:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fe3e:	0021      	movs	r1, r4
 800fe40:	4806      	ldr	r0, [pc, #24]	; (800fe5c <xTaskRemoveFromEventList+0x7c>)
 800fe42:	f7fe ffb1 	bl	800eda8 <vListInsertEnd>
 800fe46:	e7ee      	b.n	800fe26 <xTaskRemoveFromEventList+0x46>
 800fe48:	20002028 	.word	0x20002028
 800fe4c:	20002034 	.word	0x20002034
 800fe50:	20001f90 	.word	0x20001f90
 800fe54:	20001f84 	.word	0x20001f84
 800fe58:	200020a8 	.word	0x200020a8
 800fe5c:	20002064 	.word	0x20002064

0800fe60 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800fe60:	2800      	cmp	r0, #0
 800fe62:	d006      	beq.n	800fe72 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fe64:	4b04      	ldr	r3, [pc, #16]	; (800fe78 <vTaskSetTimeOutState+0x18>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fe6a:	4b04      	ldr	r3, [pc, #16]	; (800fe7c <vTaskSetTimeOutState+0x1c>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	6043      	str	r3, [r0, #4]
}
 800fe70:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800fe72:	b672      	cpsid	i
 800fe74:	e7fe      	b.n	800fe74 <vTaskSetTimeOutState+0x14>
 800fe76:	46c0      	nop			; (mov r8, r8)
 800fe78:	20002060 	.word	0x20002060
 800fe7c:	200020a4 	.word	0x200020a4

0800fe80 <xTaskCheckForTimeOut>:
{
 800fe80:	b570      	push	{r4, r5, r6, lr}
 800fe82:	0004      	movs	r4, r0
 800fe84:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800fe86:	2800      	cmp	r0, #0
 800fe88:	d003      	beq.n	800fe92 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800fe8a:	2900      	cmp	r1, #0
 800fe8c:	d103      	bne.n	800fe96 <xTaskCheckForTimeOut+0x16>
 800fe8e:	b672      	cpsid	i
 800fe90:	e7fe      	b.n	800fe90 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800fe92:	b672      	cpsid	i
 800fe94:	e7fe      	b.n	800fe94 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800fe96:	f000 fc6b 	bl	8010770 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800fe9a:	4b10      	ldr	r3, [pc, #64]	; (800fedc <xTaskCheckForTimeOut+0x5c>)
 800fe9c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800fe9e:	6833      	ldr	r3, [r6, #0]
 800fea0:	1c59      	adds	r1, r3, #1
 800fea2:	d019      	beq.n	800fed8 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fea4:	490e      	ldr	r1, [pc, #56]	; (800fee0 <xTaskCheckForTimeOut+0x60>)
 800fea6:	6809      	ldr	r1, [r1, #0]
 800fea8:	6820      	ldr	r0, [r4, #0]
 800feaa:	4288      	cmp	r0, r1
 800feac:	d003      	beq.n	800feb6 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800feae:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800feb0:	6861      	ldr	r1, [r4, #4]
 800feb2:	4291      	cmp	r1, r2
 800feb4:	d904      	bls.n	800fec0 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800feb6:	6861      	ldr	r1, [r4, #4]
 800feb8:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800feba:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800febc:	4283      	cmp	r3, r0
 800febe:	d803      	bhi.n	800fec8 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 800fec0:	f000 fc62 	bl	8010788 <vPortExitCritical>
}
 800fec4:	0028      	movs	r0, r5
 800fec6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800fec8:	1a9b      	subs	r3, r3, r2
 800feca:	185b      	adds	r3, r3, r1
 800fecc:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800fece:	0020      	movs	r0, r4
 800fed0:	f7ff ffc6 	bl	800fe60 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800fed4:	2500      	movs	r5, #0
 800fed6:	e7f3      	b.n	800fec0 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 800fed8:	2500      	movs	r5, #0
 800feda:	e7f1      	b.n	800fec0 <xTaskCheckForTimeOut+0x40>
 800fedc:	200020a4 	.word	0x200020a4
 800fee0:	20002060 	.word	0x20002060

0800fee4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800fee4:	4b01      	ldr	r3, [pc, #4]	; (800feec <vTaskMissedYield+0x8>)
 800fee6:	2201      	movs	r2, #1
 800fee8:	601a      	str	r2, [r3, #0]
}
 800feea:	4770      	bx	lr
 800feec:	200020a8 	.word	0x200020a8

0800fef0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800fef0:	4b05      	ldr	r3, [pc, #20]	; (800ff08 <xTaskGetSchedulerState+0x18>)
 800fef2:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fef4:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d004      	beq.n	800ff04 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fefa:	4b04      	ldr	r3, [pc, #16]	; (800ff0c <xTaskGetSchedulerState+0x1c>)
 800fefc:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800fefe:	4243      	negs	r3, r0
 800ff00:	4158      	adcs	r0, r3
 800ff02:	0040      	lsls	r0, r0, #1
	}
 800ff04:	4770      	bx	lr
 800ff06:	46c0      	nop			; (mov r8, r8)
 800ff08:	20002078 	.word	0x20002078
 800ff0c:	20002028 	.word	0x20002028

0800ff10 <vTaskPriorityInherit>:
	{
 800ff10:	b570      	push	{r4, r5, r6, lr}
 800ff12:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ff14:	d01a      	beq.n	800ff4c <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ff16:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ff18:	4b19      	ldr	r3, [pc, #100]	; (800ff80 <vTaskPriorityInherit+0x70>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d214      	bcs.n	800ff4c <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff22:	6983      	ldr	r3, [r0, #24]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	db05      	blt.n	800ff34 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff28:	4b15      	ldr	r3, [pc, #84]	; (800ff80 <vTaskPriorityInherit+0x70>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ff2e:	2307      	movs	r3, #7
 800ff30:	1a5b      	subs	r3, r3, r1
 800ff32:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ff34:	0093      	lsls	r3, r2, #2
 800ff36:	189b      	adds	r3, r3, r2
 800ff38:	009b      	lsls	r3, r3, #2
 800ff3a:	4a12      	ldr	r2, [pc, #72]	; (800ff84 <vTaskPriorityInherit+0x74>)
 800ff3c:	189b      	adds	r3, r3, r2
 800ff3e:	6962      	ldr	r2, [r4, #20]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d004      	beq.n	800ff4e <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff44:	4b0e      	ldr	r3, [pc, #56]	; (800ff80 <vTaskPriorityInherit+0x70>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff4a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800ff4c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ff4e:	1d25      	adds	r5, r4, #4
 800ff50:	0028      	movs	r0, r5
 800ff52:	f7fe ff4c 	bl	800edee <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff56:	4b0a      	ldr	r3, [pc, #40]	; (800ff80 <vTaskPriorityInherit+0x70>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff5c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ff5e:	4a0a      	ldr	r2, [pc, #40]	; (800ff88 <vTaskPriorityInherit+0x78>)
 800ff60:	6812      	ldr	r2, [r2, #0]
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d808      	bhi.n	800ff78 <vTaskPriorityInherit+0x68>
 800ff66:	0098      	lsls	r0, r3, #2
 800ff68:	18c0      	adds	r0, r0, r3
 800ff6a:	0080      	lsls	r0, r0, #2
 800ff6c:	4b05      	ldr	r3, [pc, #20]	; (800ff84 <vTaskPriorityInherit+0x74>)
 800ff6e:	18c0      	adds	r0, r0, r3
 800ff70:	0029      	movs	r1, r5
 800ff72:	f7fe ff19 	bl	800eda8 <vListInsertEnd>
	}
 800ff76:	e7e9      	b.n	800ff4c <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800ff78:	4a03      	ldr	r2, [pc, #12]	; (800ff88 <vTaskPriorityInherit+0x78>)
 800ff7a:	6013      	str	r3, [r2, #0]
 800ff7c:	e7f3      	b.n	800ff66 <vTaskPriorityInherit+0x56>
 800ff7e:	46c0      	nop			; (mov r8, r8)
 800ff80:	20001f84 	.word	0x20001f84
 800ff84:	20001f90 	.word	0x20001f90
 800ff88:	20002034 	.word	0x20002034

0800ff8c <xTaskPriorityDisinherit>:
	{
 800ff8c:	b570      	push	{r4, r5, r6, lr}
 800ff8e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ff90:	d02b      	beq.n	800ffea <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 800ff92:	4b18      	ldr	r3, [pc, #96]	; (800fff4 <xTaskPriorityDisinherit+0x68>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	4283      	cmp	r3, r0
 800ff98:	d001      	beq.n	800ff9e <xTaskPriorityDisinherit+0x12>
 800ff9a:	b672      	cpsid	i
 800ff9c:	e7fe      	b.n	800ff9c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800ff9e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d101      	bne.n	800ffa8 <xTaskPriorityDisinherit+0x1c>
 800ffa4:	b672      	cpsid	i
 800ffa6:	e7fe      	b.n	800ffa6 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800ffa8:	3b01      	subs	r3, #1
 800ffaa:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ffac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ffae:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800ffb0:	428a      	cmp	r2, r1
 800ffb2:	d01c      	beq.n	800ffee <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800ffb4:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ffb6:	4283      	cmp	r3, r0
 800ffb8:	d118      	bne.n	800ffec <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ffba:	1d25      	adds	r5, r4, #4
 800ffbc:	0028      	movs	r0, r5
 800ffbe:	f7fe ff16 	bl	800edee <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ffc2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ffc4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffc6:	2207      	movs	r2, #7
 800ffc8:	1ad2      	subs	r2, r2, r3
 800ffca:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ffcc:	4a0a      	ldr	r2, [pc, #40]	; (800fff8 <xTaskPriorityDisinherit+0x6c>)
 800ffce:	6812      	ldr	r2, [r2, #0]
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d901      	bls.n	800ffd8 <xTaskPriorityDisinherit+0x4c>
 800ffd4:	4a08      	ldr	r2, [pc, #32]	; (800fff8 <xTaskPriorityDisinherit+0x6c>)
 800ffd6:	6013      	str	r3, [r2, #0]
 800ffd8:	2014      	movs	r0, #20
 800ffda:	4358      	muls	r0, r3
 800ffdc:	4b07      	ldr	r3, [pc, #28]	; (800fffc <xTaskPriorityDisinherit+0x70>)
 800ffde:	18c0      	adds	r0, r0, r3
 800ffe0:	0029      	movs	r1, r5
 800ffe2:	f7fe fee1 	bl	800eda8 <vListInsertEnd>
					xReturn = pdTRUE;
 800ffe6:	2001      	movs	r0, #1
 800ffe8:	e000      	b.n	800ffec <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 800ffea:	2000      	movs	r0, #0
	}
 800ffec:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800ffee:	2000      	movs	r0, #0
 800fff0:	e7fc      	b.n	800ffec <xTaskPriorityDisinherit+0x60>
 800fff2:	46c0      	nop			; (mov r8, r8)
 800fff4:	20001f84 	.word	0x20001f84
 800fff8:	20002034 	.word	0x20002034
 800fffc:	20001f90 	.word	0x20001f90

08010000 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8010000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010002:	b085      	sub	sp, #20
 8010004:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8010006:	2300      	movs	r3, #0
 8010008:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801000a:	4b2b      	ldr	r3, [pc, #172]	; (80100b8 <vTaskList+0xb8>)
 801000c:	681a      	ldr	r2, [r3, #0]
 801000e:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8010010:	6818      	ldr	r0, [r3, #0]
 8010012:	0140      	lsls	r0, r0, #5
 8010014:	f000 fc2e 	bl	8010874 <pvPortMalloc>
 8010018:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 801001a:	d04a      	beq.n	80100b2 <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 801001c:	9903      	ldr	r1, [sp, #12]
 801001e:	2200      	movs	r2, #0
 8010020:	f7ff fdca 	bl	800fbb8 <uxTaskGetSystemState>
 8010024:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8010026:	2300      	movs	r3, #0
 8010028:	9302      	str	r3, [sp, #8]
 801002a:	9a02      	ldr	r2, [sp, #8]
 801002c:	9b03      	ldr	r3, [sp, #12]
 801002e:	429a      	cmp	r2, r3
 8010030:	d23c      	bcs.n	80100ac <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8010032:	4e22      	ldr	r6, [pc, #136]	; (80100bc <vTaskList+0xbc>)
 8010034:	e027      	b.n	8010086 <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 8010036:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8010038:	2b01      	cmp	r3, #1
 801003a:	d133      	bne.n	80100a4 <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 801003c:	9b02      	ldr	r3, [sp, #8]
 801003e:	015b      	lsls	r3, r3, #5
 8010040:	18fb      	adds	r3, r7, r3
 8010042:	6859      	ldr	r1, [r3, #4]
 8010044:	0020      	movs	r0, r4
 8010046:	f7ff fab1 	bl	800f5ac <prvWriteNameToBuffer>
 801004a:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 801004c:	9b02      	ldr	r3, [sp, #8]
 801004e:	9a02      	ldr	r2, [sp, #8]
 8010050:	9902      	ldr	r1, [sp, #8]
 8010052:	015b      	lsls	r3, r3, #5
 8010054:	18fb      	adds	r3, r7, r3
 8010056:	691b      	ldr	r3, [r3, #16]
 8010058:	0149      	lsls	r1, r1, #5
 801005a:	1879      	adds	r1, r7, r1
 801005c:	6889      	ldr	r1, [r1, #8]
 801005e:	9101      	str	r1, [sp, #4]
 8010060:	0152      	lsls	r2, r2, #5
 8010062:	18ba      	adds	r2, r7, r2
 8010064:	8b92      	ldrh	r2, [r2, #28]
 8010066:	9200      	str	r2, [sp, #0]
 8010068:	002a      	movs	r2, r5
 801006a:	0031      	movs	r1, r6
 801006c:	f004 ff22 	bl	8014eb4 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 8010070:	0020      	movs	r0, r4
 8010072:	f7f0 f851 	bl	8000118 <strlen>
 8010076:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 8010078:	9b02      	ldr	r3, [sp, #8]
 801007a:	3301      	adds	r3, #1
 801007c:	9302      	str	r3, [sp, #8]
 801007e:	9a02      	ldr	r2, [sp, #8]
 8010080:	9b03      	ldr	r3, [sp, #12]
 8010082:	429a      	cmp	r2, r3
 8010084:	d212      	bcs.n	80100ac <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8010086:	9b02      	ldr	r3, [sp, #8]
 8010088:	015b      	lsls	r3, r3, #5
 801008a:	18fb      	adds	r3, r7, r3
 801008c:	7b1b      	ldrb	r3, [r3, #12]
 801008e:	2b02      	cmp	r3, #2
 8010090:	d00a      	beq.n	80100a8 <vTaskList+0xa8>
 8010092:	b2da      	uxtb	r2, r3
 8010094:	2a02      	cmp	r2, #2
 8010096:	d9ce      	bls.n	8010036 <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8010098:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 801009a:	2b03      	cmp	r3, #3
 801009c:	d0ce      	beq.n	801003c <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 801009e:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80100a0:	2b04      	cmp	r3, #4
 80100a2:	d0cb      	beq.n	801003c <vTaskList+0x3c>
										cStatus = 0x00;
 80100a4:	2500      	movs	r5, #0
										break;
 80100a6:	e7c9      	b.n	801003c <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80100a8:	2542      	movs	r5, #66	; 0x42
 80100aa:	e7c7      	b.n	801003c <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 80100ac:	0038      	movs	r0, r7
 80100ae:	f000 fc77 	bl	80109a0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80100b2:	b005      	add	sp, #20
 80100b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100b6:	46c0      	nop			; (mov r8, r8)
 80100b8:	20002020 	.word	0x20002020
 80100bc:	0801c9b0 	.word	0x0801c9b0

080100c0 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 80100c0:	b570      	push	{r4, r5, r6, lr}
 80100c2:	b084      	sub	sp, #16
 80100c4:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 80100c6:	2300      	movs	r3, #0
 80100c8:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80100ca:	4b26      	ldr	r3, [pc, #152]	; (8010164 <vTaskGetRunTimeStats+0xa4>)
 80100cc:	681a      	ldr	r2, [r3, #0]
 80100ce:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 80100d0:	6818      	ldr	r0, [r3, #0]
 80100d2:	0140      	lsls	r0, r0, #5
 80100d4:	f000 fbce 	bl	8010874 <pvPortMalloc>
 80100d8:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 80100da:	d014      	beq.n	8010106 <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80100dc:	9903      	ldr	r1, [sp, #12]
 80100de:	aa01      	add	r2, sp, #4
 80100e0:	f7ff fd6a 	bl	800fbb8 <uxTaskGetSystemState>
 80100e4:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 80100e6:	2164      	movs	r1, #100	; 0x64
 80100e8:	9801      	ldr	r0, [sp, #4]
 80100ea:	f7f0 f831 	bl	8000150 <__udivsi3>
 80100ee:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 80100f0:	2800      	cmp	r0, #0
 80100f2:	d005      	beq.n	8010100 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 80100f4:	2300      	movs	r3, #0
 80100f6:	9302      	str	r3, [sp, #8]
 80100f8:	9a02      	ldr	r2, [sp, #8]
 80100fa:	9b03      	ldr	r3, [sp, #12]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d316      	bcc.n	801012e <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 8010100:	0030      	movs	r0, r6
 8010102:	f000 fc4d 	bl	80109a0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010106:	b004      	add	sp, #16
 8010108:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 801010a:	9b02      	ldr	r3, [sp, #8]
 801010c:	015b      	lsls	r3, r3, #5
 801010e:	18f3      	adds	r3, r6, r3
 8010110:	699a      	ldr	r2, [r3, #24]
 8010112:	4915      	ldr	r1, [pc, #84]	; (8010168 <vTaskGetRunTimeStats+0xa8>)
 8010114:	f004 fece 	bl	8014eb4 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 8010118:	0020      	movs	r0, r4
 801011a:	f7ef fffd 	bl	8000118 <strlen>
 801011e:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 8010120:	9b02      	ldr	r3, [sp, #8]
 8010122:	3301      	adds	r3, #1
 8010124:	9302      	str	r3, [sp, #8]
 8010126:	9a02      	ldr	r2, [sp, #8]
 8010128:	9b03      	ldr	r3, [sp, #12]
 801012a:	429a      	cmp	r2, r3
 801012c:	d2e8      	bcs.n	8010100 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 801012e:	9b02      	ldr	r3, [sp, #8]
 8010130:	015b      	lsls	r3, r3, #5
 8010132:	18f3      	adds	r3, r6, r3
 8010134:	9901      	ldr	r1, [sp, #4]
 8010136:	6998      	ldr	r0, [r3, #24]
 8010138:	f7f0 f80a 	bl	8000150 <__udivsi3>
 801013c:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 801013e:	9b02      	ldr	r3, [sp, #8]
 8010140:	015b      	lsls	r3, r3, #5
 8010142:	18f3      	adds	r3, r6, r3
 8010144:	6859      	ldr	r1, [r3, #4]
 8010146:	0020      	movs	r0, r4
 8010148:	f7ff fa30 	bl	800f5ac <prvWriteNameToBuffer>
 801014c:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 801014e:	2d00      	cmp	r5, #0
 8010150:	d0db      	beq.n	801010a <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 8010152:	9b02      	ldr	r3, [sp, #8]
 8010154:	015b      	lsls	r3, r3, #5
 8010156:	18f3      	adds	r3, r6, r3
 8010158:	699a      	ldr	r2, [r3, #24]
 801015a:	002b      	movs	r3, r5
 801015c:	4903      	ldr	r1, [pc, #12]	; (801016c <vTaskGetRunTimeStats+0xac>)
 801015e:	f004 fea9 	bl	8014eb4 <sprintf>
 8010162:	e7d9      	b.n	8010118 <vTaskGetRunTimeStats+0x58>
 8010164:	20002020 	.word	0x20002020
 8010168:	0801c9a4 	.word	0x0801c9a4
 801016c:	0801c998 	.word	0x0801c998

08010170 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010170:	4b05      	ldr	r3, [pc, #20]	; (8010188 <pvTaskIncrementMutexHeldCount+0x18>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d004      	beq.n	8010182 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010178:	4b03      	ldr	r3, [pc, #12]	; (8010188 <pvTaskIncrementMutexHeldCount+0x18>)
 801017a:	681a      	ldr	r2, [r3, #0]
 801017c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 801017e:	3301      	adds	r3, #1
 8010180:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010182:	4b01      	ldr	r3, [pc, #4]	; (8010188 <pvTaskIncrementMutexHeldCount+0x18>)
 8010184:	6818      	ldr	r0, [r3, #0]
	}
 8010186:	4770      	bx	lr
 8010188:	20001f84 	.word	0x20001f84

0801018c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 801018c:	b570      	push	{r4, r5, r6, lr}
 801018e:	0005      	movs	r5, r0
 8010190:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8010192:	f000 faed 	bl	8010770 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8010196:	4b20      	ldr	r3, [pc, #128]	; (8010218 <ulTaskNotifyTake+0x8c>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801019c:	2b00      	cmp	r3, #0
 801019e:	d106      	bne.n	80101ae <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80101a0:	4b1d      	ldr	r3, [pc, #116]	; (8010218 <ulTaskNotifyTake+0x8c>)
 80101a2:	681a      	ldr	r2, [r3, #0]
 80101a4:	235c      	movs	r3, #92	; 0x5c
 80101a6:	2101      	movs	r1, #1
 80101a8:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 80101aa:	2c00      	cmp	r4, #0
 80101ac:	d118      	bne.n	80101e0 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80101ae:	f000 faeb 	bl	8010788 <vPortExitCritical>

		taskENTER_CRITICAL();
 80101b2:	f000 fadd 	bl	8010770 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80101b6:	4b18      	ldr	r3, [pc, #96]	; (8010218 <ulTaskNotifyTake+0x8c>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 80101bc:	2c00      	cmp	r4, #0
 80101be:	d006      	beq.n	80101ce <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 80101c0:	2d00      	cmp	r5, #0
 80101c2:	d123      	bne.n	801020c <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 80101c4:	4b14      	ldr	r3, [pc, #80]	; (8010218 <ulTaskNotifyTake+0x8c>)
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80101ca:	3b01      	subs	r3, #1
 80101cc:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80101ce:	4b12      	ldr	r3, [pc, #72]	; (8010218 <ulTaskNotifyTake+0x8c>)
 80101d0:	681a      	ldr	r2, [r3, #0]
 80101d2:	235c      	movs	r3, #92	; 0x5c
 80101d4:	2100      	movs	r1, #0
 80101d6:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 80101d8:	f000 fad6 	bl	8010788 <vPortExitCritical>

		return ulReturn;
	}
 80101dc:	0020      	movs	r0, r4
 80101de:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80101e0:	4b0d      	ldr	r3, [pc, #52]	; (8010218 <ulTaskNotifyTake+0x8c>)
 80101e2:	6818      	ldr	r0, [r3, #0]
 80101e4:	3004      	adds	r0, #4
 80101e6:	f7fe fe02 	bl	800edee <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 80101ea:	1c63      	adds	r3, r4, #1
 80101ec:	d007      	beq.n	80101fe <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 80101ee:	4b0b      	ldr	r3, [pc, #44]	; (801021c <ulTaskNotifyTake+0x90>)
 80101f0:	6818      	ldr	r0, [r3, #0]
 80101f2:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 80101f4:	f7ff f9b0 	bl	800f558 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80101f8:	f000 faae 	bl	8010758 <vPortYield>
 80101fc:	e7d7      	b.n	80101ae <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80101fe:	4b06      	ldr	r3, [pc, #24]	; (8010218 <ulTaskNotifyTake+0x8c>)
 8010200:	6819      	ldr	r1, [r3, #0]
 8010202:	3104      	adds	r1, #4
 8010204:	4806      	ldr	r0, [pc, #24]	; (8010220 <ulTaskNotifyTake+0x94>)
 8010206:	f7fe fdcf 	bl	800eda8 <vListInsertEnd>
 801020a:	e7f5      	b.n	80101f8 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801020c:	4b02      	ldr	r3, [pc, #8]	; (8010218 <ulTaskNotifyTake+0x8c>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2200      	movs	r2, #0
 8010212:	659a      	str	r2, [r3, #88]	; 0x58
 8010214:	e7db      	b.n	80101ce <ulTaskNotifyTake+0x42>
 8010216:	46c0      	nop			; (mov r8, r8)
 8010218:	20001f84 	.word	0x20001f84
 801021c:	200020a4 	.word	0x200020a4
 8010220:	2000207c 	.word	0x2000207c

08010224 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010226:	0004      	movs	r4, r0
 8010228:	000e      	movs	r6, r1
 801022a:	0015      	movs	r5, r2
 801022c:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 801022e:	2800      	cmp	r0, #0
 8010230:	d101      	bne.n	8010236 <xTaskGenericNotify+0x12>
 8010232:	b672      	cpsid	i
 8010234:	e7fe      	b.n	8010234 <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 8010236:	f000 fa9b 	bl	8010770 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801023a:	2f00      	cmp	r7, #0
 801023c:	d001      	beq.n	8010242 <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801023e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010240:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8010242:	225c      	movs	r2, #92	; 0x5c
 8010244:	5ca3      	ldrb	r3, [r4, r2]
 8010246:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 8010248:	2102      	movs	r1, #2
 801024a:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 801024c:	2d02      	cmp	r5, #2
 801024e:	d015      	beq.n	801027c <xTaskGenericNotify+0x58>
 8010250:	d907      	bls.n	8010262 <xTaskGenericNotify+0x3e>
 8010252:	2d03      	cmp	r5, #3
 8010254:	d016      	beq.n	8010284 <xTaskGenericNotify+0x60>
 8010256:	2d04      	cmp	r5, #4
 8010258:	d105      	bne.n	8010266 <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 801025a:	2b02      	cmp	r3, #2
 801025c:	d035      	beq.n	80102ca <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801025e:	65a6      	str	r6, [r4, #88]	; 0x58
 8010260:	e001      	b.n	8010266 <xTaskGenericNotify+0x42>
			switch( eAction )
 8010262:	2d01      	cmp	r5, #1
 8010264:	d006      	beq.n	8010274 <xTaskGenericNotify+0x50>
 8010266:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8010268:	2b01      	cmp	r3, #1
 801026a:	d00d      	beq.n	8010288 <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801026c:	f000 fa8c 	bl	8010788 <vPortExitCritical>

		return xReturn;
	}
 8010270:	0028      	movs	r0, r5
 8010272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 8010274:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8010276:	4316      	orrs	r6, r2
 8010278:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 801027a:	e7f4      	b.n	8010266 <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 801027c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801027e:	3201      	adds	r2, #1
 8010280:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 8010282:	e7f0      	b.n	8010266 <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 8010284:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 8010286:	e7ee      	b.n	8010266 <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010288:	1d25      	adds	r5, r4, #4
 801028a:	0028      	movs	r0, r5
 801028c:	f7fe fdaf 	bl	800edee <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010290:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010292:	4a0f      	ldr	r2, [pc, #60]	; (80102d0 <xTaskGenericNotify+0xac>)
 8010294:	6812      	ldr	r2, [r2, #0]
 8010296:	4293      	cmp	r3, r2
 8010298:	d901      	bls.n	801029e <xTaskGenericNotify+0x7a>
 801029a:	4a0d      	ldr	r2, [pc, #52]	; (80102d0 <xTaskGenericNotify+0xac>)
 801029c:	6013      	str	r3, [r2, #0]
 801029e:	2014      	movs	r0, #20
 80102a0:	4358      	muls	r0, r3
 80102a2:	4b0c      	ldr	r3, [pc, #48]	; (80102d4 <xTaskGenericNotify+0xb0>)
 80102a4:	18c0      	adds	r0, r0, r3
 80102a6:	0029      	movs	r1, r5
 80102a8:	f7fe fd7e 	bl	800eda8 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80102ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d001      	beq.n	80102b6 <xTaskGenericNotify+0x92>
 80102b2:	b672      	cpsid	i
 80102b4:	e7fe      	b.n	80102b4 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80102b6:	4b08      	ldr	r3, [pc, #32]	; (80102d8 <xTaskGenericNotify+0xb4>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80102bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102be:	2501      	movs	r5, #1
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d9d3      	bls.n	801026c <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 80102c4:	f000 fa48 	bl	8010758 <vPortYield>
 80102c8:	e7d0      	b.n	801026c <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 80102ca:	2500      	movs	r5, #0
 80102cc:	e7ce      	b.n	801026c <xTaskGenericNotify+0x48>
 80102ce:	46c0      	nop			; (mov r8, r8)
 80102d0:	20002034 	.word	0x20002034
 80102d4:	20001f90 	.word	0x20001f90
 80102d8:	20001f84 	.word	0x20001f84

080102dc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80102dc:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80102de:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80102e0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80102e2:	4291      	cmp	r1, r2
 80102e4:	d80b      	bhi.n	80102fe <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80102e6:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80102e8:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80102ea:	6983      	ldr	r3, [r0, #24]
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d211      	bcs.n	8010314 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80102f0:	1d01      	adds	r1, r0, #4
 80102f2:	4b09      	ldr	r3, [pc, #36]	; (8010318 <prvInsertTimerInActiveList+0x3c>)
 80102f4:	6818      	ldr	r0, [r3, #0]
 80102f6:	f7fe fd63 	bl	800edc0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80102fa:	2400      	movs	r4, #0
 80102fc:	e00a      	b.n	8010314 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80102fe:	429a      	cmp	r2, r3
 8010300:	d202      	bcs.n	8010308 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010302:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010304:	4299      	cmp	r1, r3
 8010306:	d205      	bcs.n	8010314 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010308:	1d01      	adds	r1, r0, #4
 801030a:	4b04      	ldr	r3, [pc, #16]	; (801031c <prvInsertTimerInActiveList+0x40>)
 801030c:	6818      	ldr	r0, [r3, #0]
 801030e:	f7fe fd57 	bl	800edc0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010312:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 8010314:	0020      	movs	r0, r4
 8010316:	bd10      	pop	{r4, pc}
 8010318:	200020b0 	.word	0x200020b0
 801031c:	200020ac 	.word	0x200020ac

08010320 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010320:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010322:	f000 fa25 	bl	8010770 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010326:	4b11      	ldr	r3, [pc, #68]	; (801036c <prvCheckForValidListAndQueue+0x4c>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d002      	beq.n	8010334 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801032e:	f000 fa2b 	bl	8010788 <vPortExitCritical>
}
 8010332:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8010334:	4d0e      	ldr	r5, [pc, #56]	; (8010370 <prvCheckForValidListAndQueue+0x50>)
 8010336:	0028      	movs	r0, r5
 8010338:	f7fe fd28 	bl	800ed8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801033c:	4c0d      	ldr	r4, [pc, #52]	; (8010374 <prvCheckForValidListAndQueue+0x54>)
 801033e:	0020      	movs	r0, r4
 8010340:	f7fe fd24 	bl	800ed8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010344:	4b0c      	ldr	r3, [pc, #48]	; (8010378 <prvCheckForValidListAndQueue+0x58>)
 8010346:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010348:	4b0c      	ldr	r3, [pc, #48]	; (801037c <prvCheckForValidListAndQueue+0x5c>)
 801034a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 801034c:	2200      	movs	r2, #0
 801034e:	2110      	movs	r1, #16
 8010350:	2004      	movs	r0, #4
 8010352:	f7fe fe26 	bl	800efa2 <xQueueGenericCreate>
 8010356:	4b05      	ldr	r3, [pc, #20]	; (801036c <prvCheckForValidListAndQueue+0x4c>)
 8010358:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 801035a:	2800      	cmp	r0, #0
 801035c:	d101      	bne.n	8010362 <prvCheckForValidListAndQueue+0x42>
 801035e:	b672      	cpsid	i
 8010360:	e7fe      	b.n	8010360 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010362:	4907      	ldr	r1, [pc, #28]	; (8010380 <prvCheckForValidListAndQueue+0x60>)
 8010364:	f7ff f856 	bl	800f414 <vQueueAddToRegistry>
 8010368:	e7e1      	b.n	801032e <prvCheckForValidListAndQueue+0xe>
 801036a:	46c0      	nop			; (mov r8, r8)
 801036c:	200020e0 	.word	0x200020e0
 8010370:	200020b4 	.word	0x200020b4
 8010374:	200020c8 	.word	0x200020c8
 8010378:	200020ac 	.word	0x200020ac
 801037c:	200020b0 	.word	0x200020b0
 8010380:	0801c9f0 	.word	0x0801c9f0

08010384 <xTimerCreateTimerTask>:
{
 8010384:	b500      	push	{lr}
 8010386:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 8010388:	f7ff ffca 	bl	8010320 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801038c:	4b0a      	ldr	r3, [pc, #40]	; (80103b8 <xTimerCreateTimerTask+0x34>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d00d      	beq.n	80103b0 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8010394:	2300      	movs	r3, #0
 8010396:	9303      	str	r3, [sp, #12]
 8010398:	9302      	str	r3, [sp, #8]
 801039a:	9301      	str	r3, [sp, #4]
 801039c:	3303      	adds	r3, #3
 801039e:	9300      	str	r3, [sp, #0]
 80103a0:	2300      	movs	r3, #0
 80103a2:	22a0      	movs	r2, #160	; 0xa0
 80103a4:	4905      	ldr	r1, [pc, #20]	; (80103bc <xTimerCreateTimerTask+0x38>)
 80103a6:	4806      	ldr	r0, [pc, #24]	; (80103c0 <xTimerCreateTimerTask+0x3c>)
 80103a8:	f7ff f918 	bl	800f5dc <xTaskGenericCreate>
	configASSERT( xReturn );
 80103ac:	2800      	cmp	r0, #0
 80103ae:	d101      	bne.n	80103b4 <xTimerCreateTimerTask+0x30>
 80103b0:	b672      	cpsid	i
 80103b2:	e7fe      	b.n	80103b2 <xTimerCreateTimerTask+0x2e>
}
 80103b4:	b005      	add	sp, #20
 80103b6:	bd00      	pop	{pc}
 80103b8:	200020e0 	.word	0x200020e0
 80103bc:	0801c9f8 	.word	0x0801c9f8
 80103c0:	0801050d 	.word	0x0801050d

080103c4 <xTimerCreate>:
{
 80103c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103c6:	46c6      	mov	lr, r8
 80103c8:	b500      	push	{lr}
 80103ca:	4680      	mov	r8, r0
 80103cc:	000d      	movs	r5, r1
 80103ce:	0017      	movs	r7, r2
 80103d0:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 80103d2:	2900      	cmp	r1, #0
 80103d4:	d014      	beq.n	8010400 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80103d6:	202c      	movs	r0, #44	; 0x2c
 80103d8:	f000 fa4c 	bl	8010874 <pvPortMalloc>
 80103dc:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 80103de:	d00b      	beq.n	80103f8 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 80103e0:	f7ff ff9e 	bl	8010320 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 80103e4:	4643      	mov	r3, r8
 80103e6:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80103e8:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 80103ea:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 80103ec:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80103ee:	9b06      	ldr	r3, [sp, #24]
 80103f0:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80103f2:	1d20      	adds	r0, r4, #4
 80103f4:	f7fe fcd5 	bl	800eda2 <vListInitialiseItem>
}
 80103f8:	0020      	movs	r0, r4
 80103fa:	bc04      	pop	{r2}
 80103fc:	4690      	mov	r8, r2
 80103fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010400:	b672      	cpsid	i
 8010402:	e7fe      	b.n	8010402 <xTimerCreate+0x3e>

08010404 <xTimerGenericCommand>:
{
 8010404:	b530      	push	{r4, r5, lr}
 8010406:	b085      	sub	sp, #20
 8010408:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 801040a:	4b13      	ldr	r3, [pc, #76]	; (8010458 <xTimerGenericCommand+0x54>)
 801040c:	681c      	ldr	r4, [r3, #0]
 801040e:	2c00      	cmp	r4, #0
 8010410:	d020      	beq.n	8010454 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 8010412:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010414:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8010416:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010418:	2905      	cmp	r1, #5
 801041a:	dc13      	bgt.n	8010444 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801041c:	f7ff fd68 	bl	800fef0 <xTaskGetSchedulerState>
 8010420:	2802      	cmp	r0, #2
 8010422:	d007      	beq.n	8010434 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010424:	4b0c      	ldr	r3, [pc, #48]	; (8010458 <xTimerGenericCommand+0x54>)
 8010426:	6818      	ldr	r0, [r3, #0]
 8010428:	2300      	movs	r3, #0
 801042a:	2200      	movs	r2, #0
 801042c:	4669      	mov	r1, sp
 801042e:	f7fe fdf3 	bl	800f018 <xQueueGenericSend>
 8010432:	e00d      	b.n	8010450 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010434:	4b08      	ldr	r3, [pc, #32]	; (8010458 <xTimerGenericCommand+0x54>)
 8010436:	6818      	ldr	r0, [r3, #0]
 8010438:	2300      	movs	r3, #0
 801043a:	9a08      	ldr	r2, [sp, #32]
 801043c:	4669      	mov	r1, sp
 801043e:	f7fe fdeb 	bl	800f018 <xQueueGenericSend>
 8010442:	e005      	b.n	8010450 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010444:	2300      	movs	r3, #0
 8010446:	002a      	movs	r2, r5
 8010448:	4669      	mov	r1, sp
 801044a:	0020      	movs	r0, r4
 801044c:	f7fe fe7b 	bl	800f146 <xQueueGenericSendFromISR>
}
 8010450:	b005      	add	sp, #20
 8010452:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8010454:	2000      	movs	r0, #0
	return xReturn;
 8010456:	e7fb      	b.n	8010450 <xTimerGenericCommand+0x4c>
 8010458:	200020e0 	.word	0x200020e0

0801045c <prvSampleTimeNow>:
{
 801045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801045e:	46d6      	mov	lr, sl
 8010460:	464f      	mov	r7, r9
 8010462:	4646      	mov	r6, r8
 8010464:	b5c0      	push	{r6, r7, lr}
 8010466:	b084      	sub	sp, #16
 8010468:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 801046a:	f7ff fa43 	bl	800f8f4 <xTaskGetTickCount>
 801046e:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 8010470:	4b23      	ldr	r3, [pc, #140]	; (8010500 <prvSampleTimeNow+0xa4>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4283      	cmp	r3, r0
 8010476:	d80b      	bhi.n	8010490 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 8010478:	2300      	movs	r3, #0
 801047a:	4642      	mov	r2, r8
 801047c:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 801047e:	4b20      	ldr	r3, [pc, #128]	; (8010500 <prvSampleTimeNow+0xa4>)
 8010480:	601f      	str	r7, [r3, #0]
}
 8010482:	0038      	movs	r0, r7
 8010484:	b004      	add	sp, #16
 8010486:	bc1c      	pop	{r2, r3, r4}
 8010488:	4690      	mov	r8, r2
 801048a:	4699      	mov	r9, r3
 801048c:	46a2      	mov	sl, r4
 801048e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010490:	4e1c      	ldr	r6, [pc, #112]	; (8010504 <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010492:	2300      	movs	r3, #0
 8010494:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010496:	6833      	ldr	r3, [r6, #0]
 8010498:	681a      	ldr	r2, [r3, #0]
 801049a:	2a00      	cmp	r2, #0
 801049c:	d026      	beq.n	80104ec <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801049e:	68db      	ldr	r3, [r3, #12]
 80104a0:	681a      	ldr	r2, [r3, #0]
 80104a2:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80104a4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80104a6:	1d25      	adds	r5, r4, #4
 80104a8:	0028      	movs	r0, r5
 80104aa:	f7fe fca0 	bl	800edee <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80104ae:	0020      	movs	r0, r4
 80104b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104b2:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80104b4:	69e3      	ldr	r3, [r4, #28]
 80104b6:	2b01      	cmp	r3, #1
 80104b8:	d1ed      	bne.n	8010496 <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80104ba:	69a3      	ldr	r3, [r4, #24]
 80104bc:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80104be:	459a      	cmp	sl, r3
 80104c0:	d209      	bcs.n	80104d6 <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80104c2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80104c4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80104c6:	4b0f      	ldr	r3, [pc, #60]	; (8010504 <prvSampleTimeNow+0xa8>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	9303      	str	r3, [sp, #12]
 80104cc:	0029      	movs	r1, r5
 80104ce:	0018      	movs	r0, r3
 80104d0:	f7fe fc76 	bl	800edc0 <vListInsert>
 80104d4:	e7df      	b.n	8010496 <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80104d6:	464b      	mov	r3, r9
 80104d8:	9300      	str	r3, [sp, #0]
 80104da:	4652      	mov	r2, sl
 80104dc:	4649      	mov	r1, r9
 80104de:	0020      	movs	r0, r4
 80104e0:	f7ff ff90 	bl	8010404 <xTimerGenericCommand>
				configASSERT( xResult );
 80104e4:	2800      	cmp	r0, #0
 80104e6:	d1d6      	bne.n	8010496 <prvSampleTimeNow+0x3a>
 80104e8:	b672      	cpsid	i
 80104ea:	e7fe      	b.n	80104ea <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 80104ec:	4a06      	ldr	r2, [pc, #24]	; (8010508 <prvSampleTimeNow+0xac>)
 80104ee:	4905      	ldr	r1, [pc, #20]	; (8010504 <prvSampleTimeNow+0xa8>)
 80104f0:	6810      	ldr	r0, [r2, #0]
 80104f2:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80104f4:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80104f6:	2301      	movs	r3, #1
 80104f8:	4642      	mov	r2, r8
 80104fa:	6013      	str	r3, [r2, #0]
 80104fc:	e7bf      	b.n	801047e <prvSampleTimeNow+0x22>
 80104fe:	46c0      	nop			; (mov r8, r8)
 8010500:	200020dc 	.word	0x200020dc
 8010504:	200020ac 	.word	0x200020ac
 8010508:	200020b0 	.word	0x200020b0

0801050c <prvTimerTask>:
{
 801050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801050e:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 8010510:	4e57      	ldr	r6, [pc, #348]	; (8010670 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010512:	4b58      	ldr	r3, [pc, #352]	; (8010674 <prvTimerTask+0x168>)
 8010514:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010516:	681a      	ldr	r2, [r3, #0]
 8010518:	2a00      	cmp	r2, #0
 801051a:	d100      	bne.n	801051e <prvTimerTask+0x12>
 801051c:	e09c      	b.n	8010658 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 8010522:	f7ff f9df 	bl	800f8e4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010526:	a808      	add	r0, sp, #32
 8010528:	f7ff ff98 	bl	801045c <prvSampleTimeNow>
 801052c:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 801052e:	9b08      	ldr	r3, [sp, #32]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d000      	beq.n	8010536 <prvTimerTask+0x2a>
 8010534:	e099      	b.n	801066a <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010536:	42a0      	cmp	r0, r4
 8010538:	d233      	bcs.n	80105a2 <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 801053a:	1b61      	subs	r1, r4, r5
 801053c:	4b4e      	ldr	r3, [pc, #312]	; (8010678 <prvTimerTask+0x16c>)
 801053e:	6818      	ldr	r0, [r3, #0]
 8010540:	f7fe ff80 	bl	800f444 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010544:	f7ff fa6e 	bl	800fa24 <xTaskResumeAll>
 8010548:	2800      	cmp	r0, #0
 801054a:	d050      	beq.n	80105ee <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801054c:	4c4a      	ldr	r4, [pc, #296]	; (8010678 <prvTimerTask+0x16c>)
 801054e:	2300      	movs	r3, #0
 8010550:	2200      	movs	r2, #0
 8010552:	a908      	add	r1, sp, #32
 8010554:	6820      	ldr	r0, [r4, #0]
 8010556:	f7fe fe78 	bl	800f24a <xQueueGenericReceive>
 801055a:	2800      	cmp	r0, #0
 801055c:	d0d9      	beq.n	8010512 <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801055e:	9b08      	ldr	r3, [sp, #32]
 8010560:	9303      	str	r3, [sp, #12]
 8010562:	2b00      	cmp	r3, #0
 8010564:	da0c      	bge.n	8010580 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010568:	9303      	str	r3, [sp, #12]
 801056a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801056c:	9304      	str	r3, [sp, #16]
 801056e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010570:	9305      	str	r3, [sp, #20]
 8010572:	9903      	ldr	r1, [sp, #12]
 8010574:	9804      	ldr	r0, [sp, #16]
 8010576:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010578:	9b08      	ldr	r3, [sp, #32]
 801057a:	9303      	str	r3, [sp, #12]
 801057c:	2b00      	cmp	r3, #0
 801057e:	dbe6      	blt.n	801054e <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010580:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8010582:	696b      	ldr	r3, [r5, #20]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d002      	beq.n	801058e <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010588:	1d28      	adds	r0, r5, #4
 801058a:	f7fe fc30 	bl	800edee <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801058e:	a807      	add	r0, sp, #28
 8010590:	f7ff ff64 	bl	801045c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8010594:	9b08      	ldr	r3, [sp, #32]
 8010596:	9303      	str	r3, [sp, #12]
 8010598:	2b09      	cmp	r3, #9
 801059a:	d8d8      	bhi.n	801054e <prvTimerTask+0x42>
 801059c:	009b      	lsls	r3, r3, #2
 801059e:	58f3      	ldr	r3, [r6, r3]
 80105a0:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 80105a2:	f7ff fa3f 	bl	800fa24 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80105a6:	4b33      	ldr	r3, [pc, #204]	; (8010674 <prvTimerTask+0x168>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	68db      	ldr	r3, [r3, #12]
 80105ac:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80105ae:	1d38      	adds	r0, r7, #4
 80105b0:	f7fe fc1d 	bl	800edee <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	2b01      	cmp	r3, #1
 80105b8:	d003      	beq.n	80105c2 <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105bc:	0038      	movs	r0, r7
 80105be:	4798      	blx	r3
 80105c0:	e7c4      	b.n	801054c <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 80105c2:	69bb      	ldr	r3, [r7, #24]
 80105c4:	18e1      	adds	r1, r4, r3
 80105c6:	0023      	movs	r3, r4
 80105c8:	002a      	movs	r2, r5
 80105ca:	0038      	movs	r0, r7
 80105cc:	f7ff fe86 	bl	80102dc <prvInsertTimerInActiveList>
 80105d0:	2801      	cmp	r0, #1
 80105d2:	d1f2      	bne.n	80105ba <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105d4:	2100      	movs	r1, #0
 80105d6:	9100      	str	r1, [sp, #0]
 80105d8:	000b      	movs	r3, r1
 80105da:	0022      	movs	r2, r4
 80105dc:	0038      	movs	r0, r7
 80105de:	f7ff ff11 	bl	8010404 <xTimerGenericCommand>
			configASSERT( xResult );
 80105e2:	2800      	cmp	r0, #0
 80105e4:	d1e9      	bne.n	80105ba <prvTimerTask+0xae>
 80105e6:	b672      	cpsid	i
 80105e8:	e7fe      	b.n	80105e8 <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 80105ea:	2400      	movs	r4, #0
 80105ec:	e7a5      	b.n	801053a <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 80105ee:	f000 f8b3 	bl	8010758 <vPortYield>
 80105f2:	e7ab      	b.n	801054c <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 80105f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105f6:	69aa      	ldr	r2, [r5, #24]
 80105f8:	4694      	mov	ip, r2
 80105fa:	4463      	add	r3, ip
 80105fc:	0019      	movs	r1, r3
 80105fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010600:	0002      	movs	r2, r0
 8010602:	0028      	movs	r0, r5
 8010604:	f7ff fe6a 	bl	80102dc <prvInsertTimerInActiveList>
 8010608:	2801      	cmp	r0, #1
 801060a:	d1a0      	bne.n	801054e <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801060c:	0028      	movs	r0, r5
 801060e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010610:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010612:	69eb      	ldr	r3, [r5, #28]
 8010614:	2b01      	cmp	r3, #1
 8010616:	d19a      	bne.n	801054e <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801061a:	69a9      	ldr	r1, [r5, #24]
 801061c:	468c      	mov	ip, r1
 801061e:	4463      	add	r3, ip
 8010620:	001a      	movs	r2, r3
 8010622:	2300      	movs	r3, #0
 8010624:	9300      	str	r3, [sp, #0]
 8010626:	2100      	movs	r1, #0
 8010628:	0028      	movs	r0, r5
 801062a:	f7ff feeb 	bl	8010404 <xTimerGenericCommand>
							configASSERT( xResult );
 801062e:	2800      	cmp	r0, #0
 8010630:	d18d      	bne.n	801054e <prvTimerTask+0x42>
 8010632:	b672      	cpsid	i
 8010634:	e7fe      	b.n	8010634 <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010636:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010638:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801063a:	2900      	cmp	r1, #0
 801063c:	d006      	beq.n	801064c <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801063e:	1841      	adds	r1, r0, r1
 8010640:	0003      	movs	r3, r0
 8010642:	0002      	movs	r2, r0
 8010644:	0028      	movs	r0, r5
 8010646:	f7ff fe49 	bl	80102dc <prvInsertTimerInActiveList>
 801064a:	e780      	b.n	801054e <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801064c:	b672      	cpsid	i
 801064e:	e7fe      	b.n	801064e <prvTimerTask+0x142>
					vPortFree( pxTimer );
 8010650:	0028      	movs	r0, r5
 8010652:	f000 f9a5 	bl	80109a0 <vPortFree>
 8010656:	e77a      	b.n	801054e <prvTimerTask+0x42>
	vTaskSuspendAll();
 8010658:	f7ff f944 	bl	800f8e4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801065c:	a808      	add	r0, sp, #32
 801065e:	f7ff fefd 	bl	801045c <prvSampleTimeNow>
 8010662:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010664:	9b08      	ldr	r3, [sp, #32]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d0bf      	beq.n	80105ea <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 801066a:	f7ff f9db 	bl	800fa24 <xTaskResumeAll>
 801066e:	e76d      	b.n	801054c <prvTimerTask+0x40>
 8010670:	0801c9c8 	.word	0x0801c9c8
 8010674:	200020ac 	.word	0x200020ac
 8010678:	200020e0 	.word	0x200020e0

0801067c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 801067c:	b510      	push	{r4, lr}
 801067e:	0004      	movs	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8010680:	f000 f876 	bl	8010770 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 8010684:	6964      	ldr	r4, [r4, #20]
 8010686:	1e63      	subs	r3, r4, #1
 8010688:	419c      	sbcs	r4, r3
	}
	taskEXIT_CRITICAL();
 801068a:	f000 f87d 	bl	8010788 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 801068e:	0020      	movs	r0, r4
 8010690:	bd10      	pop	{r4, pc}

08010692 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010692:	b510      	push	{r4, lr}
 8010694:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8010696:	d101      	bne.n	801069c <pvTimerGetTimerID+0xa>
 8010698:	b672      	cpsid	i
 801069a:	e7fe      	b.n	801069a <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 801069c:	f000 f868 	bl	8010770 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80106a0:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 80106a2:	f000 f871 	bl	8010788 <vPortExitCritical>

	return pvReturn;
}
 80106a6:	0020      	movs	r0, r4
 80106a8:	bd10      	pop	{r4, pc}
	...

080106ac <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80106ac:	4b03      	ldr	r3, [pc, #12]	; (80106bc <prvTaskExitError+0x10>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	3301      	adds	r3, #1
 80106b2:	d001      	beq.n	80106b8 <prvTaskExitError+0xc>
 80106b4:	b672      	cpsid	i
 80106b6:	e7fe      	b.n	80106b6 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 80106b8:	b672      	cpsid	i
 80106ba:	e7fe      	b.n	80106ba <prvTaskExitError+0xe>
 80106bc:	200000b4 	.word	0x200000b4

080106c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80106c0:	4a06      	ldr	r2, [pc, #24]	; (80106dc <pxCurrentTCBConst2>)
 80106c2:	6813      	ldr	r3, [r2, #0]
 80106c4:	6818      	ldr	r0, [r3, #0]
 80106c6:	3020      	adds	r0, #32
 80106c8:	f380 8809 	msr	PSP, r0
 80106cc:	2002      	movs	r0, #2
 80106ce:	f380 8814 	msr	CONTROL, r0
 80106d2:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80106d4:	46ae      	mov	lr, r5
 80106d6:	b662      	cpsie	i
 80106d8:	bd00      	pop	{pc}
 80106da:	46c0      	nop			; (mov r8, r8)

080106dc <pxCurrentTCBConst2>:
 80106dc:	20001f84 	.word	0x20001f84

080106e0 <pxPortInitialiseStack>:
{
 80106e0:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80106e2:	1f03      	subs	r3, r0, #4
 80106e4:	2480      	movs	r4, #128	; 0x80
 80106e6:	0464      	lsls	r4, r4, #17
 80106e8:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80106ea:	3b04      	subs	r3, #4
 80106ec:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80106ee:	3b04      	subs	r3, #4
 80106f0:	4902      	ldr	r1, [pc, #8]	; (80106fc <pxPortInitialiseStack+0x1c>)
 80106f2:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80106f4:	3b14      	subs	r3, #20
 80106f6:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80106f8:	3840      	subs	r0, #64	; 0x40
}
 80106fa:	bd10      	pop	{r4, pc}
 80106fc:	080106ad 	.word	0x080106ad

08010700 <SVC_Handler>:
}
 8010700:	4770      	bx	lr
	...

08010704 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010704:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8010706:	4b0f      	ldr	r3, [pc, #60]	; (8010744 <xPortStartScheduler+0x40>)
 8010708:	6819      	ldr	r1, [r3, #0]
 801070a:	22ff      	movs	r2, #255	; 0xff
 801070c:	0412      	lsls	r2, r2, #16
 801070e:	430a      	orrs	r2, r1
 8010710:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8010712:	6819      	ldr	r1, [r3, #0]
 8010714:	22ff      	movs	r2, #255	; 0xff
 8010716:	0612      	lsls	r2, r2, #24
 8010718:	430a      	orrs	r2, r1
 801071a:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801071c:	4b0a      	ldr	r3, [pc, #40]	; (8010748 <xPortStartScheduler+0x44>)
 801071e:	6818      	ldr	r0, [r3, #0]
 8010720:	21fa      	movs	r1, #250	; 0xfa
 8010722:	0089      	lsls	r1, r1, #2
 8010724:	f7ef fd14 	bl	8000150 <__udivsi3>
 8010728:	3801      	subs	r0, #1
 801072a:	4b08      	ldr	r3, [pc, #32]	; (801074c <xPortStartScheduler+0x48>)
 801072c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 801072e:	4b08      	ldr	r3, [pc, #32]	; (8010750 <xPortStartScheduler+0x4c>)
 8010730:	2207      	movs	r2, #7
 8010732:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 8010734:	4b07      	ldr	r3, [pc, #28]	; (8010754 <xPortStartScheduler+0x50>)
 8010736:	2200      	movs	r2, #0
 8010738:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 801073a:	f7ff ffc1 	bl	80106c0 <vPortStartFirstTask>
	prvTaskExitError();
 801073e:	f7ff ffb5 	bl	80106ac <prvTaskExitError>
 8010742:	46c0      	nop			; (mov r8, r8)
 8010744:	e000ed20 	.word	0xe000ed20
 8010748:	200000a0 	.word	0x200000a0
 801074c:	e000e014 	.word	0xe000e014
 8010750:	e000e010 	.word	0xe000e010
 8010754:	200000b4 	.word	0x200000b4

08010758 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8010758:	4b04      	ldr	r3, [pc, #16]	; (801076c <vPortYield+0x14>)
 801075a:	2280      	movs	r2, #128	; 0x80
 801075c:	0552      	lsls	r2, r2, #21
 801075e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8010760:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010764:	f3bf 8f6f 	isb	sy
}
 8010768:	4770      	bx	lr
 801076a:	46c0      	nop			; (mov r8, r8)
 801076c:	e000ed04 	.word	0xe000ed04

08010770 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8010770:	b672      	cpsid	i
    uxCriticalNesting++;
 8010772:	4a04      	ldr	r2, [pc, #16]	; (8010784 <vPortEnterCritical+0x14>)
 8010774:	6813      	ldr	r3, [r2, #0]
 8010776:	3301      	adds	r3, #1
 8010778:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 801077a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801077e:	f3bf 8f6f 	isb	sy
}
 8010782:	4770      	bx	lr
 8010784:	200000b4 	.word	0x200000b4

08010788 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8010788:	4b06      	ldr	r3, [pc, #24]	; (80107a4 <vPortExitCritical+0x1c>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d101      	bne.n	8010794 <vPortExitCritical+0xc>
 8010790:	b672      	cpsid	i
 8010792:	e7fe      	b.n	8010792 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8010794:	3b01      	subs	r3, #1
 8010796:	4a03      	ldr	r2, [pc, #12]	; (80107a4 <vPortExitCritical+0x1c>)
 8010798:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 801079a:	2b00      	cmp	r3, #0
 801079c:	d100      	bne.n	80107a0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 801079e:	b662      	cpsie	i
}
 80107a0:	4770      	bx	lr
 80107a2:	46c0      	nop			; (mov r8, r8)
 80107a4:	200000b4 	.word	0x200000b4

080107a8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 80107a8:	f3ef 8010 	mrs	r0, PRIMASK
 80107ac:	b672      	cpsid	i
 80107ae:	4770      	bx	lr
}
 80107b0:	2000      	movs	r0, #0

080107b2 <vClearInterruptMaskFromISR>:
	__asm volatile(
 80107b2:	f380 8810 	msr	PRIMASK, r0
 80107b6:	4770      	bx	lr

080107b8 <PendSV_Handler>:
	__asm volatile
 80107b8:	f3ef 8009 	mrs	r0, PSP
 80107bc:	4b0e      	ldr	r3, [pc, #56]	; (80107f8 <pxCurrentTCBConst>)
 80107be:	681a      	ldr	r2, [r3, #0]
 80107c0:	3820      	subs	r0, #32
 80107c2:	6010      	str	r0, [r2, #0]
 80107c4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80107c6:	4644      	mov	r4, r8
 80107c8:	464d      	mov	r5, r9
 80107ca:	4656      	mov	r6, sl
 80107cc:	465f      	mov	r7, fp
 80107ce:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80107d0:	b508      	push	{r3, lr}
 80107d2:	b672      	cpsid	i
 80107d4:	f7ff fa42 	bl	800fc5c <vTaskSwitchContext>
 80107d8:	b662      	cpsie	i
 80107da:	bc0c      	pop	{r2, r3}
 80107dc:	6811      	ldr	r1, [r2, #0]
 80107de:	6808      	ldr	r0, [r1, #0]
 80107e0:	3010      	adds	r0, #16
 80107e2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80107e4:	46a0      	mov	r8, r4
 80107e6:	46a9      	mov	r9, r5
 80107e8:	46b2      	mov	sl, r6
 80107ea:	46bb      	mov	fp, r7
 80107ec:	f380 8809 	msr	PSP, r0
 80107f0:	3820      	subs	r0, #32
 80107f2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80107f4:	4718      	bx	r3
 80107f6:	46c0      	nop			; (mov r8, r8)

080107f8 <pxCurrentTCBConst>:
 80107f8:	20001f84 	.word	0x20001f84

080107fc <xPortSysTickHandler>:
{
 80107fc:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80107fe:	f7ff ffd3 	bl	80107a8 <ulSetInterruptMaskFromISR>
 8010802:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8010804:	f7ff f882 	bl	800f90c <xTaskIncrementTick>
 8010808:	2800      	cmp	r0, #0
 801080a:	d003      	beq.n	8010814 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 801080c:	4b03      	ldr	r3, [pc, #12]	; (801081c <xPortSysTickHandler+0x20>)
 801080e:	2280      	movs	r2, #128	; 0x80
 8010810:	0552      	lsls	r2, r2, #21
 8010812:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010814:	0020      	movs	r0, r4
 8010816:	f7ff ffcc 	bl	80107b2 <vClearInterruptMaskFromISR>
}
 801081a:	bd10      	pop	{r4, pc}
 801081c:	e000ed04 	.word	0xe000ed04

08010820 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010820:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010822:	4b12      	ldr	r3, [pc, #72]	; (801086c <prvInsertBlockIntoFreeList+0x4c>)
 8010824:	681a      	ldr	r2, [r3, #0]
 8010826:	4282      	cmp	r2, r0
 8010828:	d319      	bcc.n	801085e <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801082a:	685c      	ldr	r4, [r3, #4]
 801082c:	1919      	adds	r1, r3, r4
 801082e:	4288      	cmp	r0, r1
 8010830:	d103      	bne.n	801083a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010832:	6841      	ldr	r1, [r0, #4]
 8010834:	1909      	adds	r1, r1, r4
 8010836:	6059      	str	r1, [r3, #4]
 8010838:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801083a:	6841      	ldr	r1, [r0, #4]
 801083c:	1844      	adds	r4, r0, r1
 801083e:	42a2      	cmp	r2, r4
 8010840:	d111      	bne.n	8010866 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010842:	4c0b      	ldr	r4, [pc, #44]	; (8010870 <prvInsertBlockIntoFreeList+0x50>)
 8010844:	6824      	ldr	r4, [r4, #0]
 8010846:	42a2      	cmp	r2, r4
 8010848:	d00b      	beq.n	8010862 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801084a:	6852      	ldr	r2, [r2, #4]
 801084c:	1852      	adds	r2, r2, r1
 801084e:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	6812      	ldr	r2, [r2, #0]
 8010854:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010856:	4298      	cmp	r0, r3
 8010858:	d000      	beq.n	801085c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801085a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801085c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801085e:	0013      	movs	r3, r2
 8010860:	e7e0      	b.n	8010824 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010862:	6002      	str	r2, [r0, #0]
 8010864:	e7f7      	b.n	8010856 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010866:	6002      	str	r2, [r0, #0]
 8010868:	e7f5      	b.n	8010856 <prvInsertBlockIntoFreeList+0x36>
 801086a:	46c0      	nop			; (mov r8, r8)
 801086c:	20006b2c 	.word	0x20006b2c
 8010870:	200020e4 	.word	0x200020e4

08010874 <pvPortMalloc>:
{
 8010874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010876:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8010878:	f7ff f834 	bl	800f8e4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801087c:	4b41      	ldr	r3, [pc, #260]	; (8010984 <pvPortMalloc+0x110>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d00a      	beq.n	801089a <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010884:	4b40      	ldr	r3, [pc, #256]	; (8010988 <pvPortMalloc+0x114>)
 8010886:	681f      	ldr	r7, [r3, #0]
 8010888:	423c      	tst	r4, r7
 801088a:	d02a      	beq.n	80108e2 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 801088c:	f7ff f8ca 	bl	800fa24 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8010890:	f7fd fc04 	bl	800e09c <vApplicationMallocFailedHook>
 8010894:	2500      	movs	r5, #0
}
 8010896:	0028      	movs	r0, r5
 8010898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 801089a:	4a3c      	ldr	r2, [pc, #240]	; (801098c <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801089c:	0753      	lsls	r3, r2, #29
 801089e:	d01e      	beq.n	80108de <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 80108a0:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80108a2:	2307      	movs	r3, #7
 80108a4:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 80108a6:	4b3a      	ldr	r3, [pc, #232]	; (8010990 <pvPortMalloc+0x11c>)
 80108a8:	18d3      	adds	r3, r2, r3
 80108aa:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80108ac:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80108ae:	4839      	ldr	r0, [pc, #228]	; (8010994 <pvPortMalloc+0x120>)
 80108b0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80108b2:	2100      	movs	r1, #0
 80108b4:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 80108b6:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 80108b8:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80108ba:	2007      	movs	r0, #7
 80108bc:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 80108be:	4831      	ldr	r0, [pc, #196]	; (8010984 <pvPortMalloc+0x110>)
 80108c0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80108c2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80108c4:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 80108c6:	1a99      	subs	r1, r3, r2
 80108c8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80108ca:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80108cc:	4b32      	ldr	r3, [pc, #200]	; (8010998 <pvPortMalloc+0x124>)
 80108ce:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80108d0:	4b32      	ldr	r3, [pc, #200]	; (801099c <pvPortMalloc+0x128>)
 80108d2:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80108d4:	4b2c      	ldr	r3, [pc, #176]	; (8010988 <pvPortMalloc+0x114>)
 80108d6:	2280      	movs	r2, #128	; 0x80
 80108d8:	0612      	lsls	r2, r2, #24
 80108da:	601a      	str	r2, [r3, #0]
 80108dc:	e7d2      	b.n	8010884 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80108de:	4b2c      	ldr	r3, [pc, #176]	; (8010990 <pvPortMalloc+0x11c>)
 80108e0:	e7e5      	b.n	80108ae <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 80108e2:	2c00      	cmp	r4, #0
 80108e4:	d008      	beq.n	80108f8 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 80108e6:	0023      	movs	r3, r4
 80108e8:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80108ea:	075a      	lsls	r2, r3, #29
 80108ec:	d002      	beq.n	80108f4 <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80108ee:	2207      	movs	r2, #7
 80108f0:	4393      	bics	r3, r2
 80108f2:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d102      	bne.n	80108fe <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 80108f8:	f7ff f894 	bl	800fa24 <xTaskResumeAll>
 80108fc:	e7c8      	b.n	8010890 <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80108fe:	4a27      	ldr	r2, [pc, #156]	; (801099c <pvPortMalloc+0x128>)
 8010900:	6816      	ldr	r6, [r2, #0]
 8010902:	429e      	cmp	r6, r3
 8010904:	d302      	bcc.n	801090c <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 8010906:	4a23      	ldr	r2, [pc, #140]	; (8010994 <pvPortMalloc+0x120>)
 8010908:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801090a:	e004      	b.n	8010916 <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 801090c:	f7ff f88a 	bl	800fa24 <xTaskResumeAll>
 8010910:	e7be      	b.n	8010890 <pvPortMalloc+0x1c>
 8010912:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8010914:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010916:	6861      	ldr	r1, [r4, #4]
 8010918:	4299      	cmp	r1, r3
 801091a:	d202      	bcs.n	8010922 <pvPortMalloc+0xae>
 801091c:	6821      	ldr	r1, [r4, #0]
 801091e:	2900      	cmp	r1, #0
 8010920:	d1f7      	bne.n	8010912 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 8010922:	4918      	ldr	r1, [pc, #96]	; (8010984 <pvPortMalloc+0x110>)
 8010924:	6809      	ldr	r1, [r1, #0]
 8010926:	42a1      	cmp	r1, r4
 8010928:	d00b      	beq.n	8010942 <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801092a:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801092c:	6821      	ldr	r1, [r4, #0]
 801092e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010930:	6862      	ldr	r2, [r4, #4]
 8010932:	1ad2      	subs	r2, r2, r3
 8010934:	2a10      	cmp	r2, #16
 8010936:	d90b      	bls.n	8010950 <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010938:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801093a:	0741      	lsls	r1, r0, #29
 801093c:	d004      	beq.n	8010948 <pvPortMalloc+0xd4>
 801093e:	b672      	cpsid	i
 8010940:	e7fe      	b.n	8010940 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 8010942:	f7ff f86f 	bl	800fa24 <xTaskResumeAll>
 8010946:	e7a3      	b.n	8010890 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010948:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801094a:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 801094c:	f7ff ff68 	bl	8010820 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010950:	6862      	ldr	r2, [r4, #4]
 8010952:	1ab6      	subs	r6, r6, r2
 8010954:	4911      	ldr	r1, [pc, #68]	; (801099c <pvPortMalloc+0x128>)
 8010956:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010958:	490f      	ldr	r1, [pc, #60]	; (8010998 <pvPortMalloc+0x124>)
 801095a:	6809      	ldr	r1, [r1, #0]
 801095c:	428e      	cmp	r6, r1
 801095e:	d201      	bcs.n	8010964 <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010960:	490d      	ldr	r1, [pc, #52]	; (8010998 <pvPortMalloc+0x124>)
 8010962:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010964:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010966:	4317      	orrs	r7, r2
 8010968:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801096a:	2300      	movs	r3, #0
 801096c:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 801096e:	f7ff f859 	bl	800fa24 <xTaskResumeAll>
		if( pvReturn == NULL )
 8010972:	2d00      	cmp	r5, #0
 8010974:	d100      	bne.n	8010978 <pvPortMalloc+0x104>
 8010976:	e78b      	b.n	8010890 <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010978:	076b      	lsls	r3, r5, #29
 801097a:	d100      	bne.n	801097e <pvPortMalloc+0x10a>
 801097c:	e78b      	b.n	8010896 <pvPortMalloc+0x22>
 801097e:	b672      	cpsid	i
 8010980:	e7fe      	b.n	8010980 <pvPortMalloc+0x10c>
 8010982:	46c0      	nop			; (mov r8, r8)
 8010984:	200020e4 	.word	0x200020e4
 8010988:	20006b20 	.word	0x20006b20
 801098c:	200020e8 	.word	0x200020e8
 8010990:	00004a38 	.word	0x00004a38
 8010994:	20006b2c 	.word	0x20006b2c
 8010998:	20006b28 	.word	0x20006b28
 801099c:	20006b24 	.word	0x20006b24

080109a0 <vPortFree>:
{
 80109a0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80109a2:	2800      	cmp	r0, #0
 80109a4:	d020      	beq.n	80109e8 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80109a6:	0003      	movs	r3, r0
 80109a8:	3b08      	subs	r3, #8
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	4a0f      	ldr	r2, [pc, #60]	; (80109ec <vPortFree+0x4c>)
 80109ae:	6812      	ldr	r2, [r2, #0]
 80109b0:	421a      	tst	r2, r3
 80109b2:	d101      	bne.n	80109b8 <vPortFree+0x18>
 80109b4:	b672      	cpsid	i
 80109b6:	e7fe      	b.n	80109b6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80109b8:	0001      	movs	r1, r0
 80109ba:	3908      	subs	r1, #8
 80109bc:	6809      	ldr	r1, [r1, #0]
 80109be:	2900      	cmp	r1, #0
 80109c0:	d001      	beq.n	80109c6 <vPortFree+0x26>
 80109c2:	b672      	cpsid	i
 80109c4:	e7fe      	b.n	80109c4 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80109c6:	3808      	subs	r0, #8
 80109c8:	0004      	movs	r4, r0
 80109ca:	4393      	bics	r3, r2
 80109cc:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 80109ce:	f7fe ff89 	bl	800f8e4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80109d2:	4a07      	ldr	r2, [pc, #28]	; (80109f0 <vPortFree+0x50>)
 80109d4:	6863      	ldr	r3, [r4, #4]
 80109d6:	6811      	ldr	r1, [r2, #0]
 80109d8:	468c      	mov	ip, r1
 80109da:	4463      	add	r3, ip
 80109dc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80109de:	0020      	movs	r0, r4
 80109e0:	f7ff ff1e 	bl	8010820 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80109e4:	f7ff f81e 	bl	800fa24 <xTaskResumeAll>
}
 80109e8:	bd10      	pop	{r4, pc}
 80109ea:	46c0      	nop			; (mov r8, r8)
 80109ec:	20006b20 	.word	0x20006b20
 80109f0:	20006b24 	.word	0x20006b24

080109f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80109f4:	b510      	push	{r4, lr}
 80109f6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80109f8:	f002 f96a 	bl	8012cd0 <HAL_RCC_GetHCLKFreq>
 80109fc:	21fa      	movs	r1, #250	; 0xfa
 80109fe:	0089      	lsls	r1, r1, #2
 8010a00:	f7ef fba6 	bl	8000150 <__udivsi3>
 8010a04:	f000 fc0c 	bl	8011220 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8010a08:	2001      	movs	r0, #1
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	0021      	movs	r1, r4
 8010a0e:	4240      	negs	r0, r0
 8010a10:	f000 fbbe 	bl	8011190 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8010a14:	2000      	movs	r0, #0
 8010a16:	bd10      	pop	{r4, pc}

08010a18 <HAL_Init>:
{
 8010a18:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010a1a:	4a06      	ldr	r2, [pc, #24]	; (8010a34 <HAL_Init+0x1c>)
 8010a1c:	6813      	ldr	r3, [r2, #0]
 8010a1e:	2110      	movs	r1, #16
 8010a20:	430b      	orrs	r3, r1
 8010a22:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8010a24:	2000      	movs	r0, #0
 8010a26:	f7ff ffe5 	bl	80109f4 <HAL_InitTick>
  HAL_MspInit();
 8010a2a:	f001 fcf9 	bl	8012420 <HAL_MspInit>
}
 8010a2e:	2000      	movs	r0, #0
 8010a30:	bd10      	pop	{r4, pc}
 8010a32:	46c0      	nop			; (mov r8, r8)
 8010a34:	40022000 	.word	0x40022000

08010a38 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8010a38:	4a02      	ldr	r2, [pc, #8]	; (8010a44 <HAL_IncTick+0xc>)
 8010a3a:	6813      	ldr	r3, [r2, #0]
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	6013      	str	r3, [r2, #0]
}
 8010a40:	4770      	bx	lr
 8010a42:	46c0      	nop			; (mov r8, r8)
 8010a44:	20006b34 	.word	0x20006b34

08010a48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010a48:	4b01      	ldr	r3, [pc, #4]	; (8010a50 <HAL_GetTick+0x8>)
 8010a4a:	6818      	ldr	r0, [r3, #0]
}
 8010a4c:	4770      	bx	lr
 8010a4e:	46c0      	nop			; (mov r8, r8)
 8010a50:	20006b34 	.word	0x20006b34

08010a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8010a54:	b510      	push	{r4, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8010a5a:	f7ff fff5 	bl	8010a48 <HAL_GetTick>
 8010a5e:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010a60:	f7ff fff2 	bl	8010a48 <HAL_GetTick>
 8010a64:	9b01      	ldr	r3, [sp, #4]
 8010a66:	1b00      	subs	r0, r0, r4
 8010a68:	4298      	cmp	r0, r3
 8010a6a:	d3f9      	bcc.n	8010a60 <HAL_Delay+0xc>
  {
  }
}
 8010a6c:	b002      	add	sp, #8
 8010a6e:	bd10      	pop	{r4, pc}

08010a70 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010a70:	4b01      	ldr	r3, [pc, #4]	; (8010a78 <HAL_GetREVID+0x8>)
 8010a72:	6818      	ldr	r0, [r3, #0]
 8010a74:	0c00      	lsrs	r0, r0, #16
}
 8010a76:	4770      	bx	lr
 8010a78:	40015800 	.word	0x40015800

08010a7c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010a7c:	4b02      	ldr	r3, [pc, #8]	; (8010a88 <HAL_GetDEVID+0xc>)
 8010a7e:	6818      	ldr	r0, [r3, #0]
 8010a80:	0500      	lsls	r0, r0, #20
 8010a82:	0d00      	lsrs	r0, r0, #20
}
 8010a84:	4770      	bx	lr
 8010a86:	46c0      	nop			; (mov r8, r8)
 8010a88:	40015800 	.word	0x40015800

08010a8c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8010a8c:	b570      	push	{r4, r5, r6, lr}
 8010a8e:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010a90:	6803      	ldr	r3, [r0, #0]
 8010a92:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8010a94:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010a96:	0752      	lsls	r2, r2, #29
 8010a98:	d521      	bpl.n	8010ade <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010a9a:	689a      	ldr	r2, [r3, #8]
 8010a9c:	0752      	lsls	r2, r2, #29
 8010a9e:	d506      	bpl.n	8010aae <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8010aa0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010aa2:	0792      	lsls	r2, r2, #30
 8010aa4:	d403      	bmi.n	8010aae <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8010aa6:	689a      	ldr	r2, [r3, #8]
 8010aa8:	2110      	movs	r1, #16
 8010aaa:	430a      	orrs	r2, r1
 8010aac:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8010aae:	f7ff ffcb 	bl	8010a48 <HAL_GetTick>
 8010ab2:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8010ab4:	2504      	movs	r5, #4
 8010ab6:	6823      	ldr	r3, [r4, #0]
 8010ab8:	689b      	ldr	r3, [r3, #8]
 8010aba:	421d      	tst	r5, r3
 8010abc:	d00e      	beq.n	8010adc <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8010abe:	f7ff ffc3 	bl	8010a48 <HAL_GetTick>
 8010ac2:	1b80      	subs	r0, r0, r6
 8010ac4:	2802      	cmp	r0, #2
 8010ac6:	d9f6      	bls.n	8010ab6 <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010ac8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010aca:	2210      	movs	r2, #16
 8010acc:	4313      	orrs	r3, r2
 8010ace:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010ad0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010ad2:	3a0f      	subs	r2, #15
 8010ad4:	4313      	orrs	r3, r2
 8010ad6:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010ad8:	2001      	movs	r0, #1
 8010ada:	e000      	b.n	8010ade <ADC_ConversionStop+0x52>
  return HAL_OK;
 8010adc:	2000      	movs	r0, #0
}
 8010ade:	bd70      	pop	{r4, r5, r6, pc}

08010ae0 <ADC_Disable>:
{
 8010ae0:	b570      	push	{r4, r5, r6, lr}
 8010ae2:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010ae4:	6802      	ldr	r2, [r0, #0]
 8010ae6:	6891      	ldr	r1, [r2, #8]
 8010ae8:	2303      	movs	r3, #3
 8010aea:	400b      	ands	r3, r1
  return HAL_OK;
 8010aec:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010aee:	2b01      	cmp	r3, #1
 8010af0:	d000      	beq.n	8010af4 <ADC_Disable+0x14>
}
 8010af2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010af4:	6813      	ldr	r3, [r2, #0]
 8010af6:	07db      	lsls	r3, r3, #31
 8010af8:	d402      	bmi.n	8010b00 <ADC_Disable+0x20>
 8010afa:	68d3      	ldr	r3, [r2, #12]
 8010afc:	041b      	lsls	r3, r3, #16
 8010afe:	d5f8      	bpl.n	8010af2 <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8010b00:	6891      	ldr	r1, [r2, #8]
 8010b02:	2305      	movs	r3, #5
 8010b04:	400b      	ands	r3, r1
 8010b06:	2b01      	cmp	r3, #1
 8010b08:	d009      	beq.n	8010b1e <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010b0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010b0c:	2210      	movs	r2, #16
 8010b0e:	4313      	orrs	r3, r2
 8010b10:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010b12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010b14:	3a0f      	subs	r2, #15
 8010b16:	4313      	orrs	r3, r2
 8010b18:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8010b1a:	2001      	movs	r0, #1
 8010b1c:	e7e9      	b.n	8010af2 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 8010b1e:	6893      	ldr	r3, [r2, #8]
 8010b20:	2102      	movs	r1, #2
 8010b22:	430b      	orrs	r3, r1
 8010b24:	6093      	str	r3, [r2, #8]
 8010b26:	6823      	ldr	r3, [r4, #0]
 8010b28:	2203      	movs	r2, #3
 8010b2a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8010b2c:	f7ff ff8c 	bl	8010a48 <HAL_GetTick>
 8010b30:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8010b32:	2501      	movs	r5, #1
 8010b34:	6823      	ldr	r3, [r4, #0]
 8010b36:	689b      	ldr	r3, [r3, #8]
 8010b38:	421d      	tst	r5, r3
 8010b3a:	d00e      	beq.n	8010b5a <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8010b3c:	f7ff ff84 	bl	8010a48 <HAL_GetTick>
 8010b40:	1b80      	subs	r0, r0, r6
 8010b42:	2802      	cmp	r0, #2
 8010b44:	d9f6      	bls.n	8010b34 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010b46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010b48:	2210      	movs	r2, #16
 8010b4a:	4313      	orrs	r3, r2
 8010b4c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010b4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010b50:	3a0f      	subs	r2, #15
 8010b52:	4313      	orrs	r3, r2
 8010b54:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010b56:	2001      	movs	r0, #1
 8010b58:	e7cb      	b.n	8010af2 <ADC_Disable+0x12>
  return HAL_OK;
 8010b5a:	2000      	movs	r0, #0
 8010b5c:	e7c9      	b.n	8010af2 <ADC_Disable+0x12>
	...

08010b60 <ADC_Enable>:
{
 8010b60:	b570      	push	{r4, r5, r6, lr}
 8010b62:	b082      	sub	sp, #8
 8010b64:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010b66:	2300      	movs	r3, #0
 8010b68:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010b6a:	6803      	ldr	r3, [r0, #0]
 8010b6c:	6899      	ldr	r1, [r3, #8]
 8010b6e:	2203      	movs	r2, #3
 8010b70:	400a      	ands	r2, r1
 8010b72:	2a01      	cmp	r2, #1
 8010b74:	d02d      	beq.n	8010bd2 <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8010b76:	6899      	ldr	r1, [r3, #8]
 8010b78:	4a20      	ldr	r2, [pc, #128]	; (8010bfc <ADC_Enable+0x9c>)
 8010b7a:	4211      	tst	r1, r2
 8010b7c:	d131      	bne.n	8010be2 <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 8010b7e:	689a      	ldr	r2, [r3, #8]
 8010b80:	2101      	movs	r1, #1
 8010b82:	430a      	orrs	r2, r1
 8010b84:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8010b86:	4b1e      	ldr	r3, [pc, #120]	; (8010c00 <ADC_Enable+0xa0>)
 8010b88:	6818      	ldr	r0, [r3, #0]
 8010b8a:	491e      	ldr	r1, [pc, #120]	; (8010c04 <ADC_Enable+0xa4>)
 8010b8c:	f7ef fae0 	bl	8000150 <__udivsi3>
 8010b90:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8010b92:	9b01      	ldr	r3, [sp, #4]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d005      	beq.n	8010ba4 <ADC_Enable+0x44>
      wait_loop_index--;
 8010b98:	9b01      	ldr	r3, [sp, #4]
 8010b9a:	3b01      	subs	r3, #1
 8010b9c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8010b9e:	9b01      	ldr	r3, [sp, #4]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d1f9      	bne.n	8010b98 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 8010ba4:	f7ff ff50 	bl	8010a48 <HAL_GetTick>
 8010ba8:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8010baa:	2501      	movs	r5, #1
 8010bac:	6823      	ldr	r3, [r4, #0]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	421d      	tst	r5, r3
 8010bb2:	d121      	bne.n	8010bf8 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010bb4:	f7ff ff48 	bl	8010a48 <HAL_GetTick>
 8010bb8:	1b80      	subs	r0, r0, r6
 8010bba:	2802      	cmp	r0, #2
 8010bbc:	d9f6      	bls.n	8010bac <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010bbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010bc0:	2210      	movs	r2, #16
 8010bc2:	4313      	orrs	r3, r2
 8010bc4:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010bc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010bc8:	3a0f      	subs	r2, #15
 8010bca:	4313      	orrs	r3, r2
 8010bcc:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010bce:	2001      	movs	r0, #1
 8010bd0:	e010      	b.n	8010bf4 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010bd2:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8010bd4:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010bd6:	07d2      	lsls	r2, r2, #31
 8010bd8:	d40c      	bmi.n	8010bf4 <ADC_Enable+0x94>
 8010bda:	68da      	ldr	r2, [r3, #12]
 8010bdc:	0412      	lsls	r2, r2, #16
 8010bde:	d5ca      	bpl.n	8010b76 <ADC_Enable+0x16>
 8010be0:	e008      	b.n	8010bf4 <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010be2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010be4:	2210      	movs	r2, #16
 8010be6:	4313      	orrs	r3, r2
 8010be8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010bea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010bec:	3a0f      	subs	r2, #15
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8010bf2:	2001      	movs	r0, #1
}
 8010bf4:	b002      	add	sp, #8
 8010bf6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8010bf8:	2000      	movs	r0, #0
 8010bfa:	e7fb      	b.n	8010bf4 <ADC_Enable+0x94>
 8010bfc:	80000017 	.word	0x80000017
 8010c00:	200000a0 	.word	0x200000a0
 8010c04:	000f4240 	.word	0x000f4240

08010c08 <HAL_ADC_Init>:
{
 8010c08:	b570      	push	{r4, r5, r6, lr}
 8010c0a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8010c0c:	d100      	bne.n	8010c10 <HAL_ADC_Init+0x8>
 8010c0e:	e09b      	b.n	8010d48 <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8010c10:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d073      	beq.n	8010cfe <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8010c16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010c18:	06db      	lsls	r3, r3, #27
 8010c1a:	d500      	bpl.n	8010c1e <HAL_ADC_Init+0x16>
 8010c1c:	e08e      	b.n	8010d3c <HAL_ADC_Init+0x134>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8010c1e:	6822      	ldr	r2, [r4, #0]
 8010c20:	6893      	ldr	r3, [r2, #8]
 8010c22:	2104      	movs	r1, #4
 8010c24:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 8010c26:	d000      	beq.n	8010c2a <HAL_ADC_Init+0x22>
 8010c28:	e088      	b.n	8010d3c <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 8010c2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010c2c:	4847      	ldr	r0, [pc, #284]	; (8010d4c <HAL_ADC_Init+0x144>)
 8010c2e:	4003      	ands	r3, r0
 8010c30:	3006      	adds	r0, #6
 8010c32:	30ff      	adds	r0, #255	; 0xff
 8010c34:	4303      	orrs	r3, r0
 8010c36:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010c38:	6890      	ldr	r0, [r2, #8]
 8010c3a:	2303      	movs	r3, #3
 8010c3c:	4003      	ands	r3, r0
 8010c3e:	2b01      	cmp	r3, #1
 8010c40:	d063      	beq.n	8010d0a <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 8010c42:	68d3      	ldr	r3, [r2, #12]
 8010c44:	2018      	movs	r0, #24
 8010c46:	4383      	bics	r3, r0
 8010c48:	68a0      	ldr	r0, [r4, #8]
 8010c4a:	4303      	orrs	r3, r0
 8010c4c:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8010c4e:	6822      	ldr	r2, [r4, #0]
 8010c50:	6913      	ldr	r3, [r2, #16]
 8010c52:	009b      	lsls	r3, r3, #2
 8010c54:	089b      	lsrs	r3, r3, #2
 8010c56:	6860      	ldr	r0, [r4, #4]
 8010c58:	4303      	orrs	r3, r0
 8010c5a:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8010c5c:	6822      	ldr	r2, [r4, #0]
 8010c5e:	68d3      	ldr	r3, [r2, #12]
 8010c60:	483b      	ldr	r0, [pc, #236]	; (8010d50 <HAL_ADC_Init+0x148>)
 8010c62:	4003      	ands	r3, r0
 8010c64:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010c66:	69a3      	ldr	r3, [r4, #24]
 8010c68:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8010c6a:	69e3      	ldr	r3, [r4, #28]
 8010c6c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010c6e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010c70:	6a20      	ldr	r0, [r4, #32]
 8010c72:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010c74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c76:	000e      	movs	r6, r1
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d001      	beq.n	8010c80 <HAL_ADC_Init+0x78>
 8010c7c:	2680      	movs	r6, #128	; 0x80
 8010c7e:	0176      	lsls	r6, r6, #5
 8010c80:	68e3      	ldr	r3, [r4, #12]
 8010c82:	431a      	orrs	r2, r3
 8010c84:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010c86:	6923      	ldr	r3, [r4, #16]
 8010c88:	2b02      	cmp	r3, #2
 8010c8a:	d045      	beq.n	8010d18 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8010c8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010c8e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010c90:	4313      	orrs	r3, r2
 8010c92:	4333      	orrs	r3, r6
 8010c94:	430b      	orrs	r3, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010c96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010c98:	2a01      	cmp	r2, #1
 8010c9a:	d03f      	beq.n	8010d1c <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010c9c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010c9e:	21c2      	movs	r1, #194	; 0xc2
 8010ca0:	31ff      	adds	r1, #255	; 0xff
 8010ca2:	428a      	cmp	r2, r1
 8010ca4:	d002      	beq.n	8010cac <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8010ca6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010ca8:	430a      	orrs	r2, r1
 8010caa:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8010cac:	6821      	ldr	r1, [r4, #0]
 8010cae:	68ca      	ldr	r2, [r1, #12]
 8010cb0:	431a      	orrs	r2, r3
 8010cb2:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010cb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010cb6:	2180      	movs	r1, #128	; 0x80
 8010cb8:	0549      	lsls	r1, r1, #21
 8010cba:	428a      	cmp	r2, r1
 8010cbc:	d002      	beq.n	8010cc4 <HAL_ADC_Init+0xbc>
 8010cbe:	3a01      	subs	r2, #1
 8010cc0:	2a06      	cmp	r2, #6
 8010cc2:	d80a      	bhi.n	8010cda <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010cc4:	6820      	ldr	r0, [r4, #0]
 8010cc6:	6941      	ldr	r1, [r0, #20]
 8010cc8:	2207      	movs	r2, #7
 8010cca:	4391      	bics	r1, r2
 8010ccc:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8010cce:	6821      	ldr	r1, [r4, #0]
 8010cd0:	6948      	ldr	r0, [r1, #20]
 8010cd2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010cd4:	402a      	ands	r2, r5
 8010cd6:	4302      	orrs	r2, r0
 8010cd8:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8010cda:	6822      	ldr	r2, [r4, #0]
 8010cdc:	68d2      	ldr	r2, [r2, #12]
 8010cde:	491d      	ldr	r1, [pc, #116]	; (8010d54 <HAL_ADC_Init+0x14c>)
 8010ce0:	400a      	ands	r2, r1
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d020      	beq.n	8010d28 <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 8010ce6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010ce8:	2212      	movs	r2, #18
 8010cea:	4393      	bics	r3, r2
 8010cec:	3a02      	subs	r2, #2
 8010cee:	4313      	orrs	r3, r2
 8010cf0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010cf2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010cf4:	3a0f      	subs	r2, #15
 8010cf6:	4313      	orrs	r3, r2
 8010cf8:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8010cfa:	2001      	movs	r0, #1
 8010cfc:	e023      	b.n	8010d46 <HAL_ADC_Init+0x13e>
    ADC_CLEAR_ERRORCODE(hadc);
 8010cfe:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8010d00:	2240      	movs	r2, #64	; 0x40
 8010d02:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8010d04:	f7fb ff08 	bl	800cb18 <HAL_ADC_MspInit>
 8010d08:	e785      	b.n	8010c16 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010d0a:	6813      	ldr	r3, [r2, #0]
 8010d0c:	07db      	lsls	r3, r3, #31
 8010d0e:	d4a5      	bmi.n	8010c5c <HAL_ADC_Init+0x54>
 8010d10:	68d3      	ldr	r3, [r2, #12]
 8010d12:	041b      	lsls	r3, r3, #16
 8010d14:	d4a2      	bmi.n	8010c5c <HAL_ADC_Init+0x54>
 8010d16:	e794      	b.n	8010c42 <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010d18:	2104      	movs	r1, #4
 8010d1a:	e7b7      	b.n	8010c8c <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	d1bd      	bne.n	8010c9c <HAL_ADC_Init+0x94>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8010d20:	2280      	movs	r2, #128	; 0x80
 8010d22:	0252      	lsls	r2, r2, #9
 8010d24:	4313      	orrs	r3, r2
 8010d26:	e7b9      	b.n	8010c9c <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 8010d28:	2300      	movs	r3, #0
 8010d2a:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8010d2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010d2e:	2203      	movs	r2, #3
 8010d30:	4393      	bics	r3, r2
 8010d32:	3a02      	subs	r2, #2
 8010d34:	4313      	orrs	r3, r2
 8010d36:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010d38:	2000      	movs	r0, #0
 8010d3a:	e004      	b.n	8010d46 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010d3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010d3e:	2210      	movs	r2, #16
 8010d40:	4313      	orrs	r3, r2
 8010d42:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010d44:	2001      	movs	r0, #1
}
 8010d46:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010d48:	2001      	movs	r0, #1
 8010d4a:	e7fc      	b.n	8010d46 <HAL_ADC_Init+0x13e>
 8010d4c:	fffffefd 	.word	0xfffffefd
 8010d50:	fffe0219 	.word	0xfffe0219
 8010d54:	833fffe7 	.word	0x833fffe7

08010d58 <HAL_ADC_Start>:
{
 8010d58:	b510      	push	{r4, lr}
 8010d5a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010d5c:	6803      	ldr	r3, [r0, #0]
 8010d5e:	689b      	ldr	r3, [r3, #8]
 8010d60:	075b      	lsls	r3, r3, #29
 8010d62:	d423      	bmi.n	8010dac <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8010d64:	2340      	movs	r3, #64	; 0x40
 8010d66:	5cc3      	ldrb	r3, [r0, r3]
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d021      	beq.n	8010db0 <HAL_ADC_Start+0x58>
 8010d6c:	2340      	movs	r3, #64	; 0x40
 8010d6e:	2201      	movs	r2, #1
 8010d70:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010d72:	69c3      	ldr	r3, [r0, #28]
 8010d74:	2b01      	cmp	r3, #1
 8010d76:	d114      	bne.n	8010da2 <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 8010d78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010d7a:	4a0e      	ldr	r2, [pc, #56]	; (8010db4 <HAL_ADC_Start+0x5c>)
 8010d7c:	401a      	ands	r2, r3
 8010d7e:	2380      	movs	r3, #128	; 0x80
 8010d80:	005b      	lsls	r3, r3, #1
 8010d82:	4313      	orrs	r3, r2
 8010d84:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010d86:	2300      	movs	r3, #0
 8010d88:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8010d8a:	2240      	movs	r2, #64	; 0x40
 8010d8c:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010d8e:	6823      	ldr	r3, [r4, #0]
 8010d90:	3a24      	subs	r2, #36	; 0x24
 8010d92:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010d94:	6822      	ldr	r2, [r4, #0]
 8010d96:	6893      	ldr	r3, [r2, #8]
 8010d98:	2104      	movs	r1, #4
 8010d9a:	430b      	orrs	r3, r1
 8010d9c:	6093      	str	r3, [r2, #8]
 8010d9e:	2000      	movs	r0, #0
}
 8010da0:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010da2:	f7ff fedd 	bl	8010b60 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010da6:	2800      	cmp	r0, #0
 8010da8:	d0e6      	beq.n	8010d78 <HAL_ADC_Start+0x20>
 8010daa:	e7f9      	b.n	8010da0 <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 8010dac:	2002      	movs	r0, #2
 8010dae:	e7f7      	b.n	8010da0 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8010db0:	2002      	movs	r0, #2
 8010db2:	e7f5      	b.n	8010da0 <HAL_ADC_Start+0x48>
 8010db4:	fffff0fe 	.word	0xfffff0fe

08010db8 <HAL_ADC_Stop>:
{ 
 8010db8:	b510      	push	{r4, lr}
 8010dba:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8010dbc:	2340      	movs	r3, #64	; 0x40
 8010dbe:	5cc3      	ldrb	r3, [r0, r3]
 8010dc0:	2b01      	cmp	r3, #1
 8010dc2:	d017      	beq.n	8010df4 <HAL_ADC_Stop+0x3c>
 8010dc4:	2340      	movs	r3, #64	; 0x40
 8010dc6:	2201      	movs	r2, #1
 8010dc8:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8010dca:	f7ff fe5f 	bl	8010a8c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	d003      	beq.n	8010dda <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8010dd2:	2340      	movs	r3, #64	; 0x40
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	54e2      	strb	r2, [r4, r3]
}
 8010dd8:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8010dda:	0020      	movs	r0, r4
 8010ddc:	f7ff fe80 	bl	8010ae0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8010de0:	2800      	cmp	r0, #0
 8010de2:	d1f6      	bne.n	8010dd2 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8010de4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010de6:	4a04      	ldr	r2, [pc, #16]	; (8010df8 <HAL_ADC_Stop+0x40>)
 8010de8:	4013      	ands	r3, r2
 8010dea:	3204      	adds	r2, #4
 8010dec:	32ff      	adds	r2, #255	; 0xff
 8010dee:	4313      	orrs	r3, r2
 8010df0:	6463      	str	r3, [r4, #68]	; 0x44
 8010df2:	e7ee      	b.n	8010dd2 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8010df4:	2002      	movs	r0, #2
 8010df6:	e7ef      	b.n	8010dd8 <HAL_ADC_Stop+0x20>
 8010df8:	fffffefe 	.word	0xfffffefe

08010dfc <HAL_ADC_PollForConversion>:
{
 8010dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dfe:	0006      	movs	r6, r0
 8010e00:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8010e02:	6943      	ldr	r3, [r0, #20]
 8010e04:	2b08      	cmp	r3, #8
 8010e06:	d026      	beq.n	8010e56 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010e08:	6803      	ldr	r3, [r0, #0]
 8010e0a:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8010e0c:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010e0e:	07db      	lsls	r3, r3, #31
 8010e10:	d418      	bmi.n	8010e44 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 8010e12:	f7ff fe19 	bl	8010a48 <HAL_GetTick>
 8010e16:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8010e18:	6832      	ldr	r2, [r6, #0]
 8010e1a:	6813      	ldr	r3, [r2, #0]
 8010e1c:	421d      	tst	r5, r3
 8010e1e:	d11c      	bne.n	8010e5a <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8010e20:	1c63      	adds	r3, r4, #1
 8010e22:	d0fa      	beq.n	8010e1a <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010e24:	2c00      	cmp	r4, #0
 8010e26:	d004      	beq.n	8010e32 <HAL_ADC_PollForConversion+0x36>
 8010e28:	f7ff fe0e 	bl	8010a48 <HAL_GetTick>
 8010e2c:	1bc0      	subs	r0, r0, r7
 8010e2e:	42a0      	cmp	r0, r4
 8010e30:	d9f2      	bls.n	8010e18 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010e32:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010e34:	2204      	movs	r2, #4
 8010e36:	4313      	orrs	r3, r2
 8010e38:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8010e3a:	2340      	movs	r3, #64	; 0x40
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8010e40:	2003      	movs	r0, #3
 8010e42:	e007      	b.n	8010e54 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010e44:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010e46:	2220      	movs	r2, #32
 8010e48:	4313      	orrs	r3, r2
 8010e4a:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8010e4c:	2340      	movs	r3, #64	; 0x40
 8010e4e:	2200      	movs	r2, #0
 8010e50:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010e52:	2001      	movs	r0, #1
}
 8010e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8010e56:	2508      	movs	r5, #8
 8010e58:	e7db      	b.n	8010e12 <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010e5a:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8010e5c:	2380      	movs	r3, #128	; 0x80
 8010e5e:	009b      	lsls	r3, r3, #2
 8010e60:	430b      	orrs	r3, r1
 8010e62:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010e64:	68d1      	ldr	r1, [r2, #12]
 8010e66:	23c0      	movs	r3, #192	; 0xc0
 8010e68:	011b      	lsls	r3, r3, #4
 8010e6a:	4219      	tst	r1, r3
 8010e6c:	d113      	bne.n	8010e96 <HAL_ADC_PollForConversion+0x9a>
 8010e6e:	6a33      	ldr	r3, [r6, #32]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d110      	bne.n	8010e96 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010e74:	6813      	ldr	r3, [r2, #0]
 8010e76:	071b      	lsls	r3, r3, #28
 8010e78:	d50d      	bpl.n	8010e96 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010e7a:	6893      	ldr	r3, [r2, #8]
 8010e7c:	075b      	lsls	r3, r3, #29
 8010e7e:	d412      	bmi.n	8010ea6 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010e80:	6853      	ldr	r3, [r2, #4]
 8010e82:	210c      	movs	r1, #12
 8010e84:	438b      	bics	r3, r1
 8010e86:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010e88:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010e8a:	4a0b      	ldr	r2, [pc, #44]	; (8010eb8 <HAL_ADC_PollForConversion+0xbc>)
 8010e8c:	4013      	ands	r3, r2
 8010e8e:	3204      	adds	r2, #4
 8010e90:	32ff      	adds	r2, #255	; 0xff
 8010e92:	4313      	orrs	r3, r2
 8010e94:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 8010e96:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010e98:	69b3      	ldr	r3, [r6, #24]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d1da      	bne.n	8010e54 <HAL_ADC_PollForConversion+0x58>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8010e9e:	6833      	ldr	r3, [r6, #0]
 8010ea0:	220c      	movs	r2, #12
 8010ea2:	601a      	str	r2, [r3, #0]
 8010ea4:	e7d6      	b.n	8010e54 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010ea6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010ea8:	2220      	movs	r2, #32
 8010eaa:	4313      	orrs	r3, r2
 8010eac:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010eae:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8010eb0:	3a1f      	subs	r2, #31
 8010eb2:	4313      	orrs	r3, r2
 8010eb4:	64b3      	str	r3, [r6, #72]	; 0x48
 8010eb6:	e7ee      	b.n	8010e96 <HAL_ADC_PollForConversion+0x9a>
 8010eb8:	fffffefe 	.word	0xfffffefe

08010ebc <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8010ebc:	6803      	ldr	r3, [r0, #0]
 8010ebe:	2208      	movs	r2, #8
 8010ec0:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8010ec2:	6803      	ldr	r3, [r0, #0]
 8010ec4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8010ec6:	4770      	bx	lr

08010ec8 <HAL_ADC_ConvCpltCallback>:
}
 8010ec8:	4770      	bx	lr

08010eca <HAL_ADC_LevelOutOfWindowCallback>:
}
 8010eca:	4770      	bx	lr

08010ecc <HAL_ADC_ErrorCallback>:
}
 8010ecc:	4770      	bx	lr
	...

08010ed0 <HAL_ADC_IRQHandler>:
{
 8010ed0:	b510      	push	{r4, lr}
 8010ed2:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8010ed4:	6803      	ldr	r3, [r0, #0]
 8010ed6:	681a      	ldr	r2, [r3, #0]
 8010ed8:	0752      	lsls	r2, r2, #29
 8010eda:	d502      	bpl.n	8010ee2 <HAL_ADC_IRQHandler+0x12>
 8010edc:	685a      	ldr	r2, [r3, #4]
 8010ede:	0752      	lsls	r2, r2, #29
 8010ee0:	d405      	bmi.n	8010eee <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8010ee2:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8010ee4:	0712      	lsls	r2, r2, #28
 8010ee6:	d529      	bpl.n	8010f3c <HAL_ADC_IRQHandler+0x6c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8010ee8:	685a      	ldr	r2, [r3, #4]
 8010eea:	0712      	lsls	r2, r2, #28
 8010eec:	d526      	bpl.n	8010f3c <HAL_ADC_IRQHandler+0x6c>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010eee:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010ef0:	06d2      	lsls	r2, r2, #27
 8010ef2:	d404      	bmi.n	8010efe <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8010ef4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010ef6:	2280      	movs	r2, #128	; 0x80
 8010ef8:	0092      	lsls	r2, r2, #2
 8010efa:	430a      	orrs	r2, r1
 8010efc:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010efe:	68d9      	ldr	r1, [r3, #12]
 8010f00:	22c0      	movs	r2, #192	; 0xc0
 8010f02:	0112      	lsls	r2, r2, #4
 8010f04:	4211      	tst	r1, r2
 8010f06:	d113      	bne.n	8010f30 <HAL_ADC_IRQHandler+0x60>
 8010f08:	6a22      	ldr	r2, [r4, #32]
 8010f0a:	2a00      	cmp	r2, #0
 8010f0c:	d110      	bne.n	8010f30 <HAL_ADC_IRQHandler+0x60>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010f0e:	681a      	ldr	r2, [r3, #0]
 8010f10:	0712      	lsls	r2, r2, #28
 8010f12:	d50d      	bpl.n	8010f30 <HAL_ADC_IRQHandler+0x60>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010f14:	689a      	ldr	r2, [r3, #8]
 8010f16:	0752      	lsls	r2, r2, #29
 8010f18:	d431      	bmi.n	8010f7e <HAL_ADC_IRQHandler+0xae>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010f1a:	685a      	ldr	r2, [r3, #4]
 8010f1c:	210c      	movs	r1, #12
 8010f1e:	438a      	bics	r2, r1
 8010f20:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8010f22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010f24:	4a20      	ldr	r2, [pc, #128]	; (8010fa8 <HAL_ADC_IRQHandler+0xd8>)
 8010f26:	4013      	ands	r3, r2
 8010f28:	3204      	adds	r2, #4
 8010f2a:	32ff      	adds	r2, #255	; 0xff
 8010f2c:	4313      	orrs	r3, r2
 8010f2e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8010f30:	0020      	movs	r0, r4
 8010f32:	f7ff ffc9 	bl	8010ec8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8010f36:	6823      	ldr	r3, [r4, #0]
 8010f38:	220c      	movs	r2, #12
 8010f3a:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8010f3c:	6823      	ldr	r3, [r4, #0]
 8010f3e:	681a      	ldr	r2, [r3, #0]
 8010f40:	0612      	lsls	r2, r2, #24
 8010f42:	d502      	bpl.n	8010f4a <HAL_ADC_IRQHandler+0x7a>
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	061b      	lsls	r3, r3, #24
 8010f48:	d422      	bmi.n	8010f90 <HAL_ADC_IRQHandler+0xc0>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8010f4a:	6823      	ldr	r3, [r4, #0]
 8010f4c:	681a      	ldr	r2, [r3, #0]
 8010f4e:	06d2      	lsls	r2, r2, #27
 8010f50:	d514      	bpl.n	8010f7c <HAL_ADC_IRQHandler+0xac>
 8010f52:	685a      	ldr	r2, [r3, #4]
 8010f54:	06d2      	lsls	r2, r2, #27
 8010f56:	d511      	bpl.n	8010f7c <HAL_ADC_IRQHandler+0xac>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8010f58:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010f5a:	2a01      	cmp	r2, #1
 8010f5c:	d002      	beq.n	8010f64 <HAL_ADC_IRQHandler+0x94>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8010f5e:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8010f60:	07d2      	lsls	r2, r2, #31
 8010f62:	d508      	bpl.n	8010f76 <HAL_ADC_IRQHandler+0xa6>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8010f64:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8010f66:	2102      	movs	r1, #2
 8010f68:	430a      	orrs	r2, r1
 8010f6a:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010f6c:	2210      	movs	r2, #16
 8010f6e:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8010f70:	0020      	movs	r0, r4
 8010f72:	f7ff ffab 	bl	8010ecc <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010f76:	6823      	ldr	r3, [r4, #0]
 8010f78:	2210      	movs	r2, #16
 8010f7a:	601a      	str	r2, [r3, #0]
}
 8010f7c:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010f7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010f80:	2220      	movs	r2, #32
 8010f82:	4313      	orrs	r3, r2
 8010f84:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010f86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010f88:	3a1f      	subs	r2, #31
 8010f8a:	4313      	orrs	r3, r2
 8010f8c:	64a3      	str	r3, [r4, #72]	; 0x48
 8010f8e:	e7cf      	b.n	8010f30 <HAL_ADC_IRQHandler+0x60>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8010f90:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010f92:	2380      	movs	r3, #128	; 0x80
 8010f94:	025b      	lsls	r3, r3, #9
 8010f96:	4313      	orrs	r3, r2
 8010f98:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8010f9a:	0020      	movs	r0, r4
 8010f9c:	f7ff ff95 	bl	8010eca <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8010fa0:	6823      	ldr	r3, [r4, #0]
 8010fa2:	2280      	movs	r2, #128	; 0x80
 8010fa4:	601a      	str	r2, [r3, #0]
 8010fa6:	e7d0      	b.n	8010f4a <HAL_ADC_IRQHandler+0x7a>
 8010fa8:	fffffefe 	.word	0xfffffefe

08010fac <HAL_ADC_ConfigChannel>:
{
 8010fac:	b530      	push	{r4, r5, lr}
 8010fae:	b083      	sub	sp, #12
 8010fb0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8010fb6:	3340      	adds	r3, #64	; 0x40
 8010fb8:	5cc3      	ldrb	r3, [r0, r3]
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d100      	bne.n	8010fc0 <HAL_ADC_ConfigChannel+0x14>
 8010fbe:	e088      	b.n	80110d2 <HAL_ADC_ConfigChannel+0x126>
 8010fc0:	2340      	movs	r3, #64	; 0x40
 8010fc2:	2201      	movs	r2, #1
 8010fc4:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010fc6:	6803      	ldr	r3, [r0, #0]
 8010fc8:	689a      	ldr	r2, [r3, #8]
 8010fca:	0752      	lsls	r2, r2, #29
 8010fcc:	d475      	bmi.n	80110ba <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 8010fce:	4a42      	ldr	r2, [pc, #264]	; (80110d8 <HAL_ADC_ConfigChannel+0x12c>)
 8010fd0:	6848      	ldr	r0, [r1, #4]
 8010fd2:	4290      	cmp	r0, r2
 8010fd4:	d050      	beq.n	8011078 <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010fd6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010fd8:	2201      	movs	r2, #1
 8010fda:	680d      	ldr	r5, [r1, #0]
 8010fdc:	40aa      	lsls	r2, r5
 8010fde:	4302      	orrs	r2, r0
 8010fe0:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010fe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010fe4:	2280      	movs	r2, #128	; 0x80
 8010fe6:	0552      	lsls	r2, r2, #21
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	d013      	beq.n	8011014 <HAL_ADC_ConfigChannel+0x68>
 8010fec:	3b01      	subs	r3, #1
 8010fee:	2b06      	cmp	r3, #6
 8010ff0:	d910      	bls.n	8011014 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8010ff2:	6822      	ldr	r2, [r4, #0]
 8010ff4:	6950      	ldr	r0, [r2, #20]
 8010ff6:	2307      	movs	r3, #7
 8010ff8:	4003      	ands	r3, r0
 8010ffa:	6888      	ldr	r0, [r1, #8]
 8010ffc:	4298      	cmp	r0, r3
 8010ffe:	d009      	beq.n	8011014 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8011000:	6950      	ldr	r0, [r2, #20]
 8011002:	2307      	movs	r3, #7
 8011004:	4398      	bics	r0, r3
 8011006:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8011008:	6822      	ldr	r2, [r4, #0]
 801100a:	6950      	ldr	r0, [r2, #20]
 801100c:	688d      	ldr	r5, [r1, #8]
 801100e:	402b      	ands	r3, r5
 8011010:	4303      	orrs	r3, r0
 8011012:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8011014:	680b      	ldr	r3, [r1, #0]
 8011016:	001a      	movs	r2, r3
 8011018:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801101a:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801101c:	2a02      	cmp	r2, #2
 801101e:	d851      	bhi.n	80110c4 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8011020:	4a2e      	ldr	r2, [pc, #184]	; (80110dc <HAL_ADC_ConfigChannel+0x130>)
 8011022:	6810      	ldr	r0, [r2, #0]
 8011024:	2b10      	cmp	r3, #16
 8011026:	d024      	beq.n	8011072 <HAL_ADC_ConfigChannel+0xc6>
 8011028:	3b11      	subs	r3, #17
 801102a:	425a      	negs	r2, r3
 801102c:	415a      	adcs	r2, r3
 801102e:	4253      	negs	r3, r2
 8011030:	4a2b      	ldr	r2, [pc, #172]	; (80110e0 <HAL_ADC_ConfigChannel+0x134>)
 8011032:	4013      	ands	r3, r2
 8011034:	2280      	movs	r2, #128	; 0x80
 8011036:	0452      	lsls	r2, r2, #17
 8011038:	4694      	mov	ip, r2
 801103a:	4463      	add	r3, ip
 801103c:	4303      	orrs	r3, r0
 801103e:	4a27      	ldr	r2, [pc, #156]	; (80110dc <HAL_ADC_ConfigChannel+0x130>)
 8011040:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8011042:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011044:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8011046:	2b10      	cmp	r3, #16
 8011048:	d13c      	bne.n	80110c4 <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 801104a:	4b26      	ldr	r3, [pc, #152]	; (80110e4 <HAL_ADC_ConfigChannel+0x138>)
 801104c:	6818      	ldr	r0, [r3, #0]
 801104e:	4926      	ldr	r1, [pc, #152]	; (80110e8 <HAL_ADC_ConfigChannel+0x13c>)
 8011050:	f7ef f87e 	bl	8000150 <__udivsi3>
 8011054:	0083      	lsls	r3, r0, #2
 8011056:	1818      	adds	r0, r3, r0
 8011058:	0040      	lsls	r0, r0, #1
 801105a:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 801105c:	9b01      	ldr	r3, [sp, #4]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d035      	beq.n	80110ce <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8011062:	9b01      	ldr	r3, [sp, #4]
 8011064:	3b01      	subs	r3, #1
 8011066:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8011068:	9b01      	ldr	r3, [sp, #4]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d1f9      	bne.n	8011062 <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801106e:	2000      	movs	r0, #0
 8011070:	e028      	b.n	80110c4 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8011072:	2380      	movs	r3, #128	; 0x80
 8011074:	041b      	lsls	r3, r3, #16
 8011076:	e7e1      	b.n	801103c <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8011078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801107a:	2001      	movs	r0, #1
 801107c:	680d      	ldr	r5, [r1, #0]
 801107e:	40a8      	lsls	r0, r5
 8011080:	4382      	bics	r2, r0
 8011082:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8011084:	680b      	ldr	r3, [r1, #0]
 8011086:	001a      	movs	r2, r3
 8011088:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801108a:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801108c:	2a02      	cmp	r2, #2
 801108e:	d819      	bhi.n	80110c4 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8011090:	4a12      	ldr	r2, [pc, #72]	; (80110dc <HAL_ADC_ConfigChannel+0x130>)
 8011092:	6811      	ldr	r1, [r2, #0]
 8011094:	2b10      	cmp	r3, #16
 8011096:	d00e      	beq.n	80110b6 <HAL_ADC_ConfigChannel+0x10a>
 8011098:	3b11      	subs	r3, #17
 801109a:	425a      	negs	r2, r3
 801109c:	415a      	adcs	r2, r3
 801109e:	4252      	negs	r2, r2
 80110a0:	23c0      	movs	r3, #192	; 0xc0
 80110a2:	041b      	lsls	r3, r3, #16
 80110a4:	4013      	ands	r3, r2
 80110a6:	4a11      	ldr	r2, [pc, #68]	; (80110ec <HAL_ADC_ConfigChannel+0x140>)
 80110a8:	4694      	mov	ip, r2
 80110aa:	4463      	add	r3, ip
 80110ac:	400b      	ands	r3, r1
 80110ae:	4a0b      	ldr	r2, [pc, #44]	; (80110dc <HAL_ADC_ConfigChannel+0x130>)
 80110b0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80110b2:	2000      	movs	r0, #0
 80110b4:	e006      	b.n	80110c4 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80110b6:	4b0e      	ldr	r3, [pc, #56]	; (80110f0 <HAL_ADC_ConfigChannel+0x144>)
 80110b8:	e7f8      	b.n	80110ac <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80110ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80110bc:	2220      	movs	r2, #32
 80110be:	4313      	orrs	r3, r2
 80110c0:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80110c2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80110c4:	2340      	movs	r3, #64	; 0x40
 80110c6:	2200      	movs	r2, #0
 80110c8:	54e2      	strb	r2, [r4, r3]
}
 80110ca:	b003      	add	sp, #12
 80110cc:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80110ce:	2000      	movs	r0, #0
 80110d0:	e7f8      	b.n	80110c4 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 80110d2:	2002      	movs	r0, #2
 80110d4:	e7f9      	b.n	80110ca <HAL_ADC_ConfigChannel+0x11e>
 80110d6:	46c0      	nop			; (mov r8, r8)
 80110d8:	00001001 	.word	0x00001001
 80110dc:	40012708 	.word	0x40012708
 80110e0:	ff400000 	.word	0xff400000
 80110e4:	200000a0 	.word	0x200000a0
 80110e8:	000f4240 	.word	0x000f4240
 80110ec:	feffffff 	.word	0xfeffffff
 80110f0:	ff7fffff 	.word	0xff7fffff

080110f4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80110f4:	b570      	push	{r4, r5, r6, lr}
 80110f6:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80110f8:	2340      	movs	r3, #64	; 0x40
 80110fa:	5cc3      	ldrb	r3, [r0, r3]
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d042      	beq.n	8011186 <HAL_ADCEx_Calibration_Start+0x92>
 8011100:	2340      	movs	r3, #64	; 0x40
 8011102:	2201      	movs	r2, #1
 8011104:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8011106:	6802      	ldr	r2, [r0, #0]
 8011108:	6891      	ldr	r1, [r2, #8]
 801110a:	3b3d      	subs	r3, #61	; 0x3d
 801110c:	400b      	ands	r3, r1
 801110e:	2b01      	cmp	r3, #1
 8011110:	d105      	bne.n	801111e <HAL_ADCEx_Calibration_Start+0x2a>
 8011112:	6813      	ldr	r3, [r2, #0]
 8011114:	07db      	lsls	r3, r3, #31
 8011116:	d42d      	bmi.n	8011174 <HAL_ADCEx_Calibration_Start+0x80>
 8011118:	68d3      	ldr	r3, [r2, #12]
 801111a:	041b      	lsls	r3, r3, #16
 801111c:	d42a      	bmi.n	8011174 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 801111e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011120:	491a      	ldr	r1, [pc, #104]	; (801118c <HAL_ADCEx_Calibration_Start+0x98>)
 8011122:	400b      	ands	r3, r1
 8011124:	3106      	adds	r1, #6
 8011126:	31ff      	adds	r1, #255	; 0xff
 8011128:	430b      	orrs	r3, r1
 801112a:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 801112c:	6891      	ldr	r1, [r2, #8]
 801112e:	2380      	movs	r3, #128	; 0x80
 8011130:	061b      	lsls	r3, r3, #24
 8011132:	430b      	orrs	r3, r1
 8011134:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 8011136:	f7ff fc87 	bl	8010a48 <HAL_GetTick>
 801113a:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 801113c:	6823      	ldr	r3, [r4, #0]
 801113e:	689b      	ldr	r3, [r3, #8]
 8011140:	2b00      	cmp	r3, #0
 8011142:	da0f      	bge.n	8011164 <HAL_ADCEx_Calibration_Start+0x70>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8011144:	f7ff fc80 	bl	8010a48 <HAL_GetTick>
 8011148:	1b40      	subs	r0, r0, r5
 801114a:	2802      	cmp	r0, #2
 801114c:	d9f6      	bls.n	801113c <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801114e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011150:	2212      	movs	r2, #18
 8011152:	4393      	bics	r3, r2
 8011154:	3a02      	subs	r2, #2
 8011156:	4313      	orrs	r3, r2
 8011158:	6463      	str	r3, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801115a:	2340      	movs	r3, #64	; 0x40
 801115c:	2200      	movs	r2, #0
 801115e:	54e2      	strb	r2, [r4, r3]
        
        return HAL_ERROR;
 8011160:	2001      	movs	r0, #1
 8011162:	e00f      	b.n	8011184 <HAL_ADCEx_Calibration_Start+0x90>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011164:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011166:	2203      	movs	r2, #3
 8011168:	4393      	bics	r3, r2
 801116a:	3a02      	subs	r2, #2
 801116c:	4313      	orrs	r3, r2
 801116e:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011170:	2000      	movs	r0, #0
 8011172:	e004      	b.n	801117e <HAL_ADCEx_Calibration_Start+0x8a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011174:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011176:	2220      	movs	r2, #32
 8011178:	4313      	orrs	r3, r2
 801117a:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 801117c:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801117e:	2340      	movs	r3, #64	; 0x40
 8011180:	2200      	movs	r2, #0
 8011182:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8011184:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8011186:	2002      	movs	r0, #2
 8011188:	e7fc      	b.n	8011184 <HAL_ADCEx_Calibration_Start+0x90>
 801118a:	46c0      	nop			; (mov r8, r8)
 801118c:	fffffefd 	.word	0xfffffefd

08011190 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011190:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8011192:	2800      	cmp	r0, #0
 8011194:	db14      	blt.n	80111c0 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011196:	0883      	lsrs	r3, r0, #2
 8011198:	009b      	lsls	r3, r3, #2
 801119a:	4a15      	ldr	r2, [pc, #84]	; (80111f0 <HAL_NVIC_SetPriority+0x60>)
 801119c:	4694      	mov	ip, r2
 801119e:	4463      	add	r3, ip
 80111a0:	26c0      	movs	r6, #192	; 0xc0
 80111a2:	00b6      	lsls	r6, r6, #2
 80111a4:	599d      	ldr	r5, [r3, r6]
 80111a6:	2403      	movs	r4, #3
 80111a8:	4020      	ands	r0, r4
 80111aa:	00c0      	lsls	r0, r0, #3
 80111ac:	22ff      	movs	r2, #255	; 0xff
 80111ae:	0014      	movs	r4, r2
 80111b0:	4084      	lsls	r4, r0
 80111b2:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80111b4:	0189      	lsls	r1, r1, #6
 80111b6:	400a      	ands	r2, r1
 80111b8:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80111ba:	432a      	orrs	r2, r5
 80111bc:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80111be:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80111c0:	b2c0      	uxtb	r0, r0
 80111c2:	230f      	movs	r3, #15
 80111c4:	4003      	ands	r3, r0
 80111c6:	3b08      	subs	r3, #8
 80111c8:	089b      	lsrs	r3, r3, #2
 80111ca:	009b      	lsls	r3, r3, #2
 80111cc:	4a09      	ldr	r2, [pc, #36]	; (80111f4 <HAL_NVIC_SetPriority+0x64>)
 80111ce:	4694      	mov	ip, r2
 80111d0:	4463      	add	r3, ip
 80111d2:	69dd      	ldr	r5, [r3, #28]
 80111d4:	2203      	movs	r2, #3
 80111d6:	4010      	ands	r0, r2
 80111d8:	00c0      	lsls	r0, r0, #3
 80111da:	24ff      	movs	r4, #255	; 0xff
 80111dc:	0022      	movs	r2, r4
 80111de:	4082      	lsls	r2, r0
 80111e0:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80111e2:	0189      	lsls	r1, r1, #6
 80111e4:	400c      	ands	r4, r1
 80111e6:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80111e8:	432c      	orrs	r4, r5
 80111ea:	61dc      	str	r4, [r3, #28]
 80111ec:	e7e7      	b.n	80111be <HAL_NVIC_SetPriority+0x2e>
 80111ee:	46c0      	nop			; (mov r8, r8)
 80111f0:	e000e100 	.word	0xe000e100
 80111f4:	e000ed00 	.word	0xe000ed00

080111f8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80111f8:	231f      	movs	r3, #31
 80111fa:	4018      	ands	r0, r3
 80111fc:	3b1e      	subs	r3, #30
 80111fe:	4083      	lsls	r3, r0
 8011200:	4a01      	ldr	r2, [pc, #4]	; (8011208 <HAL_NVIC_EnableIRQ+0x10>)
 8011202:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8011204:	4770      	bx	lr
 8011206:	46c0      	nop			; (mov r8, r8)
 8011208:	e000e100 	.word	0xe000e100

0801120c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 801120c:	231f      	movs	r3, #31
 801120e:	4018      	ands	r0, r3
 8011210:	3b1e      	subs	r3, #30
 8011212:	4083      	lsls	r3, r0
 8011214:	4901      	ldr	r1, [pc, #4]	; (801121c <HAL_NVIC_DisableIRQ+0x10>)
 8011216:	2280      	movs	r2, #128	; 0x80
 8011218:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 801121a:	4770      	bx	lr
 801121c:	e000e100 	.word	0xe000e100

08011220 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8011220:	1e43      	subs	r3, r0, #1
 8011222:	4a0a      	ldr	r2, [pc, #40]	; (801124c <HAL_SYSTICK_Config+0x2c>)
 8011224:	2001      	movs	r0, #1
 8011226:	4293      	cmp	r3, r2
 8011228:	d80e      	bhi.n	8011248 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801122a:	4a09      	ldr	r2, [pc, #36]	; (8011250 <HAL_SYSTICK_Config+0x30>)
 801122c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801122e:	4809      	ldr	r0, [pc, #36]	; (8011254 <HAL_SYSTICK_Config+0x34>)
 8011230:	6a03      	ldr	r3, [r0, #32]
 8011232:	021b      	lsls	r3, r3, #8
 8011234:	0a1b      	lsrs	r3, r3, #8
 8011236:	21c0      	movs	r1, #192	; 0xc0
 8011238:	0609      	lsls	r1, r1, #24
 801123a:	430b      	orrs	r3, r1
 801123c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801123e:	2300      	movs	r3, #0
 8011240:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011242:	3307      	adds	r3, #7
 8011244:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011246:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8011248:	4770      	bx	lr
 801124a:	46c0      	nop			; (mov r8, r8)
 801124c:	00ffffff 	.word	0x00ffffff
 8011250:	e000e010 	.word	0xe000e010
 8011254:	e000ed00 	.word	0xe000ed00

08011258 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8011258:	2804      	cmp	r0, #4
 801125a:	d005      	beq.n	8011268 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 801125c:	4a05      	ldr	r2, [pc, #20]	; (8011274 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 801125e:	6813      	ldr	r3, [r2, #0]
 8011260:	2104      	movs	r1, #4
 8011262:	438b      	bics	r3, r1
 8011264:	6013      	str	r3, [r2, #0]
  }
}
 8011266:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8011268:	4a02      	ldr	r2, [pc, #8]	; (8011274 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 801126a:	6813      	ldr	r3, [r2, #0]
 801126c:	2104      	movs	r1, #4
 801126e:	430b      	orrs	r3, r1
 8011270:	6013      	str	r3, [r2, #0]
 8011272:	e7f8      	b.n	8011266 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8011274:	e000e010 	.word	0xe000e010

08011278 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8011278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801127a:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 801127c:	0891      	lsrs	r1, r2, #2
 801127e:	d013      	beq.n	80112a8 <CRC_Handle_8+0x30>
 8011280:	0034      	movs	r4, r6
 8011282:	2303      	movs	r3, #3
 8011284:	0017      	movs	r7, r2
 8011286:	439f      	bics	r7, r3
 8011288:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 801128a:	7823      	ldrb	r3, [r4, #0]
 801128c:	061b      	lsls	r3, r3, #24
 801128e:	7865      	ldrb	r5, [r4, #1]
 8011290:	042d      	lsls	r5, r5, #16
 8011292:	432b      	orrs	r3, r5
 8011294:	78e5      	ldrb	r5, [r4, #3]
 8011296:	432b      	orrs	r3, r5
 8011298:	78a5      	ldrb	r5, [r4, #2]
 801129a:	022d      	lsls	r5, r5, #8
 801129c:	432b      	orrs	r3, r5
 801129e:	6805      	ldr	r5, [r0, #0]
 80112a0:	602b      	str	r3, [r5, #0]
 80112a2:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 80112a4:	42bc      	cmp	r4, r7
 80112a6:	d1f0      	bne.n	801128a <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 80112a8:	2303      	movs	r3, #3
 80112aa:	401a      	ands	r2, r3
 80112ac:	d01e      	beq.n	80112ec <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 80112ae:	2a01      	cmp	r2, #1
 80112b0:	d00a      	beq.n	80112c8 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 80112b2:	2a02      	cmp	r2, #2
 80112b4:	d10d      	bne.n	80112d2 <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80112b6:	0089      	lsls	r1, r1, #2
 80112b8:	5c72      	ldrb	r2, [r6, r1]
 80112ba:	0212      	lsls	r2, r2, #8
 80112bc:	1871      	adds	r1, r6, r1
 80112be:	784b      	ldrb	r3, [r1, #1]
 80112c0:	4313      	orrs	r3, r2
 80112c2:	6802      	ldr	r2, [r0, #0]
 80112c4:	8013      	strh	r3, [r2, #0]
 80112c6:	e011      	b.n	80112ec <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 80112c8:	0089      	lsls	r1, r1, #2
 80112ca:	5d8b      	ldrb	r3, [r1, r6]
 80112cc:	6802      	ldr	r2, [r0, #0]
 80112ce:	7013      	strb	r3, [r2, #0]
 80112d0:	e00c      	b.n	80112ec <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 80112d2:	2a03      	cmp	r2, #3
 80112d4:	d10a      	bne.n	80112ec <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80112d6:	0089      	lsls	r1, r1, #2
 80112d8:	5c72      	ldrb	r2, [r6, r1]
 80112da:	0212      	lsls	r2, r2, #8
 80112dc:	1871      	adds	r1, r6, r1
 80112de:	784b      	ldrb	r3, [r1, #1]
 80112e0:	4313      	orrs	r3, r2
 80112e2:	6802      	ldr	r2, [r0, #0]
 80112e4:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 80112e6:	788b      	ldrb	r3, [r1, #2]
 80112e8:	6802      	ldr	r2, [r0, #0]
 80112ea:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80112ec:	6803      	ldr	r3, [r0, #0]
 80112ee:	6818      	ldr	r0, [r3, #0]
}
 80112f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080112f2 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80112f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112f4:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 80112f6:	0852      	lsrs	r2, r2, #1
 80112f8:	d00b      	beq.n	8011312 <CRC_Handle_16+0x20>
 80112fa:	000c      	movs	r4, r1
 80112fc:	0097      	lsls	r7, r2, #2
 80112fe:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8011300:	8823      	ldrh	r3, [r4, #0]
 8011302:	041b      	lsls	r3, r3, #16
 8011304:	8866      	ldrh	r6, [r4, #2]
 8011306:	4333      	orrs	r3, r6
 8011308:	6806      	ldr	r6, [r0, #0]
 801130a:	6033      	str	r3, [r6, #0]
 801130c:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 801130e:	42bc      	cmp	r4, r7
 8011310:	d1f6      	bne.n	8011300 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 8011312:	07eb      	lsls	r3, r5, #31
 8011314:	d503      	bpl.n	801131e <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8011316:	0092      	lsls	r2, r2, #2
 8011318:	5a53      	ldrh	r3, [r2, r1]
 801131a:	6802      	ldr	r2, [r0, #0]
 801131c:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 801131e:	6803      	ldr	r3, [r0, #0]
 8011320:	6818      	ldr	r0, [r3, #0]
}
 8011322:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011324 <HAL_CRC_Init>:
{
 8011324:	b510      	push	{r4, lr}
 8011326:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8011328:	d029      	beq.n	801137e <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 801132a:	7f43      	ldrb	r3, [r0, #29]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d01e      	beq.n	801136e <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8011330:	2302      	movs	r3, #2
 8011332:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8011334:	0020      	movs	r0, r4
 8011336:	f000 f8b1 	bl	801149c <HAL_CRCEx_Init>
 801133a:	2800      	cmp	r0, #0
 801133c:	d121      	bne.n	8011382 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 801133e:	7963      	ldrb	r3, [r4, #5]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d118      	bne.n	8011376 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8011344:	6823      	ldr	r3, [r4, #0]
 8011346:	2201      	movs	r2, #1
 8011348:	4252      	negs	r2, r2
 801134a:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 801134c:	6822      	ldr	r2, [r4, #0]
 801134e:	6893      	ldr	r3, [r2, #8]
 8011350:	2160      	movs	r1, #96	; 0x60
 8011352:	438b      	bics	r3, r1
 8011354:	6961      	ldr	r1, [r4, #20]
 8011356:	430b      	orrs	r3, r1
 8011358:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 801135a:	6822      	ldr	r2, [r4, #0]
 801135c:	6893      	ldr	r3, [r2, #8]
 801135e:	2180      	movs	r1, #128	; 0x80
 8011360:	438b      	bics	r3, r1
 8011362:	69a1      	ldr	r1, [r4, #24]
 8011364:	430b      	orrs	r3, r1
 8011366:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8011368:	2301      	movs	r3, #1
 801136a:	7763      	strb	r3, [r4, #29]
}
 801136c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 801136e:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8011370:	f7fc fc3e 	bl	800dbf0 <HAL_CRC_MspInit>
 8011374:	e7dc      	b.n	8011330 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8011376:	6823      	ldr	r3, [r4, #0]
 8011378:	6922      	ldr	r2, [r4, #16]
 801137a:	611a      	str	r2, [r3, #16]
 801137c:	e7e6      	b.n	801134c <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 801137e:	2001      	movs	r0, #1
 8011380:	e7f4      	b.n	801136c <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8011382:	2001      	movs	r0, #1
 8011384:	e7f2      	b.n	801136c <HAL_CRC_Init+0x48>

08011386 <HAL_CRC_Accumulate>:
{
 8011386:	b510      	push	{r4, lr}
 8011388:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 801138a:	7f03      	ldrb	r3, [r0, #28]
 801138c:	2b01      	cmp	r3, #1
 801138e:	d024      	beq.n	80113da <HAL_CRC_Accumulate+0x54>
 8011390:	2301      	movs	r3, #1
 8011392:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8011394:	3301      	adds	r3, #1
 8011396:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8011398:	6a03      	ldr	r3, [r0, #32]
 801139a:	2b02      	cmp	r3, #2
 801139c:	d01a      	beq.n	80113d4 <HAL_CRC_Accumulate+0x4e>
 801139e:	2b03      	cmp	r3, #3
 80113a0:	d007      	beq.n	80113b2 <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 80113a2:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 80113a4:	2b01      	cmp	r3, #1
 80113a6:	d011      	beq.n	80113cc <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 80113a8:	2301      	movs	r3, #1
 80113aa:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80113ac:	2300      	movs	r3, #0
 80113ae:	7723      	strb	r3, [r4, #28]
}
 80113b0:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 80113b2:	2a00      	cmp	r2, #0
 80113b4:	d007      	beq.n	80113c6 <HAL_CRC_Accumulate+0x40>
 80113b6:	000b      	movs	r3, r1
 80113b8:	0092      	lsls	r2, r2, #2
 80113ba:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80113bc:	6822      	ldr	r2, [r4, #0]
 80113be:	cb01      	ldmia	r3!, {r0}
 80113c0:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 80113c2:	428b      	cmp	r3, r1
 80113c4:	d1fa      	bne.n	80113bc <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 80113c6:	6823      	ldr	r3, [r4, #0]
 80113c8:	6818      	ldr	r0, [r3, #0]
      break;
 80113ca:	e7ed      	b.n	80113a8 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80113cc:	0020      	movs	r0, r4
 80113ce:	f7ff ff53 	bl	8011278 <CRC_Handle_8>
      break;
 80113d2:	e7e9      	b.n	80113a8 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80113d4:	f7ff ff8d 	bl	80112f2 <CRC_Handle_16>
      break;
 80113d8:	e7e6      	b.n	80113a8 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 80113da:	2002      	movs	r0, #2
 80113dc:	e7e8      	b.n	80113b0 <HAL_CRC_Accumulate+0x2a>

080113de <HAL_CRC_Calculate>:
{
 80113de:	b570      	push	{r4, r5, r6, lr}
 80113e0:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80113e2:	7f03      	ldrb	r3, [r0, #28]
 80113e4:	2b01      	cmp	r3, #1
 80113e6:	d029      	beq.n	801143c <HAL_CRC_Calculate+0x5e>
 80113e8:	2501      	movs	r5, #1
 80113ea:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80113ec:	2302      	movs	r3, #2
 80113ee:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80113f0:	6800      	ldr	r0, [r0, #0]
 80113f2:	6883      	ldr	r3, [r0, #8]
 80113f4:	432b      	orrs	r3, r5
 80113f6:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 80113f8:	6a23      	ldr	r3, [r4, #32]
 80113fa:	2b02      	cmp	r3, #2
 80113fc:	d01a      	beq.n	8011434 <HAL_CRC_Calculate+0x56>
 80113fe:	2b03      	cmp	r3, #3
 8011400:	d007      	beq.n	8011412 <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8011402:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8011404:	2b01      	cmp	r3, #1
 8011406:	d011      	beq.n	801142c <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 8011408:	2301      	movs	r3, #1
 801140a:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 801140c:	2300      	movs	r3, #0
 801140e:	7723      	strb	r3, [r4, #28]
}
 8011410:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8011412:	2a00      	cmp	r2, #0
 8011414:	d007      	beq.n	8011426 <HAL_CRC_Calculate+0x48>
 8011416:	000b      	movs	r3, r1
 8011418:	0092      	lsls	r2, r2, #2
 801141a:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 801141c:	6820      	ldr	r0, [r4, #0]
 801141e:	cb20      	ldmia	r3!, {r5}
 8011420:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8011422:	428b      	cmp	r3, r1
 8011424:	d1fa      	bne.n	801141c <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8011426:	6823      	ldr	r3, [r4, #0]
 8011428:	6818      	ldr	r0, [r3, #0]
      break;
 801142a:	e7ed      	b.n	8011408 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 801142c:	0020      	movs	r0, r4
 801142e:	f7ff ff23 	bl	8011278 <CRC_Handle_8>
      break;
 8011432:	e7e9      	b.n	8011408 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8011434:	0020      	movs	r0, r4
 8011436:	f7ff ff5c 	bl	80112f2 <CRC_Handle_16>
      break;
 801143a:	e7e5      	b.n	8011408 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 801143c:	2002      	movs	r0, #2
 801143e:	e7e7      	b.n	8011410 <HAL_CRC_Calculate+0x32>

08011440 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8011440:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8011442:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8011444:	2501      	movs	r5, #1
 8011446:	002c      	movs	r4, r5
 8011448:	409c      	lsls	r4, r3
 801144a:	4221      	tst	r1, r4
 801144c:	d10b      	bne.n	8011466 <HAL_CRCEx_Polynomial_Set+0x26>
 801144e:	3b01      	subs	r3, #1
 8011450:	d2f9      	bcs.n	8011446 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 8011452:	2a10      	cmp	r2, #16
 8011454:	d01c      	beq.n	8011490 <HAL_CRCEx_Polynomial_Set+0x50>
 8011456:	2a18      	cmp	r2, #24
 8011458:	d01e      	beq.n	8011498 <HAL_CRCEx_Polynomial_Set+0x58>
 801145a:	2a08      	cmp	r2, #8
 801145c:	d109      	bne.n	8011472 <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 801145e:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 8011460:	2b0f      	cmp	r3, #15
 8011462:	d906      	bls.n	8011472 <HAL_CRCEx_Polynomial_Set+0x32>
 8011464:	e00e      	b.n	8011484 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 8011466:	2a10      	cmp	r2, #16
 8011468:	d012      	beq.n	8011490 <HAL_CRCEx_Polynomial_Set+0x50>
 801146a:	2a18      	cmp	r2, #24
 801146c:	d00c      	beq.n	8011488 <HAL_CRCEx_Polynomial_Set+0x48>
 801146e:	2a08      	cmp	r2, #8
 8011470:	d0f5      	beq.n	801145e <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8011472:	6803      	ldr	r3, [r0, #0]
 8011474:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8011476:	6801      	ldr	r1, [r0, #0]
 8011478:	688b      	ldr	r3, [r1, #8]
 801147a:	2018      	movs	r0, #24
 801147c:	4383      	bics	r3, r0
 801147e:	431a      	orrs	r2, r3
 8011480:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8011482:	2400      	movs	r4, #0
}
 8011484:	0020      	movs	r0, r4
 8011486:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8011488:	2b06      	cmp	r3, #6
 801148a:	d9f2      	bls.n	8011472 <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 801148c:	2401      	movs	r4, #1
 801148e:	e7f9      	b.n	8011484 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8011490:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 8011492:	2b07      	cmp	r3, #7
 8011494:	d9ed      	bls.n	8011472 <HAL_CRCEx_Polynomial_Set+0x32>
 8011496:	e7f5      	b.n	8011484 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8011498:	2401      	movs	r4, #1
 801149a:	e7f3      	b.n	8011484 <HAL_CRCEx_Polynomial_Set+0x44>

0801149c <HAL_CRCEx_Init>:
{
 801149c:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 801149e:	7903      	ldrb	r3, [r0, #4]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d109      	bne.n	80114b8 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80114a4:	6803      	ldr	r3, [r0, #0]
 80114a6:	4a08      	ldr	r2, [pc, #32]	; (80114c8 <HAL_CRCEx_Init+0x2c>)
 80114a8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80114aa:	6802      	ldr	r2, [r0, #0]
 80114ac:	6893      	ldr	r3, [r2, #8]
 80114ae:	2118      	movs	r1, #24
 80114b0:	438b      	bics	r3, r1
 80114b2:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 80114b4:	2000      	movs	r0, #0
}
 80114b6:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80114b8:	68c2      	ldr	r2, [r0, #12]
 80114ba:	6881      	ldr	r1, [r0, #8]
 80114bc:	f7ff ffc0 	bl	8011440 <HAL_CRCEx_Polynomial_Set>
 80114c0:	1e43      	subs	r3, r0, #1
 80114c2:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 80114c4:	b2c0      	uxtb	r0, r0
 80114c6:	e7f6      	b.n	80114b6 <HAL_CRCEx_Init+0x1a>
 80114c8:	04c11db7 	.word	0x04c11db7

080114cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80114cc:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80114ce:	2800      	cmp	r0, #0
 80114d0:	d022      	beq.n	8011518 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 80114d2:	2321      	movs	r3, #33	; 0x21
 80114d4:	5cc3      	ldrb	r3, [r0, r3]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d102      	bne.n	80114e0 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 80114da:	3320      	adds	r3, #32
 80114dc:	2200      	movs	r2, #0
 80114de:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80114e0:	2121      	movs	r1, #33	; 0x21
 80114e2:	2302      	movs	r3, #2
 80114e4:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80114e6:	6804      	ldr	r4, [r0, #0]
 80114e8:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80114ea:	4a0c      	ldr	r2, [pc, #48]	; (801151c <HAL_DMA_Init+0x50>)
 80114ec:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80114ee:	6843      	ldr	r3, [r0, #4]
 80114f0:	6885      	ldr	r5, [r0, #8]
 80114f2:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80114f4:	68c5      	ldr	r5, [r0, #12]
 80114f6:	432b      	orrs	r3, r5
 80114f8:	6905      	ldr	r5, [r0, #16]
 80114fa:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80114fc:	6945      	ldr	r5, [r0, #20]
 80114fe:	432b      	orrs	r3, r5
 8011500:	6985      	ldr	r5, [r0, #24]
 8011502:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8011504:	69c5      	ldr	r5, [r0, #28]
 8011506:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8011508:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 801150a:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801150c:	2300      	movs	r3, #0
 801150e:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8011510:	3301      	adds	r3, #1
 8011512:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8011514:	2000      	movs	r0, #0
}  
 8011516:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8011518:	2001      	movs	r0, #1
 801151a:	e7fc      	b.n	8011516 <HAL_DMA_Init+0x4a>
 801151c:	ffffc00f 	.word	0xffffc00f

08011520 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011520:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8011522:	2420      	movs	r4, #32
 8011524:	5d04      	ldrb	r4, [r0, r4]
 8011526:	2c01      	cmp	r4, #1
 8011528:	d02d      	beq.n	8011586 <HAL_DMA_Start_IT+0x66>
 801152a:	2601      	movs	r6, #1
 801152c:	2420      	movs	r4, #32
 801152e:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8011530:	3401      	adds	r4, #1
 8011532:	2502      	movs	r5, #2
 8011534:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011536:	6805      	ldr	r5, [r0, #0]
 8011538:	682c      	ldr	r4, [r5, #0]
 801153a:	43b4      	bics	r4, r6
 801153c:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801153e:	6804      	ldr	r4, [r0, #0]
 8011540:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011542:	6843      	ldr	r3, [r0, #4]
 8011544:	2b10      	cmp	r3, #16
 8011546:	d019      	beq.n	801157c <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8011548:	6803      	ldr	r3, [r0, #0]
 801154a:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 801154c:	6803      	ldr	r3, [r0, #0]
 801154e:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8011550:	6802      	ldr	r2, [r0, #0]
 8011552:	6813      	ldr	r3, [r2, #0]
 8011554:	2102      	movs	r1, #2
 8011556:	430b      	orrs	r3, r1
 8011558:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 801155a:	6802      	ldr	r2, [r0, #0]
 801155c:	6813      	ldr	r3, [r2, #0]
 801155e:	3102      	adds	r1, #2
 8011560:	430b      	orrs	r3, r1
 8011562:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8011564:	6802      	ldr	r2, [r0, #0]
 8011566:	6813      	ldr	r3, [r2, #0]
 8011568:	3104      	adds	r1, #4
 801156a:	430b      	orrs	r3, r1
 801156c:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 801156e:	6802      	ldr	r2, [r0, #0]
 8011570:	6813      	ldr	r3, [r2, #0]
 8011572:	3907      	subs	r1, #7
 8011574:	430b      	orrs	r3, r1
 8011576:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8011578:	2000      	movs	r0, #0
} 
 801157a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 801157c:	6803      	ldr	r3, [r0, #0]
 801157e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8011580:	6803      	ldr	r3, [r0, #0]
 8011582:	60d9      	str	r1, [r3, #12]
 8011584:	e7e4      	b.n	8011550 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 8011586:	2002      	movs	r0, #2
 8011588:	e7f7      	b.n	801157a <HAL_DMA_Start_IT+0x5a>

0801158a <HAL_DMA_Abort>:
{
 801158a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801158c:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801158e:	6802      	ldr	r2, [r0, #0]
 8011590:	6813      	ldr	r3, [r2, #0]
 8011592:	2101      	movs	r1, #1
 8011594:	438b      	bics	r3, r1
 8011596:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8011598:	f7ff fa56 	bl	8010a48 <HAL_GetTick>
 801159c:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801159e:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80115a0:	26fa      	movs	r6, #250	; 0xfa
 80115a2:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80115a4:	6823      	ldr	r3, [r4, #0]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	421d      	tst	r5, r3
 80115aa:	d00f      	beq.n	80115cc <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80115ac:	f7ff fa4c 	bl	8010a48 <HAL_GetTick>
 80115b0:	1bc0      	subs	r0, r0, r7
 80115b2:	42b0      	cmp	r0, r6
 80115b4:	d9f6      	bls.n	80115a4 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80115b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80115b8:	2220      	movs	r2, #32
 80115ba:	4313      	orrs	r3, r2
 80115bc:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80115be:	2321      	movs	r3, #33	; 0x21
 80115c0:	2103      	movs	r1, #3
 80115c2:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 80115c4:	2300      	movs	r3, #0
 80115c6:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 80115c8:	2003      	movs	r0, #3
 80115ca:	e006      	b.n	80115da <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 80115cc:	2321      	movs	r3, #33	; 0x21
 80115ce:	2201      	movs	r2, #1
 80115d0:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 80115d2:	3b01      	subs	r3, #1
 80115d4:	2200      	movs	r2, #0
 80115d6:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 80115d8:	2000      	movs	r0, #0
}
 80115da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080115dc <HAL_DMA_IRQHandler>:
{        
 80115dc:	b510      	push	{r4, lr}
 80115de:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80115e0:	6803      	ldr	r3, [r0, #0]
 80115e2:	4ab4      	ldr	r2, [pc, #720]	; (80118b4 <HAL_DMA_IRQHandler+0x2d8>)
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d94d      	bls.n	8011684 <HAL_DMA_IRQHandler+0xa8>
 80115e8:	4ab3      	ldr	r2, [pc, #716]	; (80118b8 <HAL_DMA_IRQHandler+0x2dc>)
 80115ea:	6811      	ldr	r1, [r2, #0]
 80115ec:	4ab3      	ldr	r2, [pc, #716]	; (80118bc <HAL_DMA_IRQHandler+0x2e0>)
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d026      	beq.n	8011640 <HAL_DMA_IRQHandler+0x64>
 80115f2:	4ab3      	ldr	r2, [pc, #716]	; (80118c0 <HAL_DMA_IRQHandler+0x2e4>)
 80115f4:	4293      	cmp	r3, r2
 80115f6:	d02d      	beq.n	8011654 <HAL_DMA_IRQHandler+0x78>
 80115f8:	4ab2      	ldr	r2, [pc, #712]	; (80118c4 <HAL_DMA_IRQHandler+0x2e8>)
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d02c      	beq.n	8011658 <HAL_DMA_IRQHandler+0x7c>
 80115fe:	4ab2      	ldr	r2, [pc, #712]	; (80118c8 <HAL_DMA_IRQHandler+0x2ec>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d02c      	beq.n	801165e <HAL_DMA_IRQHandler+0x82>
 8011604:	4ab1      	ldr	r2, [pc, #708]	; (80118cc <HAL_DMA_IRQHandler+0x2f0>)
 8011606:	4293      	cmp	r3, r2
 8011608:	d02c      	beq.n	8011664 <HAL_DMA_IRQHandler+0x88>
 801160a:	4ab1      	ldr	r2, [pc, #708]	; (80118d0 <HAL_DMA_IRQHandler+0x2f4>)
 801160c:	4293      	cmp	r3, r2
 801160e:	d02c      	beq.n	801166a <HAL_DMA_IRQHandler+0x8e>
 8011610:	4aa8      	ldr	r2, [pc, #672]	; (80118b4 <HAL_DMA_IRQHandler+0x2d8>)
 8011612:	4293      	cmp	r3, r2
 8011614:	d02c      	beq.n	8011670 <HAL_DMA_IRQHandler+0x94>
 8011616:	4aaf      	ldr	r2, [pc, #700]	; (80118d4 <HAL_DMA_IRQHandler+0x2f8>)
 8011618:	4293      	cmp	r3, r2
 801161a:	d02c      	beq.n	8011676 <HAL_DMA_IRQHandler+0x9a>
 801161c:	4aae      	ldr	r2, [pc, #696]	; (80118d8 <HAL_DMA_IRQHandler+0x2fc>)
 801161e:	4293      	cmp	r3, r2
 8011620:	d02b      	beq.n	801167a <HAL_DMA_IRQHandler+0x9e>
 8011622:	4aae      	ldr	r2, [pc, #696]	; (80118dc <HAL_DMA_IRQHandler+0x300>)
 8011624:	4293      	cmp	r3, r2
 8011626:	d02a      	beq.n	801167e <HAL_DMA_IRQHandler+0xa2>
 8011628:	4aad      	ldr	r2, [pc, #692]	; (80118e0 <HAL_DMA_IRQHandler+0x304>)
 801162a:	189a      	adds	r2, r3, r2
 801162c:	4250      	negs	r0, r2
 801162e:	4142      	adcs	r2, r0
 8011630:	4252      	negs	r2, r2
 8011632:	48ac      	ldr	r0, [pc, #688]	; (80118e4 <HAL_DMA_IRQHandler+0x308>)
 8011634:	4002      	ands	r2, r0
 8011636:	2080      	movs	r0, #128	; 0x80
 8011638:	0300      	lsls	r0, r0, #12
 801163a:	4684      	mov	ip, r0
 801163c:	4462      	add	r2, ip
 801163e:	e000      	b.n	8011642 <HAL_DMA_IRQHandler+0x66>
 8011640:	2208      	movs	r2, #8
 8011642:	420a      	tst	r2, r1
 8011644:	d100      	bne.n	8011648 <HAL_DMA_IRQHandler+0x6c>
 8011646:	e0e6      	b.n	8011816 <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011648:	681a      	ldr	r2, [r3, #0]
 801164a:	0712      	lsls	r2, r2, #28
 801164c:	d500      	bpl.n	8011650 <HAL_DMA_IRQHandler+0x74>
 801164e:	e097      	b.n	8011780 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011650:	6823      	ldr	r3, [r4, #0]
 8011652:	e0e0      	b.n	8011816 <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011654:	2280      	movs	r2, #128	; 0x80
 8011656:	e7f4      	b.n	8011642 <HAL_DMA_IRQHandler+0x66>
 8011658:	2280      	movs	r2, #128	; 0x80
 801165a:	0112      	lsls	r2, r2, #4
 801165c:	e7f1      	b.n	8011642 <HAL_DMA_IRQHandler+0x66>
 801165e:	2280      	movs	r2, #128	; 0x80
 8011660:	0212      	lsls	r2, r2, #8
 8011662:	e7ee      	b.n	8011642 <HAL_DMA_IRQHandler+0x66>
 8011664:	2280      	movs	r2, #128	; 0x80
 8011666:	0312      	lsls	r2, r2, #12
 8011668:	e7eb      	b.n	8011642 <HAL_DMA_IRQHandler+0x66>
 801166a:	2280      	movs	r2, #128	; 0x80
 801166c:	0412      	lsls	r2, r2, #16
 801166e:	e7e8      	b.n	8011642 <HAL_DMA_IRQHandler+0x66>
 8011670:	2280      	movs	r2, #128	; 0x80
 8011672:	0512      	lsls	r2, r2, #20
 8011674:	e7e5      	b.n	8011642 <HAL_DMA_IRQHandler+0x66>
 8011676:	2208      	movs	r2, #8
 8011678:	e7e3      	b.n	8011642 <HAL_DMA_IRQHandler+0x66>
 801167a:	2280      	movs	r2, #128	; 0x80
 801167c:	e7e1      	b.n	8011642 <HAL_DMA_IRQHandler+0x66>
 801167e:	2280      	movs	r2, #128	; 0x80
 8011680:	0112      	lsls	r2, r2, #4
 8011682:	e7de      	b.n	8011642 <HAL_DMA_IRQHandler+0x66>
 8011684:	4a98      	ldr	r2, [pc, #608]	; (80118e8 <HAL_DMA_IRQHandler+0x30c>)
 8011686:	6811      	ldr	r1, [r2, #0]
 8011688:	4a8c      	ldr	r2, [pc, #560]	; (80118bc <HAL_DMA_IRQHandler+0x2e0>)
 801168a:	4293      	cmp	r3, r2
 801168c:	d026      	beq.n	80116dc <HAL_DMA_IRQHandler+0x100>
 801168e:	4a8c      	ldr	r2, [pc, #560]	; (80118c0 <HAL_DMA_IRQHandler+0x2e4>)
 8011690:	4293      	cmp	r3, r2
 8011692:	d05d      	beq.n	8011750 <HAL_DMA_IRQHandler+0x174>
 8011694:	4a8b      	ldr	r2, [pc, #556]	; (80118c4 <HAL_DMA_IRQHandler+0x2e8>)
 8011696:	4293      	cmp	r3, r2
 8011698:	d05c      	beq.n	8011754 <HAL_DMA_IRQHandler+0x178>
 801169a:	4a8b      	ldr	r2, [pc, #556]	; (80118c8 <HAL_DMA_IRQHandler+0x2ec>)
 801169c:	4293      	cmp	r3, r2
 801169e:	d05c      	beq.n	801175a <HAL_DMA_IRQHandler+0x17e>
 80116a0:	4a8a      	ldr	r2, [pc, #552]	; (80118cc <HAL_DMA_IRQHandler+0x2f0>)
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d05c      	beq.n	8011760 <HAL_DMA_IRQHandler+0x184>
 80116a6:	4a8a      	ldr	r2, [pc, #552]	; (80118d0 <HAL_DMA_IRQHandler+0x2f4>)
 80116a8:	4293      	cmp	r3, r2
 80116aa:	d05c      	beq.n	8011766 <HAL_DMA_IRQHandler+0x18a>
 80116ac:	4a81      	ldr	r2, [pc, #516]	; (80118b4 <HAL_DMA_IRQHandler+0x2d8>)
 80116ae:	4293      	cmp	r3, r2
 80116b0:	d05c      	beq.n	801176c <HAL_DMA_IRQHandler+0x190>
 80116b2:	4a88      	ldr	r2, [pc, #544]	; (80118d4 <HAL_DMA_IRQHandler+0x2f8>)
 80116b4:	4293      	cmp	r3, r2
 80116b6:	d05c      	beq.n	8011772 <HAL_DMA_IRQHandler+0x196>
 80116b8:	4a87      	ldr	r2, [pc, #540]	; (80118d8 <HAL_DMA_IRQHandler+0x2fc>)
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d05b      	beq.n	8011776 <HAL_DMA_IRQHandler+0x19a>
 80116be:	4a87      	ldr	r2, [pc, #540]	; (80118dc <HAL_DMA_IRQHandler+0x300>)
 80116c0:	4293      	cmp	r3, r2
 80116c2:	d05a      	beq.n	801177a <HAL_DMA_IRQHandler+0x19e>
 80116c4:	4a86      	ldr	r2, [pc, #536]	; (80118e0 <HAL_DMA_IRQHandler+0x304>)
 80116c6:	189a      	adds	r2, r3, r2
 80116c8:	4250      	negs	r0, r2
 80116ca:	4142      	adcs	r2, r0
 80116cc:	4252      	negs	r2, r2
 80116ce:	4885      	ldr	r0, [pc, #532]	; (80118e4 <HAL_DMA_IRQHandler+0x308>)
 80116d0:	4002      	ands	r2, r0
 80116d2:	2080      	movs	r0, #128	; 0x80
 80116d4:	0300      	lsls	r0, r0, #12
 80116d6:	4684      	mov	ip, r0
 80116d8:	4462      	add	r2, ip
 80116da:	e000      	b.n	80116de <HAL_DMA_IRQHandler+0x102>
 80116dc:	2208      	movs	r2, #8
 80116de:	420a      	tst	r2, r1
 80116e0:	d000      	beq.n	80116e4 <HAL_DMA_IRQHandler+0x108>
 80116e2:	e3ad      	b.n	8011e40 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80116e4:	4a80      	ldr	r2, [pc, #512]	; (80118e8 <HAL_DMA_IRQHandler+0x30c>)
 80116e6:	6811      	ldr	r1, [r2, #0]
 80116e8:	4a74      	ldr	r2, [pc, #464]	; (80118bc <HAL_DMA_IRQHandler+0x2e0>)
 80116ea:	4293      	cmp	r3, r2
 80116ec:	d100      	bne.n	80116f0 <HAL_DMA_IRQHandler+0x114>
 80116ee:	e198      	b.n	8011a22 <HAL_DMA_IRQHandler+0x446>
 80116f0:	4a73      	ldr	r2, [pc, #460]	; (80118c0 <HAL_DMA_IRQHandler+0x2e4>)
 80116f2:	4293      	cmp	r3, r2
 80116f4:	d100      	bne.n	80116f8 <HAL_DMA_IRQHandler+0x11c>
 80116f6:	e1da      	b.n	8011aae <HAL_DMA_IRQHandler+0x4d2>
 80116f8:	4a72      	ldr	r2, [pc, #456]	; (80118c4 <HAL_DMA_IRQHandler+0x2e8>)
 80116fa:	4293      	cmp	r3, r2
 80116fc:	d100      	bne.n	8011700 <HAL_DMA_IRQHandler+0x124>
 80116fe:	e1d8      	b.n	8011ab2 <HAL_DMA_IRQHandler+0x4d6>
 8011700:	4a71      	ldr	r2, [pc, #452]	; (80118c8 <HAL_DMA_IRQHandler+0x2ec>)
 8011702:	4293      	cmp	r3, r2
 8011704:	d100      	bne.n	8011708 <HAL_DMA_IRQHandler+0x12c>
 8011706:	e1d7      	b.n	8011ab8 <HAL_DMA_IRQHandler+0x4dc>
 8011708:	4a70      	ldr	r2, [pc, #448]	; (80118cc <HAL_DMA_IRQHandler+0x2f0>)
 801170a:	4293      	cmp	r3, r2
 801170c:	d100      	bne.n	8011710 <HAL_DMA_IRQHandler+0x134>
 801170e:	e1d6      	b.n	8011abe <HAL_DMA_IRQHandler+0x4e2>
 8011710:	4a6f      	ldr	r2, [pc, #444]	; (80118d0 <HAL_DMA_IRQHandler+0x2f4>)
 8011712:	4293      	cmp	r3, r2
 8011714:	d100      	bne.n	8011718 <HAL_DMA_IRQHandler+0x13c>
 8011716:	e1d5      	b.n	8011ac4 <HAL_DMA_IRQHandler+0x4e8>
 8011718:	4a66      	ldr	r2, [pc, #408]	; (80118b4 <HAL_DMA_IRQHandler+0x2d8>)
 801171a:	4293      	cmp	r3, r2
 801171c:	d100      	bne.n	8011720 <HAL_DMA_IRQHandler+0x144>
 801171e:	e1d4      	b.n	8011aca <HAL_DMA_IRQHandler+0x4ee>
 8011720:	4a6c      	ldr	r2, [pc, #432]	; (80118d4 <HAL_DMA_IRQHandler+0x2f8>)
 8011722:	4293      	cmp	r3, r2
 8011724:	d100      	bne.n	8011728 <HAL_DMA_IRQHandler+0x14c>
 8011726:	e1d3      	b.n	8011ad0 <HAL_DMA_IRQHandler+0x4f4>
 8011728:	4a6b      	ldr	r2, [pc, #428]	; (80118d8 <HAL_DMA_IRQHandler+0x2fc>)
 801172a:	4293      	cmp	r3, r2
 801172c:	d100      	bne.n	8011730 <HAL_DMA_IRQHandler+0x154>
 801172e:	e1d1      	b.n	8011ad4 <HAL_DMA_IRQHandler+0x4f8>
 8011730:	4a6a      	ldr	r2, [pc, #424]	; (80118dc <HAL_DMA_IRQHandler+0x300>)
 8011732:	4293      	cmp	r3, r2
 8011734:	d100      	bne.n	8011738 <HAL_DMA_IRQHandler+0x15c>
 8011736:	e1cf      	b.n	8011ad8 <HAL_DMA_IRQHandler+0x4fc>
 8011738:	4a69      	ldr	r2, [pc, #420]	; (80118e0 <HAL_DMA_IRQHandler+0x304>)
 801173a:	189a      	adds	r2, r3, r2
 801173c:	4250      	negs	r0, r2
 801173e:	4142      	adcs	r2, r0
 8011740:	4252      	negs	r2, r2
 8011742:	486a      	ldr	r0, [pc, #424]	; (80118ec <HAL_DMA_IRQHandler+0x310>)
 8011744:	4002      	ands	r2, r0
 8011746:	2080      	movs	r0, #128	; 0x80
 8011748:	02c0      	lsls	r0, r0, #11
 801174a:	4684      	mov	ip, r0
 801174c:	4462      	add	r2, ip
 801174e:	e169      	b.n	8011a24 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011750:	2280      	movs	r2, #128	; 0x80
 8011752:	e7c4      	b.n	80116de <HAL_DMA_IRQHandler+0x102>
 8011754:	2280      	movs	r2, #128	; 0x80
 8011756:	0112      	lsls	r2, r2, #4
 8011758:	e7c1      	b.n	80116de <HAL_DMA_IRQHandler+0x102>
 801175a:	2280      	movs	r2, #128	; 0x80
 801175c:	0212      	lsls	r2, r2, #8
 801175e:	e7be      	b.n	80116de <HAL_DMA_IRQHandler+0x102>
 8011760:	2280      	movs	r2, #128	; 0x80
 8011762:	0312      	lsls	r2, r2, #12
 8011764:	e7bb      	b.n	80116de <HAL_DMA_IRQHandler+0x102>
 8011766:	2280      	movs	r2, #128	; 0x80
 8011768:	0412      	lsls	r2, r2, #16
 801176a:	e7b8      	b.n	80116de <HAL_DMA_IRQHandler+0x102>
 801176c:	2280      	movs	r2, #128	; 0x80
 801176e:	0512      	lsls	r2, r2, #20
 8011770:	e7b5      	b.n	80116de <HAL_DMA_IRQHandler+0x102>
 8011772:	2208      	movs	r2, #8
 8011774:	e7b3      	b.n	80116de <HAL_DMA_IRQHandler+0x102>
 8011776:	2280      	movs	r2, #128	; 0x80
 8011778:	e7b1      	b.n	80116de <HAL_DMA_IRQHandler+0x102>
 801177a:	2280      	movs	r2, #128	; 0x80
 801177c:	0112      	lsls	r2, r2, #4
 801177e:	e7ae      	b.n	80116de <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8011780:	681a      	ldr	r2, [r3, #0]
 8011782:	2108      	movs	r1, #8
 8011784:	438a      	bics	r2, r1
 8011786:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011788:	6823      	ldr	r3, [r4, #0]
 801178a:	4a4a      	ldr	r2, [pc, #296]	; (80118b4 <HAL_DMA_IRQHandler+0x2d8>)
 801178c:	4293      	cmp	r3, r2
 801178e:	d800      	bhi.n	8011792 <HAL_DMA_IRQHandler+0x1b6>
 8011790:	e0ae      	b.n	80118f0 <HAL_DMA_IRQHandler+0x314>
 8011792:	4a4a      	ldr	r2, [pc, #296]	; (80118bc <HAL_DMA_IRQHandler+0x2e0>)
 8011794:	4293      	cmp	r3, r2
 8011796:	d027      	beq.n	80117e8 <HAL_DMA_IRQHandler+0x20c>
 8011798:	4a49      	ldr	r2, [pc, #292]	; (80118c0 <HAL_DMA_IRQHandler+0x2e4>)
 801179a:	4293      	cmp	r3, r2
 801179c:	d071      	beq.n	8011882 <HAL_DMA_IRQHandler+0x2a6>
 801179e:	4a49      	ldr	r2, [pc, #292]	; (80118c4 <HAL_DMA_IRQHandler+0x2e8>)
 80117a0:	4293      	cmp	r3, r2
 80117a2:	d070      	beq.n	8011886 <HAL_DMA_IRQHandler+0x2aa>
 80117a4:	4a48      	ldr	r2, [pc, #288]	; (80118c8 <HAL_DMA_IRQHandler+0x2ec>)
 80117a6:	4293      	cmp	r3, r2
 80117a8:	d070      	beq.n	801188c <HAL_DMA_IRQHandler+0x2b0>
 80117aa:	4a48      	ldr	r2, [pc, #288]	; (80118cc <HAL_DMA_IRQHandler+0x2f0>)
 80117ac:	4293      	cmp	r3, r2
 80117ae:	d070      	beq.n	8011892 <HAL_DMA_IRQHandler+0x2b6>
 80117b0:	4a47      	ldr	r2, [pc, #284]	; (80118d0 <HAL_DMA_IRQHandler+0x2f4>)
 80117b2:	4293      	cmp	r3, r2
 80117b4:	d070      	beq.n	8011898 <HAL_DMA_IRQHandler+0x2bc>
 80117b6:	4a3f      	ldr	r2, [pc, #252]	; (80118b4 <HAL_DMA_IRQHandler+0x2d8>)
 80117b8:	4293      	cmp	r3, r2
 80117ba:	d070      	beq.n	801189e <HAL_DMA_IRQHandler+0x2c2>
 80117bc:	4a45      	ldr	r2, [pc, #276]	; (80118d4 <HAL_DMA_IRQHandler+0x2f8>)
 80117be:	4293      	cmp	r3, r2
 80117c0:	d070      	beq.n	80118a4 <HAL_DMA_IRQHandler+0x2c8>
 80117c2:	4a45      	ldr	r2, [pc, #276]	; (80118d8 <HAL_DMA_IRQHandler+0x2fc>)
 80117c4:	4293      	cmp	r3, r2
 80117c6:	d06f      	beq.n	80118a8 <HAL_DMA_IRQHandler+0x2cc>
 80117c8:	4a44      	ldr	r2, [pc, #272]	; (80118dc <HAL_DMA_IRQHandler+0x300>)
 80117ca:	4293      	cmp	r3, r2
 80117cc:	d06e      	beq.n	80118ac <HAL_DMA_IRQHandler+0x2d0>
 80117ce:	4a44      	ldr	r2, [pc, #272]	; (80118e0 <HAL_DMA_IRQHandler+0x304>)
 80117d0:	4694      	mov	ip, r2
 80117d2:	4463      	add	r3, ip
 80117d4:	425a      	negs	r2, r3
 80117d6:	4153      	adcs	r3, r2
 80117d8:	425b      	negs	r3, r3
 80117da:	4a42      	ldr	r2, [pc, #264]	; (80118e4 <HAL_DMA_IRQHandler+0x308>)
 80117dc:	4013      	ands	r3, r2
 80117de:	2280      	movs	r2, #128	; 0x80
 80117e0:	0312      	lsls	r2, r2, #12
 80117e2:	4694      	mov	ip, r2
 80117e4:	4463      	add	r3, ip
 80117e6:	e000      	b.n	80117ea <HAL_DMA_IRQHandler+0x20e>
 80117e8:	2308      	movs	r3, #8
 80117ea:	4a33      	ldr	r2, [pc, #204]	; (80118b8 <HAL_DMA_IRQHandler+0x2dc>)
 80117ec:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80117ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117f0:	2201      	movs	r2, #1
 80117f2:	4313      	orrs	r3, r2
 80117f4:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80117f6:	2321      	movs	r3, #33	; 0x21
 80117f8:	3203      	adds	r2, #3
 80117fa:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 80117fc:	3b01      	subs	r3, #1
 80117fe:	2200      	movs	r2, #0
 8011800:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011802:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011804:	2b00      	cmp	r3, #0
 8011806:	d001      	beq.n	801180c <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 8011808:	0020      	movs	r0, r4
 801180a:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801180c:	6823      	ldr	r3, [r4, #0]
 801180e:	4a29      	ldr	r2, [pc, #164]	; (80118b4 <HAL_DMA_IRQHandler+0x2d8>)
 8011810:	4293      	cmp	r3, r2
 8011812:	d800      	bhi.n	8011816 <HAL_DMA_IRQHandler+0x23a>
 8011814:	e766      	b.n	80116e4 <HAL_DMA_IRQHandler+0x108>
 8011816:	4a28      	ldr	r2, [pc, #160]	; (80118b8 <HAL_DMA_IRQHandler+0x2dc>)
 8011818:	6811      	ldr	r1, [r2, #0]
 801181a:	4a28      	ldr	r2, [pc, #160]	; (80118bc <HAL_DMA_IRQHandler+0x2e0>)
 801181c:	4293      	cmp	r3, r2
 801181e:	d100      	bne.n	8011822 <HAL_DMA_IRQHandler+0x246>
 8011820:	e0ad      	b.n	801197e <HAL_DMA_IRQHandler+0x3a2>
 8011822:	4a27      	ldr	r2, [pc, #156]	; (80118c0 <HAL_DMA_IRQHandler+0x2e4>)
 8011824:	4293      	cmp	r3, r2
 8011826:	d100      	bne.n	801182a <HAL_DMA_IRQHandler+0x24e>
 8011828:	e0e3      	b.n	80119f2 <HAL_DMA_IRQHandler+0x416>
 801182a:	4a26      	ldr	r2, [pc, #152]	; (80118c4 <HAL_DMA_IRQHandler+0x2e8>)
 801182c:	4293      	cmp	r3, r2
 801182e:	d100      	bne.n	8011832 <HAL_DMA_IRQHandler+0x256>
 8011830:	e0e1      	b.n	80119f6 <HAL_DMA_IRQHandler+0x41a>
 8011832:	4a25      	ldr	r2, [pc, #148]	; (80118c8 <HAL_DMA_IRQHandler+0x2ec>)
 8011834:	4293      	cmp	r3, r2
 8011836:	d100      	bne.n	801183a <HAL_DMA_IRQHandler+0x25e>
 8011838:	e0e0      	b.n	80119fc <HAL_DMA_IRQHandler+0x420>
 801183a:	4a24      	ldr	r2, [pc, #144]	; (80118cc <HAL_DMA_IRQHandler+0x2f0>)
 801183c:	4293      	cmp	r3, r2
 801183e:	d100      	bne.n	8011842 <HAL_DMA_IRQHandler+0x266>
 8011840:	e0df      	b.n	8011a02 <HAL_DMA_IRQHandler+0x426>
 8011842:	4a23      	ldr	r2, [pc, #140]	; (80118d0 <HAL_DMA_IRQHandler+0x2f4>)
 8011844:	4293      	cmp	r3, r2
 8011846:	d100      	bne.n	801184a <HAL_DMA_IRQHandler+0x26e>
 8011848:	e0de      	b.n	8011a08 <HAL_DMA_IRQHandler+0x42c>
 801184a:	4a1a      	ldr	r2, [pc, #104]	; (80118b4 <HAL_DMA_IRQHandler+0x2d8>)
 801184c:	4293      	cmp	r3, r2
 801184e:	d100      	bne.n	8011852 <HAL_DMA_IRQHandler+0x276>
 8011850:	e0dd      	b.n	8011a0e <HAL_DMA_IRQHandler+0x432>
 8011852:	4a20      	ldr	r2, [pc, #128]	; (80118d4 <HAL_DMA_IRQHandler+0x2f8>)
 8011854:	4293      	cmp	r3, r2
 8011856:	d100      	bne.n	801185a <HAL_DMA_IRQHandler+0x27e>
 8011858:	e0dc      	b.n	8011a14 <HAL_DMA_IRQHandler+0x438>
 801185a:	4a1f      	ldr	r2, [pc, #124]	; (80118d8 <HAL_DMA_IRQHandler+0x2fc>)
 801185c:	4293      	cmp	r3, r2
 801185e:	d100      	bne.n	8011862 <HAL_DMA_IRQHandler+0x286>
 8011860:	e0da      	b.n	8011a18 <HAL_DMA_IRQHandler+0x43c>
 8011862:	4a1e      	ldr	r2, [pc, #120]	; (80118dc <HAL_DMA_IRQHandler+0x300>)
 8011864:	4293      	cmp	r3, r2
 8011866:	d100      	bne.n	801186a <HAL_DMA_IRQHandler+0x28e>
 8011868:	e0d8      	b.n	8011a1c <HAL_DMA_IRQHandler+0x440>
 801186a:	4a1d      	ldr	r2, [pc, #116]	; (80118e0 <HAL_DMA_IRQHandler+0x304>)
 801186c:	189a      	adds	r2, r3, r2
 801186e:	4250      	negs	r0, r2
 8011870:	4142      	adcs	r2, r0
 8011872:	4252      	negs	r2, r2
 8011874:	481d      	ldr	r0, [pc, #116]	; (80118ec <HAL_DMA_IRQHandler+0x310>)
 8011876:	4002      	ands	r2, r0
 8011878:	2080      	movs	r0, #128	; 0x80
 801187a:	02c0      	lsls	r0, r0, #11
 801187c:	4684      	mov	ip, r0
 801187e:	4462      	add	r2, ip
 8011880:	e07e      	b.n	8011980 <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011882:	2380      	movs	r3, #128	; 0x80
 8011884:	e7b1      	b.n	80117ea <HAL_DMA_IRQHandler+0x20e>
 8011886:	2380      	movs	r3, #128	; 0x80
 8011888:	011b      	lsls	r3, r3, #4
 801188a:	e7ae      	b.n	80117ea <HAL_DMA_IRQHandler+0x20e>
 801188c:	2380      	movs	r3, #128	; 0x80
 801188e:	021b      	lsls	r3, r3, #8
 8011890:	e7ab      	b.n	80117ea <HAL_DMA_IRQHandler+0x20e>
 8011892:	2380      	movs	r3, #128	; 0x80
 8011894:	031b      	lsls	r3, r3, #12
 8011896:	e7a8      	b.n	80117ea <HAL_DMA_IRQHandler+0x20e>
 8011898:	2380      	movs	r3, #128	; 0x80
 801189a:	041b      	lsls	r3, r3, #16
 801189c:	e7a5      	b.n	80117ea <HAL_DMA_IRQHandler+0x20e>
 801189e:	2380      	movs	r3, #128	; 0x80
 80118a0:	051b      	lsls	r3, r3, #20
 80118a2:	e7a2      	b.n	80117ea <HAL_DMA_IRQHandler+0x20e>
 80118a4:	2308      	movs	r3, #8
 80118a6:	e7a0      	b.n	80117ea <HAL_DMA_IRQHandler+0x20e>
 80118a8:	2380      	movs	r3, #128	; 0x80
 80118aa:	e79e      	b.n	80117ea <HAL_DMA_IRQHandler+0x20e>
 80118ac:	2380      	movs	r3, #128	; 0x80
 80118ae:	011b      	lsls	r3, r3, #4
 80118b0:	e79b      	b.n	80117ea <HAL_DMA_IRQHandler+0x20e>
 80118b2:	46c0      	nop			; (mov r8, r8)
 80118b4:	40020080 	.word	0x40020080
 80118b8:	40020400 	.word	0x40020400
 80118bc:	40020008 	.word	0x40020008
 80118c0:	4002001c 	.word	0x4002001c
 80118c4:	40020030 	.word	0x40020030
 80118c8:	40020044 	.word	0x40020044
 80118cc:	40020058 	.word	0x40020058
 80118d0:	4002006c 	.word	0x4002006c
 80118d4:	40020408 	.word	0x40020408
 80118d8:	4002041c 	.word	0x4002041c
 80118dc:	40020430 	.word	0x40020430
 80118e0:	bffdfbbc 	.word	0xbffdfbbc
 80118e4:	fff88000 	.word	0xfff88000
 80118e8:	40020000 	.word	0x40020000
 80118ec:	fffc4000 	.word	0xfffc4000
 80118f0:	4aaa      	ldr	r2, [pc, #680]	; (8011b9c <HAL_DMA_IRQHandler+0x5c0>)
 80118f2:	4293      	cmp	r3, r2
 80118f4:	d027      	beq.n	8011946 <HAL_DMA_IRQHandler+0x36a>
 80118f6:	4aaa      	ldr	r2, [pc, #680]	; (8011ba0 <HAL_DMA_IRQHandler+0x5c4>)
 80118f8:	4293      	cmp	r3, r2
 80118fa:	d028      	beq.n	801194e <HAL_DMA_IRQHandler+0x372>
 80118fc:	4aa9      	ldr	r2, [pc, #676]	; (8011ba4 <HAL_DMA_IRQHandler+0x5c8>)
 80118fe:	4293      	cmp	r3, r2
 8011900:	d027      	beq.n	8011952 <HAL_DMA_IRQHandler+0x376>
 8011902:	4aa9      	ldr	r2, [pc, #676]	; (8011ba8 <HAL_DMA_IRQHandler+0x5cc>)
 8011904:	4293      	cmp	r3, r2
 8011906:	d027      	beq.n	8011958 <HAL_DMA_IRQHandler+0x37c>
 8011908:	4aa8      	ldr	r2, [pc, #672]	; (8011bac <HAL_DMA_IRQHandler+0x5d0>)
 801190a:	4293      	cmp	r3, r2
 801190c:	d027      	beq.n	801195e <HAL_DMA_IRQHandler+0x382>
 801190e:	4aa8      	ldr	r2, [pc, #672]	; (8011bb0 <HAL_DMA_IRQHandler+0x5d4>)
 8011910:	4293      	cmp	r3, r2
 8011912:	d027      	beq.n	8011964 <HAL_DMA_IRQHandler+0x388>
 8011914:	4aa7      	ldr	r2, [pc, #668]	; (8011bb4 <HAL_DMA_IRQHandler+0x5d8>)
 8011916:	4293      	cmp	r3, r2
 8011918:	d027      	beq.n	801196a <HAL_DMA_IRQHandler+0x38e>
 801191a:	4aa7      	ldr	r2, [pc, #668]	; (8011bb8 <HAL_DMA_IRQHandler+0x5dc>)
 801191c:	4293      	cmp	r3, r2
 801191e:	d027      	beq.n	8011970 <HAL_DMA_IRQHandler+0x394>
 8011920:	4aa6      	ldr	r2, [pc, #664]	; (8011bbc <HAL_DMA_IRQHandler+0x5e0>)
 8011922:	4293      	cmp	r3, r2
 8011924:	d026      	beq.n	8011974 <HAL_DMA_IRQHandler+0x398>
 8011926:	4aa6      	ldr	r2, [pc, #664]	; (8011bc0 <HAL_DMA_IRQHandler+0x5e4>)
 8011928:	4293      	cmp	r3, r2
 801192a:	d025      	beq.n	8011978 <HAL_DMA_IRQHandler+0x39c>
 801192c:	4aa5      	ldr	r2, [pc, #660]	; (8011bc4 <HAL_DMA_IRQHandler+0x5e8>)
 801192e:	4694      	mov	ip, r2
 8011930:	4463      	add	r3, ip
 8011932:	425a      	negs	r2, r3
 8011934:	4153      	adcs	r3, r2
 8011936:	425b      	negs	r3, r3
 8011938:	4aa3      	ldr	r2, [pc, #652]	; (8011bc8 <HAL_DMA_IRQHandler+0x5ec>)
 801193a:	4013      	ands	r3, r2
 801193c:	2280      	movs	r2, #128	; 0x80
 801193e:	0312      	lsls	r2, r2, #12
 8011940:	4694      	mov	ip, r2
 8011942:	4463      	add	r3, ip
 8011944:	e000      	b.n	8011948 <HAL_DMA_IRQHandler+0x36c>
 8011946:	2308      	movs	r3, #8
 8011948:	4aa0      	ldr	r2, [pc, #640]	; (8011bcc <HAL_DMA_IRQHandler+0x5f0>)
 801194a:	6053      	str	r3, [r2, #4]
 801194c:	e74f      	b.n	80117ee <HAL_DMA_IRQHandler+0x212>
 801194e:	2380      	movs	r3, #128	; 0x80
 8011950:	e7fa      	b.n	8011948 <HAL_DMA_IRQHandler+0x36c>
 8011952:	2380      	movs	r3, #128	; 0x80
 8011954:	011b      	lsls	r3, r3, #4
 8011956:	e7f7      	b.n	8011948 <HAL_DMA_IRQHandler+0x36c>
 8011958:	2380      	movs	r3, #128	; 0x80
 801195a:	021b      	lsls	r3, r3, #8
 801195c:	e7f4      	b.n	8011948 <HAL_DMA_IRQHandler+0x36c>
 801195e:	2380      	movs	r3, #128	; 0x80
 8011960:	031b      	lsls	r3, r3, #12
 8011962:	e7f1      	b.n	8011948 <HAL_DMA_IRQHandler+0x36c>
 8011964:	2380      	movs	r3, #128	; 0x80
 8011966:	041b      	lsls	r3, r3, #16
 8011968:	e7ee      	b.n	8011948 <HAL_DMA_IRQHandler+0x36c>
 801196a:	2380      	movs	r3, #128	; 0x80
 801196c:	051b      	lsls	r3, r3, #20
 801196e:	e7eb      	b.n	8011948 <HAL_DMA_IRQHandler+0x36c>
 8011970:	2308      	movs	r3, #8
 8011972:	e7e9      	b.n	8011948 <HAL_DMA_IRQHandler+0x36c>
 8011974:	2380      	movs	r3, #128	; 0x80
 8011976:	e7e7      	b.n	8011948 <HAL_DMA_IRQHandler+0x36c>
 8011978:	2380      	movs	r3, #128	; 0x80
 801197a:	011b      	lsls	r3, r3, #4
 801197c:	e7e4      	b.n	8011948 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801197e:	2204      	movs	r2, #4
 8011980:	420a      	tst	r2, r1
 8011982:	d152      	bne.n	8011a2a <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011984:	6821      	ldr	r1, [r4, #0]
 8011986:	4b92      	ldr	r3, [pc, #584]	; (8011bd0 <HAL_DMA_IRQHandler+0x5f4>)
 8011988:	6818      	ldr	r0, [r3, #0]
 801198a:	4a84      	ldr	r2, [pc, #528]	; (8011b9c <HAL_DMA_IRQHandler+0x5c0>)
 801198c:	4291      	cmp	r1, r2
 801198e:	d100      	bne.n	8011992 <HAL_DMA_IRQHandler+0x3b6>
 8011990:	e16b      	b.n	8011c6a <HAL_DMA_IRQHandler+0x68e>
 8011992:	4a83      	ldr	r2, [pc, #524]	; (8011ba0 <HAL_DMA_IRQHandler+0x5c4>)
 8011994:	4291      	cmp	r1, r2
 8011996:	d100      	bne.n	801199a <HAL_DMA_IRQHandler+0x3be>
 8011998:	e1aa      	b.n	8011cf0 <HAL_DMA_IRQHandler+0x714>
 801199a:	4a82      	ldr	r2, [pc, #520]	; (8011ba4 <HAL_DMA_IRQHandler+0x5c8>)
 801199c:	4291      	cmp	r1, r2
 801199e:	d100      	bne.n	80119a2 <HAL_DMA_IRQHandler+0x3c6>
 80119a0:	e1a8      	b.n	8011cf4 <HAL_DMA_IRQHandler+0x718>
 80119a2:	4a81      	ldr	r2, [pc, #516]	; (8011ba8 <HAL_DMA_IRQHandler+0x5cc>)
 80119a4:	4291      	cmp	r1, r2
 80119a6:	d100      	bne.n	80119aa <HAL_DMA_IRQHandler+0x3ce>
 80119a8:	e1a7      	b.n	8011cfa <HAL_DMA_IRQHandler+0x71e>
 80119aa:	4b80      	ldr	r3, [pc, #512]	; (8011bac <HAL_DMA_IRQHandler+0x5d0>)
 80119ac:	4299      	cmp	r1, r3
 80119ae:	d100      	bne.n	80119b2 <HAL_DMA_IRQHandler+0x3d6>
 80119b0:	e1a6      	b.n	8011d00 <HAL_DMA_IRQHandler+0x724>
 80119b2:	4b7f      	ldr	r3, [pc, #508]	; (8011bb0 <HAL_DMA_IRQHandler+0x5d4>)
 80119b4:	4299      	cmp	r1, r3
 80119b6:	d100      	bne.n	80119ba <HAL_DMA_IRQHandler+0x3de>
 80119b8:	e1a5      	b.n	8011d06 <HAL_DMA_IRQHandler+0x72a>
 80119ba:	4b7e      	ldr	r3, [pc, #504]	; (8011bb4 <HAL_DMA_IRQHandler+0x5d8>)
 80119bc:	4299      	cmp	r1, r3
 80119be:	d100      	bne.n	80119c2 <HAL_DMA_IRQHandler+0x3e6>
 80119c0:	e1a4      	b.n	8011d0c <HAL_DMA_IRQHandler+0x730>
 80119c2:	4b7d      	ldr	r3, [pc, #500]	; (8011bb8 <HAL_DMA_IRQHandler+0x5dc>)
 80119c4:	4299      	cmp	r1, r3
 80119c6:	d100      	bne.n	80119ca <HAL_DMA_IRQHandler+0x3ee>
 80119c8:	e1a3      	b.n	8011d12 <HAL_DMA_IRQHandler+0x736>
 80119ca:	4b7c      	ldr	r3, [pc, #496]	; (8011bbc <HAL_DMA_IRQHandler+0x5e0>)
 80119cc:	4299      	cmp	r1, r3
 80119ce:	d100      	bne.n	80119d2 <HAL_DMA_IRQHandler+0x3f6>
 80119d0:	e1a1      	b.n	8011d16 <HAL_DMA_IRQHandler+0x73a>
 80119d2:	4b7b      	ldr	r3, [pc, #492]	; (8011bc0 <HAL_DMA_IRQHandler+0x5e4>)
 80119d4:	4299      	cmp	r1, r3
 80119d6:	d100      	bne.n	80119da <HAL_DMA_IRQHandler+0x3fe>
 80119d8:	e19f      	b.n	8011d1a <HAL_DMA_IRQHandler+0x73e>
 80119da:	4b7a      	ldr	r3, [pc, #488]	; (8011bc4 <HAL_DMA_IRQHandler+0x5e8>)
 80119dc:	18ca      	adds	r2, r1, r3
 80119de:	4253      	negs	r3, r2
 80119e0:	415a      	adcs	r2, r3
 80119e2:	4252      	negs	r2, r2
 80119e4:	4b7b      	ldr	r3, [pc, #492]	; (8011bd4 <HAL_DMA_IRQHandler+0x5f8>)
 80119e6:	4013      	ands	r3, r2
 80119e8:	2280      	movs	r2, #128	; 0x80
 80119ea:	0292      	lsls	r2, r2, #10
 80119ec:	4694      	mov	ip, r2
 80119ee:	4463      	add	r3, ip
 80119f0:	e13c      	b.n	8011c6c <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80119f2:	2240      	movs	r2, #64	; 0x40
 80119f4:	e7c4      	b.n	8011980 <HAL_DMA_IRQHandler+0x3a4>
 80119f6:	2280      	movs	r2, #128	; 0x80
 80119f8:	00d2      	lsls	r2, r2, #3
 80119fa:	e7c1      	b.n	8011980 <HAL_DMA_IRQHandler+0x3a4>
 80119fc:	2280      	movs	r2, #128	; 0x80
 80119fe:	01d2      	lsls	r2, r2, #7
 8011a00:	e7be      	b.n	8011980 <HAL_DMA_IRQHandler+0x3a4>
 8011a02:	2280      	movs	r2, #128	; 0x80
 8011a04:	02d2      	lsls	r2, r2, #11
 8011a06:	e7bb      	b.n	8011980 <HAL_DMA_IRQHandler+0x3a4>
 8011a08:	2280      	movs	r2, #128	; 0x80
 8011a0a:	03d2      	lsls	r2, r2, #15
 8011a0c:	e7b8      	b.n	8011980 <HAL_DMA_IRQHandler+0x3a4>
 8011a0e:	2280      	movs	r2, #128	; 0x80
 8011a10:	04d2      	lsls	r2, r2, #19
 8011a12:	e7b5      	b.n	8011980 <HAL_DMA_IRQHandler+0x3a4>
 8011a14:	2204      	movs	r2, #4
 8011a16:	e7b3      	b.n	8011980 <HAL_DMA_IRQHandler+0x3a4>
 8011a18:	2240      	movs	r2, #64	; 0x40
 8011a1a:	e7b1      	b.n	8011980 <HAL_DMA_IRQHandler+0x3a4>
 8011a1c:	2280      	movs	r2, #128	; 0x80
 8011a1e:	00d2      	lsls	r2, r2, #3
 8011a20:	e7ae      	b.n	8011980 <HAL_DMA_IRQHandler+0x3a4>
 8011a22:	2204      	movs	r2, #4
 8011a24:	420a      	tst	r2, r1
 8011a26:	d100      	bne.n	8011a2a <HAL_DMA_IRQHandler+0x44e>
 8011a28:	e208      	b.n	8011e3c <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011a2a:	681a      	ldr	r2, [r3, #0]
 8011a2c:	0752      	lsls	r2, r2, #29
 8011a2e:	d561      	bpl.n	8011af4 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011a30:	681a      	ldr	r2, [r3, #0]
 8011a32:	0692      	lsls	r2, r2, #26
 8011a34:	d403      	bmi.n	8011a3e <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011a36:	681a      	ldr	r2, [r3, #0]
 8011a38:	2104      	movs	r1, #4
 8011a3a:	438a      	bics	r2, r1
 8011a3c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011a3e:	6823      	ldr	r3, [r4, #0]
 8011a40:	4a5c      	ldr	r2, [pc, #368]	; (8011bb4 <HAL_DMA_IRQHandler+0x5d8>)
 8011a42:	4293      	cmp	r3, r2
 8011a44:	d800      	bhi.n	8011a48 <HAL_DMA_IRQHandler+0x46c>
 8011a46:	e0c9      	b.n	8011bdc <HAL_DMA_IRQHandler+0x600>
 8011a48:	4a54      	ldr	r2, [pc, #336]	; (8011b9c <HAL_DMA_IRQHandler+0x5c0>)
 8011a4a:	4293      	cmp	r3, r2
 8011a4c:	d047      	beq.n	8011ade <HAL_DMA_IRQHandler+0x502>
 8011a4e:	4a54      	ldr	r2, [pc, #336]	; (8011ba0 <HAL_DMA_IRQHandler+0x5c4>)
 8011a50:	4293      	cmp	r3, r2
 8011a52:	d100      	bne.n	8011a56 <HAL_DMA_IRQHandler+0x47a>
 8011a54:	e089      	b.n	8011b6a <HAL_DMA_IRQHandler+0x58e>
 8011a56:	4a53      	ldr	r2, [pc, #332]	; (8011ba4 <HAL_DMA_IRQHandler+0x5c8>)
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d100      	bne.n	8011a5e <HAL_DMA_IRQHandler+0x482>
 8011a5c:	e087      	b.n	8011b6e <HAL_DMA_IRQHandler+0x592>
 8011a5e:	4a52      	ldr	r2, [pc, #328]	; (8011ba8 <HAL_DMA_IRQHandler+0x5cc>)
 8011a60:	4293      	cmp	r3, r2
 8011a62:	d100      	bne.n	8011a66 <HAL_DMA_IRQHandler+0x48a>
 8011a64:	e086      	b.n	8011b74 <HAL_DMA_IRQHandler+0x598>
 8011a66:	4a51      	ldr	r2, [pc, #324]	; (8011bac <HAL_DMA_IRQHandler+0x5d0>)
 8011a68:	4293      	cmp	r3, r2
 8011a6a:	d100      	bne.n	8011a6e <HAL_DMA_IRQHandler+0x492>
 8011a6c:	e085      	b.n	8011b7a <HAL_DMA_IRQHandler+0x59e>
 8011a6e:	4a50      	ldr	r2, [pc, #320]	; (8011bb0 <HAL_DMA_IRQHandler+0x5d4>)
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d100      	bne.n	8011a76 <HAL_DMA_IRQHandler+0x49a>
 8011a74:	e084      	b.n	8011b80 <HAL_DMA_IRQHandler+0x5a4>
 8011a76:	4a4f      	ldr	r2, [pc, #316]	; (8011bb4 <HAL_DMA_IRQHandler+0x5d8>)
 8011a78:	4293      	cmp	r3, r2
 8011a7a:	d100      	bne.n	8011a7e <HAL_DMA_IRQHandler+0x4a2>
 8011a7c:	e083      	b.n	8011b86 <HAL_DMA_IRQHandler+0x5aa>
 8011a7e:	4a4e      	ldr	r2, [pc, #312]	; (8011bb8 <HAL_DMA_IRQHandler+0x5dc>)
 8011a80:	4293      	cmp	r3, r2
 8011a82:	d100      	bne.n	8011a86 <HAL_DMA_IRQHandler+0x4aa>
 8011a84:	e082      	b.n	8011b8c <HAL_DMA_IRQHandler+0x5b0>
 8011a86:	4a4d      	ldr	r2, [pc, #308]	; (8011bbc <HAL_DMA_IRQHandler+0x5e0>)
 8011a88:	4293      	cmp	r3, r2
 8011a8a:	d100      	bne.n	8011a8e <HAL_DMA_IRQHandler+0x4b2>
 8011a8c:	e080      	b.n	8011b90 <HAL_DMA_IRQHandler+0x5b4>
 8011a8e:	4a4c      	ldr	r2, [pc, #304]	; (8011bc0 <HAL_DMA_IRQHandler+0x5e4>)
 8011a90:	4293      	cmp	r3, r2
 8011a92:	d07f      	beq.n	8011b94 <HAL_DMA_IRQHandler+0x5b8>
 8011a94:	4a4b      	ldr	r2, [pc, #300]	; (8011bc4 <HAL_DMA_IRQHandler+0x5e8>)
 8011a96:	4694      	mov	ip, r2
 8011a98:	4463      	add	r3, ip
 8011a9a:	425a      	negs	r2, r3
 8011a9c:	4153      	adcs	r3, r2
 8011a9e:	425b      	negs	r3, r3
 8011aa0:	4a4d      	ldr	r2, [pc, #308]	; (8011bd8 <HAL_DMA_IRQHandler+0x5fc>)
 8011aa2:	4013      	ands	r3, r2
 8011aa4:	2280      	movs	r2, #128	; 0x80
 8011aa6:	02d2      	lsls	r2, r2, #11
 8011aa8:	4694      	mov	ip, r2
 8011aaa:	4463      	add	r3, ip
 8011aac:	e018      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011aae:	2240      	movs	r2, #64	; 0x40
 8011ab0:	e7b8      	b.n	8011a24 <HAL_DMA_IRQHandler+0x448>
 8011ab2:	2280      	movs	r2, #128	; 0x80
 8011ab4:	00d2      	lsls	r2, r2, #3
 8011ab6:	e7b5      	b.n	8011a24 <HAL_DMA_IRQHandler+0x448>
 8011ab8:	2280      	movs	r2, #128	; 0x80
 8011aba:	01d2      	lsls	r2, r2, #7
 8011abc:	e7b2      	b.n	8011a24 <HAL_DMA_IRQHandler+0x448>
 8011abe:	2280      	movs	r2, #128	; 0x80
 8011ac0:	02d2      	lsls	r2, r2, #11
 8011ac2:	e7af      	b.n	8011a24 <HAL_DMA_IRQHandler+0x448>
 8011ac4:	2280      	movs	r2, #128	; 0x80
 8011ac6:	03d2      	lsls	r2, r2, #15
 8011ac8:	e7ac      	b.n	8011a24 <HAL_DMA_IRQHandler+0x448>
 8011aca:	2280      	movs	r2, #128	; 0x80
 8011acc:	04d2      	lsls	r2, r2, #19
 8011ace:	e7a9      	b.n	8011a24 <HAL_DMA_IRQHandler+0x448>
 8011ad0:	2204      	movs	r2, #4
 8011ad2:	e7a7      	b.n	8011a24 <HAL_DMA_IRQHandler+0x448>
 8011ad4:	2240      	movs	r2, #64	; 0x40
 8011ad6:	e7a5      	b.n	8011a24 <HAL_DMA_IRQHandler+0x448>
 8011ad8:	2280      	movs	r2, #128	; 0x80
 8011ada:	00d2      	lsls	r2, r2, #3
 8011adc:	e7a2      	b.n	8011a24 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011ade:	2304      	movs	r3, #4
 8011ae0:	4a3b      	ldr	r2, [pc, #236]	; (8011bd0 <HAL_DMA_IRQHandler+0x5f4>)
 8011ae2:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8011ae4:	2321      	movs	r3, #33	; 0x21
 8011ae6:	2211      	movs	r2, #17
 8011ae8:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011aea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d001      	beq.n	8011af4 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 8011af0:	0020      	movs	r0, r4
 8011af2:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011af4:	6821      	ldr	r1, [r4, #0]
 8011af6:	4b2f      	ldr	r3, [pc, #188]	; (8011bb4 <HAL_DMA_IRQHandler+0x5d8>)
 8011af8:	4299      	cmp	r1, r3
 8011afa:	d900      	bls.n	8011afe <HAL_DMA_IRQHandler+0x522>
 8011afc:	e743      	b.n	8011986 <HAL_DMA_IRQHandler+0x3aa>
 8011afe:	4b33      	ldr	r3, [pc, #204]	; (8011bcc <HAL_DMA_IRQHandler+0x5f0>)
 8011b00:	6818      	ldr	r0, [r3, #0]
 8011b02:	4a26      	ldr	r2, [pc, #152]	; (8011b9c <HAL_DMA_IRQHandler+0x5c0>)
 8011b04:	4291      	cmp	r1, r2
 8011b06:	d100      	bne.n	8011b0a <HAL_DMA_IRQHandler+0x52e>
 8011b08:	e10a      	b.n	8011d20 <HAL_DMA_IRQHandler+0x744>
 8011b0a:	4a25      	ldr	r2, [pc, #148]	; (8011ba0 <HAL_DMA_IRQHandler+0x5c4>)
 8011b0c:	4291      	cmp	r1, r2
 8011b0e:	d100      	bne.n	8011b12 <HAL_DMA_IRQHandler+0x536>
 8011b10:	e10c      	b.n	8011d2c <HAL_DMA_IRQHandler+0x750>
 8011b12:	4a24      	ldr	r2, [pc, #144]	; (8011ba4 <HAL_DMA_IRQHandler+0x5c8>)
 8011b14:	4291      	cmp	r1, r2
 8011b16:	d100      	bne.n	8011b1a <HAL_DMA_IRQHandler+0x53e>
 8011b18:	e10a      	b.n	8011d30 <HAL_DMA_IRQHandler+0x754>
 8011b1a:	4a23      	ldr	r2, [pc, #140]	; (8011ba8 <HAL_DMA_IRQHandler+0x5cc>)
 8011b1c:	4291      	cmp	r1, r2
 8011b1e:	d100      	bne.n	8011b22 <HAL_DMA_IRQHandler+0x546>
 8011b20:	e109      	b.n	8011d36 <HAL_DMA_IRQHandler+0x75a>
 8011b22:	4b22      	ldr	r3, [pc, #136]	; (8011bac <HAL_DMA_IRQHandler+0x5d0>)
 8011b24:	4299      	cmp	r1, r3
 8011b26:	d100      	bne.n	8011b2a <HAL_DMA_IRQHandler+0x54e>
 8011b28:	e108      	b.n	8011d3c <HAL_DMA_IRQHandler+0x760>
 8011b2a:	4b21      	ldr	r3, [pc, #132]	; (8011bb0 <HAL_DMA_IRQHandler+0x5d4>)
 8011b2c:	4299      	cmp	r1, r3
 8011b2e:	d100      	bne.n	8011b32 <HAL_DMA_IRQHandler+0x556>
 8011b30:	e107      	b.n	8011d42 <HAL_DMA_IRQHandler+0x766>
 8011b32:	4b20      	ldr	r3, [pc, #128]	; (8011bb4 <HAL_DMA_IRQHandler+0x5d8>)
 8011b34:	4299      	cmp	r1, r3
 8011b36:	d100      	bne.n	8011b3a <HAL_DMA_IRQHandler+0x55e>
 8011b38:	e106      	b.n	8011d48 <HAL_DMA_IRQHandler+0x76c>
 8011b3a:	4b1f      	ldr	r3, [pc, #124]	; (8011bb8 <HAL_DMA_IRQHandler+0x5dc>)
 8011b3c:	4299      	cmp	r1, r3
 8011b3e:	d100      	bne.n	8011b42 <HAL_DMA_IRQHandler+0x566>
 8011b40:	e105      	b.n	8011d4e <HAL_DMA_IRQHandler+0x772>
 8011b42:	4b1e      	ldr	r3, [pc, #120]	; (8011bbc <HAL_DMA_IRQHandler+0x5e0>)
 8011b44:	4299      	cmp	r1, r3
 8011b46:	d100      	bne.n	8011b4a <HAL_DMA_IRQHandler+0x56e>
 8011b48:	e103      	b.n	8011d52 <HAL_DMA_IRQHandler+0x776>
 8011b4a:	4b1d      	ldr	r3, [pc, #116]	; (8011bc0 <HAL_DMA_IRQHandler+0x5e4>)
 8011b4c:	4299      	cmp	r1, r3
 8011b4e:	d100      	bne.n	8011b52 <HAL_DMA_IRQHandler+0x576>
 8011b50:	e101      	b.n	8011d56 <HAL_DMA_IRQHandler+0x77a>
 8011b52:	4b1c      	ldr	r3, [pc, #112]	; (8011bc4 <HAL_DMA_IRQHandler+0x5e8>)
 8011b54:	18ca      	adds	r2, r1, r3
 8011b56:	4253      	negs	r3, r2
 8011b58:	415a      	adcs	r2, r3
 8011b5a:	4252      	negs	r2, r2
 8011b5c:	4b1d      	ldr	r3, [pc, #116]	; (8011bd4 <HAL_DMA_IRQHandler+0x5f8>)
 8011b5e:	4013      	ands	r3, r2
 8011b60:	2280      	movs	r2, #128	; 0x80
 8011b62:	0292      	lsls	r2, r2, #10
 8011b64:	4694      	mov	ip, r2
 8011b66:	4463      	add	r3, ip
 8011b68:	e0db      	b.n	8011d22 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011b6a:	2340      	movs	r3, #64	; 0x40
 8011b6c:	e7b8      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x504>
 8011b6e:	2380      	movs	r3, #128	; 0x80
 8011b70:	00db      	lsls	r3, r3, #3
 8011b72:	e7b5      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x504>
 8011b74:	2380      	movs	r3, #128	; 0x80
 8011b76:	01db      	lsls	r3, r3, #7
 8011b78:	e7b2      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x504>
 8011b7a:	2380      	movs	r3, #128	; 0x80
 8011b7c:	02db      	lsls	r3, r3, #11
 8011b7e:	e7af      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x504>
 8011b80:	2380      	movs	r3, #128	; 0x80
 8011b82:	03db      	lsls	r3, r3, #15
 8011b84:	e7ac      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x504>
 8011b86:	2380      	movs	r3, #128	; 0x80
 8011b88:	04db      	lsls	r3, r3, #19
 8011b8a:	e7a9      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x504>
 8011b8c:	2304      	movs	r3, #4
 8011b8e:	e7a7      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x504>
 8011b90:	2340      	movs	r3, #64	; 0x40
 8011b92:	e7a5      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x504>
 8011b94:	2380      	movs	r3, #128	; 0x80
 8011b96:	00db      	lsls	r3, r3, #3
 8011b98:	e7a2      	b.n	8011ae0 <HAL_DMA_IRQHandler+0x504>
 8011b9a:	46c0      	nop			; (mov r8, r8)
 8011b9c:	40020008 	.word	0x40020008
 8011ba0:	4002001c 	.word	0x4002001c
 8011ba4:	40020030 	.word	0x40020030
 8011ba8:	40020044 	.word	0x40020044
 8011bac:	40020058 	.word	0x40020058
 8011bb0:	4002006c 	.word	0x4002006c
 8011bb4:	40020080 	.word	0x40020080
 8011bb8:	40020408 	.word	0x40020408
 8011bbc:	4002041c 	.word	0x4002041c
 8011bc0:	40020430 	.word	0x40020430
 8011bc4:	bffdfbbc 	.word	0xbffdfbbc
 8011bc8:	fff88000 	.word	0xfff88000
 8011bcc:	40020000 	.word	0x40020000
 8011bd0:	40020400 	.word	0x40020400
 8011bd4:	fffe2000 	.word	0xfffe2000
 8011bd8:	fffc4000 	.word	0xfffc4000
 8011bdc:	4a9b      	ldr	r2, [pc, #620]	; (8011e4c <HAL_DMA_IRQHandler+0x870>)
 8011bde:	4293      	cmp	r3, r2
 8011be0:	d027      	beq.n	8011c32 <HAL_DMA_IRQHandler+0x656>
 8011be2:	4a9b      	ldr	r2, [pc, #620]	; (8011e50 <HAL_DMA_IRQHandler+0x874>)
 8011be4:	4293      	cmp	r3, r2
 8011be6:	d028      	beq.n	8011c3a <HAL_DMA_IRQHandler+0x65e>
 8011be8:	4a9a      	ldr	r2, [pc, #616]	; (8011e54 <HAL_DMA_IRQHandler+0x878>)
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d027      	beq.n	8011c3e <HAL_DMA_IRQHandler+0x662>
 8011bee:	4a9a      	ldr	r2, [pc, #616]	; (8011e58 <HAL_DMA_IRQHandler+0x87c>)
 8011bf0:	4293      	cmp	r3, r2
 8011bf2:	d027      	beq.n	8011c44 <HAL_DMA_IRQHandler+0x668>
 8011bf4:	4a99      	ldr	r2, [pc, #612]	; (8011e5c <HAL_DMA_IRQHandler+0x880>)
 8011bf6:	4293      	cmp	r3, r2
 8011bf8:	d027      	beq.n	8011c4a <HAL_DMA_IRQHandler+0x66e>
 8011bfa:	4a99      	ldr	r2, [pc, #612]	; (8011e60 <HAL_DMA_IRQHandler+0x884>)
 8011bfc:	4293      	cmp	r3, r2
 8011bfe:	d027      	beq.n	8011c50 <HAL_DMA_IRQHandler+0x674>
 8011c00:	4a98      	ldr	r2, [pc, #608]	; (8011e64 <HAL_DMA_IRQHandler+0x888>)
 8011c02:	4293      	cmp	r3, r2
 8011c04:	d027      	beq.n	8011c56 <HAL_DMA_IRQHandler+0x67a>
 8011c06:	4a98      	ldr	r2, [pc, #608]	; (8011e68 <HAL_DMA_IRQHandler+0x88c>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d027      	beq.n	8011c5c <HAL_DMA_IRQHandler+0x680>
 8011c0c:	4a97      	ldr	r2, [pc, #604]	; (8011e6c <HAL_DMA_IRQHandler+0x890>)
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	d026      	beq.n	8011c60 <HAL_DMA_IRQHandler+0x684>
 8011c12:	4a97      	ldr	r2, [pc, #604]	; (8011e70 <HAL_DMA_IRQHandler+0x894>)
 8011c14:	4293      	cmp	r3, r2
 8011c16:	d025      	beq.n	8011c64 <HAL_DMA_IRQHandler+0x688>
 8011c18:	4a96      	ldr	r2, [pc, #600]	; (8011e74 <HAL_DMA_IRQHandler+0x898>)
 8011c1a:	4694      	mov	ip, r2
 8011c1c:	4463      	add	r3, ip
 8011c1e:	425a      	negs	r2, r3
 8011c20:	4153      	adcs	r3, r2
 8011c22:	425b      	negs	r3, r3
 8011c24:	4a94      	ldr	r2, [pc, #592]	; (8011e78 <HAL_DMA_IRQHandler+0x89c>)
 8011c26:	4013      	ands	r3, r2
 8011c28:	2280      	movs	r2, #128	; 0x80
 8011c2a:	02d2      	lsls	r2, r2, #11
 8011c2c:	4694      	mov	ip, r2
 8011c2e:	4463      	add	r3, ip
 8011c30:	e000      	b.n	8011c34 <HAL_DMA_IRQHandler+0x658>
 8011c32:	2304      	movs	r3, #4
 8011c34:	4a91      	ldr	r2, [pc, #580]	; (8011e7c <HAL_DMA_IRQHandler+0x8a0>)
 8011c36:	6053      	str	r3, [r2, #4]
 8011c38:	e754      	b.n	8011ae4 <HAL_DMA_IRQHandler+0x508>
 8011c3a:	2340      	movs	r3, #64	; 0x40
 8011c3c:	e7fa      	b.n	8011c34 <HAL_DMA_IRQHandler+0x658>
 8011c3e:	2380      	movs	r3, #128	; 0x80
 8011c40:	00db      	lsls	r3, r3, #3
 8011c42:	e7f7      	b.n	8011c34 <HAL_DMA_IRQHandler+0x658>
 8011c44:	2380      	movs	r3, #128	; 0x80
 8011c46:	01db      	lsls	r3, r3, #7
 8011c48:	e7f4      	b.n	8011c34 <HAL_DMA_IRQHandler+0x658>
 8011c4a:	2380      	movs	r3, #128	; 0x80
 8011c4c:	02db      	lsls	r3, r3, #11
 8011c4e:	e7f1      	b.n	8011c34 <HAL_DMA_IRQHandler+0x658>
 8011c50:	2380      	movs	r3, #128	; 0x80
 8011c52:	03db      	lsls	r3, r3, #15
 8011c54:	e7ee      	b.n	8011c34 <HAL_DMA_IRQHandler+0x658>
 8011c56:	2380      	movs	r3, #128	; 0x80
 8011c58:	04db      	lsls	r3, r3, #19
 8011c5a:	e7eb      	b.n	8011c34 <HAL_DMA_IRQHandler+0x658>
 8011c5c:	2304      	movs	r3, #4
 8011c5e:	e7e9      	b.n	8011c34 <HAL_DMA_IRQHandler+0x658>
 8011c60:	2340      	movs	r3, #64	; 0x40
 8011c62:	e7e7      	b.n	8011c34 <HAL_DMA_IRQHandler+0x658>
 8011c64:	2380      	movs	r3, #128	; 0x80
 8011c66:	00db      	lsls	r3, r3, #3
 8011c68:	e7e4      	b.n	8011c34 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011c6a:	2302      	movs	r3, #2
 8011c6c:	4003      	ands	r3, r0
 8011c6e:	1e5a      	subs	r2, r3, #1
 8011c70:	4193      	sbcs	r3, r2
 8011c72:	b2db      	uxtb	r3, r3
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d100      	bne.n	8011c7a <HAL_DMA_IRQHandler+0x69e>
 8011c78:	e080      	b.n	8011d7c <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011c7a:	680b      	ldr	r3, [r1, #0]
 8011c7c:	079b      	lsls	r3, r3, #30
 8011c7e:	d57d      	bpl.n	8011d7c <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011c80:	680b      	ldr	r3, [r1, #0]
 8011c82:	069b      	lsls	r3, r3, #26
 8011c84:	d403      	bmi.n	8011c8e <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8011c86:	680b      	ldr	r3, [r1, #0]
 8011c88:	2202      	movs	r2, #2
 8011c8a:	4393      	bics	r3, r2
 8011c8c:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011c8e:	6823      	ldr	r3, [r4, #0]
 8011c90:	4a74      	ldr	r2, [pc, #464]	; (8011e64 <HAL_DMA_IRQHandler+0x888>)
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d800      	bhi.n	8011c98 <HAL_DMA_IRQHandler+0x6bc>
 8011c96:	e08a      	b.n	8011dae <HAL_DMA_IRQHandler+0x7d2>
 8011c98:	4a6c      	ldr	r2, [pc, #432]	; (8011e4c <HAL_DMA_IRQHandler+0x870>)
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d05e      	beq.n	8011d5c <HAL_DMA_IRQHandler+0x780>
 8011c9e:	4a6c      	ldr	r2, [pc, #432]	; (8011e50 <HAL_DMA_IRQHandler+0x874>)
 8011ca0:	4293      	cmp	r3, r2
 8011ca2:	d100      	bne.n	8011ca6 <HAL_DMA_IRQHandler+0x6ca>
 8011ca4:	e06b      	b.n	8011d7e <HAL_DMA_IRQHandler+0x7a2>
 8011ca6:	4a6b      	ldr	r2, [pc, #428]	; (8011e54 <HAL_DMA_IRQHandler+0x878>)
 8011ca8:	4293      	cmp	r3, r2
 8011caa:	d06a      	beq.n	8011d82 <HAL_DMA_IRQHandler+0x7a6>
 8011cac:	4a6a      	ldr	r2, [pc, #424]	; (8011e58 <HAL_DMA_IRQHandler+0x87c>)
 8011cae:	4293      	cmp	r3, r2
 8011cb0:	d06a      	beq.n	8011d88 <HAL_DMA_IRQHandler+0x7ac>
 8011cb2:	4a6a      	ldr	r2, [pc, #424]	; (8011e5c <HAL_DMA_IRQHandler+0x880>)
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	d06a      	beq.n	8011d8e <HAL_DMA_IRQHandler+0x7b2>
 8011cb8:	4a69      	ldr	r2, [pc, #420]	; (8011e60 <HAL_DMA_IRQHandler+0x884>)
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	d06a      	beq.n	8011d94 <HAL_DMA_IRQHandler+0x7b8>
 8011cbe:	4a69      	ldr	r2, [pc, #420]	; (8011e64 <HAL_DMA_IRQHandler+0x888>)
 8011cc0:	4293      	cmp	r3, r2
 8011cc2:	d06a      	beq.n	8011d9a <HAL_DMA_IRQHandler+0x7be>
 8011cc4:	4a68      	ldr	r2, [pc, #416]	; (8011e68 <HAL_DMA_IRQHandler+0x88c>)
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	d06a      	beq.n	8011da0 <HAL_DMA_IRQHandler+0x7c4>
 8011cca:	4a68      	ldr	r2, [pc, #416]	; (8011e6c <HAL_DMA_IRQHandler+0x890>)
 8011ccc:	4293      	cmp	r3, r2
 8011cce:	d069      	beq.n	8011da4 <HAL_DMA_IRQHandler+0x7c8>
 8011cd0:	4a67      	ldr	r2, [pc, #412]	; (8011e70 <HAL_DMA_IRQHandler+0x894>)
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d068      	beq.n	8011da8 <HAL_DMA_IRQHandler+0x7cc>
 8011cd6:	4a67      	ldr	r2, [pc, #412]	; (8011e74 <HAL_DMA_IRQHandler+0x898>)
 8011cd8:	4694      	mov	ip, r2
 8011cda:	4463      	add	r3, ip
 8011cdc:	425a      	negs	r2, r3
 8011cde:	4153      	adcs	r3, r2
 8011ce0:	425b      	negs	r3, r3
 8011ce2:	4a67      	ldr	r2, [pc, #412]	; (8011e80 <HAL_DMA_IRQHandler+0x8a4>)
 8011ce4:	4013      	ands	r3, r2
 8011ce6:	2280      	movs	r2, #128	; 0x80
 8011ce8:	0292      	lsls	r2, r2, #10
 8011cea:	4694      	mov	ip, r2
 8011cec:	4463      	add	r3, ip
 8011cee:	e036      	b.n	8011d5e <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011cf0:	2320      	movs	r3, #32
 8011cf2:	e7bb      	b.n	8011c6c <HAL_DMA_IRQHandler+0x690>
 8011cf4:	2380      	movs	r3, #128	; 0x80
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	e7b8      	b.n	8011c6c <HAL_DMA_IRQHandler+0x690>
 8011cfa:	2380      	movs	r3, #128	; 0x80
 8011cfc:	019b      	lsls	r3, r3, #6
 8011cfe:	e7b5      	b.n	8011c6c <HAL_DMA_IRQHandler+0x690>
 8011d00:	2380      	movs	r3, #128	; 0x80
 8011d02:	029b      	lsls	r3, r3, #10
 8011d04:	e7b2      	b.n	8011c6c <HAL_DMA_IRQHandler+0x690>
 8011d06:	2380      	movs	r3, #128	; 0x80
 8011d08:	039b      	lsls	r3, r3, #14
 8011d0a:	e7af      	b.n	8011c6c <HAL_DMA_IRQHandler+0x690>
 8011d0c:	2380      	movs	r3, #128	; 0x80
 8011d0e:	049b      	lsls	r3, r3, #18
 8011d10:	e7ac      	b.n	8011c6c <HAL_DMA_IRQHandler+0x690>
 8011d12:	2302      	movs	r3, #2
 8011d14:	e7aa      	b.n	8011c6c <HAL_DMA_IRQHandler+0x690>
 8011d16:	2320      	movs	r3, #32
 8011d18:	e7a8      	b.n	8011c6c <HAL_DMA_IRQHandler+0x690>
 8011d1a:	2380      	movs	r3, #128	; 0x80
 8011d1c:	009b      	lsls	r3, r3, #2
 8011d1e:	e7a5      	b.n	8011c6c <HAL_DMA_IRQHandler+0x690>
 8011d20:	2302      	movs	r3, #2
 8011d22:	4003      	ands	r3, r0
 8011d24:	1e5a      	subs	r2, r3, #1
 8011d26:	4193      	sbcs	r3, r2
 8011d28:	b2db      	uxtb	r3, r3
 8011d2a:	e7a3      	b.n	8011c74 <HAL_DMA_IRQHandler+0x698>
 8011d2c:	2320      	movs	r3, #32
 8011d2e:	e7f8      	b.n	8011d22 <HAL_DMA_IRQHandler+0x746>
 8011d30:	2380      	movs	r3, #128	; 0x80
 8011d32:	009b      	lsls	r3, r3, #2
 8011d34:	e7f5      	b.n	8011d22 <HAL_DMA_IRQHandler+0x746>
 8011d36:	2380      	movs	r3, #128	; 0x80
 8011d38:	019b      	lsls	r3, r3, #6
 8011d3a:	e7f2      	b.n	8011d22 <HAL_DMA_IRQHandler+0x746>
 8011d3c:	2380      	movs	r3, #128	; 0x80
 8011d3e:	029b      	lsls	r3, r3, #10
 8011d40:	e7ef      	b.n	8011d22 <HAL_DMA_IRQHandler+0x746>
 8011d42:	2380      	movs	r3, #128	; 0x80
 8011d44:	039b      	lsls	r3, r3, #14
 8011d46:	e7ec      	b.n	8011d22 <HAL_DMA_IRQHandler+0x746>
 8011d48:	2380      	movs	r3, #128	; 0x80
 8011d4a:	049b      	lsls	r3, r3, #18
 8011d4c:	e7e9      	b.n	8011d22 <HAL_DMA_IRQHandler+0x746>
 8011d4e:	2302      	movs	r3, #2
 8011d50:	e7e7      	b.n	8011d22 <HAL_DMA_IRQHandler+0x746>
 8011d52:	2320      	movs	r3, #32
 8011d54:	e7e5      	b.n	8011d22 <HAL_DMA_IRQHandler+0x746>
 8011d56:	2380      	movs	r3, #128	; 0x80
 8011d58:	009b      	lsls	r3, r3, #2
 8011d5a:	e7e2      	b.n	8011d22 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011d5c:	2302      	movs	r3, #2
 8011d5e:	4a49      	ldr	r2, [pc, #292]	; (8011e84 <HAL_DMA_IRQHandler+0x8a8>)
 8011d60:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8011d62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d64:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8011d66:	2321      	movs	r3, #33	; 0x21
 8011d68:	2201      	movs	r2, #1
 8011d6a:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011d6c:	3b01      	subs	r3, #1
 8011d6e:	2200      	movs	r2, #0
 8011d70:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011d72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d001      	beq.n	8011d7c <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 8011d78:	0020      	movs	r0, r4
 8011d7a:	4798      	blx	r3
}  
 8011d7c:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011d7e:	2320      	movs	r3, #32
 8011d80:	e7ed      	b.n	8011d5e <HAL_DMA_IRQHandler+0x782>
 8011d82:	2380      	movs	r3, #128	; 0x80
 8011d84:	009b      	lsls	r3, r3, #2
 8011d86:	e7ea      	b.n	8011d5e <HAL_DMA_IRQHandler+0x782>
 8011d88:	2380      	movs	r3, #128	; 0x80
 8011d8a:	019b      	lsls	r3, r3, #6
 8011d8c:	e7e7      	b.n	8011d5e <HAL_DMA_IRQHandler+0x782>
 8011d8e:	2380      	movs	r3, #128	; 0x80
 8011d90:	029b      	lsls	r3, r3, #10
 8011d92:	e7e4      	b.n	8011d5e <HAL_DMA_IRQHandler+0x782>
 8011d94:	2380      	movs	r3, #128	; 0x80
 8011d96:	039b      	lsls	r3, r3, #14
 8011d98:	e7e1      	b.n	8011d5e <HAL_DMA_IRQHandler+0x782>
 8011d9a:	2380      	movs	r3, #128	; 0x80
 8011d9c:	049b      	lsls	r3, r3, #18
 8011d9e:	e7de      	b.n	8011d5e <HAL_DMA_IRQHandler+0x782>
 8011da0:	2302      	movs	r3, #2
 8011da2:	e7dc      	b.n	8011d5e <HAL_DMA_IRQHandler+0x782>
 8011da4:	2320      	movs	r3, #32
 8011da6:	e7da      	b.n	8011d5e <HAL_DMA_IRQHandler+0x782>
 8011da8:	2380      	movs	r3, #128	; 0x80
 8011daa:	009b      	lsls	r3, r3, #2
 8011dac:	e7d7      	b.n	8011d5e <HAL_DMA_IRQHandler+0x782>
 8011dae:	4a27      	ldr	r2, [pc, #156]	; (8011e4c <HAL_DMA_IRQHandler+0x870>)
 8011db0:	4293      	cmp	r3, r2
 8011db2:	d027      	beq.n	8011e04 <HAL_DMA_IRQHandler+0x828>
 8011db4:	4a26      	ldr	r2, [pc, #152]	; (8011e50 <HAL_DMA_IRQHandler+0x874>)
 8011db6:	4293      	cmp	r3, r2
 8011db8:	d028      	beq.n	8011e0c <HAL_DMA_IRQHandler+0x830>
 8011dba:	4a26      	ldr	r2, [pc, #152]	; (8011e54 <HAL_DMA_IRQHandler+0x878>)
 8011dbc:	4293      	cmp	r3, r2
 8011dbe:	d027      	beq.n	8011e10 <HAL_DMA_IRQHandler+0x834>
 8011dc0:	4a25      	ldr	r2, [pc, #148]	; (8011e58 <HAL_DMA_IRQHandler+0x87c>)
 8011dc2:	4293      	cmp	r3, r2
 8011dc4:	d027      	beq.n	8011e16 <HAL_DMA_IRQHandler+0x83a>
 8011dc6:	4a25      	ldr	r2, [pc, #148]	; (8011e5c <HAL_DMA_IRQHandler+0x880>)
 8011dc8:	4293      	cmp	r3, r2
 8011dca:	d027      	beq.n	8011e1c <HAL_DMA_IRQHandler+0x840>
 8011dcc:	4a24      	ldr	r2, [pc, #144]	; (8011e60 <HAL_DMA_IRQHandler+0x884>)
 8011dce:	4293      	cmp	r3, r2
 8011dd0:	d027      	beq.n	8011e22 <HAL_DMA_IRQHandler+0x846>
 8011dd2:	4a24      	ldr	r2, [pc, #144]	; (8011e64 <HAL_DMA_IRQHandler+0x888>)
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d027      	beq.n	8011e28 <HAL_DMA_IRQHandler+0x84c>
 8011dd8:	4a23      	ldr	r2, [pc, #140]	; (8011e68 <HAL_DMA_IRQHandler+0x88c>)
 8011dda:	4293      	cmp	r3, r2
 8011ddc:	d027      	beq.n	8011e2e <HAL_DMA_IRQHandler+0x852>
 8011dde:	4a23      	ldr	r2, [pc, #140]	; (8011e6c <HAL_DMA_IRQHandler+0x890>)
 8011de0:	4293      	cmp	r3, r2
 8011de2:	d026      	beq.n	8011e32 <HAL_DMA_IRQHandler+0x856>
 8011de4:	4a22      	ldr	r2, [pc, #136]	; (8011e70 <HAL_DMA_IRQHandler+0x894>)
 8011de6:	4293      	cmp	r3, r2
 8011de8:	d025      	beq.n	8011e36 <HAL_DMA_IRQHandler+0x85a>
 8011dea:	4a22      	ldr	r2, [pc, #136]	; (8011e74 <HAL_DMA_IRQHandler+0x898>)
 8011dec:	4694      	mov	ip, r2
 8011dee:	4463      	add	r3, ip
 8011df0:	425a      	negs	r2, r3
 8011df2:	4153      	adcs	r3, r2
 8011df4:	425b      	negs	r3, r3
 8011df6:	4a22      	ldr	r2, [pc, #136]	; (8011e80 <HAL_DMA_IRQHandler+0x8a4>)
 8011df8:	4013      	ands	r3, r2
 8011dfa:	2280      	movs	r2, #128	; 0x80
 8011dfc:	0292      	lsls	r2, r2, #10
 8011dfe:	4694      	mov	ip, r2
 8011e00:	4463      	add	r3, ip
 8011e02:	e000      	b.n	8011e06 <HAL_DMA_IRQHandler+0x82a>
 8011e04:	2302      	movs	r3, #2
 8011e06:	4a1d      	ldr	r2, [pc, #116]	; (8011e7c <HAL_DMA_IRQHandler+0x8a0>)
 8011e08:	6053      	str	r3, [r2, #4]
 8011e0a:	e7aa      	b.n	8011d62 <HAL_DMA_IRQHandler+0x786>
 8011e0c:	2320      	movs	r3, #32
 8011e0e:	e7fa      	b.n	8011e06 <HAL_DMA_IRQHandler+0x82a>
 8011e10:	2380      	movs	r3, #128	; 0x80
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	e7f7      	b.n	8011e06 <HAL_DMA_IRQHandler+0x82a>
 8011e16:	2380      	movs	r3, #128	; 0x80
 8011e18:	019b      	lsls	r3, r3, #6
 8011e1a:	e7f4      	b.n	8011e06 <HAL_DMA_IRQHandler+0x82a>
 8011e1c:	2380      	movs	r3, #128	; 0x80
 8011e1e:	029b      	lsls	r3, r3, #10
 8011e20:	e7f1      	b.n	8011e06 <HAL_DMA_IRQHandler+0x82a>
 8011e22:	2380      	movs	r3, #128	; 0x80
 8011e24:	039b      	lsls	r3, r3, #14
 8011e26:	e7ee      	b.n	8011e06 <HAL_DMA_IRQHandler+0x82a>
 8011e28:	2380      	movs	r3, #128	; 0x80
 8011e2a:	049b      	lsls	r3, r3, #18
 8011e2c:	e7eb      	b.n	8011e06 <HAL_DMA_IRQHandler+0x82a>
 8011e2e:	2302      	movs	r3, #2
 8011e30:	e7e9      	b.n	8011e06 <HAL_DMA_IRQHandler+0x82a>
 8011e32:	2320      	movs	r3, #32
 8011e34:	e7e7      	b.n	8011e06 <HAL_DMA_IRQHandler+0x82a>
 8011e36:	2380      	movs	r3, #128	; 0x80
 8011e38:	009b      	lsls	r3, r3, #2
 8011e3a:	e7e4      	b.n	8011e06 <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011e3c:	6821      	ldr	r1, [r4, #0]
 8011e3e:	e65e      	b.n	8011afe <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011e40:	681a      	ldr	r2, [r3, #0]
 8011e42:	0712      	lsls	r2, r2, #28
 8011e44:	d500      	bpl.n	8011e48 <HAL_DMA_IRQHandler+0x86c>
 8011e46:	e49b      	b.n	8011780 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011e48:	6823      	ldr	r3, [r4, #0]
 8011e4a:	e44b      	b.n	80116e4 <HAL_DMA_IRQHandler+0x108>
 8011e4c:	40020008 	.word	0x40020008
 8011e50:	4002001c 	.word	0x4002001c
 8011e54:	40020030 	.word	0x40020030
 8011e58:	40020044 	.word	0x40020044
 8011e5c:	40020058 	.word	0x40020058
 8011e60:	4002006c 	.word	0x4002006c
 8011e64:	40020080 	.word	0x40020080
 8011e68:	40020408 	.word	0x40020408
 8011e6c:	4002041c 	.word	0x4002041c
 8011e70:	40020430 	.word	0x40020430
 8011e74:	bffdfbbc 	.word	0xbffdfbbc
 8011e78:	fffc4000 	.word	0xfffc4000
 8011e7c:	40020000 	.word	0x40020000
 8011e80:	fffe2000 	.word	0xfffe2000
 8011e84:	40020400 	.word	0x40020400

08011e88 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011e88:	4b0a      	ldr	r3, [pc, #40]	; (8011eb4 <FLASH_SetErrorCode+0x2c>)
 8011e8a:	68db      	ldr	r3, [r3, #12]
 8011e8c:	06db      	lsls	r3, r3, #27
 8011e8e:	d504      	bpl.n	8011e9a <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011e90:	4a09      	ldr	r2, [pc, #36]	; (8011eb8 <FLASH_SetErrorCode+0x30>)
 8011e92:	69d3      	ldr	r3, [r2, #28]
 8011e94:	2102      	movs	r1, #2
 8011e96:	430b      	orrs	r3, r1
 8011e98:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011e9a:	4b06      	ldr	r3, [pc, #24]	; (8011eb4 <FLASH_SetErrorCode+0x2c>)
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	075b      	lsls	r3, r3, #29
 8011ea0:	d504      	bpl.n	8011eac <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011ea2:	4a05      	ldr	r2, [pc, #20]	; (8011eb8 <FLASH_SetErrorCode+0x30>)
 8011ea4:	69d3      	ldr	r3, [r2, #28]
 8011ea6:	2101      	movs	r1, #1
 8011ea8:	430b      	orrs	r3, r1
 8011eaa:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011eac:	4b01      	ldr	r3, [pc, #4]	; (8011eb4 <FLASH_SetErrorCode+0x2c>)
 8011eae:	2214      	movs	r2, #20
 8011eb0:	60da      	str	r2, [r3, #12]
}  
 8011eb2:	4770      	bx	lr
 8011eb4:	40022000 	.word	0x40022000
 8011eb8:	200070e0 	.word	0x200070e0

08011ebc <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011ebc:	4b05      	ldr	r3, [pc, #20]	; (8011ed4 <HAL_FLASH_Unlock+0x18>)
 8011ebe:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 8011ec0:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011ec2:	061b      	lsls	r3, r3, #24
 8011ec4:	d505      	bpl.n	8011ed2 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011ec6:	4b03      	ldr	r3, [pc, #12]	; (8011ed4 <HAL_FLASH_Unlock+0x18>)
 8011ec8:	4a03      	ldr	r2, [pc, #12]	; (8011ed8 <HAL_FLASH_Unlock+0x1c>)
 8011eca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011ecc:	4a03      	ldr	r2, [pc, #12]	; (8011edc <HAL_FLASH_Unlock+0x20>)
 8011ece:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011ed0:	2000      	movs	r0, #0
}
 8011ed2:	4770      	bx	lr
 8011ed4:	40022000 	.word	0x40022000
 8011ed8:	45670123 	.word	0x45670123
 8011edc:	cdef89ab 	.word	0xcdef89ab

08011ee0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011ee0:	4a03      	ldr	r2, [pc, #12]	; (8011ef0 <HAL_FLASH_Lock+0x10>)
 8011ee2:	6913      	ldr	r3, [r2, #16]
 8011ee4:	2180      	movs	r1, #128	; 0x80
 8011ee6:	430b      	orrs	r3, r1
 8011ee8:	6113      	str	r3, [r2, #16]
}
 8011eea:	2000      	movs	r0, #0
 8011eec:	4770      	bx	lr
 8011eee:	46c0      	nop			; (mov r8, r8)
 8011ef0:	40022000 	.word	0x40022000

08011ef4 <FLASH_WaitForLastOperation>:
{
 8011ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ef6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011ef8:	f7fe fda6 	bl	8010a48 <HAL_GetTick>
 8011efc:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011efe:	4e13      	ldr	r6, [pc, #76]	; (8011f4c <FLASH_WaitForLastOperation+0x58>)
 8011f00:	2501      	movs	r5, #1
 8011f02:	68f3      	ldr	r3, [r6, #12]
 8011f04:	421d      	tst	r5, r3
 8011f06:	d00a      	beq.n	8011f1e <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8011f08:	1c63      	adds	r3, r4, #1
 8011f0a:	d0fa      	beq.n	8011f02 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011f0c:	2c00      	cmp	r4, #0
 8011f0e:	d01a      	beq.n	8011f46 <FLASH_WaitForLastOperation+0x52>
 8011f10:	f7fe fd9a 	bl	8010a48 <HAL_GetTick>
 8011f14:	1bc0      	subs	r0, r0, r7
 8011f16:	42a0      	cmp	r0, r4
 8011f18:	d9f3      	bls.n	8011f02 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8011f1a:	2003      	movs	r0, #3
 8011f1c:	e012      	b.n	8011f44 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011f1e:	4b0b      	ldr	r3, [pc, #44]	; (8011f4c <FLASH_WaitForLastOperation+0x58>)
 8011f20:	68db      	ldr	r3, [r3, #12]
 8011f22:	069b      	lsls	r3, r3, #26
 8011f24:	d502      	bpl.n	8011f2c <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011f26:	4b09      	ldr	r3, [pc, #36]	; (8011f4c <FLASH_WaitForLastOperation+0x58>)
 8011f28:	2220      	movs	r2, #32
 8011f2a:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011f2c:	4b07      	ldr	r3, [pc, #28]	; (8011f4c <FLASH_WaitForLastOperation+0x58>)
 8011f2e:	68db      	ldr	r3, [r3, #12]
 8011f30:	06db      	lsls	r3, r3, #27
 8011f32:	d404      	bmi.n	8011f3e <FLASH_WaitForLastOperation+0x4a>
 8011f34:	4b05      	ldr	r3, [pc, #20]	; (8011f4c <FLASH_WaitForLastOperation+0x58>)
 8011f36:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8011f38:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011f3a:	075b      	lsls	r3, r3, #29
 8011f3c:	d502      	bpl.n	8011f44 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8011f3e:	f7ff ffa3 	bl	8011e88 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011f42:	2001      	movs	r0, #1
}
 8011f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8011f46:	2003      	movs	r0, #3
 8011f48:	e7fc      	b.n	8011f44 <FLASH_WaitForLastOperation+0x50>
 8011f4a:	46c0      	nop			; (mov r8, r8)
 8011f4c:	40022000 	.word	0x40022000

08011f50 <HAL_FLASH_Program>:
{
 8011f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f52:	46de      	mov	lr, fp
 8011f54:	4657      	mov	r7, sl
 8011f56:	464e      	mov	r6, r9
 8011f58:	4645      	mov	r5, r8
 8011f5a:	b5e0      	push	{r5, r6, r7, lr}
 8011f5c:	b083      	sub	sp, #12
 8011f5e:	0004      	movs	r4, r0
 8011f60:	000e      	movs	r6, r1
 8011f62:	9201      	str	r2, [sp, #4]
 8011f64:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8011f66:	4b2a      	ldr	r3, [pc, #168]	; (8012010 <HAL_FLASH_Program+0xc0>)
 8011f68:	7e1b      	ldrb	r3, [r3, #24]
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d04b      	beq.n	8012006 <HAL_FLASH_Program+0xb6>
 8011f6e:	4b28      	ldr	r3, [pc, #160]	; (8012010 <HAL_FLASH_Program+0xc0>)
 8011f70:	2201      	movs	r2, #1
 8011f72:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011f74:	4827      	ldr	r0, [pc, #156]	; (8012014 <HAL_FLASH_Program+0xc4>)
 8011f76:	f7ff ffbd 	bl	8011ef4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	d139      	bne.n	8011ff2 <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011f7e:	2c01      	cmp	r4, #1
 8011f80:	d043      	beq.n	801200a <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 8011f82:	3c02      	subs	r4, #2
 8011f84:	4263      	negs	r3, r4
 8011f86:	415c      	adcs	r4, r3
 8011f88:	4264      	negs	r4, r4
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	439c      	bics	r4, r3
 8011f8e:	46a0      	mov	r8, r4
 8011f90:	3303      	adds	r3, #3
 8011f92:	469c      	mov	ip, r3
 8011f94:	44e0      	add	r8, ip
{
 8011f96:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011f98:	4b1d      	ldr	r3, [pc, #116]	; (8012010 <HAL_FLASH_Program+0xc0>)
 8011f9a:	469b      	mov	fp, r3
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011fa0:	4c1d      	ldr	r4, [pc, #116]	; (8012018 <HAL_FLASH_Program+0xc8>)
 8011fa2:	e01e      	b.n	8011fe2 <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011fa4:	2220      	movs	r2, #32
 8011fa6:	1ad2      	subs	r2, r2, r3
 8011fa8:	4649      	mov	r1, r9
 8011faa:	4091      	lsls	r1, r2
 8011fac:	000a      	movs	r2, r1
 8011fae:	9901      	ldr	r1, [sp, #4]
 8011fb0:	40d9      	lsrs	r1, r3
 8011fb2:	000b      	movs	r3, r1
 8011fb4:	4313      	orrs	r3, r2
 8011fb6:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011fb8:	465a      	mov	r2, fp
 8011fba:	4651      	mov	r1, sl
 8011fbc:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011fbe:	6922      	ldr	r2, [r4, #16]
 8011fc0:	2701      	movs	r7, #1
 8011fc2:	433a      	orrs	r2, r7
 8011fc4:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8011fc6:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011fc8:	4812      	ldr	r0, [pc, #72]	; (8012014 <HAL_FLASH_Program+0xc4>)
 8011fca:	f7ff ff93 	bl	8011ef4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011fce:	6923      	ldr	r3, [r4, #16]
 8011fd0:	43bb      	bics	r3, r7
 8011fd2:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011fd4:	2800      	cmp	r0, #0
 8011fd6:	d10c      	bne.n	8011ff2 <HAL_FLASH_Program+0xa2>
 8011fd8:	3501      	adds	r5, #1
 8011fda:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 8011fdc:	b2eb      	uxtb	r3, r5
 8011fde:	4598      	cmp	r8, r3
 8011fe0:	d907      	bls.n	8011ff2 <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011fe2:	012b      	lsls	r3, r5, #4
 8011fe4:	2220      	movs	r2, #32
 8011fe6:	4252      	negs	r2, r2
 8011fe8:	189a      	adds	r2, r3, r2
 8011fea:	d4db      	bmi.n	8011fa4 <HAL_FLASH_Program+0x54>
 8011fec:	464b      	mov	r3, r9
 8011fee:	40d3      	lsrs	r3, r2
 8011ff0:	e7e1      	b.n	8011fb6 <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 8011ff2:	4b07      	ldr	r3, [pc, #28]	; (8012010 <HAL_FLASH_Program+0xc0>)
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	761a      	strb	r2, [r3, #24]
}
 8011ff8:	b003      	add	sp, #12
 8011ffa:	bc3c      	pop	{r2, r3, r4, r5}
 8011ffc:	4690      	mov	r8, r2
 8011ffe:	4699      	mov	r9, r3
 8012000:	46a2      	mov	sl, r4
 8012002:	46ab      	mov	fp, r5
 8012004:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8012006:	2002      	movs	r0, #2
 8012008:	e7f6      	b.n	8011ff8 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 801200a:	2301      	movs	r3, #1
 801200c:	4698      	mov	r8, r3
 801200e:	e7c2      	b.n	8011f96 <HAL_FLASH_Program+0x46>
 8012010:	200070e0 	.word	0x200070e0
 8012014:	0000c350 	.word	0x0000c350
 8012018:	40022000 	.word	0x40022000

0801201c <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801201c:	4b06      	ldr	r3, [pc, #24]	; (8012038 <FLASH_MassErase+0x1c>)
 801201e:	2200      	movs	r2, #0
 8012020:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8012022:	4b06      	ldr	r3, [pc, #24]	; (801203c <FLASH_MassErase+0x20>)
 8012024:	691a      	ldr	r2, [r3, #16]
 8012026:	2104      	movs	r1, #4
 8012028:	430a      	orrs	r2, r1
 801202a:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801202c:	691a      	ldr	r2, [r3, #16]
 801202e:	313c      	adds	r1, #60	; 0x3c
 8012030:	430a      	orrs	r2, r1
 8012032:	611a      	str	r2, [r3, #16]
}
 8012034:	4770      	bx	lr
 8012036:	46c0      	nop			; (mov r8, r8)
 8012038:	200070e0 	.word	0x200070e0
 801203c:	40022000 	.word	0x40022000

08012040 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012040:	4b06      	ldr	r3, [pc, #24]	; (801205c <FLASH_PageErase+0x1c>)
 8012042:	2200      	movs	r2, #0
 8012044:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8012046:	4b06      	ldr	r3, [pc, #24]	; (8012060 <FLASH_PageErase+0x20>)
 8012048:	691a      	ldr	r2, [r3, #16]
 801204a:	2102      	movs	r1, #2
 801204c:	430a      	orrs	r2, r1
 801204e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8012050:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8012052:	691a      	ldr	r2, [r3, #16]
 8012054:	313e      	adds	r1, #62	; 0x3e
 8012056:	430a      	orrs	r2, r1
 8012058:	611a      	str	r2, [r3, #16]
}
 801205a:	4770      	bx	lr
 801205c:	200070e0 	.word	0x200070e0
 8012060:	40022000 	.word	0x40022000

08012064 <HAL_FLASHEx_Erase>:
{
 8012064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012066:	46c6      	mov	lr, r8
 8012068:	b500      	push	{lr}
 801206a:	0006      	movs	r6, r0
 801206c:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 801206e:	4b2a      	ldr	r3, [pc, #168]	; (8012118 <HAL_FLASHEx_Erase+0xb4>)
 8012070:	7e1b      	ldrb	r3, [r3, #24]
 8012072:	2b01      	cmp	r3, #1
 8012074:	d04d      	beq.n	8012112 <HAL_FLASHEx_Erase+0xae>
 8012076:	4b28      	ldr	r3, [pc, #160]	; (8012118 <HAL_FLASHEx_Erase+0xb4>)
 8012078:	2201      	movs	r2, #1
 801207a:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801207c:	6803      	ldr	r3, [r0, #0]
 801207e:	2b01      	cmp	r3, #1
 8012080:	d029      	beq.n	80120d6 <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8012082:	4826      	ldr	r0, [pc, #152]	; (801211c <HAL_FLASHEx_Erase+0xb8>)
 8012084:	f7ff ff36 	bl	8011ef4 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8012088:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801208a:	2800      	cmp	r0, #0
 801208c:	d129      	bne.n	80120e2 <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 801208e:	2301      	movs	r3, #1
 8012090:	425b      	negs	r3, r3
 8012092:	4642      	mov	r2, r8
 8012094:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8012096:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8012098:	68b3      	ldr	r3, [r6, #8]
 801209a:	02db      	lsls	r3, r3, #11
 801209c:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 801209e:	429c      	cmp	r4, r3
 80120a0:	d235      	bcs.n	801210e <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80120a2:	4f1f      	ldr	r7, [pc, #124]	; (8012120 <HAL_FLASHEx_Erase+0xbc>)
 80120a4:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 80120a6:	0020      	movs	r0, r4
 80120a8:	f7ff ffca 	bl	8012040 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80120ac:	481b      	ldr	r0, [pc, #108]	; (801211c <HAL_FLASHEx_Erase+0xb8>)
 80120ae:	f7ff ff21 	bl	8011ef4 <FLASH_WaitForLastOperation>
 80120b2:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	43ab      	bics	r3, r5
 80120b8:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 80120ba:	2800      	cmp	r0, #0
 80120bc:	d124      	bne.n	8012108 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 80120be:	2380      	movs	r3, #128	; 0x80
 80120c0:	011b      	lsls	r3, r3, #4
 80120c2:	469c      	mov	ip, r3
 80120c4:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80120c6:	68b3      	ldr	r3, [r6, #8]
 80120c8:	02db      	lsls	r3, r3, #11
 80120ca:	6871      	ldr	r1, [r6, #4]
 80120cc:	468c      	mov	ip, r1
 80120ce:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 80120d0:	42a3      	cmp	r3, r4
 80120d2:	d8e8      	bhi.n	80120a6 <HAL_FLASHEx_Erase+0x42>
 80120d4:	e005      	b.n	80120e2 <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80120d6:	4811      	ldr	r0, [pc, #68]	; (801211c <HAL_FLASHEx_Erase+0xb8>)
 80120d8:	f7ff ff0c 	bl	8011ef4 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 80120dc:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80120de:	2800      	cmp	r0, #0
 80120e0:	d006      	beq.n	80120f0 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 80120e2:	4b0d      	ldr	r3, [pc, #52]	; (8012118 <HAL_FLASHEx_Erase+0xb4>)
 80120e4:	2100      	movs	r1, #0
 80120e6:	7619      	strb	r1, [r3, #24]
}
 80120e8:	0010      	movs	r0, r2
 80120ea:	bc04      	pop	{r2}
 80120ec:	4690      	mov	r8, r2
 80120ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 80120f0:	f7ff ff94 	bl	801201c <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80120f4:	4809      	ldr	r0, [pc, #36]	; (801211c <HAL_FLASHEx_Erase+0xb8>)
 80120f6:	f7ff fefd 	bl	8011ef4 <FLASH_WaitForLastOperation>
 80120fa:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80120fc:	4908      	ldr	r1, [pc, #32]	; (8012120 <HAL_FLASHEx_Erase+0xbc>)
 80120fe:	690b      	ldr	r3, [r1, #16]
 8012100:	2004      	movs	r0, #4
 8012102:	4383      	bics	r3, r0
 8012104:	610b      	str	r3, [r1, #16]
 8012106:	e7ec      	b.n	80120e2 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8012108:	4643      	mov	r3, r8
 801210a:	601c      	str	r4, [r3, #0]
            break;
 801210c:	e7e9      	b.n	80120e2 <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 801210e:	2201      	movs	r2, #1
 8012110:	e7e7      	b.n	80120e2 <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 8012112:	2202      	movs	r2, #2
 8012114:	e7e8      	b.n	80120e8 <HAL_FLASHEx_Erase+0x84>
 8012116:	46c0      	nop			; (mov r8, r8)
 8012118:	200070e0 	.word	0x200070e0
 801211c:	0000c350 	.word	0x0000c350
 8012120:	40022000 	.word	0x40022000

08012124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8012124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012126:	46de      	mov	lr, fp
 8012128:	4657      	mov	r7, sl
 801212a:	464e      	mov	r6, r9
 801212c:	4645      	mov	r5, r8
 801212e:	b5e0      	push	{r5, r6, r7, lr}
 8012130:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8012132:	680a      	ldr	r2, [r1, #0]
 8012134:	2a00      	cmp	r2, #0
 8012136:	d100      	bne.n	801213a <HAL_GPIO_Init+0x16>
 8012138:	e0bf      	b.n	80122ba <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 801213a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 801213c:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 801213e:	2410      	movs	r4, #16
 8012140:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8012142:	3c0d      	subs	r4, #13
 8012144:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8012146:	2480      	movs	r4, #128	; 0x80
 8012148:	0564      	lsls	r4, r4, #21
 801214a:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801214c:	4c5e      	ldr	r4, [pc, #376]	; (80122c8 <HAL_GPIO_Init+0x1a4>)
 801214e:	1904      	adds	r4, r0, r4
 8012150:	1e65      	subs	r5, r4, #1
 8012152:	41ac      	sbcs	r4, r5
 8012154:	3404      	adds	r4, #4
 8012156:	46a1      	mov	r9, r4
 8012158:	e03b      	b.n	80121d2 <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 801215a:	08dc      	lsrs	r4, r3, #3
 801215c:	00a4      	lsls	r4, r4, #2
 801215e:	1904      	adds	r4, r0, r4
 8012160:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8012162:	2507      	movs	r5, #7
 8012164:	401d      	ands	r5, r3
 8012166:	00ad      	lsls	r5, r5, #2
 8012168:	220f      	movs	r2, #15
 801216a:	40aa      	lsls	r2, r5
 801216c:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 801216e:	690a      	ldr	r2, [r1, #16]
 8012170:	40aa      	lsls	r2, r5
 8012172:	0015      	movs	r5, r2
 8012174:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8012176:	6225      	str	r5, [r4, #32]
 8012178:	e035      	b.n	80121e6 <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801217a:	2500      	movs	r5, #0
 801217c:	465a      	mov	r2, fp
 801217e:	4095      	lsls	r5, r2
 8012180:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8012182:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012184:	4c51      	ldr	r4, [pc, #324]	; (80122cc <HAL_GPIO_Init+0x1a8>)
 8012186:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8012188:	9a01      	ldr	r2, [sp, #4]
 801218a:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801218c:	684a      	ldr	r2, [r1, #4]
 801218e:	03d2      	lsls	r2, r2, #15
 8012190:	d500      	bpl.n	8012194 <HAL_GPIO_Init+0x70>
 8012192:	e086      	b.n	80122a2 <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8012194:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8012196:	4f4d      	ldr	r7, [pc, #308]	; (80122cc <HAL_GPIO_Init+0x1a8>)
 8012198:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 801219a:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801219c:	684a      	ldr	r2, [r1, #4]
 801219e:	0392      	lsls	r2, r2, #14
 80121a0:	d500      	bpl.n	80121a4 <HAL_GPIO_Init+0x80>
 80121a2:	e081      	b.n	80122a8 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80121a4:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 80121a6:	4f49      	ldr	r7, [pc, #292]	; (80122cc <HAL_GPIO_Init+0x1a8>)
 80121a8:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80121aa:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80121ac:	684a      	ldr	r2, [r1, #4]
 80121ae:	02d2      	lsls	r2, r2, #11
 80121b0:	d47d      	bmi.n	80122ae <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80121b2:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 80121b4:	4f45      	ldr	r7, [pc, #276]	; (80122cc <HAL_GPIO_Init+0x1a8>)
 80121b6:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 80121b8:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80121ba:	684a      	ldr	r2, [r1, #4]
 80121bc:	0292      	lsls	r2, r2, #10
 80121be:	d479      	bmi.n	80122b4 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80121c0:	0022      	movs	r2, r4
 80121c2:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 80121c4:	4c41      	ldr	r4, [pc, #260]	; (80122cc <HAL_GPIO_Init+0x1a8>)
 80121c6:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 80121c8:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 80121ca:	680a      	ldr	r2, [r1, #0]
 80121cc:	0014      	movs	r4, r2
 80121ce:	40dc      	lsrs	r4, r3
 80121d0:	d073      	beq.n	80122ba <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80121d2:	0034      	movs	r4, r6
 80121d4:	409c      	lsls	r4, r3
 80121d6:	4022      	ands	r2, r4
 80121d8:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 80121da:	d0f5      	beq.n	80121c8 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80121dc:	684c      	ldr	r4, [r1, #4]
 80121de:	4642      	mov	r2, r8
 80121e0:	4394      	bics	r4, r2
 80121e2:	2c02      	cmp	r4, #2
 80121e4:	d0b9      	beq.n	801215a <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80121e6:	6804      	ldr	r4, [r0, #0]
 80121e8:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80121ea:	4665      	mov	r5, ip
 80121ec:	40bd      	lsls	r5, r7
 80121ee:	43ed      	mvns	r5, r5
 80121f0:	402c      	ands	r4, r5
 80121f2:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80121f4:	684c      	ldr	r4, [r1, #4]
 80121f6:	4662      	mov	r2, ip
 80121f8:	4014      	ands	r4, r2
 80121fa:	40bc      	lsls	r4, r7
 80121fc:	465a      	mov	r2, fp
 80121fe:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8012200:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012202:	684c      	ldr	r4, [r1, #4]
 8012204:	4642      	mov	r2, r8
 8012206:	4394      	bics	r4, r2
 8012208:	3c01      	subs	r4, #1
 801220a:	2c01      	cmp	r4, #1
 801220c:	d813      	bhi.n	8012236 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 801220e:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8012210:	402c      	ands	r4, r5
 8012212:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8012214:	68cc      	ldr	r4, [r1, #12]
 8012216:	40bc      	lsls	r4, r7
 8012218:	465a      	mov	r2, fp
 801221a:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 801221c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 801221e:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8012220:	0032      	movs	r2, r6
 8012222:	409a      	lsls	r2, r3
 8012224:	4394      	bics	r4, r2
 8012226:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8012228:	684a      	ldr	r2, [r1, #4]
 801222a:	0914      	lsrs	r4, r2, #4
 801222c:	4034      	ands	r4, r6
 801222e:	409c      	lsls	r4, r3
 8012230:	465a      	mov	r2, fp
 8012232:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8012234:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8012236:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8012238:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 801223a:	688d      	ldr	r5, [r1, #8]
 801223c:	40bd      	lsls	r5, r7
 801223e:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8012240:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8012242:	684a      	ldr	r2, [r1, #4]
 8012244:	4654      	mov	r4, sl
 8012246:	4222      	tst	r2, r4
 8012248:	d0be      	beq.n	80121c8 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801224a:	4c21      	ldr	r4, [pc, #132]	; (80122d0 <HAL_GPIO_Init+0x1ac>)
 801224c:	69a5      	ldr	r5, [r4, #24]
 801224e:	4335      	orrs	r5, r6
 8012250:	61a5      	str	r5, [r4, #24]
 8012252:	69a4      	ldr	r4, [r4, #24]
 8012254:	4034      	ands	r4, r6
 8012256:	9403      	str	r4, [sp, #12]
 8012258:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 801225a:	089c      	lsrs	r4, r3, #2
 801225c:	00a4      	lsls	r4, r4, #2
 801225e:	4a1d      	ldr	r2, [pc, #116]	; (80122d4 <HAL_GPIO_Init+0x1b0>)
 8012260:	4693      	mov	fp, r2
 8012262:	445c      	add	r4, fp
 8012264:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8012266:	4667      	mov	r7, ip
 8012268:	401f      	ands	r7, r3
 801226a:	00ba      	lsls	r2, r7, #2
 801226c:	4693      	mov	fp, r2
 801226e:	270f      	movs	r7, #15
 8012270:	4097      	lsls	r7, r2
 8012272:	43bd      	bics	r5, r7
 8012274:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8012276:	2590      	movs	r5, #144	; 0x90
 8012278:	05ed      	lsls	r5, r5, #23
 801227a:	42a8      	cmp	r0, r5
 801227c:	d100      	bne.n	8012280 <HAL_GPIO_Init+0x15c>
 801227e:	e77c      	b.n	801217a <HAL_GPIO_Init+0x56>
 8012280:	4d15      	ldr	r5, [pc, #84]	; (80122d8 <HAL_GPIO_Init+0x1b4>)
 8012282:	42a8      	cmp	r0, r5
 8012284:	d007      	beq.n	8012296 <HAL_GPIO_Init+0x172>
 8012286:	4d15      	ldr	r5, [pc, #84]	; (80122dc <HAL_GPIO_Init+0x1b8>)
 8012288:	42a8      	cmp	r0, r5
 801228a:	d006      	beq.n	801229a <HAL_GPIO_Init+0x176>
 801228c:	4d14      	ldr	r5, [pc, #80]	; (80122e0 <HAL_GPIO_Init+0x1bc>)
 801228e:	42a8      	cmp	r0, r5
 8012290:	d005      	beq.n	801229e <HAL_GPIO_Init+0x17a>
 8012292:	464d      	mov	r5, r9
 8012294:	e772      	b.n	801217c <HAL_GPIO_Init+0x58>
 8012296:	0035      	movs	r5, r6
 8012298:	e770      	b.n	801217c <HAL_GPIO_Init+0x58>
 801229a:	2502      	movs	r5, #2
 801229c:	e76e      	b.n	801217c <HAL_GPIO_Init+0x58>
 801229e:	4665      	mov	r5, ip
 80122a0:	e76c      	b.n	801217c <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 80122a2:	9a01      	ldr	r2, [sp, #4]
 80122a4:	4314      	orrs	r4, r2
 80122a6:	e776      	b.n	8012196 <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 80122a8:	9a01      	ldr	r2, [sp, #4]
 80122aa:	4314      	orrs	r4, r2
 80122ac:	e77b      	b.n	80121a6 <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 80122ae:	9a01      	ldr	r2, [sp, #4]
 80122b0:	4314      	orrs	r4, r2
 80122b2:	e77f      	b.n	80121b4 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 80122b4:	9a01      	ldr	r2, [sp, #4]
 80122b6:	4322      	orrs	r2, r4
 80122b8:	e784      	b.n	80121c4 <HAL_GPIO_Init+0xa0>
  } 
}
 80122ba:	b005      	add	sp, #20
 80122bc:	bc3c      	pop	{r2, r3, r4, r5}
 80122be:	4690      	mov	r8, r2
 80122c0:	4699      	mov	r9, r3
 80122c2:	46a2      	mov	sl, r4
 80122c4:	46ab      	mov	fp, r5
 80122c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122c8:	b7fff000 	.word	0xb7fff000
 80122cc:	40010400 	.word	0x40010400
 80122d0:	40021000 	.word	0x40021000
 80122d4:	40010000 	.word	0x40010000
 80122d8:	48000400 	.word	0x48000400
 80122dc:	48000800 	.word	0x48000800
 80122e0:	48000c00 	.word	0x48000c00

080122e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80122e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122e6:	46de      	mov	lr, fp
 80122e8:	4657      	mov	r7, sl
 80122ea:	464e      	mov	r6, r9
 80122ec:	4645      	mov	r5, r8
 80122ee:	b5e0      	push	{r5, r6, r7, lr}
 80122f0:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 80122f2:	2900      	cmp	r1, #0
 80122f4:	d071      	beq.n	80123da <HAL_GPIO_DeInit+0xf6>
  uint32_t position = 0x00;
 80122f6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 80122f8:	2201      	movs	r2, #1
 80122fa:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80122fc:	3202      	adds	r2, #2
 80122fe:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8012300:	3204      	adds	r2, #4
 8012302:	4693      	mov	fp, r2
 8012304:	3208      	adds	r2, #8
 8012306:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8012308:	4a37      	ldr	r2, [pc, #220]	; (80123e8 <HAL_GPIO_DeInit+0x104>)
 801230a:	1882      	adds	r2, r0, r2
 801230c:	1e54      	subs	r4, r2, #1
 801230e:	41a2      	sbcs	r2, r4
 8012310:	3204      	adds	r2, #4
 8012312:	9201      	str	r2, [sp, #4]
 8012314:	9100      	str	r1, [sp, #0]
 8012316:	e009      	b.n	801232c <HAL_GPIO_DeInit+0x48>
 8012318:	2100      	movs	r1, #0
 801231a:	4689      	mov	r9, r1
 801231c:	4649      	mov	r1, r9
 801231e:	40a9      	lsls	r1, r5
 8012320:	42b1      	cmp	r1, r6
 8012322:	d048      	beq.n	80123b6 <HAL_GPIO_DeInit+0xd2>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8012324:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8012326:	9a00      	ldr	r2, [sp, #0]
 8012328:	40da      	lsrs	r2, r3
 801232a:	d056      	beq.n	80123da <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1 << position);
 801232c:	4662      	mov	r2, ip
 801232e:	409a      	lsls	r2, r3
 8012330:	9900      	ldr	r1, [sp, #0]
 8012332:	400a      	ands	r2, r1
    if (iocurrent)
 8012334:	d0f6      	beq.n	8012324 <HAL_GPIO_DeInit+0x40>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8012336:	6804      	ldr	r4, [r0, #0]
 8012338:	005d      	lsls	r5, r3, #1
 801233a:	4646      	mov	r6, r8
 801233c:	40ae      	lsls	r6, r5
 801233e:	43f5      	mvns	r5, r6
 8012340:	402c      	ands	r4, r5
 8012342:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8012344:	08dc      	lsrs	r4, r3, #3
 8012346:	00a4      	lsls	r4, r4, #2
 8012348:	1904      	adds	r4, r0, r4
 801234a:	6a26      	ldr	r6, [r4, #32]
 801234c:	465f      	mov	r7, fp
 801234e:	401f      	ands	r7, r3
 8012350:	00bf      	lsls	r7, r7, #2
 8012352:	4651      	mov	r1, sl
 8012354:	40b9      	lsls	r1, r7
 8012356:	438e      	bics	r6, r1
 8012358:	6226      	str	r6, [r4, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801235a:	6884      	ldr	r4, [r0, #8]
 801235c:	402c      	ands	r4, r5
 801235e:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8012360:	6844      	ldr	r4, [r0, #4]
 8012362:	4666      	mov	r6, ip
 8012364:	409e      	lsls	r6, r3
 8012366:	43b4      	bics	r4, r6
 8012368:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 801236a:	68c4      	ldr	r4, [r0, #12]
 801236c:	4025      	ands	r5, r4
 801236e:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8012370:	089c      	lsrs	r4, r3, #2
 8012372:	00a4      	lsls	r4, r4, #2
 8012374:	491d      	ldr	r1, [pc, #116]	; (80123ec <HAL_GPIO_DeInit+0x108>)
 8012376:	4689      	mov	r9, r1
 8012378:	444c      	add	r4, r9
 801237a:	68a6      	ldr	r6, [r4, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 801237c:	4645      	mov	r5, r8
 801237e:	401d      	ands	r5, r3
 8012380:	00ad      	lsls	r5, r5, #2
 8012382:	4657      	mov	r7, sl
 8012384:	40af      	lsls	r7, r5
 8012386:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8012388:	2190      	movs	r1, #144	; 0x90
 801238a:	05c9      	lsls	r1, r1, #23
 801238c:	4288      	cmp	r0, r1
 801238e:	d0c3      	beq.n	8012318 <HAL_GPIO_DeInit+0x34>
 8012390:	4917      	ldr	r1, [pc, #92]	; (80123f0 <HAL_GPIO_DeInit+0x10c>)
 8012392:	4288      	cmp	r0, r1
 8012394:	d008      	beq.n	80123a8 <HAL_GPIO_DeInit+0xc4>
 8012396:	4917      	ldr	r1, [pc, #92]	; (80123f4 <HAL_GPIO_DeInit+0x110>)
 8012398:	4288      	cmp	r0, r1
 801239a:	d007      	beq.n	80123ac <HAL_GPIO_DeInit+0xc8>
 801239c:	4916      	ldr	r1, [pc, #88]	; (80123f8 <HAL_GPIO_DeInit+0x114>)
 801239e:	4288      	cmp	r0, r1
 80123a0:	d007      	beq.n	80123b2 <HAL_GPIO_DeInit+0xce>
 80123a2:	9901      	ldr	r1, [sp, #4]
 80123a4:	4689      	mov	r9, r1
 80123a6:	e7b9      	b.n	801231c <HAL_GPIO_DeInit+0x38>
 80123a8:	46e1      	mov	r9, ip
 80123aa:	e7b7      	b.n	801231c <HAL_GPIO_DeInit+0x38>
 80123ac:	2102      	movs	r1, #2
 80123ae:	4689      	mov	r9, r1
 80123b0:	e7b4      	b.n	801231c <HAL_GPIO_DeInit+0x38>
 80123b2:	46c1      	mov	r9, r8
 80123b4:	e7b2      	b.n	801231c <HAL_GPIO_DeInit+0x38>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80123b6:	68a5      	ldr	r5, [r4, #8]
 80123b8:	43bd      	bics	r5, r7
 80123ba:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80123bc:	4c0f      	ldr	r4, [pc, #60]	; (80123fc <HAL_GPIO_DeInit+0x118>)
 80123be:	6825      	ldr	r5, [r4, #0]
 80123c0:	43d2      	mvns	r2, r2
 80123c2:	4015      	ands	r5, r2
 80123c4:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80123c6:	6865      	ldr	r5, [r4, #4]
 80123c8:	4015      	ands	r5, r2
 80123ca:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80123cc:	68a5      	ldr	r5, [r4, #8]
 80123ce:	4015      	ands	r5, r2
 80123d0:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80123d2:	68e5      	ldr	r5, [r4, #12]
 80123d4:	402a      	ands	r2, r5
 80123d6:	60e2      	str	r2, [r4, #12]
 80123d8:	e7a4      	b.n	8012324 <HAL_GPIO_DeInit+0x40>
  }
}
 80123da:	b003      	add	sp, #12
 80123dc:	bc3c      	pop	{r2, r3, r4, r5}
 80123de:	4690      	mov	r8, r2
 80123e0:	4699      	mov	r9, r3
 80123e2:	46a2      	mov	sl, r4
 80123e4:	46ab      	mov	fp, r5
 80123e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123e8:	b7fff000 	.word	0xb7fff000
 80123ec:	40010000 	.word	0x40010000
 80123f0:	48000400 	.word	0x48000400
 80123f4:	48000800 	.word	0x48000800
 80123f8:	48000c00 	.word	0x48000c00
 80123fc:	40010400 	.word	0x40010400

08012400 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012400:	6900      	ldr	r0, [r0, #16]
 8012402:	4008      	ands	r0, r1
 8012404:	1e41      	subs	r1, r0, #1
 8012406:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8012408:	b2c0      	uxtb	r0, r0
  }
 801240a:	4770      	bx	lr

0801240c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801240c:	2a00      	cmp	r2, #0
 801240e:	d101      	bne.n	8012414 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8012410:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8012412:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8012414:	6181      	str	r1, [r0, #24]
 8012416:	e7fc      	b.n	8012412 <HAL_GPIO_WritePin+0x6>

08012418 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8012418:	6943      	ldr	r3, [r0, #20]
 801241a:	4059      	eors	r1, r3
 801241c:	6141      	str	r1, [r0, #20]
}
 801241e:	4770      	bx	lr

08012420 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8012420:	4770      	bx	lr
	...

08012424 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8012424:	4a03      	ldr	r2, [pc, #12]	; (8012434 <HAL_PWR_EnableBkUpAccess+0x10>)
 8012426:	6811      	ldr	r1, [r2, #0]
 8012428:	2380      	movs	r3, #128	; 0x80
 801242a:	005b      	lsls	r3, r3, #1
 801242c:	430b      	orrs	r3, r1
 801242e:	6013      	str	r3, [r2, #0]
}
 8012430:	4770      	bx	lr
 8012432:	46c0      	nop			; (mov r8, r8)
 8012434:	40007000 	.word	0x40007000

08012438 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012438:	b5f0      	push	{r4, r5, r6, r7, lr}
 801243a:	46c6      	mov	lr, r8
 801243c:	b500      	push	{lr}
 801243e:	b082      	sub	sp, #8
 8012440:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012442:	6803      	ldr	r3, [r0, #0]
 8012444:	07db      	lsls	r3, r3, #31
 8012446:	d538      	bpl.n	80124ba <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8012448:	4bbd      	ldr	r3, [pc, #756]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 801244a:	685a      	ldr	r2, [r3, #4]
 801244c:	230c      	movs	r3, #12
 801244e:	4013      	ands	r3, r2
 8012450:	2b04      	cmp	r3, #4
 8012452:	d02a      	beq.n	80124aa <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8012454:	4bba      	ldr	r3, [pc, #744]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 8012456:	685a      	ldr	r2, [r3, #4]
 8012458:	230c      	movs	r3, #12
 801245a:	4013      	ands	r3, r2
 801245c:	2b08      	cmp	r3, #8
 801245e:	d108      	bne.n	8012472 <HAL_RCC_OscConfig+0x3a>
 8012460:	4bb7      	ldr	r3, [pc, #732]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	22c0      	movs	r2, #192	; 0xc0
 8012466:	0252      	lsls	r2, r2, #9
 8012468:	4013      	ands	r3, r2
 801246a:	2280      	movs	r2, #128	; 0x80
 801246c:	0252      	lsls	r2, r2, #9
 801246e:	4293      	cmp	r3, r2
 8012470:	d01b      	beq.n	80124aa <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8012472:	4bb3      	ldr	r3, [pc, #716]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 8012474:	681a      	ldr	r2, [r3, #0]
 8012476:	49b3      	ldr	r1, [pc, #716]	; (8012744 <HAL_RCC_OscConfig+0x30c>)
 8012478:	400a      	ands	r2, r1
 801247a:	601a      	str	r2, [r3, #0]
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	49b2      	ldr	r1, [pc, #712]	; (8012748 <HAL_RCC_OscConfig+0x310>)
 8012480:	400a      	ands	r2, r1
 8012482:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012484:	f7fe fae0 	bl	8010a48 <HAL_GetTick>
 8012488:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801248a:	4ead      	ldr	r6, [pc, #692]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 801248c:	2580      	movs	r5, #128	; 0x80
 801248e:	02ad      	lsls	r5, r5, #10
 8012490:	6833      	ldr	r3, [r6, #0]
 8012492:	422b      	tst	r3, r5
 8012494:	d039      	beq.n	801250a <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012496:	f7fe fad7 	bl	8010a48 <HAL_GetTick>
 801249a:	1bc0      	subs	r0, r0, r7
 801249c:	2864      	cmp	r0, #100	; 0x64
 801249e:	d9f7      	bls.n	8012490 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 80124a0:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80124a2:	b002      	add	sp, #8
 80124a4:	bc04      	pop	{r2}
 80124a6:	4690      	mov	r8, r2
 80124a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80124aa:	4ba5      	ldr	r3, [pc, #660]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	039b      	lsls	r3, r3, #14
 80124b0:	d503      	bpl.n	80124ba <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 80124b2:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80124b4:	6863      	ldr	r3, [r4, #4]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d0f3      	beq.n	80124a2 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80124ba:	6823      	ldr	r3, [r4, #0]
 80124bc:	079b      	lsls	r3, r3, #30
 80124be:	d400      	bmi.n	80124c2 <HAL_RCC_OscConfig+0x8a>
 80124c0:	e08d      	b.n	80125de <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80124c2:	4b9f      	ldr	r3, [pc, #636]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 80124c4:	685b      	ldr	r3, [r3, #4]
 80124c6:	220c      	movs	r2, #12
 80124c8:	421a      	tst	r2, r3
 80124ca:	d077      	beq.n	80125bc <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80124cc:	4b9c      	ldr	r3, [pc, #624]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 80124ce:	685a      	ldr	r2, [r3, #4]
 80124d0:	230c      	movs	r3, #12
 80124d2:	4013      	ands	r3, r2
 80124d4:	2b08      	cmp	r3, #8
 80124d6:	d068      	beq.n	80125aa <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80124d8:	68e3      	ldr	r3, [r4, #12]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d100      	bne.n	80124e0 <HAL_RCC_OscConfig+0xa8>
 80124de:	e0a1      	b.n	8012624 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 80124e0:	4a97      	ldr	r2, [pc, #604]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 80124e2:	6813      	ldr	r3, [r2, #0]
 80124e4:	2101      	movs	r1, #1
 80124e6:	430b      	orrs	r3, r1
 80124e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80124ea:	f7fe faad 	bl	8010a48 <HAL_GetTick>
 80124ee:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80124f0:	4e93      	ldr	r6, [pc, #588]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 80124f2:	2502      	movs	r5, #2
 80124f4:	6833      	ldr	r3, [r6, #0]
 80124f6:	421d      	tst	r5, r3
 80124f8:	d000      	beq.n	80124fc <HAL_RCC_OscConfig+0xc4>
 80124fa:	e08a      	b.n	8012612 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80124fc:	f7fe faa4 	bl	8010a48 <HAL_GetTick>
 8012500:	1bc0      	subs	r0, r0, r7
 8012502:	2864      	cmp	r0, #100	; 0x64
 8012504:	d9f6      	bls.n	80124f4 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8012506:	2003      	movs	r0, #3
 8012508:	e7cb      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801250a:	6863      	ldr	r3, [r4, #4]
 801250c:	2b01      	cmp	r3, #1
 801250e:	d00b      	beq.n	8012528 <HAL_RCC_OscConfig+0xf0>
 8012510:	2b00      	cmp	r3, #0
 8012512:	d122      	bne.n	801255a <HAL_RCC_OscConfig+0x122>
 8012514:	4b8a      	ldr	r3, [pc, #552]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 8012516:	681a      	ldr	r2, [r3, #0]
 8012518:	498a      	ldr	r1, [pc, #552]	; (8012744 <HAL_RCC_OscConfig+0x30c>)
 801251a:	400a      	ands	r2, r1
 801251c:	601a      	str	r2, [r3, #0]
 801251e:	681a      	ldr	r2, [r3, #0]
 8012520:	4989      	ldr	r1, [pc, #548]	; (8012748 <HAL_RCC_OscConfig+0x310>)
 8012522:	400a      	ands	r2, r1
 8012524:	601a      	str	r2, [r3, #0]
 8012526:	e005      	b.n	8012534 <HAL_RCC_OscConfig+0xfc>
 8012528:	4a85      	ldr	r2, [pc, #532]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 801252a:	6811      	ldr	r1, [r2, #0]
 801252c:	2380      	movs	r3, #128	; 0x80
 801252e:	025b      	lsls	r3, r3, #9
 8012530:	430b      	orrs	r3, r1
 8012532:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012534:	6863      	ldr	r3, [r4, #4]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d027      	beq.n	801258a <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 801253a:	f7fe fa85 	bl	8010a48 <HAL_GetTick>
 801253e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012540:	4e7f      	ldr	r6, [pc, #508]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 8012542:	2580      	movs	r5, #128	; 0x80
 8012544:	02ad      	lsls	r5, r5, #10
 8012546:	6833      	ldr	r3, [r6, #0]
 8012548:	422b      	tst	r3, r5
 801254a:	d1b6      	bne.n	80124ba <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801254c:	f7fe fa7c 	bl	8010a48 <HAL_GetTick>
 8012550:	1bc0      	subs	r0, r0, r7
 8012552:	2864      	cmp	r0, #100	; 0x64
 8012554:	d9f7      	bls.n	8012546 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8012556:	2003      	movs	r0, #3
 8012558:	e7a3      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801255a:	2b05      	cmp	r3, #5
 801255c:	d009      	beq.n	8012572 <HAL_RCC_OscConfig+0x13a>
 801255e:	4b78      	ldr	r3, [pc, #480]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 8012560:	681a      	ldr	r2, [r3, #0]
 8012562:	4978      	ldr	r1, [pc, #480]	; (8012744 <HAL_RCC_OscConfig+0x30c>)
 8012564:	400a      	ands	r2, r1
 8012566:	601a      	str	r2, [r3, #0]
 8012568:	681a      	ldr	r2, [r3, #0]
 801256a:	4977      	ldr	r1, [pc, #476]	; (8012748 <HAL_RCC_OscConfig+0x310>)
 801256c:	400a      	ands	r2, r1
 801256e:	601a      	str	r2, [r3, #0]
 8012570:	e7e0      	b.n	8012534 <HAL_RCC_OscConfig+0xfc>
 8012572:	4b73      	ldr	r3, [pc, #460]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 8012574:	6819      	ldr	r1, [r3, #0]
 8012576:	2280      	movs	r2, #128	; 0x80
 8012578:	02d2      	lsls	r2, r2, #11
 801257a:	430a      	orrs	r2, r1
 801257c:	601a      	str	r2, [r3, #0]
 801257e:	6819      	ldr	r1, [r3, #0]
 8012580:	2280      	movs	r2, #128	; 0x80
 8012582:	0252      	lsls	r2, r2, #9
 8012584:	430a      	orrs	r2, r1
 8012586:	601a      	str	r2, [r3, #0]
 8012588:	e7d4      	b.n	8012534 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 801258a:	f7fe fa5d 	bl	8010a48 <HAL_GetTick>
 801258e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012590:	4e6b      	ldr	r6, [pc, #428]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 8012592:	2580      	movs	r5, #128	; 0x80
 8012594:	02ad      	lsls	r5, r5, #10
 8012596:	6833      	ldr	r3, [r6, #0]
 8012598:	422b      	tst	r3, r5
 801259a:	d08e      	beq.n	80124ba <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801259c:	f7fe fa54 	bl	8010a48 <HAL_GetTick>
 80125a0:	1bc0      	subs	r0, r0, r7
 80125a2:	2864      	cmp	r0, #100	; 0x64
 80125a4:	d9f7      	bls.n	8012596 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 80125a6:	2003      	movs	r0, #3
 80125a8:	e77b      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80125aa:	4b65      	ldr	r3, [pc, #404]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 80125ac:	685b      	ldr	r3, [r3, #4]
 80125ae:	22c0      	movs	r2, #192	; 0xc0
 80125b0:	0252      	lsls	r2, r2, #9
 80125b2:	4013      	ands	r3, r2
 80125b4:	2280      	movs	r2, #128	; 0x80
 80125b6:	0212      	lsls	r2, r2, #8
 80125b8:	4293      	cmp	r3, r2
 80125ba:	d18d      	bne.n	80124d8 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80125bc:	4b60      	ldr	r3, [pc, #384]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	079b      	lsls	r3, r3, #30
 80125c2:	d504      	bpl.n	80125ce <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 80125c4:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80125c6:	68e3      	ldr	r3, [r4, #12]
 80125c8:	2b01      	cmp	r3, #1
 80125ca:	d000      	beq.n	80125ce <HAL_RCC_OscConfig+0x196>
 80125cc:	e769      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80125ce:	495c      	ldr	r1, [pc, #368]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 80125d0:	680a      	ldr	r2, [r1, #0]
 80125d2:	6923      	ldr	r3, [r4, #16]
 80125d4:	00db      	lsls	r3, r3, #3
 80125d6:	20f8      	movs	r0, #248	; 0xf8
 80125d8:	4382      	bics	r2, r0
 80125da:	4313      	orrs	r3, r2
 80125dc:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80125de:	6823      	ldr	r3, [r4, #0]
 80125e0:	071b      	lsls	r3, r3, #28
 80125e2:	d547      	bpl.n	8012674 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80125e4:	6a23      	ldr	r3, [r4, #32]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d030      	beq.n	801264c <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 80125ea:	4a55      	ldr	r2, [pc, #340]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 80125ec:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80125ee:	2101      	movs	r1, #1
 80125f0:	430b      	orrs	r3, r1
 80125f2:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80125f4:	f7fe fa28 	bl	8010a48 <HAL_GetTick>
 80125f8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80125fa:	4e51      	ldr	r6, [pc, #324]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 80125fc:	2502      	movs	r5, #2
 80125fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012600:	421d      	tst	r5, r3
 8012602:	d137      	bne.n	8012674 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012604:	f7fe fa20 	bl	8010a48 <HAL_GetTick>
 8012608:	1bc0      	subs	r0, r0, r7
 801260a:	2864      	cmp	r0, #100	; 0x64
 801260c:	d9f7      	bls.n	80125fe <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 801260e:	2003      	movs	r0, #3
 8012610:	e747      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012612:	494b      	ldr	r1, [pc, #300]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 8012614:	680a      	ldr	r2, [r1, #0]
 8012616:	6923      	ldr	r3, [r4, #16]
 8012618:	00db      	lsls	r3, r3, #3
 801261a:	20f8      	movs	r0, #248	; 0xf8
 801261c:	4382      	bics	r2, r0
 801261e:	4313      	orrs	r3, r2
 8012620:	600b      	str	r3, [r1, #0]
 8012622:	e7dc      	b.n	80125de <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8012624:	4a46      	ldr	r2, [pc, #280]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 8012626:	6813      	ldr	r3, [r2, #0]
 8012628:	2101      	movs	r1, #1
 801262a:	438b      	bics	r3, r1
 801262c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801262e:	f7fe fa0b 	bl	8010a48 <HAL_GetTick>
 8012632:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012634:	4e42      	ldr	r6, [pc, #264]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 8012636:	2502      	movs	r5, #2
 8012638:	6833      	ldr	r3, [r6, #0]
 801263a:	421d      	tst	r5, r3
 801263c:	d0cf      	beq.n	80125de <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801263e:	f7fe fa03 	bl	8010a48 <HAL_GetTick>
 8012642:	1bc0      	subs	r0, r0, r7
 8012644:	2864      	cmp	r0, #100	; 0x64
 8012646:	d9f7      	bls.n	8012638 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8012648:	2003      	movs	r0, #3
 801264a:	e72a      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 801264c:	4a3c      	ldr	r2, [pc, #240]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 801264e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012650:	2101      	movs	r1, #1
 8012652:	438b      	bics	r3, r1
 8012654:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8012656:	f7fe f9f7 	bl	8010a48 <HAL_GetTick>
 801265a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801265c:	4e38      	ldr	r6, [pc, #224]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 801265e:	2502      	movs	r5, #2
 8012660:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012662:	421d      	tst	r5, r3
 8012664:	d006      	beq.n	8012674 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012666:	f7fe f9ef 	bl	8010a48 <HAL_GetTick>
 801266a:	1bc0      	subs	r0, r0, r7
 801266c:	2864      	cmp	r0, #100	; 0x64
 801266e:	d9f7      	bls.n	8012660 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 8012670:	2003      	movs	r0, #3
 8012672:	e716      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012674:	6823      	ldr	r3, [r4, #0]
 8012676:	075b      	lsls	r3, r3, #29
 8012678:	d442      	bmi.n	8012700 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 801267a:	6823      	ldr	r3, [r4, #0]
 801267c:	06db      	lsls	r3, r3, #27
 801267e:	d512      	bpl.n	80126a6 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8012680:	6963      	ldr	r3, [r4, #20]
 8012682:	2b01      	cmp	r3, #1
 8012684:	d100      	bne.n	8012688 <HAL_RCC_OscConfig+0x250>
 8012686:	e0ce      	b.n	8012826 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8012688:	3305      	adds	r3, #5
 801268a:	d000      	beq.n	801268e <HAL_RCC_OscConfig+0x256>
 801268c:	e0ec      	b.n	8012868 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 801268e:	4a2c      	ldr	r2, [pc, #176]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 8012690:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012692:	2104      	movs	r1, #4
 8012694:	438b      	bics	r3, r1
 8012696:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8012698:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801269a:	69a3      	ldr	r3, [r4, #24]
 801269c:	00db      	lsls	r3, r3, #3
 801269e:	20f8      	movs	r0, #248	; 0xf8
 80126a0:	4381      	bics	r1, r0
 80126a2:	430b      	orrs	r3, r1
 80126a4:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80126a6:	6823      	ldr	r3, [r4, #0]
 80126a8:	069b      	lsls	r3, r3, #26
 80126aa:	d400      	bmi.n	80126ae <HAL_RCC_OscConfig+0x276>
 80126ac:	e106      	b.n	80128bc <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80126ae:	4b24      	ldr	r3, [pc, #144]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 80126b0:	685a      	ldr	r2, [r3, #4]
 80126b2:	230c      	movs	r3, #12
 80126b4:	4013      	ands	r3, r2
 80126b6:	2b0c      	cmp	r3, #12
 80126b8:	d100      	bne.n	80126bc <HAL_RCC_OscConfig+0x284>
 80126ba:	e0f6      	b.n	80128aa <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80126bc:	4b20      	ldr	r3, [pc, #128]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 80126be:	685a      	ldr	r2, [r3, #4]
 80126c0:	230c      	movs	r3, #12
 80126c2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80126c4:	2b08      	cmp	r3, #8
 80126c6:	d100      	bne.n	80126ca <HAL_RCC_OscConfig+0x292>
 80126c8:	e0e7      	b.n	801289a <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80126ca:	69e3      	ldr	r3, [r4, #28]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d100      	bne.n	80126d2 <HAL_RCC_OscConfig+0x29a>
 80126d0:	e116      	b.n	8012900 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 80126d2:	4a1b      	ldr	r2, [pc, #108]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 80126d4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80126d6:	2380      	movs	r3, #128	; 0x80
 80126d8:	025b      	lsls	r3, r3, #9
 80126da:	430b      	orrs	r3, r1
 80126dc:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 80126de:	f7fe f9b3 	bl	8010a48 <HAL_GetTick>
 80126e2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80126e4:	4e16      	ldr	r6, [pc, #88]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 80126e6:	2580      	movs	r5, #128	; 0x80
 80126e8:	026d      	lsls	r5, r5, #9
 80126ea:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80126ec:	422b      	tst	r3, r5
 80126ee:	d000      	beq.n	80126f2 <HAL_RCC_OscConfig+0x2ba>
 80126f0:	e0e4      	b.n	80128bc <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80126f2:	f7fe f9a9 	bl	8010a48 <HAL_GetTick>
 80126f6:	1bc0      	subs	r0, r0, r7
 80126f8:	2864      	cmp	r0, #100	; 0x64
 80126fa:	d9f6      	bls.n	80126ea <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 80126fc:	2003      	movs	r0, #3
 80126fe:	e6d0      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8012700:	4a0f      	ldr	r2, [pc, #60]	; (8012740 <HAL_RCC_OscConfig+0x308>)
 8012702:	69d1      	ldr	r1, [r2, #28]
 8012704:	2080      	movs	r0, #128	; 0x80
 8012706:	0540      	lsls	r0, r0, #21
 8012708:	4301      	orrs	r1, r0
 801270a:	61d1      	str	r1, [r2, #28]
 801270c:	69d3      	ldr	r3, [r2, #28]
 801270e:	4003      	ands	r3, r0
 8012710:	9301      	str	r3, [sp, #4]
 8012712:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8012714:	4a0d      	ldr	r2, [pc, #52]	; (801274c <HAL_RCC_OscConfig+0x314>)
 8012716:	6811      	ldr	r1, [r2, #0]
 8012718:	2380      	movs	r3, #128	; 0x80
 801271a:	005b      	lsls	r3, r3, #1
 801271c:	430b      	orrs	r3, r1
 801271e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012720:	f7fe f992 	bl	8010a48 <HAL_GetTick>
 8012724:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012726:	4e09      	ldr	r6, [pc, #36]	; (801274c <HAL_RCC_OscConfig+0x314>)
 8012728:	2580      	movs	r5, #128	; 0x80
 801272a:	006d      	lsls	r5, r5, #1
 801272c:	6833      	ldr	r3, [r6, #0]
 801272e:	422b      	tst	r3, r5
 8012730:	d10e      	bne.n	8012750 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012732:	f7fe f989 	bl	8010a48 <HAL_GetTick>
 8012736:	1bc0      	subs	r0, r0, r7
 8012738:	2864      	cmp	r0, #100	; 0x64
 801273a:	d9f7      	bls.n	801272c <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 801273c:	2003      	movs	r0, #3
 801273e:	e6b0      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
 8012740:	40021000 	.word	0x40021000
 8012744:	fffeffff 	.word	0xfffeffff
 8012748:	fffbffff 	.word	0xfffbffff
 801274c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8012750:	4b95      	ldr	r3, [pc, #596]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 8012752:	6a1a      	ldr	r2, [r3, #32]
 8012754:	2101      	movs	r1, #1
 8012756:	438a      	bics	r2, r1
 8012758:	621a      	str	r2, [r3, #32]
 801275a:	6a1a      	ldr	r2, [r3, #32]
 801275c:	3103      	adds	r1, #3
 801275e:	438a      	bics	r2, r1
 8012760:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8012762:	f7fe f971 	bl	8010a48 <HAL_GetTick>
 8012766:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012768:	4e8f      	ldr	r6, [pc, #572]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 801276a:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801276c:	4f8f      	ldr	r7, [pc, #572]	; (80129ac <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801276e:	6a33      	ldr	r3, [r6, #32]
 8012770:	421d      	tst	r5, r3
 8012772:	d007      	beq.n	8012784 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012774:	f7fe f968 	bl	8010a48 <HAL_GetTick>
 8012778:	4643      	mov	r3, r8
 801277a:	1ac0      	subs	r0, r0, r3
 801277c:	42b8      	cmp	r0, r7
 801277e:	d9f6      	bls.n	801276e <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 8012780:	2003      	movs	r0, #3
 8012782:	e68e      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012784:	68a3      	ldr	r3, [r4, #8]
 8012786:	2b01      	cmp	r3, #1
 8012788:	d00b      	beq.n	80127a2 <HAL_RCC_OscConfig+0x36a>
 801278a:	2b00      	cmp	r3, #0
 801278c:	d123      	bne.n	80127d6 <HAL_RCC_OscConfig+0x39e>
 801278e:	4b86      	ldr	r3, [pc, #536]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 8012790:	6a1a      	ldr	r2, [r3, #32]
 8012792:	2101      	movs	r1, #1
 8012794:	438a      	bics	r2, r1
 8012796:	621a      	str	r2, [r3, #32]
 8012798:	6a1a      	ldr	r2, [r3, #32]
 801279a:	3103      	adds	r1, #3
 801279c:	438a      	bics	r2, r1
 801279e:	621a      	str	r2, [r3, #32]
 80127a0:	e004      	b.n	80127ac <HAL_RCC_OscConfig+0x374>
 80127a2:	4a81      	ldr	r2, [pc, #516]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 80127a4:	6a13      	ldr	r3, [r2, #32]
 80127a6:	2101      	movs	r1, #1
 80127a8:	430b      	orrs	r3, r1
 80127aa:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80127ac:	68a3      	ldr	r3, [r4, #8]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d027      	beq.n	8012802 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 80127b2:	f7fe f949 	bl	8010a48 <HAL_GetTick>
 80127b6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80127b8:	4e7b      	ldr	r6, [pc, #492]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 80127ba:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80127bc:	4f7b      	ldr	r7, [pc, #492]	; (80129ac <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80127be:	6a33      	ldr	r3, [r6, #32]
 80127c0:	421d      	tst	r5, r3
 80127c2:	d000      	beq.n	80127c6 <HAL_RCC_OscConfig+0x38e>
 80127c4:	e759      	b.n	801267a <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80127c6:	f7fe f93f 	bl	8010a48 <HAL_GetTick>
 80127ca:	4643      	mov	r3, r8
 80127cc:	1ac0      	subs	r0, r0, r3
 80127ce:	42b8      	cmp	r0, r7
 80127d0:	d9f5      	bls.n	80127be <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 80127d2:	2003      	movs	r0, #3
 80127d4:	e665      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80127d6:	2b05      	cmp	r3, #5
 80127d8:	d009      	beq.n	80127ee <HAL_RCC_OscConfig+0x3b6>
 80127da:	4b73      	ldr	r3, [pc, #460]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 80127dc:	6a1a      	ldr	r2, [r3, #32]
 80127de:	2101      	movs	r1, #1
 80127e0:	438a      	bics	r2, r1
 80127e2:	621a      	str	r2, [r3, #32]
 80127e4:	6a1a      	ldr	r2, [r3, #32]
 80127e6:	3103      	adds	r1, #3
 80127e8:	438a      	bics	r2, r1
 80127ea:	621a      	str	r2, [r3, #32]
 80127ec:	e7de      	b.n	80127ac <HAL_RCC_OscConfig+0x374>
 80127ee:	4b6e      	ldr	r3, [pc, #440]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 80127f0:	6a1a      	ldr	r2, [r3, #32]
 80127f2:	2104      	movs	r1, #4
 80127f4:	430a      	orrs	r2, r1
 80127f6:	621a      	str	r2, [r3, #32]
 80127f8:	6a1a      	ldr	r2, [r3, #32]
 80127fa:	3903      	subs	r1, #3
 80127fc:	430a      	orrs	r2, r1
 80127fe:	621a      	str	r2, [r3, #32]
 8012800:	e7d4      	b.n	80127ac <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8012802:	f7fe f921 	bl	8010a48 <HAL_GetTick>
 8012806:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012808:	4e67      	ldr	r6, [pc, #412]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 801280a:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801280c:	4f67      	ldr	r7, [pc, #412]	; (80129ac <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801280e:	6a33      	ldr	r3, [r6, #32]
 8012810:	421d      	tst	r5, r3
 8012812:	d100      	bne.n	8012816 <HAL_RCC_OscConfig+0x3de>
 8012814:	e731      	b.n	801267a <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012816:	f7fe f917 	bl	8010a48 <HAL_GetTick>
 801281a:	4643      	mov	r3, r8
 801281c:	1ac0      	subs	r0, r0, r3
 801281e:	42b8      	cmp	r0, r7
 8012820:	d9f5      	bls.n	801280e <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 8012822:	2003      	movs	r0, #3
 8012824:	e63d      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012826:	4b60      	ldr	r3, [pc, #384]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 8012828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801282a:	2104      	movs	r1, #4
 801282c:	430a      	orrs	r2, r1
 801282e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8012830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012832:	3903      	subs	r1, #3
 8012834:	430a      	orrs	r2, r1
 8012836:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012838:	f7fe f906 	bl	8010a48 <HAL_GetTick>
 801283c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 801283e:	4e5a      	ldr	r6, [pc, #360]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 8012840:	2502      	movs	r5, #2
 8012842:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012844:	421d      	tst	r5, r3
 8012846:	d106      	bne.n	8012856 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012848:	f7fe f8fe 	bl	8010a48 <HAL_GetTick>
 801284c:	1bc0      	subs	r0, r0, r7
 801284e:	2864      	cmp	r0, #100	; 0x64
 8012850:	d9f7      	bls.n	8012842 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8012852:	2003      	movs	r0, #3
 8012854:	e625      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8012856:	4954      	ldr	r1, [pc, #336]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 8012858:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 801285a:	69a3      	ldr	r3, [r4, #24]
 801285c:	00db      	lsls	r3, r3, #3
 801285e:	20f8      	movs	r0, #248	; 0xf8
 8012860:	4382      	bics	r2, r0
 8012862:	4313      	orrs	r3, r2
 8012864:	634b      	str	r3, [r1, #52]	; 0x34
 8012866:	e71e      	b.n	80126a6 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012868:	4b4f      	ldr	r3, [pc, #316]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 801286a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801286c:	2104      	movs	r1, #4
 801286e:	430a      	orrs	r2, r1
 8012870:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8012872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012874:	3903      	subs	r1, #3
 8012876:	438a      	bics	r2, r1
 8012878:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 801287a:	f7fe f8e5 	bl	8010a48 <HAL_GetTick>
 801287e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8012880:	4e49      	ldr	r6, [pc, #292]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 8012882:	2502      	movs	r5, #2
 8012884:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012886:	421d      	tst	r5, r3
 8012888:	d100      	bne.n	801288c <HAL_RCC_OscConfig+0x454>
 801288a:	e70c      	b.n	80126a6 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 801288c:	f7fe f8dc 	bl	8010a48 <HAL_GetTick>
 8012890:	1bc0      	subs	r0, r0, r7
 8012892:	2864      	cmp	r0, #100	; 0x64
 8012894:	d9f6      	bls.n	8012884 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 8012896:	2003      	movs	r0, #3
 8012898:	e603      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 801289a:	4b43      	ldr	r3, [pc, #268]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 801289c:	685b      	ldr	r3, [r3, #4]
 801289e:	22c0      	movs	r2, #192	; 0xc0
 80128a0:	0252      	lsls	r2, r2, #9
 80128a2:	4013      	ands	r3, r2
 80128a4:	4293      	cmp	r3, r2
 80128a6:	d000      	beq.n	80128aa <HAL_RCC_OscConfig+0x472>
 80128a8:	e70f      	b.n	80126ca <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80128aa:	4b3f      	ldr	r3, [pc, #252]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 80128ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128ae:	03db      	lsls	r3, r3, #15
 80128b0:	d504      	bpl.n	80128bc <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 80128b2:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80128b4:	69e3      	ldr	r3, [r4, #28]
 80128b6:	2b01      	cmp	r3, #1
 80128b8:	d000      	beq.n	80128bc <HAL_RCC_OscConfig+0x484>
 80128ba:	e5f2      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80128bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 80128be:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d100      	bne.n	80128c6 <HAL_RCC_OscConfig+0x48e>
 80128c4:	e5ed      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80128c6:	4a38      	ldr	r2, [pc, #224]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 80128c8:	6851      	ldr	r1, [r2, #4]
 80128ca:	220c      	movs	r2, #12
 80128cc:	400a      	ands	r2, r1
 80128ce:	2a08      	cmp	r2, #8
 80128d0:	d068      	beq.n	80129a4 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80128d2:	2b02      	cmp	r3, #2
 80128d4:	d029      	beq.n	801292a <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 80128d6:	4a34      	ldr	r2, [pc, #208]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 80128d8:	6813      	ldr	r3, [r2, #0]
 80128da:	4935      	ldr	r1, [pc, #212]	; (80129b0 <HAL_RCC_OscConfig+0x578>)
 80128dc:	400b      	ands	r3, r1
 80128de:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80128e0:	f7fe f8b2 	bl	8010a48 <HAL_GetTick>
 80128e4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80128e6:	4d30      	ldr	r5, [pc, #192]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 80128e8:	2480      	movs	r4, #128	; 0x80
 80128ea:	04a4      	lsls	r4, r4, #18
 80128ec:	682b      	ldr	r3, [r5, #0]
 80128ee:	4223      	tst	r3, r4
 80128f0:	d056      	beq.n	80129a0 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80128f2:	f7fe f8a9 	bl	8010a48 <HAL_GetTick>
 80128f6:	1b80      	subs	r0, r0, r6
 80128f8:	2864      	cmp	r0, #100	; 0x64
 80128fa:	d9f7      	bls.n	80128ec <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 80128fc:	2003      	movs	r0, #3
 80128fe:	e5d0      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8012900:	4a29      	ldr	r2, [pc, #164]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 8012902:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012904:	492b      	ldr	r1, [pc, #172]	; (80129b4 <HAL_RCC_OscConfig+0x57c>)
 8012906:	400b      	ands	r3, r1
 8012908:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801290a:	f7fe f89d 	bl	8010a48 <HAL_GetTick>
 801290e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012910:	4e25      	ldr	r6, [pc, #148]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 8012912:	2580      	movs	r5, #128	; 0x80
 8012914:	026d      	lsls	r5, r5, #9
 8012916:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012918:	422b      	tst	r3, r5
 801291a:	d0cf      	beq.n	80128bc <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801291c:	f7fe f894 	bl	8010a48 <HAL_GetTick>
 8012920:	1bc0      	subs	r0, r0, r7
 8012922:	2864      	cmp	r0, #100	; 0x64
 8012924:	d9f7      	bls.n	8012916 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8012926:	2003      	movs	r0, #3
 8012928:	e5bb      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 801292a:	4a1f      	ldr	r2, [pc, #124]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 801292c:	6813      	ldr	r3, [r2, #0]
 801292e:	4920      	ldr	r1, [pc, #128]	; (80129b0 <HAL_RCC_OscConfig+0x578>)
 8012930:	400b      	ands	r3, r1
 8012932:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012934:	f7fe f888 	bl	8010a48 <HAL_GetTick>
 8012938:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801293a:	4e1b      	ldr	r6, [pc, #108]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 801293c:	2580      	movs	r5, #128	; 0x80
 801293e:	04ad      	lsls	r5, r5, #18
 8012940:	6833      	ldr	r3, [r6, #0]
 8012942:	422b      	tst	r3, r5
 8012944:	d006      	beq.n	8012954 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012946:	f7fe f87f 	bl	8010a48 <HAL_GetTick>
 801294a:	1bc0      	subs	r0, r0, r7
 801294c:	2864      	cmp	r0, #100	; 0x64
 801294e:	d9f7      	bls.n	8012940 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8012950:	2003      	movs	r0, #3
 8012952:	e5a6      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012954:	4b14      	ldr	r3, [pc, #80]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 8012956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012958:	210f      	movs	r1, #15
 801295a:	438a      	bics	r2, r1
 801295c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801295e:	430a      	orrs	r2, r1
 8012960:	62da      	str	r2, [r3, #44]	; 0x2c
 8012962:	6859      	ldr	r1, [r3, #4]
 8012964:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012966:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012968:	4302      	orrs	r2, r0
 801296a:	4813      	ldr	r0, [pc, #76]	; (80129b8 <HAL_RCC_OscConfig+0x580>)
 801296c:	4001      	ands	r1, r0
 801296e:	430a      	orrs	r2, r1
 8012970:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8012972:	6819      	ldr	r1, [r3, #0]
 8012974:	2280      	movs	r2, #128	; 0x80
 8012976:	0452      	lsls	r2, r2, #17
 8012978:	430a      	orrs	r2, r1
 801297a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801297c:	f7fe f864 	bl	8010a48 <HAL_GetTick>
 8012980:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8012982:	4d09      	ldr	r5, [pc, #36]	; (80129a8 <HAL_RCC_OscConfig+0x570>)
 8012984:	2480      	movs	r4, #128	; 0x80
 8012986:	04a4      	lsls	r4, r4, #18
 8012988:	682b      	ldr	r3, [r5, #0]
 801298a:	4223      	tst	r3, r4
 801298c:	d106      	bne.n	801299c <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801298e:	f7fe f85b 	bl	8010a48 <HAL_GetTick>
 8012992:	1b80      	subs	r0, r0, r6
 8012994:	2864      	cmp	r0, #100	; 0x64
 8012996:	d9f7      	bls.n	8012988 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8012998:	2003      	movs	r0, #3
 801299a:	e582      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 801299c:	2000      	movs	r0, #0
 801299e:	e580      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
 80129a0:	2000      	movs	r0, #0
 80129a2:	e57e      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 80129a4:	2001      	movs	r0, #1
 80129a6:	e57c      	b.n	80124a2 <HAL_RCC_OscConfig+0x6a>
 80129a8:	40021000 	.word	0x40021000
 80129ac:	00001388 	.word	0x00001388
 80129b0:	feffffff 	.word	0xfeffffff
 80129b4:	fffeffff 	.word	0xfffeffff
 80129b8:	ffc27fff 	.word	0xffc27fff

080129bc <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80129bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129be:	46ce      	mov	lr, r9
 80129c0:	4647      	mov	r7, r8
 80129c2:	b580      	push	{r7, lr}
 80129c4:	0005      	movs	r5, r0
 80129c6:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80129c8:	4b95      	ldr	r3, [pc, #596]	; (8012c20 <HAL_RCC_ClockConfig+0x264>)
 80129ca:	681a      	ldr	r2, [r3, #0]
 80129cc:	2301      	movs	r3, #1
 80129ce:	4013      	ands	r3, r2
 80129d0:	428b      	cmp	r3, r1
 80129d2:	d300      	bcc.n	80129d6 <HAL_RCC_ClockConfig+0x1a>
 80129d4:	e089      	b.n	8012aea <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80129d6:	4992      	ldr	r1, [pc, #584]	; (8012c20 <HAL_RCC_ClockConfig+0x264>)
 80129d8:	680b      	ldr	r3, [r1, #0]
 80129da:	2201      	movs	r2, #1
 80129dc:	4393      	bics	r3, r2
 80129de:	4323      	orrs	r3, r4
 80129e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80129e2:	680b      	ldr	r3, [r1, #0]
 80129e4:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 80129e6:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80129e8:	42a2      	cmp	r2, r4
 80129ea:	d003      	beq.n	80129f4 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80129ec:	bc0c      	pop	{r2, r3}
 80129ee:	4690      	mov	r8, r2
 80129f0:	4699      	mov	r9, r3
 80129f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80129f4:	682b      	ldr	r3, [r5, #0]
 80129f6:	079b      	lsls	r3, r3, #30
 80129f8:	d506      	bpl.n	8012a08 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80129fa:	4a8a      	ldr	r2, [pc, #552]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 80129fc:	6853      	ldr	r3, [r2, #4]
 80129fe:	21f0      	movs	r1, #240	; 0xf0
 8012a00:	438b      	bics	r3, r1
 8012a02:	68a9      	ldr	r1, [r5, #8]
 8012a04:	430b      	orrs	r3, r1
 8012a06:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012a08:	682b      	ldr	r3, [r5, #0]
 8012a0a:	07db      	lsls	r3, r3, #31
 8012a0c:	d400      	bmi.n	8012a10 <HAL_RCC_ClockConfig+0x54>
 8012a0e:	e0f7      	b.n	8012c00 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012a10:	686b      	ldr	r3, [r5, #4]
 8012a12:	2b01      	cmp	r3, #1
 8012a14:	d009      	beq.n	8012a2a <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012a16:	2b02      	cmp	r3, #2
 8012a18:	d02b      	beq.n	8012a72 <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012a1a:	2b03      	cmp	r3, #3
 8012a1c:	d02f      	beq.n	8012a7e <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012a1e:	4a81      	ldr	r2, [pc, #516]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012a20:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012a22:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012a24:	0792      	lsls	r2, r2, #30
 8012a26:	d405      	bmi.n	8012a34 <HAL_RCC_ClockConfig+0x78>
 8012a28:	e7e0      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012a2a:	4a7e      	ldr	r2, [pc, #504]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012a2c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012a2e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012a30:	0392      	lsls	r2, r2, #14
 8012a32:	d5db      	bpl.n	80129ec <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012a34:	497b      	ldr	r1, [pc, #492]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012a36:	684a      	ldr	r2, [r1, #4]
 8012a38:	2003      	movs	r0, #3
 8012a3a:	4382      	bics	r2, r0
 8012a3c:	4313      	orrs	r3, r2
 8012a3e:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8012a40:	f7fe f802 	bl	8010a48 <HAL_GetTick>
 8012a44:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012a46:	686b      	ldr	r3, [r5, #4]
 8012a48:	2b01      	cmp	r3, #1
 8012a4a:	d01e      	beq.n	8012a8a <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012a4c:	2b02      	cmp	r3, #2
 8012a4e:	d02c      	beq.n	8012aaa <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012a50:	2b03      	cmp	r3, #3
 8012a52:	d03a      	beq.n	8012aca <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012a54:	4f73      	ldr	r7, [pc, #460]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012a56:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a58:	4b73      	ldr	r3, [pc, #460]	; (8012c28 <HAL_RCC_ClockConfig+0x26c>)
 8012a5a:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	421e      	tst	r6, r3
 8012a60:	d100      	bne.n	8012a64 <HAL_RCC_ClockConfig+0xa8>
 8012a62:	e0cd      	b.n	8012c00 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a64:	f7fd fff0 	bl	8010a48 <HAL_GetTick>
 8012a68:	1b00      	subs	r0, r0, r4
 8012a6a:	4540      	cmp	r0, r8
 8012a6c:	d9f6      	bls.n	8012a5c <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8012a6e:	2003      	movs	r0, #3
 8012a70:	e7bc      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012a72:	4a6c      	ldr	r2, [pc, #432]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012a74:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012a76:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012a78:	0192      	lsls	r2, r2, #6
 8012a7a:	d4db      	bmi.n	8012a34 <HAL_RCC_ClockConfig+0x78>
 8012a7c:	e7b6      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012a7e:	4a69      	ldr	r2, [pc, #420]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012a80:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8012a82:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012a84:	03d2      	lsls	r2, r2, #15
 8012a86:	d4d5      	bmi.n	8012a34 <HAL_RCC_ClockConfig+0x78>
 8012a88:	e7b0      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012a8a:	4f66      	ldr	r7, [pc, #408]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012a8c:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a8e:	4b66      	ldr	r3, [pc, #408]	; (8012c28 <HAL_RCC_ClockConfig+0x26c>)
 8012a90:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	4033      	ands	r3, r6
 8012a96:	2b04      	cmp	r3, #4
 8012a98:	d100      	bne.n	8012a9c <HAL_RCC_ClockConfig+0xe0>
 8012a9a:	e0b1      	b.n	8012c00 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a9c:	f7fd ffd4 	bl	8010a48 <HAL_GetTick>
 8012aa0:	1b00      	subs	r0, r0, r4
 8012aa2:	4540      	cmp	r0, r8
 8012aa4:	d9f5      	bls.n	8012a92 <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 8012aa6:	2003      	movs	r0, #3
 8012aa8:	e7a0      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012aaa:	4f5e      	ldr	r7, [pc, #376]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012aac:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012aae:	4b5e      	ldr	r3, [pc, #376]	; (8012c28 <HAL_RCC_ClockConfig+0x26c>)
 8012ab0:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	4033      	ands	r3, r6
 8012ab6:	2b08      	cmp	r3, #8
 8012ab8:	d100      	bne.n	8012abc <HAL_RCC_ClockConfig+0x100>
 8012aba:	e0a1      	b.n	8012c00 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012abc:	f7fd ffc4 	bl	8010a48 <HAL_GetTick>
 8012ac0:	1b00      	subs	r0, r0, r4
 8012ac2:	4540      	cmp	r0, r8
 8012ac4:	d9f5      	bls.n	8012ab2 <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 8012ac6:	2003      	movs	r0, #3
 8012ac8:	e790      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012aca:	4f56      	ldr	r7, [pc, #344]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012acc:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012ace:	4b56      	ldr	r3, [pc, #344]	; (8012c28 <HAL_RCC_ClockConfig+0x26c>)
 8012ad0:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	4033      	ands	r3, r6
 8012ad6:	2b0c      	cmp	r3, #12
 8012ad8:	d100      	bne.n	8012adc <HAL_RCC_ClockConfig+0x120>
 8012ada:	e091      	b.n	8012c00 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012adc:	f7fd ffb4 	bl	8010a48 <HAL_GetTick>
 8012ae0:	1b00      	subs	r0, r0, r4
 8012ae2:	4540      	cmp	r0, r8
 8012ae4:	d9f5      	bls.n	8012ad2 <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 8012ae6:	2003      	movs	r0, #3
 8012ae8:	e780      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012aea:	6803      	ldr	r3, [r0, #0]
 8012aec:	079b      	lsls	r3, r3, #30
 8012aee:	d506      	bpl.n	8012afe <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012af0:	4a4c      	ldr	r2, [pc, #304]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012af2:	6853      	ldr	r3, [r2, #4]
 8012af4:	21f0      	movs	r1, #240	; 0xf0
 8012af6:	438b      	bics	r3, r1
 8012af8:	6881      	ldr	r1, [r0, #8]
 8012afa:	430b      	orrs	r3, r1
 8012afc:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012afe:	682b      	ldr	r3, [r5, #0]
 8012b00:	07db      	lsls	r3, r3, #31
 8012b02:	d571      	bpl.n	8012be8 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012b04:	686b      	ldr	r3, [r5, #4]
 8012b06:	2b01      	cmp	r3, #1
 8012b08:	d009      	beq.n	8012b1e <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012b0a:	2b02      	cmp	r3, #2
 8012b0c:	d02d      	beq.n	8012b6a <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012b0e:	2b03      	cmp	r3, #3
 8012b10:	d031      	beq.n	8012b76 <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012b12:	4a44      	ldr	r2, [pc, #272]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012b14:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012b16:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012b18:	0792      	lsls	r2, r2, #30
 8012b1a:	d406      	bmi.n	8012b2a <HAL_RCC_ClockConfig+0x16e>
 8012b1c:	e766      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012b1e:	4a41      	ldr	r2, [pc, #260]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012b20:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012b22:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012b24:	0392      	lsls	r2, r2, #14
 8012b26:	d400      	bmi.n	8012b2a <HAL_RCC_ClockConfig+0x16e>
 8012b28:	e760      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012b2a:	493e      	ldr	r1, [pc, #248]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012b2c:	684a      	ldr	r2, [r1, #4]
 8012b2e:	2003      	movs	r0, #3
 8012b30:	4382      	bics	r2, r0
 8012b32:	4313      	orrs	r3, r2
 8012b34:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8012b36:	f7fd ff87 	bl	8010a48 <HAL_GetTick>
 8012b3a:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012b3c:	686b      	ldr	r3, [r5, #4]
 8012b3e:	2b01      	cmp	r3, #1
 8012b40:	d01f      	beq.n	8012b82 <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012b42:	2b02      	cmp	r3, #2
 8012b44:	d02e      	beq.n	8012ba4 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012b46:	2b03      	cmp	r3, #3
 8012b48:	d03d      	beq.n	8012bc6 <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012b4a:	4b36      	ldr	r3, [pc, #216]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012b4c:	4698      	mov	r8, r3
 8012b4e:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012b50:	4b35      	ldr	r3, [pc, #212]	; (8012c28 <HAL_RCC_ClockConfig+0x26c>)
 8012b52:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012b54:	4643      	mov	r3, r8
 8012b56:	685b      	ldr	r3, [r3, #4]
 8012b58:	421f      	tst	r7, r3
 8012b5a:	d045      	beq.n	8012be8 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012b5c:	f7fd ff74 	bl	8010a48 <HAL_GetTick>
 8012b60:	1b80      	subs	r0, r0, r6
 8012b62:	4548      	cmp	r0, r9
 8012b64:	d9f6      	bls.n	8012b54 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 8012b66:	2003      	movs	r0, #3
 8012b68:	e740      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012b6a:	4a2e      	ldr	r2, [pc, #184]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012b6c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012b6e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012b70:	0192      	lsls	r2, r2, #6
 8012b72:	d4da      	bmi.n	8012b2a <HAL_RCC_ClockConfig+0x16e>
 8012b74:	e73a      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012b76:	4a2b      	ldr	r2, [pc, #172]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012b78:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8012b7a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012b7c:	03d2      	lsls	r2, r2, #15
 8012b7e:	d4d4      	bmi.n	8012b2a <HAL_RCC_ClockConfig+0x16e>
 8012b80:	e734      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012b82:	4b28      	ldr	r3, [pc, #160]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012b84:	4698      	mov	r8, r3
 8012b86:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012b88:	4b27      	ldr	r3, [pc, #156]	; (8012c28 <HAL_RCC_ClockConfig+0x26c>)
 8012b8a:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012b8c:	4643      	mov	r3, r8
 8012b8e:	685b      	ldr	r3, [r3, #4]
 8012b90:	403b      	ands	r3, r7
 8012b92:	2b04      	cmp	r3, #4
 8012b94:	d028      	beq.n	8012be8 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012b96:	f7fd ff57 	bl	8010a48 <HAL_GetTick>
 8012b9a:	1b80      	subs	r0, r0, r6
 8012b9c:	4548      	cmp	r0, r9
 8012b9e:	d9f5      	bls.n	8012b8c <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 8012ba0:	2003      	movs	r0, #3
 8012ba2:	e723      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012ba4:	4b1f      	ldr	r3, [pc, #124]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012ba6:	4698      	mov	r8, r3
 8012ba8:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012baa:	4b1f      	ldr	r3, [pc, #124]	; (8012c28 <HAL_RCC_ClockConfig+0x26c>)
 8012bac:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012bae:	4643      	mov	r3, r8
 8012bb0:	685b      	ldr	r3, [r3, #4]
 8012bb2:	403b      	ands	r3, r7
 8012bb4:	2b08      	cmp	r3, #8
 8012bb6:	d017      	beq.n	8012be8 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012bb8:	f7fd ff46 	bl	8010a48 <HAL_GetTick>
 8012bbc:	1b80      	subs	r0, r0, r6
 8012bbe:	4548      	cmp	r0, r9
 8012bc0:	d9f5      	bls.n	8012bae <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 8012bc2:	2003      	movs	r0, #3
 8012bc4:	e712      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012bc6:	4b17      	ldr	r3, [pc, #92]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012bc8:	4698      	mov	r8, r3
 8012bca:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012bcc:	4b16      	ldr	r3, [pc, #88]	; (8012c28 <HAL_RCC_ClockConfig+0x26c>)
 8012bce:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012bd0:	4643      	mov	r3, r8
 8012bd2:	685b      	ldr	r3, [r3, #4]
 8012bd4:	403b      	ands	r3, r7
 8012bd6:	2b0c      	cmp	r3, #12
 8012bd8:	d006      	beq.n	8012be8 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012bda:	f7fd ff35 	bl	8010a48 <HAL_GetTick>
 8012bde:	1b80      	subs	r0, r0, r6
 8012be0:	4548      	cmp	r0, r9
 8012be2:	d9f5      	bls.n	8012bd0 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 8012be4:	2003      	movs	r0, #3
 8012be6:	e701      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012be8:	490d      	ldr	r1, [pc, #52]	; (8012c20 <HAL_RCC_ClockConfig+0x264>)
 8012bea:	680b      	ldr	r3, [r1, #0]
 8012bec:	2201      	movs	r2, #1
 8012bee:	4393      	bics	r3, r2
 8012bf0:	4323      	orrs	r3, r4
 8012bf2:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012bf4:	680b      	ldr	r3, [r1, #0]
 8012bf6:	401a      	ands	r2, r3
      return HAL_ERROR;
 8012bf8:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012bfa:	42a2      	cmp	r2, r4
 8012bfc:	d000      	beq.n	8012c00 <HAL_RCC_ClockConfig+0x244>
 8012bfe:	e6f5      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012c00:	682b      	ldr	r3, [r5, #0]
 8012c02:	075b      	lsls	r3, r3, #29
 8012c04:	d506      	bpl.n	8012c14 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8012c06:	4a07      	ldr	r2, [pc, #28]	; (8012c24 <HAL_RCC_ClockConfig+0x268>)
 8012c08:	6853      	ldr	r3, [r2, #4]
 8012c0a:	4908      	ldr	r1, [pc, #32]	; (8012c2c <HAL_RCC_ClockConfig+0x270>)
 8012c0c:	400b      	ands	r3, r1
 8012c0e:	68e9      	ldr	r1, [r5, #12]
 8012c10:	430b      	orrs	r3, r1
 8012c12:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8012c14:	2000      	movs	r0, #0
 8012c16:	f7fd feed 	bl	80109f4 <HAL_InitTick>
  return HAL_OK;
 8012c1a:	2000      	movs	r0, #0
 8012c1c:	e6e6      	b.n	80129ec <HAL_RCC_ClockConfig+0x30>
 8012c1e:	46c0      	nop			; (mov r8, r8)
 8012c20:	40022000 	.word	0x40022000
 8012c24:	40021000 	.word	0x40021000
 8012c28:	00001388 	.word	0x00001388
 8012c2c:	fffff8ff 	.word	0xfffff8ff

08012c30 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012c30:	b530      	push	{r4, r5, lr}
 8012c32:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012c34:	aa04      	add	r2, sp, #16
 8012c36:	4b21      	ldr	r3, [pc, #132]	; (8012cbc <HAL_RCC_GetSysClockFreq+0x8c>)
 8012c38:	0018      	movs	r0, r3
 8012c3a:	c832      	ldmia	r0!, {r1, r4, r5}
 8012c3c:	c232      	stmia	r2!, {r1, r4, r5}
 8012c3e:	0011      	movs	r1, r2
 8012c40:	6802      	ldr	r2, [r0, #0]
 8012c42:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012c44:	466a      	mov	r2, sp
 8012c46:	3310      	adds	r3, #16
 8012c48:	cb13      	ldmia	r3!, {r0, r1, r4}
 8012c4a:	c213      	stmia	r2!, {r0, r1, r4}
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8012c50:	4b1b      	ldr	r3, [pc, #108]	; (8012cc0 <HAL_RCC_GetSysClockFreq+0x90>)
 8012c52:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012c54:	200c      	movs	r0, #12
 8012c56:	4018      	ands	r0, r3
 8012c58:	2808      	cmp	r0, #8
 8012c5a:	d00a      	beq.n	8012c72 <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8012c5c:	380c      	subs	r0, #12
 8012c5e:	4243      	negs	r3, r0
 8012c60:	4158      	adcs	r0, r3
 8012c62:	4240      	negs	r0, r0
 8012c64:	4b17      	ldr	r3, [pc, #92]	; (8012cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8012c66:	4018      	ands	r0, r3
 8012c68:	4b17      	ldr	r3, [pc, #92]	; (8012cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8012c6a:	469c      	mov	ip, r3
 8012c6c:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8012c6e:	b009      	add	sp, #36	; 0x24
 8012c70:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8012c72:	0c99      	lsrs	r1, r3, #18
 8012c74:	220f      	movs	r2, #15
 8012c76:	4011      	ands	r1, r2
 8012c78:	a804      	add	r0, sp, #16
 8012c7a:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8012c7c:	4910      	ldr	r1, [pc, #64]	; (8012cc0 <HAL_RCC_GetSysClockFreq+0x90>)
 8012c7e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8012c80:	400a      	ands	r2, r1
 8012c82:	4669      	mov	r1, sp
 8012c84:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012c86:	22c0      	movs	r2, #192	; 0xc0
 8012c88:	0252      	lsls	r2, r2, #9
 8012c8a:	4013      	ands	r3, r2
 8012c8c:	2280      	movs	r2, #128	; 0x80
 8012c8e:	0252      	lsls	r2, r2, #9
 8012c90:	4293      	cmp	r3, r2
 8012c92:	d008      	beq.n	8012ca6 <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8012c94:	22c0      	movs	r2, #192	; 0xc0
 8012c96:	0252      	lsls	r2, r2, #9
 8012c98:	4293      	cmp	r3, r2
 8012c9a:	d009      	beq.n	8012cb0 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8012c9c:	480a      	ldr	r0, [pc, #40]	; (8012cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8012c9e:	f7ed fa57 	bl	8000150 <__udivsi3>
 8012ca2:	4360      	muls	r0, r4
 8012ca4:	e7e3      	b.n	8012c6e <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8012ca6:	4808      	ldr	r0, [pc, #32]	; (8012cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8012ca8:	f7ed fa52 	bl	8000150 <__udivsi3>
 8012cac:	4360      	muls	r0, r4
 8012cae:	e7de      	b.n	8012c6e <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8012cb0:	4806      	ldr	r0, [pc, #24]	; (8012ccc <HAL_RCC_GetSysClockFreq+0x9c>)
 8012cb2:	f7ed fa4d 	bl	8000150 <__udivsi3>
 8012cb6:	4360      	muls	r0, r4
 8012cb8:	e7d9      	b.n	8012c6e <HAL_RCC_GetSysClockFreq+0x3e>
 8012cba:	46c0      	nop			; (mov r8, r8)
 8012cbc:	080192c4 	.word	0x080192c4
 8012cc0:	40021000 	.word	0x40021000
 8012cc4:	02625a00 	.word	0x02625a00
 8012cc8:	007a1200 	.word	0x007a1200
 8012ccc:	02dc6c00 	.word	0x02dc6c00

08012cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012cd0:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8012cd2:	f7ff ffad 	bl	8012c30 <HAL_RCC_GetSysClockFreq>
 8012cd6:	4b05      	ldr	r3, [pc, #20]	; (8012cec <HAL_RCC_GetHCLKFreq+0x1c>)
 8012cd8:	685b      	ldr	r3, [r3, #4]
 8012cda:	061b      	lsls	r3, r3, #24
 8012cdc:	0f1b      	lsrs	r3, r3, #28
 8012cde:	4a04      	ldr	r2, [pc, #16]	; (8012cf0 <HAL_RCC_GetHCLKFreq+0x20>)
 8012ce0:	5cd3      	ldrb	r3, [r2, r3]
 8012ce2:	40d8      	lsrs	r0, r3
 8012ce4:	4b03      	ldr	r3, [pc, #12]	; (8012cf4 <HAL_RCC_GetHCLKFreq+0x24>)
 8012ce6:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8012ce8:	bd10      	pop	{r4, pc}
 8012cea:	46c0      	nop			; (mov r8, r8)
 8012cec:	40021000 	.word	0x40021000
 8012cf0:	0801ca00 	.word	0x0801ca00
 8012cf4:	200000a0 	.word	0x200000a0

08012cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012cf8:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8012cfa:	f7ff ffe9 	bl	8012cd0 <HAL_RCC_GetHCLKFreq>
 8012cfe:	4b04      	ldr	r3, [pc, #16]	; (8012d10 <HAL_RCC_GetPCLK1Freq+0x18>)
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	055b      	lsls	r3, r3, #21
 8012d04:	0f5b      	lsrs	r3, r3, #29
 8012d06:	4a03      	ldr	r2, [pc, #12]	; (8012d14 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012d08:	5cd3      	ldrb	r3, [r2, r3]
 8012d0a:	40d8      	lsrs	r0, r3
}    
 8012d0c:	bd10      	pop	{r4, pc}
 8012d0e:	46c0      	nop			; (mov r8, r8)
 8012d10:	40021000 	.word	0x40021000
 8012d14:	0801ca00 	.word	0x0801ca00

08012d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d1a:	46c6      	mov	lr, r8
 8012d1c:	b500      	push	{lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012d22:	6803      	ldr	r3, [r0, #0]
 8012d24:	03db      	lsls	r3, r3, #15
 8012d26:	d507      	bpl.n	8012d38 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012d28:	4b43      	ldr	r3, [pc, #268]	; (8012e38 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012d2a:	6a1b      	ldr	r3, [r3, #32]
 8012d2c:	6842      	ldr	r2, [r0, #4]
 8012d2e:	4053      	eors	r3, r2
 8012d30:	22c0      	movs	r2, #192	; 0xc0
 8012d32:	0092      	lsls	r2, r2, #2
 8012d34:	4213      	tst	r3, r2
 8012d36:	d136      	bne.n	8012da6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012d38:	6823      	ldr	r3, [r4, #0]
 8012d3a:	07db      	lsls	r3, r3, #31
 8012d3c:	d506      	bpl.n	8012d4c <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012d3e:	4a3e      	ldr	r2, [pc, #248]	; (8012e38 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012d40:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012d42:	2103      	movs	r1, #3
 8012d44:	438b      	bics	r3, r1
 8012d46:	68a1      	ldr	r1, [r4, #8]
 8012d48:	430b      	orrs	r3, r1
 8012d4a:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012d4c:	6823      	ldr	r3, [r4, #0]
 8012d4e:	079b      	lsls	r3, r3, #30
 8012d50:	d506      	bpl.n	8012d60 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012d52:	4a39      	ldr	r2, [pc, #228]	; (8012e38 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012d54:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012d56:	4939      	ldr	r1, [pc, #228]	; (8012e3c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8012d58:	400b      	ands	r3, r1
 8012d5a:	68e1      	ldr	r1, [r4, #12]
 8012d5c:	430b      	orrs	r3, r1
 8012d5e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8012d60:	6823      	ldr	r3, [r4, #0]
 8012d62:	035b      	lsls	r3, r3, #13
 8012d64:	d506      	bpl.n	8012d74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8012d66:	4a34      	ldr	r2, [pc, #208]	; (8012e38 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012d68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012d6a:	4935      	ldr	r1, [pc, #212]	; (8012e40 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8012d6c:	400b      	ands	r3, r1
 8012d6e:	6921      	ldr	r1, [r4, #16]
 8012d70:	430b      	orrs	r3, r1
 8012d72:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012d74:	6823      	ldr	r3, [r4, #0]
 8012d76:	069b      	lsls	r3, r3, #26
 8012d78:	d506      	bpl.n	8012d88 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012d7a:	4a2f      	ldr	r2, [pc, #188]	; (8012e38 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012d7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012d7e:	2110      	movs	r1, #16
 8012d80:	438b      	bics	r3, r1
 8012d82:	6961      	ldr	r1, [r4, #20]
 8012d84:	430b      	orrs	r3, r1
 8012d86:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8012d88:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012d8a:	6823      	ldr	r3, [r4, #0]
 8012d8c:	055b      	lsls	r3, r3, #21
 8012d8e:	d506      	bpl.n	8012d9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012d90:	4a29      	ldr	r2, [pc, #164]	; (8012e38 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012d92:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012d94:	2140      	movs	r1, #64	; 0x40
 8012d96:	438b      	bics	r3, r1
 8012d98:	69a1      	ldr	r1, [r4, #24]
 8012d9a:	430b      	orrs	r3, r1
 8012d9c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8012d9e:	b002      	add	sp, #8
 8012da0:	bc04      	pop	{r2}
 8012da2:	4690      	mov	r8, r2
 8012da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8012da6:	4a24      	ldr	r2, [pc, #144]	; (8012e38 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012da8:	69d1      	ldr	r1, [r2, #28]
 8012daa:	2080      	movs	r0, #128	; 0x80
 8012dac:	0540      	lsls	r0, r0, #21
 8012dae:	4301      	orrs	r1, r0
 8012db0:	61d1      	str	r1, [r2, #28]
 8012db2:	69d3      	ldr	r3, [r2, #28]
 8012db4:	4003      	ands	r3, r0
 8012db6:	9301      	str	r3, [sp, #4]
 8012db8:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012dba:	4a22      	ldr	r2, [pc, #136]	; (8012e44 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012dbc:	6811      	ldr	r1, [r2, #0]
 8012dbe:	2380      	movs	r3, #128	; 0x80
 8012dc0:	005b      	lsls	r3, r3, #1
 8012dc2:	430b      	orrs	r3, r1
 8012dc4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8012dc6:	f7fd fe3f 	bl	8010a48 <HAL_GetTick>
 8012dca:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8012dcc:	4e1d      	ldr	r6, [pc, #116]	; (8012e44 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012dce:	2580      	movs	r5, #128	; 0x80
 8012dd0:	006d      	lsls	r5, r5, #1
 8012dd2:	6833      	ldr	r3, [r6, #0]
 8012dd4:	422b      	tst	r3, r5
 8012dd6:	d106      	bne.n	8012de6 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012dd8:	f7fd fe36 	bl	8010a48 <HAL_GetTick>
 8012ddc:	1bc0      	subs	r0, r0, r7
 8012dde:	2864      	cmp	r0, #100	; 0x64
 8012de0:	d9f7      	bls.n	8012dd2 <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8012de2:	2003      	movs	r0, #3
 8012de4:	e7db      	b.n	8012d9e <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012de6:	4b14      	ldr	r3, [pc, #80]	; (8012e38 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012de8:	6a18      	ldr	r0, [r3, #32]
 8012dea:	4a17      	ldr	r2, [pc, #92]	; (8012e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012dec:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8012dee:	6a1d      	ldr	r5, [r3, #32]
 8012df0:	2180      	movs	r1, #128	; 0x80
 8012df2:	0249      	lsls	r1, r1, #9
 8012df4:	4329      	orrs	r1, r5
 8012df6:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012df8:	6a19      	ldr	r1, [r3, #32]
 8012dfa:	4d14      	ldr	r5, [pc, #80]	; (8012e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8012dfc:	4029      	ands	r1, r5
 8012dfe:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8012e00:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8012e02:	0783      	lsls	r3, r0, #30
 8012e04:	d407      	bmi.n	8012e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8012e06:	4a0c      	ldr	r2, [pc, #48]	; (8012e38 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012e08:	6a13      	ldr	r3, [r2, #32]
 8012e0a:	490f      	ldr	r1, [pc, #60]	; (8012e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012e0c:	400b      	ands	r3, r1
 8012e0e:	6861      	ldr	r1, [r4, #4]
 8012e10:	430b      	orrs	r3, r1
 8012e12:	6213      	str	r3, [r2, #32]
 8012e14:	e790      	b.n	8012d38 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8012e16:	f7fd fe17 	bl	8010a48 <HAL_GetTick>
 8012e1a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012e1c:	4e06      	ldr	r6, [pc, #24]	; (8012e38 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012e1e:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012e20:	4f0b      	ldr	r7, [pc, #44]	; (8012e50 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012e22:	6a33      	ldr	r3, [r6, #32]
 8012e24:	421d      	tst	r5, r3
 8012e26:	d1ee      	bne.n	8012e06 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012e28:	f7fd fe0e 	bl	8010a48 <HAL_GetTick>
 8012e2c:	4643      	mov	r3, r8
 8012e2e:	1ac0      	subs	r0, r0, r3
 8012e30:	42b8      	cmp	r0, r7
 8012e32:	d9f6      	bls.n	8012e22 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8012e34:	2003      	movs	r0, #3
 8012e36:	e7b2      	b.n	8012d9e <HAL_RCCEx_PeriphCLKConfig+0x86>
 8012e38:	40021000 	.word	0x40021000
 8012e3c:	fffcffff 	.word	0xfffcffff
 8012e40:	fff3ffff 	.word	0xfff3ffff
 8012e44:	40007000 	.word	0x40007000
 8012e48:	fffffcff 	.word	0xfffffcff
 8012e4c:	fffeffff 	.word	0xfffeffff
 8012e50:	00001388 	.word	0x00001388

08012e54 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012e54:	4770      	bx	lr

08012e56 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8012e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e58:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012e5a:	6802      	ldr	r2, [r0, #0]
 8012e5c:	68d3      	ldr	r3, [r2, #12]
 8012e5e:	21a0      	movs	r1, #160	; 0xa0
 8012e60:	438b      	bics	r3, r1
 8012e62:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8012e64:	f7fd fdf0 	bl	8010a48 <HAL_GetTick>
 8012e68:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012e6a:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012e6c:	26fa      	movs	r6, #250	; 0xfa
 8012e6e:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012e70:	6823      	ldr	r3, [r4, #0]
 8012e72:	68db      	ldr	r3, [r3, #12]
 8012e74:	421d      	tst	r5, r3
 8012e76:	d106      	bne.n	8012e86 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012e78:	f7fd fde6 	bl	8010a48 <HAL_GetTick>
 8012e7c:	1bc0      	subs	r0, r0, r7
 8012e7e:	42b0      	cmp	r0, r6
 8012e80:	d9f6      	bls.n	8012e70 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 8012e82:	2003      	movs	r0, #3
 8012e84:	e000      	b.n	8012e88 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8012e86:	2000      	movs	r0, #0
}
 8012e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012e8a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8012e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e8c:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012e8e:	6803      	ldr	r3, [r0, #0]
 8012e90:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8012e92:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012e94:	0652      	lsls	r2, r2, #25
 8012e96:	d500      	bpl.n	8012e9a <RTC_EnterInitMode+0x10>
}
 8012e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012e9a:	2201      	movs	r2, #1
 8012e9c:	4252      	negs	r2, r2
 8012e9e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8012ea0:	f7fd fdd2 	bl	8010a48 <HAL_GetTick>
 8012ea4:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012ea6:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012ea8:	26fa      	movs	r6, #250	; 0xfa
 8012eaa:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012eac:	6823      	ldr	r3, [r4, #0]
 8012eae:	68db      	ldr	r3, [r3, #12]
 8012eb0:	421d      	tst	r5, r3
 8012eb2:	d106      	bne.n	8012ec2 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012eb4:	f7fd fdc8 	bl	8010a48 <HAL_GetTick>
 8012eb8:	1bc0      	subs	r0, r0, r7
 8012eba:	42b0      	cmp	r0, r6
 8012ebc:	d9f6      	bls.n	8012eac <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8012ebe:	2003      	movs	r0, #3
 8012ec0:	e7ea      	b.n	8012e98 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8012ec2:	2000      	movs	r0, #0
 8012ec4:	e7e8      	b.n	8012e98 <RTC_EnterInitMode+0xe>
	...

08012ec8 <HAL_RTC_Init>:
{
 8012ec8:	b570      	push	{r4, r5, r6, lr}
 8012eca:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8012ecc:	d046      	beq.n	8012f5c <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8012ece:	7f43      	ldrb	r3, [r0, #29]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d038      	beq.n	8012f46 <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012ed4:	2302      	movs	r3, #2
 8012ed6:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012ed8:	6823      	ldr	r3, [r4, #0]
 8012eda:	22ca      	movs	r2, #202	; 0xca
 8012edc:	625a      	str	r2, [r3, #36]	; 0x24
 8012ede:	6823      	ldr	r3, [r4, #0]
 8012ee0:	3a77      	subs	r2, #119	; 0x77
 8012ee2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012ee4:	0020      	movs	r0, r4
 8012ee6:	f7ff ffd0 	bl	8012e8a <RTC_EnterInitMode>
 8012eea:	2800      	cmp	r0, #0
 8012eec:	d12f      	bne.n	8012f4e <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012eee:	6822      	ldr	r2, [r4, #0]
 8012ef0:	6893      	ldr	r3, [r2, #8]
 8012ef2:	491b      	ldr	r1, [pc, #108]	; (8012f60 <HAL_RTC_Init+0x98>)
 8012ef4:	400b      	ands	r3, r1
 8012ef6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012ef8:	6822      	ldr	r2, [r4, #0]
 8012efa:	6891      	ldr	r1, [r2, #8]
 8012efc:	6863      	ldr	r3, [r4, #4]
 8012efe:	6925      	ldr	r5, [r4, #16]
 8012f00:	432b      	orrs	r3, r5
 8012f02:	6965      	ldr	r5, [r4, #20]
 8012f04:	432b      	orrs	r3, r5
 8012f06:	430b      	orrs	r3, r1
 8012f08:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012f0a:	6823      	ldr	r3, [r4, #0]
 8012f0c:	68e2      	ldr	r2, [r4, #12]
 8012f0e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012f10:	6822      	ldr	r2, [r4, #0]
 8012f12:	6911      	ldr	r1, [r2, #16]
 8012f14:	68a3      	ldr	r3, [r4, #8]
 8012f16:	041b      	lsls	r3, r3, #16
 8012f18:	430b      	orrs	r3, r1
 8012f1a:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012f1c:	6822      	ldr	r2, [r4, #0]
 8012f1e:	68d3      	ldr	r3, [r2, #12]
 8012f20:	2180      	movs	r1, #128	; 0x80
 8012f22:	438b      	bics	r3, r1
 8012f24:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8012f26:	6822      	ldr	r2, [r4, #0]
 8012f28:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012f2a:	490e      	ldr	r1, [pc, #56]	; (8012f64 <HAL_RTC_Init+0x9c>)
 8012f2c:	400b      	ands	r3, r1
 8012f2e:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012f30:	6822      	ldr	r2, [r4, #0]
 8012f32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012f34:	69a1      	ldr	r1, [r4, #24]
 8012f36:	430b      	orrs	r3, r1
 8012f38:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012f3a:	6823      	ldr	r3, [r4, #0]
 8012f3c:	22ff      	movs	r2, #255	; 0xff
 8012f3e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012f40:	2301      	movs	r3, #1
 8012f42:	7763      	strb	r3, [r4, #29]
}
 8012f44:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8012f46:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8012f48:	f7ff ff84 	bl	8012e54 <HAL_RTC_MspInit>
 8012f4c:	e7c2      	b.n	8012ed4 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012f4e:	6823      	ldr	r3, [r4, #0]
 8012f50:	22ff      	movs	r2, #255	; 0xff
 8012f52:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012f54:	2304      	movs	r3, #4
 8012f56:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012f58:	2001      	movs	r0, #1
 8012f5a:	e7f3      	b.n	8012f44 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8012f5c:	2001      	movs	r0, #1
 8012f5e:	e7f1      	b.n	8012f44 <HAL_RTC_Init+0x7c>
 8012f60:	ff8fffbf 	.word	0xff8fffbf
 8012f64:	fffbffff 	.word	0xfffbffff

08012f68 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8012f68:	2809      	cmp	r0, #9
 8012f6a:	d909      	bls.n	8012f80 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8012f6c:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8012f6e:	3301      	adds	r3, #1
    Value -= 10;
 8012f70:	380a      	subs	r0, #10
 8012f72:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012f74:	2809      	cmp	r0, #9
 8012f76:	d8fa      	bhi.n	8012f6e <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012f78:	011b      	lsls	r3, r3, #4
 8012f7a:	4318      	orrs	r0, r3
 8012f7c:	b2c0      	uxtb	r0, r0
}
 8012f7e:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8012f80:	2300      	movs	r3, #0
 8012f82:	e7f9      	b.n	8012f78 <RTC_ByteToBcd2+0x10>

08012f84 <HAL_RTC_SetTime>:
{
 8012f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f86:	46c6      	mov	lr, r8
 8012f88:	b500      	push	{lr}
 8012f8a:	0004      	movs	r4, r0
 8012f8c:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8012f8e:	7f03      	ldrb	r3, [r0, #28]
 8012f90:	2b01      	cmp	r3, #1
 8012f92:	d100      	bne.n	8012f96 <HAL_RTC_SetTime+0x12>
 8012f94:	e075      	b.n	8013082 <HAL_RTC_SetTime+0xfe>
 8012f96:	2301      	movs	r3, #1
 8012f98:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012f9a:	3301      	adds	r3, #1
 8012f9c:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8012f9e:	2a00      	cmp	r2, #0
 8012fa0:	d144      	bne.n	801302c <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012fa2:	6803      	ldr	r3, [r0, #0]
 8012fa4:	689b      	ldr	r3, [r3, #8]
 8012fa6:	065b      	lsls	r3, r3, #25
 8012fa8:	d401      	bmi.n	8012fae <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8012faa:	2300      	movs	r3, #0
 8012fac:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012fae:	7830      	ldrb	r0, [r6, #0]
 8012fb0:	f7ff ffda 	bl	8012f68 <RTC_ByteToBcd2>
 8012fb4:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012fb6:	7870      	ldrb	r0, [r6, #1]
 8012fb8:	f7ff ffd6 	bl	8012f68 <RTC_ByteToBcd2>
 8012fbc:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012fbe:	78b0      	ldrb	r0, [r6, #2]
 8012fc0:	f7ff ffd2 	bl	8012f68 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8012fc4:	7a35      	ldrb	r5, [r6, #8]
 8012fc6:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012fc8:	4305      	orrs	r5, r0
 8012fca:	4643      	mov	r3, r8
 8012fcc:	0418      	lsls	r0, r3, #16
 8012fce:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012fd0:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012fd2:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012fd4:	6823      	ldr	r3, [r4, #0]
 8012fd6:	22ca      	movs	r2, #202	; 0xca
 8012fd8:	625a      	str	r2, [r3, #36]	; 0x24
 8012fda:	6823      	ldr	r3, [r4, #0]
 8012fdc:	3a77      	subs	r2, #119	; 0x77
 8012fde:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012fe0:	0020      	movs	r0, r4
 8012fe2:	f7ff ff52 	bl	8012e8a <RTC_EnterInitMode>
 8012fe6:	1e07      	subs	r7, r0, #0
 8012fe8:	d131      	bne.n	801304e <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012fea:	6823      	ldr	r3, [r4, #0]
 8012fec:	4826      	ldr	r0, [pc, #152]	; (8013088 <HAL_RTC_SetTime+0x104>)
 8012fee:	4005      	ands	r5, r0
 8012ff0:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012ff2:	6822      	ldr	r2, [r4, #0]
 8012ff4:	6893      	ldr	r3, [r2, #8]
 8012ff6:	4925      	ldr	r1, [pc, #148]	; (801308c <HAL_RTC_SetTime+0x108>)
 8012ff8:	400b      	ands	r3, r1
 8012ffa:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012ffc:	6822      	ldr	r2, [r4, #0]
 8012ffe:	6891      	ldr	r1, [r2, #8]
 8013000:	68f3      	ldr	r3, [r6, #12]
 8013002:	6930      	ldr	r0, [r6, #16]
 8013004:	4303      	orrs	r3, r0
 8013006:	430b      	orrs	r3, r1
 8013008:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801300a:	6822      	ldr	r2, [r4, #0]
 801300c:	68d3      	ldr	r3, [r2, #12]
 801300e:	2180      	movs	r1, #128	; 0x80
 8013010:	438b      	bics	r3, r1
 8013012:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8013014:	6823      	ldr	r3, [r4, #0]
 8013016:	689b      	ldr	r3, [r3, #8]
 8013018:	069b      	lsls	r3, r3, #26
 801301a:	d524      	bpl.n	8013066 <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801301c:	6823      	ldr	r3, [r4, #0]
 801301e:	22ff      	movs	r2, #255	; 0xff
 8013020:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8013022:	2301      	movs	r3, #1
 8013024:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8013026:	2300      	movs	r3, #0
 8013028:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 801302a:	e018      	b.n	801305e <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801302c:	6803      	ldr	r3, [r0, #0]
 801302e:	689b      	ldr	r3, [r3, #8]
 8013030:	065b      	lsls	r3, r3, #25
 8013032:	d401      	bmi.n	8013038 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8013034:	2300      	movs	r3, #0
 8013036:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013038:	7835      	ldrb	r5, [r6, #0]
 801303a:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 801303c:	7870      	ldrb	r0, [r6, #1]
 801303e:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013040:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8013042:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8013044:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8013046:	7a30      	ldrb	r0, [r6, #8]
 8013048:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801304a:	4305      	orrs	r5, r0
 801304c:	e7c2      	b.n	8012fd4 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	22ff      	movs	r2, #255	; 0xff
 8013052:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013054:	2304      	movs	r3, #4
 8013056:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8013058:	2300      	movs	r3, #0
 801305a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 801305c:	2701      	movs	r7, #1
}
 801305e:	0038      	movs	r0, r7
 8013060:	bc04      	pop	{r2}
 8013062:	4690      	mov	r8, r2
 8013064:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013066:	0020      	movs	r0, r4
 8013068:	f7ff fef5 	bl	8012e56 <HAL_RTC_WaitForSynchro>
 801306c:	2800      	cmp	r0, #0
 801306e:	d0d5      	beq.n	801301c <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8013070:	6823      	ldr	r3, [r4, #0]
 8013072:	22ff      	movs	r2, #255	; 0xff
 8013074:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8013076:	2304      	movs	r3, #4
 8013078:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 801307a:	2300      	movs	r3, #0
 801307c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 801307e:	2701      	movs	r7, #1
 8013080:	e7ed      	b.n	801305e <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8013082:	2702      	movs	r7, #2
 8013084:	e7eb      	b.n	801305e <HAL_RTC_SetTime+0xda>
 8013086:	46c0      	nop			; (mov r8, r8)
 8013088:	007f7f7f 	.word	0x007f7f7f
 801308c:	fffbffff 	.word	0xfffbffff

08013090 <HAL_RTC_SetDate>:
{
 8013090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013092:	46c6      	mov	lr, r8
 8013094:	b500      	push	{lr}
 8013096:	0004      	movs	r4, r0
 8013098:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 801309a:	7f03      	ldrb	r3, [r0, #28]
 801309c:	2b01      	cmp	r3, #1
 801309e:	d03a      	beq.n	8013116 <HAL_RTC_SetDate+0x86>
 80130a0:	2301      	movs	r3, #1
 80130a2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80130a4:	3301      	adds	r3, #1
 80130a6:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80130a8:	2a00      	cmp	r2, #0
 80130aa:	d136      	bne.n	801311a <HAL_RTC_SetDate+0x8a>
 80130ac:	784b      	ldrb	r3, [r1, #1]
 80130ae:	06da      	lsls	r2, r3, #27
 80130b0:	d503      	bpl.n	80130ba <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 80130b2:	2210      	movs	r2, #16
 80130b4:	4393      	bics	r3, r2
 80130b6:	330a      	adds	r3, #10
 80130b8:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80130ba:	78f0      	ldrb	r0, [r6, #3]
 80130bc:	f7ff ff54 	bl	8012f68 <RTC_ByteToBcd2>
 80130c0:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80130c2:	7870      	ldrb	r0, [r6, #1]
 80130c4:	f7ff ff50 	bl	8012f68 <RTC_ByteToBcd2>
 80130c8:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80130ca:	78b0      	ldrb	r0, [r6, #2]
 80130cc:	f7ff ff4c 	bl	8012f68 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 80130d0:	7835      	ldrb	r5, [r6, #0]
 80130d2:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80130d4:	4305      	orrs	r5, r0
 80130d6:	4643      	mov	r3, r8
 80130d8:	0418      	lsls	r0, r3, #16
 80130da:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80130dc:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80130de:	433d      	orrs	r5, r7
 80130e0:	e025      	b.n	801312e <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80130e2:	6823      	ldr	r3, [r4, #0]
 80130e4:	22ff      	movs	r2, #255	; 0xff
 80130e6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80130e8:	2304      	movs	r3, #4
 80130ea:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80130ec:	2300      	movs	r3, #0
 80130ee:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80130f0:	2601      	movs	r6, #1
}
 80130f2:	0030      	movs	r0, r6
 80130f4:	bc04      	pop	{r2}
 80130f6:	4690      	mov	r8, r2
 80130f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80130fa:	0020      	movs	r0, r4
 80130fc:	f7ff feab 	bl	8012e56 <HAL_RTC_WaitForSynchro>
 8013100:	2800      	cmp	r0, #0
 8013102:	d02c      	beq.n	801315e <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8013104:	6823      	ldr	r3, [r4, #0]
 8013106:	22ff      	movs	r2, #255	; 0xff
 8013108:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801310a:	2304      	movs	r3, #4
 801310c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 801310e:	2300      	movs	r3, #0
 8013110:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8013112:	2601      	movs	r6, #1
 8013114:	e7ed      	b.n	80130f2 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8013116:	2602      	movs	r6, #2
 8013118:	e7eb      	b.n	80130f2 <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801311a:	78cd      	ldrb	r5, [r1, #3]
 801311c:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 801311e:	7848      	ldrb	r0, [r1, #1]
 8013120:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013122:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8013124:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8013126:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8013128:	7808      	ldrb	r0, [r1, #0]
 801312a:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801312c:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801312e:	6823      	ldr	r3, [r4, #0]
 8013130:	22ca      	movs	r2, #202	; 0xca
 8013132:	625a      	str	r2, [r3, #36]	; 0x24
 8013134:	6823      	ldr	r3, [r4, #0]
 8013136:	3a77      	subs	r2, #119	; 0x77
 8013138:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801313a:	0020      	movs	r0, r4
 801313c:	f7ff fea5 	bl	8012e8a <RTC_EnterInitMode>
 8013140:	1e06      	subs	r6, r0, #0
 8013142:	d1ce      	bne.n	80130e2 <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8013144:	6823      	ldr	r3, [r4, #0]
 8013146:	480a      	ldr	r0, [pc, #40]	; (8013170 <HAL_RTC_SetDate+0xe0>)
 8013148:	4005      	ands	r5, r0
 801314a:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801314c:	6822      	ldr	r2, [r4, #0]
 801314e:	68d3      	ldr	r3, [r2, #12]
 8013150:	2180      	movs	r1, #128	; 0x80
 8013152:	438b      	bics	r3, r1
 8013154:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8013156:	6823      	ldr	r3, [r4, #0]
 8013158:	689b      	ldr	r3, [r3, #8]
 801315a:	069b      	lsls	r3, r3, #26
 801315c:	d5cd      	bpl.n	80130fa <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801315e:	6823      	ldr	r3, [r4, #0]
 8013160:	22ff      	movs	r2, #255	; 0xff
 8013162:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8013164:	2301      	movs	r3, #1
 8013166:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8013168:	2300      	movs	r3, #0
 801316a:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 801316c:	e7c1      	b.n	80130f2 <HAL_RTC_SetDate+0x62>
 801316e:	46c0      	nop			; (mov r8, r8)
 8013170:	00ffff3f 	.word	0x00ffff3f

08013174 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8013174:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8013176:	0900      	lsrs	r0, r0, #4
 8013178:	0083      	lsls	r3, r0, #2
 801317a:	181b      	adds	r3, r3, r0
 801317c:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801317e:	200f      	movs	r0, #15
 8013180:	4010      	ands	r0, r2
 8013182:	1818      	adds	r0, r3, r0
 8013184:	b2c0      	uxtb	r0, r0
}
 8013186:	4770      	bx	lr

08013188 <HAL_RTC_GetTime>:
{
 8013188:	b570      	push	{r4, r5, r6, lr}
 801318a:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801318c:	6803      	ldr	r3, [r0, #0]
 801318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013190:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8013192:	6803      	ldr	r3, [r0, #0]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	490e      	ldr	r1, [pc, #56]	; (80131d0 <HAL_RTC_GetTime+0x48>)
 8013198:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801319a:	0c19      	lsrs	r1, r3, #16
 801319c:	203f      	movs	r0, #63	; 0x3f
 801319e:	4008      	ands	r0, r1
 80131a0:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80131a2:	0a1e      	lsrs	r6, r3, #8
 80131a4:	b2f6      	uxtb	r6, r6
 80131a6:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80131a8:	b2dc      	uxtb	r4, r3
 80131aa:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80131ac:	2340      	movs	r3, #64	; 0x40
 80131ae:	400b      	ands	r3, r1
 80131b0:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 80131b2:	2a00      	cmp	r2, #0
 80131b4:	d10a      	bne.n	80131cc <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80131b6:	f7ff ffdd 	bl	8013174 <RTC_Bcd2ToByte>
 80131ba:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80131bc:	0030      	movs	r0, r6
 80131be:	f7ff ffd9 	bl	8013174 <RTC_Bcd2ToByte>
 80131c2:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80131c4:	0020      	movs	r0, r4
 80131c6:	f7ff ffd5 	bl	8013174 <RTC_Bcd2ToByte>
 80131ca:	70a8      	strb	r0, [r5, #2]
}
 80131cc:	2000      	movs	r0, #0
 80131ce:	bd70      	pop	{r4, r5, r6, pc}
 80131d0:	007f7f7f 	.word	0x007f7f7f

080131d4 <HAL_RTC_GetDate>:
{
 80131d4:	b570      	push	{r4, r5, r6, lr}
 80131d6:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80131d8:	6803      	ldr	r3, [r0, #0]
 80131da:	685b      	ldr	r3, [r3, #4]
 80131dc:	490d      	ldr	r1, [pc, #52]	; (8013214 <HAL_RTC_GetDate+0x40>)
 80131de:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80131e0:	0c18      	lsrs	r0, r3, #16
 80131e2:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80131e4:	04dd      	lsls	r5, r3, #19
 80131e6:	0eed      	lsrs	r5, r5, #27
 80131e8:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80131ea:	b2de      	uxtb	r6, r3
 80131ec:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80131ee:	041b      	lsls	r3, r3, #16
 80131f0:	0f5b      	lsrs	r3, r3, #29
 80131f2:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 80131f4:	2a00      	cmp	r2, #0
 80131f6:	d10a      	bne.n	801320e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80131f8:	f7ff ffbc 	bl	8013174 <RTC_Bcd2ToByte>
 80131fc:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80131fe:	0028      	movs	r0, r5
 8013200:	f7ff ffb8 	bl	8013174 <RTC_Bcd2ToByte>
 8013204:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8013206:	0030      	movs	r0, r6
 8013208:	f7ff ffb4 	bl	8013174 <RTC_Bcd2ToByte>
 801320c:	70a0      	strb	r0, [r4, #2]
}
 801320e:	2000      	movs	r0, #0
 8013210:	bd70      	pop	{r4, r5, r6, pc}
 8013212:	46c0      	nop			; (mov r8, r8)
 8013214:	00ffff3f 	.word	0x00ffff3f

08013218 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013218:	6803      	ldr	r3, [r0, #0]
 801321a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 801321c:	0089      	lsls	r1, r1, #2
 801321e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8013220:	600a      	str	r2, [r1, #0]
}
 8013222:	4770      	bx	lr

08013224 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013224:	6803      	ldr	r3, [r0, #0]
 8013226:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013228:	0089      	lsls	r1, r1, #2
 801322a:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801322c:	6808      	ldr	r0, [r1, #0]
}
 801322e:	4770      	bx	lr

08013230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013230:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013232:	6a03      	ldr	r3, [r0, #32]
 8013234:	2201      	movs	r2, #1
 8013236:	4393      	bics	r3, r2
 8013238:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801323a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801323c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801323e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013240:	2573      	movs	r5, #115	; 0x73
 8013242:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013244:	680d      	ldr	r5, [r1, #0]
 8013246:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013248:	2502      	movs	r5, #2
 801324a:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801324c:	688d      	ldr	r5, [r1, #8]
 801324e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013250:	4d19      	ldr	r5, [pc, #100]	; (80132b8 <TIM_OC1_SetConfig+0x88>)
 8013252:	42a8      	cmp	r0, r5
 8013254:	d00f      	beq.n	8013276 <TIM_OC1_SetConfig+0x46>
 8013256:	4d19      	ldr	r5, [pc, #100]	; (80132bc <TIM_OC1_SetConfig+0x8c>)
 8013258:	42a8      	cmp	r0, r5
 801325a:	d01e      	beq.n	801329a <TIM_OC1_SetConfig+0x6a>
 801325c:	4d18      	ldr	r5, [pc, #96]	; (80132c0 <TIM_OC1_SetConfig+0x90>)
 801325e:	42a8      	cmp	r0, r5
 8013260:	d022      	beq.n	80132a8 <TIM_OC1_SetConfig+0x78>
 8013262:	4d18      	ldr	r5, [pc, #96]	; (80132c4 <TIM_OC1_SetConfig+0x94>)
 8013264:	42a8      	cmp	r0, r5
 8013266:	d112      	bne.n	801328e <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013268:	2508      	movs	r5, #8
 801326a:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801326c:	68cd      	ldr	r5, [r1, #12]
 801326e:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013270:	2504      	movs	r5, #4
 8013272:	43ab      	bics	r3, r5
 8013274:	e005      	b.n	8013282 <TIM_OC1_SetConfig+0x52>
    tmpccer &= ~TIM_CCER_CC1NP;
 8013276:	2508      	movs	r5, #8
 8013278:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 801327a:	68cd      	ldr	r5, [r1, #12]
 801327c:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 801327e:	2504      	movs	r5, #4
 8013280:	43ab      	bics	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013282:	4d11      	ldr	r5, [pc, #68]	; (80132c8 <TIM_OC1_SetConfig+0x98>)
 8013284:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013286:	694d      	ldr	r5, [r1, #20]
 8013288:	698e      	ldr	r6, [r1, #24]
 801328a:	4335      	orrs	r5, r6
 801328c:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801328e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013290:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013292:	684a      	ldr	r2, [r1, #4]
 8013294:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013296:	6203      	str	r3, [r0, #32]
}
 8013298:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 801329a:	2508      	movs	r5, #8
 801329c:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 801329e:	68cd      	ldr	r5, [r1, #12]
 80132a0:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80132a2:	2504      	movs	r5, #4
 80132a4:	43ab      	bics	r3, r5
 80132a6:	e7ec      	b.n	8013282 <TIM_OC1_SetConfig+0x52>
    tmpccer &= ~TIM_CCER_CC1NP;
 80132a8:	2508      	movs	r5, #8
 80132aa:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 80132ac:	68cd      	ldr	r5, [r1, #12]
 80132ae:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80132b0:	2504      	movs	r5, #4
 80132b2:	43ab      	bics	r3, r5
 80132b4:	e7e5      	b.n	8013282 <TIM_OC1_SetConfig+0x52>
 80132b6:	46c0      	nop			; (mov r8, r8)
 80132b8:	40012c00 	.word	0x40012c00
 80132bc:	40014000 	.word	0x40014000
 80132c0:	40014400 	.word	0x40014400
 80132c4:	40014800 	.word	0x40014800
 80132c8:	fffffcff 	.word	0xfffffcff

080132cc <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80132cc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80132ce:	6a03      	ldr	r3, [r0, #32]
 80132d0:	4a17      	ldr	r2, [pc, #92]	; (8013330 <TIM_OC3_SetConfig+0x64>)
 80132d2:	4013      	ands	r3, r2
 80132d4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80132d6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80132d8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80132da:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80132dc:	2473      	movs	r4, #115	; 0x73
 80132de:	43a5      	bics	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80132e0:	680c      	ldr	r4, [r1, #0]
 80132e2:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80132e4:	4c13      	ldr	r4, [pc, #76]	; (8013334 <TIM_OC3_SetConfig+0x68>)
 80132e6:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80132e8:	688c      	ldr	r4, [r1, #8]
 80132ea:	0224      	lsls	r4, r4, #8
 80132ec:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80132ee:	4c12      	ldr	r4, [pc, #72]	; (8013338 <TIM_OC3_SetConfig+0x6c>)
 80132f0:	42a0      	cmp	r0, r4
 80132f2:	d009      	beq.n	8013308 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80132f4:	4c11      	ldr	r4, [pc, #68]	; (801333c <TIM_OC3_SetConfig+0x70>)
 80132f6:	42a0      	cmp	r0, r4
 80132f8:	d00d      	beq.n	8013316 <TIM_OC3_SetConfig+0x4a>
 80132fa:	4c11      	ldr	r4, [pc, #68]	; (8013340 <TIM_OC3_SetConfig+0x74>)
 80132fc:	42a0      	cmp	r0, r4
 80132fe:	d00a      	beq.n	8013316 <TIM_OC3_SetConfig+0x4a>
 8013300:	4c10      	ldr	r4, [pc, #64]	; (8013344 <TIM_OC3_SetConfig+0x78>)
 8013302:	42a0      	cmp	r0, r4
 8013304:	d10e      	bne.n	8013324 <TIM_OC3_SetConfig+0x58>
 8013306:	e006      	b.n	8013316 <TIM_OC3_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC3NP;
 8013308:	4c0f      	ldr	r4, [pc, #60]	; (8013348 <TIM_OC3_SetConfig+0x7c>)
 801330a:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8);
 801330c:	68cb      	ldr	r3, [r1, #12]
 801330e:	021b      	lsls	r3, r3, #8
 8013310:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8013312:	4c0e      	ldr	r4, [pc, #56]	; (801334c <TIM_OC3_SetConfig+0x80>)
 8013314:	4023      	ands	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013316:	4c0e      	ldr	r4, [pc, #56]	; (8013350 <TIM_OC3_SetConfig+0x84>)
 8013318:	4014      	ands	r4, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 801331a:	698a      	ldr	r2, [r1, #24]
 801331c:	694e      	ldr	r6, [r1, #20]
 801331e:	4332      	orrs	r2, r6
 8013320:	0112      	lsls	r2, r2, #4
 8013322:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013324:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013326:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013328:	684a      	ldr	r2, [r1, #4]
 801332a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801332c:	6203      	str	r3, [r0, #32]
}
 801332e:	bd70      	pop	{r4, r5, r6, pc}
 8013330:	fffffeff 	.word	0xfffffeff
 8013334:	fffffdff 	.word	0xfffffdff
 8013338:	40012c00 	.word	0x40012c00
 801333c:	40014000 	.word	0x40014000
 8013340:	40014400 	.word	0x40014400
 8013344:	40014800 	.word	0x40014800
 8013348:	fffff7ff 	.word	0xfffff7ff
 801334c:	fffffbff 	.word	0xfffffbff
 8013350:	ffffcfff 	.word	0xffffcfff

08013354 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013354:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013356:	6a03      	ldr	r3, [r0, #32]
 8013358:	4a13      	ldr	r2, [pc, #76]	; (80133a8 <TIM_OC4_SetConfig+0x54>)
 801335a:	4013      	ands	r3, r2
 801335c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801335e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013360:	6843      	ldr	r3, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013362:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013364:	4d11      	ldr	r5, [pc, #68]	; (80133ac <TIM_OC4_SetConfig+0x58>)
 8013366:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8013368:	680d      	ldr	r5, [r1, #0]
 801336a:	022d      	lsls	r5, r5, #8
 801336c:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801336e:	4d10      	ldr	r5, [pc, #64]	; (80133b0 <TIM_OC4_SetConfig+0x5c>)
 8013370:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8013372:	688a      	ldr	r2, [r1, #8]
 8013374:	0312      	lsls	r2, r2, #12
 8013376:	432a      	orrs	r2, r5

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8013378:	4d0e      	ldr	r5, [pc, #56]	; (80133b4 <TIM_OC4_SetConfig+0x60>)
 801337a:	42a8      	cmp	r0, r5
 801337c:	d008      	beq.n	8013390 <TIM_OC4_SetConfig+0x3c>
 801337e:	4d0e      	ldr	r5, [pc, #56]	; (80133b8 <TIM_OC4_SetConfig+0x64>)
 8013380:	42a8      	cmp	r0, r5
 8013382:	d005      	beq.n	8013390 <TIM_OC4_SetConfig+0x3c>
 8013384:	4d0d      	ldr	r5, [pc, #52]	; (80133bc <TIM_OC4_SetConfig+0x68>)
 8013386:	42a8      	cmp	r0, r5
 8013388:	d002      	beq.n	8013390 <TIM_OC4_SetConfig+0x3c>
 801338a:	4d0d      	ldr	r5, [pc, #52]	; (80133c0 <TIM_OC4_SetConfig+0x6c>)
 801338c:	42a8      	cmp	r0, r5
 801338e:	d104      	bne.n	801339a <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013390:	4d0c      	ldr	r5, [pc, #48]	; (80133c4 <TIM_OC4_SetConfig+0x70>)
 8013392:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8013394:	694d      	ldr	r5, [r1, #20]
 8013396:	01ad      	lsls	r5, r5, #6
 8013398:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801339a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801339c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801339e:	684b      	ldr	r3, [r1, #4]
 80133a0:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80133a2:	6202      	str	r2, [r0, #32]
}
 80133a4:	bd30      	pop	{r4, r5, pc}
 80133a6:	46c0      	nop			; (mov r8, r8)
 80133a8:	ffffefff 	.word	0xffffefff
 80133ac:	ffff8cff 	.word	0xffff8cff
 80133b0:	ffffdfff 	.word	0xffffdfff
 80133b4:	40012c00 	.word	0x40012c00
 80133b8:	40014000 	.word	0x40014000
 80133bc:	40014400 	.word	0x40014400
 80133c0:	40014800 	.word	0x40014800
 80133c4:	ffffbfff 	.word	0xffffbfff

080133c8 <HAL_TIM_Base_MspInit>:
}
 80133c8:	4770      	bx	lr

080133ca <HAL_TIM_Base_MspDeInit>:
}
 80133ca:	4770      	bx	lr

080133cc <HAL_TIM_Base_DeInit>:
{
 80133cc:	b510      	push	{r4, lr}
 80133ce:	0004      	movs	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80133d0:	2339      	movs	r3, #57	; 0x39
 80133d2:	2202      	movs	r2, #2
 80133d4:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 80133d6:	6803      	ldr	r3, [r0, #0]
 80133d8:	6a19      	ldr	r1, [r3, #32]
 80133da:	4a0a      	ldr	r2, [pc, #40]	; (8013404 <HAL_TIM_Base_DeInit+0x38>)
 80133dc:	4211      	tst	r1, r2
 80133de:	d107      	bne.n	80133f0 <HAL_TIM_Base_DeInit+0x24>
 80133e0:	6a19      	ldr	r1, [r3, #32]
 80133e2:	4a09      	ldr	r2, [pc, #36]	; (8013408 <HAL_TIM_Base_DeInit+0x3c>)
 80133e4:	4211      	tst	r1, r2
 80133e6:	d103      	bne.n	80133f0 <HAL_TIM_Base_DeInit+0x24>
 80133e8:	681a      	ldr	r2, [r3, #0]
 80133ea:	2101      	movs	r1, #1
 80133ec:	438a      	bics	r2, r1
 80133ee:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 80133f0:	0020      	movs	r0, r4
 80133f2:	f7ff ffea 	bl	80133ca <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 80133f6:	2300      	movs	r3, #0
 80133f8:	2239      	movs	r2, #57	; 0x39
 80133fa:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 80133fc:	3a01      	subs	r2, #1
 80133fe:	54a3      	strb	r3, [r4, r2]
}
 8013400:	2000      	movs	r0, #0
 8013402:	bd10      	pop	{r4, pc}
 8013404:	00001111 	.word	0x00001111
 8013408:	00000444 	.word	0x00000444

0801340c <HAL_TIM_Base_Start>:
{
 801340c:	b510      	push	{r4, lr}
  htim->State= HAL_TIM_STATE_BUSY;
 801340e:	2239      	movs	r2, #57	; 0x39
 8013410:	2302      	movs	r3, #2
 8013412:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8013414:	6804      	ldr	r4, [r0, #0]
 8013416:	6823      	ldr	r3, [r4, #0]
 8013418:	2101      	movs	r1, #1
 801341a:	430b      	orrs	r3, r1
 801341c:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 801341e:	5481      	strb	r1, [r0, r2]
}
 8013420:	2000      	movs	r0, #0
 8013422:	bd10      	pop	{r4, pc}

08013424 <HAL_TIM_PWM_MspInit>:
}
 8013424:	4770      	bx	lr

08013426 <HAL_TIM_PWM_MspDeInit>:
}
 8013426:	4770      	bx	lr

08013428 <HAL_TIM_PWM_DeInit>:
{
 8013428:	b510      	push	{r4, lr}
 801342a:	0004      	movs	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 801342c:	2339      	movs	r3, #57	; 0x39
 801342e:	2202      	movs	r2, #2
 8013430:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 8013432:	6803      	ldr	r3, [r0, #0]
 8013434:	6a19      	ldr	r1, [r3, #32]
 8013436:	4a0a      	ldr	r2, [pc, #40]	; (8013460 <HAL_TIM_PWM_DeInit+0x38>)
 8013438:	4211      	tst	r1, r2
 801343a:	d107      	bne.n	801344c <HAL_TIM_PWM_DeInit+0x24>
 801343c:	6a19      	ldr	r1, [r3, #32]
 801343e:	4a09      	ldr	r2, [pc, #36]	; (8013464 <HAL_TIM_PWM_DeInit+0x3c>)
 8013440:	4211      	tst	r1, r2
 8013442:	d103      	bne.n	801344c <HAL_TIM_PWM_DeInit+0x24>
 8013444:	681a      	ldr	r2, [r3, #0]
 8013446:	2101      	movs	r1, #1
 8013448:	438a      	bics	r2, r1
 801344a:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 801344c:	0020      	movs	r0, r4
 801344e:	f7ff ffea 	bl	8013426 <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8013452:	2300      	movs	r3, #0
 8013454:	2239      	movs	r2, #57	; 0x39
 8013456:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 8013458:	3a01      	subs	r2, #1
 801345a:	54a3      	strb	r3, [r4, r2]
}
 801345c:	2000      	movs	r0, #0
 801345e:	bd10      	pop	{r4, pc}
 8013460:	00001111 	.word	0x00001111
 8013464:	00000444 	.word	0x00000444

08013468 <HAL_TIM_ConfigClockSource>:
{
 8013468:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 801346a:	2338      	movs	r3, #56	; 0x38
 801346c:	5cc3      	ldrb	r3, [r0, r3]
 801346e:	2b01      	cmp	r3, #1
 8013470:	d100      	bne.n	8013474 <HAL_TIM_ConfigClockSource+0xc>
 8013472:	e0cb      	b.n	801360c <HAL_TIM_ConfigClockSource+0x1a4>
 8013474:	2338      	movs	r3, #56	; 0x38
 8013476:	2201      	movs	r2, #1
 8013478:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 801347a:	3301      	adds	r3, #1
 801347c:	3201      	adds	r2, #1
 801347e:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8013480:	6802      	ldr	r2, [r0, #0]
 8013482:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013484:	4c62      	ldr	r4, [pc, #392]	; (8013610 <HAL_TIM_ConfigClockSource+0x1a8>)
 8013486:	4023      	ands	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 8013488:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 801348a:	680b      	ldr	r3, [r1, #0]
 801348c:	2b40      	cmp	r3, #64	; 0x40
 801348e:	d100      	bne.n	8013492 <HAL_TIM_ConfigClockSource+0x2a>
 8013490:	e092      	b.n	80135b8 <HAL_TIM_ConfigClockSource+0x150>
 8013492:	d922      	bls.n	80134da <HAL_TIM_ConfigClockSource+0x72>
 8013494:	2b70      	cmp	r3, #112	; 0x70
 8013496:	d063      	beq.n	8013560 <HAL_TIM_ConfigClockSource+0xf8>
 8013498:	d83a      	bhi.n	8013510 <HAL_TIM_ConfigClockSource+0xa8>
 801349a:	2b50      	cmp	r3, #80	; 0x50
 801349c:	d100      	bne.n	80134a0 <HAL_TIM_ConfigClockSource+0x38>
 801349e:	e071      	b.n	8013584 <HAL_TIM_ConfigClockSource+0x11c>
 80134a0:	2b60      	cmp	r3, #96	; 0x60
 80134a2:	d155      	bne.n	8013550 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80134a4:	6803      	ldr	r3, [r0, #0]
 80134a6:	684a      	ldr	r2, [r1, #4]
 80134a8:	68c9      	ldr	r1, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80134aa:	6a1c      	ldr	r4, [r3, #32]
 80134ac:	2510      	movs	r5, #16
 80134ae:	43ac      	bics	r4, r5
 80134b0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80134b2:	699d      	ldr	r5, [r3, #24]
  tmpccer = TIMx->CCER;
 80134b4:	6a1c      	ldr	r4, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80134b6:	4e57      	ldr	r6, [pc, #348]	; (8013614 <HAL_TIM_ConfigClockSource+0x1ac>)
 80134b8:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12);
 80134ba:	0309      	lsls	r1, r1, #12
 80134bc:	4329      	orrs	r1, r5

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80134be:	25a0      	movs	r5, #160	; 0xa0
 80134c0:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4);
 80134c2:	0112      	lsls	r2, r2, #4
 80134c4:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80134c6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80134c8:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80134ca:	6802      	ldr	r2, [r0, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80134cc:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80134ce:	2170      	movs	r1, #112	; 0x70
 80134d0:	438b      	bics	r3, r1
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80134d2:	3909      	subs	r1, #9
 80134d4:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80134d6:	6093      	str	r3, [r2, #8]
 80134d8:	e03a      	b.n	8013550 <HAL_TIM_ConfigClockSource+0xe8>
  switch (sClockSourceConfig->ClockSource)
 80134da:	2b10      	cmp	r3, #16
 80134dc:	d100      	bne.n	80134e0 <HAL_TIM_ConfigClockSource+0x78>
 80134de:	e085      	b.n	80135ec <HAL_TIM_ConfigClockSource+0x184>
 80134e0:	d90c      	bls.n	80134fc <HAL_TIM_ConfigClockSource+0x94>
 80134e2:	2b20      	cmp	r3, #32
 80134e4:	d100      	bne.n	80134e8 <HAL_TIM_ConfigClockSource+0x80>
 80134e6:	e089      	b.n	80135fc <HAL_TIM_ConfigClockSource+0x194>
 80134e8:	2b30      	cmp	r3, #48	; 0x30
 80134ea:	d131      	bne.n	8013550 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80134ec:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 80134ee:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80134f0:	2170      	movs	r1, #112	; 0x70
 80134f2:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80134f4:	3939      	subs	r1, #57	; 0x39
 80134f6:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 80134f8:	6093      	str	r3, [r2, #8]
 80134fa:	e029      	b.n	8013550 <HAL_TIM_ConfigClockSource+0xe8>
  switch (sClockSourceConfig->ClockSource)
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d127      	bne.n	8013550 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8013500:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 8013502:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8013504:	2170      	movs	r1, #112	; 0x70
 8013506:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8013508:	3969      	subs	r1, #105	; 0x69
 801350a:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 801350c:	6093      	str	r3, [r2, #8]
 801350e:	e01f      	b.n	8013550 <HAL_TIM_ConfigClockSource+0xe8>
  switch (sClockSourceConfig->ClockSource)
 8013510:	2280      	movs	r2, #128	; 0x80
 8013512:	0152      	lsls	r2, r2, #5
 8013514:	4293      	cmp	r3, r2
 8013516:	d016      	beq.n	8013546 <HAL_TIM_ConfigClockSource+0xde>
 8013518:	2280      	movs	r2, #128	; 0x80
 801351a:	0192      	lsls	r2, r2, #6
 801351c:	4293      	cmp	r3, r2
 801351e:	d117      	bne.n	8013550 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ETR_SetConfig(htim->Instance,
 8013520:	6804      	ldr	r4, [r0, #0]
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8013522:	68a3      	ldr	r3, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013524:	4a3c      	ldr	r2, [pc, #240]	; (8013618 <HAL_TIM_ConfigClockSource+0x1b0>)
 8013526:	401a      	ands	r2, r3

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8013528:	688b      	ldr	r3, [r1, #8]
 801352a:	684d      	ldr	r5, [r1, #4]
 801352c:	432b      	orrs	r3, r5
 801352e:	68c9      	ldr	r1, [r1, #12]
 8013530:	0209      	lsls	r1, r1, #8
 8013532:	430b      	orrs	r3, r1
 8013534:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013536:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013538:	6802      	ldr	r2, [r0, #0]
 801353a:	6891      	ldr	r1, [r2, #8]
 801353c:	2380      	movs	r3, #128	; 0x80
 801353e:	01db      	lsls	r3, r3, #7
 8013540:	430b      	orrs	r3, r1
 8013542:	6093      	str	r3, [r2, #8]
    break;
 8013544:	e004      	b.n	8013550 <HAL_TIM_ConfigClockSource+0xe8>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8013546:	6802      	ldr	r2, [r0, #0]
 8013548:	6893      	ldr	r3, [r2, #8]
 801354a:	2107      	movs	r1, #7
 801354c:	438b      	bics	r3, r1
 801354e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8013550:	2339      	movs	r3, #57	; 0x39
 8013552:	2201      	movs	r2, #1
 8013554:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8013556:	3b01      	subs	r3, #1
 8013558:	2200      	movs	r2, #0
 801355a:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 801355c:	2000      	movs	r0, #0
}
 801355e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8013560:	6804      	ldr	r4, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 8013562:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013564:	4a2c      	ldr	r2, [pc, #176]	; (8013618 <HAL_TIM_ConfigClockSource+0x1b0>)
 8013566:	401a      	ands	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8013568:	688b      	ldr	r3, [r1, #8]
 801356a:	684d      	ldr	r5, [r1, #4]
 801356c:	432b      	orrs	r3, r5
 801356e:	68c9      	ldr	r1, [r1, #12]
 8013570:	0209      	lsls	r1, r1, #8
 8013572:	430b      	orrs	r3, r1
 8013574:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8013576:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8013578:	6802      	ldr	r2, [r0, #0]
 801357a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801357c:	2177      	movs	r1, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801357e:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8013580:	6093      	str	r3, [r2, #8]
    break;
 8013582:	e7e5      	b.n	8013550 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013584:	6803      	ldr	r3, [r0, #0]
 8013586:	684c      	ldr	r4, [r1, #4]
 8013588:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 801358a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801358c:	6a1d      	ldr	r5, [r3, #32]
 801358e:	2601      	movs	r6, #1
 8013590:	43b5      	bics	r5, r6
 8013592:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013594:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013596:	36ef      	adds	r6, #239	; 0xef
 8013598:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 801359a:	0112      	lsls	r2, r2, #4
 801359c:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801359e:	250a      	movs	r5, #10
 80135a0:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 80135a2:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80135a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80135a6:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80135a8:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 80135aa:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80135ac:	2170      	movs	r1, #112	; 0x70
 80135ae:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80135b0:	3919      	subs	r1, #25
 80135b2:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 80135b4:	6093      	str	r3, [r2, #8]
 80135b6:	e7cb      	b.n	8013550 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80135b8:	6803      	ldr	r3, [r0, #0]
 80135ba:	684c      	ldr	r4, [r1, #4]
 80135bc:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80135be:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80135c0:	6a1d      	ldr	r5, [r3, #32]
 80135c2:	2601      	movs	r6, #1
 80135c4:	43b5      	bics	r5, r6
 80135c6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80135c8:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80135ca:	36ef      	adds	r6, #239	; 0xef
 80135cc:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 80135ce:	0112      	lsls	r2, r2, #4
 80135d0:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80135d2:	250a      	movs	r5, #10
 80135d4:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 80135d6:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80135d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80135da:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80135dc:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 80135de:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80135e0:	2170      	movs	r1, #112	; 0x70
 80135e2:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80135e4:	3929      	subs	r1, #41	; 0x29
 80135e6:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 80135e8:	6093      	str	r3, [r2, #8]
 80135ea:	e7b1      	b.n	8013550 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80135ec:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 80135ee:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80135f0:	2170      	movs	r1, #112	; 0x70
 80135f2:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80135f4:	3959      	subs	r1, #89	; 0x59
 80135f6:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 80135f8:	6093      	str	r3, [r2, #8]
 80135fa:	e7a9      	b.n	8013550 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80135fc:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 80135fe:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8013600:	2170      	movs	r1, #112	; 0x70
 8013602:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8013604:	3949      	subs	r1, #73	; 0x49
 8013606:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8013608:	6093      	str	r3, [r2, #8]
 801360a:	e7a1      	b.n	8013550 <HAL_TIM_ConfigClockSource+0xe8>
  __HAL_LOCK(htim);
 801360c:	2002      	movs	r0, #2
 801360e:	e7a6      	b.n	801355e <HAL_TIM_ConfigClockSource+0xf6>
 8013610:	ffff0088 	.word	0xffff0088
 8013614:	ffff0fff 	.word	0xffff0fff
 8013618:	ffff00ff 	.word	0xffff00ff

0801361c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 801361c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801361e:	4a36      	ldr	r2, [pc, #216]	; (80136f8 <TIM_Base_SetConfig+0xdc>)
 8013620:	4290      	cmp	r0, r2
 8013622:	d022      	beq.n	801366a <TIM_Base_SetConfig+0x4e>
 8013624:	2280      	movs	r2, #128	; 0x80
 8013626:	05d2      	lsls	r2, r2, #23
 8013628:	4290      	cmp	r0, r2
 801362a:	d014      	beq.n	8013656 <TIM_Base_SetConfig+0x3a>
 801362c:	4a33      	ldr	r2, [pc, #204]	; (80136fc <TIM_Base_SetConfig+0xe0>)
 801362e:	4290      	cmp	r0, r2
 8013630:	d016      	beq.n	8013660 <TIM_Base_SetConfig+0x44>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013632:	4a33      	ldr	r2, [pc, #204]	; (8013700 <TIM_Base_SetConfig+0xe4>)
 8013634:	4290      	cmp	r0, r2
 8013636:	d040      	beq.n	80136ba <TIM_Base_SetConfig+0x9e>
 8013638:	4a32      	ldr	r2, [pc, #200]	; (8013704 <TIM_Base_SetConfig+0xe8>)
 801363a:	4290      	cmp	r0, r2
 801363c:	d047      	beq.n	80136ce <TIM_Base_SetConfig+0xb2>
 801363e:	4a32      	ldr	r2, [pc, #200]	; (8013708 <TIM_Base_SetConfig+0xec>)
 8013640:	4290      	cmp	r0, r2
 8013642:	d04e      	beq.n	80136e2 <TIM_Base_SetConfig+0xc6>
 8013644:	4a31      	ldr	r2, [pc, #196]	; (801370c <TIM_Base_SetConfig+0xf0>)
 8013646:	4290      	cmp	r0, r2
 8013648:	d02d      	beq.n	80136a6 <TIM_Base_SetConfig+0x8a>
  TIMx->CR1 = tmpcr1;
 801364a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801364c:	688b      	ldr	r3, [r1, #8]
 801364e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013650:	680b      	ldr	r3, [r1, #0]
 8013652:	6283      	str	r3, [r0, #40]	; 0x28
 8013654:	e024      	b.n	80136a0 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013656:	2270      	movs	r2, #112	; 0x70
 8013658:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801365a:	684a      	ldr	r2, [r1, #4]
 801365c:	4313      	orrs	r3, r2
 801365e:	e008      	b.n	8013672 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013660:	2270      	movs	r2, #112	; 0x70
 8013662:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8013664:	684a      	ldr	r2, [r1, #4]
 8013666:	4313      	orrs	r3, r2
 8013668:	e003      	b.n	8013672 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801366a:	2270      	movs	r2, #112	; 0x70
 801366c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801366e:	684a      	ldr	r2, [r1, #4]
 8013670:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8013672:	4a27      	ldr	r2, [pc, #156]	; (8013710 <TIM_Base_SetConfig+0xf4>)
 8013674:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013676:	68ca      	ldr	r2, [r1, #12]
 8013678:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801367a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801367c:	688b      	ldr	r3, [r1, #8]
 801367e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013680:	680b      	ldr	r3, [r1, #0]
 8013682:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013684:	4b1c      	ldr	r3, [pc, #112]	; (80136f8 <TIM_Base_SetConfig+0xdc>)
 8013686:	4298      	cmp	r0, r3
 8013688:	d008      	beq.n	801369c <TIM_Base_SetConfig+0x80>
 801368a:	4b1e      	ldr	r3, [pc, #120]	; (8013704 <TIM_Base_SetConfig+0xe8>)
 801368c:	4298      	cmp	r0, r3
 801368e:	d005      	beq.n	801369c <TIM_Base_SetConfig+0x80>
 8013690:	4b1d      	ldr	r3, [pc, #116]	; (8013708 <TIM_Base_SetConfig+0xec>)
 8013692:	4298      	cmp	r0, r3
 8013694:	d002      	beq.n	801369c <TIM_Base_SetConfig+0x80>
 8013696:	4b1d      	ldr	r3, [pc, #116]	; (801370c <TIM_Base_SetConfig+0xf0>)
 8013698:	4298      	cmp	r0, r3
 801369a:	d101      	bne.n	80136a0 <TIM_Base_SetConfig+0x84>
    TIMx->RCR = Structure->RepetitionCounter;
 801369c:	690b      	ldr	r3, [r1, #16]
 801369e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80136a0:	2301      	movs	r3, #1
 80136a2:	6143      	str	r3, [r0, #20]
}
 80136a4:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 80136a6:	4a1a      	ldr	r2, [pc, #104]	; (8013710 <TIM_Base_SetConfig+0xf4>)
 80136a8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80136aa:	68ca      	ldr	r2, [r1, #12]
 80136ac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80136ae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80136b0:	688b      	ldr	r3, [r1, #8]
 80136b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80136b4:	680b      	ldr	r3, [r1, #0]
 80136b6:	6283      	str	r3, [r0, #40]	; 0x28
 80136b8:	e7f0      	b.n	801369c <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 80136ba:	4a15      	ldr	r2, [pc, #84]	; (8013710 <TIM_Base_SetConfig+0xf4>)
 80136bc:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80136be:	68ca      	ldr	r2, [r1, #12]
 80136c0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80136c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80136c4:	688b      	ldr	r3, [r1, #8]
 80136c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80136c8:	680b      	ldr	r3, [r1, #0]
 80136ca:	6283      	str	r3, [r0, #40]	; 0x28
 80136cc:	e7e8      	b.n	80136a0 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 80136ce:	4a10      	ldr	r2, [pc, #64]	; (8013710 <TIM_Base_SetConfig+0xf4>)
 80136d0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80136d2:	68ca      	ldr	r2, [r1, #12]
 80136d4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80136d6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80136d8:	688b      	ldr	r3, [r1, #8]
 80136da:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80136dc:	680b      	ldr	r3, [r1, #0]
 80136de:	6283      	str	r3, [r0, #40]	; 0x28
 80136e0:	e7dc      	b.n	801369c <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 80136e2:	4a0b      	ldr	r2, [pc, #44]	; (8013710 <TIM_Base_SetConfig+0xf4>)
 80136e4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80136e6:	68ca      	ldr	r2, [r1, #12]
 80136e8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80136ea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80136ec:	688b      	ldr	r3, [r1, #8]
 80136ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80136f0:	680b      	ldr	r3, [r1, #0]
 80136f2:	6283      	str	r3, [r0, #40]	; 0x28
 80136f4:	e7d2      	b.n	801369c <TIM_Base_SetConfig+0x80>
 80136f6:	46c0      	nop			; (mov r8, r8)
 80136f8:	40012c00 	.word	0x40012c00
 80136fc:	40000400 	.word	0x40000400
 8013700:	40002000 	.word	0x40002000
 8013704:	40014000 	.word	0x40014000
 8013708:	40014400 	.word	0x40014400
 801370c:	40014800 	.word	0x40014800
 8013710:	fffffcff 	.word	0xfffffcff

08013714 <HAL_TIM_Base_Init>:
{
 8013714:	b570      	push	{r4, r5, r6, lr}
 8013716:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8013718:	d014      	beq.n	8013744 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801371a:	2339      	movs	r3, #57	; 0x39
 801371c:	5cc3      	ldrb	r3, [r0, r3]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d00a      	beq.n	8013738 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8013722:	2539      	movs	r5, #57	; 0x39
 8013724:	2302      	movs	r3, #2
 8013726:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013728:	1d21      	adds	r1, r4, #4
 801372a:	6820      	ldr	r0, [r4, #0]
 801372c:	f7ff ff76 	bl	801361c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8013730:	2301      	movs	r3, #1
 8013732:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8013734:	2000      	movs	r0, #0
}
 8013736:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8013738:	3338      	adds	r3, #56	; 0x38
 801373a:	2200      	movs	r2, #0
 801373c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 801373e:	f7ff fe43 	bl	80133c8 <HAL_TIM_Base_MspInit>
 8013742:	e7ee      	b.n	8013722 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8013744:	2001      	movs	r0, #1
 8013746:	e7f6      	b.n	8013736 <HAL_TIM_Base_Init+0x22>

08013748 <HAL_TIM_PWM_Init>:
{
 8013748:	b570      	push	{r4, r5, r6, lr}
 801374a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 801374c:	d014      	beq.n	8013778 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801374e:	2339      	movs	r3, #57	; 0x39
 8013750:	5cc3      	ldrb	r3, [r0, r3]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d00a      	beq.n	801376c <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8013756:	2539      	movs	r5, #57	; 0x39
 8013758:	2302      	movs	r3, #2
 801375a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801375c:	1d21      	adds	r1, r4, #4
 801375e:	6820      	ldr	r0, [r4, #0]
 8013760:	f7ff ff5c 	bl	801361c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8013764:	2301      	movs	r3, #1
 8013766:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8013768:	2000      	movs	r0, #0
}
 801376a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 801376c:	3338      	adds	r3, #56	; 0x38
 801376e:	2200      	movs	r2, #0
 8013770:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8013772:	f7ff fe57 	bl	8013424 <HAL_TIM_PWM_MspInit>
 8013776:	e7ee      	b.n	8013756 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8013778:	2001      	movs	r0, #1
 801377a:	e7f6      	b.n	801376a <HAL_TIM_PWM_Init+0x22>

0801377c <TIM_OC2_SetConfig>:
{
 801377c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801377e:	6a03      	ldr	r3, [r0, #32]
 8013780:	2210      	movs	r2, #16
 8013782:	4393      	bics	r3, r2
 8013784:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8013786:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8013788:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 801378a:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801378c:	4c15      	ldr	r4, [pc, #84]	; (80137e4 <TIM_OC2_SetConfig+0x68>)
 801378e:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8);
 8013790:	680c      	ldr	r4, [r1, #0]
 8013792:	0224      	lsls	r4, r4, #8
 8013794:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8013796:	2420      	movs	r4, #32
 8013798:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4);
 801379a:	688c      	ldr	r4, [r1, #8]
 801379c:	0124      	lsls	r4, r4, #4
 801379e:	4322      	orrs	r2, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80137a0:	4c11      	ldr	r4, [pc, #68]	; (80137e8 <TIM_OC2_SetConfig+0x6c>)
 80137a2:	42a0      	cmp	r0, r4
 80137a4:	d009      	beq.n	80137ba <TIM_OC2_SetConfig+0x3e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80137a6:	4c11      	ldr	r4, [pc, #68]	; (80137ec <TIM_OC2_SetConfig+0x70>)
 80137a8:	42a0      	cmp	r0, r4
 80137aa:	d00e      	beq.n	80137ca <TIM_OC2_SetConfig+0x4e>
 80137ac:	4c10      	ldr	r4, [pc, #64]	; (80137f0 <TIM_OC2_SetConfig+0x74>)
 80137ae:	42a0      	cmp	r0, r4
 80137b0:	d00b      	beq.n	80137ca <TIM_OC2_SetConfig+0x4e>
 80137b2:	4c10      	ldr	r4, [pc, #64]	; (80137f4 <TIM_OC2_SetConfig+0x78>)
 80137b4:	42a0      	cmp	r0, r4
 80137b6:	d10f      	bne.n	80137d8 <TIM_OC2_SetConfig+0x5c>
 80137b8:	e007      	b.n	80137ca <TIM_OC2_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC2NP;
 80137ba:	2480      	movs	r4, #128	; 0x80
 80137bc:	43a2      	bics	r2, r4
 80137be:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80137c0:	68ca      	ldr	r2, [r1, #12]
 80137c2:	0112      	lsls	r2, r2, #4
 80137c4:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 80137c6:	2440      	movs	r4, #64	; 0x40
 80137c8:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80137ca:	4c0b      	ldr	r4, [pc, #44]	; (80137f8 <TIM_OC2_SetConfig+0x7c>)
 80137cc:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80137ce:	698b      	ldr	r3, [r1, #24]
 80137d0:	694e      	ldr	r6, [r1, #20]
 80137d2:	4333      	orrs	r3, r6
 80137d4:	009b      	lsls	r3, r3, #2
 80137d6:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 80137d8:	6043      	str	r3, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80137da:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80137dc:	684b      	ldr	r3, [r1, #4]
 80137de:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80137e0:	6202      	str	r2, [r0, #32]
}
 80137e2:	bd70      	pop	{r4, r5, r6, pc}
 80137e4:	ffff8cff 	.word	0xffff8cff
 80137e8:	40012c00 	.word	0x40012c00
 80137ec:	40014000 	.word	0x40014000
 80137f0:	40014400 	.word	0x40014400
 80137f4:	40014800 	.word	0x40014800
 80137f8:	fffff3ff 	.word	0xfffff3ff

080137fc <HAL_TIM_PWM_ConfigChannel>:
{
 80137fc:	b570      	push	{r4, r5, r6, lr}
 80137fe:	0004      	movs	r4, r0
 8013800:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8013802:	2338      	movs	r3, #56	; 0x38
 8013804:	5cc3      	ldrb	r3, [r0, r3]
 8013806:	2b01      	cmp	r3, #1
 8013808:	d069      	beq.n	80138de <HAL_TIM_PWM_ConfigChannel+0xe2>
 801380a:	2338      	movs	r3, #56	; 0x38
 801380c:	2101      	movs	r1, #1
 801380e:	54c1      	strb	r1, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8013810:	3301      	adds	r3, #1
 8013812:	3101      	adds	r1, #1
 8013814:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8013816:	2a04      	cmp	r2, #4
 8013818:	d037      	beq.n	801388a <HAL_TIM_PWM_ConfigChannel+0x8e>
 801381a:	d919      	bls.n	8013850 <HAL_TIM_PWM_ConfigChannel+0x54>
 801381c:	2a08      	cmp	r2, #8
 801381e:	d04a      	beq.n	80138b6 <HAL_TIM_PWM_ConfigChannel+0xba>
 8013820:	2a0c      	cmp	r2, #12
 8013822:	d12a      	bne.n	801387a <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013824:	0029      	movs	r1, r5
 8013826:	6800      	ldr	r0, [r0, #0]
 8013828:	f7ff fd94 	bl	8013354 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801382c:	6822      	ldr	r2, [r4, #0]
 801382e:	69d1      	ldr	r1, [r2, #28]
 8013830:	2380      	movs	r3, #128	; 0x80
 8013832:	011b      	lsls	r3, r3, #4
 8013834:	430b      	orrs	r3, r1
 8013836:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013838:	6822      	ldr	r2, [r4, #0]
 801383a:	69d3      	ldr	r3, [r2, #28]
 801383c:	4929      	ldr	r1, [pc, #164]	; (80138e4 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 801383e:	400b      	ands	r3, r1
 8013840:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8013842:	6822      	ldr	r2, [r4, #0]
 8013844:	69d1      	ldr	r1, [r2, #28]
 8013846:	692b      	ldr	r3, [r5, #16]
 8013848:	021b      	lsls	r3, r3, #8
 801384a:	430b      	orrs	r3, r1
 801384c:	61d3      	str	r3, [r2, #28]
    break;
 801384e:	e014      	b.n	801387a <HAL_TIM_PWM_ConfigChannel+0x7e>
  switch (Channel)
 8013850:	2a00      	cmp	r2, #0
 8013852:	d112      	bne.n	801387a <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013854:	0029      	movs	r1, r5
 8013856:	6800      	ldr	r0, [r0, #0]
 8013858:	f7ff fcea 	bl	8013230 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801385c:	6822      	ldr	r2, [r4, #0]
 801385e:	6993      	ldr	r3, [r2, #24]
 8013860:	2108      	movs	r1, #8
 8013862:	430b      	orrs	r3, r1
 8013864:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013866:	6822      	ldr	r2, [r4, #0]
 8013868:	6993      	ldr	r3, [r2, #24]
 801386a:	3904      	subs	r1, #4
 801386c:	438b      	bics	r3, r1
 801386e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013870:	6822      	ldr	r2, [r4, #0]
 8013872:	6993      	ldr	r3, [r2, #24]
 8013874:	6929      	ldr	r1, [r5, #16]
 8013876:	430b      	orrs	r3, r1
 8013878:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 801387a:	2339      	movs	r3, #57	; 0x39
 801387c:	2201      	movs	r2, #1
 801387e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8013880:	3b01      	subs	r3, #1
 8013882:	2200      	movs	r2, #0
 8013884:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8013886:	2000      	movs	r0, #0
}
 8013888:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801388a:	0029      	movs	r1, r5
 801388c:	6800      	ldr	r0, [r0, #0]
 801388e:	f7ff ff75 	bl	801377c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013892:	6822      	ldr	r2, [r4, #0]
 8013894:	6991      	ldr	r1, [r2, #24]
 8013896:	2380      	movs	r3, #128	; 0x80
 8013898:	011b      	lsls	r3, r3, #4
 801389a:	430b      	orrs	r3, r1
 801389c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801389e:	6822      	ldr	r2, [r4, #0]
 80138a0:	6993      	ldr	r3, [r2, #24]
 80138a2:	4910      	ldr	r1, [pc, #64]	; (80138e4 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 80138a4:	400b      	ands	r3, r1
 80138a6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80138a8:	6822      	ldr	r2, [r4, #0]
 80138aa:	6991      	ldr	r1, [r2, #24]
 80138ac:	692b      	ldr	r3, [r5, #16]
 80138ae:	021b      	lsls	r3, r3, #8
 80138b0:	430b      	orrs	r3, r1
 80138b2:	6193      	str	r3, [r2, #24]
    break;
 80138b4:	e7e1      	b.n	801387a <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80138b6:	0029      	movs	r1, r5
 80138b8:	6800      	ldr	r0, [r0, #0]
 80138ba:	f7ff fd07 	bl	80132cc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80138be:	6822      	ldr	r2, [r4, #0]
 80138c0:	69d3      	ldr	r3, [r2, #28]
 80138c2:	2108      	movs	r1, #8
 80138c4:	430b      	orrs	r3, r1
 80138c6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80138c8:	6822      	ldr	r2, [r4, #0]
 80138ca:	69d3      	ldr	r3, [r2, #28]
 80138cc:	3904      	subs	r1, #4
 80138ce:	438b      	bics	r3, r1
 80138d0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80138d2:	6822      	ldr	r2, [r4, #0]
 80138d4:	69d3      	ldr	r3, [r2, #28]
 80138d6:	6929      	ldr	r1, [r5, #16]
 80138d8:	430b      	orrs	r3, r1
 80138da:	61d3      	str	r3, [r2, #28]
    break;
 80138dc:	e7cd      	b.n	801387a <HAL_TIM_PWM_ConfigChannel+0x7e>
  __HAL_LOCK(htim);
 80138de:	2002      	movs	r0, #2
 80138e0:	e7d2      	b.n	8013888 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80138e2:	46c0      	nop			; (mov r8, r8)
 80138e4:	fffffbff 	.word	0xfffffbff

080138e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80138e8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80138ea:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80138ec:	2401      	movs	r4, #1
 80138ee:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80138f0:	43a3      	bics	r3, r4
 80138f2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80138f4:	6a03      	ldr	r3, [r0, #32]
 80138f6:	408a      	lsls	r2, r1
 80138f8:	431a      	orrs	r2, r3
 80138fa:	6202      	str	r2, [r0, #32]
}
 80138fc:	bd10      	pop	{r4, pc}
	...

08013900 <HAL_TIM_PWM_Start>:
{
 8013900:	b510      	push	{r4, lr}
 8013902:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013904:	2201      	movs	r2, #1
 8013906:	6800      	ldr	r0, [r0, #0]
 8013908:	f7ff ffee 	bl	80138e8 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801390c:	6823      	ldr	r3, [r4, #0]
 801390e:	4a0c      	ldr	r2, [pc, #48]	; (8013940 <HAL_TIM_PWM_Start+0x40>)
 8013910:	4293      	cmp	r3, r2
 8013912:	d008      	beq.n	8013926 <HAL_TIM_PWM_Start+0x26>
 8013914:	4a0b      	ldr	r2, [pc, #44]	; (8013944 <HAL_TIM_PWM_Start+0x44>)
 8013916:	4293      	cmp	r3, r2
 8013918:	d005      	beq.n	8013926 <HAL_TIM_PWM_Start+0x26>
 801391a:	4a0b      	ldr	r2, [pc, #44]	; (8013948 <HAL_TIM_PWM_Start+0x48>)
 801391c:	4293      	cmp	r3, r2
 801391e:	d002      	beq.n	8013926 <HAL_TIM_PWM_Start+0x26>
 8013920:	4a0a      	ldr	r2, [pc, #40]	; (801394c <HAL_TIM_PWM_Start+0x4c>)
 8013922:	4293      	cmp	r3, r2
 8013924:	d104      	bne.n	8013930 <HAL_TIM_PWM_Start+0x30>
    __HAL_TIM_MOE_ENABLE(htim);
 8013926:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8013928:	2280      	movs	r2, #128	; 0x80
 801392a:	0212      	lsls	r2, r2, #8
 801392c:	430a      	orrs	r2, r1
 801392e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8013930:	6822      	ldr	r2, [r4, #0]
 8013932:	6813      	ldr	r3, [r2, #0]
 8013934:	2101      	movs	r1, #1
 8013936:	430b      	orrs	r3, r1
 8013938:	6013      	str	r3, [r2, #0]
}
 801393a:	2000      	movs	r0, #0
 801393c:	bd10      	pop	{r4, pc}
 801393e:	46c0      	nop			; (mov r8, r8)
 8013940:	40012c00 	.word	0x40012c00
 8013944:	40014000 	.word	0x40014000
 8013948:	40014400 	.word	0x40014400
 801394c:	40014800 	.word	0x40014800

08013950 <HAL_TIM_PWM_Stop>:
{
 8013950:	b510      	push	{r4, lr}
 8013952:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013954:	2200      	movs	r2, #0
 8013956:	6800      	ldr	r0, [r0, #0]
 8013958:	f7ff ffc6 	bl	80138e8 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801395c:	6823      	ldr	r3, [r4, #0]
 801395e:	4a15      	ldr	r2, [pc, #84]	; (80139b4 <HAL_TIM_PWM_Stop+0x64>)
 8013960:	4293      	cmp	r3, r2
 8013962:	d01a      	beq.n	801399a <HAL_TIM_PWM_Stop+0x4a>
 8013964:	4a14      	ldr	r2, [pc, #80]	; (80139b8 <HAL_TIM_PWM_Stop+0x68>)
 8013966:	4293      	cmp	r3, r2
 8013968:	d017      	beq.n	801399a <HAL_TIM_PWM_Stop+0x4a>
 801396a:	4a14      	ldr	r2, [pc, #80]	; (80139bc <HAL_TIM_PWM_Stop+0x6c>)
 801396c:	4293      	cmp	r3, r2
 801396e:	d014      	beq.n	801399a <HAL_TIM_PWM_Stop+0x4a>
 8013970:	4a13      	ldr	r2, [pc, #76]	; (80139c0 <HAL_TIM_PWM_Stop+0x70>)
 8013972:	4293      	cmp	r3, r2
 8013974:	d011      	beq.n	801399a <HAL_TIM_PWM_Stop+0x4a>
  __HAL_TIM_DISABLE(htim);
 8013976:	6823      	ldr	r3, [r4, #0]
 8013978:	6a19      	ldr	r1, [r3, #32]
 801397a:	4a12      	ldr	r2, [pc, #72]	; (80139c4 <HAL_TIM_PWM_Stop+0x74>)
 801397c:	4211      	tst	r1, r2
 801397e:	d107      	bne.n	8013990 <HAL_TIM_PWM_Stop+0x40>
 8013980:	6a19      	ldr	r1, [r3, #32]
 8013982:	4a11      	ldr	r2, [pc, #68]	; (80139c8 <HAL_TIM_PWM_Stop+0x78>)
 8013984:	4211      	tst	r1, r2
 8013986:	d103      	bne.n	8013990 <HAL_TIM_PWM_Stop+0x40>
 8013988:	681a      	ldr	r2, [r3, #0]
 801398a:	2101      	movs	r1, #1
 801398c:	438a      	bics	r2, r1
 801398e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8013990:	2339      	movs	r3, #57	; 0x39
 8013992:	2201      	movs	r2, #1
 8013994:	54e2      	strb	r2, [r4, r3]
}
 8013996:	2000      	movs	r0, #0
 8013998:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 801399a:	6a19      	ldr	r1, [r3, #32]
 801399c:	4a09      	ldr	r2, [pc, #36]	; (80139c4 <HAL_TIM_PWM_Stop+0x74>)
 801399e:	4211      	tst	r1, r2
 80139a0:	d1e9      	bne.n	8013976 <HAL_TIM_PWM_Stop+0x26>
 80139a2:	6a19      	ldr	r1, [r3, #32]
 80139a4:	4a08      	ldr	r2, [pc, #32]	; (80139c8 <HAL_TIM_PWM_Stop+0x78>)
 80139a6:	4211      	tst	r1, r2
 80139a8:	d1e5      	bne.n	8013976 <HAL_TIM_PWM_Stop+0x26>
 80139aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80139ac:	4907      	ldr	r1, [pc, #28]	; (80139cc <HAL_TIM_PWM_Stop+0x7c>)
 80139ae:	400a      	ands	r2, r1
 80139b0:	645a      	str	r2, [r3, #68]	; 0x44
 80139b2:	e7e0      	b.n	8013976 <HAL_TIM_PWM_Stop+0x26>
 80139b4:	40012c00 	.word	0x40012c00
 80139b8:	40014000 	.word	0x40014000
 80139bc:	40014400 	.word	0x40014400
 80139c0:	40014800 	.word	0x40014800
 80139c4:	00001111 	.word	0x00001111
 80139c8:	00000444 	.word	0x00000444
 80139cc:	ffff7fff 	.word	0xffff7fff

080139d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80139d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80139d2:	2338      	movs	r3, #56	; 0x38
 80139d4:	5cc3      	ldrb	r3, [r0, r3]
 80139d6:	2b01      	cmp	r3, #1
 80139d8:	d01e      	beq.n	8013a18 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80139da:	2238      	movs	r2, #56	; 0x38
 80139dc:	2501      	movs	r5, #1
 80139de:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80139e0:	2439      	movs	r4, #57	; 0x39
 80139e2:	2302      	movs	r3, #2
 80139e4:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80139e6:	6806      	ldr	r6, [r0, #0]
 80139e8:	6873      	ldr	r3, [r6, #4]
 80139ea:	2770      	movs	r7, #112	; 0x70
 80139ec:	43bb      	bics	r3, r7
 80139ee:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80139f0:	6806      	ldr	r6, [r0, #0]
 80139f2:	6873      	ldr	r3, [r6, #4]
 80139f4:	680f      	ldr	r7, [r1, #0]
 80139f6:	433b      	orrs	r3, r7
 80139f8:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80139fa:	6806      	ldr	r6, [r0, #0]
 80139fc:	68b3      	ldr	r3, [r6, #8]
 80139fe:	2780      	movs	r7, #128	; 0x80
 8013a00:	43bb      	bics	r3, r7
 8013a02:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8013a04:	6806      	ldr	r6, [r0, #0]
 8013a06:	68b3      	ldr	r3, [r6, #8]
 8013a08:	6849      	ldr	r1, [r1, #4]
 8013a0a:	430b      	orrs	r3, r1
 8013a0c:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8013a0e:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8013a10:	2300      	movs	r3, #0
 8013a12:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8013a14:	2000      	movs	r0, #0
}
 8013a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8013a18:	2002      	movs	r0, #2
 8013a1a:	e7fc      	b.n	8013a16 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08013a1c <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8013a1c:	4770      	bx	lr

08013a1e <HAL_UART_DeInit>:
{
 8013a1e:	b570      	push	{r4, r5, r6, lr}
 8013a20:	0004      	movs	r4, r0
    return HAL_ERROR;
 8013a22:	2001      	movs	r0, #1
  if(huart == NULL)
 8013a24:	2c00      	cmp	r4, #0
 8013a26:	d016      	beq.n	8013a56 <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8013a28:	2669      	movs	r6, #105	; 0x69
 8013a2a:	2302      	movs	r3, #2
 8013a2c:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8013a2e:	6822      	ldr	r2, [r4, #0]
 8013a30:	6813      	ldr	r3, [r2, #0]
 8013a32:	2101      	movs	r1, #1
 8013a34:	438b      	bics	r3, r1
 8013a36:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8013a38:	6823      	ldr	r3, [r4, #0]
 8013a3a:	2500      	movs	r5, #0
 8013a3c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8013a3e:	6823      	ldr	r3, [r4, #0]
 8013a40:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8013a42:	6823      	ldr	r3, [r4, #0]
 8013a44:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8013a46:	0020      	movs	r0, r4
 8013a48:	f7ff ffe8 	bl	8013a1c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a4c:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8013a4e:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8013a50:	2368      	movs	r3, #104	; 0x68
 8013a52:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8013a54:	2000      	movs	r0, #0
}
 8013a56:	bd70      	pop	{r4, r5, r6, pc}

08013a58 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013a58:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013a5a:	2369      	movs	r3, #105	; 0x69
 8013a5c:	5cc3      	ldrb	r3, [r0, r3]
 8013a5e:	2b01      	cmp	r3, #1
 8013a60:	d004      	beq.n	8013a6c <HAL_UART_Transmit_IT+0x14>
 8013a62:	2369      	movs	r3, #105	; 0x69
 8013a64:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013a66:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013a68:	2c22      	cmp	r4, #34	; 0x22
 8013a6a:	d127      	bne.n	8013abc <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8013a6c:	2900      	cmp	r1, #0
 8013a6e:	d02b      	beq.n	8013ac8 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8013a70:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8013a72:	2a00      	cmp	r2, #0
 8013a74:	d022      	beq.n	8013abc <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8013a76:	3367      	adds	r3, #103	; 0x67
 8013a78:	5cc3      	ldrb	r3, [r0, r3]
 8013a7a:	2b01      	cmp	r3, #1
 8013a7c:	d026      	beq.n	8013acc <HAL_UART_Transmit_IT+0x74>
 8013a7e:	2368      	movs	r3, #104	; 0x68
 8013a80:	2401      	movs	r4, #1
 8013a82:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8013a84:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8013a86:	3b18      	subs	r3, #24
 8013a88:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8013a8a:	3302      	adds	r3, #2
 8013a8c:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013a92:	3369      	adds	r3, #105	; 0x69
 8013a94:	5cc3      	ldrb	r3, [r0, r3]
 8013a96:	2b22      	cmp	r3, #34	; 0x22
 8013a98:	d012      	beq.n	8013ac0 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013a9a:	2369      	movs	r3, #105	; 0x69
 8013a9c:	2212      	movs	r2, #18
 8013a9e:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013aa0:	6802      	ldr	r2, [r0, #0]
 8013aa2:	6893      	ldr	r3, [r2, #8]
 8013aa4:	2101      	movs	r1, #1
 8013aa6:	430b      	orrs	r3, r1
 8013aa8:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013aaa:	2368      	movs	r3, #104	; 0x68
 8013aac:	2200      	movs	r2, #0
 8013aae:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8013ab0:	6802      	ldr	r2, [r0, #0]
 8013ab2:	6813      	ldr	r3, [r2, #0]
 8013ab4:	317f      	adds	r1, #127	; 0x7f
 8013ab6:	430b      	orrs	r3, r1
 8013ab8:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8013aba:	2300      	movs	r3, #0
  }
}
 8013abc:	0018      	movs	r0, r3
 8013abe:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013ac0:	3347      	adds	r3, #71	; 0x47
 8013ac2:	2232      	movs	r2, #50	; 0x32
 8013ac4:	54c2      	strb	r2, [r0, r3]
 8013ac6:	e7eb      	b.n	8013aa0 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 8013ac8:	2301      	movs	r3, #1
 8013aca:	e7f7      	b.n	8013abc <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8013acc:	2302      	movs	r3, #2
 8013ace:	e7f5      	b.n	8013abc <HAL_UART_Transmit_IT+0x64>

08013ad0 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013ad0:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013ad2:	2369      	movs	r3, #105	; 0x69
 8013ad4:	5cc3      	ldrb	r3, [r0, r3]
 8013ad6:	2b01      	cmp	r3, #1
 8013ad8:	d004      	beq.n	8013ae4 <HAL_UART_Receive_IT+0x14>
 8013ada:	2369      	movs	r3, #105	; 0x69
 8013adc:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013ade:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013ae0:	2c12      	cmp	r4, #18
 8013ae2:	d14e      	bne.n	8013b82 <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 8013ae4:	2900      	cmp	r1, #0
 8013ae6:	d05d      	beq.n	8013ba4 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 8013ae8:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8013aea:	2a00      	cmp	r2, #0
 8013aec:	d049      	beq.n	8013b82 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8013aee:	3367      	adds	r3, #103	; 0x67
 8013af0:	5cc3      	ldrb	r3, [r0, r3]
 8013af2:	2b01      	cmp	r3, #1
 8013af4:	d058      	beq.n	8013ba8 <HAL_UART_Receive_IT+0xd8>
 8013af6:	2368      	movs	r3, #104	; 0x68
 8013af8:	2401      	movs	r4, #1
 8013afa:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 8013afc:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8013afe:	3b10      	subs	r3, #16
 8013b00:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8013b02:	3302      	adds	r3, #2
 8013b04:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 8013b06:	6883      	ldr	r3, [r0, #8]
 8013b08:	2280      	movs	r2, #128	; 0x80
 8013b0a:	0152      	lsls	r2, r2, #5
 8013b0c:	4293      	cmp	r3, r2
 8013b0e:	d008      	beq.n	8013b22 <HAL_UART_Receive_IT+0x52>
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d115      	bne.n	8013b40 <HAL_UART_Receive_IT+0x70>
 8013b14:	6903      	ldr	r3, [r0, #16]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d10e      	bne.n	8013b38 <HAL_UART_Receive_IT+0x68>
 8013b1a:	335c      	adds	r3, #92	; 0x5c
 8013b1c:	22ff      	movs	r2, #255	; 0xff
 8013b1e:	52c2      	strh	r2, [r0, r3]
 8013b20:	e012      	b.n	8013b48 <HAL_UART_Receive_IT+0x78>
 8013b22:	6903      	ldr	r3, [r0, #16]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d103      	bne.n	8013b30 <HAL_UART_Receive_IT+0x60>
 8013b28:	335c      	adds	r3, #92	; 0x5c
 8013b2a:	4a20      	ldr	r2, [pc, #128]	; (8013bac <HAL_UART_Receive_IT+0xdc>)
 8013b2c:	52c2      	strh	r2, [r0, r3]
 8013b2e:	e00b      	b.n	8013b48 <HAL_UART_Receive_IT+0x78>
 8013b30:	235c      	movs	r3, #92	; 0x5c
 8013b32:	22ff      	movs	r2, #255	; 0xff
 8013b34:	52c2      	strh	r2, [r0, r3]
 8013b36:	e007      	b.n	8013b48 <HAL_UART_Receive_IT+0x78>
 8013b38:	235c      	movs	r3, #92	; 0x5c
 8013b3a:	227f      	movs	r2, #127	; 0x7f
 8013b3c:	52c2      	strh	r2, [r0, r3]
 8013b3e:	e003      	b.n	8013b48 <HAL_UART_Receive_IT+0x78>
 8013b40:	2280      	movs	r2, #128	; 0x80
 8013b42:	0552      	lsls	r2, r2, #21
 8013b44:	4293      	cmp	r3, r2
 8013b46:	d01e      	beq.n	8013b86 <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013b4c:	3369      	adds	r3, #105	; 0x69
 8013b4e:	5cc3      	ldrb	r3, [r0, r3]
 8013b50:	2b12      	cmp	r3, #18
 8013b52:	d023      	beq.n	8013b9c <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013b54:	2369      	movs	r3, #105	; 0x69
 8013b56:	2222      	movs	r2, #34	; 0x22
 8013b58:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8013b5a:	6802      	ldr	r2, [r0, #0]
 8013b5c:	6811      	ldr	r1, [r2, #0]
 8013b5e:	2380      	movs	r3, #128	; 0x80
 8013b60:	005b      	lsls	r3, r3, #1
 8013b62:	430b      	orrs	r3, r1
 8013b64:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013b66:	6802      	ldr	r2, [r0, #0]
 8013b68:	6893      	ldr	r3, [r2, #8]
 8013b6a:	2101      	movs	r1, #1
 8013b6c:	430b      	orrs	r3, r1
 8013b6e:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013b70:	2368      	movs	r3, #104	; 0x68
 8013b72:	2200      	movs	r2, #0
 8013b74:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8013b76:	6802      	ldr	r2, [r0, #0]
 8013b78:	6813      	ldr	r3, [r2, #0]
 8013b7a:	311f      	adds	r1, #31
 8013b7c:	430b      	orrs	r3, r1
 8013b7e:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8013b80:	2300      	movs	r3, #0
  }
}
 8013b82:	0018      	movs	r0, r3
 8013b84:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8013b86:	6903      	ldr	r3, [r0, #16]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d103      	bne.n	8013b94 <HAL_UART_Receive_IT+0xc4>
 8013b8c:	335c      	adds	r3, #92	; 0x5c
 8013b8e:	227f      	movs	r2, #127	; 0x7f
 8013b90:	52c2      	strh	r2, [r0, r3]
 8013b92:	e7d9      	b.n	8013b48 <HAL_UART_Receive_IT+0x78>
 8013b94:	235c      	movs	r3, #92	; 0x5c
 8013b96:	223f      	movs	r2, #63	; 0x3f
 8013b98:	52c2      	strh	r2, [r0, r3]
 8013b9a:	e7d5      	b.n	8013b48 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013b9c:	3357      	adds	r3, #87	; 0x57
 8013b9e:	2232      	movs	r2, #50	; 0x32
 8013ba0:	54c2      	strb	r2, [r0, r3]
 8013ba2:	e7da      	b.n	8013b5a <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	e7ec      	b.n	8013b82 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8013ba8:	2302      	movs	r3, #2
 8013baa:	e7ea      	b.n	8013b82 <HAL_UART_Receive_IT+0xb2>
 8013bac:	000001ff 	.word	0x000001ff

08013bb0 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013bb0:	b510      	push	{r4, lr}
 8013bb2:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013bb4:	2369      	movs	r3, #105	; 0x69
 8013bb6:	5cc3      	ldrb	r3, [r0, r3]
 8013bb8:	2b01      	cmp	r3, #1
 8013bba:	d004      	beq.n	8013bc6 <HAL_UART_Transmit_DMA+0x16>
 8013bbc:	2369      	movs	r3, #105	; 0x69
 8013bbe:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013bc0:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013bc2:	2b22      	cmp	r3, #34	; 0x22
 8013bc4:	d134      	bne.n	8013c30 <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 8013bc6:	2900      	cmp	r1, #0
 8013bc8:	d037      	beq.n	8013c3a <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 8013bca:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8013bcc:	2a00      	cmp	r2, #0
 8013bce:	d02f      	beq.n	8013c30 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8013bd0:	2368      	movs	r3, #104	; 0x68
 8013bd2:	5ce3      	ldrb	r3, [r4, r3]
 8013bd4:	2b01      	cmp	r3, #1
 8013bd6:	d032      	beq.n	8013c3e <HAL_UART_Transmit_DMA+0x8e>
 8013bd8:	2368      	movs	r3, #104	; 0x68
 8013bda:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 8013bdc:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8013bde:	3b18      	subs	r3, #24
 8013be0:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8013be2:	3302      	adds	r3, #2
 8013be4:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013be6:	2300      	movs	r3, #0
 8013be8:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013bea:	3369      	adds	r3, #105	; 0x69
 8013bec:	5ce3      	ldrb	r3, [r4, r3]
 8013bee:	2b22      	cmp	r3, #34	; 0x22
 8013bf0:	d01f      	beq.n	8013c32 <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013bf2:	2369      	movs	r3, #105	; 0x69
 8013bf4:	2012      	movs	r0, #18
 8013bf6:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013bf8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013bfa:	4812      	ldr	r0, [pc, #72]	; (8013c44 <HAL_UART_Transmit_DMA+0x94>)
 8013bfc:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013bfe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013c00:	4811      	ldr	r0, [pc, #68]	; (8013c48 <HAL_UART_Transmit_DMA+0x98>)
 8013c02:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013c04:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013c06:	4811      	ldr	r0, [pc, #68]	; (8013c4c <HAL_UART_Transmit_DMA+0x9c>)
 8013c08:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8013c0a:	6820      	ldr	r0, [r4, #0]
 8013c0c:	3028      	adds	r0, #40	; 0x28
 8013c0e:	0013      	movs	r3, r2
 8013c10:	0002      	movs	r2, r0
 8013c12:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8013c14:	f7fd fc84 	bl	8011520 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013c18:	6823      	ldr	r3, [r4, #0]
 8013c1a:	2240      	movs	r2, #64	; 0x40
 8013c1c:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8013c1e:	6822      	ldr	r2, [r4, #0]
 8013c20:	6893      	ldr	r3, [r2, #8]
 8013c22:	2180      	movs	r1, #128	; 0x80
 8013c24:	430b      	orrs	r3, r1
 8013c26:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013c28:	2368      	movs	r3, #104	; 0x68
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013c2e:	2000      	movs	r0, #0
  }
}
 8013c30:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013c32:	3347      	adds	r3, #71	; 0x47
 8013c34:	3031      	adds	r0, #49	; 0x31
 8013c36:	54e0      	strb	r0, [r4, r3]
 8013c38:	e7de      	b.n	8013bf8 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 8013c3a:	2001      	movs	r0, #1
 8013c3c:	e7f8      	b.n	8013c30 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8013c3e:	2002      	movs	r0, #2
 8013c40:	e7f6      	b.n	8013c30 <HAL_UART_Transmit_DMA+0x80>
 8013c42:	46c0      	nop			; (mov r8, r8)
 8013c44:	08013ce9 	.word	0x08013ce9
 8013c48:	08013d1b 	.word	0x08013d1b
 8013c4c:	08013d6b 	.word	0x08013d6b

08013c50 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013c50:	b510      	push	{r4, lr}
 8013c52:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013c54:	2069      	movs	r0, #105	; 0x69
 8013c56:	5c20      	ldrb	r0, [r4, r0]
 8013c58:	2801      	cmp	r0, #1
 8013c5a:	d004      	beq.n	8013c66 <HAL_UART_Receive_DMA+0x16>
 8013c5c:	2369      	movs	r3, #105	; 0x69
 8013c5e:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013c60:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013c62:	2b12      	cmp	r3, #18
 8013c64:	d130      	bne.n	8013cc8 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8013c66:	2900      	cmp	r1, #0
 8013c68:	d033      	beq.n	8013cd2 <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 8013c6a:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8013c6c:	2a00      	cmp	r2, #0
 8013c6e:	d02b      	beq.n	8013cc8 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8013c70:	2368      	movs	r3, #104	; 0x68
 8013c72:	5ce3      	ldrb	r3, [r4, r3]
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	d02e      	beq.n	8013cd6 <HAL_UART_Receive_DMA+0x86>
 8013c78:	2368      	movs	r3, #104	; 0x68
 8013c7a:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8013c7c:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8013c7e:	3b10      	subs	r3, #16
 8013c80:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013c82:	2300      	movs	r3, #0
 8013c84:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013c86:	3369      	adds	r3, #105	; 0x69
 8013c88:	5ce3      	ldrb	r3, [r4, r3]
 8013c8a:	2b12      	cmp	r3, #18
 8013c8c:	d01d      	beq.n	8013cca <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013c8e:	2369      	movs	r3, #105	; 0x69
 8013c90:	2022      	movs	r0, #34	; 0x22
 8013c92:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013c94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c96:	4811      	ldr	r0, [pc, #68]	; (8013cdc <HAL_UART_Receive_DMA+0x8c>)
 8013c98:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c9c:	4810      	ldr	r0, [pc, #64]	; (8013ce0 <HAL_UART_Receive_DMA+0x90>)
 8013c9e:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013ca0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ca2:	4810      	ldr	r0, [pc, #64]	; (8013ce4 <HAL_UART_Receive_DMA+0x94>)
 8013ca4:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8013ca6:	6820      	ldr	r0, [r4, #0]
 8013ca8:	3024      	adds	r0, #36	; 0x24
 8013caa:	0013      	movs	r3, r2
 8013cac:	000a      	movs	r2, r1
 8013cae:	0001      	movs	r1, r0
 8013cb0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8013cb2:	f7fd fc35 	bl	8011520 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8013cb6:	6822      	ldr	r2, [r4, #0]
 8013cb8:	6893      	ldr	r3, [r2, #8]
 8013cba:	2140      	movs	r1, #64	; 0x40
 8013cbc:	430b      	orrs	r3, r1
 8013cbe:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8013cc0:	2368      	movs	r3, #104	; 0x68
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013cc6:	2000      	movs	r0, #0
  }
}
 8013cc8:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013cca:	3357      	adds	r3, #87	; 0x57
 8013ccc:	3031      	adds	r0, #49	; 0x31
 8013cce:	54e0      	strb	r0, [r4, r3]
 8013cd0:	e7e0      	b.n	8013c94 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 8013cd2:	2001      	movs	r0, #1
 8013cd4:	e7f8      	b.n	8013cc8 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8013cd6:	2002      	movs	r0, #2
 8013cd8:	e7f6      	b.n	8013cc8 <HAL_UART_Receive_DMA+0x78>
 8013cda:	46c0      	nop			; (mov r8, r8)
 8013cdc:	08013d25 	.word	0x08013d25
 8013ce0:	08013d61 	.word	0x08013d61
 8013ce4:	08013d6b 	.word	0x08013d6b

08013ce8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013ce8:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013cea:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013cec:	6802      	ldr	r2, [r0, #0]
 8013cee:	6812      	ldr	r2, [r2, #0]
 8013cf0:	0692      	lsls	r2, r2, #26
 8013cf2:	d40d      	bmi.n	8013d10 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 8013cf4:	2252      	movs	r2, #82	; 0x52
 8013cf6:	2100      	movs	r1, #0
 8013cf8:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8013cfa:	6819      	ldr	r1, [r3, #0]
 8013cfc:	688a      	ldr	r2, [r1, #8]
 8013cfe:	2080      	movs	r0, #128	; 0x80
 8013d00:	4382      	bics	r2, r0
 8013d02:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013d04:	681a      	ldr	r2, [r3, #0]
 8013d06:	6813      	ldr	r3, [r2, #0]
 8013d08:	2140      	movs	r1, #64	; 0x40
 8013d0a:	430b      	orrs	r3, r1
 8013d0c:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8013d0e:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8013d10:	0018      	movs	r0, r3
 8013d12:	f7fa f94f 	bl	800dfb4 <HAL_UART_TxCpltCallback>
}
 8013d16:	e7fa      	b.n	8013d0e <UART_DMATransmitCplt+0x26>

08013d18 <HAL_UART_TxHalfCpltCallback>:
}
 8013d18:	4770      	bx	lr

08013d1a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013d1a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8013d1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013d1e:	f7ff fffb 	bl	8013d18 <HAL_UART_TxHalfCpltCallback>
}
 8013d22:	bd10      	pop	{r4, pc}

08013d24 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013d24:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013d26:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013d28:	6802      	ldr	r2, [r0, #0]
 8013d2a:	6812      	ldr	r2, [r2, #0]
 8013d2c:	0692      	lsls	r2, r2, #26
 8013d2e:	d40e      	bmi.n	8013d4e <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8013d30:	225a      	movs	r2, #90	; 0x5a
 8013d32:	2100      	movs	r1, #0
 8013d34:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8013d36:	6819      	ldr	r1, [r3, #0]
 8013d38:	688a      	ldr	r2, [r1, #8]
 8013d3a:	2040      	movs	r0, #64	; 0x40
 8013d3c:	4382      	bics	r2, r0
 8013d3e:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013d40:	2269      	movs	r2, #105	; 0x69
 8013d42:	5c9a      	ldrb	r2, [r3, r2]
 8013d44:	2a32      	cmp	r2, #50	; 0x32
 8013d46:	d006      	beq.n	8013d56 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8013d48:	2269      	movs	r2, #105	; 0x69
 8013d4a:	2101      	movs	r1, #1
 8013d4c:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8013d4e:	0018      	movs	r0, r3
 8013d50:	f7fa f96e 	bl	800e030 <HAL_UART_RxCpltCallback>
}
 8013d54:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013d56:	3237      	adds	r2, #55	; 0x37
 8013d58:	2112      	movs	r1, #18
 8013d5a:	5499      	strb	r1, [r3, r2]
 8013d5c:	e7f7      	b.n	8013d4e <UART_DMAReceiveCplt+0x2a>

08013d5e <HAL_UART_RxHalfCpltCallback>:
}
 8013d5e:	4770      	bx	lr

08013d60 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013d60:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8013d62:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013d64:	f7ff fffb 	bl	8013d5e <HAL_UART_RxHalfCpltCallback>
}
 8013d68:	bd10      	pop	{r4, pc}

08013d6a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013d6a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013d6c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8013d6e:	2300      	movs	r3, #0
 8013d70:	225a      	movs	r2, #90	; 0x5a
 8013d72:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8013d74:	3a08      	subs	r2, #8
 8013d76:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8013d78:	3369      	adds	r3, #105	; 0x69
 8013d7a:	3a51      	subs	r2, #81	; 0x51
 8013d7c:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013d7e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013d80:	320f      	adds	r2, #15
 8013d82:	4313      	orrs	r3, r2
 8013d84:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8013d86:	f7fa f92d 	bl	800dfe4 <HAL_UART_ErrorCallback>
}
 8013d8a:	bd10      	pop	{r4, pc}

08013d8c <UART_SetConfig>:
{
 8013d8c:	b570      	push	{r4, r5, r6, lr}
 8013d8e:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013d90:	6801      	ldr	r1, [r0, #0]
 8013d92:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013d94:	6883      	ldr	r3, [r0, #8]
 8013d96:	6900      	ldr	r0, [r0, #16]
 8013d98:	4303      	orrs	r3, r0
 8013d9a:	6960      	ldr	r0, [r4, #20]
 8013d9c:	4303      	orrs	r3, r0
 8013d9e:	69e0      	ldr	r0, [r4, #28]
 8013da0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013da2:	487e      	ldr	r0, [pc, #504]	; (8013f9c <UART_SetConfig+0x210>)
 8013da4:	4002      	ands	r2, r0
 8013da6:	4313      	orrs	r3, r2
 8013da8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013daa:	6822      	ldr	r2, [r4, #0]
 8013dac:	6853      	ldr	r3, [r2, #4]
 8013dae:	497c      	ldr	r1, [pc, #496]	; (8013fa0 <UART_SetConfig+0x214>)
 8013db0:	400b      	ands	r3, r1
 8013db2:	68e1      	ldr	r1, [r4, #12]
 8013db4:	430b      	orrs	r3, r1
 8013db6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8013db8:	6821      	ldr	r1, [r4, #0]
 8013dba:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8013dbc:	69a3      	ldr	r3, [r4, #24]
 8013dbe:	6a20      	ldr	r0, [r4, #32]
 8013dc0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8013dc2:	4878      	ldr	r0, [pc, #480]	; (8013fa4 <UART_SetConfig+0x218>)
 8013dc4:	4002      	ands	r2, r0
 8013dc6:	4313      	orrs	r3, r2
 8013dc8:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013dca:	6825      	ldr	r5, [r4, #0]
 8013dcc:	4b76      	ldr	r3, [pc, #472]	; (8013fa8 <UART_SetConfig+0x21c>)
 8013dce:	429d      	cmp	r5, r3
 8013dd0:	d022      	beq.n	8013e18 <UART_SetConfig+0x8c>
 8013dd2:	4b76      	ldr	r3, [pc, #472]	; (8013fac <UART_SetConfig+0x220>)
 8013dd4:	429d      	cmp	r5, r3
 8013dd6:	d034      	beq.n	8013e42 <UART_SetConfig+0xb6>
 8013dd8:	4b75      	ldr	r3, [pc, #468]	; (8013fb0 <UART_SetConfig+0x224>)
 8013dda:	429d      	cmp	r5, r3
 8013ddc:	d100      	bne.n	8013de0 <UART_SetConfig+0x54>
 8013dde:	e06b      	b.n	8013eb8 <UART_SetConfig+0x12c>
 8013de0:	4b74      	ldr	r3, [pc, #464]	; (8013fb4 <UART_SetConfig+0x228>)
 8013de2:	429d      	cmp	r5, r3
 8013de4:	d100      	bne.n	8013de8 <UART_SetConfig+0x5c>
 8013de6:	e08e      	b.n	8013f06 <UART_SetConfig+0x17a>
 8013de8:	4b73      	ldr	r3, [pc, #460]	; (8013fb8 <UART_SetConfig+0x22c>)
 8013dea:	429d      	cmp	r5, r3
 8013dec:	d100      	bne.n	8013df0 <UART_SetConfig+0x64>
 8013dee:	e08a      	b.n	8013f06 <UART_SetConfig+0x17a>
 8013df0:	4b72      	ldr	r3, [pc, #456]	; (8013fbc <UART_SetConfig+0x230>)
 8013df2:	429d      	cmp	r5, r3
 8013df4:	d100      	bne.n	8013df8 <UART_SetConfig+0x6c>
 8013df6:	e086      	b.n	8013f06 <UART_SetConfig+0x17a>
 8013df8:	4b71      	ldr	r3, [pc, #452]	; (8013fc0 <UART_SetConfig+0x234>)
 8013dfa:	429d      	cmp	r5, r3
 8013dfc:	d100      	bne.n	8013e00 <UART_SetConfig+0x74>
 8013dfe:	e082      	b.n	8013f06 <UART_SetConfig+0x17a>
 8013e00:	4b70      	ldr	r3, [pc, #448]	; (8013fc4 <UART_SetConfig+0x238>)
 8013e02:	429d      	cmp	r5, r3
 8013e04:	d100      	bne.n	8013e08 <UART_SetConfig+0x7c>
 8013e06:	e07e      	b.n	8013f06 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013e08:	2380      	movs	r3, #128	; 0x80
 8013e0a:	021b      	lsls	r3, r3, #8
 8013e0c:	69e2      	ldr	r2, [r4, #28]
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	d100      	bne.n	8013e14 <UART_SetConfig+0x88>
 8013e12:	e072      	b.n	8013efa <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8013e14:	2001      	movs	r0, #1
 8013e16:	e04e      	b.n	8013eb6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013e18:	4b6b      	ldr	r3, [pc, #428]	; (8013fc8 <UART_SetConfig+0x23c>)
 8013e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e1c:	2303      	movs	r3, #3
 8013e1e:	4013      	ands	r3, r2
 8013e20:	2b01      	cmp	r3, #1
 8013e22:	d100      	bne.n	8013e26 <UART_SetConfig+0x9a>
 8013e24:	e09a      	b.n	8013f5c <UART_SetConfig+0x1d0>
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d02f      	beq.n	8013e8a <UART_SetConfig+0xfe>
 8013e2a:	2b02      	cmp	r3, #2
 8013e2c:	d100      	bne.n	8013e30 <UART_SetConfig+0xa4>
 8013e2e:	e0a5      	b.n	8013f7c <UART_SetConfig+0x1f0>
 8013e30:	2b03      	cmp	r3, #3
 8013e32:	d01a      	beq.n	8013e6a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013e34:	2380      	movs	r3, #128	; 0x80
 8013e36:	021b      	lsls	r3, r3, #8
 8013e38:	69e2      	ldr	r2, [r4, #28]
 8013e3a:	429a      	cmp	r2, r3
 8013e3c:	d060      	beq.n	8013f00 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 8013e3e:	2001      	movs	r0, #1
 8013e40:	e039      	b.n	8013eb6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013e42:	4b61      	ldr	r3, [pc, #388]	; (8013fc8 <UART_SetConfig+0x23c>)
 8013e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e46:	22c0      	movs	r2, #192	; 0xc0
 8013e48:	0292      	lsls	r2, r2, #10
 8013e4a:	4013      	ands	r3, r2
 8013e4c:	2280      	movs	r2, #128	; 0x80
 8013e4e:	0252      	lsls	r2, r2, #9
 8013e50:	4293      	cmp	r3, r2
 8013e52:	d100      	bne.n	8013e56 <UART_SetConfig+0xca>
 8013e54:	e082      	b.n	8013f5c <UART_SetConfig+0x1d0>
 8013e56:	d916      	bls.n	8013e86 <UART_SetConfig+0xfa>
 8013e58:	2280      	movs	r2, #128	; 0x80
 8013e5a:	0292      	lsls	r2, r2, #10
 8013e5c:	4293      	cmp	r3, r2
 8013e5e:	d100      	bne.n	8013e62 <UART_SetConfig+0xd6>
 8013e60:	e08c      	b.n	8013f7c <UART_SetConfig+0x1f0>
 8013e62:	22c0      	movs	r2, #192	; 0xc0
 8013e64:	0292      	lsls	r2, r2, #10
 8013e66:	4293      	cmp	r3, r2
 8013e68:	d1e4      	bne.n	8013e34 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013e6a:	2380      	movs	r3, #128	; 0x80
 8013e6c:	021b      	lsls	r3, r3, #8
 8013e6e:	69e2      	ldr	r2, [r4, #28]
 8013e70:	429a      	cmp	r2, r3
 8013e72:	d038      	beq.n	8013ee6 <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8013e74:	6861      	ldr	r1, [r4, #4]
 8013e76:	4855      	ldr	r0, [pc, #340]	; (8013fcc <UART_SetConfig+0x240>)
 8013e78:	f7ec f96a 	bl	8000150 <__udivsi3>
 8013e7c:	0400      	lsls	r0, r0, #16
 8013e7e:	0c00      	lsrs	r0, r0, #16
 8013e80:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013e82:	2000      	movs	r0, #0
        break;
 8013e84:	e017      	b.n	8013eb6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d1d4      	bne.n	8013e34 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013e8a:	2380      	movs	r3, #128	; 0x80
 8013e8c:	021b      	lsls	r3, r3, #8
 8013e8e:	69e2      	ldr	r2, [r4, #28]
 8013e90:	429a      	cmp	r2, r3
 8013e92:	d13d      	bne.n	8013f10 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013e94:	f7fe ff30 	bl	8012cf8 <HAL_RCC_GetPCLK1Freq>
 8013e98:	0040      	lsls	r0, r0, #1
 8013e9a:	6861      	ldr	r1, [r4, #4]
 8013e9c:	f7ec f958 	bl	8000150 <__udivsi3>
 8013ea0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013ea2:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8013ea4:	220f      	movs	r2, #15
 8013ea6:	0019      	movs	r1, r3
 8013ea8:	4391      	bics	r1, r2
 8013eaa:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8013eac:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8013eae:	071b      	lsls	r3, r3, #28
 8013eb0:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8013eb2:	4313      	orrs	r3, r2
 8013eb4:	60cb      	str	r3, [r1, #12]
}
 8013eb6:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013eb8:	4b43      	ldr	r3, [pc, #268]	; (8013fc8 <UART_SetConfig+0x23c>)
 8013eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ebc:	22c0      	movs	r2, #192	; 0xc0
 8013ebe:	0312      	lsls	r2, r2, #12
 8013ec0:	4013      	ands	r3, r2
 8013ec2:	2280      	movs	r2, #128	; 0x80
 8013ec4:	02d2      	lsls	r2, r2, #11
 8013ec6:	4293      	cmp	r3, r2
 8013ec8:	d02d      	beq.n	8013f26 <UART_SetConfig+0x19a>
 8013eca:	d913      	bls.n	8013ef4 <UART_SetConfig+0x168>
 8013ecc:	2280      	movs	r2, #128	; 0x80
 8013ece:	0312      	lsls	r2, r2, #12
 8013ed0:	4293      	cmp	r3, r2
 8013ed2:	d036      	beq.n	8013f42 <UART_SetConfig+0x1b6>
 8013ed4:	22c0      	movs	r2, #192	; 0xc0
 8013ed6:	0312      	lsls	r2, r2, #12
 8013ed8:	4293      	cmp	r3, r2
 8013eda:	d1ab      	bne.n	8013e34 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013edc:	2380      	movs	r3, #128	; 0x80
 8013ede:	021b      	lsls	r3, r3, #8
 8013ee0:	69e2      	ldr	r2, [r4, #28]
 8013ee2:	429a      	cmp	r2, r3
 8013ee4:	d1c6      	bne.n	8013e74 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8013ee6:	6861      	ldr	r1, [r4, #4]
 8013ee8:	4839      	ldr	r0, [pc, #228]	; (8013fd0 <UART_SetConfig+0x244>)
 8013eea:	f7ec f931 	bl	8000150 <__udivsi3>
 8013eee:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013ef0:	2000      	movs	r0, #0
        break;
 8013ef2:	e7d7      	b.n	8013ea4 <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d0c8      	beq.n	8013e8a <UART_SetConfig+0xfe>
 8013ef8:	e79c      	b.n	8013e34 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 8013efa:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8013efc:	2300      	movs	r3, #0
 8013efe:	e7d1      	b.n	8013ea4 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 8013f00:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8013f02:	2300      	movs	r3, #0
 8013f04:	e7ce      	b.n	8013ea4 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013f06:	2380      	movs	r3, #128	; 0x80
 8013f08:	021b      	lsls	r3, r3, #8
 8013f0a:	69e2      	ldr	r2, [r4, #28]
 8013f0c:	429a      	cmp	r2, r3
 8013f0e:	d0c1      	beq.n	8013e94 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013f10:	f7fe fef2 	bl	8012cf8 <HAL_RCC_GetPCLK1Freq>
 8013f14:	6825      	ldr	r5, [r4, #0]
 8013f16:	6861      	ldr	r1, [r4, #4]
 8013f18:	f7ec f91a 	bl	8000150 <__udivsi3>
 8013f1c:	0400      	lsls	r0, r0, #16
 8013f1e:	0c00      	lsrs	r0, r0, #16
 8013f20:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013f22:	2000      	movs	r0, #0
  return ret;
 8013f24:	e7c7      	b.n	8013eb6 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013f26:	2380      	movs	r3, #128	; 0x80
 8013f28:	021b      	lsls	r3, r3, #8
 8013f2a:	69e2      	ldr	r2, [r4, #28]
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d11a      	bne.n	8013f66 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013f30:	f7fe fe7e 	bl	8012c30 <HAL_RCC_GetSysClockFreq>
 8013f34:	0040      	lsls	r0, r0, #1
 8013f36:	6861      	ldr	r1, [r4, #4]
 8013f38:	f7ec f90a 	bl	8000150 <__udivsi3>
 8013f3c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013f3e:	2000      	movs	r0, #0
        break;
 8013f40:	e7b0      	b.n	8013ea4 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013f42:	2380      	movs	r3, #128	; 0x80
 8013f44:	021b      	lsls	r3, r3, #8
 8013f46:	69e2      	ldr	r2, [r4, #28]
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d11c      	bne.n	8013f86 <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8013f4c:	6861      	ldr	r1, [r4, #4]
 8013f4e:	2080      	movs	r0, #128	; 0x80
 8013f50:	0240      	lsls	r0, r0, #9
 8013f52:	f7ec f8fd 	bl	8000150 <__udivsi3>
 8013f56:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013f58:	2000      	movs	r0, #0
        break;
 8013f5a:	e7a3      	b.n	8013ea4 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013f5c:	2380      	movs	r3, #128	; 0x80
 8013f5e:	021b      	lsls	r3, r3, #8
 8013f60:	69e2      	ldr	r2, [r4, #28]
 8013f62:	429a      	cmp	r2, r3
 8013f64:	d0e4      	beq.n	8013f30 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013f66:	f7fe fe63 	bl	8012c30 <HAL_RCC_GetSysClockFreq>
 8013f6a:	6825      	ldr	r5, [r4, #0]
 8013f6c:	6861      	ldr	r1, [r4, #4]
 8013f6e:	f7ec f8ef 	bl	8000150 <__udivsi3>
 8013f72:	0400      	lsls	r0, r0, #16
 8013f74:	0c00      	lsrs	r0, r0, #16
 8013f76:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013f78:	2000      	movs	r0, #0
        break;
 8013f7a:	e79c      	b.n	8013eb6 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013f7c:	2380      	movs	r3, #128	; 0x80
 8013f7e:	021b      	lsls	r3, r3, #8
 8013f80:	69e2      	ldr	r2, [r4, #28]
 8013f82:	429a      	cmp	r2, r3
 8013f84:	d0e2      	beq.n	8013f4c <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8013f86:	6861      	ldr	r1, [r4, #4]
 8013f88:	2080      	movs	r0, #128	; 0x80
 8013f8a:	0200      	lsls	r0, r0, #8
 8013f8c:	f7ec f8e0 	bl	8000150 <__udivsi3>
 8013f90:	0400      	lsls	r0, r0, #16
 8013f92:	0c00      	lsrs	r0, r0, #16
 8013f94:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013f96:	2000      	movs	r0, #0
        break;
 8013f98:	e78d      	b.n	8013eb6 <UART_SetConfig+0x12a>
 8013f9a:	46c0      	nop			; (mov r8, r8)
 8013f9c:	efff69f3 	.word	0xefff69f3
 8013fa0:	ffffcfff 	.word	0xffffcfff
 8013fa4:	fffff4ff 	.word	0xfffff4ff
 8013fa8:	40013800 	.word	0x40013800
 8013fac:	40004400 	.word	0x40004400
 8013fb0:	40004800 	.word	0x40004800
 8013fb4:	40004c00 	.word	0x40004c00
 8013fb8:	40005000 	.word	0x40005000
 8013fbc:	40011400 	.word	0x40011400
 8013fc0:	40011800 	.word	0x40011800
 8013fc4:	40011c00 	.word	0x40011c00
 8013fc8:	40021000 	.word	0x40021000
 8013fcc:	007a1200 	.word	0x007a1200
 8013fd0:	00f42400 	.word	0x00f42400

08013fd4 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013fd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013fd6:	07db      	lsls	r3, r3, #31
 8013fd8:	d506      	bpl.n	8013fe8 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013fda:	6802      	ldr	r2, [r0, #0]
 8013fdc:	6853      	ldr	r3, [r2, #4]
 8013fde:	492c      	ldr	r1, [pc, #176]	; (8014090 <UART_AdvFeatureConfig+0xbc>)
 8013fe0:	400b      	ands	r3, r1
 8013fe2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013fe4:	430b      	orrs	r3, r1
 8013fe6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013fe8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013fea:	079b      	lsls	r3, r3, #30
 8013fec:	d506      	bpl.n	8013ffc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013fee:	6802      	ldr	r2, [r0, #0]
 8013ff0:	6853      	ldr	r3, [r2, #4]
 8013ff2:	4928      	ldr	r1, [pc, #160]	; (8014094 <UART_AdvFeatureConfig+0xc0>)
 8013ff4:	400b      	ands	r3, r1
 8013ff6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013ff8:	430b      	orrs	r3, r1
 8013ffa:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013ffc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013ffe:	075b      	lsls	r3, r3, #29
 8014000:	d506      	bpl.n	8014010 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014002:	6802      	ldr	r2, [r0, #0]
 8014004:	6853      	ldr	r3, [r2, #4]
 8014006:	4924      	ldr	r1, [pc, #144]	; (8014098 <UART_AdvFeatureConfig+0xc4>)
 8014008:	400b      	ands	r3, r1
 801400a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801400c:	430b      	orrs	r3, r1
 801400e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014010:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014012:	071b      	lsls	r3, r3, #28
 8014014:	d506      	bpl.n	8014024 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014016:	6802      	ldr	r2, [r0, #0]
 8014018:	6853      	ldr	r3, [r2, #4]
 801401a:	4920      	ldr	r1, [pc, #128]	; (801409c <UART_AdvFeatureConfig+0xc8>)
 801401c:	400b      	ands	r3, r1
 801401e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8014020:	430b      	orrs	r3, r1
 8014022:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014024:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014026:	06db      	lsls	r3, r3, #27
 8014028:	d506      	bpl.n	8014038 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801402a:	6802      	ldr	r2, [r0, #0]
 801402c:	6893      	ldr	r3, [r2, #8]
 801402e:	491c      	ldr	r1, [pc, #112]	; (80140a0 <UART_AdvFeatureConfig+0xcc>)
 8014030:	400b      	ands	r3, r1
 8014032:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8014034:	430b      	orrs	r3, r1
 8014036:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014038:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801403a:	069b      	lsls	r3, r3, #26
 801403c:	d506      	bpl.n	801404c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801403e:	6802      	ldr	r2, [r0, #0]
 8014040:	6893      	ldr	r3, [r2, #8]
 8014042:	4918      	ldr	r1, [pc, #96]	; (80140a4 <UART_AdvFeatureConfig+0xd0>)
 8014044:	400b      	ands	r3, r1
 8014046:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8014048:	430b      	orrs	r3, r1
 801404a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801404c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801404e:	065b      	lsls	r3, r3, #25
 8014050:	d50b      	bpl.n	801406a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014052:	6802      	ldr	r2, [r0, #0]
 8014054:	6853      	ldr	r3, [r2, #4]
 8014056:	4914      	ldr	r1, [pc, #80]	; (80140a8 <UART_AdvFeatureConfig+0xd4>)
 8014058:	400b      	ands	r3, r1
 801405a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801405c:	430b      	orrs	r3, r1
 801405e:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014060:	2380      	movs	r3, #128	; 0x80
 8014062:	035b      	lsls	r3, r3, #13
 8014064:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8014066:	429a      	cmp	r2, r3
 8014068:	d00a      	beq.n	8014080 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801406a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801406c:	061b      	lsls	r3, r3, #24
 801406e:	d506      	bpl.n	801407e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014070:	6802      	ldr	r2, [r0, #0]
 8014072:	6853      	ldr	r3, [r2, #4]
 8014074:	490d      	ldr	r1, [pc, #52]	; (80140ac <UART_AdvFeatureConfig+0xd8>)
 8014076:	400b      	ands	r3, r1
 8014078:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801407a:	430b      	orrs	r3, r1
 801407c:	6053      	str	r3, [r2, #4]
}
 801407e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014080:	6802      	ldr	r2, [r0, #0]
 8014082:	6853      	ldr	r3, [r2, #4]
 8014084:	490a      	ldr	r1, [pc, #40]	; (80140b0 <UART_AdvFeatureConfig+0xdc>)
 8014086:	400b      	ands	r3, r1
 8014088:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801408a:	430b      	orrs	r3, r1
 801408c:	6053      	str	r3, [r2, #4]
 801408e:	e7ec      	b.n	801406a <UART_AdvFeatureConfig+0x96>
 8014090:	fffdffff 	.word	0xfffdffff
 8014094:	fffeffff 	.word	0xfffeffff
 8014098:	fffbffff 	.word	0xfffbffff
 801409c:	ffff7fff 	.word	0xffff7fff
 80140a0:	ffffefff 	.word	0xffffefff
 80140a4:	ffffdfff 	.word	0xffffdfff
 80140a8:	ffefffff 	.word	0xffefffff
 80140ac:	fff7ffff 	.word	0xfff7ffff
 80140b0:	ff9fffff 	.word	0xff9fffff

080140b4 <UART_WaitOnFlagUntilTimeout>:
{
 80140b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140b6:	46c6      	mov	lr, r8
 80140b8:	b500      	push	{lr}
 80140ba:	0006      	movs	r6, r0
 80140bc:	000c      	movs	r4, r1
 80140be:	0017      	movs	r7, r2
 80140c0:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80140c2:	f7fc fcc1 	bl	8010a48 <HAL_GetTick>
 80140c6:	4680      	mov	r8, r0
  if(Status == RESET)
 80140c8:	2f00      	cmp	r7, #0
 80140ca:	d029      	beq.n	8014120 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80140cc:	6832      	ldr	r2, [r6, #0]
 80140ce:	69d3      	ldr	r3, [r2, #28]
 80140d0:	4023      	ands	r3, r4
 80140d2:	42a3      	cmp	r3, r4
 80140d4:	d152      	bne.n	801417c <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 80140d6:	1c6b      	adds	r3, r5, #1
 80140d8:	d0f9      	beq.n	80140ce <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80140da:	2d00      	cmp	r5, #0
 80140dc:	d005      	beq.n	80140ea <UART_WaitOnFlagUntilTimeout+0x36>
 80140de:	f7fc fcb3 	bl	8010a48 <HAL_GetTick>
 80140e2:	4643      	mov	r3, r8
 80140e4:	1ac0      	subs	r0, r0, r3
 80140e6:	42a8      	cmp	r0, r5
 80140e8:	d9f0      	bls.n	80140cc <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80140ea:	6832      	ldr	r2, [r6, #0]
 80140ec:	6813      	ldr	r3, [r2, #0]
 80140ee:	2180      	movs	r1, #128	; 0x80
 80140f0:	438b      	bics	r3, r1
 80140f2:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80140f4:	6832      	ldr	r2, [r6, #0]
 80140f6:	6813      	ldr	r3, [r2, #0]
 80140f8:	3960      	subs	r1, #96	; 0x60
 80140fa:	438b      	bics	r3, r1
 80140fc:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80140fe:	6832      	ldr	r2, [r6, #0]
 8014100:	6813      	ldr	r3, [r2, #0]
 8014102:	491f      	ldr	r1, [pc, #124]	; (8014180 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8014104:	400b      	ands	r3, r1
 8014106:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014108:	6831      	ldr	r1, [r6, #0]
 801410a:	688b      	ldr	r3, [r1, #8]
 801410c:	2201      	movs	r2, #1
 801410e:	4393      	bics	r3, r2
 8014110:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8014112:	2369      	movs	r3, #105	; 0x69
 8014114:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8014116:	3b01      	subs	r3, #1
 8014118:	2200      	movs	r2, #0
 801411a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801411c:	2003      	movs	r0, #3
 801411e:	e02a      	b.n	8014176 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8014120:	6832      	ldr	r2, [r6, #0]
 8014122:	69d3      	ldr	r3, [r2, #28]
 8014124:	4023      	ands	r3, r4
 8014126:	42a3      	cmp	r3, r4
 8014128:	d024      	beq.n	8014174 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 801412a:	1c6b      	adds	r3, r5, #1
 801412c:	d0f9      	beq.n	8014122 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801412e:	2d00      	cmp	r5, #0
 8014130:	d005      	beq.n	801413e <UART_WaitOnFlagUntilTimeout+0x8a>
 8014132:	f7fc fc89 	bl	8010a48 <HAL_GetTick>
 8014136:	4643      	mov	r3, r8
 8014138:	1ac0      	subs	r0, r0, r3
 801413a:	42a8      	cmp	r0, r5
 801413c:	d9f0      	bls.n	8014120 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801413e:	6832      	ldr	r2, [r6, #0]
 8014140:	6813      	ldr	r3, [r2, #0]
 8014142:	2180      	movs	r1, #128	; 0x80
 8014144:	438b      	bics	r3, r1
 8014146:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014148:	6832      	ldr	r2, [r6, #0]
 801414a:	6813      	ldr	r3, [r2, #0]
 801414c:	3960      	subs	r1, #96	; 0x60
 801414e:	438b      	bics	r3, r1
 8014150:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014152:	6832      	ldr	r2, [r6, #0]
 8014154:	6813      	ldr	r3, [r2, #0]
 8014156:	490a      	ldr	r1, [pc, #40]	; (8014180 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8014158:	400b      	ands	r3, r1
 801415a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801415c:	6831      	ldr	r1, [r6, #0]
 801415e:	688b      	ldr	r3, [r1, #8]
 8014160:	2201      	movs	r2, #1
 8014162:	4393      	bics	r3, r2
 8014164:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8014166:	2369      	movs	r3, #105	; 0x69
 8014168:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 801416a:	3b01      	subs	r3, #1
 801416c:	2200      	movs	r2, #0
 801416e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8014170:	2003      	movs	r0, #3
 8014172:	e000      	b.n	8014176 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8014174:	2000      	movs	r0, #0
}
 8014176:	bc04      	pop	{r2}
 8014178:	4690      	mov	r8, r2
 801417a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 801417c:	2000      	movs	r0, #0
 801417e:	e7fa      	b.n	8014176 <UART_WaitOnFlagUntilTimeout+0xc2>
 8014180:	fffffeff 	.word	0xfffffeff

08014184 <HAL_UART_Transmit>:
{
 8014184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014186:	b083      	sub	sp, #12
 8014188:	0004      	movs	r4, r0
 801418a:	000e      	movs	r6, r1
 801418c:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801418e:	2369      	movs	r3, #105	; 0x69
 8014190:	5cc3      	ldrb	r3, [r0, r3]
 8014192:	2b01      	cmp	r3, #1
 8014194:	d004      	beq.n	80141a0 <HAL_UART_Transmit+0x1c>
 8014196:	2369      	movs	r3, #105	; 0x69
 8014198:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 801419a:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801419c:	2b22      	cmp	r3, #34	; 0x22
 801419e:	d153      	bne.n	8014248 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 80141a0:	2e00      	cmp	r6, #0
 80141a2:	d050      	beq.n	8014246 <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 80141a4:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80141a6:	2a00      	cmp	r2, #0
 80141a8:	d04e      	beq.n	8014248 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80141aa:	2368      	movs	r3, #104	; 0x68
 80141ac:	5ce3      	ldrb	r3, [r4, r3]
 80141ae:	2b01      	cmp	r3, #1
 80141b0:	d04c      	beq.n	801424c <HAL_UART_Transmit+0xc8>
 80141b2:	2368      	movs	r3, #104	; 0x68
 80141b4:	2101      	movs	r1, #1
 80141b6:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80141b8:	2300      	movs	r3, #0
 80141ba:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80141bc:	3369      	adds	r3, #105	; 0x69
 80141be:	5ce3      	ldrb	r3, [r4, r3]
 80141c0:	2b22      	cmp	r3, #34	; 0x22
 80141c2:	d008      	beq.n	80141d6 <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80141c4:	2369      	movs	r3, #105	; 0x69
 80141c6:	2112      	movs	r1, #18
 80141c8:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80141ca:	2350      	movs	r3, #80	; 0x50
 80141cc:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80141ce:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80141d0:	2580      	movs	r5, #128	; 0x80
 80141d2:	016d      	lsls	r5, r5, #5
 80141d4:	e00a      	b.n	80141ec <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80141d6:	3347      	adds	r3, #71	; 0x47
 80141d8:	3131      	adds	r1, #49	; 0x31
 80141da:	54e1      	strb	r1, [r4, r3]
 80141dc:	e7f5      	b.n	80141ca <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80141de:	7833      	ldrb	r3, [r6, #0]
 80141e0:	6822      	ldr	r2, [r4, #0]
 80141e2:	8513      	strh	r3, [r2, #40]	; 0x28
 80141e4:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 80141e6:	5be2      	ldrh	r2, [r4, r7]
 80141e8:	2a00      	cmp	r2, #0
 80141ea:	d016      	beq.n	801421a <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 80141ec:	3a01      	subs	r2, #1
 80141ee:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80141f0:	9b01      	ldr	r3, [sp, #4]
 80141f2:	2200      	movs	r2, #0
 80141f4:	2180      	movs	r1, #128	; 0x80
 80141f6:	0020      	movs	r0, r4
 80141f8:	f7ff ff5c 	bl	80140b4 <UART_WaitOnFlagUntilTimeout>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	d127      	bne.n	8014250 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014200:	68a3      	ldr	r3, [r4, #8]
 8014202:	42ab      	cmp	r3, r5
 8014204:	d1eb      	bne.n	80141de <HAL_UART_Transmit+0x5a>
 8014206:	6923      	ldr	r3, [r4, #16]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d1e8      	bne.n	80141de <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 801420c:	8833      	ldrh	r3, [r6, #0]
 801420e:	05db      	lsls	r3, r3, #23
 8014210:	0ddb      	lsrs	r3, r3, #23
 8014212:	6822      	ldr	r2, [r4, #0]
 8014214:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8014216:	3602      	adds	r6, #2
 8014218:	e7e5      	b.n	80141e6 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 801421a:	9b01      	ldr	r3, [sp, #4]
 801421c:	2140      	movs	r1, #64	; 0x40
 801421e:	0020      	movs	r0, r4
 8014220:	f7ff ff48 	bl	80140b4 <UART_WaitOnFlagUntilTimeout>
 8014224:	2800      	cmp	r0, #0
 8014226:	d115      	bne.n	8014254 <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014228:	2369      	movs	r3, #105	; 0x69
 801422a:	5ce3      	ldrb	r3, [r4, r3]
 801422c:	2b32      	cmp	r3, #50	; 0x32
 801422e:	d006      	beq.n	801423e <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8014230:	2369      	movs	r3, #105	; 0x69
 8014232:	2201      	movs	r2, #1
 8014234:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8014236:	2368      	movs	r3, #104	; 0x68
 8014238:	2200      	movs	r2, #0
 801423a:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 801423c:	e004      	b.n	8014248 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801423e:	3337      	adds	r3, #55	; 0x37
 8014240:	2222      	movs	r2, #34	; 0x22
 8014242:	54e2      	strb	r2, [r4, r3]
 8014244:	e7f7      	b.n	8014236 <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 8014246:	2001      	movs	r0, #1
}
 8014248:	b003      	add	sp, #12
 801424a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 801424c:	2002      	movs	r0, #2
 801424e:	e7fb      	b.n	8014248 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8014250:	2003      	movs	r0, #3
 8014252:	e7f9      	b.n	8014248 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8014254:	2003      	movs	r0, #3
 8014256:	e7f7      	b.n	8014248 <HAL_UART_Transmit+0xc4>

08014258 <UART_CheckIdleState>:
{
 8014258:	b510      	push	{r4, lr}
 801425a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801425c:	2300      	movs	r3, #0
 801425e:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8014260:	6803      	ldr	r3, [r0, #0]
 8014262:	4a18      	ldr	r2, [pc, #96]	; (80142c4 <UART_CheckIdleState+0x6c>)
 8014264:	4293      	cmp	r3, r2
 8014266:	d005      	beq.n	8014274 <UART_CheckIdleState+0x1c>
 8014268:	4a17      	ldr	r2, [pc, #92]	; (80142c8 <UART_CheckIdleState+0x70>)
 801426a:	4293      	cmp	r3, r2
 801426c:	d002      	beq.n	8014274 <UART_CheckIdleState+0x1c>
 801426e:	4a17      	ldr	r2, [pc, #92]	; (80142cc <UART_CheckIdleState+0x74>)
 8014270:	4293      	cmp	r3, r2
 8014272:	d106      	bne.n	8014282 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	071b      	lsls	r3, r3, #28
 8014278:	d40b      	bmi.n	8014292 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801427a:	6823      	ldr	r3, [r4, #0]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	075b      	lsls	r3, r3, #29
 8014280:	d413      	bmi.n	80142aa <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8014282:	2369      	movs	r3, #105	; 0x69
 8014284:	2201      	movs	r2, #1
 8014286:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8014288:	3b01      	subs	r3, #1
 801428a:	2200      	movs	r2, #0
 801428c:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 801428e:	2000      	movs	r0, #0
}
 8014290:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8014292:	23fa      	movs	r3, #250	; 0xfa
 8014294:	2180      	movs	r1, #128	; 0x80
 8014296:	009b      	lsls	r3, r3, #2
 8014298:	2200      	movs	r2, #0
 801429a:	0389      	lsls	r1, r1, #14
 801429c:	0020      	movs	r0, r4
 801429e:	f7ff ff09 	bl	80140b4 <UART_WaitOnFlagUntilTimeout>
 80142a2:	2800      	cmp	r0, #0
 80142a4:	d0e9      	beq.n	801427a <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 80142a6:	2003      	movs	r0, #3
 80142a8:	e7f2      	b.n	8014290 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80142aa:	23fa      	movs	r3, #250	; 0xfa
 80142ac:	2180      	movs	r1, #128	; 0x80
 80142ae:	009b      	lsls	r3, r3, #2
 80142b0:	2200      	movs	r2, #0
 80142b2:	03c9      	lsls	r1, r1, #15
 80142b4:	0020      	movs	r0, r4
 80142b6:	f7ff fefd 	bl	80140b4 <UART_WaitOnFlagUntilTimeout>
 80142ba:	2800      	cmp	r0, #0
 80142bc:	d0e1      	beq.n	8014282 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 80142be:	2003      	movs	r0, #3
 80142c0:	e7e6      	b.n	8014290 <UART_CheckIdleState+0x38>
 80142c2:	46c0      	nop			; (mov r8, r8)
 80142c4:	40013800 	.word	0x40013800
 80142c8:	40004400 	.word	0x40004400
 80142cc:	40004800 	.word	0x40004800

080142d0 <HAL_UART_Init>:
{
 80142d0:	b510      	push	{r4, lr}
 80142d2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80142d4:	d030      	beq.n	8014338 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 80142d6:	2369      	movs	r3, #105	; 0x69
 80142d8:	5cc3      	ldrb	r3, [r0, r3]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d022      	beq.n	8014324 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 80142de:	2369      	movs	r3, #105	; 0x69
 80142e0:	2202      	movs	r2, #2
 80142e2:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80142e4:	6822      	ldr	r2, [r4, #0]
 80142e6:	6813      	ldr	r3, [r2, #0]
 80142e8:	2101      	movs	r1, #1
 80142ea:	438b      	bics	r3, r1
 80142ec:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80142ee:	0020      	movs	r0, r4
 80142f0:	f7ff fd4c 	bl	8013d8c <UART_SetConfig>
 80142f4:	2801      	cmp	r0, #1
 80142f6:	d014      	beq.n	8014322 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80142f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d118      	bne.n	8014330 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80142fe:	6822      	ldr	r2, [r4, #0]
 8014300:	6853      	ldr	r3, [r2, #4]
 8014302:	490e      	ldr	r1, [pc, #56]	; (801433c <HAL_UART_Init+0x6c>)
 8014304:	400b      	ands	r3, r1
 8014306:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8014308:	6822      	ldr	r2, [r4, #0]
 801430a:	6893      	ldr	r3, [r2, #8]
 801430c:	212a      	movs	r1, #42	; 0x2a
 801430e:	438b      	bics	r3, r1
 8014310:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8014312:	6822      	ldr	r2, [r4, #0]
 8014314:	6813      	ldr	r3, [r2, #0]
 8014316:	3929      	subs	r1, #41	; 0x29
 8014318:	430b      	orrs	r3, r1
 801431a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 801431c:	0020      	movs	r0, r4
 801431e:	f7ff ff9b 	bl	8014258 <UART_CheckIdleState>
}
 8014322:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8014324:	3368      	adds	r3, #104	; 0x68
 8014326:	2200      	movs	r2, #0
 8014328:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 801432a:	f7fa f905 	bl	800e538 <HAL_UART_MspInit>
 801432e:	e7d6      	b.n	80142de <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8014330:	0020      	movs	r0, r4
 8014332:	f7ff fe4f 	bl	8013fd4 <UART_AdvFeatureConfig>
 8014336:	e7e2      	b.n	80142fe <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8014338:	2001      	movs	r0, #1
 801433a:	e7f2      	b.n	8014322 <HAL_UART_Init+0x52>
 801433c:	ffffb7ff 	.word	0xffffb7ff

08014340 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8014340:	2369      	movs	r3, #105	; 0x69
 8014342:	5cc3      	ldrb	r3, [r0, r3]
 8014344:	2b12      	cmp	r3, #18
 8014346:	d004      	beq.n	8014352 <UART_Transmit_IT+0x12>
 8014348:	2369      	movs	r3, #105	; 0x69
 801434a:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 801434c:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801434e:	2a32      	cmp	r2, #50	; 0x32
 8014350:	d113      	bne.n	801437a <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8014352:	2352      	movs	r3, #82	; 0x52
 8014354:	5ac3      	ldrh	r3, [r0, r3]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d011      	beq.n	801437e <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801435a:	2380      	movs	r3, #128	; 0x80
 801435c:	015b      	lsls	r3, r3, #5
 801435e:	6882      	ldr	r2, [r0, #8]
 8014360:	429a      	cmp	r2, r3
 8014362:	d018      	beq.n	8014396 <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8014364:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014366:	1c5a      	adds	r2, r3, #1
 8014368:	64c2      	str	r2, [r0, #76]	; 0x4c
 801436a:	781b      	ldrb	r3, [r3, #0]
 801436c:	6802      	ldr	r2, [r0, #0]
 801436e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8014370:	2252      	movs	r2, #82	; 0x52
 8014372:	5a83      	ldrh	r3, [r0, r2]
 8014374:	3b01      	subs	r3, #1
 8014376:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8014378:	2300      	movs	r3, #0
  }
}
 801437a:	0018      	movs	r0, r3
 801437c:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801437e:	6802      	ldr	r2, [r0, #0]
 8014380:	6813      	ldr	r3, [r2, #0]
 8014382:	2180      	movs	r1, #128	; 0x80
 8014384:	438b      	bics	r3, r1
 8014386:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8014388:	6802      	ldr	r2, [r0, #0]
 801438a:	6813      	ldr	r3, [r2, #0]
 801438c:	3940      	subs	r1, #64	; 0x40
 801438e:	430b      	orrs	r3, r1
 8014390:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8014392:	2300      	movs	r3, #0
 8014394:	e7f1      	b.n	801437a <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014396:	6903      	ldr	r3, [r0, #16]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d1e3      	bne.n	8014364 <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 801439c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801439e:	881b      	ldrh	r3, [r3, #0]
 80143a0:	05db      	lsls	r3, r3, #23
 80143a2:	0ddb      	lsrs	r3, r3, #23
 80143a4:	6802      	ldr	r2, [r0, #0]
 80143a6:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80143a8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80143aa:	3302      	adds	r3, #2
 80143ac:	64c3      	str	r3, [r0, #76]	; 0x4c
 80143ae:	e7df      	b.n	8014370 <UART_Transmit_IT+0x30>

080143b0 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80143b0:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80143b2:	6802      	ldr	r2, [r0, #0]
 80143b4:	6813      	ldr	r3, [r2, #0]
 80143b6:	2140      	movs	r1, #64	; 0x40
 80143b8:	438b      	bics	r3, r1
 80143ba:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80143bc:	2369      	movs	r3, #105	; 0x69
 80143be:	5cc3      	ldrb	r3, [r0, r3]
 80143c0:	2b32      	cmp	r3, #50	; 0x32
 80143c2:	d00a      	beq.n	80143da <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80143c4:	6801      	ldr	r1, [r0, #0]
 80143c6:	688b      	ldr	r3, [r1, #8]
 80143c8:	2201      	movs	r2, #1
 80143ca:	4393      	bics	r3, r2
 80143cc:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 80143ce:	2369      	movs	r3, #105	; 0x69
 80143d0:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 80143d2:	f7f9 fdef 	bl	800dfb4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80143d6:	2000      	movs	r0, #0
 80143d8:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 80143da:	3337      	adds	r3, #55	; 0x37
 80143dc:	2222      	movs	r2, #34	; 0x22
 80143de:	54c2      	strb	r2, [r0, r3]
 80143e0:	e7f7      	b.n	80143d2 <UART_EndTransmit_IT+0x22>
	...

080143e4 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80143e4:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80143e6:	2369      	movs	r3, #105	; 0x69
 80143e8:	5cc3      	ldrb	r3, [r0, r3]
 80143ea:	2b22      	cmp	r3, #34	; 0x22
 80143ec:	d004      	beq.n	80143f8 <UART_Receive_IT+0x14>
 80143ee:	2369      	movs	r3, #105	; 0x69
 80143f0:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80143f2:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80143f4:	2b32      	cmp	r3, #50	; 0x32
 80143f6:	d12d      	bne.n	8014454 <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 80143f8:	235c      	movs	r3, #92	; 0x5c
 80143fa:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80143fc:	2280      	movs	r2, #128	; 0x80
 80143fe:	0152      	lsls	r2, r2, #5
 8014400:	6883      	ldr	r3, [r0, #8]
 8014402:	4293      	cmp	r3, r2
 8014404:	d028      	beq.n	8014458 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014406:	6803      	ldr	r3, [r0, #0]
 8014408:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801440a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801440c:	1c54      	adds	r4, r2, #1
 801440e:	6544      	str	r4, [r0, #84]	; 0x54
 8014410:	400b      	ands	r3, r1
 8014412:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8014414:	225a      	movs	r2, #90	; 0x5a
 8014416:	5a83      	ldrh	r3, [r0, r2]
 8014418:	3b01      	subs	r3, #1
 801441a:	b29b      	uxth	r3, r3
 801441c:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 801441e:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8014420:	2b00      	cmp	r3, #0
 8014422:	d117      	bne.n	8014454 <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014424:	6802      	ldr	r2, [r0, #0]
 8014426:	6813      	ldr	r3, [r2, #0]
 8014428:	2120      	movs	r1, #32
 801442a:	438b      	bics	r3, r1
 801442c:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801442e:	2369      	movs	r3, #105	; 0x69
 8014430:	5cc3      	ldrb	r3, [r0, r3]
 8014432:	2b32      	cmp	r3, #50	; 0x32
 8014434:	d01c      	beq.n	8014470 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014436:	6802      	ldr	r2, [r0, #0]
 8014438:	6813      	ldr	r3, [r2, #0]
 801443a:	490f      	ldr	r1, [pc, #60]	; (8014478 <UART_Receive_IT+0x94>)
 801443c:	400b      	ands	r3, r1
 801443e:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014440:	6801      	ldr	r1, [r0, #0]
 8014442:	688b      	ldr	r3, [r1, #8]
 8014444:	2201      	movs	r2, #1
 8014446:	4393      	bics	r3, r2
 8014448:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 801444a:	2369      	movs	r3, #105	; 0x69
 801444c:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 801444e:	f7f9 fdef 	bl	800e030 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8014452:	2200      	movs	r2, #0
  }
}
 8014454:	0010      	movs	r0, r2
 8014456:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014458:	6903      	ldr	r3, [r0, #16]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d1d3      	bne.n	8014406 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 801445e:	6803      	ldr	r3, [r0, #0]
 8014460:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014462:	400b      	ands	r3, r1
 8014464:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8014466:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8014468:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801446a:	3302      	adds	r3, #2
 801446c:	6543      	str	r3, [r0, #84]	; 0x54
 801446e:	e7d1      	b.n	8014414 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8014470:	3337      	adds	r3, #55	; 0x37
 8014472:	2212      	movs	r2, #18
 8014474:	54c2      	strb	r2, [r0, r3]
 8014476:	e7ea      	b.n	801444e <UART_Receive_IT+0x6a>
 8014478:	fffffeff 	.word	0xfffffeff

0801447c <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 801447c:	4770      	bx	lr

0801447e <HAL_UART_IRQHandler>:
{
 801447e:	b510      	push	{r4, lr}
 8014480:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8014482:	6803      	ldr	r3, [r0, #0]
 8014484:	69da      	ldr	r2, [r3, #28]
 8014486:	07d2      	lsls	r2, r2, #31
 8014488:	d509      	bpl.n	801449e <HAL_UART_IRQHandler+0x20>
 801448a:	681a      	ldr	r2, [r3, #0]
 801448c:	05d2      	lsls	r2, r2, #23
 801448e:	d506      	bpl.n	801449e <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8014490:	2201      	movs	r2, #1
 8014492:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014494:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8014496:	4313      	orrs	r3, r2
 8014498:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801449a:	2369      	movs	r3, #105	; 0x69
 801449c:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801449e:	6823      	ldr	r3, [r4, #0]
 80144a0:	69da      	ldr	r2, [r3, #28]
 80144a2:	0792      	lsls	r2, r2, #30
 80144a4:	d50b      	bpl.n	80144be <HAL_UART_IRQHandler+0x40>
 80144a6:	689a      	ldr	r2, [r3, #8]
 80144a8:	07d2      	lsls	r2, r2, #31
 80144aa:	d508      	bpl.n	80144be <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80144ac:	2202      	movs	r2, #2
 80144ae:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80144b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80144b2:	3202      	adds	r2, #2
 80144b4:	4313      	orrs	r3, r2
 80144b6:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80144b8:	2369      	movs	r3, #105	; 0x69
 80144ba:	3a03      	subs	r2, #3
 80144bc:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80144be:	6823      	ldr	r3, [r4, #0]
 80144c0:	69da      	ldr	r2, [r3, #28]
 80144c2:	0752      	lsls	r2, r2, #29
 80144c4:	d50b      	bpl.n	80144de <HAL_UART_IRQHandler+0x60>
 80144c6:	689a      	ldr	r2, [r3, #8]
 80144c8:	07d2      	lsls	r2, r2, #31
 80144ca:	d508      	bpl.n	80144de <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80144cc:	2204      	movs	r2, #4
 80144ce:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80144d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80144d2:	3a02      	subs	r2, #2
 80144d4:	4313      	orrs	r3, r2
 80144d6:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80144d8:	2369      	movs	r3, #105	; 0x69
 80144da:	3a01      	subs	r2, #1
 80144dc:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80144de:	6823      	ldr	r3, [r4, #0]
 80144e0:	69da      	ldr	r2, [r3, #28]
 80144e2:	0712      	lsls	r2, r2, #28
 80144e4:	d50a      	bpl.n	80144fc <HAL_UART_IRQHandler+0x7e>
 80144e6:	689a      	ldr	r2, [r3, #8]
 80144e8:	07d2      	lsls	r2, r2, #31
 80144ea:	d507      	bpl.n	80144fc <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80144ec:	2208      	movs	r2, #8
 80144ee:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80144f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80144f2:	4313      	orrs	r3, r2
 80144f4:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80144f6:	2369      	movs	r3, #105	; 0x69
 80144f8:	3a07      	subs	r2, #7
 80144fa:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80144fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d11c      	bne.n	801453c <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8014502:	6823      	ldr	r3, [r4, #0]
 8014504:	69da      	ldr	r2, [r3, #28]
 8014506:	02d2      	lsls	r2, r2, #11
 8014508:	d502      	bpl.n	8014510 <HAL_UART_IRQHandler+0x92>
 801450a:	689a      	ldr	r2, [r3, #8]
 801450c:	0252      	lsls	r2, r2, #9
 801450e:	d419      	bmi.n	8014544 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8014510:	6823      	ldr	r3, [r4, #0]
 8014512:	69da      	ldr	r2, [r3, #28]
 8014514:	0692      	lsls	r2, r2, #26
 8014516:	d502      	bpl.n	801451e <HAL_UART_IRQHandler+0xa0>
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	069b      	lsls	r3, r3, #26
 801451c:	d41c      	bmi.n	8014558 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 801451e:	6823      	ldr	r3, [r4, #0]
 8014520:	69da      	ldr	r2, [r3, #28]
 8014522:	0612      	lsls	r2, r2, #24
 8014524:	d502      	bpl.n	801452c <HAL_UART_IRQHandler+0xae>
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	061b      	lsls	r3, r3, #24
 801452a:	d41e      	bmi.n	801456a <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 801452c:	6823      	ldr	r3, [r4, #0]
 801452e:	69da      	ldr	r2, [r3, #28]
 8014530:	0652      	lsls	r2, r2, #25
 8014532:	d502      	bpl.n	801453a <HAL_UART_IRQHandler+0xbc>
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	065b      	lsls	r3, r3, #25
 8014538:	d41b      	bmi.n	8014572 <HAL_UART_IRQHandler+0xf4>
}
 801453a:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 801453c:	0020      	movs	r0, r4
 801453e:	f7f9 fd51 	bl	800dfe4 <HAL_UART_ErrorCallback>
 8014542:	e7de      	b.n	8014502 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8014544:	2280      	movs	r2, #128	; 0x80
 8014546:	0352      	lsls	r2, r2, #13
 8014548:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 801454a:	2369      	movs	r3, #105	; 0x69
 801454c:	2201      	movs	r2, #1
 801454e:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8014550:	0020      	movs	r0, r4
 8014552:	f7ff ff93 	bl	801447c <HAL_UARTEx_WakeupCallback>
 8014556:	e7db      	b.n	8014510 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8014558:	0020      	movs	r0, r4
 801455a:	f7ff ff43 	bl	80143e4 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801455e:	6822      	ldr	r2, [r4, #0]
 8014560:	6993      	ldr	r3, [r2, #24]
 8014562:	2108      	movs	r1, #8
 8014564:	430b      	orrs	r3, r1
 8014566:	6193      	str	r3, [r2, #24]
 8014568:	e7d9      	b.n	801451e <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 801456a:	0020      	movs	r0, r4
 801456c:	f7ff fee8 	bl	8014340 <UART_Transmit_IT>
 8014570:	e7dc      	b.n	801452c <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8014572:	0020      	movs	r0, r4
 8014574:	f7ff ff1c 	bl	80143b0 <UART_EndTransmit_IT>
}
 8014578:	e7df      	b.n	801453a <HAL_UART_IRQHandler+0xbc>

0801457a <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 801457a:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 801457c:	f7f0 f9ce 	bl	800491c <Module_Init>
 8014580:	e7fe      	b.n	8014580 <main+0x6>

08014582 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8014582:	e7fe      	b.n	8014582 <UserTask>

08014584 <atof>:
 8014584:	b510      	push	{r4, lr}
 8014586:	2100      	movs	r1, #0
 8014588:	f001 fb3e 	bl	8015c08 <strtod>
 801458c:	bd10      	pop	{r4, pc}

0801458e <atoi>:
 801458e:	b510      	push	{r4, lr}
 8014590:	220a      	movs	r2, #10
 8014592:	2100      	movs	r1, #0
 8014594:	f001 fc04 	bl	8015da0 <strtol>
 8014598:	bd10      	pop	{r4, pc}

0801459a <atol>:
 801459a:	b510      	push	{r4, lr}
 801459c:	220a      	movs	r2, #10
 801459e:	2100      	movs	r1, #0
 80145a0:	f001 fbfe 	bl	8015da0 <strtol>
 80145a4:	bd10      	pop	{r4, pc}
	...

080145a8 <__libc_init_array>:
 80145a8:	b570      	push	{r4, r5, r6, lr}
 80145aa:	2600      	movs	r6, #0
 80145ac:	4d0c      	ldr	r5, [pc, #48]	; (80145e0 <__libc_init_array+0x38>)
 80145ae:	4c0d      	ldr	r4, [pc, #52]	; (80145e4 <__libc_init_array+0x3c>)
 80145b0:	1b64      	subs	r4, r4, r5
 80145b2:	10a4      	asrs	r4, r4, #2
 80145b4:	42a6      	cmp	r6, r4
 80145b6:	d109      	bne.n	80145cc <__libc_init_array+0x24>
 80145b8:	2600      	movs	r6, #0
 80145ba:	f004 fe6d 	bl	8019298 <_init>
 80145be:	4d0a      	ldr	r5, [pc, #40]	; (80145e8 <__libc_init_array+0x40>)
 80145c0:	4c0a      	ldr	r4, [pc, #40]	; (80145ec <__libc_init_array+0x44>)
 80145c2:	1b64      	subs	r4, r4, r5
 80145c4:	10a4      	asrs	r4, r4, #2
 80145c6:	42a6      	cmp	r6, r4
 80145c8:	d105      	bne.n	80145d6 <__libc_init_array+0x2e>
 80145ca:	bd70      	pop	{r4, r5, r6, pc}
 80145cc:	00b3      	lsls	r3, r6, #2
 80145ce:	58eb      	ldr	r3, [r5, r3]
 80145d0:	4798      	blx	r3
 80145d2:	3601      	adds	r6, #1
 80145d4:	e7ee      	b.n	80145b4 <__libc_init_array+0xc>
 80145d6:	00b3      	lsls	r3, r6, #2
 80145d8:	58eb      	ldr	r3, [r5, r3]
 80145da:	4798      	blx	r3
 80145dc:	3601      	adds	r6, #1
 80145de:	e7f2      	b.n	80145c6 <__libc_init_array+0x1e>
 80145e0:	0801ccdc 	.word	0x0801ccdc
 80145e4:	0801ccdc 	.word	0x0801ccdc
 80145e8:	0801ccdc 	.word	0x0801ccdc
 80145ec:	0801cce4 	.word	0x0801cce4

080145f0 <__locale_ctype_ptr_l>:
 80145f0:	30ec      	adds	r0, #236	; 0xec
 80145f2:	6800      	ldr	r0, [r0, #0]
 80145f4:	4770      	bx	lr
	...

080145f8 <__locale_ctype_ptr>:
 80145f8:	4b04      	ldr	r3, [pc, #16]	; (801460c <__locale_ctype_ptr+0x14>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d100      	bne.n	8014604 <__locale_ctype_ptr+0xc>
 8014602:	4b03      	ldr	r3, [pc, #12]	; (8014610 <__locale_ctype_ptr+0x18>)
 8014604:	33ec      	adds	r3, #236	; 0xec
 8014606:	6818      	ldr	r0, [r3, #0]
 8014608:	4770      	bx	lr
 801460a:	46c0      	nop			; (mov r8, r8)
 801460c:	200000b8 	.word	0x200000b8
 8014610:	200004e8 	.word	0x200004e8

08014614 <malloc>:
 8014614:	b510      	push	{r4, lr}
 8014616:	4b03      	ldr	r3, [pc, #12]	; (8014624 <malloc+0x10>)
 8014618:	0001      	movs	r1, r0
 801461a:	6818      	ldr	r0, [r3, #0]
 801461c:	f000 f80e 	bl	801463c <_malloc_r>
 8014620:	bd10      	pop	{r4, pc}
 8014622:	46c0      	nop			; (mov r8, r8)
 8014624:	200000b8 	.word	0x200000b8

08014628 <free>:
 8014628:	b510      	push	{r4, lr}
 801462a:	4b03      	ldr	r3, [pc, #12]	; (8014638 <free+0x10>)
 801462c:	0001      	movs	r1, r0
 801462e:	6818      	ldr	r0, [r3, #0]
 8014630:	f003 fd10 	bl	8018054 <_free_r>
 8014634:	bd10      	pop	{r4, pc}
 8014636:	46c0      	nop			; (mov r8, r8)
 8014638:	200000b8 	.word	0x200000b8

0801463c <_malloc_r>:
 801463c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801463e:	000d      	movs	r5, r1
 8014640:	b085      	sub	sp, #20
 8014642:	350b      	adds	r5, #11
 8014644:	9001      	str	r0, [sp, #4]
 8014646:	2d16      	cmp	r5, #22
 8014648:	d908      	bls.n	801465c <_malloc_r+0x20>
 801464a:	2307      	movs	r3, #7
 801464c:	439d      	bics	r5, r3
 801464e:	d506      	bpl.n	801465e <_malloc_r+0x22>
 8014650:	230c      	movs	r3, #12
 8014652:	9a01      	ldr	r2, [sp, #4]
 8014654:	6013      	str	r3, [r2, #0]
 8014656:	2000      	movs	r0, #0
 8014658:	b005      	add	sp, #20
 801465a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801465c:	2510      	movs	r5, #16
 801465e:	428d      	cmp	r5, r1
 8014660:	d3f6      	bcc.n	8014650 <_malloc_r+0x14>
 8014662:	9801      	ldr	r0, [sp, #4]
 8014664:	f000 fa34 	bl	8014ad0 <__malloc_lock>
 8014668:	23f8      	movs	r3, #248	; 0xf8
 801466a:	33ff      	adds	r3, #255	; 0xff
 801466c:	4ac4      	ldr	r2, [pc, #784]	; (8014980 <_malloc_r+0x344>)
 801466e:	429d      	cmp	r5, r3
 8014670:	d820      	bhi.n	80146b4 <_malloc_r+0x78>
 8014672:	0029      	movs	r1, r5
 8014674:	3108      	adds	r1, #8
 8014676:	1851      	adds	r1, r2, r1
 8014678:	0008      	movs	r0, r1
 801467a:	684c      	ldr	r4, [r1, #4]
 801467c:	3808      	subs	r0, #8
 801467e:	08eb      	lsrs	r3, r5, #3
 8014680:	4284      	cmp	r4, r0
 8014682:	d104      	bne.n	801468e <_malloc_r+0x52>
 8014684:	68cc      	ldr	r4, [r1, #12]
 8014686:	3302      	adds	r3, #2
 8014688:	469c      	mov	ip, r3
 801468a:	42a1      	cmp	r1, r4
 801468c:	d02a      	beq.n	80146e4 <_malloc_r+0xa8>
 801468e:	2303      	movs	r3, #3
 8014690:	6862      	ldr	r2, [r4, #4]
 8014692:	68a1      	ldr	r1, [r4, #8]
 8014694:	439a      	bics	r2, r3
 8014696:	0013      	movs	r3, r2
 8014698:	68e2      	ldr	r2, [r4, #12]
 801469a:	18e3      	adds	r3, r4, r3
 801469c:	60ca      	str	r2, [r1, #12]
 801469e:	6091      	str	r1, [r2, #8]
 80146a0:	2201      	movs	r2, #1
 80146a2:	6859      	ldr	r1, [r3, #4]
 80146a4:	430a      	orrs	r2, r1
 80146a6:	605a      	str	r2, [r3, #4]
 80146a8:	9801      	ldr	r0, [sp, #4]
 80146aa:	f000 fa19 	bl	8014ae0 <__malloc_unlock>
 80146ae:	0020      	movs	r0, r4
 80146b0:	3008      	adds	r0, #8
 80146b2:	e7d1      	b.n	8014658 <_malloc_r+0x1c>
 80146b4:	0a69      	lsrs	r1, r5, #9
 80146b6:	233f      	movs	r3, #63	; 0x3f
 80146b8:	2900      	cmp	r1, #0
 80146ba:	d003      	beq.n	80146c4 <_malloc_r+0x88>
 80146bc:	2904      	cmp	r1, #4
 80146be:	d828      	bhi.n	8014712 <_malloc_r+0xd6>
 80146c0:	09ab      	lsrs	r3, r5, #6
 80146c2:	3338      	adds	r3, #56	; 0x38
 80146c4:	2103      	movs	r1, #3
 80146c6:	468c      	mov	ip, r1
 80146c8:	00d8      	lsls	r0, r3, #3
 80146ca:	1880      	adds	r0, r0, r2
 80146cc:	68c4      	ldr	r4, [r0, #12]
 80146ce:	4284      	cmp	r4, r0
 80146d0:	d006      	beq.n	80146e0 <_malloc_r+0xa4>
 80146d2:	4666      	mov	r6, ip
 80146d4:	6861      	ldr	r1, [r4, #4]
 80146d6:	43b1      	bics	r1, r6
 80146d8:	1b4f      	subs	r7, r1, r5
 80146da:	2f0f      	cmp	r7, #15
 80146dc:	dd31      	ble.n	8014742 <_malloc_r+0x106>
 80146de:	3b01      	subs	r3, #1
 80146e0:	3301      	adds	r3, #1
 80146e2:	469c      	mov	ip, r3
 80146e4:	6914      	ldr	r4, [r2, #16]
 80146e6:	49a7      	ldr	r1, [pc, #668]	; (8014984 <_malloc_r+0x348>)
 80146e8:	428c      	cmp	r4, r1
 80146ea:	d055      	beq.n	8014798 <_malloc_r+0x15c>
 80146ec:	2303      	movs	r3, #3
 80146ee:	6860      	ldr	r0, [r4, #4]
 80146f0:	4398      	bics	r0, r3
 80146f2:	0003      	movs	r3, r0
 80146f4:	1b46      	subs	r6, r0, r5
 80146f6:	2e0f      	cmp	r6, #15
 80146f8:	dd31      	ble.n	801475e <_malloc_r+0x122>
 80146fa:	2701      	movs	r7, #1
 80146fc:	1960      	adds	r0, r4, r5
 80146fe:	433d      	orrs	r5, r7
 8014700:	4337      	orrs	r7, r6
 8014702:	6065      	str	r5, [r4, #4]
 8014704:	6150      	str	r0, [r2, #20]
 8014706:	6110      	str	r0, [r2, #16]
 8014708:	60c1      	str	r1, [r0, #12]
 801470a:	6081      	str	r1, [r0, #8]
 801470c:	6047      	str	r7, [r0, #4]
 801470e:	50e6      	str	r6, [r4, r3]
 8014710:	e7ca      	b.n	80146a8 <_malloc_r+0x6c>
 8014712:	2914      	cmp	r1, #20
 8014714:	d802      	bhi.n	801471c <_malloc_r+0xe0>
 8014716:	000b      	movs	r3, r1
 8014718:	335b      	adds	r3, #91	; 0x5b
 801471a:	e7d3      	b.n	80146c4 <_malloc_r+0x88>
 801471c:	2954      	cmp	r1, #84	; 0x54
 801471e:	d802      	bhi.n	8014726 <_malloc_r+0xea>
 8014720:	0b2b      	lsrs	r3, r5, #12
 8014722:	336e      	adds	r3, #110	; 0x6e
 8014724:	e7ce      	b.n	80146c4 <_malloc_r+0x88>
 8014726:	23aa      	movs	r3, #170	; 0xaa
 8014728:	005b      	lsls	r3, r3, #1
 801472a:	4299      	cmp	r1, r3
 801472c:	d802      	bhi.n	8014734 <_malloc_r+0xf8>
 801472e:	0beb      	lsrs	r3, r5, #15
 8014730:	3377      	adds	r3, #119	; 0x77
 8014732:	e7c7      	b.n	80146c4 <_malloc_r+0x88>
 8014734:	4894      	ldr	r0, [pc, #592]	; (8014988 <_malloc_r+0x34c>)
 8014736:	237e      	movs	r3, #126	; 0x7e
 8014738:	4281      	cmp	r1, r0
 801473a:	d8c3      	bhi.n	80146c4 <_malloc_r+0x88>
 801473c:	0cab      	lsrs	r3, r5, #18
 801473e:	337c      	adds	r3, #124	; 0x7c
 8014740:	e7c0      	b.n	80146c4 <_malloc_r+0x88>
 8014742:	68e6      	ldr	r6, [r4, #12]
 8014744:	2f00      	cmp	r7, #0
 8014746:	db08      	blt.n	801475a <_malloc_r+0x11e>
 8014748:	68a3      	ldr	r3, [r4, #8]
 801474a:	1861      	adds	r1, r4, r1
 801474c:	60de      	str	r6, [r3, #12]
 801474e:	60b3      	str	r3, [r6, #8]
 8014750:	2301      	movs	r3, #1
 8014752:	684a      	ldr	r2, [r1, #4]
 8014754:	4313      	orrs	r3, r2
 8014756:	604b      	str	r3, [r1, #4]
 8014758:	e7a6      	b.n	80146a8 <_malloc_r+0x6c>
 801475a:	0034      	movs	r4, r6
 801475c:	e7b7      	b.n	80146ce <_malloc_r+0x92>
 801475e:	6151      	str	r1, [r2, #20]
 8014760:	6111      	str	r1, [r2, #16]
 8014762:	2e00      	cmp	r6, #0
 8014764:	db05      	blt.n	8014772 <_malloc_r+0x136>
 8014766:	2101      	movs	r1, #1
 8014768:	1823      	adds	r3, r4, r0
 801476a:	685a      	ldr	r2, [r3, #4]
 801476c:	4311      	orrs	r1, r2
 801476e:	6059      	str	r1, [r3, #4]
 8014770:	e79a      	b.n	80146a8 <_malloc_r+0x6c>
 8014772:	4986      	ldr	r1, [pc, #536]	; (801498c <_malloc_r+0x350>)
 8014774:	6857      	ldr	r7, [r2, #4]
 8014776:	4288      	cmp	r0, r1
 8014778:	d900      	bls.n	801477c <_malloc_r+0x140>
 801477a:	e090      	b.n	801489e <_malloc_r+0x262>
 801477c:	08c3      	lsrs	r3, r0, #3
 801477e:	39ff      	subs	r1, #255	; 0xff
 8014780:	1098      	asrs	r0, r3, #2
 8014782:	39ff      	subs	r1, #255	; 0xff
 8014784:	4081      	lsls	r1, r0
 8014786:	00db      	lsls	r3, r3, #3
 8014788:	4339      	orrs	r1, r7
 801478a:	6051      	str	r1, [r2, #4]
 801478c:	189a      	adds	r2, r3, r2
 801478e:	6893      	ldr	r3, [r2, #8]
 8014790:	60e2      	str	r2, [r4, #12]
 8014792:	60a3      	str	r3, [r4, #8]
 8014794:	6094      	str	r4, [r2, #8]
 8014796:	60dc      	str	r4, [r3, #12]
 8014798:	4663      	mov	r3, ip
 801479a:	2201      	movs	r2, #1
 801479c:	4978      	ldr	r1, [pc, #480]	; (8014980 <_malloc_r+0x344>)
 801479e:	109b      	asrs	r3, r3, #2
 80147a0:	6848      	ldr	r0, [r1, #4]
 80147a2:	409a      	lsls	r2, r3
 80147a4:	4290      	cmp	r0, r2
 80147a6:	d32d      	bcc.n	8014804 <_malloc_r+0x1c8>
 80147a8:	4202      	tst	r2, r0
 80147aa:	d109      	bne.n	80147c0 <_malloc_r+0x184>
 80147ac:	2303      	movs	r3, #3
 80147ae:	4664      	mov	r4, ip
 80147b0:	439c      	bics	r4, r3
 80147b2:	0023      	movs	r3, r4
 80147b4:	3304      	adds	r3, #4
 80147b6:	469c      	mov	ip, r3
 80147b8:	0052      	lsls	r2, r2, #1
 80147ba:	4202      	tst	r2, r0
 80147bc:	d100      	bne.n	80147c0 <_malloc_r+0x184>
 80147be:	e0a4      	b.n	801490a <_malloc_r+0x2ce>
 80147c0:	4663      	mov	r3, ip
 80147c2:	00db      	lsls	r3, r3, #3
 80147c4:	18cb      	adds	r3, r1, r3
 80147c6:	9303      	str	r3, [sp, #12]
 80147c8:	001f      	movs	r7, r3
 80147ca:	4663      	mov	r3, ip
 80147cc:	9302      	str	r3, [sp, #8]
 80147ce:	68fc      	ldr	r4, [r7, #12]
 80147d0:	42bc      	cmp	r4, r7
 80147d2:	d000      	beq.n	80147d6 <_malloc_r+0x19a>
 80147d4:	e09c      	b.n	8014910 <_malloc_r+0x2d4>
 80147d6:	2003      	movs	r0, #3
 80147d8:	9b02      	ldr	r3, [sp, #8]
 80147da:	3708      	adds	r7, #8
 80147dc:	3301      	adds	r3, #1
 80147de:	9302      	str	r3, [sp, #8]
 80147e0:	4203      	tst	r3, r0
 80147e2:	d1f4      	bne.n	80147ce <_malloc_r+0x192>
 80147e4:	4663      	mov	r3, ip
 80147e6:	2003      	movs	r0, #3
 80147e8:	4203      	tst	r3, r0
 80147ea:	d000      	beq.n	80147ee <_malloc_r+0x1b2>
 80147ec:	e0b3      	b.n	8014956 <_malloc_r+0x31a>
 80147ee:	684b      	ldr	r3, [r1, #4]
 80147f0:	4393      	bics	r3, r2
 80147f2:	604b      	str	r3, [r1, #4]
 80147f4:	4b62      	ldr	r3, [pc, #392]	; (8014980 <_malloc_r+0x344>)
 80147f6:	0052      	lsls	r2, r2, #1
 80147f8:	685b      	ldr	r3, [r3, #4]
 80147fa:	4293      	cmp	r3, r2
 80147fc:	d302      	bcc.n	8014804 <_malloc_r+0x1c8>
 80147fe:	2a00      	cmp	r2, #0
 8014800:	d000      	beq.n	8014804 <_malloc_r+0x1c8>
 8014802:	e0b9      	b.n	8014978 <_malloc_r+0x33c>
 8014804:	2303      	movs	r3, #3
 8014806:	688f      	ldr	r7, [r1, #8]
 8014808:	687a      	ldr	r2, [r7, #4]
 801480a:	439a      	bics	r2, r3
 801480c:	9202      	str	r2, [sp, #8]
 801480e:	42aa      	cmp	r2, r5
 8014810:	d303      	bcc.n	801481a <_malloc_r+0x1de>
 8014812:	1b52      	subs	r2, r2, r5
 8014814:	2a0f      	cmp	r2, #15
 8014816:	dd00      	ble.n	801481a <_malloc_r+0x1de>
 8014818:	e116      	b.n	8014a48 <_malloc_r+0x40c>
 801481a:	4b5d      	ldr	r3, [pc, #372]	; (8014990 <_malloc_r+0x354>)
 801481c:	2008      	movs	r0, #8
 801481e:	681e      	ldr	r6, [r3, #0]
 8014820:	f002 fd26 	bl	8017270 <sysconf>
 8014824:	4b5b      	ldr	r3, [pc, #364]	; (8014994 <_malloc_r+0x358>)
 8014826:	3610      	adds	r6, #16
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	1976      	adds	r6, r6, r5
 801482c:	9003      	str	r0, [sp, #12]
 801482e:	3301      	adds	r3, #1
 8014830:	d003      	beq.n	801483a <_malloc_r+0x1fe>
 8014832:	3e01      	subs	r6, #1
 8014834:	1836      	adds	r6, r6, r0
 8014836:	4243      	negs	r3, r0
 8014838:	401e      	ands	r6, r3
 801483a:	0031      	movs	r1, r6
 801483c:	9801      	ldr	r0, [sp, #4]
 801483e:	f000 fb27 	bl	8014e90 <_sbrk_r>
 8014842:	0004      	movs	r4, r0
 8014844:	1c43      	adds	r3, r0, #1
 8014846:	d100      	bne.n	801484a <_malloc_r+0x20e>
 8014848:	e0d6      	b.n	80149f8 <_malloc_r+0x3bc>
 801484a:	9b02      	ldr	r3, [sp, #8]
 801484c:	18fb      	adds	r3, r7, r3
 801484e:	4283      	cmp	r3, r0
 8014850:	d903      	bls.n	801485a <_malloc_r+0x21e>
 8014852:	4a4b      	ldr	r2, [pc, #300]	; (8014980 <_malloc_r+0x344>)
 8014854:	4297      	cmp	r7, r2
 8014856:	d000      	beq.n	801485a <_malloc_r+0x21e>
 8014858:	e0ce      	b.n	80149f8 <_malloc_r+0x3bc>
 801485a:	494f      	ldr	r1, [pc, #316]	; (8014998 <_malloc_r+0x35c>)
 801485c:	680a      	ldr	r2, [r1, #0]
 801485e:	18b2      	adds	r2, r6, r2
 8014860:	600a      	str	r2, [r1, #0]
 8014862:	9903      	ldr	r1, [sp, #12]
 8014864:	4694      	mov	ip, r2
 8014866:	1e48      	subs	r0, r1, #1
 8014868:	42a3      	cmp	r3, r4
 801486a:	d000      	beq.n	801486e <_malloc_r+0x232>
 801486c:	e09a      	b.n	80149a4 <_malloc_r+0x368>
 801486e:	4203      	tst	r3, r0
 8014870:	d000      	beq.n	8014874 <_malloc_r+0x238>
 8014872:	e097      	b.n	80149a4 <_malloc_r+0x368>
 8014874:	9a02      	ldr	r2, [sp, #8]
 8014876:	4b42      	ldr	r3, [pc, #264]	; (8014980 <_malloc_r+0x344>)
 8014878:	1992      	adds	r2, r2, r6
 801487a:	2601      	movs	r6, #1
 801487c:	689b      	ldr	r3, [r3, #8]
 801487e:	4316      	orrs	r6, r2
 8014880:	605e      	str	r6, [r3, #4]
 8014882:	4b45      	ldr	r3, [pc, #276]	; (8014998 <_malloc_r+0x35c>)
 8014884:	4a45      	ldr	r2, [pc, #276]	; (801499c <_malloc_r+0x360>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	6811      	ldr	r1, [r2, #0]
 801488a:	428b      	cmp	r3, r1
 801488c:	d900      	bls.n	8014890 <_malloc_r+0x254>
 801488e:	6013      	str	r3, [r2, #0]
 8014890:	4a43      	ldr	r2, [pc, #268]	; (80149a0 <_malloc_r+0x364>)
 8014892:	6811      	ldr	r1, [r2, #0]
 8014894:	428b      	cmp	r3, r1
 8014896:	d800      	bhi.n	801489a <_malloc_r+0x25e>
 8014898:	e0ae      	b.n	80149f8 <_malloc_r+0x3bc>
 801489a:	6013      	str	r3, [r2, #0]
 801489c:	e0ac      	b.n	80149f8 <_malloc_r+0x3bc>
 801489e:	0a40      	lsrs	r0, r0, #9
 80148a0:	2804      	cmp	r0, #4
 80148a2:	d810      	bhi.n	80148c6 <_malloc_r+0x28a>
 80148a4:	0999      	lsrs	r1, r3, #6
 80148a6:	3138      	adds	r1, #56	; 0x38
 80148a8:	00ce      	lsls	r6, r1, #3
 80148aa:	18b6      	adds	r6, r6, r2
 80148ac:	68b0      	ldr	r0, [r6, #8]
 80148ae:	4286      	cmp	r6, r0
 80148b0:	d124      	bne.n	80148fc <_malloc_r+0x2c0>
 80148b2:	2301      	movs	r3, #1
 80148b4:	1089      	asrs	r1, r1, #2
 80148b6:	408b      	lsls	r3, r1
 80148b8:	433b      	orrs	r3, r7
 80148ba:	6053      	str	r3, [r2, #4]
 80148bc:	60e6      	str	r6, [r4, #12]
 80148be:	60a0      	str	r0, [r4, #8]
 80148c0:	60b4      	str	r4, [r6, #8]
 80148c2:	60c4      	str	r4, [r0, #12]
 80148c4:	e768      	b.n	8014798 <_malloc_r+0x15c>
 80148c6:	2814      	cmp	r0, #20
 80148c8:	d802      	bhi.n	80148d0 <_malloc_r+0x294>
 80148ca:	0001      	movs	r1, r0
 80148cc:	315b      	adds	r1, #91	; 0x5b
 80148ce:	e7eb      	b.n	80148a8 <_malloc_r+0x26c>
 80148d0:	2854      	cmp	r0, #84	; 0x54
 80148d2:	d802      	bhi.n	80148da <_malloc_r+0x29e>
 80148d4:	0b19      	lsrs	r1, r3, #12
 80148d6:	316e      	adds	r1, #110	; 0x6e
 80148d8:	e7e6      	b.n	80148a8 <_malloc_r+0x26c>
 80148da:	21aa      	movs	r1, #170	; 0xaa
 80148dc:	0049      	lsls	r1, r1, #1
 80148de:	4288      	cmp	r0, r1
 80148e0:	d802      	bhi.n	80148e8 <_malloc_r+0x2ac>
 80148e2:	0bd9      	lsrs	r1, r3, #15
 80148e4:	3177      	adds	r1, #119	; 0x77
 80148e6:	e7df      	b.n	80148a8 <_malloc_r+0x26c>
 80148e8:	4e27      	ldr	r6, [pc, #156]	; (8014988 <_malloc_r+0x34c>)
 80148ea:	217e      	movs	r1, #126	; 0x7e
 80148ec:	42b0      	cmp	r0, r6
 80148ee:	d8db      	bhi.n	80148a8 <_malloc_r+0x26c>
 80148f0:	0c99      	lsrs	r1, r3, #18
 80148f2:	317c      	adds	r1, #124	; 0x7c
 80148f4:	e7d8      	b.n	80148a8 <_malloc_r+0x26c>
 80148f6:	6880      	ldr	r0, [r0, #8]
 80148f8:	4286      	cmp	r6, r0
 80148fa:	d004      	beq.n	8014906 <_malloc_r+0x2ca>
 80148fc:	2103      	movs	r1, #3
 80148fe:	6842      	ldr	r2, [r0, #4]
 8014900:	438a      	bics	r2, r1
 8014902:	429a      	cmp	r2, r3
 8014904:	d8f7      	bhi.n	80148f6 <_malloc_r+0x2ba>
 8014906:	68c6      	ldr	r6, [r0, #12]
 8014908:	e7d8      	b.n	80148bc <_malloc_r+0x280>
 801490a:	2304      	movs	r3, #4
 801490c:	449c      	add	ip, r3
 801490e:	e753      	b.n	80147b8 <_malloc_r+0x17c>
 8014910:	2003      	movs	r0, #3
 8014912:	6863      	ldr	r3, [r4, #4]
 8014914:	4383      	bics	r3, r0
 8014916:	1b5e      	subs	r6, r3, r5
 8014918:	68e0      	ldr	r0, [r4, #12]
 801491a:	2e0f      	cmp	r6, #15
 801491c:	dd0e      	ble.n	801493c <_malloc_r+0x300>
 801491e:	2701      	movs	r7, #1
 8014920:	1962      	adds	r2, r4, r5
 8014922:	433d      	orrs	r5, r7
 8014924:	6065      	str	r5, [r4, #4]
 8014926:	68a5      	ldr	r5, [r4, #8]
 8014928:	4337      	orrs	r7, r6
 801492a:	60e8      	str	r0, [r5, #12]
 801492c:	6085      	str	r5, [r0, #8]
 801492e:	614a      	str	r2, [r1, #20]
 8014930:	610a      	str	r2, [r1, #16]
 8014932:	4914      	ldr	r1, [pc, #80]	; (8014984 <_malloc_r+0x348>)
 8014934:	6057      	str	r7, [r2, #4]
 8014936:	60d1      	str	r1, [r2, #12]
 8014938:	6091      	str	r1, [r2, #8]
 801493a:	e6e8      	b.n	801470e <_malloc_r+0xd2>
 801493c:	2e00      	cmp	r6, #0
 801493e:	db08      	blt.n	8014952 <_malloc_r+0x316>
 8014940:	2201      	movs	r2, #1
 8014942:	18e3      	adds	r3, r4, r3
 8014944:	6859      	ldr	r1, [r3, #4]
 8014946:	430a      	orrs	r2, r1
 8014948:	605a      	str	r2, [r3, #4]
 801494a:	68a3      	ldr	r3, [r4, #8]
 801494c:	60d8      	str	r0, [r3, #12]
 801494e:	6083      	str	r3, [r0, #8]
 8014950:	e6aa      	b.n	80146a8 <_malloc_r+0x6c>
 8014952:	0004      	movs	r4, r0
 8014954:	e73c      	b.n	80147d0 <_malloc_r+0x194>
 8014956:	2301      	movs	r3, #1
 8014958:	425b      	negs	r3, r3
 801495a:	449c      	add	ip, r3
 801495c:	9b03      	ldr	r3, [sp, #12]
 801495e:	6818      	ldr	r0, [r3, #0]
 8014960:	3b08      	subs	r3, #8
 8014962:	9003      	str	r0, [sp, #12]
 8014964:	4298      	cmp	r0, r3
 8014966:	d100      	bne.n	801496a <_malloc_r+0x32e>
 8014968:	e73c      	b.n	80147e4 <_malloc_r+0x1a8>
 801496a:	e743      	b.n	80147f4 <_malloc_r+0x1b8>
 801496c:	2004      	movs	r0, #4
 801496e:	0052      	lsls	r2, r2, #1
 8014970:	4484      	add	ip, r0
 8014972:	421a      	tst	r2, r3
 8014974:	d0fa      	beq.n	801496c <_malloc_r+0x330>
 8014976:	e723      	b.n	80147c0 <_malloc_r+0x184>
 8014978:	9802      	ldr	r0, [sp, #8]
 801497a:	4684      	mov	ip, r0
 801497c:	e7f9      	b.n	8014972 <_malloc_r+0x336>
 801497e:	46c0      	nop			; (mov r8, r8)
 8014980:	20000654 	.word	0x20000654
 8014984:	2000065c 	.word	0x2000065c
 8014988:	00000554 	.word	0x00000554
 801498c:	000001ff 	.word	0x000001ff
 8014990:	20006b68 	.word	0x20006b68
 8014994:	20000a5c 	.word	0x20000a5c
 8014998:	20006b38 	.word	0x20006b38
 801499c:	20006b60 	.word	0x20006b60
 80149a0:	20006b64 	.word	0x20006b64
 80149a4:	492e      	ldr	r1, [pc, #184]	; (8014a60 <_malloc_r+0x424>)
 80149a6:	680a      	ldr	r2, [r1, #0]
 80149a8:	3201      	adds	r2, #1
 80149aa:	d133      	bne.n	8014a14 <_malloc_r+0x3d8>
 80149ac:	600c      	str	r4, [r1, #0]
 80149ae:	2307      	movs	r3, #7
 80149b0:	4023      	ands	r3, r4
 80149b2:	d002      	beq.n	80149ba <_malloc_r+0x37e>
 80149b4:	2208      	movs	r2, #8
 80149b6:	1ad3      	subs	r3, r2, r3
 80149b8:	18e4      	adds	r4, r4, r3
 80149ba:	9a03      	ldr	r2, [sp, #12]
 80149bc:	19a6      	adds	r6, r4, r6
 80149be:	18d3      	adds	r3, r2, r3
 80149c0:	4006      	ands	r6, r0
 80149c2:	1b9e      	subs	r6, r3, r6
 80149c4:	0031      	movs	r1, r6
 80149c6:	9801      	ldr	r0, [sp, #4]
 80149c8:	f000 fa62 	bl	8014e90 <_sbrk_r>
 80149cc:	1c43      	adds	r3, r0, #1
 80149ce:	d101      	bne.n	80149d4 <_malloc_r+0x398>
 80149d0:	0020      	movs	r0, r4
 80149d2:	2600      	movs	r6, #0
 80149d4:	4a23      	ldr	r2, [pc, #140]	; (8014a64 <_malloc_r+0x428>)
 80149d6:	1b00      	subs	r0, r0, r4
 80149d8:	6813      	ldr	r3, [r2, #0]
 80149da:	199b      	adds	r3, r3, r6
 80149dc:	6013      	str	r3, [r2, #0]
 80149de:	2301      	movs	r3, #1
 80149e0:	4a21      	ldr	r2, [pc, #132]	; (8014a68 <_malloc_r+0x42c>)
 80149e2:	1986      	adds	r6, r0, r6
 80149e4:	431e      	orrs	r6, r3
 80149e6:	6094      	str	r4, [r2, #8]
 80149e8:	6066      	str	r6, [r4, #4]
 80149ea:	4297      	cmp	r7, r2
 80149ec:	d100      	bne.n	80149f0 <_malloc_r+0x3b4>
 80149ee:	e748      	b.n	8014882 <_malloc_r+0x246>
 80149f0:	9a02      	ldr	r2, [sp, #8]
 80149f2:	2a0f      	cmp	r2, #15
 80149f4:	d813      	bhi.n	8014a1e <_malloc_r+0x3e2>
 80149f6:	6063      	str	r3, [r4, #4]
 80149f8:	2203      	movs	r2, #3
 80149fa:	4b1b      	ldr	r3, [pc, #108]	; (8014a68 <_malloc_r+0x42c>)
 80149fc:	689b      	ldr	r3, [r3, #8]
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	4393      	bics	r3, r2
 8014a02:	1b5a      	subs	r2, r3, r5
 8014a04:	42ab      	cmp	r3, r5
 8014a06:	d301      	bcc.n	8014a0c <_malloc_r+0x3d0>
 8014a08:	2a0f      	cmp	r2, #15
 8014a0a:	dc1d      	bgt.n	8014a48 <_malloc_r+0x40c>
 8014a0c:	9801      	ldr	r0, [sp, #4]
 8014a0e:	f000 f867 	bl	8014ae0 <__malloc_unlock>
 8014a12:	e620      	b.n	8014656 <_malloc_r+0x1a>
 8014a14:	1ae3      	subs	r3, r4, r3
 8014a16:	4a13      	ldr	r2, [pc, #76]	; (8014a64 <_malloc_r+0x428>)
 8014a18:	4463      	add	r3, ip
 8014a1a:	6013      	str	r3, [r2, #0]
 8014a1c:	e7c7      	b.n	80149ae <_malloc_r+0x372>
 8014a1e:	2207      	movs	r2, #7
 8014a20:	9e02      	ldr	r6, [sp, #8]
 8014a22:	3e0c      	subs	r6, #12
 8014a24:	4396      	bics	r6, r2
 8014a26:	687a      	ldr	r2, [r7, #4]
 8014a28:	4013      	ands	r3, r2
 8014a2a:	2205      	movs	r2, #5
 8014a2c:	4333      	orrs	r3, r6
 8014a2e:	607b      	str	r3, [r7, #4]
 8014a30:	19bb      	adds	r3, r7, r6
 8014a32:	605a      	str	r2, [r3, #4]
 8014a34:	609a      	str	r2, [r3, #8]
 8014a36:	2e0f      	cmp	r6, #15
 8014a38:	d800      	bhi.n	8014a3c <_malloc_r+0x400>
 8014a3a:	e722      	b.n	8014882 <_malloc_r+0x246>
 8014a3c:	0039      	movs	r1, r7
 8014a3e:	9801      	ldr	r0, [sp, #4]
 8014a40:	3108      	adds	r1, #8
 8014a42:	f003 fb07 	bl	8018054 <_free_r>
 8014a46:	e71c      	b.n	8014882 <_malloc_r+0x246>
 8014a48:	2301      	movs	r3, #1
 8014a4a:	0018      	movs	r0, r3
 8014a4c:	4906      	ldr	r1, [pc, #24]	; (8014a68 <_malloc_r+0x42c>)
 8014a4e:	4328      	orrs	r0, r5
 8014a50:	688c      	ldr	r4, [r1, #8]
 8014a52:	4313      	orrs	r3, r2
 8014a54:	1965      	adds	r5, r4, r5
 8014a56:	6060      	str	r0, [r4, #4]
 8014a58:	608d      	str	r5, [r1, #8]
 8014a5a:	606b      	str	r3, [r5, #4]
 8014a5c:	e624      	b.n	80146a8 <_malloc_r+0x6c>
 8014a5e:	46c0      	nop			; (mov r8, r8)
 8014a60:	20000a5c 	.word	0x20000a5c
 8014a64:	20006b38 	.word	0x20006b38
 8014a68:	20000654 	.word	0x20000654

08014a6c <__ascii_mbtowc>:
 8014a6c:	b082      	sub	sp, #8
 8014a6e:	2900      	cmp	r1, #0
 8014a70:	d100      	bne.n	8014a74 <__ascii_mbtowc+0x8>
 8014a72:	a901      	add	r1, sp, #4
 8014a74:	1e10      	subs	r0, r2, #0
 8014a76:	d006      	beq.n	8014a86 <__ascii_mbtowc+0x1a>
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d006      	beq.n	8014a8a <__ascii_mbtowc+0x1e>
 8014a7c:	7813      	ldrb	r3, [r2, #0]
 8014a7e:	600b      	str	r3, [r1, #0]
 8014a80:	7810      	ldrb	r0, [r2, #0]
 8014a82:	1e43      	subs	r3, r0, #1
 8014a84:	4198      	sbcs	r0, r3
 8014a86:	b002      	add	sp, #8
 8014a88:	4770      	bx	lr
 8014a8a:	2002      	movs	r0, #2
 8014a8c:	4240      	negs	r0, r0
 8014a8e:	e7fa      	b.n	8014a86 <__ascii_mbtowc+0x1a>

08014a90 <memcmp>:
 8014a90:	b530      	push	{r4, r5, lr}
 8014a92:	2400      	movs	r4, #0
 8014a94:	42a2      	cmp	r2, r4
 8014a96:	d101      	bne.n	8014a9c <memcmp+0xc>
 8014a98:	2000      	movs	r0, #0
 8014a9a:	e005      	b.n	8014aa8 <memcmp+0x18>
 8014a9c:	5d03      	ldrb	r3, [r0, r4]
 8014a9e:	1c65      	adds	r5, r4, #1
 8014aa0:	5d0c      	ldrb	r4, [r1, r4]
 8014aa2:	42a3      	cmp	r3, r4
 8014aa4:	d001      	beq.n	8014aaa <memcmp+0x1a>
 8014aa6:	1b18      	subs	r0, r3, r4
 8014aa8:	bd30      	pop	{r4, r5, pc}
 8014aaa:	002c      	movs	r4, r5
 8014aac:	e7f2      	b.n	8014a94 <memcmp+0x4>

08014aae <memcpy>:
 8014aae:	2300      	movs	r3, #0
 8014ab0:	b510      	push	{r4, lr}
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d100      	bne.n	8014ab8 <memcpy+0xa>
 8014ab6:	bd10      	pop	{r4, pc}
 8014ab8:	5ccc      	ldrb	r4, [r1, r3]
 8014aba:	54c4      	strb	r4, [r0, r3]
 8014abc:	3301      	adds	r3, #1
 8014abe:	e7f8      	b.n	8014ab2 <memcpy+0x4>

08014ac0 <memset>:
 8014ac0:	0003      	movs	r3, r0
 8014ac2:	1812      	adds	r2, r2, r0
 8014ac4:	4293      	cmp	r3, r2
 8014ac6:	d100      	bne.n	8014aca <memset+0xa>
 8014ac8:	4770      	bx	lr
 8014aca:	7019      	strb	r1, [r3, #0]
 8014acc:	3301      	adds	r3, #1
 8014ace:	e7f9      	b.n	8014ac4 <memset+0x4>

08014ad0 <__malloc_lock>:
 8014ad0:	b510      	push	{r4, lr}
 8014ad2:	4802      	ldr	r0, [pc, #8]	; (8014adc <__malloc_lock+0xc>)
 8014ad4:	f003 feb2 	bl	801883c <__retarget_lock_acquire_recursive>
 8014ad8:	bd10      	pop	{r4, pc}
 8014ada:	46c0      	nop			; (mov r8, r8)
 8014adc:	20007104 	.word	0x20007104

08014ae0 <__malloc_unlock>:
 8014ae0:	b510      	push	{r4, lr}
 8014ae2:	4802      	ldr	r0, [pc, #8]	; (8014aec <__malloc_unlock+0xc>)
 8014ae4:	f003 feab 	bl	801883e <__retarget_lock_release_recursive>
 8014ae8:	bd10      	pop	{r4, pc}
 8014aea:	46c0      	nop			; (mov r8, r8)
 8014aec:	20007104 	.word	0x20007104

08014af0 <rand>:
 8014af0:	4b09      	ldr	r3, [pc, #36]	; (8014b18 <rand+0x28>)
 8014af2:	b510      	push	{r4, lr}
 8014af4:	681c      	ldr	r4, [r3, #0]
 8014af6:	4a09      	ldr	r2, [pc, #36]	; (8014b1c <rand+0x2c>)
 8014af8:	34a8      	adds	r4, #168	; 0xa8
 8014afa:	6820      	ldr	r0, [r4, #0]
 8014afc:	6861      	ldr	r1, [r4, #4]
 8014afe:	4b08      	ldr	r3, [pc, #32]	; (8014b20 <rand+0x30>)
 8014b00:	f7eb fd34 	bl	800056c <__aeabi_lmul>
 8014b04:	2201      	movs	r2, #1
 8014b06:	2300      	movs	r3, #0
 8014b08:	1880      	adds	r0, r0, r2
 8014b0a:	4159      	adcs	r1, r3
 8014b0c:	6020      	str	r0, [r4, #0]
 8014b0e:	6061      	str	r1, [r4, #4]
 8014b10:	0048      	lsls	r0, r1, #1
 8014b12:	0840      	lsrs	r0, r0, #1
 8014b14:	bd10      	pop	{r4, pc}
 8014b16:	46c0      	nop			; (mov r8, r8)
 8014b18:	200000b8 	.word	0x200000b8
 8014b1c:	4c957f2d 	.word	0x4c957f2d
 8014b20:	5851f42d 	.word	0x5851f42d

08014b24 <realloc>:
 8014b24:	b510      	push	{r4, lr}
 8014b26:	4b03      	ldr	r3, [pc, #12]	; (8014b34 <realloc+0x10>)
 8014b28:	000a      	movs	r2, r1
 8014b2a:	0001      	movs	r1, r0
 8014b2c:	6818      	ldr	r0, [r3, #0]
 8014b2e:	f000 f803 	bl	8014b38 <_realloc_r>
 8014b32:	bd10      	pop	{r4, pc}
 8014b34:	200000b8 	.word	0x200000b8

08014b38 <_realloc_r>:
 8014b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b3a:	b087      	sub	sp, #28
 8014b3c:	9003      	str	r0, [sp, #12]
 8014b3e:	1e0c      	subs	r4, r1, #0
 8014b40:	9205      	str	r2, [sp, #20]
 8014b42:	d106      	bne.n	8014b52 <_realloc_r+0x1a>
 8014b44:	0011      	movs	r1, r2
 8014b46:	f7ff fd79 	bl	801463c <_malloc_r>
 8014b4a:	0007      	movs	r7, r0
 8014b4c:	0038      	movs	r0, r7
 8014b4e:	b007      	add	sp, #28
 8014b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b52:	9803      	ldr	r0, [sp, #12]
 8014b54:	f7ff ffbc 	bl	8014ad0 <__malloc_lock>
 8014b58:	0023      	movs	r3, r4
 8014b5a:	3b08      	subs	r3, #8
 8014b5c:	685f      	ldr	r7, [r3, #4]
 8014b5e:	9302      	str	r3, [sp, #8]
 8014b60:	003a      	movs	r2, r7
 8014b62:	2303      	movs	r3, #3
 8014b64:	9e05      	ldr	r6, [sp, #20]
 8014b66:	439a      	bics	r2, r3
 8014b68:	360b      	adds	r6, #11
 8014b6a:	9204      	str	r2, [sp, #16]
 8014b6c:	2e16      	cmp	r6, #22
 8014b6e:	d908      	bls.n	8014b82 <_realloc_r+0x4a>
 8014b70:	3304      	adds	r3, #4
 8014b72:	439e      	bics	r6, r3
 8014b74:	9601      	str	r6, [sp, #4]
 8014b76:	d506      	bpl.n	8014b86 <_realloc_r+0x4e>
 8014b78:	230c      	movs	r3, #12
 8014b7a:	9a03      	ldr	r2, [sp, #12]
 8014b7c:	2700      	movs	r7, #0
 8014b7e:	6013      	str	r3, [r2, #0]
 8014b80:	e7e4      	b.n	8014b4c <_realloc_r+0x14>
 8014b82:	2310      	movs	r3, #16
 8014b84:	9301      	str	r3, [sp, #4]
 8014b86:	9b01      	ldr	r3, [sp, #4]
 8014b88:	9a05      	ldr	r2, [sp, #20]
 8014b8a:	4293      	cmp	r3, r2
 8014b8c:	d3f4      	bcc.n	8014b78 <_realloc_r+0x40>
 8014b8e:	9b01      	ldr	r3, [sp, #4]
 8014b90:	9a04      	ldr	r2, [sp, #16]
 8014b92:	4293      	cmp	r3, r2
 8014b94:	dc00      	bgt.n	8014b98 <_realloc_r+0x60>
 8014b96:	e16f      	b.n	8014e78 <_realloc_r+0x340>
 8014b98:	9b02      	ldr	r3, [sp, #8]
 8014b9a:	48bc      	ldr	r0, [pc, #752]	; (8014e8c <_realloc_r+0x354>)
 8014b9c:	189b      	adds	r3, r3, r2
 8014b9e:	6882      	ldr	r2, [r0, #8]
 8014ba0:	4694      	mov	ip, r2
 8014ba2:	685a      	ldr	r2, [r3, #4]
 8014ba4:	459c      	cmp	ip, r3
 8014ba6:	d006      	beq.n	8014bb6 <_realloc_r+0x7e>
 8014ba8:	2501      	movs	r5, #1
 8014baa:	0011      	movs	r1, r2
 8014bac:	43a9      	bics	r1, r5
 8014bae:	1859      	adds	r1, r3, r1
 8014bb0:	6849      	ldr	r1, [r1, #4]
 8014bb2:	4229      	tst	r1, r5
 8014bb4:	d146      	bne.n	8014c44 <_realloc_r+0x10c>
 8014bb6:	2103      	movs	r1, #3
 8014bb8:	438a      	bics	r2, r1
 8014bba:	9904      	ldr	r1, [sp, #16]
 8014bbc:	188e      	adds	r6, r1, r2
 8014bbe:	9901      	ldr	r1, [sp, #4]
 8014bc0:	459c      	cmp	ip, r3
 8014bc2:	d117      	bne.n	8014bf4 <_realloc_r+0xbc>
 8014bc4:	3110      	adds	r1, #16
 8014bc6:	42b1      	cmp	r1, r6
 8014bc8:	dc3e      	bgt.n	8014c48 <_realloc_r+0x110>
 8014bca:	9901      	ldr	r1, [sp, #4]
 8014bcc:	9b02      	ldr	r3, [sp, #8]
 8014bce:	468c      	mov	ip, r1
 8014bd0:	4463      	add	r3, ip
 8014bd2:	6083      	str	r3, [r0, #8]
 8014bd4:	001a      	movs	r2, r3
 8014bd6:	1a73      	subs	r3, r6, r1
 8014bd8:	2601      	movs	r6, #1
 8014bda:	4333      	orrs	r3, r6
 8014bdc:	6053      	str	r3, [r2, #4]
 8014bde:	0023      	movs	r3, r4
 8014be0:	3b08      	subs	r3, #8
 8014be2:	685a      	ldr	r2, [r3, #4]
 8014be4:	9803      	ldr	r0, [sp, #12]
 8014be6:	4016      	ands	r6, r2
 8014be8:	430e      	orrs	r6, r1
 8014bea:	605e      	str	r6, [r3, #4]
 8014bec:	f7ff ff78 	bl	8014ae0 <__malloc_unlock>
 8014bf0:	0027      	movs	r7, r4
 8014bf2:	e7ab      	b.n	8014b4c <_realloc_r+0x14>
 8014bf4:	42b1      	cmp	r1, r6
 8014bf6:	dc27      	bgt.n	8014c48 <_realloc_r+0x110>
 8014bf8:	68da      	ldr	r2, [r3, #12]
 8014bfa:	689b      	ldr	r3, [r3, #8]
 8014bfc:	60da      	str	r2, [r3, #12]
 8014bfe:	6093      	str	r3, [r2, #8]
 8014c00:	9b01      	ldr	r3, [sp, #4]
 8014c02:	9a02      	ldr	r2, [sp, #8]
 8014c04:	1af4      	subs	r4, r6, r3
 8014c06:	9b02      	ldr	r3, [sp, #8]
 8014c08:	1992      	adds	r2, r2, r6
 8014c0a:	685b      	ldr	r3, [r3, #4]
 8014c0c:	9304      	str	r3, [sp, #16]
 8014c0e:	2301      	movs	r3, #1
 8014c10:	9804      	ldr	r0, [sp, #16]
 8014c12:	4018      	ands	r0, r3
 8014c14:	2c0f      	cmp	r4, #15
 8014c16:	d800      	bhi.n	8014c1a <_realloc_r+0xe2>
 8014c18:	e130      	b.n	8014e7c <_realloc_r+0x344>
 8014c1a:	9d01      	ldr	r5, [sp, #4]
 8014c1c:	9902      	ldr	r1, [sp, #8]
 8014c1e:	4328      	orrs	r0, r5
 8014c20:	1949      	adds	r1, r1, r5
 8014c22:	9d02      	ldr	r5, [sp, #8]
 8014c24:	431c      	orrs	r4, r3
 8014c26:	6068      	str	r0, [r5, #4]
 8014c28:	604c      	str	r4, [r1, #4]
 8014c2a:	6850      	ldr	r0, [r2, #4]
 8014c2c:	3108      	adds	r1, #8
 8014c2e:	4303      	orrs	r3, r0
 8014c30:	6053      	str	r3, [r2, #4]
 8014c32:	9803      	ldr	r0, [sp, #12]
 8014c34:	f003 fa0e 	bl	8018054 <_free_r>
 8014c38:	9803      	ldr	r0, [sp, #12]
 8014c3a:	f7ff ff51 	bl	8014ae0 <__malloc_unlock>
 8014c3e:	9f02      	ldr	r7, [sp, #8]
 8014c40:	3708      	adds	r7, #8
 8014c42:	e783      	b.n	8014b4c <_realloc_r+0x14>
 8014c44:	2200      	movs	r2, #0
 8014c46:	0013      	movs	r3, r2
 8014c48:	07f9      	lsls	r1, r7, #31
 8014c4a:	d500      	bpl.n	8014c4e <_realloc_r+0x116>
 8014c4c:	e0c6      	b.n	8014ddc <_realloc_r+0x2a4>
 8014c4e:	0021      	movs	r1, r4
 8014c50:	3908      	subs	r1, #8
 8014c52:	680d      	ldr	r5, [r1, #0]
 8014c54:	9902      	ldr	r1, [sp, #8]
 8014c56:	1b4d      	subs	r5, r1, r5
 8014c58:	2103      	movs	r1, #3
 8014c5a:	686f      	ldr	r7, [r5, #4]
 8014c5c:	438f      	bics	r7, r1
 8014c5e:	9904      	ldr	r1, [sp, #16]
 8014c60:	187f      	adds	r7, r7, r1
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d100      	bne.n	8014c68 <_realloc_r+0x130>
 8014c66:	e084      	b.n	8014d72 <_realloc_r+0x23a>
 8014c68:	19d6      	adds	r6, r2, r7
 8014c6a:	459c      	cmp	ip, r3
 8014c6c:	d148      	bne.n	8014d00 <_realloc_r+0x1c8>
 8014c6e:	9b01      	ldr	r3, [sp, #4]
 8014c70:	3310      	adds	r3, #16
 8014c72:	42b3      	cmp	r3, r6
 8014c74:	dc7d      	bgt.n	8014d72 <_realloc_r+0x23a>
 8014c76:	68aa      	ldr	r2, [r5, #8]
 8014c78:	68eb      	ldr	r3, [r5, #12]
 8014c7a:	002f      	movs	r7, r5
 8014c7c:	60d3      	str	r3, [r2, #12]
 8014c7e:	609a      	str	r2, [r3, #8]
 8014c80:	000a      	movs	r2, r1
 8014c82:	3a04      	subs	r2, #4
 8014c84:	3708      	adds	r7, #8
 8014c86:	2a24      	cmp	r2, #36	; 0x24
 8014c88:	d835      	bhi.n	8014cf6 <_realloc_r+0x1be>
 8014c8a:	003b      	movs	r3, r7
 8014c8c:	2a13      	cmp	r2, #19
 8014c8e:	d908      	bls.n	8014ca2 <_realloc_r+0x16a>
 8014c90:	6823      	ldr	r3, [r4, #0]
 8014c92:	60ab      	str	r3, [r5, #8]
 8014c94:	6863      	ldr	r3, [r4, #4]
 8014c96:	60eb      	str	r3, [r5, #12]
 8014c98:	2a1b      	cmp	r2, #27
 8014c9a:	d81a      	bhi.n	8014cd2 <_realloc_r+0x19a>
 8014c9c:	002b      	movs	r3, r5
 8014c9e:	3408      	adds	r4, #8
 8014ca0:	3310      	adds	r3, #16
 8014ca2:	6822      	ldr	r2, [r4, #0]
 8014ca4:	601a      	str	r2, [r3, #0]
 8014ca6:	6862      	ldr	r2, [r4, #4]
 8014ca8:	605a      	str	r2, [r3, #4]
 8014caa:	68a2      	ldr	r2, [r4, #8]
 8014cac:	609a      	str	r2, [r3, #8]
 8014cae:	9b01      	ldr	r3, [sp, #4]
 8014cb0:	18ea      	adds	r2, r5, r3
 8014cb2:	4b76      	ldr	r3, [pc, #472]	; (8014e8c <_realloc_r+0x354>)
 8014cb4:	609a      	str	r2, [r3, #8]
 8014cb6:	9b01      	ldr	r3, [sp, #4]
 8014cb8:	1af3      	subs	r3, r6, r3
 8014cba:	2601      	movs	r6, #1
 8014cbc:	4333      	orrs	r3, r6
 8014cbe:	6053      	str	r3, [r2, #4]
 8014cc0:	686b      	ldr	r3, [r5, #4]
 8014cc2:	401e      	ands	r6, r3
 8014cc4:	9b01      	ldr	r3, [sp, #4]
 8014cc6:	431e      	orrs	r6, r3
 8014cc8:	606e      	str	r6, [r5, #4]
 8014cca:	9803      	ldr	r0, [sp, #12]
 8014ccc:	f7ff ff08 	bl	8014ae0 <__malloc_unlock>
 8014cd0:	e73c      	b.n	8014b4c <_realloc_r+0x14>
 8014cd2:	68a3      	ldr	r3, [r4, #8]
 8014cd4:	612b      	str	r3, [r5, #16]
 8014cd6:	68e3      	ldr	r3, [r4, #12]
 8014cd8:	616b      	str	r3, [r5, #20]
 8014cda:	2a24      	cmp	r2, #36	; 0x24
 8014cdc:	d003      	beq.n	8014ce6 <_realloc_r+0x1ae>
 8014cde:	002b      	movs	r3, r5
 8014ce0:	3410      	adds	r4, #16
 8014ce2:	3318      	adds	r3, #24
 8014ce4:	e7dd      	b.n	8014ca2 <_realloc_r+0x16a>
 8014ce6:	6923      	ldr	r3, [r4, #16]
 8014ce8:	61ab      	str	r3, [r5, #24]
 8014cea:	002b      	movs	r3, r5
 8014cec:	6962      	ldr	r2, [r4, #20]
 8014cee:	3320      	adds	r3, #32
 8014cf0:	61ea      	str	r2, [r5, #28]
 8014cf2:	3418      	adds	r4, #24
 8014cf4:	e7d5      	b.n	8014ca2 <_realloc_r+0x16a>
 8014cf6:	0021      	movs	r1, r4
 8014cf8:	0038      	movs	r0, r7
 8014cfa:	f003 fdac 	bl	8018856 <memmove>
 8014cfe:	e7d6      	b.n	8014cae <_realloc_r+0x176>
 8014d00:	9a01      	ldr	r2, [sp, #4]
 8014d02:	42b2      	cmp	r2, r6
 8014d04:	dc35      	bgt.n	8014d72 <_realloc_r+0x23a>
 8014d06:	0028      	movs	r0, r5
 8014d08:	68da      	ldr	r2, [r3, #12]
 8014d0a:	689b      	ldr	r3, [r3, #8]
 8014d0c:	3008      	adds	r0, #8
 8014d0e:	60da      	str	r2, [r3, #12]
 8014d10:	6093      	str	r3, [r2, #8]
 8014d12:	68aa      	ldr	r2, [r5, #8]
 8014d14:	68eb      	ldr	r3, [r5, #12]
 8014d16:	60d3      	str	r3, [r2, #12]
 8014d18:	609a      	str	r2, [r3, #8]
 8014d1a:	9a04      	ldr	r2, [sp, #16]
 8014d1c:	3a04      	subs	r2, #4
 8014d1e:	2a24      	cmp	r2, #36	; 0x24
 8014d20:	d823      	bhi.n	8014d6a <_realloc_r+0x232>
 8014d22:	2a13      	cmp	r2, #19
 8014d24:	d907      	bls.n	8014d36 <_realloc_r+0x1fe>
 8014d26:	6823      	ldr	r3, [r4, #0]
 8014d28:	60ab      	str	r3, [r5, #8]
 8014d2a:	6863      	ldr	r3, [r4, #4]
 8014d2c:	60eb      	str	r3, [r5, #12]
 8014d2e:	2a1b      	cmp	r2, #27
 8014d30:	d809      	bhi.n	8014d46 <_realloc_r+0x20e>
 8014d32:	3408      	adds	r4, #8
 8014d34:	3008      	adds	r0, #8
 8014d36:	6823      	ldr	r3, [r4, #0]
 8014d38:	6003      	str	r3, [r0, #0]
 8014d3a:	6863      	ldr	r3, [r4, #4]
 8014d3c:	6043      	str	r3, [r0, #4]
 8014d3e:	68a3      	ldr	r3, [r4, #8]
 8014d40:	6083      	str	r3, [r0, #8]
 8014d42:	9502      	str	r5, [sp, #8]
 8014d44:	e75c      	b.n	8014c00 <_realloc_r+0xc8>
 8014d46:	68a3      	ldr	r3, [r4, #8]
 8014d48:	612b      	str	r3, [r5, #16]
 8014d4a:	68e3      	ldr	r3, [r4, #12]
 8014d4c:	616b      	str	r3, [r5, #20]
 8014d4e:	2a24      	cmp	r2, #36	; 0x24
 8014d50:	d003      	beq.n	8014d5a <_realloc_r+0x222>
 8014d52:	0028      	movs	r0, r5
 8014d54:	3410      	adds	r4, #16
 8014d56:	3018      	adds	r0, #24
 8014d58:	e7ed      	b.n	8014d36 <_realloc_r+0x1fe>
 8014d5a:	0028      	movs	r0, r5
 8014d5c:	6923      	ldr	r3, [r4, #16]
 8014d5e:	3020      	adds	r0, #32
 8014d60:	61ab      	str	r3, [r5, #24]
 8014d62:	6963      	ldr	r3, [r4, #20]
 8014d64:	3418      	adds	r4, #24
 8014d66:	61eb      	str	r3, [r5, #28]
 8014d68:	e7e5      	b.n	8014d36 <_realloc_r+0x1fe>
 8014d6a:	0021      	movs	r1, r4
 8014d6c:	f003 fd73 	bl	8018856 <memmove>
 8014d70:	e7e7      	b.n	8014d42 <_realloc_r+0x20a>
 8014d72:	9b01      	ldr	r3, [sp, #4]
 8014d74:	42bb      	cmp	r3, r7
 8014d76:	dc31      	bgt.n	8014ddc <_realloc_r+0x2a4>
 8014d78:	0028      	movs	r0, r5
 8014d7a:	68aa      	ldr	r2, [r5, #8]
 8014d7c:	68eb      	ldr	r3, [r5, #12]
 8014d7e:	3008      	adds	r0, #8
 8014d80:	60d3      	str	r3, [r2, #12]
 8014d82:	609a      	str	r2, [r3, #8]
 8014d84:	9a04      	ldr	r2, [sp, #16]
 8014d86:	3a04      	subs	r2, #4
 8014d88:	2a24      	cmp	r2, #36	; 0x24
 8014d8a:	d823      	bhi.n	8014dd4 <_realloc_r+0x29c>
 8014d8c:	2a13      	cmp	r2, #19
 8014d8e:	d907      	bls.n	8014da0 <_realloc_r+0x268>
 8014d90:	6823      	ldr	r3, [r4, #0]
 8014d92:	60ab      	str	r3, [r5, #8]
 8014d94:	6863      	ldr	r3, [r4, #4]
 8014d96:	60eb      	str	r3, [r5, #12]
 8014d98:	2a1b      	cmp	r2, #27
 8014d9a:	d809      	bhi.n	8014db0 <_realloc_r+0x278>
 8014d9c:	3408      	adds	r4, #8
 8014d9e:	3008      	adds	r0, #8
 8014da0:	6823      	ldr	r3, [r4, #0]
 8014da2:	6003      	str	r3, [r0, #0]
 8014da4:	6863      	ldr	r3, [r4, #4]
 8014da6:	6043      	str	r3, [r0, #4]
 8014da8:	68a3      	ldr	r3, [r4, #8]
 8014daa:	6083      	str	r3, [r0, #8]
 8014dac:	003e      	movs	r6, r7
 8014dae:	e7c8      	b.n	8014d42 <_realloc_r+0x20a>
 8014db0:	68a3      	ldr	r3, [r4, #8]
 8014db2:	612b      	str	r3, [r5, #16]
 8014db4:	68e3      	ldr	r3, [r4, #12]
 8014db6:	616b      	str	r3, [r5, #20]
 8014db8:	2a24      	cmp	r2, #36	; 0x24
 8014dba:	d003      	beq.n	8014dc4 <_realloc_r+0x28c>
 8014dbc:	0028      	movs	r0, r5
 8014dbe:	3410      	adds	r4, #16
 8014dc0:	3018      	adds	r0, #24
 8014dc2:	e7ed      	b.n	8014da0 <_realloc_r+0x268>
 8014dc4:	0028      	movs	r0, r5
 8014dc6:	6923      	ldr	r3, [r4, #16]
 8014dc8:	3020      	adds	r0, #32
 8014dca:	61ab      	str	r3, [r5, #24]
 8014dcc:	6963      	ldr	r3, [r4, #20]
 8014dce:	3418      	adds	r4, #24
 8014dd0:	61eb      	str	r3, [r5, #28]
 8014dd2:	e7e5      	b.n	8014da0 <_realloc_r+0x268>
 8014dd4:	0021      	movs	r1, r4
 8014dd6:	f003 fd3e 	bl	8018856 <memmove>
 8014dda:	e7e7      	b.n	8014dac <_realloc_r+0x274>
 8014ddc:	9905      	ldr	r1, [sp, #20]
 8014dde:	9803      	ldr	r0, [sp, #12]
 8014de0:	f7ff fc2c 	bl	801463c <_malloc_r>
 8014de4:	1e07      	subs	r7, r0, #0
 8014de6:	d100      	bne.n	8014dea <_realloc_r+0x2b2>
 8014de8:	e76f      	b.n	8014cca <_realloc_r+0x192>
 8014dea:	0023      	movs	r3, r4
 8014dec:	2201      	movs	r2, #1
 8014dee:	3b08      	subs	r3, #8
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	4393      	bics	r3, r2
 8014df4:	9a02      	ldr	r2, [sp, #8]
 8014df6:	18d3      	adds	r3, r2, r3
 8014df8:	0002      	movs	r2, r0
 8014dfa:	3a08      	subs	r2, #8
 8014dfc:	4293      	cmp	r3, r2
 8014dfe:	d105      	bne.n	8014e0c <_realloc_r+0x2d4>
 8014e00:	685e      	ldr	r6, [r3, #4]
 8014e02:	2303      	movs	r3, #3
 8014e04:	439e      	bics	r6, r3
 8014e06:	9b04      	ldr	r3, [sp, #16]
 8014e08:	18f6      	adds	r6, r6, r3
 8014e0a:	e6f9      	b.n	8014c00 <_realloc_r+0xc8>
 8014e0c:	9a04      	ldr	r2, [sp, #16]
 8014e0e:	3a04      	subs	r2, #4
 8014e10:	2a24      	cmp	r2, #36	; 0x24
 8014e12:	d82d      	bhi.n	8014e70 <_realloc_r+0x338>
 8014e14:	2a13      	cmp	r2, #19
 8014e16:	d928      	bls.n	8014e6a <_realloc_r+0x332>
 8014e18:	6823      	ldr	r3, [r4, #0]
 8014e1a:	6003      	str	r3, [r0, #0]
 8014e1c:	6863      	ldr	r3, [r4, #4]
 8014e1e:	6043      	str	r3, [r0, #4]
 8014e20:	2a1b      	cmp	r2, #27
 8014e22:	d80e      	bhi.n	8014e42 <_realloc_r+0x30a>
 8014e24:	0022      	movs	r2, r4
 8014e26:	0003      	movs	r3, r0
 8014e28:	3208      	adds	r2, #8
 8014e2a:	3308      	adds	r3, #8
 8014e2c:	6811      	ldr	r1, [r2, #0]
 8014e2e:	6019      	str	r1, [r3, #0]
 8014e30:	6851      	ldr	r1, [r2, #4]
 8014e32:	6059      	str	r1, [r3, #4]
 8014e34:	6892      	ldr	r2, [r2, #8]
 8014e36:	609a      	str	r2, [r3, #8]
 8014e38:	0021      	movs	r1, r4
 8014e3a:	9803      	ldr	r0, [sp, #12]
 8014e3c:	f003 f90a 	bl	8018054 <_free_r>
 8014e40:	e743      	b.n	8014cca <_realloc_r+0x192>
 8014e42:	68a3      	ldr	r3, [r4, #8]
 8014e44:	6083      	str	r3, [r0, #8]
 8014e46:	68e3      	ldr	r3, [r4, #12]
 8014e48:	60c3      	str	r3, [r0, #12]
 8014e4a:	2a24      	cmp	r2, #36	; 0x24
 8014e4c:	d004      	beq.n	8014e58 <_realloc_r+0x320>
 8014e4e:	0022      	movs	r2, r4
 8014e50:	0003      	movs	r3, r0
 8014e52:	3210      	adds	r2, #16
 8014e54:	3310      	adds	r3, #16
 8014e56:	e7e9      	b.n	8014e2c <_realloc_r+0x2f4>
 8014e58:	6923      	ldr	r3, [r4, #16]
 8014e5a:	0022      	movs	r2, r4
 8014e5c:	6103      	str	r3, [r0, #16]
 8014e5e:	0003      	movs	r3, r0
 8014e60:	6961      	ldr	r1, [r4, #20]
 8014e62:	3218      	adds	r2, #24
 8014e64:	3318      	adds	r3, #24
 8014e66:	6141      	str	r1, [r0, #20]
 8014e68:	e7e0      	b.n	8014e2c <_realloc_r+0x2f4>
 8014e6a:	0003      	movs	r3, r0
 8014e6c:	0022      	movs	r2, r4
 8014e6e:	e7dd      	b.n	8014e2c <_realloc_r+0x2f4>
 8014e70:	0021      	movs	r1, r4
 8014e72:	f003 fcf0 	bl	8018856 <memmove>
 8014e76:	e7df      	b.n	8014e38 <_realloc_r+0x300>
 8014e78:	9e04      	ldr	r6, [sp, #16]
 8014e7a:	e6c1      	b.n	8014c00 <_realloc_r+0xc8>
 8014e7c:	9902      	ldr	r1, [sp, #8]
 8014e7e:	4306      	orrs	r6, r0
 8014e80:	604e      	str	r6, [r1, #4]
 8014e82:	6851      	ldr	r1, [r2, #4]
 8014e84:	430b      	orrs	r3, r1
 8014e86:	6053      	str	r3, [r2, #4]
 8014e88:	e6d6      	b.n	8014c38 <_realloc_r+0x100>
 8014e8a:	46c0      	nop			; (mov r8, r8)
 8014e8c:	20000654 	.word	0x20000654

08014e90 <_sbrk_r>:
 8014e90:	2300      	movs	r3, #0
 8014e92:	b570      	push	{r4, r5, r6, lr}
 8014e94:	4c06      	ldr	r4, [pc, #24]	; (8014eb0 <_sbrk_r+0x20>)
 8014e96:	0005      	movs	r5, r0
 8014e98:	0008      	movs	r0, r1
 8014e9a:	6023      	str	r3, [r4, #0]
 8014e9c:	f004 f9ec 	bl	8019278 <_sbrk>
 8014ea0:	1c43      	adds	r3, r0, #1
 8014ea2:	d103      	bne.n	8014eac <_sbrk_r+0x1c>
 8014ea4:	6823      	ldr	r3, [r4, #0]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d000      	beq.n	8014eac <_sbrk_r+0x1c>
 8014eaa:	602b      	str	r3, [r5, #0]
 8014eac:	bd70      	pop	{r4, r5, r6, pc}
 8014eae:	46c0      	nop			; (mov r8, r8)
 8014eb0:	2000710c 	.word	0x2000710c

08014eb4 <sprintf>:
 8014eb4:	b40e      	push	{r1, r2, r3}
 8014eb6:	b500      	push	{lr}
 8014eb8:	490b      	ldr	r1, [pc, #44]	; (8014ee8 <sprintf+0x34>)
 8014eba:	b09c      	sub	sp, #112	; 0x70
 8014ebc:	ab1d      	add	r3, sp, #116	; 0x74
 8014ebe:	9002      	str	r0, [sp, #8]
 8014ec0:	9006      	str	r0, [sp, #24]
 8014ec2:	9107      	str	r1, [sp, #28]
 8014ec4:	9104      	str	r1, [sp, #16]
 8014ec6:	4809      	ldr	r0, [pc, #36]	; (8014eec <sprintf+0x38>)
 8014ec8:	4909      	ldr	r1, [pc, #36]	; (8014ef0 <sprintf+0x3c>)
 8014eca:	cb04      	ldmia	r3!, {r2}
 8014ecc:	9105      	str	r1, [sp, #20]
 8014ece:	6800      	ldr	r0, [r0, #0]
 8014ed0:	a902      	add	r1, sp, #8
 8014ed2:	9301      	str	r3, [sp, #4]
 8014ed4:	f000 ff78 	bl	8015dc8 <_svfprintf_r>
 8014ed8:	2300      	movs	r3, #0
 8014eda:	9a02      	ldr	r2, [sp, #8]
 8014edc:	7013      	strb	r3, [r2, #0]
 8014ede:	b01c      	add	sp, #112	; 0x70
 8014ee0:	bc08      	pop	{r3}
 8014ee2:	b003      	add	sp, #12
 8014ee4:	4718      	bx	r3
 8014ee6:	46c0      	nop			; (mov r8, r8)
 8014ee8:	7fffffff 	.word	0x7fffffff
 8014eec:	200000b8 	.word	0x200000b8
 8014ef0:	ffff0208 	.word	0xffff0208

08014ef4 <strcat>:
 8014ef4:	0002      	movs	r2, r0
 8014ef6:	b510      	push	{r4, lr}
 8014ef8:	7813      	ldrb	r3, [r2, #0]
 8014efa:	1c54      	adds	r4, r2, #1
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d105      	bne.n	8014f0c <strcat+0x18>
 8014f00:	5ccc      	ldrb	r4, [r1, r3]
 8014f02:	54d4      	strb	r4, [r2, r3]
 8014f04:	3301      	adds	r3, #1
 8014f06:	2c00      	cmp	r4, #0
 8014f08:	d1fa      	bne.n	8014f00 <strcat+0xc>
 8014f0a:	bd10      	pop	{r4, pc}
 8014f0c:	0022      	movs	r2, r4
 8014f0e:	e7f3      	b.n	8014ef8 <strcat+0x4>

08014f10 <strchr>:
 8014f10:	b2c9      	uxtb	r1, r1
 8014f12:	7803      	ldrb	r3, [r0, #0]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d004      	beq.n	8014f22 <strchr+0x12>
 8014f18:	428b      	cmp	r3, r1
 8014f1a:	d100      	bne.n	8014f1e <strchr+0xe>
 8014f1c:	4770      	bx	lr
 8014f1e:	3001      	adds	r0, #1
 8014f20:	e7f7      	b.n	8014f12 <strchr+0x2>
 8014f22:	424b      	negs	r3, r1
 8014f24:	4159      	adcs	r1, r3
 8014f26:	4249      	negs	r1, r1
 8014f28:	4008      	ands	r0, r1
 8014f2a:	e7f7      	b.n	8014f1c <strchr+0xc>

08014f2c <strcpy>:
 8014f2c:	0003      	movs	r3, r0
 8014f2e:	780a      	ldrb	r2, [r1, #0]
 8014f30:	3101      	adds	r1, #1
 8014f32:	701a      	strb	r2, [r3, #0]
 8014f34:	3301      	adds	r3, #1
 8014f36:	2a00      	cmp	r2, #0
 8014f38:	d1f9      	bne.n	8014f2e <strcpy+0x2>
 8014f3a:	4770      	bx	lr

08014f3c <strncmp>:
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	b530      	push	{r4, r5, lr}
 8014f40:	429a      	cmp	r2, r3
 8014f42:	d00a      	beq.n	8014f5a <strncmp+0x1e>
 8014f44:	3a01      	subs	r2, #1
 8014f46:	5cc4      	ldrb	r4, [r0, r3]
 8014f48:	5ccd      	ldrb	r5, [r1, r3]
 8014f4a:	42ac      	cmp	r4, r5
 8014f4c:	d104      	bne.n	8014f58 <strncmp+0x1c>
 8014f4e:	4293      	cmp	r3, r2
 8014f50:	d002      	beq.n	8014f58 <strncmp+0x1c>
 8014f52:	3301      	adds	r3, #1
 8014f54:	2c00      	cmp	r4, #0
 8014f56:	d1f6      	bne.n	8014f46 <strncmp+0xa>
 8014f58:	1b63      	subs	r3, r4, r5
 8014f5a:	0018      	movs	r0, r3
 8014f5c:	bd30      	pop	{r4, r5, pc}

08014f5e <strncpy>:
 8014f5e:	b530      	push	{r4, r5, lr}
 8014f60:	0005      	movs	r5, r0
 8014f62:	2a00      	cmp	r2, #0
 8014f64:	d100      	bne.n	8014f68 <strncpy+0xa>
 8014f66:	bd30      	pop	{r4, r5, pc}
 8014f68:	780c      	ldrb	r4, [r1, #0]
 8014f6a:	3a01      	subs	r2, #1
 8014f6c:	1c6b      	adds	r3, r5, #1
 8014f6e:	702c      	strb	r4, [r5, #0]
 8014f70:	3101      	adds	r1, #1
 8014f72:	2c00      	cmp	r4, #0
 8014f74:	d105      	bne.n	8014f82 <strncpy+0x24>
 8014f76:	189a      	adds	r2, r3, r2
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d0f4      	beq.n	8014f66 <strncpy+0x8>
 8014f7c:	701c      	strb	r4, [r3, #0]
 8014f7e:	3301      	adds	r3, #1
 8014f80:	e7fa      	b.n	8014f78 <strncpy+0x1a>
 8014f82:	001d      	movs	r5, r3
 8014f84:	e7ed      	b.n	8014f62 <strncpy+0x4>
	...

08014f88 <sulp>:
 8014f88:	b570      	push	{r4, r5, r6, lr}
 8014f8a:	0016      	movs	r6, r2
 8014f8c:	000d      	movs	r5, r1
 8014f8e:	f003 ff17 	bl	8018dc0 <__ulp>
 8014f92:	2e00      	cmp	r6, #0
 8014f94:	d00d      	beq.n	8014fb2 <sulp+0x2a>
 8014f96:	236b      	movs	r3, #107	; 0x6b
 8014f98:	006a      	lsls	r2, r5, #1
 8014f9a:	0d52      	lsrs	r2, r2, #21
 8014f9c:	1a9b      	subs	r3, r3, r2
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	dd07      	ble.n	8014fb2 <sulp+0x2a>
 8014fa2:	2400      	movs	r4, #0
 8014fa4:	4a03      	ldr	r2, [pc, #12]	; (8014fb4 <sulp+0x2c>)
 8014fa6:	051b      	lsls	r3, r3, #20
 8014fa8:	189d      	adds	r5, r3, r2
 8014faa:	002b      	movs	r3, r5
 8014fac:	0022      	movs	r2, r4
 8014fae:	f7ed f877 	bl	80020a0 <__aeabi_dmul>
 8014fb2:	bd70      	pop	{r4, r5, r6, pc}
 8014fb4:	3ff00000 	.word	0x3ff00000

08014fb8 <_strtod_l>:
 8014fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fba:	b0a7      	sub	sp, #156	; 0x9c
 8014fbc:	9307      	str	r3, [sp, #28]
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	9004      	str	r0, [sp, #16]
 8014fc2:	9807      	ldr	r0, [sp, #28]
 8014fc4:	9322      	str	r3, [sp, #136]	; 0x88
 8014fc6:	9106      	str	r1, [sp, #24]
 8014fc8:	921d      	str	r2, [sp, #116]	; 0x74
 8014fca:	f003 fc28 	bl	801881e <__localeconv_l>
 8014fce:	0005      	movs	r5, r0
 8014fd0:	6800      	ldr	r0, [r0, #0]
 8014fd2:	f7eb f8a1 	bl	8000118 <strlen>
 8014fd6:	2600      	movs	r6, #0
 8014fd8:	2700      	movs	r7, #0
 8014fda:	9b06      	ldr	r3, [sp, #24]
 8014fdc:	9005      	str	r0, [sp, #20]
 8014fde:	9321      	str	r3, [sp, #132]	; 0x84
 8014fe0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fe2:	781a      	ldrb	r2, [r3, #0]
 8014fe4:	2a0d      	cmp	r2, #13
 8014fe6:	d839      	bhi.n	801505c <_strtod_l+0xa4>
 8014fe8:	2a09      	cmp	r2, #9
 8014fea:	d23d      	bcs.n	8015068 <_strtod_l+0xb0>
 8014fec:	2a00      	cmp	r2, #0
 8014fee:	d044      	beq.n	801507a <_strtod_l+0xc2>
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	9313      	str	r3, [sp, #76]	; 0x4c
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8014ff8:	920c      	str	r2, [sp, #48]	; 0x30
 8014ffa:	7823      	ldrb	r3, [r4, #0]
 8014ffc:	2b30      	cmp	r3, #48	; 0x30
 8014ffe:	d000      	beq.n	8015002 <_strtod_l+0x4a>
 8015000:	e07e      	b.n	8015100 <_strtod_l+0x148>
 8015002:	7863      	ldrb	r3, [r4, #1]
 8015004:	2b58      	cmp	r3, #88	; 0x58
 8015006:	d002      	beq.n	801500e <_strtod_l+0x56>
 8015008:	2b78      	cmp	r3, #120	; 0x78
 801500a:	d000      	beq.n	801500e <_strtod_l+0x56>
 801500c:	e06e      	b.n	80150ec <_strtod_l+0x134>
 801500e:	9b07      	ldr	r3, [sp, #28]
 8015010:	4a96      	ldr	r2, [pc, #600]	; (801526c <_strtod_l+0x2b4>)
 8015012:	9302      	str	r3, [sp, #8]
 8015014:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015016:	a921      	add	r1, sp, #132	; 0x84
 8015018:	9301      	str	r3, [sp, #4]
 801501a:	ab22      	add	r3, sp, #136	; 0x88
 801501c:	9300      	str	r3, [sp, #0]
 801501e:	9804      	ldr	r0, [sp, #16]
 8015020:	ab23      	add	r3, sp, #140	; 0x8c
 8015022:	f003 f914 	bl	801824e <__gethex>
 8015026:	2507      	movs	r5, #7
 8015028:	9005      	str	r0, [sp, #20]
 801502a:	4005      	ands	r5, r0
 801502c:	d005      	beq.n	801503a <_strtod_l+0x82>
 801502e:	2d06      	cmp	r5, #6
 8015030:	d12f      	bne.n	8015092 <_strtod_l+0xda>
 8015032:	2300      	movs	r3, #0
 8015034:	3401      	adds	r4, #1
 8015036:	9421      	str	r4, [sp, #132]	; 0x84
 8015038:	9313      	str	r3, [sp, #76]	; 0x4c
 801503a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801503c:	2b00      	cmp	r3, #0
 801503e:	d002      	beq.n	8015046 <_strtod_l+0x8e>
 8015040:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015042:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015044:	601a      	str	r2, [r3, #0]
 8015046:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015048:	2b00      	cmp	r3, #0
 801504a:	d01d      	beq.n	8015088 <_strtod_l+0xd0>
 801504c:	2380      	movs	r3, #128	; 0x80
 801504e:	0032      	movs	r2, r6
 8015050:	061b      	lsls	r3, r3, #24
 8015052:	18fb      	adds	r3, r7, r3
 8015054:	0010      	movs	r0, r2
 8015056:	0019      	movs	r1, r3
 8015058:	b027      	add	sp, #156	; 0x9c
 801505a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801505c:	2a2b      	cmp	r2, #43	; 0x2b
 801505e:	d016      	beq.n	801508e <_strtod_l+0xd6>
 8015060:	2a2d      	cmp	r2, #45	; 0x2d
 8015062:	d003      	beq.n	801506c <_strtod_l+0xb4>
 8015064:	2a20      	cmp	r2, #32
 8015066:	d1c3      	bne.n	8014ff0 <_strtod_l+0x38>
 8015068:	3301      	adds	r3, #1
 801506a:	e7b8      	b.n	8014fde <_strtod_l+0x26>
 801506c:	2201      	movs	r2, #1
 801506e:	9213      	str	r2, [sp, #76]	; 0x4c
 8015070:	1c5a      	adds	r2, r3, #1
 8015072:	9221      	str	r2, [sp, #132]	; 0x84
 8015074:	785b      	ldrb	r3, [r3, #1]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d1bc      	bne.n	8014ff4 <_strtod_l+0x3c>
 801507a:	9b06      	ldr	r3, [sp, #24]
 801507c:	9321      	str	r3, [sp, #132]	; 0x84
 801507e:	2300      	movs	r3, #0
 8015080:	9313      	str	r3, [sp, #76]	; 0x4c
 8015082:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015084:	2b00      	cmp	r3, #0
 8015086:	d1db      	bne.n	8015040 <_strtod_l+0x88>
 8015088:	0032      	movs	r2, r6
 801508a:	003b      	movs	r3, r7
 801508c:	e7e2      	b.n	8015054 <_strtod_l+0x9c>
 801508e:	2200      	movs	r2, #0
 8015090:	e7ed      	b.n	801506e <_strtod_l+0xb6>
 8015092:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015094:	2a00      	cmp	r2, #0
 8015096:	d007      	beq.n	80150a8 <_strtod_l+0xf0>
 8015098:	2135      	movs	r1, #53	; 0x35
 801509a:	a824      	add	r0, sp, #144	; 0x90
 801509c:	f003 ff7d 	bl	8018f9a <__copybits>
 80150a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80150a2:	9804      	ldr	r0, [sp, #16]
 80150a4:	f003 fc12 	bl	80188cc <_Bfree>
 80150a8:	1e68      	subs	r0, r5, #1
 80150aa:	2804      	cmp	r0, #4
 80150ac:	d806      	bhi.n	80150bc <_strtod_l+0x104>
 80150ae:	f7eb f83b 	bl	8000128 <__gnu_thumb1_case_uqi>
 80150b2:	030c      	.short	0x030c
 80150b4:	1917      	.short	0x1917
 80150b6:	0c          	.byte	0x0c
 80150b7:	00          	.byte	0x00
 80150b8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80150ba:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80150bc:	9b05      	ldr	r3, [sp, #20]
 80150be:	071b      	lsls	r3, r3, #28
 80150c0:	d5bb      	bpl.n	801503a <_strtod_l+0x82>
 80150c2:	2380      	movs	r3, #128	; 0x80
 80150c4:	061b      	lsls	r3, r3, #24
 80150c6:	431f      	orrs	r7, r3
 80150c8:	e7b7      	b.n	801503a <_strtod_l+0x82>
 80150ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80150cc:	4a68      	ldr	r2, [pc, #416]	; (8015270 <_strtod_l+0x2b8>)
 80150ce:	4969      	ldr	r1, [pc, #420]	; (8015274 <_strtod_l+0x2bc>)
 80150d0:	401a      	ands	r2, r3
 80150d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80150d4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80150d6:	185b      	adds	r3, r3, r1
 80150d8:	051b      	lsls	r3, r3, #20
 80150da:	431a      	orrs	r2, r3
 80150dc:	0017      	movs	r7, r2
 80150de:	e7ed      	b.n	80150bc <_strtod_l+0x104>
 80150e0:	4f65      	ldr	r7, [pc, #404]	; (8015278 <_strtod_l+0x2c0>)
 80150e2:	e7eb      	b.n	80150bc <_strtod_l+0x104>
 80150e4:	2601      	movs	r6, #1
 80150e6:	4f65      	ldr	r7, [pc, #404]	; (801527c <_strtod_l+0x2c4>)
 80150e8:	4276      	negs	r6, r6
 80150ea:	e7e7      	b.n	80150bc <_strtod_l+0x104>
 80150ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150ee:	1c5a      	adds	r2, r3, #1
 80150f0:	9221      	str	r2, [sp, #132]	; 0x84
 80150f2:	785b      	ldrb	r3, [r3, #1]
 80150f4:	2b30      	cmp	r3, #48	; 0x30
 80150f6:	d0f9      	beq.n	80150ec <_strtod_l+0x134>
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d09e      	beq.n	801503a <_strtod_l+0x82>
 80150fc:	2301      	movs	r3, #1
 80150fe:	930c      	str	r3, [sp, #48]	; 0x30
 8015100:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015102:	220a      	movs	r2, #10
 8015104:	9312      	str	r3, [sp, #72]	; 0x48
 8015106:	2300      	movs	r3, #0
 8015108:	930b      	str	r3, [sp, #44]	; 0x2c
 801510a:	9308      	str	r3, [sp, #32]
 801510c:	930a      	str	r3, [sp, #40]	; 0x28
 801510e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8015110:	7804      	ldrb	r4, [r0, #0]
 8015112:	0023      	movs	r3, r4
 8015114:	3b30      	subs	r3, #48	; 0x30
 8015116:	b2d9      	uxtb	r1, r3
 8015118:	2909      	cmp	r1, #9
 801511a:	d934      	bls.n	8015186 <_strtod_l+0x1ce>
 801511c:	9a05      	ldr	r2, [sp, #20]
 801511e:	6829      	ldr	r1, [r5, #0]
 8015120:	f7ff ff0c 	bl	8014f3c <strncmp>
 8015124:	2800      	cmp	r0, #0
 8015126:	d040      	beq.n	80151aa <_strtod_l+0x1f2>
 8015128:	2000      	movs	r0, #0
 801512a:	0023      	movs	r3, r4
 801512c:	4684      	mov	ip, r0
 801512e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015130:	9007      	str	r0, [sp, #28]
 8015132:	9205      	str	r2, [sp, #20]
 8015134:	2220      	movs	r2, #32
 8015136:	0019      	movs	r1, r3
 8015138:	4391      	bics	r1, r2
 801513a:	000a      	movs	r2, r1
 801513c:	2100      	movs	r1, #0
 801513e:	2a45      	cmp	r2, #69	; 0x45
 8015140:	d000      	beq.n	8015144 <_strtod_l+0x18c>
 8015142:	e0bf      	b.n	80152c4 <_strtod_l+0x30c>
 8015144:	9b05      	ldr	r3, [sp, #20]
 8015146:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015148:	4303      	orrs	r3, r0
 801514a:	4313      	orrs	r3, r2
 801514c:	428b      	cmp	r3, r1
 801514e:	d094      	beq.n	801507a <_strtod_l+0xc2>
 8015150:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015152:	9306      	str	r3, [sp, #24]
 8015154:	3301      	adds	r3, #1
 8015156:	9321      	str	r3, [sp, #132]	; 0x84
 8015158:	9b06      	ldr	r3, [sp, #24]
 801515a:	785b      	ldrb	r3, [r3, #1]
 801515c:	2b2b      	cmp	r3, #43	; 0x2b
 801515e:	d100      	bne.n	8015162 <_strtod_l+0x1aa>
 8015160:	e082      	b.n	8015268 <_strtod_l+0x2b0>
 8015162:	000c      	movs	r4, r1
 8015164:	2b2d      	cmp	r3, #45	; 0x2d
 8015166:	d105      	bne.n	8015174 <_strtod_l+0x1bc>
 8015168:	2401      	movs	r4, #1
 801516a:	9b06      	ldr	r3, [sp, #24]
 801516c:	3302      	adds	r3, #2
 801516e:	9321      	str	r3, [sp, #132]	; 0x84
 8015170:	9b06      	ldr	r3, [sp, #24]
 8015172:	789b      	ldrb	r3, [r3, #2]
 8015174:	001a      	movs	r2, r3
 8015176:	3a30      	subs	r2, #48	; 0x30
 8015178:	2a09      	cmp	r2, #9
 801517a:	d800      	bhi.n	801517e <_strtod_l+0x1c6>
 801517c:	e084      	b.n	8015288 <_strtod_l+0x2d0>
 801517e:	9a06      	ldr	r2, [sp, #24]
 8015180:	2100      	movs	r1, #0
 8015182:	9221      	str	r2, [sp, #132]	; 0x84
 8015184:	e09e      	b.n	80152c4 <_strtod_l+0x30c>
 8015186:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015188:	2908      	cmp	r1, #8
 801518a:	dc09      	bgt.n	80151a0 <_strtod_l+0x1e8>
 801518c:	9908      	ldr	r1, [sp, #32]
 801518e:	4351      	muls	r1, r2
 8015190:	18cb      	adds	r3, r1, r3
 8015192:	9308      	str	r3, [sp, #32]
 8015194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015196:	3001      	adds	r0, #1
 8015198:	3301      	adds	r3, #1
 801519a:	930a      	str	r3, [sp, #40]	; 0x28
 801519c:	9021      	str	r0, [sp, #132]	; 0x84
 801519e:	e7b6      	b.n	801510e <_strtod_l+0x156>
 80151a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151a2:	4351      	muls	r1, r2
 80151a4:	18cb      	adds	r3, r1, r3
 80151a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80151a8:	e7f4      	b.n	8015194 <_strtod_l+0x1dc>
 80151aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80151ac:	9b05      	ldr	r3, [sp, #20]
 80151ae:	4694      	mov	ip, r2
 80151b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80151b2:	4463      	add	r3, ip
 80151b4:	9321      	str	r3, [sp, #132]	; 0x84
 80151b6:	781b      	ldrb	r3, [r3, #0]
 80151b8:	2a00      	cmp	r2, #0
 80151ba:	d036      	beq.n	801522a <_strtod_l+0x272>
 80151bc:	4684      	mov	ip, r0
 80151be:	9205      	str	r2, [sp, #20]
 80151c0:	001a      	movs	r2, r3
 80151c2:	3a30      	subs	r2, #48	; 0x30
 80151c4:	2a09      	cmp	r2, #9
 80151c6:	d912      	bls.n	80151ee <_strtod_l+0x236>
 80151c8:	2201      	movs	r2, #1
 80151ca:	9207      	str	r2, [sp, #28]
 80151cc:	e7b2      	b.n	8015134 <_strtod_l+0x17c>
 80151ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151d0:	3001      	adds	r0, #1
 80151d2:	1c5a      	adds	r2, r3, #1
 80151d4:	9221      	str	r2, [sp, #132]	; 0x84
 80151d6:	785b      	ldrb	r3, [r3, #1]
 80151d8:	2b30      	cmp	r3, #48	; 0x30
 80151da:	d0f8      	beq.n	80151ce <_strtod_l+0x216>
 80151dc:	001a      	movs	r2, r3
 80151de:	3a31      	subs	r2, #49	; 0x31
 80151e0:	2a08      	cmp	r2, #8
 80151e2:	d83c      	bhi.n	801525e <_strtod_l+0x2a6>
 80151e4:	4684      	mov	ip, r0
 80151e6:	2000      	movs	r0, #0
 80151e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80151ea:	9005      	str	r0, [sp, #20]
 80151ec:	9212      	str	r2, [sp, #72]	; 0x48
 80151ee:	3b30      	subs	r3, #48	; 0x30
 80151f0:	1c42      	adds	r2, r0, #1
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d013      	beq.n	801521e <_strtod_l+0x266>
 80151f6:	210a      	movs	r1, #10
 80151f8:	4494      	add	ip, r2
 80151fa:	9a05      	ldr	r2, [sp, #20]
 80151fc:	1885      	adds	r5, r0, r2
 80151fe:	42aa      	cmp	r2, r5
 8015200:	d115      	bne.n	801522e <_strtod_l+0x276>
 8015202:	9905      	ldr	r1, [sp, #20]
 8015204:	9a05      	ldr	r2, [sp, #20]
 8015206:	3101      	adds	r1, #1
 8015208:	1809      	adds	r1, r1, r0
 801520a:	1812      	adds	r2, r2, r0
 801520c:	9105      	str	r1, [sp, #20]
 801520e:	2a08      	cmp	r2, #8
 8015210:	dc1b      	bgt.n	801524a <_strtod_l+0x292>
 8015212:	220a      	movs	r2, #10
 8015214:	9908      	ldr	r1, [sp, #32]
 8015216:	434a      	muls	r2, r1
 8015218:	189b      	adds	r3, r3, r2
 801521a:	2200      	movs	r2, #0
 801521c:	9308      	str	r3, [sp, #32]
 801521e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015220:	0010      	movs	r0, r2
 8015222:	1c59      	adds	r1, r3, #1
 8015224:	9121      	str	r1, [sp, #132]	; 0x84
 8015226:	785b      	ldrb	r3, [r3, #1]
 8015228:	e7ca      	b.n	80151c0 <_strtod_l+0x208>
 801522a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801522c:	e7d4      	b.n	80151d8 <_strtod_l+0x220>
 801522e:	1c54      	adds	r4, r2, #1
 8015230:	2a08      	cmp	r2, #8
 8015232:	dc04      	bgt.n	801523e <_strtod_l+0x286>
 8015234:	9a08      	ldr	r2, [sp, #32]
 8015236:	434a      	muls	r2, r1
 8015238:	9208      	str	r2, [sp, #32]
 801523a:	0022      	movs	r2, r4
 801523c:	e7df      	b.n	80151fe <_strtod_l+0x246>
 801523e:	2c10      	cmp	r4, #16
 8015240:	dcfb      	bgt.n	801523a <_strtod_l+0x282>
 8015242:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015244:	434a      	muls	r2, r1
 8015246:	920b      	str	r2, [sp, #44]	; 0x2c
 8015248:	e7f7      	b.n	801523a <_strtod_l+0x282>
 801524a:	9905      	ldr	r1, [sp, #20]
 801524c:	2200      	movs	r2, #0
 801524e:	2910      	cmp	r1, #16
 8015250:	dce5      	bgt.n	801521e <_strtod_l+0x266>
 8015252:	210a      	movs	r1, #10
 8015254:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015256:	4341      	muls	r1, r0
 8015258:	185b      	adds	r3, r3, r1
 801525a:	930b      	str	r3, [sp, #44]	; 0x2c
 801525c:	e7df      	b.n	801521e <_strtod_l+0x266>
 801525e:	2200      	movs	r2, #0
 8015260:	4694      	mov	ip, r2
 8015262:	9205      	str	r2, [sp, #20]
 8015264:	3201      	adds	r2, #1
 8015266:	e7b0      	b.n	80151ca <_strtod_l+0x212>
 8015268:	000c      	movs	r4, r1
 801526a:	e77e      	b.n	801516a <_strtod_l+0x1b2>
 801526c:	0801ca20 	.word	0x0801ca20
 8015270:	ffefffff 	.word	0xffefffff
 8015274:	00000433 	.word	0x00000433
 8015278:	7ff00000 	.word	0x7ff00000
 801527c:	7fffffff 	.word	0x7fffffff
 8015280:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015282:	1c5a      	adds	r2, r3, #1
 8015284:	9221      	str	r2, [sp, #132]	; 0x84
 8015286:	785b      	ldrb	r3, [r3, #1]
 8015288:	2b30      	cmp	r3, #48	; 0x30
 801528a:	d0f9      	beq.n	8015280 <_strtod_l+0x2c8>
 801528c:	001a      	movs	r2, r3
 801528e:	3a31      	subs	r2, #49	; 0x31
 8015290:	2100      	movs	r1, #0
 8015292:	2a08      	cmp	r2, #8
 8015294:	d816      	bhi.n	80152c4 <_strtod_l+0x30c>
 8015296:	3b30      	subs	r3, #48	; 0x30
 8015298:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801529a:	930e      	str	r3, [sp, #56]	; 0x38
 801529c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801529e:	1c59      	adds	r1, r3, #1
 80152a0:	9121      	str	r1, [sp, #132]	; 0x84
 80152a2:	785b      	ldrb	r3, [r3, #1]
 80152a4:	001a      	movs	r2, r3
 80152a6:	3a30      	subs	r2, #48	; 0x30
 80152a8:	2a09      	cmp	r2, #9
 80152aa:	d932      	bls.n	8015312 <_strtod_l+0x35a>
 80152ac:	1b4a      	subs	r2, r1, r5
 80152ae:	4dad      	ldr	r5, [pc, #692]	; (8015564 <_strtod_l+0x5ac>)
 80152b0:	0029      	movs	r1, r5
 80152b2:	2a08      	cmp	r2, #8
 80152b4:	dc03      	bgt.n	80152be <_strtod_l+0x306>
 80152b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80152b8:	42a9      	cmp	r1, r5
 80152ba:	dd00      	ble.n	80152be <_strtod_l+0x306>
 80152bc:	0029      	movs	r1, r5
 80152be:	2c00      	cmp	r4, #0
 80152c0:	d000      	beq.n	80152c4 <_strtod_l+0x30c>
 80152c2:	4249      	negs	r1, r1
 80152c4:	9a05      	ldr	r2, [sp, #20]
 80152c6:	2a00      	cmp	r2, #0
 80152c8:	d149      	bne.n	801535e <_strtod_l+0x3a6>
 80152ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152cc:	4310      	orrs	r0, r2
 80152ce:	d000      	beq.n	80152d2 <_strtod_l+0x31a>
 80152d0:	e6b3      	b.n	801503a <_strtod_l+0x82>
 80152d2:	9a07      	ldr	r2, [sp, #28]
 80152d4:	2a00      	cmp	r2, #0
 80152d6:	d000      	beq.n	80152da <_strtod_l+0x322>
 80152d8:	e6cf      	b.n	801507a <_strtod_l+0xc2>
 80152da:	2b4e      	cmp	r3, #78	; 0x4e
 80152dc:	d025      	beq.n	801532a <_strtod_l+0x372>
 80152de:	dc1f      	bgt.n	8015320 <_strtod_l+0x368>
 80152e0:	2b49      	cmp	r3, #73	; 0x49
 80152e2:	d000      	beq.n	80152e6 <_strtod_l+0x32e>
 80152e4:	e6c9      	b.n	801507a <_strtod_l+0xc2>
 80152e6:	49a0      	ldr	r1, [pc, #640]	; (8015568 <_strtod_l+0x5b0>)
 80152e8:	a821      	add	r0, sp, #132	; 0x84
 80152ea:	f003 f9ed 	bl	80186c8 <__match>
 80152ee:	2800      	cmp	r0, #0
 80152f0:	d100      	bne.n	80152f4 <_strtod_l+0x33c>
 80152f2:	e6c2      	b.n	801507a <_strtod_l+0xc2>
 80152f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80152f6:	499d      	ldr	r1, [pc, #628]	; (801556c <_strtod_l+0x5b4>)
 80152f8:	3b01      	subs	r3, #1
 80152fa:	a821      	add	r0, sp, #132	; 0x84
 80152fc:	9321      	str	r3, [sp, #132]	; 0x84
 80152fe:	f003 f9e3 	bl	80186c8 <__match>
 8015302:	2800      	cmp	r0, #0
 8015304:	d102      	bne.n	801530c <_strtod_l+0x354>
 8015306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015308:	3301      	adds	r3, #1
 801530a:	9321      	str	r3, [sp, #132]	; 0x84
 801530c:	4f98      	ldr	r7, [pc, #608]	; (8015570 <_strtod_l+0x5b8>)
 801530e:	2600      	movs	r6, #0
 8015310:	e693      	b.n	801503a <_strtod_l+0x82>
 8015312:	220a      	movs	r2, #10
 8015314:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015316:	434a      	muls	r2, r1
 8015318:	18d2      	adds	r2, r2, r3
 801531a:	3a30      	subs	r2, #48	; 0x30
 801531c:	920e      	str	r2, [sp, #56]	; 0x38
 801531e:	e7bd      	b.n	801529c <_strtod_l+0x2e4>
 8015320:	2b69      	cmp	r3, #105	; 0x69
 8015322:	d0e0      	beq.n	80152e6 <_strtod_l+0x32e>
 8015324:	2b6e      	cmp	r3, #110	; 0x6e
 8015326:	d000      	beq.n	801532a <_strtod_l+0x372>
 8015328:	e6a7      	b.n	801507a <_strtod_l+0xc2>
 801532a:	4992      	ldr	r1, [pc, #584]	; (8015574 <_strtod_l+0x5bc>)
 801532c:	a821      	add	r0, sp, #132	; 0x84
 801532e:	f003 f9cb 	bl	80186c8 <__match>
 8015332:	2800      	cmp	r0, #0
 8015334:	d100      	bne.n	8015338 <_strtod_l+0x380>
 8015336:	e6a0      	b.n	801507a <_strtod_l+0xc2>
 8015338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801533a:	781b      	ldrb	r3, [r3, #0]
 801533c:	2b28      	cmp	r3, #40	; 0x28
 801533e:	d10c      	bne.n	801535a <_strtod_l+0x3a2>
 8015340:	aa24      	add	r2, sp, #144	; 0x90
 8015342:	498d      	ldr	r1, [pc, #564]	; (8015578 <_strtod_l+0x5c0>)
 8015344:	a821      	add	r0, sp, #132	; 0x84
 8015346:	f003 f9d3 	bl	80186f0 <__hexnan>
 801534a:	2805      	cmp	r0, #5
 801534c:	d105      	bne.n	801535a <_strtod_l+0x3a2>
 801534e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015350:	4a87      	ldr	r2, [pc, #540]	; (8015570 <_strtod_l+0x5b8>)
 8015352:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8015354:	431a      	orrs	r2, r3
 8015356:	0017      	movs	r7, r2
 8015358:	e66f      	b.n	801503a <_strtod_l+0x82>
 801535a:	4f88      	ldr	r7, [pc, #544]	; (801557c <_strtod_l+0x5c4>)
 801535c:	e7d7      	b.n	801530e <_strtod_l+0x356>
 801535e:	4663      	mov	r3, ip
 8015360:	1acb      	subs	r3, r1, r3
 8015362:	9307      	str	r3, [sp, #28]
 8015364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015366:	2b00      	cmp	r3, #0
 8015368:	d101      	bne.n	801536e <_strtod_l+0x3b6>
 801536a:	9b05      	ldr	r3, [sp, #20]
 801536c:	930a      	str	r3, [sp, #40]	; 0x28
 801536e:	9c05      	ldr	r4, [sp, #20]
 8015370:	2c10      	cmp	r4, #16
 8015372:	dd00      	ble.n	8015376 <_strtod_l+0x3be>
 8015374:	2410      	movs	r4, #16
 8015376:	9808      	ldr	r0, [sp, #32]
 8015378:	f7ed fcd8 	bl	8002d2c <__aeabi_ui2d>
 801537c:	9b05      	ldr	r3, [sp, #20]
 801537e:	0006      	movs	r6, r0
 8015380:	000f      	movs	r7, r1
 8015382:	2b09      	cmp	r3, #9
 8015384:	dc15      	bgt.n	80153b2 <_strtod_l+0x3fa>
 8015386:	9b07      	ldr	r3, [sp, #28]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d100      	bne.n	801538e <_strtod_l+0x3d6>
 801538c:	e655      	b.n	801503a <_strtod_l+0x82>
 801538e:	9b07      	ldr	r3, [sp, #28]
 8015390:	2b00      	cmp	r3, #0
 8015392:	dc00      	bgt.n	8015396 <_strtod_l+0x3de>
 8015394:	e07d      	b.n	8015492 <_strtod_l+0x4da>
 8015396:	2b16      	cmp	r3, #22
 8015398:	dc62      	bgt.n	8015460 <_strtod_l+0x4a8>
 801539a:	00dc      	lsls	r4, r3, #3
 801539c:	4b78      	ldr	r3, [pc, #480]	; (8015580 <_strtod_l+0x5c8>)
 801539e:	0032      	movs	r2, r6
 80153a0:	1919      	adds	r1, r3, r4
 80153a2:	003b      	movs	r3, r7
 80153a4:	6808      	ldr	r0, [r1, #0]
 80153a6:	6849      	ldr	r1, [r1, #4]
 80153a8:	f7ec fe7a 	bl	80020a0 <__aeabi_dmul>
 80153ac:	0006      	movs	r6, r0
 80153ae:	000f      	movs	r7, r1
 80153b0:	e643      	b.n	801503a <_strtod_l+0x82>
 80153b2:	0022      	movs	r2, r4
 80153b4:	4b72      	ldr	r3, [pc, #456]	; (8015580 <_strtod_l+0x5c8>)
 80153b6:	3a09      	subs	r2, #9
 80153b8:	00d2      	lsls	r2, r2, #3
 80153ba:	189b      	adds	r3, r3, r2
 80153bc:	681a      	ldr	r2, [r3, #0]
 80153be:	685b      	ldr	r3, [r3, #4]
 80153c0:	f7ec fe6e 	bl	80020a0 <__aeabi_dmul>
 80153c4:	0006      	movs	r6, r0
 80153c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80153c8:	000f      	movs	r7, r1
 80153ca:	f7ed fcaf 	bl	8002d2c <__aeabi_ui2d>
 80153ce:	000b      	movs	r3, r1
 80153d0:	0002      	movs	r2, r0
 80153d2:	0039      	movs	r1, r7
 80153d4:	0030      	movs	r0, r6
 80153d6:	f7eb ff3d 	bl	8001254 <__aeabi_dadd>
 80153da:	9b05      	ldr	r3, [sp, #20]
 80153dc:	0006      	movs	r6, r0
 80153de:	000f      	movs	r7, r1
 80153e0:	2b0f      	cmp	r3, #15
 80153e2:	ddd0      	ble.n	8015386 <_strtod_l+0x3ce>
 80153e4:	9b05      	ldr	r3, [sp, #20]
 80153e6:	1b1c      	subs	r4, r3, r4
 80153e8:	9b07      	ldr	r3, [sp, #28]
 80153ea:	18e4      	adds	r4, r4, r3
 80153ec:	2c00      	cmp	r4, #0
 80153ee:	dc00      	bgt.n	80153f2 <_strtod_l+0x43a>
 80153f0:	e094      	b.n	801551c <_strtod_l+0x564>
 80153f2:	230f      	movs	r3, #15
 80153f4:	4023      	ands	r3, r4
 80153f6:	d00a      	beq.n	801540e <_strtod_l+0x456>
 80153f8:	4961      	ldr	r1, [pc, #388]	; (8015580 <_strtod_l+0x5c8>)
 80153fa:	00db      	lsls	r3, r3, #3
 80153fc:	18c9      	adds	r1, r1, r3
 80153fe:	0032      	movs	r2, r6
 8015400:	6808      	ldr	r0, [r1, #0]
 8015402:	6849      	ldr	r1, [r1, #4]
 8015404:	003b      	movs	r3, r7
 8015406:	f7ec fe4b 	bl	80020a0 <__aeabi_dmul>
 801540a:	0006      	movs	r6, r0
 801540c:	000f      	movs	r7, r1
 801540e:	230f      	movs	r3, #15
 8015410:	439c      	bics	r4, r3
 8015412:	d06e      	beq.n	80154f2 <_strtod_l+0x53a>
 8015414:	3326      	adds	r3, #38	; 0x26
 8015416:	33ff      	adds	r3, #255	; 0xff
 8015418:	429c      	cmp	r4, r3
 801541a:	dd48      	ble.n	80154ae <_strtod_l+0x4f6>
 801541c:	2400      	movs	r4, #0
 801541e:	9405      	str	r4, [sp, #20]
 8015420:	940b      	str	r4, [sp, #44]	; 0x2c
 8015422:	940a      	str	r4, [sp, #40]	; 0x28
 8015424:	2322      	movs	r3, #34	; 0x22
 8015426:	2600      	movs	r6, #0
 8015428:	9a04      	ldr	r2, [sp, #16]
 801542a:	4f51      	ldr	r7, [pc, #324]	; (8015570 <_strtod_l+0x5b8>)
 801542c:	6013      	str	r3, [r2, #0]
 801542e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015430:	42b3      	cmp	r3, r6
 8015432:	d100      	bne.n	8015436 <_strtod_l+0x47e>
 8015434:	e601      	b.n	801503a <_strtod_l+0x82>
 8015436:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015438:	9804      	ldr	r0, [sp, #16]
 801543a:	f003 fa47 	bl	80188cc <_Bfree>
 801543e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015440:	9804      	ldr	r0, [sp, #16]
 8015442:	f003 fa43 	bl	80188cc <_Bfree>
 8015446:	9905      	ldr	r1, [sp, #20]
 8015448:	9804      	ldr	r0, [sp, #16]
 801544a:	f003 fa3f 	bl	80188cc <_Bfree>
 801544e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015450:	9804      	ldr	r0, [sp, #16]
 8015452:	f003 fa3b 	bl	80188cc <_Bfree>
 8015456:	0021      	movs	r1, r4
 8015458:	9804      	ldr	r0, [sp, #16]
 801545a:	f003 fa37 	bl	80188cc <_Bfree>
 801545e:	e5ec      	b.n	801503a <_strtod_l+0x82>
 8015460:	2325      	movs	r3, #37	; 0x25
 8015462:	9a05      	ldr	r2, [sp, #20]
 8015464:	1a9b      	subs	r3, r3, r2
 8015466:	9a07      	ldr	r2, [sp, #28]
 8015468:	4293      	cmp	r3, r2
 801546a:	dbbb      	blt.n	80153e4 <_strtod_l+0x42c>
 801546c:	230f      	movs	r3, #15
 801546e:	9a05      	ldr	r2, [sp, #20]
 8015470:	4c43      	ldr	r4, [pc, #268]	; (8015580 <_strtod_l+0x5c8>)
 8015472:	1a9d      	subs	r5, r3, r2
 8015474:	00e9      	lsls	r1, r5, #3
 8015476:	1861      	adds	r1, r4, r1
 8015478:	0032      	movs	r2, r6
 801547a:	6808      	ldr	r0, [r1, #0]
 801547c:	6849      	ldr	r1, [r1, #4]
 801547e:	003b      	movs	r3, r7
 8015480:	f7ec fe0e 	bl	80020a0 <__aeabi_dmul>
 8015484:	9b07      	ldr	r3, [sp, #28]
 8015486:	1b5e      	subs	r6, r3, r5
 8015488:	00f6      	lsls	r6, r6, #3
 801548a:	19a6      	adds	r6, r4, r6
 801548c:	6832      	ldr	r2, [r6, #0]
 801548e:	6873      	ldr	r3, [r6, #4]
 8015490:	e78a      	b.n	80153a8 <_strtod_l+0x3f0>
 8015492:	9b07      	ldr	r3, [sp, #28]
 8015494:	3316      	adds	r3, #22
 8015496:	dba5      	blt.n	80153e4 <_strtod_l+0x42c>
 8015498:	9b07      	ldr	r3, [sp, #28]
 801549a:	0030      	movs	r0, r6
 801549c:	00da      	lsls	r2, r3, #3
 801549e:	4b38      	ldr	r3, [pc, #224]	; (8015580 <_strtod_l+0x5c8>)
 80154a0:	0039      	movs	r1, r7
 80154a2:	1a9b      	subs	r3, r3, r2
 80154a4:	681a      	ldr	r2, [r3, #0]
 80154a6:	685b      	ldr	r3, [r3, #4]
 80154a8:	f7ec f9f0 	bl	800188c <__aeabi_ddiv>
 80154ac:	e77e      	b.n	80153ac <_strtod_l+0x3f4>
 80154ae:	2300      	movs	r3, #0
 80154b0:	0030      	movs	r0, r6
 80154b2:	0039      	movs	r1, r7
 80154b4:	001d      	movs	r5, r3
 80154b6:	1124      	asrs	r4, r4, #4
 80154b8:	2c01      	cmp	r4, #1
 80154ba:	dc1d      	bgt.n	80154f8 <_strtod_l+0x540>
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d001      	beq.n	80154c4 <_strtod_l+0x50c>
 80154c0:	0006      	movs	r6, r0
 80154c2:	000f      	movs	r7, r1
 80154c4:	4b2f      	ldr	r3, [pc, #188]	; (8015584 <_strtod_l+0x5cc>)
 80154c6:	00ed      	lsls	r5, r5, #3
 80154c8:	18ff      	adds	r7, r7, r3
 80154ca:	4b2f      	ldr	r3, [pc, #188]	; (8015588 <_strtod_l+0x5d0>)
 80154cc:	0032      	movs	r2, r6
 80154ce:	195d      	adds	r5, r3, r5
 80154d0:	6828      	ldr	r0, [r5, #0]
 80154d2:	6869      	ldr	r1, [r5, #4]
 80154d4:	003b      	movs	r3, r7
 80154d6:	f7ec fde3 	bl	80020a0 <__aeabi_dmul>
 80154da:	4b25      	ldr	r3, [pc, #148]	; (8015570 <_strtod_l+0x5b8>)
 80154dc:	4a2b      	ldr	r2, [pc, #172]	; (801558c <_strtod_l+0x5d4>)
 80154de:	0006      	movs	r6, r0
 80154e0:	400b      	ands	r3, r1
 80154e2:	4293      	cmp	r3, r2
 80154e4:	d89a      	bhi.n	801541c <_strtod_l+0x464>
 80154e6:	4a2a      	ldr	r2, [pc, #168]	; (8015590 <_strtod_l+0x5d8>)
 80154e8:	4293      	cmp	r3, r2
 80154ea:	d913      	bls.n	8015514 <_strtod_l+0x55c>
 80154ec:	2601      	movs	r6, #1
 80154ee:	4f29      	ldr	r7, [pc, #164]	; (8015594 <_strtod_l+0x5dc>)
 80154f0:	4276      	negs	r6, r6
 80154f2:	2300      	movs	r3, #0
 80154f4:	9306      	str	r3, [sp, #24]
 80154f6:	e07b      	b.n	80155f0 <_strtod_l+0x638>
 80154f8:	2201      	movs	r2, #1
 80154fa:	4214      	tst	r4, r2
 80154fc:	d007      	beq.n	801550e <_strtod_l+0x556>
 80154fe:	4a22      	ldr	r2, [pc, #136]	; (8015588 <_strtod_l+0x5d0>)
 8015500:	00eb      	lsls	r3, r5, #3
 8015502:	189b      	adds	r3, r3, r2
 8015504:	681a      	ldr	r2, [r3, #0]
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	f7ec fdca 	bl	80020a0 <__aeabi_dmul>
 801550c:	2301      	movs	r3, #1
 801550e:	3501      	adds	r5, #1
 8015510:	1064      	asrs	r4, r4, #1
 8015512:	e7d1      	b.n	80154b8 <_strtod_l+0x500>
 8015514:	23d4      	movs	r3, #212	; 0xd4
 8015516:	049b      	lsls	r3, r3, #18
 8015518:	18cf      	adds	r7, r1, r3
 801551a:	e7ea      	b.n	80154f2 <_strtod_l+0x53a>
 801551c:	2c00      	cmp	r4, #0
 801551e:	d0e8      	beq.n	80154f2 <_strtod_l+0x53a>
 8015520:	230f      	movs	r3, #15
 8015522:	4264      	negs	r4, r4
 8015524:	4023      	ands	r3, r4
 8015526:	d00a      	beq.n	801553e <_strtod_l+0x586>
 8015528:	4a15      	ldr	r2, [pc, #84]	; (8015580 <_strtod_l+0x5c8>)
 801552a:	00db      	lsls	r3, r3, #3
 801552c:	18d3      	adds	r3, r2, r3
 801552e:	0030      	movs	r0, r6
 8015530:	681a      	ldr	r2, [r3, #0]
 8015532:	685b      	ldr	r3, [r3, #4]
 8015534:	0039      	movs	r1, r7
 8015536:	f7ec f9a9 	bl	800188c <__aeabi_ddiv>
 801553a:	0006      	movs	r6, r0
 801553c:	000f      	movs	r7, r1
 801553e:	1124      	asrs	r4, r4, #4
 8015540:	d0d7      	beq.n	80154f2 <_strtod_l+0x53a>
 8015542:	2c1f      	cmp	r4, #31
 8015544:	dd28      	ble.n	8015598 <_strtod_l+0x5e0>
 8015546:	2400      	movs	r4, #0
 8015548:	9405      	str	r4, [sp, #20]
 801554a:	940b      	str	r4, [sp, #44]	; 0x2c
 801554c:	940a      	str	r4, [sp, #40]	; 0x28
 801554e:	2322      	movs	r3, #34	; 0x22
 8015550:	9a04      	ldr	r2, [sp, #16]
 8015552:	2600      	movs	r6, #0
 8015554:	6013      	str	r3, [r2, #0]
 8015556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015558:	2700      	movs	r7, #0
 801555a:	2b00      	cmp	r3, #0
 801555c:	d000      	beq.n	8015560 <_strtod_l+0x5a8>
 801555e:	e76a      	b.n	8015436 <_strtod_l+0x47e>
 8015560:	e56b      	b.n	801503a <_strtod_l+0x82>
 8015562:	46c0      	nop			; (mov r8, r8)
 8015564:	00004e1f 	.word	0x00004e1f
 8015568:	0801ca75 	.word	0x0801ca75
 801556c:	0801cbc8 	.word	0x0801cbc8
 8015570:	7ff00000 	.word	0x7ff00000
 8015574:	0801ca7d 	.word	0x0801ca7d
 8015578:	0801ca34 	.word	0x0801ca34
 801557c:	fff80000 	.word	0xfff80000
 8015580:	0801cc00 	.word	0x0801cc00
 8015584:	fcb00000 	.word	0xfcb00000
 8015588:	0801cbd8 	.word	0x0801cbd8
 801558c:	7ca00000 	.word	0x7ca00000
 8015590:	7c900000 	.word	0x7c900000
 8015594:	7fefffff 	.word	0x7fefffff
 8015598:	2310      	movs	r3, #16
 801559a:	4023      	ands	r3, r4
 801559c:	9306      	str	r3, [sp, #24]
 801559e:	d001      	beq.n	80155a4 <_strtod_l+0x5ec>
 80155a0:	236a      	movs	r3, #106	; 0x6a
 80155a2:	9306      	str	r3, [sp, #24]
 80155a4:	2300      	movs	r3, #0
 80155a6:	0030      	movs	r0, r6
 80155a8:	0039      	movs	r1, r7
 80155aa:	001d      	movs	r5, r3
 80155ac:	2c00      	cmp	r4, #0
 80155ae:	dd00      	ble.n	80155b2 <_strtod_l+0x5fa>
 80155b0:	e10e      	b.n	80157d0 <_strtod_l+0x818>
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d001      	beq.n	80155ba <_strtod_l+0x602>
 80155b6:	0006      	movs	r6, r0
 80155b8:	000f      	movs	r7, r1
 80155ba:	9b06      	ldr	r3, [sp, #24]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d00f      	beq.n	80155e0 <_strtod_l+0x628>
 80155c0:	236b      	movs	r3, #107	; 0x6b
 80155c2:	0079      	lsls	r1, r7, #1
 80155c4:	0d49      	lsrs	r1, r1, #21
 80155c6:	003a      	movs	r2, r7
 80155c8:	1a5b      	subs	r3, r3, r1
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	dd08      	ble.n	80155e0 <_strtod_l+0x628>
 80155ce:	2b1f      	cmp	r3, #31
 80155d0:	dc00      	bgt.n	80155d4 <_strtod_l+0x61c>
 80155d2:	e112      	b.n	80157fa <_strtod_l+0x842>
 80155d4:	2600      	movs	r6, #0
 80155d6:	2b34      	cmp	r3, #52	; 0x34
 80155d8:	dc00      	bgt.n	80155dc <_strtod_l+0x624>
 80155da:	e107      	b.n	80157ec <_strtod_l+0x834>
 80155dc:	27dc      	movs	r7, #220	; 0xdc
 80155de:	04bf      	lsls	r7, r7, #18
 80155e0:	2200      	movs	r2, #0
 80155e2:	2300      	movs	r3, #0
 80155e4:	0030      	movs	r0, r6
 80155e6:	0039      	movs	r1, r7
 80155e8:	f7ea ff38 	bl	800045c <__aeabi_dcmpeq>
 80155ec:	2800      	cmp	r0, #0
 80155ee:	d1aa      	bne.n	8015546 <_strtod_l+0x58e>
 80155f0:	9b08      	ldr	r3, [sp, #32]
 80155f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80155f4:	9300      	str	r3, [sp, #0]
 80155f6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80155f8:	9b05      	ldr	r3, [sp, #20]
 80155fa:	9804      	ldr	r0, [sp, #16]
 80155fc:	f003 f9ae 	bl	801895c <__s2b>
 8015600:	900b      	str	r0, [sp, #44]	; 0x2c
 8015602:	2800      	cmp	r0, #0
 8015604:	d100      	bne.n	8015608 <_strtod_l+0x650>
 8015606:	e709      	b.n	801541c <_strtod_l+0x464>
 8015608:	9b07      	ldr	r3, [sp, #28]
 801560a:	9a07      	ldr	r2, [sp, #28]
 801560c:	17db      	asrs	r3, r3, #31
 801560e:	4252      	negs	r2, r2
 8015610:	4013      	ands	r3, r2
 8015612:	9315      	str	r3, [sp, #84]	; 0x54
 8015614:	9b07      	ldr	r3, [sp, #28]
 8015616:	2400      	movs	r4, #0
 8015618:	43db      	mvns	r3, r3
 801561a:	9a07      	ldr	r2, [sp, #28]
 801561c:	17db      	asrs	r3, r3, #31
 801561e:	401a      	ands	r2, r3
 8015620:	921c      	str	r2, [sp, #112]	; 0x70
 8015622:	9405      	str	r4, [sp, #20]
 8015624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015626:	9804      	ldr	r0, [sp, #16]
 8015628:	6859      	ldr	r1, [r3, #4]
 801562a:	f003 f927 	bl	801887c <_Balloc>
 801562e:	900a      	str	r0, [sp, #40]	; 0x28
 8015630:	2800      	cmp	r0, #0
 8015632:	d100      	bne.n	8015636 <_strtod_l+0x67e>
 8015634:	e6f6      	b.n	8015424 <_strtod_l+0x46c>
 8015636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015638:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801563a:	691b      	ldr	r3, [r3, #16]
 801563c:	310c      	adds	r1, #12
 801563e:	1c9a      	adds	r2, r3, #2
 8015640:	0092      	lsls	r2, r2, #2
 8015642:	300c      	adds	r0, #12
 8015644:	9308      	str	r3, [sp, #32]
 8015646:	f7ff fa32 	bl	8014aae <memcpy>
 801564a:	ab24      	add	r3, sp, #144	; 0x90
 801564c:	9301      	str	r3, [sp, #4]
 801564e:	ab23      	add	r3, sp, #140	; 0x8c
 8015650:	9300      	str	r3, [sp, #0]
 8015652:	0032      	movs	r2, r6
 8015654:	003b      	movs	r3, r7
 8015656:	9804      	ldr	r0, [sp, #16]
 8015658:	960e      	str	r6, [sp, #56]	; 0x38
 801565a:	970f      	str	r7, [sp, #60]	; 0x3c
 801565c:	f003 fc22 	bl	8018ea4 <__d2b>
 8015660:	9022      	str	r0, [sp, #136]	; 0x88
 8015662:	2800      	cmp	r0, #0
 8015664:	d100      	bne.n	8015668 <_strtod_l+0x6b0>
 8015666:	e6dd      	b.n	8015424 <_strtod_l+0x46c>
 8015668:	2101      	movs	r1, #1
 801566a:	9804      	ldr	r0, [sp, #16]
 801566c:	f003 f9fd 	bl	8018a6a <__i2b>
 8015670:	9005      	str	r0, [sp, #20]
 8015672:	2800      	cmp	r0, #0
 8015674:	d100      	bne.n	8015678 <_strtod_l+0x6c0>
 8015676:	e6d5      	b.n	8015424 <_strtod_l+0x46c>
 8015678:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801567a:	2b00      	cmp	r3, #0
 801567c:	da00      	bge.n	8015680 <_strtod_l+0x6c8>
 801567e:	e0c1      	b.n	8015804 <_strtod_l+0x84c>
 8015680:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015682:	189d      	adds	r5, r3, r2
 8015684:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015686:	4694      	mov	ip, r2
 8015688:	9906      	ldr	r1, [sp, #24]
 801568a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801568c:	1a5b      	subs	r3, r3, r1
 801568e:	2136      	movs	r1, #54	; 0x36
 8015690:	189b      	adds	r3, r3, r2
 8015692:	1a8a      	subs	r2, r1, r2
 8015694:	49b2      	ldr	r1, [pc, #712]	; (8015960 <_strtod_l+0x9a8>)
 8015696:	3b01      	subs	r3, #1
 8015698:	2001      	movs	r0, #1
 801569a:	428b      	cmp	r3, r1
 801569c:	db00      	blt.n	80156a0 <_strtod_l+0x6e8>
 801569e:	e0bd      	b.n	801581c <_strtod_l+0x864>
 80156a0:	1ac9      	subs	r1, r1, r3
 80156a2:	1a52      	subs	r2, r2, r1
 80156a4:	291f      	cmp	r1, #31
 80156a6:	dd00      	ble.n	80156aa <_strtod_l+0x6f2>
 80156a8:	e0b1      	b.n	801580e <_strtod_l+0x856>
 80156aa:	4088      	lsls	r0, r1
 80156ac:	2300      	movs	r3, #0
 80156ae:	9014      	str	r0, [sp, #80]	; 0x50
 80156b0:	9310      	str	r3, [sp, #64]	; 0x40
 80156b2:	18ab      	adds	r3, r5, r2
 80156b4:	9308      	str	r3, [sp, #32]
 80156b6:	0013      	movs	r3, r2
 80156b8:	9a06      	ldr	r2, [sp, #24]
 80156ba:	4463      	add	r3, ip
 80156bc:	18d3      	adds	r3, r2, r3
 80156be:	9a08      	ldr	r2, [sp, #32]
 80156c0:	930c      	str	r3, [sp, #48]	; 0x30
 80156c2:	002b      	movs	r3, r5
 80156c4:	4295      	cmp	r5, r2
 80156c6:	dd00      	ble.n	80156ca <_strtod_l+0x712>
 80156c8:	0013      	movs	r3, r2
 80156ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80156cc:	4293      	cmp	r3, r2
 80156ce:	dd00      	ble.n	80156d2 <_strtod_l+0x71a>
 80156d0:	0013      	movs	r3, r2
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	dd06      	ble.n	80156e4 <_strtod_l+0x72c>
 80156d6:	9a08      	ldr	r2, [sp, #32]
 80156d8:	1aed      	subs	r5, r5, r3
 80156da:	1ad2      	subs	r2, r2, r3
 80156dc:	9208      	str	r2, [sp, #32]
 80156de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80156e0:	1ad2      	subs	r2, r2, r3
 80156e2:	920c      	str	r2, [sp, #48]	; 0x30
 80156e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d017      	beq.n	801571a <_strtod_l+0x762>
 80156ea:	001a      	movs	r2, r3
 80156ec:	9905      	ldr	r1, [sp, #20]
 80156ee:	9804      	ldr	r0, [sp, #16]
 80156f0:	f003 fa54 	bl	8018b9c <__pow5mult>
 80156f4:	9005      	str	r0, [sp, #20]
 80156f6:	2800      	cmp	r0, #0
 80156f8:	d100      	bne.n	80156fc <_strtod_l+0x744>
 80156fa:	e693      	b.n	8015424 <_strtod_l+0x46c>
 80156fc:	0001      	movs	r1, r0
 80156fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015700:	9804      	ldr	r0, [sp, #16]
 8015702:	f003 f9bb 	bl	8018a7c <__multiply>
 8015706:	9012      	str	r0, [sp, #72]	; 0x48
 8015708:	2800      	cmp	r0, #0
 801570a:	d100      	bne.n	801570e <_strtod_l+0x756>
 801570c:	e68a      	b.n	8015424 <_strtod_l+0x46c>
 801570e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015710:	9804      	ldr	r0, [sp, #16]
 8015712:	f003 f8db 	bl	80188cc <_Bfree>
 8015716:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015718:	9322      	str	r3, [sp, #136]	; 0x88
 801571a:	9b08      	ldr	r3, [sp, #32]
 801571c:	2b00      	cmp	r3, #0
 801571e:	dd00      	ble.n	8015722 <_strtod_l+0x76a>
 8015720:	e07f      	b.n	8015822 <_strtod_l+0x86a>
 8015722:	9b07      	ldr	r3, [sp, #28]
 8015724:	2b00      	cmp	r3, #0
 8015726:	dd08      	ble.n	801573a <_strtod_l+0x782>
 8015728:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801572a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801572c:	9804      	ldr	r0, [sp, #16]
 801572e:	f003 fa35 	bl	8018b9c <__pow5mult>
 8015732:	900a      	str	r0, [sp, #40]	; 0x28
 8015734:	2800      	cmp	r0, #0
 8015736:	d100      	bne.n	801573a <_strtod_l+0x782>
 8015738:	e674      	b.n	8015424 <_strtod_l+0x46c>
 801573a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801573c:	2b00      	cmp	r3, #0
 801573e:	dd08      	ble.n	8015752 <_strtod_l+0x79a>
 8015740:	001a      	movs	r2, r3
 8015742:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015744:	9804      	ldr	r0, [sp, #16]
 8015746:	f003 fa6b 	bl	8018c20 <__lshift>
 801574a:	900a      	str	r0, [sp, #40]	; 0x28
 801574c:	2800      	cmp	r0, #0
 801574e:	d100      	bne.n	8015752 <_strtod_l+0x79a>
 8015750:	e668      	b.n	8015424 <_strtod_l+0x46c>
 8015752:	2d00      	cmp	r5, #0
 8015754:	dd08      	ble.n	8015768 <_strtod_l+0x7b0>
 8015756:	002a      	movs	r2, r5
 8015758:	9905      	ldr	r1, [sp, #20]
 801575a:	9804      	ldr	r0, [sp, #16]
 801575c:	f003 fa60 	bl	8018c20 <__lshift>
 8015760:	9005      	str	r0, [sp, #20]
 8015762:	2800      	cmp	r0, #0
 8015764:	d100      	bne.n	8015768 <_strtod_l+0x7b0>
 8015766:	e65d      	b.n	8015424 <_strtod_l+0x46c>
 8015768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801576a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801576c:	9804      	ldr	r0, [sp, #16]
 801576e:	f003 fac3 	bl	8018cf8 <__mdiff>
 8015772:	1e04      	subs	r4, r0, #0
 8015774:	d100      	bne.n	8015778 <_strtod_l+0x7c0>
 8015776:	e655      	b.n	8015424 <_strtod_l+0x46c>
 8015778:	2500      	movs	r5, #0
 801577a:	68c3      	ldr	r3, [r0, #12]
 801577c:	9905      	ldr	r1, [sp, #20]
 801577e:	60c5      	str	r5, [r0, #12]
 8015780:	9312      	str	r3, [sp, #72]	; 0x48
 8015782:	f003 fa9f 	bl	8018cc4 <__mcmp>
 8015786:	42a8      	cmp	r0, r5
 8015788:	da55      	bge.n	8015836 <_strtod_l+0x87e>
 801578a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801578c:	42ab      	cmp	r3, r5
 801578e:	d11b      	bne.n	80157c8 <_strtod_l+0x810>
 8015790:	42ae      	cmp	r6, r5
 8015792:	d119      	bne.n	80157c8 <_strtod_l+0x810>
 8015794:	033b      	lsls	r3, r7, #12
 8015796:	42ab      	cmp	r3, r5
 8015798:	d116      	bne.n	80157c8 <_strtod_l+0x810>
 801579a:	22d6      	movs	r2, #214	; 0xd6
 801579c:	4b71      	ldr	r3, [pc, #452]	; (8015964 <_strtod_l+0x9ac>)
 801579e:	04d2      	lsls	r2, r2, #19
 80157a0:	403b      	ands	r3, r7
 80157a2:	4293      	cmp	r3, r2
 80157a4:	d910      	bls.n	80157c8 <_strtod_l+0x810>
 80157a6:	6963      	ldr	r3, [r4, #20]
 80157a8:	42ab      	cmp	r3, r5
 80157aa:	d102      	bne.n	80157b2 <_strtod_l+0x7fa>
 80157ac:	6923      	ldr	r3, [r4, #16]
 80157ae:	2b01      	cmp	r3, #1
 80157b0:	dd0a      	ble.n	80157c8 <_strtod_l+0x810>
 80157b2:	0021      	movs	r1, r4
 80157b4:	2201      	movs	r2, #1
 80157b6:	9804      	ldr	r0, [sp, #16]
 80157b8:	f003 fa32 	bl	8018c20 <__lshift>
 80157bc:	9905      	ldr	r1, [sp, #20]
 80157be:	0004      	movs	r4, r0
 80157c0:	f003 fa80 	bl	8018cc4 <__mcmp>
 80157c4:	2800      	cmp	r0, #0
 80157c6:	dc6b      	bgt.n	80158a0 <_strtod_l+0x8e8>
 80157c8:	9b06      	ldr	r3, [sp, #24]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d178      	bne.n	80158c0 <_strtod_l+0x908>
 80157ce:	e632      	b.n	8015436 <_strtod_l+0x47e>
 80157d0:	2201      	movs	r2, #1
 80157d2:	4214      	tst	r4, r2
 80157d4:	d007      	beq.n	80157e6 <_strtod_l+0x82e>
 80157d6:	4a64      	ldr	r2, [pc, #400]	; (8015968 <_strtod_l+0x9b0>)
 80157d8:	00eb      	lsls	r3, r5, #3
 80157da:	18d3      	adds	r3, r2, r3
 80157dc:	681a      	ldr	r2, [r3, #0]
 80157de:	685b      	ldr	r3, [r3, #4]
 80157e0:	f7ec fc5e 	bl	80020a0 <__aeabi_dmul>
 80157e4:	2301      	movs	r3, #1
 80157e6:	3501      	adds	r5, #1
 80157e8:	1064      	asrs	r4, r4, #1
 80157ea:	e6df      	b.n	80155ac <_strtod_l+0x5f4>
 80157ec:	2101      	movs	r1, #1
 80157ee:	3b20      	subs	r3, #32
 80157f0:	4249      	negs	r1, r1
 80157f2:	4099      	lsls	r1, r3
 80157f4:	400a      	ands	r2, r1
 80157f6:	0017      	movs	r7, r2
 80157f8:	e6f2      	b.n	80155e0 <_strtod_l+0x628>
 80157fa:	2201      	movs	r2, #1
 80157fc:	4252      	negs	r2, r2
 80157fe:	409a      	lsls	r2, r3
 8015800:	4016      	ands	r6, r2
 8015802:	e6ed      	b.n	80155e0 <_strtod_l+0x628>
 8015804:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015806:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015808:	1ad2      	subs	r2, r2, r3
 801580a:	4694      	mov	ip, r2
 801580c:	e73c      	b.n	8015688 <_strtod_l+0x6d0>
 801580e:	4957      	ldr	r1, [pc, #348]	; (801596c <_strtod_l+0x9b4>)
 8015810:	1acb      	subs	r3, r1, r3
 8015812:	0001      	movs	r1, r0
 8015814:	4099      	lsls	r1, r3
 8015816:	9110      	str	r1, [sp, #64]	; 0x40
 8015818:	9014      	str	r0, [sp, #80]	; 0x50
 801581a:	e74a      	b.n	80156b2 <_strtod_l+0x6fa>
 801581c:	2300      	movs	r3, #0
 801581e:	9310      	str	r3, [sp, #64]	; 0x40
 8015820:	e7fa      	b.n	8015818 <_strtod_l+0x860>
 8015822:	9a08      	ldr	r2, [sp, #32]
 8015824:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015826:	9804      	ldr	r0, [sp, #16]
 8015828:	f003 f9fa 	bl	8018c20 <__lshift>
 801582c:	9022      	str	r0, [sp, #136]	; 0x88
 801582e:	2800      	cmp	r0, #0
 8015830:	d000      	beq.n	8015834 <_strtod_l+0x87c>
 8015832:	e776      	b.n	8015722 <_strtod_l+0x76a>
 8015834:	e5f6      	b.n	8015424 <_strtod_l+0x46c>
 8015836:	970c      	str	r7, [sp, #48]	; 0x30
 8015838:	2800      	cmp	r0, #0
 801583a:	d000      	beq.n	801583e <_strtod_l+0x886>
 801583c:	e0a0      	b.n	8015980 <_strtod_l+0x9c8>
 801583e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015840:	033b      	lsls	r3, r7, #12
 8015842:	0b1b      	lsrs	r3, r3, #12
 8015844:	2a00      	cmp	r2, #0
 8015846:	d027      	beq.n	8015898 <_strtod_l+0x8e0>
 8015848:	4a49      	ldr	r2, [pc, #292]	; (8015970 <_strtod_l+0x9b8>)
 801584a:	4293      	cmp	r3, r2
 801584c:	d157      	bne.n	80158fe <_strtod_l+0x946>
 801584e:	2201      	movs	r2, #1
 8015850:	9b06      	ldr	r3, [sp, #24]
 8015852:	4252      	negs	r2, r2
 8015854:	0031      	movs	r1, r6
 8015856:	0010      	movs	r0, r2
 8015858:	2b00      	cmp	r3, #0
 801585a:	d00b      	beq.n	8015874 <_strtod_l+0x8bc>
 801585c:	25d4      	movs	r5, #212	; 0xd4
 801585e:	4b41      	ldr	r3, [pc, #260]	; (8015964 <_strtod_l+0x9ac>)
 8015860:	04ed      	lsls	r5, r5, #19
 8015862:	403b      	ands	r3, r7
 8015864:	0010      	movs	r0, r2
 8015866:	42ab      	cmp	r3, r5
 8015868:	d804      	bhi.n	8015874 <_strtod_l+0x8bc>
 801586a:	306c      	adds	r0, #108	; 0x6c
 801586c:	0d1b      	lsrs	r3, r3, #20
 801586e:	1ac3      	subs	r3, r0, r3
 8015870:	409a      	lsls	r2, r3
 8015872:	0010      	movs	r0, r2
 8015874:	4281      	cmp	r1, r0
 8015876:	d142      	bne.n	80158fe <_strtod_l+0x946>
 8015878:	4b3e      	ldr	r3, [pc, #248]	; (8015974 <_strtod_l+0x9bc>)
 801587a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801587c:	429a      	cmp	r2, r3
 801587e:	d102      	bne.n	8015886 <_strtod_l+0x8ce>
 8015880:	1c4b      	adds	r3, r1, #1
 8015882:	d100      	bne.n	8015886 <_strtod_l+0x8ce>
 8015884:	e5ce      	b.n	8015424 <_strtod_l+0x46c>
 8015886:	4b37      	ldr	r3, [pc, #220]	; (8015964 <_strtod_l+0x9ac>)
 8015888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801588a:	2600      	movs	r6, #0
 801588c:	401a      	ands	r2, r3
 801588e:	0013      	movs	r3, r2
 8015890:	2280      	movs	r2, #128	; 0x80
 8015892:	0352      	lsls	r2, r2, #13
 8015894:	189f      	adds	r7, r3, r2
 8015896:	e797      	b.n	80157c8 <_strtod_l+0x810>
 8015898:	2b00      	cmp	r3, #0
 801589a:	d130      	bne.n	80158fe <_strtod_l+0x946>
 801589c:	2e00      	cmp	r6, #0
 801589e:	d12e      	bne.n	80158fe <_strtod_l+0x946>
 80158a0:	9906      	ldr	r1, [sp, #24]
 80158a2:	003b      	movs	r3, r7
 80158a4:	4a2f      	ldr	r2, [pc, #188]	; (8015964 <_strtod_l+0x9ac>)
 80158a6:	2900      	cmp	r1, #0
 80158a8:	d020      	beq.n	80158ec <_strtod_l+0x934>
 80158aa:	0011      	movs	r1, r2
 80158ac:	20d6      	movs	r0, #214	; 0xd6
 80158ae:	4039      	ands	r1, r7
 80158b0:	04c0      	lsls	r0, r0, #19
 80158b2:	4281      	cmp	r1, r0
 80158b4:	dc1a      	bgt.n	80158ec <_strtod_l+0x934>
 80158b6:	23dc      	movs	r3, #220	; 0xdc
 80158b8:	049b      	lsls	r3, r3, #18
 80158ba:	4299      	cmp	r1, r3
 80158bc:	dc00      	bgt.n	80158c0 <_strtod_l+0x908>
 80158be:	e646      	b.n	801554e <_strtod_l+0x596>
 80158c0:	4b2d      	ldr	r3, [pc, #180]	; (8015978 <_strtod_l+0x9c0>)
 80158c2:	0030      	movs	r0, r6
 80158c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80158c6:	2300      	movs	r3, #0
 80158c8:	931a      	str	r3, [sp, #104]	; 0x68
 80158ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80158cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80158ce:	0039      	movs	r1, r7
 80158d0:	f7ec fbe6 	bl	80020a0 <__aeabi_dmul>
 80158d4:	0006      	movs	r6, r0
 80158d6:	000f      	movs	r7, r1
 80158d8:	1e0b      	subs	r3, r1, #0
 80158da:	d000      	beq.n	80158de <_strtod_l+0x926>
 80158dc:	e5ab      	b.n	8015436 <_strtod_l+0x47e>
 80158de:	2800      	cmp	r0, #0
 80158e0:	d000      	beq.n	80158e4 <_strtod_l+0x92c>
 80158e2:	e5a8      	b.n	8015436 <_strtod_l+0x47e>
 80158e4:	9a04      	ldr	r2, [sp, #16]
 80158e6:	3322      	adds	r3, #34	; 0x22
 80158e8:	6013      	str	r3, [r2, #0]
 80158ea:	e5a4      	b.n	8015436 <_strtod_l+0x47e>
 80158ec:	2601      	movs	r6, #1
 80158ee:	4013      	ands	r3, r2
 80158f0:	4a22      	ldr	r2, [pc, #136]	; (801597c <_strtod_l+0x9c4>)
 80158f2:	4276      	negs	r6, r6
 80158f4:	189b      	adds	r3, r3, r2
 80158f6:	4a1e      	ldr	r2, [pc, #120]	; (8015970 <_strtod_l+0x9b8>)
 80158f8:	431a      	orrs	r2, r3
 80158fa:	0017      	movs	r7, r2
 80158fc:	e764      	b.n	80157c8 <_strtod_l+0x810>
 80158fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015900:	2b00      	cmp	r3, #0
 8015902:	d015      	beq.n	8015930 <_strtod_l+0x978>
 8015904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015906:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015908:	4213      	tst	r3, r2
 801590a:	d100      	bne.n	801590e <_strtod_l+0x956>
 801590c:	e75c      	b.n	80157c8 <_strtod_l+0x810>
 801590e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015910:	9a06      	ldr	r2, [sp, #24]
 8015912:	0030      	movs	r0, r6
 8015914:	0039      	movs	r1, r7
 8015916:	2b00      	cmp	r3, #0
 8015918:	d00f      	beq.n	801593a <_strtod_l+0x982>
 801591a:	f7ff fb35 	bl	8014f88 <sulp>
 801591e:	0002      	movs	r2, r0
 8015920:	000b      	movs	r3, r1
 8015922:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015924:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015926:	f7eb fc95 	bl	8001254 <__aeabi_dadd>
 801592a:	0006      	movs	r6, r0
 801592c:	000f      	movs	r7, r1
 801592e:	e74b      	b.n	80157c8 <_strtod_l+0x810>
 8015930:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015932:	4233      	tst	r3, r6
 8015934:	d100      	bne.n	8015938 <_strtod_l+0x980>
 8015936:	e747      	b.n	80157c8 <_strtod_l+0x810>
 8015938:	e7e9      	b.n	801590e <_strtod_l+0x956>
 801593a:	f7ff fb25 	bl	8014f88 <sulp>
 801593e:	0002      	movs	r2, r0
 8015940:	000b      	movs	r3, r1
 8015942:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015944:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015946:	f7ec fe1d 	bl	8002584 <__aeabi_dsub>
 801594a:	2200      	movs	r2, #0
 801594c:	2300      	movs	r3, #0
 801594e:	0006      	movs	r6, r0
 8015950:	000f      	movs	r7, r1
 8015952:	f7ea fd83 	bl	800045c <__aeabi_dcmpeq>
 8015956:	2800      	cmp	r0, #0
 8015958:	d000      	beq.n	801595c <_strtod_l+0x9a4>
 801595a:	e5f8      	b.n	801554e <_strtod_l+0x596>
 801595c:	e734      	b.n	80157c8 <_strtod_l+0x810>
 801595e:	46c0      	nop			; (mov r8, r8)
 8015960:	fffffc02 	.word	0xfffffc02
 8015964:	7ff00000 	.word	0x7ff00000
 8015968:	0801ca48 	.word	0x0801ca48
 801596c:	fffffbe2 	.word	0xfffffbe2
 8015970:	000fffff 	.word	0x000fffff
 8015974:	7fefffff 	.word	0x7fefffff
 8015978:	39500000 	.word	0x39500000
 801597c:	fff00000 	.word	0xfff00000
 8015980:	9905      	ldr	r1, [sp, #20]
 8015982:	0020      	movs	r0, r4
 8015984:	f003 fae2 	bl	8018f4c <__ratio>
 8015988:	2380      	movs	r3, #128	; 0x80
 801598a:	2200      	movs	r2, #0
 801598c:	05db      	lsls	r3, r3, #23
 801598e:	9008      	str	r0, [sp, #32]
 8015990:	9109      	str	r1, [sp, #36]	; 0x24
 8015992:	f7ea fd73 	bl	800047c <__aeabi_dcmple>
 8015996:	2800      	cmp	r0, #0
 8015998:	d100      	bne.n	801599c <_strtod_l+0x9e4>
 801599a:	e07f      	b.n	8015a9c <_strtod_l+0xae4>
 801599c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d04b      	beq.n	8015a3a <_strtod_l+0xa82>
 80159a2:	2200      	movs	r2, #0
 80159a4:	4b8a      	ldr	r3, [pc, #552]	; (8015bd0 <_strtod_l+0xc18>)
 80159a6:	9210      	str	r2, [sp, #64]	; 0x40
 80159a8:	9311      	str	r3, [sp, #68]	; 0x44
 80159aa:	4b89      	ldr	r3, [pc, #548]	; (8015bd0 <_strtod_l+0xc18>)
 80159ac:	9308      	str	r3, [sp, #32]
 80159ae:	4a89      	ldr	r2, [pc, #548]	; (8015bd4 <_strtod_l+0xc1c>)
 80159b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159b2:	4013      	ands	r3, r2
 80159b4:	9314      	str	r3, [sp, #80]	; 0x50
 80159b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80159b8:	4b87      	ldr	r3, [pc, #540]	; (8015bd8 <_strtod_l+0xc20>)
 80159ba:	429a      	cmp	r2, r3
 80159bc:	d000      	beq.n	80159c0 <_strtod_l+0xa08>
 80159be:	e0ba      	b.n	8015b36 <_strtod_l+0xb7e>
 80159c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80159c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159c4:	921a      	str	r2, [sp, #104]	; 0x68
 80159c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80159c8:	4a84      	ldr	r2, [pc, #528]	; (8015bdc <_strtod_l+0xc24>)
 80159ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159cc:	4694      	mov	ip, r2
 80159ce:	4463      	add	r3, ip
 80159d0:	001f      	movs	r7, r3
 80159d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80159d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80159d6:	0030      	movs	r0, r6
 80159d8:	0039      	movs	r1, r7
 80159da:	920c      	str	r2, [sp, #48]	; 0x30
 80159dc:	930d      	str	r3, [sp, #52]	; 0x34
 80159de:	f003 f9ef 	bl	8018dc0 <__ulp>
 80159e2:	0002      	movs	r2, r0
 80159e4:	000b      	movs	r3, r1
 80159e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80159e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80159ea:	f7ec fb59 	bl	80020a0 <__aeabi_dmul>
 80159ee:	0032      	movs	r2, r6
 80159f0:	003b      	movs	r3, r7
 80159f2:	f7eb fc2f 	bl	8001254 <__aeabi_dadd>
 80159f6:	4a77      	ldr	r2, [pc, #476]	; (8015bd4 <_strtod_l+0xc1c>)
 80159f8:	4b79      	ldr	r3, [pc, #484]	; (8015be0 <_strtod_l+0xc28>)
 80159fa:	0006      	movs	r6, r0
 80159fc:	400a      	ands	r2, r1
 80159fe:	429a      	cmp	r2, r3
 8015a00:	d964      	bls.n	8015acc <_strtod_l+0xb14>
 8015a02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a04:	4a77      	ldr	r2, [pc, #476]	; (8015be4 <_strtod_l+0xc2c>)
 8015a06:	4293      	cmp	r3, r2
 8015a08:	d103      	bne.n	8015a12 <_strtod_l+0xa5a>
 8015a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a0c:	3301      	adds	r3, #1
 8015a0e:	d100      	bne.n	8015a12 <_strtod_l+0xa5a>
 8015a10:	e508      	b.n	8015424 <_strtod_l+0x46c>
 8015a12:	2601      	movs	r6, #1
 8015a14:	4f73      	ldr	r7, [pc, #460]	; (8015be4 <_strtod_l+0xc2c>)
 8015a16:	4276      	negs	r6, r6
 8015a18:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015a1a:	9804      	ldr	r0, [sp, #16]
 8015a1c:	f002 ff56 	bl	80188cc <_Bfree>
 8015a20:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015a22:	9804      	ldr	r0, [sp, #16]
 8015a24:	f002 ff52 	bl	80188cc <_Bfree>
 8015a28:	9905      	ldr	r1, [sp, #20]
 8015a2a:	9804      	ldr	r0, [sp, #16]
 8015a2c:	f002 ff4e 	bl	80188cc <_Bfree>
 8015a30:	0021      	movs	r1, r4
 8015a32:	9804      	ldr	r0, [sp, #16]
 8015a34:	f002 ff4a 	bl	80188cc <_Bfree>
 8015a38:	e5f4      	b.n	8015624 <_strtod_l+0x66c>
 8015a3a:	2e00      	cmp	r6, #0
 8015a3c:	d11e      	bne.n	8015a7c <_strtod_l+0xac4>
 8015a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a40:	031b      	lsls	r3, r3, #12
 8015a42:	d121      	bne.n	8015a88 <_strtod_l+0xad0>
 8015a44:	9808      	ldr	r0, [sp, #32]
 8015a46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a48:	2200      	movs	r2, #0
 8015a4a:	4b61      	ldr	r3, [pc, #388]	; (8015bd0 <_strtod_l+0xc18>)
 8015a4c:	f7ea fd0c 	bl	8000468 <__aeabi_dcmplt>
 8015a50:	2800      	cmp	r0, #0
 8015a52:	d11f      	bne.n	8015a94 <_strtod_l+0xadc>
 8015a54:	9808      	ldr	r0, [sp, #32]
 8015a56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a58:	2200      	movs	r2, #0
 8015a5a:	4b63      	ldr	r3, [pc, #396]	; (8015be8 <_strtod_l+0xc30>)
 8015a5c:	f7ec fb20 	bl	80020a0 <__aeabi_dmul>
 8015a60:	0005      	movs	r5, r0
 8015a62:	9108      	str	r1, [sp, #32]
 8015a64:	2280      	movs	r2, #128	; 0x80
 8015a66:	0612      	lsls	r2, r2, #24
 8015a68:	4694      	mov	ip, r2
 8015a6a:	9b08      	ldr	r3, [sp, #32]
 8015a6c:	951e      	str	r5, [sp, #120]	; 0x78
 8015a6e:	4463      	add	r3, ip
 8015a70:	931f      	str	r3, [sp, #124]	; 0x7c
 8015a72:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015a74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015a76:	9210      	str	r2, [sp, #64]	; 0x40
 8015a78:	9311      	str	r3, [sp, #68]	; 0x44
 8015a7a:	e798      	b.n	80159ae <_strtod_l+0x9f6>
 8015a7c:	2e01      	cmp	r6, #1
 8015a7e:	d103      	bne.n	8015a88 <_strtod_l+0xad0>
 8015a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d100      	bne.n	8015a88 <_strtod_l+0xad0>
 8015a86:	e562      	b.n	801554e <_strtod_l+0x596>
 8015a88:	2200      	movs	r2, #0
 8015a8a:	4b58      	ldr	r3, [pc, #352]	; (8015bec <_strtod_l+0xc34>)
 8015a8c:	2500      	movs	r5, #0
 8015a8e:	9210      	str	r2, [sp, #64]	; 0x40
 8015a90:	9311      	str	r3, [sp, #68]	; 0x44
 8015a92:	e78a      	b.n	80159aa <_strtod_l+0x9f2>
 8015a94:	4b54      	ldr	r3, [pc, #336]	; (8015be8 <_strtod_l+0xc30>)
 8015a96:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015a98:	9308      	str	r3, [sp, #32]
 8015a9a:	e7e3      	b.n	8015a64 <_strtod_l+0xaac>
 8015a9c:	4b52      	ldr	r3, [pc, #328]	; (8015be8 <_strtod_l+0xc30>)
 8015a9e:	9808      	ldr	r0, [sp, #32]
 8015aa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	f7ec fafc 	bl	80020a0 <__aeabi_dmul>
 8015aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015aaa:	0005      	movs	r5, r0
 8015aac:	9108      	str	r1, [sp, #32]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d107      	bne.n	8015ac2 <_strtod_l+0xb0a>
 8015ab2:	2380      	movs	r3, #128	; 0x80
 8015ab4:	061b      	lsls	r3, r3, #24
 8015ab6:	18cb      	adds	r3, r1, r3
 8015ab8:	9016      	str	r0, [sp, #88]	; 0x58
 8015aba:	9317      	str	r3, [sp, #92]	; 0x5c
 8015abc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015abe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ac0:	e7d9      	b.n	8015a76 <_strtod_l+0xabe>
 8015ac2:	0002      	movs	r2, r0
 8015ac4:	9b08      	ldr	r3, [sp, #32]
 8015ac6:	9216      	str	r2, [sp, #88]	; 0x58
 8015ac8:	9317      	str	r3, [sp, #92]	; 0x5c
 8015aca:	e7f7      	b.n	8015abc <_strtod_l+0xb04>
 8015acc:	23d4      	movs	r3, #212	; 0xd4
 8015ace:	049b      	lsls	r3, r3, #18
 8015ad0:	18cf      	adds	r7, r1, r3
 8015ad2:	9b06      	ldr	r3, [sp, #24]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d19f      	bne.n	8015a18 <_strtod_l+0xa60>
 8015ad8:	4b3e      	ldr	r3, [pc, #248]	; (8015bd4 <_strtod_l+0xc1c>)
 8015ada:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015adc:	970c      	str	r7, [sp, #48]	; 0x30
 8015ade:	403b      	ands	r3, r7
 8015ae0:	429a      	cmp	r2, r3
 8015ae2:	d199      	bne.n	8015a18 <_strtod_l+0xa60>
 8015ae4:	9908      	ldr	r1, [sp, #32]
 8015ae6:	0028      	movs	r0, r5
 8015ae8:	f7ed f8b0 	bl	8002c4c <__aeabi_d2iz>
 8015aec:	f7ed f8e4 	bl	8002cb8 <__aeabi_i2d>
 8015af0:	000b      	movs	r3, r1
 8015af2:	0002      	movs	r2, r0
 8015af4:	9908      	ldr	r1, [sp, #32]
 8015af6:	0028      	movs	r0, r5
 8015af8:	f7ec fd44 	bl	8002584 <__aeabi_dsub>
 8015afc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015afe:	9008      	str	r0, [sp, #32]
 8015b00:	9109      	str	r1, [sp, #36]	; 0x24
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d104      	bne.n	8015b10 <_strtod_l+0xb58>
 8015b06:	2e00      	cmp	r6, #0
 8015b08:	d102      	bne.n	8015b10 <_strtod_l+0xb58>
 8015b0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b0c:	031b      	lsls	r3, r3, #12
 8015b0e:	d058      	beq.n	8015bc2 <_strtod_l+0xc0a>
 8015b10:	9808      	ldr	r0, [sp, #32]
 8015b12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b14:	4a36      	ldr	r2, [pc, #216]	; (8015bf0 <_strtod_l+0xc38>)
 8015b16:	4b37      	ldr	r3, [pc, #220]	; (8015bf4 <_strtod_l+0xc3c>)
 8015b18:	f7ea fca6 	bl	8000468 <__aeabi_dcmplt>
 8015b1c:	2800      	cmp	r0, #0
 8015b1e:	d000      	beq.n	8015b22 <_strtod_l+0xb6a>
 8015b20:	e489      	b.n	8015436 <_strtod_l+0x47e>
 8015b22:	9808      	ldr	r0, [sp, #32]
 8015b24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b26:	4a34      	ldr	r2, [pc, #208]	; (8015bf8 <_strtod_l+0xc40>)
 8015b28:	4b2f      	ldr	r3, [pc, #188]	; (8015be8 <_strtod_l+0xc30>)
 8015b2a:	f7ea fcb1 	bl	8000490 <__aeabi_dcmpgt>
 8015b2e:	2800      	cmp	r0, #0
 8015b30:	d100      	bne.n	8015b34 <_strtod_l+0xb7c>
 8015b32:	e771      	b.n	8015a18 <_strtod_l+0xa60>
 8015b34:	e47f      	b.n	8015436 <_strtod_l+0x47e>
 8015b36:	9b06      	ldr	r3, [sp, #24]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d02a      	beq.n	8015b92 <_strtod_l+0xbda>
 8015b3c:	23d4      	movs	r3, #212	; 0xd4
 8015b3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015b40:	04db      	lsls	r3, r3, #19
 8015b42:	429a      	cmp	r2, r3
 8015b44:	d825      	bhi.n	8015b92 <_strtod_l+0xbda>
 8015b46:	4a2d      	ldr	r2, [pc, #180]	; (8015bfc <_strtod_l+0xc44>)
 8015b48:	4b2d      	ldr	r3, [pc, #180]	; (8015c00 <_strtod_l+0xc48>)
 8015b4a:	0028      	movs	r0, r5
 8015b4c:	9908      	ldr	r1, [sp, #32]
 8015b4e:	f7ea fc95 	bl	800047c <__aeabi_dcmple>
 8015b52:	2800      	cmp	r0, #0
 8015b54:	d016      	beq.n	8015b84 <_strtod_l+0xbcc>
 8015b56:	0028      	movs	r0, r5
 8015b58:	9908      	ldr	r1, [sp, #32]
 8015b5a:	f7ea fd49 	bl	80005f0 <__aeabi_d2uiz>
 8015b5e:	2800      	cmp	r0, #0
 8015b60:	d100      	bne.n	8015b64 <_strtod_l+0xbac>
 8015b62:	3001      	adds	r0, #1
 8015b64:	f7ed f8e2 	bl	8002d2c <__aeabi_ui2d>
 8015b68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015b6a:	0005      	movs	r5, r0
 8015b6c:	9108      	str	r1, [sp, #32]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d122      	bne.n	8015bb8 <_strtod_l+0xc00>
 8015b72:	2380      	movs	r3, #128	; 0x80
 8015b74:	061b      	lsls	r3, r3, #24
 8015b76:	18cb      	adds	r3, r1, r3
 8015b78:	9018      	str	r0, [sp, #96]	; 0x60
 8015b7a:	9319      	str	r3, [sp, #100]	; 0x64
 8015b7c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015b7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015b80:	9210      	str	r2, [sp, #64]	; 0x40
 8015b82:	9311      	str	r3, [sp, #68]	; 0x44
 8015b84:	22d6      	movs	r2, #214	; 0xd6
 8015b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015b88:	04d2      	lsls	r2, r2, #19
 8015b8a:	189b      	adds	r3, r3, r2
 8015b8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015b8e:	1a9b      	subs	r3, r3, r2
 8015b90:	9311      	str	r3, [sp, #68]	; 0x44
 8015b92:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015b94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015b96:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8015b98:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015b9a:	f003 f911 	bl	8018dc0 <__ulp>
 8015b9e:	0002      	movs	r2, r0
 8015ba0:	000b      	movs	r3, r1
 8015ba2:	0030      	movs	r0, r6
 8015ba4:	0039      	movs	r1, r7
 8015ba6:	f7ec fa7b 	bl	80020a0 <__aeabi_dmul>
 8015baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015bac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015bae:	f7eb fb51 	bl	8001254 <__aeabi_dadd>
 8015bb2:	0006      	movs	r6, r0
 8015bb4:	000f      	movs	r7, r1
 8015bb6:	e78c      	b.n	8015ad2 <_strtod_l+0xb1a>
 8015bb8:	0002      	movs	r2, r0
 8015bba:	9b08      	ldr	r3, [sp, #32]
 8015bbc:	9218      	str	r2, [sp, #96]	; 0x60
 8015bbe:	9319      	str	r3, [sp, #100]	; 0x64
 8015bc0:	e7dc      	b.n	8015b7c <_strtod_l+0xbc4>
 8015bc2:	4a0b      	ldr	r2, [pc, #44]	; (8015bf0 <_strtod_l+0xc38>)
 8015bc4:	4b0f      	ldr	r3, [pc, #60]	; (8015c04 <_strtod_l+0xc4c>)
 8015bc6:	9808      	ldr	r0, [sp, #32]
 8015bc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015bca:	f7ea fc4d 	bl	8000468 <__aeabi_dcmplt>
 8015bce:	e7ae      	b.n	8015b2e <_strtod_l+0xb76>
 8015bd0:	3ff00000 	.word	0x3ff00000
 8015bd4:	7ff00000 	.word	0x7ff00000
 8015bd8:	7fe00000 	.word	0x7fe00000
 8015bdc:	fcb00000 	.word	0xfcb00000
 8015be0:	7c9fffff 	.word	0x7c9fffff
 8015be4:	7fefffff 	.word	0x7fefffff
 8015be8:	3fe00000 	.word	0x3fe00000
 8015bec:	bff00000 	.word	0xbff00000
 8015bf0:	94a03595 	.word	0x94a03595
 8015bf4:	3fdfffff 	.word	0x3fdfffff
 8015bf8:	35afe535 	.word	0x35afe535
 8015bfc:	ffc00000 	.word	0xffc00000
 8015c00:	41dfffff 	.word	0x41dfffff
 8015c04:	3fcfffff 	.word	0x3fcfffff

08015c08 <strtod>:
 8015c08:	4b06      	ldr	r3, [pc, #24]	; (8015c24 <strtod+0x1c>)
 8015c0a:	b510      	push	{r4, lr}
 8015c0c:	0004      	movs	r4, r0
 8015c0e:	6818      	ldr	r0, [r3, #0]
 8015c10:	000a      	movs	r2, r1
 8015c12:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d100      	bne.n	8015c1a <strtod+0x12>
 8015c18:	4b03      	ldr	r3, [pc, #12]	; (8015c28 <strtod+0x20>)
 8015c1a:	0021      	movs	r1, r4
 8015c1c:	f7ff f9cc 	bl	8014fb8 <_strtod_l>
 8015c20:	bd10      	pop	{r4, pc}
 8015c22:	46c0      	nop			; (mov r8, r8)
 8015c24:	200000b8 	.word	0x200000b8
 8015c28:	200004e8 	.word	0x200004e8

08015c2c <strtok>:
 8015c2c:	4b03      	ldr	r3, [pc, #12]	; (8015c3c <strtok+0x10>)
 8015c2e:	b510      	push	{r4, lr}
 8015c30:	681a      	ldr	r2, [r3, #0]
 8015c32:	2301      	movs	r3, #1
 8015c34:	325c      	adds	r2, #92	; 0x5c
 8015c36:	f000 f803 	bl	8015c40 <__strtok_r>
 8015c3a:	bd10      	pop	{r4, pc}
 8015c3c:	200000b8 	.word	0x200000b8

08015c40 <__strtok_r>:
 8015c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c42:	2800      	cmp	r0, #0
 8015c44:	d104      	bne.n	8015c50 <__strtok_r+0x10>
 8015c46:	6810      	ldr	r0, [r2, #0]
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	d101      	bne.n	8015c50 <__strtok_r+0x10>
 8015c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c4e:	0020      	movs	r0, r4
 8015c50:	000e      	movs	r6, r1
 8015c52:	7805      	ldrb	r5, [r0, #0]
 8015c54:	1c44      	adds	r4, r0, #1
 8015c56:	7837      	ldrb	r7, [r6, #0]
 8015c58:	2f00      	cmp	r7, #0
 8015c5a:	d104      	bne.n	8015c66 <__strtok_r+0x26>
 8015c5c:	2d00      	cmp	r5, #0
 8015c5e:	d110      	bne.n	8015c82 <__strtok_r+0x42>
 8015c60:	6015      	str	r5, [r2, #0]
 8015c62:	0028      	movs	r0, r5
 8015c64:	e7f2      	b.n	8015c4c <__strtok_r+0xc>
 8015c66:	3601      	adds	r6, #1
 8015c68:	42bd      	cmp	r5, r7
 8015c6a:	d1f4      	bne.n	8015c56 <__strtok_r+0x16>
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d1ee      	bne.n	8015c4e <__strtok_r+0xe>
 8015c70:	6014      	str	r4, [r2, #0]
 8015c72:	7003      	strb	r3, [r0, #0]
 8015c74:	e7ea      	b.n	8015c4c <__strtok_r+0xc>
 8015c76:	0033      	movs	r3, r6
 8015c78:	e00d      	b.n	8015c96 <__strtok_r+0x56>
 8015c7a:	3501      	adds	r5, #1
 8015c7c:	2f00      	cmp	r7, #0
 8015c7e:	d103      	bne.n	8015c88 <__strtok_r+0x48>
 8015c80:	001c      	movs	r4, r3
 8015c82:	000d      	movs	r5, r1
 8015c84:	7826      	ldrb	r6, [r4, #0]
 8015c86:	1c63      	adds	r3, r4, #1
 8015c88:	782f      	ldrb	r7, [r5, #0]
 8015c8a:	42be      	cmp	r6, r7
 8015c8c:	d1f5      	bne.n	8015c7a <__strtok_r+0x3a>
 8015c8e:	2e00      	cmp	r6, #0
 8015c90:	d0f1      	beq.n	8015c76 <__strtok_r+0x36>
 8015c92:	2100      	movs	r1, #0
 8015c94:	7021      	strb	r1, [r4, #0]
 8015c96:	6013      	str	r3, [r2, #0]
 8015c98:	e7d8      	b.n	8015c4c <__strtok_r+0xc>
	...

08015c9c <_strtol_l.isra.0>:
 8015c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c9e:	001f      	movs	r7, r3
 8015ca0:	000e      	movs	r6, r1
 8015ca2:	b087      	sub	sp, #28
 8015ca4:	9005      	str	r0, [sp, #20]
 8015ca6:	9101      	str	r1, [sp, #4]
 8015ca8:	9202      	str	r2, [sp, #8]
 8015caa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015cac:	7834      	ldrb	r4, [r6, #0]
 8015cae:	f7fe fc9f 	bl	80145f0 <__locale_ctype_ptr_l>
 8015cb2:	2208      	movs	r2, #8
 8015cb4:	1900      	adds	r0, r0, r4
 8015cb6:	7843      	ldrb	r3, [r0, #1]
 8015cb8:	1c75      	adds	r5, r6, #1
 8015cba:	4013      	ands	r3, r2
 8015cbc:	d136      	bne.n	8015d2c <_strtol_l.isra.0+0x90>
 8015cbe:	2c2d      	cmp	r4, #45	; 0x2d
 8015cc0:	d136      	bne.n	8015d30 <_strtol_l.isra.0+0x94>
 8015cc2:	1cb5      	adds	r5, r6, #2
 8015cc4:	7874      	ldrb	r4, [r6, #1]
 8015cc6:	2601      	movs	r6, #1
 8015cc8:	2f00      	cmp	r7, #0
 8015cca:	d062      	beq.n	8015d92 <_strtol_l.isra.0+0xf6>
 8015ccc:	2f10      	cmp	r7, #16
 8015cce:	d109      	bne.n	8015ce4 <_strtol_l.isra.0+0x48>
 8015cd0:	2c30      	cmp	r4, #48	; 0x30
 8015cd2:	d107      	bne.n	8015ce4 <_strtol_l.isra.0+0x48>
 8015cd4:	2220      	movs	r2, #32
 8015cd6:	782b      	ldrb	r3, [r5, #0]
 8015cd8:	4393      	bics	r3, r2
 8015cda:	2b58      	cmp	r3, #88	; 0x58
 8015cdc:	d154      	bne.n	8015d88 <_strtol_l.isra.0+0xec>
 8015cde:	2710      	movs	r7, #16
 8015ce0:	786c      	ldrb	r4, [r5, #1]
 8015ce2:	3502      	adds	r5, #2
 8015ce4:	4b2d      	ldr	r3, [pc, #180]	; (8015d9c <_strtol_l.isra.0+0x100>)
 8015ce6:	0039      	movs	r1, r7
 8015ce8:	18f3      	adds	r3, r6, r3
 8015cea:	0018      	movs	r0, r3
 8015cec:	9303      	str	r3, [sp, #12]
 8015cee:	f7ea fab5 	bl	800025c <__aeabi_uidivmod>
 8015cf2:	9104      	str	r1, [sp, #16]
 8015cf4:	2101      	movs	r1, #1
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	4249      	negs	r1, r1
 8015cfa:	0002      	movs	r2, r0
 8015cfc:	468c      	mov	ip, r1
 8015cfe:	0018      	movs	r0, r3
 8015d00:	0021      	movs	r1, r4
 8015d02:	3930      	subs	r1, #48	; 0x30
 8015d04:	2909      	cmp	r1, #9
 8015d06:	d81a      	bhi.n	8015d3e <_strtol_l.isra.0+0xa2>
 8015d08:	000c      	movs	r4, r1
 8015d0a:	42a7      	cmp	r7, r4
 8015d0c:	dd23      	ble.n	8015d56 <_strtol_l.isra.0+0xba>
 8015d0e:	1c59      	adds	r1, r3, #1
 8015d10:	d009      	beq.n	8015d26 <_strtol_l.isra.0+0x8a>
 8015d12:	4663      	mov	r3, ip
 8015d14:	4282      	cmp	r2, r0
 8015d16:	d306      	bcc.n	8015d26 <_strtol_l.isra.0+0x8a>
 8015d18:	d102      	bne.n	8015d20 <_strtol_l.isra.0+0x84>
 8015d1a:	9904      	ldr	r1, [sp, #16]
 8015d1c:	42a1      	cmp	r1, r4
 8015d1e:	db02      	blt.n	8015d26 <_strtol_l.isra.0+0x8a>
 8015d20:	2301      	movs	r3, #1
 8015d22:	4378      	muls	r0, r7
 8015d24:	1820      	adds	r0, r4, r0
 8015d26:	782c      	ldrb	r4, [r5, #0]
 8015d28:	3501      	adds	r5, #1
 8015d2a:	e7e9      	b.n	8015d00 <_strtol_l.isra.0+0x64>
 8015d2c:	002e      	movs	r6, r5
 8015d2e:	e7bc      	b.n	8015caa <_strtol_l.isra.0+0xe>
 8015d30:	2c2b      	cmp	r4, #43	; 0x2b
 8015d32:	d001      	beq.n	8015d38 <_strtol_l.isra.0+0x9c>
 8015d34:	001e      	movs	r6, r3
 8015d36:	e7c7      	b.n	8015cc8 <_strtol_l.isra.0+0x2c>
 8015d38:	1cb5      	adds	r5, r6, #2
 8015d3a:	7874      	ldrb	r4, [r6, #1]
 8015d3c:	e7fa      	b.n	8015d34 <_strtol_l.isra.0+0x98>
 8015d3e:	0021      	movs	r1, r4
 8015d40:	3941      	subs	r1, #65	; 0x41
 8015d42:	2919      	cmp	r1, #25
 8015d44:	d801      	bhi.n	8015d4a <_strtol_l.isra.0+0xae>
 8015d46:	3c37      	subs	r4, #55	; 0x37
 8015d48:	e7df      	b.n	8015d0a <_strtol_l.isra.0+0x6e>
 8015d4a:	0021      	movs	r1, r4
 8015d4c:	3961      	subs	r1, #97	; 0x61
 8015d4e:	2919      	cmp	r1, #25
 8015d50:	d801      	bhi.n	8015d56 <_strtol_l.isra.0+0xba>
 8015d52:	3c57      	subs	r4, #87	; 0x57
 8015d54:	e7d9      	b.n	8015d0a <_strtol_l.isra.0+0x6e>
 8015d56:	1c5a      	adds	r2, r3, #1
 8015d58:	d108      	bne.n	8015d6c <_strtol_l.isra.0+0xd0>
 8015d5a:	9a05      	ldr	r2, [sp, #20]
 8015d5c:	3323      	adds	r3, #35	; 0x23
 8015d5e:	6013      	str	r3, [r2, #0]
 8015d60:	9b02      	ldr	r3, [sp, #8]
 8015d62:	9803      	ldr	r0, [sp, #12]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d109      	bne.n	8015d7c <_strtol_l.isra.0+0xe0>
 8015d68:	b007      	add	sp, #28
 8015d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d6c:	2e00      	cmp	r6, #0
 8015d6e:	d000      	beq.n	8015d72 <_strtol_l.isra.0+0xd6>
 8015d70:	4240      	negs	r0, r0
 8015d72:	9a02      	ldr	r2, [sp, #8]
 8015d74:	2a00      	cmp	r2, #0
 8015d76:	d0f7      	beq.n	8015d68 <_strtol_l.isra.0+0xcc>
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d001      	beq.n	8015d80 <_strtol_l.isra.0+0xe4>
 8015d7c:	1e6b      	subs	r3, r5, #1
 8015d7e:	9301      	str	r3, [sp, #4]
 8015d80:	9b02      	ldr	r3, [sp, #8]
 8015d82:	9a01      	ldr	r2, [sp, #4]
 8015d84:	601a      	str	r2, [r3, #0]
 8015d86:	e7ef      	b.n	8015d68 <_strtol_l.isra.0+0xcc>
 8015d88:	2430      	movs	r4, #48	; 0x30
 8015d8a:	2f00      	cmp	r7, #0
 8015d8c:	d1aa      	bne.n	8015ce4 <_strtol_l.isra.0+0x48>
 8015d8e:	2708      	movs	r7, #8
 8015d90:	e7a8      	b.n	8015ce4 <_strtol_l.isra.0+0x48>
 8015d92:	2c30      	cmp	r4, #48	; 0x30
 8015d94:	d09e      	beq.n	8015cd4 <_strtol_l.isra.0+0x38>
 8015d96:	270a      	movs	r7, #10
 8015d98:	e7a4      	b.n	8015ce4 <_strtol_l.isra.0+0x48>
 8015d9a:	46c0      	nop			; (mov r8, r8)
 8015d9c:	7fffffff 	.word	0x7fffffff

08015da0 <strtol>:
 8015da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015da2:	0013      	movs	r3, r2
 8015da4:	4a06      	ldr	r2, [pc, #24]	; (8015dc0 <strtol+0x20>)
 8015da6:	0005      	movs	r5, r0
 8015da8:	6810      	ldr	r0, [r2, #0]
 8015daa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8015dac:	2c00      	cmp	r4, #0
 8015dae:	d100      	bne.n	8015db2 <strtol+0x12>
 8015db0:	4c04      	ldr	r4, [pc, #16]	; (8015dc4 <strtol+0x24>)
 8015db2:	000a      	movs	r2, r1
 8015db4:	9400      	str	r4, [sp, #0]
 8015db6:	0029      	movs	r1, r5
 8015db8:	f7ff ff70 	bl	8015c9c <_strtol_l.isra.0>
 8015dbc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8015dbe:	46c0      	nop			; (mov r8, r8)
 8015dc0:	200000b8 	.word	0x200000b8
 8015dc4:	200004e8 	.word	0x200004e8

08015dc8 <_svfprintf_r>:
 8015dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dca:	b0d9      	sub	sp, #356	; 0x164
 8015dcc:	910b      	str	r1, [sp, #44]	; 0x2c
 8015dce:	9209      	str	r2, [sp, #36]	; 0x24
 8015dd0:	001c      	movs	r4, r3
 8015dd2:	900a      	str	r0, [sp, #40]	; 0x28
 8015dd4:	f002 fd26 	bl	8018824 <_localeconv_r>
 8015dd8:	6803      	ldr	r3, [r0, #0]
 8015dda:	0018      	movs	r0, r3
 8015ddc:	931c      	str	r3, [sp, #112]	; 0x70
 8015dde:	f7ea f99b 	bl	8000118 <strlen>
 8015de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015de4:	9014      	str	r0, [sp, #80]	; 0x50
 8015de6:	899b      	ldrh	r3, [r3, #12]
 8015de8:	061b      	lsls	r3, r3, #24
 8015dea:	d518      	bpl.n	8015e1e <_svfprintf_r+0x56>
 8015dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dee:	691b      	ldr	r3, [r3, #16]
 8015df0:	9308      	str	r3, [sp, #32]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d113      	bne.n	8015e1e <_svfprintf_r+0x56>
 8015df6:	2140      	movs	r1, #64	; 0x40
 8015df8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015dfa:	f7fe fc1f 	bl	801463c <_malloc_r>
 8015dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e00:	6018      	str	r0, [r3, #0]
 8015e02:	6118      	str	r0, [r3, #16]
 8015e04:	2800      	cmp	r0, #0
 8015e06:	d107      	bne.n	8015e18 <_svfprintf_r+0x50>
 8015e08:	230c      	movs	r3, #12
 8015e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e0c:	6013      	str	r3, [r2, #0]
 8015e0e:	3b0d      	subs	r3, #13
 8015e10:	9315      	str	r3, [sp, #84]	; 0x54
 8015e12:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015e14:	b059      	add	sp, #356	; 0x164
 8015e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e18:	2340      	movs	r3, #64	; 0x40
 8015e1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e1c:	6153      	str	r3, [r2, #20]
 8015e1e:	2600      	movs	r6, #0
 8015e20:	af2f      	add	r7, sp, #188	; 0xbc
 8015e22:	972c      	str	r7, [sp, #176]	; 0xb0
 8015e24:	962e      	str	r6, [sp, #184]	; 0xb8
 8015e26:	962d      	str	r6, [sp, #180]	; 0xb4
 8015e28:	960d      	str	r6, [sp, #52]	; 0x34
 8015e2a:	961a      	str	r6, [sp, #104]	; 0x68
 8015e2c:	9619      	str	r6, [sp, #100]	; 0x64
 8015e2e:	961e      	str	r6, [sp, #120]	; 0x78
 8015e30:	961d      	str	r6, [sp, #116]	; 0x74
 8015e32:	9613      	str	r6, [sp, #76]	; 0x4c
 8015e34:	961b      	str	r6, [sp, #108]	; 0x6c
 8015e36:	961f      	str	r6, [sp, #124]	; 0x7c
 8015e38:	9615      	str	r6, [sp, #84]	; 0x54
 8015e3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015e3c:	782b      	ldrb	r3, [r5, #0]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d002      	beq.n	8015e48 <_svfprintf_r+0x80>
 8015e42:	2b25      	cmp	r3, #37	; 0x25
 8015e44:	d000      	beq.n	8015e48 <_svfprintf_r+0x80>
 8015e46:	e095      	b.n	8015f74 <_svfprintf_r+0x1ac>
 8015e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e4a:	1aee      	subs	r6, r5, r3
 8015e4c:	d017      	beq.n	8015e7e <_svfprintf_r+0xb6>
 8015e4e:	603b      	str	r3, [r7, #0]
 8015e50:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015e52:	607e      	str	r6, [r7, #4]
 8015e54:	199b      	adds	r3, r3, r6
 8015e56:	932e      	str	r3, [sp, #184]	; 0xb8
 8015e58:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015e5a:	3708      	adds	r7, #8
 8015e5c:	9308      	str	r3, [sp, #32]
 8015e5e:	3301      	adds	r3, #1
 8015e60:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e62:	2b07      	cmp	r3, #7
 8015e64:	dd08      	ble.n	8015e78 <_svfprintf_r+0xb0>
 8015e66:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e6c:	f003 f900 	bl	8019070 <__ssprint_r>
 8015e70:	2800      	cmp	r0, #0
 8015e72:	d000      	beq.n	8015e76 <_svfprintf_r+0xae>
 8015e74:	e2d9      	b.n	801642a <_svfprintf_r+0x662>
 8015e76:	af2f      	add	r7, sp, #188	; 0xbc
 8015e78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e7a:	199b      	adds	r3, r3, r6
 8015e7c:	9315      	str	r3, [sp, #84]	; 0x54
 8015e7e:	782b      	ldrb	r3, [r5, #0]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d101      	bne.n	8015e88 <_svfprintf_r+0xc0>
 8015e84:	f001 f9e5 	bl	8017252 <_svfprintf_r+0x148a>
 8015e88:	1c6b      	adds	r3, r5, #1
 8015e8a:	221b      	movs	r2, #27
 8015e8c:	9311      	str	r3, [sp, #68]	; 0x44
 8015e8e:	2300      	movs	r3, #0
 8015e90:	a91e      	add	r1, sp, #120	; 0x78
 8015e92:	1852      	adds	r2, r2, r1
 8015e94:	7013      	strb	r3, [r2, #0]
 8015e96:	2201      	movs	r2, #1
 8015e98:	001e      	movs	r6, r3
 8015e9a:	2520      	movs	r5, #32
 8015e9c:	4252      	negs	r2, r2
 8015e9e:	9208      	str	r2, [sp, #32]
 8015ea0:	9316      	str	r3, [sp, #88]	; 0x58
 8015ea2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	930e      	str	r3, [sp, #56]	; 0x38
 8015ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015eaa:	3301      	adds	r3, #1
 8015eac:	9311      	str	r3, [sp, #68]	; 0x44
 8015eae:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015eb0:	3820      	subs	r0, #32
 8015eb2:	285a      	cmp	r0, #90	; 0x5a
 8015eb4:	d901      	bls.n	8015eba <_svfprintf_r+0xf2>
 8015eb6:	f000 fe3d 	bl	8016b34 <_svfprintf_r+0xd6c>
 8015eba:	f7ea f93f 	bl	800013c <__gnu_thumb1_case_shi>
 8015ebe:	009e      	.short	0x009e
 8015ec0:	063b063b 	.word	0x063b063b
 8015ec4:	063b00a7 	.word	0x063b00a7
 8015ec8:	063b063b 	.word	0x063b063b
 8015ecc:	063b0080 	.word	0x063b0080
 8015ed0:	00a9063b 	.word	0x00a9063b
 8015ed4:	063b00b3 	.word	0x063b00b3
 8015ed8:	00b900b1 	.word	0x00b900b1
 8015edc:	00dd063b 	.word	0x00dd063b
 8015ee0:	00df00df 	.word	0x00df00df
 8015ee4:	00df00df 	.word	0x00df00df
 8015ee8:	00df00df 	.word	0x00df00df
 8015eec:	00df00df 	.word	0x00df00df
 8015ef0:	063b00df 	.word	0x063b00df
 8015ef4:	063b063b 	.word	0x063b063b
 8015ef8:	063b063b 	.word	0x063b063b
 8015efc:	063b063b 	.word	0x063b063b
 8015f00:	063b0240 	.word	0x063b0240
 8015f04:	01fd010a 	.word	0x01fd010a
 8015f08:	02400240 	.word	0x02400240
 8015f0c:	063b0240 	.word	0x063b0240
 8015f10:	063b063b 	.word	0x063b063b
 8015f14:	00f1063b 	.word	0x00f1063b
 8015f18:	063b063b 	.word	0x063b063b
 8015f1c:	063b04e2 	.word	0x063b04e2
 8015f20:	063b063b 	.word	0x063b063b
 8015f24:	063b0537 	.word	0x063b0537
 8015f28:	063b0557 	.word	0x063b0557
 8015f2c:	005d063b 	.word	0x005d063b
 8015f30:	063b063b 	.word	0x063b063b
 8015f34:	063b063b 	.word	0x063b063b
 8015f38:	063b063b 	.word	0x063b063b
 8015f3c:	063b063b 	.word	0x063b063b
 8015f40:	063b0240 	.word	0x063b0240
 8015f44:	01ff010a 	.word	0x01ff010a
 8015f48:	02400240 	.word	0x02400240
 8015f4c:	00f30240 	.word	0x00f30240
 8015f50:	010601ff 	.word	0x010601ff
 8015f54:	00ff063b 	.word	0x00ff063b
 8015f58:	04c5063b 	.word	0x04c5063b
 8015f5c:	052704e4 	.word	0x052704e4
 8015f60:	063b0106 	.word	0x063b0106
 8015f64:	fff20537 	.word	0xfff20537
 8015f68:	063b0559 	.word	0x063b0559
 8015f6c:	0582063b 	.word	0x0582063b
 8015f70:	fff2063b 	.word	0xfff2063b
 8015f74:	3501      	adds	r5, #1
 8015f76:	e761      	b.n	8015e3c <_svfprintf_r+0x74>
 8015f78:	4bcb      	ldr	r3, [pc, #812]	; (80162a8 <_svfprintf_r+0x4e0>)
 8015f7a:	2220      	movs	r2, #32
 8015f7c:	931e      	str	r3, [sp, #120]	; 0x78
 8015f7e:	4032      	ands	r2, r6
 8015f80:	d101      	bne.n	8015f86 <_svfprintf_r+0x1be>
 8015f82:	f000 fd21 	bl	80169c8 <_svfprintf_r+0xc00>
 8015f86:	2307      	movs	r3, #7
 8015f88:	3407      	adds	r4, #7
 8015f8a:	439c      	bics	r4, r3
 8015f8c:	0023      	movs	r3, r4
 8015f8e:	3308      	adds	r3, #8
 8015f90:	9312      	str	r3, [sp, #72]	; 0x48
 8015f92:	6823      	ldr	r3, [r4, #0]
 8015f94:	6864      	ldr	r4, [r4, #4]
 8015f96:	9306      	str	r3, [sp, #24]
 8015f98:	9407      	str	r4, [sp, #28]
 8015f9a:	07f3      	lsls	r3, r6, #31
 8015f9c:	d50a      	bpl.n	8015fb4 <_svfprintf_r+0x1ec>
 8015f9e:	9b06      	ldr	r3, [sp, #24]
 8015fa0:	9a07      	ldr	r2, [sp, #28]
 8015fa2:	4313      	orrs	r3, r2
 8015fa4:	d006      	beq.n	8015fb4 <_svfprintf_r+0x1ec>
 8015fa6:	2230      	movs	r2, #48	; 0x30
 8015fa8:	ab25      	add	r3, sp, #148	; 0x94
 8015faa:	701a      	strb	r2, [r3, #0]
 8015fac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015fae:	705a      	strb	r2, [r3, #1]
 8015fb0:	2302      	movs	r3, #2
 8015fb2:	431e      	orrs	r6, r3
 8015fb4:	4bbd      	ldr	r3, [pc, #756]	; (80162ac <_svfprintf_r+0x4e4>)
 8015fb6:	401e      	ands	r6, r3
 8015fb8:	2302      	movs	r3, #2
 8015fba:	f000 fc74 	bl	80168a6 <_svfprintf_r+0xade>
 8015fbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015fc0:	f002 fc30 	bl	8018824 <_localeconv_r>
 8015fc4:	6843      	ldr	r3, [r0, #4]
 8015fc6:	0018      	movs	r0, r3
 8015fc8:	931f      	str	r3, [sp, #124]	; 0x7c
 8015fca:	f7ea f8a5 	bl	8000118 <strlen>
 8015fce:	901b      	str	r0, [sp, #108]	; 0x6c
 8015fd0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015fd2:	f002 fc27 	bl	8018824 <_localeconv_r>
 8015fd6:	6883      	ldr	r3, [r0, #8]
 8015fd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8015fda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d100      	bne.n	8015fe2 <_svfprintf_r+0x21a>
 8015fe0:	e75f      	b.n	8015ea2 <_svfprintf_r+0xda>
 8015fe2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d100      	bne.n	8015fea <_svfprintf_r+0x222>
 8015fe8:	e75b      	b.n	8015ea2 <_svfprintf_r+0xda>
 8015fea:	781b      	ldrb	r3, [r3, #0]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d100      	bne.n	8015ff2 <_svfprintf_r+0x22a>
 8015ff0:	e757      	b.n	8015ea2 <_svfprintf_r+0xda>
 8015ff2:	2380      	movs	r3, #128	; 0x80
 8015ff4:	00db      	lsls	r3, r3, #3
 8015ff6:	431e      	orrs	r6, r3
 8015ff8:	e753      	b.n	8015ea2 <_svfprintf_r+0xda>
 8015ffa:	231b      	movs	r3, #27
 8015ffc:	aa1e      	add	r2, sp, #120	; 0x78
 8015ffe:	189b      	adds	r3, r3, r2
 8016000:	781a      	ldrb	r2, [r3, #0]
 8016002:	2a00      	cmp	r2, #0
 8016004:	d000      	beq.n	8016008 <_svfprintf_r+0x240>
 8016006:	e74c      	b.n	8015ea2 <_svfprintf_r+0xda>
 8016008:	701d      	strb	r5, [r3, #0]
 801600a:	e74a      	b.n	8015ea2 <_svfprintf_r+0xda>
 801600c:	2301      	movs	r3, #1
 801600e:	e7f2      	b.n	8015ff6 <_svfprintf_r+0x22e>
 8016010:	6823      	ldr	r3, [r4, #0]
 8016012:	3404      	adds	r4, #4
 8016014:	9316      	str	r3, [sp, #88]	; 0x58
 8016016:	2b00      	cmp	r3, #0
 8016018:	db00      	blt.n	801601c <_svfprintf_r+0x254>
 801601a:	e742      	b.n	8015ea2 <_svfprintf_r+0xda>
 801601c:	425b      	negs	r3, r3
 801601e:	9316      	str	r3, [sp, #88]	; 0x58
 8016020:	2304      	movs	r3, #4
 8016022:	e7e8      	b.n	8015ff6 <_svfprintf_r+0x22e>
 8016024:	231b      	movs	r3, #27
 8016026:	aa1e      	add	r2, sp, #120	; 0x78
 8016028:	189b      	adds	r3, r3, r2
 801602a:	222b      	movs	r2, #43	; 0x2b
 801602c:	701a      	strb	r2, [r3, #0]
 801602e:	e738      	b.n	8015ea2 <_svfprintf_r+0xda>
 8016030:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016032:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016034:	7812      	ldrb	r2, [r2, #0]
 8016036:	3301      	adds	r3, #1
 8016038:	920e      	str	r2, [sp, #56]	; 0x38
 801603a:	2a2a      	cmp	r2, #42	; 0x2a
 801603c:	d008      	beq.n	8016050 <_svfprintf_r+0x288>
 801603e:	2200      	movs	r2, #0
 8016040:	9208      	str	r2, [sp, #32]
 8016042:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016044:	001a      	movs	r2, r3
 8016046:	3930      	subs	r1, #48	; 0x30
 8016048:	2909      	cmp	r1, #9
 801604a:	d90c      	bls.n	8016066 <_svfprintf_r+0x29e>
 801604c:	9211      	str	r2, [sp, #68]	; 0x44
 801604e:	e72e      	b.n	8015eae <_svfprintf_r+0xe6>
 8016050:	6821      	ldr	r1, [r4, #0]
 8016052:	1d22      	adds	r2, r4, #4
 8016054:	9108      	str	r1, [sp, #32]
 8016056:	2900      	cmp	r1, #0
 8016058:	da02      	bge.n	8016060 <_svfprintf_r+0x298>
 801605a:	2101      	movs	r1, #1
 801605c:	4249      	negs	r1, r1
 801605e:	9108      	str	r1, [sp, #32]
 8016060:	0014      	movs	r4, r2
 8016062:	9311      	str	r3, [sp, #68]	; 0x44
 8016064:	e71d      	b.n	8015ea2 <_svfprintf_r+0xda>
 8016066:	200a      	movs	r0, #10
 8016068:	9a08      	ldr	r2, [sp, #32]
 801606a:	4342      	muls	r2, r0
 801606c:	1852      	adds	r2, r2, r1
 801606e:	9208      	str	r2, [sp, #32]
 8016070:	781a      	ldrb	r2, [r3, #0]
 8016072:	3301      	adds	r3, #1
 8016074:	920e      	str	r2, [sp, #56]	; 0x38
 8016076:	e7e4      	b.n	8016042 <_svfprintf_r+0x27a>
 8016078:	2380      	movs	r3, #128	; 0x80
 801607a:	e7bc      	b.n	8015ff6 <_svfprintf_r+0x22e>
 801607c:	2300      	movs	r3, #0
 801607e:	9316      	str	r3, [sp, #88]	; 0x58
 8016080:	220a      	movs	r2, #10
 8016082:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016084:	4353      	muls	r3, r2
 8016086:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016088:	3a30      	subs	r2, #48	; 0x30
 801608a:	18d3      	adds	r3, r2, r3
 801608c:	9316      	str	r3, [sp, #88]	; 0x58
 801608e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016090:	1c5a      	adds	r2, r3, #1
 8016092:	781b      	ldrb	r3, [r3, #0]
 8016094:	9211      	str	r2, [sp, #68]	; 0x44
 8016096:	930e      	str	r3, [sp, #56]	; 0x38
 8016098:	3b30      	subs	r3, #48	; 0x30
 801609a:	2b09      	cmp	r3, #9
 801609c:	d9f0      	bls.n	8016080 <_svfprintf_r+0x2b8>
 801609e:	e7d5      	b.n	801604c <_svfprintf_r+0x284>
 80160a0:	2308      	movs	r3, #8
 80160a2:	e7a8      	b.n	8015ff6 <_svfprintf_r+0x22e>
 80160a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160a6:	781b      	ldrb	r3, [r3, #0]
 80160a8:	2b68      	cmp	r3, #104	; 0x68
 80160aa:	d105      	bne.n	80160b8 <_svfprintf_r+0x2f0>
 80160ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160ae:	3301      	adds	r3, #1
 80160b0:	9311      	str	r3, [sp, #68]	; 0x44
 80160b2:	2380      	movs	r3, #128	; 0x80
 80160b4:	009b      	lsls	r3, r3, #2
 80160b6:	e79e      	b.n	8015ff6 <_svfprintf_r+0x22e>
 80160b8:	2340      	movs	r3, #64	; 0x40
 80160ba:	e79c      	b.n	8015ff6 <_svfprintf_r+0x22e>
 80160bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160be:	781b      	ldrb	r3, [r3, #0]
 80160c0:	2b6c      	cmp	r3, #108	; 0x6c
 80160c2:	d104      	bne.n	80160ce <_svfprintf_r+0x306>
 80160c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160c6:	3301      	adds	r3, #1
 80160c8:	9311      	str	r3, [sp, #68]	; 0x44
 80160ca:	432e      	orrs	r6, r5
 80160cc:	e6e9      	b.n	8015ea2 <_svfprintf_r+0xda>
 80160ce:	2310      	movs	r3, #16
 80160d0:	e791      	b.n	8015ff6 <_svfprintf_r+0x22e>
 80160d2:	1d23      	adds	r3, r4, #4
 80160d4:	6822      	ldr	r2, [r4, #0]
 80160d6:	9312      	str	r3, [sp, #72]	; 0x48
 80160d8:	ab3f      	add	r3, sp, #252	; 0xfc
 80160da:	701a      	strb	r2, [r3, #0]
 80160dc:	221b      	movs	r2, #27
 80160de:	2000      	movs	r0, #0
 80160e0:	a91e      	add	r1, sp, #120	; 0x78
 80160e2:	1852      	adds	r2, r2, r1
 80160e4:	7010      	strb	r0, [r2, #0]
 80160e6:	2201      	movs	r2, #1
 80160e8:	0005      	movs	r5, r0
 80160ea:	900c      	str	r0, [sp, #48]	; 0x30
 80160ec:	9208      	str	r2, [sp, #32]
 80160ee:	9017      	str	r0, [sp, #92]	; 0x5c
 80160f0:	9010      	str	r0, [sp, #64]	; 0x40
 80160f2:	900f      	str	r0, [sp, #60]	; 0x3c
 80160f4:	9309      	str	r3, [sp, #36]	; 0x24
 80160f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80160f8:	9a08      	ldr	r2, [sp, #32]
 80160fa:	9318      	str	r3, [sp, #96]	; 0x60
 80160fc:	4293      	cmp	r3, r2
 80160fe:	da00      	bge.n	8016102 <_svfprintf_r+0x33a>
 8016100:	9218      	str	r2, [sp, #96]	; 0x60
 8016102:	231b      	movs	r3, #27
 8016104:	aa1e      	add	r2, sp, #120	; 0x78
 8016106:	189b      	adds	r3, r3, r2
 8016108:	781b      	ldrb	r3, [r3, #0]
 801610a:	1e5a      	subs	r2, r3, #1
 801610c:	4193      	sbcs	r3, r2
 801610e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016110:	18d3      	adds	r3, r2, r3
 8016112:	9318      	str	r3, [sp, #96]	; 0x60
 8016114:	2302      	movs	r3, #2
 8016116:	4033      	ands	r3, r6
 8016118:	9320      	str	r3, [sp, #128]	; 0x80
 801611a:	d002      	beq.n	8016122 <_svfprintf_r+0x35a>
 801611c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801611e:	3302      	adds	r3, #2
 8016120:	9318      	str	r3, [sp, #96]	; 0x60
 8016122:	2384      	movs	r3, #132	; 0x84
 8016124:	4033      	ands	r3, r6
 8016126:	9321      	str	r3, [sp, #132]	; 0x84
 8016128:	d121      	bne.n	801616e <_svfprintf_r+0x3a6>
 801612a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801612c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801612e:	1a9c      	subs	r4, r3, r2
 8016130:	2c00      	cmp	r4, #0
 8016132:	dd1c      	ble.n	801616e <_svfprintf_r+0x3a6>
 8016134:	0039      	movs	r1, r7
 8016136:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016138:	485d      	ldr	r0, [pc, #372]	; (80162b0 <_svfprintf_r+0x4e8>)
 801613a:	9322      	str	r3, [sp, #136]	; 0x88
 801613c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801613e:	3301      	adds	r3, #1
 8016140:	3108      	adds	r1, #8
 8016142:	6038      	str	r0, [r7, #0]
 8016144:	2c10      	cmp	r4, #16
 8016146:	dd01      	ble.n	801614c <_svfprintf_r+0x384>
 8016148:	f000 fd08 	bl	8016b5c <_svfprintf_r+0xd94>
 801614c:	607c      	str	r4, [r7, #4]
 801614e:	18a4      	adds	r4, r4, r2
 8016150:	942e      	str	r4, [sp, #184]	; 0xb8
 8016152:	932d      	str	r3, [sp, #180]	; 0xb4
 8016154:	000f      	movs	r7, r1
 8016156:	2b07      	cmp	r3, #7
 8016158:	dd09      	ble.n	801616e <_svfprintf_r+0x3a6>
 801615a:	aa2c      	add	r2, sp, #176	; 0xb0
 801615c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801615e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016160:	f002 ff86 	bl	8019070 <__ssprint_r>
 8016164:	2800      	cmp	r0, #0
 8016166:	d001      	beq.n	801616c <_svfprintf_r+0x3a4>
 8016168:	f001 f852 	bl	8017210 <_svfprintf_r+0x1448>
 801616c:	af2f      	add	r7, sp, #188	; 0xbc
 801616e:	231b      	movs	r3, #27
 8016170:	aa1e      	add	r2, sp, #120	; 0x78
 8016172:	189b      	adds	r3, r3, r2
 8016174:	781a      	ldrb	r2, [r3, #0]
 8016176:	2a00      	cmp	r2, #0
 8016178:	d017      	beq.n	80161aa <_svfprintf_r+0x3e2>
 801617a:	603b      	str	r3, [r7, #0]
 801617c:	2301      	movs	r3, #1
 801617e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016180:	607b      	str	r3, [r7, #4]
 8016182:	0013      	movs	r3, r2
 8016184:	3301      	adds	r3, #1
 8016186:	932e      	str	r3, [sp, #184]	; 0xb8
 8016188:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801618a:	3708      	adds	r7, #8
 801618c:	9322      	str	r3, [sp, #136]	; 0x88
 801618e:	3301      	adds	r3, #1
 8016190:	932d      	str	r3, [sp, #180]	; 0xb4
 8016192:	2b07      	cmp	r3, #7
 8016194:	dd09      	ble.n	80161aa <_svfprintf_r+0x3e2>
 8016196:	aa2c      	add	r2, sp, #176	; 0xb0
 8016198:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801619a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801619c:	f002 ff68 	bl	8019070 <__ssprint_r>
 80161a0:	2800      	cmp	r0, #0
 80161a2:	d001      	beq.n	80161a8 <_svfprintf_r+0x3e0>
 80161a4:	f001 f834 	bl	8017210 <_svfprintf_r+0x1448>
 80161a8:	af2f      	add	r7, sp, #188	; 0xbc
 80161aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d019      	beq.n	80161e4 <_svfprintf_r+0x41c>
 80161b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80161b2:	9320      	str	r3, [sp, #128]	; 0x80
 80161b4:	ab25      	add	r3, sp, #148	; 0x94
 80161b6:	603b      	str	r3, [r7, #0]
 80161b8:	2302      	movs	r3, #2
 80161ba:	607b      	str	r3, [r7, #4]
 80161bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80161be:	3708      	adds	r7, #8
 80161c0:	3302      	adds	r3, #2
 80161c2:	932e      	str	r3, [sp, #184]	; 0xb8
 80161c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80161c6:	9320      	str	r3, [sp, #128]	; 0x80
 80161c8:	3301      	adds	r3, #1
 80161ca:	932d      	str	r3, [sp, #180]	; 0xb4
 80161cc:	2b07      	cmp	r3, #7
 80161ce:	dd09      	ble.n	80161e4 <_svfprintf_r+0x41c>
 80161d0:	aa2c      	add	r2, sp, #176	; 0xb0
 80161d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80161d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80161d6:	f002 ff4b 	bl	8019070 <__ssprint_r>
 80161da:	2800      	cmp	r0, #0
 80161dc:	d001      	beq.n	80161e2 <_svfprintf_r+0x41a>
 80161de:	f001 f817 	bl	8017210 <_svfprintf_r+0x1448>
 80161e2:	af2f      	add	r7, sp, #188	; 0xbc
 80161e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80161e6:	2b80      	cmp	r3, #128	; 0x80
 80161e8:	d121      	bne.n	801622e <_svfprintf_r+0x466>
 80161ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80161ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80161ee:	1a9c      	subs	r4, r3, r2
 80161f0:	2c00      	cmp	r4, #0
 80161f2:	dd1c      	ble.n	801622e <_svfprintf_r+0x466>
 80161f4:	0039      	movs	r1, r7
 80161f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80161f8:	482e      	ldr	r0, [pc, #184]	; (80162b4 <_svfprintf_r+0x4ec>)
 80161fa:	9320      	str	r3, [sp, #128]	; 0x80
 80161fc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80161fe:	3301      	adds	r3, #1
 8016200:	3108      	adds	r1, #8
 8016202:	6038      	str	r0, [r7, #0]
 8016204:	2c10      	cmp	r4, #16
 8016206:	dd01      	ble.n	801620c <_svfprintf_r+0x444>
 8016208:	f000 fcbc 	bl	8016b84 <_svfprintf_r+0xdbc>
 801620c:	607c      	str	r4, [r7, #4]
 801620e:	18a4      	adds	r4, r4, r2
 8016210:	942e      	str	r4, [sp, #184]	; 0xb8
 8016212:	932d      	str	r3, [sp, #180]	; 0xb4
 8016214:	000f      	movs	r7, r1
 8016216:	2b07      	cmp	r3, #7
 8016218:	dd09      	ble.n	801622e <_svfprintf_r+0x466>
 801621a:	aa2c      	add	r2, sp, #176	; 0xb0
 801621c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801621e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016220:	f002 ff26 	bl	8019070 <__ssprint_r>
 8016224:	2800      	cmp	r0, #0
 8016226:	d001      	beq.n	801622c <_svfprintf_r+0x464>
 8016228:	f000 fff2 	bl	8017210 <_svfprintf_r+0x1448>
 801622c:	af2f      	add	r7, sp, #188	; 0xbc
 801622e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016230:	9a08      	ldr	r2, [sp, #32]
 8016232:	1a9c      	subs	r4, r3, r2
 8016234:	2c00      	cmp	r4, #0
 8016236:	dd1c      	ble.n	8016272 <_svfprintf_r+0x4aa>
 8016238:	0039      	movs	r1, r7
 801623a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801623c:	481d      	ldr	r0, [pc, #116]	; (80162b4 <_svfprintf_r+0x4ec>)
 801623e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016240:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016242:	3301      	adds	r3, #1
 8016244:	3108      	adds	r1, #8
 8016246:	6038      	str	r0, [r7, #0]
 8016248:	2c10      	cmp	r4, #16
 801624a:	dd01      	ble.n	8016250 <_svfprintf_r+0x488>
 801624c:	f000 fcb4 	bl	8016bb8 <_svfprintf_r+0xdf0>
 8016250:	18a2      	adds	r2, r4, r2
 8016252:	607c      	str	r4, [r7, #4]
 8016254:	922e      	str	r2, [sp, #184]	; 0xb8
 8016256:	932d      	str	r3, [sp, #180]	; 0xb4
 8016258:	000f      	movs	r7, r1
 801625a:	2b07      	cmp	r3, #7
 801625c:	dd09      	ble.n	8016272 <_svfprintf_r+0x4aa>
 801625e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016260:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016262:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016264:	f002 ff04 	bl	8019070 <__ssprint_r>
 8016268:	2800      	cmp	r0, #0
 801626a:	d001      	beq.n	8016270 <_svfprintf_r+0x4a8>
 801626c:	f000 ffd0 	bl	8017210 <_svfprintf_r+0x1448>
 8016270:	af2f      	add	r7, sp, #188	; 0xbc
 8016272:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016274:	9317      	str	r3, [sp, #92]	; 0x5c
 8016276:	05f3      	lsls	r3, r6, #23
 8016278:	d501      	bpl.n	801627e <_svfprintf_r+0x4b6>
 801627a:	f000 fcb1 	bl	8016be0 <_svfprintf_r+0xe18>
 801627e:	9a08      	ldr	r2, [sp, #32]
 8016280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016282:	4694      	mov	ip, r2
 8016284:	603b      	str	r3, [r7, #0]
 8016286:	9b08      	ldr	r3, [sp, #32]
 8016288:	607b      	str	r3, [r7, #4]
 801628a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801628c:	4463      	add	r3, ip
 801628e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016290:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016292:	9308      	str	r3, [sp, #32]
 8016294:	3301      	adds	r3, #1
 8016296:	932d      	str	r3, [sp, #180]	; 0xb4
 8016298:	2b07      	cmp	r3, #7
 801629a:	dd01      	ble.n	80162a0 <_svfprintf_r+0x4d8>
 801629c:	f000 fd94 	bl	8016dc8 <_svfprintf_r+0x1000>
 80162a0:	3708      	adds	r7, #8
 80162a2:	f000 fce4 	bl	8016c6e <_svfprintf_r+0xea6>
 80162a6:	46c0      	nop			; (mov r8, r8)
 80162a8:	0801ca91 	.word	0x0801ca91
 80162ac:	fffffbff 	.word	0xfffffbff
 80162b0:	0801caa4 	.word	0x0801caa4
 80162b4:	0801cab4 	.word	0x0801cab4
 80162b8:	2310      	movs	r3, #16
 80162ba:	431e      	orrs	r6, r3
 80162bc:	06b3      	lsls	r3, r6, #26
 80162be:	d52c      	bpl.n	801631a <_svfprintf_r+0x552>
 80162c0:	2307      	movs	r3, #7
 80162c2:	3407      	adds	r4, #7
 80162c4:	439c      	bics	r4, r3
 80162c6:	0023      	movs	r3, r4
 80162c8:	3308      	adds	r3, #8
 80162ca:	9312      	str	r3, [sp, #72]	; 0x48
 80162cc:	6823      	ldr	r3, [r4, #0]
 80162ce:	6864      	ldr	r4, [r4, #4]
 80162d0:	9306      	str	r3, [sp, #24]
 80162d2:	9407      	str	r4, [sp, #28]
 80162d4:	9b07      	ldr	r3, [sp, #28]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	da0b      	bge.n	80162f2 <_svfprintf_r+0x52a>
 80162da:	9906      	ldr	r1, [sp, #24]
 80162dc:	9a07      	ldr	r2, [sp, #28]
 80162de:	2400      	movs	r4, #0
 80162e0:	424b      	negs	r3, r1
 80162e2:	4194      	sbcs	r4, r2
 80162e4:	9306      	str	r3, [sp, #24]
 80162e6:	9407      	str	r4, [sp, #28]
 80162e8:	231b      	movs	r3, #27
 80162ea:	aa1e      	add	r2, sp, #120	; 0x78
 80162ec:	189b      	adds	r3, r3, r2
 80162ee:	222d      	movs	r2, #45	; 0x2d
 80162f0:	701a      	strb	r2, [r3, #0]
 80162f2:	9b08      	ldr	r3, [sp, #32]
 80162f4:	3301      	adds	r3, #1
 80162f6:	d000      	beq.n	80162fa <_svfprintf_r+0x532>
 80162f8:	e382      	b.n	8016a00 <_svfprintf_r+0xc38>
 80162fa:	9b07      	ldr	r3, [sp, #28]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d000      	beq.n	8016302 <_svfprintf_r+0x53a>
 8016300:	e3b0      	b.n	8016a64 <_svfprintf_r+0xc9c>
 8016302:	9b06      	ldr	r3, [sp, #24]
 8016304:	2b09      	cmp	r3, #9
 8016306:	d900      	bls.n	801630a <_svfprintf_r+0x542>
 8016308:	e3ac      	b.n	8016a64 <_svfprintf_r+0xc9c>
 801630a:	23e7      	movs	r3, #231	; 0xe7
 801630c:	aa1e      	add	r2, sp, #120	; 0x78
 801630e:	189b      	adds	r3, r3, r2
 8016310:	9a06      	ldr	r2, [sp, #24]
 8016312:	3230      	adds	r2, #48	; 0x30
 8016314:	701a      	strb	r2, [r3, #0]
 8016316:	9309      	str	r3, [sp, #36]	; 0x24
 8016318:	e395      	b.n	8016a46 <_svfprintf_r+0xc7e>
 801631a:	1d23      	adds	r3, r4, #4
 801631c:	9312      	str	r3, [sp, #72]	; 0x48
 801631e:	06f3      	lsls	r3, r6, #27
 8016320:	d504      	bpl.n	801632c <_svfprintf_r+0x564>
 8016322:	6823      	ldr	r3, [r4, #0]
 8016324:	9306      	str	r3, [sp, #24]
 8016326:	17db      	asrs	r3, r3, #31
 8016328:	9307      	str	r3, [sp, #28]
 801632a:	e7d3      	b.n	80162d4 <_svfprintf_r+0x50c>
 801632c:	6823      	ldr	r3, [r4, #0]
 801632e:	0672      	lsls	r2, r6, #25
 8016330:	d501      	bpl.n	8016336 <_svfprintf_r+0x56e>
 8016332:	b21b      	sxth	r3, r3
 8016334:	e7f6      	b.n	8016324 <_svfprintf_r+0x55c>
 8016336:	05b2      	lsls	r2, r6, #22
 8016338:	d5f4      	bpl.n	8016324 <_svfprintf_r+0x55c>
 801633a:	b25b      	sxtb	r3, r3
 801633c:	e7f2      	b.n	8016324 <_svfprintf_r+0x55c>
 801633e:	2307      	movs	r3, #7
 8016340:	3407      	adds	r4, #7
 8016342:	439c      	bics	r4, r3
 8016344:	0023      	movs	r3, r4
 8016346:	2201      	movs	r2, #1
 8016348:	3308      	adds	r3, #8
 801634a:	9312      	str	r3, [sp, #72]	; 0x48
 801634c:	6823      	ldr	r3, [r4, #0]
 801634e:	4252      	negs	r2, r2
 8016350:	931a      	str	r3, [sp, #104]	; 0x68
 8016352:	6863      	ldr	r3, [r4, #4]
 8016354:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8016356:	005c      	lsls	r4, r3, #1
 8016358:	0864      	lsrs	r4, r4, #1
 801635a:	9319      	str	r3, [sp, #100]	; 0x64
 801635c:	0028      	movs	r0, r5
 801635e:	4bcf      	ldr	r3, [pc, #828]	; (801669c <_svfprintf_r+0x8d4>)
 8016360:	0021      	movs	r1, r4
 8016362:	f7ec fc57 	bl	8002c14 <__aeabi_dcmpun>
 8016366:	2800      	cmp	r0, #0
 8016368:	d125      	bne.n	80163b6 <_svfprintf_r+0x5ee>
 801636a:	2201      	movs	r2, #1
 801636c:	4bcb      	ldr	r3, [pc, #812]	; (801669c <_svfprintf_r+0x8d4>)
 801636e:	4252      	negs	r2, r2
 8016370:	0028      	movs	r0, r5
 8016372:	0021      	movs	r1, r4
 8016374:	f7ea f882 	bl	800047c <__aeabi_dcmple>
 8016378:	2800      	cmp	r0, #0
 801637a:	d11c      	bne.n	80163b6 <_svfprintf_r+0x5ee>
 801637c:	2200      	movs	r2, #0
 801637e:	2300      	movs	r3, #0
 8016380:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016382:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016384:	f7ea f870 	bl	8000468 <__aeabi_dcmplt>
 8016388:	2800      	cmp	r0, #0
 801638a:	d004      	beq.n	8016396 <_svfprintf_r+0x5ce>
 801638c:	231b      	movs	r3, #27
 801638e:	aa1e      	add	r2, sp, #120	; 0x78
 8016390:	189b      	adds	r3, r3, r2
 8016392:	222d      	movs	r2, #45	; 0x2d
 8016394:	701a      	strb	r2, [r3, #0]
 8016396:	4bc2      	ldr	r3, [pc, #776]	; (80166a0 <_svfprintf_r+0x8d8>)
 8016398:	9309      	str	r3, [sp, #36]	; 0x24
 801639a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801639c:	2b47      	cmp	r3, #71	; 0x47
 801639e:	dc01      	bgt.n	80163a4 <_svfprintf_r+0x5dc>
 80163a0:	4bc0      	ldr	r3, [pc, #768]	; (80166a4 <_svfprintf_r+0x8dc>)
 80163a2:	9309      	str	r3, [sp, #36]	; 0x24
 80163a4:	2380      	movs	r3, #128	; 0x80
 80163a6:	439e      	bics	r6, r3
 80163a8:	2300      	movs	r3, #0
 80163aa:	930c      	str	r3, [sp, #48]	; 0x30
 80163ac:	3303      	adds	r3, #3
 80163ae:	9308      	str	r3, [sp, #32]
 80163b0:	2300      	movs	r3, #0
 80163b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80163b4:	e34f      	b.n	8016a56 <_svfprintf_r+0xc8e>
 80163b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80163b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80163ba:	981a      	ldr	r0, [sp, #104]	; 0x68
 80163bc:	9919      	ldr	r1, [sp, #100]	; 0x64
 80163be:	f7ec fc29 	bl	8002c14 <__aeabi_dcmpun>
 80163c2:	2800      	cmp	r0, #0
 80163c4:	d00e      	beq.n	80163e4 <_svfprintf_r+0x61c>
 80163c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	da04      	bge.n	80163d6 <_svfprintf_r+0x60e>
 80163cc:	231b      	movs	r3, #27
 80163ce:	aa1e      	add	r2, sp, #120	; 0x78
 80163d0:	189b      	adds	r3, r3, r2
 80163d2:	222d      	movs	r2, #45	; 0x2d
 80163d4:	701a      	strb	r2, [r3, #0]
 80163d6:	4bb4      	ldr	r3, [pc, #720]	; (80166a8 <_svfprintf_r+0x8e0>)
 80163d8:	9309      	str	r3, [sp, #36]	; 0x24
 80163da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80163dc:	2b47      	cmp	r3, #71	; 0x47
 80163de:	dce1      	bgt.n	80163a4 <_svfprintf_r+0x5dc>
 80163e0:	4bb2      	ldr	r3, [pc, #712]	; (80166ac <_svfprintf_r+0x8e4>)
 80163e2:	e7de      	b.n	80163a2 <_svfprintf_r+0x5da>
 80163e4:	2320      	movs	r3, #32
 80163e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80163e8:	439a      	bics	r2, r3
 80163ea:	920f      	str	r2, [sp, #60]	; 0x3c
 80163ec:	2a41      	cmp	r2, #65	; 0x41
 80163ee:	d124      	bne.n	801643a <_svfprintf_r+0x672>
 80163f0:	2230      	movs	r2, #48	; 0x30
 80163f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80163f4:	ab25      	add	r3, sp, #148	; 0x94
 80163f6:	701a      	strb	r2, [r3, #0]
 80163f8:	3228      	adds	r2, #40	; 0x28
 80163fa:	2961      	cmp	r1, #97	; 0x61
 80163fc:	d100      	bne.n	8016400 <_svfprintf_r+0x638>
 80163fe:	3220      	adds	r2, #32
 8016400:	705a      	strb	r2, [r3, #1]
 8016402:	2302      	movs	r3, #2
 8016404:	431e      	orrs	r6, r3
 8016406:	9b08      	ldr	r3, [sp, #32]
 8016408:	2b63      	cmp	r3, #99	; 0x63
 801640a:	dc00      	bgt.n	801640e <_svfprintf_r+0x646>
 801640c:	e09e      	b.n	801654c <_svfprintf_r+0x784>
 801640e:	1c59      	adds	r1, r3, #1
 8016410:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016412:	f7fe f913 	bl	801463c <_malloc_r>
 8016416:	9009      	str	r0, [sp, #36]	; 0x24
 8016418:	2800      	cmp	r0, #0
 801641a:	d000      	beq.n	801641e <_svfprintf_r+0x656>
 801641c:	e09b      	b.n	8016556 <_svfprintf_r+0x78e>
 801641e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016420:	899a      	ldrh	r2, [r3, #12]
 8016422:	2340      	movs	r3, #64	; 0x40
 8016424:	4313      	orrs	r3, r2
 8016426:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016428:	8193      	strh	r3, [r2, #12]
 801642a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801642c:	899b      	ldrh	r3, [r3, #12]
 801642e:	065b      	lsls	r3, r3, #25
 8016430:	d400      	bmi.n	8016434 <_svfprintf_r+0x66c>
 8016432:	e4ee      	b.n	8015e12 <_svfprintf_r+0x4a>
 8016434:	2301      	movs	r3, #1
 8016436:	425b      	negs	r3, r3
 8016438:	e4ea      	b.n	8015e10 <_svfprintf_r+0x48>
 801643a:	9b08      	ldr	r3, [sp, #32]
 801643c:	900c      	str	r0, [sp, #48]	; 0x30
 801643e:	3301      	adds	r3, #1
 8016440:	d100      	bne.n	8016444 <_svfprintf_r+0x67c>
 8016442:	e08b      	b.n	801655c <_svfprintf_r+0x794>
 8016444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016446:	2b47      	cmp	r3, #71	; 0x47
 8016448:	d103      	bne.n	8016452 <_svfprintf_r+0x68a>
 801644a:	9b08      	ldr	r3, [sp, #32]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d100      	bne.n	8016452 <_svfprintf_r+0x68a>
 8016450:	e087      	b.n	8016562 <_svfprintf_r+0x79a>
 8016452:	2380      	movs	r3, #128	; 0x80
 8016454:	005b      	lsls	r3, r3, #1
 8016456:	4333      	orrs	r3, r6
 8016458:	9320      	str	r3, [sp, #128]	; 0x80
 801645a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801645c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801645e:	2b00      	cmp	r3, #0
 8016460:	db00      	blt.n	8016464 <_svfprintf_r+0x69c>
 8016462:	e082      	b.n	801656a <_svfprintf_r+0x7a2>
 8016464:	2280      	movs	r2, #128	; 0x80
 8016466:	0612      	lsls	r2, r2, #24
 8016468:	4694      	mov	ip, r2
 801646a:	4463      	add	r3, ip
 801646c:	930d      	str	r3, [sp, #52]	; 0x34
 801646e:	232d      	movs	r3, #45	; 0x2d
 8016470:	9322      	str	r3, [sp, #136]	; 0x88
 8016472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016474:	2b41      	cmp	r3, #65	; 0x41
 8016476:	d000      	beq.n	801647a <_svfprintf_r+0x6b2>
 8016478:	e105      	b.n	8016686 <_svfprintf_r+0x8be>
 801647a:	aa26      	add	r2, sp, #152	; 0x98
 801647c:	0020      	movs	r0, r4
 801647e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016480:	f002 fdc4 	bl	801900c <frexp>
 8016484:	23ff      	movs	r3, #255	; 0xff
 8016486:	2200      	movs	r2, #0
 8016488:	059b      	lsls	r3, r3, #22
 801648a:	f7eb fe09 	bl	80020a0 <__aeabi_dmul>
 801648e:	2200      	movs	r2, #0
 8016490:	2300      	movs	r3, #0
 8016492:	0004      	movs	r4, r0
 8016494:	000d      	movs	r5, r1
 8016496:	f7e9 ffe1 	bl	800045c <__aeabi_dcmpeq>
 801649a:	2800      	cmp	r0, #0
 801649c:	d001      	beq.n	80164a2 <_svfprintf_r+0x6da>
 801649e:	2301      	movs	r3, #1
 80164a0:	9326      	str	r3, [sp, #152]	; 0x98
 80164a2:	4b83      	ldr	r3, [pc, #524]	; (80166b0 <_svfprintf_r+0x8e8>)
 80164a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80164a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164a8:	2b61      	cmp	r3, #97	; 0x61
 80164aa:	d101      	bne.n	80164b0 <_svfprintf_r+0x6e8>
 80164ac:	4b81      	ldr	r3, [pc, #516]	; (80166b4 <_svfprintf_r+0x8ec>)
 80164ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80164b0:	9b08      	ldr	r3, [sp, #32]
 80164b2:	3b01      	subs	r3, #1
 80164b4:	9310      	str	r3, [sp, #64]	; 0x40
 80164b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164b8:	9318      	str	r3, [sp, #96]	; 0x60
 80164ba:	2200      	movs	r2, #0
 80164bc:	4b7e      	ldr	r3, [pc, #504]	; (80166b8 <_svfprintf_r+0x8f0>)
 80164be:	0020      	movs	r0, r4
 80164c0:	0029      	movs	r1, r5
 80164c2:	f7eb fded 	bl	80020a0 <__aeabi_dmul>
 80164c6:	000d      	movs	r5, r1
 80164c8:	0004      	movs	r4, r0
 80164ca:	f7ec fbbf 	bl	8002c4c <__aeabi_d2iz>
 80164ce:	9021      	str	r0, [sp, #132]	; 0x84
 80164d0:	f7ec fbf2 	bl	8002cb8 <__aeabi_i2d>
 80164d4:	0002      	movs	r2, r0
 80164d6:	000b      	movs	r3, r1
 80164d8:	0020      	movs	r0, r4
 80164da:	0029      	movs	r1, r5
 80164dc:	f7ec f852 	bl	8002584 <__aeabi_dsub>
 80164e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80164e2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80164e4:	3301      	adds	r3, #1
 80164e6:	930d      	str	r3, [sp, #52]	; 0x34
 80164e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80164ea:	0004      	movs	r4, r0
 80164ec:	5c9b      	ldrb	r3, [r3, r2]
 80164ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80164f0:	000d      	movs	r5, r1
 80164f2:	7013      	strb	r3, [r2, #0]
 80164f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80164f6:	9323      	str	r3, [sp, #140]	; 0x8c
 80164f8:	3301      	adds	r3, #1
 80164fa:	d00a      	beq.n	8016512 <_svfprintf_r+0x74a>
 80164fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80164fe:	2200      	movs	r2, #0
 8016500:	3b01      	subs	r3, #1
 8016502:	9310      	str	r3, [sp, #64]	; 0x40
 8016504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016506:	9318      	str	r3, [sp, #96]	; 0x60
 8016508:	2300      	movs	r3, #0
 801650a:	f7e9 ffa7 	bl	800045c <__aeabi_dcmpeq>
 801650e:	2800      	cmp	r0, #0
 8016510:	d0d3      	beq.n	80164ba <_svfprintf_r+0x6f2>
 8016512:	2200      	movs	r2, #0
 8016514:	4b69      	ldr	r3, [pc, #420]	; (80166bc <_svfprintf_r+0x8f4>)
 8016516:	0020      	movs	r0, r4
 8016518:	0029      	movs	r1, r5
 801651a:	f7e9 ffb9 	bl	8000490 <__aeabi_dcmpgt>
 801651e:	2800      	cmp	r0, #0
 8016520:	d126      	bne.n	8016570 <_svfprintf_r+0x7a8>
 8016522:	2200      	movs	r2, #0
 8016524:	4b65      	ldr	r3, [pc, #404]	; (80166bc <_svfprintf_r+0x8f4>)
 8016526:	0020      	movs	r0, r4
 8016528:	0029      	movs	r1, r5
 801652a:	f7e9 ff97 	bl	800045c <__aeabi_dcmpeq>
 801652e:	2800      	cmp	r0, #0
 8016530:	d002      	beq.n	8016538 <_svfprintf_r+0x770>
 8016532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016534:	07db      	lsls	r3, r3, #31
 8016536:	d41b      	bmi.n	8016570 <_svfprintf_r+0x7a8>
 8016538:	2130      	movs	r1, #48	; 0x30
 801653a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801653c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801653e:	1898      	adds	r0, r3, r2
 8016540:	930d      	str	r3, [sp, #52]	; 0x34
 8016542:	1ac2      	subs	r2, r0, r3
 8016544:	d426      	bmi.n	8016594 <_svfprintf_r+0x7cc>
 8016546:	7019      	strb	r1, [r3, #0]
 8016548:	3301      	adds	r3, #1
 801654a:	e7f9      	b.n	8016540 <_svfprintf_r+0x778>
 801654c:	2300      	movs	r3, #0
 801654e:	930c      	str	r3, [sp, #48]	; 0x30
 8016550:	ab3f      	add	r3, sp, #252	; 0xfc
 8016552:	9309      	str	r3, [sp, #36]	; 0x24
 8016554:	e77d      	b.n	8016452 <_svfprintf_r+0x68a>
 8016556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016558:	930c      	str	r3, [sp, #48]	; 0x30
 801655a:	e77a      	b.n	8016452 <_svfprintf_r+0x68a>
 801655c:	2306      	movs	r3, #6
 801655e:	9308      	str	r3, [sp, #32]
 8016560:	e777      	b.n	8016452 <_svfprintf_r+0x68a>
 8016562:	9b08      	ldr	r3, [sp, #32]
 8016564:	930c      	str	r3, [sp, #48]	; 0x30
 8016566:	2301      	movs	r3, #1
 8016568:	e7f9      	b.n	801655e <_svfprintf_r+0x796>
 801656a:	930d      	str	r3, [sp, #52]	; 0x34
 801656c:	2300      	movs	r3, #0
 801656e:	e77f      	b.n	8016470 <_svfprintf_r+0x6a8>
 8016570:	2030      	movs	r0, #48	; 0x30
 8016572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016574:	932a      	str	r3, [sp, #168]	; 0xa8
 8016576:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016578:	7bda      	ldrb	r2, [r3, #15]
 801657a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801657c:	3b01      	subs	r3, #1
 801657e:	932a      	str	r3, [sp, #168]	; 0xa8
 8016580:	7819      	ldrb	r1, [r3, #0]
 8016582:	4291      	cmp	r1, r2
 8016584:	d07d      	beq.n	8016682 <_svfprintf_r+0x8ba>
 8016586:	1c4a      	adds	r2, r1, #1
 8016588:	b2d2      	uxtb	r2, r2
 801658a:	2939      	cmp	r1, #57	; 0x39
 801658c:	d101      	bne.n	8016592 <_svfprintf_r+0x7ca>
 801658e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016590:	7a92      	ldrb	r2, [r2, #10]
 8016592:	701a      	strb	r2, [r3, #0]
 8016594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016598:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801659a:	1a9b      	subs	r3, r3, r2
 801659c:	930d      	str	r3, [sp, #52]	; 0x34
 801659e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165a0:	2b47      	cmp	r3, #71	; 0x47
 80165a2:	d000      	beq.n	80165a6 <_svfprintf_r+0x7de>
 80165a4:	e0d2      	b.n	801674c <_svfprintf_r+0x984>
 80165a6:	1ceb      	adds	r3, r5, #3
 80165a8:	db03      	blt.n	80165b2 <_svfprintf_r+0x7ea>
 80165aa:	9b08      	ldr	r3, [sp, #32]
 80165ac:	42ab      	cmp	r3, r5
 80165ae:	db00      	blt.n	80165b2 <_svfprintf_r+0x7ea>
 80165b0:	e0fd      	b.n	80167ae <_svfprintf_r+0x9e6>
 80165b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80165b4:	3b02      	subs	r3, #2
 80165b6:	930e      	str	r3, [sp, #56]	; 0x38
 80165b8:	2238      	movs	r2, #56	; 0x38
 80165ba:	466b      	mov	r3, sp
 80165bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80165be:	189b      	adds	r3, r3, r2
 80165c0:	3a18      	subs	r2, #24
 80165c2:	4391      	bics	r1, r2
 80165c4:	1e6c      	subs	r4, r5, #1
 80165c6:	000a      	movs	r2, r1
 80165c8:	9426      	str	r4, [sp, #152]	; 0x98
 80165ca:	781b      	ldrb	r3, [r3, #0]
 80165cc:	2100      	movs	r1, #0
 80165ce:	2a41      	cmp	r2, #65	; 0x41
 80165d0:	d102      	bne.n	80165d8 <_svfprintf_r+0x810>
 80165d2:	330f      	adds	r3, #15
 80165d4:	b2db      	uxtb	r3, r3
 80165d6:	3101      	adds	r1, #1
 80165d8:	aa28      	add	r2, sp, #160	; 0xa0
 80165da:	7013      	strb	r3, [r2, #0]
 80165dc:	232b      	movs	r3, #43	; 0x2b
 80165de:	2c00      	cmp	r4, #0
 80165e0:	da02      	bge.n	80165e8 <_svfprintf_r+0x820>
 80165e2:	2401      	movs	r4, #1
 80165e4:	232d      	movs	r3, #45	; 0x2d
 80165e6:	1b64      	subs	r4, r4, r5
 80165e8:	7053      	strb	r3, [r2, #1]
 80165ea:	2c09      	cmp	r4, #9
 80165ec:	dc00      	bgt.n	80165f0 <_svfprintf_r+0x828>
 80165ee:	e0c7      	b.n	8016780 <_svfprintf_r+0x9b8>
 80165f0:	2537      	movs	r5, #55	; 0x37
 80165f2:	ab1e      	add	r3, sp, #120	; 0x78
 80165f4:	18ed      	adds	r5, r5, r3
 80165f6:	1e6b      	subs	r3, r5, #1
 80165f8:	0020      	movs	r0, r4
 80165fa:	210a      	movs	r1, #10
 80165fc:	9308      	str	r3, [sp, #32]
 80165fe:	f7e9 ff17 	bl	8000430 <__aeabi_idivmod>
 8016602:	1e6b      	subs	r3, r5, #1
 8016604:	3130      	adds	r1, #48	; 0x30
 8016606:	7019      	strb	r1, [r3, #0]
 8016608:	0020      	movs	r0, r4
 801660a:	210a      	movs	r1, #10
 801660c:	f7e9 fe2a 	bl	8000264 <__divsi3>
 8016610:	0004      	movs	r4, r0
 8016612:	2809      	cmp	r0, #9
 8016614:	dd00      	ble.n	8016618 <_svfprintf_r+0x850>
 8016616:	e0ac      	b.n	8016772 <_svfprintf_r+0x9aa>
 8016618:	232a      	movs	r3, #42	; 0x2a
 801661a:	2137      	movs	r1, #55	; 0x37
 801661c:	aa1e      	add	r2, sp, #120	; 0x78
 801661e:	3d02      	subs	r5, #2
 8016620:	3430      	adds	r4, #48	; 0x30
 8016622:	702c      	strb	r4, [r5, #0]
 8016624:	189b      	adds	r3, r3, r2
 8016626:	1889      	adds	r1, r1, r2
 8016628:	001a      	movs	r2, r3
 801662a:	428d      	cmp	r5, r1
 801662c:	d200      	bcs.n	8016630 <_svfprintf_r+0x868>
 801662e:	e0a2      	b.n	8016776 <_svfprintf_r+0x9ae>
 8016630:	ab28      	add	r3, sp, #160	; 0xa0
 8016632:	1ad3      	subs	r3, r2, r3
 8016634:	931d      	str	r3, [sp, #116]	; 0x74
 8016636:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801663a:	4694      	mov	ip, r2
 801663c:	4463      	add	r3, ip
 801663e:	9308      	str	r3, [sp, #32]
 8016640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016642:	2b01      	cmp	r3, #1
 8016644:	dc01      	bgt.n	801664a <_svfprintf_r+0x882>
 8016646:	07f3      	lsls	r3, r6, #31
 8016648:	d504      	bpl.n	8016654 <_svfprintf_r+0x88c>
 801664a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801664c:	9b08      	ldr	r3, [sp, #32]
 801664e:	4694      	mov	ip, r2
 8016650:	4463      	add	r3, ip
 8016652:	9308      	str	r3, [sp, #32]
 8016654:	2280      	movs	r2, #128	; 0x80
 8016656:	4b1a      	ldr	r3, [pc, #104]	; (80166c0 <_svfprintf_r+0x8f8>)
 8016658:	0052      	lsls	r2, r2, #1
 801665a:	4033      	ands	r3, r6
 801665c:	431a      	orrs	r2, r3
 801665e:	2300      	movs	r3, #0
 8016660:	001d      	movs	r5, r3
 8016662:	9220      	str	r2, [sp, #128]	; 0x80
 8016664:	9310      	str	r3, [sp, #64]	; 0x40
 8016666:	930f      	str	r3, [sp, #60]	; 0x3c
 8016668:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801666a:	2b00      	cmp	r3, #0
 801666c:	d100      	bne.n	8016670 <_svfprintf_r+0x8a8>
 801666e:	e270      	b.n	8016b52 <_svfprintf_r+0xd8a>
 8016670:	231b      	movs	r3, #27
 8016672:	aa1e      	add	r2, sp, #120	; 0x78
 8016674:	189b      	adds	r3, r3, r2
 8016676:	222d      	movs	r2, #45	; 0x2d
 8016678:	701a      	strb	r2, [r3, #0]
 801667a:	2300      	movs	r3, #0
 801667c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801667e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016680:	e539      	b.n	80160f6 <_svfprintf_r+0x32e>
 8016682:	7018      	strb	r0, [r3, #0]
 8016684:	e779      	b.n	801657a <_svfprintf_r+0x7b2>
 8016686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016688:	2b46      	cmp	r3, #70	; 0x46
 801668a:	d01b      	beq.n	80166c4 <_svfprintf_r+0x8fc>
 801668c:	9d08      	ldr	r5, [sp, #32]
 801668e:	2b45      	cmp	r3, #69	; 0x45
 8016690:	d101      	bne.n	8016696 <_svfprintf_r+0x8ce>
 8016692:	9b08      	ldr	r3, [sp, #32]
 8016694:	1c5d      	adds	r5, r3, #1
 8016696:	2302      	movs	r3, #2
 8016698:	e016      	b.n	80166c8 <_svfprintf_r+0x900>
 801669a:	46c0      	nop			; (mov r8, r8)
 801669c:	7fefffff 	.word	0x7fefffff
 80166a0:	0801ca74 	.word	0x0801ca74
 80166a4:	0801ca70 	.word	0x0801ca70
 80166a8:	0801ca7c 	.word	0x0801ca7c
 80166ac:	0801ca78 	.word	0x0801ca78
 80166b0:	0801ca91 	.word	0x0801ca91
 80166b4:	0801ca80 	.word	0x0801ca80
 80166b8:	40300000 	.word	0x40300000
 80166bc:	3fe00000 	.word	0x3fe00000
 80166c0:	fffffbff 	.word	0xfffffbff
 80166c4:	2303      	movs	r3, #3
 80166c6:	9d08      	ldr	r5, [sp, #32]
 80166c8:	aa2a      	add	r2, sp, #168	; 0xa8
 80166ca:	9204      	str	r2, [sp, #16]
 80166cc:	aa27      	add	r2, sp, #156	; 0x9c
 80166ce:	9203      	str	r2, [sp, #12]
 80166d0:	aa26      	add	r2, sp, #152	; 0x98
 80166d2:	9202      	str	r2, [sp, #8]
 80166d4:	9300      	str	r3, [sp, #0]
 80166d6:	9501      	str	r5, [sp, #4]
 80166d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166da:	0022      	movs	r2, r4
 80166dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80166de:	f000 fe79 	bl	80173d4 <_dtoa_r>
 80166e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80166e4:	9009      	str	r0, [sp, #36]	; 0x24
 80166e6:	2b47      	cmp	r3, #71	; 0x47
 80166e8:	d101      	bne.n	80166ee <_svfprintf_r+0x926>
 80166ea:	07f3      	lsls	r3, r6, #31
 80166ec:	d524      	bpl.n	8016738 <_svfprintf_r+0x970>
 80166ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166f0:	195b      	adds	r3, r3, r5
 80166f2:	9310      	str	r3, [sp, #64]	; 0x40
 80166f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80166f6:	2b46      	cmp	r3, #70	; 0x46
 80166f8:	d113      	bne.n	8016722 <_svfprintf_r+0x95a>
 80166fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166fc:	781b      	ldrb	r3, [r3, #0]
 80166fe:	2b30      	cmp	r3, #48	; 0x30
 8016700:	d10a      	bne.n	8016718 <_svfprintf_r+0x950>
 8016702:	2200      	movs	r2, #0
 8016704:	2300      	movs	r3, #0
 8016706:	0020      	movs	r0, r4
 8016708:	990d      	ldr	r1, [sp, #52]	; 0x34
 801670a:	f7e9 fea7 	bl	800045c <__aeabi_dcmpeq>
 801670e:	2800      	cmp	r0, #0
 8016710:	d102      	bne.n	8016718 <_svfprintf_r+0x950>
 8016712:	2301      	movs	r3, #1
 8016714:	1b5d      	subs	r5, r3, r5
 8016716:	9526      	str	r5, [sp, #152]	; 0x98
 8016718:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801671a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801671c:	4694      	mov	ip, r2
 801671e:	4463      	add	r3, ip
 8016720:	9310      	str	r3, [sp, #64]	; 0x40
 8016722:	2200      	movs	r2, #0
 8016724:	2300      	movs	r3, #0
 8016726:	0020      	movs	r0, r4
 8016728:	990d      	ldr	r1, [sp, #52]	; 0x34
 801672a:	f7e9 fe97 	bl	800045c <__aeabi_dcmpeq>
 801672e:	2230      	movs	r2, #48	; 0x30
 8016730:	2800      	cmp	r0, #0
 8016732:	d006      	beq.n	8016742 <_svfprintf_r+0x97a>
 8016734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016736:	932a      	str	r3, [sp, #168]	; 0xa8
 8016738:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801673a:	e72c      	b.n	8016596 <_svfprintf_r+0x7ce>
 801673c:	1c59      	adds	r1, r3, #1
 801673e:	912a      	str	r1, [sp, #168]	; 0xa8
 8016740:	701a      	strb	r2, [r3, #0]
 8016742:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016744:	9910      	ldr	r1, [sp, #64]	; 0x40
 8016746:	4299      	cmp	r1, r3
 8016748:	d8f8      	bhi.n	801673c <_svfprintf_r+0x974>
 801674a:	e7f5      	b.n	8016738 <_svfprintf_r+0x970>
 801674c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801674e:	2b46      	cmp	r3, #70	; 0x46
 8016750:	d000      	beq.n	8016754 <_svfprintf_r+0x98c>
 8016752:	e731      	b.n	80165b8 <_svfprintf_r+0x7f0>
 8016754:	9b08      	ldr	r3, [sp, #32]
 8016756:	2d00      	cmp	r5, #0
 8016758:	dd21      	ble.n	801679e <_svfprintf_r+0x9d6>
 801675a:	2b00      	cmp	r3, #0
 801675c:	d101      	bne.n	8016762 <_svfprintf_r+0x99a>
 801675e:	07f3      	lsls	r3, r6, #31
 8016760:	d54a      	bpl.n	80167f8 <_svfprintf_r+0xa30>
 8016762:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016764:	18eb      	adds	r3, r5, r3
 8016766:	9a08      	ldr	r2, [sp, #32]
 8016768:	18d3      	adds	r3, r2, r3
 801676a:	9308      	str	r3, [sp, #32]
 801676c:	2366      	movs	r3, #102	; 0x66
 801676e:	930e      	str	r3, [sp, #56]	; 0x38
 8016770:	e034      	b.n	80167dc <_svfprintf_r+0xa14>
 8016772:	9d08      	ldr	r5, [sp, #32]
 8016774:	e73f      	b.n	80165f6 <_svfprintf_r+0x82e>
 8016776:	782a      	ldrb	r2, [r5, #0]
 8016778:	3501      	adds	r5, #1
 801677a:	701a      	strb	r2, [r3, #0]
 801677c:	3301      	adds	r3, #1
 801677e:	e753      	b.n	8016628 <_svfprintf_r+0x860>
 8016780:	232a      	movs	r3, #42	; 0x2a
 8016782:	aa1e      	add	r2, sp, #120	; 0x78
 8016784:	189b      	adds	r3, r3, r2
 8016786:	2900      	cmp	r1, #0
 8016788:	d105      	bne.n	8016796 <_svfprintf_r+0x9ce>
 801678a:	2230      	movs	r2, #48	; 0x30
 801678c:	ab28      	add	r3, sp, #160	; 0xa0
 801678e:	709a      	strb	r2, [r3, #2]
 8016790:	232b      	movs	r3, #43	; 0x2b
 8016792:	aa1e      	add	r2, sp, #120	; 0x78
 8016794:	189b      	adds	r3, r3, r2
 8016796:	3430      	adds	r4, #48	; 0x30
 8016798:	1c5a      	adds	r2, r3, #1
 801679a:	701c      	strb	r4, [r3, #0]
 801679c:	e748      	b.n	8016630 <_svfprintf_r+0x868>
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d102      	bne.n	80167a8 <_svfprintf_r+0x9e0>
 80167a2:	3301      	adds	r3, #1
 80167a4:	421e      	tst	r6, r3
 80167a6:	d029      	beq.n	80167fc <_svfprintf_r+0xa34>
 80167a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80167aa:	3301      	adds	r3, #1
 80167ac:	e7db      	b.n	8016766 <_svfprintf_r+0x99e>
 80167ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167b0:	42ab      	cmp	r3, r5
 80167b2:	dc06      	bgt.n	80167c2 <_svfprintf_r+0x9fa>
 80167b4:	07f3      	lsls	r3, r6, #31
 80167b6:	d524      	bpl.n	8016802 <_svfprintf_r+0xa3a>
 80167b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80167ba:	18eb      	adds	r3, r5, r3
 80167bc:	9308      	str	r3, [sp, #32]
 80167be:	2367      	movs	r3, #103	; 0x67
 80167c0:	e7d5      	b.n	801676e <_svfprintf_r+0x9a6>
 80167c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80167c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167c6:	4694      	mov	ip, r2
 80167c8:	4463      	add	r3, ip
 80167ca:	9308      	str	r3, [sp, #32]
 80167cc:	2367      	movs	r3, #103	; 0x67
 80167ce:	930e      	str	r3, [sp, #56]	; 0x38
 80167d0:	2d00      	cmp	r5, #0
 80167d2:	dc03      	bgt.n	80167dc <_svfprintf_r+0xa14>
 80167d4:	9b08      	ldr	r3, [sp, #32]
 80167d6:	1b5b      	subs	r3, r3, r5
 80167d8:	3301      	adds	r3, #1
 80167da:	9308      	str	r3, [sp, #32]
 80167dc:	2380      	movs	r3, #128	; 0x80
 80167de:	00db      	lsls	r3, r3, #3
 80167e0:	401e      	ands	r6, r3
 80167e2:	2300      	movs	r3, #0
 80167e4:	960f      	str	r6, [sp, #60]	; 0x3c
 80167e6:	9310      	str	r3, [sp, #64]	; 0x40
 80167e8:	2e00      	cmp	r6, #0
 80167ea:	d100      	bne.n	80167ee <_svfprintf_r+0xa26>
 80167ec:	e73c      	b.n	8016668 <_svfprintf_r+0x8a0>
 80167ee:	2d00      	cmp	r5, #0
 80167f0:	dc27      	bgt.n	8016842 <_svfprintf_r+0xa7a>
 80167f2:	2300      	movs	r3, #0
 80167f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80167f6:	e737      	b.n	8016668 <_svfprintf_r+0x8a0>
 80167f8:	9508      	str	r5, [sp, #32]
 80167fa:	e7b7      	b.n	801676c <_svfprintf_r+0x9a4>
 80167fc:	2266      	movs	r2, #102	; 0x66
 80167fe:	920e      	str	r2, [sp, #56]	; 0x38
 8016800:	e7eb      	b.n	80167da <_svfprintf_r+0xa12>
 8016802:	9508      	str	r5, [sp, #32]
 8016804:	e7db      	b.n	80167be <_svfprintf_r+0x9f6>
 8016806:	42ab      	cmp	r3, r5
 8016808:	da0e      	bge.n	8016828 <_svfprintf_r+0xa60>
 801680a:	1aed      	subs	r5, r5, r3
 801680c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801680e:	785b      	ldrb	r3, [r3, #1]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d012      	beq.n	801683a <_svfprintf_r+0xa72>
 8016814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016816:	3301      	adds	r3, #1
 8016818:	930f      	str	r3, [sp, #60]	; 0x3c
 801681a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801681c:	3301      	adds	r3, #1
 801681e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016820:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016822:	781b      	ldrb	r3, [r3, #0]
 8016824:	2bff      	cmp	r3, #255	; 0xff
 8016826:	d1ee      	bne.n	8016806 <_svfprintf_r+0xa3e>
 8016828:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801682a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801682c:	189b      	adds	r3, r3, r2
 801682e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016830:	4353      	muls	r3, r2
 8016832:	9a08      	ldr	r2, [sp, #32]
 8016834:	189b      	adds	r3, r3, r2
 8016836:	9308      	str	r3, [sp, #32]
 8016838:	e716      	b.n	8016668 <_svfprintf_r+0x8a0>
 801683a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801683c:	3301      	adds	r3, #1
 801683e:	9310      	str	r3, [sp, #64]	; 0x40
 8016840:	e7ee      	b.n	8016820 <_svfprintf_r+0xa58>
 8016842:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016844:	930f      	str	r3, [sp, #60]	; 0x3c
 8016846:	e7eb      	b.n	8016820 <_svfprintf_r+0xa58>
 8016848:	0022      	movs	r2, r4
 801684a:	ca08      	ldmia	r2!, {r3}
 801684c:	9212      	str	r2, [sp, #72]	; 0x48
 801684e:	06b2      	lsls	r2, r6, #26
 8016850:	d508      	bpl.n	8016864 <_svfprintf_r+0xa9c>
 8016852:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016854:	601a      	str	r2, [r3, #0]
 8016856:	17d2      	asrs	r2, r2, #31
 8016858:	605a      	str	r2, [r3, #4]
 801685a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801685c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801685e:	9309      	str	r3, [sp, #36]	; 0x24
 8016860:	f7ff faeb 	bl	8015e3a <_svfprintf_r+0x72>
 8016864:	06f2      	lsls	r2, r6, #27
 8016866:	d502      	bpl.n	801686e <_svfprintf_r+0xaa6>
 8016868:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801686a:	601a      	str	r2, [r3, #0]
 801686c:	e7f5      	b.n	801685a <_svfprintf_r+0xa92>
 801686e:	0672      	lsls	r2, r6, #25
 8016870:	d502      	bpl.n	8016878 <_svfprintf_r+0xab0>
 8016872:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016874:	801a      	strh	r2, [r3, #0]
 8016876:	e7f0      	b.n	801685a <_svfprintf_r+0xa92>
 8016878:	05b2      	lsls	r2, r6, #22
 801687a:	d5f5      	bpl.n	8016868 <_svfprintf_r+0xaa0>
 801687c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801687e:	701a      	strb	r2, [r3, #0]
 8016880:	e7eb      	b.n	801685a <_svfprintf_r+0xa92>
 8016882:	2310      	movs	r3, #16
 8016884:	431e      	orrs	r6, r3
 8016886:	2220      	movs	r2, #32
 8016888:	4032      	ands	r2, r6
 801688a:	d025      	beq.n	80168d8 <_svfprintf_r+0xb10>
 801688c:	2307      	movs	r3, #7
 801688e:	3407      	adds	r4, #7
 8016890:	439c      	bics	r4, r3
 8016892:	0023      	movs	r3, r4
 8016894:	3308      	adds	r3, #8
 8016896:	9312      	str	r3, [sp, #72]	; 0x48
 8016898:	6823      	ldr	r3, [r4, #0]
 801689a:	6864      	ldr	r4, [r4, #4]
 801689c:	9306      	str	r3, [sp, #24]
 801689e:	9407      	str	r4, [sp, #28]
 80168a0:	4bc2      	ldr	r3, [pc, #776]	; (8016bac <_svfprintf_r+0xde4>)
 80168a2:	401e      	ands	r6, r3
 80168a4:	2300      	movs	r3, #0
 80168a6:	221b      	movs	r2, #27
 80168a8:	a91e      	add	r1, sp, #120	; 0x78
 80168aa:	1852      	adds	r2, r2, r1
 80168ac:	2100      	movs	r1, #0
 80168ae:	7011      	strb	r1, [r2, #0]
 80168b0:	9a08      	ldr	r2, [sp, #32]
 80168b2:	3201      	adds	r2, #1
 80168b4:	d100      	bne.n	80168b8 <_svfprintf_r+0xaf0>
 80168b6:	e0a6      	b.n	8016a06 <_svfprintf_r+0xc3e>
 80168b8:	0032      	movs	r2, r6
 80168ba:	2180      	movs	r1, #128	; 0x80
 80168bc:	9807      	ldr	r0, [sp, #28]
 80168be:	438e      	bics	r6, r1
 80168c0:	9906      	ldr	r1, [sp, #24]
 80168c2:	4301      	orrs	r1, r0
 80168c4:	d000      	beq.n	80168c8 <_svfprintf_r+0xb00>
 80168c6:	e09e      	b.n	8016a06 <_svfprintf_r+0xc3e>
 80168c8:	9908      	ldr	r1, [sp, #32]
 80168ca:	2900      	cmp	r1, #0
 80168cc:	d100      	bne.n	80168d0 <_svfprintf_r+0xb08>
 80168ce:	e125      	b.n	8016b1c <_svfprintf_r+0xd54>
 80168d0:	2b01      	cmp	r3, #1
 80168d2:	d000      	beq.n	80168d6 <_svfprintf_r+0xb0e>
 80168d4:	e09a      	b.n	8016a0c <_svfprintf_r+0xc44>
 80168d6:	e518      	b.n	801630a <_svfprintf_r+0x542>
 80168d8:	1d23      	adds	r3, r4, #4
 80168da:	9312      	str	r3, [sp, #72]	; 0x48
 80168dc:	2310      	movs	r3, #16
 80168de:	4033      	ands	r3, r6
 80168e0:	d003      	beq.n	80168ea <_svfprintf_r+0xb22>
 80168e2:	6823      	ldr	r3, [r4, #0]
 80168e4:	9306      	str	r3, [sp, #24]
 80168e6:	9207      	str	r2, [sp, #28]
 80168e8:	e7da      	b.n	80168a0 <_svfprintf_r+0xad8>
 80168ea:	2240      	movs	r2, #64	; 0x40
 80168ec:	4032      	ands	r2, r6
 80168ee:	d004      	beq.n	80168fa <_svfprintf_r+0xb32>
 80168f0:	6822      	ldr	r2, [r4, #0]
 80168f2:	b292      	uxth	r2, r2
 80168f4:	9206      	str	r2, [sp, #24]
 80168f6:	9307      	str	r3, [sp, #28]
 80168f8:	e7d2      	b.n	80168a0 <_svfprintf_r+0xad8>
 80168fa:	2380      	movs	r3, #128	; 0x80
 80168fc:	009b      	lsls	r3, r3, #2
 80168fe:	4033      	ands	r3, r6
 8016900:	d002      	beq.n	8016908 <_svfprintf_r+0xb40>
 8016902:	6823      	ldr	r3, [r4, #0]
 8016904:	b2db      	uxtb	r3, r3
 8016906:	e7ed      	b.n	80168e4 <_svfprintf_r+0xb1c>
 8016908:	6822      	ldr	r2, [r4, #0]
 801690a:	e7f3      	b.n	80168f4 <_svfprintf_r+0xb2c>
 801690c:	1d23      	adds	r3, r4, #4
 801690e:	49a8      	ldr	r1, [pc, #672]	; (8016bb0 <_svfprintf_r+0xde8>)
 8016910:	aa25      	add	r2, sp, #148	; 0x94
 8016912:	9312      	str	r3, [sp, #72]	; 0x48
 8016914:	6823      	ldr	r3, [r4, #0]
 8016916:	8011      	strh	r1, [r2, #0]
 8016918:	4aa6      	ldr	r2, [pc, #664]	; (8016bb4 <_svfprintf_r+0xdec>)
 801691a:	9306      	str	r3, [sp, #24]
 801691c:	2300      	movs	r3, #0
 801691e:	921e      	str	r2, [sp, #120]	; 0x78
 8016920:	2278      	movs	r2, #120	; 0x78
 8016922:	9307      	str	r3, [sp, #28]
 8016924:	3302      	adds	r3, #2
 8016926:	431e      	orrs	r6, r3
 8016928:	920e      	str	r2, [sp, #56]	; 0x38
 801692a:	e7bc      	b.n	80168a6 <_svfprintf_r+0xade>
 801692c:	1d23      	adds	r3, r4, #4
 801692e:	9312      	str	r3, [sp, #72]	; 0x48
 8016930:	6823      	ldr	r3, [r4, #0]
 8016932:	2400      	movs	r4, #0
 8016934:	9309      	str	r3, [sp, #36]	; 0x24
 8016936:	231b      	movs	r3, #27
 8016938:	aa1e      	add	r2, sp, #120	; 0x78
 801693a:	189b      	adds	r3, r3, r2
 801693c:	701c      	strb	r4, [r3, #0]
 801693e:	9b08      	ldr	r3, [sp, #32]
 8016940:	3301      	adds	r3, #1
 8016942:	d00e      	beq.n	8016962 <_svfprintf_r+0xb9a>
 8016944:	9a08      	ldr	r2, [sp, #32]
 8016946:	0021      	movs	r1, r4
 8016948:	9809      	ldr	r0, [sp, #36]	; 0x24
 801694a:	f001 ff79 	bl	8018840 <memchr>
 801694e:	900c      	str	r0, [sp, #48]	; 0x30
 8016950:	42a0      	cmp	r0, r4
 8016952:	d100      	bne.n	8016956 <_svfprintf_r+0xb8e>
 8016954:	e100      	b.n	8016b58 <_svfprintf_r+0xd90>
 8016956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016958:	1a83      	subs	r3, r0, r2
 801695a:	9308      	str	r3, [sp, #32]
 801695c:	940c      	str	r4, [sp, #48]	; 0x30
 801695e:	0023      	movs	r3, r4
 8016960:	e527      	b.n	80163b2 <_svfprintf_r+0x5ea>
 8016962:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016964:	f7e9 fbd8 	bl	8000118 <strlen>
 8016968:	9008      	str	r0, [sp, #32]
 801696a:	e7f7      	b.n	801695c <_svfprintf_r+0xb94>
 801696c:	2310      	movs	r3, #16
 801696e:	431e      	orrs	r6, r3
 8016970:	2220      	movs	r2, #32
 8016972:	4032      	ands	r2, r6
 8016974:	d00b      	beq.n	801698e <_svfprintf_r+0xbc6>
 8016976:	2307      	movs	r3, #7
 8016978:	3407      	adds	r4, #7
 801697a:	439c      	bics	r4, r3
 801697c:	0023      	movs	r3, r4
 801697e:	3308      	adds	r3, #8
 8016980:	9312      	str	r3, [sp, #72]	; 0x48
 8016982:	6823      	ldr	r3, [r4, #0]
 8016984:	6864      	ldr	r4, [r4, #4]
 8016986:	9306      	str	r3, [sp, #24]
 8016988:	9407      	str	r4, [sp, #28]
 801698a:	2301      	movs	r3, #1
 801698c:	e78b      	b.n	80168a6 <_svfprintf_r+0xade>
 801698e:	1d23      	adds	r3, r4, #4
 8016990:	9312      	str	r3, [sp, #72]	; 0x48
 8016992:	2310      	movs	r3, #16
 8016994:	4033      	ands	r3, r6
 8016996:	d003      	beq.n	80169a0 <_svfprintf_r+0xbd8>
 8016998:	6823      	ldr	r3, [r4, #0]
 801699a:	9306      	str	r3, [sp, #24]
 801699c:	9207      	str	r2, [sp, #28]
 801699e:	e7f4      	b.n	801698a <_svfprintf_r+0xbc2>
 80169a0:	2240      	movs	r2, #64	; 0x40
 80169a2:	4032      	ands	r2, r6
 80169a4:	d004      	beq.n	80169b0 <_svfprintf_r+0xbe8>
 80169a6:	6822      	ldr	r2, [r4, #0]
 80169a8:	b292      	uxth	r2, r2
 80169aa:	9206      	str	r2, [sp, #24]
 80169ac:	9307      	str	r3, [sp, #28]
 80169ae:	e7ec      	b.n	801698a <_svfprintf_r+0xbc2>
 80169b0:	2380      	movs	r3, #128	; 0x80
 80169b2:	009b      	lsls	r3, r3, #2
 80169b4:	4033      	ands	r3, r6
 80169b6:	d002      	beq.n	80169be <_svfprintf_r+0xbf6>
 80169b8:	6823      	ldr	r3, [r4, #0]
 80169ba:	b2db      	uxtb	r3, r3
 80169bc:	e7ed      	b.n	801699a <_svfprintf_r+0xbd2>
 80169be:	6822      	ldr	r2, [r4, #0]
 80169c0:	e7f3      	b.n	80169aa <_svfprintf_r+0xbe2>
 80169c2:	4b7c      	ldr	r3, [pc, #496]	; (8016bb4 <_svfprintf_r+0xdec>)
 80169c4:	f7ff fad9 	bl	8015f7a <_svfprintf_r+0x1b2>
 80169c8:	1d23      	adds	r3, r4, #4
 80169ca:	9312      	str	r3, [sp, #72]	; 0x48
 80169cc:	2310      	movs	r3, #16
 80169ce:	4033      	ands	r3, r6
 80169d0:	d004      	beq.n	80169dc <_svfprintf_r+0xc14>
 80169d2:	6823      	ldr	r3, [r4, #0]
 80169d4:	9306      	str	r3, [sp, #24]
 80169d6:	9207      	str	r2, [sp, #28]
 80169d8:	f7ff fadf 	bl	8015f9a <_svfprintf_r+0x1d2>
 80169dc:	2240      	movs	r2, #64	; 0x40
 80169de:	4032      	ands	r2, r6
 80169e0:	d005      	beq.n	80169ee <_svfprintf_r+0xc26>
 80169e2:	6822      	ldr	r2, [r4, #0]
 80169e4:	b292      	uxth	r2, r2
 80169e6:	9206      	str	r2, [sp, #24]
 80169e8:	9307      	str	r3, [sp, #28]
 80169ea:	f7ff fad6 	bl	8015f9a <_svfprintf_r+0x1d2>
 80169ee:	2380      	movs	r3, #128	; 0x80
 80169f0:	009b      	lsls	r3, r3, #2
 80169f2:	4033      	ands	r3, r6
 80169f4:	d002      	beq.n	80169fc <_svfprintf_r+0xc34>
 80169f6:	6823      	ldr	r3, [r4, #0]
 80169f8:	b2db      	uxtb	r3, r3
 80169fa:	e7eb      	b.n	80169d4 <_svfprintf_r+0xc0c>
 80169fc:	6822      	ldr	r2, [r4, #0]
 80169fe:	e7f2      	b.n	80169e6 <_svfprintf_r+0xc1e>
 8016a00:	0032      	movs	r2, r6
 8016a02:	2301      	movs	r3, #1
 8016a04:	e759      	b.n	80168ba <_svfprintf_r+0xaf2>
 8016a06:	2b01      	cmp	r3, #1
 8016a08:	d100      	bne.n	8016a0c <_svfprintf_r+0xc44>
 8016a0a:	e476      	b.n	80162fa <_svfprintf_r+0x532>
 8016a0c:	2b02      	cmp	r3, #2
 8016a0e:	d06b      	beq.n	8016ae8 <_svfprintf_r+0xd20>
 8016a10:	2507      	movs	r5, #7
 8016a12:	ab58      	add	r3, sp, #352	; 0x160
 8016a14:	1e5a      	subs	r2, r3, #1
 8016a16:	9209      	str	r2, [sp, #36]	; 0x24
 8016a18:	9a06      	ldr	r2, [sp, #24]
 8016a1a:	1e59      	subs	r1, r3, #1
 8016a1c:	402a      	ands	r2, r5
 8016a1e:	3230      	adds	r2, #48	; 0x30
 8016a20:	700a      	strb	r2, [r1, #0]
 8016a22:	9907      	ldr	r1, [sp, #28]
 8016a24:	074c      	lsls	r4, r1, #29
 8016a26:	9906      	ldr	r1, [sp, #24]
 8016a28:	08c8      	lsrs	r0, r1, #3
 8016a2a:	9907      	ldr	r1, [sp, #28]
 8016a2c:	4304      	orrs	r4, r0
 8016a2e:	08c9      	lsrs	r1, r1, #3
 8016a30:	9107      	str	r1, [sp, #28]
 8016a32:	0021      	movs	r1, r4
 8016a34:	9807      	ldr	r0, [sp, #28]
 8016a36:	9406      	str	r4, [sp, #24]
 8016a38:	4301      	orrs	r1, r0
 8016a3a:	d111      	bne.n	8016a60 <_svfprintf_r+0xc98>
 8016a3c:	07f1      	lsls	r1, r6, #31
 8016a3e:	d502      	bpl.n	8016a46 <_svfprintf_r+0xc7e>
 8016a40:	3b02      	subs	r3, #2
 8016a42:	2a30      	cmp	r2, #48	; 0x30
 8016a44:	d173      	bne.n	8016b2e <_svfprintf_r+0xd66>
 8016a46:	9b08      	ldr	r3, [sp, #32]
 8016a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a4a:	9317      	str	r3, [sp, #92]	; 0x5c
 8016a4c:	ab58      	add	r3, sp, #352	; 0x160
 8016a4e:	1a9b      	subs	r3, r3, r2
 8016a50:	9308      	str	r3, [sp, #32]
 8016a52:	2300      	movs	r3, #0
 8016a54:	930c      	str	r3, [sp, #48]	; 0x30
 8016a56:	9310      	str	r3, [sp, #64]	; 0x40
 8016a58:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a5a:	001d      	movs	r5, r3
 8016a5c:	f7ff fb4b 	bl	80160f6 <_svfprintf_r+0x32e>
 8016a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a62:	e7d7      	b.n	8016a14 <_svfprintf_r+0xc4c>
 8016a64:	2480      	movs	r4, #128	; 0x80
 8016a66:	2300      	movs	r3, #0
 8016a68:	00e4      	lsls	r4, r4, #3
 8016a6a:	930d      	str	r3, [sp, #52]	; 0x34
 8016a6c:	4034      	ands	r4, r6
 8016a6e:	ab58      	add	r3, sp, #352	; 0x160
 8016a70:	3b01      	subs	r3, #1
 8016a72:	9309      	str	r3, [sp, #36]	; 0x24
 8016a74:	220a      	movs	r2, #10
 8016a76:	9806      	ldr	r0, [sp, #24]
 8016a78:	9907      	ldr	r1, [sp, #28]
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	f7e9 fd56 	bl	800052c <__aeabi_uldivmod>
 8016a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a82:	3230      	adds	r2, #48	; 0x30
 8016a84:	701a      	strb	r2, [r3, #0]
 8016a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a88:	3301      	adds	r3, #1
 8016a8a:	930d      	str	r3, [sp, #52]	; 0x34
 8016a8c:	2c00      	cmp	r4, #0
 8016a8e:	d01d      	beq.n	8016acc <_svfprintf_r+0xd04>
 8016a90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016a94:	781b      	ldrb	r3, [r3, #0]
 8016a96:	429a      	cmp	r2, r3
 8016a98:	d118      	bne.n	8016acc <_svfprintf_r+0xd04>
 8016a9a:	2aff      	cmp	r2, #255	; 0xff
 8016a9c:	d016      	beq.n	8016acc <_svfprintf_r+0xd04>
 8016a9e:	9b07      	ldr	r3, [sp, #28]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d102      	bne.n	8016aaa <_svfprintf_r+0xce2>
 8016aa4:	9b06      	ldr	r3, [sp, #24]
 8016aa6:	2b09      	cmp	r3, #9
 8016aa8:	d910      	bls.n	8016acc <_svfprintf_r+0xd04>
 8016aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016aac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016aae:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8016ab0:	1a9b      	subs	r3, r3, r2
 8016ab2:	0018      	movs	r0, r3
 8016ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8016ab6:	f7fe fa52 	bl	8014f5e <strncpy>
 8016aba:	2200      	movs	r2, #0
 8016abc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016abe:	920d      	str	r2, [sp, #52]	; 0x34
 8016ac0:	785b      	ldrb	r3, [r3, #1]
 8016ac2:	1e5a      	subs	r2, r3, #1
 8016ac4:	4193      	sbcs	r3, r2
 8016ac6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016ac8:	18d3      	adds	r3, r2, r3
 8016aca:	9313      	str	r3, [sp, #76]	; 0x4c
 8016acc:	220a      	movs	r2, #10
 8016ace:	9806      	ldr	r0, [sp, #24]
 8016ad0:	9907      	ldr	r1, [sp, #28]
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	f7e9 fd2a 	bl	800052c <__aeabi_uldivmod>
 8016ad8:	9006      	str	r0, [sp, #24]
 8016ada:	9107      	str	r1, [sp, #28]
 8016adc:	9b06      	ldr	r3, [sp, #24]
 8016ade:	9a07      	ldr	r2, [sp, #28]
 8016ae0:	4313      	orrs	r3, r2
 8016ae2:	d0b0      	beq.n	8016a46 <_svfprintf_r+0xc7e>
 8016ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ae6:	e7c3      	b.n	8016a70 <_svfprintf_r+0xca8>
 8016ae8:	200f      	movs	r0, #15
 8016aea:	ab58      	add	r3, sp, #352	; 0x160
 8016aec:	9309      	str	r3, [sp, #36]	; 0x24
 8016aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016af0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016af2:	3b01      	subs	r3, #1
 8016af4:	9309      	str	r3, [sp, #36]	; 0x24
 8016af6:	9b06      	ldr	r3, [sp, #24]
 8016af8:	4003      	ands	r3, r0
 8016afa:	5cd3      	ldrb	r3, [r2, r3]
 8016afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016afe:	7013      	strb	r3, [r2, #0]
 8016b00:	9b07      	ldr	r3, [sp, #28]
 8016b02:	0719      	lsls	r1, r3, #28
 8016b04:	9b06      	ldr	r3, [sp, #24]
 8016b06:	091a      	lsrs	r2, r3, #4
 8016b08:	9b07      	ldr	r3, [sp, #28]
 8016b0a:	4311      	orrs	r1, r2
 8016b0c:	091b      	lsrs	r3, r3, #4
 8016b0e:	9307      	str	r3, [sp, #28]
 8016b10:	000b      	movs	r3, r1
 8016b12:	9a07      	ldr	r2, [sp, #28]
 8016b14:	9106      	str	r1, [sp, #24]
 8016b16:	4313      	orrs	r3, r2
 8016b18:	d1e9      	bne.n	8016aee <_svfprintf_r+0xd26>
 8016b1a:	e794      	b.n	8016a46 <_svfprintf_r+0xc7e>
 8016b1c:	a958      	add	r1, sp, #352	; 0x160
 8016b1e:	9109      	str	r1, [sp, #36]	; 0x24
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d190      	bne.n	8016a46 <_svfprintf_r+0xc7e>
 8016b24:	07d3      	lsls	r3, r2, #31
 8016b26:	d58e      	bpl.n	8016a46 <_svfprintf_r+0xc7e>
 8016b28:	23e7      	movs	r3, #231	; 0xe7
 8016b2a:	aa1e      	add	r2, sp, #120	; 0x78
 8016b2c:	189b      	adds	r3, r3, r2
 8016b2e:	2230      	movs	r2, #48	; 0x30
 8016b30:	f7ff fbf0 	bl	8016314 <_svfprintf_r+0x54c>
 8016b34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d100      	bne.n	8016b3c <_svfprintf_r+0xd74>
 8016b3a:	e38a      	b.n	8017252 <_svfprintf_r+0x148a>
 8016b3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016b3e:	ab3f      	add	r3, sp, #252	; 0xfc
 8016b40:	701a      	strb	r2, [r3, #0]
 8016b42:	221b      	movs	r2, #27
 8016b44:	2000      	movs	r0, #0
 8016b46:	a91e      	add	r1, sp, #120	; 0x78
 8016b48:	1852      	adds	r2, r2, r1
 8016b4a:	7010      	strb	r0, [r2, #0]
 8016b4c:	9412      	str	r4, [sp, #72]	; 0x48
 8016b4e:	f7ff faca 	bl	80160e6 <_svfprintf_r+0x31e>
 8016b52:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016b54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016b56:	e592      	b.n	801667e <_svfprintf_r+0x8b6>
 8016b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b5a:	e42a      	b.n	80163b2 <_svfprintf_r+0x5ea>
 8016b5c:	2010      	movs	r0, #16
 8016b5e:	1812      	adds	r2, r2, r0
 8016b60:	6078      	str	r0, [r7, #4]
 8016b62:	922e      	str	r2, [sp, #184]	; 0xb8
 8016b64:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b66:	2b07      	cmp	r3, #7
 8016b68:	dd08      	ble.n	8016b7c <_svfprintf_r+0xdb4>
 8016b6a:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b70:	f002 fa7e 	bl	8019070 <__ssprint_r>
 8016b74:	2800      	cmp	r0, #0
 8016b76:	d000      	beq.n	8016b7a <_svfprintf_r+0xdb2>
 8016b78:	e34a      	b.n	8017210 <_svfprintf_r+0x1448>
 8016b7a:	a92f      	add	r1, sp, #188	; 0xbc
 8016b7c:	3c10      	subs	r4, #16
 8016b7e:	000f      	movs	r7, r1
 8016b80:	f7ff fad8 	bl	8016134 <_svfprintf_r+0x36c>
 8016b84:	2010      	movs	r0, #16
 8016b86:	1812      	adds	r2, r2, r0
 8016b88:	6078      	str	r0, [r7, #4]
 8016b8a:	922e      	str	r2, [sp, #184]	; 0xb8
 8016b8c:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b8e:	2b07      	cmp	r3, #7
 8016b90:	dd08      	ble.n	8016ba4 <_svfprintf_r+0xddc>
 8016b92:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b98:	f002 fa6a 	bl	8019070 <__ssprint_r>
 8016b9c:	2800      	cmp	r0, #0
 8016b9e:	d000      	beq.n	8016ba2 <_svfprintf_r+0xdda>
 8016ba0:	e336      	b.n	8017210 <_svfprintf_r+0x1448>
 8016ba2:	a92f      	add	r1, sp, #188	; 0xbc
 8016ba4:	3c10      	subs	r4, #16
 8016ba6:	000f      	movs	r7, r1
 8016ba8:	f7ff fb24 	bl	80161f4 <_svfprintf_r+0x42c>
 8016bac:	fffffbff 	.word	0xfffffbff
 8016bb0:	00007830 	.word	0x00007830
 8016bb4:	0801ca80 	.word	0x0801ca80
 8016bb8:	2010      	movs	r0, #16
 8016bba:	1812      	adds	r2, r2, r0
 8016bbc:	6078      	str	r0, [r7, #4]
 8016bbe:	922e      	str	r2, [sp, #184]	; 0xb8
 8016bc0:	932d      	str	r3, [sp, #180]	; 0xb4
 8016bc2:	2b07      	cmp	r3, #7
 8016bc4:	dd08      	ble.n	8016bd8 <_svfprintf_r+0xe10>
 8016bc6:	aa2c      	add	r2, sp, #176	; 0xb0
 8016bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016bca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016bcc:	f002 fa50 	bl	8019070 <__ssprint_r>
 8016bd0:	2800      	cmp	r0, #0
 8016bd2:	d000      	beq.n	8016bd6 <_svfprintf_r+0xe0e>
 8016bd4:	e31c      	b.n	8017210 <_svfprintf_r+0x1448>
 8016bd6:	a92f      	add	r1, sp, #188	; 0xbc
 8016bd8:	3c10      	subs	r4, #16
 8016bda:	000f      	movs	r7, r1
 8016bdc:	f7ff fb2c 	bl	8016238 <_svfprintf_r+0x470>
 8016be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016be2:	2b65      	cmp	r3, #101	; 0x65
 8016be4:	dc00      	bgt.n	8016be8 <_svfprintf_r+0xe20>
 8016be6:	e259      	b.n	801709c <_svfprintf_r+0x12d4>
 8016be8:	2200      	movs	r2, #0
 8016bea:	2300      	movs	r3, #0
 8016bec:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016bee:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016bf0:	f7e9 fc34 	bl	800045c <__aeabi_dcmpeq>
 8016bf4:	2800      	cmp	r0, #0
 8016bf6:	d07c      	beq.n	8016cf2 <_svfprintf_r+0xf2a>
 8016bf8:	4b81      	ldr	r3, [pc, #516]	; (8016e00 <_svfprintf_r+0x1038>)
 8016bfa:	603b      	str	r3, [r7, #0]
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	607b      	str	r3, [r7, #4]
 8016c00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c02:	3708      	adds	r7, #8
 8016c04:	3301      	adds	r3, #1
 8016c06:	932e      	str	r3, [sp, #184]	; 0xb8
 8016c08:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c0a:	9308      	str	r3, [sp, #32]
 8016c0c:	3301      	adds	r3, #1
 8016c0e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c10:	2b07      	cmp	r3, #7
 8016c12:	dd08      	ble.n	8016c26 <_svfprintf_r+0xe5e>
 8016c14:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c1a:	f002 fa29 	bl	8019070 <__ssprint_r>
 8016c1e:	2800      	cmp	r0, #0
 8016c20:	d000      	beq.n	8016c24 <_svfprintf_r+0xe5c>
 8016c22:	e2f5      	b.n	8017210 <_svfprintf_r+0x1448>
 8016c24:	af2f      	add	r7, sp, #188	; 0xbc
 8016c26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016c28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c2a:	4293      	cmp	r3, r2
 8016c2c:	db01      	blt.n	8016c32 <_svfprintf_r+0xe6a>
 8016c2e:	07f3      	lsls	r3, r6, #31
 8016c30:	d51d      	bpl.n	8016c6e <_svfprintf_r+0xea6>
 8016c32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016c34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016c36:	4694      	mov	ip, r2
 8016c38:	603b      	str	r3, [r7, #0]
 8016c3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c3c:	607b      	str	r3, [r7, #4]
 8016c3e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016c40:	3708      	adds	r7, #8
 8016c42:	4463      	add	r3, ip
 8016c44:	932e      	str	r3, [sp, #184]	; 0xb8
 8016c46:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c48:	9308      	str	r3, [sp, #32]
 8016c4a:	3301      	adds	r3, #1
 8016c4c:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c4e:	2b07      	cmp	r3, #7
 8016c50:	dd08      	ble.n	8016c64 <_svfprintf_r+0xe9c>
 8016c52:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c58:	f002 fa0a 	bl	8019070 <__ssprint_r>
 8016c5c:	2800      	cmp	r0, #0
 8016c5e:	d000      	beq.n	8016c62 <_svfprintf_r+0xe9a>
 8016c60:	e2d6      	b.n	8017210 <_svfprintf_r+0x1448>
 8016c62:	af2f      	add	r7, sp, #188	; 0xbc
 8016c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c66:	2510      	movs	r5, #16
 8016c68:	1e5c      	subs	r4, r3, #1
 8016c6a:	2c00      	cmp	r4, #0
 8016c6c:	dc2f      	bgt.n	8016cce <_svfprintf_r+0xf06>
 8016c6e:	0773      	lsls	r3, r6, #29
 8016c70:	d500      	bpl.n	8016c74 <_svfprintf_r+0xeac>
 8016c72:	e2af      	b.n	80171d4 <_svfprintf_r+0x140c>
 8016c74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016c76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016c78:	4293      	cmp	r3, r2
 8016c7a:	da00      	bge.n	8016c7e <_svfprintf_r+0xeb6>
 8016c7c:	0013      	movs	r3, r2
 8016c7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016c80:	18d3      	adds	r3, r2, r3
 8016c82:	9315      	str	r3, [sp, #84]	; 0x54
 8016c84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016c86:	9308      	str	r3, [sp, #32]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d007      	beq.n	8016c9c <_svfprintf_r+0xed4>
 8016c8c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c92:	f002 f9ed 	bl	8019070 <__ssprint_r>
 8016c96:	2800      	cmp	r0, #0
 8016c98:	d000      	beq.n	8016c9c <_svfprintf_r+0xed4>
 8016c9a:	e2b9      	b.n	8017210 <_svfprintf_r+0x1448>
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016ca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d000      	beq.n	8016ca8 <_svfprintf_r+0xee0>
 8016ca6:	e2cf      	b.n	8017248 <_svfprintf_r+0x1480>
 8016ca8:	af2f      	add	r7, sp, #188	; 0xbc
 8016caa:	e5d6      	b.n	801685a <_svfprintf_r+0xa92>
 8016cac:	3210      	adds	r2, #16
 8016cae:	607d      	str	r5, [r7, #4]
 8016cb0:	922e      	str	r2, [sp, #184]	; 0xb8
 8016cb2:	932d      	str	r3, [sp, #180]	; 0xb4
 8016cb4:	2b07      	cmp	r3, #7
 8016cb6:	dd08      	ble.n	8016cca <_svfprintf_r+0xf02>
 8016cb8:	aa2c      	add	r2, sp, #176	; 0xb0
 8016cba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016cbc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016cbe:	f002 f9d7 	bl	8019070 <__ssprint_r>
 8016cc2:	2800      	cmp	r0, #0
 8016cc4:	d000      	beq.n	8016cc8 <_svfprintf_r+0xf00>
 8016cc6:	e2a3      	b.n	8017210 <_svfprintf_r+0x1448>
 8016cc8:	a92f      	add	r1, sp, #188	; 0xbc
 8016cca:	000f      	movs	r7, r1
 8016ccc:	3c10      	subs	r4, #16
 8016cce:	0039      	movs	r1, r7
 8016cd0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016cd2:	484c      	ldr	r0, [pc, #304]	; (8016e04 <_svfprintf_r+0x103c>)
 8016cd4:	9308      	str	r3, [sp, #32]
 8016cd6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016cd8:	3301      	adds	r3, #1
 8016cda:	3108      	adds	r1, #8
 8016cdc:	6038      	str	r0, [r7, #0]
 8016cde:	2c10      	cmp	r4, #16
 8016ce0:	dce4      	bgt.n	8016cac <_svfprintf_r+0xee4>
 8016ce2:	607c      	str	r4, [r7, #4]
 8016ce4:	18a4      	adds	r4, r4, r2
 8016ce6:	942e      	str	r4, [sp, #184]	; 0xb8
 8016ce8:	932d      	str	r3, [sp, #180]	; 0xb4
 8016cea:	000f      	movs	r7, r1
 8016cec:	2b07      	cmp	r3, #7
 8016cee:	ddbe      	ble.n	8016c6e <_svfprintf_r+0xea6>
 8016cf0:	e06a      	b.n	8016dc8 <_svfprintf_r+0x1000>
 8016cf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	dd00      	ble.n	8016cfa <_svfprintf_r+0xf32>
 8016cf8:	e086      	b.n	8016e08 <_svfprintf_r+0x1040>
 8016cfa:	4b41      	ldr	r3, [pc, #260]	; (8016e00 <_svfprintf_r+0x1038>)
 8016cfc:	603b      	str	r3, [r7, #0]
 8016cfe:	2301      	movs	r3, #1
 8016d00:	607b      	str	r3, [r7, #4]
 8016d02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d04:	3708      	adds	r7, #8
 8016d06:	3301      	adds	r3, #1
 8016d08:	932e      	str	r3, [sp, #184]	; 0xb8
 8016d0a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016d0c:	9308      	str	r3, [sp, #32]
 8016d0e:	3301      	adds	r3, #1
 8016d10:	932d      	str	r3, [sp, #180]	; 0xb4
 8016d12:	2b07      	cmp	r3, #7
 8016d14:	dd08      	ble.n	8016d28 <_svfprintf_r+0xf60>
 8016d16:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d1c:	f002 f9a8 	bl	8019070 <__ssprint_r>
 8016d20:	2800      	cmp	r0, #0
 8016d22:	d000      	beq.n	8016d26 <_svfprintf_r+0xf5e>
 8016d24:	e274      	b.n	8017210 <_svfprintf_r+0x1448>
 8016d26:	af2f      	add	r7, sp, #188	; 0xbc
 8016d28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d104      	bne.n	8016d38 <_svfprintf_r+0xf70>
 8016d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d101      	bne.n	8016d38 <_svfprintf_r+0xf70>
 8016d34:	07f3      	lsls	r3, r6, #31
 8016d36:	d59a      	bpl.n	8016c6e <_svfprintf_r+0xea6>
 8016d38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016d3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016d3c:	4694      	mov	ip, r2
 8016d3e:	603b      	str	r3, [r7, #0]
 8016d40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016d42:	607b      	str	r3, [r7, #4]
 8016d44:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016d46:	3708      	adds	r7, #8
 8016d48:	4463      	add	r3, ip
 8016d4a:	932e      	str	r3, [sp, #184]	; 0xb8
 8016d4c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016d4e:	9308      	str	r3, [sp, #32]
 8016d50:	3301      	adds	r3, #1
 8016d52:	932d      	str	r3, [sp, #180]	; 0xb4
 8016d54:	2b07      	cmp	r3, #7
 8016d56:	dd08      	ble.n	8016d6a <_svfprintf_r+0xfa2>
 8016d58:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d5e:	f002 f987 	bl	8019070 <__ssprint_r>
 8016d62:	2800      	cmp	r0, #0
 8016d64:	d000      	beq.n	8016d68 <_svfprintf_r+0xfa0>
 8016d66:	e253      	b.n	8017210 <_svfprintf_r+0x1448>
 8016d68:	af2f      	add	r7, sp, #188	; 0xbc
 8016d6a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8016d6c:	2c00      	cmp	r4, #0
 8016d6e:	da1a      	bge.n	8016da6 <_svfprintf_r+0xfde>
 8016d70:	0039      	movs	r1, r7
 8016d72:	2510      	movs	r5, #16
 8016d74:	4264      	negs	r4, r4
 8016d76:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016d78:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8016d7a:	9308      	str	r3, [sp, #32]
 8016d7c:	1c5a      	adds	r2, r3, #1
 8016d7e:	4b21      	ldr	r3, [pc, #132]	; (8016e04 <_svfprintf_r+0x103c>)
 8016d80:	3708      	adds	r7, #8
 8016d82:	600b      	str	r3, [r1, #0]
 8016d84:	2c10      	cmp	r4, #16
 8016d86:	dc29      	bgt.n	8016ddc <_svfprintf_r+0x1014>
 8016d88:	604c      	str	r4, [r1, #4]
 8016d8a:	1824      	adds	r4, r4, r0
 8016d8c:	942e      	str	r4, [sp, #184]	; 0xb8
 8016d8e:	922d      	str	r2, [sp, #180]	; 0xb4
 8016d90:	2a07      	cmp	r2, #7
 8016d92:	dd08      	ble.n	8016da6 <_svfprintf_r+0xfde>
 8016d94:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d9a:	f002 f969 	bl	8019070 <__ssprint_r>
 8016d9e:	2800      	cmp	r0, #0
 8016da0:	d000      	beq.n	8016da4 <_svfprintf_r+0xfdc>
 8016da2:	e235      	b.n	8017210 <_svfprintf_r+0x1448>
 8016da4:	af2f      	add	r7, sp, #188	; 0xbc
 8016da6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016daa:	468c      	mov	ip, r1
 8016dac:	603b      	str	r3, [r7, #0]
 8016dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016db0:	607b      	str	r3, [r7, #4]
 8016db2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016db4:	4463      	add	r3, ip
 8016db6:	932e      	str	r3, [sp, #184]	; 0xb8
 8016db8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016dba:	1c5a      	adds	r2, r3, #1
 8016dbc:	9308      	str	r3, [sp, #32]
 8016dbe:	922d      	str	r2, [sp, #180]	; 0xb4
 8016dc0:	2a07      	cmp	r2, #7
 8016dc2:	dc01      	bgt.n	8016dc8 <_svfprintf_r+0x1000>
 8016dc4:	f7ff fa6c 	bl	80162a0 <_svfprintf_r+0x4d8>
 8016dc8:	aa2c      	add	r2, sp, #176	; 0xb0
 8016dca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016dcc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016dce:	f002 f94f 	bl	8019070 <__ssprint_r>
 8016dd2:	2800      	cmp	r0, #0
 8016dd4:	d000      	beq.n	8016dd8 <_svfprintf_r+0x1010>
 8016dd6:	e21b      	b.n	8017210 <_svfprintf_r+0x1448>
 8016dd8:	af2f      	add	r7, sp, #188	; 0xbc
 8016dda:	e748      	b.n	8016c6e <_svfprintf_r+0xea6>
 8016ddc:	3010      	adds	r0, #16
 8016dde:	604d      	str	r5, [r1, #4]
 8016de0:	902e      	str	r0, [sp, #184]	; 0xb8
 8016de2:	922d      	str	r2, [sp, #180]	; 0xb4
 8016de4:	2a07      	cmp	r2, #7
 8016de6:	dd08      	ble.n	8016dfa <_svfprintf_r+0x1032>
 8016de8:	aa2c      	add	r2, sp, #176	; 0xb0
 8016dea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016dec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016dee:	f002 f93f 	bl	8019070 <__ssprint_r>
 8016df2:	2800      	cmp	r0, #0
 8016df4:	d000      	beq.n	8016df8 <_svfprintf_r+0x1030>
 8016df6:	e20b      	b.n	8017210 <_svfprintf_r+0x1448>
 8016df8:	af2f      	add	r7, sp, #188	; 0xbc
 8016dfa:	3c10      	subs	r4, #16
 8016dfc:	0039      	movs	r1, r7
 8016dfe:	e7ba      	b.n	8016d76 <_svfprintf_r+0xfae>
 8016e00:	0801caa2 	.word	0x0801caa2
 8016e04:	0801cab4 	.word	0x0801cab4
 8016e08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e0a:	002c      	movs	r4, r5
 8016e0c:	429d      	cmp	r5, r3
 8016e0e:	dd00      	ble.n	8016e12 <_svfprintf_r+0x104a>
 8016e10:	001c      	movs	r4, r3
 8016e12:	2c00      	cmp	r4, #0
 8016e14:	dd15      	ble.n	8016e42 <_svfprintf_r+0x107a>
 8016e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e18:	607c      	str	r4, [r7, #4]
 8016e1a:	603b      	str	r3, [r7, #0]
 8016e1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e1e:	3708      	adds	r7, #8
 8016e20:	18e3      	adds	r3, r4, r3
 8016e22:	932e      	str	r3, [sp, #184]	; 0xb8
 8016e24:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016e26:	9308      	str	r3, [sp, #32]
 8016e28:	3301      	adds	r3, #1
 8016e2a:	932d      	str	r3, [sp, #180]	; 0xb4
 8016e2c:	2b07      	cmp	r3, #7
 8016e2e:	dd08      	ble.n	8016e42 <_svfprintf_r+0x107a>
 8016e30:	aa2c      	add	r2, sp, #176	; 0xb0
 8016e32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e36:	f002 f91b 	bl	8019070 <__ssprint_r>
 8016e3a:	2800      	cmp	r0, #0
 8016e3c:	d000      	beq.n	8016e40 <_svfprintf_r+0x1078>
 8016e3e:	e1e7      	b.n	8017210 <_svfprintf_r+0x1448>
 8016e40:	af2f      	add	r7, sp, #188	; 0xbc
 8016e42:	43e3      	mvns	r3, r4
 8016e44:	17db      	asrs	r3, r3, #31
 8016e46:	401c      	ands	r4, r3
 8016e48:	1b2c      	subs	r4, r5, r4
 8016e4a:	2c00      	cmp	r4, #0
 8016e4c:	dd1a      	ble.n	8016e84 <_svfprintf_r+0x10bc>
 8016e4e:	0039      	movs	r1, r7
 8016e50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016e52:	48d4      	ldr	r0, [pc, #848]	; (80171a4 <_svfprintf_r+0x13dc>)
 8016e54:	9308      	str	r3, [sp, #32]
 8016e56:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016e58:	3301      	adds	r3, #1
 8016e5a:	3108      	adds	r1, #8
 8016e5c:	6038      	str	r0, [r7, #0]
 8016e5e:	2c10      	cmp	r4, #16
 8016e60:	dd00      	ble.n	8016e64 <_svfprintf_r+0x109c>
 8016e62:	e089      	b.n	8016f78 <_svfprintf_r+0x11b0>
 8016e64:	607c      	str	r4, [r7, #4]
 8016e66:	18a4      	adds	r4, r4, r2
 8016e68:	942e      	str	r4, [sp, #184]	; 0xb8
 8016e6a:	932d      	str	r3, [sp, #180]	; 0xb4
 8016e6c:	000f      	movs	r7, r1
 8016e6e:	2b07      	cmp	r3, #7
 8016e70:	dd08      	ble.n	8016e84 <_svfprintf_r+0x10bc>
 8016e72:	aa2c      	add	r2, sp, #176	; 0xb0
 8016e74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e78:	f002 f8fa 	bl	8019070 <__ssprint_r>
 8016e7c:	2800      	cmp	r0, #0
 8016e7e:	d000      	beq.n	8016e82 <_svfprintf_r+0x10ba>
 8016e80:	e1c6      	b.n	8017210 <_svfprintf_r+0x1448>
 8016e82:	af2f      	add	r7, sp, #188	; 0xbc
 8016e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e86:	195d      	adds	r5, r3, r5
 8016e88:	0573      	lsls	r3, r6, #21
 8016e8a:	d50d      	bpl.n	8016ea8 <_svfprintf_r+0x10e0>
 8016e8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d000      	beq.n	8016e94 <_svfprintf_r+0x10cc>
 8016e92:	e084      	b.n	8016f9e <_svfprintf_r+0x11d6>
 8016e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d000      	beq.n	8016e9c <_svfprintf_r+0x10d4>
 8016e9a:	e083      	b.n	8016fa4 <_svfprintf_r+0x11dc>
 8016e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ea0:	189b      	adds	r3, r3, r2
 8016ea2:	429d      	cmp	r5, r3
 8016ea4:	d900      	bls.n	8016ea8 <_svfprintf_r+0x10e0>
 8016ea6:	001d      	movs	r5, r3
 8016ea8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016eaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016eac:	4293      	cmp	r3, r2
 8016eae:	db01      	blt.n	8016eb4 <_svfprintf_r+0x10ec>
 8016eb0:	07f3      	lsls	r3, r6, #31
 8016eb2:	d518      	bpl.n	8016ee6 <_svfprintf_r+0x111e>
 8016eb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016eb6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016eb8:	4694      	mov	ip, r2
 8016eba:	603b      	str	r3, [r7, #0]
 8016ebc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016ebe:	607b      	str	r3, [r7, #4]
 8016ec0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016ec2:	3708      	adds	r7, #8
 8016ec4:	4463      	add	r3, ip
 8016ec6:	932e      	str	r3, [sp, #184]	; 0xb8
 8016ec8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016eca:	9308      	str	r3, [sp, #32]
 8016ecc:	3301      	adds	r3, #1
 8016ece:	932d      	str	r3, [sp, #180]	; 0xb4
 8016ed0:	2b07      	cmp	r3, #7
 8016ed2:	dd08      	ble.n	8016ee6 <_svfprintf_r+0x111e>
 8016ed4:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ed6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ed8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016eda:	f002 f8c9 	bl	8019070 <__ssprint_r>
 8016ede:	2800      	cmp	r0, #0
 8016ee0:	d000      	beq.n	8016ee4 <_svfprintf_r+0x111c>
 8016ee2:	e195      	b.n	8017210 <_svfprintf_r+0x1448>
 8016ee4:	af2f      	add	r7, sp, #188	; 0xbc
 8016ee6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016eea:	4694      	mov	ip, r2
 8016eec:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016eee:	4463      	add	r3, ip
 8016ef0:	1b5b      	subs	r3, r3, r5
 8016ef2:	1a54      	subs	r4, r2, r1
 8016ef4:	429c      	cmp	r4, r3
 8016ef6:	dd00      	ble.n	8016efa <_svfprintf_r+0x1132>
 8016ef8:	001c      	movs	r4, r3
 8016efa:	2c00      	cmp	r4, #0
 8016efc:	dd14      	ble.n	8016f28 <_svfprintf_r+0x1160>
 8016efe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016f00:	603d      	str	r5, [r7, #0]
 8016f02:	18e3      	adds	r3, r4, r3
 8016f04:	932e      	str	r3, [sp, #184]	; 0xb8
 8016f06:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016f08:	607c      	str	r4, [r7, #4]
 8016f0a:	9308      	str	r3, [sp, #32]
 8016f0c:	3301      	adds	r3, #1
 8016f0e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016f10:	3708      	adds	r7, #8
 8016f12:	2b07      	cmp	r3, #7
 8016f14:	dd08      	ble.n	8016f28 <_svfprintf_r+0x1160>
 8016f16:	aa2c      	add	r2, sp, #176	; 0xb0
 8016f18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016f1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016f1c:	f002 f8a8 	bl	8019070 <__ssprint_r>
 8016f20:	2800      	cmp	r0, #0
 8016f22:	d000      	beq.n	8016f26 <_svfprintf_r+0x115e>
 8016f24:	e174      	b.n	8017210 <_svfprintf_r+0x1448>
 8016f26:	af2f      	add	r7, sp, #188	; 0xbc
 8016f28:	43e3      	mvns	r3, r4
 8016f2a:	17db      	asrs	r3, r3, #31
 8016f2c:	401c      	ands	r4, r3
 8016f2e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f32:	2510      	movs	r5, #16
 8016f34:	1a9b      	subs	r3, r3, r2
 8016f36:	1b1c      	subs	r4, r3, r4
 8016f38:	2c00      	cmp	r4, #0
 8016f3a:	dc00      	bgt.n	8016f3e <_svfprintf_r+0x1176>
 8016f3c:	e697      	b.n	8016c6e <_svfprintf_r+0xea6>
 8016f3e:	0039      	movs	r1, r7
 8016f40:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016f42:	4898      	ldr	r0, [pc, #608]	; (80171a4 <_svfprintf_r+0x13dc>)
 8016f44:	9308      	str	r3, [sp, #32]
 8016f46:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016f48:	3301      	adds	r3, #1
 8016f4a:	3108      	adds	r1, #8
 8016f4c:	6038      	str	r0, [r7, #0]
 8016f4e:	2c10      	cmp	r4, #16
 8016f50:	dc00      	bgt.n	8016f54 <_svfprintf_r+0x118c>
 8016f52:	e6c6      	b.n	8016ce2 <_svfprintf_r+0xf1a>
 8016f54:	3210      	adds	r2, #16
 8016f56:	607d      	str	r5, [r7, #4]
 8016f58:	922e      	str	r2, [sp, #184]	; 0xb8
 8016f5a:	932d      	str	r3, [sp, #180]	; 0xb4
 8016f5c:	2b07      	cmp	r3, #7
 8016f5e:	dd08      	ble.n	8016f72 <_svfprintf_r+0x11aa>
 8016f60:	aa2c      	add	r2, sp, #176	; 0xb0
 8016f62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016f64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016f66:	f002 f883 	bl	8019070 <__ssprint_r>
 8016f6a:	2800      	cmp	r0, #0
 8016f6c:	d000      	beq.n	8016f70 <_svfprintf_r+0x11a8>
 8016f6e:	e14f      	b.n	8017210 <_svfprintf_r+0x1448>
 8016f70:	a92f      	add	r1, sp, #188	; 0xbc
 8016f72:	3c10      	subs	r4, #16
 8016f74:	000f      	movs	r7, r1
 8016f76:	e7e2      	b.n	8016f3e <_svfprintf_r+0x1176>
 8016f78:	2010      	movs	r0, #16
 8016f7a:	1812      	adds	r2, r2, r0
 8016f7c:	6078      	str	r0, [r7, #4]
 8016f7e:	922e      	str	r2, [sp, #184]	; 0xb8
 8016f80:	932d      	str	r3, [sp, #180]	; 0xb4
 8016f82:	2b07      	cmp	r3, #7
 8016f84:	dd08      	ble.n	8016f98 <_svfprintf_r+0x11d0>
 8016f86:	aa2c      	add	r2, sp, #176	; 0xb0
 8016f88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016f8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016f8c:	f002 f870 	bl	8019070 <__ssprint_r>
 8016f90:	2800      	cmp	r0, #0
 8016f92:	d000      	beq.n	8016f96 <_svfprintf_r+0x11ce>
 8016f94:	e13c      	b.n	8017210 <_svfprintf_r+0x1448>
 8016f96:	a92f      	add	r1, sp, #188	; 0xbc
 8016f98:	3c10      	subs	r4, #16
 8016f9a:	000f      	movs	r7, r1
 8016f9c:	e757      	b.n	8016e4e <_svfprintf_r+0x1086>
 8016f9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d061      	beq.n	8017068 <_svfprintf_r+0x12a0>
 8016fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016fa6:	3b01      	subs	r3, #1
 8016fa8:	9310      	str	r3, [sp, #64]	; 0x40
 8016faa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016fac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016fae:	4694      	mov	ip, r2
 8016fb0:	603b      	str	r3, [r7, #0]
 8016fb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fb4:	607b      	str	r3, [r7, #4]
 8016fb6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016fb8:	3708      	adds	r7, #8
 8016fba:	4463      	add	r3, ip
 8016fbc:	932e      	str	r3, [sp, #184]	; 0xb8
 8016fbe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016fc0:	9308      	str	r3, [sp, #32]
 8016fc2:	3301      	adds	r3, #1
 8016fc4:	932d      	str	r3, [sp, #180]	; 0xb4
 8016fc6:	2b07      	cmp	r3, #7
 8016fc8:	dd08      	ble.n	8016fdc <_svfprintf_r+0x1214>
 8016fca:	aa2c      	add	r2, sp, #176	; 0xb0
 8016fcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016fce:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016fd0:	f002 f84e 	bl	8019070 <__ssprint_r>
 8016fd4:	2800      	cmp	r0, #0
 8016fd6:	d000      	beq.n	8016fda <_svfprintf_r+0x1212>
 8016fd8:	e11a      	b.n	8017210 <_svfprintf_r+0x1448>
 8016fda:	af2f      	add	r7, sp, #188	; 0xbc
 8016fdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fe0:	189b      	adds	r3, r3, r2
 8016fe2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016fe4:	1b5b      	subs	r3, r3, r5
 8016fe6:	7814      	ldrb	r4, [r2, #0]
 8016fe8:	429c      	cmp	r4, r3
 8016fea:	dd00      	ble.n	8016fee <_svfprintf_r+0x1226>
 8016fec:	001c      	movs	r4, r3
 8016fee:	2c00      	cmp	r4, #0
 8016ff0:	dd14      	ble.n	801701c <_svfprintf_r+0x1254>
 8016ff2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016ff4:	603d      	str	r5, [r7, #0]
 8016ff6:	18e3      	adds	r3, r4, r3
 8016ff8:	932e      	str	r3, [sp, #184]	; 0xb8
 8016ffa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016ffc:	607c      	str	r4, [r7, #4]
 8016ffe:	9308      	str	r3, [sp, #32]
 8017000:	3301      	adds	r3, #1
 8017002:	932d      	str	r3, [sp, #180]	; 0xb4
 8017004:	3708      	adds	r7, #8
 8017006:	2b07      	cmp	r3, #7
 8017008:	dd08      	ble.n	801701c <_svfprintf_r+0x1254>
 801700a:	aa2c      	add	r2, sp, #176	; 0xb0
 801700c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801700e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017010:	f002 f82e 	bl	8019070 <__ssprint_r>
 8017014:	2800      	cmp	r0, #0
 8017016:	d000      	beq.n	801701a <_svfprintf_r+0x1252>
 8017018:	e0fa      	b.n	8017210 <_svfprintf_r+0x1448>
 801701a:	af2f      	add	r7, sp, #188	; 0xbc
 801701c:	43e3      	mvns	r3, r4
 801701e:	17db      	asrs	r3, r3, #31
 8017020:	401c      	ands	r4, r3
 8017022:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017024:	781b      	ldrb	r3, [r3, #0]
 8017026:	1b1c      	subs	r4, r3, r4
 8017028:	2c00      	cmp	r4, #0
 801702a:	dd19      	ble.n	8017060 <_svfprintf_r+0x1298>
 801702c:	0039      	movs	r1, r7
 801702e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017030:	485c      	ldr	r0, [pc, #368]	; (80171a4 <_svfprintf_r+0x13dc>)
 8017032:	9308      	str	r3, [sp, #32]
 8017034:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017036:	3301      	adds	r3, #1
 8017038:	3108      	adds	r1, #8
 801703a:	6038      	str	r0, [r7, #0]
 801703c:	2c10      	cmp	r4, #16
 801703e:	dc1a      	bgt.n	8017076 <_svfprintf_r+0x12ae>
 8017040:	607c      	str	r4, [r7, #4]
 8017042:	18a4      	adds	r4, r4, r2
 8017044:	942e      	str	r4, [sp, #184]	; 0xb8
 8017046:	932d      	str	r3, [sp, #180]	; 0xb4
 8017048:	000f      	movs	r7, r1
 801704a:	2b07      	cmp	r3, #7
 801704c:	dd08      	ble.n	8017060 <_svfprintf_r+0x1298>
 801704e:	aa2c      	add	r2, sp, #176	; 0xb0
 8017050:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017052:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017054:	f002 f80c 	bl	8019070 <__ssprint_r>
 8017058:	2800      	cmp	r0, #0
 801705a:	d000      	beq.n	801705e <_svfprintf_r+0x1296>
 801705c:	e0d8      	b.n	8017210 <_svfprintf_r+0x1448>
 801705e:	af2f      	add	r7, sp, #188	; 0xbc
 8017060:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017062:	781b      	ldrb	r3, [r3, #0]
 8017064:	18ed      	adds	r5, r5, r3
 8017066:	e711      	b.n	8016e8c <_svfprintf_r+0x10c4>
 8017068:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801706a:	3b01      	subs	r3, #1
 801706c:	9313      	str	r3, [sp, #76]	; 0x4c
 801706e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017070:	3b01      	subs	r3, #1
 8017072:	930f      	str	r3, [sp, #60]	; 0x3c
 8017074:	e799      	b.n	8016faa <_svfprintf_r+0x11e2>
 8017076:	2010      	movs	r0, #16
 8017078:	1812      	adds	r2, r2, r0
 801707a:	6078      	str	r0, [r7, #4]
 801707c:	922e      	str	r2, [sp, #184]	; 0xb8
 801707e:	932d      	str	r3, [sp, #180]	; 0xb4
 8017080:	2b07      	cmp	r3, #7
 8017082:	dd08      	ble.n	8017096 <_svfprintf_r+0x12ce>
 8017084:	aa2c      	add	r2, sp, #176	; 0xb0
 8017086:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017088:	980a      	ldr	r0, [sp, #40]	; 0x28
 801708a:	f001 fff1 	bl	8019070 <__ssprint_r>
 801708e:	2800      	cmp	r0, #0
 8017090:	d000      	beq.n	8017094 <_svfprintf_r+0x12cc>
 8017092:	e0bd      	b.n	8017210 <_svfprintf_r+0x1448>
 8017094:	a92f      	add	r1, sp, #188	; 0xbc
 8017096:	3c10      	subs	r4, #16
 8017098:	000f      	movs	r7, r1
 801709a:	e7c7      	b.n	801702c <_svfprintf_r+0x1264>
 801709c:	003c      	movs	r4, r7
 801709e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80170a0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80170a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80170a4:	9308      	str	r3, [sp, #32]
 80170a6:	3101      	adds	r1, #1
 80170a8:	3301      	adds	r3, #1
 80170aa:	3408      	adds	r4, #8
 80170ac:	2a01      	cmp	r2, #1
 80170ae:	dc03      	bgt.n	80170b8 <_svfprintf_r+0x12f0>
 80170b0:	2201      	movs	r2, #1
 80170b2:	4216      	tst	r6, r2
 80170b4:	d100      	bne.n	80170b8 <_svfprintf_r+0x12f0>
 80170b6:	e088      	b.n	80171ca <_svfprintf_r+0x1402>
 80170b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80170ba:	912e      	str	r1, [sp, #184]	; 0xb8
 80170bc:	603a      	str	r2, [r7, #0]
 80170be:	2201      	movs	r2, #1
 80170c0:	932d      	str	r3, [sp, #180]	; 0xb4
 80170c2:	607a      	str	r2, [r7, #4]
 80170c4:	2b07      	cmp	r3, #7
 80170c6:	dd08      	ble.n	80170da <_svfprintf_r+0x1312>
 80170c8:	aa2c      	add	r2, sp, #176	; 0xb0
 80170ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80170cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80170ce:	f001 ffcf 	bl	8019070 <__ssprint_r>
 80170d2:	2800      	cmp	r0, #0
 80170d4:	d000      	beq.n	80170d8 <_svfprintf_r+0x1310>
 80170d6:	e09b      	b.n	8017210 <_svfprintf_r+0x1448>
 80170d8:	ac2f      	add	r4, sp, #188	; 0xbc
 80170da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80170dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80170de:	4694      	mov	ip, r2
 80170e0:	6023      	str	r3, [r4, #0]
 80170e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80170e4:	6063      	str	r3, [r4, #4]
 80170e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80170e8:	3408      	adds	r4, #8
 80170ea:	4463      	add	r3, ip
 80170ec:	932e      	str	r3, [sp, #184]	; 0xb8
 80170ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80170f0:	9308      	str	r3, [sp, #32]
 80170f2:	3301      	adds	r3, #1
 80170f4:	932d      	str	r3, [sp, #180]	; 0xb4
 80170f6:	2b07      	cmp	r3, #7
 80170f8:	dd08      	ble.n	801710c <_svfprintf_r+0x1344>
 80170fa:	aa2c      	add	r2, sp, #176	; 0xb0
 80170fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80170fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017100:	f001 ffb6 	bl	8019070 <__ssprint_r>
 8017104:	2800      	cmp	r0, #0
 8017106:	d000      	beq.n	801710a <_svfprintf_r+0x1342>
 8017108:	e082      	b.n	8017210 <_svfprintf_r+0x1448>
 801710a:	ac2f      	add	r4, sp, #188	; 0xbc
 801710c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801710e:	2200      	movs	r2, #0
 8017110:	1e5d      	subs	r5, r3, #1
 8017112:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017114:	2300      	movs	r3, #0
 8017116:	9919      	ldr	r1, [sp, #100]	; 0x64
 8017118:	f7e9 f9a0 	bl	800045c <__aeabi_dcmpeq>
 801711c:	2800      	cmp	r0, #0
 801711e:	d12c      	bne.n	801717a <_svfprintf_r+0x13b2>
 8017120:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017122:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017124:	9308      	str	r3, [sp, #32]
 8017126:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017128:	6065      	str	r5, [r4, #4]
 801712a:	1c5a      	adds	r2, r3, #1
 801712c:	930e      	str	r3, [sp, #56]	; 0x38
 801712e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017130:	922d      	str	r2, [sp, #180]	; 0xb4
 8017132:	3301      	adds	r3, #1
 8017134:	6023      	str	r3, [r4, #0]
 8017136:	9b08      	ldr	r3, [sp, #32]
 8017138:	3408      	adds	r4, #8
 801713a:	3b01      	subs	r3, #1
 801713c:	185b      	adds	r3, r3, r1
 801713e:	932e      	str	r3, [sp, #184]	; 0xb8
 8017140:	2a07      	cmp	r2, #7
 8017142:	dd07      	ble.n	8017154 <_svfprintf_r+0x138c>
 8017144:	aa2c      	add	r2, sp, #176	; 0xb0
 8017146:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017148:	980a      	ldr	r0, [sp, #40]	; 0x28
 801714a:	f001 ff91 	bl	8019070 <__ssprint_r>
 801714e:	2800      	cmp	r0, #0
 8017150:	d15e      	bne.n	8017210 <_svfprintf_r+0x1448>
 8017152:	ac2f      	add	r4, sp, #188	; 0xbc
 8017154:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017156:	ab28      	add	r3, sp, #160	; 0xa0
 8017158:	4694      	mov	ip, r2
 801715a:	6023      	str	r3, [r4, #0]
 801715c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801715e:	6063      	str	r3, [r4, #4]
 8017160:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017162:	4463      	add	r3, ip
 8017164:	932e      	str	r3, [sp, #184]	; 0xb8
 8017166:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017168:	9308      	str	r3, [sp, #32]
 801716a:	3301      	adds	r3, #1
 801716c:	932d      	str	r3, [sp, #180]	; 0xb4
 801716e:	2b07      	cmp	r3, #7
 8017170:	dd00      	ble.n	8017174 <_svfprintf_r+0x13ac>
 8017172:	e629      	b.n	8016dc8 <_svfprintf_r+0x1000>
 8017174:	3408      	adds	r4, #8
 8017176:	0027      	movs	r7, r4
 8017178:	e579      	b.n	8016c6e <_svfprintf_r+0xea6>
 801717a:	2710      	movs	r7, #16
 801717c:	2d00      	cmp	r5, #0
 801717e:	dde9      	ble.n	8017154 <_svfprintf_r+0x138c>
 8017180:	0021      	movs	r1, r4
 8017182:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017184:	4807      	ldr	r0, [pc, #28]	; (80171a4 <_svfprintf_r+0x13dc>)
 8017186:	9308      	str	r3, [sp, #32]
 8017188:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801718a:	3301      	adds	r3, #1
 801718c:	3108      	adds	r1, #8
 801718e:	6020      	str	r0, [r4, #0]
 8017190:	2d10      	cmp	r5, #16
 8017192:	dc09      	bgt.n	80171a8 <_svfprintf_r+0x13e0>
 8017194:	6065      	str	r5, [r4, #4]
 8017196:	000c      	movs	r4, r1
 8017198:	18ad      	adds	r5, r5, r2
 801719a:	952e      	str	r5, [sp, #184]	; 0xb8
 801719c:	932d      	str	r3, [sp, #180]	; 0xb4
 801719e:	2b07      	cmp	r3, #7
 80171a0:	ddd8      	ble.n	8017154 <_svfprintf_r+0x138c>
 80171a2:	e7cf      	b.n	8017144 <_svfprintf_r+0x137c>
 80171a4:	0801cab4 	.word	0x0801cab4
 80171a8:	3210      	adds	r2, #16
 80171aa:	6067      	str	r7, [r4, #4]
 80171ac:	922e      	str	r2, [sp, #184]	; 0xb8
 80171ae:	932d      	str	r3, [sp, #180]	; 0xb4
 80171b0:	2b07      	cmp	r3, #7
 80171b2:	dd07      	ble.n	80171c4 <_svfprintf_r+0x13fc>
 80171b4:	aa2c      	add	r2, sp, #176	; 0xb0
 80171b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80171b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80171ba:	f001 ff59 	bl	8019070 <__ssprint_r>
 80171be:	2800      	cmp	r0, #0
 80171c0:	d126      	bne.n	8017210 <_svfprintf_r+0x1448>
 80171c2:	a92f      	add	r1, sp, #188	; 0xbc
 80171c4:	3d10      	subs	r5, #16
 80171c6:	000c      	movs	r4, r1
 80171c8:	e7da      	b.n	8017180 <_svfprintf_r+0x13b8>
 80171ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171cc:	912e      	str	r1, [sp, #184]	; 0xb8
 80171ce:	c705      	stmia	r7!, {r0, r2}
 80171d0:	932d      	str	r3, [sp, #180]	; 0xb4
 80171d2:	e7e4      	b.n	801719e <_svfprintf_r+0x13d6>
 80171d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80171d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80171d8:	2510      	movs	r5, #16
 80171da:	1a9c      	subs	r4, r3, r2
 80171dc:	2c00      	cmp	r4, #0
 80171de:	dc00      	bgt.n	80171e2 <_svfprintf_r+0x141a>
 80171e0:	e548      	b.n	8016c74 <_svfprintf_r+0xeac>
 80171e2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80171e4:	4921      	ldr	r1, [pc, #132]	; (801726c <_svfprintf_r+0x14a4>)
 80171e6:	9308      	str	r3, [sp, #32]
 80171e8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80171ea:	3301      	adds	r3, #1
 80171ec:	6039      	str	r1, [r7, #0]
 80171ee:	2c10      	cmp	r4, #16
 80171f0:	dc19      	bgt.n	8017226 <_svfprintf_r+0x145e>
 80171f2:	607c      	str	r4, [r7, #4]
 80171f4:	18a4      	adds	r4, r4, r2
 80171f6:	942e      	str	r4, [sp, #184]	; 0xb8
 80171f8:	932d      	str	r3, [sp, #180]	; 0xb4
 80171fa:	2b07      	cmp	r3, #7
 80171fc:	dc00      	bgt.n	8017200 <_svfprintf_r+0x1438>
 80171fe:	e539      	b.n	8016c74 <_svfprintf_r+0xeac>
 8017200:	aa2c      	add	r2, sp, #176	; 0xb0
 8017202:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017204:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017206:	f001 ff33 	bl	8019070 <__ssprint_r>
 801720a:	2800      	cmp	r0, #0
 801720c:	d100      	bne.n	8017210 <_svfprintf_r+0x1448>
 801720e:	e531      	b.n	8016c74 <_svfprintf_r+0xeac>
 8017210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017212:	2b00      	cmp	r3, #0
 8017214:	d101      	bne.n	801721a <_svfprintf_r+0x1452>
 8017216:	f7ff f908 	bl	801642a <_svfprintf_r+0x662>
 801721a:	0019      	movs	r1, r3
 801721c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801721e:	f000 ff19 	bl	8018054 <_free_r>
 8017222:	f7ff f902 	bl	801642a <_svfprintf_r+0x662>
 8017226:	3210      	adds	r2, #16
 8017228:	607d      	str	r5, [r7, #4]
 801722a:	922e      	str	r2, [sp, #184]	; 0xb8
 801722c:	932d      	str	r3, [sp, #180]	; 0xb4
 801722e:	3708      	adds	r7, #8
 8017230:	2b07      	cmp	r3, #7
 8017232:	dd07      	ble.n	8017244 <_svfprintf_r+0x147c>
 8017234:	aa2c      	add	r2, sp, #176	; 0xb0
 8017236:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017238:	980a      	ldr	r0, [sp, #40]	; 0x28
 801723a:	f001 ff19 	bl	8019070 <__ssprint_r>
 801723e:	2800      	cmp	r0, #0
 8017240:	d1e6      	bne.n	8017210 <_svfprintf_r+0x1448>
 8017242:	af2f      	add	r7, sp, #188	; 0xbc
 8017244:	3c10      	subs	r4, #16
 8017246:	e7cc      	b.n	80171e2 <_svfprintf_r+0x141a>
 8017248:	990c      	ldr	r1, [sp, #48]	; 0x30
 801724a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801724c:	f000 ff02 	bl	8018054 <_free_r>
 8017250:	e52a      	b.n	8016ca8 <_svfprintf_r+0xee0>
 8017252:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017254:	9306      	str	r3, [sp, #24]
 8017256:	2b00      	cmp	r3, #0
 8017258:	d101      	bne.n	801725e <_svfprintf_r+0x1496>
 801725a:	f7ff f8e6 	bl	801642a <_svfprintf_r+0x662>
 801725e:	aa2c      	add	r2, sp, #176	; 0xb0
 8017260:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017262:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017264:	f001 ff04 	bl	8019070 <__ssprint_r>
 8017268:	f7ff f8df 	bl	801642a <_svfprintf_r+0x662>
 801726c:	0801caa4 	.word	0x0801caa4

08017270 <sysconf>:
 8017270:	2380      	movs	r3, #128	; 0x80
 8017272:	b510      	push	{r4, lr}
 8017274:	015b      	lsls	r3, r3, #5
 8017276:	2808      	cmp	r0, #8
 8017278:	d004      	beq.n	8017284 <sysconf+0x14>
 801727a:	f000 fe7d 	bl	8017f78 <__errno>
 801727e:	2316      	movs	r3, #22
 8017280:	6003      	str	r3, [r0, #0]
 8017282:	3b17      	subs	r3, #23
 8017284:	0018      	movs	r0, r3
 8017286:	bd10      	pop	{r4, pc}

08017288 <__ascii_wctomb>:
 8017288:	1e0b      	subs	r3, r1, #0
 801728a:	d004      	beq.n	8017296 <__ascii_wctomb+0xe>
 801728c:	2aff      	cmp	r2, #255	; 0xff
 801728e:	d904      	bls.n	801729a <__ascii_wctomb+0x12>
 8017290:	238a      	movs	r3, #138	; 0x8a
 8017292:	6003      	str	r3, [r0, #0]
 8017294:	3b8b      	subs	r3, #139	; 0x8b
 8017296:	0018      	movs	r0, r3
 8017298:	4770      	bx	lr
 801729a:	700a      	strb	r2, [r1, #0]
 801729c:	2301      	movs	r3, #1
 801729e:	e7fa      	b.n	8017296 <__ascii_wctomb+0xe>

080172a0 <register_fini>:
 80172a0:	4b03      	ldr	r3, [pc, #12]	; (80172b0 <register_fini+0x10>)
 80172a2:	b510      	push	{r4, lr}
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d002      	beq.n	80172ae <register_fini+0xe>
 80172a8:	4802      	ldr	r0, [pc, #8]	; (80172b4 <register_fini+0x14>)
 80172aa:	f000 f805 	bl	80172b8 <atexit>
 80172ae:	bd10      	pop	{r4, pc}
 80172b0:	00000000 	.word	0x00000000
 80172b4:	08017f85 	.word	0x08017f85

080172b8 <atexit>:
 80172b8:	2300      	movs	r3, #0
 80172ba:	b510      	push	{r4, lr}
 80172bc:	0001      	movs	r1, r0
 80172be:	001a      	movs	r2, r3
 80172c0:	0018      	movs	r0, r3
 80172c2:	f001 ff53 	bl	801916c <__register_exitproc>
 80172c6:	bd10      	pop	{r4, pc}

080172c8 <quorem>:
 80172c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172ca:	6903      	ldr	r3, [r0, #16]
 80172cc:	690c      	ldr	r4, [r1, #16]
 80172ce:	b089      	sub	sp, #36	; 0x24
 80172d0:	0007      	movs	r7, r0
 80172d2:	9105      	str	r1, [sp, #20]
 80172d4:	2600      	movs	r6, #0
 80172d6:	42a3      	cmp	r3, r4
 80172d8:	db65      	blt.n	80173a6 <quorem+0xde>
 80172da:	000b      	movs	r3, r1
 80172dc:	3c01      	subs	r4, #1
 80172de:	3314      	adds	r3, #20
 80172e0:	00a5      	lsls	r5, r4, #2
 80172e2:	9303      	str	r3, [sp, #12]
 80172e4:	195b      	adds	r3, r3, r5
 80172e6:	9304      	str	r3, [sp, #16]
 80172e8:	0003      	movs	r3, r0
 80172ea:	3314      	adds	r3, #20
 80172ec:	9302      	str	r3, [sp, #8]
 80172ee:	195d      	adds	r5, r3, r5
 80172f0:	9b04      	ldr	r3, [sp, #16]
 80172f2:	6828      	ldr	r0, [r5, #0]
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	1c59      	adds	r1, r3, #1
 80172f8:	9301      	str	r3, [sp, #4]
 80172fa:	f7e8 ff29 	bl	8000150 <__udivsi3>
 80172fe:	9001      	str	r0, [sp, #4]
 8017300:	42b0      	cmp	r0, r6
 8017302:	d029      	beq.n	8017358 <quorem+0x90>
 8017304:	9b03      	ldr	r3, [sp, #12]
 8017306:	9802      	ldr	r0, [sp, #8]
 8017308:	469c      	mov	ip, r3
 801730a:	9606      	str	r6, [sp, #24]
 801730c:	4662      	mov	r2, ip
 801730e:	ca08      	ldmia	r2!, {r3}
 8017310:	4694      	mov	ip, r2
 8017312:	9a01      	ldr	r2, [sp, #4]
 8017314:	b299      	uxth	r1, r3
 8017316:	4351      	muls	r1, r2
 8017318:	0c1b      	lsrs	r3, r3, #16
 801731a:	4353      	muls	r3, r2
 801731c:	1989      	adds	r1, r1, r6
 801731e:	0c0a      	lsrs	r2, r1, #16
 8017320:	189b      	adds	r3, r3, r2
 8017322:	9307      	str	r3, [sp, #28]
 8017324:	0c1e      	lsrs	r6, r3, #16
 8017326:	6803      	ldr	r3, [r0, #0]
 8017328:	b289      	uxth	r1, r1
 801732a:	b29a      	uxth	r2, r3
 801732c:	9b06      	ldr	r3, [sp, #24]
 801732e:	18d2      	adds	r2, r2, r3
 8017330:	6803      	ldr	r3, [r0, #0]
 8017332:	1a52      	subs	r2, r2, r1
 8017334:	0c19      	lsrs	r1, r3, #16
 8017336:	466b      	mov	r3, sp
 8017338:	8b9b      	ldrh	r3, [r3, #28]
 801733a:	1acb      	subs	r3, r1, r3
 801733c:	1411      	asrs	r1, r2, #16
 801733e:	185b      	adds	r3, r3, r1
 8017340:	1419      	asrs	r1, r3, #16
 8017342:	b292      	uxth	r2, r2
 8017344:	041b      	lsls	r3, r3, #16
 8017346:	431a      	orrs	r2, r3
 8017348:	9b04      	ldr	r3, [sp, #16]
 801734a:	9106      	str	r1, [sp, #24]
 801734c:	c004      	stmia	r0!, {r2}
 801734e:	4563      	cmp	r3, ip
 8017350:	d2dc      	bcs.n	801730c <quorem+0x44>
 8017352:	682b      	ldr	r3, [r5, #0]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d02d      	beq.n	80173b4 <quorem+0xec>
 8017358:	9905      	ldr	r1, [sp, #20]
 801735a:	0038      	movs	r0, r7
 801735c:	f001 fcb2 	bl	8018cc4 <__mcmp>
 8017360:	2800      	cmp	r0, #0
 8017362:	db1f      	blt.n	80173a4 <quorem+0xdc>
 8017364:	2500      	movs	r5, #0
 8017366:	9b01      	ldr	r3, [sp, #4]
 8017368:	9802      	ldr	r0, [sp, #8]
 801736a:	3301      	adds	r3, #1
 801736c:	9903      	ldr	r1, [sp, #12]
 801736e:	9301      	str	r3, [sp, #4]
 8017370:	6802      	ldr	r2, [r0, #0]
 8017372:	c908      	ldmia	r1!, {r3}
 8017374:	b292      	uxth	r2, r2
 8017376:	1955      	adds	r5, r2, r5
 8017378:	b29a      	uxth	r2, r3
 801737a:	1aaa      	subs	r2, r5, r2
 801737c:	6805      	ldr	r5, [r0, #0]
 801737e:	0c1b      	lsrs	r3, r3, #16
 8017380:	0c2d      	lsrs	r5, r5, #16
 8017382:	1aeb      	subs	r3, r5, r3
 8017384:	1415      	asrs	r5, r2, #16
 8017386:	195b      	adds	r3, r3, r5
 8017388:	141d      	asrs	r5, r3, #16
 801738a:	b292      	uxth	r2, r2
 801738c:	041b      	lsls	r3, r3, #16
 801738e:	4313      	orrs	r3, r2
 8017390:	c008      	stmia	r0!, {r3}
 8017392:	9b04      	ldr	r3, [sp, #16]
 8017394:	428b      	cmp	r3, r1
 8017396:	d2eb      	bcs.n	8017370 <quorem+0xa8>
 8017398:	9a02      	ldr	r2, [sp, #8]
 801739a:	00a3      	lsls	r3, r4, #2
 801739c:	18d3      	adds	r3, r2, r3
 801739e:	681a      	ldr	r2, [r3, #0]
 80173a0:	2a00      	cmp	r2, #0
 80173a2:	d011      	beq.n	80173c8 <quorem+0x100>
 80173a4:	9e01      	ldr	r6, [sp, #4]
 80173a6:	0030      	movs	r0, r6
 80173a8:	b009      	add	sp, #36	; 0x24
 80173aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173ac:	682b      	ldr	r3, [r5, #0]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d104      	bne.n	80173bc <quorem+0xf4>
 80173b2:	3c01      	subs	r4, #1
 80173b4:	9b02      	ldr	r3, [sp, #8]
 80173b6:	3d04      	subs	r5, #4
 80173b8:	42ab      	cmp	r3, r5
 80173ba:	d3f7      	bcc.n	80173ac <quorem+0xe4>
 80173bc:	613c      	str	r4, [r7, #16]
 80173be:	e7cb      	b.n	8017358 <quorem+0x90>
 80173c0:	681a      	ldr	r2, [r3, #0]
 80173c2:	2a00      	cmp	r2, #0
 80173c4:	d104      	bne.n	80173d0 <quorem+0x108>
 80173c6:	3c01      	subs	r4, #1
 80173c8:	9a02      	ldr	r2, [sp, #8]
 80173ca:	3b04      	subs	r3, #4
 80173cc:	429a      	cmp	r2, r3
 80173ce:	d3f7      	bcc.n	80173c0 <quorem+0xf8>
 80173d0:	613c      	str	r4, [r7, #16]
 80173d2:	e7e7      	b.n	80173a4 <quorem+0xdc>

080173d4 <_dtoa_r>:
 80173d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173d6:	0014      	movs	r4, r2
 80173d8:	001d      	movs	r5, r3
 80173da:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80173dc:	b09b      	sub	sp, #108	; 0x6c
 80173de:	9002      	str	r0, [sp, #8]
 80173e0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80173e2:	9406      	str	r4, [sp, #24]
 80173e4:	9507      	str	r5, [sp, #28]
 80173e6:	2900      	cmp	r1, #0
 80173e8:	d009      	beq.n	80173fe <_dtoa_r+0x2a>
 80173ea:	2301      	movs	r3, #1
 80173ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80173ee:	4093      	lsls	r3, r2
 80173f0:	604a      	str	r2, [r1, #4]
 80173f2:	608b      	str	r3, [r1, #8]
 80173f4:	f001 fa6a 	bl	80188cc <_Bfree>
 80173f8:	2300      	movs	r3, #0
 80173fa:	9a02      	ldr	r2, [sp, #8]
 80173fc:	6413      	str	r3, [r2, #64]	; 0x40
 80173fe:	2d00      	cmp	r5, #0
 8017400:	da20      	bge.n	8017444 <_dtoa_r+0x70>
 8017402:	2301      	movs	r3, #1
 8017404:	6033      	str	r3, [r6, #0]
 8017406:	006b      	lsls	r3, r5, #1
 8017408:	085b      	lsrs	r3, r3, #1
 801740a:	9307      	str	r3, [sp, #28]
 801740c:	9c07      	ldr	r4, [sp, #28]
 801740e:	4bb2      	ldr	r3, [pc, #712]	; (80176d8 <_dtoa_r+0x304>)
 8017410:	0022      	movs	r2, r4
 8017412:	9317      	str	r3, [sp, #92]	; 0x5c
 8017414:	401a      	ands	r2, r3
 8017416:	429a      	cmp	r2, r3
 8017418:	d117      	bne.n	801744a <_dtoa_r+0x76>
 801741a:	4bb0      	ldr	r3, [pc, #704]	; (80176dc <_dtoa_r+0x308>)
 801741c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801741e:	6013      	str	r3, [r2, #0]
 8017420:	9b06      	ldr	r3, [sp, #24]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d103      	bne.n	801742e <_dtoa_r+0x5a>
 8017426:	0324      	lsls	r4, r4, #12
 8017428:	d101      	bne.n	801742e <_dtoa_r+0x5a>
 801742a:	f000 fd89 	bl	8017f40 <_dtoa_r+0xb6c>
 801742e:	4bac      	ldr	r3, [pc, #688]	; (80176e0 <_dtoa_r+0x30c>)
 8017430:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017432:	9308      	str	r3, [sp, #32]
 8017434:	2a00      	cmp	r2, #0
 8017436:	d002      	beq.n	801743e <_dtoa_r+0x6a>
 8017438:	4baa      	ldr	r3, [pc, #680]	; (80176e4 <_dtoa_r+0x310>)
 801743a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801743c:	6013      	str	r3, [r2, #0]
 801743e:	9808      	ldr	r0, [sp, #32]
 8017440:	b01b      	add	sp, #108	; 0x6c
 8017442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017444:	2300      	movs	r3, #0
 8017446:	6033      	str	r3, [r6, #0]
 8017448:	e7e0      	b.n	801740c <_dtoa_r+0x38>
 801744a:	9e06      	ldr	r6, [sp, #24]
 801744c:	9f07      	ldr	r7, [sp, #28]
 801744e:	2200      	movs	r2, #0
 8017450:	2300      	movs	r3, #0
 8017452:	0030      	movs	r0, r6
 8017454:	0039      	movs	r1, r7
 8017456:	f7e9 f801 	bl	800045c <__aeabi_dcmpeq>
 801745a:	1e05      	subs	r5, r0, #0
 801745c:	d00b      	beq.n	8017476 <_dtoa_r+0xa2>
 801745e:	2301      	movs	r3, #1
 8017460:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017462:	6013      	str	r3, [r2, #0]
 8017464:	4ba0      	ldr	r3, [pc, #640]	; (80176e8 <_dtoa_r+0x314>)
 8017466:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017468:	9308      	str	r3, [sp, #32]
 801746a:	2a00      	cmp	r2, #0
 801746c:	d0e7      	beq.n	801743e <_dtoa_r+0x6a>
 801746e:	4a9f      	ldr	r2, [pc, #636]	; (80176ec <_dtoa_r+0x318>)
 8017470:	9924      	ldr	r1, [sp, #144]	; 0x90
 8017472:	600a      	str	r2, [r1, #0]
 8017474:	e7e3      	b.n	801743e <_dtoa_r+0x6a>
 8017476:	ab18      	add	r3, sp, #96	; 0x60
 8017478:	9301      	str	r3, [sp, #4]
 801747a:	ab19      	add	r3, sp, #100	; 0x64
 801747c:	9300      	str	r3, [sp, #0]
 801747e:	0032      	movs	r2, r6
 8017480:	003b      	movs	r3, r7
 8017482:	9802      	ldr	r0, [sp, #8]
 8017484:	f001 fd0e 	bl	8018ea4 <__d2b>
 8017488:	0063      	lsls	r3, r4, #1
 801748a:	9003      	str	r0, [sp, #12]
 801748c:	0d5b      	lsrs	r3, r3, #21
 801748e:	d074      	beq.n	801757a <_dtoa_r+0x1a6>
 8017490:	033a      	lsls	r2, r7, #12
 8017492:	4c97      	ldr	r4, [pc, #604]	; (80176f0 <_dtoa_r+0x31c>)
 8017494:	0b12      	lsrs	r2, r2, #12
 8017496:	4314      	orrs	r4, r2
 8017498:	0021      	movs	r1, r4
 801749a:	4a96      	ldr	r2, [pc, #600]	; (80176f4 <_dtoa_r+0x320>)
 801749c:	0030      	movs	r0, r6
 801749e:	9516      	str	r5, [sp, #88]	; 0x58
 80174a0:	189e      	adds	r6, r3, r2
 80174a2:	2200      	movs	r2, #0
 80174a4:	4b94      	ldr	r3, [pc, #592]	; (80176f8 <_dtoa_r+0x324>)
 80174a6:	f7eb f86d 	bl	8002584 <__aeabi_dsub>
 80174aa:	4a94      	ldr	r2, [pc, #592]	; (80176fc <_dtoa_r+0x328>)
 80174ac:	4b94      	ldr	r3, [pc, #592]	; (8017700 <_dtoa_r+0x32c>)
 80174ae:	f7ea fdf7 	bl	80020a0 <__aeabi_dmul>
 80174b2:	4a94      	ldr	r2, [pc, #592]	; (8017704 <_dtoa_r+0x330>)
 80174b4:	4b94      	ldr	r3, [pc, #592]	; (8017708 <_dtoa_r+0x334>)
 80174b6:	f7e9 fecd 	bl	8001254 <__aeabi_dadd>
 80174ba:	0004      	movs	r4, r0
 80174bc:	0030      	movs	r0, r6
 80174be:	000d      	movs	r5, r1
 80174c0:	f7eb fbfa 	bl	8002cb8 <__aeabi_i2d>
 80174c4:	4a91      	ldr	r2, [pc, #580]	; (801770c <_dtoa_r+0x338>)
 80174c6:	4b92      	ldr	r3, [pc, #584]	; (8017710 <_dtoa_r+0x33c>)
 80174c8:	f7ea fdea 	bl	80020a0 <__aeabi_dmul>
 80174cc:	0002      	movs	r2, r0
 80174ce:	000b      	movs	r3, r1
 80174d0:	0020      	movs	r0, r4
 80174d2:	0029      	movs	r1, r5
 80174d4:	f7e9 febe 	bl	8001254 <__aeabi_dadd>
 80174d8:	0004      	movs	r4, r0
 80174da:	000d      	movs	r5, r1
 80174dc:	f7eb fbb6 	bl	8002c4c <__aeabi_d2iz>
 80174e0:	2200      	movs	r2, #0
 80174e2:	0007      	movs	r7, r0
 80174e4:	2300      	movs	r3, #0
 80174e6:	0020      	movs	r0, r4
 80174e8:	0029      	movs	r1, r5
 80174ea:	f7e8 ffbd 	bl	8000468 <__aeabi_dcmplt>
 80174ee:	2800      	cmp	r0, #0
 80174f0:	d009      	beq.n	8017506 <_dtoa_r+0x132>
 80174f2:	0038      	movs	r0, r7
 80174f4:	f7eb fbe0 	bl	8002cb8 <__aeabi_i2d>
 80174f8:	002b      	movs	r3, r5
 80174fa:	0022      	movs	r2, r4
 80174fc:	f7e8 ffae 	bl	800045c <__aeabi_dcmpeq>
 8017500:	4243      	negs	r3, r0
 8017502:	4158      	adcs	r0, r3
 8017504:	1a3f      	subs	r7, r7, r0
 8017506:	2301      	movs	r3, #1
 8017508:	9314      	str	r3, [sp, #80]	; 0x50
 801750a:	2f16      	cmp	r7, #22
 801750c:	d80d      	bhi.n	801752a <_dtoa_r+0x156>
 801750e:	4981      	ldr	r1, [pc, #516]	; (8017714 <_dtoa_r+0x340>)
 8017510:	00fb      	lsls	r3, r7, #3
 8017512:	18c9      	adds	r1, r1, r3
 8017514:	6808      	ldr	r0, [r1, #0]
 8017516:	6849      	ldr	r1, [r1, #4]
 8017518:	9a06      	ldr	r2, [sp, #24]
 801751a:	9b07      	ldr	r3, [sp, #28]
 801751c:	f7e8 ffb8 	bl	8000490 <__aeabi_dcmpgt>
 8017520:	2800      	cmp	r0, #0
 8017522:	d046      	beq.n	80175b2 <_dtoa_r+0x1de>
 8017524:	2300      	movs	r3, #0
 8017526:	3f01      	subs	r7, #1
 8017528:	9314      	str	r3, [sp, #80]	; 0x50
 801752a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801752c:	1b9e      	subs	r6, r3, r6
 801752e:	2300      	movs	r3, #0
 8017530:	930a      	str	r3, [sp, #40]	; 0x28
 8017532:	0033      	movs	r3, r6
 8017534:	3b01      	subs	r3, #1
 8017536:	930b      	str	r3, [sp, #44]	; 0x2c
 8017538:	d504      	bpl.n	8017544 <_dtoa_r+0x170>
 801753a:	2301      	movs	r3, #1
 801753c:	1b9b      	subs	r3, r3, r6
 801753e:	930a      	str	r3, [sp, #40]	; 0x28
 8017540:	2300      	movs	r3, #0
 8017542:	930b      	str	r3, [sp, #44]	; 0x2c
 8017544:	2f00      	cmp	r7, #0
 8017546:	db36      	blt.n	80175b6 <_dtoa_r+0x1e2>
 8017548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801754a:	9711      	str	r7, [sp, #68]	; 0x44
 801754c:	19db      	adds	r3, r3, r7
 801754e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017550:	2300      	movs	r3, #0
 8017552:	9304      	str	r3, [sp, #16]
 8017554:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017556:	2401      	movs	r4, #1
 8017558:	2b09      	cmp	r3, #9
 801755a:	d900      	bls.n	801755e <_dtoa_r+0x18a>
 801755c:	e082      	b.n	8017664 <_dtoa_r+0x290>
 801755e:	2b05      	cmp	r3, #5
 8017560:	dd02      	ble.n	8017568 <_dtoa_r+0x194>
 8017562:	2400      	movs	r4, #0
 8017564:	3b04      	subs	r3, #4
 8017566:	9320      	str	r3, [sp, #128]	; 0x80
 8017568:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801756a:	1e98      	subs	r0, r3, #2
 801756c:	2803      	cmp	r0, #3
 801756e:	d900      	bls.n	8017572 <_dtoa_r+0x19e>
 8017570:	e082      	b.n	8017678 <_dtoa_r+0x2a4>
 8017572:	f7e8 fdd9 	bl	8000128 <__gnu_thumb1_case_uqi>
 8017576:	7573      	.short	0x7573
 8017578:	6828      	.short	0x6828
 801757a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801757c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801757e:	189e      	adds	r6, r3, r2
 8017580:	4b65      	ldr	r3, [pc, #404]	; (8017718 <_dtoa_r+0x344>)
 8017582:	18f2      	adds	r2, r6, r3
 8017584:	2a20      	cmp	r2, #32
 8017586:	dd0f      	ble.n	80175a8 <_dtoa_r+0x1d4>
 8017588:	2340      	movs	r3, #64	; 0x40
 801758a:	1a9b      	subs	r3, r3, r2
 801758c:	409c      	lsls	r4, r3
 801758e:	4b63      	ldr	r3, [pc, #396]	; (801771c <_dtoa_r+0x348>)
 8017590:	9806      	ldr	r0, [sp, #24]
 8017592:	18f3      	adds	r3, r6, r3
 8017594:	40d8      	lsrs	r0, r3
 8017596:	4320      	orrs	r0, r4
 8017598:	f7eb fbc8 	bl	8002d2c <__aeabi_ui2d>
 801759c:	2301      	movs	r3, #1
 801759e:	4c60      	ldr	r4, [pc, #384]	; (8017720 <_dtoa_r+0x34c>)
 80175a0:	3e01      	subs	r6, #1
 80175a2:	1909      	adds	r1, r1, r4
 80175a4:	9316      	str	r3, [sp, #88]	; 0x58
 80175a6:	e77c      	b.n	80174a2 <_dtoa_r+0xce>
 80175a8:	2320      	movs	r3, #32
 80175aa:	9806      	ldr	r0, [sp, #24]
 80175ac:	1a9b      	subs	r3, r3, r2
 80175ae:	4098      	lsls	r0, r3
 80175b0:	e7f2      	b.n	8017598 <_dtoa_r+0x1c4>
 80175b2:	9014      	str	r0, [sp, #80]	; 0x50
 80175b4:	e7b9      	b.n	801752a <_dtoa_r+0x156>
 80175b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175b8:	1bdb      	subs	r3, r3, r7
 80175ba:	930a      	str	r3, [sp, #40]	; 0x28
 80175bc:	427b      	negs	r3, r7
 80175be:	9304      	str	r3, [sp, #16]
 80175c0:	2300      	movs	r3, #0
 80175c2:	9311      	str	r3, [sp, #68]	; 0x44
 80175c4:	e7c6      	b.n	8017554 <_dtoa_r+0x180>
 80175c6:	2301      	movs	r3, #1
 80175c8:	930d      	str	r3, [sp, #52]	; 0x34
 80175ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	dd57      	ble.n	8017680 <_dtoa_r+0x2ac>
 80175d0:	930c      	str	r3, [sp, #48]	; 0x30
 80175d2:	9309      	str	r3, [sp, #36]	; 0x24
 80175d4:	2200      	movs	r2, #0
 80175d6:	9902      	ldr	r1, [sp, #8]
 80175d8:	644a      	str	r2, [r1, #68]	; 0x44
 80175da:	3204      	adds	r2, #4
 80175dc:	0010      	movs	r0, r2
 80175de:	9902      	ldr	r1, [sp, #8]
 80175e0:	3014      	adds	r0, #20
 80175e2:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80175e4:	4298      	cmp	r0, r3
 80175e6:	d950      	bls.n	801768a <_dtoa_r+0x2b6>
 80175e8:	9802      	ldr	r0, [sp, #8]
 80175ea:	f001 f947 	bl	801887c <_Balloc>
 80175ee:	9b02      	ldr	r3, [sp, #8]
 80175f0:	9008      	str	r0, [sp, #32]
 80175f2:	6418      	str	r0, [r3, #64]	; 0x40
 80175f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175f6:	2b0e      	cmp	r3, #14
 80175f8:	d900      	bls.n	80175fc <_dtoa_r+0x228>
 80175fa:	e10c      	b.n	8017816 <_dtoa_r+0x442>
 80175fc:	2c00      	cmp	r4, #0
 80175fe:	d100      	bne.n	8017602 <_dtoa_r+0x22e>
 8017600:	e109      	b.n	8017816 <_dtoa_r+0x442>
 8017602:	9b06      	ldr	r3, [sp, #24]
 8017604:	9c07      	ldr	r4, [sp, #28]
 8017606:	9312      	str	r3, [sp, #72]	; 0x48
 8017608:	9413      	str	r4, [sp, #76]	; 0x4c
 801760a:	2f00      	cmp	r7, #0
 801760c:	dc00      	bgt.n	8017610 <_dtoa_r+0x23c>
 801760e:	e08b      	b.n	8017728 <_dtoa_r+0x354>
 8017610:	210f      	movs	r1, #15
 8017612:	003a      	movs	r2, r7
 8017614:	4b3f      	ldr	r3, [pc, #252]	; (8017714 <_dtoa_r+0x340>)
 8017616:	400a      	ands	r2, r1
 8017618:	00d2      	lsls	r2, r2, #3
 801761a:	189b      	adds	r3, r3, r2
 801761c:	681d      	ldr	r5, [r3, #0]
 801761e:	685e      	ldr	r6, [r3, #4]
 8017620:	2302      	movs	r3, #2
 8017622:	113c      	asrs	r4, r7, #4
 8017624:	930e      	str	r3, [sp, #56]	; 0x38
 8017626:	06e3      	lsls	r3, r4, #27
 8017628:	d50b      	bpl.n	8017642 <_dtoa_r+0x26e>
 801762a:	4b3e      	ldr	r3, [pc, #248]	; (8017724 <_dtoa_r+0x350>)
 801762c:	400c      	ands	r4, r1
 801762e:	6a1a      	ldr	r2, [r3, #32]
 8017630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017632:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017634:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017636:	f7ea f929 	bl	800188c <__aeabi_ddiv>
 801763a:	2303      	movs	r3, #3
 801763c:	9006      	str	r0, [sp, #24]
 801763e:	9107      	str	r1, [sp, #28]
 8017640:	930e      	str	r3, [sp, #56]	; 0x38
 8017642:	2300      	movs	r3, #0
 8017644:	e03b      	b.n	80176be <_dtoa_r+0x2ea>
 8017646:	2301      	movs	r3, #1
 8017648:	930d      	str	r3, [sp, #52]	; 0x34
 801764a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801764c:	18fb      	adds	r3, r7, r3
 801764e:	930c      	str	r3, [sp, #48]	; 0x30
 8017650:	3301      	adds	r3, #1
 8017652:	9309      	str	r3, [sp, #36]	; 0x24
 8017654:	2b00      	cmp	r3, #0
 8017656:	dcbd      	bgt.n	80175d4 <_dtoa_r+0x200>
 8017658:	2301      	movs	r3, #1
 801765a:	e7bb      	b.n	80175d4 <_dtoa_r+0x200>
 801765c:	2300      	movs	r3, #0
 801765e:	e7b3      	b.n	80175c8 <_dtoa_r+0x1f4>
 8017660:	2300      	movs	r3, #0
 8017662:	e7f1      	b.n	8017648 <_dtoa_r+0x274>
 8017664:	2300      	movs	r3, #0
 8017666:	940d      	str	r4, [sp, #52]	; 0x34
 8017668:	9320      	str	r3, [sp, #128]	; 0x80
 801766a:	3b01      	subs	r3, #1
 801766c:	2200      	movs	r2, #0
 801766e:	930c      	str	r3, [sp, #48]	; 0x30
 8017670:	9309      	str	r3, [sp, #36]	; 0x24
 8017672:	3313      	adds	r3, #19
 8017674:	9221      	str	r2, [sp, #132]	; 0x84
 8017676:	e7ad      	b.n	80175d4 <_dtoa_r+0x200>
 8017678:	2301      	movs	r3, #1
 801767a:	930d      	str	r3, [sp, #52]	; 0x34
 801767c:	3b02      	subs	r3, #2
 801767e:	e7f5      	b.n	801766c <_dtoa_r+0x298>
 8017680:	2301      	movs	r3, #1
 8017682:	930c      	str	r3, [sp, #48]	; 0x30
 8017684:	9309      	str	r3, [sp, #36]	; 0x24
 8017686:	001a      	movs	r2, r3
 8017688:	e7f4      	b.n	8017674 <_dtoa_r+0x2a0>
 801768a:	9802      	ldr	r0, [sp, #8]
 801768c:	3101      	adds	r1, #1
 801768e:	6441      	str	r1, [r0, #68]	; 0x44
 8017690:	0052      	lsls	r2, r2, #1
 8017692:	e7a3      	b.n	80175dc <_dtoa_r+0x208>
 8017694:	2301      	movs	r3, #1
 8017696:	421c      	tst	r4, r3
 8017698:	d00e      	beq.n	80176b8 <_dtoa_r+0x2e4>
 801769a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801769c:	4a21      	ldr	r2, [pc, #132]	; (8017724 <_dtoa_r+0x350>)
 801769e:	3301      	adds	r3, #1
 80176a0:	930e      	str	r3, [sp, #56]	; 0x38
 80176a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80176a4:	0028      	movs	r0, r5
 80176a6:	00db      	lsls	r3, r3, #3
 80176a8:	189b      	adds	r3, r3, r2
 80176aa:	0031      	movs	r1, r6
 80176ac:	681a      	ldr	r2, [r3, #0]
 80176ae:	685b      	ldr	r3, [r3, #4]
 80176b0:	f7ea fcf6 	bl	80020a0 <__aeabi_dmul>
 80176b4:	0005      	movs	r5, r0
 80176b6:	000e      	movs	r6, r1
 80176b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80176ba:	1064      	asrs	r4, r4, #1
 80176bc:	3301      	adds	r3, #1
 80176be:	9310      	str	r3, [sp, #64]	; 0x40
 80176c0:	2c00      	cmp	r4, #0
 80176c2:	d1e7      	bne.n	8017694 <_dtoa_r+0x2c0>
 80176c4:	9806      	ldr	r0, [sp, #24]
 80176c6:	9907      	ldr	r1, [sp, #28]
 80176c8:	002a      	movs	r2, r5
 80176ca:	0033      	movs	r3, r6
 80176cc:	f7ea f8de 	bl	800188c <__aeabi_ddiv>
 80176d0:	9006      	str	r0, [sp, #24]
 80176d2:	9107      	str	r1, [sp, #28]
 80176d4:	e043      	b.n	801775e <_dtoa_r+0x38a>
 80176d6:	46c0      	nop			; (mov r8, r8)
 80176d8:	7ff00000 	.word	0x7ff00000
 80176dc:	0000270f 	.word	0x0000270f
 80176e0:	0801cbce 	.word	0x0801cbce
 80176e4:	0801cbd1 	.word	0x0801cbd1
 80176e8:	0801caa2 	.word	0x0801caa2
 80176ec:	0801caa3 	.word	0x0801caa3
 80176f0:	3ff00000 	.word	0x3ff00000
 80176f4:	fffffc01 	.word	0xfffffc01
 80176f8:	3ff80000 	.word	0x3ff80000
 80176fc:	636f4361 	.word	0x636f4361
 8017700:	3fd287a7 	.word	0x3fd287a7
 8017704:	8b60c8b3 	.word	0x8b60c8b3
 8017708:	3fc68a28 	.word	0x3fc68a28
 801770c:	509f79fb 	.word	0x509f79fb
 8017710:	3fd34413 	.word	0x3fd34413
 8017714:	0801cc00 	.word	0x0801cc00
 8017718:	00000432 	.word	0x00000432
 801771c:	00000412 	.word	0x00000412
 8017720:	fe100000 	.word	0xfe100000
 8017724:	0801cbd8 	.word	0x0801cbd8
 8017728:	2302      	movs	r3, #2
 801772a:	930e      	str	r3, [sp, #56]	; 0x38
 801772c:	2f00      	cmp	r7, #0
 801772e:	d016      	beq.n	801775e <_dtoa_r+0x38a>
 8017730:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017732:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017734:	427c      	negs	r4, r7
 8017736:	330d      	adds	r3, #13
 8017738:	4023      	ands	r3, r4
 801773a:	4acf      	ldr	r2, [pc, #828]	; (8017a78 <_dtoa_r+0x6a4>)
 801773c:	00db      	lsls	r3, r3, #3
 801773e:	18d3      	adds	r3, r2, r3
 8017740:	681a      	ldr	r2, [r3, #0]
 8017742:	685b      	ldr	r3, [r3, #4]
 8017744:	f7ea fcac 	bl	80020a0 <__aeabi_dmul>
 8017748:	2300      	movs	r3, #0
 801774a:	2601      	movs	r6, #1
 801774c:	001d      	movs	r5, r3
 801774e:	9006      	str	r0, [sp, #24]
 8017750:	9107      	str	r1, [sp, #28]
 8017752:	1124      	asrs	r4, r4, #4
 8017754:	2c00      	cmp	r4, #0
 8017756:	d000      	beq.n	801775a <_dtoa_r+0x386>
 8017758:	e08c      	b.n	8017874 <_dtoa_r+0x4a0>
 801775a:	2b00      	cmp	r3, #0
 801775c:	d1b8      	bne.n	80176d0 <_dtoa_r+0x2fc>
 801775e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017760:	2b00      	cmp	r3, #0
 8017762:	d100      	bne.n	8017766 <_dtoa_r+0x392>
 8017764:	e096      	b.n	8017894 <_dtoa_r+0x4c0>
 8017766:	9c06      	ldr	r4, [sp, #24]
 8017768:	9d07      	ldr	r5, [sp, #28]
 801776a:	2200      	movs	r2, #0
 801776c:	4bc3      	ldr	r3, [pc, #780]	; (8017a7c <_dtoa_r+0x6a8>)
 801776e:	0020      	movs	r0, r4
 8017770:	0029      	movs	r1, r5
 8017772:	f7e8 fe79 	bl	8000468 <__aeabi_dcmplt>
 8017776:	2800      	cmp	r0, #0
 8017778:	d100      	bne.n	801777c <_dtoa_r+0x3a8>
 801777a:	e08b      	b.n	8017894 <_dtoa_r+0x4c0>
 801777c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801777e:	2b00      	cmp	r3, #0
 8017780:	d100      	bne.n	8017784 <_dtoa_r+0x3b0>
 8017782:	e087      	b.n	8017894 <_dtoa_r+0x4c0>
 8017784:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017786:	2b00      	cmp	r3, #0
 8017788:	dd41      	ble.n	801780e <_dtoa_r+0x43a>
 801778a:	4bbd      	ldr	r3, [pc, #756]	; (8017a80 <_dtoa_r+0x6ac>)
 801778c:	2200      	movs	r2, #0
 801778e:	0020      	movs	r0, r4
 8017790:	0029      	movs	r1, r5
 8017792:	f7ea fc85 	bl	80020a0 <__aeabi_dmul>
 8017796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017798:	9006      	str	r0, [sp, #24]
 801779a:	9107      	str	r1, [sp, #28]
 801779c:	3301      	adds	r3, #1
 801779e:	930e      	str	r3, [sp, #56]	; 0x38
 80177a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177a2:	1e7e      	subs	r6, r7, #1
 80177a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80177a6:	9310      	str	r3, [sp, #64]	; 0x40
 80177a8:	f7eb fa86 	bl	8002cb8 <__aeabi_i2d>
 80177ac:	9a06      	ldr	r2, [sp, #24]
 80177ae:	9b07      	ldr	r3, [sp, #28]
 80177b0:	f7ea fc76 	bl	80020a0 <__aeabi_dmul>
 80177b4:	2200      	movs	r2, #0
 80177b6:	4bb3      	ldr	r3, [pc, #716]	; (8017a84 <_dtoa_r+0x6b0>)
 80177b8:	f7e9 fd4c 	bl	8001254 <__aeabi_dadd>
 80177bc:	4ab2      	ldr	r2, [pc, #712]	; (8017a88 <_dtoa_r+0x6b4>)
 80177be:	900e      	str	r0, [sp, #56]	; 0x38
 80177c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80177c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80177c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80177c6:	4694      	mov	ip, r2
 80177c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177ca:	4463      	add	r3, ip
 80177cc:	9315      	str	r3, [sp, #84]	; 0x54
 80177ce:	001d      	movs	r5, r3
 80177d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d161      	bne.n	801789a <_dtoa_r+0x4c6>
 80177d6:	9806      	ldr	r0, [sp, #24]
 80177d8:	9907      	ldr	r1, [sp, #28]
 80177da:	2200      	movs	r2, #0
 80177dc:	4bab      	ldr	r3, [pc, #684]	; (8017a8c <_dtoa_r+0x6b8>)
 80177de:	f7ea fed1 	bl	8002584 <__aeabi_dsub>
 80177e2:	0022      	movs	r2, r4
 80177e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80177e6:	9006      	str	r0, [sp, #24]
 80177e8:	9107      	str	r1, [sp, #28]
 80177ea:	f7e8 fe51 	bl	8000490 <__aeabi_dcmpgt>
 80177ee:	2800      	cmp	r0, #0
 80177f0:	d000      	beq.n	80177f4 <_dtoa_r+0x420>
 80177f2:	e2aa      	b.n	8017d4a <_dtoa_r+0x976>
 80177f4:	48a6      	ldr	r0, [pc, #664]	; (8017a90 <_dtoa_r+0x6bc>)
 80177f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80177f8:	4684      	mov	ip, r0
 80177fa:	4461      	add	r1, ip
 80177fc:	000b      	movs	r3, r1
 80177fe:	9806      	ldr	r0, [sp, #24]
 8017800:	9907      	ldr	r1, [sp, #28]
 8017802:	0022      	movs	r2, r4
 8017804:	f7e8 fe30 	bl	8000468 <__aeabi_dcmplt>
 8017808:	2800      	cmp	r0, #0
 801780a:	d000      	beq.n	801780e <_dtoa_r+0x43a>
 801780c:	e297      	b.n	8017d3e <_dtoa_r+0x96a>
 801780e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017810:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017812:	9306      	str	r3, [sp, #24]
 8017814:	9407      	str	r4, [sp, #28]
 8017816:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017818:	2b00      	cmp	r3, #0
 801781a:	da00      	bge.n	801781e <_dtoa_r+0x44a>
 801781c:	e15e      	b.n	8017adc <_dtoa_r+0x708>
 801781e:	2f0e      	cmp	r7, #14
 8017820:	dd00      	ble.n	8017824 <_dtoa_r+0x450>
 8017822:	e15b      	b.n	8017adc <_dtoa_r+0x708>
 8017824:	4b94      	ldr	r3, [pc, #592]	; (8017a78 <_dtoa_r+0x6a4>)
 8017826:	00fa      	lsls	r2, r7, #3
 8017828:	189b      	adds	r3, r3, r2
 801782a:	685c      	ldr	r4, [r3, #4]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	9304      	str	r3, [sp, #16]
 8017830:	9405      	str	r4, [sp, #20]
 8017832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017834:	2b00      	cmp	r3, #0
 8017836:	db00      	blt.n	801783a <_dtoa_r+0x466>
 8017838:	e0da      	b.n	80179f0 <_dtoa_r+0x61c>
 801783a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801783c:	2b00      	cmp	r3, #0
 801783e:	dd00      	ble.n	8017842 <_dtoa_r+0x46e>
 8017840:	e0d6      	b.n	80179f0 <_dtoa_r+0x61c>
 8017842:	d000      	beq.n	8017846 <_dtoa_r+0x472>
 8017844:	e27f      	b.n	8017d46 <_dtoa_r+0x972>
 8017846:	9804      	ldr	r0, [sp, #16]
 8017848:	9905      	ldr	r1, [sp, #20]
 801784a:	2200      	movs	r2, #0
 801784c:	4b8f      	ldr	r3, [pc, #572]	; (8017a8c <_dtoa_r+0x6b8>)
 801784e:	f7ea fc27 	bl	80020a0 <__aeabi_dmul>
 8017852:	9a06      	ldr	r2, [sp, #24]
 8017854:	9b07      	ldr	r3, [sp, #28]
 8017856:	f7e8 fe25 	bl	80004a4 <__aeabi_dcmpge>
 801785a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801785c:	9304      	str	r3, [sp, #16]
 801785e:	001e      	movs	r6, r3
 8017860:	2800      	cmp	r0, #0
 8017862:	d000      	beq.n	8017866 <_dtoa_r+0x492>
 8017864:	e251      	b.n	8017d0a <_dtoa_r+0x936>
 8017866:	9b08      	ldr	r3, [sp, #32]
 8017868:	9a08      	ldr	r2, [sp, #32]
 801786a:	1c5d      	adds	r5, r3, #1
 801786c:	2331      	movs	r3, #49	; 0x31
 801786e:	3701      	adds	r7, #1
 8017870:	7013      	strb	r3, [r2, #0]
 8017872:	e24d      	b.n	8017d10 <_dtoa_r+0x93c>
 8017874:	4234      	tst	r4, r6
 8017876:	d00a      	beq.n	801788e <_dtoa_r+0x4ba>
 8017878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801787a:	4a86      	ldr	r2, [pc, #536]	; (8017a94 <_dtoa_r+0x6c0>)
 801787c:	3301      	adds	r3, #1
 801787e:	930e      	str	r3, [sp, #56]	; 0x38
 8017880:	00eb      	lsls	r3, r5, #3
 8017882:	189b      	adds	r3, r3, r2
 8017884:	681a      	ldr	r2, [r3, #0]
 8017886:	685b      	ldr	r3, [r3, #4]
 8017888:	f7ea fc0a 	bl	80020a0 <__aeabi_dmul>
 801788c:	0033      	movs	r3, r6
 801788e:	1064      	asrs	r4, r4, #1
 8017890:	3501      	adds	r5, #1
 8017892:	e75f      	b.n	8017754 <_dtoa_r+0x380>
 8017894:	003e      	movs	r6, r7
 8017896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017898:	e784      	b.n	80177a4 <_dtoa_r+0x3d0>
 801789a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801789c:	1e5a      	subs	r2, r3, #1
 801789e:	4b76      	ldr	r3, [pc, #472]	; (8017a78 <_dtoa_r+0x6a4>)
 80178a0:	00d2      	lsls	r2, r2, #3
 80178a2:	189b      	adds	r3, r3, r2
 80178a4:	6818      	ldr	r0, [r3, #0]
 80178a6:	6859      	ldr	r1, [r3, #4]
 80178a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d04b      	beq.n	8017946 <_dtoa_r+0x572>
 80178ae:	0002      	movs	r2, r0
 80178b0:	000b      	movs	r3, r1
 80178b2:	2000      	movs	r0, #0
 80178b4:	4978      	ldr	r1, [pc, #480]	; (8017a98 <_dtoa_r+0x6c4>)
 80178b6:	f7e9 ffe9 	bl	800188c <__aeabi_ddiv>
 80178ba:	002b      	movs	r3, r5
 80178bc:	0022      	movs	r2, r4
 80178be:	f7ea fe61 	bl	8002584 <__aeabi_dsub>
 80178c2:	9b08      	ldr	r3, [sp, #32]
 80178c4:	900e      	str	r0, [sp, #56]	; 0x38
 80178c6:	910f      	str	r1, [sp, #60]	; 0x3c
 80178c8:	9315      	str	r3, [sp, #84]	; 0x54
 80178ca:	9806      	ldr	r0, [sp, #24]
 80178cc:	9907      	ldr	r1, [sp, #28]
 80178ce:	f7eb f9bd 	bl	8002c4c <__aeabi_d2iz>
 80178d2:	0004      	movs	r4, r0
 80178d4:	f7eb f9f0 	bl	8002cb8 <__aeabi_i2d>
 80178d8:	0002      	movs	r2, r0
 80178da:	000b      	movs	r3, r1
 80178dc:	9806      	ldr	r0, [sp, #24]
 80178de:	9907      	ldr	r1, [sp, #28]
 80178e0:	f7ea fe50 	bl	8002584 <__aeabi_dsub>
 80178e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80178e6:	3430      	adds	r4, #48	; 0x30
 80178e8:	1c5d      	adds	r5, r3, #1
 80178ea:	701c      	strb	r4, [r3, #0]
 80178ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80178ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178f0:	9006      	str	r0, [sp, #24]
 80178f2:	9107      	str	r1, [sp, #28]
 80178f4:	f7e8 fdb8 	bl	8000468 <__aeabi_dcmplt>
 80178f8:	2800      	cmp	r0, #0
 80178fa:	d16c      	bne.n	80179d6 <_dtoa_r+0x602>
 80178fc:	9a06      	ldr	r2, [sp, #24]
 80178fe:	9b07      	ldr	r3, [sp, #28]
 8017900:	2000      	movs	r0, #0
 8017902:	495e      	ldr	r1, [pc, #376]	; (8017a7c <_dtoa_r+0x6a8>)
 8017904:	f7ea fe3e 	bl	8002584 <__aeabi_dsub>
 8017908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801790a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801790c:	f7e8 fdac 	bl	8000468 <__aeabi_dcmplt>
 8017910:	2800      	cmp	r0, #0
 8017912:	d000      	beq.n	8017916 <_dtoa_r+0x542>
 8017914:	e0c3      	b.n	8017a9e <_dtoa_r+0x6ca>
 8017916:	9b08      	ldr	r3, [sp, #32]
 8017918:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801791a:	1aeb      	subs	r3, r5, r3
 801791c:	429a      	cmp	r2, r3
 801791e:	dc00      	bgt.n	8017922 <_dtoa_r+0x54e>
 8017920:	e775      	b.n	801780e <_dtoa_r+0x43a>
 8017922:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017924:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017926:	2200      	movs	r2, #0
 8017928:	4b55      	ldr	r3, [pc, #340]	; (8017a80 <_dtoa_r+0x6ac>)
 801792a:	f7ea fbb9 	bl	80020a0 <__aeabi_dmul>
 801792e:	2200      	movs	r2, #0
 8017930:	900e      	str	r0, [sp, #56]	; 0x38
 8017932:	910f      	str	r1, [sp, #60]	; 0x3c
 8017934:	9806      	ldr	r0, [sp, #24]
 8017936:	9907      	ldr	r1, [sp, #28]
 8017938:	4b51      	ldr	r3, [pc, #324]	; (8017a80 <_dtoa_r+0x6ac>)
 801793a:	f7ea fbb1 	bl	80020a0 <__aeabi_dmul>
 801793e:	9515      	str	r5, [sp, #84]	; 0x54
 8017940:	9006      	str	r0, [sp, #24]
 8017942:	9107      	str	r1, [sp, #28]
 8017944:	e7c1      	b.n	80178ca <_dtoa_r+0x4f6>
 8017946:	0022      	movs	r2, r4
 8017948:	002b      	movs	r3, r5
 801794a:	f7ea fba9 	bl	80020a0 <__aeabi_dmul>
 801794e:	9c08      	ldr	r4, [sp, #32]
 8017950:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017952:	0023      	movs	r3, r4
 8017954:	4694      	mov	ip, r2
 8017956:	900e      	str	r0, [sp, #56]	; 0x38
 8017958:	910f      	str	r1, [sp, #60]	; 0x3c
 801795a:	4463      	add	r3, ip
 801795c:	9315      	str	r3, [sp, #84]	; 0x54
 801795e:	9806      	ldr	r0, [sp, #24]
 8017960:	9907      	ldr	r1, [sp, #28]
 8017962:	f7eb f973 	bl	8002c4c <__aeabi_d2iz>
 8017966:	0005      	movs	r5, r0
 8017968:	f7eb f9a6 	bl	8002cb8 <__aeabi_i2d>
 801796c:	000b      	movs	r3, r1
 801796e:	0002      	movs	r2, r0
 8017970:	9806      	ldr	r0, [sp, #24]
 8017972:	9907      	ldr	r1, [sp, #28]
 8017974:	f7ea fe06 	bl	8002584 <__aeabi_dsub>
 8017978:	3530      	adds	r5, #48	; 0x30
 801797a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801797c:	7025      	strb	r5, [r4, #0]
 801797e:	3401      	adds	r4, #1
 8017980:	9006      	str	r0, [sp, #24]
 8017982:	9107      	str	r1, [sp, #28]
 8017984:	42a3      	cmp	r3, r4
 8017986:	d12a      	bne.n	80179de <_dtoa_r+0x60a>
 8017988:	980e      	ldr	r0, [sp, #56]	; 0x38
 801798a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801798c:	9a08      	ldr	r2, [sp, #32]
 801798e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017990:	4694      	mov	ip, r2
 8017992:	4463      	add	r3, ip
 8017994:	2200      	movs	r2, #0
 8017996:	001d      	movs	r5, r3
 8017998:	4b3f      	ldr	r3, [pc, #252]	; (8017a98 <_dtoa_r+0x6c4>)
 801799a:	f7e9 fc5b 	bl	8001254 <__aeabi_dadd>
 801799e:	0002      	movs	r2, r0
 80179a0:	000b      	movs	r3, r1
 80179a2:	9806      	ldr	r0, [sp, #24]
 80179a4:	9907      	ldr	r1, [sp, #28]
 80179a6:	f7e8 fd73 	bl	8000490 <__aeabi_dcmpgt>
 80179aa:	2800      	cmp	r0, #0
 80179ac:	d000      	beq.n	80179b0 <_dtoa_r+0x5dc>
 80179ae:	e076      	b.n	8017a9e <_dtoa_r+0x6ca>
 80179b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80179b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179b4:	2000      	movs	r0, #0
 80179b6:	4938      	ldr	r1, [pc, #224]	; (8017a98 <_dtoa_r+0x6c4>)
 80179b8:	f7ea fde4 	bl	8002584 <__aeabi_dsub>
 80179bc:	0002      	movs	r2, r0
 80179be:	000b      	movs	r3, r1
 80179c0:	9806      	ldr	r0, [sp, #24]
 80179c2:	9907      	ldr	r1, [sp, #28]
 80179c4:	f7e8 fd50 	bl	8000468 <__aeabi_dcmplt>
 80179c8:	2800      	cmp	r0, #0
 80179ca:	d100      	bne.n	80179ce <_dtoa_r+0x5fa>
 80179cc:	e71f      	b.n	801780e <_dtoa_r+0x43a>
 80179ce:	1e6b      	subs	r3, r5, #1
 80179d0:	781a      	ldrb	r2, [r3, #0]
 80179d2:	2a30      	cmp	r2, #48	; 0x30
 80179d4:	d001      	beq.n	80179da <_dtoa_r+0x606>
 80179d6:	0037      	movs	r7, r6
 80179d8:	e03f      	b.n	8017a5a <_dtoa_r+0x686>
 80179da:	001d      	movs	r5, r3
 80179dc:	e7f7      	b.n	80179ce <_dtoa_r+0x5fa>
 80179de:	9806      	ldr	r0, [sp, #24]
 80179e0:	9907      	ldr	r1, [sp, #28]
 80179e2:	2200      	movs	r2, #0
 80179e4:	4b26      	ldr	r3, [pc, #152]	; (8017a80 <_dtoa_r+0x6ac>)
 80179e6:	f7ea fb5b 	bl	80020a0 <__aeabi_dmul>
 80179ea:	9006      	str	r0, [sp, #24]
 80179ec:	9107      	str	r1, [sp, #28]
 80179ee:	e7b6      	b.n	801795e <_dtoa_r+0x58a>
 80179f0:	9e08      	ldr	r6, [sp, #32]
 80179f2:	9a04      	ldr	r2, [sp, #16]
 80179f4:	9b05      	ldr	r3, [sp, #20]
 80179f6:	9806      	ldr	r0, [sp, #24]
 80179f8:	9907      	ldr	r1, [sp, #28]
 80179fa:	f7e9 ff47 	bl	800188c <__aeabi_ddiv>
 80179fe:	f7eb f925 	bl	8002c4c <__aeabi_d2iz>
 8017a02:	0004      	movs	r4, r0
 8017a04:	f7eb f958 	bl	8002cb8 <__aeabi_i2d>
 8017a08:	9a04      	ldr	r2, [sp, #16]
 8017a0a:	9b05      	ldr	r3, [sp, #20]
 8017a0c:	f7ea fb48 	bl	80020a0 <__aeabi_dmul>
 8017a10:	0002      	movs	r2, r0
 8017a12:	000b      	movs	r3, r1
 8017a14:	9806      	ldr	r0, [sp, #24]
 8017a16:	9907      	ldr	r1, [sp, #28]
 8017a18:	f7ea fdb4 	bl	8002584 <__aeabi_dsub>
 8017a1c:	0023      	movs	r3, r4
 8017a1e:	3330      	adds	r3, #48	; 0x30
 8017a20:	7033      	strb	r3, [r6, #0]
 8017a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a24:	9b08      	ldr	r3, [sp, #32]
 8017a26:	1c75      	adds	r5, r6, #1
 8017a28:	1aeb      	subs	r3, r5, r3
 8017a2a:	429a      	cmp	r2, r3
 8017a2c:	d148      	bne.n	8017ac0 <_dtoa_r+0x6ec>
 8017a2e:	0002      	movs	r2, r0
 8017a30:	000b      	movs	r3, r1
 8017a32:	f7e9 fc0f 	bl	8001254 <__aeabi_dadd>
 8017a36:	9a04      	ldr	r2, [sp, #16]
 8017a38:	9b05      	ldr	r3, [sp, #20]
 8017a3a:	9006      	str	r0, [sp, #24]
 8017a3c:	9107      	str	r1, [sp, #28]
 8017a3e:	f7e8 fd27 	bl	8000490 <__aeabi_dcmpgt>
 8017a42:	2800      	cmp	r0, #0
 8017a44:	d12a      	bne.n	8017a9c <_dtoa_r+0x6c8>
 8017a46:	9a04      	ldr	r2, [sp, #16]
 8017a48:	9b05      	ldr	r3, [sp, #20]
 8017a4a:	9806      	ldr	r0, [sp, #24]
 8017a4c:	9907      	ldr	r1, [sp, #28]
 8017a4e:	f7e8 fd05 	bl	800045c <__aeabi_dcmpeq>
 8017a52:	2800      	cmp	r0, #0
 8017a54:	d001      	beq.n	8017a5a <_dtoa_r+0x686>
 8017a56:	07e3      	lsls	r3, r4, #31
 8017a58:	d420      	bmi.n	8017a9c <_dtoa_r+0x6c8>
 8017a5a:	9903      	ldr	r1, [sp, #12]
 8017a5c:	9802      	ldr	r0, [sp, #8]
 8017a5e:	f000 ff35 	bl	80188cc <_Bfree>
 8017a62:	2300      	movs	r3, #0
 8017a64:	702b      	strb	r3, [r5, #0]
 8017a66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017a68:	3701      	adds	r7, #1
 8017a6a:	601f      	str	r7, [r3, #0]
 8017a6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d100      	bne.n	8017a74 <_dtoa_r+0x6a0>
 8017a72:	e4e4      	b.n	801743e <_dtoa_r+0x6a>
 8017a74:	601d      	str	r5, [r3, #0]
 8017a76:	e4e2      	b.n	801743e <_dtoa_r+0x6a>
 8017a78:	0801cc00 	.word	0x0801cc00
 8017a7c:	3ff00000 	.word	0x3ff00000
 8017a80:	40240000 	.word	0x40240000
 8017a84:	401c0000 	.word	0x401c0000
 8017a88:	fcc00000 	.word	0xfcc00000
 8017a8c:	40140000 	.word	0x40140000
 8017a90:	7cc00000 	.word	0x7cc00000
 8017a94:	0801cbd8 	.word	0x0801cbd8
 8017a98:	3fe00000 	.word	0x3fe00000
 8017a9c:	003e      	movs	r6, r7
 8017a9e:	1e6b      	subs	r3, r5, #1
 8017aa0:	781a      	ldrb	r2, [r3, #0]
 8017aa2:	2a39      	cmp	r2, #57	; 0x39
 8017aa4:	d106      	bne.n	8017ab4 <_dtoa_r+0x6e0>
 8017aa6:	9a08      	ldr	r2, [sp, #32]
 8017aa8:	429a      	cmp	r2, r3
 8017aaa:	d107      	bne.n	8017abc <_dtoa_r+0x6e8>
 8017aac:	2330      	movs	r3, #48	; 0x30
 8017aae:	7013      	strb	r3, [r2, #0]
 8017ab0:	0013      	movs	r3, r2
 8017ab2:	3601      	adds	r6, #1
 8017ab4:	781a      	ldrb	r2, [r3, #0]
 8017ab6:	3201      	adds	r2, #1
 8017ab8:	701a      	strb	r2, [r3, #0]
 8017aba:	e78c      	b.n	80179d6 <_dtoa_r+0x602>
 8017abc:	001d      	movs	r5, r3
 8017abe:	e7ee      	b.n	8017a9e <_dtoa_r+0x6ca>
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	4ba4      	ldr	r3, [pc, #656]	; (8017d54 <_dtoa_r+0x980>)
 8017ac4:	f7ea faec 	bl	80020a0 <__aeabi_dmul>
 8017ac8:	2200      	movs	r2, #0
 8017aca:	2300      	movs	r3, #0
 8017acc:	9006      	str	r0, [sp, #24]
 8017ace:	9107      	str	r1, [sp, #28]
 8017ad0:	002e      	movs	r6, r5
 8017ad2:	f7e8 fcc3 	bl	800045c <__aeabi_dcmpeq>
 8017ad6:	2800      	cmp	r0, #0
 8017ad8:	d08b      	beq.n	80179f2 <_dtoa_r+0x61e>
 8017ada:	e7be      	b.n	8017a5a <_dtoa_r+0x686>
 8017adc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017ade:	2a00      	cmp	r2, #0
 8017ae0:	d100      	bne.n	8017ae4 <_dtoa_r+0x710>
 8017ae2:	e0da      	b.n	8017c9a <_dtoa_r+0x8c6>
 8017ae4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017ae6:	2a01      	cmp	r2, #1
 8017ae8:	dd00      	ble.n	8017aec <_dtoa_r+0x718>
 8017aea:	e0bd      	b.n	8017c68 <_dtoa_r+0x894>
 8017aec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017aee:	2a00      	cmp	r2, #0
 8017af0:	d100      	bne.n	8017af4 <_dtoa_r+0x720>
 8017af2:	e0b5      	b.n	8017c60 <_dtoa_r+0x88c>
 8017af4:	4a98      	ldr	r2, [pc, #608]	; (8017d58 <_dtoa_r+0x984>)
 8017af6:	189b      	adds	r3, r3, r2
 8017af8:	9d04      	ldr	r5, [sp, #16]
 8017afa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017afc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017afe:	2101      	movs	r1, #1
 8017b00:	18d2      	adds	r2, r2, r3
 8017b02:	920a      	str	r2, [sp, #40]	; 0x28
 8017b04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017b06:	9802      	ldr	r0, [sp, #8]
 8017b08:	18d3      	adds	r3, r2, r3
 8017b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b0c:	f000 ffad 	bl	8018a6a <__i2b>
 8017b10:	0006      	movs	r6, r0
 8017b12:	2c00      	cmp	r4, #0
 8017b14:	dd0e      	ble.n	8017b34 <_dtoa_r+0x760>
 8017b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	dd0b      	ble.n	8017b34 <_dtoa_r+0x760>
 8017b1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017b1e:	0023      	movs	r3, r4
 8017b20:	4294      	cmp	r4, r2
 8017b22:	dd00      	ble.n	8017b26 <_dtoa_r+0x752>
 8017b24:	0013      	movs	r3, r2
 8017b26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b28:	1ae4      	subs	r4, r4, r3
 8017b2a:	1ad2      	subs	r2, r2, r3
 8017b2c:	920a      	str	r2, [sp, #40]	; 0x28
 8017b2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017b30:	1ad3      	subs	r3, r2, r3
 8017b32:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b34:	9b04      	ldr	r3, [sp, #16]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d01f      	beq.n	8017b7a <_dtoa_r+0x7a6>
 8017b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d100      	bne.n	8017b42 <_dtoa_r+0x76e>
 8017b40:	e0af      	b.n	8017ca2 <_dtoa_r+0x8ce>
 8017b42:	2d00      	cmp	r5, #0
 8017b44:	d011      	beq.n	8017b6a <_dtoa_r+0x796>
 8017b46:	0031      	movs	r1, r6
 8017b48:	002a      	movs	r2, r5
 8017b4a:	9802      	ldr	r0, [sp, #8]
 8017b4c:	f001 f826 	bl	8018b9c <__pow5mult>
 8017b50:	9a03      	ldr	r2, [sp, #12]
 8017b52:	0001      	movs	r1, r0
 8017b54:	0006      	movs	r6, r0
 8017b56:	9802      	ldr	r0, [sp, #8]
 8017b58:	f000 ff90 	bl	8018a7c <__multiply>
 8017b5c:	9903      	ldr	r1, [sp, #12]
 8017b5e:	9010      	str	r0, [sp, #64]	; 0x40
 8017b60:	9802      	ldr	r0, [sp, #8]
 8017b62:	f000 feb3 	bl	80188cc <_Bfree>
 8017b66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017b68:	9303      	str	r3, [sp, #12]
 8017b6a:	9b04      	ldr	r3, [sp, #16]
 8017b6c:	1b5a      	subs	r2, r3, r5
 8017b6e:	d004      	beq.n	8017b7a <_dtoa_r+0x7a6>
 8017b70:	9903      	ldr	r1, [sp, #12]
 8017b72:	9802      	ldr	r0, [sp, #8]
 8017b74:	f001 f812 	bl	8018b9c <__pow5mult>
 8017b78:	9003      	str	r0, [sp, #12]
 8017b7a:	2101      	movs	r1, #1
 8017b7c:	9802      	ldr	r0, [sp, #8]
 8017b7e:	f000 ff74 	bl	8018a6a <__i2b>
 8017b82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017b84:	9004      	str	r0, [sp, #16]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d100      	bne.n	8017b8c <_dtoa_r+0x7b8>
 8017b8a:	e1e3      	b.n	8017f54 <_dtoa_r+0xb80>
 8017b8c:	001a      	movs	r2, r3
 8017b8e:	0001      	movs	r1, r0
 8017b90:	9802      	ldr	r0, [sp, #8]
 8017b92:	f001 f803 	bl	8018b9c <__pow5mult>
 8017b96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017b98:	9004      	str	r0, [sp, #16]
 8017b9a:	2b01      	cmp	r3, #1
 8017b9c:	dd00      	ble.n	8017ba0 <_dtoa_r+0x7cc>
 8017b9e:	e082      	b.n	8017ca6 <_dtoa_r+0x8d2>
 8017ba0:	2500      	movs	r5, #0
 8017ba2:	9b06      	ldr	r3, [sp, #24]
 8017ba4:	42ab      	cmp	r3, r5
 8017ba6:	d10e      	bne.n	8017bc6 <_dtoa_r+0x7f2>
 8017ba8:	9b07      	ldr	r3, [sp, #28]
 8017baa:	031b      	lsls	r3, r3, #12
 8017bac:	42ab      	cmp	r3, r5
 8017bae:	d10a      	bne.n	8017bc6 <_dtoa_r+0x7f2>
 8017bb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017bb2:	9a07      	ldr	r2, [sp, #28]
 8017bb4:	4213      	tst	r3, r2
 8017bb6:	d006      	beq.n	8017bc6 <_dtoa_r+0x7f2>
 8017bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bba:	3501      	adds	r5, #1
 8017bbc:	3301      	adds	r3, #1
 8017bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8017bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bc2:	3301      	adds	r3, #1
 8017bc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8017bc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017bc8:	2001      	movs	r0, #1
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d16c      	bne.n	8017ca8 <_dtoa_r+0x8d4>
 8017bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bd0:	1818      	adds	r0, r3, r0
 8017bd2:	231f      	movs	r3, #31
 8017bd4:	4018      	ands	r0, r3
 8017bd6:	d07e      	beq.n	8017cd6 <_dtoa_r+0x902>
 8017bd8:	3301      	adds	r3, #1
 8017bda:	1a1b      	subs	r3, r3, r0
 8017bdc:	2b04      	cmp	r3, #4
 8017bde:	dd70      	ble.n	8017cc2 <_dtoa_r+0x8ee>
 8017be0:	231c      	movs	r3, #28
 8017be2:	1a18      	subs	r0, r3, r0
 8017be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017be6:	1824      	adds	r4, r4, r0
 8017be8:	181b      	adds	r3, r3, r0
 8017bea:	930a      	str	r3, [sp, #40]	; 0x28
 8017bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bee:	181b      	adds	r3, r3, r0
 8017bf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8017bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	dd05      	ble.n	8017c04 <_dtoa_r+0x830>
 8017bf8:	001a      	movs	r2, r3
 8017bfa:	9903      	ldr	r1, [sp, #12]
 8017bfc:	9802      	ldr	r0, [sp, #8]
 8017bfe:	f001 f80f 	bl	8018c20 <__lshift>
 8017c02:	9003      	str	r0, [sp, #12]
 8017c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	dd05      	ble.n	8017c16 <_dtoa_r+0x842>
 8017c0a:	001a      	movs	r2, r3
 8017c0c:	9904      	ldr	r1, [sp, #16]
 8017c0e:	9802      	ldr	r0, [sp, #8]
 8017c10:	f001 f806 	bl	8018c20 <__lshift>
 8017c14:	9004      	str	r0, [sp, #16]
 8017c16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d05e      	beq.n	8017cda <_dtoa_r+0x906>
 8017c1c:	9904      	ldr	r1, [sp, #16]
 8017c1e:	9803      	ldr	r0, [sp, #12]
 8017c20:	f001 f850 	bl	8018cc4 <__mcmp>
 8017c24:	2800      	cmp	r0, #0
 8017c26:	da58      	bge.n	8017cda <_dtoa_r+0x906>
 8017c28:	2300      	movs	r3, #0
 8017c2a:	220a      	movs	r2, #10
 8017c2c:	9903      	ldr	r1, [sp, #12]
 8017c2e:	9802      	ldr	r0, [sp, #8]
 8017c30:	f000 fe56 	bl	80188e0 <__multadd>
 8017c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c36:	3f01      	subs	r7, #1
 8017c38:	9003      	str	r0, [sp, #12]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d100      	bne.n	8017c40 <_dtoa_r+0x86c>
 8017c3e:	e190      	b.n	8017f62 <_dtoa_r+0xb8e>
 8017c40:	2300      	movs	r3, #0
 8017c42:	0031      	movs	r1, r6
 8017c44:	220a      	movs	r2, #10
 8017c46:	9802      	ldr	r0, [sp, #8]
 8017c48:	f000 fe4a 	bl	80188e0 <__multadd>
 8017c4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c4e:	0006      	movs	r6, r0
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	dd00      	ble.n	8017c56 <_dtoa_r+0x882>
 8017c54:	e088      	b.n	8017d68 <_dtoa_r+0x994>
 8017c56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017c58:	2b02      	cmp	r3, #2
 8017c5a:	dc00      	bgt.n	8017c5e <_dtoa_r+0x88a>
 8017c5c:	e084      	b.n	8017d68 <_dtoa_r+0x994>
 8017c5e:	e044      	b.n	8017cea <_dtoa_r+0x916>
 8017c60:	2336      	movs	r3, #54	; 0x36
 8017c62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017c64:	1a9b      	subs	r3, r3, r2
 8017c66:	e747      	b.n	8017af8 <_dtoa_r+0x724>
 8017c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c6a:	1e5d      	subs	r5, r3, #1
 8017c6c:	9b04      	ldr	r3, [sp, #16]
 8017c6e:	42ab      	cmp	r3, r5
 8017c70:	db08      	blt.n	8017c84 <_dtoa_r+0x8b0>
 8017c72:	1b5d      	subs	r5, r3, r5
 8017c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	da0c      	bge.n	8017c94 <_dtoa_r+0x8c0>
 8017c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c7e:	1a9c      	subs	r4, r3, r2
 8017c80:	2300      	movs	r3, #0
 8017c82:	e73b      	b.n	8017afc <_dtoa_r+0x728>
 8017c84:	9b04      	ldr	r3, [sp, #16]
 8017c86:	9504      	str	r5, [sp, #16]
 8017c88:	1aea      	subs	r2, r5, r3
 8017c8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017c8c:	2500      	movs	r5, #0
 8017c8e:	189b      	adds	r3, r3, r2
 8017c90:	9311      	str	r3, [sp, #68]	; 0x44
 8017c92:	e7ef      	b.n	8017c74 <_dtoa_r+0x8a0>
 8017c94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c98:	e730      	b.n	8017afc <_dtoa_r+0x728>
 8017c9a:	9d04      	ldr	r5, [sp, #16]
 8017c9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017c9e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8017ca0:	e737      	b.n	8017b12 <_dtoa_r+0x73e>
 8017ca2:	9a04      	ldr	r2, [sp, #16]
 8017ca4:	e764      	b.n	8017b70 <_dtoa_r+0x79c>
 8017ca6:	2500      	movs	r5, #0
 8017ca8:	9b04      	ldr	r3, [sp, #16]
 8017caa:	9a04      	ldr	r2, [sp, #16]
 8017cac:	691b      	ldr	r3, [r3, #16]
 8017cae:	9310      	str	r3, [sp, #64]	; 0x40
 8017cb0:	3303      	adds	r3, #3
 8017cb2:	009b      	lsls	r3, r3, #2
 8017cb4:	18d3      	adds	r3, r2, r3
 8017cb6:	6858      	ldr	r0, [r3, #4]
 8017cb8:	f000 fe8e 	bl	80189d8 <__hi0bits>
 8017cbc:	2320      	movs	r3, #32
 8017cbe:	1a18      	subs	r0, r3, r0
 8017cc0:	e785      	b.n	8017bce <_dtoa_r+0x7fa>
 8017cc2:	2b04      	cmp	r3, #4
 8017cc4:	d095      	beq.n	8017bf2 <_dtoa_r+0x81e>
 8017cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017cc8:	331c      	adds	r3, #28
 8017cca:	18d2      	adds	r2, r2, r3
 8017ccc:	920a      	str	r2, [sp, #40]	; 0x28
 8017cce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017cd0:	18e4      	adds	r4, r4, r3
 8017cd2:	18d3      	adds	r3, r2, r3
 8017cd4:	e78c      	b.n	8017bf0 <_dtoa_r+0x81c>
 8017cd6:	0003      	movs	r3, r0
 8017cd8:	e7f5      	b.n	8017cc6 <_dtoa_r+0x8f2>
 8017cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	dc3d      	bgt.n	8017d5c <_dtoa_r+0x988>
 8017ce0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017ce2:	2b02      	cmp	r3, #2
 8017ce4:	dd3a      	ble.n	8017d5c <_dtoa_r+0x988>
 8017ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ce8:	930c      	str	r3, [sp, #48]	; 0x30
 8017cea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d10c      	bne.n	8017d0a <_dtoa_r+0x936>
 8017cf0:	9904      	ldr	r1, [sp, #16]
 8017cf2:	2205      	movs	r2, #5
 8017cf4:	9802      	ldr	r0, [sp, #8]
 8017cf6:	f000 fdf3 	bl	80188e0 <__multadd>
 8017cfa:	9004      	str	r0, [sp, #16]
 8017cfc:	0001      	movs	r1, r0
 8017cfe:	9803      	ldr	r0, [sp, #12]
 8017d00:	f000 ffe0 	bl	8018cc4 <__mcmp>
 8017d04:	2800      	cmp	r0, #0
 8017d06:	dd00      	ble.n	8017d0a <_dtoa_r+0x936>
 8017d08:	e5ad      	b.n	8017866 <_dtoa_r+0x492>
 8017d0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d0c:	9d08      	ldr	r5, [sp, #32]
 8017d0e:	43df      	mvns	r7, r3
 8017d10:	2300      	movs	r3, #0
 8017d12:	9309      	str	r3, [sp, #36]	; 0x24
 8017d14:	9904      	ldr	r1, [sp, #16]
 8017d16:	9802      	ldr	r0, [sp, #8]
 8017d18:	f000 fdd8 	bl	80188cc <_Bfree>
 8017d1c:	2e00      	cmp	r6, #0
 8017d1e:	d100      	bne.n	8017d22 <_dtoa_r+0x94e>
 8017d20:	e69b      	b.n	8017a5a <_dtoa_r+0x686>
 8017d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d005      	beq.n	8017d34 <_dtoa_r+0x960>
 8017d28:	42b3      	cmp	r3, r6
 8017d2a:	d003      	beq.n	8017d34 <_dtoa_r+0x960>
 8017d2c:	0019      	movs	r1, r3
 8017d2e:	9802      	ldr	r0, [sp, #8]
 8017d30:	f000 fdcc 	bl	80188cc <_Bfree>
 8017d34:	0031      	movs	r1, r6
 8017d36:	9802      	ldr	r0, [sp, #8]
 8017d38:	f000 fdc8 	bl	80188cc <_Bfree>
 8017d3c:	e68d      	b.n	8017a5a <_dtoa_r+0x686>
 8017d3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d40:	9304      	str	r3, [sp, #16]
 8017d42:	001e      	movs	r6, r3
 8017d44:	e7e1      	b.n	8017d0a <_dtoa_r+0x936>
 8017d46:	2300      	movs	r3, #0
 8017d48:	e7fa      	b.n	8017d40 <_dtoa_r+0x96c>
 8017d4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d4c:	0037      	movs	r7, r6
 8017d4e:	9304      	str	r3, [sp, #16]
 8017d50:	001e      	movs	r6, r3
 8017d52:	e588      	b.n	8017866 <_dtoa_r+0x492>
 8017d54:	40240000 	.word	0x40240000
 8017d58:	00000433 	.word	0x00000433
 8017d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d100      	bne.n	8017d64 <_dtoa_r+0x990>
 8017d62:	e0b2      	b.n	8017eca <_dtoa_r+0xaf6>
 8017d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d66:	930c      	str	r3, [sp, #48]	; 0x30
 8017d68:	2c00      	cmp	r4, #0
 8017d6a:	dd05      	ble.n	8017d78 <_dtoa_r+0x9a4>
 8017d6c:	0031      	movs	r1, r6
 8017d6e:	0022      	movs	r2, r4
 8017d70:	9802      	ldr	r0, [sp, #8]
 8017d72:	f000 ff55 	bl	8018c20 <__lshift>
 8017d76:	0006      	movs	r6, r0
 8017d78:	0030      	movs	r0, r6
 8017d7a:	2d00      	cmp	r5, #0
 8017d7c:	d011      	beq.n	8017da2 <_dtoa_r+0x9ce>
 8017d7e:	6871      	ldr	r1, [r6, #4]
 8017d80:	9802      	ldr	r0, [sp, #8]
 8017d82:	f000 fd7b 	bl	801887c <_Balloc>
 8017d86:	0031      	movs	r1, r6
 8017d88:	0004      	movs	r4, r0
 8017d8a:	6933      	ldr	r3, [r6, #16]
 8017d8c:	310c      	adds	r1, #12
 8017d8e:	1c9a      	adds	r2, r3, #2
 8017d90:	0092      	lsls	r2, r2, #2
 8017d92:	300c      	adds	r0, #12
 8017d94:	f7fc fe8b 	bl	8014aae <memcpy>
 8017d98:	2201      	movs	r2, #1
 8017d9a:	0021      	movs	r1, r4
 8017d9c:	9802      	ldr	r0, [sp, #8]
 8017d9e:	f000 ff3f 	bl	8018c20 <__lshift>
 8017da2:	9609      	str	r6, [sp, #36]	; 0x24
 8017da4:	0006      	movs	r6, r0
 8017da6:	9b08      	ldr	r3, [sp, #32]
 8017da8:	930a      	str	r3, [sp, #40]	; 0x28
 8017daa:	9904      	ldr	r1, [sp, #16]
 8017dac:	9803      	ldr	r0, [sp, #12]
 8017dae:	f7ff fa8b 	bl	80172c8 <quorem>
 8017db2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017db4:	900d      	str	r0, [sp, #52]	; 0x34
 8017db6:	0004      	movs	r4, r0
 8017db8:	9803      	ldr	r0, [sp, #12]
 8017dba:	f000 ff83 	bl	8018cc4 <__mcmp>
 8017dbe:	0032      	movs	r2, r6
 8017dc0:	9010      	str	r0, [sp, #64]	; 0x40
 8017dc2:	9904      	ldr	r1, [sp, #16]
 8017dc4:	9802      	ldr	r0, [sp, #8]
 8017dc6:	f000 ff97 	bl	8018cf8 <__mdiff>
 8017dca:	2301      	movs	r3, #1
 8017dcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8017dce:	68c3      	ldr	r3, [r0, #12]
 8017dd0:	3430      	adds	r4, #48	; 0x30
 8017dd2:	0005      	movs	r5, r0
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d104      	bne.n	8017de2 <_dtoa_r+0xa0e>
 8017dd8:	0001      	movs	r1, r0
 8017dda:	9803      	ldr	r0, [sp, #12]
 8017ddc:	f000 ff72 	bl	8018cc4 <__mcmp>
 8017de0:	900b      	str	r0, [sp, #44]	; 0x2c
 8017de2:	0029      	movs	r1, r5
 8017de4:	9802      	ldr	r0, [sp, #8]
 8017de6:	f000 fd71 	bl	80188cc <_Bfree>
 8017dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017dee:	4313      	orrs	r3, r2
 8017df0:	d10e      	bne.n	8017e10 <_dtoa_r+0xa3c>
 8017df2:	9a06      	ldr	r2, [sp, #24]
 8017df4:	3301      	adds	r3, #1
 8017df6:	4213      	tst	r3, r2
 8017df8:	d10a      	bne.n	8017e10 <_dtoa_r+0xa3c>
 8017dfa:	2c39      	cmp	r4, #57	; 0x39
 8017dfc:	d026      	beq.n	8017e4c <_dtoa_r+0xa78>
 8017dfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	dd01      	ble.n	8017e08 <_dtoa_r+0xa34>
 8017e04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017e06:	3431      	adds	r4, #49	; 0x31
 8017e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e0a:	1c5d      	adds	r5, r3, #1
 8017e0c:	701c      	strb	r4, [r3, #0]
 8017e0e:	e781      	b.n	8017d14 <_dtoa_r+0x940>
 8017e10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	db07      	blt.n	8017e26 <_dtoa_r+0xa52>
 8017e16:	001d      	movs	r5, r3
 8017e18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017e1a:	431d      	orrs	r5, r3
 8017e1c:	d122      	bne.n	8017e64 <_dtoa_r+0xa90>
 8017e1e:	2301      	movs	r3, #1
 8017e20:	9a06      	ldr	r2, [sp, #24]
 8017e22:	4213      	tst	r3, r2
 8017e24:	d11e      	bne.n	8017e64 <_dtoa_r+0xa90>
 8017e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	dded      	ble.n	8017e08 <_dtoa_r+0xa34>
 8017e2c:	9903      	ldr	r1, [sp, #12]
 8017e2e:	2201      	movs	r2, #1
 8017e30:	9802      	ldr	r0, [sp, #8]
 8017e32:	f000 fef5 	bl	8018c20 <__lshift>
 8017e36:	9904      	ldr	r1, [sp, #16]
 8017e38:	9003      	str	r0, [sp, #12]
 8017e3a:	f000 ff43 	bl	8018cc4 <__mcmp>
 8017e3e:	2800      	cmp	r0, #0
 8017e40:	dc02      	bgt.n	8017e48 <_dtoa_r+0xa74>
 8017e42:	d1e1      	bne.n	8017e08 <_dtoa_r+0xa34>
 8017e44:	07e3      	lsls	r3, r4, #31
 8017e46:	d5df      	bpl.n	8017e08 <_dtoa_r+0xa34>
 8017e48:	2c39      	cmp	r4, #57	; 0x39
 8017e4a:	d1db      	bne.n	8017e04 <_dtoa_r+0xa30>
 8017e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017e50:	1c5d      	adds	r5, r3, #1
 8017e52:	2339      	movs	r3, #57	; 0x39
 8017e54:	7013      	strb	r3, [r2, #0]
 8017e56:	1e6b      	subs	r3, r5, #1
 8017e58:	781a      	ldrb	r2, [r3, #0]
 8017e5a:	2a39      	cmp	r2, #57	; 0x39
 8017e5c:	d067      	beq.n	8017f2e <_dtoa_r+0xb5a>
 8017e5e:	3201      	adds	r2, #1
 8017e60:	701a      	strb	r2, [r3, #0]
 8017e62:	e757      	b.n	8017d14 <_dtoa_r+0x940>
 8017e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e66:	1c5d      	adds	r5, r3, #1
 8017e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	dd04      	ble.n	8017e78 <_dtoa_r+0xaa4>
 8017e6e:	2c39      	cmp	r4, #57	; 0x39
 8017e70:	d0ec      	beq.n	8017e4c <_dtoa_r+0xa78>
 8017e72:	3401      	adds	r4, #1
 8017e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e76:	e7c9      	b.n	8017e0c <_dtoa_r+0xa38>
 8017e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017e7c:	701c      	strb	r4, [r3, #0]
 8017e7e:	9b08      	ldr	r3, [sp, #32]
 8017e80:	1aeb      	subs	r3, r5, r3
 8017e82:	4293      	cmp	r3, r2
 8017e84:	d03e      	beq.n	8017f04 <_dtoa_r+0xb30>
 8017e86:	2300      	movs	r3, #0
 8017e88:	220a      	movs	r2, #10
 8017e8a:	9903      	ldr	r1, [sp, #12]
 8017e8c:	9802      	ldr	r0, [sp, #8]
 8017e8e:	f000 fd27 	bl	80188e0 <__multadd>
 8017e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e94:	9003      	str	r0, [sp, #12]
 8017e96:	42b3      	cmp	r3, r6
 8017e98:	d109      	bne.n	8017eae <_dtoa_r+0xada>
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	220a      	movs	r2, #10
 8017e9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ea0:	9802      	ldr	r0, [sp, #8]
 8017ea2:	f000 fd1d 	bl	80188e0 <__multadd>
 8017ea6:	9009      	str	r0, [sp, #36]	; 0x24
 8017ea8:	0006      	movs	r6, r0
 8017eaa:	950a      	str	r5, [sp, #40]	; 0x28
 8017eac:	e77d      	b.n	8017daa <_dtoa_r+0x9d6>
 8017eae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	220a      	movs	r2, #10
 8017eb4:	9802      	ldr	r0, [sp, #8]
 8017eb6:	f000 fd13 	bl	80188e0 <__multadd>
 8017eba:	2300      	movs	r3, #0
 8017ebc:	9009      	str	r0, [sp, #36]	; 0x24
 8017ebe:	220a      	movs	r2, #10
 8017ec0:	0031      	movs	r1, r6
 8017ec2:	9802      	ldr	r0, [sp, #8]
 8017ec4:	f000 fd0c 	bl	80188e0 <__multadd>
 8017ec8:	e7ee      	b.n	8017ea8 <_dtoa_r+0xad4>
 8017eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ecc:	930c      	str	r3, [sp, #48]	; 0x30
 8017ece:	9b08      	ldr	r3, [sp, #32]
 8017ed0:	9306      	str	r3, [sp, #24]
 8017ed2:	9904      	ldr	r1, [sp, #16]
 8017ed4:	9803      	ldr	r0, [sp, #12]
 8017ed6:	f7ff f9f7 	bl	80172c8 <quorem>
 8017eda:	9b06      	ldr	r3, [sp, #24]
 8017edc:	3030      	adds	r0, #48	; 0x30
 8017ede:	1c5d      	adds	r5, r3, #1
 8017ee0:	7018      	strb	r0, [r3, #0]
 8017ee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ee4:	9b08      	ldr	r3, [sp, #32]
 8017ee6:	0004      	movs	r4, r0
 8017ee8:	1aeb      	subs	r3, r5, r3
 8017eea:	429a      	cmp	r2, r3
 8017eec:	dd08      	ble.n	8017f00 <_dtoa_r+0xb2c>
 8017eee:	2300      	movs	r3, #0
 8017ef0:	220a      	movs	r2, #10
 8017ef2:	9903      	ldr	r1, [sp, #12]
 8017ef4:	9802      	ldr	r0, [sp, #8]
 8017ef6:	f000 fcf3 	bl	80188e0 <__multadd>
 8017efa:	9506      	str	r5, [sp, #24]
 8017efc:	9003      	str	r0, [sp, #12]
 8017efe:	e7e8      	b.n	8017ed2 <_dtoa_r+0xafe>
 8017f00:	2300      	movs	r3, #0
 8017f02:	9309      	str	r3, [sp, #36]	; 0x24
 8017f04:	9903      	ldr	r1, [sp, #12]
 8017f06:	2201      	movs	r2, #1
 8017f08:	9802      	ldr	r0, [sp, #8]
 8017f0a:	f000 fe89 	bl	8018c20 <__lshift>
 8017f0e:	9904      	ldr	r1, [sp, #16]
 8017f10:	9003      	str	r0, [sp, #12]
 8017f12:	f000 fed7 	bl	8018cc4 <__mcmp>
 8017f16:	2800      	cmp	r0, #0
 8017f18:	dc9d      	bgt.n	8017e56 <_dtoa_r+0xa82>
 8017f1a:	d101      	bne.n	8017f20 <_dtoa_r+0xb4c>
 8017f1c:	07e3      	lsls	r3, r4, #31
 8017f1e:	d49a      	bmi.n	8017e56 <_dtoa_r+0xa82>
 8017f20:	1e6b      	subs	r3, r5, #1
 8017f22:	781a      	ldrb	r2, [r3, #0]
 8017f24:	2a30      	cmp	r2, #48	; 0x30
 8017f26:	d000      	beq.n	8017f2a <_dtoa_r+0xb56>
 8017f28:	e6f4      	b.n	8017d14 <_dtoa_r+0x940>
 8017f2a:	001d      	movs	r5, r3
 8017f2c:	e7f8      	b.n	8017f20 <_dtoa_r+0xb4c>
 8017f2e:	9a08      	ldr	r2, [sp, #32]
 8017f30:	429a      	cmp	r2, r3
 8017f32:	d103      	bne.n	8017f3c <_dtoa_r+0xb68>
 8017f34:	2331      	movs	r3, #49	; 0x31
 8017f36:	3701      	adds	r7, #1
 8017f38:	7013      	strb	r3, [r2, #0]
 8017f3a:	e6eb      	b.n	8017d14 <_dtoa_r+0x940>
 8017f3c:	001d      	movs	r5, r3
 8017f3e:	e78a      	b.n	8017e56 <_dtoa_r+0xa82>
 8017f40:	4b0b      	ldr	r3, [pc, #44]	; (8017f70 <_dtoa_r+0xb9c>)
 8017f42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017f44:	9308      	str	r3, [sp, #32]
 8017f46:	4b0b      	ldr	r3, [pc, #44]	; (8017f74 <_dtoa_r+0xba0>)
 8017f48:	2a00      	cmp	r2, #0
 8017f4a:	d001      	beq.n	8017f50 <_dtoa_r+0xb7c>
 8017f4c:	f7ff fa75 	bl	801743a <_dtoa_r+0x66>
 8017f50:	f7ff fa75 	bl	801743e <_dtoa_r+0x6a>
 8017f54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017f56:	2b01      	cmp	r3, #1
 8017f58:	dc00      	bgt.n	8017f5c <_dtoa_r+0xb88>
 8017f5a:	e621      	b.n	8017ba0 <_dtoa_r+0x7cc>
 8017f5c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017f5e:	2001      	movs	r0, #1
 8017f60:	e635      	b.n	8017bce <_dtoa_r+0x7fa>
 8017f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	dcb2      	bgt.n	8017ece <_dtoa_r+0xafa>
 8017f68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017f6a:	2b02      	cmp	r3, #2
 8017f6c:	ddaf      	ble.n	8017ece <_dtoa_r+0xafa>
 8017f6e:	e6bc      	b.n	8017cea <_dtoa_r+0x916>
 8017f70:	0801cbc5 	.word	0x0801cbc5
 8017f74:	0801cbcd 	.word	0x0801cbcd

08017f78 <__errno>:
 8017f78:	4b01      	ldr	r3, [pc, #4]	; (8017f80 <__errno+0x8>)
 8017f7a:	6818      	ldr	r0, [r3, #0]
 8017f7c:	4770      	bx	lr
 8017f7e:	46c0      	nop			; (mov r8, r8)
 8017f80:	200000b8 	.word	0x200000b8

08017f84 <__libc_fini_array>:
 8017f84:	b570      	push	{r4, r5, r6, lr}
 8017f86:	4d07      	ldr	r5, [pc, #28]	; (8017fa4 <__libc_fini_array+0x20>)
 8017f88:	4c07      	ldr	r4, [pc, #28]	; (8017fa8 <__libc_fini_array+0x24>)
 8017f8a:	1b64      	subs	r4, r4, r5
 8017f8c:	10a4      	asrs	r4, r4, #2
 8017f8e:	2c00      	cmp	r4, #0
 8017f90:	d102      	bne.n	8017f98 <__libc_fini_array+0x14>
 8017f92:	f001 f987 	bl	80192a4 <_fini>
 8017f96:	bd70      	pop	{r4, r5, r6, pc}
 8017f98:	3c01      	subs	r4, #1
 8017f9a:	00a3      	lsls	r3, r4, #2
 8017f9c:	58eb      	ldr	r3, [r5, r3]
 8017f9e:	4798      	blx	r3
 8017fa0:	e7f5      	b.n	8017f8e <__libc_fini_array+0xa>
 8017fa2:	46c0      	nop			; (mov r8, r8)
 8017fa4:	0801cce4 	.word	0x0801cce4
 8017fa8:	0801cce8 	.word	0x0801cce8

08017fac <_malloc_trim_r>:
 8017fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017fae:	0005      	movs	r5, r0
 8017fb0:	2008      	movs	r0, #8
 8017fb2:	000c      	movs	r4, r1
 8017fb4:	f7ff f95c 	bl	8017270 <sysconf>
 8017fb8:	0007      	movs	r7, r0
 8017fba:	0028      	movs	r0, r5
 8017fbc:	f7fc fd88 	bl	8014ad0 <__malloc_lock>
 8017fc0:	2203      	movs	r2, #3
 8017fc2:	4e21      	ldr	r6, [pc, #132]	; (8018048 <_malloc_trim_r+0x9c>)
 8017fc4:	0039      	movs	r1, r7
 8017fc6:	68b3      	ldr	r3, [r6, #8]
 8017fc8:	685b      	ldr	r3, [r3, #4]
 8017fca:	4393      	bics	r3, r2
 8017fcc:	1b18      	subs	r0, r3, r4
 8017fce:	3811      	subs	r0, #17
 8017fd0:	19c0      	adds	r0, r0, r7
 8017fd2:	9301      	str	r3, [sp, #4]
 8017fd4:	f7e8 f8bc 	bl	8000150 <__udivsi3>
 8017fd8:	1e44      	subs	r4, r0, #1
 8017fda:	437c      	muls	r4, r7
 8017fdc:	42a7      	cmp	r7, r4
 8017fde:	dd04      	ble.n	8017fea <_malloc_trim_r+0x3e>
 8017fe0:	0028      	movs	r0, r5
 8017fe2:	f7fc fd7d 	bl	8014ae0 <__malloc_unlock>
 8017fe6:	2000      	movs	r0, #0
 8017fe8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017fea:	2100      	movs	r1, #0
 8017fec:	0028      	movs	r0, r5
 8017fee:	f7fc ff4f 	bl	8014e90 <_sbrk_r>
 8017ff2:	68b3      	ldr	r3, [r6, #8]
 8017ff4:	9a01      	ldr	r2, [sp, #4]
 8017ff6:	189b      	adds	r3, r3, r2
 8017ff8:	4298      	cmp	r0, r3
 8017ffa:	d1f1      	bne.n	8017fe0 <_malloc_trim_r+0x34>
 8017ffc:	4261      	negs	r1, r4
 8017ffe:	0028      	movs	r0, r5
 8018000:	f7fc ff46 	bl	8014e90 <_sbrk_r>
 8018004:	1c43      	adds	r3, r0, #1
 8018006:	d110      	bne.n	801802a <_malloc_trim_r+0x7e>
 8018008:	2100      	movs	r1, #0
 801800a:	0028      	movs	r0, r5
 801800c:	f7fc ff40 	bl	8014e90 <_sbrk_r>
 8018010:	68b2      	ldr	r2, [r6, #8]
 8018012:	1a81      	subs	r1, r0, r2
 8018014:	290f      	cmp	r1, #15
 8018016:	dde3      	ble.n	8017fe0 <_malloc_trim_r+0x34>
 8018018:	4b0c      	ldr	r3, [pc, #48]	; (801804c <_malloc_trim_r+0xa0>)
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	1ac0      	subs	r0, r0, r3
 801801e:	4b0c      	ldr	r3, [pc, #48]	; (8018050 <_malloc_trim_r+0xa4>)
 8018020:	6018      	str	r0, [r3, #0]
 8018022:	2301      	movs	r3, #1
 8018024:	430b      	orrs	r3, r1
 8018026:	6053      	str	r3, [r2, #4]
 8018028:	e7da      	b.n	8017fe0 <_malloc_trim_r+0x34>
 801802a:	68b2      	ldr	r2, [r6, #8]
 801802c:	2601      	movs	r6, #1
 801802e:	9b01      	ldr	r3, [sp, #4]
 8018030:	0028      	movs	r0, r5
 8018032:	1b1b      	subs	r3, r3, r4
 8018034:	4333      	orrs	r3, r6
 8018036:	6053      	str	r3, [r2, #4]
 8018038:	4b05      	ldr	r3, [pc, #20]	; (8018050 <_malloc_trim_r+0xa4>)
 801803a:	681a      	ldr	r2, [r3, #0]
 801803c:	1b14      	subs	r4, r2, r4
 801803e:	601c      	str	r4, [r3, #0]
 8018040:	f7fc fd4e 	bl	8014ae0 <__malloc_unlock>
 8018044:	0030      	movs	r0, r6
 8018046:	e7cf      	b.n	8017fe8 <_malloc_trim_r+0x3c>
 8018048:	20000654 	.word	0x20000654
 801804c:	20000a5c 	.word	0x20000a5c
 8018050:	20006b38 	.word	0x20006b38

08018054 <_free_r>:
 8018054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018056:	1e0d      	subs	r5, r1, #0
 8018058:	9001      	str	r0, [sp, #4]
 801805a:	d02d      	beq.n	80180b8 <_free_r+0x64>
 801805c:	f7fc fd38 	bl	8014ad0 <__malloc_lock>
 8018060:	2301      	movs	r3, #1
 8018062:	0029      	movs	r1, r5
 8018064:	469c      	mov	ip, r3
 8018066:	3908      	subs	r1, #8
 8018068:	684f      	ldr	r7, [r1, #4]
 801806a:	4662      	mov	r2, ip
 801806c:	003b      	movs	r3, r7
 801806e:	4666      	mov	r6, ip
 8018070:	4393      	bics	r3, r2
 8018072:	18c8      	adds	r0, r1, r3
 8018074:	6845      	ldr	r5, [r0, #4]
 8018076:	3202      	adds	r2, #2
 8018078:	4395      	bics	r5, r2
 801807a:	4a4a      	ldr	r2, [pc, #296]	; (80181a4 <_free_r+0x150>)
 801807c:	4037      	ands	r7, r6
 801807e:	6896      	ldr	r6, [r2, #8]
 8018080:	4286      	cmp	r6, r0
 8018082:	d11a      	bne.n	80180ba <_free_r+0x66>
 8018084:	195b      	adds	r3, r3, r5
 8018086:	2f00      	cmp	r7, #0
 8018088:	d106      	bne.n	8018098 <_free_r+0x44>
 801808a:	6808      	ldr	r0, [r1, #0]
 801808c:	1a09      	subs	r1, r1, r0
 801808e:	688d      	ldr	r5, [r1, #8]
 8018090:	181b      	adds	r3, r3, r0
 8018092:	68c8      	ldr	r0, [r1, #12]
 8018094:	60e8      	str	r0, [r5, #12]
 8018096:	6085      	str	r5, [r0, #8]
 8018098:	2001      	movs	r0, #1
 801809a:	4318      	orrs	r0, r3
 801809c:	6048      	str	r0, [r1, #4]
 801809e:	6091      	str	r1, [r2, #8]
 80180a0:	4a41      	ldr	r2, [pc, #260]	; (80181a8 <_free_r+0x154>)
 80180a2:	6812      	ldr	r2, [r2, #0]
 80180a4:	429a      	cmp	r2, r3
 80180a6:	d804      	bhi.n	80180b2 <_free_r+0x5e>
 80180a8:	4b40      	ldr	r3, [pc, #256]	; (80181ac <_free_r+0x158>)
 80180aa:	9801      	ldr	r0, [sp, #4]
 80180ac:	6819      	ldr	r1, [r3, #0]
 80180ae:	f7ff ff7d 	bl	8017fac <_malloc_trim_r>
 80180b2:	9801      	ldr	r0, [sp, #4]
 80180b4:	f7fc fd14 	bl	8014ae0 <__malloc_unlock>
 80180b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80180ba:	2600      	movs	r6, #0
 80180bc:	6045      	str	r5, [r0, #4]
 80180be:	42b7      	cmp	r7, r6
 80180c0:	d109      	bne.n	80180d6 <_free_r+0x82>
 80180c2:	680f      	ldr	r7, [r1, #0]
 80180c4:	4c3a      	ldr	r4, [pc, #232]	; (80181b0 <_free_r+0x15c>)
 80180c6:	1bc9      	subs	r1, r1, r7
 80180c8:	19db      	adds	r3, r3, r7
 80180ca:	688f      	ldr	r7, [r1, #8]
 80180cc:	42a7      	cmp	r7, r4
 80180ce:	d02b      	beq.n	8018128 <_free_r+0xd4>
 80180d0:	68cc      	ldr	r4, [r1, #12]
 80180d2:	60fc      	str	r4, [r7, #12]
 80180d4:	60a7      	str	r7, [r4, #8]
 80180d6:	1947      	adds	r7, r0, r5
 80180d8:	687c      	ldr	r4, [r7, #4]
 80180da:	2701      	movs	r7, #1
 80180dc:	423c      	tst	r4, r7
 80180de:	d10b      	bne.n	80180f8 <_free_r+0xa4>
 80180e0:	195b      	adds	r3, r3, r5
 80180e2:	6885      	ldr	r5, [r0, #8]
 80180e4:	2e00      	cmp	r6, #0
 80180e6:	d121      	bne.n	801812c <_free_r+0xd8>
 80180e8:	4c31      	ldr	r4, [pc, #196]	; (80181b0 <_free_r+0x15c>)
 80180ea:	42a5      	cmp	r5, r4
 80180ec:	d11e      	bne.n	801812c <_free_r+0xd8>
 80180ee:	003e      	movs	r6, r7
 80180f0:	6151      	str	r1, [r2, #20]
 80180f2:	6111      	str	r1, [r2, #16]
 80180f4:	60cd      	str	r5, [r1, #12]
 80180f6:	608d      	str	r5, [r1, #8]
 80180f8:	2001      	movs	r0, #1
 80180fa:	0005      	movs	r5, r0
 80180fc:	431d      	orrs	r5, r3
 80180fe:	604d      	str	r5, [r1, #4]
 8018100:	50cb      	str	r3, [r1, r3]
 8018102:	2e00      	cmp	r6, #0
 8018104:	d1d5      	bne.n	80180b2 <_free_r+0x5e>
 8018106:	4d2b      	ldr	r5, [pc, #172]	; (80181b4 <_free_r+0x160>)
 8018108:	42ab      	cmp	r3, r5
 801810a:	d813      	bhi.n	8018134 <_free_r+0xe0>
 801810c:	08db      	lsrs	r3, r3, #3
 801810e:	109d      	asrs	r5, r3, #2
 8018110:	40a8      	lsls	r0, r5
 8018112:	6854      	ldr	r4, [r2, #4]
 8018114:	00db      	lsls	r3, r3, #3
 8018116:	4320      	orrs	r0, r4
 8018118:	6050      	str	r0, [r2, #4]
 801811a:	189a      	adds	r2, r3, r2
 801811c:	6893      	ldr	r3, [r2, #8]
 801811e:	60ca      	str	r2, [r1, #12]
 8018120:	608b      	str	r3, [r1, #8]
 8018122:	6091      	str	r1, [r2, #8]
 8018124:	60d9      	str	r1, [r3, #12]
 8018126:	e7c4      	b.n	80180b2 <_free_r+0x5e>
 8018128:	4666      	mov	r6, ip
 801812a:	e7d4      	b.n	80180d6 <_free_r+0x82>
 801812c:	68c0      	ldr	r0, [r0, #12]
 801812e:	60e8      	str	r0, [r5, #12]
 8018130:	6085      	str	r5, [r0, #8]
 8018132:	e7e1      	b.n	80180f8 <_free_r+0xa4>
 8018134:	0a5d      	lsrs	r5, r3, #9
 8018136:	2d04      	cmp	r5, #4
 8018138:	d812      	bhi.n	8018160 <_free_r+0x10c>
 801813a:	0998      	lsrs	r0, r3, #6
 801813c:	3038      	adds	r0, #56	; 0x38
 801813e:	00c6      	lsls	r6, r0, #3
 8018140:	18b6      	adds	r6, r6, r2
 8018142:	68b5      	ldr	r5, [r6, #8]
 8018144:	2703      	movs	r7, #3
 8018146:	42ae      	cmp	r6, r5
 8018148:	d125      	bne.n	8018196 <_free_r+0x142>
 801814a:	2301      	movs	r3, #1
 801814c:	1080      	asrs	r0, r0, #2
 801814e:	4083      	lsls	r3, r0
 8018150:	6850      	ldr	r0, [r2, #4]
 8018152:	4303      	orrs	r3, r0
 8018154:	6053      	str	r3, [r2, #4]
 8018156:	60ce      	str	r6, [r1, #12]
 8018158:	608d      	str	r5, [r1, #8]
 801815a:	60b1      	str	r1, [r6, #8]
 801815c:	60e9      	str	r1, [r5, #12]
 801815e:	e7a8      	b.n	80180b2 <_free_r+0x5e>
 8018160:	2d14      	cmp	r5, #20
 8018162:	d802      	bhi.n	801816a <_free_r+0x116>
 8018164:	0028      	movs	r0, r5
 8018166:	305b      	adds	r0, #91	; 0x5b
 8018168:	e7e9      	b.n	801813e <_free_r+0xea>
 801816a:	2d54      	cmp	r5, #84	; 0x54
 801816c:	d802      	bhi.n	8018174 <_free_r+0x120>
 801816e:	0b18      	lsrs	r0, r3, #12
 8018170:	306e      	adds	r0, #110	; 0x6e
 8018172:	e7e4      	b.n	801813e <_free_r+0xea>
 8018174:	20aa      	movs	r0, #170	; 0xaa
 8018176:	0040      	lsls	r0, r0, #1
 8018178:	4285      	cmp	r5, r0
 801817a:	d802      	bhi.n	8018182 <_free_r+0x12e>
 801817c:	0bd8      	lsrs	r0, r3, #15
 801817e:	3077      	adds	r0, #119	; 0x77
 8018180:	e7dd      	b.n	801813e <_free_r+0xea>
 8018182:	4e0d      	ldr	r6, [pc, #52]	; (80181b8 <_free_r+0x164>)
 8018184:	207e      	movs	r0, #126	; 0x7e
 8018186:	42b5      	cmp	r5, r6
 8018188:	d8d9      	bhi.n	801813e <_free_r+0xea>
 801818a:	0c98      	lsrs	r0, r3, #18
 801818c:	307c      	adds	r0, #124	; 0x7c
 801818e:	e7d6      	b.n	801813e <_free_r+0xea>
 8018190:	68ad      	ldr	r5, [r5, #8]
 8018192:	42ae      	cmp	r6, r5
 8018194:	d003      	beq.n	801819e <_free_r+0x14a>
 8018196:	686a      	ldr	r2, [r5, #4]
 8018198:	43ba      	bics	r2, r7
 801819a:	429a      	cmp	r2, r3
 801819c:	d8f8      	bhi.n	8018190 <_free_r+0x13c>
 801819e:	68ee      	ldr	r6, [r5, #12]
 80181a0:	e7d9      	b.n	8018156 <_free_r+0x102>
 80181a2:	46c0      	nop			; (mov r8, r8)
 80181a4:	20000654 	.word	0x20000654
 80181a8:	20000a60 	.word	0x20000a60
 80181ac:	20006b68 	.word	0x20006b68
 80181b0:	2000065c 	.word	0x2000065c
 80181b4:	000001ff 	.word	0x000001ff
 80181b8:	00000554 	.word	0x00000554

080181bc <rshift>:
 80181bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181be:	0004      	movs	r4, r0
 80181c0:	6905      	ldr	r5, [r0, #16]
 80181c2:	3414      	adds	r4, #20
 80181c4:	114b      	asrs	r3, r1, #5
 80181c6:	0026      	movs	r6, r4
 80181c8:	429d      	cmp	r5, r3
 80181ca:	dd14      	ble.n	80181f6 <rshift+0x3a>
 80181cc:	221f      	movs	r2, #31
 80181ce:	00ad      	lsls	r5, r5, #2
 80181d0:	009b      	lsls	r3, r3, #2
 80181d2:	4011      	ands	r1, r2
 80181d4:	1965      	adds	r5, r4, r5
 80181d6:	18e3      	adds	r3, r4, r3
 80181d8:	0022      	movs	r2, r4
 80181da:	2900      	cmp	r1, #0
 80181dc:	d01e      	beq.n	801821c <rshift+0x60>
 80181de:	cb04      	ldmia	r3!, {r2}
 80181e0:	2720      	movs	r7, #32
 80181e2:	40ca      	lsrs	r2, r1
 80181e4:	46a4      	mov	ip, r4
 80181e6:	1a7f      	subs	r7, r7, r1
 80181e8:	4666      	mov	r6, ip
 80181ea:	429d      	cmp	r5, r3
 80181ec:	d80b      	bhi.n	8018206 <rshift+0x4a>
 80181ee:	6032      	str	r2, [r6, #0]
 80181f0:	2a00      	cmp	r2, #0
 80181f2:	d000      	beq.n	80181f6 <rshift+0x3a>
 80181f4:	3604      	adds	r6, #4
 80181f6:	1b33      	subs	r3, r6, r4
 80181f8:	109b      	asrs	r3, r3, #2
 80181fa:	6103      	str	r3, [r0, #16]
 80181fc:	42a6      	cmp	r6, r4
 80181fe:	d101      	bne.n	8018204 <rshift+0x48>
 8018200:	2300      	movs	r3, #0
 8018202:	6143      	str	r3, [r0, #20]
 8018204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018206:	681e      	ldr	r6, [r3, #0]
 8018208:	40be      	lsls	r6, r7
 801820a:	4332      	orrs	r2, r6
 801820c:	4666      	mov	r6, ip
 801820e:	c604      	stmia	r6!, {r2}
 8018210:	cb04      	ldmia	r3!, {r2}
 8018212:	46b4      	mov	ip, r6
 8018214:	40ca      	lsrs	r2, r1
 8018216:	e7e7      	b.n	80181e8 <rshift+0x2c>
 8018218:	cb02      	ldmia	r3!, {r1}
 801821a:	c202      	stmia	r2!, {r1}
 801821c:	0016      	movs	r6, r2
 801821e:	429d      	cmp	r5, r3
 8018220:	d8fa      	bhi.n	8018218 <rshift+0x5c>
 8018222:	e7e8      	b.n	80181f6 <rshift+0x3a>

08018224 <__hexdig_fun>:
 8018224:	0003      	movs	r3, r0
 8018226:	3b30      	subs	r3, #48	; 0x30
 8018228:	2b09      	cmp	r3, #9
 801822a:	d803      	bhi.n	8018234 <__hexdig_fun+0x10>
 801822c:	3820      	subs	r0, #32
 801822e:	b2c3      	uxtb	r3, r0
 8018230:	0018      	movs	r0, r3
 8018232:	4770      	bx	lr
 8018234:	0003      	movs	r3, r0
 8018236:	3b61      	subs	r3, #97	; 0x61
 8018238:	2b05      	cmp	r3, #5
 801823a:	d801      	bhi.n	8018240 <__hexdig_fun+0x1c>
 801823c:	3847      	subs	r0, #71	; 0x47
 801823e:	e7f6      	b.n	801822e <__hexdig_fun+0xa>
 8018240:	0002      	movs	r2, r0
 8018242:	3a41      	subs	r2, #65	; 0x41
 8018244:	2300      	movs	r3, #0
 8018246:	2a05      	cmp	r2, #5
 8018248:	d8f2      	bhi.n	8018230 <__hexdig_fun+0xc>
 801824a:	3827      	subs	r0, #39	; 0x27
 801824c:	e7ef      	b.n	801822e <__hexdig_fun+0xa>

0801824e <__gethex>:
 801824e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018250:	b08d      	sub	sp, #52	; 0x34
 8018252:	9005      	str	r0, [sp, #20]
 8018254:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018256:	9109      	str	r1, [sp, #36]	; 0x24
 8018258:	9202      	str	r2, [sp, #8]
 801825a:	930a      	str	r3, [sp, #40]	; 0x28
 801825c:	f000 fadf 	bl	801881e <__localeconv_l>
 8018260:	6803      	ldr	r3, [r0, #0]
 8018262:	0018      	movs	r0, r3
 8018264:	9307      	str	r3, [sp, #28]
 8018266:	f7e7 ff57 	bl	8000118 <strlen>
 801826a:	2202      	movs	r2, #2
 801826c:	9b07      	ldr	r3, [sp, #28]
 801826e:	4252      	negs	r2, r2
 8018270:	181b      	adds	r3, r3, r0
 8018272:	3b01      	subs	r3, #1
 8018274:	781b      	ldrb	r3, [r3, #0]
 8018276:	9004      	str	r0, [sp, #16]
 8018278:	930b      	str	r3, [sp, #44]	; 0x2c
 801827a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801827c:	6819      	ldr	r1, [r3, #0]
 801827e:	1c8b      	adds	r3, r1, #2
 8018280:	1a52      	subs	r2, r2, r1
 8018282:	18d1      	adds	r1, r2, r3
 8018284:	9301      	str	r3, [sp, #4]
 8018286:	9108      	str	r1, [sp, #32]
 8018288:	9901      	ldr	r1, [sp, #4]
 801828a:	3301      	adds	r3, #1
 801828c:	7808      	ldrb	r0, [r1, #0]
 801828e:	2830      	cmp	r0, #48	; 0x30
 8018290:	d0f7      	beq.n	8018282 <__gethex+0x34>
 8018292:	f7ff ffc7 	bl	8018224 <__hexdig_fun>
 8018296:	1e07      	subs	r7, r0, #0
 8018298:	d000      	beq.n	801829c <__gethex+0x4e>
 801829a:	e06f      	b.n	801837c <__gethex+0x12e>
 801829c:	9a04      	ldr	r2, [sp, #16]
 801829e:	9907      	ldr	r1, [sp, #28]
 80182a0:	9801      	ldr	r0, [sp, #4]
 80182a2:	f7fc fe4b 	bl	8014f3c <strncmp>
 80182a6:	2800      	cmp	r0, #0
 80182a8:	d000      	beq.n	80182ac <__gethex+0x5e>
 80182aa:	e06d      	b.n	8018388 <__gethex+0x13a>
 80182ac:	9b01      	ldr	r3, [sp, #4]
 80182ae:	9a04      	ldr	r2, [sp, #16]
 80182b0:	189c      	adds	r4, r3, r2
 80182b2:	7820      	ldrb	r0, [r4, #0]
 80182b4:	f7ff ffb6 	bl	8018224 <__hexdig_fun>
 80182b8:	2800      	cmp	r0, #0
 80182ba:	d069      	beq.n	8018390 <__gethex+0x142>
 80182bc:	9401      	str	r4, [sp, #4]
 80182be:	9b01      	ldr	r3, [sp, #4]
 80182c0:	7818      	ldrb	r0, [r3, #0]
 80182c2:	2830      	cmp	r0, #48	; 0x30
 80182c4:	d009      	beq.n	80182da <__gethex+0x8c>
 80182c6:	f7ff ffad 	bl	8018224 <__hexdig_fun>
 80182ca:	4243      	negs	r3, r0
 80182cc:	4143      	adcs	r3, r0
 80182ce:	9303      	str	r3, [sp, #12]
 80182d0:	2301      	movs	r3, #1
 80182d2:	0026      	movs	r6, r4
 80182d4:	9308      	str	r3, [sp, #32]
 80182d6:	9c01      	ldr	r4, [sp, #4]
 80182d8:	e004      	b.n	80182e4 <__gethex+0x96>
 80182da:	9b01      	ldr	r3, [sp, #4]
 80182dc:	3301      	adds	r3, #1
 80182de:	9301      	str	r3, [sp, #4]
 80182e0:	e7ed      	b.n	80182be <__gethex+0x70>
 80182e2:	3401      	adds	r4, #1
 80182e4:	7820      	ldrb	r0, [r4, #0]
 80182e6:	f7ff ff9d 	bl	8018224 <__hexdig_fun>
 80182ea:	2800      	cmp	r0, #0
 80182ec:	d1f9      	bne.n	80182e2 <__gethex+0x94>
 80182ee:	9a04      	ldr	r2, [sp, #16]
 80182f0:	9907      	ldr	r1, [sp, #28]
 80182f2:	0020      	movs	r0, r4
 80182f4:	f7fc fe22 	bl	8014f3c <strncmp>
 80182f8:	2800      	cmp	r0, #0
 80182fa:	d109      	bne.n	8018310 <__gethex+0xc2>
 80182fc:	2e00      	cmp	r6, #0
 80182fe:	d10a      	bne.n	8018316 <__gethex+0xc8>
 8018300:	9b04      	ldr	r3, [sp, #16]
 8018302:	18e4      	adds	r4, r4, r3
 8018304:	0026      	movs	r6, r4
 8018306:	7820      	ldrb	r0, [r4, #0]
 8018308:	f7ff ff8c 	bl	8018224 <__hexdig_fun>
 801830c:	2800      	cmp	r0, #0
 801830e:	d139      	bne.n	8018384 <__gethex+0x136>
 8018310:	2700      	movs	r7, #0
 8018312:	42be      	cmp	r6, r7
 8018314:	d001      	beq.n	801831a <__gethex+0xcc>
 8018316:	1b37      	subs	r7, r6, r4
 8018318:	00bf      	lsls	r7, r7, #2
 801831a:	7823      	ldrb	r3, [r4, #0]
 801831c:	2b50      	cmp	r3, #80	; 0x50
 801831e:	d001      	beq.n	8018324 <__gethex+0xd6>
 8018320:	2b70      	cmp	r3, #112	; 0x70
 8018322:	d142      	bne.n	80183aa <__gethex+0x15c>
 8018324:	7863      	ldrb	r3, [r4, #1]
 8018326:	2b2b      	cmp	r3, #43	; 0x2b
 8018328:	d034      	beq.n	8018394 <__gethex+0x146>
 801832a:	2b2d      	cmp	r3, #45	; 0x2d
 801832c:	d036      	beq.n	801839c <__gethex+0x14e>
 801832e:	2300      	movs	r3, #0
 8018330:	1c66      	adds	r6, r4, #1
 8018332:	9306      	str	r3, [sp, #24]
 8018334:	7830      	ldrb	r0, [r6, #0]
 8018336:	f7ff ff75 	bl	8018224 <__hexdig_fun>
 801833a:	1e43      	subs	r3, r0, #1
 801833c:	b2db      	uxtb	r3, r3
 801833e:	2b18      	cmp	r3, #24
 8018340:	d833      	bhi.n	80183aa <__gethex+0x15c>
 8018342:	3810      	subs	r0, #16
 8018344:	0005      	movs	r5, r0
 8018346:	3601      	adds	r6, #1
 8018348:	7830      	ldrb	r0, [r6, #0]
 801834a:	f7ff ff6b 	bl	8018224 <__hexdig_fun>
 801834e:	1e43      	subs	r3, r0, #1
 8018350:	b2db      	uxtb	r3, r3
 8018352:	2b18      	cmp	r3, #24
 8018354:	d924      	bls.n	80183a0 <__gethex+0x152>
 8018356:	9b06      	ldr	r3, [sp, #24]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d000      	beq.n	801835e <__gethex+0x110>
 801835c:	426d      	negs	r5, r5
 801835e:	197f      	adds	r7, r7, r5
 8018360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018362:	601e      	str	r6, [r3, #0]
 8018364:	9b03      	ldr	r3, [sp, #12]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d021      	beq.n	80183ae <__gethex+0x160>
 801836a:	9b08      	ldr	r3, [sp, #32]
 801836c:	2606      	movs	r6, #6
 801836e:	425a      	negs	r2, r3
 8018370:	4153      	adcs	r3, r2
 8018372:	425b      	negs	r3, r3
 8018374:	401e      	ands	r6, r3
 8018376:	0030      	movs	r0, r6
 8018378:	b00d      	add	sp, #52	; 0x34
 801837a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801837c:	2300      	movs	r3, #0
 801837e:	9303      	str	r3, [sp, #12]
 8018380:	001e      	movs	r6, r3
 8018382:	e7a8      	b.n	80182d6 <__gethex+0x88>
 8018384:	3401      	adds	r4, #1
 8018386:	e7be      	b.n	8018306 <__gethex+0xb8>
 8018388:	9c01      	ldr	r4, [sp, #4]
 801838a:	2301      	movs	r3, #1
 801838c:	9303      	str	r3, [sp, #12]
 801838e:	e7c4      	b.n	801831a <__gethex+0xcc>
 8018390:	0007      	movs	r7, r0
 8018392:	e7fa      	b.n	801838a <__gethex+0x13c>
 8018394:	2300      	movs	r3, #0
 8018396:	9306      	str	r3, [sp, #24]
 8018398:	1ca6      	adds	r6, r4, #2
 801839a:	e7cb      	b.n	8018334 <__gethex+0xe6>
 801839c:	2301      	movs	r3, #1
 801839e:	e7fa      	b.n	8018396 <__gethex+0x148>
 80183a0:	230a      	movs	r3, #10
 80183a2:	435d      	muls	r5, r3
 80183a4:	182d      	adds	r5, r5, r0
 80183a6:	3d10      	subs	r5, #16
 80183a8:	e7cd      	b.n	8018346 <__gethex+0xf8>
 80183aa:	0026      	movs	r6, r4
 80183ac:	e7d8      	b.n	8018360 <__gethex+0x112>
 80183ae:	9b01      	ldr	r3, [sp, #4]
 80183b0:	9903      	ldr	r1, [sp, #12]
 80183b2:	1ae3      	subs	r3, r4, r3
 80183b4:	3b01      	subs	r3, #1
 80183b6:	2b07      	cmp	r3, #7
 80183b8:	dc47      	bgt.n	801844a <__gethex+0x1fc>
 80183ba:	9805      	ldr	r0, [sp, #20]
 80183bc:	f000 fa5e 	bl	801887c <_Balloc>
 80183c0:	0003      	movs	r3, r0
 80183c2:	3314      	adds	r3, #20
 80183c4:	9303      	str	r3, [sp, #12]
 80183c6:	9308      	str	r3, [sp, #32]
 80183c8:	2300      	movs	r3, #0
 80183ca:	0005      	movs	r5, r0
 80183cc:	001e      	movs	r6, r3
 80183ce:	9306      	str	r3, [sp, #24]
 80183d0:	9b01      	ldr	r3, [sp, #4]
 80183d2:	42a3      	cmp	r3, r4
 80183d4:	d33c      	bcc.n	8018450 <__gethex+0x202>
 80183d6:	9c08      	ldr	r4, [sp, #32]
 80183d8:	9b03      	ldr	r3, [sp, #12]
 80183da:	c440      	stmia	r4!, {r6}
 80183dc:	1ae4      	subs	r4, r4, r3
 80183de:	10a4      	asrs	r4, r4, #2
 80183e0:	612c      	str	r4, [r5, #16]
 80183e2:	0030      	movs	r0, r6
 80183e4:	f000 faf8 	bl	80189d8 <__hi0bits>
 80183e8:	9b02      	ldr	r3, [sp, #8]
 80183ea:	0164      	lsls	r4, r4, #5
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	1a26      	subs	r6, r4, r0
 80183f0:	9301      	str	r3, [sp, #4]
 80183f2:	429e      	cmp	r6, r3
 80183f4:	dd5f      	ble.n	80184b6 <__gethex+0x268>
 80183f6:	1af6      	subs	r6, r6, r3
 80183f8:	0031      	movs	r1, r6
 80183fa:	0028      	movs	r0, r5
 80183fc:	f000 fde3 	bl	8018fc6 <__any_on>
 8018400:	1e04      	subs	r4, r0, #0
 8018402:	d00f      	beq.n	8018424 <__gethex+0x1d6>
 8018404:	2401      	movs	r4, #1
 8018406:	211f      	movs	r1, #31
 8018408:	0020      	movs	r0, r4
 801840a:	1e73      	subs	r3, r6, #1
 801840c:	4019      	ands	r1, r3
 801840e:	4088      	lsls	r0, r1
 8018410:	0001      	movs	r1, r0
 8018412:	115a      	asrs	r2, r3, #5
 8018414:	9803      	ldr	r0, [sp, #12]
 8018416:	0092      	lsls	r2, r2, #2
 8018418:	5812      	ldr	r2, [r2, r0]
 801841a:	420a      	tst	r2, r1
 801841c:	d002      	beq.n	8018424 <__gethex+0x1d6>
 801841e:	42a3      	cmp	r3, r4
 8018420:	dc41      	bgt.n	80184a6 <__gethex+0x258>
 8018422:	2402      	movs	r4, #2
 8018424:	0031      	movs	r1, r6
 8018426:	0028      	movs	r0, r5
 8018428:	f7ff fec8 	bl	80181bc <rshift>
 801842c:	19bf      	adds	r7, r7, r6
 801842e:	9b02      	ldr	r3, [sp, #8]
 8018430:	689b      	ldr	r3, [r3, #8]
 8018432:	9304      	str	r3, [sp, #16]
 8018434:	42bb      	cmp	r3, r7
 8018436:	da4e      	bge.n	80184d6 <__gethex+0x288>
 8018438:	0029      	movs	r1, r5
 801843a:	9805      	ldr	r0, [sp, #20]
 801843c:	f000 fa46 	bl	80188cc <_Bfree>
 8018440:	2300      	movs	r3, #0
 8018442:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018444:	26a3      	movs	r6, #163	; 0xa3
 8018446:	6013      	str	r3, [r2, #0]
 8018448:	e795      	b.n	8018376 <__gethex+0x128>
 801844a:	3101      	adds	r1, #1
 801844c:	105b      	asrs	r3, r3, #1
 801844e:	e7b2      	b.n	80183b6 <__gethex+0x168>
 8018450:	1e63      	subs	r3, r4, #1
 8018452:	9309      	str	r3, [sp, #36]	; 0x24
 8018454:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018456:	781b      	ldrb	r3, [r3, #0]
 8018458:	4293      	cmp	r3, r2
 801845a:	d015      	beq.n	8018488 <__gethex+0x23a>
 801845c:	9b06      	ldr	r3, [sp, #24]
 801845e:	2b20      	cmp	r3, #32
 8018460:	d105      	bne.n	801846e <__gethex+0x220>
 8018462:	9b08      	ldr	r3, [sp, #32]
 8018464:	601e      	str	r6, [r3, #0]
 8018466:	2600      	movs	r6, #0
 8018468:	3304      	adds	r3, #4
 801846a:	9308      	str	r3, [sp, #32]
 801846c:	9606      	str	r6, [sp, #24]
 801846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018470:	7818      	ldrb	r0, [r3, #0]
 8018472:	f7ff fed7 	bl	8018224 <__hexdig_fun>
 8018476:	230f      	movs	r3, #15
 8018478:	4018      	ands	r0, r3
 801847a:	9b06      	ldr	r3, [sp, #24]
 801847c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801847e:	4098      	lsls	r0, r3
 8018480:	3304      	adds	r3, #4
 8018482:	4306      	orrs	r6, r0
 8018484:	9306      	str	r3, [sp, #24]
 8018486:	e7a3      	b.n	80183d0 <__gethex+0x182>
 8018488:	2301      	movs	r3, #1
 801848a:	9a04      	ldr	r2, [sp, #16]
 801848c:	1a9c      	subs	r4, r3, r2
 801848e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018490:	191c      	adds	r4, r3, r4
 8018492:	9b01      	ldr	r3, [sp, #4]
 8018494:	429c      	cmp	r4, r3
 8018496:	d3e1      	bcc.n	801845c <__gethex+0x20e>
 8018498:	9907      	ldr	r1, [sp, #28]
 801849a:	0020      	movs	r0, r4
 801849c:	f7fc fd4e 	bl	8014f3c <strncmp>
 80184a0:	2800      	cmp	r0, #0
 80184a2:	d1db      	bne.n	801845c <__gethex+0x20e>
 80184a4:	e794      	b.n	80183d0 <__gethex+0x182>
 80184a6:	1eb1      	subs	r1, r6, #2
 80184a8:	0028      	movs	r0, r5
 80184aa:	f000 fd8c 	bl	8018fc6 <__any_on>
 80184ae:	2800      	cmp	r0, #0
 80184b0:	d0b7      	beq.n	8018422 <__gethex+0x1d4>
 80184b2:	2403      	movs	r4, #3
 80184b4:	e7b6      	b.n	8018424 <__gethex+0x1d6>
 80184b6:	9b01      	ldr	r3, [sp, #4]
 80184b8:	2400      	movs	r4, #0
 80184ba:	429e      	cmp	r6, r3
 80184bc:	dab7      	bge.n	801842e <__gethex+0x1e0>
 80184be:	1b9e      	subs	r6, r3, r6
 80184c0:	0029      	movs	r1, r5
 80184c2:	0032      	movs	r2, r6
 80184c4:	9805      	ldr	r0, [sp, #20]
 80184c6:	f000 fbab 	bl	8018c20 <__lshift>
 80184ca:	0003      	movs	r3, r0
 80184cc:	3314      	adds	r3, #20
 80184ce:	0005      	movs	r5, r0
 80184d0:	1bbf      	subs	r7, r7, r6
 80184d2:	9303      	str	r3, [sp, #12]
 80184d4:	e7ab      	b.n	801842e <__gethex+0x1e0>
 80184d6:	9b02      	ldr	r3, [sp, #8]
 80184d8:	685e      	ldr	r6, [r3, #4]
 80184da:	42be      	cmp	r6, r7
 80184dc:	dd6b      	ble.n	80185b6 <__gethex+0x368>
 80184de:	9b01      	ldr	r3, [sp, #4]
 80184e0:	1bf6      	subs	r6, r6, r7
 80184e2:	42b3      	cmp	r3, r6
 80184e4:	dc32      	bgt.n	801854c <__gethex+0x2fe>
 80184e6:	9b02      	ldr	r3, [sp, #8]
 80184e8:	68db      	ldr	r3, [r3, #12]
 80184ea:	2b02      	cmp	r3, #2
 80184ec:	d026      	beq.n	801853c <__gethex+0x2ee>
 80184ee:	2b03      	cmp	r3, #3
 80184f0:	d028      	beq.n	8018544 <__gethex+0x2f6>
 80184f2:	2b01      	cmp	r3, #1
 80184f4:	d119      	bne.n	801852a <__gethex+0x2dc>
 80184f6:	9b01      	ldr	r3, [sp, #4]
 80184f8:	42b3      	cmp	r3, r6
 80184fa:	d116      	bne.n	801852a <__gethex+0x2dc>
 80184fc:	2b01      	cmp	r3, #1
 80184fe:	dc0d      	bgt.n	801851c <__gethex+0x2ce>
 8018500:	9b02      	ldr	r3, [sp, #8]
 8018502:	2662      	movs	r6, #98	; 0x62
 8018504:	685b      	ldr	r3, [r3, #4]
 8018506:	9301      	str	r3, [sp, #4]
 8018508:	9a01      	ldr	r2, [sp, #4]
 801850a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801850c:	601a      	str	r2, [r3, #0]
 801850e:	2301      	movs	r3, #1
 8018510:	9a03      	ldr	r2, [sp, #12]
 8018512:	612b      	str	r3, [r5, #16]
 8018514:	6013      	str	r3, [r2, #0]
 8018516:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018518:	601d      	str	r5, [r3, #0]
 801851a:	e72c      	b.n	8018376 <__gethex+0x128>
 801851c:	9901      	ldr	r1, [sp, #4]
 801851e:	0028      	movs	r0, r5
 8018520:	3901      	subs	r1, #1
 8018522:	f000 fd50 	bl	8018fc6 <__any_on>
 8018526:	2800      	cmp	r0, #0
 8018528:	d1ea      	bne.n	8018500 <__gethex+0x2b2>
 801852a:	0029      	movs	r1, r5
 801852c:	9805      	ldr	r0, [sp, #20]
 801852e:	f000 f9cd 	bl	80188cc <_Bfree>
 8018532:	2300      	movs	r3, #0
 8018534:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018536:	2650      	movs	r6, #80	; 0x50
 8018538:	6013      	str	r3, [r2, #0]
 801853a:	e71c      	b.n	8018376 <__gethex+0x128>
 801853c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801853e:	2b00      	cmp	r3, #0
 8018540:	d0de      	beq.n	8018500 <__gethex+0x2b2>
 8018542:	e7f2      	b.n	801852a <__gethex+0x2dc>
 8018544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018546:	2b00      	cmp	r3, #0
 8018548:	d1da      	bne.n	8018500 <__gethex+0x2b2>
 801854a:	e7ee      	b.n	801852a <__gethex+0x2dc>
 801854c:	1e77      	subs	r7, r6, #1
 801854e:	2c00      	cmp	r4, #0
 8018550:	d12f      	bne.n	80185b2 <__gethex+0x364>
 8018552:	2f00      	cmp	r7, #0
 8018554:	d004      	beq.n	8018560 <__gethex+0x312>
 8018556:	0039      	movs	r1, r7
 8018558:	0028      	movs	r0, r5
 801855a:	f000 fd34 	bl	8018fc6 <__any_on>
 801855e:	0004      	movs	r4, r0
 8018560:	231f      	movs	r3, #31
 8018562:	117a      	asrs	r2, r7, #5
 8018564:	401f      	ands	r7, r3
 8018566:	3b1e      	subs	r3, #30
 8018568:	40bb      	lsls	r3, r7
 801856a:	9903      	ldr	r1, [sp, #12]
 801856c:	0092      	lsls	r2, r2, #2
 801856e:	5852      	ldr	r2, [r2, r1]
 8018570:	421a      	tst	r2, r3
 8018572:	d001      	beq.n	8018578 <__gethex+0x32a>
 8018574:	2302      	movs	r3, #2
 8018576:	431c      	orrs	r4, r3
 8018578:	9b01      	ldr	r3, [sp, #4]
 801857a:	0031      	movs	r1, r6
 801857c:	1b9b      	subs	r3, r3, r6
 801857e:	2602      	movs	r6, #2
 8018580:	0028      	movs	r0, r5
 8018582:	9301      	str	r3, [sp, #4]
 8018584:	f7ff fe1a 	bl	80181bc <rshift>
 8018588:	9b02      	ldr	r3, [sp, #8]
 801858a:	685f      	ldr	r7, [r3, #4]
 801858c:	2c00      	cmp	r4, #0
 801858e:	d040      	beq.n	8018612 <__gethex+0x3c4>
 8018590:	9b02      	ldr	r3, [sp, #8]
 8018592:	68db      	ldr	r3, [r3, #12]
 8018594:	2b02      	cmp	r3, #2
 8018596:	d010      	beq.n	80185ba <__gethex+0x36c>
 8018598:	2b03      	cmp	r3, #3
 801859a:	d012      	beq.n	80185c2 <__gethex+0x374>
 801859c:	2b01      	cmp	r3, #1
 801859e:	d106      	bne.n	80185ae <__gethex+0x360>
 80185a0:	07a2      	lsls	r2, r4, #30
 80185a2:	d504      	bpl.n	80185ae <__gethex+0x360>
 80185a4:	9a03      	ldr	r2, [sp, #12]
 80185a6:	6812      	ldr	r2, [r2, #0]
 80185a8:	4314      	orrs	r4, r2
 80185aa:	421c      	tst	r4, r3
 80185ac:	d10c      	bne.n	80185c8 <__gethex+0x37a>
 80185ae:	2310      	movs	r3, #16
 80185b0:	e02e      	b.n	8018610 <__gethex+0x3c2>
 80185b2:	2401      	movs	r4, #1
 80185b4:	e7d4      	b.n	8018560 <__gethex+0x312>
 80185b6:	2601      	movs	r6, #1
 80185b8:	e7e8      	b.n	801858c <__gethex+0x33e>
 80185ba:	2301      	movs	r3, #1
 80185bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80185be:	1a9b      	subs	r3, r3, r2
 80185c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80185c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d0f2      	beq.n	80185ae <__gethex+0x360>
 80185c8:	692c      	ldr	r4, [r5, #16]
 80185ca:	00a3      	lsls	r3, r4, #2
 80185cc:	9304      	str	r3, [sp, #16]
 80185ce:	002b      	movs	r3, r5
 80185d0:	00a2      	lsls	r2, r4, #2
 80185d2:	3314      	adds	r3, #20
 80185d4:	1899      	adds	r1, r3, r2
 80185d6:	2200      	movs	r2, #0
 80185d8:	4694      	mov	ip, r2
 80185da:	681a      	ldr	r2, [r3, #0]
 80185dc:	1c50      	adds	r0, r2, #1
 80185de:	d01d      	beq.n	801861c <__gethex+0x3ce>
 80185e0:	3201      	adds	r2, #1
 80185e2:	601a      	str	r2, [r3, #0]
 80185e4:	002b      	movs	r3, r5
 80185e6:	3314      	adds	r3, #20
 80185e8:	2e02      	cmp	r6, #2
 80185ea:	d13a      	bne.n	8018662 <__gethex+0x414>
 80185ec:	9a02      	ldr	r2, [sp, #8]
 80185ee:	9901      	ldr	r1, [sp, #4]
 80185f0:	6812      	ldr	r2, [r2, #0]
 80185f2:	3a01      	subs	r2, #1
 80185f4:	428a      	cmp	r2, r1
 80185f6:	d10a      	bne.n	801860e <__gethex+0x3c0>
 80185f8:	114a      	asrs	r2, r1, #5
 80185fa:	211f      	movs	r1, #31
 80185fc:	9801      	ldr	r0, [sp, #4]
 80185fe:	0092      	lsls	r2, r2, #2
 8018600:	4001      	ands	r1, r0
 8018602:	2001      	movs	r0, #1
 8018604:	0004      	movs	r4, r0
 8018606:	408c      	lsls	r4, r1
 8018608:	58d3      	ldr	r3, [r2, r3]
 801860a:	4223      	tst	r3, r4
 801860c:	d148      	bne.n	80186a0 <__gethex+0x452>
 801860e:	2320      	movs	r3, #32
 8018610:	431e      	orrs	r6, r3
 8018612:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018614:	601d      	str	r5, [r3, #0]
 8018616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018618:	601f      	str	r7, [r3, #0]
 801861a:	e6ac      	b.n	8018376 <__gethex+0x128>
 801861c:	4662      	mov	r2, ip
 801861e:	c304      	stmia	r3!, {r2}
 8018620:	4299      	cmp	r1, r3
 8018622:	d8da      	bhi.n	80185da <__gethex+0x38c>
 8018624:	68ab      	ldr	r3, [r5, #8]
 8018626:	429c      	cmp	r4, r3
 8018628:	db12      	blt.n	8018650 <__gethex+0x402>
 801862a:	686b      	ldr	r3, [r5, #4]
 801862c:	9805      	ldr	r0, [sp, #20]
 801862e:	1c59      	adds	r1, r3, #1
 8018630:	f000 f924 	bl	801887c <_Balloc>
 8018634:	0029      	movs	r1, r5
 8018636:	692b      	ldr	r3, [r5, #16]
 8018638:	9003      	str	r0, [sp, #12]
 801863a:	1c9a      	adds	r2, r3, #2
 801863c:	0092      	lsls	r2, r2, #2
 801863e:	310c      	adds	r1, #12
 8018640:	300c      	adds	r0, #12
 8018642:	f7fc fa34 	bl	8014aae <memcpy>
 8018646:	0029      	movs	r1, r5
 8018648:	9805      	ldr	r0, [sp, #20]
 801864a:	f000 f93f 	bl	80188cc <_Bfree>
 801864e:	9d03      	ldr	r5, [sp, #12]
 8018650:	692b      	ldr	r3, [r5, #16]
 8018652:	1c5a      	adds	r2, r3, #1
 8018654:	612a      	str	r2, [r5, #16]
 8018656:	2201      	movs	r2, #1
 8018658:	3304      	adds	r3, #4
 801865a:	009b      	lsls	r3, r3, #2
 801865c:	18eb      	adds	r3, r5, r3
 801865e:	605a      	str	r2, [r3, #4]
 8018660:	e7c0      	b.n	80185e4 <__gethex+0x396>
 8018662:	692a      	ldr	r2, [r5, #16]
 8018664:	42a2      	cmp	r2, r4
 8018666:	dd0a      	ble.n	801867e <__gethex+0x430>
 8018668:	2101      	movs	r1, #1
 801866a:	0028      	movs	r0, r5
 801866c:	f7ff fda6 	bl	80181bc <rshift>
 8018670:	9b02      	ldr	r3, [sp, #8]
 8018672:	3701      	adds	r7, #1
 8018674:	689b      	ldr	r3, [r3, #8]
 8018676:	2601      	movs	r6, #1
 8018678:	42bb      	cmp	r3, r7
 801867a:	dac8      	bge.n	801860e <__gethex+0x3c0>
 801867c:	e6dc      	b.n	8018438 <__gethex+0x1ea>
 801867e:	241f      	movs	r4, #31
 8018680:	9a01      	ldr	r2, [sp, #4]
 8018682:	2601      	movs	r6, #1
 8018684:	4022      	ands	r2, r4
 8018686:	1e14      	subs	r4, r2, #0
 8018688:	d0c1      	beq.n	801860e <__gethex+0x3c0>
 801868a:	9a04      	ldr	r2, [sp, #16]
 801868c:	189b      	adds	r3, r3, r2
 801868e:	3b04      	subs	r3, #4
 8018690:	6818      	ldr	r0, [r3, #0]
 8018692:	f000 f9a1 	bl	80189d8 <__hi0bits>
 8018696:	2120      	movs	r1, #32
 8018698:	1b0c      	subs	r4, r1, r4
 801869a:	42a0      	cmp	r0, r4
 801869c:	dbe4      	blt.n	8018668 <__gethex+0x41a>
 801869e:	e7b6      	b.n	801860e <__gethex+0x3c0>
 80186a0:	0006      	movs	r6, r0
 80186a2:	e7b4      	b.n	801860e <__gethex+0x3c0>

080186a4 <L_shift>:
 80186a4:	2308      	movs	r3, #8
 80186a6:	b570      	push	{r4, r5, r6, lr}
 80186a8:	2520      	movs	r5, #32
 80186aa:	1a9a      	subs	r2, r3, r2
 80186ac:	0092      	lsls	r2, r2, #2
 80186ae:	1aad      	subs	r5, r5, r2
 80186b0:	6843      	ldr	r3, [r0, #4]
 80186b2:	6806      	ldr	r6, [r0, #0]
 80186b4:	001c      	movs	r4, r3
 80186b6:	40ac      	lsls	r4, r5
 80186b8:	40d3      	lsrs	r3, r2
 80186ba:	4334      	orrs	r4, r6
 80186bc:	6004      	str	r4, [r0, #0]
 80186be:	6043      	str	r3, [r0, #4]
 80186c0:	3004      	adds	r0, #4
 80186c2:	4288      	cmp	r0, r1
 80186c4:	d3f4      	bcc.n	80186b0 <L_shift+0xc>
 80186c6:	bd70      	pop	{r4, r5, r6, pc}

080186c8 <__match>:
 80186c8:	b530      	push	{r4, r5, lr}
 80186ca:	6803      	ldr	r3, [r0, #0]
 80186cc:	780c      	ldrb	r4, [r1, #0]
 80186ce:	3301      	adds	r3, #1
 80186d0:	2c00      	cmp	r4, #0
 80186d2:	d102      	bne.n	80186da <__match+0x12>
 80186d4:	6003      	str	r3, [r0, #0]
 80186d6:	2001      	movs	r0, #1
 80186d8:	bd30      	pop	{r4, r5, pc}
 80186da:	781a      	ldrb	r2, [r3, #0]
 80186dc:	0015      	movs	r5, r2
 80186de:	3d41      	subs	r5, #65	; 0x41
 80186e0:	2d19      	cmp	r5, #25
 80186e2:	d800      	bhi.n	80186e6 <__match+0x1e>
 80186e4:	3220      	adds	r2, #32
 80186e6:	3101      	adds	r1, #1
 80186e8:	42a2      	cmp	r2, r4
 80186ea:	d0ef      	beq.n	80186cc <__match+0x4>
 80186ec:	2000      	movs	r0, #0
 80186ee:	e7f3      	b.n	80186d8 <__match+0x10>

080186f0 <__hexnan>:
 80186f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186f2:	b08b      	sub	sp, #44	; 0x2c
 80186f4:	9201      	str	r2, [sp, #4]
 80186f6:	680a      	ldr	r2, [r1, #0]
 80186f8:	9901      	ldr	r1, [sp, #4]
 80186fa:	1153      	asrs	r3, r2, #5
 80186fc:	009b      	lsls	r3, r3, #2
 80186fe:	18cb      	adds	r3, r1, r3
 8018700:	9304      	str	r3, [sp, #16]
 8018702:	231f      	movs	r3, #31
 8018704:	401a      	ands	r2, r3
 8018706:	9008      	str	r0, [sp, #32]
 8018708:	9206      	str	r2, [sp, #24]
 801870a:	d002      	beq.n	8018712 <__hexnan+0x22>
 801870c:	9b04      	ldr	r3, [sp, #16]
 801870e:	3304      	adds	r3, #4
 8018710:	9304      	str	r3, [sp, #16]
 8018712:	9b04      	ldr	r3, [sp, #16]
 8018714:	2500      	movs	r5, #0
 8018716:	1f1e      	subs	r6, r3, #4
 8018718:	0037      	movs	r7, r6
 801871a:	0034      	movs	r4, r6
 801871c:	9b08      	ldr	r3, [sp, #32]
 801871e:	6035      	str	r5, [r6, #0]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	9507      	str	r5, [sp, #28]
 8018724:	9305      	str	r3, [sp, #20]
 8018726:	9502      	str	r5, [sp, #8]
 8018728:	9b05      	ldr	r3, [sp, #20]
 801872a:	3301      	adds	r3, #1
 801872c:	9309      	str	r3, [sp, #36]	; 0x24
 801872e:	9b05      	ldr	r3, [sp, #20]
 8018730:	785b      	ldrb	r3, [r3, #1]
 8018732:	9303      	str	r3, [sp, #12]
 8018734:	2b00      	cmp	r3, #0
 8018736:	d028      	beq.n	801878a <__hexnan+0x9a>
 8018738:	9803      	ldr	r0, [sp, #12]
 801873a:	f7ff fd73 	bl	8018224 <__hexdig_fun>
 801873e:	2800      	cmp	r0, #0
 8018740:	d145      	bne.n	80187ce <__hexnan+0xde>
 8018742:	9b03      	ldr	r3, [sp, #12]
 8018744:	2b20      	cmp	r3, #32
 8018746:	d819      	bhi.n	801877c <__hexnan+0x8c>
 8018748:	9b02      	ldr	r3, [sp, #8]
 801874a:	9a07      	ldr	r2, [sp, #28]
 801874c:	4293      	cmp	r3, r2
 801874e:	dd12      	ble.n	8018776 <__hexnan+0x86>
 8018750:	42bc      	cmp	r4, r7
 8018752:	d206      	bcs.n	8018762 <__hexnan+0x72>
 8018754:	2d07      	cmp	r5, #7
 8018756:	dc04      	bgt.n	8018762 <__hexnan+0x72>
 8018758:	002a      	movs	r2, r5
 801875a:	0039      	movs	r1, r7
 801875c:	0020      	movs	r0, r4
 801875e:	f7ff ffa1 	bl	80186a4 <L_shift>
 8018762:	9b01      	ldr	r3, [sp, #4]
 8018764:	2508      	movs	r5, #8
 8018766:	429c      	cmp	r4, r3
 8018768:	d905      	bls.n	8018776 <__hexnan+0x86>
 801876a:	1f27      	subs	r7, r4, #4
 801876c:	2500      	movs	r5, #0
 801876e:	003c      	movs	r4, r7
 8018770:	9b02      	ldr	r3, [sp, #8]
 8018772:	603d      	str	r5, [r7, #0]
 8018774:	9307      	str	r3, [sp, #28]
 8018776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018778:	9305      	str	r3, [sp, #20]
 801877a:	e7d5      	b.n	8018728 <__hexnan+0x38>
 801877c:	9b03      	ldr	r3, [sp, #12]
 801877e:	2b29      	cmp	r3, #41	; 0x29
 8018780:	d14a      	bne.n	8018818 <__hexnan+0x128>
 8018782:	9b05      	ldr	r3, [sp, #20]
 8018784:	9a08      	ldr	r2, [sp, #32]
 8018786:	3302      	adds	r3, #2
 8018788:	6013      	str	r3, [r2, #0]
 801878a:	9b02      	ldr	r3, [sp, #8]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d043      	beq.n	8018818 <__hexnan+0x128>
 8018790:	42bc      	cmp	r4, r7
 8018792:	d206      	bcs.n	80187a2 <__hexnan+0xb2>
 8018794:	2d07      	cmp	r5, #7
 8018796:	dc04      	bgt.n	80187a2 <__hexnan+0xb2>
 8018798:	002a      	movs	r2, r5
 801879a:	0039      	movs	r1, r7
 801879c:	0020      	movs	r0, r4
 801879e:	f7ff ff81 	bl	80186a4 <L_shift>
 80187a2:	9b01      	ldr	r3, [sp, #4]
 80187a4:	429c      	cmp	r4, r3
 80187a6:	d926      	bls.n	80187f6 <__hexnan+0x106>
 80187a8:	cc04      	ldmia	r4!, {r2}
 80187aa:	601a      	str	r2, [r3, #0]
 80187ac:	3304      	adds	r3, #4
 80187ae:	42a6      	cmp	r6, r4
 80187b0:	d2fa      	bcs.n	80187a8 <__hexnan+0xb8>
 80187b2:	2200      	movs	r2, #0
 80187b4:	c304      	stmia	r3!, {r2}
 80187b6:	429e      	cmp	r6, r3
 80187b8:	d2fc      	bcs.n	80187b4 <__hexnan+0xc4>
 80187ba:	6833      	ldr	r3, [r6, #0]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d104      	bne.n	80187ca <__hexnan+0xda>
 80187c0:	9b01      	ldr	r3, [sp, #4]
 80187c2:	429e      	cmp	r6, r3
 80187c4:	d126      	bne.n	8018814 <__hexnan+0x124>
 80187c6:	2301      	movs	r3, #1
 80187c8:	6033      	str	r3, [r6, #0]
 80187ca:	2005      	movs	r0, #5
 80187cc:	e025      	b.n	801881a <__hexnan+0x12a>
 80187ce:	9b02      	ldr	r3, [sp, #8]
 80187d0:	3501      	adds	r5, #1
 80187d2:	3301      	adds	r3, #1
 80187d4:	9302      	str	r3, [sp, #8]
 80187d6:	2d08      	cmp	r5, #8
 80187d8:	dd06      	ble.n	80187e8 <__hexnan+0xf8>
 80187da:	9b01      	ldr	r3, [sp, #4]
 80187dc:	429c      	cmp	r4, r3
 80187de:	d9ca      	bls.n	8018776 <__hexnan+0x86>
 80187e0:	2300      	movs	r3, #0
 80187e2:	2501      	movs	r5, #1
 80187e4:	3c04      	subs	r4, #4
 80187e6:	6023      	str	r3, [r4, #0]
 80187e8:	220f      	movs	r2, #15
 80187ea:	6823      	ldr	r3, [r4, #0]
 80187ec:	4010      	ands	r0, r2
 80187ee:	011b      	lsls	r3, r3, #4
 80187f0:	4318      	orrs	r0, r3
 80187f2:	6020      	str	r0, [r4, #0]
 80187f4:	e7bf      	b.n	8018776 <__hexnan+0x86>
 80187f6:	9b06      	ldr	r3, [sp, #24]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d0de      	beq.n	80187ba <__hexnan+0xca>
 80187fc:	2120      	movs	r1, #32
 80187fe:	9a06      	ldr	r2, [sp, #24]
 8018800:	9b04      	ldr	r3, [sp, #16]
 8018802:	1a89      	subs	r1, r1, r2
 8018804:	2201      	movs	r2, #1
 8018806:	4252      	negs	r2, r2
 8018808:	40ca      	lsrs	r2, r1
 801880a:	3b04      	subs	r3, #4
 801880c:	6819      	ldr	r1, [r3, #0]
 801880e:	400a      	ands	r2, r1
 8018810:	601a      	str	r2, [r3, #0]
 8018812:	e7d2      	b.n	80187ba <__hexnan+0xca>
 8018814:	3e04      	subs	r6, #4
 8018816:	e7d0      	b.n	80187ba <__hexnan+0xca>
 8018818:	2004      	movs	r0, #4
 801881a:	b00b      	add	sp, #44	; 0x2c
 801881c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801881e <__localeconv_l>:
 801881e:	30f0      	adds	r0, #240	; 0xf0
 8018820:	4770      	bx	lr
	...

08018824 <_localeconv_r>:
 8018824:	4b03      	ldr	r3, [pc, #12]	; (8018834 <_localeconv_r+0x10>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801882a:	2800      	cmp	r0, #0
 801882c:	d100      	bne.n	8018830 <_localeconv_r+0xc>
 801882e:	4802      	ldr	r0, [pc, #8]	; (8018838 <_localeconv_r+0x14>)
 8018830:	30f0      	adds	r0, #240	; 0xf0
 8018832:	4770      	bx	lr
 8018834:	200000b8 	.word	0x200000b8
 8018838:	200004e8 	.word	0x200004e8

0801883c <__retarget_lock_acquire_recursive>:
 801883c:	4770      	bx	lr

0801883e <__retarget_lock_release_recursive>:
 801883e:	4770      	bx	lr

08018840 <memchr>:
 8018840:	b2c9      	uxtb	r1, r1
 8018842:	1882      	adds	r2, r0, r2
 8018844:	4290      	cmp	r0, r2
 8018846:	d101      	bne.n	801884c <memchr+0xc>
 8018848:	2000      	movs	r0, #0
 801884a:	4770      	bx	lr
 801884c:	7803      	ldrb	r3, [r0, #0]
 801884e:	428b      	cmp	r3, r1
 8018850:	d0fb      	beq.n	801884a <memchr+0xa>
 8018852:	3001      	adds	r0, #1
 8018854:	e7f6      	b.n	8018844 <memchr+0x4>

08018856 <memmove>:
 8018856:	b510      	push	{r4, lr}
 8018858:	4288      	cmp	r0, r1
 801885a:	d902      	bls.n	8018862 <memmove+0xc>
 801885c:	188b      	adds	r3, r1, r2
 801885e:	4298      	cmp	r0, r3
 8018860:	d303      	bcc.n	801886a <memmove+0x14>
 8018862:	2300      	movs	r3, #0
 8018864:	e007      	b.n	8018876 <memmove+0x20>
 8018866:	5c8b      	ldrb	r3, [r1, r2]
 8018868:	5483      	strb	r3, [r0, r2]
 801886a:	3a01      	subs	r2, #1
 801886c:	d2fb      	bcs.n	8018866 <memmove+0x10>
 801886e:	bd10      	pop	{r4, pc}
 8018870:	5ccc      	ldrb	r4, [r1, r3]
 8018872:	54c4      	strb	r4, [r0, r3]
 8018874:	3301      	adds	r3, #1
 8018876:	429a      	cmp	r2, r3
 8018878:	d1fa      	bne.n	8018870 <memmove+0x1a>
 801887a:	e7f8      	b.n	801886e <memmove+0x18>

0801887c <_Balloc>:
 801887c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801887e:	b570      	push	{r4, r5, r6, lr}
 8018880:	0004      	movs	r4, r0
 8018882:	000d      	movs	r5, r1
 8018884:	2b00      	cmp	r3, #0
 8018886:	d012      	beq.n	80188ae <_Balloc+0x32>
 8018888:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801888a:	00ab      	lsls	r3, r5, #2
 801888c:	18d3      	adds	r3, r2, r3
 801888e:	6818      	ldr	r0, [r3, #0]
 8018890:	2800      	cmp	r0, #0
 8018892:	d115      	bne.n	80188c0 <_Balloc+0x44>
 8018894:	2101      	movs	r1, #1
 8018896:	000e      	movs	r6, r1
 8018898:	40ae      	lsls	r6, r5
 801889a:	1d72      	adds	r2, r6, #5
 801889c:	0092      	lsls	r2, r2, #2
 801889e:	0020      	movs	r0, r4
 80188a0:	f000 fcbe 	bl	8019220 <_calloc_r>
 80188a4:	2800      	cmp	r0, #0
 80188a6:	d009      	beq.n	80188bc <_Balloc+0x40>
 80188a8:	6045      	str	r5, [r0, #4]
 80188aa:	6086      	str	r6, [r0, #8]
 80188ac:	e00a      	b.n	80188c4 <_Balloc+0x48>
 80188ae:	2221      	movs	r2, #33	; 0x21
 80188b0:	2104      	movs	r1, #4
 80188b2:	f000 fcb5 	bl	8019220 <_calloc_r>
 80188b6:	64e0      	str	r0, [r4, #76]	; 0x4c
 80188b8:	2800      	cmp	r0, #0
 80188ba:	d1e5      	bne.n	8018888 <_Balloc+0xc>
 80188bc:	2000      	movs	r0, #0
 80188be:	bd70      	pop	{r4, r5, r6, pc}
 80188c0:	6802      	ldr	r2, [r0, #0]
 80188c2:	601a      	str	r2, [r3, #0]
 80188c4:	2300      	movs	r3, #0
 80188c6:	6103      	str	r3, [r0, #16]
 80188c8:	60c3      	str	r3, [r0, #12]
 80188ca:	e7f8      	b.n	80188be <_Balloc+0x42>

080188cc <_Bfree>:
 80188cc:	2900      	cmp	r1, #0
 80188ce:	d006      	beq.n	80188de <_Bfree+0x12>
 80188d0:	684b      	ldr	r3, [r1, #4]
 80188d2:	009a      	lsls	r2, r3, #2
 80188d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80188d6:	189b      	adds	r3, r3, r2
 80188d8:	681a      	ldr	r2, [r3, #0]
 80188da:	600a      	str	r2, [r1, #0]
 80188dc:	6019      	str	r1, [r3, #0]
 80188de:	4770      	bx	lr

080188e0 <__multadd>:
 80188e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80188e2:	001e      	movs	r6, r3
 80188e4:	2314      	movs	r3, #20
 80188e6:	469c      	mov	ip, r3
 80188e8:	0007      	movs	r7, r0
 80188ea:	000c      	movs	r4, r1
 80188ec:	2000      	movs	r0, #0
 80188ee:	690d      	ldr	r5, [r1, #16]
 80188f0:	448c      	add	ip, r1
 80188f2:	4663      	mov	r3, ip
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	3001      	adds	r0, #1
 80188f8:	b299      	uxth	r1, r3
 80188fa:	4663      	mov	r3, ip
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	4351      	muls	r1, r2
 8018900:	0c1b      	lsrs	r3, r3, #16
 8018902:	4353      	muls	r3, r2
 8018904:	1989      	adds	r1, r1, r6
 8018906:	0c0e      	lsrs	r6, r1, #16
 8018908:	199b      	adds	r3, r3, r6
 801890a:	b289      	uxth	r1, r1
 801890c:	0c1e      	lsrs	r6, r3, #16
 801890e:	041b      	lsls	r3, r3, #16
 8018910:	185b      	adds	r3, r3, r1
 8018912:	4661      	mov	r1, ip
 8018914:	c108      	stmia	r1!, {r3}
 8018916:	468c      	mov	ip, r1
 8018918:	4285      	cmp	r5, r0
 801891a:	dcea      	bgt.n	80188f2 <__multadd+0x12>
 801891c:	2e00      	cmp	r6, #0
 801891e:	d01b      	beq.n	8018958 <__multadd+0x78>
 8018920:	68a3      	ldr	r3, [r4, #8]
 8018922:	42ab      	cmp	r3, r5
 8018924:	dc12      	bgt.n	801894c <__multadd+0x6c>
 8018926:	6863      	ldr	r3, [r4, #4]
 8018928:	0038      	movs	r0, r7
 801892a:	1c59      	adds	r1, r3, #1
 801892c:	f7ff ffa6 	bl	801887c <_Balloc>
 8018930:	0021      	movs	r1, r4
 8018932:	6923      	ldr	r3, [r4, #16]
 8018934:	9001      	str	r0, [sp, #4]
 8018936:	1c9a      	adds	r2, r3, #2
 8018938:	0092      	lsls	r2, r2, #2
 801893a:	310c      	adds	r1, #12
 801893c:	300c      	adds	r0, #12
 801893e:	f7fc f8b6 	bl	8014aae <memcpy>
 8018942:	0021      	movs	r1, r4
 8018944:	0038      	movs	r0, r7
 8018946:	f7ff ffc1 	bl	80188cc <_Bfree>
 801894a:	9c01      	ldr	r4, [sp, #4]
 801894c:	1d2b      	adds	r3, r5, #4
 801894e:	009b      	lsls	r3, r3, #2
 8018950:	18e3      	adds	r3, r4, r3
 8018952:	3501      	adds	r5, #1
 8018954:	605e      	str	r6, [r3, #4]
 8018956:	6125      	str	r5, [r4, #16]
 8018958:	0020      	movs	r0, r4
 801895a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0801895c <__s2b>:
 801895c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801895e:	0006      	movs	r6, r0
 8018960:	0018      	movs	r0, r3
 8018962:	000c      	movs	r4, r1
 8018964:	3008      	adds	r0, #8
 8018966:	2109      	movs	r1, #9
 8018968:	9301      	str	r3, [sp, #4]
 801896a:	0015      	movs	r5, r2
 801896c:	f7e7 fc7a 	bl	8000264 <__divsi3>
 8018970:	2301      	movs	r3, #1
 8018972:	2100      	movs	r1, #0
 8018974:	4283      	cmp	r3, r0
 8018976:	db1f      	blt.n	80189b8 <__s2b+0x5c>
 8018978:	0030      	movs	r0, r6
 801897a:	f7ff ff7f 	bl	801887c <_Balloc>
 801897e:	9b08      	ldr	r3, [sp, #32]
 8018980:	6143      	str	r3, [r0, #20]
 8018982:	2301      	movs	r3, #1
 8018984:	6103      	str	r3, [r0, #16]
 8018986:	2d09      	cmp	r5, #9
 8018988:	dd19      	ble.n	80189be <__s2b+0x62>
 801898a:	0023      	movs	r3, r4
 801898c:	3309      	adds	r3, #9
 801898e:	001f      	movs	r7, r3
 8018990:	9300      	str	r3, [sp, #0]
 8018992:	1964      	adds	r4, r4, r5
 8018994:	783b      	ldrb	r3, [r7, #0]
 8018996:	0001      	movs	r1, r0
 8018998:	3b30      	subs	r3, #48	; 0x30
 801899a:	220a      	movs	r2, #10
 801899c:	0030      	movs	r0, r6
 801899e:	3701      	adds	r7, #1
 80189a0:	f7ff ff9e 	bl	80188e0 <__multadd>
 80189a4:	42a7      	cmp	r7, r4
 80189a6:	d1f5      	bne.n	8018994 <__s2b+0x38>
 80189a8:	9b00      	ldr	r3, [sp, #0]
 80189aa:	195c      	adds	r4, r3, r5
 80189ac:	3c08      	subs	r4, #8
 80189ae:	002f      	movs	r7, r5
 80189b0:	9b01      	ldr	r3, [sp, #4]
 80189b2:	429f      	cmp	r7, r3
 80189b4:	db06      	blt.n	80189c4 <__s2b+0x68>
 80189b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80189b8:	005b      	lsls	r3, r3, #1
 80189ba:	3101      	adds	r1, #1
 80189bc:	e7da      	b.n	8018974 <__s2b+0x18>
 80189be:	340a      	adds	r4, #10
 80189c0:	2509      	movs	r5, #9
 80189c2:	e7f4      	b.n	80189ae <__s2b+0x52>
 80189c4:	1b63      	subs	r3, r4, r5
 80189c6:	5ddb      	ldrb	r3, [r3, r7]
 80189c8:	0001      	movs	r1, r0
 80189ca:	3b30      	subs	r3, #48	; 0x30
 80189cc:	220a      	movs	r2, #10
 80189ce:	0030      	movs	r0, r6
 80189d0:	f7ff ff86 	bl	80188e0 <__multadd>
 80189d4:	3701      	adds	r7, #1
 80189d6:	e7eb      	b.n	80189b0 <__s2b+0x54>

080189d8 <__hi0bits>:
 80189d8:	0003      	movs	r3, r0
 80189da:	0c02      	lsrs	r2, r0, #16
 80189dc:	2000      	movs	r0, #0
 80189de:	4282      	cmp	r2, r0
 80189e0:	d101      	bne.n	80189e6 <__hi0bits+0xe>
 80189e2:	041b      	lsls	r3, r3, #16
 80189e4:	3010      	adds	r0, #16
 80189e6:	0e1a      	lsrs	r2, r3, #24
 80189e8:	d101      	bne.n	80189ee <__hi0bits+0x16>
 80189ea:	3008      	adds	r0, #8
 80189ec:	021b      	lsls	r3, r3, #8
 80189ee:	0f1a      	lsrs	r2, r3, #28
 80189f0:	d101      	bne.n	80189f6 <__hi0bits+0x1e>
 80189f2:	3004      	adds	r0, #4
 80189f4:	011b      	lsls	r3, r3, #4
 80189f6:	0f9a      	lsrs	r2, r3, #30
 80189f8:	d101      	bne.n	80189fe <__hi0bits+0x26>
 80189fa:	3002      	adds	r0, #2
 80189fc:	009b      	lsls	r3, r3, #2
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	db03      	blt.n	8018a0a <__hi0bits+0x32>
 8018a02:	3001      	adds	r0, #1
 8018a04:	005b      	lsls	r3, r3, #1
 8018a06:	d400      	bmi.n	8018a0a <__hi0bits+0x32>
 8018a08:	2020      	movs	r0, #32
 8018a0a:	4770      	bx	lr

08018a0c <__lo0bits>:
 8018a0c:	2207      	movs	r2, #7
 8018a0e:	6803      	ldr	r3, [r0, #0]
 8018a10:	b510      	push	{r4, lr}
 8018a12:	0001      	movs	r1, r0
 8018a14:	401a      	ands	r2, r3
 8018a16:	d00d      	beq.n	8018a34 <__lo0bits+0x28>
 8018a18:	2401      	movs	r4, #1
 8018a1a:	2000      	movs	r0, #0
 8018a1c:	4223      	tst	r3, r4
 8018a1e:	d105      	bne.n	8018a2c <__lo0bits+0x20>
 8018a20:	3002      	adds	r0, #2
 8018a22:	4203      	tst	r3, r0
 8018a24:	d003      	beq.n	8018a2e <__lo0bits+0x22>
 8018a26:	40e3      	lsrs	r3, r4
 8018a28:	0020      	movs	r0, r4
 8018a2a:	600b      	str	r3, [r1, #0]
 8018a2c:	bd10      	pop	{r4, pc}
 8018a2e:	089b      	lsrs	r3, r3, #2
 8018a30:	600b      	str	r3, [r1, #0]
 8018a32:	e7fb      	b.n	8018a2c <__lo0bits+0x20>
 8018a34:	b29c      	uxth	r4, r3
 8018a36:	0010      	movs	r0, r2
 8018a38:	2c00      	cmp	r4, #0
 8018a3a:	d101      	bne.n	8018a40 <__lo0bits+0x34>
 8018a3c:	2010      	movs	r0, #16
 8018a3e:	0c1b      	lsrs	r3, r3, #16
 8018a40:	b2da      	uxtb	r2, r3
 8018a42:	2a00      	cmp	r2, #0
 8018a44:	d101      	bne.n	8018a4a <__lo0bits+0x3e>
 8018a46:	3008      	adds	r0, #8
 8018a48:	0a1b      	lsrs	r3, r3, #8
 8018a4a:	071a      	lsls	r2, r3, #28
 8018a4c:	d101      	bne.n	8018a52 <__lo0bits+0x46>
 8018a4e:	3004      	adds	r0, #4
 8018a50:	091b      	lsrs	r3, r3, #4
 8018a52:	079a      	lsls	r2, r3, #30
 8018a54:	d101      	bne.n	8018a5a <__lo0bits+0x4e>
 8018a56:	3002      	adds	r0, #2
 8018a58:	089b      	lsrs	r3, r3, #2
 8018a5a:	07da      	lsls	r2, r3, #31
 8018a5c:	d4e8      	bmi.n	8018a30 <__lo0bits+0x24>
 8018a5e:	085b      	lsrs	r3, r3, #1
 8018a60:	d001      	beq.n	8018a66 <__lo0bits+0x5a>
 8018a62:	3001      	adds	r0, #1
 8018a64:	e7e4      	b.n	8018a30 <__lo0bits+0x24>
 8018a66:	2020      	movs	r0, #32
 8018a68:	e7e0      	b.n	8018a2c <__lo0bits+0x20>

08018a6a <__i2b>:
 8018a6a:	b510      	push	{r4, lr}
 8018a6c:	000c      	movs	r4, r1
 8018a6e:	2101      	movs	r1, #1
 8018a70:	f7ff ff04 	bl	801887c <_Balloc>
 8018a74:	2301      	movs	r3, #1
 8018a76:	6144      	str	r4, [r0, #20]
 8018a78:	6103      	str	r3, [r0, #16]
 8018a7a:	bd10      	pop	{r4, pc}

08018a7c <__multiply>:
 8018a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a7e:	690b      	ldr	r3, [r1, #16]
 8018a80:	0014      	movs	r4, r2
 8018a82:	6912      	ldr	r2, [r2, #16]
 8018a84:	b089      	sub	sp, #36	; 0x24
 8018a86:	000d      	movs	r5, r1
 8018a88:	4293      	cmp	r3, r2
 8018a8a:	da01      	bge.n	8018a90 <__multiply+0x14>
 8018a8c:	0025      	movs	r5, r4
 8018a8e:	000c      	movs	r4, r1
 8018a90:	692f      	ldr	r7, [r5, #16]
 8018a92:	6926      	ldr	r6, [r4, #16]
 8018a94:	6869      	ldr	r1, [r5, #4]
 8018a96:	19bb      	adds	r3, r7, r6
 8018a98:	9302      	str	r3, [sp, #8]
 8018a9a:	68ab      	ldr	r3, [r5, #8]
 8018a9c:	19ba      	adds	r2, r7, r6
 8018a9e:	4293      	cmp	r3, r2
 8018aa0:	da00      	bge.n	8018aa4 <__multiply+0x28>
 8018aa2:	3101      	adds	r1, #1
 8018aa4:	f7ff feea 	bl	801887c <_Balloc>
 8018aa8:	0002      	movs	r2, r0
 8018aaa:	19bb      	adds	r3, r7, r6
 8018aac:	3214      	adds	r2, #20
 8018aae:	009b      	lsls	r3, r3, #2
 8018ab0:	18d3      	adds	r3, r2, r3
 8018ab2:	469c      	mov	ip, r3
 8018ab4:	2100      	movs	r1, #0
 8018ab6:	0013      	movs	r3, r2
 8018ab8:	9004      	str	r0, [sp, #16]
 8018aba:	4563      	cmp	r3, ip
 8018abc:	d31d      	bcc.n	8018afa <__multiply+0x7e>
 8018abe:	3514      	adds	r5, #20
 8018ac0:	00bf      	lsls	r7, r7, #2
 8018ac2:	19eb      	adds	r3, r5, r7
 8018ac4:	3414      	adds	r4, #20
 8018ac6:	00b6      	lsls	r6, r6, #2
 8018ac8:	9305      	str	r3, [sp, #20]
 8018aca:	19a3      	adds	r3, r4, r6
 8018acc:	9503      	str	r5, [sp, #12]
 8018ace:	9401      	str	r4, [sp, #4]
 8018ad0:	9307      	str	r3, [sp, #28]
 8018ad2:	9b07      	ldr	r3, [sp, #28]
 8018ad4:	9901      	ldr	r1, [sp, #4]
 8018ad6:	4299      	cmp	r1, r3
 8018ad8:	d311      	bcc.n	8018afe <__multiply+0x82>
 8018ada:	9b02      	ldr	r3, [sp, #8]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	dd06      	ble.n	8018aee <__multiply+0x72>
 8018ae0:	2304      	movs	r3, #4
 8018ae2:	425b      	negs	r3, r3
 8018ae4:	449c      	add	ip, r3
 8018ae6:	4663      	mov	r3, ip
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d051      	beq.n	8018b92 <__multiply+0x116>
 8018aee:	9b04      	ldr	r3, [sp, #16]
 8018af0:	9a02      	ldr	r2, [sp, #8]
 8018af2:	0018      	movs	r0, r3
 8018af4:	611a      	str	r2, [r3, #16]
 8018af6:	b009      	add	sp, #36	; 0x24
 8018af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018afa:	c302      	stmia	r3!, {r1}
 8018afc:	e7dd      	b.n	8018aba <__multiply+0x3e>
 8018afe:	9b01      	ldr	r3, [sp, #4]
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	b298      	uxth	r0, r3
 8018b04:	2800      	cmp	r0, #0
 8018b06:	d01c      	beq.n	8018b42 <__multiply+0xc6>
 8018b08:	0015      	movs	r5, r2
 8018b0a:	2600      	movs	r6, #0
 8018b0c:	9f03      	ldr	r7, [sp, #12]
 8018b0e:	cf02      	ldmia	r7!, {r1}
 8018b10:	682c      	ldr	r4, [r5, #0]
 8018b12:	b28b      	uxth	r3, r1
 8018b14:	4343      	muls	r3, r0
 8018b16:	0c09      	lsrs	r1, r1, #16
 8018b18:	4341      	muls	r1, r0
 8018b1a:	b2a4      	uxth	r4, r4
 8018b1c:	191b      	adds	r3, r3, r4
 8018b1e:	199b      	adds	r3, r3, r6
 8018b20:	000e      	movs	r6, r1
 8018b22:	6829      	ldr	r1, [r5, #0]
 8018b24:	9506      	str	r5, [sp, #24]
 8018b26:	0c09      	lsrs	r1, r1, #16
 8018b28:	1871      	adds	r1, r6, r1
 8018b2a:	0c1e      	lsrs	r6, r3, #16
 8018b2c:	1989      	adds	r1, r1, r6
 8018b2e:	0c0e      	lsrs	r6, r1, #16
 8018b30:	b29b      	uxth	r3, r3
 8018b32:	0409      	lsls	r1, r1, #16
 8018b34:	430b      	orrs	r3, r1
 8018b36:	c508      	stmia	r5!, {r3}
 8018b38:	9b05      	ldr	r3, [sp, #20]
 8018b3a:	42bb      	cmp	r3, r7
 8018b3c:	d8e7      	bhi.n	8018b0e <__multiply+0x92>
 8018b3e:	9b06      	ldr	r3, [sp, #24]
 8018b40:	605e      	str	r6, [r3, #4]
 8018b42:	9b01      	ldr	r3, [sp, #4]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	0c1d      	lsrs	r5, r3, #16
 8018b48:	d01e      	beq.n	8018b88 <__multiply+0x10c>
 8018b4a:	0010      	movs	r0, r2
 8018b4c:	2700      	movs	r7, #0
 8018b4e:	6813      	ldr	r3, [r2, #0]
 8018b50:	9e03      	ldr	r6, [sp, #12]
 8018b52:	6831      	ldr	r1, [r6, #0]
 8018b54:	6804      	ldr	r4, [r0, #0]
 8018b56:	b289      	uxth	r1, r1
 8018b58:	4369      	muls	r1, r5
 8018b5a:	0c24      	lsrs	r4, r4, #16
 8018b5c:	1909      	adds	r1, r1, r4
 8018b5e:	19c9      	adds	r1, r1, r7
 8018b60:	040f      	lsls	r7, r1, #16
 8018b62:	b29b      	uxth	r3, r3
 8018b64:	433b      	orrs	r3, r7
 8018b66:	6003      	str	r3, [r0, #0]
 8018b68:	ce80      	ldmia	r6!, {r7}
 8018b6a:	6843      	ldr	r3, [r0, #4]
 8018b6c:	0c3f      	lsrs	r7, r7, #16
 8018b6e:	436f      	muls	r7, r5
 8018b70:	b29b      	uxth	r3, r3
 8018b72:	18fb      	adds	r3, r7, r3
 8018b74:	0c09      	lsrs	r1, r1, #16
 8018b76:	185b      	adds	r3, r3, r1
 8018b78:	9905      	ldr	r1, [sp, #20]
 8018b7a:	9006      	str	r0, [sp, #24]
 8018b7c:	0c1f      	lsrs	r7, r3, #16
 8018b7e:	3004      	adds	r0, #4
 8018b80:	42b1      	cmp	r1, r6
 8018b82:	d8e6      	bhi.n	8018b52 <__multiply+0xd6>
 8018b84:	9906      	ldr	r1, [sp, #24]
 8018b86:	604b      	str	r3, [r1, #4]
 8018b88:	9b01      	ldr	r3, [sp, #4]
 8018b8a:	3204      	adds	r2, #4
 8018b8c:	3304      	adds	r3, #4
 8018b8e:	9301      	str	r3, [sp, #4]
 8018b90:	e79f      	b.n	8018ad2 <__multiply+0x56>
 8018b92:	9b02      	ldr	r3, [sp, #8]
 8018b94:	3b01      	subs	r3, #1
 8018b96:	9302      	str	r3, [sp, #8]
 8018b98:	e79f      	b.n	8018ada <__multiply+0x5e>
	...

08018b9c <__pow5mult>:
 8018b9c:	2303      	movs	r3, #3
 8018b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018ba0:	4013      	ands	r3, r2
 8018ba2:	0006      	movs	r6, r0
 8018ba4:	000f      	movs	r7, r1
 8018ba6:	0015      	movs	r5, r2
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d008      	beq.n	8018bbe <__pow5mult+0x22>
 8018bac:	491a      	ldr	r1, [pc, #104]	; (8018c18 <__pow5mult+0x7c>)
 8018bae:	3b01      	subs	r3, #1
 8018bb0:	009a      	lsls	r2, r3, #2
 8018bb2:	5852      	ldr	r2, [r2, r1]
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	0039      	movs	r1, r7
 8018bb8:	f7ff fe92 	bl	80188e0 <__multadd>
 8018bbc:	0007      	movs	r7, r0
 8018bbe:	10ad      	asrs	r5, r5, #2
 8018bc0:	d027      	beq.n	8018c12 <__pow5mult+0x76>
 8018bc2:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8018bc4:	2c00      	cmp	r4, #0
 8018bc6:	d107      	bne.n	8018bd8 <__pow5mult+0x3c>
 8018bc8:	4914      	ldr	r1, [pc, #80]	; (8018c1c <__pow5mult+0x80>)
 8018bca:	0030      	movs	r0, r6
 8018bcc:	f7ff ff4d 	bl	8018a6a <__i2b>
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	0004      	movs	r4, r0
 8018bd4:	64b0      	str	r0, [r6, #72]	; 0x48
 8018bd6:	6003      	str	r3, [r0, #0]
 8018bd8:	2301      	movs	r3, #1
 8018bda:	421d      	tst	r5, r3
 8018bdc:	d00a      	beq.n	8018bf4 <__pow5mult+0x58>
 8018bde:	0039      	movs	r1, r7
 8018be0:	0022      	movs	r2, r4
 8018be2:	0030      	movs	r0, r6
 8018be4:	f7ff ff4a 	bl	8018a7c <__multiply>
 8018be8:	0039      	movs	r1, r7
 8018bea:	9001      	str	r0, [sp, #4]
 8018bec:	0030      	movs	r0, r6
 8018bee:	f7ff fe6d 	bl	80188cc <_Bfree>
 8018bf2:	9f01      	ldr	r7, [sp, #4]
 8018bf4:	106d      	asrs	r5, r5, #1
 8018bf6:	d00c      	beq.n	8018c12 <__pow5mult+0x76>
 8018bf8:	6820      	ldr	r0, [r4, #0]
 8018bfa:	2800      	cmp	r0, #0
 8018bfc:	d107      	bne.n	8018c0e <__pow5mult+0x72>
 8018bfe:	0022      	movs	r2, r4
 8018c00:	0021      	movs	r1, r4
 8018c02:	0030      	movs	r0, r6
 8018c04:	f7ff ff3a 	bl	8018a7c <__multiply>
 8018c08:	2300      	movs	r3, #0
 8018c0a:	6020      	str	r0, [r4, #0]
 8018c0c:	6003      	str	r3, [r0, #0]
 8018c0e:	0004      	movs	r4, r0
 8018c10:	e7e2      	b.n	8018bd8 <__pow5mult+0x3c>
 8018c12:	0038      	movs	r0, r7
 8018c14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018c16:	46c0      	nop			; (mov r8, r8)
 8018c18:	0801ccc8 	.word	0x0801ccc8
 8018c1c:	00000271 	.word	0x00000271

08018c20 <__lshift>:
 8018c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c22:	000d      	movs	r5, r1
 8018c24:	0017      	movs	r7, r2
 8018c26:	692b      	ldr	r3, [r5, #16]
 8018c28:	1154      	asrs	r4, r2, #5
 8018c2a:	b085      	sub	sp, #20
 8018c2c:	18e3      	adds	r3, r4, r3
 8018c2e:	9301      	str	r3, [sp, #4]
 8018c30:	3301      	adds	r3, #1
 8018c32:	9300      	str	r3, [sp, #0]
 8018c34:	6849      	ldr	r1, [r1, #4]
 8018c36:	68ab      	ldr	r3, [r5, #8]
 8018c38:	9002      	str	r0, [sp, #8]
 8018c3a:	9a00      	ldr	r2, [sp, #0]
 8018c3c:	4293      	cmp	r3, r2
 8018c3e:	db35      	blt.n	8018cac <__lshift+0x8c>
 8018c40:	9802      	ldr	r0, [sp, #8]
 8018c42:	f7ff fe1b 	bl	801887c <_Balloc>
 8018c46:	2300      	movs	r3, #0
 8018c48:	0002      	movs	r2, r0
 8018c4a:	0006      	movs	r6, r0
 8018c4c:	0019      	movs	r1, r3
 8018c4e:	3214      	adds	r2, #20
 8018c50:	42a3      	cmp	r3, r4
 8018c52:	db2e      	blt.n	8018cb2 <__lshift+0x92>
 8018c54:	43e3      	mvns	r3, r4
 8018c56:	17db      	asrs	r3, r3, #31
 8018c58:	401c      	ands	r4, r3
 8018c5a:	002b      	movs	r3, r5
 8018c5c:	00a4      	lsls	r4, r4, #2
 8018c5e:	1914      	adds	r4, r2, r4
 8018c60:	692a      	ldr	r2, [r5, #16]
 8018c62:	3314      	adds	r3, #20
 8018c64:	0092      	lsls	r2, r2, #2
 8018c66:	189a      	adds	r2, r3, r2
 8018c68:	4694      	mov	ip, r2
 8018c6a:	221f      	movs	r2, #31
 8018c6c:	4017      	ands	r7, r2
 8018c6e:	d024      	beq.n	8018cba <__lshift+0x9a>
 8018c70:	3201      	adds	r2, #1
 8018c72:	1bd2      	subs	r2, r2, r7
 8018c74:	9203      	str	r2, [sp, #12]
 8018c76:	2200      	movs	r2, #0
 8018c78:	6819      	ldr	r1, [r3, #0]
 8018c7a:	0020      	movs	r0, r4
 8018c7c:	40b9      	lsls	r1, r7
 8018c7e:	430a      	orrs	r2, r1
 8018c80:	c404      	stmia	r4!, {r2}
 8018c82:	cb04      	ldmia	r3!, {r2}
 8018c84:	9903      	ldr	r1, [sp, #12]
 8018c86:	40ca      	lsrs	r2, r1
 8018c88:	459c      	cmp	ip, r3
 8018c8a:	d8f5      	bhi.n	8018c78 <__lshift+0x58>
 8018c8c:	6042      	str	r2, [r0, #4]
 8018c8e:	2a00      	cmp	r2, #0
 8018c90:	d002      	beq.n	8018c98 <__lshift+0x78>
 8018c92:	9b01      	ldr	r3, [sp, #4]
 8018c94:	3302      	adds	r3, #2
 8018c96:	9300      	str	r3, [sp, #0]
 8018c98:	9b00      	ldr	r3, [sp, #0]
 8018c9a:	9802      	ldr	r0, [sp, #8]
 8018c9c:	3b01      	subs	r3, #1
 8018c9e:	6133      	str	r3, [r6, #16]
 8018ca0:	0029      	movs	r1, r5
 8018ca2:	f7ff fe13 	bl	80188cc <_Bfree>
 8018ca6:	0030      	movs	r0, r6
 8018ca8:	b005      	add	sp, #20
 8018caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018cac:	3101      	adds	r1, #1
 8018cae:	005b      	lsls	r3, r3, #1
 8018cb0:	e7c3      	b.n	8018c3a <__lshift+0x1a>
 8018cb2:	0098      	lsls	r0, r3, #2
 8018cb4:	5011      	str	r1, [r2, r0]
 8018cb6:	3301      	adds	r3, #1
 8018cb8:	e7ca      	b.n	8018c50 <__lshift+0x30>
 8018cba:	cb04      	ldmia	r3!, {r2}
 8018cbc:	c404      	stmia	r4!, {r2}
 8018cbe:	459c      	cmp	ip, r3
 8018cc0:	d8fb      	bhi.n	8018cba <__lshift+0x9a>
 8018cc2:	e7e9      	b.n	8018c98 <__lshift+0x78>

08018cc4 <__mcmp>:
 8018cc4:	690a      	ldr	r2, [r1, #16]
 8018cc6:	6903      	ldr	r3, [r0, #16]
 8018cc8:	b530      	push	{r4, r5, lr}
 8018cca:	1a9b      	subs	r3, r3, r2
 8018ccc:	d10d      	bne.n	8018cea <__mcmp+0x26>
 8018cce:	0092      	lsls	r2, r2, #2
 8018cd0:	3014      	adds	r0, #20
 8018cd2:	3114      	adds	r1, #20
 8018cd4:	1884      	adds	r4, r0, r2
 8018cd6:	1889      	adds	r1, r1, r2
 8018cd8:	3c04      	subs	r4, #4
 8018cda:	3904      	subs	r1, #4
 8018cdc:	6825      	ldr	r5, [r4, #0]
 8018cde:	680a      	ldr	r2, [r1, #0]
 8018ce0:	4295      	cmp	r5, r2
 8018ce2:	d004      	beq.n	8018cee <__mcmp+0x2a>
 8018ce4:	2301      	movs	r3, #1
 8018ce6:	4295      	cmp	r5, r2
 8018ce8:	d304      	bcc.n	8018cf4 <__mcmp+0x30>
 8018cea:	0018      	movs	r0, r3
 8018cec:	bd30      	pop	{r4, r5, pc}
 8018cee:	42a0      	cmp	r0, r4
 8018cf0:	d3f2      	bcc.n	8018cd8 <__mcmp+0x14>
 8018cf2:	e7fa      	b.n	8018cea <__mcmp+0x26>
 8018cf4:	425b      	negs	r3, r3
 8018cf6:	e7f8      	b.n	8018cea <__mcmp+0x26>

08018cf8 <__mdiff>:
 8018cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cfa:	000d      	movs	r5, r1
 8018cfc:	b085      	sub	sp, #20
 8018cfe:	0007      	movs	r7, r0
 8018d00:	0011      	movs	r1, r2
 8018d02:	0028      	movs	r0, r5
 8018d04:	0014      	movs	r4, r2
 8018d06:	f7ff ffdd 	bl	8018cc4 <__mcmp>
 8018d0a:	1e06      	subs	r6, r0, #0
 8018d0c:	d108      	bne.n	8018d20 <__mdiff+0x28>
 8018d0e:	0001      	movs	r1, r0
 8018d10:	0038      	movs	r0, r7
 8018d12:	f7ff fdb3 	bl	801887c <_Balloc>
 8018d16:	2301      	movs	r3, #1
 8018d18:	6146      	str	r6, [r0, #20]
 8018d1a:	6103      	str	r3, [r0, #16]
 8018d1c:	b005      	add	sp, #20
 8018d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d20:	2301      	movs	r3, #1
 8018d22:	9301      	str	r3, [sp, #4]
 8018d24:	2800      	cmp	r0, #0
 8018d26:	db04      	blt.n	8018d32 <__mdiff+0x3a>
 8018d28:	0023      	movs	r3, r4
 8018d2a:	002c      	movs	r4, r5
 8018d2c:	001d      	movs	r5, r3
 8018d2e:	2300      	movs	r3, #0
 8018d30:	9301      	str	r3, [sp, #4]
 8018d32:	6861      	ldr	r1, [r4, #4]
 8018d34:	0038      	movs	r0, r7
 8018d36:	f7ff fda1 	bl	801887c <_Balloc>
 8018d3a:	002f      	movs	r7, r5
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	9b01      	ldr	r3, [sp, #4]
 8018d40:	6926      	ldr	r6, [r4, #16]
 8018d42:	60c3      	str	r3, [r0, #12]
 8018d44:	3414      	adds	r4, #20
 8018d46:	00b3      	lsls	r3, r6, #2
 8018d48:	18e3      	adds	r3, r4, r3
 8018d4a:	9302      	str	r3, [sp, #8]
 8018d4c:	692b      	ldr	r3, [r5, #16]
 8018d4e:	3714      	adds	r7, #20
 8018d50:	009b      	lsls	r3, r3, #2
 8018d52:	18fb      	adds	r3, r7, r3
 8018d54:	9303      	str	r3, [sp, #12]
 8018d56:	0003      	movs	r3, r0
 8018d58:	4694      	mov	ip, r2
 8018d5a:	3314      	adds	r3, #20
 8018d5c:	cc20      	ldmia	r4!, {r5}
 8018d5e:	cf04      	ldmia	r7!, {r2}
 8018d60:	9201      	str	r2, [sp, #4]
 8018d62:	b2aa      	uxth	r2, r5
 8018d64:	4494      	add	ip, r2
 8018d66:	466a      	mov	r2, sp
 8018d68:	4661      	mov	r1, ip
 8018d6a:	8892      	ldrh	r2, [r2, #4]
 8018d6c:	0c2d      	lsrs	r5, r5, #16
 8018d6e:	1a8a      	subs	r2, r1, r2
 8018d70:	9901      	ldr	r1, [sp, #4]
 8018d72:	0c09      	lsrs	r1, r1, #16
 8018d74:	1a69      	subs	r1, r5, r1
 8018d76:	1415      	asrs	r5, r2, #16
 8018d78:	1949      	adds	r1, r1, r5
 8018d7a:	140d      	asrs	r5, r1, #16
 8018d7c:	b292      	uxth	r2, r2
 8018d7e:	0409      	lsls	r1, r1, #16
 8018d80:	430a      	orrs	r2, r1
 8018d82:	601a      	str	r2, [r3, #0]
 8018d84:	9a03      	ldr	r2, [sp, #12]
 8018d86:	46ac      	mov	ip, r5
 8018d88:	3304      	adds	r3, #4
 8018d8a:	42ba      	cmp	r2, r7
 8018d8c:	d8e6      	bhi.n	8018d5c <__mdiff+0x64>
 8018d8e:	9902      	ldr	r1, [sp, #8]
 8018d90:	001a      	movs	r2, r3
 8018d92:	428c      	cmp	r4, r1
 8018d94:	d305      	bcc.n	8018da2 <__mdiff+0xaa>
 8018d96:	3a04      	subs	r2, #4
 8018d98:	6813      	ldr	r3, [r2, #0]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d00e      	beq.n	8018dbc <__mdiff+0xc4>
 8018d9e:	6106      	str	r6, [r0, #16]
 8018da0:	e7bc      	b.n	8018d1c <__mdiff+0x24>
 8018da2:	cc04      	ldmia	r4!, {r2}
 8018da4:	b291      	uxth	r1, r2
 8018da6:	4461      	add	r1, ip
 8018da8:	140d      	asrs	r5, r1, #16
 8018daa:	0c12      	lsrs	r2, r2, #16
 8018dac:	1952      	adds	r2, r2, r5
 8018dae:	1415      	asrs	r5, r2, #16
 8018db0:	b289      	uxth	r1, r1
 8018db2:	0412      	lsls	r2, r2, #16
 8018db4:	430a      	orrs	r2, r1
 8018db6:	46ac      	mov	ip, r5
 8018db8:	c304      	stmia	r3!, {r2}
 8018dba:	e7e8      	b.n	8018d8e <__mdiff+0x96>
 8018dbc:	3e01      	subs	r6, #1
 8018dbe:	e7ea      	b.n	8018d96 <__mdiff+0x9e>

08018dc0 <__ulp>:
 8018dc0:	000b      	movs	r3, r1
 8018dc2:	4910      	ldr	r1, [pc, #64]	; (8018e04 <__ulp+0x44>)
 8018dc4:	b510      	push	{r4, lr}
 8018dc6:	4019      	ands	r1, r3
 8018dc8:	4b0f      	ldr	r3, [pc, #60]	; (8018e08 <__ulp+0x48>)
 8018dca:	18c9      	adds	r1, r1, r3
 8018dcc:	2900      	cmp	r1, #0
 8018dce:	dd04      	ble.n	8018dda <__ulp+0x1a>
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	000b      	movs	r3, r1
 8018dd4:	0010      	movs	r0, r2
 8018dd6:	0019      	movs	r1, r3
 8018dd8:	bd10      	pop	{r4, pc}
 8018dda:	4249      	negs	r1, r1
 8018ddc:	1509      	asrs	r1, r1, #20
 8018dde:	2200      	movs	r2, #0
 8018de0:	2300      	movs	r3, #0
 8018de2:	2913      	cmp	r1, #19
 8018de4:	dc04      	bgt.n	8018df0 <__ulp+0x30>
 8018de6:	2080      	movs	r0, #128	; 0x80
 8018de8:	0300      	lsls	r0, r0, #12
 8018dea:	4108      	asrs	r0, r1
 8018dec:	0003      	movs	r3, r0
 8018dee:	e7f1      	b.n	8018dd4 <__ulp+0x14>
 8018df0:	3914      	subs	r1, #20
 8018df2:	2001      	movs	r0, #1
 8018df4:	291e      	cmp	r1, #30
 8018df6:	dc02      	bgt.n	8018dfe <__ulp+0x3e>
 8018df8:	241f      	movs	r4, #31
 8018dfa:	1a61      	subs	r1, r4, r1
 8018dfc:	4088      	lsls	r0, r1
 8018dfe:	0002      	movs	r2, r0
 8018e00:	e7e8      	b.n	8018dd4 <__ulp+0x14>
 8018e02:	46c0      	nop			; (mov r8, r8)
 8018e04:	7ff00000 	.word	0x7ff00000
 8018e08:	fcc00000 	.word	0xfcc00000

08018e0c <__b2d>:
 8018e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018e0e:	0006      	movs	r6, r0
 8018e10:	6903      	ldr	r3, [r0, #16]
 8018e12:	3614      	adds	r6, #20
 8018e14:	009b      	lsls	r3, r3, #2
 8018e16:	18f3      	adds	r3, r6, r3
 8018e18:	1f1d      	subs	r5, r3, #4
 8018e1a:	682c      	ldr	r4, [r5, #0]
 8018e1c:	000f      	movs	r7, r1
 8018e1e:	0020      	movs	r0, r4
 8018e20:	9301      	str	r3, [sp, #4]
 8018e22:	f7ff fdd9 	bl	80189d8 <__hi0bits>
 8018e26:	2320      	movs	r3, #32
 8018e28:	1a1b      	subs	r3, r3, r0
 8018e2a:	603b      	str	r3, [r7, #0]
 8018e2c:	491c      	ldr	r1, [pc, #112]	; (8018ea0 <__b2d+0x94>)
 8018e2e:	280a      	cmp	r0, #10
 8018e30:	dc16      	bgt.n	8018e60 <__b2d+0x54>
 8018e32:	230b      	movs	r3, #11
 8018e34:	0027      	movs	r7, r4
 8018e36:	1a1b      	subs	r3, r3, r0
 8018e38:	40df      	lsrs	r7, r3
 8018e3a:	4339      	orrs	r1, r7
 8018e3c:	469c      	mov	ip, r3
 8018e3e:	000b      	movs	r3, r1
 8018e40:	2100      	movs	r1, #0
 8018e42:	42ae      	cmp	r6, r5
 8018e44:	d202      	bcs.n	8018e4c <__b2d+0x40>
 8018e46:	9901      	ldr	r1, [sp, #4]
 8018e48:	3908      	subs	r1, #8
 8018e4a:	6809      	ldr	r1, [r1, #0]
 8018e4c:	3015      	adds	r0, #21
 8018e4e:	4084      	lsls	r4, r0
 8018e50:	4660      	mov	r0, ip
 8018e52:	40c1      	lsrs	r1, r0
 8018e54:	430c      	orrs	r4, r1
 8018e56:	0022      	movs	r2, r4
 8018e58:	0010      	movs	r0, r2
 8018e5a:	0019      	movs	r1, r3
 8018e5c:	b003      	add	sp, #12
 8018e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e60:	2700      	movs	r7, #0
 8018e62:	42ae      	cmp	r6, r5
 8018e64:	d202      	bcs.n	8018e6c <__b2d+0x60>
 8018e66:	9d01      	ldr	r5, [sp, #4]
 8018e68:	3d08      	subs	r5, #8
 8018e6a:	682f      	ldr	r7, [r5, #0]
 8018e6c:	380b      	subs	r0, #11
 8018e6e:	4684      	mov	ip, r0
 8018e70:	1e03      	subs	r3, r0, #0
 8018e72:	d012      	beq.n	8018e9a <__b2d+0x8e>
 8018e74:	409c      	lsls	r4, r3
 8018e76:	2020      	movs	r0, #32
 8018e78:	4321      	orrs	r1, r4
 8018e7a:	003c      	movs	r4, r7
 8018e7c:	1ac0      	subs	r0, r0, r3
 8018e7e:	40c4      	lsrs	r4, r0
 8018e80:	4321      	orrs	r1, r4
 8018e82:	000b      	movs	r3, r1
 8018e84:	2100      	movs	r1, #0
 8018e86:	42b5      	cmp	r5, r6
 8018e88:	d901      	bls.n	8018e8e <__b2d+0x82>
 8018e8a:	3d04      	subs	r5, #4
 8018e8c:	6829      	ldr	r1, [r5, #0]
 8018e8e:	4664      	mov	r4, ip
 8018e90:	40c1      	lsrs	r1, r0
 8018e92:	40a7      	lsls	r7, r4
 8018e94:	430f      	orrs	r7, r1
 8018e96:	003a      	movs	r2, r7
 8018e98:	e7de      	b.n	8018e58 <__b2d+0x4c>
 8018e9a:	4321      	orrs	r1, r4
 8018e9c:	000b      	movs	r3, r1
 8018e9e:	e7fa      	b.n	8018e96 <__b2d+0x8a>
 8018ea0:	3ff00000 	.word	0x3ff00000

08018ea4 <__d2b>:
 8018ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018ea6:	001d      	movs	r5, r3
 8018ea8:	2101      	movs	r1, #1
 8018eaa:	0014      	movs	r4, r2
 8018eac:	9f08      	ldr	r7, [sp, #32]
 8018eae:	f7ff fce5 	bl	801887c <_Balloc>
 8018eb2:	032b      	lsls	r3, r5, #12
 8018eb4:	006d      	lsls	r5, r5, #1
 8018eb6:	0006      	movs	r6, r0
 8018eb8:	0b1b      	lsrs	r3, r3, #12
 8018eba:	0d6d      	lsrs	r5, r5, #21
 8018ebc:	d124      	bne.n	8018f08 <__d2b+0x64>
 8018ebe:	9301      	str	r3, [sp, #4]
 8018ec0:	2c00      	cmp	r4, #0
 8018ec2:	d027      	beq.n	8018f14 <__d2b+0x70>
 8018ec4:	4668      	mov	r0, sp
 8018ec6:	9400      	str	r4, [sp, #0]
 8018ec8:	f7ff fda0 	bl	8018a0c <__lo0bits>
 8018ecc:	9c00      	ldr	r4, [sp, #0]
 8018ece:	2800      	cmp	r0, #0
 8018ed0:	d01e      	beq.n	8018f10 <__d2b+0x6c>
 8018ed2:	9b01      	ldr	r3, [sp, #4]
 8018ed4:	2120      	movs	r1, #32
 8018ed6:	001a      	movs	r2, r3
 8018ed8:	1a09      	subs	r1, r1, r0
 8018eda:	408a      	lsls	r2, r1
 8018edc:	40c3      	lsrs	r3, r0
 8018ede:	4322      	orrs	r2, r4
 8018ee0:	6172      	str	r2, [r6, #20]
 8018ee2:	9301      	str	r3, [sp, #4]
 8018ee4:	9c01      	ldr	r4, [sp, #4]
 8018ee6:	61b4      	str	r4, [r6, #24]
 8018ee8:	1e63      	subs	r3, r4, #1
 8018eea:	419c      	sbcs	r4, r3
 8018eec:	3401      	adds	r4, #1
 8018eee:	6134      	str	r4, [r6, #16]
 8018ef0:	2d00      	cmp	r5, #0
 8018ef2:	d018      	beq.n	8018f26 <__d2b+0x82>
 8018ef4:	4b12      	ldr	r3, [pc, #72]	; (8018f40 <__d2b+0x9c>)
 8018ef6:	18ed      	adds	r5, r5, r3
 8018ef8:	2335      	movs	r3, #53	; 0x35
 8018efa:	182d      	adds	r5, r5, r0
 8018efc:	603d      	str	r5, [r7, #0]
 8018efe:	1a18      	subs	r0, r3, r0
 8018f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f02:	6018      	str	r0, [r3, #0]
 8018f04:	0030      	movs	r0, r6
 8018f06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018f08:	2280      	movs	r2, #128	; 0x80
 8018f0a:	0352      	lsls	r2, r2, #13
 8018f0c:	4313      	orrs	r3, r2
 8018f0e:	e7d6      	b.n	8018ebe <__d2b+0x1a>
 8018f10:	6174      	str	r4, [r6, #20]
 8018f12:	e7e7      	b.n	8018ee4 <__d2b+0x40>
 8018f14:	a801      	add	r0, sp, #4
 8018f16:	f7ff fd79 	bl	8018a0c <__lo0bits>
 8018f1a:	2401      	movs	r4, #1
 8018f1c:	9b01      	ldr	r3, [sp, #4]
 8018f1e:	6134      	str	r4, [r6, #16]
 8018f20:	6173      	str	r3, [r6, #20]
 8018f22:	3020      	adds	r0, #32
 8018f24:	e7e4      	b.n	8018ef0 <__d2b+0x4c>
 8018f26:	4b07      	ldr	r3, [pc, #28]	; (8018f44 <__d2b+0xa0>)
 8018f28:	18c0      	adds	r0, r0, r3
 8018f2a:	4b07      	ldr	r3, [pc, #28]	; (8018f48 <__d2b+0xa4>)
 8018f2c:	6038      	str	r0, [r7, #0]
 8018f2e:	18e3      	adds	r3, r4, r3
 8018f30:	009b      	lsls	r3, r3, #2
 8018f32:	18f3      	adds	r3, r6, r3
 8018f34:	6958      	ldr	r0, [r3, #20]
 8018f36:	f7ff fd4f 	bl	80189d8 <__hi0bits>
 8018f3a:	0164      	lsls	r4, r4, #5
 8018f3c:	1a20      	subs	r0, r4, r0
 8018f3e:	e7df      	b.n	8018f00 <__d2b+0x5c>
 8018f40:	fffffbcd 	.word	0xfffffbcd
 8018f44:	fffffbce 	.word	0xfffffbce
 8018f48:	3fffffff 	.word	0x3fffffff

08018f4c <__ratio>:
 8018f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f4e:	b085      	sub	sp, #20
 8018f50:	000f      	movs	r7, r1
 8018f52:	a902      	add	r1, sp, #8
 8018f54:	0006      	movs	r6, r0
 8018f56:	f7ff ff59 	bl	8018e0c <__b2d>
 8018f5a:	0004      	movs	r4, r0
 8018f5c:	000d      	movs	r5, r1
 8018f5e:	0038      	movs	r0, r7
 8018f60:	a903      	add	r1, sp, #12
 8018f62:	9400      	str	r4, [sp, #0]
 8018f64:	9501      	str	r5, [sp, #4]
 8018f66:	f7ff ff51 	bl	8018e0c <__b2d>
 8018f6a:	6936      	ldr	r6, [r6, #16]
 8018f6c:	693f      	ldr	r7, [r7, #16]
 8018f6e:	0002      	movs	r2, r0
 8018f70:	1bf7      	subs	r7, r6, r7
 8018f72:	017e      	lsls	r6, r7, #5
 8018f74:	46b4      	mov	ip, r6
 8018f76:	9f03      	ldr	r7, [sp, #12]
 8018f78:	9e02      	ldr	r6, [sp, #8]
 8018f7a:	000b      	movs	r3, r1
 8018f7c:	1bf6      	subs	r6, r6, r7
 8018f7e:	4466      	add	r6, ip
 8018f80:	0537      	lsls	r7, r6, #20
 8018f82:	2e00      	cmp	r6, #0
 8018f84:	dd07      	ble.n	8018f96 <__ratio+0x4a>
 8018f86:	1979      	adds	r1, r7, r5
 8018f88:	9101      	str	r1, [sp, #4]
 8018f8a:	9800      	ldr	r0, [sp, #0]
 8018f8c:	9901      	ldr	r1, [sp, #4]
 8018f8e:	f7e8 fc7d 	bl	800188c <__aeabi_ddiv>
 8018f92:	b005      	add	sp, #20
 8018f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f96:	1bcb      	subs	r3, r1, r7
 8018f98:	e7f7      	b.n	8018f8a <__ratio+0x3e>

08018f9a <__copybits>:
 8018f9a:	0013      	movs	r3, r2
 8018f9c:	3901      	subs	r1, #1
 8018f9e:	b510      	push	{r4, lr}
 8018fa0:	1149      	asrs	r1, r1, #5
 8018fa2:	6912      	ldr	r2, [r2, #16]
 8018fa4:	3101      	adds	r1, #1
 8018fa6:	0089      	lsls	r1, r1, #2
 8018fa8:	3314      	adds	r3, #20
 8018faa:	0092      	lsls	r2, r2, #2
 8018fac:	1841      	adds	r1, r0, r1
 8018fae:	189a      	adds	r2, r3, r2
 8018fb0:	429a      	cmp	r2, r3
 8018fb2:	d803      	bhi.n	8018fbc <__copybits+0x22>
 8018fb4:	2300      	movs	r3, #0
 8018fb6:	4281      	cmp	r1, r0
 8018fb8:	d803      	bhi.n	8018fc2 <__copybits+0x28>
 8018fba:	bd10      	pop	{r4, pc}
 8018fbc:	cb10      	ldmia	r3!, {r4}
 8018fbe:	c010      	stmia	r0!, {r4}
 8018fc0:	e7f6      	b.n	8018fb0 <__copybits+0x16>
 8018fc2:	c008      	stmia	r0!, {r3}
 8018fc4:	e7f7      	b.n	8018fb6 <__copybits+0x1c>

08018fc6 <__any_on>:
 8018fc6:	0002      	movs	r2, r0
 8018fc8:	6900      	ldr	r0, [r0, #16]
 8018fca:	b510      	push	{r4, lr}
 8018fcc:	3214      	adds	r2, #20
 8018fce:	114b      	asrs	r3, r1, #5
 8018fd0:	4298      	cmp	r0, r3
 8018fd2:	db12      	blt.n	8018ffa <__any_on+0x34>
 8018fd4:	dd0b      	ble.n	8018fee <__any_on+0x28>
 8018fd6:	201f      	movs	r0, #31
 8018fd8:	4001      	ands	r1, r0
 8018fda:	d008      	beq.n	8018fee <__any_on+0x28>
 8018fdc:	0098      	lsls	r0, r3, #2
 8018fde:	5884      	ldr	r4, [r0, r2]
 8018fe0:	0020      	movs	r0, r4
 8018fe2:	40c8      	lsrs	r0, r1
 8018fe4:	4088      	lsls	r0, r1
 8018fe6:	0001      	movs	r1, r0
 8018fe8:	2001      	movs	r0, #1
 8018fea:	428c      	cmp	r4, r1
 8018fec:	d104      	bne.n	8018ff8 <__any_on+0x32>
 8018fee:	009b      	lsls	r3, r3, #2
 8018ff0:	18d3      	adds	r3, r2, r3
 8018ff2:	4293      	cmp	r3, r2
 8018ff4:	d803      	bhi.n	8018ffe <__any_on+0x38>
 8018ff6:	2000      	movs	r0, #0
 8018ff8:	bd10      	pop	{r4, pc}
 8018ffa:	0003      	movs	r3, r0
 8018ffc:	e7f7      	b.n	8018fee <__any_on+0x28>
 8018ffe:	3b04      	subs	r3, #4
 8019000:	6819      	ldr	r1, [r3, #0]
 8019002:	2900      	cmp	r1, #0
 8019004:	d0f5      	beq.n	8018ff2 <__any_on+0x2c>
 8019006:	2001      	movs	r0, #1
 8019008:	e7f6      	b.n	8018ff8 <__any_on+0x32>
	...

0801900c <frexp>:
 801900c:	b570      	push	{r4, r5, r6, lr}
 801900e:	0014      	movs	r4, r2
 8019010:	2500      	movs	r5, #0
 8019012:	6025      	str	r5, [r4, #0]
 8019014:	4d10      	ldr	r5, [pc, #64]	; (8019058 <frexp+0x4c>)
 8019016:	004b      	lsls	r3, r1, #1
 8019018:	000a      	movs	r2, r1
 801901a:	085b      	lsrs	r3, r3, #1
 801901c:	42ab      	cmp	r3, r5
 801901e:	dc1a      	bgt.n	8019056 <frexp+0x4a>
 8019020:	001d      	movs	r5, r3
 8019022:	4305      	orrs	r5, r0
 8019024:	d017      	beq.n	8019056 <frexp+0x4a>
 8019026:	4d0d      	ldr	r5, [pc, #52]	; (801905c <frexp+0x50>)
 8019028:	42ab      	cmp	r3, r5
 801902a:	dc09      	bgt.n	8019040 <frexp+0x34>
 801902c:	2200      	movs	r2, #0
 801902e:	4b0c      	ldr	r3, [pc, #48]	; (8019060 <frexp+0x54>)
 8019030:	f7e9 f836 	bl	80020a0 <__aeabi_dmul>
 8019034:	2536      	movs	r5, #54	; 0x36
 8019036:	000a      	movs	r2, r1
 8019038:	004b      	lsls	r3, r1, #1
 801903a:	426d      	negs	r5, r5
 801903c:	085b      	lsrs	r3, r3, #1
 801903e:	6025      	str	r5, [r4, #0]
 8019040:	4d08      	ldr	r5, [pc, #32]	; (8019064 <frexp+0x58>)
 8019042:	151b      	asrs	r3, r3, #20
 8019044:	195b      	adds	r3, r3, r5
 8019046:	6825      	ldr	r5, [r4, #0]
 8019048:	18eb      	adds	r3, r5, r3
 801904a:	6023      	str	r3, [r4, #0]
 801904c:	4b06      	ldr	r3, [pc, #24]	; (8019068 <frexp+0x5c>)
 801904e:	401a      	ands	r2, r3
 8019050:	4b06      	ldr	r3, [pc, #24]	; (801906c <frexp+0x60>)
 8019052:	4313      	orrs	r3, r2
 8019054:	0019      	movs	r1, r3
 8019056:	bd70      	pop	{r4, r5, r6, pc}
 8019058:	7fefffff 	.word	0x7fefffff
 801905c:	000fffff 	.word	0x000fffff
 8019060:	43500000 	.word	0x43500000
 8019064:	fffffc02 	.word	0xfffffc02
 8019068:	800fffff 	.word	0x800fffff
 801906c:	3fe00000 	.word	0x3fe00000

08019070 <__ssprint_r>:
 8019070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019072:	6893      	ldr	r3, [r2, #8]
 8019074:	b087      	sub	sp, #28
 8019076:	9002      	str	r0, [sp, #8]
 8019078:	000c      	movs	r4, r1
 801907a:	0016      	movs	r6, r2
 801907c:	2b00      	cmp	r3, #0
 801907e:	d063      	beq.n	8019148 <__ssprint_r+0xd8>
 8019080:	6813      	ldr	r3, [r2, #0]
 8019082:	9303      	str	r3, [sp, #12]
 8019084:	2300      	movs	r3, #0
 8019086:	001f      	movs	r7, r3
 8019088:	9305      	str	r3, [sp, #20]
 801908a:	2f00      	cmp	r7, #0
 801908c:	d02e      	beq.n	80190ec <__ssprint_r+0x7c>
 801908e:	68a5      	ldr	r5, [r4, #8]
 8019090:	42af      	cmp	r7, r5
 8019092:	d347      	bcc.n	8019124 <__ssprint_r+0xb4>
 8019094:	2390      	movs	r3, #144	; 0x90
 8019096:	89a2      	ldrh	r2, [r4, #12]
 8019098:	00db      	lsls	r3, r3, #3
 801909a:	421a      	tst	r2, r3
 801909c:	d042      	beq.n	8019124 <__ssprint_r+0xb4>
 801909e:	2003      	movs	r0, #3
 80190a0:	6921      	ldr	r1, [r4, #16]
 80190a2:	6823      	ldr	r3, [r4, #0]
 80190a4:	1a5b      	subs	r3, r3, r1
 80190a6:	9304      	str	r3, [sp, #16]
 80190a8:	6963      	ldr	r3, [r4, #20]
 80190aa:	4343      	muls	r3, r0
 80190ac:	0fd8      	lsrs	r0, r3, #31
 80190ae:	18c3      	adds	r3, r0, r3
 80190b0:	105b      	asrs	r3, r3, #1
 80190b2:	9301      	str	r3, [sp, #4]
 80190b4:	9b04      	ldr	r3, [sp, #16]
 80190b6:	9801      	ldr	r0, [sp, #4]
 80190b8:	3301      	adds	r3, #1
 80190ba:	19db      	adds	r3, r3, r7
 80190bc:	4283      	cmp	r3, r0
 80190be:	d900      	bls.n	80190c2 <__ssprint_r+0x52>
 80190c0:	9301      	str	r3, [sp, #4]
 80190c2:	0553      	lsls	r3, r2, #21
 80190c4:	d544      	bpl.n	8019150 <__ssprint_r+0xe0>
 80190c6:	9901      	ldr	r1, [sp, #4]
 80190c8:	9802      	ldr	r0, [sp, #8]
 80190ca:	f7fb fab7 	bl	801463c <_malloc_r>
 80190ce:	1e05      	subs	r5, r0, #0
 80190d0:	d114      	bne.n	80190fc <__ssprint_r+0x8c>
 80190d2:	230c      	movs	r3, #12
 80190d4:	9a02      	ldr	r2, [sp, #8]
 80190d6:	2001      	movs	r0, #1
 80190d8:	6013      	str	r3, [r2, #0]
 80190da:	2340      	movs	r3, #64	; 0x40
 80190dc:	89a2      	ldrh	r2, [r4, #12]
 80190de:	4240      	negs	r0, r0
 80190e0:	4313      	orrs	r3, r2
 80190e2:	81a3      	strh	r3, [r4, #12]
 80190e4:	2300      	movs	r3, #0
 80190e6:	60b3      	str	r3, [r6, #8]
 80190e8:	6073      	str	r3, [r6, #4]
 80190ea:	e02f      	b.n	801914c <__ssprint_r+0xdc>
 80190ec:	9b03      	ldr	r3, [sp, #12]
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	9305      	str	r3, [sp, #20]
 80190f2:	9b03      	ldr	r3, [sp, #12]
 80190f4:	685f      	ldr	r7, [r3, #4]
 80190f6:	3308      	adds	r3, #8
 80190f8:	9303      	str	r3, [sp, #12]
 80190fa:	e7c6      	b.n	801908a <__ssprint_r+0x1a>
 80190fc:	9a04      	ldr	r2, [sp, #16]
 80190fe:	6921      	ldr	r1, [r4, #16]
 8019100:	f7fb fcd5 	bl	8014aae <memcpy>
 8019104:	89a3      	ldrh	r3, [r4, #12]
 8019106:	4a18      	ldr	r2, [pc, #96]	; (8019168 <__ssprint_r+0xf8>)
 8019108:	401a      	ands	r2, r3
 801910a:	2380      	movs	r3, #128	; 0x80
 801910c:	4313      	orrs	r3, r2
 801910e:	81a3      	strh	r3, [r4, #12]
 8019110:	9b04      	ldr	r3, [sp, #16]
 8019112:	6125      	str	r5, [r4, #16]
 8019114:	18ed      	adds	r5, r5, r3
 8019116:	6025      	str	r5, [r4, #0]
 8019118:	003d      	movs	r5, r7
 801911a:	9b01      	ldr	r3, [sp, #4]
 801911c:	9a04      	ldr	r2, [sp, #16]
 801911e:	6163      	str	r3, [r4, #20]
 8019120:	1a9b      	subs	r3, r3, r2
 8019122:	60a3      	str	r3, [r4, #8]
 8019124:	42bd      	cmp	r5, r7
 8019126:	d900      	bls.n	801912a <__ssprint_r+0xba>
 8019128:	003d      	movs	r5, r7
 801912a:	002a      	movs	r2, r5
 801912c:	9905      	ldr	r1, [sp, #20]
 801912e:	6820      	ldr	r0, [r4, #0]
 8019130:	f7ff fb91 	bl	8018856 <memmove>
 8019134:	68a3      	ldr	r3, [r4, #8]
 8019136:	1b5b      	subs	r3, r3, r5
 8019138:	60a3      	str	r3, [r4, #8]
 801913a:	6823      	ldr	r3, [r4, #0]
 801913c:	195d      	adds	r5, r3, r5
 801913e:	68b3      	ldr	r3, [r6, #8]
 8019140:	6025      	str	r5, [r4, #0]
 8019142:	1bdb      	subs	r3, r3, r7
 8019144:	60b3      	str	r3, [r6, #8]
 8019146:	d1d1      	bne.n	80190ec <__ssprint_r+0x7c>
 8019148:	2000      	movs	r0, #0
 801914a:	6070      	str	r0, [r6, #4]
 801914c:	b007      	add	sp, #28
 801914e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019150:	9a01      	ldr	r2, [sp, #4]
 8019152:	9802      	ldr	r0, [sp, #8]
 8019154:	f7fb fcf0 	bl	8014b38 <_realloc_r>
 8019158:	1e05      	subs	r5, r0, #0
 801915a:	d1d9      	bne.n	8019110 <__ssprint_r+0xa0>
 801915c:	6921      	ldr	r1, [r4, #16]
 801915e:	9802      	ldr	r0, [sp, #8]
 8019160:	f7fe ff78 	bl	8018054 <_free_r>
 8019164:	e7b5      	b.n	80190d2 <__ssprint_r+0x62>
 8019166:	46c0      	nop			; (mov r8, r8)
 8019168:	fffffb7f 	.word	0xfffffb7f

0801916c <__register_exitproc>:
 801916c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801916e:	4d29      	ldr	r5, [pc, #164]	; (8019214 <__register_exitproc+0xa8>)
 8019170:	0006      	movs	r6, r0
 8019172:	6828      	ldr	r0, [r5, #0]
 8019174:	9301      	str	r3, [sp, #4]
 8019176:	9100      	str	r1, [sp, #0]
 8019178:	0017      	movs	r7, r2
 801917a:	f7ff fb5f 	bl	801883c <__retarget_lock_acquire_recursive>
 801917e:	4b26      	ldr	r3, [pc, #152]	; (8019218 <__register_exitproc+0xac>)
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	001c      	movs	r4, r3
 8019184:	34fc      	adds	r4, #252	; 0xfc
 8019186:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8019188:	2800      	cmp	r0, #0
 801918a:	d103      	bne.n	8019194 <__register_exitproc+0x28>
 801918c:	334d      	adds	r3, #77	; 0x4d
 801918e:	33ff      	adds	r3, #255	; 0xff
 8019190:	0018      	movs	r0, r3
 8019192:	64e3      	str	r3, [r4, #76]	; 0x4c
 8019194:	6843      	ldr	r3, [r0, #4]
 8019196:	2b1f      	cmp	r3, #31
 8019198:	dd18      	ble.n	80191cc <__register_exitproc+0x60>
 801919a:	4b20      	ldr	r3, [pc, #128]	; (801921c <__register_exitproc+0xb0>)
 801919c:	2b00      	cmp	r3, #0
 801919e:	d105      	bne.n	80191ac <__register_exitproc+0x40>
 80191a0:	6828      	ldr	r0, [r5, #0]
 80191a2:	f7ff fb4c 	bl	801883e <__retarget_lock_release_recursive>
 80191a6:	2001      	movs	r0, #1
 80191a8:	4240      	negs	r0, r0
 80191aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80191ac:	20c8      	movs	r0, #200	; 0xc8
 80191ae:	0040      	lsls	r0, r0, #1
 80191b0:	f7fb fa30 	bl	8014614 <malloc>
 80191b4:	2800      	cmp	r0, #0
 80191b6:	d0f3      	beq.n	80191a0 <__register_exitproc+0x34>
 80191b8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80191ba:	2300      	movs	r3, #0
 80191bc:	6002      	str	r2, [r0, #0]
 80191be:	22c4      	movs	r2, #196	; 0xc4
 80191c0:	0052      	lsls	r2, r2, #1
 80191c2:	6043      	str	r3, [r0, #4]
 80191c4:	64e0      	str	r0, [r4, #76]	; 0x4c
 80191c6:	5083      	str	r3, [r0, r2]
 80191c8:	3204      	adds	r2, #4
 80191ca:	5083      	str	r3, [r0, r2]
 80191cc:	6843      	ldr	r3, [r0, #4]
 80191ce:	2e00      	cmp	r6, #0
 80191d0:	d014      	beq.n	80191fc <__register_exitproc+0x90>
 80191d2:	009a      	lsls	r2, r3, #2
 80191d4:	1882      	adds	r2, r0, r2
 80191d6:	0011      	movs	r1, r2
 80191d8:	3188      	adds	r1, #136	; 0x88
 80191da:	600f      	str	r7, [r1, #0]
 80191dc:	2101      	movs	r1, #1
 80191de:	0004      	movs	r4, r0
 80191e0:	4099      	lsls	r1, r3
 80191e2:	3485      	adds	r4, #133	; 0x85
 80191e4:	34ff      	adds	r4, #255	; 0xff
 80191e6:	6865      	ldr	r5, [r4, #4]
 80191e8:	32fc      	adds	r2, #252	; 0xfc
 80191ea:	430d      	orrs	r5, r1
 80191ec:	6065      	str	r5, [r4, #4]
 80191ee:	9d01      	ldr	r5, [sp, #4]
 80191f0:	60d5      	str	r5, [r2, #12]
 80191f2:	2e02      	cmp	r6, #2
 80191f4:	d102      	bne.n	80191fc <__register_exitproc+0x90>
 80191f6:	68a2      	ldr	r2, [r4, #8]
 80191f8:	4311      	orrs	r1, r2
 80191fa:	60a1      	str	r1, [r4, #8]
 80191fc:	1c5a      	adds	r2, r3, #1
 80191fe:	6042      	str	r2, [r0, #4]
 8019200:	3302      	adds	r3, #2
 8019202:	9a00      	ldr	r2, [sp, #0]
 8019204:	009b      	lsls	r3, r3, #2
 8019206:	501a      	str	r2, [r3, r0]
 8019208:	4b02      	ldr	r3, [pc, #8]	; (8019214 <__register_exitproc+0xa8>)
 801920a:	6818      	ldr	r0, [r3, #0]
 801920c:	f7ff fb17 	bl	801883e <__retarget_lock_release_recursive>
 8019210:	2000      	movs	r0, #0
 8019212:	e7ca      	b.n	80191aa <__register_exitproc+0x3e>
 8019214:	20000a64 	.word	0x20000a64
 8019218:	0801ca10 	.word	0x0801ca10
 801921c:	08014615 	.word	0x08014615

08019220 <_calloc_r>:
 8019220:	b510      	push	{r4, lr}
 8019222:	4351      	muls	r1, r2
 8019224:	f7fb fa0a 	bl	801463c <_malloc_r>
 8019228:	1e04      	subs	r4, r0, #0
 801922a:	d01a      	beq.n	8019262 <_calloc_r+0x42>
 801922c:	0003      	movs	r3, r0
 801922e:	3b08      	subs	r3, #8
 8019230:	685a      	ldr	r2, [r3, #4]
 8019232:	2303      	movs	r3, #3
 8019234:	439a      	bics	r2, r3
 8019236:	3a04      	subs	r2, #4
 8019238:	2a24      	cmp	r2, #36	; 0x24
 801923a:	d819      	bhi.n	8019270 <_calloc_r+0x50>
 801923c:	0003      	movs	r3, r0
 801923e:	2a13      	cmp	r2, #19
 8019240:	d90b      	bls.n	801925a <_calloc_r+0x3a>
 8019242:	2100      	movs	r1, #0
 8019244:	3308      	adds	r3, #8
 8019246:	6001      	str	r1, [r0, #0]
 8019248:	6041      	str	r1, [r0, #4]
 801924a:	2a1b      	cmp	r2, #27
 801924c:	d905      	bls.n	801925a <_calloc_r+0x3a>
 801924e:	6081      	str	r1, [r0, #8]
 8019250:	60c1      	str	r1, [r0, #12]
 8019252:	2a24      	cmp	r2, #36	; 0x24
 8019254:	d007      	beq.n	8019266 <_calloc_r+0x46>
 8019256:	0003      	movs	r3, r0
 8019258:	3310      	adds	r3, #16
 801925a:	2200      	movs	r2, #0
 801925c:	601a      	str	r2, [r3, #0]
 801925e:	605a      	str	r2, [r3, #4]
 8019260:	609a      	str	r2, [r3, #8]
 8019262:	0020      	movs	r0, r4
 8019264:	bd10      	pop	{r4, pc}
 8019266:	0003      	movs	r3, r0
 8019268:	6101      	str	r1, [r0, #16]
 801926a:	3318      	adds	r3, #24
 801926c:	6141      	str	r1, [r0, #20]
 801926e:	e7f4      	b.n	801925a <_calloc_r+0x3a>
 8019270:	2100      	movs	r1, #0
 8019272:	f7fb fc25 	bl	8014ac0 <memset>
 8019276:	e7f4      	b.n	8019262 <_calloc_r+0x42>

08019278 <_sbrk>:
 8019278:	4b05      	ldr	r3, [pc, #20]	; (8019290 <_sbrk+0x18>)
 801927a:	0002      	movs	r2, r0
 801927c:	6819      	ldr	r1, [r3, #0]
 801927e:	2900      	cmp	r1, #0
 8019280:	d101      	bne.n	8019286 <_sbrk+0xe>
 8019282:	4904      	ldr	r1, [pc, #16]	; (8019294 <_sbrk+0x1c>)
 8019284:	6019      	str	r1, [r3, #0]
 8019286:	6818      	ldr	r0, [r3, #0]
 8019288:	1882      	adds	r2, r0, r2
 801928a:	601a      	str	r2, [r3, #0]
 801928c:	4770      	bx	lr
 801928e:	46c0      	nop			; (mov r8, r8)
 8019290:	20006b6c 	.word	0x20006b6c
 8019294:	20007110 	.word	0x20007110

08019298 <_init>:
 8019298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801929a:	46c0      	nop			; (mov r8, r8)
 801929c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801929e:	bc08      	pop	{r3}
 80192a0:	469e      	mov	lr, r3
 80192a2:	4770      	bx	lr

080192a4 <_fini>:
 80192a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192a6:	46c0      	nop			; (mov r8, r8)
 80192a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80192aa:	bc08      	pop	{r3}
 80192ac:	469e      	mov	lr, r3
 80192ae:	4770      	bx	lr
